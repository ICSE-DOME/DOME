{"id": [815, 7593, 15847, 8709, 8873, 6188, 2486, 6866, 6788, 4817, 9485, 8281, 19388, 10222, 12227, 12142, 1833, 10299, 15407, 8871, 6610, 7200, 5089, 11236, 1402, 5411, 4595, 4088, 517, 19962, 5118, 15363, 824, 15935, 16185, 5322, 17062, 12788, 15179, 18135, 10738, 15081, 7551, 3695, 13722, 11808, 19806, 8732, 9174, 12367, 17535, 19869, 5202, 16585, 5284, 4870, 3574, 5044, 4603, 7826, 12852, 17811, 4861, 272, 4744, 16730, 6771, 5805, 5049, 7946, 10044, 13422, 10081, 15778, 8864, 17574, 16469, 16861, 13411, 5651, 9405, 10666, 18783, 8591, 18448, 9968, 2084, 19056, 10961, 19723, 16734, 3239, 15493, 8298, 16598, 9584, 18670, 11727, 1178, 6171, 15984, 5440, 15236, 15117, 15022, 12129, 3460, 8755, 9439, 3134, 7153, 280, 18561, 5245, 6995, 11470, 2845, 11666, 1053, 1346, 9367, 19070, 8936, 16123, 13791, 5967, 6527, 4908, 16515, 16072, 8528, 4185, 19019, 12642, 18384, 1179, 10342, 4259, 2584, 15713, 2426, 16019, 6331, 3101, 18385, 4528, 4732, 18629, 9898, 6854, 13068, 1292, 5841, 4035, 5149, 11422, 5236, 2623, 10572, 2417, 15793, 16098, 11573, 11800, 15757, 19460, 1038, 210, 5707, 16406, 2464, 13898, 13519, 15282, 7318, 17871, 3992, 4502, 18464, 11737, 3892, 5382, 5209, 9283, 10026, 6544, 14520, 14955, 13603, 18931, 3363, 16626, 2770, 11962, 17014, 14895, 270, 19778, 13600, 90, 16842, 18837, 18043, 6268, 11864, 3676, 14901, 14112, 14444, 10349, 4915, 6970, 13936, 5009, 2342, 11226, 5481, 9048, 13743, 15535, 4378, 391, 6468, 16050, 1422, 17183, 2045, 9298, 11812, 8654, 11676, 2415, 9046, 17348, 16015, 2391, 2507, 19246, 15454, 3225, 17262, 13198, 10345, 6154, 6944, 15745, 19322, 13949, 2636, 3933, 787, 533, 10100, 13205, 16858, 10230, 3953, 16568, 17039, 7445, 4782, 16687, 12325, 3370, 9182, 12222, 14255, 17731, 8791, 6344, 2546, 9549, 18986, 9053, 629, 19937, 13696, 1390, 7799, 19644, 4165, 10461, 9534, 3180, 11539, 9212, 424, 15415, 9928, 15928, 3508, 17211, 18437, 3050, 9718, 12980, 9951, 12080, 5094, 10671, 3350, 9447, 15006, 6298, 12395, 17047, 9505, 8345, 19978, 16912, 12824, 17325, 9191, 5854, 14326, 14309, 3833, 12662, 7723, 14740, 1187, 18329, 4577, 13469, 17664, 15116, 13274, 2048, 17245, 10065, 13679, 12830, 423, 10856, 17404, 16828, 11738, 16165, 7986, 2606, 17732, 6234, 12870, 5737, 6611, 15494, 15527, 10303, 10826, 2261, 14294, 14104, 779, 6196, 5507, 5205, 7359, 16119, 751, 2610, 5370, 14533, 9082, 14666, 5449, 17113, 16253, 2834, 7494, 212, 10186, 15967, 18149, 18214, 9975, 4003, 7904, 12347, 19343, 15917, 15023, 3427, 2425, 4910, 17009, 12209, 16062, 1960, 18202, 15516, 14047, 2667, 10818, 716, 9168, 9356, 7713, 11288, 10993, 15020, 16275, 14807, 2408, 4702, 14933, 10843, 14277, 1904, 18703, 9148, 3994, 12468, 8484, 15352, 4351, 11545, 14010, 14816, 8882, 17547, 5579, 18173, 10918, 1026, 17762, 3625, 16839, 12822, 12103, 15880, 18605, 11998, 12301, 15027, 5616, 10265, 16437, 9842, 3080, 5747, 1181, 5438, 11512, 2846, 4399, 11178, 8602, 10746, 16230, 16751, 1997, 7229, 15, 16623, 3906, 5504, 2340, 4615, 6018, 15492, 2451, 3882, 19845, 14003, 16495, 4316, 1240, 18840, 10455, 41, 15225, 3777, 2714, 11109, 16603, 13857, 1942, 8511, 3401, 13960, 11210, 240, 17496, 2478, 3057, 7227, 4490, 15987, 7135, 3516, 1890, 882, 5389, 16832, 19359, 10119, 17651, 12202, 17822, 4571, 2874, 1160, 3195, 4410, 10996, 19724, 14111, 15734, 2461, 7818, 13437, 4922, 19274, 1893, 19988, 19294, 11107, 12170, 11735, 8505, 17233, 11386, 19901, 764, 9713, 14172, 8652, 973, 18806, 19926, 1337, 18800, 17692, 1061, 10722, 15650, 14208, 12193, 4057, 5334, 16349, 4692, 1952, 17141, 5774, 16192, 165, 11147, 2295, 16448, 12591, 9152, 3092, 3456, 8051, 10531, 6567, 6068, 5047, 4783, 15257, 15941, 9477, 18405, 12965, 1041, 12291, 2422, 2640, 11186, 17345, 647, 812, 17145, 13537, 16868, 1894, 12417, 6343, 13868, 18255, 7416, 1967, 12791, 14079, 1710, 14964, 9793, 1193, 19601, 19293, 9748, 17771, 6846, 12178, 8354, 17758, 6915, 1571, 10430, 6733, 14643, 529, 9195, 13454, 18518, 4400, 17729, 146, 13003, 18501, 1027, 15737, 11447, 10968, 2178, 14559, 10170, 1975, 10456, 3533, 4289, 4092, 12992, 434, 3068, 15552, 19749, 11189, 16620, 7578, 7736, 10492, 18991, 16816, 13972, 13444, 8845, 5430, 6730, 17860, 16698, 4475, 456, 13601, 12419, 6383, 17791, 18696, 1805, 16227, 14180, 10183, 9633, 19230, 12375, 8831, 17570, 2880, 2777, 9925, 8664, 11277, 13475, 18922, 1856, 9639, 19386, 633, 16636, 16517, 7402, 17422, 12991, 7748, 19546, 3820, 7261, 10165, 4533, 1762, 6552, 8236, 5029, 18184, 11368, 17645, 12031, 2982, 453, 6576, 794, 5573, 15894, 11977, 6782, 14421, 613, 17231, 605, 5272, 8734, 9956, 19512, 6320, 8463, 14235, 10273, 2543, 13265, 7510, 6710, 13839, 17389, 14786, 4625, 1887, 14959, 3183, 16355, 12262, 5167, 11575, 4025, 7479, 18853, 5855, 13447, 15515, 8252, 1750, 890, 4661, 2850, 18253, 6500, 6616, 1380, 5136, 10868, 5987, 4205, 11728, 19431, 4679, 3339, 5419, 11262, 16638, 5562, 17191, 9981, 9732, 17905, 13174, 7525, 829, 3804, 3912, 14618, 10145, 7680, 19136, 18632, 9638, 9752, 15708, 18627, 16731, 8157, 8536, 3378, 11298, 19433, 13360, 19344, 7660, 4883, 17426, 14839, 3052, 10869, 19047, 2637, 11940, 8527, 13607, 7858, 4388, 6277, 19427, 14270, 18011, 9216, 6923, 4123, 4498, 2890, 9581, 10270, 9322, 6983, 19172, 7452, 17236, 19998, 9033, 11166, 15220, 9745, 7717, 10175, 14368, 16027, 14365, 16578, 18024, 18147, 17179, 16648, 18441, 4469, 17268, 7368, 17251, 7498, 8697, 8390, 17913, 8270, 5538, 1573, 9889, 3855, 7082, 9217, 9635, 18259, 19083, 9969, 1793, 14768, 11900, 1334, 13281, 17333, 10822, 5884, 14854, 14940, 18869, 10708, 5381, 12331, 2710, 11125, 13705, 7267, 1787, 5659, 13804, 16843, 10055, 4713, 13850, 1192, 11405, 9700, 5700, 8179, 2385, 14430, 16482, 2861, 2051, 407, 18517, 5980, 14458, 12330, 18233, 18606, 13548, 6219, 18760, 18567, 9874, 1913, 3083, 2910, 10987, 2438, 12029, 7981, 12568, 15715, 14809, 2359, 11024, 14057, 12666, 16282, 18958, 10343, 6772, 2316, 8172, 10365, 8093, 3314, 5892, 4998, 6713, 3096, 5916, 19673, 9080, 14836, 6586, 8483, 10643, 6590, 14752, 3244, 19573, 1652, 17112, 18491, 15087, 14195, 19908, 11515, 1542, 13168, 9208, 17497, 12261, 18819, 12720, 17481, 19781, 11646, 2104, 13534, 14273, 7775, 16829, 2501, 10541, 12125, 17107, 14363, 10307, 490, 11555, 11213, 12353, 12672, 16481, 18993, 4905, 17353, 3831, 8343, 148, 5178, 19399, 7684, 8570, 1957, 7148, 3084, 6058, 3211, 12169, 12783, 10816, 17049, 19893, 12602, 770, 10174, 8939, 11245, 3596, 1262, 1148, 7248, 3231, 11837, 16082, 897, 16280, 2476, 6872, 6432, 1080, 1563, 5907, 11285, 12792, 5102, 18961, 16096, 8094, 18203, 3111, 4007, 18074, 6401, 16927, 16740, 8309, 2690, 15597, 194, 16565, 14569, 8323, 8277, 7931, 9410, 17185, 3539, 7944, 30, 11208, 4269, 105, 12213, 8187, 2524, 15329, 863, 16182, 1911, 496, 7608, 3615, 11126, 14820, 9016, 14536, 19037, 3187, 715, 7145, 9802, 1065, 12694, 4403, 12583, 397, 16563, 16791, 19320, 9632, 13082, 19680, 6619, 60, 7568, 15559, 18160, 20, 8812, 3480, 9118, 16693, 16728, 8935, 8121, 8778, 7262, 9516, 17080, 3919, 17073, 18716, 10903, 6909, 1852, 5020, 13014, 12283, 17298, 12136, 5982, 12750, 4542, 12949, 8676, 10563, 18298, 15876, 18523, 5355, 2080, 16459, 5694, 17737, 18487, 1298, 16535, 1769, 6720, 12913, 15188, 7165, 2767, 4847, 3475, 6393, 14727, 11870, 3507, 19726, 10482, 13670, 17730, 17909, 2143, 15319, 19103, 19588, 2868, 2311, 13989, 14662, 3818, 14303, 9221, 11578, 16822, 14336, 15644, 2950, 1943, 6871, 17416, 4503, 3794, 15668, 9810, 9360, 9302, 10719, 167, 14014, 15084, 5631, 3276, 4002, 13836, 5496, 17939, 3905, 450, 7346, 14006, 18608, 19759, 8829, 1802, 4128, 19517, 4889, 1274, 2568, 16073, 11896, 14419, 6050, 8749, 13792, 9369, 10734, 15065, 5326, 8160, 11915, 3399, 17314, 13741, 3026, 14327, 17127, 18427, 18352, 1237, 1870, 1594, 4409, 9021, 2236, 3005, 18224, 171, 15585, 4919, 3159, 14392, 414, 2199, 11018, 9407, 19519, 1711, 12489, 11510, 1709, 11338, 12967, 13477, 13703, 3555, 18250, 10570, 12513, 15648, 2057, 1365, 18547, 19622, 14629, 14413, 15103, 1928, 16101, 4168, 587, 18604, 4438, 11117, 7868, 5744, 19107, 8446, 15913, 302, 12146, 17042, 10091, 4382, 8685, 9675, 15040, 13940, 8256, 15240, 8644, 13448, 18249, 13063, 6956, 3022, 1188, 5972, 12341, 16943, 8314, 7853, 13493, 14227, 6138, 9073, 2470, 712, 13002, 15722, 6830, 17702, 12717, 18382, 9670, 16018, 18484, 10147, 4026, 15141, 2918, 19403, 19789, 9548, 14771, 16286, 12942, 19088, 6231, 18244, 18097, 3325, 14974, 11202, 3915, 1482, 14706, 19202, 6946, 6045, 15944, 8097, 5814, 11757, 5073, 8161, 15382, 757, 16519, 15327, 11548, 6566, 8458, 6289, 2679, 14911, 10751, 17979, 7714, 18431, 8738, 3403, 16060, 3618, 8212, 12793, 395, 14097, 13944, 2366, 16788, 14517, 14447, 8839, 5915, 9315, 10600, 16806, 19641, 7353, 15426, 13332, 10985, 6209, 1369, 15064, 13803, 4207, 8395, 16925, 15461, 15799, 13272, 12364, 10857, 17690, 14878, 17573, 12804, 4929, 13417, 16945, 9771, 9241, 7081, 13872, 6446, 18771, 12295, 19338, 11135, 13001, 3275, 5234, 19600, 3766, 10000, 13667, 9822, 2669, 2999, 18059, 15082, 14621, 8204, 5133, 1088, 16059, 7005, 16348, 9105, 2506, 17417, 6076, 15343, 12401, 9104, 16689, 7357, 1490, 13011, 9210, 8513, 18520, 19930, 679, 6971, 16433, 6349, 19814, 7096, 19160, 16625, 19191, 13931, 328, 8507, 2447, 2431, 11122, 7021, 16887, 9392, 4077, 17887, 18529, 5331, 13644, 6757, 2875, 12297, 14244, 17479, 11146, 18995, 5750, 5712, 6146, 5722, 5844, 11535, 10124, 19522, 13049, 19501, 14142, 4963, 1142, 4901, 17041, 17351, 3715, 13313, 3016, 11384, 11886, 10138, 17104, 12182, 15138, 9019, 10805, 4960, 2304, 2660, 2095, 18282, 11020, 4839, 4838, 15947, 17716, 2579, 9200, 4855, 13305, 2112, 1779, 18570, 9154, 3624, 18962, 1246, 12289, 4551, 9204, 11607, 16069, 14840, 2331, 9540, 11096, 3842, 13544, 16352, 2582, 7016, 7484, 17869, 14136, 6514, 6823, 1293, 17706, 15119, 15324, 1558, 10226, 14465, 5863, 19823, 5710, 2064, 4222, 10842, 11971, 17249, 18834, 17469, 3082, 9323, 19467, 16895, 14048, 19727, 2118, 6166, 12571, 6183, 2475, 16383, 19367, 17332, 16967, 1799, 18122, 2505, 4602, 18908, 17999, 7664, 19162, 19973, 12345, 9640, 18591, 18260, 5552, 1394, 8989, 14961, 4865, 9306, 13114, 4961, 6255, 18980, 6100, 1559, 9098, 5293, 3474, 11326, 19545, 19126, 16845, 7995, 7945, 4281, 5935, 1867, 3598, 10564, 12157, 6228, 18780, 2446, 7594, 1703, 4866, 12255, 9159, 14633, 10581, 15884, 13380, 15041, 12137, 4158, 7274, 5223, 9930, 7870, 8193, 19803, 5341, 900, 12739, 5615, 13491, 10627, 15946, 9380, 6137, 4517, 14036, 16038, 1317, 4105, 12140, 17746, 8417, 9087, 8561, 16237, 13983, 4660, 10524, 6048, 1770, 5794, 17343, 18997, 5140, 13364, 18944, 12340, 17738, 7817, 5117, 19324, 2388, 1556, 12253, 3701, 11532, 19903, 3421, 14942, 13370, 12894, 7461, 5888, 12184, 11479, 7501, 11722, 14695, 15194, 14896, 8678, 10244, 12688, 19936, 4572, 12956, 17335, 19527, 853, 1344, 3976, 10139, 6961, 11188, 9601, 17910, 11781, 2998, 9037, 14916, 18884, 14682, 13698, 15226, 4557, 7932, 7992, 13170, 9252, 12126, 14833, 4605, 8347, 1132, 14641, 11027, 19763, 6455, 4759, 16732, 10128, 7648, 10616, 2094, 14411, 6786, 17751, 10113, 4972, 14159, 18933, 4375, 6381, 527, 7845, 10754, 13570, 2376, 16540, 17588, 8700, 13499, 3393, 15135, 11885, 4335, 19859, 931, 6085, 8657, 1247, 8235, 12562, 13173, 8691, 5945, 16591, 2528, 6833, 6252, 19761, 5350, 18111, 745, 18095, 16770, 12729, 3550, 15334, 9755, 6385, 636, 2326, 15443, 9814, 11295, 14089, 12019, 8568, 3162, 15509, 6540, 17766, 18892, 19032, 5171, 12938, 7776, 1689, 294, 15858, 9177, 10157, 5132, 6195, 621, 15774, 5106, 5057, 5403, 10664, 15909, 15083, 13889, 25, 1574, 12381, 18732, 17538, 604, 3511, 7669, 6134, 13359, 17591, 5798, 14582, 13496, 10703, 6745, 5993, 13829, 5921, 7755, 18494, 14054, 11427, 12317, 6263, 9260, 2482, 16977, 2615, 14297, 16419, 7355, 6669, 12199, 278, 55, 17323, 11798, 4709, 1316, 9627, 588, 117, 15029, 5277, 8624, 8904, 1871, 4754, 8039, 13036, 19366, 6747, 8984, 12867, 9231, 6342, 12451, 11750, 11641, 9363, 11671, 4112, 12404, 15302, 2337, 4422, 3646, 17534, 6216, 9142, 7313, 9774, 10220, 5116, 5998, 13353, 18929, 17024, 17553, 6044, 14141, 12777, 7628, 18596, 18411, 9660, 17288, 9244, 5970, 17744, 19554, 9214, 15738, 885, 19325, 8050, 13700, 14146, 19309, 12046, 6206, 7198, 7157, 4887, 101, 13034, 15916, 1338, 17904, 960, 5401, 4936, 10557, 8475, 16421, 14571, 1845, 2169, 9620, 5977, 9288, 222, 8071, 16490, 17774, 8655, 3520, 10318, 16133, 18297, 4058, 8762, 15243, 3573, 13285, 14489, 3473, 8138, 8539, 16594, 2672, 15666, 10942, 15210, 6532, 12808, 13434, 9025, 8229, 7386, 16196, 15442, 12382, 15273, 13863, 6785, 2531, 2394, 511, 3463, 660, 15354, 5536, 8972, 4566, 3826, 4815, 16304, 6936, 7172, 17841, 16857, 3872, 3398, 15755, 2961, 19627, 10965, 9588, 11784, 11695, 8613, 6975, 14804, 13438, 16031, 9996, 14936, 19764, 9717, 17134, 17600, 19190, 5193, 63, 18707, 6095, 1289, 4585, 13366, 15611, 18380, 238, 9897, 18236, 9225, 8373, 13817, 121, 420, 11668, 18073, 19310, 18020, 1984, 19752, 18366], "code": ["\tpublic Object convertFromObject(Class convertTo, Object object, Object errSource) {\n\t    if (object instanceof Property) {\n\t        object = ((Property) object).toObject();\n\t    }\n\t    // avoid recursion on errors\n\t    if (errSource instanceof Property) {\n\t        errSource = \"Property:\" + ((Property) errSource).getPropertyName();\n\t    }\n\t    return getTypeConvertorManager().convertFromObject(\n\t    \tconvertTo, object, errSource\n\t\t);\n\t}\n", "private final void computePawnHashData(Position pos,PawnHashData ph){\n  int score=0;\n  long wPawns=pos.pieceTypeBB[Piece.WPAWN];\n  long wPawnFiles=BitBoard.southFill(wPawns) & 0xff;\n  int wDouble=Long.bitCount(wPawns) - Long.bitCount(wPawnFiles);\n  int wIslands=Long.bitCount(((~wPawnFiles) >>> 1) & wPawnFiles);\n  int wIsolated=Long.bitCount(~(wPawnFiles << 1) & wPawnFiles & ~(wPawnFiles >>> 1));\n  long bPawns=pos.pieceTypeBB[Piece.BPAWN];\n  long bPawnFiles=BitBoard.southFill(bPawns) & 0xff;\n  int bDouble=Long.bitCount(bPawns) - Long.bitCount(bPawnFiles);\n  int bIslands=Long.bitCount(((~bPawnFiles) >>> 1) & bPawnFiles);\n  int bIsolated=Long.bitCount(~(bPawnFiles << 1) & bPawnFiles & ~(bPawnFiles >>> 1));\n  score-=(wDouble - bDouble) * 25;\n  score-=(wIslands - bIslands) * 15;\n  score-=(wIsolated - bIsolated) * 15;\n  long wPawnAttacks=(((wPawns & BitBoard.maskBToHFiles) << 7) | ((wPawns & BitBoard.maskAToGFiles) << 9));\n  long bPawnAttacks=(((bPawns & BitBoard.maskBToHFiles) >>> 9) | ((bPawns & BitBoard.maskAToGFiles) >>> 7));\n  long wBackward=wPawns & ~((wPawns | bPawns) >>> 8) & (bPawnAttacks >>> 8)& ~BitBoard.northFill(wPawnAttacks);\n  wBackward&=(((wPawns & BitBoard.maskBToHFiles) >>> 9) | ((wPawns & BitBoard.maskAToGFiles) >>> 7));\n  wBackward&=~BitBoard.northFill(bPawnFiles);\n  long bBackward=bPawns & ~((wPawns | bPawns) << 8) & (wPawnAttacks << 8)& ~BitBoard.southFill(bPawnAttacks);\n  bBackward&=(((bPawns & BitBoard.maskBToHFiles) << 7) | ((bPawns & BitBoard.maskAToGFiles) << 9));\n  bBackward&=~BitBoard.northFill(wPawnFiles);\n  score-=(Long.bitCount(wBackward) - Long.bitCount(bBackward)) * 15;\n  long passedPawnsW=wPawns & ~BitBoard.southFill(bPawns | bPawnAttacks | (wPawns >>> 8));\n  final int[] ppBonus={-1,24,26,30,36,55,100,-1};\n  int passedBonusW=0;\n  if (passedPawnsW != 0) {\n    long guardedPassedW=passedPawnsW & (((wPawns & BitBoard.maskBToHFiles) << 7) | ((wPawns & BitBoard.maskAToGFiles) << 9));\n    passedBonusW+=15 * Long.bitCount(guardedPassedW);\n    long m=passedPawnsW;\n    while (m != 0) {\n      int sq=Long.numberOfTrailingZeros(m);\n      int y=Position.getY(sq);\n      passedBonusW+=ppBonus[y];\n      m&=m - 1;\n    }\n  }\n  long passedPawnsB=bPawns & ~BitBoard.northFill(wPawns | wPawnAttacks | (bPawns << 8));\n  int passedBonusB=0;\n  if (passedPawnsB != 0) {\n    long guardedPassedB=passedPawnsB & (((bPawns & BitBoard.maskBToHFiles) >>> 9) | ((bPawns & BitBoard.maskAToGFiles) >>> 7));\n    passedBonusB+=15 * Long.bitCount(guardedPassedB);\n    long m=passedPawnsB;\n    while (m != 0) {\n      int sq=Long.numberOfTrailingZeros(m);\n      int y=Position.getY(sq);\n      passedBonusB+=ppBonus[7 - y];\n      m&=m - 1;\n    }\n  }\n  ph.key=pos.pawnZobristHash();\n  ph.score=score;\n  ph.passedBonusW=(short)passedBonusW;\n  ph.passedBonusB=(short)passedBonusB;\n  ph.passedPawnsW=passedPawnsW;\n  ph.passedPawnsB=passedPawnsB;\n}\n", "void outRemoveEntry ( IReplicationOutContext context , IEntryHolder entryHolder ) ;", "  public void takeStep() throws VisADException, RemoteException {\n    if (direction) current++;\n    else current--;\n    if (animationSet != null) {\n      current = animationSet.clipCurrent(current);\n      init();\n    }\n    getDisplayRenderer().render_trigger();\n    changeControl(false);\n  }\n", "public void addAuthToken(ClientRequest request, String token) {\n        if(token != null && !token.startsWith(\"Bearer \")) {\n            if(token.toUpperCase().startsWith(\"BEARER \")) {\n                // other cases of Bearer\n                token = \"Bearer \" + token.substring(7);\n            } else {\n                token = \"Bearer \" + token;\n            }\n        }\n        request.getRequestHeaders().put(Headers.AUTHORIZATION, token);\n    }", "   public EventListener (String groups, String locators) throws IOException  {\n      cache = new DirectoryService ();\n      if (groups != null) {\n         cache.setGroups (groups);\n      }\n      if (locators != null) {\n         cache.setLookupLocators (locators);\n      }\n      cache.addListener (this);\n   }\n", "\tprivate void enableBluetooth(){\n\t\tif (!bluetoothAdapter.isEnabled()) {\n\t\t    //the standard way of turning on bluetooth equires user input and is therefore not suitable\n\t\t\t//Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);\n\t\t    //enableBtIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\t\t    //startActivity(enableBtIntent);\n\t\t\tbluetoothAdapter.enable();\n\t\t}\n\t}\n", "public ServiceRefAmp getLocalService()\n  {\n    ServiceRefAmp serviceRefRoot = _podRoot.getLocalService();\n    //ServiceRefAmp serviceRefRoot = _podRoot.getClientService();\n    \n    if (serviceRefRoot == null) {\n      return null;\n    }\n    \n    ServiceRefActive serviceRefLocal = _serviceRefLocal;\n    \n    if (serviceRefLocal != null) {\n      ServiceRefAmp serviceRef = serviceRefLocal.getService(serviceRefRoot);\n      \n      if (serviceRef != null) {\n        return serviceRef;\n      }\n    }\n    \n    ServiceRefAmp serviceRef = serviceRefRoot.onLookup(_path);\n\n    _serviceRefLocal = new ServiceRefActive(serviceRefRoot, serviceRef);\n    \n    // serviceRef.start();\n    \n    return serviceRef;\n  }", "public static void putLongField(Object obj,long fieldOff,long val){\n  UNSAFE.putLong(obj,fieldOff,val);\n}\n", "    public Node getRootNode() {\n        JavaScriptObject root = getRootNode(jsObj);\n        return root == null ? null : new Node(root);\n    }\n", "private int insertTailoredNodeAfter(int index, int strength) {\n        assert(0 <= index && index < nodes.size());\n        if(strength >= Collator.SECONDARY) {\n            index = findCommonNode(index, Collator.SECONDARY);\n            if(strength >= Collator.TERTIARY) {\n                index = findCommonNode(index, Collator.TERTIARY);\n            }\n        }\n        // Postpone insertion:\n        // Insert the new node before the next one with a strength at least as strong.\n        long node = nodes.elementAti(index);\n        int nextIndex;\n        while((nextIndex = nextIndexFromNode(node)) != 0) {\n            node = nodes.elementAti(nextIndex);\n            if(strengthFromNode(node) <= strength) { break; }\n            // Skip the next node which has a weaker (larger) strength than the new one.\n            index = nextIndex;\n        }\n        node = IS_TAILORED | nodeFromStrength(strength);\n        return insertNodeBetween(index, nextIndex, node);\n    }", "public ByteBuffer getWordBytes(ByteBuffer target) {\r\n\t\ttarget = BufferUtils.clearAndEnsureCapacity(target, wordBuffer.remaining());\r\n\t\twordBuffer.mark();\r\n\t\ttarget.put(wordBuffer);\r\n\t\twordBuffer.reset();\r\n\t\ttarget.flip();\r\n\t\treturn target;\r\n\t}", "CompletableFuture < WriteResult > appendToStream ( String stream , ExpectedVersion expectedVersion , Iterable < EventData > events , UserCredentials userCredentials ) ;", "private void updateChildrenInfo(Map myChild) {\n        if (myChild != null) {\n            Iterator values = myChild.values().iterator();\n            while (values.hasNext()) {\n                ModuleItem childMI = (ModuleItem) values.next();\n                if (childMI.getInstance() instanceof PmiModuleAggregate) {\n                    // no op                    \n                } else {\n                    ((PmiModuleAggregate) this.instance).add(childMI.getInstance());\n                    ((PmiAbstractModule) this.instance).updateDataList();\n                }\n                updateChildrenInfo(childMI.children);\n            }\n        }\n    }", "public static void validateInterimFinalCluster(final Cluster interimCluster,\n                                                   final Cluster finalCluster) {\n        validateClusterPartitionCounts(interimCluster, finalCluster);\n        validateClusterZonesSame(interimCluster, finalCluster);\n        validateClusterNodeCounts(interimCluster, finalCluster);\n        validateClusterNodeState(interimCluster, finalCluster);\n        return;\n    }", "\tpublic String accListSrcTasks(){\n\t\ttaskListMode = TASK_MODE_SRC;\n\t\treturn accListTasks();\n\t}\n", "@Override\n    public Message buildMessage(Byte channelByte, InputStream inputStream) {\n        byte sysexCommandByte;\n        try {\n            sysexCommandByte = (byte) inputStream.read();\n        } catch (IOException e) {\n            log.error(\"Error reading Sysex command byte.\");\n            return null;\n        }\n\n        ByteArrayOutputStream messageBodyBuilder = new ByteArrayOutputStream(16);\n        try {\n            int messagePiece;\n            while ((messagePiece = inputStream.read()) != -1) {\n                if ((byte) messagePiece == CommandBytes.END_SYSEX.getCommandByte()) {\n                    break;\n                }\n                messageBodyBuilder.write(messagePiece);\n            }\n        } catch (IOException e) {\n            log.error(\"Error reading Sysex message body for command {}.\",\n                    FirmataHelper.bytesToHexString(sysexCommandByte));\n            return null;\n        }\n\n        byte[] messageBodyBytes = messageBodyBuilder.toByteArray();\n\n        try {\n            messageBodyBuilder.close();\n        } catch (IOException e) {\n            log.error(\"Programming error. Cannot close our byte buffer.\");\n        }\n\n        SysexMessageBuilder messageBuilder = messageBuilderMap.get(sysexCommandByte);\n        if (messageBuilder == null) {\n            log.error(\"There is no Sysex message parser registered for command {}. Body: {}\",\n                    FirmataHelper.bytesToHexString(sysexCommandByte),\n                    FirmataHelper.bytesToHexString(messageBodyBuilder.toByteArray()));\n            return null;\n        }\n\n        return messageBuilder.buildMessage(messageBodyBytes);\n    }", "    public void addAttribute(Attribute attribute) {\n        interactor.getAttributeList().add(attribute);\n    }\n", "public static HttpRequest options ( final URL url ) throws HttpRequestException { return new HttpRequest ( url , METHOD_OPTIONS ) ; }", "static int transform(int crc, int[][] lookupTable) {\n    int cb1 = lookupTable[0][crc & 0xff];\n    int cb2 = lookupTable[1][(crc >>>= 8) & 0xff];\n    int cb3 = lookupTable[2][(crc >>>= 8) & 0xff];\n    int cb4 = lookupTable[3][(crc >>>= 8) & 0xff];\n    return cb1 ^ cb2 ^ cb3 ^ cb4;\n  }", "public com.google.privacy.dlp.v2.FixedSizeBucketingConfig getFixedSizeBucketingConfig() {\n    if (transformationCase_ == 5) {\n      return (com.google.privacy.dlp.v2.FixedSizeBucketingConfig) transformation_;\n    }\n    return com.google.privacy.dlp.v2.FixedSizeBucketingConfig.getDefaultInstance();\n  }", "public PolynomialSplineFunction calculateSpline(){\n\t\t\n\t\t\n\t\t/*\n\t\t * 1.Calculate the minimum bounding rectangle\n\t\t */\n\t\tArrayList<Point2D.Double> points = new ArrayList<Point2D.Double>();\n\t\tfor(int i = 0; i < t.size(); i++){\n\t\t\tPoint2D.Double p = new Point2D.Double();\n\t\t\tp.setLocation(t.get(i).x, t.get(i).y);\n\t\t\tpoints.add(p);\n\t\t}\n\t\tPoint2D.Double[] rect = null;\n\t\ttry{\n\t\t\trect = RotatingCalipers.getMinimumBoundingRectangle(points);\n\t\t}\n\t\tcatch(IllegalArgumentException e)\n\t\t{\n\t\t\n\t\t}\n\t\tcatch(EmptyStackException e){\n\t\t\n\t\t}\n\t\t\n\t\t/*\n\t\t * 1.1 Rotate that the major axis is parallel with the xaxis\n\t\t */\n\t\t\n\t\tPoint2D.Double majorDirection = null;\n\t\t\n\t\tPoint2D.Double p1 = rect[2]; //top left\n\t\tPoint2D.Double p2 = p1.distance(rect[1]) > p1.distance(rect[3]) ? rect[1] : rect[3]; //Point to long side\n\t\tPoint2D.Double p3 = p1.distance(rect[1]) > p1.distance(rect[3]) ? rect[3] : rect[1]; //Point to short side\n\t\tmajorDirection = new Point2D.Double(p2.x-p1.x, p2.y-p1.y);\n\t\tdouble width = p1.distance(p2);\n\t\tdouble inRad = -1*Math.atan2(majorDirection.y, majorDirection.x);\n\n\t\tboolean doTransform = (Math.abs(Math.abs(inRad)-Math.PI)>0.001);\n\n\t\tif(doTransform)\n\t\t{\n\t\t\tangleRotated = inRad;\n\t\t\tfor(int i = 0; i < t.size(); i++){\n\t\t\t\tdouble x = t.get(i).x;\n\t\t\t\tdouble y = t.get(i).y;\n\t\t\t\tdouble newX = x*Math.cos(inRad)-y*Math.sin(inRad);\n\t\t\t\tdouble newY = x*Math.sin(inRad)+y*Math.cos(inRad);\n\t\t\t\trotatedTrajectory.add(newX, newY, 0);\n\t\t\t\tpoints.get(i).setLocation(newX, newY);\n\t\t\t}\n\t\t\tfor(int i = 0; i < rect.length; i++){\n\t\t\t\trect[i].setLocation(rect[i].x*Math.cos(inRad)-rect[i].y*Math.sin(inRad), rect[i].x*Math.sin(inRad)+rect[i].y*Math.cos(inRad));\n\t\t\t}\n\n\t\t\tp1 = rect[2]; //top left\n\t\t\tp2 = p1.distance(rect[1]) > p1.distance(rect[3]) ? rect[1] : rect[3]; //Point to long side\n\t\t\tp3 = p1.distance(rect[1]) > p1.distance(rect[3]) ? rect[3] : rect[1]; //Point to short side\n\t\t}\n\t\telse{\n\t\t\tangleRotated = 0;\n\t\t\trotatedTrajectory = t;\n\t\t}\n\t\t\n\t\t/*\n\t\t * 2. Divide the rectangle in n equal segments\n\t\t * 2.1 Calculate line in main direction\n\t\t * 2.2 Project the points in onto this line\n\t\t * 2.3 Calculate the distance between the start of the line and the projected point\n\t\t * 2.4 Assign point to segment according to distance of (2.3)\n\t\t */\n\t\tList<List<Point2D.Double>> pointsInSegments =null;\n\t\tboolean allSegmentsContainingAtLeastTwoPoints = true;\n\t\tdo{\n\t\t\t\n\t\t\tallSegmentsContainingAtLeastTwoPoints = true;\n\t\t\tdouble segmentWidth = p1.distance(p2)/nSegments;\n\t\t\tpointsInSegments = new ArrayList<List<Point2D.Double>>(nSegments);\n\t\t\tfor(int i = 0; i < nSegments; i++){\n\t\t\t\tpointsInSegments.add(new ArrayList<Point2D.Double>());\n\t\t\t}\n\t\t\tfor(int i = 0; i < points.size(); i++){\n\t\t\t\tPoint2D.Double projPoint  = projectPointToLine(p1, p2, points.get(i));\n\t\t\t\tint index = (int)(p1.distance(projPoint)/segmentWidth);\n\t\t\t\t\n\t\t\t\tif(index>(nSegments-1)){\n\t\t\t\t\tindex = (nSegments-1);\n\t\t\t\t}\n\t\t\t\tpointsInSegments.get(index).add(points.get(i));\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i = 0; i < pointsInSegments.size(); i++){\n\t\t\t\tif(pointsInSegments.get(i).size()<2){\n\t\t\t\t\tif(nSegments>2){\n\t\t\t\t\t\tnSegments--;\n\t\t\t\t\t\ti = pointsInSegments.size();\n\t\t\t\t\t\tallSegmentsContainingAtLeastTwoPoints = false;\n\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}while(allSegmentsContainingAtLeastTwoPoints==false);\n\t\t\n\t\t\n\t\t/*\n\t\t * 3. Calculate the mean standard deviation over each segment: <s>\n\t\t */\n\t\t\n\t\tPoint2D.Double eMajorP1 = new Point2D.Double(p1.x - (p3.x-p1.x)/2.0,p1.y - (p3.y-p1.y)/2.0); \n\t\tPoint2D.Double eMajorP2 = new Point2D.Double(p2.x - (p3.x-p1.x)/2.0,p2.y - (p3.y-p1.y)/2.0); \n\t\tdouble sumMean=0;\n\t\tint Nsum = 0;\n\t\tfor(int i = 0; i < nSegments; i++){\n\t\t\tStandardDeviation sd = new StandardDeviation();\n\t\t\tdouble[] distances = new double[pointsInSegments.get(i).size()];\n\t\t\tfor(int j = 0; j < pointsInSegments.get(i).size(); j++){\n\t\t\t\tint factor = 1;\n\t\t\t\tif(isLeft(eMajorP1, eMajorP2, pointsInSegments.get(i).get(j))){\n\t\t\t\t\tfactor = -1;\n\t\t\t\t}\n\t\t\t\tdistances[j] = factor*distancePointLine(eMajorP1, eMajorP2, pointsInSegments.get(i).get(j));\n\t\t\t}\n\t\t\tif(distances.length >0){\n\t\t\t\tsd.setData(distances);\n\t\n\t\t\t\tsumMean += sd.evaluate();\n\t\t\t\n\t\t\t\tNsum++;\n\t\t\t}\n\t\t}\n\t\tdouble s = sumMean/Nsum;\n\t\tif(s<0.000000000001){\n\t\t\ts = width/nSegments;\n\t\t}\n\t\n\t\t/*\n\t\t * 4. Build a kd-tree\n\t\t */\n\t\tKDTree<Point2D.Double> kdtree = new KDTree<Point2D.Double>(2);\n\t\t\n\t\tfor(int i = 0; i< points.size(); i++){\n\t\t\ttry {\n\t\t\t\t//To ensure that all points have a different key, add small random number\n\n\t\t\t\tkdtree.insert(new double[]{points.get(i).x,points.get(i).y}, points.get(i));\n\t\t\t} catch (KeySizeException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (KeyDuplicateException e) {\n\t\t\t\t//Do nothing! It is not important\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t/*\n\t\t * 5. Using the first point f in trajectory and calculate the center of mass\n\t\t * of all points around f (radius: 3*<s>))\n\t\t */\n\t\tList<Point2D.Double> near = null;\n\t\t\n\t\tPoint2D.Double first = minDistancePointToLine(p1, p3, points);\n\t\tdouble r1 = 3*s;\n\t\ttry {\n\t\t\t\n\t\t\tnear = kdtree.nearestEuclidean(new double[]{first.x ,first.y}, r1);\n\t\t\t\n\t\t} catch (KeySizeException e) {\n\t\t\te.printStackTrace();\n\t\t} \n\n\t\tdouble cx = 0;\n\t\tdouble cy = 0;\n\t\tfor(int i = 0; i < near.size(); i++){\n\t\t\tcx += near.get(i).x;\n\t\t\tcy += near.get(i).y;\n\t\t}\n\t\tcx /= near.size();\n\t\tcy /= near.size();\n\n\t\tsplineSupportPoints = new ArrayList<Point2D.Double>();\n\t\tsplineSupportPoints.add(new Point2D.Double(cx, cy));\n\t\t\n\t\t/* \n\t\t * 6. The second point is determined by finding the center-of-mass of particles in the p/2 radian \n\t\t * section of an annulus, r1 < r < 2r1, that is directed toward the angle with the highest number \n\t\t * of particles within p/2 radians.\n\t\t * 7. This second point is then used as the center of the annulus for choosing the third point, and the process is repeated (6. & 7.).\n\t\t */\n\t\t\n\t\t/*\n\t\t * 6.1 Find all points in the annolous\n\t\t */\n\t\t\n\t\t\n\t\t/*\n\t\t * 6.2 Write each point in a coordinate system centered at the center of the sphere, calculate direction and\n\t\t * check if it in the allowed bounds\n\t\t */\n\t\tint nCircleSegments = 100;\n\t\tdouble deltaRad = 2*Math.PI/nCircleSegments;\n\t\tboolean stop = false;\n\t\tint minN = 7;\n\t\tdouble tempr1 = r1;\n\t\tdouble allowedDeltaDirection = 0.5*Math.PI;\n\t\t\t\t\n\t\twhile(stop==false){\n\t\t\tList<Point2D.Double> nearestr1 = null;\n\t\t\tList<Point2D.Double> nearest2xr1 = null;\n\t\t\ttry {\n\t\t\t\tnearestr1 = kdtree.nearestEuclidean(new double[]{splineSupportPoints.get(splineSupportPoints.size()-1).x, splineSupportPoints.get(splineSupportPoints.size()-1).y},tempr1);\n\t\t\t\tnearest2xr1 = kdtree.nearestEuclidean(new double[]{splineSupportPoints.get(splineSupportPoints.size()-1).x, splineSupportPoints.get(splineSupportPoints.size()-1).y},2*tempr1);\n\t\t\t} catch (KeySizeException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tnearest2xr1.removeAll(nearestr1);\n\t\t\t\n\t\t\tdouble lThreshRad = 0;\n\t\t\tdouble hThreshRad = Math.PI/2;\n\t\t\tdouble stopThresh = 2*Math.PI;\n\t\t\tif(splineSupportPoints.size()>1){\n\t\t\t\tdouble directionInRad = Math.atan2(splineSupportPoints.get(splineSupportPoints.size()-1).y-splineSupportPoints.get(splineSupportPoints.size()-2).y, \n\t\t\t\t\t\tsplineSupportPoints.get(splineSupportPoints.size()-1).x-splineSupportPoints.get(splineSupportPoints.size()-2).x)+Math.PI;\n\t\t\t\tlThreshRad = directionInRad - allowedDeltaDirection/2 - Math.PI/4; \n\t\t\t\tif(lThreshRad<0){\n\t\t\t\t\tlThreshRad = 2*Math.PI+lThreshRad;\n\t\t\t\t}\n\t\t\t\tif(lThreshRad>2*Math.PI){\n\t\t\t\t\tlThreshRad = lThreshRad - 2*Math.PI;\n\t\t\t\t}\n\t\t\t\thThreshRad = directionInRad + allowedDeltaDirection/2 + Math.PI/4; \n\t\t\t\tif(hThreshRad<0){\n\t\t\t\t\thThreshRad = 2*Math.PI+hThreshRad;\n\t\t\t\t}\n\t\t\t\tif(hThreshRad>2*Math.PI){\n\t\t\t\t\thThreshRad = hThreshRad - 2*Math.PI;\n\t\t\t\t}\n\t\t\t\tstopThresh = directionInRad + allowedDeltaDirection/2 - Math.PI/4; \n\t\t\t\tif(stopThresh>2*Math.PI){\n\t\t\t\t\tstopThresh = stopThresh - 2*Math.PI;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tdouble newCx=0;\n\t\t\tdouble newCy=0;\n\t\t\tint newCN = 0;\n\t\t\tint candN = 0;\n\t\t\t\n\t\t\t//Find center with highest density of points\n\t\t\tdouble lastDist = 0;\n\t\t\tdouble newDist = 0;\n\t\t\tdo{ \n\t\t\t\tlastDist=Math.min(Math.abs(lThreshRad-stopThresh), 2*Math.PI-Math.abs(lThreshRad-stopThresh));\n\n\t\t\t\tcandN=0;\n\t\t\t\tdouble candCx =0;\n\t\t\t\tdouble candCy =0;\n\t\t\t\n\t\t\t\tfor(int i = 0; i < nearest2xr1.size(); i++){\n\t\t\t\t\tPoint2D.Double centerOfCircle = splineSupportPoints.get(splineSupportPoints.size()-1);\n\t\t\t\t\tVector2d relativeToCircle = new Vector2d(nearest2xr1.get(i).x-centerOfCircle.x,nearest2xr1.get(i).y-centerOfCircle.y);\n\t\t\t\t\trelativeToCircle.normalize();\n\t\t\t\t\tdouble angleInRadians = Math.atan2(relativeToCircle.y, relativeToCircle.x)+Math.PI;\n\n\t\t\t\t\tif(lThreshRad<hThreshRad){\n\t\t\t\t\t\tif(angleInRadians>lThreshRad && angleInRadians < hThreshRad){\n\t\t\t\t\t\t\tcandCx+=nearest2xr1.get(i).x;\n\t\t\t\t\t\t\tcandCy+=nearest2xr1.get(i).y;\n\t\t\t\t\t\t\tcandN++;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tif(angleInRadians>lThreshRad || angleInRadians < hThreshRad){\n\t\t\t\t\t\t\tcandCx+=nearest2xr1.get(i).x;\n\t\t\t\t\t\t\tcandCy+=nearest2xr1.get(i).y;\n\t\t\t\t\t\t\tcandN++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(candN>0 && candN > newCN ){\n\t\t\t\t\tcandCx /= candN;\n\t\t\t\t\tcandCy /= candN;\n\t\t\t\t\tnewCx = candCx;\n\t\t\t\t\tnewCy = candCy;\n\t\t\t\t\tnewCN = candN;\n\t\t\t\t}\n\t\t\t\tlThreshRad += deltaRad;\n\t\t\t\thThreshRad += deltaRad;\n\t\t\t\tif(lThreshRad>2*Math.PI){\n\t\t\t\t\tlThreshRad = lThreshRad - 2*Math.PI;\n\t\t\t\t}\n\t\t\t\tif(hThreshRad>2*Math.PI){\n\t\t\t\t\thThreshRad = hThreshRad - 2*Math.PI;\n\t\t\t\t}\n\t\t\t\tnewDist=Math.min(Math.abs(lThreshRad-stopThresh), 2*Math.PI-Math.abs(lThreshRad-stopThresh));\n\t\t\t\n\t\t\t}while((newDist-lastDist)>0);\n\t\t\t\n\t\t\t\n\t\t\t//Check if the new center is valid\n\t\t\tif(splineSupportPoints.size()>1){\n\t\t\t\tdouble currentDirectionInRad = Math.atan2(splineSupportPoints.get(splineSupportPoints.size()-1).y-splineSupportPoints.get(splineSupportPoints.size()-2).y, \n\t\t\t\t\t\tsplineSupportPoints.get(splineSupportPoints.size()-1).x-splineSupportPoints.get(splineSupportPoints.size()-2).x)+Math.PI;\n\t\t\t\tdouble candDirectionInRad = Math.atan2(newCy-splineSupportPoints.get(splineSupportPoints.size()-1).y,\n\t\t\t\t\t\tnewCx-splineSupportPoints.get(splineSupportPoints.size()-1).x)+Math.PI;\n\t\t\t\tdouble dDir = Math.max(currentDirectionInRad, candDirectionInRad)-Math.min(currentDirectionInRad, candDirectionInRad);\n\t\t\t\tif(dDir>2*Math.PI){\n\t\t\t\t\tdDir = 2*Math.PI-dDir;\n\t\t\t\t}\n\t\t\t\tif(dDir>allowedDeltaDirection){\n\n\t\t\t\t\tstop = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean enoughPoints = (newCN<minN);\n\t\t\tboolean isNormalRadius = Math.abs(tempr1-r1)<Math.pow(10, -18);\n\t\t\tboolean isExtendedRadius = Math.abs(tempr1-3*r1)<Math.pow(10, -18);\n\t\t\t\n\t\t\tif(enoughPoints&& isNormalRadius){\n\t\t\t\t//Not enough points, extend search radius\n\t\t\t\ttempr1 = 3*r1;\n\t\t\t}\n\t\t\telse if(enoughPoints && isExtendedRadius){\n\t\t\t\t//Despite radius extension: Not enough points!\n\t\t\t\tstop = true;\n\t\t\t}\n\t\t\telse if(stop==false){\n\t\t\t\tsplineSupportPoints.add(new Point2D.Double(newCx,newCy));\n\t\t\t\ttempr1 = r1;\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\t//Sort\n\t\t\t\tCollections.sort(splineSupportPoints, new Comparator<Point2D.Double>() {\n\n\t\t\t\t\tpublic int compare(Point2D.Double o1, Point2D.Double o2) {\n\t\t\t\t\t\tif(o1.x<o2.x){\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(o1.x>o2.x){\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\n\t\t\n\t\t//Add endpoints\n\t\tif(splineSupportPoints.size()>1){\n\t\t\tVector2d start = new Vector2d(splineSupportPoints.get(0).x-splineSupportPoints.get(1).x, splineSupportPoints.get(0).y-splineSupportPoints.get(1).y);\n\t\t\tstart.normalize();\n\t\t\tstart.scale(r1*8);\n\t\t\tsplineSupportPoints.add(0, new Point2D.Double(splineSupportPoints.get(0).x+start.x, splineSupportPoints.get(0).y+start.y));\n\t\t\t\n\t\t\tVector2d end = new Vector2d(splineSupportPoints.get(splineSupportPoints.size()-1).x-splineSupportPoints.get(splineSupportPoints.size()-2).x, \n\t\t\t\t\tsplineSupportPoints.get(splineSupportPoints.size()-1).y-splineSupportPoints.get(splineSupportPoints.size()-2).y);\n\t\t\tend.normalize();\n\t\t\tend.scale(r1*6);\n\t\t\tsplineSupportPoints.add(new Point2D.Double(splineSupportPoints.get(splineSupportPoints.size()-1).x+end.x, splineSupportPoints.get(splineSupportPoints.size()-1).y+end.y));\n\t\t}\n\t\telse{\n\t\t\tVector2d majordir = new Vector2d(-1, 0);\n\t\t\tmajordir.normalize();\n\t\t\tmajordir.scale(r1*8);\n\t\t\tsplineSupportPoints.add(0, new Point2D.Double(splineSupportPoints.get(0).x+majordir.x, splineSupportPoints.get(0).y+majordir.y));\n\t\t\tmajordir.scale(-1);\n\t\t\tsplineSupportPoints.add(new Point2D.Double(splineSupportPoints.get(splineSupportPoints.size()-1).x+majordir.x, splineSupportPoints.get(splineSupportPoints.size()-1).y+majordir.y));\n\t\t\n\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t//Interpolate spline\n\t\tdouble[] supX = new double[splineSupportPoints.size()];\n\t\tdouble[] supY = new double[splineSupportPoints.size()];\n\t\tfor(int i = 0; i < splineSupportPoints.size(); i++){\n\t\t\tsupX[i] = splineSupportPoints.get(i).x;\n\t\t\tsupY[i] = splineSupportPoints.get(i).y;\n\t\t}\n\t\t\n\t\tSplineInterpolator sIinter = new SplineInterpolator();\n\t\tspline = sIinter.interpolate(supX, supY);\n\t\t\n\t\treturn spline;\n\t}", "public static ProcessResult executeLLVMBinary(File bitcodeFile){\n  return executeLLVMBinary(bitcodeFile,null);\n}\n", "@Override\n\tpublic <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {\n\t\treturn commerceOrderPaymentPersistence.findWithDynamicQuery(dynamicQuery);\n\t}", "private void invokeAndWait(Runnable run) {\n        if(!SwingUtilities.isEventDispatchThread()) {\n            try {\n                SwingUtilities.invokeAndWait(run);\n            } catch(Exception e) {\n                // shouldn't happen\n                e.printStackTrace();\n            }\n        } else {\n            run.run();\n        }\n    }", "private void decodeAuto(Context ctx,IoSession session,IoBuffer in,ProtocolDecoderOutput out) throws CharacterCodingException, ProtocolDecoderException {\n  int matchCount=ctx.getMatchCount();\n  int oldPos=in.position();\n  int oldLimit=in.limit();\n  while (in.hasRemaining()) {\n    byte b=in.get();\n    boolean matched=false;\nswitch (b) {\ncase '\\r':\n      matchCount++;\n    break;\ncase '\\n':\n  matchCount++;\nmatched=true;\nbreak;\ndefault :\nmatchCount=0;\n}\nif (matched) {\nint pos=in.position();\nin.limit(pos);\nin.position(oldPos);\nctx.append(in);\nin.limit(oldLimit);\nin.position(pos);\nif (ctx.getOverflowPosition() == 0) {\nIoBuffer buf=ctx.getBuffer();\nbuf.flip();\nbuf.limit(buf.limit() - matchCount);\ntry {\nbyte[] data=new byte[buf.limit()];\nbuf.get(data);\nCharsetDecoder decoder=ctx.getDecoder();\nCharBuffer buffer=decoder.decode(ByteBuffer.wrap(data));\nString str=buffer.toString();\nwriteText(session,str,out);\n}\n  finally {\nbuf.clear();\n}\n}\n else {\nint overflowPosition=ctx.getOverflowPosition();\nctx.reset();\nthrow new RecoverableProtocolDecoderException(\"Line is too long: \" + overflowPosition);\n}\noldPos=pos;\nmatchCount=0;\n}\n}\nin.position(oldPos);\nctx.append(in);\nctx.setMatchCount(matchCount);\n}\n", "public static int countOccurrencesOf(String str, String sub) {\n        if (str == null || sub == null || str.length() == 0 || sub.length() == 0) {\n            return 0;\n        }\n        int count = 0;\n        int pos = 0;\n        int idx;\n        while ((idx = str.indexOf(sub, pos)) != -1) {\n            ++count;\n            pos = idx + sub.length();\n        }\n        return count;\n    }", "public ShortComponentRaster(SampleModel sampleModel,DataBuffer dataBuffer,Point origin){\n  this(sampleModel,dataBuffer,new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);\n}\n", "public static String[] split(String s,char c){\n  int i, b, e;\n  int cnt;\n  String res[];\n  int ln=s.length();\n  i=0;\n  cnt=1;\n  while ((i=s.indexOf(c,i)) != -1) {\n    cnt++;\n    i++;\n  }\n  res=new String[cnt];\n  i=0;\n  b=0;\n  while (b <= ln) {\n    e=s.indexOf(c,b);\n    if (e == -1)     e=ln;\n    res[i++]=s.substring(b,e);\n    b=e + 1;\n  }\n  return res;\n}\n", "public void testGetName ( ) { String expectedReturn = STR_ ; String actualReturn = connectionIdAttribute . getName ( ) ; assertEquals ( STR_ , expectedReturn , actualReturn ) ; }", "protected void printResult(final CommandResult commandResult,PrintStream printStream){\n  assert (commandResult != null);\n  assert (printStream != null);\n  commandResult.resetToFirstLine();\n  printStream.print(commandResultToString(commandResult));\n}\n", "public void freeSLHolder ( IStoredListIterator < T > slh ) { if ( slh != null ) slh . release ( ) ; }", "protected void deleteTypeVertex(AtlasVertex instanceVertex, DataTypes.TypeCategory typeCategory, boolean force) throws AtlasException {\n        switch (typeCategory) {\n        case STRUCT:\n        case TRAIT:\n            deleteTypeVertex(instanceVertex, force);\n            break;\n\n        case CLASS:\n            deleteEntities(Collections.singletonList(instanceVertex));\n            break;\n\n        default:\n            throw new IllegalStateException(\"Type category \" + typeCategory + \" not handled\");\n        }\n    }", "private static void initScanner ( final WebAppContext web , final Configs config ) { int scanIntervalSeconds = config . getScanIntervalSeconds ( ) ; final ArrayList < File > scanList = new ArrayList < File > ( ) ; System . err . println ( STR_ ) ; if ( co", "public boolean belongsTo ( Object family ) { if ( family != null ) { if ( family instanceof Model ) { return ( this . launch . getLaunchConfiguration ( ) . getAdapter ( Model . class ) . equals ( family ) ) ; } else if ( family instanceof ILaunchConfigura", "public static void getFileServerForPartialFiles(OutputStream outstream,\n      String filename, InputStream infile, DataTransferThrottler throttler,\n      long startPosition, long lengthToSend) throws IOException {\n    byte buf[] = new byte[BUFFER_SIZE];\n    try {\n      int num = 1;\n      while (num > 0) {\n        num = infile.read(buf, 0,\n            Math.min(BUFFER_SIZE,\n                (int) Math.min(lengthToSend, Integer.MAX_VALUE)));\n        lengthToSend -= num;\n        if (num <= 0) {\n          break;\n        }\n        try {\n          outstream.write(buf, 0, num);\n        } catch (Exception e) {\n          // silently ignore. connection might have been closed\n          break;\n        }\n        if (throttler != null) {\n          throttler.throttle(num);\n        }\n      }\n      if (lengthToSend > 0) {\n        LOG.warn(\"Could not serve requested number of bytes. Left with \"\n            + lengthToSend + \" bytes for file: \" + filename);\n      }\n    } finally {\n      if (infile != null) {\n        infile.close();\n      }\n    }\n  }", "public void signalRewrittenEntry ( String uid ) { if ( _reWrittenEntries == null ) _reWrittenEntries = new ConcurrentHashMap < String , String > ( ) ; _reWrittenEntries . put ( uid , uid ) ; }", "\tpublic void setAdobePath() {\n\t\t\n\t\tfinal XHtmlPDFUtil pdfUtil = new XHtmlPDFUtil();\n\t\tthis.adobePathExe = pdfUtil.findAdobeReader();\n\t}\n", "public static Instruction findInstruction ( final Function function , final IInstruction searchInstruction ) { Preconditions . checkNotNull ( function , STR_ ) ; Preconditions . checkNotNull ( searchInstruction , STR_ ) ; for ( final BasicBlock block : fu", "public void testDecodeAttributeBody ( ) throws StunException { char offset = NUM_ ; SoftwareAttribute decoded = new SoftwareAttribute ( ) ; char length = ( char ) softwareValue . length ( ) ; decoded . decodeAttributeBody ( softwareValue . getBytes ( ) , offset , length ) ; assertEquals ( STR_ , softwareAttribute , decoded ) ; }", "Node cloneOrImportNode(short operation,Node node,boolean deep){\n  NodeImpl copy=shallowCopy(operation,node);\n  if (deep) {\n    NodeList list=node.getChildNodes();\n    for (int i=0; i < list.getLength(); i++) {\n      copy.appendChild(cloneOrImportNode(operation,list.item(i),deep));\n    }\n  }\n  notifyUserDataHandlers(operation,node,copy);\n  return copy;\n}\n", "public BigListIterator < K > listIterator ( ) ;", "        public void setExpiry(String expiry) {\n            if (isVoid(expiry)) {\n                throw new WLLException(\"Error: ConsentToken: Null expiry time.\");\n            }\n\n            long expiryLong;\n\n            try {\n                expiryLong = Long.parseLong(expiry);\n            } catch (Exception e) {\n                throw new WLLException(\"Error: ConsentToken: Invalid expiry time: \" + expiry);\n            }\n\n            this.expiry = new Date(expiryLong * 1000);\n        }\n", "public static JsonArray geoJSONCoordinates(ArrayList<GeoPoint> coordinates){\n  JsonArray json=new JsonArray();\n  Iterator<GeoPoint> it=coordinates.iterator();\n  while (it.hasNext()) {\n    GeoPoint position=it.next();\n    json.add(KmlGeometry.geoJSONPosition(position));\n  }\n  return json;\n}\n", "    protected Boolean validDataType(String requiredParam) {\n        String[] DATATYPES = { \"Boolean\", \"Character\", \"Date\", \n            \"DateTime\", \"Time\", \"Tiny\", \"Small\",\"Int\",\"Long\", \"Decimal\"\n            };\n        Boolean flg = Boolean.TRUE;\n        if (requiredParam == null ){\n            return Boolean.FALSE;\n        }       \n        for (int i = 0; i < DATATYPES.length; i++) {\n                flg = Boolean.FALSE;\n                if (requiredParam.equals(DATATYPES[i])) {\n                    flg = Boolean.TRUE;\n                    break;                  \n                }\n                \n             } \n            if (!flg){\n                return flg;\n            }\n            \n        return flg;\n        \n    }   \n", "  public void dump(DataOutputStream out) throws IOException {\n    if(wide)\n      out.writeByte(com.sun.org.apache.bcel.internal.Constants.WIDE);\n\n    out.writeByte(opcode);\n\n    if(wide)\n      out.writeShort(index);\n    else\n      out.writeByte(index);\n  }\n", "public static float length ( Vector3 a ) { return ( float ) Math . sqrt ( lengthSquared ( a ) ) ; }", "public CubicBezier(BezierRenderer renderer,FloatBuffer vboBuffer,float p0x,float p0y,float p3x,float p3y,float p1x,float p1y,float p2x,float p2y,float[] color){\n  this.mRenderer=renderer;\n  this.starEndPoints=new float[]{p0x,p0y,p3x,p3y};\n  this.controlPoints=new float[]{p1x,p1y,p2x,p2y};\n  this.color=color;\n  final int buffers[]=new int[1];\n  GLES20.glGenBuffers(1,buffers,0);\n  GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,buffers[0]);\n  GLES20.glBufferData(GLES20.GL_ARRAY_BUFFER,vboBuffer.capacity() * Const.BYTES_PER_FLOAT,vboBuffer,GLES20.GL_STATIC_DRAW);\n  GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,0);\n  mBufferId=buffers[0];\n  vboBuffer=null;\n}\n", "public static <T extends TypeDefinition> ElementMatcher.Junction<T> declaresMethod(ElementMatcher<? super MethodDescription> matcher) {\n        return new DeclaringMethodMatcher<T>(new CollectionItemMatcher<MethodDescription>(matcher));\n    }", "private static void replaceWithBackup(File from,File to){\n  if (!from.canRead())   exit(\"Failed to read source file '\" + from.getAbsolutePath() + \"'.\",null);\n  println(\"Replacing file '\" + to.getAbsolutePath() + \"'.\");\n  try {\n    U.copy(from,renameToBak(to),true);\n  }\n catch (  IOException e) {\n    exit(\"Failed to replace file '\" + to.getAbsolutePath() + \"'.\",e);\n  }\n}\n", "public ImmutableSet < BaseType > updateType ( final BaseType baseType ) { Preconditions . checkNotNull ( baseType , STR_ ) ; return determineDependentTypes ( baseType ) ; }", "void addedElement ( INaviGroupNode groupNode , INaviViewNode node ) ;", "    public Method getLinkedMethod(Struct s){\n\t\t\t//System.out.println(\"get linked for \"+s);         \n\t\t\n\t\t\tint arity = s.getArity();\n\t\t\tString name = s.getName()+\"_\"+arity; \n\n\t\t\t// NOT found, Try with synonims\n\t\t\tMethod m = findMethod(name,arity);\t\n\t        if (m!=null){\n\t        \treturn m;\n\t        }\n\n            // try with synonims\n            if (opMappingCached!=null){\n                String rawName=s.getName();\n                for (int j=0; j<opMappingCached.length; j++){\n                    String[] map=opMappingCached[j];\n                    if (map[0].equals(rawName)){\n                    \treturn findMethod(map[1]+\"_\"+s.getArity(),s.getArity());\n                    }\n                }\n            }\n            return null;\n    }\n", "public static Float toFloat ( Number self ) { return self . floatValue ( ) ; }", "public static String stripFileProtocol(String uriString){\n  if (uriString.startsWith(\"file://\")) {\n    uriString=uriString.substring(7);\n  }\n  return uriString;\n}\n", "public static byte[] toBinary(Object o,byte[] defaultValue){\n  try {\n    return toBinary(o);\n  }\n catch (  PageException e) {\n    return defaultValue;\n  }\n}\n", "public String getTypeName(Configuration config,\n        ClassDoc cd, boolean lowerCaseOnly) {\n        String typeName = \"\";\n        if (cd.isOrdinaryClass()) {\n            typeName = \"doclet.Class\";\n        } else if (cd.isInterface()) {\n            typeName = \"doclet.Interface\";\n        } else if (cd.isException()) {\n            typeName = \"doclet.Exception\";\n        } else if (cd.isError()) {\n            typeName = \"doclet.Error\";\n        } else if (cd.isAnnotationType()) {\n            typeName = \"doclet.AnnotationType\";\n        } else if (cd.isEnum()) {\n            typeName = \"doclet.Enum\";\n        }\n        return config.getText(\n            lowerCaseOnly ? StringUtils.toLowerCase(typeName) : typeName);\n    }", "protected void introspect(){\n  Class<?> clazz=command.getClass();\n  while (clazz != null) {\n    for (    Field field : clazz.getDeclaredFields()) {\n      Option option=field.getAnnotation(Option.class);\n      if (option != null) {\n        options.add(new FieldOptionInvoker(command,field,option));\n      }\n      Argument argument=field.getAnnotation(Argument.class);\n      if (argument != null) {\n        arguments.add(new FieldArgumentInvoker(command,field,argument));\n      }\n    }\n    clazz=clazz.getSuperclass();\n  }\n}\n", "@Override\n    public void setBitmapShaderShift(Point origin) {\n        if (this.texturePaint != null) {\n            int relativeDx = ((int) -origin.x) % this.shaderWidth;\n            int relativeDy = ((int) -origin.y) % this.shaderHeight;\n\n            Rectangle rectangle = new Rectangle(relativeDx, relativeDy, this.shaderWidth, this.shaderHeight);\n            this.texturePaint = new TexturePaint(this.texturePaint.getImage(), rectangle);\n        }\n    }", "\tpublic Hanoi getSub1() {\n\t\treturn sub1;\n\t}\n", "    public double evaluate(final double[] values, final double mean)  {\n        return FastMath.sqrt(variance.evaluate(values, mean));\n    }\n", "static String toTruncatedString ( final byte [ ] bytes ) { if ( bytes == null || bytes . length == NUM_ ) { return STR_ ; } try { if ( bytes . length > TRUNCATE_STRINGS_AT ) { return new String ( bytes , NUM_ , TRUNCATE_STRINGS_AT ) + STR_ + bytes . lengt", "public void returnValue(){\n  mv.visitInsn(returnType.getOpcode(Opcodes.IRETURN));\n}\n", "    public Collection getUpdatedTypeNames() {\n        if (_payload != PAYLOAD_EXTENTS)\n            throw new UserException(s_loc.get(\"nonextent-event\"));\n        return (_updates == null) ? Collections.EMPTY_LIST : _updates;\n    }\n", "@Override\n    public CreateTrafficPolicyResult createTrafficPolicy(CreateTrafficPolicyRequest request) {\n        request = beforeClientExecution(request);\n        return executeCreateTrafficPolicy(request);\n    }", "protected Column addColumn ( ResultSet rs ) throws SQLException { String colName = rs . getString ( STR_ ) ; int colType = rs . getInt ( STR_ ) ; long colLength = rs . getLong ( STR_ ) ; boolean isNotNull = rs . getInt ( STR_ ) == DatabaseMetaData . colum", "public synchronized void removeBlanks(){\n  if (DEBUG != null)   DEBUG.println(\"WeakTable.removeBlanks: starting\");\n  Reference ref;\n  while ((ref=refQueue.poll()) != null) {\n    if (ref instanceof WeakKeyReference) {\n      final WeakReference valref=(WeakReference)table.remove(ref);\n      if (valref != null && handler != null && valref.get() != null)       handler.keyGC(valref.get());\n      if (DEBUG != null) {\n        boolean removed=(valref != null);\n        DEBUG.print(\"WeakTable.removeBlanks: key=\" + ref);\n        DEBUG.println(\", \" + (removed ? \"\" : \"!\") + \"removed, \"+ table.size()+ \" remain\");\n      }\n    }\n else {\n      if (DEBUG != null)       DEBUG.println(\"WeakTable.removeBlanks: value=\" + ref);\n    }\n  }\n  if (DEBUG != null)   DEBUG.println(\"WeakTable.removeBlanks: finished\");\n}\n", "\t public void setPresentation(Presentation newValue) { \n\t\tif ( (this.presentation == null && newValue!=null) ||\n\t\t\t(this.presentation != null && !this.presentation.equals(newValue)) )\n\t\t\tsignatureChanged = true;\t\t this.presentation = newValue;\n\t }\n", "private void addSynapseToList(Synapse synapse){\n  if (excitatoryInputs.contains(synapse)) {\n    excitatoryInputs.remove(synapse);\n  }\n  if (inhibitoryInputs.contains(synapse)) {\n    inhibitoryInputs.remove(synapse);\n  }\n  if (synapse.getStrength() > 0) {\n    excitatoryInputs.add(synapse);\n  }\n else {\n    inhibitoryInputs.add(synapse);\n  }\n}\n", "public ServiceEndpoint(String name,String endpoint,String binding){\n  ValidateUtil.validateNotEmpty(endpoint,\"endpoint\");\n  ValidateUtil.validateNotEmpty(binding,\"binding\");\n  if (name == null || name.isEmpty()) {\n    name=endpoint;\n  }\n  this.name=name;\n  this.endpoint=endpoint;\n  this.binding=binding;\n}\n", "public static String getStaticResourcePathForResource(Resource resource, String contextPath) {\n\n        if (contextPath == null) contextPath = \"\";\n        if (resource == null) return contextPath;\n\n        String url;\n        try {\n            url = resource.getURL().toString();\n        }\n        catch (IOException e) {\n            return contextPath;\n        }\n\n        Matcher m = PLUGIN_RESOURCE_PATTERN.matcher(url);\n        if (m.find()) {\n            return (contextPath.length() > 0 ? contextPath + \"/\" : \"\") + m.group(1);\n        }\n\n        return contextPath;\n    }", "public String getTableNames(boolean bAddQuotes)\n    {\n        return (m_tableName == null) ? Record.formatTableNames(USER_LOG_TYPE_FILE, bAddQuotes) : super.getTableNames(bAddQuotes);\n    }", "\tpublic void flush(){\n\t\tbuffer = new LinkedList<Word>();\n\t}\n", "private CGlobalSettings ( ) { }", "public static <T>T eachLine(Reader self,int firstLine,@ClosureParams(value=FromString.class,options={\"String\",\"String,Integer\"}) Closure<T> closure) throws IOException {\n  BufferedReader br;\n  int count=firstLine;\n  T result=null;\n  if (self instanceof BufferedReader)   br=(BufferedReader)self;\n else   br=new BufferedReader(self);\n  try {\n    while (true) {\n      String line=br.readLine();\n      if (line == null) {\n        break;\n      }\n else {\n        result=callClosureForLine(closure,line,count);\n        count++;\n      }\n    }\n    Reader temp=self;\n    self=null;\n    temp.close();\n    return result;\n  }\n  finally {\n    closeWithWarning(self);\n    closeWithWarning(br);\n  }\n}\n", "public void testGetConnectionIdValue ( ) { int expectedReturn = NUM_ ; this . connectionIdAttribute . setConnectionIdValue ( MsgFixture . CONNECTION_ID ) ; int actualReturn = this . connectionIdAttribute . getConnectionIdValue ( ) ; assertEquals ( STR_ , ", "public void sessionCreated ( HttpSessionEvent event ) { ApplicationAssociate associate = getAssociate ( ) ; if ( associate != null && associate . isDevModeEnabled ( ) ) { activeSessions . add ( event . getSession ( ) ) ; } boolean doCreateToken = BOOL_ ; ", "public static TestRunnerConfig initialize ( String [ ] commandLineArgs ) { Preconditions . checkNotNull ( commandLineArgs ) ; TestRunnerConfig result = new TestRunnerConfig ( ) ; JCommander jCommander = new JCommander ( ) ; jCommander . setAcceptUnknownOp", "private void addSingleUnique(StringBuilder sb,FieldType fieldType,List<String> additionalArgs,List<String> statementsAfter){\n  StringBuilder alterSb=new StringBuilder();\n  alterSb.append(\" UNIQUE (\");\n  appendEscapedEntityName(alterSb,fieldType.getColumnName());\n  alterSb.append(\")\");\n  additionalArgs.add(alterSb.toString());\n}\n", "private void error(ErrorReason error)\n    {\n        if (options.rawSocket) {\n            //  For raw sockets, send a final 0-length message to the application\n            //  so that it knows the peer has been disconnected.\n            Msg terminator = new Msg();\n            processMsg.apply(terminator);\n        }\n        assert (session != null);\n        socket.eventDisconnected(endpoint, fd);\n        session.flush();\n        session.engineError(error);\n        unplug();\n        destroy();\n    }", "private void processBaseClassCall(NodeTraversal t, Node n) {\n    // Two things must hold for every goog.base call:\n    // 1) We must be calling it on \"this\".\n    // 2) We must be calling it on a prototype method of the same name as\n    //    the one we're in, OR we must be calling it from a constructor.\n    // If both of those things are true, then we can rewrite:\n    // <pre>\n    // function Foo() {\n    //   goog.base(this);\n    // }\n    // goog.inherits(Foo, BaseFoo);\n    // Foo.prototype.bar = function() {\n    //   goog.base(this, 'bar', 1);\n    // };\n    // </pre>\n    // as the easy-to-optimize:\n    // <pre>\n    // function Foo() {\n    //   BaseFoo.call(this);\n    // }\n    // goog.inherits(Foo, BaseFoo);\n    // Foo.prototype.bar = function() {\n    //   Foo.superClass_.bar.call(this, 1);\n    // };\n    //\n    // Most of the logic here is just to make sure the AST's\n    // structure is what we expect it to be.\n\n    // If requested report uses of goog.base.\n    t.report(n, USE_OF_GOOG_BASE);\n\n    if (baseUsedInClass(n)){\n      reportBadGoogBaseUse(n, \"goog.base in ES6 class is not allowed. Use super instead.\");\n      return;\n    }\n\n    Node callee = n.getFirstChild();\n    Node thisArg = callee.getNext();\n    if (thisArg == null || !thisArg.isThis()) {\n      reportBadGoogBaseUse(n, \"First argument must be 'this'.\");\n      return;\n    }\n\n    Node enclosingFnNameNode = getEnclosingDeclNameNode(n);\n    if (enclosingFnNameNode == null) {\n      reportBadGoogBaseUse(n, \"Could not find enclosing method.\");\n      return;\n    }\n\n    String enclosingQname = enclosingFnNameNode.getQualifiedName();\n    if (!enclosingQname.contains(\".prototype.\")) {\n      // Handle constructors.\n      Node enclosingParent = enclosingFnNameNode.getParent();\n      Node maybeInheritsExpr =\n          (enclosingParent.isAssign() ? enclosingParent.getParent() : enclosingParent).getNext();\n      Node baseClassNode = null;\n      if (maybeInheritsExpr != null\n          && maybeInheritsExpr.isExprResult()\n          && maybeInheritsExpr.getFirstChild().isCall()) {\n        Node callNode = maybeInheritsExpr.getFirstChild();\n        if (callNode.getFirstChild().matchesQualifiedName(\"goog.inherits\")\n            && callNode.getLastChild().isQualifiedName()) {\n          baseClassNode = callNode.getLastChild();\n        }\n      }\n\n      if (baseClassNode == null) {\n        reportBadGoogBaseUse(n, \"Could not find goog.inherits for base class\");\n        return;\n      }\n\n      // We're good to go.\n      Node newCallee =\n          NodeUtil.newQName(\n              compiler, baseClassNode.getQualifiedName() + \".call\", callee, \"goog.base\");\n      n.replaceChild(callee, newCallee);\n      compiler.reportChangeToEnclosingScope(newCallee);\n    } else {\n      // Handle methods.\n      Node methodNameNode = thisArg.getNext();\n      if (methodNameNode == null || !methodNameNode.isString()) {\n        reportBadGoogBaseUse(n, \"Second argument must name a method.\");\n        return;\n      }\n\n      String methodName = methodNameNode.getString();\n      String ending = \".prototype.\" + methodName;\n      if (enclosingQname == null || !enclosingQname.endsWith(ending)) {\n        reportBadGoogBaseUse(n, \"Enclosing method does not match \" + methodName);\n        return;\n      }\n\n      // We're good to go.\n      Node className =\n          enclosingFnNameNode.getFirstFirstChild();\n      n.replaceChild(\n          callee,\n          NodeUtil.newQName(\n            compiler,\n            className.getQualifiedName() + \".superClass_.\" + methodName + \".call\",\n            callee, \"goog.base\"));\n      n.removeChild(methodNameNode);\n      compiler.reportChangeToEnclosingScope(n);\n    }\n  }", "public void setRoutingProfileSummaryList(java.util.Collection<RoutingProfileSummary> routingProfileSummaryList) {\n        if (routingProfileSummaryList == null) {\n            this.routingProfileSummaryList = null;\n            return;\n        }\n\n        this.routingProfileSummaryList = new java.util.ArrayList<RoutingProfileSummary>(routingProfileSummaryList);\n    }", "public void cancel ( ) { cancelled = BOOL_ ; }", "public QrCodeEncoder addAlphanumeric(String alphaNumeric) {\n\t\tbyte values[] = alphanumericToValues(alphaNumeric);\n\n\t\tMessageSegment segment = new MessageSegment();\n\t\tsegment.message = alphaNumeric;\n\t\tsegment.data = values;\n\t\tsegment.length = values.length;\n\t\tsegment.mode = QrCode.Mode.ALPHANUMERIC;\n\n\t\tsegment.encodedSizeBits += 4;\n\t\tsegment.encodedSizeBits += 11*(segment.length/2);\n\t\tif( segment.length%2 == 1 ) {\n\t\t\tsegment.encodedSizeBits += 6;\n\t\t}\n\n\t\tsegments.add(segment);\n\n\t\treturn this;\n\t}", "public FieldVisitor visitField ( int access , String name , String desc , String signature , Object value ) { if ( cv != null ) { return cv . visitField ( access , name , desc , signature , value ) ; } return null ; }", "public void addInstruction(InstructionHandle handle) throws CFGBuilderException {\n  int position=handle.getPosition();\n  if (usedInstructionSet.get(position)) {\n    throw new CFGBuilderException(\"Instruction \" + handle + \" visited in multiple subroutines\");\n  }\n  instructionSet.set(position);\n  usedInstructionSet.set(position);\n}\n", "public static <T1, T2> Consumer<T2> curry(BiConsumer<T1, T2> consumer, T1 first) {\n        dbc.precondition(consumer != null, \"cannot bind parameter of a null consumer\");\n        return second -> consumer.accept(first, second);\n    }", "static public ResourceState replicatorStateToResourceState ( String state ) { if ( state . startsWith ( REPLICATOR_STATE_ONLINE ) ) return ResourceState . ONLINE ; else if ( state . startsWith ( REPLICATOR_STATE_STOPPED ) ) { return ResourceState . STOPPED ; } else if ( state . startsWith ( REPLICATOR_STATE_OFFLINE ) ) { if ( state . equals ( REPLICATOR_STATE_ERROR ) ) { return ResourceState . SUSPECT ; } else if ( state . equals ( REPLICATOR_STATE_BACKUP ) ) { return ResourceState . BACKUP ; } else if ( state . equals ( REPLICATOR_STATE_RESTORING ) ) { return ResourceState . RESTORING ; } else { return ResourceState . OFFLINE ; } } else if ( state . contains ( REPLICATOR_STATE_SYNCHRONIZING ) ) return ResourceState . SYNCHRONIZING ; else return ResourceState . UNKNOWN ; }", "protected static boolean isValidNumber(double d){\n  return (!(Double.isNaN(d) || Double.isInfinite(d)));\n}\n", "public void testDecodeAttributeBodyV6 ( ) throws StunException { byte [ ] attributeValue = msgFixture . requestedAddressFamilyV6 ; char offset = Attribute . HEADER_LENGTH ; char length = ( char ) ( attributeValue . length - offset ) ; requestedAddressFamilyAttribute . decodeAttributeBody ( attributeValue , offset , length ) ; assertEquals ( STR_ , MsgFixture . REQUESTED_ADDRESS_FAMILY_ATTRIBUTE_V6 , requestedAddressFamilyAttribute . getFamily ( ) ) ; }", "public static ContentValues values ( ContentValues vals , User user ) { vals . put ( GLOBAL_ID , user . globalId ) ; vals . put ( EMAIL_HASH , user . emailHash ) ; vals . put ( FOLLOWING , user . isFollowing ? NUM_ : NUM_ ) ; vals . put ( COLOR , defaultC", "public void printOptions(){\n  VM.sysWriteln(\"Current value of GC options\");\n  Option o=getFirst();\n  while (o != null) {\n    if (o.getType() == Option.BOOLEAN_OPTION) {\n      String key=o.getKey();\n      VM.sysWrite(\"\\t\");\n      VM.sysWrite(key);\n      for (int c=key.length(); c < 31; c++) {\n        VM.sysWrite(\" \");\n      }\n      VM.sysWrite(\" = \");\n      logValue(o,false);\n      VM.sysWriteln();\n    }\n    o=o.getNext();\n  }\n  o=getFirst();\n  while (o != null) {\n    if (o.getType() != Option.BOOLEAN_OPTION && o.getType() != Option.ENUM_OPTION) {\n      String key=o.getKey();\n      VM.sysWrite(\"\\t\");\n      VM.sysWrite(key);\n      for (int c=key.length(); c < 31; c++) {\n        VM.sysWrite(\" \");\n      }\n      VM.sysWrite(\" = \");\n      logValue(o,false);\n      VM.sysWriteln();\n    }\n    o=o.getNext();\n  }\n  o=getFirst();\n  while (o != null) {\n    if (o.getType() == Option.ENUM_OPTION) {\n      String key=o.getKey();\n      VM.sysWrite(\"\\t\");\n      VM.sysWrite(key);\n      for (int c=key.length(); c < 31; c++) {\n        VM.sysWrite(\" \");\n      }\n      VM.sysWrite(\" = \");\n      logValue(o,false);\n      VM.sysWriteln();\n    }\n    o=o.getNext();\n  }\n}\n", "public static URI toURI ( String self ) throws URISyntaxException { return new URI ( self ) ; }", "    protected void processOther( String strCtrlMsg ) {\n        _log.info( \"received unexpected control message : \"+strCtrlMsg );\n    }\n", "public SelectSameAction ( DrawingEditor editor ) { super ( editor ) ; ResourceBundleUtil labels = ResourceBundleUtil . getBundle ( STR_ ) ; labels . configureAction ( this , ID ) ; updateEnabledState ( ) ; }", "    public HttpResponse execute(String url) throws URISyntaxException {\n        final HttpMessage httpMessage = this.mHttpMessageFactory.create(url, null);\n        return execute(httpMessage);\n    }\n", "public ImageLoader ( RequestQueue queue , ImageCache imageCache ) { mRequestQueue = queue ; mCache = imageCache ; }", "private void arrangeCallbacks(Callback[] callbacks) {\n        if (callbacks[0] instanceof CallerPrincipalCallback)\n            return;\n\n        int length = callbacks.length;\n        for (int i = 0; i < length; i++) {\n            if (callbacks[i] instanceof CallerPrincipalCallback) {\n                Callback callback = callbacks[0];\n                callbacks[0] = callbacks[i];\n                callbacks[i] = callback;\n                break;\n            }\n        }\n    }", "private static String alias(boolean user,X509Certificate x,int index){\n  String prefix=user ? \"user:\" : \"system:\";\n  X500Principal subject=x.getSubjectX500Principal();\n  int intHash=NativeCrypto.X509_NAME_hash_old(subject);\n  String strHash=IntegralToString.intToHexString(intHash,false,8);\n  return prefix + strHash + '.'+ index;\n}\n", "@Incubating\n    public static <A, B, C, D> Answer<Void> answerVoid(VoidAnswer4<A, B, C, D> answer) {\n        return toAnswer(answer);\n    }", "protected void ensureOpen ( ) throws IllegalStateException { if ( closed ) { throw new IllegalStateException ( STR_ ) ; } }", "private Iterator<ObjectToFragment> newValueIterator(EStructuralFeature feature){\n  if (feature.isMany()) {\n    result.append('.');\n    return newManyValueIterator((List<?>)current.eGet(feature));\n  }\n else {\n    return newSingleValueIterator((EObject)current.eGet(feature));\n  }\n}\n", "public boolean removeFooterView ( View v ) { if ( mFooterViewInfos . size ( ) > NUM_ ) { boolean result = BOOL_ ; if ( mAdapter != null && ( ( PLAHeaderViewListAdapter ) mAdapter ) . removeFooter ( v ) ) { mDataSetObserver . onChanged ( ) ; result = BOOL_", "public static double euclideanNormSquaredWithAbort ( double [ ] x1 , double [ ] x2 , double limit ) { double distance = NUM_ ; for ( int d = NUM_ ; d < x1 . length ; d ++ ) { double difference = x1 [ d ] - x2 [ d ] ; distance += difference * difference ; ", "private void choose ( String argument , String desc , Chooser chooser ) { StringTokenizer tok = new StringTokenizer ( argument , STR_ ) ; while ( tok . hasMoreTokens ( ) ) { String what = tok . nextToken ( ) . trim ( ) ; if ( ! what . startsWith ( STR_ ) ", "protected void addNameDefiner(PsiElement definer){\n  myDefiners.add(definer);\n}\n", "    public void releaseResource() {\n        releaseCount++;\n    }\n", "\tpublic boolean isTree() {\n\t\tcheckWidget();\n\t\treturn tree;\n\t}\n", "\tprivate String getTitle(DaisyXmlToOdtPackage dPack) {\n\t\ttry {\n\t\t\tNode metaTitle = dPack.getDtbook().excuteXpathQuery(\n\t\t\t\t\t\"//pre:meta[@name='dc:Title']/@content\",\n\t\t\t\t\tnew DtbookNamespaceContext()).item(0);\n\t\t\treturn metaTitle.getTextContent();\n\t\t} catch (Exception e) {\n\t\t\treturn \"No title\";\n\t\t}\n\t}\n", "@CheckReturnValue @Nonnull public static String join(@Nonnull Collection<String> s,@Nonnull String delimiter){\n  StringBuilder buffer=new StringBuilder();\n  Iterator<String> iter=s.iterator();\n  while (iter.hasNext()) {\n    buffer.append(iter.next());\n    if (iter.hasNext()) {\n      buffer.append(delimiter);\n    }\n  }\n  return buffer.toString();\n}\n", "public void paint(Graphics g){\n  g=g.create();\n  setRenderingHints(g);\n  setCompositeOnGraphics((Graphics2D)g);\n  super.paint(g);\n}\n", "public static final Function<String, Boolean> startsWith(final String prefix, final int offset) {\r\n        return new StartsWith(prefix, offset);\r\n    }", "public void initialize ( String featurePath ) throws FeaturePathException { this . featurePathString = featurePath ; this . featurePathElementNames = new ArrayList < String > ( ) ; this . featurePathElements = null ; if ( this . featurePathString . indexOf ( STR_ ) > - NUM_ ) { throw new FeaturePathException ( ) ; } StringTokenizer tokenizer = new StringTokenizer ( this . featurePathString , STR_ ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; this . featurePathElementNames . add ( token ) ; } }", "public static void download(long globalId){\n  User user=new User();\n  user.globalId=globalId;\n  List<Review> reviews=Server.reviews(user);\n  if (reviews != null) {\n    int size=reviews.size();\n    for (int i=0; i < size; i++) {\n      add(reviews.get(i));\n    }\n  }\n}\n", "    public void doAutoIncrecement() {\n        int iNumber = SSVoucherMath.getMaxNumber();\n\n        this.iNumber = iNumber + 1;\n    }\n", "public static Response get(String url) throws URISyntaxException, HttpException {\n        return send(new HttpGet(url), null, null);\n    }", "public static ServerSocket closeSilently(ServerSocket socket){\n  if (socket != null) {\n    try {\n      socket.close();\n    }\n catch (    IOException e) {\n    }\n  }\n  return null;\n}\n", "public static Event post(@NonNull String eventKey) {\n        return new Event.Builder(dispatcher, eventKey).post();\n    }", "@Nullable\n    public <T> Class<Provider<T>> getScopedFactoryClass(Class scope, Class<T> classDefinition) {\n        //noinspection unchecked\n        return (Class)factoryClasses.getScope(scope).get(classDefinition);\n    }", "public void shutdownAndWaitUntilDone(){\n  shutdown();\n  while (true) {\nsynchronized (endSignal) {\n      try {\n        if ((combinedState.get() & 0x7FFFFFFFFFFFFFFFL) == 0)         break;\n        endSignal.wait(100);\n      }\n catch (      InterruptedException e) {\n      }\n    }\n  }\n}\n", "public static Description describe(final char[] pin){\n  if (pin == null || pin.length == 0) {\n    return new Description(0,EnumSet.noneOf(CharacterClass.class));\n  }\n  EnumSet<CharacterClass> classes=EnumSet.noneOf(CharacterClass.class);\n  for (  char ch : pin) {\n    classes.add(CharacterClass.of(ch));\n  }\n  return new Description(pin.length,classes);\n}\n", "public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ) ; }", "private static int pack8(byte[] in,int ioffset,int ilength,byte[] out,int ooffset){\n  byte[] pack=pack(in,ioffset,ilength,7,8);\n  int firstNonZero=pack.length - 1;\n  for (int i=pack.length - 2; i >= 0; i--) {\n    if (pack[i] != 0) {\n      firstNonZero=i;\n    }\n  }\n  System.arraycopy(pack,firstNonZero,out,ooffset,pack.length - firstNonZero);\n  return pack.length - firstNonZero;\n}\n", "private static void clearAllExceptRelationships ( Resource resource ) { resource . setAttributes ( null ) ; resource . setLinks ( null ) ; resource . setMeta ( null ) ; }", "public SearchResults searchIDs(java.security.Principal principal,Guid guid,int scope,String searchFilter,SearchControl searchControl) throws InvalidSearchFilterException, UMSException {\n  String attrNames[]={\"objectclass\"};\n  return search(principal,guid,scope,searchFilter,attrNames,false,searchControl);\n}\n", "public static boolean recursiveClean(final File fileToRemove) {\n        if (fileToRemove == null)\n            return true;\n\n        Boolean fileExists = Boolean.FALSE;\n        final File f_fileToRemove = fileToRemove;\n\n        try {\n            fileExists = AccessController.doPrivileged(new java.security.PrivilegedExceptionAction<Boolean>() {\n                @Override\n                public Boolean run() throws Exception {\n                    if (f_fileToRemove.exists()) {\n                        return Boolean.TRUE;\n                    }\n                    return Boolean.FALSE;\n                }\n            });\n        } catch (Exception ex) {\n        }\n\n        if (fileExists != null && !(fileExists.booleanValue()))\n\n            //if (!fileToRemove.exists())\n            return true;\n\n        boolean success = true;\n\n        Boolean fileIsDirectory = null;\n        //final File f_fileToRemove = fileToRemove;\n        try {\n            fileIsDirectory = AccessController.doPrivileged(new java.security.PrivilegedExceptionAction<Boolean>() {\n                @Override\n                public Boolean run() throws Exception {\n                    if (f_fileToRemove.isDirectory()) {\n                        return Boolean.TRUE;\n                    }\n                    return Boolean.FALSE;\n                }\n            });\n        } catch (Exception ex) {\n        }\n\n        if (fileIsDirectory != null && fileIsDirectory.booleanValue()) {\n            //if (fileToRemove.isDirectory()) {\n            File[] files = fileToRemove.listFiles();\n            // listFiles may return null if we lack read permissions\n            if (files == null)\n                return false;\n            for (File file : files) {\n                if (file.isDirectory()) {\n                    success |= recursiveClean(file);\n                } else if ((file.getName().equals(BootstrapConstants.S_LOCK_FILE) &&\n                            fileToRemove.getName().equals(BootstrapConstants.LOC_AREA_NAME_WORKING))\n                           ||\n                           ((fileToRemove.getName().equals(BootstrapConstants.LOC_AREA_NAME_WORKING))) &&\n                              (file.getName().equals(BootstrapConstants.SERVER_RUNNING_FILE))) {\n                    // skip/preserve workarea/.sLock and workarea/.sRunning files\n                } else {\n                    success |= file.delete();\n                }\n            }\n            files = fileToRemove.listFiles();\n            if (files.length == 0)\n                success |= fileToRemove.delete();\n        } else {\n\n            Boolean successful_delete = Boolean.TRUE;\n            final File ftr = fileToRemove;\n            try {\n                successful_delete = AccessController.doPrivileged(new java.security.PrivilegedExceptionAction<Boolean>() {\n                    @Override\n                    public Boolean run() throws Exception {\n                        Boolean s = ftr.delete();\n                        return s;\n                    }\n                });\n            } catch (Exception ex) {\n            }\n\n            //success |= fileToRemove.delete();\n            success |= successful_delete.booleanValue();\n        }\n        return success;\n    }", "  public void run() {\n    String curLine;\n    try {\n      while ((curLine = mOut.readLine()) != null) {  \n        synchronized (this) {\n          mBuffer.addLast(curLine);\n        }\n      }\n      if (DEBUG) {\n        System.out.println(\"F\");\n      }\n    } catch (IOException e) {\n      //e.printStackTrace();\n      return;\n    }\n  }\n", "public void extendParent(Object cell){\n  if (cell != null) {\n    Object parent=model.getParent(cell);\n    mxGeometry p=model.getGeometry(parent);\n    if (parent != null && p != null && !isCellCollapsed(parent)) {\n      mxGeometry geo=model.getGeometry(cell);\n      if (geo != null && (p.getWidth() < geo.getX() + geo.getWidth() || p.getHeight() < geo.getY() + geo.getHeight())) {\n        p=(mxGeometry)p.clone();\n        p.setWidth(Math.max(p.getWidth(),geo.getX() + geo.getWidth()));\n        p.setHeight(Math.max(p.getHeight(),geo.getY() + geo.getHeight()));\n        cellsResized(new Object[]{parent},new mxRectangle[]{p});\n      }\n    }\n  }\n}\n", "public void clear ( ) { m_textArea . setText ( STR_ ) ; }", "public void initialise ( ) ;", "@Override\n    public java.util.concurrent.Future<PublishResult> publishAsync(String topicArn, String message, String subject) {\n\n        return publishAsync(new PublishRequest().withTopicArn(topicArn).withMessage(message).withSubject(subject));\n    }", "private void initializeScrollAnimator() {\n\t\tScrollAnimator scrollAnimator = new ScrollAnimator(button_menu, new ObjectAnimatorFactory());\n\t\tscrollAnimator.configureListView(lv_contacts);\n\t\tscrollAnimator.setDurationInMillis(300);\n\t}", "private static void closeStream ( Closeable stream ) { if ( stream != null ) { try { stream . close ( ) ; } catch ( IOException e ) { } } }", "public static Element toElement(Document doc,Object o) throws PageException {\n  if (o instanceof Element)   return (Element)o;\n else   if (o instanceof Node)   throw new ExpressionException(\"Object \" + Caster.toClassName(o) + \" must be a XML Element\");\n  return doc.createElement(Caster.toString(o));\n}\n", "public List < FlashcardEntity > queryDeep ( String where , String ... selectionArg ) { Cursor cursor = db . rawQuery ( getSelectDeep ( ) + where , selectionArg ) ; return loadDeepAllAndCloseCursor ( cursor ) ; }", "public LegendPanel(){\n  setLayout(new BorderLayout(0,0));\n  scrollPane=new JScrollPane(legendImagePanel);\n  scrollPane.setAutoscrolls(true);\n  scrollPane.setPreferredSize(new Dimension(SCROLL_PANE_WIDTH,SCROLL_PANE_HEIGHT));\n  add(scrollPane,BorderLayout.CENTER);\n}\n", "public static byte[] decompressContents(byte[] fullMessage) throws DecompressionException {\n  InflaterInputStream gzipReader=null;\n  ByteArrayOutputStream uncompressed;\n  try {\n    gzipReader=new GZIPInputStream(new ByteArrayInputStream(fullMessage));\n    uncompressed=new ByteArrayOutputStream(fullMessage.length);\n    byte[] decompressBuffer=new byte[DECOMPRESS_BUFFER_SIZE];\n    int bytesRead;\n    while ((bytesRead=gzipReader.read(decompressBuffer)) > -1) {\n      uncompressed.write(decompressBuffer,0,bytesRead);\n    }\n    fullMessage=uncompressed.toByteArray();\n  }\n catch (  IOException e) {\n    throw new DecompressionException(\"Unable to decompress response\",e);\n  }\n finally {\n    try {\n      if (gzipReader != null) {\n        gzipReader.close();\n      }\n    }\n catch (    IOException e) {\n      log.warn(\"Unable to close gzip stream\",e);\n    }\n  }\n  return fullMessage;\n}\n", "public void add(T item){\n  if (items.add(item)) {\n    notifyDataSetChanged();\n  }\n}\n", "\tprotected void pSetByIndex(int index, double value, int path) throws SdaiException {\n//\t\tsynchronized (syncObject) {\n\t\tCDefined_type select[] = myType.select.getSelectArray(path);\n\t\tsetByIndex(index, value, select);\n//\t\t} // syncObject\n\t}\n", "public char skipTo ( char to ) throws JSONException { char c ; try { long startIndex = this . index ; long startCharacter = this . character ; long startLine = this . line ; this . reader . mark ( NUM_ ) ; do { c = this . next ( ) ; if ( c == NUM_ ) { thi", "protected static boolean fileDoesNotExist(String file, String path,\n            String dest_dir) {\n\n        File f = new File(dest_dir);\n        if (!f.isDirectory())\n            return false;\n\n        String folderPath = createFolderPath(path);\n\n        f = new File(f, folderPath);\n\n        File javaFile = new File(f, file);\n        boolean result = !javaFile.exists();\n\n        return result;\n    }", "public static void delFile ( String delFileName ) throws ConfigurationException { File delFile = new File ( delFileName ) ; if ( delFile . exists ( ) && delFile . canWrite ( ) ) { delFile . delete ( ) ; } else { throw new ConfigurationException ( STR_ + d", "public boolean login(String nic, String password, int timeInSec) throws IOException {\n\t\tif (password == null) {\n\t\t\t// using CK only, no autologin\n\t\t\treturn false;\n\t\t}\n\t\tsetLoginInfo(nic, password, timeInSec);\n\t\tint retry = 0;\n\n\t\tString lastKey = config.getConsumerKey(nic);\n\t\tif (lastKey != null) {\n\t\t\tthis.setCK(nic, lastKey);\n\t\t\treturn true;\n\t\t}\n\t\t// no valid CK use login\n\t\twhile (!loginInternal(nic, password, timeInSec)) {\n\t\t\tretry++;\n\t\t\tif (retry > 1) { //  no more retry\n\t\t\t\tlog.error(\"LOGIN failure to {} after {} retry\", nic, retry);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlong sleep = retry * 3000 + (long) (Math.random() * 5000);\n\t\t\tlog.error(\"LOGIN failure to {} after will retry in {} ms\", nic, sleep);\n\t\t\tApiOvhUtils.sleep(sleep);\n\t\t}\n\t\treturn true;\n\t}", "    protected void assertOperationSuccessful(WebResponse response) throws JAXBException, IOException, XMLStreamException {\n        String xml = response.getText();\n        OperationResult operationResult = (OperationResult) XmlBindingUtils.toObject(xml);\n        assert (OperationStatus.OK.equals(operationResult.getStatus()));\n    }\n", "public void stop ( ) { CGlobalProgressManager . instance ( ) . remove ( this ) ; }", "@SuppressWarnings({\"UnusedDeclaration\"})\n    protected void doApi(StaplerRequest req, StaplerResponse resp) throws IOException, ServletException {\n        try {\n            log.log(Level.INFO, \"Initiating Artifactory Release Staging using API\");\n            // Enforce release permissions\n            project.checkPermission(ArtifactoryPlugin.RELEASE);\n            // In case a staging user plugin is configured, the init() method invoke it:\n            init();\n            // Read the values provided by the staging user plugin and assign them to data members in this class.\n            // Those values can be overriden by URL arguments sent with the API:\n            readStagingPluginValues();\n            // Read values from the request and override the staging plugin values:\n            overrideStagingPluginParams(req);\n            // Schedule the release build:\n            Queue.WaitingItem item = Jenkins.getInstance().getQueue().schedule(\n                project, 0,\n                new Action[]{this, new CauseAction(new Cause.UserIdCause())}\n            );\n            if (item == null) {\n                log.log(Level.SEVERE, \"Failed to schedule a release build following a Release API invocation\");\n                resp.setStatus(StaplerResponse.SC_INTERNAL_SERVER_ERROR);\n            } else {\n                String url = req.getContextPath() + '/' + item.getUrl();\n                JSONObject json = new JSONObject();\n                json.element(\"queueItem\", item.getId());\n                json.element(\"releaseVersion\", getReleaseVersion());\n                json.element(\"nextVersion\", getNextVersion());\n                json.element(\"releaseBranch\", getReleaseBranch());\n                // Must use getOutputStream as sendRedirect uses getOutputStream (and closes it)\n                resp.getOutputStream().print(json.toString());\n                resp.sendRedirect(201, url);\n            }\n        } catch (Exception e) {\n            log.log(Level.SEVERE, \"Artifactory Release Staging API invocation failed: \" + e.getMessage(), e);\n            resp.setStatus(StaplerResponse.SC_INTERNAL_SERVER_ERROR);\n            ErrorResponse errorResponse = new ErrorResponse(StaplerResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());\n            ObjectMapper mapper = new ObjectMapper();\n            mapper.enable(SerializationFeature.INDENT_OUTPUT);\n            resp.getWriter().write(mapper.writeValueAsString(errorResponse));\n        }\n    }", "public void setThreatIntelIndicatorType(java.util.Collection<StringFilter> threatIntelIndicatorType) {\n        if (threatIntelIndicatorType == null) {\n            this.threatIntelIndicatorType = null;\n            return;\n        }\n\n        this.threatIntelIndicatorType = new java.util.ArrayList<StringFilter>(threatIntelIndicatorType);\n    }", "private RegistryClients ( ) { }", "private static MessageDigest getMessageDigest(String algorithm) {\n        try {\n            return MessageDigest.getInstance(algorithm);\n        } catch (NoSuchAlgorithmException e) {\n            LOGGER.error(e.getMessage());\n            final String msg = String.format(\"Failed to obtain the %s message digest.\", algorithm);\n            throw new IllegalStateException(msg, e);\n        }\n    }", "    public TimeUnitFormat setLocale(ULocale locale) {\n        if ( locale != this.locale ) {\n            this.locale = locale;\n            isReady = false;\n        }\n        return this;\n    }\n", "\tpublic String getAppletInfo() {\n\t\treturn \"Upload Progress Bar Applet \"\n\t\t\t\t+ version\n\t\t\t\t+ \", Copyright by Mr.Lee [http://uploadprogress.sourceforge.net/]\";\n\t}\n", "public static BufferedInputStream blob2stream(Blob value) throws SQLException {\n  if (value == null) {\n    return null;\n  }\n  BufferedInputStream bufferedInStream=new BufferedInputStream(value.getBinaryStream());\n  return bufferedInStream;\n}\n", "public MessagePacker packArrayHeader(int arraySize)\n            throws IOException\n    {\n        if (arraySize < 0) {\n            throw new IllegalArgumentException(\"array size must be >= 0\");\n        }\n\n        if (arraySize < (1 << 4)) {\n            writeByte((byte) (FIXARRAY_PREFIX | arraySize));\n        }\n        else if (arraySize < (1 << 16)) {\n            writeByteAndShort(ARRAY16, (short) arraySize);\n        }\n        else {\n            writeByteAndInt(ARRAY32, arraySize);\n        }\n        return this;\n    }", "private V8Array convertArguments(Object[] args, Set<V8Value> newValues) {\n\t\t//create the array\n\t\tV8Array result = new V8Array(runtime);\n\t\tnewValues.add(result);\n\t\t\n\t\t//convert the values\n\t\tfor (int i = 0; i < args.length; ++i) {\n\t\t\tObject o = args[i];\n\t\t\tif (o == null) {\n\t\t\t\tresult.push(V8Value.NULL);\n\t\t\t} else if (o instanceof JsonObject || o instanceof Collection ||\n\t\t\t\t\to.getClass().isArray() || o instanceof Map) {\n\t\t\t\tV8Object v = runtime.executeObjectScript(\"(\" +\n\t\t\t\t\t\tcreateJsonBuilder().toJson(o).toString() + \")\");\n\t\t\t\tnewValues.add(v);\n\t\t\t\tresult.push(v);\n\t\t\t} else if (o instanceof String) {\n\t\t\t\tresult.push((String)o);\n\t\t\t} else if (o instanceof Integer) {\n\t\t\t\tresult.push((Integer)o);\n\t\t\t} else if (o instanceof Boolean) {\n\t\t\t\tresult.push((Boolean)o);\n\t\t\t} else if (o instanceof Double) {\n\t\t\t\tresult.push((Double)o);\n\t\t\t} else if (o instanceof ItemDataProvider) {\n\t\t\t\to = new ItemDataProviderWrapper((ItemDataProvider)o);\n\t\t\t\tV8Object v8o = convertJavaObject(o);\n\t\t\t\tnewValues.add(v8o);\n\t\t\t\tresult.push(v8o);\n\t\t\t} else if (o instanceof AbbreviationProvider) {\n\t\t\t\to = new AbbreviationProviderWrapper((AbbreviationProvider)o);\n\t\t\t\tV8Object v8o = convertJavaObject(o);\n\t\t\t\tnewValues.add(v8o);\n\t\t\t\tresult.push(v8o);\n\t\t\t} else if (o instanceof VariableWrapper) {\n\t\t\t\to = new VariableWrapperWrapper((VariableWrapper)o);\n\t\t\t\tV8Object v8o = convertJavaObject(o);\n\t\t\t\tnewValues.add(v8o);\n\t\t\t\tresult.push(v8o);\n\t\t\t} else if (o instanceof V8ScriptRunner || o instanceof LocaleProvider) {\n\t\t\t\tV8Object v8o = convertJavaObject(o);\n\t\t\t\tnewValues.add(v8o);\n\t\t\t\tresult.push(v8o);\n\t\t\t} else if (o instanceof V8Value) {\n\t\t\t\t//already converted\n\t\t\t\tV8Value v = (V8Value)o;\n\t\t\t\tresult.push(v);\n\t\t\t} else {\n\t\t\t\tthrow new IllegalArgumentException(\"Unsupported argument: \" +\n\t\t\t\t\t\to.getClass());\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "public boolean fling(int velocityX, int velocityY) {\n        if (Math.abs(velocityX) < mMinFlingVelocity) {\n            velocityX = 0;\n        }\n        if (Math.abs(velocityY) < mMinFlingVelocity) {\n            velocityY = 0;\n        }\n        velocityX = Math.max(-mMaxFlingVelocity, Math.min(velocityX, mMaxFlingVelocity));\n        velocityY = Math.max(-mMaxFlingVelocity, Math.min(velocityY, mMaxFlingVelocity));\n        if (velocityX != 0 || velocityY != 0) {\n            mViewFlinger.fling(velocityX, velocityY);\n            return true;\n        }\n        return false;\n    }", "public int size(){\n  return elements.size();\n}\n", "public UserScenario createUserScenario(final UserScenario scenario) {\n        return invoke(USER_SCENARIOS,\n                new RequestClosure<JsonObject>() {\n                    @Override\n                    public JsonObject call(Invocation.Builder request) {\n                        String         json = scenario.toJSON().toString();\n                        Entity<String> data = Entity.entity(json, MediaType.APPLICATION_JSON_TYPE);\n                        return request.post(data, JsonObject.class);\n                    }\n                },\n                new ResponseClosure<JsonObject, UserScenario>() {\n                    @Override\n                    public UserScenario call(JsonObject json) {\n                        return new UserScenario(json);\n                    }\n                }\n        );\n    }", "    public OObject function( OObject x ){\n\treturn x.factorial();\n    }\n", "public static boolean startWithSpace(String s){\n  return s.length() > 0 && Character.isWhitespace(s.charAt(0));\n}\n", "public void setStorageProp(String key, Object value) {\n    this.storageProps.setProp(key, value);\n    updateStorageFields(this.storageProps, key, value);\n  }", "public void calculateChainSwingBuffer ( float maxAngle , int bufferTime , float angleDecrement , float divisor , EntityLivingBase entity ) { this . prevYawVariation = this . yawVariation ; if ( entity . renderYawOffset != entity . prevRenderYawOffset && M", "public void processed ( String sourceId , String targetId , boolean linkExisted , String linkId , boolean linkWasCreated , Situation situation , ReconAction action ) { if ( sourceId != null ) { sourceProcessed . incrementAndGet ( ) ; } if ( targetId != nu", "private String translateDataType(String possibleData) {\n\t\tif (possibleData.equals(\"string\") | possibleData.equals(\"int8\")\n\t\t\t\t| possibleData.equals(\"uint8\") | possibleData.equals(\"int16\")\n\t\t\t\t| possibleData.equals(\"unit16\") | possibleData.equals(\"int32\")\n\t\t\t\t| possibleData.equals(\"uint32\") | possibleData.equals(\"float\")\n\t\t\t\t| possibleData.equals(\"double\")) {\n\t\t\treturn possibleData;\n\t\t}\n\t\tif (possibleData.contains(\"java.lang.Long\")) {\n\t\t\treturn \"int8\";\n\t\t} else if (possibleData.contains(\"java.lang.Integer\")) {\n\t\t\treturn \"int32\";\n\t\t} else if (possibleData.contains(\"java.lang.Float\")) {\n\t\t\treturn \"int32\";\n\t\t}\n\t\treturn \"string\";\n\t}", "\tpublic void setTargetTemperature(double temperature) {\n\t\tif (temperature != this.targetTemperature) {\n\t\t\tthis.targetTemperature = temperature;\n\t\t\tphysBoiler.setTargetTemperature(targetTemperature);\n\t\t\tthis.setChanged();\n\t\t\tthis.notifyObservers();\n\t\t}\n\t}\n", "private void computeChecksum ( ) { synchronized ( this . checksumLock ) { if ( this . checksumSet ) { return ; } long sum = NUM_ ; if ( this . checksumRange == null ) { sum = computeCheckSum ( NUM_ , this . length ( ) ) ; } else { for ( int lowBoundIndex ", "public void onPullUpToRefresh ( final PullToRefreshBase < V > refreshView ) ;", "public static String toSingleLineWKT(CoordinateReferenceSystem crs) {\n        String wkt = null;\n        try {\n            // this is a lenient transformation, works with polar stereographics too\n            Formattable formattable = (Formattable) crs;\n            wkt = formattable.toWKT(0, false);\n        } catch (ClassCastException e) {\n            wkt = crs.toWKT();\n        }\n\n        wkt = wkt.replaceAll(\"\\n\", \"\").replaceAll(\"  \", \"\");\n        return wkt;\n    }", "protected ESOptimization createOptimizer(RandomGenerator random) throws UndefinedParameterError {\n  return new ESParameterOptimization(this,operators.length,ESOptimization.INIT_TYPE_RANDOM,getParameterAsInt(PARAMETER_MAX_GENERATIONS),getParameterAsInt(PARAMETER_GENERATIONS_WITHOUT_IMPROVAL),getParameterAsInt(PARAMETER_POPULATION_SIZE),getParameterAsInt(PARAMETER_SELECTION_TYPE),getParameterAsDouble(PARAMETER_TOURNAMENT_FRACTION),getParameterAsBoolean(PARAMETER_KEEP_BEST),getParameterAsInt(PARAMETER_MUTATION_TYPE),getParameterAsDouble(PARAMETER_CROSSOVER_PROB),getParameterAsBoolean(PARAMETER_SHOW_CONVERGENCE_PLOT),random,this);\n}\n", "\tpublic int getItemType1() throws VException {\n\t\treturn new Integer(get(RelationHome.KEY_TYPE1).toString()).intValue();\n\t}\n", "public String generateInstanceId ( ) throws SchedulerException { String property = System . getProperty ( getSystemPropertyName ( ) ) ; if ( property == null ) { throw new SchedulerException ( STR_ + SYSTEM_PROPERTY + STR_ ) ; } if ( getPrepend ( ) != nul", "static File createSnapshotFile(String name,File directory,long index,long timestamp){\n  return new File(directory,String.format(\"%s-%d-%s.snapshot\",Assert.notNull(name,\"name\"),index,TIMESTAMP_FORMAT.format(new Date(timestamp))));\n}\n", "public String decrypt(String data) throws UnsupportedEncodingException, NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n        if (data == null) return null;\n        byte[] dataBytes = Base64.decode(data, mBuilder.getBase64Mode());\n        SecretKey secretKey = getSecretKey(hashTheKey(mBuilder.getKey()));\n        Cipher cipher = Cipher.getInstance(mBuilder.getAlgorithm());\n        cipher.init(Cipher.DECRYPT_MODE, secretKey, mBuilder.getIvParameterSpec(), mBuilder.getSecureRandom());\n        byte[] dataBytesDecrypted = (cipher.doFinal(dataBytes));\n        return new String(dataBytesDecrypted);\n    }", "public void createKLT() {\n\t\tPkltConfig config = new PkltConfig();\n\t\tconfig.templateRadius = 3;\n\t\tconfig.pyramidScaling = new int[]{1,2,4,8};\n\n\t\ttracker = FactoryPointTracker.klt(config, new ConfigGeneralDetector(600, 6, 1),\n\t\t\t\timageType, derivType);\n\t}", "ArchiveException ( String message , Exception cause ) { super ( message , cause ) ; }", "    public void initialize(Object[] parm1) throws com.sun.star.uno.Exception {\n        aState = \"just initialized\";\n        XConnector cntr = (XConnector)UnoRuntime.queryInterface(\n                                                XConnector.class, parm1[0]);\n        ConnThread aThread = new ConnThread(cntr, (String)parm1[1]);\n        aThread.start();\n    }\n", "public static void waitElementToNotBePresent ( SearchContext parent , By by , int waitInSeconds ) { Preconditions . checkNotNull ( parent ) ; Preconditions . checkNotNull ( by ) ; try { WebElementWait wait = new WebElementWait ( parent , waitInSeconds ) ;", "    public void mouseDown(MouseEvent e, int x, int y) {\n        super.mouseDown(e, x, y);\n\n\t    Figure pressedFigure =  drawing().findFigureInside(x, y);\n\t    TextHolder textHolder = getTypingTarget();\n        if (!fConnected && pressedFigure != null &&\n                     textHolder != null && pressedFigure != textHolder) {\n            textHolder.connect(pressedFigure);\n            fConnected = true;\n        }\n    }\n", "\tprotected Command getReconnectSourceCommand(ReconnectRequest request) {\n\t\t\n\t\tBasicConnectionCmd cmd = new BasicConnectionCmd();\n\t\tcmd.setConnection( (BasicConnectionElement)request\n\t\t\t\t\t\t\t.getConnectionEditPart().getModel()\n\t\t\t\t\t\t  );\n\t\t\n\t\tBasicNodeElementEditPart editPart = (BasicNodeElementEditPart)getHost();\n\t\tConnectionAnchor anchor = editPart.getSourceConnectionAnchor(request);\n\t\t\n\t\tBasicNodeElement model = (BasicNodeElement)getHost().getModel();\n\t\tcmd.setSource( model );\n\t\tPoint pt = new Point( ((BasicNodeElementEditPart)getHost())\n\t\t\t\t\t\t\t  .getSourceConnectionAnchorPoint(anchor)\n\t\t\t\t\t\t\t );\n\t\t\n\t\tgetHostFigure().translateToRelative(pt);\n\t\tcmd.setSourceTerminal(pt);\n\t\t\n\t\treturn cmd;\n\t}\t\t\n", "public static void addLooperPrinter ( Printer printer ) { addLooperPrinter ( Looper . myLooper ( ) , printer ) ; }", "  public void ClearProject(){\n      boolean debug = false;\n      projectNameTextField.setEditable(true);\n      statusTextField.setText(SeqProject.statusTENTATIVE);\n      projectNameTextField.setText(\"\");\n      project1.clearProject();\n\n      submissionTextArea.setText(\"Project Cleared\");\n      rxnTab.ClearRxn();\n\n      project1=SeqRxn.setDate(project1, requestDateTextField);\n      projectRefresh(true);\n  }\n", "private void generatePeerLinks(final Metadata m, final Element e) {\n        for (final PeerLink peerLink : m.getPeerLinks()) {\n            final Element peerLinkElement = new Element(\"peerLink\", NS);\n            addNotNullAttribute(peerLinkElement, \"type\", peerLink.getType());\n            addNotNullAttribute(peerLinkElement, \"href\", peerLink.getHref());\n            if (peerLinkElement.hasAttributes()) {\n                e.addContent(peerLinkElement);\n            }\n        }\n    }", "public static String getEntryPointDecoratedName(Method method, boolean scanEntryPointAnnotation) {\r\n\t\tString decoratedName = method.getName();\r\n\r\n\t\tif (scanEntryPointAnnotation) {\r\n\t\t\t// we look at the method level\r\n\t\t\tif (method.isAnnotationPresent(ExternalEntryPoint.class)) {\r\n\t\t\t\tfinal ExternalEntryPoint externalEntryPoint = method.getAnnotation(ExternalEntryPoint.class);\r\n\t\r\n\t\t\t\tif (StringUtils.isNotBlank(externalEntryPoint.name())) {\r\n\t\t\t\t\tdecoratedName = externalEntryPoint.name();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn decoratedName;\r\n\t}", "float invLogFunc(float y){\n  return (float)(Math.log((1f - reverse(y)) * (LogBase - 1) + 1) / Math.log(LogBase));\n}\n", "@Override\n    public List<EnhanceEntity> populateRelation(EntityMetadata m, Client client, int maxResults)\n    {\n        if (log.isInfoEnabled())\n        {\n            log.info(\"On populate relation via JPQL\");\n        }\n        List<EnhanceEntity> ls = null;\n        List<String> relationNames = m.getRelationNames();\n        boolean isParent = m.isParent();\n\n        boolean isRowKeyQuery = conditions != null ? conditions.keySet().iterator().next() : false;\n\n        // If Query is not for find by range.\n        if (!isRowKeyQuery)\n        {\n            // If holding associations.\n            if (!isParent)\n            {\n                // In case need to use secondary indexes.\n                if (MetadataUtils.useSecondryIndex(((ClientBase) client).getClientMetadata()))\n                {\n                    ls = ((CassandraClientBase) client).find(m, relationNames, this.conditions.get(isRowKeyQuery),\n                            maxResults, null);\n                }\n                else\n                {\n                    // prepare lucene query and find.\n                    Set<String> rSet = fetchDataFromLucene(m.getEntityClazz(), client);\n\n                    try\n                    {\n                        ls = (List<EnhanceEntity>) ((CassandraClientBase) client).find(m.getEntityClazz(),\n                                relationNames, true, m, rSet.toArray(new Object[] {}));\n                    }\n                    catch (Exception e)\n                    {\n                        log.error(\"Error while executing handleAssociation for cassandra, Caused by: \", e);\n                        throw new QueryHandlerException(e);\n                    }\n                }\n            }\n            else\n            {\n                if (MetadataUtils.useSecondryIndex(((ClientBase) client).getClientMetadata()))\n                {\n                    // in case need to search on secondry columns and it is not\n                    // set\n                    // to true!\n                    ls = ((CassandraClientBase) client).find(this.conditions.get(isRowKeyQuery), m, true,\n                            m.getRelationNames(), maxResults, null);\n                }\n                else\n                {\n                    ls = onAssociationUsingLucene(m, client, ls);\n                }\n            }\n        }\n        else\n        {\n            ls = handleFindByRange(m, client, ls, conditions, isRowKeyQuery, null, maxResults);\n        }\n        return ls;\n    }", "    public void setRenewRequest(Service service, String uuid, long timeout) {\n        setMethod(\"SUBSCRIBE\");\n        injectRemoteAddress(service);\n        setSID(uuid);\n        setTimeout(timeout);\n    }\n", "boolean computeAngleOffset(){\n  if (mFinished) {\n    return false;\n  }\n  long systemClock=AnimationUtils.currentAnimationTimeMillis();\n  long timePassed=systemClock - mStartMillis;\n  if (timePassed < mDurationMillis) {\nswitch (mMode) {\ncase SCROLL_MODE:\n      float sc=(float)timePassed / mDurationMillis;\n    mCurrAngleDeg=mStartAngleDeg + Math.round(mDeltaAngleDeg * sc);\n  break;\ncase FLING_MODE:\nfloat timePassedSeconds=timePassed / 1000.0f;\nfloat distance=mCoeffVelocity * mVelocity * timePassedSeconds - (DECELERATION * timePassedSeconds * timePassedSeconds / 2.0f);\nmCurrAngleDeg=mStartAngleDeg + Math.round(distance);\nbreak;\n}\nreturn true;\n}\n else {\nmFinished=true;\nreturn false;\n}\n}\n", "public static int parseInt(byte[] bytes, int from, int to) {\n        int result = 0;\n        for (int i = from; i < to && i < bytes.length; i++) {\n            result *= 10;\n            result += (bytes[i] - (byte) '0');\n        }\n        return result;\n  ", "public static String byteArrayToHex(final byte[] data,final int offset,final int length){\n  final StringBuffer buf=new StringBuffer();\n  for (int i=offset; i < offset + length; i++) {\n    int halfbyte=(data[i] >>> 4) & 0x0F;\n    int twohalfs=0;\n    do {\n ", "public static PackageNameMappingWithPackagePattern fromPackage(String packagePattern)\n    {\n        PackageNameMapping packageNameMapping = new PackageNameMapping();\n        packageNameMapping.setPackagePattern(packagePattern);\n        return packageNameMapping;\n    }", "public void abort ( ) { mAbort = BOOL_ ; }", "public void marshall(DataSource dataSource, ProtocolMarshaller protocolMarshaller) {\n\n        if (dataSource == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(dataSource.getDataSourceArn(), DATASOURCEARN_BINDING);\n            protocolMarshaller.marshall(dataSource.getName(), NAME_BINDING);\n            protocolMarshaller.marshall(dataSource.getDescription(), DESCRIPTION_BINDING);\n            protocolMarshaller.marshall(dataSource.getType(), TYPE_BINDING);\n            protocolMarshaller.marshall(dataSource.getServiceRoleArn(), SERVICEROLEARN_BINDING);\n            protocolMarshaller.marshall(dataSource.getDynamodbConfig(), DYNAMODBCONFIG_BINDING);\n            protocolMarshaller.marshall(dataSource.getLambdaConfig(), LAMBDACONFIG_BINDING);\n            protocolMarshaller.marshall(dataSource.getElasticsearchConfig(), ELASTICSEARCHCONFIG_BINDING);\n            protocolMarshaller.marshall(dataSource.getHttpConfig(), HTTPCONFIG_BINDING);\n            protocolMarshaller.marshall(dataSource.getRelationalDatabaseConfig(), RELATIONALDATABASECONFIG_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public CAddDatabaseAction ( final JTree projectTree ) { super ( STR_ ) ; m_projectTree = Preconditions . checkNotNull ( projectTree , STR_ ) ; putValue ( MNEMONIC_KEY , ( int ) STR_ . charAt ( NUM_ ) ) ; }", "\tpublic double evaluate(double operand) {\n\t\treturn 0;\n\t}\n", "public void setInvalidValues(final Set<String> invalidValues,\n                                 final boolean isCaseSensitive,\n                                 final String invalidValueErrorMessage) {\n        if (isCaseSensitive) {\n            this.invalidValues = invalidValues;\n        } else {\n            this.invalidValues = new HashSet<String>();\n            for (String value : invalidValues) {\n                this.invalidValues.add(value.toLowerCase());\n            }\n        }\n        this.isCaseSensitive = isCaseSensitive;\n        this.invalidValueErrorMessage = invalidValueErrorMessage;\n    }", "public static void publish ( int id , String commit , AsyncCallback < JavaScriptObject > cb ) { JavaScriptObject in = JavaScriptObject . createObject ( ) ; call ( id , commit , STR_ ) . post ( in , cb ) ; }", "public static void main(String[] argv) {\n\t\ttry {\n\t\t\tStopwords sw = new Stopwords();\n\t\t\tsw.write(\"Z://wangye//674//processed1\");\n\t\t}catch(Exception ioe) {\n\t\t\tioe.printStackTrace();\n\t\t}\n\t}", "public ActionListBox addItem(final String label, final Runnable action) {\n        return addItem(new Runnable() {\n            @Override\n            public void run() {\n                action.run();\n            }\n\n            @Override\n            public String toString() {\n                return label;\n            }\n        });\n    }", "public final boolean isGoodState ( TLCState state ) { return state . allAssigned ( ) ; }", "@Override\n\tpublic java.util.List<com.liferay.commerce.model.CommerceCountry> getCommerceCountries(\n\t\tint start, int end) {\n\t\treturn _commerceCountryLocalService.getCommerceCountries(start, end);\n\t}", "    public void run(WorkData data) {\n        try {\n            Item item = (Item) data.getAttribute(\"item\");\n            if (item == null) {\n                logger.warn(\"item is null on command \" + getName());\n                return;\n            }\n            DbQuery query = DbManager.getInstance().createQuery(getApplication().getProperty(\"items-table\") + \"_comments\");\n            query.addAndPredicate(\"item_id\", item.getId(), DbQuery.EQUALS);\n            List comments =DbManager.getInstance().select(query);\n            data.setAttribute(\"comments\",comments);\n        } catch (Exception e) {\n            logger.error(\"cannot execute commnad \" + getName(), e);\n        }\n\n    }\n", "public Revision next ( ) { try { switch ( modus ) { case INIT : return init ( ) ; case ITERATE_WITH_MAPPING : return chronoIterator . next ( ) ; case ITERATE_WITHOUT_MAPPING : return revisionIterator . next ( ) ; default : throw new RuntimeException ( STR", "public static boolean supported ( ) { return engine != null ; }", "public Future < List < Job > > jobRangeByType ( String type , String state , long from , long to , String order ) { Future < List < Job > > future = Future . future ( ) ; jobService . jobRangeByType ( type , state , from , to , order , future . completer ( ) ) ; return future ; }", "protected Elide(AuditLogger auditLogger,DataStore dataStore,EntityDictionary dictionary,JsonApiMapper mapper,Function<RequestScope,PermissionExecutor> permissionExecutor){\n  this(auditLogger,dataStore,dictionary,mapper,null,Collections.singletonList(new DefaultFilterDialect(dictionary)),Collections.singletonList(new DefaultFilterDialect(dictionary)),false);\n}\n", "    public void updateChargeInfo(ChargeInfo info) throws SimsException {\n        chargeCRUD.updateChargeInfo(info);\n    }\n", "public static InstrumentedExecutorService newCachedThreadPool(\n            ThreadFactory threadFactory, MetricRegistry registry) {\n        return new InstrumentedExecutorService(Executors.newCachedThreadPool(threadFactory), registry);\n    }", "public AtomicInteger read(String value){\n  Integer number=Integer.valueOf(value);\n  return new AtomicInteger(number);\n}", "private void addRouteContextToMessage(final ServerMessage message){\n  byte[] ids=message.getBytesProperty(idsHeaderName);\n  if (ids == null) {\n    ids=new byte[8];\n  }\n else {\n    byte[] newIds=new byte[ids.length + 8];\n    System.arraycopy(ids,0,newIds,8", "public void marshall(ResourceTargetDefinition resourceTargetDefinition, ProtocolMarshaller protocolMarshaller) {\n\n        if (resourceTargetDefinition == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n       ", "\tpublic void setShowScaleCtrl(boolean b) {\n\t\tif (_scale == b) {\n\t\t\treturn;\n\t\t}\n\t\t_scale = b;\n\t\tsmartUpdate(\"showScaleCtrl\", b);\n\t}\n", "public void addToGlobalBlacklist(String host,long timeout){\n  if (isGlobalBlacklistEnabled()) {\nsynchronized (globalBlacklist) {\n      globalBlacklist.put(host,timeout);\n    }\n  }\n}\n", "    private int getAnzPatternInString(String str, String pattern) {\n        int anzPattern = 0;\n        int index = -1;\n        while ((index = str.indexOf(pattern, index + 1)) >= 0) {\n            anzPattern++;\n        }\n        return anzPattern;\n    }\n", "\tpublic void update(long elapsedTime){\n\t\tif(!(position.y<-.1f)){\n\t\t\tposition.y-=gravitypull;\n\t\t\t\tposition.x = position.x + ( (float)Math.cos((facingDirection) * 0.0174f) )*2;\n\t\t\t\tposition.z = position.z + ( (float)Math.sin((facingDirection) * 0.0174f) )*2;\n\t\t\t\tgravitypull+=.02f;\n\t\n\t\t\t//position.x-=;\n\t\t\t//position.z-=;\n\t\t} else {\n\t\t\tigs.popPopper.play((new Random()).nextFloat() + 1f,(new Random()).nextFloat() + 1f);//TODO: enable when sound fixed\n\t\t\tsynchronized(igs.entities){\n\t\t\t\t//TODO: radius of noise\n\t\t\t\tigs.entities.add(new Noise(position,.2f,20000L,igs));\n\t\t\t\tigs.entities.remove(this);\n\t\t\t}\n\t\t}\n\t}\n", "public JsonWriter name(String name) {\n    try {\n      stream.name(name);\n      return this;\n    } catch (Exception e) {\n      throw rethrow(e);\n    }\n  }", "public Symbol resolveBinaryNameOrIdent(ModuleSymbol msym, String name) {\n        try {\n            Name flatname = names.fromString(name.replace(\"/\", \".\"));\n            return finder.loadClass(msym, flatname);\n        } catch (CompletionFailure ignore) {\n            return resolveIdent(msym, name);\n        }\n    }", "\tpublic void onPreviousPushed(String value, Double delay){\n\t\tthis.evalCommand(\"totem --previous\");\n\t}\n", "private void initializeTenantStores(Tenant tenant) {\n        DBService.instance(tenant).createStoreIfAbsent(SchemaService.APPS_STORE_NAME, false);\n        DBService.instance(tenant).createStoreIfAbsent(TaskManagerService.TASKS_STORE_NAME, false);\n    }", "void persistBlocks(String path, INodeFileUnderConstruction file)\n                     throws IOException {\n    waitForReady();\n\n    writeLock();\n    try {\n      fsImage.getEditLog().logOpenFile(path, file);\n      if (NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\"DIR* FSDirectory.persistBlocks: \"\n                                      +path+\" with \"+ file.getBlocks().length\n                                      +\" blocks is persisted to the file system\");\n      }\n    } finally {\n      writeUnlock();\n    }\n  }", "protected void initControlListeners() {\n        // if the control got resized the overlay rect must be rest\n        control.layoutBoundsProperty().addListener(observable -> resetRippler());\n        if(getChildren().contains(control))\n            control.boundsInParentProperty().addListener(observable -> resetRippler());\n        control.addEventHandler(MouseEvent.MOUSE_PRESSED,\n            (event) -> createRipple(event.getX(), event.getY()));\n        // create fade out transition for the ripple\n        control.addEventHandler(MouseEvent.MOUSE_RELEASED, e -> releaseRipple());\n    }", "private static void fixInnerNetherOrEndRegionData ( Path oldWorldPath ) { try { com . google . common . io . Files . move ( oldWorldPath . resolve ( STR_ ) . resolve ( STR_ ) . toFile ( ) , oldWorldPath . resolve ( STR_ ) . toFile ( ) ) ; } catch ( IOExce", "@Override\n    public boolean fileCreated(File file) throws WatchingException {\n        try {\n            File output = process();\n            if (deployWebJarToWisdom) {\n                // Copy the webjar to the right location\n                copyToDestination(output);\n            }\n        } catch (Exception e) {\n            throw new WatchingException(\"Failure while building the webjar\", e);\n        }\n        return true;\n    }", "\tpublic double getRadius() {\n\t\tif (autoRadius) {\n\t\t\t// Return auto radius from front or rear\n\t\t\tdouble r = -1;\n\t\t\tSymmetricComponent c = this.getPreviousSymmetricComponent();\n\t\t\tif (c != null) {\n\t\t\t\tr = c.getFrontAutoRadius();\n\t\t\t}\n\t\t\tif (r < 0) {\n\t\t\t\tc = this.getNextSymmetricComponent();\n\t\t\t\tif (c != null) {\n\t\t\t\t\tr = c.getRearAutoRadius();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (r < 0)\n\t\t\t\tr = DEFAULT_RADIUS;\n\t\t\treturn r;\n\t\t}\n\t\treturn radius;\n\t}\n", "public void ExportStopList(String filename,String systemName) throws IOException {\n  BufferedWriter writer=new BufferedWriter(new FileWriter(filename));\n  writer.write(systemName + \" LIST OF STOPS\");\n  writer.newLine();\n  writer.newLine();\n  ArrayList<String> stops=new ArrayList<String>();\n  for (  ScheduledRoute r : this.routes) {\n    for (    String s : r.getStopSequence()) {\n      if (!(stops.contains(s)))       stops.add(s);\n    }\n  }\n  for (  String s : stops) {\n    writer.write(s);\n    writer.newLine();\n  }\n  writer.close();\n}\n", "public boolean hasFailed ( ) { return this . failed ; }", "\tpublic int getSelectIgmp() {\n\t\tint nIgmpRow = tblIgmpInfo.getSelectedRow();\n\n\t\treturn nIgmpRow;\n\t}\n", "public static boolean pollingWithTimeout ( CheckedBooleanSupplier supplier , long waitTimeMs , long timeoutMs ) throws InterruptedException , ExecutionException { return pollingWithTimeout ( supplier , waitTimeMs , timeoutMs , null , null ) ; }", "  public Enumeration children() {\n    loadChildren();\n    return children();\n  }\n", "AdminResponse sendAndWait(RegionAdminRequest msg) throws CacheException {\n  msg.setRegionName(getFullPath());\n  try {\n    return vm.sendAndWait(msg);\n  }\n catch (  RuntimeAdminException ex) {\n    Throwable cause=ex.getRootCause();\n    if (cause instanceof CacheException) {\n      throw (CacheException)cause;\n    }\n else     if (cause instanceof CacheRuntimeException) {\n      throw (CacheRuntimeException)cause;\n    }\n else {\n      throw ex;\n    }\n  }\n}\n", "@Override\n    public void shutdownModule() throws ModuleShutdownException {\n        super.shutdownModule();\n\n        for (Map.Entry<String, ConnectionPool> e : h_ConnectionPools.entrySet()) {\n            e.getValue().close();\n        }\n\n    }", "public void marshall(DecryptRequest decryptRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (decryptRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(decryptRequest.getCiphertextBlob(), CIPHERTEXTBLOB_BINDING);\n            protocolMarshaller.marshall(decryptRequest.getEncryptionContext(), ENCRYPTIONCONTEXT_BINDING);\n            protocolMarshaller.marshall(decryptRequest.getGrantTokens(), GRANTTOKENS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public Matrix4f translationRotateScaleMulAffine(float tx, float ty, float tz, \n                                                    float qx, float qy, float qz, float qw, \n                                                    float sx, float sy, float sz,\n                                                    Matrix4f m) {\n        float w2 = qw * qw;\n        float x2 = qx * qx;\n        float y2 = qy * qy;\n        float z2 = qz * qz;\n        float zw = qz * qw;\n        float xy = qx * qy;\n        float xz = qx * qz;\n        float yw = qy * qw;\n        float yz = qy * qz;\n        float xw = qx * qw;\n        float nm00 = w2 + x2 - z2 - y2;\n        float nm01 = xy + zw + zw + xy;\n        float nm02 = xz - yw + xz - yw;\n        float nm10 = -zw + xy - zw + xy;\n        float nm11 = y2 - z2 + w2 - x2;\n        float nm12 = yz + yz + xw + xw;\n        float nm20 = yw + xz + xz + yw;\n        float nm21 = yz + yz - xw - xw;\n        float nm22 = z2 - y2 - x2 + w2;\n        float m00 = nm00 * m.m00 + nm10 * m.m01 + nm20 * m.m02;\n        float m01 = nm01 * m.m00 + nm11 * m.m01 + nm21 * m.m02;\n        this._m02(nm02 * m.m00 + nm12 * m.m01 + nm22 * m.m02);\n        this._m00(m00);\n        this._m01(m01);\n        this._m03(0.0f);\n        float m10 = nm00 * m.m10 + nm10 * m.m11 + nm20 * m.m12;\n        float m11 = nm01 * m.m10 + nm11 * m.m11 + nm21 * m.m12;\n        this._m12(nm02 * m.m10 + nm12 * m.m11 + nm22 * m.m12);\n        this._m10(m10);\n        this._m11(m11);\n        this._m13(0.0f);\n        float m20 = nm00 * m.m20 + nm10 * m.m21 + nm20 * m.m22;\n        float m21 = nm01 * m.m20 + nm11 * m.m21 + nm21 * m.m22;\n        this._m22(nm02 * m.m20 + nm12 * m.m21 + nm22 * m.m22);\n        this._m20(m20);\n        this._m21(m21);\n        this._m23(0.0f);\n        float m30 = nm00 * m.m30 + nm10 * m.m31 + nm20 * m.m32 + tx;\n        float m31 = nm01 * m.m30 + nm11 * m.m31 + nm21 * m.m32 + ty;\n        this._m32(nm02 * m.m30 + nm12 * m.m31 + nm22 * m.m32 + tz);\n        this._m30(m30);\n        this._m31(m31);\n        this._m33(1.0f);\n        boolean one = Math.abs(sx) == 1.0f && Math.abs(sy) == 1.0f && Math.abs(sz) == 1.0f;\n        _properties(PROPERTY_AFFINE | (one && (m.properties & PROPERTY_ORTHONORMAL) != 0 ? PROPERTY_ORTHONORMAL : 0));\n        return this;\n    }", "@Nullable\n  public static String getFromFirstExcl (@Nullable final String sStr, final char cSearch)\n  {\n    return _getFromFirst (sStr, cSearch, false);\n  }", "public DGetPassword(JFrame parent,String title){\n  super(parent,title,ModalityType.DOCUMENT_MODAL);\n  initComponents();\n}\n", "void renderElementAsHTML ( StringBuilder builder , PodRenderingContext context ) ;", "public static final String formatSpeed ( float speed ) { float realSpeed = speed * KB_CONSTANT ; if ( realSpeed < KB_CONSTANT ) { float kSize = realSpeed / KB_CONSTANT ; kSize = ( ( float ) ( ( int ) ( kSize * NUM_ ) ) ) / NUM_ ; return kSize + STR_ ; } e", "public static File createTemporaryDirectory(String prefix){\n  while (true) {\n    String candidateName=prefix + TEMPORARY_DIRECTORY_PRNG.nextInt();\n    File result=new File(System.getProperty(\"java.io.tmpdir\"),candidateName);\n    if (result.mkdir()) {\n      return result;\n    }\n  }\n}\n", "public byte[] readEEPROM(DeviceHandle handle,short offset,int length) throws IllegalArgumentException {\n  if (offset + length > 256) {\n    throw new IllegalArgumentException(\"cannot read more than 256 \" + \"bytes from EEPROM - requested to read to byte [\" + (offset + length) + \"]\");\n  }\n  byte[] data=new byte[length];\n  ByteBuffer buffer=ByteBuffer.allocateDirect(1);\n  try {\n    writeRegister(handle,Block.I2C,EEPROM_ADDRESS,(byte)offset,1);\n  }\n catch (  LibUsbException e) {\n    mLog.error(\"usb error while attempting to set read address to \" + \"EEPROM register, prior to reading the EEPROM device \" + \"descriptor\",e);\n  }\n  for (int x=0; x < length; x++) {\n    try {\n      read(handle,EEPROM_ADDRESS,Block.I2C,buffer);\n      data[x]=buffer.get();\n      buffer.rewind();\n    }\n catch (    Exception e) {\n      mLog.error(\"error while reading eeprom byte [\" + x + \"/\"+ length+ \"] aborting eeprom read and returning partially \"+ \"filled descriptor byte array\",e);\n      x=length;\n    }\n  }\n  return data;\n}\n", "public void stop ( ) { engine . stop ( ) ; }", "void readBytes ( ChannelHandlerContext ctx , ByteBuf bytes ) ;", "@Override public void clean(){\n  m_storage=null;\n  m_keys=null;\n}\n", "private Node parse ( Sentence sent , Integer trace ) { if ( trace == null ) trace = this . _trace ; Node tree = new Node ( STR_ ) ; for ( Token elem : sent ) { tree . append ( new Node ( elem . getAnnotation ( STR_ ) , elem . toString ( ) ) ) ; } for ( in", "public RouteTableInner updateTags(String resourceGroupName, String routeTableName, Map<String, String> tags) {\n        return updateTagsWithServiceResponseAsync(resourceGroupName, routeTableName, tags).toBlocking().last().body();\n    }", "    public double x() {\n        return fX;\n    }\n", "    public boolean equals(Object object) {\n\treturn (super.equals(object) && object instanceof MediaSize);\n    }\n", "public boolean killJob(String jobIdFile) {\n    List<String> jobIdFileContent = readFromFile(jobIdFile);\n    if (jobIdFileContent.size() > 0) {\n      String[] slurmCmd = new String[]{\"scancel\", jobIdFileContent.get(0)};\n      return runProcess(null, slurmCmd, new StringBuilder());\n    } else {\n      LOG.log(Level.SEVERE, \"Failed to read the Slurm Job id from file: {0}\", jobIdFile);\n      return false;\n    }\n  }", "public Schema ( ) { }", "public synchronized void report ( int id , long seqno , long time , long reportTime , D datum ) { processReport ( id , seqno , time , datum ) ; ThreadPosition tp = array . get ( id ) ; tp . reportTime = reportTime ; notifyAll ( ) ; }", "public EncryptionService(){\n  if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null) {\n    Security.addProvider(new BouncyCastleProvider());\n  }\n}\n", "public PrintStream toPrintStream(Charset charset) {\n\t\treturn Errors.rethrow().get(() -> {\n\t\t\treturn new PrintStream(toOutputStream(charset), true, charset.name());\n\t\t});\n\t}", "public void handleSelector(String selector){\n  if (!(selector.startsWith(\".\") || selector.startsWith(\"#\"))) {\n    selector=selector.toLowerCase();\n  }\n  int length=selector.length();\n  if (selector.endsWith(\",\")) {\n    if (length > 1) {\n      selector=selector.substring(0,length - 1);\n      selectorTokens.addElement(selector);\n    }\n    addSelector();\n  }\n else   if (length > 0) {\n    selectorTokens.addElement(selector);\n  }\n}\n", "private java.awt.Color fxToAWTColor(Color color){\n  int r=((int)color.getRed() * 255);\n  int g=((int)color.getGreen() * 255);\n  int b=((int)color.getBlue() * 255);\n  int rgb=(r << 16) + (g << 8) + b;\n  return new java.awt.Color(rgb);\n}\n", "public void addPage(@NonNull List<MODEL> items){\n  setAutoNotifyDataSetChanged(false);\n  addAll(items);\n  setAutoNotifyDataSetChanged(true);\n  onNewItemsAdded(items.size());\n  notifyItemRangeInsertedIfNeed(size() - (items.size() + getHeadersCount()),items.size());\n}\n", "private String getAqlQuery(boolean includeVirtualRepos) throws IOException {\n        List<String> layersDigest = DockerUtils.getLayersDigests(manifest);\n        StringBuilder aqlRequestForDockerSha = new StringBuilder(\"items.find({\")\n            .append(\"\\\"path\\\":\\\"\").append(imagePath).append(\"\\\",\\\"$or\\\":[\");\n\n        List<String> layersQuery = new ArrayList<String>();\n        for (String digest : layersDigest) {\n            String shaVersion = DockerUtils.getShaVersion(digest);\n            String shaValue = DockerUtils.getShaValue(digest);\n\n            String singleFileQuery = String.format(\"{\\\"name\\\": \\\"%s\\\"}\", DockerUtils.digestToFileName(digest));\n\n            if (StringUtils.equalsIgnoreCase(shaVersion, \"sha1\")) {\n                singleFileQuery = String.format(\"{\\\"actual_sha1\\\": \\\"%s\\\"}\", shaValue);\n            }\n            layersQuery.add(singleFileQuery);\n        }\n\n        aqlRequestForDockerSha.append(StringUtils.join(layersQuery, \",\"));\n        if (includeVirtualRepos) {\n            aqlRequestForDockerSha.append(\"]}).include(\\\"name\\\",\\\"repo\\\",\\\"path\\\",\\\"actual_sha1\\\",\\\"virtual_repos\\\")\");\n        } else {\n            aqlRequestForDockerSha.append(\"]}).include(\\\"name\\\",\\\"repo\\\",\\\"path\\\",\\\"actual_sha1\\\")\");\n        }\n        return aqlRequestForDockerSha.toString();\n    }", "private boolean bundleListContains(List<JoinableResourceBundle> bundles, String bundleName) {\n\t\tboolean contains = false;\n\t\tfor (JoinableResourceBundle bundle : bundles) {\n\t\t\tif (bundle.getName().equals(bundleName)) {\n\t\t\t\tcontains = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn contains;\n\t}", "public void onLoad ( EvictableServerEntry entry ) { }", "    public MenuItem readMenus() throws Exception {\n        return readMenus(USER_MENU_DIR, USER_MENU);\n    }\n", "\tpublic Locale getLocale(String pDisplayName) {\n\t\tLocale[] lLocals = Locale.getAvailableLocales();\n\t\tfor (int j = 0; j < lLocals.length; j++) {\n\t\t\tLocale lLocale = lLocals[j];\n\t\t\tString lName = lLocale.getDisplayName();\n\t\t\tif (lName.endsWith(pDisplayName)) {\n\t\t\t\t// we have a match;\n\t\t\t\treturn lLocale;\n\t\t\t}\n\t\t}\n\t\treturn null; // No Locale for this name.\n\t}\n", "public ValueNumber forNumber ( int number ) { if ( number >= getNumValuesAllocated ( ) ) { throw new IllegalArgumentException ( STR_ + number + STR_ ) ; } return allocatedValueList . get ( number ) ; }", "public static void skipFully ( InputStream in , long bytes ) throws IOException { if ( bytes < NUM_ ) { throw new IllegalArgumentException ( STR_ + bytes + STR_ ) ; } long remaining = bytes ; while ( remaining > NUM_ ) { long skipped = in . skip ( remaini", "\tprotected void removeFromPanel() {\n\t\tthis.parentPanel.getPreconditions().remove(this);\n\t\tthis.parentPanel.remove(this, true);\n\t\tthis.parentPanel.doLayout();\n\t}\n", "    public void attachDialogFields(DialogField[] dialogFields) {\n        fAttachedDialogFields= dialogFields;\n        for (int i= 0; i < dialogFields.length; i++) {\n            dialogFields[i].setEnabled(fIsSelected);\n        }\n    }\n", "public void stopDiscovery ( ) { nsdManager . stopServiceDiscovery ( DiscoveryService . this ) ; Log . d ( LOG_TAG , STR_ ) ; }", "public static String getMD5Checksum(File file) throws IOException, NoSuchAlgorithmException {\n        final byte[] b = getChecksum(MD5, file);\n        return getHex(b);\n    }", "public NumberExpression<Integer> dayOfYear() {\n        if (dayOfYear == null) {\n            dayOfYear = Expressions.numberOperation(Integer.class, Ops.DateTimeOps.DAY_OF_YEAR, mixin);\n        }\n        return dayOfYear;\n    }", "@SuppressWarnings(\"unchecked\")\n    public int parse(String[] args, int index, List<Pair<Unrecognized, String>> invalid) {\n        Matcher matcher = null;\n        while (index < args.length && args[index].charAt(0) == '-' && args[index].length() > 1) {\n            if (args[index].equals(STOPPER)) {\n                ++index;\n                break;\n            } else {\n                if ((matcher = SOPTION.matcher(args[index])).matches()) {\n                    for (char letter: matcher.group(1).toCharArray()) {\n                        char key = Character.toLowerCase(letter);\n                        Field field = _booleans.get(key);\n                        if (field != null && field.getAnnotation(description.class) != null) {\n                            try {\n                                field.set(_options, Character.isLowerCase(letter));\n                            } catch (IllegalAccessException x) {\n                                report(String.valueOf(letter), Unrecognized.ARGUMENT, invalid);\n                            }\n                        } else {\n                            report(String.valueOf(letter), Unrecognized.ARGUMENT, invalid);\n                        }\n                    }\n                } else if ((matcher = LOPTION.matcher(args[index])).matches()) {\n//System.out.println(\"LOPTION: \" + args[index]);\n                    String param = matcher.group(1);\n                    String value = matcher.group(2);\n//System.out.println(\"groups = \" + matcher.groupCount());\n//System.out.println(\"value = \" + value);\n                    try {\n                        Field field = Beans.getKnownField(_prototype, Strings.toLowerCamelCase(param, '-'));\n                        if (field.getAnnotation(description.class) == null) {\n                            throw new NoSuchFieldException(param);\n                        } else if (value != null) { // allowing arguments like \"--data=\" if empty value is okay with the data object\n                            if (Collection.class.isAssignableFrom(field.getType())) {\n                                Class<?> elementType = field.getAnnotation(typeinfo.class).value()[0];\n                                ((Collection)field.get(_options)).add(new ValueOf(elementType).invoke(value));\n                            } else {\n                                field.set(_options, new ValueOf(field.getType(), field.getAnnotation(typeinfo.class)).invoke(value));\n                            }\n                        } else {\n                            field.set(_options, Boolean.TRUE);\n                        }\n                    } catch (NullPointerException x) {\n                        throw new IllegalArgumentException(\"Missing @typeinfo on Collection: \" + param);\n                    } catch (NoSuchFieldException|IllegalAccessException x) {\n                        report(args[index], Unrecognized.ARGUMENT, invalid);\n                    } catch (IllegalArgumentException x) {\n//x.printStackTrace(System.err);\n                        report(args[index], Unrecognized.VALUE, invalid);\n                    }\n                } else {\n                    report(args[index], Unrecognized.ARGUMENT, invalid);\n                }\n                ++index;\n            }\n        }\n        return index;\n    }", "private void reload() {\n        try {\n            if (!configFile.exists()) {\n                LOGGER.warn(\"Config file deleted \" + configFile + \", keeping old config.\");\n                return;\n            }\n            LOGGER.trace(\"Config reload triggered for \" + configFile);\n            if (parentSupplier != null) {\n                set(loadConfig(parentSupplier.get()));\n            } else {\n                set(loadConfig(null));\n            }\n        } catch (ProvidenceConfigException e) {\n            LOGGER.error(\"Exception when reloading \" + configFile, e);\n        }\n    }", "public void addLine(String line) {\n        int sep = line.indexOf('=');\n        if(sep > 0) {\n            put(line.substring(0,sep),line.substring(sep+1));\n        }\n    }", "public HectorCassandraClientConfigurer columnFamilyGcGraceSeconds ( Integer columnFamilyGcGraceSeconds ) { this . columnFamilyGcGraceSeconds = columnFamilyGcGraceSeconds ; return this ; }", "\tpublic boolean login(String nickname) throws ChatMemberIsAlreadyRegisteredException {\n\t\tif (this.chatMemberModelInterface != null) {\n\t\t\tthrow new ChatMemberIsAlreadyRegisteredException();\n\t\t}\n\t\ttry {\n\t\t\tChatMemberModelInterface chatMemberModelInterface = new ChatMemberModel(nickname);\n\t\t\tboolean result = this.chatServerModelInterface.registerChatClient(chatMemberModelInterface);\n\t\t\tif (result)\n\t\t\t\tthis.chatMemberModelInterface = chatMemberModelInterface;\n\t\t\treturn result;\n\t\t} catch (RemoteException e) {\n\t\t\treturn false;\n\t\t}\n\t}\n", "        public boolean remove(Icon icon) {\n            return iconSet.remove(icon);\n        }\n", "@SafeVarargs\n\tpublic static <T> T firstNotNull(T... args) {\n\t\tfor (T arg : args) {\n\t\t\tif (arg != null)\n\t\t\t\treturn arg;\n\t\t}\n\t\treturn null;\n\t}", "@Deprecated\n    public String getVersionString(int minDigits, int maxDigits) {\n        if (minDigits < 1 || maxDigits < 1\n                || minDigits > 4 || maxDigits > 4 || minDigits > maxDigits) {\n            throw new IllegalArgumentException(\"Invalid min/maxDigits range\");\n        }\n\n        int[] digits = new int[4];\n        digits[0] = getMajor();\n        digits[1] = getMinor();\n        digits[2] = getMilli();\n        digits[3] = getMicro();\n\n        int numDigits = maxDigits;\n        while (numDigits > minDigits) {\n            if (digits[numDigits - 1] != 0) {\n                break;\n            }\n            numDigits--;\n        }\n\n        StringBuilder verStr = new StringBuilder(7);\n        verStr.append(digits[0]);\n        for (int i = 1; i < numDigits; i++) {\n            verStr.append(\".\");\n            verStr.append(digits[i]);\n        }\n\n        return verStr.toString();\n    }", "private void useOurUIs ( ) { for ( String uiName : UI_LIST ) { uiName = uiName + STR_ ; uiDefaults . put ( uiName , UI_PACKAGE_PREFIX + uiName ) ; } }", "\tpublic void removeWaypoint(int index) {\n\t\twaypoints.remove(index);\n\t}\n", "public boolean isFinal(){\n  return Modifier.isFinal(field.getModifiers());\n}\n", "public static boolean containsIgnoreCase ( String [ ] array , String value ) { for ( String str : array ) { if ( value == null && str == null ) return BOOL_ ; if ( value != null && value . equalsIgnoreCase ( str ) ) return BOOL_ ; } return BOOL_ ; }", "public synchronized int writeToFile(JDBCSequentialFile file,byte[] data) throws SQLException {\n  try {\n    connection.setAutoCommit(false);\n    appendToLargeObject.setBytes(1,data);\n    appendToLargeObject.setInt(2,file.getId());\n    appendToLargeObject.executeUpdate();\n    connection.commit();\n    return data.length;\n  }\n catch (  SQLException e) {\n    connection.rollback();\n    throw e;\n  }\n}\n", "public static String format(Locale locale, TimeZone timeZone, String pattern, Date date) {\n\tsynchronized (data) {\n\t    String key = locale.toString() + '-' + timeZone.getID() + '-' + pattern;\n\t    Object obj = data.get(key);\n\t    if (obj != null) {\n\t\treturn ((SimpleDateFormat) obj).format(date);\n\t    }\n\t    SimpleDateFormat sdf = new SimpleDateFormat(pattern, locale);\n\t    sdf.setTimeZone(timeZone);\n\t    data.put(key, sdf);\n\t    return sdf.format(date);\n\t}\n    }", "\tpublic void dotExport(FileWriter writer, Vector v,boolean fresume) throws IOException {\n\t\tif (v.contains(this)) return;\n\t\tv.add(this);\n\t\twriter.write(\"  subgraph \" + \"cluster_\" + useCase_.hypnatedName() + getLabel() + \" {\\n\");\n//\t\twriter.write(\"    label=\\\"\" + useCase_.getName() + getLabel() + \"\\\";\\n\");\n\t\twriter.write(\"    \" + initDotLabel() + \"[shape=point];\\n\");\n\t\tSCState initial = (SCState) initial_.toArray()[0];\n\t\twriter.write(\"    \" + initDotLabel() + \" -> \" + initial.dotLabel() + \";\\n\");\n\t\tVector visited = new Vector();\n\t\tinitial.dotExport(writer,visited,fresume);\n\t\twriter.write(\"  }\\n\");\n\t\t// export transitions from this state\t\n\t\tdotExportTrans(writer,v,fresume);\n\t}\n", "public Type0Font ( String baseFont , PDFObject fontObj , PDFFontDescriptor descriptor ) throws IOException { super ( baseFont , descriptor ) ; PDFObject [ ] descendantFonts = fontObj . getDictRef ( STR_ ) . getArray ( ) ; fonts = new PDFFont [ descendantFonts . length ] ; for ( int i = NUM_ ; i < descendantFonts . length ; i ++ ) { fonts [ i ] = PDFFont . getFont ( descendantFonts [ i ] , null ) ; } }", "    public String getSetting(String key) {\n        if(type == OPEN_FOR_READING)\n            return settings.getProperty(key);\n        else\n            return \"\";\n    }\n", "@PostConstruct\n    public void initialize() {\n        final IRI root = rdf.createIRI(TRELLIS_DATA_PREFIX);\n        final IRI rootAuth = rdf.createIRI(TRELLIS_DATA_PREFIX + \"#auth\");\n        try (final TrellisDataset dataset = TrellisDataset.createDataset()) {\n            dataset.add(rdf.createQuad(Trellis.PreferAccessControl, rootAuth, ACL.mode, ACL.Read));\n            dataset.add(rdf.createQuad(Trellis.PreferAccessControl, rootAuth, ACL.mode, ACL.Write));\n            dataset.add(rdf.createQuad(Trellis.PreferAccessControl, rootAuth, ACL.mode, ACL.Control));\n            dataset.add(rdf.createQuad(Trellis.PreferAccessControl, rootAuth, ACL.agentClass, FOAF.Agent));\n            dataset.add(rdf.createQuad(Trellis.PreferAccessControl, rootAuth, ACL.accessTo, root));\n            LOGGER.debug(\"Preparing to initialize Trellis at {}\", root);\n            trellis.getResourceService().get(root).thenCompose(res -> initialize(root, res, dataset))\n                .exceptionally(err -> {\n                    LOGGER.warn(\"Unable to auto-initialize Trellis: {}. See DEBUG log for more info\", err.getMessage());\n                    LOGGER.debug(\"Error auto-initializing Trellis\", err);\n                    return null;\n                }).toCompletableFuture().join();\n        }\n    }", "private void extractInstructions(InstructionGroup group) {\n        for (InstructionGraphNode node : group.getNodes()) {\n            if (node != group.getRoot()) {\n                AbstractInsnNode insn = node.getInstruction();\n                method.instructions.remove(insn);\n                group.getInstructions().add(insn);\n            }\n        }\n    }", "public String info(){\n  StringBuilder sb=new StringBuilder();\n  sb.append(\"Script Type: \");\n  sb.append(scriptType);\n  sb.append(\"\\n\\n\");\n  sb.append(MLContextUtil.displayInputs(\"Inputs\",inputs,symbolTable));\n  sb.append(\"\\n\");\n  sb.append(MLContextUtil.displayOutputs(\"Outputs\",outputVariables,symbolTable));\n  sb.append(\"\\n\");\n  sb.append(MLContextUtil.displayMap(\"Input Parameters\",inputParameters));\n  sb.append(\"\\n\");\n  sb.append(MLContextUtil.displaySet(\"Input Variables\",inputVariables));\n  sb.append(\"\\n\");\n  sb.append(MLContextUtil.displaySet(\"Output Variables\",outputVariables));\n  sb.append(\"\\n\");\n  sb.append(MLContextUtil.displaySymbolTable(\"Symbol Table\",symbolTable));\n  sb.append(\"\\nScript String:\\n\");\n  sb.append(scriptString);\n  sb.append(\"\\nScript Execution String:\\n\");\n  sb.append(getScriptExecutionString());\n  sb.append(\"\\n\");\n  return sb.toString();\n}\n", "    public void times( UnaryExpression operand ) {\n        addOperand( OperatorType.TIMES, operand );\n    }\n", "private Type glbFlattened(List<Type> flatBounds, Type errT) {\n        List<Type> bounds = closureMin(flatBounds);\n\n        if (bounds.isEmpty()) {             // length == 0\n            return syms.objectType;\n        } else if (bounds.tail.isEmpty()) { // length == 1\n            return bounds.head;\n        } else {                            // length > 1\n            int classCount = 0;\n            List<Type> cvars = List.nil();\n            List<Type> lowers = List.nil();\n            for (Type bound : bounds) {\n                if (!bound.isInterface()) {\n                    classCount++;\n                    Type lower = cvarLowerBound(bound);\n                    if (bound != lower && !lower.hasTag(BOT)) {\n                        cvars = cvars.append(bound);\n                        lowers = lowers.append(lower);\n                    }\n                }\n            }\n            if (classCount > 1) {\n                if (lowers.isEmpty()) {\n                    return createErrorType(errT);\n                } else {\n                    // try again with lower bounds included instead of capture variables\n                    List<Type> newBounds = bounds.diff(cvars).appendList(lowers);\n                    return glb(newBounds);\n                }\n            }\n        }\n        return makeIntersectionType(bounds);\n    }", "    public void addItem(Totals item) {\n        this.items.add(item);\n    }\n", "static int lastArgMatchesVarg ( Parameter [ ] params , ClassNode ... args ) { if ( ! isVargs ( params ) ) return - NUM_ ; ClassNode lastParamType = params [ params . length - NUM_ ] . getType ( ) ; ClassNode ptype = lastParamType . getComponentType ( ) ; ", "protected void checkAcceptPermission(AccessControlContext acc){\n  SecurityManager sm=System.getSecurityManager();\n  if (sm == null) {\n    return;\n  }\n  ConnectionHandler h=threadConnectionHandler.get();\n  if (h == null) {\n    throw new Error(\"checkAcceptPermission not in ConnectionHandler thread\");\n  }\n  h.checkAcceptPermission(sm,acc);\n}\n", "private boolean inQuotes ( boolean inQuotes ) { return ( inQuotes && ! ignoreQuotations ) || inField ; }", "protected void addControl(Control control){\n  childControls.add(control);\n}\n", "void addedView ( Project project , View view ) ;", "public void afterTransactionSynchronization ( TransactionData transactionData ) { }", "    public void setFile(String file) {\n\n        if (file != null) {\n            m_file = file;\n        }\n    }\n", "\tpublic void updateTimestamp(int arg0, Timestamp arg1) throws SQLException {\n\t\tthrow new SQLException(\"The ResultSet does not support this method\");\n\t}\n", "private void calculateGTClusterConnections(){\n        for (int c0 = 0; c0 < gt0Clusters.size(); c0++) {\n            for (int c1 = 0; c1 < gt0Clusters.size(); c1++) {\n                    gt0Clusters.get(c0).calculateClusterConnection(c1, true);\n            }\n        }\n\n        boolean changedConnection = true;\n        while(changedConnection){\n            if(debug){\n                System.out.println(\"Cluster Connection\");\n                for (int c = 0; c < gt0Clusters.size(); c++) {\n                    System.out.print(\"C\"+gt0Clusters.get(c).label+\" --> \");\n                    for (int c1 = 0; c1 < gt0Clusters.get(c).connections.size(); c1++) {\n                        System.out.print(\" C\"+gt0Clusters.get(c1).label+\": \"+gt0Clusters.get(c).connections.get(c1));\n                    }\n                    System.out.println(\"\");\n                }\n                System.out.println(\"\");\n            }\n\n            double max = 0;\n            int maxIndexI = -1;\n            int maxIndexJ = -1;\n\n            changedConnection = false;\n            for (int c0 = 0; c0 < gt0Clusters.size(); c0++) {\n                for (int c1 = c0+1; c1 < gt0Clusters.size(); c1++) {\n                    if(c0==c1) continue;\n                        double min =Math.min(gt0Clusters.get(c0).connections.get(c1), gt0Clusters.get(c1).connections.get(c0));\n                        if(min > max){\n                            max = min;\n                            maxIndexI = c0;\n                            maxIndexJ = c1;\n                        }\n                }\n            }\n            if(maxIndexI!=-1 && max > tauConnection){\n                gt0Clusters.get(maxIndexI).mergeCluster(maxIndexJ);\n                if(debug)\n                    System.out.println(\"Merging \"+maxIndexI+\" and \"+maxIndexJ+\" because of connection \"+max);\n\n                changedConnection = true;\n            }\n        }\n        numGT0Classes = gt0Clusters.size();\n    }", "\tpublic boolean addBestiole(Bestiole b){\n\t    addBestioleInternal(b);\n\t\t\n\t\t// Wake up the new bestiole if connected to the serveur\n\t    if (serverListener.isConnected()){\n\t    \tconnectBestiole(b);\n\t    }\n\t\t\n\t\treturn true;\n\t}\n", "public ArrayList<MechSummary> generate(int numRolls,String ratName){\n  return generate(numRolls,ratName,null);\n}\n", "public void writeExternal(ObjectOutput out) throws IOException {\n  RemoteRef localRef=ref;\n  out.writeObject(id);\n  if (localRef == null) {\n    out.writeUTF(\"\");\n  }\n else {\n    out.writeUTF(localRef.getRefClass(out));\n    localRef.writeExternal(out);\n  }\n}\n", "static short readCodePage(ByteBuffer buffer,int offset,JetFormat format){\n  int cpOffset=format.OFFSET_COLUMN_CODE_PAGE;\n  return ((cpOffset >= 0) ? buffer.getShort(offset + cpOffset) : 0);\n}\n", "public BoxRequestsBookmark.DeleteTrashedBookmark getDeleteTrashedBookmarkRequest(String id) {\n        BoxRequestsBookmark.DeleteTrashedBookmark request = new BoxRequestsBookmark.DeleteTrashedBookmark(id, getTrashedBookmarkUrl(id), mSession);\n        return request;\n    }", "public static boolean validFill(Shape shape) {\r\n    \tif (shape.getTriangles() == null) {\r\n    \t\treturn false;\r\n    \t}\r\n        return shape.getTriangles().getTriangleCount() != 0;\r\n    }", "public boolean wasCanceled ( ) { return m_wasCanceled ; }", "private UrlResolver createUrlResolver(String protocol){\n  return new DefaultUrlResolver();\n}\n", "public ArrayList<Long> serviceName_pca_pcaServiceName_billing_GET(String serviceName, String pcaServiceName, Boolean billed, Date date_from, Date date_to) throws IOException {\n\t\tString qPath = \"/cloud/{serviceName}/pca/{pcaServiceName}/billing\";\n\t\tStringBuilder sb = path(qPath, serviceName, pcaServiceName);\n\t\tquery(sb, \"billed\", billed);\n\t\tquery(sb, \"date.from\", date_from);\n\t\tquery(sb, \"date.to\", date_to);\n\t\tString resp = exec(qPath, \"GET\", sb.toString(), null);\n\t\treturn convertTo(resp, t3);\n\t}", "public static Thread start ( Thread self , String name , Closure closure ) { return createThread ( name , BOOL_ , closure ) ; }", "\tpublic boolean booleanValue(String name, boolean def) {\n\t\treturn get(Boolean.class, name, def);\n\t}\n", "public Number doParse(String text, ParsePosition parsePosition, double baseValue,\n                        double upperBound, boolean lenientParse) {\n        // we don't have to do anything special to do the parsing here,\n        // but we have to turn lenient parsing off-- if we leave it on,\n        // it SERIOUSLY messes up the algorithm\n\n        // if withZeros is true, we need to count the zeros\n        // and use that to adjust the parse result\n        int zeroCount = 0;\n        if (withZeros) {\n            String workText = text;\n            ParsePosition workPos = new ParsePosition(1);\n            //int digit;\n\n            while (workText.length() > 0 && workPos.getIndex() != 0) {\n                workPos.setIndex(0);\n                /*digit = */ruleSet.parse(workText, workPos, 1).intValue(); // parse zero or nothing at all\n                if (workPos.getIndex() == 0) {\n                    // we failed, either there were no more zeros, or the number was formatted with digits\n                    // either way, we're done\n                    break;\n                }\n\n                ++zeroCount;\n                parsePosition.setIndex(parsePosition.getIndex() + workPos.getIndex());\n                workText = workText.substring(workPos.getIndex());\n                while (workText.length() > 0 && workText.charAt(0) == ' ') {\n                    workText = workText.substring(1);\n                    parsePosition.setIndex(parsePosition.getIndex() + 1);\n                }\n            }\n\n            text = text.substring(parsePosition.getIndex()); // arrgh!\n            parsePosition.setIndex(0);\n        }\n\n        // we've parsed off the zeros, now let's parse the rest from our current position\n        Number result =  super.doParse(text, parsePosition, withZeros ? 1 : baseValue, upperBound, false);\n\n        if (withZeros) {\n            // any base value will do in this case.  is there a way to\n            // force this to not bother trying all the base values?\n            \n            // compute the 'effective' base and prescale the value down\n            long n = result.longValue();\n            long d = 1;\n            while (d <= n) {\n                d *= 10;\n            }\n            // now add the zeros\n            while (zeroCount > 0) {\n                d *= 10;\n                --zeroCount;\n            }\n            // d is now our true denominator\n            result = new Double(n/(double)d);\n        }\n\n        return result;\n    }", "protected String assertPropertyDefault ( String key , String value ) { if ( properties . getString ( key ) == null ) { if ( logger . isDebugEnabled ( ) ) logger . debug ( STR_ + key + STR_ + value ) ; properties . setString ( key , value ) ; } return properties . getString ( key ) ; }", "public String toString ( ) { Annotation [ ] [ ] aa = getAnnotations ( ) ; StringBuilder sbuf = new StringBuilder ( ) ; int k = NUM_ ; while ( k < aa . length ) { Annotation [ ] a = aa [ k ++ ] ; int i = NUM_ ; while ( i < a . length ) { sbuf . append ( a ", "\tpublic void setNormal(Vector3f normal) {\n\t\t// Use normal reference if possible.\n\t\tif(this.normalRef != null) {\n\t\t\tthis.normalRef.addLocal(normal);\n\t\t\treturn;\n\t\t}\n\t\tif(this.normal == null) this.normal = new Vector3f(normal);\n\t\t// If this vertex has been used, add the new value.\n\t\telse this.normal.addLocal(normal);\n\t}\n", "protected abstract void handleInProgressEvent ( int actionCode , MotionEvent event ) ;", "public void setPermissions(Permissions permissions) {\n        if (this.permissions == permissions) {\n            return;\n        }\n\n        this.removeChildObject(\"permissions\");\n        this.permissions = permissions;\n        this.addChildObject(\"permissions\", permissions);\n    }", "public long cmajflt(){\n  return Long.parseLong(fields[12]);\n}\n", "public static boolean containsProperty(String value,String property){\n  return null != value && (value.contains(DELIM_START_AMPERSAND + property + DELIM_STOP) || value.contains(DELIM_START_DOLLAR + property + DELIM_STOP));\n}", "public static CalibrationDetectorCircleHexagonalGrid circleHexagonalGrid( @Nullable ConfigCircleHexagonalGrid config ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ConfigGridDimen configGrid ) {\n\t\tif( config == null )\n\t\t\tconfig = new ConfigCircleHexagonalGrid();\n\t\tconfig.checkVal", "public int compareKeys(int iAreaDesc)\n    {\n        int iCompareValue = 0;\n        boolean bForceUniqueKey = false;    // This method is only used by the physical table which do their own unique processing.\n        int iKeyFieldCount = this.getKeyFields(bForceUniqueKey, false);\n        for (int iKeyFieldSeq = DBConstants.MAIN_KEY_FIELD; iKeyFieldSeq < iKeyFieldCount; iKeyFieldSeq++)\n        {\n            KeyField keyField = this.getKeyField(iKeyFieldSeq, bForceUniqueKey);\n            BaseField fldCurrent = keyField.getField(DBConstants.FILE_KEY_AREA);\n            BaseField fldTemp = keyField.getField(iAreaDesc);\n            iCompareValue = fldCurrent.compareTo(fldTemp);\n            if (this.getKeyOrder(iKeyFieldSeq) == DBConstants.DESCENDING)\n                iCompareValue = -iCompareValue;\n            if (iCompareValue != 0)\n                break;\n        }\n        return iCompareValue;\n    }", "\tpublic int haveALock() {\n\t\tString status = getField(NMEASentence.STATUS);\n\t\tif (status==null) return NO_INFO_RE_A_LOCK;\n\t\tif ( StringUtil.equalsIgnoreCase(status,\"V\") ) {\n\t\t\treturn DONT_HAVE_A_LOCK;\n\t\t}\n\t\telse if ( StringUtil.equalsIgnoreCase(status,\"A\") ) {\n\t\t\treturn HAVE_A_LOCK;\n\t\t}\n\t\treturn NO_INFO_RE_A_LOCK;\n\t}\n", "private void stopApplication(File currentFile) {\n        if (_tc.isEventEnabled()) {\n            Tr.event(_tc, \"Stopping dropin application '\" + currentFile.getName() + \"'\");\n        }\n        String filePath = getAppLocation(currentFile);\n\n        try {\n            Configuration config = _configs.remove(filePath);\n            if (config != null) {\n                config.delete();\n            }\n        } catch (Exception e) {\n            getAppMessageHelper(null, filePath).error(\"MONITOR_APP_STOP_FAIL\", currentFile.getName());\n        }\n    }", "    public void setMacroText(String macroTxt) {\n        //Run text on variable scanner before setting\n        this.body = macroTxt;\n        varScanner.setScanText(this.body);\n        varScanner.scanAndUpdate();\n    }\n", "protected Map<Integer,List<Solution>> createGridMap(){\n  AdaptiveGridArchive archive=getArchive();\n  Map<Integer,List<Solution>> result=new HashMap<Integer,List<Solution>>();\n  for (  Solution solution : archive) {\n    int index=archive.findIndex(solution);\n    List<Solution> solutions=result.get(index);\n    if (solutions == null) {\n      solutions=new ArrayList<Solution>();\n      result.put(index,solutions);\n    }\n    solutions.add(solution);\n  }\n  return result;\n}\n", "protected final void acceptAnnotations ( final MethodVisitor mv ) { int n = visibleTypeAnnotations == null ? NUM_ : visibleTypeAnnotations . size ( ) ; for ( int i = NUM_ ; i < n ; ++ i ) { TypeAnnotationNode an = visibleTypeAnnotations . get ( i ) ; an . accept ( mv . visitInsnAnnotation ( an . typeRef , an . typePath , an . desc , BOOL_ ) ) ; } n = invisibleTypeAnnotations == null ? NUM_ : invisibleTypeAnnotations . size ( ) ; for ( int i = NUM_ ; i < n ; ++ i ) { TypeAnnotationNode an = invisibleTypeAnnotations . get ( i ) ; an . accept ( mv . visitInsnAnnotation ( an . typeRef , an . typePath , an . desc , BOOL_ ) ) ; } }", "public static ColGroup copyColGroup(ColGroup group){\n  ColGroup ret=null;\n  int[] colIndices=Arrays.copyOf(group.getColIndices(),group.getNumCols());\n  if (group instanceof ColGroupUncompressed) {\n    ColGroupUncompressed in=(ColGroupUncompressed)group;\n    ret=new ColGroupUncompressed(colIndices,in.getNumRows(),in.getData());\n  }\n else   if (group instanceof ColGroupRLE) {\n    ColGroupRLE in=(ColGroupRLE)group;\n    ret=new ColGroupRLE(colIndices,in.getNumRows(),in.hasZeros(),in.getValues(),in.getBitmaps(),in.getBitmapOffsets());\n  }\n else   if (group instanceof ColGroupOLE) {\n    ColGroupOLE in=(ColGroupOLE)group;\n    ret=new ColGroupOLE(colIndices,in.getNumRows(),in.hasZeros(),in.getValues(),in.getBitmaps(),in.getBitmapOffsets());\n  }\n  return ret;\n}\n", "public synchronized byte[] toByteArray(){\n  int remaining=this.count;\n  if (remaining == 0) {\n    return ByteArrayOutputStream.EMPTY_BYTE_ARRAY;\n  }\n  byte newbuf[]=new byte[remaining];\n  int pos=0;\n  for (  byte[] buf : this.buffers) {\n    int c=Math.min(buf.length,remaining);\n    System.arraycopy(buf,0,newbuf,pos,c);\n    pos+=c;\n    remaining-=c;\n    if (remaining == 0) {\n      break;\n    }\n  }\n  return newbuf;\n}\n", "public ChannelEntry newConnection ( ReadSelectorThread readHandler , SelectionKey key ) { SocketChannel channel = ( SocketChannel ) key . channel ( ) ; WriteSelectorThread writeHandler = _selectorManager . getWriteHandler ( key . channel ( ) ) ; Socket so", "public T scaleY ( float ... vals ) { transitFloat ( SCALE_Y , vals ) ; return self ( ) ; }", "public FeatureFlag forName(String name) throws BadApiRequestException {\n  FeatureFlag flag=NAMES_TO_VALUES.get(name.toUpperCase(Locale.ENGLISH));\n  return flag != null ? flag : Utils.<FeatureFlag>insteadThrowRuntime(new BadApiRequestException(\"Invalid feature flag: \" + name));\n}\n", "public boolean contains(Format format) {\n        for (Format f : list) {\n            if (f.matches(format)) return true;\n        }\n        return false;\n    }", "public static int makeWord ( int hibyte , int lowbyte ) { int hi = NUM_ & hibyte ; int low = NUM_ & lowbyte ; return ( ( hi << NUM_ ) | low ) ; }", "public AbstractLongList times(int times) {\r\n\tAbstractLongList newList = new LongArrayList(times*size());\r\n\tfor (int i=times; --i >= 0; ) {\r\n\t\tnewList.addAllOfFromTo(this,0,size()-1);\r\n\t}\r\n\treturn newList;\r\n}", "public static boolean isValidNmtoken(String nmtoken){\n  if (nmtoken.length() == 0)   return false;\n  for (int i=0; i < nmtoken.length(); i++) {\n    char ch=nmtoken.charAt(i);\n    if (!isName(ch)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    public void startScan() {\n        if(!UIManager.getInstance().startScan()) return;\n\n        sf = new ScanFrame();\n\n        // Hide the scan wizard and show the progress frame\n        setWizardVisible(false);\n        setScanVisible(true);          \n    }\n", "public OvhRule delegatedAccount_email_filter_name_rule_id_GET(String email, String name, Long id) throws IOException {\n\t\tString qPath = \"/email/domain/delegatedAccount/{email}/filter/{name}/rule/{id}\";\n\t\tStringBuilder sb = path(qPath, email, name, id);\n\t\tString resp = exec(qPath, \"GET\", sb.toString(), null);\n\t\treturn convertTo(resp, OvhRule.class);\n\t}", "public static <V extends NumberVector> V getPrototypeOrCentroid(Model model, Relation<? extends V> relation, DBIDs ids, NumberVector.Factory<V> factory) {\n    assert (ids.size() > 0);\n    V v = getPrototype(model, relation, factory);\n    return v != null ? v : factory.newNumberVector(Centroid.make(relation, ids));\n  }", "private void connectionLostAction ( Bundle data ) { if ( callback != null ) { Exception reason = ( Exception ) data . getSerializable ( MqttServiceConstants . CALLBACK_EXCEPTION ) ; callback . connectionLost ( reason ) ; } }", "public FileFilterUtils ( ) { }", "public static String generateExceptionString(Throwable t, String delim) {\n\n        StringBuffer sb = new StringBuffer();\n\n        if (t != null) {\n\n            sb.append(t.toString());\n\n            Throwable nextThrowable = getNextThrowable(t);\n\n            if (nextThrowable != null) {\n                sb.append(delim);\n                sb.append(generateExceptionString(getNextThrowable(t), delim));\n            }\n        }\n\n        return sb.toString();\n    }", "public boolean matches ( EventDescriptor template ) { if ( template == null ) throw new NullPointerException ( STR_ ) ; boolean matches = BOOL_ ; if ( template . eventID == null ) { if ( template . eventClass == null ) matches = BOOL_ ; else if ( this . e", "    public void postDeregister() {\n        super.postDeregister();\n    }\n", "public static void renderDiagnostics(final Diagnosable component, final WebXmlRenderContext renderContext) {\n\t\tList<Diagnostic> diags = component.getDiagnostics(Diagnostic.ERROR);\n\t\tif (diags != null) {\n\t\t\trenderHelper(renderContext, component, diags, Diagnostic.ERROR);\n\t\t}\n\t\tdiags = component.getDiagnostics(Diagnostic.WARNING);\n\t\tif (diags != null) {\n\t\t\trenderHelper(renderContext, component, diags, Diagnostic.WARNING);\n\t\t}\n\t\tdiags = component.getDiagnostics(Diagnostic.INFO);\n\t\tif (diags != null) {\n\t\t\trenderHelper(renderContext, component, diags, Diagnostic.INFO);\n\t\t}\n\t\tdiags = component.getDiagnostics(Diagnostic.SUCCESS);\n\t\tif (diags != null) {\n\t\t\trenderHelper(renderContext, component, diags, Diagnostic.SUCCESS);\n\t\t}\n\t}", "public HashedBlockInputStream ( InputStream inputStream , boolean littleEndian ) { this . inputStream = inputStream ; this . littleEndian = littleEndian ; }", "\tprotected JMenu createJUnitMenu() {\n\t\tJMenu menu= new JMenu(\"JUnit\");\n\t\tmenu.setMnemonic('J');\n\t\tJMenuItem mi1= new JMenuItem(\"About...\");\n\t\tmi1.addActionListener(\n\t\t    new ActionListener() {\n\t\t        public void actionPerformed(ActionEvent event) {\n\t\t            about();\n\t\t        }\n\t\t    }\n\t\t);\n\t\tmi1.setMnemonic('A');\n\t\tmenu.add(mi1);\n\t\t\n\t\tmenu.addSeparator();\n\t\tJMenuItem mi2= new JMenuItem(\" Exit \");\n\t\tmi2.addActionListener(\n\t\t    new ActionListener() {\n\t\t        public void actionPerformed(ActionEvent event) {\n\t\t            terminate();\n\t\t        }\n\t\t    }\n\t\t);\n\t\tmi2.setMnemonic('x');\n\t\tmenu.add(mi2);\n\n\t\treturn menu;\n\t}\n", "public synchronized void add(double value){\n  add(mCategories.size() + \"\",value);\n}\n", "protected static void appendDateType(StringBuilder sb){\n  sb.append(\"TIMESTAMP\");\n}\n", "public static <A extends Annotation>A createAnnotation(Class<? extends Annotation> annotationType,AnnotationMember[] elements){\n  AnnotationFactory factory=new AnnotationFactory(annotationType,elements);\n  return (A)Proxy.newProxyInstance(annotationType.getClassLoader(),new Class[]{annotationType},factory);\n}\n", "public void initialise ( int base , double epsilons [ ] ) { this . epsilons = epsilons ; usingSingleKernelWidthValue = BOOL_ ; mvke . initialise ( epsilons ) ; initialiseCommon ( base ) ; }", "protected ActiveInfoStorageCalculatorViaMutualInfo ( Class < MutualInfoCalculatorMultiVariate > miCalcClass ) throws InstantiationException , IllegalAccessException { MutualInfoCalculatorMultiVariate miCalc = miCalcClass . newInstance ( ) ; construct ( mi", "@BetaApi\n  public final ListInterconnectLocationsPagedResponse listInterconnectLocations(String project) {\n    ListInterconnectLocationsHttpRequest request =\n        ListInterconnectLocationsHttpRequest.newBuilder().setProject(project).build();\n    return listInterconnectLocations(request);\n  }", "private String extractExecTailCmd(String params) {\n        String ret;\n        String[] tmp = params.split(\"(?<!\\\\\\\\)\" + separator);\n        String labelString = null;\n        for (String aTmp : tmp) {\n            if (aTmp.startsWith(\"label=\")) {\n                labelString = aTmp;\n            }\n        }\n\n        if (labelString != null) {\n            if (params.startsWith(labelString)) {\n                ret = params.substring(labelString.length() + separator.length());\n            } else {\n                ret = params.substring(0, params.indexOf(labelString) - separator.length());\n            }\n        } else {\n            ret = params;\n        }\n\n        return ret;\n    }", "public static double arithmeticMean(DoubleTuple t)\r\n    {\r\n        double sum = DoubleTupleFunctions.reduce(t, 0.0, (a,b) -> (a+b));\r\n        return sum / t.getSize();\r\n    }", "    public void setState(String value) throws RuntimeException {\n        StringSTAttribute att = null;\n        if (_att_state == null) {\n            _att_state = (StringSTAttribute) attributeFactory.getAttribute(\"state\", \"product\");\n            if (_att_s", "public static String encodeObject(java.io.Serializable serializableObject,\n                                      int options) throws java.io.IOException {\n\n        if (serializableObject == null) {\n            throw new NullPointerException(\"Cannot serial", "public static byte[] convertToDER(String pemCert){\n  String base64=pemCert.replace(CERT_BEGIN,\"\");\n  base64=base64.replace(CERT_END,\"\");\n  base64=base64.replaceAll(\"\\\\s\",\"\");\n  return Base64.decodeBase64(base64);\n}\n", "private void processDeleteResponse(ClientResponse response) {\n        //Continue snapshotting even if a delete fails.\n        setState(State.WAITING);\n        if (response.getStatus() != ClientResponse.SUCCESS){\n            logFailureResponse(\"Delete of snapshots failed\", response);\n            return;\n        }\n\n        final VoltTable results[] = response.getResults();\n        final String err = SnapshotUtil.didSnapshotRequestFailWithErr(results);\n        if (err != null) {\n            SNAP_LOG.warn(\"Snapshot delete failed with failure response: \" + err);\n            return;\n        }\n    }", "Dispatcher subscribeImpl(String subject, String queueName) {\n        if (!this.running.get()) {\n            throw new IllegalStateException(\"Dispatcher is closed\");\n        }\n        \n        if (this.isDraining()) {\n            throw new IllegalStateException(\"Dispatcher is draining\");\n        }\n\n        NatsSubscription sub = subscriptions.get(subject);\n\n        if (sub == null) {\n            sub = connection.createSubscription(subject, queueName, this);\n            NatsSubscription actual = subscriptions.putIfAbsent(subject, sub);\n            if (actual != null) {\n                this.connection.unsubscribe(sub, -1); // Could happen on very bad timing\n            }\n        }\n\n        return this;\n    }", "@Override\n\tpublic boolean setChildAt(int index, N newChild) throws IndexOutOfBoundsException {\n\t\tfinal N oldChild = (index < this.children.length) ? this.children[index] : null;\n\t\tif (oldChild == newChild) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (oldChild != null) {\n\t\t\toldChild.setParentNodeReference(null, true);\n\t\t\t--this.notNullChildCount;\n\t\t\tfirePropertyChildRemoved(index, oldChild);\n\t\t}\n\n\t\tif (newChild != null) {\n\t\t\tfinal N oldParent = newChild.getParentNode();\n\t\t\tif (oldParent != this) {\n\t\t\t\tnewChild.removeFromParent();\n\t\t\t}\n\t\t}\n\n\t\t// set the element\n\t\tthis.children[index] = newChild;\n\n\t\tif (newChild != null) {\n\t\t\tnewChild.setParentNodeReference(toN(), true);\n\t\t\t++this.notNullChildCount;\n\t\t\tfirePropertyChildAdded(index, newChild);\n\t\t}\n\n\t\treturn true;\n\t}", "public static final void clearCache(){\n  serverCache.clear();\n  ipForwardCache.clear();\n}\n", "public void beforeMovingToBackup ( ) throws SpaceComponentsInitializeException { switch ( _spaceMode ) { case NONE : initBackupComponents ( ) ; break ; case PRIMARY : break ; } }", "public void setModificationStates(java.util.Collection<ModificationState> modificationStates) {\n        if (modificationStates == null) {\n            this.modificationStates = null;\n            return;\n        }\n\n        this.modificationStates = new com.amazonaws.internal.SdkInternalList<ModificationState>(modificationStates);\n    }", "    public void setPhase4Skip(boolean doSkip) {\n        set(\"phase4_skip\", doSkip);\n    }\n", "public PrincipalEntry(String principalClass,String principalName){\n  if (principalClass == null || principalName == null)   throw new NullPointerException(ResourcesMgr.getString(\"null.principalClass.or.principalName\"));\n  this.principalClass=principalClass;\n  this.principalName=principalName;\n}\n", "private String encodeBytes(byte[] cipherText) {\n        StringBuffer cipherStringBuffer = new StringBuffer();\n        for (int i = 0; i < cipherText.length; i++) {\n            byte b = cipherText[i];\n            cipherStringBuffer.append(Byte.toString(b) ", "public void connect(int index) {\n        try {\n            if (index == 0) {\n                players[index].connect(true);\n            } else {\n                players[index].connect(false);\n            }\n        } catch (Exception ex) {\n            players[index].handleError(ex.getMessage());\n        }\n        pause(500);\n    }", "public static URL getResource(String name) {\n        if (false)\n            return unchecked(() -> new URL(\"file:///your/path/here/src/main/wallettemplate/\" + name));\n        else\n            return MainController.class.getResource(name);\n    }", "public int getPollingPeriod(final String polledObject) throws DevFailed {\n        try {\n            return AttributeGetterSetter.getAttribute(polledObject, device.getAttributeList()).getPollingPeriod();\n        } catch (final DevFailed e) {\n            return device.getCommand(polledObject).getPollingPeriod();\n        }\n    }", "public ClassOrInterfaceDeclaration addInterface ( String name ) { return addInterface ( name , Modifier . PUBLIC ) ; }", "public boolean isResourceClose ( BasicBlock basicBlock , InstructionHandle handle , ConstantPoolGen cpg , Resource resource , ResourceValueFrame frame ) throws DataflowAnalysisException ;", "    public void setDescription(final String descriptionFormat, final Object...args) {\n        mDialogShell.getDisplay().syncExec(new Runnable() {\n            public void run() {\n                if (!mLabel.isDisposed()) {\n                    mLabel.setText(String.format(descriptionFormat, args));\n                }\n            }\n        });\n    }\n", "@BetaApi\n  public final Address getAddress(ProjectRegionAddressName address) {\n\n    GetAddressHttpRequest request =\n        GetAddressHttpRequest.newBuilder()\n            .setAddress(address == null ? null : address.toString())\n            .build();\n    return getAddress(request);\n  }", "public void write(TBase t) throws IOException {\n  try {\n    t.write(binaryOut);\n    dataOutputStream.flush();\n  }\n catch (  TException e) {\n    throw new IOException(e);\n  }\n}\n", "public static List<MessagingContext> forExportedVariables(\n\t\t\tString domain,\n\t\t\tString applicationName,\n\t\t\tInstance instance,\n\t\t\tMap<String,String> externalExports,\n\t\t\tThoseThat thoseThat ) {\n\n\t\tList<MessagingContext> result = new ArrayList<> ();\n\n\t\t// For inter-app messages, the real question is about whether we need\n\t\t// to create a context for the application template.\n\t\tSet<String> externalExportPrefixes = new HashSet<> ();\n\t\tfor( String varName : externalExports.keySet()) {\n\t\t\tString prefix = VariableHelpers.parseVariableName( varName ).getKey();\n\t\t\texternalExportPrefixes.add( prefix );\n\t\t}\n\n\t\t// Internal variables\n\t\tboolean publishExternal = false;\n\t\tfor( String facetOrComponentName : VariableHelpers.findPrefixesForExportedVariables( instance )) {\n\t\t\tMessagingContext ctx = new MessagingContext( RecipientKind.AGENTS, domain, facetOrComponentName, thoseThat, applicationName );\n\t\t\tresult.add( ctx );\n\n\t\t\tif( externalExportPrefixes.contains( facetOrComponentName ))\n\t\t\t\tpublishExternal = true;\n\t\t}\n\n\t\t// External variables - they all have the same prefix, the application template's name\n\t\tif( publishExternal ) {\n\t\t\tString varName = externalExports.values().iterator().next();\n\t\t\tString prefix = VariableHelpers.parseVariableName( varName ).getKey();\n\n\t\t\t// We indicate the application name, but it will most likely not be used\n\t\t\t// for inter-application messages.\n\t\t\tMessagingContext ctx = new MessagingContext( RecipientKind.INTER_APP, domain, prefix, thoseThat, applicationName );\n\t\t\tresult.add( ctx );\n\t\t}\n\n\t\treturn result;\n\t}", "public List < IComment > appendComment ( final String comment ) throws CouldntSaveDataException , com . google . security . zynamics . binnavi . API . disassembly . CouldntLoadDataException { final List < IComment > comments = new ArrayList < IComment > (", "public static WeekFragment newInstance ( int position , String selectorDateIndicatorValue , int currentDateIndicatorValue , int primaryTextColor ) { WeekFragment f = new WeekFragment ( ) ; Bundle b = new Bundle ( ) ; b . putInt ( RWeekCalendar . POSITIONKEY , position ) ; b . putString ( RWeekCalendar . DATE_SELECTOR_BACKGROUND , selectorDateIndicatorValue ) ; b . putInt ( RWeekCalendar . CURRENT_DATE_BACKGROUND , currentDateIndicatorValue ) ; b . putInt ( RWeekCalendar . PRIMARY_BACKGROUND , primaryTextColor ) ; f . setArguments ( b ) ; return f ; }", "private List < Color > project ( final List < Entry < Color , Integer > > colorList ) { final List < Color > colors = new ArrayList < Color > ( ) ; for ( final Entry < Color , Integer > entry : colorList ) { colors . add ( entry . getKey ( ) ) ; } return colors ; }", "    public boolean isPrioritized() {\n        return prioritized;\n    }\n", "@GET\n  @Path(ServiceConstants.GET_STATUS)\n  @JacksonFeatures(serializationEnable = {SerializationFeature.INDENT_OUTPUT})\n  public Response getStatus(@QueryParam(\"jobId\") final long jobId) {\n    return RestUtils.call(new RestUtils.RestCallable<JobInfo>() {\n      @Override\n      public JobInfo call() throws Exception {\n        return mJobMaster.getStatus(jobId);\n      }\n    }, ServerConfiguration.global());\n  }", "public double distance(double[] v1, double[] v2) {\n    final int dim1 = v1.length, dim2 = v2.length;\n    final int mindim = dim1 < dim2 ? dim1 : dim2;\n    double agg = preDistance(v1, v2, 0, mindim);\n    if(dim1 > mindim) {\n      agg += preNorm(v1, mindim, dim1);\n    }\n    else if(dim2 > mindim) {\n      agg += preNorm(v2, mindim, dim2);\n    }\n    return agg;\n  }", "public void checkQueueState(){\n  LOGGER.debug(\"checkQueueState - Check the state of the local queue depending on the tier we are in \");\n  int unfinishedJobs=statsUtil.getUnfinishedJobs();\n  LOGGER.debug(\"checkQueueState - maxUnfinishedJobs: \" + maxUnfinishedJobs + \",  unfinishedJobs: \"+ unfinishedJobs);\n  if (jobCount == 4) {\n    LOGGER.info(\"checkQueueState - First 4 jobs : maxUnfinishedJobs: \" + maxUnfinishedJobs + \",  unfinishedJobs: \"+ unfinishedJobs);\n    long now=System.currentTimeMillis();\n    if ((now - timeFirstMessageReceived) < 10 * 1000) {\n      final long expectedSynchTime=statsUtil.getCurrentMasterClockTime() + (25 * 1000);\n      final long waitMasterSyncTime=expectedSynchTime - now;\n      if (waitMasterSyncTime > 0) {\n        try {\n          LOGGER.debug(\"First 4 messages ... \");\n          Utilities.verboseLog(\"Master clock sync: wake up at \" + expectedSynchTime + \" i.e. in \"+ waitMasterSyncTime+ \" millis\");\n          Thread.sleep(waitMasterSyncTime);\n        }\n catch (        InterruptedException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n  if (statsUtil.isStopRemoteQueueJmsContainer()) {\n    LOGGER.debug(\"checkQueueState : isStopRemoteQueueJmsContainer = true\");\n    return;\n  }\n else {\n    boolean stopRemoteQueue=false;\n    if ((jobCount % (maxUnfinishedJobs / (Math.pow(2,statsUtil.getTier() - 1))) == 0)) {\n      statsUtil.updateStatsUtilJobCounts();\n      unfinishedJobs=statsUtil.getUnfinishedJobs();\n    }\nswitch (statsUtil.getTier()) {\ncase 1:\n      if (unfinishedJobs > maxUnfinishedJobs) {\n        stopRemoteQueue=true;\n      }\n    break;\ncase 2:\n  if (unfinishedJobs > maxUnfinishedJobs / 2) {\n    stopRemoteQueue=true;\n  }\nbreak;\ndefault :\nif (unfinishedJobs > maxUnfinishedJobs / (Math.pow(2,statsUtil.getTier()))) {\nstopRemoteQueue=true;\n}\n}\nif (stopRemoteQueue) {\nLOGGER.debug(\"checkQueueState - Disable remote listener \");\nstatsUtil.setStopRemoteQueueJmsContainer(true);\ntry {\nThread.sleep(15 * 1000);\n}\n catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n}\n}\n", "void clear ( ) ;", "void changedName ( Function function , String name ) ;", "public void putQueryParams ( String key , String value ) { this . mQueryParams . put ( key , value ) ; }", "@Override public boolean isEnabled(){\n  if ((attributeSelectionPanel != null) && !isValueOnly()) {\n    return attributeSelectionPanel.isEnabled();\n  }\n else {\n    if (this.checkBox != null) {\n      return checkBox.isEnabled();\n    }\n  }\n  return false;\n}\n", "public static String getExtension(String filename) {\n        if (filename == null) {\n            return null;\n        }\n        int index = indexOfExtension(filename);\n        if (index == -1) {\n            return StringUtils.EMPTY;\n        } else {\n            return filename.substring(index + 1);\n        }\n    }", "public XMLWriter(Writer writer){\n  _writer=writer;\n}\n", "public int remove ( int key ) ;", "PrimerPack(ByteProvider byteProvider,KLVPacket.Header header) throws IOException {\n  this.header=header;\n  this.localTagEntryBatch=new LocalTagEntryBatch(byteProvider);\n}\n", "public void paintCheckBoxMenuItemBorder ( SynthContext context , Graphics g , int x , int y , int w , int h ) { }", "\tpublic void release() {\n\t\tif (creator != null) {\n\t\t\tcreator.release(this);\n\t\t}\n\t}\n", "private void addBreakpoints ( final Set < BreakpointAddress > addresses , final BreakpointStatus status , final BreakpointStorage storage , final BreakpointType type ) { Preconditions . checkNotNull ( addresses , STR_ ) ; Preconditions . checkNotNull ( status , STR_ ) ; Preconditions . checkNotNull ( storage , STR_ ) ; Preconditions . checkNotNull ( type , STR_ ) ; if ( addresses . size ( ) == NUM_ ) { return ; } final List < Breakpoint > breakpoints = new ArrayList < > ( ) ; for ( final BreakpointAddress address : addresses ) { final Breakpoint breakpoint = new Breakpoint ( type , address ) ; storage . add ( breakpoint , status ) ; breakpoints . add ( breakpoint ) ; } for ( final BreakpointManagerListener listener : listeners ) { try { listener . breakpointsAdded ( breakpoints ) ; } catch ( final Exception e ) { CUtilityFunctions . logException ( e ) ; } } }", "public void addPreexistingResource ( Resource resource ) { resourceList . add ( resource ) ; }", "public Builder(String urn){\n  this.urn=urn;\n}", "@SuppressWarnings(\"UnusedDeclaration\") public static final int convertNameToID(final String name){\n  int id=-1;\n  if ((name.contains(\"Indexed\"))) {\n    id=Indexed;\n  }\n else   if ((name.contains(\"Separation\"))) {\n    id=Separation;\n  }\n else   if (name.contains(\"DeviceN\")) {\n    id=DeviceN;\n  }\n else   if (name.contains(\"DeviceCMYK\") || name.contains(\"CMYK\")) {\n    id=DeviceCMYK;\n  }\n else   if (name.contains(\"CalGray\")) {\n    id=CalGray;\n  }\n else   if (name.contains(\"CalRGB\")) {\n    id=CalRGB;\n  }\n else   if (name.contains(\"Lab\")) {\n    id=Lab;\n  }\n else   if (name.contains(\"ICCBased\")) {\n    id=ICC;\n  }\n else   if (name.contains(\"Pattern\")) {\n    id=Pattern;\n  }\n else   if (name.contains(\"DeviceRGB\") || name.contains(\"RGB\")) {\n    id=DeviceRGB;\n  }\n else   if (name.contains(\"DeviceGray\") || name.indexOf('G') != -1) {\n    id=DeviceGray;\n  }\n  return id;\n}\n", "final void checkChildScope(S parent) {\n    checkNotNull(parent);\n    checkArgument(NodeUtil.createsScope(rootNode), rootNode);\n    checkArgument(\n        rootNode != parent.getRootNode(),\n        \"rootNode should not be the parent's root node: %s\", rootNode);\n  }", "private static String buildMessage(String parameterName, String methodName) {\n\n        ResourceBundle rb = ResourceBundle.getBundle(\"org.apache.beehive.controls.system.jdbc.parser.strings\", Locale.getDefault() );\n        String pattern = rb.getString(\"jdbccontrol.invalid.param\");\n        return MessageFormat.format(pattern, parameterName, methodName);\n    }", "\tpublic void removeListener(PacketListener listener) {\n\t\tif (this.listeners.length == 1) {\n\t\t\tthis.listeners = new PacketListener[0];\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tint i;\n\t\tfor (i = 0; i<listeners.length; i++)\n\t\t\tif (listeners[i] == listener)\n\t\t\t\tbreak;\n\t\t\n\t\tPacketListener[] tmp = new PacketListener[listeners.length - 1];\n\t\tSystem.arraycopy(listeners, 0, tmp, 0, i);\n\t\tSystem.arraycopy(listeners, i + 1, tmp, i, listeners.length - i);\n\t\tlisteners = tmp;\n\t}\n", "public static void serialize(final File folder, final String content, final String fileName) throws IOException {\n        if (!folder.exists()) {\n            folder.mkdirs();\n        }\n\n        final File output = new File(folder, fileName);\n\n        try (\n                final FileWriter writer = new FileWriter(output);\n        ) {\n            writer.write(content);\n            writer.flush();\n        } catch (Exception e) {\n            throw new IOException(\"Failed to serialize the notification in folder \" + folder.getPath(), e);\n        }\n    }", "\t\tpublic void release(boolean afterException) {\n\t\t\tnodeContext.onConnectionRelease(this, afterException);\n\t\t}\n", "void shutdown()\n    {\n        synchronized (this)\n        {\n            ivPoolCapacity = -1;\n        }\n\n        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n            Tr.debug(tc, \"shutdown : \" + this);\n\n        EntityManager em = ivPool.poll();\n\n        while (em != null)\n        {\n            if (em.isOpen())\n            {\n                em.close();\n            }\n            em = ivPool.poll();\n        }\n\n        synchronized (this)\n        {\n            ivPoolSize = 0;\n        }\n    }", "public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException {\n\t\tcheckState(this.isCreditBased, \"Bug in input gate setup logic: exclusive buffers only exist with credit-based flow control.\");\n\t\tcheckState(this.networkBufferPool == null, \"Bug in input gate setup logic: global buffer pool has\" +\n\t\t\t\"already been set for this input gate.\");\n\n\t\tthis.networkBufferPool = checkNotNull(networkBufferPool);\n\t\tthis.networkBuffersPerChannel = networkBuffersPerChannel;\n\n\t\tsynchronized (requestLock) {\n\t\t\tfor (InputChannel inputChannel : inputChannels.values()) {\n\t\t\t\tif (inputChannel instanceof RemoteInputChannel) {\n\t\t\t\t\t((RemoteInputChannel) inputChannel).assignExclusiveSegments(\n\t\t\t\t\t\tnetworkBufferPool.requestMemorySegments(networkBuffersPerChannel));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "void deletedLocalFunctionNodeComment ( INaviView view , INaviFunctionNode node , IComment comment ) ;", "protected void rehash ( int newCapacity ) { int oldCapacity = _set . length ; int oldKeys [ ] = _set ; V oldVals [ ] = _values ; byte oldStates [ ] = _states ; _set = new int [ newCapacity ] ; _values = ( V [ ] ) new Object [ newCapacity ] ; _states = new", "private boolean skipResource(HttpServletRequest request, HttpServletResponse response) {\n        String path = request.getServletPath();\n        if (path.contains(\".\")) {\n            path = path.substring(0, path.lastIndexOf(\".\"));\n        }\n        boole", "public static <T extends ImageGray<T>>\n\tvoid rgbToHsv(Planar<T> rgb , Planar<T> hsv ) {\n\t\thsv.reshape(rgb.width,rgb.height,3);\n\n\t\tif( hsv.getBandType() == GrayF32.class ) {\n\t\t\tif(BoofConcurrency.USE_CONCURRENT ) {\n\t\t\t\tImplColorHsv_MT.rgbToHsv_F32((Planar<GrayF32>)rgb,(Planar<GrayF32>)hsv);\n\t\t\t} else {\n\t\t\t\tImplColorHsv.rgbToHsv_F32((Planar<GrayF32>)rgb,(Planar<GrayF32>)hsv);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Unsupported band type \"+hsv.getBandType().getSimpleName());\n\t\t}\n\t}", "        final private String getBCC() {\n            String returnVal = fieldMap.get(\"bcc\");\n            if ( null == returnVal ) {\n                LOG.debug(\"No BCC found for \" + _url);\n                returnVal = \"\";\n            }\n            return returnVal;\n        }\n", "static public String writeImports( ModelPackage mPackage, IClassHelper classHelper) {\n\t\treturn _writeImports( classHelper, mPackage.getReferencedClasses(), mPackage.getQualifiedName());\n\t}", "\tpublic void handleLostFocus() {\n\t\n\t\tSystem.out.println(\"Window lost focus.\");\n\t}\n", "public ListenerWrapper(final ITraceManagerListener listener){\n  this.listener=Preconditions.checkNotNull(listener,\"IE00773: Listener argument can not be null\");\n}", "public ArrayList<HtmlLink> grabHTMLLinks(final String html){\n  ArrayList<HtmlLink> result=new ArrayList<>();\n  Matcher matcherTag=patternTag.matcher(html);\n  while (matcherTag.find()) {\n    String href=matcherTag.group(1);\n    String linkText=matcherTag.group(2);\n    Matcher matcherLink=patternLink.matcher(href);\n    while (matcherLink.find()) {\n      String link=matcherLink.group(1);\n      HtmlLink obj=new HtmlLink();\n      obj.setLink(link);\n      obj.setLinkText(linkText);\n      result.add(obj);\n    }\n  }\n  return result;\n}\n", "public ChannelResult ( String response ) { if ( response . startsWith ( STR_ ) ) { success = BOOL_ ; message = response . substring ( NUM_ ) ; } else { message = response ; } }", "public static String numberToString(Number number) throws JSONException {\n  if (number == null) {\n    throw new JSONException(\"Null pointer\");\n  }\n  testValidity(number);\n  String string=number.toString();\n  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {\n    while (string.endsWith(\"0\")) {\n      string=string.substring(0,string.length() - 1);\n    }\n    if (string.endsWith(\".\")) {\n      string=string.substring(0,string.length() - 1);\n    }\n  }\n  return string;\n}\n", "private int timeoutWait(int currentTotalWaitTime,long poll,long maxTimeoutMillis,String timedOutMessage) throws TimeoutException {\n  long now=SystemClock.elapsedRealtime();\n  long end=now + poll;\n  while (now < end) {\n    try {\n      Thread.sleep(end - now);\n    }\n catch (    InterruptedException e) {\n    }\n    now=SystemClock.elapsedRealtime();\n  }\n  currentTotalWaitTime+=poll;\n  if (currentTotalWaitTime > maxTimeoutMillis) {\n    throw new TimeoutException(timedOutMessage);\n  }\n  return currentTotalWaitTime;\n}\n", "public static AzimuthZenithAngle calculateSolarPosition(final GregorianCalendar date, final double latitude,\n                                                            final double longitude, final double elevation, final double deltaT) {\n        return calculateSolarPosition(date, latitude, longitude, elevation, deltaT, Double.MIN_VALUE, Double.MIN_VALUE);\n    }", "public int resolveNamespaces(InputProblemReporter rep, StringVector ns)\n        throws XMLStreamException\n    {\n        int attrCount = mAttrCount;\n\n        /* Let's now set number of 'real' attributes, to allow figuring\n         * out number of attributes created via default value expansion\n         */\n        mNonDefCount = attrCount;\n\n        if (attrCount < 1) {\n            // Checked if doing access by FQN:\n            mAttrHashSize = mAttrSpillEnd = 0;\n            // And let's just bail out, too...\n            return mXmlIdAttrIndex;\n        }\n        for (int i = 0; i < attrCount; ++i) {\n            Attribute attr = mAttributes[i];\n            String prefix = attr.mPrefix;\n            // Attributes' ns URI is null after reset, so can skip setting \"no namespace\"\n            if (prefix != null) {\n                if (prefix == \"xml\") {\n                    attr.mNamespaceURI = XMLConstants.XML_NS_URI;\n                } else {\n                    String uri = ns.findLastFromMap(prefix);\n                    if (uri == null) {\n                        rep.throwParseError(ErrorConsts.ERR_NS_UNDECLARED_FOR_ATTR, \n                                            prefix, attr.mLocalName);\n                    }\n                    attr.mNamespaceURI = uri;\n                }\n            }\n        }\n\n        /* Ok, finally, let's create attribute map, to allow efficient\n         * access by prefix+localname combination. Could do it on-demand,\n         * but this way we can check for duplicates right away.\n         */\n        int[] map = mAttrMap;\n\n        /* What's minimum size to contain at most 80% full hash area,\n         * plus 1/8 spill area (12.5% spilled entries, two ints each)?\n         */\n        int hashCount = 4;\n        {\n            int min = attrCount + (attrCount >> 2); // == 80% fill rate\n            /* Need to get 2^N size that can contain all elements, with\n             * 80% fill rate\n             */\n            while (hashCount < min) {\n                hashCount += hashCount; // 2x\n            }\n            // And then add the spill area\n            mAttrHashSize = hashCount;\n            min = hashCount + (hashCount >> 4); // 12.5 x 2 ints\n            if (map == null || map.length < min) {\n                map = new int[min];\n            } else {\n                /* Need to clear old hash entries (if any). But note that\n                 * spilled entries we can leave alone -- they are just ints,\n                 * and get overwritten if and as needed\n                 */\n                Arrays.fill(map, 0, hashCount, 0);\n            }\n        }\n\n        {\n            int mask = hashCount-1;\n            int spillIndex = hashCount;\n\n            // Ok, array's fine, let's hash 'em in!\n            for (int i = 0; i < attrCount; ++i) {\n                Attribute attr = mAttributes[i];\n                String name = attr.mLocalName;\n                int hash = name.hashCode();\n                String uri = attr.mNamespaceURI;\n                if (uri != null) {\n                    hash ^= uri.hashCode();\n                }\n                int index = hash & mask;\n                // Hash slot available?\n                if (map[index] == 0) {\n                    map[index] = i+1; // since 0 is marker\n                } else {\n                    int currIndex = map[index]-1;\n                    /* nope, need to spill; let's extract most of that code to\n                     * a separate method for clarity (and maybe it'll be\n                     * easier to inline by JVM too)\n                     */\n                    map = spillAttr(uri, name, map, currIndex, spillIndex,\n                                    hash, hashCount);\n                    if (map == null) {\n                        throwDupAttr(rep, currIndex);\n                        // never returns here...\n                    } else { // let's use else to keep FindBugs happy\n                        map[++spillIndex] = i; // no need to specifically avoid 0\n                        ++spillIndex;\n                    }\n                }\n            }\n            mAttrSpillEnd = spillIndex;\n        }\n        mAttrMap = map;\n        return mXmlIdAttrIndex;\n    }", "public CFunctionSelectionTree ( final IDatabase database , final IActionProvider actionProvider ) { Preconditions . checkNotNull ( database , STR_ ) ; Preconditions . checkNotNull ( actionProvider , STR_ ) ; final DefaultTreeModel model = new DefaultTreeM", "public int insertFromScan(Scan s) {\n\t\tif (!super.insertIntoNextEmptySlot()) {\n\t\t\treturn 0;\n\t\t}\n\t\tfor (String fldName : sch.fields()) {\n\t\t\tConstant val = s.getVal(fldName);\n\t\t\tthis.setVal(fldName, val);\n\t\t}\n\t\tif (s.next())\n\t\t\treturn 1;\n\t\telse\n\t\t\treturn -1;\n\t}", "public double downsideDeviation(){\n  return Math.sqrt(downsideVariance());\n}\n", "public static boolean validSystemNameFormat(String systemName,char type){\n  Matcher matcher=getAllPattern().matcher(systemName);\n  if (!matcher.matches()) {\n    return false;\n  }\n  if (matcher.group(2).charAt(0) != type) {\n    log.error(\"type in \" + syste", "    private void setAllHeaders(HttpMethod method, HttpServletRequest request) {\n        Enumeration headers = request.getHeaderNames();\n        \n        while (headers.hasMoreElements()) {\n            String name = (String) headers.nextElement();\n        ", "    public void addBeforeSibling(NOMElement sibling) throws NOMException {\n\tif (getCorpus().isLoadingFromFile()) { super.addBeforeSibling(sibling); }\n\telse { throw new NOMException(\"Read-only corpus: cannot add elements\"); }\n    }\n", "public boolean isRetryable ( SQLException ex , Connection connection ) ;", "protected final void updateState(int shardStateIndex, SequenceNumber lastSequenceNumber) {\n\t\tsynchronized (checkpointLock) {\n\t\t\tsubscribedShardsState.get(shardStateIndex).setLastProcessedSequenceNum(lastSequenceNumber);\n\n\t\t\t// if a shard's state is updated to be SENTINEL_SHARD_ENDING_SEQUENCE_NUM by its consumer thread,\n\t\t\t// we've finished reading the shard and should determine it to be non-active\n\t\t\tif (lastSequenceNumber.equals(SentinelSequenceNumber.SENTINEL_SHARD_ENDING_SEQUENCE_NUM.get())) {\n\t\t\t\tLOG.info(\"Subtask {} has reached the end of subscribed shard: {}\",\n\t\t\t\t\tindexOfThisConsumerSubtask, subscribedShardsState.get(shardStateIndex).getStreamShardHandle());\n\n\t\t\t\t// check if we need to mark the source as idle;\n\t\t\t\t// note that on resharding, if registerNewSubscribedShardState was invoked for newly discovered shards\n\t\t\t\t// AFTER the old shards had reached the end, the subtask's status will be automatically toggled back to\n\t\t\t\t// be active immediately afterwards as soon as we collect records from the new shards\n\t\t\t\tif (this.numberOfActiveShards.decrementAndGet() == 0) {\n\t\t\t\t\tLOG.info(\"Subtask {} has reached the end of all currently subscribed shards; marking the subtask as temporarily idle ...\",\n\t\t\t\t\t\tindexOfThisConsumerSubtask);\n\n\t\t\t\t\tsourceContext.markAsTemporarilyIdle();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "public static Number rightShiftUnsigned ( Number self , Number operand ) { return NumberMath . rightShiftUnsigned ( self , operand ) ; }", "\tpublic void exchangeY(int atY1, int atY2) {\n\t\tfor (int i = sizeX - 1; i >= 0; i--) {\n\t\t\tdouble D = getItem(i, atY1);\n\t\t\tsetItem(i, atY1, getItem(i, atY2));\n\t\t\tsetItem(i, atY2, D);\n\t\t}\n\t}\n", "@Override\n    public INDArray create(long rows, long columns, int[] stride) {\n        return create(new long[] {rows, columns}, ArrayUtil.toLongArray(stride));\n    }", "public static < T > Set < T > asSynchronized ( Set < T > self ) { return Collections . synchronizedSet ( self ) ; }", "public ContainerInstance add(Container container, boolean replicateContainerRelationships) {\n        ContainerInstance containerInstance = getModel().addContainerInstance(this, container, replicateContainerRelationships);\n        this.containerInstances.add(containerInstance);\n\n        return containerInstance;\n    }", "public LocalVolTermStructure ( final Date referenceDate ) { this ( referenceDate , new Calendar ( ) , BusinessDayConvention . Following , new DayCounter ( ) ) ; }", "@Override\n    protected boolean prepare(final Context2D context, final Attributes attr, final double alpha)\n    {\n        context.save();\n\n        if (false == context.isSelection())\n        {\n            context.setGlobalAlpha(alpha);\n\n            if (attr.hasShadow())\n            {\n                doApplyShadow(context, attr);\n            }\n        }\n        getImageProxy().drawImage(context);\n\n        context.restore();\n\n        return false;\n    }", "private synchronized void resetAutoFallBackCounters(){\n  this.primaryHostFailTimeMillis=System.currentTimeMillis();\n  this.queriesIssuedSinceFailover=0;\n}\n", "public int writeULongLE ( int index , long ul ) { this . array . put ( index , ( byte ) ( ul & NUM_ ) ) ; this . array . put ( index + NUM_ , ( byte ) ( ( ul > > NUM_ ) & NUM_ ) ) ; this . array . put ( index + NUM_ , ( byte ) ( ( ul > > NUM_ ) & NUM_ ) )", "public DerivedFont ( String key , float sizeOffset , Boolean bold , Boolean italic ) { if ( key == null ) { throw new IllegalArgumentException ( STR_ ) ; } this . parentKey = key ; this . sizeOffset = sizeOffset ; this . bold = bold ; this . italic = italic ; }", "public static Map<String,Integer> parseStopIdFromGtfs(String filename){\n  Map<String,Integer> stopMap=new TreeMap<>();\n  BufferedReader br=IOUtils.getBufferedReader(filename);\n  try {\n    String line=br.readLine();\n    while ((line=br.readLine()) != null) {\n      String[] sa=line.split(\",\");\n      int stopId=Integer.parseInt(sa[5]);\n      String stopName=sa[6];\n      stopMap.put(stopName,stopId);\n    }\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n    throw new RuntimeException(\"Cannot read from \" + filename);\n  }\n finally {\n    try {\n      br.close();\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n      throw new RuntimeException(\"Cannot close \" + filename);\n    }\n  }\n  return stopMap;\n}\n", "private void validateApplication(ApplicationDefinition appDef) {\r\n        boolean bSawAgingFreq = false;\r\n        for (String optName : appDef.getOptionNames()) {\r\n            String optValue = appDef.getOption(optName);\r\n            switch (optName) {\r\n            case CommonDefs.OPT_STORAGE_SERVICE:\r\n                assert optValue.equals(this.getClass().getSimpleName());\r\n                break;\r\n                \r\n            case CommonDefs.OPT_AGING_CHECK_FREQ:\r\n                new TaskFrequency(optValue);\r\n                bSawAgingFreq = true;\r\n                break;\r\n                \r\n            case \"auto-merge\":\r\n                new TaskFrequency(optValue);\r\n                break;\r\n\r\n            default:\r\n                throw new IllegalArgumentException(\"Unknown option for OLAPService application: \" + optName);\r\n            }\r\n        }\r\n\r\n        for (TableDefinition tableDef : appDef.getTableDefinitions().values()) {\r\n            validateTable(tableDef);\r\n        }\r\n        \r\n        if (!bSawAgingFreq) {\r\n            appDef.setOption(CommonDefs.OPT_AGING_CHECK_FREQ, \"1 DAY\");\r\n        }\r\n    }", "public GPathResult children ( ) { return new NodeChildren ( this , this . namespaceTagHints ) ; }", "  public Solution get(int i){\n    if (i >= solutionsList_.size()) {\n      throw new IndexOutOfBoundsException(\"Index out of Bound \"+i);\n    }\n    return solutionsList_.get(i);\n  } // get\n", "public static void swap(long[] longArray1, long[] longArray2) {     \n        int minLength = Math.min(longArray1.length, longArray2.length);\n        \n        for(int i = 0; i < minLength; i++) {\n            XORSwap.swap(longArray1, longArray2, i);\n        }\n    }", "public abstract void modelCheck ( ) throws Exception ;", "public int addJSON(JSONObject j,Table table){\n  if (!mDb.belowMemThreshold()) {\n    Log.e(LOGTAG,\"There is not enough space left on the device to store events, so data was discarded\");\n    return DB_OUT_OF_MEMORY_ERROR;\n  }\n  final String tableName=table.getName();\n  Cursor c=null;\n  int count=DB_UPDATE_ERROR;\nsynchronized (mDb) {\n    try {\n      final SQLiteDatabase db=mDb.getWritableDatabase();\n      final ContentValues cv=new ContentValues();\n      cv.put(KEY_DATA,j.toString());\n      cv.put(KEY_CREATED_AT,System.currentTimeMillis());\n      db.insert(tableName,null,cv);\n      c=db.rawQuery(\"SELECT COUNT(*) FROM \" + tableName,null);\n      c.moveToFirst();\n      count=c.getInt(0);\n    }\n catch (    final SQLiteException e) {\n      Log.e(LOGTAG,\"Could not add data to table \" + tableName + \". Re-initializing database.\",e);\n      if (c != null) {\n        c.close();\n        c=null;\n      }\n      initDB();\n    }\ncatch (    final IllegalStateException e) {\n      Log.e(LOGTAG,\"Could not add data to table \" + tableName + \". Re-initializing database.\",e);\n      if (c != null) {\n        c.close();\n        c=null;\n      }\n      initDB();\n    }\n finally {\n      if (c != null) {\n        c.close();\n      }\n      mDb.close();\n    }\n  }\n  return count;\n}\n", "public void save(File file) throws IOException {\n  FileOutputStream fos=new FileOutputStream(file);\n  ObjectOutputStream out=new ObjectOutputStream(fos);\n  try {\n    out.writeObject(classLibraryBuilder);\n  }\n  finally {\n    out.close();\n    fos.close();\n  }\n}\n", "private int xToScreenCoords(int mapCoord){\n  return (int)(mapCoord * map.getScale() - map.getScrollX());\n}\n", "public boolean offerFirst(E e){\n  addFirst(e);\n  return true;\n}\n", "public Enumeration<Permission> elements(){\nsynchronized (this) {\n    return Collections.enumeration(perms);\n  }\n}\n", "public Object get(Object pKey) {\r\n\r\n    //System.out.println(\"get(\" + pKey + \"): \" + super.get(pKey));\r\n    Object value = super.get(pKey);\r\n\r\n    // ---\r\n    if ((value != null) && (value instanceof Date)) {  // Hmm.. This is true for subclasses too...\r\n\r\n      // Special threatment of Date\r\n      String format = getPropertyFormat(StringUtil.valueOf(pKey));\r\n\r\n      if (format != null) {\r\n        value = new SimpleDateFormat(format).format(value);\r\n      } else {\r\n        value = sDefaultFormat.format(value);\r\n      }\r\n      return value;\r\n    }\r\n\r\n    // ---\r\n    // Simply return value\r\n    return StringUtil.valueOf(value);\r\n  }", "public static <C> PortableClassAccess<C> get(Class<C> clazz) {\n\n        @SuppressWarnings(\"unchecked\")\n        PortableClassAccess<C> access = (PortableClassAccess<C>) CLASS_ACCESSES.get(clazz);\n        if (access != null) {\n            return access;\n        }\n        access = new PortableClassAccess<C>(clazz);\n        CLASS_ACCESSES.putIfAbsent(clazz, access);\n        return access;\n\t}", "@Override\n    public DescribeLoadBalancerAttributesResult describeLoadBalancerAttributes(DescribeLoadBalancerAttributesRequest request) {\n        request = beforeClientExecution(request);\n        return executeDescribeLoadBalancerAttributes(request);\n    }", "   public TENInterval findTENI(int offset) {\n      Iterator nodeset = node.entrySet().iterator();\n      int tmpos=offset;\n      TreeEditNode ten = null;\n      // We need to create and return a TEN if nodeset is empty \n      // otherwise after the while loop TEN is null\n      while (nodeset.hasNext()) {\n\t Map.Entry x = (Map.Entry)nodeset.next();\n\t ten = (TreeEditNode) x.getValue();\n\t if (ten.size_of_subtree < tmpos) tmpos-= ten.size_of_subtree;\n\t else break;\n      }\n      // what about when nodeset is initially empty\n      return ten.findTENI(offset);\n   }\n", "    public void setRef(String ref) {\n        \n        if (StringUtil.isEmpty(ref)) { // NOPMD by Herlin on 20/06/06 23:25\n            throw new IllegalArgumentException(\"ref cannot be null or an blank string\");\n        }\n\n        this.ref = ref;\n    }\n", "@NamespacePermission(fields=\"#businessObjectFormatKey.namespace\",permissions=NamespacePermissionEnum.WRITE) @Override public BusinessObjectFormat deleteBusinessObjectFormat(BusinessObjectFormatKey businessObjectFormatKey){\n  businessObjectFormatHelper.validateBusinessObjectFormatKey(businessObjectFormatKey);\n  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDaoHelper.getBusinessObjectFormatEntity(businessObjectFormatKey);\n  if (businessObjectDataDao.getBusinessObjectDataCount(businessObjectFormatKey) > 0L) {\n    throw new IllegalArgumentException(String.format(\"Can not delete a business object format that has business object data associated with it. Business object format: {%s}\",businessObjectFormatHelper.businessObjectFormatEntityAltKeyToString(businessObjectFormatEntity)));\n  }\n  businessObjectFormatDao.delete(businessObjectFormatEntity);\n  if (businessObjectFormatEntity.getLatestVersion()) {\n    Integer maxBusinessObjectFormatVersion=businessObjectFormatDao.getBusinessObjectFormatMaxVersion(businessObjectFormatKey);\n    if (maxBusinessObjectFormatVersion != null) {\n      BusinessObjectFormatEntity previousVersionBusinessObjectFormatEntity=businessObjectFormatDao.getBusinessObjectFormatByAltKey(new BusinessObjectFormatKey(businessObjectFormatKey.getNamespace(),businessObjectFormatKey.getBusinessObjectDefinitionName(),businessObjectFormatKey.getBusinessObjectFormatUsage(),businessObjectFormatKey.getBusinessObjectFormatFileType(),maxBusinessObjectFormatVersion));\n      previousVersionBusinessObjectFormatEntity.setLatestVersion(true);\n      businessObjectFormatDao.saveAndRefresh(previousVersionBusinessObjectFormatEntity);\n    }\n  }\n  return businessObjectFormatHelper.createBusinessObjectFormatFromEntity(businessObjectFormatEntity);\n}\n", "public void paintTreeCellBackground ( SynthContext context , Graphics g , int x , int y , int w , int h ) { }", "public void paintComponent ( Graphics g ) { super . paintComponent ( g ) ; int multiplier = getZoomMultiplier ( ) ; double binPixelWidth = getBinPixelWidth ( multiplier ) ; int offset = ( int ) ( getPixelOffset ( multiplier ) - binPixelWidth ) ; g . drawI", "\tpublic int size() {\n\t\treturn depends.cardinality();\n\t}\n", "public static void validateAllOrNone(Props props, String... keys) {\n    Objects.requireNonNull(keys);\n\n    boolean allExist = true;\n    boolean someExist = false;\n    for (String key : keys) {\n      Object val = props.get(key);\n      allExist &= val != null;\n      someExist |= val != null;\n    }\n\n    if (someExist && !allExist) {\n      throw new IllegalArgumentException(\n          \"Either all of properties exist or none of them should exist for \" + Arrays\n              .toString(keys));\n    }\n  }", "public String generateCreate(String table) throws DatabaseException {\n  StringBuffer result=new StringBuffer();\n  try {\n    StringBuffer sql=new StringBuffer();\n    sql.append(\"SELECT * FROM \");\n    sql.append(table);\n    ResultSet rs=executeQuery(sql.toString());\n    ResultSetMetaData md=rs.getMetaData();\n    result.append(\"CREATE TABLE \");\n    result.append(table);\n    result.append(\" ( \");\n    for (int i=1; i <= md.getColumnCount(); i++) {\n      if (i != 1) {\n        result.append(',');\n      }\n      result.append(md.getColumnName(i));\n      result.append(' ');\n      String type=processType(md.getColumnTypeName(i),md.getPrecision(i));\n      result.append(type);\n    }\n    result.append(\" ) \");\n    rs.close();\n  }\n catch (  SQLException e) {\n    throw (new DatabaseException(e));\n  }\n  return result.toString();\n}\n", "public void onSuccess ( int statusCode , Header [ ] headers , JSONArray response ) { AsyncHttpClient . log . w ( LOG_TAG , STR_ ) ; }", "@Override\n  public ServerHeartbeat server(String address,\n                                int port,\n                                boolean isSSL,\n                                String clusterId,\n                                String displayName,\n                                boolean isDynamic)\n  {\n    Objects.requireNonNull(address);\n    Objects.requireNonNull(clusterId);\n    \n    if (address.isEmpty()) {\n      address = \"127.0.0.1\";\n    }\n\n    /*\n    if (port <= 0) {\n      throw new IllegalArgumentException();\n    }\n    */\n    \n    ClusterHeartbeat cluster = createCluster(clusterId);\n    \n    ServerHeartbeat server;\n    \n    if (isDynamic) {\n      server = cluster.createDynamicServer(address, port, isSSL);\n    }\n    else {\n      server = cluster.createServer(address, port, isSSL);\n    }\n    \n    if (displayName != null) {\n      server.setDisplayName(displayName);\n    }\n    \n    if (! isDynamic) {\n      cluster.addSeedServer(server);\n    }\n    \n    return server;\n  }", "private void initializeScrollbars(){\n  verticalScrollbar.addAdjustmentListener(listener);\n  add(verticalScrollbar,BorderLayout.EAST);\n  horizontalScrollbar.addAdjustmentListener(listener);\n  add(horizontalScrollbar,BorderLayout.SOUTH);\n}\n", "\tpublic void visit(BehaviorVisitor visitor) {\n\t\tvisitor.activityType(this);\n\t\t\n\t\tsuper.visit(visitor);\n\t}\n", "public String tag(ImapRequestLineReader request) throws ProtocolException {\n        CharacterValidator validator = new TagCharValidator();\n        return consumeWord(request, validator);\n    }", "protected final void fillBufferRow(ByteBuffer bbuf,int wid,int row,LayerType layerType){\nswitch (layerType) {\ncase none:\ncase footprint:\ncase viewshed:\ncase derivative:\n    break;\ncase elevation:\ncase field:\n  FloatBuffer fbuf=bbuf.asFloatBuffer();\nfbuf.position(row * wid);\nfor (int c=0; c < wid; ++c) {\nfbuf.put(Float.NaN);\n}\nbreak;\ncase colorimage:\nIntBuffer ibuf=bbuf.asIntBuffer();\nibuf.position(row * wid);\nfor (int c=0; c < wid; ++c) {\nibuf.put(0);\n}\nbreak;\ncase grayimage:\nbbuf.position(row * wid);\nfor (int c=0; c < wid; ++c) {\nbbuf.put((byte)0);\n}\nbreak;\n}\nbbuf.rewind();\n}\n", "public void putByte ( byte b ) { ensureCapacity ( NUM_ ) ; this . byteBuffer [ this . position ++ ] = b ; }", "  private String translate(List<String> serviceNames, String termStr) throws ParseException {\n    if (serviceNames.size()>0) {\n      String serviceName = serviceNames.get(serviceNames.size()-1);\n      serviceNames = serviceNames.subList(0, serviceNames.size()-1);\n      termStr = Val.chkStr(termStr).replaceAll(\"^\\\"|\\\"$\", \"\");\n      String newTermStr = translate(serviceNames, translate(serviceName, termStr));\n      if (!newTermStr.equals(termStr)) {\n        termStr = \"(\" + newTermStr + \")\";\n      }\n    }\n    return termStr;\n  }\n", "void pushElemTemplateElement(ElemTemplateElement elem){\n  if (elem.getUid() == -1)   elem.setUid(nextUid());\n  m_elems.push(elem);\n}\n", "public void tick ( int integer ) { this . uses [ integer ] += NUM_ ; }", "public static void generateMarkersForSecuritySpecification(SecuritySpecModel spec,IProject project){\n  removeAllDroidsafeMarkers(project);\n  List<MethodModel> methods=new ArrayList<MethodModel>(spec.getEntryPoints());\n  Collections.sort(methods);\n  Map<Me", "public void dropTungstenCatalogTables ( String schemaName , String tungstenTableType , String serviceName ) throws SQLException ;", "private void validateSQLFields()\n\t{\n\n\t\tboolean flag = controller.isEnableSQLDatabaseOutput();\n\n\t\tenableSQLDatabaseConnection.setSelected(flag);\n\n\t\tsqlHostLabel.setEnabled(flag);\n\t\tsqlHostField.setEnabled(flag);\n\t\tsqlDatabaseLabel.setEnabled(flag);\n\t\tsqlDatabaseField.setEnabled(flag);\n\t\tsqlUserLabel.setEnabled(flag);\n\t\tsqlUserField.setEnabled(flag);\n\t\tsqlPasswordLabel.setEnabled(flag);\n\t\tsqlPasswordField.setEnabled(flag);\n\n\t\tenableZipEncodingCheckBox.setEnabled(flag);\n\t}", "public Collection<EvictableEntry<K,V>> queue(){\n  Set<EvictableEntry<K,V>> cp=new LinkedHashSet<>();\n  for (  Holder<K,V> holder : set)   cp.add(holder.entry);\n  return Collections.unmodifiableCollection(cp);\n}\n", "public List < AddressItem > loadAllDeepFromCursor ( Cursor cursor ) { int count = cursor . getCount ( ) ; List < AddressItem > list = new ArrayList < AddressItem > ( count ) ; if ( cursor . moveToFirst ( ) ) { if ( identityScope != null ) { identityScope . lock ( ) ; identityScope . reserveRoom ( count ) ; } try { do { list . add ( loadCurrentDeep ( cursor , BOOL_ ) ) ; } while ( cursor . moveToNext ( ) ) ; } finally { if ( identityScope != null ) { identityScope . unlock ( ) ; } } } return list ; }", "@Override\n    public void perform() throws PortalException {\n        Element plfNode = HandlerUtils.getPLFNode(ilfNode, person, false, false);\n\n        if (plfNode == null) return;\n\n        changeRestriction(Constants.ATT_MOVE_ALLOWED, plfNode, moveAllowed);\n        changeRestriction(Constants.ATT_MOVE_ALLOWED, ilfNode, moveAllowed);\n        changeRestriction(Constants.ATT_DELETE_ALLOWED, plfNode, deleteAllowed);\n        changeRestriction(Constants.ATT_DELETE_ALLOWED, ilfNode, deleteAllowed);\n        changeRestriction(Constants.ATT_EDIT_ALLOWED, plfNode, editAllowed);\n        changeRestriction(Constants.ATT_EDIT_ALLOWED, ilfNode, editAllowed);\n\n        if (plfNode.getAttribute(Constants.ATT_CHANNEL_ID).equals(\"\")) {\n            // if channel id is empty then this is not a channel.\n            // childAllowed is always true for channel ad-hoc parameters.\n            changeRestriction(Constants.ATT_ADD_CHILD_ALLOWED, plfNode, addChildAllowed);\n            changeRestriction(Constants.ATT_ADD_CHILD_ALLOWED, ilfNode, addChildAllowed);\n        }\n    }", "public boolean orderByColumnsDetermineAllDisplayColumnsForUnion(\n            List<ParsedColInfo> orderColumns) {\n        Set<AbstractExpression> orderExprs = new HashSet<>();\n        for (ParsedColInfo col : orderColumns) {\n            orderExprs.add(col.m_expression);\n        }\n\n        for (ParsedColInfo col : m_displayColumns) {\n            if (! orderExprs.contains(col.m_expression)) {\n                return false;\n            }\n        }\n\n        return true;\n    }", "public void enableDetector ( DetectorFactory factory , boolean enable ) { detectorEnablementMap . put ( factory . getShortName ( ) , enable ) ; }", "    public PdfArray getAsArray(PdfName key) {\n        PdfArray array = null;\n        PdfObject orig = getDirectObject(key);\n        if (orig != null && orig.isArray())\n            array = (PdfArray) orig;\n        return array;\n    }\n", "    public boolean isUrlExcluded( HttpServletRequest request, List<Pattern> excludedPatterns ) {\n        if (excludedPatterns != null) {\n            String uri = getUri(request);\n            for ( Pattern pattern : excludedPatterns ) {\n                if (pattern.matcher(uri).matches()) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n", "@Override\n    public boolean isSpecified(String uri, String local) {\n        int index = getIndex(uri, local);\n        return isSpecified(index);\n    }", "public int compareTo ( MySQLEventId eventId ) { long indexDiff = this . fileIndex - eventId . getFileIndex ( ) ; if ( indexDiff != NUM_ ) return ( indexDiff > NUM_ ) ? NUM_ : - NUM_ ; long offsetDiff = this . offset - eventId . getOffset ( ) ; if ( offset", "public static void touchLastDatabaseUpdateTime(){\n  lastDatabaseUpdateTime=System.currentTimeMillis();\n}\n", "protected void layout ()\n    {\n        Graphics2D gfx = (Graphics2D)_host.getComponent().getGraphics();\n        Font font = gfx.getFont();\n        _bounds = new Rectangle();\n\n        // figure out which items are included\n        int icount = _items.size();\n        ArrayList<RadialMenuItem> items = new ArrayList<RadialMenuItem>();\n        for (int i = 0; i < icount; i++) {\n            RadialMenuItem item = _items.get(i);\n            if (item.isIncluded(this)) {\n                items.add(item);\n            }\n        }\n\n        // lay out all of our menu items\n        int maxwid = 0, maxhei = 0;\n        icount = items.size();\n        for (int i = 0; i < icount; i++) {\n            RadialMenuItem item = items.get(i);\n            item.layout(gfx, font);\n\n            // track maximum menu item size\n            if (item.closedBounds.width > maxwid) {\n                maxwid = item.closedBounds.width;\n            }\n            if (item.closedBounds.height > maxhei) {\n                maxhei = item.closedBounds.height;\n            }\n        }\n        gfx.dispose();\n\n        // use the maximum of either width or height and make a circle around that\n        double radius = Math.max(_tbounds.height, _tbounds.width) / 2;\n\n        // be sure to add a gap and space for the menu item itself\n        radius += (5 + maxwid/2);\n\n        // compute the angle between menu items (we use the diameter of the menu items as an\n        // approximate measure of the distance along the circumference)\n        double theta = (maxwid + 10) / radius ;\n\n        // now position each item accordingly\n        double angle = -Math.PI/2;\n        for (int i = 0; i < icount; i++) {\n            RadialMenuItem item = items.get(i);\n            int ix = (int)(radius * Math.cos(angle));\n            int iy = (int)(radius * Math.sin(angle));\n            item.openBounds.x = item.closedBounds.x = ix - maxwid/2;\n            item.openBounds.y = item.closedBounds.y = iy - maxhei/2;\n\n            // move along the circle\n            angle += theta;\n        }\n\n        // create and position the centerpiece label\n        if (_centerIcon != null) {\n            _centerLabel = new RadialLabelSausage(\"\", _centerIcon);\n            _centerLabel.layout(gfx, font);\n            _centerLabel.openBounds.x = _centerLabel.closedBounds.x =\n                -(_centerLabel.closedBounds.width / 2);\n            _centerLabel.openBounds.y = _centerLabel.closedBounds.y =\n                -(_centerLabel.closedBounds.height / 2);\n        }\n\n        // now compute the rectangle that encloses the entire menu\n\n        // include the bounds for the centerpiece label\n        if (_centerLabel != null) {\n            _bounds.add(_centerLabel.openBounds);\n        }\n\n        // include the bounds for all menu items\n        for (int i = 0; i < icount; i++) {\n            RadialMenuItem item = items.get(i);\n            // we need the open bounds rather than the closed ones\n            _bounds.add(item.openBounds);\n        }\n\n        // now translate everything from the center of the target bounds to the upper left of the\n        // menu bounds\n        if (_centerLabel != null) {\n            _centerLabel.openBounds.translate(-_bounds.x, -_bounds.y);\n            _centerLabel.closedBounds.translate(-_bounds.x, -_bounds.y);\n        }\n        for (int i = 0; i < icount; i++) {\n            RadialMenuItem item = items.get(i);\n            item.openBounds.translate(-_bounds.x, -_bounds.y);\n            item.closedBounds.translate(-_bounds.x, -_bounds.y);\n        }\n\n        // the origin was at the center of the encircled rectangle; we need to translate it such\n        // that the origin of our bounds are in screen coordinates and at the upper left rather\n        // than the center\n        _bounds.x += (_tbounds.x + _tbounds.width/2);\n        _bounds.y += (_tbounds.y + _tbounds.height/2);\n\n        // now make sure the whole shebang is fully visible within the host component\n        Rectangle hbounds = _host.getViewBounds();\n        Point pos = SwingUtil.fitRectInRect(_bounds, hbounds);\n        _bounds.setLocation(pos);\n    }", "public void drawRenderedImage(RenderedImage img,AffineTransform xform){\n  if (img == null) {\n    return;\n  }\n  if (img instanceof BufferedImage) {\n    BufferedImage bufImg=(BufferedImage)img;\n    drawImage(bufImg,xform,null);\n    return;\n  }\n  boolean isIntegerTranslate=(transformState <= TRANSFORM_INT_TRANSLATE) && isIntegerTranslation(xform);\n  int pad=isIntegerTranslate ? 0 : 3;\n  Region clip;\n  try {\n    clip=getCompClip();\n  }\n catch (  InvalidPipeException e) {\n    return;\n  }\n  Rectangle region=getImageRegion(img,clip,transform,xform,pad,pad);\n  if (region.width <= 0 || region.height <= 0) {\n    return;\n  }\n  if (isIntegerTranslate) {\n    drawTranslatedRenderedImage(img,region,(int)xform.getTranslateX(),(int)xform.getTranslateY());\n    return;\n  }\n  Raster raster=img.getData(region);\n  WritableRaster wRaster=Raster.createWritableRaster(raster.getSampleModel(),raster.getDataBuffer(),null);\n  int minX=raster.getMinX();\n  int minY=raster.getMinY();\n  int width=raster.getWidth();\n  int height=raster.getHeight();\n  int px=minX - raster.getSampleModelTranslateX();\n  int py=minY - raster.getSampleModelTranslateY();\n  if (px != 0 || py != 0 || width != wRaster.getWidth() || height != wRaster.getHeight()) {\n    wRaster=wRaster.createWritableChild(px,py,width,height,0,0,null);\n  }\n  AffineTransform transXform=(AffineTransform)xform.clone();\n  transXform.translate(minX,minY);\n  ColorModel cm=img.getColorModel();\n  BufferedImage bufImg=new BufferedImage(cm,wRaster,cm.isAlphaPremultiplied(),null);\n  drawImage(bufImg,transXform,null);\n}\n", "    public void hubAdded(TDCHub hub) {\n        connectedHubs.add(hub);\n        hub.addListener(this);\n    }\n", "    public boolean isEnabled() {\n        return source.isEnabled();\n    }\n", "void assignToNew(String fileName, PageFormatter fmtr) {\r\n\t\tinternalLock.writeLock().lock();\r\n\t\ttry {\r\n\t\t\tflush();\r\n\t\t\tfmtr.format(this);\r\n\t\t\tblk = contents.append(fileName);\r\n\t\t\tpins = 0;\r\n\t\t\tisNew = true;\r\n\t\t\tlastLsn = LogSeqNum.DEFAULT_VALUE;\r\n\t\t} finally {\r\n\t\t\tinternalLock.writeLock().unlock();\r\n\t\t}\r\n\t}", "\tpublic int getTaskNumber() {\n\t\tparseIfNecessary();\n\t\treturn Integer.parseInt(taskNumber);\n\t}\n", "public JSONObject put ( String key , Collection < Object > value ) throws JSONException { this . put ( key , new JSONArray ( value ) ) ; return this ; }", "public Element addElementToRegistry(Element element){\n  if (element == null)   return (this);\n  int hc=element.hashCode();\n  String s=Integer.toString(hc);\n  addElementToRegistry(s,element);\n  return (this);\n}\n", "public static String normalizeRegionName(final String regionName){\n  if (regionName == null || regionName.length() == 0) {\n    return EMPTY_VALUE;\n  }\n  char[] resultName=new char[regionName.length() + 1];\n  boolean changed=false;\n  boolean isPrevCharSlash=false;\n  int startIndex;\n  if (regionName.charAt(0) != '/') {\n    changed=true;\n    startIndex=0;\n  }\n else {\n    isPrevCharSlash=true;\n    startIndex=1;\n  }\n  resultName[0]='/';\n  int resultLength=1;\n  for (int index=startIndex; index < regionName.length(); ++index) {\n    char currChar=regionName.charAt(index);\n    if (currChar == '/') {\n      if (isPrevCharSlash) {\n        changed=true;\n        continue;\n      }\n      isPrevCharSlash=true;\n    }\n else {\n      isPrevCharSlash=false;\n    }\n    resultName[resultLength++]=currChar;\n  }\n  if (resultName[resultLength - 1] == '/') {\n    --resultLength;\n    changed=true;\n  }\n  if (changed) {\n    return new String(resultName,0,resultLength);\n  }\n else {\n    return regionName;\n  }\n}\n", "  public Resolution researcherForm() {\n    this.addType = researcher;\n    return new ForwardResolution(\"/add.jsp\");\n  }\n", "public static String fixValue(String value) {\r\n\t\tif (value != null && !value.equals(\"\")) {\r\n\t\t\tfinal String[] words = value.toLowerCase().split(\"_\");\r\n\t\t\tvalue = \"\";\r\n\t\t\tfor (final String word : words) {\r\n\t\t\t\tif (word.length() > 1) {\r\n\t\t\t\t\tvalue += word.substring(0, 1).toUpperCase() + word.substring(1) + \" \";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvalue = word;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (value.contains(\"\\\\n\")) {\r\n\t\t\tvalue = value.replace(\"\\\\n\", System.getProperty(\"line.separator\"));\r\n\t\t}\r\n\t\treturn value;\r\n\t}", "protected final void addTagHandler ( String name , Class handlerType ) { this . factories . put ( name , new HandlerFactory ( handlerType ) ) ; }", "@Override public void characters(char[] chars,int start,int length) throws SAXException {\n  elementText.append(chars,start,length);\n}\n", "   private Transform matchURL(Class type) throws Exception {\n      if(type == URL.class) {\n         return new URLTransform();\n      }      \n      return null;\n   }\n", "public String prettyDependencies() {\n        StringBuilder b = new StringBuilder();\n        b.append(id()).append('\\n');\n        for (Iterator<Script> ite = dependencies.iterator(); ite.hasNext(); ) {\n            Script n = ite.next();\n            prettyDependencies(b, !ite.hasNext(), 0, n);\n        }\n        return b.toString();\n    }", "\tpublic void processResearches(XElement tech) {\n\t\tfor (XElement item : tech.childrenWithName(\"item\")) {\n\t\t\tprocessResearch(item);\n\t\t}\n\t}\n", "  public CSingleTheme getThemeByName(String theName){\n\n    int tempIndex = 0;\n\n    if ( theName == null || theName.equals(\"\") )\n      return null;\n\n    theName = theName.toLowerCase();\n\n    // find index of the specified theme\n    for ( int i = 0 ; i < mThemeCollection.size() ; i++ ){\n\n      if ( ((CSingleTheme)(mThemeCollection.elementAt(i))).getName().toLowerCase().indexOf(theName) >= 0 ){\n        return getTheme(i);\n      }\n    }\n\n    return null;\n\n  }\n", "public EmbeddedSingleNodeKafkaCluster ( ) { this ( new Properties ( ) ) ; }", "public static String arrayToDelimitedString ( Object [ ] arr , String delim ) { if ( arr == null ) { return STR_ ; } StringBuffer sb = new StringBuffer ( ) ; for ( int i = NUM_ ; i < arr . length ; i ++ ) { if ( i > NUM_ ) { sb . append ( delim ) ; } sb . append ( arr [ i ] ) ; } return sb . toString ( ) ; }", "public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {\n\t\tcheckInit();\n\n\t\tLOG.debug(\"Received slot report from instance {}: {}.\", instanceId, slotReport);\n\n\t\tTaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId);\n\n\t\tif (null != taskManagerRegistration) {\n\n\t\t\tfor (SlotStatus slotStatus : slotReport) {\n\t\t\t\tupdateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID(), slotStatus.getJobID());\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\tLOG.debug(\"Received slot report for unknown task manager with instance id {}. Ignoring this report.\", instanceId);\n\n\t\t\treturn false;\n\t\t}\n\t}", "public BlockTask ( Minion_Job_Manager boss , EntityMinion input , int ix , int iy , int iz ) { this . boss = boss ; this . worker = input ; this . posX = ix ; this . posY = iy ; this . posZ = iz ; pos = new BlockPos ( ix , iy , iz ) ; startedTask = BOOL_ ", "public ElapsedTimer start(){\n  _startTimeNanos=System.nanoTime();\n  return this;\n}\n", "protected Map createMap ( ) { return new HashMap ( ) ; }", "public static void editNodeComments(final CGraphModel model,final INaviViewNode node,final InitialTab initialTab){\n  Preconditions.checkNotNull(node,\"IE02131: Node argument can not be null\");\n  final JDialog dialog=getCommentDialog(model,node,initialTab);\n  GuiHelper.centerChildToParent(model.getParent(),dialog,true);\n  dialog.setVisible(true);\n}\n", "\tpublic boolean equals(Object obj){\n\t\tif(this == obj){\n\t\t\treturn true;\n\t\t}\n\t\telse if(obj instanceof JXSupportedTask){\n\t\t\tJXSupportedTask other = (JXSupportedTask)obj;\n\t\t\tif(startRange == other.startRange){\n\t\t\t\tif(endRange == other.endRange){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n", "@Override public long read(ByteBuffer buffer){\n  long value=buffer.getLong();\n  return value;\n}\n", "public void add(lalr_item_set other) throws internal_error {\n  not_null(other);\n  for (Enumeration e=other.all(); e.hasMoreElements(); )   add((lalr_item)e.nextElement());\n}\n", "    public int decrement(int n) {\n\tcount = count - n;\n\treturn count;\n    }\n", "public <T extends RegressionEvaluation> T evaluateRegression(JavaRDD<DataSet> data, int minibatchSize) {\n        long nOut = ((FeedForwardLayer) network.getOutputLayer().conf().getLayer()).getNOut();\n        return (T)doEvaluation(data, new org.deeplearning4j.eval.RegressionEvaluation(nOut), minibatchSize);\n    }", "private int loadSerializationType ( ) { String propertyValue = _configReader . getSpaceProperty ( Engine . ENGINE_SERIALIZATION_TYPE_PROP , Engine . ENGINE_SERIALIZATION_TYPE_DEFAULT ) . trim ( ) ; try { int result = Integer . parseInt ( propertyValue ) ; StorageType storageType = StorageType . fromCode ( result ) ; if ( storageType != StorageType . OBJECT && _logger . isLoggable ( Level . WARNING ) ) _logger . log ( Level . WARNING , Engine . FULL_ENGINE_SERIALIZATION_TYPE_PROP + STR_ + propertyValue + STR_ ) ; return result ; } catch ( NumberFormatException e ) { String msg = STR_ + propertyValue ; if ( _logger . isLoggable ( Level . SEVERE ) ) _logger . log ( Level . SEVERE , msg , e ) ; throw new RuntimeException ( msg , e ) ; } catch ( IllegalArgumentException e ) { String msg = e . getMessage ( ) . replace ( STR_ , STR_ ) ; if ( _logger . isLoggable ( Level . SEVERE ) ) _logger . log ( Level . SEVERE , msg ) ; throw new RuntimeException ( msg ) ; } }", "  public String getAuthInfo() {\n    String cookies = null;\n    if((mNBAuthToken==null)||(mNBAuthToken.length()==0)) {\n      mNBAuthToken = mApplet.getParameter(\"SAMAuthToken\");\n    }\n    // All we need is sam token for authentication\n    cookies = \"SAMAut", "public static double [ ] [ ] appendColumns ( double [ ] [ ] matrix1 , double [ ] [ ] matrix2 ) throws Exception { double [ ] [ ] data = new double [ matrix1 . length ] [ ] ; if ( matrix1 . length != matrix2 . length ) { throw new Exception ( STR_ ) ; } if", "public static DeleteStatus deleteAsyncId(String requestId){\n  return new DeleteStatus(requestId);\n}\n", "public static void assertNotInstanceOf(String objectName,Class<?> expectedClassType,Object actualObject){\n  try {\n    if (expectedClassType.isInstance(actualObject)) {\n      Assert.fail(objectName + \" is an instance of \" + expectedClassType.getName());\n    }\n  }\n catch (  AssertionError e) {\n    Verify.throwMangledException(e);\n  }\n}\n", "@Deprecated\n\tpublic void addInput(Operator<IN>... inputs) {\n\t\tPreconditions.checkNotNull(inputs, \"The input may not be null.\");\n\t\tthis.input = Operator.createUnionCascade(this.input, inputs);\n\t}", "  private void compareClassArrays(JavaClass[] a1, JavaClass[] a2) throws Exception {\n    assertEquals(a1.length, a2.length);\n    for (int i = 0; i < a1.length; i++) {\n      compareJavaClasses(a1[i], a2[i]);\n    }\n  }\n", "default boolean requiresLocationCheckForLightValue ( ) { return BOOL_ ; }", "    public void close() throws RequestException {\n        if (_log.isDebugEnabled()) {\n            _log.debug(\"Connection:\" + _connectionID + \" closing.\");\n        }\n        if (_jmsQueueSession != null) {\n            try {\n                _jmsQueueSession.close();\n            } catch (JMSException e) {\n                _log.error(e);\n            }\n        }\n        if (_jmsConnection != null) {\n            try {\n                _jmsConnection.close();\n            } catch (JMSException e) {\n                _log.error(e);\n            }\n        }\n        _jmsRequestQueue = null;\n        _jmsReplyQueue = null;\n        _jmsQueueSession = null;\n        _jmsConnection = null;\n        _isOpen = false;\n        _lastUsedTime = System.currentTimeMillis();\n    }\n", "protected int bytesPerAtom ( ) { return ( NUM_ ) ; }", "public static Test suite ( ) { return ( new TestSuite ( SelectManyCollectionITCase . class ) ) ; }", "public static String concatWithSpaces(final Object... osToString) {\r\n        final StringBuilder b = new StringBuilder();\r\n        boolean notFirst = false;\r\n        if (osToString != null) {\r\n            for (final Object o : osToString) {\r\n                if (notFirst) {\r\n                    b.append(\" \");\r\n                } else {\r\n                    notFirst = true;\r\n                }\r\n                b.append(o != null ? o.toString() : \"null\");\r\n            }\r\n        }\r\n        return b.toString();\r\n    }", "    public RtNode GetDescendant(String strNodeName, boolean bUseNameChain) {\n        //TODO\n        return new RtNode();\n    } //end GetDescendant(String strNodeName, boolean bUseNameChain)\n", "private void initialize(Class<OpsType> opsType,Interface instance) throws InstantiationException, IllegalAccessException {\n  mOpsInstance=opsType.newInstance();\n  mRetainedFragmentManager.put(opsType.getSimpleName(),mOpsInstance);\n  mOpsInstance.onConfiguration(instance,true);\n}\n", "public static boolean isMimeTypeVideo(String mimeType){\n  if (mimeType.equals(Const.ContentTypes.VIDEO_MP4)) {\n    return true;\n  }\n  return false;\n}\n", "public void flush ( ) { for ( MessageAssembler assembler : mMessageAssemblers ) { assembler . flush ( ) ; } }", "public CertificateLoginAuthenticator createCertificateLoginAuthenticator() {\n        SecurityService securityService = securityServiceRef.getService();\n        return new CertificateLoginAuthenticator(securityService.getAuthenticationService(), webAppSecurityConfig.createSSOCookieHelper());\n    }", "String param ( String name ) ;", "void save(){\n  if (kSave == null) {\n    kSave=new byte[blockSize];\n  }\n  System.arraycopy(k,0,kSave,0,blockSize);\n}\n", "private static String parseVersionNumber(String line){\n  StringTokenizer tokenizer=new StringTokenizer(line,\" \\t\");\n  if (!expect(tokenizer,\"sourceInfo\") || !expect(tokenizer,\"version\") || !tokenizer.hasMoreTokens()) {\n    return null;\n  }\n  return tokenizer.nextToken();\n}\n", "private void calculateDiscount(){\n  m_discountSchema=false;\n  if (m_C_BPartner_ID == 0 || m_M_Product_ID == 0)   return;\n  int M_DiscountSchema_ID=0;\n  BigDecimal FlatDiscount=null;\n  String sql=\"SELECT COALESCE(p.M_DiscountSchema_ID,g.M_DiscountSchema_ID", "public static BufferedInputStream newInputStream(File file) throws FileNotFoundException {\n  return new BufferedInputStream(new FileInputStream(file));\n}\n", "public static Date getDate(CSProperties p, String key) throws ParseException {\n        String val = p.get(key).toString();\n        if (val == null) {\n            throw new IllegalArgumentException(key);\n        }\n        String f = p.getInfo(key).get(KEY_FORMAT);\n        DateFormat fmt = new SimpleDateFormat(f == null ? ISO8601 : f);\n        return fmt.parse(val);\n    }", "public List depthFirst ( ) { return depthFirst ( BOOL_ ) ; }", "public abstract boolean isValid ( ) ;", "public void addMouseListener(MouseListener l){\n  m_textArea.addMouseListener(l);\n}\n", "protected void checkType ( Object object ) { if ( object == null ) { throw new NullPointerException ( STR_ ) ; } if ( type != null ) { if ( ! type . isInstance ( object ) ) { throw new IllegalArgumentException ( STR_ + type . getName ( ) + STR_ + object ) ; } } }", "public String convertToString ( Class < ? > targetClass , Object value ) { UIComponent component = getComponent ( ) ; Converter converter = app . createConverter ( targetClass ) ; if ( null == converter ) { throw new FacesException ( STR_ + targetClass . ", "@SuppressWarnings(\"unchecked\") // the cache always returns the type matching enumType\n    public static <T extends Enum<T>> T[] getSharedConstants(Class<T> enumType) {\n        return (T[]) sharedConstantsCache.get(enumType);\n    }", "public TolerantDoubleComparison isNotWithin(final double tolerance) {\n    return new TolerantDoubleComparison() {\n      @Override\n      public void of(double expected) {\n        Double actual = actual();\n        checkNotNull(\n            actual, \"actual value cannot be null. tolerance=%s expected=%s\", tolerance, expected);\n        checkTolerance(tolerance);\n\n        if (!notEqualWithinTolerance(actual, expected, tolerance)) {\n          failWithoutActual(\n              fact(\"expected not to be\", doubleToString(expected)),\n              butWas(),\n              fact(\"within tolerance\", doubleToString(tolerance)));\n        }\n      }\n    };\n  }", "public < A extends Annotation > Expressions buildUserCheckAnyExpression ( final Class < ? > resourceClass , final Class < A > annotationClass , final RequestScope requestScope ) { final Function < Check , Expression > userCheckFn = null ; return new Expre", "public XmlDom child(String tag,String attr,String value){\n  List<XmlDom> c=children(tag,attr,value);\n  if (c.size() == 0)   return null;\n  return c.get(0);\n}", "    public boolean isParallelTo(final Line line) {\n        return FastMath.abs(sin * line.cos - cos * line.sin) < 1.0e-10;\n    }\n", "public static void putLastRefreshMilliseconds(Bundle bundle, long value) {\n        Validate.notNull(bundle, \"bundle\");\n        bundle.putLong(LAST_REFRESH_DATE_KEY, value);\n    }", "public boolean isExpired(){\n  return System.currentTimeMillis() - this.lastAccessTime >= 1800000L;\n}\n", "public InvalidMagicMimeEntryException ( ) { super ( STR_ ) ; }", "public void replace(PvmExecutionImpl execution) {\n    // activity instance id handling\n    this.activityInstanceId = execution.getActivityInstanceId();\n    this.isActive = execution.isActive;\n\n    this.replacedBy = null;\n    execution.replacedBy = this;\n\n    this.transitionsToTake = execution.transitionsToTake;\n\n    execution.leaveActivityInstance();\n  }", "public java.util.List<FunctionConfiguration> getFunctions() {\n        if (functions == null) {\n            functions = new com.amazonaws.internal.SdkInternalList<FunctionConfiguration>();\n        }\n        return functions;\n    }", "public String consumeTo ( String seq ) { int offset = queue . indexOf ( seq , pos ) ; if ( offset != - NUM_ ) { String consumed = queue . substring ( pos , offset ) ; pos += consumed . length ( ) ; return consumed ; } else { return remainder ( ) ; } }", "BufferedImage scaleImage(BufferedImage orig,double scale){\n  if (scale > 0.5) {\n    int width=(int)(scale * orig.getWidth());\n    int height=(int)(scale * orig.getHeight());\n    BufferedImage copy=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);\n    Graphics2D g=copy.createGraphics();\n    g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n    g.drawImage(orig,0,0,width,height,null);\n    g.dispose();\n    return copy;\n  }\n else   if (scale <= 0) {\n    throw new IllegalArgumentException(\"Scale must be > 0, was \" + scale);\n  }\n else {\n    int width=orig.getWidth() / 2;\n    int height=orig.getHeight() / 2;\n    BufferedImage copy=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);\n    Graphics2D g=copy.createGraphics();\n    g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n    g.drawImage(orig,0,0,width,height,null);\n    g.dispose();\n    return scaleImage(copy,2 * scale);\n  }\n}\n", "public ResolvedFunction ( final MemoryModule memoryModule , final Address address ) { assert address != null ; assert memoryModule != null ; this . address = address ; this . function = null ; this . memoryModule = memoryModule ; }", "public static boolean loggingEnabled(){\n  return perfLoggingOn;\n}\n", "public static <T>FutureW<T> ofError(final Throwable error){\n  final CompletableFuture<T> cf=new CompletableFuture<>();\n  cf.completeExceptionally(error);\n  return FutureW.<T>of(cf);\n}\n", "@Override protected final boolean canCompact(){\n  return rw;\n}\n", "void loaded ( IViewContainer container ) ;", "public void marshall(DescribeEndpointTypesRequest describeEndpointTypesRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (describeEndpointTypesRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(describeEndpointTypesRequest.getFilters(), FILTERS_BINDING);\n            protocolMarshaller.marshall(describeEndpointTypesRequest.getMaxRecords(), MAXRECORDS_BINDING);\n            protocolMarshaller.marshall(describeEndpointTypesRequest.getMarker(), MARKER_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void marshall(RunConfigurationDescription runConfigurationDescription, ProtocolMarshaller protocolMarshaller) {\n\n        if (runConfigurationDescription == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(runConfigurationDescription.getApplicationRestoreConfigurationDescription(),\n                    APPLICATIONRESTORECONFIGURATIONDESCRIPTION_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "@Override\n\tpublic int compareTo(IPAddressString other) {\n\t\tif(this == other) {\n\t\t\treturn 0;\n\t\t}\n\t\tboolean isValid = isValid();\n\t\tboolean otherIsValid = other.isValid();\n\t\tif(!isValid && !otherIsValid) {\n\t\t\treturn toString().compareTo(other.toString());\n\t\t}\n\t\treturn addressProvider.providerCompare(other.addressProvider);\n\t}", "    public Vector3 getVector(double u,double v) {\n        return new Vector3(\n            dir_u.getX() * u + dir_v.getX() * v,\n            dir_u.getY() * u + dir_v.getY() * v,\n            dir_u.getZ() * u + dir_v.getZ() * v) ;\n    }\n", "public static List<Match> search(Match m, Pattern pattern)\n\t{\n\t\tassert pattern.getStartingClass().isAssignableFrom(m.get(0).getModelInterface());\n\n\t\treturn searchRecursive(m, pattern.getConstraints(), 0);\n\t}", "\tpublic Entry getPrevious(String aWord) {\n\t\tif (fMap.isEmpty()) return Entry.createEmpty();\n\t\tint pos = getPosition(aWord);\n\t\tif (pos == 0)\n\t\t\treturn (Entry) fMap.get(0);\n\t\treturn (Entry) fMap.get(pos - 1);\n\t}\n", "public void add(final String key, final String value)\n\t{\n\t\tdata.setProperty(key, value);\n\t\tfireTableDataChanged();\n\t}", "    private int getDataWidth(int row, int col) {\n        DataLineModel dlm = (DataLineModel)dataModel;\n        DataLine dl = dlm.get(row);\n        Object data = dl.getValueAt(col);\n        String info;\n        if( data != null &&\n            (info = data.toString()) != null ) {\n            CLIPPED_TIP[0] = info;\n            TableCellRenderer tcr = getDefaultRenderer(dlm.getColumnClass(col));\n            JComponent renderer = (JComponent)tcr.getTableCellRendererComponent(\n                                        this, data, false, false, row, col);\n            try {\n                FontMetrics fm = renderer.getFontMetrics(renderer.getFont());\n                return fm.stringWidth(info) + 3;\n            } catch (NullPointerException npe) {\n                return -1;\n            }\n        } else {\n            return -1;\n        }\n    }\n", "public static boolean computeBooleanFromString(String stringBoolean,boolean defaultValue){\n  if (stringBoolean == null)   return defaultValue;\n else   if (stringBoolean.equalsIgnoreCase(\"true\"))   return true;\n else   if (stringBoolean.equalsIgnoreCase(\"false\"))   return false;\n else   throw new IllegalArgumentException(\"Property value must be \\\"true\\\" or \\\"false\\\" instead of \\\"\" + stringBoolean + \"\\\"\");\n}\n", "public TxId2CommitTimeIndex(final IRawStore store,final Checkpoint checkpoint,final IndexMetadata metadata,boolean readOnly){\n  super(store,checkpoint,metadata,readOnly);\n}\n", "public void increment ( ) { counter . getAndIncrement ( ) ; }", "private void encodePaste ( final DiffPart part ) throws EncodingException { data . writeBit ( NUM_ ) ; data . writeBit ( NUM_ ) ; data . writeBit ( NUM_ ) ; data . writeValue ( codecData . getBlocksizeS ( ) , part . getStart ( ) ) ; data . writeValue ( co", "\tpublic void makeButtonDefault(Window parent) {\n\t\tif(parent == null)\t\t// can't do this unless we've got a parent!\n\t\t\tthrow new IllegalArgumentException(\"Cannot make default button: parent window specified as 'null'!\");\n\n\t\t// now, we need to store the Window we found ON the Button\n\t\tparentWindow = (Window) parent;\n\n\t\t// and register this class with all the handlers we need\n\t\taddActionListener(this);\n\t\tparentWindow.addKeyListener(this);\n\t}\n", "IEspStatusFlammable doCommandFlammableGetStatusInternet ( String deviceKey ) ;", "private void $$$setupUI$$$(){\n  contentPane=new JPanel();\n  contentPane.setLayout(new BorderLayout(0,0));\n  final JScrollPane scrollPane1=new JScrollPane();\n  contentPane.add(scrollPane1,BorderLayout.CENTER);\n  table=new JTable();\n  scrollPane1.setViewportView(table);\n}\n", "    public void setNdoc(String ndoc) {\n        String oldNdoc = this.ndoc;\n        this.ndoc = ndoc;\n        propertyChangeSupport.firePropertyChange(PROP_NDOC, oldNdoc, ndoc);\n    }\n", "protected void updateRadioLinks(){\n  m_SetTestBut.setEnabled(m_TestSplitBut.isSelected());\n  if ((m_SetTestFrame != null) && (!m_TestSplitBut.isSelected())) {\n    m_SetTestFrame.setVisible(false);\n  }\n  m_PercentText.setEnabled(m_PercentBut.isSelected());\n  m_PercentLab.setEnabled(m_PercentBut.isSelected());\n  m_ClassCombo.setEnabled(m_ClassesToClustersBut.isSelected());\n  updateCapabilitiesFilter(m_ClustererEditor.getCapabilitiesFilter());\n}\n", "public void setHost( String host )\n    {\n        _host = null;\n        if ( host != null && host.length() > 0 )\n        {\n            //\n            // Here's some very minimal support for IPv6 addresses.\n            // If the literal IPv6 address is not enclosed in square brackets\n            // then add them.\n            //\n            boolean needBrackets = ( ( host.indexOf( ':' ) >= 0 )\n                    && !host.startsWith( \"[\" )\n                    && !host.endsWith( \"]\" ) );\n\n            if ( needBrackets )\n            {\n                _host = '[' + host + ']';\n            }\n            else\n            {\n                _host = host;\n            }\n\n            _opaque = false;\n            setSchemeSpecificPart( null );\n        }\n\n        if ( _host == null )\n        {\n            setUserInfo( null );\n            setPort( UNDEFINED_PORT );\n        }\n    }", "protected double tokenToDouble(List recordList,int index,double def,boolean swapSign){\n  Double ret=tokenToDouble(recordList,index,def);\n  return swapSign ? -1 * ret : ret;\n}\n", "@SuppressWarnings(\"javadoc\")\n    public CmsResource createResource(\n        CmsDbContext dbc,\n        String resourcename,\n        int type,\n        byte[] content,\n        List<CmsProperty> properties)\n    throws CmsException, CmsIllegalArgumentException {\n\n        String targetName = resourcename;\n\n        if (content == null) {\n            // name based resource creation MUST have a content\n            content = new byte[0];\n        }\n        int size;\n\n        if (CmsFolder.isFolderType(type)) {\n            // must cut of trailing '/' for folder creation\n            if (CmsResource.isFolder(targetName)) {\n                targetName = targetName.substring(0, targetName.length() - 1);\n            }\n            size = -1;\n        } else {\n            size = content.length;\n        }\n\n        // create a new resource\n        CmsResource newResource = new CmsResource(\n            CmsUUID.getNullUUID(), // uuids will be \"corrected\" later\n            CmsUUID.getNullUUID(),\n            targetName,\n            type,\n            CmsFolder.isFolderType(type),\n            0,\n            dbc.currentProject().getUuid(),\n            CmsResource.STATE_NEW,\n            0,\n            dbc.currentUser().getId(),\n            0,\n            dbc.currentUser().getId(),\n            CmsResource.DATE_RELEASED_DEFAULT,\n            CmsResource.DATE_EXPIRED_DEFAULT,\n            1,\n            size,\n            0, // version number does not matter since it will be computed later\n            0); // content time will be corrected later\n\n        return createResource(dbc, targetName, newResource, content, properties, false);\n    }", "void resetAlignmentHints ( ) { maxTextWidth = maxAcceleratorWidth = maxTextOffset = maxIconOffset = NUM_ ; }", "public void copyFromLocalFile(boolean delSrc, boolean overwrite, \n      boolean validate, Path src, Path dst)\n    throws IOException {\n    Configuration conf = getConf();\n    FileUtil.copy(getLocal(conf), src, this, dst, delSrc, overwrite,\n        validate, conf);\n  }", "void dumpMarkers(){\n  if (focusLog.isLoggable(PlatformLogger.Level.FINEST)) {\n    focusLog.finest(\">>> Markers dump, time: {0}\",System.currentTimeMillis());\nsynchronized (this) {\n      if (typeAheadMarkers.size() != 0) {\n        Iterator<TypeAheadMarker> iter=typeAheadMarkers.iterator();\n        while (iter.hasNext()) {\n          TypeAheadMarker marker=iter.next();\n          focusLog.finest(\"    {0}\",marker);\n        }\n      }\n    }\n  }\n}\n", "public static void main ( String argv [ ] ) { OpenReplicatorManagerCtrl ctrl = new OpenReplicatorManagerCtrl ( argv ) ; ctrl . go ( ) ; }", "    public CharSequence getHeadlineText() {\n        int firstListItem = pageableListView.getCurrentPage() * pageableListView.getRowsPerPage();\n        AppendingStringBuffer buf = new AppendingStringBuffer(80);\n        buf.append(String.valueOf(pageableListView.getList().size())).append(\n                \" items found, displaying \").append(String.valueOf(firstListItem + 1)).append(\n                \" to \").append(String.valueOf(firstListItem + pageableListView.getRowsPerPage()))\n                .append(\".\");\n\n        return buf;\n    }\n", "public static void initialize ( final Activity activity , final String gameId , final IUnityAdsListener listener ) { initialize ( activity , gameId , listener , BOOL_ ) ; }", "public void storeDomainFor(Variable var,Domain domain){\n  if (!affectedVariables.contains(var)) {\n    savedDomains.add(new Pair<Variable,Domain>(var,domain));\n    affectedVariables.add(var);\n  }\n}\n", "@Override public int clampViewPositionVertical(View child,int top,int dy){\n  int topBound=0;\n  int bottomBound=0;\nswitch (draggerView.getDragPosition()) {\ncase TOP:\n    if (top > 0) {\n      topBound=draggerView.getPaddingTop();\n      bottomBound=(int)draggerListener.dragVerticalDragRange();\n    }\n  break;\ncase BOTTOM:\nif (top < 0) {\n  topBound=(int)-draggerListener.dragVerticalDragRange();\n  bottomBound=draggerView.getPaddingTop();\n}\nbreak;\ndefault :\nbreak;\n}\nreturn Math.min(Math.max(top,topBound),bottomBound);\n}\n", "private boolean containsIgnoreCase(List<String> stringlist,String match){\n  for (  String s : stringlist) {\n    if (s.equalsIgnoreCase(match)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "private static void importIdbFileInternal(final String idaDirectory,final String idbFile,final IDatabase database,final CBaseExporter exporter) throws ImportFailedException {\n  try {\n    exporter.importModule(idbFile,idaDirectory,database);\n  }\n catch (  final ConfigFileException exception) {\n    throw new ImportFailedException(String.format(\"Could not create the IDA2SQL temp file.\" + \"\\n\" + \"Importing project failed.\"));\n  }\ncatch (  final IdaException exception) {\n    throw new ImportFailedException(String.format(\"Could not start IDA Pro.\" + \"\\n\" + \"Importing project failed.\"));\n  }\ncatch (  final ExporterException exception) {\n    throw new ImportFailedException(exception.getLocalizedMessage());\n  }\n}\n", "private void doXObject ( PDFObject obj ) throws IOException { String type = obj . getDictRef ( STR_ ) . getStringValue ( ) ; if ( type == null ) { type = obj . getDictRef ( STR_ ) . getStringValue ( ) ; } if ( type . equals ( STR_ ) ) { doImage ( obj ) ; } else if ( type . equals ( STR_ ) ) { doForm ( obj ) ; } else { throw new PDFParseException ( STR_ + type ) ; } }", "private CompletableFuture<Void> bootstrapServer() {\n    ServerBootstrap b = new ServerBootstrap();\n    b.option(ChannelOption.SO_REUSEADDR, true);\n    b.option(ChannelOption.SO_BACKLOG, 128);\n    b.childOption(ChannelOption.WRITE_BUFFER_WATER_MARK,\n        new WriteBufferWaterMark(8 * 1024, 32 * 1024));\n    b.childOption(ChannelOption.SO_RCVBUF, 1024 * 1024);\n    b.childOption(ChannelOption.SO_SNDBUF, 1024 * 1024);\n    b.childOption(ChannelOption.SO_KEEPALIVE, true);\n    b.childOption(ChannelOption.TCP_NODELAY, true);\n    b.childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT);\n    b.group(serverGroup, clientGroup);\n    b.channel(serverChannelClass);\n    if (enableNettyTls) {\n      try {\n        b.childHandler(new SslServerChannelInitializer());\n      } catch (SSLException e) {\n        return Futures.exceptionalFuture(e);\n      }\n    } else {\n      b.childHandler(new BasicServerChannelInitializer());\n    }\n    return bind(b);\n  }", "\tpublic void addToScore(int points){\n\t\tInvaders.score+=points;\n\t}\n", "private List<Double> getTopN(INDArray vec, int N) {\n        BasicModelUtils.ArrayComparator comparator = new BasicModelUtils.ArrayComparator();\n        PriorityQueue<Double[]> queue = new PriorityQueue<>(vec.rows(), comparator);\n\n        for (int j = 0; j < vec.length(); j++) {\n            final Double[] pair = new Double[] {vec.getDouble(j), (double) j};\n            if (queue.size() < N) {\n                queue.add(pair);\n            } else {\n                Double[] head = queue.peek();\n                if (comparator.compare(pair, head) > 0) {\n                    queue.poll();\n                    queue.add(pair);\n                }\n            }\n        }\n\n        List<Double> lowToHighSimLst = new ArrayList<>();\n\n        while (!queue.isEmpty()) {\n            double ind = queue.poll()[1];\n            lowToHighSimLst.add(ind);\n        }\n        return Lists.reverse(lowToHighSimLst);\n    }", "public Compactor snapshotIndex(long index){\n  this.snapshotIndex=Math.max(this.snapshotIndex,index);\n  return this;\n}", "\tpublic void createTable(String name, Map<String, DBType> schema) throws SQLException {\n\t\tdbMan.createTable(name, schema);\n\t}\n", "public void writeToFile(DelayCallback delay) throws IOException, DelayAbortedException {\n\t\tformatHandler.writeFile(file, this, delay);\n\t\tmodified = false;\n\t}", "public void initCombos(){\n  addCombinationValues(\"connectURL\",new Object[]{\"vm://localhost?marshal=false\",\"vm://localhost?marshal=true\"});\n  addCombinationValues(\"deliveryMode\",new Object[]{Integer.valueOf(DeliveryMode.NON_PERSISTENT),Integer.valueOf(DeliveryMode.PERSISTENT)});\n  addCombinationValues(\"destinationType\",new Object[]{Byte.valueOf(ActiveMQDestination.QUEUE_TYPE)});\n}\n", "@Override public void onAction(){\n  onAction(ActionType.OPEN);\n}\n", "public int passiveWitnessesInQuorumSetCount ( ) { int passiveWitnessCount = NUM_ ; for ( ClusterMember member : potentialQuorumMembersSet . values ( ) ) { if ( member . isPassiveWitness ( ) ) { passiveWitnessCount ++ ; } } return passiveWitnessCount ; }", "public EmbeddedSpaceConfigurer attributeStore ( AttributeStore attributeStore ) { validate ( ) ; factoryBean . attributeStore ( attributeStore ) ; return this ; }", "protected boolean lookahead() {\n        try {\n            next = this.reader.readLine();\n            if(next == null) {\n                // TODO: make this close-on-exhaust optional?\n                reader.close();\n            }\n            return (next!=null);\n        } catch (IOException e) {\n            logger.warning(e.toString());\n            return false;\n        }\n    }", "public static void selectVisibleSubtreeNodes ( final ZyGraph graph , final ITreeNode < CTag > tag ) { selectNodes ( graph , getSubtreeTags ( tag ) , BOOL_ ) ; }", "private static String createPartialWwn(String wwn){\n  if (wwn.length() < SUFFIX_LENGTH + PARTIAL_PREFIX_LENGTH) {\n    return wwn;\n  }\n  String prefix=wwn.substring(wwn.length() - (SUFFIX_LENGTH + PARTIAL_PREFIX_LENGTH),wwn.length() - SUFFIX_LENGTH);\n  String sufix=wwn.substring(wwn.length() - SUFFIX_LENGTH);\n  return (\"000\" + prefix + \"0000\"+ sufix);\n}\n", "@AnyThread\n    protected void safeEndSession ()\n    {\n        if (!_omgr.isRunning()) {\n            log.info(\"Dropping end session request as we're shutting down \" + this + \".\");\n        } else {\n            _omgr.postRunnable(new Runnable() {\n                public void run () {\n                    endSession();\n                }\n            });\n        }\n    }", "public static void removeBreakpoints(final Set<BreakpointAddress> addresses,final BreakpointManager manager){\n  Preconditions.checkNotNull(manager,\"IE01708: Manager argument can not be null\");\n  Preconditions.checkNotNull(addresses,\"IE01709: Address argument can not be null\");\n  final Set<BreakpointAddress> addressesToRemoveFromManager=new HashSet<BreakpointAddress>();\n  final Set<BreakpointAddress> addressesToRemoveFromDebugger=new HashSet<BreakpointAddress>();\n  for (  final BreakpointAddress address : addresses) {\n    final BreakpointStatus status=manager.getBreakpointStatus(address,BreakpointType.REGULAR);\n    if ((status == BreakpointStatus.BREAKPOINT_DISABLED) || (status == BreakpointStatus.BREAKPOINT_INACTIVE)) {\n      addressesToRemoveFromManager.add(address);\n    }\n    if (status != BreakpointStatus.BREAKPOINT_DELETING) {\n      addressesToRemoveFromDebugger.add(address);\n    }\n  }\n  if (addressesToRemoveFromManager.size() != 0) {\n    manager.removeBreakpoints(BreakpointType.REGULAR,addressesToRemoveFromManager);\n  }\n  if (addressesToRemoveFromDebugger.size() != 0) {\n    manager.setBreakpointStatus(addressesToRemoveFromDebugger,BreakpointType.REGULAR,BreakpointStatus.BREAKPOINT_DELETING);\n  }\n}\n", "protected void runTLCPreLoop ( ) { }", "\tprivate URI resolve(URI uri) throws URISyntaxException {\n\t\t//if (DEBUG) {\n\t\t//\tdebug(\"resolve uri: \" + uri);\n\t\t//}\n\t\tif (uri.getScheme().equals(\"v\")) {\n\t\t\treturn resolve(uri.getPath());\n\t\t} else {\n\t\t\treturn uri;\n\t\t}\n\t}\n", "protected QName pushQName(String localName,String qualifiedName,Namespace namespace,String prefix){\n  if ((prefix == null) || (prefix.length() == 0)) {\n    this.defaultNamespace=null;\n  }\n  return createQName(localName,qualifiedName,namespace);\n}\n", "\tpublic Long getPersonnelCostsTotal() {\n\t\treturn getPersonnelCostsRTDInnovation() + getPersonnelCostsDemonstration()\n\t\t        + getPersonnelCostsManagement() + getPersonnelCostsOthers();\n\t}\n", "public final void start() throws Exception {\n\t\tsynchronized (lock) {\n\t\t\tPreconditions.checkState(state == State.CREATED, \"The RestServerEndpoint cannot be restarted.\");\n\n\t\t\tlog.info(\"Starting rest endpoint.\");\n\n\t\t\tfinal Router router = new Router();\n\t\t\tfinal CompletableFuture<String> restAddressFuture = new CompletableFuture<>();\n\n\t\t\thandlers = initializeHandlers(restAddressFuture);\n\n\t\t\t/* sort the handlers such that they are ordered the following:\n\t\t\t * /jobs\n\t\t\t * /jobs/overview\n\t\t\t * /jobs/:jobid\n\t\t\t * /jobs/:jobid/config\n\t\t\t * /:*\n\t\t\t */\n\t\t\tCollections.sort(\n\t\t\t\thandlers,\n\t\t\t\tRestHandlerUrlComparator.INSTANCE);\n\n\t\t\thandlers.forEach(handler -> {\n\t\t\t\tregisterHandler(router, handler, log);\n\t\t\t});\n\n\t\t\tChannelInitializer<SocketChannel> initializer = new ChannelInitializer<SocketChannel>() {\n\n\t\t\t\t@Override\n\t\t\t\tprotected void initChannel(SocketChannel ch) {\n\t\t\t\t\tRouterHandler handler = new RouterHandler(router, responseHeaders);\n\n\t\t\t\t\t// SSL should be the first handler in the pipeline\n\t\t\t\t\tif (isHttpsEnabled()) {\n\t\t\t\t\t\tch.pipeline().addLast(\"ssl\",\n\t\t\t\t\t\t\tnew RedirectingSslHandler(restAddress, restAddressFuture, sslHandlerFactory));\n\t\t\t\t\t}\n\n\t\t\t\t\tch.pipeline()\n\t\t\t\t\t\t.addLast(new HttpServerCodec())\n\t\t\t\t\t\t.addLast(new FileUploadHandler(uploadDir))\n\t\t\t\t\t\t.addLast(new FlinkHttpObjectAggregator(maxContentLength, responseHeaders))\n\t\t\t\t\t\t.addLast(new ChunkedWriteHandler())\n\t\t\t\t\t\t.addLast(handler.getName(), handler)\n\t\t\t\t\t\t.addLast(new PipelineErrorHandler(log, responseHeaders));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tNioEventLoopGroup bossGroup = new NioEventLoopGroup(1, new ExecutorThreadFactory(\"flink-rest-server-netty-boss\"));\n\t\t\tNioEventLoopGroup workerGroup = new NioEventLoopGroup(0, new ExecutorThreadFactory(\"flink-rest-server-netty-worker\"));\n\n\t\t\tbootstrap = new ServerBootstrap();\n\t\t\tbootstrap\n\t\t\t\t.group(bossGroup, workerGroup)\n\t\t\t\t.channel(NioServerSocketChannel.class)\n\t\t\t\t.childHandler(initializer);\n\n\t\t\tIterator<Integer> portsIterator;\n\t\t\ttry {\n\t\t\t\tportsIterator = NetUtils.getPortRangeFromString(restBindPortRange);\n\t\t\t} catch (IllegalConfigurationException e) {\n\t\t\t\tthrow e;\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new IllegalArgumentException(\"Invalid port range definition: \" + restBindPortRange);\n\t\t\t}\n\n\t\t\tint chosenPort = 0;\n\t\t\twhile (portsIterator.hasNext()) {\n\t\t\t\ttry {\n\t\t\t\t\tchosenPort = portsIterator.next();\n\t\t\t\t\tfinal ChannelFuture channel;\n\t\t\t\t\tif (restBindAddress == null) {\n\t\t\t\t\t\tchannel = bootstrap.bind(chosenPort);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchannel = bootstrap.bind(restBindAddress, chosenPort);\n\t\t\t\t\t}\n\t\t\t\t\tserverChannel = channel.syncUninterruptibly().channel();\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (final Exception e) {\n\t\t\t\t\t// continue if the exception is due to the port being in use, fail early otherwise\n\t\t\t\t\tif (!(e instanceof org.jboss.netty.channel.ChannelException || e instanceof java.net.BindException)) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (serverChannel == null) {\n\t\t\t\tthrow new BindException(\"Could not start rest endpoint on any port in port range \" + restBindPortRange);\n\t\t\t}\n\n\t\t\tlog.debug(\"Binding rest endpoint to {}:{}.\", restBindAddress, chosenPort);\n\n\t\t\tfinal InetSocketAddress bindAddress = (InetSocketAddress) serverChannel.localAddress();\n\t\t\tfinal String advertisedAddress;\n\t\t\tif (bindAddress.getAddress().isAnyLocalAddress()) {\n\t\t\t\tadvertisedAddress = this.restAddress;\n\t\t\t} else {\n\t\t\t\tadvertisedAddress = bindAddress.getAddress().getHostAddress();\n\t\t\t}\n\t\t\tfinal int port = bindAddress.getPort();\n\n\t\t\tlog.info(\"Rest endpoint listening at {}:{}\", advertisedAddress, port);\n\n\t\t\trestBaseUrl = new URL(determineProtocol(), advertisedAddress, port, \"\").toString();\n\n\t\t\trestAddressFuture.complete(restBaseUrl);\n\n\t\t\tstate = State.RUNNING;\n\n\t\t\tstartInternal();\n\t\t}\n\t}", "public static double cuCabs(cuDoubleComplex x){\n  double p=cuCreal(x);\n  double q=cuCimag(x);\n  double r;\n  if (p == 0)   return q;\n  if (q == 0)   return p;\n  p=Math.sqrt(p);\n  q=Math.sqrt(q);\n  if (p < q) {\n    r=p;\n    p=q;\n    q=r;\n  }\n  r=q / p;\n  re", "@Override\r\n  public Result<MZXMLIndexElement> buildIndex(final IndexBuilder.Info info) throws Exception {\r\n    Result<MZXMLIndexElement> result = new IndexBuilder.Result<>(info);\r\n\r\n    int numOpeningScanTagsFound = 0;\r\n    vars.reset();\r\n\r\n    XMLStreamReaderImpl reader = (pool == null) ? new XMLStreamReaderImpl() : pool.borrowObject();\r\n    try {\r\n      reader.setInput(info.is, StandardCharsets.UTF_8.name());\r\n      LogHelper.setJavolutionLogLevelFatal();\r\n\r\n      final XMLStreamReaderImpl.LocationImpl location = reader.getLocation();\r\n      int eventType = XMLStreamConstants.END_DOCUMENT;\r\n      CharArray localName, attr;\r\n      Attributes attrs;\r\n      do {\r\n        // Read the next XML element\r\n        try {\r\n          eventType = reader.next();\r\n        } catch (XMLStreamException e) {\r\n\r\n          if (e instanceof XMLUnexpectedEndTagException) {\r\n            // it's ok to have unexpected closing tags\r\n            eventType = reader.getEventType();\r\n          } else if (e instanceof XMLUnexpectedEndOfDocumentException) {\r\n            // as we're reading arbitrary chunks of file, we will almost always finish parsing by hitting this condition\r\n            break;\r\n          } else {\r\n            throw new FileParsingException(e);\r\n          }\r\n        }\r\n\r\n        // Process the read event\r\n        switch (eventType) {\r\n\r\n          case XMLStreamConstants.START_ELEMENT:\r\n            localName = reader.getLocalName();\r\n            attrs = reader.getAttributes();\r\n\r\n            if (localName.contentEquals(MZXMLMultiSpectraParser.TAG.SCAN.name)) {\r\n              if (vars.offsetLo != null) {\r\n                // this means we've encountered nested Spectrum tags\r\n                long lastStartTagPos = location.getLastStartTagPos();\r\n                vars.length = (int) (vars.offsetLo - lastStartTagPos);\r\n                addAndFlush(result, info.offsetInFile);\r\n              }\r\n\r\n              //tagScanStart(reader);\r\n              vars.offsetLo = location.getLastStartTagPos();\r\n              try {\r\n                vars.scanNumRaw = attrs.getValue(MZXMLMultiSpectraParser.ATTR.SCAN_NUM.name)\r\n                    .toInt();\r\n              } catch (NumberFormatException e) {\r\n                throw new FileParsingException(\"Malformed scan number while building index\", e);\r\n              }\r\n\r\n            }\r\n            break;\r\n\r\n          case XMLStreamConstants.CHARACTERS:\r\n            break;\r\n\r\n          case XMLStreamConstants.END_ELEMENT:\r\n            localName = reader.getLocalName();\r\n\r\n            if (localName.contentEquals(MZXMLMultiSpectraParser.TAG.SCAN.name)) {\r\n              vars.offsetHi = location.getTotalCharsRead();\r\n              addAndFlush(result, info.offsetInFile);\r\n            }\r\n\r\n            break;\r\n        }\r\n      } while (eventType != XMLStreamConstants.END_DOCUMENT);\r\n\r\n    } finally {\r\n      addAndFlush(result, info.offsetInFile);\r\n\r\n      // we need to return the reaer to the pool, if we borrowed it from there\r\n      if (pool != null && reader != null) {\r\n        pool.returnObject(reader);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }", "\tprivate boolean isThisPrefix(char[] string) {\n\t\tif (string == null || string.length < 5)\n\t\t\treturn false;\n\t\treturn string[0] == 't' && string[1] == 'h' && string[2] == 'i' && string[3] == 's' && string[4] == '.';\n\t}\n", "    public void setValid(boolean valid) {\n        Iterator valIt;\n        \n        valIt = validators.iterator();\n        while (valIt.hasNext())\n            ((Validator) valIt.next()).setValid(valid);\n    }\n", "public OverlayPanel ( SettingsManager settingsManager , ChannelModel channelModel ) { mSettingsManager = settingsManager ; if ( mSettingsManager != null ) { mSettingsManager . addListener ( this ) ; } mChannelModel = channelModel ; if ( mChannelModel != null ) { mChannelModel . addListener ( this ) ; } addComponentListener ( mLabelSizeMonitor ) ; setOpaque ( BOOL_ ) ; setColors ( ) ; }", "    public void addMinutes(int minutes) {\n        super.addField(DurationFieldType.minutes(), minutes);\n    }\n", "private static void verifyCodewordCount ( int [ ] codewords , int numECCodewords ) throws FormatException { if ( codewords . length < NUM_ ) { throw FormatException . getFormatInstance ( ) ; } int numberOfCodewords = codewords [ NUM_ ] ; if ( numberOfCode", "public static String toJavaDateTimeFormat(String strftime) {\n    if (!StringUtils.contains(strftime, '%')) {\n      return replaceL(strftime);\n    }\n\n    StringBuilder result = new StringBuilder();\n\n    for (int i = 0; i < strftime.length(); i++) {\n      char c = strftime.charAt(i);\n      if (c == '%') {\n        c = strftime.charAt(++i);\n        boolean stripLeadingZero = false;\n\n        if (c == '-') {\n          stripLeadingZero = true;\n          c = strftime.charAt(++i);\n        }\n\n        if (stripLeadingZero) {\n          result.append(CONVERSIONS[c].substring(1));\n        } else {\n          result.append(CONVERSIONS[c]);\n        }\n      } else if (Character.isLetter(c)) {\n        result.append(\"'\");\n        while (Character.isLetter(c)) {\n          result.append(c);\n          if (++i < strftime.length()) {\n            c = strftime.charAt(i);\n          } else {\n            c = 0;\n          }\n        }\n        result.append(\"'\");\n        --i; // re-consume last char\n      } else {\n        result.append(c);\n      }\n    }\n\n    return replaceL(result.toString());\n  }", "public static Vector1d convert(Tuple1d<?> tuple) {\n\t\tif (tuple instanceof Vector1d) {\n\t\t\treturn (Vector1d) tuple;\n\t\t}\n\t\treturn new Vector1d(tuple.getSegment(), tuple.getX(), tuple.getY());\n\t}", "void removeListener ( ICallResolverTargetListener listener ) ;", "private void recursiveDelete(final File f){\n  if (f.isDirectory()) {\n    final File[] children=f.listFiles();\n    for (int i=0; i < children.length; i++) {\n      recursiveDelete(children[i]);\n    }\n  }\n  if (log.isInfoEnabled())   log.info(\"Removing: \" + f);\n  if (f.exists() && !f.delete()) {\n    log.warn(\"Could not remove: \" + f);\n  }\n}\n", "private void addSubComponents ( ) { menuButton . setName ( STR_ ) ; iconButton . setName ( STR_ ) ; maxButton . setName ( STR_ ) ; closeButton . setName ( STR_ ) ; add ( menuButton ) ; add ( iconButton ) ; add ( maxButton ) ; add ( closeButton ) ; }", "public CmsPublishData getPublishData(\n        CmsObject cms,\n        HashMap<String, String> params,\n        String workflowId,\n        String projectParam,\n        List<String> pathList,\n        String closeLink,\n        boolean confirm)\n    throws Exception {\n\n        CmsPublishData result;\n        boolean canOverrideWorkflow = true;\n        Map<String, CmsWorkflow> workflows = OpenCms.getWorkflowManager().getWorkflows(cms);\n        if (workflows.isEmpty()) {\n            throw new Exception(\"No workflow available for the current user\");\n        }\n        if (CmsStringUtil.isEmptyOrWhitespaceOnly(workflowId) || !workflows.containsKey(workflowId)) {\n            workflowId = getLastWorkflowForUser();\n            if (CmsStringUtil.isEmptyOrWhitespaceOnly(workflowId) || !workflows.containsKey(workflowId)) {\n                workflowId = workflows.values().iterator().next().getId();\n            }\n        } else {\n            canOverrideWorkflow = false;\n        }\n        setLastWorkflowForUser(workflowId);\n\n        // need to put this into params here so that the virtual project for direct publishing is included in the result of getManageableProjects()\n        if (!pathList.isEmpty()) {\n            params.put(CmsPublishOptions.PARAM_FILES, CmsStringUtil.listAsString(pathList, \"|\"));\n        }\n        boolean useCurrentPageAsDefault = params.containsKey(CmsPublishOptions.PARAM_START_WITH_CURRENT_PAGE);\n        CmsPublishOptions options = getCachedOptions();\n        List<CmsProjectBean> projects = OpenCms.getWorkflowManager().getManageableProjects(cms, params);\n        Set<CmsUUID> availableProjectIds = Sets.newHashSet();\n        for (CmsProjectBean projectBean : projects) {\n            availableProjectIds.add(projectBean.getId());\n        }\n        CmsUUID defaultProjectId = CmsUUID.getNullUUID();\n        if (useCurrentPageAsDefault && availableProjectIds.contains(CmsCurrentPageProject.ID)) {\n            defaultProjectId = CmsCurrentPageProject.ID;\n        }\n\n        boolean foundProject = false;\n        CmsUUID selectedProject = null;\n        if (!pathList.isEmpty()) {\n            params.put(CmsPublishOptions.PARAM_ENABLE_INCLUDE_CONTENTS, Boolean.TRUE.toString());\n            params.put(CmsPublishOptions.PARAM_INCLUDE_CONTENTS, Boolean.TRUE.toString());\n            selectedProject = CmsDirectPublishProject.ID;\n            foundProject = true;\n        } else {\n            if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(projectParam) && CmsUUID.isValidUUID(projectParam)) {\n                selectedProject = new CmsUUID(projectParam);\n                // check if the selected project is a manageable project\n                for (CmsProjectBean project : projects) {\n                    if (selectedProject.equals(project.getId())) {\n                        foundProject = true;\n                        if (project.isWorkflowProject()) {\n                            canOverrideWorkflow = false;\n                            workflowId = OpenCms.getWorkflowManager().getWorkflowForWorkflowProject(selectedProject);\n                        }\n                        break;\n                    }\n                }\n            }\n            if (!foundProject) {\n                selectedProject = options.getProjectId();\n                if (selectedProject == null) {\n                    selectedProject = defaultProjectId;\n                    foundProject = true;\n                } else {\n                    // check if the selected project is a manageable project\n                    for (CmsProjectBean project : projects) {\n                        if (selectedProject.equals(project.getId())) {\n                            foundProject = true;\n                            if (project.isWorkflowProject()) {\n                                canOverrideWorkflow = false;\n                                workflowId = OpenCms.getWorkflowManager().getWorkflowForWorkflowProject(\n                                    selectedProject);\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        if (foundProject) {\n            options.setProjectId(selectedProject);\n        } else {\n            options.setProjectId(CmsUUID.getNullUUID());\n        }\n\n        options.setParameters(params);\n        result = new CmsPublishData(\n            options,\n            projects,\n            getResourceGroups(workflows.get(workflowId), options, canOverrideWorkflow),\n            workflows,\n            workflowId);\n        result.setCloseLink(closeLink);\n        result.setShowConfirmation(confirm);\n        return result;\n    }", "public static ActionDecision parseActionDecision(Node actionDecisionNode) throws PolicyException {\n  ActionDecision actionDecision=null;\n  Set nodeSet=XMLUtils.getChildNodes(actionDecisionNode,PolicyUtils.ATTRIBUTE_VALUE_PAIR);\n  if ((nodeSet == null) || (nodeSet.isEmpty())) {\n    debug.error(\"parseActionDecision: missing element \" + PolicyUtils.ATTRIBUTE_VALUE_PAIR);\n    return null;\n  }\n  Iterator nodes=nodeSet.iterator();\n  Node node=(Node)nodes.next();\n  String actionName=PolicyUtils.getAttributeName(node);\n  Set actionValues=PolicyUtils.getAttributeValues(node);\n  actionDecision=new ActionDecision(actionName,actionValues);\n  long timeToLive=Long.MAX_VALUE;\n  String ttlString=XMLUtils.getNodeAttributeValue(actionDecisionNode,ActionDecision.TIME_TO_LIVE);\n  if (ttlString != null) {\n    try {\n      timeToLive=Long.parseLong(ttlString);\n      if (timeToLive != Long.MAX_VALUE) {\n        timeToLive+=clientClockSkew;\n      }\n    }\n catch (    Exception e) {\n      debug.error(\"Error while parsing timeToLive in \" + \" ActionDecision:\" + ttlString);\n      Object[] args={new Long(timeToLive)};\n      throw new PolicyException(ResBundleUtils.rbName,\"invalid_time_to_live\",args,e);\n    }\n  }\n  actionDecision.setTimeToLive(timeToLive);\n  Map advices=new HashMap();\n  nodeSet=XMLUtils.getChildNodes(actionDecisionNode,ActionDecision.ADVICES);\n  if (nodeSet != null) {\n    nodes=nodeSet.iterator();\n    node=(Node)nodes.next();\n    nodeSet=XMLUtils.getChildNodes(node,PolicyUtils.ATTRIBUTE_VALUE_PAIR);\n    if (nodeSet != null) {\n      nodes=nodeSet.iterator();\n      while (nodes.hasNext()) {\n        node=(Node)nodes.next();\n        String adviceName=PolicyUtils.getAttributeName(node);\n        if (adviceName != null) {\n          Set adviceMessages=PolicyUtils.getAttributeValues(node);\n          advices.put(adviceName,adviceMessages);\n        }\n      }\n    }\n  }\n  actionDecision.setAdvices(advices);\n  return actionDecision;\n}\n", "@Override\n    public final void onChange(ImporterChannelAssignment assignment)\n    {\n        if (m_stopping && !assignment.getAdded().isEmpty()) {\n            String msg = \"Received an a channel assignment when the importer is stopping: \" + assignment;\n            s_logger.warn(msg);\n            throw new IllegalStateException(msg);\n        }\n\n        if (m_stopping) {\n            return;\n        }\n\n        ImmutableMap<URI, AbstractImporter> oldReference = m_importers.get();\n        Map<URI, AbstractImporter> importersMap = Maps.newHashMap();\n        importersMap.putAll(oldReference);\n        List<AbstractImporter> toStop = new ArrayList<>();\n        List<String> missingRemovedURLs = new ArrayList<>();\n        List<String> missingAddedURLs = new ArrayList<>();\n        for (URI removed: assignment.getRemoved()) {\n            importersMap.remove(removed);\n            if (m_configs.containsKey(removed)) {\n               AbstractImporter importer = oldReference.get(removed);\n               if (importer != null) {\n                    toStop.add(importer);\n               }\n            } else {\n                missingRemovedURLs.add(removed.toString());\n            }\n        }\n\n        List<AbstractImporter> newImporters = new ArrayList<>();\n        for (final URI added: assignment.getAdded()) {\n            if (m_configs.containsKey(added)) {\n                //sanity check to avoid duplicated assignments\n                if (importersMap.containsKey(added)) {\n                    continue;\n                }\n                AbstractImporter importer = m_factory.createImporter(m_configs.get(added));\n                newImporters.add(importer);\n                importersMap.put(added, importer);\n            } else {\n                missingAddedURLs.add(added.toString());\n            }\n        }\n\n        if (!missingRemovedURLs.isEmpty() || !missingAddedURLs.isEmpty()) {\n            s_logger.error(\"The source for Import has changed its configuration. Removed importer URL(s): (\" +\n                    Joiner.on(\", \").join(missingRemovedURLs) + \"), added importer URL(s): (\" +\n                    Joiner.on(\", \").join(missingAddedURLs) + \"). Pause and Resume the database to refresh the importer.\");\n        }\n\n        ImmutableMap<URI, AbstractImporter> newReference = ImmutableMap.copyOf(importersMap);\n        boolean success = m_importers.compareAndSet(oldReference, newReference);\n        if (!m_stopping && success) { // Could fail if stop was called after we entered inside this method\n            stopImporters(toStop);\n            startImporters(newImporters);\n        }\n    }", "protected void addIsDerivedPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Associa", "public void reset(){\n  lastMtd=null;\n  map.clear();\n  putCnt.set(0);\n  putAllCnt.set(0);\n  rmvCnt.set(0);\n  rmvAllCnt.set(0);\n  ts=System.currentTimeMillis();\n}\n", "\tpublic void paintIcon(Component c, Graphics g, int x, int y) {\n\t\tif (orientation == Orientation.HORIZONTAL) {\n\t\t\tfor (Icon icon : icons) {\n\t\t\t\ticon.paintIcon(c, g, x, y);\n\t\t\t\tx += icon.getIconWidth();\n\t\t\t}\n\t\t} else {\n\t\t\tfor (Icon icon : icons) {\n\t\t\t\ticon.paintIcon(c, g, x, y);\n\t\t\t\ty += icon.getIconHeight();\n\t\t\t}\n\t\t}\n\t}\n", "public MusicElement getElementAtStreamPosition(int offset) {\r\n\t\tIterator it = m_voices.iterator();\r\n\t\tCharStreamPosition pos;\r\n\t\twhile (it.hasNext()) {\r\n\t\t\tVoice v = (Voice) it.next();\r\n\t\t\tint size = v.size();\r\n\t\t\tMusicElement current = null;\r\n\t\t\tfor (int i = 0; i < size; i++) {\r\n\t\t\t\tcurrent = (MusicElement) v.elementAt(i);\r\n\t\t\t\tif (current != null) {\r\n\t\t\t\t\tpos = current.getCharStreamPosition();\r\n\t\t\t\t\tif (pos != null) {\r\n\t\t\t\t\t\tif ((pos.getStartIndex() <= offset)\r\n\t\t\t\t\t\t\t\t&& (pos.getEndIndex() > offset))\r\n\t\t\t\t\t\t\treturn current;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}", "public String shortestMatch(String input){\n  TrieNode node=root;\n  for (int i=0; i < input.length(); i++) {\n    node=node.getChild(input.charAt(i));\n    if (node == null)     return null;\n    if (node.isTerminal())     return input.substring(0,i + 1);\n  }\n  return null;\n}\n", "public Epic createEpic(Object groupIdOrPath, Epic epic) throws GitLabApiException {\n        Form formData = new GitLabApiForm()\n                .withParam(\"title\", epic.getTitle(), true)\n                .withParam(\"labels\", epic.getLabels())\n                .withParam(\"description\", epic.getDescription())\n                .withParam(\"start_date\", epic.getStartDate())\n                .withParam(\"end_date\", epic.getEndDate());\n        Response response = post(Response.Status.CREATED, formData.asMap(),\n                \"groups\", getGroupIdOrPath(groupIdOrPath), \"epics\");\n        return (response.readEntity(Epic.class));\n    }", "    private void saveInExClude() throws XMLNotValidException {\n\tsaveAttributeValue();\n    }\n", "    public void addNormConditionChunk() {\n        if (!socialconstructfound) {\n            normcondition.setConditionChunk(conditionChunk);\n        }\n    }\n", "    public void close() throws IOException {\n        buf = null;\n        if (!complete) {\n            is.close();\n            is = null;\n        }\n    }\n", "private double minorAxis(){\n  return Math.min(height(),width());\n}\n", "public static int readSwappedUnsignedShort ( InputStream input ) throws IOException { int value1 = read ( input ) ; int value2 = read ( input ) ; return ( ( ( value1 & NUM_ ) << NUM_ ) + ( ( value2 & NUM_ ) << NUM_ ) ) ; }", "protected void generateOpenNetworkConfig ( ) { if ( security != SECURITY_NONE ) throw new IllegalStateException ( ) ; if ( mConfig != null ) return ; mConfig = new WifiConfiguration ( ) ; mConfig . SSID = AccessPoint . convertToQuotedString ( ssid ) ; mConfig . allowedKeyManagement . set ( KeyMgmt . NONE ) ; }", "    protected Blob serializableToBlob(Object value) {\n        return value != null ? new Blob(ByteUtil.toByteArray(value)) : null;\n    }\n", "private void exampleMethodReferences ( ) { Greeting greetingLambdaReference = null ; Greeting greetingLambdaReference2 = null ; Runnable r = null ; r = null ; }", "public static void addSignatureAlgorithmsExtension(Hashtable extensions,Vector supportedSignatureAlgorithms) throws IOException {\n  extensions.put(EXT_signature_algorithms,createSignatureAlgorithmsExtension(supportedSignatureAlgorithms));\n}\n", "protected void writeMessageOut(ModbusMessage msg) throws ModbusIOException {\n  try {\n    int len;\nsynchronized (byteOutputStream) {\n      clearInput();\n      byteOutputStream.reset();\n      msg.setHeadless();\n      msg.writeTo(byteOutputStream);\n      len=byteOutputStream.size();\n      int[] crc=ModbusUtil.calculateCRC(byteOutputStream.getBuffer(),0,len);\n      byteOutputStream.writeByte(crc[0]);\n      byteOutputStream.writeByte(crc[1]);\n      writeBytes(byteOutputStream.getBuffer(),byteOutputStream.size());\n      logger.debug(\"Sent: {}\",ModbusUtil.toHex(byteOutputStream.getBuffer(),0,byteOutputStream.size()));\n      if (echo) {\n        readEcho(len);\n      }\n      lastRequest=new byte[len];\n      System.arraycopy(byteOutputStream.getBuffer(),0,lastRequest,0,len);\n    }\n  }\n catch (  IOException ex) {\n    throw new ModbusIOException(\"I/O failed to write\");\n  }\n}\n", "public static String redecodeUriComponent(String input) {\n\n        if (input == null) {\n            return input;\n        }\n        return new String(\n            changeEncoding(input.getBytes(), ENCODING_UTF_8, OpenCms.getSystemInfo().getDefaultEncoding()));\n    }", "public GroovyFilter ( DefaultStyledDocument doc ) { super ( doc ) ; init ( ) ; }", "public String serialize ( Object obj ) throws ApiException { try { if ( obj != null ) return JsonUtil . getJsonMapper ( ) . writeValueAsString ( obj ) ; else return null ; } catch ( Exception e ) { throw new ApiException ( NUM_ , e . getMessage ( ) ) ; } ", "public MockInjectionStrategy thenTry(MockInjectionStrategy strategy) {\n        if(nextStrategy != null) {\n            nextStrategy.thenTry(strategy);\n        } else {\n            nextStrategy = strategy;\n        }\n        return strategy;\n    }", "\tprotected void setControllerHook(Controller controller) {\n\t\tif (true) {\n\t\t\tsetOperational(false); // disable because setRate causes problems\n\t\t\treturn;\n\t\t}\n\t\tfloat saveRate = controller.getRate();\n\t\tfloat rate = controller.setRate(-1.0f);\n\t\tsetOperational(rate < 0.0f);\n\t\tgetControlComponent().setEnabled(isOperational());\n\t\tgetController().setRate(saveRate);\n\t}\n", "    public PtzInterface (PlayerClient pc, short indexOfDevice) {\n        super(pc);\n        device    = PLAYER_PTZ_CODE;\n        index     = indexOfDevice;\n    }\n", "\t\tprotected void fileCheckDelay() {\n\t\t\t// final Thread thread = Thread.currentThread();\n\t\t\tlong targetTime = System.currentTimeMillis() + delay;\n\t\t\t// long curTime;\n\t\t\twhile (targetTime > System.currentTimeMillis()) {\n\t\t\t\tif (quit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(300);\n\t\t\t\t} // 1/3-second delta for quit check\n\t\t\t\tcatch (InterruptedException e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n", "\tpublic SecIdentity identity(){\n\t\tthrow new RuntimeException(\"Stub\");\n\t}\n", "public void populateEditText ( String match ) { toggleSearch ( ) ; String text = match . trim ( ) ; setSearchString ( text ) ; search ( text ) ; }", "public void next ( int frames , boolean broadcast ) throws IOException { if ( mInputStream != null ) { byte [ ] buffer = new byte [ mBytesPerFrame * frames ] ; int samplesRead = mInputStream . read ( buffer ) ; mFrameCounter += samplesRead ; broadcast ( m", "public final void setGoods(final InvItem pGoods) {\n    this.goods = pGoods;\n    if (this.itsId == null) {\n      this.itsId = new GoodsAdviseCategoriesId();\n    }\n    this.itsId.setGoods(this.goods);\n  }", "    public void pauseSpeaker() {\n\n        setSpeakerState(this.STATE_PAUSE);\n\n        sourceLine.stop();\n\n    }\n", "\tpublic boolean equals(Object o) {\n\t\tif (this == o)\n\t\t\treturn true;\n\t\telse if (o instanceof AttrMeasure) {\n\t\t\tAttrMeasure other = (AttrMeasure) o;\n\t\t\treturn metric.equals(other.metric) && threshold == other.threshold\n\t\t\t\t\t&& statistic == other.statistic\n\t\t\t\t\t&& statThreshold == other.statThreshold;\n\t\t} else\n\t\t\treturn false;\n\t}\n", "@Override\n  protected HtmlToken produce() {\n    HtmlToken token = readToken();\n    if (token == null) { return null; }\n\n    switch (token.type) {\n\n      // Keep track of whether we're inside a tag or not.\n      case TAGBEGIN:\n        state = State.IN_TAG;\n        break;\n      case TAGEND:\n        if (state == State.SAW_EQ && HtmlTokenType.TAGEND == token.type) {\n          // Distinguish <input type=checkbox checked=> from\n          // <input type=checkbox checked>\n          pushbackToken(token);\n          state = State.IN_TAG;\n          return HtmlToken.instance(\n              token.start, token.start, HtmlTokenType.ATTRVALUE);\n        }\n\n        state = State.OUTSIDE_TAG;\n        break;\n\n      // Drop ignorable tokens by zeroing out the one received and recursing\n      case IGNORABLE:\n        return produce();\n\n      // collapse adjacent text nodes if we're outside a tag, or otherwise,\n      // Recognize attribute names and values.\n      default:\n        switch (state) {\n          case OUTSIDE_TAG:\n            if (HtmlTokenType.TEXT == token.type\n                || HtmlTokenType.UNESCAPED == token.type) {\n              token = collapseSubsequent(token);\n            }\n            break;\n          case IN_TAG:\n            if (HtmlTokenType.TEXT == token.type\n                && !token.tokenInContextMatches(input, \"=\")) {\n              // Reclassify as attribute name\n              token = HtmlInputSplitter.reclassify(\n                  token, HtmlTokenType.ATTRNAME);\n              state = State.SAW_NAME;\n            }\n            break;\n          case SAW_NAME:\n            if (HtmlTokenType.TEXT == token.type) {\n              if (token.tokenInContextMatches(input, \"=\")) {\n                state = State.SAW_EQ;\n                // Skip the '=' token\n                return produce();\n              } else {\n                // Reclassify as attribute name\n                token = HtmlInputSplitter.reclassify(\n                    token, HtmlTokenType.ATTRNAME);\n              }\n            } else {\n              state = State.IN_TAG;\n            }\n            break;\n          case SAW_EQ:\n            if (HtmlTokenType.TEXT == token.type\n                || HtmlTokenType.QSTRING == token.type) {\n              if (HtmlTokenType.TEXT == token.type) {\n                // Collapse adjacent text nodes to properly handle\n                //   <a onclick=this.clicked=true>\n                //   <a title=foo bar>\n                token = collapseAttributeName(token);\n              }\n              // Reclassify as value\n              token = HtmlInputSplitter.reclassify(\n                  token, HtmlTokenType.ATTRVALUE);\n              state = State.IN_TAG;\n            }\n            break;\n        }\n        break;\n    }\n\n    return token;\n  }", "\tpublic void setDate(int parameterIndex, Date value, Calendar cal) throws SQLException {\n\t\tcheckParameters();\n\t\tparameters[parameterIndex-1] = new Parameter(Types.DATE, value);\n\t}\n", "private void sortChildDrawingOrder ( ) { if ( drawingOrderedChildren == null ) { drawingOrderedChildren = new ArrayList < > ( ) ; } else { drawingOrderedChildren . clear ( ) ; } final int childCount = getChildCount ( ) ; for ( int i = NUM_ ; i < childCoun", "public static ValueGetterSpacePredicate < ServerEntry > propertyAnd ( String propertyName , ISpacePredicate leftPredicate , ISpacePredicate rightPredicate ) { return property ( propertyName , and ( leftPredicate , rightPredicate ) ) ; }", "public boolean freePage(int pageNum){\n  Page p;\n  try {\n    p=fetchPage(pageNum);\n  }\n catch (  PageException e) {\n    return false;\n  }\n  return freePage(p);\n}\n", "public abstract void registerSourceSinkLocations ( ) throws DataflowAnalysisException ;", "    private MimeMessage getMessage(Node node) throws MessagingException, RepositoryException, IOException {\n        try {\n            node = node.getNode(\"jcr:content\");\n        } catch (PathNotFoundException e) {\n            node = node.getProperty(\"jcr:", "public static Map<String,String> extractHiveTypeMapping(JobConf jobConf){\n  Map<String,String> map=new HashMap<>();\n  String columnsString=jobConf.get(serdeConstants.LIST_COLUMNS);\n  if (columnsString == null || columnsString.isEmpty()) {\n    LOG.warn(\"List of columns was not provided in job configuration\");\n    return map;\n  }\n  String[] columns=columnsString.split(\",\");\n  String[] types=splitStructs(jobConf.get(serdeConstants.LIST_COLUMN_TYPES),',');\n  if (types == null) {\n    LOG.warn(\"Invalid input for LIST_COLUMN_TYPES\");\n    return map;\n  }\n  if (columns.length != types.length) {\n    LOG.warn(\"Expected \" + columns.length + \" types but found \"+ types.length);\n    return map;\n  }\n  for (int i=0; i < columns.length; i++) {\n    map.put(columns[i],types[i]);\n  }\n  LOG.debug(\"Hive columns to types mapping: \" + map);\n  return map;\n}\n", "protected String colorToRGB(final Color color){\n  return String.format(\"#%02x%02x%02x\",color.getRed(),color.getGreen(),color.getBlue());\n}\n", "public Future < Pipeline > shutdownAfterHeartbeat ( String name ) throws InterruptedException , ReplicatorException { ArrayList < Future < ReplDBMSHeader > > taskShutdownFutures = new ArrayList < Future < ReplDBMSHeader > > ( ) ; for ( int i = NUM_ ; i < stages . size ( ) ; i ++ ) { taskShutdownFutures . add ( stages . get ( i ) . watchForProcessedHeartbeat ( name , BOOL_ ) ) ; } return scheduleWait ( STR_ + name , taskShutdownFutures ) ; }", "private void processReport(int id,long seqno,long time,D datum){\n  ThreadPosition tp=array.get(id);\n  if (tp == null) {\n    tp=new ThreadPosition();\n    tp.id=id;\n    tp.seqno=seqno;\n    tp.time=time;\n    tp.reportTime=System.currentTimeMillis();\n    tp.datum=datum;\n    array.put(id,tp);\n    if (head == null) {\n      head=tp;\n      tail=tp;\n    }\n else {\n      ThreadPosition nextTp=head;\n      while (nextTp != null) {\n        if (nextTp.seqno > tp.seqno) {\n          if (nextTp.before != null)           nextTp.before.after=tp;\n          tp.before=nextTp.before;\n          tp.after=nextTp;\n          nextTp.before=tp;\n          break;\n        }\n        nextTp=nextTp.after;\n      }\n      if (nextTp == null) {\n        tail.after=tp;\n        tp.before=tail;\n        tail=tp;\n      }\n      if (tp.before == null)       head=tp;\n    }\n  }\n else {\n    if (tp.seqno > seqno)     bug(\"Thread reporting position moved backwards: task=\" + id + \" previous seqno=\"+ tp.seqno+ \" new seqno=\"+ seqno);\n    tp.seqno=seqno;\n    tp.time=time;\n    tp.reportTime=System.currentTimeMillis();\n    tp.datum=datum;\n    ThreadPosition nextTp=tp.after;\n    while (nextTp != null && tp.seqno > tp.after.seqno) {\n      if (tp.before != null)       tp.before.after=nextTp;\n      if (nextTp.after != null)       nextTp.after.before=tp;\n      nextTp.before=tp.before;\n      tp.after=nextTp.after;\n      nextTp.after=tp;\n      tp.before=nextTp;\n      if (head == tp)       head=nextTp;\n      nextTp=tp.after;\n    }\n    if (tp.after == null)     tail=tp;\n  }\n}\n", "@Override public void write(byte[] buffer,int off,int nbytes) throws IOException {\n  super.write(buffer,off,nbytes);\n  crc.update(buffer,off,nbytes);\n}\n", "public DebugCommands ( BundleContext context ) { this . context = context ; }", "    public String getErrorOrMessage(String name, Locale locale) {\n        ValidationResult validationResult =\n                (ValidationResult) validationResults.get(name);\n        if (validationResult != null) {\n            FormElement[] formElements = validationResult.getFormElements();\n            if (formElements != null && formElements.length > 0) {\n                if (validationResult.isValid()) {\n                    String message = formElements[0].getMessage(locale);\n                    if (message != null) {\n                        return message;\n                    }\n                } else {\n                    String errorMessage =\n                            validationResult.getErrorMessage(locale);\n                    if (errorMessage != null) {\n                        return errorMessage;\n                    }\n                }\n            }\n        }\n        return \"\";\n    }\n", "public void remove(final int index){\nsynchronized (getTreeLock()) {\n    Menu m=getMenu(index);\n    menus.removeElementAt(index);\n    MenuBarPeer peer=(MenuBarPeer)this.peer;\n    if (peer != null) {\n      m.removeNotify();\n      m.parent=null;\n      peer.delMenu(index);\n    }\n    if (helpMenu == m) {\n      helpMenu=null;\n      m.isHelpMenu=false;\n    }\n  }\n}\n", "\tprotected FacesMessage createFacesMessage(String[] params, String sumaryKey, String detailKey, String defauldMessage, Locale locale) {\n\t\tString summary = processMessage(sumaryKey, params, locale);\n\t\tString detail = processMessage(detailKey, params, locale);\n\t\tFacesMessage message = new FacesMessage();\n\t\tmessage.setDetail((detail != null) ? detail : defauldMessage);\n\t\tmessage.setSummary((summary != null) ? summary : defauldMessage);\n\t\tmessage.setSeverity(FacesMessage.SEVERITY_ERROR);\n\t\treturn message;\n\t}\n", "@Override public void performRequest(String request){\n  if (request.compareTo(\"Stop\") == 0) {\n    stop();\n  }\n else   if (request.compareTo(\"Save model\") == 0) {\n    saveModel();\n  }\n else   if (request.compareTo(\"Load model\") == 0) {\n    loadModel();\n  }\n else {\n    throw new IllegalArgumentException(request + \" not supported (Clusterer)\");\n  }\n}\n", "public static void scaleFit(Bitmap src, Bitmap dest, int clearColor) {\n        float ratio = Math.min(dest.getWidth() / (float) src.getWidth(), dest.getHeight() / (float) src.getHeight());\n        int newW = (int) (src.getWidth() * ratio);\n        int newH = (int) (src.getHeight() * ratio);\n        int paddingTop = (dest.getHeight() - (int) (src.getHeight() * ratio)) / 2;\n        int paddingLeft = (dest.getWidth() - (int) (src.getWidth() * ratio)) / 2;\n\n        scale(src, dest, clearColor, 0, 0, src.getWidth(), src.getHeight(), paddingLeft, paddingTop,\n                newW + paddingLeft,\n                newH + paddingTop);\n    }", "public static JMenuItem addMenuItem (\n        JMenu menu, String name, Object target, String callbackName)\n    {\n        JMenuItem item = createItem(name, null, null);\n        item.addActionListener(new ReflectedAction(target, callbackName));\n        menu.add(item);\n        return item;\n    }", "public static TypeReference newTypeParameterReference ( int sort , int paramIndex ) { return new TypeReference ( ( sort << NUM_ ) | ( paramIndex << NUM_ ) ) ; }", "private void expandAndRehash() {\n    final int[] newHashSet = new int[hashSet.length * 2];\n    final int bucketMask = (newHashSet.length - 1);\n\n    for (int j = 0; j < hashSet.length; j++) {\n      final int state = hashSet[j];\n      if (state > 0) {\n        int slot = hash(state, stateLength(state)) & bucketMask;\n        for (int i = 0; newHashSet[slot] > 0;) {\n          slot = (slot + (++i)) & bucketMask;\n        }\n        newHashSet[slot] = state;\n      }\n    }\n    this.hashSet = newHashSet;\n  }", "public static GraphRequest newStatusUpdateRequest(AccessToken accessToken,String message,JSONObject place,List<JSONObject> tags,Callback callback){\n  List<String> tagIds=null;\n  if (tags != null) {\n    tagIds=new ArrayList<String>(tags.size());\n    for (    JSONObject tag : tags) {\n      tagIds.add(tag.optString(\"id\"));\n    }\n  }\n  String placeId=place == null ? null : place.optString(\"id\");\n  return newStatusUpdateRequest(accessToken,message,placeId,tagIds,callback);\n}\n", "public SystemUiHelper ( Activity activity , int level , int flags ) { this ( activity , level , flags , null ) ; }", "public void init(String configuration) {\n\n        // initialize the members\n        m_additionalButtons = new ArrayList<String>(OPTIONAL_BUTTONS_LIST.size());\n        m_configuration = configuration;\n        m_editorHeight = EDITOR_DEFAULTHEIGHT;\n        m_hiddenButtons = new ArrayList<String>();\n        // initialize the widget options\n        parseOptions(configuration);\n    }", "private boolean packageIsIgnored ( Collection < IgnoredPackage > ignoredPackages , ClassTypeDescriptor classTypeDescriptor ) { final String className = classTypeDescriptor . getClassName ( ) . replace ( STR_ , STR_ ) ; final String conflictPackageName = c", "public void updateEntry ( Context context , IEntryHolder updatedEntry , boolean updateRedoLog , boolean origin , boolean [ ] partialUpdateValuesIndicators ) throws SAException { }", "  public boolean apply(CurrencyType priceCurrency) {\n    if (_importRecords.isEmpty()) return false;\n    boolean success = false;\n    for (StockRecord record : _importRecords) {\n      CurrencyType.Snapshot snap = addOrUpdateSnapshot(_currency, priceCurrency, record);\n      success |= (snap.getUserRate() > 0.0);\n    }\n    return success;\n  }\n", "public Hyperlink ( ) { }", "private void wrapAndAddAppender(Object appender,List<TomcatSlf4jLogbackAppenderAccessor> appenders){\n  TomcatSlf4jLogbackAppenderAccessor appenderAccessor=wrapAppender(appender);\n  if (appenderAccessor != null) {\n    appenders.add(appenderAccessor);\n  }\n}\n", "\tpublic int addMethod(CIMMethod aMethod) {\n\n\t\tif (aMethod == null\n\t\t\t\t|| methods.containsKey(aMethod.getName().toLowerCase())) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tmethods.put(aMethod.getName().toLowerCase(), aMethod);\n\t\t\taMethod.setContainingElement(this);\n\t\t\treturn 0;\n\t\t}\n\t}\n", "public void writeUpdate ( LogOutputStream out , Object value ) throws Exception { MarshalOutputStream s = new MarshalOutputStream ( out ) ; s . writeObject ( value ) ; s . flush ( ) ; }", "    public void setVarName(Name varName) {\n        assertNotNull(varName);\n        this.varName = varName;\n        varName.setParent(this);\n    }\n", "public ObligationPolicyDatabaseEntry addParameterDeletesObligationDatabaseEntry(XMethod xmethod,Obligation obligation,ObligationPolicyDatabaseEntryType entryType){\n  ObligationPolicyDatabaseEntry entry=new MatchMethodEntry(xmethod,ObligationPolicyDatabaseActionType.DEL,entryType,obligation);\n  addEntry(entry);\n  return entry;\n}\n", "    public void updateRowAndColumnNumbers() {\n        // If we don't wrap this in an invokeLater(), all hell breaks loose when auto-completing\n        // a function when the expression area is displayed in a modal dialog. I have no idea why.\n        // Note that this is true even when this method is called from the CaretListener, i.e.\n        // when we are already on the event-thread.\n        EventQueue.invokeLater(new Runnable() {\n\n            @Override\n            public void run() {\n                updateRowAndColumnLabels(area.getCurrentRow(), area.getCurrentColumn());\n            }\n        });\n    }\n", "private boolean isSlavoGermanic(String value){\n  return value.indexOf('W') > -1 || value.indexOf('K') > -1 || value.indexOf(\"CZ\") > -1 || value.indexOf(\"WITZ\") > -1;\n}\n", "public void SL(String serverLine,String location){\n  testElements.add(new ServerResponse(serverLine,location));\n}\n", "@Nullable\n  public static LocationEngineResult extractResult(Intent intent) {\n    LocationEngineResult result = null;\n    if (isOnClasspath(GOOGLE_PLAY_LOCATION_RESULT)) {\n      result = extractGooglePlayResult(intent);\n    }\n    return result == null ? extractAndroidResult(intent) : result;\n  }", "private int inOrderAnalyse(StructuralNode node) {\r\n        int subtreeNodes = 0;\r\n\r\n        if (isStop) {\r\n            return 0;\r\n        }\r\n\r\n        if (node == null) {\r\n            return 0;\r\n        }\r\n\r\n        // analyse entity if not root and not leaf.\r\n        // Leaf is not analysed because only folder entity is used to determine if path exist.\r\n        try {\r\n            if (!node.isRoot()) {\r\n                if (!node.isLeaf() || node.isLeaf() && node.getParent().isRoot()) {\r\n                    analyse(node);\r\n                    \r\n                } else {\r\n                    //ZAP: it's a Leaf then no children are available\r\n                    return 1;\r\n                }\r\n            }\r\n            \r\n        } catch (Exception e) {\r\n        }\r\n\r\n        Iterator<StructuralNode> iter = node.getChildIterator();\r\n        while (iter.hasNext()) {\r\n            subtreeNodes += inOrderAnalyse(iter.next());\r\n        }\r\n        \r\n        return subtreeNodes + 1;\r\n    }", "  public void console() throws IOException {\n    initPython();\n    InteractiveConsole python = new InteractiveConsole();\n    initInterpreter(python, scope, variable);\n    python.interact();\n  }\n", "public void testNegativeStepByOneWithClosure ( ) { final List callLog = new ArrayList ( ) ; final Closure closure = new RecordingClosure ( callLog ) ; final Range range = createRange ( NUM_ , NUM_ ) ; range . step ( - NUM_ , closure ) ; assertEquals ( STR_ , NUM_ , callLog . size ( ) ) ; final Iterator iter = callLog . iterator ( ) ; for ( int i = NUM_ ; i >= NUM_ ; i -- ) { assertEquals ( STR_ , createValue ( i ) , iter . next ( ) ) ; } }", "\tpublic void stop() {\n    setCursor(null);\n\t\tloadingProgressBar.setIndeterminate(false);\n\t}\n", "void closedProject ( Project project ) ;", "public static int[] analyzeGraphGrid(TupleSet ts){\n  int m, n;\n  Iterator iter=ts.tuples();\n  iter.next();\n  for (n=2; iter.hasNext(); n++) {\n    Node nd=(Node)iter.next();\n    if (nd.getDegree() == 2)     break;\n  }\n  m=ts.getTupleCount() / n;\n  return new int[]{m,n};\n}\n", "\tprotected void startMonitor() {\n\t\ttheCorrelator.startMonitoring();\n\t\tposter.start();\n\t}\n", "private static void expand3DigitNumber(String numberString,WordRelation wordRelation,Item tokenItem){\n  if (numberString.charAt(0) == '0') {\n    expandNumberAt(numberString,1,wordRelation,tokenItem);\n  }\n else {\n    String hundredDigit=digit2num[numberString.charAt(0) - '0'];\n    wordRelation.addWord(tokenItem,hundredDigit);\n    wordRelation.addWord(tokenItem,\"hundred\");\n    expandNumberAt(numberString,1,wordRelation,tokenItem);\n  }\n}\n", "public String buildJavaVersion(){\n  return properties.getProperty(\"build.java.version\");\n}\n", "public static void d(String msg,Object... args){\n  if (!allowD)   return;\n  StackTraceElement caller=getCallerStackTraceElement();\n  String tag=generateTag(caller);\n  if (sLevel > LEVEL_DEBUG) {\n    return;\n  }\n  if (args.length > 0) {\n    msg=String.format(msg,args);\n  }\n  Log.d(tag,msg);\n}\n", "    protected TileEasternBoundary (Node node, boolean showUnseen) {\n\n        super(node, showUnseen);\n        setImage(SBConstants.IMAGE_EASTERN_BOUNDARY);\n    }\n", "public void addIncoming ( Message message ) throws InterruptedException { message . acquire ( ) ; if ( ! incomingQueue . offer ( message ) ) { gondola . getStats ( ) . incomingQueueFull ( ) ; incomingQueue . put ( message ) ; } lock . lock ( ) ; try { wor", "\tpublic void onNavigateRight() {\n\t\tResidue current = getCurrentSelection();\n\t\tif (current == null) {\n\t\t\tGlycan s = theDoc.getFirstStructure();\n\t\t\tif (s != null)\n\t\t\t\tsetSelection(s.getRoot());\n\t\t} else {\n\t\t\tResidue best_node = theBBoxManager.getNearestRight(current);\n\t\t\tif (best_node != null)\n\t\t\t\tsetSelection(best_node);\n\t\t}\n\t}\n", "public static int[] toArray(IntTuple t)\r\n    {\r\n        int d = t.getSize();\r\n        int result[] = new int[d];\r\n        for (int i=0; i<d; i++)\r\n        {\r\n            result[i] = t.get(i);\r\n        }\r\n        return result;\r\n    }", "void writeObjectEnd() throws IOException {\n        currentIndent = currentIndent.substring(0, currentIndent.length() - indent.length());\n        if (commaState.get(commaDepth)) {\n            output.append(newLine);\n            output.append(currentIndent)", "public Epoch createEpoch(int timestamp,ServerViewController recManager){\n  epochsLock.lock();\n  Epoch epoch=new Epoch(recManager,this,timestamp);\n  epochs.put(timestamp,epoch);\n  epochsLock.unlock();\n  return epoch;\n}\n", "public synchronized void start ( EventDispatcher eventDispatcher ) throws ReplicatorException { logger . info ( STR_ + name ) ; for ( Stage stage : stages ) stage . start ( eventDispatcher ) ; }", "public String buildSetFormValues() {\n\n        StringBuffer result = new StringBuffer(1024);\n        // get currently active tab\n        String activeTab = getActiveTabName();\n        // get structure panel name\n        String structurePanelName = key(Messages.GUI_PROPERTIES_INDIVIDUAL_0);\n        Iterator<String[]> i = getPropertyValues().iterator();\n        while (i.hasNext()) {\n            String[] curProp = i.next();\n            // determine the shown value\n            String shownValue = curProp[1];\n            // in \"shared properties\" form, show resource value if no structure value is set\n            if (structurePanelName.equals(activeTab) && \"\".equals(curProp[2]) && !\"\".equals(curProp[3])) {\n                shownValue = curProp[3];\n            }\n            if (!\"\".equals(shownValue)) {\n                // create the JS output for a single property if not empty\n                result.append(\"\\tdocument.getElementById(\\\"\");\n                result.append(PREFIX_VALUE);\n                result.append(curProp[0]);\n                result.append(\"\\\").value = \\\"\");\n                result.append(CmsStringUtil.escapeJavaScript(shownValue));\n                result.append(\"\\\";\\n\");\n            }\n\n        }\n        return result.toString();\n    }", "public static SSLContext createSslContext(NettyTransportSslOptions options) throws Exception {\n  try {\n    String contextProtocol=options.getContextProtocol();\n    LOG.trace(\"Getting SSLContext instance using protocol: {}\",contextProtocol);\n    SSLContext context=SSLContext.getInstance(contextProtocol);\n    KeyManager[] keyMgrs=loadKeyManagers(options);\n    TrustManager[] trustManagers=loadTrustManagers(options);\n    context.init(keyMgrs,trustManagers,new SecureRandom());\n    return context;\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to create SSLContext: {}\",e,e);\n    throw e;\n  }\n}\n", "@Override public void addVertex(double par1,double par3,double par5){\n  if (rawBufferIndex >= rawBufferSize - 40) {\n    if (rawBufferSize == 0) {\n      rawBufferSize=0x10000;\n      rawBuffer=new int[rawBufferSize];\n    }\n else {\n      rawBufferSize*=2;\n      rawBuffer=Arrays.copyOf(rawBuffer,rawBufferSize);\n    }\n  }\n  ++this.addedVertices;\n  if (this.drawMode == 7 && convertQuadsToTriangles && this.addedVertices % 4 == 0) {\n    for (int var7=0; var7 < 2; ++var7) {\n      int var8=10 * (3 - var7);\n      if (this.hasTexture) {\n        this.rawBuffer[this.rawBufferIndex + 3]=this.rawBuffer[this.rawBufferIndex - var8 + 3];\n        this.rawBuffer[this.rawBufferIndex + 4]=this.rawBuffer[this.rawBufferIndex - var8 + 4];\n        this.rawBuffer[this.rawBufferIndex + 5]=this.rawBuffer[this.rawBufferIndex - var8 + 5];\n        this.rawBuffer[this.rawBufferIndex + 6]=this.rawBuffer[this.rawBufferIndex - var8 + 6];\n      }\n      if (this.hasBrightness) {\n        this.rawBuffer[this.rawBufferIndex + 9]=this.rawBuffer[this.rawBufferIndex - var8 + 9];\n      }\n      if (this.hasColor) {\n        this.rawBuffer[this.rawBufferIndex + 7]=this.rawBuffer[this.rawBufferIndex - var8 + 7];\n      }\n      this.rawBuffer[this.rawBufferIndex]=this.rawBuffer[(this.rawBufferIndex - var8)];\n      this.rawBuffer[this.rawBufferIndex + 1]=this.rawBuffer[this.rawBufferIndex - var8 + 1];\n      this.rawBuffer[this.rawBufferIndex + 2]=this.rawBuffer[this.rawBufferIndex - var8 + 2];\n      ++this.vertexCount;\n      this.rawBufferIndex+=10;\n    }\n  }\n  if (this.hasTexture) {\n    this.rawBuffer[this.rawBufferIndex + 3]=Float.floatToRawIntBits((float)this.textureU);\n    this.rawBuffer[this.rawBufferIndex + 4]=Float.floatToRawIntBits((float)this.textureV);\n    this.rawBuffer[this.rawBufferIndex + 5]=Float.floatToRawIntBits(0.0F);\n    this.rawBuffer[this.rawBufferIndex + 6]=Float.floatToRawIntBits((float)this.textureW);\n  }\n  if (this.hasBrightness) {\n    this.rawBuffer[this.rawBufferIndex + 9]=this.brightness;\n  }\n  if (this.hasColor) {\n    this.rawBuffer[this.rawBufferIndex + 7]=this.color;\n  }\n  if (this.hasNormals) {\n    this.rawBuffer[this.rawBufferIndex + 8]=this.normal;\n  }\n  this.rawBuffer[this.rawBufferIndex]=Float.floatToRawIntBits((float)(par1 + this.xOffset));\n  this.rawBuffer[this.rawBufferIndex + 1]=Float.floatToRawIntBits((float)(par3 + this.yOffset));\n  this.rawBuffer[this.rawBufferIndex + 2]=Float.floatToRawIntBits((float)(par5 + this.zOffset));\n  this.rawBufferIndex+=10;\n  ++this.vertexCount;\n}\n", "public synchronized void loadKeys(){\n  try {\n    PropertyInfo props=_coordinator.getPropertyInfo();\n    String internalApiAlgoOverride=null;\n    if (props != null) {\n      internalApiAlgoOverride=props.getProperty(SYSTEM_PROPERTY_INTERNAL_API_ALGO);\n    }\n    _log.debug(\"Internal Api algo override property: \" + internalApiAlgoOverride);\n    if (internalApiAlgoOverride != null && internalApiAlgoOverride.equals(SYSTEM_PROPERTY_INTERNAL_API_ALGO_VALUE_NEW)) {\n      _internalApiCurrentKey=getSignatureKey2(NEW_SIGNATURE_INTERNALAPI_KEY,NEW_INTERNAL_API_SIGN_ALGO);\n      deleteSignatureKey(CURRENT_SIGNATURE_INTERNALAPI_KEY);\n    }\n else {\n      _internalApiCurrentKey=getSignatureKey2(CURRENT_SIGNATURE_INTERNALAPI_KEY,CURRENT_INTERNAL_API_SIGN_ALGO);\n    }\n    _interVDCCurrentKey=getSignatureKey2(SIGNATURE_INTERVDC_KEY,CURRENT_INTERVDC_API_SIGN_ALGO);\n  }\n catch (  Exception e) {\n    throw new IllegalStateException(\"Exception while retrieving key\",e);\n  }\n  if (_internalApiCurrentKey == null) {\n    throw new IllegalStateException(\"Key was null / Unable to get current internal api key.\");\n  }\n  if (_interVDCCurrentKey == null) {\n    throw new IllegalStateException(\"Key was null / Unable to get current inter vdc api key.\");\n  }\n  _initialized=true;\n  _lastUpdated.set(System.currentTimeMillis());\n  return;\n}\n", "public DecompoundedWord highestRank ( DecompoundingTree splits ) ;", "public O returns(Class<OUT> typeClass) {\n\t\trequireNonNull(typeClass, \"type class must not be null\");\n\n\t\ttry {\n\t\t\treturn returns(TypeInformation.of(typeClass));\n\t\t}\n\t\tcatch (InvalidTypesException e) {\n\t\t\tthrow new InvalidTypesException(\"Cannot infer the type information from the class alone.\" +\n\t\t\t\t\t\"This is most likely because the class represents a generic type. In that case,\" +\n\t\t\t\t\t\"please use the 'returns(TypeHint)' method instead.\", e);\n\t\t}\n\t}", "public void create(SSOToken token,String objName,Map attrs) throws SMSException, SSOException {\n  if ((objName == null) || (objName.length() == 0) || (attrs == null)) {\n    throw new IllegalArgumentException(\"SMSEnhancedFlatFileObject.create: \" + \"One or more arguments is null or empty\");\n  }\n  String attributeFileName=null;\n  mRWLock.readRequest();\n  try {\n    if (root.isExists(mRootDir,objName)) {\n      String errmsg=\"SMSEnhancedFlatFileObject.create: object \" + objName;\n      mDebug.error(errmsg);\n      throw new ServiceAlreadyExistsException(errmsg);\n    }\n  }\n  finally {\n    mRWLock.readDone();\n  }\n  mRWLock.writeRequest();\n  if (root.isExists(mRootDir,objName)) {\n    String errmsg=\"SMSEnhancedFlatFileObject.create: object \" + objName;\n    mDebug.error(errmsg);\n    throw new ServiceAlreadyExistsException(errmsg);\n  }\n  SMSFlatFileTreeNode node=new SMSFlatFileTreeNode(objName);\n  String filepath=node.getAttributeFilename(mRootDir);\n  try {\n    Set sunserviceids=null;\n    Set sunxmlkeyvals=null;\n    Properties props=new Properties();\n    Set keys=attrs.keySet();\n    if (keys != null) {\n      for (Iterator i=keys.iterator(); i.hasNext(); ) {\n        String key=(String)i.next();\n        Set vals=(Set)attrs.get(key);\n        if (key.equalsIgnoreCase(SMSEntry.ATTR_SERVICE_ID)) {\n          sunserviceids=vals;\n        }\n else         if (key.equalsIgnoreCase(SMSEntry.ATTR_XML_KEYVAL)) {\n          sunxmlkeyvals=vals;\n        }\n        props.put(key,toValString(vals));\n      }\n    }\n    try {\n      File attrFile=new File(filepath);\n      try {\n        if (!attrFile.createNewFile()) {\n          String errmsg=\"SMSEnhancedFlatFileObject.create: object \" + objName + \": Could not create file \"+ filepath;\n          mDebug.error(errmsg);\n          throw new SMSException(errmsg);\n        }\n      }\n catch (      IOException e) {\n        String errmsg=\"SMSEnhancedFlatFileObject.create: object \" + objName + \" IOException encountered when creating file \"+ filepath+ \". Exception: \"+ e.getMessage();\n        mDebug.error(\"SMSEnhancedFlatFileObject.create\",e);\n        throw new SMSException(errmsg);\n      }\n      saveProperties(props,attrFile,objName);\n      createSunServiceIdFiles(node,sunserviceids);\n      createSunXmlKeyValFiles(node,sunxmlkeyvals);\n      if (!root.addChild(node)) {\n        throw new SMSException(\"parent not found for node name=\" + objName);\n      }\n      saveDirectoryTree();\n    }\n catch (    SMSException e) {\n      File attrFile=new File(filepath);\n      try {\n        attrFile.delete();\n      }\n catch (      SecurityException se) {\n      }\n      throw e;\n    }\n  }\n  finally {\n    mRWLock.writeDone();\n  }\n}\n", "@Subscribe\n  @SuppressForbidden(\"legitimate printStackTrace().\")\n  public void onSuiteResult(AggregatedSuiteResultEvent e) {\n    try {\n      if (jsonWriter == null)\n        return;\n\n      slaves.put(e.getSlave().id, e.getSlave());\n      e.serialize(jsonWr", "public static String findCodeBaseInClassPath(Pattern codeBaseNamePattern,String classPath){\n  if (classPath == null) {\n    return null;\n  }\n  StringTokenizer tok=new StringTokenizer(classPath,File.pathSeparator);\n  while (tok.hasMoreTokens()) {\n    String t=tok.nextToken();\n    File f=new File(t);\n    Matcher m=codeBaseNamePattern.matcher(f.getName());\n    if (m.matches()) {\n      return t;\n    }\n  }\n  return null;\n}\n", "private Object readResolve() throws ObjectStreamException {\n        // The old index field used to uniquely identify the time unit.\n        switch (index) {\n        case 6:\n            return SECOND;\n        case 5:\n            return MINUTE;\n        case 4:\n            return HOUR;\n        case 3:\n            return DAY;\n        case 2:\n            return WEEK;\n        case 1:\n            return MONTH;\n        case 0:\n            return YEAR;\n        default:\n            throw new InvalidObjectException(\"Bad index: \" + index);\n        }\n    }", "\tpublic void addAssociativity(Integer a) {\n\t\tcheckKnown(a);\n\t\tcompatibilityRelation.add(a, a);\n\t\tassociativeOperators.add(a);\n\t}\n", "@Override public MemChunkHolder<SysMemAllocator> resizeChunk(MemChunkHolder<SysMemAllocator> mholder,long size){\n  MemChunkHolder<SysMemAllocator> ret=null;\n  boolean ac=null != mholder.getRefId();\n  if (size > 0) {\n    if (currentMemory.get() + size > maxStoreCapacity) {\n      if (m_activegc) {\n        m_chunkcollector.waitReclaimCoolDown(m_gctimeout);\n      }\n    }\n    if (currentMemory.get() + size <= maxStoreCapacity) {\n      Long addr=m_unsafe.reallocateMemory(mholder.get(),size);\n      if (0 != addr) {\n        mholder.clear();\n        mholder.destroy();\n        ret=new MemChunkHolder<SysMemAllocator>(this,addr,size);\n        if (ac) {\n          m_chunkcollector.register(ret);\n        }\n      }\n    }\n  }\n  return ret;\n}\n", "@Nullable\n  public static String getURLString (@Nullable final String sPath,\n                                     @Nullable final List <? extends URLParameter> aQueryParams,\n                                     @Nullable final String sAnchor,\n                                     @Nullable final Charset aParameterCharset)\n  {\n    final IEncoder <String, String> aQueryParameterEncoder = aParameterCharset == null ? null\n                                                                                       : new URLParameterEncoder (aParameterCharset);\n    return getURLString (sPath, getQueryParametersAsString (aQueryParams, aQueryParameterEncoder), sAnchor);\n  }", "    public Instant withDurationAdded(ReadableDuration durationToAdd, int scalar) {\n        if (durationToAdd == null || scalar == 0) {\n            return this;\n        }\n        return withDurationAdded(durationToAdd.getMillis(), scalar);\n    }\n", "void clear ( ) ;", "public ServiceFuture<ImageCreateSummary> createImagesFromUrlsAsync(UUID projectId, ImageUrlCreateBatch batch, final ServiceCallback<ImageCreateSummary> serviceCallback) {\n        return ServiceFuture.fromResponse(createImagesFromUrlsWithServiceResponseAsy", "@Override\n    @SuppressWarnings(\"unchecked\")\n    protected void ensureCapacity(int capacity) {\n        checkCapacity(capacity);\n        ArrayHandle[] newArray = (ArrayHandle[]) Array.newInstance(ArrayHandle.class, capacity + 1);\n        System.arraycopy(array, 1, newArray, 1, size);\n        array = newArray;\n    }", "\tpublic String get_CapitalGain3() {\n\t\treturn this._CapitalGain3;\n\t}\n", "public Observable<Void> updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions) {\n        return updateUserWithServiceResponseAsync(poolId, ", "    private void init() {\n        if( this.getProperties() == null ) {\n            this.sslContext        = null;\n            this.selector          = null;\n            this.streamFactory     = null;\n            \n            /** MBean de-registration\n             */\n            if( getManagement() != null )\n                getManagement().unregister();\n            \n            this.serviceManagement = null;\n        }\n        else {\n            /** Init SSLContext if needed\n             */\n            this.sslContext = SSLUtilities.createSSLContext( getProperties() );\n            \n            /** Init the Stream factory\n             */\n            this.streamFactory = getProperties().createObjectStreamFactory();\n            \n            /** MBean registration\n             */\n            if( getProperties().isJMXEnabled() ) {\n                this.serviceManagement = new EventDispachThreadManagement( this );\n                this.getManagement().register();\n            }\n        }\n    }\n", "public ApiExceptionHandlerBase ( ProjectApiErrors projectApiErrors , List < ApiExceptionHandlerListener > apiExceptionHandlerListenerList , ApiExceptionHandlerUtils utils ) { if ( projectApiErrors == null ) throw new IllegalArgumentException ( STR_ ) ; if", "    public void setArrayDrawer(ArrayDrawer arrayDrawer) {\n\t\tif (drawer != null) drawer.deleteObserver(this);\t\n\t\tdrawer = arrayDrawer;\n\t\tif (drawer != null) drawer.addObserver(this);\n    }\n", "    public boolean isGrantStatusInitialized() {\n        return grantStatus_is_initialized; \n    }\n", "public TypeMirror getOriginalType(javax.lang.model.type.ErrorType errorType) {\n        if (errorType instanceof com.sun.tools.javac.code.Type.ErrorType) {\n            return ((com.sun.tools.javac.code.Type.ErrorType)errorType).getOriginalType();\n        }\n\n        return com.sun.tools.javac.code.Type.noType;\n    }", "public void removeProcessListener(INodejsProcessListener listener){\nsynchronized (listeners) {\n    listeners.remove(listener);\n  }\n}\n", "public Observable<ServiceResponseWithHeaders<UploadBatchServiceLogsResult, ComputeNodeUploadBatchServiceLogsHeaders>> uploadBatchServiceLogsWithServiceResponseAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions) {\n        if (this.client.batchUrl() == null) {\n            throw new IllegalArgumentException(\"Parameter this.client.batchUrl() is required and cannot be null.\");\n        }\n        if (poolId == null) {\n            throw new IllegalArgumentException(\"Parameter poolId is required and cannot be null.\");\n        }\n        if (nodeId == null) {\n            throw new IllegalArgumentException(\"Parameter nodeId is required and cannot be null.\");\n        }\n        if (uploadBatchServiceLogsConfiguration == null) {\n            throw new IllegalArgumentException(\"Parameter uploadBatchServiceLogsConfiguration is required and cannot be null.\");\n        }\n        if (this.client.apiVersion() == null) {\n            throw new IllegalArgumentException(\"Parameter this.client.apiVersion() is required and cannot be null.\");\n        }\n        Validator.validate(uploadBatchServiceLogsConfiguration);\n        Validator.validate(computeNodeUploadBatchServiceLogsOptions);\n        Integer timeout = null;\n        if (computeNodeUploadBatchServiceLogsOptions != null) {\n            timeout = computeNodeUploadBatchServiceLogsOptions.timeout();\n        }\n        UUID clientRequestId = null;\n        if (computeNodeUploadBatchServiceLogsOptions != null) {\n            clientRequestId = computeNodeUploadBatchServiceLogsOptions.clientRequestId();\n        }\n        Boolean returnClientRequestId = null;\n        if (computeNodeUploadBatchServiceLogsOptions != null) {\n            returnClientRequestId = computeNodeUploadBatchServiceLogsOptions.returnClientRequestId();\n        }\n        DateTime ocpDate = null;\n        if (computeNodeUploadBatchServiceLogsOptions != null) {\n            ocpDate = computeNodeUploadBatchServiceLogsOptions.ocpDate();\n        }\n        String parameterizedHost = Joiner.on(\", \").join(\"{batchUrl}\", this.client.batchUrl());\n        DateTimeRfc1123 ocpDateConverted = null;\n        if (ocpDate != null) {\n            ocpDateConverted = new DateTimeRfc1123(ocpDate);\n        }\n        return service.uploadBatchServiceLogs(poolId, nodeId, uploadBatchServiceLogsConfiguration, this.client.apiVersion(), this.client.acceptLanguage(), timeout, clientRequestId, returnClientRequestId, ocpDateConverted, parameterizedHost, this.client.userAgent())\n                .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<UploadBatchServiceLogsResult, ComputeNodeUploadBatchServiceLogsHeaders>>>() {\n                    @Override\n                    public Observable<ServiceResponseWithHeaders<UploadBatchServiceLogsResult, ComputeNodeUploadBatchServiceLogsHeaders>> call(Response<ResponseBody> response) {\n                        try {\n                            ServiceResponseWithHeaders<UploadBatchServiceLogsResult, ComputeNodeUploadBatchServiceLogsHeaders> clientResponse = uploadBatchServiceLogsDelegate(response);\n                            return Observable.just(clientResponse);\n                        } catch (Throwable t) {\n                            return Observable.error(t);\n                        }\n                    }\n                });\n    }", "public default T addExtends ( Class < ? > clazz ) { ( ( Node ) this ) . tryAddImportToParentCompilationUnit ( clazz ) ; return addExtends ( clazz . getSimpleName ( ) ) ; }", "  public void linkTo(Signal signal) {\n    //set the given Signal as an observer of this Signal\n    this.addObserver(signal);\n  }\n", "private OnPreferenceChangeListener createToolbarElevationChangeListener() {\n        return new OnPreferenceChangeListener() {\n\n            @Override\n            public boolean onPreferenceChange(Preference preference, Object newValue) {\n                int elevation = Integer.valueOf((String) newValue);\n                ((PreferenceActivity) getActivity()).setToolbarElevation(elevation);\n                return true;\n            }\n\n        };\n    }", "public Object clone ( ) { TIntArrayList list = null ; try { list = ( TIntArrayList ) super . clone ( ) ; list . _data = toNativeArray ( ) ; } catch ( CloneNotSupportedException e ) { } return list ; }", "\tprivate JPopupMenu getPopupMenu(MouseEvent e) {\n\t\tTreePath pathPoint = objectRepositoryTree.\n\t\t\tgetPathForLocation(e.getPoint().x, e.getPoint().y);\n\t\tTreeNode clickedNode = null;\n\t\tif (pathPoint != null) {\n\t\t\tclickedNode = (TreeNode) pathPoint.getLastPathComponent();\n\t\t}\n\t\tif (clickedNode != null) {\n\t\t\tif (clickedNode instanceof PhysicalDataNode) {\n\t\t\t\treturn physicalDataPopupMenu;\n\t\t\t} else if (clickedNode instanceof LogicalDataNode) {\n\t\t\t\treturn logicalDataPopup;\n\t\t\t}\n\t\t}\n\t\treturn objectRepositoryPopupMenu;\n\t}\n", "  private Touch getLastTouch() {\n    assert lastEvent != null : \"Last event not set\";\n    return getTouchFromEvent(lastEvent);\n  }\n", "private int measureShort(int measureSpec){\n  int result;\n  int specMode=MeasureSpec.getMode(measureSpec);\n  int specSize=MeasureSpec.getSize(measureSpec);\n  if (specMode == MeasureSpec.EXACTLY) {\n    result=specSize;\n  }\n else {\n    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);\n    if (specMode == MeasureSpec.AT_MOST) {\n      result=Math.min(result,specSize);\n    }\n  }\n  return result;\n}\n", "public URL getImageUrl(BaseType baseType, String id) throws FanartTvException {\n        StringBuilder url = getBaseUrl(baseType);\n\n        // Add the ID\n        url.append(id);\n\n        // Add the API Key\n        url.append(DELIMITER_APIKEY).append(apiKey);\n\n        // Add the client API Key\n        if (StringUtils.isNotBlank(clientKey)) {\n            url.append(DELIMITER_CLIENT_KEY).append(clientKey);\n        }\n\n        return convertUrl(url);\n    }", "protected boolean isExceptionEntry(Calendar date) {\n   if (exceptionArray==null) return false;\n\n   for (int i=0;i<exceptionArray.size();i++) {\n      // Exception entries only have YYYY/MM/DD info in them\n      if (((Calendar)exceptionArray.elementAt(i)).get(Calendar.YEAR)==date.get(Calendar.YEAR) &&\n          ((Calendar)exceptionArray.elementAt(i)).get(Calendar.MONTH)==date.get(Calendar.MONTH) &&\n          ((Calendar)exceptionArray.elementAt(i)).get(Calendar.DAY_OF_MONTH)==date.get(Calendar.DAY_OF_MONTH)) return true;\n   } /* endfor */\n\n   return false;\n} // end-method\n", "private static Object [ ] arrayAdd ( Object [ ] array , Object elt ) { int len = array . length ; Object [ ] narray = ( Object [ ] ) Array . newInstance ( array . getClass ( ) . getComponentType ( ) , len + NUM_ ) ; System . arraycopy ( array , NUM_ , narray , NUM_ , len ) ; narray [ len ] = elt ; return narray ; }", "\tpublic void update() {\n\t\tif (fOperationTarget == null && fTargetProvider != null && fOperationCode != -1){\n\t\t\tfOperationTarget= (ITextOperationTarget) fTargetProvider.getAdapter(ITextOperationTarget.class);\n\t\t}\n\t\n\t\tboolean isEnabled= (fOperationTarget != null && fOperationTarget.canDoOperation(fOperationCode));\n\t\tsetEnabled(isEnabled);\n\t}\n", "@Override\n    public ListQualificationTypesResult listQualificationTypes(ListQualificationTypesRequest request) {\n        request = beforeClientExecution(request);\n        return executeListQualificationTypes(request);\n    }", "    public void write(File file, Drawing drawing) throws IOException {\n        BufferedOutputStream out = null;\n        try {\n            out = new BufferedOutputStream(new FileOutputStream(file));\n            write(out, drawing);\n        } finally {\n            if (out != null) {\n                out.close();\n            }\n        }\n    }\n", "    public QName getParameterTypeByName(String paramName) {\n        QName paramQName = new QName(\"\", paramName);\n\n        return getParameterTypeByQName(paramQName);\n    }\n", "protected boolean isValidDomain(String domain){\n  Matcher ipDomainMatcher=IP_DOMAIN_PATTERN.matcher(domain);\n  if (ipDomainMatcher.matches()) {\n    InetAddressValidator inetAddressValidator=InetAddressValidator.getInstance();\n    return inetAddressValidator.isValid(ipDomainMatcher.group(1));\n  }\n  DomainValidator domainValidator=DomainValidator.getInstance(allowLocal);\n  return domainValidator.isValid(domain) || domainValidator.isValidTld(domain);\n}\n", "    public void addCharacter( char inChar ) {\n        mCharList.add( new CharWrapper( inChar ) );\n        }\n", "private static Map<String, Object> localizeDecimalParams(final Map<String, Object> params) {\n    Map<String, Object> localized = new HashMap<>(params.size());\n    final NumberFormat localizedNumberFormatter = DecimalFormat.getNumberInstance();\n    for (String key : params.keySet()) {\n      final Object value = params.get(key);\n      final Object newValue;\n      if (value instanceof Float || value instanceof Double) {\n        newValue = localizedNumberFormatter.format(value);\n      } else\n        newValue = value;\n      localized.put(key, newValue);\n    }\n    return Collections.unmodifiableMap(localized);\n  }", "@Deprecated\n  public Timex2Time modifiedCopy(final Modifier modifier) {\n    return new Timex2Time(val, modifier, set, granularity, periodicity, anchorVal, anchorDir,\n        nonSpecific);\n  }", "static String _targetSoFile ( String libName , int version ) { Context context = mContext ; if ( null == context ) { return STR_ ; } String path = STR_ + context . getPackageName ( ) + STR_ ; File f = context . getFilesDir ( ) ; if ( f != null ) { path = f . getPath ( ) ; } return path + STR_ + libName + STR_ + version + STR_ ; }", "public static boolean isGeometryClass(Class<?> x){\n  if (x == null || GEOMETRY_CLASS == null) {\n    return false;\n  }\n  return GEOMETRY_CLASS.isAssignableFrom(x);\n}\n", "public static void assertDiagonallyDominant(IDoubleMatrix mat){\n  assertSquare(mat);\n  for (int i=0; i < mat.getRowNum(); ++i) {\n    final double d=mat.get(i,i);\n    if (Double.isNaN(d)) {\n      continue;\n    }\n    for (int j=0; j < mat.getRowNum(); ++j) {\n      double v;\n      v=mat.get(i,j);\n      if (!Double.isNaN(v) && v > d) {\n        final String msg=String.format(\"Matrix is not diagonally dominant: (%d,%d)=%f (%d,%d)=%f diff=%f\",i,j,v,i,i,d,d - v);\n        throw new AdeCoreIllegalArgumentException(msg);\n      }\n      v=mat.get(j,i);\n      if (!Double.isNaN(v) && v > d) {\n        final String msg=String.format(\"Matrix is nSot diagonally dominant: (%d,%d)=%f (%d,%d)=%f\",j,i,v,i,i,d);\n        throw new AdeCoreIllegalArgumentException(msg);\n      }\n    }\n  }\n}\n", "public HumanNameDataType getHumanNameDataType(ProposalPersonContract person) {\n\n\t\tHumanNameDataType humanName = HumanNameDataType.Factory.newInstance();\n\t\tif (person != null) {\n\t\t\thumanName.setFirstName(person.getFirstName());\n\t\t\thumanName.setLastName(person.getLastName());\n\t\t\tString middleName = person.getMiddleName();\n\t\t\tif (middleName != null && !middleName.equals(\"\")) {\n\t\t\t\thumanName.setMiddleName(middleName);\n\t\t\t}\n\t\t}\n\t\treturn humanName;\n\t}", "public LogStreamMerger(LogRequest req,LogSvcPropertiesLoader propertiesLoader){\n  logger.trace(\"LogStreamMerger()\");\n  this.request=req;\n  LogFileFinder fileFinder=new LogFileFinder(propertiesLoader.getLogFilePaths(),propertiesLoader.getExcludedLogFilePaths());\n  Map<String,List<File>> groupedLogFiles=fileFinder.findFilesGroupedByBaseName();\n  List<String> groups=req.getBaseNames();\n  if (groups == null || groups.isEmpty()) {\n    groups=new ArrayList<>(groupedLogFiles.keySet());\n  }\n  logger.debug(\"log names: {}\",groups);\n  if (groups.retainAll(groupedLogFiles.keySet())) {\n    logger.info(\"log names after filter: {}\",groups);\n  }\n  int size=groups.size();\n  logStreamList=new LogFileStream[size];\n  logHeads=new LogMessage[size];\n  for (int i=0; i < size; i++) {\n    String service=groups.get(i);\n    logStreamList[i]=new LogFileStream(service,groupedLogFiles.get(service),req,status);\n    logHeads[i]=null;\n  }\n}\n", "public static SharedScrolledComposite createScrolledComposite ( Composite parent , int columns , int hspan , int marginwidth , int marginheight ) { SharedScrolledComposite comp = new SharedScrolledComposite ( parent , SWT . V_SCROLL | SWT . H_SCROLL ) { }", "static SnapshotInfo consolidateSnapshotInfos(Collection<SnapshotInfo> lastSnapshot)\n    {\n        SnapshotInfo chosen = null;\n        if (lastSnapshot != null) {\n            Iterator<SnapshotInfo> i = lastSnapshot.iterator();\n            while (i.hasNext()) {\n                SnapshotInfo next = i.next();\n                if (chosen == null) {\n                    chosen = next;\n                } else if (next.hostId < chosen.hostId) {\n                    next.partitionToTxnId.putAll(chosen.partitionToTxnId);\n                    chosen = next;\n                }\n                else {\n                    // create a full mapping of txn ids to partition ids.\n                    chosen.partitionToTxnId.putAll(next.partitionToTxnId);\n                }\n            }\n        }\n        return chosen;\n    }", "public void onClickRowView ( NotificationBoard board , RowView rowView , NotificationEntry entry ) { if ( DBG ) Log . v ( TAG , STR_ + entry . ID ) ; }", "public void marshall(DescribeEcsClustersRequest describeEcsClustersRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (describeEcsClustersRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(describeEcsClustersRequest.getEcsClusterArns(), ECSCLUSTERARNS_BINDING);\n            protocolMarshaller.marshall(describeEcsClustersRequest.getStackId(), STACKID_BINDING);\n            protocolMarshaller.marshall(describeEcsClustersRequest.getNextToken(), NEXTTOKEN_BINDING);\n            protocolMarshaller.marshall(describeEcsClustersRequest.getMaxResults(), MAXRESULTS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public String convertTemplate(String template){\n  String contents=StringUtils.fileContentsToString(template);\n  if (!contents.endsWith(\"\\n\")) {\n    contents+=\"\\n\";\n  }\n  Perl5Util perl=new Perl5Util();\n  for (int i=0; i < perLineREs.length; i+=2) {\n    contents=perl.substitute(makeSubstRE(i),contents);\n  }\n  if (perl.match(\"m/javascript/i\",contents)) {\n    contents=perl.substitute(\"s/\\n}/\\n#end/g\",contents);\n  }\n else {\n    contents=perl.substitute(\"s/(\\n\\\\s*)}/$1#end/g\",contents);\n    contents=perl.substitute(\"s/#end\\\\s*\\n\\\\s*#else/#else/g\",contents);\n  }\n  return contents;\n}\n", "public void testWrapperClassWrapsPublicAndProtectedMethods ( ) { for ( Class < ? > wrapper : wrapperClasses ) { if ( wrapper . isInterface ( ) ) { continue ; } List < Method > wrapperMethods = getPublicAndProtectedMethods ( wrapper ) ; List < Method > met", "    private void queryNewDeviceForInfo(Device device) {\n        // TODO: do this in a separate thread.\n        try {\n            // first get the list of properties.\n            device.executeShellCommand(GetPropReceiver.GETPROP_COMMAND,\n                    new GetPropReceiver(device));\n            \n            // now get the emulator Virtual Device name (if applicable).\n            if (device.isEmulator()) {\n                EmulatorConsole console = EmulatorConsole.getConsole(device);\n                if (console != null) {\n                    device.mAvdName = console.getAvdName();\n                }\n            }\n        } catch (IOException e) {\n            // if we can't get the build info, it doesn't matter too much\n        }\n    }\n", "public void importData(CmsObject cms, I_CmsReport report, CmsImportParameters parameters)\n    throws CmsImportExportException, CmsXmlException, CmsRoleViolationException, CmsException {\n\n        // check the required role permissions\n        OpenCms.getRoleManager().checkRole(cms, CmsRole.DATABASE_MANAGER);\n\n        try {\n            OpenCms.fireCmsEvent(\n                new CmsEvent(I_CmsEventListener.EVENT_CLEAR_CACHES, Collections.<String, Object> emptyMap()));\n            I_CmsImportExportHandler handler = getImportExportHandler(parameters);\n            synchronized (handler) {\n                handler.setImportParameters(parameters);\n                handler.importData(cms, report);\n            }\n        } finally {\n            OpenCms.fireCmsEvent(\n                new CmsEvent(I_CmsEventListener.EVENT_CLEAR_CACHES, Collections.<String, Object> emptyMap()));\n        }\n    }", "\tpublic ImageIcon getImageIcon(String key) {\n\t\tImageIcon icon = imageIconTable.get(key);\n\t\tif (icon == null) {\n\t\t\ticon = new ImageIcon();\n\t\t}\n\t\treturn icon;\n\t}\n", "public void addElement(E element){\n  int index=delegate.size();\n  delegate.addElement(element);\n  fireIntervalAdded(this,index,index);\n}\n", "public void cleanup(){\n  stopAllActions();\n  unscheduleAllSelectors();\n  if (children_ != null)   for (int i=0; i < children_.size(); ++i) {\n    CCNode node=children_.get(i);\n    node.cleanup();\n  }\n}\n", "@NotNull\n    public Set<String> getNormalForms(@NotNull String word, @NotNull Language language) {\n        com.fnklabs.metrics.Timer timer = MetricsFactory.getMetrics().getTimer(MetricsType.TEXT_UTILS_GET_NORMAL_FORMS.name());\n\n        Set<String> normalF", "public void setHidden(final boolean hidden) {\n        if (hidden)\n            attrMixin.setAttribute(HIDDEN, Boolean.toString(true));\n        else\n            attrMixin.removeAttribute(HIDDEN);\n    }", "@Override\n    public DescribeEcsClustersResult describeEcsClusters(DescribeEcsClustersRequest request) {\n        request = beforeClientExecution(request);\n        return executeDescribeEcsClusters(request);\n    }", "public boolean isAttached ( ) { return isDebuggerAttached ; }", "public static ValueGetterSpacePredicate < ServerEntry > propertyNotNull ( String propertyName ) { return property ( propertyName , isNotNull ( ) ) ; }", "public void extractSamplesTo(Collection<String> samples,DataTable target){\n  Set<String> toDelete=new HashSet<>();\n  toDelete.addAll(sampleNames);\n  toDelete.removeAll(samples);\n  target.copy(this);\n  target.removeSamples(toDelete);\n}\n", "@Override public int read(byte[] b,int off,int len) throws IOException {\n  if (closed) {\n    throw new FileUploadException(ItemSkippedException);\n  }\n  if (len == 0) {\n    return 0;\n  }\n  int res=available();\n  if (res == 0) {\n    res=makeAvailable();\n    if (res == 0) {\n      return -1;\n    }\n  }\n  res=Math.min(res,len);\n  System.arraycopy(buffer,head,b,off,res);\n  head+=res;\n  total+=res;\n  return res;\n}\n", "void deleteRemoveBssidIfExist ( long groupId , String bssid ) ;", "public AnnotationVisitor visitTypeAnnotation ( int typeRef , TypePath typePath , String desc , boolean visible ) { if ( api < Opcodes . ASM5 ) { throw new RuntimeException ( ) ; } if ( cv != null ) { return cv . visitTypeAnnotation ( typeRef , typePath , desc , visible ) ; } return null ; }", "private LogFile startNewLogFile ( long seqno ) throws ReplicatorException , IOException , InterruptedException { String logFileName = getDataFileName ( fileIndex ) ; LogFile dataFile = new LogFile ( logDir , logFileName ) ; dataFile . setBufferSize ( buff", "public final synchronized Date evalDateBalanceStoreStart(\n    final Map<String, Object> pAddParam) throws Exception {\n    Date dateBalanceStoreStart = lazyGetBalanceAtAllDirtyCheck(pAddParam)\n      .getDateBalanceStoreStart();\n    Date leastAccountingEntryDate = this.balanceAtAllDirtyCheck\n      .getLeastAccountingEntryDate();\n    if (dateBalanceStoreStart.getTime() == this.initDateLong\n      && leastAccountingEntryDate.getTime() == this.initDateLong) {\n      //the first time with no acc-entries, it's start of current ACC year:\n      Calendar cal = Calendar.getInstance(new Locale(\"en\", \"US\"));\n      cal.setTime(getSrvAccSettings().lazyGetAccSettings(pAddParam)\n        .getCurrentAccYear());\n      cal.set(Calendar.MONTH, 0);\n      cal.set(Calendar.DAY_OF_MONTH, 1);\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n      this.balanceAtAllDirtyCheck\n        .setDateBalanceStoreStart(cal.getTime());\n      getSrvOrm()\n        .updateEntity(pAddParam, this.balanceAtAllDirtyCheck);\n    } else if (dateBalanceStoreStart.getTime() == this.initDateLong\n      && leastAccountingEntryDate.getTime() > this.initDateLong) {\n      //there is at least 1 acc entry\n      //the start is start of nearest period to the first acc entry:\n      Long dateFirstEntryLong = this.srvDatabase\n        .evalLongResult(\"select min(ITSDATE) as MINIMUMDATE \"\n          + \"from ACCOUNTINGENTRY where REVERSEDID is null;\", \"MINIMUMDATE\");\n      if (dateFirstEntryLong == null) {\n        //e.g. dirty reversed acc entry\n        getLogger().info(null, SrvBalanceStd.class,\n    \"There is no single acc entry, so use current acc year for start balance!\");\n        Calendar cal = Calendar.getInstance(new Locale(\"en\", \"US\"));\n        cal.setTime(getSrvAccSettings().lazyGetAccSettings(pAddParam)\n          .getCurrentAccYear());\n        cal.set(Calendar.MONTH, 0);\n        cal.set(Calendar.DAY_OF_MONTH, 1);\n        cal.set(Calendar.HOUR_OF_DAY, 0);\n        cal.set(Calendar.MINUTE, 0);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        this.balanceAtAllDirtyCheck\n          .setDateBalanceStoreStart(cal.getTime());\n      } else {\n        this.balanceAtAllDirtyCheck.setDateBalanceStoreStart(\n          evalDatePeriodStartFor(pAddParam, new Date(dateFirstEntryLong)));\n      }\n      getSrvOrm()\n        .updateEntity(pAddParam, this.balanceAtAllDirtyCheck);\n    }\n    return this.balanceAtAllDirtyCheck.getDateBalanceStoreStart();\n   }", "public final void goToLastPage(){\n  viewPager.setCurrentItem(pages.size() - 1);\n}\n", "    private WSReservawebSoapProxy getProxy() {\n        if (this.client == null) {\n            this.client = new WSReservawebSoapProxy();\n        }\n        return this.client;\n    }\n", "public void uncacheContainerPage(CmsUUID structureId, boolean online) {\n\n        try {\n            m_lock.writeLock().lock();\n            if (online) {\n                m_containerPagesOnline.remove(getCacheKey(structureId, true));\n                m_containerPagesOnline.remove(getCacheKey(structureId, false));\n            } else {\n                m_containerPagesOffline.remove(getCacheKey(structureId, true));\n                m_containerPagesOffline.remove(getCacheKey(structureId, false));\n            }\n        } finally {\n            m_lock.writeLock().unlock();\n        }\n    }", "public static CView createView ( final AbstractSQLProvider provider , final INaviProject project , final INaviView view , final String name , final String description ) throws CouldntSaveDataException { Preconditions . checkNotNull ( project , STR_ ) ; Preconditions . checkNotNull ( view , STR_ ) ; Preconditions . checkNotNull ( name , STR_ ) ; Preconditions . checkState ( view . inSameDatabase ( provider ) , STR_ ) ; return createView ( provider , project . getConfiguration ( ) . getId ( ) , view , name , description , CTableNames . PROJECTS_TABLE , CTableNames . PROJECT_VIEWS_TABLE , new CProjectViewGenerator ( provider , project ) ) ; }", "public static UserCustomColumn createDataColumn(int index) {\n\t\treturn UserCustomColumn.createColumn(index, COLUMN_DATA,\n\t\t\t\tGeoPackageDataType.BLOB, true, null);\n\t}", "public TraceLogger ( final Debugger debugger , final Module module ) { Preconditions . checkNotNull ( debugger , STR_ ) ; Preconditions . checkNotNull ( module , STR_ ) ; this . debugger = debugger ; this . module = module ; this . project = null ; }", "\tpublic void removeProject(IProject project) {\n\t\tprojects.remove(project.getName());\n\t\tpropertyChanged(this, PROJECTS);\n\t}\n", "public void marshall(UpdateFlowEntitlementRequest updateFlowEntitlementRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (updateFlowEntitlementRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(updateFlowEntitlementRequest.getDescription(), DESCRIPTION_BINDING);\n            protocolMarshaller.marshall(updateFlowEntitlementRequest.getEncryption(), ENCRYPTION_BINDING);\n            protocolMarshaller.marshall(updateFlowEntitlementRequest.getEntitlementArn(), ENTITLEMENTARN_BINDING);\n            protocolMarshaller.marshall(updateFlowEntitlementRequest.getFlowArn(), FLOWARN_BINDING);\n            protocolMarshaller.marshall(updateFlowEntitlementRequest.getSubscribers(), SUBSCRIBERS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public int metricWidth ( float scale , char c ) ;", "    public void checkOuterFishBowlBounds(int xPosition, int yPosition){\n        if ( ( Map.TILE_SIZE <= xPosition ) && ( xPosition <= Map.TILE_SIZE*2 ) ) {\n            if ( yPosition <= Map.TILE_SIZE ) {\n                gameAdmin.setPlayerPosition(OUTER_F", "    protected void storePatch(Patch bank, int bankNum, int patchNum) {\n\tsetBankNum(bankNum);\n\tsuper.sendPatch(bank);\n    }\n", "    public void displayMessage(String msg) {\n\tlblInfo.setText(msg);\n\tlblInfo.setVisible(true);\n    }\n", "public void visitInnerClass ( String name , String outerName , String innerName , int access ) { if ( cv != null ) { cv . visitInnerClass ( name , outerName , innerName , access ) ; } }", "public static void encodeConfiguration(CounterConfiguration configuration, Consumer<Byte> byteConsumer,\n         LongConsumer longConsumer, IntConsumer intConsumer) {\n      byteConsumer.accept(encodeTypeAndStorage(configuration));\n      switch (configuration.type()) {\n         case WEAK:\n            intConsumer.accept(configuration.concurrencyLevel());\n            break;\n         case BOUNDED_STRONG:\n            longConsumer.accept(configuration.lowerBound());\n            longConsumer.accept(configuration.upperBound());\n            break;\n         case UNBOUNDED_STRONG:\n            break;\n         default:\n            throw new IllegalStateException();\n      }\n      longConsumer.accept(configuration.initialValue());\n   }", "private void calculateConnectionIDs() {\n\n\t\tfinal Set<ExecutionGroupVertex> alreadyVisited = new HashSet<ExecutionGroupVertex>();\n\t\tfinal ExecutionStage lastStage = getStage(getNumberOfStages() - 1);\n\n\t\tfor (int i = 0; i < lastStage.getNumberOfStageMembers(); ++i) {\n\n\t\t\tfinal ExecutionGroupVertex groupVertex = lastStage.getStageMember(i);\n\t\t\t\n\t\t\tint currentConnectionID = 0;\n\t\t\t\n\t\t\tif (groupVertex.isOutputVertex()) {\n\t\t\tcurrentConnectionID = groupVertex.calculateConnectionID(currentConnectionID, alreadyVisited);\n\t\t\t}\n\t\t}\n\t}", "\tprivate IMolecularFormula getFormula(List<IIsotope> isoToCond_new, int[] value_In) {\n\t\tIMolecularFormula mf = builder.newMolecularFormula();;\n\t\tfor(int i = 0; i < isoToCond_new.size() ; i++){\n\t\t\tif(value_In[i] != 0){\n\t\t\t\tfor(int j = 0 ; j < value_In[i] ; j ++)\n\t\t\t\t\tmf.addIsotope(isoToCond_new.get(i));\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tmf = putInOrder(mf);\n\t\treturn mf;\n\t}\n", "public void setJobs(java.util.Collection<JobSummary> jobs) {\n        if (jobs == null) {\n            this.jobs = null;\n            return;\n        }\n\n        this.jobs = new java.util.ArrayList<JobSummary>(jobs);\n    }", "private void addItem(File directory){\n  if (directory == null) {\n    return;\n  }\n  boolean useShellFolder=FilePane.usesShellFolder(chooser);\n  directories.clear();\n  File[] baseFolders=(useShellFolder) ? (File[])ShellFolder.get(\"fileChooserComboBoxFolders\") : fsv.getRoots();\n  directories.addAll(Arrays.asList(baseFolders));\n  File canonical;\n  try {\n    canonical=ShellFolder.getNormalizedFile(directory);\n  }\n catch (  IOException e) {\n    canonical=directory;\n  }\n  try {\n    File sf=useShellFolder ? ShellFolder.getShellFolder(canonical) : canonical;\n    File f=sf;\n    Vector<File> path=new Vector<File>(10);\n    do {\n      path.addElement(f);\n    }\n while ((f=f.getParentFile()) != null);\n    int pathCount=path.size();\n    for (int i=0; i < pathCount; i++) {\n      f=path.get(i);\n      if (directories.contains(f)) {\n        int topIndex=directories.indexOf(f);\n        for (int j=i - 1; j >= 0; j--) {\n          directories.insertElementAt(path.get(j),topIndex + i - j);\n        }\n        break;\n      }\n    }\n    calculateDepths();\n    setSelectedItem(sf);\n  }\n catch (  FileNotFoundException ex) {\n    calculateDepths();\n  }\n}\n", "public void fillComboBox(boolean mandatory,boolean onlyValidated,boolean onlyActive,boolean temporary){\n  long startTime=System.currentTimeMillis();\n  m_loaded=false;\n  if (temporary) {\n    int size=p_data.size();\n    m_tempData=new Object[size];\n    p_data.toArray(m_tempData);\n  }\n  Object obj=m_selectedObject;\n  p_data.clear();\n  p_data=getData(mandatory,onlyValidated,onlyActive,temporary);\n  if (obj != m_selectedObject) {\n    log.finest(getColumnName() + \": SelectedValue Changed=\" + obj+ \"->\"+ m_selectedObject);\n    obj=m_selectedObject;\n  }\n  m_loaded=true;\n  fireContentsChanged(this,0,p_data.size());\n  if (p_data.size() == 0)   log.fine(getColumnName() + \": #0 - ms=\" + String.valueOf(System.currentTimeMillis() - startTime));\n else   log.fine(getColumnName() + \": #\" + p_data.size()+ \" - ms=\"+ String.valueOf(System.currentTimeMillis() - startTime));\n}\n", "private float[] internalGetGlyphPositions(int start,int count,int offset,float[] result){\n  if (result == null) {\n    result=new float[offset + count * 2];\n  }\n  initPositions();\n  for (int i=offset, e=offset + count * 2, p=start * 2; i < e; ++i, ++p) {\n    result[i]=positions[p];\n  }\n  return result;\n}\n", "public boolean isNativeLookAndFeel ( ) { return BOOL_ ; }", "public IPreparedTupleQuery prepareTupleQuery(final String query) throws Exception {\n  return prepareTupleQuery(query,UUID.randomUUID());\n}", "public int size ( ) { return readQueue . size ( ) ; }", "    protected void setTargetStyle() {\n        if (getPanelTarget() == null) {\n            return;\n        }\n        String styleStr = (String) styleField.getSelectedItem();\n        if (styleStr == null) {\n            return;\n        }\n        boolean bold = (styleStr.indexOf(\"Bold\") != -1);\n        boolean italic = (styleStr.indexOf(\"Italic\") != -1);\n        ((FigText) getPanelTarget()).setBold(bold);\n        ((FigText) getPanelTarget()).setItalic(italic);\n        getPanelTarget().endTrans();\n    }\n", "Set<Expr> clone_live(Set<Expr> phis,Set<Expr> live,Edge p){\n  if (phis.isEmpty() || live.isEmpty())   return live;\n  Set<Expr> copy=new TreeSet<Expr>();\n  for (  Expr e : live)   copy.add(phis.contains(e) ? e.args[findPhiArg(e,p)] : e);\n  return copy;\n}\n", "\tprotected void visitShortLiteral(short value) {\n\t\tRETURN_RESULT(\"(short)\" + value);\n\t}\n", "\tpublic void addControl(Control control, int priority) {\n\n\t\tcontrols.put(control.getName(), control, priority);\n\t}\n", "    public void addAllLayers(Collection layers) {\n        this.layers.addAll(layers);\n    }\n", "public void setReadAttributes(java.util.Collection<String> readAttributes) {\n        if (readAttributes == null) {\n            this.readAttributes = null;\n            return;\n        }\n\n        this.readAttributes = new java.util.ArrayList<String>(readAttributes);\n    }", "\tpublic AttributeMap getAttributes(Object node) {\n\t\tif (node instanceof GraphCell)\n\t\t\treturn ((GraphCell) node).getAttributes();\n\t\treturn attributes;\n\t}\n", "public static Codec getDecoderById(CodecID codecId) throws JavaAVException {\n\t\tif (codecId == null)\n\t\t\tthrow new NullPointerException(\"CodecID is null.\");\n\n\t\tAVCodec avCodec = avcodec_find_decoder(codecId.value());\n\n\t\tif (avCodec == null || avCodec.isNull())\n\t\t\tthrow new JavaAVException(\"Decoder not found: \" + codecId.toString());\n\n\t\tCodec codec = new Codec();\n\t\tcodec.avCodec = avCodec;\n\n\t\treturn codec;\n\t}", "@Override protected void processMouseEvent(MouseEvent evt){\n  super.processMouseEvent(evt);\n  if (evt.getID() == MouseEvent.MOUSE_CLICKED)   fireActionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,getNormalText()));\n}\n", "public void updateDefaultPose ( ) { this . boxList . stream ( ) . filter ( null ) . forEach ( null ) ; }", "\t\tpublic void setAutoAnchor (boolean autoAnchor) {\n\t\t\tthis.autoAnchor = autoAnchor;\n\t\t}\n", "public CEdgeFilterExpression ( final FilterRelation relation , final long value ) { super ( relation , value ) ; }", "public boolean isWinNT31 ( ) { return this . winNT31 ; }", "private void refreshDebugger(final boolean programHasChanged){\n  if (programHasChanged) {\n    currentInstructionList.setListData(getInstructionsAsStringArray(programToDebug));\n  }\n  final int start=debugPointer;\n  int end=debugPointer;\n  while (end + 1 < programToDebug.length && programToDebugIsData[end + 1]) {\n    end++;\n  }\n  currentInstructionList.setSelectionInterval(start,end);\n  if (start != 0) {\n    int forward=end + 3;\n    if (forward >= programToDebug.length) {\n      forward=programToDebug.length - 1;\n    }\n    currentInstructionList.ensureIndexIsVisible(forward);\n    int back=start - 2;\n    if (back < 0) {\n      back=0;\n    }\n    currentInstructionList.ensureIndexIsVisible(back);\n    currentInstructionList.ensureIndexIsVisible(end);\n  }\n  currentInstructionList.ensureIndexIsVisible(start);\n  stackList.setListData(stack.toStringArray());\n  cvtList.setListData(cvt.getCVTForDebug());\n  storageList.setListData(getStorageAsArray());\n  stateDisplay.repaint();\n  debugGlyphDisplay.repaint();\n}\n", "    public Graph load(InputStream stream) {\n        return load( new InputStreamReader(stream) );\n    }\n", "public static String byteArrayToHexString ( byte in [ ] ) { return byteArrayToHexString ( in , NUM_ ) ; }", "public void writeExternal(ObjectOutput out) throws IOException {\n  String s=toString();\n  if (s.length() <= 65535) {\n    out.writeUTF(s);\n  }\n else {\n    out.writeByte(0);\n    out.writeByte(0);\n    out.writeInt(s.length());\n    out.write(s.getBytes());\n  }\n}\n", "public Map<String,String> loadInstalledCodenvyProperties(InstallType installType) throws IOException {\n  Map<String,String> properties=new HashMap<>();\n  Iterator<Path> propertiesFiles=getCodenvyPropertiesFiles(installType);\n  while (propertiesFiles.hasNext()) {\n    Path file=propertiesFiles.next();\n    try {\n      properties.putAll(doLoadInstalledCodenvyProperties(file));\n    }\n catch (    IOException e) {\n      throw new ConfigException(format(\"Can't load Codenvy properties: %s\",e.getMessage()),e);\n    }\n  }\n  return properties;\n}\n", "protected RandomAccessFile init(File f) throws IOException {\n  RandomAccessFile inputFile=null;\n  try {\n    inputFile=new RandomAccessFile(f,\"r\");\n  }\n catch (  IOException i) {\n    if (i instanceof FileNotFoundException) {\n      throw i;\n    }\n    if (f.canRead()) {\n      BinaryFile.closeClosable();\n      inputFile=new RandomAccessFile(f,\"r\");\n    }\n else {\n      throw i;\n    }\n  }\n  return inputFile;\n}\n", "public DescribeHapgResult withPartitionSerialList(String... partitionSerialList) {\n        if (this.partitionSerialList == null) {\n            setPartitionSerialList(new com.amazonaws.internal.SdkInternalList<String>(partitionSerialList.length));\n        ", "public void close ( ) throws IOException { commPort . close ( ) ; }", "@SuppressWarnings(\"RedundantIfStatement\")\n  @RestrictTo(RestrictTo.Scope.LIBRARY)\n  public boolean matches(String key, int depth) {\n    if (isContainer(key)) {\n      // This is an artificial layer we programatically create.\n      return true;\n    }\n    if", "public TLCWorkerRMI removeTLCServerThread ( final TLCServerThread thread ) { final TLCWorkerRMI worker = threadsToWorkers . remove ( thread ) ; if ( worker != null ) { MP . printMessage ( EC . TLC_DISTRIBUTED_WORKER_DEREGISTERED , thread . getUri ( ) . to", "public boolean isOperatorControl ( ) { return m_ds . isOperatorControl ( ) ; }", "public void updateCallgraphSettings ( final ZyGraphViewSettings settings ) { updateGraphSettings ( callGraphSettings , settings ) ; callGraphSettings . setMultipleEdgesAsOne ( settings . getEdgeSettings ( ) . getDisplayMultipleEdgesAsOne ( ) ) ; }", "public boolean checkStationaryPoint ( final double xOld , final double xNew , final int statStateIterations , final Type ecType ) { if ( Math . abs ( xNew - xOld ) >= rootEpsilon_ ) { this . statStateIterations = NUM_ ; return BOOL_ ; } this . statStateIt", "public Tailer ( File file , TailerListener listener , long delayMillis , boolean end , boolean reOpen ) { this ( file , listener , delayMillis , end , reOpen , DEFAULT_BUFSIZE ) ; }", "public void transitionState ( RobotState state , RobotState oldState ) { }", "public static OreDictionaryEntry valueOf(int id){\n  if (id < 0)   throw new IllegalArgumentException(\"ore dictionary IDs are not negative\");\n  while (oreDictionaryEntries.size() < id + 1) {\n    oreDictionaryEntries.add(new OreDictionaryEntry(oreDictionaryEntries.size()));\n  }\n  return oreDictionaryEntries.get(id);\n}\n", "private void writeAndTick ( int integer , Keep keep ) throws JSONException { int width = keep . bitsize ( ) ; keep . tick ( integer ) ; if ( probe ) { log ( STR_ + keep . value ( integer ) + STR_ ) ; } write ( integer , width ) ; }", "public void restoreAfterSafeModeRestart() {\n    // Put the sessionsToCtxFromDisk entries into their respective\n    // SessionNotifierThreads instances\n    for (Map.Entry<String, SessionNotificationCtx> entry :\n          sessionsToCtxFromDisk.entrySet()) {\n      // The conf and the conf related properties are missing in the\n      // sessionsToCtx objects\n      entry.getValue().setConf(conf);\n      handleToNotifier(entry.getKey()).sessionsToCtx.put(entry.getKey(),\n                                                          entry.getValue());\n      sessionsToCtxFromDisk.remove(entry);\n    }\n\n    // Put the deletedSessions into the the respective SessionNotifierThreads\n    for (String deletedSessionHandle : deletedSessionsFromDisk) {\n      SessionNotifierThread notifierThread =\n        handleToNotifier(deletedSessionHandle);\n      if (notifierThread.sessionsToCtx.get(deletedSessionHandle) != null) {\n        notifierThread.deletedSessions.put(deletedSessionHandle,\n                                            notifierThread);\n      }\n      deletedSessionsFromDisk.remove(deletedSessionHandle);\n    }\n\n    // We can now start the notifier threads\n    for (int i = 0; i < numNotifierThreads; i++) {\n      notifierThreads[i].start();\n    }\n  }", "public static void logStatus ( final Logger logger , final long startTime , final long sleepingTime , final long workingTime ) { logger . logMessage ( Level . FINE , STR_ + Time . toClock ( System . currentTimeMillis ( ) - startTime ) + STR_ + STR_ + Math", "  public String getLicensesUrl() {\n    if (this.isIntegrationEnabled()) {\n      return Val.chkStr(this.getConfiguration().getValue(\"sdisuite.licensesUrl\"));\n    }\n    return \"\";\n  }\n", "\tpublic void setAuthorization(String value) throws SdaiException {\n\t\tif (session == null) {\n\t\t\tthrow new SdaiException(SdaiException.RP_NEXS);\n\t\t}\n\t\tif (!active) {\n\t\t\tthrow new SdaiException(SdaiException.RP_NOPN, this);\n\t\t}\n\t\tif (value == null) {\n\t\t\tthrow new SdaiException(SdaiException.VA_NSET);\n\t\t}\n\t\tcheckServerRWAccess();\n\t\tfile_name.authorization = value;\n\t\tmodified = true;\n\t}\n", "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return SEQUENCE_ID;\ncase 2:\n  return STATUS;\ncase 3:\nreturn MESSAGE;\ndefault :\nreturn null;\n}\n}\n", "public CFunctionNode ( final int nodeId , final INaviFunction function , final double x , final double y , final double width , final double height , final Color color , final boolean selected , final boolean visible , final List < IComment > localComment", "    public void displayCurves(BasicGraphData crvHor, BasicGraphData crvVer, BasicGraphData crvDia) {\n        displayCurveWithAttrs(Data.ANGLE.HOR, crvHor);\n        displayCurveWithAttrs(Data.ANGLE.VER, crvVer);\n        displayCurveWithAttrs(Data.ANGLE.DIA, crvDia);\n    }\n", "public WARArchiveImpl(Archive<?> delegate){\n  super(WARArchive.class,delegate);\n  setDefaultContextRoot();\n}\n", "@Override\n    public Request<DeleteVpcRequest> getDryRunRequest() {\n        Request<DeleteVpcRequest> request = new DeleteVpcRequestMarshaller().marshall(this);\n        request.addParameter(\"DryRun\", Boolean.toString(true));\n        return request;\n    }", "    public void close() throws IOException {\n        isClosed = true;\n        impl.close();\n    }\n", "\tpublic GuiViewerMemento createMemento() {\n\t\t// Create a memento to hold the state of the GuiViewer.\n\t\tGuiViewerMemento memento = new GuiViewerMemento();\n\t\t\n\t\t// Store the state of the GuiViewer.\n\t\tmemento.sourcePath = sourceDirectoryField.getText();\n\t\tmemento.targetPath = targetDirectoryField.getText();\n\t\tmemento.replaceString = replaceField.getText();\n\t\tmemento.warnOnMove = moveWarningMenu.getState();\n\t\tmemento.splitterPosition = splitPane.getDividerLocation();\n\t\tmemento.height = this.getHeight();\n\t\tmemento.width = this.getWidth();\n\t\tmemento.lookAndFeel = UIManager.getLookAndFeel().getName();\n\t\t\n\t\treturn memento;\n\t}\n", "  public LivenessAssumption join(LivenessAssumption value) {\n    if (value == null || value.liveVariables.isEmpty()) {\n      return this;\n    }\n    if (liveVariables.isEmpty()) {\n      return value;\n    }\n    LivenessAssumption result = new LivenessAssumption(this);\n    result.liveVariables.addAll(value.liveVariables);\n    return result;\n  }\n", "public void addChain(ChainData newChain) throws ChainException {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {\n            Tr.entry(tc, \"addChain: \" + newChain.getName());\n        }\n\n        if (containsChain(newChain.getName())) {\n            ChainException e = new ChainException(\"Chain already exists: \" + newChain.getName());\n            FFDCFilter.processException(e, getClass().getName() + \".addChain\", \"116\", this, new Object[] { newChain });\n            throw e;\n        }\n\n        // Create a chain array that is one element bigger than the current one.\n        int currentLength = this.chainArray.length;\n        ChainData[] newChains = new ChainData[currentLength + 1];\n        // Copy the existing elements to the new array.\n        System.arraycopy(getChains(), 0, newChains, 0, currentLength);\n        // Add the new chain to the end of the new list.\n        newChains[currentLength] = newChain;\n        // Update this group's chain list\n        setChains(newChains);\n        // Add all group listeners to this chain. If some already exist,\n        // this doesn't break anything.\n        for (ChainEventListener listener : getChainEventListeners()) {\n            ((ChainDataImpl) newChain).addChainEventListener(listener);\n        }\n\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {\n            Tr.exit(tc, \"addChain\");\n        }\n    }", "\tpublic String addQuestion(String question_text, Class myQuestion, int maxTimesAsked){\n\t\tmyQuestions.add(0, new QuestGen(myQuestion, question_text, showfile));\n\t\tmyQuestions.get(0).setMaxTimesAsked(maxTimesAsked);\n\t\treturn question_text;\n\t}\n", "public void addRow ( Object ... row ) throws IOException { super . print ( Strings . join ( row , STR_ ) + STR_ ) ; }", "public boolean canIncreaseTimer ( ) { return this . timer < this . duration ; }", "public void selectAll() {\n\tselect(0L, myContent.length());\n\trefreshSelections();\n}\n", "    public void addVertexDeclarationElement(VertexDeclarationElement element) {\n        elements.add(element);\n        recalculateTotalSize();\n    }\n", "public static String fileBuilderUrl(String baseUri,String seed,byte[] signatureSecret,long fileId,long fileAccessHash){\n  byte[] seedBytes=decodeHex(seed.toCharArray());\n  byte[] fileIdBytes=getBytes(fileId);\n  byte[] accessHashBytes=getBytes(fileAccessHa", "public TvShowTreeCellRenderer(){\n  tvShowPanel.setLayout(new FormLayout(new ColumnSpec[]{ColumnSpec.decode(\"min:grow\"),FormFactory.LABEL_COMPONENT_GAP_COLSPEC,ColumnSpec.decode(\"center:20px\"),ColumnSpec.decode(\"center:20px\"),ColumnSpec.decode(\"center:20px\")},new RowSpec[]{FormFactory.DEFAULT_ROWSPEC,FormFactory.DEFAULT_ROWSPEC}));\n  TmmFontHelper.changeFont(tvShowTitle,Font.BOLD);\n  tvShowTitle.setHorizontalAlignment(JLabel.LEFT);\n  tvShowTitle.setMinimumSize(new Dimension(0,0));\n  tvShowTitle.setHorizontalTextPosition(SwingConstants.LEADING);\n  tvShowPanel.add(tvShowTitle,\"1, 1\");\n  tvShowPanel.add(tvShowNfoLabel,\"3, 1, 1, 2\");\n  tvShowPanel.add(tvShowImageLabel,\"4, 1, 1, 2\");\n  TmmFontHelper.changeFont(tvShowInfo,0.816);\n  tvShowInfo.setHorizontalAlignment(JLabel.LEFT);\n  tvShowInfo.setMinimumSize(new Dimension(0,0));\n  tvShowPanel.add(tvShowInfo,\"1, 2\");\n  tvShowSeasonPanel.setLayout(new BoxLayout(tvShowSeasonPanel,BoxLayout.Y_AXIS));\n  tvShowSeasonPanel.add(tvShowSeasonTitle);\n  tvShowSeasonTitle.setHorizontalTextPosition(SwingConstants.LEADING);\n  tvShowEpisodePanel.setLayout(new FormLayout(new ColumnSpec[]{ColumnSpec.decode(\"min:grow\"),FormFactory.LABEL_COMPONENT_GAP_COLSPEC,ColumnSpec.decode(\"center:20px\"),ColumnSpec.decode(\"center:20px\"),ColumnSpec.decode(\"center:20px\")},new RowSpec[]{FormFactory.DEFAULT_ROWSPEC}));\n  tvShowEpisodeTitle.setMinimumSize(new Dimension(0,0));\n  tvShowEpisodeTitle.setHorizontalTextPosition(SwingConstants.LEADING);\n  tvShowEpisodePanel.add(tvShowEpisodeTitle,\"1, 1\");\n  tvShowEpisodePanel.add(tvShowEpisodeNfoLabel,\"3, 1\");\n  tvShowEpisodePanel.add(tvShowEpisodeImageLabel,\"4, 1\");\n  tvShowEpisodePanel.add(tvShowEpisodeSubtitleLabel,\"5, 1\");\n}\n", "        public double cumulative(double X) {\n                checkRange(X,0.0,Double.MAX_VALUE);\n                return 1.0-Math.exp(-Math.pow(X,shape));\n        }\n", "    public void addColAt(int c) {\n\n        width++;\n\n        Element      el;\n        ListIterator li = elements.listIterator();\n\n        // For each element in the list\n        while (li.hasNext()) {\n            el = (Element) li.next();\n\n            // Update the column number\n            if (el.column >= c) {\n                el.column++;\n            }\n        }\n    }\n", "public static void showWarning ( final Component parent , final String msg ) { JOptionPane . showMessageDialog ( isIconified ( parent ) ? null : parent , msg , System . getProperty ( DEFAULT_WINDOW_TITLE_PROPERTY ) , JOptionPane . WARNING_MESSAGE ) ; }", "private boolean canPluralize(String typeName){\n  return !typeName.endsWith(PLURAL_S);\n}\n", "public static <S extends Declaration,S2 extends S>SymbolReference<S> solved(S2 symbolDeclaration){\n  return new SymbolReference(Optional.of(symbolDeclaration));\n}\n", "public String getInputTagText() {\n        final TagView inputTagView = getInputTag();\n        if (inputTagView != null) {\n            return inputTagView.getText().toString();\n        }\n        return null;\n    }", "public static double elementMaxAbs( DMatrixD1 a ) {\n        final int size = a.getNumElements();\n\n        double max = 0;\n        for( int i = 0; i < size; i++ ) {\n            double val = Math.abs(a.get(i));\n            if( val > max ) {\n                ", "public static float clip ( float value , float maximum ) { if ( value > maximum ) { return maximum ; } else if ( value < - maximum ) { return - maximum ; } return value ; }", "void setMol(IAtomContainer mol) {\n        this.mol = mol;\n        Arrays.fill(amap, -1);\n        numMapped = 0;\n        this.avisit = new boolean[mol.getAtomCount()];\n        sptr = 0;\n        store(0, null);\n    }", "public boolean isTabAssociatedWithNonDestroyedActivity(boolean isIncognito,int tabId){\n  List<WeakReference<Activity>> activities=ApplicationStatus.getRunningActivities();\n  for (  WeakReference<Activity> ref : activities) {\n    Activity activity=ref.get();\n    if (activity != null && isValidActivity(isIncognito,activity.getIntent()) && getTabIdFromIntent(activity.getIntent()) == tabId && !isActivityDestroyed(activity)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "void lpc_to_curve(float[] curve, float[] lpc, float amp){\n\n    for(int i=0; i<ln*2; i++)\n      curve[i]=0.0f;\n\n    if(amp==0)\n      return;\n\n    for(int i=0; i<m; i++){\n      curve[i*2+1]=lpc[i]/(4*amp);\n      curve[i*2+2]=-lpc[i]/(4*amp);\n    }\n\n    fft.backward(curve);\n\n    {\n      int l2=ln*2;\n      float unit=(float)(1./amp);\n      curve[0]=(float)(1./(curve[0]*2+unit));\n      for(int i=1; i<ln; i++){\n        float real=(curve[i]+curve[l2-i]);\n        float imag=(curve[i]-curve[l2-i]);\n\n        float a=real+unit;\n        curve[i]=(float)(1.0/FAST_HYPOT(a, imag));\n      }\n    }\n  }", "private void resizePanel(){\n  if (parentFrame != null) {\n    int additionalParentHeight=(parentFrame.getBounds().height - scroller.getHeight());\n    scroller.resize();\n    int newHeight=scroller.getPreferredSize().height + additionalParentHeight;\n    if (newHeight > 300) {\n      parentFrame.pack();\n      parentFrame.setLocationRelativeTo(null);\n    }\n  }\n}\n", "private String readAttributeName(boolean returnLowerCase){\n  skipWhitespace();\n  int c=find(ATTRIBUTE_NAME_TERMINATORS);\n  String forSubstring=returnLowerCase ? inputLowerCase : input;\n  String result=pos < c ? forSubstring.substring(pos,c) : null;\n  pos=c;\n  return result;\n}\n", "\tpublic void execute(){\n\t\tSystem.out.println(\"Rotation : Processing command ...\");\n\t\tDocument doc = Application.getInstance().getActiveDocument();\n\t\tList<?> selectedObjects = doc.getSelectedObjects();\n\t\tCommand c = new RotateCommand(rotationAngle,anchor,selectedObjects);\n\t\tCaretaker.getInstance().execute(c);\n\t}\n", "@Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){\n  if (!getItemVisible(row,column)) {\n    return;\n  }\n  if (!getItemLineVisible(row,column) && !getItemShapeVisible(row,column)) {\n    return;\n  }\n  Number v=dataset.getValue(row,column);\n  if (v == null) {\n    return;\n  }\n  int visibleRow=state.getVisibleSeriesIndex(row);\n  if (visibleRow < 0) {\n    return;\n  }\n  int visibleRowCount=state.getVisibleSeriesCount();\n  PlotOrientation orientation=plot.getOrientation();\n  double x1;\n  if (this.useSeriesOffset) {\n    x1=domainAxis.getCategorySeriesMiddle(column,dataset.getColumnCount(),visibleRow,visibleRowCount,this.itemMargin,dataArea,plot.getDomainAxisEdge());\n  }\n else {\n    x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());\n  }\n  double value=v.doubleValue();\n  double y1=rangeAxis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());\n  if (pass == 0 && getItemLineVisible(row,column)) {\n    if (column != 0) {\n      Number previousValue=dataset.getValue(row,column - 1);\n      if (previousValue != null) {\n        double previous=previousValue.doubleValue();\n        double x0;\n        if (this.useSeriesOffset) {\n          x0=domainAxis.getCategorySeriesMiddle(column - 1,dataset.getColumnCount(),visibleRow,visibleRowCount,this.itemMargin,dataArea,plot.getDomainAxisEdge());\n        }\n else {\n          x0=domainAxis.getCategoryMiddle(column - 1,getColumnCount(),dataArea,plot.getDomainAxisEdge());\n        }\n        double y0=rangeAxis.valueToJava2D(previous,dataArea,plot.getRangeAxisEdge());\n        Line2D line=null;\n        if (orientation == PlotOrientation.HORIZONTAL) {\n          line=new Line2D.Double(y0,x0,y1,x1);\n        }\n else         if (orientation == PlotOrientation.VERTICAL) {\n          line=new Line2D.Double(x0,y0,x1,y1);\n        }\n        g2.setPaint(getItemPaint(row,column));\n        g2.setStroke(getItemStroke(row,column));\n        g2.draw(line);\n      }\n    }\n  }\n  if (pass == 1) {\n    Shape shape=getItemShape(row,column);\n    if (orientation == PlotOrientation.HORIZONTAL) {\n      shape=ShapeUtilities.createTranslatedShape(shape,y1,x1);\n    }\n else     if (orientation == PlotOrientation.VERTICAL) {\n      shape=ShapeUtilities.createTranslatedShape(shape,x1,y1);\n    }\n    if (getItemShapeVisible(row,column)) {\n      if (getItemShapeFilled(row,column)) {\n        if (this.useFillPaint) {\n          g2.setPaint(getItemFillPaint(row,column));\n        }\n else {\n          g2.setPaint(getItemPaint(row,column));\n        }\n        g2.fill(shape);\n      }\n      if (this.drawOutlines) {\n        if (this.useOutlinePaint) {\n          g2.setPaint(getItemOutlinePaint(row,column));\n        }\n else {\n          g2.setPaint(getItemPaint(row,column));\n        }\n        g2.setStroke(getItemOutlineStroke(row,column));\n        g2.draw(shape);\n      }\n    }\n    if (isItemLabelVisible(row,column)) {\n      if (orientation == PlotOrientation.HORIZONTAL) {\n        drawItemLabel(g2,orientation,dataset,row,column,y1,x1,(value < 0.0));\n      }\n else       if (orientation == PlotOrientation.VERTICAL) {\n        drawItemLabel(g2,orientation,dataset,row,column,x1,y1,(value < 0.0));\n      }\n    }\n    int datasetIndex=plot.indexOf(dataset);\n    updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value,datasetIndex,x1,y1,orientation);\n    EntityCollection entities=state.getEntityCollection();\n    if (entities != null) {\n      addItemEntity(entities,dataset,row,column,shape);\n    }\n  }\n}\n", "\tpublic boolean isEnum() {\n\t\t// check for superclass is needed for compatibility\n\t\t// otherwise there are false positives on anonymous element classes\n\t\treturn ((getModifiers() & ACC_ENUM) != 0 && getSuperclass() == Enum.class);\n\t}\n", "    public void setContentLength(long length) {\n        ByteBuffer nameBuffer = HEADERS.contentLength.buffer();\n        ByteBuffer valueBuffer\n            = BufferUtil.INSTANCE.asciiBuffer(length + \"\\r\\n\");\n        appendNameValue(nameBuffer, valueBuffer);\n    }\n", "    public void sortDescending(Phylogeny phylo) {\n    \tComparator<ElementDate> c = new descendingComparator();\n        sortDates(phylo, phylo.getRootClade(), c);\n    }\n", "static public void reportMissingClass ( ClassNotFoundException e ) { requireNonNull ( e , STR_ ) ; String missing = AbstractBugReporter . getMissingClassName ( e ) ; if ( skipReportingMissingClass ( missing ) ) { return ; } if ( ! analyzingApplicationClas", "public SBPrintStream pj(float s) {\n    if (Float.isInfinite(s)) {\n      append(\"Float.\").append(s > 0 ? \"POSITIVE_INFINITY\" : \"NEGATIVE_INFINITY\");\n    } else if (Float.isNaN(s)) {\n      append(\"Float.NaN\");\n    } else {\n      append(s).append('f');\n    }\n    return this;\n  }", "public static boolean      shouldRetry(int rc)\n    {\n        return (rc == KeeperException.Code.CONNECTIONLOSS.intValue()) ||\n            (rc == KeeperException.Code.OPERATIONTIMEOUT.intValue()) ||\n            (rc == KeeperException.Code.SESSIONMOVED.intValue()) ||\n            (rc == KeeperException.Code.SESSIONEXPIRED.intValue());\n    }", "private String computeGetterName(String name)\n\t{\n\t\tStringBuilder _result = new StringBuilder().append(PREFIX__GETTER);\n\t\t_result.append(Character.toUpperCase(name.charAt(0))).append(name.substring(1));\n\t\treturn _result.toString();\n\t}", "    public void error(Object msg) {\n        trace(msg);\n    }\n", "    public ImageReference getBackgroundImage() {\n        if (backgroundImageProperties == null) {\n            return null;\n        } else {\n            return backgroundImageProperties.getImage();\n        }\n    }\n", "    protected ImageDisplayControl makeImageDisplayControl(int size) {\n        return new NavigatorImageDisplayControl(size);\n    }\n", "public void setSubscriptions(java.util.Collection<Subscription> subscriptions) {\n        if (subscriptions == null) {\n            this.subscriptions = null;\n            return;\n        }\n\n        this.subscriptions = new java.util.ArrayList<Subscription>(subscriptions);\n    }", "public SecurityRoleType<WebFragmentDescriptor> getOrCreateSecurityRole()\n   {\n      List<Node> nodeList = model.get(\"security-role\");\n      if (nodeList != null &&  nodeList.size() > 0)\n      {\n         return new SecurityRoleTypeImpl<WebFragmentDescriptor>(this, \"security-role\", model, nodeList.get(0));\n      }\n      return createSecurityRole();\n   }", "    public int length() {\n        return toString().length();\n    }\n", "public void removeRow(int row) {\n\t\tif (row < _componentsVec2D.getRowCount()) {\n\t\t\t_componentsVec2D.removeRow(row);\n\t\t}\n\t}", "private boolean isAlphaUsedForScale ( ) { return android . os . Build . VERSION . SDK_INT < NUM_ ; }", "public static SailRepository openRepository(final String file){\n  return new SailRepository(openSail(file,false));\n}\n", "\tpublic void setRefreshLocalAllowed(boolean value) {\n\t\trefreshLocalAllowed = value;\n\t\teAllowed.fireEvent();\n\t}\n", "public static <T> ItemsSketch<T> getInstance(final int k, final Comparator<? super T> comparator) {\n    final ItemsSketch<T> qs = new ItemsSketch<>(k, comparator);\n    final int bufAlloc = 2 * Math.min(DoublesSketch.MIN_K, k); //the min is important\n    qs.n_ = 0;\n    qs.combinedBufferItemCapacity_ = bufAlloc;\n    qs.combinedBuffer_ = new Object[bufAlloc];\n    qs.baseBufferCount_ = 0;\n    qs.bitPattern_ = 0;\n    qs.minValue_ = null;\n    qs.maxValue_ = null;\n    return qs;\n  }", "void writeBytes ( ChannelHandlerContext ctx , ByteBuf bytes ) ;", "@Override\r\n    public void propagate(int idx, int mask) throws ContradictionException {\r\n        if (idx < bins.length) {\r\n            deltaMonitor[idx].freeze();\r\n            deltaMonitor[idx].forEachRemVal(remProc.set(idx));\r\n            deltaMonitor[idx].unfreeze();\r\n            if (vars[idx].isInstantiated()) {\r\n                assignItem(idx, vars[idx].getValue());\r\n            }\r\n        } else {\r\n            loadsHaveChanged.set(true);\r\n        }\r\n        forcePropagate(PropagatorEventType.CUSTOM_PROPAGATION);\r\n    }", "public @NotNull <T> FieldTypeRef<T> ofType(@NotNull TypeRef<T> type) {\n    return new FieldTypeRef<T>(name, type);\n  }", "public void marshall(DescribeChannelRequest describeChannelRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (describeChannelRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(describeChannelRequest.getChannelName(), CHANNELNAME_BINDING);\n            protocolMarshaller.marshall(describeChannelRequest.getIncludeStatistics(), INCLUDESTATISTICS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public Metadata ( MetadataType metadataType , String value , Alias alias , boolean temporal ) { mMetadataType = metadataType ; mValue = value ; mValueAlias = alias ; mTemporal = temporal ; }", "public void loadAuxiliaryAnnotations ( ) ;", "    public void setFlight1(Flight flight1) {\n        this.flight1 = flight1;\n    }\n", "    public void beginTimer() {\n        // Get the current time so we can calculate how long the process took\n        startMillis = System.currentTimeMillis();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"DebugTimer started\");\n        }\n    }\n", "public Path createClasspath ( ) { if ( this . classpath == null ) { this . classpath = new Path ( getProject ( ) ) ; } return this . classpath . createPath ( ) ; }", "void assertElementIsClickableAfter ( By by , int timeoutInSeconds ) ;", "public synchronized void save() {\n        if (BulkChange.contains(this)) {\n            return;\n        }\n        \n        File file = getConfigFile();\n        try {\n            List<String> allSignatures = new ArrayList<>(whitelistSignaturesFromUserControlledList);\n            blacklistSignaturesFromUserControlledList.stream()\n                    .map(signature -> \"!\" + signature)\n                    .forEach(allSignatures::add);\n            \n            FileUtils.writeLines(file, allSignatures);\n        } catch (IOException e) {\n            LOGGER.log(Level.WARNING, \"Failed to save \" + file.getAbsolutePath(), e);\n        }\n    }", "    public int compare(File file1, File file2) {\n        int result = 0;\n        for (Comparator<File> delegate : delegates) {\n            result = delegate.compare(file1, file2);\n            if (result != 0) {\n                break;\n            }\n        }\n        return result;\n    }\n", "@NonNull\n    public Flowable<Changes> observeChangesInTable(@NonNull String table, @NonNull BackpressureStrategy backpressureStrategy) {\n        checkNotEmpty(table, \"Table can not be null or empty\");\n        return observeChangesInTables(Collections.singleton(table), backpressureStrategy);\n    }", "public JSType getType(\n      StaticTypedScope scope, String jsTypeName, String sourceName, int lineno, int charno) {\n    return getType(scope, jsTypeName, sourceName, lineno, charno, true);\n  }", "    public int posFML() {\n        return getIndex ( _fixedFields[ 0 ] );\n    }\n", "public void resetDuration(){\n  start=System.currentTimeMillis();\n}\n", "\tpublic Resource getResource() {\n\t\tif (resource == null) {\n\t\t\tthrow new RuntimeException(\"Ressource supposed to be already created\");\n\t\t}\n\t\treturn resource;\n\t}\n", "\tpublic boolean save () throws IOException {\n\t\t// a convenience method to save the Document we're working on\n\t\t// (we could have done this with the flush() method, but that could\n\t\t// cause unexpected results if this OutputStream is wrapped in\n\t\t// another Stream or Writer that auto-flushes)\n\t\ttry {\n\t\t\treturn rtitem.getParent().save();\n\t\t} catch (NotesException e) {\n\t\t\t// turn our NotesExceptions into IOExceptions\n\t\t\tthrow new IOException(e.getMessage());\n\t\t}\n\t}\n", "public String encrypt(String value){\n  String securedata=null;\n  byte[] bytes=value.getBytes(utf8);\n  try {\n    Cipher encryptCipher=Cipher.getInstance(CIPHER_CODE);\n    encryptCipher.init(Cipher.ENCRYPT_MODE,sk,ivspec);\n    byte[] encdata=encryptCipher.doFinal(bytes);\n    securedata=DatatypeConverter.printBase64Binary(encdata);\n  }\n catch (  NoSuchAlgorithmException|NoSuchPaddingException|InvalidKeyException|InvalidAlgorithmParameterException|IllegalBlockSizeException|BadPaddingException e) {\n    if (LOGGER.isLoggable(Level.SEVERE)) {\n      LOGGER.log(Level.SEVERE,\"Unexpected exception initializing encryption.\" + \"  No encryption will be performed.\",e);\n    }\n    return null;\n  }\n  return securedata;\n}\n", "public SASJavaExec ( String execCommand , String script , String inputString ) { this . execCommand = execCommand . trim ( ) ; this . script = script . trim ( ) ; this . inputString = inputString ; }", "public Set<String> getProperties() {\n\t\tSet<String> allProperties = new HashSet<>();\n\t\tfor (PropertiesCoreExtension<T, ?, ?, ?> properties : propertiesMap\n\t\t\t\t.values()) {\n\t\t\tallProperties.addAll(properties.getProperties());\n\t\t}\n\t\treturn allProperties;\n\t}", "    public void updateTableModel() {\n        if (this._queueItemList.size() != this._oldSizeOfList) {\n            this.fireTableDataChanged();\n        } else {\n            this.fireTableRowsUpdated(0, this._queueItemList.size() - 1);\n        }\n        this._oldSizeOfList = this._queueItemList.size();\n    }\n", "public void bind() throws MalformedURLException {\n        InstanceInfo myInfo = ApplicationInfoManager.getInstance().getInfo();\n        String myInstanceId = ((AmazonInfo) myInfo.getDataCenterInfo()).get(AmazonInfo.MetaDataKey.instanceId);\n        String myZone = ((AmazonInfo) myInfo.getDataCenterInfo()).get(AmazonInfo.MetaDataKey.availabilityZone);\n\n        final List<String> ips = getCandidateIps();\n        Ordering<NetworkInterface> ipsOrder = Ordering.natural().onResultOf(new Function<NetworkInterface, Integer>() {\n            public Integer apply(NetworkInterface networkInterface) {\n                return ips.indexOf(networkInterface.getPrivateIpAddress());\n            }\n        });\n\n        AmazonEC2 ec2Service = getEC2Service();\n        String subnetId = instanceData(myInstanceId, ec2Service).getSubnetId();\n\n        DescribeNetworkInterfacesResult result = ec2Service\n                .describeNetworkInterfaces(new DescribeNetworkInterfacesRequest()\n                                .withFilters(new Filter(\"private-ip-address\", ips))\n                                .withFilters(new Filter(\"status\", Lists.newArrayList(\"available\")))\n                                .withFilters(new Filter(\"subnet-id\", Lists.newArrayList(subnetId)))\n                );\n\n        if (result.getNetworkInterfaces().isEmpty()) {\n            logger.info(\"No ip is free to be associated with this instance. Candidate ips are: {} for zone: {}\", ips, myZone);\n        } else {\n            NetworkInterface selected = ipsOrder.min(result.getNetworkInterfaces());\n            ec2Service.attachNetworkInterface(\n                    new AttachNetworkInterfaceRequest()\n                            .withNetworkInterfaceId(selected.getNetworkInterfaceId())\n                            .withDeviceIndex(1)\n                            .withInstanceId(myInstanceId)\n            );\n        }\n    }", "public void auditAccessMessage(String resource,String action,SSOToken token){\n  init();\n  if (accessLogger != null && msgProvider != null) {\n    final LogRecord record=msgProvider.createLogRecord(\"ATTEMPT_ACCESS\",new String[]{resource,action},token);\n    ", "    private void _clear(int dataset) {\n        _checkDatasetIndex(dataset);\n        _xyInvalid = true;\n        Vector points = (Vector)_points.elementAt(dataset);\n        // Vector.clear() is new in JDK1.2, so we use just\n        // create a new Vector here so that we can compile\n        // this with JDK1.1 for use in JDK1.1 browsers\n        _points.setElementAt(new Vector(), dataset);\n        repaint();\n    }\n", "public static void abandon ( int id , String msg , AsyncCallback < ChangeInfo > cb ) { MessageInput input = MessageInput . create ( ) ; input . message ( emptyToNull ( msg ) ) ; call ( id , STR_ ) . post ( input , cb ) ; }", "private boolean isEdgeGlowEnabled ( ) { if ( mAdapter == null || mAdapter . isEmpty ( ) ) return BOOL_ ; return mMaxX > NUM_ ; }", "@Override\n\tpublic com.liferay.commerce.discount.model.CommerceDiscount fetchCommerceDiscountByUuidAndGroupId(\n\t\tString uuid, long groupId) {\n\t\treturn _commerceDiscountLocalService.fetchCommerceDiscountByUuidAndGroupId(uuid,\n\t\t\tgroupId);\n\t}", "protected SecretKey generateSecretKey(String algorithm,int keyStrength) throws EncryptionException {\n  try {\n    KeyGenerator keygen=KeyGenerator.getInstance(algorithm);\n    if (keyStrength != 0) {\n      keygen.init(keyStrength);\n    }\n    return keygen.generateKey();\n  }\n catch (  NoSuchAlgorithmException ne) {\n    throw new EncryptionException(ne);\n  }\n}\n", "@Override\n\tpublic Object executeJavaScript(String code) throws CrawljaxException {\n\t\ttry {\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) browser;\n\t\t\treturn js.executeScript(code);\n\t\t} catch (WebDriverException e) {\n\t\t\tthrowIfConnectionException(e);\n\t\t\tthrow new CrawljaxException(e);\n\t\t}\n\t}", "private Control createToolControl(Composite toolPanel,Tool tool){\n  try {\n    return tool.setupComposite(toolPanel);\n  }\n catch (  RuntimeException errSetup) {\n    logger.log(SEVERE,\"error creating tool \" + tool.getName());\n  }\n  return null;\n}\n", "    public Coordinates getCoordinates(int rowIndex) {\n        if (_rowCoordinates != null) {\n            Vector row = (Vector) dataVector.get(rowIndex);\n            return _rowCoordinates.getCoordinates(row);\n        }\n        return null;\n    }\n", "public static Object lookup(final Context context,final String name,final Class<?> clazz) throws Exception {\n  return context.lookup(name);\n}\n", "public double uniformRand(){\n  return (rand.nextBoolean()) ? 1.0 : -1.0;\n}\n", "    public String funExecToString(String fname, String[]args){\n        Response r = tell(funCall(fname, args) + END);\n        if(!r.error())\n            return r.getOutput();\n        else\n            return HUH;\n    }\n", "\tpublic void setSelectFood(String selectFood) {\n\t\tif (Debug.DEBUG ){\n\t\tSystem.out.println(\"Food gesetzt!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t}\n\t\tm_SelectFood = selectFood;\n\t\tSystem.out.println(m_SelectFood);\n\t\tIterator it = m_FoodList.iterator();\n\t\twhile(it.hasNext()){\n\t\t\tNutEntry nut = (NutEntry)it.next();\n\t\t\tif(nut.getName().equals(m_SelectFood)){\n\t\t\t\tm_ShowFood = new NutritionBean(nut);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n", "public void beforeInsert(int index,short element){\n  if (index > size || index < 0)   throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \"+ size);\n  ensureCapacity(size + 1);\n  System.arraycopy(elements,index,elements,index + 1,size - index);\n  elements[index]=element;\n  size++;\n}\n", "@Override\n    public ListAssignmentsForHITResult listAssignmentsForHIT(ListAssignmentsForHITRequest request) {\n        request = beforeClientExecution(request);\n        return executeListAssignmentsForHIT(request);\n    }", "public LessConstraint(double constraintValue){\n  super(Double.valueOf(constraintValue));\n}\n", "public void updateArrayMember ( final TypeMember member , final BaseType baseType , final int numberOfElements ) throws CouldntSaveDataException ;", "public boolean sort(String inPackage){\n  if (isAddressSet) {\n    try {\nswitch (inPackage.charAt(0)) {\ncase 'V':\n        setSpeed(Integer.parseInt(inPackage.substring(1)));\n      break;\ncase 'X':\n    eStop();\n  break;\ncase 'F':\nhandleFunction(inPackage);\nbreak;\ncase 'f':\nforceFunction(inPackage.substring(1));\nbreak;\ncase 'R':\nsetDirection(!inPackage.endsWith(\"0\"));\nbreak;\ncase 'r':\naddressRelease();\nbreak;\ncase 'd':\naddressDispatch();\nbreak;\ncase 'L':\naddressRelease();\nint addr=Integer.parseInt(inPackage.substring(1));\nsetAddress(addr,true);\nbreak;\ncase 'S':\naddressRelease();\naddr=Integer.parseInt(inPackage.substring(1));\nsetAddress(addr,false);\nbreak;\ncase 'E':\naddressRelease();\nrequestEntryFromID(inPackage.substring(1));\nbreak;\ncase 'C':\nsetLocoForConsistFunctions(inPackage.substring(1));\nbreak;\ncase 'c':\nsetRosterLocoForConsistFunctions(inPackage.substring(1));\nbreak;\ncase 'I':\nidle();\nbreak;\ncase 's':\nhandleSpeedStepMode(Integer.parseInt(inPackage.substring(1)));\nbreak;\ncase 'm':\nhandleMomentary(inPackage.substring(1));\nbreak;\ncase 'q':\nhandleRequest(inPackage.substring(1));\nbreak;\n}\n}\n catch (NullPointerException e) {\nlog.warn(\"No throttle frame to receive: \" + inPackage);\nreturn false;\n}\ntry {\nThread.sleep(20);\n}\n catch (java.lang.InterruptedException ex) {\n}\n}\n else {\nswitch (inPackage.charAt(0)) {\ncase 'L':\nint addr=Integer.parseInt(inPackage.substring(1));\nsetAddress(addr,true);\nbreak;\ncase 'S':\naddr=Integer.parseInt(inPackage.substring(1));\nsetAddress(addr,false);\nbreak;\ncase 'E':\nrequestEntryFromID(inPackage.substring(1));\nbreak;\ncase 'C':\nsetLocoForConsistFunctions(inPackage.substring(1));\nbreak;\ncase 'c':\nsetRosterLocoForConsistFunctions(inPackage.substring(1));\nbreak;\ndefault :\nbreak;\n}\n}\nif (inPackage.charAt(0) == 'Q') {\nshutdownThrottle();\nreturn false;\n}\nreturn true;\n}\n", "private long[][] computeDimensionMap(List<DoubleIntInt> z_ijs, final int dim, final int numc) {\n    // mapping cluster index -> dimensions\n    long[][] dimensionMap = new long[numc][((dim - 1) >> 6) + 1];\n    int max = Math.max(k * l, 2);\n    for(int m = ", "public void insert(String name,long cnt){\n  if (_values == null) {\n    _values=new ArrayList<>(30);\n  }\n  _values.add(0,new Count(this,name,cnt));\n}\n", "public ResourcesPoet addDimension(String name,String value){\n  Element bool=document.createElement(\"dimen\");\n  bool.setAttribute(\"name\",name);\n  bool.appendChild(document.createTextNode(value));\n  resourceElement.appendChild(bool);\n  return this;\n}\n", "\tpublic Date setDayOfMonth(final Date inputDate, final int dayOfMonth) {\n\t\tgetCalendar().setTime(inputDate);\n\t\tgetCalendar().set(Calendar.DAY_OF_MONTH, dayOfMonth);\n\t\treturn getCalendar().getTime();\n\t}\n", "\tprotected void endParsing(boolean errorExit) {\n\t\tif (!errorExit) {\n\t\t\tassertFalse(parser.hadErrors());\n\t\t}\n\t\ttermParser.close();\n\t}\n", "@SubscribeEvent\n    public void onRenderTick(TickEvent.RenderTickEvent ev)\n    {\n        if (ev.phase == Phase.START)\n        {\n            if (this.isOverriding())\n            {\n                updateYawAndPitch();\n            }\n        }\n    }", "public AccountHeaderBuilder addProfiles(@NonNull IProfile... profiles){\n  if (this.mProfiles == null) {\n    this.mProfiles=new ArrayList<>();\n  }\n  Collections.addAll(this.mProfiles,IdDistributor.checkIds(profiles));\n  return this;\n}\n", "public AlertDialog initiateScan ( ) { return initiateScan ( ALL_CODE_TYPES ) ; }", "    protected boolean isSpinning() {\n        return this.isSpinning;\n    }\n", "public GridCacheConcurrentMapImpl ( GridCacheContext ctx , GridCacheMapEntryFactory factory , int initialCapacity , float loadFactor , int concurrencyLevel ) { this . ctx = ctx ; this . factory = factory ; map = new ConcurrentHashMap8 < > ( initialCapacit", "public void release ( ) throws ReplicatorException , InterruptedException ;", "public void parse ( ) { try { start ( ) ; } catch ( ParseException e ) { throw new CustomDrawingParserRuntimeException ( e ) ; } catch ( TokenMgrException e ) { throw new CustomDrawingParserRuntimeException ( e ) ; } }", "    public void setChirality(String value) throws RuntimeException {\n        StringSTAttribute att = null;\n        if (_att_chirality == null) {\n            _att_chirality = (StringSTAttribute) attributeFactory.getAttribute(\"chirality\", \"molecule\");\n     ", "private int findToken ( final String in , int start , MarkToken token ) { int pos = start ; while ( pos < in . length ( ) ) { if ( this . getToken ( in , pos ) == token ) { return pos ; } pos ++ ; } return - NUM_ ; }", "private void notifyOnScrollingUp(@NonNull final View animatedView, final int scrollPosition) {\n        for (HideViewOnScrollAnimationListener listener : listeners) {\n            listener.onScrollingUp(this, animatedView, scrollPosition);\n        }\n    }", "public BordersBuilder all(final Length size, final Color color,\n\t\t\t\t\t\t\t  final BorderAttribute.Style style) {\n\t\treturn this.all(new BorderAttribute(size, color, style));\n\t}", "  private String getFieldValue(String aValue, String aHintValue) {\n    String lResult = aValue;\n    if (aValue.equals(aHintValue))\n      lResult = \"\";\n    return lResult;\n  }\n", "public static XDSConsumerAuditor getAuditor()\n\t{\n\t\tAuditorModuleContext ctx = AuditorModuleContext.getContext();\n\t\treturn (XDSConsumerAuditor)ctx.getAuditor(XDSConsumerAuditor.class);\n\t}", "Response removeCookie ( String name ) ;", "public static void spooky4(final long[] triple,final long seed,final long[] tuple){\n  long h0, h1, h2, h3;\n  h0=seed;\n  h1=ARBITRARY_BITS + triple[0];\n  h2=ARBITRARY_BITS + triple[1];\n  h3=ARBITRARY_BITS + triple[2];\n  h2=Long.rotateLeft(h2,50);\n  h2+=h3;\n  h0^=h2;\n  h3=Long.rotateLeft(h3,52);\n  h3+=h0;\n  h1^=h3;\n  h0=Long.rotateLeft(h0,30);\n  h0+=h1;\n  h2^=h0;\n  h1=Long.rotateLeft(h1,41);\n  h1+=h2;\n  h3^=h1;\n  h2=Long.rotateLeft(h2,54);\n  h2+=h3;\n  h0^=h2;\n  h3=Long.rotateLeft(h3,48);\n  h3+=h0;\n  h1^=h3;\n  h0=Long.rotateLeft(h0,38);\n  h0+=h1;\n  h2^=h0;\n  h1=Long.rotateLeft(h1,37);\n  h1+=h2;\n  h3^=h1;\n  h2=Long.rotateLeft(h2,62);\n  h2+=h3;\n  h0^=h2;\n  h3=Long.rotateLeft(h3,34);\n  h3+=h0;\n  h1^=h3;\n  h0=Long.rotateLeft(h0,5);\n  h0+=h1;\n  h2^=h0;\n  h1=Long.rotateLeft(h1,36);\n  h1+=h2;\n  h3^=h1;\nswitch (tuple.length) {\ncase 4:\n    tuple[3]=h3;\ncase 3:\n  tuple[2]=h2;\ncase 2:\ntuple[1]=h1;\ncase 1:\ntuple[0]=h0;\n}\n}\n", "boolean isLoaded ( ) ;", "\tpublic DefaultCacheEntry getCacheEntry(CacheKey cacheKey) {\n\t\tDefaultCacheEntry dco = internalGetCacheEntry(cacheKey) ;\n\t\t\n\t\tif (dco != null) {\n\t\t\t// update the access time and hits for the object\n\t\t\tsynchronized(dco) { \n\t\t\t\tdco.getCacheObjectHit() ; \n\t\t\t}\n\t\t}\n\t\t\n\t\treturn dco ;\n\t}\n", "public static JSONObject HttpGet ( String url , String bssid , HeaderPair ... headers ) { int port = EspProxyServerImpl . getInstance ( ) . getEspProxyServerPort ( ) ; return executeHttpRequest ( url , port , METHOD_GET , bssid , null , BOOL_ , headers ) ", "public static Document newDocument ( ) { try { return newBuilder ( ) . newDocument ( ) ; } catch ( ParserConfigurationException e ) { throw new RuntimeException ( STR_ , e ) ; } }", "private static InputStream openSystemFile(String filename) throws FileNotFoundException {\n  try {\n    return new FileInputStream(filename);\n  }\n catch (  FileNotFoundException e) {\n    String resname=filename.replace(File.separatorChar,'/');\n    InputStream result=ClassLoader.getSystemResourceAsStream(resname);\n    if (result == null) {\n      throw e;\n    }\n    return result;\n  }\n}\n", "public List<MiningField> getMiningFieldsForModel(String modelId) {\n        PMML4Model model = modelsMap.get(modelId);\n        if (model != null) {\n            return model.getRawMiningFields();\n        }\n        return null;\n    }", "private Object tryEvalAsMethod(Class<?> clazz,Object target,List<Object> args){\n  Method method=findMethod(clazz,args);\n  if (method == null) {\n    return null;\n  }\n  try {\n    return Values.ensureNotNull(location(),method.invoke(target,Values.convertArgs(location(),method.getParameterTypes(),args)));\n  }\n catch (  IllegalAccessException|IllegalArgumentException e) {\n    throw new EvalException(location(),\"exception when accessing method '%s': %s.\",name(),e.getMessage());\n  }\ncatch (  InvocationTargetException e) {\n    throw new EvalException(Issue.create(location(),\"exception when invoking method '%s': %s.\",name(),e.getCause()));\n  }\n}\n", "public String logEvent(IdmAuditLog log) {\n\t\tauditDataService.addLog(log);\n\t\treturn log.getLogId();\n\t\t\n\t}", "private void insufficientStores(Set allStores,Collection alreadyUsed,boolean onlyLog){\n  final String regionStat=regionStatus(this.prRegion,allStores,alreadyUsed,onlyLog);\n  final char newLine;\n  if (onlyLog) {\n    newLine=' ';\n  }\n else {\n    newLine='\\n';\n  }\n  final StringId notEnoughValidNodes;\n  if (alreadyUsed.isEmpty()) {\n    notEnoughValidNodes=LocalizedStrings.PRHARRedundancyProvider_UNABLE_TO_FIND_ANY_MEMBERS_TO_HOST_A_BUCKET_IN_THE_PARTITIONED_REGION_0;\n  }\n else {\n    notEnoughValidNodes=LocalizedStrings.PRHARRedundancyProvider_CONFIGURED_REDUNDANCY_LEVEL_COULD_NOT_BE_SATISFIED_0;\n  }\n  final Object[] notEnoughValidNodesArgs=new Object[]{PRHARedundancyProvider.INSUFFICIENT_STORES_MSG,newLine + regionStat + newLine};\n  if (onlyLog) {\n    logger.warn(LocalizedMessage.create(notEnoughValidNodes,notEnoughValidNodesArgs));\n  }\n else {\n    throw new PartitionedRegionStorageException(notEnoughValidNodes.toLocalizedString(notEnoughValidNodesArgs));\n  }\n}\n", "public void popFragment ( Bundle navBundle ) { mStackManager . popFragment ( this , mState , mConfig , navBundle ) ; if ( mListener != null ) { mListener . didDismissFragment ( ) ; } }", "protected final void writeQ(ByteBuffer buf,long value){\n  buf.putLong(value);\n}\n", "public UnicastThread(InetAddress host,int port) throws IOException {\n  super(\"unicast request\");\n  setDaemon(true);\n  int backlog=Integer.getInteger(SystemProperties.LRMI_ACCEPT_BACKLOG,SystemProperties.LRMI_ACCEPT_BACKLOG_DEFUALT);\n  this.host=host;\n  if (port == 0) {\n    try {\n      listen=new ServerSocket(Constants.getDiscoveryPort(),backlog,host);\n    }\n catch (    IOException e) {\n      logger.log(Levels.HANDLED,\"failed to bind to default port\",e);\n    }\n  }\n  if (listen == null) {\n    listen=new ServerSocket(port,backlog,host);\n  }\n  this.port=listen.getLocalPort();\n}\n", "public CompletableFuture<List<TableEntry<byte[], byte[]>>> readTable(final String tableName,\n                                                                         final List<TableKey<byte[]>> keys,\n                                                                         String delegationToken,\n                                                                         final long clientRequestId) {\n        final CompletableFuture<List<TableEntry<byte[], byte[]>>> result = new CompletableFuture<>();\n        final Controller.NodeUri uri = getTableUri(tableName);\n        final WireCommandType type = WireCommandType.READ_TABLE;\n        final long requestId = (clientRequestId == RequestTag.NON_EXISTENT_ID) ? idGenerator.get() : clientRequestId;\n\n        final FailingReplyProcessor replyProcessor = new FailingReplyProcessor() {\n\n            @Override\n            public void connectionDropped() {\n                log.warn(requestId, \"readTable {} Connection dropped\", tableName);\n                result.completeExceptionally(\n                        new WireCommandFailedException(type, WireCommandFailedException.Reason.ConnectionDropped));\n            }\n\n            @Override\n            public void wrongHost(WireCommands.WrongHost wrongHost) {\n                log.warn(requestId, \"readTable {} wrong host\", tableName);\n                result.completeExceptionally(new WireCommandFailedException(type, WireCommandFailedException.Reason.UnknownHost));\n            }\n\n            @Override\n            public void noSuchSegment(WireCommands.NoSuchSegment noSuchSegment) {\n                log.warn(requestId, \"readTable {} NoSuchSegment\", tableName);\n                result.completeExceptionally(new WireCommandFailedException(type, WireCommandFailedException.Reason.SegmentDoesNotExist));\n            }\n\n            @Override\n            public void tableRead(WireCommands.TableRead tableRead) {\n                log.debug(requestId, \"readTable {} successful.\", tableName);\n                List<TableEntry<byte[], byte[]>> tableEntries = tableRead.getEntries().getEntries().stream()\n                                                                         .map(e -> new TableEntryImpl<>(convertFromWireCommand(e.getKey()), getArray(e.getValue().getData())))\n                                                                         .collect(Collectors.toList());\n                result.complete(tableEntries);\n            }\n\n            @Override\n            public void processingFailure(Exception error) {\n                log.error(requestId, \"readTable {} failed\", tableName, error);\n                handleError(error, result, type);\n            }\n\n            @Override\n            public void authTokenCheckFailed(WireCommands.AuthTokenCheckFailed authTokenCheckFailed) {\n                result.completeExceptionally(\n                        new WireCommandFailedException(new AuthenticationException(authTokenCheckFailed.toString()),\n                                                       type, WireCommandFailedException.Reason.AuthFailed));\n            }\n        };\n\n        List<ByteBuf> buffersToRelease = new ArrayList<>();\n        // the version is always NO_VERSION as read returns the latest version of value.\n        List<WireCommands.TableKey> keyList = keys.stream().map(k -> {\n            ByteBuf buffer = wrappedBuffer(k.getKey());\n            buffersToRelease.add(buffer);\n            return new WireCommands.TableKey(buffer, WireCommands.TableKey.NO_VERSION);\n        }).collect(Collectors.toList());\n\n        WireCommands.ReadTable request = new WireCommands.ReadTable(requestId, tableName, delegationToken, keyList);\n        sendRequestAsync(request, replyProcessor, result, ModelHelper.encode(uri));\n        return result\n                .whenComplete((r, e) -> release(buffersToRelease));\n    }", "public static void importExpressionSubstitutions ( final CConnection connection , final int rawModuleId , final int moduleId ) throws SQLException { Preconditions . checkNotNull ( connection , STR_ ) ; final String query = STR_ + CTableNames . EXPRESSION_", "public void addColumn(String name,int sqlType,String sqlTypeName,int precision,int scale){\n  if (rows != null && rows.size() > 0) {\n    throw new IllegalStateException(\"Cannot add a column after adding rows\");\n  }\n  if (name == null) {\n    name=\"C\" + (col", "\tpublic BaseT20special (short id) {\n\t\tthis.setId(id);\n\t\tinitialize();\n\t}\n", "\tpublic boolean isConnected(){\n\t\treturn validOAuthToken;\n\t}\n", "public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(5);\n  newVector.addElement(new Option(\"\\tNumber of bins for equal-width discretization\\n\" + \"\\t(default 10).\\n\",\"B\",1,\"-B <int>\"));\n  newVector.addElement(new Option(\"\\tWhether to delete empty bins after discretization\\n\" + \"\\t(default false).\\n\",\"E\",0,\"-E\"));\n  newVector.addElement(new Option(\"\\tWhether to minimize absolute error, rather than squared error.\\n\" + \"\\t(default false).\\n\",\"A\",0,\"-A\"));\n  newVector.addElement(new Option(\"\\tUse equal-frequency instead of equal-width discretization.\",\"F\",0,\"-F\"));\n  newVector.addElement(new Option(\"\\tWhat type of density estimator to use: 0=histogram/1=kernel/2=normal (default: 0).\",\"K\",1,\"-K\"));\n  newVector.addAll(Collections.list(super.listOptions()));\n  return newVector.elements();\n}\n", "private String calculateAutocompleteResourceUrl(\n            RenderRequest request, RenderResponse response) {\n        final HttpServletRequest httpRequest =\n                this.portalRequestUtils.getPortletHttpRequest(request);\n        final IPortalUrlBuilder portalUrlBuilder =\n                this.portalUrlProvider.getPortalUrlBuilderByPortletFName(\n                        httpRequest, \"search\", UrlType.RESOURCE);\n        final IPortletUrlBuilder portletUrlBuilder =\n                portalUrlBuilder.getPortletUrlBuilder(portalUrlBuilder.getTargetPortletWindowId());\n        portletUrlBuilder.setResourceId(AJAX_RESPONSE_RESOURCE_ID);\n        return portletUrlBuilder.getPortalUrlBuilder().getUrlString();\n    }", "public Token[] tokenize(String input) \n    {\n        List tokens = new ArrayList();\n        int cursor = 0;\n        while (cursor<input.length()) {\n\t    char ch = input.charAt(cursor);\n\t    if (Character.isWhitespace(ch)) {\n                cursor++;\n\t    } else if (Character.isLetter(ch)) {\n                StringBuffer buf = new StringBuffer(\"\");\n                while (cursor<input.length() && Character.isLetter(input.charAt(cursor))) {\n                    buf.append(input.charAt(cursor));\n                    cursor++;\n                }\n                tokens.add(internSomething(buf.toString()));\n\t    } else if (Character.isDigit(ch)) {\n                StringBuffer buf = new StringBuffer(\"\");\n                while (cursor<input.length() && Character.isDigit(input.charAt(cursor))) {\n                    buf.append(input.charAt(cursor));\n                    cursor++;\n                }\n                tokens.add(internSomething(buf.toString()));\n\t    } else {\n                if (!ignorePunctuation) {\n                    StringBuffer buf = new StringBuffer(\"\");\n                    buf.append(ch);\n                    String str = buf.toString();\n                    tokens.add(internSomething(str));\n                }\n                cursor++;\n\t    }\n        }\n        return (Token[]) tokens.toArray(new BasicToken[tokens.size()]);\n    }", "    public void removeListener( SourcePictureListener listener ) {\n        logger.fine( \"SourcePicture.removeListener: SourcePicture \" + Integer.toString( hashCode() ) + \" removing listener \" + listener.getClass().toString() + \" hash: \" + Integer.toString( listener.hashCode() ) );\n        sourcePictureListeners.remove( listener );\n    }\n", "public synchronized void start ( ) { if ( expirationTime == - NUM_ ) { expired = BOOL_ ; expirationTime = LIFETIME + System . currentTimeMillis ( ) ; } else { throw new IllegalStateException ( STR_ + getTransactionID ( ) + STR_ ) ; } }", "public static byte [ ] objectToBytes ( Object obj ) throws java . io . IOException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; ObjectOutputStream oos = new ObjectOutputStream ( bos ) ; oos . writeObject ( obj ) ; oos . flush ( ) ; oos . close ( ) ; bos . close ( ) ; byte [ ] data = bos . toByteArray ( ) ; return data ; }", "public static boolean eval(String s) {\n        if (S.isEmpty(s)) return false;\n        if (\"false\".equalsIgnoreCase(s)) return false;\n        if (\"no\".equalsIgnoreCase(s)) return false;\n        return true;\n    }", "RESULT execute ( Monitor < RESULT > monitor ) throws Exception ;", "public static <T extends ImageGray<T>>\n\tPyramidFloat<T> standardPyramid( int width , int height ,\n\t\t\t\t\t\t\t\t\t double scale, double sigma ,\n\t\t\t\t\t\t\t\t\t int minSize, int maxLayers , Class<T> imageType ) {\n\t\tif( scale > 1.0 || scale < 0 )\n\t\t\tthrow new IllegalArgumentException(\"Scale must be 0 <= scale <= 1\");\n\n\t\tint numScales;\n\n\t\tif( scale == 1 || maxLayers == 1 ) {\n\t\t\tnumScales = 1;\n\t\t} else if ( scale == 0 ) {\n\t\t\tnumScales = maxLayers;\n\n\t\t\tdouble desiredReduction = minSize/(double)Math.min(width,height);\n\t\t\tscale = Math.pow(desiredReduction,1.0/(numScales-1));\n\n\t\t} else {\n\t\t\t// this is how much the input image needs to be shrunk\n\t\t\tdouble desiredReduction = minSize/(double)Math.min(width,height);\n\n\t\t\t// number the number of frames needed and round to the nearest integer\n\t\t\tnumScales = (int)(Math.log(desiredReduction)/Math.log(scale) + 0.5);\n\n\t\t\tif( numScales > maxLayers )\n\t\t\t\tnumScales = maxLayers;\n\n\t\t\t// compute a new scale factor using this number of scales\n\t\t\tscale = Math.pow(desiredReduction,1.0/numScales);\n\n\t\t\t// add one since the first scale is going to be the original image\n\t\t\tnumScales++;\n\t\t}\n\n\t\tInterpolatePixelS<T> interp = FactoryInterpolation.bilinearPixelS(imageType, BorderType.EXTENDED);\n\n\t\tif( sigma > 0 ) {\n\t\t\tdouble layerSigma = sigma*Math.sqrt(Math.pow(scale,-2)-1);\n\n\t\t\tdouble scaleFactors[] = new double[ numScales ];\n\t\t\tdouble scaleSigmas[] = new double[ numScales ];\n\n\t\t\tscaleFactors[0] = 1;\n\t\t\tscaleSigmas[0] = layerSigma;\n\t\t\tfor( int i = 1; i < numScales; i++ ) {\n\t\t\t\tscaleFactors[i] = scaleFactors[i-1]/scale;\n\t\t\t\tscaleSigmas[i] = layerSigma;\n\t\t\t}\n\n\t\t\treturn new PyramidFloatGaussianScale<>(interp, scaleFactors, scaleSigmas, imageType);\n\t\t} else {\n\t\t\tdouble scaleFactors[] = new double[ numScales ];\n\n\t\t\tscaleFactors[0] = 1;\n\t\t\tfor( int i = 1; i < numScales; i++ ) {\n\t\t\t\tscaleFactors[i] = scaleFactors[i-1]/scale;\n\t\t\t}\n\n\t\t\treturn new PyramidFloatScale<>(interp, scaleFactors, imageType);\n\t\t}\n\t}", "    protected int checkXMLOk(String path) {\n        ParseResult pr = new ParseResult(path);\n        if (!pr.hasDTD()) {\n            //log.debug(\"checkXMLOk[nodtd] - 0\");\n            return 0;\n        } else {\n            for (int i=0; i<pr.getResultList().size();i++) {\n                ErrorStruct err = (ErrorStruct)pr.getResultList().elementAt(i);\n            }\n            return (pr.getResultList().size() == 0) ? 1 : -1;\n        }\n    }\n", "\t protected String doSOAP(HttpServletRequest req) throws ServletException{\n\n\t\t throw new ServletException(\"SOAP result not supported\");\n\t }   \n", "@Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){\n  if (uri == null) {\n    LogUtils.log(this,Log.WARN,NULL_URI_FORMAT_STRING);\n    return null;\n  }\n  final SQLiteQueryBuilder queryBuilder=new SQLiteQueryBuilder();\n  queryBuilder.setTables(LabelsTable.TABLE_NAME);\n  String groupBy=null;\nswitch (sUriMatcher.match(uri)) {\ncase LABELS:\n    if (TextUtils.isEmpty(sortOrder)) {\n      sortOrder=LabelsTable.KEY_ID;\n    }\n  break;\ncase LABELS_ID:\nfinal String labelIdString=uri.getLastPathSegment();\nfinal int labelId;\ntry {\nlabelId=Integer.parseInt(labelIdString);\n}\n catch (NumberFormatException e) {\nLogUtils.log(this,Log.WARN,UNKNOWN_URI_FORMAT_STRING,uri);\nreturn null;\n}\nfinal String where=String.format(\"%s = %d\",LabelsTable.KEY_ID,labelId);\nqueryBuilder.appendWhere(where);\nbreak;\ncase PACKAGE_SUMMARY:\nprojection=new String[]{LabelsTable.KEY_PACKAGE_NAME,\"COUNT(*)\"};\ngroupBy=LabelsTable.KEY_PACKAGE_NAME;\nsortOrder=LabelsTable.KEY_PACKAGE_NAME;\nbreak;\ndefault :\nLogUtils.log(this,Log.WARN,UNKNOWN_URI_FORMAT_STRING,uri);\nreturn null;\n}\ninitializeDatabaseIfNull();\nreturn queryBuilder.query(mDatabase,projection,selection,selectionArgs,groupBy,null,sortOrder);\n}\n", "public static int min ( final int a , final int b ) { return ( a <= b ) ? a : b ; }", "private Formula normalize(final LNGVector<Literal> ps, final LNGIntVector cs, final int rhs) {\n    int c = rhs;\n    int newSize = 0;\n    for (int i = 0; i < ps.size(); i++) {\n      if (cs.get(i) != 0) {\n        ps.set(newSize, ps.get(i));\n        cs.set(newSize, cs.get(i));\n        newSize++;\n      }\n    }\n    ps.removeElements(ps.size() - newSize);\n    cs.removeElements(cs.size() - newSize);\n    final SortedMap<Literal, Pair<Integer, Integer>> var2consts = new TreeMap<>();\n    for (int i = 0; i < ps.size(); i++) {\n      final Variable x = ps.get(i).variable();\n      Pair<Integer, Integer> consts = var2consts.get(x);\n      if (consts == null)\n        consts = new Pair<>(0, 0);\n      if (!ps.get(i).phase())\n        var2consts.put(x, new Pair<>(consts.first() + cs.get(i), consts.second()));\n      else\n        var2consts.put(x, new Pair<>(consts.first(), consts.second() + cs.get(i)));\n    }\n    final LNGVector<Pair<Integer, Literal>> csps = new LNGVector<>(var2consts.size());\n    for (final Map.Entry<Literal, Pair<Integer, Integer>> all : var2consts.entrySet()) {\n      if (all.getValue().first() < all.getValue().second()) {\n        c -= all.getValue().first();\n        csps.push(new Pair<>(all.getValue().second() - all.getValue().first(), all.getKey()));\n      } else {\n        c -= all.getValue().second();\n        csps.push(new Pair<>(all.getValue().first() - all.getValue().second(), all.getKey().negate()));\n      }\n    }\n    int sum = 0;\n    int zeros = 0;\n    cs.clear();\n    ps.clear();\n    for (final Pair<Integer, Literal> pair : csps) {\n      if (pair.first() != 0) {\n        cs.push(pair.first());\n        ps.push(pair.second());\n        sum += cs.back();\n      } else\n        zeros++;\n    }\n    ps.removeElements(ps.size() - csps.size() - zeros);\n    cs.removeElements(cs.size() - csps.size() - zeros);\n    boolean changed;\n    do {\n      changed = false;\n      if (c < 0)\n        return this.f.falsum();\n      if (sum <= c)\n        return this.f.verum();\n      assert cs.size() > 0;\n      int div = c;\n      for (int i = 0; i < cs.size(); i++)\n        div = gcd(div, cs.get(i));\n      if (div != 0 && div != 1) {\n        for (int i = 0; i < cs.size(); i++)\n          cs.set(i, cs.get(i) / div);\n        c = c / div;\n      }\n      if (div != 1 && div != 0)\n        changed = true;\n    } while (changed);\n    final Literal[] lits = new Literal[ps.size()];\n    for (int i = 0; i < lits.length; i++)\n      lits[i] = ps.get(i);\n    final int[] coeffs = new int[cs.size()];\n    for (int i = 0; i < coeffs.length; i++)\n      coeffs[i] = cs.get(i);\n    return this.f.pbc(CType.LE, c, lits, coeffs);\n  }", "private void writePatternList(final PartitionData partition,int offset,int every,final String codonPrefix,final boolean unique,final boolean strip,final XMLWriter writer){\n  Alignment alignment=partition.getAlignment();\n  int from=partition.getFromSite();\n  int to=partition.getToSite();\n  int partEvery=partition.getEvery();\n  if (partEvery > 1 && every > 1)   throw new IllegalArgumentException();\n  if (from < 1)   from=1;\n  every=Math.max(partEvery,every);\n  from+=offset;\n  SitePatterns patterns=new SitePatterns(alignment,null,from - 1,to - 1,every,strip,unique);\n  writer.writeComment(\"The \" + (unique ? \"unique \" : \"\") + \"patterns from \"+ from+ \" to \"+ (to > 0 ? to : \"end\")+ ((every > 1) ? \" every \" + every : \"\"),\"npatterns=\" + patterns.getPatternCount());\n  List<Attribute> attributes=new ArrayList<Attribute>();\n  if (codonPrefix != null) {\n    attributes.add(new Attribute.Default<String>(XMLParser.ID,partition.getPrefix() + codonPrefix + SitePatternsParser.PATTERNS));\n  }\n  attributes.add(new Attribute.Default<String>(\"from\",\"\" + from));\n  if (to >= 0)   attributes.add(new Attribute.Default<String>(\"to\",\"\" + to));\n  if (every > 1) {\n    attributes.add(new Attribute.Default<String>(\"every\",\"\" + every));\n  }\n  if (!unique) {\n    attributes.add(new Attribute.Default<Boolean>(SitePatternsParser.UNIQUE,false));\n  }\n  if (strip) {\n    attributes.add(new Attribute.Default<Boolean>(SitePatternsParser.STRIP,false));\n  }\n  writer.writeOpenTag(SitePatternsParser.PATTERNS,attributes);\n  writer.writeIDref(AlignmentParser.ALIGNMENT,alignment.getId());\n  writer.writeCloseTag(SitePatternsParser.PATTERNS);\n}\n", "public void marshall(ContainerOverrides containerOverrides, ProtocolMarshaller protocolMarshaller) {\n\n        if (containerOverrides == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(containerOverrides.getVcpus(), VCPUS_BINDING);\n            protocolMarshaller.marshall(containerOverrides.getMemory(), MEMORY_BINDING);\n            protocolMarshaller.marshall(containerOverrides.getCommand(), COMMAND_BINDING);\n            protocolMarshaller.marshall(containerOverrides.getInstanceType(), INSTANCETYPE_BINDING);\n            protocolMarshaller.marshall(containerOverrides.getEnvironment(), ENVIRONMENT_BINDING);\n            protocolMarshaller.marshall(containerOverrides.getResourceRequirements(), RESOURCEREQUIREMENTS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "void removeVertexLabel(VertexLabel vertexLabel, boolean preserveData) {\n        getTopology().lock();\n        String fn = this.name + \".\" + VERTEX_PREFIX + vertexLabel.getName();\n        if (!uncommittedRemovedVertexLabels.contains(fn)) {\n            uncommittedRemovedVertexLabels.add(fn);\n            TopologyManager.removeVertexLabel(this.sqlgGraph, vertexLabel);\n            for (EdgeRole er : vertexLabel.getOutEdgeRoles().values()) {\n                er.remove(preserveData);\n            }\n            for (EdgeRole er : vertexLabel.getInEdgeRoles().values()) {\n                er.remove(preserveData);\n            }\n            if (!preserveData) {\n                vertexLabel.delete();\n            }\n            getTopology().fire(vertexLabel, \"\", TopologyChangeAction.DELETE);\n        }\n\n    }", "public void setItemText(int index, String text) {\n        index += getIndexOffset();\n        listBox.setItemText(index, text);\n        reload();\n    }", "public static String convertDTCellValueToString( DTCellValue52 dcv ) {\n        switch ( dcv.getDataType() ) {\n            case BOOLEAN:\n                Boolean booleanValue = dcv.getBooleanValue();\n                return ( booleanValue == null ? null : booleanValue.toString() );\n            case DATE:\n                Date dateValue = dcv.getDateValue();\n                return ( dateValue == null ? null : DateUtils.format( dcv.getDateValue() ) );\n            case NUMERIC:\n                BigDecimal numericValue = (BigDecimal) dcv.getNumericValue();\n                return ( numericValue == null ? null : numericValue.toPlainString() );\n            case NUMERIC_BIGDECIMAL:\n                BigDecimal bigDecimalValue = (BigDecimal) dcv.getNumericValue();\n                return ( bigDecimalValue == null ? null : bigDecimalValue.toPlainString() );\n            case NUMERIC_BIGINTEGER:\n                BigInteger bigIntegerValue = (BigInteger) dcv.getNumericValue();\n                return ( bigIntegerValue == null ? null : bigIntegerValue.toString() );\n            case NUMERIC_BYTE:\n                Byte byteValue = (Byte) dcv.getNumericValue();\n                return ( byteValue == null ? null : byteValue.toString() );\n            case NUMERIC_DOUBLE:\n                Double doubleValue = (Double) dcv.getNumericValue();\n                return ( doubleValue == null ? null : doubleValue.toString() );\n            case NUMERIC_FLOAT:\n                Float floatValue = (Float) dcv.getNumericValue();\n                return ( floatValue == null ? null : floatValue.toString() );\n            case NUMERIC_INTEGER:\n                Integer integerValue = (Integer) dcv.getNumericValue();\n                return ( integerValue == null ? null : integerValue.toString() );\n            case NUMERIC_LONG:\n                Long longValue = (Long) dcv.getNumericValue();\n                return ( longValue == null ? null : longValue.toString() );\n            case NUMERIC_SHORT:\n                Short shortValue = (Short) dcv.getNumericValue();\n                return ( shortValue == null ? null : shortValue.toString() );\n            default:\n                return dcv.getStringValue();\n        }\n    }", "protected void backout(boolean reUse,\n                           Transaction transaction)\n                    throws ObjectManagerException {\n        final String methodName = \"backout\";\n        if (Tracing.isAnyTracingEnabled() && trace.isEntryEnabled())\n            trace.entry(this, cclass, methodName, new Object[] { new Boolean(reUse),\n                                                                transaction });\n\n        boolean persistentWorkDone = false;\n        ManagedObject[] lockedManagedObjects;\n        int numberOfLockedManagedObjects = 0;\n\n        synchronized (this) {\n            // To defend against two application threads completing the same transaction and trying to\n            // continue with it at the same time we check that the Transaction still refers to this one,\n            // now that we are synchronized on the InternalTransaction.\n            if (transaction.internalTransaction != this) {\n                if (Tracing.isAnyTracingEnabled() && trace.isEntryEnabled())\n                    trace.exit(this, cclass,\n                               methodName,\n                               new Object[] { \"via InvalidTransactionException\", transaction.internalTransaction }\n                                    );\n                // Same behaviour as if the transaction was completed and replaced by\n                // objectManagerState.dummyInternalTransaction.\n                throw new InvalidStateException(this,\n                                                InternalTransaction.stateTerminated,\n                                                InternalTransaction.stateNames[InternalTransaction.stateTerminated]);\n\n            } // if (transaction.internalTransaction != this).\n\n            // Only call prePrepare if we have not already prepared the transaction.\n            if (state == stateInactive\n                || state == stateActiveNonPersistent\n                || state == stateActivePersistent) {\n                prePrepare(transaction);\n            } // If already prepared.\n\n            testState(nextStateForStartBackout);\n            setState(nextStateForStartBackout);\n\n            preBackout(transaction); // Tell ManagedObjects the outcome.\n\n            // Is there any logging to do?\n            if (state == stateBackingOutPersistent) {\n                persistentWorkDone = true;\n\n                TransactionBackoutLogRecord transactionBackoutLogRecord = new TransactionBackoutLogRecord(this);\n                objectManagerState.logOutput.writeNext(transactionBackoutLogRecord,\n                                                       -logSpaceReserved,\n                                                       true,\n                                                       true);\n                logSpaceReserved = 0;\n            } // If logging work to do.\n\n            // Drive the backout method for the included objects.\n            // The synchronized block prevents us from taking a checkpoint until all of the\n            // ManagedObjects have had their opportunity to update the ObjectStore. If a\n            // checkpoint is currently active we will update the current checkpoint set in\n            // the ObjectStore, if not we will update the next set of updates.\n            lockedManagedObjects = new ManagedObject[includedManagedObjects.size()];\n\n            boolean requiresCurrentPersistentCheckpoint = requiresPersistentCheckpoint\n                                                          || (objectManagerState.checkpointStarting == ObjectManagerState.CHECKPOINT_STARTING_PERSISTENT);\n\n            for (java.util.Iterator managedObjectIterator = includedManagedObjects.values().iterator(); managedObjectIterator.hasNext();) {\n                ManagedObject managedObject = (ManagedObject) managedObjectIterator.next();\n                long managedObjectSequenceNumber = ((Long) managedObjectSequenceNumbers.get(managedObject.owningToken)).longValue();\n\n                if (managedObject.lockedBy(transaction)) {\n                    managedObject.backout(transaction,\n                                          managedObjectSequenceNumber,\n                                          requiresCurrentPersistentCheckpoint);\n                    lockedManagedObjects[numberOfLockedManagedObjects++] = managedObject;\n                } else {\n                    ObjectManagerByteArrayOutputStream serializedBytes = (ObjectManagerByteArrayOutputStream) loggedSerializedBytes.get(managedObject.owningToken);\n                    managedObject.optimisticReplaceBackout(transaction,\n                                                           serializedBytes,\n                                                           managedObjectSequenceNumber,\n                                                           requiresCurrentPersistentCheckpoint);\n                } // if(managedObject.lockedBy(transaction)).\n\n            } // for... includedManagedObjects.\n\n            setState(nextStateForBackout);\n            transactionLock.unLock(objectManagerState);\n            postBackout(transaction); // Tell ManagedObjects the outcome is complete.\n            // Tidy up the transaction.\n            complete(reUse,\n                     transaction);\n        } // synchronized (this).\n\n        // We don't want to clear the transaction lock held by the managedObject otherwise\n        // ManagedObject.wasLocked() will not be able to give the past locked state. The\n        // Unlock point wa noted above so now notify the ManagedObject and give a new\n        // waiter a chance to acquire the lock. If a new transaction acquires the lock then\n        // ManagedObject.wasLocked will return its result for the new transaction and\n        // wasLocked() will then be true for an even later time.  Do this after we have release the\n        // synchronize lock on InternalTransaction so that we avoid deadlock with ManagedObjects\n        // that invoke synchronized InternalTransaction methods.\n        for (int i = 0; i < numberOfLockedManagedObjects; i++) {\n            synchronized (lockedManagedObjects[i]) {\n                lockedManagedObjects[i].notify();\n            } // synchronized (lockedManagedObjects[i]).\n        } // for... lockedManagedObjects.\n\n        // Tell the ObjectManager that we are done, once the transaction is unlocked\n        // in case it is needed for checkpoint.\n        objectManagerState.transactionCompleted(this,\n                                                persistentWorkDone);\n        // See if we need to delay while a checkpoint completes. Applications amy ask to reUSe\n        // the same transaction, if so we introduce the delay here. Internal transactions are never\n        // reUsed so we don't need to wory about blocking them. This call must be made when we\n        // are not synchronized on the transaction because it might block waiting for a checkpoint\n        // to complete if the log is full.\n        if (reUse)\n            objectManagerState.transactionPacing();\n\n        if (Tracing.isAnyTracingEnabled() && trace.isEntryEnabled())\n            trace.exit(this, cclass, methodName);\n    }", "public static void showDownloadMapsWindow(final String mapName){\n  showDownloadMapsWindow(Optional.of(mapName));\n}\n", "public void setIsolated(boolean isolated) {\n        if (isolated)\n            put(PdfName.I, PdfBoolean.PDFTRUE);\n        else\n            remove(PdfName.I);\n    }", "    public void removeBranchGraph(BranchGroup branchGroup){\n\tif (universe == null) {\n\t    throw new IllegalStateException(J3dI18N.getString(\"Locale4\"));\n\t}\n\n\tif (! branchGroup.getCapability(BranchGroup.ALLOW_DETACH)) {\n\t    throw new CapabilityNotSetException(J3dI18N.getString(\"Locale1\"));\n\t}\n\tuniverse.resetWaitMCFlag();\n\tsynchronized (universe.sceneGraphLock) {\n\t    doRemoveBranchGraph(branchGroup, null, 0);\n\t    universe.setLiveState.reset(this);\n\t}\n\tuniverse.waitForMC();\n    }\n", "public final void walkGraph ( Hashtable semNodesTable ) { Integer uid = new Integer ( myUID ) ; if ( semNodesTable . get ( uid ) != null ) return ; semNodesTable . put ( uid , this ) ; if ( params != null && params . length > NUM_ ) { for ( int i = NUM_ ;", "public UIGraphicTestCase ( String name ) { super ( name ) ; }", "\tprivate Method getMigrateRoutineToMysqlInfo() {\n\n\t\t// create migrateOracleTable method\n\t\tMethod method = new Method(null);\n\t\tmethod.setName(\"migrateRoutineToMysql\");\n\t\tmethod.setModuleName(\"MigrationMssql\");\n\t\tmethod.setCaption(\"MS SQL Default\");\n\t\tmethod.setDesc(\"Default method to migrate an \"\n\t\t\t\t+ \"MS SQL routine to MySQL.\");\n\t\tmethod.setSourceStructName(\"db.mssql.Routine\");\n\t\tmethod.setTargetPackageName(\"db.mysql\");\n\t\tmethod.setRating(1);\n\n\t\taddMigrateRoutineToMysqlInfoParameters(method);\n\n\t\treturn method;\n\t}\n", "\tpublic void close() {\n\t\ttry {\n\t\t\tif(!clientSockets[1].isClosed())\n\t\t\t\tclientSockets[1].close();\n\t\t\tif(!clientSockets[0].isClosed())\n\t\t\t\tclientSockets[0].close();\n\t\t\tserverSocket.close();\n\t\t} catch (IOException e) {\n\t\t\t// ignore ioexceptions as long as they occure during end of the game...\n\t\t}\n\t}\n", "  public PVector getA3() {\n    return a3;\n  }\n", "public static void e(String msg,Object... args){\n  if (!allowE)   return;\n  StackTraceElement caller=getCallerStackTraceElement();\n  String tag=generateTag(caller);\n  if (sLevel > LEVEL_ERROR) {\n    return;\n  }\n  if (args.length > 0) {\n    msg=String.format(msg,args);\n  }\n  Log.e(tag,msg);\n}\n", "@Override public boolean excludeGroup(ILdapEntry groupEntry,String groupObjectSid){\n  if (WELL_KNOWN_GROUP_SIDS.contains(groupObjectSid))   return true;\n  if (groupEntry == null)   return false;\n  int groupTypes=ServerUtils.getIntegerValue(groupEntry.getAttributeValues(ATTR_GROUP_TYPE));\n  String groupDomain=ServerUtils.getDomainFromDN(groupEntry.getDN());\n  if (((groupTypes & DOMAIN_LOCAL_GROUP_TYPE) != 0) && (groupDomain != null) && (joinedDomain != null)&& (!groupDomain.equalsIgnoreCase(joinedDomain)))   return true;\n  if ((groupTypes & SECURITY_GROUP_TYPE) == 0)   return true;\n  return false;\n}\n", "    protected void addTrace(AbandonedTrace trace) {\n        synchronized (this.traceList) {\n            this.traceList.add(trace);\n        }\n        setLastUsed();\n    }\n", "public void initialize(){\n  Thread athread=new Thread(new InitializeThread());\n  athread.setName(classname + \"initialize\");\n  athread.setPriority(Thread.MIN_PRIORITY);\n  athread.start();\n}\n", "    public DefineTextField setLeftMargin(final Integer aNumber) {\n        if ((aNumber != null) && ((aNumber < 0) || (aNumber > MAX_SPACE))) {\n            throw new IllegalArgumentRangeException(0, MAX_SPACE, aNumber);\n        }\n        leftMargin = aNumber;\n        return this;\n    }\n", "private static String url(final Route route) {\n\t\treturn route.getLinks().isEmpty()\n\t\t\t? null\n\t\t\t: route.getLinks().get(0).getHref().toString();\n\t}", "protected static double distance(Solution s1,Solution s2){\n  double distance=0.0;\n  for (int i=0; i < s1.getNumberOfObjectives(); i++) {\n    distance+=Math.pow(s1.getObjective(i) - s2.getObjective(i),2.0);\n  }\n  return Math.sqrt(distance);\n}\n", "public void start() {\n        MBeanServer server = getMbeanServer();\n        if (server != null) {\n            registerMBeanServer(server);\n        } else {\n            LOG.error(\"No MBeanServer available so cannot register mbean\");\n        }\n    }", "boolean isFinished ( ) ;", "    public String jsxGet_layoutGridLine() {\n        return getStyleAttribute(LAYOUT_GRID_LINE, null);\n    }\n", "public NotEqualsSpacePredicate ( Object expectedValue ) { super ( expectedValue , null ) ; }", "public void addVersionQueryCallback(OneSheeldVersionQueryCallback versionQueryCallback){\n  if (versionQueryCallback != null && !versionQueryCallbacks.contains(versionQueryCallback))   versionQueryCallbacks.add(versionQueryCallback);\n}\n", "    private void setResponseHeader(String name, String value) {\n        if (Config.LOGV) {\n            Log.i(LOG_TAG, \"Set response header \" + name + \": \" + value);\n        }\n        String mapValue[] = { name, value };\n        mResponseHeaders.put(name.toLowerCase(), mapValue);\n    }\n", "public boolean validateChannel(final Channel channel)\r\n    {\r\n\r\n        boolean ret = false;\r\n        final SetVarAction var = new SetVarAction(channel, \"testState\", \"1\");\r\n\r\n        ManagerResponse response = null;\r\n        try\r\n        {\r\n            AsteriskPBX pbx = (AsteriskPBX) PBXFactory.getActivePBX();\r\n            response = pbx.sendAction(var, 500);\r\n        }\r\n        catch (final Exception e)\r\n        {\r\n            ActivityHelper.logger.debug(e, e);\r\n            ActivityHelper.logger.error(\"getVariable: \" + e);\r\n        }\r\n        if ((response != null) && (response.getAttribute(\"Response\").compareToIgnoreCase(\"success\") == 0))\r\n        {\r\n            ret = true;\r\n        }\r\n\r\n        return ret;\r\n\r\n    }", "public void marshall(DescribeCertificateRequest describeCertificateRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (describeCertificateRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(describeCertificateRequest.getCertificateId(), CERTIFICATEID_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "protected synchronized boolean loadJar(String jarFileName){\n  boolean ret=loadedJars.contains(jarFileName);\n  if (!ret) {\n    try {\n      logger.fine(\"adding \" + jarFileName + \" to classpath\");\n      ClasspathHacker.addFile(jarFileName);\n    }\n catch (    IOException ioe) {\n      logger.warning(\"couldn't add map data jar file: \" + jarFileName);\n    }\n    loadedJars.add(jarFileName);\n  }\n  return !ret;\n}\n", "public MembersList<Member> getList(String groupId, Set<String> memberTypes, int perPage, int page) throws FlickrException {\r\n        MembersList<Member> members = new MembersList<Member>();\r\n        Map<String, Object> parameters = new HashMap<String, Object>();\r\n        parameters.put(\"method\", METHOD_GET_LIST);\r\n\r\n        parameters.put(\"group_id\", groupId);\r\n\r\n        if (perPage > 0) {\r\n            parameters.put(\"per_page\", \"\" + perPage);\r\n        }\r\n        if (page > 0) {\r\n            parameters.put(\"page\", \"\" + page);\r\n        }\r\n        if (memberTypes != null) {\r\n            parameters.put(\"membertypes\", StringUtilities.join(memberTypes, \",\"));\r\n        }\r\n\r\n        Response response = transportAPI.get(transportAPI.getPath(), parameters, apiKey, sharedSecret);\r\n        if (response.isError()) {\r\n            throw new FlickrException(response.getErrorCode(), response.getErrorMessage());\r\n        }\r\n        Element mElement = response.getPayload();\r\n        members.setPage(mElement.getAttribute(\"page\"));\r\n        members.setPages(mElement.getAttribute(\"pages\"));\r\n        members.setPerPage(mElement.getAttribute(\"perpage\"));\r\n        members.setTotal(mElement.getAttribute(\"total\"));\r\n\r\n        NodeList mNodes = mElement.getElementsByTagName(\"member\");\r\n        for (int i = 0; i < mNodes.getLength(); i++) {\r\n            Element element = (Element) mNodes.item(i);\r\n            members.add(parseMember(element));\r\n        }\r\n        return members;\r\n    }", "private static boolean isUserHomeDefined(StringBuilder aStringBuilder){\n  boolean isDefined=System.getProperty(\"user.home\") != null;\n  if (!isDefined) {\n    aStringBuilder.append(\"user.home folder is not defined.\");\n  }\n  return isDefined;\n}\n", "public void addSet(String name,TupleSet set){\n  if (hasSet(name)) {\n    throw new IllegalArgumentException(\"Name already in use: \" + name);\n  }\n  m_map.put(name,set);\n  m_sets.add(set);\n  m_count+=set.getTupleCount();\n  if (m_lstnr != null)   set.addTupleSetListener(m_lstnr);\n}\n", "public Cluster withClusterNodes(ClusterNode... clusterNodes) {\n        if (this.clusterNodes == null) {\n            setClusterNodes(new com.amazonaws.internal.SdkInternalList<ClusterNode>(clusterNodes.length));\n        }\n        for (ClusterNode ele : clusterNodes) {\n            this.clusterNodes.add(ele);\n        }\n        return this;\n    }", "public PainterWrapper ( SeaGlassPainter < Object > painter ) { this . painter = painter ; }", "public CCodeBookmarkTableModel ( final CCodeBookmarkManager bookmarkManager ) { m_bookmarkManager = Preconditions . checkNotNull ( bookmarkManager , STR_ ) ; initializeListeners ( ) ; }", "public void setStrategy( T minimum,\n                             T maximum ) {\n        this.bucketingStrategy = new ExplicitBucketingStrategy(minimum, maximum);\n        this.bucketWidth = null;\n    }", "public CSelectionCriteriumPanel ( final CSelectionCriterium criterium ) { super ( new BorderLayout ( ) ) ; m_criterium = criterium ; selectionStateBox . addActionListener ( selectionStateBoxListener ) ; initPanel ( ) ; }", "public void execute() throws ActivityException {\n        EventWaitInstance received = registerWaitEvents(false, true);\n        if (received!=null) {\n            setReturnCodeAndExitStatus(received.getCompletionCode());\n            processMessage(getExternalEventInstanceDetails(received.getMessageDocumentId()));\n            boolean toFinish = handleCompletionCode();\n            if (toFinish && exitStatus==null)\n                exitStatus = WorkStatus.STATUS_COMPLETED;\n        }\n        else {\n            try {\n                // set timeouts\n                int timeout = getTimeoutSeconds();\n                if (timeout > 0) {\n                    loginfo(\"set activity timeout as \" + timeout + \" seconds\");\n                    InternalEvent delayMsg = InternalEvent.createActivityDelayMessage(getActivityInstance(), getMasterRequestId());\n                    getEngine().sendDelayedInternalEvent(delayMsg, timeout,\n                            ScheduledEvent.INTERNAL_EVENT_PREFIX+getActivityInstanceId()+\"timeout\", false);\n                }\n            }\n            catch (MdwException e) {\n                throw new ActivityException(0, \"Failed to set timeout\", e);\n            }\n        }\n    }", "    public BeforeFloatRA nearestBeforeFloatArea() {\n        final AreaNode parent = this.getParent();\n        if (parent == null) {\n            return null;\n        }\n        return parent.nearestBeforeFloatArea();\n    }\n", "protected void build ( ) { _sql = new StringBuilder ( ) ; appendWhereSql ( ) ; appendGroupBySql ( ) ; appendOrderBySql ( ) ; }", "\tprotected void addPartCountPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_SampleInPatternInfo_partCount_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_SampleInPatternInfo_partCount_feature\", \"_UI_SampleInPatternInfo_type\"),\n\t\t\t\t EsxPackage.Literals.SAMPLE_IN_PATTERN_INFO__PART_COUNT,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public SelectSameAction ( DrawingEditor editor ) { super ( editor ) ; ResourceBundleUtil labels = ResourceBundleUtil . getBundle ( STR_ ) ; labels . configureAction ( this , ID ) ; updateEnabledState ( ) ; }", "void initializedTypeInstanceComment ( TypeInstance instance , List < IComment > comments ) ;", "    public void recordBoink(long time) throws ObservationInIllegalStateException, ObservationsInWrongOrderException {\n        super.recordBoink(time); // call the superclass's method\n        \n        if(from <= time && time <= until) {\n            attributeb++;\n        }\n    }\n", "private static String[] toStringArray(final Collection<?> collection){\n  if (collection == null) {\n    return null;\n  }\n  return collection.toArray(new String[collection.size()]);\n}\n", "public void apply ( RegistrarImpl regImpl ) { try { regImpl . modifyAttributesDo ( serviceID , leaseID , attrSetTmpls , attrSets ) ; } catch ( UnknownLeaseException e ) { throw new AssertionError ( STR_ + STR_ ) ; } }", "public Cluster destination(final String... destinations) {\n        final String applicationName = clusterId.applicationName;\n        return destination(Arrays.stream(destinations).map(d -> new ClusterId(applicationName, d)).toArray(ClusterId[]::new));\n    }", "public VectorCharReader ( Vector vector , int firstLine ) { this . line = firstLine ; this . vec = vector ; }", "private void incrementSubmittedJobCount(){\n  countLock.lock();\n  try {\n    submittedJobCount++;\n  }\n  finally {\n    countLock.unlock();\n  }\n}", "    public int getTotalWidth() {\n        int width = 0;\n        for (int i=0; i < widths.length; i++) {\n            width += widths[i];\n        }\n        return width;\n    }\n", "@RequestMapping(method = RequestMethod.POST, params = \"action=moveElement\")\n    public ModelAndView moveElement(\n            HttpServletRequest request,\n            HttpServletResponse response,\n            @RequestParam(value = \"sourceID\") String sourceId,\n            @RequestParam String method,\n            @RequestParam(value = \"elementID\") String destinationId)\n            throws IOException, PortalException {\n        final Locale locale = RequestContextUtils.getLocale(request);\n\n        if (moveElementInternal(request, sourceId, destinationId, method)) {\n            return new ModelAndView(\n                    \"jsonView\",\n                    Collections.singletonMap(\n                            \"response\",\n                            getMessage(\n                                    \"success.move.element\", \"Element moved successfully\", locale)));\n        } else {\n            response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n            return new ModelAndView(\n                    \"jsonView\",\n                    Collections.singletonMap(\n                            \"response\",\n                            getMessage(\"error.move.element\", \"Error moving element\", locale)));\n        }\n    }", "\tprotected void addNamePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_UserParamType_name_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_UserParamType_name_feature\", \"_UI_UserParamType_type\"),\n\t\t\t\t MzmlPackage.Literals.USER_PARAM_TYPE__NAME,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public void marshall(UpdateVoiceConnectorRequest updateVoiceConnectorRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (updateVoiceConnectorRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(updateVoiceConnectorRequest.getVoiceConnectorId(), VOICECONNECTORID_BINDING);\n            protocolMarshaller.marshall(updateVoiceConnectorRequest.getName(), NAME_BINDING);\n            protocolMarshaller.marshall(updateVoiceConnectorRequest.getRequireEncryption(), REQUIREENCRYPTION_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void goToNextColor ( ) { mColorIndex = ( mColorIndex + NUM_ ) % ( mColors . length ) ; }", "  public boolean removeLinkToSituation(Situation situation) {\n    if (situation == null || !this.isChild(situation))\n      return false;\n    // if situation is linked to this node only, then the link cannot be removed\n    Enumeration fathersSituation = situation.getFathers();\n    if (fathersSituation != null) {\n      fathersSituation.nextElement();\n      if (fathersSituation.hasMoreElements())\n        return this.removeFatherChildLink(situation);\n      else return false;\n    }\n    else return false;\n  }\n", "void splitZone(int index,int offs0,int offs1){\n  Element elem=getElement();\n  Document doc=elem.getDocument();\n  Vector<View> zones=new Vector<View>();\n  int offs=offs0;\n  do {\n    offs0=offs;\n    offs=Math.min(getDesiredZoneEnd(offs0),offs1);\n    zones.addElement(createZone(offs0,offs));\n  }\n while (offs < offs1);\n  View oldZone=getView(index);\n  View[] newZones=new View[zones.size()];\n  zones.copyInto(newZones);\n  replace(index,1,newZones);\n}\n", "  public int addToQueue(Entry entry, int position) throws IOException, UPNPResponseException {\n    ActionMessage message = messageFactory.getMessage(\"AddURIToQueue\");\n    message.setInputParameter(\"InstanceID\", 0);\n    message.setInputParameter(\"EnqueuedURI\", entry.getRes());\n    message.setInputParameter(\"EnqueuedURIMetaData\", compileMetadataString(entry));\n    message.setInputParameter(\"DesiredFirstTrackNumberEnqueued\", position+1);\n    message.setInputParameter(\"EnqueueAsNext\", true);\n    ActionResponse resp = message.service();\n    return Integer.parseInt(resp.getOutActionArgumentValue(\"FirstTrackNumberEnqueued\")) -1;\n  }\n", "public int size(){\n  return items.size();\n}\n", "public void retainProgress(final String title,final String message,final int progress){\n  mTitle=title;\n  mMessage=message;\n  mProgress=progress;\n}\n", "\tpublic void subtractTimeUnits(int timeUnits) {\n\t\tAppContext.getDataManager().markForUpdate(this);\n\t\tthis.timeUnits -= timeUnits;\n\t}\n", "@Override\n    public void runIsolatedAsynch(boolean deliverImmediately) throws SIIncorrectCallException, SISessionUnavailableException, SIResourceException\n    {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.entry(tc, \"runIsolatedAsynch\", new Object[] { this, Boolean.valueOf(deliverImmediately) });\n\n        synchronized (_asynchConsumerBusyLock)\n        {\n            // Lock the consumer session while we check that it is in a valid\n            // state\n            this.lock();\n            try\n            {\n                // Only valid if the consumer session is still open\n                checkNotClosed();\n\n                //if there is no callback registered, throw an exception\n                if (!_asynchConsumerRegistered)\n                {\n                    SIIncorrectCallException e =\n                                    new SIIncorrectCallException(\n                                                    nls.getFormattedMessage(\n                                                                            \"ASYNCH_CONSUMER_ERROR_CWSIP0175\",\n                                                                            new Object[] { _consumerDispatcher.getDestination().getName(),\n                                                                                          _messageProcessor.getMessagingEngineName() },\n                                                                            null));\n\n                    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n                        SibTr.exit(tc, \"runIsolatedAsynch\", e);\n\n                    throw e;\n                }\n                // we can't do an isolated run if the LCP is not in a stopped state\n                // so throw an exception\n                if (!_stopped)\n                {\n                    SIIncorrectCallException e =\n                                    new SIIncorrectCallException(\n                                                    nls.getFormattedMessage(\n                                                                            \"ASYNCH_CONSUMER_RUN_ERROR_CWSIP0176\",\n                                                                            new Object[] { _consumerDispatcher.getDestination().getName(),\n                                                                                          _consumerDispatcher.getMessageProcessor().getMessagingEngineName() },\n                                                                            null));\n\n                    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n                        SibTr.exit(tc, \"runIsolatedAsynch\", e);\n                    throw e;\n                }\n\n                // If the consumer has been stopped because the destination is not\n                // allowing consumers to get messages then we simply return.\n                if (_stoppedForReceiveAllowed)\n                {\n                    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n                        SibTr.exit(tc, \"runIsolatedAsynch\", \"Receive not allowed\");\n\n                    return;\n                }\n            } // synchronized (this)\n            finally\n            {\n                this.unlock();\n            }\n        } // synchronized (asynchConsumer)\n\n        //if we get this far then if deliverImmediately is set then this\n        //implies that the callback should be inline\n        if (deliverImmediately)\n        {\n            //run the asynch inline\n            try\n            {\n                runAsynchConsumer(true);\n            } catch (Throwable e)\n            {\n                FFDCFilter.processException(\n                                            e,\n                                            \"com.ibm.ws.sib.processor.impl.JSLocalConsumerPoint.runIsolatedAsynch\",\n                                            \"1:3182:1.22.5.1\",\n                                            this);\n\n                SibTr.exception(tc, e);\n\n                try\n                {\n                    // Since the asynchConsumer has experienced an error of some kind, the best form\n                    // of cleanup is to close down the session. This ensures any listeners get notified\n                    // and can retry at some point later.\n                    _consumerSession.close();\n                    // don't notify asynchconsumer as we are been called inline\n                } catch (Exception ee)\n                {\n                    // No FFDC code needed\n                    SibTr.exception(tc, ee);\n                }\n\n                if (e instanceof ThreadDeath)\n                {\n                    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n                        SibTr.exit(tc, \"runIsolatedAsynch\", e);\n                    throw (ThreadDeath) e;\n                }\n\n                SISessionDroppedException sessionDroppedException = new SISessionDroppedException(\n                                nls.getFormattedMessage(\"CONSUMER_CLOSED_ERROR_CWSIP0177\"\n                                                        , new Object[] { _consumerDispatcher.getDestination().getName(),\n                                                                        _messageProcessor.getMessagingEngineName() }\n                                                        , null), e);\n\n                if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n                    SibTr.exit(tc, \"runIsolatedAsynch\", sessionDroppedException);\n\n                //inline call so throwing exception rather than notifying\n                throw sessionDroppedException;\n            }\n        }\n        else\n        {\n            //start up a new thread (from the MP's thread pool)\n            //to deliver the message asynchronously\n            try\n            {\n                _messageProcessor.startNewThread(new AsynchThread(this, true));\n            } catch (InterruptedException e)\n            {\n                // No FFDC code needed\n\n                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n                    SibTr.debug(tc, \"runIsolatedAsynch\", e);\n            }\n        }\n\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.exit(tc, \"runIsolatedAsynch\");\n    }", "\tpublic void render(String name, byte value) {\n\t\tHTMLs.appendAttribute(_buf, name, value);\n\t}\n", "public void write(io.netty.buffer.ByteBuf buf, int off, int len) throws IOException {\n    if (len == 0) {\n      return;\n    }\n\n    while (len > 0) {\n      updateCurrentChunk(false);\n      int toWrite = Math.min(len, mCurrentChunk.writableBytes());\n      mCurrentChunk.writeBytes(buf, off, toWrite);\n      off += toWrite;\n      len -= toWrite;\n    }\n    updateCurrentChunk(false);\n  }", "public boolean adjustValue ( double key , int amount ) { int index = index ( key ) ; if ( index < NUM_ ) { return BOOL_ ; } else { _values [ index ] += amount ; return BOOL_ ; } }", "  public void reload() throws IOException {\n    bundle = new PropertyResourceBundle(new BufferedInputStream(Resolver\n        .solveSource(propertiesFilename)));\n  }\n", "public LogIndex ( File logDir , String filePrefix , long retentionMillis , int bufferSize , boolean isWritable ) throws ReplicatorException , InterruptedException { index = new ArrayList < LogIndexEntry > ( ) ; this . logDir = logDir ; this . filePrefix =", "@SuppressWarnings(\"unchecked\")\n  public <T> void registerCustomSerializer(Class<T> cls, JsonSerializer<T> forType) {\n    if(customSerializersMap == null) {\n      customSerializersMap = new HashMap<>();\n    }\n\n    if(cls == null) {\n      throw new IllegalArgumentException(\"Class must not be null\");\n    } else if(cls.equals(JsonView.class)) {\n      throw new IllegalArgumentException(\"Class cannot be \" + JsonView.class);\n    } else if(customSerializersMap.containsKey(cls)) {\n      throw new IllegalArgumentException(\"Class \" + cls + \" already has a serializer registered (\" + customSerializersMap.get(cls) + \")\");\n    }\n\n    customSerializersMap.put(cls, (JsonSerializer<Object>) forType);\n  }", "public static int deflate(byte[] previous,int previousLength,byte[] current,int currentLength,byte[] result){\n  if (previous == null) {\n    System.arraycopy(current,0,result,0,currentLength);\n    return currentLength;\n  }\n  int length=0;\n  int start1=0;\n  int start2=0;\n  while (start1 < previousLength && start2 < currentLength) {\n    int end1=start1;\n    int end2=start2;\n    while (end1 <= previousLength && end2 <= currentLength) {\n      byte c1=(end1 < previousLength ? previous[end1] : (byte)'\\t');\n      byte c2=(end2 < currentLength ? current[end2] : (byte)'\\t');\n      if (c1 == c2) {\n        if (c1 == '\\t') {\n          result[length++]='&';\n          break;\n        }\n else {\n          end1++;\n          end2++;\n        }\n      }\n else {\n        while (end1 < previousLength && previous[end1] != '\\t') {\n          end1++;\n        }\n        while (end2 < currentLength && current[end2] != '\\t') {\n          end2++;\n        }\n        for (int i=start2; i < end2; i++)         result[length++]=current[i];\n        break;\n      }\n    }\n    start1=end1 + 1;\n    start2=end2 + 1;\n    if (start2 < currentLength)     result[length++]='\\t';\n  }\n  return length;\n}\n", "public ODataUserSynchronizer(SynchronizerConf sc) throws IOException, ODataException {\n  super(sc);\n  String urilit=sc.getConfig(\"service_uri\");\n  serviceUser=sc.getConfig(\"service_username\");\n  servicePass=sc.getConfig(\"service_password\");\n  if (urilit == null || urilit.isEmpty()) {\n    throw new IllegalStateException(\"`service_uri` is not set\");\n  }\n  try {\n    client=new ODataClient(urilit,serviceUser,servicePass);\n  }\n catch (  URISyntaxException e) {\n    throw new IllegalStateException(\"`service_uri` is malformed\");\n  }\n  String skip=sc.getConfig(\"skip\");\n  if (skip != null && !skip.isEmpty()) {\n    this.skip=Integer.parseInt(skip);\n  }\n else {\n    this.skip=0;\n  }\n  String page_size=sc.getConfig(\"page_size\");\n  if (page_size != null && !page_size.isEmpty()) {\n    pageSize=Integer.decode(page_size);\n  }\n else {\n    pageSize=500;\n  }\n  String cfgForce=sc.getConfig(\"force\");\n  if (cfgForce != null && !cfgForce.isEmpty()) {\n    force=Boolean.parseBoolean(cfgForce);\n  }\n else {\n    force=false;\n  }\n}\n", "public RecordableHistoryEvent(String eventType,Recordable recordable,String referrer,String action,Map<String,String> parameters){\n  this(eventType,System.currentTimeMillis(),recordable,referrer,action,parameters);\n}\n", "private void setToken(String userToken, UserDetail userDetail, boolean loginPending) {\n\t\tboolean changed = !isEqual(this.userToken, userToken);\n\t\tthis.userToken = userToken;\n\t\tif (null == userDetail) {\n\t\t\tuserDetail = new UserDetail();\n\t\t}\n\t\tthis.userDetail = userDetail;\n\t\tif (changed) {\n\t\t\tTokenChangedEvent event = new TokenChangedEvent(userToken, userDetail, loginPending);\n\t\t\tmanager.fireEvent(event);\n\t\t}\n\t}", "    protected void fireMapInventoryAdded(int index, Item item) {\n        if (listenerList == null) return;\n        fireMapInventoryChange(new MapInventoryEvent(this,\n            toX(index), toY(index), item, getItemCountAt(index, item),\n            MapInv", "        public void textValueChanged(TextEvent e) {\n            if (e.getSource() == VAJAntToolGUI.this.getBuildFileTextField()) {\n                connectTextFieldToBuildFileName();\n            }\n        }\n", "    public void progress(String str, String c, int count, int time) {\n        t.println(str);\n        for (int i = 0; i < count; i++) {\n            try {\n                Thread.sleep(ran.nextInt(time));\n                t.print(c);\n            } catch (Int", "public static String unexpandLine ( CharSequence self , int tabStop ) { StringBuilder builder = new StringBuilder ( self . toString ( ) ) ; int index = NUM_ ; while ( index + tabStop < builder . length ( ) ) { String piece = builder . substring ( index , index + tabStop ) ; int count = NUM_ ; while ( ( count < tabStop ) && ( Character . isWhitespace ( piece . charAt ( tabStop - ( count + NUM_ ) ) ) ) ) count ++ ; if ( count > NUM_ ) { piece = piece . substring ( NUM_ , tabStop - count ) + STR_ ; builder . replace ( index , index + tabStop , piece ) ; index = index + tabStop - ( count - NUM_ ) ; } else index = index + tabStop ; } return builder . toString ( ) ; }", "\tpublic void doLayout() {\n\t    if(editingComponent != null) {\n                int width = getWidth();\n                int height = getHeight();\n                if (getComponentOrientation().isLeftToRight()) {\n                    editingComponent.setBounds(\n                            offset, 0, width - offset, height);\n                } else {\n                    editingComponent.setBounds(\n                        0, 0, width - offset, height);\n                }\n\t    }\n\t}\n", "    public String getMessage() {\n        //connect to the spring bundle and get the messages\n        ResourceBundleMessageSource r = new ResourceBundleMessageSource();\n        r.setBasename(\"messages\");\n\n        try {\n            return r.getMessage(code, values, Locale.getDefault());\n        } catch (NoSuchMessageException e) {\n        \t\n        \t//Return the original message of the exception (if possible)\n        \tif(this.internalException!=null){\n        \t\treturn internalException.getMessage();\n        \t}\n        \t\n            return \"SYSTEM:\" + e.getMessage();\n        }\n    }\n", "\tprivate void setRowSelected(final int idx){\n\t\tRunnable r = new Runnable(){\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttable.setRowSelectionInterval(idx,idx);\n\t\t\t}\n\t\t};\n\t\tSwingUtilities.invokeLater(r);\n\t}\n", "public static void writeJSONString(Collection collection, Writer out) throws IOException{\n\t\tif(collection == null){\n\t\t\tout.write(\"null\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tboolean first = true;\n\t\tIterator iter=collection.iterator();\n\t\t\n        out.write('[');\n\t\twhile(iter.hasNext()){\n            if(first)\n                first = false;\n            else\n                out.write(',');\n            \n\t\t\tObject value=iter.next();\n\t\t\tif(value == null){\n\t\t\t\tout.write(\"null\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tJSONValue.writeJSONString(value, out);\n\t\t}\n\t\tout.write(']');\n\t}", "private void writeActions(List<Action> actions)\n            throws JsonGenerationException, IOException {\n        List<String> actionStrings = new ArrayList<String>();\n\n        for (Action action : actions) {\n            actionStrings.add(action.getActionName());\n        }\n        writeJsonArray(JsonDocumentFields.ACTION, actionStrings);\n    }", "private void verifyExportMaskOnSystem(ExportMask mask,StorageSystem array){\n  VplexBackEndMaskingOrchestrator maskingOrchestrator=getOrch(array);\n  BlockStorageDevice storageDevice=_blockDeviceController.getDevice(array.getSystemType());\n  List<Initiator> initiators=new ArrayList<Initiator>();\n  initiators.addAll(ExportMaskUtils.getInitiatorsForExportMask(_dbClient,mask,Transport.FC));\n  if (initiators.isEmpty()) {\n    initiators.addAll(ExportMaskUtils.getExistingInitiatorsForExportMask(_dbClient,mask,Transport.FC));\n  }\n  Map<URI,ExportMask> maskSet=maskingOrchestrator.readExistingExportMasks(array,storageDevice,initiators);\n  if (maskSet.containsKey(mask.getId())) {\n    _log.info(String.format(\"Verified ExportMask %s present on %s\",mask.getMaskName(),array.getNativeGuid()));\n    return;\n  }\n  _log.info(String.format(\"ExportMask %s not present on %s; checking if renamed...\",mask.getMaskName(),array.getNativeGuid()));\n  checkForRenamedExportMasks(maskSet);\n}\n", "public static Type fromString(String typeString){\n  for (  Type t : Type.values()) {\n    if (typeString.equals(t.value)) {\n      return t;\n    }\n  }\n  return null;\n}\n", "public Object mapToTarget(String value) {\n\tif ((value==null) || (value.length() == 0)) {\n\t\t// prevent value==null to \"null\" mapping by Java\n\t\treturn SqlQueryBuilder.SQL_NULL;\n\t} else {\n\t\t//String tmp = value.trim().replace('\\'', '`');\t// make sure SQL-String won't be separated\n\t\treturn  \"'\" + value.replaceAll(\"'\", \"''\") + \"'\";\n\t}\n}\n", "\tprotected LogicBean getLogicBean(){\n\t\tLogicMap logicMap = getLogicMap();\n\t\tString url = getServletPath();\n\t\t\t\n\t\tString logicBeanName = logicMap.getLogicBeanName(url);\n\t\tLogicBean logic = null;\n\t\tif (NVLHelper.isEmpty(logicBeanName)){\n\t\t\tint init = url.lastIndexOf(\"/\");\n\t\t\tif(init >= 0){\n\t\t\t\turl = url.substring(init + 1);\n\t\t\t}\t\n\t\t\tint end = url.indexOf(\".\");\n\t\t\tif (end >= 0){\n\t\t\t\turl = url.substring(0, end);\n\t\t\t\tString url1 = url.substring(0, 1).toLowerCase();\n\t\t\t\turl = url1 + url.substring(1, url.length());\n\t\t\t}\n\t\t\tlogic = (LogicBean)getBean(url);\n\t\t}else{\n\t\t\tlogic = (LogicBean)getBean(logicBeanName);\n\t\t}\n\t\t\n\t\treturn logic;\n\t}\n", "void validateNewGroup ( CreateGroupArgs args ) throws ValidationException ;", "public static void save ( ) { if ( ! loaded ) { load ( ) ; } try { Files . write ( gson . toJson ( map ) , saveFile , charset ) ; } catch ( IOException e ) { SpongeImpl . getLogger ( ) . error ( STR_ , e ) ; } }", "void changedImageBase ( INaviAddressSpace addressSpace , INaviModule module , IAddress address ) ;", "public int setTraceLevel(final int level) {\n        final int oldLevel = traceLevel;\n\n        // pin the value\n        int theLevel = level;\n        if (level < 0) {\n            theLevel = 0;\n        } else if (level > 4) {\n            theLevel = 4;\n        }\n\n        traceLevel = theLevel;\n\n        return oldLevel;\n    }", "@Override\n    public CreateWorkGroupResult createWorkGroup(CreateWorkGroupRequest request) {\n        request = beforeClientExecution(request);\n        return executeCreateWorkGroup(request);\n    }", "protected AbstractLeaseMap ( Map map ) { this . map = map ; }", "\tpublic void exchangeCompleted(ExchangeDetails exchange, Channel channel) {\n\t\t\n\t\tsynchronized(m_initiated) {\n\t\t\tif (logger.isLoggable(Level.FINE)) {\n\t\t\t\tlogger.fine(\"Exchange completed=\"+exchange+\" on channel=\"+channel);\n\t\t\t}\n\n\t\t\tif (m_initiated.contains(exchange)) {\n\t\t\t\tm_completed.add(exchange);\n\t\t\t\t\n\t\t\t\tm_initiated.remove(exchange);\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tif (logger.isLoggable(Level.FINE)) {\n\t\t\t\t\tlogger.fine(\"NOTE: Completed exchange=\"+\n\t\t\t\t\t\t\texchange+\" has not been initiated\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "public String timeAgo(final Date date){\n  return timeAgo(date.getTime());\n}\n", "public void setType(final Class<?> type) throws DevFailed {\n        if (Enum.class.isAssignableFrom(type)) {\n            this.type = AttributeTangoType.getTypeFromClass(type).getType();\n        } else {\n            this.type = type;\n        }\n        enumType = AttributeTangoType.getTypeFromClass(type);\n        tangoType = enumType.getTangoIDLType();\n        if (type.isArray()) {\n            if (type.getComponentType().isArray()) {\n                format = AttrDataFormat.IMAGE;\n            } else {\n                format = AttrDataFormat.SPECTRUM;\n                maxY = 0;\n            }\n        } else {\n            format = AttrDataFormat.SCALAR;\n            maxX = 1;\n            maxY = 0;\n        }\n    }", "public SpaceTypeDescriptorBuilder addFixedProperty ( String propertyName , String propertyTypeName ) { return addFixedProperty ( propertyName , propertyTypeName , SpaceDocumentSupport . DEFAULT , StorageType . DEFAULT ) ; }", "public TabbedPaneTabPainter ( Which state ) { super ( ) ; this . ctx = new PaintContext ( CacheMode . FIXED_SIZES ) ; switch ( state ) { case BACKGROUND_SELECTED_FOCUSED : case BACKGROUND_PRESSED_SELECTED_FOCUSED : focused = BOOL_ ; break ; default : focused = BOOL_ ; break ; } type = getButtonType ( state ) ; }", "    public void picked(Class source, Object messageData, Vector3f origin, Vector3f direction, PickInfo results) {\n        System.out.println(this + \" Name: \" + getName() + \" picked! by \" + source + \" : \" + messageData);\n    }\n", "private void createMultiplePartitionedRegions(){\n  if (PRCreateDone)   return;\n  int numthread=0;\n  while (numthread < TOTAL_THREADS) {\n    PartionedRegionCreateThread pregionThread=new PartionedRegionCreateThread();\n    pregionThread.start();\n    numthread++;\n  }\n  while (!createComplete) {\nsynchronized (CREATE_COMPLETE_LOCK) {\n      if (!createComplete) {\n        try {\n          CREATE_COMPLETE_LOCK.wait();\n        }\n catch (        Exception ex) {\n        }\n      }\n    }\n  }\n  PRCreateDone=true;\n}\n", "public static <T>void removeAll(Collection<T> collection,Collection<T> elements){\n  if (CollectionUtils.isEmpty(collection) || CollectionUtils.isEmpty(elements)) {\n    return;\n  }\n  for (  T element : elements) {\n    collection.remove(element);\n  }\n}\n", "private static byte[] generateMultipartBoundary(){\n  final Random rand=new Random();\n  final byte[] bytes=new byte[rand.nextInt(11) + 30];\n  for (int i=0; i < bytes.length; i++) {\n    bytes[i]=MULTIPART_CHARS[rand.nextInt(MULTIPART_CHARS.length)];\n  }\n  return bytes;\n}\n", "void removedThread ( TargetProcessThread thread ) ;", "private Database connectDB ( String url , String user , String pass ) throws SQLException { Database connDB = DatabaseFactory . createDatabase ( url , user , pass , checkDirect ) ; connDB . connect ( ) ; println ( String . format ( STR_ , connDB . getType", "    public Layer add(final Frame frame) {\n        frames.add(frame);\n        frame.setNumber(frames.size());\n        return this;\n    }\n", "public void addRightWhere(int left, IntBitSet result) {\n        if (line[left] != null) {\n            result.addAll(line[left]);\n        }\n    }", "public void postInvoke(EJSWrapperBase wrapper, int methodId,\n                           EJSDeployedSupport s) throws RemoteException {\n        // LIDB2775-23.1\n        DispatchEventListenerCookie[] dispatchEventListenerCookies = null;// @MD16426A\n        EJBMethodInfoImpl methodInfo = s.methodInfo; // d114406 d154342.4 d173022\n        final boolean isTraceOn = TraceComponent.isAnyTracingEnabled(); // d532639.2\n\n        // If this is a stateless SessionBean create, run only the bare minimum of\n        // collaborators and other processing. This path is encapsulated in a separate\n        // method for now, to avoid lots of \"if\" statements within this method.\n        if (methodInfo.isStatelessSessionBean && methodInfo.isHomeCreate) {\n            EjbPostInvokeForStatelessCreate(wrapper, methodId, s);\n        } else {\n            if (isTraceOn) {\n                if (TEEJBInvocationInfo.isTraceEnabled())\n                    TEEJBInvocationInfo.tracePostInvokeBegins(s, wrapper); // d161864\n\n                if (tcClntInfo.isDebugEnabled())\n                    Tr.debug(tcClntInfo, \"postInvoke(\" + methodInfo.getMethodName() + \")\");\n\n                if (tc.isEntryEnabled())\n                    Tr.entry(tc, \"EJBpostInvoke(\" + methodId + \":\" +\n                                 methodInfo.getMethodName() + \")\");\n            }\n\n            EJBThreadData threadData = s.ivThreadData; // d646139.1\n            BeanId beanId = wrapper.beanId;\n            BeanO beanO = null;\n            BeanMetaData bmd = null;//92702\n\n            // UOWManager.runUnderUOW may have left cached currentTx invalid; reset\n            if (s.resetCurrentTx) {\n                if (isTraceOn && tc.isDebugEnabled())\n                    Tr.debug(tc, \"s.currentTx may be invalid; reset\");\n                s.currentTx = getCurrentContainerTx();\n            }\n\n            // LIDB2775-23.1\n            // Do SMF after method recording - // MD16426A - begin\n            if (isZOS) {\n                dispatchEventListenerCookies = s.ivDispatchEventListenerCookies;\n                if (dispatchEventListenerCookies != null) {\n                    // notify event dispatch listeners -\n                    // Note: It is important that the 'afterEjbMethod' notification\n                    //       occur as the first event during postInvoke so that this\n                    //       signal is delivered as close as possible to the actual return\n                    //       from the bean method invocation.\n                    this.ivDispatchEventListenerManager.callDispatchEventListeners(DispatchEventListener.AFTER_EJBMETHOD, dispatchEventListenerCookies, methodInfo);// @MD16426A\n                } // @MD16426A\n            }\n\n            try {\n\n                beanO = s.beanO;//d140003.19\n\n                if (s.exType != ExceptionType.NO_EXCEPTION) { // d113344  //d140003.19\n                    //87918.8(2)\n                    if (s.exType == ExceptionType.CHECKED_EXCEPTION) { // d113344 //d140003.19\n                        if (isTraceOn && tc.isEventEnabled())\n                            Tr.event(tc, \"Bean method threw exception\",\n                                     s.getException());//d140003.19\n                    } else if (s.exType == ExceptionType.UNCHECKED_EXCEPTION) {\n                        if (isTraceOn && tc.isEventEnabled())\n                            Tr.event(tc, \"Bean method threw unchecked exception\",\n                                     s.getException()); //d140003.19\n                        // d113344\n                        if (beanO != null && s.preInvokeException == false) {\n                            // This indicates unchecked exception came from the business\n                            // method itself, so we want to discard the bean instance.\n                            beanO.discard();\n                        }\n\n                        if (isTraceOn && tc.isEventEnabled())\n                            Tr.event(tc, \"Bean Discarded as non null\");\n\n                    }\n                }\n\n                //89188\n                // bmd = (BeanMetaData) internalBeanMetaDataStore.get(wrapper.beanId.getJ2EEName());//89554\n                // d110126\n                // Optimizations to preInvoke/postInvoke processing:\n                // Created specialized case for stateless SessionBean creation\n                // BeanMetaData no longer looked up via hashtable, is now stored in the EJSWrapper\n                // Removed extraneous call to TxCntl.getCurrentTransaction (dead code)\n\n                bmd = wrapper.bmd; // d110126\n                //end 89188\n\n                // Call postInvoke on all of the BeforeActivation Collaborators\n                // that were successfully preInvoked. Note that the order is the\n                // same as preInvoke. Note the ComponentMetaDataCollaborator is\n                // no longer in this list; see below.              d228192 LI3795-56\n                if (ivBeforeActivationCollaborators != null) {\n                    for (int i = 0; i < s.ivBeforeActivationPreInvoked; i++) {\n                        if (isTraceOn && tc.isDebugEnabled())\n                            Tr.debug(tc, \"postInvoke : Invoking BeforeActivationCollaborator.postInvoke method on: \"\n                                         + ivBeforeActivationCollaborators[i].getClass().getName());\n\n                        Object cookie = s.ivBeforeActivationCookies == null ? null : s.ivBeforeActivationCookies[i]; // F61004.3\n                        notifyPostInvoke(ivBeforeActivationCollaborators[i], s, cookie);\n                    }\n                }\n\n                // Call postInvoke on all of the AfterActivation Collaborators\n                // that were successfully preInvoked. Note that the order is the\n                // same as preInvoke.                                        d228192\n                if (ivAfterActivationCollaborators != null) {\n                    for (int i = 0; i < s.ivAfterActivationPreInvoked; i++) {\n                        if (isTraceOn && tc.isDebugEnabled())\n                            Tr.debug(tc, \"postInvoke : Invoking AfterActivationCollaborator.postInvoke method on: \"\n                                         + ivAfterActivationCollaborators[i].getClass().getName());\n\n                        Object cookie = s.ivAfterActivationCookies == null ? null : s.ivAfterActivationCookies[i]; // F61004.3\n                        notifyPostInvoke(ivAfterActivationCollaborators[i], s, cookie);\n                    }\n                }\n\n                if (beanO != null) {\n                    beanO.postInvoke(methodId, s);\n                }\n\n            } catch (RemoteException ex) {\n                FFDCFilter.processException(ex, CLASS_NAME + \".postInvoke\", \"2268\", new Object[] { this, wrapper, Integer.valueOf(methodId), s });//123338\n                if (isTraceOn && tc.isEventEnabled())\n                    Tr.event(tc, \"postInvoke failed\", ex);\n                throw ex;\n            } catch (Throwable ex) {\n                FFDCFilter.processException(ex, CLASS_NAME + \".postInvoke\", \"2273\", new Object[] { this, wrapper, Integer.valueOf(methodId), s });//123338\n                if (isTraceOn && tc.isEventEnabled())\n                    Tr.event(tc, \"postInvoke failed\", ex);\n\n                s.setUncheckedException(ex); //d117817\n            } finally {\n\n                // LIDB2775-23.1\n                if (isZOS && dispatchEventListenerCookies != null) {\n                    // Before transaction context changes, do SMF end dispatch recording\n                    this.ivDispatchEventListenerManager.callDispatchEventListeners(DispatchEventListener.END_DISPATCH, dispatchEventListenerCookies, methodInfo); // @MD16426A\n                }\n\n                final ContainerTx currentTx = s.currentTx;//d140003.19\n\n                try {\n                    if (beanO != null) {\n                        activator.postInvoke(currentTx, beanO);\n                    }\n\n                    if (currentTx != null) {\n                        currentTx.postInvoke(s);\n                    }\n\n                    if (s.uowCtrlPreInvoked) {\n                        if (s.began && currentTx != null && currentTx.ivPostInvokeContext == null) {\n                            // Indicate that afterCompletion should call\n                            // postInvokePopCallbackContexts.                 RTC107108\n                            // Don't do see if this is a nested EJB call from\n                            // beforeCompletion.                              RTC115108\n                            currentTx.ivPostInvokeContext = s;\n                        }\n\n                        uowCtrl.postInvoke(beanId, s.uowCookie, s.exType, methodInfo); // d113344 //d140003.19\n                    }\n                    // Since 'Lightweight' methods may not be executing the\n                    // Transaction Collaborator, the postInvoke processing must\n                    // be done here.                                        LI3795-56\n                    else if (methodInfo.isLightweightTxCapable && s.currentTx != null) {\n                        if (s.isLightweight) {\n                            if (s.exType == ExceptionType.UNCHECKED_EXCEPTION) {\n                                // In this scenario, there is always an inherited global\n                                // transaction, and the correct action for all Tx\n                                // Strategies is to mark the tx as rollbackonly and throw\n                                // the CSITransactionRolledbackException, forcing the\n                                // catch block below.\n                                if (isTraceOn && tc.isDebugEnabled())\n                                    Tr.debug(tc, \"Lightweight:handleException - rollback\");\n                                uowCtrl.setRollbackOnly();\n                                throw new CSITransactionRolledbackException(\"Unexpected Exception from Lightweight EJB method\");\n                            }\n                        } else if (beanO != null &&\n                                   bmd.type == InternalConstants.TYPE_STATEFUL_SESSION) {\n                            // Simulate transaction commit for the bean.  We do not\n                            // need to call ContainerTx.delist because we avoided\n                            // ContainerTx.enlist during activation.            F61004.1\n                            beanO.beforeCompletion();\n                            simulateCommitBean(beanO, currentTx);\n                        }\n                    }\n\n                    // If a remove method was invoked, and the bean instance was\n                    // NOT removed during afterCompletion, then the transaction\n                    // did not commit.. and thus a RemoveException should be\n                    // thrown.  Stateful beans may NOT be removed while still\n                    // enlisted in a transaction.  The RemoveException will be\n                    // wrapped in the appropriate exception, as it is generally\n                    // not on the throws clause for @Remove methods.           390657\n                    if (currentTx != null &&\n                        currentTx.ivRemoveBeanO != null) {\n                        // Per a SUN (CTS) clarification, not removing a SF bean\n                        // in a transaction will only be enforced for Bean Managed\n                        // beans, since the UserTx is 'sticky' and would be\n                        // orphanded if the bean were removed.                 d451675\n                        if (bmd.usesBeanManagedTx ||\n                            bmd.usesBeanManagedAS) {\n                            currentTx.ivRemoveBeanO = null;\n                            throw new RemoveException(\"Cannot remove stateful session bean \" +\n                                                      \"within a transaction.\");\n                        } else {\n                            // For the CMT case, the bean will just be removed from\n                            // the transaction and removed.. without calling the\n                            // synchronization methods. The following will transition\n                            // the bean to the correct state, and remove from the\n                            // EJB Cache... deleting the bean.                  d451675\n\n                            // d666718 - Delist the bean from the transaction.\n                            // Otherwise, we will try to perform redundant processing\n                            // on it later when the transaction actually completes.\n                            try {\n                                currentTx.delist(beanO);\n                            } catch (TransactionRolledbackException ex) {\n                                FFDCFilter.processException(ex, CLASS_NAME + \".postInvoke\",\n                                                            \"4641\", this);\n                                if (isTraceOn && tc.isEventEnabled())\n                                    Tr.event(tc, \"Exception thrown from ContainerTx.delist()\",\n                                             new Object[] { beanO, ex });\n                            }\n\n                            simulateCommitBean(beanO, currentTx);\n                        }\n                    }\n\n                } catch (CSITransactionRolledbackException ex) {\n                    FFDCFilter.processException(ex, CLASS_NAME + \".postInvoke\",\n                                                \"2326\", new Object[] { this, wrapper, Integer.valueOf(methodId), s });//123338\n                    postInvokeRolledbackException(s, ex);\n                } catch (Throwable t) {\n                    FFDCFilter.processException(t, CLASS_NAME + \".postInvoke\",\n                                                \"2366\", this);\n                    if (isTraceOn && tc.isDebugEnabled())\n                        Tr.debug(tc, \"postInvoke: Exception in finally clause. An unexpected case\", t);\n\n                    if (s.exType == ExceptionType.NO_EXCEPTION) { //PQ94124\n                        // An unexpected exception has occured in post processing,\n                        // that the application is unaware of.\n                        // call setUnCheckedEx and throw an exception.\n                        s.setUncheckedException(t); //d117817\n                        // s.setUncheckedException throws either runtime (for local I/F) or\n                        // remote exception.\n                    }\n                } finally {\n                    // Bean-specific contexts need to be present for beforeCompletion\n                    // for JPA @PreUpdate, so we cannot pop the contexts prior to\n                    // transaction completion, but ContainerTx.afterCompletion unpins\n                    // beans from the current transaction, which would leave \"stale\"\n                    // contexts in place for subsequent afterCompletion callbacks,\n                    // so ContainerTx.afterCompletion pops contexts.  However, we\n                    // need to pop contexts ourselves if there was no transaction, or\n                    // the transaction wasn't committed (because this method didn't\n                    // begin it or it was a sticky BMT), or the transaction was\n                    // committed but ContainerTx.afterCompletion wasn't called due to\n                    // some fatal error in transactions.                    RTC107108\n                    if (currentTx == null) {\n                        postInvokePopCallbackContexts(s);\n                    } else if (!s.began || currentTx.ivPostInvokeContext != null) {\n                        postInvokePopCallbackContexts(s);\n\n                        // Reset the indicator so that sticky BMT doesn't pop the\n                        // callback context in the middle of a bean method, but only\n                        // do so if we set the method context above (don't do so if\n                        // this is a nested EJB call from beforeCompletion). RTC115108\n                        if (currentTx.ivPostInvokeContext == s) {\n                            currentTx.ivPostInvokeContext = null;\n                        }\n                    }\n\n                    // Pmi instrumentation for methods in beans\n                    // Use pmiBean cached in the wrapper.                  d140003.33\n                    // Insure this is done even if an exception is thrown.    d623908\n                    EJBPMICollaborator pmiBean = wrapper.ivPmiBean; // d174057.2\n                    if (pmiBean != null && s.pmiPreInvoked) {\n                        pmiBean.methodPostInvoke(wrapper.beanId, methodInfo,\n                                                 s.pmiCookie);\n\n                        if (methodInfo.isHomeCreate()) {\n                            // d647928 - SFSB and entity creation always goes through\n                            // home wrappers.  The other bean types have code in\n                            // EJSHome for create time.\n                            if (bmd.isStatefulSessionBean() || bmd.isEntityBean()) {\n                                pmiBean.finalTime(EJBPMICollaborator.CREATE_RT, s.pmiCookie);\n                            }\n                        } else if (methodInfo.isComponentRemove()) {\n                            // d647928 - SFSB and entity can both be removed via the\n                            // remove method on the wrapper.  That method is a no-op\n                            // for the other bean types.\n                            if (bmd.isStatefulSessionBean() || bmd.isEntityBean()) {\n                                pmiBean.finalTime(EJBPMICollaborator.REMOVE_RT, s.pmiCookie);\n                            }\n                        }\n                    }\n\n                    // PQ74774 Begins\n                    if (s.ivSecurityCollaborator != null) {\n                        notifyPostInvoke(s.ivSecurityCollaborator, s, s.securityCookie);\n                    }\n                    // PQ74774 Ends\n\n                    //92702 - BAAC collaborators must be called last of all\n                    //the only example we know of is the JNS collaborator\n                    if (ivBeforeActivationAfterCompletionCollaborators != null) {\n                        // Call postInvoke on all of the BeforeActivationAfterCompletion\n                        // Collaborators that were successfully preInvoked. Note that\n                        // the order is the same as preInvoke.                    d228192\n                        for (int i = 0; i < s.ivBeforeActivationAfterCompletionPreInvoked; i++) {\n                            if (isTraceOn && tc.isDebugEnabled())\n                                Tr.debug(tc, \"postInokve : Invoking BeforeActivationAfterCompletionCollaborator.postInvoke method on: \"\n                                             + ivBeforeActivationAfterCompletionCollaborators[i].getClass().getName());\n\n                            Object cookie = s.ivBeforeActivationAfterCompletionCookies == null ? null : s.ivBeforeActivationAfterCompletionCookies[i]; // F61004.3\n                            notifyPostInvoke(ivBeforeActivationAfterCompletionCollaborators[i], s, cookie);\n                        }\n                    }\n\n                    // Inform EJB method callback that method has completed. This must be\n                    // called after the transaction has completed.\n                    if (s.ivEJBMethodCallback != null) {\n                        // hmmmm, what if exception occurs?  Same problem as if beforeActivationAfterCompletion\n                        // collaborators throw an exception prior to this change.\n                        s.invocationCallbackPostInvoke(); // d194342.1.1\n                    }\n\n                    // drop the reference on the wrapper\n                    // Not required if the wrapper has already been removed\n                    if (s.unpinOnPostInvoke) //d140003.19\n                        wrapperManager.postInvoke(wrapper);\n\n                    // If preInvoke began the transaction, then the ContainerTx\n                    // is no longer in use, and so may be cleared, so just call\n                    // releaseResources() to clear all of the fields... making garbage\n                    // collection eaiser, and allows things to be garbage collected\n                    // even if some other object (like PM) holds a reference to the\n                    // ContainerTx for awhile.                     d154342.10 d156606\n                    // Note that 'began' for the ContainerTx is not valid at this\n                    // point, since the postInvoke call on it restored the 'began'\n                    // setting to the previous method state, so use the 'began' flag\n                    // in EJSDeployedSupport (valid for current method).      d156688\n                    if (s.currentTx != null && s.began) {\n                        s.currentTx.releaseResources(); // d215317\n                        s.currentTx = null;\n                    }\n\n                    // 112678.6 d115602-1\n                    if (methodInfo.setClassLoader) {\n                        EJBThreadData.svThreadContextAccessor.popContextClassLoaderForUnprivileged(s.oldClassLoader);\n                    } else {\n                        threadData.popORBWrapperClassLoader();\n                    }\n\n                    //92682\n                    threadData.popMethodContext(); // d646139.1, RTC102449\n\n                    // d161864 Begins\n                    if (isTraceOn) {\n                        if (tc.isEntryEnabled())\n                            Tr.exit(tc, \"EJBpostInvoke(\" + methodId + \":\" +\n                                        methodInfo.getMethodName() + \")\" +\n                                        ((s.ivException != null) ? (\"**** throws \" + s.ivException) : \"\"));\n                        if (TEEJBInvocationInfo.isTraceEnabled()) {\n                            if (s.ivException == null) {\n                                TEEJBInvocationInfo.tracePostInvokeEnds(s, wrapper);\n                            } else {\n                                TEEJBInvocationInfo.tracePostInvokeException(s, wrapper,\n                                                                             s.ivException);\n                            }\n                        }\n                    }\n                    // d161864 Ends\n                } //end 92702\n            }\n        }\n    }", "public static <T extends Serializable>void write(File file,T object) throws IOException {\n  try (ObjectOutputStream output=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(file)))){\n    output.writeObject(object);\n  }\n }\n", "    public void addPart() {\n        addParts(1);\n    }\n", "private static int readBlock ( GifParameters gif ) throws java . io . IOException { gif . blockSize = gif . input . read ( ) ; if ( gif . blockSize <= NUM_ ) return gif . blockSize = NUM_ ; gif . blockSize = gif . input . read ( gif . block , NUM_ , gif .", "public static boolean isAllNumber(String str){\n  boolean hasNumber=false;\n  for (int i=0; i < str.length(); i++) {\n    if (!(Character.isDigit(str.charAt(i)) || str.charAt(i) == '.' || str.charAt(i) == ',' || str.charAt(i) == '%' || str.charAt(i) == '$' || str.charAt(i) == '_')) {\n      return false;\n    }\n else     if (Character.isDigit(str.charAt(i)))     hasNumber=true;\n  }\n  if (hasNumber == true)   return true;\n else   return false;\n}\n", "public AccessTokenUnavailableException ( final String message , final Throwable cause ) { super ( message , cause ) ; }", "public boolean isExplain ( ) { return isExplain ; }", "\tprotected Element getTopLevelButtonElement(RenderingContext rc, ButtonEx button, Style fallbackStyle) {\n\t\tElement buttonE = rc.createE(\"button\");\n\t\tif (! Render.isClientIE(rc)) {\n\t\t\tbuttonE.setAttribute(\"type\", \"button\");\n\t\t}\n\t\tif (rc.getRP(PushButton.PROPERTY_SUBMIT_BUTTON, fallbackStyle, false)) {\n\t\t\tif (! Render.isClientIE(rc)) {\n\t\t\t\tbuttonE.setAttribute(\"type\", \"submit\");\n\t\t\t}\n\t\t}\n\t\tif (!button.isRenderEnabled()) {\n\t\t\tbuttonE.setAttribute(\"disabled\", \"disabled\");\n\t\t}\n\t\treturn buttonE;\n\t}\n", "private static void setInResponseToForSamlResponseIfNeeded(final Service service, final Response samlResponse) {\n        if (service instanceof SamlService) {\n            val samlService = (SamlService) service;\n            val requestId = samlService.getRequestId();\n            if (StringUtils.isNotBlank(requestId)) {\n                samlResponse.setInResponseTo(requestId);\n            }\n        }\n    }", "private void infoMessage(String channel,String text){\n  if (text.startsWith(\"The moderators of\")) {\n    parseModeratorsList(text,channel);\n  }\n else {\n    listener.onInfo(channel,\"[Info] \" + text);\n  }\n}\n", "    protected void add(ControllerElement t) throws ControllerException {\n        myResponse.add(t);\n    } /* add(ControllerElement) */\n", "  public boolean apply(Table table, int rowId) {\n    WrapToPrefTuple tuple = new WrapToPrefTuple(new TupleImpl(table, rowId));\n    return prefPred.getBoolean(tuple);\n  }\n", "protected double dCalc(ContinuousDistribution cd){\n  double max=0;\n  for (int i=0; i < v.length(); i++) {\n    if (v.get(i) >= cd.min() && v.get(i) <= cd.max()) {\n      double tmp=(i + 1.0) / v.length() - cd.cdf(v.get(i));\n      max=Math.max(max,Math.abs(tmp));\n    }\n else {\n      max=Math.max(max,Math.abs((i + 1.0) / v.length()));\n    }\n  }\n  return max;\n}\n", "public TitlePaneIconifyButtonWindowNotFocusedState ( ) { super ( STR_ ) ; }", "protected short rlshort(DataInputStream dis) throws IOException {\n  short s=0;\n  short high, low;\n  s=dis.readShort();\n  high=(short)((s & 0xFF) << 8);\n  low=(short)((s & 0xFF00) >>> 8);\n  s=(short)(high | low);\n  return s;\n}\n", "@SuppressWarnings(\"unchecked\") protected void BuildNewLGSubrs(int Font) throws java.io.IOException {\n  if (fonts[Font].isCID) {\n    hSubrsUsed=new GenericArray<>(fonts[Font].fdprivateOffsets.length);\n    lSubrsUsed=new GenericArray<>(fonts[Font].fdprivateOffsets.length);\n    NewLSubrsIndex=new byte[fonts[Font].fdprivateOffsets.length][];\n    fonts[Font].PrivateSubrsOffset=new int[fonts[Font].fdprivateOffsets.length];\n    fonts[Font].PrivateSubrsOffsetsArray=new int[fonts[Font].fdprivateOffsets.length][];\n    List<Integer> FDInList=new ArrayList<>(FDArrayUsed);\n    for (int j=0; j < FDInList.size(); j++) {\n      int FD=(int)FDInList.get(j);\n      hSubrsUsed.set(FD,new HashMap<Integer,int[]>());\n      lSubrsUsed.set(FD,new ArrayList<Integer>());\n      BuildFDSubrsOffsets(Font,FD);\n      if (fonts[Font].PrivateSubrsOffset[FD] >= 0) {\n        BuildSubrUsed(Font,FD,fonts[Font].PrivateSubrsOffset[FD],fonts[Font].PrivateSubrsOffsetsArray[FD],hSubrsUsed.get(FD),lSubrsUsed.get(FD));\n        NewLSubrsIndex[FD]=BuildNewIndex(fonts[Font].PrivateSubrsOffsetsArray[FD],hSubrsUsed.get(FD),RETURN_OP);\n      }\n    }\n  }\n else   if (fonts[Font].privateSubrs >= 0) {\n    fonts[Font].SubrsOffsets=getIndex(fonts[Font].privateSubrs);\n    BuildSubrUsed(Font,-1,fonts[Font].privateSubrs,fonts[Font].SubrsOffsets,hSubrsUsedNonCID,lSubrsUsedNonCID);\n  }\n  BuildGSubrsUsed(Font);\n  if (fonts[Font].privateSubrs >= 0)   NewSubrsIndexNonCID=BuildNewIndex(fonts[Font].SubrsOffsets,hSubrsUsedNonCID,RETURN_OP);\n  NewGSubrsIndex=BuildNewIndex(gsubrOffsets,hGSubrsUsed,RETURN_OP);\n}\n", "public void visit(BioPAXElement domain, Object range, Model model, PropertyEditor<?,?> editor) {\n\t\t// actions\n\t\tvisit(range, domain, model, editor);\n\t}", "    private ClassInfo lookupClass(String s) {\n        try {\n            return classFinder.lookupClass(s);\n        } catch (ClassNotFoundException e) {\n            throw new NoClassDefFoundError(e.getMessage());\n        }\n    }\n", "public EntityMakerBuilder reuseEntities(Collection<Object> entities) {\n        for (Object entity : entities) {\n            Class aClass = entity.getClass();\n            valueHolder.putIfNotNull(aClass, entity);\n        }\n        return this;\n    }", "    public void actionPerformed(ActionEvent actionEvent) {\n        if (actionEvent.getSource() == okButton) {\n            dispose();\n        }\n    }\n", "private void computeProximityThreshold(Keyboard keyboard){\n  if (keyboard == null)   return;\n  final Key[] keys=mKeys;\n  if (keys == null)   return;\n  int length=keys.length;\n  int dimensionSum=0;\n  for (int i=0; i < length; i++) {\n    Key key=keys[i];\n    dimensionSum+=Math.min(key.width,key.height + mKeyboardVerticalGap) + key.gap;\n  }\n  if (dimensionSum < 0 || length == 0)   return;\n  mKeyDetector.setProximityThreshold((int)(dimensionSum * 1.4f / length));\n}\n", "boolean isLiveSync ( ) { return liveSyncActions . contains ( this ) ; }", "protected abstract T subBuildTable ( ReadableFontData data ) ;", "private CsvFileSet createTestFileSet ( String testName ) throws Exception { File testDir = prepareTestDir ( testName ) ; UniversalDataSource ds = createDataSource ( testName ) ; UniversalConnection conn = ds . getConnection ( ) ; Table staging = createTableMetadata ( testName , STR_ , BOOL_ ) ; Table base = createTableMetadata ( testName , STR_ , BOOL_ ) ; CsvFileSet fileSet ; fileSet = new CsvFileSet ( staging , base , NUM_ ) ; fileSet . setConnection ( conn ) ; fileSet . setRowIdColumn ( STR_ ) ; fileSet . setStageDir ( testDir ) ; fileSet . setOutputCharset ( Charset . defaultCharset ( ) ) ; return fileSet ; }", "    protected void overflowMessage() {\n        getLogger().info(\"Content overflows line \"\n                + this.lineReceivingContent());\n    }\n", "@SuppressWarnings(\"unchecked\")\n    public static <T> Class<T> loadClass(String className) throws ClassNotFoundException {\n        return (Class<T>) getClassLoader().loadClass(className);\n    }", "public void testObjectMarshallingToJson ( ) { ToDoItem toDoItem = getToDoItem ( REMINDER_ON ) ; try { JSONObject json = toDoItem . toJSON ( ) ; assertEquals ( TEXT_BODY , json . getString ( STR_ ) ) ; assertEquals ( REMINDER_ON , json . getBoolean ( STR_ ", "private static Region rotateWithLeftChild(Region k2) {\n    Region k1 = k2.left;\n    k2.left(k1.right);\n    k1.right(k2);\n    return k1;\n  }", "void removeDeployment ( int deployId ) throws IOException ;", "public void releaseCatalogConnection ( Database conn ) { conn . disconnect ( ) ; }", "public void connect(LnTrafficController t){\n  t.addLocoNetListener(~0,this);\n}\n", "private boolean isArrayContains ( Object [ ] a , Object obj ) { for ( int i = NUM_ ; i < a . length ; i ++ ) { if ( a [ i ] . equals ( obj ) ) return BOOL_ ; } return BOOL_ ; }", "private void handleSequenceAnnotation(String seqName, String featureName, String value) {\n\t\tif (featureName.equals(GS_ACCESSION_NUMBER)) {\n\t\t\tstockholmStructure.addGSAccessionNumber(seqName, value);\n\t\t} else if (featureName.equals(GS_DESCRIPTION)) {\n\t\t\tstockholmStructure.addGSDescription(seqName, value);\n\t\t} else if (featureName.equals(GS_DATABASE_REFERENCE)) {\n\t\t\tstockholmStructure.addGSdbReference(seqName, value);\n\t\t} else if (featureName.equals(GS_ORGANISM_SPECIES)) {\n\t\t\tstockholmStructure.addGSOrganismSpecies(seqName, value);\n\t\t} else if (featureName.equals(GS_ORGANISM_CLASSIFICATION)) {\n\t\t\tstockholmStructure.addGSOrganismClassification(seqName, value);\n\t\t} else if (featureName.equals(GS_LOOK)) {\n\t\t\tstockholmStructure.addGSLook(seqName, value);\n\t\t} else {\n\t\t\t// unknown feature\n\t\t\tlogger.warn(\"Unknown Sequence Feature [{}].\\nPlease contact the Biojava team.\", featureName);\n\t\t}\n\t}", "public long inclusiveBetween(long start, long end, long value, String message) {\n        if (value < start || value > end) {\n            fail(message);\n        }\n        return value;\n    }", "\tpublic void performAction(Board board) {\n\t\tif (isLegal(board))\n\t\t{\n\t\t\tgetUnit().tryToMove(getTile());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgetUnit().hold();\n\t\t}\n\t}\n", "public float envelope ( ) { return envelope ( mLeft , mRight ) ; }", "\tpublic void setValues(byte[] v) throws DicomException {\n\t\tthrow new DicomException(\"internal error - wrong value type for attribute \"\n\t\t\t\t+ this.elementTag);\n\t}\n", "public String importMessage(String key, Locale locale) {\n\n        key = key.trim();\n        String[] tokens = key.split(\"#\");\n        if (tokens.length != 2) {\n            return null;\n        }\n        String className = tokens[0];\n        String messageName = tokens[1];\n        try {\n            Method messagesGet = Class.forName(className).getMethod(\"get\");\n            I_CmsMessageBundle bundle = (I_CmsMessageBundle)(messagesGet.invoke(null));\n            return bundle.getBundle(locale).key(messageName);\n        } catch (Exception e) {\n            LOG.error(e.getLocalizedMessage(), e);\n            return null;\n        }\n    }", "public final AC shrinkPrio(int p){\n  return shrinkPrio(p,curIx);\n}\n", "public static boolean isDebugEnabled(JShell state, int flag) {\n        if (debugMap == null) {\n            return false;\n        }\n        Integer flags = debugMap.get(state);\n        if (flags == null) {\n            return false;\n        }\n        return (flags & flag) != 0;\n    }", "public void groupBy(String column) throws QueryPlanException {\n  this.groupByColumn=column;\n}\n", "private java.util.Map<JobHistory.Keys, String> getLastSuccessfulTaskAttempt(JobHistory.Task task) {\n    \n    Map<String, JobHistory.TaskAttempt> taskAttempts = task.getTaskAttempts();\n    int size = taskAttempts.size();\n    java.util.Iterator<Map.Entry<St", "public void addListener(KeyComboListener listener){\n  mListeners.add(listener);\n}\n", "private int skipDelimiters(int startPos){\n  if (delimiters == null) {\n    throw new NullPointerException();\n  }\n  int position=startPos;\n  while (!retDelims && position < maxPosition) {\n    char c=str.charAt(position);\n    if ((c > maxDelimChar) || (delimiters.indexOf(c) < 0))     break;\n    position++;\n  }\n  return position;\n}\n", "private static String formatSampleRate ( int rate ) { return MHZ_FORMATTER . format ( ( double ) rate / NUM_ ) ; }", "public double[] coefficients(){\n  double[] coefficients=new double[m_SelectedAttributes.length + 1];\n  int counter=0;\n  for (int i=0; i < m_SelectedAttributes.length; i++) {\n    if ((m_SelectedAttributes[i]) && ((i != m_ClassIndex))) {\n      coefficients[i]=m_Coefficients[counter++];\n    }\n  }\n  coefficients[m_SelectedAttributes.length]=m_Coefficients[counter];\n  return coefficients;\n}\n", "   public boolean hasReceived()\n   {  return hasParameter(received_param);\n   }\n", "private CBookmarkFunctions ( ) { }", "PropertyRoleCalculator ( String userRoles ) { this . userRoles = userRoles ; }", "public Optional<CtClass> loadClass(ArchiveType archiveType, String name) {\n\t\tOptional<CtClass> loadedClass = Optional.absent();\n\t\tif (this.options.getClassPathMode() == JarArchiveComparatorOptions.ClassPathMode.ONE_COMMON_CLASSPATH) {\n\t\t\ttry {\n\t\t\t\tloadedClass = Optional.of(commonClassPool.get(name));\n\t\t\t} catch (NotFoundException e) {\n\t\t\t\tif (!options.getIgnoreMissingClasses().ignoreClass(e.getMessage())) {\n\t\t\t\t\tthrow JApiCmpException.forClassLoading(e, name, this);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.options.getClassPathMode() == JarArchiveComparatorOptions.ClassPathMode.TWO_SEPARATE_CLASSPATHS) {\n\t\t\tif (archiveType == ArchiveType.OLD) {\n\t\t\t\ttry {\n\t\t\t\t\tloadedClass = Optional.of(oldClassPool.get(name));\n\t\t\t\t} catch (NotFoundException e) {\n\t\t\t\t\tif (!options.getIgnoreMissingClasses().ignoreClass(e.getMessage())) {\n\t\t\t\t\t\tthrow JApiCmpException.forClassLoading(e, name, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (archiveType == ArchiveType.NEW) {\n\t\t\t\ttry {\n\t\t\t\t\tloadedClass = Optional.of(newClassPool.get(name));\n\t\t\t\t} catch (NotFoundException e) {\n\t\t\t\t\tif (!options.getIgnoreMissingClasses().ignoreClass(e.getMessage())) {\n\t\t\t\t\t\tthrow JApiCmpException.forClassLoading(e, name, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new JApiCmpException(Reason.IllegalState, \"Unknown archive type: \" + archiveType);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new JApiCmpException(Reason.IllegalState, \"Unknown classpath mode: \" + this.options.getClassPathMode());\n\t\t}\n\t\treturn loadedClass;\n\t}", "private void transferPlaylistToModels ( PlaylistV2 playlist ) { if ( playlist != null ) { mPlaylistLoading = BOOL_ ; mAliasModel . addAliases ( playlist . getAliases ( ) ) ; mChannelModel . addChannels ( playlist . getChannels ( ) ) ; mChannelMapModel . a", "public Future < ReplDBMSHeader > watchForCommittedSequenceNumber ( long seqno , boolean terminate ) throws InterruptedException { Future < ReplDBMSHeader > watch = progressTracker . watchForCommittedSequenceNumber ( seqno , terminate ) ; notifyThreads ( ) ; return watch ; }", "protected void disposeInternal ( ) { }", "private Variable parseVariableSpecification(String token) throws ParseException {\n  if (!token.endsWith(\")\")) {\n    throw new ParseException(\"invalid variable specification '\" + token + \"', not properly formatted\");\n  }\n  if (token.startsWith(\"R(\")) {\n    String content=token.substring(2,token.length() - 1);\n    int index=content.indexOf(';');\n    if (index >= 0) {\n      double lowerBound=Double.parseDouble(content.substring(0,index));\n      double upperBound=Double.parseDouble(content.substring(index + 1,content.length()));\n      return EncodingUtils.newReal(lowerBound,upperBound);\n    }\n else {\n      throw new ParseException(\"invalid real specification '\" + token + \"', expected R(<lb>,<ub>)\");\n    }\n  }\n else   if (token.startsWith(\"B(\")) {\n    String content=token.substring(2,token.length() - 1);\n    try {\n      int length=Integer.parseInt(content.trim());\n      return EncodingUtils.newBinary(length);\n    }\n catch (    NumberFormatException e) {\n      throw new ParseException(\"invalid binary specification '\" + token + \"', expected B(<length>)\");\n    }\n  }\n else   if (token.startsWith(\"P(\")) {\n    String content=token.substring(2,token.length() - 1);\n    try {\n      int length=Integer.parseInt(content.trim());\n      return EncodingUtils.newPermutation(length);\n    }\n catch (    NumberFormatException e) {\n      throw new ParseException(\"invalid permutation specification '\" + token + \"', expected P(<length>)\");\n    }\n  }\n else {\n    throw new ParseException(\"invalid variable specification '\" + token + \"', unknown type\");\n  }\n}\n", "    public void setCorePoolSize(int size) {\n        logger.debug(\"Setting core thread pool size: {}\", size);\n        executorConfig.setCorePoolSize(size);\n    }\n", "@Override public String metricString(){\nswitch (m_metricType) {\ncase LIFT:\n    return \"lif\";\ncase LEVERAGE:\n  return \"leverage\";\ncase CONVICTION:\nreturn \"conviction\";\ndefault :\nreturn \"conf\";\n}\n}\n", "public List<BackupMetaData> getAvailableBackups() throws Exception\n    {\n        Map<String, String> config = getBackupConfig();\n        return backupProvider.get().getAvailableBackups(exhibitor, config);\n    }", "public boolean isLoggedIn(){\n  return mLoggedInUserId != null;\n}\n", "private void buildField(ClassWriter classWriter,List<SFieldDef> fields){\n  for (  SFieldDef field : fields) {\n    FieldVisitor fieldVisitor=classWriter.visitField(acc(field.modifiers()),field.name(),typeToDesc(field.type()),null,null);\n    for (    SAnno ", "private Clip loadSound(String pName) {\n        try {\n            java.net.URL soundurl = ResourceManager.class.getResource(\"/res/\" + pName + \".wav\");\n            AudioInputStream s = AudioSystem.getAudioInputStream(soundurl);\n            Clip snd = AudioSystem.getClip();\n            snd.open(s);\n            mSounds.put(pName, snd);\n            return snd;\n        } catch (Exception e) {\n            LOGGER.error(\"Unable to load sound \" + pName + \".\");\n            return null;\n        }\n    }", "    public void clearVariables() {\n        subjectVariableInterpreter.clear();\n        predicateVariableInterpreter.clear();\n        functionVariableInterpreter.clear();\n    }\n", "public int concurrency ( ) { return concurrency ; }", "protected void execute(EntityManagerCommand command) {\n        try {\n            getEntityManagerCommandExecutor().execute(command);\n        } catch (javax.persistence.PersistenceException e) {\n            throw new PersistenceException(e);\n        }\n    ", "public static boolean isUTCDay ( long dateLong ) { return dateLong == getUTCDayFloor ( dateLong ) ; }", "    public String getId(){\n        String myId = null;\n        if (this.getTask()!=null && this.getResource()!=null && this.getTask().getProject()!=null) {\n            String taskId = this.getTask().getId();\n            String resId = this.getResource().getId();\n            myId = taskId + \"-\" + resId + \"-\" + this.getTask().getProject().getId();            \n        }\n        return myId;\n    }\n", "private String getTimeText() {\n\n        String timeAsString = m_time.getText().trim();\n        if (CmsDateConverter.is12HourPresentation()) {\n            if (!(timeAsString.contains(CmsDateConverter.AM) || timeAsString.contains(CmsDateConverter.PM))) {\n                if (m_am.isChecked()) {\n                    timeAsString = timeAsString + \" \" + CmsDateConverter.AM;\n                } else {\n                    timeAsString = timeAsString + \" \" + CmsDateConverter.PM;\n                }\n            }\n        }\n        return timeAsString;\n    }", "\tpublic void addQuestionCheckbox(String label) {\n\t\tJCheckBox checkbox = new JCheckBox(label);\n\t\tcheckbox.setFont(DEFAULT_FONT);\n\t\taddQuestionComponent(\"\", checkbox, GridBagConstraints.HORIZONTAL);\n\t}\n", "private CGlobalSettings ( ) { }", "public List<FacesConfigLocaleConfigType<FacesConfigApplicationType<T>>> getAllLocaleConfig()\n   {\n      List<FacesConfigLocaleConfigType<FacesConfigApplicationType<T>>> list = new ArrayList<FacesConfigLocaleConfigType<FacesConfigApplicationType<T>>>();\n      List<Node> nodeList = childNode.get(\"locale-config\");\n      for(Node node: nodeList)\n      {\n         FacesConfigLocaleConfigType<FacesConfigApplicationType<T>>  type = new FacesConfigLocaleConfigTypeImpl<FacesConfigApplicationType<T>>(this, \"locale-config\", childNode, node);\n         list.add(type);\n      }\n      return list;\n   }", "protected void updatePanelForExpansion(float percentage){\n  updatePromoVisibility(1.f);\n  float baseBaseY=MathUtils.interpolate(0.f,getBasePageTargetY(),percentage);\n  mBasePageY=baseBaseY;\n  float brightness=MathUtils.interpolate(BASE_PAGE_BRIGHTNESS_STATE_PEEKED,BASE_PAGE_BRIGHTNESS_STATE_EXPANDED,percentage);\n  mBasePageBrightness=brightness;\n  float searchBarHeight=Math.round(MathUtils.interpolate(mSearchBarHeightPeeking,getSearchBarHeightExpanded(),percentage));\n  mSearchBarHeight=searchBarHeight;\n  mIsSearchBarBorderVisible=true;\n  float fadingOutPercentage=Math.min(percentage,.5f) / .5f;\n  float fadingInPercentage=Math.max(percentage - .5f,0.f) / .5f;\n  mArrowIconOpacity=MathUtils.interpolate(ARROW_ICON_OPACITY_STATE_PEEKED,ARROW_ICON_OPACITY_STATE_EXPANDED,fadingOutPercentage);\n  mCloseIconOpacity=MathUtils.interpolate(CLOSE_ICON_OPACITY_STATE_PEEKED,CLOSE_ICON_OPACITY_STATE_EXPANDED,fadingInPercentage);\n  float peekedHeight=getPanelHeightFromState(PanelState.PEEKED);\n  float threshold=PROGRESS_BAR_VISIBILITY_THRESHOLD_DP / mPxToDp;\n  float diff=Math.min(mHeight - peekedHeight,threshold);\n  float progressBarOpacity=MathUtils.interpolate(0.f,1.f,diff / threshold);\n  mProgressBarOpacity=progressBarOpacity;\n  updateSearchBarShadow();\n}\n", "public static CPluginOutputDialog instance ( ) { return m_instance ; }", "@Override\n    public Map<String, Object> getBodyParameters() {\n        HashMap<String, Object> params = new HashMap<String, Object>();\n        params.put(\"userId\", this.userId);\n        params.put(\"itemId\", this.itemId);\n        params.put(\"portion\", this.portion);\n        if (this.sessionId!=null) {\n            params.put(\"sessionId\", this.sessionId);\n        }\n        if (this.timestamp!=null) {\n            params.put(\"timestamp\", this.timestamp.getTime()/1000.0);\n        }\n        if (this.cascadeCreate!=null) {\n            params.put(\"cascadeCreate\", this.cascadeCreate);\n        }\n        if (this.recommId!=null) {\n            params.put(\"recommId\", this.recommId);\n        }\n        if (this.additionalData!=null) {\n            params.put(\"additionalData\", this.additionalData);\n        }\n        return params;\n    }", "  public String getOptionsPart(String command){\n    Matcher matcher = executablePattern.matcher(command);\n    if(matcher.matches() || matcher.find()){\n      return matcher.group(optionsGroup);\n    }\n    else{\n      return command;\n    }\n  }\n", "\tprotected void queryFailed(Exception e) {\n\t\tSystem.err.println(\"Failed to query resource \" + resourceName);\n\t\te.printStackTrace();\n\t\t\n\t\tif(e instanceof ResourceException && e.getCause() != null) {\n\t\t\tSystem.err.println(\"Caused by:\");\n\t\t\te.getCause().printStackTrace();\n\t\t}\n\t}\n", "\tprotected Widget findMenu(IMatcher matcher, String menuName) throws WidgetNotFoundException {\n\t\treturn findMenu(getMenuMatcher(menuName), 0);\n\t}\n", "    private void checkForCompaction() {\n\tint i, numRas;\n\tint numDead = 0;\n\tint numAlive = 0;\n\tRenderAtom ra;\n\n\tif (!VirtualUniverse.mc.doCompaction) {\n\t    return;\n\t}\n\n\tnumRas = renderAtoms.size();\n\tfor (i=0; i<numRas; i++) {\n\t    ra = (RenderAtom)renderAtoms.get(i);\n\t    // If the renderatom has not been visible for \"notVisibleCount\" then\n\t    // add it to the deadlist\n\t    if (ra.lastVisibleTime < removeCutoffTime) {\n\t\tnumDead++;\n\t    }\n\t\t\n\t}\n\tnumAlive = numRas - numDead;\n\tif (numAlive*2 < numDead) {\n\t    compact();\n\t}\n    }\n", "    public void addOptionsChangeListener(OptionsChangeListener listener){\n        changeListeners.add(listener);\n    }\n", "private void handleRightClick ( final int clickCount , final NaviNode node ) { if ( clickCount == NUM_ ) { MoveFunctions . centerNode ( m_graph , node ) ; } else if ( clickCount == NUM_ ) { ZoomFunctions . zoomToNode ( m_graph , node ) ; } }", "public static void CF3(double[] x,double[] f,double[] c,int nx){\n  int count1=0;\n  int count2=0;\n  double sum1=0.0;\n  double sum2=0.0;\n  double prod1=1.0;\n  double prod2=1.0;\n  double yj;\n  double pj;\n  double N=2.0;\n  double a=1.0;\n  for (int j=2; j <= nx; j++) {\n    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);\n    pj=Math.cos(20.0 * yj * PI / Math.sqrt(j + 0.0));\n    if (j % 2 == 0) {\n      sum2+=yj * yj;\n      prod2*=pj;\n      count2++;\n    }\n else {\n      sum1+=yj * yj;\n      prod1*=pj;\n      count1++;\n    }\n  }\n  f[0]=x[0] + 2.0 * (4.0 * sum1 - 2.0 * prod1 + 2.0) / (double)count1;\n  f[1]=1.0 - x[0] * x[0] + 2.0 * (4.0 * sum2 - 2.0 * prod2 + 2.0) / (double)count2;\n  c[0]=f[1] + f[0] * f[0] - a * Math.sin(N * PI * (f[0] * f[0] - f[1] + 1.0)) - 1.0;\n}\n", "public static int computeMinImageSampleSize(ImageSize srcSize){\n  int srcWidth=srcSize.getWidth();\n  int srcHeight=srcSize.getHeight();\n  int targetWidth=maxBitmapSize.getWidth();\n  int targetHeight=maxBitmapSize.getHeight();\n  int widthScale=(int)Math.ceil((float)srcWidth / targetWidth);\n  int heightScale=(int)Math.ceil((float)srcHeight / targetHeight);\n  return Math.max(widthScale,heightScale);\n}\n", "public void delete(RandomAccessFile raf,RandomAccessFile tempRaf) throws CannotReadException, CannotWriteException, IOException {\n  raf.seek(0);\n  tempRaf.seek(0);\n  deleteTag(raf,tempRaf);\n}\n", "\tpublic void set_code_string(String new_str) {\n\t\t_code_string = new_str;\n\t}\n", "public @Nullable String getLinkRootPath(@NotNull Page page, @NotNull String linkTypeId) {\n    if (StringUtils.equals(linkTypeId, InternalLinkType.ID)) {\n      // inside an experience fragment it does not make sense to use a site root path\n      if (Path.isExperienceFragmentPath(page.getPath())) {\n        return DEFAULT_ROOT_PATH_CONTENT;\n      }\n      return AdaptTo.notNull(page.getContentResource(), SiteRoot.class).getRootPath(page);\n    }\n    else if (StringUtils.equals(linkTypeId, InternalCrossContextLinkType.ID)) {\n      return DEFAULT_ROOT_PATH_CONTENT;\n    }\n    else if (StringUtils.equals(linkTypeId, MediaLinkType.ID)) {\n      return DEFAULT_ROOT_PATH_MEDIA;\n    }\n    return null;\n  }", "public void addWatchSyncPredicate ( WatchPredicate < ReplDBMSHeader > predicate ) throws InterruptedException { readQueue . addWatchSyncPredicate ( predicate ) ; }", "    public void delete() throws SkypeException {\n        Utils.executeWithErrorCheck(\"DELETE SMS \" + getId());\n    }\n", "protected List splitInCriteria(Object attribute, Collection values, boolean negative, int inLimit)\r\n    {\r\n        List result = new ArrayList();\r\n        Collection inCollection = new ArrayList();\r\n\r\n        if (values == null || values.isEmpty())\r\n        {\r\n            // OQL creates empty Criteria for late binding\r\n            result.add(buildInCriteria(attribute, negative, values));\r\n        }\r\n        else\r\n        {\r\n            Iterator iter = values.iterator();\r\n\r\n            while (iter.hasNext())\r\n            {\r\n                inCollection.add(iter.next());\r\n                if (inCollection.size() == inLimit || !iter.hasNext())\r\n                {\r\n                    result.add(buildInCriteria(attribute, negative, inCollection));\r\n                    inCollection = new ArrayList();\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }", "public String[] convert(String sqlStatements){\n  m_conversionError=null;\n  if (sqlStatements == null || sqlStatements.length() == 0) {\n    m_conversionError=\"SQL_Statement is null or has zero length\";\n    log.info(m_conversionError);\n    return null;\n  }\n  return convertIt(sqlStatements);\n}\n", "static HAProxyMessage decodeHeader(String header) {\n        if (header == null) {\n            throw new HAProxyProtocolException(\"header\");\n        }\n\n        String[] parts = header.split(\" \");\n        int numParts = parts.length;\n\n        if (numParts <", "final void resetOperator ( UniqueString us ) { this . operator = Context . getGlobalContext ( ) . getSymbol ( us ) ; }", "private static int countEchoBreakpoints ( final BreakpointManager manager , final ZyGraph graph ) { final BreakpointableNodeCounter ebc = new BreakpointableNodeCounter ( manager ) ; NodeBreakpointIterator . iterate ( graph , ebc ) ; return ebc . getCount ( ) ; }", "public <K, C> ColumnMutation prepareColumnMutation(ColumnFamily<K, C> cf, K rowKey, C column, ConsistencyLevel consistency) {\n        return _astyanaxKeyspace.prepareColumnMutation(cf, rowKey, column).setConsistencyLevel(clamp(consistency));\n    }", "public int compareToIgnoreCase(String string){\n  int o1=offset, o2=string.offset, result;\n  int end=offset + (count < string.count ? count : string.count);\n  char c1, c2;\n  char[] target=string.value;\n  while (o1 < end) {\n    if ((c1=value[o1++]) == (c2=target[o2++])) {\n      continue;\n    }\n    c1=Character.toLowerCase(Character.toUpperCase(c1));\n    c2=Character.toLowerCase(Character.toUpperCase(c2));\n    if ((result=c1 - c2) != 0) {\n      return result;\n    }\n  }\n  return count - string.count;\n}\n", "@Override public void pushContext(){\n  super.pushContext();\n  if (fCurrentContext + 1 == fValidContext.length) {\n    boolean[] contextarray=new boolean[fValidContext.length * 2];\n    System.arraycopy(fValidContext,0,contextarray,0,fValidContext.length);\n    fValidContext=contextarray;\n  }\n  fValidContext[fCurrentContext]=true;\n}\n", "public static < T > List < T > toList ( Iterator < T > self ) { List < T > answer = new ArrayList < T > ( ) ; while ( self . hasNext ( ) ) { answer . add ( self . next ( ) ) ; } return answer ; }", "public void deleteUsers(Set users) throws AMException, SSOException {\n  Iterator iter=users.iterator();\n  while (iter.hasNext()) {\n    String userDN=(String)iter.next();\n    AMUser user=new AMUserImpl(super.token,userDN);\n    user.delete();\n  }\n}\n", "public double[] distributionForInstance(Instance instance) throws Exception {\n  return m_Classifier.distributionForInstance(instance);\n}\n", "  public void addException(MetaException exception) {\n    exceptions.add(exception);\n  }\n", "public CInstructionUpdater ( final ZyGraph graph ) { m_graph = graph ; }", "public void startExamination(){\n  examiner=new Thread(new ExamineSsl());\n  examiner.setPriority(Thread.MIN_PRIORITY);\n  examiner.start();\n}\n", "public boolean isRet() {\n\t\treturn opcode == Opcode.opc_ret;\n\t}", "\tpublic void loadRadioList() {\n\t\tRadioReader reader = new RadioReader(SystemUtils.radioFile);\n\t\t\n\t\t_rootCategory = reader.read();\n\t}\n", "\tpublic int getRowCount() {\n\t\tsynchronized ( PARAMETERS_LOCK ) {\n\t\t\treturn _parameters.size();\n\t\t}\n\t}\n", "public List<CmsCategory> readCategoriesForRepositories(\n        CmsObject cms,\n        String parentCategoryPath,\n        boolean includeSubCats,\n        List<String> repositories,\n        boolean includeRepositories)\n    throws CmsException {\n\n        String catPath = parentCategoryPath;\n        if (catPath == null) {\n            catPath = \"\";\n        }\n\n        Collection<CmsCategory> cats = includeRepositories ? new ArrayList<CmsCategory>() : new HashSet<CmsCategory>();\n\n        // traverse in reverse order, to ensure the set will contain most global categories\n        Iterator<String> it = repositories.iterator();\n        while (it.hasNext()) {\n            String repository = it.next();\n            try {\n                if (includeRepositories) {\n                    CmsCategory repo = getCategory(cms, cms.readResource(repository));\n                    cats.add(repo);\n                }\n                cats.addAll(\n                    internalReadSubCategories(cms, internalCategoryRootPath(repository, catPath), includeSubCats));\n            } catch (CmsVfsResourceNotFoundException e) {\n                // it may be that the given category is not defined in this repository\n                // just ignore\n            }\n        }\n        List<CmsCategory> ret = new ArrayList<CmsCategory>(cats);\n        if (!includeRepositories) {\n            Collections.sort(ret);\n        }\n        return ret;\n    }", "public static String format(Attributes attrs) throws NamingException {\n  if (attrs == null || attrs.size() == 0) {\n    return \"objectClass=*\";\n  }\n  String answer;\n  answer=\"(& \";\n  Attribute attr;\n  for (NamingEnumeration<? extends Attribute> e=attrs.getAll(); e.hasMore(); ) {\n    attr=e.next();\n    if (attr.size() == 0 || (attr.size() == 1 && attr.get() == null)) {\n      answer+=\"(\" + attr.getID() + \"=\"+ \"*)\";\n    }\n else {\n      for (NamingEnumeration<?> ve=attr.getAll(); ve.hasMore(); ) {\n        String val=getEncodedStringRep(ve.next());\n        if (val != null) {\n          answer+=\"(\" + attr.getID() + \"=\"+ val+ \")\";\n        }\n      }\n    }\n  }\n  answer+=\")\";\n  return answer;\n}\n", "public int read(char[] buffer,int offset,int length){\n  int readLength=0;\n  while (length > 0) {\n    if (_length <= _offset) {\n      if (_head == null)       return readLength == 0 ? -1 : readLength;\n      TempCharBuffer next=_head.getNext();\n      if (_isFree)       TempCharBuffer.free(_head);\n      _head=next;\n      if (_head == null)       return readLength == 0 ? -1 : readLength;\n      _buffer=_head.buffer();\n      _length=_head.getLength();\n      _offset=0;\n    }\n    int sublen=_length - _offset;\n    if (length < sublen)     sublen=length;\n    System.arraycopy(_buffer,_offset,buffer,offset,sublen);\n    _offset+=sublen;\n    offset+=sublen;\n    length-=sublen;\n    readLength+=sublen;\n  }\n  return readLength;\n}\n", "public static ParallelSorter create ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }", "@Override public void write(String str){\n  write(str.toCharArray());\n}\n", "\tpublic List listTableNames(String searchInSchema) {\n\t\tList result = new ArrayList();\n\t\ttry {\n\t\t\tResultSet rs = this.schema.getTables(\n\t\t\t\t\tnull, searchInSchema, null, new String[] {\"TABLE\", \"VIEW\"});\n\t\t\twhile (rs.next()) {\n\t\t\t\tString schema = rs.getString(\"TABLE_SCHEM\");\n\t\t\t\tString table = rs.getString(\"TABLE_NAME\");\n\t\t\t\tif (!this.db.isIgnoredTable(schema, table)) {\n\t\t\t\t\tresult.add(toRelationName(schema, table));\n\t\t\t\t}\n\t\t\t}\n\t\t\trs.close();\n\t\t\treturn result;\n\t\t} catch (SQLException ex) {\n\t\t\tthrow new D2RQException(\"Database exception\", ex);\n\t\t}\n\t}\n", "@SuppressWarnings(\"unchecked\")\n    public <T> Predicate byPattern(Root<T> root, CriteriaBuilder builder, SearchParameters sp, Class<T> type) {\n        if (!sp.hasSearchPattern()) {\n            return null;\n        }\n\n        List<Predicate> predicates = newArrayList();\n        EntityType<T> entity = em.getMetamodel().entity(type);\n        String pattern = sp.getSearchPattern();\n\n        for (SingularAttribute<? super T, ?> attr : entity.getSingularAttributes()) {\n            if (attr.getPersistentAttributeType() == MANY_TO_ONE || attr.getPersistentAttributeType() == ONE_TO_ONE) {\n                continue;\n            }\n\n            if (attr.getJavaType() == String.class) {\n                predicates.add(jpaUtil.stringPredicate((Expression<String>) root.get(jpaUtil.attribute(entity, attr)), pattern, sp, builder));\n            }\n        }\n\n        return jpaUtil.orPredicate(builder, predicates);\n    }", "  private JMethod methodFor(JsStatement stat) {\n    if (stat instanceof JsExprStmt) {\n      JsExpression exp = ((JsExprStmt) stat).getExpression();\n      if (exp instanceof JsFunction) {\n        JsFunction func = (JsFunction) exp;\n        if (func.getName() != null) {\n          return map.nameToMethod(func.getName());\n        }\n      }\n    }\n    return null;\n  }\n", "public void calculateChainWaveBuffer ( float maxAngle , int bufferTime , float angleDecrement , float divisor , EntityLivingBase entity ) { this . prevPitchVariation = this . pitchVariation ; if ( entity . rotationPitch != entity . prevRotationPitch && Ma", "public void addDifference(Field field, Object before, Object after) {\n        ModelDiffEntry entry = new ModelDiffEntry();\n        entry.setBefore(before);\n        entry.setAfter(after);\n        entry.setField(field);\n        differences.put(field, entry);\n    }", "public void marshall(HlsGroupSettings hlsGroupSettings, ProtocolMarshaller protocolMarshaller) {\n\n        if (hlsGroupSettings == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(hlsGroupSettings.getAdMarkers(), ADMARKERS_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getBaseUrl(), BASEURL_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getCaptionLanguageMappings(), CAPTIONLANGUAGEMAPPINGS_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getCaptionLanguageSetting(), CAPTIONLANGUAGESETTING_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getClientCache(), CLIENTCACHE_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getCodecSpecification(), CODECSPECIFICATION_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getDestination(), DESTINATION_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getDestinationSettings(), DESTINATIONSETTINGS_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getDirectoryStructure(), DIRECTORYSTRUCTURE_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getEncryption(), ENCRYPTION_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getManifestCompression(), MANIFESTCOMPRESSION_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getManifestDurationFormat(), MANIFESTDURATIONFORMAT_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getMinFinalSegmentLength(), MINFINALSEGMENTLENGTH_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getMinSegmentLength(), MINSEGMENTLENGTH_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getOutputSelection(), OUTPUTSELECTION_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getProgramDateTime(), PROGRAMDATETIME_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getProgramDateTimePeriod(), PROGRAMDATETIMEPERIOD_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getSegmentControl(), SEGMENTCONTROL_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getSegmentLength(), SEGMENTLENGTH_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getSegmentsPerSubdirectory(), SEGMENTSPERSUBDIRECTORY_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getStreamInfResolution(), STREAMINFRESOLUTION_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getTimedMetadataId3Frame(), TIMEDMETADATAID3FRAME_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getTimedMetadataId3Period(), TIMEDMETADATAID3PERIOD_BINDING);\n            protocolMarshaller.marshall(hlsGroupSettings.getTimestampDeltaMilliseconds(), TIMESTAMPDELTAMILLISECONDS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "@Override\n    /** {@inheritDoc} */\n    public void addMBeanServers(Set<MBeanServerConnection> servers) {\n        try {\n            Class locatorClass = Class.forName(\"org.jboss.mx.util.MBeanServerLocator\");\n            Method method = locatorClass.getMeth", "public DateBuilder inMonth ( int inMonth ) { validateMonth ( inMonth ) ; this . month = inMonth ; return this ; }", "public boolean containsPrefix ( final CharSequence prefix ) { return containsPrefix ( prefix , NUM_ , prefix . length ( ) ) ; }", "private CGlobalSettings ( ) { }", "\tpublic ArtifactList getStepChildren(int parentId,  ArtifactLevelGroup group, ComponentTypeGroup componentGroup, ServiceCall call) throws java.rmi.RemoteException, DataAccessException, Exception {\n\t\ttry { \n\t\t\tstartService(call); \n\t\t\tArtifactList list = ada.getStepChildren(parentId, group, componentGroup);\n\t\t\tsetReference(list, list.getFirst().getArtifactRefId());\n\t\t\tstopService(call);\n\t\t\treturn list;\n\t\t} catch (Exception e) { \n\t\t\tDebug.LogException(this, e);\n\t\t\tthrow e;\n\t\t}\n\t}\t\n", "    public int read() throws IOException {\n        int c = myReader.read();\n\n        if (c != -1) {\n            myReadChars++;\n        }\n\n        return c;\n    }\n", "private HandshakeStatus doTasks(){\n  Runnable runnable;\n  while ((runnable=sslEngine.getDelegatedTask()) != null) {\n    runnable.run();\n  }\n  return sslEngine.getHandshakeStatus();\n}\n", "    public String getDeclaredScope() throws XAwareException {\n        String attrValue = element.getAttributeValue(\n                XAwareConstants.XAWARE_ATTR_SCOPE, XAwareConstants.xaNamespace);\n        if ((attrValue != null) && (!attrValue.equals(\"new\"))) {\n            throw new XAwareException(\"Invalid value for xa:scope: \" + attrValue);\n        }\n        return attrValue;\n    }\n", "public boolean computeScrollOffset(){\n  if (mFinished) {\n    return false;\n  }\n  final long timePassed=AnimationUtils.currentAnimationTimeMillis() - mStartTime;\n  float timePassedPercent=timePassed * 1f / mDuration;\n  if (timePassed >= mDuration) {\n    mFinished=true;\n    timePassedPercent=1f;\n  }\n  mCurrValue=Math.round(mValueFactor * mPathPointsHolder.getY(timePassedPercent));\n  return true;\n}\n", "    public void release() {\n        super.release();\n        bundle = Globals.MESSAGES_KEY;\n        formName = null;\n        page = 0;\n        methodName = null;\n        staticJavascript = \"true\";\n        dynamicJavascript = \"true\";\n        htmlComment = \"true\";\n        cdata = \"true\";\n        src = null;\n        formClientId = null;\n    }\n", "public static void createService(String fileName) throws UpgradeException {\n  String classMethod=\"UpgradeUtils:createService : \";\n  replaceTag(fileName,configTags);\n  if (debug.messageEnabled()) {\n    debug.message(classMethod + fileName);\n  }\n  FileInputStream fis=null;\n  try {\n    ServiceManager ssm=getServiceManager();\n    fis=new FileInputStream(fileName);\n    ssm.registerServices(fis);\n  }\n catch (  FileNotFoundException fe) {\n    debug.error(classMethod + \"File not found: \" + fileName,fe);\n    throw new UpgradeException(fe.getMessage());\n  }\ncatch (  SSOException ssoe) {\n    debug.error(classMethod + \"SSOToken is not valid\",ssoe);\n    throw new UpgradeException(ssoe.getMessage());\n  }\ncatch (  SMSException sme) {\n    debug.error(classMethod + \"Invalid service schema xml\" + fileName);\n    throw new UpgradeException(sme.getMessage());\n  }\n finally {\n    if (fis != null) {\n      try {\n        fis.close();\n      }\n catch (      IOException ie) {\n      }\n    }\n  }\n}\n", "void render ( Node node ) ;", "    public int getInt(Tag tag) {\n        Object obj = get(tag);\n        if (obj != null) {\n            return ((Number) obj).intValue();\n        } else {\n            return -1;\n        }\n    }\n", "protected void createPathButtons ( Composite pathButtonComp ) { createButton ( pathButtonComp , new RemoveAction ( fClasspathViewer ) ) ; createButton ( pathButtonComp , new AddProjectAction ( fClasspathViewer ) ) ; createButton ( pathButtonComp , new Add", "public TimecodeRange add(SampleCount samples)\n\t{\n\t\tfinal Timecode newStart = start.add(samples);\n\t\tfinal Timecode newEnd = end.add(samples);\n\n\t\treturn new TimecodeRange(newStart, newEnd);\n\t}", "public static AppDescriptor of(String appName, String packageName) {\n        String[] packages = packageName.split(S.COMMON_SEP);\n        return of(appName, packageName, Version.ofPackage(packages[0]));\n    }", "private static int put(byte[] block, int offset, byte[] b, int off, int len) {\n    System.arraycopy(b, off, block, offset, len);\n    return len;\n  }", "public void message(CanMessage m){\n  log.debug(\"Received new message event: \" + m);\n  _id[_rowCount]=CbusMessage.getId(m);\n  _node[_rowCount]=m.getElement(1) * 256 + m.getElement(2);\n  _event[_rowCount]=m.getElement(3) * 256 + m.getElement(4);\n  _type[_rowCount]=(m.getOpCode() & 1) == 0;\n  addEvent();\n}\n", "\tpublic void openWebPage(String uri) {\n\t\tthis.selenium.open(uri);\n\t}\n", "    public Object pop() {\n        int last = size() - 1;\n        if (last < 0) {\n            throw new EmptyStackException();\n        }\n        return remove(last);\n    }\n", "public String getListCacheKey() {\n\t\tObject table = getLookupTable();\n\n\t\tif (table != null && ConfigurationProperties.getDatalistCaching()) {\n\t\t\tString key = APPLICATION_LOOKUP_TABLE.getCacheKeyForTable(table);\n\t\t\treturn key;\n\t\t}\n\n\t\treturn null;\n\t}", "private void prepareData ( ) { final ISearcher searcher = ( ISearcher ) m_typeBox . getSelectedItem ( ) ; if ( searcher != null ) { m_searchData = searcher . getSearchData ( m_inputField . getText ( ) ) ; } }", "    public void setGeoBounds(GeoBounds bounds) {\n        geoBounds = bounds;\n        rescale();\n    }\n", "   public void searchFound(Channel chan) {\n      _progress.setValue(++_progressValue);\n   }\n", "public ResponseFromManager generateUpdateExecuteTask(ParallelTask task) {\n\n        // add to map now; as can only pass final\n        ParallelTaskManager.getInstance().addTaskToInProgressMap(\n                task.getTaskId(), task);\n        logger.info(\"Added task {} to the running inprogress map...\",\n                task.getTaskId());\n\n        boolean useReplacementVarMap = false;\n        boolean useReplacementVarMapNodeSpecific = false;\n        Map<String, StrStrMap> replacementVarMapNodeSpecific = null;\n        Map<String, String> replacementVarMap = null;\n\n        ResponseFromManager batchResponseFromManager = null;\n\n        switch (task.getRequestReplacementType()) {\n        case UNIFORM_VAR_REPLACEMENT:\n            useReplacementVarMap = true;\n            useReplacementVarMapNodeSpecific = false;\n            replacementVarMap = task.getReplacementVarMap();\n            break;\n        case TARGET_HOST_SPECIFIC_VAR_REPLACEMENT:\n            useReplacementVarMap = false;\n            useReplacementVarMapNodeSpecific = true;\n            replacementVarMapNodeSpecific = task\n                    .getReplacementVarMapNodeSpecific();\n            break;\n        case NO_REPLACEMENT:\n            useReplacementVarMap = false;\n            useReplacementVarMapNodeSpecific = false;\n            break;\n        default:\n            logger.error(\"error request replacement type. default as no replacement\");\n        }// end switch\n\n        // generate content in nodedata\n        InternalDataProvider dp = InternalDataProvider.getInstance();\n        dp.genNodeDataMap(task);\n\n        VarReplacementProvider.getInstance()\n                .updateRequestWithReplacement(task, useReplacementVarMap,\n                        replacementVarMap, useReplacementVarMapNodeSpecific,\n                        replacementVarMapNodeSpecific);\n\n        batchResponseFromManager = \n                sendTaskToExecutionManager(task);\n\n        removeTaskFromInProgressMap(task.getTaskId());\n        logger.info(\n                \"Removed task {} from the running inprogress map... \"\n                        + \". This task should be garbage collected if there are no other pointers.\",\n                task.getTaskId());\n        return batchResponseFromManager;\n\n    }", "\tpublic boolean canConvert(Object guiElement) {\n\t\t\n\t\tif (StringUtils.isEmpty((String) guiElement))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\tDouble.parseDouble((String) guiElement);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t\treturn false;\n\t}\n", "public synchronized void start(boolean isAndroid) {\n        // Cancel any thread attempting to make a connection\n        if (mConnectThread != null) {mConnectThread.cancel(); mConnectThread = null;}\n        // Cancel any thread currently running a connection\n        if (mConnectedThread != null) {mConnectedThread.cancel(); mConnectedThread = null;}\n        \n        setState(BluetoothState.STATE_LISTEN);\n        \n        // Start the thread to listen on a BluetoothServerSocket\n        if (mSecureAcceptThread == null) {\n            mSecureAcceptThread = new AcceptThread(isAndroid);\n            mSecureAcceptThread.start();\n            BluetoothService.this.isAndroid = isAndroid;\n        }\n    }", "\tprivate String computePersonId() {\n\t\tStringBuffer generatedId = new StringBuffer();\n\t\tgeneratedId.append(firstName.toLowerCase());\n\t\tgeneratedId.append(\".\");\n\t\tgeneratedId.append(lastName.toLowerCase());\n\n\t\t// remove accents\n\t\tString normalizedId = Normalizer.normalize(generatedId.toString(),\n\t\t\t\tNormalizer.DECOMP, 0);\n\t\treturn normalizedId.replaceAll(\"[^\\\\p{Lower}&&[^\\\\.]]\", \"\");\n\t}\n", "@Override\n    public boolean condition(Object input) {\n        Number d = (Number) input;\n        return op.apply(d.doubleValue(), (value == null ? Double.NaN : value), set);\n    }", "private URI findHostURI(List<VNXeBase> initiators,VNXeApiClient apiClient,DbClient dbClient){\n  if (initiators != null && !initiators.isEmpty()) {\n    for (    VNXeBase init : initiators) {\n      VNXeHostInitiator vnxeInitiator=apiClient.getHostInitiator(init.getId());\n      String portwwn=vnxeInitiator.getPortWWN();\n      if (portwwn == null || portwwn.isEmpty()) {\n        continue;\n      }\n      Initiator initiator=NetworkUtil.getInitiator(portwwn,dbClient);\n      if (initiator != null && !initiator.getInactive()) {\n        URI hostURI=initiator.getHost();\n        if (!NullColumnValueGetter.isNullURI(hostURI)) {\n          return hostURI;\n        }\n      }\n    }\n  }\n  return null;\n}\n", "    private String getJavaPackage(Class type) {\n        if (type == null) return null;\n        String pkg = type.getName();\n        int idx = pkg.lastIndexOf('.');\n        if (idx > 0) {\n            pkg = pkg.substring(0,idx);\n        }\n        else pkg = \"\";\n        return pkg;\n    } //-- getJavaPackage\n", "void widthChanged ( INaviView view , IViewNode < ? > node , double width ) ;", "public void unprotectBranch(Integer projectIdOrPath, String branchName) throws GitLabApiException {\n        delete(Response.Status.NO_CONTENT, null, \"projects\", getProjectIdOrPath(projectIdOrPath), \"protected_branches\", urlEncode(branchName));\n    }", "    public char removeCharAt(int index) {\n        checkRemoveModifiable();\n        checkIndexExists(index);\n        char result = data[index];\n        System.arraycopy(data, index + 1, data, index, size - 1 - index);\n        size--;\n        return result;\n    }\n", "public CustomSwitchPreference ( Context context ) { super ( context , null ) ; }", "    public Document toDom(ObservationDataStruct[] inObsDataSeq) {\n        curObsDataSeq = inObsDataSeq;\n\n        return toDom();\n    }\n", "public static Properties loadConfigurationProperties(File file,Properties defaults) throws IOException {\n  Properties result=null;\n  if (file.exists()) {\n    result=IOUtil.readProperties(file,defaults);\n  }\n else {\n    result=new Properties(defaults);\n  }\n  return result;\n}\n", "boolean isSimilar ( IEspDevice device ) ;", "public SFieldDef findFieldFromTypeDef ( String fieldName , STypeDef targetType , STypeDef callerType , int mode , boolean checkSuper ) { if ( targetType instanceof SClassDef ) { return findFieldFromClassDef ( fieldName , ( SClassDef ) targetType , callerType , mode , checkSuper ) ; } else if ( targetType instanceof SInterfaceDef ) { return findFieldFromInterfaceDef ( fieldName , ( SInterfaceDef ) targetType , checkSuper ) ; } else throw new LtBug ( STR_ + targetType ) ; }", "public FPSTextureView removeChildAt(int location){\n  DisplayBase removed=mDisplayList.remove(location);\n  if (removed != null) {\n    removed.disable();\n  }\n  return this;\n}", "private void populateBar(Row row, Task task)\n   {\n      Integer calendarID = row.getInteger(\"CALENDAU\");\n      ProjectCalendar calendar = m_project.getCalendarByUniqueID(calendarID);\n\n      //PROJID\n      task.setUniqueID(row.getInteger(\"BARID\"));\n      t", "public int writeChar ( int index , byte c ) { return this . writeByte ( index , c ) ; }", "private void createTokenizer(Reader reader){\n  reader=new UnicodeEscapesDecodingReader(reader);\n  st=new PushbackStreamTokenizer(reader);\n  st.ordinaryChar('.');\n  st.wordChars('.','.');\n  st.ordinaryChars('0','9');\n  st.wordChars('0','9');\n  st.ordinaryChar('-');\n  st.wordChars('-','-');\n  st.wordChars('_','_');\n  st.wordChars('$','$');\n  st.ordinaryChar('/');\n  st.slashSlashComments(true);\n  st.slashStarComments(true);\n}\n", "public PlainTextConverter ( SimpleWikiConfiguration config , boolean enumerateSections , int wrapCol ) { this . config = config ; this . wrapCol = wrapCol ; this . enumerateSections = enumerateSections ; }", "private void parseElementDecl() throws Exception {\n        String name;\n\n        requireWhitespace();\n        // Read the element type name.\n        name = readNmtoken(true);\n\n        requireWhitespace();\n        // Read the content model.\n        parseContentspec(name);\n\n        skipWhitespace();\n        require('>');\n    }", "public static void overrideConfiguration(JobConf conf, int instance) {\n    final String CONFIG_KEYS[] =\n        new String[]{\"mapred.job.tracker\", \"mapred.local.dir\",\n                     \"mapred.fairscheduler.server.address\"};\n    for (String configKey : CONFIG_KEYS) {\n      String value = conf.get(configKey + \"-\" + instance);\n      if (value != null) {\n        conf.set(configKey, value);\n      } else {\n        LOG.warn(\"Configuration \" + configKey + \"-\" + instance + \" not found.\");\n      }\n    }\n  }", "public PrivilegedTask ( Task < T > task ) { super ( task ) ; }", "\tpublic void setUp() {\n\t\tif (cache == null) fail(\"Your setUp method must create a new Cache and assign it to this.cache before calling super.setUp().\");\n\t\tfor (int i = 0; i < 45; i++) {\n\t\t\tcache.put(new Integer(i), String.valueOf(i));\n\t\t}\n\t}\n", "public void replace(Attr attr){\n  int index=indexOf(attr.getName());\n  if (index != -1) {\n    _attrs.set(index,attr);\n  }\n else {\n    _attrs.add(attr);\n  }\n}\n", "private ArrayList<CmsResourceStatusRelationBean> getRelationBeans() {\r\n\r\n        switch (m_mode) {\r\n            case targets:\r\n                return m_statusBean.getRelationTargets();\r\n            case sources:\r\n                return m_statusBean.getRelationSources();\r\n            case siblings:\r\n            default:\r\n                return m_statusBean.getSiblings();\r\n        }\r\n    }", "static int applyMaskPenaltyRule4(ByteMatrix matrix){\n  int numDarkCells=0;\n  byte[][] array=matrix.getArray();\n  int width=matrix.getWidth();\n  int height=matrix.getHeight();\n  for (int y=0; y < height; y++) {\n    byte[] arrayY=array[y];\n    for (int x=0; x < width; x++) {\n      if (arrayY[x] == 1) {\n        numDarkCells++;\n      }\n    }\n  }\n  int numTotalCells=matrix.getHeight() * matrix.getWidth();\n  int fivePercentVariances=Math.abs(numDarkCells * 2 - numTotalCells) * 10 / numTotalCells;\n  return fivePercentVariances * N4;\n}\n", "public MethodDescriptor toMethodDescriptor ( ) { return DescriptorFactory . instance ( ) . getMethodDescriptor ( getSlashedClassName ( ) , method . getName ( ) , method . getSignature ( ) , method . isStatic ( ) ) ; }", "  protected SmartChooser getChooser() {\n    // Remove all the filters before letting another object reuse it\n    chooser.resetChoosableFileFilters();\n    return chooser;\n  }\n", "private static void saveTrace ( final TraceList trace ) { try { trace . save ( ) ; } catch ( final CouldntSaveDataException e ) { CUtilityFunctions . logException ( e ) ; } }", "\tpublic long whenLastAccessed(Object key) {\n\t\tCacheEntry ce = (CacheEntry) cacheMap.get(key);\n\t\tif (ce == null)\n\t\t\treturn 0;\n\t\treturn ce.timeAccessedLast;\n\t}\n", "public boolean forwardRaw(float[] rawllpts,int rawoff,float[] xcoords,float[] ycoords,boolean[] visible,int copyoff,int copylen){\n  Point2D temp=new Point2D.Float();\n  int end=copylen + copyoff;\n  for (int i=copyoff, j=rawoff; i < end; i++, j+=2) {\n    forward(rawllpts[j],rawllpts[j + 1],temp,true);\n    xcoords[i]=(float)temp.getX();\n    ycoords[i]=(float)temp.getY();\n    visible[i]=true;\n  }\n  return true;\n}\n", "public static Value JavaTime ( ) { int t = ( int ) System . currentTimeMillis ( ) ; return IntValue . gen ( t & NUM_ ) ; }", "public boolean equalArguments(Type t){\n  return false;\n}\n", "\tpublic void init(String file) throws Exception {\n\t\tsteps.clear();\n\t\tSAXParserFactory spf = SAXParserFactory.newInstance();\n\t\tSAXParser saxParser = spf.newSAXParser();\n\t\tXMLReader xmlReader = saxParser.getXMLReader();\n\t\t\n\t\tMigrationHandler handler = new MigrationHandler(this);\n\t\txmlReader.setContentHandler(handler);\n\t\tlogger.info(\"Parsing URI: \" + file);\n\t\txmlReader.parse(file);\n\t}\n", "    public int countUsingTemplate(SecurityUser pojo) throws DAOException {\n        SecurityUserManager manager = SecurityUserManager.getInstance();\n        return manager.countUsingTemplate(this.createSecurityUserBean(pojo));\n    }\n", "    public Token evaluateExpression(String expression, DimxObject owner, AdvObject agent, String targetid, DictSorted input) throws DimxException {\n        Token eventres = null;\n\n        Varspace newvarsp = new Varspace();\n        newvarsp.varSet(\"input\", new Token(input));\n        logger.debug(\"Evaluating expression\");\n\n        String ownerId = null;\n        if (owner != null) {\n            ownerId = owner.id;\n        }\n        DimxParser p = new DimxParser(world, newvarsp, 0, ownerId);\n        p.agent = agent;\n        p.target = targetid;\n        p.feed(expression);\n        Token t = p.evalExpression(p.lookupToken(), 0);\n\n        return t;\n    }\n", "public void testListOfStringsField ( ) throws Exception { AnObject empty = new AnObject ( ) ; AnObject full = helper . fill ( new AnObject ( ) ) ; Object value = getPropertyValue ( full , STR_ ) ; assertTrue ( value instanceof List ) ; assertFalse ( ( ( L", "public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5,K k6,V v6){\n  Map map=of();\n  map.put(k1,v1);\n  map.put(k2,v2);\n  map.put(k3,v3);\n  map.put(k4,v4);\n  map.put(k5,v5);\n  map.put(k6,v6);\n  return map;\n}\n", "@Override\n\tprotected void preparePaintComponent(final Request request) {\n\t\tassertConfigured();\n\n\t\tList beanList = getBeanList();\n\n\t\tList<Integer> used = new ArrayList<>();\n\n\t\tfor (int i = 0; i < beanList.size(); i++) {\n\t\t\tObject rowData = beanList.get(i);\n\n\t\t\t// Each row has its own context. This is why we can reuse the same\n\t\t\t// WComponent instance for each row.\n\t\t\tUIContext rowContext = getRowContext(rowData, i);\n\n\t\t\t// Check the context has not been used for another row\n\t\t\tInteger subId = ((SubUIContext) rowContext).getContextId();\n\t\t\tif (used.contains(subId)) {\n\t\t\t\tObject rowId = ((SubUIContext) rowContext).getRowId();\n\t\t\t\tString msg = \"The row context for row id [\"\n\t\t\t\t\t\t+ rowId\n\t\t\t\t\t\t+ \"] has already been used for another row. \"\n\t\t\t\t\t\t+ \"Either the row ID is not unique or the row bean has not implemented equals/hashcode \"\n\t\t\t\t\t\t+ \"or no rowIdBeanProperty set on the repeater that uniquely identifies the row.\";\n\t\t\t\tthrow new SystemException(msg);\n\t\t\t}\n\t\t\tused.add(subId);\n\n\t\t\tUIContextHolder.pushContext(rowContext);\n\n\t\t\ttry {\n\t\t\t\tprepareRow(request, i);\n\t\t\t} finally {\n\t\t\t\tUIContextHolder.popContext();\n\t\t\t}\n\t\t}\n\t}", "protected abstract boolean isReadyForPullStart ( ) ;", "public static void notifyRunningInstance(int port,String message){\n  try {\n    LOGGER.info(\"Notifying already running instance: \" + message);\n    InetSocketAddress address=new InetSocketAddress(InetAddress.getLoopbackAddress(),port);\n    Socket connection=new Socket();\n    connection.connect(address,500);\n    try (PrintWriter output=new PrintWriter(new OutputStreamWriter(connection.getOutputStream(),\"UTF-8\"))){\n      output.print(message);\n    }\n   }\n catch (  IOException ex) {\n    LOGGER.warning(\"Error notifying instance: \" + ex);\n  }\n}\n", "\tpublic void setExchangeRate(BigDecimal exchangeRate) {\n\t\tif (exchangeRate != null) {\n\t\t\tthis.exchangeRate = exchangeRate.stripTrailingZeros();\n\t\t} else {\n\t\t\tthis.exchangeRate = null;\n\t\t}\n\t}\n", "public RemoveHistoryItemAction ( ) { super ( WorkbenchMessages . FilteredItemsSelectionDialog_removeItemsFromHistoryAction ) ; }", "public static <E> E last(E[] array) {\n        return new LastElement<E>().apply(new ArrayIterator<>(array));\n    }", "  public boolean hasCompleted() {\n    return state.getValue() == TaskState.COMPLETED;\n  }\n", "@Override\n    public PutPublicAccessBlockResult putPublicAccessBlock(PutPublicAccessBlockRequest request) {\n        request = beforeClientExecution(request);\n        return executePutPublicAccessBlock(request);\n    }", "public static int findLiveItemsLowerBound(XYDataset dataset,int series,double xLow,double xHigh){\n  ParamChecks.nullNotPermitted(dataset,\"dataset\");\n  if (xLow >= xHigh) {\n    throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n  }\n  int itemCount=dataset.getItemCount(series);\n  if (itemCount <= 1) {\n    return 0;\n  }\n  if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n    int low=0;\n    int high=itemCount - 1;\n    double lowValue=dataset.getXValue(series,low);\n    if (lowValue >= xLow) {\n      return low;\n    }\n    double highValue=dataset.getXValue(series,high);\n    if (highValue < xLow) {\n      return high;\n    }\n    while (high - low > 1) {\n      int mid=(low + high) / 2;\n      double midV=dataset.getXValue(series,mid);\n      if (midV >= xLow) {\n        high=mid;\n      }\n else {\n        low=mid;\n      }\n    }\n    return high;\n  }\n else   if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n    int low=0;\n    int high=itemCount - 1;\n    double lowValue=dataset.getXValue(series,low);\n    if (lowValue <= xHigh) {\n      return low;\n    }\n    double highValue=dataset.getXValue(series,high);\n    if (highValue > xHigh) {\n      return high;\n    }\n    while (high - low > 1) {\n      int mid=(low + high) / 2;\n      double midV=dataset.getXValue(series,mid);\n      if (midV > xHigh) {\n        low=mid;\n      }\n else {\n        high=mid;\n      }\n    }\n    return high;\n  }\n else {\n    int index=0;\n    double x=dataset.getXValue(series,index);\n    while (index < itemCount && x < xLow) {\n      index++;\n      if (index < itemCount) {\n        x=dataset.getXValue(series,index);\n      }\n    }\n    return Math.min(Math.max(0,index),itemCount - 1);\n  }\n}\n", "public static cmppolicy_cmpglobal_binding[] get(nitro_service service, String name) throws Exception{\n\t\tcmppolicy_cmpglobal_binding obj = new cmppolicy_cmpglobal_binding();\n\t\tobj.set_name(name);\n\t\tcmppolicy_cmpglobal_binding response[] = (cmppolicy_cmpglobal_binding[]) obj.get_resources(service);\n\t\treturn response;\n\t}", "public static ResourceList<MediaFile> list(final int page, final int size) throws IOException {\n    \t\n        \n        return list(BandwidthClient.getInstance(), page, size);\n    }", "public int length ( ) { return text . length ( ) ; }", "\tprivate int getElementType() {\n\t\tswitch (elementType) {\n\t\tcase TEXT: return Element.ELEMENTTYPE_STRING;\n\t\tcase NUMERIC: return Element.ELEMENTTYPE_NUMERIC;\n\t\tdefault: return Element.ELEMENTTYPE_NUMERIC;\n\t\t}\n\t}\n", "@Override\n    public Object getCollection(Object coll, String key) throws PageException {\n\treturn variableUtil.getCollection(this, coll, key);\n    }", "    public void removeSpectraFromDisplay(ArrayList list) {\n        for (int i = 0; i < list.size(); i++) {\n            ManagedSpectrum msp = (ManagedSpectrum) list.get(i);\n\n            removeSpectrumFromSecondaryWindows(msp);\n            removeSpectrumFromLocalWindow(msp);\n\n            showDQ = null;\n            smoothManager = null;\n            localMSP = null;\n\n            WCSCursor.getInstance().clearReferences();\n        }\n    }\n", "    public void initialize(Component thisComponent) {\n        this.thisComponent = thisComponent;\n\n        if (this.listener != null) {\n            this.listener.initializeCalled();\n        }\n    }\n", "    public Object getElementAt(int index) {\n        // XXX: Workaround for 1GBCSB1: SWT:WIN2000 - TableTree should have getItem(int index)\n        TableTreeItem i = tableTree.getItems()[index];\n        if (i != null)\n            return i.getData();\n        return null;\n    }\n", "@Path(JaxRxConstants.JAXRXPATH)\n    @GET\n    public Response getResource(@PathParam(JaxRxConstants.SYSTEM) final String system,\n        @Context final UriInfo uri, @Context final HttpHeaders headers) {\n        return getResource(system, uri, \"\", headers);\n    }", "@Override public synchronized void destroy(){\n  destroyed=true;\n  for (  Thread t : workersThreads) {\n    t.interrupt();\n  }\n  notifyAll();\n}\n", "public void removeNotification(@NotNull Notification notification){\n  int index=notifications.indexOf(notification);\n  if (index >= 0) {\n    nGrid.removeRow(index);\n    notifications.remove(index);\n  }\n}\n", "void verify(){\n  byte[] d=digest.digest();\n  if (!MessageDigest.isEqual(d,Base64.decode(hash))) {\n    throw invalidDigest(JarFile.MANIFEST_NAME,name,jarName);\n  }\n  verifiedEntries.put(name,certificates);\n}\n", "int last ( ) ;", "public StripedLockConcurrentHashMap(@NotNull Map<? extends K,? extends V> t){\n  this(Math.max((int)(t.size() / DEFAULT_LOAD_FACTOR) + 1,11));\n  putAll(t);\n}\n", "public static ExpectedVersion noStream ( ) { return NO_STREAM ; }", "    public int getSignalStrengthDbm() {\n        if ((mWants & NOTIF_SIGNAL) == 0) {\n            throw new RuntimeException\n                (\"client must call notifySignalStrength(int)\");\n        }\n\n        int dBm = -1;\n\n        if (mAsu != -1) {\n            dBm = -113 + 2*mAsu;\n        }\n\n        return dBm;\n    }\n", "public boolean supportsSessionVariables ( ) throws SQLException ;", "public static boolean validateSDF(File file){\n  if (!file.exists()) {\n    Diagnostic.error(ErrorType.SDF_NOT_FOUND,file.getPath());\n    return false;\n  }\n  if (!file.isDirectory()) {\n    Diagnostic.error(ErrorType.NOT_SDF,file.getPath());\n    return false;\n  }\n  return true;\n}\n", "protected static void fail ( ) { System . exit ( NUM_ ) ; }", "protected final void addConverter ( String name , String converterId ) { this . factories . put ( name , new ConverterHandlerFactory ( converterId ) ) ; }", "\tpublic void removeRDG(RDG rdg) throws DatabaseAccessException {\n\t\tassertConnection();\n\t\t\t\n\t\tremoveRDG(rdg.getURI());\n\t}\n", "public static String ptb2Text(String ptbText) {\r\n    StringBuilder sb = new StringBuilder(ptbText.length()); // probably an overestimate\r\n    PTB2TextLexer lexer = new PTB2TextLexer(new StringReader(ptbText));\r\n    try {\r\n      for (String token; (token = lexer.next()) != null; ) {\r\n        sb.append(token);\r\n      }\r\n    } catch (IOException e) {\r\n      e.printStackTrace();\r\n    }\r\n    return sb.toString();\r\n  }", "public CSVReaderBuilder withCSVParser ( final CSVParser csvParser ) { this . csvParser = csvParser ; return this ; }", "public void addTurntable(Point2D pt){\n  numLayoutTurntables++;\n  String name=\"\";\n  boolean duplicate=true;\n  while (duplicate) {\n    name=\"TUR\" + numLayoutTurntables;\n    if (finder.findLayoutTurntableByName(name) == null) {\n      duplicate=false;\n    }\n    if (duplicate) {\n      numLayoutTurntables++;\n    }\n  }\n  LayoutTurntable x=new LayoutTurntable(name,pt,this);\n  turntableList.add(x);\n  setDirty(true);\n  x.addRay(0.0);\n  x.addRay(90.0);\n  x.addRay(180.0);\n  x.addRay(270.0);\n}\n", "public void unexport ( long remoteObjID ) { List < ChannelEntry > channelEntries = getChannels ( remoteObjID ) ; for ( ChannelEntry chEntry : channelEntries ) closeConnection ( chEntry ) ; }", "boolean appendMarker ( Node < K , V > f ) { return casNext ( f , new Node < K , V > ( f ) ) ; }", "private void removeObservedFile(String localPath){\n  File file=new File(localPath);\n  String parentPath=file.getParent();\n  FolderObserver observer=mFolderObserversMap.get(parentPath);\n  if (observer != null) {\n    observer.stopWatching(file.getName());\n    if (observer.isEmpty()) {\n      mFolderObserversMap.remove(parentPath);\n      Log_OC.d(TAG,\"Observer removed for parent folder \" + parentPath + \"/\");\n    }\n  }\n else {\n    Log_OC.d(TAG,\"No observer to remove for path \" + localPath);\n  }\n}\n", "    public void addPanel(JPanel panel) {\n        gridLayout.setColumns(gridLayout.getColumns()+1);\n        this.add(panel);\n    }\n", "public static File createTempFile ( final String prefix , final String suffix ) { File tempFile ; try { tempFile = File . createTempFile ( prefix , suffix ) ; } catch ( IOException ioException ) { throw new IllegalStateException ( ioException ) ; } return", "\tpublic void createBody(BodyDef bodyDef, FixtureDef fixture) {\n\t\tbody = Physics.world.createBody(bodyDef);\n\t\tbody.createFixture(fixture);\n\t\tthis.bodyDef = bodyDef;\n\t\tusePhysics = true;\n\t}\n", "private static void checkArguments ( final ZyGraph graph ) { Preconditions . checkNotNull ( graph , STR_ ) ; }", "private int findWindowPosition(String window){\n  int loc=windowOrder.indexOf(window);\n  if (loc != -1) {\n    int i=0;\n    for (    Component c : panel.getComponents()) {\n      if (c instanceof ManagedWindow) {\n        String name=c.getName();\n        if (loc < windowOrder.indexOf(name)) {\n          return i;\n        }\n      }\n      i++;\n    }\n  }\n else {\n    windowOrder.add(window);\n    fireWindowOrderChanged();\n  }\n  return panel.getComponentCount();\n}\n", "void visit ( String string ) ;", "private static int addToBuffer ( Writer out , char [ ] buffer , int bufferIndex , int bufferLength , char ch ) throws IOException { if ( bufferIndex >= bufferLength ) { out . write ( buffer , NUM_ , bufferIndex ) ; bufferIndex = NUM_ ; } buffer [ bufferIndex ] = ch ; return bufferIndex + NUM_ ; }", "private String getBinaryServletMapping() {\n\t\tString binaryServletMapping = null;\n\t\t// Retrieve binary servlet mapping from the binary resource handler\n\t\tBinaryResourcesHandler binaryRsHandler = (BinaryResourcesHandler) config.getContext()\n\t\t\t\t.getAttribute(JawrConstant.BINARY_CONTEXT_ATTRIBUTE);\n\t\tif (binaryRsHandler != null) {\n\t\t\tbinaryServletMapping = binaryRsHandler.getConfig().getServletMapping();\n\t\t}\n\t\treturn binaryServletMapping;\n\t}", "private static String convertPercentElementToString(Object value, DecimalFormat decimalFormat) {\n        Double doubleValue = value instanceof Long ? ((Long) value).doubleValue() : (Double) value;\n        return decimalFormat.format(doubleValue);\n    }", "    public boolean isBookmarkOpen() {\n        return bookmarkOpen;\n    }\n", "static private String readFromStdin() throws IOException {\n  final LineNumberReader r=new LineNumberReader(new InputStreamReader(System.in));\n  try {\n    final StringBuilder sb=new StringBuilder();\n    String s;\n    while ((s=r.readLine()) != null) {\n      if (r.getLineNumber() > 1)       sb.append(\"\\n\");\n      sb.append(s);\n    }\n    return sb.toString();\n  }\n  finally {\n    r.close();\n  }\n}\n", "    public void putDouble(String key, double value) {\n        prefs.putDouble(prefsKeyHeader() + key, value);\n    }\n", "@SuppressWarnings(\"unchecked\")\n    @Override\n    public String getMasterRequestId(Message request) {\n        List<SoapHeader> headers = (List<SoapHeader>) ((CxfPayload<?>)request.getBody()).getHeaders();\n        for (SoapHeader header : headers) {\n       ", "public boolean confirmEnoughOffsetSources ( int [ ] sourcesOffsets ) { if ( countOfOffsetSources ( sourcesOffsets ) != numSources ) { throw new RuntimeException ( STR_ ) ; } return BOOL_ ; }", "\t    public void moveTab(IPresentablePart part, int index) {\n\t    \ttabs.move(part, index);\n\t    \t\n\t    \t//FIXME this is a hack - main diagram should not be closable\n\t        IPresentablePart[] parts = tabs.getPartList();\n\t        if ((parts != null) && (parts.length > 0)) {\n\t        \tfor (IPresentablePart p : parts) {\n\t        \t\tString id = ((PresentablePart)p).getPane().getID();\n\t\t    \t\tif (id.equals(ExhibitionDiagramEditor.ID))\n\t\t    \t\t\tif (!((DefaultTabItem)folder.getTab(p)).getItem().isDisposed())\n\t\t    \t\t\t\t((DefaultTabItem)folder.getTab(p)).getItem().setShowClose(false);\t\t    \t\t\t\n\t        \t}\n\t        }\n\t        \n\t    \tfolder.layout(true);\n\t    \t\n\t    }\n", "    public void process(Event event) {\n        processedEvents.addElement(event);\n    }\n", "private boolean isStore ( Location location ) { Instruction ins = location . getHandle ( ) . getInstruction ( ) ; return ( ins instanceof StoreInstruction ) || ( ins instanceof IINC ) ; }", "\tpublic void delete(CoMaterial entity) {\n\t\tEntityManagerHelper.log(\"deleting CoMaterial instance\", Level.INFO, null);\n\t\ttry {\n\t\t\tentity = getEntityManager().getReference(CoMaterial.class, entity.getMaterialId());\n\t\t\tgetEntityManager().remove(entity);\n\t\t\tEntityManagerHelper.log(\"delete successful\", Level.INFO, null);\n\t\t} catch (RuntimeException re) {\n\t\t\tEntityManagerHelper.log(\"delete failed\", Level.SEVERE, re);\n\t\t\tthrow re;\n\t\t}\n\t}\n", "public static <V> Node<V> findLastNode(List<Node<V>> parents, Predicate<Node<V>> predicate) {\n        checkArgNotNull(predicate, \"predicate\");\n        if (parents != null && !parents.isEmpty()) {\n            int parentsSize = parents.size();\n            for (int i = parentsSize - 1; i >= 0; i--) {\n                Node<V> found = findLastNode(parents.get(i), predicate);\n                if (found != null) return found;\n            }\n        }\n        return null;\n    }", "    public String optString(String key) {\n        return optString(key, \"\"); //$NON-NLS-1$\n    }\n", "public void ensureIndex(String idxName,QueryIndexType idxType){\n  QueryIndex idx=idxs.get(idxName);\n  if (idx == null) {\n    idx=new QueryIndex();\n    idx.setName(idxName);\n    idx.setIndexType(idxType);\n    idxs.put(idxName,idx);\n  }\n else   throw new IllegalArgumentException(\"An index with the same name and of a different type already exists \" + \"[idxName=\" + idxName + \", existingIdxType=\"+ idx.getIndexType()+ \", newIdxType=\"+ idxType+ ']');\n}\n", "private void waitTasksToComplete(){\n  log.info(\"Waiting for {} tasks to finish\",futures.size());\n  for (  Future f : futures) {\n    try {\n      f.get();\n    }\n catch (    InterruptedException ex) {\n      log.warn(\"The GC was interrupted e=\",ex);\n    }\ncatch (    ExecutionException ex) {\n      log.error(\"Exception caught: \",ex);\n    }\n  }\n  futures.clear();\n  log.info(\"GC tasks are done\");\n}\n", "public BinaryArithmeticExpression ( Expression lhs , Operator op , Expression rhs ) { this . lhs = lhs ; this . op = op ; this . rhs = rhs ; }", "        public String getCloseBox () {\n            return \")\";\n        }\n", "public static void fill ( long [ ] [ ] [ ] [ ] matrix , long value ) { int rows = matrix . length ; for ( int r = NUM_ ; r < rows ; r ++ ) { int cols = matrix [ r ] . length ; for ( int c = NUM_ ; c < cols ; c ++ ) { int height = matrix [ r ] [ c ] . leng", "public static ObjectName buildObjectName ( String domain , String type , String name ) throws MalformedObjectNameException , NullPointerException { return new ObjectName ( domain + STR_ + TYPE_KEY + STR_ + type + STR_ + NAME_KEY + STR_ + name ) ; }", "public void log(final Level level, final String msg, final Throwable throwable) {\n        switch (level) {\n            case ERROR:\n                if (proxy.isErrorEnabled()) {\n                    if (proxy instanceof LocationAwareLogger) {\n                        ((LocationAwareLogger) proxy).log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, throwable);\n                    } else {\n                        proxy.error(msg, throwable);\n                    }\n                }\n\n                break;\n            case WARN:\n                if (proxy.isWarnEnabled()) {\n                    if (proxy instanceof LocationAwareLogger) {\n                        ((LocationAwareLogger) proxy).log(null, FQCN, LocationAwareLogger.WARN_INT, msg, null, throwable);\n                    } else {\n                        proxy.warn(msg, throwable);\n                    }\n                }\n\n                break;\n            case INFO:\n                if (proxy.isInfoEnabled()) {\n                    if (proxy instanceof LocationAwareLogger) {\n                        ((LocationAwareLogger) proxy).log(null, FQCN, LocationAwareLogger.INFO_INT, msg, null, throwable);\n                    } else {\n                        proxy.info(msg, throwable);\n                    }\n                }\n\n                break;\n            case DEBUG:\n                if (proxy.isDebugEnabled()) {\n                    if (proxy instanceof LocationAwareLogger) {\n                        ((LocationAwareLogger) proxy).log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, throwable);\n                    } else {\n                        proxy.debug(msg, throwable);\n                    }\n                }\n\n                break;\n            case TRACE:\n                if (proxy.isTraceEnabled()) {\n                    if (proxy instanceof LocationAwareLogger) {\n                        ((LocationAwareLogger) proxy).log(null, FQCN, LocationAwareLogger.TRACE_INT, msg, null, throwable);\n                    } else {\n                        proxy.trace(msg, throwable);\n                    }\n                }\n\n                break;\n            default:\n                throw new IllegalStateException(\"Logging level [\" + level + \"] is invalid\");\n        }\n    }", "static byte[] encryptData(byte[] password,int size,byte[] data){\n  try {\n    Cipher c=Cipher.getInstance(ENCRYPT_DATA_ALGORITHM);\n    c.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(password,SECRET_KEY_ALGORITHM),CBC_SALT_DATA);\n    c.update(new byte[]{(byte)(size >> 24),(byte)(size >> 16),(byte)(size >> 8),(byte)(size)});\n    return c.doFinal(data);\n  }\n catch (  Exception e) {\n    throw new IllegalStateException(ENCRYPT_DATA_ALGORITHM + \" is not available\",e);\n  }\n}\n", "public CmsScheduledJobInfo getJob(String id) {\n\n        Iterator<CmsScheduledJobInfo> it = m_jobs.iterator();\n        while (it.hasNext()) {\n            CmsScheduledJobInfo job = it.next();\n            if (job.getId().equals(id)) {\n                return job;\n            }\n        }\n        // not found\n        return null;\n    }", "    public TreeNode getChildAt( int index){\n\t\t\ttry {\n\t\t\t\t Resource child = (Resource)getSeq().getObject(index);\n\t\t\t\t return getNode(child);\n\t\t\t}catch(RDFException e ) { \n\t\t\t\tthrow new ArrayIndexOutOfBoundsException(\"node has no children\");\n\t\t\t}\n\t\t}\n", "public void sort(ArrayList<Value[]> rows,int offset,int limit){\n  int rowsSize=rows.size();\n  if (rows.isEmpty() || offset >= rowsSize || limit == 0) {\n    return;\n  }\n  if (offset < 0) {\n    offset=0;\n  }\n  if (offset + limit > rowsSize) {\n    limit=rowsSize - offset;\n  }\n  if (limit == 1 && offset == 0) {\n    rows.set(0,Collections.min(rows,this));\n    return;\n  }\n  Value[][] arr=rows.toArray(new Value[rowsSize][]);\n  Utils.sortTopN(arr,offset,limit,this);\n  for (int i=0, end=Math.min(offset + limit,rowsSize); i < end; i++) {\n    rows.set(i,arr[i]);\n  }\n}\n", "    public String getPreferredTimeDisplay() {\n        String result = getNXTConfig().getGuiSettingValue(\"timedisplay\");\n        if (result == null)\n            return \"seconds\";\n        if (!result.equals(\"minutes\") && !result.equals(\"seconds\"))\n         ", "private void renderAxes(Camera camera){\n  glPushMatrix();\n  glLoadIdentity();\n  float rotX=camera.getRotation().x;\n  float rotY=camera.getRotation().y;\n  float rotZ=0;\n  glRotatef(rotX,1.0f,0.0f,0.0f);\n  glRotatef(rotY,0.0f,1.0f,0.0f);\n  glRotatef(rotZ,0.0f,0.0f,1.0f);\n  glLineWidth(2.0f);\n  glBegin(GL_LINES);\n  glColor3f(1.0f,0.0f,0.0f);\n  glVertex3f(0.0f,0.0f,0.0f);\n  glVertex3f(1.0f,0.0f,0.0f);\n  glColor3f(0.0f,1.0f,0.0f);\n  glVertex3f(0.0f,0.0f,0.0f);\n  glVertex3f(0.0f,1.0f,0.0f);\n  glColor3f(1.0f,1.0f,1.0f);\n  glVertex3f(0.0f,0.0f,0.0f);\n  glVertex3f(0.0f,0.0f,1.0f);\n  glEnd();\n  glPopMatrix();\n}\n", "public ItemsFilter ( SearchPattern searchPattern ) { patternMatcher = searchPattern ; String stringPattern = STR_ ; if ( pattern != null && ! pattern . getText ( ) . equals ( STR_ ) ) { stringPattern = pattern . getText ( ) ; } patternMatcher . setPattern", "public void clear(){\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    Object[] array=queue;\n    int n=size;\n    size=0;\n    for (int i=0; i < n; i++)     array[i]=null;\n  }\n  finally {\n    lock.unlock();\n  }\n}\n", "public List < Map < String , String > > list ( Database conn ) throws SQLException { ResultSet rs = null ; Statement statement = conn . createStatement ( ) ; List < Map < String , String > > shards = new ArrayList < Map < String , String > > ( ) ; try { rs = statement . executeQuery ( ShardTable . SELECT ) ; while ( rs . next ( ) ) { Map < String , String > shard = new HashMap < String , String > ( ) ; shard . put ( ShardTable . SHARD_ID_COL , rs . getString ( ShardTable . SHARD_ID_COL ) ) ; shard . put ( ShardTable . SHARD_CRIT_COL , Boolean . toString ( rs . getBoolean ( ShardTable . SHARD_CRIT_COL ) ) ) ; shard . put ( ShardTable . SHARD_MASTER_COL , rs . getString ( ShardTable . SHARD_MASTER_COL ) ) ; shards . add ( shard ) ; } } finally { statement . close ( ) ; } return shards ; }", "public boolean collapsePanel() {\n        if (mFirstLayout) {\n            mSlideState = SlideState.COLLAPSED;\n            return true;\n        } else {\n            if (mSlideState == SlideState.HIDDEN || mSlideState == SlideState.COLLAPSED)\n                return false;\n            return collapsePanel(mSlideableView, 0);\n        }\n    }", "\tpublic void start() {\n\t\t/*\n\t\t * Start the network service first as it needs to bind the address/port to the game server.\n\t\t * Then start all other services with TimeService last.\n\t\t */\n\t\tm_networkService.start();\n\t\tm_idleTimer.start();\n\t\tSystem.out.println(\"INFO: Service Manager startup completed.\");\n\t}\n", "void impliesAction ( NodeRepresentation nodeRep ) { Decomposition decomp = nodeRep . decomposition ; state . hasChanged = BOOL_ ; if ( decomp . definedOp != null ) { state . assumpDefinitions . add ( decomp . definedOp ) ; } NodeTextRep newNodeText = null", "\tpublic CDSRectangle getCropBox() {\n\t\tif (cachedCropBox == null) {\n\t\t\tCOSArray array = cosGetFieldInheritable(PDPage.DK_CropBox)\n\t\t\t\t\t.asArray();\n\t\t\tif (array == null) {\n\t\t\t\tcachedCropBox = getMediaBox(); // default for CropBox\n\t\t\t} else {\n\t\t\t\tcachedCropBox = CDSRectangle.createFromCOS(array);\n\t\t\t}\n\t\t}\n\t\treturn cachedCropBox;\n\t}\n", "public static boolean isFolderPatternUnique(String pattern){\n  if (((pattern.contains(\"$T\") || pattern.contains(\"$E\") || pattern.contains(\"$O\")) && pattern.contains(\"$Y\")) || pattern.contains(\"$I\")) {\n    return true;\n  }\n  return false;\n}\n", "    public boolean checkState(int name, int matches) {\n        Object o = get(name);\n        if ((o == null) || !(o instanceof Integer))\n            return false;\n        else\n            return ((Integer) o).intValue() == matches;\n    }\n", "@NotNull public List<GradleCoordinate> findMissingDependencies(@NotNull Module module,@NotNull Iterable<GradleCoordinate> dependencies){\n  GradleBuildModel buildModel=GradleBuildModel.get(module);\n  if (buildModel == null) {\n    return Collections.emptyList();\n  }\n  return findMissingLibrariesFromGradleBuildFile(buildModel,dependencies);\n}\n", "    public void setNodeInstance(Object handle, Object nodeInstance) {\n        if (handle instanceof MComponentInstance\n                && nodeInstance instanceof MNodeInstance) {\n            ((MComponentInstance) handle).setNodeInstance(\n                 ", "\tpublic BillMeLaterAccount getBillMeLaterAccount() {\n\t\t\n\t\tList billMeLaterAccounts = this.getBillMeLaterAccounts();\n\t\t\n\t\treturn (BillMeLaterAccount) (!billMeLaterAccounts.isEmpty() ? billMeLaterAccounts.get(0) : null);\n\t}\n", "\tpublic boolean isAccept() {\n\t\tif (getUnprocessedInput().length() != 0)\n\t\t\treturn false;\n\t\tState s = getCurrentState();\n\t\tAutomaton a = s.getAutomaton();\n\t\treturn a.isFinalState(s);\n\t}\n", "public static IdentityClassNameRewriter instance ( ) { return theInstance ; }", "    public ProductionCard getHandCard(String nfo) {\n        String[] card = nfo.split(\":\");\n        int val = Integer.parseInt(card[1]);\n        for (int j = 0; j < hand.size(); j++) {\n            ProductionCard pc = hand.get(j);\n            if (val == pc", "  public void setInfo(Object object){\n    if (object == null) setText(\"\");\n    else {\n      Issue issue = (Issue)object;\n      //Name name = issue.getId();\n      LList pattern = issue.getPattern();;\n      String text = \"\";\n      for (Iterator i = pattern.", "\tpublic void writeRss(String url, String feed, String lastUpdate) {\n\t\ttry {\n\t\t\twriteInDB(\"INSERT INTO rss (url, feed, lastUpdate)\" + \"VALUES ('\"\n\t\t\t\t\t+ url + \"', '\" + feed + \"', '\" + lastUpdate + \"')\");\n\t\t} catch (MySQLIntegrityConstraintViolationException e) {\n\t\t\tSystem.err.println(\"Error to write, probabily entry was repeated.\");\n\t\t}\n\n\t}\n", "  public EdgeDataSetMetaData getOrCreateMetaDataset(String type, String name) {\n    EdgeTypeMetaData typeMeta = getOrCreateTypeMeta(type);\n    EdgeDataSetMetaData dm = getMetaDataset(typeMeta, name);\n    return dm;\n  }\n", "public NondominatedPopulation run(){\n  isCanceled.set(false);\n  return runSingleSeed(1,1,properties.getInt(\"maxEvaluations\",25000));\n}\n", "    public Integer update(String sql, String name) {\n        return update(sql, null, name);\n    }\n", "public final boolean isLocallyConsistent ( ) { TBPar pos = new TBPar ( this . size ( ) ) ; TBPar neg = new TBPar ( this . size ( ) ) ; for ( int i = NUM_ ; i < this . size ( ) ; i ++ ) { LiveExprNode ln = this . exprAt ( i ) ; if ( ln instanceof LNState )", "public static int validateNormType ( String normType ) { if ( normType . equalsIgnoreCase ( EuclideanUtils . NORM_EUCLIDEAN_STRING ) ) { normType = EuclideanUtils . NORM_EUCLIDEAN_SQUARED_STRING ; } if ( normType . equalsIgnoreCase ( EuclideanUtils . NORM_EUCLIDEAN_SQUARED_STRING ) ) { return EuclideanUtils . NORM_EUCLIDEAN_SQUARED ; } if ( normType . equalsIgnoreCase ( EuclideanUtils . NORM_MAX_NORM_STRING ) ) { return EuclideanUtils . NORM_MAX_NORM ; } throw new UnsupportedOperationException ( STR_ + normType + STR_ ) ; }", "    private String getIdFromMapping(Xpp3Dom mapping) {\n        if (mapping.getChildCount() < 1) {\n            return \"\";\n        }\n        String href = mapping.getChild(0).getAttribute(HREF);\n        String id = href.substring(href.indexOf('#') + 1);\n        return id;\n    }\n", "public boolean isEmpty ( ) { return _pos == NUM_ ; }", "public OutputStreamAesEncryption(java.io.OutputStream out,byte[] key,int off,int len){\n  super(out);\n  byte[] iv=IVGenerator.getIV();\n  byte[] nkey=new byte[len];\n  System.arraycopy(key,off,nkey,0,len);\n  cipher=new AESCipher(true,nkey,iv);\n  try {\n    write(iv);\n  }\n catch (  IOException e) {\n    throw new PdfException(PdfException.PdfEncryption,e);\n  }\n}\n", "private void uninstall(String identifier){\n  if (vocabulariesById.containsKey(identifier)) {\n    Vocabulary toUninstall=vocabulariesById.get(identifier);\n    File f=getVocabFile(toUninstall.getUriResolvable());\n    if (f.exists()) {\n      f.delete();\n      log.debug(\"Successfully deleted (uninstalled) vocabulary file: \" + f.getAbsolutePath());\n    }\n else {\n      log.warn(\"Vocabulary file doesn't exist locally - can't delete: \" + f.getAbsolutePath());\n    }\n    vocabulariesById.remove(identifier);\n  }\n else {\n    log.warn(\"Vocabulary not installed locally, can't uninstall: \" + identifier);\n  }\n}\n", "    public int getColNum() {\n        if(isRangeProject){\n            throw new AssertionError(\"getColNum should not be called on range project\");\n        }\n        return col;\n    }\n", "@SuppressWarnings(\"unchecked\")\n\tpublic <T extends Annotation> T getAnnotation(Class<T> annotationType) {\n\t\tfor (Annotation annotation : this.annotations) {\n\t\t\tif (annotation.annotationType().equals(annotationType)) {\n\t\t\t\treturn (T) annotation;\n\t\t\t}\n\t\t}\n\t\tfor (Annotation metaAnn : this.annotations) {\n\t\t\tT ann = metaAnn.annotationType().getAnnotation(annotationType);\n\t\t\tif (ann != null) {\n\t\t\t\treturn ann;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "void clearReviewed ( PatchSet . Id psId ) throws OrmException ;", "public void addImplements(String type) {\n\t\tif (!Strings.isEmpty(type)) {\n\t\t\tthis.sarlClass.getImplements().add(newTypeRef(this.container, type));\n\t\t}\n\t}", "public int occurrences(Object obj)\r\n    {\r\n        int count = 0;\r\n        for (int i = 0; i < this.size(); i++)\r\n        {\r\n            if ((obj == null) ? this.get(i) == null : this.get(i).equals(obj))\r\n            {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }", "    public void set(int row, int col) {\n        firstRow = row;\n        lastRow = row;\n        column = col;\n    }\n", "public Builder resolveLinkTos ( boolean resolveLinkTos ) { this . resolveLinkTos = resolveLinkTos ; return this ; }", "private static void deleteGroupNode ( final INaviGroupNode groupNode ) { final List < INaviViewNode > elements = groupNode . getElements ( ) ; groupNode . setCollapsed ( BOOL_ ) ; for ( final INaviViewNode node : elements ) { groupNode . removeElement ( n", "public jMatrix ( double [ ] [ ] A ) { m = A . length ; n = A [ NUM_ ] . length ; for ( int i = NUM_ ; i < m ; i ++ ) { if ( A [ i ] . length != n ) { throw new IllegalArgumentException ( STR_ ) ; } } this . A = A ; }", "public static Object min(Comparable c1, Comparable c2) {\n    if (c1 != null && c2 != null) {\n      return c1.compareTo(c2) < 1 ? c1 : c2;\n    } else {\n      return c1 != null ? c1 : c2;\n    }\n  }", "public void unbindProperty(Component cmp,String propertyName){\n  BindTarget t=(BindTarget)cmp.getClientProperty(\"CN1Bind\" + propertyName);\n  cmp.unbindProperty(propertyName,t);\n  ;\n}\n", "private synchronized void sendHeartBeat(\n      final EvaluatorRuntimeProtocol.EvaluatorHeartbeatProto heartbeatProto) {\n    if (LOG.isLoggable(Level.FINEST)) {\n      LOG.log(Level.FINEST, \"Heartbeat message:\\n\" + heartbeatProto, new Exception(\"Stack trace\"));\n    }\n    this.evaluatorHeartbeatHandler.onNext(heartbeatProto);\n  }", "private ConfigManager ( final String filename ) { this . filename = filename ; properties = new TypedPropertiesWrapper ( new Properties ( ) ) ; databases = Lists . newArrayList ( ) ; generalSettings = new GeneralSettingsConfigItem ( ) ; colors = new Color", "public void process(Resource resource, int index, byte[] data)\n   {\n      CostRateTable result = new CostRateTable();\n\n      if (data != null)\n      {\n         for (int i = 16; i + 44 <= data.length; i += 44)\n         {\n            Rate standardRate = new", "public static void gotoOffset ( final JFrame parent , final CMemoryViewer view , final CDebugPerspectiveModel model ) { final IDebugger debugger = model . getCurrentSelectedDebugger ( ) ; if ( debugger == null ) { return ; } final TargetProcessThread acti", "public static GaplessInfo createFromComment(String name,String data){\n  if (!GAPLESS_COMMENT_ID.equals(name)) {\n    return null;\n  }\n  Matcher matcher=GAPLESS_COMMENT_PATTERN.matcher(data);\n  if (matcher.find()) {\n    try {\n      int encoderDelay=Integer.parseInt(matcher.group(1),16);\n      int encoderPadding=Integer.parseInt(matcher.group(2),16);\n      return encoderDelay == 0 && encoderPadding == 0 ? null : new GaplessInfo(encoderDelay,encoderPadding);\n    }\n catch (    NumberFormatException e) {\n    }\n  }\n  return null;\n}\n", "@Override public AlarmEvent evaluate(AlarmPoint alarm,String trigger){\n  if (trigger.equals(AlarmPoint.TRIGGER_ACTIVATE)) {\n    return activation(alarm);\n  }\n else   if (trigger.equals(AlarmPoint.TRIGGER_DEACTIVATE)) {\n    return deactivation(alarm);\n  }\n else   if (trigger.equals(AlarmPoint.TRIGGER_ACKNOWLEDGE)) {\n    return acknowledge(alarm);\n  }\n else {\n    throw new IllegalArgumentException(\"'\" + trigger + \"' is not supported by this AlarmModel.\");\n  }\n}\n", "public static void actionMove(PageContext pageContext,lucee.runtime.security.SecurityManager securityManager,Resource source,String strDestination,int nameconflict,String serverPassword,Object acl,int mode,String attributes) throws PageException {\n  if (nameconflict == NAMECONFLICT_UNDEFINED)   nameconflict=NAMECONFLICT_OVERWRITE;\n  if (source == null)   throw new ApplicationException(\"attribute source is not defined for tag file\");\n  if (StringUtil.isEmpty(strDestination))   throw new ApplicationException(\"attribute destination is not defined for tag file\");\n  Resource destination=toDestination(pageContext,strDestination,source);\n  securityManager.checkFileLocation(pageContext.getConfig(),source,serverPassword);\n  securityManager.checkFileLocation(pageContext.getConfig(),destination,serverPassword);\n  if (source.equals(destination))   return;\n  if (!source.exists())   throw new ApplicationException(\"source file [\" + source.toString() + \"] doesn't exist\");\n else   if (!source.isFile())   throw new ApplicationException(\"source file [\" + source.toString() + \"] is not a file\");\n else   if (!source.isReadable() || !source.isWriteable())   throw new ApplicationException(\"no access to source file [\" + source.toString() + \"]\");\n  if (destination.isDirectory())   destination=destination.getRealResource(source.getName());\n  if (destination.exists()) {\n    if (nameconflict == NAMECONFLICT_SKIP)     return;\n else     if (nameconflict == NAMECONFLICT_OVERWRITE)     destination.delete();\n else     if (nameconflict == NAMECONFLICT_MAKEUNIQUE)     destination=makeUnique(destination);\n else     throw new ApplicationException(\"destiniation file [\" + destination.toString() + \"] already exist\");\n  }\n  try {\n    source.moveTo(destination);\n  }\n catch (  Throwable t) {\n    t.printStackTrace();\n    throw new ApplicationException(t.getMessage());\n  }\n  setACL(pageContext,destination,acl);\n  setMode(destination,mode);\n  setAttributes(destination,attributes);\n}\n", "private void addParentFimIgnore ( FimIgnore initialFimIgnore ) { Path directory = context . getAbsoluteCurrentDirectory ( ) ; while ( BOOL_ == directory . equals ( context . getRepositoryRootDir ( ) ) ) { directory = directory . getParent ( ) ; if ( direc", "public static int scan(int v){\n  return 31 - Integer.numberOfLeadingZeros(v);\n}\n", "    private void endScope(int adr) {\n\tLocalVar v = lvar[adr];\n\tif (v != null) {\n\t    lvar[adr] = null;\n\t    if (v.start_pc != Character.MAX_VALUE) {\n\t\tchar length = (char)(curPc() - v.start_pc);\n\t\tif (length < Character.MAX_VALUE) {\n\t\t    v.length = length;\n\t\t    putVar(v);\n\t\t}\n\t    }\n\t}\n\tstate.defined.excl(adr);\n    }\n", "public LazyValue<Form> createBackLazyValue(final Form f){\n  Vector formNavigationStack=baseFormNavigationStack;\n  Hashtable p=null;\n  Command cmd=null;\n  if (formNavigationStack.size() > 1) {\n    p=(Hashtable)formNavigationStack.elementAt(formNavigationStack.size() - 2);\n    String backTitle=getBackCommandText((String)p.get(FORM_STATE_KEY_TITLE));\n    String commandAction=(String)p.get(FORM_STATE_KEY_NAME);\n    cmd=createCommandImpl(backTitle,null,BACK_COMMAND_ID,commandAction,true,\"\");\n    cmd.putClientProperty(COMMAND_ARGUMENTS,\"\");\n    cmd.putClientProperty(COMMAND_ACTION,commandAction);\n  }\n  return new LazyValueC(f,p,cmd,this);\n}\n", "public String getHtmlHelpIcon(String id, String pathPrefix) {\n\n        String value = m_htmlProps.getProperty(\"C_HELP_IMG\");\n        if (value == null) {\n            return \"\";\n        } else {\n            value = CmsStringUtil.substitute(value, \"$replace$\", id);\n            return CmsStringUtil.substitute(value, \"$path$\", pathPrefix);\n        }\n    }", "public void add(String entry) throws JarException {\n  MessageHeader mh=manifest.getEntry(entry);\n  if (mh == null) {\n    throw new JarException(\"entry \" + entry + \" not in manifest\");\n  }\n  MessageHeader smh;\n  try {\n    smh=computeEntry(mh);\n  }\n catch (  IOException e) {\n    throw new JarException(e.getMessage());\n  }\n  entries.addElement(smh);\n}\n", "public void disableAllOperations ( ) { setPermissions ( STR_ ) ; }", "public List getDeepestChilds() {\n\t\tif (childs.size() == 0) {\n\t\t\treturn new ArrayList(0);\n\t\t}\n\t\tList ret = new ArrayList(childs.size() * 3);\n\t\tIterator it = getChilds().iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tAbcNode child = (AbcNode) it.next();\n\t\t\tif (!child.hasChilds())\n\t\t\t\tret.add(child);\n\t\t\telse {\n\t\t\t\tret.addAll(child.getDeepestChilds());\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}", "public BasicFormPage ( FormEditor editor , String id , String title ) { super ( editor , id , title ) ; }", "\tpublic void setAnimateBracketMatching(boolean animate) {\n\t\tif (animate!=animateBracketMatching) {\n\t\t\tanimateBracketMatching = animate;\n\t\t\tif (animate && bracketRepaintTimer==null) {\n\t\t\t\tbracketRepaintTimer = new BracketMatchingTimer();\n\t\t\t}\n\t\t\tfirePropertyChange(ANIMATE_BRACKET_MATCHING_PROPERTY,\n\t\t\t\t\t\t\t\t!animate, animate);\n\t\t}\n\t}\n", "@RequestMapping(method=RequestMethod.POST) ResponseEntity<Bookmark> addBookmark(@PathVariable(value=\"username\") String username,@RequestBody Bookmark bookmark) throws UserNotFoundException {\n  Optional<User> optional=usersRepository.findByUsername(username);\n  if (optional.isPresent()) {\n    User user=optional.get();\n    user.addBookmark(bookmark);\n    bookmark.setUser(user);\n    bookmarksRepository.save(bookmark);\n    return new ResponseEntity<>(bookmark,HttpStatus.CREATED);\n  }\n else {\n    throw new UserNotFoundException(username);\n  }\n}\n", "private Map<Integer,Fraction> generateAbsent(){\n  Map<Integer,Fraction> generated=new HashMap<Integer,Fraction>();\n  do {\n    generated.putAll(generate());\n    for (    Integer key : javaMap.keySet())     generated.remove(key);\n  }\n while (generated.size() < 100);\n  return generated;\n}\n", "public static void gaussianKernel(int rows, int cols, float sigma, float[] dest) {\n        if ((rows & 1) == 0) {\n            throw new IllegalArgumentException(\"rows must be an odd number\");\n        }\n        if ((cols & 1) == 0) {\n            throw new IllegalArgumentException(\"cols must be an odd number\");\n        }\n        if (dest == null) {\n            throw new IllegalArgumentException(\"dest must not be null\");\n        }\n        if (dest.length < rows * cols) {\n            throw new IllegalArgumentException(\"dest must have at least \" + (rows * cols) + \" remaining values\");\n        }\n        float sum = 0.0f;\n        for (int i = 0, y = -(rows - 1) / 2; y <= (rows - 1) / 2; y++) {\n            for (int x = -(cols - 1) / 2; x <= (cols - 1) / 2; x++, i++) {\n                float k = (float) Math.exp(-(y * y + x * x) / (2.0 * sigma * sigma));\n                dest[i] = k;\n                sum += k;\n            }\n        }\n        for (int i = 0; i < rows * cols; i++) {\n            dest[i] = dest[i] / sum;\n        }\n    }", "public synchronized TypeSubstitution createTypeSubstitution ( final INaviOperandTreeNode node , final BaseType baseType , final int position , final int offset , final IAddress address ) throws CouldntSaveDataException { return createTypeSubstitution ( node , baseType , new ArrayList < TypeMember > ( ) , position , offset , address ) ; }", "static boolean compatibleMethods(Class c1,Class c2){\n  Method[] meths=c1.getMethods();\n  for (int i=meths.length; --i >= 0; ) {\n    Method m1=meths[i];\n    try {\n      Method m2=c2.getMethod(m1.getName(),m1.getParameterTypes());\n      if (m2 != null && m1.getReturnType() != m2.getReturnType()) {\n        return false;\n      }\n    }\n catch (    NoSuchMethodException e) {\n    }\n  }\n  return true;\n}\n", "public boolean connectedToAtLeastOneNetwork(Collection<URI> networkUris){\n  if (networkUris != null) {\n    if (networkUris.contains(_id)) {\n      return true;\n    }\n    if (_routedNetworks != null) {\n      List<URI> routedNetowrks=StringSetUtil.stringSetToUriList(getRoutedNetworks());\n      return !Collections.disjoint(networkUris,routedNetowrks);\n    }\n  }\n  return false;\n}\n", "    public void fireFilesRefreshed(Set<File> files) {\n        if ( files != null ) {\n            fireStatusChanged(files);\n            //fireAnnotationsChanged(f);\n        }\n    }\n", "public List<DynamoDBMapper.FailedBatch> batchDelete(Iterable<T> objectsToDelete) {\n        return mapper.batchWrite((Iterable<T>)Collections.<T>emptyList(), objectsToDelete);\n    }", "@Override\n    public DescribeDocumentResult describeDocument(DescribeDocumentRequest request) {\n        request = beforeClientExecution(request);\n        return executeDescribeDocument(request);\n    }", "public void removeDisplayChangedListener(DisplayChangedListener client){\n  displayChanger.remove(client);\n}\n", "public void reset ( ) { mMetrics . clear ( ) ; mBestMetric = NUM_ ; }", "public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ) ; }", "private static void collectAllTimes(Tree tree,NodeRef top,NodeRef[] excludeBelow,ArrayList<ComparableDouble> times,ArrayList<Integer> childs){\n  times.add(new ComparableDouble(tree.getNodeHeight(top)));\n  childs.add(tree.getChildCount(top));\n  for (int i=", "private static void computeRegions(Rectangle sourceBounds,Dimension destSize,ImageWriteParam p){\n  ImageWriteParam param;\n  int periodX=1;\n  int periodY=1;\n  if (p != null) {\n    int[] sourceBands=p.getSourceBands();\n    if (sourceBands != null && (sourceBands.length != 1 || sourceBands[0] != 0)) {\n      throw new IllegalArgumentException(\"Cannot sub-band image!\");\n    }\n    Rectangle sourceRegion=p.getSourceRegion();\n    if (sourceRegion != null) {\n      sourceRegion=sourceRegion.intersection(sourceBounds);\n      sourceBounds.setBounds(sourceRegion);\n    }\n    int gridX=p.getSubsamplingXOffset();\n    int gridY=p.getSubsamplingYOffset();\n    sourceBounds.x+=gridX;\n    sourceBounds.y+=gridY;\n    sourceBounds.width-=gridX;\n    sourceBounds.height-=gridY;\n    periodX=p.getSourceXSubsampling();\n    periodY=p.getSourceYSubsampling();\n  }\n  destSize.setSize((sourceBounds.width + periodX - 1) / periodX,(sourceBounds.height + periodY - 1) / periodY);\n  if (destSize.width <= 0 || destSize.height <= 0) {\n    throw new IllegalArgumentException(\"Empty source region!\");\n  }\n}\n", "public synchronized boolean installPlugin(String id, String version) throws PluginException {\n        // Download to temporary location\n        Path downloaded = downloadPlugin(id, version);\n\n        Path pluginsRoot = pluginManager.getPluginsRoot();\n        Path file = pluginsRoot.resolve(downloaded.getFileName());\n        try {\n            Files.move(downloaded, file);\n        } catch (IOException e) {\n            throw new PluginException(e, \"Failed to write file '{}' to plugins folder\", file);\n        }\n\n        String pluginId = pluginManager.loadPlugin(file);\n        PluginState state = pluginManager.startPlugin(pluginId);\n\n        return PluginState.STARTED.equals(state);\n    }", "public static void increment(String name, String... tags) {\n    final MonitorConfig.Builder configBuilder = MonitorConfig.builder(name);\n    Preconditions.checkArgument(tags.length % 2 == 0,\n        \"The sequence of (key, value) pairs must have even size: one key, one value\");\n    try {\n      for (int i = 0; i < tags.length; i += 2) {\n        configBuilder.withTag(tags[i], tags[i + 1]);\n      }\n      increment(configBuilder.build());\n    } catch (IllegalArgumentException e) {\n      LOGGER.warn(\"Failed to get a counter to increment: {}\", e.getMessage());\n    }\n  }", "public DaVinci tag ( String tag ) { if ( ! queues . containsKey ( tag ) ) { throw new RuntimeException ( STR_ ) ; } mRequestQueue = queues . get ( tag ) ; mDaImageLoader = loaders . get ( tag ) ; return this ; }", "public void marshall(AssessmentRunStateChange assessmentRunStateChange, ProtocolMarshaller protocolMarshaller) {\n\n        if (assessmentRunStateChange == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(assessmentRunStateChange.getStateChangedAt(), STATECHANGEDAT_BINDING);\n            protocolMarshaller.marshall(assessmentRunStateChange.getState(), STATE_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void validate ( String site , String filePath ) throws Exception { if ( HDFSResourceUtils . isNullOrEmpty ( site ) ) throw new Exception ( STR_ ) ; if ( HDFSResourceUtils . isNullOrEmpty ( filePath ) ) throw new Exception ( STR_ ) ; }", "ResourceThread(String imageUrl,Component imgLabel,HTMLComponent htmlC,ResourceThreadQueue threadQueue){\n  this.imageUrl=imageUrl;\n  this.imgLabel=imgLabel;\n  this.handler=htmlC.getRequestHandler();\n  this.threadQueue=threadQueue;\n  this.htmlC=htmlC;\n}\n", "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.COMPUTATION)\n    public final Maybe<T> timeout(long timeout, TimeUnit timeUnit, MaybeSource<? extends T> fallback) {\n        ObjectHelper.requireNonNull(fallback, \"other is null\");\n        return timeout(timeout, timeUnit, Schedulers.computation(), fallback);\n    }", "protected void paint ( SynthContext context , Graphics g ) { super . paint ( g , context . getComponent ( ) ) ; }", "   public KeyName itemKeyName(int i) throws XMLSecurityException {\n\n      Element e = XMLUtils.selectDsNode(this._constructionElement.getFirstChild(),\n                                                Constants._TAG_KEYNAME,i);\n\n      if (e != null) {\n         return new KeyName(e, this._baseURI);\n      } \n      return null;      \n   }\n", "public Integer countPagesNotContainingTemplateNames ( List < String > templateNames ) throws WikiApiException { return countFilteredPages ( templateNames , BOOL_ ) ; }", "    public void reset() {\n        index = 0;\n        environment = (Value[]) trail.get(0);\n        Arrays.fill(environment, null);\n    }\n", "private Instances computeInfoGain(Instances instances,double defAcRt,Antd antd){\n  Instances data=instances;\n  Instances[] splitData=antd.splitData(data,defAcRt,m_Consequent);\n  if (splitData != null) {\n    return splitData[(int)antd.getAttrValue()];\n  }\n else {\n    return null;\n  }\n}\n", "Record addImageRecord ( PDFPage page , ImageInfo info , Bitmap image , PDFRenderer renderer ) { Integer pageNumber = new Integer ( page . getPageNumber ( ) ) ; PageRecord pageRec = getPageRecord ( pageNumber ) ; if ( pageRec == null ) { pageRec = addPageR", "    public void addElement(Element element) {\n        if (table != null) {\n            table = null;\n            column.setText(null);\n        }\n        column.addElement(element);\n    }\n", "\tpublic List getVirtualWikiList(Object transactionObject) throws Exception {\n\t\tVector results = new Vector();\n\t\tTransactionStatus status = DatabaseConnection.startTransaction();\n\t\ttry {\n\t\t\tConnection conn = DatabaseConnection.getConnection();\n\t\t\tWikiResultSet rs = this.queryHandler().getVirtualWikis(conn);\n\t\t\twhile (rs.next()) {\n\t\t\t\tVirtualWiki virtualWiki = initVirtualWiki(rs);\n\t\t\t\tresults.add(virtualWiki);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tDatabaseConnection.rollbackOnException(status, e);\n\t\t\tthrow e;\n\t\t} catch (Error err) {\n\t\t\tDatabaseConnection.rollbackOnException(status, err);\n\t\t\tthrow err;\n\t\t}\n\t\tDatabaseConnection.commit(status);\n\t\treturn results;\n\t}\n", "private static int div(int a, int b) {\n    return a > 0 ? (b > 0 ? a / b : (a - b - 1) / b)\n                 : (b > 0 ? (a - b + 1) / b : a / b);\n  }", "public SkipUsersPlaybackToPreviousTrackRequest.Builder skipUsersPlaybackToPreviousTrack() {\n    return new SkipUsersPlaybackToPreviousTrackRequest.Builder(accessToken)\n            .setDefaults(httpManager, scheme, host, port);\n  }", "public ConnectionInner get(String resourceGroupName, String automationAccountName, String connectionName) {\n        return getWithServiceResponseAsync(resourceGroupName, automationAccountName, connectionName).toBlocking().single().body();\n    }", "public static ExternalSortable [ ] readArrayOfExternalSortable ( InputStream in , ExternalSortable ex ) throws IOException { Vector A = new Vector ( ) ; int i = NUM_ ; try { do { A . addElement ( ex . read ( in ) ) ; i ++ ; } while ( BOOL_ ) ; } catch ( IOException e ) { } ExternalSortable [ ] eA = new ExternalSortable [ i ] ; for ( int j = NUM_ ; j < i ; j ++ ) eA [ j ] = ( ExternalSortable ) A . elementAt ( j ) ; return eA ; }", "public static Collection flatten ( short [ ] self ) { return flatten ( toList ( self ) , new ArrayList ( ) ) ; }", "\tpublic void setPhoneNumber(String countryCode, String phoneNumber) {\n\t\t// the start character is a \"+1\" for en_US\n\t\tStringBuffer msisdn = new StringBuffer(\"+\");\n\t\tmsisdn.append(countryCode);\n\n\t\t// only accept the digit characters\n\t\tfinal char[] numbers = phoneNumber.toCharArray();\n\t\tfor (int x = 0; x < numbers.length; x++) {\n\t\t\tfinal char c = numbers[x];\n\t\t\tif ((c >= '0') && (c <= '9'))\n\t\t\t\tmsisdn.append(c);\n\t\t}\n\n\t\tsetMSISDN(msisdn.toString());\n\t}\n", "\tprivate String simplifyJavaType(String typeName) {\n\t\ttypeName = typeName.replace('/', '.');\n\t\tif (typeName.endsWith(\";\")) {\n\t\t\tif (typeName.length() > 2) {\n\t\t\t\ttypeName = typeName.substring(1, typeName.length() -1);\n\t\t\t}\n\t\t}\n\t\treturn typeName;\n\t}\n", "public static void openCustomTab ( Activity activity , CustomTabsIntent customTabsIntent , Uri uri , CustomTabFallback fallback ) { String packageName = CustomTabsHelper . getPackageNameToUse ( activity ) ; if ( TextUtils . isEmpty ( packageName ) ) { if ", "    public String toNormalizedString() {\n\n        boolean first = true;\n        String normalized;\n\n        normalized = \"date-add(\";\n\n        if (children != null) {\n            for (int i = 0; i < children.length; ++i) {\n                if (!first) {\n                    normalized = normalized + \",\";\n                }\n\n                first = false;\n\n                SimpleNode n = (SimpleNode) children[i];\n\n                if (n != null) {\n                    normalized = normalized + n.toNormalizedString();\n                }\n            }\n        }\n\n        normalized = normalized + \")\";\n\n        return normalized;\n    }\n", "public SpanManager ( String src ) { sb = new StringBuilder ( src ) ; managedLists = new ArrayList < List < Span > > ( ) ; calculateSrcPositions = BOOL_ ; }", "\tpublic void saveAll() {\n\t\tinit();\n\t\tfor (final Iterator it = _compBindingMap.keySet().iterator(); it.hasNext(); ) {\n\t\t\tfinal Component comp = (Component) it.next();\n\t\t\tsaveComponent(comp);\n\t\t}\n\t}\n", "public static String shortFormatDayTime ( Date dt ) { return createDateFormatter ( ) . shortFormatDayTime ( dt ) ; }", "public void resetInitialIfExistSearchActive ( ) { _initialIfExistSearchActive = BOOL_ ; }", "public boolean isExpired ( ) { return this . ttl < System . currentTimeMillis ( ) ; }", "public void add(Comparator c){\n  if (c == null)   return;\n  if (m_cmp.length == m_size) {\n    Comparator[] cmp=new Comparator[m_size + INCREMENT];\n    System.arraycopy(m_cmp,0,cmp,0,m_size);\n    m_cmp=cmp;\n  }\n  m_cmp[m_size++]=c;\n}\n", "public void write(final byte[] srcBytes, final int srcOffset, final int length)\n    {\n        final long resultingOffset = position + ((long)length);\n        if (resultingOffset > this.length)\n        {\n            throw new IllegalStateException(\"insufficient capacity in the buffer\");\n        }\n\n        buffer.putBytes(offset + position, srcBytes, srcOffset, length);\n        position += length;\n    }", "@After public void tearDown() throws Exception {\n  cache.close();\n}\n", "public void clearSelections(){\n  mSelectedTags.clear();\n  refreshSelectedTags();\n}\n", "public static double logQuick(double value){\n  if (USE_JDK_MATH) {\n    return STRICT_MATH ? StrictMath.log(value) : Math.log(value);\n  }\n  double h;\n  if (value > 0.87) {\n    if (value < 1.16) {\n      return 2.0 * (value - 1.0) / (value + 1.0);\n    }\n    h=0.0;\n  }\n else   if (value < MIN_DOUBLE_NORMAL) {\n    value*=TWO_POW_52;\n    h=-52 * LOG_2;\n  }\n else {\n    h=0.0;\n  }\n  int valueBitsHi=(int)(Double.doubleToRawLongBits(value) >> 32);\n  int valueExp=(valueBitsHi >> 20) - MAX_DOUBLE_EXPONENT;\n  int xIndex=((valueBitsHi << 12) >>> (32 - LOG_BITS));\n  return h + valueExp * LOG_2 + logXLogTab[xIndex];\n}\n", "public SDVariable normmax(String name, SDVariable x, int... dimensions) {\n        return normmax(name, x, false, dimensions);\n    }", "@Override\n  public void endVisit(ParenthesizedExpression node) {\n    Expression expr = node.getExpression();\n    if (expr instanceof ParenthesizedExpression) {\n      Expression inner = ((ParenthesizedExpression) expr).getExpression();\n      if (isEqualityExpression(inner)) {\n        node.replaceWith(TreeUtil.remove(expr));\n      }\n    } else if (!(node.getParent() instanceof Expression) && isEqualityExpression(expr)) {\n      node.replaceWith(TreeUtil.remove(expr));\n    }\n  }", "public static void fill ( long [ ] [ ] [ ] [ ] matrix , long value ) { int rows = matrix . length ; for ( int r = NUM_ ; r < rows ; r ++ ) { int cols = matrix [ r ] . length ; for ( int c = NUM_ ; c < cols ; c ++ ) { int height = matrix [ r ] [ c ] . leng", "public void activateLogix(){\n  if (_isActivated) {\n    return;\n  }\n  resetConditionals();\n  assembleListenerList();\n  for (int i=0; i < _listeners.size(); i++) {\n    startListener(_listeners.get(i));\n  }\n  _isActivated=true;\n  calculateConditionals();\n}\n", "  protected ClassLoader parentLoader() {\n    return parentLoader;\n  }\n", "CliProcess execute ( String command ) ;", "public static EnumSet < EmbeddingFlags > asSet ( int value ) { EnumSet < EmbeddingFlags > set = EnumSet . noneOf ( EmbeddingFlags . class ) ; for ( EmbeddingFlags flag : EmbeddingFlags . values ( ) ) { if ( ( value & flag . mask ( ) ) == flag . mask ( ) ) { set . add ( flag ) ; } } return set ; }", "protected CCSpawn(CCFiniteTimeAction one_,CCFiniteTimeAction two_){\n  super(Math.max(one_.getDuration(),two_.getDuration()));\n  float d1=one_.getDuration();\n  float d2=two_.getDuration();\n  one=one_;\n  two=two_;\n  if (d1 > d2)   two=new CCSequence(two_,new CCDelayTime(d1 - d2));\n else   if (d1 < d2)   one=new CCSequence(one_,new CCDelayTime(d2 - d1));\n}\n", "    public Matrix getMatrix() {\n        final int numRow = this.numRow.intValue();\n        final int numCol = this.numCol.intValue();\n        final Matrix matrix = MatrixFactory.create(numRow, numCol);\n\n        if (matrixValues != null) {\n            for (int j = 0; j < numRow; j++) {\n                final ParameterValue[] row = matrixValues[j];\n\n                if (row != null) {\n                    for (int i = 0; i < numCol; i++) {\n                        final ParameterValue element = row[i];\n\n                        if (element != null) {\n                            matrix.setElement(j, i, element.doubleValue());\n                        }\n                    }\n                }\n            }\n        }\n\n        return matrix;\n    }\n", "public static ArrayList<GeoPoint> reduceWithTolerance(ArrayList<GeoPoint> shape,double tolerance){\n  int n=shape.size();\n  if (tolerance <= 0 || n < 3) {\n    return shape;\n  }\n  boolean[] marked=new boolean[n];\n  for (int i=1; i < n - 1; i++)   marked[i]=false;\n  marked[0]=marked[n - 1]=true;\n  douglasPeuckerReduction(shape,marked,tolerance,0,n - 1);\n  ArrayList<GeoPoint> newShape=new ArrayList<GeoPoint>(n);\n  for (int i=0; i < n; i++) {\n    if (marked[i])     newShape.add(shape.get(i));\n  }\n  return newShape;\n}\n", "private void addDefaultValues(ServiceOperation operation) {\n\t\tif (operation.getDelegate() != null) {\n\t\t\tcopyFromDelegate(operation, operation.getDelegate(), true);\n\t\t} else if (operation.getServiceDelegate() != null) {\n\t\t\t// make sure that the service delegate has been populated first\n\t\t\taddDefaultValues(operation.getServiceDelegate());\n\t\t\t// recursive call\n\t\t\t// (circular dependencies not allowed)\n\t\t\tcopyFromDelegate(operation, operation.getServiceDelegate(), true);\n\t\t}\n\t}", "public Observable<P2SVpnGatewayInner> getByResourceGroupAsync(String resourceGroupName, String gatewayName) {\n        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, gatewayName).map(new Func1<ServiceResponse<P2SVpnGatewayInner>, P2SVpnGatewayInner>() {\n            @Override\n            public P2SVpnGatewayInner call(ServiceResponse<P2SVpnGatewayInner> response) {\n                return response.body();\n            }\n        });\n    }", "@RequestMapping(value=\"/fe/taxreceipts/process/donate\") public ResponseEntity<String> processDonate(@RequestParam(value=\"cnpj\") String cnpj,@RequestParam(value=\"date\") Date date,@RequestParam(value=\"coo\") String coo,@RequestParam(value=\"total\") double tot", "public final T end ( int i ) { while ( i -- > NUM_ && ! tagStack . isEmpty ( ) ) { end ( ) ; } return getSelf ( ) ; }", "  public void set(Rotf arg) {\n    q0 = arg.q0;\n    q1 = arg.q1;\n    q2 = arg.q2;\n    q3 = arg.q3;\n  }\n", "protected ByteBuffer convert ( AudioPacket packet ) { if ( packet . hasAudioBuffer ( ) ) { float [ ] samples = packet . getAudioBuffer ( ) . getSamples ( ) ; ByteBuffer buffer = ByteBuffer . allocate ( samples . length * NUM_ ) . order ( ByteOrder . LITTLE_ENDIAN ) ; ShortBuffer shortBuffer = buffer . asShortBuffer ( ) ; for ( float sample : samples ) { shortBuffer . put ( ( short ) ( sample * Short . MAX_VALUE ) ) ; } return buffer ; } return null ; }", "public ServiceFuture<Void> checkNameAvailabilityAsync(CheckNameAvailabilityParameters parameters, final ServiceCallback<Void> serviceCallback) {\n        return ServiceFuture.fromResponse(checkNameAvailabilityWithServiceResponseAsync(parameters), serviceCallback);\n    }", "public static List<Audit> findByEntity(EntityManager em,JPAEntity entity,BigInteger limit){\n  requireArgument(em != null,\"Entity manager cannot be null.\");\n  requireArgument(entity != null,\"Entity cannot be null.\");\n  TypedQuery<Audit> query=em.createNamedQuery(\"Audit.findByJPAEntity\",Audit.class);\n  if (limit != null) {\n    query.setMaxResults(limit.intValue());\n  }\n  try {\n    query.setParameter(\"jpaEntity\",entity);\n    return query.getResultList();\n  }\n catch (  NoResultException ex) {\n    return new ArrayList<Audit>(0);\n  }\n}\n", "\tpublic Object getValueAt(int row, int col) {\n\t\tPlayer player = tourney.getPlayer(row);\n\t\tif(col < 2) {\n\t\t\treturn super.getValueAt(row, col);\n\t\t}\n\t\telse if(col == 2) {\n\t\t\treturn player.getDayOfBirth();\n\t\t}\n\t\telse if(col > 2 && col < 5) {\n\t\t\treturn super.getValueAt(row, col - 1);\n\t\t}\n\t\telse if(col == 5) {\n\t\t\treturn Boolean.valueOf(player.getPaid());\n\t\t}\n\t\telse if(col == 6) {\n\t\t\treturn player.getNotes();\n\t\t}\n\t\telse {\n\t\t\treturn \"\";\n\t\t}\n\t}\n", "public void save(String fileName) throws IOException {\n  try (BufferedWriter w=new BufferedWriter(new FileWriter(fileName),1000000)){\n    for (    String key : keySet()) {\n      Integer value=get(key);\n      if (value != null)       w.write(key + \"\\t\" + value+ \"\\n\");\n    }\n  }\n }\n", "  public boolean hasId() {\n    return (null != this.id && this.id >= 0);\n  }\n", "public ColumnSelectionMenu(LimeJTable table){\n  _table=table;\n  DataLineModel<?,?> model=(DataLineModel<?,?>)_table.getModel();\n  ActionListener reverter=new ReverterListener();\n  JMenuItem revert=new SkinMenuItem(REVERT_DEFAULT);\n  ColumnPreferenceHandler cph=_table.getColumnPreferenceHandler();\n  TableSettings settings=_table.getTableSettings();\n  if ((cph == null || cph.isDefault()) && (settings == null || settings.isDefault()))   revert.setEnabled(false);\n else   revert.addActionListener(reverter);\n  _menu.add(revert);\n  if (settings != null) {\n    JMenu options=createMoreOptions(settings);\n    _menu.add(options);\n  }\n  _menu.addSeparator();\n  addTableColumnChoices(new SelectionActionListener(),model,table);\n}\n", "Symbol addConstant(final Object value) {\n    if (value instanceof Integer) {\n      return addConstantInteger(((Integer) value).intValue());\n    } else if (value instanceof Byte) {\n      return addConstantInteger(((Byte) value).intValue());\n    } else if (value instanceof Character) {\n      return addConstantInteger(((Character) value).charValue());\n    } else if (value instanceof Short) {\n      return addConstantInteger(((Short) value).intValue());\n    } else if (value instanceof Boolean) {\n      return addConstantInteger(((Boolean) value).booleanValue() ? 1 : 0);\n    } else if (value instanceof Float) {\n      return addConstantFloat(((Float) value).floatValue());\n    } else if (value instanceof Long) {\n      return addConstantLong(((Long) value).longValue());\n    } else if (value instanceof Double) {\n      return addConstantDouble(((Double) value).doubleValue());\n    } else if (value instanceof String) {\n      return addConstantString((String) value);\n    } else if (value instanceof Type) {\n      Type type = (Type) value;\n      int typeSort = type.getSort();\n      if (typeSort == Type.OBJECT) {\n        return addConstantClass(type.getInternalName());\n      } else if (typeSort == Type.METHOD) {\n        return addConstantMethodType(type.getDescriptor());\n      } else { // type is a primitive or array type.\n        return addConstantClass(type.getDescriptor());\n      }\n    } else if (value instanceof Handle) {\n      Handle handle = (Handle) value;\n      return addConstantMethodHandle(\n          handle.getTag(),\n          handle.getOwner(),\n          handle.getName(),\n          handle.getDesc(),\n          handle.isInterface());\n    } else {\n      throw new IllegalArgumentException(\"value \" + value);\n    }\n  }", "void addTransition ( AbstractTransitionBuilder transitionBuilder ) ;", "\tprivate void appendDefaultType(Element root, Entry<String, String> entry) {\n\t\troot.addElement(DEFAULT_TAG_NAME).addAttribute(\n\t\t\t\tEXTENSION_ATTRIBUTE_NAME, entry.getKey())\n\t\t\t\t.addAttribute(CONTENT_TYPE_ATTRIBUTE_NAME,\n\t\t\t\t\t\tentry.getValue());\n\n\t}\n", "private DatagramPacket [ ] encodeMulticastRequest ( final MulticastRequest req ) throws IOException { final Discovery disco = getDiscovery ( multicastRequestConstraints . chooseProtocolVersion ( ) ) ; final List packets = new ArrayList ( ) ; EncodeIterator ei = disco . encodeMulticastRequest ( req , multicastRequestConstraints . getMulticastMaxPacketSize ( DEFAULT_MAX_PACKET_SIZE ) , multicastRequestConstraints . getUnfulfilledConstraints ( ) ) ; while ( ei . hasNext ( ) ) { try { packets . addAll ( Arrays . asList ( ei . next ( ) ) ) ; } catch ( Exception e ) { logger . log ( ( e instanceof UnsupportedConstraintException ) ? Levels . HANDLED : Level . INFO , STR_ , e ) ; } } if ( packets . isEmpty ( ) ) { throw new DiscoveryProtocolException ( STR_ ) ; } return ( DatagramPacket [ ] ) packets . toArray ( new DatagramPacket [ packets . size ( ) ] ) ; }", "static public int compare(byte[] first, byte[] second) {\n        // choose the shorter array length\n        int firstLength = first.length;\n        int secondLength = second.length;\n        int shorterLength = Math.min(firstLength, secondLength);\n\n       ", "  protected Object defaultGetCellValueAt(Object o, int columnIndex) {\n    if (objectClass == null) return null;\n    if ((columnFields == null) || columnFields.isEmpty()) return null;\n    try {\n      String fieldName = (String)columnFields.get(columnIndex);\n      Field field = objectClass.getField(fieldName);\n      return field.get(o);\n    }\n    catch (Exception e) {\n      Debug.note(\"Exception during defaultGetCellValueAt(\" + o.toString() + \n\t\t \", \" + columnIndex + \")\");\n      Debug.noteException(e);\n      return null;\n    }\n  }\n", "    public void uninstallToolBarControl(AbstractButton control) {\n        Pair<UIRegion, ToolBarGroup> pair = tabContainer.uninstallToolBarControl(control);\n        if(pair != null) {\n            ((JComponent) window.getContentPane()).revalidate();\n            fireEvent(new UIControlRemove(this, control, pair.getA(), pair.getB()));\n        }\n    }\n", "private Automaton deletionsOf(String s){\n  List<Automaton> list=new ArrayList<>();\n  for (int i=0; i < s.length(); i++) {\n    Automaton a=Automata.makeString(s.substring(0,i));\n    a=Operations.concatenate(a,Automata.makeString(s.substring(i + 1)));\n    list.add(a);\n  }\n  Automaton a=Operations.union(list);\n  a=MinimizationOperations.minimize(a,DEFAULT_MAX_DETERMINIZED_STATES);\n  return a;\n}\n", "void discarded ( DiscoveryEvent e ) ;", "default < T > Iterable < T > loadObjectsWithSortingAndPagination ( Class < T > entityClass , FilterScope filterScope ) { return loadObjects ( entityClass , filterScope ) ; }", "public static InputStream getGZIPDecompressStream(byte[] buffer) throws IOException {\r\n        ByteArrayInputStream bytesIn = new ByteArrayInputStream(buffer);\r\n        GZIPInputStream gzipIn = new GZIPInputStream(bytesIn);\r\n        return gzipIn;\r\n    }", "@Override\n    protected boolean performDialogOperation() throws CmsException {\n\n        // check if the current resource is a folder for single operation\n        boolean isFolder = isOperationOnFolder();\n        // on folder deletion or multi operation display \"please wait\" screen, not for simple file deletion\n        if ((isMultiOperation() || isFolder) && !DIALOG_WAIT.equals(getParamAction())) {\n            // return false, this will trigger the \"please wait\" screen\n            return false;\n        }\n\n        // get the new release date for the resource(s) from request parameter\n        long releaseDate = CmsResource.DATE_RELEASED_DEFAULT;\n        boolean resetReleaseDate = Boolean.valueOf(getParamResetrelease()).booleanValue();\n        boolean leaveReleaseDate = false;\n        if (!resetReleaseDate) {\n            try {\n                if ((CmsStringUtil.isNotEmptyOrWhitespaceOnly(getParamReleasedate()))\n                    && (!getParamReleasedate().startsWith(CmsTouch.DEFAULT_DATE_STRING))) {\n                    releaseDate = CmsCalendarWidget.getCalendarDate(getMessages(), getParamReleasedate(), true);\n                } else {\n                    leaveReleaseDate = true;\n                }\n            } catch (ParseException e) {\n                throw new CmsException(\n                    Messages.get().container(Messages.ERR_PARSE_RELEASEDATE_1, getParamReleasedate()),\n                    e);\n            }\n        }\n\n        // get the new expire date for the resource(s) from request parameter\n        long expireDate = CmsResource.DATE_EXPIRED_DEFAULT;\n        boolean resetExpireDate = Boolean.valueOf(getParamResetexpire()).booleanValue();\n        boolean leaveExpireDate = false;\n        if (!resetExpireDate) {\n            try {\n                if ((CmsStringUtil.isNotEmptyOrWhitespaceOnly(getParamExpiredate()))\n                    && (!getParamExpiredate().startsWith(CmsTouch.DEFAULT_DATE_STRING))) {\n                    expireDate = CmsCalendarWidget.getCalendarDate(getMessages(), getParamExpiredate(), true);\n                } else {\n                    leaveExpireDate = true;\n                }\n            } catch (ParseException e) {\n                throw new CmsException(\n                    Messages.get().container(Messages.ERR_PARSE_EXPIREDATE_1, getParamExpiredate()),\n                    e);\n            }\n        }\n\n        // get the flag if the operation is recursive from request parameter\n        boolean modifyRecursive = Boolean.valueOf(getParamRecursive()).booleanValue();\n\n        // now iterate the resource(s)\n        Iterator<String> i = getResourceList().iterator();\n        while (i.hasNext()) {\n            String resName = i.next();\n            try {\n                performSingleResourceAvailability(\n                    resName,\n                    releaseDate,\n                    expireDate,\n                    leaveReleaseDate,\n                    leaveExpireDate,\n                    modifyRecursive);\n            } catch (CmsException e) {\n                // collect exceptions to create a detailed output\n                addMultiOperationException(e);\n            }\n        }\n\n        boolean notificationEnabled = Boolean.valueOf(getParamEnablenotification()).booleanValue();\n        int notificationInterval = 0;\n        try {\n            notificationInterval = Integer.parseInt(getParamNotificationinterval());\n        } catch (Throwable e) {\n            // ignore\n        }\n\n        // get the flag if the operation should be executed on resource siblings, too\n        boolean modifySiblings = Boolean.valueOf(getParamModifysiblings()).booleanValue();\n\n        // now iterate the resource(s)\n        i = getResourceList().iterator();\n        while (i.hasNext()) {\n            String resName = i.next();\n            try {\n                performSingleResourceNotification(\n                    getCms(),\n                    resName,\n                    notificationEnabled,\n                    notificationInterval,\n                    modifySiblings);\n            } catch (CmsException e) {\n                // collect exceptions to create a detailed output\n                addMultiOperationException(e);\n            }\n        }\n        checkMultiOperationException(Messages.get(), Messages.ERR_AVAILABILITY_MULTI_0);\n\n        return true;\n    }", "   public boolean isWebBrowserSupported() {\n      return true;\n   }\n", "    protected void addNamePropertyDescriptor(Object object) {\n        itemPropertyDescriptors.add(new ItemPropertyDescriptor(\n                ((ComposeableAdapterFactory) adapterFactory)\n                        .getRootAdapterFactory(), getResourceLocator(),\n                getString(\"_UI_TPartner_name_feature\"), getString(\n                        \"_UI_PropertyDescriptor_description\",\n                        \"_UI_TPartner_name_feature\", \"_UI_TPartner_type\"),\n                BpelPackage.eINSTANCE.getTPartner_Name(), true,\n                ItemPropertyDescriptor.GENERIC_VALUE_IMAGE));\n    }\n", "    private void removeChild (osid.shared.Id childQualifierId) {\n        VueQualifier qual = (VueQualifier) azMgr.getQualifier (childQualifierId);\n        if (this.children.indexOf(qual) != -1)\n            this.children.remove(qual);\n    }\n", "private static String convertSpecialCharacters(StringBuilder idlName)\n    {\n        for (int i = 0; i < idlName.length(); ++i)\n        {\n            char c = idlName.charAt(i);\n\n            if (c == '$' || c > 255)\n            {\n                idlName.replace(i, i + 1, \"U\");\n\n                String hex = Integer.toHexString(c).toUpperCase();\n                int numHex = hex.length();\n                int numZero = 4 - numHex;\n\n                while (numZero > 0)\n                {\n                    idlName.insert(++i, '0');\n                    --numZero;\n                }\n\n                idlName.insert(i + 1, hex);\n                i += numHex;\n            }\n        }\n\n        if (idlName.charAt(0) == '_')\n        {\n            idlName.insert(0, 'J');\n        }\n\n        return idlName.toString();\n    }", "public String reconcile ( ReconciliationService . ReconAction reconAction , JsonValue mapping , Boolean synchronous , JsonValue reconParams , JsonValue config ) throws ResourceException ;", "public static int indexOfLastSeparator(String filename){\n  if (filename == null) {\n    return -1;\n  }\n  int lastUnixPos=filename.lastIndexOf(UNIX_SEPARATOR);\n  int lastWindowsPos=filename.lastIndexOf(WINDOWS_SEPARATOR);\n  return Math.max(lastUnixPos,lastWindowsPos);\n}\n", "public void finaliseAddObservations ( ) throws Exception ;", "private static void convert(unificationXref uni, Model level2)\n\t{\n\t\t//We can not simply convert a class, so we need to remove the\n        //uni and insert a new relationship xref\n\n        //First get all the objects that refers to this uni\n        Set<XReferrable> referrables =\n\t\t\tnew HashSet<XReferrable>(uni.isXREFof());\n\n        //Create the new relationship xref in the model.\n        relationshipXref relationshipXref =\n        \tlevel2.addNew(relationshipXref.class, uni.getUri());\n\n        //Copy the fields from uni\n\t\trelationshipXref.setCOMMENT(uni.getCOMMENT());\n\t\trelationshipXref.setDB(uni.getDB());\n\t\trelationshipXref.setDB_VERSION(uni.getDB_VERSION());\n\t\trelationshipXref.setID(uni.getID());\n\t\trelationshipXref.setID_VERSION(uni.getID_VERSION());\n\t\trelationshipXref.setRELATIONSHIP_TYPE(\n\t\t\t\"http://www.biopax.org/paxtools/convertedGOUnificationXREF\");\n\n        //Create a link to the new xref from all the owners.\n        for (XReferrable referrable : referrables)\n\t\t{\n\t\t\treferrable.addXREF(relationshipXref);\n\t\t}\n\n        //Remove the references to the old uni\n        for (XReferrable referrable : referrables)\n        {\n            referrable.removeXREF(uni);\n        }\n        //Now remove it from the model.\n        level2.remove(uni);\n\n        //We are done!\n    }", "String[][] findPartitionInfo(String hostName, String userDir, String libertyServerName, String executorIdentifier) throws Exception {\n        PartitionRecord criteria = new PartitionRecord(false);\n        if (hostName != null)\n            criteria.setHostName(hostName);\n        if (userDir != null)\n            criteria.setUserDir(userDir);\n        if (libertyServerName != null)\n            criteria.setLibertyServer(libertyServerName);\n        if (executorIdentifier != null)\n            criteria.setExecutor(executorIdentifier);\n\n        List<PartitionRecord> records = null;\n        TransactionController tranController = new TransactionController();\n        try {\n            tranController.preInvoke();\n            records = taskStore.find(criteria);\n        } catch (Throwable x) {\n            tranController.setFailure(x);\n        } finally {\n            Exception x = tranController.postInvoke(Exception.class);\n            if (x != null)\n                throw x;\n        }\n\n        String[][] partitionInfo = new String[records == null ? 0 : records.size()][5];\n        if (records != null) // guard against impossible null value to make FindBugs stop complaining\n            for (int i = 0; i < records.size(); i++) {\n                PartitionRecord record = records.get(i);\n                partitionInfo[i][0] = Long.toString(record.getId());\n                partitionInfo[i][1] = record.getHostName();\n                partitionInfo[i][2] = record.getUserDir();\n                partitionInfo[i][3] = record.getLibertyServer();\n                partitionInfo[i][4] = record.getExecutor();\n            }\n        return partitionInfo;\n    }", "@Override public String graph() throws Exception {\n  StringBuffer text=new StringBuffer();\n  assignIDs(-1);\n  text.append(\"digraph J48Tree {\\n\");\n  if (m_isLeaf) {\n    text.append(\"N\" + m_id + \" [label=\\\"\"+ Utils.backQuoteChars(m_localModel.dumpLabel(0,m_train))+ \"\\\" \"+ \"shape=box style=filled \");\n    if (m_train != null && m_train.numInstances() > 0) {\n      text.append(\"data =\\n\" + m_train + \"\\n\");\n      text.append(\",\\n\");\n    }\n    text.append(\"]\\n\");\n  }\n else {\n    text.append(\"N\" + m_id + \" [label=\\\"\"+ Utils.backQuoteChars(m_localModel.leftSide(m_train))+ \"\\\" \");\n    if (m_train != null && m_train.numInstances() > 0) {\n      text.append(\"data =\\n\" + m_train + \"\\n\");\n      text.append(\",\\n\");\n    }\n    text.append(\"]\\n\");\n    graphTree(text);\n  }\n  return text.toString() + \"}\\n\";\n}\n", "public void read(InputStream is) throws IOException {\n  FastInputStream fis=new FastInputStream(is);\n  byte[] lbuf=new byte[512];\n  attr.read(fis,lbuf);\n  int ecount=0, acount=0;\n  int asize=2;\n  int len;\n  String name=null;\n  boolean skipEmptyLines=true;\n  byte[] lastline=null;\n  while ((len=fis.readLine(lbuf)) != -1) {\n    if (lbuf[--len] != '\\n') {\n      throw new IOException(\"manifest line too long\");\n    }\n    if (len > 0 && lbuf[len - 1] == '\\r') {\n      --len;\n    }\n    if (len == 0 && skipEmptyLines) {\n      continue;\n    }\n    skipEmptyLines=false;\n    if (name == null) {\n      name=parseName(lbuf,len);\n      if (name == null) {\n        throw new IOException(\"invalid manifest format\");\n      }\n      if (fis.peek() == ' ') {\n        lastline=new byte[len - 6];\n        System.arraycopy(lbuf,6,lastline,0,len - 6);\n        continue;\n      }\n    }\n else {\n      byte[] buf=new byte[lastline.length + len - 1];\n      System.arraycopy(lastline,0,buf,0,lastline.length);\n      System.arraycopy(lbuf,1,buf,lastline.length,len - 1);\n      if (fis.peek() == ' ') {\n        lastline=buf;\n        continue;\n      }\n      name=new String(buf,0,buf.length,\"UTF8\");\n      lastline=null;\n    }\n    Attributes attr=getAttributes(name);\n    if (attr == null) {\n      attr=new Attributes(asize);\n      entries.put(name,attr);\n    }\n    attr.read(fis,lbuf);\n    ecount++;\n    acount+=attr.size();\n    asize=Math.max(2,acount / ecount);\n    name=null;\n    skipEmptyLines=true;\n  }\n}\n", "    public boolean isLoaded() {\n        return true;\n    }\n", "private void recycleChildren(RecyclerView.Recycler recycler,int startIndex,int endIndex){\n  if (startIndex == endIndex) {\n    return;\n  }\n  if (DEBUG) {\n    Log.d(TAG,\"Recycling \" + Math.abs(startIndex - endIndex) + \" items\");\n  }\n  if (endIndex > startIndex) {\n    for (int i=endIndex - 1; i >= startIndex; i--) {\n      removeAndRecycleViewAt(i,recycler);\n    }\n  }\n else {\n    for (int i=startIndex; i > endIndex; i--) {\n      removeAndRecycleViewAt(i,recycler);\n    }\n  }\n}\n", "public static String initials ( final String str , final String charsetName ) throws UnsupportedEncodingException { return initials ( new String ( str . getBytes ( charsetName ) , STR_ ) ) ; }", "@Override protected void sendData(final OutputStream out) throws IOException {\n  LOG.trace(\"enter sendData(OutputStream)\");\n  out.write(getContent());\n}\n", "public void addChild(TreeNode node){\n  if (children == null)   children=new ArrayList<TreeNode>();\n  children.add(node);\n}\n", "public List<CmsResource> getAllResources() {\n\n        List<CmsResource> result = Lists.newArrayList();\n        result.add(m_primaryResource);\n        for (CmsResource res : getSecondaryResources()) {\n            result.add(res);\n        }\n        return result;\n    }", "public synchronized void go ( long millis ) { gate = new Gate ( ) ; gate . setStopTime ( millis ) ; execute ( BOOL_ ) ; }", "public void addListener ( final IDebugEventListener listener ) { listeners . addListener ( listener ) ; }", "private void drawImage(Graphics g,int yLoc,boolean getScaled){\n  int xLoc=100;\n  int delta=(int)(SCALE_FACTOR * FULL_SIZE);\n  if (getScaled) {\n    for (int scaledSize=FULL_SIZE; scaledSize > 0; scaledSize-=delta) {\n      Image scaledImage=originalImage.getScaledInstance(scaledSize,scaledSize,Image.SCALE_AREA_AVERAGING);\n      g.drawImage(scaledImage,xLoc,yLoc + (FULL_SIZE - scaledSize) / 2,null);\n      xLoc+=scaledSize + 20;\n    }\n  }\n else {\n    for (int scaledSize=FULL_SIZE; scaledSize > 0; scaledSize-=delta) {\n      g.drawImage(originalImage,xLoc,yLoc + (FULL_SIZE - scaledSize) / 2,scaledSize,scaledSize,null);\n      xLoc+=scaledSize + 20;\n    }\n  }\n}\n", "\tpublic MenuItem getMenuItem(String menuItem) {\n\t\tif (!itemCtx.containsKey(menuItem))\n\t\t\tthrow new RuntimeException(\"There is no item named '\" + menuItem\n\t\t\t\t\t+ \"'!\");\n\n\t\treturn (MenuItem) itemCtx.get(menuItem);\n\t}\n", "    public void rotateAboutZ (double rads) {\n\tAffineTransform3D rot = new AffineTransform3D();\n\trot.mTransform[0][0] = Math.cos(rads);\n\trot.mTransform[0][1] = Math.sin(rads);\n\trot.mTransform[1][0] = -Math.sin(rads);\n\trot.mTransform[1][1] = Math.cos(rads);\n\tconcatenate(rot);\n    }\n", "public static void preinstall(File userSettingsDir) throws InstallFailedException {\n  if (!preinstalled.compareAndSet(false,true))   return;\n  try {\n    CommonUtils.setUserSettingsDir(userSettingsDir);\n    LibrarySettings.resetLibraryFoldersIfPortable();\n  }\n catch (  Exception e) {\n    throw new InstallFailedException(\"Settings Directory Failure\",e);\n  }\n}\n", "public URI(String scheme,String schemeSpecificPart,String fragment) throws URISyntaxException {\n  StringBuilder uri=new StringBuilder();\n  if (scheme != null) {\n    uri.append(scheme);\n    uri.append(':');\n  }\n  if (schemeSpecificPart != null) {\n    ALL_LEGAL_ENCODER.appendEncoded(uri,schemeSpecificPart);\n  }\n  if (fragment != null) {\n    uri.append('#');\n    ALL_LEGAL_ENCODER.appendEncoded(uri,fragment);\n  }\n  parseURI(uri.toString(),false);\n}\n", "@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")\n    @JsonProperty(\"updated_at\")\n    public Date getUpdatedAt() {\n        return updatedAt;\n    }", "private CGlobalSettings ( ) { }", "private final int endGameEval(Position pos,int oldScore){\n  int score=oldScore;\n  if (pos.wMtrl + pos.bMtrl > 6 * rV)   return score;\n  final int wMtrlPawns=pos.wMtrlPawns;\n  final int bMtrlPawns=pos.bMtrlPawns;\n  final int wMtrlNoPawns=pos.wMtrl - wMtrlPawns;\n  final int bMtrlNoPawns=pos.bMtrl - bMtrlPawns;\n  boolean handled=false;\n  if ((wMtrlPawns + bMtrlPawns == 0) && (wMtrlNoPawns < rV) && (bMtrlNoPawns < rV)) {\n    return 0;\n  }\n  if (!handled && (pos.wMtrl == qV) && (pos.bMtrl == pV)&& (pos.pieceTypeBB[Piece.WQUEEN] != 0)) {\n    int wk=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.WKING]);\n    int wq=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.WQUEEN]);\n    int bk=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.BKING]);\n    int bp=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.BPAWN]);\n    score=evalKQKP(wk,wq,bk,bp,pos.whiteMove);\n    handled=true;\n  }\n  if (!handled && (pos.wMtrl == rV) && (pos.pieceTypeBB[Piece.WROOK] != 0)) {\n    if (pos.bMtrl == pV) {\n      int bp=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.BPAWN]);\n      score=krkpEval(pos.getKingSq(true),pos.getKingSq(false),bp,pos.whiteMove);\n      handled=true;\n    }\n else     if ((pos.bMtrl == bV) && (pos.pieceTypeBB[Piece.BBISHOP] != 0)) {\n      score/=8;\n      final int kSq=pos.getKingSq(false);\n      final int x=Position.getX(kSq);\n      final int y=Position.getY(kSq);\n      if ((pos.pieceTypeBB[Piece.BBISHOP] & BitBoard.maskDarkSq) != 0) {\n        score+=(7 - distToH1A8[7 - y][7 - x]) * 7;\n      }\n else {\n        score+=(7 - distToH1A8[7 - y][x]) * 7;\n      }\n      handled=true;\n    }\n  }\n  if (!handled && (pos.bMtrl == qV) && (pos.wMtrl == pV)&& (pos.pieceTypeBB[Piece.BQUEEN] != 0)) {\n    int bk=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.BKING]);\n    int bq=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.BQUEEN]);\n    int wk=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.WKING]);\n    int wp=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.WPAWN]);\n    score=-evalKQKP(63 - bk,63 - bq,63 - wk,63 - wp,!pos.whiteMove);\n    handled=true;\n  }\n  if (!handled && (pos.bMtrl == rV) && (pos.pieceTypeBB[Piece.BROOK] != 0)) {\n    if (pos.wMtrl == pV) {\n      int wp=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.WPAWN]);\n      score=-krkpEval(63 - pos.getKingSq(false),63 - pos.getKingSq(true),63 - wp,!pos.whiteMove);\n      handled=true;\n    }\n else     if ((pos.wMtrl == bV) && (pos.pieceTypeBB[Piece.WBISHOP] != 0)) {\n      score/=8;\n      final int kSq=pos.getKingSq(true);\n      final int x=Position.getX(kSq);\n      final int y=Position.getY(kSq);\n      if ((pos.pieceTypeBB[Piece.WBISHOP] & BitBoard.maskDarkSq) != 0) {\n        score-=(7 - distToH1A8[7 - y][7 - x]) * 7;\n      }\n else {\n        score-=(7 - distToH1A8[7 - y][x]) * 7;\n      }\n      handled=true;\n    }\n  }\n  if (!handled && (score > 0)) {\n    if ((wMtrlPawns == 0) && (wMtrlNoPawns <= bMtrlNoPawns + bV)) {\n      if (wMtrlNoPawns < rV) {\n        return -pos.bMtrl / 50;\n      }\n else {\n        score/=8;\n        handled=true;\n      }\n    }\n else     if ((pos.pieceTypeBB[Piece.WROOK] | pos.pieceTypeBB[Piece.WKNIGHT] | pos.pieceTypeBB[Piece.WQUEEN]) == 0) {\n      if (((pos.pieceTypeBB[Piece.WPAWN] & BitBoard.maskBToHFiles) == 0) && ((pos.pieceTypeBB[Piece.WBISHOP] & BitBoard.maskLightSq) == 0) && ((pos.pieceTypeBB[Piece.BKING] & 0x0303000000000000L) != 0)) {\n        return 0;\n      }\n else       if (((pos.pieceTypeBB[Piece.WPAWN] & BitBoard.maskAToGFiles) == 0) && ((pos.pieceTypeBB[Piece.WBISHOP] & BitBoard.maskDarkSq) == 0) && ((pos.pieceTypeBB[Piece.BKING] & 0xC0C0000000000000L) != 0)) {\n        return 0;\n      }\n    }\n  }\n  if (!handled) {\n    if (bMtrlPawns == 0) {\n      if (wMtrlNoPawns - bMtrlNoPawns > bV) {\n        int wKnights=Long.bitCount(pos.pieceTypeBB[Piece.WKNIGHT]);\n        int wBishops=Long.bitCount(pos.pieceTypeBB[Piece.WBISHOP]);\n        if ((wKnights == 2) && (pos.wMtrl == 2 * nV) && (bMtrlNoPawns == 0)) {\n          score/=50;\n        }\n else         if ((wKnights == 1) && (wBishops == 1) && (wMtrlNoPawns == nV + bV)&& (bMtrlNoPawns == 0)) {\n          score/=10;\n          score+=nV + bV + 300;\n          final int kSq=pos.getKingSq(false);\n          final int x=Position.getX(kSq);\n          final int y=Position.getY(kSq);\n          if ((pos.pieceTypeBB[Piece.WBISHOP] & BitBoard.maskDarkSq) != 0) {\n            score+=(7 - distToH1A8[7 - y][7 - x]) * 10;\n          }\n else {\n            score+=(7 - distToH1A8[7 - y][x]) * 10;\n          }\n        }\n else {\n          score+=300;\n        }\n        handled=true;\n      }\n else       if ((wMtrlNoPawns + bMtrlNoPawns == 0) && (wMtrlPawns == pV)) {\n        int wp=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.WPAWN]);\n        score=kpkEval(pos.getKingSq(true),pos.getKingSq(false),wp,pos.whiteMove);\n        handled=true;\n      }\n    }\n  }\n  if (!handled && (score < 0)) {\n    if ((bMtrlPawns == 0) && (bMtrlNoPawns <= wMtrlNoPawns + bV)) {\n      if (bMtrlNoPawns < rV) {\n        return pos.wMtrl / 50;\n      }\n else {\n        score/=8;\n        handled=true;\n      }\n    }\n else     if ((pos.pieceTypeBB[Piece.BROOK] | pos.pieceTypeBB[Piece.BKNIGHT] | pos.pieceTypeBB[Piece.BQUEEN]) == 0) {\n      if (((pos.pieceTypeBB[Piece.BPAWN] & BitBoard.maskBToHFiles) == 0) && ((pos.pieceTypeBB[Piece.BBISHOP] & BitBoard.maskDarkSq) == 0) && ((pos.pieceTypeBB[Piece.WKING] & 0x0303L) != 0)) {\n        return 0;\n      }\n else       if (((pos.pieceTypeBB[Piece.BPAWN] & BitBoard.maskAToGFiles) == 0) && ((pos.pieceTypeBB[Piece.BBISHOP] & BitBoard.maskLightSq) == 0) && ((pos.pieceTypeBB[Piece.WKING] & 0xC0C0L) != 0)) {\n        return 0;\n      }\n    }\n  }\n  if (!handled) {\n    if (wMtrlPawns == 0) {\n      if (bMtrlNoPawns - wMtrlNoPawns > bV) {\n        int bKnights=Long.bitCount(pos.pieceTypeBB[Piece.BKNIGHT]);\n        int bBishops=Long.bitCount(pos.pieceTypeBB[Piece.BBISHOP]);\n        if ((bKnights == 2) && (pos.bMtrl == 2 * nV) && (wMtrlNoPawns == 0)) {\n          score/=50;\n        }\n else         if ((bKnights == 1) && (bBishops == 1) && (bMtrlNoPawns == nV + bV)&& (wMtrlNoPawns == 0)) {\n          score/=10;\n          score-=nV + bV + 300;\n          final int kSq=pos.getKingSq(true);\n          final int x=Position.getX(kSq);\n          final int y=Position.getY(kSq);\n          if ((pos.pieceTypeBB[Piece.BBISHOP] & BitBoard.maskDarkSq) != 0) {\n            score-=(7 - distToH1A8[7 - y][7 - x]) * 10;\n          }\n else {\n            score-=(7 - distToH1A8[7 - y][x]) * 10;\n          }\n        }\n else {\n          score-=300;\n        }\n        handled=true;\n      }\n else       if ((wMtrlNoPawns + bMtrlNoPawns == 0) && (bMtrlPawns == pV)) {\n        int bp=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.BPAWN]);\n        score=-kpkEval(63 - pos.getKingSq(false),63 - pos.getKingSq(true),63 - bp,!pos.whiteMove);\n        handled=true;\n      }\n    }\n  }\n  return score;\n}\n", "public void removeListener(EventDispatcherListener listener){\n  mListeners.remove(listener);\n}\n", "public static < I0 , I1 , I2 , I3 , O > Function < tuple4 < I0 , I1 , I2 , I3 > , O > Function ( Class < ? > theClass , String methodName , Class < ? > parameterType0 , Class < ? > parameterType1 , Class < ? > parameterType2 , Class < ? > parameterType3 ) { return FunctionUtils . Function ( theClass , methodName , parameterType0 , parameterType1 , parameterType2 , parameterType3 ) ; }", "public static RelOptCluster create(RelOptPlanner planner,\n\t\t\tRexBuilder rexBuilder) {\n\t\treturn new RelOptCluster(planner, rexBuilder.getTypeFactory(),\n\t\t\t\trexBuilder, new AtomicInteger(0), new HashMap<String, RelNode>());\n\t}", "private Object evaluateExpressionInternal(String expression, String attrName, PageContext pageContext)\n            throws JspException\n    {\n        if (logger.isDebugEnabled())\n            logger.debug(\"evaluate expression=\\\"\" + expression + \"\\\"\");\n\n        Object result = null;\n        try {\n            VariableResolver vr = ImplicitObjectUtil.getReadVariableResolver(pageContext);\n            result = getExpressionEvaluator().evaluateStrict(expression, vr);\n        }\n        catch (ExpressionEvaluationException ee) {\n            // if there is an expression evaluation error set the error and return null\n            if (logger.isWarnEnabled())\n                logger.warn(Bundle.getString(\"Tags_ExpressionEvaluationFailure\", expression));\n\n            // create the expression info an add it to the error tracking\n            EvalErrorInfo info = new EvalErrorInfo();\n            info.evalExcp = ee;\n            info.expression = expression;\n            info.attr = attrName;\n            info.tagType = _tag.getTagName();\n\n            // report the error\n            _tag.registerTagError(info);\n            return null;\n        }\n        catch (Exception e) {\n            String s = Bundle.getString(\"Tags_ExpressionEvaluationException\", new Object[]{expression, e.toString()});\n            _tag.registerTagError(s, e);\n            return null;\n        }\n\n        if (logger.isDebugEnabled()) logger.debug(\"resulting object: \" + result);\n        return result;\n    }", "public void marshall(BatchUpdatePhoneNumberRequest batchUpdatePhoneNumberRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (batchUpdatePhoneNumberRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(batchUpdatePhoneNumberRequest.getUpdatePhoneNumberRequestItems(), UPDATEPHONENUMBERREQUESTITEMS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "\tprivate double convertSampleIndexToTime(int sample_index) {\n\t\tif (sample_index < 0)\n\t\t\tsample_index = 0;\n\t\telse if (sample_index >= samples.length)\n\t\t\tsample_index = samples.length - 1;\n\t\tfloat time = samples.length / audio_format.getSampleRate();\n\t\treturn (new Float(time)).doubleValue();\n\t}\n", "   private float xPos;\n   public void setXPos(float value) { \n    this.xPos=value;\n   }\n", "private void confirmCommitted ( long seqno , int waitMillis ) throws InterruptedException , ExecutionException { Future < ReplDBMSHeader > committed = pipeline . watchForCommittedSequenceNumber ( seqno , BOOL_ ) ; boolean reached = BOOL_ ; try { committed", "private void createModelToView(int rowCount){\n  if (modelToView == null || modelToView.length != rowCount) {\n    modelToView=new int[rowCount];\n  }\n}", "        private void convertRecords() {\n            for (DataStructureListener listener : listeners) {\n                String strucName = listener.getStructureName();\n                DataStructureSpec spec = getSpec(strucName);\n                for (String name : spec.getTemplateNames()) {\n                    DataTemplate template = getTemplate(name);\n                    storeTemplateRecord(template);\n                }\n                if (spec instanceof GraphSpec) {\n                    GraphSpec graphSpec = (GraphSpec) spec;\n                    for (String name : graphSpec.getEdgeTemplateNames()) {\n                        DataTemplate template = getTemplate(name);\n                        storeTemplateRecord(template);\n                    }\n                }\n            }\n        }\n", "public Referenceable getEntity(String guid) throws AtlasServiceException {\n        JSONObject jsonResponse = callAPIWithBodyAndParams(API.GET_ENTITY, null, guid);\n        try {\n            String entityInstanceDefinition = jsonResponse.getString(AtlasClient.DEFINITION);\n            return InstanceSerialization.fromJsonReferenceable(entityInstanceDefinition, true);\n        } catch (JSONException e) {\n            throw new AtlasServiceException(API.GET_ENTITY, e);\n        }\n    }", "public ParseQuery<T> whereContains(String key,String substring){\n  String regex=Pattern.quote(substring);\n  whereMatches(key,regex);\n  return this;\n}\n", "    protected void uninstallListeners(JComponent component) {\n        component.removeContainerListener(m_containerListener);\n        if (component instanceof JMenuItem)\n            component.removeMouseListener(m_mouseListener);\n        int numberOfComponents=component.getComponentCount();\n        for (int i=0;i<numberOfComponents;i++) {\n            Component child=component.getComponent(i);\n            if (child instanceof JComponent)\n                uninstallListeners((JComponent)child);\n        }\n        if (component instanceof JMenu)\n            uninstallListeners(((JMenu)component).getPopupMenu());\n    }\n", "public void addDirectory( final String path, final Directive directive) throws NoSuchAlgorithmException, IOException {\n\t\tcontents.addDirectory( path, directive);\n\t}", "String register ( String siteId , InetSocketAddress gondolaAddress , URI serviceUri ) throws IOException ;", "protected void onDDPConnect(DDPStateSingleton ddp) {\n        if (!ddp.isLoggedIn()) {\n            // override this to handle first time connection (usually to subscribe)\n            // if we have a login resume token, use it\n            String resumeToken = ddp.getResumeToken();\n            if (resumeToken != null) {\n                ddp.login(resumeToken);\n            }\n        }\n    }", "public boolean checkValidDest(LayoutBlock currentBlock,LayoutBlock nextBlock,LayoutBlock destBlock,LayoutBlock destBlockn1,int pathMethod) throws jmri.JmriException {\n  List<LayoutBlock> destList=new ArrayList<LayoutBlock>();\n  if (destBlockn1 != null) {\n    destList.add(destBlockn1);\n  }\n  try {\n    return checkValidDest(currentBlock,nextBlock,destBlock,destList,pathMethod);\n  }\n catch (  jmri.JmriException e) {\n    throw e;\n  }\n}\n", "public void processIPPortMetrics(Long kbytes,Long iops,StoragePort port,Long sampleTime){\n  StringMap dbMetrics=port.getMetrics();\n  _log.info(String.format(\"IP PortMetrics %s %s kbytes %d iops %d sampleTime %d\",port.getNativeGuid(),portName(port),kbytes,iops,sampleTime));\n  StorageSystem system=_dbClient.queryObject(StorageSystem.class,port.getStorageDevice());\n  Long iopsValue=MetricsKeys.getLong(MetricsKeys.iopsValue,dbMetrics);\n  Long kbytesValue=MetricsKeys.getLong(MetricsKeys.kbytesValue,dbMetrics);\n  Long lastSampleTimeValue=MetricsKeys.getLong(MetricsKeys.lastSampleTime,dbMetrics);\n  Long kbytesDelta=kbytes - kbytesValue;\n  if (kbytesDelta < 0) {\n    _log.info(\"Kbytes rolled over - delta is negative: \" + kbytesDelta);\n  }\n  Long iopsDelta=iops - iopsValue;\n  Long portSpeed=port.getPortSpeed();\n  if (portSpeed == 0) {\n    _log.info(\"Port speed is zero- assuming 1 GBit: \" + port.getNativeGuid());\n    portSpeed=1L;\n  }\n  Long maxKBytesPerSecond=portSpeed * KBYTES_PER_GBIT;\n  Long secondsDelta=(sampleTime - lastSampleTimeValue) / MSEC_PER_SEC;\n  if (secondsDelta < 0) {\n    secondsDelta=-secondsDelta;\n  }\n  if (kbytesDelta >= 0 && secondsDelta > 0 && secondsDelta < SECONDS_PER_YEAR) {\n    computePercentBusyAverages(kbytesDelta / secondsDelta,maxKBytesPerSecond,iopsDelta,dbMetrics,port.getNativeGuid(),portName(port),sampleTime,system);\n    List<StoragePort> portList=new ArrayList<StoragePort>();\n    portList.add(port);\n    updateStaticPortUsage(portList);\n    Double portMetric=computePortMetric(port);\n    MetricsKeys.putDouble(MetricsKeys.portMetric,portMetric,dbMetrics);\n    MetricsKeys.putLong(MetricsKeys.lastProcessingTime,System.currentTimeMillis(),dbMetrics);\n  }\n  MetricsKeys.putLong(MetricsKeys.kbytesValue,kbytes,dbMetrics);\n  MetricsKeys.putLong(MetricsKeys.iopsValue,iops,dbMetrics);\n  MetricsKeys.putLong(MetricsKeys.lastSampleTime,sampleTime,dbMetrics);\n  port.setMetrics(dbMetrics);\n  _dbClient.persistObject(port);\n}\n", "public PartialLoadException ( final CPartialLoadException exception ) { super ( exception ) ; m_module = exception . getModule ( ) . getConfiguration ( ) . getName ( ) ; }", "@Override @SuppressWarnings(\"deprecation\") public void applyShape(Region shape){\n  if (shapeLog.isLoggable(PlatformLogger.Level.FINER)) {\n    shapeLog.finer(\"*** INFO: Setting shape: PEER: \" + this + \"; TARGET: \"+ target+ \"; SHAPE: \"+ shape);\n  }\n  if (sh", "private void removeAccoundDependencies(Sid sid) {\n        logger.debug(\"removing accoutn dependencies\");\n        DaoManager daoManager = (DaoManager) context.getAttribute(DaoManager.class.getName());\n        // remove dependency entities first and dependent entities last. Also, do safer operation first (as a secondary rule)\n        daoManager.getAnnouncementsDao().removeAnnouncements(sid);\n        daoManager.getNotificationsDao().removeNotifications(sid);\n        daoManager.getShortCodesDao().removeShortCodes(sid);\n        daoManager.getOutgoingCallerIdsDao().removeOutgoingCallerIds(sid);\n        daoManager.getTranscriptionsDao().removeTranscriptions(sid);\n        daoManager.getRecordingsDao().removeRecordings(sid);\n        daoManager.getApplicationsDao().removeApplications(sid);\n        removeIncomingPhoneNumbers(sid,daoManager.getIncomingPhoneNumbersDao());\n        daoManager.getClientsDao().removeClients(sid);\n        profileAssociationsDao.deleteProfileAssociationByTargetSid(sid.toString());\n    }", "public static byte[] stripContinueFromRequests(byte[] input){\n  byte[] result=input;\n  while (true) {\n    String initialPart=new String(result,0,Math.min(MAX_HEADER_SIZE,result.length));\n    Matcher m=CONTINUE_PATTERN.matcher(initialPart);\n    if (m.find()) {\n      int stringIndex=m.start();\n      final int stringLength=m.end() - m.start();\n      result=new byte[input.length - stringLength];\n      System.arraycopy(input,0,result,0,stringIndex);\n      System.arraycopy(input,stringIndex + stringLength,result,stringIndex,input.length - (stringIndex + stringLength));\n    }\n else {\n      break;\n    }\n  }\n  return result;\n}\n", "public void setTextureSize(int width, int height) {\r\n\t\tsetPreferredSize(new Dimension(width, height));\r\n\t\tsetSize(new Dimension(width, height));\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t}", "private void interpretMod ( final ReilInstruction instruction ) { final Pair < Boolean , BigInteger > firstValue = loadLongValue ( instruction . getFirstOperand ( ) ) ; final Pair < Boolean , BigInteger > secondValue = loadLongValue ( instruction . getSec", "public ContinousQuery ( String typeName , String sqlExpression , Object ... parameters ) { super ( typeName , sqlExpression , parameters ) ; }", "public HaltReply ( final int packetId , final int tid , final int errorCode ) { super ( packetId , errorCode ) ; activeThreadId = tid ; }", "    public void commandAction(Command c, Displayable d) {\n        if (c == pauseCommand) {\n            stopTimer();\n            parent.setCurrent(\"MainMenu\");\n            timerStatus = 0;\n        }\n    }\n", "private void initGui() {\n        totalThreads.setText(\"100\");\n        initialDelay.setText(\"0\");\n        incUserCount.setText(\"10\");\n        incUserCountBurst.setText(\"0\");\n        incUserPeriod.setText(\"30\");\n        flightTime.setText(\"60\");\n        decUserCount.setText(\"5\");\n        decUserPeriod.setText(\"1\");\n        rampUp.setText(\"5\");\n    }", "  public void setPropertiesAsString(String content) {\n    try {\n      BufferedWriter writer = new BufferedWriter(new FileWriter(blog.getPluginPropertiesFile()));\n      writer.write(content);\n      writer.flush();\n      writer.close();\n\n      loadPropertie", "public final static boolean inside_polygon(float[] xpts,float[] ypts,double ptx,double pty){\n  int j, inside_flag=0;\n  int numverts=xpts.length;\n  if (numverts <= 2)   return false;\n  Point2D vtx0=new Point2D.Float(), vtx1=new Point2D.Float();\n  double dv0;\n  int crossings=0;\n  boolean xflag0=false, yflag0=false, yflag1=false;\n  vtx0.setLocation(xpts[numverts - 1],ypts[numverts - 1]);\n  yflag0=((dv0=vtx0.getY() - pty) >= 0);\n  for (j=0; j < numverts; j++) {\n    if ((j & 0x1) != 0) {\n      vtx0.setLocation(xpts[j],ypts[j]);\n      yflag0=((dv0=vtx0.getY() - pty) >= 0);\n    }\n else {\n      vtx1.setLocation(xpts[j],ypts[j]);\n      yflag1=(vtx1.getY() >= pty);\n    }\n    if (yflag0 != yflag1) {\n      if ((xflag0=(vtx0.getX() >= ptx)) == (vtx1.getX() >= ptx)) {\n        if (xflag0)         crossings++;\n      }\n else {\n        crossings+=((vtx0.getX() - dv0 * (vtx1.getX() - vtx0.getX()) / (vtx1.getY() - vtx0.getY())) >= ptx) ? 1 : 0;\n      }\n    }\n    inside_flag=crossings & 0x01;\n  }\n  return (inside_flag != 0);\n}\n", "protected Converter createConverter ( FaceletContext ctx ) throws FacesException , ELException , FaceletException { return ctx . getFacesContext ( ) . getApplication ( ) . createConverter ( DateTimeConverter . CONVERTER_ID ) ; }", "public java.util.List<ScheduledInstance> getScheduledInstanceSet() {\n        if (scheduledInstanceSet == null) {\n            scheduledInstanceSet = new com.amazonaws.internal.SdkInternalList<ScheduledInstance>();\n        }\n        return scheduledInstanceSet;\n    }", "  protected List createList ( Object[] array ) {\n    return Arrays.asList( array );\n  } // createList( Collection )\n", "public DoubleColumn map(ToDoubleFunction<Double> fun) {\n        DoubleColumn result = DoubleColumn.create(name());\n        for (double t : this) {\n            try {\n                result.append(fun.applyAsDouble(t));\n            } catch (Exception e) {\n                result.appendMissing();\n            }\n        }\n        return result;\n    }", "public void eventPostRollbackAdd(Transaction transaction) throws SevereMessageStoreException \n  {    \n    super.eventPostRollbackAdd(transaction);\n      \n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(tc, \"eventPostRollbackAdd\", transaction);\n      \n    if (_handler != null)\n    {      \n      _handler.removeTopic(_topic);\n        \n        // If this was the last topic reference, then delete the PubSub output \n        // handler.\n        if (_handler.getTopics()== null || _handler.getTopics().length == 0)\n        {\n          if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n            SibTr.debug(tc, \"Deleting PubSubOutputHandler \" + _handler);\n  \n          _destination.deletePubSubOutputHandler(_neighbour.getUUID());\n        }\n\n      }\n      else if (_neighbours!=null)\n        _neighbours.removeTopicSpaceReference(_neighbour.getUUID(), \n                                              this,\n                                              _topicSpaceUuid,\n                                              _topic);\n      \n      // Remove the subscription from the list.\n      _neighbour.removeSubscription(_topicSpaceUuid, _topic);\n    \n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.exit(tc, \"eventPostRollbackAdd\");\n  }", "public ResourcesPoet addIntegerArrayStrings(String name,@NotNull List<String> values){\n  Element element=document.createElement(\"integer-array\");\n  element.setAttribute(\"name\",name);\n  for (  String value : values) {\n    Element valueElement=document.createElement(\"item\");\n    valueElement.appendChild(document.createTextNode(value));\n    element.appendChild(valueElement);\n  }\n  resourceElement.appendChild(element);\n  return this;\n}\n", "private NaviErrorDialog ( final Window owner , final String shortMessage , final String description , final Throwable exception ) { super ( owner , shortMessage , description , exception ) ; }", "void writeSetting ( String key , String value ) throws CouldntSaveDataException ;", "public String parseUserSelectedModuleName ( Element element ) { return element . getText ( ) ; }", "@Override\n    public void onFailure(Throwable t) {\n        if (cancelled) {\n            return;\n        }\n\n        t = adjustThrowable(t);\n        if (handleInternalException(t)) {\n            next();\n        } else {\n            cancel();\n        }\n    }", "  public void clearTimeOut () {\n    timeOut = false;\n  }\n", "private String readSentenceHeader ( int aField , boolean aPeek ) throws IOException { if ( aPeek ) { br . mark ( NUM_ ) ; } String line = br . readLine ( ) ; while ( line != null ) { if ( ! line . startsWith ( STR_ ) ) { String [ ] parts = line . split ( STR_ ) ; if ( aPeek ) { br . reset ( ) ; } return parts [ aField ] ; } line = br . readLine ( ) ; } return null ; }", "public boolean isForceUnderTransaction ( ) { return BOOL_ ; }", "private static String[] dependencyEnumSetToStringArray(EnumSet<DependencyType> dependencySet){\n  String[] stringDependencyTypes=null;\n  if (dependencySet != null && dependencySet.size() > 0) {\n    int n=dependencySet.size();\n    int i=0;\n    stringDepende", "void removeInstruction ( INaviInstruction instruction ) ;", "static public ResourceState replicatorStateToResourceState(String state){\n  if (state.startsWith(REPLICATOR_STATE_ONLINE))   return ResourceState.ONLINE;\n else   if (state.startsWith(REPLICATOR_STATE_STOPPED)) {\n    return ResourceState.STOPPED;\n  }\n else   if (state.startsWith(REPLICATOR_STATE_OFFLINE)) {\n    if (state.equals(REPLICATOR_STATE_ERROR)) {\n      return ResourceState.SUSPECT;\n    }\n else     if (state.equals(REPLICATOR_STATE_BACKUP)) {\n      return ResourceState.BACKUP;\n    }\n else     if (state.equals(REPLICATOR_STATE_RESTORING)) {\n      return ResourceState.RESTORING;\n    }\n else {\n      return ResourceState.OFFLINE;\n    }\n  }\n else   if (state.contains(REPLICATOR_STATE_SYNCHRONIZING))   return ResourceState.SYNCHRONIZING;\n else   return ResourceState.UNKNOWN;\n}\n", "public byte[] evaluateResponse(byte[] responseData) throws SaslException {\n  if (completed) {\n    throw new IllegalStateException(\"CRAM-MD5 authentication already completed\");\n  }\n  if (aborted) {\n    throw new IllegalStateException(\"CRAM-MD5 authentication previously aborted due to error\");\n  }\n  try {\n    if (challengeData == null) {\n      if (responseData.length != 0) {\n        aborted=true;\n        throw new SaslException(\"CRAM-MD5 does not expect any initial response\");\n      }\n      Random random=new Random();\n      long rand=random.nextLong();\n      long timestamp=System.currentTimeMillis();\n      StringBuffer buf=new StringBuffer();\n      buf.append('<');\n      buf.append(rand);\n      buf.append('.');\n      buf.append(timestamp);\n      buf.append('@');\n      buf.append(fqdn);\n      buf.append('>');\n      String challengeStr=buf.toString();\n      logger.log(Level.FINE,\"CRAMSRV01:Generated challenge: {0}\",challengeStr);\n      challengeData=challengeStr.getBytes(\"UTF8\");\n      return challengeData.clone();\n    }\n else {\n      if (logger.isLoggable(Level.FINE)) {\n        logger.log(Level.FINE,\"CRAMSRV02:Received response: {0}\",new String(responseData,\"UTF8\"));\n      }\n      int ulen=0;\n      for (int i=0; i < responseData.length; i++) {\n        if (responseData[i] == ' ') {\n          ulen=i;\n          break;\n        }\n      }\n      if (ulen == 0) {\n        aborted=true;\n        throw new SaslException(\"CRAM-MD5: Invalid response; space missing\");\n      }\n      String username=new String(responseData,0,ulen,\"UTF8\");\n      logger.log(Level.FINE,\"CRAMSRV03:Extracted username: {0}\",username);\n      NameCallback ncb=new NameCallback(\"CRAM-MD5 authentication ID: \",username);\n      PasswordCallback pcb=new PasswordCallback(\"CRAM-MD5 password: \",false);\n      cbh.handle(new Callback[]{ncb,pcb});\n      char pwChars[]=pcb.getPassword();\n      if (pwChars == null || pwChars.length == 0) {\n        aborted=true;\n        throw new SaslException(\"CRAM-MD5: username not found: \" + username);\n      }\n      pcb.clearPassword();\n      String pwStr=new String(pwChars);\n      for (int i=0; i < pwChars.length; i++) {\n        pwChars[i]=0;\n      }\n      pw=pwStr.getBytes(\"UTF8\");\n      String digest=HMAC_MD5(pw,challengeData);\n      logger.log(Level.FINE,\"CRAMSRV04:Expecting digest: {0}\",digest);\n      clearPassword();\n      byte[] expectedDigest=digest.getBytes(\"UTF8\");\n      int digestLen=responseData.length - ulen - 1;\n      if (expectedDigest.length != digestLen) {\n        aborted=true;\n        throw new SaslException(\"Invalid response\");\n      }\n      int j=0;\n      for (int i=ulen + 1; i < responseData.length; i++) {\n        if (expectedDigest[j++] != responseData[i]) {\n          aborted=true;\n          throw new SaslException(\"Invalid response\");\n        }\n      }\n      AuthorizeCallback acb=new AuthorizeCallback(username,username);\n      cbh.handle(new Callback[]{acb});\n      if (acb.isAuthorized()) {\n        authzid=acb.getAuthorizedID();\n      }\n else {\n        aborted=true;\n        throw new SaslException(\"CRAM-MD5: user not authorized: \" + username);\n      }\n      logger.log(Level.FINE,\"CRAMSRV05:Authorization id: {0}\",authzid);\n      completed=true;\n      return null;\n    }\n  }\n catch (  UnsupportedEncodingException e) {\n    aborted=true;\n    throw new SaslException(\"UTF8 not available on platform\",e);\n  }\ncatch (  NoSuchAlgorithmException e) {\n    aborted=true;\n    throw new SaslException(\"MD5 algorithm not available on platform\",e);\n  }\ncatch (  UnsupportedCallbackException e) {\n    aborted=true;\n    throw new SaslException(\"CRAM-MD5 authentication failed\",e);\n  }\ncatch (  SaslException e) {\n    throw e;\n  }\ncatch (  IOException e) {\n    aborted=true;\n    throw new SaslException(\"CRAM-MD5 authentication failed\",e);\n  }\n}\n", "    public void addChild(Node node) {\n        ParentNode parent = node.getParent();\n        if (parent != null) {\n            parent.removeChild(node);\n        }\n        children.add(node);\n        node.setParent(this);\n    }\n", "public static long readLongSigned(ByteBuffer byteBuffer){\n  byte v=byteBuffer.get();\n  long accumulator=(~((long)(((v >> 6) & 1) - 1))) & 0xFFFFFFFFFFFFFF80l;\n  return (v < 0) ? accumulator | (v & 0x7F) : readLongSignedTail((accumulator | v) << 7,byteBuffer);\n}\n", "private String isVolumeIngestable(CIMInstance volumeInstance,String isBound,String usageProp,String unManagedVolumeNativeGuid,Map<String,Set<String>> duplicateSyncAspectElementNameMap){\n  String usage=getCIMPropertyValue(volumeInstance,usageProp);\n  if (!Boolean.valueOf(isBound)) {\n    return \"The volume is not ingestable because it is not bound and the controller only supports bound volumes\";\n  }\n  if (!(TWO.equalsIgnoreCase(usage) || NINE.equalsIgnoreCase(usage) || SEVEN.equalsIgnoreCase(usage)|| ELEVEN.equalsIgnoreCase(usage)|| USAGE_LOCAL_REPLICA_TARGET.equalsIgnoreCase(usage)|| USAGE_DELTA_REPLICA_TARGET.equalsIgnoreCase(usage)|| USGAE_LOCAL_REPLICA_SOURCE.equalsIgnoreCase(usage)|| USAGE_LOCAL_REPLICA_SOURCE_OR_TARGET.equalsIgnoreCase(usage))) {\n    return \"The volume is not ingestable because it has a usage that is not supported by the controller\";\n  }\n  boolean hasUnsupportedSnapshotSessions=false;\n  if (duplicateSyncAspectElementNameMap.containsKey(unManagedVolumeNativeGuid)) {\n    Set<String> duplicateSyncAspectElementNames=duplicateSyncAspectElementNameMap.get(unManagedVolumeNativeGuid);\n    if ((duplicateSyncAspectElementNames != null) && (!duplicateSyncAspectElementNames.isEmpty())) {\n      hasUnsupportedSnapshotSessions=true;\n    }\n  }\n  if (hasUnsupportedSnapshotSessions) {\n    return \"The volume is not ingestable because it has multiple array snapshots with the same name, \" + \"which is not supported by the controller. The storage system may use generation numbers \" + \"to differentiate these snapshots, and the controller does not currently support generation numbers\";\n  }\n  return null;\n}\n", "public static void observeTeleop ( ) { FRCNetworkCommunicationsLibrary . FRCNetworkCommunicationObserveUserProgramTeleop ( ) ; }", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public boolean isInitValues ( ) { return isInitValue ; }", "public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ) ; }", "    public boolean understandsProperty(String propertyToTest) {\n        if (properties == null) {\n            return false;\n        }\n\n        return properties.get(propertyToTest) != null;\n    }\n", "public Blade routeConf ( String basePackage , String conf ) { try { Assert . notBlank ( basePackage ) ; Assert . notBlank ( conf ) ; InputStream ins = Blade . class . getResourceAsStream ( STR_ + conf ) ; ClassPathRouteLoader routesLoader = new ClassPathRouteLoader ( ins ) ; routesLoader . setBasePackage ( basePackage ) ; List < Route > routes = routesLoader . load ( ) ; routers . addRoutes ( routes ) ; } catch ( RouteException e ) { e . printStackTrace ( ) ; } catch ( ParseException e ) { e . printStackTrace ( ) ; } return this ; }", "    public void deleteSudoku(long sudokuID) {\n\t\tSQLiteDatabase db = mOpenHelper.getWritableDatabase();\n        db.delete(SUDOKU_TABLE_NAME, SudokuColumns._ID + \"=\" + sudokuID, null);\n    }\n", "public static BinaryExpression cmpX(Expression lhv, Expression rhv) {\n        return new BinaryExpression(lhv, CMP, rhv);\n    }", "public UnsupportedConstraintException ( String s , Throwable cause ) { super ( s ) ; initCause ( cause ) ; }", "public void testRenameTable ( ) throws IOException , ReplicatorException , InterruptedException { PrintWriter out = new PrintWriter ( new FileWriter ( definitionsFile ) ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . p", "public void prepareFilter(float transition){\n  try {\n    method.invoke(filter,new Object[]{new Float(transition)});\n  }\n catch (  Exception e) {\n    throw new IllegalArgumentException(\"Error setting value for property: \" + property);\n  }\n}\n", "public static < Fact , AnalysisType extends BasicAbstractDataflowAnalysis < Fact > > void printCFG ( Dataflow < Fact , AnalysisType > dataflow , PrintStream out ) { DataflowCFGPrinter < Fact , AnalysisType > printer = new DataflowCFGPrinter < Fact , AnalysisType > ( dataflow ) ; printer . print ( out ) ; }", "public abstract byte [ ] asBytes ( ) ;", "public Object2DoubleOpenHashMap<int[]> supportMap(int supportThreshold){\n  List<ItemSet> itemSets=learn();\n  Object2DoubleOpenHashMap<int[]> supportMap=new Object2DoubleOpenHashMap<>(itemSets.size());\n  for (  ItemSet itemSet : itemSets) {\n    if (itemSet.support >= supportThreshold) {\n      supportMap.put(itemSet.items,itemSet.support);\n    }\n  }\n  return supportMap;\n}\n", "    public boolean isEqual(DateItem other) {\n      if (this.mYear == other.mYear && this.mMonth == other.mMonth\n          && this.mDay == other.mDay && this.mHour == other.mHour\n          && this.mMinute == other.mMinute && this.mSecond == other.mSecond\n          && this.mMillis == other.mMillis)\n        return true;\n      return false;\n    }\n", "V pickUpObjectFromPool ( T preferredData , T prepareData ) { V v = null ; boolean isNewObject = BOOL_ ; if ( mPool . isEmpty ( ) ) { v = mObjectCreator . createObject ( mContext ) ; isNewObject = BOOL_ ; } else { Iterator < V > iter = mPool . iterator ( ) ; while ( iter . hasNext ( ) ) { V vpv = iter . next ( ) ; if ( mObjectCreator . hasPreferredData ( vpv , preferredData ) ) { v = vpv ; iter . remove ( ) ; break ; } } if ( v == null ) { v = mPool . pop ( ) ; } } mObjectCreator . prepareObjectToLeavePool ( v , prepareData , isNewObject ) ; return v ; }", "public SyncPatternMatcher ( long sync , int softModeErrorThreshold ) { this ( sync ) ; mSoftModeErrorThreshold = softModeErrorThreshold ; }", "    private String getUnqualifiedClassName(Object bean) throws Exception {\n        String uqcn = bean.getClass().getName().substring(\n            bean.getClass().getName().lastIndexOf(\".\") + 1);\n        return uqcn;\n    }\n", "    public String getSQLKeywords() throws SQLException {\n\n        return \"BEFORE,BIGINT,BINARY,CACHED,DATETIME,\"\n               + \"LIMIT,LONGVARBINARY,LONGVARCHAR,OBJECT,OTHER,SAVEPOINT,\"\n               + \"TEMP,TEXT,TOP,TRIGGER,TINYINT,VARBINARY,VARCHAR_IGNORECASE\";\n    }\n", "public synchronized Headers trailers() throws IOException {\n    if (errorCode != null) {\n      throw errorException != null ? errorException : new StreamResetException(errorCode);\n    }\n    if (!source.finished || !source.receiveBuffer.exhausted() || !source.readBuffer.exhausted()) {\n      throw new IllegalStateException(\"too early; can't read the trailers yet\");\n    }\n    return source.trailers != null ? source.trailers : Util.EMPTY_HEADERS;\n  }", "public TraitTypeCheckingExtension(final StaticTypeCheckingVisitor typeCheckingVisitor){\n  super(typeCheckingVisitor);\n}", "public String input(String message) throws IOException, UserCancelExcption {\n\t\tMap<String, Object> m = JSONProtocol.cmd(\"input\");\n\t\tm.put(\"text\", message);\n\t\tpipe.send(m);\n\t\tMap<String, Object> r = pipe.recv();\n\t\tif (!JSONProtocol.check(m, r) || !r.containsKey(\"value\")) {\n\t\t\tthrow new IOException(\"No value\");\n\t\t}\n\t\treturn (String) r.get(\"value\");\n\t}", "private void insert(String accountName,String accountType){\n  mCache.add(generateKey(accountName,accountType));\n}\n", "  public void setExperimentType(GwoExperimentType experimentType) {\n    if (experimentType == null) {\n      removeExtension(GwoExperimentType.class);\n    } else {\n      setExtension(experimentType);\n    }\n  }\n", "public static BaseField cloneField(BaseField fieldToClone) throws CloneNotSupportedException\n    {\n        BaseField field = null;\n        String strClassName = fieldToClone.getClass().getName();\n        field = (BaseField)ClassServiceUtility.getClassService().makeObjectFromClassName(strClassName);\n        if (field != null)\n        {\n            field.init(null, fieldToClone.getFieldName(), fieldToClone.getMaxLength(), fieldToClone.getFieldDesc(), fieldToClone.getDefault());\n            field.setRecord(fieldToClone.getRecord());     // Set table without adding to table field list\n        }\n        return field;\n    }", "\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{ validateFields(); }\n", "public synchronized String toString ( ) { return this . getClass ( ) . toString ( ) + STR_ + seqno + STR_ ; }", "private void fromExpression(PatternDescrBuilder<?> pattern) throws RecognitionException {\n        String expr = conditionalOrExpression();\n        if (state.failed)\n            return;\n\n        if (state.backtracking == 0) {\n            pattern.from().expression(expr);\n            if (input.LA(1) != DRL6Lexer.EOF) {\n                helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);\n            }\n        }\n    }", "    private Datagram createDatagramToReceive() {\n        receivedDatagram = null;\n        numBytesToSend = strTestMsg.length();\n\n        try {\n            receivedDatagram = server.newDatagram(numBytesToSend);\n        } catch (IOException ioe) {\n            cleanUp();\n            System.out.println(\"Cannot create Datagram. IOException: \" + ioe);\n        }\n        \n        return receivedDatagram;\n    }\n", "public void setBaselineFinish(int baselineNumber, Date value)\n   {\n      set(selectField(AssignmentFieldLists.BASELINE_FINISHES, baselineNumber), value);\n   }", "private AmazonServiceException createException(String errorCode, JsonContent jsonContent) {\n        AmazonServiceException ase = unmarshallException(errorCode, jsonContent);\n        if (ase == null) {\n            ase = new AmazonServiceException(\n                    \"Unable to unmarshall exception response with the unmarshallers provided\");\n        }\n        return ase;\n    }", "public List<ChallengeHandler> lookup(String location){\n  List<ChallengeHandler> result=Collections.emptyList();\n  if (location != null) {\n    Node<ChallengeHandler,UriElement> resultNode=findBestMatchingNode(location);\n    if (resultNode != null) {\n      return resultNode.getValues();\n    }\n  }\n  return result;\n}\n", "@POST\n    public final Response insert(@NotNull @Valid final MODEL model) throws Exception {\n        return super.insert(model);\n    }", "public Object parse ( Map params , URL url ) { return parseURL ( url , params ) ; }", "private double [ ] [ ] cloneValues ( ) { double [ ] [ ] newDoubles = new double [ values . length ] [ ] ; for ( int i = NUM_ ; i < values . length ; i ++ ) newDoubles [ i ] = values [ i ] . clone ( ) ; return newDoubles ; }", "ChangeRequestAttribute ( ) { super ( CHANGE_REQUEST ) ; }", "public static int run(String[] args, PrintWriter out) {\n        JavahTask t = new JavahTask();\n        t.setLog(out);\n        return t.run(args);\n    }", "public static String lookup(String colorName){\n  return LOOKUP_TABLE.get(colorName.toUpperCase());\n}\n", "    private Object readResolve() throws ObjectStreamException {\n\n      // Check for the dummy environment.\n      if (null == id) {\n        return DUMMY;\n      }\n\n      // Resolve to actual environment.\n      Environment env = (Environment)((Map)serializationSet.get()).get(id);\n\n      if (null == env) {\n        // Signal an inconsistent check-point.\n        throw new CheckPointException(\"Undeclared environment in check-point\" +\n                                      \" (\" + id + \")\");\n      }\n\n      return env;\n    }\n", "public double norm2(){\n  return Math.sqrt(sum2());\n}\n", "public boolean snapshotDisableImageAccessSingleStep(URI rpSystemId,List<URI> snapshots,boolean isRollback,String token) throws ControllerException {\n  try {\n    WorkflowStepCompleter.stepExecuting(token);\n    boolean setSnapshotSyncActive=true;\n    disableImageForSnapshots(rpSystemId,snapshots,isRollback,setSnapshotSyncActive,token);\n    WorkflowStepCompleter.stepSucceded(token);\n  }\n catch (  Exception e) {\n    _log.error(String.format(\"snapshotDisableImageAccessSingleStep Failed - Protection System: %s\",String.valueOf(rpSystemId)));\n    return stepFailed(token,e,\"snapshotDisableImageAccessSingleStep\");\n  }\n  return true;\n}\n", "static public <E> E create(String xml, Class<E> type) throws XmlBeanException, IOException, SAXException, InstantiationException, IllegalAccessException {\n        Object obj = type.newInstance();\n        configure(xml, obj);\n        return (E)obj;\n    }", "public void feedTheWholeTagStructureToGraph(org.jboss.windup.config.tags.TagService tagLoaderService)\n    {\n\n        Set<Tag> visited = new HashSet<>();\n\n        for (Tag tag : tagLoaderService.getRootTags())\n        {\n            // Sanity check\n            TagModel existing = this.getUniqueByProperty(TagModel.PROP_NAME, tag.getName());\n            if (null != existing)\n            {\n                LOG.warning(\"TagModel already exists in graph, skipping root Tag: \" + tag.getName());\n                return;\n            }\n\n            int level = 0;\n            this.feedTagStructureToGraph(tag, visited, level);\n        }\n    }", "@Override\n    public Object getPropertyValue(PropertyInfo propInfo) throws Exception {\n        Object obj = registeredProperties == null ? null : registeredProperties.get(propInfo.getId());\n\n        if (obj instanceof PropertyProxy) {\n            Object value = ((PropertyProxy) obj).getValue();\n            return value instanceof String ? propInfo.getPropertyType().getSerializer().deserialize((String) value) : value;\n        } else {\n            return obj == null ? null : propInfo.getPropertyValue(obj, obj == this);\n        }\n    }", "protected void storeImageReplacedElement(Element e,ReplacedElement cc,String uri,final int cssWidth,final int cssHeight){\n  if (imageComponents == null) {\n    imageComponents=new HashMap();\n  }\n  CacheKey key=new CacheKey(e,uri,cssWidth,cssHeight);\n  imageComponents.put(key,cc);\n}\n", "public static Solenoid solenoid ( int solenoidChannel ) { return solenoid ( NUM_ , solenoidChannel ) ; }", "\tpublic List getPropertyDescriptors(Object object) {\n\t\tif (itemPropertyDescriptors == null) {\n\t\t\tsuper.getPropertyDescriptors(object);\n\n\t\t\taddPredicatePropertyDescriptor(object);\n\t\t\taddOrderPropertyDescriptor(object);\n\t\t}\n\t\treturn itemPropertyDescriptors;\n\t}\n", "protected static String doubleToString(double num){\n  long whole=(long)num;\n  if (whole == Long.MAX_VALUE || whole == Long.MIN_VALUE) {\n    return Double.toString(whole);\n  }\n  double fract=Math.abs(num - whole);\n  String res=Long.toString(whole);\n  if (fract != 0.0) {\n    String f2s=Double.toString(fract + 1.0);\n    res+=f2s.substring(1);\n  }\n  return res;\n}\n", "public static String getIDL(final Class<?> cls, final Set<Class<?>> cachedTypes, \n            final Set<Class<?>> cachedEnumTypes, boolean ignoreJava) {\n        Set<Class<?>> types = cachedTypes;\n        if (types == null) {\n            types = new HashSet<Class<?>>();\n        }\n\n        Set<Class<?>> enumTypes = cachedEnumTypes;\n        if (enumTypes == null) {\n            enumTypes = new HashSet<Class<?>>();\n        }\n        \n        if (types.contains(cls)) {\n            return null;\n        }\n\n        StringBuilder code = new StringBuilder();\n        \n        if (!ignoreJava) {\n            // define package\n            code.append(\"package \").append(cls.getPackage().getName()).append(\";\\n\");\n            code.append(\"option java_outer_classname = \\\"\").append(cls.getSimpleName()).append(\"$$ByJProtobuf\\\";\\n\");\n        }\n\n        // define outer name class\n\n        types.add(cls);\n\n        generateIDL(code, cls, types, enumTypes);\n\n        return code.toString();\n    }", "\tpublic boolean isModifiedBorderColor() {\n\t\treturn modifiedBorderColor;\n\t}\n", "private LinkedList reduceBuffer(int newSize){\n  LinkedList newBuffer=new LinkedList();\n  List original=bufferHolder.getOrderedCollection();\n  Collections.reverse(original);\n  Iterator iter=original.iterator();\n  int i=0;\n  while (iter.hasNext() && i < newSize) {\n    newBuffer.add(iter.next());\n    i++;\n  }\n  return newBuffer;\n}\n", "public String serializeDataActionList(List<DataAction> list) {\n        ObjectMapper om = getObjectMapper();\n        try {\n            return om.writeValueAsString(new ListWrappers.DataActionList(list));\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }", "public static void closeQuietly(final Connection connection)\n    {\n        if (connection != null) {\n            try {\n                connection.close();\n            }\n            catch (JMSException je) {\n                if (je.getCause() instanceof Int", "\tpublic ClientConnectionPool getActivePool(Cimom cimom) {\n\n\t\tClientConnectionPool pool = selectedPools.get(cimom);\n\n\t\tif (pool == null)\n\t\t\tselectedPools.put(cimom, pool = defaultPool);\n\n\t\treturn pool;\n\t}\n", "default TypeParameterDeclaration asTypeParameter ( ) { throw new UnsupportedOperationException ( String . format ( STR_ , this ) ) ; }", "public boolean addWithCheck(DatenFilmlisteUrl filmliste) {\n        for (DatenFilmlisteUrl datenUrlFilmliste : this) {\n            if (datenUrlFilmliste.arr[DatenFilmlisteUrl.FILM_UPDATE_SERVER_URL_NR].equals(filmliste.arr[DatenFilmlisteUrl.FILM_UPDATE_SERVER_URL_NR])) {\n                return false;\n            }\n        }\n        return add(filmliste);\n    }", "private CGlobalSettings ( ) { }", "    public Expression order() {\n\treturn this;\n    }\n", "private String getWindowWidth() {\n  int width = Val.chkInt(\n      this.getMapViewerConfig().getParameters().get(\"width\"), 500);\n  return String.valueOf(width);\n}\n", "protected void drawOval(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){\n  if (fillColor != null || fillPaint != null) {\n    if (shadow) {\n      g.setColor(mxConstants.SHADOW_COLOR);\n      g.fillOval(x + mxConstants.SHADOW_OFFSETX,y + mxConstants.SHADOW_OFFSETY,w,h);\n    }\n    if (fillPaint != null) {\n      g.setPaint(fillPaint);\n    }\n else {\n      g.setColor(fillColor);\n    }\n    g.fillOval(x,y,w,h);\n  }\n  if (penColor != null) {\n    g.setColor(penColor);\n    g.drawOval(x,y,w,h);\n  }\n}\n", "void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {\n        // when deserializing, parse the json string\n        try {\n            int length = in.readInt();\n            byte[] buf = new byte[length];\n            in.readFully(buf);\n            if (parser == null) {\n                // create it lazily, static so won't increase object size\n                parser = new JsonParser();\n            }\n            JsonElement o = parser.parse(new String(buf, StandardCharsets.UTF_8));\n            Field f = getClass().getDeclaredField(\"intMap\");\n            f.setAccessible(true);\n            f.set(this, new SimpleIntKeyMap<>());\n\n            for (Entry<String, JsonElement> e : o.asObject().entrySet()) {\n                put(e.getKey(), e.getValue());\n            }\n        } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) {\n            throw new IllegalStateException(e);\n        }\n    }", "    public XalDocument newDocument(java.net.URL url) {\n        return new TemplateDocument(url);\n    }\n", "public int total(){\n  return counter.intValue();\n}\n", "    public void setUserConfig(File userConfigFile) throws SAXException, IOException {\n        try {\n            DefaultConfigurationBuilder cfgBuilder = new DefaultConfigurationBuilder();\n            setUserConfig(cfgBuilder.buildFromFile(userConfigFile));\n        } catch (ConfigurationException e) {\n            throw new FOPException(e);\n        }\n    }\n", "protected int checkGlyphRange ( int glyphId ) { return IndexSubTable . checkGlyphRange ( glyphId , this . firstGlyphIndex ( ) , this . lastGlyphIndex ( ) ) ; }", "private void convertPassword(Properties p){\n  String pw=p.getProperty(KEYSTOREPWD);\n  if (pw != null && !pw.startsWith(xorTag)) {\n    String epw=obfuscate(pw.toCharArray());\n    p.put(KEYSTOREPWD,epw);\n  }\n  pw=p.getProperty(TRUSTSTOREPWD);\n  if (pw != null && !pw.startsWith(xorTag)) {\n    String epw=obfuscate(pw.toCharArray());\n    p.put(TRUSTSTOREPWD,epw);\n  }\n}\n", "public static RoboconfCompletionProposal basicProposal( String s, String lastWord, boolean trim ) {\n\t\treturn new RoboconfCompletionProposal( s, trim ? s.trim() : s, null, lastWord.length());\n\t}", "public void marshall(ForgetDeviceRequest forgetDeviceRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (forgetDeviceRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(forgetDeviceRequest.getAccessToken(), ACCESSTOKEN_BINDING);\n            protocolMarshaller.marshall(forgetDeviceRequest.getDeviceKey(), DEVICEKEY_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public static float min(final float a, final float b) {\n        if (a > b) {\n            return b;\n        }\n        if (a < b) {\n            return a;\n        }\n        /* if either arg is NaN, return NaN */\n        if (a != b) {\n            return Float.NaN;\n        }\n        /* min(+0.0,-0.0) == -0.0 */\n        /* 0x80000000 == Float.floatToRawIntBits(-0.0d) */\n        int bits = Float.floatToRawIntBits(a);\n        if (bits == 0x80000000) {\n            return a;\n        }\n        return b;\n    }", "public TolerantFloatComparison isNotWithin(final float tolerance) {\n    return new TolerantFloatComparison() {\n      @Override\n      public void of(float expected) {\n        Float actual = actual();\n        checkNotNull(\n            actual, \"actual value cannot be null. tolerance=%s expected=%s\", tolerance, expected);\n        checkTolerance(tolerance);\n\n        if (!notEqualWithinTolerance(actual, expected, tolerance)) {\n          failWithoutActual(\n              fact(\"expected not to be\", floatToString(expected)),\n              butWas(),\n              fact(\"within tolerance\", floatToString(tolerance)));\n        }\n      }\n    };\n  }", "     public void removeAllScreenObjects() {\n         players.clear();\n     }\n", "public WaitForAnyListener ( int numberOfResults , AsyncFutureListener < T > listener ) { this . numberOfResults = numberOfResults ; this . listener = listener ; }", "protected boolean isTextFormat(long format){\n  return textNatives.contains(Long.valueOf(format));\n}\n", "void readLOG() throws IOException {\n  while (true) {\n    String S=isr.readLine();\n    if (S == null)     return;\n    if (S.startsWith(\"EOL\"))     return;\n  }\n}\n", "public synchronized void activateCheckOid(){\n  checkOid=true;\n}\n", "    public boolean match(Term t){\n        int c0=renameVariables(0);\n        t.renameVariables(c0);\n        boolean ok=unify(t,0);\n        restoreVariables();\n        t.restoreVariables();\n        return ok;\n    }\n", "public String toString ( ) { if ( ! parsed ) return STR_ ; if ( ! preRelease ) return String . format ( STR_ , major , minor , build ) ; else return String . format ( STR_ , major , minor , build , prebuild , prereleaseType ) ; }", "public static boolean writeKMLCoordinates(Writer writer,ArrayList<GeoPoint> coordinates){\n  try {\n    writer.write(\"<coordinates>\");\n    for (    GeoPoint coord : coordinates) {\n      writer.write(coord.toInvertedDoubleString());\n      writer.write(' ');\n    }\n    writer.write(\"</coordinates>\\n\");\n    return true;\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n    return false;\n  }\n}\n", "    public void setLowValue(double lowValue) {\n        double high;\n        if ((lowValue + model.getExtentDouble()) > getMaximum()) {\n            high = getMaximum();\n        }\n        else {\n            high = getHighValue();\n        }\n        double extent = high - lowValue;\n\n        model.setRangeProperties(\n                lowValue,\n                extent,\n                getMinimum(),\n                getMaximum(),\n                true);\n    }\n", "\tpublic boolean isSeen() {\n\n\t\tif ((flags & Message.SEEN) == Message.SEEN)\n\t\t\treturn true;\n\n\t\treturn false;\n\t}\n", "public JKTableColumnValue ( final JKTableColumn tableColumn ) { this . tableColumn = tableColumn ; }", "public Email to(EmailAddress... to) {\n\t\tfor (EmailAddress t : to) {\n\t\t\trecipient(t, RecipientType.TO);\n\t\t}\n\t\treturn this;\n\t}", "@Override\n   @SuppressWarnings(\"unchecked\")\n   public <E, T extends Resource<E>> T getChildOfType(final Class<T> type, final String name) throws ResourceException\n   {\n      T result;\n      Resource<?> child = getChild(name);\n      if (type.isAssignableFrom(child.getClass()))\n      {\n         result = (T) child;\n      }\n      else if (child.exists())\n      {\n         throw new ResourceException(\"Requested resource [\" + name + \"] was not of type [\" + type.getName()\n                  + \"], but was instead [\" + child.getClass().getName() + \"]\");\n      }\n      else\n      {\n         E underlyingResource = (E) child.getUnderlyingResourceObject();\n         result = getResourceFactory().create(type, underlyingResource);\n      }\n      return result;\n   }", "public Node node(JcNode jcNode) {\r\n\t\tPatternExpression px = (PatternExpression)this.astNode;\r\n\t\tPatternNode pn = new PatternNode(jcNode);\r\n\t\tpx.addElement(pn);\r\n\t\tNode ret = new Node(px);\r\n\t\treturn ret;\r\n\t}", "public static TypeReference newTypeParameterReference ( int sort , int paramIndex ) { return new TypeReference ( ( sort << NUM_ ) | ( paramIndex << NUM_ ) ) ; }", "private JPanel createMainPanel(){\n  JPanel panel=new JPanel();\n  panel.setLayout(new GridBagLayout());\n  GridBagConstraints c=new GridBagConstraints();\n  c.anchor=GridBagConstraints.WEST;\n  c.fill=GridBagConstraints.HORIZONTAL;\n  c.gridheight=1;\n  c.gridwidth=GridBagConstraints.RELATIVE;\n  c.insets=LABEL_INSETS;\n  c.gridx=0;\n  c.gridy=0;\n  c.weightx=0.33f;\n  c.weighty=0;\n  panel.add(new JLabel(\"Pixel matrix\"),c);\n  c.insets=FIELD_INSETS;\n  c.gridx=1;\n  c.weightx=0.66f;\n  panel.add(pixelMatrices,c);\n  c.gridwidth=GridBagConstraints.REMAINDER;\n  c.gridx=0;\n  c.gridy++;\n  c.weightx=1.0f;\n  pixelMatrixEditorPlaceholder.add(\"Center\",pixelMatrixEditor.getEditorComponent());\n  panel.add(pixelMatrixEditorPlaceholder,c);\n  c.anchor=GridBagConstraints.NORTHWEST;\n  c.fill=GridBagConstraints.BOTH;\n  c.insets=EMPTY_INSETS;\n  c.gridy++;\n  c.weighty=1.0f;\n  panel.add(Box.createGlue(),c);\n  return panel;\n}\n", "default Monad<T> cycle(final int times){\n  return fromStream(SeqUtils.cycle(times,Streamable.fromStream(stream())));\n}\n", "    public OutboundRequest newRequest() throws IOException {\n\tOutboundRequest req = null;\n\tmarkBusy();\n\tfetchServerInfo();\n\ttry {\n\t    req = new OutboundRequestImpl();\n\t    return req;\n\t} finally {\n\t    if (req == null) {\n\t\tmarkIdle();\n\t    }\n\t}\n    }\n", "public static String getDBName(String userName) {\n        StringBuilder buffer = new StringBuilder();\n        buffer.append(EMBEDED_DB_NAME);\n        buffer.append(\"@\");\n        buffer.append(userName);\n        return buffer.toString();\n    }", "@Override public void doWork() throws OperatorException {\n  List<PerformanceVector> allVectors=performanceExtender.getData(PerformanceVector.class);\n  if (allVectors.size() < getMinSize()) {\n    throw new UserError(this,123,PerformanceVector.class,getMinSize() + \"\");\n  }\n  if (allVectors.size() > getMaxSize()) {\n    throw new UserError(this,124,PerformanceVector.class,getMaxSize() + \"\");\n  }\n  PerformanceVector[] allVectorsArray=new PerformanceVector[allVectors.size()];\n  allVectors.toArray(allVectorsArray);\n  SignificanceTestResult result=performSignificanceTest(allVectorsArray,getParameterAsDouble(PARAMETER_ALPHA));\n  performanceExtender.passDataThrough();\n  significanceOutput.deliver(result);\n}\n", "    public void usingExplorerinHTAModeStartAt(String url) {\n        this.usingTheBrowserStartAt(\"*ehta\", FitniumVariableAPI.replaceAnyVars(url));\n    }\n", "private String serialize ( Entry [ ] solution ) { char [ ] puzzle = new char [ NUM_ ] ; Shape shape ; int row ; int col ; for ( Entry entry : solution ) { shape = entry . shape ; row = entry . row ; col = entry . col ; for ( int [ ] xy : shape . vector ) ", "private void calculateTotalDegrees ( ) { totalCircleDegrees = ( NUM_ - ( startAngle - endAngle ) ) % NUM_ ; if ( totalCircleDegrees <= NUM_ ) { totalCircleDegrees = NUM_ ; } }", "public void addColumnToModify(Column column){\n  if (!columnsToModify.contains(column)) {\n    columnsToModify.add(column);\n  }\n}\n", "public DoubleStreamEx mapFirst(DoubleUnaryOperator mapper) {\r\n        return delegate(new PairSpliterator.PSOfDouble((a, b) -> b, mapper, spliterator(),\r\n                PairSpliterator.MODE_MAP_FIRST));\r\n    }", "private static List < String > dequeToList ( final Deque < String > deque ) { ArrayList < String > result = new ArrayList < > ( ) ; deque . stream ( ) . forEachOrdered ( null ) ; result . sort ( String . CASE_INSENSITIVE_ORDER ) ; return Collections . unmodifiableList ( result ) ; }", "public SerializerRegistry register(Class<?> type, TypeSerializerFactory factory) {\n    return register(type, calculateTypeId(type), factory);\n  }", "protected static void print ( String msg ) { System . out . print ( msg ) ; }", "public final char charAt(int index){\n  if (index < 0 || index >= remaining()) {\n    throw new IndexOutOfBoundsException(\"index=\" + index + \", remaining()=\"+ remaining());\n  }\n  return get(position + index);\n}\n", "public static PackingPlan.ContainerPlan[] sortOnContainerId(Set<PackingPlan.ContainerPlan> containers){\n  ArrayList<Integer> containerIds=new ArrayList<>();\n  PackingPlan.ContainerPlan[] currentContainers=new PackingPlan.ContainerPlan[containers.size()];\n  for (  PackingPlan.ContainerPlan container : containers) {\n    containerIds.add(container.getId());\n  }\n  Collections.sort(containerIds);\n  for (  PackingPlan.ContainerPlan container : containers) {\n    int position=containerIds.indexOf(container.getId());\n    currentContainers[position]=container;\n  }\n  return currentContainers;\n}\n", "public static File unzipToTempFolder ( File zipFile ) { String zipFilename = zipFile . getName ( ) ; String tempFolderPrefix = zipFilename . substring ( NUM_ , zipFilename . lastIndexOf ( STR_ ) ) ; File tempFolder = createTempFolder ( tempFolderPrefix ) ; try { PUZipUtils . unzip ( zipFile , tempFolder ) ; return tempFolder ; } catch ( Exception e ) { try { FileUtils . deleteFileOrDirectory ( tempFolder ) ; } catch ( RuntimeException ex ) { logger . debug ( STR_ + tempFolder , ex ) ; } throw new RuntimeException ( STR_ + zipFile + STR_ + tempFolder , e ) ; } }", "private void recordBourneVolumeEvent(URI volumeId,String evtType,Operation.Status status,String description){\n  try {\n    VolumeTaskCompleter.recordBourneVolumeEvent(_dbClient,volumeId,evtType,status,description);\n  }\n catch (  Exception e) {\n    _log.error(\"Failed recording VPLEX volume event {} for volume {}\",evtType,volumeId);\n  }\n}\n", "   public boolean isForwardOrientation() {\n      return (FORWARD_ORIENTATION.isEqual(orientation));\n   }\n", "private void generateFormats() {\n\n        m_formats = new LinkedHashMap<String, I_CmsFormatRestriction>();\n        for (int i = 0; i < m_formatValues.length; i++) {\n            String value = m_formatValues[i].trim();\n\n            if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(value)) {\n                String label = value;\n                String key = value;\n                if ((m_formatNames != null)\n                    && (m_formatNames.length > i)\n                    && CmsStringUtil.isNotEmptyOrWhitespaceOnly(m_formatNames[i])) {\n                    int pos = m_formatNames[i].indexOf(\":\");\n                    if (pos > 0) {\n                        label = m_formatNames[i].substring(pos + 1, m_formatNames[i].length());\n                        key = m_formatNames[i].substring(0, pos);\n                    } else {\n                        label = m_formatNames[i];\n                        key = m_formatNames[i];\n                    }\n                }\n\n                DefaultRestriction restrictionType = null;\n                try {\n                    restrictionType = DefaultRestriction.valueOf(value);\n                } catch (Exception e) {\n                    // happens with user defined restriction settings\n                }\n                if (restrictionType != null) {\n                    switch (restrictionType) {\n                        case original:\n                            m_formats.put(key, new CmsOriginalFormatRestriction(key, label));\n                            break;\n                        case user:\n                            m_userFormatKey = key;\n                            m_formats.put(key, new CmsUserFormatRestriction(key, label));\n                            break;\n                        case free:\n                            m_formats.put(key, new CmsFreeFormatRestriction(key, label));\n                            break;\n                        case small:\n                            m_formats.put(key, new CmsImageFormatRestriction(key, label, \"200x?\"));\n                            break;\n                        case big:\n                            m_formats.put(key, new CmsImageFormatRestriction(key, label, \"500x?\"));\n                            break;\n                        default:\n                    }\n                } else {\n                    if (CmsImageFormatRestriction.isValidConfig(value)) {\n                        m_formats.put(key, new CmsImageFormatRestriction(key, label, value));\n                    }\n                }\n            }\n        }\n    }", "    public boolean isValid() {\n        return object != null;\n    }\n", "      private boolean connect(){\n          try {// to get access to remote RMI registry\n              checkNetworkSocket();\n              Registry registry = LocateRegistry.getRegistry(this.host,this.port);\n              // get and store remote reference to Messenger's handle\n              this.handle = (MessengerHandle)registry.lookup(this.name);return true;\n          }catch (Exception e){\n              dispatch(new unitError(MessengerCluster.this,\"Not available the RMI on :\"+this.host));\n              return false;\n          }// bad luck :-(\n      }\n", "public void shutDown ( ) throws SAException { }", "protected void openVisibleField(XhtmlBuffer xb){\n  xb.openElement(\"div\");\n  String cssClass=\"form-group\";\n  if (mode.isView(insertable,updatable)) {\n    cssClass+=\" readonly\";\n  }\n else {\n    cssClass+=\" readwrite\";\n  }\n  if (errors.size() > 0) {\n    cssClass+=\" has-error\";\n  }\n  if (hasRequiredFields()) {\n    cssClass+=\" required\";\n  }\n  xb.addAttribute(\"class\",cssClass);\n  labelToXhtml(xb);\n  xb.openElement(\"div\");\n  xb.addAttribute(\"class\",INPUT_CONTAINER_CSS_CLASS + \" \" + fieldCssClass);\n}\n", "static int findCornerSeed(List<Point2D_I32> contour ) {\n\t\tPoint2D_I32 a = contour.get(0);\n\n\t\tint best = -1;\n\t\tdouble bestDistance = -Double.MAX_VALUE;\n\n\t\tfor (int i = 1; i < contour.size(); i++) {\n\t\t\tPoint2D_I32 b = contour.get(i);\n\n\t\t\tdouble d = distance", "\tpublic void actionPerformed(ActionEvent event) {\n\t\tJFrame frame = Universe.frameForEnvironment(environment);\n\t\tif (environment.getAutomaton().getInitialState() == null) {\n\t\t\tJOptionPane.showMessageDialog(frame,\n\t\t\t\t\t\"Conversion requires an automaton\\nwith an initial state!\",\n\t\t\t\t\t\"No Initial State\", JOptionPane.ERROR_MESSAGE);\n\t\t\treturn;\n\t\t}\n\t\tif (environment.getAutomaton().getFinalStates().length == 0) {\n\t\t\tJOptionPane.showMessageDialog(frame,\n\t\t\t\t\t\"Conversion requires at least\\n\" + \"one final state!\",\n\t\t\t\t\t\"No Final States\", JOptionPane.ERROR_MESSAGE);\n\t\t\treturn;\n\t\t}\n\t\tConvertPane pane = new ConvertPane(environment);\n\t\tenvironment.add(pane, \"Convert FA to RE\", new CriticalTag() {\n\t\t});\n\t\tenvironment.setActive(pane);\n\t}\n", "    public void accelerate(float time) {\n        velocity += time * acceleration;\n        if(velocity > maxSpeed) {\n            velocity = maxSpeed;\n        }\n\n        accellerating = true;\n    }\n", "@SuppressWarnings({ \"unchecked\" })\n    public static IMeta mergeMeta(IMetaData<?, ?> metaData1, IMetaData<?, ?> metaData2) {\n        //walk the entries and merge them\n        //1. higher number values trump lower ones\n        //2. true considered higher than false\n        //3. strings are not replaced\n        Map<String, Object> map1 = ((Map<String, Object>) metaData1);\n        Set<Entry<String, Object>> set1 = map1.entrySet();\n        Map<String, Object> map2 = ((Map<String, Object>) metaData2);\n        Set<Entry<String, Object>> set2 = map2.entrySet();\n        //map to hold updates / replacements\n        Map<String, Object> rep = new HashMap<String, Object>();\n        //loop to update common elements\n        for (Entry<String, Object> entry1 : set1) {\n            String key1 = entry1.getKey();\n            if (map2.containsKey(key1)) {\n                Object value1 = map1.get(key1);\n                Object value2 = map2.get(key1);\n                //we dont replace strings\n                //check numbers\n                if (value1 instanceof Double) {\n                    if (Double.valueOf(value1.toString()).doubleValue() < Double.valueOf(value2.toString()).doubleValue()) {\n                        rep.put(key1, value2);\n                    }\n                } else if (value1 instanceof Integer) {\n                    if (Integer.valueOf(value1.toString()).intValue() < Integer.valueOf(value2.toString()).intValue()) {\n                        rep.put(key1, value2);\n                    }\n                } else if (value1 instanceof Long) {\n                    if (Long.valueOf(value1.toString()).longValue() < Long.valueOf(value2.toString()).longValue()) {\n                        rep.put(key1, value2);\n                    }\n                }\n                //check boolean\n                if (value1 instanceof Boolean) {\n                    //consider true > false\n                    if (!Boolean.valueOf(value1.toString()) && Boolean.valueOf(value2.toString())) {\n                        rep.put(key1, value2);\n                    }\n                }\n            }\n        }\n        //remove all changed\n        set1.removeAll(rep.entrySet());\n        //add the updates\n        set1.addAll(rep.entrySet());\n        //perform a union / adds all elements missing from set1\n        set1.addAll(set2);\n        //return the original object with merges\n        return metaData1;\n    }", "    public void close() throws TreeException {\n        this.store.close();\n        this.store = null;\n    }\n", "private void getNextFile(final InputStream is) throws IOException {\n    if (is instanceof  java.util.zip.ZipInputStream) {\n      ZipEntry ze = ((ZipInputStream) is).getNextEntry();\n      while (ze != null && ze.isDirectory())\n        ze = ((ZipInputStream) is).getNextEntry();\n    }\n  }", "\tpublic String getId() {\n\t\tif(record.getControlNumberField() == null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn record.getControlNumber();\n\t\t}\n\t}\n", "public static AuthTime readFrom(SeekableByteChannel chan) throws IOException {\n  String client=readStringWithLength(chan);\n  String server=readStringWithLength(chan);\n  ByteBuffer bb=ByteBuffer.allocate(8);\n  chan.read(bb);\n  bb.order(ByteOrder.nativeOrder());\n  int cusec=bb.getInt(0);\n  int ctime=bb.getInt(4);\n  if (client.isEmpty()) {\n    StringTokenizer st=new StringTokenizer(server,\" :\");\n    if (st.countTokens() != 6) {\n      throw new IOException(\"Incorrect rcache style\");\n    }\n    st.nextToken();\n    String hash=st.nextToken();\n    st.nextToken();\n    client=st.nextToken();\n    st.nextToken();\n    server=st.nextToken();\n    return new AuthTimeWithHash(client,server,ctime,cusec,hash);\n  }\n else {\n    return new AuthTime(client,server,ctime,cusec);\n  }\n}\n", "@Override public void addChild(FXGNode child){\n  if (child instanceof GraphicContentNode) {\n    if (children == null)     children=new ArrayList<GraphicContentNode>();\n    GraphicContentNode graphicContent=(GraphicContentNode)child;\n    graphicContent.setParentGraphicContext(createGraphicContext());\n    if (child instanceof GroupNode) {\n      if (isInsideScaleGrid()) {\n        throw new FXGException(child.getStartLine(),child.getStartColumn(),\"InvalidScaleGridGroupChild\");\n      }\n    }\n    children.add(graphicContent);\n  }\n else {\n    super.addChild(child);\n  }\n}\n", "@SuppressWarnings(\"FutureReturnValueIgnored\")\n  public void reportMetric(final IMetric<?> metric) {\n    if (metric != null && isAvailable()) {\n      try {\n        final IMetric<?> metricSnapshot;\n        // take snapshot\n        synchronized (metric) {\n  ", "void errorSavingTrace ( TraceList list ) ;", "public static Map<String, ? extends CacheConfig> fromYAML(String content) throws IOException {\n        return new CacheConfigSupport().fromYAML(content);\n    }", "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof FloatRange == false) {\n            return false;\n        }\n        FloatRange range = (FloatRange) obj;\n        return (Float.floatToIntBits(min) == Float.floatToIntBits(range.min) &&\n                Float.floatToIntBits(max) == Float.floatToIntBits(range.max));\n    }\n", "@Override public byte[] decrypt(EncryptedData dataToDecrypt,KeyParameter aesKey) throws KeyCrypterException {\n  checkNotNull(dataToDecrypt);\n  checkNotNull(aesKey);\n  try {\n    ParametersWithIV keyWithIv=new ParametersWithIV(new KeyParameter(aesKey.getKey()),dataToDecrypt.initialisationVector);\n    BufferedBlockCipher cipher=new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESFastEngine()));\n    cipher.init(false,keyWithIv);\n    byte[] cipherBytes=dataToDecrypt.encryptedBytes;\n    byte[] decryptedBytes=new byte[cipher.getOutputSize(cipherBytes.length)];\n    final int length1=cipher.processBytes(cipherBytes,0,cipherBytes.length,decryptedBytes,0);\n    final int length2=cipher.doFinal(decryptedBytes,length1);\n    return Arrays.copyOf(decryptedBytes,length1 + length2);\n  }\n catch (  Exception e) {\n    throw new KeyCrypterException(\"Could not decrypt bytes\",e);\n  }\n}\n", "void doOnce(){\nswitch (mode.getSelectedIndex()) {\ndefault :\n    log.error(\"Did not expect selected mode \" + mode.getSelectedIndex());\n  return;\ncase 0:\ndoReadingFromTimeFields();\nreturn;\ncase 1:\ndoMeasurementFromPositionFields();\nreturn;\ncase 2:\ntry {\ndoLoadReadingFromFile();\ndoReadingFromTimeFields();\n}\n catch (java.io.IOException e) {\nlog.error(\"exception \" + e);\n}\nreturn;\ncase 3:\ntry {\ndoLoadMeasurementFromFile();\n}\n catch (java.io.IOException e) {\nlog.error(\"exception \" + e);\n}\nreturn;\n}\n}\n", "public void notifyHeaderItemRangeRemoved ( int positionStart , int itemCount ) { if ( positionStart < NUM_ || itemCount < NUM_ || positionStart + itemCount > headerItemCount ) { throw new IndexOutOfBoundsException ( STR_ + positionStart + STR_ + ( positionStart + itemCount - NUM_ ) + STR_ + ( headerItemCount - NUM_ ) + STR_ ) ; } notifyItemRangeRemoved ( positionStart , itemCount ) ; }", "    public void addAdminCentricFunction(UserCentricFunction adminCentricFunction, int n) {\n        this.adminCentricFunctions[n] = adminCentricFunction ;\n        addFunctionTab(adminCentricFunction.getPanel(), adminCentricFunction.getFunctionShortName(), adminCentricFunction.getFunctionName(), n);\n    }\n", "public GetDomainStatisticsReportResult withDailyVolumes(DailyVolume... dailyVolumes) {\n        if (this.dailyVolumes == null) {\n            setDailyVolumes(new java.util.ArrayList<DailyVolume>(dailyVolumes.length));\n        }\n        for (DailyVolume ele : dailyVolumes) {\n            this.dailyVolumes.add(ele);\n        }\n        return this;\n    }", "private void movePos ( float deltaY ) { if ( ( deltaY < NUM_ && mPtrIndicator . isInStartPosition ( ) ) ) { if ( DEBUG ) { PtrCLog . e ( LOG_TAG , String . format ( STR_ ) ) ; } return ; } int to = mPtrIndicator . getCurrentPosY ( ) + ( int ) deltaY ; if ", "public CTagFilterNode ( final ITreeNode < CTag > tag ) { m_tag = tag ; }", "    protected String extractString(byte[] value, int offset, int length) {\n\t\t/* TODO: Shevek suggests this use a Charset for safety. */\n        return (new String(value, offset, length)).trim();\n    }\n", "public boolean isTokenized(){\n  return (properties & TOKENIZED) != 0;\n}\n", "public boolean printControl(PrintWriter out, int iPrintOptions)\n    {\n        boolean bFieldsFound = super.printControl(out, iPrintOptions);\n        if (!bFieldsFound)\n        {\n            int iNumCols = this.getSFieldCount();\n            for (int iIndex = 0; iIndex < iNumCols; iIndex++)\n            {\n                ScreenField sField = this.getSField(iIndex);\n                boolean bPrintControl = this.isPrintableControl(sField, iPrintOptions);\n                if (this.isToolbar())\n                    if (sField.getConverter() == null)\n                        bPrintControl = false;\n                if (this instanceof BaseGridScreen)\n                    if (iIndex < ((BaseGridScreen)this).getNavCount())\n                        bPrintControl = true;   // Move to isPrintable.\n                if (bPrintControl)\n                {\n                    if (!bFieldsFound)\n                        this.printControlStartForm(out, iPrintOptions);    // First time\n                    this.printControlStartField(out, iPrintOptions);\n                    sField.printControl(out, iPrintOptions);\n                    this.printControlEndField(out, iPrintOptions);\n                    bFieldsFound = true;\n                }\n            }\n            if (bFieldsFound)\n                this.printControlEndForm(out, iPrintOptions);\n        }\n        return bFieldsFound;\n    }", "public synchronized void clear(){\n  Entry tab[]=table;\n  for (int i=0; i < tab.length; ++i) {\n    for (Entry e=tab[i]; e != null; e=e.next)     e.value=null;\n    tab[i]=null;\n  }\n  count=0;\n  recordModification(tab);\n}\n", "StringBuilder fwdQuote(char q){\n  StringBuilder sb=new StringBuilder();\n  while (hasNext()) {\n    next();\n    sb.append(buffer[pos]);\n    if (isCurr(q)) {\n      if (isNext(q)) {\n        next();\n      }\n else {\n        break;\n      }\n    }\n  }\n  if (sb.length() > 0)   sb.setLength(sb.length() - 1);\n  return sb;\n}\n", "public String parseToRegex(){\n  if (regex == null) {\n    regex=new StringBuilder(\"^\");\n    parseGlob();\n    regex.append('$');\n  }\n  return regex.toString();\n}\n", "    private JPanel newMiscPanel(Patch patch) {\n        JPanel aPanel = new JPanel();        \n        aPanel.setLayout(new BoxLayout(aPanel, BoxLayout.X_AXIS));\n//        aPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.RAISED),\"miscPanel\",TitledBorder.CENTER,TitledBorder.CENTER));\n        aPanel.add(newGatePanel(patch));\n        aPanel.add(newReverbPanel(patch));\n        aPanel.add(newWahPanel(patch));\n        return aPanel;\n    }\n", "boolean isValidDouble ( double value ) ;", "private NamedList rQuery(int expectedDocCount,String query,SolrServer server) throws Exception {\n  int timeSlept=0;\n  NamedList res=query(query,server);\n  while (expectedDocCount != numFound(res) && timeSlept < 30000) {\n    log.info(\"Waiting for \" + expectedDocCount + \" docs\");\n    timeSlept+=100;\n    Thread.sleep(100);\n    res=query(query,server);\n  }\n  log.info(\"Waited for {}ms and found {} docs\",timeSlept,numFound(res));\n  return res;\n}\n", "public DescribeFleetsResult withFleets(Fleet... fleets) {\n        if (this.fleets == null) {\n            setFleets(new java.util.ArrayList<Fleet>(fleets.length));\n        }\n        for (Fleet ele : fleets) {\n            this.fleets.add(ele);\n        }\n        return this;\n    }", "    private void taskScheduled(Task t) {\n\n        for (Iterator<TaskListener> i = listenerSet.iterator(); i.hasNext();) {\n\n            i.next().taskScheduled(t);\n        }\n    }\n", "    public void close() {\n\tif (cgFile != null) {\n\t    try {\n\t\tif (fileUpdate) {\n\t\t    writeFileDirectory() ;\n\t\t    writeFileHeader() ;\n\t\t}\n\t\tcgFile.close() ;\n\t    }\n\t    catch (IOException e) {\n\t\t// Don't propagate this exception.\n\t\tSystem.out.println(\"\\n", "List < T > step ( int step ) ;", "protected String describeAttribute(MBeanAttributeInfo attr) {\n        StringBuilder buf = new StringBuilder();\n        buf.append(\"(\");\n        if (attr.isReadable()) {\n            buf.append(\"r\");\n        }\n        if (attr.isWritable()) {\n            bu", "protected void reportUntracedLeak(String resourceType) {\n        logger.error(\"LEAK: {}.release() was not called before it's garbage-collected. \" +\n                \"Enable advanced leak reporting to find out where the leak occurred. \" +\n                \"To enable advanced leak reporting, \" +\n                \"specify the JVM option '-D{}={}' or call {}.setLevel() \" +\n                \"See http://netty.io/wiki/reference-counted-objects.html for more information.\",\n                resourceType, PROP_LEVEL, Level.ADVANCED.name().toLowerCase(), simpleClassName(this));\n    }", "public boolean isReconnecting ( ) { return reconnecting ; }", "    public void addCursorAction(ActionListener al){\n        cursor.addActionListener(al);\n    }\n", "public Object getValue(Object fromEntity) throws IllegalAccessException, InvocationTargetException\n    {\n        Object propertyValue = getter.invoke(fromEntity);\n        return propertyValue == null ? null : nestedWriter.getValue(propertyValue);\n    }", "private Resource generatePreviewResource(Resource resource,Eml eml,BigDecimal nextVersion){\n  Resource copy=new Resource();\n  copy.setShortname(resource.getShortname());\n  copy.setTitle(resource.getTitle());\n  copy.setLastPublished(resource.getLastPublished());\n  copy.setStatus(resource.getStatus());\n  copy.setOrganisation(resource.getOrganisation());\n  copy.setKey(resource.getKey());\n  copy.setEmlVersion(nextVersion);\n  if (resource.isCitationAutoGenerated()) {\n    Citation citation=new Citation();\n    URI homepage=cfg.getResourceVersionUri(resource.getShortname(),nextVersion);\n    citation.setCitation(resource.generateResourceCitation(nextVersion,homepage));\n    eml.setCitation(citation);\n  }\n  Date releaseDate=new Date();\n  copy.setLastPublished(releaseDate);\n  eml.setPubDate(releaseDate);\n  copy.setEml(eml);\n  List<VersionHistory> histories=Lists.newArrayList();\n  histories.addAll(resource.getVersionHistory());\n  copy.setVersionHistory(histories);\n  VersionHistory history=new VersionHistory(nextVersion,releaseDate,PublicationStatus.PUBLIC);\n  User modifiedBy=getCurrentUser();\n  if (modifiedBy != null) {\n    history.setModifiedBy(modifiedBy);\n  }\n  if (resource.getDoi() != null && (resource.getIdentifierStatus() == IdentifierStatus.PUBLIC_PENDING_PUBLICATION || resource.getIdentifierStatus() == IdentifierStatus.PUBLIC)) {\n    copy.setDoi(resource.getDoi());\n    copy.setIdentifierStatus(IdentifierStatus.PUBLIC);\n    history.setDoi(resource.getDoi());\n    history.setStatus(IdentifierStatus.PUBLIC);\n  }\n  copy.addVersionHistory(history);\n  return copy;\n}\n", "protected boolean hasDanglingScope(Attributes a) {\n        return (a.getValue(SCOPE) != null && a.getValue(VAR) == null);\n    }", "public void clear() {\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            for (Node<E> f = first; f != null; ) {\n                f.item = null;\n                Node<E> n = f.next;\n                f.prev = null;\n                f.next = null;\n                f = n;\n            }\n            first = last = null;\n            count = 0;\n            notFull.signalAll();\n        } finally {\n            lock.unlock();\n        }\n    }", "@Override\n\tpublic void compute(float x, float y, Point2D_F32 out) {\n\t\tfloat sum = 0;\n\n\t\tfloat radial[] = params.radial;\n\t\tfloat t1 = params.t1, t2 = params.t2;\n\n\t\t// out is undistorted normalized image coordinate\n\t\tout.x = a11*x + a12*y + a13;\n\t\tout.y = a22*y + a23;\n\n\t\tfloat r2 = out.x * out.x + out.y * out.y;\n\t\tfloat ri2 = r2;\n\n\t\tfor (int i = 0; i < radial.length; i++) {\n\t\t\tsum += radial[i] * ri2;\n\t\t\tri2 *= r2;\n\t\t}\n\n\t\tfloat tx = 2 * t1 * out.x * out.y + t2 * (r2 + 2 * out.x * out.x);\n\t\tfloat ty = t1 * (r2 + 2 * out.y * out.y) + 2 * t2 * out.x * out.y;\n\n\t\t// now compute the distorted normalized image coordinate\n\t\tout.x = out.x*(1 + sum) + tx;\n\t\tout.y = out.y*(1 + sum) + ty;\n\t}", "public Position left() {\n\t\treturn new Position(_x - 1, _y);\n\t}", "public void addDecoration(ShapeDecoration decoration){\n  decorations.add(decoration);\n}\n", "public static MenuItem getMenuItem(@NonNull Toolbar toolbar, @IdRes int menuId) {\n        View v;\n        int childCount;\n        View innerView;\n        MenuItem menuItem;\n        for (int i = 0; i < toolbar.getChildCount(); i++) {\n            v = toolbar.getChildAt(i);\n            if (v instanceof ActionMenuView) {\n                childCount = ((ActionMenuView) v).getChildCount();\n                for (int j = 0; j < childCount; j++) {\n                    innerView = ((ActionMenuView) v).getChildAt(j);\n                    if (innerView instanceof ActionMenuItemView) {\n                        menuItem = ((ActionMenuItemView) innerView).getItemData();\n                        if (menuItem.getItemId() == menuId) {\n                            return menuItem;\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    }", "    public DateFormat getDateFormat(String pKey) {\n        DateFormat result =\n            getDateFormatForPattern(getResourceValue(pKey, null));\n        if (result == null) {\n            result = getTimeFormat();\n        }\n        return result;\n    }\n", "private MBeanCompositeConfig makeComposite(CompositeType compositeType,\n\t\t\tString name) {\n\t\tMBeanCompositeConfig config = new MBeanCompositeConfig();\n\t\tconfig.addField(\"name\", name);\n\t\tString rawType = compositeType.getType(name).toString();\n\t\tconfig.addF", "    public void setDirection(double angle){\n        this.direction=angle;\n        this.notifyNodeMoved();\n    }\n", "CCodeNode createCodeNode ( INaviFunction parentFunction , final List < ? extends INaviInstruction > instructions ) ;", "public Matrix4f rotateTowards(float dirX, float dirY, float dirZ, float upX, float upY, float upZ, Matrix4f dest) {\n        // Normalize direction\n        float invDirLength = 1.0f / (float) Math.sqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);\n        float ndirX = dirX * invDirLength;\n        float ndirY = dirY * invDirLength;\n        float ndirZ = dirZ * invDirLength;\n        // left = up x direction\n        float leftX, leftY, leftZ;\n        leftX = upY * ndirZ - upZ * ndirY;\n        leftY = upZ * ndirX - upX * ndirZ;\n        leftZ = upX * ndirY - upY * ndirX;\n        // normalize left\n        float invLeftLength = 1.0f / (float) Math.sqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);\n        leftX *= invLeftLength;\n        leftY *= invLeftLength;\n        leftZ *= invLeftLength;\n        // up = direction x left\n        float upnX = ndirY * leftZ - ndirZ * leftY;\n        float upnY = ndirZ * leftX - ndirX * leftZ;\n        float upnZ = ndirX * leftY - ndirY * leftX;\n        float rm00 = leftX;\n        float rm01 = leftY;\n        float rm02 = leftZ;\n        float rm10 = upnX;\n        float rm11 = upnY;\n        float rm12 = upnZ;\n        float rm20 = ndirX;\n        float rm21 = ndirY;\n        float rm22 = ndirZ;\n        dest._m30(m30);\n        dest._m31(m31);\n        dest._m32(m32);\n        dest._m33(m33);\n        float nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;\n        float nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;\n        float nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;\n        float nm03 = m03 * rm00 + m13 * rm01 + m23 * rm02;\n        float nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;\n        float nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;\n        float nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;\n        float nm13 = m03 * rm10 + m13 * rm11 + m23 * rm12;\n        dest._m20(m00 * rm20 + m10 * rm21 + m20 * rm22);\n        dest._m21(m01 * rm20 + m11 * rm21 + m21 * rm22);\n        dest._m22(m02 * rm20 + m12 * rm21 + m22 * rm22);\n        dest._m23(m03 * rm20 + m13 * rm21 + m23 * rm22);\n        dest._m00(nm00);\n        dest._m01(nm01);\n        dest._m02(nm02);\n        dest._m03(nm03);\n        dest._m10(nm10);\n        dest._m11(nm11);\n        dest._m12(nm12);\n        dest._m13(nm13);\n        dest._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));\n        return dest;\n    }", "public void startElement(String uri, String lname, String name,\n            Attributes attrs) {\n        // System.err.println(\"Start: \" + name);\n\n        // super.handleStartingTags is replaced with handleStartingTags\n        // suggestion by Vu Ngoc Tan/Hop\n    \tname = name.toLowerCase();\n        if (HtmlTagMap.isHtml(name)) {\n            // we do nothing\n            return;\n        }\n        if (HtmlTagMap.isHead(name)) {\n            // we do nothing\n            return;\n        }\n        if (HtmlTagMap.isTitle(name)) {\n            // we do nothing\n            return;\n        }\n        if (HtmlTagMap.isMeta(name)) {\n            // we look if we can change the body attributes\n            String meta = null;\n            String content = null;\n            if (attrs != null) {\n                for (int i = 0; i < attrs.getLength(); i++) {\n                    String attribute = attrs.getQName(i);\n                    if (attribute.equalsIgnoreCase(HtmlTags.CONTENT))\n                        content = attrs.getValue(i);\n                    else if (attribute.equalsIgnoreCase(HtmlTags.NAME))\n                        meta = attrs.getValue(i);\n                }\n            }\n            if (meta != null && content != null) {\n                bodyAttributes.put(meta, content);\n            }\n            return;\n        }\n        if (HtmlTagMap.isLink(name)) {\n            // we do nothing for the moment, in a later version we could extract\n            // the style sheet\n            return;\n        }\n        if (HtmlTagMap.isBody(name)) {\n            // maybe we could extract some info about the document: color,\n            // margins,...\n            // but that's for a later version...\n            XmlPeer peer = new XmlPeer(ElementTags.ITEXT, name);\n            peer.addAlias(ElementTags.TOP, HtmlTags.TOPMARGIN);\n            peer.addAlias(ElementTags.BOTTOM, HtmlTags.BOTTOMMARGIN);\n            peer.addAlias(ElementTags.RIGHT, HtmlTags.RIGHTMARGIN);\n            peer.addAlias(ElementTags.LEFT, HtmlTags.LEFTMARGIN);\n            bodyAttributes.putAll(peer.getAttributes(attrs));\n            handleStartingTags(peer.getTag(), bodyAttributes);\n            return;\n        }\n        if (myTags.containsKey(name)) {\n            XmlPeer peer = (XmlPeer) myTags.get(name);\n            if (ElementTags.TABLE.equals(peer.getTag()) || ElementTags.CELL.equals(peer.getTag())) {\n                Properties p = peer.getAttributes(attrs);\n                String value;\n                if (ElementTags.TABLE.equals(peer.getTag())\n                        && (value = p.getProperty(ElementTags.BORDERWIDTH)) != null) {\n                    if (Float.parseFloat(value + \"f\") > 0) {\n                        tableBorder = true;\n                    }\n                }\n                if (tableBorder) {\n                    p.put(ElementTags.LEFT, String.valueOf(true));\n                    p.put(ElementTags.RIGHT, String.valueOf(true));\n                    p.put(ElementTags.TOP, String.valueOf(true));\n                    p.put(ElementTags.BOTTOM, String.valueOf(true));\n                }\n                handleStartingTags(peer.getTag(), p);\n                return;\n            }\n            handleStartingTags(peer.getTag(), peer.getAttributes(attrs));\n            return;\n        }\n        Properties attributes = new Properties();\n        if (attrs != null) {\n            for (int i = 0; i < attrs.getLength(); i++) {\n                String attribute = attrs.getQName(i).toLowerCase();\n                attributes.setProperty(attribute, attrs.getValue(i).toLowerCase());\n            }\n        }\n        handleStartingTags(name, attributes);\n    }", "public String toString ( ) { Annotation [ ] [ ] aa = getAnnotations ( ) ; StringBuilder sbuf = new StringBuilder ( ) ; int k = NUM_ ; while ( k < aa . length ) { Annotation [ ] a = aa [ k ++ ] ; int i = NUM_ ; while ( i < a . length ) { sbuf . append ( a ", "public void marshall(DeleteTableRequest deleteTableRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (deleteTableRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(deleteTableRequest.getCatalogId(), CATALOGID_BINDING);\n            protocolMarshaller.marshall(deleteTableRequest.getDatabaseName(), DATABASENAME_BINDING);\n            protocolMarshaller.marshall(deleteTableRequest.getName(), NAME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void removeSection(final TimeSection SECTION){\n  if (null == SECTION)   return;\n  sections.remove(SECTION);\n  Collections.sort(sections,new TimeSectionComparator());\n  fireUpdateEvent(SECTION_EVENT);\n}\n", "\tpublic void unregisterHandler(String groupType) {\n\t\tm_handlers.remove(groupType);\n\t\tm_configuration = null;\n\t}\n", "public int numProcessors(){\n  return m_processors;\n}\n", "@Override public void add(String... identifiers){\n  blacklist.addAll(Arrays.asList(identifiers));\n}", "  public void tryCommandHandling(ItemWrapper wrapper) {\n    int size = 10;\n    for (int i = 0; i < size; i++) {\n      wrapper.addCommand(new Command(\"Command\" + i, Command.ITEM, 1));\n      assertEquals(\"Number of commands\", i + 1, \n          wrapper.getAllCommands().length);\n    }\n    \n    for (int i = size - 1; i >= 0; i--) {\n      wrapper.removeCommand(wrapper.getAllCommands()[i]);\n      assertEquals(\"Number of commands\", i, wrapper.getAllCommands().length);\n    }\n  }\n", "public BackupSpecification backup ( ) throws BackupException , InterruptedException ;", "public NameSearch findMatchingName(final Set<String> names){\n  final NameSearch ret=new NameSearch(names);\n  Expression name=getObject(0);\n  if (name != null) {\n    if (ret.search(name)) {\n      return ret;\n    }\n  }\n  if (!ret.found()) {\n    name=getSubject(0);\n    if (name != null) {\n      if (ret.search(name)) {\n        return ret;\n      }\n    }\n  }\n  if (!ret.found()) {\n    name=getSubject(1);\n    if (name != null) {\n      if (ret.search(name)) {\n        return ret;\n      }\n    }\n  }\n  if (!ret.found()) {\n    name=getUnknownTypeExpression(0);\n    if (name != null) {\n      if (!name.hasAmount()) {\n        Expression num=getNumeral(0);\n        if (num != null) {\n          name.setAmount(num.getAmount());\n        }\n      }\n      if (ret.search(name)) {\n        return ret;\n      }\n    }\n  }\n  return ret;\n}\n", "public static JKPrivilige createPrivilige(String name, JKPrivilige parent, int number) {\r\n\t\tlogger.trace(\"createPriviligeObject(): Id : \", \".name\", name, \", Parent:[\", parent, \"] , \", number);\r\n\t\tJKPrivilige p = new JKPrivilige(name, parent, number);\r\n\t\tp.setDesc(p.getFullName());\r\n\t\treturn p;\r\n\t}", "@Deprecated public static void add(String name,double amount) throws UserDoesNotExistException, NoLoanPermittedException {\n  try {\n    add(name,BigDecimal.valueOf(amount));\n  }\n catch (  ArithmeticException e) {\n    logger.log(Level.WARNING,\"Failed to add", "public int singleLineWidth ( ) { if ( sf == null ) { return wf . length ( ) ; } return wf . length ( ) + STR_ . length ( ) + sf . length ( ) ; }", "public static base_responses add(nitro_service client, dnsaction resources[]) throws Exception {\n\t\tbase_responses result = null;\n\t\tif (resources != null && resources.length > 0) {\n\t\t\tdnsaction addresources[] = new dnsaction[resources.length];\n\t\t\tfor (int i=0;i<resources.length;i++){\n\t\t\t\taddresources[i] = new dnsaction();\n\t\t\t\taddresources[i].actionname = resources[i].actionname;\n\t\t\t\taddresources[i].actiontype = resources[i].actiontype;\n\t\t\t\taddresources[i].ipaddress = resources[i].ipaddress;\n\t\t\t\taddresources[i].ttl = resources[i].ttl;\n\t\t\t\taddresources[i].viewname = resources[i].viewname;\n\t\t\t\taddresources[i].preferredloclist = resources[i].preferredloclist;\n\t\t\t}\n\t\t\tresult = add_bulk_request(client, addresources);\n\t\t}\n\t\treturn result;\n\t}", "  public InputStream getDaoConfig(String connectionType) throws IOException {\n    URL url = null;\n    if (connectionType.equals(SQL.ORACLE)) {\n      url = SubsetDBConfig.class.getResource(\"subset-oracle.xml\");\n    } else if (connectionType.equals(SQL.SQL2K)) {\n      url = SubsetDBConfig.class.getResource(\"subset-sql2k.xml\");\n    } else if (connectionType.equals(SQL.CACHE)) {\n      url = SubsetDBConfig.class.getResource(\"subset-cache.xml\");\n    } else if (connectionType.equals(SQL.DB2)) {\n      url = SubsetDBConfig.class.getResource(\"subset-db2.xml\");\n    } else if (connectionType.equals(SQL.MYSQL)) {\n      url = SubsetDBConfig.class.getResource(\"subset-mysql.xml\");\n    }\n    return url.openStream();\n  }\n", "    public String getElementDescription () {\n        return language.getString (\"Structures.MouseChangedComponent.Description\");\n    }\n", "        private void setHueAngle(double angle) {\n            double oldAngle = this.angle;\n\n            this.angle = angle;\n            if (angle != oldAngle) {\n                setFlag(FLAGS_CHANGED_ANGLE, true);\n                repaint();\n            }\n        }\n", "public String getFailReason() {\n        String causeMsg = \"\";\n        try {\n            JSONObject postObj = getObject();\n            if (postObj != null\n                    && postObj.has(\"error\")\n                    && postObj.getJSONObject(\"error\").has(\"message\")) {\n                causeMsg = postObj.getJSONObject(\"error\").getString(\"message\");\n                if (causeMsg != null && causeMsg.trim().length() > 0) {\n                    causeMsg = causeMsg + \".\";\n                }\n            }\n        } catch (Exception ignore) {\n        }\n        return causeMsg;\n    }", "public ExceptionThrownRule getExceptionThrownRule(Throwable ex) {\n        ExceptionThrownRule exceptionThrownRule = null;\n        int deepest = Integer.MAX_VALUE;\n        for (Map.Entry<String, ExceptionThrownRule> entry : exceptionThrownRuleMap.entrySet()) {\n            int depth = getMatchedDepth(entry.getKey(), ex);\n            if (depth >= 0 && depth < deepest) {\n                deepest = depth;\n                exceptionThrownRule = entry.getValue();\n            }\n        }\n        return (exceptionThrownRule != null ? exceptionThrownRule : defaultExceptionThrownRule);\n    }", "public PropertySheetPanel(){\n  setBorder(BorderFactory.createEmptyBorder(0,0,10,0));\n  m_env=Environment.getSystemWide();\n}\n", "protected final void postInsertHook ( boolean usedFreeSlot ) { if ( usedFreeSlot ) { _free -- ; } if ( ++ _size > _maxSize || _free == NUM_ ) { int newCapacity = _size > _maxSize ? PrimeFinder . nextPrime ( capacity ( ) << NUM_ ) : capacity ( ) ; rehash (", "public Builder connectTimeout ( Duration connectTimeout ) { this . connectTimeout = connectTimeout ; return this ; }", "public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException {\n  if (len < 0) {\n    throw new IllegalArgumentException(\"Can't have a negative input length!\");\n  }\n  int blockSize=getBlockSize();\n  int length=getUpdateOutputSize(len);\n  if (length > 0) {\n    if ((outOff + length) > out.length) {\n      throw new DataLengthException(\"output buffer too short\");\n    }\n  }\n  int resultLen=0;\n  int gapLen=buf.length - bufOff;\n  if (len > gapLen) {\n    System.arraycopy(in,inOff,buf,bufOff,gapLen);\n    resultLen+=cipher.processBlock(buf,0,out,outOff);\n    System.arraycopy(buf,blockSize,buf,0,blockSize);\n    bufOff=blockSize;\n    len-=gapLen;\n    inOff+=gapLen;\n    while (len > blockSize) {\n      System.arraycopy(in,inOff,buf,bufOff,blockSize);\n      resultLen+=cipher.processBlock(buf,0,out,outOff + resultLen);\n      System.arraycopy(buf,blockSize,buf,0,blockSize);\n      len-=blockSize;\n      inOff+=blockSize;\n    }\n  }\n  System.arraycopy(in,inOff,buf,bufOff,len);\n  bufOff+=len;\n  return resultLen;\n}\n", "public static boolean renameFile(final String fromFilename,final String toFilename){\n  return renameFile(new File(fromFilename),new File(toFilename));\n}\n", "public String get(Class<? extends Annotation> scope, String key) {\n\t\tPreconditions.checkNotNull(scope, \"Parameter 'scope' must not be [\" + scope + \"]\");\n\t\tPreconditions.checkNotNull(key, \"Parameter 'key' must not be [\" + key + \"]\");\n\t\tPreconditions.checkArgument(scope.isAnnotationPresent(Scope.class), \n\t\t\t\t\"Parameter 'scope' must be annotated with @Scope\");\n\t\treturn store(scope).get(key);\n\t}", "public static String toString ( final StackTraceElement [ ] stackTrace ) { Preconditions . checkNotNull ( stackTrace , STR_ ) ; final StringBuilder sb = new StringBuilder ( ) ; for ( final StackTraceElement stackTraceElement : stackTrace ) { sb . append (", "String computeDescription(IMethod method){\n  StringBuffer buf=new StringBuffer();\n  buf.append(\"Callers of \");\n  buf.append(method.getElementName());\n  buf.append(\"(\");\n  boolean first=true;\n  for (  String paramType : method.getParameterTypes()) {\n    if (first)     first=false;\n else     buf.append(\",\");\n    buf.append(Signature.toString(paramType));\n  }\n  buf.append(\")\");\n  return buf.toString();\n}\n", "\t\tprotected String getExpression () {\n\t\t\treturn _sExpression;\n\t\t}\n", "public void endDocument ( ) throws IOException { writer . flush ( ) ; }", "private static final KeyAdapter closeKeyStrokes(final java.awt.Window window) {\n        return new KeyAdapter() {\n            public void keyReleased(KeyEvent e) {\n                final int kc = e.getKeyCode();\n                if (kc == KeyEvent.VK_ESCAPE ||\n                    kc == KeyEvent.VK_ENTER) {\n                    window.dispose();\n                }\n            }\n        };\n    }", "private double instanceTransformationProbability(Instance first,Instance second){\n  double transProb=1.0;\n  int numMissAttr=0;\n  for (int i=0; i < m_NumAttributes; i++) {\n    if (i == m_Train.classIndex()) {\n      continue;\n    }\n    if (first.isMissing(i)) {\n      numMissAttr++;\n      continue;\n    }\n    transProb*=attrTransProb(first,second,i);\n    if (numMissAttr != m_NumAttributes) {\n      transProb=Math.pow(transProb,(double)m_NumAttributes / (m_NumAttributes - numMissAttr));\n    }\n else {\n      transProb=0.0;\n    }\n  }\n  return transProb / m_NumInstances;\n}\n", "    public Response execute() throws org.json.JSONException {\n        com.softwoehr.pigiron.functions.ProfileQueryDM pigfunc = new com.softwoehr.pigiron.functions.ProfileQueryDM\n\t(\n           getHostSpecifier()\n         , host.getPortNumber()\n         , user.getUid()\n         , user.getPassword()\n         , getTargetIdentifier()\n\t);\n        execute(pigfunc,requestor,response);\n        return response;\n    }\n", "    public boolean isComplete() {\n        int nrRequests = 0;\n        int nrAssignedRequests = 0;\n        for (Request r : getRequests()) {\n            if (!(r instanceof CourseRequest))\n                continue; // ignore free times\n            if (!r.isAlternative())\n                nrRequests++;\n            if (r.isAssigned())\n                nrAssignedRequests++;\n        }\n        return nrAssignedRequests == nrRequests;\n    }\n", "    public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n        final ClassLoader old = Thread.currentThread().getContextClassLoader();\n        try {\n            Thread.currentThread().setContextClassLoader(ReloadingClassloaderManager.getClassLoader(this.config.getServletContext()));\n\n            CocoonReloadingListener.enableConsoleOutput();\n            this.servlet.service(request, response);\n        } catch(Throwable t) {\n            t.printStackTrace();\n        }\n        finally {\n            Thread.currentThread().setContextClassLoader(old);\n        }\n    }\n", "    public int hashCodeBasic() {\n        int result;\n        long temp;\n        result =  (contactId != null ? contactId.hashCode() : 0);\n        result = 29 * result + (firstName != null ? firstName.hashCode() : 0);\n        result = 29 * result + (lastName != null ? lastName.hashCode() : 0);\n        result = 29 * result + (lastUpdated != null ? lastUpdated.hashCode() : 0);\n        result = 29 * result + (phone != null ? phone.hashCode() : 0);\n        result = 29 * result + (shipAddress != null ? shipAddress.hashCode() : 0);\n        result = 29 * result + (creationDate != null ? creationDate.hashCode() : 0);\n        \n        return result;\n    }\n", "  public void setPattern(String name, Pattern pattern) {\n    if (null == pattern) {\n      set(name, null);\n    } else {\n      set(name, pattern.pattern());\n    }\n  }\n", "private TextImpl nextTextNode(){\n  Node nextSibling=getNextSibling();\n  if (nextSibling == null) {\n    return null;\n  }\n  short nodeType=nextSibling.getNodeType();\n  return nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE ? (TextImpl)nextSibling : null;\n}\n", "public static String addAsterisk(String s,int index){\n  if (s != null) {\n    index=Math.min(index,s.length());\n    s=s.substring(0,index) + \"[*]\" + s.substring(index);\n  }\n  return s;\n}\n", "protected int readFully ( InputStream in , byte buffer [ ] , int offset , int len ) throws IOException { for ( int i = NUM_ ; i < len ; i ++ ) { int q = in . read ( ) ; if ( q == - NUM_ ) return ( ( i == NUM_ ) ? - NUM_ : i ) ; buffer [ i + offset ] = ( b", "public static String[] toRole(Object oRoles) throws PageException {\n  if (oRoles instanceof String) {\n    oRoles=ListUtil.listToArrayRemoveEmpty(oRoles.toString(),\",\");\n  }\n  if (oRoles instanceof Array) {\n    Array arrRoles=(Array)oRoles;\n    String[] roles=new String[arrRoles.size()];\n    for (int i=0; i < roles.length; i++) {\n      roles[i]=Caster.toString(arrRoles.get(i + 1,\"\"));\n    }\n    return roles;\n  }\n  throw new ApplicationException(\"invalid roles definition for tag loginuser\");\n}\n", "private void updateFont(Font font) {\r\n        StyledDocument doc = (StyledDocument)getComponent().getDocument();\r\n        Style style = doc.getStyle(StyleContext.DEFAULT_STYLE);\r\n\r\n        if (style == null) {\r\n            return;\r\n        }\r\n\r\n        if (font == null) {\r\n            style.removeAttribute(StyleConstants.FontFamily);\r\n            style.removeAttribute(StyleConstants.FontSize);\r\n            style.removeAttribute(StyleConstants.Bold);\r\n            style.removeAttribute(StyleConstants.Italic);\r\n        } else {\r\n            StyleConstants.setFontFamily(style, font.getName());\r\n            StyleConstants.setFontSize(style, font.getSize());\r\n            StyleConstants.setBold(style, font.isBold());\r\n            StyleConstants.setItalic(style, font.isItalic());\r\n        }\r\n    }", "  public void setSynonyms(List<EnzymeName> synonyms) {\n    if (synonyms == null) throw new NullPointerException(\"Parameter 'synonyms' must not be null.\");\n    this.synonyms = synonyms;\n  }\n", "public boolean append ( Node child ) { child . setParent ( this ) ; return getParentList ( this ) . add ( child ) ; }", "    public void log(final LogRecord record) {\n        SwingUtilities.invokeLater(\n                new Runnable() {\n                    public void run() {\n                        if (record.getLevel().intValue() >= Level.WARNING.intValue() && !isVisible()) {\n                            setVisible(true);\n                        }\n                        textArea.append(format.format(record));\n                    }\n                });\n    }\n", "public void addExplicit ( ObjectType type ) { add ( type , BOOL_ ) ; }", "public Subscription limitValidity( Subscription subscription, Interval.Period newValidity ) {\n    ParameterMap<String, String> params = new ParameterMap<String, String>();\n    ValidationUtils.validatesIntervalPeriod( newValidity );\n    params.add( \"period_of_validity\", newValidity.toString() );\n    return RestfulUtils.update( SubscriptionService.PATH, subscription, params, false, Subscription.class, super.httpClient );\n  }", "public void release ( ) { boolean captured = lock . tryLock ( ) ; try { Log . d ( MP_TAG , STR_ ) ; this . state = State . END ; if ( this . amp != null ) { this . amp . release ( ) ; } if ( this . sbmp != null ) { this . sbmp . release ( ) ; } this . onBufferingUpdateListener = null ; this . onCompletionListener = null ; this . onSpeedMediaCompletionListener = null ; this . onErrorListener = null ; this . onInfoListener = null ; this . preparedListener = null ; this . onPitchAdjustmentAvailableChangedListener = null ; this . pitchAdjustmentAvailableChangedListener = null ; Log . d ( MP_TAG , STR_ ) ; this . onSeekCompleteListener = null ; this . onSpeedAdjustmentAvailableChangedListener = null ; this . speedAdjustmentAvailableChangedListener = null ; } finally { if ( captured ) lock . unlock ( ) ; } }", "void onTabReselected ( int position ) ;", "private static ExampleBean fakeServiceCall(final String text) {\n\t\tExampleBean exampleBean = new ExampleBean();\n\t\texampleBean.setBeanAttribute(\"(beanAttribute) \" + text);\n\n\t\tExampleBean.DummyInnerBean dummyInnerBean = new ExampleBean.DummyInnerBean();\n\t\tdummyInnerBean.setInnerAttribute(\"(innerBean.innerAttribute) \" + text);\n\t\texampleBean.setInnerBean(dummyInnerBean);\n\n\t\treturn exampleBean;\n\t}", "@PreAuthorize(\n            \"hasPermission('ALL', 'java.lang.String', new org.apereo.portal.spring.security.evaluator.AuthorizableActivity('UP_PERMISSIONS', 'VIEW_PERMISSIONS'))\")\n    @RequestMapping(\"/v5-5/permissions/assignments/users/{username}\")\n    public ModelAndView getAssignmentsForUser(\n            @PathVariable(\"username\") String username,\n            @RequestParam(value = \"includeInherited\", required = false, defaultValue = \"false\")\n                    boolean includeInherited) {\n\n        final JsonEntityBean entity =\n                groupListHelper.getEntity(EntityEnum.PERSON.toString(), username, false);\n        final List<JsonPermission> permissions = getPermissionsForEntity(entity, includeInherited);\n\n        final ModelAndView mv = new ModelAndView();\n        mv.addObject(\"assignments\", permissions);\n        mv.setViewName(\"json\");\n\n        return mv;\n    }", "public void accept ( final MethodVisitor mv ) { mv . visitParameter ( name , access ) ; }", "public static Policy getPoolConfigPolicy(com.impetus.client.cassandra.service.CassandraHost cassandraHost)\r\n    {\r\n        Policy policy = new Policy();\r\n        if (cassandraHost.getMaxActive() > 0)\r\n        {\r\n            policy.setMaxActivePerNode(cassandraHost.getMaxActive());\r\n        }\r\n        if (cassandraHost.getMaxIdle() > 0)\r\n        {\r\n            policy.setMaxIdlePerNode(cassandraHost.getMaxIdle());\r\n        }\r\n        if (cassandraHost.getMinIdle() > 0)\r\n        {\r\n            policy.setMinIdlePerNode(cassandraHost.getMinIdle());\r\n        }\r\n        if (cassandraHost.getMaxTotal() > 0)\r\n        {\r\n            policy.setMaxTotal(cassandraHost.getMaxTotal());\r\n        }\r\n        return policy;\r\n    }", "    public void skippedEntity(String name) throws SAXException {\n        SkippedEntitySAXEvent event =\n                new SkippedEntitySAXEvent(documentLocator, name);\n        events.add(event);\n    }\n", "public static AnnotatedTypeMirror removePrefix(final Elements elements,final AnnotatedTypeMirror annoType){\n  AnnotatedTypeMirror result=annoType.deepCopy(false);\n  Set<AnnotationMirror> annos=annoType.getAnnotations();\n  for (  AnnotationMirror anno : annos) {\n    AnnotationMirror cleanedMirror=removePrefix(elements,anno);\n    if (cleanedMirror != null) {\n      result.addAnnotation(cleanedMirror);\n    }\n else {\n      result.addAnnotation(anno);\n    }\n  }\n  return result;\n}\n", "protected void log(String message, Writer writer) {\n        try {\n            writer.write(JournalHelper.formatDate(new Date()) + \": \" + message\n                    + \"\\n\");\n        } catch (IOException e) {\n            logger.error(\"Error writing journal log entry\", e);\n        }\n    }", "public boolean isSameAs ( UnconditionalValueDerefSet otherFact ) { return valueNumbersUnconditionallyDereferenced . equals ( otherFact . valueNumbersUnconditionallyDereferenced ) && derefLocationSetMap . equals ( otherFact . derefLocationSetMap ) ; }", "public static int writeString(DataOutput out,String s) throws IOException {\n  ByteBuffer bytes=encode(s);\n  int length=bytes.limit();\n  WritableUtils.writeVInt(out,length);\n  out.write(bytes.array(),0,length);\n  return length;\n}\n", "public void setFields(String[] requiredFields, String[] optionalFields) {\n\t\tif (requiredFields == null) {\n\t\t\tthrow new IllegalArgumentException(\"Parameter requiredFields must not be null.\");\n\t\t}\n\n\t\tif (optionalFields == null) {\n\t\t\tthrow new IllegalArgumentException(\"Parameter optionalFields must not be null.\");\n\t\t}\n\n\t\tthis.requiredFields = requiredFields;\n\t\tthis.optionalFields = optionalFields;\n\n\t\tthis.textFields = new HashMap<>(requiredFields.length + optionalFields.length);\n\n\t\tremoveAll();\n\n\t\tint fieldIndex = 0;\n\t\tfor (String fieldName : requiredFields) {\n\t\t\taddRequiredField(fieldName, fieldIndex);\n\t\t\tfieldIndex++;\n\t\t}\n\n\t\tfor (String fieldName : optionalFields) {\n\t\t\taddField(fieldName, fieldIndex);\n\t\t\tfieldIndex++;\n\t\t}\n\t\tadd(Box.createVerticalGlue(), LayoutHelper.getGBC(0, fieldIndex, 2, 0.0d, 1.0d));\n\n\t\tvalidate();\n\t}", "protected Classifier addToStored(Classifier newClassifier, double newClassifiersWeight) {\n        Classifier addedClassifier = null;\n        Classifier[] newStored = new Classifier[this.storedLearners.length + 1];\n        double[][] newStoredWeights = new", "public static int findNthUnescaped(char charToFind,int n,String s){\n  char[] charArray=s.toCharArray();\n  int count=0;\n  for (int i=0; i < charArray.length; ++i) {\n    if (i > 0 && charArray[i - 1] == '\\\\')     continue;\n    if (charArray[i] == charToFind) {\n      if (++count == n) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n", "public void refresh() {\n        this.refreshLock.writeLock().lock();\n\n        if (!this.canRefresh()) {\n            this.refreshLock.writeLock().unlock();\n            throw new IllegalStateException(\"The BoxAPIConnection cannot be refreshed because it doesn't have a \"\n                + \"refresh token.\");\n        }\n\n        URL url = null;\n        try {\n            url = new URL(this.tokenURL);\n        } catch (MalformedURLException e) {\n            this.refreshLock.writeLock().unlock();\n            assert false : \"An invalid refresh URL indicates a bug in the SDK.\";\n            throw new RuntimeException(\"An invalid refresh URL indicates a bug in the SDK.\", e);\n        }\n\n        String urlParameters = String.format(\"grant_type=refresh_token&refresh_token=%s&client_id=%s&client_secret=%s\",\n            this.refreshToken, this.clientID, this.clientSecret);\n\n        BoxAPIRequest request = new BoxAPIRequest(this, url, \"POST\");\n        request.shouldAuthenticate(false);\n        request.setBody(urlParameters);\n\n        String json;\n        try {\n            BoxJSONResponse response = (BoxJSONResponse) request.send();\n            json = response.getJSON();\n        } catch (BoxAPIException e) {\n            this.notifyError(e);\n            this.refreshLock.writeLock().unlock();\n            throw e;\n        }\n\n        JsonObject jsonObject = JsonObject.readFrom(json);\n        this.accessToken = jsonObject.get(\"access_token\").asString();\n        this.refreshToken = jsonObject.get(\"refresh_token\").asString();\n        this.lastRefresh = System.currentTimeMillis();\n        this.expires = jsonObject.get(\"expires_in\").asLong() * 1000;\n\n        this.notifyRefresh();\n\n        this.refreshLock.writeLock().unlock();\n    }", "@Deprecated\n    public ListGroupsResult withGroups(java.util.Collection<Group> groups) {\n        setGroups(groups);\n        return this;\n    }", "Node < K , V > findFirst ( ) { for ( ; ; ) { Node < K , V > b = head . node ; Node < K , V > n = b . next ; if ( n == null ) return null ; if ( n . value != null ) return n ; n . helpDelete ( b , n . next ) ; } }", "@Trivial\n    private Root keepCheckPointForReposOnly(Root searchDO, String reposId) {\n        Root retDO = new Root();\n        Map<String, Control> ctrlsMap = ControlsHelper.getControlMap(searchDO);\n        ChangeControl changeCtrl = (ChangeControl) ctrlsMap.get(DO_CHANGE_CONTROL);\n        ChangeControl returnChangeControl = new ChangeControl();\n        CheckPointType returnCheckPoint = new CheckPointType();\n        returnChangeControl.getCheckPoint().add(returnCheckPoint);\n        retDO.getControls().add(returnChangeControl);\n        List<CheckPointType> checkPointList = changeCtrl.getCheckPoint();\n        if (checkPointList != null) {\n            for (CheckPointType checkPointDO : checkPointList) {\n                if (checkPointDO.getRepositoryId().equals(reposId)) {\n                    returnCheckPoint.setRepositoryCheckPoint(checkPointDO.getRepositoryCheckPoint());\n                    returnCheckPoint.setRepositoryId(checkPointDO.getRepositoryId());\n                }\n            }\n        }\n        return retDO;\n    }", "public long date ( ) { return dateHeader ( HEADER_DATE ) ; }", "void initializeDatabase ( ) throws CouldntInitializeDatabaseException , CouldntLoadDataException ;", "public JobService card ( JobState state , Handler < AsyncResult < Long > > handler ) { delegate . card ( state , handler ) ; return this ; }", "    public void init() {\n        callee = (Ant) getProject().createTask(\"ant\");\n        callee.setOwningTarget(getOwningTarget());\n        callee.setTaskName(getTaskName());\n        callee.setLocation(getLocation());\n        callee.init();\n    }\n", "public EmbeddedResponse getEmbeddedSignUrl(String signatureId) throws HelloSignException {\n        String url = BASE_URI + EMBEDDED_SIGN_URL_URI + \"/\" + signatureId;\n        return new EmbeddedResponse(httpClient.withAuth(auth).post(url).asJson());\n    }", "protected void connectBottom(GrayS32 input, GrayS32 output) {\n\t\tfor( int x = 0; x < input.width-1; x++ ) {\n\t\t\tint y = input.height-1;\n\n\t\t\tint inputLabel = input.unsafe_get(x,y);\n\t\t\tint outputLabel = output.unsafe_get(x,y);\n\n\t\t\tif( outputLabel == -1 ) { // see if it needs to create a new output segment\n\t\t\t\toutputLabel = regionMemberCount.size;\n\t\t\t\toutput.unsafe_set(x,y,outputLabel);\n\t\t\t\tregionMemberCount.add(1);\n\t\t\t\tmergeList.add(outputLabel);\n\t\t\t}\n\n\t\t\t// for 4 and 8 connect the check is only +1 x and 0 y\n\t\t\tif( inputLabel == input.unsafe_get(x+1,y) ) {\n\t\t\t\tint outputAdj = output.unsafe_get(x+1,y);\n\t\t\t\tif( outputAdj == -1 ) {  // see if not assigned\n\t\t\t\t\tregionMemberCount.data[outputLabel]++;\n\t\t\t\t\toutput.unsafe_set(x+1,y, outputLabel);\n\t\t\t\t} else if( outputLabel != outputAdj ) { // see if assigned to different regions\n\t\t\t\t\tmarkMerge(outputLabel,outputAdj);\n\t\t\t\t} // do nothing, same input and output labels\n\t\t\t}\n\t\t}\n\t}", "protected boolean checkTopicsForInvalidDuplicates(final ContentSpec contentSpec) {\n        boolean valid = true;\n\n        // Find all Topics that have two or more different revisions\n        final List<ITopicNode> allTopicNodes = contentSpec.getAllTopicNodes();\n        final Map<Integer, Map<Integer, Set<ITopicNode>>> invalidTopicNodes = new HashMap<Integer, Map<Integer, Set<ITopicNode>>>();\n\n        for (final ITopicNode topicNode1 : allTopicNodes) {\n            if (!topicNode1.isTopicAnExistingTopic()) continue;\n\n            for (final ITopicNode topicNode2 : allTopicNodes) {\n                // If the Topic isn't an existing topic and doesn't match the first spec topic's id, then continue\n                if (topicNode1 == topicNode2 || !topicNode2.isTopicAnExistingTopic() || !topicNode1.getDBId().equals(topicNode2.getDBId()))\n                    continue;\n\n                // Check if the revisions between the two topics are the same\n                if (topicNode1.getRevision() == null && topicNode2.getRevision() != null || topicNode1.getRevision() != null &&\n                        topicNode2.getRevision() == null || topicNode1.getRevision() != null && !topicNode1.getRevision().equals(\n                        topicNode2.getRevision())) {\n                    if (!invalidTopicNodes.containsKey(topicNode1.getDBId())) {\n                        invalidTopicNodes.put(topicNode1.getDBId(), new HashMap<Integer, Set<ITopicNode>>());\n                    }\n\n                    final Map<Integer, Set<ITopicNode>> revisionsToTopicNode = invalidTopicNodes.get(topicNode1.getDBId());\n                    if (!revisionsToTopicNode.containsKey(topicNode1.getRevision())) {\n                        revisionsToTopicNode.put(topicNode1.getRevision(), new HashSet<ITopicNode>());\n                    }\n\n                    revisionsToTopicNode.get(topicNode1.getRevision()).add(topicNode1);\n\n                    valid = false;\n                }\n            }\n        }\n\n        // Loop through and generate an error message for each invalid topic\n        for (final Entry<Integer, Map<Integer, Set<ITopicNode>>> entry : invalidTopicNodes.entrySet()) {\n            final Integer topicId = entry.getKey();\n            final Map<Integer, Set<ITopicNode>> revisionsToTopicNode = entry.getValue();\n\n            final List<String> revNumbers = new ArrayList<String>();\n            final List<Integer> revisions = new ArrayList<Integer>(revisionsToTopicNode.keySet());\n            Collections.sort(revisions, new NullNumberSort<Integer>());\n\n            for (final Integer revision : revisions) {\n                final List<ITopicNode> topicNodes = new ArrayList<ITopicNode>(revisionsToTopicNode.get(revision));\n\n                // Build up the line numbers message\n                final StringBuilder lineNumbers = new StringBuilder();\n                if (topicNodes.size() > 1) {\n                    // Sort the Topics by line numbers\n                    Collections.sort(topicNodes, new TopicNodeLineNumberComparator());\n\n                    for (int i = 0; i < topicNodes.size(); i++) {\n                        if (i == topicNodes.size() - 1) {\n                            lineNumbers.append(\" and \");\n                        } else if (lineNumbers.length() != 0) {\n                            lineNumbers.append(\", \");\n                        }\n\n                        lineNumbers.append(topicNodes.get(i).getLineNumber());\n                    }\n                } else if (topicNodes.size() == 1) {\n                    lineNumbers.append(topicNodes.get(0).getLineNumber());\n                }\n\n                // Build the revision message\n                revNumbers.add(\n                        String.format(ProcessorConstants.ERROR_TOPIC_WITH_DIFFERENT_REVS_REV_MSG, (revision == null ? \"Latest\" : revision),\n                                lineNumbers));\n            }\n\n            final StringBuilder message = new StringBuilder(String.format(ProcessorConstants.ERROR_TOPIC_WITH_DIFFERENT_REVS_MSG, topicId));\n            for (final String revNumber : revNumbers) {\n                message.append(String.format(ProcessorConstants.CSLINE_MSG, revNumber));\n            }\n\n            log.error(message.toString());\n        }\n\n        return valid;\n    }", "    public boolean first() throws SQLException {\n\n        checkClosed();\n        checkNotForwardOnly();\n\n        if (isOnInsertRow || isRowUpdated) {\n            throw Util.sqlExceptionSQL(ErrorCode.X_24513);\n        }\n\n        return navigator.first();\n    }\n", "protected String handleTime ( Time time ) { return time == null ? null : time . toString ( ) ; }", "private final double conditionalSurvivalProbability(int x,double v,int y,double t,double[] m){\n  double mt=m[0] + m[1];\n  if (v < 0 || v > t) {\n    throw new IllegalArgumentException(\"v must be non-negative and not exceed t\\n v=\" + v + \" t=\"+ t);\n  }\n else {\n    double a, b, c, d;\n    if (x == y) {\n      a=m[0] * m[1];\n      b=-a;\n      c=m[1 - x];\n      d=m[x];\n    }\n else {\n      a=m[1 - y];\n      b=m[1 - x];\n      c=1;\n      d=-1;\n    }\n    double exponent=(b * c - a * d) / (c * d * -mt);\n    double C=Math.pow(c * Math.exp(-mt * t) + d,-exponent);\n    return C * Math.exp(b * v / d) * Math.pow(d + c * Math.exp(-mt * (t - v)),exponent);\n  }\n}\n", "public void removeSelectionListener(ExplorerSelectionListener listener){\n  selectionListeners.remove(listener);\n}\n", "\tpublic void render() \n\t{\t\n\t\t/*\n\t\t * Each model will have its own texture. There is no way around this bind() method at the moment.\n\t\t * \n\t\t * The texture will be wrapped around the model based on the texture coordinates of the model.\n\t\t */\n\t\ttexture.bind();\n\t\t\n\t\tGL11.glRotatef(ANGLE_OFFSET, 0.0f, 0.0f, 1.0f);\n\t\t\n\t\t/*\n\t\t * Draw the model which was saved as an OpenGL list of vertices and faces.\n\t\t */\n\t\tGL11.glCallList(listID);\n\t}\n", "public static void checkAssignability(Object o, Class<?> type) {\n\t\tCOMPARISON_TYPE ctO = COMPARISON_TYPE.fromObject(o);\n\t\tCOMPARISON_TYPE ctT = COMPARISON_TYPE.fromClass(type);\n\t\ttry {\n\t\t\tCOMPARISON_TYPE.fromOperands(ctO, ctT);\n\t\t} catch (Exception e) {\n\t\t\tthrow DBLogger.newUser(\"Cannot assign \" + o.getClass() + \" to \" + type, e);\n\t\t}\n\t}", "public final void scoreCrossValidation(Job.ValidatedJob job, Frame source, Vec response, Frame[] cv_preds, long[] offsets) {\n    assert(offsets[0] == 0);\n    assert(offsets[offsets.length-1] == source.numRows());\n\n    //Hack to make a frame with the correct dimensions and vector group\n    Frame cv_pred = score(source);\n\n    // Stitch together the content of cv_pred from cv_preds\n    for (int i=0; i<cv_preds.length; ++i) {\n      // stitch probabilities (or regression values)\n      for (int c=(isClassifier() ? 1 : 0); c<cv_preds[i].numCols(); ++c) {\n        Vec.Writer vw = cv_pred.vec(c).open();\n        try {\n          for (long r=0; r < cv_preds[i].numRows(); ++r) {\n            vw.set(offsets[i] + r, cv_preds[i].vec(c).at(r));\n          }\n        } finally {\n          vw.close();\n        }\n      }\n      if (isClassifier()) {\n        // make labels\n        float[] probs = new float[cv_preds[i].numCols()];\n        Vec.Writer vw = cv_pred.vec(0).open();\n        try {\n          for (long r = 0; r < cv_preds[i].numRows(); ++r) {\n            //probs[0] stays 0, is not used in getPrediction\n            for (int c = 1; c < cv_preds[i].numCols(); ++c) {\n              probs[c] = (float) cv_preds[i].vec(c).at(r);\n            }\n            final int label = ModelUtils.getPrediction(probs, (int)r);\n            vw.set(offsets[i] + r, label);\n          }\n        } finally {\n          vw.close();\n        }\n      }\n    }\n\n    // Now score the model on the N folds\n    try {\n      AUC auc = nclasses() == 2 ? new AUC() : null;\n      water.api.ConfusionMatrix cm = new water.api.ConfusionMatrix();\n      HitRatio hr = isClassifier() ? new HitRatio() : null;\n      double cv_error = calcError(source, response, cv_pred, cv_pred, \"cross-validated\", true, 10, cm, auc, hr);\n      setCrossValidationError(job, cv_error, cm, auc == null ? null : auc.data(), hr);\n    } finally {\n      // cleanup temporary frame wit predictions\n      cv_pred.delete();\n    }\n  }", "public static < T > IOrderedList < T > createOrderedList ( ) { return new ExternallyLockedStoredList < T > ( BOOL_ ) ; }", "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=new Vector<Option>();\n  result.addElement(new Option(\"\\tGenerates randomly distributed instances in the cluster.\",\"A\",1,\"-A <range>\"));\n  result.addElement(new Option(\"\\tGenerates uniformly distributed instances in the cluster.\",\"U\",1,\"-U <range>\"));\n  result.addElement(new Option(\"\\tGenerates gaussian distributed instances in the cluster.\",\"G\",1,\"-G <range>\"));\n  result.addElement(new Option(\"\\tThe attribute min/max (-A and -U) or mean/stddev (-G) for\\n\" + \"\\tthe cluster.\",\"D\",1,\"-D <num>,<num>\"));\n  result.addElement(new Option(\"\\tThe range of number of instances per cluster (default \" + defaultMinInstNum() + \"..\"+ defaultMaxInstNum()+ \").\",\"N\",1,\"-N <num>..<num>\"));\n  result.addElement(new Option(\"\\tUses integer instead of continuous values (default continuous).\",\"I\",0,\"-I\"));\n  return result.elements();\n}\n", "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  ObjectInputStream.GetField fields=stream.readFields();\n  this.symbols=(DecimalFormatSymbols)fields.get(\"symbols\",null);\n  initNative(\"\");\n  ndf.setPositivePrefix((String)fields.get(\"positivePrefix\",\"\"));\n  ndf.setPositiveSuffix((String)fields.get(\"positiveSuffix\",\"\"));\n  ndf.setNegativePrefix((String)fields.get(\"negativePrefix\",\"-\"));\n  ndf.setNegativeSuffix((String)fields.get(\"negativeSuffix\",\"\"));\n  ndf.setMultiplier(fields.get(\"multiplier\",1));\n  ndf.setGroupingSize(fields.get(\"groupingSize\",(byte)3));\n  ndf.setGroupingUsed(fields.get(\"groupingUsed\",true));\n  ndf.setDecimalSeparatorAlwaysShown(fields.get(\"decimalSeparatorAlwaysShown\",false));\n  setRoundingMode((RoundingMode)fields.get(\"roundingMode\",RoundingMode.HALF_EVEN));\n  final int maximumIntegerDigits=fields.get(\"maximumIntegerDigits\",309);\n  final int minimumIntegerDigits=fields.get(\"minimumIntegerDigits\",309);\n  final int maximumFractionDigits=fields.get(\"maximumFractionDigits\",340);\n  final int minimumFractionDigits=fields.get(\"minimumFractionDigits\",340);\n  ndf.setMaximumIntegerDigits(maximumIntegerDigits);\n  super.setMaximumIntegerDigits(ndf.getMaximumIntegerDigits());\n  setMinimumIntegerDigits(minimumIntegerDigits);\n  setMinimumFractionDigits(minimumFractionDigits);\n  setMaximumFractionDigits(maximumFractionDigits);\n  setParseBigDecimal(fields.get(\"parseBigDecimal\",false));\n  if (fields.get(\"serialVersionOnStream\",0) < 3) {\n    setMaximumIntegerDigits(super.getMaximumIntegerDigits());\n    setMinimumIntegerDigits(super.getMinimumIntegerDigits());\n    setMaximumFractionDigits(super.getMaximumFractionDigits());\n    setMinimumFractionDigits(super.getMinimumFractionDigits());\n  }\n}\n", "public AuthorDTO toDTO(Author author){\n  return toDTO(author,1);\n}\n", "     public void setFocusThickness( int focusThickness ) {\n\t\tsuper.setFocusThickness(focusThickness);\n\t\tif ( unarmedBorder != null ) {\n\t\t\tunarmedBorder.setFocusThickness(focusThickness);\n\t\t}\n\t\tif ( armedBorder != null ) {\n\t\t\tarmedBorder.setFocusThickness(focusThickness);\n\t\t}\n\t\tif ( overBorder != null ) {\n\t\t\toverBorder.setFocusThickness(focusThickness);\n\t\t}\n\t}\n", "public abstract boolean acceptBranch ( Edge edge , InstructionHandle source ) ;", "private void initPanel ( ) { final JPanel mainPanel = new JPanel ( new BorderLayout ( ) ) ; mainPanel . setBorder ( new TitledBorder ( STR_ ) ) ; final JPanel inputPanel = new JPanel ( new BorderLayout ( ) ) ; inputPanel . setBorder ( new EmptyBorder ( NU", "    protected Icon getIcon() {\n        Icon mIcon = ((optionPane == null) ? null : optionPane.getIcon());\n\n        if ((mIcon == null) && (optionPane != null)) {\n            mIcon = getIconForType(optionPane.getMessageType());\n        }\n\n        return mIcon;\n    }\n", "public static double getScaleFactor(IAtomContainer container, double bondLength) {\n        double currentAverageBondLength = getBondLengthMedian(container);\n        if (currentAverageBondLength == 0 || Double.isNaN(currentAverageBondLength)) return 1;\n        return bondLength / currentAverageBondLength;\n    }", "@LayoutlibDelegate static long elapsedRealtimeNanos(){\n  return System.nanoTime() - sBootTimeNano;\n}\n", "    private void unComment(Pattern pattern, String patternName) {\n        Matcher m = pattern.matcher(content);\n        int endOfLast = 0;\n        StringBuffer uncommentedContent = new StringBuffer();\n        while (m.find()) {\n            uncommentedContent.append(content.substring(endOfLast, m.start()));\n            for (int i = m.start(); i < m.end(); i++) {\n                uncommentedContent.append(' ');\n            }\n            endOfLast = m.end();\n            java.util.logging.Logger.getLogger(\"org.makumba.syntaxpoint.comment\").fine(\n                \"UNCOMMENT \" + patternName + \" : \" + m.group());\n            addSyntaxPoints(m.start() + offset, m.end() + offset, patternName, null);\n        }\n        uncommentedContent.append(content.substring(endOfLast));\n        content = uncommentedContent.toString();\n    }\n", "private boolean canTune ( TunerChannel channel ) { if ( getMinFrequency ( ) < channel . getMinFrequency ( ) && getMaxFrequency ( ) > channel . getMaxFrequency ( ) ) { if ( mTunedChannels . isEmpty ( ) ) { return BOOL_ ; } else { int usableBandwidth = getUsableBandwidth ( ) ; long minLockedFrequency = mTunedChannels . first ( ) . getMinFrequency ( ) ; long maxLockedFrequency = mTunedChannels . last ( ) . getMaxFrequency ( ) ; if ( minLockedFrequency <= channel . getMinFrequency ( ) && channel . getMaxFrequency ( ) <= maxLockedFrequency ) { return BOOL_ ; } if ( channel . getMaxFrequency ( ) > minLockedFrequency && channel . getMaxFrequency ( ) - minLockedFrequency <= usableBandwidth ) { return BOOL_ ; } if ( channel . getMinFrequency ( ) <= maxLockedFrequency && maxLockedFrequency - channel . getMinFrequency ( ) <= usableBandwidth ) { return BOOL_ ; } } } return BOOL_ ; }", "public void destroy ( ) { super . destroy ( ) ; }", "private void createSubMenu(\r\n        CmsContextMenuItemWidget parentWidget,\r\n        ContextMenuItemState childState,\r\n        CmsContextMenuConnector connector) {\r\n\r\n        CmsContextMenuItemWidget childWidget = createEmptyItemWidget(\r\n            childState.getId(),\r\n            childState.getCaption(),\r\n            childState.getDescription(),\r\n            connector);\r\n        childWidget.setEnabled(childState.isEnabled());\r\n        childWidget.setSeparatorVisible(childState.isSeparator());\r\n        setStyleNames(childWidget, childState.getStyles());\r\n        parentWidget.addSubMenuItem(childWidget);\r\n\r\n        for (ContextMenuItemState child : childState.getChildren()) {\r\n            createSubMenu(childWidget, child, connector);\r\n        }\r\n    }", "public static ECKey signedMessageToKey(String message,String signatureBase64) throws SignatureException {\n  byte[] signatureEncoded;\n  try {\n    signatureEncoded=Base64.decode(signatureBase64);\n  }\n catch (  RuntimeException e) {\n    throw new SignatureException(\"Could not decode base64\",e);\n  }\n  if (signatureEncoded.length < 65)   throw new SignatureException(\"Signature truncated, expected 65 bytes and got \" + signatureEncoded.length);\n  int header=signatureEncoded[0] & 0xFF;\n  if (header < 27 || header > 34)   throw new SignatureException(\"Header byte out of range: \" + header);\n  BigInteger r=new BigInteger(1,Arrays.copyOfRange(signatureEncoded,1,33));\n  BigInteger s=new BigInteger(1,Arrays.copyOfRange(signatureEncoded,33,65));\n  ECDSASignature sig=new ECDSASignature(r,s);\n  byte[] messageBytes=Utils.formatMessageForSigning(message);\n  Sha256Hash messageHash=Sha256Hash.twiceOf(messageBytes);\n  boolean compressed=false;\n  if (header >= 31) {\n    compressed=true;\n    header-=4;\n  }\n  int recId=header - 27;\n  ECKey key=ECKey.recoverFromSignature(recId,sig,messageHash,compressed);\n  if (key == null)   throw new SignatureException(\"Could not recover public key from signature\");\n  return key;\n}\n", "private static void writeToLog(int level,long totalNanos,long count,ProfilingTimerNode parent,String taskName,Log log,String logAppendMessage){\n  if (log == null) {\n    return;\n  }\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < level; i++) {\n    sb.append('\\t');\n  }\n  String durationText=String.format(\"%s%s\",formatElapsed(totalNanos),count == 1 ? \"\" : String.format(\" across %d invocations, average: %s\",count,formatElapsed(totalNanos / count)));\n  String text=parent == null ? String.format(\"total time %s\",durationText) : String.format(\"[%s] took %s\",taskName,durationText);\n  sb.append(text);\n  sb.append(logAppendMessage);\n  log.info(sb.toString());\n}\n", "public void insertUpdate(DocumentEvent e){\n  if (!dirty) {\n    setDirty(true);\n  }\n}\n", "private static boolean tryEncoding(byte[] sig, byte b1, byte b2, byte b3,\n            byte b4) {\n        return ((sig[0] == b1) && (sig[1] == b2) && (sig[2] == b3) && (sig[3] == b4));\n    }", "public void save ( IMemento memento ) { IMemento historyMemento = memento . createChild ( rootNodeName ) ; Object [ ] items = getHistoryItems ( ) ; for ( int i = NUM_ ; i < items . length ; i ++ ) { Object item = items [ i ] ; IMemento elementMemento = hi", "    public boolean isAvailable() {\n    \t// The standalone runner sets an empty context name, otherwise the promiscuous option means that the servlet engine should use chunked encoding\n\treturn (SOCKET_SERVER_AVAIL && serverSocket!=null);\n    }\n", "private static CIMArgument modifyAnyCIMObjectPaths(Map<String,Object> keyMap,Object object){\n  if (keyMap == null || object == null) {\n    return null;\n  }\n  CIMArgument modifiedArgument=null;\n  CIMArgument argument=(CIMArgument)object;\n  Object cimPathRe", "public Artifact load(ArtifactName artifactName,File path) throws IOException {\n  Preconditions.checkArgument(path.exists(),\"Path must exist: \" + path);\n  Preconditions.checkArgument(path.isFile() || path.isDirectory(),\"Path must be a file or directory: \" + path);\n  if (path.isFile()) {\n    return loadFromJar(artifactName,path);\n  }\n  return loadFromDirectory(artifactName,path);\n}\n", "    public boolean isDiffAdded() {\n        return myIsDiffAdded;\n    }\n", "public ServiceFuture<List<DeletedSecretItem>> getDeletedSecretsAsync(final String vaultBaseUrl, final ListOperationCallback<DeletedSecretItem> serviceCallback) {\n        return AzureServiceFuture.fromPageResponse(\n            getDeletedSecretsSinglePageAsync(vaultBaseUrl),\n            new Func1<String, Observable<ServiceResponse<Page<DeletedSecretItem>>>>() {\n                @Override\n                public Observable<ServiceResponse<Page<DeletedSecretItem>>> call(String nextPageLink) {\n                    return getDeletedSecretsNextSinglePageAsync(nextPageLink);\n                }\n            },\n            serviceCallback);\n    }", "public void addCommandListener(String formName,ActionListener l){\n  if (localCommandListeners == null) {\n    localCommandListeners=new Hashtable();\n  }\n  EventDispatcher d=(EventDispatcher)localCommandListeners.get(formName);\n  if (d == null) {\n    d=new EventDispatcher();\n    localCommandListeners.put(formName,d);\n  }\n  d.addListener(l);\n}\n", "\tpublic Object getNamedValue(String name) {\n\t\tObject value = null;\n\t\tif (_localContext != null) {\n\t\t\tvalue = _localContext.getVars().get(name);\n\t\t}\n\t\tif (value != null)\n\t\t\treturn value;\n\t\tif (getParentTask() == null)\n\t\t\treturn null;\n\t\treturn getParentTask().getNamedValue(name);\n\t}\n", "    protected void checkElementTagName(Element xml) {\n        if (!TemplateFilterLocator.EXTENSION_TAG.equals(xml.getTagName()))\n            throw new IllegalArgumentException(\"<\"\n                    + TemplateFilterLocator.EXTENSION_TAG\n                    + \"> tag expected for declaration\");\n    }\n", "public long tileFeatureCount(LatLng latLng, double zoom) {\n        int zoomValue = (int) zoom;\n        long tileFeaturesCount = tileFeatureCount(latLng, zoomValue);\n        return tileFeaturesCount;\n    }", "public boolean hasType ( int aType ) { return ( this . typeCount ( aType ) > NUM_ ) ; }", "public void clearMovingPoints(){\n  movingPoints.clear();\n  spriteCountLabel.setText(Integer.toString(movingPoints.size()));\n  doPrepare();\n  stopTimer();\n}", "private void setActivatedOnViewGroup(@NonNull final ViewGroup viewGroup,\n                                         final boolean activated) {\n        viewGroup.setActivated(activated);\n\n        for (int i = 0; i < viewGroup.getChildCount(); i++) {\n            View child = viewGroup.getChildAt(i);\n\n            if (child instanceof ViewGroup) {\n                setActivatedOnViewGroup((ViewGroup) child, activated);\n            } else {\n                child.setActivated(activated);\n            }\n        }\n    }", "public void addSelectionListener(final NetworkSelectionListener l){\n  listenerList.add(NetworkSelectionListener.class,l);\n}\n", "public byte[] generateSignature() throws CryptoException {\n  int digSize=digest.getDigestSize();\n  int t=0;\n  int delta=0;\n  if (trailer == TRAILER_IMPLICIT) {\n    t=8;\n    delta=block.length - digSize - 1;\n    digest.doFinal(block,delta);\n    block[block.length - 1]=(byte)TRAILER_IMPLICIT;\n  }\n else {\n    t=16;\n    delta=block.length - digSize - 2;\n    digest.doFinal(block,delta);\n    block[block.length - 2]=(byte)(trailer >>> 8);\n    block[block.length - 1]=(byte)trailer;\n  }\n  byte header=0;\n  int x=(digSize + messageLength) * 8 + t + 4 - keyBits;\n  if (x > 0) {\n    int mR=messageLength - ((x + 7) / 8);\n    header=0x60;\n    delta-=mR;\n    System.arraycopy(mBuf,0,block,delta,mR);\n  }\n else {\n    header=0x40;\n    delta-=messageLength;\n    System.arraycopy(mBuf,0,block,delta,messageLength);\n  }\n  if ((delta - 1) > 0) {\n    for (int i=delta - 1; i != 0; i--) {\n      block[i]=(byte)0xbb;\n    }\n    block[delta - 1]^=(byte)0x01;\n    block[0]=(byte)0x0b;\n    block[0]|=header;\n  }\n else {\n    block[0]=(byte)0x0a;\n    block[0]|=header;\n  }\n  byte[] b=cipher.processBlock(block,0,block.length);\n  clearBlock(mBuf);\n  clearBlock(block);\n  return b;\n}\n", "void visitAttemptRecover(AttemptBlock attemptBlock,TemplateElement attemptedSection,RecoveryBlock recoverySection) throws TemplateException, IOException {\n  Writer prevOut=this.out;\n  StringWriter sw=new StringWriter();\n  this.out=sw;\n  TemplateException thrownException=null;\n  boolean lastFIRE=setFastInvalidReferenceExceptions(false);\n  boolean lastInAttemptBlock=inAttemptBlock;\n  try {\n    inAttemptBlock=true;\n    visit(attemptedSection);\n  }\n catch (  TemplateException te) {\n    thrownException=te;\n  }\n finally {\n    inAttemptBlock=lastInAttemptBlock;\n    setFastInvalidReferenceExceptions(lastFIRE);\n    this.out=prevOut;\n  }\n  if (thrownException != null) {\n    if (ATTEMPT_LOGGER.isDebugEnabled()) {\n      ATTEMPT_LOGGER.debug(\"Error in attempt block \" + attemptBlock.getStartLocationQuoted(),thrownException);\n    }\n    try {\n      recoveredErrorStack.add(thrownException);\n      visit(recoverySection);\n    }\n  finally {\n      recoveredErrorStack.remove(recoveredErrorStack.size() - 1);\n    }\n  }\n else {\n    out.write(sw.toString());\n  }\n}\n", "public <T> PropertyReaderContext<T> property(String propertyName, Class<T> targetType) {\n\t\treturn new SimplePropertyReaderContext<T>( classLoaderService, properties, propertyName, targetType );\n\t}", "void createFinish ( String instanceId ) { if ( ! isDomThread ( ) ) { throw new WXRuntimeException ( STR_ ) ; } WXDomStatement statement = mDomRegistries . get ( instanceId ) ; if ( statement == null ) { return ; } statement . createFinish ( ) ; }", "private Map<HiveObjectSpec,Table> createTableLookupMap(List<Table> tables){\n  Map<HiveObjectSpec,Table> specToTable=new HashMap<>();\n  for (  Table table : tables) {\n    HiveObjectSpec spec=new HiveObjectSpec(table);\n    specToTable.put(spec,table);\n  }\n  return specToTable;\n}\n", "   public R visit(ActivationTrigger n) {\n      R _ret=null;\n      n.f0.accept(this);\n      return _ret;\n   }\n", "private void addRepoListName ( String name , String id , String list ) throws JobPersistenceException , ResourceException { synchronized ( lock ) { logger . trace ( STR_ , name , id ) ; JsonValue map = getOrCreateRepo ( id ) ; String rev = map . get ( STR", "    public void addBusinessValidator(final IBeanValidator<T> validator) {\n        validators.add(validator);\n    }\n", "        private void collectText() {\n\n            if (textNodeCount > 1) {\n                // Copy the text in buffer into the first template text node.\n                firstTextNode.setText(textBuffer.toString());\n            }\n            textNodeCount = 0;\n        }\n", "\tprivate void updateInputContext(IEditorInput newInput, IEditorInput oldInput) throws Exception {\n\t\tObject value = null;\n\t\t// Retrieve the input context referenced by the old editor input and\n\t\t// remove it from the context manager\n\t\tif (inputContexts.containsKey(oldInput)) {\n\t\t\tvalue = inputContexts.remove(oldInput);\n\t\t} else {\n\t\t\tthrow new Exception(PDEUIMessages.InputContextManager_errorMessageInputContextNotFound);\n\t\t}\n\t\t// Re-insert the input context back into the context manager using the\n\t\t// new editor input as its key\n\t\tinputContexts.put(newInput, value);\n\t}\n", "public void abort() {\n    try {\n      super.close();\n    } catch (IOException ioe) {\n      LOG.warn(\"Unable to abort file \" + tmpFile, ioe);\n    }\n    if (!tmpFile.delete()) {\n      LOG.warn(\"Unable to delete tmp file during abort \" + tmpFile);\n    }\n  }", "\tprotected void addListeners() {\n\t\taddWindowListener(\n\t\t\tnew WindowAdapter() {\n\t\t\t\tpublic void windowClosing(WindowEvent event) {\n                    handleWindowClose();\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n", "private void notifyListenersBeforeRequest ( ) { synchronized ( listeners ) { for ( AbstractSerialTransportListener listener : listeners ) { listener . beforeRequestRead ( commPort ) ; } } }", "\tpublic void insertColumn( int index ) {\n\t\tif (index < 0 || index > this.numberOfColumns) {\n\t\t\tthrow new ArrayIndexOutOfBoundsException();\n\t\t}\n\t\tif (index == this.numberOfColumns) {\n\t\t\taddColumn();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tint cols = this.numberOfColumns;\n\t\tObject[][] newData = new Object[cols + 1][];\n\t\tObject[][] previousData = this.data;\n\t\tint source = 0;\n\t\tfor (int col = 0; col < newData.length; col++)\n\t\t{\n\t\t\tif (col == index) {\n\t\t\t\tnewData[col] = new Object[ this.numberOfRows];\n\t\t\t\tcol++;\n\t\t\t}\n\t\t\tnewData[col] = previousData[source];\n\t\t\tsource++;\n\t\t}\n\t\tthis.numberOfColumns = cols + 1;\n\t\tthis.data = newData;\n\t}\n", "public boolean removeParameter(final String paramName,final String paramValue) throws IllegalArgumentException {\n  LOG.trace(\"enter PostMethod.removeParameter(String, String)\");\n  if (paramName == null) {\n    throw new IllegalArgumentException(\"Parameter name may not be null\");\n  }\n  if (paramValue == null) {\n    throw new IllegalArgumentException(\"Parameter value may not be null\");\n  }\n  final Iterator iter=params.iterator();\n  while (iter.hasNext()) {\n    final NameValuePair pair=(NameValuePair)iter.next();\n    if (paramName.equals(pair.getName()) && paramValue.equals(pair.getValue())) {\n      iter.remove();\n      return true;\n    }\n  }\n  return false;\n}\n", "public void stop() {\n    if (httpHandler != null) {\n      httpHandler.shutdown();\n    }\n    if (server != null) {\n      ServerTools.print(\"Stopping server...\");\n      server.stop(5);\n      isRunning = false;\n      ServerTools.print(\"Server stopped\");\n    }\n  }", "public void merge(Rectangle rect){\n  float minX=Math.min(x,rect.x);\n  float maxX=Math.max(x + width,rect.x + rect.width);\n  x=minX;\n  width=maxX - minX;\n  float minY=Math.min(y,rect.y);\n  float maxY=Math.max(y + height,rect.y + rect.height);\n  y=minY;\n  height=maxY - minY;\n}\n", "public static int binHexToBytes(String sBinHex,byte[] data,int nSrcPos,int nDstPos,int nNumOfBytes){\n  int nStrLen=sBinHex.length();\n  int nAvailBytes=(nStrLen - nSrcPos) >> 1;\n  if (nAvailBytes < nNumOfBytes)   nNumOfBytes=nAvailBytes;\n  int nOutputCapacity=data.length - nDstPos;\n  if (nNumOfBytes > nOutputCapacity)   nNumOfBytes=nOutputCapacity;\n  int nResult=0;\n  for (int nI=0; nI < nNumOfBytes; nI++) {\n    byte bActByte=0;\n    boolean blConvertOK=true;\n    for (int nJ=0; nJ < 2; nJ++) {\n      bActByte<<=4;\n      char cActChar=sBinHex.charAt(nSrcPos++);\n      if ((cActChar >= 'a') && (cActChar <= 'f'))       bActByte|=(byte)(cActChar - 'a') + 10;\n else       if ((cActChar >= '0') && (cActChar <= '9'))       bActByte|=(byte)(cActChar - '0');\n else       blConvertOK=false;\n    }\n    if (blConvertOK) {\n      data[nDstPos++]=bActByte;\n      nResult++;\n    }\n  }\n  return nResult;\n}\n", "public static String trimSize(String str,int size){\n  if (str == null)   return str;\n  if (size <= 0)   throw new IllegalArgumentException(\"Trim size invalid: \" + size);\n  int length=str.length();\n  if (length < size / 2)   return str;\n  try {\n    byte[] bytes=str.getBytes(\"UTF-8\");\n    if (bytes.length <= size)     return str;\n    byte[] result=new byte[size];\n    System.arraycopy(bytes,0,result,0,size);\n    return new String(result,\"UTF-8\");\n  }\n catch (  UnsupportedEncodingException e) {\n    log.log(Level.SEVERE,str,e);\n  }\n  return str;\n}\n", "private ReconTypeHandler createReconTypeHandler ( ReconciliationService . ReconAction reconAction ) throws BadRequestException { switch ( reconAction ) { case recon : return new ReconTypeByQuery ( this ) ; case reconById : return new ReconTypeById ( this ", "public static byte[] convertXMLDSIGtoASN1(byte xmldsigBytes[]) throws IOException {\n  int rawLen=xmldsigBytes.length / 2;\n  int i;\n  for (i=rawLen; (i > 0) && (xmldsigBytes[rawLen - i] == 0); i--)   ;\n  int j=i;\n  if (xmldsigBytes[rawLen - i] < 0) {\n    j+=1;\n  }\n  int k;\n  for (k=rawLen; (k > 0) && (xmldsigBytes[2 * rawLen - k] == 0); k--)   ;\n  int l=k;\n  if (xmldsigBytes[2 * rawLen - k] < 0) {\n    l+=1;\n  }\n  int len=2 + j + 2+ l;\n  if (len > 255) {\n    throw new IOException(\"Invalid XMLDSIG format of ECDSA signature\");\n  }\n  int offset;\n  byte asn1Bytes[];\n  if (len < 128) {\n    asn1Bytes=new byte[2 + 2 + j+ 2+ l];\n    offset=1;\n  }\n else {\n    asn1Bytes=new byte[3 + 2 + j+ 2+ l];\n    asn1Bytes[1]=(byte)0x81;\n    offset=2;\n  }\n  asn1Bytes[0]=48;\n  asn1Bytes[offset++]=(byte)len;\n  asn1Bytes[offset++]=2;\n  asn1Bytes[offset++]=(byte)j;\n  System.arraycopy(xmldsigBytes,rawLen - i,asn1Bytes,(offset + j) - i,i);\n  offset+=j;\n  asn1Bytes[offset++]=2;\n  asn1Bytes[offset++]=(byte)l;\n  System.arraycopy(xmldsigBytes,2 * rawLen - k,asn1Bytes,(offset + l) - k,k);\n  return asn1Bytes;\n}\n", "    protected void cleanUp() throws JacsonException {\n        try{\n            if (protocol.equals(IMAP))\n                folder.setFlags(messages, new Flags(Flag.SEEN), true);\n            folder.close(true);\n        } catch(Exception e){\n            e.printStackTrace();\n            throw new JacsonException(\"Exception during cleanUp\", e);\n        }\n    }\n", "public void marshall(FailureDetails failureDetails, ProtocolMarshaller protocolMarshaller) {\n\n        if (failureDetails == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(failureDetails.getType(), TYPE_BINDING);\n            protocolMarshaller.marshall(failureDetails.getMessage(), MESSAGE_BINDING);\n            protocolMarshaller.marshall(failureDetails.getExternalExecutionId(), EXTERNALEXECUTIONID_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void addControlDependency(SDVariable controlDependency){\n        String cdN = controlDependency.getVarName();\n        String n = this.getVarName();\n        Variable v = sameDiff.getVariables().get(n);\n        if(v.getControlDeps() == null)\n            v.setControlDeps(new ArrayList<String>());\n        if(!v.getControlDeps().contains(cdN))\n            v.getControlDeps().add(cdN);\n\n        Variable v2 = sameDiff.getVariables().get(cdN);\n        if(v2.getControlDepsForVar() == null)\n            v2.setControlDepsForVar(new ArrayList<String>());\n        if(!v2.getControlDepsForVar().contains(n))\n            v2.getControlDepsForVar().add(n);\n    }", "    public int getY() {\n        toolkit.lockAWT();\n        try {\n            return y;\n        } finally {\n            toolkit.unlockAWT();\n        }\n    }\n", "public void receive(float newSample){\n  mBuffer.set(mBufferPointer,newSample);\n  mBufferPointer++;\n  if (mBufferPointer >= mBufferSize) {\n    mBufferPointer=0;\n  }\n  mDispatchFlag=!mDispatchFlag;\n  if (mDispatchFlag) {\n    float accumulator=0;\n    accumulator+=mCoefficients[mCenterCoefficient] * mBuffer.get(mIndexMap[mBufferPointer][mCenterCoefficientMapIndex]);\n    for (int x=0; x < mCenterCoefficientMapIndex; x+=2) {\n      accumulator+=mCoefficients[x] * (mBuffer.get(mIndexMap[mBufferPointer][x]) + mBuffer.get(mIndexMap[mBufferPointer][x + 1]));\n    }\n    if (mListener != null) {\n      mListener.receive((float)(accumulator * mGain));\n    }\n  }\n}\n", "\tpublic void clearData() {\n\t\tIterator itr = this.MAP.keySet().iterator();\n\t\twhile (itr.hasNext()) {\n\t\t\tList lt = (List) this.MAP.get(itr.next());\n\t\t\tlt.clear();\n\t\t}\n\t\tthis.MAP.clear();\n\t}\n", "void changedColor ( INaviView view , CNaviViewEdge edge , Color color ) ;", "    public Reservation includeAccountingType(Reservation reservation, AccountingEntryType accountingEntryType, BigDecimal credit, BigDecimal debit, String comments) {\n        //Create the new detail\n        ReservationDetail rd = new ReservationDetail();\n        rd.setComments(comments);\n        rd.setAccountingEntryType(accountingEntryType);\n        rd.setCredit(credit);\n        rd.setDebit(debit);\n        reservation.getDetail().add(rd);\n\n        //recalculate\n        calculateTotals(reservation);\n        \n        //Save reservation\n        reservationDAO.save(reservation);\n        return reservation;\n    }\n", "        public Multiply consolidated(){\n            return null;\n        }\n", "public AbstractColorChooserPanel removeChooserPanel(AbstractColorChooserPanel panel){\n  int containedAt=-1;\n  for (int i=0; i < chooserPanels.length; i++) {\n    if (chooserPanels[i] == panel) {\n      containedAt=i;\n      break;\n    }\n  }\n  if (containedAt == -1) {\n    throw new IllegalArgumentException(\"chooser panel not in this chooser\");\n  }\n  AbstractColorChooserPanel[] newArray=new AbstractColorChooserPanel[chooserPanels.length - 1];\n  if (containedAt == chooserPanels.length - 1) {\n    System.arraycopy(chooserPanels,0,newArray,0,newArray.length);\n  }\n else   if (containedAt == 0) {\n    System.arraycopy(chooserPanels,1,newArray,0,newArray.length);\n  }\n else {\n    System.arraycopy(chooserPanels,0,newArray,0,containedAt);\n    System.arraycopy(chooserPanels,containedAt + 1,newArray,containedAt,(chooserPanels.length - containedAt - 1));\n  }\n  setChooserPanels(newArray);\n  return panel;\n}\n", "    public void initialize(DBMonsterContext ctx) throws Exception {\n        random = (Random) ctx.getProperty(DBMonster.RANDOM_KEY);\n        if (minValue.compareTo(maxValue) > 0) {\n            throw new Exception(\"MinValue < maxValue\");\n        }\n    }\n", "    public void removeXySeries(String name) {\n        int place = 0;\n        int xySeriesCollectionSeriesCount = xySeriesCollection.getSeriesCount();\n        for (int index = 0; index < xySeriesCollectionSeriesCount; index++) {\n            if (xySeriesCollection.getSeries(index).getName().equals(name)) {\n                place = index;\n            }\n        }\n        if (existsXySeries(name)) {\n            xySeriesCollection.removeSeries(place);\n        }\n    }\n", "\tpublic boolean hasWarnings() {\n\t\tfor (int i = 0; i < _messages.size(); i++) {\n\t\t\tAdminMsg adminMsg = (AdminMsg)_messages.get(i);\n\t\t\tif (adminMsg.getType() == AdminMsg.WARNING) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n", "public static <T extends UIObject> String animate(final T widget, final String animation, final int count) {\n        return animate(widget, animation, count, -1, -1);\n    }", "public Collection<Response> findResponses(SearchCriteria criteria, Collection<Response> responses) {\n\t\tif (criteria == null) {\n\t\t\tthrow new IllegalArgumentException(\"criteria must be non-null\");\n\t\t}\n\t\t\n\t\tCollection<Response> matches = new ArrayList<Response>();\n\t\t\n\t\tUser user = criteria.getUser();\n\t\tCollection<String> detectionSystemIds = criteria.getDetectionSystemIds(); \n\t\tDateTime earliest = DateUtils.fromString(criteria.getEarliest());\n\t\t\n\t\tfor (Response response : responses) {\n\t\t\t//check user match if user specified\n\t\t\tboolean userMatch = (user != null) ? user.equals(response.getUser()) : true;\n\t\t\t\n\t\t\t//check detection system match if detection systems specified\n\t\t\tboolean detectionSystemMatch = (detectionSystemIds != null && detectionSystemIds.size() > 0) ? \n\t\t\t\t\tdetectionSystemIds.contains(response.getDetectionSystem().getDetectionSystemId()) : true;\n\t\t\t\n\t\t\tDateTime responseTimestamp = DateUtils.fromString(response.getTimestamp());\n\t\t\t\n\t\t\tboolean earliestMatch = (earliest != null) ? \n\t\t\t\t\t(earliest.isBefore(responseTimestamp) || earliest.isEqual(responseTimestamp))\n\t\t\t\t\t: true;\n\t\t\t\n\t\t\tif (userMatch && detectionSystemMatch && earliestMatch) {\n\t\t\t\tmatches.add(response);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn matches;\n\t}", "    public boolean isInternet() {\n        return m_isInternet;\n    }\n", "public synchronized void save(NvdCveInfo updatedValue) throws UpdateException {\n        if (updatedValue == null) {\n            return;\n        }\n        save(LAST_UPDATED_BASE + updatedValue.getId(), String.valueOf(updatedValue.getTimestamp()));\n    }", "public File resolve(String name,boolean isModule){\n  if (isModule && name.endsWith(\".tla\")) {\n    name=name.substring(0,name.length() - 4);\n  }\n  String sourceFileName;\n  if (isModule) {\n    sourceFileName=name + \".tla\";\n  }\n else {\n    sourceFileName=name;\n  }\n  File sourceFile=locate(sourceFileName);\n  return sourceFile;\n}\n", "        protected void add(final Measure measure) {\n            if (this.measures == Collections.EMPTY_LIST) {\n                this.measures = new ArrayList<Measure>();\n            }\n            this.measures.add(measure);\n        }\n", "public boolean canPerform ( String permissionName ) { if ( GlobalCapability . ADMINISTRATE_SERVER . equals ( permissionName ) ) { return canAdministrateServer ( ) ; } return ! access ( permissionName ) . isEmpty ( ) ; }", "public void distributeAndUpdateMapObjectsInIntervalSet(){\n  for (  InternalMapObject mapObject : mapObjects) {\n    for (    Interval interval : intervalSet.getIntervals()) {\n      if (mapObject.getValue() >= interval.getValueLow() && mapObject.getValue() <= interval.getValueHigh()) {\n        interval.addMember(mapObject);\n        mapObject.setInterval(interval);\n        break;\n      }\n    }\n  }\n}\n", "    public void stopMouth() {\n        if (tux.mouth.getMovingState())\n            tux.mouth.onAsync(1, TuxAPIConst.SSV_NDEF);\n    }\n", "\tpublic UrtHashtableArrayEntry (int elementType) {\n\t\tthis.elementType = elementType;\n\t}\n", "public static void mixin ( MetaClass self , List < Class > categoryClasses ) { MixinInMetaClass . mixinClassesToMetaClass ( self , categoryClasses ) ; }", "public void setCommerceDiscountUsageEntryLocalService(\n\t\tcom.liferay.commerce.discount.service.CommerceDiscountUsageEntryLocalService commerceDiscountUsageEntryLocalService) {\n\t\tthis.commerceDiscountUsageEntryLocalService = commerceDiscountUsageEntryLocalService;\n\t}", "public static String quoteString(String orig,String quote){\n  return quote + orig + quote;\n}\n", "    public int addLog(final EvolutionState state, final String owner){\n    \tFile file = openFile(state,owner.substring(owner.lastIndexOf(\".\")),\".stat\");\n        \n        try{\n        \tint log = state.output.addLog(file,Output.V_NO_GENERAL-1,false,\n                   !state.parameters.getBoolean(new Parameter(P_COMPRESS),null,false),\n                   state.parameters.getBoolean(new Parameter(P_COMPRESS),null,false));\n        \tlogtable.put(owner, log);\n        \treturn log;\n        }catch (IOException i){\n        \tstate.output.fatal(\"An IOException occurred while trying to create the log \" + file + \":\\n\" + i);\n        }\n        return -4;\n    }\n", "    public boolean generatesReferenceAreas() {\n        return false;\n    }\n", "public final AssertSubscriber<T> assertTerminated(){\n  if (cdl.getCount() != 0) {\n    throw new AssertionError(\"Not terminated\",null);\n  }\n  return this;\n}\n", "@Override\n    public void delete(Object entity, Object key)\n    {\n        // All Modifying Neo4J operations must be executed within a transaction\n        checkActiveTransaction();\n\n        GraphDatabaseService graphDb = getConnection();\n\n        // Find Node for this particular entity\n        EntityMetadata m = KunderaMetadataManager.getEntityMetadata(kunderaMetadata, entity.getClass());\n        Node node = mapper.searchNode(key, m, graphDb, true);\n        if (node != null)\n        {\n            // Remove this particular node, if not already deleted in current\n            // transaction\n            if (!((Neo4JTransaction) resource).containsNodeId(node.getId()))\n            {\n                node.delete();\n\n                // Manually remove node index if applicable\n                indexer.deleteNodeIndex(m, graphDb, node);\n\n                // Remove all relationship edges attached to this node\n                // (otherwise an\n                // exception is thrown)\n                for (Relationship relationship : node.getRelationships())\n                {\n                    relationship.delete();\n\n                    // Manually remove relationship index if applicable\n                    indexer.deleteRelationshipIndex(m, graphDb, relationship);\n                }\n\n                ((Neo4JTransaction) resource).addNodeId(node.getId());\n            }\n        }\n        else\n        {\n            if (log.isDebugEnabled())\n                log.debug(\"Entity to be deleted doesn't exist in graph. Doing nothing\");\n        }\n    }", "public List<Formation> listFormation(String appName) {\n        return connection.execute(new FormationList(appName), apiKey);\n    }", "public static void populateSigAlgs(KeyPairType keyPairType,PrivateKey privateKey,Provider provider,JComboBox<SignatureType> jcbSignatureAlgorithm) throws CryptoException {\n  List<SignatureType> sigAlgs;\nswitch (keyPairType) {\ncase RSA:\n    KeyInfo keyInfo=KeyPairUtil.getKeyInfo(privateKey);\n  sigAlgs=SignatureType.rsaSignatureTypes(keyInfo.getSize());\nbreak;\ncase DSA:\nsigAlgs=SignatureType.dsaSignatureTypes();\nbreak;\ncase EC:\ndefault :\nsigAlgs=SignatureType.ecdsaSignatureTypes();\n}\njcbSignatureAlgorithm.removeAllItems();\nfor (SignatureType sigAlg : sigAlgs) {\njcbSignatureAlgorithm.addItem(sigAlg);\n}\nif (sigAlgs.contains(SignatureType.SHA256_RSA)) {\njcbSignatureAlgorithm.setSelectedItem(SignatureType.SHA256_RSA);\n}\n else if (sigAlgs.contains(SignatureType.SHA256_ECDSA)) {\njcbSignatureAlgorithm.setSelectedItem(SignatureType.SHA256_ECDSA);\n}\n else if (sigAlgs.contains(SignatureType.SHA256_DSA)) {\njcbSignatureAlgorithm.setSelectedItem(SignatureType.SHA256_DSA);\n}\n else {\njcbSignatureAlgorithm.setSelectedIndex(0);\n}\n}\n", "public void addStore ( InstructionHandle handle , XField field ) { getLoadStoreCount ( field ) . storeCount ++ ; handleToFieldMap . put ( handle , field ) ; }", "public static boolean isRoot ( IFile module ) { Spec spec = Activator . getSpecManager ( ) . getSpecLoaded ( ) ; if ( spec == null ) { return BOOL_ ; } return spec . getRootFile ( ) . equals ( module ) ; }", "public static WebSocketFrame createPingFrame ( byte [ ] payload ) { return createPingFrame ( ) . setPayload ( payload ) ; }", "public String getRecordingTime() {\n\t\tID3v2TextFrameData frameData = extractTextFrameData(ID_RECTIME);\n\t\tif (frameData != null && frameData.getText() != null)\n\t\t\treturn frameData.getText().toString();\n\t\treturn null;\n\t}", "public void append(ResultEntry entry) throws IOException {\n  numberOfEntries++;\n  List<Solution> feasibleSolutions=new ArrayList<Solution>();\n  for (  Solution solution : entry.getPopulation()) {\n    if (!solution.violatesConstraints()) {\n      feasibleSo", "    private int charPos(UnicodeChar uc) {\n\n        if (uc == null) {\n            return -1;\n        }\n\n        int cp = uc.getCodePoint();\n        if (cp >= Unicode.OFFSET && cp <= Unicode.OFFSET + 0xff) {\n            cp = cp & 0xff;\n        } else {\n            // font: map code point to char position\n            Integer ipos = codepointmap.get(uc);\n            if (ipos != null) {\n                cp = ipos.intValue();\n            } else {\n                if (cp < 0 || cp > 255) {\n                    cp = -1;\n                }\n            }\n        }\n        return cp;\n    }\n", "public void addConstantFactor(String factorName, Factor factor) {\n    constantFactors.add(ReplicatedFactor.fromFactor(factor));\n    constantFactorNames.add(factorName);\n  }", "public boolean isFull ( ) { return slotPosition ( getNumRecords ( ) + NUM_ ) >= Buffer . BUFFER_SIZE ; }", "public void enable ( ) throws IOException { synchronized ( optOutLock ) { if ( isOptOut ( ) ) { configuration . set ( STR_ , BOOL_ ) ; configuration . save ( configurationFile ) ; } if ( task == null ) { start ( ) ; } } }", "public Lucene50StoredFieldsFormat(Mode mode){\n  this.mode=Objects.requireNonNull(mode);\n}\n", "public StunException ( int id ) { setID ( id ) ; }", "public static Function fromString(String name){\n  if (name != null) {\n    for (    Function func : Function.values()) {\n      if (name.equalsIgnoreCase(func.getName())) {\n        return func;\n      }\n    }\n  }\n  throw new IllegalArgumentException(name);\n}\n", "public void loadMappingFile(String fileName,MapType mapType,boolean reload,ProgressListener progress) throws CanceledException {\nswitch (mapType) {\ndefault :\ncase GI:\n{\n      if (giMap == null || reload) {\n        if (giMap != null) {\n          try {\n            giMap.close();\n          }\n catch (          IOException e) {\n            Basic.caught(e);\n          }\n        }\n        try {\n          this.giMap=giMapFactory.create(name2IdMap,fileName,progress);\n          loadedMaps.add(mapType);\n          activeMaps.add(mapType);\n          map2Filename.put(mapType,fileName);\n        }\n catch (        Exception e) {\n          if (e instanceof CanceledException)           throw (CanceledException)e;\n          Basic.caught(e);\n        }\n      }\n      break;\n    }\ncase Accession:\n{\n    if (accessionMap == null || reload) {\n      if (accessionMap != null) {\n        try {\n          accessionMap.close();\n        }\n catch (        IOException e) {\n          Basic.caught(e);\n        }\n      }\n      try {\n        this.accessionMap=accessionMapFactory.create(name2IdMap,fileName,progress);\n        loadedMaps.add(mapType);\n        activeMaps.add(mapType);\n        map2Filename.put(mapType,fileName);\n      }\n catch (      Exception e) {\n        if (e instanceof CanceledException)         throw (CanceledException)e;\n        Basic.caught(e);\n      }\n    }\n    break;\n  }\ncase Synonyms:\n{\n  if (synonymsMap == null || reload) {\n    if (synonymsMap != null) {\n      try {\n        synonymsMap.close();\n      }\n catch (      IOException e) {\n        Basic.caught(e);\n      }\n    }\n    final String2IntegerMap synonymsMap=new String2IntegerMap();\n    try {\n      synonymsMap.loadFile(name2IdMap,fileName,progress);\n      this.synonymsMap=synonymsMap;\n      loadedMaps.add(mapType);\n      activeMaps.add(mapType);\n      map2Filename.put(mapType,fileName);\n    }\n catch (    Exception e) {\n      if (e instanceof CanceledException)       throw (CanceledException)e;\n      Basic.caught(e);\n    }\n  }\n}\n}\n}\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "private boolean alreadyListening ( final INaviView view ) { return viewOpenCount ( view ) > NUM_ ; }", "public void updateAlertDefinition(StatAlertDefinition alertDefinition){\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Entered AdminDistributedSystemJmxImpl.updateAlertDefinition(StatAlertDefinition) *****\");\n  }\nsynchronized (ALERT_DEFINITIONS) {\n    ALERT_DEFINITIONS.put(Integer.valueOf(alertDefinition.getId()),alertDefinition);\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"AdminDistributedSystemJmxImpl.updateAlertDefinition : alertDefinition :: id={} :: {}\",alertDefinition.getId(),alertDefinition.getStringRepresentation());\n    }\n    notifyMembersForAlertDefinitionChange(alertDefinition);\n  }\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Exiting AdminDistributedSystemJmxImpl.updateAlertDefinition(StatAlertDefinition) *****\");\n  }\n}\n", "private void drawBackground ( final Graphics g ) { g . setColor ( m_bgColorOffset ) ; g . fillRect ( - m_firstColumn * m_charWidth , NUM_ , m_offsetViewWidth , getHeight ( ) ) ; }", "  public void updateMetrics() {\n    Counters counters = getCounters();\n    for (Counters.Group group : counters) {\n      jobMetrics.setTag(\"group\", group.getDisplayName());\n      for (Counters.Counter counter : group) {\n        jobMetrics.setTag(\"counter\", counter.getDisplayName());\n        jobMetrics.setMetric(\"value\", (float) counter.getCounter());\n        jobMetrics.update();\n      }\n    }\n  }\n", "public byte [ ] encode ( ) { char type = getAttributeType ( ) ; byte [ ] binValue = new byte [ HEADER_LENGTH + getDataLength ( ) ] ; binValue [ NUM_ ] = ( byte ) ( type > > NUM_ ) ; binValue [ NUM_ ] = ( byte ) ( type & NUM_ ) ; binValue [ NUM_ ] = ( byte ) ( getDataLength ( ) > > NUM_ ) ; binValue [ NUM_ ] = ( byte ) ( getDataLength ( ) & NUM_ ) ; binValue [ NUM_ ] = ( byte ) ( ( priority & NUM_ ) > > NUM_ ) ; binValue [ NUM_ ] = ( byte ) ( ( priority & NUM_ ) > > NUM_ ) ; binValue [ NUM_ ] = ( byte ) ( ( priority & NUM_ ) > > NUM_ ) ; binValue [ NUM_ ] = ( byte ) ( priority & NUM_ ) ; return binValue ; }", "  public double originalValue(double value)throws Exception{\n\n    if(m_Converter == null)\n      throw new IllegalStateException(\"Coverter table not defined yet!\");\n\t\n    for(int i=0; i < m_Converter.length; i++)\n      if((int)value == m_Converter[i])\n\treturn (double)i;\n\n    return -1;\n  }   \n", "    public String toCycListString(String sentence) {\n        try {\n            return(((CycList)((new CycListKifParser(cyc)).read(sentence))).cyclify());\n        } catch ( Exception e ) {\n            return null;\n        }\n    }\n", "    public void setBrakes (int value) {\n        try {\n        \tsendHeader (PLAYER_MSGTYPE_REQ, PLAYER_LIMB_BRAKES_REQ, 4);\n        \tXdrBufferEncodingStream xdr = new XdrBufferEncodingStream (4);\n        \txdr.beginEncoding (null, 0);\n        \txdr.xdrEncode", "public static void sleep ( Object self , long milliseconds ) { sleepImpl ( milliseconds , null ) ; }", "    public void checkEmail() throws Exception {\n        Pattern p = Pattern.compile(\"\\\\w+(\\\\.\\\\w+)*@\\\\w+\\\\.\\\\w+(\\\\.\\\\w+)*\");\n\t\tMatcher m = p.matcher(this.email);\n\t\tboolean b = m.matches();\n        if (!b)\n            throw new Exception(\"There seems to be an error with the email address you provided.<BR>\" +\n                                \"Please double-check your typing and make sure that you type a valid email address.<BR>\" +\n                                \"This is important since your password will be sent to that email address. 04\");\n    }\n", "public IdRange[] parseIdRange(ImapSession session) throws DecodingException {\n  if (session != null) {\n    char c=nextWordChar();\n    if (c == '$') {\n      consume();\n      return SearchResUtil.getSavedSequenceSet(session);\n    }\n  }\n  CharacterValidator validator=new MessageSetCharValidator();\n  String nextWord=consumeWord(validator,true);\n  int commaPos=nextWord.indexOf(',');\n  if (commaPos == -1) {\n    return new IdRange[]{parseRange(nextWord)};\n  }\n  ArrayList<IdRange> rangeList=new ArrayList<IdRange>();\n  int pos=0;\n  while (commaPos != -1) {\n    String range=nextWord.substring(pos,commaPos);\n    IdRange set=parseRange(range);\n    rangeList.add(set);\n    pos=commaPos + 1;\n    commaPos=nextWord.indexOf(',',pos);\n  }\n  String range=nextWord.substring(pos);\n  rangeList.add(parseRange(range));\n  List<IdRange> merged=IdRange.mergeRanges(rangeList);\n  return (IdRange[])merged.toArray(new IdRange[merged.size()]);\n}\n", "public void removeVersion(final SoftwareVersion version) throws LocalRepositoryException {\n  final String prefix=\"removeVersion=\" + version + \": \";\n  _log.debug(prefix);\n  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_REMOVE,version.toString()};\n  exec(prefix,cmd);\n  _log.info(prefix + \"Success!\");\n}\n", "private static void fix(IndexedSortable s, int pN, int pO, int rN, int rO) {\n\t\tif (s.compare(pN, pO, rN, rO) > 0) {\n\t\t\ts.swap(pN, pO, rN, rO);\n\t\t}\n\t}", "protected void evaluate(ExampleSetBasedPopulation population) throws OperatorException {\n  for (int i=0; i < population.getNumberOfIndividuals(); i++) {\n    evaluate(population.get(i));\n  }\n}\n", "\tprivate JLabel getJlFirstName() {\n\t\tif(jlFirstName == null) {\n\t\t\tjlFirstName = new JLabel(\"First name:\");\n\t\t}\n\n\t\treturn jlFirstName;\n\t}\n", "public synchronized void release(){\n  if (!done) {\n    ArrayList<LogConnection> cRefs=new ArrayList<LogConnection>(cursors.size());\n    for (    LogConnection c : cursors.keySet()) {\n      cRefs.add(c);\n    }\n    for (    LogConnection c : cRefs) {\n      releaseConnection(c);\n    }\n    cursors=null;\n    done=true;\n  }\n}\n", "private K highestKey ( ) { FastConcurrentSkipListMap . Node < K , V > n = hiNode ( ) ; if ( n != null ) { K last = n . key ; if ( inBounds ( last ) ) return last ; } throw new NoSuchElementException ( ) ; }", "protected void saveHistory(){\n  BufferedOutputStream str;\n  try {\n    str=new BufferedOutputStream(new FileOutputStream(getHistoryFilename()));\n    m_History.store(str,\"SQL-Viewer-History\");\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n", "public static boolean validateTypeSize ( final JTextField size ) { try { if ( size . getText ( ) . isEmpty ( ) || Integer . parseInt ( size . getText ( ) ) < NUM_ ) { return BOOL_ ; } } catch ( final NumberFormatException exception ) { return BOOL_ ; } re", "    synchronized public void newCorrelation(Object sender, Correlation newCorrelation) {\n        orbitBuffer.addLast(newCorrelation);\n        orbit.addSample(newCorrelation);\n        \n        // If the new sample causes the buffer to exceed its size, remove the \n        // oldest sample and adjust the statistics accordingly.\n        while ( orbitBuffer.size() > bufferSize ) {\n            Correlation oldCorrelation = orbitBuffer.removeFirst();\n            orbit.removeSample(oldCorrelation);\n        }\n        \n        orbitProxy.newOrbit(this, new OrbitRecord(orbit));\n    }\n", "public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int bandList[]){\n  if (x < this.minX) {\n    throw new RasterFormatException(\"x lies outside raster\");\n  }\n  if (y < this.minY) {\n    throw new RasterFormatException(\"y lies outside raster\");\n  }\n  if ((x + width < x) || (x + width > this.minX + this.width)) {\n    throw new RasterFormatException(\"(x + width) is outside raster\");\n  }\n  if ((y + height < y) || (y + height > this.minY + this.height)) {\n    throw new RasterFormatException(\"(y + height) is outside raster\");\n  }\n  SampleModel sm;\n  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList);\n else   sm=sampleModel;\n  int deltaX=x0 - x;\n  int deltaY=y0 - y;\n  return new IntegerInterleavedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);\n}\n", "    synchronized public void write(int b) throws IOException {\n        ensureOpen();\n        while (true) {\n            int res = Protocol.writeByte(parent.handle, b);\n            if (res != 0) {\n                // IMPL_NOTE: should EOFException be thrown if write fails?\n                return;\n            }\n        }\n    }\n", "    public void showPlayer(IPC pc) {\n        rounds.showPlayer(pc);\n    }\n", "    public void setSecurityRoleLink(SecurityRoleRef role) {\n        this.role = role;\n        if (role != null) {\n            this.manager = role.getDeploymentSettings();\n        }\n        RoleManager envManager = (RoleManager) manager.getProject().getSettings(RoleManager.class);\n        if (envManager != null) {\n            java.util.List roles = envManager.getSecurityRoles();\n            synchronized (roles) {\n                rolesLinkBox.removeAllItems();\n                Iterator iter = roles.iterator();\n                while (iter.hasNext()) {\n                    Object item = iter.next();\n                    rolesLinkBox.addItem(item);\n                }\n            }\n        }\n        if (role != null) {\n            rolesLinkBox.setSelectedItem(role.getRole());\n            roleName.setText(role.getName());\n        } else {\n            roleName.setText(\"\");\n        }\n    }\n", "public GSServerTransaction ( ) { super ( ) ; }", "public Pattern<T, F> until(IterativeCondition<F> untilCondition) {\n\t\tPreconditions.checkNotNull(untilCondition, \"The condition cannot be null\");\n\n\t\tif (this.untilCondition != null) {\n\t\t\tthrow new MalformedPatternException(\"Only one until condition can be ", "\tpublic void addImport(String name) {\n\t\tif(ZUtils.DEBUG) {\n\t\t\tZUtils.assert_(name != null);\n\t\t}\n\n\t\timports.add(name);\n\t}\n", "public static int fuzzyCompare(double a,double b,double tolerance){\n  if (tolerance < 0.0)   throw new IllegalArgumentException(\"The tolerance may not be negative\");\n  double difference=a - b;\n  return (Math.abs(difference) <= tolerance ? 0 : (difference > 0 ? 1 : -1));\n}\n", "@Override\n    public CreateSlotTypeVersionResult createSlotTypeVersion(CreateSlotTypeVersionRequest request) {\n        request = beforeClientExecution(request);\n        return executeCreateSlotTypeVersion(request);\n    }", "private List<IRuntimeClasspathEntry> dependenciesForProject(IJavaProject project) throws CoreException {\n  ArrayList<IRuntimeClasspathEntry> out=new ArrayList<IRuntimeClasspathEntry>();\n  String[] deps=JavaRuntime.computeDefaultRuntimeClassPath(project);\n  for (  String dep : deps) {\n    IRuntimeClasspathEntry cpEntry=JavaRuntime.newArchiveRuntimeClasspathEntry(new Path(dep));\n    out.add(cpEntry);\n  }\n  return out;\n}\n", "private void addToWrapper(EntityMetadata entityMetadata, AttributeWrapper wrapper, Object embeddedObject,\n            Attribute attrib, Attribute embeddedAttrib)\n    {\n        if (embeddedObject == null)\n        {\n            return;\n        }\n        \n        byte[] value = PropertyAccessorHelper.get(embeddedObject, (Field) attrib.getJavaMember());\n        byte[] name;\n        if (value != null)\n        {\n            if (embeddedAttrib == null)\n            {\n                name = getEncodedBytes(((AbstractAttribute) attrib).getJPAColumnName());\n            }\n            else\n            {\n                name = getEncodedBytes(getHashKey(embeddedAttrib.getName(),\n                        ((AbstractAttribute) attrib).getJPAColumnName()));\n            }\n            // add column name as key and value as value\n            wrapper.addColumn(name, value);\n            // // {tablename:columnname,hashcode} for value\n\n            // selective indexing.\n            if (entityMetadata.getIndexProperties().containsKey(((AbstractAttribute) attrib).getJPAColumnName()))\n            {\n                String valueAsStr = PropertyAccessorHelper.getString(embeddedObject, (Field) attrib.getJavaMember());\n                wrapper.addIndex(\n                        getHashKey(entityMetadata.getTableName(), ((AbstractAttribute) attrib).getJPAColumnName()),\n                        getDouble(valueAsStr));\n\n                wrapper.addIndex(\n                        getHashKey(entityMetadata.getTableName(),\n                                getHashKey(((AbstractAttribute) attrib).getJPAColumnName(), valueAsStr)),\n                        getDouble(valueAsStr));\n            }\n        }\n    }", "public static ValueTime convertTime(Time x,Calendar calendar){\n  if (calendar == null) {\n    throw DbException.getInvalidValueException(\"calendar\",null);\n  }\n  Calendar cal=(Calendar)calendar.clone();\n  cal.setTimeInMillis(x.getTime());\n  long nanos=nanosFromCalendar(cal);\n  return ValueTime.fromNanos(nanos);\n}\n", "    public void start() throws Exception {\n        m_pipeService = m_peerGroup.getPipeService();\n        m_resolverService = m_peerGroup.getResolverService();\n\n        m_resolverService.registerHandler(m_handlerName, this);\n\n        // create and bind unicast input pipe\n        m_uniPipeAdv = createUnicastPipeAdv(m_peerGroup);\n        m_pipeService.createInputPipe(m_uniPipeAdv, this);\n    }\n", "void resumeJobsContaining ( String jobGroupToken ) throws Exception ;", "void resumeTriggersStartingWith ( String triggerGroupPrefix ) throws Exception ;", "    protected void startup() {\n        show(new mainFrame(this));\n    }\n", "public void closeDocViewer(DocViewerPanel docPanel){\n  if (openDocs.size() == 1) {\n    return;\n  }\n  if (docPanel.hasBeenModfiedSinceSave()) {\n    Object[] options={\"Close Anyway\",\"Cancel\"};\n    int n=JOptionPane.showOptionDialog(null,\"Changes have been made to this document since you last saved.\\n\" + \"Would you like to continue closing this tab?\",\"Important Data May Be Lost\",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[1]);\n    if (n == 1) {\n      return;\n    }\n  }\n  openDocs.remove(docPanel);\n  docPanel.destroyAllUndoStates();\n  destroyDoc(docPanel.getDoc());\n  justClosedTab=true;\n  docTabs.remove(docPanel);\n  justClosedTab=false;\n}\n", "public Object add(Object data, int iOpenMode) throws DBException, RemoteException\n    {\n        m_objCurrentPhysicalRecord = NONE;\n        m_objCurrentLockedRecord = NONE;\n        m_objCurrentCacheRecord = NONE;\n        Object bookmark = m_tableRemote.add(data, iOpenMode);\n        if (m_iPhysicalLastRecordPlusOne != -1)\n            if ((cacheMode == CacheMode.CACHE_ON_WRITE) || (cacheMode == CacheMode.PASSIVE_CACHE))\n        {\n            if (m_mapCache != null)\n            {\n                m_mapCache.set(m_iPhysicalLastRecordPlusOne, data);\n                m_iPhysicalLastRecordPlusOne++;\n            }\n        }\n        return bookmark;\n    }", "public EmailBuilder from ( String fromAddress ) { this . from . add ( fromAddress ) ; return this ; }", "public static ChannelData decode ( byte binMessage [ ] , char offset , char arrayLen ) throws StunException { return decode ( binMessage , offset ) ; }", "private void validateJdbcExecutionRequest(JdbcExecutionRequest jdbcExecutionRequest){\n  Assert.notNull(jdbcExecutionRequest,\"JDBC execution request is required\");\n  validateJdbcConnection(jdbcExecutionRequest.getConnection());\n  validateJdbcStatements(jdbcExecutionRequest.getStatements());\n  validateS3PropertiesLocation(jdbcExecutionRequest.getS3PropertiesLocation());\n}\n", "public static void logExceptionRetrieveArchive(final Logger logger,\n\t\t\tfinal ArchiveDescription archive, final Exception e)\n\t{\n\n\t\tlogger.logException(Level.ERROR, \"Exception while accessing archive \"\n\t\t\t\t+ archive.toString(), e);\n\t}", "public static Date next ( Date self ) { return plus ( self , NUM_ ) ; }", "public List<IComment> appendComment(final String comment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException, com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException {\n  try {\n    return m_node.appendComment(comment);\n  }\n catch (  final CouldntSaveDataException exception) {\n    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException(exception);\n  }\ncatch (  final CouldntLoadDataException exception) {\n    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException(exception);\n  }\n}\n", "public static String dump(final ConfigDescriptor descriptor){\n  return String.format(\"Configuration Descriptor:%n\" + \"  bLength %18d%n\" + \"  bDescriptorType %10d%n\"+ \"  wTotalLength %13d%n\"+ \"  bNumInterfaces %11d%n\"+ \"  bConfigurationValue %6d%n\"+ \"  iConfiguration %11d%n\"+ \"  bmAttributes %13s%n\"+ \"    %s%n\"+ \"%s\"+ \"  bMaxPower %16smA%n\",descriptor.bLength(),descriptor.bDescriptorType(),descriptor.wTotalLength() & 0xffff,descriptor.bNumInterfaces() & 0xff,descriptor.bConfigurationValue() & 0xff,descriptor.iConfiguration() & 0xff,String.format(\"0x%02x\",descriptor.bmAttributes() & 0xff),((descriptor.bmAttributes() & 64) == 0) ? \"(Bus Powered)\" : \"Self Powered\",((descriptor.bmAttributes() & 32) == 0) ? \"\" : String.format(\"    Remote Wakeup%n\"),(descriptor.bMaxPower() & 0xff) * 2);\n}\n", "    public boolean contains(Object item) {\n    \tIterator it = list.iterator();\n    \twhile (it.hasNext()) {\n    \t\tVariable currVariable = (Variable) it.next();\n    \t\tif ( currVariable != null && currVariable.toString().equals(item.toString()) ) {\n    \t\t\tre", "protected void writeRow(Session session, Table t,\n                            Object[] data) throws IOException {\n\n        rowOut.reset();\n        rowOut.writeRow(data, t.getColumnTypes());\n        fileStreamOut.write(rowOut.getOutputStream().getBuffer(), 0,\n                            rowOut.size());\n\n        tableRowCount++;\n    }", "\tpublic void setFormatsByArgumentName(Map newFormats) {\n\t\tfor (int i = 0; i <= maxOffset; i++) {\n\t\t\tif (newFormats.containsKey(argumentNames[i])) {\n\t\t\t\tFormat f = (Format) newFormats.get(argumentNames[i]);\n\t\t\t\tformats[i] = f;\n\t\t\t}\n\t\t}\n\t}\n", "    public void layoutContainer(Container target){\n      Iterator iter = getLayers();\n      while( iter.hasNext() ) {\n          LayoutManager2 mgr =(LayoutManager2) getLayoutManager((Integer)iter.next());\n\t\t\t\t\tmgr.layoutContainer(target);\n      }\n\n\t\t}\n", "public abstract < R , A > R accept ( GenericVisitor < R , A > v , A arg ) ;", "public static <T extends Parameters> T parse(File file, T parameters) throws AponParseException {\n        return parse(file, null, parameters);\n    }", "private static boolean matchEntry ( EntryRep tmpl , EntryRep entry ) { if ( ! tmpl . eclass . isAssignableFrom ( entry . eclass ) || tmpl . fields . length > entry . fields . length ) return BOOL_ ; for ( int i = tmpl . fields . length ; -- i >= NUM_ ; ) ", "public boolean prepareConnection(String name,String password,String channel,String server,String ports){\n  fixServer=false;\n  if (c.getState() > Irc.STATE_OFFLINE) {\n    g.showMessage(\"Cannot connect: Already connected.\");\n    return false;\n  }\n  if (name == null || name.isEmpty() || password == null || password.isEmpty()) {\n    g.showMessage(\"Cannot connect: Incomplete login data.\");\n    return false;\n  }\n  String[] autojoin;\n  Set<String> openChannels=c.getOpenChannels();\n  if (channel == null) {\n    autojoin=new String[openChannels.size()];\n    openChannels.toArray(autojoin);\n  }\n else {\n    autojoin=Helper.parseChannels(channel);\n  }\n  if (autojoin.length == 0) {\n    g.showMessage(\"A channel to join has to be specified.\");\n    return false;\n  }\n  if (server == null || server.isEmpty()) {\n    g.showMessage(\"Invalid server specified.\");\n    return false;\n  }\n  closeAllChannelsExcept(autojoin);\n  settings.setString(\"username\",name);\n  if (channel != null) {\n    settings.setString(\"channel\",channel);\n  }\n  c.connect(server,ports,name,password,autojoin);\n  return true;\n}\n", "public void fill ( long val ) { Arrays . fill ( _data , NUM_ , _pos , val ) ; }", "public void addActivator(ActivatorModel activatorModel) throws IllegalIDException {\n        activatorModels.add(activatorModel);\n        crashCounter.put(activatorModel, new AtomicInteger(0));\n        permissionDeniedCounter.put(activatorModel, new AtomicInteger(0));\n        submitActivator(activatorModel);\n    }", "    protected void updateCapabilities() {\n      CheckBoxListModel\t\tmodel;\n      \n      model = (CheckBoxListModel) m_List.getModel();\n\n      for (Capability cap: Capability.values()) {\n\tif (model.getChecked(model.indexOf(cap)))\n          m_Capabilities.enable(cap);\n\telse\n\t  m_Capabilities.disable(cap);\n      }\n    }\n", "@Override\n    public D newDocument(String id, int expiry, T content, long cas, MutationToken mutationToken) {\n        LOGGER.warn(\"This transcoder ({}) does not support mutation tokens - this method is a \" +\n            \"stub and needs to be implemented on custom transcoders.\", this.getClass().getSimpleName());\n        return newDocument(id, expiry, content, cas);\n    }", "protected static InfoTopic transformInfoTopic(final CSNodeWrapper parentNode, final CSInfoNodeWrapper node) {\n        final InfoTopic infoTopic = new InfoTopic(node.getTopicId(), null);\n\n        // Basic data\n        infoTopic.setRevision(node.getTopicRevision());\n        infoTopic.setConditionStatement(node.getCondition());\n        infoTopic.setUniqueId(parentNode.getId() == null ? null : parentNode.getId().toString());\n\n        return infoTopic;\n    }", "public void endDocument() throws IOException {\n  _writer.flush();\n}\n", "  public ReportGroup setHideAtSucceedingRows(boolean hideAtSucceedingRows) {\n    this.hideAtSucceedingRows = hideAtSucceedingRows;\n    return this;\n  }\n", "private void failOnElapsedTimeout ( long now ) { if ( _timestamp > NUM_ && ( now - _timestamp > RESOURCE_TIMEOUT ) ) { throw new ResourceTimeoutException ( STR_ + this . getClass ( ) . getName ( ) + STR_ + RESOURCE_TIMEOUT + STR_ + STR_ + ( now - _timesta", "public IMouseState createNodeClickedLeftState ( final Node n , final MouseEvent event ) { final CNodeClickedLeftState < NodeType , EdgeType > state = new CNodeClickedLeftState < NodeType , EdgeType > ( this , m_graph , n ) ; m_factory . createNodeClickedL", "public static KNXAddress create(final XmlReader r) throws KNXMLException\n\t{\n\t\tif (r.getEventType() != XmlReader.START_ELEMENT)\n\t\t\tr.nextTag();\n\t\tif (r.getEventType() == XmlReader.START_ELEMENT) {\n\t\t\tfinal String type = r.getAttributeValue(null, ATTR_TYPE);\n\t\t\tif (GroupAddress.ATTR_GROUP.equals(type))\n\t\t\t\treturn new GroupAddress(r);\n\t\t\telse if (IndividualAddress.ATTR_IND.equals(type))\n\t\t\t\treturn new IndividualAddress(r);\n\t\t}\n\t\tthrow new KNXMLException(\"not a KNX address\", r);\n\t}", "public void init ( ) throws ServletException { }", "@Override\n    public Positions merge(Positions other) {\n\n        if (other instanceof SinglePosition) {\n\n            throw new IllegalArgumentException(\"Cannot merge single position and area children\");\n        } else if (other instanceof LinearPositions) {\n\n            LinearPositions that = (LinearPositions) other;\n            return builder().addLinearPosition(that).build();\n        } else if (other instanceof AreaPositions) {\n\n            AreaPositions that = (AreaPositions) other;\n            return MultiDimensionalPositions.builder().addAreaPosition(this).addAreaPosition(that).build();\n        } else {\n\n            return other.merge(this);\n        }\n    }", "    public void setPictureContent(PictureContentDto pictureContent, int index) {\n        //-- check bounds for index\n        if ((index < 0) || (index > pictureContentList.size()))\n            throw new IndexOutOfBoundsException();\n        \n        pictureContentList.set(index, pictureContent);\n    }\n", "  public MdrUmlClass getReturnType() {\n    for (Object parameterObj:method.getParameter()) {\n      Parameter parameter = (Parameter) parameterObj;\n      if (ParameterDirectionKindEnum.PDK_RETURN == parameter.getKind()) {\n        return new MdrUmlClass(parameter.getType());\n      }\n    }\n    return null;\n  }\n", "\tprotected void makeConsistent() throws PropagationFailureException {\n\t\tmakeSpan.setMin(completionTime.getMin()-beginTime.getMax()+1);\n\t\tmakeSpan.setMax(completionTime.getMax()-beginTime.getMin()+1);\n\n\t\tcompletionTime.setMin(beginTime.getMin()+(makeSpan.getMin()-1));\n\t\tcompletionTime.setMax(beginTime.getMax()+(makeSpan.getMax()-1));\n\n\t\tbeginTime.setMin(completionTime.getMin()-(makeSpan.getMax()-1));\n\t\tbeginTime.setMax(completionTime.getMax()-(makeSpan.getMin()-1));\n\t}\n", "    protected double getNumberOfSymbols(int iMinRank, int iMaxRank) {\n        double dSum = 0;\n        for (int iCnt=iMinRank; iCnt <= iMaxRank; iCnt++) {\n            dSum += SymbolsPerRank.getValue(iCnt);\n        }\n        return dSum;\n    }\n", "    public void decode(Decoder decoder) throws ASN1Exception, IOException {\n\tsuper.decode(decoder);\n\n\tASN1Type t;\n\tASN1OpenType o;\n\n\tt = bagValue_.getInnerType();\n\tif (t instanceof ASN1OpenType) {\n\t    o = (ASN1OpenType) t;\n\t    bagValue_.setInnerType(o.getInnerType());\n\t}\n\n    }\n", "void onEachDirectory(Consumer<File> consumer){\n  consumer.accept(getSnapshotDirectory());\n  consumer.accept(getLogDirectory());\n}\n", "public String zookeeperConnect ( ) { return effectiveConfig . getProperty ( STR_ , DEFAULT_ZK_CONNECT ) ; }", "    public Object next() {\n        // The call to Locator.findServices is not asynchronous, so when\n        // we get a ServiceURLEnumeration, the results are allready collected.\n        // For that reason, there is no need to wait here...\n        return nextElement();\n    }\n", "void readCheckpointDelta(TableKelp table,PageServiceImpl pageActor,ReadStream is,int length) throws IOException {\n  Row row=table.row();\n  int removeLength=row.removeLength();\n  int rowLength=row.length();\n  BlockLeaf block=_blocks[0];\n  long endPosition=is.position() + length;\n  int rowHead=block.rowHead();\n  int blobTail=block.getBlobTail();\n  long pos;\n  while ((pos=is.position()) < endPosition) {\n    int code=is.read();\n    is.unread();\n    code=code & CODE_MASK;\n    if (code == REMOVE) {\n      rowHead-=removeLength;\n      if (rowHead < blobTail) {\n        block=extendBlocks();\n        rowHead=BLOCK_SIZE - removeLength;\n        blobTail=0;\n      }\n      is.readAll(block.getBuffer(),rowHead,removeLength);\n    }\n else     if (code == INSERT) {\n      rowHead-=rowLength;\n      while ((blobTail=row.readCheckpoint(is,block.getBuffer(),rowHead,blobTail)) < 0) {\n        is.position(pos);\n        block=extendBlocks();\n        rowHead=BLOCK_SIZE - rowLength;\n        blobTail=0;\n      }\n    }\n else {\n      throw new IllegalStateException(L.l(\"{0} Corrupted checkpoint at pos={1} with code {2}\",this,pos,code));\n    }\n    block.rowHead(rowHead);\n    block.setBlobTail(blobTail);\n  }\n  clearDirty();\n  validate(table);\n}\n", "private void decodeLength(String[] arguments,int startPos,int lineNumber,List<LocalizableMessage> warnings) throws DecodeException {\n  int numArgs=arguments.length - startPos + 1;\n  if (numArgs == 2) {\n    randomType=RandomType.CHARS_FIXED;\n    try {\n      minLength=Integer.parseInt(arguments[startPos]);\n      if (minLength < 0) {\n        LocalizableMessage message=ERR_ENTRY_GENERATOR_TAG_INTEGER_BELOW_LOWER_BOUND.get(minLength,0,getName(),lineNumber);\n        throw DecodeException.fatalError(message);\n      }\n else       if (minLength == 0) {\n        LocalizableMessage message=WARN_ENTRY_GENERATOR_TAG_WARNING_EMPTY_VALUE.get(lineNumber);\n        warnings.add(message);\n      }\n    }\n catch (    NumberFormatException nfe) {\n      LocalizableMessage message=ERR_ENTRY_GENERATOR_TAG_CANNOT_PARSE_AS_INTEGER.get(arguments[startPos],getName(),lineNumber);\n      throw DecodeException.fatalError(message,nfe);\n    }\n  }\n else   if (numArgs == 3) {\n    randomType=RandomType.CHARS_VARIABLE;\n    try {\n      minLength=Integer.parseInt(arguments[startPos]);\n      if (minLength < 0) {\n        LocalizableMessage message=ERR_ENTRY_GENERATOR_TAG_INTEGER_BELOW_LOWER_BOUND.get(minLength,0,getName(),lineNumber);\n        throw DecodeException.fatalError(message);\n      }\n    }\n catch (    NumberFormatException nfe) {\n      LocalizableMessage message=ERR_ENTRY_GENERATOR_TAG_CANNOT_PARSE_AS_INTEGER.get(arguments[startPos],getName(),lineNumber);\n      throw DecodeException.fatalError(message,nfe);\n    }\n    try {\n      maxLength=Integer.parseInt(arguments[startPos + 1]);\n      lengthRange=maxLength - minLength + 1;\n      if (maxLength < minLength) {\n        LocalizableMessage message=ERR_ENTRY_GENERATOR_TAG_INTEGER_BELOW_LOWER_BOUND.get(maxLength,minLength,getName(),lineNumber);\n        throw DecodeException.fatalError(message);\n      }\n else       if (maxLength == 0) {\n        LocalizableMessage message=WARN_ENTRY_GENERATOR_TAG_WARNING_EMPTY_VALUE.get(lineNumber);\n        warnings.add(message);\n      }\n    }\n catch (    NumberFormatException nfe) {\n      LocalizableMessage message=ERR_ENTRY_GENERATOR_TAG_CANNOT_PARSE_AS_INTEGER.get(arguments[startPos + 1],getName(),lineNumber);\n      throw DecodeException.fatalError(message,nfe);\n    }\n  }\n else {\n    LocalizableMessage message=ERR_ENTRY_GENERATOR_TAG_INVALID_ARGUMENT_RANGE_COUNT.get(getName(),lineNumber,startPos + 1,startPos + 2,numArgs);\n    throw DecodeException.fatalError(message);\n  }\n}\n", "  private void writeLog(List mappingStatuses, Writer log) throws IOException {\n\n    for (Iterator iter = mappingStatuses.iterator(); iter.hasNext();) {\n\n      log.write(iter.next().toString());\n      log.write(\"\\n\");\n\n    }\n\n  }\n", "    public Section getSectionByName(String name){\n\tNodeList nl = document.getElementsByTagName(\"section\");\n\t//temporary element\n\tElement e;\n\tfor (int i =0; i<nl.getLength();++i){\n\t    assert nl.item(i).getNodeType() == Node.ELEMENT_NODE : nl.item(i).getNodeType();\n\t    e = (Element) nl.item(i);\n\t    if (e.getAttribute(\"name\").equals(name)){\n\t\t//gotcha\n\t\ttry{\n\t\t    Section s = new Section(e);\n\t\t    return s;\n\t\t}catch (SectionError se){\n\t\t    assert false :e.getTagName();\n\t\t}\n\t    }else{\n\t\tlog.debug(\"searching section \\\"\"+\n\t\t\tname+\"\\\", but found \\\"\"+e.getAttributeNode(\"name\").getValue()\n\t\t\t+\"\\\".\");\n\t    }\n\t}\n\treturn null;\n    }\n", "public void withReader ( Object cb ) { }", "private boolean parseInline(){\n  boolean res;\n  char c=peek();\n  if (c == '\\0') {\n    return false;\n  }\nswitch (c) {\ncase '\\n':\n    res=parseNewline();\n  break;\ncase '\\\\':\nres=parseBackslash();\nbreak;\ncase '`':\nres=parseBackticks();\nbreak;\ncase '[':\nres=parseOpenBracket();\nbreak;\ncase '!':\nres=parseBang();\nbreak;\ncase ']':\nres=parseCloseBracket();\nbreak;\ncase '<':\nres=parseAutolink() || parseHtmlInline();\nbreak;\ncase '&':\nres=parseEntity();\nbreak;\ndefault :\nboolean isDelimiter=delimiterCharacters.get(c);\nif (isDelimiter) {\nDelimiterProcessor delimiterProcessor=delimiterProcessors.get(c);\nres=parseDelimiters(delimiterProcessor,c);\n}\n else {\nres=parseString();\n}\nbreak;\n}\nif (!res) {\nindex++;\nString literal=String.valueOf(c);\nappendText(literal);\n}\nreturn true;\n}\n", "    protected void prepared(ITx tx) throws IllegalStateException {\n\n        Long id = tx.getStartTimestamp();\n\n        ITx tx2 = activeTx.remove(id);\n\n        if (tx2 == null)\n            throw new IllegalStateException(\"Not active: tx=\" + tx);\n\n        assert tx == tx2;\n\n        if (preparedTx.containsKey(id))\n            throw new IllegalStateException(\"Already preparing: tx=\" + tx);\n\n        preparedTx.put(id, tx);\n\n    }\n", "public void writeTo ( OutputStream out ) throws IOException { if ( ! closed ) { throw new IOException ( STR_ ) ; } if ( isInMemory ( ) ) { memoryOutputStream . writeTo ( out ) ; } else { FileInputStream fis = new FileInputStream ( outputFile ) ; try { IOU", "public void testDecodeAttributeBodyV6 ( ) throws StunException { byte [ ] attributeValue = msgFixture . requestedAddressFamilyV6 ; char offset = Attribute . HEADER_LENGTH ; char length = ( char ) ( attributeValue . length - offset ) ; requestedAddressFami", "    public void startNewGame() {\n\n        InitializeNewGame();\n    }\n", "\tpublic boolean attributesAreShowing() {\n\t\treturn showAttributes_;\n\t}\n", "public PubsubFuture < SubscriptionList > listSubscriptions ( final String project , final String pageToken ) { final String query = ( pageToken == null ) ? STR_ : STR_ + pageToken ; final String path = STR_ + project + STR_ + query ; return get ( STR_ , p", "\tpublic void createPartControl(Composite parent) {\n\t\tIActionBars bars = getViewSite().getActionBars();\n\t\tIStatusLineManager statusLine = bars.getStatusLineManager();\n\t\tthis.progressMonitor = statusLine.getProgressMonitor();\n\t\ttry {\n\t\t\tthis.createTableViewer(parent);\n\t\t} catch (SecurityException e) {\n\t\t\tthrow e;\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (NoSuchMethodException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (InstantiationException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n", "private static void addCommentLines ( final ZyLabelContent content , final INaviViewNode node , final List < IComment > localComment , final List < IComment > globalComment ) { Preconditions . checkNotNull ( content , STR_ ) ; final ColorsConfigItem colorSettings = ConfigManager . instance ( ) . getColorSettings ( ) ; if ( localComment != null ) { addCommentLines ( content , localComment , colorSettings . getLocalCommentColor ( ) , new CLocalNodeCommentWrapper ( node ) ) ; } if ( globalComment != null ) { addCommentLines ( content , globalComment , colorSettings . getGlobalCommentColor ( ) , new CGlobalNodeCommentWrapper ( node ) ) ; } }", "public void handleRequest(RequestContext rc) throws CLIException {\n  super.handleRequest(rc);\n  ldapLogin();\n  IOutput outputWriter=getOutputWriter();\n  try {\n    init(rc);\n    writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"ATTEMPT_ADD_AMSDK_PLUGIN\",params);\n    loadLDIFs();\n    String xmlData=loadDAIService();\n    addAMSDKSubSchema(xmlData);\n    loadDelegrationPolicies(xmlData);\n    updateServerConfigXML();\n    updateDSAMEUserPassword();\n    outputWriter.printlnMessage(params[0] + \": \" + getResourceString(\"datastore-add-amsdk-idrepo-plugin-succeeded\"));\n    writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"SUCCEED_ADD_AMSDK_PLUGIN\",params);\n  }\n catch (  Exception e) {\n    String[] p={\"Adding AMSDK plugin\",e.getMessage()};\n    writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_ADD_AMSDK_PLUGIN\",p);\n    outputWriter.printlnMessage(params[0] + \": \" + getResourceString(\"datastore-add-amsdk-idrepo-plugin-failed\")+ \": \"+ e.getMessage());\n  }\n}\n", "public static String encodeBytes(final byte[] source, final int options) {\n    return Base64.encodeBytes(source, 0, source.length, options);\n  }", "public List<NameType> executeQueryForDynamicColumn(String sql) throws Exception {\n\n\t\tStringWriter sw = new StringWriter(100);\n\t\tsw.append(sql);\n\n\t\tString sqlForHeader = sw.toString();\n\t\tLOG.info(\"call for chart dynamic columns = \" + sqlForHeader);\n\n\t\tResultSet rs = null;\n\t\tStatement stmt = null;\n\t\ttry {\n\t\t\tif (isProcedureCall(sqlForHeader)) {\n\t\t\t\tDialect dialect = DialectUtil.getDialect(con);\n\t\t\t\tCallableStatement cs = con.prepareCall(\"{\" + sqlForHeader + \"}\");\n\t\t\t\tstmt = cs;\n\t\t\t\tif (dialect.hasProcedureWithCursor()) {\n\t\t\t\t\tcs.registerOutParameter(1, dialect.getCursorSqlType());\n\t\t\t\t}\n\t\t\t\trs = cs.executeQuery();\n\t\t\t\tif (dialect.hasProcedureWithCursor()) {\n\t\t\t\t\trs = (ResultSet) (cs.getObject(1));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstmt = con.createStatement();\n\t\t\t\trs = stmt.executeQuery(sqlForHeader);\n\t\t\t}\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint columnCount = rsmd.getColumnCount();\n\t\t\tif (columnCount != 2) {\n\t\t\t\tthrow new QueryException(\"Column query must have two data columns : column name and column legend.\");\n\t\t\t}\n\n\t\t\tList<NameType> columnNames = new ArrayList<NameType>();\n\t\t\twhile (rs.next()) {\n\t\t\t\tcolumnNames.add(new NameType(rs.getString(1), rs.getString(2)));\n\t\t\t}\n\t\t\treturn columnNames;\n\t\t} finally {\n\t\t\tConnectionUtil.closeResultSet(rs);\n\t\t\tConnectionUtil.closeStatement(stmt);\n\t\t}\n\n\t}", "        public String filter(String string) {\n            StringBuffer output = new StringBuffer(string.length());\n            for (int i = 0; i < string.length(); ++i) {\n                char ch = string.charAt(i);\n                if (!(isDeleteCharacter(ch))) {\n                    output.append(ch);\n                }\n            }\n            return output.toString();\n        }\n", "\tprotected int runResourceValidations() {\n\t\tif (resourceValidationRunner != null) {\n\t\t\tlog.info(\"Running resourceValidations only\");\n\t\t\treturn resourceValidationRunner.runResourceValidations();\n\t\t}\n\t\treturn OK;\n\t}\n", "static ObjectName getMBeanObject(String serverName, String jmsResourceName) {\n\n        ObjectName jmsMBeanObjectName = null;\n        Hashtable<String, String> properties = new Hashtable<String, String>();\n\n        //construct JMSProvider MBean object name.\n        properties.put(KEY_J2EETYPE, KEY_JMSRESOURCE);\n\n        //as per JSR 77 spec,J2EEServer(i.e server name) is parent for JMSResource.\n        properties.put(KEY_JMS_PARENT, serverName);\n\n        //actual JMSResource name\n        properties.put(KEY_NAME, jmsResourceName);\n\n        try {\n            jmsMBeanObjectName = new ObjectName(DOMAIN_NAME, properties);\n        } catch (MalformedObjectNameException e) {\n            // ignore exceptions - This will never happen\n            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n                Tr.debug(tc, \"getMBeanObject\", e);\n        }\n\n        return jmsMBeanObjectName;\n    }", "public String configure(){\n  if (isConfigured()) {\n    return baseDir;\n  }\n  configData.put(\"DEPLOYMENT_URI\",uri);\n  configData.put(\"BASE_DIR\",baseDir);\n  return AMSetupServlet.configure(servletct,configData);\n}", "public void setSecurityGroupReferenceSet(java.util.Collection<SecurityGroupReference> securityGroupReferenceSet) {\n        if (securityGroupReferenceSet == null) {\n            this.securityGroupReferenceSet = null;\n            return;\n        }\n\n        this.securityGroupReferenceSet = new com.amazonaws.internal.SdkInternalList<SecurityGroupReference>(securityGroupReferenceSet);\n    }", "Union4 < First , Second , Third , Fourth > second ( Second value ) ;", "private double roundMGRS(double value){\n  double ivalue=Math.floor(value);\n  long ival;\n  double fraction=value - ivalue;\n  ival=(long)(ivalue);\n  if ((fraction > 0.5) || ((fraction == 0.5) && (ival % 2 == 1)))   ival++;\n  return (double)ival;\n}\n", "  public void setupLangMgr( EditorProject project )\n  { \n    langMgr = ( EdLangMgr )project.getObject( \"LanguageManager\" );\n    \n    if ( langMgr == null ) {\n      langMgr = new EdLangMgr( false, project.getUrl( \"LanguageList.properties\" ));   \n      proj", "Union5 < First , Second , Third , Fourth , Fifth > third ( Third value ) ;", "@Override\n    public void onRotationSensor(long timeStamp, float rotationW, float rotationX, float rotationY, float rotationZ,\n                                 float gyroX, float gyroY, float gyroZ) {\n        GVRCameraRig cameraRig = null;\n        if (mMainScene != null) {\n            cameraRig = mMainScene.getMainCameraRig();\n        }\n\n        if (cameraRig != null) {\n            cameraRig.setRotationSensorData(timeStamp, rotationW, rotationX, rotationY, rotationZ, gyroX, gyroY, gyroZ);\n            updateSensoredScene();\n        }\n    }", "public void check ( ) throws SQLException { checkModule ( STR_ , new Version ( OpenReplicatorManager . MAJOR , OpenReplicatorManager . MINOR , OpenReplicatorManager . SUFFIX ) ) ; checkModule ( STR_ , new Version ( THL . MAJOR , THL . MINOR , THL . SUFFIX", "public RequestMemoryCommand ( final int packetId , final IAddress address , final IAddress length ) { super ( DebugCommandType . CMD_READ_MEMORY , packetId ) ; Preconditions . checkNotNull ( address , STR_ ) ; Preconditions . checkNotNull ( length , STR_ ", "public abstract void onBuilding ( PipelineRule rule , GoNotificationMessage message ) throws Exception ;", "public SharedTreeNode makeLeftChildNode(SharedTreeNode parent) {\n    SharedTreeNode child = new SharedTreeNode(nodesArray.size(), parent, subgraphNumber, parent.getDepth() + 1);\n    nodesArray.add(child);\n    makeLeftEdge(parent, child);\n    return child;\n  }", "@Override public Segment intersect(long from,long to){\n  long start=Math.max(from,this.segmentStart);\n  long end=Math.min(to,this.segmentEnd);\n  if (start <= end) {\n    return new SegmentRange(start,end);\n  }\n else {\n    return null;\n  }\n}\n", "public boolean registerBugCategory ( BugCategory bc ) { String category = bc . getCategory ( ) ; if ( categoryDescriptionMap . get ( category ) != null ) { return BOOL_ ; } categoryDescriptionMap . put ( category , bc ) ; return BOOL_ ; }", "public IMultiPoint next(){\n  if (stack.empty()) {\n    throw new java.util.NoSuchElementException(\"Dimensional Traversal Iterator has no more elements\");\n  }\n  Moment m=stack.peek();\n  advance();\n  return m.node.point;\n}\n", "public static void registerDynamicTypeConverter(JavaDynamicTypeConverter theConverter){\n  if (!m_dynConverters.contains(theConverter)) {\n    m_dynConverters.addElement(theConverter);\n  }\n}\n", "    public int getRowCount() {\n        if (filters == null) return 0;\n        return filters.size();\n    }\n", "public DescribeLoadBalancerAttributesResult withAttributes(LoadBalancerAttribute... attributes) {\n        if (this.attributes == null) {\n            setAttributes(new java.util.ArrayList<LoadBalancerAttribute>(attributes.length));\n        }\n        for (LoadBalancerAttribute ele : attributes) {\n            this.attributes.add(ele);\n        }\n        return this;\n    }", "public Future < ReplDBMSHeader > flush ( String eventId ) throws InterruptedException , ReplicatorException { logger . info ( STR_ + eventId ) ; return watchForProcessedEventId ( eventId ) ; }", "public static < T > Set < T > plus ( Set < T > left , Iterable < T > right ) { return ( Set < T > ) plus ( ( Collection < T > ) left , asCollection ( right ) ) ; }", "public void processStatement(final Statement statement,long startTime,ResultSetFuture result){\n  report(startTime,statement,result);\n}\n", "    private void readNext(Archivator archivator) throws ArchivatorException {\n\n        //  store a new book to be sure there is one\n        Identifiable id = new Book(\"0-201-48539-7\", \"Java Design Patterns\",\n        \t\"James W. Cooper\", 2000, true);\n        archivator.writeObject(id);\n\n        //  read all objects and test it\n        Identifiable obj;\n        while ((obj = archivator.readNext(Book.class)) != null) {\n            assertTrue(obj.hasId());\n            cat.info(\"book \" + obj.getId() + \" read\");\n        }\n\n        //  now delete the stored book\n        archivator.deleteObject(id);\n    }\n", "public void start ( ) throws IOException , GeneralSecurityException , ConfigurationException { String keystoreAlias = null ; AuthenticationInfo authenticationInfo = null ; if ( useSSL ) { authenticationInfo = SecurityHelper . loadAuthenticationInformation ( TUNGSTEN_APPLICATION_NAME . REPLICATOR ) ; if ( authenticationInfo != null ) { keystoreAlias = authenticationInfo . getKeystoreAliasForConnectionType ( SecurityConf . KEYSTORE_ALIAS_REPLICATOR_MASTER_TO_SLAVE ) ; logger . info ( STR_ ) ; passwordManager = new PasswordManager ( authenticationInfo . getParentPropertiesFileLocation ( ) ) ; } } logger . info ( STR_ + storeName + STR_ + host + STR_ + port ) ; socketService = new ServerSocketService ( ) ; socketService . setAddress ( new InetSocketAddress ( host , port ) ) ; socketService . setUseSSL ( useSSL , keystoreAlias , authenticationInfo ) ; socketService . bind ( ) ; logger . info ( STR_ + socketService . getAddress ( ) + STR_ + socketService . getLocalPort ( ) + STR_ + useSSL ) ; thd = new Thread ( this , STR_ + storeName + STR_ + host + STR_ + port + STR_ ) ; thd . start ( ) ; }", "public void writeLargeTemplateSpreadsheetDownloadFile(List<TemplateTokenInfo> tokenNames,\n                                                          int entryCount,\n                                                          TemplateVariables constants,\n                                                          String filePath) throws TemplateException {\n\n        prepareWriter(filePath);\n        writeDownloadSpreadsheetHeader(tokenNames);\n\n        for (int i = 1; i < entryCount + 1; i++) {\n            writeSpreadsheetVariableRow(tokenNames, i, constants);\n        }\n\n        flushAndCloseWriter();\n    }", "public TriangulationPoint pointCW( TriangulationPoint point )\n    {\n        if( point == points[0] )\n        {\n            return points[2];\n        }\n        else if( point == points[1] )\n        {\n            return points[0];\n        }\n        else if( point == points[2] )\n        {\n            return points[1];\n        }\n        logger.error( \"point location error\" );\n        throw new RuntimeException(\"[FIXME] point location error\");\n    }", "public void addMediaListener(JingleMediaListener li) {\n        for (ContentNegotiator contentNegotiator : contentNegotiators) {\n            if (contentNegotiator.getMediaNegotiator() != null) {\n                contentNegotiator.getMediaNegotiator().addListener(li);\n            }\n        }\n\n    }", "public static boolean floatArrayEquals(float[] x,float[] y,float tol){\n  for (int i=0; i < x.length; i+=1) {\n    if (x[i] == 0) {\n      return y[i] == 0;\n    }\n    if (Math.abs((y[i] - x[i]) / x[i]) > tol) {\n      return false;\n    }\n  }\n  return true;\n}\n", "private String trimPrefix(final String className) {\n    for (final String prefix : this.dropPrefix) {\n      if (className.startsWith(prefix)) {\n        return className.substring(prefix.length());\n      }\n    }\n    return className;\n  }", "   public boolean intersects(Interval i) {\n      return (inf <= i.sup) && (i.inf <= sup);\n   }\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public void testGetDataLength ( ) { char expectedReturn = NUM_ ; char actualReturn = changeRequestAttribute . getDataLength ( ) ; assertEquals ( STR_ , expectedReturn , actualReturn ) ; }", "public static boolean hasBinary ( Context context , String binaryName ) { return getInternals ( ) . isBinaryAvailable ( context , binaryName ) ; }", "  public void setTypeGradient(int type, Color c1, Color c2) {\n    m_Type = type;\n    if(c1 != null)\n      m_Color1 = c1;\n    else\n      m_Color1 = Color.WHITE;\n    if(c2 != null)\n      m_Color2 = c2;\n    else\n      m_Color2 = Color.WHITE;\n    m_Image = null;\n    repaint();\n  }\n", "void removeFromTransferStack ( ) { getStack ( ) . remove ( this ) ; }", "public abstract boolean isMatch ( T t ) ;"], "comment": ["convert an object typically passed in as a parameter to the underlying type for this property", "compute pawn hash data for pos .", "notify replication node that an entry was removed", "advance one step forward or backward", "add authorization code grant token the caller app gets from oauth2 server .", "construct the listener to listen for any agent event", "called when we want to enable bluetooth", "returns the active service for this pod and path ' s hash .", "stores long value into object field .", "returns the root node", "makes and inserts a new tailored node into the list , after the one at index .", "copy the inflected word ' s binary data ( no charset decoding ) to a custom byte buffer .", "appends events to a stream asynchronously .", "when the aggregate data is created \" after \" the child data are created this method will add reference to all the child data in the parent moduleaggregate class .", "interim and final clusters ought to have same partition counts , same zones , and same node state .", "wrapper action to list task of a protocolable loaded in session", "attempts to identify the corresponding firmata sysex message object that responds to the identified sysexcommandbyte .", "add a new attribute to the interactor being built by this referentbuilder", "start an options request to the given url", "helper function to transform a crc using lookup table .", ". google . privacy . dlp . v2 . fixedsizebucketingconfig fixed _ size _ bucketing _ config = 5 ;", "calculates a spline to a trajectory .", "executes the bitcode file that is beforehand compiled by the native llvm compiler .", "performs a dynamic query on the database and returns the matching rows .", "if not in the event thread run via swingutilities . invokeandwait ( )", "decode a line using the default delimiter on the current system", "count the occurrences of the substring in string s .", "constructs a shortcomponentraster with the given samplemodel and databuffer .", "splits a string at the specified character .", "tests getting the name .", "utility method for viewing the results of a command .", "this method is called by outside scan that want to quit the scan and return the slholder to the factory", "deletes a type vertex - can be entity ( class type ) or just vertex ( struct / trait type )", "add source scanner to restart server when source change", "matches the spec by name or generic to the alljobmatcher", "a server - side method to respond to a getfile http request", "given a uid signal the entry as rewritten under the xtn", "implementation routine setadobepath", "searches for an instruction in a function .", "tests decoding of the software attribute .", "returns a copy of the given node or subtree with this document as its owner .", "returns a big list iterator over the elements in this big list .", "sets the expiry time of delegation token", "build an array of positions in geojson format .", "if the parameter is not a datatype identified in the specification return false", "dump instruction as byte code to stream out", "returns the length of the given vector .", "creates a cubic bezier renderable", "matches a type by a another matcher that is applied on any of its declared methods .", "replaces target file with source file .", "determines the set of base types that are affected by the changes made to the given base type .", "invoked after an element was added to a group node .", "gets the method linked to a builtin null value if the builtin has not any linked service", "transform a number into a float", "removes the \" file : / / \" prefix from the given uri string , if applicable .", "cast a object to a binary", "given a classdoc , return the name of its type ( class , interface , etc . ) .", "search all options and arguments of the given command", "shifts the bitmap pattern so that it will always start at a multiple of itself for any tile the pattern is used .", "returns the first subproblem for this problem", "returns the standard deviation of the entries in the input array using the precomputed mean value", "make a string out of a byte array and truncate it to a reasonable length .", "generates the instruction to return the top stack value to the caller .", "when the event type is payload extents return the set of class names for the classes of updated objects", "creates a traffic policy , which you use to create multiple dns resource record sets for one domain name ( such as example . com ) or one subdomain name ( such as www . example . com ) .", "override in specific database classes .", "remove any blank entries from the table .", "setter for m 1 relation presentation", "adds a synapse to the appropriate internal list .", "creates a serviceendpoint with name , endpoint , and binding .", "retrieves the static resource path for the given grails resource artifact ( controller / taglib etc . )", "get the table name .", "clears the buffer", "you are not supposed to instantiate this class .", "iterates through the given reader line by line .", "tests that the connection id is always integer .", "notfication that a session has been created .", "initializes the configuration with the command line arguments .", "add sql to handle a unique = true field .", "function to handle network disconnections .", "processes the base class call .", "an array of routingprofilesummary objects that include the arn , id , and name of the routing profile .", "cancel a currently running task .", "creates a qr - code which encodes data in the alphanumeric format", "visits a field of the class .", "add an instruction to the subroutine .", "partial application of the first parameter to a binary consumer .", "parses the given state provided by the replicator and guess a generic resourcestate from it", "determine whether a number is valid and finite .", "test whether sample binary arrays are correctly decoded .", "put values from the user .", "print out the option values", "transforms a string representing a uri into a uri object .", "process another control message", "creates a new instance .", "execute an http request calling the runnable after", "constructs a new imageloader .", "this method is called to ensure that the first callback is always a callerprincipalcallback irrespective of the order in which the callbacks are passed in by the resource adapter .", "format a certificate alias", "creates an answer from a functional interface - allows for a strongly typed answer to be created ideally in java 8", "verifies that the connection is open", "returns an iterator for the values that are assigned to the given containment feature .", "removes a previously added footer view .", "computing the norm as the euclidean norm squared i . e .", "common handling code for choosevisitors and chooseplugins options .", "adds a namedefiner point which is a secondary resolution target .", "this method is called to release this resource", "returns true if this column includes a tree toggle", "gets the title", "join a collection of strings , separated by a delimiter", "if you are going to change the graphics object in this method , you should make a copy of it first using the graphics . create ( ) method so the changes won ' t affect other layers .", "it checks whether the input substring after the given offset starts with the given prefix or not .", "initialize the object s featurepath for the given type .", "download reviews written by the user .", "sets the number of this voucher as the maxinum mumber 1", "performs an http get on the given url without authentication", "close a server socket and ignore any exceptions .", "creates and post event with provided event key .", "returns a factory class to instantiate a certain class .", "shuts down the executor and blocks until all tasks have completed execution", "describes the specified pin according to the policy note .", "the dopost method of the servlet .", "repack from nub 7 to nub 8 , remove all unnecessary 0 headings , and paste it into an existing byte array .", "clear all properties except the relationships .", "perform synchronous search based on specified ldap filter .", "recursively delete directory : used to clean up for clean start .", "loops while the stream exists", "resizes the parents recursively so that they contain the complete area of the resized child cell .", "clears the output area .", "initialise the calculator for re use with the existing or default values of parameters .", "simplified method form for invoking the publish operation .", "initialize scrollanimator to work with buttonmenu custom view , the listview used in this sample and an animation duration of 200 milliseconds .", "closes the specified stream .", "casts a value to a xml element", "a raw style query where you can pass any where clause and arguments .", "instantiates a new legend panel .", "decompresses the gzipped byte stream .", "adds a new item to the adapter ' s list .", "puts a submitted value of double type into the aggregate at the specified index position", "skip characters until the next character is the requested character .", "method to know if already exists one file with the same name in the same folder", "deletes a specific file", "create a new ck from a nic / password and force login", "verifies that the response corresponds to an operation succesful message", "stops the load operation .", "this method is used to initiate a release staging process using the artifactory release staging api .", "the type of a threat intel indicator .", "prevening create instance of this factory class .", "returns the message digest .", "set the locale used for formatting or parsing", "get applit information", "this method is called via reflection from the database .", "writes header of an array value .", "convert an array of object to a v8 array", "begin a standard fling with an initial velocity along each axis in pixels per second .", "returns the number of elements in the array .", "creates a new user scenario .", "calulate factorial of x", "check whether the statement starts with a whitespace .", "set a storage parameter for a table / partition .", "calculates the swing amounts for the given entity y axis", "handle the processed notification to update the statistics appropriately", "the date types returned by jmx calls are no the same as those accepted by", "sets the new boiler temperature and notifies observers if the new requested temperature is different from the current one", "computes the checksum for the font data using any ranges set for the calculation .", "onpulluptorefresh will be called only when the user has pulled from the end and released .", "turns the crs into a single line wkt", "this method creates a apropriate optimizer", "returns the type of the first related item", "returns the cluster wide value for this scheduler instance s id based on a system property", "creates a snapshot file for the given directory , log name , and snapshot index .", "decrypt a string", "a simple way to create a kanade - lucas - tomasi ( klt ) tracker .", "construct an archiveexception with a string and a cause", "method initialize creates a new thread that will try to connect to", "will wait until no element identified by the by is present .", "if the pressed figure is a textholder it can be edited otherwise a new text figure is created", "abstract method that was implemented", "add a printer to current thread s looper .", "clears the selected project and refreshes tables", "generation of peerlink tags .", "based on the input for scanning annotations , look for @ externalentrypoint and get the decorated name from it , if any .", "the inverse of the log function describing the curve .", "method responsible for reading back entity and relations using secondary indexes ( if it holds any relation ) , else retrieve row keys using lucene .", "creates renew subscribe request", "call this when you want to know the new location .", "parses only positive numbers", "converte un array di byte in una stringa che ne rappresenta il contenuto in formato esadecimale .", "sets the package pattern to match against .", "aborts the event handling thread .", "marshall the given parameter object .", "adds a new database to the database manager .", "evaluate one double operand", "sets the invalid values for the textbox", "publish a specific revision of a draft change .", "accepts the following parameter :", "adds a new item to the list , which is displayed in the list using a supplied label .", "this method determines if the argument is a valid state .", "returns a range of all the commerce countries .", "main processing method for the abstractcommand object", "returns the next revision .", "returns true if scripting is supported on this platform .", "get a list of job in certain state and type in range from to with order .", "instantiates a new elide .", "this method update charge table with chargeinfo object", "creates an instrumented thread pool that creates new threads as needed , but will reuse previously constructed threads when they are available , and uses the provided", "this method is used to convert the string value given to an appropriate representation .", "this will add routing information to the message .", "marshall the given parameter object .", "sets whether show the google maps scale control", "adds a host to the blacklist with the given timeout .", "search for pattern in string str", "update height as the objects makes an arc as it flies", "encodes the property name .", "resolve an identifier which may be the binary name of a class or the java name of a class or package .", "remote control previous button pushed callback", "ensure required tenant stores exist .", "persist the block list for the inode .", "init mouse listeners on the control", "fix bukkit s desire to have a folder name the same as vanilla s dimension name inside this folder s name .", "notifies the watcher that a new file is created .", "return the outer radius of the body tube", "a function for exporting a master list of stops for all routes .", "returns whether the configuration item list contains an error message or not .", "get table row", "polling with timeout utility function accept a boolean supplier that throws exception .", "returns the children of the receiver as an enumeration", "sends an adminrequest to this application ' s vm and waits for the adminreponse", "closes all connection pools .", "marshall the given parameter object .", "set this matrix to t * r * s * m , where t is a translation by the given ( tx , ty , tz ) ,", "get everything from the string from and excluding the first passed char .", "creates new dgetpassword dialog where the parent is a frame .", "returns html representation of a subtree", "format the download speed", "creates a unique new temporary directory under \" java . io . tmpdir \" .", "returns contents of the 256 - byte eeprom .", "cancels all running and scheduled display image tasks . br imageloader still can be used after calling this method .", "executed upon arrival of a packet at a recipient .", "frees the memory used by the kernel .", "apply the chunk parser to this input .", "updates a route table tags .", "returns the x coordinate of this node", "returns whether this media size attribute is equivalent to the passed in object", "cancel the slurm job by reading the jobid from the jobidfile .", "creates an empty schema .", "report position for an individual task .", "creates a new instance of encryptionservice .", "creates a printstream of the given charset , which passes its content to this stringprinter .", "a selector has been encountered .", "get a awt color from javafx color .", "add new page to adapter .", "prepare aql query to get all the manifest layers from artifactory .", "checks if the bundle name exists in the bundle list", "called when an entry is loaded into the space from an external data source .", "this reads menus from disk as xml and puts them into db4o and returns the menuitem it created in memory", "the display name is according to the locals display names", "return a previously allocated value .", "provide a skip fully method .", "remove itself from the parent panel", "attaches fields to the selection state of the selection button", "stops the service to lookup for network devices with the given service type .", "calculates the md5 checksum of a specified file .", "create a day of year expression ( range 1 - 356 )", "parses an argument list starting at the given index , populating the bound options object with the information collected .", "trigger reloading of the config file .", "takes a string that looks like \" a = b \" and adds that to this map .", "optional sets the gcgraceseconds that will be used when creating column families for types .", "this method registers the user", "removes a icon from the background icons list", "selects first non - null argument .", "generate version string separated by dots with the specified digit width .", "use our ui delegate for the specified ui control type .", "removes the waypoint at the given index", "returns whether the field is final .", "check if the given array contains the given value with case insensitive comparison .", "persists data to this files associated database mapping .", "pool for formated dates", "export in dot format as a sub graph", "creates a new instance of type font", "gets the setting for the key", "initialize the trellis backend with a root container and default acl quads .", "move all group instructions except for the root from the underlying method into the groups insnlist", "display information about the script as a string .", "multiplies this expression by this operand", "perform glb for a list of non - primitive , non - error , non - compound types ; redundant elements are removed .", "adds an item project or task to the timesheet", "checks if the last argument matches the vararg type .", "verify that the current access control context has permission to accept the connection being dispatched by the current thread .", "determines if we can process as if we were in quotes .", "adds a control to this editing element .", "invoked after a view was added to the project .", "triggered after synchronization of a transaction was completed successfully .", "sets the file with elements for direct editing", "method not supported", "calculate connections between clusters and merge clusters accordingly as long as connections exceed threshold", "adds a bestiole and connect it if the client is on mode sendallnewbestioles", "generate a list of units from the rat", "write out external representation for remote ref .", "reads the column cade page info from the given buffer , if supported for this db .", "gets a request that permanently deletes a bookmark from the trash", "check there are enough points to fill", "returns a flag that tells whether the dialog was closed through the ok button or whether it was canceled .", "creates an appropriate url resolver scanner for this url protocol .", "cloud archives billing items", "start a thread with a given name and the given closure as a runnable instance .", "return a boolean value from the object", "dispatches to the inherited version of this function , but makes sure that lenientparse is off .", "ensures that a required property has a default if unspecified .", "returns a string representation of this object .", "set the normal vector of this vertex", "called when the current event occurred when a gesture is in progress .", "sets the permissions associated with this shared link .", "the number of major faults that the process ' s waited - for children have made .", "tests if the passed in value contains the delimited property , ie & { property } or $ { property }", "detector for hexagonal grid of circles .", "compare these two keys and return the compare result .", "roughly the same as isvalid but also returns whether there was no info about a lock which can be assumed to be no lock", "takes a file and a pid and will stop the file with that pid from running , and remove the pid to app mapping from the app pid mapper", "sets the actual macro", "returns a mapping from grid index to the solutions occupying that grid index .", "makes the given visitor visit the annotations of this instruction .", "copy col group instance with deep copy of column indices but shallow copy of actual contents ;", "gets the curent contents of this byte stream as a byte array .", "called by the connmgr thread when a new connection is created .", "changes the scaley value to the specified values", "get a registered featureflag by name .", "checks that collection has specified format .", "makes a word from bytes", "returns a list which is a concatenation of times times the receiver .", "check to see if a string is a valid nmtoken according to [ 7 ] in the xml 1 . 0 recommendation", "start the scan", "get this object properties", "get the representative vector for a cluster model , or compute the centroid .", "process a connection lost notification", "filefilterutils is not normally instantiated .", "generates a string which consists of the tostrings ( ) of the provided exception and any linked or chained exceptions and initial causes .", "determine whether the provided eventdescriptor matches properties of this eventdescriptor", "not used in this context", "render diagnostics for the component .", "create a hash block input stream with choice of endian encoding", "creates the junit menu", "adds a new value to the series", "output the sql type for a java date .", "provides a new annotation instance .", "initialise using the supplied kernel width for all continuous variables", "construct using an instantiation of the given mi class", "retrieves the list of interconnect locations available to the specified project .", "extract exec or tail command ( handle label )", "returns the arithmetic mean of the given tuple", "the physical state of the substance", "serializes an object and returns the base64 - encoded version of that serialized object .", "this method converts a pem encoded certificate to der encoded", "process a response to a request to delete snapshots .", "assumes the subj / queuename checks are done , does check for closed status", "set the child at the given index in this node .", "this will invalidate the entire cache .", "called before space becomes backup .", "the modification states of the workspace .", "enable this to completely skip phase 4", "a principalentry consists of the principal class and principal name .", "encodes a byte array as a string without using a charset to ensure that the exact bytes can be retrieved on decode .", "connect the selected player to the server .", "a useful helper for development purposes .", "get polling period of an attribute or a command", "add a public interface class to the types of this compilation unit", "determine if the given instruction is the site where a resource is closed .", "sets the description in the current task dialog", "returns the specified address resource .", "write the object to disk .", "builds a list of messaging contexts .", "appends a new comment to the node .", "set values including customizable info", "returns the colors from a color integer map entry .", "returns true if this booking is prioritized", "gets the job status .", "special version for double arrays .", "check if the message quota for this worker has been reached and then block for a few seconds", "removes all of the mappings from this map .", "invoked after the name of the function changed .", "put the query param into map", "checks if is enabled .", "gets the extension of a filename .", "creates a new xmlwriter that will write its data to the supplied writer .", "deletes a key value pair from the map .", "instantiates a new primer pack .", "paints the border of a check box menu item .", "returns this datagram into the pool of reusable datagram objects", "adds a list of breakpoints to the breakpoint manager .", "add a preexisting resource .", "constructs an extension with the given urn .", "method to convert a name to an id values", "performs simple validity checks on when constructing a child scope .", "build the error message for this module .", "removes a packet listener from this virtual device", "serialize a content into a targeted file , checking that the parent directory exists .", "release a connection that has previously been taken from the pool", "prevents the pool from accepting any further entitymanager instances and closes all entitymanager instances currently in the pool .", "assign the exclusive buffers to all remote input channels directly for credit - based mode .", "invoked after a local function node comment has been deleted .", "rehashes the map to the new capacity .", "skips faces - resources , index , error or logon pages", "converts an image from rgb into hsv .", "returns the bcc field for the email", "write the list of import statements for referenced types if they do not belong to the same package like the given class", "prints out a message when the minuetowindow loses the focus", "creates a new listener wrapper .", "validate html with regular expression", "parses the response from a call to the remote process .", "produce a string from a number .", "helper function to synchronously wait , or timeout if the maximum threshold has been exceeded .", "calculate topocentric solar position , i . e . the location of the sun on the sky for a certain point in time on a certain point of the earth ' s surface .", "method called to resolve namespace uris from attribute prefixes .", "creates a new function selection tree .", "insert records to temprecordfile for sorting , at most one block long", "returns the downside deviation , defined as the square root of the downside variance .", "public static method to validate system name format", "will write all the headers included in the request to the method", "add the element as a sibling of the given element", "as whether a given exception should be retried", "update the shard to last processed sequence number state .", "implementation of the right shift unsigned operator for integral types .", "exchanges the row aty1 with row aty2", "creates an ndarray with the specified shape", "why", "adds a container instance to this deployment node , optionally replicating all of the container - container relationships .", "initialize with a fixed reference date", "draws the image on the canvas .", "resets auto - fall back counters .", "writes the ulong at the given index in little endian format .", "create a new derivedfont .", "parses the stops . txt file ( from a gtfs feed ) and builds a map linking stop names to the stop ids .", "validate the given application for olap constraints .", "returns the children of this gpathresult as a gpathresult object .", "returns the ith solution in the set", "helper method that swaps all the elements of the array .", "main method of the model checker", "adds a json string representing an event with properties or a person record to the sqlitedatabase .", "persist the classlibrarybuilder to a file", "transforms coordinate in map coordinate system to screen coordinate system", "inserts the specified element at the front of this deque .", "returns an enumeration of all the filepermission objects in the container .", "overloaded get method , that always returns strings .", "get a new instance that can access the given class .", "describes the attributes for the specified application load balancer or network load balancer .", "returns the teninterval corresponding to the character at the specified offset in the string corresponding to this tep and all of its descendants", "setter for the ref attribute", "deletes a business object format .", "paints the background of the row containing a cell in a tree .", "renders the screen at each refresh", "return the number of elements in this set", "validates if all of the keys exist of none of them exist", "generate the create statement to create the specified table .", "returns when request succeeds", "create an external / configured server", "creates and initializes the scroll bars that are used to scroll through the data .", "this method enables a visitor implementation to visit this behavior type and its subordinates", "reads a command \" tag \" from the request .", "fill a byte buffer with a padding value .", "put a byte in the buffer .", "delegates term to the serviceproxy", "push the current xsltelementprocessor to the top of the stack .", "increase the usage count on an integer value .", "creates eclipse task markers for all input events locations in the selected app .", "droptungstencatalog removes tungsten catalog tables .", "validates the uncompressed settings .", "gets read - only view of backed queue in proper order .", "reads all available rows from the given cursor and returns a list of new imageto objects .", "pushes the indicated restriction attribute changes into both the ilf and plf versions of the layouts since this will only be done when editing a fragment .", "this is a very simple version of the above method for when an order by clause appears on a union .", "set the enabled disabled status of given detector .", "returns a pdfobject as a pdfarray resolving indirect references", "check whether the request matches a list of exclude patterns", "sax - ext attributes2 method ( don ' t invoke on parser ) ;", "compares two event ids using the file index and offset as determinants for collation .", "sets static lastdatabaseupdatetime to system . currenttimemillis ( ) .", "lays the radial menu items out based on the currently configured bounds information .", "draws an image , applying a transform from image space into user space before drawing .", "a new hub has been added", "reports the enabled status of the editor as set by setenabled", "initializes the buffer ' s page according to the specified formatter , and appends the page to the specified file .", "retrieve the jobs task number", "put a key value pair in the jsonobject where the value will be a jsonarray which is produced from a collection .", "registers an element in the head element list", "change the region name to a standard format having single ' / ' as separator and starting with a ' / ' as in standard posix paths", "displays the form to add a researcher", "replace under score with space replace \\ n char with platform indepent line . separator", "use the specified handlertype in compiling facelets .", "build current element text", "this is used to resolve transform implementations that relate to the java net package", "textual representation for the dependencies .", "process a tech xml", "get a theme by its name", "creates and starts a kafka cluster .", "convenience method to return a string array as a delimited e . g .", "reports the current slot allocations for a task manager identified by the given instance id .", "creates a new blocktast instance", "sets the reference time .", "factory method to create a new map used to store the expando properties map", "shows a dialog to edit the comments of a node .", "compare two set of supported tasks for equality", "reads the long value of id from the buffer and returns it .", "add a complete set , merging lookaheads where items are already in the set", "decrement by n and return the new count", "evaluate the network ( regression performance ) in a distributed manner on the provided data", "set serialization type according to property if no property preset the default will be set the first time the getproxy method will be called .", "gets the authentication parameters username password samauthtoken which are stored in applet parameters", "return a new matrix with the columns of matrix joined on the back of matrix", "returns a solrrequest to delete an asynchronous request status", "assert that the given object is not an instanceof expectedclasstype .", "adds to the input the union of the given operators .", "asserts that the two arrays are equal", "used only in forge environments where lighting may be calculated based on locations .", "terminates a connection with the host", "this class has bytes per atom", "return the tests included in this test suite .", "concatenate the string value of the objects ( tostring ( ) ) and insert a space between each value .", "get descendant node by its node name", "initialize the genericactivity fields .", "return if mime type is video", "causes all messages currently under assembly to be forcibly sent ie flushed to all registered message listeners and subsequently all assemblers to be deleted", "create an instance of the certificateloginauthenticator .", "get a url parameter", "save the current content of this cipher .", "parse the sourceinfo version string .", "calculate ( business partner ) discount", "creates a buffered input stream for this file .", "get a value as date .", "provides a collection of all the nodes in the tree using a depth first preorder traversal .", "returns true if this object is valid .", "add text mouse listener", "checks that the given object instance is of the correct type otherwise a runtime exception is thrown", "convert an object of type targetclass to text by delegating to a converter obtained from the faces application .", "returns a shared , mutable array containing the constants of this enum .", "prepares for a check that the subject is a finite number not within the given tolerance of an expected value that will be provided in the next call in the fluent chain .", "build an expression that strictly evaluates usercheck s and ignores other checks for an entity .", "return the first child node that represent the matched tag that has attribute attr = value .", "check the instance is parallel to another line", "puts the last refresh date into a bundle .", "if connection last used time is 30 minutes away , treat it as expired", "instantiates a new invalid magic mime entry exception .", "replace an execution by this execution .", "a list of lambda functions .", "pulls a string off the queue up to but exclusive of the match sequence or to the queue running out .", "scale an image .", "creates a new function object if the memory module and the function address could be resolved .", "returns status of whether logging is enabled or not .", "construct a completed - with - error futurew from the given exception", "the scattered write cache supports compaction .", "invoked after a container was loaded .", "marshall the given parameter object .", "marshall the given parameter object .", "all address strings are comparable .", "return a vector in the plane represented by u and v", "searches the pattern starting from the given match .", "return previous chapter item", "adds the row from the given key and value .", "gets the width of the data in the specified row column", "computes a boolean value from a string value retrieved from a property in the given map .", "load from the store .", "increments the count of in flight transactions to the resource being monitored .", "encodes a paste operation .", "makes the specified button default clicking on it will close the window its in and pressing enter in that window will cause us to fire closing it", "get the statusflammable to the flammable by internet", "method generated by intellij idea gui designer > > > important ! ! < < < do not edit this method or call it in your code !", "set the value of ndoc", "updates the enabled status of the input fields and labels .", "sets the host .", "scope object to double if it ' s a number , or return default .", "creates a new resource of the given resource type with the provided content and properties .", "resets the max text and accerator widths text and icon offsets .", "copy a file from local to a file in this file system", "dumps the list of type - ahead queue markers to stderr", "main method to run utility .", "subclasses may override it to provide their own text", "initializes unity ads .", "stores the specified domain for the specified variable if a domain has not yet been stored for the variable .", "return the value of slide based on top and height of the element", "checks if a list of string contains a string while ignoring case", "imports an idb file while showing a progress dialog .", "insert a pdf object into the command stream .", "bootstraps a server .", "adds the given points to the score", "get top n elements", "sets the snapshot index to indicate commands entries that can be removed during compaction .", "creates a table that corresponds to the given schema", "writes this sequence set to its file", "run all these tests in both marshaling and non - marshaling mode .", "perform the default action .", "determine how many passive witnesses are in the potential quorum set .", "sets an attribute store", "loads next line into lookahead spot", "selects all visible nodes of a graph that are tagged with a given tag or any of its children .", "create vipr compatible 16 char wwn", "queues up a runnable on the object manager thread where we can safely end the session .", "removes a breakpoint from a breakpoint manager .", "hook to run some work before entering the worker loop", "find the real uri if virtual", "adds the qname to the stack of available qnames", "gets the total in personnel", "starts this rest server endpoint .", "returns the absolute value of the given complex number .", "for use with executors , consider using instead of calling this method directly .", "returns whether the given string starts with this", "calls all interfaced validators function setvalid", "translucent overlay panel for displaying channel configurations processing channels selected channels frequency labels and lines and a cursor with a frequency readout .", "adds the specified minutes to the number of minutes in the period", "verify that all is ok with the codeword array .", "parses a string in python strftime format , returning the equivalent string in java date time format .", "convert the given tuple to a real vector1d .", "removes a listener object that was previously listening .", "recursively removes any files and subdirectories and then removes the file ( or directory ) itself .", "add the button subcomponents to the title pane .", "gets the publish data for the given parameters .", "creates an actiondecisions object given a w3c dom node", "callback method used by resource distributer to allocate / deallocate resources .", "this adds a property descriptor for the is derived feature", "resets the store to initial state .", "draw the icon at the specified location", "returns the score element location at the specified offset .", "returns the shortest prefix of input that is matched , or null if no match exists .", "creates a new epic using the information contained in the provided epic instance .", "include exclude was changed", "add normcondition to norm", "closes this object for reading as well as the wrapped inputstream if not already closed", "get the minor axis of the ellipse", "reads a unsigned short bit from an inputstream .", "generate and save a default wificonfiguration with common values .", "converts the serializable object to a blob", "examples of method references", "add a ' signature _ algorithms ' extension to existing extensions .", "writes the modbus message to the comms port", "re - decodes a string that has not been correctly decoded and thus has scrambled character bytes .", "creates a new instance of groovyfilter", "serialize the given java object into json string .", "enqueue next injection strategy .", "determine operational state of control based on ability to support negative rate", "constructor for ptzinterface", "delay between filesystem checks returning if quit is set", "secidentityref identity", "populate the searchbox with words in an arraylist .", "reads the number of frames and optionally sends the buffer to the listener", "setter for goods .", "halts writing to the source line speaker", "tests to see if this is the same kind of measure as the parameter", "makes sure that this . token contains a token if one is available .", "sets the designated parameter to the given java sql date value using the given calendar object", "sorts children in reverse order for drawing .", "shortcut for property propertyname and leftpredicate rightpredicate .", "frees the page to be returned back to the system .", "this method must be called before the dataflow analysis is executed .", "reads the message content from the jcr content jcr data binary property", "extracts column to type mapping for the hive table from the job configuration it uses 2 standard hive job parameters : list _ columns ( \" columns \" ) and list _ column _ types list _ column _ types ( \" columns . types \" ) .", "convert a color to a css color attribute value .", "shuts down after a heartbeat event is seen .", "insert the reported position into the array using the seqno for ordering .", "write up to nbytes of data from the given buffer , starting at offset off , to the underlying stream in gzip format .", "construct the debug commands .", "return the error message or user message for the given named element", "removes the menu located at the specified index from this menu bar .", "creates a faces message with the error message of the validator", "perform a particular request", "scaling src bitmap to fit and cenetered in dest bitmap .", "adds a new menu item to the menu with the specified name and attributes .", "returns a reference to a type parameter of a generic class or method .", "reallocate and rehash the hash set .", "creates a new request configured to post a status update to a user ' s feed .", "construct a new systemuihelper .", "initializes the widget options from the given configuration string .", "tests if the conflict represented by this classtypedescriptor whether on the source side or destination side is ignored based on the collection of ignoredpackages .", "updates an entry .", "store the downloaded prices into the security currencys history", "initialize a default hyperlink with no target and no text .", "wrap and add appender .", "adds a method object to a cimclass", "writes the representation a serializable object of an update to a stream .", "sets catch variable node and sets its parent to this node", "add an appropriate policy database entry for parameters marked with the willclose annotation .", "updates the row and column indicators", "determines whether or not a value is of slavo - germanic orgin .", "adds a new server response line to the test elements , with the specified location .", "extracts location result from intent object", "analyse node ( should be a folder unless it is host level ) in - order .", "create and run a console using a new python interpreter for the test associated with this instance", "tests stepping backwards through a range with a closure .", "set the progress bar to 0 progress", "invoked after a project was closed .", "analyzes a set of nodes to try and determine grid dimensions .", "start the correlator going", "expands a three - digit string into a list of english words .", "returns the java version used to generate this build .", "send a debug log message", "creates a new tile representing the eastern boundary of the map", "adds message to the incoming queue .", "move the focus to the residue immediately to the right the current one", "creates a new array from the contents of the given tuple", "writes a json object end .", "creates an epoch associated with this consensus , with the specified timestamp", "start pipeline operation .", "builds the javascript to set the property form values delayed .", "create a new sslcontext using the options specific in the given transportssloptions instance .", "adds a vertex with the specified x , y , z to the current draw call .", "reads keys from coordinator .", "returns the highest ranked split", "adds a type information hint about the return type of this operator .", "creates the configuration object .", "emit information about a single suite and all of its tests .", "try to find a codebase matching the given pattern in the given class path string .", "for backward compatibility only", "adds a self compatibility for the given operator and records it as associative", "re - size a specified chunk on its backed memory pool .", "get the final representation of the url using the specified elements .", "gets a copy of this instant with the specified duration added", "clear evictionstrategy internal structures only and doesn t clear cache .", "add the provided images urls to the set of training images .", "ensure that the array representation has the necessary capacity .", "accessor method for xcapitalgain3", "updates the password and expiration time of a user account on the specified compute node .", "custom initialisation after properties is set", "creates a new instance with the given arguments .", "set arraydrawer", "determines if the grantstatus has been initialized", "gets the original type from the errortype object .", "remove the given process listener .", "upload azure batch service log files from the specified compute node to azure blob storage .", "add an extends to this and automatically add the import", "links the current signal to another signal", "creates and returns a listener , which allows to adapt the elevation of the toolbar , when the value of the corresponding preference has been changed .", "returns a clone of this list .", "returns popup menu according to clicked node", "return the touch of the last event", "determines the height of this view", "generate the url for the artwork requests", "this method checks to see if the specified calendar object is an exception", "return a new array containing the elements of the given array plus the given element added to the end .", "the textoperationaction implementation of this", "the listqualificationtypes operation returns a list of qualification types , filtered by an optional search term .", "writes the drawing to the specified file", "return the qname of the type of the parameters with the given name", "returns true if the domain component of an email address is valid .", "adds a character to this end of this content collection", "iterates over a set of parameters and applies locale - specific formatting to decimal ones ( floats and doubles ) .", "returns a copy of this timex which is the same except with the specified modifier", "concatenate the path of the so library including directory .", "check whether a given class matches the geometry class .", "throws an exception if matrix is not diagonally dominant", "create humannamedatatype from proposalperson object", "merges all logs on this node based on time stamp", "creates a scrolled composite", "picks a snapshot info for restore .", "called when a row view has been clicked .", "marshall the given parameter object .", "apply find / replace regexes to our wm template", "the main goal of this testsuite unit test to assert all classes implementing faceswrapper do wrap all public and protected methods of the wrapped class .", "queries a device for its build info", "checks if the current user has permissions to import data into the cms , and if so , creates a new import handler instance that imports the data .", "returns the image with the given key", "adds the specified component to the end of this list .", "stops all running actions and schedulers", "get normal forms of word or if can ' t retrieve normal form of word return same word", "hides the option if set to true .", "describes amazon ecs clusters that are registered with a stack .", "indicates whether the process manager is synchronized with a real target process .", "shortcut for property propertyname isnotnull .", "extract a set of samples to the given target", "reads bytes into the given buffer .", "delete remove bssid if exist from a group", "visits an annotation on a type in the class signature .", "start a new log file .", "evaluate date start of stored balances according settings , this is the first month of the first accounting entry or start of current year if there are no any acc - entry .", "navigates to the last page ( if not already there ) .", "retorna a instancia da classe", "removes the container page identified by its structure id from the cache .", "creates a new view by copying an existing view .", "create a data column", "creates a new trace logger .", "removes given spring project from this root node", "marshall the given parameter object .", "metric the width of the font .", "checks if player is in a door and change map if needed", "store the bank to a given bank on the synth", "shows a label with a message to inform the user for any event", "visits information about an inner class .", "encodes the configuration .", "calculates the connection ids of the graph to avoid deadlocks in the data flow at runtime .", "set the formula molecular as imolecularformula object", "a list of jobs .", "adds the directory to the model and sets it to be selected , additionally clears out the previous selected directory and the paths leading up to it , if any .", "fill combobox with lookup data ( async using worker ) .", "copy glyph position data into a result array starting at the indicated offset in the array .", "returns false seaglasslookandfeel is not a native look and feel .", "prepare a tuple ( select ) query .", "returns the current queue size .", "change style of the text element bold italic according to the selected value", "clone the live vars set for a particular predecessor edge , replacing phi ' s with the expr corresponding to that edge .", "translates a short literal", "adds an control to the page", "adds all the layers in a given java util collection", "the read - only attributes of the user pool .", "returns a map that represents the attributes for the specified cell", "create a new decoder with specified codec id .", "processes mouse events and responds to clicks .", "sets the default pose to the current pose of this model", "if true values that are referenced multiple times will use an anchor", "creates a new filter expression object .", "getter for property winnt .", "debug method - refreshes the debugger ' s display components .", "loads a graph from a graphml input stream", "convert", "the object implements the writeexternal method to save its contents by calling the methods of dataoutput for its primitive values or calling the writeobject method of objectoutput for objects , strings and arrays .", "loads properties of the installed cdec artifact .", "initialize the underlying randomaccessfile .", "the list of partition serial numbers that belong to the high - availability partition group .", "closes the comms port and any streams associated with it", "returns whether they key matches at the specified depth .", "an idempotent method to remove a dead tlcserverthread from the tlcserver .", "determine if the robot is currently in operator control mode .", "updates the default call graph settings in the configuration file from graph settings .", "test if the root variation is below rootepsilon", "creates a tailer for the given file with a delay other than the default . s .", "called when a transition between states occurs .", "get an oredictionaryentry instance , using an instance cache to preserve reference equality .", "write an integer using the number of bits necessary to hold the number as determined by its keep and increment its usage count in the keep .", "this method rebuilds members related to the sessionnotifier instance , which were not directly persisted themselves .", "logs the status of the consumer .", "gets the url for viewing a users license list", "assigns a string value to the attribute characterizing the person who authorizes sending of the exchange structure exported from this repository", "find the _ fields constant that matches fieldid , or null if its not found .", "creates a new function node .", "displays the given curves on the plots", "create a new jaxrs archive with any type storage engine as backing .", "this method is intended for internal use only .", "closes this server socket and its implementation", "get the guiviewers state as a memento for later restoration", "computes union of all live variables", "adds the input chain to the group .", "adds the question", "add a row to the dump of the table .", "checks if the timer can be increased", "sets the selection to the entire text", "adds a vertexdeclarationelement to the vertexdeclaration", "returns url with calculated signature for specific file with specific file builder parameters", "instantiates a new tv show tree cell renderer .", "cumulative weibull distribution function", "inserts a column at c", "shows a warning message .", "returns true if the type name can be pluralized by a string operation .", "create a solve reference to the given symbol .", "returns the input state tag in this group .", "returns the absolute value of the element in the matrix that has the largest absolute value .", "constrains value to the range of maximum maximum", "set the molecule to be matched .", "check if the tab is associated with an activity that hasn ' t been destroyed .", "interpolates the log curve from the linear curve .", "resize the panel and parent frame .", "returns the next attribute name , or null if the input has been exhausted .", "performs the rotation", "draw a single data item .", "indicates whether or not this class is an enum", "set the content length http header", "sort the dates in descending order youngest to oldest", "file a classnotfoundexception with the lookupfailurecallback", "java specific append of float", "utility - return true if the given zookeeper result code is retry - able", "compute the getter name .", "log a message object with error level", "returns the background image", "make and return the image display control frame", "details of the returned event subscriptions .", "if not already created , a new security - role element will be created and returned .", "returns the length of this name", "removes an entire row from this container", "pre api alpha is used to make the progress circle appear instead of scale .", "open an existing persistent bigdata instance .", "sets if the refresh local file operation is enabled or disabled", "obtains a new instance of an itemssketch .", "executed upon sending a packet away .", "fine grain propagation - if the event concerns a bin variable , then update data and apply rule 2 : on the assigned bin : binassignedload < = binload < = binpotentialload - otherwise remember to recompute the load sums and do nothing", "specifies the type of the field to access .", "marshall the given parameter object .", "constucts a metadata object with the temporal settings .", "load built in annotations that might not be evident from the analyzed referenced code .", "mutator for the first flight", "start the timer running", "returns a new path element that can be configured .", "asserts that an element is clickable .", "saves the configuration info to the disk .", "compare the two files using delegate comparators", "allows observer changes of required table .", "looks up a type by name .", "returns position of fml field", "initializes start at the beginning of a step", "returns the resource containing the workflow", "saves the richtextitem were working on by saving the document that contains it", "this method : encrypts bytes using a cipher .", "constructs a sasjavaexec object with command line arguments to stdin .", "get the unique properties", "updates this table model", "binds an eni to the instance .", "audits an attempted rest request , indicating which resource was accessed using which method linked to the ssotoken of the accessing user .", "clear the plot of data points in the specified dataset", "abandon the change ending its review .", "checks if the edge glow should be used enabled .", "returns the commerce discount matching the uuid and group .", "generates secret key for a given algorithm and key strength .", "execute javascript in the browser .", "create the tool ' s ui .", "return a coordinates object based on the appropriate columns in the given row or null if there are no coordinates available for the row", "lookup an object in the default initial context", "uniform _ rand : generate uniformly distributed random numbers 1 or - 1", "like funexec except returns a string", "set the right nutentry", "inserts the specified element before the specified position into the receiver .", "the listassignmentsforhit operation retrieves completed assignments for a hit .", "creates a less - than - number parameter constraint .", "updates the given array member in the back end .", "figure out what the received command means , where it has to go , and translate to a jmri method .", "compute the dimension map .", "insert at the beginning of the list .", "add a dimension to the config", "sets the day of month on the input date", "end parsing resource", "called for each screen redraw - approximately three times as often as the other tick events , under normal conditions .", "add single ore more draweritems to the drawer", "initiates a scan for all known barcode types .", "returns true if the autospin thread is running", "creates a new empty map with the specified initial capacity load factor and concurrency level .", "release all resources .", "calls the function for the start symbol and catches exceptions which are re thrown as customdrawingparserruntimeexception", "the chirality of a system or molecule", "finds the position of the given token in the given string .", "notifies all listeners , which have been registered to be notified about the animation ' s internal state , when the observed list view is scrolling upwards .", "set all borders", "function used to get texts control text when window is closing through ok", "get an instance of the xds document consumer auditor from the global context", "rmove cookie by name", "spookyhash ( up to four values produced ) for a triple of longs .", "returns whether the trace list provider is loaded .", "get a cache object including the cache object wrapper", "post http get request to target url", "construct a new empty document .", "private copy from fileutil , to avoid cross - dependencies .", "retrieves a list of the raw miningfield objects for a given model", "try to evaluate method .", "logs the event through the audit log service", "indicate that we are unable to allocate sufficient stores and the timeout period has passed", "pop the current fragment off the top of the stack and dismiss it .", "write long to buffer .", "create a daemon thread .", "this method sends a wirecommand to read table entries .", "imports the expression substitutions table .", "adds a column to the result set .", "constructor for primary key", "indicates if the oauth access token has already been recieved", "returns an enumeration describing the available options .", "create a resourceurl for ajax _ response _ resource _ id .", "return tokenized version of a string .", "method to register the listening object of the status events", "start the transaction .", "convert an object into byte array .", "return true if the specified string does not equals , ignore case , to \" false \" or \" no \"", "override this method to define what this task does .", "create a standard image pyramid used by dense optical flow parameters .", "do validity check on xml file", "returns soap xml results to the caller", "queries for a label or multiple labels in the labels database .", "compute the minimum of two values", "internal helper for normalization of a < = constraint .", "write a single pattern list", "marshall the given parameter object .", "remove a given vertex label", "sets the text associated with the item at a given index .", "utility method to convert dtcellvalues to their string representation", "rollback the transacion .", "shows the download window and begins downloading the specified map right away .", "determining the initial backdrop against which its stack is composited .", "removes a branch graph rooted at branchgroup from the list of branch graphs", "walkgraph finds all reachable nodes in the semantic graph and inserts them in the hashtable semnodestable for use by the explorer tool .", "construct a new instance of this test case .", "generates information about the view to mysql migration method", "shuts down the network engine", "get the axis of the second rotation", "send an error log message", "exclude well known groups , domain local groups and distribution groups", "add an object to the list of objects being traced", "init must be done in a different thread since it may hang up . . .", "sets the left margin in twips", "xml stream object serialization", "returns the euclidean distance between two solutions in objective space .", "registers the object with jmx", "get whether the espproxytask is finished", "gets the layoutgridline style attribute", "creates a scalar predicate using the specified expected value", "add a version query callback .", "set a response header and associated value", "attempt to set a variable on the channel to see if it ' s up .", "marshall the given parameter object .", "load the jar if necessary .", "get a list of the members of a group .", "checks if user . home property is defined in the system .", "add a tupleset to this composite .", "the nodes in the cluster .", "creates a new painterwrapper object .", "creates a new bookmarks table model .", "set the histogram to use the supplied minimum and maximum values to determine the bucket size .", "creates a new panel object .", "method that executes the logic based on the work", "returns this areas ancestor footnote area if any or this if this is a footnote area or null if this area is not part of a footnote", "build query for execution .", "this adds a property descriptor for the part count feature", "creates a new instance .", "invoked after a type instance comment has been initialized .", "records a boink", "copy the given collection into a string array .", "modifies the state of the registrar by modifying the attributes of the services that match the template with the attributes stored in attributesets .", "set the list of explicit destination that outgoing messages should be limited to .", "the next element of vec to be returned by innergetnextline .", "this is used with incrementjobdonecount ( ) to know when all the jobs submitted to the executor has finished .", "returns the total width of all table columns", "move an element to another location on the tab .", "this adds a property descriptor for the name feature", "marshall the given parameter object .", "proceed to the next available ring color .", "remove the link between the current type this and the specified situation", "break up the zone at the given index into pieces of an acceptable size .", "adds the given entry to the end of the queue", "gets the size of this instance , in items .", "saves progress dialog state for later restore ( e . g . on device rotation )", "subtracts timeunits from the unit timeunits", "run the asynch consumer once only when the session is stopped .", "renders a byte property", "writes len bytes from the specified byte buf starting at offset off to this output stream .", "adjusts the primitive value mapped to key .", "reloads the properties from properties source", "creates a new in memory instance on all log files in a particular directory .", "registering custom serializer allows to the jsonview to deal with custom serializations for certains field types .", "deflate current sam line by replacing all fields that equalovershorterofboth previous line by an ampersand", "creates a new usersynchronizer .", "new instance with now as the current time .", "set the user token , so it can be sent in every command .", "fire a mapinventoryevent for an added item", "textlistener method", "the initial version of the print with delay method", "replaces sequences of whitespaces with tabs within a line .", "lays out this container", "return the string of the message in case that the message code not exists the message will system no such code", "setrowselected", "encode a list into json text and write it to out .", "writes the list of actions to the jsongenerator .", "verify that an exportmask that is going to be used is on the storagesystem .", "returns the type with value = = typestring , or null if it doesn ' t exist .", "map type java target system", "try find the logic bean by mapping via logicbeanmap", "group creation validation .", "save the cache to file", "invoked after the image base of a module inside an address space changed .", "set the trace level for this connection .", "creates a workgroup with the specified name .", "provide a map of your choice .", "this method is invoked to indicate that a choreography exchange has been completed by a target participant", "get time ago that date occurred", "set the attribute type with java class .", "adds a property to the fixed properties set .", "create a new buttonpainter .", "callback on being picked", "creates multiple partitioned region from different threads .", "safe method to remove all specified elements from the collection .", "generates a random multipart boundary string .", "called after a thread was removed from the thread manager .", "connects to the specified dbms and prints status .", "add a frame to the layer", "returns all right values from the relation that have the left value specified .", "introduced this postinvoke ( ejswrapperbase . . . ) for local interface support .", "writes the given object to the given file .", "adds an empty part to the score", "reads next variable length block from input .", "checks if is all number .", "create a complex instance with a cause included as well as the specified message", "returns true if the query is an explain statement .", "we use the button tag instead of div", "sets in response to for saml 1 response .", "any kind of info message .", "convenience method to allow us to add any controllerelement to this controllers inputs outputs or transitions", "applies a predicate on a tables row", "calculates the d statistic for comparison against a continous distribution", "creates a new titlepaneiconifybuttonwindownotfocusedstate object .", "rlshort protected helper method to read 16 bits value .", "function builds the new local & global subsrs indices .", "calls the protected abstract method visit that is to be implemented in subclasses of this abstract class .", "looks for a class from its name", "reuse a collection of objects when making new entities .", "close the dialog on a button event", "compute the average distance between adjacent keys ( horizontally and vertically ) and square it to get the proximity threshold .", "checks to see if action is live sync", "build a table with the data provided .", "creates a new csv file set for a test .", "writes a standard overflow message to the logger", "load the class denoted by the given string representation", "ensure we can marshall todoitem objects to json", "rotate binary tree node with left child .", "remove deployment by id", "returns a connection used for operations on the catalog .", "tell the loconet controller we want to hear messages , which will automatically call our \" message \"", "determines if the given object is an element of the given array .", "# = gs < seqname > < feature > < generic per - sequence annotation , free text >", "validate that the specified primitive value falls between the two inclusive values specified ; otherwise , throws an exception with the specified message .", "let the unit try to move", "provides an approximate magnitude value for this sample .", "replace any existing values with the supplied array of byte", "imports a message from another bundle .", "specifies the current row / column ' s shrink priority .", "tests if any of the specified debug flags are enabled .", "set the group by column for this query .", "get last successful task attempt to be added in the stats", "sets the listener that receives callbacks when the user performs key combinations .", "skips delimiters starting from the specified position .", "formats the rate in hertz for display as megahertz", "returns the coefficients for this linear model .", "checks if received parameter is present", "you are not supposed to instantiate this .", "constructs a new mappingrolecalculator with the provided configuration .", "loads a class either from the old , new or common classpath .", "transfers data from persisted playlist into system models", "sets a watch for a particular sequence number to be safely committed on all channels .", "this function can be overwritten by child classes to clean up their resources .", "parses a single variable specification from the command line .", "set the core thread pool size", "returns the metric string for the chosen metric type", "return list of available backups", "returns whether the client is currently logged in as some user", "build field and its annotations .", "private mixer getmixer ( ) {", "clear all variable settings", "get the concurrent google pub sub request limit .", "executes the given command using an entitymanagercommandexecutor .", "check whether the time long is utc day utc day means the time long is for utc time", "overload the getid method of superclass returning the id of resource task through the id of task resource and projects concatenated", "returns the time text field value as string .", "adds a question to the panel using a checkbox for the answer", "you are not supposed to instantiate this class .", "returns all locale - config elements", "updates the ui state for the peeked to expanded transition ( and vice versa ) , according to a completion | percentage | .", "returns the only valid instance of the plugin output dialog .", "get body parameters", "return the part of the executable command line that represents the shell options", "in this function handle any failure condition", "finds the menu on the main menu bar matching the given information", "this method looks through the list of renderatoms to see if compaction is needed", "adds an optionschangelistener to the options object", "handles right clicks on the history chooser .", "evaluates the cf3 problem .", "computes minimal sample size for downscaling image so result image size won ' t exceed max acceptable opengl texture size .", "delete the tag ( if any ) present in the given randomaccessfile , and do not close it at the end .", "set the code string", "get root path for picking links using path field widgets .", "adds a watch predicate .", "delete this sms message", "answer a list of incriteria based on values , each incriteria contains only inlimit values", "convert sql statement ( stops at first error ) .", "decodes a version 1 , human - readable proxy protocol header .", "called only by function . recursioncheck in semantic generator . java .", "counts the number of echo breakpoints to be set in the graph .", "mutation for a single column .", "compare the receiver to the specified string to determine the relative ordering when the case of the characters is ignored .", "pushes a new context onto the stack .", "convert an iterator to a list .", "removes users from the people container .", "predicts the class distribution for the given test instance .", "adds an exception to the exception list", "creates a new updater object .", "start ssl connection examination in a separate thread .", "check if the instruction is a subroutine return instruction", "load radio list", "get the number of rows to display", "returns all categories given some search parameters .", "creates an ldap filter as a conjuction of the attributes supplied .", "reads the next character .", "create a new parallelsorter object for a set of arrays .", "writes the characters from the specified string to the target .", "lists available table names", "lookup entities having at least one string attribute matching the passed sp ' s pattern", "return the java method corresponding to stat or null if there isnt one", "calculates the wave amounts for the given entity x axis", "adds a difference to the list of differences of this modeldiff instance .", "marshall the given parameter object .", "special handling for jboss", "set the month for the date that will be built by this builder .", "checks if the given string is a prefix of a key in the trie .", "you are not supposed to instantiate this class .", "return the list of steps for the artifact", "reads a char", "do all the outstanding handshake tasks in the current thread .", "returns the value of the xa scope tag associated with this scriptnode or null if there is no such tag", "call this when you want to know the new location ( \" value \" ) .", "release any acquired resources", "creates a new service schema in the configuration store .", "render the specified node .", "get the tags value as an int", "creates the buttons to manipulate the classpath .", "move the range right by the specified number of samples", "create an ` appdescriptor ` with appname and package name specified", "puts the given slice of the given array at the given offset in the given block .", "capture node and event and add to table", "opens the web page on the connected web server", "pop the top object off the stack", "retrieves the data list cache key for this component .", "when the user oks the dialog this method prepares the search data for easy access from the calling method .", "set the geographic bounds for the projection", "called with a channel has been found by the search", "key function to execute a parallel task .", "returns true the string is found in the valuelist", "session in listening ( server ) mode .", "compute person id based on the firstname and the lastname", "condition on arbitrary input", "find host uri from host initiators on array", "returns the package for the given class", "invoked after the width of a node in a view changed .", "unprotects the given protected branch or wildcard protected branch .", "removes a primitive value by index from the list", "construct a new switchpreference with default style options .", "sets the current observation data array and generates a dom document representation it", "load configuration properties from the specified file .", "whether the device is similar the same bssid is equal", "get sfielddef from the given type", "removes the child at the specified index from the display list .", "uses data from a bar to populate a task .", "writes the char at the given index .", "creates and sets the tokenizer using the specified reader .", "creates a new visitor that produces a plain text string representation of a parsed wikipedia article", "parse an element type declaration .", "replce the jobtracker configuration with the configuration of 0 or 1 instance .", "constructs a new privileged task wrapping the actual task to execute .", "puts 45 things into the cache", "replace an existing attribute .", "gets the relation beans to display .", "apply mask penalty rule 4 and return the penalty .", "get the methoddescriptor that hopefully uniqely names this method .", "get the jfilechooser shared among all fileactions", "saves a trace to the database .", "returns the time when the object was last accessed under a given key", "forward project a raw array of radian points .", "the current wall clock time .", "check if the type arguments are the same .", "parses xml file with migrations configuration", "count the number of elements of a specific securityuser bean", "evaluates a specific smallbasic expression and returns the result", "list field should always assigned new list with one elment l", "returns map containing the given entries .", "override preparepaintcomponent to prepare each row for painting .", "implemented by derived class to return whether the view is in a state where the user can pull to refresh by scrolling from the start .", "sends the given message to the given port , where the already running instance should be listening on .", "set the exchange rate factor", "creates a new instance of the class .", "yields the last element .", "evaluate whether the task has completed execution", "creates or modifies the public access block configuration for an amazon web services account .", "finds the lower index of the range of live items in the specified data series .", "use this api to fetch cmppolicy _ cmpglobal _ binding resources of given name .", "factory method for mediafile list , returns a list of mediafile objects with page , size preference", "retruns the length of the text .", "gets the element type numeric or string", "private object _ touch ( scope scope , string key ) throws pageexception { object o = scope . get ( key , null ) ; if ( o ! = null ) return o ; return scope . set ( key , new structimpl ( ) ) ; }", "kills all widgets associated with the input spectra", "initialize the component", "returns the element with the given index from this viewer", "this method returns a collection of available resources .", "stops all the worker threads that are waiting for messages .", "remove notification from the container .", "verifies that the digests stored in the manifest match the decrypted digests from the . sf file .", "returns the last element of this queue that is the element the would be dequeued last optional operation .", "creates a new map with the same mappings as the given map .", "specifies the expectation that target stream does not yet exist .", "return current signal strength in dbm ranging from 113 51dbm or 1 if unknown", "returns true if this implementation supports setting session variables .", "basic sdf file check", "exit with a process failure code .", "add a converterhandler for the specified converterid", "removes an rdg from the database", "returns a presentable version of the given ptb - tokenized text .", "sets the parser to use to parse the input .", "add a layout turntable at location specified", "unexport supplied remote objectid and close all channel sockets", "tries to append a deletion marker to this node .", "unregisters a local file from being observed for changes .", "adds a panel to the grid", "creates temporary file with given prefix and suffix .", "creates a body for box2d collisions", "checks whether the graph argument is null and throws if it is .", "find the correct position to add a named component .", "called when the string is available .", "add a character to the buffer flushing the buffer if the buffer is full and returning the new buffer index", "retrieves the binary servlet mapping", "the function to convert a percent element into a string .", "getter for property bookmarkopen", "read from stdin .", "puts a preference", "assumes a ' masterrequestid ' soap header element .", "check that the supplied array of offsets as sources is long enough compared to our expectation", "move the tabs around", "the process method of eventlistener", "is instruction at given location a store ?", "delete a persistent comaterial entity", "returns the last node underneath the given parents for which the given predicate evaluates to true .", "get an optional string associated with a key", "ensures that index with the given name exists .", "post handling after gc", "creates a binary arithmetic expression by wrapping two expressions and one operator .", "returns the string that will be appended to a formatted list", "initialises all values in the matrix to the given value", "build correct objectname for gigaspaces jmx components .", "logs the specified message with the specified logging level and throwable .", "encrypt key ( does not use salting , so the encryption result is the same for the same input )", "returns the currently scheduled job description identified by the given id .", "returns the child treenode at index childindex", "sort a list of rows using offset and limit .", "returns the type of time display we prefer seconds or minutes", "renders the three axis in space ( for debugging purposes only", "creates new instance of itemsfilter .", "atomically removes all of the elements from this queue .", "return a list of currently known shards .", "collapse the sliding pane if it is currently slideable .", "starts all services", "execute an implies split .", "the rectangle in user space coordinates defining the visible region of the page", "check if the folder rename pattern is unique unique true , when having at least a $ t / $ e - $ y combo or $ i imdbid", "checks to see if a state parameter has a particular value", "returns the dependencies that are not included in the specified module .", "set the nodeinstance of a componentinstance", "returns a single bill me later account from this payment method list", "returns true if this configuration is an accepting configuration which in this case means that there is no more input and our state is an accept state", "get the single instance .", "find remove return the hand card indicated by the string passed in", "sets the cell text to the node number and name e g 2 alter plan", "write rss informations in the table rss", "made public to use in other functions too", "runs this executor with its configured settings .", "execute the sql update", "the method islocallyconsistent determines whether a list of state predicates is locally consistent .", "validate whether a specified norm type is supported and return the int corresponding to that type otherwise through an exception .", "get the id from the href of a modulemap", "tests whether this list contains any values .", "creates a new instance of outputstreamcounter", "uninstall vocabulary by its unique identifier .", "column number this project references", "obtain the annotation associated with this type descriptor of the specified type .", "clears the reviewed flags for all files in the given patch set for all users .", "add an implemented type .", "this method returns the number of occurrences of the object obj in the dbag collection .", "resets the underlying fields of the tablemodelevent", "specifies whether or not to resolve link events automatically .", "deletes a group node from the view .", "construct a matrix from a d array .", "null safe comparison of comparables .", "releases the binding for the specific property name", "sends the actual heartbeat out and logs it , if so desired .", "creates a new config file object .", "creates a costratetable instance from a block of data .", "shows the goto offset dialog and sets the caret of a hex control to the entered offset .", "parses a gapless playback comment ( stored in an id3 header or mpeg 4 user data ) .", "execute the required changes upon an alarmtrigger .", "move source file to destination path or file", "if fim is started from a sub directory it loads the parent . fimignore files and merge all the filestoignoreinalldirectories .", "utility method with defined return value for 0 .", "end the scope of a variable", "this is useful for swipe back navigation behavior", "returns a help image icon tag to display a help text in the setup wizard .", "add a specific entry from the current manifest .", "disable all operations to user represented by this security context .", "return the deepest childs of this node .", "creates the main editor page", "sets whether bracket matching should be animated", "a method to add a bookmark .", "returns a map with at least 100 elements where each element is absent from javamap .", "generate a gaussian convolution kernel with the given number of rows and columns , and store the factors in row - major order in dest .", "works in the same way as the overloaded method but uses an empty member path .", "returns true if the two classes have no public methods with the same name and parameter types but different return types .", "returns true if this network is connected to another network", "just invoking protected method for outer classes", "deletes the objects given using one or more calls to the batchwtiteitem api .", "describes the specified systems manager document .", "remove a displaychangelistener from win32graphicsenvironment", "removes all path metrics", "the dopost method of the servlet .", "extract coalescent times and tip information into arraylist times from tree .", "compute the source region and destination dimensions taking any parameter settings into account .", "installs a plugin by id and version .", "increment a counter specified by a name , and a sequence of ( key , value ) pairs .", "use other thread pool", "marshall the given parameter object .", "validate hdfsresource site and file path", "constructs the resourcethread for an image file", "returns a maybe that mirrors the source maybe but applies a timeout policy for each emitted item .", "paints the specified component .", "method itemkeyname", "returns the number of all pages that do not contain a template the name of which equals the given string .", "reset the binding environment to empty", "compute the best information gain for the specified antecedent", "the internal routine to add an image to the cache and return the record that was generated .", "adds an itext element to the cell", "return a list of all virtualwiki objects that exist for the wiki", "implementation of the xsd div operation , which differs from java integer division in that it rounds down for negative quotients while java rounds up , i . e . : - 1 / 2 = = 0 div ( - 1 , 2 ) = = - 1", "skips to previous track in the users queue .", "retrieve the connection identified by connection name .", "reads in as many externalsortables as it can and returns an array corresponding to the externalsortables .", "flatten an array .", "set the country code plus phone number", "converts names of classes as defined by the bytecode into simplified", "opens the url on a custom tab if possible .", "provides a method to print a normalized version of the original expression", "creates a new spanmanager with src as base .", "save all values from ui components to beans", "format a date using a really short format .", "reset the initialifexistsearchactive indicator", "true if the entry is expired .", "adds an additional comparator to this composite .", "write a byte [ ] to the buffer .", "close the cache in tear down", "clears all the selected tags", "quick log , with a max relative error of about 2 . 8e - 4 for values in ] 0 , + infinity [ , and no accuracy at all outside this range .", "max norm ( infinity norm ) reduction operation : the output contains the max norm for each tensor / subset along the specified dimensions", "if an equality ( = = ) expression has double - parentheses , remove one set .", "initialises all values in the matrix to the given value", "activate the logix , starts logix processing by connecting all inputs that are included the conditionals in this logix .", "returns the parent classloader assigned to this action loader", "executes command on a remote machine .", "generates an enumset embeddingflags representation of the supplied unsigned short .", "initializes the spawn action with the 2 actions to spawn", "create a matrix from this group of parameters", "reduce the number of points in a shape using the douglas - peucker algorithm", "copy values from delegate repositoryoperation to this serviceoperation", "retrieves the details of a virtual wan p2s vpn gateway .", "donates the tax receipt after the user has verified all meaningful values and fixed if needed", "closes the inputed number of open tags .", "sets this rotation to the contents of the passed one", "converts the audio packet data into mono audio frames .", "checks that the redis cache name is valid and is not already in use .", "finds all alerts for the given entity .", "gets the valueat attribute of the playertablemodel object", "save to a file", "determines if a project id criteria was specified in the query", "constructs the popupmenu & actionlistener associated with the table & model .", "adds a number or string constant to the constant pool of this symbol table .", "same as calling addtransition transitionbuilder . build", "use to append default types xml elements use by the save metid", "encodes outgoing multicast requests based on protocol in use applying configured security constraints if any .", "this function compares two byte arrays for canonical ordering .", "looks up the value in the columnfield of the given index", "removes a button from a toolbar", "return an automaton that accepts all 1 - character deletions of s ( deleting one character ) .", "called when one or more lookup service registrars has been discarded .", "read entity records from database table with applied criteria .", "create and return an inputstream that will read the given byte [ ] and decompress it as bytes are read from the stream .", "modifies the release and expire date of a resource , and changes the notification interval .", "return true if a webbrowser is support", "this adds a property descriptor for the name feature", "remove the child given by the idenfier passed from the list of children", "returns a string with the ' mangling ' required for idl names that contain special characters , including ' _ ' , ' $ ' , and all characters not in latin - 1 .", "reconcile the given mapping according to the requested options", "returns the index of the last directory separator character .", "signal that the observations are now all added pdfs can now be constructed .", "this method converts the given unification xref to a relationship xref", "finds partition information in the persistent store .", "returns graph describing the tree .", "reads the manifest from the specified inputstream .", "checks if this page is loaded", "recycles children between given indices .", "transliterate unicode string to a initials .", "writes the data to the given outputstream .", "add a new child node to this node .", "gets the list of all resources of this group ( primary and secondary ) .", "start this watchable and run for the given amount of time or until finished or stopped .", "adds a listener object that is notified about debug events .", "this approach uses either the getscaledinstance ( ) approach to get each new size or it scales on the fly using drawimage ( ) .", "gets the menu item out of the context", "concatenates this transformation with a rotation about the z axis units are in radians", "wires initial pieces together that are required for nearly everything .", "creates a new uri instance of the given unencoded component parts .", "getter for the date this user was last updated on .", "you are not supposed to instantiate this class .", "implements special knowledge for some endgame situations .", "remove a listener from this eventdispatcher .", "automagically wraps any static java method having four input parameters of any class into xpresso s function .", "creates a cluster .", "this is the real implementation of evaluateexpression .", "marshall the given parameter object .", "returns the given sample index converted into a time in seconds based on the sampling rate of the stored audio samples", "the objects x coordinate", "confirm the pipeline is committed through the given seqno .", "makes sure the modeltoview array is of size rowcount .", "convert the data element to datarecords for each available template", "get an entity given the entity id", "add a constraint for finding string values that contain a provided string .", "removes listeners from supplied component and all of its chidlren", "adds the directory to the repository with the default mode of 644 .", "register for a hostid in specific site .", "override this to hook into what happens when ddp connect happens", "determines if one set of blocks is reachable from another set of blocks based upon the directions of the set of blocks .", "process a port metric sample .", "creates a new exception object .", "applies the shape to the native component window .", "removes all dependent resources of an account .", "removes provisional \" http / 1 . 1 100 continue \" server responses from the request stream .", "set the size of the sprite sheet", "interprets a mod instruction .", "creates a continousquery using the specified type expression and parameters .", "creates a new halt reply object .", "handles command actions", "initialise the gui field values", "sets the properties and saves it to disk", "tests if a point is inside a polygon .", "returns a new datetimeconverter", "information about the scheduled instances .", "factory method for instantiating a list from the given object array", "maps the function across all rows , appending the results to a new numbercolumn", "when the add rollback is made , need to remove the topic .", "add an integer array to the config", "creates a new error dialog .", "writes a project setting to the database .", "parse the user s selected module name xml element", "this method is called from the provided executor .", "clear time out", "read the originid from the bos line that is expected to follow .", "gets whether this query is forced to be executed under transaction .", "convert an enumset of dependencytype to an array of strings .", "removes an instruction from the code node .", "parses the given state provided by the replicator and guess a generic resourcestate from it", "generates challenge based on response sent by client .", "adds the node to this parent", "parse a 64 bit signed value from the buffer", "only volumes with usage 2 can be ingested , other volumes apart from replicas have usage other than 2 .", "observe the input from the driver station for the teleop mode", "creates a new action object .", "if have default value function", "the dopost method of the servlet .", "method understandsproperty", "registration of a configuration file e . g com . xxx . route route . conf", "deletes given sudoku from the database", "build a binary expression that compares two values", "creates an instance with the specified detail message and cause .", "verify tables are renamed as expected .", "prepare the filter for the transiton at a given time .", "print cfg annotated with results from given dataflow analysis .", "returns the byte array corresponding to this constant value .", "returns a map of discovered itemsets and their support , where the support is the number of times the combination appears in the input data .", "compares all the fields of the dateitem to another dateitem", "gets a view from the pool and prepares it", "constructs the sync pattern matcher and defines the soft mode maximum number of bit errors to allow in the pattern match .", "returns the unqualified class name for the bean", "retrieves a comma separated list of all of this databases sql keywords that are not also sql92 keywords", "returns the trailers .", "builds a type checking extension relying on a groovy script ( type checking dsl ) .", "asks for input from the user .", "inserts a specified account into the set .", "sets the experiment type", "creates a new object of the exact same class as this field .", "handles changes to the projects selected in the list", "print a string representation of the value .", "fromexpression : = conditionalorexpression", "creates a datagram packet to be received at server", "set a baseline value .", "create an amazonserviceexception using the chain of unmarshallers .", "locate all challenge handlers to serve the given location .", "insert a model .", "parse a json data structure from content at a given url .", "clone the d double array for manipulation", "creates an empty changerequestattribute .", "entry point that does not call system . exit .", "lookup color as a string", "resolve this environment reference during deserialization", "returns the l2 - norm of the vector", "workflow step method for disabling an image access .", "creates a new object of the specified type configured by parsing the provided xml .", "traverses the graph structure and stores all tags to the graph .", "returns the value for a registered property .", "adds a replacedelement containing an image to a cache of images for quick lookup .", "get a solenoid instance from the registrar", "this returns the property descriptors for the adapted class", "converts a double to string with maximum precision .", "get idl content from class .", "checks if is modified border color", "reduce size of buffer while not losing current elements beyond what the size reduction would cause .", "serialize a list of dataactions", "close a connection .", "returns the currently active connectionpool for a specific", "return this as a typeparameterdeclaration or throw unsupportedoperationexception .", "ist die liste mit den urls zum download einer filmliste", "you are not supposed to instantiate this class .", "order the expression based on precedence", "gets the window width", "draws an oval for the given parameters .", "used by java serialization", "implement this method to return an instance of my custom document corresponding to the specified url", "get the total number of events that have been handled by this listener .", "set the user configuration", "checks that the glyph id is within the correct range .", "obfuscate any key & trust store passwords within the given properties .", "a convenience method to shorten the creation of a basic proposal .", "marshall the given parameter object .", "compute the minimum of two values", "prepares for a check that the subject is a finite number not within the given tolerance of an expected value that will be provided in the next call in the fluent chain .", "to remove all the players nps item of this group", "constructs a new listener with the number of executions this listener will be set on with an optional delegate listener .", "determines whether the native corresponding to the specified long format was listed in the flavormap . properties file .", "read log records ( in fact does nothing )", "access control will check the oids .", "tests if this term is unifiable with an other term", "convert the version to string format for use in printing to the console or other implementations", "write a list of coordinates in kml format .", "sets the low value shown by this range slider", "returns true if message is seen false if not", "instantiates a new jk table column value .", "add a \" to \" recipient address .", "using the given type , obtain a reference to the child resource of the given type .", "jcypher match or create ( depends on the clause ) nodes as starting points of the path , make them accessible by a jcnode element later on in the query", "returns a reference to a type parameter of a generic class or method .", "create and return the main panel .", "convert to a stream with the values repeated specified times", "initiates new request to connection target", "gets the db name .", "writes the attribute set to a file .", "shortcut method to start the browser with explore in hta mode", "serializes the current solution to a string .", "calculates the total degrees between startangle and endangle and sets totalcircledegrees to this value .", "adds a column that has been modified between the two dbs .", "returns a stream where the first element is the replaced with the result of applying the given function while the other elements are left intact .", "convert a deque to a list .", "registers a serializer for the given class .", "print a message to stdout without trailing new line character .", "returns the character located at the specified index in the buffer .", "sort the container plans based on the container ids", "unzips the specified zip file to a temp folder", "records a vplex volume event .", "true if pointing in forward direction", "generates the format restriction objects .", "returns if the omforeign is valid", "try is it possible to make connection to the remote messengers handle", "called by the engine after all connections have been closed .", "writes the html before a visible input field .", "the seed corner is the point farther away from the first point .", "this method begins the process of converting an automaton to a regular expression", "accelerate adjusts the velocity of the vehicle based on the acceleration", "merges the two meta objects", "closes this index and the associated pagestore", "this method will try to get the next file to be parsed .", "get the id of the record", "reads an authtime or authtimewithhash object from a channel .", "adds an fxg child node to this group node .", "each element of metrics list is responsible to call this method and report metrics", "invoked after a trace list could not be saved to the database .", "read config objects stored in yaml format from string", "compares this range to another object to test if they are equal", "decrypt bytes previously encrypted with this class .", "invoked by button to do one cycle", "notifies that multiple header items are removed .", "adds a admin centric function to the function tab", "an object that contains deliverability metrics for the domain that you specified .", "if deltay move the content down", "creates a new node object .", "extracts string from byte array", "returns true if fields of this type should be tokenized", "display this screen in html input format .", "removes all mappings from this map .", "forward pos until the end of quote", "parses this glob to create an equivalent regular expression that matches the same inputs .", "adds the miscpanel panel to the editor given the patch", "returns true if the double value is valid .", "will sleep up to 30 seconds , looking for expecteddoccount", "information about the fleets .", "tell the listeners that the task had been scheduled", "release the resources associated with this instance", "forms a list by stepping through the range by the indicated interval .", "description of the specified attribute name .", "this method is called when an untraced leak is detected .", "tests if a constant connection is maintained or if a new connection is established for every transaction .", "adds an action to be performed when the menu cursor item is pressed", "get the value from the source entity .", "generate a copy of the resource , previewing what the next publication of the resource will look like .", "returns true if the ' scope ' attribute is present without ' var '", "atomically removes all of the elements from this deque .", "adds radial distortion", "returns the position of the neighbor to the left of this position", "adds a decoration at the end of the list .", "search for a particular menu", "returns an instance of dateformat for formatting an instance of java sql date", "makes a configuration for jmxetric that represents the composite tag", "sets the direction angle of this node in radians", "creates a new code node in the view .", "apply a model transformation to this matrix for a right - handed coordinate system , that aligns the local + z axis with ( dirx , diry , dirz ) and store the result in dest .", "this method gets called when a start tag is encountered .", "returns a string representation of this object .", "marshall the given parameter object .", "removes the given timesection from the list of sections .", "unregister an env group handler", "return the number of processors available on the machine", "adds identifiers to the exclusion strategy .", "this method will be invoked by test methods for each single subclass of displayablewrapper", "back up the database .", "searches for a matching name in the given set .", "creates the privilige .", "adds money to the balance of a user", "the width of the singleline representation of the conjunction of the formlas .", "use this api to add dnsaction resources .", "returns dts subset dao config for a connection type", "returns a description of the element", "sets the angle representing the hue", "get the reason for failure if there any", "gets the exception thrown rule as specified exception .", "creates the property sheet panel .", "after an insert this hook is called to adjust the size free values of the set and to perform rehashing if necessary .", "sets connection establishment timeout .", "process an array of bytes , producing output if necessary .", "attempts to rename a file .", "gets the value corresponding to the specified key in the current context of the specified scope .", "converts a stack trace to a string .", "computes and returns a description string for this caller hierarchy .", "returns the expression of the parameter", "output the text for the end of a document .", "listens to key to close a | window | .", "calculate the probability of the first instance transforming into the second instance : the probability is the product of the transformation probabilities of the attributes normilized over the number of instances used .", "execute the pigiron vsmapi call we have set up in this instance", "true if the student has assigned the desired number of requests i e number of non alternative course requests", "service the request by delegating the call to the real servlet", "hashcode by basic peristent object fields without children objects", "set the given property to pattern", "returns the next sibling node if it exists and it is text or cdata .", "add an asterisk ( ' [ * ] ' ) at the given position .", "this method works around the bizarre semantics of bufferedinputstream s read method .", "convert a object to a string array of roles", "update the font in the default style of the document .", "sets the list of synonyms", "appends a child to the current node .", "logs a log record", "add an explicit exception .", "change the period of validity for a subscription .", "functions identically to android . media . mediaplayer . release releases the underlying resources used by the media player .", "callback when the selected tab has been reselected .", "fakes a service call and just returns dummy data .", "provides the collection of permission assignments that apply to the specified user , optionally including inherited assignments .", "makes the given visitor visit this parameter declaration .", "gets the pool config policy .", "contenthandler interface method", "removes the prefix value from an annotated type , by constructing and returning a copy of the annotated type without the prefix", "concrete sub - classes call this method to perform the final formatting if a log entry .", "return whether or not this dataflow fact is identical to the one given .", "write a utf8 encoded string to out", "sets the required and optional fields that should be shown in the panel .", "adds a classifier to the storage .", "find the index of the first unescapped ( using backslash ) character", "refresh ' s this connection ' s access token using its refresh token .", "a list of resource groups .", "specialized variant of findnode to get first valid node .", "this method is invoked by searchimpl ( ) to make sure that each adapter receives only its corresponding checkpoint in the change control .", "get the date header from the response", "initializes the tables of the database .", "get cardinality by job state", "init this task by creating new instance of the ant task and configuring its by calling its own init method", "retrieves the necessary information to build an embedded signature request .", "examines pixels along the bottom border", "checks a content specification to see if it contains existing topics that have the same id but different revisions .", "moves the cursor to the first row in this resultset object", "return time read from resultset .", "pr ( t > v | x , y , t ) the probability of surviving until time v without migrating , conditional on starting in state x at time 0 and being in state y at time t .", "removes explorer tree selection listener .", "renders the model which is a display list", "this assumes that comparability implies assignability or convertability . . .", "compute the cross validation error from an array of predictions for n folds .", "creates an ordered list .", "returns an enumeration describing the available options .", "reads serialized fields following serialized forms specified by java specification .", "converts the passed author to a dto .", "sets the specified focus thickness of the border", "return whether or not it is acceptable to take the given branch .", "creates the panel gui .", "returns the icon from the joptionpane the receiver is providing the look and feel for or the default icon as returned from getdefaulticon", "determines the scale factor for displaying a structure loaded from disk in a frame .", "returns nanoseconds since boot , including time spent in sleep .", "replaces comments or literals from a text by blanks and stores syntax points", "indicates if channel along with all of the other currently sourced channels can fit within the tunable bandwidth .", "destruction of the servlet .", "creates a new sub menu .", "given an arbitrary piece of text and a bitcoin - format message signature encoded in base64 , returns an eckey containing the public key that was used to sign it .", "writes one profiling line of information to the log", "callback for when text is inserted into the document .", "check for a four - byte signature .", "save history elements to memento .", "check if the contextserver is ready i e it has created a server socket", "this method will take the ' object ' , which points to a cimargument , and determine if it holds a cimobjectpath .", "load artifact at path with a custom artifactid", "tells whether added files must be diffed also", "lists deleted secrets for the specified vault .", "adds a command listener to be invoked for commands on a specific form", "this only works with exact variable names not", "ensure the xml looks like a declaration for a loc filter extension", "get the count of features in the tile at the lat lng coordinate and zoom level", "returns true if the change set includes the type argument .", "clears the point list .", "adapts the activated state of all children of a specific view group .", "add the specified network selection listener .", "generate a signature for the loaded message using the key we were initialised with .", "visit a block using buffering / recovery", "returns a context for retrieving the specified property .", "notify the creating of whole dom tree has finished .", "create a mapping from a hive object specification to the thrift hive table object .", "f0 globalfunctioninstance globalhwsubcomponentinstance globalhwbusinstance", "adds a name to a list of names in the repo .", "adds a business validator", "this method breaks concatenation mode", "update the key the editor input in this case associated with the input context without firing a context change event", "close the atomic file , but do not \" commit \" the temporary file on top of the destination .", "registers the listeners for this window", "calls any listeners with the given event and current port", "inserts a column before the specified index", "removes all parameter with the given paramname and paramvalue .", "stop the server .", "merges this rectangle with the other rectangle .", "converts a binhex string back into a byte array ( invalid codes will be skipped )", "trim to max byte size", "factory method for the recon type handlers", "converts a xml signature ecdsa value to an asn . 1 dsa value .", "cleaning up resources", "marshall the given parameter object .", "add a control dependency for this variable on the specified variable .", "gets the y coordinate of the components top left corner", "calculate the filtered value by applying the coefficients against the complex samples in mbuffer", "clears everything except the listener", "invoked after the color of an edge in a view was changed .", "method for include new accounting to detail of reservation", "returns consolidated version of the multiply", "removes the color panel specified .", "initializes the generator", "remove xyseries based on name", "return true if any warnings have been collected false otherwise", "animate any element with specific animation .", "finder for responses in the responsestore", "indicate whether we are configured as an internet server", "saves the last updated information to the properties file .", "tries to find the specified module .", "adds a measure", "true if the user has this permission .", "distribute this map layer ' s map objects into the given interval set and update each map object with its interval .", "stop the mouth movement", "constructor that sets the element type of the array this entry is representing", "extend object with category methods .", "sets the commerce discount usage entry local service .", "quote the given string .", "creates a new log and updates the logtable", "check if this formatting object generates reference areas", "assert either complete successfully or error signal has been received .", "deletes an entity from database .", "lists the formation info for an app", "populate a jcombobox with signature algorithms depending on the key pair type .", "add a store of given field at given instruction .", "checks whether the module is the root file of loaded spec", "create a ping frame .", "' recording time ' ( tdrc ) replaces the deprecated frames ' tdat - date ' , ' time - time ' , ' trda - recording dates ' and ' tyer - year ' in 4 . 0", "appends the decision variables , objectives and optional properties to the output file .", "returns the char position of a unicode char", "adds an unparameterized factor to the model under construction .", "returns true if the block is full .", "enables metrics for the server by setting opt out to false in the config file and starting the metrics task .", "stored fields format with specified mode", "creates a stunexception setting id as its identifier .", "returns the function element corresponding to the name .", "load the named file of the given map type", "creates a new action object .", "determines whether there is already a graph panel open inside the window that displays a given view .", "this method can be used to update alert definition for the stat mentioned .", "draws the background of the view .", "called periodically by jobtrackermetrics to update the metrics for this job", "returns a binary representation of this attribute .", "return the original internal class value given the randomized class value i e the string presentations of the two indices are the same", "cyclifys a sentence to a string", "request reply brakes", "sleep for so many milliseconds even if interrupted .", "basic email validator", "reads a \" message set \" argument , and parses into an idset .", "remove a version from the local repository", "fix the records into sorted order , swapping when the first record is greater than the second record .", "evaluates all individuals in the population by applying the inner operators .", "get the first name label", "releases all cursors .", "returns highest absolute key ignoring directonality", "saves the history properties of the sqlviewer in the user ' s home directory .", "only validate the type size without showing an error message .", "implement correlationnotice interface", "creates a subraster given a region of the raster .", "writes the specified byte to this output stream", "called from event dispatch thread", "sets the securityrolelink attribute of the securityrolelinkpanel object", "do not use ! .", "applies a stop condition for a looping state .", "adds a unit to the import list", "compares two floating point numbers with a tolerance .", "creates a new version of a slot type based on the $ latest version of the specified slot type .", "expand out the list of dependencies for a given ijavaproject .", "wraps entity attributes into redis format byte [ ] .", "convert the time using the specified calendar .", "entry point to the service", "resume all jobs whose group contains jobgrouptoken", "resume all triggers whose group starts with triggergroupprefix", "at startup create and show the main frame of the application", "used to remove an editor from the tabs .", "add - add this data to the file .", "adds an email from address", "constructs a message from its binary representation .", "validates parameters specified in the request .", "logs the occurance of an exception while retrieving the input file .", "increment a date by one day .", "append a group node comment .", "dumps the specified usb configuration descriptor into a string and returns it .", "checks if list contains specified objects string representation", "rowinput / outputbinary : row ( column values )", "sets the formats to use for the values passed into format methods or returned from parse methods", "lays out the container in the specified panel", "accept method for visitor support .", "converts into a given parameters object from a file .", "test if an entry matches a template .", "prepares the connection to the given channel with the given credentials .", "fills every slot in the list with the specified value .", "adds an activator and automatically submits it to the thread - pool", "transfers the selected capabilities from the jlist to the", "default implementation for backwards compatibility .", "transform a topic csnode entity object into an infotopic object that can be added to a content specification .", "finishes writing and flushes the outputstream or writer that this xmlwriter is writing to .", "setter method for the the property hideatsucceedingrows", "checks that this resource hasn t been held longer than the specified timeout limit .", "creates a new state object when a node is clicked with the left mouse button .", "creates a knx address from xml input , the knx address element is expected to be the current or next element from the parser .", "initialization of the servlet .", "merge this positions with another one .", "add picturecontent at the specified position", "returns the returntype of the method", "makes all the sub domains bounds consistent with each other", "returns the number of symbols summed over a specific range of ranks", "decodes this instance", "perform the supplied function on each directory used by this server .", "the zookeeper connection string aka zookeeper . connect .", "this method is currently the same as nextelement", "reads a delta entry from the checkpoint .", "decodes the information in the provided argument list as either a single integer specifying the number of characters , or two integers specifying the minimum and maximum number of characters .", "writes all mappingstatuses to log", "returns section element with exact name", "call the callback with the reader object as an argument", "parse the next inline element in subject , advancing input index .", "notify the journal that a transaction has prepared and hence is no longer active", "writes the data from this output stream to the specified output stream after it has been closed .", "test whether sample binary arrays are correctly decoded .", "starts a completely new game", "returns the showattributes", "get a page of pub sub subscriptions in a project using a specified page token .", "this is a callback that will allow us to create the viewer and initialize it", "adds the local and global comment strings to the label content .", "services a commandline request .", "encodes a byte array into base64 notation .", "return ( column name , legend name ) to set on chart", "remove characters from a string", "run the resources validations", "constructs objectname as per jsr 77 spec i . e \" websphere : j2eetype = jmsresource , j2eeserver = servername , name = jmsresourcename \" for jmsresource parent - type is mandatory and it is j2eeserver .", "configures the instance of openam as provided by the configuration data .", "information about the vpcs with the referencing security groups .", "creates a union wrapping a value of the second type", "the function round _ mgrs rounds the input value to the nearest integer , using the standard engineering rule .", "setup the language manager", "creates a union wrapping a value of the third type", "called to reset current sensor data .", "todo checks tungsten module versions", "creates a new memory request command .", "invoked when pipeline is building", "make the left child of a node .", "returns a segment that is the intersection of this segment and the interval .", "set the metadata for a bug category .", "returns the next point in the traversal .", "this method may be used to register a dynamic converter with the javatypetranslator .", "returns number of rows task filters in the table", "information about the load balancer attributes .", "wait until the log reaches at least a particular event id .", "create a set as a union of a set and an iterable .", "wrapper for session manager execute async method .", "method readnext tests the readnext method of the given archvitor", "start up the thl server which spawns a service thread .", "used to write spreadsheets where entry number exceeds the megabulk size .", "the point counter - clockwise to given point", "add a listener for jmf negotiation events .", "compare two float arrays using a given tolerance", "check if the class name starts with one of the prefixes specified in ` dropprefix ` , and remove it .", "check if an interval intersects the instance", "creates a new action object .", "test whether the returned value is always .", "this method checks whether a binary is installed .", "to set background as gradient type", "removes the resource key from its transfer stack .", "returns if the generic argument matches a user defined pattern ."], "label": ["how-it-is-done", "why", "what", "what", "what", "why", "how-to-use", "property", "what", "property", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "why", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "others", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "what", "why", "how-to-use", "why", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "property", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "how-it-is-done", "what", "what", "property", "what", "why", "property", "property", "how-it-is-done", "what", "property", "how-it-is-done", "what", "what", "why", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "why", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "how-to-use", "property", "what", "why", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "property", "property", "how-it-is-done", "what", "how-it-is-done", "what", "what", "why", "what", "why", "what", "what", "why", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "how-it-is-done", "what", "what", "property", "why", "what", "how-to-use", "what", "what", "what", "property", "what", "what", "what", "why", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "how-to-use", "what", "what", "property", "property", "why", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "why", "what", "what", "what", "others", "what", "what", "what", "how-it-is-done", "what", "what", "what", "others", "how-it-is-done", "what", "property", "why", "property", "property", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-it-is-done", "others", "what", "what", "why", "what", "what", "what", "what", "what", "why", "what", "what", "what", "property", "why", "property", "what", "property", "property", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "property", "what", "what", "property", "what", "what", "how-it-is-done", "how-to-use", "what", "property", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "how-it-is-done", "how-it-is-done", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "how-it-is-done", "why", "what", "property", "what", "what", "why", "why", "what", "why", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "how-to-use", "why", "why", "how-it-is-done", "how-it-is-done", "what", "why", "what", "what", "what", "property", "why", "what", "how-to-use", "property", "how-it-is-done", "what", "property", "what", "how-to-use", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "property", "what", "what", "what", "how-to-use", "how-it-is-done", "what", "what", "what", "property", "what", "what", "what", "why", "what", "what", "how-it-is-done", "what", "others", "why", "what", "what", "how-it-is-done", "why", "what", "how-it-is-done", "how-it-is-done", "what", "what", "property", "what", "property", "how-it-is-done", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "why", "what", "how-it-is-done", "what", "what", "property", "what", "what", "how-it-is-done", "what", "property", "property", "what", "why", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "property", "how-it-is-done", "what", "what", "why", "what", "why", "what", "how-it-is-done", "what", "how-it-is-done", "what", "how-to-use", "how-it-is-done", "what", "what", "property", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "what", "why", "why", "what", "why", "property", "why", "what", "what", "what", "what", "why", "what", "what", "why", "how-it-is-done", "what", "what", "why", "what", "what", "how-it-is-done", "what", "property", "property", "what", "what", "what", "what", "what", "what", "property", "why", "what", "why", "property", "why", "what", "what", "what", "property", "what", "why", "property", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "why", "what", "what", "what", "how-it-is-done", "how-it-is-done", "why", "what", "property", "what", "why", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-to-use", "property", "what", "what", "what", "why", "why", "what", "what", "what", "what", "why", "property", "how-it-is-done", "what", "what", "how-it-is-done", "what", "property", "property", "what", "what", "what", "how-to-use", "what", "property", "property", "how-it-is-done", "how-it-is-done", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "why", "what", "what", "property", "what", "what", "how-it-is-done", "property", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "property", "how-it-is-done", "what", "what", "property", "what", "what", "how-to-use", "what", "what", "what", "property", "what", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-to-use", "property", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "property", "how-to-use", "property", "what", "why", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "why", "why", "what", "what", "property", "property", "what", "what", "what", "why", "what", "what", "how-it-is-done", "how-it-is-done", "others", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "why", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "why", "what", "how-to-use", "what", "how-it-is-done", "how-it-is-done", "property", "how-it-is-done", "why", "what", "property", "what", "what", "what", "how-it-is-done", "what", "property", "what", "why", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "why", "what", "what", "how-it-is-done", "what", "what", "why", "what", "what", "how-to-use", "how-it-is-done", "what", "how-it-is-done", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "property", "property", "property", "what", "why", "what", "property", "what", "how-it-is-done", "what", "property", "property", "what", "how-it-is-done", "property", "what", "what", "property", "what", "what", "what", "why", "how-to-use", "what", "how-it-is-done", "others", "what", "what", "property", "what", "what", "property", "what", "what", "what", "why", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "why", "what", "what", "how-it-is-done", "what", "what", "property", "what", "property", "what", "how-it-is-done", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "property", "what", "what", "what", "what", "why", "how-to-use", "what", "how-it-is-done", "how-it-is-done", "what", "why", "how-it-is-done", "how-it-is-done", "what", "what", "what", "why", "what", "why", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "property", "what", "what", "what", "what", "property", "what", "property", "property", "how-it-is-done", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "what", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "property", "what", "property", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "property", "why", "what", "what", "property", "what", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "why", "property", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "what", "why", "why", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "property", "what", "property", "what", "what", "how-it-is-done", "property", "how-to-use", "what", "what", "property", "what", "what", "why", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "property", "why", "why", "what", "how-to-use", "what", "what", "how-it-is-done", "what", "property", "what", "property", "what", "why", "what", "what", "what", "what", "how-it-is-done", "what", "why", "what", "what", "what", "what", "what", "what", "what", "why", "how-it-is-done", "what", "what", "why", "what", "what", "what", "what", "what", "property", "others", "how-it-is-done", "what", "what", "property", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "how-to-use", "what", "why", "what", "how-to-use", "what", "how-it-is-done", "property", "why", "what", "how-it-is-done", "what", "what", "what", "property", "what", "why", "what", "what", "what", "why", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "property", "what", "what", "others", "how-it-is-done", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "why", "property", "what", "how-to-use", "what", "what", "how-it-is-done", "why", "how-to-use", "what", "what", "property", "property", "property", "what", "others", "what", "what", "how-it-is-done", "what", "how-it-is-done", "property", "why", "how-to-use", "property", "how-it-is-done", "property", "what", "property", "what", "how-it-is-done", "why", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "what", "why", "what", "what", "property", "what", "what", "how-to-use", "what", "why", "how-it-is-done", "what", "how-it-is-done", "what", "why", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "others", "property", "what", "what", "property", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "why", "property", "why", "how-it-is-done", "what", "property", "what", "how-it-is-done", "what", "what", "property", "how-to-use", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "why", "property", "what", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "property", "what", "others", "what", "what", "property", "property", "what", "what", "what", "property", "what", "what", "property", "property", "what", "property", "what", "what", "property", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-to-use", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "others", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "property", "what", "why", "what", "what", "property", "property", "how-it-is-done", "property", "why", "what", "what", "property", "what", "what", "what", "what", "what", "what", "property", "what", "property", "property", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "why", "what", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "why", "what", "what", "how-it-is-done", "what", "what", "why", "property", "what", "what", "property", "what", "what", "what", "property", "how-it-is-done", "how-it-is-done", "property", "property", "why", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "why", "property", "what", "others", "property", "what", "why", "how-it-is-done", "what", "property", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "others", "why", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "why", "what", "what", "what", "what", "how-it-is-done", "how-to-use", "why", "how-it-is-done", "what", "what", "what", "property", "how-to-use", "what", "what", "what", "property", "what", "what", "property", "how-it-is-done", "property", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "others", "why", "what", "what", "what", "what", "what", "property", "what", "what", "what", "why", "what", "why", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "why", "what", "why", "how-it-is-done", "what", "what", "what", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "why", "what", "property", "property", "what", "how-it-is-done", "how-it-is-done", "property", "what", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "property", "why", "how-it-is-done", "how-it-is-done", "property", "why", "what", "why", "what", "what", "what", "why", "what", "what", "property", "property", "what", "how-to-use", "how-it-is-done", "what", "why", "what", "what", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "why", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "property", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "property", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "what", "how-it-is-done", "what", "property", "what", "how-to-use", "what", "property", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "why", "how-it-is-done", "property", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "how-to-use", "why", "what", "what", "how-it-is-done", "property", "what", "what", "property", "what", "what", "property", "what", "what", "what", "how-it-is-done", "how-to-use", "property", "what", "what", "what", "property", "how-it-is-done", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "what", "property", "property", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "property", "why", "why", "how-it-is-done", "what", "property", "how-it-is-done", "how-it-is-done", "what", "property", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "why", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-to-use", "property", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "why", "what", "how-it-is-done", "what", "property", "how-it-is-done", "what", "what", "what", "why", "what", "property", "what", "what", "what", "property", "what", "property", "why", "property", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "why", "what", "what", "what", "how-it-is-done", "what", "what", "why", "why", "how-to-use", "why", "what", "property", "what", "what", "what", "why", "what", "property", "what", "what", "others", "how-it-is-done", "what", "what", "how-it-is-done", "how-to-use", "why", "how-it-is-done", "what", "what", "what", "what", "why", "why", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "how-to-use", "why", "property", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "property", "what", "why", "what", "what", "what", "what", "how-it-is-done", "property", "property", "what", "property", "how-it-is-done", "what", "what", "property", "what", "what", "what", "why", "what", "why", "property", "property", "what", "property", "what", "why", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "property", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "why", "what", "what", "what", "why", "what", "how-it-is-done", "why", "what", "what", "how-it-is-done", "why", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "why", "how-it-is-done", "how-it-is-done", "why", "what", "what", "why", "what", "what", "what", "property", "what", "property", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "others", "what", "property", "how-it-is-done", "why", "how-it-is-done", "what", "how-it-is-done", "property", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "others", "what", "how-to-use", "what", "property", "why", "property", "how-to-use", "property", "what", "what", "what", "why", "what", "what", "what", "why", "why", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "why", "what", "property"]}