{"id": [11486, 16528, 7949, 8063, 13348, 15732, 11359, 6778, 15198, 13735, 17430, 9151, 13674, 18345, 14039, 6009, 13023, 14108, 3271, 16550, 16657, 14867, 13290, 9113, 17572, 17671, 11064, 3762, 18803, 17934, 18528, 14821, 1603, 13064, 2594, 15569, 15751, 12152, 4526, 10533, 1847, 4609, 11577, 8786, 17556, 371, 3964, 5429, 2860, 13127, 14906, 1428, 14301, 15844, 12637, 3828, 14899, 17528, 9235, 3045, 12710, 8348, 1900, 16931, 14469, 8578, 6475, 12409, 3869, 11441, 15239, 3133, 15164, 2513, 9308, 5476, 19195, 811, 18226, 18433, 19756, 10764, 3554, 16166, 5836, 12842, 648, 4627, 4729, 14153, 4261, 9582, 12278, 4285, 18622, 17878, 8930, 12770, 16889, 2053, 9227, 16808, 15879, 18934, 9430, 11802, 18008, 17157, 18388, 3074, 9051, 4467, 18784, 11740, 10082, 17425, 10679, 10559, 2209, 303, 4200, 18395, 17090, 14204, 1030, 14872, 2266, 17805, 19777, 2565, 7524, 18786, 3060, 9715, 4825, 10413, 14925, 4626, 3189, 18776, 4985, 16287, 7603, 2718, 7051, 13035, 7370, 2967, 6004, 14130, 3973, 19336, 6737, 17796, 14917, 19863, 18486, 16236, 7119, 19348, 17906, 4518, 6898, 13232, 19720, 3504, 13580, 13279, 11159, 15502, 12517, 5695, 14818, 3724, 4232, 17316, 16035, 7889, 15073, 19139, 11562, 5215, 15209, 4909, 15669, 17376, 18126, 19825, 5048, 17713, 18590, 9465, 10558, 18594, 16046, 2987, 17194, 4920, 4659, 10763, 9530, 5175, 10436, 1332, 3450, 6246, 480, 10797, 8502, 6397, 12690, 12774, 1812, 224, 1363, 9651, 19966, 14259, 7707, 1539, 7556, 680, 10833, 19243, 11861, 6441, 5782, 5085, 5624, 3051, 9124, 1260, 15798, 1622, 14071, 3736, 12135, 7530, 8549, 1514, 4680, 10210, 12025, 9815, 13425, 11845, 6694, 3499, 16157, 5983, 4135, 13091, 13763, 5784, 12600, 1734, 16139, 1592, 17674, 2869, 10992, 5232, 17293, 8451, 18056, 14046, 12848, 17283, 7024, 11225, 2522, 2275, 12665, 18468, 7058, 7893, 8223, 17849, 11752, 18320, 13916, 16855, 7441, 556, 4875, 2827, 5990, 13672, 5256, 12521, 4582, 16295, 2578, 9761, 9590, 2031, 2991, 13109, 8524, 17116, 4951, 234, 11554, 11168, 7855, 5103, 14499, 3034, 14282, 7128, 7797, 6516, 2162, 13226, 5745, 7936, 11264, 7565, 7629, 7639, 10726, 7899, 11847, 7535, 5674, 18118, 8278, 12183, 9835, 13518, 15361, 13752, 9946, 14958, 15923, 14668, 5463, 12477, 18871, 2116, 6948, 1046, 11246, 18458, 15292, 8556, 4786, 15544, 1034, 8797, 4142, 11438, 15522, 11148, 1461, 323, 11640, 17669, 10414, 16004, 13484, 1236, 8376, 5076, 16302, 838, 3899, 4797, 7334, 7192, 14280, 7885, 13946, 16129, 16228, 4209, 16717, 6968, 14691, 18636, 12044, 3972, 12525, 14144, 1895, 409, 2597, 1898, 16978, 5807, 5757, 8122, 3635, 15646, 11149, 2043, 2574, 18826, 832, 8973, 724, 12440, 13295, 5258, 2634, 14190, 15891, 8350, 4107, 9111, 15781, 14035, 5090, 13924, 3123, 6860, 14480, 18195, 5364, 5130, 2029, 19633, 19710, 482, 16088, 3407, 10199, 1306, 14730, 14882, 18228, 771, 13436, 16332, 6113, 1349, 9086, 14812, 15287, 14883, 738, 1468, 2189, 2077, 9316, 4677, 7953, 241, 11217, 2328, 292, 11721, 4413, 282, 8790, 9023, 7503, 15807, 19482, 4314, 2687, 7721, 687, 8249, 6244, 17526, 19034, 855, 18581, 3517, 11137, 19025, 917, 10252, 7489, 17216, 3124, 19722, 10762, 7609, 16792, 11703, 2495, 5351, 10755, 5715, 5678, 10240, 14468, 4120, 14121, 15939, 11951, 3072, 12740, 10630, 17500, 5802, 10089, 13938, 13762, 19413, 9141, 16391, 2042, 13245, 6049, 3888, 15144, 9570, 1912, 984, 11945, 14107, 1992, 10587, 5764, 10530, 4078, 13121, 9000, 2170, 4073, 14045, 997, 16910, 8720, 7651, 10381, 3732, 1044, 7806, 19976, 2736, 6040, 11490, 12448, 4226, 13357, 7734, 19865, 1119, 13275, 1796, 2800, 19695, 11458, 10400, 7827, 2081, 8520, 17882, 2483, 18893, 6336, 7533, 8023, 8312, 2625, 17358, 1302, 113, 14987, 17177, 10832, 9325, 15456, 13361, 7336, 3726, 19948, 6869, 7456, 9518, 15475, 19231, 6980, 2857, 19342, 16554, 15204, 1918, 8027, 4251, 13694, 8884, 16030, 2901, 15577, 2119, 7062, 12070, 4527, 18064, 3753, 6535, 5994, 8076, 9186, 10683, 19911, 10609, 1939, 12315, 6837, 12130, 11639, 2592, 7959, 1368, 7954, 6817, 15955, 9591, 16198, 17003, 3971, 9550, 14067, 7545, 16260, 19833, 13230, 15888, 721, 13581, 7711, 2252, 19792, 83, 5914, 12900, 3122, 4650, 6767, 14286, 4101, 19949, 13686, 6801, 19733, 16635, 16460, 3341, 7288, 1452, 10727, 7215, 19354, 5874, 10146, 987, 10034, 1085, 2927, 9950, 15003, 13887, 7791, 19744, 111, 3788, 11013, 9112, 8099, 5599, 5665, 788, 13882, 782, 17301, 209, 5204, 6649, 534, 7361, 17448, 6251, 17173, 3076, 550, 5662, 4329, 16135, 4137, 13344, 17966, 6545, 3702, 12742, 13870, 19289, 9014, 18674, 13892, 12844, 18360, 5719, 1674, 19026, 10786, 4398, 10149, 6742, 19087, 11748, 9065, 13169, 18304, 15696, 2102, 17711, 10021, 6874, 15405, 3357, 14924, 17718, 18730, 11423, 7602, 9971, 16037, 4643, 5632, 8248, 12051, 17329, 13335, 7168, 3306, 14085, 16846, 16898, 9629, 6240, 14113, 12267, 18006, 3258, 10040, 13482, 9463, 14200, 10948, 15900, 1599, 8813, 16144, 7070, 2204, 17686, 17616, 14038, 2315, 3575, 13782, 4853, 14857, 1092, 3107, 152, 9770, 6428, 11942, 17390, 13881, 11282, 17643, 16099, 160, 16432, 7559, 3379, 7323, 19050, 19106, 3890, 13533, 10350, 2519, 13102, 9108, 14838, 10250, 2060, 6800, 10121, 12082, 13088, 5013, 19536, 16422, 11968, 17772, 5172, 4534, 13813, 17143, 14174, 14609, 4584, 6483, 2727, 9240, 3049, 5010, 4169, 12063, 18032, 9538, 5127, 11395, 9681, 115, 11969, 215, 4604, 12799, 17054, 4561, 10506, 7289, 12761, 19939, 15752, 1163, 4064, 12790, 9804, 2309, 18462, 3690, 19530, 15449, 13019, 14197, 8861, 11330, 11657, 3893, 1936, 7724, 3438, 16785, 6541, 1815, 3518, 17162, 13263, 16483, 9364, 14577, 13280, 5344, 10363, 10834, 14063, 18242, 10049, 10871, 9517, 3089, 7042, 7690, 17820, 11944, 14316, 5129, 5280, 5005, 18538, 8272, 14422, 906, 3333, 9780, 13921, 4424, 15129, 8836, 8437, 2123, 11824, 16323, 5642, 13966, 16235, 8886, 3066, 6664, 14041, 17203, 18170, 5658, 3288, 14215, 11331, 5026, 9276, 19437, 3785, 9909, 1636, 6736, 19058, 3613, 12373, 18656, 11323, 13099, 7600, 10, 14551, 2632, 235, 2954, 12249, 6651, 6191, 14832, 6077, 18283, 11581, 13319, 10845, 14149, 18413, 4562, 7582, 1288, 324, 8148, 6987, 4023, 14070, 4195, 15981, 16536, 305, 1040, 7436, 14888, 5346, 19459, 585, 4674, 18454, 19435, 8066, 1933, 12328, 1335, 7830, 16132, 14120, 4676, 8378, 1045, 609, 8760, 3770, 4739, 15568, 10878, 6844, 4964, 10641, 3094, 2830, 19228, 16347, 10075, 17287, 18745, 15332, 1521, 9247, 7264, 2023, 12032, 1385, 9270, 18603, 5292, 16022, 6338, 11119, 6865, 2851, 11987, 13031, 14254, 4221, 12094, 4038, 12248, 15653, 16695, 3036, 14491, 3525, 878, 8380, 6988, 717, 11293, 14454, 12098, 12963, 14620, 12645, 12502, 3673, 19647, 19445, 8129, 18418, 19943, 6731, 17458, 3297, 3411, 7728, 1958, 19683, 6635, 19986, 18480, 13334, 14400, 7683, 12326, 9608, 2148, 13633, 12368, 8018, 13087, 3391, 16387, 6141, 2122, 9662, 2913, 10967, 19374, 2973, 16240, 10689, 11340, 17606, 14886, 7462, 3369, 330, 15199, 12189, 8404, 5601, 5607, 7151, 8981, 8876, 11919, 2378, 3604, 13221, 18289, 2775, 3805, 11019, 2661, 16876, 16549, 19028, 6815, 18197, 1901, 5600, 15837, 8181, 10491, 13610, 13211, 18373, 17521, 7060, 1991, 8769, 13166, 16777, 19558, 4435, 12576, 14401, 16584, 4119, 3085, 3109, 15961, 19822, 10067, 1588, 19525, 18335, 6180, 9829, 718, 18014, 11270, 3291, 14855, 18574, 13712, 12737, 15632, 9464, 18710, 12344, 19039, 16377, 13067, 18678, 14131, 5372, 16147, 6492, 10909, 7859, 12527, 4339, 18645, 6266, 5644, 19134, 15069, 9022, 7907, 13250, 3585, 15326, 17895, 12798, 15933, 9282, 15246, 8617, 13990, 297, 14328, 15820, 11329, 16197, 836, 230, 8400, 873, 16002, 15416, 10063, 19703, 497, 6043, 12015, 17794, 9775, 19793, 18239, 6480, 18897, 5459, 6034, 15914, 15318, 1513, 13330, 856, 7207, 6994, 18336, 16424, 1888, 13208, 8126, 14591, 3720, 12444, 1086, 6324, 11142, 14175, 15938, 6223, 8622, 17636, 4844, 15152, 17568, 6380, 17623, 14699, 6239, 19305, 1585, 9624, 17276, 9320, 11531, 4876, 9238, 8078, 11373, 1299, 19708, 8953, 822, 15028, 10197, 10647, 16113, 13151, 12587, 484, 14529, 4079, 14410, 2676, 12022, 9578, 7584, 13841, 6091, 9305, 4491, 859, 5513, 11970, 2044, 7887, 283, 508, 16909, 14331, 13556, 8353, 19457, 12766, 13953, 16032, 4768, 6621, 1471, 3526, 12212, 13511, 7596, 3896, 9816, 16494, 11401, 1532, 9271, 3252, 13473, 15412, 5243, 12685, 577, 16079, 5365, 18210, 18901, 19773, 15642, 16324, 6509, 10767, 600, 4711, 18141, 19316, 10311, 7379, 765, 6848, 7910, 12680, 2353, 5198, 5214, 16681, 19215, 11782, 11567, 10189, 14467, 4654, 10096, 3243, 8703, 9507, 10945, 11258, 10813, 5793, 18190, 6513, 19532, 18275, 19407, 6169, 13078, 10660, 3997, 13567, 19762, 17018, 13268, 13777, 662, 6933, 7896, 6711, 3025, 7482, 13251, 16619, 2900, 9091, 18386, 10522, 6573, 1077, 12211, 13162, 1767, 10698, 3126, 14824, 14203, 3150, 13209, 19255, 6440, 10195, 11181, 15402, 13451, 14610, 18578, 5661, 8057, 14382, 3928, 16987, 3540, 16561, 10192, 6198, 2920, 4583, 11927, 14538, 4949, 12523, 12313, 1083, 17100, 9796, 6163, 16269, 13105, 5578, 11981, 7766, 15965, 3704, 14115, 17688, 5001, 11730, 12723, 6282, 5691, 15787, 8411, 8184, 2728, 1578, 4072, 5501, 3299, 13089, 5525, 13302, 14007, 3757, 15088, 17953, 14178, 1580, 13141, 3534, 4622, 4822, 16105, 11584, 5964, 3653, 10457, 2418, 16916, 19418, 13594, 7611, 1263, 8531, 1215, 15764, 17383, 9281, 8564, 11127, 6314, 1387, 11794, 12537, 14352, 18040, 14237, 7890, 13748, 6515, 19415, 3169, 6931, 1367, 16722, 19438, 10989, 18665, 10980, 11244, 18573, 6600, 19416, 5903, 13576, 3885, 4414, 7075, 8875, 17070, 8776, 16644, 6361, 18001, 13207, 17378, 18060, 8825, 9811, 19328, 7156, 7892, 2732, 6572, 12349, 2671, 12095, 12974, 11933, 13086, 16921, 9613, 14939, 592, 17986, 8809, 19065, 14034, 11645, 4069, 18356, 4427, 17395, 7211, 13389, 12904, 16425, 4662, 17699, 7317, 10542, 13439, 13076, 4395, 14977, 8858, 19831, 16766, 12109, 4858, 17312, 1910, 10884, 11743, 18022, 943, 18739, 13826, 13714, 18876, 13510, 23, 7539, 13492, 11732, 19245, 5936, 17891, 8396, 2253, 12935, 16984, 9890, 4580, 153, 10378, 12327, 10509, 8387, 4745, 15556, 2149, 14055, 16871, 8359, 12437, 18712, 14329, 10462, 2403, 1037, 9434, 17576, 3192, 1522, 9489, 17659, 17814, 557, 3921, 6501, 15972, 7914, 11197, 19574, 846, 15810, 18704, 6020, 10639, 9944, 13090, 11895, 888, 18293, 3990, 13560, 2020, 15256, 14239, 9604, 1712, 6306, 5829, 10111, 12245, 18117, 11220, 19456, 14715, 2755, 7621, 1800, 7265, 12442, 2429, 4705, 12805, 19625, 13816, 5947, 14229, 15222, 9207, 15476, 18572, 10946, 6511, 5224, 9959, 4217, 8420, 13573, 13535, 6601, 15320, 15856, 19469, 347, 1857, 2063, 10820, 17672, 17055, 4028, 8671, 13098, 6534, 11557, 15325, 10373, 19821, 16649, 706, 11620, 731, 6881, 11120, 2751, 17022, 13390, 15500, 9597, 16041, 8196, 5309, 15519, 4598, 4682, 6287, 15024, 3228, 8033, 19470, 7312, 17352, 19180, 16201, 574, 13039, 14714, 9655, 13523, 291, 16511, 17874, 17002, 17125, 14701, 16894, 9245, 14173, 2124, 12372, 12143, 3444, 7786, 13231, 13287, 18717, 19642, 12208, 14776, 13636, 9301, 4789, 2873, 9556, 5670, 13575, 1403, 17258, 14635, 10613, 18571, 19426, 19794, 10873, 19355, 17561, 8086, 15531, 9160, 1448, 5409, 8118, 11141, 8174, 13823, 13470, 19707, 5434, 12363, 7979, 3806, 12479, 5230, 9211, 10184, 3840, 13110, 14672, 4100, 5823, 12751, 16901, 10913, 9445, 19094, 13536, 7653, 19311, 16581, 4703, 4211, 16149, 18120, 14311, 1624, 18535, 14737, 1808, 19051, 8951, 1601, 50, 19275, 18863, 19738, 1042, 19894, 2355, 17952, 4271, 442, 3747, 1078, 11318, 10020, 9055, 7727, 862, 5677, 13145, 19454, 15688, 6695, 4273, 14264, 780, 5975, 5, 11966, 15769, 8317, 9395, 8811, 11670, 1944, 18879, 5530, 1170, 12314, 6798, 2719, 11759, 7927, 15482, 8780, 5250, 7263, 17494, 10770, 2142, 7624, 4126, 4547, 1851, 914, 6053, 4576, 1416, 9514, 3032, 19333, 9692, 9024, 1931, 19864, 14105, 16655, 9899, 14930, 8358, 14584, 17108, 2949, 5902, 5519, 14885, 19183, 3173, 4393, 6067, 18257, 8482, 5796, 1923, 10517, 14157, 1020, 12503, 568, 396, 15841, 10775, 13781, 16121, 11065, 9768, 14528, 8422, 11430, 19491, 18587, 15421, 3184, 368, 9327, 9712, 274, 10196, 17092, 12533, 9006, 19263, 19122, 5061, 4275, 13614, 2395, 8465, 7194, 19259, 12934, 1760, 16152, 9801, 8268, 1357, 11904, 6503, 11916, 7085, 7391, 8689, 16033, 14373, 15766, 18407, 1741, 13399, 4519, 539, 10759, 2227, 6444, 19935, 7569, 17137, 17480, 10623, 10359, 16886, 2179, 14479, 18791, 19876, 7068, 9595, 10846, 1005, 6326, 678, 8947, 19929, 14151, 7182, 7636, 1111, 9291, 10629, 12274, 19704, 14231, 9400, 4247, 18062, 697, 956, 9504, 3405, 16191, 6006, 19169, 14287, 18741, 4664, 12878, 7840, 3816, 17748, 5371, 4801, 7900, 11134, 14902, 17518, 4039, 14530, 4352, 3968, 10555, 18598, 2405, 11238, 10701, 18891, 8119, 17176, 16472, 12651, 5457, 13545, 12743, 9936, 11411, 8992, 6644, 8203, 2914, 11983, 16397, 9391, 13294, 15819, 3432, 19081, 8442, 11445, 12081, 12230, 11501, 4927, 16203, 6347, 9702, 5742, 9830, 3863, 3048, 1720, 16176, 9779, 11038, 7149, 2182, 8001, 7634, 14663, 18982, 5608, 11499, 5339, 4581, 3824, 19194, 2895], "code": ["    public boolean isBuilt()\n    {   return layers.size()>0;\n    }\n", "void initializedComment ( GroupNode groupNode , List < IComment > comment ) ;", "public ElasticsearchContainer withPluginDir(Path pluginDir) {\n        if (pluginDir == null) {\n            return this;\n        }\n\n        // When we have a plugin dir, we need to mount it in the docker instance\n        this.pluginDir = createVolumeDirectory(true);\n\n        // We create the volume that will be needed for plugins\n        addFileSystemBind(this.pluginDir.toString(), \"/plugins\", BindMode.READ_ONLY);\n\n        logger().debug(\"Installing plugins from [{}]\", pluginDir);\n        try {\n            Files.list(pluginDir).forEach(path -> {\n                logger().trace(\"File found in [{}]: [{}]\", pluginDir, path);\n                if (path.toString().endsWith(\".zip\")) {\n                    logger().debug(\"Copying [{}] to [{}]\", path.getFileName(), this.pluginDir.toAbsolutePath().toString());\n                    try {\n                        Files.copy(path, this.pluginDir.resolve(path.getFileName()));\n                        withPlugin(\"file:///tmp/plugins/\" + path.getFileName());\n                    } catch (IOException e) {\n                        logger().error(\"Error while copying\", e);\n                    }\n                }\n            });\n        } catch (IOException e) {\n            logger().error(\"Error listing plugins\", e);\n        }\n        return this;\n    }", "static <T>LazyFutureStream<T> of(final T value){\n  return lazyFutureStream((Stream)Seq.of(value));\n}\n", "    private void notifyListSelectionListener() {\n        ListSelectionEvent event = new ListSelectionEvent(this, avatarIndex, avatarIndex, false);\n\n        for (ListSelectionListener listener : listSelectionListeners) {\n            listener.valueChanged(event);\n        }\n    }\n", "public void bind ( InetAddress host , int port ) throws IOException { if ( socket != null ) socket . close ( ) ; InetSocketAddress newAddr = new InetSocketAddress ( host . getHostAddress ( ) , port ) ; this . socket = new DatagramSocket ( newAddr ) ; }", "private static InputStream findFileInClasspath(String fileName) {\n\n\t\tInputStream is = null;\n\n\t\ttry {\n\n\t\t\tClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n\t\t\tis = classLoader.getResourceAsStream(fileName);\n\t\t\treturn is;\n\n\t\t} catch (Exception ex) {\n\n\t\t\tlog.error(String.format(\"Error while reading file '%s' from classpath\", fileName), ex);\n\t\t\treturn null;\n\t\t}\n\n\t}", "@Override\n    public double membership(double x) {\n        if (this.root == null) {\n            throw new RuntimeException(String.format(\n                    \"[function error] function <%s> not loaded.\", formula));\n        }\n        if (this.engine != null) {\n            for (InputVariable inputVariable : this.engine.getInputVariables()) {\n                this.variables.put(inputVariable.getName(), inputVariable.getValue());\n            }\n            for (OutputVariable outputVariable : this.engine.getOutputVariables()) {\n                this.variables.put(outputVariable.getName(), outputVariable.getValue());\n            }\n        }\n        this.variables.put(\"x\", x);\n        return evaluate(this.variables);\n    }", "private MultiSplitLayout ( final Node model ) { this . model = model ; dividerSize = UIManager . getInt ( STR_ ) ; if ( dividerSize == NUM_ ) { dividerSize = NUM_ ; } }", "public void stopJumping(){\n  for (  JumpingBeansSpan bean : jumpingBeans) {\n    if (bean != null) {\n      bean.teardown();\n    }\n  }\n  TextView tv=textView.get();\n  if (tv != null) {\n    CharSequence text=tv.getText();\n    if (text instanceof Spanned) {\n      CharSequence cleanText=removeJumpingBeansSpans((Spanned)text);\n      tv.setText(cleanText);\n    }\n  }\n}\n", "public boolean adjustValue ( double key , int amount ) { int index = index ( key ) ; if ( index < NUM_ ) { return BOOL_ ; } else { _values [ index ] += amount ; return BOOL_ ; } }", "@BetaApi\n  public final Operation insertInstance(ProjectZoneName zone, Instance instanceResource) {\n\n    InsertInstanceHttpRequest request =\n        InsertInstanceHttpRequest.newBuilder()\n            .setZone(zone == null ? null : zone.toString())\n            .setInstanceResource(instanceResource)\n            .build();\n    return insertInstance(request);\n  }", "public Set entrySet() {\n        if (mEntrySet==null) {\n            mEntrySet = new AbstractSet() {\n                public Iterator iterator() {\n                    return getHashIterator(IdentityMap.ENTRIES);\n                }\n\n                public boolean contains(Object o) {\n                    if (!(o instanceof Map.Entry)) {\n                        return false;\n                    }\n                    Map.Entry entry = (Map.Entry)o;\n                    Object key = entry.getKey();\n\n                    Entry tab[] = mTable;\n                    int hash = key == null ? 0 : key.hashCode();\n                    int index = (hash & 0x7FFFFFFF) % tab.length;\n\n                    for (Entry e = tab[index], prev = null; e != null; e = e.mNext) {\n                        Object entryValue = e.getValue();\n                        \n                        if (entryValue == null) {\n                            // Clean up after a cleared Reference.\n                            mModCount++;\n                            if (prev != null) {\n                                prev.mNext = e.mNext;\n                            }\n                            else {\n                                tab[index] = e.mNext;\n                            }\n                            mCount--;\n                        }\n                        else if (e.mHash == hash && e.equals(entry)) {\n                            return true;\n                        }\n                        else {\n                            prev = e;\n                        }\n                    }\n\n                    return false;\n                }\n\n                public boolean remove(Object o) {\n                    if (!(o instanceof Map.Entry)) {\n                        return false;\n                    }\n                    Map.Entry entry = (Map.Entry)o;\n                    Object key = entry.getKey();\n                    Entry tab[] = mTable;\n                    int hash = key == null ? 0 : key.hashCode();\n                    int index = (hash & 0x7FFFFFFF) % tab.length;\n\n                    for (Entry e = tab[index], prev = null; e != null; e = e.mNext) {\n                        Object entryValue = e.getValue();\n                        \n                        if (entryValue == null) {\n                            // Clean up after a cleared Reference.\n                            mModCount++;\n                            if (prev != null) {\n                                prev.mNext = e.mNext;\n                            }\n                            else {\n                                tab[index] = e.mNext;\n                            }\n                            mCount--;\n                        }\n                        else if (e.mHash == hash && e.equals(entry)) {\n                            mModCount++;\n                            if (prev != null) {\n                                prev.mNext = e.mNext;\n                            }\n                            else {\n                                tab[index] = e.mNext;\n                            }\n                            mCount--;\n\n                            e.setValue(null);\n                            return true;\n                        }\n                        else {\n                            prev = e;\n                        }\n                    }\n                    return false;\n                }\n\n                public int size() {\n                    return mCount;\n                }\n                \n                public void clear() {\n                    SoftHashMap.this.clear();\n                }\n\n                public String toString() {\n                    return IdentityMap.toString(this);\n                }\n            };\n        }\n        \n        return mEntrySet;\n    }", "protected void nodeCompleted ( Object parent , Object node ) { }", "private void processColumns()\n   {\n      int fieldID = MPPUtility.getInt(m_data, m_headerOffset);\n      m_headerOffset += 4;\n\n      m_dataOffset = MPPUtility.getInt(m_data, m_headerOffset);\n      m_headerOffset += 4;\n\n      FieldType type = FieldTypeHelpe", "protected boolean invokeTraceRouters(RoutedMessage routedTrace) {\n\n        boolean retMe = true;\n        LogRecord logRecord = routedTrace.getLogRecord();\n        /*\n         * Avoid any feedback traces that are emitted after this point.\n         * The first time the counter increments is the first pass-through.\n         * The second time the counter increments is the second pass-through due\n         * to trace emitted. We do not want any more pass-throughs.\n         */\n        try {\n            if (!(counterForTraceRouter.incrementCount() > 2)) {\n                if (logRecord != null) {\n                    Level level = logRecord.getLevel();\n                    int levelValue = level.intValue();\n                    if (levelValue < Level.INFO.intValue()) {\n                        String levelName = level.getName();\n                        if (!(levelName.equals(\"SystemOut\") || levelName.equals(\"SystemErr\"))) { //SystemOut/Err=700\n                            WsTraceRouter internalTrRouter = internalTraceRouter.get();\n                            if (internalTrRouter != null) {\n                                retMe &= internalTrRouter.route(routedTrace);\n                            } else if (earlierTraces != null) {\n                                synchronized (this) {\n                                    if (earlierTraces != null) {\n                                        earlierTraces.add(routedTrace);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        } finally {\n            counterForTraceRouter.decrementCount();\n        }\n        return retMe;\n    }", "    public void setWsP9X9Low(long value) {\n        this.wsP9X9Low = value;\n    }\n", "    public Object clone() {\n\tH263Format f = new H263Format();\n\tf.copy(this);\n\treturn f;\n    }\n", "private boolean hasWrappedMethodsForClass(SootClass parentClass,boolean newTaints,boolean killTaints,boolean excludeTaints){\n  if (newTaints && classList.containsKey(parentClass.getName()))   return true;\n  if (excludeTaints && excludeList.containsKey(parentClass.getName()))   return true;\n  if (killTaints && killList.containsKey(parentClass.getName()))   return true;\n  return false;\n}\n", "public void reset ( ) throws JMSException { setBodyReadOnly ( BOOL_ ) ; if ( this . dataOut != null ) { try { this . dataOut . flush ( ) ; byte [ ] data = this . bytesOut . toByteArray ( ) ; Body = new ByteArray ( data ) ; dataOut . close ( ) ; } catch ( ", "public void createTable ( String tblName , Schema sch , Transaction tx ) { if ( tblName != TCAT_TBLNAME && tblName != FCAT_TBLNAME ) formatFileHeader ( tblName , tx ) ; tiMap . put ( tblName , new TableInfo ( tblName , sch ) ) ; RecordFile tcatfile = tcat", "public static void closeSilently(Statement stat){\n  if (stat != null) {\n    try {\n      stat.close();\n    }\n catch (    SQLException e) {\n    }\n  }\n}", "public BasicEffect copy(){\n  BasicEffect copy=new BasicEffect(variableLabel,variableValue,priority,exclusive,negated);\n  return copy;\n}\n", "    public void setSecurityRole(ISecurityRole role) {\n        this.role = role;\n        if (role != null) {\n            roleNameField.setText(role.getName());\n            roleDescField.setText(role.getDescription());\n        } else {\n            roleNameField.setText(\"UnknownRole\");\n            roleDescField.setText(\"\");\n        }\n    }\n", "protected ByteVector write ( final ClassWriter cw , final byte [ ] code , final int len , final int maxStack , final int maxLocals ) { ByteVector v = new ByteVector ( ) ; v . data = value ; v . length = value . length ; return v ; }", "TypePath ( byte [ ] b , int offset ) { this . b = b ; this . offset = offset ; }", "public static void main(String[] args){\n  try {\n    out=new FileWriter(outputFile);\n    out.write(\"Interpolation time comparison of the different methods:\\n\\n\");\n    out.write(\"interpolation method \\t\\t\\t\\t\" + \"1*2 grid \\t\" + \"3*3 grid \\t\"+ \"10*10 grid\\n\");\n    out.write(\"-----------------------------------------------------------------------------------------------------\\n\");\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n  testBiLinear();\n  testBiCubic();\n  testIDW();\n  try {\n    out.close();\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n", "    public void add(Object property, ErrorItem message) {\n\n        ActionMessageItem item = messages.get(property);\n        List<ErrorItem> list = null;\n\n        if ( item == null ) {\n            list = new ArrayList<ErrorItem>();\n            item = new ActionMessageItem(list, iCount++);\n\n            messages.put(property, item);\n        }\n        else {\n            list = item.getList();\n        }\n\n        list.add(message);\n\n    }\n", "public void loadThis ( ) { if ( ( access & Opcodes . ACC_STATIC ) != NUM_ ) { throw new IllegalStateException ( STR_ ) ; } mv . visitVarInsn ( Opcodes . ALOAD , NUM_ ) ; }", "private CCodeNode extractNode ( final ICodeNodeProvider dataset ) throws ParserException , CPartialLoadException { if ( currentNode == null ) { currentNode = createCurrentNode ( dataset ) ; } final CCodeNode nodeInProcess = currentNode ; while ( ( current", "private void messageDeliveredAction ( Bundle data ) { IMqttToken token = removeMqttToken ( data ) ; if ( token != null ) { if ( callback != null ) { Status status = ( Status ) data . getSerializable ( MqttServiceConstants . CALLBACK_STATUS ) ; if ( status == Status . OK && token instanceof IMqttDeliveryToken ) { callback . deliveryComplete ( ( IMqttDeliveryToken ) token ) ; } } } }", "public static int parse(String[] options,String option,int defValue) throws Exception {\n  String value=Utils.getOption(option,options);\n  if (value.isEmpty())   return defValue;\n else   return Integer.parseInt(value);\n}", "void prepare(){\n  boolean unpacked=false;\n  final File lockFilePath=new File(mContext.getFilesDir(),LOCK_FILE);\n  Systrace.beginSection(TRACE_TAG_REACT_JAVA_BRIDGE,\"UnpackingJSBundleLoader.prepare\");\nsynchronized (UnpackingJSBundleLoader.class) {\n    try (FileLocker lock=FileLocker.lock(lockFilePath)){\n      unpacked=prepareLocked();\n    }\n catch (    IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n finally {\n      Systrace.endSection(TRACE_TAG_REACT_JAVA_BRIDGE);\n    }\n  }\n  if (unpacked && mOnUnpackedCallback != null) {\n    mOnUnpackedCallback.run();\n  }\n}\n", "public List<TrieMatch<V>> find(String text, CharMatcher delimiter) {\n      if (StringUtils.isNullOrBlank(text)) {\n         return Collections.emptyList();\n      }\n      if (delimiter == null) {\n         delimiter = CharMatcher.ANY;\n      }\n\n      int len = text.length();\n      StringBuilder key = new StringBuilder();\n      int start = 0;\n      int lastMatch = -1;\n      List<TrieMatch<V>> results = new ArrayList<>();\n\n      for (int i = 0; i < len; i++) {\n\n         key.append(text.charAt(i));\n\n         //We have a key match\n         if (containsKey(key.toString())) {\n            int nextI = lastMatch = i + 1;\n\n            //There is something longer!\n            if (nextI < len && prefix(key.toString() + text.charAt(i + 1)).size() > 0) {\n               continue;\n            }\n\n\n            lastMatch = -1;\n            //check if we accept\n            if (nextI >= len || delimiter.matches(text.charAt(nextI))) {\n               V value = get(key.toString());\n               results.add(new TrieMatch<>(start, nextI, value));\n               start = nextI;\n            }\n\n         } else if (prefix(key.toString()).isEmpty()) {\n\n            //We cannot possibly match anything\n            if (lastMatch != -1) {\n               //We have a good match, so lets use it\n               int nextI = lastMatch;\n               if (nextI >= 1 && delimiter.matches(text.charAt(nextI))) {\n                  key = new StringBuilder(text.substring(start, nextI));\n                  V value = get(key.toString());\n                  results.add(new TrieMatch<>(start, nextI, value));\n                  i = nextI;\n                  lastMatch = -1;\n                  start = nextI;\n               } else {\n                  start = i;\n               }\n            } else {\n               start = i;\n            }\n\n            if (start < len) {\n               key.setLength(1);\n               key.setCharAt(0, text.charAt(start));\n            } else {\n               key.setLength(0);\n            }\n         }\n\n      }\n\n      return results;\n\n   }", "\tprotected void buildGrid() {\n\n\t\tfor (Iterator<Entry<Integer, Node2D>> iter = pyramide2D.getNodes().entrySet().iterator(); iter.hasNext();) {\n\t\t\tEntry<Integer, Node2D> entry = iter.next();\n\n\t\t\tdouble contender = 1.0d / ((Node2D) entry.getValue()).getPNode().getHeight();\n\n\t\t\tif (!Double.isInfinite(contender) && !Double.isNaN(contender)) {\n\t\t\t\trangeFactor = Math.max(rangeFactor, contender);\n\t\t\t}\n\t\t}\n\t}\n", "public static void updateModificationDate ( final CConnection connection , final String tableName , final int id ) throws CouldntSaveDataException { Preconditions . checkNotNull ( tableName , STR_ ) ; Preconditions . checkNotNull ( connection , STR_ ) ; f", "public Watch ( WatchPredicate < E > predicate , int taskCount ) { this ( predicate , taskCount , null ) ; }", "boolean containsInstallOrOpen() {\n        synchronized (reqQueueLockObject) {\n            for (ServerRequest req : queue) {\n                if (req != null &&\n                        ((req instanceof ServerRequestRegisterInstall) || req instanceof ServerRequestRegisterOpen)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }", "\tpublic String get(String key) throws Exception {\n\t\treturn key(key, (Object[]) null);\n\t}\n", "public Epoch createEpoch(ServerViewController recManager){\n  epochsLock.lock();\n  Set<Integer> keys=epochs.keySet();\n  int max=-1;\n  for (  int k : keys) {\n    if (k > max)     max=k;\n  }\n  max++;\n  Epoch epoch=new Epoch(recManager,this,max);\n  epochs.put(max,epoch);\n  epochsLock.unlock();\n  return epoch;\n}\n", "public List<String> findNames(String classname, String[] pkgnames) {\n    List<String>\tresult;\n    Class\t\tcls;\n\n    result = new ArrayList<>();\n\n    try {\n      cls    = Class.forName(classname);\n      result = findNames(cls, pkgnames);\n    }\n    catch (Throwable t) {\n      getLogger().log(Level.SEVERE, \"Failed to instantiate '\" + classname + \"'/\" + ClassUtils.arrayToString(pkgnames) + \" (findNames):\", t);\n    }\n\n    return result;\n  }", "  public boolean useAccess() {\n    return useAccess;\n  }\n", "\tpublic void clearHistory(ID uuid) {\n\t\tlog.debug(\"Clear history for the buddy with uuid: \" + uuid);\n\t\tgetHistory(uuid).clearHistory();\n\t}\n", "private void writeLine(byte[] data){\n  int checksum=0;\n  try {\n    buffOut.write(':');\n    for (int i=0; i < data.length; i++) {\n      writeHexByte(data[i]);\n      checksum+=data[i];\n    }\n    checksum=checksum & 0xff;\n    if (checksum > 0) {\n      checksum=256 - checksum;\n    }\n    writeHexByte((byte)checksum);\n    buffOut.write('\\n');\n  }\n catch (  IOException e) {\n  }\n}\n", "public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { request . getSession ( ) . setAttribute ( STR_ , STR_ ) ; response . sendRedirect ( STR_ ) ; return ; }", "public void buildElectionGroups(String spaceName){\n  if ((_electionGroups=buildElectionGroups(m_WriteFOPolicy)) == null && (_electionGroups=buildElectionGroups(m_TakeFOPolicy)) == null && (_electionGroups=buildElectionGroups(m_ReadFOPolicy)) == null && (_electionGroups=buildElectionGroups(m_NotifyFOPolicy)) == null && (_electionGroups=buildElectionGroups(m_DefaultFOPolicy)) == null) {\n    return;\n  }\n  for (  Map.Entry<String,List<String>> entry : _electionGroups.entrySet()) {\n    String primary=entry.getKey();\n    List<String> electionGroup=entry.getValue();\n    if (electionGroup.contains(spaceName))     _electionGroupName=primary;\n  }\n}\n", "\tprivate void expandarray() {\n\t\tint n = array.length;\n\t\tint m = Math.max(2,n*2);\n\t\tarray = resize(array, m);\n\t\tfor ( int i=n; i<m; i++ ) {\n\t\t\tLuaValue k = LuaInteger.valueOf(i+1);\n\t\t\tLuaValue v = hashget(k);\n\t\t\tif ( !v.isnil() ) {\n\t\t\t\thashset(k, NIL);\n\t\t\t\tarray[i] = v;\n\t\t\t}\n\t\t}\n\t}\n", "private static String determineMessage(@Nullable final String className) {\n\t\treturn className != null && !className.isEmpty() ? format(className) : DEFAULT_MESSAGE;\n\t}", "    public void writeByteArray(int bits, byte[] arr) throws AccessException {\n        for (int i = 0; i < arr.length; i++) {\n            int increment = Math.min(8, bits - (i << 3));\n            if (increment > 0) {\n                write(increment, (byte)(arr[i] >>> (8 - increment)));\n            }\n        }\n    }\n", "\tprivate void callInterceptorsToComponent(ModelEvent event) {\n\t\tfor (IInterceptor interceptor : component.getInterceptors()) {\n\t\t\tinterceptor.interceptToComponent(event);\n\t\t}\n\t}\n", "public <T> Observable<Notification<T>> channel(\n        final DeliveryMethod type,\n        final ObservableFactoryNoArg<T> observableFactoryNoArg) {\n\n        return channel(type, new Func1<Object, Observable<Notification<T>>>() {\n            @Override\n   ", "private float wittenBell(int[] ngram,int ngramOrder){\n  int end=ngram.length;\n  double p=p0;\n  int MAX_QCOUNT=getCount(ngram,ngram.length - 1,ngram.length,maxQ);\n  if (MAX_QCOUNT == 0)   return (float)p;\n  double pML=Math.log(unQuantize(MAX_QCOUNT)) - numTokens;\n  p=logAdd(p,(lambda0 + pML));\n  if (ngram.length == 1) {\n    return (float)p;\n  }\n  for (int i=end - 2; i >= end - ngramOrder && i >= 0; i--) {\n    int historyCnt=getCount(ngram,i,end,MAX_QCOUNT);\n    if (historyCnt == 0) {\n      return (float)p;\n    }\n    int historyTypesAfter=getTypesAfter(ngram,i,end,historyCnt);\n    double HC=unQuantize(historyCnt);\n    double HTA=1 + unQuantize(historyTypesAfter);\n    double lambda=Math.log(HTA) - Math.log(HTA + HC);\n    double oneMinusLambda=Math.log(HC) - Math.log(HTA + HC);\n    p+=oneMinusLambda;\n    int wordCount=getCount(ngram,i + 1,end,historyTypesAfter);\n    double WC=unQuantize(wordCount);\n    if (WC == 0)     return (float)p;\n    p=logAdd(p,lambda + Math.log(WC) - Math.log(HC));\n    MAX_QCOUNT=wordCount;\n  }\n  return (float)p;\n}\n", "    protected XMLReader createXMLReader() throws SAXException {\n        return SAXHelper.createXMLReader(isValidating());\n    }\n", "public CHelpSavePane ( final IHelpInformation information ) { this ( STR_ , information ) ; }", "public static Iterator<URL> getResources(String resourceName, Class<?> callingClass, boolean aggregate)\r\n\t\t\tthrows IOException {\r\n\t\tAggregateIterator<URL> iterator = new AggregateIterator<URL>();\r\n\t\titerator.addEnumeration(Thread.currentThread().getContextClassLoader().getResources(resourceName));\r\n\t\tif (!iterator.hasNext() || aggregate) {\r\n\t\t\titerator.addEnumeration(ClassLoaderUtil.class.getClassLoader().getResources(resourceName));\r\n\t\t}\r\n\t\tif (!iterator.hasNext() || aggregate) {\r\n\t\t\tClassLoader cl = callingClass.getClassLoader();\r\n\t\t\tif (cl != null) {\r\n\t\t\t\titerator.addEnumeration(cl.getResources(resourceName));\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!iterator.hasNext() && (resourceName != null)\r\n\t\t\t\t&& ((resourceName.length() == 0) || (resourceName.charAt(0) != '/'))) {\r\n\t\t\treturn getResources('/' + resourceName, callingClass, aggregate);\r\n\t\t}\r\n\t\treturn iterator;\r\n\t}", "protected void printAttributeSummary(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){\n  String str=\"\";\n  if (numericPredictor) {\n    str+=\" numeric\";\n  }\n  if (nominalPredictor) {\n    if (str.length() > 0) {\n      str+=\" &\";\n    }\n    str+=\" nominal\";\n  }\n  if (stringPredictor) {\n    if (str.length() > 0) {\n      str+=\" &\";\n    }\n    str+=\" string\";\n  }\n  if (datePredictor) {\n    if (str.length() > 0) {\n      str+=\" &\";\n    }\n    str+=\" date\";\n  }\n  if (relationalPredictor) {\n    if (str.length() > 0) {\n      str+=\" &\";\n    }\n    str+=\" relational\";\n  }\n  str+=\" predictors)\";\nswitch (classType) {\ncase Attribute.NUMERIC:\n    str=\" (numeric class,\" + str;\n  break;\ncase Attribute.NOMINAL:\nstr=\" (nominal class,\" + str;\nbreak;\ncase Attribute.STRING:\nstr=\" (string class,\" + str;\nbreak;\ncase Attribute.DATE:\nstr=\" (date class,\" + str;\nbreak;\ncase Attribute.RELATIONAL:\nstr=\" (relational class,\" + str;\nbreak;\ncase NO_CLASS:\nstr=\" (no class,\" + str;\nbreak;\n}\nprint(str);\n}\n", "protected void handleNotificationFromModel(Notification msg) {\n\t\tint featureId = msg.getFeatureID(ForwardLink.class);\n\t\tswitch (featureId) {\n\t\tcase VisualizerPackage.DIAGRAM_LINK__BENDPOINTS:\n\t\t\trefreshVisuals();\n\t\t\tbreak;\n\t\tcase VisualizerPackage.DIAGRA", "public void initializeConnectionToPlayer ( NetworkManager netManager , EntityPlayerMP playerIn ) { initializeConnectionToPlayer ( netManager , playerIn , null ) ; }", "  public void showSection(String sectionName) {\n    if (hiddenSections==null) {\n      StringTokenizer tokenizer=new StringTokenizer(mapNullToEmpty(getProperty(\"hiddenSections\")));\n      hiddenSections=new HashSet();\n      while (tokenizer.hasMoreTokens()) hiddenSections.add(tokenizer.nextToken());\n      hiddenSections.remove(sectionName);\n    } else {\n      hiddenSections.remove(sectionName);\n    }\n  }\n", "public void marshall(DescribeInstancePatchesRequest describeInstancePatchesRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (describeInstancePatchesRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(describeInstancePatchesRequest.getInstanceId(), INSTANCEID_BINDING);\n            protocolMarshaller.marshall(describeInstancePatchesRequest.getFilters(), FILTERS_BINDING);\n            protocolMarshaller.marshall(describeInstancePatchesRequest.getNextToken(), NEXTTOKEN_BINDING);\n            protocolMarshaller.marshall(describeInstancePatchesRequest.getMaxResults(), MAXRESULTS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "  static public String getAttribute (Element el, String attrName) {\n    String sRet = null;\n    Attr   attr = el.getAttributeNode(attrName);\n\n    if (attr != null) {\n      sRet = attr.getValue();\n    }\n    return sRet;\n  }\n", "\tpublic void setSpeedMax (float _speedMax) {\n\t\tthis._speedMax = _speedMax;\n\t}\n", "public boolean isImplicationDefiniteClause(){\n  return isDefiniteClause() && cachedNegativeSymbols.size() >= 1;\n}\n", "int sendDetachMessage ( ) throws IOException ;", "    public void paint(Graphics g, int y) {\n        if (white) {\n            paintWhite(g, y);\n        } else {\n            paintBlack(g, y);\n        }\n    }\n", "public static List<Class<?>> findAllImplementations(Class<?> restrictionClass){\n  if (restrictionClass == null) {\n    return Collections.emptyList();\n  }\n  if (!contains(restrictionClass)) {\n    ELKIServiceLoader.load(restrictionClass);\n    ELKIServiceScanner.load(restrictionClass);\n  }\n  Entry e=data.get(restrictionClass);\n  if (e == null) {\n    return Collections.emptyList();\n  }\n  ArrayList<Class<?>> ret=new ArrayList<>(e.len);\n  for (int pos=0; pos < e.len; pos++) {\n    Class<?> c=e.clazzes[pos];\n    if (c == null) {\n      c=tryLoadClass(e.names[pos]);\n      if (c == null) {\n        LOG.warning(\"Failed to load class \" + e.names[pos] + \" for interface \"+ restrictionClass.getName());\n        c=FAILED_LOAD;\n      }\n      e.clazzes[pos]=c;\n    }\n    if (c == FAILED_LOAD) {\n      continue;\n    }\n    if (!ret.contains(c)) {\n      ret.add(c);\n    }\n  }\n  return ret;\n}\n", "public boolean compareAndSet(final long expectedValue,final long newValue){\n  return UNSAFE.compareAndSwapLong(this,VALUE_OFFSET,expectedValue,newValue);\n}\n", "public boolean getProjective() {\n    if (DependencyRelation_Type.featOkTst && ((DependencyRelation_Type)jcasType).casFeat_projective == null)\n      jcasType.jcas.throwFeatMissing(\"projective\", \"de.julielab.jules.types.DependencyRelation\");\n    return jcasType.ll_cas.ll_getBooleanValue(addr, ((DependencyRelation_Type)jcasType).casFeatCode_projective);}", "public void alignRight(ArrayList<Integer> nodes){\n  if (m_bNeedsUndoAction) {\n    addUndoAction(new alignRightAction(nodes));\n  }\n  int nMaxX=-1;\n  for (int iNode=0; iNode < nodes.size(); iNode++) {\n    int nX=getPositionX(nodes.get(iNode));\n    if (nX > nMaxX || iNode == 0) {\n      nMaxX=nX;\n    }\n  }\n  for (int iNode=0; iNode < nodes.size(); iNode++) {\n    int nNode=nodes.get(iNode);\n    m_nPositionX.set(nNode,nMaxX);\n  }\n}\n", "\tpublic void addColor(String theName, Color theColor) {\n\t\tif (null == theName) {\n\t\t\tthrow new IllegalArgumentException(\"Can't addColor without a name.\");\n\t\t}\n\t\tif (null == theColor) {\n\t\t\tthrow new IllegalArgumentException(\"Can't add a null color.\");\n\t\t}\n\t\tmap.put(theName, theColor);\n\t}\n", "boolean hasPrevious ( ) ;", "  public void setIncludeBinary( boolean pSet ) {\n    mIncludeBinary = pSet;\n    return;\n  }\n", "public static boolean parseLabelDeclaration ( PsiBuilder b , int l ) { if ( PerlLexer . LABEL_TOKENSET . contains ( b . getTokenType ( ) ) && b . lookAhead ( NUM_ ) == COLON ) { PsiBuilder . Marker m = b . mark ( ) ; b . advanceLexer ( ) ; m . collapse ( ", "public DAccessDescriptionChooser(JFrame parent,String title,AccessDescription accessDescription){\n  super(parent,title,ModalityType.DOCUMENT_MODAL);\n  initComponents(accessDescription);\n}\n", "public boolean addTokens(Collection<? extends Object> tokens){\n  boolean added=false;\n  for (  Object token : tokens) {\n    add(token.toString());\n    added=true;\n  }\n  return added;\n}\n", "private OJBIterator getRsIteratorFromQuery(Query query, ClassDescriptor cld, RsIteratorFactory factory)\n        throws PersistenceBrokerException\n    {\n        query.setFetchSize(1);\n        if (query instanceof QueryBySQL)\n        {\n            if(logger.isDebugEnabled()) logger.debug(\"Creating SQL-RsIterator for class [\"+cld.getClassNameOfObject()+\"]\");\n            return factory.createRsIterator((QueryBySQL) query, cld, this);\n        }\n\n        if (!cld.isExtent() || !query.getWithExtents())\n        {\n            // no extents just use the plain vanilla RsIterator\n            if(logger.isDebugEnabled()) logger.debug(\"Creating RsIterator for class [\"+cld.getClassNameOfObject()+\"]\");\n\n            return factory.createRsIterator(query, cld, this);\n        }\n\n        if(logger.isDebugEnabled()) logger.debug(\"Creating ChainingIterator for class [\"+cld.getClassNameOfObject()+\"]\");\n\n        ChainingIterator chainingIter = new ChainingIterator();\n\n        // BRJ: add base class iterator\n        if (!cld.isInterface())\n        {\n            if(logger.isDebugEnabled()) logger.debug(\"Adding RsIterator for class [\"+cld.getClassNameOfObject()+\"] to ChainingIterator\");\n\n            chainingIter.addIterator(factory.createRsIterator(query, cld, this));\n        }\n\n        Iterator extents = getDescriptorRepository().getAllConcreteSubclassDescriptors(cld).iterator();\n        while (extents.hasNext())\n        {\n            ClassDescriptor extCld = (ClassDescriptor) extents.next();\n\n            // read same table only once\n            if (chainingIter.containsIteratorForTable(extCld.getFullTableName()))\n            {\n                if(logger.isDebugEnabled()) logger.debug(\"Skipping class [\"+extCld.getClassNameOfObject()+\"]\");\n            }\n            else\n            {\n                if(logger.isDebugEnabled()) logger.debug(\"Adding RsIterator of class [\"+extCld.getClassNameOfObject()+\"] to ChainingIterator\");\n\n                // add the iterator to the chaining iterator.\n                chainingIter.addIterator(factory.createRsIterator(query, extCld, this));\n            }\n        }\n\n        return chainingIter;\n    }", "public boolean isSecured ( ) ;", "\tprivate void savePosition(final ComponentEvent event) {\n\t\tfinal int x = event.getComponent().getX();\n\t\tfinal int y = event.getComponent().getY();\n\t\t\n\t\tif (abstractSingleFrame.isVisible()) {\n\t\t\t// Task submitted after canceling previous ones to avoid executing task after each call to component listener\n\t\t\tif (positionFuture != null) {\n\t\t\t\tpositionFuture.cancel(false);\n\t\t\t}\n\t\t\t\n\t\t\tpositionFuture = taskService.submitOnce(\"Save Frame Position\", 1, new SaveFramePositionTask(stateUI, x, y));\n\t\t}\n\t}\n", "boolean ok ( T object , RequestScope requestScope , Optional < ChangeSpec > changeSpec ) ;", "public ComplexBuffer filter ( RealBuffer buffer ) { return new ComplexBuffer ( filter ( buffer . getSamples ( ) ) ) ; }", "public boolean killedByStore ( BitSet fact , int local ) { return fact . get ( local + killedByStoreOffset ) ; }", "    public Number computes(Number a, Number b) {\n      if (a instanceof Integer && b instanceof Integer) {\n        return Integer.valueOf(a.intValue() - b.intValue());\n      }\n      else {\n        return Double.valueOf(a.doubleValue() - b.doubleValue());\n      }      \n    }\n", "    public void assertSubmitButtonPresent(String buttonName) {\n        assertTrue(\"Submit Button [\" + buttonName + \"] not found.\",\n                getTestingEngine().hasSubmitButton(buttonName));\n    }\n", "void onScrollStateChange ( int state , float scrollPercent ) ;", "private String cleanToken(String token){\n  token=token.replace(\"(\",\"\");\n  token=token.replace(\")\",\"\");\n  token=token.replace(\"[\",\"\");\n  token=token.replace(\"]\",\"\");\n  token=token.replace(\"!\",\"\");\n  token=token.replace(\"?\",\"\");\n  token=token.replace(\",\",\"\");\n  token=token.replace(\".\",\"\");\n  token=token.replace(\":\",\"\");\n  token=token.replace(\";\",\"\");\n  return token;\n}\n", "public void cancel(){\n  cancelled=true;\n}\n", "public static double log2(double a){\n  if (a == 0)   return 0.0;\n  return Math.log(a) / log2;\n}\n", "public void decode(byte data[], OutputStream uncompData) {\n        \n        if(data[0] == (byte)0x00 && data[1] == (byte)0x01) {\n            throw new RuntimeException(\"LZW flavour not supported.\");\n        }\n        \n        initializeStringTable();\n        \n        this.data = data;\n        this.uncompData = uncompData;\n        \n        // Initialize pointers\n        bytePointer = 0;\n        bitPointer = 0;\n        \n        nextData = 0;\n        nextBits = 0;\n        \n        int code, oldCode = 0;\n        byte string[];\n        \n        while ((code = getNextCode()) != 257) {\n            \n            if (code == 256) {\n                \n                initializeStringTable();\n                code = getNextCode();\n                \n                if (code == 257) {\n                    break;\n                }\n                \n                writeString(stringTable[code]);\n                oldCode = code;\n                \n            } else {\n                \n                if (code < tableIndex) {\n                    \n                    string = stringTable[code];\n                    \n                    writeString(string);\n                    addStringToTable(stringTable[oldCode], string[0]);\n                    oldCode = code;\n                    \n                } else {\n                    \n                    string = stringTable[oldCode];\n                    string = composeString(string, string[0]);\n                    writeString(string);\n                    addStringToTable(string);\n                    oldCode = code;\n                }\n            }\n        }\n    }", "public static List<String> quoteStrList(List<String> list){\n  List<String> tmpList=list;\n  list=new LinkedList<String>();\n  for (  String str : tmpList) {\n    str=\"'\" + str + \"'\";\n    list.add(str);\n  }\n  return list;\n}\n", "public org.mozilla.javascript.Scriptable generateJStype(final String textString,final boolean returnAsString){\n  if (returnAsString) {\n    return cx.newObject(scope,\"String\",new Object[]{textString});\n  }\n else {\n    if (textString != null && !textString.", "public int findColumn(final String columnLabel) throws SQLException {\n\n        checkClosed();\n\n        if (columnLabel == null) {\n            throw Util.nullArgument();\n        }\n\n        int columnIndex;\n\n        // faster lookup for subsequent access\n        if (columnMap != null) {\n            columnIndex = columnMap.get(columnLabel, -1);\n\n            if (columnIndex != -1) {\n                return columnIndex;\n            }\n        }\n\n        final String[] colLabels = resultMetaData.columnLabels;\n\n        columnIndex = -1;\n\n        // column labels first, to preference column aliases\n        for (int i = 0; i < columnCount; i++) {\n            if (columnLabel.equalsIgnoreCase(colLabels[i])) {\n                columnIndex = i;\n\n                break;\n            }\n        }\n\n        final ColumnBase[] columns = resultMetaData.columns;\n\n        // then bare column names, to preference simple\n        // quoted column idents that *may* contain \".\"\n        if (columnIndex < 0) {\n            for (int i = 0; i < columnCount; i++) {\n                if (columnLabel.equalsIgnoreCase(columns[i].getNameString())) {\n                    columnIndex = i;\n\n                    break;\n                }\n            }\n        }\n\n        // then table-qualified column names (again, quoted\n        // table idents *may* contain \".\"\n        // As a last resort, \"fully\" qualified column names\n        // (we don't yet bother with catalog qualification)\n        if (columnIndex < 0) {\n            int position = columnLabel.indexOf('.');\n\n            if (position < 0) {\n                throw Util.sqlException(ErrorCode.JDBC_COLUMN_NOT_FOUND,\n                                        columnLabel);\n            }\n\n            for (int i = 0; i < columnCount; i++) {\n                final String tabName = columns[i].getTableNameString();\n\n                if (tabName == null || tabName.length() == 0) {\n                    continue;\n                }\n\n                final String colName = columns[i].getNameString();\n\n                if (columnLabel.equalsIgnoreCase(tabName + '.' + colName)) {\n                    columnIndex = i;\n\n                    break;\n                }\n\n                final String schemName = columns[i].getSchemaNameString();\n\n                if (schemName == null || schemName.length() == 0) {\n                    continue;\n                }\n\n                String match = new StringBuffer(schemName).append('.').append(\n                    tabName).append('.').append(colName).toString();\n\n                if (columnLabel.equalsIgnoreCase(match)) {\n                    columnIndex = i;\n\n                    break;\n                }\n            }\n        }\n\n        if (columnIndex < 0) {\n            throw Util.sqlException(ErrorCode.JDBC_COLUMN_NOT_FOUND,\n                                    columnLabel);\n        }\n        columnIndex++;\n\n        if (columnMap == null) {\n            columnMap = new IntValueHashMap();\n        }\n        columnMap.put(columnLabel, columnIndex);\n\n        return columnIndex;\n    }", "public static ServiceInfo of(String serviceName, ServiceAcl... acls) {\n        return new ServiceInfo(serviceName, TreePVector.from(Arrays.asList(acls)));\n    }", "boolean useWriteCache(String name,IOContext context){\n  if (!blockCacheWriteEnabled || name.startsWith(IndexFileNames.PENDING_SEGMENTS)) {\n    return false;\n  }\n  if (blockCacheFileTypes != null && !isCachableFile(name)) {\n    return false;\n  }\nswitch (context.context) {\ncase MERGE:\n{\n      return false;\n    }\ndefault :\n{\n    return true;\n  }\n}\n}\n", "    private UsernamePasswordCredentials getCreds(String url) throws Exception {\n        url = normalizeURL(url);\n        url = url.substring(url.indexOf(\"/\") + 2);\n\n        UsernamePasswordCredentials longestMatch = null;\n        int longestMatchLength = 0;\n\n        Iterator<String> iter = m_creds.keySet().iterator();\n        while (iter.hasNext()) {\n            String realmPath = (String) iter.next();\n            if (url.startsWith(realmPath)) {\n                int matchLength = realmPath.length();\n                if (matchLength > longestMatchLength) {\n                    longestMatchLength = matchLength;\n                    longestMatch =\n                            (UsernamePasswordCredentials) m_creds\n                                    .get(realmPath);\n                }\n            }\n        }\n        return longestMatch;\n    }\n", "public static void showProgressDialog ( final Context context , String tag , final String message ) { final Activity activity = getActivity ( context ) ; if ( ! isAlive ( activity ) || activity . isFinishing ( ) ) return ; if ( tag == null ) tag = DEFAULT_TAG ; ProgressDialog dialog = null ; synchronized ( sLock ) { dialog = findDialog ( tag ) ; if ( ! isAlive ( dialog ) ) { if ( dialog != null ) sDialogs . remove ( dialog ) ; dialog = new ProgressDialog ( context ) ; dialog . requestWindowFeature ( Window . FEATURE_NO_TITLE ) ; dialog . setCancelable ( BOOL_ ) ; sDialogs . put ( dialog , new Tag ( tag , activity . hashCode ( ) ) ) ; } } dialog . setMessage ( message ) ; dialog . show ( ) ; }", "public static Tailer create ( File file , TailerListener listener , long delayMillis , boolean end ) { return create ( file , listener , delayMillis , end , DEFAULT_BUFSIZE ) ; }", "\tpublic ICard cardAt(int index) {\n\t\treturn deck[index];\n\t}\n", "public void extend(Collection<Assignment> alternatives){\n  if (alternatives.isEmpty()) {\n    return;\n  }\n  Set<Assignment> newGroundings=new HashSet<Assignment>();\n  for (  Assignment o : alternatives) {\n    for (    Assignment g : groundings) {\n      newGroundings.add(new Assignment(o,g));\n      newGroundings.add(new Assignment(g,o));\n    }\n  }\n  groundings=newGroundings;\n}\n", "HttpResponseTemp < ? > listBuildInfo ( int projectId ) ;", "public static int hashWord(String sWord){\n  int iCnt=0, iRes=0, iLen=sWord.length();\n  for (iCnt=0; iCnt < iLen; iCnt++)   iRes+=(int)sWord.charAt(iCnt);\n  return (sWord.length() * 8192 + iRes);\n}\n", "public long __long__(){\n  return m_value.longValue();\n}\n", "public IMouseState createBendHoverState ( final Bend b , final MouseEvent event ) { final CBendHoverState state = new CBendHoverState ( this , m_graph , b ) ; m_factory . createBendHoverAction ( ) . execute ( state , event ) ; return state ; }", "public void run ( ) { LogConnection conn = null ; try { conn = thl . connect ( BOOL_ ) ; ReplDBMSEvent rde ; while ( ( rde = producer . nextEvent ( ) ) != null ) { maxSeqno = rde . getSeqno ( ) ; THLEvent thlEvent = new THLEvent ( rde . getSourceId ( ) , ", "void scopeChanged ( ) ;", "public GetBlacklistReportsRequest withBlacklistItemNames(String... blacklistItemNames) {\n        if (this.blacklistItemNames == null) {\n            setBlacklistItemNames(new java.util.ArrayList<String>(blacklistItemNames.length));\n        }\n        for (String ele : blacklistItemNames) {\n            this.blacklistItemNames.add(ele);\n        }\n        return this;\n    }", "\tpublic void remove(Debito debito) throws FloggyException {\n\t\tpersistableManager.delete(debito);\n\t}\n", "public void onShowMessageFromWXReq ( WXMediaMessage msg ) { if ( msg != null && msg . mediaObject != null && ( msg . mediaObject instanceof WXAppExtendObject ) ) { WXAppExtendObject obj = ( WXAppExtendObject ) msg . mediaObject ; Toast . makeText ( this , obj . extInfo , Toast . LENGTH_SHORT ) . show ( ) ; } }", "public void onDisplayed ( ) ;", "public boolean isRecordable ( ) { return mRecordable ; }", "@CheckReturnValue\n  private @Nullable\n  LocalSyncWriteModelContainer deleteOneFromResolution(\n      final NamespaceSynchronizationConfig nsConfig,\n      final BsonValue documentId,\n      final BsonDocument atVersion\n  ) {\n    final MongoNamespace namespace = nsConfig.getNamespace();\n    final ChangeEvent<BsonDocument> event;\n    final Lock lock =\n        this.syncConfig.getNamespaceConfig(namespace).getLock().writeLock();\n    lock.lock();\n    final CoreDocumentSynchronizationConfig config;\n    try {\n      config = syncConfig.getSynchronizedDocument(namespace, documentId);\n      if (config == null) {\n        return null;\n      }\n\n      event = ChangeEvents.changeEventForLocalDelete(namespace, documentId, true);\n      config.setSomePendingWrites(logicalT, atVersion, 0L, event);\n    } finally {\n      lock.unlock();\n    }\n\n    final LocalSyncWriteModelContainer container = newWriteModelContainer(nsConfig);\n\n    container.addDocIDs(documentId);\n    container.addLocalWrite(new DeleteOneModel<>(getDocumentIdFilter(documentId)));\n    container.addLocalChangeEvent(event);\n    container.addConfigWrite(\n        new ReplaceOneModel<>(CoreDocumentSynchronizationConfig.getDocFilter(\n          namespace, config.getDocumentId()\n        ), config));\n\n    return container;\n  }", "  public void setGenre(short newGenre) {\n    if ((newGenre <= MAX_GENRE) && (newGenre >= 0)) {\n      genre = newGenre;\n    } else {\n      genre = -1;\n    }\n  }\n", "public int removeEventFromState(EventBean oldEvent){\n  int currentSize=currentStates.size();\n  List<RegexNFAStateEntry> keepList=removeEventFromState(oldEvent,currentStates.iterator());\n  if (randomAccess != null) {\n    randomAccess.remove(oldEvent);\n  }\n  currentStates=keepList;\n  return currentSize - keepList.size();\n}\n", "public static HttpRequest post ( final CharSequence baseUrl , final boolean encode , final Object ... params ) { String url = append ( baseUrl , params ) ; return post ( encode ? encode ( url ) : url ) ; }", "    final public int copy(final ByteBuffer src) {\n        \n        final int n = src.remaining();\n\n        if (n > 0) {\n\n            ensureFree(n);\n\n            src.get(buf, pos, n);\n\n            this.pos += n;\n\n            this.limit = this.pos;\n            \n        }\n        \n        return n;\n        \n    }\n", "public static StreamEx<String> split(CharSequence str,char delimiter,boolean trimEmpty){\n  if (str.length() == 0)   return of(\"\");\n  return of(new CharSpliterator(str,delimiter,trimEmpty));\n}\n", "public boolean select ( Viewer viewer , Object parent , Object element ) { if ( element instanceof IPackageFragment || element instanceof IPackageFragmentRoot || element instanceof IFile ) { return BOOL_ ; } else if ( element instanceof IFolder ) { IFolde", "public ServiceFuture<EnvironmentSettingInner> updateAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, EnvironmentSettingFragment environmentSetting, final ServiceCallback<EnvironmentSettingInner> serviceCallback) {\n        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentSetting), serviceCallback);\n    }", "public void close() throws MapReduceException {\n        try {\n            if(writer != null) {\n                writer.flush();\n                writer.close();\n            }\n        } catch (IOException e) {\n            throw new MapReduceException(\"Failed to close the output collector\", e);\n        }\n    }", "@UiThread public void collapseParent(int parentPosition){\n  collapseParent(mParentList.get(parentPosition));\n}\n", "    public void revalidate() {\n\tvalid = true;\n\tnodeToPoint = nodePlacer.placeNodes(tree, nodeDrawer);\n    }\n", "private boolean isBeforeEnd(ConcurrentSkipListMap.Node<K,V> n){\n  if (n == null)   return false;\n  if (hi == null)   return true;\n  K k=n.key;\n  if (k == null)   return true;\n  int c=m.compare(k,hi);\n  if (c > 0 || (c == 0 && !hiInclusive))   return false;\n  return true;\n}\n", "public void addKeyword ( final String s , final V value ) { root . add ( s , value ) ; }", "public boolean isValid ( ) ;", "public final CalendarInterval getInterval(int rowId) {\n    if (isNullAt(rowId)) return null;\n    final int months = getChild(0).getInt(rowId);\n    final long microseconds = getChild(1).getLong(rowId);\n    return new CalendarInterval(months, microseconds);", "public static boolean isString( Object obj ) {\n      if( (obj instanceof String)\n            || (obj instanceof Character)\n            || (obj != null && (obj.getClass() == Character.TYPE || String.class.isAssignableFrom( obj.getClass() ))) ){\n         return true;\n      }\n      return false;\n   }", "    protected void sort(T table, C column, boolean isDown) {\n\tif (column == null) {\n\t    return;\n\t}\n\tgetTableSorter().setItem(column, isDown);\n\tresort();\n    }\n", "  public void addComponentSearchPath(final String classPath) {\n    Validate.notEmpty(classPath, \"The class path cannot be null or empty.\");\n\n    components.add(classPath);\n  }\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public void close ( ) { this . readyState = WebSocket . WEBSOCKET_STATE_CLOSING ; try { this . socketChannel . close ( ) ; } catch ( IOException e ) { this . onError ( e ) ; } this . running = BOOL_ ; selector . wakeup ( ) ; this . onClose ( ) ; this . readyState = WebSocket . WEBSOCKET_STATE_CLOSED ; }", "@SuppressWarnings(\"unchecked\")\n    public ResolvedLocation resolveLocation(final boolean fuzzy, final String... locationParts)\n            throws ClavinException {\n        final List<String> terms = new ArrayList<String>(locationParts.length+1);\n        // terms will be a list of broadest to narrowest; e.g. United States, Virginia, Fairfax County, Reston\n        for (String part : locationParts) {\n            if (part != null && !part.trim().equals(\"\")) {\n                terms.add(0, part);\n            }\n        }\n        // short circuit if no input was provided\n        if (terms.isEmpty()) {\n            return null;\n        }\n\n        Set<MatchedLocation> candidates = new HashSet<MatchedLocation>();\n        Deque<SearchResult> matches = new LinkedList<SearchResult>();\n        QueryBuilder query = new QueryBuilder()\n                .maxResults(MAX_RESULTS)\n                // translate CLAVIN 1.x 'fuzzy' parameter into NO_EXACT or OFF; it isn't\n                // necessary, or desirable to support FILL for the multi-part resolution algorithm\n                .fuzzyMode(fuzzy ? FuzzyMode.NO_EXACT : FuzzyMode.OFF)\n                .ancestryMode(AncestryMode.ON_CREATE)\n                .includeHistorical(true);\n        findCandidates(candidates, terms, SearchLevel.COUNTRY, matches, query);\n\n        // Using post-processing sort instead of SortedSet implementation (TreeSet) because\n        // TreeSet uses compareTo instead of equals/hashCode to eliminate duplicates and\n        // incorrectly excludes elements that evaluate to the same sort score\n        List<MatchedLocation> candidateList = new ArrayList<MatchedLocation>(candidates);\n        Collections.sort(candidateList, new Comparator<MatchedLocation>() {\n            @Override\n            public int compare(final MatchedLocation loc1, final MatchedLocation loc2) {\n                double score1 = scorer.score(terms, loc1);\n                double score2 = scorer.score(terms, loc2);\n                // sort candidates in descending order by score\n                return Double.compare(score2, score1);\n            }\n        });\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found {} candidates\", candidateList.size());\n            for (MatchedLocation candidate : candidateList) {\n                LOG.debug(String.format(\"[%.3f] %s\", scorer.score(terms, candidate), candidate.toString()));\n            }\n        }\n        MatchedLocation bestMatch = candidateList.isEmpty() ? null : candidateList.get(0);\n        ResolvedLocation location = null;\n        if (bestMatch != null && (bestMatch.isFullySpecified() || bestMatch.getMatchCount() == terms.size())) {\n            location = bestMatch.getMostSpecificMatch().getLocation();\n        }\n        return location;\n    }", "public static boolean isStdio(String filename){\n  return STDIO_NAME.equals(filename);\n}\n", "protected void init ( String owner , MethodNode m ) throws AnalyzerException { }", "public static int indexOfIgnoreCase(int startingPosition,String searchIn,String searchFor,String openingMarkers,String closingMarkers,Set<SearchMode> searchMode){\n  if (searchIn == null || searchFor == null) {\n    return -1;\n  }\n  int searchInLength=searchIn.length();\n  int searchForLength=searchFor.length();\n  int stopSearchingAt=searchInLength - searchForLength;\n  if (startingPosition > stopSearchingAt || searchForLength == 0) {\n    return -1;\n  }\n  if (searchMode.contains(SearchMode.SKIP_BETWEEN_MARKERS) && (openingMarkers == null || closingMarkers == null || openingMarkers.length() != closingMarkers.length())) {\n    throw new IllegalArgumentException(Messages.getString(\"StringUtils.15\",new String[]{openingMarkers,closingMarkers}));\n  }\n  char firstCharOfSearchForUc=Character.toUpperCase(searchFor.charAt(0));\n  char firstCharOfSearchForLc=Character.toLowerCase(searchFor.charAt(0));\n  if (Character.isWhitespace(firstCharOfSearchForLc) && searchMode.contains(SearchMode.SKIP_WHITE_SPACE)) {\n    searchMode=EnumSet.copyOf(searchMode);\n    searchMode.remove(SearchMode.SKIP_WHITE_SPACE);\n  }\n  for (int i=startingPosition; i <= stopSearchingAt; i++) {\n    i=indexOfNextChar(i,stopSearchingAt,searchIn,openingMarkers,closingMarkers,searchMode);\n    if (i == -1) {\n      return -1;\n    }\n    char c=searchIn.charAt(i);\n    if (isCharEqualIgnoreCase(c,firstCharOfSearchForUc,firstCharOfSearchForLc) && startsWithIgnoreCase(searchIn,i,searchFor)) {\n      return i;\n    }\n  }\n  return -1;\n}\n", "    public void error(Object object) {\n        if (debug) {\n            log4jLogger.debug(object);\n        } else log4jLogger.error(object);\n    }\n", "public JSONObject deleteBy(Query query, RequestOptions requestOptions) throws AlgoliaException {\n    String paramsString = query.getQueryString();\n    JSONObject body = new JSONObject();\n    try {\n      body.put(\"params\", paramsString);\n    } catch (JSONException e) {\n      throw new RuntimeException(e);\n    }\n    return client.postRequest(\"/1/indexes/\" + encodedIndexName + \"/deleteByQuery\", body.toString(), false, false, requestOptions);\n  }", "@Override\n    protected void doExecute() throws Exception {\n        createOrUpdateFunctionApp();\n\n        final FunctionApp app = getFunctionApp();\n        if (app == null) {\n            throw new MojoExecutionException(\n                String.format(\"Failed to get the function app with name: %s\", getAppName()));\n        }\n\n        final DeployTarget deployTarget = new DeployTarget(app, DeployTargetType.FUNCTION);\n\n        info(DEPLOY_START);\n\n        getArtifactHandler().publish(deployTarget);\n\n        info(String.format(DEPLOY_FINISH, getAppName()));\n    }", "private boolean isValidForIncoming(GUID match, GUID guidReceived, InetSocketAddress addr) {\n        if(!match.equals(guidReceived))\n            return false;\n            \n\t    String host = addr.getAddress().getHostAddress();\n\n        return !ConnectionS", "\t    protected void idle() {\n\t\tconnectionTimer.scheduleTimeout(this, false);\n\t    }\n", "private Date maxDate(@Nullable Date d1,@Nullable Date d2){\n  if (d1 == null)   return d2;\n  if (d2 == null)   return d1;\n  return d1.before(d2) ? d2 : d1;\n}\n", "public static List < String > readLines ( File file , String charset ) throws IOException { return IOGroovyMethods . readLines ( newReader ( file , charset ) ) ; }", "public void defineApplication(ApplicationDefinition appDef) {\r\n        checkServiceState();\r\n        Tenant tenant = TenantService.instance().getDefaultTenant();\r\n        defineApplication(tenant, appDef);\r\n    }", "static void checkInternalName ( final String name , final int start , final int end , final String msg ) { int max = end == - NUM_ ? name . length ( ) : end ; try { int begin = start ; int slash ; do { slash = name . indexOf ( STR_ , begin + NUM_ ) ; if (", "public static double clamp(double value,double low,double high){\n  return Math.min(Math.max(value,low),high);\n}\n", "    public void setCenter(Point2D.Double center) {\n        if (center.x > 180.0 || center.x < -180.0) {\n            throw new IllegalArgumentException(\"Illegal longitude: \" + center.x);\n        }\n        if (center.y > 80.0 || center.y < - 80.0) {\n            throw new IllegalArgumentException(\"Illegal latitude: \" + center.y);\n        }\n\n        this.center = center;\n        latCorrection = Math.cos(Math.toRadians(center.y));\n    }\n", "public ParsedColInfo toTVE(int indx, int diff) {\n       TupleValueExpression exp = new TupleValueExpression(m_tableName, m_tableAlias,\n               m_columnName, m_alias, m_expression, indx);\n       exp.setDifferentiator(diff);\n       m_expression = exp;\n       return this;\n    }", "    public boolean getHasText() {\n        PrimaryType primary = getPrimary();\n        if (primary == null)\n            return false;\n        return primary.isHasText();\n    }\n", "private void updateRunningChannels(ChannelDataImpl channelData) {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {\n            Tr.entry(tc, \"updateRunningChannels\");\n        }\n        Channel channel = null;\n        ChannelContainer channelContainer = null;\n        Iterator<ChildChannelDataImpl> children = channelData.children();\n        while (children.hasNext()) {\n            // Find the running channel with the child name.\n            channelContainer = channelRunningMap.get(children.next().getName());\n            channel = channelContainer.getChannel();\n            // Inform the channel of the update. Note, parent data is ref'd in the\n            // child data.\n            channel.update(channelContainer.getChannelData());\n        }\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {\n            Tr.exit(tc, \"updateRunningChannels\");\n        }\n    }", "\tpublic ZBox getDockData(){\n\t\tZBounds b = data.getBoundsData();\n\t\tDimension s = b.getSize();\n\t\tdata.setBoundsData(new ZBounds(getX(), getY(), (int)s.getWidth(), (int)s.getHeight()));\n\t\treturn data;\n\t}\n", "private void openLog(){\n  closeLogStream();\n  WriteStream os=_os;\n  _os=null;\n  IoUtil.close(os);\n  Path path=getPath();\n  if (path == null) {\n    path=getPath(CurrentTime.currentTime());\n  }\n  Path parent=path.getParent();\n  try {\n    if (!Files.isDirectory(parent)) {\n      Files.createDirectory(parent);\n    }\n  }\n catch (  Exception e) {\n    logWarning(L.l(\"Can't create log directory {0}.\\n  Exception={1}\",parent,e),e);\n  }\n  Exception exn=null;\n  for (int i=0; i < 3 && _os == null; i++) {\n    try {\n      OutputStream out=Files.newOutputStream(path,StandardOpenOption.APPEND);\n      _os=new WriteStream(out);\n    }\n catch (    IOException e) {\n      exn=e;\n    }\n  }\n  String pathName=path.toString();\n  try {\n    if (pathName.endsWith(\".gz\")) {\n      _zipOut=_os;\n      _os=new WriteStream(new GZIPOutputStream(_zipOut));\n    }\n else     if (pathName.endsWith(\".zip\")) {\n      throw new ConfigException(\"Can't support .zip in path-format\");\n    }\n  }\n catch (  Exception e) {\n    if (exn == null)     exn=e;\n  }\n  if (exn != null)   logWarning(L.l(\"Can't create log for {0}.\\n  User={1} Exception={2}\",path,System.getProperty(\"user.name\"),exn),exn);\n}\n", "public Atom getAtom(String name, Element spec, boolean lenient) {\n\t\tAtom result = null;\n\t\tString alias = (String) aliases.get(name);\n\t\tif (alias != null) {\n\t\t\tname = alias;\n\t\t}\n\t\ttry {\n\t\t\tresult = environment.getAtom(name, spec, lenient);\n\t\t\tif (result !", "    public void putAccountProperties(long accountId, Properties properties) {\n        for (Object obj : properties.keySet()) {\n            String key = (String) obj;\n            String value = properties.getProperty(key);\n            putAccountProperty(accountId, key, value);\n        }\n    }\n", "public ReilInstruction ( final IAddress address , final String mnemonic , final ReilOperand firstOperand , final ReilOperand secondOperand , final ReilOperand thirdOperand ) { Preconditions . checkNotNull ( mnemonic , STR_ ) ; this . mnemonic = ReilHelpers . MnemonicToMnemonicCode ( mnemonic ) ; this . firstOperand = Preconditions . checkNotNull ( firstOperand ) ; this . secondOperand = Preconditions . checkNotNull ( secondOperand ) ; this . thirdOperand = Preconditions . checkNotNull ( thirdOperand ) ; this . address = address ; }", "    public float distance2() {\n        return getX() * getX() + getY() * getY() + getZ() * getZ();\n    }\n", "public static void selectNodes ( final ZyGraph graph , final CTag tag ) { selectNodes ( graph , Sets . newHashSet ( tag ) , BOOL_ ) ; }", "public void addAllowedRole(String roleName, String roleRight) {\n\t\tif (roleName != null && roleRight != null) {\n\t\t\tif (!this._roleRights.containsKey(roleName)) {\n\t\t\t\tthis._roleRights.put(roleName, this.parseRights(roleRight));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tLOGGER.in", "public synchronized < T > void sendEvent ( T event , String key , boolean sendToDefaultBusAsWell ) { RXBusEventIsNullException . checkEvent ( event ) ; RXBusKeyIsNullException . checkKey ( key ) ; SerializedSubject subject = getSubject ( new RXQueueKey ( event . getClass ( ) , key ) , BOOL_ ) ; if ( subject != null ) subject . onNext ( event ) ; if ( sendToDefaultBusAsWell ) sendEvent ( event ) ; }", "public void fileRotated ( ) { }", "void receivedEvent ( DebuggerReply event ) ;", "public void releaseAll(){\n  controller.mouseRelease(InputEvent.BUTTON1_MASK);\n  controller.mouseRelease(InputEvent.BUTTON2_MASK);\n  controller.mouseRelease(InputEvent.BUTTON3_MASK);\n}\n", "public void addObservations ( int [ ] [ ] states ) { for ( int t = NUM_ ; t < states . length ; t ++ ) { int jointValue = NUM_ ; for ( int i = NUM_ ; i < numVars ; i ++ ) { int thisValue = states [ t ] [ i ] ; marginalCounts [ i ] [ thisValue ] ++ ; jointValue *= base ; jointValue += thisValue ; } jointCount [ jointValue ] ++ ; observations ++ ; } }", "public StatelessScrollableDataIterator ( String entityName , SessionFactory sessionFactory , int fetchSize , boolean performOrderById ) { super ( entityName , sessionFactory , fetchSize , performOrderById ) ; }", "public boolean includesDefinedInContent() {\n\n        if ((m_types == null) || m_types.isEmpty()) {\n            return true;\n        }\n        Iterator<CmsRelationType> itTypes = m_types.iterator();\n        while (itTypes.hasNext()) {\n            CmsRelationType type = itTypes.next();\n            if (type.isDefinedInContent()) {\n                return true;\n            }\n        }\n        return false;\n    }", "public static Pipeline parse(File scriptFile, List<String> replacementVars)\n            throws ParseException, IOException {\n        checkArgument(\n                scriptFile.exists(),\n                \"could not find pipeline script file at \"\n                        + scriptFile.getAbsolutePath());\n        return parse(FileUtils.readLines(scriptFile), scriptFile.getParent(),\n                replacementVars);\n    }", "public Observable<Page<VirtualNetworkGatewayConnectionListEntityInner>> listConnectionsNextAsync(final String nextPageLink) {\n        return listConnectionsNextWithServiceResponseAsync(nextPageLink)\n            .map(new Func1<ServiceResponse<Page<VirtualNetworkGatewayConnectionListEntityInner>>, Page<VirtualNetworkGatewayConnectionListEntityInner>>() {\n                @Override\n                public Page<VirtualNetworkGatewayConnectionListEntityInner> call(ServiceResponse<Page<VirtualNetworkGatewayConnectionListEntityInner>> response) {\n                    return response.body();\n                }\n            });\n    }", "protected void unhighlightNode ( final Node node ) { CNodeHighlighter . highlightNode ( node , BOOL_ ) ; }", "\tpublic void setThemeName (java.lang.String themeName) {\n\t\tthis.themeName = themeName;\n\t}\n", "private void closeJar(String path){\n  if (jarfiles.containsKey(path)) {\n    JarHolder theJar=(JarHolder)jarfiles.get(path);\n    theJar.close();\n  }\n}\n", "public static FeatureList read(String filename) throws IOException {\n\t\tlogger.info(\"Reading: {}\", filename);\n\n\t\tFeatureList features = new FeatureList();\n\t\tBufferedReader br = new BufferedReader(new FileReader(filename));\n\n\t\tString s;\n\t\tfor (s = br.readLine(); null != s; s = br.readLine()) {\n\t\t\ts = s.trim();\n\n\t\t\tif (s.length() > 0) {\n\t\t\t\tif (s.charAt(0) == '#') {\n\t\t\t\t\t//ignore comment lines\n\t\t\t\t} else {\n\n\t\t\t\t\tFeatureI f = parseLine(s);\n\t\t\t\t\tif (f != null) {\n\t\t\t\t\t\tfeatures.add(f);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\tbr.close();\n\t\treturn features;\n\t}", "\tpublic void update(Star star) {\n\t\tsuper.update(star);\n\t\towner.setFontColor(Race.getRaceColor(star.getOwner().getBannerIndex()));\n\t\towner.setText(star.getOwner().getRaceName().toUpperCase() + \"\\nCOLONY\");\n\t\trange.setText(\"Range: \" + star.getRangeText());\n\t}\n", "public CategorylinksParser ( InputStream inputStream ) throws IOException { init ( inputStream ) ; }", "private Iterable<Object> getCounterLockKeys()\n    {\n        return Iterables.concat(Iterables.transform(getColumnFamilies(), new Function<ColumnFamily, Iterable<Object>>()\n        {\n            public Iterable<Object> apply(final ColumnFamily cf)\n            {\n                return Iterables.transform(cf, new Function<Cell, Object>()\n                {\n                    public Object apply(Cell cell)\n                    {\n                        return Objects.hashCode(cf.id(), key(), cell.name());\n                    }\n                });\n            }\n        }));\n    }", "@SuppressLint(\"NewApi\") private void rebuildCache(){\n  if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {\n    log(\"rebuildCache\");\n  }\n  HashSet<Long> newDraftSet=new HashSet<>();\n  Cursor cursor=SqliteWrapper.query(mContext,mContext.getContentResolver(),MmsSms.CONTENT_DRAFT_URI,DRAFT_PROJECTION,null,null,null);\n  if (cursor != null) {\n    try {\n      if (cursor.moveToFirst()) {\n        for (; !cursor.isAfterLast(); cursor.moveToNext()) {\n          long threadId=cursor.getLong(COLUMN_DRAFT_THREAD_ID);\n          newDraftSet.add(threadId);\n          if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {\n            log(\"rebuildCache: add tid=\" + threadId);\n          }\n        }\n      }\n    }\n  finally {\n      cursor.close();\n    }\n  }\n  Set<Long> added;\n  Set<Long> removed;\nsynchronized (mDraftSetLock) {\n    HashSet<Long> oldDraftSet=mDraftSet;\n    mDraftSet=newDraftSet;\n    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {\n      dump();\n    }\nsynchronized (mChangeListenersLock) {\n      if (mChangeListeners.isEmpty()) {\n        return;\n      }\n    }\n    added=new HashSet<Long>(newDraftSet);\n    added.removeAll(oldDraftSet);\n    removed=new HashSet<Long>(oldDraftSet);\n    removed.removeAll(newDraftSet);\n  }\nsynchronized (mChangeListenersLock) {\n    for (    OnDraftChangedListener l : mChangeListeners) {\n      for (      long threadId : added) {\n        l.onDraftChanged(threadId,true);\n      }\n      for (      long threadId : removed) {\n        l.onDraftChanged(threadId,false);\n      }\n    }\n  }\n}\n", "    public ModuleType moduleType() {\n        return moduleType;\n    }\n", "    public String globalInfo() {\n        return \"An Estimator is an algorithm for finding the conditional probability tables\"\n            + \" of the Bayes Network.\";\n    }\n", "@Nullable\n    public T get(int deviceId) {\n        try {\n            locksMap.get(deviceId).readLock().lock();\n            return backingMap.get(deviceId);\n        } finally {\n            locksMap.get(deviceId).readLock().unlock();\n        }\n    }", "boolean allowDrag ( ) ;", "public static Integer [ ] transformIntArray ( int [ ] source ) { Integer [ ] destin = new Integer [ source . length ] ; for ( int i = NUM_ ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }", "\tpublic void addAttributeValue(TimeSeriesAttribute attribute, TimeSeriesAttributeValue value ){\n\t\tList<TimeSeriesAttributeValue> values;\n\t\tif( this.containsKey(attribute )) {\n\t\t\tvalues = this.get(attribute);\n\t\t}else{\n\t\t\tvalues = new ArrayList<TimeSeriesAttributeValue>();\n\t\t}\n\t\tvalues.add( value );\n\t\tthis.put( attribute, values );\n\t}\n", "public void storeOriginals ( ) { mStartingStartTrim = mStartTrim ; mStartingEndTrim = mEndTrim ; mStartingRotation = mRotation ; }", "public ChangeSet decrement ( String path , long delta ) { return increment ( path , - delta ) ; }", "public void printReport(File file) throws AdeException {\n  final PrintWriter out=FileUtils.openPrintWriterToFile(file,true);\n  printReport(out);\n  out.close();\n}\n", "    public Dimension getMinimumSize() {\n\t    Dimension min = getOuterPreferredSize();\n        Dimension scrolledSize = getScrolledMinimumSize();\n        min.width += scrolledSize.width;\n        min.height += scrolledSize.height;\n        return min;\n    }\n", "public Date build ( ) { Calendar cal ; if ( tz != null && lc != null ) cal = Calendar . getInstance ( tz , lc ) ; else if ( tz != null ) cal = Calendar . getInstance ( tz ) ; else if ( lc != null ) cal = Calendar . getInstance ( lc ) ; else cal = Calendar", "    private void validate(SortableTable sortableTable) {\n        if (sortableTable == null) {\n            String error = \"Paginator() sortableTable cannot be null\";\n            logger.error(error);\n            throw new RuntimeException(error);\n        }\n    }\n", "public void renewed ( LeasedResource resource ) ;", "Union6 < First , Second , Third , Fourth , Fifth , Sixth > first ( First value ) ;", "public void close ( ) throws IOException { if ( mInputStream != null ) { mInputStream . close ( ) ; } else { throw new IOException ( STR_ ) ; } mInputStream = null ; }", "public void sort ( Comparator < T > sortFunction ) { if ( values instanceof List ) { ( ( List < T > ) values ) . sort ( sortFunction ) ; } else { ArrayList < T > sortedList = new ArrayList < > ( values ) ; sortedList . sort ( sortFunction ) ; values . clear ( ) ; values . addAll ( sortedList ) ; } }", "protected boolean stopEchoService() {\n    return Optional.ofNullable(getEchoService()).map(localEchoService -> {\n\n      localEchoService.shutdown();\n\n      try {\n        if (!localEchoService.awaitTermination(30, TimeUnit.SECONDS)) {\n          localEchoService.shutdownNow();\n\n          if (!localEchoService.awaitTermination(30, TimeUnit.SECONDS)) {\n            getLogger().warning(\"Failed to shutdown EchoService\");\n          }\n        }\n      }\n      catch (InterruptedException ignore) {\n        Thread.currentThread().interrupt();\n      }\n\n      return localEchoService.isShutdown();\n\n    }).orElse(false);\n  }", "public abstract void isWebPluginUnstable ( String path , CefWebPluginUnstableCallback callback ) ;", "public abstract byte map ( byte src ) ;", "protected static int createSerialNumber(){\n  return serialNumberSequencer.incrementAndGet();\n}\n", "    public BaseEntityServerXML xmlIn(TransactionXML transaction, String tag) {\n        if (tag.equals(\"absence\"))\n            return new BaseEntityServerXML(transaction, new Absence(),absences);\n        if (tag.equals(\"email\"))\n            return new BaseEntityServerXML(transaction, new EMail(),emails);\n        if (tag.equals(\"skill\"))\n            return new BaseEntityServerXML(transaction, new Skill(),skills);\n        return null;\n    }\n", "public CSelectionCriteriumPanel ( final CSelectionCriterium criterium ) { super ( new BorderLayout ( ) ) ; m_criterium = criterium ; selectionStateBox . addActionListener ( selectionStateBoxListener ) ; initPanel ( ) ; }", "void stopMonitoring ( AbstractProxyBasedReplicationMonitoredConnection < T , L > connection ) ;", "public static void closeZipEntry(ZipOutputStream out){\n  try {\n    out.closeEntry();\n  }\n catch (  Exception ex) {\n    throw new RuntimeException(\"Failed to close the current ZipEntry\",ex);\n  }\n}\n", "public ImageLoader ( RequestQueue queue , ImageCache imageCache ) { mRequestQueue = queue ; mCache = imageCache ; }", "private String convertOutputToHtml(String content) {\n\n        if (content.length() == 0) {\n            return \"\";\n        }\n        StringBuilder buffer = new StringBuilder();\n        for (String line : content.split(\"\\n\")) {\n            buffer.append(CmsEncoder.escapeXml(line) + \"<br>\");\n        }\n        return buffer.toString();\n    }", "  public boolean isViewScaleArrows() {\n    if (!attributes.isDefined(ATTR_VIEW_SCALE_ARROWS)) {\n      return true;\n    }\n    return attributes.getBoolean(ATTR_VIEW_GRID);      \n  }\n", "private boolean copyFilesFromCurrentReleaseToNewRelease(){\n  boolean result=true;\n  final File currentWwwFolder=new File(currentReleaseFS.getWwwFolder());\n  final File newWwwFolder=new File(newReleaseFS.getWwwFolder());\n  try {\n    if (newWwwFolder.exists()) {\n      FilesUtility.delete(newWwwFolder);\n    }\n    FilesUtility.copy(currentWwwFolder,newWwwFolder);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    result=false;\n  }\n  return result;\n}\n", "public static void firstById(String id, UIComponent base, char separatorChar, FacesContext context, ContextCallback callback) {\n\n        // try #findComponent first\n        UIComponent component = base.findComponent(id);\n\n        // try #invokeOnComponent\n        // it's required to support e.g. a full client id for a component which is placed inside UIData components\n        if (component == null) {\n            // #invokeOnComponent doesn't support the leading seperator char\n            String tempExpression = id;\n            if (tempExpression.charAt(0) == separatorChar) {\n                tempExpression = tempExpression.substring(1);\n            }\n\n            context.getViewRoot().invokeOnComponent(context, tempExpression, callback);\n        }\n        else {\n            callback.invokeContextCallback(context, component);\n        }\n    }", "public String nextToken(){\n  currentPosition=(newPosition >= 0 && !delimsChanged) ? newPosition : skipDelimiters(currentPosition);\n  delimsChanged=false;\n  newPosition=-1;\n  if (currentPosition >= maxPosition)   throw new NoSuchElementException();\n  int start=currentPosition;\n  currentPosition=scanToken(currentPosition);\n  return str.substring(start,currentPosition);\n}\n", "private SchemaFactory loadFromServicesFile(String schemaLanguage,String resourceName,InputStream in){\n  if (debug)   debugPrintln(\"Reading \" + resourceName);\n  BufferedReader rd;\n  try {\n    rd=new BufferedReader(new InputStreamReader(in,\"UTF-8\"),DEFAULT_LINE_LENGTH);\n  }\n catch (  java.io.UnsupportedEncodingException e) {\n    rd=new BufferedReader(new InputStreamReader(in),DEFAULT_LINE_LENGTH);\n  }\n  String factoryClassName=null;\n  SchemaFactory resultFactory=null;\n  while (true) {\n    try {\n      factoryClassName=rd.readLine();\n    }\n catch (    IOException x) {\n      break;\n    }\n    if (factoryClassName != null) {\n      int hashIndex=factoryClassName.indexOf('#');\n      if (hashIndex != -1) {\n        factoryClassName=factoryClassName.substring(0,hashIndex);\n      }\n      factoryClassName=factoryClassName.trim();\n      if (factoryClassName.length() == 0) {\n        continue;\n      }\n      try {\n        SchemaFactory foundFactory=(SchemaFactory)createInstance(factoryClassName);\n        if (foundFactory.isSchemaLanguageSupported(schemaLanguage)) {\n          resultFactory=foundFactory;\n          break;\n        }\n      }\n catch (      Exception ignored) {\n      }\n    }\n else {\n      break;\n    }\n  }\n  IoUtils.closeQuietly(rd);\n  return resultFactory;\n}\n", "public static List<Atom> getAtomsForGroup(Group inputGroup) {\n\t\tSet<Atom> uniqueAtoms = new HashSet<Atom>();\n\t\tList<Atom> theseAtoms = new ArrayList<Atom>();\n\t\tfor(Atom a: inputGroup.getAtoms()){\n\t\t\ttheseAtoms.add(a);\n\t\t\tuniqueAtoms.add(a);\n\t\t}\n\t\tList<Group> altLocs = inputGroup.getAltLocs();\n\t\tfor(Group thisG: altLocs){\n\t\t\tfor(Atom a: thisG.getAtoms()){\n\t\t\t\tif(uniqueAtoms.contains(a)){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ttheseAtoms.add(a);\n\t\t\t}\n\t\t}\n\t\treturn theseAtoms;\n\t}", "private void initRandom() {\n        try {\n            random = new SecureRandom();\n        } catch (Exception e) {\n            log.warn(\"Could not generate SecureRandom for session-id randomness\", e);\n            random = new Random();\n            weakRandom = true;\n        }\n    }", "COMMarkerSegment(String comment){\n  super(JPEG.COM);\n  data=comment.getBytes();\n}\n", "@Override\n    public void go() {\n        logger.info(\"Typing \\\"{}\\\"...\", (Object) keys);\n        new Actions(getWebDriver()).sendKeys(Keys.ENTER);\n    }", "public static void registerExperimentalFlags(CFlags flags){\n  resetAccessedStatus();\n  final String[] cat=flags.getCategories();\n  if (cat != null) {\n    final String[] copy=Arrays.copyOf(cat,cat.length + 1);\n    copy[copy.length - 1]=CATEGORY;\n    flags.setCategories(flags.getHelpCategory(),copy);\n  }\n  for (  final Flag flag : FLAGS) {\n    flags.register(flag);\n  }\n  sFlags=flags;\n}\n", "public static boolean isValidIANAEncoding(String ianaEncoding){\n  if (ianaEncoding != null) {\n    int length=ianaEncoding.length();\n    if (length > 0) {\n      char c=ianaEncoding.charAt(0);\n      if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n        for (int i=1; i < length; i++) {\n          c=ianaEncoding.charAt(i);\n          if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "public synchronized void setRequestLog(RequestLog log)\n    {\n        if (_requestLog!=null)\n            removeComponent(_requestLog);\n        _requestLog=log;\n        if (_requestLog!=null)\n            addComponent(_requestLog);\n    }", "public void addCollector(Collector collector){\n  collectors.add(collector);\n}\n", "public void addNodesInDocOrder(NodeIterator iterator,XPathContext support){\n  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));\n  Node node;\n  while (null != (node=iterator.nextNode())) {\n    addNodeInDocOrder(node,support);\n  }\n}\n", "public void process(ImagePyramid<GrayF32> image1 , ImagePyramid<GrayF32> image2 )\n\t{\n\t\t// Process the pyramid from low resolution to high resolution\n\t\tboolean first = true;\n\t\tfor( int i = image1.getNumLayers()-1; i >= 0; i-- ) {\n\t\t\tGrayF32 layer1 = image1.getLayer(i);\n\t\t\tGrayF32 layer2 = image2.getLayer(i);\n\n\t\t\tresizeForLayer(layer1.width,layer2.height);\n\n\t\t\t// compute image derivatives\n\t\t\tgradient.process(layer1,deriv1X,deriv1Y);\n\t\t\tgradient.process(layer2,deriv2X,deriv2Y);\n\t\t\thessian.process(deriv2X,deriv2Y,deriv2XX,deriv2YY,deriv2XY);\n\n\t\t\tif( !first ) {\n\t\t\t\t// interpolate initial flow from previous layer\n\t\t\t\tinterpolateFlowScale(layer1.width, layer1.height);\n\t\t\t} else {\n\t\t\t\t// for the very first layer there is no information on flow so set everything to 0\n\t\t\t\tfirst = false;\n\n\t\t\t\tflowU.reshape(layer1.width, layer1.height);\n\t\t\t\tflowV.reshape(layer1.width, layer1.height);\n\n\t\t\t\tImageMiscOps.fill(flowU,0);\n\t\t\t\tImageMiscOps.fill(flowV,0);\n\t\t\t}\n\n\t\t\t// compute flow for this layer\n\t\t\tprocessLayer(layer1,layer2,deriv1X,deriv1Y,deriv2X,deriv2Y,deriv2XX,deriv2YY,deriv2XY);\n\t\t}\n\t}", "public static double min(final double[] values) {\n\t\tdouble min = NaN;\n\t\tif (values.length > 0) {\n\t\t\tmin = values[0];\n\n\t\t\tfor (int i = 0; i < values.length; ++i) {\n\t\t\t\tif (values[i] < min) {\n\t\t\t\t\tmin = values[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn min;\n\t}", "    public WorkflowTO getWorkflowByName(final String i_name, final int i_version) throws EmForgeException {\n\n        WorkflowTO workflow = (WorkflowTO) execute(new JbpmCallback() {\n\n            public Object doInJbpm(JbpmContext context) {\n                ProcessDefinition processDef = getProcessDef(context, i_name, i_version);\n                if (processDef == null) {\n                    return null;\n                } else {\n                \treturn new ProcessDefTransformer(getWikiService(), context).transform(processDef);\n                }\n            }\n        });\n        return workflow;\n    }\n", "    public void setNoChannels(boolean  v) {\n\tboolean old = noChannels;\n\tnoChannels = v;\n\tfirePropertyChange(\"noChannels\", old, noChannels);\n    }\n", "public void writeDetails ( javax . xml . namespace . QName qname , org . apache . axis . encoding . SerializationContext context ) throws java . io . IOException { context . serialize ( qname , null , this ) ; }", "    public boolean changeReducingEndType(Collection<Glycan> structures, ResidueType new_type) {\n    boolean changed = false;\n    for( Glycan s : structures ) \n        changed |= changeReducingEndTypePVT(s,new_type);\n    if( changed )\n        fireDocumentC", "\tprivate int findDataElementIndex(final Object anItem) {\n\t\tif (anItem == null) {\n\t\t\tthrow new NullPointerException(\"Item to find must not be null\"); //$NON-NLS-1$\n\t\t}\n\n\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\tfinal ComboBoxItemPair datacon = (ComboBoxItemPair) data.get(i);\n\t\t\tif (anItem.equals(datacon.getKey())) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n", "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return PERSON;\ncase 2:\n  return PAGE;\ncase 3:\nreturn NONCE;\ndefault :\nreturn null;\n}\n}\n", "public static void assertNoException(Runnable expression){\n  if (verbose) {\n    log(\"assertNoException(\" + expression + \")\");\n  }\n  try {\n    expression.run();\n  }\n catch (  RuntimeException failure) {\n    TestUtils.fail();\n  }\n}\n", "private void addRelations(List<RelationHolder> rlHolders, Map<String, Object> values)\n    {\n        if (rlHolders != null)\n        {\n            for (RelationHolder relation : rlHolders)\n            {\n                values.put(relation.getRelationName(), relation.getRelationValue());\n            }\n        }\n    }", "  public void modeChanged(int currentMode) {\n    if (currentMode==Consts.INSERT) {\n      DetailSaleDocVO vo = (DetailSaleDocVO)frame.getHeaderFormPanel().getVOModel().getValueObject();\n      if (vo.getCustomerCodeSAL07()!=null)\n        frame.getSaleCustomerHeadPanel1().getCustomerController().forceValidate();\n      if (vo.getWarehouseCodeWar01DOC01()!=null)\n        frame.getWareController().forceValidate();\n\n//      if (vo.getCustomerCodeSAL07()!=null && vo.getWarehouseCodeWar01DOC01()!=null) {\n//        if (frame.getHeaderFormPanel().save()) {\n//          frame.showRowsPanel();\n//          frame.getRowsPanel().getDetailPanel().insert();\n//        }\n//      }\n    }\n  }\n", "private String columnInfoMySQL ( ArrayList < Column > columns ) { if ( columns != null && columns . size ( ) > NUM_ ) { StringBuffer sb = new StringBuffer ( ) ; if ( checkColumnNames || checkColumnTypes ) { for ( int i = NUM_ ; i < columns . size ( ) ; i ++ ) { if ( i > NUM_ ) sb . append ( STR_ ) ; if ( checkColumnNames ) sb . append ( columns . get ( i ) . getName ( ) ) ; if ( checkColumnNames && checkColumnTypes ) sb . append ( STR_ ) ; if ( checkColumnTypes ) sb . append ( columns . get ( i ) . getType ( ) ) ; } } return sb . toString ( ) ; } else { return null ; } }", "private static String wordShapeChris2Long(String s, boolean omitIfInBoundary, int len, Collection<String> knownLCWords) {\n    final char[] beginChars = new char[BOUNDARY_SIZE];\n    final char[] endChars = new char[BOUNDARY_SIZE];\n    int beginUpto = 0;\n    int endUpto = 0;\n    final Set<Character> seenSet = new TreeSet<Character>();  // TreeSet guarantees stable ordering; has no size parameter\n\n    boolean nonLetters = false;\n\n    for (int i = 0; i < len; i++) {\n      int iIncr = 0;\n      char c = s.charAt(i);\n      char m = c;\n      if (Character.isDigit(c)) {\n        m = 'd';\n      } else if (Character.isLowerCase(c)) {\n        m = 'x';\n      } else if (Character.isUpperCase(c) || Character.isTitleCase(c)) {\n        m = 'X';\n      }\n      for (String gr : greek) {\n        if (s.startsWith(gr, i)) {\n          m = 'g';\n          //System.out.println(s + \"  ::  \" + s.substring(i+1));\n          iIncr = gr.length() - 1;\n          break;\n        }\n      }\n      if (m != 'x' && m != 'X') {\n        nonLetters = true;\n      }\n\n      if (i < BOUNDARY_SIZE) {\n        beginChars[beginUpto++] = m;\n      } else if (i < len - BOUNDARY_SIZE) {\n        seenSet.add(Character.valueOf(m));\n      } else {\n        endChars[endUpto++] = m;\n      }\n      i += iIncr;\n      // System.out.println(\"Position skips to \" + i);\n    }\n\n    // Calculate size. This may be an upperbound, but is often correct\n    int sbSize = beginUpto + endUpto + seenSet.size();\n    if (knownLCWords != null) { sbSize++; }\n    final StringBuilder sb = new StringBuilder(sbSize);\n    // put in the beginning chars\n    sb.append(beginChars, 0, beginUpto);\n    // put in the stored ones sorted\n    if (omitIfInBoundary) {\n      for (Character chr : seenSet) {\n        char ch = chr.charValue();\n        boolean insert = true;\n        for (int i = 0; i < beginUpto; i++) {\n          if (beginChars[i] == ch) {\n            insert = false;\n            break;\n          }\n        }\n        for (int i = 0; i < endUpto; i++) {\n          if (endChars[i] == ch) {\n            insert = false;\n            break;\n          }\n        }\n        if (insert) {\n          sb.append(ch);\n        }\n      }\n    } else {\n      for (Character chr : seenSet) {\n        sb.append(chr.charValue());\n      }\n    }\n    // and add end ones\n    sb.append(endChars, 0, endUpto);\n\n    if (knownLCWords != null) {\n      if (!nonLetters && knownLCWords.contains(s.toLowerCase())) {\n        sb.append('k');\n      }\n    }\n    // System.out.println(s + \" became \" + sb);\n    return sb.toString();\n  }", "public synchronized static void initGlobal(ContextFactory factory)\n    {\n        if (factory == null) {\n            throw new IllegalArgumentException();\n        }\n        if (hasCustomGlobal) {\n            throw new IllegalStateException();\n        }\n        hasCustomGlobal = true;\n        global = factory;\n    }", "    public boolean isGreater(String version1, String version2) {\n        version1 = version1.replaceAll(\".online\", \"\");\n        return version1.compareTo(version2) >= 1;\n    }\n", "protected static void checkStaticIndexes(SourceRange sourceRange,\n\t\t\tOperation... operations) throws SyntaxException {\n\n\t\tfor (int i = 0; i < operations.length; i++) {\n\t\t\tif (operations[i] instanceof Element) {\n\t\t\t\ttry {\n\t\t\t\t\tTermFactory.create((Element) operations[i]);\n\t\t\t\t} catch (EvaluationException ee) {\n\t\t\t\t\tthrow SyntaxException.create(sourceRange, MSG_INVALID_TERM,\n\t\t\t\t\t\t\ti);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "public static base_response add(nitro_service client, nat64 resource) throws Exception {\n\t\tnat64 addresource = new nat64();\n\t\taddresource.name = resource.name;\n\t\taddresource.acl6name = resource.acl6name;\n\t\taddresource.netprofile = resource.netprofile;\n\t\treturn addresource.add_resource(client);\n\t}", "\tpublic void print() {\n\t\tSystem.out.println(\"Id=\" + getId());\n\t\tSystem.out.println(\"Value=\" + getValue());\n\t\tSystem.out.println(\"Type=\" + getType());\n\t\tSystem.out.println();\n\t}\n", "public static String extractDigitsFromString(final String input){\n  return input.replaceAll(\"\\\\D\",\"\");\n}\n", "private void mergeSections(){\n  if (mMergeAlgorithm == null || mNumAppsPerRow == 0) {\n    return;\n  }\n  if (!hasFilter()) {\n    int sectionAppCount=0;\n    for (int i=0; i < mSections.size() - 1; i++) {\n      SectionInfo section=mSections.get(i);\n      sectionAppCount=section.numApps;\n      int mergeCount=1;\n      while (i < (mSections.size() - 1) && mMergeAlgorithm.continueMerging(section,mSections.get(i + 1),sectionAppCount,mNumAppsPerRow,mergeCount)) {\n        SectionInfo nextSection=mSections.remove(i + 1);\n        mAdapterItems.remove(nextSection.sectionBreakItem);\n        int pos=mAdapterItems.indexOf(section.firstAppItem);\n        int nextPos=pos + section.numApps;\n        for (int j=nextPos; j < (nextPos + nextSection.numApps); j++) {\n          AdapterItem item=mAdapterItems.get(j);\n          item.sectionInfo=section;\n          item.sectionAppIndex+=section.numApps;\n        }\n        pos=mAdapterItems.indexOf(nextSection.firstAppItem);\n        for (int j=pos; j < mAdapterItems.size(); j++) {\n          AdapterItem item=mAdapterItems.get(j);\n          item.position--;\n        }\n        section.numApps+=nextSection.numApps;\n        sectionAppCount+=nextSection.numApps;\n        if (DEBUG) {\n          Log.d(TAG,\"Merging: \" + nextSection.firstAppItem.sectionName + \" to \"+ section.firstAppItem.sectionName+ \" mergedNumRows: \"+ (sectionAppCount / mNumAppsPerRow));\n        }\n        mergeCount++;\n      }\n    }\n  }\n}\n", "public boolean isInHeadersTransition ( ) { return mHeadersTransition != null ; }", "public void marshall(TrafficRoute trafficRoute, ProtocolMarshaller protocolMarshaller) {\n\n        if (trafficRoute == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(trafficRoute.getListenerArns(), LISTENERARNS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "@Override\n    public UpdateTrustResult updateTrust(UpdateTrustRequest request) {\n        request = beforeClientExecution(request);\n        return executeUpdateTrust(request);\n    }", "\tpublic void updateTabTitle() {\n\t\tview.updateTabTitle();\n\t}\n", "private void closeStreams(Closeable... streams){\n  if (null != streams) {\n    for (    Closeable stream : streams) {\n      if (null != stream) {\n        try {\n          stream.close();\n        }\n catch (        IOException e) {\n          LOG.error(\"Error while closing stream\" + stream);\n        }\n      }\n    }\n  }\n}\n", "@SafeVarargs public static <E extends Enum<E>>EnumSet<E> of(E start,E... others){\n  EnumSet<E> set=of(start);\n  for (  E e : others) {\n    set.add(e);\n  }\n  return set;\n}\n", "public String html() {\n        StringBuilder sb = StringUtil.borrowBuilder();\n        try {\n            html(sb, (new Document(\"\")).outputSettings()); // output settings a bit funky, but this html() seldom used\n        } catch (IOException e) { // ought never happen\n            throw new SerializationException(e);\n        }\n        return StringUtil.releaseBuilder(sb);\n    }", "\tpublic String __getitem__(String key) {\n\t\treturn getProperty(key);\n\t}\n", "private static Definition inputFromXml(String defxml) throws IOException, JAXBException\n   {\n      JAXBContext context = JAXBContext.newInstance(\"org.ironjacamar.codegenerator\");\n      Unmarshaller unmarshaller = context.createUnmarshaller();\n\n      return (Definition) unmarshaller.unmarshal(new File(defxml));\n   }", "public static double cosAngle(NumberVector v1, NumberVector v2) {\n    // Java Hotspot appears to optimize these better than if-then-else:\n    return v1 instanceof SparseNumberVector ? //\n        v2 instanceof SparseNumberVector ? //\n            angleSparse((SparseNumberVector) v1, (SparseNumberVector) v2) : //\n            angleSparseDense((SparseNumberVector) v1, v2) : //\n        v2 instanceof SparseNumberVector ? //\n            angleSparseDense((SparseNumberVector) v2, v1) : //\n            angleDense(v1, v2);\n  }", "@Override public void doEditChartProperties(){\n  ChartEditor editor=ChartEditorManager.getChartEditor(this.chart);\n  int result=JOptionPane.showConfirmDialog(this,editor,localizationResources.getString(\"Chart_Properties\"),JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);\n  if (result == JOptionPane.OK_OPTION) {\n    editor.updateChart(this.chart);\n  }\n}\n", "public static IsGreaterThanOrEqual isGreaterThanOrEqual(ComparableExpression<Number> left, ComparableExpression<Number> right) {\n        return new IsGreaterThanOrEqual(left, right);\n    }", "public void setMaxBatchDeleteSize(int size) {\n    Preconditions.checkArgument(size > 0, \"size should be positive, got\" + size);\n    Preconditions.checkArgument(size <= DEFAULT_MAX_BATCH_DELETE_SIZE,\n        \"size should <= \" + DEFAULT_MAX_BATCH_DELETE_SIZE + \" got \" + size);\n    this.batchDeleteSize = size;\n  }", "@NonNull\n  public final <X> GenericType<T> where(\n      @NonNull GenericTypeParameter<X> freeVariable, @NonNull Class<X> actualType) {\n    return where(freeVariable, GenericType.of(actualType));\n  }", "    public boolean isValidChild(Component component) {\n        return false;\n    }\n", "\tpublic void removeResolution(String name) {\n\t\tfor(Resolution r: resolutions) {\n\t\t\tif(r.getName().equals(name)) {\n\t\t\t\tresolutions.remove(r);\n\t\t\t\t\n\t\t\t\tsetChanged();\n\t\t\t\tnotifyObservers(new RemoveResolution(r));\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n", "protected String locationToUrl ( String aLocation ) throws MalformedURLException { String location = aLocation ; if ( isUnmarkedFileLocation ( aLocation ) ) { location = new File ( location ) . toURI ( ) . toURL ( ) . toString ( ) ; } else if ( location .", "@Override\n    public void visitCode(Code obj) {\n        stack.resetForMethodEntry(this);\n        nodeCreations.clear();\n        nodeStores.clear();\n        super.visitCode(obj);\n\n        BitSet reportedPCs = new BitSet();\n        for (Integer pc : nodeCreations.values()) {\n            if (!reportedPCs.get(pc.intValue())) {\n                bugReporter.reportBug(new BugInstance(this, BugType.ODN_ORPHANED_DOM_NODE.name(), NORMAL_PRIORITY).addClass(this).addMethod(this)\n                        .addSourceLine(this, pc.intValue()));\n                reportedPCs.set(pc.intValue());\n            }\n        }\n        for (Integer pc : nodeStores.values()) {\n            if (!reportedPCs.get(pc.intValue())) {\n                bugReporter.reportBug(new BugInstance(this, BugType.ODN_ORPHANED_DOM_NODE.name(), NORMAL_PRIORITY).addClass(this).addMethod(this)\n                        .addSourceLine(this, pc.intValue()));\n                reportedPCs.set(pc.intValue());\n            }\n        }\n    }", "    public void addAttribute(String name, byte[] contents) {\n\tif (unknownAttributes == null)\n\t    unknownAttributes = new SimpleMap();\n\tunknownAttributes.put(name, contents);\n    }\n", "    public boolean getDirection() {\n        if (m_counter != null) {\n            return m_counter.getDirection();\n        } else {\n            boolean value = m_encoder.readOutput_Direction();\n            return value;\n        }\n    }\n", "    public void removeOPC2OutStatusListener(OPCBkManagerStatusListener l) {\n        synchronized (statusListeners) {\n            statusListeners.remove(l);\n        }\n    }\n", "\tpublic boolean isIndirect() {\n\t\treturn isIndirectReference() || number > -1;\n\t}\n", "public int viewToModel(float x,float y,Shape a,Position.Bias[] bias){\n  return m_view.viewToModel(x,y,a,bias);\n}\n", "    private boolean isGrouping(TextSymbolizer symbolizer) {\n        String value = symbolizer.getOption(\"group\");\n\n        if (value == null) {\n            return DEFAULT_GROUP;\n        }\n\n        return value.equalsIgnoreCase(\"yes\") || value.equalsIgnoreCase(\"true\")\n        || value.equalsIgnoreCase(\"1\");\n    }\n", "void register ( RTEditTextListener listener , RTMediaFactory < RTImage , RTAudio , RTVideo > mediaFactory ) { mListener = listener ; mMediaFactory = mediaFactory ; }", "@Override\n  public <NV extends NumberVector> NV projectRenderToDataSpace(double[] v, NumberVector.Factory<NV> prototype) {\n    final int dim = v.length;\n    double[] vec = projectRenderToScaled(v);\n    // Not calling {@link #projectScaledToDataSpace} to avoid extra copy of\n    // vector.\n    for(int d = 0; d < dim; d++) {\n      vec[d] = scales[d].getUnscaled(vec[d]);\n    }\n    return prototype.newNumberVector(vec);\n  }", "public SpaceAuthority ( SpacePrivilege spacePrivilege ) { this ( spacePrivilege , null ) ; }", "@Override public boolean equals(Object obj){\n  if (obj == this) {\n    return true;\n  }\n  if (!(obj instanceof LongNeedle)) {\n    return false;\n  }\n  return super.equals(obj);\n}\n", "@Override public Dimension preferredLayoutSize(Container parent){\n  Dimension rd, mbd;\n  Insets i=rootPane.getInsets();\n  Container contentPane=rootPane.getContentPane();\n  JMenuBar menuBar=rootPane.getJMenuBar();\n  if (contentPane.isVisible()) {\n    rd=contentPane.getPreferredSize();\n  }\n else {\n    rd=new Dimension(0,contentPane.getPreferredSize().height);\n  }\n  if (menuBar != null && menuBar.isVisible()) {\n    mbd=menuBar.getPreferredSize();\n  }\n else {\n    mbd=new Dimension(0,0);\n  }\n  return new Dimension(Math.max(rd.width,mbd.width) + i.left + i.right,rd.height + mbd.height + i.top+ i.bottom);\n}\n", "  public void afterCommandReceivedHook(User user, Command command, HttpServletRequest request) {\n    \n    Map<Project, String> enableMap = new HashMap<Project, String>();\n    \n    ProjectManager manager = ProjectManager.getInstance();\n    Set<Project> projectSet = manager.getProjectsWithOwner(user);\n    \n    int x = 0;\n    \n    for (Project project : projectSet) {\n      if (\"enabled\".equals(request.getParameter(\"ProjectStatus\"))) {\n        enableMap.put(project, \"enabled\");\n      }\n      else {\n        enableMap.put(project, \"disabled\");\n      }\n//      AlertEmailManager.setEnableMap(enableMap);\n      AlertEmailManager.setEnabled(user, project, \"enabled\".equals(request.getParameter(\"ProjectStatus\")));\n      x++;\n    }\n    \n\n    \n  }\n", "private final boolean checkFloat ( float in , Condition condition ) { String value = condition . getValue ( ) ; float v ; try { v = Float . parseFloat ( value ) ; } catch ( NumberFormatException e ) { return BOOL_ ; } switch ( condition . getConditionType", "public boolean isSetMessageType(){\n  return __isset_bit_vector.get(__MESSAGETYPE_ISSET_ID);\n}\n", "public Fragment ( String aWord , String aMorpheme ) { word = aWord ; morpheme = aMorpheme ; }", "@Override\n    public void connect(String server, int port, Map<String, Object> connectionParams, IPendingServiceCallback connectCallback) {\n        connect(server, port, connectionParams, connectCallback, null);\n    }", "public Bitmap takeBite(Bitmap bitmap,float cx,float cy,float radius,int rotationDegrees){\n  Canvas c=new Canvas(bitmap);\n  Paint paint=new Paint();\n  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));\n  RectF bounds=new RectF(cx - radius,cy - radius,cx + radius,cy + radius);\n  rectF.set(bounds);\n  c.drawArc(rectF,rotationDegrees,360,true,paint);\n  int numTeeth=9;\n  int angleSlice=180 / numTeeth;\n  for (int i=0; i < numTeeth; i++) {\n    int angleStart=(angleSlice * i) + rotationDegrees;\n    double angleStartRadian=angleStart * Math.PI / 180;\n    float xStart=(float)(cx + radius * Math.cos(angleStartRadian));\n    float yStart=(float)(cy + radius * Math.sin(angleStartRadian));\n    int angleEnd=(angleSlice * (i + 1)) + rotationDegrees;\n    double angleEndRadian=angleEnd * Math.PI / 180;\n    float xEnd=(float)(cx + radius * Math.cos(angleEndRadian));\n    float yEnd=(float)(cy + radius * Math.sin(angleEndRadian));\n    float circleCenterX=DrawUtils.getPointBetweenTwoPoints(xStart,xEnd,0.5);\n    float circleCenterY=DrawUtils.getPointBetweenTwoPoints(yStart,yEnd,0.5);\n    double circumference=DrawUtils.getDistanceBetweenTwoPoints(xStart,yStart,xEnd,yEnd);\n    int num=i + 1;\n    if (num > (numTeeth / 2) + 0.5) {\n      if (num == 6)       num-=2;\n      if (num == 7)       num-=4;\n      if (num == 8)       num-=6;\n      if (num == 9)       num-=8;\n    }\n    double angleOfSmallSemiCircle=((180 / numTeeth) * num) - 10;\n    float radiusSmall=(float)(circumference / 2);\n    RectF bounds2=new RectF(circleCenterX - radiusSmall,circleCenterY - radiusSmall,circleCenterX + radiusSmall,circleCenterY + radiusSmall);\n    RectF rectTooth=new RectF();\n    rectTooth.set(bounds2);\n    int baseSmallCircleAngleStart=rotationDegrees - 90;\n    if (i > numTeeth / 2) {\n      angleOfSmallSemiCircle=90 + (90 - angleOfSmallSemiCircle);\n    }\n    float startAngle=(float)(baseSmallCircleAngleStart + angleOfSmallSemiCircle);\n    c.drawArc(rectTooth,(float)startAngle,180,true,paint);\n  }\n  return bitmap;\n}\n", "protected void handleNodeAttributes ( Object node , Map attributes ) { if ( node == null ) { return ; } for ( Closure attrDelegate : getProxyBuilder ( ) . getAttributeDelegates ( ) ) { FactoryBuilderSupport builder = this ; if ( attrDelegate . getOwner ( ", "@CheckForNull\n    private static String resolvePluginClassesDir(String bundleName, File sourceDir) {\n         if (sourceDir.listFiles() == null) {\n            FindbugsPlugin.getDefault().logException(new IllegalStateException(\"No files in the bundle!\"),\n                    \"Failed to create temporary detector package for bundle \" + sourceDir);\n            return null;\n        }\n\n        String outputDir = getBuildDirectory(bundleName, sourceDir);\n        if (outputDir.length() == 0) {\n            FindbugsPlugin.getDefault().logException(new IllegalStateException(\"No output directory in build.properties\"),\n                    \"No output directory in build.properties \" + sourceDir);\n            return null;\n        }\n\n        File classDir = new File(sourceDir, outputDir);\n\n        if (classDir.listFiles() == null) {\n            FindbugsPlugin.getDefault().logException(new IllegalStateException(\"No files in the bundle output dir!\"),\n                    \"Failed to create temporary detector package for bundle \" + sourceDir);\n            return null;\n        }\n        File etcDir = new File(sourceDir, \"etc\");\n        if (etcDir.listFiles() == null) {\n            FindbugsPlugin.getDefault().logException(new IllegalStateException(\"No files in the bundle etc dir!\"),\n                    \"Failed to create temporary detector package for bundle \" + sourceDir);\n            return null;\n        }\n        return classDir.getAbsolutePath();\n    }", "public StoppableWriteLock(ReadWriteLock lock,CancelCriterion stopper){\n  this.lock=lock.writeLock();\n  this.stopper=stopper;\n}\n", "protected void removeUnnecessaryColumns(CmsSetupDb dbCon) throws SQLException {\n\n        System.out.println(new Exception().getStackTrace()[0].toString());\n        // Get the sql queries to drop the columns\n        String dropUserInfo = readQuery(QUERY_DROP_USER_INFO_COLUMN);\n        String dropUserAddress = readQuery(QUERY_DROP_USER_ADDRESS_COLUMN);\n        String dropUserDescription = readQuery(QUERY_DROP_USER_DESCRIPTION_COLUMN);\n        String dropUserType = readQuery(QUERY_DROP_USER_TYPE_COLUMN);\n\n        // execute the queries to drop the columns, if they exist\n        if (dbCon.hasTableOrColumn(CMS_USERS_TABLE, USER_INFO)) {\n            dbCon.updateSqlStatement(dropUserInfo, null, null);\n        } else {\n            System.out.println(\"no column \" + USER_INFO + \" in table \" + CMS_USERS_TABLE + \" found\");\n        }\n        if (dbCon.hasTableOrColumn(CMS_USERS_TABLE, USER_ADDRESS)) {\n            dbCon.updateSqlStatement(dropUserAddress, null, null);\n        } else {\n            System.out.println(\"no column \" + USER_ADDRESS + \" in table \" + CMS_USERS_TABLE + \" found\");\n        }\n        if (dbCon.hasTableOrColumn(CMS_USERS_TABLE, USER_DESCRIPTION)) {\n            dbCon.updateSqlStatement(dropUserDescription, null, null);\n        } else {\n            System.out.println(\"no column \" + USER_DESCRIPTION + \" in table \" + CMS_USERS_TABLE + \" found\");\n        }\n        if (dbCon.hasTableOrColumn(CMS_USERS_TABLE, USER_TYPE)) {\n            dbCon.updateSqlStatement(dropUserType, null, null);\n        } else {\n            System.out.println(\"no column \" + USER_TYPE + \" in table \" + CMS_USERS_TABLE + \" found\");\n        }\n    }", "\tpublic void setDataProvider(IDataProvider aDataProvider) {\n\t\tthis.dataProvider = aDataProvider;\n\t\tthis.dataProvider.setCallback(this);\n\t}\n", "public static JsonNode.Type getMapValueType(JsonNode schema) {\n        JsonNode.Type type = JsonNode.Type.valueOf(schema.get(\"type\").asString().toUpperCase());\n        JsonNode child;\n        if (type == JsonNode.Type.OBJECT && (child = schema.get(\"additionalProperties\")) != null) {\n            return getFirstNonArrayValueType(child);\n        }\n        return null;\n    }", "public SyncHttpClient ( boolean fixNoHttpResponseException , int httpPort , int httpsPort ) { super ( fixNoHttpResponseException , httpPort , httpsPort ) ; }", "public boolean onRunningTick(ItemStack aStack){\n  if (mEUt > 0) {\n    addEnergyOutput(((long)mEUt * mEfficiency) / 10000);\n    return true;\n  }\n  if (mEUt < 0) {\n    if (!drainEnergyInput(((long)-mEUt * 10000) / Math.max(1000,mEfficiency))) {\n      stopMachine();\n      return false;\n    }\n  }\n  return true;\n}\n", "public String readLine() throws IOException {\n  return keepCarriageReturns ? readUntilNewline() : reader.readLine();\n}\n", "protected List<ColumnDef> getIndexes() throws IOException\n    {\n        CfDef cfdef = getCfInfo(loadSignature).cfDef;\n        List<ColumnDef> indexes = new ArrayList<ColumnDef>();\n        for (ColumnDef cdef : cfdef.column_metadata)\n        {\n            if (cdef.index_type != null)\n                indexes.add(cdef);\n        }\n        return indexes;\n    }", "IComment editGlobalComment ( final IComment comment , final String commentText ) throws CouldntSaveDataException ;", "public static String createRegionName(String regionName){\n  String result=regionName.replace('/','#');\n  return result;\n}\n", "private void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject ( ) ; if ( lineno < NUM_ ) throw new InvalidObjectException ( STR_ + STR_ ) ; if ( override < NUM_ ) throw new InvalidObjectException ( STR_ + STR_ ) ; if ( description == null ) throw new InvalidObjectException ( STR_ + STR_ ) ; if ( t instanceof Error ) throw new InvalidObjectException ( STR_ + STR_ ) ; }", "public void callRpcChecked(S request, RpcResponseHandler<? extends T> responseHandler) throws IOException {\n        callRpcChecked(request, responseHandler, chooseIP(request.getIpKey()));\n    }", "void onBoardTranslationX ( NotificationBoard board , float x ) ;", "\tpublic Object getValueAt(int row, int col) {\n\n\t\ttry {\n\t\t\tList users = user.getAllUsers();\n\n\t\t\tUserVO user = (UserVO) users.get(row);\n\n\t\t\tif (col == 0) {\n\t\t\t\treturn user.getId();\n\t\t\t} else if (col == 1) {\n\t\t\t\treturn user.getFirstName() + \" \" + user.getLastName();\n\t\t\t}\n\t\t\telse if (col == 2) {\n\t\t\t\tString companyName = \"\";\n\t\t\t\t\n\t\t\t\tif (user.getCompanyId() != -1) {\n\t\t\t\t\tCompanyVO companyVO = \n\t\t\t\t\t\tcompany.get(user.getCompanyId());\n\t\t\t\t\n\t\t\t\t\tcompanyName = companyVO.getName();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn companyName;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn user.getPassword();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n", "public static int[] renderedImage2IntegerArray( RenderedImage renderedImage, double multiply ) {\n        int width = renderedImage.getWidth();\n        int height = renderedImage.getHeight();\n\n        int[] values = new int[width * height];\n        RandomIter imageIter = RandomIterFactory.create(renderedImage, null);\n        int index = 0;;\n        for( int x = 0; x < width; x++ ) {\n            for( int y = 0; y < height; y++ ) {\n                double sample = imageIter.getSampleDouble(x, y, 0);\n                sample = sample * multiply;\n                values[index++] = (int) sample;\n            }\n        }\n        imageIter.done();\n        return values;\n    }", "\tpublic BoardBlock createBlock(int x, int y) {\n\t\tVector3f blockPos = new Vector3f(pos);\n\t\tblockPos.x = blockWidthPlusBlockGap\n\t\t\t\t* (x - numBoardBlocksWidthDiv2 + 0.5f);\n\t\tblockPos.z = blockHeightPlusBlockGap\n\t\t\t\t* (y - numBoardBlocksHeightDiv2 + 0.5f);\n\t\tblocks[y * numBoardBlocksWidth + x] = new BoardBlock(\"BoardBlock\" + x\n\t\t\t\t+ \"x\" + y, blockPos, blockWidth, blockHeight);\n\t\treturn blocks[y * numBoardBlocksWidth + x];\n\t}\n", "@Deprecated @Override public void recycle(){\n  LOG.trace(\"enter EntityEnclosingMethod.recycle()\");\n  clearRequestBody();\n  requestContentLength=InputStreamRequestEntity.CONTENT_LENGTH_AUTO;\n  repeatCount=0;\n  chunked=false;\n  super.recycle();\n}\n", "public static ColorOwn forString(String colorString,int transparency){\n  boolean error=false;\n  ColorOwn returnColor=null;\n  if (colorString == null) {\n    error=true;\n  }\n else {\n    for (    Entry<String,ColorOwn> c : COLOR_MAP.entrySet()) {\n      if (colorString.equalsIgnoreCase(c.getKey())) {\n        returnColor=c.getValue();\n        break;\n      }\n    }\n    if (returnColor == null) {\n      try {\n        returnColor=new ColorOwn(colorString);\n      }\n catch (      NumberFormatException e) {\n        error=true;\n      }\n    }\n    if (returnColor != null) {\n      returnColor=returnColor.transparency(transparency);\n    }\n  }\n  if (error) {\n    throw new StyleException(\"value must be a \" + EXAMPLE_TEXT);\n  }\n  return returnColor;\n}\n", "@Override\n    public void visitCode(Code obj) {\n        stack.resetForMethodEntry(this);\n        Method m = getMethod();\n        if (Values.CONSTRUCTOR.equals(m.getName())) {\n            for (String parmSig : SignatureUtils.getParameterSignatures(m.getSignature())) {\n                if (SignatureUtils.classToSignature(SLF4J_LOGGER).equals(parmSig) || SignatureUtils.classToSignature(LOG4J_LOGGER).equals(parmSig)\n                        || SignatureUtils.classToSignature(LOG4J2_LOGGER).equals(parmSig) || SignatureUtils.classToSignature(COMMONS_LOGGER).equals(parmSig)) {\n                    bugReporter.reportBug(new BugInstance(this, BugType.LO_SUSPECT_LOG_PARAMETER.name(), NORMAL_PRIORITY).addClass(this).addMethod(this));\n                }\n            }\n        }\n\n        isStaticInitializer = Values.STATIC_INITIALIZER.equals(m.getName());\n        super.visitCode(obj);\n    }", "\tpublic boolean encrypt() {\n\t\treturn operationInput.getContent();\n\t}\n", "private String resolveEndpoint(IBindingSet bs){\n  String endpointStr=resolveAsString(endpoint,bs);\n  if (endpointStr == null || endpointStr.isEmpty()) {\n    endpointStr=defaults.getDefaultEndpoint();\n  }\n  if (endpointStr != null && !endpointStr.isEmpty()) {\n    return endpointStr;\n  }\n else {\n    throw new FulltextSearchException(FulltextSearchException.NO_ENDPOINT_SPECIFIED);\n  }\n}\n", "    protected static abstract class JPrimitiveType implements JType {\n\n        private Identifier primitiveTypeIdentifier;\n        private String relatedInternal;\n\n        public Identifier getIdentifier() {\n            if (primitiveTypeIdentifier == null || ! getInternalIdentifier().equals(relatedInternal) ) {\n                relatedInternal = getInternalIdentifier();\n                primitiveTypeIdentifier = IdentifierBuilder\n                        .create()\n                        .pushFragment( relatedInternal, PRIMITIVE_KEY)\n                        .setPrefix(CODER_URI)\n                        .build();\n            }\n            return primitiveTypeIdentifier;\n        }\n\n        public JType cloneType() {\n            return this;\n        }\n\n        public String toString() {\n            return getInternalIdentifier();\n        }\n        \n    }\n", "private boolean hasTriggerMisfired ( Trigger trigger ) { long now = System . currentTimeMillis ( ) ; Date nextFireTime = trigger . getNextFireTime ( ) ; if ( nextFireTime . getTime ( ) <= ( now - misfireThreshold ) ) { return BOOL_ ; } return BOOL_ ; }", "   public void limitAutoscaleY(double floor, double ceil) {\n      drawingPanel.limitAutoscaleY(floor, ceil);\n   }\n", "    public void setFrom(String address) {\n        if (this.from != null) {\n            throw new BuildException(\"Emails can only be from one address\");\n        }\n        this.from = new EmailAddress(address);\n    }\n", "public void marshall(GetAppsRequest getAppsRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (getAppsRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(getAppsRequest.getPageSize(), PAGESIZE_BINDING);\n            protocolMarshaller.marshall(getAppsRequest.getToken(), TOKEN_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "private void putParametersFromS3(String s3BucketName,String s3ObjectKey,Map<String,Object> parameters){\n  if (s3BucketName != null && s3ObjectKey != null) {\n    S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=storageHelper.getS3FileTransferRequestParamsDto();\n    Properties properties=s3Dao.getProperties(s3BucketName,s3ObjectKey,s3FileTransferRequestParamsDto);\n    parameters.putAll(javaPropertiesHelper.toMap(properties));\n  }\n}\n", "    public void setWidth(double width){\n        if(width <= 0){\n            throw new IllegalArgumentException(\"setWidth: positive value expected\");\n        }\n        this.width = width;\n    }\n", "    public void setSheetIDX(Index idx){\n        idx.setSheet(this);\n        myidx = idx;\n    }\n", "public void addAttachment(final File file) throws MessagingException\n\t{\n\t\tDataSource dataSource;\n\t\tdataSource = new FileDataSource(file);\n\t\tfinal DataHandler dataHandler = new DataHandler(dataSource);\n\t\taddAttachment(dataHandler, file.getName());\n\t}", "public R paramsToMultipartEntity ( ) { try { mHttpEntity = createMultipartEntity ( BOOL_ ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return ( R ) this ; }", "public void removeTopItem(int id){\n  MenuItem item=getItemById(id);\n  items.remove(id);\n  topItems.remove(item);\n  containerTop.removeAllViews();\n  for (  MenuItem menuItem : topItems)   containerTop.addView(menuItem);\n  configureTopAnimations();\n}\n", "private String checkLogin(Properties ctx,int AD_User_ID,int AD_Role_ID,int AD_Client_ID,int AD_Org_ID,int M_Warehouse_ID){\n  String loginInfo=null;\n  String sql=\"SELECT u.Name || '@' || c.Name || '.' || o.Name || ' [' || INITCAP(USER) || ']' AS Text \" + \"FROM AD_User u, AD_Client c, AD_Org o, AD_User_Roles ur \" + \"WHERE u.AD_User_ID=?\"+ \" AND c.AD_Client_ID=?\"+ \" AND o.AD_Org_ID=?\"+ \" AND ur.AD_Role_ID=?\"+ \" AND ur.AD_User_ID=u.AD_User_ID\"+ \" AND (o.AD_Client_ID = 0 OR o.AD_Client_ID=c.AD_Client_ID)\"+ \" AND c.AD_Client_ID IN (SELECT AD_Client_ID FROM AD_Role_OrgAccess ca WHERE ca.AD_Role_ID=ur.AD_Role_ID)\"+ \" AND o.AD_Org_ID IN (SELECT AD_Org_ID FROM AD_Role_OrgAccess ca WHERE ca.AD_Role_ID=ur.AD_Role_ID)\";\n  try {\n    PreparedStatement pstmt=DB.prepareStatement(sql,null);\n    pstmt.setInt(1,AD_User_ID);\n    pstmt.setInt(2,AD_Client_ID);\n    pstmt.setInt(3,AD_Org_ID);\n    pstmt.setInt(4,AD_Role_ID);\n    ResultSet rs=pstmt.executeQuery();\n    if (rs.next())     loginInfo=rs.getString(1);\n    rs.close();\n    pstmt.close();\n  }\n catch (  SQLException e) {\n    log.log(Level.SEVERE,sql,e);\n  }\n  if (loginInfo == null)   return null;\n  KeyNamePair org=new KeyNamePair(AD_Org_ID,String.valueOf(AD_Org_ID));\n  KeyNamePair wh=null;\n  if (M_Warehouse_ID > 0)   wh=new KeyNamePair(M_Warehouse_ID,String.valueOf(M_Warehouse_ID));\n  Timestamp date=null;\n  String printer=null;\n  Login login=new Login(ctx);\n  login.loadPreferences(org,wh,date,printer);\n  return loginInfo;\n}\n", "protected void addForm(Element e,XhtmlForm f){\n  if (forms == null) {\n    forms=new LinkedHashMap();\n  }\n  forms.put(e,f);\n}\n", "private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new StreamCorruptedException(\"Illegal Load: \" + loadFactor);\n  int origlength=s.readInt();\n  int elements=s.readInt();\n  if (elements < 0)   throw new StreamCorruptedException(\"Illegal # of Elements: \" + elements);\n  origlength=Math.max(origlength,(int)(elements / loadFactor) + 1);\n  int length=(int)((elements + elements / 20) / loadFactor) + 3;\n  if (length > elements && (length & 1) == 0)   length--;\n  length=Math.min(length,origlength);\n  table=new Entry<?,?>[length];\n  threshold=(int)Math.min(length * loadFactor,MAX_ARRAY_SIZE + 1);\n  count=0;\n  for (; elements > 0; elements--) {\n    @SuppressWarnings(\"unchecked\") K key=(K)s.readObject();\n    @SuppressWarnings(\"unchecked\") V value=(V)s.readObject();\n    reconstitutionPut(table,key,value);\n  }\n}\n", "public int createBinomial(final int n,final double p){\n  double value=p;\n  final StringBuilder bits=new StringBuilder(64);\n  double bitValue=0.5d;\n  while (value > 0) {\n    if (value >= bitValue) {\n      bits.append('1');\n      value-=bitValue;\n    }\n else {\n      bits.append('0');\n    }\n    bitValue/=2;\n  }\n  final BitString pBits=new BitString(bits.toString());\n  int trials=n;\n  int totalSuccesses=0;\n  int pIndex=pBits.getLength() - 1;\n  while (trials > 0 && pIndex >= 0) {\n    final BitString bs=new BitString(trials,generator);\n    final int successes=bs.countSetBits();\n    trials-=successes;\n    if (pBits.getBit(pIndex)) {\n      totalSuccesses+=successes;\n    }\n    --pIndex;\n  }\n  return totalSuccesses;\n}\n", "public String invertSelectionTipText(){\n  return \"Set attribute selection mode. If false, only selected\" + \" (numeric) attributes in the range will be 'nominalized'; if\" + \" true, only non-selected attributes will be 'nominalized'.\";\n}\n", "private void disconnect(boolean finalize){\n  if (isDiscarded() && connection == null) {\n    return;\n  }\n  setDiscarded(true);\n  if (connection != null) {\n    try {\n      parent.disconnectEvent(this,finalize);\n      if (xaConnection == null) {\n        conn", "@SuppressWarnings(\"unchecked\")\n\tpublic static <K, E extends Number> NumberMap<K, E> newNumberMap(Class<E> elementType) {\n\t\tif (elementType == BigDecimal.class) return (NumberMap<K, E>) newBigDecimalMap();\n\t\tif (elementType == BigInteger.class) return (NumberMap<K, E>) newBigIntegerMap();\n\t\tif (elementType == Byte.class) return (NumberMap<K, E>) newByteMap();\n\t\tif (elementType == Long.class) return (NumberMap<K, E>) newLongMap();\n\t\tif (elementType == Double.class) return (NumberMap<K, E>) newDoubleMap();\n\t\tif (elementType == Float.class) return (NumberMap<K, E>) newFloatMap();\n\t\tif (elementType == Integer.class) return (NumberMap<K, E>) newIntegerMap();\n\t\tif (elementType == Short.class) return (NumberMap<K, E>) newShortMap();\n\t\telse throw new UnsupportedOperationException();\n\t}", "public void peek(byte[] buf) throws BufferUnderflowException {\n  peek(buf,0,buf.length);\n}", "private void updateDialog(final File directory){\n  final InstallationState cppState=CBinExportInstallationChecker.getState(directory);\n  m_cppStateLabel.setText(getText(cppState));\n  m_cppButton.setEnabled(cppState == InstallationState.NotInstalled);\n}\n", "\tpublic double pValue(double value){\n\t\t//has the histogram been totaled?\n\t\tif (totalBinHits == -1) getTotalBinCounts();\n\t\tdouble total;\n\t\tif (value >=0) total= numberBinHitsToRightAndIncludingValue(value);\n\t\telse total = numberBinHitsToLeftAndIncludingValue(value);\n\t\tif (total == 0) return 1.0/totalBinHits;\n\t\treturn total/totalBinHits;\n\t}\n", "public int writeAnnotationSet(AnnotationSet annotationSet){\n  int off=data.position();\n  writeInt(annotationSet.annotationOffsets.length);\n  for (  int annotationOffset : annotationSet.annotationOffsets) {\n    writeInt(annotationOffset);\n  }\n  return off;\n}\n", "public static <S extends Storable> OrderingList<S> get(List<OrderedProperty<S>> orderings) {\r\n        OrderingList<S> list = emptyList();\r\n        if (orderings != null && orderings.size() > 0) {\r\n            for (OrderedProperty<S> property : orderings) {\r\n                list = list.concat(property);\r\n            }\r\n        }\r\n        return list;\r\n    }", "private double unQuantize(int x){\n  if (x == 0) {\n    return 0;\n  }\n else {\n    return ((quantizationBase + 1) * Math.pow(quantizationBase,x - 1) - 1) / 2;\n  }\n}\n", "    public void addBondSet(CMLBondSet bondSet) throws RuntimeException {\n        addBonds(bondSet.getBonds());\n    }\n", "private boolean isInterfaceAllowed(NetworkInterface ni) throws SocketException {\n  return !ni.isLoopback() && !ni.isPointToPoint() && !ni.isVirtual()&& ni.isUp();\n}\n", "public CustomizerUI(){\n  initComponents();\n  initDefaults();\n  update();\n}\n", "public synchronized void notifyConnected(String title){\n  connectedServerTitles.add(title);\n  updateNotification(getString(R.string.notification_connected,title),null,false,false,false);\n}\n", "private void clearCurrentDirectory(){\n  File directory=new File(getCurrentDirectory());\n  if (directory.exists() && directory.isDirectory()) {\n    String[] listing=directory.list();\n    for (    String aListing : listing) {\n      File file=new File(getCurrentDirectory(),aListing);\n      boolean deleted=file.delete();\n    }\n  }\n  if (!directory.exists()) {\n    directory.mkdirs();\n  }\n}\n", "private void triggerIpLeaseDeleteService(final State current,List<DhcpSubnetService.State> dhcpSubnetList){\n  if (dhcpSubnetList.size() == 0) {\n    ServiceUtils.logInfo(this,\"No DhcpSubnets found any more.\");\n    sendStageProgressPatch(current);\n    return;\n  }\n  for (  DhcpSubnetService.State state : dhcpSubnetList) {\n    triggerIpLeaseDeleteService(ServiceUtils.getIDFromDocumentSelfLink(state.documentSelfLink));\n  }\n  sendStageProgressPatch(current);\n}\n", "\tpublic String getCreationDate() {\n\t\tString t = doc.get(\"creationdate\");\n\n\t\tif (t == null)\n\t\t\treturn \"\";\n\n\t\ttry {\n\t\t\tlong modTime = DateField.stringToTime(t);\n\t\t\tSimpleDateFormat df = new SimpleDateFormat(\"MMM' 'dd', 'yyyy\");\n\t\t\treturn df.format(new Date(modTime));\n\t\t} catch (Throwable e) {\n\t\t\tprtlnErr(\"Error getCreationDate(): \" + e);\n\t\t\treturn \"\";\n\t\t}\n\t}\n", "\tpublic void writeSchema() {\n\t\tLog.debug(\"MappingModel: writeSchema\");\n\t\tSchemaWriter cw = null;\n\t\tif (getSchemaFileFormat().equals(\"Oracle\")) {\n\t\t\tcw = new OracleSchemaWriter(this);\n\t\t}\n\t\tif (getSchemaFileFormat().equals(\"Postgres\")) {\n\t\t\tcw = new PostgresSchemaWriter(this);\n\t\t}\n\t\ttry {\n\t\t\tcw.writeSchema(schemaFile);\n\t\t} catch(IOException io) {\n\t\t\tLog.error(\"MappingModel: writeSchema IOException \" + io);\n\t\t}\n\t\tLog.debug(\"MappingModel: writeSchema done\");\n\t}\n", "public Flag registerRequired(final char nameChar,final String name,final Class<?> type,final String usage,final String description){\n  return registerRequired(Character.valueOf(nameChar),name,type,usage,description);\n}\n", "\tpublic void writeToXML(String filename) throws DITAOTException{\n\t\tFileOutputStream os=null;\n\t\t//new dita.xml file\n        try{\n        \tos=new FileOutputStream(filename);\n        \tprop.storeToXML(os, null);\n        \t//Added by William on 2010-07-23 for bug:3033141 start\n        \tos.flush();\n        \tos.close();\n        \t//Added by William on 2010-07-23 for bug:3033141 end\n        }catch(IOException ioe){\n        \tthrow new DITAOTException(ioe);\n        }\n\t}\n", "public ValidationException(File file,String message){\n  super(MessageFormat.format(\"{0} ({1})\",(message == null ? \"file validation failed\" : message),file));\n  this.file=file;\n}\n", "public void init ( ) throws ServletException { }", "public static void post(final SysEvent ev,\n                          final String queueName,\n                          final Properties pr) throws NotificationException {\n    getHandler(queueName, pr).post(ev);\n  }", "public static AbstractPacket createInstance( byte type )\n    {\n        switch (type)\n        {\n            case NOTIFICATION:                return new NotificationPacket();\n            case R_ERROR:                     return new ErrorResponse();\n            case Q_ACKNOWLEDGE:               return new AcknowledgeQuery();\n            case R_ACKNOWLEDGE:               return new AcknowledgeResponse();\n            case Q_CLOSE_SESSION:             return new CloseSessionQuery();\n            case R_CLOSE_SESSION:             return new CloseSessionResponse();\n            case Q_COMMIT:                    return new CommitQuery();\n            case R_COMMIT:                    return new CommitResponse();\n            case Q_CREATE_CONSUMER:           return new CreateConsumerQuery();\n            case R_CREATE_CONSUMER:           return new CreateConsumerResponse();\n            case Q_CREATE_DURABLE_SUBSCRIBER: return new CreateDurableSubscriberQuery();\n            case Q_CREATE_SESSION:            return new CreateSessionQuery();\n            case R_CREATE_SESSION:            return new CreateSessionResponse();\n            case Q_CREATE_TEMP_QUEUE:         return new CreateTemporaryQueueQuery();\n            case R_CREATE_TEMP_QUEUE:         return new CreateTemporaryQueueResponse();\n            case Q_CREATE_TEMP_TOPIC:         return new CreateTemporaryTopicQuery();\n            case R_CREATE_TEMP_TOPIC:         return new CreateTemporaryTopicResponse();\n            case Q_DELETE_TEMP_QUEUE:         return new DeleteTemporaryQueueQuery();\n            case R_DELETE_TEMP_QUEUE:         return new DeleteTemporaryQueueResponse();\n            case Q_DELETE_TEMP_TOPIC:         return new DeleteTemporaryTopicQuery();\n            case R_DELETE_TEMP_TOPIC:         return new DeleteTemporaryTopicResponse();\n            case Q_GET:                       return new GetQuery();\n            case R_GET:                       return new GetResponse();\n            case Q_OPEN_CONNECTION:           return new OpenConnectionQuery();\n            case R_OPEN_CONNECTION:           return new OpenConnectionResponse();\n            case Q_PUT:                       return new PutQuery();\n            case R_PUT:                       return new PutResponse();\n            case Q_RECOVER:                   return new RecoverQuery();\n            case R_RECOVER:                   return new RecoverResponse();\n            case Q_ROLLBACK:                  return new RollbackQuery();\n            case R_ROLLBACK:                  return new RollbackResponse();\n            case Q_SET_CLIENT_ID:             return new SetClientIDQuery();\n            case R_SET_CLIENT_ID:             return new SetClientIDResponse();\n            case Q_START_CONNECTION:          return new StartConnectionQuery();\n            case R_START_CONNECTION:          return new StartConnectionResponse();\n            case Q_STOP_CONNECTION:           return new StopConnectionQuery();\n            case R_STOP_CONNECTION:           return new StopConnectionResponse();\n            case Q_CREATE_BROWSER:            return new CreateBrowserQuery();\n            case R_CREATE_BROWSER:            return new CreateBrowserResponse();\n            case Q_CREATE_BROWSER_ENUM:       return new QueueBrowserGetEnumerationQuery();\n            case R_CREATE_BROWSER_ENUM:       return new QueueBrowserGetEnumerationResponse();\n            case Q_BROWSER_ENUM_FETCH:        return new QueueBrowserFetchElementQuery();\n            case R_BROWSER_ENUM_FETCH:        return new QueueBrowserFetchElementResponse();\n            case Q_CLOSE_BROWSER:             return new CloseBrowserQuery();\n            case R_CLOSE_BROWSER:             return new CloseBrowserResponse();\n            case Q_CLOSE_BROWSER_ENUM:        return new CloseBrowserEnumerationQuery();\n            case R_CLOSE_BROWSER_ENUM:        return new CloseBrowserEnumerationResponse();\n            case Q_CLOSE_CONSUMER:            return new CloseConsumerQuery();\n            case R_CLOSE_CONSUMER:            return new CloseConsumerResponse();\n            case Q_UNSUBSCRIBE:               return new UnsubscribeQuery();\n            case R_UNSUBSCRIBE:               return new UnsubscribeResponse();\n            case Q_PREFETCH:                  return new PrefetchQuery();\n            case R_PREFETCH:                  return new PrefetchResponse();\n            case Q_PING:                      return new PingQuery();\n            case R_PING:                      return new PingResponse();\n            case Q_ROLLBACK_MESSAGE:          return new RollbackMessageQuery();\n            case R_ROLLBACK_MESSAGE:          return new RollbackMessageResponse();\n            \n            default:\n                throw new IllegalArgumentException(\"Unsupported packet type : \"+type);\n        }\n    }", "private boolean isRetryable(SdkBaseException e) {\n        if (e.getCause() instanceof IOException) {\n            return true;\n        } else if (e instanceof HttpException) {\n            // Only retry on 500s.\n            return ((HttpException) e).getStatusCode() / 100 == 5;\n        } else {\n            return false;\n        }\n    }", "\tpublic Diagnostic analyzeResourceProblems(Resource resource, Exception exception) {\n\t\tif (!resource.getErrors().isEmpty() || !resource.getWarnings().isEmpty()) {\n\t\t\tBasicDiagnostic basicDiagnostic =\n\t\t\t\tnew BasicDiagnostic\n\t\t\t\t\t(Diagnostic.ERROR,\n\t\t\t\t\t \"org.awaran.model.editor\",\n\t\t\t\t\t 0,\n\t\t\t\t\t getString(\"_UI_CreateModelError_message\", resource.getURI()),\n\t\t\t\t\t new Object [] { exception == null ? (Object)resource : exception });\n\t\t\tbasicDiagnostic.merge(EcoreUtil.computeDiagnostic(resource, true));\n\t\t\treturn basicDiagnostic;\n\t\t}\n\t\telse if (exception != null) {\n\t\t\treturn\n\t\t\t\tnew BasicDiagnostic\n\t\t\t\t\t(Diagnostic.ERROR,\n\t\t\t\t\t \"org.awaran.model.editor\",\n\t\t\t\t\t 0,\n\t\t\t\t\t getString(\"_UI_CreateModelError_message\", resource.getURI()),\n\t\t\t\t\t new Object[] { exception });\n\t\t}\n\t\telse {\n\t\t\treturn Diagnostic.OK_INSTANCE;\n\t\t}\n\t}\n", "public void visitEnum ( String name , String desc , String value ) { if ( av != null ) { av . visitEnum ( name , desc , value ) ; } }", "@Nullable public static NetworkParameters fromPmtProtocolID(String pmtProtocolId){\n  if (pmtProtocolId.equals(PAYMENT_PROTOCOL_ID_MAINNET)) {\n    return MainNetParams.get();\n  }\n else   if (pmtProtocolId.equals(PAYMENT_PROTOCOL_ID_TESTNET)) {\n    return TestNet3Params.get();\n  }\n else {\n    return null;\n  }\n}\n", "protected void closeJar ()\n    {\n        try {\n            if (_jarSource != null) {\n                _jarSource.close();\n            }\n        } catch (Exception ioe) {\n            log.warning(\"Failed to close jar file\", \"path\", _source, \"error\", ioe);\n        }\n    }", "@Override\n    public void start(boolean deliverImmediately) throws SISessionUnavailableException\n    {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.entry(tc, \"start\", new Object[] {\n                           ", "void execute ( JsonApiDocument jsonApiDocument , Set < PersistentResource > resources , Optional < MultivaluedMap < String , String > > queryParams ) ;", "public static boolean isRecognizedEncoding(String encoding)\n    {\n        EncodingInfo ei;\n\n        String normalizedEncoding = encoding.toUpperCase();\n        ei = (EncodingInfo) _encodingTableKeyJava.get(normalizedEncoding);\n        if (ei == null)\n    ", "    public double getRSqr(int r, int c) {\n        if (c <= r) {\n            return diseq[r][c];\n        } else {\n            return diseq[c][r];\n        }\n    }\n", "@SuppressWarnings(\"unused\") public static final boolean validateGroupPassword(String sGroupPassword){\n  if (sGroupPassword.length() == 0) {\n    return false;\n  }\n  return (limitPasswordToNumericCharacters && sGroupPassword.matches(\"^[0-9][0-9][0-9][0-9]$\")) || sGroupPassword.matches(\"^[0-9A-C][0-9A-C][0-9A-C][0-9A-C]$\");\n}\n", "private void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject ( ) ; try { initFromName ( getName ( ) ) ; } catch ( RuntimeException e ) { if ( e instanceof NullPointerException || e instanceof IllegalArgumentException ) { InvalidObjectException ee = new InvalidObjectException ( e . getMessage ( ) ) ; ee . initCause ( e ) ; throw ee ; } throw e ; } }", "public static void copyResourceFromClass(Class clazz,String file,File toFile) throws IOException {\n  try (InputStream ins=clazz.getResourceAsStream(clazz.getSimpleName() + \"/\" + file)){\n    if (ins == null) {\n      throw new IllegalStateException(\"Resource file \" + file + \" not found\");\n    }\n    FileUtils.copyInputStreamToFile(ins,toFile);\n  }\n }\n", "public static JavaRDD<List<Writable>> zeromeanUnitVariance(Schema schema,JavaRDD<List<Writable>> data){\n  return zeromeanUnitVariance(schema,data,Collections.<String>emptyList());\n}\n", "void imageLoaded() throws IOException {\n    for (Future<Void> task : cachingTasks) {\n      try {\n        task.get();\n      } catch (InterruptedException e) {\n        throw new IOException(\"FSDirectory cache received interruption\");\n      } catch (ExecutionException e) {\n        throw new IOException(e);\n      }\n    }\n    \n    // will not be used after startup\n    this.cachingTasks = null;\n    this.cachingExecutor.shutdownNow();\n    this.cachingExecutor = null;\n    \n    // process remaining inodes\n    for(INode inode : cachingTempQueue) {\n      cacheNameInternal(inode);\n    }\n    this.cachingTempQueue = null;\n    \n    this.imageLoaded = true;\n  }", "public BuildRun createBuildRun(String name, DateTime date) {\n        return getInstance().create().buildRun(this, name, date);\n    }", "private ReferenceType computeFirstCommonSuperclassOfDifferentDimensionArrays ( ArrayType aArrType , ArrayType bArrType ) { assert aArrType . getDimensions ( ) != bArrType . getDimensions ( ) ; boolean aBaseTypeIsPrimitive = ( aArrType . getBasicType ( ) instanceof BasicType ) ; boolean bBaseTypeIsPrimitive = ( bArrType . getBasicType ( ) instanceof BasicType ) ; if ( aBaseTypeIsPrimitive || bBaseTypeIsPrimitive ) { int minDimensions , maxDimensions ; if ( aArrType . getDimensions ( ) < bArrType . getDimensions ( ) ) { minDimensions = aArrType . getDimensions ( ) ; maxDimensions = bArrType . getDimensions ( ) ; } else { minDimensions = bArrType . getDimensions ( ) ; maxDimensions = aArrType . getDimensions ( ) ; } if ( minDimensions == NUM_ ) { return Type . OBJECT ; } else { return new ArrayType ( Type . OBJECT , maxDimensions - minDimensions ) ; } } else { return new ArrayType ( Type . OBJECT , Math . min ( aArrType . getDimensions ( ) , bArrType . getDimensions ( ) ) ) ; } }", "void clearUserDeviceLists ( ) ;", "private String getStringValue(XmlNode node) {\n        switch (node.getType()) {\n            case XmlNode.ATTRIBUTE_NODE:\n            case XmlNode.TEXT_NODE:\n                return node.getValue();\n            default: {\n                StringBuilder builder = new StringBuilder();\n                this.transformer.transform(node, builder);\n                return builder.toString();\n            }\n        }\n    }", "@Override protected void paintComponent(final Graphics g){\n  super.paintComponent(g);\n  if (hasFocus()) {\n    g.setColor(JBColor.black);\n    DarculaUIUtil.paintFocusRing(g,0,0,getWidth(),getHeight());\n  }\n}\n", "T process ( FormulaNode node ) ;", "public OverlayPanel(SettingsManager settingsManager,ChannelModel channelModel){\n  mSettingsManager=settingsManager;\n  if (mSettingsManager != null) {\n    mSettingsManager.addListener(this);\n  }\n  mChannelModel=channelModel;\n  if (mChannelModel != null) {\n    mChannelModel.addListener(this);\n  }\n  addComponentListener(mLabelSizeMonitor);\n  setOpaque(false);\n  setColors();\n}\n", "public static String gensalt(int log_rounds,SecureRandom random){\n  StringBuilder rs=new StringBuilder();\n  byte rnd[]=new byte[BCRYPT_SALT_LEN];\n  random.nextBytes(rnd);\n  rs.append(\"$2a$\");\n  if (log_rounds < 10)   rs.append(\"0\");\n  if (log_rounds > 30) {\n    throw new IllegalArgumentException(\"log_rounds exceeds maximum (30)\");\n  }\n  rs.append(Integer.toString(log_rounds));\n  rs.append(\"$\");\n  rs.append(encode_base64(rnd,rnd.length));\n  return rs.toString();\n}\n", "    public Rectangle2D draw(Graphics2D g2, Rectangle2D available) {\n\n        return draw(g2, available, (getAnchor() & HORIZONTAL) != 0, (getAnchor() & INVERTED) != 0);\n\n    }\n", "private static Runnable nextTask() {\r\n\t\tsynchronized (lock) {\r\n\t\t\t// Block until we have another object in the queue to execute.\r\n\t\t\twhile (taskList.isEmpty()) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tlock.wait();\r\n\t\t\t\t} catch (InterruptedException ie) {\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn (Runnable) taskList.removeLast();\r\n\t\t}\r\n\t}", "public DatabaseDownException ( final Exception ex , final String dbName , final String host , final int port ) { super ( ex , host , port ) ; this . dbName = dbName ; }", "public void create(String name,boolean expectedToPass,Object... args){\n  list.add(new Parameterization(name,expectedToPass,args));\n}\n", "public void set(double x, double y, double r, double radStart, double radEnd) {\n        this.x = x;\n        this.y = y;\n        this.w = r * 2;\n        this.h = r * 2;\n        this.radStart = radStart;\n        this.radEnd = radEnd;\n    }", "    public DocumentImpl getDocument(DBBroker broker, XmldbURI path) {\n        try {\n            getLock().acquire(Lock.READ_LOCK);\n            DocumentImpl doc = (DocumentImpl) documents.get(path.getRawCollectionPath());\n            if(doc == null)\n            \tLOG.debug(\"Document \" + path + \" not found!\");\n            return doc;\n        } catch (LockException e) {\n            LOG.warn(e.getMessage(), e);\n            return null;\n        } finally {\n            getLock().release(Lock.READ_LOCK);\n        }\n    }\n", "\tpublic String getLoginUrl(String redirectUrl) {\n\t\treturn getStaticPath() + \"/\" + request.getServletPath() + \"/\" + SystemPageFactory.SITE_NAME\n\t\t    + \"/\" + SystemPageFactory.LOGIN_PAGE\n\t\t\t+ \"?redirectUrl=\" + redirectUrl;\n\t}\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "    public List getCurrentPageItems() {\n\n        if (getSize() == 0) {\n            return Collections.EMPTY_LIST;\n        }\n        if (m_metadata.isSelfManaged()) {\n            return getContent();\n        }\n        return Collections.unmodifiableList(getContent().subList(displayedFrom() - 1, displayedTo()));\n    }\n", "public SeaGlassLookAndFeel ( ) { super ( ) ; registerStyles ( ) ; }", "private View fillFromSelection(int selectedLeft,int childrenLeft,int childrenRight){\n  int fadingEdgeLength=getHorizontalFadingEdgeLength();\n  final int selectedPosition=mSelectedPosition;\n  View sel;\n  final int leftSelectionPixel=getLeftSelectionPixel(childrenLeft,fadingEdgeLength,selectedPosition);\n  final int rightSelectionPixel=getRightSelectionPixel(childrenRight,fadingEdgeLength,selectedPosition);\n  sel=makeAndAddView(selectedPosition,selectedLeft,true,mListPadding.top,true);\n  if (sel.getRight() > rightSelectionPixel) {\n    final int spaceBefore=sel.getLeft() - leftSelectionPixel;\n    final int spaceAfter=sel.getRight() - rightSelectionPixel;\n    final int offset=Math.min(spaceBefore,spaceAfter);\n    sel.offsetLeftAndRight(-offset);\n  }\n else   if (sel.getLeft() < leftSelectionPixel) {\n    final int spaceBefore=leftSelectionPixel - sel.getLeft();\n    final int spaceAfter=rightSelectionPixel - sel.getRight();\n    final int offset=Math.min(spaceBefore,spaceAfter);\n    sel.offsetLeftAndRight(offset);\n  }\n  fillBeforeAndAfter(sel,selectedPosition);\n  if (!mStackFromRight) {\n    correctTooWide(getChildCount());\n  }\n else {\n    correctTooSmall(getChildCount());\n  }\n  return sel;\n}\n", "private Node appendNormalized(Node pending,Node current,DocumentFragment parent){\n  if (pending == null) {\n    return current;\n  }\n  if (pending.getNodeType() != Node.TEXT_NODE || current.getNodeType() != Node.TEXT_NODE) {\n    parent.appendChild(pending);\n    return current;\n  }\n  Text a=(Text)pending, b=(Text)current;\n  Text combined=doc.createTextNode(a.getTextContent() + b.getTextContent());\n  if (needsDebugData) {\n    Nodes.setFilePositionFor(combined,FilePosition.span(Nodes.getFilePositionFor(a),Nodes.getFilePositionFor(b)));\n    Nodes.setRawText(combined,Nodes.getRawText(a) + Nodes.getRawText(b));\n  }\n  return combined;\n}\n", "public static boolean intersect(long[] x, long[] y) {\n    final int min = (x.length < y.length) ? x.length : y.length;\n    for(int i = 0; i < min; i++) {\n      if((x[i] & y[i]) != 0L) {\n        return true;\n      }\n    }\n    return false;\n  }", "public XObject getGlobalVariable(XPathContext xctxt, final int index)\n          throws TransformerException\n  {\n\n    XObject val = _stackFrames[index];\n\n    // Lazy execution of variables.\n    if (val.getType() == XObject.CLASS_UNRESOLVEDVARIABLE)\n      return (_stackFrames[index] = val.execute(xctxt));\n\n    return val;\n  }", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public synchronized boolean stopServer(){\n  if (!isProxyRunning) {\n    return false;\n  }\n  isProxyRunning=false;\n  HttpUtil.closeServerSocket(proxySocket);\n  try {\n    thread.join();\n  }\n catch (  Exception e) {\n  }\n  proxySocket=null;\n  return true;\n}\n", "public static String join(final Iterator<?> iterator,final String separator){\n  if (iterator == null) {\n    return null;\n  }\n  if (!iterator.hasNext()) {\n    return \"\";\n  }\n  final Object first=iterator.next();\n  if (!iterator.hasNext()) {\n    return first == null ? null : first.toString();\n  }\n  final StringBuilder buf=new StringBuilder(256);\n  if (first != null) {\n    buf.append(first);\n  }\n  while (iterator.hasNext()) {\n    if (separator != null) {\n      buf.append(separator);\n    }\n    final Object obj=iterator.next();\n    if (obj != null) {\n      buf.append(obj);\n    }\n  }\n  return buf.toString();\n}\n", "protected ManagedIndex updateIndex( IndexDefinition oldDefn,\n                                        IndexDefinition updatedDefn,\n                                        ManagedIndex existingIndex,\n                                        String workspaceName,\n                                        NodeTypes.Supplier nodeTypesSupplier,\n                                        NodeTypePredicate matcher,\n                                        IndexFeedback feedback ) {\n        ManagedIndexBuilder builder = getIndexBuilder(updatedDefn, workspaceName, nodeTypesSupplier, matcher);\n        if (builder == null) {\n            throw new UnsupportedOperationException(\"Index providers should either override this method or the #getIndexBuilder method\");\n        }\n        logger().debug(\"Index provider '{0}' is updating index in workspace '{1}': {2}\", getName(), workspaceName, updatedDefn);\n        existingIndex.shutdown(true);\n        ManagedIndex index = builder.build();\n        if (index.requiresReindexing()) {\n            scanWorkspace(feedback, updatedDefn, workspaceName, index, nodeTypesSupplier);\n        }\n        return index;    \n    }", "public void start(Resource xmlFile,String saxParserCass) throws PageException {\n  InputStream is=null;\n  try {\n    XMLReader xmlReader=XMLUtil.createXMLReader(saxParserCass);\n    xmlReader.setContentHandler(this);\n    xmlReader.setErrorHandler(this);\n    xmlReader.parse(new InputSource(is=IOUtil.toBufferedInputStream(xmlFile.getInputStream())));\n  }\n catch (  Exception e) {\n    throw Caster.toPageException(e);\n  }\n finally {\n    IOUtil.closeEL(is);\n  }\n}\n", "    public void revealMapForAllPlayers() {\n        Iterator<Player> playerIterator = getGame().getPlayerIterator();\n        while (playerIterator.hasNext()) {\n            ServerPlayer player = (ServerPlayer) playerIterator.next();\n            player.revealMap();\n        }\n        playerIterator = getGame().getPlayerIterator();\n        while (playerIterator.hasNext()) {\n            ServerPlayer player = (ServerPlayer) playerIterator.next();\n            try {\n                player.getConnection()\n                    .sendDumping(DOMMessage.createMessage(\"reconnect\"));\n            } catch (IOException e) {\n                logger.log(Level.WARNING, \"Error sending reconnect.\", e);\n            }\n        }\n    }\n", "public int connectTimeout(){\n  return reader.getInteger(CONNECT_TIMEOUT,DEFAULT_CONNECT_TIMEOUT);\n}", "    public void setActiveTaxRate(int rate) {\n\n        if (rate == PRIMARY_TAX) {\n            useAltTax = false;\n            transTax.setRate(taxRecord.taxRate());\n        } else {\n            useAltTax = true;\n            transTax.setRate(taxRecord.altTaxRate());\n        }\n        applyTax();\n    }\n", "@SuppressWarnings(\"unchecked\")\n    public PkiMessage<?> decode(final CMSSignedData pkiMessage)\n            throws MessageDecodingException {\n        LOGGER.debug(\"Decoding pkiMessage\");\n        validate(pkiMessage);\n\n        // The signed content is always an octet string\n        CMSProcessable signedContent = pkiMessage.getSignedContent();\n\n        SignerInformationStore signerStore = pkiMessage.getSignerInfos();\n        SignerInformation signerInfo = signerStore.get(new JcaSignerId(signer));\n        if (signerInfo == null) {\n            throw new MessageDecodingException(\"Could not for signerInfo for \"\n                    + signer.getSubjectDN());\n        }\n\n        LOGGER.debug(\"pkiMessage digest algorithm: {}\", signerInfo\n                .getDigestAlgorithmID().getAlgorithm());\n        LOGGER.debug(\"pkiMessage encryption algorithm: {}\",\n                signerInfo.getEncryptionAlgOID());\n\n        Store store = pkiMessage.getCertificates();\n        Collection<?> certColl;\n        try {\n            certColl = store.getMatches(signerInfo.getSID());\n        } catch (StoreException e) {\n            throw new MessageDecodingException(e);\n        }\n        if (certColl.size() > 0) {\n            X509CertificateHolder cert = (X509CertificateHolder) certColl\n                    .iterator().next();\n            LOGGER.debug(\n                    \"Verifying pkiMessage using key belonging to [dn={}; serial={}]\",\n                    cert.getSubject(), cert.getSerialNumber());\n            SignerInformationVerifier verifier;\n            try {\n                verifier = new JcaSimpleSignerInfoVerifierBuilder().build(cert);\n                if(signerInfo.verify(verifier) == false) {\n                    final String msg = \"pkiMessage verification failed.\";\n                    LOGGER.warn(msg);\n                    throw new MessageDecodingException(msg);\n                 }\n\n                LOGGER.debug(\"pkiMessage verified.\");\n            } catch (CMSException e) {\n                throw new MessageDecodingException(e);\n            } catch (OperatorCreationException e) {\n                throw new MessageDecodingException(e);\n            } catch (CertificateException e) {\n                throw new MessageDecodingException(e);\n            }\n        } else {\n            LOGGER.warn(\"Unable to verify message because the signedData contained no certificates.\");\n        }\n\n        Hashtable<ASN1ObjectIdentifier, Attribute> attrTable = signerInfo\n                .getSignedAttributes().toHashtable();\n\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"pkiMessage has {} signed attributes:\", signerInfo\n                    .getSignedAttributes().size());\n            for (Entry<ASN1ObjectIdentifier, Attribute> entry : attrTable\n                    .entrySet()) {\n                LOGGER.debug(\"  {}: {}\", entry.getKey().getId(), entry\n                        .getValue().getAttrValues());\n            }\n        }\n\n        MessageType messageType = toMessageType(attrTable\n                .get(toOid(MESSAGE_TYPE)));\n        Nonce senderNonce = toNonce(attrTable.get(toOid(SENDER_NONCE)));\n        TransactionId transId = toTransactionId(attrTable.get(toOid(TRANS_ID)));\n\n        if (messageType == MessageType.CERT_REP) {\n            PkiStatus pkiStatus = toPkiStatus(attrTable.get(toOid(PKI_STATUS)));\n            Nonce recipientNonce = toNonce(attrTable\n                    .get(toOid(RECIPIENT_NONCE)));\n\n            if (pkiStatus == PkiStatus.FAILURE) {\n                FailInfo failInfo = toFailInfo(attrTable.get(toOid(FAIL_INFO)));\n                LOGGER.debug(\"Finished decoding pkiMessage\");\n                return new CertRep(transId, senderNonce, recipientNonce,\n                        failInfo);\n            } else if (pkiStatus == PkiStatus.PENDING) {\n                LOGGER.debug(\"Finished decoding pkiMessage\");\n                return new CertRep(transId, senderNonce, recipientNonce);\n            } else {\n                final CMSEnvelopedData ed = getEnvelopedData(signedContent\n                        .getContent());\n                final byte[] envelopedContent = decoder.decode(ed);\n                CMSSignedData messageData;\n                try {\n                    messageData = new CMSSignedData(envelopedContent);\n                } catch (CMSException e) {\n                    throw new MessageDecodingException(e);\n                }\n                LOGGER.debug(\"Finished decoding pkiMessage\");\n                return new CertRep(transId, senderNonce, recipientNonce,\n                        messageData);\n            }\n        } else {\n            CMSEnvelopedData ed = getEnvelopedData(signedContent.getContent());\n            byte[] decoded = decoder.decode(ed);\n            if (messageType == MessageType.GET_CERT) {\n                IssuerAndSerialNumber messageData = IssuerAndSerialNumber\n                        .getInstance(decoded);\n                LOGGER.debug(\"Finished decoding pkiMessage\");\n                return new GetCert(transId, senderNonce, messageData);\n            } else if (messageType == MessageType.GET_CERT_INITIAL) {\n                IssuerAndSubject messageData = new IssuerAndSubject(decoded);\n                LOGGER.debug(\"Finished decoding pkiMessage\");\n                return new GetCertInitial(transId, senderNonce, messageData);\n            } else if (messageType == MessageType.GET_CRL) {\n                IssuerAndSerialNumber messageData = IssuerAndSerialNumber\n                        .getInstance(decoded);\n                LOGGER.debug(\"Finished decoding pkiMessage\");\n                return new GetCrl(transId, senderNonce, messageData);\n            } else {\n                PKCS10CertificationRequest messageData;\n                try {\n                    messageData = new PKCS10CertificationRequest(decoded);\n                } catch (IOException e) {\n                    throw new MessageDecodingException(e);\n                }\n                LOGGER.debug(\"Finished decoding pkiMessage\");\n                return new PkcsReq(transId, senderNonce, messageData);\n            }\n        }\n    }", "public void release ( ) { int n = refCount . decrementAndGet ( ) ; if ( n == NUM_ ) { tracingInfo = null ; pool . checkin ( this ) ; } assert n >= NUM_ : String . format ( STR_ , getType ( ) , getFromMemberId ( ) ) ; }", "private void updateActions ( final INaviModule module ) { m_loadModulesAction . putValue ( STR_ , CLoadModuleAction . generateActionString ( module ) ) ; m_loadModulesAction . setEnabled ( module . getConfiguration ( ) . getRawModule ( ) . isComplete ( ) ", "JSONObject toRest(ParseEncoder encoder){\n  State state;\n  List<ParseOperationSet> operationSetQueueCopy;\nsynchronized (mutex) {\n    state=getState();\n    int operationSetQueueSize=operationSetQueue.size();\n    operationSetQueueCopy=new ArrayList<>(operationSetQueueSize);\n    for (int i=0; i < operationSetQueueSize; i++) {\n      ParseOperationSet original=operationSetQueue.get(i);\n      ParseOperationSet copy=new ParseOperationSet(original);\n      operationSetQueueCopy.add(copy);\n    }\n  }\n  return toRest(state,operationSetQueueCopy,encoder);\n}\n", "private void simpleAction ( IMqttToken token , Bundle data ) { if ( token != null ) { Status status = ( Status ) data . getSerializable ( MqttServiceConstants . CALLBACK_STATUS ) ; if ( status == Status . OK ) { ( ( MqttTokenAndroid ) token ) . notifyComp", "\tpublic boolean getExtended() throws IllegalStateException {\n\n\t\tif (extended == -1) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\"Extended value was never set for: \" + this);\n\t\t}\n\n\t\tif (extended == 1) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\n\t}\t\n", "@SuppressWarnings(\"unchecked\")\n    public static <T> Optional<T> or(final Optional<T> a, final Optional<? extends T> b) {\n        return a.isPresent() ? a : (Optional<T>) b;\n    }", "private void readObject ( ObjectInputStream s ) throws IOException , ClassNotFoundException { s . defaultReadObject ( ) ; try { init ( ) ; } catch ( RuntimeException e ) { if ( e instanceof NullPointerException || e instanceof IllegalArgumentException ) { InvalidObjectException ee = new InvalidObjectException ( e . getMessage ( ) ) ; ee . initCause ( e ) ; throw ee ; } throw e ; } }", "public boolean needsRefreshing() {\r\n\t\t// is there a new version available?\r\n\t\tlong lastmodified = new File(pathResourceDirectory,\r\n\t\t\t\tParameters.lexiconName).lastModified();\r\n\t\tboolean needsRefreshing = false;\r\n\t\tif (lastmodifiedLexicon != lastmodified) {\r\n\t\t\tneedsRefreshing = true;\r\n\t\t}\r\n\t\treturn needsRefreshing;\r\n\t}", "@Override public boolean validateLabel(String label){\n  Objects.requireNonNull(label,\"label cannot be null\");\n  return !labels.contains(label);\n}\n", "public static void objectString(Object obj,StringBuilder sb){\n  if (obj instanceof Object[]) {\n    sb.append('(');\n    boolean first=true;\n    for (    Object o : (Object[])obj) {\n      if (!first) {\n        sb.append(',');\n      }\n else {\n        first=false;\n      }\n      objectString(o,sb);\n    }\n    sb.append(')');\n  }\n else {\n    objectStringWithBytes(obj,sb);\n  }\n}\n", "    public DefaultTreeModel loadTreeModel() {\n\n\treturn (DefaultTreeModel) SupplierPriceListDataHandler.getInstance()\n\t\t.loadSupplierTreeModel();\n    }\n", "public HotwashPanel(){\n  create();\n}\n", "@BetaApi\n  public final Operation deleteUrlMap(ProjectGlobalUrlMapName urlMap) {\n\n    DeleteUrlMapHttpRequest request =\n        DeleteUrlMapHttpRequest.newBuilder()\n            .setUrlMap(urlMap == null ? null : urlMap.toString())\n            .build();\n    return deleteUrlMap(request);\n  }", "public void addConversation(Conversation conversation){\n  conversations.add(new ConversationInfo(conversation));\n  notifyDataSetChanged();\n}\n", "\tpublic boolean canBeInitiated() {\n\t\tboolean ret=false;\n\t\t\n\t\tif (getRoot() == Boolean.TRUE) {\n\t\t\t\n\t\t\t// Check if the trigger message activities for this\n\t\t\t// root behavior have a 'send', indicating that\n\t\t\t// the behavior can be initiated (instantiated)\n\t\t\tjava.util.List acts=\n\t\t\t\tgetNextMessageRelevantActivities(null, true, null, null);\n\t\t\t\n\t\t\tjava.util.Iterator iter=acts.iterator();\n\t\t\t\n\t\t\twhile (ret == false && iter.hasNext()) {\n\t\t\t\tif (iter.next() instanceof SendImpl) {\n\t\t\t\t\tret = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn(ret);\n\t}\n", "private static void addHotkey ( final JButton button , final KeyStroke keyStroke , final AbstractAction action , final String name ) { final InputMap windowImap = button . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) ; windowImap . put ( keyStroke ", "public static MessageFormat pluralizeFormat(final String pattern, final String... choices)\n    {\n        double[] indexes = new double[choices.length];\n\n        for (int i = 0; i < choices.length; i++)\n        {\n            indexes[i] = i;\n        }\n\n        ChoiceFormat choiceForm = new ChoiceFormat(indexes, choices);\n        MessageFormat format = (MessageFormat) messageFormat(pattern).clone();\n        format.setFormat(0, choiceForm);\n\n        return format;\n    }", "protected void addOptions(final ParserData parserData, final IOptionsNode node, final String[] vars, final int startPos,\n            final String originalInput, int lineNumber) throws ParsingException {\n        // Process each variable in vars starting from the start position\n        for (int i = startPos; i < vars.length; i++) {\n            String str = vars[i];\n            // If the variable contains a \"=\" then it isn't a tag so process it separately\n            if (StringUtilities.indexOf(str, '=') != -1) {\n                String temp[] = StringUtilities.split(str, '=', 2);\n                temp = CollectionUtilities.trimStringArray(temp);\n                if (temp.length == 2) {\n                    if (temp[0].equalsIgnoreCase(\"description\")) {\n                        if (node.getDescription(false) == null) {\n                            node.setDescription(ProcessorUtilities.replaceEscapeChars(temp[1]));\n                        } else {\n                            throw new ParsingException(\n                                    String.format(ProcessorConstants.ERROR_DUPLICATE_ATTRIBUTE_MSG, lineNumber, \"description\",\n                                            originalInput));\n                        }\n                    } else if (temp[0].equalsIgnoreCase(\"writer\")) {\n                        if (node.getAssignedWriter(false) == null) {\n                            node.setAssignedWriter(ProcessorUtilities.replaceEscapeChars(temp[1]));\n                        } else {\n                            throw new ParsingException(\n                                    String.format(ProcessorConstants.ERROR_DUPLICATE_ATTRIBUTE_MSG, lineNumber, \"writer\", originalInput));\n                        }\n                    } else if (temp[0].equalsIgnoreCase(\"condition\")) {\n                        if (node.getConditionStatement() == null) {\n                            final String condition = temp[1];\n                            node.setConditionStatement(condition);\n                            try {\n                                Pattern.compile(condition);\n                            } catch (PatternSyntaxException exception) {\n                                throw new ParsingException(\n                                        format(ProcessorConstants.ERROR_INVALID_CONDITION_MSG, lineNumber, originalInput));\n                            }\n                        } else {\n                            throw new ParsingException(\n                                    String.format(ProcessorConstants.ERROR_DUPLICATE_ATTRIBUTE_MSG, lineNumber, \"condition\",\n                                            originalInput));\n                        }\n                    } else if (temp[0].equalsIgnoreCase(\"URL\") && node instanceof SpecNode) {\n                        ((SpecNode) node).addSourceUrl(ProcessorUtilities.replaceEscapeChars(temp[1]));\n                    } else if (temp[0].equalsIgnoreCase(\"Fixed URL\") && node instanceof SpecNode) {\n                        ((SpecNode) node).setFixedUrl(ProcessorUtilities.replaceEscapeChars(temp[1]));\n                    } else {\n                        throw new ParsingException(format(ProcessorConstants.ERROR_INVALID_ATTRIBUTE_MSG, lineNumber, originalInput));\n                    }\n                } else {\n                    throw new ParsingException(format(ProcessorConstants.ERROR_INVALID_ATTRIB_FORMAT_MSG, lineNumber, originalInput));\n                }\n            }\n            // The variable is a tag with a category specified\n            else if (StringUtilities.indexOf(str, ':') != -1) {\n                String temp[] = StringUtilities.split(str, ':', 2);\n                temp = CollectionUtilities.trimStringArray(temp);\n                if (temp.length == 2) {\n                    // Check if the category has an array of tags\n                    if (StringUtilities.indexOf(temp[1], '(') != -1) {\n                        String[] tempTags;\n                        final StringBuilder input = new StringBuilder(temp[1]);\n                        if (StringUtilities.indexOf(temp[1], ')') == -1) {\n                            for (int j = i + 1; j < vars.length; j++) {\n                                i++;\n                                if (StringUtilities.indexOf(vars[j], ')') != -1) {\n                                    input.append(\", \").append(vars[j]);\n                                    break;\n                                } else {\n                                    input.append(\", \").append(vars[j]);\n                                }\n                            }\n                        }\n\n                        // Get the mapping of variables\n                        final HashMap<ParserType, String[]> variableMap = getLineVariables(parserData, input.toString(), lineNumber, '(',\n                                ')', ',', false);\n                        if (variableMap.containsKey(ParserType.NONE)) {\n                            tempTags = variableMap.get(ParserType.NONE);\n                        } else {\n                            tempTags = null;\n                        }\n\n                        if (tempTags != null && tempTags.length >= 2) {\n                            final String tags[] = new String[tempTags.length];\n                            System.arraycopy(tempTags, 0, tags, 0, tempTags.length);\n\n                            if (!node.addTags(Arrays.asList(tags))) {\n                                throw new ParsingException(\n                                        format(ProcessorConstants.ERROR_MULTI_TAG_DUPLICATED_MSG, lineNumber, originalInput));\n                            }\n                        } else {\n                            throw new ParsingException(\n                                    format(ProcessorConstants.ERROR_INVALID_TAG_ATTRIB_FORMAT_MSG, lineNumber, originalInput));\n                        }\n                    }\n                    // Just a single tag so add it straight away\n                    else {\n                        if (!node.addTag(ProcessorUtilities.replaceEscapeChars(temp[1]))) {\n                            throw new ParsingException(format(ProcessorConstants.ERROR_TAG_DUPLICATED_MSG, lineNumber, originalInput));\n                        }\n                    }\n                } else {\n                    throw new ParsingException(format(ProcessorConstants.ERROR_INVALID_TAG_ATTRIB_FORMAT_MSG, lineNumber, originalInput));\n                }\n            }\n            // Variable is a tag with no category specified\n            else {\n                if (str.matches(CSConstants.ALL_TOPIC_ID_REGEX)) {\n                    throw new ParsingException(format(ProcessorConstants.ERROR_INCORRECT_TOPIC_ID_LOCATION_MSG, lineNumber, originalInput));\n                }\n\n                if (!node.addTag(str)) {\n                    throw new ParsingException(format(ProcessorConstants.ERROR_TAG_DUPLICATED_MSG, lineNumber, originalInput));\n                }\n            }\n        }\n    }", "\tpublic long count() {\n\t\treturn (long) moments[0];\n\t}\n", "@RequestProcessing(value=\"/member/{userName}/comments\",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHomeComments(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception {\n  final JSONObject user=(JSONObject)request.getAttribute(User.USER);\n  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get(\"skinDirName\"));\n  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();\n  context.setRenderer(renderer);\n  renderer.setTemplateName(\"/home/comments.ftl\");\n  final Map<String,Object> dataModel=renderer.getDataModel();\n  filler.fillHeaderAndFooter(request,response,dataModel);\n  String pageNumStr=request.getParameter(\"p\");\n  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {\n    pageNumStr=\"1\";\n  }\n  final int pageNum=Integer.valueOf(pageNumStr);\n  final int pageSize=Symphonys.getInt(\"userHomeCmtsCnt\");\n  final int windowSize=Symphonys.getInt(\"userHomeCmtsWindowSize\");\n  fillHomeUser(dataModel,user);\n  avatarQueryService.fillUserAvatarURL(user);\n  final String followingId=user.optString(Keys.OBJECT_ID);\n  dataModel.put(Follow.FOLLOWING_ID,followingId);\n  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);\n  JSONObject currentUser=null;\n  if (isLoggedIn) {\n    currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);\n    final String followerId=currentUser.optString(Keys.OBJECT_ID);\n    final boolean isFollowing=followQueryService.isFollowing(followerId,followingId);\n    dataModel.put(Common.IS_FOLLOWING,isFollowing);\n  }\n  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));\n  final List<JSONObject> userComments=commentQueryService.getUserComments(user.optString(Keys.OBJECT_ID),pageNum,pageSize,currentUser);\n  dataModel.put(Common.USER_HOME_COMMENTS,userComments);\n  final int commentCnt=user.optInt(UserExt.USER_COMMENT_COUNT);\n  final int pageCount=(int)Math.ceil((double)commentCnt / (double)pageSize);\n  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);\n  if (!pageNums.isEmpty()) {\n    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));\n    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));\n  }\n  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);\n  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);\n  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);\n}\n", "void closedModule ( Module module ) ;", "        public boolean accept(java.io.File f) {\n            String name = f.toString();\n            return (f.isFile() && hasActiveSuffix(name))\n                || (f.isDirectory() && !(name.endsWith(\"CVS\")));\n        }\n", "public boolean hideCard(String tag){\n  final Card card=mVisibleCards.get(tag);\n  if (card != null) {\n    mVisibleCards.remove(tag);\n    mDismissibleCards.remove(tag);\n    mHiddenCards.put(tag,card);\n    mLayout.removeView(card.getView());\n    return true;\n  }\n  return mHiddenCards.containsValue(tag);\n}\n", "public ISO9796d2Signer(AsymmetricBlockCipher cipher,Digest digest,boolean implicit){\n  this.cipher=cipher;\n  this.digest=digest;\n  if (implicit) {\n    trailer=TRAILER_IMPLICIT;\n  }\n else {\n    Integer trailerObj=(Integer)trailerMap.get(digest.getAlgorithmName());\n    if (trailerObj != null) {\n      trailer=trailerObj.intValue();\n    }\n else {\n      throw new IllegalArgumentException(\"no valid trailer for digest\");\n    }\n  }\n}\n", "ParsedToken decode ( String tokenString ) throws InvalidTokenException ;", "public HttpRequest header(final String name,final String value){\n  connection.setRequestProperty(name,value);\n  return this;\n}\n", "public StringTag setValue(String value) throws UnsupportedEncodingException {\n        if (value != null) {\n            this.value = value;\n        }\n        byte[] bb = this.value.getBytes(\"UTF-8\");\n        size = VINT.fromValue(bb.length);\n        return this;\n    }", "    public void deleteRow(T row) {\n\tcells.remove(row);\n\tfireTableDataChanged();\n    }\n", "    public void addButton(Component inComponent){\n        if (myAuxillaryButtonPanel != null){\n            myAuxillaryButtonPanel.add(inComponent);\n            myAuxillaryButtonPanel.getParent().validate();\n        }\n    }\n", "protected void installDefaults(){\n  updateStyle(splitPane);\n  setOrientation(splitPane.getOrientation());\n  setContinuousLayout(splitPane.isContinuousLayout());\n  resetLayoutManager();\n  if (nonContinuousLayoutDivider == null) {\n    setNonContinuousLayoutDivider(createDefaultNonContinuousLayoutDivider(),true);\n  }\n else {\n    setNonContinuousLayoutDivider(nonContinuousLayoutDivider,true);\n  }\n  if (managingFocusForwardTraversalKeys == null) {\n    managingFocusForwardTraversalKeys=new HashSet();\n    managingFocusForwardTraversalKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,0));\n  }\n  splitPane.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,managingFocusForwardTraversalKeys);\n  if (managingFocusBackwardTraversalKeys == null) {\n    managingFocusBackwardTraversalKeys=new HashSet();\n    managingFocusBackwardTraversalKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,InputEvent.SHIFT_MASK));\n  }\n  splitPane.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,managingFocusBackwardTraversalKeys);\n}\n", "public static SnapshotMode parse(String value,String defaultValue){\n  SnapshotMode mode=parse(value);\n  if (mode == null && defaultValue != null)   mode=parse(defaultValue);\n  return mode;\n}\n", "public synchronized void setStatusAndNotify(final LauncherStatus newStatus) {\n    LOG.log(Level.FINEST, \"Set status: {0} -> {1}\", new Object[] {this.status, newStatus});\n    this.status = newStatus;\n    this.notify();\n  }", "private CharBuffer filter(char[] array){\n  CharBuffer buf=new CharBuffer();\n  CharBuffer fun=new CharBuffer();\n  CharBuffer file=new CharBuffer();\n  int i=0;\n  while (i < array.length) {\n    fun.clear();\n    file.clear();\n    int start=i;\n    int end;\n   ", "private static void error ( String cname ) { System . err . println ( STR_ ) ; System . err . println ( STR_ + cname + STR_ + STR_ + STR_ + STR_ ) ; }", "public static boolean isMetricUnits(Context context){\n  return STATS_UNITS_DEFAULT.equals(getString(context,R.string.stats_units_key,STATS_UNITS_DEFAULT));\n}\n", "    private void cityBuild(CityBuiltPacket thePacket) {\n        textmanager.showNormalText(\"The city \"+thePacket.theCity.name+\" was founded\",new GotoTextListener(theEngine,thePacket.theCity));\n        City tmp = thePacket.theCity;\n        ((Vector)cities.get(((Grid)tmp.theLoc).thePlanet)).add(tmp);\n        \n        prodListModels.put(thePacket.theCity,new DefaultListModel());\n        /*if(((Grid)tmp.theLoc).thePlanet==currPlanet) { //FIXME should not needed, as the city is added during UnitEngine run\n            theEngine.addCity(tmp);\n            myCities.add(tmp);\n        }*/\n    }\n", "\tpublic void setLocation(int x, int y,int z) {\n\t    this.x = x;\n\t    this.y = y;\n\t    this.z = z;\n\t}\n", "private void initListBlock ( final Block root ) { BlockType blockType = root . type == BlockType . ORDERED_LIST ? BlockType . ORDERED_LIST_ITEM : BlockType . UNORDERED_LIST_ITEM ; Line line = root . lines ; line = line . next ; while ( line != null ) { fi", "protected void nextTable() throws ReplicatorException, SQLException {\n  while (importTables.next()) {\n    if (includeImportTable() == true) {\n      currentTablePosition=0;\n      extractCreateTableStatement=this.includeStructure;\n      prepareImportTable()", "    public void start(){\n        try {\n            \n            // -----------------------------------------------------------\n            // start listening\n            // -----------------------------------------------------------\n            this._socket = new ServerSocket(this._port);\n            System.out.println(\"Listening on \" + this._port);\n            \n            \n            // -----------------------------------------------------------\n            // accepting connections\n            // -----------------------------------------------------------\n            while(true){\n                \n                // -----------------------------------------------------------\n                // accept connection\n                // -----------------------------------------------------------\n                Socket client = this._socket.accept();\n                System.out.println(\"Connection accepted from \" + client + \".\");\n                \n                // -----------------------------------------------------------\n                // remember socket client outputstream\n                // -----------------------------------------------------------\n                this._outputs.put(client, new DataOutputStream(client.getOutputStream()));\n                \n                \n                // -----------------------------------------------------------\n                // start client thread\n                // -----------------------------------------------------------\n                new PeerServerThread(this, client).start();\n            }\n            \n            \n        } catch (IOException ex) {\n            System.err.println(\"Error: Unable to start server on port \" + this._port + \". Maybe port is in use.\");\n        }\n    }    \n", "public Observable<RouteFilterRuleInner> beginCreateOrUpdateAsync(String resourceGroupName, String routeFilterName, String ruleName, RouteFilterRuleInner routeFilterRuleParameters) {\n        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters).map(new Func1<ServiceResponse<RouteFilterRuleInner>, RouteFilterRuleInner>() {\n            @Override\n            public RouteFilterRuleInner call(ServiceResponse<RouteFilterRuleInner> response) {\n                return response.body();\n            }\n        });\n    }", "@SuppressWarnings({\"unchecked\", \"SuspiciousToArrayCall\"})\n  public Cache<K, V> buildAsIs() {\n    if (config.getValueType() == null) {\n      config.setValueType((Class<V>) Object.class);\n    }\n    if (config.getKeyType() == null) {\n      config.setKeyType((Class<K>) Object.class);\n    }\n    if (config.getName() == null) {\n      config.setName(deriveNameFromStackTrace());\n    }\n    checkConfiguration();\n    Class<?> _implClass = HeapCache.class;\n    Class<?> _keyType = config.getKeyType().getType();\n    if (_keyType == Integer.class) {\n      _implClass = IntHeapCache.class;\n    } else if (_keyType == Long.class) {\n      _implClass = LongHeapCache.class;\n    }\n    InternalCache<K, V> _cache = constructImplementationAndFillParameters(_implClass);\n    InternalClock _timeReference = (InternalClock) _cache.createCustomization(config.getTimeReference());\n    if (_timeReference == null) {\n      _timeReference = ClockDefaultImpl.INSTANCE;\n    }\n    HeapCache bc = (HeapCache) _cache;\n    bc.setCacheManager(manager);\n    if (config.hasCacheClosedListeners()) {\n      bc.setCacheClosedListeners(config.getCacheClosedListeners());\n    }\n    configureViaSettersDirect(bc);\n    bc.setClock(_timeReference);\n\n    if (config.isRefreshAhead() && !(\n          config.getAsyncLoader() != null ||\n          config.getLoader() != null ||\n          config.getAdvancedLoader() != null)) {\n      throw new IllegalArgumentException(\"refresh ahead enabled, but no loader defined\");\n    }\n\n    boolean _wrap =\n      config.getWeigher() != null ||\n      config.hasListeners() ||\n      config.hasAsyncListeners() ||\n      config.getWriter() != null ||\n      config.getAsyncLoader() != null;\n\n\n    WiredCache<K, V> wc = null;\n    if (_wrap) {\n      if (_keyType == Integer.class) {\n        wc = (WiredCache<K, V>) new IntWiredCache<V>();\n      } else if (_keyType == Long.class) {\n        wc = (WiredCache<K, V>) new LongWiredCache<V>();\n      } else {\n        wc = new WiredCache<K, V>();\n      }\n      wc.heapCache = bc;\n      _cache = wc;\n    }\n\n    String _name = manager.newCache(_cache, bc.getName());\n    bc.setName(_name);\n    if (_wrap) {\n      wc.loader = bc.loader;\n      wc.writer = (CacheWriter<K, V>) bc.createCustomization(config.getWriter());\n      wc.asyncLoader = (AsyncCacheLoader<K, V>) bc.createCustomization(config.getAsyncLoader());\n      List<CacheEntryCreatedListener<K, V>> _syncCreatedListeners = new ArrayList<CacheEntryCreatedListener<K, V>>();\n      List<CacheEntryUpdatedListener<K, V>> _syncUpdatedListeners = new ArrayList<CacheEntryUpdatedListener<K, V>>();\n      List<CacheEntryRemovedListener<K, V>> _syncRemovedListeners = new ArrayList<CacheEntryRemovedListener<K, V>>();\n      List<CacheEntryExpiredListener<K, V>> _syncExpiredListeners = new ArrayList<CacheEntryExpiredListener<K, V>>();\n      List<CacheEntryEvictedListener<K, V>> _syncEvictedListeners = new ArrayList<CacheEntryEvictedListener<K,V>>();\n      List<CacheEntryExpiredListener<K, V>> _expiredListeners = new ArrayList<CacheEntryExpiredListener<K, V>>();\n      if (config.hasListeners()) {\n        for (CustomizationSupplier<CacheEntryOperationListener<K, V>> f : config.getListeners()) {\n          CacheEntryOperationListener<K, V> el = ( CacheEntryOperationListener<K, V>) bc.createCustomization(f);\n          if (el instanceof CacheEntryCreatedListener) {\n            _syncCreatedListeners.add((CacheEntryCreatedListener) el);\n          }\n          if (el instanceof CacheEntryUpdatedListener) {\n            _syncUpdatedListeners.add((CacheEntryUpdatedListener) el);\n          }\n          if (el instanceof CacheEntryRemovedListener) {\n            _syncRemovedListeners.add((CacheEntryRemovedListener) el);\n          }\n          if (el instanceof CacheEntryExpiredListener) {\n            _expiredListeners.add((CacheEntryExpiredListener) el);\n          }\n          if (el instanceof CacheEntryEvictedListener) {\n            _syncEvictedListeners.add((CacheEntryEvictedListener) el);\n          }\n        }\n      }\n      if (config.hasAsyncListeners() || !_expiredListeners.isEmpty()) {\n        Executor _executor = DEFAULT_ASYNC_LISTENER_EXECUTOR;\n        if (config.getAsyncListenerExecutor() != null) {\n          _executor = _cache.createCustomization(config.getAsyncListenerExecutor());\n        }\n        AsyncDispatcher<K> _asyncDispatcher = new AsyncDispatcher<K>(wc, _executor);\n        List<CacheEntryCreatedListener<K, V>> cll = new ArrayList<CacheEntryCreatedListener<K, V>>();\n        List<CacheEntryUpdatedListener<K, V>> ull = new ArrayList<CacheEntryUpdatedListener<K, V>>();\n        List<CacheEntryRemovedListener<K, V>> rll = new ArrayList<CacheEntryRemovedListener<K, V>>();\n        List<CacheEntryExpiredListener<K, V>> ell = new ArrayList<CacheEntryExpiredListener<K, V>>();\n        List<CacheEntryEvictedListener<K, V>> evl = new ArrayList<CacheEntryEvictedListener<K, V>>();\n        for (CustomizationSupplier<CacheEntryOperationListener<K, V>> f : config.getAsyncListeners()) {\n          CacheEntryOperationListener<K, V> el = (CacheEntryOperationListener<K, V>) bc.createCustomization(f);\n          if (el instanceof CacheEntryCreatedListener) {\n            cll.add((CacheEntryCreatedListener) el);\n          }\n          if (el instanceof CacheEntryUpdatedListener) {\n            ull.add((CacheEntryUpdatedListener) el);\n          }\n          if (el instanceof CacheEntryRemovedListener) {\n            rll.add((CacheEntryRemovedListener) el);\n          }\n          if (el instanceof CacheEntryExpiredListener) {\n            ell.add((CacheEntryExpiredListener) el);\n          }\n          if (el instanceof CacheEntryEvictedListener) {\n            evl.add((CacheEntryEvictedListener) el);\n          }\n        }\n        for (CacheEntryCreatedListener l : cll) {\n          _syncCreatedListeners.add(new AsyncCreatedListener<K, V>(_asyncDispatcher, l));\n        }\n        for (CacheEntryUpdatedListener l : ull) {\n          _syncUpdatedListeners.add(new AsyncUpdatedListener<K, V>(_asyncDispatcher, l));\n        }\n        for (CacheEntryRemovedListener l : rll) {\n          _syncRemovedListeners.add(new AsyncRemovedListener<K, V>(_asyncDispatcher, l));\n        }\n        for (CacheEntryExpiredListener l : ell) {\n          _syncExpiredListeners.add(new AsyncExpiredListener<K, V>(_asyncDispatcher, l));\n        }\n        for (CacheEntryExpiredListener l : _expiredListeners) {\n          _syncExpiredListeners.add(new AsyncExpiredListener<K, V>(_asyncDispatcher, l));\n        }\n        for (CacheEntryEvictedListener l : evl) {\n          _syncEvictedListeners.add(new AsyncEvictedListener<K, V>(_asyncDispatcher, l));\n        }\n      }\n      if (!_syncCreatedListeners.isEmpty()) {\n        wc.syncEntryCreatedListeners = _syncCreatedListeners.toArray(new CacheEntryCreatedListener[0]);\n      }\n      if (!_syncUpdatedListeners.isEmpty()) {\n        wc.syncEntryUpdatedListeners = _syncUpdatedListeners.toArray(new CacheEntryUpdatedListener[0]);\n      }\n      if (!_syncRemovedListeners.isEmpty()) {\n        wc.syncEntryRemovedListeners = _syncRemovedListeners.toArray(new CacheEntryRemovedListener[0]);\n      }\n      if (!_syncExpiredListeners.isEmpty()) {\n        wc.syncEntryExpiredListeners = _syncExpiredListeners.toArray(new CacheEntryExpiredListener[0]);\n      }\n      if (!_syncEvictedListeners.isEmpty()) {\n        wc.syncEntryEvictedListeners = _syncEvictedListeners.toArray(new CacheEntryEvictedListener[0]);\n      }\n      bc.eviction = constructEviction(bc, wc, config);\n      TimingHandler rh = TimingHandler.of(_timeReference, config);\n      bc.setTiming(rh);\n      wc.init();\n    } else {\n      TimingHandler rh = TimingHandler.of(_timeReference, config);\n      bc.setTiming(rh);\n       bc.eviction = constructEviction(bc, HeapCacheListener.NO_OPERATION, config);\n      bc.init();\n    }\n    manager.sendCreatedEvent(_cache, config);\n    return _cache;\n  }", "public void call(String method, Object[] args)\n        throws IOException\n    {\n        int length = args != null ? args.length : 0;\n\n        startCall(method, length);\n\n        for (int i = 0; i < length; i++)\n            writeObject(args[i]);\n\n        completeCall();\n    }\n\n    /**\n     * Starts the method call:\n     *\n     * <code><pre>\n     * C\n     * </pre></code>\n     *\n     * @param method the method name to call.\n     */\n    abstract public void startCall()\n        throws IOException;\n\n    /**\n     * Starts the method call:\n     *\n     * <code><pre>\n     * C string int\n     * </pre></code>\n     *\n     * @param method the method name to call.\n     */\n    abstract public void startCall(String method, int length)\n        throws IOException;\n\n    /**\n     * For Hessian 2.0, use the Header envelope instead\n     *\n     * @deprecated\n     */\n    public void writeHeader(String name)\n        throws IOException\n    {\n        throw new UnsupportedOperationException(getClass().getSimpleName());\n    }\n\n    /**\n     * Writes the method tag.\n     *\n     * <code><pre>\n     * string\n     * </pre></code>\n     *\n     * @param method the method name to call.\n     */\n    abstract public void writeMethod(String method)\n        throws IOException;\n\n    /**\n     * Completes the method call:\n     *\n     * <code><pre>\n     * </pre></code>\n     */\n    abstract public void completeCall()\n        throws IOException;\n\n    /**\n     * Writes a boolean value to the stream.  The boolean will be written\n     * with the following syntax:\n     *\n     * <code><pre>\n     * T\n     * F\n     * </pre></code>\n     *\n     * @param value the boolean value to write.\n     */\n    abstract public void writeBoolean(boolean value)\n        throws IOException;\n\n    /**\n     * Writes an integer value to the stream.  The integer will be written\n     * with the following syntax:\n     *\n     * <code><pre>\n     * I b32 b24 b16 b8\n     * </pre></code>\n     *\n     * @param value the integer value to write.\n     */\n    abstract public void writeInt(int value)\n        throws IOException;\n\n    /**\n     * Writes a long value to the stream.  The long will be written\n     * with the following syntax:\n     *\n     * <code><pre>\n     * L b64 b56 b48 b40 b32 b24 b16 b8\n     * </pre></code>\n     *\n     * @param value the long value to write.\n     */\n    abstract public void writeLong(long value)\n        throws IOException;\n\n    /**\n     * Writes a double value to the stream.  The double will be written\n     * with the following syntax:\n     *\n     * <code><pre>\n     * D b64 b56 b48 b40 b32 b24 b16 b8\n     * </pre></code>\n     *\n     * @param value the double value to write.\n     */\n    abstract public void writeDouble(double value)\n        throws IOException;\n\n    /**\n     * Writes a date to the stream.\n     *\n     * <code><pre>\n     * T  b64 b56 b48 b40 b32 b24 b16 b8\n     * </pre></code>\n     *\n     * @param time the date in milliseconds from the epoch in UTC\n     */\n    abstract public void writeUTCDate(long time)\n        throws IOException;\n\n    /**\n     * Writes a null value to the stream.\n     * The null will be written with the following syntax\n     *\n     * <code><pre>\n     * N\n     * </pre></code>\n     *\n     * @param value the string value to write.\n     */\n    abstract public void writeNull()\n        throws IOException;\n\n    /**\n     * Writes a string value to the stream using UTF-8 encoding.\n     * The string will be written with the following syntax:\n     *\n     * <code><pre>\n     * S b16 b8 string-value\n     * </pre></code>\n     *\n     * If the value is null, it will be written as\n     *\n     * <code><pre>\n     * N\n     * </pre></code>\n     *\n     * @param value the string value to write.\n     */\n    abstract public void writeString(String value)\n        throws IOException;\n\n    /**\n     * Writes a string value to the stream using UTF-8 encoding.\n     * The string will be written with the following syntax:\n     *\n     * <code><pre>\n     * S b16 b8 string-value\n     * </pre></code>\n     *\n     * If the value is null, it will be written as\n     *\n     * <code><pre>\n     * N\n     * </pre></code>\n     *\n     * @param value the string value to write.\n     */\n    abstract public void writeString(char[] buffer, int offset, int length)\n        throws IOException;\n\n    /**\n     * Writes a byte array to the stream.\n     * The array will be written with the following syntax:\n     *\n     * <code><pre>\n     * B b16 b18 bytes\n     * </pre></code>\n     *\n     * If the value is null, it will be written as\n     *\n     * <code><pre>\n     * N\n     * </pre></code>\n     *\n     * @param value the string value to write.\n     */\n    abstract public void writeBytes(byte[] buffer)\n        throws IOException;\n\n    /**\n     * Writes a byte array to the stream.\n     * The array will be written with the following syntax:\n     *\n     * <code><pre>\n     * B b16 b18 bytes\n     * </pre></code>\n     *\n     * If the value is null, it will be written as\n     *\n     * <code><pre>\n     * N\n     * </pre></code>\n     *\n     * @param value the string value to write.\n     */\n    abstract public void writeBytes(byte[] buffer, int offset, int length)\n        throws IOException;\n\n    /**\n     * Writes a byte buffer to the stream.\n     */\n    abstract public void writeByteBufferStart()\n        throws IOException;\n\n    /**\n     * Writes a byte buffer to the stream.\n     *\n     * <code><pre>\n     * b b16 b18 bytes\n     * </pre></code>\n     *\n     * @param value the string value to write.\n     */\n    abstract public void writeByteBufferPart(byte[] buffer,\n                                             int offset,\n                                             int length)\n        throws IOException;\n\n    /**\n     * Writes the last chunk of a byte buffer to the stream.\n     *\n     * <code><pre>\n     * b b16 b18 bytes\n     * </pre></code>\n     *\n     * @param value the string value to write.\n     */\n    abstract public void writeByteBufferEnd(byte[] buffer,\n                                            int offset,\n                                            int length)\n        throws IOException;\n\n    /**\n     * Writes a full output stream.\n     */\n    public void writeByteStream(InputStream is)\n        throws IOException\n    {\n        writeByteBufferStart();\n\n        if (_byteBuffer == null)\n            _byteBuffer = new byte[1024];\n\n        byte[] buffer = _byteBuffer;\n\n        int len;\n        while ((len = is.read(buffer, 0, buffer.length)) > 0) {\n            if (len < buffer.length) {\n                int len2 = is.read(buffer, len, buffer.length - len);\n\n                if (len2 < 0) {\n                    writeByteBufferEnd(buffer, 0, len);\n                    return;\n                }\n\n                len += len2;\n            }\n\n            writeByteBufferPart(buffer, 0, len);\n        }\n\n        writeByteBufferEnd(buffer, 0, 0);\n    }\n\n    /**\n     * Writes a reference.\n     *\n     * <code><pre>\n     * Q int\n     * </pre></code>\n     *\n     * @param value the integer value to write.\n     */\n    abstract protected void writeRef(int value)\n        throws IOException;\n\n    /**\n     * Removes a reference.\n     */\n    public boolean removeRef(Object obj)\n        throws IOException\n    {\n        return false;\n    }\n\n    /**\n     * Replaces a reference from one object to another.\n     */\n    abstract public boolean replaceRef(Object oldRef, Object newRef)\n        throws IOException;\n\n    /**\n     * Adds an object to the reference list.  If the object already exists,\n     * writes the reference, otherwise, the caller is responsible for\n     * the serialization.\n     *\n     * <code><pre>\n     * R b32 b24 b16 b8\n     * </pre></code>\n     *\n     * @param object the object to add as a reference.\n     *\n     * @return true if the object has already been written.\n     */\n    abstract public boolean addRef(Object object)\n        throws IOException;\n\n    /**\n     * @param obj\n     * @return\n     */\n    abstract public int getRef(Object obj);\n\n    /**\n     * Resets the references for streaming.\n     */\n    public void resetReferences()\n    {\n    }\n\n    /**\n     * Writes a generic object to the output stream.\n     */\n    abstract public void writeObject(Object object)\n        throws IOException;\n\n    /**\n     * Writes the list header to the stream.  List writers will call\n     * <code>writeListBegin</code> followed by the list contents and then\n     * call <code>writeListEnd</code>.\n     *\n     * <code><pre>\n     * V\n     *   x13 java.util.ArrayList   # type\n     *   x93                       # length=3\n     *   x91                       # 1\n     *   x92                       # 2\n     *   x93                       # 3\n     * &lt;/list>\n     * </pre></code>\n     */\n    abstract public boolean writeListBegin(int length, String type)\n        throws IOException;\n\n    /**\n     * Writes the tail of the list to the stream.\n     */\n    abstract public void writeListEnd()\n        throws IOException;\n\n    /**\n     * Writes the map header to the stream.  Map writers will call\n     * <code>writeMapBegin</code> followed by the map contents and then\n     * call <code>writeMapEnd</code>.\n     *\n     * <code><pre>\n     * M type (<key> <value>)* Z\n     * </pre></code>\n     */\n    abstract public void writeMapBegin(String type)\n        throws IOException;\n\n    /**\n     * Writes the tail of the map to the stream.\n     */\n    abstract public void writeMapEnd()\n        throws IOException;\n\n    /**\n     * Writes the object header to the stream (for Hessian 2.0), or a\n     * Map for Hessian 1.0.  Object writers will call\n     * <code>writeObjectBegin</code> followed by the map contents and then\n     * call <code>writeObjectEnd</code>.\n     *\n     * <code><pre>\n     * C type int <key>*\n     * C int <value>*\n     * </pre></code>\n     *\n     * @return true if the object has already been defined.\n     */\n    public int writeObjectBegin(String type)\n        throws IOException\n    {\n        writeMapBegin(type);\n\n        return -2;\n    }\n\n    /**\n     * Writes the end of the class.\n     */\n    public void writeClassFieldLength(int len)\n        throws IOException\n    {\n    }\n\n    /**\n     * Writes the tail of the object to the stream.\n     */\n    public void writeObjectEnd()\n        throws IOException\n    {\n    }\n\n    public void writeReply(Object o)\n        throws IOException\n    {\n        startReply();\n        writeObject(o);\n        completeReply();\n    }\n\n    public void startReply()\n        throws IOException\n    {\n    }\n\n    public void completeReply()\n        throws IOException\n    {\n    }\n\n    public void writeFault(String code, String message, Object detail)\n        throws IOException\n    {\n    }\n\n    public void flush()\n        throws IOException\n    {\n    }\n\n    public void close()\n        throws IOException\n    {\n    }\n}", "private BigDecimal getFastBigDecimal(int columnIndex) throws SQLException, NumberFormatException {\n\n    byte[] bytes = thisRow[columnIndex - 1];\n\n    if (bytes.length == 0) {\n      throw FAST_NUMBER_FAILED;\n    }\n\n    int scale = 0;\n    long val = 0;\n    ", "public byte [ ] encode ( ) { char type = getAttributeType ( ) ; byte [ ] binValue = new byte [ HEADER_LENGTH + getDataLength ( ) ] ; binValue [ NUM_ ] = ( byte ) ( type > > NUM_ ) ; binValue [ NUM_ ] = ( byte ) ( type & NUM_ ) ; binValue [ NUM_ ] = ( byte ) ( getDataLength ( ) > > NUM_ ) ; binValue [ NUM_ ] = ( byte ) ( getDataLength ( ) & NUM_ ) ; binValue [ NUM_ ] = ( byte ) ( ( priority & NUM_ ) > > NUM_ ) ; binValue [ NUM_ ] = ( byte ) ( ( priority & NUM_ ) > > NUM_ ) ; binValue [ NUM_ ] = ( byte ) ( ( priority & NUM_ ) > > NUM_ ) ; binValue [ NUM_ ] = ( byte ) ( priority & NUM_ ) ; return binValue ; }", "public Paragraph insertParagraph(int index){\n  Paragraph p=new Paragraph(this,this,factory);\n  setParagraphMagic(p,index);\nsynchronized (paragraphs) {\n    paragraphs.add(index,p);\n  }\n  if (noteEventListener != null) {\n    noteEventListener.onParagraphCreate(p);\n  }\n  return p;\n}\n", "\tprivate void myCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {\n\t\tsetVisible(false);\n\t}\n", "void error(String key,String arg1,String arg2) throws SAXException {\n  hadError=true;\n  if (eh == null)   return;\n  eh.error(new SAXParseException(localizer.message(key,arg1,arg2),locator));\n}\n", "public void sendResponse ( byte [ ] transactionID , Response response , TransportAddress sendThrough , TransportAddress sendTo ) throws StunException , IOException , IllegalArgumentException { TransactionID tid = TransactionID . createTransactionID ( this , transactionID ) ; StunServerTransaction sTran = getServerTransaction ( tid ) ; if ( sTran == null ) { throw new StunException ( StunException . TRANSACTION_DOES_NOT_EXIST , STR_ + STR_ + tid . toString ( ) + STR_ + STR_ ) ; } else if ( sTran . isRetransmitting ( ) ) { throw new StunException ( StunException . TRANSACTION_ALREADY_ANSWERED , STR_ + STR_ + tid . toString ( ) + STR_ + STR_ + STR_ + sTran . getResponse ( ) ) ; } else { sTran . sendResponse ( response , sendThrough , sendTo ) ; } }", "public void notifyListeners ( ) { for ( final ICriteriumListener listener : m_listeners ) { try { listener . criteriumChanged ( ) ; } catch ( final Exception exception ) { CUtilityFunctions . logException ( exception ) ; } } }", "private void completePendingFlush(){\n  int size=_pendingFlushEntries.size();\n  if (size == 0) {\n    return;\n  }\n  for (int i=0; i < size; i++) {\n    PendingEntry entry=_pendingFlushEntries.get(i);\n    entry.afterFlush();\n    _pendingFsyncEntries.add(entry);\n  }\n  _pendingFlushEntries.clear();\n}\n", "public final String toString ( int depth ) { if ( depth <= NUM_ ) return STR_ ; return ( STR_ + super . toString ( depth ) + STR_ + mantissa + STR_ + exponent + STR_ + ( bigVal != null ? bigVal . toString ( ) : STR_ ) + STR_ + image ) ; }", "public static void printStatInfo(String outputDirPath, File pdfFile, int pageNum, int tableNum) {\r\n    \ttry {\r\n    \t\tFile classificationData = new File(outputDirPath, \"statInfo\");\r\n    \t\tif (!classificationData.exists()) {\r\n    \t\t\tclassificationData.mkdirs();\r\n    \t\t}\r\n    \t\tFile fileName = new File(classificationData, \"tableNumStatInfo.txt\");\r\n    \t\tBufferedWriter bw0 = new BufferedWriter(new FileWriter(fileName, true));\r\n    \t\tbw0.append(outputDirPath+pdfFile.getName() + \"\\t\\t\" + pageNum + \" PAGES\\t\\t\" +  tableNum + \" TABLES\\n\");\r\n    \t\tbw0.close();\r\n    \t}\r\n    \tcatch (IOException e){\r\n    \t\tSystem.out.printf(\"[Debug Error] IOException\\n\");\r\n    \t}\r\n    }", "int getOffsets(long date, int[] offsets) {\n        int rawoffset = getRawOffset();\n        int dstoffset = 0;\n        if (inDaylightTime(new Date(date))) {\n            dstoffset = getDSTSavings();\n        }\n        if (offsets != null) {\n            offsets[0] = rawoffset;\n            offsets[1] = dstoffset;\n        }\n        return rawoffset + dstoffset;\n    }", "void calculateValueAt(double x) {\n\t\tint len = points.size();\n\t\tfor (int i = 1; i < len; i++) {\n\t\t\tPoint p1 = points.get(i - 1);\n\t\t\tPoint p2 = points.get(i);\n\n\t\t\tif (x >= p1.getX().doubleValue() && x <= p2.getX().doubleValue()) {\n\t\t\t\t// calculate the slope intercept form\n\t\t\t\tdouble m = (p2.getY().doubleValue() - p1.getY().doubleValue()) / (p2.getX().doubleValue() - p1.getX().doubleValue());\n\t\t\t\tdouble b = p1.getY().doubleValue() - m * p1.getX().doubleValue();\n\n\t\t\t\tdouble interpolated = m * x + b;\n\n\t\t\t\t// apply the hedge if we have one\n\t\t\t\tif(haveHedge()) {\n\t\t\t\t\tinterpolated = getHedge().calculateValue(interpolated);\n\t\t\t\t}\n\t\t\t\texploded.add(interpolated);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}", "    public double optDouble(String key, double defaultValue)  {\n        Object o = opt(key);\n        if (o != null) {\n            if (o instanceof Number) {\n                return ((Number)o).doubleValue();\n            }\n            try {\n                ", "public final void addAllValues(@NonNull final Collection<String> values) {\n        Condition.INSTANCE.ensureNotNull(values, \"The values may not be null\");\n\n        if (this.values != null) {\n            if (this.values.addAll(values)) {\n                if", "protected void pushInstanceOfTypeInfo ( final Expression objectOfInstanceOf , final Expression typeExpression ) { final Map < Object , List < ClassNode > > tempo = typeCheckingContext . temporaryIfBranchTypeInformation . peek ( ) ; Object key = extractTemporaryTypeInfoKey ( objectOfInstanceOf ) ; List < ClassNode > potentialTypes = tempo . get ( key ) ; if ( potentialTypes == null ) { potentialTypes = new LinkedList < ClassNode > ( ) ; tempo . put ( key , potentialTypes ) ; } potentialTypes . add ( typeExpression . getType ( ) ) ; }", "\tpublic void setLayerVisibility(int layerID, boolean visible) {\n\n\t\tContentValues values = new ContentValues();\n\t\tvalues.put(LAYER_visible, visible ? TRUE : FALSE);\n\t\tdb.update(LAYER_TABLE, values, ID + \"=\" + layerID, null);\n\t}\n", "public synchronized void stop() {\n\t\tif (writer != null) {\n\t\t\ttry {\n\t\t\t\twriter.close(headerBytes);\n\t\t\t\twriter = null;\n\t\t\t} catch (IOException ex) {\n\t\t\t\t// No need to crash on this error even if the tail won't be written\n\t\t\t\t// since reading logic can take care of that.\n\t\t\t}\n\t\t}\n\t\t// Ensure that timer is stopped as well.\n\t\tdisableFileSwitch();\n\t\t\n\t\theaderBytes = null;\n\t\t// Don't stop manager here since it can be reused for a different repository writer.\n\t\t//manager.stop();\n\t}", "public void finaliseAddObservations ( ) throws Exception ;", "private static void computeCorrelationMatrix(int rank,double[][] vectors,Distances distances){\n  double[] mean=new double[rank];\n  for (  double[] row : vectors) {\n    for (int col=0; col < rank; col++) {\n      mean[col]+=row[col];\n    }\n  }\n  for (int col=0; col < rank; col++) {\n    mean[col]/=vectors.length;\n  }\n  double[] stddev=new double[rank];\n  for (  double[] row : vectors) {\n    for (int col=0; col < rank; col++) {\n      stddev[col]+=(row[col] - mean[col]) * (row[col] - mean[col]);\n    }\n  }\n  for (int col=0; col < rank; col++) {\n    stddev[col]=Math.sqrt(stddev[col] / vectors.length);\n  }\n  for (int di=0; di < rank; di++) {\n    distances.set(di + 1,di + 1,0);\n    for (int dj=di + 1; dj < rank; dj++) {\n      double cor=0;\n      for (      double[] row : vectors) {\n        cor+=(row[di] - mean[di]) * (row[dj] - mean[dj]) / (stddev[di] * stddev[dj]);\n      }\n      cor/=vectors.length;\n      distances.set(di + 1,dj + 1,cor);\n    }\n  }\n}\n", "public static void removeLoggingBehavior(LoggingBehavior behavior){\nsynchronized (loggingBehaviors) {\n    loggingBehaviors.remove(behavior);\n  }\n}\n", "private void drawBackground(Canvas canvas){\n  RectF rect=mCropWindowHandler.getRect();\n  float left=Math.max(BitmapUtils.getRectLeft(mBoundsPoints),0);\n  float top=Math.max(BitmapUtils.getRectTop(mBoundsPoints),0);\n  float right=Math.min(BitmapUtils.getRectRight(mBoundsPoints),getWidth());\n  float bottom=Math.min(BitmapUtils.getRectBottom(mBoundsPoints),getHeight());\n  if (mCropShape == CropImageView.CropShape.RECTANGLE) {\n    if (isNonStraightAngleRotated() || Build.VERSION.SDK_INT <= 17) {\n      canvas.drawRect(left,top,right,rect.top,mBackgroundPaint);\n      canvas.drawRect(left,rect.bottom,right,bottom,mBackgroundPaint);\n      canvas.drawRect(left,rect.top,rect.left,rect.bottom,mBackgroundPaint);\n      canvas.drawRect(rect.right,rect.top,right,rect.bottom,mBackgroundPaint);\n    }\n else {\n      mPath.reset();\n      mPath.moveTo(mBoundsPoints[0],mBoundsPoints[1]);\n      mPath.lineTo(mBoundsPoints[2],mBoundsPoints[3]);\n      mPath.lineTo(mBoundsPoints[4],mBoundsPoints[5]);\n      mPath.lineTo(mBoundsPoints[6],mBoundsPoints[7]);\n      mPath.close();\n      canvas.save();\n      canvas.clipPath(mPath,Region.Op.INTERSECT);\n      canvas.clipRect(rect,Region.Op.XOR);\n      canvas.drawRect(left,top,right,bottom,mBackgroundPaint);\n      canvas.restore();\n    }\n  }\n else {\n    mPath.reset();\n    if (Build.VERSION.SDK_INT >= 11 && Build.VERSION.SDK_INT <= 17 && mCropShape == CropImageView.CropShape.OVAL) {\n      mDrawRect.set(rect.left + 2,rect.top + 2,rect.right - 2,rect.bottom - 2);\n    }\n else {\n      mDrawRect.set(rect.left,rect.top,rect.right,rect.bottom);\n    }\n    mPath.addOval(mDrawRect,Path.Direction.CW);\n    canvas.save();\n    canvas.clipPath(mPath,Region.Op.XOR);\n    canvas.drawRect(left,top,right,bottom,mBackgroundPaint);\n    canvas.restore();\n  }\n}\n", "public final void setFormat(String value) {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.entry(this, tc, \"setFormat\", value);\n        jmo.getPayloadPart().setField(JsPayloadAccess.FORMAT, value);\n        if (T", "public static void logExceptionRetrieveArchive ( final Logger logger , final ArchiveDescription archive , final Exception e ) { logger . logException ( Level . SEVERE , STR_ + archive . toString ( ) , e ) ; }", "private void renderTexture(Texture texture,double centerX,double centerY){\n  TextureCoords tc=texture.getImageTexCoords();\n  float tx1=tc.left();\n  float ty1=tc.top();\n  float tx2=tc.right();\n  float ty2=tc.bottom();\n  float halfWidth=quarterValue(texture", "private static int sumRowSumLtGeColSumGtLe(double value,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {\n  int ix=Arrays.binarySearch(bv,value);\n  int cnt=0;\n  if (ix >= 0) {\n    while (value == bv[ix++] && ix < bv.length)     ;\n    ix+=(value == bv[bv.length - 1]) ? 1 : 0;\n  }\n  cnt=bv.length - Math.abs(ix) + 1;\n  if (bOp.fn instanceof LessThanEquals || bOp.fn instanceof GreaterThanEquals)   cnt=bv.length - cnt;\n  return cnt;\n}\n", "@HLEFunction(nid=0xFA324B4E,version=150) public int sceNetAdhocGameModeUpdateReplica(int id,@CanBeNull TPointer infoAddr){\n  checkInitialized();\n  for (  GameModeArea gameModeArea : replicaGameModeAreas) {\n    if (gameModeArea.id == id) {\n      GameModeUpdateInfo gameModeUpdateInfo=new GameModeUpdateInfo();\n      if (infoAddr.isNotNull()) {\n        gameModeUpdateInfo.read(infoAddr);\n      }\n      if (gameModeArea.hasNewData()) {\n        if (log.isDebugEnabled()) {\n          log.debug(String.format(\"Updating GameMode Area with new data: %s\",gameModeArea));\n        }\n        gameModeArea.writeNewData();\n        gameModeArea.resetNewData();\n        if (log.isTraceEnabled()) {\n          log.trace(String.format(\"Replica GameMode Area updated: %s\",Utilities.getMemoryDump(gameModeArea.addr,gameModeArea.size)));\n        }\n        gameModeUpdateInfo.updated=1;\n      }\n else {\n        gameModeUpdateInfo.updated=0;\n      }\n      if (infoAddr.getAddress() != 0) {\n        gameModeUpdateInfo.timeStamp=gameModeArea.getUpdateTimestamp();\n        gameModeUpdateInfo.write(Memory.getInstance());\n      }\n      break;\n    }\n  }\n  return 0;\n}\n", "public static LongStream scrambledZipfian(int items, double constant, int events) {\n    return generate(new ScrambledZipfianGenerator(0, items - 1, constant), events);\n  }", "\tpublic boolean isTokenValid() {\n\n\t\t// Retrieve the saved transaction token from our session\n\t\tHttpSession session = getSession();\n\t\tif (session == null)\n\t\t\treturn (false);\n\t\tString saved = (String) session.getAttribute(TRANSACTION_TOKEN_KEY);\n\t\tif (saved == null)\n\t\t\treturn (false);\n\n\t\t// Retrieve the transaction token included in this request\n\t\tif (_token == null)\n\t\t\treturn (false);\n\n\t\t// Do the values match?\n\t\treturn (saved.equals(_token));\n\n\t}\n", "public JMXConnector getJMXConnector(String controllerHost, int controllerPort, String user, String password) throws NoSuchAlgorithmException, KeyManagementException, MalformedURLException, IOException {\n        HashMap<String, Object> environment = createJMXEnvironment(user, password, setUpSSLContext());\n        JMXConnector connector = getMBeanServerConnection(controllerHost, controllerPort, environment);\n        connector.connect();\n        return connector;\n    }", "public java.lang.StringBuffer deleteCharAt(int index){\n  internal.deleteCharAt(index);\n  return this;\n}\n", "public void addCollected(BigDecimal amount){\n  addCollectedWithTolerance(amount,BigDecimal.ZERO);\n}\n", "protected void checkDOMVersion(Hashtable h){\n  if (null == h)   h=new Hashtable();\n  final String DOM_LEVEL2_CLASS=\"org.w3c.dom.Document\";\n  final String DOM_LEVEL2_METHOD=\"createElementNS\";\n  final String DOM_LEVEL2WD_CLASS=\"org.w3c.dom.Node\";\n  final String DOM_LEVEL2WD_METHOD=\"supported\";\n  final String DOM_LEVEL2FD_CLASS=\"org.w3c.dom.Node\";\n  final String DOM_LEVEL2FD_METHOD=\"isSupported\";\n  final Class twoStringArgs[]={java.lang.String.class,java.lang.String.class};\n  try {\n    Class clazz=ObjectFactory.findProviderClass(DOM_LEVEL2_CLASS,ObjectFactory.findClassLoader(),true);\n    Method method=clazz.getMethod(DOM_LEVEL2_METHOD,twoStringArgs);\n    h.put(VERSION + \"DOM\",\"2.0\");\n    try {\n      clazz=ObjectFactory.findProviderClass(DOM_LEVEL2WD_CLASS,ObjectFactory.findClassLoader(),true);\n      method=clazz.getMethod(DOM_LEVEL2WD_METHOD,twoStringArgs);\n      h.put(ERROR + VERSION + \"DOM.draftlevel\",\"2.0wd\");\n      h.put(ERROR,ERROR_FOUND);\n    }\n catch (    Exception e2) {\n      try {\n        clazz=ObjectFactory.findProviderClass(DOM_LEVEL2FD_CLASS,ObjectFactory.findClassLoader(),true);\n        method=clazz.getMethod(DOM_LEVEL2FD_METHOD,twoStringArgs);\n        h.put(VERSION + \"DOM.draftlevel\",\"2.0fd\");\n      }\n catch (      Exception e3) {\n        h.put(ERROR + VERSION + \"DOM.draftlevel\",\"2.0unknown\");\n        h.put(ERROR,ERROR_FOUND);\n      }\n    }\n  }\n catch (  Exception e) {\n    h.put(ERROR + VERSION + \"DOM\",\"ERROR attempting to load DOM level 2 class: \" + e.toString());\n    h.put(ERROR,ERROR_FOUND);\n  }\n}\n", "public Builder addX509Certificate(X509Certificate certificate){\n  certificates.add(certificate);\n  return this;\n}\n", "    public void setWindowMenu(final JMenu menu) {\n        windowMenu = menu;\n        updateWindowMenuIcon();\n    }\n", "\tprotected void addLabelPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_SimpleImage_label_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_SimpleImage_label_feature\", \"_UI_SimpleImage_type\"),\n\t\t\t\t SpemxtcompletePackage.eINSTANCE.getSimpleImage_Label(),\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "private static void loadDataSources(ConfigServerImpl configServer, ConfigImpl config, Document doc, Log log) {\n\ttry {\n\t    // load JDBC Driver definition\n\t    config.setJDBCDrivers(loadJDBCDrivers(configServer, config, doc, log));\n\n\t    // When set to true, makes JDBC use a representation for DATE data that\n\t    // is compatible with the Oracle8i database.\n\t    System.setProperty(\"oracle.jdbc.V8Compatible\", \"true\");\n\n\t    boolean hasCS = configServer != null;\n\t    Map<String, DataSource> datasources = new HashMap<String, DataSource>();\n\n\t    // Copy Parent datasources as readOnly\n\t    if (hasCS) {\n\t\tMap<String, DataSource> ds = configServer.getDataSourcesAsMap();\n\t\tIterator<Entry<String, DataSource>> it = ds.entrySet().iterator();\n\t\tEntry<String, DataSource> entry;\n\t\twhile (it.hasNext()) {\n\t\t    entry = it.next();\n\t\t    if (!entry.getKey().equals(QOQ_DATASOURCE_NAME)) datasources.put(entry.getKey(), entry.getValue().cloneReadOnly());\n\t\t}\n\t    }\n\n\t    // TODO support H2\n\t    // Default query of query DB\n\t    /*\n\t     * setDatasource(datasources, QOQ_DATASOURCE_NAME, \"org.h2.Driver\" ,\"\" ,\"\" ,-1\n\t     * ,\"jdbc:h2:.;MODE=HSQLDB\" ,\"sa\" ,\"\" ,-1 ,-1 ,true ,true ,DataSource.ALLOW_ALL, new StructImpl() );\n\t     */\n\t    // Default query of query DB\n\t    try {\n\t\tsetDatasource(config, datasources, QOQ_DATASOURCE_NAME, new ClassDefinitionImpl(\"org.hsqldb.jdbcDriver\", \"hsqldb\", \"1.8.0\", config.getIdentification()),\n\t\t\t\"hypersonic-hsqldb\", \"\", -1, \"jdbc:hsqldb:.\", \"sa\", \"\", null, DEFAULT_MAX_CONNECTION, -1, 60000, true, true, DataSource.ALLOW_ALL, false, false, null,\n\t\t\tnew StructImpl(), \"\", ParamSyntax.DEFAULT, false, false);\n\t    }\n\t    catch (Exception e) {\n\t\tlog.error(\"Datasource\", e);\n\t    }\n\n\t    SecurityManager sm = config.getSecurityManager();\n\t    short access = sm.getAccess(SecurityManager.TYPE_DATASOURCE);\n\t    int accessCount = -1;\n\t    if (access == SecurityManager.VALUE_YES) accessCount = -1;\n\t    else if (access == SecurityManager.VALUE_NO) accessCount = 0;\n\t    else if (access >= SecurityManager.VALUE_1 && access <= SecurityManager.VALUE_10) {\n\t\taccessCount = access - SecurityManager.NUMBER_OFFSET;\n\t    }\n\n\t    // Databases\n\t    Element databases = getChildByName(doc.getDocumentElement(), \"data-sources\");\n\t    // if(databases==null)databases=doc.createElement(\"data-sources\");\n\n\t    // PSQ\n\t    String strPSQ = getAttr(databases, \"psq\");\n\t    if (StringUtil.isEmpty(strPSQ)) {\n\t\t// prior version was buggy, was the opposite\n\t\tstrPSQ = getAttr(databases, \"preserve-single-quote\");\n\t\tif (!StringUtil.isEmpty(strPSQ)) {\n\t\t    Boolean b = Caster.toBoolean(strPSQ, null);\n\t\t    if (b != null) strPSQ = b.booleanValue() ? \"false\" : \"true\";\n\t\t}\n\t    }\n\t    if (access != SecurityManager.VALUE_NO && !StringUtil.isEmpty(strPSQ)) {\n\t\tconfig.setPSQL(toBoolean(strPSQ, true));\n\t    }\n\t    else if (hasCS) config.setPSQL(configServer.getPSQL());\n\n\t    // Data Sources\n\t    Element[] dataSources = getChildren(databases, \"data-source\");\n\t    if (accessCount == -1) accessCount = dataSources.length;\n\t    if (dataSources.length < accessCount) accessCount = dataSources.length;\n\n\t    // if(hasAccess) {\n\t    JDBCDriver jdbc;\n\t    ClassDefinition cd;\n\t    String id;\n\t    for (int i = 0; i < accessCount; i++) {\n\t\tElement dataSource = dataSources[i];\n\t\tif (dataSource.hasAttribute(\"database\")) {\n\t\t    try {\n\t\t\t// do we have an id?\n\t\t\tjdbc = config.getJDBCDriverById(getAttr(dataSource, \"id\"), null);\n\t\t\tif (jdbc != null && jdbc.cd != null) {\n\t\t\t    cd = jdbc.cd;\n\t\t\t}\n\t\t\telse cd = getClassDefinition(dataSource, \"\", config.getIdentification());\n\n\t\t\t// we only have a class\n\t\t\tif (!cd.isBundle()) {\n\t\t\t    jdbc = config.getJDBCDriverByClassName(cd.getClassName(), null);\n\t\t\t    if (jdbc != null && jdbc.cd != null && jdbc.cd.isBundle()) cd = jdbc.cd;\n\t\t\t}\n\n\t\t\t// still no bundle!\n\t\t\tif (!cd.isBundle()) cd = patchJDBCClass(config, cd);\n\n\t\t\tsetDatasource(config, datasources, getAttr(dataSource, \"name\"), cd, getAttr(dataSource, \"host\"), getAttr(dataSource, \"database\"),\n\t\t\t\tCaster.toIntValue(getAttr(dataSource, \"port\"), -1), getAttr(dataSource, \"dsn\"), getAttr(dataSource, \"username\"),\n\t\t\t\tConfigWebUtil.decrypt(getAttr(dataSource, \"password\")), null, Caster.toIntValue(getAttr(dataSource, \"connectionLimit\"), DEFAULT_MAX_CONNECTION),\n\t\t\t\tCaster.toIntValue(getAttr(dataSource, \"connectionTimeout\"), -1), Caster.toLongValue(getAttr(dataSource, \"metaCacheTimeout\"), 60000),\n\t\t\t\ttoBoolean(getAttr(dataSource, \"blob\"), true), toBoolean(getAttr(dataSource, \"clob\"), true),\n\t\t\t\tCaster.toIntValue(getAttr(dataSource, \"allow\"), DataSource.ALLOW_ALL), toBoolean(getAttr(dataSource, \"validate\"), false),\n\t\t\t\ttoBoolean(getAttr(dataSource, \"storage\"), false), getAttr(dataSource, \"timezone\"), toStruct(getAttr(dataSource, \"custom\")),\n\t\t\t\tgetAttr(dataSource, \"dbdriver\"), ParamSyntax.toParamSyntax(dataSource, ParamSyntax.DEFAULT),\n\t\t\t\ttoBoolean(getAttr(dataSource, \"literal-timestamp-with-tsoffset\"), false), toBoolean(getAttr(dataSource, \"always-set-timeout\"), false)\n\n\t\t\t);\n\t\t    }\n\t\t    catch (Exception e) {\n\t\t\tlog.error(\"Datasource\", e);\n\t\t    }\n\t\t}\n\t    }\n\t    // }\n\t    config.setDataSources(datasources);\n\t}\n\tcatch (Exception e) {\n\t    log(config, log, e);\n\t}\n    }", "ServerMember update(Member.Type type, Instant time) {\n    if (this.type != type) {\n      this.type = Assert.notNull(type, \"type\");\n      if (time.isAfter(updated)) {\n        this.updated = Assert.notNull(time, \"time\");\n      }\n      if (typeChangeListeners != null) {\n        typeChangeListeners.accept(type);\n      }\n    }\n    return this;\n  }", "protected void openKnownLoco(){\n  if (locoBox.getSelectedRosterEntries().length != 0) {\n    RosterEntry re=locoBox.getSelectedRosterEntries()[0];\n    if (log.isDebugEnabled()) {\n      log.debug(\"loco file: \" + re.getFileName());\n    }\n    startProgrammer(null,re,(String)programmerBox.getSelectedItem());\n  }\n else {\n    log.error(\"No roster entry was selected to open.\");\n  }\n}\n", "  public int cardinality() {\n    int cardinality = 0;\n    for (int i = size; --i >= 0;) {\n      if (getQuick(i) != 0) {\n        cardinality++;\n      }\n    }\n    return cardinality;\n  }\n", "public int viewToModel(float fx,float fy,Shape a,Position.Bias[] bias){\n  bias[0]=Position.Bias.Forward;\n  Rectangle alloc=(Rectangle)a;\n  int x=(int)fx;\n  int y=(int)fy;\n  if (y < alloc.y) {\n    return getStartOffset();\n  }\n else   if (y > alloc.y + alloc.height) {\n    return getEndOffset() - 1;\n  }\n else {\n    alloc.height=metrics.getHeight();\n    int line=(alloc.height > 0 ? (y - alloc.y) / alloc.height : lineCount - 1);\n    if (line >= lineCount) {\n      return getEndOffset() - 1;\n    }\n else {\n      int p0=getStartOffset();\n      int p1;\n      if (lineCount == 1) {\n        p1=getEndOffset();\n      }\n else {\n        int[] lineEnds=getLineEnds();\n        p1=p0 + lineEnds[line];\n        if (line > 0) {\n          p0+=lineEnds[line - 1];\n        }\n      }\n      if (x < alloc.x) {\n        return p0;\n      }\n else       if (x > alloc.x + alloc.width) {\n        return p1 - 1;\n      }\n else {\n        Segment segment=SegmentCache.getSharedSegment();\n        loadText(segment,p0,p1);\n        int n=Utilities.getTabbedTextOffset(segment,metrics,alloc.x,x,WrappedPlainView.this,p0);\n        SegmentCache.releaseSharedSegment(segment);\n        return Math.min(p0 + n,p1 - 1);\n      }\n    }\n  }\n}\n", "\tpublic void setFullZoomOptionsEnabled(boolean enabled) {\n\t\tif (enabled)\n\t\t\tfor (Component c : fullZoomPanel.getComponents()) {\n\t\t\t\tc.setForeground(Color.BLACK);\n\t\t\t\tc.setEnabled(true);\n\t\t\t}\n\t\telse\n\t\t\tfor (Component c : fullZoomPanel.getComponents()) {\n\t\t\t\tc.setForeground(Color.LIGHT_GRAY);\n\t\t\t\tc.setEnabled(false);\n\t\t\t}\n\t}\n", "public Collection < XMLElement > consumeChildElements ( Interpreter < Boolean > interpreter ) throws UnableToCompleteException { List < XMLElement > elements = new ArrayList < XMLElement > ( ) ; List < Node > doomed = new ArrayList < Node > ( ) ; NodeList", "public void clear ( ) { for ( TunerConfiguration config : mTunerConfigurations ) { broadcast ( new TunerConfigurationEvent ( config , Event . REMOVE ) ) ; } int size = mTunerConfigurations . size ( ) ; mTunerConfigurations . clear ( ) ; fireTableRowsDeleted ( NUM_ , size - NUM_ ) ; }", "private void visitMopMethodList(List<MethodNode> methods,boolean isThis,Set<MopKey> useOnlyIfDeclaredHereToo,List<String> orNameMentionedHere){\n  HashMap<MopKey,MethodNode> mops=new HashMap<MopKey,MethodNode>();\n  LinkedList<MethodNode> mopCalls=new LinkedList<MethodNode>();\n  for (  MethodNode mn : methods) {\n    if ((mn.getModifiers() & (ACC_ABSTRACT | ACC_BRIDGE)) != 0)     continue;\n    if (mn.isStatic())     continue;\n    boolean isPrivate=Modifier.isPrivate(mn.getModifiers());\n    if (isThis ^ isPrivate)     continue;\n    String methodName=mn.getName();\n    if (isMopMethod(methodName)) {\n      mops.put(new MopKey(methodName,mn.getParameters()),mn);\n      continue;\n    }\n    if (methodName.startsWith(\"<\"))     continue;\n    if (!useOnlyIfDeclaredHereToo.contains(new MopKey(methodName,mn.getParameters())) && !orNameMentionedHere.contains(methodName)) {\n      continue;\n    }\n    String name=getMopMethodName(mn,isThis);\n    MopKey key=new MopKey(name,mn.getParameters());\n    if (mops.containsKey(key))     continue;\n    mops.put(key,mn);\n    mopCalls.add(mn);\n  }\n  generateMopCalls(mopCalls,isThis);\n  mopCalls.clear();\n  mops.clear();\n}\n", "public void deleteStaticGroups(Set groupDNs) throws AMException, SSOException {\n  Iterator iter=groupDNs.iterator();\n  while (iter.hasNext()) {\n    String groupDN=(String)iter.next();\n    AMStaticGroup group=new AMStaticGroupImpl(super.token,groupDN);\n    group.delete();\n  }\n}\n", "public IBinaryTreeNode<T> next(){\n  if (stack.empty()) {\n    throw new java.util.NoSuchElementException(\"Binary Traversal Iterator has no more elements\");\n  }\n  Moment m=stack.peek();\n  advance();\n  return m.node;\n}\n", "public synchronized void postNotification(final String name, final Map<String, Object> userInfo) {\n\t\tApptentiveLog.v(NOTIFICATIONS, \"Post notification: name=%s userInfo={%s}\", name, StringUtils.toString(userInfo));\n\n\t\tfinal ApptentiveNotificationObserverList list = findObserverList(name);\n\t\tif (list != null) {\n\t\t\tlist.notifyObservers(new ApptentiveNotification(name, userInfo));\n\t\t}\n\t}", "protected Map<String, String> getEndpointConfigurationParameters(Map<String, String> parameters,\n                                                                     Class<? extends EndpointConfiguration> endpointConfigurationType) {\n        Map<String, String> params = new HashMap<String, String>();\n\n        for (Map.Entry<String, String> parameterEntry : parameters.entrySet()) {\n            Field field = ReflectionUtils.findField(endpointConfigurationType, parameterEntry.getKey());\n\n            if (field != null) {\n                params.put(parameterEntry.getKey(), parameterEntry.getValue());\n            }\n        }\n\n        return params;\n    }", "    public void initialiseProcessor(String _guid, byte[] _xml) throws NoSuchProcessorException, InitialisationException, MalformedURLException, IOException, NoSuchPropertyException{\n    \tInteractionProcessor ip = processors.get(_guid);\n    \tif(ip == null) throw new NoSuchProcessorException(\"No processor for GUID: \" + _guid);\n    \tip.initialise(_xml);\n    }\n", "public static Annotation findFirstQualifierInAnnotations ( Field field ) { return findFirstQualifierInAnnotations ( field . getAnnotations ( ) ) ; }", "void resumeThread ( long tid ) throws DebugExceptionWrapper ;", "private void initContext(){\n  if (Context.getCurrentContext() == null) {\n    Context.enter();\n  }\n}\n", "public String tableName ( ) { return tblName ; }", "\tprivate void initializeDefaults() {\n\t\tIPreferenceStore store = getPreferenceStore();\n\t\tstore.setDefault(SHOW_IN_BLOCKS, true);\n\t\tstore.setDefault(ALLOW_DUPLICATE_FILE_NAMES, true);\n\t\tstore.setDefault(ASK_CONFIRM_FILE_DELETE, false);\n\t\tstore.setDefault(SHOW_RETRO_LOOKS, false);\n\t\tstore.setDefault(DEFAULT_EXPORT_FILE, DEFAULT_EXPORT_FILE_ID);\n\t}\n", "private void reportError(@NonNull String msg,@NonNull Element e){\n  messager.printMessage(Diagnostic.Kind.ERROR,msg,e);\n}\n", "public static SSLServerSocketFactory makeSSLSocketFactory ( KeyStore loadedKeyStore , KeyManager [ ] keyManagers ) throws IOException { SSLServerSocketFactory res = null ; try { TrustManagerFactory trustManagerFactory = TrustManagerFactory . getInstance ( TrustManagerFactory . getDefaultAlgorithm ( ) ) ; trustManagerFactory . init ( loadedKeyStore ) ; SSLContext ctx = SSLContext . getInstance ( STR_ ) ; ctx . init ( keyManagers , trustManagerFactory . getTrustManagers ( ) , null ) ; res = ctx . getServerSocketFactory ( ) ; } catch ( Exception e ) { throw new IOException ( e . getMessage ( ) ) ; } return res ; }", "protected void addImage(PdfContext context, ImageResult imageResult) throws BadElementException, IOException {\n\t\tBbox imageBounds = imageResult.getRasterImage().getBounds();\n\t\tfloat scaleFactor = (float) (72 / getMap().getRasterResolution());\n\t\tfloat width = (float) imageBounds.getWidth() * scaleFactor;\n\t\tfloat height = (float) imageBounds.getHeight() * scaleFactor;\n\t\t// subtract screen position of lower-left corner\n\t\tfloat x = (float) (imageBounds.getX() - rasterScale * bbox.getMinX()) * scaleFactor;\n\t\t// shift y to lowerleft corner, flip y to user space and subtract\n\t\t// screen position of lower-left\n\t\t// corner\n\t\tfloat y = (float) (-imageBounds.getY() - imageBounds.getHeight() - rasterScale * bbox.getMinY()) * scaleFactor;\n\t\tif (log.isDebugEnabled()) {\n\t\t\tlog.debug(\"adding image, width=\" + width + \",height=\" + height + \",x=\" + x + \",y=\" + y);\n\t\t}\n\t\t// opacity\n\t\tlog.debug(\"before drawImage\");\n\t\tcontext.drawImage(Image.getInstance(imageResult.getImage()), new Rectangle(x, y, x + width, y + height),\n\t\t\t\tgetSize(), getOpacity());\n\t\tlog.debug(\"after drawImage\");\n\t}", "\tpublic void deleteByTabId(String tabId) {\n\t\tHibernateTemplate templete = super.getHibernateTemplate();\n\t\tList tabLayouts = templete.findByCriteria(DetachedCriteria.forClass(\n\t\t\t\tTabLayout.class).add(Expression.eq(\"id.Tabid\", tabId)).add(\n\t\t\t\tExpression.eq(\"id.Temp\", TabLayout.TEMP_TRUE)));\n\n\t\tsuper.getHibernateTemplate().deleteAll(tabLayouts);\n\t}\n", "public final void update(byte input) throws IllegalStateException {\n  chooseFirstProvider();\n  if (initialized == false) {\n    throw new IllegalStateException(\"MAC not initialized\");\n  }\n  spi.engineUpdate(input);\n}\n", "public GondolaRc ( ) throws Exception { config = new Config ( new File ( STR_ ) ) ; for ( String h : config . getHostIds ( ) ) { for ( String s : config . getShardIds ( h ) ) { if ( s . equals ( STR_ ) ) { gondolas . add ( new Gondola ( config , h ) ) ; }", "public void setProperties(\n\t\t\tPoint3d centerPoint,\n\t\t\tVector3d axis1Vector,\n\t\t\tVector3d axis2Vector,\n\t\t\tDoubleProperty axis1Extent, DoubleProperty axis2Extent, DoubleProperty axis3Extent,\n\t\t\tCoordinateSystem3D system) {\n\t\tassert (system != null);\n\t\tthis.center.set(centerPoint);\n\t\tthis.axis1.set(axis1Vector);\n\t\tthis.axis2.set(axis2Vector);\n\t\tif (system.isLeftHanded()) {\n\t\t\tthis.axis3.set(this.axis1.crossLeftHand(this.axis2));\n\t\t} else {\n\t\t\tthis.axis3.set(this.axis1.crossRightHand(this.axis2));\n\t\t}\n\t\tthis.extent1Property = axis1Extent;\n\t\tthis.extent2Property = axis2Extent;\n\t\tthis.extent3Property = axis3Extent;\n\t}", "public SumTask ( Class < R > reduceType , Task < T > task ) throws IllegalArgumentException { super ( task ) ; this . reducer = new SumReducer < T , R > ( reduceType ) ; }", "\tpublic void updateParents(NameGenerator generator) throws IOException{\n\t\tfor (Report parent : parents){\n\t\t\tupdateParent(parent, generator);\n\t\t}\n\t}\n", "    public String getServiceCallResultField() {\n        if (getServiceProvider() != null) {\n            NodeList fieldMappings = getServiceProvider().getElementsByTagName(\"fieldMapping\");\n            for (int index = 0; index < fieldMappings.getLength(); index++) {\n                if (fieldMappings.item(index).getNodeType() == Node.ELEMENT_NODE &&\n                        ((Element)fieldMappings.item(index)).hasAttribute(\"serviceCallResult\")) {\n                    return ((Element)fieldMappings.item(index)).getAttribute(\"serviceCallResult\");\n                }\n            }\n            return null;\n        } else {\n            return null;\n        }\n    }\n", "protected void clearInvocationCaches ( ) { metaMethodIndex . clearCaches ( ) ; }", "\tpublic List getPropertyDescriptors(Object object) {\n\t\tif (itemPropertyDescriptors == null) {\n\t\t\tsuper.getPropertyDescriptors(object);\n\n\t\t\taddNotesbitmapPropertyDescriptor(object);\n\t\t\taddRepeatPropertyDescriptor(object);\n\t\t}\n\t\treturn itemPropertyDescriptors;\n\t}\n", "private static String normalize(StringBuilder sb,String path,int off){\n  int len=path.length();\n  off=nextNonSlash(path,off,len);\n  int start=off;\n  char lastC=0;\n  while (off < len) {\n    char c=path.charAt(off);\n    if (isSlash(c)) {\n      if (lastC == ' ')       throw new InvalidPathException(path,\"Trailing char <\" + lastC + \">\",off - 1);\n      sb.append(path,start,off);\n      off=nextNonSlash(path,off,len);\n      if (off != len)       sb.append('\\\\');\n      start=off;\n    }\n else {\n      if (isInvalidPathChar(c))       throw new InvalidPathException(path,\"Illegal char <\" + c + \">\",off);\n      lastC=c;\n      off++;\n    }\n  }\n  if (start != off) {\n    if (lastC == ' ')     throw new InvalidPathException(path,\"Trailing char <\" + lastC + \">\",off - 1);\n    sb.append(path,start,off);\n  }\n  return sb.toString();\n}\n", "    protected void setLanguage(Locale locale){\n        super.putValue(Action.NAME,Configuration.getString(getClass(),0,locale));\n        super.putValue(SHORT_DESCRIPTION,Configuration.getString(getClass(),1,locale));\n        table.validate();\n    }\n", "    public void removeAllRequests() {\n        \n        synchronized(activeRequests) {\n            activeRequests.clear();\n        }\n    }\n", "    private IElement getElementWithText(String elementName, String text) {\n    \tfor (IElement e : getTestingEngine().getElementsByXPath(\"//\" + elementName)) {\n    \t\tif (elementName.equals(e.getName()) && text.equals(e.getTextContent())) {\n    \t\t\treturn e;\n    \t\t}\n    \t}\n    \treturn null;\n    }\n", "\tprivate void layoutLongish (int x, int y, int width, int height) {\n\t\tlogger.debug(\"Long X: \" + x + \" Y: \" + y + \" Width: \" + width + \" Height: \" + height);\n\t\tModuleWithParameter module;\n\t\t\n\t\t//calculate height for every module\n\t\tint heightPerModule = (int) Math.ceil((double)height / (double)modulesLong.size());\n\t\tint yPos = 0;\n\t\t\n\t\t//add modules\n\t\tfor (int i = 0; i < modulesLong.size(); i++) {\n\t\t\tmodule = modulesLong.get(i);\n\t\t\tyPos = y + i * heightPerModule;\n\t\t\t\n\t\t\t((RGBRendererParameter)module.getRendererParameter()).getPanel().setBounds(\n\t\t\t\t\tx, \n\t\t\t\t\tyPos, \n\t\t\t\t\twidth, \n\t\t\t\t\theightPerModule\n\t\t\t\t\t);\n\t\t}\n\t}\n", "    public void fireEntityAdded(final OdorWorldEntity entity) {\n        for (WorldListener listener : listenerList) {\n            listener.entityAdded(entity);\n        }\n    }\n", "public void add(Expression interpolatedValue){\n  elements.add(interpolatedValue);\n  interpolatedValue.setParent(this);\n}", "private static boolean polylineRelateEnvelope_(Polyline polyline_a,\n\t\t\tEnvelope envelope_b, double tolerance, int relation,\n\t\t\tProgressTracker progress_tracker) {\n\t\tif (polylineDisjointEnvelope_(polyline_a, envelope_b, tolerance,\n\t\t\t\tprogress_tracker)) {\n\t\t\tif (relation == Relation.disjoint)\n\t\t\t\treturn true;\n\n\t\t\treturn false;\n\t\t} else if (relation == Relation.disjoint) {\n\t\t\treturn false;\n\t\t}\n\n\t\tswitch (relation) {\n\t\tcase Relation.within:\n\t\t\treturn polylineWithinEnvelope_(polyline_a, envelope_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\n\t\tcase Relation.contains:\n\t\t\treturn polylineContainsEnvelope_(polyline_a, envelope_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\n\t\tcase Relation.equals:\n\t\t\treturn polylineEqualsEnvelope_(polyline_a, envelope_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\n\t\tcase Relation.touches:\n\t\t\treturn polylineTouchesEnvelope_(polyline_a, envelope_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\n\t\tcase Relation.overlaps:\n\t\t\treturn polylineOverlapsEnvelope_(polyline_a, envelope_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\n\t\tcase Relation.crosses:\n\t\t\treturn polylineCrossesEnvelope_(polyline_a, envelope_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\n\t\tdefault:\n\t\t\tbreak; // warning fix\n\t\t}\n\n\t\treturn false;\n\t}", "public PCollection<E> minus(Object e) {\n\t\treturn Empty.<E>vector().plusAll(this).minus(e);\n\t}", "public Stream ( String name ) { this . name = name ; parsedColor = DEFAULT_COLOR ; inHomeView = BOOL_ ; inviteOnly = BOOL_ ; }", "public void stop(){\n  run=false;\n  printer.interrupt();\n}\n", "    protected boolean shouldUpdateStyleOnEvent(PropertyChangeEvent ev) {\n        String eName = ev.getPropertyName();\n        if (\"name\" == eName || \"componentOrientation\" == eName) {\n            return true;\n        }\n        if (\"ancestor\" == eName && ev.getNewValue() != null) {\n            // Only update on an ancestor change when getting a valid\n            // parent and the LookAndFeel wants this.\n            return shouldUpdateStyleOnAncestorChanged();\n        }\n        return false;\n    }\n", "public void initialize(Callbacks callbacks){\nsynchronized (mLock) {\n    mCallbacks=new WeakReference<Callbacks>(callbacks);\n  }\n}\n", "    public void close() throws java.io.IOException {\n        flush();\n        if (!doclose || out == null) {\n            return;\n        }\n\n        out.close();\n        out = null;\n    }\n", "public static byte [ ] decode ( byte [ ] input , int offset , int len ) { return Base64 . decode ( input , offset , len , BASE64_FLAG ) ; }", "public Builder task(Object parent,Object id,Runnable runnable){\n  tasks.add(new TaskWrapper(parent,id,runnable));\n  return this;\n}\n", "@BetaApi\n  public final TargetPoolInstanceHealth getHealthTargetPool(\n      String targetPool, InstanceReference instanceReferenceResource) {\n\n    GetHealthTargetPoolHttpRequest request =\n        GetHealthTargetPoolHttpRequest.newBuilder()\n            .setTargetPool(targetPool)\n            .setInstanceReferenceResource(instanceReferenceResource)\n            .build();\n    return getHealthTargetPool(request);\n  }", "    public boolean isSet() {\n        return set;\n    }\n", "public ValueNumber forNumber(int number) {\n        if (number >= getNumValuesAllocated()) {\n            throw new IllegalArgumentException(\"Value \" + number + \" has not been allocated\");\n        }\n        return allocatedValueList.get(number);\n    }", "protected void addSocket ( IceSocketWrapper socket , TransportAddress remoteAddress ) { Transport transport = socket . getUDPSocket ( ) != null ? Transport . UDP : Transport . TCP ; TransportAddress localAddress = new TransportAddress ( socket . getLocalAddress ( ) , socket . getLocalPort ( ) , transport ) ; final Map < TransportAddress , Map < TransportAddress , Connector > > connectorsMap = ( transport == Transport . UDP ) ? udpConnectors : tcpConnectors ; synchronized ( connectorsMap ) { Map < TransportAddress , Connector > connectorsForLocalAddress = connectorsMap . get ( localAddress ) ; if ( connectorsForLocalAddress == null ) { connectorsForLocalAddress = new HashMap < > ( ) ; connectorsMap . put ( localAddress , connectorsForLocalAddress ) ; } if ( ! connectorsForLocalAddress . containsKey ( remoteAddress ) ) { Connector connector = new Connector ( socket , remoteAddress , messageQueue , this ) ; connectorsForLocalAddress . put ( remoteAddress , connector ) ; connector . start ( ) ; } else { logger . info ( STR_ + STR_ + localAddress + STR_ + remoteAddress ) ; } } }", "    private int getOffsetX() {\n\tPointDouble center = World.getInstance().getCenterOfView();\n\treturn (int)(center.getX() * TILE_WIDTH - getWidth()/2 + TILE_WIDTH/2);\n    }\n", "public ChangeModifiers remove ( ChangeModifiers modifiers ) { return createIfNeeded ( super . remove ( modifiers ) ) ; }", "    public String edit(int iEditMode) {\n        return HtmlForm.intField(cLabel, cName, iValue, iEditMode);\n    }\n", "    public void setUnselectedColor(Color color) {\n        if (color != fUnselectedColor) {\n            Color oldColor = fUnselectedColor;\n            try {\n                fUnselectedColor = color;\n                fChangeSupport.fireVetoableChange(TimeLineNode.UNSELECTED_COLOR,\n                        oldColor, color);\n\n            } catch (DetailedPropertyVetoException ex) {\n                fUnselectedColor = oldColor;\n            } catch (PropertyVetoException ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n", "@Override\n    public CreateInputResult createInput(CreateInputRequest request) {\n        request = beforeClientExecution(request);\n        return executeCreateInput(request);\n    }", "public static Orientation getOrientation(@NonNull final Context context) {\n        Condition.INSTANCE.ensureNotNull(context, \"The context may not be null\");\n        int orientation = context.getResources().getConfiguration().orientation;\n\n        if (orientation == Configuration.ORIENTATION_UNDEFINED) {\n            int width = getDisplayWidth(context);\n            int height = getDisplayHeight(context);\n\n            if (width > height) {\n                return Orientation.LANDSCAPE;\n            } else if (width < height) {\n                return Orientation.PORTRAIT;\n            } else {\n                return Orientation.SQUARE;\n            }\n        } else if (orientation == Configuration.ORIENTATION_LANDSCAPE) {\n            return Orientation.LANDSCAPE;\n        } else if (orientation == Configuration.ORIENTATION_PORTRAIT) {\n            return Orientation.PORTRAIT;\n        } else {\n            return Orientation.SQUARE;\n        }\n    }", "public void addDependency ( Dependency dependency ) { if ( dependencies == null ) { dependencies = new ArrayList < Dependency > ( ) ; nodeDependencies = new ArrayList < Node > ( ) ; } dependencies . add ( dependency ) ; if ( ! nodeDependencies . contains ", "@Override\n    public boolean accept( final AuditLogEntry entry ) {\n        if ( !acceptedTypes.containsKey( entry.getGenericType() ) ) {\n            return false;\n        }\n        return acceptedTypes.get( entry.getGenericType() );\n    }", "public void restart(String resourceGroupName, String containerGroupName) {\n        restartWithServiceResponseAsync(resourceGroupName, containerGroupName).toBlocking().last().body();\n    }", "public synchronized Section createSection(final String name,final IAddress startAddress,final IAddress endAddress,final SectionPermission sectionPermission,final byte[] data) throws CouldntSaveDataException {\n  Preconditions.checkNotNull(name,\"Error: name argument can not be null\");\n  Preconditions.checkNotNull(startAddress,\"Error: startAddress argument can not be null\");\n  Preconditions.checkNotNull(endAddress,\"Error: endAddress argument can not be null\");\n  Preconditions.checkNotNull(sectionPermission,\"Error: sectionPermission argument can not be null\");\n  final Section section=backend.createSection(name,startAddress,endAddress,sectionPermission,data);\n  sections.add(section);\n  sectionsById.put(section.getId(),section);\n  return section;\n}\n", "    private List getPluginClassList(List pluginFileList) {\n        ArrayList l = new ArrayList();\n        for(Iterator i = pluginFileList.iterator(); i.hasNext();) {\n            URL url = (URL)i.next();\n            log.debug(\"Trying file \" + url.toString());\n            try {\n                BufferedReader r = new BufferedReader(new InputStreamReader(url\n                        .openStream(), \"utf-8\"));\n                String line;\n                while ((line = r.readLine()) != null) {\n                    line = line.trim();\n                    if (line.length() == 0 || line.charAt(0) == '#')\n                        continue;\n                    l.add(line);\n                }\n            } catch (Exception e) {\n                log.warn(\"Could not load \" + url, e);\n            }\n        }\n        return l;\n    }\n", "@MethodDesc(description=\"Confirm service liveness\",usage=\"isAlive\") public boolean isAlive(){\n  return true;\n}", "public HashMap<String,Object> execute(Execution event, Map<String,Object> args) throws PersistenceException {\n        Map<String,Object> r = execute(event.getClass(), args);\n        \n        if( r == null ) {\n            return null;\n        }\n        if( r instanceof HashMap ) {\n            return (HashMap<String,Object>)r;\n        }\n        else {\n            HashMap<String,Object> tmp = new HashMap<String,Object>();\n            \n            tmp.putAll(r);\n            return tmp;\n        }\n    }", "public Signature spread(String baseName, int count) {\n        String[] spreadNames = new String[count];\n\n        for (int i = 0; i < count; i++) spreadNames[i] = baseName + i;\n\n        return spread(spreadNames);\n    }", "public static void shuffle(List<?> list,java.util.Random random){\n  @SuppressWarnings(\"unchecked\") final List<Object> objectList=(List<Object>)list;\n  if (list instanceof RandomAccess) {\n    for (int i=objectList.size() - 1; i > 0; i--) {\n      int index=random.nextInt(i + 1);\n      objectList.set(index,objectList.set(i,objectList.get(index)));\n    }\n  }\n else {\n    Object[] array=objectList.toArray();\n    for (int i=array.length - 1; i > 0; i--) {\n      int index=random.nextInt(i + 1);\n      Object temp=array[i];\n      array[i]=array[index];\n      array[index]=temp;\n    }\n    int i=0;\n    ListIterator<Object> it=objectList.listIterator();\n    while (it.hasNext()) {\n      it.next();\n      it.set(array[i++]);\n    }\n  }\n}\n", "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=new Vector<Option>();\n  result.addElement(new Option(\"\\tThe class index\\n\" + \"\\t(default: last)\",\"c\",1,\"-c <class index>\"));\n  result.addAll(Collections.list(super.listOptions()));\n  return result.elements();\n}\n", "\tpublic ByteArrayOutputStream compressObject(Object obj) {\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\t//time measurement\n\t\t//long start = new Date().getTime();\n\n\t\ttry {\n\t\t\tGZIPOutputStream lzfos = new GZIPOutputStream(baos);//LZFOutputStream(baos); //GZIPOutputStream\n\t\t\tObjectOutputStream oos = new ObjectOutputStream(lzfos); //lzfos\n\t\t\toos.writeObject(obj);\n\t\t    oos.flush();\n\t\t    oos.close();\n\t\t    lzfos.close(); //?\n\t\t    baos.close();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t\n\t\t//long runningTime = new Date().getTime() - start;\n\t\t//System.out.println(\"Time for compression: \" + runningTime);\n\t\t\n\t\treturn baos;\n\t}\n", "public void writeTo(OutputStream outputStream) throws IOException {\n  outputStream.write(getBytes());\n}\n", "public CreateMediaResourceResponse createMediaResource(\n            String sourceUrl,\n            String title,\n            String description,\n            String transcodingPresetGroupName,\n            int priority) {\n        return createMediaResource(\n                sourceUrl, title, description, transcodingPresetGroupName, priority, null);\n    }", "    public Binding bindToNewObject( Object newBoundItem ) {\n        return new Binding( translator, newBoundItem, this.getGetterName(), this.getSetterName(), -1 );\n    }\n", "public void close(){\n  try {\n    conn.close();\n  }\n catch (  SQLException e) {\n    throw convert(e);\n  }\n}\n", "  public boolean equals(Object a_other) {\n    if (a_other == null) {\n      return false;\n    }\n    else {\n      try {\n        AddAndStoreTerminal other = (AddAndStoreTerminal) a_other;\n        return new EqualsBuilder()\n            .append(m_storageName, ", "public DIssuerAlternativeName(JDialog parent,byte[] value) throws IOException {\n  super(parent);\n  setTitle(res.getString(\"DIssuerAlternativeName.Title\"));\n  initComponents();\n  prepopulateWithValue(value);\n}\n", "public CRemoteFileBrowser ( final Window parent , final IDebugger debugger , final RemoteFileSystem fileSystem ) { super ( new CRemoteFileSystemView ( fileSystem ) ) ; this . parent = Preconditions . checkNotNull ( parent , STR_ ) ; this . debugger = Prec", "public void unwrap(InputStream inStream, OutputStream outStream,\n                       MessageProp msgProp)\n        throws GSSException {\n        throw new GSSException(GSSException.UNAVAILABLE);\n    }", "public <T>T withFeature(final Feature feature,final Supplier<T> isSet,final Supplier<T> isNotSet){\n  return hasFeature(feature) ? isSet.get() : isNotSet.get();\n}\n", "    public String getTranslatorUrlEscaped(String word) {\n        String result = getTranslatorUrlEscaped();\n        word = word.replace(' ', '+');\n        String languageSrc = P_LANG_LOCAL.of(this).getCountry().toLowerCase();\n        String languageTar = P_LANG_FOREIGN.of(this).getCountry().toLowerCase();\n\n        if (languageSrc.length()==0) {\n            languageSrc = P_LANG_LOCAL.of(this).getLanguage().toLowerCase();\n        }\n        if (languageTar.length()==0) {\n            languageTar = P_LANG_FOREIGN.of(this).getLanguage().toLowerCase();\n        }\n\n        result = MessageFormat.format(result, word, languageSrc, languageTar);\n\n        return result;\n    }\n", "public int length() {\n        Opcode opcode = getOpcode();\n        if (opcode == null)\n            return 1;\n\n        switch (opcode) {\n            case TABLESWITCH: {\n                int pad = align(pc + 1) - pc;\n                int low = getInt(pad + 4);\n                int high = getInt(pad + 8);\n                return pad + 12 + 4 * (high - low + 1);\n            }\n            case LOOKUPSWITCH: {\n                int pad = align(pc + 1) - pc;\n                int npairs = getInt(pad + 4);\n                return pad + 8 + 8 * npairs;\n\n            }\n            default:\n                return opcode.kind.length;\n        }\n    }", "public static void convertRoot(ConfigurationImpl configuration, RootDoc rd,\n            DocPath outputdir) {\n        new SourceToHTMLConverter(configuration, rd, outputdir).generate();\n    }", "protected static Document getDocument(InputStream in)\n            throws Exception {\n        DocumentBuilder builder = XmlTransformUtility.borrowDocumentBuilder();\n        Document doc = null;\n        try {\n            doc = builder.parse(in);\n        } finally {\n            XmlTransformUtility.returnDocumentBuilder(builder);\n        }\n        return doc;\n    }", "public static boolean canScrollHorizontal ( View v , int direction ) { ScrollDetector imples = getImplements ( v ) ; if ( null == imples ) { return BOOL_ ; } return imples . canScrollHorizontal ( v , direction ) ; }", "public static <K> Map<K, Integer> rankMapOnIntegerValue(Map<K, Integer> inputMap) {\n    Map<K, Integer> newMap = new TreeMap<K, Integer>(new IntegerValueComparator(inputMap));\n    newMap.putAll(inputMap);\n\n    Map<K, Integer> linkedMap = new LinkedHashMap<K, Integer>(newMap);\n    return linkedMap;\n  }", "   public Vector getParameterDescriptors() {\n      Constant c;\n      TypeDescriptor td;\n      String typename;\n\n      if (params != null) return params;\n      params = new Vector();\n      try {c = cp.get(descriptor);}\n      catch (Exception e) { return params; }\n      if (!(c instanceof UTFConstant)) return params;\n      typename = ((UTFConstant)c).getValue();\n      int pos = 1;\n      try {\n         while (typename.charAt(pos) != ')') {\n\t    params.add(new TypeDescriptor(typename.substring(pos)));\n\t    if (typename.charAt(pos) == 'L') {\n\t       // Advance to next parameter type.\n\t       pos += typename.substring(pos).indexOf(';');\n\t       }\n\t    else pos++;\n\t    }\n\t }\n      catch (Exception e) {\n         params.add(new TypeDescriptor(\"-\"));\n\t }\n      return params;\n      }\n", "    public void dispose() {\n        urlLocation = null;\n        url = null;\n        errorMessage = null;\n        closeConnection();\n    }\n", "private void putNamespaces(XMLStreamReader reader){\n  for (int i=0; i < reader.getNamespaceCount(); i++) {\n    final String prefix=reader.getNamespacePrefix(i);\n    if (prefix != null) {\n      putNamespace(prefix,reader.getNamespaceURI(i));\n    }\n  }\n}\n", "public TiledGrayscaleMatrix(final GrayscaleMatrix matrix,final int tileWidth,final int tileHeight){\n  if (matrix.getWidth() < tileWidth || matrix.getHeight() < tileHeight) {\n    throw new IllegalArgumentException(\"Tile size must be smaller than original matrix!\");\n  }\n  if (tileWidth <= 0 || tileHeight <= 0) {\n    throw new IllegalArgumentException(\"Illegal tile size!\");\n  }\n  this.tileWidth=tileWidth;\n  this.tileHeight=tileHeight;\n  this.tilesX=matrix.getWidth() / tileWidth;\n  this.tilesY=matrix.getHeight() / tileHeight;\n  int roundedWidth=tilesX * tileWidth;\n  int roundedHeight=tilesY * tileHeight;\n  tiles=new ArrayList<GrayscaleMatrix>(roundedWidth * roundedHeight);\n  for (int i=0; i < tilesY; i++) {\n    for (int j=0; j < tilesX; j++) {\n      tiles.add(GrayscaleMatrix.createFromRegion(matrix,tileWidth,tileHeight,this.tileWidth * j,this.tileHeight * i));\n    }\n  }\n}\n", "public void paintIcon(Component c,Graphics g,int x,int y){\n  _x=x;\n  _y=y;\n  _cancelIcon.paintIcon(c,g,x,y);\n}\n", "public PermitsPool removeListener(AvailabilityListener listener) {\n        synchronized (listeners) {\n            for (Iterator<WeakReference<AvailabilityListener>> iter\n                = listeners.iterator(); iter.hasNext();) {\n                WeakReference<AvailabilityListener> item = iter.next();\n                if (item.get() == null || item.get() == listener) {\n                    iter.remove();\n                }\n            }\n        }\n        return this;\n    }", "public void notifyListeners ( ) throws IdentityProviderServiceException { for ( IdentityProviderListener listener : identityProviderListeners . values ( ) ) { listener . identityProviderConfigChanged ( ) ; } }", "protected VoltTable.ColumnInfo getColumnInfo(String typeName, String colName) {\n        if (typeName.equalsIgnoreCase(\"VARCHAR\"))\n            return new VoltTable.ColumnInfo(colName, VoltType.STRING);\n        else if (typeName.equalsIgnoreCase(\"TINYINT\"))\n            return new VoltTable.ColumnInfo(colName, VoltType.TINYINT);\n        else if (typeName.equalsIgnoreCase(\"SMALLINT\"))\n            return new VoltTable.ColumnInfo(colName, VoltType.SMALLINT);\n        else if (typeName.equalsIgnoreCase(\"INTEGER\"))\n            return new VoltTable.ColumnInfo(colName, VoltType.INTEGER);\n        else if (typeName.equalsIgnoreCase(\"BIGINT\"))\n            return new VoltTable.ColumnInfo(colName, VoltType.BIGINT);\n        else if (typeName.equalsIgnoreCase(\"DECIMAL\"))\n            return new VoltTable.ColumnInfo(colName, VoltType.DECIMAL);\n        else if (typeName.equalsIgnoreCase(\"FLOAT\"))\n            return new VoltTable.ColumnInfo(colName, VoltType.FLOAT);\n        else if (typeName.equalsIgnoreCase(\"TIMESTAMP\"))\n            return new VoltTable.ColumnInfo(colName, VoltType.TIMESTAMP);\n        else if (typeName.equalsIgnoreCase(\"VARBINARY\"))\n            return new VoltTable.ColumnInfo(colName, VoltType.VARBINARY);\n        else if (typeName.equalsIgnoreCase(\"CHARACTER\"))\n            return new VoltTable.ColumnInfo(colName, VoltType.STRING);\n        else\n            throw new ExpectedProcedureException(\"Trying to create a column in \" + m_database_type\n                    + \" Backend with a (currently) unsupported type: \" + typeName);\n    }", "private java.util.Iterator findParentGroupsForEntity(String memberKey, int type)\n            throws GroupsException {\n        Connection conn = null;\n        Collection groups = new ArrayList();\n        IEntityGroup eg = null;\n\n        try {\n            conn = RDBMServices.getConnection();\n            String sql = getFindParentGroupsForEntitySql();\n            PreparedStatement ps = conn.prepareStatement(sql);\n            try {\n                ps.setString(1, memberKey);\n                ps.setInt(2, type);\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\n                            \"RDBMEntityGroupStore.findParentGroupsForEntity(): \"\n                                    + ps\n                                    + \" (\"\n                                    + memberKey\n                                    + \", \"\n                                    + type\n                                    + \", memberIsGroup = F)\");\n                ResultSet rs = ps.executeQuery();\n                try {\n                    while (rs.next()) {\n                        eg = instanceFromResultSet(rs);\n                        groups.add(eg);\n                    }\n                } finally {\n                    rs.close();\n                }\n            } finally {\n                ps.close();\n            }\n        } catch (Exception e) {\n            LOG.error(\"RDBMEntityGroupStore.findParentGroupsForEntity(): \" + e);\n            throw new GroupsException(\"Problem retrieving containing groups: \" + e);\n        } finally {\n            RDBMServices.releaseConnection(conn);\n        }\n\n        return groups.iterator();\n    }", "private static boolean stubClassExists(Class<?> remoteClass){\n  if (!withoutStubs.containsKey(remoteClass)) {\n    try {\n      Class.forName(remoteClass.getName() + \"_Stub\",false,remoteClass.getClassLoader());\n      return true;\n    }\n catch (    ClassNotFoundException cnfe) {\n      withoutStubs.put(remoteClass,null);\n    }\n  }\n  return false;\n}\n", "    private void setNumberOfSuccessesInternal(int num) {\n        if (num < 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                    \"number of successes must be non-negative ({0})\", num);\n        }\n        numberOfSuccesses = num;\n    }\n", "public long dateHeader ( final String name , final long defaultValue ) throws HttpRequestException { closeOutputQuietly ( ) ; return getConnection ( ) . getHeaderFieldDate ( name , defaultValue ) ; }", "public ObjectInputStreamWithLoader(InputStream in,ClassLoader loader) throws IOException, StreamCorruptedException {\n  super(in);\n  if (loader == null) {\n    throw new IllegalArgumentException(\"Illegal null argument to ObjectInputStreamWithLoader\");\n  }\n  this.loader=loader;\n}\n", "public boolean removeOrderbookCallback(final BitfinexOrderBookSymbol symbol,\n\t\t\tfinal BiConsumer<BitfinexOrderBookSymbol, BitfinexOrderBookEntry> callback) throws BitfinexClientException {\n\t\treturn channelCallbacks.removeCallback(symbol, callback);\n\t}", "public void marshall(ListObjectAttributesRequest listObjectAttributesRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (listObjectAttributesRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(listObjectAttributesRequest.getDirectoryArn(), DIRECTORYARN_BINDING);\n            protocolMarshaller.marshall(listObjectAttributesRequest.getObjectReference(), OBJECTREFERENCE_BINDING);\n            protocolMarshaller.marshall(listObjectAttributesRequest.getNextToken(), NEXTTOKEN_BINDING);\n            protocolMarshaller.marshall(listObjectAttributesRequest.getMaxResults(), MAXRESULTS_BINDING);\n            protocolMarshaller.marshall(listObjectAttributesRequest.getConsistencyLevel(), CONSISTENCYLEVEL_BINDING);\n            protocolMarshaller.marshall(listObjectAttributesRequest.getFacetFilter(), FACETFILTER_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public static String removeHashbang(String url){\n  return url.replaceFirst(\"#!\",\"\");\n}\n", "\tpublic void setTooltip(Popup popup) {\n\t\t// ZK-816, component keep wrong tooltip reference if set tooltip before tooltip attached\n\t\tsetTooltip(popup != null && popup.getPage() != null ? \"uuid(\" + popup.getUuid() + \")\": null);\n\t\tif (popup != null && popup.getPage() == null)\n\t\t\t\ttooltipInst = popup;\n\t}\n", "public void load ( String configFileName ) throws ConfigurationException { props = getConfiguration ( configFileName ) ; if ( props != null ) { props . applyProperties ( this , BOOL_ ) ; } }", "public static void loadExcludesFile(String fileName) throws IOException {\n  loadExcludesFile(new File(fileName));\n}\n", "public Iterator < EdgeType > incomingEdgeIterator ( VertexType target ) ;", "void resortPriorities(){\n  Collections.sort(prioritySortedNeuronList,priorityComparator);\n}\n", "public static int hsb(float h,float s,float b){\n  return Color.HSBtoRGB(h,s,b);\n}\n", "\tpublic EXmlTag addSubTag (String tagName) {\n\t\tif (DEBUG) {\n\t\t\tSystem.out.println(\"EXmlTabbedPaneParser.addSubTag \" + tagName);\n\t\t}\n\n\t\tif (tagName.equals(\"elem\")) {\n\t\t\treturn new ElemTag(_layout);\n\t\t}\n\t\treturn super.addSubTag(tagName);\n\t}\n", "public Observable<Map<String, String>> getAsync(String resourceGroupName, String clusterName, String configurationName) {\n        return getWithServiceResponseAsync(resourceGroupName, clusterName, configurationName).map(new Func1<ServiceResponse<Map<String, String>>, Map<String, String>>() {\n            @Override\n            public Map<String, String> call(ServiceResponse<Map<String, String>> response) {\n                return response.body();\n            }\n        });\n    }", "\tpublic void translate(int x, int y) {\n\t\toriginX += x;\n\t\toriginY += y;\n\t}\n", "public static org . opencv . engine . OpenCVEngineInterface asInterface ( android . os . IBinder obj ) { if ( ( obj == null ) ) { return null ; } android . os . IInterface iin = obj . queryLocalInterface ( DESCRIPTOR ) ; if ( ( ( iin != null ) && ( iin in", "private boolean inBounds(final int x,final int y){\n  return x >= 0 && x < m_bufferedImage.getWidth(null) && y >= 0 && y < m_bufferedImage.getHeight(null);\n}\n", "public boolean isEnabled(LintCategory lc){\n  return values.contains(lc);\n}\n", "protected void addSeesPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Machine_sees", "public static boolean isStatic ( final Field field ) { return Modifier . isStatic ( field . getModifiers ( ) ) ; }", "public String[] getResourceInfo(CmsResource resource) {\r\n\r\n        String rootPath = resource.getRootPath();\r\n        String title = \"-\";\r\n\r\n        try {\r\n            CmsProperty titleProp = m_adminCms.readPropertyObject(\r\n                resource,\r\n                CmsPropertyDefinition.PROPERTY_TITLE,\r\n                false);\r\n            if (!titleProp.isNullProperty()) {\r\n                title = titleProp.getValue();\r\n            }\r\n        } catch (CmsException e) {\r\n            // ignore\r\n        }\r\n        return new String[] {rootPath, title};\r\n    }", "\tpublic void storeLastPVPActionTime() {\n\t\tput(\"last_pvp_action_time\", System.currentTimeMillis());\n\t}\n", "public void start ( ) throws IOException , StunException { sock = new IceUdpSocketWrapper ( new SafeCloseDatagramSocket ( localAddress ) ) ; stunStack . addSocket ( sock ) ; requestSender = new BlockingRequestSender ( stunStack , localAddress ) ; started ", "private void loadWorkflow(Properties ctx,int AD_Workflow_ID,HttpSession sess){\n  MWorkflow wf=new MWorkflow(ctx,AD_Workflow_ID,null);\n  MWFNode[] nodes=wf.getNodes(true,Env.getContextAsInt(ctx,\"#AD_Client_ID\"));\n  MWFNode wfn=null;\n  ArrayList nodes_ID=new ArrayList();\n  for (int i=0; i < nodes.length; i++) {\n    wfn=nodes[i];\n    nodes_ID.add(new Integer(wfn.getAD_WF_Node_ID()));\n  }\n  int imageMap[][]=generateImageMap(nodes_ID);\n  sess.setAttribute(WORKFLOW,wf);\n  sess.setAttribute(NODES,nodes);\n  sess.setAttribute(NODES_ID,nodes_ID);\n  sess.setAttribute(IMAGE_MAP,imageMap);\n  sess.setAttribute(ACTIVE_NODE,new Integer(-999));\n}\n", "public GetStatTopRefererResponse getStatTopReferer(GetStatTopRefererRequest request) {\n        InternalRequest internalRequest = this.createRequest(request, HttpMethodName.GET, STAT, \"topn\", \"referer\");\n        \n        if (request.getStartTime() != null) {\n            internalRequest.addParameter(\"startTime\", DateUtils.formatAlternateIso8601Date(request.getStartTime()));\n        }\n        \n        if (request.getEndTime() != null) {\n            internalRequest.addParameter(\"endTime\", DateUtils.formatAlternateIso8601Date(request.getEndTime()));\n        }\n        \n        if (request.getDomain() != null) {\n            internalRequest.addParameter(\"domain\", request.getDomain());\n        }\n        \n        if (request.getPeriod() != null) {\n            internalRequest.addParameter(\"period\", String.valueOf(request.getPeriod()));\n        }\n        \n        return this.invokeHttpClient(internalRequest, GetStatTopRefererResponse.class);\n    }", "    protected String getResourceString(String nm) {\n        String str = null;\n        try {\n            str = this.properties1.getProperty(nm);\n        } catch (MissingResourceException mre) {\n            mre.printStackTrace();\n        }\n        return str;\n    }\n", "private void processMeshDevices ( List < IEspDevice > meshDevices , IEspDeviceStatus status ) { if ( meshDevices . size ( ) > NUM_ ) { List < NetworkGroup > deviceNetworkGroups = new ArrayList < NetworkGroup > ( ) ; groupingNetwork ( deviceNetworkGroups ) ; for ( IEspDevice meshDevice : meshDevices ) { for ( NetworkGroup netGroup : deviceNetworkGroups ) { if ( netGroup . bssids . toString ( ) . contains ( meshDevice . getBssid ( ) ) ) { netGroup . postBssidList . add ( meshDevice . getBssid ( ) ) ; break ; } } } for ( NetworkGroup netGroup : deviceNetworkGroups ) { if ( netGroup . postBssidList . size ( ) > NUM_ ) { if ( netGroup . state . isStateLocal ( ) ) { postMulticastLocal ( meshDevices . get ( NUM_ ) . getDeviceType ( ) , netGroup , status ) ; } else { postMulticastInternet ( meshDevices . get ( NUM_ ) . getDeviceType ( ) , netGroup , status ) ; } } } } }", "    private void setMode(final int newMode) {\n        if (newMode != currentMode) {\n            final int old = currentMode;\n            currentMode = newMode;\n\n            if (currentMode == JaxoConstants.VERTEX) {\n                currentMode = vertexType;\n            }\n\n            thePanel.distributePropertyChange(\"Jaxo.mode\", old, currentMode);\n        }\n    }\n", "public static byte[] des_cksum(byte[] ivec,byte[] msg,byte[] key) throws KrbCryptoException {\n  Cipher cipher=null;\n  byte[] result=new byte[8];\n  try {\n    cipher=Cipher.getInstance(\"DES/CBC/NoPadding\");\n  }\n catch (  Exception e) {\n    KrbCryptoException ke=new KrbCryptoException(\"JCE provider may not be installed. \" + e.getMessage());\n    ke.initCause(e);\n    throw ke;\n  }\n  IvParameterSpec params=new IvParameterSpec(ivec);\n  SecretKeySpec skSpec=new SecretKeySpec(key,\"DES\");\n  try {\n    SecretKeyFactory skf=SecretKeyFactory.getInstance(\"DES\");\n    SecretKey sk=(SecretKey)skSpec;\n    cipher.init(Cipher.ENCRYPT_MODE,sk,params);\n    for (int i=0; i < msg.length / 8; i++) {\n      result=cipher.doFinal(msg,i * 8,8);\n      cipher.init(Cipher.ENCRYPT_MODE,sk,(new IvParameterSpec(result)));\n    }\n  }\n catch (  GeneralSecurityException e) {\n    KrbCryptoException ke=new KrbCryptoException(e.getMessage());\n    ke.initCause(e);\n    throw ke;\n  }\n  return result;\n}\n", "public void close() throws IOException {\n  try {\n    file.close();\n    tmp=null;\n  }\n catch (  SmbException se) {\n    throw seToIoe(se);\n  }\n}\n", "public void processResponse ( StunResponseEvent event ) ;", "public static Id parse ( final String str ) { final Id r = new Id ( ) ; r . fromString ( str ) ; return r ; }", "\tpublic boolean isVisibleSamplesOnly() {\n\t\treturn visibleSamplesOnly;\n\t}\n", "public Container(boolean debugBootstrap) throws Exception {\n  System.setProperty(SwarmProperties.VERSION,VERSION);\n  createServer(debugBootstrap,null);\n  createShrinkWrapDomain();\n}\n", "void reset ( ) ;", "private boolean matchValue ( Collection < ? > collection , int tokenIndex , ServerEntry entry ) { if ( tokenIndex == _tokens . length ) return matchOnRoot ( collection , entry ) ; else throw new RuntimeException ( STR_ + _rootPath + STR_ ) ; }", "public static I18N instance ( ) { return theInstance ; }", "public NioDatagramAcceptor(){\n  this(new DefaultDatagramSessionConfig(),null);\n}\n", "private void writeOFMessagesToSwitch(DatapathId dpid,List<OFMessage> messages){\n  IOFSwitch ofswitch=switchService.getSwitch(dpid);\n  if (ofswitch != null) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"Sending {} new entries to {}\",messages.size(),dpid);\n    }\n    ofswitch.write(messages);\n  }\n}\n", "public ServiceFuture<VirtualNetworkInner> createOrUpdateAsync(String resourceGroupName, String virtualNetworkName, VirtualNetworkInner parameters, final ServiceCallback<VirtualNetworkInner> serviceCallback) {\n        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, virtualNetworkName, parameters), serviceCallback);\n    }", "public static boolean isCatalogVersionValid(String catalogVersionStr)\n    {\n        // Do we have a version string?\n        if (catalogVersionStr == null || catalogVersionStr.isEmpty()) {\n            return false;\n        }\n\n        //Check that it is a properly formed version string\n        Object[] catalogVersion = MiscUtils.parseVersionString(catalogVersionStr);\n        if (catalogVersion == null) {\n            return false;\n        }\n\n        // It's valid.\n        return true;\n    }", "\tprotected void response(AuResponse response) {\n\t\tresponse(response.getOverrideKey(), response);\n\t}\n", "private void addInstance ( EntryClass eclass ) { int idx = entryClasses . indexOf ( eclass ) ; if ( idx < NUM_ ) { entryClasses . add ( eclass ) ; idx = entryClasses . size ( ) - NUM_ ; } eclass = ( EntryClass ) entryClasses . get ( idx ) ; eclass . setNu", "    public void reload(boolean regenerate) {\n        if (regenerate) {\n            reloadAll();\n        } else {\n            reloadPartial();\n        }\n    }\n", "void deletedTag ( ITagTreeManager manager , ITreeNode < CTag > parent , ITreeNode < CTag > tag ) ;", "@Override\n    protected Measurement[] getModelMeasurementsImpl() {\n        Measurement[] measurements = new Measurement[this.maxStoredCount];\n\n        for (int m = 0; m < this.maxMemberCount; m++) {\n            measurements[m] = new Measurement(\"Member weight \" + (m + 1), -1);\n        }\n\n        for (int s = this.maxMemberCount; s < this.maxStoredCount; s++) {\n            measurements[s] = new Measurement(\"Stored member weight \" + (s + 1), -1);\n        }\n\n        if (this.storedWeights != null) {\n            int storeSize = this.storedWeights.length;\n\n            for (int i = 0; i < storeSize; i++) {\n                if (i < this.ensemble.length) {\n                    measurements[i] = new Measurement(\"Member weight \" + (i + 1), this.storedWeights[storeSize - i - 1][0]);\n                } else {\n                    measurements[i] = new Measurement(\"Stored member weight \" + (i + 1), this.storedWeights[storeSize - i - 1][0]);\n                }\n            }\n        }\n        return measurements;\n    }", "private static Map<Literal, Integer> nonCachingLiteralProfile(final Formula formula) {\n    final SortedMap<Literal, Integer> map = new TreeMap<>();\n    nonCachingRecursion(formula, map);\n    return map;\n  }", "  public void writeExternal(ObjectOutput out) throws IOException {\n    \n    // number\n    out.writeUTF(getId()) ;\n    \n    // logfile\n    out.writeUTF(logFile.getAbsolutePath()) ;\n    \n    // global manager\n    out.writeUTF(orb.object_to_string(globalTM)) ;\n    \n    // transactions\n    out.writeInt(transactions.size()) ;\n    Set<Integer> keys = transactions.keySet() ;\n    for (Integer key : keys) {\n      Transaction transaction = transactions.get(key) ;\n      out.writeInt(key.intValue()) ;\n      out.writeObject(transaction) ;\n    }\n    \n  }\n", "public static TemplateHashModelEx combineMaps(TemplateHashModelEx first,TemplateHashModelEx second,SetOperations ops,ObjectWrapper objectWrapper) throws TemplateModelException {\n  SimpleHash res=new SimpleHash(objectWrapper);\n  if (ops == null || ops == SetOperations.UNION) {\n    addToSimpleMap(res,first);\n    addToSimpleMap(res,second);\n  }\n else   if (ops == SetOperations.INTERSECT) {\n    Set<String> intersectKeys=toStringSet(second.keys());\n    intersectKeys.retainAll(toStringSet(first.keys()));\n    addToSimpleMap(res,second,intersectKeys);\n  }\n else   if (ops == SetOperations.DIFFERENCE) {\n    Set<String> diffKeys=toStringSet(first.keys());\n    diffKeys.removeAll(toStringSet(second.keys()));\n    addToSimpleMap(res,first,diffKeys);\n  }\n else {\n    throw new TemplateModelException(\"Unsupported combineMaps operation\");\n  }\n  return res;\n}\n", "public int costTo ( Dibit stateTest ) { if ( isCurrentConnectionCorrect ( ) ) { Constellation c = Constellation . fromStateAndInputDibits ( stateTest , mConstellation . getInput ( ) ) ; return mConstellation . costTo ( c ) ; } else { int cheapestCost = NUM_ ; for ( Dibit inputTest : Dibit . values ( ) ) { Constellation constellationTest = Constellation . fromStateAndInputDibits ( stateTest , inputTest ) ; int cost = mConnectedNode . costTo ( inputTest ) + mConstellation . costTo ( constellationTest ) ; if ( cost < cheapestCost ) { cheapestCost = cost ; } } return cheapestCost ; } }", "public static void main(String[] args){\n  if (args.length != 1) {\n    throw new RuntimeException(\"Usage: [path to conf file]\");\n  }\n  File configuration=new File(args[0]);\n  if (configuration.isDirectory() || !configuration.exists()) {\n    throw new RuntimeException(\"Configuration file\" + configuration.getAbsolutePath() + \" is a directory or \"+ \"doesn't exist\");\n  }\n  InputStream is=null;\n  try {\n    is=new FileInputStream(configuration);\n    Properties props=new Properties();\n    props.load(is);\n    String server=props.getProperty(\"sendemails.server\");\n    String from=props.getProperty(\"sendemails.from\");\n    String subject=props.getProperty(\"sendemails.subject\");\n    String mimeType=props.getProperty(\"sendemails.mimetype\");\n    String replyTo=props.getProperty(\"sendemails.replyto\");\n    String templateName=props.getProperty(\"sendemails.file.template\");\n    String recipientsFileName=props.getProperty(\"sendemails.file.to\");\n    String template=getTemplate(templateName);\n    sendMails(server,from,recipientsFileName,replyTo,subject,mimeType,template);\n  }\n catch (  ApiException|IOException|MessagingException|InterruptedException e) {\n    LOG.error(\"Mails sending failed - {}\",e.getLocalizedMessage(),e);\n    throw new RuntimeException(e.getLocalizedMessage(),e);\n  }\n finally {\n    if (is != null) {\n      try {\n        is.close();\n      }\n catch (      IOException e) {\n        LOG.error(\"Mails sending failed - {}\",e.getLocalizedMessage(),e);\n        throw new RuntimeException(e.getLocalizedMessage(),e);\n      }\n    }\n  }\n}\n", "    public Enumeration names() {\n\treturn list.propertyNames();\n    }\n", "  public SafeStylesBuilder textDecoration(TextDecoration value) {\n    return append(SafeStylesUtils.forTextDecoration(value));\n  }\n", "public GreaterEqualConstraint(double constraintValue){\n  super(Double.valueOf(constraintValue));\n}\n", "@Override\n    public DescribeCodeRepositoryResult describeCodeRepository(DescribeCodeRepositoryRequest request) {\n        request = beforeClientExecution(request);\n        return executeDescribeCodeRepository(request);\n    }", "private static Pair<String,String> preIndexedROR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){\n  final String address=environment.getNextVariableString();\n  final String index=environment.getNextVariableString();\n  final String tmpVar=environment.getNextVariableString();\n  final String tmpVar1=environment.getNextVariableString();\n  final String tmpVar2=environment.getNextVariableString();\n  final String tmpVar3=environment.getNextVariableString();\n  long baseOffset=offset;\n  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,\"-\" + Integer.decode(immediateNodeValue),dw,tmpVar1));\n  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,String.valueOf(32 - Integer.decode(immediateNodeValue)),dw,tmpVar2));\n  instructions.add(ReilHelpers.createOr(baseOffset++,dw,tmpVar1,dw,tmpVar2,dw,tmpVar3));\n  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar3,dw,dWordBitMask,dw,index));\n  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));\n  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,address));\n  instructions.add(ReilHelpers.createStr(baseOffset++,dw,address,dw,registerNodeValue1));\n  return new Pair<String,String>(address,registerNodeValue1);\n}\n", "public CSTNode add ( CSTNode element ) { throw new GroovyBugError ( STR_ ) ; }", "public void childrenAdded(BeanContextMembershipEvent bcme){\n  Iterator it=bcme.iterator();\n  findAndInit(it);\n}\n", "    private boolean isRulesetImmutable(Ruleset ruleset) {\n\n        for (Ruleset immRuleset : immutableRulesets) {\n            if (ruleset.equalsDb(immRuleset)) {\n                return true;\n            }\n        }\n        return false;\n    }\n", "private long[] randomSubspace(final int alldim,final int mindim,final int maxdim,final Random rand){\n  long[] dimset=BitsUtil.zero(alldim);\n  int[] dims=new int[alldim];\n  for (int d=0; d < alldim; d++) {\n    dims[d]=d;\n  }\n  int subdim=mindim + rand.nextInt(maxdim - mindim);\n  for (int d=0; d < alldim - subdim; d++) {\n    int s=rand.nextInt(alldim - d);\n    BitsUtil.setI(dimset,dims[s]);\n    dims[s]=dims[alldim - d - 1];\n  }\n  return dimset;\n}\n", "public static void getBitmapByImageURL(String imageURL, final OnEventListener callback) {\n\n        new DownloadImageTask<Bitmap>(imageURL, new OnEventListener<Bitmap>() {\n\n            @Override\n            public void onSuccess(Bitmap bitmap) {\n                callback.onSuccess(bitmap);\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                callback.onFailure(e);\n            }\n        }).execute();\n\n    }", "public void writeHostPortFormat(DataOutput out) throws IOException {\n  if (csf != null) {\n    throw new InternalError(\"TCPEndpoint.writeHostPortFormat: \" + \"called for endpoint with non-null socket factory\");\n  }\n  out.writeUTF(host);\n  out.writeInt(port);\n}\n", "\tpublic void make() {\n\t\tsetLeafOrientation();\n\t}\n", "public static void drawAxis(SVGPlot plot, Element parent, LinearScale scale, double x1, double y1, double x2, double y2, LabelStyle labelstyle, StyleLibrary style) throws CSSNamingConflict {\n    assert (parent != null);\n    Element line = plot.svgLine(x1, y1, x2, y2);\n    SVGUtil.setCSSClass(line, CSS_AXIS);\n    parent.appendChild(line);\n\n    final double tx = x2 - x1;\n    final double ty = y2 - y1;\n    // ticks are orthogonal\n    final double tw = ty * 0.01;\n    final double th = -tx * 0.01;\n\n    // choose where to print labels.\n    final boolean labels, ticks;\n    switch(labelstyle){\n    case LEFTHAND:\n    case RIGHTHAND:\n      labels = true;\n      ticks = true;\n      break;\n    case NOLABELS:\n      labels = false;\n      ticks = true;\n      break;\n    case ENDLABEL: // end labels are handle specially\n    case NOTHING:\n    default:\n      labels = false;\n      ticks = false;\n    }\n    Alignment pos = Alignment.LL;\n    if(labels) {\n      double angle = FastMath.atan2(ty, tx);\n      // System.err.println(tx + \" \" + (-ty) + \" \" + angle);\n      if(angle > 2.6) { // pi .. 2.6 = 180 .. 150\n        pos = labelstyle == LabelStyle.RIGHTHAND ? Alignment.RC : Alignment.LC;\n      }\n      else if(angle > 0.5) { // 2.3 .. 0.7 = 130 .. 40\n        pos = labelstyle == LabelStyle.RIGHTHAND ? Alignment.RR : Alignment.LL;\n      }\n      else if(angle > -0.5) { // 0.5 .. -0.5 = 30 .. -30\n        pos = labelstyle == LabelStyle.RIGHTHAND ? Alignment.RC : Alignment.LC;\n      }\n      else if(angle > -2.6) { // -0.5 .. -2.6 = -30 .. -150\n        pos = labelstyle == LabelStyle.RIGHTHAND ? Alignment.RL : Alignment.LR;\n      }\n      else { // -2.6 .. -pi = -150 .. -180\n        pos = labelstyle == LabelStyle.RIGHTHAND ? Alignment.RC : Alignment.LC;\n      }\n    }\n    // vertical text offset; align approximately with middle instead of\n    // baseline.\n    double textvoff = style.getTextSize(StyleLibrary.AXIS_LABEL) * .35;\n\n    // draw ticks on x axis\n    if(ticks || labels) {\n      int sw = 1;\n      { // Compute how many ticks to draw\n        int numticks = (int) ((scale.getMax() - scale.getMin()) / scale.getRes());\n        double tlen = FastMath.sqrt(tx * tx + ty * ty);\n        double minl = 10 * style.getLineWidth(StyleLibrary.AXIS_TICK);\n        // Try proper divisors first.\n        if(sw * tlen / numticks < minl) {\n          for(int i = 2; i <= (numticks >> 1); i++) {\n            if(numticks % i == 0 && i * tlen / numticks >= minl) {\n              sw = i;\n              break;\n            }\n          }\n        }\n        // Otherwise, also allow non-divisors.\n        if(sw * tlen / numticks < minl) {\n          sw = (int) Math.floor(minl * numticks / tlen);\n        }\n      }\n      for(double tick = scale.getMin(); tick <= scale.getMax() + scale.getRes() / 10; tick += sw * scale.getRes()) {\n        double x = x1 + tx * scale.getScaled(tick);\n        double y = y1 + ty * scale.getScaled(tick);\n        if(ticks) {\n          // This is correct. Vectors: (vec - tvec) to (vec + tvec)\n          Element tickline = plot.svgLine(x - tw, y - th, x + tw, y + th);\n          SVGUtil.setAtt(tickline, SVGConstants.SVG_CLASS_ATTRIBUTE, CSS_AXIS_TICK);\n          parent.appendChild(tickline);\n        }\n        // draw labels\n        if(labels) {\n          double tex = x;\n          double tey = y;\n          switch(pos){\n          case LL:\n          case LC:\n          case LR:\n            tex = x + tw * 2.5;\n            tey = y + th * 2.5 + textvoff;\n            break;\n          case RL:\n          case RC:\n          case RR:\n            tex = x - tw * 2.5;\n            tey = y - th * 2.5 + textvoff;\n          }\n          Element text = plot.svgText(tex, tey, scale.formatValue(tick));\n          text.setAttribute(SVGConstants.SVG_CLASS_ATTRIBUTE, CSS_AXIS_LABEL);\n          switch(pos){\n          case LL:\n          case RL:\n            text.setAttribute(SVGConstants.SVG_TEXT_ANCHOR_ATTRIBUTE, SVGConstants.SVG_START_VALUE);\n            break;\n          case LC:\n          case RC:\n            text.setAttribute(SVGConstants.SVG_TEXT_ANCHOR_ATTRIBUTE, SVGConstants.SVG_MIDDLE_VALUE);\n            break;\n          case LR:\n          case RR:\n            text.setAttribute(SVGConstants.SVG_TEXT_ANCHOR_ATTRIBUTE, SVGConstants.SVG_END_VALUE);\n            break;\n          }\n          parent.appendChild(text);\n        }\n      }\n    }\n    if(labelstyle == LabelStyle.ENDLABEL) {\n      {\n        Element text = plot.svgText(x1 - tx * 0.02, y1 - ty * 0.02 + textvoff, scale.formatValue(scale.getMin()));\n        text.setAttribute(SVGConstants.SVG_CLASS_ATTRIBUTE, CSS_AXIS_LABEL);\n        text.setAttribute(SVGConstants.SVG_TEXT_ANCHOR_ATTRIBUTE, SVGConstants.SVG_MIDDLE_VALUE);\n        parent.appendChild(text);\n      }\n      {\n        Element text = plot.svgText(x2 + tx * 0.02, y2 + ty * 0.02 + textvoff, scale.formatValue(scale.getMax()));\n        text.setAttribute(SVGConstants.SVG_CLASS_ATTRIBUTE, CSS_AXIS_LABEL);\n        text.setAttribute(SVGConstants.SVG_TEXT_ANCHOR_ATTRIBUTE, SVGConstants.SVG_MIDDLE_VALUE);\n        parent.appendChild(text);\n      }\n    }\n    setupCSSClasses(plot, plot.getCSSClassManager(), style);\n  }", "public static int calculateLighterColor(final int color,final float factor){\n  final int a=Color.alpha(color);\n  final int r=Color.red(color);\n  final int g=Color.green(color);\n  final int b=Color.blue(color);\n  final int lightnessLevel=Math.round(RGB_TOTAL_COLORS * factor);\n  return Color.argb(a,Math.min(r + lightnessLevel,255),Math.min(g + lightnessLevel,255),Math.min(b + lightnessLevel,255));\n}\n", "@ManyToOne(targetEntity = org.openprovenance.prov.sql.QualifiedName.class, cascade = {\n        CascadeType.ALL\n    })\n    @JoinColumn(name = \"RESPONSIBLE\")\n    public org.openprovenance.prov.model.QualifiedName getResponsible() {\n        return responsible;\n    }", "@Override\n    public void execute() throws MojoExecutionException {\n        try {\n            ensureNotExisting();\n            createDirectories();\n\n            if (\"blank\".equalsIgnoreCase(skel)) {\n                createApplicationConfiguration();\n                createBlankPomFile();\n                createPackageStructure();\n                copyDefaultErrorTemplates();\n            } else {\n                createApplicationConfiguration();\n                createPomFile();\n                createPackageStructure();\n                createDefaultController();\n                createTests();\n                copyAssets();\n                createWelcomeTemplate();\n                copyDefaultErrorTemplates();\n            }\n\n            printStartGuide();\n        } catch (IOException e) {\n            throw new MojoExecutionException(\"Error during project generation\", e);\n        }\n    }", "public static boolean matchesRobotsPattern(String pattern, String path) {\n        return robotsPatternToRegexp(pattern).matcher(path).matches();\n    }", "private void attemptResponse ( InetSocketAddress addr , int timeout ) throws Exception { Socket s = new Socket ( ) ; try { s . connect ( addr , timeout ) ; respond ( s ) ; } finally { try { s . close ( ) ; } catch ( IOException e ) { logger . log ( Levels", "    public void setExcludes(String excludes) {\n        if (excludes != null && excludes.length() > 0) {\n            createExclude().setName(excludes);\n        }\n    }\n", "public IndentPrinter ( Writer out , String indent ) { this ( out , indent , BOOL_ ) ; }", "public final Promise < ResourceResponse , ResourceException > performRequest ( final JsonValue relationshipJson , final T request , final Context context ) throws ResourceException { if ( ! isReverseSyncNeeded ( ) ) { return invokeRequest ( context , requ", "public void removeWatcher(AngularObjectWatcher watcher){\nsynchronized (watchers) {\n    watchers.remove(watcher);\n  }\n}\n", "    public void reverseAllNormals(final boolean aAffectChildren) {\n\n        // reverse normals for this object\n        if (getVertices().size() > 0) {\n            ArrayList<JVertex> vertexVector = pVertices();\n\n            for (int i = 0; i < vertexVector.size(); i++) {\n                vertexVector.get(i).getNormal().mul(-1.0);\n            }\n        }\n\n        // propagate changes to my children\n        if (aAffectChildren) {\n            for (int i = 0; i < getChildrens().size(); i++) {\n                JGenericObject nextObject = getChildrens().get(i);\n\n                JMesh nextMesh = (JMesh) nextObject;\n                if (nextMesh != null) {\n                    nextMesh.reverseAllNormals(true);\n                }\n            }\n        }\n    }\n", "public static SimEvent select(int src,Predicate p){\n  SimEvent ev=null;\n  Iterator<SimEvent> iterator=deferred.iterator();\n  while (iterator.hasNext()) {\n    ev=iterator.next();\n    if (ev.getDestination() == src && p.match(ev)) {\n      iterator.remove();", "  public DirEntry getParent() {\n    DirEntry parent = null;\n    int pos;\n\n    if (-1 == (pos = path.lastIndexOf('/'))) return null;\n    String parent_path = path.substring(0,pos);\n    if (parent_path.equals(\"/\")) return null;\n    /*    \n    if (null != alldirs) {\n      synchronized (alldirs) {\n\tparent = (DirEntry)alldirs.get(parent_path);\n      }\n    }\n    */\n    if (null == parent) {\n      parent = new DirEntry(this, parent_path);\n    }\n    return parent;\n  }\n", "public ConfigurationParser ( boolean verify , ClassLoader loader ) throws ParserConfigurationException { factory = DocumentBuilderFactory . newInstance ( ) ; factory . setValidating ( verify ) ; factory . setNamespaceAware ( BOOL_ ) ; factory . setExpandE", "public static Test suite ( ) { return ( new TestSuite ( SelectManyCollectionITCase . class ) ) ; }", "\tpublic void setParam(String paramType, double value) throws IllegalArgumentException {\n\n\t\tif (paramType.equalsIgnoreCase(PARAM_PERCENTAGE)) {\n\t\t    if (value < 0) {\n\t\t\t\tthrow new IllegalArgumentException(\"The percentage parameter must be positive or zero.\");\n\t        }\n\t\t    else {\n\t\t\t\tthis.params.get(PARAM_INDEX_PERCENTAGE).setValue(value);\n\t\t    }\n\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Invalid parameter type supplied.\");\n\t\t}\n\t}\n", "private void readObjectNoData ( ) throws ObjectStreamException { throw new InvalidObjectException ( STR_ ) ; }", "\tpublic boolean isSabotageCheckOperationFinished() {\n\t\t\n\t\treturn getSabotageCheckOperation() == null;\n\t}\n", "\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t   if (BeanSetTableManager.this.beanSet != null){\n\t\t      try{\n\t\t          BeanSetTableManager.this.beanSet.insertBean();\n\t\t      } catch(BeanSetException beanSetEx){\n\t\t          beanSetEx.printStackTrace();\n\t\t      }\n\t\t   }            \n\t\t}        \n", "private boolean isNoiseWord(String term){\n  int len=term.length();\n  if (minWordLen > 0 && len < minWordLen) {\n    return true;\n  }\n  if (maxWordLen > 0 && len > maxWordLen) {\n    return true;\n  }\n  return stopWords != null && stopWords.contains(term);\n}\n", "  public int getIntegerProperty(String path, int def){\n    Object val = getValue(path);\n    if(val == null){return def;}\n    else{\n      return Integer.parseInt(_resolve(String.valueOf(val), new Stack(), true));\n    }\n  }\n", "private void drawChannelCenterLine ( Graphics2D graphics , double xaxis ) { double height = getSize ( ) . getHeight ( ) - mSpectrumInset ; graphics . setColor ( Color . LIGHT_GRAY ) ; graphics . draw ( new Line2D . Double ( xaxis , height * NUM_ , xaxis , height - NUM_ ) ) ; }", "public void stopStartedContainers(boolean keepContainer,\n                                      boolean removeVolumes,\n                                      boolean removeCustomNetworks,\n                                      GavLabel gavLabel)\n        throws DockerAccessException, ExecException {\n        Set<Network> networksToRemove = new HashSet<>();\n        for (ContainerTracker.ContainerShutdownDescriptor descriptor : tracker.removeShutdownDescriptors(gavLabel)) {\n            collectCustomNetworks(networksToRemove, descriptor, removeCustomNetworks);\n            shutdown(descriptor, keepContainer, removeVolumes);\n        }\n        removeCustomNetworks(networksToRemove);\n    }", "void waitForSuspend(int timeout,int period) throws NotConnectedException {\n  waitForSuspend(timeout,period,Isolate.DEFAULT_ID);\n}\n", "public DistributionBeanQuery(final QueryDefinition definition,final Map<String,Object> queryConfig,final Object[] sortPropertyIds,final boolean[] sortStates){\n  super(definition,queryConfig,sortPropertyIds,sortStates);\n  if (HawkbitCommonUtil.isNotNullOrEmpty(queryConfig)) {\n    distributionTags=(Collection<String>)queryConfig.get(SPUIDefinitions.FILTER_BY_TAG);\n    searchText=(String)queryConfig.get(SPUIDefinitions.FILTER_BY_TEXT);\n    noTagClicked=(Boolean)queryConfig.get(SPUIDefinitions.FILTER_BY_NO_TAG);\n    pinnedControllerId=(String)queryConfig.get(SPUIDefinitions.ORDER_BY_PINNED_TARGET);\n    if (!Strings.isNullOrEmpty(searchText)) {\n      searchText=String.format(\"%%%s%%\",searchText);\n    }\n  }\n  if (sortStates.length > 0) {\n    sort=new Sort(sortStates[0] ? Direction.ASC : Direction.DESC,(String)sortPropertyIds[0]);\n    for (int distId=1; distId < sortPropertyIds.length; distId++) {\n      sort.and(new Sort(sortStates[distId] ? Direction.ASC : Direction.DESC,(String)sortPropertyIds[distId]));\n    }\n  }\n}\n", "@Override public double[][] rankedAttributes() throws Exception {\n  if (m_rankedAtts == null || m_rankedSoFar == -1) {\n    throw new Exception(\"Search must be performed before attributes \" + \"can be ranked.\");\n  }\n  m_doRank=true;\n  search(m_ASEval,null);\n  double[][] final_rank=new double[m_rankedSoFar][2];\n  for (int i=0; i < m_rankedSoFar; i++) {\n    final_rank[i][0]=m_rankedAtts[i][0];\n    final_rank[i][1]=m_rankedAtts[i][1];\n  }\n  resetOptions();\n  m_doneRanking=true;\n  if (m_numToSelect > final_rank.length) {\n    throw new Exception(\"More attributes requested than exist in the data\");\n  }\n  if (m_numToSelect <= 0) {\n    if (m_threshold == -Double.MAX_VALUE) {\n      m_calculatedNumToSelect=final_rank.length;\n    }\n else {\n      determineNumToSelectFromThreshold(final_rank);\n    }\n  }\n  return final_rank;\n}\n", "@Override public boolean executeScriptLine(final String line){\n  boolean success=false;\n  String withPropsExpanded=line;\n  try {\n    if (line.contains(\"$\")) {\n      withPropsExpanded=expandProperties(line);\n    }\n    String logMessage=\"Command String to execute .. \";\n    if (!line.equals(withPropsExpanded)) {\n      if (!isQuietMode()) {\n        Gfsh.println(\"Post substitution: \" + withPropsExpanded);\n      }\n      logMessage=\"Command String after substitution : \";\n      expandedPropCommandsMap.put(withPropsExpanded,line);\n    }\n    if (gfshFileLogger.fineEnabled()) {\n      gfshFileLogger.fine(logMessage + withPropsExpanded);\n    }\n    success=super.executeScriptLine(withPropsExpanded);\n  }\n catch (  Exception e) {\n    setLastExecutionStatus(-1);\n  }\n finally {\n    gfshHistory.setAutoFlush(true);\n    gfshHistory.addToHistory(line);\n    gfshHistory.setAutoFlush(false);\n    expandedPropCommandsMap.clear();\n  }\n  return success;\n}\n", "private static void writeMinorStatisticsString(BufferedWriter output,SAZone zone) throws IOException {\n  output.write(zone.getName());\n  output.write(delimiter);\n  output.write(String.valueOf(zone.getMinorActivityCount()));\n  output.write(delimiter);\n  for (int i=0; i < 24; i++) {\n    output.write(String.valueOf(zone.getMinorActivityCountDetail(i)));\n    output.write(delimiter);\n  }\n  for (int i=0; i < 23; i++) {\n    output.write(String.valueOf(zone.getMinorActivityDurationDetail(i)));\n    output.write(delimiter);\n  }\n  output.write(String.valueOf(zone.getMinorActivityDurationDetail(23)));\n  output.newLine();\n}\n", "public static final void validate(Key key) throws InvalidKeyException {\n  if (key == null) {\n    throw new NullPointerException(\"The key to be validated cannot be null\");\n  }\n  if (key instanceof DHPublicKey) {\n    validateDHPublicKey((DHPublicKey)key);\n ", "public Builder deleteRoles(){\n  deleteFields.add(\"roles\");\n  return this;\n}\n", "void processHttpMessage ( int toolFlag , boolean messageIsRequest , IHttpRequestResponse messageInfo ) ;", "private void readChunkHeader(InputStream stream,ResChunk_Header nextChunkHeader) throws IOException {\n  byte[] header=new byte[8];\n  stream.read(header);\n  readChunkHeader(nextChunkHeader,header,0);\n}\n", "private void ctrlSelect(D nodeData){\n  int insertionIndex=getInsertionIndex(nodeData);\n  insertAndSelectNode(nodeData,insertionIndex,!nodeData.equals(selectedNodes.get(insertionIndex)));\n}\n", "public boolean isEmptyTemplate ( ) { return getServerTypeDesc ( ) . isRootType ( ) ; }", "List < IComment > appendLocalComment ( final String commentText ) throws CouldntSaveDataException , CouldntLoadDataException ;", "public boolean equals ( Object o ) { if ( ! ( o instanceof UUID ) ) { return BOOL_ ; } byte [ ] otherId = ( ( UUID ) o ) . mId ; byte [ ] thisId = mId ; for ( int i = NUM_ ; i < NUM_ ; ++ i ) { if ( otherId [ i ] != thisId [ i ] ) { return BOOL_ ; } } ret", "    public int put(byte key, int value) {\n        int index = insertionIndex(key);\n        return doPut(key, value, index);\n    }\n", "\tpublic void tick() {\n\t\tthis.time -= 16;\n\t}\n", "public static String\nformat(Date date) {\n\tCalendar c = new GregorianCalendar(TimeZone.getTimeZone(\"UTC\"));\n\tStringBuffer sb = new StringBuffer();\n\n\tc.setTime(date);\n\tsb.append(w4.format(c.get(Calendar.YEAR)));\n\tsb.append(w2.format(c.get(Calendar.MONTH)+1));\n\tsb.append(w2.format(c.get(Calendar.DAY_OF_MONTH)));\n\tsb.append(w2.format(c.get(Calendar.HOUR_OF_DAY)));\n\tsb.append(w2.format(c.get(Calendar.MINUTE)));\n\tsb.append(w2.format(c.get(Calendar.SECOND)));\n\treturn sb.toString();\n}", "public int charAt(int position) {\n        if (position > this.length)\n            return -1; // too long\n        if (position < 0)\n            return -1; // duh.\n\n        ByteBuffer bb = (ByteBuffer) ByteBuffer.wrap(bytes).position(position);\n        return bytesToCodePoint(bb.slice());\n    }", "    public void loadVisibleDockables(){\n        try{\n            logger.debug(\"Load visible dockables from \" + file.getPath());\n            SAXParser parser = SAXParserFactory.newInstance().newSAXParser();\n            DefaultHandler handler = new PerspectiveHandler();\n            parser.parse(this.file, handler);\n            if (getVisibleDockableNames().size() == 0){\n            \tlogger.debug(\"No dockables found. Load default\");\n            \tthis.loadDefaultVisibleDockables();\n            }\n        } catch (Exception e){\n            this.loadDefaultVisibleDockables();\n        }\n    }\n", "void graphPanelOpened ( CGraphPanel graphPanel ) ;", "public MockTokenFilter(TokenStream input,CharacterRunAutomaton filter){\n  super(input);\n  this.filter=filter;\n}\n", "public Token nextToken() {\n\n        if(lexer._input == null) {\n            throw new IllegalStateException(\"nextToken requires a non-null input stream.\");\n        } else {\n            int tokenStartMarker = lexer._input.mark();\n\n            try {\n                Token ttype1;\n                label110:\n                while(!lexer._hitEOF) {\n                    lexer._token = null;\n                    lexer._channel = Token.DEFAULT_CHANNEL;\n                    lexer._tokenStartCharIndex = lexer._input.index();\n                    lexer._tokenStartCharPositionInLine = ((LexerATNSimulator)lexer.getInterpreter()).getCharPositionInLine();\n                    lexer._tokenStartLine = ((LexerATNSimulator)lexer.getInterpreter()).getLine();\n                    lexer._text = null;\n\n\n                    do {\n                        lexer._type = 0;\n\n                        int ttype;\n                        try {\n                            ttype = ((LexerATNSimulator)lexer.getInterpreter()).match(lexer._input, lexer._mode);\n                        } catch (LexerNoViableAltException var7) {\n                            lexer.notifyListeners(var7);\n                            lexer.recover(var7);\n                            ttype = -3;\n                        }\n\n                        if(lexer._input.LA(1) == -1) {\n                            lexer._hitEOF = true;\n                        }\n\n                        if(lexer._type == 0) {\n                            lexer._type = ttype;\n                        }\n\n                        if(lexer._type == -3) {\n                            continue label110;\n                        }\n                    } while(lexer._type == -2);\n\n                    if(lexer._token == null) {\n                        lexer.emit();\n                    }\n\n                    ttype1 = lexer._token;\n                    //log.trace(\"return token: >\" + ttype1.getText()+\"< \" + ttype1.getType());\n                    return ttype1;\n                }\n                // recover from unexpected EOF\n                eof = true;\n                if (!ls.isBalanced()) {\n                    return generateEOFRecover();\n                }\n                log.trace(\"lexer state is balanced - emitEOF\");\n                lexer.emitEOF();\n                ttype1 = lexer._token;\n                return ttype1;\n            } finally {\n                lexer._input.release(tokenStartMarker);\n            }\n        }\n    }", "public ReplDBMSEvent peek(){\n  return queue.peek();\n}\n", "public void doHandshake(final NextFilter nextFilter)\n            throws ProxyAuthException {\n        logger.debug(\" doHandshake()\");\n\n        if (authHandler != null) {\n            authHandler.doHandshake(nextFilter);\n        } else {\n            if (requestSent) {\n                // Safety check\n                throw new ProxyAuthException(\n                        \"Authentication request already sent\");\n            }\n\n            logger.debug(\"  sending HTTP request\");\n\n            // Compute request headers\n            HttpProxyRequest req = (HttpProxyRequest) getProxyIoSession()\n                    .getRequest();\n            Map<String, List<String>> headers = req.getHeaders() != null ? req\n                    .getHeaders() : new HashMap<>();\n\n            AbstractAuthLogicHandler.addKeepAliveHeaders(headers);\n            req.setHeaders(headers);\n\n            // Write request to the proxy\n            writeRequest(nextFilter, req);\n            requestSent = true;\n        }\n    }", "private void initLoadMoreData(){\n  for (int i=0; i < 2; i++) {\n    List<String> url=new ArrayList<>();\n    url.add(\"http://qq1234.org/uploads/allimg/140404/3_140404114555_5.jpg\");\n    url.add(\"http://qq1234.org/uploads/allimg/140404/3_140404114555_4.jpg\");\n    mLists.add(url);\n  }\n}\n", "@Override\n    public InputPreProcessor getInputPreprocessor(InputType... inputType) throws\n            InvalidKerasConfigurationException {\n        if (inputType.length > 1)\n            throw new InvalidKerasConfigurationException(\n                    \"Keras Permute layer accepts only one input (received \" + inputType.length + \")\");\n        InputPreProcessor preprocessor = null;\n        if (inputType[0] instanceof InputType.InputTypeConvolutional) {\n            switch (this.getDimOrder()) {\n                case THEANO:\n                    preprocessor = new PermutePreprocessor(permutationIndices);\n                    break;\n                case NONE: // TF by default\n                case TENSORFLOW:\n                    // account for channels last\n                    permutationIndices = new int[] {permutationIndices[2], permutationIndices[0], permutationIndices[1]};\n                    preprocessor = new PermutePreprocessor(new int[]{1, 3, 2});\n            }\n        } else if (inputType[0] instanceof InputType.InputTypeRecurrent) {\n            if (Arrays.equals(permutationIndices, new int[] {2, 1}))\n                preprocessor = new PermutePreprocessor(permutationIndices);\n            else\n                throw new InvalidKerasConfigurationException(\"For RNN type input data, permutation dims have to be\" +\n                        \"(2, 1) in Permute layer, got \" + Arrays.toString(permutationIndices));\n        } else if (inputType[0] instanceof InputType.InputTypeFeedForward) {\n            preprocessor = null;\n        } else {\n            throw new InvalidKerasConfigurationException(\"Input type not supported: \" + inputType[0]);\n        }\n        return preprocessor;\n    }", "public String getName() {\n        String r = remote;\n        if(r.endsWith(\"\\\\\") || r.endsWith(\"/\"))\n            r = r.substring(0,r.length()-1);\n\n        int len = r.length()-1;\n        while(len>=0) {\n            char ch = r.charAt(len);\n            if(ch=='\\\\' || ch=='/')\n                break;\n            len--;\n        }\n\n        return r.substring(len+1);\n    }", "public synchronized void release ( ) { if ( connection != null ) { connection . release ( ) ; connection = null ; readQueue . release ( ) ; readQueue = null ; } }", "public void loadPropertiesAsVariables() {\n        BufferedReader reader = null;\n\n        try {\n            if (propertyFilesSet()) {\n                for (String propertyFilePath : propertyFiles) {\n                    Resource propertyFile = new PathMatchingResourcePatternResolver().getResource(propertyFilePath.trim());\n\n                    log.debug(\"Reading property file \" + propertyFile.getFilename());\n\n                    // Use input stream as this also allows to read from resources in a JAR file\n                    reader = new BufferedReader(new InputStreamReader(propertyFile.getInputStream()));\n\n                    // local context instance handling variable replacement in property values\n                    TestContext context = new TestContext();\n\n                    // Careful!! The function registry *must* be set before setting the global variables.\n                    // Variables can contain functions which are resolved when context.setGlobalVariables is invoked.\n                    context.setFunctionRegistry(functionRegistry);\n                    context.setGlobalVariables(globalVariables);\n\n                    String propertyExpression;\n                    while ((propertyExpression = reader.readLine()) != null) {\n\n                        log.debug(\"Property line [ {} ]\", propertyExpression);\n\n                        propertyExpression = propertyExpression.trim();\n                        if (!isPropertyLine(propertyExpression)) {\n                            continue;\n                        }\n\n                        String key = propertyExpression.substring(0, propertyExpression.indexOf('=')).trim();\n                        String value = propertyExpression.substring(propertyExpression.indexOf('=') + 1).trim();\n\n                        log.debug(\"Property value replace dynamic content [ {} ]\", value);\n                        value = context.replaceDynamicContentInString(value);\n\n                        if (log.isDebugEnabled()) {\n                            log.debug(\"Loading property: \" + key + \"=\" + value + \" into default variables\");\n                        }\n\n                        if (log.isDebugEnabled() && globalVariables.getVariables().containsKey(key)) {\n                            log.debug(\"Overwriting property \" + key + \" old value:\" + globalVariables.getVariables().get(key)\n                                    + \" new value:\" + value);\n                        }\n\n                        globalVariables.getVariables().put(key, value);\n                        // we need to keep local context up to date in case of recursive variable usage\n                        context.setVariable(key, globalVariables.getVariables().get(key));\n                    }\n\n                    log.info(\"Loaded property file \" + propertyFile.getFilename());\n                }\n            }\n        } catch (IOException e) {\n            throw new CitrusRuntimeException(\"Error while loading property file\", e);\n        } finally {\n            if (reader != null) {\n                try {\n                    reader.close();\n                } catch (IOException e) {\n                    log.warn(\"Unable to close property file reader\", e);\n                }\n            }\n        }\n    }", "public static List<HistoryDTO> transformToDto(List<History> list){\n  if (list == null) {\n    throw new WebApplicationException(\"Null entity object cannot be converted to Dto object.\",Status.INTERNAL_SERVER_ERROR);\n  }\n  List<HistoryDTO> result=new ArrayList<HistoryDTO>();\n  for (  History history : list) {\n    result.add(transformToDto(history));\n  }\n  return result;\n}\n", "public static String collectionToDelimitedString ( Collection < String > coll , String delim ) { return collectionToDelimitedString ( coll , delim , STR_ , STR_ ) ; }", "public long rangeCount(final boolean exact,final Resource s,final URI p,final Value o,final Resource... c) throws Exception {\n  if (c == null) {\n    throw new IllegalArgumentException();\n  }\n  final UUID uuid=UUID.randomUUID();\n  final ConnectOptions opts=mgr.newQueryConnectOptions(sparqlEndpointURL,uuid,tx);\n  opts.addRequestParam(\"ESTCARD\");\n  if (exact) {\n    opts.addRequestParam(\"exact\",\"true\");\n  }\n  if (s != null) {\n    opts.addRequestParam(\"s\",EncodeDecodeValue.encodeValue(s));\n  }\n  if (p != null) {\n    opts.addRequestParam(\"p\",EncodeDecodeValue.encodeValue(p));\n  }\n  if (o != null) {\n    opts.addRequestParam(\"o\",EncodeDecodeValue.encodeValue(o));\n  }\n  opts.addRequestParam(\"c\",EncodeDecodeValue.encodeContexts(c));\n  JettyResponseListener resp=null;\n  try {\n    opts.setAcceptHeader(ConnectOptions.MIME_APPLICATION_XML);\n    checkResponseCode(resp=doConnect(opts));\n    final RangeCountResult result=rangeCountResults(resp);\n    return result.rangeCount;\n  }\n  finally {\n    if (resp != null)     resp.abort();\n  }\n}\n", "public NdefMessage(NdefRecord record,NdefRecord... records){\n  if (record == null)   throw new NullPointerException(\"record cannot be null\");\n  for (  NdefRecord r : records) {\n    if (r == null) {\n      throw new NullPointerException(\"record cannot be null\");\n    }\n  }\n  mRecords=new NdefRecord[1 + records.length];\n  mRecords[0]=record;\n  System.arraycopy(records,0,mRecords,1,records.length);\n}\n", "\tpublic void setColor2(Color c) {\n\t\tif (_color2==null && c!=null) {\n\t\t\t_color2=c;\n\t\t\tfireChangedEvent();\n\t\t} else if (c==null) {\n\t\t\t_color2=c;\n\t\t\tfireChangedEvent();\n\t\t} else if (!c.equals(_color2)) {\n\t\t\t_color2=c;\n\t\t\tfireChangedEvent();\n\t\t}\n\t}\n", "public void disableOkButton(){\n  okButton.setEnabled(false);\n}\n", "private void clearSBgDataStructures(){\nsynchronized (sBgLock) {\n    sBgWorkspaceItems.clear();\n    sBgAppWidgets.clear();\n    sBgFolders.clear();\n    sBgItemsIdMap.clear();\n    sBgWorkspaceScreens.clear();\n  }\n}\n", "public Set<MobicentsSipSession> getSipSessions(boolean internal) {\r\n\t\tSet<MobicentsSipSession> retSipSessions = new HashSet<MobicentsSipSession>();\r\n\t\tif(sipSessions != null) {\r\n\t\t\tfor(SipSessionKey sipSessionKey : sipSessions) {\r\n\t\t\t\tMobicentsSipSession sipSession = sipContext.getSipManager().getSipSession(sipSessionKey, false, null, this);\r\n\t\t\t\tif(sipSession != null) {\r\n\t\t\t\t\tif(sipSession.isValidInternal()) {\r\n\t\t\t\t\t\tif(internal) {\r\n\t\t\t\t\t\t\tretSipSessions.add(sipSession);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tretSipSessions.add(sipSession.getFacade());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// https://github.com/Mobicents/sip-servlets/issues/41\r\n\t\t\t\t\t// Adding derived Sessions to the list of returned sip sessions\r\n\t\t\t\t\tIterator<MobicentsSipSession> derivedSessionsIterator = sipSession.getDerivedSipSessions();\r\n\t\t\t\t\twhile (derivedSessionsIterator.hasNext()) {\r\n\t\t\t\t\t\tMobicentsSipSession derivedSipSession = derivedSessionsIterator\r\n\t\t\t\t\t\t\t\t.next();\r\n\t\t\t\t\t\tif(internal) {\r\n\t\t\t\t\t\t\tretSipSessions.add(derivedSipSession);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tretSipSessions.add(derivedSipSession.getFacade());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn retSipSessions;\r\n\t}", "@Override\n    public Result call(final Route route, final RequestContext context) throws Exception {\n        return new AsyncResult(new Callable<Result>() {\n            @Override\n            public Result call() throws Exception {\n                URI rewrittenURI = rewriteURI(context);\n                logger.debug(\"Proxy request - rewriting {} to {}\", context.request().uri(), rewrittenURI);\n                if (rewrittenURI == null) {\n                    return onRewriteFailed(context);\n                }\n\n                BasicHttpEntityEnclosingRequest request\n                        = new BasicHttpEntityEnclosingRequest(context.request().method(), rewrittenURI.toString());\n                // Any header listed by the Connection header must be removed:\n                // http://tools.ietf.org/html/rfc7230#section-6.1.\n                Set<String> hopHeaders = new HashSet<>();\n                List<String> connectionHeaders = context.request().headers().get(HeaderNames.CONNECTION);\n                for (String s : connectionHeaders) {\n                    for (String entry : Splitter.on(\",\").omitEmptyStrings().trimResults().splitToList(s)) {\n                        hopHeaders.add(entry.toLowerCase(Locale.ENGLISH));\n                    }\n                }\n\n                boolean hasContent = context.request().contentType() != null;\n                final String host = getHost();\n                Multimap<String, String> headers = ArrayListMultimap.create();\n                for (Map.Entry<String, List<String>> entry : context.request().headers().entrySet()) {\n                    String name = entry.getKey();\n                    if (HeaderNames.TRANSFER_ENCODING.equalsIgnoreCase(name)) {\n                        hasContent = true;\n                    }\n                    if (host != null && HeaderNames.HOST.equalsIgnoreCase(name)) {\n                        continue;\n                    }\n                    // Remove hop-by-hop headers.\n                    String lower = name.toLowerCase(Locale.ENGLISH);\n                    if (HOP_HEADERS.contains(lower) || hopHeaders.contains(lower)) {\n                        continue;\n                    }\n\n                    for (String v : entry.getValue()) {\n                        headers.put(name, v);\n                    }\n                }\n\n                // Force the Host header if configured\n                headers.removeAll(HeaderNames.HOST);\n                if (host != null) {\n                    headers.put(HeaderNames.HOST, host);\n                    headers.put(\"X-Forwarded-Server\", host);\n                } else {\n                    // Set of the URI one\n                    headers.put(\"X-Forwarded-Server\", rewrittenURI.getHost());\n                }\n\n                // Add proxy headers\n                if (getVia() != null) {\n                    headers.put(HeaderNames.VIA, \"http/1.1 \" + getVia());\n                }\n                headers.put(\"X-Forwarded-For\", context.request().remoteAddress());\n                if (host != null) {\n                    headers.put(\"X-Forwarded-Host\", host);\n                }\n\n                updateHeaders(context, headers);\n                for (Map.Entry<String, String> s : headers.entries()) {\n                    request.addHeader(s.getKey(), s.getValue());\n                }\n                // Remove content-length as it is computed by the HTTP client.\n                request.removeHeaders(HeaderNames.CONTENT_LENGTH);\n\n                if (hasContent) {\n                    ByteArrayEntity entity = new ByteArrayEntity(context.context().raw(),\n                            ContentType.create(context.request().contentMimeType(), context.request().contentCharset()));\n                    request.setEntity(entity);\n                }\n\n                HttpResponse response = client.execute(new HttpHost(rewrittenURI.getHost(), rewrittenURI.getPort()), request);\n                return onResult(toResult(response));\n            }\n        });\n\n    }", "private MultiValuedMap<String,VarBindingDef> createPropertyProviders( FunctionInputDef inputDef)\n    {\n    propertyProviders_ = MultiMapUtils.newListValuedHashMap();\n    for( VarDefIterator varDefs = new VarDefIterator( inputDef.getVarDefs()); varDefs.hasNext(); )\n      {\n      VarDef varDef = varDefs.next();\n      for( Iterator<VarValueDef> values = varDef.getValidValues(); values.hasNext(); )\n        {\n        VarValueDef value = values.next();\n        if( value.hasProperties())\n          {\n          VarBindingDef binding = new VarBindingDef( varDef, value);\n          for( Iterator<String> properties = value.getProperties().iterator(); properties.hasNext(); )\n            {\n            propertyProviders_.put( properties.next(), binding);\n            }\n          }\n        }\n      }\n\n    return propertyProviders_;\n    }", "public static String toNumbers(String address){\n  StringBuilder buf=new StringBuilder();\n  for (int i=0; i < address.length(); i++)   buf.append(String.format(\"%d.\",(int)address.charAt(i)));\n  return buf.toString();\n}\n", "public static boolean checkForUserAttributes(String userDN,Set set) throws IDPPException {\n  try {\n    Map map=userProvider.getAttributes(userDN,set);\n    if ((map == null) || map.isEmpty()) {\n      return false;\n    }\n    return true;\n  }\n catch (  DataStoreProviderException dspe) {\n    debug.error(\"IDPPUtils:checkForUserAttributes:Error while \" + \"checking for user attributes.\",dspe);\n    throw new IDPPException(dspe);\n  }\n}\n", "public void destroy ( ) { super . destroy ( ) ; }", "protected void addLogical(Widget child) {\n\t\t// Detach new child.\n\t\tchild.removeFromParent();\n\n\t\t// Logical attach.\n\t\tgetChildren().add(child);\n\n\t\t// Adopt.\n\t\tadopt(child);\n\t}", "protected void assignLevel() {\r\n\r\n    int lvl = Integer.MAX_VALUE;\r\n\r\n    SAXSymbol sym;\r\n\r\n    for (sym = this.first(); (!sym.isGuard()); sym = sym.n) {\r\n\r\n      if (sym.isNonTerminal()) {\r\n        SAXRule referedTo = ((SAXNonTerminal) sym).r;\r\n        lvl = Math.min(referedTo.level + 1, lvl);\r\n      }\r\n      else {\r\n        level = 1;\r\n        return;\r\n      }\r\n\r\n    }\r\n\r\n    level = lvl;\r\n  }", "@Override\n    public StartMaintenanceResult startMaintenance(StartMaintenanceRequest request) {\n        request = beforeClientExecution(request);\n        return executeStartMaintenance(request);\n    }", "protected void onGetImageError(String cacheKey,VolleyError error){\n  BatchedImageRequest request=mInFlightRequests.remove(cacheKey);\n  if (request != null) {\n    request.setError(error);\n    batchResponse(cacheKey,request);\n  }\n}\n", "@Override public Object clone() throws CloneNotSupportedException {\n  SegmentedTimeline clone=(SegmentedTimeline)super.clone();\n  return clone;\n}\n", "public static ValueGetterSpacePredicate < ServerEntry > pathOr ( String path , ISpacePredicate leftPredicate , ISpacePredicate rightPredicate ) { return path ( path , or ( leftPredicate , rightPredicate ) ) ; }", "protected void addProperties(Root<T> root, CriteriaQuery<T> query, Set<String> properties) {\r\n\t\t\r\n\t\t// Ajout des ppt\r\n\t\taddProperties(root, properties);\r\n\t\t\r\n\t\t// On positionne le distict\r\n\t\tquery.distinct(true);\r\n\t}", "public final void append ( String s ) { compoundID . append ( s ) ; }", "\tprotected void endHTML(PrintWriter out) {\n   \t\n    \tboolean displMode3D = false;\n\t    if( displayMode3D != null ){\n\t    \tdisplMode3D = displayMode3D.booleanValue();\n\t    }\n\t    else{\n\t    \tif( getParent() instanceof ButtonBar)\n\t    \t\tdisplMode3D = ((ButtonBar)getParent()).getDisplayMode3D();\n\t    \telse\n\t    \t\tdisplMode3D=false;\n\t    }\n\n    \tString stylePostFix = \"\";\n    \tif( displMode3D )\n    \t\tstylePostFix = \"3D\";\n    \n        // remove context item\n        String src = getContext().processValue( id4ImageSrc() );\n        String text = getContext().processValue( id4Text() );\n\n        endHTML(out, src, text, displMode3D );\n    }\n", "public ClassFile find(String className) {\n        for (PathEntry pe : list) {\n            ClassFile cf = pe.find(className);\n            if (cf != null) {\n                return cf;\n            }\n        }\n        return null;\n    }", "public static String dictionaryToString(Dictionary<Object,Object> dict){\n  Enumeration<Object> keys=dict.keys();\n  Object key, value;\n  StringBuffer result=new StringBuffer();\n  while (keys.hasMoreElements()) {\n    key=keys.nextElement();\n    value=dict.get(key);\n    result.append(key.toString());\n    result.append(\" = \");\n    result.append(value.toString());\n    result.append(\"; \");\n  }\n  return result.toString();\n}\n", "public static final boolean isMobileNumber(String str)\n    {\n        if ( str.length() != 11 ) {\n            return false;\n        }\n        \n        if ( str.charAt(0) != '1' ) {\n            return false;\n        }\n        \n        if ( \"34578\".indexOf(str.charAt(1)) == -1 ) {\n            return false;\n        }\n        \n        return StringUtil.isNumeric(str, 2, str.length());\n    }", "public synchronized List < IComment > appendLocalInstructionComment ( final INaviInstruction instruction , final INaviCodeNode node , final String commentText ) throws CouldntSaveDataException , CouldntLoadDataException { Preconditions . checkNotNull ( in", "private static int endOfTagMatch(String string,int fromIndex,String tag){\n  int pos=string.indexOf(tag,fromIndex);\n  if (pos != -1) {\n    while (pos < string.length() && Character.isWhitespace(string.charAt(pos)))     pos++;\n    return pos + tag.length();\n  }\n  if (tag.contains(\" \")) {\n    tag=tag.replaceAll(\" \",\"\");\n    pos=string.indexOf(tag);\n    if (pos != -1) {\n      while (pos < string.length() && Character.isWhitespace(string.charAt(pos)))       pos++;\n      return pos + tag.length();\n    }\n  }\n  return -1;\n}\n", "    private String getClassName() {\n        String className =\n            handler.getValue(TransformationParameter.CLASS.getName());\n        if (className == null || className.equals(\"\")) {\n            logger.error(\"Parameter \" + TransformationParameter.CLASS.getName()\n                 + \" must be supplied....\");\n            throw new NullPointerException(\"Parameter \" +\n                TransformationParameter.CLASS.getName()\n                 + \" must be supplied....\");\n        }\n        return className;\n    }\n", "public boolean isEmpty ( ) { return head == null ; }", "public void calcPercents(){\n  if (count == 0) {\n    logger.info(\"can't divide by zero\");\n    return;\n  }\n  if (subItems != null && !subItems.isEmpty()) {\n    for (    GraphicLogAnalysisResultItem item : subItems) {\n      item.setPercent((item.getCount() * 100.0f) / count);\n      item.calcPercents();\n    }\n  }\n}\n", "\tpublic int setIndex(int index) {\n\t\tMessage[] messages = currentActivation.getMessages();\n\t\tif (index > messages.length) {\n\t\t\tindex = messages.length;\n\t\t} else if (index < 0) {\n\t\t\tindex = 0;\n\t\t}\n\t\tthis.index = index;\n\t\treturn index;\n\t}\n", "public Observable<AutoScaleRun> evaluateAutoScaleAsync(String poolId, String autoScaleFormula) {\n        return evaluateAutoScaleWithServiceResponseAsync(poolId, autoScaleFormula).map(new Func1<ServiceResponseWithHeaders<AutoScaleRun, PoolEvaluateAutoScaleHeaders>, AutoScaleRun>() {\n            @Override\n            public AutoScaleRun call(ServiceResponseWithHeaders<AutoScaleRun, PoolEvaluateAutoScaleHeaders> response) {\n                return response.body();\n            }\n        });\n    }", "public void setPlusSignString(String plusSignString) {\n        if (plusSignString == null) {\n            throw new NullPointerException(\"The input plus sign is null\");\n        }\n        this.plusString = plusSignString;\n        if (plusSignString.length() == 1) {\n            this.plusSign = plusSignString.charAt(0);\n        } else {\n            // Use the default plus sign as fallback\n            this.plusSign = DEF_PLUS_SIGN;\n        }\n    }", "public Expression asExpression ( Value bool ) { throw new RuntimeException ( STR_ ) ; }", "@SuppressWarnings(\"unchecked\")\n    private void mergeAt(int i) {\n        assert stackSize >= 2;\n        assert i >= 0;\n        assert i == stackSize - 2 || i == stackSize - 3;\n\n        int base1 = runBase[i];\n        int len1 = runLen[i];\n        int base2 = runBase[i + 1];\n        int len2 = runLen[i + 1];\n        assert len1 > 0 && len2 > 0;\n        assert base1 + len1 == base2;\n\n        /*\n         * Record the length of the combined runs; if i is the 3rd-last\n         * run now, also slide over the last run (which isn't involved\n         * in this merge).  The current run (i+1) goes away in any case.\n         */\n        runLen[i] = len1 + len2;\n        if (i == stackSize - 3) {\n            runBase[i + 1] = runBase[i + 2];\n            runLen[i + 1] = runLen[i + 2];\n        }\n        stackSize--;\n\n        /*\n         * Find where the first element of run2 goes in run1. Prior elements\n         * in run1 can be ignored (because they're already in place).\n         */\n        int k = gallopRight((Comparable<Object>) a[base2], a, base1, len1, 0);\n        assert k >= 0;\n        base1 += k;\n        len1 -= k;\n        if (len1 == 0)\n            return;\n\n        /*\n         * Find where the last element of run1 goes in run2. Subsequent elements\n         * in run2 can be ignored (because they're already in place).\n         */\n        len2 = gallopLeft((Comparable<Object>) a[base1 + len1 - 1], a,\n                base2, len2, len2 - 1);\n        assert len2 >= 0;\n        if (len2 == 0)\n            return;\n\n        // Merge remaining runs, using tmp array with min(len1, len2) elements\n        if (len1 <= len2)\n            mergeLo(base1, len1, base2, len2);\n        else\n            mergeHi(base1, len1, base2, len2);\n    }", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "    public void addInformationMessage(ActionErrors errors,ActionMessages messages){\n        Iterator iterError = errors.get();\n        while(iterError.hasNext()){\n            messages.add(GrievanceConstants.INFORMATION,(ActionMessage)iterError.next());\n        }\n    }\n", "@Specialization(rewriteOn=SlowPathException.class) protected int doIntegerSequencePosition(RAbstractVector left,Object leftStore,int leftBase,int leftLength,Object targetDimensions,@SuppressWarnings(\"unused\") int targetDimension,Object[] positions,RIntSequence position,int positionOffset,int positionLength,RTypedValue right,Object rightStore,int rightBase,int rightLength,boolean parentNA,@Cached(\"create()\") IntValueProfile startProfile,@Cached(\"create()\") IntValueProfile strideProfile,@Cached(\"createBinaryProfile()\") ConditionProfile conditionProfile,@Cached(\"createCountingProfile()\") LoopConditionProfile profile) throws SlowPathException {\n  int rightIndex=rightBase;\n  int start=startProfile.profile(position.getStart() - 1);\n  int stride=strideProfile.profile(position.getStride());\n  int end=start + positionLength * stride;\n  if (start < 0 || end <= 0) {\n    throw new SlowPathException(\"rewrite to doIntegerPosition\");\n  }\n  initRightIndexCheck(rightBase,positionLength,leftLength,rightLength);\n  boolean ascending=conditionProfile.profile(start < end);\n  profile.profileCounted(positionLength);\n  for (int positionValue=start; profile.inject(ascending ? positionValue < end : positionValue > end); positionValue+=stride) {\n    rightIndex=applyInner(left,leftStore,leftBase,leftLength,targetDimensions,positions,positionOffset,positionValue,right,rightStore,rightLength,rightIndex,parentNA);\n  }\n  return rightIndex;\n}\n", "void makeMemberConfirmedOnAll ( String memberName ) ;", "    protected Node exitLvalue(Production node) throws ParseException {\n        return node;\n    }\n", "    public short addConstantIntegerInfo(final int value) {\n        return this.addToConstantPool(new ConstantIntegerInfo(value));\n    }\n", "void start ( ) ;", "\tpublic void extend(Point2D p) {\n\t\tif (p.getX() > maxX) {\n\t\t\tmaxX = p.getX();\n\t\t}\n\t\tif (p.getY() > maxY) {\n\t\t\tmaxY = p.getY();\n\t\t}\n\t\tif (p.getX() < minX) {\n\t\t\tminX = p.getX();\n\t\t}\n\t\tif (p.getY() > minY) {\n\t\t\tminY = p.getY();\n\t\t}\n\t}\n", "@Override\n  public FSDataOutputStream create(Path f, FsPermission permission,\n    boolean overwrite,\n    int bufferSize, short replication, long blockSize,\n    Progressable progress) throws IOException {\n\n    FSDataOutputStream fd = new FSDataOutputStream(\n                                new CacheOutputStream(conf, this, f,\n                                    permission, overwrite, bufferSize,\n                                    replication, blockSize, progress));\n\n    return fd;\n  }", "    private void printIndent() throws IOException {\n\n        printIndent(stack.size());\n    }\n", "private static void getParameterizedTypePackageNames(ParameterizedType type,\n      Map<String, Class<?>> packageNames) {\n    for (Type argumentType : type.getActualTypeArguments()) {\n      getTypePackageNames(argumentType, packageNames);\n    }\n\n    getTypePackageNames(type.getRawType(), packageNames);\n    Type ownerType = type.getOwnerType();\n    if (ownerType != null) {\n      getTypePackageNames(ownerType, packageNames);\n    }\n  }", "public Canvas createCa ( ) { if ( ca == null ) ca = new Canvas ( bi ) ; return ca ; }", "public int flags(){\n  return pattern.flags();\n}\n", "public Composer transform(float x,float y,int alpha,float scaleX,float scaleY,float rotation){\n  if (mTweenParameterList.size() > 0) {\n    to(0,x,y,alpha,scaleX,scaleY,rotation,Ease.NONE);\n  }\n else {\n    mInitialParam=new AnimParameter(x,y,alpha,scaleX,scaleY,rotation);\n  }\n  return this;\n}\n", "    private int convertLocationToRowInColumn(int y, int column) {\n        int x = 0;\n\n        if (layoutOrientation != JList.VERTICAL) {\n            if (isLeftToRight) {\n                x = column * cellWidth;\n            } else {\n                x = list.getWidth() - (column+1)*cellWidth - list.getInsets().right;\n            } \n        }\n        return convertLocationToRow(x, y, true);\n    }\n", "void removedEchoBreakpoint ( BreakpointManager breakpointManager , Breakpoint breakpoint ) ;", "private void addField ( MappedClass clazz , String [ ] parts ) { String newName = parts [ NUM_ ] ; String original = parts [ NUM_ ] ; String desc = fixDesc ( parts [ NUM_ ] ) ; MappedMember mm = new MappedMember ( clazz , null , - NUM_ , desc , original )", "private boolean rangeContainsReserved(int ropRangeStart,int width){\n  for (int i=ropRangeStart; i < (ropRangeStart + width); i++) {\n    if (reservedRopRegs.get(i)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "public CFilterAction ( ) { super ( STR_ , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public boolean isTriggered(){\n  return checkbox.isSelected();\n}\n", "private PointBag getPointBag() {\r\n\t\tPointBag pb = nextFreePointBag;\r\n\t\tif (pb != null) {\r\n\t\t\tnextFreePointBag = pb.next;\r\n\t\t\tpb.next = null;\r\n\t\t\treturn pb;\r\n\t\t}\r\n\t\treturn new PointBag();\r\n\t}", "private void searchFor ( final String searchString , final boolean cycleBackwards , final boolean zoomToResult ) { if ( ! STR_ . equals ( searchString ) ) { add ( searchString ) ; } CSearchExecuter . search ( SwingUtilities . getWindowAncestor ( this ) , ", "@Override\n    protected void createHistPrincipalsTable(CmsSetupDb dbCon) throws SQLException {\n\n        System.out.println(new Exception().getStackTrace()[0].toString());\n        if (!dbCon.hasTableOrColumn(TABLE_CMS_HISTORY_PRINCIPALS, null)) {\n            String createStatement = readQuery(QUERY_HISTORY_PRINCIPALS_CREATE_TABLE_MYSQL);\n            Map<String, String> replacer = Collections.singletonMap(\"${tableEngine}\", m_poolData.get(\"engine\"));\n            dbCon.updateSqlStatement(createStatement, replacer, null);\n        } else {\n            System.out.println(\"table \" + TABLE_CMS_HISTORY_PRINCIPALS + \" already exists\");\n        }\n    }", "public static void deleteUmptyFoldersInFolder(File folder){\n  if (folder.isFile())   return;\n  if (folder.listFiles() == null || folder.listFiles().length <= 0) {\n    folder.delete();\n  }\n else {\n    for (    File f : folder.listFiles()) {\n      if (f.isD", "void writeBytes ( ChannelHandlerContext ctx , ByteBuf bytes ) ;", "private void newBuilding ( int x , int y , int typeId ) throws IOException { log . debug ( STR_ , typeId , x , y ) ; int type = typeId / OID_RADIX ; Village village = villageManager . getHomeVillage ( ) ; Building building = new Building ( ) ; building . x = x ; building . y = y ; building . data = typeId ; switch ( type ) { case NUM_ : village . buildings = appendBuilding ( village . buildings , building ) ; break ; case NUM_ : village . traps = appendBuilding ( village . traps , building ) ; break ; case NUM_ : village . decos = appendBuilding ( village . decos , building ) ; break ; } dirty = BOOL_ ; }", "\tpublic XPFPuzzle setTitle(String title) {\n\t\tthis.title = title;\n\t\treturn this;\n\t}\n", "\tpublic boolean isSyncCall() {\n\t\treturn ! isAssyncCall();\n\t}\n", "SpeechToTextWebSocketListener(final InputStream stream,final RecognizeOptions options,final RecognizeCallback callback){\n  this.stream=stream;\n  this.options=options;\n  this.callback=callback;\n}\n", "public PredictiveInfoCalculatorKernel ( ) throws InstantiationException , IllegalAccessException , ClassNotFoundException { super ( MI_CALCULATOR_KERNEL ) ; }", "protected String safeGetTemplateName(Template template){\n  if (template == null)   return null;\n  String name=template.getName();\n  if (name == null)   return null;\n  String decodedName=name;\n  if (decodedName.indexOf('%') != -1) {\n    decodedName=StringUtil.replace(decodedName,\"%2e\",\".\",false,false);\n    decodedName=StringUtil.replace(decodedName,\"%2E\",\".\",false,false);\n    decodedName=StringUtil.replace(decodedName,\"%2f\",\"/\",false,false);\n    decodedName=StringUtil.replace(decodedName,\"%2F\",\"/\",false,false);\n    decodedName=StringUtil.replace(decodedName,\"%5c\",\"\\\\\",false,false);\n    decodedName=StringUtil.replace(decodedName,\"%5C\",\"\\\\\",false,false);\n  }\n  int dotDotIdx=decodedName.indexOf(\"..\");\n  if (dotDotIdx != -1) {\n    int before=dotDotIdx - 1 >= 0 ? decodedName.charAt(dotDotIdx - 1) : -1;\n    int after=dotDotIdx + 2 < decodedName.length() ? decodedName.charAt(dotDotIdx + 2) : -1;\n    if ((before == -1 || before == '/' || before == '\\\\') && (after == -1 || after == '/' || after == '\\\\')) {\n      return null;\n    }\n  }\n  return name.startsWith(\"/\") ? name.substring(1) : name;\n}\n", "public boolean isWhitelisted(GHUser user){\n  return !isMyselfUser(user) && usersSet.contains(user.getLogin()) || isInWhitelistedOrg(user);\n}\n", "public void start(@NonNull Activity activity, @NonNull AuthCallback callback, int permissionRequestCode, int authenticationRequestCode) {\n        this.callback = callback;\n        this.authenticationRequestCode = authenticationRequestCode;\n\n        if (checkPermissions(activity)) {\n            Log.v(TAG, \"All permissions were already granted, the authentication flow is starting.\");\n            requestAuth(activity, authenticationRequestCode);\n        } else {\n            Log.d(TAG, \"Some permissions were not previously granted, requesting them now.\");\n            requestPermissions(activity, permissionRequestCode);\n        }\n    }", "\tpublic void clearLastConfirm() throws ExecutionException {\n\t\texecute(\"_sahi._clearLastConfirm()\");\n\t}\n", "public static boolean isNetworkConnected ( Context context ) { if ( context == null ) { return BOOL_ ; } ConnectivityManager cm = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo networkInfo = cm . getAct", "\tpublic void putProperty(String name, Object prop) {\n\t\tprops.put(name, prop);\n\t}\n", "private String uniquify(String label){\n  return label.replaceAll(\"\\\\s+\",\"\");\n}\n", "public void insertLastFocused(String symbol,boolean append){\n  if (this.variable == lastFocused) {\n    setVariable(symbol,append);\n  }\n else {\n    setExpression(symbol,append);\n  }\n}\n", "    public Item addItem(Object itemId) throws UnsupportedOperationException {\n        throw new UnsupportedOperationException();\n    }\n", "private void onOrderClicked ( ) { String coffee ; String message ; String number = etNumber . getText ( ) . toString ( ) ; boolean cream = chkCream . isChecked ( ) ; boolean sugar = chkSugar . isChecked ( ) ; if ( optExpresso . isChecked ( ) ) { coffee = ", "public abstract void filesDropped ( java . io . File [ ] files ) ;", "private void addInitialPeer(){\n  try {\n    addPeer(null,new InetSocketAddress(InetAddress.getByName(CONNECTABLE_ADDRESS),DEFAULT_PORT),Peer.OUTGOING);\n  }\n catch (  UnknownHostException e) {\n    e.printStackTrace();\n  }\n}\n", "void clear(){\n  children.clear();\n}\n", "@Override protected void finalize() throws Throwable {\n  shutdownNow();\n  super.finalize();\n}", "public void setLeftMargin (int leftMargin) {\n\tcheckWidget();\n\tsetMargins(leftMargin, topMargin, rightMargin, bottomMargin);\n}\n", "public Bookmark ( final CBookmark bookmark ) { m_bookmark = bookmark ; m_bookmark . addListener ( m_internalBookmarkListener ) ; }", "   private boolean isListenerAddMethod() {\n      String name = getName();\n      if (!name.startsWith(\"add\")) {\n         return false;\n      }\n      if (!name.endsWith(\"Listener\")) {\n         return false;\n      }\n      operationType = \"add\";\n      return true;\n   }\n", "public URLLabel(final URL url,final String display){\n  this(url.toExternalForm(),display);\n}\n", "public boolean zoneExportAddVolumes(URI exportGroupURI,List<URI> exportMaskURIs,Collection<URI> volumeURIs,String token){\n  ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);\n  _log.info(String.format(\"Entering zoneExportAddVolumes for ExportGroup: %s (%s) Volumes: %s\",exportGroup.getLabel(),exportGroup.getId(),volumeURIs.toString()));\n  String addZoneWhileAddingVolume=customConfigHandler.getComputedCustomConfigValue(CustomConfigConstants.ZONE_ADD_VOLUME,CustomConfigConstants.GLOBAL_KEY,null);\n  Boolean addZoneOnDeviceOperation=true;\n  _log.info(\"zoneExportAddVolumes checking for custom config value {} to skip zoning checks : (Default) : {}\",addZoneWhileAddingVolume,addZoneOnDeviceOperation);\n  if (addZoneWhileAddingVolume != null) {\n    addZoneOnDeviceOperation=Boolean.valueOf(addZoneWhileAddingVolume);\n    _log.info(\"Boolean convereted of : {} : returned by Config handler as : {} \",addZoneWhileAddingVolume,addZoneOnDeviceOperation);\n  }\n else {\n    _log.info(\"Config handler returned null for value so going by default value {}\",addZoneOnDeviceOperation);\n  }\n  _log.info(\"zoneExportAddVolumes checking for custom config value {} to skip zoning checks : (Custom Config) : {}\",addZoneWhileAddingVolume,addZoneOnDeviceOperation);\n  return doZoneExportMasksCreate(exportGroup,exportMaskURIs,volumeURIs,token,addZoneOnDeviceOperation);\n}\n", "\tprivate void incVelocity(double[] velocity, double[] attraction){\n        assert(velocity.length == attraction.length);\n        for (int i = 0; i < velocity.length; ++i){\n            velocity[i]+= attraction[i];\n        }\n    }\n", "public static base_response unset(nitro_service client, coparameter resource, String[] args) throws Exception{\n\t\tcoparameter unsetresource = new coparameter();\n\t\treturn unsetresource.unset_resource(client,args);\n\t}", "\tpublic Icon getIcon() {\n\t\tIcon back = null;\n\n\t\tString key = \"unkfolder.png\";\n\t\tback = getIcon(key);\n\n\t\treturn back;\n\t}\n", "public void savePosition ( ) { RecordId rid1 = s1 . getRecordId ( ) ; RecordId rid2 = ( s2 == null ) ? null : s2 . getRecordId ( ) ; savedPosition = Arrays . asList ( rid1 , rid2 ) ; }", "public void setAlias(String alias, String aliasPath)\r\n\t{\r\n\t\tm_alias = alias;\r\n\t\tm_userAlias = new UserAlias(alias, (String)getAttribute(), aliasPath);\r\n\t}", "\tpublic boolean hasValidLevel(){\n\t\tif (level == null)\n\t\t\treturn false;\n\t\treturn level.isValid();\n\t}\n", "public boolean onDragEnter ( CefBrowser browser , CefDragData dragData , int mask ) ;", "private static void setAdditionalStyles(CmsClientSitemapEntry entry, CmsListItemWidget itemWidget) {\n\n        if (!entry.isResleasedAndNotExpired()\n            || ((CmsSitemapView.getInstance().getEditorMode() == EditorMode.navigation)\n                && !entry.isDefaultFileReleased())) {\n            itemWidget.getContentPanel().addStyleName(\n                I_CmsSitemapLayoutBundle.INSTANCE.sitemapItemCss().expiredOrNotReleased());\n        } else {\n            itemWidget.getContentPanel().removeStyleName(\n                I_CmsSitemapLayoutBundle.INSTANCE.sitemapItemCss().expiredOrNotReleased());\n        }\n        if (entry.isHiddenNavigationEntry()) {\n            itemWidget.getContentPanel().addStyleName(\n                I_CmsSitemapLayoutBundle.INSTANCE.sitemapItemCss().hiddenNavEntry());\n        } else {\n            itemWidget.getContentPanel().removeStyleName(\n                I_CmsSitemapLayoutBundle.INSTANCE.sitemapItemCss().hiddenNavEntry());\n        }\n    }", "    protected String documentation() {\n        if (documentation == null) documentation = \"\";\n        return documentation;\n    }\n", "public Builder convertDurationsTo ( TimeUnit durationUnit ) { this . durationUnit = durationUnit ; return this ; }", "public static boolean parseNestedSQString ( PsiBuilder b , int l ) { IElementType tokenType ; if ( b . getTokenType ( ) == QUOTE_SINGLE ) { PsiBuilder . Marker m = b . mark ( ) ; b . advanceLexer ( ) ; m . collapse ( QUOTE_SINGLE_OPEN ) ; m = b . mark ( )", "    public void qualityClassModelChanged() {\n\n        try {\n            this.initData();\n            this.rework();\n            \n        } catch (SeqdataException sx) {\n            Log.log(Log.ERROR, new Throwable(), sx,\n                    ResourceUtil.g", "\tprivate void mem_status(int cycle) {\n\t\tMemoryMXBean bean = ManagementFactory.getMemoryMXBean();\n\t\tlog.getDebugObj().getAppLogger().debug(\"cycle \" + cycle);\n\t\tlog.getDebugObj().getAppLogger().debug(\"   heap: \" + bean.getHeapMemoryUsage());\n\t\tlog.getDebugObj().getAppLogger().debug(\"nonheap: \" + bean.getNonHeapMemoryUsage());\n\t}\n", "protected Method findEjbMethod(Method controlBeanMethod, Class ejbInterface) {\n        final String cbMethodName = controlBeanMethod.getName();\n        final Class cbMethodReturnType = controlBeanMethod.getReturnType();\n        final Class[] cbMethodParams = controlBeanMethod.getParameterTypes();\n\n        Method[] ejbMethods = ejbInterface.getMethods();\n        for (Method m : ejbMethods) {\n            if (!cbMethodName.equals(m.getName())\n                    || !cbMethodReturnType.equals(m.getReturnType())) {\n                continue;\n            }\n\n            Class[] params = m.getParameterTypes();\n            if (cbMethodParams.length == params.length) {\n                int i;\n                for (i = 0; i < cbMethodParams.length; i++) {\n                    if (cbMethodParams[i] != params[i]) break;\n                }\n                if (i == cbMethodParams.length)\n                    return m;\n            }\n        }\n        return null;\n    }", "public void check(GHPullRequest ghpr, boolean isWebhook) {\n        if (helper.isProjectDisabled()) {\n            LOGGER.log(Level.FINE, \"Project is disabled, ignoring pull request\");\n            return;\n        }\n        // Call update PR with the update PR info and no comment\n        updatePR(ghpr, null /*GHIssueComment*/, isWebhook);\n        commitAuthor = getPRCommitAuthor();\n        checkSkipBuild();\n        checkBlackListLabels();\n        checkWhiteListLabels();\n        tryBuild();\n    }", "public static Version parseVersion(String version) {\n\t\tif (!Strings.isNullOrEmpty(version)) {\n\t\t\ttry {\n\t\t\t\treturn Version.parseVersion(version);\n\t\t\t} catch (Throwable exception) {\n\t\t\t\t//\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "public void setByteInput(ByteInputPort byteInput) {\n    \tif (byteInput == null)\n    \t\tthrow new IllegalArgumentException(\"byteInput == null\");\n\t\tthis.byteInput = byteInput;\n\t}", "\tprivate void ensureVisibility(final JPanel widget) {\n\t\tmainPanel.removeAll();\n\t\tmainPanel.add(widget, BorderLayout.CENTER);\n\t\tmainPanel.doLayout();\n\t\tmainPanel.repaint();\n\t}\n", "public synchronized void putItem(TopLevelItem item) throws IOException, InterruptedException {\n        String name = item.getName();\n        TopLevelItem old = items.get(name);\n        if (old ==item)  return; // noop\n\n        checkPermission(Item.CREATE);\n        if (old!=null)\n            old.delete();\n        items.put(name,item);\n        ItemListener.fireOnCreated(item);\n    }", "public void stopStep(final String uuid) {\n        final Optional<StepResult> found = storage.getStep(uuid);\n        if (!found.isPresent()) {\n            LOGGER.error(\"Could not stop step: step with uuid {} not found\", uuid);\n            return;\n        }\n\n        final StepResult step = found.get();\n        notifier.beforeStepStop(step);\n\n        step.setStage(Stage.FINISHED);\n        step.setStop(System.currentTimeMillis());\n\n        storage.remove(uuid);\n        threadContext.stop();\n\n        notifier.afterStepStop(step);\n    }", "private Expression2 getPreUnaryLogicalForm() {\n    if (isTerminal()) {\n      Expression2 logicalForm = lexiconEntry.getCategory().getLogicalForm();\n      return logicalForm;\n    } else {\n      Expression2 leftLogicalForm = left.getLogicalForm();\n      Expression2 rightLogicalForm = right.getLogicalForm();\n\n      return getCombinatorLogicalForm(leftLogicalForm, rightLogicalForm);\n    }\n  }", "        protected Object readResolve() throws ObjectStreamException {\n\n            return Catcode.LETTER;\n        }\n", "public void getCurrentPoint(float[] point) {\n\tif (isDisposed()) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n\tif (point == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);\n\tif (point.length < 2) SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n\tdouble[] x = new double[1], y = new double[1];\n\tCairo.cairo_current_point(handle, x, y);\n\tpoint[0] = (float)x[0];\n\tpoint[1] = (float)y[0];\n}\n", "public String toString ( ) { Annotation [ ] [ ] aa = getAnnotations ( ) ; StringBuilder sbuf = new StringBuilder ( ) ; int k = NUM_ ; while ( k < aa . length ) { Annotation [ ] a = aa [ k ++ ] ; int i = NUM_ ; while ( i < a . length ) { sbuf . append ( a ", "    public void setVersionEnabled(boolean enable) {\n        high.setEnabled(enable);\n        mid.setEnabled(enable);\n        low.setEnabled(enable);\n        postfix.setEnabled(enable);\n    }\n", "private Iterator<XSComponent> descendants(XSModelGroup mg){\n  List<XSComponent> r=new ArrayList<XSComponent>();\n  visit(mg,r);\n  return r.iterator();\n}\n", "void swipeVertical ( By swipeBy , int offset , int durationInMilliSeconds ) ;", "void changedHost ( DebuggerTemplate template , String host ) ;", "public void awaitTimeout(long awaitTimeout,long awaitJoin) throws InterruptedException {\n  long end=System.nanoTime() + awaitTimeout * 1000 * 1000000L;\n  for (  Thread t : threads) {\n    long time=System.nanoTime();\n    if (time < end) {\n      t.join(((end - time) / 1000000),(int)((end - time) % 1000000));\n    }\n  }\n  check(numthreads,0,0);\n  for (  Thread t : threads) {\n    t.interrupt();\n  }\n  end=System.nanoTime() + awaitJoin * 1000 * 1000000L;\n  for (  Thread t : threads) {\n    long time=System.nanoTime();\n    if (time < end) {\n      t.join(((end - time) / 1000000),(int)((end - time) % 1000000));\n    }\n  }\n  check(numthreads,0,numthreads);\n}\n", "private void checkConfiguration ( ) { if ( configuration == null ) { throw new IllegalStateException ( ERROR_NOT_INIT ) ; } }", "\tprotected void addNamespacePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors\n\t\t\t\t.add(createItemPropertyDescriptor(\n\t\t\t\t\t\t((ComposeableAdapterFactory) adapterFactory)\n\t\t\t\t\t\t\t\t.getRootAdapterFactory(),\n\t\t\t\t\t\tgetResourceLocator(),\n\t\t\t\t\t\tgetString(\"_UI_Extension_namespace_feature\"), //$NON-NLS-1$\n\t\t\t\t\t\tgetString(\n\t\t\t\t\t\t\t\t\"_UI_PropertyDescriptor_description\", \"_UI_Extension_namespace_feature\", \"_UI_Extension_type\"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n\t\t\t\t\t\tBPELPackage.Literals.EXTENSION__NAMESPACE, true, false,\n\t\t\t\t\t\tfalse, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t\t\tnull, null));\n\t}\n", "public static boolean isStaticSelector(JCTree base, Names names) {\n        if (base == null)\n            return false;\n        switch (base.getTag()) {\n            case IDENT:\n                JCIdent id = (JCIdent)base;\n                return id.name != names._this &&\n                        id.name != names._super &&\n                        isStaticSym(base);\n            case SELECT:\n                return isStaticSym(base) &&\n                    isStaticSelector(((JCFieldAccess)base).selected, names);\n            case TYPEAPPLY:\n            case TYPEARRAY:\n                return true;\n            case ANNOTATED_TYPE:\n                return isStaticSelector(((JCAnnotatedType)base).underlyingType, names);\n            default:\n                return false;\n        }\n    }", "public boolean isReadLocked(){\n  return rwl.getReadLockCount() > 0;\n}\n", "Enumeration < PluginEntry > entries ( ) ;", "public VisualCoverageAction ( final GraphFrame graphFrame ) { super ( STR_ ) ; this . graphFrame = graphFrame ; }", "\tprivate void fireChanged(String keyText) {\n\t\tif (keyText == null) {\n\t\t\treturn;\n\t\t}\n\t\tChangeEvent changeEvent = new ChangeEvent(keyText);\n\t\t// Guaranteed to return a non-null array\n\t\tObject[] listeners = listenerList.getListenerList();\n\t\t// Process the listeners last to first, notifying\n\t\t// those that are interested in this event\n\t\tfor (int i = listeners.length - 2; i >= 0; i -= 2) {\n\t\t\tif (listeners[i] == ChangeListener.class) {\n\t\t\t\t((ChangeListener) listeners[i + 1]).stateChanged(changeEvent);\n\t\t\t}\n\t\t}\n\t}\n", "private void logTimeTakenByPhase(GraphContext graphContext, Class<? extends RulePhase> phase, int timeTaken)\n    {\n        if (!timeTakenByPhase.containsKey(phase))\n        {\n            RulePhaseExecutionStatisticsModel model = new GraphService<>(graphContext,\n                        RulePhaseExecutionStatisticsModel.class).create();\n            model.setRulePhase(phase.toString());\n            model.setTimeTaken(timeTaken);\n            model.setOrderExecuted(timeTakenByPhase.size());\n            timeTakenByPhase.put(phase, model.getElement().id());\n        }\n        else\n        {\n            GraphService<RulePhaseExecutionStatisticsModel> service = new GraphService<>(graphContext,\n                        RulePhaseExecutionStatisticsModel.class);\n            RulePhaseExecutionStatisticsModel model = service.getById(timeTakenByPhase.get(phase));\n            int prevTimeTaken = model.getTimeTaken();\n            model.setTimeTaken(prevTimeTaken + timeTaken);\n        }\n    }", "public static boolean nullEquals(String s1,String s2){\n  return (s1 == null ? s2 == null : s1.equals(s2));\n}\n", "public void paintCurrentValue(Graphics g,Rectangle bounds,boolean hasFocus){\n  ListCellRenderer renderer=comboBox.getRenderer();\n  Component c;\n  if (hasFocus && !isPopupVisible(comboBox)) {\n    c=renderer.getListCellRendererComponent(listBox,comboBox.getSelectedItem(),-1,true,false);\n  }\n else {\n    c=renderer.getListCellRendererComponent(listBox,comboBox.getSelectedItem(),-1,false,false);\n    c.setBackground(UIManager.getColor(\"ComboBox.background\"));\n  }\n  c.setFont(comboBox.getFont());\n  if (hasFocus && !isPopupVisible(comboBox)) {\n    c.setForeground(listBox.getSelectionForeground());\n    c.setBackground(listBox.getSelectionBackground());\n  }\n else {\n    if (comboBox.isEnabled()) {\n      c.setForeground(comboBox.getForeground());\n      c.setBackground(comboBox.getBackground());\n    }\n else {\n      c.setForeground(DefaultLookup.getColor(comboBox,this,\"ComboBox.disabledForeground\",null));\n      c.setBackground(DefaultLookup.getColor(comboBox,this,\"ComboBox.disabledBackground\",null));\n    }\n  }\n  boolean shouldValidate=false;\n  if (c instanceof JPanel) {\n    shouldValidate=true;\n  }\n  int x=bounds.x, y=bounds.y, w=bounds.width, h=bounds.height;\n  if (padding != null) {\n    x=bounds.x + padding.left;\n    y=bounds.y + padding.top;\n    w=bounds.width - (padding.left + padding.right);\n    h=bounds.height - (padding.top + padding.bottom);\n  }\n  currentValuePane.paintComponent(g,c,comboBox,x,y,w,h,shouldValidate);\n}\n", "\tprivate String getMemorySize(long memorySize) {\n\n\t\tfinal long gigabyteSize = 1 << 30;\n\t\tfinal long megabyteSize = 1 << 20;\n\t\tfinal long kilobyteSize = 1 << 10;\n\n\t\tif (memorySize >= gigabyteSize) {\n\t\t\treturn (memorySize / gigabyteSize) + \"g\";\n\t\t} else if (memorySize >= megabyteSize) {\n\t\t\treturn (memorySize / megabyteSize) + \"m\";\n\t\t} else if (memorySize >= kilobyteSize) {\n\t\t\treturn (memorySize / kilobyteSize) + \"k\";\n\t\t} else {\n\t\t\treturn memorySize + \"b\";\n\t\t}\n\t}\n", "private int resolveSizeAndStateRespectingMinSize(int minSize,int measuredSize,int measureSpec){\n  if (minSize != SIZE_UNSPECIFIED) {\n    final int desiredWidth=Math.max(minSize,measuredSize);\n    return resolveSizeAndState(desiredWidth,measureSpec,0);\n  }\n else {\n    return measuredSize;\n  }\n}\n", "public void add(final AtomicAction action) {\n        if (action instanceof Action) {\n            Action a = (Action)action;\n            peforms.addAll(a.peforms);\n            backouts.addAll(a.backouts);\n            cleanUps.addAll(a.cleanUps);\n        } ", "private static void add1(Collection<String> src,String line){\n  src.add(TAB + line);\n}\n", "    public boolean checkInRage(MuObject t) {\n        int chx = t.getX() / 5;\n        int chy = t.getY() / 5;\n        int myx = getX() / 5;\n        int myy = getY() / 5;\n        int rangeX1 = myx - 3;\n        int rangeX2 = myx + 3;\n        int rangeY1 = myy - 3;\n        int rangeY2 = myy + 3;\n        if ((rangeX1 <= chx) && (chx <= rangeX2) && (rangeY1 <= chy) && (chy <= rangeY2)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n", "public java.awt.Image createAwtImage(Color foreground, Color background) {\n        if (image == null)\n            return null;\n        int f = foreground.getRGB();\n        int g = background.getRGB();\n        Canvas canvas = new Canvas();\n\n        int w = width + 2 * ws;\n        int h = height + 2 * ws;\n        int pix[] = new int[w * h];\n        int stride = (w + 7) / 8;\n        int ptr = 0;\n        for (int k = 0; k < h; ++k) {\n            int p = k * stride;\n            for (int j = 0; j < w; ++j) {\n                int b = image[p + (j / 8)] & 0xff;\n                b <<= j % 8;\n                pix[ptr++] = (b & 0x80) == 0 ? g : f;\n            }\n        }\n        java.awt.Image img = canvas.createImage(new MemoryImageSource(w, h, pix, 0, w));\n        return img;\n    }", "private void checkContainerState(String methodName, ContainerState minimalState) {\n        if (nonPortableMode) {\n            return;\n        }\n        if (this.container == null) {\n            this.container = Container.instance(manager);\n        }\n\n        ContainerState state = container.getState();\n        if (SHUTDOWN.equals(state)) {\n            throw BeanManagerLogger.LOG.methodNotAvailableAfterShutdown(methodName);\n        }\n        if (state.compareTo(minimalState) < 0) {\n            throw BeanManagerLogger.LOG.methodNotAvailableDuringInitialization(methodName, state);\n        }\n    }", "    public void setAllGadgetRatingScores(GadgetRatingScorePool allGadgetRatingScores) {\n        this.allGadgetRatingScores=allGadgetRatingScores;\n        clear();\n\n        Iterator<GadgetRatingScore> it = allGadgetRatingScores.getScores().iterator();\n        while (it.hasNext()) {\n            GadgetRatingScore score = it.next();\n            addRating(score.getUserName(), score.getScore());\n        }\n    }\n", "public static String cleanPath(String path) throws InvalidPathException {\n    validatePath(path);\n    return FilenameUtils.separatorsToUnix(FilenameUtils.normalizeNoEndSeparator(path));\n  }", "private boolean isMessageCompressed() {\r\n        String contentEncoding = m_request.getHeader(HttpDefs.CONTENT_ENCODING);\r\n        if (contentEncoding != null) {\r\n            if (!contentEncoding.equalsIgnoreCase(\"gzip\")) {\r\n                throw new IllegalArgumentException(\"Unsupported Content-Encoding: \" + contentEncoding);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }", "public SpanManager replace ( Span s , String str ) { return replace ( s . getStart ( ) , s . getEnd ( ) , str ) ; }", "public static MutableComboBoxModel leftShift ( MutableComboBoxModel self , Object i ) { self . addElement ( i ) ; return self ; }", "protected String setEncoding(String content, String encoding) {\n\n        if (content.toLowerCase().indexOf(\"<?xml\") == -1) {\n            return content;\n        } else {\n            // XML information present, replace encoding\n            // set the encoding only if it does not exist\n            String xmlTag = content.substring(0, content.indexOf(\">\") + 1);\n            if (xmlTag.toLowerCase().indexOf(\"encoding\") == -1) {\n                content = content.substring(content.indexOf(\">\") + 1);\n                content = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + encoding + \"\\\"?>\" + content;\n            }\n        }\n        return content;\n    }", "long insertActivatingDevice ( String key , String bssid , int type , int state , String name , String rom_version , String latest_rom_version , long timestamp , long userId ) ;", "public boolean exceptionOccurred(){\n  return this.exceptionOccurred;\n}\n", "@Override\n    public void initialize(final Instance _instance,\n                           final Store _store)\n        throws EFapsException\n    {\n        super.initialize(_instance, _store);\n    }", "    public void setShort(int parameterIndex, short x) throws SQLException {\n        stmtActual.setShort(parameterIndex, x);\n        if (isInWhereClause(parameterIndex) && stmtBefore != null) {\n            stmtBefore[0].setShort(parameterIndex - paramOffset + 1, x);\n        }\n    }\n", "public void destroy ( ) { super . destroy ( ) ; }", "public void reportDeferredDiagnostics(){\n  reportDeferredDiagnostics(EnumSet.allOf(JCDiagnostic.Kind.class));\n}", "public boolean isInFinalForm(){\n\t\treturn (firstTerm instanceof Variable &&\n\t\t\t\t!secondTerm.containsVar((Variable) firstTerm));\n\t}", "public boolean every(Func1<? super T, Boolean> predicate) {\n        for (T item : this) {\n            if (!predicate.call(item))\n                return false;\n        }\n        return true;\n    }", "private byte[] bufD(final int valsz){\n    int log = 0;\n    while((1 << log) < valsz)++log;\n    assert (1 << log) == valsz;\n    final int ridsz = _len >= 65535?4:2;\n    final int elmsz = ridsz + valsz;\n    int off = CXDChunk.OFF;\n    byte [] buf = MemoryManager.malloc1(off + _sparseLen*elmsz,true);\n    for( int i=0; i<_sparseLen; i++, off += elmsz ) {\n      if(ridsz == 2)\n        UDP.set2(buf,off,(short)_id[i]);\n      else\n        UDP.set4(buf,off,_id[i]);\n      final double dval = _ds == null?isNA2(i)?Double.NaN:_ls[i]*PrettyPrint.pow10(_xs[i]):_ds[i];\n      switch(valsz){\n        case 4:\n          UDP.set4f(buf, off + ridsz, (float) dval);\n          break;\n        case 8:\n          UDP.set8d(buf, off + ridsz, dval);\n          break;\n        default:\n          throw H2O.unimpl();\n      }\n    }\n    assert off==buf.length;\n    return buf;\n  }", "\tprivate String getNamespace(String nsLocation, final Map namespaces) {\n\t\tint index = nsLocation.indexOf(\"#\");\n\t\tif (index > -1) {\n\t\t\tnsLocation = nsLocation.substring(0, index);\n\t\t}\n\t\treturn (String) namespaces.get(nsLocation);\n\t}\n", "public void copyIntoCorrectedForCoordinatedOmission(final AbstractHistogram targetHistogram,\n                                                        final long expectedIntervalBetweenValueSamples) {\n        targetHistogram.reset();\n        targetHistogram.addWhileCorrectingForCoordinatedOmission(this, expectedIntervalBetweenValueSamples);\n        targetHistogram.setStartTimeStamp(this.startTimeStampMsec);\n        targetHistogram.setEndTimeStamp(this.endTimeStampMsec);\n    }", "    @Test public void test02_reindex_database() throws Exception {\n\t\tdb.disableTx(); // see above!\n\t\tdb.begin();\n\t\tdb.executeSql(\"REINDEX DATABASE \"+Company.getCompanyDatabaseName(db.getCompanyId()));\n\t\tdb.commit();\n    }\n", "public void lineStartsAt(int charInFile){\n  if (immutable) {\n    throw new UnsupportedOperationException();\n  }\n  if (nLines == lineNums.length) {\n    int[] newLineNums=new int[nLines * 2];\n    System.arraycopy(lineNums,0,newLineNums,0,nLines);\n    lineNums=newLineNums;\n  }\n  lineNums[nLines++]=charInFile;\n  cachedCharInFile=-1;\n}\n", "public void setClusterParameterGroups(java.util.Collection<ClusterParameterGroupStatus> clusterParameterGroups) {\n        if (clusterParameterGroups == null) {\n            this.clusterParameterGroups = null;\n            return;\n        }\n\n        this.clusterParameterGroups = new com.amazonaws.internal.SdkInternalList<ClusterParameterGroupStatus>(clusterParameterGroups);\n    }", "\tpublic void setRegions(Region[] regions) {\n\t\tsuper.setRegions(regions);\n\t\tfor (SetViewer v : viewers) {\n\t\t\tv.setRegions(regions);\n\t\t}\n\t}\n", "public static StringLiteralExpr escape ( String string ) { return new StringLiteralExpr ( Utils . escapeEndOfLines ( string ) ) ; }", "public StorageUnitNotificationRegistrationEntity createStorageUnitNotificationRegistrationEntity(NotificationRegistrationKey notificationRegistrationKey,String notificationEventTypeCode,String businessObjectDefinitionNamespace,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,Integer businessObjectFormatVersion,String storageName,String newStorageUnitStatus,String oldStorageUnitStatus,List<JobAction> jobActions,String notificationRegistrationStatus){\n  NamespaceEntity namespaceEntity=namespaceDao.getNamespaceByCd(notificationRegistrationKey.getNamespace());\n  if (namespaceEntity == null) {\n    namespaceEntity=namespaceDaoTestHelper.createNamespaceEntity(notificationRegistrationKey.getNamespace());\n  }\n  NotificationEventTypeEntity notificationEventTypeEntity=notificationEventTypeDao.getNotificationEventTypeByCode(notificationEventTypeCode);\n  if (notificationEventTypeEntity == null) {\n    notificationEventTypeEntity=createNotificationEventTypeEntity(notificationEventTypeCode);\n  }\n  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=businessObjectDefinitionDao.getBusinessObjectDefinitionByKey(new BusinessObjectDefinitionKey(businessObjectDefinitionNamespace,businessObjectDefinitionName));\n  if (businessObjectDefinitionEntity == null) {\n    businessObjectDefinitionEntity=businessObjectDefinitionDaoTestHelper.createBusinessObjectDefinitionEntity(businessObjectDefinitionNamespace,businessObjectDefinitionName,AbstractDaoTest.DATA_PROVIDER_NAME,AbstractDaoTest.BDEF_DESCRIPTION);\n  }\n  FileTypeEntity fileTypeEntity=null;\n  if (StringUtils.isNotBlank(businessObjectFormatFileType)) {\n    fileTypeEntity=fileTypeDao.getFileTypeByCode(businessObjectFormatFileType);\n    if (fileTypeEntity == null) {\n      fileTypeEntity=fileTypeDaoTestHelper.createFileTypeEntity(businessObjectFormatFileType);\n    }\n  }\n  StorageEntity storageEntity=storageDao.getStorageByName(storageName);\n  if (storageEntity == null) {\n    storageEntity=storageDaoTestHelper.createStorageEntity(storageName,StoragePlatformEntity.S3);\n  }\n  StorageUnitStatusEntity newStorageUnitStatusEntity=null;\n  if (StringUtils.isNotBlank(newStorageUnitStatus)) {\n    newStorageUnitStatusEntity=storageUnitStatusDao.getStorageUnitStatusByCode(newStorageUnitStatus);\n    if (newStorageUnitStatusEntity == null) {\n      newStorageUnitStatusEntity=storageUnitStatusDaoTestHelper.createStorageUnitStatusEntity(newStorageUnitStatus);\n    }\n  }\n  StorageUnitStatusEntity oldStorageUnitStatusEntity=null;\n  if (StringUtils.isNotBlank(oldStorageUnitStatus)) {\n    oldStorageUnitStatusEntity=storageUnitStatusDao.getStorageUnitStatusByCode(oldStorageUnitStatus);\n    if (oldStorageUnitStatusEntity == null) {\n      oldStorageUnitStatusEntity=storageUnitStatusDaoTestHelper.createStorageUnitStatusEntity(oldStorageUnitStatus);\n    }\n  }\n  NotificationRegistrationStatusEntity notificationRegistrationStatusEntity=notificationRegistrationStatusDao.getNotificationRegistrationStatus(notificationRegistrationStatus);\n  if (notificationRegistrationStatusEntity == null) {\n    notificationRegistrationStatusEntity=createNotificationRegistrationStatusEntity(notificationRegistrationStatus);\n  }\n  StorageUnitNotificationRegistrationEntity storageUnitNotificationRegistrationEntity=new StorageUnitNotificationRegistrationEntity();\n  storageUnitNotificationRegistrationEntity.setNamespace(namespaceEntity);\n  storageUnitNotificationRegistrationEntity.setName(notificationRegistrationKey.getNotificationName());\n  storageUnitNotificationRegistrationEntity.setNotificationEventType(notificationEventTypeEntity);\n  storageUnitNotificationRegistrationEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);\n  storageUnitNotificationRegistrationEntity.setUsage(businessObjectFormatUsage);\n  storageUnitNotificationRegistrationEntity.setFileType(fileTypeEntity);\n  storageUnitNotificationRegistrationEntity.setBusinessObjectFormatVersion(businessObjectFormatVersion);\n  storageUnitNotificationRegistrationEntity.setStorage(storageEntity);\n  storageUnitNotificationRegistrationEntity.setNewStorageUnitStatus(newStorageUnitStatusEntity);\n  storageUnitNotificationRegistrationEntity.setOldStorageUnitStatus(oldStorageUnitStatusEntity);\n  storageUnitNotificationRegistrationEntity.setNotificationRegistrationStatus(notificationRegistrationStatusEntity);\n  if (!CollectionUtils.isEmpty(jobActions)) {\n    List<NotificationActionEntity> notificationActionEntities=new ArrayList<>();\n    storageUnitNotificationRegistrationEntity.setNotificationActions(notificationActionEntities);\n    for (    JobAction jobAction : jobActions) {\n      JobDefinitionEntity jobDefinitionEntity=jobDefinitionDao.getJobDefinitionByAltKey(jobAction.getNamespace(),jobAction.getJobName());\n      if (jobDefinitionEntity == null) {\n        jobDefinitionEntity=jobDefinitionDaoTestHelper.createJobDefinitionEntity(jobAction.getNamespace(),jobAction.getJobName(),String.format(\"Description of \\\"%s.%s\\\" job definition.\",jobAction.getNamespace(),jobAction.getJobName()),String.format(\"%s.%s.%s\",jobAction.getNamespace(),jobAction.getJobName(),AbstractDaoTest.ACTIVITI_ID));\n      }\n      NotificationJobActionEntity notificationJobActionEntity=new NotificationJobActionEntity();\n      notificationActionEntities.add(notificationJobActionEntity);\n      notificationJobActionEntity.setNotificationRegistration(storageUnitNotificationRegistrationEntity);\n      notificationJobActionEntity.setJobDefinition(jobDefinitionEntity);\n      notificationJobActionEntity.setCorrelationData(jobAction.getCorrelationData());\n    }\n  }\n  return storageUnitNotificationRegistrationDao.saveAndRefresh(storageUnitNotificationRegistrationEntity);\n}\n", "    private NobelPrize readNobelPrizeByPrimaryKey(final Long primaryKey) {\n        return EntityDataAccess.findById(NobelPrize.class, primaryKey);\n    }\n", "@Override protected void finalize(){\n  try {\n    if (socket != null) {\n      socket.close();\n      socket=null;\n    }\n    threadService.terminate();\n  }\n catch (  Exception e) {\n    if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {\n      SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,\"finalize\",\"Exception in finalizer\",e);\n    }\n  }\n}\n", "public GetMappingResult withMapping(MappingEntry... mapping) {\n        if (this.mapping == null) {\n            setMapping(new java.util.ArrayList<MappingEntry>(mapping.length));\n        }\n        for (MappingEntry ele : mapping) {\n            this.mapping.add(ele);\n        }\n        return this;\n    }", "    public boolean isSuccessful() {\n        return isProcessingSuccessful;\n    }\n", "  public void clear() {\n    // Clears the hash entries\n    Arrays.fill(this.baseHash, 0);\n\n    // Set size to zero\n    size = 0;\n\n    // Mark all array entries as empty. This is done with\n    // <code>firstEmpty</code> pointing to the first valid index (1 as 0 is\n    // used as 'Ground').\n    firstEmpty = 1;\n\n    // And setting all the <code>next[i]</code> to point at\n    // <code>i+1</code>.\n    for (int i = 1; i < this.capacity;) {\n      next[i] = ++i;\n    }\n\n    // Surly, the last one should point to the 'Ground'.\n    next[this.capacity] = 0;\n  }\n", "public short calcRecordLength(DbfTableModel model){\n  int length=0;\n  int columnCount=model.getColumnCount();\n  for (int i=0; i <= columnCount - 1; i++) {\n    length+=model.getLength(i);\n  }\n  length+=1;\n  Integer integer=new Integer(length);\n  return integer.shortValue();\n}\n", "public static <T> Level0ArrayOperator<Integer[],Integer> onArray(final int[] target) {\r\n        return onArrayOf(Types.INTEGER, ArrayUtils.toObject(target));\r\n    }", "\tpublic String mimePackThePayload(Payload anPayload) {\n\t\tStringBuffer buff = new StringBuffer();\n\t\t\n\t\ttry {\n\t\t\tbuff.append(\"Content-Type: application/xml\\n\\n\");\n\t\t\tfinal MidpXmlSerializer ser = new MidpXmlSerializer();\n\t\t\tbuff.append(ser.serialize(anPayload));\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\t//display.addMessage(ex.toString());\n\t\t}\n\t\treturn buff.toString();\n\t}\n", "private JavaFileObject withSemicolonAfterCursor ( JavaFileObject file , Path path , long cursor ) { try ( Reader reader = file . openReader ( BOOL_ ) ) { StringBuilder acc = new StringBuilder ( ) ; for ( int i = NUM_ ; i < cursor ; i ++ ) { int next = rea", "  public void closeUI() {\n    Object session=user.get();\n    if (session==null) {\n      throw new IllegalStateException(\"nothing to close\");\n    } else {\n      System.out.println(\"Popped \"+((Stack)userUIStackTable.get(session)).pop()+\" off UI stack\");\n      ((Stack)userUIModeStackTable.get(session)).pop();\n    }\n  }\n", "@Override\npublic void close() throws IOException {\n\ttry {\n\t\t// prepare metadata\n\t\tprepareMetaData();\n\t\t\n\t\t// write\n\t\tif (this.oStream!=null) {\n\t\t\tif (this.howc.getPassword()==null) { // no encryption\n\t\t\t\tfinalizeWriteNotEncrypted();\n\t\t\t} else \t// encryption\n\t\t\t\tif (this.currentWorkbook instanceof HSSFWorkbook) { // old Excel format\n\t\t\t\t\tfinalizeWriteEncryptedHSSF();\n\t\t\t\t} else if (this.currentWorkbook instanceof XSSFWorkbook) {\n\t\t\t\t\tfinalizeWriteEncryptedXSSF();\n\t\t\t\t\t}\n\t\t\t\t else {\n\t\t\t\t\tLOG.error(\"Could not write encrypted workbook, because type of workbook is unknown\");\n\t\t\t\t}\n\n\t\t\t}\n\t\t} finally {\n\n\t\t\t// close filesystems\n\t\t\tif (this.ooxmlDocumentFileSystem!=null)  {\n\t\t\t\t ooxmlDocumentFileSystem.close();\n\t\t\t}\n\n\t\t// close main workbook\n\t\tif (this.currentWorkbook!=null) {\n\t\t\tthis.currentWorkbook.close();\n\t\t}\n\t\t\n\t\t// close linked workbooks\n\t\t \tfor (Workbook currentWorkbookItem: this.listOfWorkbooks) {\n\t\t\t\tif (currentWorkbookItem!=null) {\n\t\t\t\t\tcurrentWorkbookItem.close();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\ttry {\n\t// do we need to sign => sign\n\tif (this.signUtil!=null) {\n\t\t// sign\n\t\tLOG.info(\"Signing document \\\"\"+this.howc.getFileName()+\"\\\"\");\n\t\tif (this.howc.getSigCertificate()==null) {\n\t\t\tLOG.error(\"Cannot sign document \\\"\"+this.howc.getFileName()+\"\\\". No certificate for key provided\");\n\t\t} else if (!(this.currentWorkbook instanceof XSSFWorkbook)){\n\t\t\tLOG.warn(\"Signing of docuemnts in old Excel format not supported for \\\"\"+this.howc.getFileName()+\"\\\"\");\n\t\t}else {\n\t\ttry {\n\t\t\t\tArrayList<X509Certificate> certList = new ArrayList<>();\n\t\t\t\tcertList.add(this.howc.getSigCertificate());\n\t\t\t\tthis.signUtil.sign(this.howc.getSigKey(), certList, this.howc.getPassword(), MSExcelWriter.getHashAlgorithm(this.howc.getSigHash()));\n\t\t} catch (XMLSignatureException|MarshalException|IOException|FormatNotUnderstoodException e) {\n\t\t\tLOG.error(\"Cannot sign document \\\"\"+this.howc.getFileName()+\"\\\" \"+e);\n\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t} finally {\n\t\tif (this.signUtil!=null) {\n\t\t\tthis.signUtil.close();\n\t\t}\n\t}\n}", "public ComputeNodeEnableSchedulingOptions withOcpDate(DateTime ocpDate) {\n        if (ocpDate == null) {\n            this.ocpDate = null;\n        } else {\n            this.ocpDate = new DateTimeRfc1123(ocpDate);\n        }\n        return this;\n    }", "  public Vector nearestLink(Vector edges, int portNumber, Vector contents) {\n    Vector _nearest = new Vector();\n    Enumeration e = edges.elements();\n    int max = 100000;\n    int nearest = 0;\n    int high = 0;\n    while (e.hasMoreElements()) {\n      FigSeqLink  fsl = (FigSeqLink) e.nextElement();\n      int pos = fsl.getPortNumber(contents);\n      if (pos < max && pos > portNumber) {\n        max = pos;\n        nearest = max;\n      }\n      if (pos > high) high = pos;\n    }\n    _nearest.addElement(new Integer(nearest));\n    _nearest.addElement(new Integer(high));\n    return _nearest;\n  }\n", "public JobChainingJobListener ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( STR_ ) ; } this . name = name ; chainLinks = new HashMap < JobKey , JobKey > ( ) ; }", "public BetweenSpacePredicate ( Comparable < ? > low , Comparable < ? > high , Comparator < ? > comparator , boolean lowInclusive , boolean highInclusive ) { this . _lowPredicate = lowInclusive ? new GreaterEqualsSpacePredicate ( low , comparator ) : new G", "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public final Completable unsubscribeOn(final Scheduler scheduler) {\n        ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\n        return RxJavaPlugins.onAssembly(new CompletableDisposeOn(this, scheduler));\n    }", "    public ClassMetaData getRefOrValueClassMetaData() {\n        if (category == MDStatics.CATEGORY_EXTERNALIZED) return null;\n        if (typeMetaData != null) return typeMetaData;\n        return elementTypeMetaData;\n    }\n", "\tpublic void addSubclass(IDEClass classToAdd) {\n\t\tsubclasses.put(classToAdd.getTitle(), classToAdd);\n\t\tclassToAdd.superclass = this;\n\t}\n", "public static MethExecutorResult executeInstance(String receiver,String selector){\n  try {\n    Class receiverClass=Class.forName(receiver);\n    Object target=receiverClass.newInstance();\n    Object res=null;\n    try {\n      Method theMethod=getMethod(receiverClass,selector,new Class[0]);\n      res=theMethod.invoke(target,new Object[0]);\n      return new MethExecutorResult(res);\n    }\n catch (    InvocationTargetException invTargEx) {\n      Throwable targEx=invTargEx.getTargetException();\n      if (targEx == null) {\n        return new MethExecutorResult(res);\n      }\n else {\n        return new MethExecutorResult(targEx);\n      }\n    }\n  }\n catch (  VirtualMachineError e) {\n    SystemFailure.initiateFailure(e);\n    throw e;\n  }\ncatch (  Throwable t) {\n    return new MethExecutorResult(t);\n  }\n}\n", "@RpcMethod public void copyImage(String imageId,String source,String destination,AsyncMethodCallback<Host.AsyncClient.copy_image_call> handler) throws RpcException {\n  ensureClient();\n  CopyImageRequest copyImageRequest=new CopyImageRequest();\n  copyImageRequest.setSource(Util.constructImage(source,imageId));\n  copyImageRequest.setDestination(Util.constructImage(destination,imageId));\n  logger.info(\"copy_image target {}, request {}\",getHostIp(),copyImageRequest);\n  try {\n    clientProxy.copy_image(copyImageRequest,handler);\n  }\n catch (  TException e) {\n    throw new RpcException(e.getMessage());\n  }\n}\n", "public CView createView ( final String name , final String description ) { Preconditions . checkNotNull ( name , STR_ ) ; Preconditions . checkNotNull ( description , STR_ ) ; final Date date = new Date ( ) ; final CModuleViewGenerator generator = new CModuleViewGenerator ( m_provider , m_module ) ; final CView view = generator . generate ( - NUM_ , name , description , ViewType . NonNative , GraphType . MIXED_GRAPH , date , date , NUM_ , NUM_ , new HashSet < CTag > ( ) , new HashSet < CTag > ( ) , BOOL_ ) ; try { view . load ( ) ; } catch ( CouldntLoadDataException | CPartialLoadException | LoadCancelledException e ) { CUtilityFunctions . logException ( e ) ; } addView ( view ) ; return view ; }", "    protected int ymult(double y) {\n        return (int) Math.round(yscale * y);\n    }\n", "public File huntForTheScriptFile ( String input ) { return GroovyMain . searchForGroovyScriptFile ( input ) ; }", "public boolean equals ( Object obj ) { if ( ! ( obj instanceof UseCandidateAttribute ) ) return BOOL_ ; if ( obj == this ) return BOOL_ ; UseCandidateAttribute useCandidateAtt = ( UseCandidateAttribute ) obj ; if ( useCandidateAtt . getAttributeType ( ) !", "public boolean isConversionSupported(AudioFormat targetFormat,AudioFormat sourceFormat){\n  targetFormat=replaceNotSpecified(sourceFormat,targetFormat);\n  boolean res=AudioFormats.matches(sourceFormat,targetFormat) || (doMatch(targetFormat.getFrameRate(),sourceFormat.getFrameRate()) && doMatch(targetFormat.getSampleRate(),sourceFormat.getSampleRate()) && getConversionType(getFormatType(sourceFormat),sourceFormat.getChannels(),getFormatType(targetFormat),targetFormat.getChannels()) != CONVERT_NOT_POSSIBLE);\n  if (TDebug.TraceAudioConverter) {\n    TDebug.out(\">PCM2PCM: isConversionSupported(AudioFormat, AudioFormat):\");\n    TDebug.out(\"checking if conversion possible\");\n    TDebug.out(\"from: \" + sourceFormat);\n    TDebug.out(\"to  : \" + targetFormat);\n    TDebug.out(\"< result : \" + res);\n  }\n  return res;\n}\n", "public WorkflowImpl getSharedTemplate(String name){\n\t\tfor (int i = 0; i < globalTemplateList.size(); i++) {\n\t\t\tif(globalTemplateList.get(i).getName().equals(name)){\n\t\t\t\treturn globalTemplateList.get(i);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "protected void setInheritContainerData(Map<String, CmsContainerElementData> elementsData) {\r\n\r\n        m_elementData = elementsData.get(getGroupContainerWidget().getId());\r\n        if (m_elementData != null) {\r\n            m_inputDescription.setFormValueAsString(m_elementData.getDescription());\r\n            m_inputTitle.setFormValueAsString(m_elementData.getTitle());\r\n            removeAllChildren();\r\n            CmsContainerpageUtil util = getController().getContainerpageUtil();\r\n            for (CmsInheritanceInfo info : m_elementData.getInheritanceInfos()) {\r\n                if (info.isVisible()) {\r\n                    CmsContainerElementData element = getController().getCachedElement(info.getClientId());\r\n                    try {\r\n                        CmsContainerPageElementPanel elementWidget = util.createElement(\r\n                            element,\r\n                            getGroupContainerWidget(),\r\n                            false);\r\n                        elementWidget.setInheritanceInfo(info);\r\n                        setOptionBar(elementWidget);\r\n                        getGroupContainerWidget().add(elementWidget);\r\n                    } catch (Exception e) {\r\n                        CmsDebugLog.getInstance().printLine(e.getMessage());\r\n                    }\r\n                }\r\n            }\r\n            boolean hasInvisible = false;\r\n            for (CmsInheritanceInfo info : m_elementData.getInheritanceInfos()) {\r\n                if (!info.isVisible()) {\r\n                    CmsContainerElementData element = getController().getCachedElement(info.getClientId());\r\n                    try {\r\n                        CmsContainerPageElementPanel elementWidget = util.createElement(\r\n                            element,\r\n                            getGroupContainerWidget(),\r\n                            false);\r\n                        elementWidget.setInheritanceInfo(info);\r\n                        elementWidget.addStyleName(HIDDEN_ELEMENT_CLASS);\r\n                        setOptionBar(elementWidget);\r\n                        getGroupContainerWidget().add(elementWidget);\r\n                        Element elementOverlay = DOM.createDiv();\r\n                        elementOverlay.setClassName(HIDDEN_ELEMENT_OVERLAY_CLASS);\r\n                        elementWidget.getElement().appendChild(elementOverlay);\r\n                        hasInvisible = true;\r\n                    } catch (Exception e) {\r\n                        CmsDebugLog.getInstance().printLine(e.getMessage());\r\n                    }\r\n                }\r\n            }\r\n            if (hasInvisible) {\r\n                m_showElementsButton.enable();\r\n            }\r\n        }\r\n\r\n        getGroupContainerWidget().refreshHighlighting();\r\n        setSaveEnabled(true, null);\r\n    }", "  public void setCharFields(List<CharField> charFields) {\n    this.charFields = new ArrayList<CharField>(charFields);\n    this.charFields.add(0, CharFieldMatcherEditor.ANY_FIELD);\n    this.setEditedCharField(this.charFields.get(0));\n    this.updateGUI();\n  }\n", "\tpublic boolean validateEsxFile_validMemFreeInBytes(EsxFile esxFile, DiagnosticChain diagnostics, Map<Object, Object> context) {\n\t\treturn esxFile.validMemFreeInBytes(diagnostics, context);\n\t}\n", "public void putLongField(HttpHeader name, long value) {\n        String v = Long.toString(value);\n        put(name, v);\n    }", "public static void saveRelationsFile( FileDefinition relationsFile, boolean writeComments, String lineSeparator )\n\tthrows IOException {\n\n\t\tif( relationsFile.getEditedFile() == null )\n\t\t\tthrow new IOException( \"Save operation could not be performed. The model was not loaded from a local file.\" );\n\n\t\tsaveRelationsFileInto( relationsFile.getEditedFile(), relationsFile, writeComments, lineSeparator );\n\t}", "\tpublic String getMessage() {\n\t\treturn \"The value '\" + value + \"' was expected to be of type \"\n\t\t\t+ expectedValueType.toString().toLowerCase() + \".\";\n\t}\n", "\tpublic String getNewLanguageName() throws Exception {\n\t\tloadData(baseLanguage, localeName);\n\t\tshowWindow(baseLanguage, localeName);\n\n\t\tif (hitCancel)\n\t\t\tthrow new Exception(\"Hit Cancel\");\n\n\t\treturn baseLanguage + (localeName.length() > 0 ? \"_(\" + localeName + \")\" : \"\"); \n\t}\n", "public void detach ( ) throws DebugException { try { m_debugger . detach ( ) ; } catch ( final DebugExceptionWrapper e ) { throw new DebugException ( e ) ; } }", "private String createNewReview(TaskData taskData,AppraisePluginReviewClient client) throws CoreException {\n  boolean canRequestReview=client.canRequestReview(taskData);\n  if (!canRequestReview) {\n    throw new CoreException(Status.CANCEL_STATUS);\n  }\n  String taskId=null;\n  try {\n    Review review=buildReviewFromTaskData(taskData);\n    review.setTimestamp(System.currentTimeMillis() / 1000);\n    String reviewCommitHash=getReviewCommitHash(taskData);\n    taskId=client.writeReview(reviewCommitHash,review);\n    if (taskId == null) {\n      throw new CoreException(Status.CANCEL_STATUS);\n    }\n  }\n catch (  GitClientException e) {\n    throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,\"Failed to write review\",e));\n  }\n  return taskId;\n}\n", "public void reload() {\r\n    \tIterator texs = texturesLinear.values().iterator();\r\n    \twhile (texs.hasNext()) {\r\n    \t\t((TextureImpl) texs.next()).reload();\r\n    \t}\r\n    \ttexs = texturesNearest.values().iterator();\r\n    \twhile (texs.hasNext()) {\r\n    \t\t((TextureImpl) texs.next()).reload();\r\n    \t}\r\n    }", "\tprivate void check() throws BuildException {\n\t\t// check existence of property file\n\t\tif (configFile == null) throw new BuildException(\"No config file set.\");\n\t\tif (!configFile.exists() || !configFile.isFile()) throw new BuildException(\"Invalid test-case property file specified : \\\"\" \n\t\t\t\t+ configFile.getAbsolutePath() + \"\\\"\");\n\t\t\n\t\tif (serviceName == null ) \n\t\t\tthrow new BuildException(\"No service name was set.\");\n\t}\n", "public < U > Promise < U > map ( Func1 < T , U > func ) { return new Promise < U > ( this . observable . map ( func ) ) ; }", "@Override\n    public Object getValue(int index) {\n        synchronized (lock) {\n            return getMValue(internalArray, index).asNative(internalArray);\n        }\n    }", "public CProcessListener ( final JLabel label ) { m_label = label ; }", "static public void main(String[] args) {\n        String environment = args[0];\n        String clientKeyStorePrefix = args[1] + \"-\" + environment;\n        String caKeyStorePrefix = args[2] + File.separator + environment + \"-CA\";\n        String subject = args[3];\n\n        try (\n                FileReader pwReader = new FileReader(caKeyStorePrefix + \".pw\");\n                FileInputStream caInput = new FileInputStream(caKeyStorePrefix + \".p12\");\n                FileWriter pwWriter = new FileWriter(clientKeyStorePrefix + \".pw\");\n                FileOutputStream clientOutput = new FileOutputStream(clientKeyStorePrefix + \".p12\")\n                ) {\n            logger.info(\"Loading the private certificate authority keys...\");\n            int size = new Tag(16).toString().length();\n            char[] caPassword = new char[size];\n            pwReader.read(caPassword);\n            MessageCryptex cryptex = new RsaAesMessageCryptex();\n            RsaCertificateManager manager = new RsaCertificateManager();\n            KeyStore caKeyStore = manager.retrieveKeyStore(caInput, caPassword);\n            PrivateKey caPrivateKey = manager.retrievePrivateKey(caKeyStore, CA_ALIAS, caPassword);\n            X509Certificate caCertificate = manager.retrieveCertificate(caKeyStore, CA_ALIAS);\n\n            logger.info(\"Generating a new key pair for the client certificate...\");\n            KeyPair clientKeyPair = cryptex.generateKeyPair();\n            PublicKey clientPublicKey = clientKeyPair.getPublic();\n            PrivateKey clientPrivateKey = clientKeyPair.getPrivate();\n\n            logger.info(\"Generating and signing a new client certificate...\");\n            long lifetime = 30L /*years*/ * 365L /*days*/ * 24L /*hours*/ * 60L /*minutes*/\n                    * 60L /*seconds*/ * 1000L /*milliseconds*/;\n            BigInteger serialNumber = new BigInteger(RandomUtils.generateRandomBytes(16));\n            X509Certificate clientCertificate = manager.createCertificate(caPrivateKey,\n                    caCertificate, clientPublicKey, subject, serialNumber, lifetime);\n            clientCertificate.verify(caCertificate.getPublicKey());\n\n            logger.info(\"Storing the new client certificate and private key in a key store...\");\n            char[] clientPassword = new Tag(16).toString().toCharArray();\n            List<X509Certificate> certificates = new ArrayList<>();\n            certificates.add(clientCertificate);\n            certificates.add(caCertificate);\n            KeyStore clientKeyStore = manager.createPkcs12KeyStore(CLIENT_ALIAS, clientPassword,\n                    clientPrivateKey, certificates);\n\n            logger.info(\"Writing out the key store and password to files...\");\n            manager.saveKeyStore(clientOutput, clientKeyStore, clientPassword);\n            pwWriter.write(clientPassword);\n\n        } catch (CertificateException | NoSuchAlgorithmException | InvalidKeyException |\n                NoSuchProviderException | SignatureException | IOException e) {\n            logger.error(\"An error occurred while attempting to generate the client certificate:\", e);\n            System.exit(1);\n        }\n        System.exit(0);\n    }", "public void setComparator(int index, Comparator<T> comparator) {\n\t\tif (comparator instanceof InvertibleComparator) {\n\t\t\tthis.comparators.set(index, (InvertibleComparator<T>) comparator);\n\t\t}\n\t\telse {\n\t\t\tthis.comparators.set(index, new InvertibleComparato", "public void addTableHeader(final JTableHeader newTableHeader){\n  if (!_registredTableHeaders.contains(newTableHeader)) {\n    if (_tableHeader == null) {\n      _tableHeader=newTableHeader;\n    }\n    newTableHeader.addMouseListener(_mouseListener);\n    newTableHeader.setDefaultRenderer(new SortableHeaderRenderer(newTableHeader.getDefaultRenderer()));\n    _registredTableHeaders.add(newTableHeader);\n  }\n}\n", "public File resourceDwcaFile(@NotNull String resourceName,@NotNull BigDecimal version){\n  String fn=\"dwca-\" + version.toPlainString() + \".zip\";\n  return dataFile(RESOURCES_DIR + \"/\" + resourceName+ \"/\"+ fn);\n}\n", "public void addListener (FileChangedListener fileListener)\n  {\n    // Don't add if its already there\n    for (Iterator<WeakReference<FileChangedListener>> i = listeners_.iterator(); i.hasNext(); ) {\n      WeakReference<FileChangedListener> reference = i.next();\n      FileChangedListener listener = reference.get();\n      if (listener == fileListener)\n        return;\n    }\n\n    // Use WeakReference to avoid memory leak if this becomes the\n    // sole reference to the object.\n    listeners_.add(new WeakReference<FileChangedListener>(fileListener));\n  }", "    public void report(String path) throws Exception {\n        ProviderLoader provider = getProvider();\n        if (provider != null) {\n            StatisticsReport report = new StatisticsReport(\n                getHome(), _statistics, provider);\n            report.report(path);\n        } else {\n            throw new Exception(\"The test is not running\");\n        }\n    }\n", "private void validateDebugSettings(){\n  verifyDiffCheckBox.setSelected(controller.isDiffVerificationEnabled());\n  verifyEncodingCheckBox.setSelected(controller.isEncodingVerificationEnabled());\n  statsOutputCheckBox.setSelected(controller.isStatsOutputEna", "public VinciImageLoader resize ( int maxPix , int mode ) { mMaxSize = maxPix ; mKeyMode = mode ; return this ; }", "private boolean translateKeyDown(int keyCode,KeyEvent event){\n  mMetaState=MetaKeyKeyListener.handleKeyDown(mMetaState,keyCode,event);\n  int c=event.getUnicodeChar(MetaKeyKeyListener.getMetaState(mMetaState));\n  mMetaState=MetaKeyKeyListener.adjustMetaAfterKeypress(mMetaState);\n  InputConnection ic=getCurrentInputConnection();\n  if (c == 0 || ic == null) {\n    return false;\n  }\n  boolean dead=false;\n  if ((c & KeyCharacterMap.COMBINING_ACCENT) != 0) {\n    dead=true;\n    c=c & KeyCharacterMap.COMBINING_ACCENT_MASK;\n  }\n  if (mComposing.length() > 0) {\n    char accent=mComposing.charAt(mComposing.length() - 1);\n    int composed=KeyEvent.getDeadChar(accent,c);\n    if (composed != 0) {\n      c=composed;\n      mComposing.setLength(mComposing.length() - 1);\n    }\n  }\n  onKey(c,null);\n  return true;\n}\n", "@SuppressWarnings(\"resource\") private static String parseGwtRpcMethodName(InputStream stream,String charEncoding){\n  try {\n    final Scanner scanner;\n    if (charEncoding == null) {\n      scanner=new Scanner(stream);\n    }\n else {\n      scanner=new Scanner(stream,charEncoding);\n    }\n    scanner.useDelimiter(GWT_RPC_SEPARATOR_CHAR_PATTERN);\n    scanner.next();\n    scanner.next();\n    scanner.next();\n    scanner.next();\n    scanner.next();\n    scanner.next();\n    return \".\" + scanner.next();\n  }\n catch (  final NoSuchElementException e) {\n    LOG.debug(\"Unable to parse GWT-RPC request\",e);\n    return null;\n  }\n}\n", "public UserInner createOrUpdate(String deviceName, String name, String resourceGroupName, UserInner user) {\n        return createOrUpdateWithServiceResponseAsync(deviceName, name, resourceGroupName, user).toBlocking().last().body();\n    }", "protected final LifetimeType createLifetimeElement(long tokenLifetime){\n  assert tokenLifetime > 0 : tokenLifetime;\n  ObjectFactory wstFactory=new ObjectFactory();\n  LifetimeType lifetime=wstFactory.createLifetimeType();\n  org.oasis_open.docs.wss._2004._01.oasis_200401_wss_wssecurity_utility_1_0.ObjectFactory wssuObjFactory=new org.oasis_open.docs.wss._2004._01.oasis_200401_wss_wssecurity_utility_1_0.ObjectFactory();\n  AttributedDateTime created=wssuObjFactory.createAttributedDateTime();\n  DateFormat wssDateFormat=createDateFormatter();\n  final long now=System.currentTimeMillis();\n  String startDate=wssDateFormat.format(new Date(now));\n  created.setValue(startDate);\n  AttributedDateTime expires=wssuObjFactory.createAttributedDateTime();\n  String endDate=wssDateFormat.format(new Date(now + TimeUnit.SECONDS.toMillis(tokenLifetime)));\n  expires.setValue(endDate);\n  lifetime.setCreated(created);\n  lifetime.setExpires(expires);\n  if (log.isDebugEnabled()) {\n    log.debug(\"Lifitime created with following values -- Create date: \" + startDate + \" Expire date: \"+ endDate);\n  }\n  return lifetime;\n}\n", "public Network getNetworkInfo(int networkId) throws MovieDbException {\n        TmdbParameters parameters = new TmdbParameters();\n        parameters.add(Param.ID, networkId);\n\n        URL url = new ApiUrl(apiKey, MethodBase.NETWORK).buildUrl(parameters);\n        String webpage = httpTools.getRequest(url);\n\n        try {\n            return MAPPER.readValue(webpage, Network.class);\n        } catch (IOException ex) {\n            throw new MovieDbException(ApiExceptionType.MAPPING_FAILED, \"Failed to get network information\", url, ex);\n        }\n    }", "   public Mask and(Mask mask) {\n      if (mask == null || mask.getSize() != this.values.length) throw new RuntimeException(this.sizeMismatch);\n      for (int i = 0; i < this.values.length; ++i) this.values[i] &= mask.values[i];\n      return this;\n   }\n", "public SeaGlassBorder ( SeaglassUI ui , Insets insets ) { this . ui = ui ; this . insets = insets ; }", "private int scanData(String data,StringBuffer schemeData,int endOffset,int currentOffset){\n  while (true) {\n    if (currentOffset == endOffset) {\n      break;\n    }\n    int ch=data.charAt(currentOffset);\n    byte chartype=(ch >= 0x80) ? CHARTYPE_NONASCII : fASCIICharMap[ch];\n    if (chartype == CHARTYPE_OPEN_PAREN) {\n      schemeData.append(ch);\n      currentOffset=scanData(data,schemeData,endOffset,++currentOffset);\n      if (currentOffset == endOffset) {\n        return currentOffset;\n      }\n      ch=data.charAt(currentOffset);\n      chartype=(ch >= 0x80) ? CHARTYPE_NONASCII : fASCIICharMap[ch];\n      if (chartype != CHARTYPE_CLOSE_PAREN) {\n        return endOffset;\n      }\n      schemeData.append((char)ch);\n      ++currentOffset;\n    }\n else     if (chartype == CHARTYPE_CLOSE_PAREN) {\n      return currentOffset;\n    }\n else     if (chartype == CHARTYPE_CARRET) {\n      ch=data.charAt(++currentOffset);\n      chartype=(ch >= 0x80) ? CHARTYPE_NONASCII : fASCIICharMap[ch];\n      if (chartype != CHARTYPE_CARRET && chartype != CHARTYPE_OPEN_PAREN && chartype != CHARTYPE_CLOSE_PAREN) {\n        break;\n      }\n      schemeData.append((char)ch);\n      ++currentOffset;\n    }\n else {\n      schemeData.append((char)ch);\n      ++currentOffset;\n    }\n  }\n  return currentOffset;\n}\n", "public String extract_package(String fullname){\n  return fullname.replaceFirst(\"[.][^.]*$\",\"\");\n}", "public final void tryClaimDraw(String str){\n  if (str.startsWith(\"draw \")) {\n    String drawCmd=str.substring(str.indexOf(\" \") + 1);\n    handleDrawCmd(drawCmd,false);\n  }\n}\n", "@SuppressWarnings(\"deprecation\")\n    void findItemsWithShortcutForKey(List<MenuItem> items, int keyCode, KeyEvent event) {\n        final boolean qwerty = isQwertyMode();\n        final int metaState = event.getMetaState();\n        final KeyCharacterMap.KeyData possibleChars = new KeyCharacterMap.KeyData();\n        // Get the chars associated with the keyCode (i.e using any chording combo)\n        final boolean isKeyCodeMapped = event.getKeyData(possibleChars);\n        // The delete key is not mapped to '\\b' so we treat it specially\n        if (!isKeyCodeMapped && (keyCode != KeyEvent.KEYCODE_DEL)) {\n            return;\n        }\n\n        // Look for an item whose shortcut is this key.\n        final int N = mItems.size();\n        for (int i = 0; i < N; i++) {\n            MenuItem item = mItems.get(i);\n            if (item.hasSubMenu()) {\n                ((Menu) item.getSubMenu()).findItemsWithShortcutForKey(items, keyCode, event);\n            }\n            final char shortcutChar = qwerty ? item.getAlphabeticShortcut() : item.getNumericShortcut();\n            if (((metaState & (KeyEvent.META_SHIFT_ON | KeyEvent.META_SYM_ON)) == 0) &&\n                    (shortcutChar != 0) &&\n                    (shortcutChar == possibleChars.meta[0]\n                            || shortcutChar == possibleChars.meta[2]\n                            || (qwerty && shortcutChar == '\\b' &&\n                            keyCode == KeyEvent.KEYCODE_DEL)) &&\n                    item.isEnabled()) {\n                items.add(item);\n            }\n        }\n    }", "\tpublic boolean isFillable(){\n\t\treturn fillable;\n\t}\n", "public State duplicate ( ) { return new State ( this , basicBlock , instructionIterator , patternElement , matchCount , currentMatch , bindingSet , canFork ) ; }", "static String formatTime() {\n        Date date = new Date();\n        DateFormat formatter = BaseTraceFormatter.useIsoDateFormat ? new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\") : DateFormatProvider.getDateFormat();\n        StringBuffer answer = new StringBuffer();\n        answer.append('[');\n        formatter.format(date, answer, new FieldPosition(0));\n        answer.append(']');\n        return answer.toString();\n    }", "public Observable<ServiceResponse<GenericResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, GenericReso", "public static void verifyGolden(TestCase test,Object object) throws Exception {\n  verifyGolden(test,object,defineComparator(test,object));\n}\n", "public synchronized void update(){\n  if (frames.size() > 1) {\n    animTime+=1;\n    if (animTime >= totalDuration) {\n      animTime=animTime % totalDuration;\n      currFrameIndex=0;\n    }\n    while (animTime > getFrame(currFrameIndex).endTime) {\n      currFrameIndex++;\n    }\n  }\n}\n", "public void release() throws InterruptedException {\n  final IBufferAccess tmp=m_data.get();\n  if (tmp == null) {\n    return;\n  }\n  if (m_data.compareAndSet(tmp,null)) {\n    tmp.release();\n  }\n}\n", "@Override\n    public ModifyReplicationSubnetGroupResult modifyReplicationSubnetGroup(ModifyReplicationSubnetGroupRequest request) {\n        request = beforeClientExecution(request);\n        return executeModifyReplicationSubnetGroup(request);\n    }", "public void generateRestServicesMap(){\n  try {\n    File metaInfFile=getMetaInfFile();\n    File serviceMapFile=new File(metaInfFile,\"crux-rest\");\n    if (serviceMapFile.exists() && !isOverride()) {\n      logger.info(\"REST Service map already exists. Skipping generation...\");\n      return;\n    }\n    initializeScannerURLs();\n    Set<String> restServices=ClassScanner.searchClassesByAnnotation(RestService.class);\n    Properties cruxRest=new Properties();\n    if (restServices != null) {\n      for (      String service : restServices) {\n        try {\n          Class<?> serviceClass=Class.forName(service);\n          RestService annot=serviceClass.getAnnotation(RestService.class);\n          if (cruxRest.containsKey(annot.value())) {\n            throw new ServiceMapperException(\"Duplicated rest service [{\" + annot.value() + \"}]. Overiding previous registration...\");\n          }\n          cruxRest.put(annot.value(),service);\n        }\n catch (        ClassNotFoundException e) {\n          throw new ServiceMapperException(\"Error initializing rest service class.\",e);\n        }\n      }\n    }\n    cruxRest.store(new FileOutputStream(serviceMapFile),\"Crux RestServices implementations\");\n  }\n catch (  IOException e) {\n    throw new ServiceMapperException(\"Error creating rest service map\",e);\n  }\n}\n", "public void foundRedundantNullCheck ( Location location , RedundantBranch redundantBranch ) ;", "public java.lang.Object lookup(Name name) throws NamingException {\n  if (_nc == null)   throw new ConfigurationException(\"Context does not have a corresponding NamingContext\");\n  if (name.size() == 0)   return this;\n  NameComponent[] path=CNNameParser.nameToCosName(name);\n  try {\n    java.lang.Object answer=callResolve(path);\n    try {\n      return NamingManager.getObjectInstance(answer,name,this,_env);\n    }\n catch (    NamingException e) {\n      throw e;\n    }\ncatch (    Exception e) {\n      NamingException ne=new NamingException(\"problem generating object using object factory\");\n      ne.setRootCause(e);\n      throw ne;\n    }\n  }\n catch (  CannotProceedException cpe) {\n    javax.naming.Context cctx=getContinuationContext(cpe);\n    return cctx.lookup(cpe.getRemainingName());\n  }\n}\n", "protected RrdNioBackend(String path,boolean readOnly,int syncPeriod) throws IOException {\n  super(path,readOnly);\n  try {\n    mapFile();\n    if (!readOnly) {\n      fileSyncTimer.schedule(syncTask,syncPeriod * 1000L,syncPeriod * 1000L);\n    }\n  }\n catch (  final IOException ioe) {\n    super.close();\n    throw ioe;\n  }\n}\n", "\tprotected String getEntry(final Entry ent) {\n\t\tif (this.valid) {\n\t\t\tString entry = \"\";\n\t\t\tPriority maxPriority = Priority.NONE;\n\t\t\tfor (final Module module : modules)\n\t\t\t\t// only check if entry of module is NOT empty\n\t\t\t\tif (!module.getEntry(ent).isEmpty())\n\t\t\t\t\t// load the first value you can find or override if priority is\n\t\t\t\t\t// higher\n\t\t\t\t\tif (entry == \"\" || module.getPriority().value > maxPriority.value) {\n\t\t\t\t\t\tentry = module.getEntry(ent);\n\t\t\t\t\t\tmaxPriority = module.getPriority();\n\t\t\t\t\t}\n\t\t\treturn entry;\n\t\t} else\n\t\t\treturn null;\n\t}\n", "\tpublic OtherClasspathSet createOtherclasspath() {\n\t\tOtherClasspathSet otherClasspathSet = new OtherClasspathSet();\n\t\totherClasspathSets.add(otherClasspathSet);\n\t\treturn otherClasspathSet;\n\t}\n", "private DynamicRegistrationEndpoint ( ) { }", "@Override public void mouseClicked(MouseEvent me){\n  int x, y;\n  Rectangle r=new Rectangle(0,0,(int)(m_nPaddedNodeWidth * m_fScale),(int)(m_nNodeHeight * m_fScale));\n  x=me.getX();\n  y=me.getY();\n  for (int iNode=0; iNode < m_BayesNet.getNrOfNodes(); iNode++) {\n    r.x=(int)(m_BayesNet.getPositionX(iNode) * m_fScale);\n    r.y=(int)(m_BayesNet.getPositionY(iNode) * m_fScale);\n    if (r.contains(x,y)) {\n      m_nCurrentNode=iNode;\n      if (me.getButton() == MouseEvent.BUTTON3) {\n        handleRightNodeClick(me);\n      }\n      if (me.getButton() == MouseEvent.BUTTON1) {\n        if ((me.getModifiersEx() & MouseEvent.CTRL_DOWN_MASK) != 0) {\n          m_Selection.toggleSelection(m_nCurrentNode);\n        }\n else         if ((me.getModifiersEx() & MouseEvent.SHIFT_DOWN_MASK) != 0) {\n          m_Selection.addToSelection(m_nCurrentNode);\n        }\n else {\n          m_Selection.clear();\n          m_Selection.addToSelection(m_nCurrentNode);\n        }\n        repaint();\n      }\n      return;\n    }\n  }\n  if (me.getButton() == MouseEvent.BUTTON3) {\n    handleRightClick(me,(int)(x / m_fScale),(int)(y / m_fScale));\n  }\n}\n", "  public List traverse( Vertex startat ) {\n    return this.traverse( startat, new NullVisitor());\n  }\n", "public static JPopupMenu leftShift ( JPopupMenu self , Component component ) { self . add ( component ) ; return self ; }", "    static public int createSessions(Properties properties, boolean autoCommit, String dbName) {\n        if (dbName == null) {\n            throw new IllegalArgumentException(\"dbName cannot be null\");\n        }\n        if (properties == null) {\n            throw new IllegalArgumentException(\"properties cannot be null\");\n        }\n        return createSessions(\n            properties.getProperty(\"URL\", \"\").trim(),\n            properties.getProperty(\"DRIVER\", \"\").trim(),\n            properties.getProperty(\"USER\", \"\").trim(),\n            properties.getProperty(\"PASSWORD\", \"\").trim(),\n            autoCommit,\n            Integer.parseInt(properties.getProperty(\"FETCHSIZE\", \"-1\")),\n            Integer.parseInt(properties.getProperty(\"INITIAL_SESSION_COUNT\", \"1\")),\n            dbName,\n            properties.getProperty(\"DB_API_CLASS\"));\n    }\n", "\tpublic boolean storesUpperCaseQuotedIdentifiers() throws SQLException {\n\t\treturn false;\n\t}\n", "    public void addChange(final Date date, final int delta) {\n        addTimePoint(HelperTimePoint.createDeltaTimePoint(date, delta));\n    }\n", "private Artifact<?> emitLandingPageCacheManifest(LinkerContext context, TreeLogger logger,\n      ArtifactSet artifacts, String[] staticFiles) throws UnableToCompleteException {\n    // Create a string of cacheable resources\n    StringBuilder publicSourcesS", "public abstract void beforeFirst ( ConstantRange searchRange ) ;", "public EventStoreBuilder tcpCloseTimeout ( Duration duration ) { tcpSettingsBuilder . closeTimeout ( duration ) ; return this ; }", "protected String toValString(Enumeration en){\n  StringBuilder sb=new StringBuilder();\n  boolean first=true;\n  while (en.hasMoreElements()) {\n    String val=(String)en.nextElement();\n    val=encodeVal(val);\n    if (first) {\n      first=false;\n    }\n else {\n      sb.append(',');\n    }\n    sb.append(val);\n  }\n  return sb.toString();\n}\n", "public Stream<T> skip(final int count) {\n        return new Stream<T>() {\n            @Override\n            public Iterator<T> iterator() {\n                Iterator<T> iterator = Stream.this.iterator();\n                for (int skip = count; skip > 0 && iterator.hasNext(); skip--)\n                    iterator.next();\n                return iterator;\n            }\n        };\n    }", "public static String cutSuffix(String time) {\n\n        String ret = time.toLowerCase();\n        if (ret.toLowerCase().contains(CmsDateConverter.AM) || ret.toLowerCase().contains(CmsDateConverter.PM)) {\n            if (ret.length() > 5) {\n                r", "public void decodeAttributeBody(byte[] attributeValue,char offset,char length){\n  hmacSha1Content=new byte[length];\n  System.arraycopy(attributeValue,offset,hmacSha1Content,0,length);\n}\n", "public boolean isAnnotationPresent(Class javaClass,String property,Class<? extends Annotation> annotationClass){\n  Field field;\n  try {\n    field=javaClass.getDeclaredField(property);\n    return field.isAnnotationPresent(annotationClass);\n  }\n catch (  NoSuchFieldException e) {\n    Class superclass=javaClass.getSuperclass();\n    while (superclass != null) {\n      try {\n        field=superclass.getDeclaredField(property);\n        return field.isAnnotationPresent(annotationClass);\n      }\n catch (      NoSuchFieldException e1) {\n        superclass=superclass.getSuperclass();\n      }\n    }\n    throw new RuntimeException(\"Property not found: \" + property);\n  }\n}\n", "\tpublic void makePersistent(GroupWorkspaceFile entity) {\n\t\thbCrudDAO.makePersistent(entity);\n\t}\n", "private void handleSentImage ( Intent intent ) { mImageUri = ( Uri ) intent . getParcelableExtra ( Intent . EXTRA_STREAM ) ; if ( mImageUri != null ) { if ( ContextCompat . checkSelfPermission ( this , Manifest . permission . READ_EXTERNAL_STORAGE ) != PackageManager . PERMISSION_GRANTED ) { ActivityCompat . requestPermissions ( this , new String [ ] { Manifest . permission . READ_EXTERNAL_STORAGE } , PERMISSION_REQUEST_READ_CONTACTS ) ; } else { startFileUpload ( ) ; } } else { Toast . makeText ( this , R . string . cannot_find_image , Toast . LENGTH_SHORT ) . show ( ) ; } }", "\tpublic void setEnabled(boolean b, TelnetClient client) {\n\t\tenabled = b;\n\t\tif (enabled) {\n\t\t\tSystem.out.println(\"   ENABLED \" + getName());\n\t\t} else {\n\t\t\tSystem.out.println(\"   DISABLED \" + getName());\n\t\t}\n\t}\n", "private void reset(){\n  savedQueryText.setText(Messages.getString(\"WorkItemPickerDialog.SavedQueryLabelText\"));\n  idsText.setText(\"\");\n  titleText.setText(\"\");\n  workItemTypeCombo.select(0);\n  fillResultsWithQuery(workItemClient.createEmptyQuery(),false);\n  selectedWorkItems=null;\n  selectedQueryDefinition=null;\n  setFindEnablement();\n  setOKEnablement();\n}\n", "@NonNull\n    private ListDialog.OnItemSelectedListener createItemSelectedListener() {\n        return new ListDialog.OnItemSelectedListener() {\n\n            @Override\n            public void onItemSelected(final int position) {\n                ColorPalettePreference.this.selectedIndex = position;\n                ColorPalettePreference.this.onClick(getDialog(), DialogInterface.BUTTON_POSITIVE);\n\n                if (getDialog() != null) {\n                    getDialog().dismiss();\n                }\n            }\n\n        };\n    }", "private void handleDoRegisterTrackingDown(final NaviNode node,final double y,final double x,final COperandTreeNode operand){\n  handleRegisterTracking(node,y,operand,AnalysisDirection.DOWN);\n}\n", "public static MutableTableRequirement mutableTable ( TableDefinition tableDefinition , String name , MutableTableRequirement . State state ) { return MutableTableRequirement . builder ( tableDefinition ) . withName ( name ) . withState ( state ) . build ( ) ; }", "\tpublic String parse(JFlexLexer lexer, String raw, Object... args) throws ParserException {\n\t\tString sectionName = this.retrieveSectionName(raw);\n\t\treturn this.parseSectionName(lexer.getParserInput(), sectionName);\n\t}\n", "public IIOMetadata convertStreamMetadata(IIOMetadata inData,ImageWriteParam param){\n  if (inData == null) {\n    throw new IllegalArgumentException(\"inData == null!\");\n  }\n  IIOMetadata sm=getDefaultStreamMetadata(param);\n  convertMetadata(STREAM_METADATA_NAME,inData,sm);\n  return sm;\n}\n", "void loadTypeIds ( ) throws IOException { int count = mHeaderItem . typeIdsSize ; mTypeIds = new TypeIdItem [ count ] ; seek ( mHeaderItem . typeIdsOff ) ; for ( int i = NUM_ ; i < count ; i ++ ) { mTypeIds [ i ] = new TypeIdItem ( ) ; mTypeIds [ i ] . descriptorIdx = readInt ( ) ; } }", "\t\tpublic String unixTimeParserDataToString() {\n\t\t\t\n\t\t\tString info = null;\n\t\t\t\t\n\t\t\t// Check for the output format\n\t\t\tif (duration) { // A duration\n\t\t\t\t\n\t\t\t\tSimpleDateFormat work = new SimpleDateFormat(\"EEE, d MMM yyyy HH:mm:ss Z\");\n\t\t\t\tDate d = new Date(reference);\n\t\t\t\t\n\t\t\t\tinfo = \"Epoch in \" + unitList[unit] + \" since \" + work.format(d);\n\t\t\t\t\n\t\t\t} else { // A date\n\t\t\t\t\n\t\t\t\tinfo = \"Date/time format with the pattern \" + sdf.toPattern()\n\t\t\t\t     + \" and the time zone \" + sdf.getTimeZone().getDisplayName();\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\treturn info;\n\t\t}\n", "    protected void activate(ComponentContext context) {\n        this.logger.debug(\"Activating Service Locator \");\n        \n        String[] trackedEventTypes = new String[]{PeerEventTypes.SERVICE_LIFECYCLE_EVENT, PeerEventTypes.PEER_INITIALISED};\n        \n        this.evtManager.registerListener(this, trackedEventTypes, null);\n        \n        this.synchMgr = new SynchroniserManager(this.evtManager, this.pssPgMgr, this.advertisementMgr);\n\n        //Check if the peer has started otherwise wait for the event\n//        if (null != this.pssManager && pssManager.isPeerStarted()) {\n//            this.registerInstalledThirdpartyServices();\n//        }\n\n    }\n", "public void columnSelectionChanged(ListSelectionEvent e){\n  if (e.getValueIsAdjusting()) {\n    return;\n  }\n  ListSelectionModel selectionModel=(ListSelectionModel)e.getSource();\n  DataSet dataSet=getDataSet();\n  dataSet.clearSelection();\n  if (!getRowSelectionAllowed()) {\n    for (int i=0; i < dataSet.getNumColumns(); i++) {\n      if (selectionModel.isSelectedIndex(i + 2)) {\n        dataSet.setSelected(dataSet.getVariable(i),true);\n      }\n    }\n  }\n}\n", "private void initConnection() throws AdeException {\n  if (!dbPropertiesInitialized) {\n    throw new AdeInternalException(\"DB configuration is undefined.\");\n  }\n  mLogger.debug(\"Loading driver \" + dbDriver);\n  try {\n    Class.forName(dbDriver);\n  }\n catch (  ClassNotFoundException e) {\n    throw new AdeInternalException(\"Loading driver failed.\",e);\n  }\n  mLogger.debug(\"Connecting to database \" + dbURL);\n  try {\n    if (dbUserName == null || dbUserPassword == null) {\n      dbConnection=DriverManager.getConnection(dbURL);\n    }\n else {\n      dbConnection=DriverManager.getConnection(dbURL,dbUserName,dbUserPassword);\n    }\n  }\n catch (  SQLException e) {\n    throw new AdeInternalException(\"Failed obtaining connection.\",e);\n  }\ncatch (  Throwable t) {\n    throw new AdeInternalException(\"Failed obtaining connection.\",t);\n  }\n}\n", "public Matrix3d rotateTowards(double dirX, double dirY, double dirZ, double upX, double upY, double upZ) {\n        return rotateTowards(dirX, dirY, dirZ, upX, upY, upZ, this);\n    }", "  public ZipEntry getEntry(String path) throws IOException {\n    String parentPath = getParentPath(path);\n    String name = getName(path);\n    Map<String, ZipEntry> entries = fileIndex.get(parentPath);\n    ZipEntry entry = null;\n\n    if (entries != null) {\n      entry = entries.get(name);\n    }\n\n    if (entry == null || entry.isDirectory()) {\n      throw new FileNotFoundException(path);\n    }\n\n    return entry;\n  }\n", "\tpublic void closeWrite() throws IOException{\n\t\t\n\t\tif (bufferedWriter != null)\n\t\t\tbufferedWriter.close();\n\t\t\n\t\tif (fileWriter != null)\n\t\t\tfileWriter.close();\n\t}\n", "private String convertLineSeparators(String string){\n  return string.replaceAll(System.lineSeparator(),\" \");\n}\n", "private <E> Object parse( String s, Class fclz ) {\n    if( fclz.equals(String.class) ) return s; // Strings already the right primitive type\n    if( fclz.isArray() ) {      // An array?\n      read(s,    0       ,'[',fclz);\n      read(s,s.length()-1,']',fclz);\n      String[] splits = s.substring(1,s.length()-1).split(\",\");\n      Class<E> afclz = (Class<E>)fclz.getComponentType();\n      E[] a= (E[])Array.newInstance(afclz,splits.length);\n      for( int i=0; i<splits.length; i++ )\n        a[i] = (E)parse(splits[i],afclz);\n      return a;\n    }\n    if( fclz.equals(Key.class) ) return Key.make(s);\n\n    throw new RuntimeException(\"Unimplemented schema fill from \"+fclz.getSimpleName());\n  }  \n  private int read( String s, int x, char c, Class fclz ) {\n    if( peek(s,x,c) ) return x+1;\n    throw new IllegalArgumentException(\"Expected '\"+c+\"' while reading a \"+fclz.getSimpleName()+\", but found \"+s);\n  }\n  private boolean peek( String s, int x, char c ) { return x < s.length() && s.charAt(x) == c; }\n}", "public void initPresentation(){\n  createHelpWindow();\n}\n", "  protected void writeConstants(String[] args) {\n    theFile.println( SECTION_SEPARATOR );\n    theFile.println( \"// CONSTANTS\" );\n  }\n", "public static String abbreviateName(String str,FontMetrics fm,int width){\n  if (fm.stringWidth(str) > width)   str=abbreviateName(str,false);\n  if (fm.stringWidth(str) > width)   str=abbreviateName(str,true);\n  return str;\n}", "public static String computeSimpsonReciprocal(ViewerBase viewer,ProgressListener progressListener) throws IOException, CanceledException {\n  if (viewer instanceof MainViewer)   return toString(computeSimpsonReciprocal((MainViewer)viewer,progressListener));\n else   if (viewer instanceof ClassificationViewer)   return toString(computeSimpsonReciprocal((ClassificationViewer)viewer,progressListener));\n else   return null;\n}\n", "private void updateCondition ( final BreakpointManager manager , final int breakpointIndex , final String formula ) { manager . setBreakpointCondition ( breakpointIndex , formula ) ; }", "public List<Integer> getWars(String datasource, String ifNoneMatch, Integer maxWarId) throws ApiException {\n        ApiResponse<List<Integer>> resp = getWarsWithHttpInfo(datasource, ifNoneMatch, maxWarId);\n        return resp.getData();\n    }", "\tpublic void saveAllAppletsContent() {\n\t\tappletRegister.saveAllAppletContents();\n\t}\n", "public static void writeUuid(BinaryRawWriter out,UUID uid){\n  if (uid != null) {\n    out.writeBoolean(true);\n    out.writeLong(uid.getMostSignificantBits());\n    out.writeLong(uid.getLeastSignificantBits());\n  }\n else   out.writeBoolean(false);\n}\n", "static void printHelpMessage(boolean printToStderr){\n  initOutput(printToStderr);\n  outBuf=outBuf.append(getLocalizedMessage(\"java.launcher.opt.footer\",File.pathSeparator));\n  ostream.println(outBuf.toString());\n}", "public boolean isSingular ( ) { return determinant ( ) == NUM_ ; }", "    protected void deepResort() {\n        Collections.sort(childrenPosts);\n\n        for (Post child : childrenPosts) {\n            child.deepResort();\n        }\n    }\n", "    public Element setText(final String text) {\n        content.clear();\n\n        if (text != null) {\n            addContent(new Text(text));\n        }\n\n        return this;\n    }\n", "\tpublic String getDocumentField(String externalId, String fieldname) throws IOException {\n\t\tDocument document = getLuceneDocument(externalId);\n\t\treturn document.get(fieldname);\n\t}\n", "public void stop(final GeometryFunction callback) throws GeometryMergeException {\n\t\tif (!busy) {\n\t\t\tthrow new GeometryMergeException(\"Can't stop the merging process since it is not activated.\");\n\t\t}\n\t\tif (callback == null) {\n\t\t\tcancel();\n\t\t\treturn;\n\t\t}\n\t\tmerge(new GeometryFunction() {\n\n\t\t\tpublic void execute(Geometry geometry) {\n\t\t\t\tcallback.execute(geometry);\n\t\t\t\ttry {\n\t\t\t\t\tclearGeometries();\n\t\t\t\t} catch (GeometryMergeException e) {\n\t\t\t\t}\n\t\t\t\tbusy = false;\n\t\t\t\teventBus.fireEvent(new GeometryMergeStopEvent(geometry));\n\t\t\t}\n\t\t});\n\t}", "    public void setImage(int palette[], int pixels[][]) {\n        int w = pixels.length;\n        int h = pixels[0].length;\n        int pix[] = new int[w * h];\n\n        // convert to RGB\n        for (int x = w; x-- > 0; ) {\n            for (int y = h; y-- > 0; ) {\n                pix[y * w + x] = palette[pixels[x][y]];\n            }\n        }\n            \n        setImage(w, h, pix);\n    }\n", "private String indexByPythonScript(DigitalObject object, Payload payload, String confOid, String rulesOid,\n\t\t\tProperties props) throws IOException, RuleException {\n\t\ttry {\n\t\t\tJsonSimpleConfig jsonConfig = getConfigFile(confOid);\n\n\t\t\t// Get our data ready\n\t\t\tMap<String, Object> bindings = new HashMap<String, Object>();\n\t\t\tMap<String, List<String>> fields = new HashMap<String, List<String>>();\n\t\t\tbindings.put(\"fields\", fields);\n\t\t\tbindings.put(\"jsonConfig\", jsonConfig);\n\t\t\tbindings.put(\"indexer\", this);\n\t\t\tbindings.put(\"object\", object);\n\t\t\tbindings.put(\"payload\", payload);\n\t\t\tbindings.put(\"params\", props);\n\t\t\tbindings.put(\"pyUtils\", getPyUtils());\n\t\t\tbindings.put(\"log\", log);\n\n\t\t\t// Run the data through our script\n\t\t\tPyObject script = getPythonObject(rulesOid);\n\t\t\tif (script.__findattr__(SCRIPT_ACTIVATE_METHOD) != null) {\n\t\t\t\tscript.invoke(SCRIPT_ACTIVATE_METHOD, Py.java2py(bindings));\n\t\t\t\tobject.close();\n\t\t\t} else {\n\t\t\t\tlog.warn(\"Activation method not found!\");\n\t\t\t}\n\n\t\t\treturn getPyUtils().solrDocument(fields);\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuleException(e);\n\t\t}\n\t}", "private static void addJdbcFields(Document doc,Node parent,String name,Collection<PojoField> fields){\n  if (!fields.isEmpty()) {\n    Element prop=addProperty(doc,parent,name,null);\n    Element list=addElement(doc,prop,\"list\");\n    for (    PojoField field : fields) {\n      Element item=addBean(doc,list,JdbcTypeField.class);\n      Element dbType=addProperty(doc,item,\"databaseFieldType\",null);\n      addElement(doc,dbType,\"util:constant\",\"static-field\",\"java.sql.Types.\" + field.dbTypeName());\n      addProperty(doc,item,\"databaseFieldName\",field.dbName());\n      addProperty(doc,item,\"javaFieldType\",field.javaTypeName());\n      addProperty(doc,item,\"javaFieldName\",field.javaName());\n    }\n  }\n}\n", "public static GeoTimeSerie fillprevious(GeoTimeSerie gts){\n  GeoTimeSerie filled=gts.clone();\n  if (!isBucketized(filled)) {\n    return filled;\n  }\n  sort(filled,false);\n  int nticks=filled.values;\n  if (0 != nticks) {\n    long firsttick=filled.ticks[0];", "  private boolean isZero(Object value) {\n    if (value instanceof Number) {\n      Number num = (Number) value;\n      double doubleValue = num.doubleValue();\n      if (doubleValue == 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n", "public synchronized List < IComment > appendLocalCodeNodeComment ( final INaviCodeNode node , final String comment ) throws CouldntSaveDataException , CouldntLoadDataException { Preconditions . checkNotNull ( node , STR_ ) ; return appendComment ( new Cod", "void doFailRunnable ( ) ;", "@Nullable\n    @Override\n    public DefaultQuery<I, D> doFindCounterExample(A hypothesis, Collection<? extends I> inputs) throws\n                                                                                               ModelCheckingException {\n        final DefaultQuery<I, D> result = propertyOracle.findCounterExample(hypothesis, inputs);\n        if (result != null) {\n            LOGGER.logEvent(\"Spurious counterexample found for property: '\" + toString() + \"'\");\n            LOGGER.logCounterexample(\"Spurious counterexample: \" + result);\n        }\n        return result;\n    }", "public void marshall(GetObjectInformationRequest getObjectInformationRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (getObjectInformationRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(getObjectInformationRequest.getDirectoryArn(), DIRECTORYARN_BINDING);\n            protocolMarshaller.marshall(getObjectInformationRequest.getObjectReference(), OBJECTREFERENCE_BINDING);\n            protocolMarshaller.marshall(getObjectInformationRequest.getConsistencyLevel(), CONSISTENCYLEVEL_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "@Override public int hashCode(){\n  int hash=7;\n  hash=23 * hash + (_scope != null ? _scope.hashCode() : 0);\n  hash=23 * hash + (_metric != null ? _metric.hashCode() : 0);\n  hash=23 * hash + (_tags != null ? _tags.hashCode() : 0);\n  return hash;\n}\n", "private boolean removeConfigFile(File file){\n  if (file.exists()) {\n    for (    File file1 : file.listFiles()) {\n      if (file1.isDirectory()) {\n        removeConfigFile(file1);\n      }\n else {\n        boolean isDeleted=file1.delete();\n        if (!isDe", "public void setMusicVolumeFromPreferences(final String preferences, final String preferenceName,\n            final float defaultValue) {\n        musicPreferences = preferences;\n        musicVolumePreferenceName = preferenceName;\n        setMusicVolume(readFromPreferences(preferences, preferenceName, defaultValue));\n    }", "public static void removeBreakpoint ( final BreakpointManager manager , final INaviModule module , final UnrelocatedAddress unrelocatedAddress ) { Preconditions . checkNotNull ( manager , STR_ ) ; Preconditions . checkNotNull ( module , STR_ ) ; Preconditions . checkNotNull ( unrelocatedAddress , STR_ ) ; final BreakpointAddress address = new BreakpointAddress ( module , unrelocatedAddress ) ; if ( manager . hasBreakpoint ( BreakpointType . REGULAR , address ) ) { removeBreakpoints ( Sets . newHashSet ( address ) , manager ) ; } }", "    public ServletOutputStream createOutputStream() throws IOException {\n        return (new GZIPResponseStream(origResponse));\n    }\n", "    public LibraryRef createLibraryRef() {\n        LibraryRef lr = new LibraryRef();\n        addEntryContainer(lr);\n        return lr;\n    }\n", "public ToolBarNorthState ( ) { super ( STR_ ) ; }", "private void processInlines ( ) { for ( BlockParser blockParser : allBlockParsers ) { blockParser . parseInlines ( inlineParser ) ; } }", "public boolean isContentsEmpty(){\n  return contents.isEmpty();\n}\n", "@Override public Iterator iterator(){\n  return new EntryIterator(set.iterator());\n}\n", "    public ValueReplacer getReplacer() {\n        return new ValueReplacer((ReportPlan) ((ReportTreeNode) getTreeModel().getReportPlan().getArray()[0])\n                .getTestElement());\n    }\n", "private synchronized boolean waitResume(){\n  while (isPaused() && !isCancelled() && !isDone()) {\n    try {\n      debugPrint(\"   paused waiting \");\n      wait();\n    }\n catch (    InterruptedException ie) {\n    }\n  }\n  return !isCancelled() && !isDone();\n}\n", "\t\tprivate double calcScoreMeltingTemperature(double temperature){\n\t\t\tdouble scoreTemperature = 0;\n\t\t\tdouble minBorder = 0;\n\t\t\tdouble maxBorder = 0;\n\t\t\tArrays.sort(annealArray,Collections.reverseOrder());\n\t\t\t//Paramters are used to form intervals and gives back the score\n\t\t\t//where the temperature is still in the interval\n\t\t\tfor(Integer interval : annealArray){\n\t\t\t\tminBorder = 60-interval;\n\t\t\t\tmaxBorder = 60+interval;\n\t\t\tif(temperature>=minBorder&&temperature<=maxBorder){\n\t\t\t\tscoreTemperature = anneal.get((double)interval);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn scoreTemperature;\n\t\t}\n", "public static Collection < AnnotationValue > resolveTypeQualifiers ( AnnotationValue value ) { LinkedList < AnnotationValue > result = new LinkedList < AnnotationValue > ( ) ; resolveTypeQualifierNicknames ( value , result , new LinkedList < ClassDescript", "    protected Set getEdges_internal() {\n        HashSet edges = new HashSet();\n        edges.addAll(getPredsToInEdges().values());\n        edges.addAll(getSuccsToOutEdges().values());\n        return edges;\n    }\n", "protected void afterStartEventParser(CanalEventParser eventParser) {\n        // \u8bfb\u53d6\u4e00\u4e0b\u5386\u53f2\u8ba2\u9605\u7684filter\u4fe1\u606f\n        List<ClientIdentity> clientIdentitys = metaManager.listAllSubscribeInfo(destination);\n        for (ClientIdentity clientIdentity : clientIdentitys) {\n            subscribeChange(clientIdentity);\n        }\n    }", "  public boolean setFile(String fileName, boolean append){\n    //System.out.println(fileName);\n    try{\n      writer = new PrintWriter(new BufferedWriter(new FileWriter(fileName,append)));\n\n    }\n    catch(IOException e){\n      System.out.println(e);\n      return false;\n    }\n\n    return true;\n  }\n", "    public long getZipFileLastModified() throws IOException {\n        synchronized (this) {\n            checkIndex();\n            return zipFileLastModified;\n        }\n    }\n", "private static int parseNotificationId(String id){\n  try {\n    return Integer.parseInt(id);\n  }\n catch (  NumberFormatException nfe) {\n    Log.w(TAG,\"Exception while parsing download id:\" + id);\n    return -1;\n  }\n}\n", "public void marshall(LaunchTemplateSpecification launchTemplateSpecification, ProtocolMarshaller protocolMarshaller) {\n\n        if (launchTemplateSpecification == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(launchTemplateSpecification.getLaunchTemplateId(), LAUNCHTEMPLATEID_BINDING);\n            protocolMarshaller.marshall(launchTemplateSpecification.getLaunchTemplateName(), LAUNCHTEMPLATENAME_BINDING);\n            protocolMarshaller.marshall(launchTemplateSpecification.getVersion(), VERSION_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "    public void valueChanged(TreeSelectionEvent event) {\n      ExplorerNode node = (ExplorerNode) getTree()\n          .getLastSelectedPathComponent();\n      if (node != null) {\n        if ((currentNode == null)\n            || (node.getNodeType() != currentNode.getNodeType())) {\n          displayViews(node);\n          currentNode = node;\n        } else {\n          for (NodeView view : views) {\n            view.setModel(node);\n          }\n        }\n      }\n    }\n", "    public int hours() {\n        return this.hours;\n    }\n", "protected boolean canScroll ( View v , boolean checkV , int dx , int x , int y ) { if ( v instanceof ViewGroup ) { final ViewGroup group = ( ViewGroup ) v ; final int scrollX = v . getScrollX ( ) ; final int scrollY = v . getScrollY ( ) ; final int count ", "public static boolean exists(String filepath){\n  File f=new File(filepath);\n  if (f.exists()) {\n    return true;\n  }\n  return false;\n}\n", "\tpublic void processMessage(Message msg, Rete engine, MessageClient client) {\n\t\tif (msg != last && msg instanceof TextMessage){\n\t\t\tTextMessage txtmsg = (TextMessage)msg;\n\t\t\ttry {\n\t\t\t\tengine.build(txtmsg.getText());\n\t\t\t} catch (JMSException e) {\n\t\t\t\tlog.info(e);\n\t\t\t}\n\t\t}\n\t}\n", "    private String prepareRepositoryUrl(String url) {\n        String preparedUrl = url;\n\n        if (url.startsWith(\"jar:\")) {\n            preparedUrl = url.substring(4);\n\n            if (preparedUrl.contains(\".jar!\")) {\n                int index = preparedUrl.lastIndexOf(\"!\");\n                preparedUrl = preparedUrl.substring(0, index);\n            }\n        }\n\n        return preparedUrl;\n    }\n", "private void statInit(){\n  fCash_ID=new VLookup(\"C_Cash_ID\",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,p_TabNo,MColumn.getColumn_ID(MCash.Table_Name,MCash.COLUMNNAME_C_Cash_ID),DisplayType.Search));\n  lCash_ID.setLabelFor(fCash_ID);\n  fCash_ID.setBackground(AdempierePLAF.getInfoBackground());\n  fCash_ID.addActionListener(this);\n  ;\n  fCashBook_ID=new VLookup(\"C_CashBook_ID\",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MCash.Table_Name,MCash.COLUMNNAME_C_CashBook_ID),DisplayType.TableDir));\n  lCashBook_ID.setLabelFor(fCashBook_ID);\n  fCashBook_ID.setBackground(AdempierePLAF.getInfoBackground());\n  fCashBook_ID.addActionListener(this);\n  fInvoice_ID=new VLookup(\"C_Invoice_ID\",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MCashLine.Table_Name,MCashLine.COLUMNNAME_C_Invoice_ID),DisplayType.Search));\n  lInvoice_ID.setLabelFor(fInvoice_ID);\n  fInvoice_ID.setBackground(AdempierePLAF.getInfoBackground());\n  fInvoice_ID.addActionListener(this);\n  fPayment_ID=new VLookup(\"C_Payment_ID\",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MCashLine.Table_Name,MCashLine.COLUMNNAME_C_Payment_ID),DisplayType.Search));\n  lPayment_ID.setLabelFor(fPayment_ID);\n  fPayment_ID.setBackground(AdempierePLAF.getInfoBackground());\n  fPayment_ID.addActionListener(this);\n  fBankAccount_ID=new VLookup(\"C_BankAccount_ID\",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MCashLine.Table_Name,MCashLine.COLUMNNAME_C_BankAccount_ID),DisplayType.TableDir));\n  lBankAccount_ID.setLabelFor(fBankAccount_ID);\n  fBankAccount_ID.setBackground(AdempierePLAF.getInfoBackground());\n  fBankAccount_ID.addActionListener(this);\n  fCharge_ID=new VLookup(MCashLine.COLUMNNAME_C_Charge_ID,false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MCashLine.Table_Name,MCashLine.COLUMNNAME_C_Charge_ID),DisplayType.TableDir));\n  fCharge_ID.setBackground(AdempierePLAF.getInfoBackground());\n  fCharge_ID.addActionListener(this);\n  lDateFrom.setLabelFor(fDateFrom);\n  fDateFrom.setBackground(AdempierePLAF.getInfoBackground());\n  fDateFrom.setToolTipText(Msg.translate(Env.getCtx(),\"DateFrom\"));\n  fDateFrom.addActionListener(this);\n  lDateTo.setLabelFor(fDateTo);\n  fDateTo.setBackground(AdempierePLAF.getInfoBackground());\n  fDateTo.setToolTipText(Msg.translate(Env.getCtx(),\"DateTo\"));\n  fDateTo.addActionListener(this);\n  lAmtFrom.setLabelFor(fAmtFrom);\n  fAmtFrom.setBackground(AdempierePLAF.getInfoBackground());\n  fAmtFrom.setToolTipText(Msg.translate(Env.getCtx(),\"AmtFrom\"));\n  fAmtFrom.addActionListener(this);\n  lAmtTo.setLabelFor(fAmtTo);\n  fAmtTo.setBackground(AdempierePLAF.getInfoBackground());\n  fAmtTo.setToolTipText(Msg.translate(Env.getCtx(),\"AmtTo\"));\n  fAmtTo.addActionListener(this);\n  cbAbsolute.setText(Msg.translate(Env.getCtx(),\"AbsoluteAmt\"));\n  cbAbsolute.setName(\"AbsoluteAmt\");\n  cbAbsolute.setToolTipText(Msg.getMsg(Env.getCtx(),\"AbsoluteAmt\"));\n  cbAbsolute.setSelected(false);\n  cbAbsolute.addActionListener(this);\n  CPanel amtPanel=new CPanel();\n  CPanel datePanel=new CPanel();\n  amtPanel.setLayout(new ALayout(0,0,true));\n  amtPanel.add(fAmtFrom,new ALayoutConstraint(0,0));\n  amtPanel.add(lAmtTo,null);\n  amtPanel.add(fAmtTo,null);\n  datePanel.setLayout(new ALayout(0,0,true));\n  datePanel.add(fDateFrom,new ALayoutConstraint(0,0));\n  datePanel.add(lDateTo,null);\n  datePanel.add(fDateTo,null);\n  p_criteriaGrid.setLayout(new ALayout());\n  p_criteriaGrid.add(lCashBook_ID,new ALayoutConstraint(0,0));\n  p_criteriaGrid.add(fCashBook_ID,null);\n  p_criteriaGrid.add(lCash_ID,null);\n  p_criteriaGrid.add(fCash_ID,null);\n  p_criteriaGrid.add(lInvoice_ID,new ALayoutConstraint(1,0));\n  p_criteriaGrid.add(fInvoice_ID,null);\n  p_criteriaGrid.add(lPayment_ID,null);\n  p_criteriaGrid.add(fPayment_ID,null);\n  p_criteriaGrid.add(lBankAccount_ID,new ALayoutConstraint(2,0));\n  p_criteriaGrid.add(fBankAccount_ID,null);\n  p_criteriaGrid.add(lDateFrom,null);\n  p_criteriaGrid.add(datePanel,null);\n  p_criteriaGrid.add(lCharge_ID,new ALayoutConstraint(3,0));\n  p_criteriaGrid.add(fCharge_ID,null);\n  p_criteriaGrid.add(lAmtFrom,null);\n  p_criteriaGrid.add(amtPanel,null);\n  p_criteriaGrid.add(cbAbsolute,new ALayoutConstraint(3,5));\n}\n", "    public void test05ReadingStatusTimeSource() throws Exception {\n        \n        // Test with insync\n        repository.update(StatusName.TIMESOURCE0_INSYNC.name(), \"true\");\n        assertSuccessfulTimestamp(WORKER4);\n\n        // Test without insync\n        repository.update(StatusName.TIMESOURCE0_INSYNC.name(), \"\");\n        assertTimeNotAvailable(WORKER4);\n    }\n", "\tprivate void turnAllBlocksToGem(GameEngine engine, int playerID) {\n\t\tint w = engine.field.getWidth();\n\t\tint h = engine.field.getHeight();\n\n\t\tfor(int y = engine.field.getHighestBlockY(); y < h; y++) {\n\t\t\tfor(int x = 0; x < w; x++) {\n\t\t\t\tBlock blk = engine.field.getBlock(x, y);\n\t\t\t\tif((blk != null) && (blk.color >= Block.BLOCK_COLOR_RED) && (blk.color <= Block.BLOCK_COLOR_PURPLE)) {\n\t\t\t\t\tblk.color = Block.BLOCK_COLOR_GEM_RED + (blk.color - 2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "public void removeFilter ( String bssid ) { mFilter . remove ( bssid ) ; }", "void removeEntry ( Context context , IEntryHolder entryHolder , boolean origin , boolean fromLeaseExpiration , boolean shouldReplicate ) throws SAException ;", "public final void add(final String[] pLangCountries) {\n    if (pLangCountries != null && pLangCountries.length % 2 == 0) {\n      for (int i = 0; i < pLangCountries.length / 2; i++) {\n        Locale locale = new Locale(pLangCountries[i * 2],\n          pLangCountries[i * 2 + 1]);\n        if (!(messages != null && locale.equals(Locale.getDefault()))) {\n          ResourceBundle msgs = null;\n          try {\n            msgs = ResourceBundle.getBundle(\"Messages\", locale);\n          } catch (Exception e) {\n            this.logger.error(null, SrvI18n.class,\n              \" when loading msg for locale \" + locale, e);\n          }\n          if (msgs != null) {\n            this.messagesMap.put(pLangCountries[i * 2], msgs);\n            this.logger.info(null, SrvI18n.class,\n              \"Added messages for lang/country: \" + pLangCountries[i * 2]\n                + \"/\" + pLangCountries[i * 2 + 1]);\n            if (this.messages == null) {\n              this.messages = msgs;\n            }\n          } else {\n            //If there is no MessagesBundle[current-locale].properties\n            this.logger.error(null, SrvI18n.class,\n              \"There is no messages for lang/country: \" + pLangCountries[i * 2]\n                + \"/\" + pLangCountries[i * 2 + 1]);\n          }\n        } else {\n          this.logger.info(null, SrvI18n.class,\n            \"Messages already added as default for lang/country: \"\n              + pLangCountries[i * 2] + \"/\" + pLangCountries[i * 2 + 1]);\n        }\n      }\n    } else {\n      String msg = null;\n      if (pLangCountries == null) {\n        msg =  \"is null!\";\n      } else {\n        for (String str : pLangCountries) {\n          if (msg == null) {\n            msg = str;\n          } else {\n            msg += \"/\" + str;\n          }\n        }\n      }\n      this.logger.error(null, SrvI18n.class,\n        \"Parameters language error, pLangCountries: \" + msg);\n    }\n  }", "public void notifyMTU ( int mtu ) { m_mtu_advise = mtu ; if ( m_state == PseudoTcpState . TCP_ESTABLISHED ) { adjustMTU ( ) ; } }", "private Rect calculateTapArea ( int viewWidth , int viewHeight , float x , float y , float coefficient ) { int areaSize = Float . valueOf ( NUM_ * coefficient ) . intValue ( ) ; x = x / viewWidth ; y = y / viewHeight ; float cameraX = y ; float cameraY = NUM_ - x ; int centerX = ( int ) ( cameraX * NUM_ - NUM_ ) ; int centerY = ( int ) ( cameraY * NUM_ - NUM_ ) ; int left = clamp ( centerX - areaSize / NUM_ , - NUM_ , NUM_ ) ; int top = clamp ( centerY - areaSize / NUM_ , - NUM_ , NUM_ ) ; int right = clamp ( left + areaSize , - NUM_ , NUM_ ) ; int bottom = clamp ( top + areaSize , - NUM_ , NUM_ ) ; return new Rect ( left , top , right , bottom ) ; }", "public int remove ( int key ) ;", "\tpublic AttachmentContainer removeAttachment(String attachmentID) {\n\t\tAttachmentContainer returnVal = null;\n\t\tfor (int i = 0; i < attachments.size(); i++) {\n\t\t\tif ((returnVal = (AttachmentContainer) attachments.get(i))\n\t\t\t\t.getAssignedAttachmentID()\n\t\t\t\t.toString()\n\t\t\t\t.equals(attachmentID)) {\n\t\t\t\tattachments.remove(i);\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\treturnVal = null;\n\t\t\t}\n\t\t}\n\t\treturn returnVal;\n\t}\n", "protected List<String> unpackLinks(final List<String> rawLinks) {\n        if (rawLinks == null) {\n            return null;\n        }\n\n        return rawLinks.stream()\n                .flatMap(x -> Arrays.stream(x.split(\",\")))\n                .collect(Collectors.toList());\n    }", "    public boolean write(OutputStream output, boolean indent) throws LSException {\n        \n        return xmlFileHandler.write( document.getDocument(), output, indent, false); \n    }\n", "    public void setup(Reader reader) throws IOException, SAXException, ParserConfigurationException {\n        setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE));\n    }\n", "\tpublic boolean isModal(final Shell shell) {\n\t\tinsistWidgetNotNull(shell);\n\t\treturn syncExec(shell, new BooleanResult() {\n\t\t\tpublic boolean result() {\n\t\t\t\tint style = shell.getStyle();\n\t\t\t\tif (style <= 0)\n\t\t\t\t\treturn false;\n\t\t\t\tint bitmask = SWT.SYSTEM_MODAL | SWT.APPLICATION_MODAL | SWT.PRIMARY_MODAL;\n\t\t\t\tif ((style & bitmask) > 0)\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t}\n", "public void clear(){\n  reset();\n  instructions.clear();\n  labels.clear();\n  code=null;\n  lineNumbers.clear();\n}\n", "public void addExtensionMethod(String extensionMethod){\n  if (extensionMethod.equals(Request.NOTIFY)) {\n    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug(\"NOTIFY Supported Natively\");\n  }\n else {\n    dialogCreatingMethods.add(Utils.toUpperCase(extensionMethod.trim()));\n  }\n}\n", "private void initializeListeners ( ) { addMouseListener ( m_listener ) ; addMouseMotionListener ( m_listener ) ; addKeyListener ( m_listener ) ; addFocusListener ( m_listener ) ; m_caret . addCaretListener ( m_listener ) ; }", "\tpublic void scale(double sx, double sy, Point2D origin) {\n\t\tif (isLeaf())\n\t\t\tgetAttributes().scale(sx, sy, origin);\n\t\telse {\n\t\t\tint sizeableAxis = GraphConstants\n\t\t\t\t\t.getSizeableAxis(getAllAttributes());\n\t\t\tif (sizeableAxis == GraphConstants.X_AXIS)\n\t\t\t\tsy = 1;\n\t\t\telse if (sizeableAxis == GraphConstants.Y_AXIS)\n\t\t\t\tsx = 1;\n\t\t\tIterator it = childViews.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tObject view = it.next();\n\t\t\t\tif (view instanceof AbstractCellView) {\n\t\t\t\t\tAbstractCellView child = (AbstractCellView) view;\n\t\t\t\t\tMap attrs = child.getAttributes();\n\t\t\t\t\tif (GraphConstants.isSizeable(attrs)\n\t\t\t\t\t\t\t|| GraphConstants.isAutoSize(attrs))\n\t\t\t\t\t\tchild.scale(sx, sy, origin);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "private void step ( ) throws IOException { while ( BOOL_ ) { if ( res == null ) { if ( getResourceIterator ( ) . hasNext ( ) ) { res = nextFile ( ) ; inFileCount = NUM_ ; try ( InputStream is = CompressionUtils . getInputStream ( res . getLocation ( ) , r", "    private void fireObjectAddedEvent(ObjectBenchEvent event) {\n        Object[] listenerArray = listeners.getListeners();\n        for (int i = 0; i < listenerArray.length; ++i)\n            ((ObjectBenchListener) listenerArray[i]).objectAdded(event);\n    }\n", "protected <T>void runTasks(final List<AbstractTask<T>> tasks) throws InterruptedException {\n  if (log.isInfoEnabled())   log.info(\"begin : will run \" + tasks.size() + \" update tasks\");\n  if (resourceManager.overflowTasksConcurrent == 1) {\n    runTasksInSingleThread(tasks);\n  }\n else {\n    runTasksConcurrent(tasks);\n  }\n  if (log.isInfoEnabled())   log.info(\"end\");\n}\n", "   public MacroItems getMacroItems() {\n      if (macroItems == null)\n         macroItems = new MacroItems();\n      return macroItems;\n   }\n", "public void insertRecord(int id,byte[] record) throws IOException {\n  if (!database.isOpen())   throw new IllegalStateException(\"don't access the table before opening the database\");\n  if (id < committedNextRowId) {\n    throw new IllegalStateException(\"Trying to insert a row below nextRowId: \" + id + \", this: \"+ this);\n  }\n  if (id != lastTransactionInsertId + 1) {\n    throw new IllegalStateException(\"Trying to insert a row that is not one above the last transaction id: \" + lastTransactionInsertId + \", id: \"+ id);\n  }\n  if (record.length != recordSize) {\n    throw new IllegalStateException(\"Record is wrong size: \" + record.length + \", this: \"+ this);\n  }\nsynchronized (this) {\n    rwRaf.seek(HEADER_SIZE + recordSize * id);\n    rwRaf.write(record);\n  }\n  lastTransactionInsertId=id;\n}\n", "    public String toXML() {\n    \tStringBuilder sb = new StringBuilder();\n    \tbuildXML(sb);\n    \treturn sb.toString();\n    }\n", "@Override protected Map<String,Object> generateConfig(Subject subject,Map sharedState,Map options){\n  String idleTimeString=CollectionHelper.getMapAttr(options,COOKIE_IDLE_TIMEOUT_SETTING_KEY);\n  String maxLifeString=CollectionHelper.getMapAttr(options,COOKIE_MAX_LIFE_SETTING_KEY);\n  if (StringUtils.isEmpty(idleTimeString)) {\n    DEBUG.warning(\"Cookie Idle Timeout not set. Defaulting to 0\");\n    idleTimeString=\"0\";\n  }\n  if (StringUtils.isEmpty(maxLifeString)) {\n    DEBUG.warning(\"Cookie Max Life not set. Defaulting to 0\");\n    maxLifeString=\"0\";\n  }\n  tokenIdleTime=Integer.parseInt(idleTimeString) * MINUTES_IN_HOUR;\n  maxTokenLife=Integer.parseInt(maxLifeString) * MINUTES_IN_HOUR;\n  enforceClientIP=CollectionHelper.getBooleanMapAttr(options,ENFORCE_CLIENT_IP_SETTING_KEY,false);\n  secureCookie=CollectionHelper.getBooleanMapAttr(options,SECURE_COOKIE_KEY,true);\n  httpOnlyCookie=CollectionHelper.getBooleanMapAttr(options,HTTP_ONLY_COOKIE_KEY,true);\n  cookieName=CollectionHelper.getMapAttr(options,COOKIE_NAME_KEY);\n  cookieDomains=coreWrapper.getCookieDomainsForRequest(getHttpServletRequest());\n  String hmacKey=CollectionHelper.getMapAttr(options,HMAC_KEY);\n  encryptedHmacKey=AccessController.doPrivileged(new EncodeAction(hmacKey));\n  try {\n    return persistentCookieModuleWrapper.generateConfig(tokenIdleTime.toString(),maxTokenLife.toString(),enforceClientIP,getRequestOrg(),secureCookie,httpOnlyCookie,cookieName,cookieDomains,hmacKey);\n  }\n catch (  SMSException e) {\n    DEBUG.error(\"Error initialising Authentication Module\",e);\n    return null;\n  }\ncatch (  SSOException e) {\n    DEBUG.error(\"Error initialising Authentication Module\",e);\n    return null;\n  }\n}\n", "private void setDoubleWordWorthinessFields() {\n\t\tint j = 1;\n\t\tfor(int i = 1; i < 5; i++) {\n\t\t\tboard[i][j++].setWordWorthiness(Field.DOUBLE_WORD_WORTHINESS);\n\t\t}\n\t\t\n\t\tj = 10;\n\t\tfor(int i = 10; i < 14; i++) {\n\t\t\tboard[i][j++].setWordWorthiness(Field.DOUBLE", "\tprivate CDXObject (String tagName) {\n\t\tsuper(tagName);\n        init();\n\t}\n", "\tprivate boolean xyInRange(double value, double fuzz, int xy) {\n\t\treturn cell.getMinSplitAbsolute(xy) - fuzz <= value\n\t\t\t\t&& cell.getMaxSplitAbsolute(xy) + fuzz >= value;\n\t}\n", "    public void setMetadata(Metadata metadata, JPanel mainPanel) {\n        md = metadata;\n        this.mainPanel = mainPanel; \n        md.addXMLDocumentListener(this);\n        \n    }\n", "protected static String[] listToArray(String value){\n  StringTokenizer tok;\n  Vector<String> list;\n  list=new Vector<String>();\n  tok=new StringTokenizer(value,\",\");\n  while (tok.hasMoreTokens()) {\n    list.add(tok.nextToken());\n  }\n  return list.toArray(new String[list.size()]);\n}\n", "public boolean displayToken ( String newToken ) { return BOOL_ ; }", "private boolean forceSettleCapturedViewAt ( int finalLeft , int finalTop , int xvel , int yvel ) { final int startLeft = mCapturedView . getLeft ( ) ; final int startTop = mCapturedView . getTop ( ) ; final int dx = finalLeft - startLeft ; final int dy = ", "public static boolean isNodeGroupAvailable(ServiceHost host,NodeGroupState localState){\n  if (NodeGroupUtils.isMembershipSettled(host,host.getMaintenanceIntervalMicros(),localState) && NodeGroupUtils.hasMembershipQuorum(host,localState)) {\n    return true;\n  }\n  return false;\n}\n", "  public GQuery bind(int eventbits, final Object data, final Function... funcs) {\n    return as(Events).bind(eventbits, data, funcs);\n  }\n", "public EKBCommit addInserts(Collection<?> inserts) {\n        if (inserts != null) {\n            for (Object insert : inserts) {\n                checkIfModel(insert);\n                this.inserts.add((OpenEngSBModel) insert);\n            }\n        }\n        return this;\n    }", "public static String readAsString(InputStream is) throws IOException {\n\t\ttry {\n\t\t\t// Scanner iterates over tokens in the stream, and in this case\n\t\t\t// we separate tokens using \"beginning of the input boundary\" (\\A)\n\t\t\t// thus giving us only one token for the entire contents of the\n\t\t\t// stream\n\t\t\treturn new Scanner(is, \"UTF-8\").useDelimiter(\"\\\\A\").next();\n\t\t} catch (java.util.NoSuchElementException e) {\n\t\t\treturn \"\";\n\t\t}\n\t}", "public static java.lang.String valueOf(int i){\n  return Integer.toString(i);\n}\n", "private List<Transform> createTransforms(){\n  XMLSignatureFactory factory=XMLSignatureFactory.getInstance();\n  List<Transform> transforms=new ArrayList<Transform>(2);\n  List<String> prefixList=new ArrayList<String>(2);\n  prefixList.add(XMLConstants.XSD_PREFIX);\n  prefixList.add(XMLConstants.XSI_PREFIX);\n  try {\n    transforms.add(factory.newTransform(CanonicalizationMethod.ENVELOPED,(TransformParameterSpec)null));\n    transforms.add(factory.newTransform(CanonicalizationMethod.EXCLUSIVE,new ExcC14NParameterSpec(prefixList)));\n  }\n catch (  Exception e) {\n    throw new IllegalStateException(\"Cannot create enveloped or exclusive transform objects.\",e);\n  }\n  log.debug(\"Created transforms: {} and {}\",CanonicalizationMethod.ENVELOPED,CanonicalizationMethod.EXCLUSIVE);\n  return transforms;\n}\n", "\tpublic void scrollToTop(){\n\t\tscrollOffset=0;\n\t}\n", "private void obtainShowDialogDividersOnScroll(@NonNull final TypedArray typedArray) {\n        showDialogDividersOnScroll(typedArray\n                .getBoolean(R.styleable.DialogPreference_showDialogDividersOnScroll, true));\n    }", "public Interator interator ()\n    {\n        return new AbstractInterator() {\n            public boolean hasNext () {\n                return (_pos < _size);\n            }\n\n            public int nextInt () {\n                if (_pos >= _size) {\n           ", "\tprotected void addVendor_Name_VersionPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_PhysicalConnector_Vendor_Name_Version_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_PhysicalConnector_Vendor_Name_Version_feature\", \"_UI_PhysicalConnector_type\"),\n\t\t\t\t CtbPackage.Literals.PHYSICAL_CONNECTOR__VENDOR_NAME_VERSION,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "    public void addClassQuery (ClassQuery classQuery) {\n        assert classQuery.getName() != null;\n        if (classQueries == null) {\n            classQueries = new TreeMap();\n        }\n        if ( classQueries.get(classQuery.getName()) != null ) {\n            throw new IllegalArgumentException(classQuery.getName() + \" already exists.\");\n        }\n        classQueries.put(classQuery.getName(),classQuery);\n    }\n", "public int handle_rnto(String line, StringTokenizer st) {\n\t\tif (checkLogin() && checkWrite()) {\n\t\t\tString filename = line.substring(5);\n\n\t\t\tif (filename.equals(rnfrFilename))\n\t\t\t\treturn sendReply(250, \"Renamed okay.\");\n\n\t\t\tFile file = new File(createNati", "public static void newRecord(HashMap m, String path) {\n        if( path != null ) {\n            String[] paths = path.split(\",\");\n            int l = paths.length;\n            for(int i=0; i < l; i++) {\n                if( paths[i].contains(\"@\") ) {\n                    String temp[] = paths[i].split(\"[@!]\");\n                    buildPath(m, paths[i]);\n                    HashMap pointer = traverseToPoint(m, temp[0]);\n                    ArrayList a = (ArrayList) pointer.get(temp[1]);\n                    a.add(new HashMap());\n                } \n            }\n        } \n    }", "protected Probe(String name){\n  this.name=name;\n  start=System.nanoTime();\n  log(\"Probe created at \" + new Date());\n}\n", "    private void paintMinimizePressed(Graphics2D g, JComponent c, int width, int height) {\n        iconifyPainter.paintPressed(g, c, width, height);\n    }\n", "private void createActions ( ) { maximizeAction = new MaximizeAction ( ) ; iconifyAction = new IconifyAction ( ) ; closeAction = new CloseAction ( ) ; restoreAction = new RestoreAction ( ) ; moveAction = new MoveAction ( ) ; sizeAction = new SizeAction ( ) ; }", "protected void send ( FCDCommand command , long argument ) throws LibUsbException { write ( command , argument ) ; read ( ) ; }", "public void setMinDate(@Nullable Calendar minDate) {\n        this.minDate = minDate;\n        // update the date picker (even if it is not used right now)\n        if(minDate == null)\n            datePickerDialog.setMinDate(MINIMUM_POSSIBLE_DATE);\n        else if(maxDate != null && compareCalendarDates(minDate, maxDate) > 0)\n            throw new IllegalArgumentException(\"Minimum date must be before maximum date!\");\n        else\n            datePickerDialog.setMinDate(new CalendarDay(minDate));\n        updateEnabledItems();\n    }", "public JSONArray optJSONArray ( int index ) { Object o = this . opt ( index ) ; return o instanceof JSONArray ? ( JSONArray ) o : null ; }", "public final double errorEstimate ( ) { calculate ( ) ; QL . require ( ! Double . isNaN ( this . errorEstimate ) , STR_ ) ; return errorEstimate ; }", "Node tryOptimizeObjectPattern(Node pattern) {\n    checkArgument(pattern.isObjectPattern(), pattern);\n\n    if (pattern.hasChildren() && pattern.getLastChild().isRest()) {\n      // don't remove any elements in `const {f: [], ...rest} = obj` because that affects what's\n      // assigned to `rest`. only the last element can be object rest.\n      return pattern;\n    }\n\n    // remove trailing EMPTY nodes and empty destructuring patterns\n    for (Node child = pattern.getFirstChild(); child != null; ) {\n      Node key = child;\n      child = key.getNext(); // don't put this in the for loop since we might remove `child`\n\n      if (!key.isStringKey()) {\n        // don't try to remove rest or computed properties, since they might have side effects\n        continue;\n      }\n      if (isRemovableDestructuringTarget(key.getOnlyChild())) {\n        // e.g. `const {f: {}} = obj;`\n        key.detach();\n        reportChangeToEnclosingScope(pattern);\n      }\n    }\n    return pattern;\n  }", "boolean smoothSlideTo ( float slideOffset , int velocity ) { if ( ! isSlidingEnabled ( ) ) { return BOOL_ ; } int panelTop = computePanelTopPosition ( slideOffset ) ; if ( mDragHelper . smoothSlideViewTo ( mSlideableView , mSlideableView . getLeft ( ) , p", "public static URL[] pathToURLs(String path){\n  StringTokenizer st=new StringTokenizer(path,File.pathSeparator);\n  URL[] urls=new URL[st.countTokens()];\n  int count=0;\n  while (st.hasMoreTokens()) {\n    File f=new File(st.nextToken());\n    try {\n      f=new File(f.getCanonicalPath());\n    }\n catch (    IOException x) {\n    }\n    try {\n      urls[count++]=ParseUtil.fileToEncodedURL(f);\n    }\n catch (    IOException x) {\n    }\n  }\n  if (urls.length != count) {\n    URL[] tmp=new URL[count];\n    System.arraycopy(urls,0,tmp,0,count);\n    urls=tmp;\n  }\n  return urls;\n}\n", "public static void setSunObjectIdentityCycleDetection (@Nonnull final Marshaller aMarshaller,\n                                                         final boolean bObjectIdentityCycleDetection)\n  {\n    final String sPropertyName = SUN_OBJECT_IDENTITY_CYCLE_DETECTION;\n    _setProperty (aMarshaller, sPropertyName, Boolean.valueOf (bObjectIdentityCycleDetection));\n  }", "private void enableActions(){\n  restoreAction.setEnabled(isParentMaximum() || isParentIcon());\n  maximizeAction.setEnabled((isParentMaximizable() && !isParentMaximum() && !isParentIcon()) || (isParentMaximizable() && isParentIcon()));\n  iconifyAction.setEnabled(isParentIconifiable() && !isParentIcon());\n  closeAction.setEnabled(isParentClosable());\n  sizeAction.setEnabled(false);\n  moveAction.setEnabled(false);\n}\n", "\tpublic BufferedImage makeBufferedImage() {\n\t\treturn makeRGBImage().makeBufferedImage();\n\t}\n", "protected void assertDoesNotExist ( File file ) { assertFalse ( STR_ + file . getAbsolutePath ( ) + STR_ , file . exists ( ) ) ; }", "public static boolean isAbsolute(File f){\n  boolean absolute=false;\n  try {\n    absolute=f.isAbsolute();\n  }\n catch (  SecurityException se) {\n    if (Trace.pathResolver) {\n      Trace.trace(se.getMessage());\n    }\n  }\n  return absolute;\n}\n", "public void paintComponent ( Graphics g ) { super . paintComponent ( g ) ; paint ( ( Graphics2D ) g ) ; }", "public void storeCrc ( byte crcType ) throws IOException { if ( data == null || crcType == CRC_TYPE_NONE ) { this . crc = NUM_ ; this . crcType = crcType ; } else if ( crcType == CRC_TYPE_32 ) { this . crc = computeCrc32 ( data ) ; this . crcType = crcType ; } else { throw new IOException ( STR_ + crcType ) ; } }", "public static char eatBackslash(String a, int[] n) {\n    if (!a.startsWith(\"\\\\\")) {\n      n[0] = 0;\n      return ((char) 0);\n    }\n    // Unicodes BS u XXXX\n    if (a.startsWith(\"\\\\u\")) {\n      try {\n        n[0] = 6;\n        return ((char) Integer.parseInt(a.substring(2, 6), 16));\n      } catch (Exception e) {\n        n[0] = -1;\n        return ((char) 0);\n      }\n    }\n    // Unicodes BS uu XXXX\n    if (a.startsWith(\"\\\\uu\")) {\n      try {\n        n[0] = 7;\n        return ((char) Integer.parseInt(a.substring(3, 7), 16));\n      } catch (Exception e) {\n        n[0] = -1;\n        return ((char) 0);\n      }\n    }\n    // Classical escape sequences\n    if (a.startsWith(\"\\\\b\")) {\n      n[0] = 2;\n      return ((char) 8);\n    }\n    if (a.startsWith(\"\\\\t\")) {\n      n[0] = 2;\n      return ((char) 9);\n    }\n    if (a.startsWith(\"\\\\n\")) {\n      n[0] = 2;\n      return ((char) 10);\n    }\n    if (a.startsWith(\"\\\\f\")) {\n      n[0] = 2;\n      return ((char) 12);\n    }\n    if (a.startsWith(\"\\\\r\")) {\n      n[0] = 2;\n      return ((char) 13);\n    }\n    if (a.startsWith(\"\\\\\\\\\")) {\n      n[0] = 2;\n      return ('\\\\');\n    }\n    if (a.startsWith(\"\\\\\\\"\")) {\n      n[0] = 2;\n      return ('\"');\n    }\n    if (a.startsWith(\"\\\\'\")) {\n      n[0] = 2;\n      return ('\\'');\n    }\n    // Octal codes\n    n[0] = 1;\n    while (n[0] < a.length() && a.charAt(n[0]) >= '0' && a.charAt(n[0]) <= '8')\n      n[0]++;\n    if (n[0] == 1) {\n      n[0] = 0;\n      return ((char) 0);\n    }\n    try {\n      return ((char) Integer.parseInt(a.substring(1, n[0]), 8));\n    } catch (Exception e) {\n    }\n    n[0] = -1;\n    return ((char) 0);\n  }", "public void removeDeferredTrailer(String hdr) {\n        if (tc.isDebugEnabled()) {\n            Tr.debug(tc, \"removeDeferredTrailer(String): \" + hdr);\n        }\n        if (null == hdr) {\n            throw new IllegalArgumentException(\"Null header name\");", "    protected int year_from_datetime(java.util.GregorianCalendar date) {\n        return date.get(Calendar.YEAR);\n    }\n", "public void printDataEndForm(PrintWriter out, int iPrintOptions)\n    {\n        out.println(\"</tr>\\n</table>\");\n        if ((iPrintOptions & HtmlConstants.DETAIL_SCREEN) != 0)\n            out.println(\"</td>\\n</tr>\");\n    }", "static long asLong(Object value) throws ProvidenceConfigException {\n        if (value instanceof Float || value instanceof Double) {\n            long l = ((Number) value).longValue();\n            if ((double) l != ((Number) value).doubleValue()) {\n                throw new ProvidenceConfigException(\"Truncating long decimals from \" + value.toString());\n            }\n            return l;\n        } else if (value instanceof Number) {\n            return ((Number) value).longValue();\n        } else if (value instanceof Numeric) {\n            return ((Numeric) value).asInteger();\n        } else if (value instanceof Boolean) {\n            return ((Boolean) value) ? 1L : 0L;\n       }\n        throw new ProvidenceConfigException(\"Unable to convert \" + value.getClass().getSimpleName() + \" to a long\");\n    }", "    public boolean contains(String elementName) {\n        return elements.containsKey(elementName);\n    }\n", "@Override\n    public void setObject(String parameterName, Object x) throws SQLException\n    {\n        checkClosed();\n        throw SQLError.noSupport();\n    }", "    public List getChildren () {\n        return new ArrayList();\n    };\n", "public FessMessages addConstraintsTypeAnyMessage(String property, String propertyType) {\n        assertPropertyNotNull(property);\n        add(property, new UserMessage(CONSTRAINTS_TypeAny_MESSAGE, propertyType));\n        return this;\n    }", "public void rollIn(Operator operator){\n  map.put(operator,new InterpolatedValue(false,getValue(operator)));\n  if (!timer.isRunning()) {\n    timer.start();\n  }\n}\n", "\tpublic String getMessage(Object...arguments) {\n\t\tString pattern = result.getResource(messageFormat);\n\t\treturn MessageFormat.format(pattern, arguments);\n\t}\n", "public void addAction ( int icon , CharSequence title , Action . OnActionListener listener , ComponentName activity , ComponentName service , String broadcast , Bundle extra ) { addAction ( new Action ( icon , title , listener , activity , service , broad", "    public boolean isPhoneInitialized() {\n        return phone_is_initialized;\n    }\n", "    public void setMinorVersion(int minorVersion) {\n    \tif(minorVersion <= 5) {\n        \tthis.minorVersion = 5;\n        }\n    \telse if(minorVersion >= 6) {\n        \tthis.minorVersion = 6;\n        }\n    }\n", "public List<ScaleIOScsiInitiator> queryAllSCSIInitiators() throws JSONException {\n  log.info(\"Discovery all SCSI Initiators\");\n  List<ScaleIOScsiInitiator> scsiInits=Collections.emptyList();\n  try {\n    ClientResponse response=get(URI.create(ScaleIOConstants.GET_SCSI_INITIATOR_URI));\n    scsiInits=getResponseObjects(ScaleIOScsiInitiator.class,response);\n  }\n catch (  Exception e) {\n    log.debug(\"This exception is expected for ScaleIO 1.32 and later, since iSCSI supported is removed. Exception:\",e);\n  }\n  return scsiInits;\n}\n", "public X509Name(String dirName){\n  this(DefaultReverse,DefaultLookUp,dirName);\n}\n", "public void process(Hashtable<String,CodeSigner[]> signers,List<Object> manifestDigests) throws IOException, SignatureException, NoSuchAlgorithmException, JarException, CertificateException {\n  Object obj=null;\n  try {\n    obj=Providers.startJarVerification();\n    processImpl(signers,manifestDigests);\n  }\n  finally {\n    Providers.stopJarVerification(obj);\n  }\n}\n", "public static Collection split ( Object self , Closure closure ) { List accept = new ArrayList ( ) ; List reject = new ArrayList ( ) ; return split ( closure , accept , reject , InvokerHelper . asIterator ( self ) ) ; }", "@NonNull public static CalendarDay from(int year, int month, int day) {\n    return new CalendarDay(year, month, day);\n  }", "public AttachReply ( final int packetId , final int errorCode ) { super ( packetId , errorCode ) ; }", "private void enterAtomic(){\n  manageCallStackSize.incrementAndGet();\n}\n", "\tprivate void refresh() {\n\t\tfor (int i = 0; i < view.length; i++) {\n\t\t\tfor (int j = 0; j < view.length; j++) {\n\t\t\t\tint k = board.getAt(i, j);\n\t\t\t\tif (k == Constants.BLOCK)\n\t\t\t\t\tview[i][j].setImage(blankImg);\n\t\t\t\telse if (k == Constants.EMPTY)\n\t\t\t\t\tview[i][j].setImage(whiteImg);\n\t\t\t\telse if (k == Constants.FOX) {\n\t\t\t\t\tview[i][j].setImage(foxImg);\n\t\t\t\t} else if (k == Constants.RABBIT) {\n\t\t\t\t\tview[i][j].setImage(rabbitImg);\n\t\t\t\t}\n\t\t\t\t// else\n\t\t\t\t// view[i][j].setVisible(false);// else :: leave it empty\n\t\t\t}\n\t\t}\n\t}\n", "AsyncFuture < AddTypeIndexesResult > asyncAddIndexes ( String typeName , SpaceIndex [ ] indexes , AsyncFutureListener < AddTypeIndexesResult > listener ) ;", "public String productPublicationDate(){\n  return properties.getProperty(\"product.publication.date\");\n}", "private void updateFadeTimeout(){\n  if (isTrafficChannel()) {\n    mFadeTimeout=System.currentTimeMillis() + mTrafficChannelFadeTimeout;\n  }\n else {\n    mFadeTimeout=System.currentTimeMillis() + mStandardChannelFadeTimeout;\n  }\n}\n", "private static DecoratorMap concat(DecoratorMap... d_maps){\n  return null;\n}\n", "@Nonnull\n  public final IMPLTYPE setMode (@Nonnull final EHCScriptInlineMode eMode)\n  {\n    m_eScriptMode = ValueEnforcer.notNull (eMode, \"Mode\");\n    return thisAsT ();\n  }", "public CSVParser ( char separator , char quotechar , char escape , boolean strictQuotes ) { this ( separator , quotechar , escape , strictQuotes , DEFAULT_IGNORE_LEADING_WHITESPACE ) ; }", "public ProgramRewriter(StatementBlockRewriteRule rewrite){\n  _dagRuleSet=new ArrayList<HopRewriteRule>();\n  _sbRuleSet=new ArrayList<StatementBlockRewriteRule>();\n  _sbRuleSet.add(rewrite);\n}\n", "\tpublic void setIndexedWriteMethod (Method indexedSetter) throws IntrospectionException {\n\t\tthis.internalSetIndexedWriteMethod(indexedSetter, false);\n\t}\n", "protected static Number findMultiplicationPattern(BigDecimal[] numbers) {\n        if ( numbers == null || numbers.length < MIN_NUMBER_OF_RESTRICTIONS ) {\n            return null;\n        }\n        try {\n\n            BigDecimal gap = null;\n            Number missingNumber = null;\n\n            BigDecimal a = numbers[0];\n            BigDecimal b = numbers[1];\n            BigDecimal c = numbers[2];\n            BigDecimal d = numbers[3];\n\n            // Uses first four numbers to check if there is a pattern and to\n            // calculate the gap between them. One missing value is allowed.\n            if ( b.divide( a ).equals( c.divide( b ) ) ) {\n                gap = b.divide( a );\n            } else if ( c.divide( b ).equals( d.divide( c ) ) ) {\n                gap = c.divide( b );\n            } else if ( b.divide( a ).equals( d.divide( c ) ) ) {\n                gap = b.divide( a );\n            } else {\n                // No pattern found.\n                return null;\n            }\n\n            BigDecimal first = null;\n            BigDecimal second = null;\n            for ( int i = 0; i < (numbers.length - 1); i++ ) {\n                first = numbers[i];\n                second = numbers[i + 1];\n\n                if ( missingNumber == null && !second.divide( first ).equals( gap ) ) {\n                    missingNumber = first.multiply( gap );\n                } else if ( !second.divide( first ).equals( gap ) && missingNumber != null ) {\n                    // Happends if there is no pattern found, or more than 1\n                    // missing number.\n                    return null;\n                }\n            }\n            return missingNumber;\n        } catch ( Exception e ) {\n            return null;\n        }\n    }", "public void setNotificationTime(String notificationTime) {\n\n        try {\n            m_notificationTime = new Integer(notificationTime);\n        } catch (Throwable t) {\n            m_notificationTime = new Integer(-1);\n        }\n        if (CmsLog.INIT.isInfoEnabled()) {\n            CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_NOTIFICATION_TIME_1, m_notificationTime));\n        }\n    }", "public void loadState(){\n  Timber.i(\"Loading state...\");\n  Scanner scanner=null;\n  try {\n    File save=new File(mContext.getExternalFilesDir(null),QUEUE_FILE);\n    scanner=new Scanner(save);\n    int currentPosition=scanner.nextInt();\n    int queuePosition=scanner.nextInt();\n    int queueLength=scanner.nextInt();\n    long[] queueIDs=new long[queueLength];\n    for (int i=0; i < queueLength; i++) {\n      queueIDs[i]=scanner.nextInt();\n    }\n    mQueue=MediaStoreUtil.buildSongListFromIds(queueIDs,mContext);\n    long[] shuffleQueueIDs;\n    if (scanner.hasNextInt()) {\n      shuffleQueueIDs=new long[queueLength];\n      for (int i=0; i < queueLength; i++) {\n        shuffleQueueIDs[i]=scanner.nextInt();\n      }\n      mQueueShuffled=MediaStoreUtil.buildSongListFromIds(shuffleQueueIDs,mContext);\n    }\n else     if (mShuffle) {\n      shuffleQueue(queuePosition);\n    }\n    mMediaPlayer.seekTo(currentPosition);\n    setBackingQueue(queuePosition);\n    mArtwork=Util.fetchFullArt(getNowPlaying());\n  }\n catch (  FileNotFoundException ignored) {\n    Timber.i(\"State does not exist. Using empty state\");\n  }\ncatch (  NoSuchElementException e) {\n    Timber.i(\"Failed to parse previous state. Resetting...\");\n    mQueue.clear();\n    mQueueShuffled.clear();\n    setBackingQueue(0);\n  }\n finally {\n    if (scanner != null) {\n      scanner.close();\n    }\n  }\n}\n", "public boolean getBidiColoring() {\n\tcheckWidget();\n\treturn bidiColoring;\n}\n", "private static boolean updateIndex(final Project project,final VirtualFile root,final Collection<FilePath> added,final Collection<FilePath> removed,final List<VcsException> exceptions){\n  boolean rc=true;\n  if (!added.isEmpty()) {\n    try {\n      GitFileUtils.addPaths(project,root,added);\n    }\n catch (    VcsException ex) {\n      exceptions.add(ex);\n      rc=false;\n    }\n  }\n  if (!removed.isEmpty()) {\n    try {\n      GitFileUtils.delete(project,root,removed,\"--ignore-unmatch\");\n    }\n catch (    VcsException ex) {\n      exceptions.add(ex);\n      rc=false;\n    }\n  }\n  return rc;\n}\n", "public static byte codonToAmino(final byte c1,final byte c2,final byte c3){\n  final int x1=c1 << DNA_UNKNOWN_BITS2;\n  final int x2=c2 << DNA_UNKNOWN_BITS;\n  final int x=x1 | x2 | c3;\n  return CODON_TO_AMINO[x];\n}\n", "public static <S extends Storable> OrderingScore<S> evaluate\r\n        (OrderedProperty<S>[] indexProperties,\r\n         boolean unique,\r\n         boolean clustered,\r\n         Filter<S> filter,\r\n         OrderingList<S> ordering)\r\n    {\r\n        if (indexProperties == null) {\r\n            throw new IllegalArgumentException(\"Index properties required\");\r\n        }\r\n\r\n        // Get filter list early to detect errors.\r\n        List<PropertyFilter<S>> filterList = PropertyFilterList.get(filter);\r\n\r\n        if (ordering == null) {\r\n            ordering = OrderingList.emptyList();\r\n        }\r\n\r\n        // Ordering properties which match identity filters don't affect order\r\n        // results. Build up this set to find them quickly.\r\n        Set<ChainedProperty<S>> identityPropSet =\r\n            new HashSet<ChainedProperty<S>>(filterList.size());\r\n\r\n        for (PropertyFilter<S> propFilter : filterList) {\r\n            if (propFilter.getOperator() == RelOp.EQ) {\r\n                identityPropSet.add(propFilter.getChainedProperty());\r\n            }\r\n        }\r\n\r\n        OrderingList<S> handledOrdering = OrderingList.emptyList();\r\n        OrderingList<S> remainderOrdering = OrderingList.emptyList();\r\n        OrderingList<S> freeOrdering = OrderingList.emptyList();\r\n        OrderingList<S> unusedOrdering = OrderingList.emptyList();\r\n\r\n        // Build up list of unused properties that were filtered out.\r\n        for (int i=0; i<indexProperties.length; i++) {\r\n            OrderedProperty<S> indexProp = indexProperties[i];\r\n            ChainedProperty<S> indexChained = indexProp.getChainedProperty();\r\n\r\n            if (identityPropSet.contains(indexChained)) {\r\n                unusedOrdering = unusedOrdering.concat(indexProp.direction(UNSPECIFIED));\r\n            }\r\n        }\r\n\r\n        // If index is unique and every property is matched by an identity\r\n        // filter, then there won't be any handled or remainder properties.\r\n        uniquelyCheck:\r\n        if (unique) {\r\n            for (int i=0; i<indexProperties.length; i++) {\r\n                ChainedProperty<S> indexChained = indexProperties[i].getChainedProperty();\r\n                if (!identityPropSet.contains(indexChained)) {\r\n                    // Missed a property, so ordering is still relevant.\r\n                    break uniquelyCheck;\r\n                }\r\n            }\r\n\r\n            return new OrderingScore<S>(indexProperties,\r\n                                        clustered,\r\n                                        handledOrdering,   // no handled properties\r\n                                        remainderOrdering, // no remainder properties\r\n                                        false,             // no need to reverse order\r\n                                        freeOrdering,      // no free properties\r\n                                        unusedOrdering);\r\n        }\r\n\r\n        Boolean shouldReverseOrder = null;\r\n\r\n        Set<ChainedProperty<S>> seen = new HashSet<ChainedProperty<S>>();\r\n\r\n        boolean gap = false;\r\n        int indexPos = 0;\r\n        calcScore:\r\n        for (int i=0; i<ordering.size(); i++) {\r\n            OrderedProperty<S> property = ordering.get(i);\r\n            ChainedProperty<S> chained = property.getChainedProperty();\r\n\r\n            if (seen.contains(chained)) {\r\n                // Redundant property doesn't affect ordering.\r\n                continue calcScore;\r\n            }\r\n\r\n            seen.add(chained);\r\n\r\n            if (identityPropSet.contains(chained)) {\r\n                // Doesn't affect ordering.\r\n                continue calcScore;\r\n            }\r\n\r\n            indexPosMatch:\r\n            while (!gap && indexPos < indexProperties.length) {\r\n                OrderedProperty<S> indexProp = indexProperties[indexPos];\r\n                ChainedProperty<S> indexChained = indexProp.getChainedProperty();\r\n\r\n                if (chained.equals(indexChained)) {\r\n                    Direction indexDir = indexProp.getDirection();\r\n                    if (indexDir == UNSPECIFIED) {\r\n                        // Assume index natural order is ascending.\r\n                        indexDir = ASCENDING;\r\n                    }\r\n\r\n                    if (shouldReverseOrder != null && shouldReverseOrder) {\r\n                        indexDir = indexDir.reverse();\r\n                    }\r\n\r\n                    if (property.getDirection() == UNSPECIFIED) {\r\n                        // Set handled property direction to match index.\r\n                        property = property.direction(indexDir);\r\n                    } else if (shouldReverseOrder == null) {\r\n                        shouldReverseOrder = indexDir != property.getDirection();\r\n                        // Any properies already in the list had been\r\n                        // originally unspecified. They might need to be\r\n                        // reversed now.\r\n                        if (shouldReverseOrder) {\r\n                            handledOrdering = handledOrdering.reverseDirections();\r\n                        }\r\n                    } else if (indexDir != property.getDirection()) {\r\n                        // Direction mismatch, so cannot be handled.\r\n                        break indexPosMatch;\r\n                    }\r\n\r\n                    handledOrdering = handledOrdering.concat(property);\r\n\r\n                    indexPos++;\r\n                    continue calcScore;\r\n                }\r\n\r\n                if (identityPropSet.contains(indexChained)) {\r\n                    // Even though ordering did not match index at current\r\n                    // position, the search for handled propertes can continue if\r\n                    // index gap matches an identity filter.\r\n                    indexPos++;\r\n                    continue indexPosMatch;\r\n                }\r\n\r\n                // Index gap, so cannot be handled.\r\n                break indexPosMatch;\r\n            }\r\n\r\n            // Property not handled and not an identity filter.\r\n            remainderOrdering = remainderOrdering.concat(property);\r\n            gap = true;\r\n        }\r\n\r\n        // Walk through all remaining index properties and list them as free.\r\n        while (indexPos < indexProperties.length) {\r\n            OrderedProperty<S> freeProp = indexProperties[indexPos];\r\n            ChainedProperty<S> freeChained = freeProp.getChainedProperty();\r\n\r\n            // Don't list as free if already listed as unused.\r\n            if (!identityPropSet.contains(freeChained)) {\r\n                if (shouldReverseOrder == null) {\r\n                    freeProp = freeProp.direction(UNSPECIFIED);\r\n                } else {\r\n                    Direction freePropDir = freeProp.getDirection();\r\n                    if (freePropDir == UNSPECIFIED) {\r\n                        freePropDir = ASCENDING;\r\n                    }\r\n                    if (shouldReverseOrder) {\r\n                        freeProp = freeProp.direction(freePropDir.reverse());\r\n                    }\r\n                }\r\n                freeOrdering = freeOrdering.concat(freeProp);\r\n            }\r\n\r\n            indexPos++;\r\n        }\r\n\r\n        if (shouldReverseOrder == null) {\r\n            shouldReverseOrder = false;\r\n        }\r\n\r\n        return new OrderingScore<S>(indexProperties,\r\n                                    clustered,\r\n                                    handledOrdering,\r\n                                    remainderOrdering,\r\n                                    shouldReverseOrder,\r\n                                    freeOrdering,\r\n                                    unusedOrdering);\r\n    }", "public static double computeDistance( double lat1, double lon1, double lat2, double lon2 ) {\n        // Based on http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\n        // using the \"Inverse Formula\" (section 4)\n        int MAXITERS = 20;\n        // Convert lat/long to radians\n        lat1 *= Math.PI / 180.0;\n        lat2 *= Math.PI / 180.0;\n        lon1 *= Math.PI / 180.0;\n        lon2 *= Math.PI / 180.0;\n        double a = 6378137.0; // WGS84 major axis\n        double b = 6356752.3142; // WGS84 semi-major axis\n        double f = (a - b) / a;\n        double aSqMinusBSqOverBSq = (a * a - b * b) / (b * b);\n        double L = lon2 - lon1;\n        double A = 0.0;\n        double U1 = Math.atan((1.0 - f) * Math.tan(lat1));\n        double U2 = Math.atan((1.0 - f) * Math.tan(lat2));\n        double cosU1 = Math.cos(U1);\n        double cosU2 = Math.cos(U2);\n        double sinU1 = Math.sin(U1);\n        double sinU2 = Math.sin(U2);\n        double cosU1cosU2 = cosU1 * cosU2;\n        double sinU1sinU2 = sinU1 * sinU2;\n        double sigma = 0.0;\n        double deltaSigma = 0.0;\n        double cosSqAlpha = 0.0;\n        double cos2SM = 0.0;\n        double cosSigma = 0.0;\n        double sinSigma = 0.0;\n        double cosLambda = 0.0;\n        double sinLambda = 0.0;\n        double lambda = L; // initial guess\n        for( int iter = 0; iter < MAXITERS; iter++ ) {\n            double lambdaOrig = lambda;\n            cosLambda = Math.cos(lambda);\n            sinLambda = Math.sin(lambda);\n            double t1 = cosU2 * sinLambda;\n            double t2 = cosU1 * sinU2 - sinU1 * cosU2 * cosLambda;\n            double sinSqSigma = t1 * t1 + t2 * t2; // (14)\n            sinSigma = Math.sqrt(sinSqSigma);\n            cosSigma = sinU1sinU2 + cosU1cosU2 * cosLambda; // (15)\n            sigma = Math.atan2(sinSigma, cosSigma); // (16)\n            double sinAlpha = (sinSigma == 0) ? 0.0 : cosU1cosU2 * sinLambda / sinSigma; // (17)\n            cosSqAlpha = 1.0 - sinAlpha * sinAlpha;\n            cos2SM = (cosSqAlpha == 0) ? 0.0 : cosSigma - 2.0 * sinU1sinU2 / cosSqAlpha; // (18)\n            double uSquared = cosSqAlpha * aSqMinusBSqOverBSq; // defn\n            A = 1 + (uSquared / 16384.0) * // (3)\n                    (4096.0 + uSquared * (-768 + uSquared * (320.0 - 175.0 * uSquared)));\n            double B = (uSquared / 1024.0) * // (4)\n                    (256.0 + uSquared * (-128.0 + uSquared * (74.0 - 47.0 * uSquared)));\n            double C = (f / 16.0) * cosSqAlpha * (4.0 + f * (4.0 - 3.0 * cosSqAlpha)); // (10)\n            double cos2SMSq = cos2SM * cos2SM;\n            deltaSigma = B * sinSigma * // (6)\n                    (cos2SM + (B / 4.0) * (cosSigma * (-1.0 + 2.0 * cos2SMSq)\n                            - (B / 6.0) * cos2SM * (-3.0 + 4.0 * sinSigma * sinSigma) * (-3.0 + 4.0 * cos2SMSq)));\n            lambda = L + (1.0 - C) * f * sinAlpha\n                    * (sigma + C * sinSigma * (cos2SM + C * cosSigma * (-1.0 + 2.0 * cos2SM * cos2SM))); // (11)\n            double delta = (lambda - lambdaOrig) / lambda;\n            if (Math.abs(delta) < 1.0e-12) {\n                break;\n            }\n        }\n        float distance = (float) (b * A * (sigma - deltaSigma));\n        return distance;\n    }", "public StrBuilder deleteAll(String str){\n  int len=(str == null ? 0 : str.length());\n  if (len > 0) {\n    int index=indexOf(str,0);\n    while (index >= 0) {\n      deleteImpl(index,index + len,len);\n      index=indexOf(str,index);\n    }\n  }\n  return this;\n}\n", "void deleteGlobalEdgeComment ( INaviEdge edge , Integer commentId , Integer userId ) throws CouldntDeleteException ;", "public void store() throws Exception {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            Tr.entry(tc, \"store\");\n\n        try {\n            String name = getProperty(Constants.SSLPROP_KEY_STORE_NAME);\n            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n                Tr.debug(tc, \"Storing KeyStore \" + name);\n\n            String SSLKeyFile = getProperty(Constants.SSLPROP_KEY_STORE);\n            String SSLKeyPassword = decodePassword(getProperty(Constants.SSLPROP_KEY_STORE_PASSWORD));\n            String SSLKeyStoreType = getProperty(Constants.SSLPROP_KEY_STORE_TYPE);\n\n            boolean readOnly = Boolean.parseBoolean(getProperty(Constants.SSLPROP_KEY_STORE_READ_ONLY));\n            boolean fileBased = Boolean.parseBoolean(getProperty(Constants.SSLPROP_KEY_STORE_FILE_BASED));\n            String SSLKeyStoreStash = getProperty(Constants.SSLPROP_KEY_STORE_CREATE_CMS_STASH);\n\n            KeyStore ks = getKeyStore(false, false);\n\n            if (ks != null && !readOnly) {\n                if (fileBased) {\n                    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n                        Tr.debug(tc, \"Storing filebased keystore type \" + SSLKeyStoreType);\n                    String keyStoreLocation = SSLKeyFile;\n                    String keyStorePassword = SSLKeyPassword;\n                    final FileOutputStream fos = new FileOutputStream(keyStoreLocation);\n                    try {\n                        ks.store(fos, keyStorePassword.toCharArray());\n                    } finally {\n                        fos.close();\n                    }\n                } else {\n                    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n                        Tr.debug(tc, \"Storing non-filebased keystore type \" + SSLKeyStoreType);\n                    String keyStoreLocation = SSLKeyFile;\n                    String keyStorePassword = SSLKeyPassword;\n                    URL ring = new URL(keyStoreLocation);\n                    URLConnection ringConnect = ring.openConnection();\n                    final OutputStream fos = ringConnect.getOutputStream();\n                    try {\n                        ks.store(fos, keyStorePassword.toCharArray());\n                    } finally {\n                        fos.close();\n                    }\n                }\n            }\n\n            // we will likely have to store other types too\n        } catch (Exception e) {\n            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n                Tr.debug(tc, \"Exception storing KeyStore; \" + e);\n            FFDCFilter.processException(e, getClass().getName(), \"store\", this);\n            throw e;\n        }\n\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            Tr.exit(tc, \"store\");\n    }", "public void nextEntry(ZipEntry ze) throws IOException {\n  LOG.fine(\"nextEntry().currentPos=\" + currentPos);\n  byte[] intBuffer=new byte[4];\n  int bytesRead=fis.read(intBuffer);\n  LOG.fine(\"bytes read=\" + bytesRead);\n  if (bytesRead == -1) {\n    throw new IOException(\"no data available - available=\" + fis.available());\n  }\n  int dataDescriptorLength=0;\n  if (Arrays.equals(intBuffer,new byte[]{0x50,0x4b,0x07,0x08})) {\n    dataDescriptorLength=4 + 4 + 4;\n    fis.skip(dataDescriptorLength);\n    fis.read(intBuffer);\n  }\n  if (!Arrays.equals(intBuffer,new byte[]{0x50,0x4b,0x03,0x04})) {\n    throw new IOException(\"wrong local file header signature - value=\" + ByteArrayHelper.toString(intBuffer));\n  }\n  boolean hasDataDescriptor=(ze.getMethod() & 8) > 0;\n  LOG.fine(\"nextEntry().hasDataDescriptor=\" + hasDataDescriptor);\n  this.compressedSize=ze.getCompressedSize();\n  fis.skip(14 + 4 + 4);\n  byte[] shortBuffer=new byte[2];\n  fis.read(shortBuffer);\n  int fileNameLength=ByteArrayHelper.toInt(shortBuffer);\n  fis.read(shortBuffer);\n  int extraFieldLength=ByteArrayHelper.toInt(shortBuffer);\n  startPos=18 + 12 + fileNameLength+ extraFieldLength+ dataDescriptorLength;\n  currentPos=startPos;\n  endPos=startPos + this.compressedSize;\n  fis.skip(fileNameLength + extraFieldLength);\n}\n", "public void addChangeListener(ChangeListener l){\n  m_ChangeListeners.add(l);\n}\n", "public Observable<ServiceResponse<ProjectTaskInner>> createOrUpdateWithServiceResponseAsync(String groupName, String serviceName, String projectName, String taskName, ProjectTaskInner parameters) {\n        if (this.client.subscriptionId() == null) {\n            throw new IllegalArgumentException(\"Parameter this.client.subscriptionId() is required and cannot be null.\");\n        }\n        if (groupName == null) {\n            throw new IllegalArgumentException(\"Parameter groupName is required and cannot be null.\");\n        }\n        if (serviceName == null) {\n            throw new IllegalArgumentException(\"Parameter serviceName is required and cannot be null.\");\n        }\n        if (projectName == null) {\n            throw new IllegalArgumentException(\"Parameter projectName is required and cannot be null.\");\n        }\n        if (taskName == null) {\n            throw new IllegalArgumentException(\"Parameter taskName is required and cannot be null.\");\n        }\n        if (parameters == null) {\n            throw new IllegalArgumentException(\"Parameter parameters is required and cannot be null.\");\n        }\n        if (this.client.apiVersion() == null) {\n            throw new IllegalArgumentException(\"Parameter this.client.apiVersion() is required and cannot be null.\");\n        }\n        Validator.validate(parameters);\n        return service.createOrUpdate(this.client.subscriptionId(), groupName, serviceName, projectName, taskName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())\n            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProjectTaskInner>>>() {\n                @Override\n                public Observable<ServiceResponse<ProjectTaskInner>> call(Response<ResponseBody> response) {\n                    try {\n                        ServiceResponse<ProjectTaskInner> clientResponse = createOrUpdateDelegate(response);\n                        return Observable.just(clientResponse);\n                    } catch (Throwable t) {\n                        return Observable.error(t);\n                    }\n                }\n            });\n    }", "public JKHttpException ( final String message , final int errorCode ) { super ( message ) ; this . errorCode = errorCode ; }", "public static SourceLineAnnotation fromVisitedInstructionRange ( BytecodeScanningDetector visitor , int startPC , int endPC ) { LineNumberTable lineNumberTable = getLineNumberTable ( visitor ) ; String className = visitor . getDottedClassName ( ) ; String", "private void ensureOutputDirectory ( Path dir ) { if ( ! Files . exists ( dir ) ) { try { Files . createDirectories ( dir ) ; } catch ( IOException e ) { throw ShowMessageException . error ( STR_ + dir , null ) ; } } else if ( ! Files . isDirectory ( dir ) ) throw ShowMessageException . error ( STR_ + dir + STR_ , null ) ; }", "public static boolean bulksInsertEpisodes(Context context,List<Episode> episodeList){\n  Log.d(TAG,\"Number episode to bulk insert: \" + episodeList.size());\n  ContentResolver contentResolver=context.getContentResolver();\n  ContentValues[] records=new ContentValues[episodeList.size()];\n  for (int i=0; i < records.length; i++) {\n    records[i]=EpisodeModel.fromEpisode(episodeList.get(i));\n  }\n  return contentResolver.bulkInsert(PremoContract.EpisodeEntry.CONTENT_URI,records) > 0;\n}\n", "public void addCommands ( PDFPage page , Matrix extra ) { synchronized ( commands ) { addPush ( ) ; if ( extra != null ) { addXform ( extra ) ; } commands . addAll ( page . getCommands ( ) ) ; addPop ( ) ; } updateImages ( ) ; }", "static private String calcThreshold(double scoreThreshold,double lambda){\n  final double logProbThreshold=Math.log(1 - scoreThreshold / 0.999);\n  int maxNum=1000000;\n  if (calcLogProb(maxNum,false,lambda) > logProbThreshold) {\n    return \">1e6\";\n  }\n  int minNum=1;\n  while (minNum < maxNum) {\n    final int midNum=(maxNum + minNum) / 2;\n    final boolean passThreshold=calcLogProb(midNum,false,lambda) <= logProbThreshold;\n    if (passThreshold) {\n      maxNum=midNum;\n    }\n else {\n      if (midNum == minNum) {\n        break;\n      }\n      minNum=midNum;\n    }\n  }\n  return Integer.toString(maxNum);\n}\n", "public List<PlanNode> findAllFirstNodesAtOrBelow( Type typeToFind ) {\n        List<PlanNode> results = new LinkedList<PlanNode>();\n        LinkedList<PlanNode> queue = new LinkedList<PlanNode>();\n        queue.add(this);\n        while (!queue.isEmpty()) {\n            PlanNode aNode = queue.poll();\n            if (aNode.getType() == Type.PROJECT) {\n                results.add(aNode);\n            } else {\n                queue.addAll(0, aNode.getChildren());\n            }\n        }\n        return results;\n    }", "public void testLocalsAverageCorrectly ( ) throws Exception { TransferEntropyCalculatorMultiVariateKernel teCalc = new TransferEntropyCalculatorMultiVariateKernel ( ) ; String kernelWidth = STR_ ; teCalc . setProperty ( TransferEntropyCalculatorMultiVaria", "  public HashSet getAllAtTime(float time) {\n    time = _roundTimes.roundTime(time);\n    Float timeFl = new Float(time);\n    if(!this.containsKey(timeFl))\n      super.put(timeFl, new HashSet());\n    HashSet instsAtTime = (HashSet)super.get(timeFl);\n    return instsAtTime;\n  }\n", "public void releaseWriteLockOnKey(K id){\n  if (id != null) {\n    cache.releaseWriteLockOnKey(id);\n    if (LOGGER.isTraceEnabled()) {\n      LOGGER.trace(cache.getName() + \" Released WRITE lock for id=\" + String.valueOf(id));\n    }\n  }\n else {\n    LOGGER.error(\"Trying to release write lock with a NULL key - throwing an exception!\");\n    throw new IllegalArgumentException(\"Trying to release write lock with null key!\");\n  }\n}\n", "public String getReasonPhrase() {\n        final Object reasonPhrase = getHeader(HttpMessageHeaders.HTTP_REASON_PHRASE);\n\n        if (reasonPhrase != null) {\n            return reasonPhrase.toString();\n        }\n\n        return null;\n    }", "    private void addNextSong( Agent requestor, String song ) {\n        Vector songList = null;\n        songList = (Vector)agentSongMap.get( requestor );\n        if( songList == null ) {\n            songList = new Vector();\n            songList.addElement( song );\n            agentSongMap.put( requestor, songList );\n            Debug.notice( \"adding new agent \" + requestor + \", with song \" + song );\n\n        } else {\n            songList.addElement( song );\n            Debug.notice( \"appending song \" + song + \" for agent \" + requestor );\n\n        }\n\n    }\n", "private void notifyListenersBeforeRequest ( ) { synchronized ( listeners ) { for ( AbstractSerialTransportListener listener : listeners ) { listener . beforeRequestRead ( commPort ) ; } } }", "private void rebuildNode ( ) { m_realizer . regenerate ( ) ; m_graph . updateViews ( ) ; }", "@Override\n    public synchronized List<ExtPluginConfiguration> listNodeEnhancerConfigurations() {\n        return listPluginConfigurations(\n                projectConfig.getProjectProperties(),\n                NODE_ENHANCER_PROP_PREFIX,\n                ServiceNameConstants.NodeEnhancer\n        );\n    }", "public static String hashSHA(String str){\n  byte[] b=str.getBytes();\n  MessageDigest md=null;\n  try {\n    md=MessageDigest.getInstance(\"SHA1\");\n    md.update(b);\n  }\n catch (  NoSuchAlgorithmException e) {\n    e.printStackTrace();\n  }\n  return toHexString(md.digest());\n}\n", "    private double findLat(double mp, double previousLat) {\n        DecimalFormat form = new DecimalFormat(\"#.#####\");\n        mp = Double.parseDouble(form.format(mp));\n        double guessMP;\n        for (double lat = previousLat - 0.25; lat < previousLat + 1; lat += 0.00001) {\n            guessMP = NavCalculator.computeDMPClarkeSpheroid(0, lat);\n            guessMP = Double.parseDouble(form.format(guessMP));\n            if (guessMP == mp || Math.abs(guessMP - mp) < 0.05) {\n                return lat;\n            }\n        }\n        return -1000;\n    }\n", "  protected Person loadPerson(String id) {\n    return (Person) getSession().load(Person.class, Integer.parseInt(id));\n  }\n", "public void restartWithNewConfiguration ( ) { setWeather ( currentWeather , currentWeather == Constants . weatherStatus . RAIN ? rainTime : snowTime , fadeOutTime , currentWeather == Constants . weatherStatus . RAIN ? rainParticles : snowParticles ) ; sta", "public int readUFWord ( int index ) { return this . readUShort ( index ) ; }", "  public void cmpltTransportiere(boolean tempToken) {\n    addRegionUnits(\"\", tempToken);\n  }\n", "\tpublic String get_ModelReferenceString(final ModelPart referencingPart) {\n\t\tIModelReferenceStringProvider currentModelReferenceStringProvider = get_RootPart()\n\t\t\t\t.get_ModelReferenceStringProvider();\n\t\tif (currentModelReferenceStringProvider != null) {\n\t\t\treturn currentModelReferenceStringProvider.get_ModelReferenceString(this,\n\t\t\t\t\treferencingPart);\n\t\t}\n\t\treturn EMPTY_STRING;\n\t}\n", "public void marshall(DescribeGameSessionsRequest describeGameSessionsRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (describeGameSessionsRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\")", "void endAnnotationDefinition ( String annotationName ) ;", "private static int findSeparator(String s){\n  int result=s.indexOf('-');\n  if (result == -1) {\n    result=s.indexOf(',');\n  }\n  if (result == -1) {\n    result=s.indexOf(' ');\n  }\n  if (result == -1) {\n    result=s.indexOf('.');\n  }\n  return result;\n}\n", "public void setLocale(String locale) {\n\n        if (CmsStringUtil.isEmpty(locale)) {\n            m_locale = null;\n            m_contentLocale = null;\n        } else {\n            m_locale = CmsLocaleManager.getLocale(locale);\n            m_contentLocale = m_locale;\n        }\n    }", "private double match_bitapScore(int e,int x,int loc,String pattern){\n  float accuracy=(float)e / pattern.length();\n  int proximity=Math.abs(loc - x);\n  if (Match_Distance == 0) {\n    return proximity == 0 ? accuracy : 1.0;\n  }\n  return accuracy + (proximity / (float)Match_Distance);\n}\n", "public void testUnivariateMatchesMultivariateRoute ( TransferEntropyCalculatorMultiVariate teCalc , int timeSteps , int k ) throws Exception { if ( ! ( teCalc instanceof TransferEntropyCalculator ) ) { throw new Exception ( STR_ ) ; } RandomGenerator rg =", "private static String writeAsString ( JsonValue json ) throws JsonProcessingException { return writePrettyValueAsString ( json ) . replaceAll ( STR_ , STR_ ) ; }", "protected void fillToolbar(){\n  ToolBarManager toolBarManager=getToolBarManager();\n  if (toolBarManager == null)   return;\n  fInput.fillToolBar(toolBarManager,this);\n  toolBarManager.update(true);\n}\n", "@Override public void exceptionCaught(IoSession session,Throwable cause){\n  final IoSessionInputStream in=(IoSessionInputStream)session.getAttribute(KEY_IN);\n  IOException e=null;\n  if (cause instanceof StreamIoException) {\n    e=(IOException)cause.getCause();\n  }\n else   if (cause instanceof IOException) {\n    e=(IOException)cause;\n  }\n  if (e != null && in != null) {\n    in.throwException(e);\n  }\n else {\n    LOGGER.warn(\"Unexpected exception.\",cause);\n    session.close(true);\n  }\n}\n", "public ConcurrentHashMap ( int initialCapacity ) { this ( initialCapacity , LOAD_FACTOR ) ; }", "public static void println ( Closure self , Object value ) { Object owner = getClosureOwner ( self ) ; InvokerHelper . invokeMethod ( owner , STR_ , new Object [ ] { value } ) ; }", "    protected void tearDown() {\n    \t\n    \tif (bf!=null && runAll){\n    \t\tbf.stopAllInstances();\n    \t}\n    \t\n    }\n", "@Override\n    public void doCloseStage(final Wave wave) {\n        final String stageKey = getWaveBean(wave).stageKey();\n\n        Platform.runLater(() -> this.stageMap.get(stageKey).close());\n    }", "        private E _next() {\n\n            if (nextE == null)\n                throw new NoSuchElementException();\n            \n            // we already have the next element.\n            final E e = nextE;\n\n            nextE = null;\n            \n            if (e.getClass().getComponentType() != null) {\n\n                chunksDrainedCount++;\n                elementsDrainedCount += ((Object[]) e).length;\n                elementsOnQueueCount.addAndGet(-((Object[]) e).length);\n                \n            } else {\n                \n                elementsDrainedCount++;\n                elementsOnQueueCount.decrementAndGet();\n                \n            }\n            \n            return e;\n\n        }\n", "public String method ( ) { return getConnection ( ) . getRequestMethod ( ) ; }", "public void setFailedScheduledUpdateGroupActions(java.util.Collection<FailedScheduledUpdateGroupActionRequest> failedScheduledUpdateGroupActions) {\n        if (failedScheduledUpdateGroupActions == null) {\n            this.failedScheduledUpdateGroupActions = null;\n            return;\n        }\n\n        this.failedScheduledUpdateGroupActions = new com.amazonaws.internal.SdkInternalList<FailedScheduledUpdateGroupActionRequest>(\n                failedScheduledUpdateGroupActions);\n    }", "public static int findAvailableTcpPort(int minPortRange, int maxPortRange) {\n        ArgumentUtils.check(() -> minPortRange > MIN_PORT_RANGE)\n            .orElseFail(\"Port minimum value must be greater than \" + MIN_PORT_RANGE);\n        ArgumentUtils.check(() -> maxPortRange >= minPortRange)\n            .orElseFail(\"Max port range must be greater than minimum port range\");\n        ArgumentUtils.check(() -> maxPortRange <= MAX_PORT_RANGE)\n            .orElseFail(\"Port maximum value must be less than \" + MAX_PORT_RANGE);\n\n        int currentPort = nextPort(minPortRange, maxPortRange);\n        while (!isTcpPortAvailable(currentPort)) {\n            currentPort = nextPort(minPortRange, maxPortRange);\n        }\n        return currentPort;\n    }", "    private void encodeAndWriteBuffer() throws IOException {\n        int goodEncodedBytes = encodeBytes(buffer, bufferSize, asciiChars);\n        out.write(asciiChars, 0, goodEncodedBytes);\n        bufferSize = 0;\n        currentLineLength += goodEncodedBy", "public abstract void readBlock ( BlockId blk ) ;", "    public void setPassword(String password) {\n        checkChoiceAndDriver();\n        getProviderChoice().getDriver().setPassword(password);\n    }\n", "\tpublic void removeSourceConnection(Object connx){\n\t\tsourceConnections.remove(connx);\n\t\tfirePropertyChange(P_SOURCE_CONNECTION,null,null);\n\t}\n", "public double maxJointSpaceNorm ( double [ ] x1 , double [ ] y1 , double [ ] x2 , double [ ] y2 ) { return Math . max ( norm ( x1 , x2 ) , norm ( y1 , y2 ) ) ; }", "public static <E> void swap(E[] x, E[] y) {\n        if (x.length != y.length) {\n            throw new IllegalArgumentException(String.format(\"Arrays have different length: x[%d], y[%d]\", x.length, y.length));\n        }\n\n        for (int i = 0; i < x.length; i++) {\n            E s = x[i];\n            x[i] = y[i];\n            y[i] = s;\n        }\n    }", "public DebuggerException ( final String exceptionName , final long exceptionCode , final DebuggerExceptionHandlingAction exceptionAction ) { Preconditions . checkArgument ( ! exceptionName . isEmpty ( ) , STR_ ) ; this . name = Preconditions . checkNotNull ( exceptionName , STR_ ) ; this . exceptionCode = exceptionCode ; this . exceptionAction = Preconditions . checkNotNull ( exceptionAction , STR_ ) ; }", "public void setBotAliases(java.util.Collection<BotAliasMetadata> botAliases) {\n        if (botAliases == null) {\n            this.botAliases = null;\n            return;\n        }\n\n        this.botAliases = new java.util.ArrayList<BotAliasMetadata>(botAliases);\n    }", "public static < A , S > List < A > unfold_ ( S z , Function < S , Result < Tuple < A , S > > > f ) { return f . apply ( z ) . map ( null ) . getOrElse ( list ( ) ) ; }", "public static double [ ] [ ] selectRowsAndColumns ( double matrix [ ] [ ] , int rows [ ] , int columns [ ] ) { double [ ] [ ] data = new double [ rows . length ] [ columns . length ] ; for ( int rIndex = NUM_ ; rIndex < rows . length ; rIndex ++ ) { for (", "public void removeAll(final Collection elements){\n  adjusting=true;\n  Set oldSelection=new HashSet(selection);\n  boolean rv=selection.removeAll(elements);\n  adjusting=false;\n  if (rv) {\n    fireSelectionChanged(oldSelection,selection);\n  }\n}\n", "public static DiffObject autoMerge ( ) { return new DiffObject ( BOOL_ ) ; }", "  public void importSQLButton_actionPerformed(ActionEvent e) {\n    final JFileChooser f = new JFileChooser(\".\");\n    f.setDialogTitle(Options.getInstance().getResource(\"import sql script\"));\n    int res = f.showDialog(parent,Options.getInstance().getResou", "public static tmglobal_auditsyslogpolicy_binding[] get(nitro_service service) throws Exception{\n\t\ttmglobal_auditsyslogpolicy_binding obj = new tmglobal_auditsyslogpolicy_binding();\n\t\ttmglobal_auditsyslogpolicy_binding response[] = (tmglobal_auditsyslogpolicy_binding[]) obj.get_resources(service);\n\t\treturn response;\n\t}", "public Blade interceptor ( String packageName ) { applicationConfig . setInterceptorPackage ( packageName ) ; return this ; }", "private void commitChanges(){\n  try {\n    double floorVal=Double.parseDouble(floor.getText());\n    double ceilingVal=Double.parseDouble(ceiling.getText());\n    double decAmount=Double.parseDouble(decrementAmount.getText());\n    double incAmount=Double.parseDouble(incrementAmount.getText());\n    if (!betweenZeroAndOne(\"Floor\",floorVal)) {\n      return;\n    }\n    if (!betweenZeroAndOne(\"Ceiling\",ceilingVal)) {\n      return;\n    }\n    if (!betweenZeroAndOne(\"Decrement Amount\",decAmount)) {\n      return;\n    }\n    if (!betweenZeroAndOne(\"Increment Amount\",incAmount)) {\n      return;\n    }\n    if (hotPointCheckBox.isSelected()) {\n      colorManager.setHotPointMode(true);\n      colorManager.setHotColor(hotColor);\n    }\n else {\n      colorManager.setHotPointMode(false);\n    }\n    if (coloringMethod.getSelectedItem() == \"None\") {\n      colorManager.setColoringMethod(\"None\");\n      colorManager.setBaseColor(baseColor);\n    }\n    if (coloringMethod.getSelectedItem() == \"DecayTrail\") {\n      colorManager.setColoringMethod(\"DecayTrail\");\n      colorManager.setBaseColor(baseColor);\n      colorManager.setDecrementAmount(decAmount);\n      colorManager.setCeiling(ceilingVal);\n      colorManager.setFloor(floorVal);\n    }\n    if (coloringMethod.getSelectedItem() == \"Frequency\") {\n      colorManager.setColoringMethod(\"Frequency\");\n      colorManager.setBaseColor(baseColor);\n      colorManager.setIncrementAmount(incAmount);\n      colorManager.setCeiling(ceilingVal);\n    }\n  }\n catch (  NumberFormatException nfe) {\n    JOptionPane.showMessageDialog(null,\"Non-numeric field values:\" + \"\\nNetwork construction failed.\",\"Error\",JOptionPane.ERROR_MESSAGE);\n    nfe.printStackTrace();\n  }\n}\n", "    public PickCanvas (Canvas3D c, BranchGroup b) {\n\tsuper (b);\n\tcanvas = c;\n    }\n", "boolean enableSis(String schedule){\n  String volumePath=\"/vol/\" + name;\n  NaElement elem=new NaElement(\"sis-enable\");\n  elem.addNewChild(\"path\",volumePath);\n  try {\n    server.invokeElem(elem);\n  }\n catch (  Exception e) {\n    log.error(\"Failed to enable SIS on volume: \" + name,e);\n    return false;\n  }\n  if (schedule == null || schedule.isEmpty()) {\n    schedule=\"auto\";\n  }\n  elem=new NaElement(\"sis-set-config\");\n  elem.addNewChild(\"path\",volumePath);\n  elem.addNewChild(\"schedule\",schedule);\n  try {\n    server.invokeElem(elem);\n  }\n catch (  Exception e) {\n    String msg=\"Failed to set SIS schedule on volume: \" + name;\n    log.error(msg,e);\n    throw new NetAppException(msg,e);\n  }\n  return true;\n}\n", "public MinecraftDirectory(File rootDir){\n  Objects.requireNonNull(rootDir);\n  this.rootDir=rootDir.getAbsoluteFile();\n}\n", "private void retainValidEntityIDs(Map map,String protocol,String realm) throws COTException {\n  Set pSet=(Set)map.get(protocol);\n  if ((pSet != null) && !pSet.isEmpty()) {\n    Set entityIds=getAllEntities(realm,protocol);\n    if ((entityIds == null) || entityIds.isEmpty()) {\n      map.remove(protocol);\n    }\n else {\n      if (!entityIds.containsAll(pSet)) {\n        if (entityIds.retainAll(pSet)) {\n          if (debug.messageEnabled()) {\n            debug.message(\"COTDescriptor.retainValidEntityIDs:\" + \" Following entity id: \" + entityIds + \" are valid and will be added to \"+ \"the circle of trust\");\n          }\n          map.put(protocol,entityIds);\n        }\n      }\n    }\n  }\n}\n", "public ChannelPanel ( ChannelModel channelModel , ChannelProcessingManager channelProcessingManager , SettingsManager settingsManager , Channel channel ) { mChannelModel = channelModel ; mChannelProcessingManager = channelProcessingManager ; mSettingsManager = settingsManager ; mChannel = channel ; ProcessingChain processingChain = channelProcessingManager . getProcessingChain ( mChannel ) ; if ( processingChain != null ) { mChannelState = processingChain . getChannelState ( ) ; init ( ) ; for ( DecoderState decoderState : processingChain . getDecoderStates ( ) ) { DecoderPanel panel = DecoderFactory . getDecoderPanel ( mSettingsManager , decoderState ) ; mDecoderPanels . add ( panel ) ; add ( panel , STR_ ) ; } mChannelState . setChangedAttributeListener ( this ) ; mChannelModel . addListener ( this ) ; mSettingsManager . addListener ( this ) ; } else { mLog . error ( STR_ ) ; } }", "public static void addShoggothBlacklist(Block block){\n  shoggothBlockBlacklist.add(block);\n}\n", "public final boolean stop() {\n\n        if (booting || running) {\n            stopping = true;\n            booting = false;\n            onStopping();\n            return true;\n        } else {\n            return false;\n        }\n\n    }", "public static void resetSelectedUI ( ) { selectedUI = null ; }", "IEspUser doActionUserLoginDB ( ) ;", "\tprivate DatabasePlatform byDatabaseName(String dbName) throws SQLException {\n\n\t\tdbName = dbName.toLowerCase();\n\t\tif (dbName.equals(\"postgres83\")){\n\t\t\treturn new PostgresPlatform();\n\t\t} \n\t\tif (dbName.equals(\"oracle9\")){\n\t\t\treturn new Oracle9Platform();\n\t\t} \n\t\tif (dbName.equals(\"oracle10\")){\n\t\t\treturn new Oracle10Platform();\n\t\t}\n\t\tif (dbName.equals(\"oracle\")){\n\t\t\treturn new Oracle10Platform();\n\t\t}\n\t\tif (dbName.equals(\"sqlserver2005\")){\n\t\t\treturn new MsSqlServer2005Platform();\n\t\t}\n\t\tif (dbName.equals(\"sqlserver2000\")){\n\t\t\treturn new MsSqlServer2000Platform();\n\t\t}\n\t\tif (dbName.equals(\"mysql\")){\n\t\t\treturn new MySqlPlatform();\n\t\t}\n\t\t\n\t\tthrow new RuntimeException(\"database platform \"+dbName+\" is not known?\");\n\t}\n", "public static String clearEvent(HttpServletRequest request,HttpServletResponse response){\n  String errMsg=\"\";\n  Locale locale=UtilHttp.getLocale(request);\n  Security security=(Security)request.getAttribute(\"security\");\n  if (!security.hasPermission(\"UTIL_CACHE_EDIT\",request.getSession())) {\n    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,\"utilCacheEvents.permissionEdit\",locale) + \".\";\n    request.setAttribute(\"_ERROR_MESSAGE_\",errMsg);\n    return \"error\";\n  }\n  String name=request.getParameter(\"UTIL_CACHE_NAME\");\n  if (name == null) {\n    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,\"utilCache.couldNotClearCache\",locale) + \".\";\n    request.setAttribute(\"_ERROR_MESSAGE_\",errMsg);\n    return \"error\";\n  }\n  UtilCache<?,?> utilCache=UtilCache.findCache(name);\n  if (utilCache != null) {\n    utilCache.clear();\n    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,\"utilCache.clearCache\",UtilMisc.toMap(\"name\",name),locale) + \".\";\n    request.setAttribute(\"_EVENT_MESSAGE_\",errMsg);\n  }\n else {\n    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,\"utilCache.couldNotClearCacheNotFoundName\",UtilMisc.toMap(\"name\",name),locale) + \".\";\n    request.setAttribute(\"_ERROR_MESSAGE_\",errMsg);\n    return \"error\";\n  }\n  return \"success\";\n}\n", "\tpublic PLayer getLayer(String layerName) {\n\t\tif (layerName.equalsIgnoreCase(\"edge\")) {\n\t\t\treturn edgeLayer;\n\t\t} else if (layerName.equalsIgnoreCase(\"event\")) {\n\t\t\treturn eventLayer;\n\t\t} else if (layerName.equalsIgnoreCase(\"label\")) {\n\t\t\treturn labelLayer;\n\t\t} else if (layerName.equalsIgnoreCase(\"window\")) {\n\t\t\treturn windowLayer;\n\t\t}\n\n\t\treturn null;\n\t}\n", "public Set createStaticGroups(Set groupNames) throws AMException, SSOException {\n  Iterator iter=groupNames.iterator();\n  Set groups=new HashSet();\n  while (iter.hasNext()) {\n    String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + \"=\" + ((String)iter.next())+ \",\"+ entryDN;\n    AMStaticGroupImpl groupImpl=new AMStaticGroupImpl(token,groupDN);\n    groupImpl.create();\n    groups.add(groupImpl);\n  }\n  return groups;\n}\n", "public static long [ ] transformLongArray ( Long [ ] source ) { long [ ] destin = new long [ source . length ] ; for ( int i = NUM_ ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }", "public static boolean processDeclaredSubsNames ( Project project , Processor < String > processor ) { return PerlStubIndex . getInstance ( ) . processAllKeys ( PerlSubDeclarationStubIndex . KEY , project , processor ) ; }", "  public void blogEntryPublished(BlogEntryEvent event) {\n    BlogEntry blogEntry = event.getBlogEntry();\n    updateSearchIndex(blogEntry);\n  }\n", "< T > Future < T > submit ( Callable < T > task , Object routing ) ;", "protected final JsonToken _handleFieldName() throws IOException {\n  if (_inputPtr >= _inputEnd) {\n    _loadMoreGuaranteed();\n  }\n  int ch=_inputBuffer[_inputPtr++] & 0xFF;\n  _typeAsInt=ch;\nswitch (ch >> 6) {\ncase 0:\nswitch (ch) {\ncase 0x20:\n      _parsingContext.setCurrentName(\"\");\n    return JsonToken.FIELD_NAME;\ncase 0x30:\ncase 0x31:\ncase 0x32:\ncase 0x33:\n  if (_inputPtr >= _inputEnd) {\n    _loadMoreGuaranteed();\n  }\n{\n  int index=((ch & 0x3) << 8) + (_inputBuffer[_inputPtr++] & 0xFF);\n  if (index >= _seenNameCount) {\n    _reportInvalidSharedName(index);\n  }\n  _parsingContext.setCurrentName(_seenNames[index]);\n}\nreturn JsonToken.FIELD_NAME;\ncase 0x34:\n_handleLongFieldName();\nreturn JsonToken.FIELD_NAME;\n}\nbreak;\ncase 1:\n{\nint index=(ch & 0x3F);\nif (index >= _seenNameCount) {\n_reportInvalidSharedName(index);\n}\n_parsingContext.setCurrentName(_seenNames[index]);\n}\nreturn JsonToken.FIELD_NAME;\ncase 2:\n{\nint len=1 + (ch & 0x3f);\nString name=_findDecodedFromSymbols(len);\nif (name != null) {\n_inputPtr+=len;\n}\n else {\nname=_decodeShortAsciiName(len);\nname=_addDecodedToSymbols(len,name);\n}\nif (_seenNames != null) {\nif (_seenNameCount >= _seenNames.length) {\n_seenNames=_expandSeenNames(_seenNames);\n}\n_seenNames[_seenNameCount++]=name;\n}\n_parsingContext.setCurrentName(name);\n}\nreturn JsonToken.FIELD_NAME;\ncase 3:\nch&=0x3F;\n{\nif (ch > 0x37) {\nif (ch == 0x3B) {\nif (!_parsingContext.inObject()) {\n_reportMismatchedEndMarker('}',']');\n}\n_parsingContext=_parsingContext.getParent();\nreturn JsonToken.END_OBJECT;\n}\n}\n else {\nfinal int len=ch + 2;\nString name=_findDecodedFromSymbols(len);\nif (name != null) {\n_inputPtr+=len;\n}\n else {\nname=_decodeShortUnicodeName(len);\nname=_addDecodedToSymbols(len,name);\n}\nif (_seenNames != null) {\nif (_seenNameCount >= _seenNames.length) {\n_seenNames=_expandSeenNames(_seenNames);\n}\n_seenNames[_seenNameCount++]=name;\n}\n_parsingContext.setCurrentName(name);\nreturn JsonToken.FIELD_NAME;\n}\n}\nbreak;\n}\n_reportError(\"Invalid type marker byte 0x\" + Integer.toHexString(_typeAsInt) + \" for expected field name (or END_OBJECT marker)\");\nreturn null;\n}\n", "private void writeCrashInfoToFile ( Throwable ex ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( STR_ ) ; for ( Map . Entry < String , String > entry : info . entrySet ( ) ) { sb . append ( entry . getKey ( ) ) . append ( STR_ ) . append ( en", "public static Date nextGivenMinuteDate (final Date date, final int minuteBase)\n  {\n    if (minuteBase < 0 || minuteBase > 59)\n    {\n      throw new IllegalArgumentException (\"minuteBase must be >=0 and <= 59\");\n    }\n\n    final Calendar c = PDTFactory.createCalendar ();\n    c.setTime (date != null ? date : new Date ());\n    c.setLenient (true);\n\n    if (minuteBase == 0)\n    {\n      c.set (Calendar.HOUR_OF_DAY, c.get (Calendar.HOUR_OF_DAY) + 1);\n      c.set (Calendar.MINUTE, 0);\n      c.set (Calendar.SECOND, 0);\n      c.set (Calendar.MILLISECOND, 0);\n    }\n    else\n    {\n      final int minute = c.get (Calendar.MINUTE);\n      final int arItr = minute / minuteBase;\n      final int nextMinuteOccurance = minuteBase * (arItr + 1);\n\n      if (nextMinuteOccurance < 60)\n      {\n        c.set (Calendar.MINUTE, nextMinuteOccurance);\n        c.set (Calendar.SECOND, 0);\n        c.set (Calendar.MILLISECOND, 0);\n      }\n      else\n      {\n        c.set (Calendar.HOUR_OF_DAY, c.get (Calendar.HOUR_OF_DAY) + 1);\n        c.set (Calendar.MINUTE, 0);\n        c.set (Calendar.SECOND, 0);\n        c.set (Calendar.MILLISECOND, 0);\n      }\n    }\n    return c.getTime ();\n  }", "public UIForm findEnclosingFormOf(UIComponent comp) {\n\twhile (comp != null && !(comp instanceof HtmlForm)) {\n\n\t    comp = comp.getParent();\n\n\t}\n\tif(comp instanceof UIForm) {\n\t\treturn (UIForm) comp;\n\t}\n\treturn null;\n\t\n}\n", "private boolean isBatteryLevelCharacteristic(final BluetoothGattCharacteristic characteristic){\n  if (characteristic == null)   return false;\n  return BATTERY_LEVEL_CHARACTERISTIC.equals(characteristic.getUuid());\n}\n", "  public void archiveProtocol(String searchID, edu.heidelberg.helen.gee.Protocol aProtocol) throws java.rmi.RemoteException {\n\n    synchronized (this.myProtocolArchive) {\n      this.myProtocolArchive.put(searchID, aProtocol);\n    }\n\n  }\n", "void disconnect ( String invocationContext , String activityToken ) { service . traceDebug ( TAG , STR_ ) ; disconnected = BOOL_ ; final Bundle resultBundle = new Bundle ( ) ; resultBundle . putString ( MqttServiceConstants . CALLBACK_ACTIVITY_TOKEN , act", "    public RangeNumber max(RangeNumber other) {\n        return new RangeNumber(\n            edge(Math.max((long) getPivot(), (long) other.getPivot())),\n            getMin() == NEG_INF || other.getMin() == NEG_INF ?\n            NEG_INF : edge(Math.max((long) getMax(), (long) other.getMax())),\n            edge(Math.max((long) getMin(), (long) other.getMin())));\n    }\n", "public void appendSplitElement ( Fragment aSplit ) { splits . add ( aSplit ) ; }", "private List<Fight> parseEventFights(Elements trs, Event event) {\n        SherdogBaseObject sEvent = new SherdogBaseObject();\n        sEvent.setName(event.getName());\n        sEvent.setSherdogUrl(event.getSherdogUrl());\n\n        List<Fight> fights = new ArrayList<>();\n\n        if (trs.size() > 0) {\n            trs.remove(0);\n\n            trs.forEach(tr -> {\n                Fight fight = new Fight();\n                fight.setEvent(sEvent);\n                fight.setDate(event.getDate());\n                Elements tds = tr.select(\"td\");\n\n                fight.setFighter1(getFighter(tds.get(FIGHTER1_COLUMN)));\n                fight.setFighter2(getFighter(tds.get(FIGHTER2_COLUMN)));\n\n                //parsing old fight, we can get the result\n                if (tds.size() == 7) {\n                    fight.setResult(getResult(tds.get(FIGHTER1_COLUMN)));\n                    fight.setWinMethod(getMethod(tds.get(METHOD_COLUMN)));\n                    fight.setWinRound(getRound(tds.get(ROUND_COLUMN)));\n                    fight.setWinTime(getTime(tds.get(TIME_COLUMN)));\n                }\n\n                fights.add(fight);\n                logger.info(\"Fight added: {}\", fight);\n            });\n        }\n\n        return fights;\n    }", "private void populateTable(Connection connection,String sql,int maxLength) throws SQLException {\n  Random rnd=new Random();\n  PreparedStatement ps=connection.prepareStatement(sql);\n  try {\n    for (int i=0; i < RECORD_COUNT; i++) {\n      int length=rnd.nextInt(maxLength);\n      byte[] data=new byte[length];\n      rnd.nextBytes(data);\n      ps.setInt(1,i);\n      ps.setBytes(2,data);\n      ps.execute();\n    }\n  }\n  finally {\n    ps.close();\n  }\n}\n", "\tprivate Integer getSuppliedWidth() {\n\t\ttry {\n\t\t\tfinal int width = Integer.parseInt( resizedImageWidthTextField.getText() );\n\t\t\tif ( width < MIN_RESIZED_WIDTH || width > MAX_RESIZED_WIDTH )\n\t\t\t\treturn null;\n\t\t\t\n\t\t\treturn width;\n\t\t}\n\t\tcatch ( final NumberFormatException nfe ) {\n\t\t\treturn null;\n\t\t}\n\t}\n", "@Deprecated\n\tprotected static ArrayList<String> findJsonFiles(Path root, String subdir) throws IOException {\n\t\tlogger.debug(\"Looking for json files in classpath under [{}/{}].\", root, subdir);\n\n\t\tfinal ArrayList<String> jsonFiles = new ArrayList<>();\n\t\tfinal Path indexDir = root.resolve(subdir);\n\t\tif (Files.exists(indexDir)) {\n\t\t\tFiles.walkFileTree(indexDir, new SimpleFileVisitor<Path>() {\n\t\t\t\t@Override\n\t\t\t\tpublic FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n\t\t\t\t\t// We have now files. They could be type, settings, templates...\n\t\t\t\t\tString jsonFile = indexDir.relativize(file).toString();\n\n\t\t\t\t\tif (jsonFile.equals(Defaults.IndexSettingsFileName) ||\n\t\t\t\t\t\t\tjsonFile.equals(Defaults.UpdateIndexSettingsFileName)) {\n\t\t\t\t\t\tlogger.trace(\"ignoring: [{}]\", jsonFile);\n\t\t\t\t\t\treturn CONTINUE;\n\t\t\t\t\t}\n\t\t\t\t\tjsonFile = jsonFile.substring(0, jsonFile.lastIndexOf(Defaults.JsonFileExtension));\n\n\t\t\t\t\tjsonFiles.add(jsonFile);\n\t\t\t\t\tlogger.trace(\"json found: [{}]\", jsonFile);\n\t\t\t\t\treturn CONTINUE;\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tlogger.trace(\"[{}] does not exist in [{}].\", subdir, root);\n\t\t}\n\n\t\treturn jsonFiles;\n\t}", "public boolean load ( ) { return remoteFileBrowser . load ( ) ; }", "protected abstract void startRegion ( Style style ) throws IOException ;", "public void println(int tempIndent, String x) {\n    if (startOfLine) {\n      doIndent(tempIndent);\n    }\n\n    if (noNl) {\n      super.print(x);\n    } else {\n      super.println(x);\n      if (oNlCr) { super.write('\\r'); }\n    }\n    startOfLine = true;\n  }", "public Identity ( final int dim ) { this ( dim , EnumSet . noneOf ( Address . Flags . class ) ) ; }", "    public void applyFont(int startIndex, int endIndex, short fontIndex) {\n        XSSFFont font;\n        if(styles == null) {\n            //style table is not set, remember fontIndex and set the run properties later,\n            //when setStylesTableReference is called\n            font = new XSSFFont();\n            font.setFontName(\"#\" + fontIndex);\n        } else {\n            font = styles.getFontAt(fontIndex);\n        }\n        applyFont(startIndex, endIndex, font);\n    }\n", "public void run(){\n  closed=false;\n  thread=Thread.currentThread();\n  do {\n    try {\n      byte[] message=sendQueue.take();\n      DatagramPacket req=requests.remove(ModbusUtil.registersToInt(message));\n      if (req != null) {\n        DatagramPacket res=new DatagramPacket(message,message.length,req.getAddress(),req.getPort());\n        socket.send(res);\n        logger.debug(\"Sent package from queue\");\n      }\n    }\n catch (    Exception ex) {\n      if (running) {\n        logger.error(\"Problem reading UDP socket\",ex);\n      }\n    }\n  }\n while (running);\n  closed=true;\n}\n", "@Override public void flip(WComponentPeer peer,Component target,VolatileImage backBuffer,int x1,int y1,int x2,int y2,BufferCapabilities.FlipContents flipAction){\n  if (flipAction == BufferCapabilities.FlipContents.COPIED) {\n    SurfaceManager vsm=SurfaceManager.getManager(backBuffer);\n    SurfaceData sd=vsm.getPrimarySurfaceData();\n    if (sd instanceof WGLVSyncOffScreenSurfaceData) {\n      WGLVSyncOffScreenSurfaceData vsd=(WGLVSyncOffScreenSurfaceData)sd;\n      SurfaceData bbsd=vsd.getFlipSurface();\n      Graphics2D bbg=new SunGraphics2D(bbsd,Color.black,Color.white,null);\n      try {\n        bbg.drawImage(backBuffer,0,0,null);\n      }\n  finally {\n        bbg.dispose();\n      }\n    }\n else {\n      Graphics g=peer.getGraphics();\n      try {\n        g.drawImage(backBuffer,x1,y1,x2,y2,x1,y1,x2,y2,null);\n      }\n  finally {\n        g.dispose();\n      }\n      return;\n    }\n  }\n else   if (flipAction == BufferCapabilities.FlipContents.PRIOR) {\n    return;\n  }\n  OGLSurfaceData.swapBuffers(peer.getData());\n  if (flipAction == BufferCapabilities.FlipContents.BACKGROUND) {\n    Graphics g=backBuffer.getGraphics();\n    try {\n      g.setColor(target.getBackground());\n      g.fillRect(0,0,backBuffer.getWidth(),backBuffer.getHeight());\n    }\n  finally {\n      g.dispose();\n    }\n  }\n}\n", "public static void addStyle ( Element e ) { e . addClassName ( Resources . I . css ( ) . tooltip ( ) ) ; }", "  private void flushPanels() {\n    resumeGame();\n    t.stop();\n    setCaller = null;\n    for (int i=0; i<cardsCallingSet.size(); i++) {\n      JPanel panel = (JPanel)cardsCallingSet.get(i);\n      panel.setBackground(BACKGROUND);\n    }\n    cardsCallingSet = new ArrayList();\n  }\n", "public ResourceResponse delete ( DeleteRequest request ) throws ResourceException ;", "public GoToAction ( PDFDestination dest ) { super ( STR_ ) ; this . dest = dest ; }", "    public void mapToBean(OpportunityVO opportunityVO, OpportunityDetailForm opportunityDetailForm) {\n        mapper.mapToBean(opportunityVO, opportunityDetailForm);\n    }\n", "public JSONTokener ( String s ) { this ( new StringReader ( s ) ) ; }", "public static double[][] I(int C[][],int N){\n  int L=C.length;\n  double M[][]=new double[L][L];\n  for (int j=0; j < L; j++) {\n    for (int k=j + 1; k < L; k++) {\n      M[j][k]=I(C,j,k,N);\n    }\n  }\n  return M;\n}\n", "    public void setSelectedEvent(Event event) {\n        if (event == null) {\n            eventTable.clearSelection();\n        } else {\n            eventTable.getTreeSelectionModel().setSelectionPath(\n                    eventModel.getSelectionPath(event));\n        }\n    }\n", "public abstract HttpServer createHttpServer ( InetSocketAddress addr , int backlog ) throws IOException ;", "private void confirmHiSeqno ( THLParallelQueue tpq , long seqno , long waitMillis ) throws Exception { AtomicIntervalGuard < ? > intervalGuard = tpq . getIntervalGuard ( ) ; long currentSeqno ; long startMillis = System . currentTimeMillis ( ) ; while ( (", "\tpublic void destroySubcontext(String name) throws NamingException {\n\t\tthrow new com.beetle.framework.AppRuntimeException(\n\t\t\t\t\"the method not implement!\");\n\t}\n", "public static void fill(byte[] a, byte val) {\n        for (int i = 0, len = a.length; i < len; i++)\n            a[i] = val;\n    }", "public Value read(Type type,NodeMap node,Map map) throws Exception {\n  Class actual=readValue(type,node);\n  Class expect=type.getType();\n  if (expect.isArray()) {\n    return readArray(actual,node);\n  }\n  if (expect != actual) {\n    return new ObjectValue(actual);\n  }\n  return null;\n}\n", "\tpublic boolean canConnectTo(GraphModel gm, Object anotherPort) {\n\t\treturn (super.canConnectTo(gm, anotherPort)) &&\n\t\t(anotherPort.getClass() == this.getClass());\n\t\t// needs-more-work: should work with subclasses too. This is\n\t\t// really a java.lang.Class method that is missing: isSubclass()\n\t}\n", "public CompletionStage<ResponseBuilder> updateMemento(final ResponseBuilder builder) {\n        return getServices().getMementoService().put(getServices().getResourceService(), getInternalId())\n            .exceptionally(ex -> {\n                    LOGGER.warn(\"Unable to store memento for {}: {}\", getInternalId(), ex.getMessage());\n                    return null;\n                })\n            .thenApply(stage -> builder);\n    }", "public void zoomOutImage ( float deltaScale ) { zoomOutImage ( deltaScale , mCropRect . centerX ( ) , mCropRect . centerY ( ) ) ; }", "public boolean isRunning ( ) { return mRunning . get ( ) ; }", "public static JPanel createVerticalPanel(String title){\n  JPanel panel=new JPanel();\n  panel.setLayout(new GridLayout(0,1));\n  if (title != null) {\n    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),title));\n  }\n else {\n    panel.setBorder(BorderFactory.createEtchedBorder());\n  }\n  return panel;\n}\n", "    private long getEndOfDayInMillis(long timeInMillis) {\n\tCalendar endOfDay = Calendar.getInstance();\n\tendOfDay.setTimeInMillis(timeInMillis);\n\tendOfDay.set(Calendar.HOUR_OF_DAY, 23);\n\tendOfDay.set(Calendar.MINUTE, 59);\n\tendOfDay.set(Calendar.SECOND, 59);\n\tendOfDay.set(Calendar.MILLISECOND, 999);\n\treturn endOfDay.getTimeInMillis();\n    }\n", "        private void makePicTextVisible(boolean visible) {\n            picTxt.setVisible(visible);\n            picLabel.setVisible(visible);\n\n            ((GridData) picLabel.getLayoutData()).exclude = !visible;\n            ((GridData) picTxt.getLayoutData()).exclude = !visible;\n        }\n", "public void resolveClasspathEntries(List<ClasspathEntryDto> entries){\n  libs=new HashSet<>();\n  containers=new HashSet<>();\n  sources=new HashSet<>();\n  projects=new HashSet<>();\n  for (  ClasspathEntryDto entry : entries) {\nswitch (entry.getEntryKind()) ", "    public JComponent getContentComponent() {\n        \n        JPanel panel = new JPanel();\n        panel.setBackground(Color.gray);\n        GridBagConstraints constraints = new GridBagConstraints();\n        GridBagLayout gridbag = new GridBagLayout();\n        panel.setLayout(gridbag);\n        constraints.fill = GridBagConstraints.HORIZONTAL;\n        constraints.anchor = GridBagConstraints.NORTH;\n        buildConstraints(constraints, 0, 0, 1, 1, 100, 100);\n        gridbag.setConstraints(clusterTable, constraints);\n        \n        panel.add(clusterTable);\n        return panel;\n    }\n", "public ReportedData submitSearch(DomainBareJid serviceJID, Form completedForm) throws NoResponseException, XMPPErrorException, NotConnectedException, InterruptedException {\n        TranscriptSearch search = new TranscriptSearch();\n        search.setType(IQ.Type.get);\n        search.setTo(serviceJID);\n        search.addExtension(completedForm.getDataFormToSend());\n\n        TranscriptSearch response = connection.createStanzaCollectorAndSend(\n                        search).nextResultOrThrow();\n        return ReportedData.getReportedDataFrom(response);\n    }", "    protected JL delTermImpl() {\n        return delNodeImpl();\n    }\n", "public void open(Element sourceElement) {\n        this.sourceElement = sourceElement;\n        $(\"body\").attr(\"style\", \"overflow: hidden !important\");\n        animator.setSourceElement(sourceElement);\n        animator.setTargetElement(getElement());\n        animator.setCompletedCallback(() -> OpenEvent.fire(MaterialOverlay.this, MaterialOverlay.this));\n        animator.animate();\n    }", "@Deprecated\n    public void setSchemaToPackage(boolean schemaToPackage) {\n        this.schemaToPackage = schemaToPackage;\n        module.bind(SQLCodegenModule.SCHEMA_TO_PACKAGE, schemaToPackage);\n    }", "public OvhRmaReturn billingAccount_line_serviceName_phone_rma_POST(String billingAccount, String serviceName, String mondialRelayId, String newMerchandise, Long shippingContactId, OvhRmaPublicTypeEnum type) throws IOException {\n\t\tString qPath = \"/telephon", "public void add ( final ExchangeRate rate ) { add ( rate , Date . minDate ( ) , Date . maxDate ( ) ) ; }", "public static final boolean isArchive(InputStream in) throws IOException {\n        if (in != null) {\n            try (ZipInputStream zip = new ZipInputStream(in)){\n                return zip.getNextEntry() != null;\n            } catch (ZipException e) {\n                return false;\n            }\n        }\n        return false;\n    }", "    public Command getExitApp() {\n        if (exitApp == null) {//GEN-END:|16-getter|0|16-preInit\n            // write pre-init user code here\n            exitApp = new Command(\"Sair\", Command.EXIT, 0);//GEN-LINE:|16-getter|1|16-postInit\n            // write post-init user code here\n        }//GEN-BEGIN:|16-getter|2|\n        return exitApp;\n    }\n", "Set < String > findPermissions ( String username ) ;", "public ComputePlacementSelectionTaskService(){\n  super(ComputePlacementSelectionTaskState.class,DefaultSubStage.class,DISPLAY_NAME);\n  super.toggleOption(ServiceOption.PERSISTENCE,true);\n  super.toggleOption(ServiceOption.REPLICATION,true);\n  super.toggleOption(ServiceOption.OWNER_SELECTION,true);\n  super.toggleOption(ServiceOption.INSTRUMENTATION,true);\n}\n", "void updateApInfo ( String deviceBssid , boolean isConfiguredSuc ) ;", "private void createAndWriteDocuments ( GigaSpace gigaSpace , String type , String body , WriteModifiers updateModifiers ) throws TypeNotFoundException { logger . info ( STR_ ) ; SpaceDocument [ ] spaceDocuments = ControllerUtils . createSpaceDocuments ( t", "public void notifyDevelopers(String subject,String message) throws JPlagException {\n  NodeList userList=rootElement.getElementsByTagName(\"user\");\n  for (int i=0; i < userList.getLength(); i++) {\n    Element elem=(Element)userList.item(i);\n    if ((parseInt(elem,\"state\") & MASK_DEVELOPER) != 0)     sendMail(elem.getAttribute(\"email\"),subject,message);\n  }\n}\n", "private JPanel buildRow ( final String string , final JCheckBox checkBox ) { final JPanel panel = new JPanel ( new BorderLayout ( ) ) ; panel . add ( new JLabel ( string ) , BorderLayout . WEST ) ; panel . add ( checkBox , BorderLayout . EAST ) ; checkBox", "private void parseAdditiveExpr() throws TTXPathException {\n\n        parseMultiplicativeExpr();\n\n        String op = mToken.getContent();\n        while (is(TokenType.PLUS, true) || is(TokenType.MINUS, true)) {\n\n            // identify current operator kind", "\tpublic CompoundConstraint add(Constraint constraint) {\n\t\tthis.constraints.add(constraint);\n\t\treturn this;\n\t}\n", "private MemoryChunk findChunk ( final long address ) { Preconditions . checkArgument ( address >= NUM_ , STR_ ) ; for ( final MemoryChunk chunk : m_chunks ) { if ( ( address >= chunk . getAddress ( ) ) && ( address < ( chunk . getAddress ( ) + chunk . getLength ( ) ) ) ) { return chunk ; } } return null ; }", "\tpublic void visit_astore(final Instruction inst) {\n\t\tfinal LocalVariable operand = (LocalVariable) inst.operand();\n\n\t\tExpr expr = stack.peek();\n\n\t\tif (expr.type().isAddress()) {\n\t\t\tAssert.isTrue(sub != null);\n\t\t\tAssert.isTrue(!saveValue);\n\t\t\texpr = stack.pop(Type.ADDRESS);\n\t\t\tsub.setReturnAddress(operand);\n\t\t\taddStmt(new AddressStoreStmt(sub));\n\t\t} else {\n\t\t\texpr = stack.pop(Type.OBJECT);\n\t\t\tfinal LocalExpr target = new LocalExpr(operand.index(), expr.type());\n\t\t\taddStore(target, expr);\n\t\t}\n\t}\n", "private String getContent(String url) throws RottenTomatoesException {\n        LOG.trace(\"Requesting: {}\", url);\n        try {\n            final HttpGet httpGet = new HttpGet(url);\n            httpGet.addHeader(\"accept\", \"application/json\");\n            final DigestedResponse response = DigestedResponseReader.requestContent(httpClient, httpGet, charset);\n\n            if (response.getStatusCode() >= HTTP_STATUS_500) {\n                throw new RottenTomatoesException(ApiExceptionType.HTTP_503_ERROR, response.getContent(), response.getStatusCode(), url);\n            } else if (response.getStatusCode() >= HTTP_STATUS_300) {\n                throw new RottenTomatoesException(ApiExceptionType.HTTP_404_ERROR, response.getContent(), response.getStatusCode(), url);\n            }\n\n            return response.getContent();\n        } catch (IOException ex) {\n            throw new RottenTomatoesException(ApiExceptionType.CONNECTION_ERROR, \"Error retrieving URL\", url, ex);\n        }\n    }", "protected Map < String , Object > popContext ( ) { if ( ! getProxyBuilder ( ) . getContexts ( ) . isEmpty ( ) ) { return getProxyBuilder ( ) . getContexts ( ) . removeFirst ( ) ; } return null ; }", "\tpublic void init(IWorkbench workbench, IStructuredSelection selection) {\n\t\tthis.workbench = workbench;\n\t\tthis.selection = selection;\n\t\tsetWindowTitle(ZtearsEditPlugin.INSTANCE.getString(\"_UI_Wizard_label\"));\n\t\tsetDefaultPageImageDescriptor(ExtendedImageRegistry.INSTANCE.getImageDescriptor(ZtearsEditPlugin.INSTANCE.getImage(\"full/wizban/NewTRM_LL73\")));\n\t}\n", "public static ForwardRule newInstance(String contentType, String transletName, String method, Boolean defaultResponse)\n            throws IllegalRuleException {\n        if (transletName == null) {\n            throw new IllegalRuleException(\"The 'forward' element requires a 'translet' attribute\");\n        }\n\n        MethodType requestMethod = null;\n        if (method != null) {\n            requestMethod = MethodType.resolve(method);\n            if (requestMethod == null) {\n                throw new IllegalRuleException(\"No request method type for '\" + method + \"'\");\n            }\n        }\n\n        ForwardRule fr = new ForwardRule();\n        fr.setContentType(contentType);\n        fr.setTransletName(transletName);\n        fr.setRequestMethod(requestMethod);\n        fr.setDefaultResponse(defaultResponse);\n        return fr;\n    }", "public void collateFinalState() {\r\n        boolean seenCanceled = false;\r\n        for ( T download : subTransfers ) {\r\n            if ( download.getState() == TransferState.Failed ) {\r\n                setState(TransferState.Failed);\r\n                return;\r\n            } else if ( download.getState() == TransferState.Canceled ) {\r\n                seenCanceled = true;\r\n            }\r\n        }\r\n        if ( seenCanceled )\r\n            setState(TransferState.Canceled);\r\n        else\r\n            setState(TransferState.Completed);\r\n    }", "\tpublic void returnTransformer() throws Exception {\n\t\tFreeMarkerTransformer.returnTransformer(this);\n\t}\n", "public TableDataAdapter(final Context context,final T[] data){\n  this(context,0,new ArrayList<>(Arrays.asList(data)));\n}\n", "\tpublic void addDownlink(NetworkAddress address, Link link) {\n\t\tdownlinkMap.put(address, link);\n\t\tsuper.addLink(link);\n\t}\n", "    protected void processImageProgress(float percentageDone) {\n        if (progressListeners == null) {\n            return;\n        }\n        int numListeners = progressListeners.size();\n        for (int i = 0; i < numListeners; i++) {\n            IIOReadProgressListener listener =\n                (IIOReadProgressListener)progressListeners.get(i);\n            listener.imageProgress(this, percentageDone);\n        }\n    }\n", "public DataAsyncHttpResponseHandler ( ) { super ( ) ; }", "\tprotected boolean setState(State state){\n\t\tif(state == null){\n\t\t\tthrow new IllegalArgumentException();\n\t\t}\n\t\t// in this implementation (without actual devices) it just sets an\n\t\t// internal variable.\n\t\t\n\t\tString s = getStateString(state.getStateNr());\n\t\tif(s == null || s.equals(\"ERROR\")){\n\t\t\treturn false;\n\t\t}\n\t\tthis.state = state;\n\t\treturn true;\n\t}\n", "    public Object visit(BitAndExpression node) {\n\tif (node.hasProperty(NodeProperties.VALUE)) {\n\t    // The expression is constant\n\t    return node.getProperty(NodeProperties.VALUE);\n\t} else {\n\t    return InterpreterUtilities.bitAnd\n\t\t(NodeProperties.getType(node),\n\t\t node.getLeftExpression().acceptVisitor(this),\n\t\t node.getRightExpression().acceptVisitor(this));\n\t}\n    }\n", "public abstract void refreshPlugins ( ) ;", "  public int getMaxPageRange() {\n    if (getPage() < (getMaxPages() - PAGE_WINDOW)) {\n      return getPage() + PAGE_WINDOW;\n    } else {\n      return getMaxPages();\n    }\n  }\n", "public void init(int size,int typeproc,SecureRandom random){\n  this.size=size;\n  this.typeproc=typeproc;\n  this.init_random=random;\n}\n", "public ByteArrayOutputStream ( int size ) { if ( size < NUM_ ) { throw new IllegalArgumentException ( STR_ + size ) ; } synchronized ( this ) { needNewBuffer ( size ) ; } }", "  public Port after(UserInfoInterface userInfo, ProcessData procData) {\n    int flowid = procData.getFlowId();\n    int pid = procData.getPid();\n    int subpid = procData.getSubPid();\n    Timestamp current = new Timestamp(Calendar.getInstance().getTimeInMillis());\n    procData.storeReport(new ReportTO(flowid, pid, subpid, CONST_START, current));\n    return portOut;\n  }\n", "@Override\n  public void write (@Nonnull final byte [] aBuf,\n                     @Nonnegative final int nOfs,\n                     @Nonnegative final int nLen) throws IOException\n  {\n    out.write (aBuf, nOfs, nLen);\n    if (m_bOn)\n    {\n      m_aMac.update (aBuf, nOfs, nLen);\n    }\n  }", "public MethodNode addMethod(String name,\n                                int modifiers,\n                                ClassNode returnType,\n                                Parameter[] parameters,\n                                ClassNode[] exceptions,\n                                Statement code) {\n        MethodNode other = getDeclaredMethod(name, parameters);\n        // let's not add duplicate methods\n        if (other != null) {\n            return other;\n        }\n        MethodNode node = new MethodNode(name, modifiers, returnType, parameters, exceptions, code);\n        addMethod(node);\n        return node;\n    }", "public XGenericCapability copy() {\n\t\tXGenericCapability result = new XGenericCapability();\n\t\t\n\t\tresult.name.assign(name);\n\t\tresult.cardinality = cardinality;\n\t\tresult.valueType = valueType;\n\t\tresult.complexType = complexType.copy();\n\t\t\n\t\tfor (XGenericTyp", "public @Nonnull Object getRoot() {\n    Chain current = this;\n    while (current.hasParent()) {\n      current = current.getParent();\n    }\n    return current.getValue();\n  }", "    public void logout() {\n        SecurityContext context = SecurityContextHolder.getContext();\n        context.setAuthentication(null);\n    }\n", "public Resolution doWithCredential(String userId,Callable<Resolution> action){\n  Credential credential=loadCredential(userId);\n  if (credential != null) {\n    try {\n      return action.call();\n    }\n catch (    Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n  return new RedirectResolution(computeAuthorizationUrl());\n}\n", "    public void addFileset(final FileSet set) {\n        this.filesets.add(set);\n    }\n", "public boolean parseGeoJSON(File file){\n  mLocalFile=file;\n  try {\n    FileInputStream input=new FileInputStream(mLocalFile);\n    JsonParser parser=new JsonParser();\n    JsonElement json=parser.parse(new InputStreamReader(input));\n    input.close();\n    return parseGeoJSON(json.getAsJsonObject());\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    return false;\n  }\n}\n", "private BeanO createBeanO(EJBThreadData threadData,\n                              ContainerTx tx,\n                              boolean activate,\n                              ManagedObjectContext context)\n                    throws RemoteException\n    {\n        final boolean isTraceOn = TraceComponent.isAnyTracingEnabled(); // d532639.2\n\n        if (isTraceOn && tc.isEntryEnabled()) // d367572.7\n            Tr.entry(tc, \"createBeanO(ContainerTx, activate) activate = \" + activate);\n\n        homeEnabled();\n        BeanO result = null;\n\n        // -----------------------------------------------------------------------\n        // For Stateless Session beans, the number of 'active' beans may\n        // be limited.  The call to allocateBeanO will 'assign' one to this\n        // thread and either return one from the pool, or return null to\n        // indicate the pool is empty, but the limit is not currently in use\n        // so one should be created. allocateBeanO will block and control will\n        // NOT be returned until a BeanO has been allocated... or the attempt\n        // has timed out, in which case an Exception will be thrown.       PK20648\n        // -----------------------------------------------------------------------\n        if (beanMetaData.ivMaxCreation > 0)\n        {\n            result = allocateBeanO(tx);\n        }\n        // -----------------------------------------------------------------------\n        // F743-509.CodRev\n        // Max creation limit is zero. Determine if is a Singleton session home.\n        // A singleton session home never has a max creation limit since there\n        // never is more than 1 Singleton instance created.\n        // -----------------------------------------------------------------------\n        else if (ivSingletonSessionHome) //d565527\n        {\n            result = createSingletonBeanO(); //F743-1753\n        }\n        // -----------------------------------------------------------------------\n        // F743-509.CodRev\n        // Neither a Stateless with a max creation limit nor a Singleton session bean\n        // home.  If there is a bean pool, get an instance from the pool. Otherwise,\n        // fall through and create a new one.\n        // -----------------------------------------------------------------------\n        else if (beanPool != null)\n        {\n            result = (BeanO) beanPool.get();\n        }\n\n        if (result == null) { // Create a new instance.\n            if (statefulSessionHome && activate) // d367572.7\n            {\n                try {\n                    result = beanOFactory.create(container, this, true); // d367572.7\n                } catch (InvocationTargetException e) {\n                    // we don't create the instance when reactivating, so ITE should not be thrown\n                    FFDCFilter.processException(e, CLASS_NAME + \".createBeanO\", \"960\", this);\n                    throw new IllegalStateException(e);\n                }\n            }\n            else\n            {\n                long createStartTime = -1;\n                try\n                {\n                    // For Stateless and MessageDriven, create count is the same\n                    // as instantiation count. For these types, create time should\n                    // include creating the instance and calling any lifecycle\n                    // callbacks.                                           d626533.1\n                    if (pmiBean != null &&\n                        (statelessSessionHome || messageDrivenHome))\n                    {\n                        createStartTime = pmiBean.initialTime(EJBPMICollaborator.CREATE_RT);\n                    }\n\n                    result = beanOFactory.create(container, this, false);\n                } catch (InvocationTargetException e) {\n                    FFDCFilter.processException(e, CLASS_NAME + \".createBeanO\", \"977\", this);\n                    throw new RemoteException(enterpriseBeanClass.getName(), e.getCause());\n                } finally\n                {\n                    // Even if the create fails, go ahead and add the time, so\n                    // the number of times counted matches the create count.\n                    if (createStartTime > -1)\n                    {\n                        pmiBean.finalTime(EJBPMICollaborator.CREATE_RT, createStartTime);\n                    }\n                }\n            }\n        } else if (!activate\n                   && beanMetaData.type == InternalConstants.TYPE_CONTAINER_MANAGED_ENTITY\n                   && beanMetaData.cmpResetFields != null) {\n            // Bean was obtained from pool and needs CMP instance values reset\n            // to Java defaults\n            EnterpriseBean b = result.getEnterpriseBean();\n            for (int i = 0; i < beanMetaData.cmpResetFields.length; ++i) {\n                try {\n                    java.lang.reflect.Field f = beanMetaData.cmpResetFields[i];\n                    Class<?> clzz = f.getType();\n                    if (clzz.isPrimitive()) {\n                        if (clzz == Long.TYPE) {\n                            f.setLong(b, 0);\n                        } else if (clzz == Integer.TYPE) {\n                            f.setInt(b, 0);\n                        } else if (clzz == Boolean.TYPE) {\n                            f.setBoolean(b, false);\n                        } else if (clzz == Short.TYPE) {\n                            f.setShort(b, (short) 0);\n                        } else if (clzz == Byte.TYPE) {\n                            f.setByte(b, (byte) 0);\n                        } else if (clzz == Character.TYPE) {\n                            f.setChar(b, (char) 0);\n                        } else if (clzz == Double.TYPE) {\n                            f.setDouble(b, 0);\n                        } else if (clzz == Float.TYPE) {\n                            f.setFloat(b, 0);\n                        }\n                    } else {\n                        f.set(b, null);\n                    }\n                } catch (IllegalAccessException iae) {\n                    FFDCFilter.processException(iae, CLASS_NAME + \".createBeanO\",\n                                                \"598\", this);\n                    throw new ContainerException(\"Problem occurred resetting CMP fields to Java default values\",\n                                    iae);\n                }\n            }\n        }\n\n        // -----------------------------------------------------------------------\n        // Set the created/found BeanO as the 'Callback' BeanO, as this is the\n        // BeanO that is becoming the active beanO for the thread.\n        // This will allow methods called by customer code (like Timer methods)\n        // to determine the state of the BeanO that is making the call     d168509\n        // -----------------------------------------------------------------------\n        threadData.pushCallbackBeanO(result); // d630940\n\n        if (isTraceOn && tc.isEntryEnabled()) // d367572.7 d402055\n            Tr.exit(tc, \"createBeanO(ContainerTx, activate) activate = \" + activate);\n\n        return result;\n    }", "public void pushWriteLockedEdge(Inode inode, String childName) {\n    Preconditions.checkState(!endsInInode());\n    Preconditions.checkState(mLockMode == LockMode.WRITE);\n\n    if (mEntries.isEmpty()) {\n      // Cannot modify the base lock list, and the new inode is already implicitly locked.\n      return;\n    }\n\n    int edgeIndex = mEntries.size() - 1;\n    lockInodeInternal(inode, LockMode.READ);\n    lockEdgeInternal(childName, LockMode.WRITE);\n    downgradeEdge(edgeIndex);\n  }", "    public boolean isProfile() {\n        return TYPE_PROFILE.equalsIgnoreCase(type);\n    }\n", "public static boolean equalsIgnoreCase(char ch1,char ch2){\n  if (ch1 == ch2)   return true;\n  ch1=Character.toUpperCase(ch1);\n  ch2=Character.toUpperCase(ch2);\n  if (ch1 == ch2)   return true;\n  return Character.toLowerCase(ch1) == Character.toLowerCase(ch2);\n}\n", "public static boolean isValidEmail(Object value){\n  InternetAddress addr=parseEmail(value);\n  if (addr != null) {\n    String address=addr.getAddress();\n    if (address.contains(\"..\"))     return false;\n    int pos=address.indexOf('@');\n    if (pos < 1 || pos == address.length() - 1)     return false;\n    String local=address.substring(0,pos);\n    String domain=address.substring(pos + 1);\n    if (domain.charAt(0) == '.' || local.charAt(0) == '.' || local.charAt(local.length() - 1) == '.')     return false;\n    pos=domain.lastIndexOf('.');\n    if (pos > 0 && pos < domain.length() - 2) {\n      if (StringUtil.isAllAlpha(domain.substring(pos + 1)))       return true;\n      try {\n        addr.validate();\n        return true;\n      }\n catch (      AddressException e) {\n      }\n    }\n  }\n  return false;\n}\n", "public static Expr.VariableAccess extractAssignedVariable(LVal lval) {\n\t\tif (lval instanceof Expr.VariableAccess) {\n\t\t\treturn (Expr.VariableAccess) lval;\n\t\t} else if (lval instanceof Expr.RecordAccess) {\n\t\t\tExpr.RecordAccess e = (Expr.RecordAccess) lval;\n\t\t\treturn extractAssignedVariable((LVal) e.getOperand());\n\t\t} else if (lval instanceof Expr.ArrayAccess) {\n\t\t\tExpr.ArrayAccess e = (Expr.ArrayAccess) lval;\n\t\t\treturn extractAssignedVariable((LVal) e.getFirstOperand());\n\t\t} else if (lval instanceof Expr.Dereference) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tsyntaxError(lval, WyilFile.INVALID_LVAL_EXPRESSION);\n\t\t\treturn null; // dead code\n\t\t}\n\t}", "public CreateLoadBalancerTlsCertificateRequest withCertificateAlternativeNames(String... certificateAlternativeNames) {\n        if (this.certificateAlternativeNames == null) {\n            setCertificateAlternativeNames(new java.util.ArrayList<String>(certificateAlternativeNames.length));\n        }\n        for (String ele : certificateAlternativeNames) {\n            this.certificateAlternativeNames.add(ele);\n        }\n        return this;\n    }", "private boolean exists(Object obj){\n  if (obj == null) {\n    return false;\n  }\n  if (obj instanceof String && StringUtils.isEmpty((String)obj)) {\n    return false;\n  }\n  return true;\n}\n", "static byte[] marshallIDL4Config(final AttributeImpl attribute) throws DevFailed {\n        XLOGGER.entry();\n        final AttributeConfig_3 config = TangoIDLAttributeUtil.toAttributeConfig3(attribute);\n        final CDROutputStream os = new CDROutputStream();\n        try {\n            AttributeConfig_3Helper.write(os, config);\n            XLOGGER.exit();\n            return cppAlignment(os.getBufferCopy());\n        } finally {\n            os.close();\n        }\n    }", "\tpublic Object getUser11() {\n\t\treturn user11;\n\t}\n", "    public void componentMoved(ComponentEvent e) {\n        setBounds(component.x, component.y, component.width, component.height);\n    }\n", "private boolean processKeyUp(int keyCode){\n  if (keyCode == KeyEvent.KEYCODE_DEL) {\n    if (mInKbMode) {\n      if (!mTypedTimes.isEmpty()) {\n        int deleted=deleteLastTypedKey();\n        String deletedKeyStr;\n        if (deleted == getAmOrPmKeyCode(AM)) {\n          deletedKeyStr=mAmText;\n        }\n else         if (deleted == getAmOrPmKeyCode(PM)) {\n          deletedKeyStr=mPmText;\n        }\n else {\n          deletedKeyStr=String.format(\"%d\",getValFromKeyCode(deleted));\n        }\n        AccessibilityUtils.makeAnnouncement(this,String.format(mDeletedKeyFormat,deletedKeyStr));\n        updateDisplay(true);\n      }\n    }\n  }\n else   if (keyCode == KeyEvent.KEYCODE_0 || keyCode == KeyEvent.KEYCODE_1 || keyCode == KeyEvent.KEYCODE_2 || keyCode == KeyEvent.KEYCODE_3 || keyCode == KeyEvent.KEYCODE_4 || keyCode == KeyEvent.KEYCODE_5 || keyCode == KeyEvent.KEYCODE_6 || keyCode == KeyEvent.KEYCODE_7 || keyCode == KeyEvent.KEYCODE_8 || keyCode == KeyEvent.KEYCODE_9 || (!mIs24HourView && (keyCode == getAmOrPmKeyCode(AM) || keyCode == getAmOrPmKeyCode(PM)))) {\n    if (!mInKbMode) {\n      if (mRadialTimePickerView == null) {\n        Log.e(TAG,\"Unable to initiate keyboard mode, TimePicker was null.\");\n        return true;\n      }\n      mTypedTimes.clear();\n      tryStartingKbMode(keyCode);\n      return true;\n    }\n    if (addKeyIfLegal(keyCode)) {\n      updateDisplay(false);\n    }\n    return true;\n  }\n  return false;\n}\n", "public long nextLong ( long least , long bound ) { if ( least >= bound ) throw new IllegalArgumentException ( ) ; return nextLong ( bound - least ) + least ; }", "public java.util.List<TransitGatewayRouteTablePropagation> getTransitGatewayRouteTablePropagations() {\n        if (transitGatewayRouteTablePropagations == null) {\n            transitGatewayRouteTablePropagations = new com.amazonaws.internal.SdkInternalLis", "    protected void stopClassPathListening(int index) {\n        Integer count = starts.get(index);\n        if ( count == null )\n            count = new Integer(0);\n        starts.put(index, count.intValue() - 1);\n    }\n", "@Override public void update(Graphics g){\n  int xh, yh, xm, ym, xs, ys;\n  int s=0, m=10, h=10;\n  String today;\n  currentDate=new Date();\n  formatter.applyPattern(\"s\");\n  try {\n    s=Integer.parseInt(formatter.format(currentDate));\n  }\n catch (  NumberFormatException n) {\n    s=0;\n  }\n  formatter.applyPattern(\"m\");\n  try {\n    m=Integer.parseInt(formatter.format(currentDate));\n  }\n catch (  NumberFormatException n) {\n    m=10;\n  }\n  formatter.applyPattern(\"h\");\n  try {\n    h=Integer.parseInt(formatter.format(currentDate));\n  }\n catch (  NumberFormatException n) {\n    h=10;\n  }\n  xs=(int)(Math.cos(s * Math.PI / 30 - Math.PI / 2) * 45 + xcenter);\n  ys=(int)(Math.sin(s * Math.PI / 30 - Math.PI / 2) * 45 + ycenter);\n  xm=(int)(Math.cos(m * Math.PI / 30 - Math.PI / 2) * 40 + xcenter);\n  ym=(int)(Math.sin(m * Math.PI / 30 - Math.PI / 2) * 40 + ycenter);\n  xh=(int)(Math.cos((h * 30 + m / 2) * Math.PI / 180 - Math.PI / 2) * 30 + xcenter);\n  yh=(int)(Math.sin((h * 30 + m / 2) * Math.PI / 180 - Math.PI / 2) * 30 + ycenter);\n  formatter.applyPattern(\"EEE MMM dd HH:mm:ss yyyy\");\n  today=formatter.format(currentDate);\n  g.setFont(clockFaceFont);\n  g.setColor(getBackground());\n  if (xs != lastxs || ys != lastys) {\n    g.drawLine(xcenter,ycenter,lastxs,lastys);\n    g.drawString(lastdate,5,125);\n  }\n  if (xm != lastxm || ym != lastym) {\n    g.drawLine(xcenter,ycenter - 1,lastxm,lastym);\n    g.drawLine(xcenter - 1,ycenter,lastxm,lastym);\n  }\n  if (xh != lastxh || yh != lastyh) {\n    g.drawLine(xcenter,ycenter - 1,lastxh,lastyh);\n    g.drawLine(xcenter - 1,ycenter,lastxh,lastyh);\n  }\n  g.setColor(numberColor);\n  g.drawString(today,5,125);\n  g.drawLine(xcenter,ycenter,xs,ys);\n  g.setColor(handColor);\n  g.drawLine(xcenter,ycenter - 1,xm,ym);\n  g.drawLine(xcenter - 1,ycenter,xm,ym);\n  g.drawLine(xcenter,ycenter - 1,xh,yh);\n  g.drawLine(xcenter - 1,ycenter,xh,yh);\n  lastxs=xs;\n  lastys=ys;\n  lastxm=xm;\n  lastym=ym;\n  lastxh=xh;\n  lastyh=yh;\n  lastdate=today;\n  currentDate=null;\n}\n", "public static void add ( Review review ) { long restaurantId = Restaurants . idForGlobalId ( review . restaurantId ) ; boolean restaurantExists = restaurantId > NUM_ ; if ( ! restaurantExists ) { restaurantId = Restaurants . add ( review . restaurantId ) ; } if ( restaurantId > NUM_ ) { ContentResolver cr = cr ( ) ; review . localId = ContentUris . parseId ( cr . insert ( Reviews . CONTENT_URI , Reviews . values ( review ) ) ) ; cr . call ( AUTHORITY_URI , CALL_UPDATE_RESTAURANT_RATING , String . valueOf ( restaurantId ) , null ) ; if ( ! restaurantExists ) { RestaurantService . download ( restaurantId ) ; } } }", "public void marshall(XssMatchSet xssMatchSet, ProtocolMarshaller protocolMarshaller) {\n\n        if (xssMatchSet == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(xssMatchSet.getXssMatchSetId(), XSSMATCHSETID_BINDING);\n            protocolMarshaller.marshall(xssMatchSet.getName(), NAME_BINDING);\n            protocolMarshaller.marshall(xssMatchSet.getXssMatchTuples(), XSSMATCHTUPLES_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "    public void setAppProperty(String name, String value) {\n        if (jadProp == null) loadProperties();\n        jadProp.setProperty(name, value);\n    }\n", "private static TungstenProperties logAndReturnProperties ( TungstenProperties props ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( props ) ; } return props ; }", "protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){\n  if (r == null) {\n    r=new SizeRequirements();\n  }\n  float pref=layoutPool.getPreferredSpan(axis);\n  float min=layoutPool.getMinimumSpan(axis);\n  r.minimum=(int)min;\n  r.preferred=Math.max(r.minimum,(int)pref);\n  r.maximum=Integer.MAX_VALUE;\n  r.alignment=0.5f;\n  return r;\n}\n", "protected final void validateIssuer(final Issuer issuer, final SAML2MessageContext context) {\n        if (issuer.getFormat() != null && !issuer.getFormat().equals(NameIDType.ENTITY)) {\n            throw new SAMLIssuerException(\"Issuer type is not entity but \" + issuer.getFormat());\n        }\n\n        final String entityId = context.getSAMLPeerEntityContext().getEntityId();\n        if (entityId == null || !entityId.equals(issuer.getValue())) {\n            throw new SAMLIssuerException(\"Issuer \" + issuer.getValue() + \" does not match idp entityId \" + entityId);\n        }\n    }", "\tpublic Rectangle getDefaultBounds() {\n\t\tif (locOverridden)\n\t\t\treturn new Rectangle(overPoint.x, overPoint.y, fComponent.getWidth(), fComponent.getHeight());\n\t\telse\n\t\t\treturn fComponent.getBounds();\n\t}\n", "protected void normalize(){\n  int newPivotIndex=pivotType.calculate(buffer.length);\n  int newStart=newPivotIndex - pivotType.calculate(size);\n  int newEnd=newStart + size;\n  System.arraycopy(buffer,start,buffer,newStart,size);\n  if (newStart > start) {\n    for (int i=start; i < newStart; i++) {\n      buffer[i]=null;\n    }\n  }\n else {\n    for (int i=Math.max(start,newEnd); i < end; i++) {\n      buffer[i]=null;\n    }\n  }\n  start=newStart;\n  end=newEnd;\n  pivotIndex=newPivotIndex;\n}\n", "public LinkedList<Diff> diff_main(String text1,String text2,boolean checklines){\n  long deadline;\n  if (Diff_Timeout <= 0) {\n    deadline=Long.MAX_VALUE;\n  }\n else {\n    deadline=System.currentTimeMillis() + (long)(Diff_Timeout * 1000);\n  }\n  return diff_main(text1,text2,checklines,deadline);\n}\n", "public int read(char[] cbuf,int off,int len) throws IOException {\n  int num=0;\n  int val;\n  while (num < len) {\n    if ((val=is.read()) < 0) {\n      return (num != 0) ? num : -1;\n    }\nswitch (val & 0xf0) {\ncase 0xc0:\ncase 0xd0:\n      cbuf[off++]=(char)(((val & 0x1f) << 6) | (is.read() & 0x3f));\n    break;\ncase 0xe0:\n  cbuf[off++]=(char)(((val & 0x0f) << 12) | ((is.read() & 0x3f) << 6) | (is.read() & 0x3f));\nbreak;\ncase 0xf0:\nthrow new UnsupportedEncodingException(\"UTF-32 (or UCS-4) encoding not supported.\");\ndefault :\ncbuf[off++]=(char)val;\nbreak;\n}\nnum++;\n}\nreturn num;\n}\n", "private CompletableFuture<LogicalSlot> allocateSharedSlot(\n\t\tSlotRequestId slotRequestId,\n\t\tScheduledUnit scheduledUnit,\n\t\tSlotProfile slotProfile,\n\t\tboolean allowQueuedScheduling,\n\t\tTime allocationTimeout) {\n\t\t// allocate slot with slot sharing\n\t\tfinal SlotSharingManager multiTaskSlotManager = slotSharingManagers.computeIfAbsent(\n\t\t\tscheduledUnit.getSlotSharingGroupId(),\n\t\t\tid -> new SlotSharingManager(\n\t\t\t\tid,\n\t\t\t\tslotPool,\n\t\t\t\tthis));\n\n\t\tfinal SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality;\n\t\ttry {\n\t\t\tif (scheduledUnit.getCoLocationConstraint() != null) {\n\t\t\t\tmultiTaskSlotLocality = allocateCoLocatedMultiTaskSlot(\n\t\t\t\t\tscheduledUnit.getCoLocationConstraint(),\n\t\t\t\t\tmultiTaskSlotManager,\n\t\t\t\t\tslotProfile,\n\t\t\t\t\tallowQueuedScheduling,\n\t\t\t\t\tallocationTimeout);\n\t\t\t} else {\n\t\t\t\tmultiTaskSlotLocality = allocateMultiTaskSlot(\n\t\t\t\t\tscheduledUnit.getJobVertexId(),\n\t\t\t\t\tmultiTaskSlotManager,\n\t\t\t\t\tslotProfile,\n\t\t\t\t\tallowQueuedScheduling,\n\t\t\t\t\tallocationTimeout);\n\t\t\t}\n\t\t} catch (NoResourceAvailableException noResourceException) {\n\t\t\treturn FutureUtils.completedExceptionally(noResourceException);\n\t\t}\n\n\t\t// sanity check\n\t\tPreconditions.checkState(!multiTaskSlotLocality.getMultiTaskSlot().contains(scheduledUnit.getJobVertexId()));\n\n\t\tfinal SlotSharingManager.SingleTaskSlot leaf = multiTaskSlotLocality.getMultiTaskSlot().allocateSingleTaskSlot(\n\t\t\tslotRequestId,\n\t\t\tscheduledUnit.getJobVertexId(),\n\t\t\tmultiTaskSlotLocality.getLocality());\n\t\treturn leaf.getLogicalSlotFuture();\n\t}", "    public boolean isExhaustiveQualifier() {\n        return isExhaustive;\n    }\n", "public static InternalNode<?> createInternalNode(int id, InternalNodeState state, Class<?> clsDataType) throws MIDDException {\n        Class<? extends InternalNode> nodeClsType = getNodeClassType(clsDataType);\n        try {\n            Constructor<? extends InternalNode> constructor  = nodeClsType.getConstructor(int.class, InternalNodeState.class);\n            return constructor.newInstance(id, state);\n        } catch (NoSuchMethodException e) {\n            log.error(\"Cannot find the constructor for the class {}\", clsDataType.getName(), e);\n        } catch (InvocationTargetException | InstantiationException | IllegalAccessException e) {\n            log.error(\"Failed to construct object of type '{}'\", clsDataType.getName(), e);\n        }\n\n        throw new MIDDException(\"Unsupported data type to create internal node of type \" + clsDataType.getName());\n    }", "public int [ ] generateRandomInts ( int length , int cap ) { int [ ] data = new int [ length ] ; for ( int i = NUM_ ; i < length ; i ++ ) { data [ i ] = random . nextInt ( cap ) ; } return data ; }", "  public void setPropertyArray(Object newPropArray) {\n    super.setPropertyArray(newPropArray);\n    m_baseExperiment.setPropertyArray(newPropArray);\n  }\n", "    private void writeXmlDeclaration(Codec charset) throws WBSAXException {\n        try {\n            out.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"\" + \n                    charset.getCharset().getCharsetName() + \"\\\"?>\");\n        } catch (IOException e) {\n            throw new WBSAXException(e);\n        }\n    }\n", "@Override public boolean equals(Object o){\n  if (this == o)   return true;\n  if (o == null || getClass() != o.getClass())   return false;\n  DeterministicKey other=(DeterministicKey)o;\n  return super.equals(other) && Arrays.equals(this.chainCode,other.chainCode) && Objects.equal(this.childNumberPath,other.childNumberPath);\n}\n", "public GenericData(){\n  this(EnumSet.noneOf(Flags.class));\n}\n", "public synchronized void addZoomListener(ZoomListener listener){\n  mZoomListeners.add(listener);\n}\n", "public static void dropTable ( Database db , boolean ifExists ) { String sql = STR_ + ( ifExists ? STR_ : STR_ ) + STR_ ; db . execSQL ( sql ) ; }", "public static Pair<InMemoryJarfile, String> loadAndUpgradeCatalogFromJar(byte[] catalogBytes, boolean isXDCR)\n        throws IOException\n    {\n        // Throws IOException on load failure.\n        InMemoryJarfile jarfile = loadInMemoryJarFile(catalogBytes);\n\n        return loadAndUpgradeCatalogFromJar(jarfile, isXDCR);\n    }", "public void parseVersion( String version )\n    {\n        DefaultVersioning artifactVersion = new DefaultVersioning( version );\n\n        getLog().debug( \"Parsed Version\" );\n        getLog().debug( \"         major: \" + artifactVersion.getMajor() );\n        getLog().debug( \"         minor: \" + artifactVersion.getMinor() );\n        getLog().debug( \"   incremental: \" + artifactVersion.getPatch() );\n        getLog().debug( \"   buildnumber: \" + artifactVersion.getBuildNumber() );\n        getLog().debug( \"     qualifier: \" + artifactVersion.getQualifier() );\n\n        defineVersionProperty( \"majorVersion\", artifactVersion.getMajor() );\n        defineVersionProperty( \"minorVersion\", artifactVersion.getMinor() );\n        defineVersionProperty( \"incrementalVersion\", artifactVersion.getPatch() );\n        defineVersionProperty( \"buildNumber\", artifactVersion.getBuildNumber() );\n\n        defineVersionProperty( \"nextMajorVersion\", artifactVersion.getMajor() + 1 );\n        defineVersionProperty( \"nextMinorVersion\", artifactVersion.getMinor() + 1 );\n        defineVersionProperty( \"nextIncrementalVersion\", artifactVersion.getPatch() + 1 );\n        defineVersionProperty( \"nextBuildNumber\", artifactVersion.getBuildNumber() + 1 );\n\n        defineFormattedVersionProperty( \"majorVersion\", String.format( formatMajor, artifactVersion.getMajor() ) );\n        defineFormattedVersionProperty( \"minorVersion\", String.format( formatMinor, artifactVersion.getMinor() ) );\n        defineFormattedVersionProperty( \"incrementalVersion\", String.format( formatIncremental, artifactVersion.getPatch() ) );\n        defineFormattedVersionProperty( \"buildNumber\", String.format( formatBuildNumber, artifactVersion.getBuildNumber() ));\n\n        defineFormattedVersionProperty( \"nextMajorVersion\", String.format( formatMajor, artifactVersion.getMajor() + 1 ));\n        defineFormattedVersionProperty( \"nextMinorVersion\", String.format( formatMinor, artifactVersion.getMinor() + 1 ));\n        defineFormattedVersionProperty( \"nextIncrementalVersion\", String.format( formatIncremental, artifactVersion.getPatch() + 1 ));\n        defineFormattedVersionProperty( \"nextBuildNumber\", String.format( formatBuildNumber, artifactVersion.getBuildNumber() + 1 ));\n        \n        String osgi = artifactVersion.getAsOSGiVersion();\n\n        String qualifier = artifactVersion.getQualifier();\n        String qualifierQuestion = \"\";\n        if ( qualifier == null )\n        {\n            qualifier = \"\";\n        } else {\n            qualifierQuestion = qualifierPrefix;\n        }\n\n        defineVersionProperty( \"qualifier\", qualifier );\n        defineVersionProperty( \"qualifier?\", qualifierQuestion + qualifier );\n\n        defineVersionProperty( \"osgiVersion\", osgi );\n    }", "   public String logout()   {\n\t\t HttpSession session = (HttpSession)FacesContext.getCurrentInstance().getExternalContext().getSession(false);\n\t\t session.invalidate();\n\treturn \"success\";\n\t   \n   }\n", "public static Collection flatten ( short [ ] self ) { return flatten ( toList ( self ) , new ArrayList ( ) ) ; }", "\tprotected boolean executeAndUpdateState(Operation operation) {\n\n\t\tif (executeNow(operation)) {\n\t\t\tupdateStateVector(operation.getClientId());\n\t\t\thistoryBuffer.add(operation);\n\t\t\toperationcount++;\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\n\t}\n", "private boolean isDefaultClasspath ( IRuntimeClasspathEntry [ ] classpath , ILaunchConfiguration configuration ) { try { ILaunchConfigurationWorkingCopy wc = configuration . getWorkingCopy ( ) ; wc . setAttribute ( IJavaLaunchConfigurationConstants . ATTR_DEFAULT_CLASSPATH , BOOL_ ) ; IRuntimeClasspathEntry [ ] entries = JavaRuntime . computeUnresolvedRuntimeClasspath ( wc ) ; if ( classpath . length == entries . length ) { for ( int i = NUM_ ; i < entries . length ; i ++ ) { IRuntimeClasspathEntry entry = entries [ i ] ; if ( ! entry . equals ( classpath [ i ] ) ) { return BOOL_ ; } } return BOOL_ ; } return BOOL_ ; } catch ( CoreException e ) { return BOOL_ ; } }", "public static void beforeClass ( ) { Assert . assertTrue ( STR_ + specA , new File ( specA ) . exists ( ) ) ; RCPTestSetupHelper . beforeClass ( ) ; }", "private void locateCodebasesRequiredForAnalysis ( IClassPath classPath , IClassPathBuilderProgress progress ) throws InterruptedException , IOException , ResourceNotFoundException { boolean foundJavaLangObject = BOOL_ ; boolean foundFindBugsAnnotations = BOOL_ ; boolean foundJSR305Annotations = BOOL_ ; for ( DiscoveredCodeBase discoveredCodeBase : discoveredCodeBaseList ) { if ( ! foundJavaLangObject ) { foundJavaLangObject = probeCodeBaseForResource ( discoveredCodeBase , STR_ ) ; } if ( ! foundFindBugsAnnotations ) { foundFindBugsAnnotations = probeCodeBaseForResource ( discoveredCodeBase , STR_ ) ; } if ( ! foundJSR305Annotations ) { foundJSR305Annotations = probeCodeBaseForResource ( discoveredCodeBase , STR_ ) ; if ( DEBUG ) { System . out . println ( STR_ + foundJSR305Annotations ) ; } } } if ( ! foundJavaLangObject ) { processWorkList ( classPath , buildSystemCodebaseList ( ) , progress ) ; } if ( runningFindBugsFullJar ( ) ) { processWorkList ( classPath , buildFindBugsFullJarCodebaseList ( ) , progress ) ; return ; } if ( ! foundFindBugsAnnotations ) { processWorkList ( classPath , buildFindBugsAnnotationCodebaseList ( ) , progress ) ; } if ( ! foundJSR305Annotations ) { processWorkList ( classPath , buildJSR305AnnotationsCodebaseList ( ) , progress ) ; } }", "public SafeHtmlBuilder paramElement ( final String name , final String value ) { openElement ( STR_ ) ; setAttribute ( STR_ , name ) ; setAttribute ( STR_ , value ) ; return closeSelf ( ) ; }", "public static void add ( ServerConnector serverConnector ) { int port = - NUM_ ; SslConnectionFactory sslConnectionFactory = ( SslConnectionFactory ) serverConnector . getConnectionFactory ( STR_ ) ; port = serverConnector . getPort ( ) ; if ( sslConnecti", "    public double blue() {\n        return (this.blue);\n    }\n", "public final LocalTransaction getLocalTransaction() throws ResourceException {\n        final boolean isTraceOn = TraceComponent.isAnyTracingEnabled();\n\n        if (isTraceOn && tc.isEntryEnabled())\n            Tr.entry(this, tc, \"getLocalTransaction\"); \n\n        localTran = localTran == null ?\n                        new WSRdbSpiLocalTransactionImpl(this, sqlConn) :\n                        localTran;\n\n        if (isTraceOn && tc.isEntryEnabled())\n            Tr.exit(this, tc, \"getLocalTransaction\", localTran); \n        return localTran;\n    }", "public void removeModifyListener(ModifyListener listener){\n  checkWidget();\n  if (listener == null) {\n    SWT.error(SWT.ERROR_NULL_ARGUMENT);\n  }\n  removeListener(SWT.Modify,listener);\n}\n", "private String getPropertyPath(Expression reference, String alias) {\n        if (reference instanceof Property) {\n            Property property = (Property)reference;\n            if (alias.equals(property.getScope())) {\n                return property.getPath();\n            }\n            else if (property.getSource() != null) {\n                String subPath = getPropertyPath(property.getSource(), alias);\n                if (subPath != null) {\n                    return String.format(\"%s.%s\", subPath, property.getPath());\n                }\n            }\n        }\n\n        return null;\n    }", "public void updateType ( final BaseType baseType , final String name , final int size , final boolean isSigned ) throws CouldntSaveDataException ;", "public void addFillAlpha ( float a ) { addCommand ( new PDFFillAlphaCmd ( a ) ) ; }", "public static boolean amFetcher(){\n  return isFetcher(Thread.currentThread());\n}\n", "\tprotected void addCategoriesPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_ConstraintDescription_categories_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_ConstraintDescription_categories_feature\", \"_UI_ConstraintDescription_type\"),\n\t\t\t\t ConstraintPackage.Literals.CONSTRAINT_DESCRIPTION__CATEGORIES,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t true,\n\t\t\t\t null,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "\tpublic boolean isColumnEditable(int col, Object originalValue) {\n\t\treturn false;\n\t}\n", "public static String cleanLeadingAndTrailingNewLineAndChars(String input){\n  if (!StringUtils.hasText(input)) {\n    return input;\n  }\n  String output=input;\n  output=output.replaceAll(\"[\\\\s]+\\\\*[\\\\s]+\",\" \");\n  while (output.startsWith(\"/\") || output.startsWith(\"\\n\") || output.startsWith(\"*\")|| output.startsWith(\"-\")|| output.startsWith(\"\\t\")|| output.startsWith(\" \")|| output.startsWith(\"\\\\\")) {\n    output=output.substring(1);\n  }\n  while (output.endsWith(\"/\") || output.endsWith(\"\\n\") || output.endsWith(\" \")|| output.endsWith(\",\")|| output.endsWith(\"\\t\")|| output.endsWith(\"-\")|| output.endsWith(\"*\")) {\n    output=output.substring(0,output.length() - 1);\n  }\n  return output;\n}\n", "private Rect calcBounds(int index,Paint paint){\n  Rect bounds=new Rect();\n  CharSequence title=getTitle(index);\n  bounds.right=(int)paint.measureText(title,0,title.length());\n  bounds.bottom=(int)(paint.descent() - paint.ascent());\n  return bounds;\n}\n", "public void flattenSymbolTable(boolean flattenAllTables){\n  if (!flattenAllTables) {\n    List<Symbol> newSymbols=new ArrayList<Symbol>();\n    if (this.symbolTable != null) {\n      for (int i=0; i < symbols.size(); i++) {\n        Symbol symbol=symbols.get(i);\n        if (symbol.getContainingTable() == this) {\n          newSymbols.add(symbol);\n        }\n      }\n    }\n    symbols=newSymbols;\n  }\n  variableNames=new String[symbols.size()];\n  isConsts=new boolean[symbols.size()];\n  for (int i=0; i < symbols.size(); i++) {\n    Symbol symbol=symbols.get(i);\n    variableNames[i]=symbol.getName();\n    isConsts[i]=symbol.getDeclType() == Token.CONST;\n    symbol.setIndex(i);\n  }\n}\n", "   public void more(String message) {\n       System.out.println(tab+message);\n   }\n", "    protected DelegatingCommandStack getDelegatingCommandStack() {\n        if (null == m_delegatingCommandStack) {\n        \tm_delegatingCommandStack = new DelegatingCommandStack();\n            if (null != getCurrentPage()) {\n            \tm_delegatingCommandStack.setCurrentCommandStack(\n            \t\t\tgetCurrentPage().getCommandStack());\n            }\n        }\n\n        return(m_delegatingCommandStack);\n    }\n", "public static TextNode valueOf(String v){\n  if (v == null) {\n    return null;\n  }\n  if (v.length() == 0) {\n    return EMPTY_STRING_NODE;\n  }\n  return new TextNode(v);\n}\n", "public static boolean applyCount ( Context context , int badgeCount ) { try { applyCountOrThrow ( context , badgeCount ) ; return BOOL_ ; } catch ( ShortcutBadgeException e ) { Log . e ( LOG_TAG , STR_ , e ) ; return BOOL_ ; } }", "public StatelessScrollableDataIterator ( String entityName , SessionFactory sessionFactory , int fetchSize , boolean performOrderById ) { super ( entityName , sessionFactory , fetchSize , performOrderById ) ; }", "public Map<String, Object> buildConsumerProperties() {\n\t\tMap<String, Object> properties = buildCommonProperties();\n\t\tproperties.putAll(this.consumer.buildProperties());\n\t\treturn properties;\n\t}", "protected void createBundleFile(HttpServlet servlet,\n\t\t\tMockServletResponse response, MockServletRequest request,\n\t\t\tString path, File destFile, String mapping) throws IOException,\n\t\t\tServletException {\n\n\t\trequest.setRequestPath(mapping, path);\n\n\t\t// Create the parent directory of the destination file\n\t\tif (!destFile.getParentFile().exists()) {\n\t\t\tboolean dirsCreated = destFile.getParentFile().mkdirs();\n\t\t\tif (!dirsCreated) {\n\t\t\t\tthrow new IOException(\"The directory '\"\n\t\t\t\t\t\t+ destFile.getParentFile().getCanonicalPath()\n\t\t\t\t\t\t+ \"' can't be created.\");\n\t\t\t}\n\t\t}\n\n\t\t// Set the response mock to write in the destination file\n\t\ttry {\n\t\t\tresponse.setOutputStream(new FileOutputStream(destFile));\n\t\t\tservlet.service(request, response);\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\n\t\tif (destFile.length() == 0) {\n\t\t\tlogger.warn(\"No content retrieved for file '\"\n\t\t\t\t\t+ destFile.getAbsolutePath()\n\t\t\t\t\t+ \"', which is associated to the path : \" + path);\n\t\t\tSystem.out.println(\"No content retrieved for file '\"\n\t\t\t\t\t+ destFile.getAbsolutePath()\n\t\t\t\t\t+ \"', which is associated to the path : \" + path);\n\t\t}\n\t}", "  public Object parse(String value) throws PObjSyntaxException {\n    final ObjectRef ref = new ObjectRef();\n\n    if (labelToValue(value, ref))\n      return ref.get();\n\n    checkSyntax(value);\n\n    return parseNative(value);\n  }\n", "public boolean isHidden(final FieldDescription pQcField) {\n\t\tfinal boolean isHidden = !pQcField.isVisible();\n\t\tfinal MappedField mappedPrioraty2 = getMappedPrioraty();\n\t\tfinal FieldNameEnum fieldEnum = mappedPrioraty2.getFieldEnum();\n\t\tfinal boolean isPr", "\tpublic boolean isGenericCare() {\n\t\treturn (this == CARE);\n\t}\n", "@Deprecated\n    public static int matchAfter(CharSequence a, CharSequence b, int aIndex, int bIndex) {\n        int i = aIndex, j = bIndex;\n        int alen = a.length();\n        int blen = b.length();\n        for (; i < alen && j < blen; ++i, ++j) {\n            char ca = a.charAt(i);\n            char cb = b.charAt(j);\n            if (ca != cb) {\n                break;\n            }\n        }\n        // if we failed a match make sure that we didn't match half a character\n        int result = i - aIndex;\n        if (result != 0 && !onCharacterBoundary(a, i) && !onCharacterBoundary(b, j)) {\n            --result; // backup\n        }\n        return result;\n    }", "    private void printCoverageTable() {\n        printTableHeader(\"loc\", \"nloc\", \"statements\", \"coverage\");\n        printDetail(info, true);\n        for (Info child : info.getChildInfosSortedByCoverage()) {\n            printDetail(child, false);\n        }\n        printTableFooter();\n    }\n", "  public void setOrientation(Rotf orientation) {\n    this.orientation.set(orientation);\n    viewDirty = true;\n  }\n", "   public boolean issue(Contract<T> contract) throws LeaseException {\n      if(dead) {\n         throw new LeaseException(\"Lease can not be issued\");\n      }\n      return queue.offer(contract);\n   }\n", "\tpublic int getSelectTc() {\n\t\tint nTcRow = tblTc.getSelectedRow();\n\t\treturn nTcRow;\n\t}\n", "public long readLong() throws IOException {\n  return dis.readLong();\n}\n", "   public void removeWindow(ChildFrame frame) {\n      windows.remove(frame);\n      windowListChanged();\n   }\n", "private static Timestamp createWithCarry(long seconds, long nanos) {\r\n        if (nanos > 999999999) {\r\n            seconds = seconds + nanos / 1000000000;\r\n            nanos = nanos % 1000000000;\r\n        }\r\n\r\n        if (nanos < 0) {\r\n            long pastSec = nanos / 1000000000;\r\n            pastSec--;\r\n            seconds += pastSec;\r\n            nanos -= pastSec * 1000000000;\r\n        }\r\n\r\n        return new Timestamp(seconds, (int) nanos);\r\n    }", "boolean isElementVisible ( By by ) ;", "\tpublic DeliveryOrder (java.lang.Integer id) {\n\t\tsuper(id);\n\t}\n", "protected boolean isTemporaryDestination ( ) { boolean result = BOOL_ ; if ( m_TopicName . startsWith ( TEMP_TOPIC_PREFIX ) ) { result = BOOL_ ; } return result ; }", "public abstract boolean isReadOnly ( ) ;", "public static float convertDpToPixel ( float dp , Context context ) { Resources resources = context . getResources ( ) ; DisplayMetrics metrics = resources . getDisplayMetrics ( ) ; float px = dp * ( ( float ) metrics . densityDpi / DisplayMetrics . DENSITY_DEFAULT ) ; return px ; }", "private void validateRemovalOfPublicNetworkInterface(String instanceId,int desiredNetworkInterfaceStateCount) throws Throwable {\n  if (this.isAwsClientMock) {\n    return;\n  }\n  ComputeState stoppedComputeState=getComputeByAWSId(this.host,instanceId);\n  assertNotNull(stoppedComputeState);\n  for (  String networkLink : stoppedComputeState.networkInterfaceLinks) {\n    assertFalse(networkLink.contains(PUBLIC_INTERFACE));\n  }\n  validateNetworkInterfaceCount(desiredNetworkInterfaceStateCount);\n}\n", "public void removeMouseHandlers() {\n\n        Iterator<HandlerRegistration> it = m_handlerRegistrations.iterator();\n        while (it.hasNext()) {\n            it.next().removeHandler();\n        }\n        m_handlerRegistrations.clear();\n    }", "  public void setSize( int width, int height ) {\n    this.width = width;\n    this.height = height;\n    setAspectRatio( width/(float)height );\n    createCellPanels();\n  }\n", "public void noteMissing(String key){\n  if (missingHyphenationTrees == null) {\n    missingHyphenationTrees=new HashSet<>();\n  }\n  missingHyphenationTrees.add(key);\n}\n", "public TransactionWrapper getTransactionWrapper(Transaction t) {\n    \tif (t == null) {\n    \t\treturn null;\n    \t}\n    \tfinal TransactionWrapperAppData twad = (TransactionWrapperAppData) t.getApplicationData();\n    \treturn twad != null ? twad.getTransactionWrapper(t, this) : null;\n\t}", "public Builder reconnectionDelay ( Duration duration ) { this . reconnectionDelay = duration ; return this ; }", "protected void broadcastFrequencyErrorChange ( ) throws SourceException { broadcastFrequencyChangeEvent ( new FrequencyChangeEvent ( Event . NOTIFICATION_FREQUENCY_CORRECTION_CHANGE , mFrequencyCorrection ) ) ; }", "public boolean keyMatch(String lookupKey) {\n\t\tif (key.isEmpty()) {\n\t\t\treturn technicalName.contains(lookupKey);\n\t\t}\n\t\telse {\n\t\t\treturn key.contains(lookupKey);\n\t\t}\n\t}", "public static void setSpinnerDraggingEnabled(\r\n        final JSpinner spinner, boolean enabled)\r\n    {\r\n        SpinnerModel spinnerModel = spinner.getModel();\r\n        if (!(spinnerModel instanceof SpinnerNumberModel))\r\n        {\r\n            throw new IllegalArgumentException(\r\n                \"Dragging is only possible for spinners with a \" +\r\n                \"SpinnerNumberModel, found \"+spinnerModel.getClass());\r\n        }\r\n        \r\n        if (enabled)\r\n        {\r\n            disableSpinnerDragging(spinner);\r\n            enableSpinnerDragging(spinner);\r\n        }\r\n        else\r\n        {\r\n            disableSpinnerDragging(spinner);\r\n        }\r\n    }", "public static List<Audit> findByMessage(EntityManager em,String message){\n  requireArgument(em != null,\"Entity manager cannot be null.\");\n  requireArgument(message != null && !message.isEmpty(),\"Message cannot be null or empty.\");\n  TypedQuery<Audit> query=em.createNamedQuery(\"Audit.findByMessage\",Audit.class);\n  try {\n    query.setParameter(\"message\",\"%\" + message + \"%\");\n    return query.getResultList();\n  }\n catch (  Exception ex) {\n    return new ArrayList<Audit>(0);\n  }\n}\n", "\tpublic float getX() {\n\t\t//Because of all the orientations, getting the top-left for a line is tricky.\n\t\tif(bounds instanceof Line) {\n\t\t\tLine l = (Line)bounds;\n\t\t\treturn body.getX() + Math.min(l.getX1(), l.getX2());\n\t\t} else return body.getX() - getWidth() / 2;\n\t}\n", "public Object parse(URL url){\n  return parseURL(url,null);\n}\n", "    public boolean isEmpty() {\n        return adaptee.isEmpty();\n    }\n", "Collection<BindingStrategy> collectFromAggregates(Collection<Class<? extends AggregateRoot>> aggregateClasses) {\n        Collection<BindingStrategy> bindingStrategies = new ArrayList<>();\n        Map<Type[], Key<?>> allGenerics = new HashMap<>();\n\n        for (Class<? extends AggregateRoot<?>> aggregateClass : BusinessUtils.includeSuperClasses(aggregateClasses)) {\n            Type[] generics = getTypes(aggregateClass);\n            TypeLiteral<?> genericInterface = TypeLiteral.get(newParameterizedType(Repository.class, generics));\n            allGenerics.put(generics, resolveDefaultQualifier(\n                    bindings,\n                    application.getConfiguration(aggregateClass),\n                    DEFAULT_REPOSITORY_KEY,\n                    aggregateClass,\n                    genericInterface\n                    ).orElse(null)\n            );\n        }\n\n        // Create a binding strategy for each default repository implementation\n        for (Class<? extends Repository> defaultRepoImpl : defaultRepositoryImplementations) {\n            bindingStrategies.add(new GenericBindingStrategy<>(\n                    Repository.class,\n                    defaultRepoImpl,\n                    allGenerics)\n            );\n        }\n\n        return bindingStrategies;\n    }", "public static TelegramBot login(String authToken){\n  try {\n    HttpRequestWithBody request=Unirest.post(API_URL + \"bot\" + authToken+ \"/getMe\");\n    HttpResponse<String> response=request.asString();\n    JSONObject jsonResponse=Utils.processResponse(response);\n    if (jsonResponse != null && Utils.checkResponseStatus(jsonResponse)) {\n      JSONObject result=jsonResponse.getJSONObject(\"result\");\n      return new TelegramBot(authToken,result.getInt(\"id\"),result.getString(\"first_name\"),result.getString(\"username\"));\n    }\n  }\n catch (  UnirestException e) {\n    e.printStackTrace();\n  }\n  return null;\n}\n", "public Observable<Page<DscNodeInner>> listByAutomationAccountNextAsync(final String nextPageLink) {\n        return listByAutomationAccountNextWithServiceResponseAsync(nextPageLink)\n            .map(new Func1<ServiceResponse<Page<DscNodeInner>>, Page<DscNodeInner>>() {\n                @Override\n                public Page<DscNodeInner> call(ServiceResponse<Page<DscNodeInner>> response) {\n                    return response.body();\n                }\n            });\n    }", "protected boolean noMoreCharacters ( ) throws IOException { if ( avail == NUM_ ) { avail = is . read ( buffer ) ; if ( avail <= NUM_ ) { avail = NUM_ ; return BOOL_ ; } pos = NUM_ ; } return BOOL_ ; }", "    public void setWalking(boolean w) {\n\tdg.toggle(w);\n\tdg.fill(dcp.getDirection());\n    }\n", "public int upper_y_value(int p_x){\n  int result=Math.min(oct_uy,p_x - oct_ulx);\n  return Math.min(result,oct_urx - p_x);\n}\n", "public abstract GPathResult find ( Closure closure ) ;", "public boolean compile(String[] args){\n  long startTime=System.currentTimeMillis();\n  long batchID;\nsynchronized (batchCountLock) {\n    batchID=batchCount++;\n  }\n  Batch batch=parseArgs(args);\n  if (batch == null) {\n    return false;\n  }\n  boolean status;\n  try {\n    batchTable.put(batchID,batch);\n    status=invokeJavadoc(batch,batchID);\n  }\n  finally {\n    batchTable.remove(batchID);\n  }\n  if (batch.verbose) {\n    long deltaTime=System.currentTimeMillis() - startTime;\n    output(Resources.getText(\"rmic.done_in\",Long.toString(deltaTime)));\n  }\n  return status;\n}\n", "\tpublic void setSize(int x, int y, int height) {\n\t\tthis.posX = x;\n\t\t\n\t\tlabel.setHeight(\"\"+height);\n\t\tlabel.setHeight(\"\"+height);\n\t\tpanel.setWidth(\"\"+labelSize);\n\t\tpanel.setWidth(\"\"+labelSize);\n\t}\n", "public static void basicExample002() throws Exception {\n\n        final SipRequest invite = SipRequest.invite(\"sip:alice@aboutsip.com\")\n                .withFromHeader(\"sip:bob@pkts.io\")\n                .build();\n\n        System.out.println(invite);\n    }", "public static AddOnResultDeleter deleter(final String pathAccountSid, \n                                             final String pathReferenceSid, \n                                             final String pathSid) {\n        return new AddOnResultDeleter(pathAccountSid, pathReferenceSid, pathSid);\n    }", "    public boolean addMessage(Message m) {\n        return addMessage(m, false);\n    }\n", "public void addProperty(final FedoraResource resource,\n                            final org.apache.jena.rdf.model.Property predicate,\n                            final RDFNode value,\n                            final Map<String, String> namespaces,\n                            final boolean allowRelaxedProperties) throws RepositoryException {\n\n        final Node node = getJcrNode(resource);\n\n        if ((!allowRelaxedProperties && isManagedPredicate.test(predicate)) || jcrProperties.contains(predicate)) {\n\n            throw new ServerManagedPropertyException(\"Could not persist triple containing predicate \"\n                    + predicate.toString()\n                    + \" to node \"\n                    + node.getPath());\n        }\n\n        String propertyName =\n                getPropertyNameFromPredicate(node, predicate, namespaces);\n\n        // In earlier versions of Fedora the following JCR properties were\n        // used for properties.  When the behavior changed such that they could\n        // be set explicitly in some cases, we changed the underlying representation\n        // such that the \"fedora\"-namespaced property could be set, and when present\n        // would be presented instead of the underlying JCR-managed property.\n        if (propertyName.equals(JCR_LASTMODIFIEDBY)) {\n            propertyName = FEDORA_LASTMODIFIEDBY;\n        } else if (propertyName.equals(JCR_LASTMODIFIED)) {\n            propertyName = FEDORA_LASTMODIFIED;\n        } else if (propertyName.equals(JCR_CREATEDBY)) {\n            propertyName = FEDORA_CREATEDBY;\n        } else if (propertyName.equals(JCR_CREATED)) {\n            propertyName = FEDORA_CREATED;\n        }\n\n        if (value.isURIResource()\n                && idTranslator.inDomain(value.asResource())\n                && !isReferenceProperty(node, propertyName)) {\n            nodePropertiesTools.addReferencePlaceholders(idTranslator, node, propertyName, value.asResource());\n        } else {\n            final Value v = createValue(node, value, propertyName);\n            nodePropertiesTools.appendOrReplaceNodeProperty(node, propertyName, v);\n        }\n    }", "\tprivate void alert(CharSequence msg) {\n\t\tnew AlertDialog.Builder(this).setIcon(R.drawable.icon).setTitle(msg)\n\t\t\t\t.setPositiveButton(R.string.sure_cn,\n\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\tpublic void onClick(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\tint whichButton) {\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}).setCancelable(true).setMessage(\"Hey\").show();\n\t}\n", "public byte[] signDataWithPrivateKey(byte[] data) throws UnrecoverableKeyException,\n                                                     KeyStoreException,\n                                                     NoSuchAlgorithmException,\n                                                     InvalidKeyException,\n                                                     SignatureException {\n        if( pvtKeyStore == null ) {\n            throw new RuntimeException( \"Key store with private key not configured. Please configure it properly before using signed serialization.\" );\n        }\n        PrivateKey pvtkey = (PrivateKey) pvtKeyStore.getKey( pvtKeyAlias,\n                                                             pvtKeyPassword );\n        Signature sig = Signature.getInstance( \"MD5withRSA\" );\n        sig.initSign( pvtkey );\n        sig.update( data );\n        return sig.sign();\n    }", "boolean leftOf(double[] a,double[] b,double[] d){\n  final double bax=b[0] - a[0], bay=b[1] - a[1];\n  final double dax=d[0] - a[0], day=d[1] - a[1];\n  final double cross=bax * day - bay * dax;\n  return cross > 1e-10 * Math.max(Math.max(bax,bay),Math.max(da", "public static String replace(String inString,String oldPattern,String newPattern){\n  if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {\n    return inString;\n  }\n  StringBuilder sb=new StringBuilder();\n  int pos=0;\n  int index=inSt", "default <T>void forEachMatchingFieldNameWithString(String regex,BiConsumer<String,String> function){\n  forEachMatchingFieldNameWithString(Pattern.compile(regex),1,function);\n}\n", "\tprivate void estimateLastIndex() {\n\t\tthis.lastIndex = this.iff.getChild(this.scanIndexVar).getArray()\n\t\t        .getShape()[0];\n\t}\n", "public QueryData viewDefData ( ) { return qryData ; }", "private Boolean readOptionalBoolean(JSONObject json, String key) {\n\n        try {\n            return Boolean.valueOf(json.getBoolean(key));\n        } catch (JSONException e) {\n            LOG.debug(\"Reading optional JSON boolean failed. Default to provided default value.\", e);\n        }\n        return null;\n    }", "  public void deleteAttributeAt(int columnIndex) {\n    ((ArffTableModel) getModel()).deleteAttributeAt(columnIndex);\n  }\n", "public static String getStringFromJSONPath(JSONObject record, String path) {\n        final Object object = getObjectFromJSONPath(record, path);\n        return object == null ? null : object.toString();\n    }", "private static void updateNetwork ( WifiManager wifiManager , WifiConfiguration config ) { Integer foundNetworkID = findNetworkInExistingConfig ( wifiManager , config . SSID ) ; if ( foundNetworkID != null ) { Log . i ( TAG , STR_ + config . SSID ) ; wifi", "\tprotected String sqlDelete() {\n\t\tString sql = \"DELETE FROM T_INQUIRY_JAVA WHERE INQUIRY_TYPE=? AND CLASS_NAME=? \";\n\n\t\t//super.logSqlQuery(sql);\n\t\treturn sql;\n\t}\n", "public static Set<String> scanClassPath(final String classPath, final Set<String> excludeJarSet, final Set<String> excludePrefixes, final Set<String> includePrefixes) {\n        final Set<String> pathSet = new HashSet<String>();\n        // Defer to JDKPath", "public void writeChar ( byte c ) throws IOException { this . write ( c ) ; }", "@Nonnull\n  public static Pattern string2pattern(@Nonnull final String text, final int patternFlags) {\n    final StringBuilder result = new StringBuilder();\n\n    for (final char c : text.toCharArray()) {\n      result.append(\"\\\\u\"); //NOI18N\n      final String code = Integer.toHexString(c).toUpperCase(Locale.ENGLISH);\n      result.append(\"0000\", 0, 4 - code.length()).append(code); //NOI18N\n    }\n\n    return Pattern.compile(result.toString(), patternFlags);\n  }", "public static URI toURI(final File file) {\n        if (file == null) {\n            return null;\n        }\n        if (file.isAbsolute()) {\n            return file.toURI();\n        } else {\n            try {\n                return new URI(clean(file.getPath().replace(WINDOWS_SEPARATOR, URI_SEPARATOR).trim(), false));\n            } catch (final URISyntaxException e) {\n                throw new IllegalArgumentException(e.getMessage(), e);\n            }\n        }\n    }", "public void setImage(final Image img) {\n\t\timage = getScaledImage(img);\n\t\tstateChanged(null);\n\t}", "private void initialise() {\n    try {\n      addTrafficSource();\n      addTrafficLayers();\n    } catch (Exception exception) {\n      Timber.e(exception, \"Unable to attach Traffic to current style: \");\n    } catch (UnsatisfiedLinkError error) {\n      Timber.e(error, \"Unable to load native libraries: \");\n    }\n  }", "public static double [ ] [ ] identityMatrix ( int size ) { double [ ] [ ] I = new double [ size ] [ size ] ; for ( int r = NUM_ ; r < size ; r ++ ) { I [ r ] [ r ] = NUM_ ; } return I ; }", "public Object remove(Object key){\n  key=convertKey(key);\n  int hashCode=hash(key);\n  int index=hashIndex(hashCode,data.length);\n  HashEntry entry=data[index];\n  HashEntry previous=null;\n  while (entry != null) {\n    if (entry.hashCode == hashCode && isEqualKey(key,entry.key)) {\n      Object oldValue=entry.getValue();\n      removeMapping(entry,index,previous);\n      return oldValue;\n    }\n    previous=entry;\n    entry=entry.next;\n  }\n  return null;\n}\n", "public static void deleteTable ( final CConnection connection , final String table ) throws SQLException { connection . executeUpdate ( STR_ + table + STR_ , BOOL_ ) ; }", "    protected void processKeyEvent(KeyEvent e) {\n        KeyListener listener = keyListener;\n        if (listener != null) {\n            int id = e.getID();\n            switch(id) {\n              case KeyEvent.KEY_TYPED:\n                  listener.keyTyped(e);\n                  break;\n              case KeyEvent.KEY_PRESSED:\n                  listener.keyPressed(e);\n                  break;\n              case KeyEvent.KEY_RELEASED:\n                  listener.keyReleased(e);\n                  break;\n            }\n        }\n    }\n", "public void add(HttpFields fields)\n    {\n        if (fields==null)\n            return;\n\n        Enumeration enm = fields.getFieldNames();\n        while( enm.hasMoreElements() )\n        {\n            String name = (String)enm.nextElement();\n            Enumeration values = fields.getValues(name);\n            while(values.hasMoreElements())\n                add(name,(String)values.nextElement());\n        }\n    }", "@SuppressWarnings(\"unchecked\")\n    private <T> ParameterConverter<T> getConverter(Class<T> type) {\n        // check for String first\n        if (type == String.class) {\n            return (ParameterConverter<T>) StringConverter.INSTANCE;\n        }\n\n        // Search for exposed converters.\n        for (ParameterConverter pc : converters) {\n            //noinspection EqualsBetweenInconvertibleTypes\n            if (pc.getType().equals(type)) { //NOSONAR\n                return pc;\n            }\n        }\n\n        // Boolean has a special case as they support other form of \"truth\" such as \"yes\", \"on\", \"1\"...\n        if (type == Boolean.class) {\n            return (ParameterConverter<T>) BooleanConverter.INSTANCE;\n        }\n\n        // None of them are there, try default converters in the following order:\n        // 1. constructor\n        // 2. valueOf\n        // 3. from\n        // 4. fromString\n        ParameterConverter<T> converter = ConstructorBasedConverter.getIfEligible(type);\n        if (converter != null) {\n            return converter;\n        }\n        converter = ValueOfBasedConverter.getIfEligible(type);\n        if (converter != null) {\n            return converter;\n        }\n        converter = FromBasedConverter.getIfEligible(type);\n        if (converter != null) {\n            return converter;\n        }\n        converter = FromStringBasedConverter.getIfEligible(type);\n        if (converter != null) {\n            return converter;\n        }\n\n        // Unlike other primitive type, characters cannot be created using the 'valueOf' method,\n        // so we need a specific converter. As creating characters is quite rare, this must be the last check.\n        if (type == Character.class) {\n            return (ParameterConverter<T>) CharacterConverter.INSTANCE;\n        }\n\n        // running out of converters...\n        throw new NoSuchElementException(\"Cannot find a converter able to create instance of \" + type.getName());\n    }", "    protected void navLinkTree() {\n        navCellStart();\n        printHyperLink(\"package-tree.html\", \"\", configuration.getText(\"doclet.Tree\"),\n                       true, \"NavBarFont1\");\n        navCellEnd();\n    }\n", "public void recordVolumeOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,Object... extParam){\n  try {\n    boolean opStatus=(Operation.Status.ready == status) ? true : false;\n    String evType;\n    evType=opType.getEvType(opStatus);\n    String evDesc=opType.getDescription();\n    String opStage=AuditLogManager.AUDITOP_END;\n    _logger.info(\"opType: {} detail: {}\",opType.toString(),evType.toString() + ':' + evDesc);\n    URI uri=(URI)extParam[0];\n    recordBourneVolumeEvent(dbClient,evType,status,evDesc,uri);\n    String id=uri.toString();\n    AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,id);\n  }\n catch (  Exception e) {\n    _logger.error(\"Failed to record volume operation {}, err:\",opType.toString(),e);\n  }\n}\n", "public Statement desc(){\n  statement.append(\" DESC\");\n  return this;\n}", "public long convertUTMToGeodetic(long Zone,String Hemisphere,double Easting,double Northing){\n  long Error_Code=UTM_NO_ERROR;\n  double Origin_Latitude=0;\n  double False_Easting=500000;\n  double False_Northing=0;\n  double Scale=0.9996;\n  if ((Zone < 1) || (Zone > 60))   Error_Code|=UTM_ZONE_ERROR;\n  if (!Hemisphere.equals(AVKey.SOUTH) && !Hemisphere.equals(AVKey.NORTH))   Error_Code|=UTM_HEMISPHERE_ERROR;\n  if ((Northing < MIN_NORTHING) || (Northing > MAX_NORTHING))   Error_Code|=UTM_NORTHING_ERROR;\n  if (Error_Code == UTM_NO_ERROR) {\n    if (Zone >= 31)     Central_Meridian=((6 * Zone - 183) * PI / 180.0);\n else     Central_Meridian=((6 * Zone + 177) * PI / 180.0);\n    if (Hemisphere.equals(AVKey.SOUTH))     False_Northing=10000000;\n    try {\n      TMCoord TM=TMCoord.fromTM(Easting,Northing,Angle.fromRadians(Origin_Latitude),Angle.fromRadians(Central_Meridian),False_Easting,False_Northing,Scale);\n      Latitude=TM.getLatitude().radians;\n      Longitude=TM.getLongitude().radians;\n      if ((Latitude < MIN_LAT) || (Latitude > MAX_LAT)) {\n        Error_Code|=UTM_NORTHING_ERROR;\n      }\n    }\n catch (    Exception e) {\n      Error_Code=UTM_TM_ERROR;\n    }\n  }\n  return (Error_Code);\n}\n", "    public void setPhase3Skip(boolean doSkip) {\n        set(\"phase3_skip\", doSkip);\n    }\n", "private void calculatePropertyRestrictions() {\n        if (restrictedProperties == null) {\n            return;\n        }\n        // we use aliases for ordering, so we need the property in the select clause\n        for (org.javatuples.Pair<Traversal.Admin<?, ?>, Comparator<?>> comparator : this.getDbComparators()) {\n\n            if (comparator.getValue1() instanceof ElementValueComparator) {\n                restrictedProperties.add(((ElementValueComparator<?>) comparator.getValue1()).getPropertyKey());\n\n            } else if ((comparator.getValue0() instanceof ElementValueTraversal<?> || comparator.getValue0() instanceof TokenTraversal<?, ?>)\n                    && comparator.getValue1() instanceof Order) {\n                Traversal.Admin<?, ?> t = comparator.getValue0();\n                String key;\n                if (t instanceof ElementValueTraversal) {\n                    ElementValueTraversal<?> elementValueTraversal = (ElementValueTraversal<?>) t;\n                    key = elementValueTraversal.getPropertyKey();\n                } else {\n                    TokenTraversal<?, ?> tokenTraversal = (TokenTraversal<?, ?>) t;\n                    // see calculateLabeledAliasId\n                    if (tokenTraversal.getToken().equals(T.id)) {\n                        key = Topology.ID;\n                    } else {\n                        key = tokenTraversal.getToken().getAccessor();\n                    }\n                }\n                if (key != null) {\n                    restrictedProperties.add(key);\n                }\n            }\n        }\n    }", "\tpublic void undo() {\n\t\tif (!undoAllowed) {\n\t\t\tHistoryManagerImpl.log\n\t\t\t\t\t.warn(\"Request ignored - there is nothing to undo.\"); //$NON-NLS-1$\n\n\t\t\treturn;\n\t\t} else {\n\t\t\tif (currentSlice.isEmpty()) {\n\t\t\t\tcurrentSlice = undo.pop();\n\n\t\t\t\tcurrentSlice.revert();\n\t\t\t\tredo.push(currentSlice);\n\n\t\t\t\tundoState(!undo.isEmpty());\n\t\t\t\tredoState(true);\n\n\t\t\t\tcurrentSlice = new HistorySlice();\n\t\t\t} else {\n\t\t\t\tcloseSlice();\n\t\t\t\tundo();\n\t\t\t}\n\t\t}\n\t}\n", "public static ViewDragHelper create ( ViewGroup forParent , Callback cb ) { return new ViewDragHelper ( forParent . getContext ( ) , forParent , cb ) ; }", "public final List<SIDestinationAddress> getForwardRoutingPath() {\n        List<String> fNames = (List<String>) getHdr2().getField(JsHdr2Access.FORWARDROUTINGPATH_DESTINATIONNAME);\n        List<byte[]> fMEs = (List<byte[]>) getHdr2().getField(JsHdr2Access.FORWARDROUTINGPATH_MEID);\n        byte[] fLos = (byte[]) getHdr2().getField(JsHdr2Access.FORWARDROUTINGPATHLOCALONLY);\n        List<String> fBuses = (List<String>) getHdr2().getField(JsHdr2Access.FORWARDROUTINGPATH_BUSNAME);\n        return new RoutingPathList(fNames, fLos, fMEs, fBuses);\n    }", "    protected void unchunk(final String chunk, Writer output) throws IOException, UnsupportedOperationException {\n        String message = \"Interchunk.unchunk should never be called. Instead this should only be called from \" +\n            \"a Postchunk object, and instead should run Postchunk.unchunk.\";\n        throw new UnsupportedOperationException(message);\n    }\n", "public boolean isStatusBarTintEnabled ( ) { return mStatusBarTintEnabled ; }", "private void signalAll(){\n  lock.lock();\n  try {\n    isDone=true;\n    done.signalAll();\n  }\n  finally {\n    lock.unlock();\n  }\n}\n", "public static double[] get2DDimension(IAtomContainer atomCon) {\n        double[] minmax = getMinMax(atomCon);\n        double maxX = minmax[2];\n        double maxY = minmax[3];\n        double minX = minmax[0];\n        double minY = minmax[1];\n        return new double[]{maxX - minX, maxY - minY};\n    }", "private static void analyzeNewStringSetContainsOldStringSetValues(StringSet a,StringSet b,String name,HashMap<String,Change> changes){\n  if (a != null) {\n    Iterator<String> iter=a.iterator();\n    while (iter.hasNext()) {\n      String val=iter.next();\n      if (b != null && b.contains(val)) {\n        continue;\n      }\n      String key=name + \".\" + val;\n      Change change=new Change(key,val,null,name);\n      changes.put(key,change);\n    }\n  }\n else   if (a == null && b != null) {\n    String key=name;\n    Change change=new Change(key,null,NOT_NULL,name);\n    changes.put(key,change);\n  }\n}\n", "\tpublic String createMessage(Event event) {\n\t\tStringBuilder msg;\n\t\t\n\t\tmsg = new StringBuilder(type2string(event.getType()));\n\t\t\n\t\tif (event.getParams() != null) {\n\t\t\tfor (String param :  event.getParams())\n\t\t\t\tmsg.append('|').append(param);\n\t\t}\n\t\t\n\t\treturn msg.append(\"\\r\\n\").toString();\n\t}\n", "public synchronized boolean hasReached ( String fileName , long offset ) { if ( curFile == null ) return BOOL_ ; else if ( curFile . getName ( ) . compareTo ( fileName ) < NUM_ ) { return BOOL_ ; } else if ( curFile . getName ( ) . compareTo ( fileName ) ", "public void write(Writer out)\n         throws IOException\n    {\n        writeHtmlHead(out);\n        writeBodyTag(out);\n        writeElements(out);\n        writeHtmlEnd(out);\n    }", "public void setSubscribedWorkteams(java.util.Collection<SubscribedWorkteam> subscribedWorkteams) {\n        if (subscribedWorkteams == null) {\n            this.subscribedWorkteams = null;\n            return;\n        }\n\n        this.subscribedWorkteams = ne", "protected final void addViewInternal ( View child , int index , ViewGroup . LayoutParams params ) { super . addView ( child , index , params ) ; }", "public Set<PermissionDetails> list(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, String of)\n    throws RequestValidationException, RequestExecutionException\n    {\n        if (!performer.isSuper() && !performer.getName().equals(of))\n            throw new UnauthorizedException(String.format(\"You are not authorized to view %s's permissions\",\n                                                          of == null ? \"everyone\" : of));\n\n        Set<PermissionDetails> details = new HashSet<PermissionDetails>();\n\n        for (UntypedResultSet.Row row : process(buildListQuery(resource, of)))\n        {\n            if (row.has(PERMISSIONS))\n            {\n                for (String p : row.getSet(PERMISSIONS, UTF8Type.instance))\n                {\n                    Permission permission = Permission.valueOf(p);\n                    if (permissions.contains(permission))\n                        details.add(new PermissionDetails(row.getString(USERNAME),\n                                                          DataResource.fromName(row.getString(RESOURCE)),\n                                                          permission));\n                }\n            }\n        }\n\n        return details;\n    }", "private static void setLegacy(String moduleName, String legacyParamName) {\n        String oldValue = g_legacyToModuleMap.put(legacyParamName, moduleName);\n        if (oldValue != null) {\n            logger.warn(\"Legacy parameter name used twice: {}\", legacyParamName);\n        }\n    }", "public boolean removeMessageFilter(BaseMessageFilter filter)\n    {\n        NameValue value = this.getNameValueLeaf(filter, false);\n        if (value == null)\n        {\n            System.out.println(\"Registry/80 - Error Leaf not found\");\n            return false;   // Error\n        }\n        boolean bSuccess = value.removeThisMessageFilter(filter);\n        this.cleanNameValueTree(filter);\n        return bSuccess;\n    }", "@Override\n    public Object callWithNamedValues(PageContext pc, Collection.Key key, Struct args) throws PageException {\n\tString methodName = key.getString();\n\tIterator<Object> it = args.valueIterator();\n\tList<Object> values = new ArrayList<Object>();\n\twhile (it.hasNext()) {\n\t    values.add(it.next());\n\t}\n\treturn call(pc, KeyImpl.init(methodName), values.toArray(new Object[values.size()]));\n    }", "public static int indexOfAnyBut(String str, char[] searchChars) {\n      if (isEmpty(str) ||searchChars == null) {\n          return -1;\n      }\n      outer : for (int i = 0; i < str.length(); i++) {\n          char ch = str.charAt(i);\n          for (int j = 0; j < searchChars.length; j++) {\n              if (searchChars[j] == ch) {\n                  continue outer;\n              }\n          }\n          return i;\n      }\n      return -1;\n  }", "public boolean registerRequest ( HGPeerIdentity peerId , Timestamp last_version , Timestamp current_version ) { Peer peer = getPeer ( peerId ) ; if ( peer . getLastFrom ( ) . compareTo ( last_version ) != NUM_ && BOOL_ ) { try { System . out . println ( S", "    public Image getImgFullScreen() {\n        if (imgFullScreen == null) {//GEN-END:|60-getter|0|60-preInit\n            // write pre-init user code here\n            try {//GEN-BEGIN:|60-getter|1|60-@java.io.IOException\n                imgFullScreen = Image.createImage(\"/arrow_out.png\");\n            } catch (java.io.IOException e) {//GEN-END:|60-getter|1|60-@java.io.IOException\n                e.printStackTrace();\n            }//GEN-LINE:|60-getter|2|60-postInit\n            // write post-init user code here\n        }//GEN-BEGIN:|60-getter|3|\n        return imgFullScreen;\n    }\n", "public static int truncatedCompareTo(final Calendar cal1,final Calendar cal2,final int field){\n  final Calendar truncatedCal1=truncate(cal1,field);\n  final Calendar truncatedCal2=truncate(cal2,field);\n  return truncatedCal1.compareTo(truncatedCal2);\n}\n", "public void runInIgfsThreadPool(Runnable r){\n  try {\n    igfsSvc.submit(r);\n  }\n catch (  RejectedExecutionException ignored) {\n    try {\n      r.run();\n    }\n catch (    Exception e) {\n      log.warning(\"Failed to execute IGFS runnable: \" + r,e);\n    }\n  }\n}\n", "\tpublic void setFontColor(final String stateID, final GLColor color)\n\t{\t\t\n\t\tWidgetState state = null;\n\t\tif ( stateID == ALL_STATE )\n\t\t{\n\t\t\tIterator<WidgetState> i = getStates().iterator();\n\t\t\twhile ( i.hasNext() )\n\t\t\t{\n\t\t\t\tstate = i.next();\n\t\t\t\t\n\t\t\t\tif ( state != null )\n\t\t\t\t{\n\t\t\t\t\tstate.setFontColor(color);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstate = getState(stateID);\n\t\t\t\n\t\t\tif ( state != null )\n\t\t\t{\n\t\t\t\tstate.setFontColor(color);\n\t\t\t}\n\t\t}\n\t}\n", "public static String getProbHomeProperty()\n\t{\n\t\tfinal Bundle bundle = Platform.getBundle(ORG_OVERTURE_IDE_PLUGINS_PROBRUNTIME);\n\t\tif (bundle != null)\n\t\t{\n\t\t\tURL buildInfoUrl = FileLocator.find(bundle, new Path(\"prob/build_info.txt\"), null);\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (buildInfoUrl != null)\n\t\t\t\t{\n\t\t\t\t\tURL buildInfofileUrl = FileLocator.toFileURL(buildInfoUrl);\n\t\t\t\t\tif (buildInfofileUrl != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tFile file = new File(buildInfofileUrl.getFile());\n\n\t\t\t\t\t\treturn \"system.\"+\"prob.home=\" + file.getParentFile().getPath().replace('\\\\', '/');\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t} catch (IOException e)\n\t\t\t{\n\t\t\t}\n\t\t}\n\t\treturn \"\";\n\t}", "\tprivate void calculateViewportSize() {\n\t\tDimension screen = getSize();\n\t\t// Calculate viewport's size\n\t\tdouble scale = model.getZoomScale();\n\t\tdouble vpWidth = screen.getWidth() / scale;\n\t\tdouble vpHeight = screen.getHeight() / scale;\n\t\tPoint2D viewpoint = model.getViewPoint();\n\t\tRectangle2D bounds = model.getBounds();\n\t\tdouble x = ((viewpoint.getX() - bounds.getX()) * model.getWidth()) / bounds.getWidth();\n\t\tdouble y = ((-viewpoint.getY() - bounds.getY()) * model.getHeight()) / bounds.getHeight();\n\t\tviewport.setRect(round(x - vpWidth / 2), round(y - vpHeight / 2), vpWidth, vpHeight);\n\t}\n", "\tprivate void build() {\n    \tsetLayout(new BorderLayout());\n    \tadd(getHeaderPanel(), BorderLayout.NORTH);\n    \tadd(getCenterPanel(), BorderLayout.CENTER);\n    \tadd(getButtonPanel(), BorderLayout.SOUTH);\n    }\n", "\tpublic void delete(Proposta entity) {\n\t\tEntityManagerHelper.log(\"deleting Proposta instance\", Level.INFO, null);\n\t\ttry {\n\t\t\tentity = getEntityManager().getReference(Proposta.class,\n\t\t\t\t\tentity.getId());\n\t\t\tgetEntityManager().remove(entity);\n\t\t\tEntityManagerHelper.log(\"delete successful\", Level.INFO, null);\n\t\t} catch (RuntimeException re) {\n\t\t\tEntityManagerHelper.log(\"delete failed\", Level.SEVERE, re);\n\t\t\tthrow re;\n\t\t}\n\t}\n", "public static int getALoadReg(DismantleBytecode dbc, int seen) {\n        if (seen == Const.ALOAD) {\n            return dbc.getRegisterOperand();\n        }\n        if (OpcodeUtils.isALoad(seen)) {\n            return seen - Const.ALOAD_0;\n        }\n        return -1;\n    }", "    public String format(Object value, String pattern, TimeZone timeZone) {\n        return format(value, pattern, (Locale)null, timeZone);\n    }\n", "public synchronized void shutdown(){\n  if (server != null) {\n    try {\n      server.shutdown();\n      LOGGER.info(\"Stopped Kafka server {} at {}\",brokerId,getConnection());\n    }\n  finally {\n      server=null;\n      port=desiredPort;\n    }\n  }\n}", "protected void addAttributeName(){\n  if (Strings.isNotEmpty(builder)) {\n    attribute=builder.toString();\n    Strings.clearBuilder(builder);\n  }\n}\n", "public void addAliases ( List < Alias > aliases ) { for ( Alias alias : aliases ) { addAlias ( alias ) ; } }", "public static Vector3 round ( Vector3 o ) { return new Vector3 ( Math . round ( o . x ) , Math . round ( o . y ) , Math . round ( o . z ) ) ; }", "public boolean isCompressionEnabled(){\n  return compression;\n}", "private static byte[] toBytes(Object input) {\n        if (input instanceof byte[]) {\n            return (byte[]) input;\n        } else if (input instanceof String) {\n            String inputString = (String) input;\n            return inputString.getBytes();\n        } else if (input instanceof Long) {\n            Long inputLong = (Long) input;\n            return (inputLong == 0) ? ByteUtil.EMPTY_BYTE_ARRAY : asUnsignedByteArray(BigInteger.valueOf(inputLong));\n        } else if (input instanceof Integer) {\n            Integer inputInt = (Integer) input;\n            return (inputInt == 0) ? ByteUtil.EMPTY_BYTE_ARRAY : asUnsignedByteArray(BigInteger.valueOf(inputInt));\n        } else if (input instanceof BigInteger) {\n            BigInteger inputBigInt = (BigInteger) input;\n            return (inputBigInt.equals(BigInteger.ZERO)) ? ByteUtil.EMPTY_BYTE_ARRAY : asUnsignedByteArray(inputBigInt);\n        }\n        throw new RuntimeException(\"Unsupported type: Only accepting String, Integer and BigInteger for now\");\n    }", "private static Deferred<TSMeta> getFromStorage(final TSDB tsdb, \n      final byte[] tsuid) {\n    \n    /**\n     * Called after executing the GetRequest to parse the meta data.\n     */\n    final class GetCB implements Callback<Deferred<TSMeta>, ArrayList<KeyValue>> {\n\n      /**\n       * @return Null if the meta did not exist or a valid TSMeta object if it\n       * did.\n       */\n      @Override\n      public Deferred<TSMeta> call(final ArrayList<KeyValue> row) throws Exception {\n        if (row == null || row.isEmpty()) {\n          return Deferred.fromResult(null);\n        }\n        \n        long dps = 0;\n        long last_received = 0;\n        TSMeta meta = null;\n        \n        for (KeyValue column : row) {\n          if (Arrays.equals(COUNTER_QUALIFIER, column.qualifier())) {\n            dps = Bytes.getLong(column.value());\n            last_received = column.timestamp() / 1000;\n          } else if (Arrays.equals(META_QUALIFIER, column.qualifier())) {\n            meta = JSON.parseToObject(column.value(), TSMeta.class);\n          }\n        }\n        \n        if (meta == null) {\n          LOG.warn(\"Found a counter TSMeta column without a meta for TSUID: \" + \n              UniqueId.uidToString(row.get(0).key()));\n          return Deferred.fromResult(null);\n        }\n        \n        meta.total_dps = dps;\n        meta.last_received = last_received;\n        return Deferred.fromResult(meta);\n      }\n      \n    }\n    \n    final GetRequest get = new GetRequest(tsdb.metaTable(), tsuid);\n    get.family(FAMILY);\n    get.qualifiers(new byte[][] { COUNTER_QUALIFIER, META_QUALIFIER });\n    return tsdb.getClient().get(get).addCallbackDeferring(new GetCB());\n  }", "    public void setNamedObjects(Hashtable names)    {\n        if(names != null)\n            namedObjects = (Hashtable)names.clone();\n        else\n            namedObjects = null;\n    }\n", "public void open(Functions.Func callback) {\n        open();\n        Scheduler.get().scheduleFixedDelay(() -> {\n            callback.call();\n            return false;\n        }, inDuration);\n    }", "@Override public Request<List<BuilderStatus>> builds(ProjectReference projectReference){\n  List<DummyBuilderStatus> current=currentBuilderStatuses.get(projectReference.name());\n  List<BuilderStatus> update=new ArrayList<>();\n  if (current != null) {\n    for (    DummyBuilderStatus dummyBuilderStatus : current) {\n      update.add(dummyBuilderStatus);\n    }\n  }\n  return new DummyRequest<>(update);\n}\n", "public void connect ( ) throws DebugException { try { m_debugger . connect ( ) ; } catch ( final DebugExceptionWrapper e ) { throw new DebugException ( e ) ; } }", "\tpublic void train(ArticleSet articles, SnippetLength snippetLength, String datasetName, RelatednessCache rc) throws Exception{\n\n\t\tdataset = decider.createNewDataset();\n\t\t\n\t\tProgressTracker pn = new ProgressTracker(articles.size(), \"training\", Disambiguator.class) ;\n\t\tfor (Article art: articles) {\n\t\t\n\t\t\ttrain(art, snippetLength, rc) ;\t\n\t\t\tpn.update() ;\n\t\t}\n\t\t\n\t\tweightTrainingInstances() ;\n\t\t\n\t\t//training data is very likely to be skewed. So lets resample to even out class values\n\t\t//Resample resampleFilter = new Resample() ;\n\t\t//resampleFilter.setBiasToUniformClass(1) ;\n\t\t\n\t\t//decider.applyFilter(resampleFilter) ;\n\t}\n", "public SDVariable standardDeviation(String name, SDVariable x, boolean biasCorrected, boolean keepDims, int... dimensions) {\n        validateNumerical(\"standard deviation\", x);\n        SDVariable result = f().std(x, biasCorrected, keepDims, dimensions);\n        return updateVariableNameAndReference(result, name);\n    }", "public ServiceFuture<Void> beginTerminateAsync(String resourceGroupName, String workspaceName, String experimentName, String jobName, final ServiceCallback<Void> serviceCallback) {\n        return ServiceFuture.fromResponse(beginTerminateWithServiceResponseAsync(resourceGroupName, workspaceName, experimentName, jobName), serviceCallback);\n    }", "public void deleteField(Mp4FieldKey mp4Key) throws KeyNotFoundException {\n  if (mp4Key == null) {\n    throw new KeyNotFoundException();\n  }\n  super.deleteField(mp4Key.getFieldName());\n}\n", "@Deprecated\n    public Path index(Path bigwigPath) throws Exception {\n//        FileUtils.checkFile(indexPath);\n        ChunkFrequencyManager chunkFrequencyManager = new ChunkFrequencyManager(indexPath);\n\n        // get the chunk size\n        int chunkSize = chunkFrequencyManager.getChunkSize();\n\n        int prevChunk = 0, startChunk, endChunk, partial;\n        String currChrom, prevChrom = null;\n        List<Integer> values = new ArrayList<>();\n\n        // and then iterate BigWig file\n        BigWigIterator bwIterator = bbFileReader.getBigWigIterator();\n        while (bwIterator.hasNext()) {\n            WigItem wigItem = bwIterator.next();\n\n            // get info from wig item\n            currChrom = wigItem.getChromosome();\n            startChunk = wigItem.getStartBase() / chunkSize;\n            endChunk = wigItem.getEndBase() / chunkSize;\n\n            // chromosome change, we must store previous chromosome values\n            if (prevChrom != currChrom) {\n                if (values.size() > 0) {\n                    WigUtils.computeAndSaveMeanValues(values, bigwigPath, prevChrom, chunkSize, chunkFrequencyManager);\n                }\n                currChrom = prevChrom;\n            }\n\n            if (prevChunk != startChunk) {\n                for (int chunk = prevChunk; chunk < startChunk; chunk++) {\n                    values.add(0);\n                }\n            }\n\n            for (int chunk = startChunk, pos = startChunk * chunkSize;\n                 chunk <= endChunk;\n                 chunk++, pos += chunkSize) {\n                // compute how many values are within the current chunk\n                // and update the chunk\n                partial = Math.min(wigItem.getEndBase(), pos + chunkSize) - Math.max(wigItem.getStartBase(), pos);\n                values.add((int) (partial * wigItem.getWigValue()));\n            }\n            prevChunk = endChunk;\n        }\n\n        if (values.size() > 0) {\n            WigUtils.computeAndSaveMeanValues(values, bigwigPath, prevChrom, chunkSize, chunkFrequencyManager);\n        }\n\n        return indexPath;\n    }", "public AnnotationVisitor visitAnnotation ( String desc , boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( desc , visible ) ; } return null ; }", "public static String version ( ) { return version ( STR_ ) ; }", "\tprivate String createBodyFromParts(String[] parts, String boundary) {\n\t\t// build new message body\n\t\tStringBuffer newBody = new StringBuffer();\n\t\tfor (int i = 0; i < parts.length; i++) {\n\t\t\tnewBody.append(\"--\" + boundary + \"\\n\");\n\t\t\tnewBody.append(parts[i]);\n\t\t}\n\t\tnewBody.append(\"--\" + boundary + \"--\\n\");\n\t\treturn newBody.toString();\n\t}\n", "public final void entryRuleJvmLowerBound() throws RecognitionException {\n        try {\n            // InternalXbaseWithAnnotations.g:1917:1: ( ruleJvmLowerBound EOF )\n            // InternalXbaseWithAnnotations.g:1918:1: ruleJvmLowerBound EOF\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getJvmLowerBoundRule()); \n            }\n            pushFollow(FOLLOW_1);\n            ruleJvmLowerBound();\n\n            state._fsp--;\n            if (state.failed) return ;\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getJvmLowerBoundRule()); \n            }\n            match(input,EOF,FOLLOW_2); if (state.failed) return ;\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }", "    protected String getBaseClassName() {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"getBaseClassName() - start\");\n        }\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"getBaseClassName() - end - return value = \"\n                    + baseClassName);\n        }\n        return baseClassName;\n    }\n", "public DeploymentCommand withArgs(java.util.Map<String, java.util.List<String>> args) {\n        setArgs(args);\n        return this;\n    }", "    public void moveToCurrentRow() throws SQLException {\n\tcrsInternal.moveToCurrentRow();\n    }\n", "public SQLEncoding [ ] encodeTask ( final Task < Diff > task ) throws ConfigurationException , UnsupportedEncodingException , DecodingException , EncodingException , SQLConsumerException ;", "public boolean isVisible ( ) { return this . visible ; }", "private static boolean checkFileParentExists(final String file){\n  String fileName=PathUtils.removeSlashFromEnd(file);\n  File dir=new File(fileName.substring(0,fileName.lastIndexOf(\"/\") + 1));\n  return dir.exists() && dir.isDirectory();\n}\n", "\t\tpublic IndexEntry initialize (Object id) {\n\t\t\tthis.id = id;\n\t\t\treturn this;\n\t\t}\n", "public synchronized Integer updateAccess(DataCallback<Integer> callback,String unitId,boolean visited){\n  ContentValues values=new ContentValues();\n  values.put(DbStructure.Column.ASSESSMENT_TB_UNIT_WATCHED,visited);\n  DbOperationUpdate op=new DbOperationUpdate(DbStructure.Table.ASSESSMENT,values,DbStructure.Column.ASSESSMENT_TB_UNIT_ID + \"=? AND \" + DbStructure.Column.ASSESSMENT_TB_USERNAME+ \"=?\",new String[]{unitId,username()});\n  op.setCallback(callback);\n  return enqueue(op);\n}\n", "@Override\n    public javax.servlet.RequestDispatcher getRequestDispatcher(String target) {\n\n        String absolutUri = CmsLinkManager.getAbsoluteUri(target, m_controller.getCurrentRequest().getElementUri());\n        return new CmsFlexRequestDispatcher(\n            m_controller.getTopRequest().getRequestDispatcher(absolutUri),\n            absolutUri,\n            null);\n    }", "public RandomVariable getMonteCarloWeights(int timeIndex)\n\t{\n\t\t// Lazy initialization, synchronized for thread safety\n\t\tsynchronized(this) {\n\t\t\tif(discreteProcessWeights == null || discreteProcessWeights.length == 0) {\n\t\t\t\tdoPrecalculateProcess();\n\t\t\t}\n\t\t}\n\n\t\t// Return value of process\n\t\treturn discreteProcessWeights[timeIndex];\n\t}", "private void calcoffset(int index,boolean doExtend,Point2D result){\n  double bx=data[index - 3];\n  double by=data[index - 2];\n  double px=result.getX() - bx;\n  double py=result.getY() - by;\n  double dx=data[index] - bx;\n  double dy=data[index + 1] - by;\n  double l=data[index + 2] - data[index - 1];\n  double rx=(px * dx + py * dy) / l;\n  double ry=(px * -dy + py * dx) / l;\n  if (!doExtend) {\n    if (rx < 0)     rx=0;\n else     if (rx > l)     rx=l;\n  }\n  rx+=data[index - 1];\n  result.setLocation(rx,ry);\n}\n", "public void addGroup(CmsAdminMenuGroup group, float position) {\n\n        m_groupContainer.addIdentifiableObject(group.getName(), group, position);\n    }", "public String getElementIdText(Object object) {\n\t\tif (object == null) {\n\t\t\treturn INodeTextProvider.NULL_TEXT;\n\t\t}\n\t\treturn doGetElementIdText((AtcGetContents)object);\n\t}", "void onLoadingStarted ( String imageUri , View view ) ;", "static public final float cosDeg(float degrees){\n  return Sin.table[(int)((degrees + 90) * degToIndex) & SIN_MASK];\n}", "public void addTrackPositionListener(int player, TrackPositionListener listener) {\n        listenerPlayerNumbers.put(listener, player);\n        TrackPositionUpdate currentPosition = positions.get(player);\n        if (currentPosition !=  null) {\n            listener.movementChanged(currentPosition);\n            trackPositionListeners.put(listener, currentPosition);\n        } else {\n            trackPositionListeners.put(listener, NO_INFORMATION);\n        }\n    }", "public void parseSignaturesString(String signatures) throws IOException,ParseException {\n    logger.info(\"Reading inline API signatures...\");\n    final Set<String> missingClasses = new TreeSet<String>();\n    parseSignaturesFile(new StringReader(signatures), false, missingClasses);\n    reportMissingSignatureClasses(missingClasses);\n  }", "public void parseAndEmit(String[] args) {\n    \tlogger.finest(\"Checking command line arguments.\");\n        if (args.length != 2) {\n        \tfinal String version = new Version().getVersion();\n        \tlogger.info(\"jADT version \" + version + \".\");\n        \tlogger.info(\"Not enough arguments provided to jADT\");\n        \tlogger.info(\"usage: java sfdc.adt.JADT [source file or directory with .jadt files] [output directory]\");\n            throw new IllegalArgumentException(\"\\njADT version \" + version + \"\\nusage: java sfdc.adt.JADT [source file or directory with .jadt files] [output directory]\");\n        }\n        \n        final String srcPath = args[0];\n        final String destDirName = args[1];\n\n        parseAndEmit(srcPath, destDirName);        \n    }", "public synchronized long incrAndGetSeqno ( ) { seqno ++ ; notifyAll ( ) ; return seqno ; }", "public static OutputCatcher start(){\n  return new OutputCatcher();\n}\n", "    private Element createElement(String className) throws InstantiatorException {\n        try {\n            Class<?> clazz = digester.getClassLoader().loadClass(className);\n            Element element = (Element) clazz.newInstance();\n\n            logger.debug (\"created element of type \" + element.getClass().getName());\n            InstantiatorHelper.initializeElement(element);\n            element.setName(Element.UNNAMED);\n\n            return element;\n        } catch (ClassCastException e) {\n            throw new InstantiatorException (\"Class \"+className+\" is not a subclass of \"+Element.class.getName()+\".\", e); \n        } catch (Exception e) {\n            throw new InstantiatorException (\"Element of type \"+className+\" could not be created.\", e);\n        }\n    }\n", "public Response batchCorrectLocation(Float lat, Float lon, Integer accuracy, String placeId, String woeId) throws JinxException {\n    JinxUtils.validateParams(lat, lon, accuracy);\n    if (JinxUtils.isNullOrEmpty(placeId)) {\n      JinxUtils.validateParams(woeId);\n    }\n    Map<String, String> params = new TreeMap<>();\n    params.put(\"method\", \"flickr.photos.geo.batchCorrectLocation\");\n    params.put(\"lat\", lat.toString());\n    params.put(\"lon\", lon.toString());\n    params.put(\"accuracy\", accuracy.toString());\n    if (!JinxUtils.isNullOrEmpty(placeId)) {\n      params.put(\"place_id\", placeId);\n    }\n    if (!JinxUtils.isNullOrEmpty(woeId)) {\n      params.put(\"woe_id\", woeId);\n    }\n    return jinx.flickrPost(params, Response.class);\n  }", "public abstract < R , A > R accept ( GenericVisitor < R , A > v , A arg ) ;", "public HyperGraphPeer ( Json configuration ) { this . configuration = configuration ; }", "@Nonnull\n  public static String getWithoutAnySpaces (@Nullable final String sStr)\n  {\n    if (sStr == null)\n      return \"\";\n\n    // Trim first\n    final char [] aChars = sStr.trim ().toCharArray ();\n    final StringBuilder aResult = new StringBuilder (aChars.length);\n    for (final char c : aChars)\n      if (!Character.isWhitespace (c) && !Character.isSpaceChar (c))\n        aResult.append (c);\n    return aResult.toString ();\n  }", "public void onWebsocketMessage ( WebSocket conn , ByteBuffer blob ) ;", "public void removeAttribute(int index){\n  if (index >= 0 && index < length) {\n    if (index < length - 1) {\n      System.arraycopy(data,(index + 1) * 5,data,index * 5,(length - index - 1) * 5);\n    }\n    length--;\n  }\n else {\n    badIndex(index);\n  }\n}\n", "\tpublic TextFrame getNextInThread() throws Exception {\n\t\tif (nextInThread == null && hasProperty(InDesignDocument.PROP_NTXF)) {\n\t\t\t\tString objectId = getObjectReferenceProperty(InDesignDocument.PROP_NTXF);\n\t\t\t\tif (objectId != null) {\n\t\t\t\t\tthis.nextInThread = (TextFrame)this.getDocument().getObject(objectId);\n\t\t\t\t}\n\t\t}\n\t\treturn this.nextInThread;\n\t}\n", "public Peer ( Gondola gondola , CoreMember cmember , Channel slaveChannel ) { this ( gondola , cmember , slaveChannel . getRemoteMemberId ( ) ) ; this . channel = slaveChannel ; this . slaveMode = BOOL_ ; }", "public PlainChangesLog pushLog(QPath rootPath)\n   {\n      // session instance is always present in SessionChangesLog\n      PlainChangesLog cLog = new PlainChangesLogImpl(getDescendantsChanges(rootPath), session);\n      if (rootPath.equals(Constants.ROOT_PATH))\n      {\n         clear();\n      }\n      else\n      {\n         remove(rootPath);\n      }\n      return cLog;\n   }", "void put ( Object compiledScript ) throws ScriptingException ;", "public TreeMap<Integer, T_PreKey> generateOmemoPreKeys(int startId, int count) {\n        return keyUtil().generateOmemoPreKeys(startId, count);\n    }", "  public String getStringTags(int i) {\n    StringBuilder str = new StringBuilder(32);\n    for (int j=0; j<tags[i].length; j++) {\n      if (tags[i][j] != null) {\n        if (str.length()>0)\n          str.append(\".\");\n        str.append(tags[i][j]);\n      }\n    }\n    \n    return str.toString();\n  }\n", "  public DByte newDByte() {\n    return new asciiByte();\n  }\n", "protected PageChannel(boolean testing){\n  if (!testing) {\n    throw new IllegalArgumentException();\n  }\n  _channel=null;\n  _closeChannel=false;\n  _format=JetFormat.VERSION_4;\n  _autoSync=false;\n}\n", "public static boolean createFileWatcher(Path file,FileChangedListener listener){\n  if (listener == null || file == null) {\n    return false;\n  }\n  try {\n    FileWatcher watcher=new FileWatcher(file,listener);\n    Thread thread=new Thread(watcher);\n    thread.start();\n    LOGGER.info(\"Added file watcher for: \" + file.toAbsolutePath());\n    return true;\n  }\n catch (  IOException ex) {\n    LOGGER.warning(\"Error adding file watcher for: \" + file.toAbsolutePath() + \" [\"+ ex+ \"]\");\n    return false;\n  }\n}\n", "public LoggingFraction formatter(String name, String pattern) {\n        patternFormatter(new PatternFormatter(name).pattern(pattern));\n        return this;\n    }", "public EventStoreBuilder clusterNodeDiscoverAttemptInterval ( Duration duration ) { clusterNodeDiscoverAttemptInterval = duration ; return this ; }", "public CmsWorkplaceSettings getWorkplaceSettings() {\n\n        CmsWorkplaceSettings settings = (CmsWorkplaceSettings)getSession().getSession().getAttribute(\n            CmsWorkplaceManager.SESSION_WORKPLACE_SETTINGS);\n        if (settings == null) {\n            settings = CmsLoginHelper.initSiteAndProject(getCmsObject());\n            VaadinService.getCurrentRequest().getWrappedSession().setAttribute(\n                CmsWorkplaceManager.SESSION_WORKPLACE_SETTINGS,\n                settings);\n        }\n        return settings;\n    }", "public GenericPrincipal ( String userName , String password ) { this ( userName , password , null ) ; }", "public synchronized void addEvent(WorkManagerEvent event)\n   {\n      if (trace)\n         log.tracef(\"addEvent(%s)\", event);\n\n      List<WorkManagerEvent> e = events.get(event.getAddress().getWorkManagerName());\n\n      if (e == null)\n      {\n         e = new ArrayList<WorkManagerEvent>();\n         events.put(event.getAddress().getWorkManagerName(), e);\n      }\n\n      e.add(event);\n   }", "void outEntryLeaseExpired ( IReplicationOutContext context , IEntryHolder entryHolder ) ;", "public GetDomainStatisticsResponse getDomainStatistics(GetDomainStatisticsRequest request) {\n        checkNotNull(request, \"The parameter request should NOT be null.\");\n\n        checkStringNotEmpty(request.getDomain(), \"Domain should NOT be empty.\");\n        InternalRequest internalRequest = createRequest(HttpMethodName.GET, request, STATISTICS,\n                LIVE_DOMAIN, request.getDomain());\n        if (request.getStartDate() != null) {\n            internalRequest.addParameter(\"startDate\", request.getStartDate());\n        }\n        if (request.getEndDate() != null) {\n            internalRequest.addParameter(\"endDate\", request.getEndDate());\n        }\n        if (request.getAggregate() != null) {\n            internalRequest.addParameter(\"aggregate\", request.getAggregate().toString());\n        }\n        return invokeHttpClient(internalRequest, GetDomainStatisticsResponse.class);\n    }", "public static Type fromExceptionSet ( ExceptionSet exceptionSet ) throws ClassNotFoundException { Type commonSupertype = exceptionSet . getCommonSupertype ( ) ; if ( commonSupertype . getType ( ) != T_OBJECT ) { return commonSupertype ; } ObjectType excep", "public JSpaceState ( ) { state = STOPPED ; }", "public FactLine balanceSource(){\n  if (!m_acctSchema.isSuspenseBalancing() || m_doc.isMultiCurrency())   return null;\n  BigDecimal diff=getSourceBalance();\n  log.finer(\"Diff=\" + diff);\n  FactLine line=new FactLine(m_doc.getCtx(),m_doc.get_Table_ID(),m_doc.get_ID(),0,m_trxName);\n  line.setDocumentInfo(m_doc,null);\n  line.setPostingType(m_postingType);\n  line.setAccount(m_acctSchema,m_acctSchema.getSuspenseBalancing_Acct());\n  if (diff.signum() < 0)   line.setAmtSource(m_doc.getC_Currency_ID(),diff.abs(),Env.ZERO);\n else   line.setAmtSource(m_doc.getC_Currency_ID(),Env.ZERO,diff);\n  line.convert();\n  log.fine(line.toString());\n  m_lines.add(line);\n  return line;\n}\n", "public VectorInstance subtract(double[] other) throws Exception {\n  ArrayList<Object> diffVals=new ArrayList<Object>();\n  for (int i=0; i < other.length; i++) {\n    double x=m_values.valueDouble(i);\n    double y=other[i];\n    double result=x - y;\n    diffVals.add(new Double(result));\n  }\n  Array newArray=Array.create(diffVals,null);\n  return new VectorInstance(newArray,m_vectorFields);\n}\n", "public void clearOnPageChangeListeners ( ) { if ( mOnPageChangeListeners != null ) { mOnPageChangeListeners . clear ( ) ; } }", "    public void hideItems(Collection identifiers) {\n        List organizations = manifest.getOrganizations().getOrganization();\n        for (Iterator i = organizations.iterator(); i.hasNext(); ) {\n            hideItems(((OrganizationType)i.next()).getItem(), identifiers);\n        }\n    }\n", "public long stop(){\n  if (!stopped) {\n    stopped=true;\n    long elapsed=System.nanoTime() - startNanos;\n    record(elapsed);\n    return elapsed;\n  }\n  throw new IllegalStateException(\"Already stopped\");\n}\n", "public Iterator<String> iterateFormatters(){\n  return formatters.iterator();\n}\n", "public void add(int what,DownloadRequest downloadRequest,DownloadListener downloadListener){\n  if (downloadRequest.inQueue())   Logger.w(\"This request has been in the queue\");\n else {\n    downloadRequest.setQueue(mUnFinishQueue);\n    downloadRequest.onPreResponse(what,downloadListener);\n    downloadRequest.setSequence(mInteger.incrementAndGet());\n    mUnFinishQueue.add(downloadRequest);\n    mDownloadQueue.add(downloadRequest);\n  }\n}\n", "  public Vector3D applyInverseTo(Vector3D u) {\n\n    double x = u.getX();\n    double y = u.getY();\n    double z = u.getZ();\n\n    double s = q1 * x + q2 * y + q3 * z;\n    double m0 = -q0;\n\n    return new Vector3D(2 * (m0 * (x * m0 - (q2 * z - q3 * y)) + s * q1) - x,\n                        2 * (m0 * (y * m0 - (q3 * x - q1 * z)) + s * q2) - y,\n                        2 * (m0 * (z * m0 - (q1 * y - q2 * x)) + s * q3) - z);\n\n  }\n", "public Object initModelIF(EventModel em, ModelForm form, HttpServletRequest request) throws Exception {\r\n\t\treturn initModel(request);\r\n\t}", "    protected void addResourceToSelectedContainer() {\n\tRemoteResourceWrapper selected = getSelectedResourceWrapper();\n\tPropertyManager pm = PropertyManager.getPropertyManager();\n\tif (selected == null) {\n\t    JOptionPane.showMessageDialog(this, \n\t\t\t\t\t  \"No resource selected\",\n\t\t\t\t\t  \"Error\",\n\t\t\t\t\t  JOptionPane.ERROR_MESSAGE);\n\t    return;\n\t} else if (! pm.isExtensible(selected)) {\n\t    JOptionPane.showMessageDialog(this, \n\t\t\t\t\t  \"The resource selected is not \"+\n\t\t\t\t\t  \"extensible.\",\n\t\t\t\t\t  \"Error\",\n\t\t\t\t\t  JOptionPane.ERROR_MESSAGE);\n\t} else {\n\t    Thread thread = new Thread() {\n\t\tpublic void run() {\n\t\t    performAddResourceToSelectedContainer();\n\t\t}\n\t    };\n\t    thread.start();\n\t}\n    }\n", "public boolean remove(HttpConnection connection){\n  TimeValues times=connectionToTimes.remove(connection);\n  if (times == null) {\n    log.warn(\"Removing a connection that never existed!\");\n    return true;\n  }\n else {\n    return System.currentTimeMillis() <= times.timeExpires;\n  }\n}\n", "    public void setExecutionPhases(final Phase[] executionPhases) {\n        Assert.notNull(executionPhases);\n        this.executionPhases = Arrays.asList(executionPhases);\n    }\n", "public void decompose(CharSequence s, int src, int limit, StringBuilder dest,\n                   int destLengthEstimate) {\n        if(destLengthEstimate<0) {\n            destLengthEstimate=limit-src;\n        }\n        dest.setLength(0);\n        ReorderingBuffer buffer=new ReorderingBuffer(this, dest, destLengthEstimate);\n        decompose(s, src, limit, buffer);\n    }", "void addLocalBssids ( long groupId , List < String > bssids ) ;", "public void getCharacterSAB(String API, String name, Callback<CharacterSAB> callback) throws GuildWars2Exception, NullPointerException {\n\t\tisParamValid(new ParamChecker(ParamType.API, API), new ParamChecker(ParamType.CHAR, name));\n\t\tgw2API.getCharacterSAB(name, API).enqueue(callback);\n\t}", "public NewChunk asciiTrim(NewChunk nc) {\n    // copy existing data\n    nc = this.extractRows(nc, 0,_len);\n    //update offsets and byte array\n    for(int i=0; i < _len; i++) {\n      int j = 0;\n      int off = UnsafeUtils.get4(_mem,idx(i));\n      if (off !", "public final int read(char []buf, int offset, int length)\n    throws IOException\n  {\n    if (_readEncoding != null) {\n      return _readEncoding.read(buf, offset, length);\n    }\n\n    byte []readBuffer = _readBuffer;\n    if (readBuffer == null)\n      return -1;\n\n    int readOffset = _readOffset;\n    int readLength = _readLength;\n\n    int sublen = Math.min(length, readLength - readOffset);\n\n    if (readLength <= readOffset) {\n      if (! readBuffer()) {\n        return -1;\n      }\n\n      readLength = _readLength;\n      readOffset = _readOffset;\n\n      sublen = Math.min(length, readLength - readOffset);\n    }\n\n    for (int i = sublen - 1; i >= 0; i--) {\n      buf[offset + i] = (char) (readBuffer[readOffset + i] & 0xff);\n    }\n\n    _readOffset = readOffset + sublen;\n\n    return sublen;\n  }", "public void truncate ( final long size ) throws FileNotFoundException , IOException { fileChannel . truncate ( Math . max ( size , writePosition ) ) ; }", "    private void updateClock(TextView field, long msLeft) {\n    \tint sLeft = (int) ((msLeft + 500) / 1000);\n    \tint hour = sLeft / 3600;\n    \tint min = sLeft / 60 % 60;\n    \tint sec = sLeft % 60;\n    \ttimeText.setCharAt(0, (char) ('0' + hour / 10));\n    \ttimeText.setCharAt(1, (char) ('0' + hour % 10));\n    \ttimeText.setCharAt(3, (char) ('0' + min / 10));\n    \ttimeText.setCharAt(4, (char) ('0' + min % 10));\n    \ttimeText.setCharAt(6, (char) ('0' + sec / 10));\n    \ttimeText.setCharAt(7, (char) ('0' + sec % 10));\n    \tfield.setText(timeText);\n\t}\n", "public PreparedStatementCache ( int capacity ) { cache = new IndexedLRUCache < PreparedStatementHolder > ( capacity , this ) ; }", "   public Class getAttributeClass(long handle, String name) throws JEANInvalidHandleException, JEANInvalidAttributeNameException {\n      Attribute att = getTheAttribute(handle,name);\n      if (att == null) {\n         throw new JEANInvalidAttributeNameExce", "    public void multiCallMetaMergeStarted(javax.telephony.MetaEvent event) {\n        Iterator<CallListener> it = this.getCallListenerIterator();\n        while (it.hasNext()) {\n            it.next().multiCallMetaMergeStarted(event);\n        }\n    }\n", "protected void processMessagesOnConnection() {\n        try {\n            logger.log(INFO, \"Connected to \" + getConnectionName());\n            state.set(StreamState.CONNECTED);\n            notifyConnection();\n            inputBuffer.flip();\n\n            while (!Thread.currentThread().isInterrupted() && isConnected()) {\n                try {\n                    // Find the start of message\n                    byte byStart = 0;\n                    while(byStart != START_OF_MSG && !Thread.currentThread().isInterrupted() && isConnected()) {\n                        byStart = nextByte(inputBuffer);\n                    }\n\n                    // and then make sure there are enough bytes and read the protocol\n                    readCompleteMessage(inputBuffer);\n                    if(inputBuffer.get() != protocol.getKeyIdentifier()) throw new TcProtocolException(\"Bad protocol\");\n\n                    logByteBuffer(\"Line read from stream\", inputBuffer);\n\n                    // now we take a shallow buffer copy and process the message\n                    MenuCommand mc = protocol.fromChannel(inputBuffer);\n                    logger.log(INFO, \"Command received: \" + mc);\n                    notifyListeners(mc);\n                }\n                catch(TcProtocolException ex) {\n                    // a protocol problem shouldn't drop the connection\n                    logger.log(WARNING, \"Probable Bad message reason='{0}' Remote={1} \",\n                               ex.getMessage(), getConnectionName());\n                }\n            }\n            logger.log(INFO, \"Disconnected from \" + getConnectionName());\n        } catch (Exception e) {\n            logger.log(ERROR, \"Problem with connectivity on \" + getConnectionName(), e);\n        }\n        finally {\n            close();\n        }\n    }", "public CAbstractNodeComponent ( final LayoutManager layout ) { super ( layout ) ; }", "public final static byte[] toAsciiByteArray(CharSequence charSequence){\n  byte[] barr=new byte[charSequence.length()];\n  for (int i=0; i < barr.length; i++) {\n    char c=charSequence.charAt(i);\n    barr[i]=(byte)((int)(c <= 0xFF ? c : 0x3F));\n  }\n  return barr;\n}\n", "public String server ( ) { return header ( HEADER_SERVER ) ; }", "public static boolean equals(CharSequence a,CharSequence b){\n  if (a.length() != b.length()) {\n    return false;\n  }\n  int length=a.length();\n  for (int i=0; i < length; i++) {\n    if (a.charAt(i) != b.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "public static final <T> Function<T,T> ifNotNullAndTrueThen(final Type<T> targetType, final IFunction<? super T, Boolean> condition, final IFunction<? super T,? extends T> thenFunction) {\r\n        return ifTrueThen(targetType, FnBoolean.and(FnObject.isNotNull(),condition), thenFunction);\r\n    }", "public Tree shallowClone(){\n  ArrayList<Tree> newChildren=new ArrayList<>(children.size());\n  for (  Tree child : children) {\n    newChildren.add(child.shallowClone());\n  }\n  Tree newTree=new Tree(label,newChildren);\n  newTree.setIsTerminal(isTerminal());\n  newTree.setBoundary(isBoundary());\n  return newTree;\n}\n", "private void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject ( ) ; if ( ( objBytes == null ) && ( ( hash != NUM_ ) || ( locBytes != null ) ) ) throw new InvalidObjectException ( STR_ ) ; }", "public void configureHandler(GitLineHandler h,int editorNo){\n  h.setEnvironment(GitCommand.GIT_EDITOR_ENV,getEditorCommand());\n  h.setEnvironment(GitRebaseEditorMain.IDEA_REBASE_HANDER_NO,Integer.toString(editorNo));\n}\n", "ClassNode resolveType ( final Expression expression , ClassNode classNode ) ;", "public void addTable(Table table){\n  tables.add(table);\n}\n", "public ListProjectsResult withProjects(String... projects) {\n        if (this.projects == null) {\n            setProjects(new java.util.ArrayList<String>(projects.length));\n        }\n        for (String ele : projects) {\n            this.projects.add(ele);\n        }\n        return this;\n    }", "    public void stateChanged(ChangeEvent e) {\n        if (isInitialized) {\n            firePropertyChange(\"date\", lastSelectedDate, model.getDate());\n            lastSelectedDate = model.getDate();\n            hasChanged=true;\n        }\n    }\n", "private <T extends AGeneralOperation>T setOperation(T operation,MappingType mtd,MappingType mts){\r\n\t\toperation.setMtd(mtd).setMts(mts)\r\n\t\t         .initialDSetPath(stringOfSetDestination)\r\n\t\t\t     .initialDGetPath(stringOfGetDestination)\r\n\t\t\t     .initialSGetPath(stringOfGetSource);\r\n\t\t\r\n\t\treturn operation;\r\n\t}", "@SafeVarargs\n    public static <T> List<T> buildListOfAtLeastTwo(T first, T second, T... more) {\n        if (first == null) {\n            throw new IllegalArgumentException(\"First example is null.\");\n        }\n        if (second == null) {\n            throw new IllegalArgumentException(\"Second example is null.\");\n        }\n\n        List<T> result = new ArrayList<>();\n        result.add(first);\n        result.add(second);\n        addArrayElementsToList(result, more);\n\n        return result;\n    }", "    public boolean isBeforeFirst() throws SQLException {\n        if (cursorPos == 0 && numRows > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n", "    public void setAlternativeExpression(boolean b) {\n        WSBoolRecord record =\n                (WSBoolRecord) _sheet.findFirstRecordBySid(WSBoolRecord.sid);\n\n        record.setAlternateExpression(b);\n    }\n", "public boolean isEnforcesTodaysHistoricFixings ( ) { return enforcesTodaysHistoricFixings ; }", "private AddressingModeFiveGenerator ( ) { }", "public VNXeCommandResult modifyLunSync(LunModifyParam param,String resourceId){\n  StringBuilder urlBld=new StringBuilder(URL_RESOURCE);\n  urlBld.append(resourceId);\n  urlBld.append(URL_LUN_MODIFY_ACTION);\n  _url=urlBld.toString();\n  VNXeCommandResult result=postRequestSync(param);\n  result.setSuccess(true);\n  return result;\n}\n", "    public void setDomKey6(String domKey6) {\n        m_domKey6 = domKey6;\n    }\n", "Union5 < First , Second , Third , Fourth , Fifth > third ( Third value ) ;", "public SocketPipe(final Socket socket1,final Socket socket2) throws IOException {\n  this.socket1=socket1;\n  this.socket2=socket2;\n  pipe1=new StreamPipe(socket1.getInputStream(),socket2.getOutputStream(),OUTPUT_PIPE_NAME);\n  pipe2=new StreamPipe(socket2.getInputStream(),socket1.getOutputStream(),INPUT_PIPE_NAME);\n  pipe1.addPipeListener(listener);\n  pipe2.addPipeListener(listener);\n}\n", "\tpublic void addId(AbstractSymbol s,AbstractSymbol data){\n\t\t if(inScope(s)) System.err.println(\"Redefining symbol \"+s.toString());\n\t\t map.put(s,new ObjectInfo(data));\n\t}\n", "public final void checkTemporaryDestinationScope( Destination destination ) throws JMSException\n    {\n    \tif (destination instanceof LocalQueue)\n    \t{\n    \t\tLocalQueue localQueue = (LocalQueue)destination; \n\t        if (localQueue.isTemporary() && !connection.isRegisteredTemporaryQueue(localQueue.getQueueName()))\n\t       \t\tthrow new IllegalStateException(\"Temporary queue does not belong to session's connection.\");\n    \t}\n    \telse\n    \tif (destination instanceof LocalTopic)\n    \t{\t\n    \t\tLocalTopic localTopic = (LocalTopic)destination; \n\t        if (localTopic.isTemporary() && !connection.isRegisteredTemporaryTopic(localTopic.getTopicName()))\n\t       \t\tthrow new IllegalStateException(\"Temporary topic does not belong to session's connection.\");\n    \t}\n    \telse\n    \t\tthrow new FFMQException(\"Unexpected destination type : \"+destination,\"INTERNAL_ERROR\");\n    }", "private int parseLinkLabel ( ) { String m = match ( LINK_LABEL ) ; return m == null ? NUM_ : m . length ( ) ; }", "@Nonnegative\n    public static int fsyncRecursive(final Path root) throws IOException {\n        final FsyncingSimpleFileVisitor visitor = new FsyncingSimpleFileVisitor();\n        Files.walkFileTree(root, visitor);\n        return visitor.getFileCount();\n    }", "public void track ( File file , Object marker , FileDeleteStrategy deleteStrategy ) { if ( file == null ) { throw new NullPointerException ( STR_ ) ; } addTracker ( file . getPath ( ) , marker , deleteStrategy ) ; }", "private static boolean mergeResRefs(ComponentNameSpaceConfiguration masterCompNSConfig,\n                                        List<ComponentNameSpaceConfiguration> compNSConfigs,\n                                        Map<String, ResourceRefConfig[]> totalResRefs) {\n        final boolean isTraceOn = TraceComponent.isAnyTracingEnabled();\n        if (isTraceOn && tc.isDebugEnabled())\n            Tr.entry(tc, \"mergeResRefs\");\n\n        ResourceRefConfigList resRefList = InternalInjectionEngineAccessor.getInstance().createResourceRefConfigList();\n        masterCompNSConfig.setResourceRefConfigList(resRefList);\n\n        List<ResourceRefConfig.MergeConflict> conflicts = new ArrayList<ResourceRefConfig.MergeConflict>();\n        for (Map.Entry<String, ResourceRefConfig[]> entry : totalResRefs.entrySet()) {\n            ResourceRefConfig mergedResRef = resRefList.findOrAddByName(entry.getKey());\n            mergedResRef.mergeBindingsAndExtensions(entry.getValue(), conflicts);\n        }\n\n        boolean success = conflicts.isEmpty();\n        if (!success) {\n            for (ResourceRefConfig.MergeConflict conflict : conflicts) {\n                Tr.error(tc, \"CONFLICTING_REFERENCES_CWNEN0062E\",\n                         compNSConfigs.get(conflict.getIndex1()).getDisplayName(),\n                         compNSConfigs.get(conflict.getIndex2()).getDisplayName(),\n                         masterCompNSConfig.getModuleName(),\n                         masterCompNSConfig.getApplicationName(),\n                         conflict.getAttributeName(),\n                         conflict.getResourceRefConfig().getName(),\n                         conflict.getValue1(),\n                         conflict.getValue2());\n            }\n        }\n\n        if (isTraceOn && tc.isDebugEnabled())\n            Tr.exit(tc, \"mergeResRefs: \" + success);\n        return success;\n    }", "public synchronized String generateId(){\n  StringBuilder sb=new StringBuilder(length);\n  sb.append(seed);\n  sb.append(sequence.getAndIncrement());\n  return sb.toString();\n}\n", "public SelectSameAction ( DrawingEditor editor ) { super ( editor ) ; ResourceBundleUtil labels = ResourceBundleUtil . getBundle ( STR_ ) ; labels . configureAction ( this , ID ) ; updateEnabledState ( ) ; }", "    public int capacity() {\n        return oStream.capacity();\n    }\n", "\tprotected long getAskVolumeAtPrice(double price){\n\t\tlong volume = 0;\n\t\t//Returns zero immediately if there is no order at this price or the book is empty\n\t\tfor(Order order : askLimitOrders){\n\t\t\tif(order.getPrice() == price)\n\t\t\t\tvolume += order.getOpenQuantity();\n\t\t\tif(order.getPrice() > price)\n\t\t\t\tbreak;\n\t\t}\n\t\treturn volume;\n\t}\n", "public PdfArray(PdfObject obj){\n  this();\n  list.add(obj);\n}\n", "    public void resume() {\n        suspended = false;\n    }\n", "private CollisionResult computeCollision(CollisionCategory category,\n                                             double sh,\n                                             double sv,\n                                             double sx,\n                                             double sy,\n                                             int max)\n    {\n        double x = sh;\n        double y = sv;\n        double ox = x;\n        double oy = y;\n\n        boolean collX = false;\n        boolean collY = false;\n\n        CollisionResult last = null;\n        for (int cur = 0; cur < max; cur++)\n        {\n            CollisionResult current = computeCollision(category, ox, oy, x, y);\n            if (current != null)\n            {\n                last = current;\n                if (current.getX() != null)\n                {\n                    x = current.getX().doubleValue();\n                    collX = true;\n                }\n                else\n                {\n                    collX = false;\n                }\n                if (current.getY() != null)\n                {\n                    y = current.getY().doubleValue();\n                    oy = y;\n                }\n            }\n            else\n            {\n                collX = false;\n            }\n\n            if (!collX)\n            {\n                ox = x;\n                x += sx;\n            }\n\n            current = computeCollision(category, ox, oy, x, y);\n            if (current != null)\n            {\n                last = current;\n                if (current.getX() != null)\n                {\n                    x = current.getX().doubleValue();\n                }\n                if (current.getY() != null)\n                {\n                    y = current.getY().doubleValue();\n                    collY = true;\n                }\n                else\n                {\n                    collY = false;\n                }\n            }\n            else\n            {\n                collY = false;\n            }\n\n            if (!collY)\n            {\n                oy = y;\n                y += sy;\n            }\n        }\n        if (category.isGlue())\n        {\n            if (last == null)\n            {\n                last = computeCollision(category, ox, oy, x, y - 1);\n            }\n            if (last == null)\n            {\n                last = computeCollision(category, ox, oy, x, y - 2);\n            }\n        }\n        return last;\n    }", "private void processHDU ( HDUMessage hdu ) { if ( hdu . isValid ( ) ) { broadcast ( new DecoderStateEvent ( this , Event . START , State . CALL ) ) ; String to = hdu . getToID ( ) ; updateTo ( to ) ; if ( mCurrentCallEvent == null ) { mCurrentCallEvent = new P25CallEvent . Builder ( CallEventType . CALL ) . aliasList ( getAliasList ( ) ) . channel ( mCurrentChannel ) . details ( ( hdu . isEncrypted ( ) ? STR_ : STR_ ) ) . frequency ( mCurrentChannelFrequency ) . to ( to ) . build ( ) ; broadcast ( mCurrentCallEvent ) ; } } }", "public void fillContent(CmsImageInfoBean imageInfo) {\n\n        String viewLink = imageInfo.getViewLink() != null\n        ? imageInfo.getViewLink()\n        : CmsCoreProvider.get().link(imageInfo.getResourcePath());\n        CmsCroppingDialog croppingDialog = new CmsCroppingDialog(viewLink);\n        m_handler.getGalleryDialog().getParentPanel().add(croppingDialog);\n        CmsImageFormatHandler formatHandler = new CmsImageFormatHandler(\n            getDialogMode(),\n            m_handler.getGalleryDialog(),\n            imageInfo.getSelectedPath(),\n            imageInfo.getHeight(),\n            imageInfo.getWidth());\n        CmsImageFormatsForm formatsForm = new CmsImageFormatsForm(formatHandler);\n        formatHandler.init(formatsForm, croppingDialog);\n        m_handler.setFormatHandler(formatHandler);\n        m_content.clear();\n        m_content.add(formatsForm);\n    }", "private void stopHarvestTiming ( Collection < LocalCandidate > harvest ) { harvester . getHarvestStatistics ( ) . stopHarvestTiming ( harvest ) ; }", "void removeItem(final RoundedToolItem roundedToolItem){\n  checkWidget();\n  items.remove(roundedToolItem);\n}\n", "    public void compile() {\n        try {\n            converter = prefixConfig.getConfiguredCompiler();\n\n            //Compile the specified ontologies in the desired jar file\n            converter.createConceptJar(jarFile);\n        } catch (Exception e) {\n            Logger.getLogger(OntologyCompiler.class.getName()).\n                    log(Level.SEVERE, null, e);\n        }\n    }\n", "\tprivate void makeMenuActions() {\n\t    IActionBars actionBars = getViewSite().getActionBars();\n\t    \n\t    // Register our interest in the global menu actions\n\t    actionBars.setGlobalActionHandler(ActionFactory.DELETE.getId(), actionDelete);\n\t    actionBars.setGlobalActionHandler(ActionFactory.RENAME.getId(), actionRename);\n\t    actionBars.setGlobalActionHandler(ActionFactory.SELECT_ALL.getId(), actionSelectAll);\n\t    \n\t    // Local menu items\n\t    IMenuManager manager = actionBars.getMenuManager();\n\t\tmanager.add(actionToggleShowInBrowser);\n\t\tmanager.add(actionLinkEditor);\n\t}\n", "public PSParser ( byte [ ] data , int start ) { this . data = data ; this . loc = start ; }", "@SuppressWarnings(\"unchecked\")\n    public static List<HierarchicalConfiguration> getConfigurationsAt(HierarchicalConfiguration config,\n                                                                      String key) throws\n        DeployerConfigurationException {\n        try {\n            return config.configurationsAt(key);\n        } catch (Exception e) {\n            throw new DeployerConfigurationException(\"Failed to retrieve sub-configurations at '\" + key + \"'\", e);\n        }\n    }", "public Collection<Server> getAllServers() {\n        ArrayList<Server> allServers = new ArrayList<>(nonReadyServers.values());\n        allServers.addAll(servers.values());\n        return Collections.unmodifiableList(allServers);\n    }", "private void elideEvents(){\n  if (!s_eventElission) {\n    return;\n  }\n  final Iterator<QuorumStateChangeEvent> events=queue.iterator();\n  QuorumStateChangeEvent uce=null;\n  QuorumStateChangeEvent dce=null;\n  QuorumStateChangeEvent add=null;\n  while (events.hasNext()) {\n    final QuorumStateChangeEvent tst=events.next();\n    if (tst.getEventType() == QuorumStateChangeEventEnum.PIPELINE_UPSTREAM_CHANGE) {\n      if (uce != null) {\n        if (log.isDebugEnabled())         log.debug(\"Elission removal of: \" + uce);\n        queue.remove(uce);\n      }\n      uce=tst;\n    }\n else     if (tst.getEventType() == QuorumStateChangeEventEnum.PIPELINE_CHANGE) {\n      if (dce != null) {\n        tst.getDownstreamOldAndNew()[0]=dce.getDownstreamOldAndNew()[0];\n        if (log.isDebugEnabled())         log.debug(\"Elission removal of: \" + dce);\n        queue.remove(dce);\n      }\n      dce=tst;\n    }\n else     if (tst.getEventType() == QuorumStateChangeEventEnum.PIPELINE_ADD) {\n      add=tst;\n    }\n else     if (tst.getEventType() == QuorumStateChangeEventEnum.PIPELINE_REMOVE) {\n      if (add != null) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Elission removal of: \" + add);\n          log.debug(\"Elission removal of: \" + tst);\n        }\n        queue.remove(add);\n        queue.remove(tst);\n        add=null;\n      }\n      if (dce != null) {\n        if (log.isDebugEnabled())         log.debug(\"Elission removal of: \" + dce);\n        queue.remove(dce);\n        dce=null;\n      }\n      if (uce != null) {\n        if (log.isDebugEnabled())         log.debug(\"Elission removal of: \" + uce);\n        queue.remove(uce);\n        uce=null;\n      }\n    }\n  }\n}\n", "protected void decompressData(ArrayList arr) {\n\n        HashMap fstData = null; // The first data record (Map type)\n        HashMap cprData;        // The following data record which will be compressed\n        for (Object sub : arr) {\n            if (sub instanceof ArrayList) {\n                // iterate sub array nodes\n                decompressData((ArrayList) sub);\n            } else if (sub instanceof HashMap) {\n                // iterate sub data nodes\n                decompressData((HashMap) sub);\n                // Compress data for current array\n                if (fstData == null) {\n                    // Get first data node\n                    fstData = (HashMap) sub;\n                } else {\n                    cprData = (HashMap) sub;\n                    // The omitted data will be recovered to the following map; Only data item (String type) will be processed\n                    for (Object key : fstData.keySet()) {\n                        if (!cprData.containsKey(key)) {\n                            cprData.put(key, fstData.get(key));\n                        }\n                    }\n                }\n            } else {\n            }\n        }\n    }", "public static List<EmojiChar> search(String... annotations)\n    {\n        return Emoji.findByAnnotations(SPACE_JOINER.join(annotations));\n    }", "\tprotected void nodeStructureChanged() {\n\t\tfireTreeStructureChanged();\n\t}\n", "public ApnsServiceBuilder withDelegate(ApnsDelegate delegate) {\n        this.delegate = delegate == null ? ApnsDelegate.EMPTY : delegate;\n        return this;\n    }", "\tpublic void stopListeningTo(Control control) {\n\t\tif ((control != null) && !control.isDisposed()) {\n\t\t\tcontrol.removeListener(SWT.FocusOut, this);\n\t\t\tcontrol.removeListener(SWT.Modify, this);\n\t\t\tcontrol.removeListener(SWT.KeyDown, this);\n\t\t}\n\t}\n", "public boolean hasComponent ( int blockId ) { for ( int i = NUM_ ; i < length ; i ++ ) { if ( blockIdList [ i ] == blockId ) { return BOOL_ ; } } return BOOL_ ; }", "public GridClientNode node(UUID id) throws GridClientException {\n  assert id != null;\n  lock.readLock().lock();\n  try {\n    if (lastError != null)     throw new GridClientDisconnectedException(\"Topology is failed [protocol=\" + prot + \", routers=\"+ routerAddrs+ ']',lastError);\n else     return nodes.get(id);\n  }\n  finally {\n    lock.readLock().unlock();\n  }\n}\n", "private HttpHeaders createHeaders(String reportUrl, String version)\n      throws AuthenticationException {\n    HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.setAuthorization(\n        authorizationHeaderProvider.getAuthorizationHeader(sessio", "public void release ( ) { if ( _entries != null ) _entries . freeSLHolder ( _pos ) ; _pos = null ; _entries = null ; }", "    public void addExternalMedia( String filename, Object object ) {\n        externalFiles.put(filename, object);\n    }\n", "    public void addContextualElementAcquired(String element) {\n        contextualElementAcquisitionCache.add(element);\n    }\n", "private boolean Ambiguous ( String id ) { int i = NUM_ ; boolean found = BOOL_ ; while ( i < symtab . size ( ) ) { SymTabEntry se = ( SymTabEntry ) symtab . elementAt ( i ) ; if ( se . useThis . equals ( id ) ) { if ( ! found ) found = BOOL_ ; else return BOOL_ ; } i = i + NUM_ ; } return BOOL_ ; }", "public Matrix transpose()\n    {\n        double tv[][] = new double[nCols][nRows];  // transposed values\n\n        // Set the values of the transpose.\n        for (int r = 0; r < nRows; ++r) {\n            for (int c = 0; c < nCols; ++c) {\n                tv", "    public int validateLoginPassword( String loginID, String password ){\n        return database.checkLoginPassword( loginID, password );\n    }\n", "public void removeMPDestinationChangeListener(MPDestinationChangeListener destinationChangeListener)\n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(tc, \"removeMPDestinationChangeListener\",\n        new Object[]{destinationChangeListener});\n\n    _destinationChangeListeners.remove(destinationChangeListener);\n\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.exit(tc, \"removeMPDestinationChangeListener\");\n  }", "    public String getUniqueAvatarName() {\n        // Simply loop through and find the first name that isn't take. We\n        // assume this should not take a long amount of time (or loop forever).\n        // We synchronize because we access the Map of avatars\n        synchronized (this) {\n            int i = 1;\n            while (true) {\n                String avatarName = BUNDLE.getString(\"NewAvatar\");\n                avatarName = MessageFormat.format(avatarName, i);\n                if (avatarMap.containsKey(avatarName) == false) {\n                    return avatarName;\n                }\n                i++;\n            }\n        }\n    }\n", "public void releaseExternalResources() {\n\n        if (!isClosed.get()) {\n            logger.info(\"Releasing all ParallelClient resources... \");\n            ActorConfig.shutDownActorSystemForce();\n            httpClientStore.shutdown();\n            tcpSshPingResourceStore.shutdown();\n            cleanWaitTaskQueue();\n            cleanInprogressJobMap();\n            isClosed.set(true);\n            logger.info(\"Have released all ParallelClient resources \"\n                    + \"(actor system + async+sync http client + task queue)\"\n                    + \"\\nNow safe to stop your application.\");\n\n        } else {\n            logger.debug(\"NO OP. ParallelClient resources have already been released.\");\n        }\n\n    }", "public void writeBytes ( DataOutput out ) throws IOException { out . writeLong ( mostSig ) ; out . writeLong ( leastSig ) ; }", "\tpublic void setProperty(String property, String value) {\n\t\tthis.properties.put(property, value);\n\t\tthis.notifyObservers(property);\n\t}\n", "\tpublic Object get() {\n\t\tPerson person = (Person) property().bean();\n\t\tif ((person.forename().isNull()) && (person.surname().isNull())) {\n\t\t    return null;\n\t\t}\n\t\t\n\t\tStringBuffer buf = new StringBuffer();\n\t\tif (person.forename().isEmpty() == false) {\n\t\t\tbuf.append(person.forename().get());\n\t\t}\n\t\tif (person.surname().isEmpty() == false) {\n\t\t\tif (buf.length() > 0) {\n\t\t\t\tbuf.append(' ');\n\t\t\t}\n\t\t\tbuf.append(person.surname().get());\n\t\t}\n\t\treturn buf.toString();\n\t}\n", "public void waitToFinish(){\n  flush();\n  if (future != null) {\n    try {\n      future.get();\n    }\n catch (    InterruptedException|ExecutionException e) {\n      LOG.error(e.getMessage());\n    }\n  }\n  LOG.info(\"All tasks done!\");\n}\n", "public long totalTimeMS ( ) { return totalTime ( ) / NUM_ ; }", "public static int realignTo ( boolean logRealign , double val , boolean roundUp , int gridSize ) { double alignedVal = val ; double mod = val % gridSize ; if ( mod != NUM_ ) { alignedVal -= mod ; if ( val > NUM_ && roundUp ) { alignedVal += gridSize ; } i", "public byte[] generate(){\n  DexOptions options=new DexOptions();\n  options.targetApiLevel=DexFormat.API_NO_EXTENDED_OPCODES;\n  DexFile outputDex=new DexFile(options);\n  for (  TypeDeclaration typeDeclaration : types.values()) {\n    outputDex.add(typeDeclaration.toClassDefItem());\n  }\n  try {\n    return outputDex.toDex(null,false);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}\n", "public IAtom getNextUnplacedHeavyAtomWithAliphaticPlacedNeighbour(IAtomContainer molecule) {\n        Iterator<IBond> bonds = molecule.bonds().iterator();\n        while (bonds.hasNext()) {\n            IBond bond = bonds.next();\n            if (bond.getBegin().getFlag(CDKConstants.ISPLACED) && !(bond.getEnd().getFlag(CDKConstants.ISPLACED))) {\n                if (isAliphaticHeavyAtom(bond.getEnd())) {\n                    return bond.getEnd();\n                }\n            }\n            if (bond.getEnd().getFlag(CDKConstants.ISPLACED) && !(bond.getBegin().getFlag(CDKConstants.ISPLACED))) {\n                if (isAliphaticHeavyAtom(bond.getBegin())) {\n                    return bond.getBegin();\n                }\n            }\n        }\n        return null;\n    }", "\tprotected void createEditPolicies()\t{\n\t\tinstallEditPolicy(EditPolicy.CONTAINER_ROLE, new SchemaContainerEditPolicy());\n\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, null);\n\t}\n", "Union1 < First > first ( First single ) ;", "\tpublic void incrementRank(){\n\t\tthis.rank++;\n\t}\n", "public void setSymbolAvoidEdges( Boolean value) {\n    PropertyValue propertyValue = symbolAvoidEdges(value);\n    constantPropertyUsageMap.put(PROPERTY_SYMBOL_AVOID_EDGES, propertyValue);\n    layer.setProperties(propertyValue);\n  }", "private < R extends Response > Promise < R , ResourceException > evaluateOnResponse ( final Context context , final Request request , final R response ) { if ( onResponse != null ) { logger . info ( STR_ , context . getId ( ) ) ; ScriptEntry scriptEntry = onResponse . getRight ( ) ; if ( ! scriptEntry . isActive ( ) ) { return new ServiceUnavailableException ( STR_ + onResponse . getRight ( ) . getName ( ) ) . asPromise ( ) ; } Script script = populateScript ( scriptEntry , context , request ) ; script . put ( STR_ , response ) ; try { evalScript ( script , onResponse . getLeft ( ) , onResponse . getRight ( ) . getName ( ) ) ; } catch ( ResourceException e ) { return e . asPromise ( ) ; } } return newResultPromise ( response ) ; }", "protected void prepareDataSet(){\n  dataSet1=Arrays.asList(new String[]{\"a\",\"b\",\"c\"});\n  dataSet2=Arrays.asList(new String[]{\"d\",\"e\",\"f\"});\n  dataSet3=Arrays.asList(new String[]{\"b\",\"c\",\"a\",\"d\"});\n}\n", "public void startCDATA ( ) { theNextState = S_CDATA ; }", "public final boolean isPrivate ( ) { return ( getModifiers ( ) & Modifier . PRIVATE ) != NUM_ ; }", "public void selectField(ScreenField sfCurrent, int iSelectField)\n    {\n        ScreenField sField = this.getComponentAfter(sfCurrent, iSelectField);\n        if (sField != null)\n            sField.requestFocus();\n    }", "public void print(double x){\n  out.print(x);\n  out.flush();\n}\n", "public <T>SimpleReactStream<T> fromPublisher(final Publisher<? extends T> publisher){\n  Objects.requireNonNull(publisher);\n  final SeqSubscriber<T> sub=SeqSubscriber.subscriber();\n  publisher.subscribe(sub);\n  return sub.toSimpleReact(this);\n}\n", "public HttpURLConnection createHttpURLConnection(URL url, boolean proxy) throws URLConnectionFailureException {\n        if (proxy) {\n            return createHttpURLConnection(url);\n        }\n        HttpURLConnection conn = null;\n        try {\n            conn = (HttpURLConnection) url.openConnection();\n            final int timeout = settings.getInt(Settings.KEYS.CONNECTION_TIMEOUT, 10000);\n            conn.setConnectTimeout(timeout);\n            conn.setInstanceFollowRedirects(true);\n        } catch (IOException ioe) {\n            throw new URLConnectionFailureException(\"Error getting connection.\", ioe);\n        }\n        configureTLS(url, conn);\n        return conn;\n    }", "  public void setName(String v) {\n    if (MedlineField_Type.featOkTst && ((MedlineField_Type)jcasType).casFeat_name == null)\n      jcasType.jcas.throwFeatMissing(\"name\", \"onto.typesys.MedlineField\");\n    jcasType.ll_cas.ll_setStringValue(addr, ((MedlineField_Type)jcasType).casFeatCode_name, v);}    \n", "\tprivate boolean isHead(StartElement se) {\n\t\treturn se.getName().getLocalPart().equals(\"head\");\n\t}\n", "public synchronized int write ( InputStream in ) throws IOException { int readCount = NUM_ ; int inBufferPos = count - filledBufferSum ; int n = in . read ( currentBuffer , inBufferPos , currentBuffer . length - inBufferPos ) ; while ( n != - NUM_ ) { readCount += n ; inBufferPos += n ; count += n ; if ( inBufferPos == currentBuffer . length ) { needNewBuffer ( currentBuffer . length ) ; inBufferPos = NUM_ ; } n = in . read ( currentBuffer , inBufferPos , currentBuffer . length - inBufferPos ) ; } return readCount ; }", "public static void deleteDirectory(final File directory) throws IOException {\n  if (!directory.exists()) {\n    return;\n  }\n  if (!isSymlink(directory)) {\n    cleanDirectory(directory);\n  }\n  if (!directory.delete()) {\n    final String message=\"Unable to delete directory \" + directory + \".\";\n    throw new IOException(message);\n  }\n}\n", "private void computeStatistics(Record record) {\n    computeStatistics(record.tip, record.host, record.inputBytes);\n  }", "public CompilerError(Exception e){\n  super(e.getMessage());\n  this.e=e;\n}\n", "public static void logInvalidTaskType ( final Logger logger , final TaskTypes type ) { logger . logMessage ( Level . INFO , STR_ + type ) ; }", "public void add(T object,int inc){\n  Integer current=map.get(object);\n  if (current == null) {\n    current=Integer.valueOf(inc);\n  }\n else {\n    current=Integer.valueOf(current.intValue() + inc);\n  }\n  map.put(object,current);\n}", "    protected HttpTokenList getAllow() {\n\tif (allowed != null) {\n\t    return allowed;\n\t}\n\tint size = 5; // the default HEAD GET OPTIONS POST TRACE\n\tif (getPutableFlag()) {\n\t    size++;\n\t}\n\tif (getAllowDeleteFlag()) {\n\t    size++;\n\t}\n\tString allow_str[] = new String[size];\n\tint i = 0;\n\tif (getAllowDeleteFlag()) {\n\t    allow_str[i++] = \"DELETE\";\n\t}\n\tallow_str[i++] = \"HEAD\";\n\tallow_str[i++] = \"GET\";\n\tallow_str[i++] = \"OPTIONS\";\n\tallow_str[i++] = \"POST\";\n\tif (getPutableFlag()) {\n\t    allow_str[i++] = \"PUT\";\n\t}\n\tallow_str[i] = \"TRACE\";\n\tallowed = HttpFactory.makeStringList(allow_str);\n\treturn allowed;\n    }\n", "private static String getLeadingZeros(int i, int size)\n\t{\n\t\tassert i <= size;\n\t\tint w1 = (int) Math.floor(Math.log10(size));\n\t\tint w2 = (int) Math.floor(Math.log10(i));\n\t\t\n\t\tString s = \"\";\n\n\t\tfor (int j = w2; j < w1; j++)\n\t\t{\n\t\t\ts += \"0\";\n\t\t}\n\t\treturn s;\n\t}", "    public void setResourceReference(ResourceReference reference) {\n\tthis.reference = reference;\n\treference.updateContext(this);\n    }\n", "\tpublic  void pmFileHistory(JTable where, int x, int y){\n\t\t// Toplevel Menu\n\t\t//int[] rows = where.getSelectedRows();\n\t\tJPopupMenu mypm = new JPopupMenu(\"File History Menu\");\n\t\tgeneratePopupMenu(mypm, new String[]{\n\t\t\t\t\"<html><b>Open</b></html>\",\n\t\t\t\t\"Show In Explorer\",\n\t\t\t\t\"Copy Path\",\n\t\t\t\t\"separator\",\n\t\t\t\t\"Clear\",\n//\t\t\t\t\"separator\",\n//\t\t\t\t\"Toggle Fullscreen (double leftclick / F11)\"\n\t\t}, new Object[][]{\n\t\t\t\t{where},\n\t\t\t\t{where},\n\t\t\t\t{where},\n\t\t\t\tnull,\n\t\t\t\tnull,\n//\t\t\t\tnull,\n//\t\t\t\tnull\n\t\t}, \"FileHistory\");\n\t\tmypm.show(where, x, y);\n\t\treturn ;\n\t}\n", "@Override protected boolean handleMovement(final RPEntity entity){\n  if (rand.nextDouble() < probability) {\n    doDamage(entity);\n  }\n  return true;\n}\n", "public MapWidget(Bundle bundle,Context context,String rootMapFolder,int initialZoomLevel){\n  super(context);\n  initCommonStuff(context);\n  String configPath=OfflineMapUtil.getConfigFilePath(rootMapFolder);\n  try {\n    MapConfigParser configParser=new MapConfigParser(rootMapFolder);\n    config=configParser.parse(context,configPath);\n    tileProvider=new AssetTileProvider(getContext(),config);\n    int maxZoomLevel=OfflineMapUtil.getMaxZoomLevel(config.getImageWidth(),config.getImageHeight());\n    int zoomLevel=initialZoomLevel;\n    float scale=1.0f;\n    if (bundle != null) {\n      if (bundle.containsKey(\"com.ls.zoomLevel\"))       zoomLevel=bundle.getInt(\"com.ls.zoomLevel\");\n      if (bundle.containsKey(\"com.ls.scale\"))       scale=bundle.getFloat(\"com.ls.scale\");\n    }\n    if (zoomLevel > maxZoomLevel) {\n      grid=new Grid(this,config,tileProvider,maxZoomLevel);\n      if (scale == 1.0f) {\n        scale=(float)Math.pow(2,zoomLevel - maxZoomLevel);\n      }\n    }\n else {\n      grid=new Grid(this,config,tileProvider,zoomLevel);\n    }\n    this.scale=scale;\n    grid.setInternalScale(scale);\n    initPositionPin();\n    restoreMapPosition(bundle);\n  }\n catch (  SAXException e) {\n    Log.e(TAG,\"Exception: \" + e);\n    e.printStackTrace();\n  }\ncatch (  IOException e) {\n    Log.e(TAG,\"Exception: \" + e);\n    e.printStackTrace();\n  }\n}\n", "ChangeApi id ( String id ) throws RestApiException ;", "\tpublic boolean loadTopic(String name) {\n\t\tfor (NoteData noteData : topics) {\n\t\t\tif (noteData.getTopic().equals(name)) {\n\t\t\t\tif (noteData == currentTopic) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\ttopic.setText(name);\n\t\t\t\t\n\t\t\t\tif (currentTopic != null) {\n\t\t\t\t\tcurrentTopic.collectData(topicNote);\n\t\t\t\t}\n\t\t\t\tnoteData.createData(topicNote);\n\t\t\t\ttopicNote.setLineBullet(0, 1, topicNote.getBullets().get(0));\n\t\t\t\t\n\t\t\t\tcurrentTopic = noteData;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t\t\n\t}\n", "void deletedSectionComment ( Section section , IComment comment ) ;", "public String getStringValue(String elemName)\n    {\n        if (_valueMap.containsKey(elemName))\n            return _valueMap.get(elemName).toString();\n        return null;\n    }", "private void registerProjects() throws ExitCodeException, N4JSCompileException {\n  if (projectLocations == null) {\n    throw new ExitCodeException(EXITCODE_WRONG_CMDLINE_OPTIONS,\"Require option for projectlocations.\");\n  }\n else {\n    HeadlessHelper.registerProjects(convertToFilesAddTargetPlatformAndCheckWritableDir(projectLocations),fbWorkspace);\n  }\n}\n", "private static String deleteQuotes(String quotedString){\n  int indexOfQuote=quotedString.indexOf('\\'');\n  if (indexOfQuote < 0) {\n    int newLength=quotedString.length();\n    while (newLength > 0 && AsciiFuncs.isWhitespace(quotedString.charAt(newLength - 1))) {\n      newLength--;\n    }\n    return quotedString.substring(0,newLength);\n  }\n else {\n    int lastIndexOfQuote=0;\n    StringBuffer sb=new StringBuffer(quotedString.length());\n    while (indexOfQuote >= 0) {\n      sb.append(quotedString,lastIndexOfQuote,indexOfQuote);\n      lastIndexOfQuote=indexOfQuote + 1;\n      indexOfQuote=quotedString.indexOf('\\'',lastIndexOfQuote + 1);\n    }\n    sb.append(quotedString,lastIndexOfQuote,quotedString.length());\n    int newLength=sb.length();\n    while (newLength > 0 && AsciiFuncs.isWhitespace(sb.charAt(newLength - 1))) {\n      newLength--;\n    }\n    sb.setLength(newLength);\n    return sb.toString();\n  }\n}\n", "public void addRecord(String messageId,int i,double d){\n  if (m_msgData == null) {\n    m_msgData=new TreeMap<String,LogNormalScore.MsgData>();\n    m_minLambda=1;\n  }\n  final MsgData data=new MsgData();\n  data.m_totalLogCounts=i;\n  data.m_lambda=d;\n  m_msgData.put(messageId,data);\n  m_minLambda=Math.min(data.m_lambda,m_minLambda);\n  m_totalIntervalCount=1;\n}\n", "public static boolean isJCB(String cc) {\r\n        String first4digs = cc.substring(0, 4);\r\n\r\n        if ((cc.length() == 16) &&\r\n            (first4digs.equals(\"3088\") ||\r\n                first4digs.equals(\"3096\") ||\r\n                first4digs.equals(\"3112\") ||\r\n                first4digs.equals(\"3158\") ||\r\n                first4digs.equals(\"3337\") ||\r\n                first4digs.equals(\"3528\")))\r\n            return isCreditCard(cc);\r\n        return false;\r\n    }", "public synchronized void remove(final IProgressOperation operation){\n  m_operations.remove(operation);\n  for (  final IGlobalProgressManagerListener listener : m_listeners) {\n    try {\n      listener.removed(operation);\n    }\n catch (    final Exception exception) {\n      CUtilityFunctions.logException(exception);\n    }\n  }\n}\n", "protected AbstractManagedObjectDefinition(String name,AbstractManagedObjectDefinition<? super C,? super S> parent){\n  this.name=name;\n  this.parent=parent;\n  if (parent != null) {\n    registerInParent();\n    for (    PropertyDefinition<?> pd : parent.getAllPropertyDefinitions()) {\n      allPropertyDefinitions.put(pd.getName(),pd);\n    }\n    for (    RelationDefinition<?,?> rd : parent.getAllRelationDefinitions()) {\n      allRelationDefinitions.put(rd.getName(),rd);\n    }\n    for (    AggregationPropertyDefinition<?,?> apd : parent.getAllAggregationPropertyDefinitions()) {\n      allAggregationPropertyDefinitions.put(apd.getName(),apd);\n    }\n  }\n}\n", "public void resourceCopied(ISVNRemoteResource source,ISVNRemoteFolder destination){\n  Iterator it=listeners.iterator();\n  while (it.hasNext()) {\n    IRepositoryListener listener=(IRepositoryListener)it.next();\n    listener.remoteResourceCopied(source,destination);\n  }\n}\n", "private void updateJobWithSplit(final JobConf job, InputSplit inputSplit) {\n    if (inputSplit instanceof FileSplit) {\n      FileSplit fileSplit = (FileSplit) inputSplit;\n      job.set(\"map.input.file\", fileSplit.getPath().toString());\n      job.setLong(\"map.input.start\", fileSplit.getStart());\n      job.setLong(\"map.input.length\", fileSplit.getLength());\n    }\n    LOG.info(\"split: \" + inputSplit.toString());\n  }", "public void onCompleted ( String srcFile , String targetFile , long totalBytes ) ;", "public final double doOperation() throws OperatorFailedException {\n  int randomSite=(int)(Math.random() * siteCount);\n  int currentCategory=(int)categoryParameter.getParameterValue(randomSite);\n  siteModel.subtractSitesInCategoryCount(currentCategory);\n  int[] temp=new int[categoryCount - 1];\n  int count=0;\n  for (int i=0; i < categoryCount; i++) {\n    if (i != currentCategory) {\n      temp[count]=i;\n      count++;\n    }\n  }\n  int newCategory=temp[(int)(Math.random() * temp.length)];\n  categoryParameter.setParameterValue(randomSite,newCategory);\n  siteModel.addSitesInCategoryCount(newCategory);\n  return 0.0;\n}\n", "\t\t\tpublic void onKeyUp(KeyUpEvent event) {\n\t\t\t\tif (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {\n\t\t\t\t\tloginToServer();\n\t\t\t\t}\n\t\t\t}\n", "public void doRemove() throws DBException\n    {\n        try   {\n            synchronized (this.getSyncObject())\n            {   // In case this is called from another task\n                m_tableRemote.remove(null, this.getRecord().getOpenMode());\n       ", "public boolean hasNext ( ) { return nextLine != null ; }", "private void readMimeFile(Reader mimeFile) throws IOException {\n  mimeMap=new HashMap<String,AdaptiveRate>();\n  BufferedReader reader=new BufferedReader(mimeFile);\n  String line=null;\n  String[] splits=null;\n  while ((line=reader.readLine()) != null) {\n    if (StringUtils.isNotBlank(line) && !line.startsWith(\"#\")) {\n      splits=line.split(\"\\t\");\n      if (splits.length == 3) {\n        mimeMap.put(StringUtils.lowerCase(splits[0]),new AdaptiveRate(new Float(splits[1]),new Float(splits[2])));\n      }\n else {\n        LOG.warn(\"Invalid configuration line in: \" + line);\n      }\n    }\n  }\n}\n", "protected static void deleteNodes ( final CConnection connection , final int viewId ) throws SQLException { final String query = STR_ + CTableNames . NODES_TABLE + STR_ + viewId ; connection . executeUpdate ( query , BOOL_ ) ; }", "public NetworkResponse performRequest ( Request < ? > request ) throws VolleyError ;", "\t\tpublic String entityTypeName() {\n\t\t\treturn \"KeyDev\";\n\t\t}\n", "private void compile(){\n  if (has(CANON_EQ) && !has(LITERAL)) {\n    normalize();\n  }\n else {\n    normalizedPattern=pattern;\n  }\n  patternLength=normalizedPattern.length();\n  temp=new int[patternLength + 2];\n  hasSupplementary=false;\n  int c, count=0;\n  for (int x=0; x < patternLength; x+=Character.charCount(c)) {\n    c=normalizedPattern.codePointAt(x);\n    if (isSupplementary(c)) {\n      hasSupplementary=true;\n    }\n    temp[count++]=c;\n  }\n  patternLength=count;\n  if (!has(LITERAL))   RemoveQEQuoting();\n  buffer=new int[32];\n  groupNodes=new GroupHead[10];\n  namedGroups=null;\n  if (has(LITERAL)) {\n    matchRoot=newSlice(temp,patternLength,hasSupplementary);\n    matchRoot.next=lastAccept;\n  }\n else {\n    matchRoot=expr(lastAccept);\n    if (patternLength != cursor) {\n      if (peek() == ')') {\n        throw error(\"Unmatched closing ')'\");\n      }\n else {\n        throw error(\"Unexpected internal error\");\n      }\n    }\n  }\n  if (matchRoot instanceof Slice) {\n    root=BnM.optimize(matchRoot);\n    if (root == matchRoot) {\n      root=hasSupplementary ? new StartS(matchRoot) : new Start(matchRoot);\n    }\n  }\n else   if (matchRoot instanceof Begin || matchRoot instanceof First) {\n    root=matchRoot;\n  }\n else {\n    root=hasSupplementary ? new StartS(matchRoot) : new Start(matchRoot);\n  }\n  temp=null;\n  buffer=null;\n  groupNodes=null;\n  patternLength=0;\n  compiled=true;\n}\n", "@Override\n    protected void checkDataDefinitions(StreamTokenizer streamTokenizer) throws FSMParseException {\n        if (acceptIndex == -1) {\n            throw new FSMParseException(String.format(ACCEPT_NOT_FOUND, acceptingDataVariableName),\n                                        streamTokenizer);\n        }\n    }", "public static byte[] toByteArray(final File tmpFile) throws IOException\n\t{\n\t\tbyte[] data = null;\n\t\tif (tmpFile.exists() && !tmpFile.isDirectory())\n\t\t{\n\t\t\ttry (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(tmpFile));\n\t\t\t\tByteArrayOutputStream bos = new ByteArrayOutputStream(FileConst.KILOBYTE);)\n\t\t\t{\n\t\t\t\tStreamExtensions.writeInputStreamToOutputStream(bis, bos);\n\t\t\t\tdata = bos.toByteArray();\n\t\t\t}\n\t\t}\n\t\treturn data;\n\t}", "private void addOuToTable(CmsOrganizationalUnit ou) {\n\n        if (m_app.isParentOfManagableOU(ou.getName())) {\n            Item item = m_container.addItem(ou.getName());\n            if (item != null) {\n                item.getItemProperty(TableProperty.Name).setValue(ou.getName());\n                item.getItemProperty(TableProperty.Description).setValue(ou.getDisplayName(A_CmsUI.get().getLocale()));\n                if (ou.hasFlagWebuser()) {\n                    item.getItemProperty(TableProperty.Icon).setValue(new CmsCssIcon(OpenCmsTheme.ICON_OU_WEB));\n                }\n            }\n        }\n    }", "\tpublic double getMinBalance() {\n\t\trefreshMinMax();\n\t\treturn this.minBalance;\n\t}\n", "public AbstractScanner(String fileName,Reader reader,Properties properties,ErrorManager err){\n  this.fileName=fileName;\n  this.properties=properties;\n  this.err=err;\n  if (reader instanceof PushLineBackReader) {\n    this.reader=(PushLineBackReader)reader;\n  }\n else {\n    this.reader=new PushLineBackReader(reader);\n  }\n}\n", "@MainThread\n    protected <I> Observable<I> intent(ViewIntentBinder<V, I> binder) {\n        Subject<I> intentRelay = UnicastSubject.create();\n        intentRelaysBinders.add(new IntentRelayBinderPair<I>(intentRelay, binder));\n        return intentRelay;\n    }", "final boolean tryMatchData(){\n  Object x=item;\n  if (x != null && x != this && casItem(x,null)) {\n    LockSupport.unpark(waiter);\n    return true;\n  }\n  return false;\n}\n", "public boolean isGettingFull ( ) { return slotPosition ( getNumRecords ( ) + NUM_ ) >= Buffer . BUFFER_SIZE ; }", "public void addTableHeader ( final JTableHeader newTableHeader ) { if ( ! _registredTableHeaders . contains ( newTableHeader ) ) { if ( _tableHeader == null ) { _tableHeader = newTableHeader ; } newTableHeader . addMouseListener ( _mouseListener ) ; newTa", "public DefaultErrorDTO ( String code , String message , Map < String , Object > metadata ) { this . code = code ; this . message = message ; if ( metadata == null ) metadata = Collections . emptyMap ( ) ; this . metadata = ( metadata . isEmpty ( ) ) ? Collections . < String , Object > emptyMap ( ) : Collections . unmodifiableMap ( new HashMap < > ( metadata ) ) ; }", "    public void add (Placeholder child) {\n        \n        add ( child, _children.size () ) ;\n    }\n", "@Override public int hashCode(){\n  return content.hashCode();\n}\n", "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=new Vector<Option>();\n  result.addElement(new Option(\"\\tEnables debugging output (if available) to be printed.\\n\" + \"\\t(default: off)\",\"output-debug-info\",0,\"-output-debug-info\"));\n  result.addElement(new Option(\"\\tTurns off all checks - use with caution!\\n\" + \"\\t(default: checks on)\",\"no-checks\",0,\"-no-checks\"));\n  return result.elements();\n}\n", "@Override\r\n    public String getClassNameForTable(final Table table) {\r\n        final StringBuilder classNameBuilder = new StringBuilder();\r\n        final List<String> words = new ArrayList<>(Arrays.asList(table.getName()\r\n                .toUpperCase()\r\n                .replaceAll(\"(^[0-9]+|[^A-Z0-9_-])\", \"\") // Delete every not-alphanumeric or _/- character and numbers at beginning\r\n                .split(\"_\")));\r\n        words.removeAll(Arrays.asList(\"\", null));\r\n        for (String word : words) {\r\n            classNameBuilder.append(word.substring(0, 1)); // First letter as uppercase\r\n            classNameBuilder.append(word.substring(1).toLowerCase()); // Remaining string as lowercase\r\n        }\r\n\r\n        return classNameBuilder.toString();\r\n    }", "public void init ( ) throws ServletException { }", "public long mean ( ) { return ( long ) deltaMean . get ( ) ; }", "    public void setAnimation(Animation animation) {\n        if(animation != null) {\n            this.animation = animation;\n        } else {\n            throw new IllegalArgumentException(\"Animation parameter is null!\");\n        }\n    }\n", "public static boolean isExtension(String filename,String extension){\n  if (filename == null)   return false;\n  if (extension == null || extension.length() == 0)   return indexOfExtension(filename) == -1;\n  String fileExt=getExtension(filename);\n  return fileExt.equals(extension);\n}\n", "public boolean getWriteAccess(String userId) {\n    if (StringUtil.isEmpty(userId)) {\n      return false;\n    }\n    Permissions permissions = permissionsById.get(userId);\n    return permissions != null && permissions.getWritePermission();\n  }", "private void postJoinGroupMembersError(final JoinGroupCompletionListener completionListener, final String errorMessage) {\n        new Handler(Looper.getMainLooper()).post(new Runnable() {\n            @Override\n            public void run() {\n                if (null != completionListener) {\n                    completionListener.onError(errorMessage);\n                }\n            }\n        });\n    }", "public GlobalizationPreferences setLocales(String acceptLanguageString) {\n        if (isFrozen()) {\n            throw new UnsupportedOperationException(\"Attempt to modify immutable object\");\n        }\n        ULocale[] acceptLocales = null;\n        try {\n            acceptLocales = ULocale.parseAcceptLanguage(acceptLanguageString, true);\n        } catch (ParseException pe) {\n            //TODO: revisit after 3.8\n            throw new IllegalArgumentException(\"Invalid Accept-Language string\");\n        }\n        return setLocales(acceptLocales);\n    }", "public boolean hasHadResponseDelivered ( ) { return mResponseDelivered ; }", "public PooledConnection acquire(Supplier<PooledConnection> supplier){\n  PooledConnection poll=queue.poll();\n  if (poll == null) {\n    poll=supplier.get();\n  }\n  acquiredConnections.add(poll);\n  if (isTerminating.get()) {\n    acquiredConnections.remove(poll);\n    poll.dispose();\n    throw new IllegalStateException(\"Pool has been closed, cannot acquire new values.\");\n  }\n  return poll;\n}\n", "public void testRenameSchema ( ) throws ReplicatorException , InterruptedException , IOException { PrintWriter out = new PrintWriter ( new FileWriter ( definitionsFile ) ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . close ( ) ; RenameFilter rf = new RenameFilter ( ) ; rf . setTungstenSchema ( STR_ ) ; rf . setDefinitionsFile ( definitionsFile ) ; filterHelper . setFilter ( rf ) ; assertSchemaTableChanged ( STR_ , STR_ , STR_ , STR_ ) ; assertSchemaTableChanged ( STR_ , STR_ , STR_ , STR_ ) ; assertSchemaTableChanged ( STR_ , STR_ , STR_ , STR_ ) ; assertSchemaTableChanged ( STR_ , STR_ , STR_ , STR_ ) ; assertSchemaTableChanged ( STR_ , STR_ , STR_ , STR_ ) ; assertSchemaTableChanged ( STR_ , STR_ , STR_ , STR_ ) ; assertSchemaTableChanged ( STR_ , STR_ , STR_ , STR_ ) ; assertSchemaTableChanged ( STR_ , STR_ , STR_ , STR_ ) ; filterHelper . done ( ) ; }", "public boolean isStandby ( ) { return getRole ( ) . equals ( DataSourceRole . standby . toString ( ) ) ; }", "public void waitForCompletion(final int waitTime) {\n    LOG.info(\"Waiting for the Job Driver to complete: \" + waitTime);\n    if (waitTime == 0) {\n      close(0);\n      return;\n    } else if (waitTime < 0) {\n      waitTillDone();\n    }\n    final long endTime = System.currentTimeMillis() + waitTime * 1000;\n    close(endTime);\n  }", "   private void readUnion(InputNode node, Object source, LabelMap map, Label label) throws Exception {\n      Object value = readInstance(node, source, label);\n      Collection<String> list = label.getPaths(context);\n      \n      for(String key : list) {\n         Label union = map.getLabel(key);\n         \n         if(label.isInline()) {\n            criteria.set(union, value);\n         }\n      }\n   }\n", "public String encode(){\n  String addressStr=null;\n  if (address != null) {\n    addressStr=address.encode();\n    if (Host.isIPv6Reference(addressStr)) {\n      addressStr=addressStr.substring(1,addressStr.length() - 1);\n    }\n  }\n  return ORIGIN_FIELD + username + Separators.SP+ sessIdString+ Separators.SP+ sessVersionString+ Separators.SP+ nettype+ Separators.SP+ addrtype+ Separators.SP+ addressStr+ Separators.NEWLINE;\n}\n", "  public boolean checkLogedIn(){\n    return false;\n  }\n", "private static @Nullable\n    User getOrCreateById(@Nonnull String id, @Nonnull String fullName, boolean create) {\n        User u = AllUsers.get(id);\n        if (u == null && (create || UserIdMapper.getInstance().isMapped(id))) {\n            u = new User(id, fullName);\n            AllUsers.put(id, u);\n            if (!id.equals(fullName) && !UserIdMapper.getInstance().isMapped(id)) {\n                try {\n                    u.save();\n                } catch (IOException x) {\n                    LOGGER.log(Level.WARNING, \"Failed to save user configuration for \" + id, x);\n                }\n            }\n        }\n        return u;\n    }", "public static <T extends LocalizableResource> void put(Class<T> cls, T m) {\n        put(cls, null, m);\n    }", "private ProgressDialog ( ) { }", "\tpublic Coordinate left() {\n\t\treturn new Coordinate(this.x - 1, this.y);\n\t}\n", "void entering ( File directory ) ;", "public static Effect parseEffect(String str){\n  if (str.contains(\" ^ \")) {\n    List<BasicEffect> effects=new ArrayList<BasicEffect>();\n    for (    String split : str.split(\" \\\\^ \")) {\n      Effect subOutput=parseEffect(split);\n      effects.addAll(subOutput.getSubEffects());\n    }\n    return new Effect(effects);\n  }\n else {\n    if (str.contains(\"Void\")) {\n      return new Effect(new ArrayList<BasicEffect>());\n    }\n    String var=\"\";\n    String val=\"\";\n    boolean exclusive=true;\n    boolean negated=false;\n    if (str.contains(\":=\")) {\n      var=str.split(\":=\")[0];\n      val=str.split(\":=\")[1];\n      val=(val.contains(\"{}\")) ? \"None\" : val;\n    }\n else     if (str.contains(\"!=\")) {\n      var=str.split(\"!=\")[0];\n      val=str.split(\"!=\")[1];\n      negated=true;\n    }\n else     if (str.contains(\"+=\")) {\n      var=str.split(\"\\\\+=\")[0];\n      val=str.split(\"\\\\+=\")[1];\n      exclusive=false;\n    }\n    Template tvar=Template.create(var);\n    Template tval=Template.create(val);\n    if (tvar.isUnderspecified() || tval.isUnderspecified()) {\n      return new Effect(new TemplateEffect(tvar,tval,1,exclusive,negated));\n    }\n else {\n      return new Effect(new BasicEffect(var,ValueFactory.create(val),1,exclusive,negated));\n    }\n  }\n}\n", "int read ( byte [ ] data , int offset , int length ) throws IOException ;", "public double dateToJava2D(Date date,Rectangle2D area,RectangleEdge edge){\n  double value=date.getTime();\n  return valueToJava2D(value,area,edge);\n}\n", "\tpublic boolean isMalformed() {\n\t\treturn (fFlags & FLAG_MALFORMED) != 0;\n\t}\n", "public void clear ( ) { clear ( DEFAULT_CAPACITY ) ; }", "\tpublic void rename(String name) {\n\n\t\tSystem.out.println(\"setname mailbox \" + name);\n\n\t\tString oldpath = getPath();\n\n\t\tthis.name = name;\n\n\t\tif (remote == true) {\n\t\t\tRequest r = new Request(Request.RENAME_MAILBOX, this, oldpath);\n\t\t\tr.setDismissable(false);\n\t\t\thandler.handleRequest(r);\n\t\t}\n\n\t\tMailboxEvent e = new MailboxEvent(this, this, 0);\n\n\t\tfor (int i = 0; i < mailboxListeners.size(); i++) {\n\t\t\t((MailboxListener) mailboxListeners.elementAt(i)).mailboxRenamed(e);\n\t\t}\n\n\t}\n", "\tpublic boolean isValidTokenMarkerFile() {\n\t\t//valid token marker file?\n\t\tif (m_TokenMarkerFile == null || m_TokenMarkerFile.equals(\"\")) {\n\t\t\t//invalid token marker file\n\t\t\treturn false;\n\t\t}\n\t\t//TODO: real check\n\n\t\t//valid token marker file\n\t\treturn true;\n\t}\n", "public static String wrap(String s,int n){\n  StringBuffer b=new StringBuffer();\n  boolean wrapPending=false;\n  for (int i=0; i < s.length(); i++) {\n    if (i % n == 0 && i > 0) {\n      wrapPending=true;\n    }\n    char c=s.charAt(i);\n    if (wrapPending && c == ' ') {\n      b.append(\"\\n\");\n      wrapPending=false;\n    }\n else {\n      b.append(c);\n    }\n  }\n  return b.toString();\n}\n", "private static int operatorNameToNodeSubtype ( UniqueString opId ) { String opName = opId . toString ( ) ; if ( ( opId == ASTConstants . OP_cl ) || opName . equals ( STR_ ) ) { return NodeRepresentation . AND_TYPE ; } else if ( ( opId == ASTConstants . OP", "Long getPrecisionAct() {\n\n        Integer temp = getPrecision();\n\n        if (temp == null) {\n            return ValuePool.getLong(Long.MAX_VALUE);\n        } else {\n            return ValuePool.getLong(temp.longValue());\n        }\n    }", "public static int getPrecisionFormat(@Nonnull final String mapcode) throws UnknownPrecisionFormatException {\n\n        // First, decode to ASCII.\n        final String decodedMapcode = convertStringToPlainAscii(mapcode).toUpperCase();\n\n        // Syntax needs to be OK.\n        if (!PATTERN_MAPCODE.matcher(decodedMapcode).matches()) {\n            throw new UnknownPrecisionFormatException(decodedMapcode + \" is not a correctly formatted mapcode code; \" +\n                    \"the regular expression for the mapcode code syntax is: \" + REGEX_MAPCODE);\n        }\n\n        // Precision part should be OK.\n        final Matcher matcherPrecision = PATTERN_PRECISION.matcher(decodedMapcode);\n        if (!matcherPrecision.find()) {\n            return 0;\n        }\n        final int length = matcherPrecision.end() - matcherPrecision.start() - 1;\n        assert (1 <= length) && (length <= 8);\n        return length;\n    }", "public Expression bindKeyVariable ( Value var , Value map ) { throw new RuntimeException ( STR_ ) ; }", "        public boolean isAnti(QuantumParticle qp) {\n                return (qp!=null) && (qp instanceof XiMinus);\n        }\n", "private AuthenticationPermission ( Data data , String actions ) { super ( data . name ) ; this . me = data . me ; this . peer = data . peer ; this . actions = actions ; parseActions ( ) ; }", "public static int [ ] [ ] generateAllSets ( int n , int p ) throws Exception { int numOfSets = numOfSets ( n , p ) ; int [ ] [ ] sets = new int [ numOfSets ] [ p ] ; int [ ] currentSet = new int [ p ] ; writeSetsIn ( n , p , NUM_ , NUM_ , currentSet , sets , NUM_ ) ; return sets ; }", "public Value __findObjectInCurrentScopeWithName ( String name , SemanticScope scope ) { LeftValue v = scope . getLeftValue ( name ) ; if ( v != null ) return new Ins . TLoad ( v , scope , LineCol . SYNTHETIC ) ; Ins . This aThis = scope . getThis ( ) ; if", "    public void add(Condition cond) {\n        if (cond == null) {\n            throw new IllegalArgumentException(\"Condition cannot be null\");\n        }\n        listConds.add(cond);\n    } // of method\n", "private synchronized void addTypeScriptConsoleConnectors(IConfigurationElement[] cf,List<ITypeScriptConsoleConnector> list){\n  for (  IConfigurationElement ce : cf) {\n    try {\n      list.add((ITypeScriptConsoleConnector)ce.createExecutableExtension(\"class\"));\n      Trace.trace(Trace.EXTENSION_POINT,\"  Loaded console connectors: \" + ce.getAttribute(\"class\"));\n    }\n catch (    Throwable t) {\n      Trace.trace(Trace.SEVERE,\"  Could not load console connectors: \" + ce.getAttribute(\"class\"),t);\n    }\n  }\n}\n", "public void assertTextPresent(String expected,String actual){\n  if ((actual == null) || (!actual.contains(expected))) {\n    throw new AssertionFailedError(\"expected presence of [\" + expected + \"], but was [\"+ actual+ \"]\");\n  }\n}", "    private void attachWebParamAnnotation(ParameterDescriptionComposite pdc, int order) {\n        Annotation[] orderAnnots = paramAnnotations[order];\n        for (Annotation annot : orderAnnots) {\n            if (annot instanceof WebParam) {\n                WebParam webParam = (WebParam)annot;\n                WebParamAnnot wpAnnot = WebParamAnnot.createWebParamAnnotImpl();\n                wpAnnot.setHeader(webParam.header());\n                wpAnnot.setMode(webParam.mode());\n                wpAnnot.setName(webParam.name());\n                wpAnnot.setPartName(webParam.partName());\n                wpAnnot.setTargetNamespace(webParam.targetNamespace());\n                pdc.setWebParamAnnot(wpAnnot);\n            }\n        }\n    }\n", "public void accept(Task task) {\n    \tif((activeIndex+1)%2==0)\n    \t{\n    \t\tif(!task.isInQueue0())\n    \t\t{\n    \t\t\ttaskList[0].offer(task);\n    \t\t\ttask.storedInQueue0();\n    \t\t}\n    \t}\n    \telse\n    \t{\n    \t\tif(!task.isInQueue1())\n    \t\t{\n    \t\t\ttaskList[1].offer(task);\n    \t\t\ttask.storedInQueue1();\n    \t\t}\n    \t}    \t    \t    \n    }", "    protected String getConstantPoolEntryName(int constantPoolIndex) {\n\n        try {\n            return services.getClassFile().getConstantPoolEntryName(constantPoolIndex);\n        } catch (InvalidByteCodeException ex) {\n            return \"invalid constant pool reference\";\n        }\n    }\n", "private CGlobalSettings ( ) { }", "private void removeEdges ( final INaviViewNode node ) { if ( node instanceof INaviGroupNode ) { return ; } final Set < INaviEdge > toDelete = new HashSet < INaviEdge > ( ) ; for ( final INaviEdge incomingEdge : node . getIncomingEdges ( ) ) { incomingEdge", "void unbindFromTask ( ) { setThumbnail ( null ) ; }", "public void allShowZero ( ) { mHour = NUM_ ; mMinute = NUM_ ; mSecond = NUM_ ; mMillisecond = NUM_ ; invalidate ( ) ; }", "public void setResourceContainerImageName(java.util.Collection<StringFilter> resourceContainerImageName) {\n        if (resourceContainerImageName == null) {\n            this.resourceContainerImageName = null;\n            return;\n        }\n\n        this.re", "protected Color desaturate ( Color color ) { float [ ] tmp = Color . RGBtoHSB ( color . getRed ( ) , color . getGreen ( ) , color . getBlue ( ) , null ) ; tmp [ NUM_ ] /= NUM_ ; tmp [ NUM_ ] = clamp ( NUM_ - ( NUM_ - tmp [ NUM_ ] ) / NUM_ ) ; return new C", "    public ComponentInstance createInstance(Dictionary configuration, IPojoContext context, HandlerManager[] handlers) throws ConfigurationException {\n        CompositeManager inst = new CompositeManager(this, context, handlers);\n        inst.configure(m_componentMetadata, configuration);\n        inst.start();\n        return inst;\n    }\n", "public void unloadPlugin() {\n\t\tif (!isPersistant() && isLoaded()) {\n\t\t\ttry {\n\t\t\t\tplugin.onUnload();\n\t\t\t} catch (Exception e) {\n\t\t\t\tSystem.out.println(\"Error in onUnload for \"+getName()+\":\"+e.getMessage());\n\t\t\t}\n\t\t\tplugin = null;\n\t\t\tclassloader = null;", "    public boolean isInstanceclsnameModified() {\n        return instanceclsname_is_modified; \n    }\n", "@Deprecated public Builder schedulePickupAtBeginning(CarrierShipment shipment){\n  assertIsNotNull(shipment);\n  boolean wasNew=openPickups.add(shipment);\n  if (!wasNew) {\n    throw new IllegalStateException(\"Trying to deliver something which was already picked up.\");\n  }\n  Pickup pickup=createPickup(shipment);\n  tourElements.add(0,pickup);\n  return this;\n}\n", "public void send(String sql,byte commandType) throws IOException, QueryException {\n  startPacket(0,true);\n  int charsLength=sql.length();\n  int charsOffset=0;\n  int position=4;\n  assureBufferCapacity((charsLength * 3) + 1);\n  byte[] arr=buffer.array();\n  arr[position++]=commandType;\n  while (charsOffset < charsLength) {\n    char currChar=sql.charAt(charsOffset++);\n    if (currChar < 0x80) {\n      arr[position++]=(byte)currChar;\n    }\n else     if (currChar < 0x800) {\n      arr[position++]=(byte)(0xc0 | (currChar >> 6));\n      arr[position++]=(byte)(0x80 | (currChar & 0x3f));\n    }\n else     if (currChar >= 0xD800 && currChar < 0xE000) {\n      if (currChar >= 0xD800 && currChar < 0xDC00) {\n        if (charsOffset + 1 > charsLength) {\n          arr[position++]=(byte)0x63;\n        }\n else {\n          char nextChar=sql.charAt(charsOffset);\n          if (nextChar >= 0xDC00 && nextChar < 0xE000) {\n            int surrogatePairs=((currChar << 10) + nextChar) + (0x010000 - (0xD800 << 10) - 0xDC00);\n            arr[position++]=(byte)(0xf0 | ((surrogatePairs >> 18)));\n            arr[position++]=(byte)(0x80 | ((surrogatePairs >> 12) & 0x3f));\n            arr[position++]=(byte)(0x80 | ((surrogatePairs >> 6) & 0x3f));\n            arr[position++]=(byte)(0x80 | (surrogatePairs & 0x3f));\n            charsOffset++;\n          }\n else {\n            arr[position++]=(byte)0x63;\n          }\n        }\n      }\n else {\n        arr[position++]=(byte)0x63;\n      }\n    }\n else {\n      arr[position++]=(byte)(0xe0 | ((currChar >> 12)));\n      arr[position++]=(byte)(0x80 | ((currChar >> 6) & 0x3f));\n      arr[position++]=(byte)(0x80 | (currChar & 0x3f));\n    }\n  }\n  if (position - 4 < maxPacketSize && !useCompression) {\n    arr[0]=(byte)((position - 4) & 0xff);\n    arr[1]=(byte)((position - 4) >>> 8);\n    arr[2]=(byte)((position - 4) >>> 16);\n    arr[3]=(byte)0;\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"send packet seq:\" + seqNo + \" length:\"+ (position - 4)+ \" data:\"+ Utils.hexdump(arr,maxQuerySizeToLog,4,position - 4));\n    }\n    outputStream.write(arr,0,position);\n  }\n else {\n    sendDirect(arr,5,position - 5,commandType);\n  }\n}\n", "    public void actionPerformed(@SuppressWarnings(\"unused\") ActionEvent event){\n        final String className = JavaLang.getThisClassName();\n        final String methodName = JavaLang.getThisMethodName();\n        LOG.entering(className, methodName);\n        \n        LOG.finer(\"test isExpanded\");\n        if (this.isExpanded()){\n            LOG.finer(\"call collapse\");\n            this.collapse();\n        } // end if\n        else {\n            LOG.finer(\"call expand\");\n            this.expand();\n        } // end else\n        \n        // change expand to collapse and so on\n        //this.mExpanded = !this.mExpanded;\n        \n        LOG.exiting(className, methodName);\n    } // end\n", "            protected void findNext() {\n                while(iter.hasNext()) {\n                    next = iter.next();\n                    if(numberTrue(next.getParentHousehold()) > 0)\n                        break;\n                    else\n                        // Flag end-of-list in case we can't find a valid element.\n                        next = null;\n                }\n            }\n", "\tpublic IS1EngBLURLProtocolEditObj newEditInstance( IS1EngBLURLProtocolObj orig ) {\n\t\tfinal String S_ProcName=\"S1EngURLProtocolObj.newEditInstance() \";\n\t\tthrow new RuntimeException( S_ProcName + \"Implementation must be overridden\" );\n\t}\n", "public void loadAnimation(GVRAndroidResource animResource, String boneMap)\n    {\n        String filePath = animResource.getResourcePath();\n        GVRContext ctx = mAvatarRoot.getGVRContext();\n        GVRResourceVolume volume = new GVRResourceVolume(ctx, animResource);\n\n        if (filePath.endsWith(\".bvh\"))\n        {\n            GVRAnimator animator = new GVRAnimator(ctx);\n            animator.setName(filePath);\n            try\n            {\n                BVHImporter importer = new BVHImporter(ctx);\n                GVRSkeletonAnimation skelAnim;\n\n                if (boneMap != null)\n                {\n                    GVRSkeleton skel = importer.importSkeleton(animResource);\n                    skelAnim = importer.readMotion(skel);\n                    animator.addAnimation(skelAnim);\n\n                    GVRPoseMapper retargeter = new GVRPoseMapper(mSkeleton, skel, skelAnim.getDuration());\n                    retargeter.setBoneMap(boneMap);\n                    animator.addAnimation(retargeter);\n                }\n                else\n                {\n                    skelAnim = importer.importAnimation(animResource, mSkeleton);\n                    animator.addAnimation(skelAnim);\n                }\n                addAnimation(animator);\n                ctx.getEventManager().sendEvent(this,\n                                                IAvatarEvents.class,\n                                                \"onAnimationLoaded\",\n                                                GVRAvatar.this,\n                                                animator,\n                                                filePath,\n                                                null);\n            }\n            catch (IOException ex)\n            {\n                ctx.getEventManager().sendEvent(this,\n                                                IAvatarEvents.class,\n                                                \"onAnimationLoaded\",\n                                                GVRAvatar.this,\n                                                null,\n                                                filePath,\n                                                ex.getMessage());\n            }\n        }\n        else\n        {\n            EnumSet<GVRImportSettings> settings = GVRImportSettings.getRecommendedSettingsWith(EnumSet.of(GVRImportSettings.OPTIMIZE_GRAPH, GVRImportSettings.NO_TEXTURING));\n\n            GVRSceneObject animRoot = new GVRSceneObject(ctx);\n            ctx.getAssetLoader().loadModel(volume, animRoot, settings, false, mLoadAnimHandler);\n        }\n    }", "public EventStoreBuilder failOnNoServerResponseEnabled ( ) { settingsBuilder . failOnNoServerResponse ( BOOL_ ) ; return this ; }", "public InternalButtonAction ( ) { super ( STR_ ) ; }", "    public void setMAddr(String mAddr) {\n        NameValue nameValue = uriParms.getNameValue(MADDR);\n        Host host = new Host();\n        host.setAddress(mAddr);\n        if (nameValue != null)\n            nameValue.setValueAsObject(host);\n        else {\n            nameValue = new NameValue(MADDR, host);\n            uriParms.set(nameValue);\n        }\n    }\n", "private RexNode convertIdentifier(Blackboard bb,SqlIdentifier identifier){\n  final SqlCall call=SqlUtil.makeCall(opTab,identifier);\n  if (call != null) {\n    return bb.convertExpression(call);\n  }\n  final SqlQualified qualified;\n  if (bb.scope != null) {", "public String toHexString() {\n        final int l = mValue.length;\n        final char[] out = new char[l*2+2];\n        out[0] = '0';\n        out[1] = 'x';\n        for( int i=0,j=2; i<l; i++ ){\n            out[j++] = HEX_DIGITS[(0xF0 & mValue[i]) >>> 4];\n            out[j++] = HEX_DIGITS[0x0F & mValue[i]];\n        }\n        String s = new String(out);\n        return s;\n    }", "public synchronized void refreshWithPassword(PasswordProvider passwordProvider, String clientToken) throws AuthenticationException {\n\t\tObjects.requireNonNull(passwordProvider);\n\t\tObjects.requireNonNull(clientToken);\n\n\t\tString username = passwordProvider.getUsername();\n\t\tString password = passwordProvider.getPassword();\n\t\tauthResult = authenticationService.login(username, password, clientToken);\n\t\tif (authResult.getSelectedProfile() == null) {\n\t\t\tGameProfile[] profiles = authResult.getProfiles();\n\t\t\tif (profiles == null || profiles.length == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// no profile is selected\n\t\t\t// let's select one\n\t\t\tCharacterSelector selector = passwordProvider.getCharacterSelector();\n\t\t\tif (selector == null) {\n\t\t\t\tselector = new DefaultCharacterSelector();\n\t\t\t}\n\n\t\t\tGameProfile selectedProfile = selector.select(profiles);\n\t\t\tif (selectedProfile != null) {\n\t\t\t\tauthResult = authenticationService.selectProfile(authResult.getClientToken(), authResult.getAccessToken(), selectedProfile);\n\t\t\t}\n\t\t}\n\t}", "public static <E> void retainAll(Collection<E> elems, Filter<? super E> filter) {\r\n    for (Iterator<E> iter = elems.iterator(); iter.hasNext();) {\r\n      E elem = iter.next();\r\n      if ( ! filter.accept(elem)) {\r\n        iter.remove();\r\n      }\r\n    }\r\n  }", "\tpublic String next(long timeout, TimeUnit unit)throws InterruptedException{\n\t\tupdate();\n\t\tQueueEntry<String>e=elements.poll(timeout, unit);\n\t\treturn e!=null? e.entry : null;\n\t}\n", "@Nullable static PolymerClassDefinition extractFromCallNode(\n      Node callNode, AbstractCompiler compiler, GlobalNamespace globalNames) {\n    Node descriptor = NodeUtil.getArgumentForCallOrNew(callNode, 0);\n    if (descriptor == null || !descriptor.isObjectLit()) {\n      // report bad class definition\n      compiler.report(JSError.make(callNode, PolymerPassErrors.POLYMER_DESCRIPTOR_NOT_VALID));\n      return null;\n    }\n\n    int paramCount = callNode.getChildCount() - 1;\n    if (paramCount != 1) {\n      compiler.report(JSError.make(callNode, PolymerPassErrors.POLYMER_UNEXPECTED_PARAMS));\n      return null;\n    }\n\n    Node elName = NodeUtil.getFirstPropMatchingKey(descriptor, \"is\");\n    if (elName == null) {\n      compiler.report(JSError.make(callNode, PolymerPassErrors.POLYMER_MISSING_IS));\n      return null;\n    }\n\n    Node target;\n    if (NodeUtil.isNameDeclaration(callNode.getGrandparent())) {\n      target = IR.name(callNode.getParent().getString());\n    } else if (callNode.getParent().isAssign()) {\n      target = callNode.getParent().getFirstChild().cloneTree();\n    } else {\n      String elNameStringBase =\n          elName.isQualifiedName()\n              ? elName.getQualifiedName().replace('.', '$')\n              : elName.getString();\n      String elNameString = CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL, elNameStringBase);\n      elNameString += \"Element\";\n      target = IR.name(elNameString);\n    }\n\n    JSDocInfo classInfo = NodeUtil.getBestJSDocInfo(target);\n\n    JSDocInfo ctorInfo = null;\n    Node constructor = NodeUtil.getFirstPropMatchingKey(descriptor, \"factoryImpl\");\n    if (constructor == null) {\n      constructor = NodeUtil.emptyFunction();\n      compiler.reportChangeToChangeScope(constructor);\n      constructor.useSourceInfoFromForTree(callNode);\n    } else {\n      ctorInfo = NodeUtil.getBestJSDocInfo(constructor);\n    }\n\n    Node baseClass = NodeUtil.getFirstPropMatchingKey(descriptor, \"extends\");\n    String nativeBaseElement = baseClass == null ? null : baseClass.getString();\n\n    Node behaviorArray = NodeUtil.getFirstPropMatchingKey(descriptor, \"behaviors\");\n    PolymerBehaviorExtractor behaviorExtractor =\n        new PolymerBehaviorExtractor(compiler, globalNames);\n    ImmutableList<BehaviorDefinition> behaviors = behaviorExtractor.extractBehaviors(behaviorArray);\n    List<MemberDefinition> allProperties = new ArrayList<>();\n    for (BehaviorDefinition behavior : behaviors) {\n      overwriteMembersIfPresent(allProperties, behavior.props);\n    }\n    overwriteMembersIfPresent(\n        allProperties,\n        PolymerPassStaticUtils.extractProperties(\n            descriptor,\n            DefinitionType.ObjectLiteral,\n            compiler,\n            /** constructor= */\n            null));\n\n    FeatureSet newFeatures = null;\n    if (!behaviors.isEmpty()) {\n      newFeatures = behaviors.get(0).features;\n      for (int i = 1; i < behaviors.size(); i++) {\n        newFeatures = newFeatures.union(behaviors.get(i).features);\n      }\n    }\n\n    List<MemberDefinition> methods = new ArrayList<>();\n    for (Node keyNode : descriptor.children()) {\n      boolean isFunctionDefinition =\n          keyNode.isMemberFunctionDef()\n              || (keyNode.isStringKey() && keyNode.getFirstChild().isFunction());\n      if (isFunctionDefinition) {\n        methods.add(\n            new MemberDefinition(\n                NodeUtil.getBestJSDocInfo(keyNode), keyNode, keyNode.getFirstChild()));\n      }\n    }\n\n    return new PolymerClassDefinition(\n        DefinitionType.ObjectLiteral,\n        callNode,\n        target,\n        descriptor,\n        classInfo,\n        new MemberDefinition(ctorInfo, null, constructor),\n        nativeBaseElement,\n        allProperties,\n        methods,\n        behaviors,\n        newFeatures);\n  }", "    public void setPos(int pos) {\n\n        iPos = pos;\n\n        Node n = nPrimaryNode;\n\n        while (n != null) {\n            ((PointerNode) n).iData = iPos;\n            n                       = n.nNext;\n        }\n    }\n", "private static void removeAll(final BreakpointManager manager){\n  final Set<BreakpointAddress> addresses=new HashSet<BreakpointAddress>();\n  for (  final Breakpoint breakpoint : manager.getBreakpoints(BreakpointType.REGULAR)) {\n    addresses.add(breakpoint.getAddress());\n  }\n  CGraphDebugger.removeBreakpoints(addresses,manager);\n}\n", "void remove_document(int index)\n    {\n        ListIterator<Document<K>> listIterator = documents_.listIterator(index);\n        Document<K> document = listIterator.next();\n        listIterator.set(null);\n        composite_.sub_vector(document.feature());\n    }", "Result decode ( BinaryBitmap image , Map < DecodeHintType , ? > hints ) throws NotFoundException , ChecksumException , FormatException ;", "private double exertForces() {\n\t\tpullForces();\t\n\t\tpushForces();\n\t\tcentralizingForces();\n\t\treturn moveNodes();\n\t}", "public void setupSFields()\n    {\n        Converter converter = null;\n        this.getRecord(LogicFile.LOGIC_FILE_FILE).getField(LogicFile.METHOD_NAME).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);\n        this.getRecord(LogicFile.LOGIC_FILE_FILE).getField(LogicFile.LOGIC_SOURCE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);\n        this.getRecord(LogicFile.LOGIC_FILE_FILE).getField(LogicFile.LOGIC_DESCRIPTION).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);\n        converter = this.getRecord(LogicFile.LOGIC_FILE_FILE).getField(LogicFile.METHOD_RETURNS);\n        converter = new FieldLengthConverter(converter, 50);\n        new SEditText(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, converter, ScreenConstants.DEFAULT_DISPLAY);\n        Record query = this.getMainRecord();\n            \n        BaseField field = query.getField(LogicFile.METHOD_INTERFACE);\n        Converter converter2 = new FieldLengthConverter(field, 40);\n        SEditText screenField = new SEditText(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), this, converter2, ScreenConstants.DISPLAY_DESC);\n        this.getRecord(LogicFile.LOGIC_FILE_FILE).getField(LogicFile.SEQUENCE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);\n        this.getRecord(LogicFile.LOGIC_FILE_FILE).getField(LogicFile.LOGIC_THROWS).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);\n        this.getRecord(LogicFile.LOGIC_FILE_FILE).getField(LogicFile.PROTECTION).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);\n        this.getRecord(LogicFile.LOGIC_FILE_FILE).getField(LogicFile.COPY_FROM).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);\n        this.getRecord(LogicFile.LOGIC_FILE_FILE).getField(LogicFile.INCLUDE_SCOPE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);\n    }", "public boolean isCached ( String cacheKey ) ;", "public void testPeriodic ( ) { }", "public void addChild ( TreeStructure treeStruct ) { Util . notNull ( STR_ , treeStruct ) ; if ( children == null ) { children = new ArrayList < TreeStructure > ( ) ; } children . add ( treeStruct ) ; }", "    public TColor invert() {\n        rgb[0] = 1 - rgb[0];\n        rgb[1] = 1 - rgb[1];\n        rgb[2] = 1 - rgb[2];\n        return setRGB(rgb);\n    }\n", "void debuggerAdded ( BackEndDebuggerProvider provider , IDebugger debugger ) ;", "public void colorize ( final int level , final long offset , final int size , final Color color , final Color bgcolor ) { Preconditions . checkArgument ( offset >= NUM_ , STR_ ) ; Preconditions . checkArgument ( size >= NUM_ , STR_ ) ; Preconditions . che", "\tprivate String readLine() {\n\t\tStringBuffer b = new StringBuffer();\n\t\tint le;\n\n\t\twhile ((le = checkLineEnd(pos)) == 0)\n\t\t\tb.append(data[pos++]);\n\t\tpos += le;\n\t\treturn b.toString();\n\t}\n", "String query ( String name ) ;", "private void decrementWorkerCount(){\n  do {\n  }\n while (!compareAndDecrementWorkerCount(ctl.get()));\n}\n", "public int locate(Attribute attr) {\n        List lst;\n        int i;\n        int max;\n\n        if (attr.symbol < attrs.size()) {\n            lst = (List) attrs.get(attr.symbol);\n            max = lst.size();\n            for (i = 0; i < max; i++) {\n                if (attr == lst.get(i)) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }", "    public int read() throws IOException {\n\ttry {\n\t    IOException inducedException = monitor.receiveException(this);\n\t    if (inducedException != null) throw inducedException;\n\n\t    int c = in.read();\n\t    if (c >= 0) monitor.setBytesRead(this, ++nread);\n\t    return c;\n\t}\n\tcatch(IOException ioe) {\n\t    monitor.declareException(this, ioe);\n\t    throw ioe;\n\t}\n    }\n", "\tpublic void toggleSnow() {\n\t\tsnow = !snow;\n\t}\n", "\tprivate boolean isKeyWord( KeyWord keyWord ){\n\t\treturn keyWord.hasSameToken( peekToken().getToken() );\n\t}\n", "public Workspace copyWorkspace(long workspaceId, ContainerDestination containerDestination, EnumSet<WorkspaceCopyInclusion> includes, EnumSet<WorkspaceRemapExclusion> skipRemap) throws SmartsheetException {\n        return copyWorkspace(workspaceId, containerDestination, includes, skipRemap, null);\n    }", "public static int darker(int c){\n  return rgba(Math.max(0,(int)(scale * red(c))),Math.max(0,(int)(scale * green(c))),Math.max(0,(int)(scale * blue(c))),alpha(c));\n}\n", "private static void copyFileWithoutClosingOutputStream(InputStream stream,OutputStream outStream) throws IOException {\n  final byte[] buffer=new byte[CarbonCommonConstants.BYTEBUFFER_SIZE];\n  int len;\n  try {\n    for (; ; ) {\n      len=stream.read(buffer);\n      if (len == -1) {\n        return;\n      }\n      outStream.write(buffer,0,len);\n    }\n  }\n catch (  IOException e) {\n    throw e;\n  }\n finally {\n    CarbonUtil.closeStreams(stream);\n  }\n}\n", "void clickAndSendKeysAfter ( By by , String keys , int waitInSeconds ) ;", "public static boolean canPresentOpenGraphActionDialog(Context context, OpenGraphActionDialogFeature... features) {\n        return handleCanPresent(context, EnumSet.of(OpenGraphActionDialogFeature.OG_ACTION_DIALOG, features));\n    }", "protected int indexFirstOf(final String s,final String delims,int offset){\n  if (s == null || s.length() == 0) {\n    return -1;\n  }\n  if (delims == null || delims.length() == 0) {\n    return -1;\n  }\n  if (offset < 0) {\n    offset=0;\n  }\n else   if (offset > s.length()) {\n    return -1;\n  }\n  int min=s.length();\n  final char[] delim=delims.toCharArray();\n  for (int i=0; i < delim.length; i++) {\n    final int at=s.indexOf(delim[i],offset);\n    if (at >= 0 && at < min) {\n      min=at;\n    }\n  }\n  return (min == s.length()) ? -1 : min;\n}\n", "public <T> T asSingleResult() {\n\t\tT javaObject = null;\n\t\tString cacheKey = getCacheKey();\n\t\tif (isCacheable() && transaction == null) {\n\t\t\tCollection<Key> keys = getCacheManager().get(cacheNamespace, cacheKey);\n\t\t\tif (keys != null && keys.size() > 0) {\n\t\t\t\tKey key = keys.iterator().next();\n\t\t\t\ttry {\n\t\t\t\t\tjavaObject = (T) entityManager.get(key);\n\t\t\t\t} catch (EntityNotFoundException e) {\n\t\t\t\t\tthrow new InconsistentCacheException(\"Entity Key \" + key + \" found in the cache but not in the Datastore\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (javaObject == null) {\n\t\t\tEntity entity = getDatastoreService().prepare(query).asSingleEntity();\n\t\t\tif (entity == null) {\n\t\t\t\tthrow new org.simpleds.exception.EntityNotFoundException(\"No \" + getKind() + \" found with \" + getFilterPredicates());\n\t\t\t}\n\t\t\tjavaObject = (T) entityManager.datastoreToJava(entity);\n\t\t\tif (isCacheable()) {\n                populateCache(cacheKey, ImmutableList.of(entity.getKey()));\n\t\t\t}\n\t\t}\n\t\treturn javaObject;\n\n\t}", "protected Content getPackage(PackageDoc pd, String profileName) {\n        Content packageLinkContent;\n        Content pkgLabel;\n        if (pd.name().length() > 0) {\n            pkgLabel = getPackageLabel(pd.name());\n            packageLinkContent = getHyperLink(pathString(pd,\n                     DocPaths.profilePackageFrame(profileName)), pkgLabel, \"\",\n                    \"packageFrame\");\n        } else {\n            pkgLabel = new StringContent(\"<unnamed package>\");\n            packageLinkContent = getHyperLink(DocPaths.PACKAGE_FRAME,\n                    pkgLabel, \"\", \"packageFrame\");\n        }\n        Content li = HtmlTree.LI(packageLinkContent);\n        return li;\n    }", "public static <T> Collection<T> valuesOrEmpty(Map<String, Collection<T>> map, String key) {\n    return map.containsKey(key) && map.get(key) != null ? map.get(key) : Collections.<T>emptyList();\n  }", "private static int[] sortedSlice(int[] valueSequence,int start,int end){\n  if (start == 0 && end == valueSequence.length && isSorted(valueSequence,0,false)) {\n    return valueSequence;\n  }\n else {\n    int[] slice=new int[end - start];\n    System.arraycopy(valueSequence,start,slice,0,slice.length);\n    Arrays.sort(slice);\n    return slice;\n  }\n}\n", "private void calculateSizes(){\n  this.prefferedSize=new Dimension();\n  final BufferedImage image=new BufferedImage(100,100,BufferedImage.TYPE_INT_RGB);\n  final Graphics2D g2d=image.createGraphics();\n  g2d.setFont(font);\n  final FontMetrics metrics=g2d.getFontMetrics();\n  this.lineHeight=metrics.getHeight();\n  this.prefferedSize.height=this.lineHeight * 8;\n  for (  String s : text) {\n    prefferedSize.width=Math.max(prefferedSize.width,metrics.stringWidth(s));\n  }\n  this.prefferedSize.width=prefferedSize.width + 6 * metrics.stringWidth(\" \");\n}\n", "public void removeCategory(Category pc) {\n    if (pc == null) {\n        return;\n    }\n    removeCategory(pc.getID());\n}\n", "    public void layout() {\n\tlist.setBounds(0, 0, width, height);\n    }\n", "protected int defaultNumAttributes(){\n  return 10;\n}\n", "public static long length(final Range<Long> range) {\n        checkClosedOpen(range);\n        return Math.max(0L, range.upperEndpoint() - range.lowerEndpoint());\n    }", "public static void main(String... args) {\n    // Step 1. Enable OpenCensus Metrics.\n    try {\n      setupOpenCensusAndPrometheusExporter();\n    } catch (IOException e) {\n      System.err.println(\"Failed to create and register OpenCensus Prometheus Stats exporter \" + e);\n      return;\n    }\n\n    BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\n\n    while (true) {\n      try {\n        readEvaluateProcessLine(stdin);\n      } catch (IOException e) {\n        System.err.println(\"EOF bye \" + e);\n        return;\n      } catch (Exception e) {\n        recordTaggedStat(KEY_METHOD, \"repl\", M_ERRORS, new Long(1));\n        return;\n      }\n    }\n  }", "    public Preferences node(String pathName) {\n        if ( pathName == null ) {\n            throw new NullPointerException(\"Path must not be null.\");\n        }\n        PreferencesImpl executingNode= this;\n        synchronized ( this ) {\n            this.checkValidity();\n            if ( pathName.length() == 0 ) {\n                return this;\n            }\n            if ( pathName.startsWith(\"/\") && this.parent != null ) {\n                executingNode = this.getRoot();\n            }\n            if ( pathName.startsWith(\"/\") ) {\n                pathName = pathName.substring(1);\n            }\n        }\n        return executingNode.getNode(pathName, true, true);\n    }\n", "public static void validateXMLSchema(InputStream xsdStream, InputStream xmlStream) throws IOException, SAXException {\n        SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n        Schema schema = factory.newSchema(new StreamSource(xsdStream));\n        Validator validator = schema.newValidator();\n        validator.validate(new StreamSource(xmlStream));\n    }", "protected void importInstructions ( final int rawModuleId , final int moduleId ) throws SQLException , CouldntLoadDataException { PostgreSQLDataImporter . importInstructions ( getProvider ( ) , rawModuleId , moduleId ) ; }", "protected void initMaxCellWidth() {\n\n        m_maxCellWidth = m_opener.getOffsetWidth() - 2 /*border*/;\n        for (Widget widget : m_selector) {\n            if (widget instanceof A_CmsSelectCell) {\n                int cellWidth = ((A_CmsSelectCell)widget).getRequiredWidth();\n                if (cellWidth > m_maxCellWidth) {\n                    m_maxCellWidth = cellWidth;\n                }\n            }\n        }\n    }", "public void releaseExclusive(){\n  exclusive.unlock();\n}\n", "public ModbusUDPMaster ( String addr , int port , int timeout ) { super ( ) ; try { InetAddress slaveAddress = InetAddress . getByName ( addr ) ; connection = new UDPMasterConnection ( slaveAddress ) ; connection . setPort ( port ) ; connection . setTimeout ( timeout ) ; } catch ( UnknownHostException e ) { throw new RuntimeException ( STR_ , e ) ; } }", "    public void destroyStage(String stagename) throws Exception {\n\tif (stagename == null) \n\t    throw new NoSuchStageException(\"no such stage: null\");\n\tStageIF stage = (StageIF)_stages.get(stagename);\n\tif (stage == null) \n\t    throw new NoSuchStageException(\"no such stage: \"+stagename);\n\n\t// destroy and remove this sucker\n\t_stages.remove( stagename );\n\tstage.destroy();\n\tSystem.out.println( stagename + \": Stage destroyed\" );\n    }\n", "private byte[] dataKey(long offset){\n  return subspace.pack(Tuple2.from(DATA_KEY,String.format(\"%16d\",offset)));\n}\n", "public boolean isDateToday ( long UTCTimeStamp ) { long currentTimeLong = getUTCTimeLong ( ) ; if ( currentTimeLong == Long . MIN_VALUE ) { currentTimeLong = TimeUtil . getSystemCurrentTimeLong ( ) ; } return TimeUtil . isTheSameDate ( UTCTimeStamp , currentTimeLong ) ; }", "public DoubleConstant ( double n ) { val = n ; }", "\tprotected Branches xml2Branches(Branches branches, Element branchesElement) {\n\t\tif (branches == null) {\n\t\t\tbranches = BPELFactory.eINSTANCE.createBranches();\n\t\t\tbranches.setElement(branchesElement);\n\t\t}\n\n\t\txml2Expression(branches, branchesElement);\n\n\t\tif (branchesElement.hasAttribute(\"successfulBranchesOnly\")) {\n\t\t\tbranches.setCountCompletedBranchesOnly(BPELUtils\n\t\t\t\t\t.xml2boolean(branchesElement\n\t\t\t\t\t\t\t.getAttribute(\"successfulBranchesOnly\")));\n\t\t} else {\n\t\t\tbranches.unsetCountCompletedBranchesOnly();\n\t\t}\n\t\treturn branches;\n\t}\n", "public static char[] ensureCapacity(final char[] array,final int length,final int preserve){\n  if (length > array.length) {\n    final char t[]=new char[length];\n    System.arraycopy(array,0,t,0,preserve);\n    return t;\n  }\n  return array;\n}\n", "boolean isElementVisible ( By by ) ;", "private void moveToChannel ( VoiceChannel channel , Guild guild ) throws SoundPlaybackException { boolean hasPermissionToSpeak = PermissionUtil . checkPermission ( channel , bot . getUserById ( bot . getSelfInfo ( ) . getId ( ) ) , Permission . VOICE_SPEAK ) ; if ( hasPermissionToSpeak ) { AudioManager audioManager = bot . getAudioManager ( guild ) ; if ( audioManager . isConnected ( ) ) { if ( audioManager . isAttemptingToConnect ( ) ) { audioManager . closeAudioConnection ( ) ; } audioManager . moveAudioConnection ( channel ) ; } else { audioManager . openAudioConnection ( channel ) ; } int i = NUM_ ; int waitTime = NUM_ ; int maxIterations = NUM_ ; synchronized ( this ) { while ( ! audioManager . isConnected ( ) ) { try { wait ( waitTime ) ; i ++ ; if ( i >= maxIterations ) { break ; } } catch ( InterruptedException e ) { LOG . warn ( STR_ ) ; } } } } else { throw new SoundPlaybackException ( STR_ + channel . getName ( ) + STR_ ) ; } }", "    protected boolean haveSharedCells(ObjectMatrix2D other) {\n        if (other == null)\n            return false;\n        if (this == other)\n            return true;\n        return getContent().haveSharedCellsRaw(other.getContent());\n    }\n", "public QueryBuilder<C,F> returnTheseAttributes(CoreTokenField... returnFields){\n  Reject.ifTrue(returnFields == null || returnFields.length == 0);\n  Set<String> attributes=new HashSet<String>();\n  for (  CoreTokenField field : returnFields) {\n    attributes.add(field.toString());\n  }\n  return setReturnAttributes(attributes);\n}\n", "public List < String > elements ( ) { return elements ; }", "private Object convertEDBObjectToUncheckedModel(Class<?> model, EDBObject object) {\n        if (!checkEDBObjectModelType(object, model)) {\n            return null;\n        }\n        filterEngineeringObjectInformation(object, model);\n        List<OpenEngSB", "\tprotected void addPerformersPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_ManualTask_performers_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_ManualTask_performers_feature\", \"_UI_ManualTask_type\"),\n\t\t\t\t BpmnPackage.Literals.MANUAL_TASK__PERFORMERS,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "protected void addToPendingBatch ( OneRowChange oneRowChange , int row ) throws ReplicatorException { throw new UnsupportedOperationException ( STR_ ) ; }", "  public void printParsingTrace(){\n    printParsingTrace(System.err);\n  }\n", "    public void addItemId( String itemId ) {\n\n        globalIdentifiers.add( itemId );\n        itemIdentifiers.add( itemId );\n    }\n", "public static <T> List<T> query(Class<T> targetClass, final Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder,\r\n            CancellationSignal cancellationSignal) {\r\n        final Cursor cursor = getContentResolver().query(uri, projection, selection, selectionArgs, sortOrder);\r\n\r\n        try {\r\n            return toList(targetClass, cursor);\r\n        } finally {\r\n            closeQuietly(cursor);\r\n        }\r\n    }", "public String consumeStringAttribute ( String name , String defaultValue ) throws UnableToCompleteException { return consumeAttributeWithDefault ( name , defaultValue , getStringType ( ) ) ; }", "void deleteSectionComment ( int moduleId , int sectionId , Integer commentId , Integer userId ) throws CouldntDeleteException ;", "public static < V > boolean isEmpty ( V [ ] sourceArray ) { return ( sourceArray == null || sourceArray . length == NUM_ ) ; }", "public static final Transliterator createFromRules(String ID, String rules, int dir) {\n        Transliterator t = null;\n\n        TransliteratorParser parser = new TransliteratorParser();\n        parser.parse(rules, dir);\n\n        // NOTE: The logic here matches that in TransliteratorRegistry.\n        if (parser.idBlockVector.size() == 0 && parser.dataVector.size() == 0) {\n            t = new NullTransliterator();\n        }\n        else if (parser.idBlockVector.size() == 0 && parser.dataVector.size() == 1) {\n            t = new RuleBasedTransliterator(ID, parser.dataVector.get(0), parser.compoundFilter);\n        }\n        else if (parser.idBlockVector.size() == 1 && parser.dataVector.size() == 0) {\n            // idBlock, no data -- this is an alias.  The ID has\n            // been munged from reverse into forward mode, if\n            // necessary, so instantiate the ID in the forward\n            // direction.\n            if (parser.compoundFilter != null) {\n                t = getInstance(parser.compoundFilter.toPattern(false) + \";\"\n                        + parser.idBlockVector.get(0));\n            } else {\n                t = getInstance(parser.idBlockVector.get(0));\n            }\n\n            if (t != null) {\n                t.setID(ID);\n            }\n        }\n        else {\n            List<Transliterator> transliterators = new ArrayList<Transliterator>();\n            int passNumber = 1;\n\n            int limit = Math.max(parser.idBlockVector.size(), parser.dataVector.size());\n            for (int i = 0; i < limit; i++) {\n                if (i < parser.idBlockVector.size()) {\n                    String idBlock = parser.idBlockVector.get(i);\n                    if (idBlock.length() > 0) {\n                        Transliterator temp = getInstance(idBlock);\n                        if (!(temp instanceof NullTransliterator))\n                            transliterators.add(getInstance(idBlock));\n                    }\n                }\n                if (i < parser.dataVector.size()) {\n                    Data data = parser.dataVector.get(i);\n                    transliterators.add(new RuleBasedTransliterator(\"%Pass\" + passNumber++, data, null));\n                }\n            }\n\n            t = new CompoundTransliterator(transliterators, passNumber - 1);\n            t.setID(ID);\n            if (parser.compoundFilter != null) {\n                t.setFilter(parser.compoundFilter);\n            }\n        }\n\n        return t;\n    }", "static AuditLogFilter newScriptedFilter ( String eventType , ScriptEntry scriptEntry ) { return newEventTypeFilter ( eventType , newScriptedFilter ( scriptEntry ) ) ; }", "\tpublic void treeCollapsed(TreeExpansionEvent event) {\n\t    if(event != null && tree != null) {\n\t\tTreePath        path = event.getPath();\n\n\t\tcompleteEditing();\n\t\tif(path != null && tree.isVisible(path)) {\n\t\t    treeState.setExpandedState(path, false);\n\t\t    updateLeadRow();\n\t\t    updateSize();\n\t\t}\n\t    }\n\t}\n", "private Group groupParam2PO ( GroupParam param , Group group , User currentUser ) throws Exception { transformer . param2PO ( getClassT ( ) , param , group , currentUser ) ; if ( ! StringUtils . isBlank ( param . getResourceIds ( ) ) ) { List < Resource >", "\tpublic void setStylesheet(String filename) throws ResourceException {\n\t\ttry {\n\t\t\tFile file = new File(filename);\n\t\t\tif (!file.isAbsolute()) {\n\t\t\t\tfile = new File(this.path + filename);\n\t\t\t}\n\t\t\tInputStream is = new FileInputStream(file);\n\t\t\tStreamSource xsl = new StreamSource(is);\n\t\t\tsetStylesheet(xsl);\n\t\t} catch (IOException e) {\n\t\t\tthrow new ResourceException(e.getMessage());\n\t\t}\n\t}\n", "    public boolean verifyAssertion(SignedObject assertion) {\n\tX509Certificate cert = assertion.cert;\n\treturn verify(assertion, cert);\n      \n    }\n", "\tpublic void getReverseA(byte[] is, int offset, int length) {\n\t\tfor(int i = (offset + length - 1); i >= offset; i--) {\n\t\t\tis[i] = getByteA();\n\t\t}\n\t}\n", "public MapWithProtoValuesFluentAssertion<M> usingDoubleToleranceForFieldsForValues(\n      double tolerance, int firstFieldNumber, int... rest) {\n    return usingConfig(\n        config.usingDoubleToleranceForFields(tolerance, asList(firstFieldNumber, rest)));\n  }", "public DFAContentModel(CMNode syntaxTree,int leafCount,boolean mixed){\n  fLeafCount=leafCount;\n  fMixed=mixed;\n  buildDFA(syntaxTree);\n}\n", "public static byte[] serializeToByteArray(Serializable value){\n  try {\n    ByteArrayOutputStream buffer=new ByteArrayOutputStream();\n    try (ObjectOutputStream oos=new ObjectOutputStream(new SnappyOutputStream(buffer))){\n      oos.writeObject(value);\n    }\n     return buffer.toByteArray();\n  }\n catch (  IOException exn) {\n    throw new IllegalArgumentException(\"unable to serialize \" + value,exn);\n  }\n}\n", "public void endCompose(StylesheetRoot sroot) throws TransformerException\n  {\n    StylesheetRoot.ComposeState cstate = sroot.getComposeState();\n    cstate.popStackMark();\n  }", "private static Shape rightEdge(BufferedImage image){\n  GeneralPath path=new GeneralPath();\n  Point2D p1=null;\n  Point2D p2=null;\n  Line2D line=new Line2D.Float();\n  Point2D p=new Point2D.Float();\n  int foundPointY=-1;\n  for (int i=image.getHeight() - 1; i >= 0; i--) {\n    for (int j=image.getWidth() - 1; j >= 0; j--) {\n      if ((image.getRGB(j,i) & 0xff000000) != 0) {\n        p.setLocation(j,i);\n        foundPointY=i;\n        break;\n      }\n    }\n    if (foundPointY >= 0) {\n      if (p2 == null) {\n        p1=new Point2D.Float(0,foundPointY);\n        path.moveTo(p1.getX(),p1.getY());\n        p2=new Point2D.Float();\n        p2.setLocation(p);\n      }\n else {\n        p2=detectLine(p1,p2,p,line,path);\n      }\n    }\n  }\n  path.lineTo(p.getX(),p.getY());\n  if (foundPointY >= 0) {\n    path.lineTo(0,foundPointY);\n  }\n  path.closePath();\n  return path;\n}\n", "public static vpnsessionpolicy_binding get(nitro_service service, String name) throws Exception{\n\t\tvpnsessionpolicy_binding obj = new vpnsessionpolicy_binding();\n\t\tobj.set_name(name);\n\t\tvpnsessionpolicy_binding response = (vpnsessionpolicy_binding) obj.get_resource(service);\n\t\treturn response;\n\t}", "private static byte[] fromHex(String hex){\n  byte[] binary=new byte[hex.length() / 2];\n  for (int i=0; i < binary.length; i++) {\n    binary[i]=(byte)Integer.parseInt(hex.substring(2 * i,2 * i + 2),16);\n  }\n  return binary;\n}\n", "    public void setType(int type) {\n\n        if ((type < 0) || (type > 4)) {\n            // invalid type, use 0\n            m_type = 0;\n        } else {\n            m_type = type;\n        }\n    }\n", "private SearchTree < VertexType > copySearchTree ( SearchTree < VertexType > tree , Transpose < GraphType , EdgeType , VertexType > t ) { SearchTree < VertexType > copy = new SearchTree < VertexType > ( t . getOriginalGraphVertex ( tree . getVertex ( ) ) ) ; Iterator < SearchTree < VertexType > > i = tree . childIterator ( ) ; while ( i . hasNext ( ) ) { SearchTree < VertexType > child = i . next ( ) ; copy . addChild ( copySearchTree ( child , t ) ) ; } return copy ; }", "private CGlobalSettings ( ) { }", "    public double getA() {\n        return azimuth;\n    }\n", "    public void destroy() {\n        timer.cancel();\n    }\n", "static <T>LazyFutureStream<T> lazyFutureStreamFromIterable(final Iterable<T> iterable){\n  return lazyFutureStream(iterable.iterator());\n}", "private ObjectAnimator createEnteringImageMatrixAnimator(){\n  Matrix initMatrix=MatrixUtils.getImageMatrix(mAnimatedImage);\n  initMatrix.getValues(mInitThumbnailMatrixValues);\n  final Matrix endMatrix=MatrixUtils.getImageMatrix(mImageTo);\n  Log.v(TAG,\"createEnteringImageMatrixAnimator, mInitThumbnailMatrixValues \" + Arrays.toString(mInitThumbnailMatrixValues));\n  Log.v(TAG,\"createEnteringImageMatrixAnimator, initMatrix \" + initMatrix);\n  Log.v(TAG,\"createEnteringImageMatrixAnimator,  endMatrix \" + endMatrix);\n  mAnimatedImage.setScaleType(ImageView.ScaleType.MATRIX);\n  return ObjectAnimator.ofObject(mAnimatedImage,MatrixEvaluator.ANIMATED_TRANSFORM_PROPERTY,new MatrixEvaluator(),initMatrix,endMatrix);\n}\n", "public void showContent(){\n  switchState(CONTENT,null,null,null,null,Collections.<Integer>emptyList());\n}\n", "public void addColumn(String header){\n  WTableColumn tableColumn;\n  tableColumn=new WTableColumn();\n  tableColumn.setHeaderValue(Util.cleanAmp(header));\n  setColumnVisibility(tableColumn,true);\n  m_tableColumns.add(tableColumn);\n  return;\n}\n", "        public Dimension2D getViewportSize() {\n            if (EventQueue.isDispatchThread()) {\n                return userAgent.getViewportSize();\n            } else {\n                class Query implements Runnable {\n                    Dimension2D result;\n                    public void run() {\n                        result = userAgent.getViewportSize();\n                    }\n                }\n                Query q = new Query();\n                invokeAndWait(q);\n                return q.result;\n            }\n        }\n", "private void addPluginMenu ( final JComponent menu , final IAddressSpaceMenuPlugin plugin ) { try { final List < JComponent > menuItems = plugin . extendAddressSpaceMenu ( getPluginAddressSpaces ( ) ) ; if ( menuItems != null ) { for ( final JComponent me", "public static nsip6[] get(nitro_service service) throws Exception{\n\t\tnsip6 obj = new nsip6();\n\t\tnsip6[] response = (nsip6[])obj.get_resources(service);\n\t\treturn response;\n\t}", "@Override protected void initialize(){\n  super.initialize();\n  m_Words=new HashSet<String>();\n  m_Words.add(\"a\");\n  m_Words.add(\"able\");\n  m_Words.add(\"about\");\n  m_Words.add(\"above\");\n  m_Words.add(\"according\");\n  m_Words.add(\"accordingly\");\n  m_Words.add(\"across\");\n  m_Words.add(\"actually\");\n  m_Words.add(\"after\");\n  m_Words.add(\"afterwards\");\n  m_Words.add(\"again\");\n  m_Words.add(\"against\");\n  m_Words.add(\"all\");\n  m_Words.add(\"allow\");\n  m_Words.add(\"allows\");\n  m_Words.add(\"almost\");\n  m_Words.add(\"alone\");\n  m_Words.add(\"along\");\n  m_Words.add(\"already\");\n  m_Words.add(\"also\");\n  m_Words.add(\"although\");\n  m_Words.add(\"always\");\n  m_Words.add(\"am\");\n  m_Words.add(\"among\");\n  m_Words.add(\"amongst\");\n  m_Words.add(\"an\");\n  m_Words.add(\"and\");\n  m_Words.add(\"another\");\n  m_Words.add(\"any\");\n  m_Words.add(\"anybody\");\n  m_Words.add(\"anyhow\");\n  m_Words.add(\"anyone\");\n  m_Words.add(\"anything\");\n  m_Words.add(\"anyway\");\n  m_Words.add(\"anyways\");\n  m_Words.add(\"anywhere\");\n  m_Words.add(\"apart\");\n  m_Words.add(\"appear\");\n  m_Words.add(\"appreciate\");\n  m_Words.add(\"appropriate\");\n  m_Words.add(\"are\");\n  m_Words.add(\"around\");\n  m_Words.add(\"as\");\n  m_Words.add(\"aside\");\n  m_Words.add(\"ask\");\n  m_Words.add(\"asking\");\n  m_Words.add(\"associated\");\n  m_Words.add(\"at\");\n  m_Words.add(\"available\");\n  m_Words.add(\"away\");\n  m_Words.add(\"awfully\");\n  m_Words.add(\"b\");\n  m_Words.add(\"be\");\n  m_Words.add(\"became\");\n  m_Words.add(\"because\");\n  m_Words.add(\"become\");\n  m_Words.add(\"becomes\");\n  m_Words.add(\"becoming\");\n  m_Words.add(\"been\");\n  m_Words.add(\"before\");\n  m_Words.add(\"beforehand\");\n  m_Words.add(\"behind\");\n  m_Words.add(\"being\");\n  m_Words.add(\"believe\");\n  m_Words.add(\"below\");\n  m_Words.add(\"beside\");\n  m_Words.add(\"besides\");\n  m_Words.add(\"best\");\n  m_Words.add(\"better\");\n  m_Words.add(\"between\");\n  m_Words.add(\"beyond\");\n  m_Words.add(\"both\");\n  m_Words.add(\"brief\");\n  m_Words.add(\"but\");\n  m_Words.add(\"by\");\n  m_Words.add(\"c\");\n  m_Words.add(\"came\");\n  m_Words.add(\"can\");\n  m_Words.add(\"cannot\");\n  m_Words.add(\"cant\");\n  m_Words.add(\"cause\");\n  m_Words.add(\"causes\");\n  m_Words.add(\"certain\");\n  m_Words.add(\"certainly\");\n  m_Words.add(\"changes\");\n  m_Words.add(\"clearly\");\n  m_Words.add(\"co\");\n  m_Words.add(\"com\");\n  m_Words.add(\"come\");\n  m_Words.add(\"comes\");\n  m_Words.add(\"concerning\");\n  m_Words.add(\"consequently\");\n  m_Words.add(\"consider\");\n  m_Words.add(\"considering\");\n  m_Words.add(\"contain\");\n  m_Words.add(\"containing\");\n  m_Words.add(\"contains\");\n  m_Words.add(\"corresponding\");\n  m_Words.add(\"could\");\n  m_Words.add(\"course\");\n  m_Words.add(\"currently\");\n  m_Words.add(\"d\");\n  m_Words.add(\"definitely\");\n  m_Words.add(\"described\");\n  m_Words.add(\"despite\");\n  m_Words.add(\"did\");\n  m_Words.add(\"different\");\n  m_Words.add(\"do\");\n  m_Words.add(\"does\");\n  m_Words.add(\"doing\");\n  m_Words.add(\"done\");\n  m_Words.add(\"down\");\n  m_Words.add(\"downwards\");\n  m_Words.add(\"during\");\n  m_Words.add(\"e\");\n  m_Words.add(\"each\");\n  m_Words.add(\"edu\");\n  m_Words.add(\"eg\");\n  m_Words.add(\"eight\");\n  m_Words.add(\"either\");\n  m_Words.add(\"else\");\n  m_Words.add(\"elsewhere\");\n  m_Words.add(\"enough\");\n  m_Words.add(\"entirely\");\n  m_Words.add(\"especially\");\n  m_Words.add(\"et\");\n  m_Words.add(\"etc\");\n  m_Words.add(\"even\");\n  m_Words.add(\"ever\");\n  m_Words.add(\"every\");\n  m_Words.add(\"everybody\");\n  m_Words.add(\"everyone\");\n  m_Words.add(\"everything\");\n  m_Words.add(\"everywhere\");\n  m_Words.add(\"ex\");\n  m_Words.add(\"exactly\");\n  m_Words.add(\"example\");\n  m_Words.add(\"except\");\n  m_Words.add(\"f\");\n  m_Words.add(\"far\");\n  m_Words.add(\"few\");\n  m_Words.add(\"fifth\");\n  m_Words.add(\"first\");\n  m_Words.add(\"five\");\n  m_Words.add(\"followed\");\n  m_Words.add(\"following\");\n  m_Words.add(\"follows\");\n  m_Words.add(\"for\");\n  m_Words.add(\"former\");\n  m_Words.add(\"formerly\");\n  m_Words.add(\"forth\");\n  m_Words.add(\"four\");\n  m_Words.add(\"from\");\n  m_Words.add(\"further\");\n  m_Words.add(\"furthermore\");\n  m_Words.add(\"g\");\n  m_Words.add(\"get\");\n  m_Words.add(\"gets\");\n  m_Words.add(\"getting\");\n  m_Words.add(\"given\");\n  m_Words.add(\"gives\");\n  m_Words.add(\"go\");\n  m_Words.add(\"goes\");\n  m_Words.add(\"going\");\n  m_Words.add(\"gone\");\n  m_Words.add(\"got\");\n  m_Words.add(\"gotten\");\n  m_Words.add(\"greetings\");\n  m_Words.add(\"h\");\n  m_Words.add(\"had\");\n  m_Words.add(\"happens\");\n  m_Words.add(\"hardly\");\n  m_Words.add(\"has\");\n  m_Words.add(\"have\");\n  m_Words.add(\"having\");\n  m_Words.add(\"he\");\n  m_Words.add(\"hello\");\n  m_Words.add(\"help\");\n  m_Words.add(\"hence\");\n  m_Words.add(\"her\");\n  m_Words.add(\"here\");\n  m_Words.add(\"hereafter\");\n  m_Words.add(\"hereby\");\n  m_Words.add(\"herein\");\n  m_Words.add(\"hereupon\");\n  m_Words.add(\"hers\");\n  m_Words.add(\"herself\");\n  m_Words.add(\"hi\");\n  m_Words.add(\"him\");\n  m_Words.add(\"himself\");\n  m_Words.add(\"his\");\n  m_Words.add(\"hither\");\n  m_Words.add(\"hopefully\");\n  m_Words.add(\"how\");\n  m_Words.add(\"howbeit\");\n  m_Words.add(\"however\");\n  m_Words.add(\"i\");\n  m_Words.add(\"ie\");\n  m_Words.add(\"if\");\n  m_Words.add(\"ignored\");\n  m_Words.add(\"immediate\");\n  m_Words.add(\"in\");\n  m_Words.add(\"inasmuch\");\n  m_Words.add(\"inc\");\n  m_Words.add(\"indeed\");\n  m_Words.add(\"indicate\");\n  m_Words.add(\"indicated\");\n  m_Words.add(\"indicates\");\n  m_Words.add(\"inner\");\n  m_Words.add(\"insofar\");\n  m_Words.add(\"instead\");\n  m_Words.add(\"into\");\n  m_Words.add(\"inward\");\n  m_Words.add(\"is\");\n  m_Words.add(\"it\");\n  m_Words.add(\"its\");\n  m_Words.add(\"itself\");\n  m_Words.add(\"j\");\n  m_Words.add(\"just\");\n  m_Words.add(\"k\");\n  m_Words.add(\"keep\");\n  m_Words.add(\"keeps\");\n  m_Words.add(\"kept\");\n  m_Words.add(\"know\");\n  m_Words.add(\"knows\");\n  m_Words.add(\"known\");\n  m_Words.add(\"l\");\n  m_Words.add(\"last\");\n  m_Words.add(\"lately\");\n  m_Words.add(\"later\");\n  m_Words.add(\"latter\");\n  m_Words.add(\"latterly\");\n  m_Words.add(\"least\");\n  m_Words.add(\"less\");\n  m_Words.add(\"lest\");\n  m_Words.add(\"let\");\n  m_Words.add(\"like\");\n  m_Words.add(\"liked\");\n  m_Words.add(\"likely\");\n  m_Words.add(\"little\");\n  m_Words.add(\"ll\");\n  m_Words.add(\"look\");\n  m_Words.add(\"looking\");\n  m_Words.add(\"looks\");\n  m_Words.add(\"ltd\");\n  m_Words.add(\"m\");\n  m_Words.add(\"mainly\");\n  m_Words.add(\"many\");\n  m_Words.add(\"may\");\n  m_Words.add(\"maybe\");\n  m_Words.add(\"me\");\n  m_Words.add(\"mean\");\n  m_Words.add(\"meanwhile\");\n  m_Words.add(\"merely\");\n  m_Words.add(\"might\");\n  m_Words.add(\"more\");\n  m_Words.add(\"moreover\");\n  m_Words.add(\"most\");\n  m_Words.add(\"mostly\");\n  m_Words.add(\"much\");\n  m_Words.add(\"must\");\n  m_Words.add(\"my\");\n  m_Words.add(\"myself\");\n  m_Words.add(\"n\");\n  m_Words.add(\"name\");\n  m_Words.add(\"namely\");\n  m_Words.add(\"nd\");\n  m_Words.add(\"near\");\n  m_Words.add(\"nearly\");\n  m_Words.add(\"necessary\");\n  m_Words.add(\"need\");\n  m_Words.add(\"needs\");\n  m_Words.add(\"neither\");\n  m_Words.add(\"never\");\n  m_Words.add(\"nevertheless\");\n  m_Words.add(\"new\");\n  m_Words.add(\"next\");\n  m_Words.add(\"nine\");\n  m_Words.add(\"no\");\n  m_Words.add(\"nobody\");\n  m_Words.add(\"non\");\n  m_Words.add(\"none\");\n  m_Words.add(\"noone\");\n  m_Words.add(\"nor\");\n  m_Words.add(\"normally\");\n  m_Words.add(\"not\");\n  m_Words.add(\"nothing\");\n  m_Words.add(\"novel\");\n  m_Words.add(\"now\");\n  m_Words.add(\"nowhere\");\n  m_Words.add(\"o\");\n  m_Words.add(\"obviously\");\n  m_Words.add(\"of\");\n  m_Words.add(\"off\");\n  m_Words.add(\"often\");\n  m_Words.add(\"oh\");\n  m_Words.add(\"ok\");\n  m_Words.add(\"okay\");\n  m_Words.add(\"old\");\n  m_Words.add(\"on\");\n  m_Words.add(\"once\");\n  m_Words.add(\"one\");\n  m_Words.add(\"ones\");\n  m_Words.add(\"only\");\n  m_Words.add(\"onto\");\n  m_Words.add(\"or\");\n  m_Words.add(\"other\");\n  m_Words.add(\"others\");\n  m_Words.add(\"otherwise\");\n  m_Words.add(\"ought\");\n  m_Words.add(\"our\");\n  m_Words.add(\"ours\");\n  m_Words.add(\"ourselves\");\n  m_Words.add(\"out\");\n  m_Words.add(\"outside\");\n  m_Words.add(\"over\");\n  m_Words.add(\"overall\");\n  m_Words.add(\"own\");\n  m_Words.add(\"p\");\n  m_Words.add(\"particular\");\n  m_Words.add(\"particularly\");\n  m_Words.add(\"per\");\n  m_Words.add(\"perhaps\");\n  m_Words.add(\"placed\");\n  m_Words.add(\"please\");\n  m_Words.add(\"plus\");\n  m_Words.add(\"possible\");\n  m_Words.add(\"presumably\");\n  m_Words.add(\"probably\");\n  m_Words.add(\"provides\");\n  m_Words.add(\"q\");\n  m_Words.add(\"que\");\n  m_Words.add(\"quite\");\n  m_Words.add(\"qv\");\n  m_Words.add(\"r\");\n  m_Words.add(\"rather\");\n  m_Words.add(\"rd\");\n  m_Words.add(\"re\");\n  m_Words.add(\"really\");\n  m_Words.add(\"reasonably\");\n  m_Words.add(\"regarding\");\n  m_Words.add(\"regardless\");\n  m_Words.add(\"regards\");\n  m_Words.add(\"relatively\");\n  m_Words.add(\"respectively\");\n  m_Words.add(\"right\");\n  m_Words.add(\"s\");\n  m_Words.add(\"said\");\n  m_Words.add(\"same\");\n  m_Words.add(\"saw\");\n  m_Words.add(\"say\");\n  m_Words.add(\"saying\");\n  m_Words.add(\"says\");\n  m_Words.add(\"second\");\n  m_Words.add(\"secondly\");\n  m_Words.add(\"see\");\n  m_Words.add(\"seeing\");\n  m_Words.add(\"seem\");\n  m_Words.add(\"seemed\");\n  m_Words.add(\"seeming\");\n  m_Words.add(\"seems\");\n  m_Words.add(\"seen\");\n  m_Words.add(\"self\");\n  m_Words.add(\"selves\");\n  m_Words.add(\"sensible\");\n  m_Words.add(\"sent\");\n  m_Words.add(\"serious\");\n  m_Words.add(\"seriously\");\n  m_Words.add(\"seven\");\n  m_Words.add(\"several\");\n  m_Words.add(\"shall\");\n  m_Words.add(\"she\");\n  m_Words.add(\"should\");\n  m_Words.add(\"since\");\n  m_Words.add(\"six\");\n  m_Words.add(\"so\");\n  m_Words.add(\"some\");\n  m_Words.add(\"somebody\");\n  m_Words.add(\"somehow\");\n  m_Words.add(\"someone\");\n  m_Words.add(\"something\");\n  m_Words.add(\"sometime\");\n  m_Words.add(\"sometimes\");\n  m_Words.add(\"somewhat\");\n  m_Words.add(\"somewhere\");\n  m_Words.add(\"soon\");\n  m_Words.add(\"sorry\");\n  m_Words.add(\"specified\");\n  m_Words.add(\"specify\");\n  m_Words.add(\"specifying\");\n  m_Words.add(\"still\");\n  m_Words.add(\"sub\");\n  m_Words.add(\"such\");\n  m_Words.add(\"sup\");\n  m_Words.add(\"sure\");\n  m_Words.add(\"t\");\n  m_Words.add(\"take\");\n  m_Words.add(\"taken\");\n  m_Words.add(\"tell\");\n  m_Words.add(\"tends\");\n  m_Words.add(\"th\");\n  m_Words.add(\"than\");\n  m_Words.add(\"thank\");\n  m_Words.add(\"thanks\");\n  m_Words.add(\"thanx\");\n  m_Words.add(\"that\");\n  m_Words.add(\"thats\");\n  m_Words.add(\"the\");\n  m_Words.add(\"their\");\n  m_Words.add(\"theirs\");\n  m_Words.add(\"them\");\n  m_Words.add(\"themselves\");\n  m_Words.add(\"then\");\n  m_Words.add(\"thence\");\n  m_Words.add(\"there\");\n  m_Words.add(\"thereafter\");\n  m_Words.add(\"thereby\");\n  m_Words.add(\"therefore\");\n  m_Words.add(\"therein\");\n  m_Words.add(\"theres\");\n  m_Words.add(\"thereupon\");\n  m_Words.add(\"these\");\n  m_Words.add(\"they\");\n  m_Words.add(\"think\");\n  m_Words.add(\"third\");\n  m_Words.add(\"this\");\n  m_Words.add(\"thorough\");\n  m_Words.add(\"thoroughly\");\n  m_Words.add(\"those\");\n  m_Words.add(\"though\");\n  m_Words.add(\"three\");\n  m_Words.add(\"through\");\n  m_Words.add(\"throughout\");\n  m_Words.add(\"thru\");\n  m_Words.add(\"thus\");\n  m_Words.add(\"to\");\n  m_Words.add(\"together\");\n  m_Words.add(\"too\");\n  m_Words.add(\"took\");\n  m_Words.add(\"toward\");\n  m_Words.add(\"towards\");\n  m_Words.add(\"tried\");\n  m_Words.add(\"tries\");\n  m_Words.add(\"truly\");\n  m_Words.add(\"try\");\n  m_Words.add(\"trying\");\n  m_Words.add(\"twice\");\n  m_Words.add(\"two\");\n  m_Words.add(\"u\");\n  m_Words.add(\"un\");\n  m_Words.add(\"under\");\n  m_Words.add(\"unfortunately\");\n  m_Words.add(\"unless\");\n  m_Words.add(\"unlikely\");\n  m_Words.add(\"until\");\n  m_Words.add(\"unto\");\n  m_Words.add(\"up\");\n  m_Words.add(\"upon\");\n  m_Words.add(\"us\");\n  m_Words.add(\"use\");\n  m_Words.add(\"used\");\n  m_Words.add(\"useful\");\n  m_Words.add(\"uses\");\n  m_Words.add(\"using\");\n  m_Words.add(\"usually\");\n  m_Words.add(\"uucp\");\n  m_Words.add(\"v\");\n  m_Words.add(\"value\");\n  m_Words.add(\"various\");\n  m_Words.add(\"ve\");\n  m_Words.add(\"very\");\n  m_Words.add(\"via\");\n  m_Words.add(\"viz\");\n  m_Words.add(\"vs\");\n  m_Words.add(\"w\");\n  m_Words.add(\"want\");\n  m_Words.add(\"wants\");\n  m_Words.add(\"was\");\n  m_Words.add(\"way\");\n  m_Words.add(\"we\");\n  m_Words.add(\"welcome\");\n  m_Words.add(\"well\");\n  m_Words.add(\"went\");\n  m_Words.add(\"were\");\n  m_Words.add(\"what\");\n  m_Words.add(\"whatever\");\n  m_Words.add(\"when\");\n  m_Words.add(\"whence\");\n  m_Words.add(\"whenever\");\n  m_Words.add(\"where\");\n  m_Words.add(\"whereafter\");\n  m_Words.add(\"whereas\");\n  m_Words.add(\"whereby\");\n  m_Words.add(\"wherein\");\n  m_Words.add(\"whereupon\");\n  m_Words.add(\"wherever\");\n  m_Words.add(\"whether\");\n  m_Words.add(\"which\");\n  m_Words.add(\"while\");\n  m_Words.add(\"whither\");\n  m_Words.add(\"who\");\n  m_Words.add(\"whoever\");\n  m_Words.add(\"whole\");\n  m_Words.add(\"whom\");\n  m_Words.add(\"whose\");\n  m_Words.add(\"why\");\n  m_Words.add(\"will\");\n  m_Words.add(\"willing\");\n  m_Words.add(\"wish\");\n  m_Words.add(\"with\");\n  m_Words.add(\"within\");\n  m_Words.add(\"without\");\n  m_Words.add(\"wonder\");\n  m_Words.add(\"would\");\n  m_Words.add(\"would\");\n  m_Words.add(\"x\");\n  m_Words.add(\"y\");\n  m_Words.add(\"yes\");\n  m_Words.add(\"yet\");\n  m_Words.add(\"you\");\n  m_Words.add(\"your\");\n  m_Words.add(\"yours\");\n  m_Words.add(\"yourself\");\n  m_Words.add(\"yourselves\");\n  m_Words.add(\"z\");\n  m_Words.add(\"zero\");\n}\n", "    public String TaggedMessageComponentID(){\n        return getComponentID();\n    }\n", "  private void wrapException(JsValue returnValue, Throwable t) {\n    ModuleSpace.setThrownJavaException(t);\n\n    // See if we're in the process of throwing a JavaScriptObject; remove\n    // it from the JavaScriptException object and throw the JS object instead\n    Object jsoException = ModuleSpace.getJavaScriptExceptionException(\n        classLoader, t);\n\n    if (jsoException != null) {\n      JsValueGlue.set(returnValue, classLoader, jsoException.getClass(),\n          jsoException);\n    } else {\n      JsValueGlue.set(returnValue, classLoader, t.getClass(), t);\n    }\n  }\n", "public static void disableCaching(final WebResponse response)\r\n\t{\r\n\t\tresponse.setLastModifiedTime(Time.now());\r\n\t\tfinal HttpServletResponse httpServletResponse = getHttpServletResponse(response);\r\n\t\tif (httpServletResponse != null)\r\n\t\t{\r\n\t\t\thttpServletResponse.addHeader(\"Cache-Control\", \"max-age=0\");\r\n\t\t\thttpServletResponse.setDateHeader(\"Expires\", 0);\r\n\t\t}\r\n\t}", "public final String path ( ) { return path ; }", "@Override\n    public Year plus(long amountToAdd, TemporalUnit unit) {\n        if (unit instanceof ChronoUnit) {\n            switch ((ChronoUnit) unit) {\n                case YEARS: return plusYears(amountToAdd);\n                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));\n                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));\n                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));\n                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    }", "private void showParams(List<CmsSearchParamPanel> paramPanels) {\n\n        m_params.clear();\n        if ((paramPanels == null) || (paramPanels.size() == 0)) {\n            m_params.setVisible(false);\n            updateListSize();\n            return;\n        }\n        m_params.setVisible(true);\n        for (CmsSearchParamPanel panel : paramPanels) {\n            m_params.add(panel);\n        }\n        updateListSize();\n    }", "    public Service getSafeInvokeService() {\n        if (ClientProperties.TRUE.equals(clientProperties.get(ClientProperties.EXCEPTION_SUPPORT))) {\n            return EchoServer.SERVICE_SAFE_INVOKE_EXCEPTION_SUPPORT;\n        } else {\n            return EchoServer.SERVICE_SAFE_INVOKE_DEFAULT;\n        }\n    }\n", "public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures){\n  List<ShardOperationFailedException> uniqueFailures=new ArrayList<>();\n  Set<GroupBy> reasons=new HashSet<>();\n  for (  ShardOperationFailedException failure : failures) {\n    GroupBy reason=new GroupBy(failure.getCause());\n    if (reasons.contains(reason) == false) {\n      reasons.add(reason);\n      uniqueFailures.add(failure);\n    }\n  }\n  return uniqueFailures.toArray(new ShardOperationFailedException[0]);\n}\n", "public void eInit(EObject context, String name, IJvmTypeProvider typeContext) {\n\t\tsetTypeResolutionContext(typeContext);\n\t\tthis.context = context;\n\t\tthis.parameter = this.jvmTypesFactory.createJvmTypeParameter();\n\t\tthis.parameter.setName(name);\n\n\t}", "private void writeChunks(OutputStream outputStream,byte[] bytes,int length) throws IOException {\nsynchronized (outputStream) {\n    int chunksize=8 * 1024;\n    for (int p=0; p < length; p+=chunksize) {\n      int chunk=p + chunksize < length ? chunksize : length - p;\n      outputStream.write(bytes,p,chunk);\n    }\n  }\n  outputStream.flush();\n}\n", "    public void setFlag(long index, byte flag) {\n        try {\n            RandomAccessFile file = _file();\n            synchronized (file) {\n                file.seek((index + 1) * itemsize() - 1);\n                file.writeByte(flag);\n            }\n        } catch (IOException x) {\n        }\n    }\n", "public static Test suite ( ) { return ( new TestSuite ( SelectManyCollectionITCase . class ) ) ; }", "\tpublic boolean moveTo(int x, int y) {\n\t\t/*\n\t\t * XXX -  Perhaps we should require some of it to remain on\n\t\t * the screen (incase it was saved while in hi-res, then run\n\t\t * in low-res)\n\t\t */\n\t\tdialog.setLocation(x + owner.getX(), y + owner.getY());\n\t\treturn true;\n\t}\n", "default void debugf(String format,Object... args){\n  debug(String.format(format,args));\n}\n", "        public boolean isReady() {\n            if (System.currentTimeMillis() - creationMillis < DELTA) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n", "public static String ensureEndingSlash ( String path ) { Objects . requireNonNull ( path , STR_ ) ; return STR_ . equals ( path ) || path . charAt ( path . length ( ) - NUM_ ) != STR_ ? ( path + STR_ ) : path ; }", "private void methods(Class type){\n  Method[] list=type.getDeclaredMethods();\n  for (  Method method : list) {\n    MethodDetail detail=new MethodDetail(method);\n    methods.add(detail);\n  }\n}\n", "public static <T> List<T> getAt(List<T> self, Range range) {\n        RangeInfo info = subListBorders(self.size(), range);\n\n        List<T> subList = self.subList(info.from, info.to);\n        if (info.reverse) {\n            subList = reverse(subList);\n        }\n\n        // trying to guess the concrete list type and create a new instance from it\n        List<T> answer = createSimilarList(self, subList.size());\n        answer.addAll(subList);\n\n        return answer;\n    }", "public void insert(final Object eKey,final Object element,final int position){\n  _elementOrder.add(position,eKey);\n  _elements.put(eKey,element);\n}\n", "public static void removeAttribute(final AttributesImpl atts, final String qName) {\n        final int i = atts.getIndex(qName);\n        if (i != -1) {\n            atts.removeAttribute(i);\n        }\n    }", "@Override public <T>T[] toArray(T[] array){\n  return newArray(array);\n}\n", "  public int getType() {\n    int type = super.type;\n    if ((type == PsfMessageTypes.ANY) && (super.data != null)) {\n      RvUtils utils = new RvUtils();\n      type = utils.nativeType(super.data.getClass());\n      setType(type);\n    }\n    return type;\n  }\n", "\tprivate boolean matches(String cmd, String pattern, int start) {\n\t\tif (cmd.length() > pattern.length())\n\t\t\treturn false;\n\t\tif (cmd.length() < start)\n\t\t\treturn false;\n\t\tif (!cmd.substring(0, start).equalsIgnoreCase(pattern.substring(0, start)))\n\t\t\treturn false;\n\t\tfor (int i = start; i < cmd.length(); i++) {\n\t\t\tif (!(cmd.charAt(i) == pattern.charAt(i))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n", "public void close() throws IOException {\n  if (fReader != null) {\n    fReader.close();\n    fReader=null;\n  }\n}\n", "private <S> ConvertManagerTypeImpl<S> getOrCreate(Class<S> sourceType)\n  {\n    ConvertManagerTypeImpl<S> convertType\n    = (ConvertManagerTypeImpl<S>) _convertMap.get(sourceType);\n  \n    if (convertType != null) {\n      return convertType;\n    }\n    \n    convertType = new ConvertManagerTypeImpl<>(sourceType);\n    \n    _convertMap.putIfAbsent(sourceType, convertType);\n\n    return (ConvertManagerTypeImpl<S>) _convertMap.get(sourceType);\n  }", "void flush(){\n  String lastLine=lineBuilder.toString();\n  if (!lastLine.isEmpty()) {\n    mutableLines.add(lastLine);\n  }\n  int jN=mutableLines.size();\n  Range<Integer> eofRange=Range.closedOpen(kN,kN + 1);\n  while (range0s.size() < jN) {\n    range0s.add(Formatter.EMPTY_RANGE);\n  }\n  range0s.add(eofRange);\n  while (ranges.size() < jN) {\n    ranges.add(Formatter.EMPTY_RANGE);\n  }\n  ranges.add(eofRange);\n  while (range1s.size() < jN) {\n    range1s.add(Formatter.EMPTY_RANGE);\n  }\n  range1s.add(eofRange);\n  setLines(ImmutableList.copyOf(mutableLines));\n}\n", "public final List<Integer> executeIntListQuery(String sql) throws AdeException {\n  return SpecialSqlQueries.executeIntListQuery(sql,m_connection);\n}\n", "public static current_timezone get(nitro_service client) throws Exception\r\n\t{\r\n\t\tcurrent_timezone resource = new current_timezone();\r\n\t\tresource.validate(\"get\");\r\n\t\treturn ((current_timezone[]) resource.get_resources(client))[0];\r\n\t}", "public CInstructionUpdater ( final ZyGraph graph ) { m_graph = graph ; }", "public CertPathTrustManagerParameters(CertPathParameters parameters){\n  this.parameters=(CertPathParameters)parameters.clone();\n}\n", "public static void distribute(Object obj, String fileName, Configuration conf) throws FileNotFoundException,\n      IOException, URISyntaxException {\n\n    FileSystem fS = FileSystem.get(conf);\n    // set the temporary folder for Pangool instances to the temporary of the\n    // user that is running the Job\n    // This folder will be used across the cluster for location the instances.\n    // The default value can be changed by a user-provided one.\n    String tmpHdfsFolder = getInstancesFolder(fS, conf);\n    Path toHdfs = new Path(tmpHdfsFolder, fileName);\n    if (fS.exists(toHdfs)) { // Optionally, copy to DFS if\n      fS.delete(toHdfs, false);\n    }\n\n    ObjectOutput out = new ObjectOutputStream(fS.create(toHdfs));\n    out.writeObject(obj);\n    out.close();\n\n    DistributedCache.addCacheFile(toHdfs.toUri(), conf);\n  }", "    public void initGraph(GraphData graphData) {\n    \tgraphView.initGraph(graphData);\n    \t\n    \t// update the cluster size label in toolbar.\n    \ttoolbar.updateClusterSizeLabel(graphView.getClusterSize());\n    \t\n\t\t// update the maximum value of clustering slider in toolbar.\n    \tthis.updateClusteringSliderBar();\n\t\t\n    \t// update cluster combo box.\n\t\tthis.updateClusterComboBox();    \n    }\n", "public boolean isShowNormalFunctions ( ) { return m_normalFunctionCheckbox . isSelected ( ) ; }", "public static MosaicId createMosaicId(final int id){\n  return createMosaicId(new NamespaceId(String.format(\"id%d\",id)),id);\n}", "public static long readSwappedUnsignedInteger ( InputStream input ) throws IOException { int value1 = read ( input ) ; int value2 = read ( input ) ; int value3 = read ( input ) ; int value4 = read ( input ) ; long low = ( ( ( value1 & NUM_ ) << NUM_ ) + (", "public Picture renderToPicture(){\n  Length width=rootElement.width;\n  if (width != null) {\n    float w=width.floatValue(this.renderDPI);\n    float h;\n    Box rootViewBox=rootElement.viewBox;\n    if (rootViewBox != null) {\n      h=w * rootViewBox.height / rootViewBox.width;\n    }\n else {\n      Length height=rootElement.height;\n      if (height != null) {\n        h=height.floatValue(this.renderDPI);\n      }\n else {\n        h=w;\n      }\n    }\n    return renderToPicture((int)Math.ceil(w),(int)Math.ceil(h));\n  }\n else {\n    return renderToPicture(DEFAULT_PICTURE_WIDTH,DEFAULT_PICTURE_HEIGHT);\n  }\n}\n", "public CmsLogFilter filterUser(CmsUUID userId) {\n\n        CmsLogFilter filter = (CmsLogFilter)clone();\n        filter.m_userId = userId;\n        return filter;\n    }", "\tpublic void deleteRshuffle() {\n\t\tdeleteProperty(QTI_RDFS+\"rshuffle\");\n\t\t// Set default value for 'rshuffle'.\n\t\tsetRshuffle(true);\n\t}\n", "    protected List getSingleFile(CmsObject cms, String param) throws CmsException {\n\n        if ((param == null) || (cms == null)) {\n            throw new CmsIllegalArgumentException(Messages.get().container(Messages.ERR_COLLECTOR_PARAM_SINGLE_FILE_0));\n ", "void receivedReply ( QueryDebuggerEventSettingsReply reply ) ;", "public String getScreenURL() {\n        logger.entering();\n        String returnValue = \"no screen\";\n        if (screen != null) {\n            returnValue = screen.replaceAll(\"\\\\\\\\\", \"/\");\n        }\n        logger.exiting(returnValue);\n        return returnValue;\n    }", "public static MediaDescriptionField buildMediaDescription(MediaChannel channel, boolean offer) {\n\t\tMediaDescriptionField md = new MediaDescriptionField();\n\t\t\n\t\tmd.setMedia(channel.getMediaType());\n\t\tmd.setPort(channel.getRtpPort());\n\t\tMediaProfile profile = channel.isDtlsEnabled() ? MediaProfile.RTP_SAVPF : MediaProfile.RTP_AVP;\n\t\tmd.setProtocol(profile.getProfile());\n        final String externalAddress = channel.getExternalAddress() == null || channel.getExternalAddress().isEmpty() ? null : channel.getExternalAddress();\n        md.setConnection(new ConnectionField(\"IN\", \"IP4\", externalAddress != null ? externalAddress : channel.getRtpAddress()));\n\t\tmd.setPtime(new PacketTimeAttribute(20));\n        md.setRtcp(new RtcpAttribute(channel.getRtcpPort(), \"IN\", \"IP4\", externalAddress != null ? externalAddress : channel.getRtcpAddress()));\n\t\tif (channel.isRtcpMux()) {\n\t\t\tmd.setRtcpMux(new RtcpMuxAttribute());\n\t\t}\n\t\t\n\t\t// ICE attributes\n\t\tif (channel.isIceEnabled()) {\n\t\t\tmd.setIceUfrag(new IceUfragAttribute(channel.getIceUfrag()));\n\t\t\tmd.setIcePwd(new IcePwdAttribute(channel.getIcePwd()));\n\t\t\t\n\t\t\t// Fix connection address based on default (only) candidate\n            md.getConnection().setAddress(externalAddress != null ? externalAddress : channel.getRtpAddress());\n\t\t\tmd.setPort(channel.getRtpPort());\n\t\t\t\n\t\t\t// Fix RTCP if rtcp-mux is used\n\t\t\tif(channel.isRtcpMux()) {\n                md.getRtcp().setAddress(externalAddress != null ? externalAddress : channel.getRtpAddress());\n\t\t\t    md.getRtcp().setPort(channel.getRtpPort());\n\t\t\t}\n\t\t\t\n\t\t\t// Add HOST candidate\n\t\t\tmd.addCandidate(processHostCandidate(channel, IceComponent.RTP_ID));\n\t\t\tif(!channel.isRtcpMux()) {\n\t\t\t    md.addCandidate(processHostCandidate(channel, IceComponent.RTCP_ID));\n\t\t\t}\n\t\t\t\n\t\t\tif(channel.getExternalAddress() != null && !channel.getExternalAddress().isEmpty()) {\n\t\t\t    // Add SRFLX candidate\n\t\t\t    md.addCandidate(processSrflxCandidate(channel, IceComponent.RTP_ID));\n\t\t\t    if(!channel.isRtcpMux()) {\n\t\t\t        md.addCandidate(processSrflxCandidate(channel, IceComponent.RTCP_ID));\n\t\t\t    }\n\t\t\t}\n\t\t\t\n//\t\t\tList<LocalCandidateWrapper> rtpCandidates = channel.getRtpCandidates();\n//\t\t\tif(!rtpCandidates.isEmpty()) {\n//\t\t\t\t// Fix connection address based on default candidate\n//\t\t\t\tIceCandidate defaultCandidate = channel.getDefaultRtpCandidate().getCandidate();\n//\t\t\t\tmd.getConnection().setAddress(defaultCandidate.getHostString());\n//\t\t\t\tmd.setPort(defaultCandidate.getPort());\n//\t\t\t\t\n//\t\t\t\t// Fix RTCP if rtcp-mux is used\n//\t\t\t\tif(channel.isRtcpMux()) {\n//\t\t\t\t\tmd.getRtcp().setAddress(defaultCandidate.getHostString());\n//\t\t\t\t\tmd.getRtcp().setPort(defaultCandidate.getPort());\n//\t\t\t\t}\n//\t\t\t\t\n//\t\t\t\t// Add candidates list for ICE negotiation\n//\t\t\t\tfor (LocalCandidateWrapper candidate : rtpCandidates) {\n//\t\t\t\t\tmd.addCandidate(processCandidate(candidate.getCandidate()));\n//\t\t\t\t}\n//\t\t\t}\n\t\t\t\n//\t\t\tif (!channel.isRtcpMux()) {\n//\t\t\t\tList<LocalCandidateWrapper> rtcpCandidates = channel.getRtcpCandidates();\n//\t\t\t\t\n//\t\t\t\tif(!rtcpCandidates.isEmpty()) {\n//\t\t\t\t\t// Fix RTCP based on default RTCP candidate\n//\t\t\t\t\tIceCandidate defaultCandidate = channel.getDefaultRtcpCandidate().getCandidate();\n//\t\t\t\t\tmd.getRtcp().setAddress(defaultCandidate.getHostString());\n//\t\t\t\t\tmd.getRtcp().setPort(defaultCandidate.getPort());\n//\t\t\t\t\t\n//\t\t\t\t\t// Add candidates list for ICE negotiation\n//\t\t\t\t\tfor (LocalCandidateWrapper candidate : rtcpCandidates) {\n//\t\t\t\t\t\tmd.addCandidate(processCandidate(candidate.getCandidate()));\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t}\n\t\t}\n\n\t\t// Media formats\n\t\tRTPFormat[] negotiatedFormats = channel.getFormats().toArray();\n\t\tfor (int index = 0; index < negotiatedFormats.length; index++) {\n\t\t\tRTPFormat f = negotiatedFormats[index];\n\t\t\t// Fixes #61 - MMS SDP offer should offer only 101 telephone-event\n\t\t\tif(offer && AVProfile.isDtmf(f) && !AVProfile.isDefaultDtmf(f)) {\n\t\t\t    continue;\n\t\t\t}\n\t\t\tRtpMapAttribute rtpMap = new RtpMapAttribute();\n\t\t\trtpMap.setPayloadType(f.getID());\n\t\t\trtpMap.setCodec(f.getFormat().getName().toString());\n\t\t\trtpMap.setClockRate(f.getClockRate());\n\t\t\t\n\t\t\tswitch (channel.getMediaType()) {\n\t\t\tcase AudioChannel.MEDIA_TYPE:\n\t\t\t\tAudioFormat audioFormat = (AudioFormat) f.getFormat();\n\n\t\t\t\tif (audioFormat.getChannels() > 1) {\n\t\t\t\t\trtpMap.setCodecParams(audioFormat.getChannels());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (audioFormat.getOptions() != null) {\n\t\t\t\t\trtpMap.setParameters(new FormatParameterAttribute(f.getID(), audioFormat.getOptions().toString()));\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalArgumentException(\"Media type \" + channel.getMediaType() + \" not supported.\");\n\t\t\t}\n\t\t\t\n\t\t\tmd.addPayloadType(String.valueOf(f.getID()));\n\t\t\tmd.addFormat(rtpMap);\n\t\t}\n\n\t\t// DTLS attributes\n\t\tif (channel.isDtlsEnabled()) {\n\t\t\tmd.setSetup(new SetupAttribute(offer ? SetupAttribute.ACTPASS : SetupAttribute.PASSIVE));\n\t\t\tString fingerprint = channel.getDtlsFingerprint();\n\t\t\tint whitespace = fingerprint.indexOf(\" \");\n\t\t\tString fingerprintHash = fingerprint.substring(0, whitespace);\n\t\t\tString fingerprintValue = fingerprint.substring(whitespace + 1);\n\t\t\tmd.setFingerprint(new FingerprintAttribute(fingerprintHash, fingerprintValue));\n\t\t}\n\t\t\n\t\tmd.setConnectionMode(new ConnectionModeAttribute(ConnectionModeAttribute.SENDRECV));\n\t\tSsrcAttribute ssrcAttribute = new SsrcAttribute(Long.toString(channel.getSsrc()));\n\t\tssrcAttribute.addAttribute(\"cname\", channel.getCname());\n\t\tmd.setSsrc(ssrcAttribute);\n\t\t\n\t\treturn md;\n\t}", "public static <C extends Compound> List<SequenceView<C>> overlappingKmers(Sequence<C> sequence, int kmer) {\n\t\tList<SequenceView<C>> l = new ArrayList<SequenceView<C>>();\n\t\tList<Iterator<SequenceView<C>>> windows\n\t\t\t\t= new ArrayList<Iterator<SequenceView<C>>>();\n\n\t\tfor(int i=1; i<=kmer; i++) {\n\t\t\tif(i == 1) {\n\t\t\t\twindows.add(new WindowedSequence<C>(sequence, kmer).iterator());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSequenceView<C> sv = sequence.getSubSequence(i, sequence.getLength());\n\t\t\t\twindows.add(new WindowedSequence<C>(sv, kmer).iterator());\n\t\t\t}\n\t\t}\n\n\t\tOUTER: while(true) {\n\t\t\tfor(int i=0; i<kmer; i++) {\n\t\t\t\tIterator<SequenceView<C>> iterator = windows.get(i);\n\t\t\t\tboolean breakLoop=true;\n\t\t\t\tif(iterator.hasNext()) {\n\t\t\t\t\tl.add(iterator.next());\n\t\t\t\t\tbreakLoop = false;\n\t\t\t\t}\n\t\t\t\tif(breakLoop) {\n\t\t\t\t\tbreak OUTER;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn l;\n\t}", "public Observable<Void> recognizeTextAsync(String url, TextRecognitionMode mode) {\n        return recognizeTextWithServiceResponseAsync(url, mode).map(new Func1<ServiceResponseWithHeaders<Void, RecognizeTextHeaders>, Void>() {\n            @Override\n      ", "boolean enableConnected ( final String ssid , WifiCipherType type , boolean isSsidHidden , String ... password ) ;", "private void heartbeat() {\n    long index = context.nextIndex();\n    long timestamp = System.currentTimeMillis();\n    replicator.replicate(new HeartbeatOperation(index, timestamp))\n        .thenRun(() -> context.setTimestamp(timestamp));\n  }", "public void handleTblButtonAddRequest(RequestInvocationEvent event){\n  IDRepoModel model=(IDRepoModel)getModel();\n  try {\n    Map map=model.getIDRepoTypesMap();\n    IDRepoSelectTypeViewBean vb=(IDRepoSelectTypeViewBean)getViewBean(IDRepoSelectTypeViewBean.class);\n    unlockPageTrail();\n    passPgSessionMap(vb);\n    vb.forwardTo(getRequestContext());\n  }\n catch (  AMConsoleException e) {\n    setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());\n    forwardTo();\n  }\n}\n", "public synchronized boolean updateExpirationInHeader(Object key, long expirationTime, long validatorExpirationTime)\n                    throws IOException,\n                    EOFException,\n                    FileManagerException,\n                    ClassNotFoundException,\n                    HashtableOnDiskException {\n        if (filemgr == null) {\n            throw new HashtableOnDiskException(\"No Filemanager\");\n        }\n\n        if (key == null)\n            return false; // no null keys allowed\n\n        HashtableEntry entry = findEntry(key, RETRIEVE_KEY, !CHECK_EXPIRED);\n        if (entry == null)\n            return false; // not found\n\n        //\n        // Seek to point to validator expiration time field in the header\n        filemgr.seek(entry.location +\n                     DWORDSIZE + // room for next\n                     SWORDSIZE); // room for hash\n        filemgr.writeLong(validatorExpirationTime); // update VET\n        /*\n         * comment out the code below because the expiration time does not change\n         * filemgr.writeInt(0);\n         * filemgr.writeInt(entry.cacheValueHashcode); // update cache value hashcode\n         * filemgr.writeLong(entry.first_created); // update first created (not neccessary but move to pointer\n         * filemgr.writeLong(expirationTime); // update RET\n         */\n        htoddc.returnToHashtableEntryPool(entry);\n        return true;\n    }", "public void onCreate ( FunfManager manager ) ;", "\tpublic void selectTeam(DefaultAjaxSelenium selenium, String teamName){\n\t\tString path=this.getTeamPath(selenium, teamName);\n\t\tselenium.click(path);\n\t\tthis.waitForPageToLoad(selenium);\n\t}\n", "\tprivate void checkEULA() {\n\t\tSharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(this);\n\t\tboolean accepted = sp.getBoolean(EulaActivity.PREFERENCES_EULA_ACCEPTED, false);\n\t\t\n\t\tif (accepted) {\n\t\t\tif (debug) Log.i(_TAG, \"Eula has been accepted.\");\n\t\t} else {\n\t\t\tif (debug) Log.i(_TAG, \"Eula has not been accepted yet.\");\n\t\t\tIntent i = new Intent(this, EulaActivity.class);\n\t\t\tstartActivity(i);\n\t\t\tfinish();\n\t\t}\n\t}\n", "@Override protected void before() throws Throwable {\n  previousThreads=Thread.getAllStackTraces();\n}\n", "public static <T extends Enum<T>> Pattern createValidationPatternFromEnumType(Class<T> enumType) {\n\n        String regEx = Stream.of(enumType.getEnumConstants())\n                .map(Enum::name)\n                .collect(Collectors.joining(\"|\", \"(?i)\", \"\"));\n\n        //Enum constants may contain $ which needs to be escaped\n        regEx = regEx.replace(\"$\", \"\\\\$\");\n        return Pattern.compile(regEx);\n    }", "    public void handleHistoryActionMessage(HistoryActionMessage ham) {\n      try {\n        getHistory().handleHistoryActionMessage( ham );\n      }\n      catch ( NoChangeException nce ) {\n        // Nothing happened, so we must do a notify here\n        // ", "    public double getLastPrice(final String underlying) {\n        try {\n            return this.lastPrices.get(underlying);\n        } catch(NullPointerException npe) {\n            throw new NoSuchElementException(\"No underlying \" + underlying);\n        }\n    }\n", "    public void clearLiveMouseHandler() {\n        this.liveMouseHandler = null;\n    }\n", "    public SensorRead getCurrentSensorRead() {\n        // not sure if this should return a reference or a copy \n        SensorRead read = new SensorRead(sensorButtonCount);\n        read.set(readings[currentIndex]);\n\treturn read;\n    }\n", "@BetaApi\n  public final Router getRouter(String router) {\n\n    GetRouterHttpRequest request = GetRouterHttpRequest.newBuilder().setRouter(router).build();\n    return getRouter(request);\n  }", "public int size ( ) { return key . size ( ) ; }", "public boolean isTimeToRenew(){\n  return creationTime + (lifetime * 3) / 4 < System.currentTimeMillis();\n}\n", "    public void setTf22(String value) {\n        if (value.length() > 18) {\n            value = value.substring(0, 18);\n        }\n        setField(\"JUTF22\", value);\n    }\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "\tpublic Complex minus() {\n\t\tfinal Complex result = (Complex) clone();\n\t\tresult.negate();\n\t\treturn result;\n\t}\n", "public CreateCommitRequest withSetFileModes(SetFileModeEntry... setFileModes) {\n        if (this.setFileModes == null) {\n            setSetFileModes(new java.util.ArrayList<SetFileModeEntry>(setFileModes.length));\n        }\n        for (SetFileModeEntry ele : setFileModes) {\n            this.setFileModes.add(ele);\n        }\n        return this;\n    }", "@Nullable\n  protected ObjectListingChunk getObjectListingChunkForPath(String path, boolean recursive)\n      throws IOException {\n    // Check if anything begins with <folder_path>/\n    String dir = stripPrefixIfPresent(path);\n    ObjectListingChunk objs =", "    public void eventRaised(MapViewer.Event e) {\n        if (VUE.inNativeFullScreen())\n            return;\n        \n        if (e.isActivationEvent() && mapViewer == null) {\n            setViewer(e.viewer);\n        } else if (e.viewer == this.mapViewer) {\n            if (e.id == MapViewer.Event.PAN)\n                repaint();\n            else if (e.id == MapViewer.Event.ZOOM)\n                updateZoomTitle();\n        }\n        \n    }\n", "public TextSpectralSpellPreprocessor(String sArgs){\n  tWords=null;\n  hFoundWords=new Hashtable();\n  sWordMapSem=new Semaphore(1);\n  Args=sArgs.split(\" \");\n}\n", "public static void expandSelectionUp ( final ZyGraph graph ) { checkArguments ( graph ) ; final SelectableGraph < NaviNode > selectableGraph = SelectableGraph . wrap ( graph ) ; if ( graph . getSettings ( ) . getProximitySettings ( ) . getProximityBrowsingFrozen ( ) ) { GraphHelpers . expandSelectionUp ( selectableGraph ) ; } else { final Collection < INaviViewNode > rawNodes = GraphConverters . convert ( graph . getSelectedNodes ( ) ) ; graph . selectNodes ( GraphConverters . convert ( graph , GraphAlgorithms . getPredecessors ( rawNodes , NUM_ ) ) , BOOL_ ) ; } }", "public HttpRequest referer ( final String referer ) { return header ( HEADER_REFERER , referer ) ; }", "public List < IComment > appendComment ( final String commentText ) throws CouldntSaveDataException , CouldntLoadDataException { List < IComment > comments = Lists . newArrayList ( ) ; try { comments = m_instruction . appendGlobalComment ( commentText ) ;", "public Resource loadResource(String resourceName,String subDir){\n  Resource result=null;\n  String newresourceName=subDir + File.separator + resourceName;\n  result=configurationResourceLoader.loadResource(newresourceName,null);\n  return result;\n}\n", "@Override\n    public Iterable<T> findAll() {\n        return inTransaction(new Callable<Iterable<T>>() {\n            @Override\n            public Iterable<T> call() throws Exception {\n                CriteriaQuery<T> cq = entityManager.getCriteriaBuilder().createQuery(entity);\n                Root<T> pet = cq.from(entity);\n                cq.select(pet);\n                return entityManager.createQuery(cq).getResultList();\n            }\n        });\n    }", "public static File createTemplateClassesDir(File tmpDir, String dirPath, \n                                                Log log) {\n        File destDir = null;\n        if (dirPath != null && !dirPath.isEmpty()) {\n            \n            // handle file-based paths\n            if (dirPath.startsWith(\"file:\")) {\n                destDir = new File(dirPath.substring(5));\n            }\n            \n            // otherwise, assume relative path to tmp dir\n            else {\n                destDir = new File(tmpDir, dirPath);\n                try {\n                    if (!destDir.getCanonicalPath().startsWith(\n                            tmpDir.getCanonicalPath().concat(File.separator))) {\n                        throw new IllegalStateException(\n                            \"invalid template classes directory: \" + dirPath\n                        );\n                    }\n                }\n                catch (IOException ioe) {\n                    throw new IllegalStateException(\n                        \"invalid template classes directory: \" + dirPath, \n                        ioe\n                    );\n                }\n            }\n\n            if (!destDir.isDirectory()) {\n                // try creating it but not the parents.\n                if (!destDir.mkdir()) {\n                    log.warn(\"Could not create template classes directory: \" +\n                             destDir.getAbsolutePath());\n                    destDir = null;\n                }\n            }\n\n            if (destDir != null && !destDir.canWrite()) {\n                log.warn(\"Unable to write to template classes directory: \" +\n                         destDir.getAbsolutePath());\n                destDir = null;\n            }\n        }\n\n        return destDir;\n    }", "public Configurator fromFile(File file){\n  if (!file.exists()) {\n    throw new FileNotFoundException(file.getAbsolutePath() + \" does not exist.\");\n  }\n  return new Configurator(file.getAbsolutePath(),false);\n}\n", "public void importFrom(DataInputStream in) throws IOException {\n  seqId=in.readInt();\n  nRows=info.isRowBlockEnabled() ? in.readInt() : 1;\n  importFrom(in,primaryKey);\n  for (int i=0; i < info.colBlocks.length; i++) {\n    ByteArray cb=cellBlocks[i];\n    importFrom(in,cb);\n  }\n}\n", "\tprotected String getMessage() {\n\t\tdouble progress = ((double) barLength /  (double) INITIAL_STEPS);\n\t\tint messageIndex = (int) Math.floor(progress * messages.size());\n\t\tmessageIndex = Math.min(messageIndex, messages.size() - 1); // Limit to available messages\n\t\treturn messages.get(messageIndex);\n\t}\n", "public ExchangeRate ( ) { this . rate_ = Constants . NULL_REAL ; }", "  public void onRemoveUserFromContactList( java.lang.String strUserId )  {\n\n    session.removeFromContactList( Long.parseLong( strUserId ) );\n  }\n", "public void setReplicationSubnetGroups(java.util.Collection<ReplicationSubnetGroup> replicationSubnetGroups) {\n        if (replicationSubnetGroups == null) {\n            this.replicationSubnetGroups = null;\n            return;\n        }\n\n        this.replicationSubnetGroups = new java.util.ArrayList<ReplicationSubnetGroup>(replicationSubnetGroups);\n    }", "public abstract boolean addElement ( CefPostDataElement element ) ;", "public Builder credential ( final Credential credential ) { this . credential = credential ; return this ; }", "@Override\n    public void discardOutput() throws IllegalStateException, IOException{\n        // validate state\n        if (isClosed())\n                throw new IllegalStateException(\"Serial connection is not open; cannot 'discardOutput()'.\");\n\n        // flush data to serial port immediately\n        com.pi4j.jni.Serial.discardOutput(fileDescriptor);\n    }", "  private void setDefaultTabStops() {\n    mTabStops = new boolean[mColumns];\n    mTabStops[0] = false;\n    for (int i = 1; i < mColumns; i++) {\n      mTabStops[i] = (i % 8) == 0;\n    }\n  }\n", "public void writeLength() throws IOException {\n        if (inputStream == null)\n            throw new UnsupportedOperationException(\"writeLength() can only be called in a contructed PdfStream(InputStream,PdfWriter).\");\n        if (inputStreamLength == -1)\n            throw new IOException(\"writeLength() can only be called after output of the stream body.\");\n        writer.addToBody(new PdfNumber(inputStreamLength), ref, false);\n    }", "@Override\n    public ResultMetaData getResultMetaData() {\n\n        switch (type) {\n\n            case StatementTypes.DELETE_WHERE :\n            case StatementTypes.INSERT :\n            case StatementTypes.UPDATE_WHERE :\n            case StatementTypes.MIGRATE_WHERE :\n                return ResultMetaData.emptyResultMetaData;\n\n            default :\n                throw Error.runtimeError(\n                    ErrorCode.U_S0500,\n                    \"CompiledStatement.getResultMetaData()\");\n        }\n    }", "    public void drawNames(Projector prj) {\n        if (asterisms.values().iterator().next().nameFader.hasInterstate()) {\n            glEnable(GL_BLEND);\n            glEnable(GL_TEXTURE_2D);\n\n            glBlendFunc(GL_ONE, GL_ONE);\n            // if (draw_mode == DM_NORMAL) glBlendFunc(GL_ONE, GL_ONE);\n            // else glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA); // charting\n\n            for (Constellation constellation : asterisms.values()) {\n                // Check if in the field of view\n                if (prj.projectJ2000Check(constellation.xyzName, constellation.XYName))\n                    constellation.drawName(asterFont, prj);\n            }\n        }\n    }\n", "    public void addItemAt(int pos, PlaylistItem item) {\n        cachedPlaylist.add(pos, item);\n        if (filterPredicate.evaluate(item)) {\n            filteredPlaylist.add(pos, item);\n        }\n        setModified((item == null) ? false : true);\n        if (playMode == PlayMode.SHUFFLE) {\n            addToShuffledList(item);\n        }\n        fireItemAddedEvent(item);\n    }\n", "public void init ( ) throws ServletException { }", "\tprivate void onOptionsDelete() {\n\t\tCheckBox confirmDelete = (CheckBox) this\n\t\t\t\t.findViewById(R.id.CheckBoxDelete);\n\t\tif (confirmDelete.isChecked()) {\n\t\t\tthis.deleteSaveGame();\n\t\t\tthis.showFormMenuMain();\n\t\t}\n\t}\n", "    public int getExperimentColorIndex(int col) {\n        if(this.experimentColorIndices == null){\n            this.experimentColorIndices = createExperimentColorIndices();\n        }\n        return experimentColorIndices[col];\n    }\n", "boolean inSubroutine ( final long id ) { if ( ( status & Label . VISITED ) != NUM_ ) { return ( srcAndRefPositions [ ( int ) ( id > > > NUM_ ) ] & ( int ) id ) != NUM_ ; } return BOOL_ ; }", "protected static synchronized String resolveDefaultHostName(String cfgDefaultHost) {\n        if (resolvedDefaultHostName == null || !cfgDefaultHost.equals(defaultHostName)) {\n            // remember what was configured. This might be replaced by localhost if\n            // the specified address was unresolvable.\n            defaultHostName = cfgDefaultHost;\n\n            if (HostNameUtils.validLocalHostName(defaultHostName)) {\n                resolvedDefaultHostName = defaultHostName;\n            } else {\n                // If the default host name can not be resolved back to a NIC on this machine,\n                // issue a warning message, and use localhost.\n                Tr.warning(tc, \"unresolveableDefaultHost\", defaultHostName);\n                resolvedDefaultHostName = HttpServiceConstants.LOCALHOST;\n            }\n        }\n        return resolvedDefaultHostName;\n    }", "protected double computeNNForUniformData(final KNNQuery<NumberVector> knnQuery, final double[] min, final double[] extend) {\n    final Random rand = random.getSingleThreadedRandom();\n    final int dim = min.length;\n\n    double[] buf = new double[dim];\n\n    double u = 0.;\n    for(int i = 0; i < sampleSize; i++) {\n      // New random vector\n      for(int d = 0; d < buf.length; d++) {\n        buf[d] = min[d] + (rand.nextDouble() * extend[d]);\n      }\n      double kdist = knnQuery.getKNNForObject(DoubleVector.wrap(buf), k).getKNNDistance();\n      u += MathUtil.powi(kdist, dim);\n    }\n    return u;\n  }", "public void convertToXml(OutputStream os,String charset) throws IOException {\n  out=new OutputStreamWriter(os,Charset.forName(charset));\n  if (rootTag != null) {\n    out.write(\"<\" + rootTag + \">\"+ System.lineSeparator());\n  }\n  PdfStructTreeRoot structTreeRoot=document.getStructTreeRoot();\n  if (structTreeRoot == null)   throw new PdfException(PdfException.DocumentDoesntContainStructTreeRoot);\n  inspectKids(structTreeRoot.getKids());\n  if (rootTag != null) {\n    out.write(\"</\" + rootTag + \">\");\n  }\n  out.flush();\n  out.close();\n}\n", "@Override public void onMeasure(int widthMeasureSpec,int heightMeasureSpec){\n  int measuredWidth=MeasureSpec.getSize(widthMeasureSpec);\n  int widthMode=MeasureSpec.getMode(widthMeasureSpec);\n  int measuredHeight=MeasureSpec.getSize(heightMeasureSpec);\n  int heightMode=MeasureSpec.getMode(heightMeasureSpec);\n  int minDimension=Math.min(measuredWidth,measuredHeight);\n  super.onMeasure(MeasureSpec.makeMeasureSpec(minDimension,widthMode),MeasureSpec.makeMeasureSpec(minDimension,heightMode));\n}\n", "\tpublic double getPDFPoint(double x) throws ArithmeticException {\n\t\tdouble mean = getMean();\n\t\tdouble std = getStd();\n\n\t\tdouble pdfValue = ( 1/ (std * ( Math.sqrt(2 * Math.PI) ) ) )\n                          * Math.exp( -0.5 * ( ((x-mean)/std) * ((x-mean)/std) ) );\n\n        return pdfValue;\n\t}\n", "    public void setMin(int min) {\n        for (int i = 0; i < nelem; i++) {\n            if (array[i] < min) {\n                throw new EuclidRuntimeException(\"element in set (\" + array[i]\n                        + \") less than new max (\" + max + S_RBRAK);\n            }\n        }\n        this.min = min;\n    }\n", "boolean manageIdlePool(ThreadPoolExecutor threadPool, long intervalCompleted) {\n\n        // Manage the intervalCompleted count\n        if (intervalCompleted == 0 && threadPool.getActiveCount() == 0) {\n            consecutiveIdleCount++;\n        } else {\n            consecutiveIdleCount = 0;\n        }\n\n        if (consecutiveIdleCount >= IDLE_INTERVALS_BEFORE_PAUSE) {\n            pause();\n            lastAction = LastAction.PAUSE;\n            return true;\n        }\n\n        return false;\n    }", "    private void setButton(Button button,boolean checked) {\n        if (button instanceof RadioButton) {\n            ((RadioButton)button).setSelected(checked);\n        } else {\n            ((CheckBox)button).setSelected(checked);\n        }\n    }\n", "    public CMLElement makeElementInContext(Element parent) {\n        return new CMLTableRow();\n    }\n", "private static boolean verifyMagic ( byte [ ] magic ) { return Arrays . equals ( magic , HeaderItem . DEX_FILE_MAGIC ) || Arrays . equals ( magic , HeaderItem . DEX_FILE_MAGIC_API_13 ) ; }", "public MultiSearchRequest add(SearchRequestBuilder request){\n  requests.add(request.request());\n  return this;\n}", "public static void inlineFunction ( final JFrame parent , final IViewContainer viewContainer , final ZyGraph graph , final INaviCodeNode node , final INaviInstruction instruction , final INaviFunction function ) { final INaviFunction inlineFunction = prep", "public static CConnection connect ( final CDatabaseConfiguration configuration ) throws CouldntLoadDriverException , CouldntConnectException { checkDriver ( configuration ) ; try { return new CConnection ( configuration ) ; } catch ( final SQLException e ) { CUtilityFunctions . logException ( e ) ; throw new CouldntConnectException ( e , e . getErrorCode ( ) , e . getSQLState ( ) ) ; } }", "public boolean checkEquivalenceHelper(\n      TemplateTypeMap that, EquivalenceMethod eqMethod, SubtypingMode subtypingMode) {\n    return checkEquivalenceHelper(that, eqMethod, EqCache.create(), subtypingMode);\n  }", "public Observable<DatabaseInner> getByRecommendedElasticPoolAsync(String resourceGroupName, String serverName, String recommendedElasticPoolName, String databaseName) {\n        return getByRecommendedElasticPoolWithServiceResponseAsync(resourceGroupName, serverName, recommendedElasticPoolName, databaseName).map(new Func1<ServiceResponse<DatabaseInner>, DatabaseInner>() {\n            @Override\n            public DatabaseInner call(ServiceResponse<DatabaseInner> response) {\n                return response.body();\n            }\n        });\n    }", "void startValidation() {\n\n        m_oldReport.setVisible(false);\n        m_threadReport.removeAllComponents();\n        CmsExternalLinksValidatorThread thread = new CmsExternalLinksValidatorThread(\n            A_CmsUI.getCmsObject(),\n            new Runnable() {\n\n                public void run() {\n\n                    enableButton();\n                }\n\n            });\n        thread.start();\n        CmsReportWidget reportWidget = new CmsReportWidget(thread);\n        reportWidget.setHeight(\"500px\");\n        m_threadReport.addComponent(reportWidget);\n        m_exec.setEnabled(false);\n    }", "public void alignToFourBytes(){\n  data.position((data.position() + 3) & ~3);\n}\n", "void compileBatch(String []files, boolean isMake)\n    throws ClassNotFoundException\n  {\n    try {\n      JavaCompilerUtil compiler = JavaCompilerUtil.create(getClassLoader());\n      compiler.setClassDir(_classDir);\n      compiler.setSourceDir(_sourceDir);\n      if (_encoding != null)\n        compiler.setEncoding(_encoding);\n      compiler.setArgs(_args);\n      compiler.setCompileParent(! isMake);\n      compiler.setSourceExtension(_sourceExt);\n      if (_compiler != null)\n        compiler.setCompiler(_compiler);\n\n      //LineMap lineMap = new LineMap(javaFile.getNativePath());\n      // The context path is obvious from the browser url\n      //lineMap.add(name.replace('.', '/') + _sourceExt, 1, 1);\n          \n      compiler.compileBatch(files);\n    } catch (Exception e) {\n      getClassLoader().addDependency(AlwaysModified.create());\n\n      // Compile errors are wrapped in a special ClassNotFound class\n      // so the server can give a nice error message\n      throw new CompileClassNotFound(e);\n    }\n  }", "public Expression withAnd(Expression... and) {\n        if (this.and == null) {\n            setAnd(new java.util.ArrayList<Expression>(and.length));\n        }\n        for (Expression ele : and) {\n            this.and.add(ele);\n        }\n        return this;\n    }", "static <T>SimpleReactStream<T> simpleReactStreamFromIterable(final Iterable<T> iterable){\n  return simpleReactStream(iterable.iterator());\n}\n", "public boolean isFakeDragging ( ) { return mFakeDragging ; }", "public boolean hasMoreElements(){\n  prep();\n  return rootValue != null || otherValue != null || (subMapValues != null && subMapValues.hasMoreElements());\n}\n", "private boolean isCharacterEscapable ( char c ) { return isCharacterQuoteCharacter ( c ) || isCharacterEscapeCharacter ( c ) ; }", "public String copyValueOf ( char data [ ] , int offset , int count ) { return String . copyValueOf ( data , offset , count ) ; }", "@Override public void installSplitContainerSettings(){\n  super.installSplitContainerSettings();\n  UIManager.put(\"SplitContainer.dividerSize\",new Integer(12));\n  UIManager.put(\"SplitContainer.bgColor\",Colors.WINDOW_BACKGROUND);\n}\n", "\tpublic double getFitness() {\n\t\tif (cachedFitnessValid) return cachedFitness;\n\t\tdouble sum=0;\n\t\tfor (int i=0;i<genom.length;i++) {\n\t\t\tsum+=MEBP.radiusToPower(\n\t\t\t\t\t\tproblem.sortedDistances.getNodeNeighbourDistance(i,genom[i])\n\t\t\t\t\t\t);\n\t\t} \n\t\tcachedFitness=sum;\n\t\tcachedFitnessValid=true;\n\t\treturn cachedFitness;\n\t}\n", "public static ReilInstruction createDiv ( final long offset , final OperandSize firstSize , final String firstValue , final OperandSize secondSize , final String secondValue , final OperandSize thirdSize , final String thirdValue ) { return createTrinaryI", "    public boolean last() throws SQLException {\n\n        checkClosed();\n\n        if (this.getType() == TYPE_FORWARD_ONLY) {\n            throw jdbcUtil.sqlException(Trace.RESULTSET_FORWARD_ONLY);\n        }\n\n        if (rResult == null) {\n            return false;\n        }\n\n        if (rResult.rRoot == null) {\n            return false;\n        }\n\n        // it resultset not traversed yet, set to first row\n        if (!bInit || nCurrent == null) {\n            first();\n        }\n\n        // go to the last row\n        while (nCurrent.next != null) {\n            iCurrentRow++;\n\n            nCurrent = nCurrent.next;\n        }\n\n        return true;\n    }\n", "    private void processStartElement(Attributes attributes) {\n        if (attributes.getIndex(REF) >= 0) {\n            // Add this reference as a sub-element of the current element\n            // definition\n            elementDefinition.addSubElement(attr", "public CSelectionCriteriumPanel ( final CSelectionCriterium criterium ) { super ( new BorderLayout ( ) ) ; m_criterium = criterium ; selectionStateBox . addActionListener ( selectionStateBoxListener ) ; initPanel ( ) ; }", "public String createUrl ( boolean createDB ) { if ( url == null ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( STR_ ) ; sb . append ( host ) ; sb . append ( STR_ ) ; sb . append ( port ) ; sb . append ( STR_ ) ; sb . append ( databaseName ) ; sb . append ( STR_ ) ; return sb . toString ( ) ; } else { return url ; } }", "\tpublic void filter(COSName name, COSDictionary dictionary) {\n\t\taddFilter(0, name, dictionary);\n\t}\n", "  public void paint (Graphics g){\n    super.paint(g);\n    Graphics2D g2d = (Graphics2D) g;\n    drawTopGraph(g2d);\n    drawBottomGraph(g2d);\n    drawTicks(g2d);\n\n    // go through the Vector of paths, and draw each path\n    for (int i=0; i < paths.size(); i++) {\n      pathData = (Vector) paths.elementAt(i);\n      g2d.setColor((Color) pathData.elementAt(0));\n      drawWind(g2d);\n      g2d.setColor((Color) pathData.elementAt(0));\n      drawTrajectory(g2d);\n    }\n    g2d.dispose();\n  }\n", "public Observable<List<ServerCommunicationLinkInner>> listByServerAsync(String resourceGroupName, String serverName) {\n        return listByServerWithServiceResponseAsync(resourceGroupName, serverName).map(new Func1<ServiceResponse<List<ServerCommunicationLinkInner>>, List<ServerCommunicationLinkInner>>() {\n            @Override\n            public List<ServerCommunicationLinkInner> call(ServiceResponse<List<ServerCommunicationLinkInner>> response) {\n                return response.body();\n            }\n        });\n    }", "private CfDef updateCfDefAttributes(Tree statement, CfDef cfDefToUpdate)\n    {\n        CfDef cfDef = new CfDef(cfDefToUpdate);\n\n        for (int i = 1; i < statement.getChildCount(); i += 2)\n        {\n            String currentArgument = statement.getChild(i).getText().toUpperCase();\n            ColumnFamilyArgument mArgument = ColumnFamilyArgument.valueOf(currentArgument);\n            String mValue = statement.getChild(i + 1).getText();\n\n            switch(mArgument)\n            {\n            case COLUMN_TYPE:\n                cfDef.setColumn_type(CliUtils.unescapeSQLString(mValue));\n                break;\n            case COMPARATOR:\n                cfDef.setComparator_type(CliUtils.unescapeSQLString(mValue));\n                break;\n            case SUBCOMPARATOR:\n                cfDef.setSubcomparator_type(CliUtils.unescapeSQLString(mValue));\n                break;\n            case COMMENT:\n                cfDef.setComment(CliUtils.unescapeSQLString(mValue));\n                break;\n            case READ_REPAIR_CHANCE:\n                double chance = Double.parseDouble(mValue);\n\n                if (chance < 0 || chance > 1)\n                    throw new RuntimeException(\"Error: read_repair_chance must be between 0 and 1.\");\n\n                cfDef.setRead_repair_chance(chance);\n                break;\n            case DCLOCAL_READ_REPAIR_CHANCE:\n                double localChance = Double.parseDouble(mValue);\n\n                if (localChance < 0 || localChance > 1)\n                    throw new RuntimeException(\"Error: dclocal_read_repair_chance must be between 0 and 1.\");\n\n                cfDef.setDclocal_read_repair_chance(localChance);\n                break;\n            case GC_GRACE:\n                cfDef.setGc_grace_seconds(Integer.parseInt(mValue));\n                break;\n            case COLUMN_METADATA:\n                Tree arrayOfMetaAttributes = statement.getChild(i + 1);\n                if (!arrayOfMetaAttributes.getText().equals(\"ARRAY\"))\n                    throw new RuntimeException(\"'column_metadata' format - [{ k:v, k:v, ..}, { ... }, ...]\");\n                cfDef.setColumn_metadata(getCFColumnMetaFromTree(cfDef, arrayOfMetaAttributes));\n                break;\n            case MEMTABLE_OPERATIONS:\n                break;\n            case MEMTABLE_THROUGHPUT:\n                break;\n            case DEFAULT_VALIDATION_CLASS:\n                cfDef.setDefault_validation_class(CliUtils.unescapeSQLString(mValue));\n                break;\n            case MIN_COMPACTION_THRESHOLD:\n                int threshold = Integer.parseInt(mValue);\n                if (threshold <= 0)\n                    throw new RuntimeException(\"Disabling compaction by setting min/max compaction thresholds to 0 has been deprecated, set compaction_strategy_options={'enabled':false} instead\");\n                cfDef.setMin_compaction_threshold(threshold);\n                cfDef.putToCompaction_strategy_options(CFPropDefs.KW_MINCOMPACTIONTHRESHOLD, Integer.toString(threshold));\n                break;\n            case MAX_COMPACTION_THRESHOLD:\n                threshold = Integer.parseInt(mValue);\n                if (threshold <= 0)\n                    throw new RuntimeException(\"Disabling compaction by setting min/max compaction thresholds to 0 has been deprecated, set compaction_strategy_options={'enabled':false} instead\");\n                cfDef.setMax_compaction_threshold(Integer.parseInt(mValue));\n                cfDef.putToCompaction_strategy_options(CFPropDefs.KW_MAXCOMPACTIONTHRESHOLD, Integer.toString(threshold));\n                break;\n            case REPLICATE_ON_WRITE:\n                cfDef.setReplicate_on_write(Boolean.parseBoolean(mValue));\n                break;\n            case KEY_VALIDATION_CLASS:\n                cfDef.setKey_validation_class(CliUtils.unescapeSQLString(mValue));\n                break;\n            case COMPACTION_STRATEGY:\n                cfDef.setCompaction_strategy(CliUtils.unescapeSQLString(mValue));\n                break;\n            case COMPACTION_STRATEGY_OPTIONS:\n                cfDef.setCompaction_strategy_options(getStrategyOptionsFromTree(statement.getChild(i+1)));\n                break;\n            case COMPRESSION_OPTIONS:\n                cfDef.setCompression_options(getStrategyOptionsFromTree(statement.getChild(i+1)));\n                break;\n            case BLOOM_FILTER_FP_CHANCE:\n                cfDef.setBloom_filter_fp_chance(Double.parseDouble(mValue));\n                break;\n            case MEMTABLE_FLUSH_PERIOD_IN_MS:\n                cfDef.setMemtable_flush_period_in_ms(Integer.parseInt(mValue));\n                break;\n            case CACHING:\n                cfDef.setCaching(CliUtils.unescapeSQLString(mValue));\n                break;\n            case CELLS_PER_ROW_TO_CACHE:\n                cfDef.setCells_per_row_to_cache(CliUtils.unescapeSQLString(mValue));\n                break;\n            case DEFAULT_TIME_TO_LIVE:\n                cfDef.setDefault_time_to_live(Integer.parseInt(mValue));\n                break;\n            case INDEX_INTERVAL:\n                cfDef.setIndex_interval(Integer.parseInt(mValue));\n                break;\n            case SPECULATIVE_RETRY:\n                cfDef.setSpeculative_retry(CliUtils.unescapeSQLString(mValue));\n                break;\n            case POPULATE_IO_CACHE_ON_FLUSH:\n                cfDef.setPopulate_io_cache_on_flush(Boolean.parseBoolean(mValue));\n                break;\n            default:\n                //must match one of the above or we'd throw an exception at the valueOf statement above.\n                assert(false);\n\n            }\n        }\n\n        return cfDef;\n    }", "  public ProgressDialog createProgressDialog(int min, int max, int initialValue, String title, String content) {\n    return new ProgressDialogImpl(min, max, initialValue, title, content);\n  }\n", "public void vibrate(boolean vibrate){\n  mVibrate=vibrate;\n}\n", "public AttributePayload withAttributes(java.util.Map<String, String> attributes) {\n        setAttributes(attributes);\n        return this;\n    }", "public void onLoadError ( CefBrowser browser , int frameIdentifer , ErrorCode errorCode , String errorText , String failedUrl ) ;", "    public void moveBuddy(final String theBuddyName, final String theGroupName) {\n\tif (isContained(_myBuddies, theBuddyName)) {\n\t    char myStatus = buddy(theBuddyName).statuschar();\n\t    removeBuddy(theBuddyName);\n\t    addBuddies(new String[] { theBuddyN", "public URLConnection openConnection(Proxy proxy) throws IOException {\n  if (proxy == null) {\n    throw new IllegalArgumentException(\"proxy == null\");\n  }\n  return streamHandler.openConnection(this,proxy);\n}\n", "public Set<String> showZoneNamesForPwwn(String pwwn,Integer vsanId,boolean activeOnly) throws NetworkDeviceControllerException {\n  Set<String> zoneNames=Sets.newHashSet();\n  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};\n  StringBuilder buf=new StringBuilder();\n  String cmdKey=activeOnly ? \"MDSDialog.showZone.pwwn.active.cmd\" : \"MDSDialog.showZone.pwwn.cmd\";\n  String payload=MessageFormat.format(MDSDialogProperties.getString(cmdKey),pwwn,vsanId.toString());\n  sendWaitFor(payload,defaultTimeout,prompts,buf);\n  String[] lines=getLines(buf);\n  String[] regex={MDSDialogProperties.getString(\"MDSDialog.zoneName.match\")};\n  String[] groups=new String[10];\n  for (  String line : lines) {\n    int index=match(line,regex,groups);\nswitch (index) {\ncase 0:\n      zoneNames.add(groups[0]);\n    break;\n}\n}\nreturn zoneNames;\n}\n", "@Override public boolean execute(final String[] params,final String remainder){\n  j2DClient client=j2DClient.get();\n  if (client != null) {\n    client.requestQuit();\n  }\n else {\n    System.exit(0);\n  }\n  return true;\n}\n", "@Pure\n\t@SuppressWarnings(\"checkstyle:cyclomaticcomplexity\")\n\tpublic PT getStartingPointFor(int index) {\n\t\tif ((index < 1) || (this.segmentList.size() <= 1)) {\n\t\t\tif (this.startingPoint != null) {\n\t\t\t\treturn this.startingPoint;\n\t\t\t}\n\t\t} else {\n\t\t\tint idx = index;\n\t\t\tST currentSegment = this.segmentList.get(idx);\n\t\t\tST previousSegment = this.segmentList.get(--idx);\n\n\t\t\t// Because the two segments are the same\n\t\t\t// we must go deeper in the path elements\n\t\t\t// to detect the right segment\n\t\t\tint count = 0;\n\t\t\twhile ((previousSegment != null) && (previousSegment.equals(currentSegment))) {\n\t\t\t\tcurrentSegment = previousSegment;\n\t\t\t\tidx--;\n\t\t\t\tpreviousSegment = (idx >= 0) ? this.segmentList.get(idx) : null;\n\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tif (count > 0) {\n\t\t\t\tPT sp = null;\n\t\t\t\tif (previousSegment != null) {\n\t\t\t\t\tfinal PT p1 = currentSegment.getBeginPoint();\n\t\t\t\t\tfinal PT p2 = currentSegment.getEndPoint();\n\t\t\t\t\tfinal PT p3 = previousSegment.getBeginPoint();\n\t\t\t\t\tfinal PT p4 = previousSegment.getEndPoint();\n\n\t\t\t\t\tassert p1 != null && p2 != null && p3 != null && p4 != null;\n\t\t\t\t\tif (p1.equals(p3) || p1.equals(p4)) {\n\t\t\t\t\t\tsp = p1;\n\t\t\t\t\t} else if (p2.equals(p3) || p2.equals(p4)) {\n\t\t\t\t\t\tsp = p2;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tsp = this.startingPoint;\n\t\t\t\t}\n\t\t\t\tif (sp != null) {\n\t\t\t\t\treturn ((count % 2) == 0) ? sp : currentSegment.getOtherSidePoint(sp);\n\t\t\t\t}\n\n\t\t\t} else if ((currentSegment != null) && (previousSegment != null)) {\n\t\t\t\t// if the two segments are different\n\t\t\t\t// it is simple to detect the\n\t\t\t\t// common point\n\t\t\t\tfinal PT p1 = currentSegment.getBeginPoint();\n\t\t\t\tfinal PT p2 = currentSegment.getEndPoint();\n\t\t\t\tfinal PT p3 = previousSegment.getBeginPoint();\n\t\t\t\tfinal PT p4 = previousSegment.getEndPoint();\n\n\t\t\t\tassert p1 != null && p2 != null && p3 != null && p4 != null;\n\t\t\t\tif (p1.equals(p3) || p1.equals(p4)) {\n\t\t\t\t\treturn p1;\n\t\t\t\t}\n\t\t\t\tif (p2.equals(p3) || p2.equals(p4)) {\n\t\t\t\t\treturn p2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}", "public static float getTypeDifferenceWeight(Class<?>[] paramTypes, Object[] destArgs) {\n        if (paramTypes.length != destArgs.length) {\n            return Float.MAX_VALUE;\n        }\n\n        float weight = 0.0f;\n        for (int i = 0; i < paramTypes.length; i++) {\n            Class<?> srcClass = paramTypes[i];\n            Object destArg = destArgs[i];\n            weight += getTypeDifferenceWeight(srcClass, destArg);\n            if (weight == Float.MAX_VALUE) {\n                break;\n            }\n        }\n        return weight;\n    }", "public static final boolean createFileParentDir(String filePath){\n  File file=new File(filePath);\n  if (file != null) {\n    if (file.exists()) {\n      return true;\n    }\n else {\n      File parentFile=file.getParentFile();\n      if (parentFile != null) {\n        if (parentFile.exists()) {\n          return true;\n        }\n else {\n          return parentFile.mkdirs();\n        }\n      }\n    }\n  }\n  return false;\n}\n", "public void swap ( ) { MethodVisitor mv = controller . getMethodVisitor ( ) ; int size = stack . size ( ) ; ClassNode b = stack . get ( size - NUM_ ) ; ClassNode a = stack . get ( size - NUM_ ) ; if ( isTwoSlotType ( a ) ) { if ( isTwoSlotType ( b ) ) { mv . visitInsn ( DUP2_X2 ) ; mv . visitInsn ( POP2 ) ; } else { mv . visitInsn ( DUP_X2 ) ; mv . visitInsn ( POP ) ; } } else { if ( isTwoSlotType ( b ) ) { mv . visitInsn ( DUP2_X1 ) ; mv . visitInsn ( POP2 ) ; } else { mv . visitInsn ( SWAP ) ; } } stack . set ( size - NUM_ , a ) ; stack . set ( size - NUM_ , b ) ; }", "    public void saveEMailConfiguration() {\n\n        daemonActions = new DaemonActions();\n\n        daemonPropeties = new DaemonPropertiesHandler();\n\n        if (daemonActions.setEMailConfiguration(\n                daemonPropeties.getDBUserName(), daemonPro", "@Pure\n\tpublic N getChildAt(IcosepOctTreeZone zone) {\n\t\tif (zone == IcosepOctTreeZone.ICOSEP) {\n\t\t\treturn this.nicosep;\n\t\t}\n\t\treturn getChildAt(zone.toOctTreeZone());\n\t}", "public void clean(){\n  for (int i=theAtts.getLength() - 1; i >= 0; i--) {\n    String name=theAtts.getLocalName(i);\n    if (theAtts.getValue(i) == null || name == null || name.length() == 0) {\n      theAtts.removeAttribute(i);\n      continue;\n    }\n  }\n}\n", "public AccountInfoCache create ( ) { final List < AccountInfo > r = new ArrayList < > ( out . size ( ) ) ; for ( final Account a : out . values ( ) ) { r . add ( new AccountInfo ( a ) ) ; } return new AccountInfoCache ( r ) ; }", "\tpublic Diagnostic analyzeResourceProblems(Resource resource, Exception exception) {\n\t\tif (!resource.getErrors().isEmpty() || !resource.getWarnings().isEmpty()) {\n\t\t\tBasicDiagnostic basicDiagnostic =\n\t\t\t\tnew BasicDiagnostic\n\t\t\t\t\t(Diagnostic.ERROR,\n\t\t\t\t\t \"harzemli.ui.editor\",\n\t\t\t\t\t 0,\n\t\t\t\t\t getString(\"_UI_CreateModelError_message\", resource.getURI()),\n\t\t\t\t\t new Object [] { exception == null ? (Object)resource : exception });\n\t\t\tbasicDiagnostic.merge(EcoreUtil.computeDiagnostic(resource, true));\n\t\t\treturn basicDiagnostic;\n\t\t}\n\t\telse if (exception != null) {\n\t\t\treturn\n\t\t\t\tnew BasicDiagnostic\n\t\t\t\t\t(Diagnostic.ERROR,\n\t\t\t\t\t \"harzemli.ui.editor\",\n\t\t\t\t\t 0,\n\t\t\t\t\t getString(\"_UI_CreateModelError_message\", resource.getURI()),\n\t\t\t\t\t new Object[] { exception });\n\t\t}\n\t\telse {\n\t\t\treturn Diagnostic.OK_INSTANCE;\n\t\t}\n\t}\n", "\t\tprivate boolean isActive() {\n\t\t\treturn (curve != null);\n\t\t}\n", "@SuppressWarnings(\"deprecation\")\n\tOperationalConfig buildOperationalConfig() {\n\t\treturn new OperationalConfigImpl(isAsync(), getProperties(), getSessionTimeout(), getThreadPoolSize(), isTransportModeLoggingOnly(), isDebugLogging(),\n\t\t\t\tgetSslHostsToTrust(), isTrustAllSSLHost());\n\t}", "public UserConfig updateIcon(String file,UserConfig config){\n  config.addCredentials(this);\n  String xml=POSTIMAGE(this.url + \"/update-user-icon\",file,\"image.jpg\",config.toXML());\n  Element root=parse(xml);\n  if (root == null) {\n    return null;\n  }\n  try {\n    config=new UserConfig();\n    config.parseXML(root);\n    return config;\n  }\n catch (  Exception exception) {\n    this.exception=SDKException.parseFailure(exception);\n    throw this.exception;\n  }\n}\n", "public void testSeekNotArrivedEvent ( ) throws Exception { File logDir = prepareLogDir ( STR_ ) ; DiskLog log = openLog ( logDir , BOOL_ ) ; log . setTimeoutMillis ( NUM_ ) ; writeEventsToLog ( log , NUM_ , NUM_ ) ; LogConnection conn = log . connect ( BO", "public static List<Boolean> parserBooleanList(JsonPullParser parser) throws IOException,\n\t\t\tJsonFormatException {\n\n\t\tState eventType = parser.getEventType();\n\t\tif (eventType == State.VALUE_NULL) {\n\t\t\treturn null;\n\t\t}\n\t\tif (eventType != State.START_ARRAY) {\n\t\t\tthrow new IllegalStateException(\"not started brace!\");\n\t\t}\n\t\tList<Boolean> list = new ArrayList<Boolean>();\n\t\twhile (parser.lookAhead() != State.END_ARRAY) {\n\t\t\teventType = parser.getEventType();\n\t\t\tif (eventType == State.VALUE_NULL) {\n\t\t\t\tlist.add(null);\n\t\t\t} else if (eventType == State.VALUE_BOOLEAN) {\n\t\t\t\tlist.add(parser.getValueBoolean());\n\t\t\t} else {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"unexpected state. expected=VALUE_BOOLEAN, but get=\" + eventType.toString());\n\t\t\t}\n\t\t}\n\t\tparser.getEventType();\n\t\treturn list;\n\t}", "public Component ( boolean enableCache ) { this ( null , enableCache ) ; }", "public boolean exists(String... keys){\n  return get0(keys) != null;\n}", "static String [ ] concatStringArrays ( String [ ] array1 , String [ ] array2 ) { String [ ] result = new String [ array1 . length + array2 . length ] ; for ( int i = NUM_ ; i < array1 . length ; i ++ ) { result [ i ] = array1 [ i ] ; } for ( int i = NUM_ ; i < array2 . length ; i ++ ) { result [ i + array1 . length ] = array2 [ i ] ; } return result ; }", "\tpublic LimeTableColumn getColumn(int idx) {\n        switch(idx) {\n            case NAME_IDX:      return NAME_COLUMN;\n            case LENGTH_IDX:    return LENGTH_COLUMN;\n            case BITRATE_IDX:   return BITRATE_COLUMN;\n        }\n        return null;\n    }\n", "JSONStringer open(Scope empty,String openBracket) throws JSONException {\n  if (stack.isEmpty() && out.length() > 0) {\n    throw new JSONException(\"Nesting problem: multiple top-level roots\");\n  }\n  beforeValue();\n  stack.add(empty);\n  out.append(openBracket);\n  return this;\n}\n", "@Override\n    protected String defaultActionHtmlContent() {\n\n        StringBuffer result = new StringBuffer(2048);\n        result.append(\"<form name=\\\"EDITOR\\\" id=\\\"EDITOR\\\" method=\\\"post\\\" action=\\\"\").append(getDialogUri());\n        result.append(\"\\\" class=\\\"nomargin\\\" onsubmit=\\\"return submitAction('\").append(DIALOG_OK).append(\n            \"', null, 'EDITOR');\\\">\\n\");\n        result.append(dialogContentStart(null));\n        result.append(buildDialogForm());\n        result.append(dialogContentEnd());\n        result.append(dialogButtonsCustom());\n        result.append(paramsAsHidden());\n        if (getParamFramename() == null) {\n            result.append(\"\\n<input type=\\\"hidden\\\" name=\\\"\").append(PARAM_FRAMENAME).append(\"\\\" value=\\\"\\\">\\n\");\n        }\n\n        // add script for filtering categories\n        result.append(filterCategoryJS());\n        result.append(\"</form>\\n\");\n\n        // get search results if query was more than nothing\n        // we have to retrieve them before category search results are available because\n        // those are collected as a side effect of search iteration.\n        String searchResults = createSearchResults();\n\n        // append category search results if there...\n        result.append(createCategorySearchResultHtml());\n        result.append(searchResults);\n\n        result.append(getWidgetHtmlEnd());\n        // Normalize the previous encoded query value on client side\n        result.append(normalizePreviousQueryJS());\n\n        return result.toString();\n    }", "public void dequeue(AnthURL url){\n  readyUrls.remove(url);\n  if (valueFunction.getNecessities(HostValueUpdateNecessity.ON_QUEUE_CHANGE)) {\n    scoreUpdateNeeded=true;\n  }\n}\n", "void pushLong ( final long x ) ;", "@Override public double calculate_K(int[] x_index,double[] x_att,int[] y_index,double[] y_att){\n  double expression=norm2(x_index,x_att,y_index,y_att) / sigma;\n  if (expression > 1) {\n    return 0.0d;\n  }\n else {\n    double minus=1.0d - expression;\n    return Math.pow(minus,degree);\n  }\n}\n", "    public String registerStatusChangeListener(String uri, String handle) throws IOException {\n        Map<String, String> params = prepareParamMap(\"registerStatusChangeListener\", handle);\n        params.put(\"uri\", uri);\n        return executeGet(_serviceURI, params);\n    }\n", "public void marshall(ListImagesFilter listImagesFilter, ProtocolMarshaller protocolMarshaller) {\n\n        if (listImagesFilter == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(listImagesFilter.getTagStatus(), TAGSTATUS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "  public void setProgress(int value) {\n    v = value;\n    if (value >= max) {\n      close();\n    } else if (value >= lastDisp + reportDelta) {\n      lastDisp = value;\n      if (popped) {\n        notifyStateChanged();\n      } else {\n        long T = System.currentTimeMillis();\n        long dT = (int)(T-T0);\n        if (dT >= millisToDecideToPopup) {\n          int predictedCompletionTime;\n          if (value > min) {\n            predictedCompletionTime = (int)(dT *\n                                            (max - min) /\n                                            (value - min));\n          } else {\n            predictedCompletionTime = millisToPopup;\n          }\n          if (predictedCompletionTime >= millisToPopup) {\n            popped = true;\n            notifyDisplay();\n          }\n        }\n      }\n    }\n  }\n", "public void marshall(OTAUpdateSummary oTAUpdateSummary, ProtocolMarshaller protocolMarshaller) {\n\n        if (oTAUpdateSummary == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n      ", "private final boolean eq ( long v1 , long v2 ) { return v1 == v2 ; }", "    private File backupFile(File file) throws IOException {\n        if (!file.exists()) {\n            return null;\n        }\n        String backupName = file.getAbsolutePath() + \"~\";\n        File backup = new File(backupName);\n        FileUtils.copyFile(file, backup);\n        file.delete();\n        return backup;\n    }\n", "void onFilterChangedEvent(@Observes FilterChangedEvent filterChangedEvent) {\n        checkNotNull(\"filterChangedEvent\",\n                     filterChangedEvent);\n        if (filterChangedEvent.getContext().equals(dataSetFilterEditor)) {\n            final ", "\tpublic String getFriendList() {\n\n\t\tStringBuilder result = new StringBuilder(\"[\");\n\n\t\tCollections.sort(list, new Comparator<PublicProfile>() {\n\n\t\t\tpublic int compare(PublicProfile arg0, PublicProfile arg1) {\n\t\t\t\treturn arg0.compareTo(arg1);\n\t\t\t}\n\n\t\t});\n\n\t\tfor (int i = 0; i < list.size(); i++) {\n\t\t\tif (i != 0) {\n\t\t\t\tresult.append(\", \");\n\t\t\t}\n\t\t\tresult.append(list.get(i).getName());\n\t\t}\n\n\t\tresult.append(\"]\");\n\n\t\treturn result.toString();\n\t}\n", "    public String parameterName(Component c, String name) {\n        if ( c == null || ! stateContains(c) ) {\n            return name;\n        }\n\n        return componentPrefix(c) + name;\n    }\n", "private static boolean isMergedSegment(String segName){\n  if (segName.contains(\".\")) {\n    return true;\n  }\n  return false;\n}\n", "protected void sendBroadcast ( Context context , Intent intent ) { context . sendBroadcast ( intent ) ; }", "public boolean isOverriden(){\n  return overridesMe.size() > 0;\n}\n", "private boolean handlePropertyValue(CssDeclaration declaration, CssToken start,\n      CssTokenIterator iter, boolean isStyleAttribute)\n  {\n    // we dont worry about EOF here, throw to caller\n    while (true)\n    {\n\n      if (start.type == CssToken.Type.IMPORTANT)\n      {\n        declaration.important = true;\n      }\n      else\n      {\n        CssConstruct cc = CssConstructFactory.create(\n            start, iter, MATCH_SEMI_CLOSEBRACE,\n            ContextRestrictions.PROPERTY_VALUE);\n        if (cc == null)\n        {\n          return false;\n        }\n        else\n        {\n          declaration.components.add(cc);\n        }\n      }\n\n      //if isStyleAttribute, then parse as declaration-list grammar,\n      //i.e. no braces\n      if ((isStyleAttribute && !iter.hasNext())\n          || (MATCH_SEMI.apply(iter.peek()))\n          || (!isStyleAttribute && MATCH_CLOSEBRACE.apply(iter.peek())))\n      {\n        return declaration.components.size() > 0;\n      }\n      else\n      {\n        start = iter.next();\n      }\n    }\n  }", "public static String readPayload(BufferedReader socketReader,int payloadLength) throws IOException, ReplicatorException {\n  if (payloadLength == 0) {\n    return \"\";\n  }\n else   if (payloadLength == -1) {\n    return null;\n  }\n  char[] buf=new char[1024];\n  StringBuilder payload=new StringBuilder();\n  do {\n    int bytesRead=socketReader.read(buf,0,buf.length);\n    if (bytesRead > 0)     payload.append(new String(buf,0,bytesRead));\n  }\n while (payload.length() < payloadLength);\n  if (payload.length() != payloadLength) {\n    throw new ReplicatorException(\"Size of received payload is incorrect (expected=\" + payloadLength + \", received=\"+ payload.length()+ \"):\"+ payload);\n  }\n  return payload.toString();\n}\n", "public static < T > LinkedBindingBuilder < T > bind ( Binder binder , TypeLiteral < T > type ) { binder . disableCircularProxies ( ) ; return binder . bind ( type ) . annotatedWith ( UniqueAnnotations . create ( ) ) ; }", "private Tuple<Message,Connection> tryOtherMessages(){\n  List<Tuple<Message,Connection>> messages=new ArrayList<Tuple<Message,Connection>>();\n  Collection<Message> msgCollection=getMessageCollection();\n  for (  Connection con : getConnections()) {\n    DTNHost other=con.getOtherNode(getHost());\n    ProphetRouterWithEstimation othRouter=(ProphetRouterWithEstimation)other.getRouter();\n    if (othRouter.isTransferring()) {\n      continue;\n    }\n    for (    Message m : msgCollection) {\n      if (othRouter.hasMessage(m.getId())) {\n        continue;\n      }\n      if (othRouter.getPredFor(m.getTo()) > getPredFor(m.getTo())) {\n        messages.add(new Tuple<Message,Connection>(m,con));\n      }\n    }\n  }\n  if (messages.size() == 0) {\n    return null;\n  }\n  Collections.sort(messages,new TupleComparator());\n  return tryMessagesForConnected(messages);\n}\n", "public void init ( ) throws ServletException { }", "public void testEmbeddedStringParsing ( ) throws Exception { String testStrings [ ] = { STR_ , STR_ , STR_ , STR_ , STR_ } ; MySQLStatementTranslator translator = new MySQLStatementTranslator ( STR_ ) ; for ( String testString : testStrings ) { byte [ ] t", "public static Float[] nullToEmpty(Float[] array) {\n        if (array == null || array.length == 0) {\n            return EMPTY_FLOAT_OBJECT_ARRAY;\n        }\n        return array;\n    }", "public static boolean isNotNull(final String element){\n  boolean isNotNull=false;\n  if (element != null && !element.isEmpty()) {\n    isNotNull=true;\n  }\n  return isNotNull;\n}\n", "    public String get_linkcatname(int id) {\n        Object cats;\n\n        /* Do not change type */\n        int cat_id = 0;\n        StdClass cat = null;\n        getIncluded(FunctionsPage.class)._deprecated_function(SourceCodeInfo.getCurrentFunction(), \"0.0\", \"get_category()\");\n\n        if (empty(id)) {\n            return \"\";\n        }\n\n        cats = getIncluded(org.numiton.nwp.wp_admin.includes.BookmarkPage.class).wp_get_link_cats(id);\n\n        if (empty(cats) || !is_array(cats)) {\n            return \"\";\n        }\n\n        cat_id = intval(((Array) cats).get(0)); // Take the first cat.\n        \n        cat = (StdClass) getIncluded(CategoryPage.class).get_category(cat_id, gConsts.getOBJECT(), \"raw\");\n\n        return strval(StdClass.get(cat, \"name\"));\n    }\n", "    protected Object makeNewServiceObject(MessageContext msgContext) throws AxisFault {\n        Object serviceObject = Utils.createServiceObject(msgContext.getAxisService());\n        if (serviceObject == null) {\n            throw new AxisFault(\n                    Messages.getMessage(\"paramIsNotSpecified\", \"SERVICE_OBJECT_SUPPLIER\"));\n        } else {\n            return serviceObject;\n        }\n    }\n", "public synchronized OMGraphicList prepare(){\n  JGraphicList emptyList=new JGraphicList();\n  if (isCancelled()) {\n    dirtybits|=PREMATURE_FINISH;\n    if (Debug.debugging(\"basic\")) {\n      Debug.output(getName() + \"|CSpecLayer.prepare(): aborted.\");\n    }\n    return emptyList;\n  }\n  if (Debug.debugging(\"basic\")) {\n    Debug.output(getName() + \"|CSpecLayer.prepare(): doing it\");\n  }\n  dirtybits=0;\n  setAcceptingEvents(false);\n  Projection projection=getProjection();\n  UGraphic[] specGraphics=getSpecGraphics(projection);\n  if (isCancelled()) {\n    dirtybits|=PREMATURE_FINISH;\n    if (Debug.debugging(\"basic\"))     Debug.output(getName() + \"|CSpecLayer.prepare(): \" + \"aborted during/after getRectangle().\");\n    return emptyList;\n  }\n  if (specGraphics == null) {\n    return emptyList;\n  }\n  long start=System.currentTimeMillis();\n  JGraphicList graphics=createGraphicsList(specGraphics,projection);\n  long stop=System.currentTimeMillis();\n  if (Debug.debugging(\"cspec\")) {\n    Debug.output(getName() + \"|CSpecLayer.prepare(): generated \" + specGraphics.length+ \" graphics in \"+ ((stop - start) / 1000d)+ \" seconds.\");\n  }\n  if (isCancelled()) {\n    dirtybits|=PREMATURE_FINISH;\n    if (Debug.debugging(\"basic\")) {\n      Debug.output(getName() + \"|CSpecLayer.prepare(): \" + \"aborted while generating graphics.\");\n    }\n    return emptyList;\n  }\n  if (Debug.debugging(\"basic\")) {\n    Debug.output(getName() + \"|CSpecLayer.prepare(): finished preparing \" + graphics.size()+ \" graphics\");\n  }\n  setAcceptingEvents(true);\n  return graphics;\n}\n", "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=new Vector<Option>(5);\n  result.addElement(new Option(\"\\tSpecify the random number seed (default 1)\",\"S\",1,\"-S <num>\"));\n  result.addElement(new Option(\"\\tThe size of the output dataset, as a percentage of\\n\" + \"\\tthe input dataset (default 100)\",\"Z\",1,\"-Z <num>\"));\n  result.addElement(new Option(\"\\tBias factor towards uniform class distribution.\\n\" + \"\\t0 = distribution in input data -- 1 = uniform distribution.\\n\" + \"\\t(default 0)\",\"B\",1,\"-B <num>\"));\n  result.addElement(new Option(\"\\tDisables replacement of instances\\n\" + \"\\t(default: with replacement)\",\"no-replacement\",0,\"-no-replacement\"));\n  result.addElement(new Option(\"\\tInverts the selection - only available with '-no-replacement'.\",\"V\",0,\"-V\"));\n  return result.elements();\n}\n", "private static void savePgr(DispatchContext dctx,GenericValue pgr){\n  Map<String,GenericValue> context=UtilMisc.<String,GenericValue>toMap(\"paymentGatewayResponse\",pgr);\n  LocalDispatcher dispatcher=dctx.getDispatcher();\n  Delegator delegator=dctx.getDelegator();\n  try {\n    dispatcher.addRollbackService(\"savePaymentGatewayResponse\",context,true);\n    delegator.create(pgr);\n  }\n catch (  Exception e) {\n    Debug.logError(e,module);\n  }\n}\n", "    public void list(PrintWriter out) {\n        Enumeration keys = keys();\n        Enumeration elts = elements();\n        while (keys.hasMoreElements()) {\n            String key = (String) keys.nextElement();\n            String elt = (String) elts.nextElement();\n            String output = formatForOutput(key,elt);\n            out.println(output);\n        }\n    }\n", "  @SuppressWarnings(\"unchecked\") public T get() {\n    try {\n      setAccessible(field, true);\n      return (T) field.get(target);\n    } catch (Exception e) {\n      throw new ReflectionError(\n      \t\tnew StringBuilder(\"Unable to obtain the value in field \").append('\\'').\n      \t\t\tappend(field.getName()).append('\\'').toString(), e);\n    } finally {\n      setAccessibleIgnoringExceptions(field, accessible);\n    }\n  }\n", "    protected InputStream retrievePersistanceInStream() throws IOException, CancelledException {\n        javax.swing.JFileChooser jfcChooser = getChooser();\n\n        do {\n            jfcChooser.getSelectedFile();\n\n            if (jfcChooser.showOpenDialog(null) == javax.swing.JFileChooser.CANCEL_OPTION) {\n                throw new CancelledException(\"File choosing cancelled.\");\n            }\n\n        }\n        while (!jfcChooser.getSelectedFile().exists());\n\n        return new java.io.FileInputStream(jfcChooser.getSelectedFile());\n    }\n", "public static List<Declaration> lookupOverloadedByName(List<Declaration> members,String name){\n  List<Declaration> result=null;\n  for (  Declaration dec : members) {\n    if (isResolvable(dec) && isNamed(name,dec)) {\n      if (result == null) {\n        result=new ArrayList<Declaration>(3);\n      }\n      result.add(dec);\n    }\n  }\n  if (result == null) {\n    result=Collections.emptyList();\n  }\n  return result;\n}\n", "public static void showContextHelp ( final JFrame window ) { CHelpManager . instance ( ) . start ( window ) ; }", "\tpublic void doFitSize() {\n\t\t// normally 0 ! Or we have a i.e. a toolBar on top of the listBox.\n\t\tfinal int specialSize = 26;\n\t\tfinal int height = ((Intbox) Path.getComponent(\"/outerIndexWindow/currentDesktopHeight\")).getValue().intValue();\n\t\tfinal int maxListBoxHeight = height - specialSize - 88;\n\t\tthis.borderLayout_blog.setHeight(String.valueOf(maxListBoxHeight) + \"px\");\n\n\t\tborderLayout_blog.invalidate();\n\t}\n", "  public boolean coveredBy(Geometry g) {\n    return g.covers(this);\n  }\n", "public HttpAuditEvent ( String sessionId , CurrentUser who , String what , long when , Multimap < String , ? > params , String httpMethod , Object input , int status , Object result ) { super ( sessionId , who , what , when , params , result ) ; this . ht", "static void freePollArray(long address){\n  unsafe.freeMemory(address);\n}\n", "public void addSwitchWithOptionalExtraPart ( String option , String optionExtraPartSynopsis , String description ) { optionList . add ( option ) ; optionExtraPartSynopsisMap . put ( option , optionExtraPartSynopsis ) ; optionDescriptionMap . put ( option , description ) ; int length = option . length ( ) + optionExtraPartSynopsis . length ( ) + NUM_ ; if ( length > maxWidth ) { maxWidth = length ; } }", "  public void setCompany(int i, Company v) { \n    if (JointVenture_Type.featOkTst && ((JointVenture_Type)jcasType).casFeat_company == null)\n      jcasType.jcas.throwFeatMissing(\"company\", \"org.apache.uima.calaisType.relation.JointVenture\");\n    jcasType.jcas.checkArrayBounds(jcasType.ll_cas.ll_getRefValue(addr, ((JointVenture_Type)jcasType).casFeatCode_company), i);\n    jcasType.ll_cas.ll_setRefArrayValue(jcasType.ll_cas.ll_getRefValue(addr, ((JointVenture_Type)jcasType).casFeatCode_company), i, jcasType.ll_cas.ll_getFSRef(v));}\n", "public void drawDistanceAttack(final Graphics2D g2d,final RPEntity entity,final RPEntity target,final int x,final int y,final int width,final int height){\n  Nature nature=entity.getShownDamageType();\n  int startX=x + width / 2;\n  int startY=y + height / 2;\n  int endX=(int)(TILE_SIZE * (target.getX() + target.getWidth() / 2));\n  int endY=(int)(TILE_SIZE * target.getY());\n  int yLength=(endY - startY) / NUM_ATTACK_FRAMES;\n  int xLength=(endX - startX) / NUM_ATTACK_FRAMES;\n  startY+=frame * yLength;\n  endY=startY + yLength;\n  startX+=frame * xLength;\n  endX=startX + xLength;\n  g2d.setColor(ARROW_COLOR.get(nature));\n  Stroke oldStroke=g2d.getStroke();\n  g2d.setStroke(ARROW_STROKE);\n  g2d.drawLine(startX,startY,endX,endY);\n  g2d.setStroke(oldStroke);\n  drawAttackSprite(g2d,rangedSprites,entity.getDirection(),x,y,width,height);\n  frame++;\n}\n", "protected int evaluateSpacing(float up,float down,float left,float right){\n  int ret=SHOW_TENS;\n  if (!showOneAndFiveLines && !showBelowOneLines) {\n    return ret;\n  }\n  float nsdiff=up - down;\n  float ewdiff;\n  if ((left > 0 && right < 0) || (left > right) || (Math.abs(left - right) < 1)) {\n    ewdiff=(180.0f - left) + (right + 180.0f);\n  }\n else {\n    ewdiff=right - left;\n  }\n  float diff=(nsdiff < ewdiff) ? nsdiff : ewdiff;\n  if ((diff / 10) <= (float)threshold)   ret=SHOW_FIVES;\n  if ((diff / 5) <= (float)threshold)   ret=SHOW_ONES;\n  return ret;\n}\n", "    private boolean torrentExists(String id) {\n        File torrentXML = new File((String) Constants.get(\"torrentXML\"));\n        if (torrentXML.exists() || torrentXML.length() > 0) {\n            try {\n                SAXBuilder sb = new SAXBuilder();\n                Document d = sb.build(torrentXML);\n                Element root = d.getRootElement();\n                if (root != null) {\n                    if (!this.isNewTorrent(root, id)) {\n                        return true;\n                    }\n                }\n            } catch (Exception fnfe) {\n\n            }\n        }\n        return false;\n    }\n", "public MessageVersion(String version){\n  this.version=version;\n  try {\n    getVersionParts();\n  }\n catch (  NumberFormatException e) {\n    throw new IllegalArgumentException(String.format(\"Invalid version string : %s.\",version),e);\n  }\n}\n", "\tpublic void printWarranty() {\n\t\ttry {\n\t\t\tProperties cadiInfo = new Properties();\n\t\t\tInputStream cadiInfoURL = getClass().getClassLoader().getResourceAsStream(\"CADI/Common/Info/cadiInfo.properties\");\n\t\t\tcadiInfo.load(cadiInfoURL);\n\n\t\t\tSystem.out.println(\"CADIClient version \" + cadiInfo.getProperty(\"version\")+\"\\n\");\n\t\t\tSystem.out.println(cadiInfo.getProperty(\"disclaimerOfWarranty\"));\n\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"PARAMETERS ERROR: error reading the disclaimer of warranty\");\n\t\t\tSystem.out.println(\"Please report this error to: gici-dev@deic.uab.es\");\n\t\t}\n\t}\n", "public RemoveHistoryItemAction ( ) { super ( WorkbenchMessages . FilteredItemsSelectionDialog_removeItemsFromHistoryAction ) ; }", "public XPath(String exprString,SourceLocator locator,PrefixResolver prefixResolver,int type) throws javax.xml.transform.TransformerException {\n  this(exprString,locator,prefixResolver,type,null);\n}\n", "\tpublic LineCount add(LineCount lineCount) {\n\t\tthis.deletedLines += lineCount.getDeletedLines();\n\t\tthis.newLines += lineCount.getNewLines();\n\t\treturn this;\n\t}\n", "protected void writeStaticResourceResponse(\n        HttpServletRequest request,\n        HttpServletResponse response,\n        URL resourceUrl)\n    throws IOException {\n\n        URLConnection connection = null;\n        InputStream is = null;\n        String urlStr = resourceUrl.toExternalForm();\n        try {\n            if (allowServePrecompressedResource(request, urlStr)) {\n                // try to serve a precompressed version if available\n                try {\n                    connection = new URL(urlStr + \".gz\").openConnection();\n                    is = connection.getInputStream();\n                    // set gzip headers\n                    response.setHeader(\"Content-Encoding\", \"gzip\");\n                } catch (Exception e) {\n                    LOG.debug(\"Unexpected exception looking for gzipped version of resource \" + urlStr, e);\n                }\n            }\n            if (is == null) {\n                // precompressed resource not available, get non compressed\n                connection = resourceUrl.openConnection();\n                try {\n                    is = connection.getInputStream();\n                } catch (FileNotFoundException e) {\n                    LOG.debug(e.getMessage(), e);\n                    response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n                    return;\n                }\n            }\n\n            try {\n                @SuppressWarnings(\"null\")\n                int length = connection.getContentLength();\n                if (length >= 0) {\n                    response.setContentLength(length);\n                }\n            } catch (Throwable e) {\n                LOG.debug(e.getMessage(), e);\n                // This can be ignored, content length header is not required.\n                // Need to close the input stream because of\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4257700 to\n                // prevent it from hanging, but that is done below.\n            }\n\n            streamContent(response, is);\n        } finally {\n            if (is != null) {\n                is.close();\n            }\n        }\n    }", "    public int compareTo(final Individual ind){\n        int comp = 0;\n        if (this.fitness()!=ind.fitness()){\n            return (int)(this.fitness()-ind.fitness());\n        } else {\n            for (int i = 0; i < arraySize; i++){\n                if (gt[i].getGene() != ind.getGenes()[i].getGene()){\n                    comp = gt[i].getGene() - ind.getGenes()[i].getGene();\n                    break;\n                }\n            }\n            return comp;\n        }\n    }\n", "    protected void registerListener(SimpleSelectable selectable) {\n        synchronized(myListeners) {\n            myListeners.put(selectable, null);\n        }\n    }\n", "@SuppressWarnings(\"unchecked\")\n    public static <T> T newInstance(Class<T> c) {\n        return (T) InvokerHelper.invokeConstructorOf(c, null);\n    }", "public CipherTextIvMac(byte[] c,byte[] i,byte[] h){\n  cipherText=new byte[c.length];\n  System.arraycopy(c,0,cipherText,0,c.length);\n  iv=new byte[i.length];\n  System.arraycopy(i,0,iv,0,i.length);\n  mac=new byte[h.length];\n  System.arraycopy(h,0,mac,0,h.length);\n}\n", "public LeaseException ( ) { super ( ) ; }", "public boolean hasStaticFieldRead(String owner,String methodName,String targetClass,String targetField){\n  StaticFieldReadEntry read=new StaticFieldReadEntry(owner,methodName,targetClass,targetField);\n  return staticFieldReads.contains(read);\n}\n", "public INDArray asMatrix(InputStream inputStream) throws IOException {\n  if (channels == 3)   return toBgr(inputStream);\n  try {\n    BufferedImage image=ImageIO.read(inputStream);\n    return asMatrix(image);\n  }\n catch (  IOException e) {\n    throw new IOException(\"Unable to load image\",e);\n  }\n}\n", "    public void clearContext(int contextId) {\n        if (contextId == Expression.IGNORE_CONTEXT) {\n            context = null;\n            return;\n        }\n        ContextItem newContext = null;\n        ContextItem last = null;\n        ContextItem next = context;\n        while (next != null) {\n            if (next.getContextId() != contextId) {\n                if (newContext == null) {\n                    newContext = next;\n                } else {\n                    last.setNextContextItem(next);\n                }\n                last = next;\n                last.setNextContextItem(null);\n            }\n            next = next.getNextDirect();\n        }\n        this.context = newContext;\n    }\n", "public Class load(String type) throws Exception {\n  ClassLoader loader=getClassLoader();\n  if (loader == null) {\n    loader=getCallerClassLoader();\n  }\n  return loader.loadClass(type);\n}\n", "static BufferedImage gaussianBlur(BufferedImage src,BufferedImage dst,int radius){\n  int width=src.getWidth();\n  int height=src.getHeight();\n  if (dst == null || dst.getWidth() != width || dst.getHeight() != height || src.getType() != dst.getType()) {\n    dst=createColorModelCompatibleImage(src);\n  }\n  float[] kernel=createGaussianKernel(radius);\n  if (src.getType() == BufferedImage.TYPE_INT_ARGB) {\n    int[] srcPixels=new int[width * height];\n    int[] dstPixels=new int[width * height];\n    getPixels(src,0,0,width,height,srcPixels);\n    blur(srcPixels,dstPixels,width,height,kernel,radius);\n    blur(dstPixels,srcPixels,height,width,kernel,radius);\n    setPixels(dst,0,0,width,height,srcPixels);\n  }\n else   if (src.getType() == BufferedImage.TYPE_BYTE_GRAY) {\n    byte[] srcPixels=new byte[width * height];\n    byte[] dstPixels=new byte[width * height];\n    getPixels(src,0,0,width,height,srcPixels);\n    blur(srcPixels,dstPixels,width,height,kernel,radius);\n    blur(dstPixels,srcPixels,height,width,kernel,radius);\n    setPixels(dst,0,0,width,height,srcPixels);\n  }\n else {\n    throw new IllegalArgumentException(\"EffectUtils.gaussianBlur() src image is not a supported type, type=[\" + src.getType() + \"]\");\n  }\n  return dst;\n}\n", "\tprotected boolean inClassLoader() {\n\t\treturn classLoaderDepth() != -1;\n\t}\n", "public void setC0g(float c0g) {\n\t\tthis.c0g = c0g;\n\t}", "public boolean isOmitEmptyAttributes ( ) { return omitEmptyAttributes ; }", "private void handleAuxClassPathFromFile(String filePath) throws IOException {\n  BufferedReader in=new BufferedReader(UTF8.fileReader(filePath));\n  try {\n    while (true) {\n      String s=in.readLine();\n      if (s == null) {\n        break;\n      }\n      project.addAuxClasspathEntry(s);\n    }\n  }\n  finally {\n    Util.closeSilently(in);\n  }\n}\n", "  public List getPropertyDescriptors(Object object) {\n    if (itemPropertyDescriptors == null) {\n      super.getPropertyDescriptors(object);\n\n      addAggregatorPropertyDescriptor(object);\n      addColumnPropertyDescriptor(object);\n      addFormatStringPropertyDescriptor(object);\n      addNamePropertyDescriptor(object);\n    }\n    return itemPropertyDescriptors;\n  }\n", "protected final void deserialize(ObjectInputStream ois,Collection coll) throws IOException, ClassNotFoundException {\n  int count=0;\n  count=ois.readInt();\n  while (count-- > 0) {\n    coll.add(ois.readObject());\n  }\n}\n", "private Tensor getMsgs(VarTensor[] inMsgs, int tf) {\n        Algebra s = inMsgs[0].getAlgebra();\n        EdgeScores es = new EdgeScores(n, s.zero());\n        for (VarTensor inMsg : inMsgs) {\n            LinkVar link = (LinkVar) inMsg.getVars().get(0);            \n            double val = inMsg.getValue(tf);\n            es.setScore(link.getParent(), link.getChild(), val);\n        }\n        return es.toTensor(s);\n    }", "public static synchronized PeriodType forFields(DurationFieldType[] types){\n  if (types == null || types.length == 0) {\n    throw new IllegalArgumentException(\"Types array must not be null or empty\");\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null\");\n    }\n  }\n  Map<PeriodType,Object> cache=cTypes;\n  if (cache.isEmpty()) {\n    cache.put(standard(),standard());\n    cache.put(yearMonthDayTime(),yearMonthDayTime());\n    cache.put(yearMonthDay(),yearMonthDay());\n    cache.put(yearWeekDayTime(),yearWeekDayTime());\n    cache.put(yearWeekDay(),yearWeekDay());\n    cache.put(yearDayTime(),yearDayTime());\n    cache.put(yearDay(),yearDay());\n    cache.put(dayTime(),dayTime());\n    cache.put(time(),time());\n    cache.put(years(),years());\n    cache.put(months(),months());\n    cache.put(weeks(),weeks());\n    cache.put(days(),days());\n    cache.put(hours(),hours());\n    cache.put(minutes(),minutes());\n    cache.put(seconds(),seconds());\n    cache.put(millis(),millis());\n  }\n  PeriodType inPartType=new PeriodType(null,types,null);\n  Object cached=cache.get(inPartType);\n  if (cached instanceof PeriodType) {\n    return (PeriodType)cached;\n  }\n  if (cached != null) {\n    throw new IllegalArgumentException(\"PeriodType does not support fields: \" + cached);\n  }\n  PeriodType type=standard();\n  List<DurationFieldType> list=new ArrayList<DurationFieldType>(Arrays.asList(types));\n  if (list.remove(DurationFieldType.years()) == false) {\n    type=type.withYearsRemoved();\n  }\n  if (list.remove(DurationFieldType.months()) == false) {\n    type=type.withMonthsRemoved();\n  }\n  if (list.remove(DurationFieldType.weeks()) == false) {\n    type=type.withWeeksRemoved();\n  }\n  if (list.remove(DurationFieldType.days()) == false) {\n    type=type.withDaysRemoved();\n  }\n  if (list.remove(DurationFieldType.hours()) == false) {\n    type=type.withHoursRemoved();\n  }\n  if (list.remove(DurationFieldType.minutes()) == false) {\n    type=type.withMinutesRemoved();\n  }\n  if (list.remove(DurationFieldType.seconds()) == false) {\n    type=type.withSecondsRemoved();\n  }\n  if (list.remove(DurationFieldType.millis()) == false) {\n    type=type.withMillisRemoved();\n  }\n  if (list.size() > 0) {\n    cache.put(inPartType,list);\n    throw new IllegalArgumentException(\"PeriodType does not support fields: \" + list);\n  }\n  PeriodType checkPartType=new PeriodType(null,type.iTypes,null);\n  PeriodType checkedType=(PeriodType)cache.get(checkPartType);\n  if (checkedType != null) {\n    cache.put(checkPartType,checkedType);\n    return checkedType;\n  }\n  cache.put(checkPartType,type);\n  return type;\n}\n", "void doubleClicked ( ) ;", "public StringItem getNomeMateriaCNF () {\nif (nomeMateriaCNF == null) {//GEN-END:|285-getter|0|285-preInit\n            // write pre-init user code here\nnomeMateriaCNF = new StringItem (\"Mat\\u00E9ria:\", \"Materia Tal\");//GEN-LINE:|285-getter|1|285-postInit\n            // write post-init user code here\n}//GEN-BEGIN:|285-getter|2|\nreturn nomeMateriaCNF;\n}\n"], "comment": ["return a boolean indicating whether the network is built", "invoked after the group node comments have been initialized .", "path to plugin dir which contains plugins that needs to be installed", "create a sequential synchronous stream that runs on the current thread", "notify the listeners when a selection event has occured", "binds this socket to the specified port number on the specified host .", "finds a file by name in classpath", "computes the membership function value of ` x ` at the root node .", "create a multisplitlayout with the specified model .", "stops the jumping animation and frees up the animations .", "adjusts the primitive value mapped to key .", "creates an instance resource in the specified project using the data included in the request .", "returns a collection view of the mappings contained in this map .", "a hook to allow nodes to be processed once they have had all of their children applied .", "processes graphical indicator definitions for each column .", "route only trace log records . messages including systemout , err will not be routed to trace source to avoid duplicate entries", "sets the value of the wsp9x9low property", "creates a clone of this h263format", "checks whether at least one method in the given class is registered in the taint wrapper", "puts the message body in read only mode and repositions the stream of bytes to the beginning .", "creates a new table having the specified name and schema .", "close a statement without throwing an exception .", "returns a copy of the effect .", "sets the securityrole attribute of the securityrolepanel object", "returns the byte array form of this attribute .", "creates a new type path .", "tests the three implemented interpolation methods bilinear interpolation , bicubic spline interpolation and inverse distance weighting at different test scenarios and compares the needed calculation times .", "add a message to the set of messages for the specified property", "generates the instruction to load this on the stack .", "builds individual nodes from the given dataset .", "process notification of a published message having been delivered", "parses an int option , uses default if option is missing .", "checks if any file needs to be extracted again , and if so , clears the destination directory and unpacks everything again .", "matches the strings in the trie against a specified text .", "fills the grid ratios", "updates the modification date column of a row identified by an id in a given table .", "create watch with predicate and task count .", "determines whether the queue contains an install / register request .", "get a string from the underlying resource bundle or return null if the", "creates a epoch associated with this consensus , supposedly the next", "checks the given packages for classes that inherited from the given class , in case it ' s a class , or implement this class , in case it ' s an interface .", "returns true if the access parameters user name and password should be used", "clears the history for the specified buddy", "write a byte array to the hex file , prepending \" : \" and appending checksum and carriage return", "the doget method of the servlet .", "build all the election groups in fail - over group .", "expand the array part", "determines the message to be used , depending on the passed argument name .", "write data in bulk from a byte array and increment the current position", "call interceptors to component", "provides a channel to an observable that can be created with a given observable factory .", "calculates the linearly - interpolated witten - bell probability for a given ngram .", "factory method to allow alternate methods of creating and configuring", "creates a new save text field object .", "load all resources with a given name , potentially aggregating all results from the searched classloaders .", "print out a short summary string for the dataset characteristics", "handles the change to the model described with the given notification message", "bridge methods to proxy modified method in vanilla nothing in forge", "unhides the named section comprising the associated bean in due course", "marshall the given parameter object .", "returns the value of an attribute of an element", "set the value related to the column speedmax", "determine if an implication definite clause .", "sends a detach message to the debug client .", "paints this single note on the screen", "find all implementations of a particular interface .", "perform a compare and set operation on the sequence .", "getter for projective - gets the dependency relations can be projective or not , c", "align set of nodes with the right most node in the list", "adds a named color to the map", "returns whether there is a previous element .", "setincludebinary", "parsing label declaration label", "constructs a new daccessdescriptionchooser dialog .", "add a collection of tokens to the list , applying tostring to each .", "get an extent aware rsiterator based on the query", "returns an indication is this space secured .", "called to save position when an event is detected in single frame", "determines whether the user can access the resource .", "applies hilbert transform to the real sample buffer and returns a complex sample buffer", "return whether or not a store of given local was killed by a subsequent dominated store .", "performs binary operation", "assert that a submit button with a given name is present", "invoke when state change", "removes special characters that may be attached to tokens like parantheses , braces , punctuation etc .", "signal that the task should end .", "returns the logarithm of a for base 2 .", "method to decode lzw compressed data .", "encloses each of a list of strings in quotes .", "typetoreturn 0 = string , 1 = double , - 1 = guess", "maps the given resultset column label to its", "factory method to create serviceinfo instances that contain a single locatable service .", "determine whether write caching should be used for a particular file / context .", "return the credentials for the realmpath that most closely matches the given url or null if none found", "shows a new dialog with a message for each different tag .", "creates and starts a tailer for the given file with default buffer size .", "mostly used for debugging testing purposes", "extends the existing groundings with the alternative groundings", "get all build infos of a project in database", "calculates a hash for the word : ( size * 8192 ) + ascii code sum .", "returns the long value of the address in python scripts .", "creates a new state object when the bend enters hover state .", "run until there are no more events .", "this method is invoked whenever a change occurs to burp s suite wide target scope .", "a list of ip addresses that you want to retrieve blacklist information about .", "removes an object from the repository", "handling message which sent from wechat p this message will be sent from wechat by chlicking this app type message in the chatting list", "will be called when your crouton has been displayed .", "indicates if audio associated with this metadata is recordable .", "deletes a single synchronized document by its given id .", "set the genre field of the tag", "remove an event from state .", "start a post request to the given url along with the query params", "relative copy of data into this buffer", "creates a stream from the given input sequence around matches of the given character .", "returns the result of this filter when applied to the given element .", "modify properties of environment setting .", "close the output collector", "collapses the parent with the specified index in the list of parents .", "this initializes whatever structures need to be reinitialized after there is some change in the tree", "returns true if node key is less than upper bound of range .", "adds a keyword and its related value .", "returns true if this is a syntactically valid event id .", "returns the calendar interval type value for rowid .", "tests if obj is a string or a char", "sort table by column and direction", "adds a new search path to scan for javascript components", "creates a new action object .", "closes connection with server", "resolves a location provided as a series of political divisions from narrowest to broadest .", "returns true if the input file is the stdin / stdout indicator", "initializes this analyzer .", "finds the position of a substring within a string , ignoring case , with the option to skip text delimited by given markers or within comments .", "shows error output for the object", "delete all objects matching a query", "region entry point", "determines whether or not the specified message is valid for setting", "schedules the connection to close after an idle timeout", "returns the later of two nullable dates .", "reads the file into a list of strings with one item for each line .", "create the application with the given name in the default tenant .", "checks that the given substring is a valid internal class name .", "clamp a value to be within the provided range .", "recenters the projection at the given location", "and syncs with ( table / column ) * ( name / alias ) .", "get the value for hastext of the lom", "update all running channels using the input channel data .", "get the data model for this dock", "tries to open the log .", "builds an atom object using the current environment", "create or update an account property", "creates a new reilinstruction object .", "the distance from this vector3f object to the origing squared", "selects all nodes of a graph tagged with the given tag .", "add a new allowed role", "sends an event to the bus p", "called if a file rotation is detected .", "called when a new debug event was received .", "release 3 primary mouse masks : 1 , 2 , and 3", "given multiple time samples of a homogeneous array of variables states add the observations of all sets of numvars of these do this for every time point", "constructs a scrollable iterator over the given entity name .", "checks if this filter includes relations defined in the content .", "parses a pipeline script file .", "gets all the connections in a virtual network gateway .", "removes highlighting from the node that was exited .", "set the value related to the column themename", "closes a jar file and set its urlconnection to null .", "read a file into a featurelist .", "comment for method", "create a parser from an input stream", "returns a wrapper for the striped # bulkget ( ) call ( via keyspace # counterlocksfor ( ) )", "does the actual work of rebuilding the draft cache .", "returns the module type", "this will return a string describing the class", "this method returns object local to target device", "this method is called to determine if the dragsource has something to drag .", "convert int array to integer array", "addattributevalue sets a single value for the supplied attribute", "if the start end trim are offset to begin with store them so that animation starts from that offset .", "decrement a long property with the given delta .", "print the matrix report to given file .", "gets the minimum size", "build the date defined by this builder instance .", "validates supplied sortabletable to paginator", "notifies the manager of a lease being renewed .", "creates a union wrapping a value of the first type", "closes the source file", "sort method using provided sort function .", "stops the echo service , taking it offline and out - of - service .", "query if a plugin is unstable .", "map an bit value to another bit value", "generates a serial number for identifying a dls .", "starts a tag", "creates a new panel object .", "stops monitoring the specified connection", "closes the current zipentry and positions the stream for writing the next entry .", "constructs a new imageloader .", "converts the text stream data to html form .", "gets the view scale arrows flag", "copy all files from the previous release folder to the new release folder .", "finds the first component by the given id expression or client id .", "returns the next token from this string tokenizer .", "searches for a schemafactory for a given schema language in a meta - inf / services file .", "get a list of atoms for a group .", "set up a random number generator for the sessionids .", "constructs a marker segment from a string .", "types the keys .", "add experimental global flags to given flags instance", "returns true if the encoding name is a valid iana encoding .", "set the request log .", "adds a collector to this instrumented algorithm .", "copy nodelist members into this nodelist , adding in document order .", "computes dense optical flow from the provided image pyramid .", "return the minimum value of the given double array .", "return workflow by name and version", "set the value of nochannels", "writes the exception data to the faultdetails", "change the reducing end marker for all the specified structures", "searches an element by its data value", "find the _ fields constant that matches fieldid , or null if its not found .", "asserts that no exception is raised", "adds the relations .", "callback method called when the form mode is changed", "constructs a comma separated list of column names if checkcolumnnames and their corresponding types java . sql . types if checkcolumntypes .", "that is , of size 6 , which become 8 , since hashmaps are powers of 2 .", "set global contextfactory .", "returns true if the first version number is greater than the second", "ensure that any constant indexes in the operation list are valid terms .", "use this api to add nat64 .", "print a testdataobject with the specified attributes", "removes all non - digit characters from a string .", "merges multiple sections to reduce visual raggedness .", "returns true if the headers transition is currently running .", "marshall the given parameter object .", "updates the trust that has been set up between your aws managed microsoft ad directory and an on - premises active", "update tab title to each tab page", "this method closes the streams", "creates a new enum set , containing only the specified elements .", "get the html representation of these attributes .", "for python compatibility", "input from xml file", "compute the absolute cosine of the angle between two vectors .", "displays a dialog that allows the user to edit the properties for the current chart .", "creates an isgreaterthanorequal expression from the given expressions .", "set items deleted each round in deleteobjects , if more than $ size object left , deleteobjects will delete them in several rounds internally .", "substitutes a free type variable with an actual type .", "this component does not support children", "removes the resolution given by the name", "make sure the given location is an url .", "implements the visitor to clear the opcode stack for the next code", "adds a new non standard attribute or replaces an old one with the same name", "the last direction the encoder value changed", "removes a listener for opc to database status", "tells you if the object is indirect", "provides a mapping from the view coordinate space to the logical coordinate space of the model .", "look at the options in the symbolizer for group", "this needs to be called before anything else because we need the media factory .", "project a vector from rendering space to data space .", "an authority with the specified privilege .", "tests another object for equality with this object .", "returns the amount of space the layout would like to have .", "runs after a command is received containing alertmanager jsp", "check the given float value for the specified condition", "returns true if field messagetype is set ( has been assigned a value ) and false otherwise", "creates a split element with a word and a linking morpheme .", "connect rtmp client to server ' s application via given port", "take a bite out of the bitmap by painting over it with a teeth shaped mark , nom !", "assigns any existing properties to the node . br it will call attributedelegates before passing control to the factory that built the node .", "used for eclipse instances running inside debugger .", "create a new instance", "removes the columns user _ info , user _ address , user _ description and user _ type from the cms _ users table .", "sets the data provider", "returns the type of the elements of map ( an object with additionalproperties of type specified ) schema .", "creates new synchttpclient using given params", "called every tick the machine runs", "reads the next line from the reader .", "get a list of columns with defined index", "changes the comment text of a global comment currently associated to this edge .", "processes the given string and returns a string which is allowed for region names", "verifies that the deserialized field values for this error descriptor are valid .", "convenience wrapper for nfs rpc calls where the ip is determined by a byte [ ] key .", "called when this board is moving in x direction .", "gets the valueat a given row column of the usertablemodel", "transform a double values rendered image in its integer array representation by scaling the values .", "create a block at the given x and y coordinates on the grid", "recycles the http method so that it can be used again .", "converts colorstring into a color which is available in the colormap or if not tries to decode the colorstring", "implements the visitor to reset the stack", "returns true if the desired operation is encrypt", "resolves the endpoint , which is either a constant or a variable to be looked up in the binding set .", "java primitive type base class", "returns true if a trigger has misfired false otherwise .", "limits ymin and ymax values during autoscaling so that the mininimum value will be no greater than the floor and the maximum value will be no smaller than the ceil", "shorthand to set the from address element", "marshall the given parameter object .", "gets a java properties from the given s3 location , and puts the key - value pairs into the given parameters .", "sets the width of the menu", "set the associated sheet index", "adds an attachment to the emailmessage .", "convert params to multipart entity .", "remove a top menuitem by id", "check login information and set context .", "adds a form to a local cache for quick lookup .", "reconstitute the hashtable from a stream ( i . e . , deserialize it ) .", "creates a new binomial generator object .", "returns the tip text for this property", "disconnects the connection .", "creates a numbermap for instances of a concrete subclass of number .", "peek data , read without moving read pointer .", "updates the components of the dialog after the user changed the current directory .", "returns a two tailed p value given a threshold", "write annotationset item into current section .", "returns a canonical instance composed of the given orderings .", "unquantizes a quantized count .", "adds bondset to set", "check if a given network interface is interesting for us .", "creates new instance of customizerui .", "notify the service of connection to a server ( updates the status bar notification )", "clears the archive directory .", "triggers ipleasedeleteservice for one dhcp subnet list .", "gets the created date as a string", "describe writeschema method here", "registers a required flag .", "write into xml file", "constructs an exception indicating the specified file could not be validated .", "initialization of the servlet .", "called to notify container that an event occurred .", "create a packet instance of the given type", "determines if the exception received when downloading the certificate is retryable or not .", "returns a diagnostic describing the errors and warnings listed in the resource and the specified exception if any", "visits an enumeration value of the annotation .", "returns the network parameters for the given string paymentprotocolid or null if not recognized .", "closes our ( possibly opened ) jar file .", "start this lcp .", "a method for making transformations to the jsonapidocument .", "determines if the encoding specified was recognized by the serializer or not .", "returns r 2 estimate for a given pair of sites", "validates a duplex group password .", "reconstitutes contained permissions based on the information in the target name .", "unused and replaced with resources dir .", "normalize by zero mean unit variance", "inform that from now on all caching is done synchronously .", "create a build run with the given name and date in this build project .", "get the first common superclass of arrays with different numbers of dimensions .", "clear devices of user", "returns the string value for the given object", "we are overriding this method to paint a focus rectangle around the control .", "processes a formula node .", "translucent overlay panel for displaying channel configurations , processing channels , selected channels , frequency labels and lines , and a cursor with a frequency readout .", "generate a salt for use with the bcrypt . hashpw ( ) method", "draws the legend", "return the next task in the queue .", "instantiates a new database down exception .", "adds a parameterization to the end of the list .", "sets a arc object using x and y - coordinate of the arc , width , height , start and end points of degree properties .", "get a child resource as identified by path", "get the url of the login page with redirect afterwards", "creates a new action object .", "returns all items of the current page", "create a new sea glass look and feel instance .", "fills the grid based on positioning the new selection at a specific location .", "given one or two nodes , see if the two can be combined .", "test whether two bitsets intersect .", "get a global variable or parameter from the global stack frame .", "creates a new action object .", "stops the proxy server .", "copied fom commons stringutils", "method called when this provider needs to update an existing index given the unique pair of workspace name and index definition .", "start execution of the parser", "makes the entire map visible for all players", "the connect timeout in milliseconds .", "switch to specific tax rate", "decodes the provided pkcs # 7 signeddata into a", "decrement the reference count .", "updates the menu actions depending on the state of the given module .", "convert to rest json for persisting in lds .", "common processing for many notifications", "returns true if the observed object appeard extended during observation", "return the first optional to be defined .", "verifies the syntax of the target name and recreates any transient state .", "returns true if a new model / lexicon has been generated since the last loading", "checks the given label can be added / removed to / from a vertex .", "get proper string for an object including arrays .", "form suppliers and pricelists hierarchy", "create an empty hotwashpanel that creates its own empty propertyhandler .", "deletes the specified urlmap resource .", "add a conversation to the adapter .", "this method determines whether an instance of this behavior description can be used to initiate a choreography behavior", "adds a hotkey to a button .", "constructs a message with pluralization logic by the means of", "adds the options from an array of variables to a node ( level or topic ) .", "returns the number of accumulated counts", "shows user home comments page .", "invoked after the module was closed .", "determines whether to accept a file", "hides the card , returns false if the card could not be hidden .", "generate a signer for the with either implicit or explicit trailers for iso9796 - 2 .", "decode a token previously created .", "set header name to given value", "setter for value , updates the size of this tag", "remove row based on link to an object", "add a button to the display", "installs the ui defaults .", "determine if the supplied value is one of the predefined options .", "update job status and notify the waiting thread .", "parses a java stack trace , converting files and line numbers when possible .", "output an appropriate error when a bcel class looks wrong .", "returns true if metric units .", "addes a build city to datamodel", "sets the location of this point3d to the specified int coordinates", "initializes a list block by separating it into list item blocks .", "prepare the next table for extraction by resetting the position and parsing column definitions", "start the server", "creates or updates a route in the specified route filter .", "build without applying external configuration .", "writes a complete method call .", "optimised byte [ ] to number parser .", "returns a binary representation of this attribute .", "insert paragraph in given index .", "action associated with closing the window", "report a two arguments error .", "sends the specified response message through the specified access point .", "notifies listeners that the criterium changed .", "notifies the calling service after the entry is written to the mmap .", "displays this node as a string implementing explorenode interface depth parameter is a bound on the depth of the portion of the tree that is displayed .", "after processing all the pdf documents , this method helps us to get the statistic information of all the pdf documents such as the total number of pages , tables , etc .", "gets the raw gmt offset and the amount of daylight saving of this time zone at the given time .", "calculate the value at a particular point .", "get an optional double associated with a key or the defaultvalue if there is no such key or if its value is not a number", "adds all values , which are contained by a specific collection , to the preference .", "stores information about types when objectofinstanceof instanceof typeexpression is visited", "set the visibility of a specific layer", "stops this writer and close its output stream .", "signal that the observations are now all added pdfs can now be constructed .", "computes the pearson distances", "certain logging behaviors are available for debugging beyond those that should be enabled in production .", "draw shadow background over the image not including the crop area .", "set the contents of the format field in the message header .", "logs the occurance of an exception while retrieving the input file .", "render a texture to the given position .", "calculates the sum of number for rowsum of lessthan and greaterthanequal , and colsum of greaterthan and lessthanequal operators .", "update peer game object type data .", "returns a sequence of events where some items are more popular than others , according to a zipfian distribution .", "return true if there is a transaction token stored in the users current session and the value submitted as a request parameter with this action matches it", "returns a connected jmxconnector .", "removes the character at the specified position in this stringbuffer ( shortening the stringbuffer by one character ) .", "add an amount to the existing collected amount , with zero tolerance i . e . balance cannot be exceeded .", "report version info from dom interfaces .", "adds or updates certificate to an existing user if the . getvalue ( ) already exists a update will be done .", "sets system menu used for the connected frame", "this adds a property descriptor for the label feature", "loads datasource settings from xml dom", "updates the member type .", "start with a locomotive selected , so we ' re opening an existing rosterentry .", "returns the number of cells having non zero values ignores tolerance", "provides a mapping from the view coordinate space to the logical coordinate space of the model .", "method to enable disable the full zoom options", "consumes and returns all child elements selected by the interpreter .", "removes all tuner configurations and assignments from the model and fires a table clear event and broadcasts a tuner configuration event for each row removed .", "filters a list of method for mop methods .", "deletes static groups in this group .", "returns the next node in the traversal .", "creates a notification with a given name and user info and posts it to the receiver .", "removes non config parameters from list of endpoint parameters according to given endpoint configuration type .", "initialises the relevant processor", "find the first qualifier of the given field", "asks the debug client to resume a thread .", "makes sure the context is properly initialized .", "returns the name of the affected table .", "sets the default values of the preferences", "issue a compilation error .", "creates an sslsocketfactory for https .", "add image in the document .", "update the tab of the temporary data", "processes the given byte .", "creates all gondola instances in shard .", "change the attributes of the oriented box .", "constructs a new sum distributed task that delegates the actual execution to th provided task .", "update all report parents colors and files", "returns the servicecallresultfield property", "remove all method call cache entries .", "this returns the property descriptors for the adapted class", "remove redundant slashes from the rest of the path , forcing all slashes into the preferred slash .", "sets the language", "stops all request timers and removes all the requests from the repository and the proxy", "find a particular element with given text", "places all modules in the moduleslong list", "fire entity added event", "note that also the stringliterals are treated as the interpolated values ( both are expressions ) .", "returns true if the relation holds .", "these 2 methods not guaranteed to be fast .", "construct a new stream object when all that s known is the name .", "stop the progress meter .", "returns whether or not the uis should update their styles when a particular event occurs", "set this as the current launcher activity object for the loader .", "close the output stream and mark for garbage collection", "decode the base encoded data in input and return the data in a new byte array .", "define a sub - task with a reference to its parent .", "gets the most recent health check results for each ip for the instance that is referenced by the given target pool .", "gets an indicator that the parameters value has been set", "return a previously allocated value .", "creates and starts a new access point based on the specified socket .", "returns the left coordinate at which rendering starts", "creates a new modifiers instance which excludes the specified modifiers from this instance .", "returns a integer html field", "set the unselected color for the time line node", "create an input", "returns the orientation of the device .", "add a dependency to this node .", "this is the filtering method .", "restarts all containers in a container group .", "creates a new section instance and stores it in the database .", "reads the classpath uris in the pluginfilelist and returns all plugin classes defined by these uris", "returns true so that clients can confirm connection liveness .", "executes the specified event as part of this transaction .", "spread the trailing [ ] argument into its component type assigning given names .", "moves every element of the list to a random new position in the list using the specified random number generator .", "returns an enumeration describing the available options .", "compress an object", "writes copy of source bytes to output stream .", "load a media resource from url to vod .", "bind to a new object no index", "close the database connection .", "the equals method", "creates a new dissueralternativename dialog .", "creates a new remote file browser .", "currently not implemented .", "run the given operation if feature is set , or another operation if it is not .", "returns a escaped url with an word for translation", "get the length , in bytes , of this instruction , including the opcode and all its operands .", "convert the classes in the given rootdoc to an html .", "get a new dom document object from parsing the specified inputstream .", "check the view is horizontal scrollable", "ranks a map based on integer values", "returns a vector representing the types of the parameters", "free up any resources used immediately", "should be invoked on element _ start event", "instantiates a new tiled grayscale matrix .", "implements icon interface .", "removes the listener .", "notifies the registered listeners of configuration changes on any identity provider configuration .", "returns a volttable . columninfo of appropriate type , based on a typename and colname ( both strings ) .", "find the groups associated with this member key .", "returns true if a stub class for the given impl class can be loaded , otherwise returns false .", "modify the number of successes", "get a date header from the response falling back to returning the given default value if the header is missing or parsing fails", "loader must be non - null ;", "remove the a trading orderbook callback", "marshall the given parameter object .", "popular sites uses the # ! to indicate the importance of the following chars .", "sets the uuid of the popup that should be used as a tooltip window when the mouse hovers over the element for a moment", "loads a cluster configuration from a file located on the classpath and applies the properties found to the current instance .", "load excludes from file .", "get an iterator over incoming edges to a given vertex .", "resort the neurons according to their update priorities .", "get the color code for the given hue , saturation , and brightness values , translating from hsb color space to rgb color space .", "called when the parser finds a subtag", "the configuration object for the specified cluster .", "translates the origin of the graphics context to the point x y in the current coordinate system", "cast an ibinder object into an org . opencv . engine . opencvengineinterface interface generating a proxy if needed .", "java . lang . boolean inbounds ( java . lang . int , java . lang . int ) checks if the given x / y coordinate point is inbounds or not", "checks if a warning category is enabled .", "this adds a property descriptor for the sees feature", "checks if is static .", "gets the fields which should be displayed for a single resource .", "updates the last pvp action time with the current time", "puts the discoverer into an operational state .", "load workflw and initialize the session attributes .", "get top http referer statistics with specified attributes .", "try and resolve the resource name in the local resource file and if not found fall back to the superclass resource file", "post status by multicast", "sets the current drawing edit mode", "encrypts the message blocks using des cbc and output the final block of 8 - byte ciphertext .", "closes this input stream and releases any system resources associated with the stream .", "dispatch the specified response .", "parse a patchset . id out of a string representation .", "we update only visible samples", "construct a new , un - started container .", "removes all elements from the stack", "perform matching on the provided collection or collection items nested properties .", "get the single object instance .", "creates a new instance .", "writes a list of messages to a switch", "creates or updates a virtual network in the specified resource group .", "check if a catalog version string is valid .", "causes a response to be sent to the client", "add an instance of the entryclass and add the class to entryclasses if this is the first such instance .", "this method will reload all the tabs in the user interface", "invoked after a tag was deleted from the tag manager .", "adds ensemble weights to the measurements .", "the non - caching implementation of the literal profile computation .", "write the object content", "combines two maps with the given operator into a new hash .", "calculates the cost hamming distance of using the argument as the state dibit for the current node and recursively finding the cheapest corresponding input dibit .", "entry point for the application", "allows interation over all of the names of properties held by this class", "append the text decoration css property", "creates a greater - equal parameter constraint .", "gets details about the specified git repository .", "[ , + / - , ror # ] ! 0b11 / ror or rrx / if shift _ imm = = 0 then / rrx / index = ( c flag logical _ shift _ left 31 ) or ( rm logical _ shift _ right 1 ) else / ror / index = rm rotate _ right shift _ imm if u = = 1 then address = rn + index else / u = = 0 / address = rn - index if conditionpassed ( cond ) then rn = address", "adds an element to the node .", "method for beancontextmembership interface", "checks if the given ruleset is immutable", "choose a random subspace .", "get a bitmap by a given url", "write endpoint to output stream in older format used by unicastref for jdk1 . 1 compatibility .", "makes the leave", "plot an axis with appropriate scales", "this method calculates a lighter color provided a factor of increase in lightness .", "gets the value of the responsible property .", "generates the project structure .", "check if the specified path matches a robots . txt pattern", "attempt a connection to multicast request client", "sets the set of exclude patterns", "creates an indentprinter backed by the supplied writer with a user supplied string to be used for indenting .", "determines the reverse property id using the reversepropertyname for the relationship being supported then calls performrequest string request context with the id .", "remove a watcher from this object", "reverse all normals on this model", "selects an event matching a predicate .", "returns the parent director", "create a new configurationparser", "return the tests included in this test suite .", "set a specified parameter", "protect against missing superclass .", "checks whether all sabotage check phase operations have already been executed", "invoked when an action occurs", "determines if the passed term is likely to be of interest in \" more queryfromdocuments \" comparisons", "return the value of a path within the configuration as an int", "draws a vertical line at the xaxis", "stop all registered container", "we spin in this spot until the player reaches the requested suspend state , either true or false .", "bean query for retrieving beans / objects of type .", "produces a ranked list of attributes .", "executes the given command string .", "method to create a statistics string for ' minor ' activities .", "returns whether the key is valid or not .", "deletes all roles of a existing user", "this method is invoked when an http request is about to be issued and when an http response has been received .", "reads a chunk header from the input stream and stores the data in the given object .", "if ctrl is depressed then we simply search for the insertion point of the specified node in the already sorted select list .", "returns true if this template represents an empty template .", "appends a new local comment to the list of local comments associated to this edge .", "checking equality of uuids is easy just compare the bit number .", "inserts a key value pair into the map", "the time will get 16 ms smaller every gameloop update", "converts a date into a formatted string .", "returns the unicode scalar value ( 32 - bit integer value ) for the character at position .", "load the visible dockables from the xml file", "invoked after a graph panel was opened .", "create a new mocktokenfilter .", "implements lexer ' s next token with extra token passing from recovery function", "returns but does not remove next event from the queue if it exists or returns null if queue is empty .", "performs the handshake processing .", "init load more data", "gets appropriate dl4j inputpreprocessor for given inputtypes .", "gets just the file name portion without directories .", "terminate reader task and free all resources .", "load the properties as variables .", "converts a list of history entities to dtos .", "convenience method to return a collection as a delimited e . g .", "perform a range count on the statement indices for a given triple ( quad ) pattern .", "construct an ndef message from one or more ndef records .", "changes the second color of this markup provider", "disables the ok button if certain constraints of the dialog have not be fulfilled .", "clears all the sbg data structures", "to avoid serialization issues", "the interception method .", "return a map that associates each value property with the set of bindings that provide it .", "converts an address to numbers of easier display", "checks for if the user attribute values exist for a given set .", "destruction of the servlet .", "logical add operation .", "this traces the rule level .", "manually starts server maintenance .", "handler for when an image failed to load .", "returns a clone of the timeline .", "shortcut for path path or leftpredicate rightpredicate .", "methode d ' ajout des proprietes a charger a la requete de recherche", "append a new segment to the compound name of the operator", "output html for button", "searches the class path for a class with the given name , returning a classfile for it .", "returns a semicolumn separated list of keys and values in the dictionary .", "check if the specified string is a mobile number", "appends a new local comment to the list of local instruction comments associated with the given instruction .", "matches tag to string ( allowing spaces inside tag to be missing in string )", "retrieves the class name from the handler", "returns if the list is empty", "calculate percents of sub items and sub items", "attempts to set the index of insertion to the given index", "gets the result of evaluating an automatic scaling formula on the pool .", "[ icu ] sets the localized plus sign string .", "return the given value as an expression .", "merges the two runs at stack indices i and i + 1 .", "creates a new action object .", "adds informatin messages", "for integer sequences we need to make sure that start and stride is profiled .", "called once a new member addition is known to the available keepers", "called when exiting a parse tree node", "add a constant integer info structure to the class file", "invoked when the server is starting .", "extends the bounding box so that it contains the specified point", "create new file .", "print a indent if beauty is set", "visits parameterized types to collect package names .", "create new canvas or reuse already created", "returns this pattern ' s match flags", "shortcut method to quickly set the transform properties on the display object .", "returns the closest row that starts at the specified y location in the passed in column", "invoked after an echo breakpoint was removed from the breakpoint manager .", "add a field to the given class .", "checks to see if any rop registers in the specified range are reserved for local variables or parameters .", "creates a new filter action object .", "see if this ap pod should be triggered", "create a new point bag ( or recycle an old one )", "searches for a search string .", "creates the cms _ history _ principals table if it does not exist yet .", "cleans the given folder from all it ' s unpty folders", "executed upon sending a packet away .", "add a new building trap or decoration .", "sets the title of the puzzle", "returns true if the rpc call is synchronous", "instantiates a new speech to text web socket listener .", "creates a new instance of the box kernel estimator for pi", "extract the template name from the template object which will be matched against the trusted template names and pattern .", "checks that user is allowed to control", "checks that the required permissions are granted before starting the authentication process , and if everything is fine , the process begins .", "clears the lastconfirm message", "checked the network connect status .", "puts a property into this result", "this just removes all whitespace .", "inserts the given symbol into the last focused field , of if there isn ' t one the expression field .", "creates new item with the given id into the container", "the logic to execute when the btnorder is clicked .", "this method is called when files have been successfully dropped .", "add the intial hard - coded connectable peer to the peer list .", "clear list of children .", "overridden to ensure that the service is always shutdown .", "sets the left margin", "creates a new api bookmark object .", "determine if this is s tostring method", "constructs a new clickable label .", "called when volumes are added to exportmasks .", "updates the particle velocity vector", "use this api to unset the properties of coparameter resource .", "gets the net frede gui icon associated to this net frede gui file", "saves the position of the current record so that it can be restored at a later time .", "sets the alias .", "checks the current level to see if it is a valid playable level", "called when an external drag event enters the browser window .", "sets the additional style to mark expired entries or those that have the hide in navigation property set .", "so subclasses have the option to do lazy initialization of documentation string", "convert durations to the given time unit .", "parses sq string content .", "iqualityclassmodelchangelistener method", "memory status dump", "find the method which has the same signature in the specified class .", "checks this pull request representation against a github version of the pull request , and triggers a build if necessary .", "null - safe version parser .", "sets a byte input port", "hides the currently visible widget and shows a new one", "overwrites the existing item by new one .", "stops step by given uuid .", "gets the logical form for this parse without applying the unary rule ( if any ) at the root .", "return the singleton constant object after the serialized instance has been read back in", "replaces the first two elements in the parameter with values that describe the current point of the path", "returns a string representation of this object .", "enable disable the version fields only modifiable with the minor check box", "iterate all descendant model groups of the given model group , including itself .", "swipes vertical on an element negative offset up positive offset down .", "invoked after the host string of a debugger template changed .", "wait for threads to finish , expecting instead to time out waiting", "checks if imageloader s configuration was initialized", "this adds a property descriptor for the namespace feature", "return true if the ast corresponds to a static select of the kind a . b", "queries if one or more write lock is held by any thread .", "return all the resources inside a plugin", "creates a new visual coverage action object .", "notifies all listeners that have registered interest for notification on this event type", "logs the time taken by this rule and adds this to the total time taken for this phase", "equals ( ) with two strings where either could be null", "paints the currently selected item .", "obtains the memory size in human readable form", "utility to reconcile a desired size and state , with constraints imposed by a measurespec .", "adds an action as a step of thid one .", "add line to source code with one indent .", "chceck in range object", "creates a java . awt . image .", "when in portable mode ( default ) this method verifies that the container has reached the specified minimal state .", "set a new value to allgadgetratingscores", "checks and normalizes the given path .", "if content - encoding is included , verify that we support it and return true .", "replaces the content between s . getstart included and s . getend excluded with a string", "overloads the left shift operator to provide an easy way to add items to a mutablecomboboxmodel .", "sets the right encoding and returns the result .", "insert the activating device", "returns whether or not an uncaught exception occurred in one of the threads in this group .", "method called to initialize this storeresource .", "sets the designated parameter to the given java short value", "destruction of the servlet .", "report all deferred diagnostics .", "checks if pair is in final form as specified in unification algo x t with x not in t", "returns true if all of stream items satisfy a given condition .", "compute a sparse float buffer", "get the ns name for a namespace can also be a complete type", "copy this histogram , corrected for coordinated omission , into the target histogram , overwriting it ' s contents .", "reindex the database", "add a line break .", "the list of cluster parameter groups that are associated with this cluster .", "receives new set of regions and sets up the display accordingly", "utility method that creates a new stringliteralexpr .", "creates and persists a storage unit notification registration entity .", "read the previously created nobelprize by primary key", "finalizer of the snmp protocol adaptor objects .", "a list of mappings to the specified targets .", "indicates whether the processing was successful", "empties the map", "calculates the length of the record by aggregating the length of each field", "creates an operation expression on the specified target object .", "serialize the payload", "insert after the users cursor so we recover from parse errors in a helpful way when doing autocomplete .", "reverts the ui which will be presented to the client on the next interaction to the one which was in place before the current one", "writes the document in - memory representation to the outputstream .", "set the time the request was issued .", "returns two integers one is the port number of the figseqlink which is next to the given portnumber", "construct an instance with the given name .", "creates a between predicate .", "returns a completable which makes sure when a subscriber disposes the subscription , the dispose is called on the specified scheduler .", "get the meta data for the class we reference", "adds a subclass to the class", "send the message \" selector \" to an instance of the class named \" receiver \" .", "this method performs an asynchronous thrift call to copy an image from one data store to another .", "creates a new empty view in the module .", "convert the y coordinate", "hunt for the script file by calling searchforgroovyscriptfile string .", "compares two stun attributes .", "method overidden due to the difficult situation with the channel count and the possible conversions possible .", "get shared template", "sets the loaded element data .", "sets the charfields which the user can choose from for filtering characters", "validates the validmemfreeinbytes constraint of file", "sets the value of an long field .", "saves the model into the original file .", "returns a message describing the exception", "opens the languageeditor window", "detaches from the target process .", "helper method for creating a new review and writing it out .", "reload all the textures loaded in this loader", "checks that the task may be executed", "maps this promise to a promise of type u by applying the specified function .", "gets value at the given index as an object .", "creates a new process listener .", "the main method for this application .", "replace the comparator at the given index", "for more than one table use this method to register the table header ' s .", "retrieves published dwc - a file for a specific version of a resource .", "add listener to this file monitor .", "generate a stress test report writing it out to the specified path", "validates the debug settings .", "limit the max size of an image will be displayed height and width are both shorter than maxpix", "this translates incoming hard key events in to edit operations on an inputconnection .", "try to parse gwt - rpc method name from request body stream .", "creates a new user or updates an existing user ' s information on a data box edge / gateway device .", "creates lifetime element .", "this method is used to retrieve the basic information about a tv network .", "perform an and operation with another mask", "creates a new seaglassborder object .", "scans the schemedata .", "return the package name from a fully specified classname", "try claim a draw using a command string .", "this function will return all the menu and sub - menu items that can be directly ( the shortcut directly corresponds ) and indirectly ( the alt - enabled char corresponds to the shortcut ) associated with the keycode .", "returns true if this sample case is a fillable object", "make an exact copy of this object .", "return the current time formatted in a standard way", "creates a resource .", "verifies that object deserialized from golden file correctly .", "updates this animation ' s current image ( frame ) , if necessary .", "release the direct buffer associated with this object .", "modifies the settings for the specified replication subnet group .", "generates remote service map", "subclasses should override this method to capture locations where a redundant null comparison is performed .", "converts the \" name \" name into a namecomponent [ ] object and returns the object resolved by the cos naming api , resolve .", "creates rrdfilebackend object for the given file path , backed by java . nio . * classes .", "search thrugh all registered modules for an entry an return the one from the module with the highest priority", "create a nested otherclasspath", "instantiates a new token endpoint .", "a left mouseclick on a node adds node to selection ( depending on shift and ctrl keys ) .", "perform a topological sort of the connected set of a directed acyclic graph to which vertex startat belongs starting at vertex startat", "overloads the left shift operator to provide an easy way to add components to a popupmenu . p", "create a number of databasesessions with given parameters within properties", "retrieves whether this database treats mixed case quoted sql identifiers as case insensitive and stores them in upper case", "specifies that the time lines value changed at a given date", "creates the cache - manifest resource specific for the landing page .", "positions the index before the first index record matching the specified range of search keys .", "sets connection closing timeout .", "converts an enumeration of values for an attribute into a string , encoding special characters in the values as necessary .", "creates a new stream that contains elements of the current stream with a given number of them skipped from the beginning .", "cuts the suffix ( am or pm ) from a given time string .", "sets this attribute ' s fields according to the message and attributevalue arrays .", "determine whether the given annotation is present in the object ' s class or in any of its superclasses .", "make the group folder persistent", "function invoked when a user shares an image with the zulip app", "set by the telnetclient when this option is either disabled or enabled", "the reset button was clicked by the user .", "creates and returns a listener , which allows to observe when a list item has been selected .", "sets the direction of the register tracker analysis to down and then calls the handleregistertracker function .", "requirement for mutable table .", "parse a section link of the form section and return the resulting html output", "creates a default stream metadata object and merges in the supplied metadata .", "loads the type id list .", "return a string containing information about the parser settings", "this method is called when this component is activated", "sets the selection of columns in the model to what ' s in the display .", "initializes a connection object .", "apply a model transformation to this matrix for a right - handed coordinate system , that aligns the local + z axis with direction .", "returns the zipentry with the given path", "closes write objects bufferedwriter and filewriter", "returns a string with line separators converted to spaces .", "url parameter parse", "initializes the presentation .", "write the class constants", "abbreviate a string as a given name .", "compute the shannon - weaver diversity index in bits", "updates a breakpoint condition .", "list wars return a list of wars - - - this route is cached for up to 3600 seconds", "the method calls the saveallappletcontents method in kafenioappletobserver", "writes uuid to binary writer .", "appends the last invariant part to the previously created messages , and finishes up the printing to the desired output stream .", "returns true if the matrix is singular the determinant is .", "recursively resort whole sub tree of the posts", "sets the content of the element to be the text given", "gets the content of a field for a document using its external id", "end the merging process by effectively executing the merge operation and returning the result through a call - back .", "set the image from an indexed color array", "index a payload using the provided data using a python script", "add type descriptors to xml document .", "fill missing values / locations / elevations in a bucketized gts with the previously encountered one .", "return true if the value is a numeric zero", "appends a new local comment to the list of local code node comments associated with the given code node .", "do fail task runnable when task fail", "try to find a counterexample to the given hypothesis , and log whenever such a spurious counterexample is found .", "marshall the given parameter object .", "returns the hash code for the entity based on the scope , metric and tags .", "clean - up configuration files before leaving", "sets the current music volume according to the values stored in preferences .", "removes a breakpoint from the given address .", "create a new servletoutputstream which returns a gzipresponsestream", "creates registers and returns a reference to another library", "creates a new toolbarnorthstate object .", "walk through a block children recursively parsing string content into inline content where appropriate .", "it checks if the list of contents is empty .", "wrap so we can do type checking on map . entry . setvalue .", "get a valuereplacer for the test tree", "waits for resume .", "this method gets the melting temperature for this primer", "resolve an annotationvalue into a list of annotationvalues representing type qualifier annotations .", "returns a list of all incident edges of this vertex", "around event parser , default impl", "set up the specified file in append mode", "returns the last modified timestamp of a zip file", "parse the notification id from a string object .", "marshall the given parameter object .", "reacts on a tree selection event", "returns the hours in this time duration", "tests scrollability within child views of v given a delta of dx .", "check if a file exists .", "method only handles text message and uses the batch function", "convert the passed repository url to an equivalent version suitable for the container classloader", "static setup - add fields to parameterpanel", "tests that the timestamp is only granted when the insync property is set", "turn all normal blocks to gem for map game", "remove the filter of the wifi", "removes an entry from the sa storage .", "add message bundles by given language / country names .", "set the mtu maximum transmission unit value", "convert touch position x y in", "deletes a key value pair from the map .", "removes an attachment from association with the homework", "multi - value link header values parsed by the javax . ws . rs . core are not split out by the framework therefore we must do this ourselves .", "writes the document indented if specified to the output stream", "initializes the rootcontext by the reader reader", "this method will see if a shell has a modal style", "hard reset the machine state .", "add an extension method .", "initializes the listeners that handle keyboard and mouse input .", "scale view group by sx sy", "seek article in file .", "alerts all listeners that an object has been added", "submit all tasks , awaiting their completion and check their futures for errors .", "gets additional attributes and child elements defined in other objects", "within a transaction , all inserts must be done in sequential order .", "build the xml representation of this procedureelement", "initialises the jwtsessionmodule for use by the am login module .", "creates the fields with double wordworthiness", "only used for trivial objects font s color", "test function for cursor proximity to a given world space position", "set the metadata that is currently being displayed", "turns the comma - separated list into an array", "if this view can display the given token update it .", "settle the captured view at the given left top position .", "evaluates current node group state and returns true if requests should be process , forwarded , etc the conditions are : 1 ) the node group membership should have been stable ( gossip did not produce changes ) for a specific period 2 ) the number of node group members in available stage is > = membershipquorum", "binds a set of handlers to a particular event for each matched element", "adds a collection of models which shall be inserted into the edb .", "read data from input stream", "returns the string representation of the int argument .", "creates a list of transform part of reference section in signature", "scrolls the text to the top", "obtains , whether the dividers , which are shown above and below the list view of the preference ' s dialog , should be shown when the list view is scrolled , or not , from a specific typed array .", "from interface intset", "this adds a property descriptor for the vendor name version feature", "register new classquery", "handler for the rnto command specify the file to be renamed", "creates a new record in a series , such as daily weather records , soil layers , etc .", "create a new probe and log that it started .", "paint the foreground minimize button pressed state", "create the actions for the buttons .", "sends the fcd command and argument .", "sets the minimum allowed date .", "get the optional jsonarray associated with an index .", "returns the error estimate on the npv when available .", "removes string keys with an empty pattern as their child", "smoothly animate mdraggingpane to the target x position within its range .", "convert class path specification into an array of file urls .", "set the sun specific canonicalization property .", "enable / disable the button actions as needed .", "creates a bufferedimage of the hsvimage", "asserts that a given file does not exist .", "returns whether the file is absolute if a security exception is thrown , always returns false", "paint the component on the gui", "compute and store crc .", "eats a backslash sequence from a string", "remove a deferred trailer from the current list of trailers to generate when serializing this object .", "returns year for the specified date", "output this screen using html .", "convert the value to a long .", "learn whether a given element has been configured", "sets the value of the designated parameter with the given object .", "method for getting the children of an element", "add the created action message for the key ' constraints . typeany . message ' with parameters .", "starts interpolating the extension value for the given operator in the opposite direction , starting with the current value .", "gets the formatted message", "add a action to this notification .", "determines if the phone has been initialized", "sets the minor version of bosh which the client implements", "query all scsi initiators", "takes an x509 dir name as a string of the format \" c = au , st = victoria \" , or some such , converting it into an ordered set of name attributes .", "process the signature block file .", "splits all items into two lists based on the closure condition .", "get a new instance set to the specified day", "creates a new attach reply object .", "it ' s tricky with this implementation because we can ' t rely on any state in between two calls to setcharacter since the caller might modify the terminal ' s state outside of this writer .", "refresh the view of fox rabbit and blocks", "adds the specified indexes to the specified type .", "returns the product publication date .", "updates the fade timeout threshold to the current time plus delay", "create a decorator map , by chaining zero or more decorator maps .", "set the masking mode .", "constructs csvparser with supplied separator and quote char .", "construct a program rewriter for a given rewrite which is passed from outside .", "sets the indexed setter as the specified method", "looks for multiplication pattern , on each step x multiplied or divided .", "sets the duration after which responsibles will be notified about out - dated content ( in days ) .", "reloads a saved state", "gets the bidi coloring mode", "update index ( delete and remove files )", "converts three characters of a codon into the corresponding amino acid .", "evaluates the given index properties for its ordering capabilities against the given filter and order - by properties .", "calculates distance between 2 lat / long points on wgs84 .", "deletes the string wherever it occurs in the builder .", "deletes a global comment from the list of comment associated to an edge .", "store the current information into the wrapped keystore .", "position input stream to start of zipentry this instance was created for", "adds a changelistener to the panel", "create or update task .", "instantiates a new http exception .", "factory method for creating a source line annotation describing the source line numbers for a range of instructions in the method being visited by the given visitor .", "ensure output directory exists", "bulk inserts a list of episodes into the database", "add a collection of commands to the page list .", "calculate the mininal number of instances required to achieve a score as high as the given scorethreshold for the given lambda", "look at nodes below this node , searching for nodes that have the supplied type .", "confirm that the local values average correctly back to the average value", "get the set of instructions at a given time", "release a held write lock for the passed in key", "gets the http response reason phrase .", "add a song to be played", "calls any listeners with the given event and current port", "regenerates the content of the node and updates the graph view .", "list the configurations of node enhancer providers .", "returns the sha hash of a string .", "uses linear search to find the latitude of a given mp", "returns a persistent person based on the given id", "if the animation is playing the new configuration is loaded stopping the current animation .", "reads the ufword at the given index .", "add completions for command transportiere", "get model reference string", "marshall the given parameter object .", "called to indicate the end of an annotation definition .", "finds the first occurrence of ' - ' , or if that character is not found , the first occurrence of ' , ' , or the first occurrence of ' ' or ' . '", "sets the locale .", "compute and return the score for a match with e errors and x location .", "confirm that a calculation for univariate data using univariate method signatures matches that with multivariate signatures .", "converts the json to pretty string and then makes the string copy paste compatible for unix cmd line .", "fills the toolbar actions , if a toolbar is available .", "forwards caught exceptions to input stream .", "creates a new empty map with an initial table size accommodating the specified number of elements without the need to dynamically resize .", "print a value followed by a newline to the standard output stream .", "stop all instances after test", "close a stage .", "returns the next element non blocking", "get the http method of this request", "the names of the scheduled actions that could not be created or updated , including an error message .", "finds an available tcp port .", "encodes the current buffer and writes the result to the output stream", "sets lock according to the transaction s isolation level for the reading some records in the specified block .", "sets the value of field password", "remove the source connection", "return the max norm out of the two norms x x and y y using the configured norm type", "swap two arrays .", "creates a new platform exception object", "an array of botaliasmetadata objects , each describing a bot alias .", "caution not stack safe", "extract the required rows and columns from the matrix", "remove all of the specified elements from the selection .", "create a diffobject that represents the auto merge for a merge patch set .", "import a sql script from file and execute it in batch mode", "use this api to fetch a tmglobal _ auditsyslogpolicy _ binding resources .", "setting the path where the interceptor e . g com . bladejava . interceptor", "commit changes to coloringmanager based on selected coloring method .", "constructor with canvas3d for mouse events and branchgroup to be picked", "enables sis and sets the schedule .", "creates a minecraftdirectory with the given root directory .", "retains only valid entity id for a specific protocol", "gui component to a channel state .", "adds the block to a list of blocks that won ' t turn into a fleshy soil when a lesser shoggoth walks over it ( note : any liquid block and tile entity block will automatically be blacklisted )", "stop this ec2 instance .", "clears out the selected ui that was last set in setselectedui .", "auto login according to local db", "lookup the platform by name", "an http webevent handler that clears the named cache", "returns the layer requested by name", "creates static groups in this group container .", "convert long array to long array", "processes all declared subs names with given processor", "called when a blog entry has been published", "submits a callabale to to be executed on the space using the provided routing .", "method that handles initial token type recognition for token that has to be either field _ name or end _ object .", "write crash info to file", "returns a date that is rounded to the next even multiple of the given minute .", "find enclosing form of the component", "returns true if the characteristic is the battery level characteristic .", "archive a protocol", "disconnect from the server", "the maximum of this and other will be assigned to this", "adds a split element at the end", "parse fights of an old event", "populate table with random data .", "returns the supplied width for resized images", "find all types within an index", "shows the remote file browser dialog .", "start a new region .", "indent the current line and print a string on the same line , then print a line break", "creates an identity matrix", "applies a font to the specified characters of a string", "thread loop that sends messages", "performs the native wgl flip operation for the given target component .", "add required supporting style to enable custom tooltip rendering .", "called when a player has called a set", "deletes a new resource in the repository .", "create a new gotoaction from a destination", "mapping of campaignvo entities to campaigndetailform entities", "construct a jsontokener from a string .", "i - get a mutual information matrix .", "selects the given event", "creates a httpserver from this provider", "waits for a particular high seqno in the thl interval guard structure .", "destroys the named context and removes it from the namespace", "assigns the specified byte value to each element of the specified array of bytes .", "this is used to resolve and load a class for the given element .", "add the constraint that sampleport2s can only be connected to other ports of the same type", "update the memento resource .", "this method scales image down for given value related to image center .", "indicates if this thread is running", "create a panel that does vertical layout", "returns the end of the given day in milliseconds", "sets the visibility of pic field as per the given visible param value", "reads and parses classpath entries .", "returns a component to be inserted into scroll pane view port", "submits the completed form and returns the result of the transcript search .", "create the delegate for a term ast node", "open the overlay panel with path animator applied", "set whether schema names should be appended to the package name .", "create a specific rma", "adds an exchange rate to the repository .", "test if the target path is an archive .", "returns an initiliazed instance of exitapp component", "find permissions owned by this user", "constructs a new instance .", "update the ap s info when the device activated suc or fail", "helper method that creates space documents from the httprequest payload and writes them to space .", "sends a specified email to all developers", "builds a checkbox row .", "parses the the rule additiveexpr according to the following production rule :", "add the specified constraint to the set of constraints aggregated by this compound constraint", "finds the chunk that contains a given address .", "visit an astore instruction", "get the content from a string , decoding it if it is in gzip format", "removes the last context from the stack .", "this just records the information", "returns a new instance of forwardrule .", "set the state based on the states of all file downloads .", "same as the static returntransformer freemarkertransformer", "creates a new tabledataadapter .", "adds the link link to the topology which servers as downlink to the node with address address", "broadcasts the current percentage of image completion to all registered iioreadprogresslisteners by calling their imageprogress method", "creates a new asynchttpresponsehandler", "sets state of the device", "visits a bitandexpression", "cause the plugin list to refresh the next time it is accessed regardless of whether it has already been loaded .", "gets the maximum page in the window", "initialise the key generator .", "creates a new byte array output stream with a buffer capacity of the specified size in bytes .", "executes the actions after this block is executed", "updates the mac ( if the function is on ) using the specified subarray , and in any case writes the subarray to the output stream .", "if a method with the given name and parameters is already defined then it is returned otherwise the given method is added to this node .", "create a deep copy of this capability", "returns the root object of this chain .", "logs the user out via the securitycontext", "executes an action if the user ' s credential is known , otherwise redirects to the authorization page .", "adds a set of fo files nested fileset attribute", "parse a geojson file", "this method creates and returns a new beano instance appropriate for this home .", "leapfrogs the edge write lock forward , reducing the lock list ' s write - locked scope .", "returns true if the type is profile", "returns true if the two characters are equal if case is ignored .", "returns true if the passed value is a in valid email address format", "determine the modified variable for a given lval .", "an array of strings listing alternative domains and subdomains for your ssl / tls certificate .", "checks whether a given object is null .", "marshall the attribute with attribute config", "get the field bg user 11", "invoked when the components position changes", "for keyboard mode , processes key events .", "returns a pseudorandom uniformly distributed value between the given least value inclusive and bound exclusive .", "information about the route table propagations .", "method that records the number of stop calls to an underlying model as indetified by index", "paint is the main part of the program", "add the review creating its restaurant if it doesn t already exist .", "marshall the given parameter object .", "sets application property on the jad", "log the given tungstenproperties", "calculate requirements along the minor axis .", "validate issuer format and value .", "query the default bounds", "normalizes list by moving the content into ideal position balanced over pivot .", "find the differences between two texts .", "reads characters into a portion of an array .", "slot sharing code", "return whether or not this typequalifiervalue denotes an exhaustive qualifier", "create an internal node object of type clsdatatype .", "generate an array of random integers in the range . . cap .", "sets the array of values to set the custom property to", "private helper method to write the xml declaration including an encoding attribute for the charset provided", "verifies equality of all fields but not the parent pointer ( thus the same key derived in two separate heirarchy objects will equal each other .", "constructs with case - insensitive keys .", "adds a new zoom listener .", "drops the underlying database table .", "load a catalog from the jar bytes .", "parse a version string and add the components to a properties object .", "this function is called when user logs out from the system", "flatten an array .", "executes an operation updates the state vector and adds the operation to the history buffer", "returns whether the specified classpath is equivalent to the default classpath for this configuration .", "pre flight checks run once for each test class", "make an effort to find the codebases containing any files required for analysis .", "append lt param name . . . value . . . gt .", "sets openidm . auth . clientauthonlyports if client auth is required .", "get the blue component", "returns an javax . resource . spi . localtransaction instance .", "removes the listener from the collection of listeners who will be notified when the receiver ' s text is modified .", "collapse a property path expression back to it ' s qualified form for use as the path attribute of the retrieve .", "updates the given base type in the back end .", "set the fill alpha", "checks to see if the current thread is one of the imagefetchers .", "this adds a property descriptor for the categories feature", "tell the table whether particular columns are editable", "utility method to clean new line , spaces and other highly useless characters found ( mainly in javadoc )", "calculate the bounds for a view ' s title", "assign every symbol a unique integer index .", "prints the contents of message to the standard output prefixed by an amount of whitespaces", "returns the commandstack for this editor", "factory method that should be used to construct instances .", "tries to update the notification count", "constructs a scrollable iterator over the given entity name .", "create an initial map of consumer properties from the state of this instance .", "create the bundle file", "map value to its internal representation", "check if the field is hidden", "tests whether this is a generic care bit", "find the longest n such that a [ aindex , n ] = b [ bindex , n ] , and n is on a character boundary .", "prints a table with the code coverage information", "sets the orientation of the camera", "this method will establish a contract for a given resource", "get table row", "read a long from the input stream .", "removes the window from the list", "creates a new time stamp by carrying nanosecs into seconds if necessary .", "checks if an element is visible .", "constructor for primary key", "this method determines whether a particular destination instance refers to a temporary destination .", "returns true if this object is read only .", "this method converts dp unit to equivalent pixels depending on device density .", "validates the public network interface and its document have been removed .", "removes all registered mouse event handlers including the context menu handler .", "sets the size of the square grid", "notes a key to a hyphenation tree as missing .", "retrieves the wrapper associated with a tx , recreating if needed in a cluster env .", "sets the amount of time to delay before attempting to reconnect .", "broadcast a frequency error correction value change", "match key condition", "set whether the value of the given spinner may be changed with mouse drags", "finds audits by exception message .", "returns this actors x position", "parse a json data structure from content at a given url .", "returns true if this map contains no key value mappings", "prepares the binding strategies which bind default repositories .", "use this method to get a new telegrambot instance with the selected auth token", "retrieve a list of dsc nodes .", "checks whether no more bytes will be returned .", "set this panels direction grid movement policy", "computes the y value of the upper boundary of this octagon at p _ x", "returns the first child of this gpathresult matching the condition s specified in the passed closure .", "compiles a batch of input classes , as given by the specified command line arguments .", "sets the popup size", "all objects within sip lib are immutable .", "create a addonresultdeleter to execute delete .", "if the inbox contains the message m ignore it", "add property to a node", "alert a string message on the screen", "generates the signature for the given byte [ ] using md5 with rsa algorithm and the private key with which this helper was initialised .", "test if the double [ ] ad is right of ab .", "replace all occurrences of a substring within a string with another string .", "for all fields whose names match the given regular expression , extract a string value from the first group in the regular expression and call the supplied function .", "uses the scan index shape to estimate the last index", "returns the query data of the view definition .", "read an optional boolean value form a json object .", "deletes the attribute at the given col index", "gets a string attribute from a json object given a path to traverse .", "update the network either create a new network or modify an existing network", "constructs a string of sql delete statement", "scan the classpath string provided , and collect a set of package paths found in jars and classes on the path .", "write a char value .", "create pattern from string .", "covert file reference to uri .", "set the preview image", "initialise the traffic source and layers .", "generate the identity matrix of the given size", "removes the specified mapping from this map .", "deletes a table from the database .", "processes key events occurring on this component by dispatching them to any registered", "add fields from another httpfields instance .", "searches a suitable converter to convert string to the given type .", "print tree link in the navigation bar", "record volume related event and audit", "appending the descending order clause .", "the function convert _ utm _ to _ geodetic converts utm projection ( zone , hemisphere , easting and northing ) coordinates to geodetic ( latitude and longitude ) coordinates , according to the current ellipsoid parameters .", "enable this to completely skip phase 3", "calculate property restrictions from explicit restrictions and required properties", "revert to the state before the current set of changes have been made", "factory method to create a new viewdraghelper .", "get the contents of the forwardroutingpath field from the message header .", "this function only exists to allow for the code in interchunk to compile", "is tinting enabled for the system status bar ?", "this private method allows the threadpoolexecutor to notify all interested parties that all tasks given to the execute method have run to conclusion .", "returns the dimension of a molecule ( width / height ) .", "makes a change entry for each key in stringset a that isn ' t in the stringset b .", "creates message based on the event provided", "return true if we have reached a desired file offset position .", "write the entire page by calling : writehtmlhead ( out ) writebodytag ( out ) writeelements ( out ) writehtmlend ( out )", "an array of workteam objects , each describing a work team .", "used internally for adding view .", "allowed to see their own permissions .", "register the given legacy parameter name as owned by the given module name .", "remove this filter from the end of the name / value chain .", "public object callwithnamedvalues ( pagecontext pc , string methodname , struct args ) throws", "search a string to find the first index of any character not in the given set of characters .", "serializes messages from each peer .", "returns an initiliazed instance of imgfullscreen component", "determines how two calendars compare up to no more than the specified most significant field .", "executes runnable in igfs executor service .", "sets the font color for a state of a widget", "obtains the prob bundled executable and returns the prob . home property set to that location", "calculate viewport size due to changes of display size or map scale", "build container by adding all components", "delete a persistent proposta entity", "returns the register used to load a reference", "format an object into a string using the specified pattern", "shutdown the embedded kafka server and delete all data .", "caches currently parsed attribute name .", "bulk loading of aliases", "rounds the x y and z values of the given vector to the nearest integer value .", "returns true if compression is enabled .", "utility function to convert objects into byte arrays", "attempts to fetch the timeseries meta data from storage .", "this will shallow copy the names hashtable into an internal hashtable", "open / show alert messages with provided callback", "gets the project builds for the given project", "connects to the target process .", "trains the disambiguator on a set of wikipedia articles", "stardard deviation array reduction operation , optionally along specified dimensions", "terminates a job .", "delete fields with this mp4key", "index the entire big wig file content in a sqlite database .", "visits an annotation of the field .", "the current version number as a string .", "creates a multipart body from different body parts separated by the given boundary", "internalxbasewithannotations . g : 1916 : 1 : entryrulejvmlowerbound : rulejvmlowerbound eof ;", "class of value object we are to find", "the arguments of those commands that take arguments .", "moves the cursor for this joinrowsetimpl object to the current row", "returns the textual encoding of the given difftask .", "checks if is visible .", "check if parent of file in param exists and is directory .", "initializes a new created indexentry", "update assessment unit access record", "allows requests to be dispatched to internal vfs resources or external jsp pages , overloads the standard servlet api getrequestdispatcher ( ) method .", "this method returns the weights of a weighted monte carlo method ( the probability density ) .", "return the location of the point passed in result as mapped to the line indicated by index .", "adds a menu item at the given position .", "this returns the elementid label text for the adapted class", "is called when image loading task was started", "returns the cosine in radians from a lookup table .", "add a listener that wants to closely follow track playback for a particular player .", "reads a list of api signatures from a string .", "do the jadt thing based on an array of string args .", "increment seqno and notify waiters then return value .", "create a new output catcher and start it .", "creates a element instance with the given classname", "correct the places hierarchy for all the photos for a user at a given latitude , longitude and accuracy .", "accept method for visitor support .", "creates a peer from a json object .", "get the passed string where all spaces ( white spaces or unicode spaces ) have been removed .", "called when an entire binary frame has been received .", "remove an attribute from the list .", "get the frame to which this frame threads if any", "this contructor is called in response to an incoming request from a slave .", "creates new changes log with rootpath and its descendants of this one and removes those entries .", "puts back a compiled script to the pool .", "generate ' count ' new prekeys beginning with id ' startid ' .", "return a string representing all not ignored tags in the i th position", "construct a new dbyte", "only used by unit tests", "create a watcher that informs the given listener that the given file was modified .", "add a new patternformatter to this logger", "sets the interval between discovering endpoint attempts .", "returns the workplace settings .", "construct a new principal for the specified username and password .", "add an event", "notify replication node that an entry lease expired", "get domain ' s statistics in the live stream service .", "initialize object from an exception set .", "create a service state object", "create source line for suspense balancing .", "subtract the values in the supplied array from this vector instance", "remove all listeners that are notified of any changes in scroll state or position .", "sets the isvisible attribute to false on items in all organizations whose identifier appears in identifiers", "stop the timer and record the elapsed time .", "iterate over view formatters", "add a download task to download queue , waiting for execution , if there is no task in the queue or the number of tasks is less than the number of thread pool , will be executed immediately .", "apply the inverse of the rotation to a vector", "presentation layer need a modelform instance that include some initially data , these data must obtain from service .", "add a frame to the selected container", "removes the given connection from the list of connections to be closed when idle .", "sets the phases to execute", "decomposes s [ src , limit [ and writes the result to dest .", "add local bssids to a group", "for more info on character sab api go here", "optimized trim ( ) method to operate across the entire cstrchunk buffer in one pass .", "reads into a character buffer from the stream .", "truncates the overflow file to a given size if possible .", "display the current date and time", "creates a new table metadata cache .", "get the class of an attribute value of a node", "multicallmetamergestarted method comment", "this is the loop that handles a connection by reading messages until there ' s an ioexception , or the transport or thread change to an end state .", "creates a new component object .", "converts char sequence into ascii byte array .", "get the server header from the response", "compares two character sequences for equality .", "builds a function that will execute the specified function thenfunction only if the target object is not null and the result of executing condition on it is true .", "clone the structure of the tree .", "verify the case of null contained object .", "configure handler with editor", "resolve the type of an expression .", "add the specified table to the list of tables .", "the list of build project names , with each build project name representing a single build project .", "fires property date changes recting on the spinners state changes", "setting common to all operations .", "builds a list with at least two examples .", "indicates whether the cursor is before the first row in this", "whether alternate expression evaluation is on", "enforce today s historic fixings todo q ?", "this addressmode refers to coprocessor style load and store operations and is not implemented yet todo find out whats really needed .", "modify lun , export / unexport / expand , etc", "setter for property domkey6", "creates a union wrapping a value of the third type", "constructs socketpipe instance by tow connected sockets .", "this method adds a symbol to the scope symbol table", "check temporary destinations scope ( jms spec 4 . 4 . 3 p2 )", "attempt to parse a link label returning number of characters parsed .", "walk a directory tree and fsync both directory and file inodes .", "track the specified file using the provided marker deleting the file when the marker instance is garbage collected .", "merge resource references .", "generate a unique id", "creates a new instance .", "get the capacity of the byte array", "get this instruments ask volume at specific price", "create a new pdfarray with the provided pdfobject as the first item in the array .", "resume the server handler", "checkstyle ignore line : executablestatementcount | cyclomaticcomplexity | npathcomplexity", "header data unit first message in a call sequence .", "displays the provided image information .", "stops the harvesting timer .", "add an item to the toolbar", "compile the ontologies in java code", "create the local menu actions", "create a postscript reader given some data and an initial offset into that data .", "returns the sub - configuration tree whose root is the specified key .", "gets a collection with all servers , including ready and not ready ones .", "event elission endeavours to ensure that events processed represent current state change .", "decompress the data in an arraylist object", "finds matching emoji character by its annotated metadata .", "invoke this method if youve totally changed the children of node and its childrens children", "sets the delegate of the service , that gets notified of the status of message delivery .", "unregisters this helper from a control previously passed to startlisteningto and or startlisteningforenter", "determine whether or not the id of the given basicblock appears anywhere in the path .", "gets node from last saved topology snapshot by it ' s id .", "creates the http headers object for this request , populated from data in the session .", "release of this slholder resource", "adds external media to this file if it is not here yet", "represents the addition of the element key representing a contextual element acquisition", "true if id is ambiguous .", "return the transpose of this matrix .", "the validateloginpassword validates loginid password combination", "this method is used internal to mp only and is used to remove a destination change listener that was registered .", "returns a unique name that is not used by any other avatar", "releases the external resources that this object depends on .", "writes out bytes in standard network byte order .", "sets the value of property to value", "get the full name from the forename and surname", "block the main thread until all of the transactions have finished loading", "get the total time of the section .", "returns the integer which is nearest to val but on the grid round down", "generates a dex file and returns its bytes .", "gets the nextunplacedheavyatomwithaliphaticplacedneighbour from an atom container or molecule .", "creates editpolicy objects for the editpart", "creates a union wrapping a value", "increments the rank of the element", "set the symbolavoidedges property", "evaluate the onresponse script if present .", "prepare the dataset required for running test cases", "a callback for the scanhandler that allows it to force the lexer state to cdata content no markup is recognized except the end of element .", "returns whether or not this method is private .", "move the focus to the next logical field .", "prints a double to this output stream and flushes this output stream .", "construct a simplereactstream from an publisher", "utility method to create an httpurlconnection .", "setter for name sets the field name that represents the field", "returns true if se is the head element false otherwise", "writes the entire contents of the specified input stream to this byte stream .", "deletes a directory recursively .", "peform the computation statistics based on a locality record .", "create an exception given another exception .", "logs the occurance of an invalid task type .", "increments the counter of the specified object", "get the allowed methods for this resource", "prepares an int for printing with leading zeros for the given size .", "set the resourcereference of the resource", "spawn a popupmenu for the file history", "apply actions done while moving .", "creates instance of map widget .", "look up a change by string id .", "this method loads the given topic into the note taking section of the screen", "invoked after a section comment has been deleted .", "returns the value of a particular element as a string", "configure the injected file based workspace in order to run ( called if no compile precedes the run )", "delete the start and trailing quote from the sting and replace all ( escaped ) double quotes with a single quote .", "add in a new record i . e . a new msgdata into the mapping .", "checks to see if the cc number is a valid jcb number", "removes an ongoing operation .", "create a new abstract managed object definition .", "a resource has been copied", "update the job with details about the file split", "called when the file is uploaded .", "alter the category of one site", "fired when the user types in the namefield", "delete this record ( always called from the record class ) .", "returns true if the iteration has more elements .", "reads the mime types and their associated inc / dec factors in a hashmap", "deletes the nodes of a view from the databases .", "performs the specified request .", "tells the logger what entity type this class is", "copies regular expression to an int array and invokes the parsing of the expression which will create the object tree .", "checks the data definition by ensuring the index in the state vector containing acceptance information is defined .", "get a byte array from the given file .", "adds ou to table .", "returns the minimum balance of the history", "initiate the processor with a reader", "this method creates a decorator around the original view ' s \" intent \" .", "tries to artificially match a data node - - used by remove .", "returns true if the block is going to be full after insertion .", "for more than one table use this method to register the table header s .", "creates a new instance with the given code message and metadata .", "a method to add a placeholder to a deserializable object used in the deserialization of objects from marked up html", "hash of the models current content .", "returns an enumeration describing the available options .", "turns a sql table by its name into a java class name ( upper - case camel - case ) .", "initialization of the servlet .", "get approximate running average time delta in nanoseconds .", "sets an animation for this sprite but with a certain timeout value", "checks whether the extension of the filename is that specified .", "get whether the given user id is * explicitly * allowed to write this object .", "a convenience method for posting errors to a joingroupcompletionlistener", "convenience routine for setting the locale priority list from an accept - language string .", "returns true if this request has had a response delivered for it .", "acquire connection or create a new one if the queue is empty", "verify schemas are renamed as expected .", "returns the standby value .", "wait for the job driver to complete .", "the readunion method is determine the unions for a particular label and set the value of that union to the same value as the label", "get the string encoded version of this object", "user must not be loged in to login", "retrieve a user by its id , and create a new one if requested .", "populate localization object cache for current locale .", "do not create objects of this class .", "returns the coordinate immediately left of this coordinate", "called when a new directory is entered .", "parses the string representing the effect , and returns the corresponding effect .", "reads a number of bytes from the debug client .", "translates a date to java2d coordinates , based on the range displayed by this axis for the specified data area .", "returns true if this node is malformed which means that its corrupted in some way f e", "flushes the internal state of the list resetting the capacity to the default .", "sets the name attribute of the mailbox object", "checks if the token marker file is valid", "line - wraps a string s by inserting cr - lf instead of the first space after the nth columns .", "returns the noderepresentation subtype for an opapplnode whose operator name is opid .", "retrieves the maximum long . max _ value bounded length or precision for the type .", "this method return the mapcode type , given a mapcode string .", "bind the given variable to the key set of the given map value .", "returns true if qp is the antiparticle", "creates an instance with the specified data and actions .", "return an array of all possible combinations of p from n", "get object in current scope .", "add a single condition", "load the typescript console connectors .", "asserts if the provided text is part of some text .", "this method will attach webparam annotation data to the parameter description composite if the annotation was found on the parameter represented by this index in the parameter list", "queues specified task using tasks dead line time .", "get the name of a constant pool entry", "you are not supposed to instantiate this class .", "returns all incoming and outgoing edges of a node from the view .", "unbinds the thumbnail view from the task", "set all time zero", "the name of the image related to a finding .", "returns a new color with the saturation cut to one third the original and the brightness moved one third closer to white .", "create an instance from the current factory", "unload the plugin if possible", "determines if the instanceclsname has been modified", "schedules a the pickup of the shipment right at the beginning of the tour .", "send sql string to outputstream .", "execute the action that expand or collapse the associated component", "find the next element that pumsquery approves of", "if your implementation subclasses the objects youll want to overload the constructbyclasscode implementation to return your implementations instances instead of the base implementation", "load an animation for the current avatar .", "operation timeout checker will raise an error if no response is received from the server for an operation .", "creates a new button listener .", "set the maddr parameter", "converts an identifier into an expression in a given scope .", "represents the value as a hexadecimal string .", "refreshes the current session manually using password .", "removes all elems in the given collection that aren ' t accepted by the given filter .", "get the next element waiting if necessary for an element", "validates the class definition and if valid , destructively extracts the class definition from the ast .", "sets the file position for the row and registers the row with the table", "removes all breakpoints of a given breakpoint manager .", "remove a document from this cluster .", "locates and decodes a barcode in some format within an image .", "calculate spring forces and pass them to the nodes", "set up all the screen fields .", "has image been cached withe the specified key .", "called when the robot has ticked .", "adds treestruct as a child of this treestructure instance .", "inverts the color", "invoked after a new debugger was added to the provider .", "colorizes a range of bytes in special colors .", "reads all characters from the current position to lineend", "get a request parameter", "decrements the workercount field of ctl .", "returns location or - 1", "overrides filterinputstream read to update the stream monitor after the read", "toggles whether to use the snow effect", "check if the next construction in the source code is a key word", "creates a copy of the specified workspace .", "get a darker shade of an input color .", "this method will copy input stream to output stream it will copy file to destination and will not close the outputstream .", "clicks on an element waiting waitinseconds time then types .", "determines whether the version of the facebook application installed on the user ' s device is recent enough to support specific features of the native open graph action dialog , which in turn may be used to determine which ui , etc . , to present to the user .", "get the earlier index that to be searched for the first occurrance in one of any of the given string .", "execute the query and return a single result", "gets each package name as a separate link .", "returns an unmodifiable collection which may be empty , but is never null .", "slice and sort the given input array .", "calculates the line height and preferred size of this component depending on the given font .", "remove the given binary category object permanently from the database", "reshape the list that is used for this choice widget", "returns the default number of attributes", "return the length of the specified range .", "main launcher for the repl example .", "we do not synchronize this method to avoid dead locks as this method might call another preferences object in the hierarchy", "validate xml matches xsd .", "imports the instructions of a raw module into a binnavi module .", "initializes the selector width .", "release previously acquired exclusive access .", "constructs a new master facade instance for communication with a given slave .", "note that calling this slightly violates the semantics of this method as defined in managerif", "the key to data \" offset \" chunks from the beginning of the blob .", "whether the timestamp is today", "create a constant by wrapping the specified long .", "converts an xml branches element to a bpel branches object", "ensures that an array can contain the given number of entries , preserving just a part of the array .", "checks if an element is visible .", "moves to the specified voice channel .", "returns true if both matrices share at least one identical cell", "limit the search to return only the named attributes .", "returns the elements that compose the path .", "converts an edbobject to a model by analyzing the object and trying to call the corresponding setters of the model .", "this adds a property descriptor for the performers feature", "add a new batch to the current pending batch .", "prints the parsing trace to the standard error output", "adds a new item id", "query by context . getcontentresolver ( ) .", "convenience method for parsing the named attribute as a string value or reference .", "deletes a section comment .", "is null or its length is", "returns a transliterator object constructed from the given rule string .", "creates an audit log filter implemented in a script for a particular event type .", "called whenever an item in the tree has been collapsed", "transform group s param to po .", "set a transformation stylesheet xsl to be used before returning the resource content", "verify the validity of an assertion used by a service", "reads a series of type a bytes in reverse", "compares double fields with these explicitly specified top - level field numbers using the provided absolute tolerance .", "constructs a dfa content model .", "serializes the argument into an array of bytes , and returns it .", "this after the template ' s children have been composed .", "trace the right side of the image", "use this api to fetch vpnsessionpolicy _ binding resource of given name .", "converts a string of hexadecimal characters into a byte array .", "sets the scale type", "make a copy of given search tree in the transposed graph using vertices of the original graph .", "you are not supposed to instantiate this class .", "returns azimuth value regardless of which type of line this is", "cancels session sweeping timer", "wrap an iterable into a futurestream that runs on the current thread", "this method creates animator that will animate matrix of imageview .", "hide all other states and show content", "add table column .", "returns the default size of the viewport", "tells a plugin to create an extension to this menu .", "use this api to fetch all the nsip6 resources that are configured on netscaler .", "performs intialization of the scheme .", "implements method of taggedmessage interface", "send an exception back to the client", "disables caching from a webpage .", "resolved non relative name of the config file .", "returns a copy of this year with the specified amount added .", "displays the selected search parameters in the result tab .", "returns the service that renders the script containing the safeinvoke method", "deduplicate the failures by exception message and index .", "initialize the type parameter .", "a private function to write things out .", "sets the flag attribute of the arraystats object", "return the tests included in this test suite .", "move to a location", "log a debug level message with given format and arguments .", "checks whether item is still active", "ensures that a path always ends with a slash .", "this is used to scan the type for its declared methods .", "support the range subscript operator for a list .", "inserts element at a position .", "remove an attribute from the list .", "returns all the elements in an array , and the type of the result array is the type of the argument array .", "returns the type of the object", "whether a string matches a given pattern starts with the same characters at least the first start characters must match", "closes the stream .", "returns the convertmanagertypeimpl for a given source type .", "flush any incomplete last line , then add the eof token into our data structures .", "executes a query that is expected to returned a column of integers .", "use this operation to get the current time zone .", "creates a new updater object .", "construct new certpathtrustmanagerparameters from the specified parameters .", "utility method for serializing an object and saving it in a way that later can be recovered anywhere in the cluster .", "initializes graph view with graph data", "returns whether normal functions should be shown .", "creates a mosaic id that conforms to a certain pattern .", "reads a unsigned integer bit from an inputstream .", "renders this svg document to a picture object .", "returns an extended filter with the given user id restriction .", "deletes the rshuffle if one exists", "returns a list containing the resources pointed to by the parameter", "invoked after a query debugger event settings reply was received from the debug client .", "replaces any occurances of \\ \\ in the screen shot file location with /", "build an sdp description for a media channel .", "used to generate overlapping k - mers such i . e . atgta will give rise to", "recognize text operation .", "if the wifi is conneted to ap return true directly otherwise enable the wifi connect to ap with the parameters", "applies a heartbeat to the service to ensure timers can be triggered .", "forwards request to creation view bean .", "this method is used to update expiration times in disk entry header", "called once when the pipeline is created .", "select one team by the name", "test whether eula has been accepted", "override to set up your specific external resource .", "create a regular expression which will match any of the values from the supplied enum type", "handle undo redo clear history etc", "underlyings from mercado continuo should be appended with mc", "clears the livemousehandler field", "gets the current sensor read", "returns the specified router resource .", "returns the number of columns in the key .", "return security token time to renew status .", "sets the jutf22 property", "creates a new action object .", "method to determine the negated value of this", "the file modes to update for files in this commit .", "gets a ( partial ) object listing for the given path .", "instances of mapviewer raise mapviewer events as they act and the mappanner hears them all here", "creates a new instance of textspectralspellpreprocessor", "does an export selection up operation on a graph .", "set the referer header to given value", "appends a comment to the list of global instruction comments .", "metodo que carga un recurso de configuracion externalizado", "returns all instances of the entity .", "converts a path to a file for storing compiled template classes .", "use a file as the pdf source", "read data from given input stream , like deserialize", "get the message that should currently be visible", "creates a new exchangerate instance .", "implement the onremoveuserfromcontactlist event listener", "a description of the replication subnet groups .", "add the specified post data element .", "set google cloud api credentials to use .", "discards any data in the serial transmit ( output ) buffer .", "sets the tab stops to be every 8 spaces", "writes the stream length to the pdfwriter .", "returns the metadata , which is empty if the compiledstatement does not generate a result .", "draw the names of all the constellations", "adds a playlist item at a given position in the playlist", "initialization of the servlet .", "reset user campaign progression when user press the delete button in options view", "returns index of the public color for specified column", "returns true is this basic block belongs to the given subroutine .", "resolve the default hostname ( based on the defaulthostname variable ) .", "search nearest neighbors for artificial , uniform data .", "converts the current tag structure into an xml file with provided encoding .", "measure the view to end up as a square , based on the minimum of the height and width .", "get the probability density p x x", "set minimum allowed value", "determine whether or not the thread pool has been idle long enough to pause the monitoring task .", "a convenience method used in reset", "create new instance in context of parent overridable by subclasses", "verifies the given magic number .", "add a search request to execute .", "inserts the nodes of a given function after a given instruction in a given block .", "tries to connect to the database using the given connection options .", "determines if this map and the specified map have equivalent template types .", "gets a database inside of a recommented elastic pool .", "starts the validation .", "skips bytes until the position is aligned to a multiple of 4 .", "compile the java source .", "return results that match both dimension objects .", "wrap an iterable into a futurestream .", "returns true if a fake drag is in progress .", "true if we have more elements .", "checks to see if the character passed in could be escapable .", "returns a string that represents the character sequence in the array specified .", "installs the splitpanes related properties", "returnes the fitness of an individuum", "creates a div instruction .", "moves the cursor to the last row in this resultset object", "helper method used to process sax start events for elements", "creates a new panel object .", "generates a vertica url .", "add a new filter", "draws the graphs and paths if available", "gets a list of server communication links .", "update column family definition attributes", "creates a progressdialog using the given values", "set whether the device should vibrate when touching fields", "a json string containing up to three key - value pair in json format .", "called when the resource load for a navigation fails or is canceled .", "move a buddy from one group to another in your buddylist", "returns a new connection to the resource referred to by this url .", "get list of zone names where the given pwwn belongs to", "execute a chat command .", "replies the starting point for the segment at the given index .", "algorithm that judges the match between the declared parameter types of a candidate method and a specific list of arguments that this method is supposed to be invoked with .", "create parent dir by file path", "swap two top level operands", "this method save the smtp server configuration in the web application database", "replies the node that is corresponding to the given zone .", "clean the attributes of this element .", "create an accountinfocache with the currently loaded account entities .", "returns a diagnostic describing the errors and warnings listed in the resource and the specified exception if any", "check if this graph panel is currently being used", "for internal use .", "update the user ' s icon .", "confirm that we can seek a non zero entry that has yet to arrive in the log .", "parses the current token as a list of booleans .", "construct a component without a name .", "returns true if keys exists , can be either final string ( s ) or sub - stanza", "returns the concatenation of array and array .", "return the table column for this index", "enters a new scope by appending any necessary whitespace and the given bracket .", "returns the html code for the default action content .", "make sure it is not chosen a second time", "push a long integer onto the stack .", "calculates kernel value of vectors x and y .", "registers a uri as a listener for status change events", "marshall the given parameter object .", "indicate the progress of the operation being monitored", "marshall the given parameter object .", "compare two longs for equality .", "copies original file to backup file with same filename but ending with", "listen to filter changed event in order to restrict or enable again columns used in it .", "method that returns a string representing the friendlist sorted by name", "the global name of the parameter name in the component c", "to check if the segment is merged or not .", "broadcast the given intent to all interested broadcastreceivers .", "returns true if this member is overriden by another .", "append property value components to declaration . value , return false if fail with iter . last at the the token which caused the fail .", "reads given size payload from a socket .", "bind one implementation into the set using a unique annotation .", "tries to send all other messages to all connected hosts ordered by their delivery probability", "initialization of the servlet .", "verify that introducers inside normal strings including strings with escaped quotes and comments are ignored .", "defensive programming technique to change a null reference to an empty one .", "this utility method checks whether a particular string is null or not .", "get linkcatname gets the name of category by id", "create a new service object", "prepares the graphics for the layer .", "returns an enumeration describing the available options .", "saves either a paymentgatewayresponse or paymentgatewayrespmsg value and ensures that the value is persisted even in the event of a rollback .", "writes the key value pairs to the given print writer", "returns the value of the field managed by this class", "retrieve the stream from which to read the shops state", "find the all the declarations with the given name that occur in the given list of members", "shows context sensitive help for the given window .", "recalculates the container size for this controller and resize them", "tests whether this geometry is covered by the specified geometry", "creates a new audit event with results", "free a poll array", "add a command line switch that allows optional extra information to be specified as part of it .", "indexed setter for company sets an indexed value", "draw a distance attack line .", "figure out which graticule lines should be drawn based on the treshold set in the layer , and the coordinates of the screen .", "look if the given torrent is already registered on this tracker", "create a message version .", "prints out the warranty", "creates a new instance of the class .", "construct an xpath object .", "combines two instances of linecount", "writes the contents of the given resourceurl in the response .", "overriding the comparator between individuals", "this method takes any listener not just a simpleselector", "convenience method to dynamically create a new instance of this class .", "construct a new bundle of ciphertext and iv .", "constructs an leaseexception with no detail message .", "returns if there is a static field read egde ( getstatic bytecode instruction ) from to .", "convert an input stream to a matrix", "the method clearcontext", "this method is used to acquire the class of the specified name .", "apply gaussian blur to image", "tell whether there is a class loaded with an explicit", "sets the c0g", "determine whether empty attributes will appear in the produced markup .", "handle - readauxfromfile command line option by reading classpath entries from a file and adding them to the project .", "this returns the property descriptors for the adapted class", "used by readobject to deserialize a collection .", "gets messages from the messages [ ] .", "gets a period type that contains the duration types of the array .", "called whenever the node is double clicked .", "returns an initiliazed instance of nomemateriacnf component"], "label": ["property", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "property", "why", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "property", "property", "what", "property", "what", "how-it-is-done", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "property", "what", "how-it-is-done", "what", "what", "what", "how-to-use", "what", "what", "what", "why", "what", "what", "how-it-is-done", "why", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "property", "others", "what", "what", "how-it-is-done", "how-it-is-done", "property", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "what", "property", "what", "what", "property", "what", "what", "what", "property", "why", "how-it-is-done", "why", "what", "what", "how-it-is-done", "property", "what", "what", "how-to-use", "what", "what", "how-it-is-done", "how-to-use", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "what", "property", "property", "what", "property", "property", "what", "what", "why", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "why", "what", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-to-use", "how-to-use", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "others", "what", "property", "what", "property", "property", "what", "why", "how-it-is-done", "why", "why", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "why", "what", "what", "what", "why", "what", "how-it-is-done", "what", "what", "how-it-is-done", "property", "why", "why", "why", "what", "what", "how-it-is-done", "property", "what", "how-it-is-done", "how-it-is-done", "what", "property", "property", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "how-it-is-done", "why", "what", "property", "what", "what", "what", "what", "why", "property", "what", "what", "what", "what", "what", "what", "why", "what", "what", "why", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "why", "what", "what", "what", "what", "what", "why", "how-to-use", "what", "what", "why", "property", "what", "what", "property", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "why", "how-to-use", "what", "how-it-is-done", "what", "why", "how-it-is-done", "what", "property", "what", "what", "property", "why", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "property", "what", "why", "what", "what", "property", "what", "property", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "property", "what", "property", "what", "what", "why", "what", "property", "what", "how-it-is-done", "what", "what", "property", "what", "what", "what", "property", "why", "what", "how-it-is-done", "why", "what", "property", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "property", "what", "what", "why", "what", "what", "what", "what", "what", "how-to-use", "what", "why", "what", "what", "what", "what", "what", "why", "what", "property", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "property", "what", "how-to-use", "what", "property", "why", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "property", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "what", "property", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "how-it-is-done", "what", "property", "property", "property", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "why", "why", "what", "what", "why", "property", "what", "what", "property", "how-it-is-done", "why", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "property", "what", "property", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "property", "others", "what", "what", "property", "what", "how-it-is-done", "property", "what", "why", "what", "property", "what", "property", "what", "property", "why", "what", "property", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "property", "what", "how-it-is-done", "how-it-is-done", "property", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "what", "what", "property", "what", "property", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "how-to-use", "why", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "how-to-use", "how-it-is-done", "what", "what", "what", "how-it-is-done", "why", "what", "what", "what", "what", "others", "how-it-is-done", "why", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "why", "how-it-is-done", "what", "what", "what", "property", "what", "property", "what", "what", "what", "how-to-use", "what", "property", "what", "what", "how-it-is-done", "why", "what", "what", "why", "property", "what", "how-to-use", "how-it-is-done", "how-it-is-done", "property", "how-it-is-done", "what", "what", "what", "how-it-is-done", "property", "what", "how-to-use", "what", "what", "property", "what", "what", "why", "what", "what", "what", "what", "why", "why", "what", "what", "how-to-use", "what", "why", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "why", "property", "what", "others", "how-it-is-done", "why", "how-it-is-done", "property", "what", "how-it-is-done", "what", "what", "property", "what", "what", "what", "what", "property", "what", "what", "what", "how-it-is-done", "how-to-use", "how-to-use", "how-it-is-done", "how-to-use", "why", "what", "what", "what", "what", "property", "what", "property", "how-to-use", "how-it-is-done", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "how-it-is-done", "what", "why", "what", "what", "what", "what", "how-to-use", "what", "how-it-is-done", "what", "why", "what", "what", "how-to-use", "what", "what", "how-it-is-done", "what", "others", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "how-it-is-done", "property", "what", "property", "what", "what", "what", "how-to-use", "how-it-is-done", "what", "why", "property", "what", "property", "what", "why", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "property", "what", "why", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "property", "what", "what", "property", "why", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "what", "why", "what", "what", "what", "what", "what", "what", "property", "what", "what", "why", "what", "what", "how-it-is-done", "what", "what", "why", "what", "what", "why", "how-it-is-done", "how-it-is-done", "what", "what", "why", "what", "what", "what", "how-to-use", "what", "what", "what", "property", "what", "how-it-is-done", "property", "what", "property", "what", "what", "what", "what", "why", "what", "how-to-use", "how-it-is-done", "others", "property", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "why", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "why", "why", "how-it-is-done", "why", "how-it-is-done", "what", "what", "property", "how-to-use", "what", "what", "why", "property", "how-it-is-done", "property", "what", "what", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "property", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "property", "how-it-is-done", "what", "how-it-is-done", "what", "property", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "why", "what", "why", "why", "what", "property", "what", "what", "property", "what", "what", "what", "property", "what", "what", "what", "why", "how-it-is-done", "what", "why", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "why", "what", "why", "why", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "property", "what", "what", "why", "others", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "what", "why", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "why", "what", "how-it-is-done", "property", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "why", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "why", "why", "what", "what", "what", "what", "what", "what", "what", "what", "property", "how-it-is-done", "property", "how-to-use", "what", "why", "what", "others", "what", "how-it-is-done", "what", "why", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "what", "why", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "why", "how-it-is-done", "why", "what", "how-it-is-done", "how-it-is-done", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "how-to-use", "how-it-is-done", "what", "what", "property", "what", "property", "what", "what", "why", "what", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "property", "how-it-is-done", "why", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "property", "what", "property", "what", "how-it-is-done", "what", "what", "why", "what", "property", "property", "property", "why", "why", "what", "what", "what", "how-to-use", "what", "property", "what", "what", "why", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "property", "what", "what", "what", "why", "why", "what", "what", "what", "what", "how-it-is-done", "how-to-use", "what", "how-it-is-done", "property", "why", "why", "property", "what", "what", "property", "how-it-is-done", "why", "what", "what", "what", "why", "what", "how-it-is-done", "why", "what", "how-it-is-done", "property", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "property", "what", "property", "what", "why", "what", "what", "what", "what", "property", "what", "what", "property", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "what", "why", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "why", "others", "what", "property", "what", "what", "property", "how-it-is-done", "what", "why", "what", "how-it-is-done", "what", "others", "what", "what", "property", "what", "what", "why", "how-it-is-done", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "how-it-is-done", "property", "why", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "others", "what", "what", "why", "property", "what", "what", "what", "what", "how-it-is-done", "property", "property", "what", "property", "how-to-use", "property", "why", "what", "how-it-is-done", "what", "what", "what", "why", "what", "what", "why", "how-to-use", "what", "what", "how-to-use", "what", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "property", "why", "what", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "how-it-is-done", "why", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "others", "others", "what", "why", "what", "how-it-is-done", "how-it-is-done", "others", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "others", "what", "what", "what", "how-it-is-done", "what", "what", "what", "property", "what", "why", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "property", "property", "what", "how-to-use", "property", "what", "what", "what", "what", "property", "what", "property", "how-it-is-done", "what", "why", "what", "what", "what", "what", "why", "how-it-is-done", "property", "what", "how-it-is-done", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "why", "what", "why", "what", "what", "what", "how-it-is-done", "how-to-use", "property", "how-to-use", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "how-to-use", "property", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "property", "what", "what", "what", "property", "why", "what", "what", "what", "property", "how-it-is-done", "what", "what", "why", "what", "what", "why", "what", "property", "why", "what", "property", "why", "how-it-is-done", "what", "what", "how-it-is-done", "why", "what", "property", "how-to-use", "how-it-is-done", "what", "how-it-is-done", "property", "what", "what", "what", "how-it-is-done", "property", "what", "property", "how-it-is-done", "property", "what", "property", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "property", "what", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "why", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "why", "how-it-is-done", "why", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "how-to-use", "what", "how-it-is-done", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "property", "what", "how-it-is-done", "what", "why", "property", "property", "why", "property", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "property", "property", "property", "how-it-is-done", "why", "how-it-is-done", "why", "what", "how-it-is-done", "why", "what", "others", "property", "why", "how-to-use", "how-it-is-done", "how-to-use", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "why", "what", "what", "how-it-is-done", "how-to-use", "property", "what", "what", "why", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "property", "what", "property", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "why", "what", "what", "property", "property", "how-it-is-done", "what", "property", "how-it-is-done", "what", "why", "what", "what", "why", "what", "property", "what", "what", "what", "property", "what", "property", "how-to-use", "what", "why", "why", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "property", "what", "what", "property", "property", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "property", "property", "what", "why", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "property", "what", "property", "what", "property", "what", "what", "property", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "property", "what", "what", "why", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "property", "what", "why", "what", "what", "what", "what", "property", "property", "property", "how-it-is-done", "property", "what", "what", "what", "why", "what", "what", "others", "why", "what", "why", "property", "what", "why", "how-it-is-done", "property", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "why", "what", "what", "what", "what", "property", "how-it-is-done", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "property", "why", "what", "what", "property", "how-it-is-done", "others", "why", "what", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "how-to-use", "property"]}