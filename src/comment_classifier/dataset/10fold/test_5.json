{"id": [8496, 2604, 13797, 793, 5531, 7978, 7674, 9219, 3813, 13842, 11745, 1062, 15796, 9579, 10502, 9255, 15381, 5086, 17315, 6288, 14358, 18534, 646, 19585, 18981, 12826, 4926, 9198, 13980, 8994, 8985, 17317, 17625, 6639, 15555, 6838, 2152, 10783, 14441, 5679, 16265, 5558, 16053, 8980, 15014, 8415, 12365, 2278, 17382, 19960, 13018, 13450, 5461, 3090, 17184, 12929, 1751, 13635, 9303, 14344, 19538, 16576, 14424, 2952, 10211, 15553, 2067, 10278, 13786, 5219, 18661, 6780, 19096, 4636, 2876, 1326, 4347, 8982, 1653, 8714, 14202, 8079, 12582, 12712, 14770, 9989, 301, 7871, 8307, 5363, 6096, 7527, 1161, 3510, 5698, 15728, 19171, 3497, 7741, 6149, 2557, 19841, 18055, 11279, 17652, 11179, 840, 1221, 13584, 1224, 4359, 5949, 13833, 106, 12465, 14453, 11104, 17978, 643, 4684, 17957, 16009, 1091, 16411, 18086, 18697, 2430, 19027, 19734, 14266, 19885, 7937, 11211, 11772, 10306, 16970, 18941, 18403, 17013, 1980, 12687, 1663, 10882, 2878, 1806, 10300, 6758, 11375, 19971, 10442, 3153, 8462, 2335, 5031, 10718, 9687, 7105, 10904, 3289, 17123, 11791, 11502, 6452, 19571, 17991, 2796, 8766, 19078, 13472, 7177, 10352, 8232, 12559, 2399, 10101, 12107, 7376, 5729, 18734, 11478, 12397, 9034, 8349, 256, 18832, 5114, 16521, 1820, 12369, 15594, 4298, 4476, 4693, 7738, 18218, 12988, 9554, 7365, 7731, 9201, 18738, 2056, 3844, 2196, 6842, 3343, 14516, 778, 2277, 4216, 4280, 6245, 14652, 17562, 12388, 11844, 19044, 11083, 108, 11416, 948, 11016, 15120, 18916, 3522, 17399, 8733, 13015, 10864, 16160, 3451, 4665, 8796, 5445, 10553, 11811, 11390, 12832, 7915, 18753, 17259, 8226, 2442, 18078, 10140, 9251, 8924, 17381, 10999, 15314, 6205, 16241, 18992, 12486, 18342, 3277, 387, 3182, 15170, 15469, 15379, 18822, 16684, 4267, 6459, 19097, 11280, 15593, 8147, 4334, 3565, 6357, 4114, 15824, 806, 895, 18723, 14191, 10789, 2468, 12512, 9699, 9941, 11617, 12371, 8801, 3380, 14537, 19718, 6363, 1552, 3273, 19788, 18230, 5999, 8466, 13530, 17974, 16812, 16484, 3014, 13286, 10658, 8435, 14192, 8073, 19484, 19968, 14918, 7017, 9642, 9030, 17873, 17988, 1883, 17629, 13827, 19537, 6565, 1753, 13893, 10351, 6609, 4859, 6003, 16496, 11627, 12052, 7739, 6867, 382, 4885, 1238, 18280, 695, 1718, 16542, 13656, 17872, 18034, 7210, 15395, 4945, 15664, 1671, 2772, 8125, 15372, 3121, 1410, 4356, 18012, 1474, 7983, 6257, 4741, 2642, 16374, 16137, 7782, 9863, 6291, 4063, 11334, 14983, 15639, 19818, 2539, 18860, 5545, 1280, 17027, 2788, 6878, 14963, 15911, 19179, 12657, 18089, 8342, 5315, 3883, 710, 18251, 9290, 7121, 18699, 16628, 14217, 8702, 6065, 17296, 8189, 17818, 3962, 6143, 19360, 18003, 17542, 1112, 13059, 18814, 18737, 8693, 10895, 9914, 17693, 6580, 4941, 16118, 13615, 3140, 12380, 9678, 16077, 14497, 6496, 6335, 1951, 1125, 18367, 3309, 4544, 18302, 11797, 7571, 19387, 9063, 5417, 4675, 1906, 12061, 17089, 14168, 11739, 16718, 14332, 18905, 2600, 18652, 16416, 8182, 17102, 13751, 17804, 15818, 13987, 3446, 14494, 19244, 1498, 6467, 8945, 4811, 9336, 5918, 15269, 17996, 17168, 4370, 15759, 10908, 19896, 694, 16366, 16417, 1529, 16690, 1593, 7159, 2951, 3810, 8019, 10253, 6445, 11523, 3633, 6546, 14773, 7398, 8879, 6930, 4620, 11835, 9153, 18996, 9163, 5226, 17734, 2494, 10828, 14766, 13042, 10286, 4715, 4560, 19957, 4637, 4850, 13604, 11643, 1118, 2161, 2224, 18371, 13197, 9741, 9396, 3874, 9346, 14794, 7038, 16136, 5952, 18177, 14851, 12113, 15697, 19036, 13862, 18646, 15614, 4492, 16870, 4539, 5299, 2474, 8234, 18635, 2657, 13684, 8501, 8916, 6717, 7390, 10401, 7028, 16505, 7043, 15495, 9377, 1113, 7966, 8040, 2852, 13074, 10093, 1290, 18138, 6682, 9461, 9342, 16824, 14590, 18476, 6593, 2802, 1191, 12985, 16042, 11636, 2420, 8763, 833, 9795, 6398, 1228, 14357, 16507, 17549, 2163, 6122, 1360, 1794, 2292, 4439, 3991, 8611, 4916, 11773, 18917, 6658, 5517, 16367, 18500, 14064, 16313, 15389, 4228, 16847, 11247, 6564, 16532, 12487, 2837, 12656, 7532, 8701, 13858, 8758, 18974, 12827, 248, 11372, 2100, 14179, 1095, 10235, 9851, 15770, 509, 17602, 19812, 17294, 19291, 3551, 14873, 10419, 7381, 13747, 2160, 10654, 4772, 19881, 9656, 3727, 13204, 15832, 16065, 17368, 7408, 4505, 16664, 15376, 7678, 8123, 2934, 17138, 10485, 4628, 9218, 12592, 11268, 9962, 1156, 8488, 1922, 8663, 7809, 14250, 10855, 12099, 14788, 15930, 3867, 12647, 17246, 13347, 9337, 15804, 9293, 13524, 16703, 9042, 8233, 802, 14093, 6863, 2729, 1747, 5672, 13662, 15740, 14949, 1381, 6280, 11710, 9436, 17154, 11943, 11052, 2198, 1055, 761, 16276, 18600, 6929, 11455, 18818, 12960, 15805, 4962, 16407, 6285, 3449, 15634, 2892, 5420, 19857, 16676, 18527, 3721, 15786, 6625, 14541, 18311, 8012, 13929, 17888, 19436, 18845, 11818, 7973, 6589, 12118, 15150, 19030, 506, 15473, 14457, 12203, 1054, 15122, 13661, 17450, 10817, 1203, 17715, 1033, 15362, 18343, 1345, 12538, 11964, 11517, 5211, 9737, 13750, 4456, 5852, 2463, 3364, 15651, 7939, 13728, 3223, 5233, 8230, 11426, 2904, 1969, 19553, 4433, 19489, 11586, 7750, 14775, 15068, 17424, 6941, 18757, 16624, 18978, 7496, 673, 7465, 16762, 9691, 4515, 10702, 7703, 3669, 18614, 19093, 19375, 18267, 16924, 11768, 13132, 5418, 8632, 3617, 229, 18066, 15853, 18417, 10320, 4976, 13970, 5479, 16905, 16420, 4860, 9056, 17284, 19337, 9010, 4914, 19365, 18631, 1386, 2883, 17936, 8143, 544, 12020, 15280, 1222, 4552, 17106, 1948, 3501, 2989, 17371, 9425, 16654, 3466, 6495, 290, 5995, 9932, 6512, 11207, 12916, 12127, 3535, 8658, 11201, 3406, 3556, 19862, 6311, 3661, 9787, 9059, 3752, 14346, 7685, 6115, 8599, 18541, 2559, 12652, 12785, 10099, 5636, 13770, 11449, 9645, 15364, 12841, 14997, 11325, 18751, 7878, 14274, 9388, 4867, 4248, 353, 4954, 14210, 11205, 12085, 4932, 5865, 11648, 2180, 6991, 13654, 18740, 15720, 5432, 13292, 18103, 19455, 1401, 14161, 9733, 16169, 17778, 217, 8579, 1742, 942, 8950, 8454, 14705, 5151, 4663, 17297, 17704, 11702, 11683, 16504, 2390, 9429, 13196, 17756, 11834, 14281, 19192, 2888, 17169, 9134, 10772, 4807, 8706, 9399, 16140, 15479, 707, 3536, 17122, 6189, 92, 6750, 11993, 8158, 6947, 10391, 1660, 2413, 13147, 13597, 15093, 14604, 1329, 2801, 689, 850, 15899, 16301, 12759, 6186, 627, 18151, 14472, 18987, 14065, 14593, 29, 12632, 9424, 7394, 18152, 14612, 5056, 19394, 15286, 12796, 15539, 12187, 5767, 19006, 4500, 2881, 12713, 5131, 12055, 3737, 6225, 6431, 4465, 19451, 5555, 17867, 11365, 15303, 13337, 6855, 3006, 7638, 6647, 15428, 7297, 18857, 16701, 18781, 12564, 16207, 17859, 16574, 17862, 6378, 7183, 16707, 5974, 12658, 11054, 13995, 11417, 13713, 4948, 6615, 8397, 18067, 5686, 3895, 6570, 11035, 3559, 3589, 13914, 12693, 13377, 668, 5595, 10546, 12719, 4686, 8775, 5189, 9788, 3731, 2255, 17083, 12995, 14527, 7275, 19528, 15497, 11612, 19797, 12928, 3765, 12000, 8774, 17019, 7347, 11883, 18265, 16963, 18805, 12133, 5424, 9983, 7029, 4836, 505, 4183, 48, 6305, 19156, 18044, 13908, 7576, 8081, 11699, 8674, 12616, 9143, 14787, 10330, 3630, 8112, 4970, 14462, 6434, 17053, 15310, 7952, 18036, 1841, 6661, 3368, 5962, 14490, 19466, 14213, 17827, 3478, 17204, 6499, 16599, 10308, 7298, 8141, 2983, 1643, 12888, 18749, 3718, 7446, 852, 10344, 10233, 8910, 17472, 1495, 17631, 3733, 15180, 1587, 12679, 16753, 6394, 485, 1004, 8892, 10194, 9736, 11613, 8198, 3568, 13312, 7641, 7528, 11472, 12403, 12172, 13103, 11579, 286, 17464, 10237, 17972, 10458, 12148, 10983, 12458, 18472, 15942, 3197, 5291, 15221, 10964, 7958, 7640, 15726, 4495, 7241, 16896, 13038, 1097, 13730, 4888, 12586, 19560, 5652, 4080, 6175, 6242, 651, 5490, 2250, 2484, 9725, 18713, 19543, 5697, 6756, 14934, 16814, 17531, 15640, 5040, 14539, 19207, 16811, 17525, 15012, 13957, 18913, 10033, 2870, 2816, 17894, 11611, 8837, 15846, 1562, 9450, 13964, 1035, 5188, 15595, 12817, 8743, 18183, 14554, 3799, 5296, 16242, 6547, 16318, 15643, 19390, 10953, 17279, 6047, 19168, 17322, 14869, 13057, 7866, 15390, 13565, 3849, 4341, 11085, 14642, 2613, 8221, 13997, 9418, 12164, 394, 6529, 6940, 14698, 8739, 15698, 1518, 5075, 12745, 10551, 1477, 1397, 8171, 2674, 1516, 4938, 8580, 1343, 10313, 14283, 15709, 17482, 3567, 3214, 2553, 958, 1788, 16428, 1998, 2058, 5759, 928, 6103, 5340, 18920, 18516, 14478, 7339, 17928, 18144, 6293, 19379, 19539, 9269, 4094, 9462, 19463, 10514, 18714, 1305, 8957, 100, 16993, 10298, 6642, 2467, 13240, 8821, 5489, 4202, 2552, 4802, 8282, 4567, 1117, 18148, 13316, 6269, 5989, 11556, 13123, 11583, 12541, 19958, 11175, 200, 12924, 6607, 18047, 13096, 14313, 8909, 11807, 12951, 4793, 9854, 650, 4956, 1803, 2025, 6521, 11960, 10588, 15719, 19835, 5080, 16570, 13175, 2812, 1547, 10610, 6894, 11231, 16115, 12215, 2502, 1665, 18013, 6803, 19147, 14100, 10920, 7447, 15523, 16392, 13928, 10579, 4831, 14460, 4286, 5239, 17710, 8445, 19977, 8002, 10782, 6140, 3490, 6813, 3193, 14295, 16272, 7875, 7511, 13419, 7757, 13137, 4197, 18795, 16513, 14343, 10656, 2544, 950, 1582, 18276, 9119, 999, 8723, 12075, 11609, 11753, 1183, 8341, 8990, 13061, 10927, 17899, 2039, 16980, 14567, 932, 12343, 17854, 9843, 18764, 3798, 2680, 9015, 18042, 19461, 16837, 14562, 8264, 12726, 11787, 12362, 16790, 18107, 15360, 10171, 3328, 827, 9922, 2532, 4318, 9185, 2358, 16677, 10086, 18761, 5505, 2076, 17676, 4784, 17877, 7996, 4008, 10618, 4955, 12232, 5526, 3346, 3382, 3684, 8922, 15958, 6248, 10203, 6328, 4140, 7563, 17577, 5137, 11475, 2670, 16854, 17208, 9502, 13834, 5030, 1189, 14664, 17539, 12532, 7337, 3322, 149, 11469, 12819, 14782, 8285, 2324, 14637, 13852, 12457, 1362, 14020, 1108, 11587, 19934, 17800, 9686, 19775, 3452, 12234, 6685, 14138, 7115, 9171, 7999, 4522, 15413, 18187, 17356, 14252, 7375, 19728, 15128, 9444, 17387, 2806, 6641, 16036, 12706, 2387, 18841, 9772, 18232, 17434, 8986, 1094, 202, 58, 7206, 9917, 5997, 9666, 9213, 8028, 7205, 9144, 18317, 1687, 17361, 11305, 8013, 11558, 2616, 17621, 10011, 18983, 12355, 6243, 3030, 2831, 7095, 3538, 334, 3003, 9994, 17174, 3634, 9759, 4184, 12111, 5582, 17354, 9833, 13793, 15265, 3587, 7552, 11560, 16913, 10743, 7526, 10693, 7765, 5583, 16231, 16774, 17695, 1993, 17038, 8747, 19424, 10809, 19658, 14805, 7421, 16084, 12008, 16380, 8210, 3069, 2759, 2469, 7720, 17980, 4513, 6215, 19381, 10304, 17559, 11876, 15613, 14596, 6643, 7781, 18423, 10593, 15777, 14545, 3898, 17342, 5187, 12174, 18277, 12501, 19396, 15741, 6025, 6557, 781, 5164, 16972, 2627, 8217, 17747, 6021, 12400, 16696, 6218, 12115, 8476, 3199, 16167, 13004, 14004, 15729, 4115, 14367, 8399, 15725, 6841, 19080, 5067, 1863, 5207, 18469, 14935, 1145, 4009, 16613, 12993, 1149, 13962, 18449, 2047, 12090, 8103, 1731, 3128, 9893, 9470, 14072, 8500, 8046, 10520, 3408, 13006, 10094, 16415, 10644, 4766, 10739, 3639, 17865, 7614, 14043, 5317, 2092, 13476, 7286, 16919, 1127, 12332, 18601, 17455, 10399, 3171, 1154, 5092, 3513, 6997, 10890, 16320, 1860, 5638, 3294, 15872, 11706, 4245, 16757, 8542, 13369, 4021, 18788, 6899, 19617, 15059, 7843, 11056, 12910, 747, 11283, 18328, 4320, 5905, 11958, 15436, 12100, 12990, 18379, 4501, 4045, 12141, 15866, 3053, 5257, 13627, 5302, 16974, 2566, 18188, 4587, 9319, 14091, 6193, 6982, 14829, 12392, 5869, 1927, 18715, 2085, 14360, 15090, 7712, 15025, 4599, 1048, 487, 1139, 2367, 11230, 14756, 4108, 5667, 14222, 18475, 597, 14544, 7141, 2570, 5138, 4368, 7841, 19285, 5648, 17935, 13934, 4138, 16682, 11734, 7285, 12356, 13122, 11351, 13212, 5816, 3681, 15419, 11203, 3822, 3926, 7514, 5099, 15773, 18951, 9885, 9209, 14834, 1493, 6033, 11830, 3093, 3011, 11527, 11345, 7768, 14375, 1892, 12257, 1336, 1533, 1549, 2907, 11053, 12816, 14, 5123, 2792, 12201, 5753, 18773, 14135, 8823, 11775, 5567, 10142, 16154, 4198, 17851, 6829, 17926, 16443, 19510, 1707, 14376, 12607, 14630, 7022, 16752, 2986, 10941, 12456, 14397, 4896, 17648, 8736, 12863, 18747, 8412, 12500, 4694, 9412, 5320, 1412, 19895, 10204, 1541, 4166, 14024, 2365, 16456, 1729, 5867, 14042, 16233, 14317, 9422, 5908, 4618, 10773, 11836, 8301, 4181, 11926, 11400, 19567, 9867, 14636, 18205, 19452, 17985, 3113, 2334, 6024, 9782, 3861, 260, 19402, 10577, 8959, 6489, 5944, 16299, 15801, 19829, 10597, 12134, 14826, 1759, 10339, 11145, 3671, 14815, 18178, 6139, 7518, 10648, 8630, 12475, 7235, 12957, 3742, 11093, 16177, 15089, 601, 5312, 12492, 16039, 10943, 6294, 5521, 9913, 4672, 489, 12304, 13574, 4371, 15590, 2809, 2629, 9443, 14589, 4406, 9682, 12686, 8337, 12021, 8641, 907, 11082, 7613, 10266, 13719, 287, 684, 17632, 18555, 1831, 8827, 7448, 17441, 11379, 15481, 13248, 18617, 15451, 12030, 17275, 10085, 6281, 8818, 2028, 4170, 6852, 18866, 1049, 14798, 9094, 17585, 5676, 385, 14102, 8365, 1089, 18061, 3219, 18540, 4173, 15036, 14268, 11289, 6011, 13183, 5166, 10312, 12599, 18313, 14866, 10214, 10854, 1970, 11106, 6795, 3086, 14843, 19286, 7598, 9619, 876, 18569, 537, 3864, 12453, 14187, 13555, 17454, 10710, 1825, 7174, 1438, 16700, 15182, 6377, 18684, 13153, 1056, 8135, 3961, 6112, 13864, 8653, 14029, 4564, 4060, 14759, 5109, 9767, 19852, 12167, 5196, 14623, 1891, 18392, 2132, 6236, 15716, 9836, 3957, 16187, 19236, 6107, 9580, 18100, 3102, 7605, 2813, 4436, 5623], "code": ["public AttachResult attach(String namespace, String name, boolean stdin)\r\n      throws ApiException, IOException {\r\n    return attach(namespace, name, null, stdin, false);\r\n  }", "public OvhDisclaimer service_domain_domainName_disclaimer_GET(String service, String domainName) throws IOException {\n\t\tString qPath = \"/email/pro/{service}/domain/{domainName}/disclaimer\";\n\t\tStringBuilder sb = path(qPath, service, domainName);\n\t\tString resp = exec(qPath, \"GET\", sb.toString(), null);\n\t\treturn convertTo(resp, OvhDisclaimer.class);\n\t}", "public <T extends Permissionable & DiscordEntity> ServerChannelUpdater removePermissionOverwrite(T permissionable) {\n        delegate.removePermissionOverwrite(permissionable);\n        return this;\n    }", "    protected JPopupMenu createContextMenu() {\n\tJPopupMenu pop = new JPopupMenu();\n\n\tpop.add(new RemoveFromVisualisationAction());\n\tpop.addSeparator();\n\tpop.add(new AddToAllSubgroupsAction());\n\tpop.add(new RemoveFromAllSubgroupsAction());\n\treturn pop;\n    }\n", "    public T previous() {\n        if (DEBUG)\n            Groove.message(\"History.previous() at index \"+index);\n        if (hasPrevious()) {\n            index--;\n            return log.get(index);\n        } else\n            throw new NoSuchElementException(\"No previous element in history\");\n    }\n", "public void setReservedInstancesOfferingIds(java.util.Collection<String> reservedInstancesOfferingIds) {\n        if (reservedInstancesOfferingIds == null) {\n            this.reservedInstancesOfferingIds = null;\n            return;\n        }\n\n        this.reservedInstancesOfferingIds = new com.amazonaws.internal.SdkInternalList<String>(reservedInstancesOfferingIds);\n    }", "    public void setSearchLocations(Set searchLocations) {\n        this.searchLocations = new HashSet(searchLocations);\n\n        //always add the base directory\n        if (baseDirectory != null) {\n            this.searchLocations.add(baseDirectory);\n        }\n    }\n", "public void removeListener(final TrainerListener trainerListener){\n  if (listeners != null) {\n    listeners.remove(trainerListener);\n  }\n}\n", "public Person getMother() {\n        if (!isSet()) {\n            return new Person();\n        }\n        final Person mother = (Person) find(getToString());\n        if (mother == null) {\n            return new Person();\n        } else {\n            return mother;\n        }\n    }", "public UnsignedLong subtract(long decrement){\n  if (getValue() >= 0 && getValue() > decrement)   return valueOf(getValue() - decrement);\n  BigInteger bi=bigIntegerValue();\n  bi=bi.subtract(BigInteger.valueOf(decrement));\n  return new UnsignedLong(bi);\n}\n", "    public void uncaughtException(Thread thread, Throwable e) {\n        String message = String.format(\n                \"Uncaught exception in thread '%s'. Processing is unstable \"\n                + \"and as a result, the JVM will be terminated in 5 seconds\", \n                thread);\n        log.fatal(message, e);\n        System.err.println(message);\n        e.printStackTrace(System.err);\n        new DeferredSystemExit(1, delay);\n    }\n", "@SuppressWarnings(\"ConstantConditions\")\n  private List<JBBPAbstractField> parseStruct(final JBBPBitInputStream inStream, final JBBPIntCounter positionAtCompiledBlock, final JBBPVarFieldProcessor varFieldProcessor, final JBBPNamedNumericFieldMap namedNumericFieldMap, final JBBPIntCounter positionAtNamedFieldList, final JBBPIntCounter positionAtVarLengthProcessors, final boolean skipStructureFields) throws IOException {\n    final List<JBBPAbstractField> structureFields = skipStructureFields ? null : new ArrayList<>();\n    final byte[] compiled = this.compiledBlock.getCompiledData();\n\n    boolean endStructureNotMet = true;\n\n    while (endStructureNotMet && positionAtCompiledBlock.get() < compiled.length) {\n      if (!inStream.hasAvailableData() && (flags & FLAG_SKIP_REMAINING_FIELDS_IF_EOF) != 0) {\n        // Break reading because the ignore flag for EOF has been set\n        break;\n      }\n\n      final int c = compiled[positionAtCompiledBlock.getAndIncrement()] & 0xFF;\n      final boolean wideCode = (c & JBBPCompiler.FLAG_WIDE) != 0;\n      final int ec = wideCode ? compiled[positionAtCompiledBlock.getAndIncrement()] & 0xFF : 0;\n      final boolean extraFieldNumAsExpr = (ec & JBBPCompiler.EXT_FLAG_EXTRA_AS_EXPRESSION) != 0;\n      final int code = (ec << 8) | c;\n      final boolean fieldTypeDiff = (ec & JBBPCompiler.EXT_FLAG_EXTRA_DIFF_TYPE) != 0;\n\n      final JBBPNamedFieldInfo name = (code & JBBPCompiler.FLAG_NAMED) == 0 ? null : compiledBlock.getNamedFields()[positionAtNamedFieldList.getAndIncrement()];\n      final JBBPByteOrder byteOrder = (code & JBBPCompiler.FLAG_LITTLE_ENDIAN) == 0 ? JBBPByteOrder.BIG_ENDIAN : JBBPByteOrder.LITTLE_ENDIAN;\n\n      final boolean resultNotIgnored = !skipStructureFields;\n\n      final int extraFieldNumExprResult;\n      if (extraFieldNumAsExpr) {\n        final JBBPIntegerValueEvaluator evaluator = this.compiledBlock.getArraySizeEvaluators()[positionAtVarLengthProcessors.getAndIncrement()];\n        int resultOfExpression;\n        if (resultNotIgnored) {\n          resultOfExpression = evaluator.eval(inStream, positionAtCompiledBlock.get(), this.compiledBlock, namedNumericFieldMap);\n          if ((this.flags & FLAG_NEGATIVE_EXPRESSION_RESULT_AS_ZERO) != 0) {\n            resultOfExpression = Math.max(resultOfExpression, 0);\n          }\n        } else {\n          resultOfExpression = 0;\n        }\n        extraFieldNumExprResult = resultOfExpression;\n      } else {\n        extraFieldNumExprResult = 0;\n      }\n\n      final boolean wholeStreamArray;\n      final int arrayLength;\n      final int packedArraySizeOffset;\n      switch (code & (JBBPCompiler.FLAG_ARRAY | (JBBPCompiler.EXT_FLAG_EXPRESSION_OR_WHOLESTREAM << 8))) {\n        case JBBPCompiler.FLAG_ARRAY: {\n          final int pos = positionAtCompiledBlock.get();\n          arrayLength = JBBPUtils.unpackInt(compiled, positionAtCompiledBlock);\n          packedArraySizeOffset = positionAtCompiledBlock.get() - pos;\n          wholeStreamArray = false;\n        }\n        break;\n        case (JBBPCompiler.EXT_FLAG_EXPRESSION_OR_WHOLESTREAM << 8): {\n          wholeStreamArray = resultNotIgnored;\n          packedArraySizeOffset = 0;\n          arrayLength = 0;\n        }\n        break;\n        case JBBPCompiler.FLAG_ARRAY | (JBBPCompiler.EXT_FLAG_EXPRESSION_OR_WHOLESTREAM << 8): {\n          final JBBPIntegerValueEvaluator evaluator = this.compiledBlock.getArraySizeEvaluators()[positionAtVarLengthProcessors.getAndIncrement()];\n          int resultOfExpression;\n          if (resultNotIgnored) {\n            resultOfExpression = evaluator.eval(inStream, positionAtCompiledBlock.get(), this.compiledBlock, namedNumericFieldMap);\n            if ((this.flags & FLAG_NEGATIVE_EXPRESSION_RESULT_AS_ZERO) != 0) {\n              resultOfExpression = Math.max(resultOfExpression, 0);\n            }\n          } else {\n            resultOfExpression = 0;\n          }\n          arrayLength = resultOfExpression;\n          packedArraySizeOffset = 0;\n          assertArrayLength(arrayLength, name);\n          wholeStreamArray = false;\n        }\n        break;\n        default: {\n          // it is not an array, just a single field\n          packedArraySizeOffset = 0;\n          wholeStreamArray = false;\n          arrayLength = -1;\n        }\n        break;\n      }\n\n      JBBPAbstractField singleAtomicField = null;\n      try {\n        switch (code & 0xF) {\n          case JBBPCompiler.CODE_RESET_COUNTER: {\n            if (resultNotIgnored) {\n              inStream.resetCounter();\n            }\n          }\n          break;\n          case JBBPCompiler.CODE_ALIGN: {\n            final int alignValue = extraFieldNumAsExpr ? extraFieldNumExprResult : JBBPUtils.unpackInt(compiled, positionAtCompiledBlock);\n            if (resultNotIgnored) {\n              inStream.align(alignValue);\n            }\n          }\n          break;\n          case JBBPCompiler.CODE_SKIP: {\n            final int skipByteNumber = extraFieldNumAsExpr ? extraFieldNumExprResult : JBBPUtils.unpackInt(compiled, positionAtCompiledBlock);\n            if (resultNotIgnored) {\n              if (fieldTypeDiff) {\n                singleAtomicField = new JBBPFieldInt(name, skipByteNumber);\n              } else {\n                if (skipByteNumber > 0) {\n                  final long skippedBytes = inStream.skip(skipByteNumber);\n                  if (skippedBytes != skipByteNumber) {\n                    throw new EOFException(\"Can't skip \" + skipByteNumber + \" byte(s), skipped only \" + skippedBytes + \" byte(s)\");\n                  }\n                }\n              }\n            }\n          }\n          break;\n          case JBBPCompiler.CODE_BIT: {\n            final int numberOfBits = extraFieldNumAsExpr ? extraFieldNumExprResult : JBBPUtils.unpackInt(compiled, positionAtCompiledBlock);\n            if (resultNotIgnored) {\n              final JBBPBitNumber bitNumber = JBBPBitNumber.decode(numberOfBits);\n              if (arrayLength < 0) {\n                final int read = inStream.readBitField(bitNumber);\n                singleAtomicField = new JBBPFieldBit(name, read & 0xFF, bitNumber);\n              } else {\n                structureFields.add(new JBBPFieldArrayBit(name, inStream.readBitsArray(wholeStreamArray ? -1 : arrayLength, bitNumber), bitNumber));\n              }\n            }\n          }\n          break;\n          case JBBPCompiler.CODE_VAR: {\n            final int extraField = extraFieldNumAsExpr ? extraFieldNumExprResult : JBBPUtils.unpackInt(compiled, positionAtCompiledBlock);\n            if (resultNotIgnored) {\n              if (arrayLength < 0) {\n                singleAtomicField = varFieldProcessor.readVarField(inStream, name, extraField, byteOrder, namedNumericFieldMap);\n                JBBPUtils.assertNotNull(singleAtomicField, \"A Var processor must not return null as a result of a field reading\");\n                if (singleAtomicField instanceof JBBPAbstractArrayField) {\n                  throw new JBBPParsingException(\"A Var field processor has returned an array value instead of a field value [\" + name + ':' + extraField + ']');\n                }\n                if (singleAtomicField.getNameInfo() != name) {\n                  throw new JBBPParsingException(\"Detected wrong name for a read field , must be \" + name + \" but detected \" + singleAtomicField.getNameInfo() + ']');\n                }\n              } else {\n                final JBBPAbstractArrayField<? extends JBBPAbstractField> array = varFieldProcessor.readVarArray(inStream, wholeStreamArray ? -1 : arrayLength, name, extraField, byteOrder, namedNumericFieldMap);\n                JBBPUtils.assertNotNull(array, \"A Var processor must not return null as a result of an array field reading [\" + name + ':' + extraField + ']');\n                if (array.getNameInfo() != name) {\n                  throw new JBBPParsingException(\"Detected wrong name for a read field array, must be \" + name + \" but detected \" + array.getNameInfo() + ']');\n                }\n                structureFields.add(array);\n              }\n            }\n          }\n          break;\n          case JBBPCompiler.CODE_CUSTOMTYPE: {\n            final int extraData = extraFieldNumAsExpr ? extraFieldNumExprResult : JBBPUtils.unpackInt(compiled, positionAtCompiledBlock);\n            if (resultNotIgnored) {\n              final JBBPFieldTypeParameterContainer fieldTypeInfo = this.compiledBlock.getCustomTypeFields()[JBBPUtils.unpackInt(compiled, positionAtCompiledBlock)];\n              final JBBPAbstractField field = this.customFieldTypeProcessor.readCustomFieldType(inStream, this.bitOrder, this.flags, fieldTypeInfo, name, extraData, wholeStreamArray, arrayLength);\n              JBBPUtils.assertNotNull(field, \"Must not return null as read result\");\n\n              if (arrayLength < 0) {\n                singleAtomicField = field;\n              } else {\n                structureFields.add(field);\n              }\n            }\n          }\n          break;\n          case JBBPCompiler.CODE_BYTE: {\n            if (resultNotIgnored) {\n              if (arrayLength < 0) {\n                singleAtomicField = new JBBPFieldByte(name, (byte) inStream.readByte());\n              } else {\n                structureFields.add(new JBBPFieldArrayByte(name, inStream.readByteArray(wholeStreamArray ? -1 : arrayLength, byteOrder)));\n              }\n            }\n          }\n          break;\n          case JBBPCompiler.CODE_UBYTE: {\n            if (resultNotIgnored) {\n              if (arrayLength < 0) {\n                singleAtomicField = new JBBPFieldUByte(name, (byte) inStream.readByte());\n              } else {\n                structureFields.add(new JBBPFieldArrayUByte(name, inStream.readByteArray(wholeStreamArray ? -1 : arrayLength, byteOrder)));\n              }\n            }\n          }\n          break;\n          case JBBPCompiler.CODE_BOOL: {\n            if (resultNotIgnored) {\n              if (arrayLength < 0) {\n                singleAtomicField = fieldTypeDiff ? new JBBPFieldString(name, inStream.readString(byteOrder)) : new JBBPFieldBoolean(name, inStream.readBoolean());\n              } else {\n                structureFields.add(fieldTypeDiff ?\n                        new JBBPFieldArrayString(name, inStream.readStringArray(wholeStreamArray ? -1 : arrayLength, byteOrder)) :\n                        new JBBPFieldArrayBoolean(name, inStream.readBoolArray(wholeStreamArray ? -1 : arrayLength))\n                );\n              }\n            }\n          }\n          break;\n          case JBBPCompiler.CODE_INT: {\n            if (resultNotIgnored) {\n              if (arrayLength < 0) {\n                singleAtomicField = fieldTypeDiff ? new JBBPFieldFloat(name, inStream.readFloat(byteOrder)) : new JBBPFieldInt(name, inStream.readInt(byteOrder));\n              } else {\n                structureFields.add(fieldTypeDiff ?\n                    new JBBPFieldArrayFloat(name, inStream.readFloatArray(wholeStreamArray ? -1 : arrayLength, byteOrder)) :\n                    new JBBPFieldArrayInt(name, inStream.readIntArray(wholeStreamArray ? -1 : arrayLength, byteOrder))\n                );\n              }\n            }\n          }\n          break;\n          case JBBPCompiler.CODE_LONG: {\n            if (resultNotIgnored) {\n              if (arrayLength < 0) {\n                singleAtomicField = fieldTypeDiff ? new JBBPFieldDouble(name, inStream.readDouble(byteOrder)) : new JBBPFieldLong(name, inStream.readLong(byteOrder));\n              } else {\n                structureFields.add(fieldTypeDiff ?\n                    new JBBPFieldArrayDouble(name, inStream.readDoubleArray(wholeStreamArray ? -1 : arrayLength, byteOrder)) :\n                    new JBBPFieldArrayLong(name, inStream.readLongArray(wholeStreamArray ? -1 : arrayLength, byteOrder))\n                );\n              }\n            }\n          }\n          break;\n          case JBBPCompiler.CODE_SHORT: {\n            if (resultNotIgnored) {\n              if (arrayLength < 0) {\n                final int value = inStream.readUnsignedShort(byteOrder);\n                singleAtomicField = new JBBPFieldShort(name, (short) value);\n              } else {\n                structureFields.add(new JBBPFieldArrayShort(name, inStream.readShortArray(wholeStreamArray ? -1 : arrayLength, byteOrder)));\n              }\n            }\n          }\n          break;\n          case JBBPCompiler.CODE_USHORT: {\n            if (resultNotIgnored) {\n              if (arrayLength < 0) {\n                final int value = inStream.readUnsignedShort(byteOrder);\n                singleAtomicField = new JBBPFieldUShort(name, (short) value);\n              } else {\n                structureFields.add(new JBBPFieldArrayUShort(name, inStream.readShortArray(wholeStreamArray ? -1 : arrayLength, byteOrder)));\n              }\n            }\n          }\n          break;\n          case JBBPCompiler.CODE_STRUCT_START: {\n            if (arrayLength < 0) {\n              final List<JBBPAbstractField> structFields = parseStruct(inStream, positionAtCompiledBlock, varFieldProcessor, namedNumericFieldMap, positionAtNamedFieldList, positionAtVarLengthProcessors, skipStructureFields);\n              // skip offset\n              JBBPUtils.unpackInt(compiled, positionAtCompiledBlock);\n              if (resultNotIgnored) {\n                structureFields.add(new JBBPFieldStruct(name, structFields.toArray(ARRAY_FIELD_EMPTY)));\n              }\n            } else {\n              final int nameFieldCurrent = positionAtNamedFieldList.get();\n              final int varLenProcCurrent = positionAtVarLengthProcessors.get();\n\n              final JBBPFieldStruct[] result;\n              if (resultNotIgnored) {\n                if (wholeStreamArray) {\n                  // read till the stream end\n                  final List<JBBPFieldStruct> list = new ArrayList<>();\n                  while (inStream.hasAvailableData()) {\n                    positionAtNamedFieldList.set(nameFieldCurrent);\n                    positionAtVarLengthProcessors.set(varLenProcCurrent);\n\n                    final List<JBBPAbstractField> fieldsForStruct = parseStruct(inStream, positionAtCompiledBlock, varFieldProcessor, namedNumericFieldMap, positionAtNamedFieldList, positionAtVarLengthProcessors, skipStructureFields);\n                    list.add(new JBBPFieldStruct(name, fieldsForStruct));\n\n                    final int structStart = JBBPUtils.unpackInt(compiled, positionAtCompiledBlock);\n\n                    if (inStream.hasAvailableData()) {\n                      positionAtCompiledBlock.set(structStart + (wideCode ? 2 : 1));\n                    }\n                  }\n\n                  result = list.isEmpty() ? EMPTY_STRUCT_ARRAY : list.toArray(EMPTY_STRUCT_ARRAY);\n                } else {\n                  // read number of items\n                  if (arrayLength == 0) {\n                    // skip the structure\n                    result = EMPTY_STRUCT_ARRAY;\n                    parseStruct(inStream, positionAtCompiledBlock, varFieldProcessor, namedNumericFieldMap, positionAtNamedFieldList, positionAtVarLengthProcessors, true);\n                    JBBPUtils.unpackInt(compiled, positionAtCompiledBlock);\n                  } else {\n                    result = new JBBPFieldStruct[arrayLength];\n                    for (int i = 0; i < arrayLength; i++) {\n\n                      final List<JBBPAbstractField> fieldsForStruct = parseStruct(inStream, positionAtCompiledBlock, varFieldProcessor, namedNumericFieldMap, positionAtNamedFieldList, positionAtVarLengthProcessors, skipStructureFields);\n                      final int structBodyStart = JBBPUtils.unpackInt(compiled, positionAtCompiledBlock);\n\n                      result[i] = new JBBPFieldStruct(name, fieldsForStruct);\n\n                      if (i < arrayLength - 1) {\n                        // not the last\n                        positionAtNamedFieldList.set(nameFieldCurrent);\n                        positionAtVarLengthProcessors.set(varLenProcCurrent);\n                        positionAtCompiledBlock.set(structBodyStart + packedArraySizeOffset + (wideCode ? 2 : 1));\n                      }\n                    }\n                  }\n                }\n\n                if (result != null) {\n                  structureFields.add(new JBBPFieldArrayStruct(name, result));\n                }\n              } else {\n                parseStruct(inStream, positionAtCompiledBlock, varFieldProcessor, namedNumericFieldMap, positionAtNamedFieldList, positionAtVarLengthProcessors, skipStructureFields);\n                JBBPUtils.unpackInt(compiled, positionAtCompiledBlock);\n              }\n            }\n          }\n          break;\n          case JBBPCompiler.CODE_STRUCT_END: {\n            // we just left the method and the caller must process the structure offset start address for the structure\n            endStructureNotMet = false;\n          }\n          break;\n          default:\n            throw new Error(\"Detected unexpected field type! Contact developer! [\" + code + ']');\n        }\n      } catch (IOException ex) {\n        if (name == null) {\n          throw ex;\n        } else {\n          throw new JBBPParsingException(\"Can't parse field '\" + name.getFieldPath() + \"' for IOException\", ex);\n        }\n      }\n\n      if (singleAtomicField != null) {\n        structureFields.add(singleAtomicField);\n        if (namedNumericFieldMap != null && singleAtomicField instanceof JBBPNumericField && name != null) {\n          namedNumericFieldMap.putField((JBBPNumericField) singleAtomicField);\n        }\n      }\n\n    }\n\n    return structureFields;\n  }", "public void addTunerConfigurations ( List < TunerConfiguration > configs ) { for ( TunerConfiguration config : configs ) { addTunerConfiguration ( config ) ; } }", "public static <T>ObjectName registerMBean(MBeanServer mbeanSrv,@Nullable String gridName,@Nullable String grp,String name,T impl,@Nullable Class<T> itf) throws JMException {\n  assert mbeanSrv != null;\n  assert name != null;\n  assert itf != null;\n  DynamicMBean mbean=new IgniteStandardMXBean(impl,itf);\n  mbean.getMBeanInfo();\n  return mbeanSrv.registerMBean(mbean,makeMBeanName(gridName,grp,name)).getObjectName();\n}\n", "public static Object extractInnerConnectionFromC3P0(Object pooledConnection) throws IOException {\n  return extractInnerConnectionFromPooledConnection(pooledConnection,C3P0_INNER_CONNECTION_VARNAME);\n}\n", "private static List<String> parsePackageList(String packages){\n  if (packages == null) {\n    return new ArrayList<>();\n  }\n else {\n    return Arrays.asList(packages.split(\":\"));\n  }\n}\n", "public Shape createArrowRight ( final double x , final double y , final double w , final double h ) { path . reset ( ) ; path . moveTo ( x , y ) ; path . lineTo ( x + w , y + h / NUM_ ) ; path . lineTo ( x , y + h ) ; path . closePath ( ) ; return path ; ", "public String parseNext() {\n        StringBuilder result = new StringBuilder();\n\n        if (signature.startsWith(\"[\")) {\n            int dimensions = 0;\n            do {\n                ++dimensions;\n                signature = signature.substring(1);\n            } while (signature.charAt(0) == '[');\n            result.append(parseNext());\n\n            while (dimensions-- > 0) {\n                result.append(\"[]\");\n            }\n        } else if (signature.startsWith(\"L\")) {\n            int semi = signature.indexOf(';');\n            if (semi < 0) {\n                throw new IllegalStateException(\"missing semicolon in signature \" + signature);\n            }\n            result.append(signature.substring(1, semi).replace('/', '.'));\n            signature = signature.substring(semi + 1);\n        } else {\n            switch (signature.charAt(0)) {\n            case 'B':\n                result.append(\"byte\");\n                break;\n            case 'C':\n                result.append(\"char\");\n                break;\n            case 'D':\n                result.append(\"double\");\n                break;\n            case 'F':\n                result.append(\"float\");\n                break;\n            case 'I':\n                result.append(\"int\");\n                break;\n            case 'J':\n                result.append(\"long\");\n                break;\n            case 'S':\n                result.append(\"short\");\n                break;\n            case 'Z':\n                result.append(\"boolean\");\n                break;\n            case 'V':\n                result.append(\"void\");\n                break;\n            default:\n                throw new IllegalArgumentException(\"bad signature \" + signature);\n            }\n            skip();\n        }\n\n        return result.toString();\n    }", "public static void showLong ( Context context , String text ) { Assert . notNull ( context , STR_ ) ; safeShow ( context , text , Toast . LENGTH_LONG ) ; }", "    public void generateInstructions(CodeGenerator codeGen) {\n\texpr.getOperand().generateInstructions(codeGen);\n    }\n", "@Override\n    public GetDirectoryResult getDirectory(GetDirectoryRequest request) {\n        request = beforeClientExecution(request);\n        return executeGetDirectory(request);\n    }", "public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { request . getSession ( ) . setAttribute ( STR_ , STR_ ) ; response . sendRedirect ( STR_ ) ; return ; }", "public void sendEOLMessage(int partitionId) {\n        final long initiatorHSId = m_cartographer.getHSIdForMaster(partitionId);\n        Iv2EndOfLogMessage message = new Iv2EndOfLogMessage(partitionId);\n        m_mailbox.send(initiatorHSId, message);\n    }", "private static boolean askLayout ( final JFrame parent , final ZyGraph graph ) { if ( graph . visibleNodeCount ( ) >= graph . getSettings ( ) . getLayoutSettings ( ) . getLayoutCalculationTimeWarningThreshold ( ) ) { return JOptionPane . YES_OPTION == CMessageBox . showYesNoQuestion ( parent , STR_ ) ; } return BOOL_ ; }", "private static IAbstractNode convertAnd ( final CommonTree ast ) throws RecognitionException { final List < IAbstractNode > children = new ArrayList < IAbstractNode > ( ) ; for ( final Object childObject : ast . getChildren ( ) ) { children . add ( convert ( ( CommonTree ) childObject ) ) ; } return new CAbstractAndExpression ( children ) ; }", "public int size(){\n  return eventQueue.size();\n}\n", "public void clear(){\n  if (mData.size() > 0) {\n    int size=mData.size();\n    mData.clear();\n    mGroups.clear();\n    if (mNotifyOnChange)     notifyItemRangeRemoved(0,size);\n  }\n}\n", "    public HTTPFileArg getHTTPFileArg(int row) {\n        HTTPFileArg file = null;\n        if (row < getHTTPFileArgCount()) {\n            file = (HTTPFileArg) getHTTPFileArgsCollection().get(row).getObjectValue();\n        }\n        return file;\n    }\n", "\tprivate void readStationList() throws InterruptedException {\n\t\tFile dir = new File(dataDir);\n\t\twhile (!dir.exists()) {\n\t\t\tThread.sleep(5000);\n\t\t\tSystem.out.println(\" waiting for data directory to be created\");\n\t\t}\n\t\tstationList = dir.list();\n\t}\n", "\tpublic void setSortAscending(Comparator sorter) {\n\t\tif (!Objects.equals(_sortAsc, sorter)) {\n\t\t\t_sortAsc = sorter;\n\t\t\tinvalidate();\n\t\t}\n\t}\n", "    public void result(List results) {\n        for (Object result : results) {\n            result((String) result);\n        }\n    }\n", "GroovyClassDoc [ ] ordinaryClasses ( ) ;", "public AggregationSet maxEntry ( String path ) { return add ( new MaxEntryAggregator ( ) . setPath ( path ) ) ; }", "private static List<Tag> toTags(\n      IntermediateParseResults intermediateResults, List<String> tagIdentifiers) {\n    if (tagIdentifiers.isEmpty()) {\n      return emptyList();\n    }\n\n    List<Tag> tags = new ArrayList<>(tagIdentifiers.size());\n    for (String tagIdentifier : tagIdentifiers) {\n      Tag tag = intermediateResults.getTag(tagIdentifier);\n      if (tag == null) {\n        throw new UnknownTagException(tagIdentifier);\n      }\n      tags.add(tag);\n    }\n    return tags;\n  }", "private void deleteComments ( SpanManager sm ) { int start = NUM_ ; while ( ( start = sm . indexOf ( STR_ , start ) ) != - NUM_ ) { int end = sm . indexOf ( STR_ , start + NUM_ ) + NUM_ ; if ( end == - NUM_ + NUM_ ) { end = sm . length ( ) ; } try { if ( ", "public static <K,T> Cache2kBuilder<K, T> of(Cache2kConfiguration<K, T> c) {\n    Cache2kBuilder<K,T> cb = new Cache2kBuilder<K, T>(c);\n    return cb;\n  }", "public java.util.List<String> getSetup() {\n        if (setup == null) {\n            setup = new com.amazonaws.internal.SdkInternalList<String>();\n        }\n        return setup;\n    }", "\tpublic boolean isNeg(int a){\n\t\tString aString =\"\"+a;\n\t\tString newString = \"\"+aString.charAt(0);\n\t\tif(newString.equals(\"-\")==true){\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n", "public static void configureSARLProject(IProject project, boolean addNatures,\n\t\t\tboolean configureJavaNature, boolean createFolders, IProgressMonitor monitor) {\n\t\ttry {\n\t\t\tfinal SubMonitor subMonitor = SubMonitor.convert(monitor, 11);\n\t\t\t// Add Natures", "    public boolean hasComponent(int blockId) {\n        for (int i = 0; i < length; i++) {\n            if (blockIdList[i] == blockId) {\n                return true;\n            }\n        }\n        return false;\n    }\n", "public String toString ( ) { return buf . toString ( ) ; }", "    public void run(){\n\t\tByteBuffer bb;\n\t\tbyte[] b;\n\t\ttry {\t\t\t\n\t\t\twhile(!stop){\n\t\t\t\tbb = fg.getFrame();\n\t\t\t\tb = new byte[bb.limit()];\n\t\t\t\tbb.get(b);\n\t\t\t\tprocessor.processImage(b);\n\t\t\t}\n\t\t} catch (V4L4JException e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.out.println(\"Failed to capture image\");\n\t\t\tJOptionPane.showMessageDialog(f, \n\t\t\t\t\t\"Failed to capture image:\\n\"+e.getMessage());\n\t\t} catch(Throwable t){\n\t\t\tt.printStackTrace();\n\t\t\tSystem.out.println(\"Failed to capture image\");\n\t\t\tJOptionPane.showMessageDialog(f, \n\t\t\t\t\t\"Failed to capture image:\\n\"+t.getMessage());\n\t\t}\n    }\n", "public static void loadAll ( final JFrame parent , final IDebugger debugger , final IAddress offset , final int size ) { checkArguments ( parent , debugger , offset ) ; final CDumpAllWaiter waiter = new CDumpAllWaiter ( debugger , offset , size ) ; CProgr", "public Element store(Object o){\n  return null;\n}\n", "protected abstract Promise < ResourceResponse , ResourceException > invokeRequest ( Context context , T request ) throws ResourceException ;", "    public void printStackTrace(java.io.PrintStream ps) {\n        super.printStackTrace(ps);\n        if (causeException != null) {\n            causeException.printStackTrace(ps);\n        }\n    }\n", "@Override public void postProcessDistances(double distances[]){\n  for (int i=0; i < distances.length; i++) {\n    distances[i]=Math.pow(distances[i],1 / m_Order);\n  }\n}\n", "public DocumentT findOneAndUpdate(final Bson filter,\n                                    final Bson update,\n                                    final RemoteFindOneAndModifyOptions options) {\n    return proxy.findOneAndUpdate(filter, update, options);\n  }", "public void destroy ( ) { super . destroy ( ) ; }", "public void testUnspecifiedProperties ( ) throws InterruptedException { NetworkClientFilter ncf = new NetworkClientFilter ( ) ; ncf . setTungstenSchema ( STR_ ) ; try { filterHelper . setContext ( replicatorContext ) ; filterHelper . setFilter ( ncf ) ; filterHelper . done ( ) ; fail ( STR_ ) ; } catch ( ReplicatorException e ) { logger . info ( STR_ + e ) ; } }", "private LogicalMetric extractMetric(Matcher tokenizedQuery,MetricDictionary metricDictionary) throws BadHavingException {\n  String metricName=tokenizedQuery.group(1);\n  LogicalMetric extractedMetric=metricDictionary.get(metricName);\n  if (extractedMetric == null) {\n    LOG.debug(HAVING_METRIC_UNDEFINED.logFormat(metricName));\n    throw new BadHavingException(HAVING_METRIC_UNDEFINED.logFormat(metricName));\n  }\n  return extractedMetric;\n}\n", "\tpublic void smoothlyZoomToSlideView() {\n\t\tVector3f loc = new Vector3f(-300f, -118f, -180f);\n\t\tVector3f position = new Vector3f(300f, -118f, -180f);\n\t\t//Quaternion rotation = new Quaternion().fromAngleAxis(FastMath.DEG_TO_RAD*90, Vector3f.UNIT_Y);\n\t\tcontinuousZoomTo(loc, position, 0.5f);\n\t}\n", "public void setValue(String name, BooleanAttribute attribute) {\n\t\tFormItem item = formWidget.getField(name);\n\t\tif (item != null) {\n\t\t\titem.setValue(attribute.getValue());\n\t\t}\n\t}", "@Override\n\tpublic void cacheResult(CPDefinitionGroupedEntry cpDefinitionGroupedEntry) {\n\t\tentityCache.putResult(CPDefinitionGroupedEntryModelImpl.ENTITY_CACHE_ENABLED,\n\t\t\tCPDefinitionGroupedEntryImpl.class,\n\t\t\tcpDefinitionGroupedEntry.getPrimaryKey(), cpDefinitionGroupedEntry);\n\n\t\tfinderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,\n\t\t\tnew Object[] {\n\t\t\t\tcpDefinitionGroupedEntry.getUuid(),\n\t\t\t\tcpDefinitionGroupedEntry.getGroupId()\n\t\t\t}, cpDefinitionGroupedEntry);\n\n\t\tfinderCache.putResult(FINDER_PATH_FETCH_BY_C_E,\n\t\t\tnew Object[] {\n\t\t\t\tcpDefinitionGroupedEntry.getCPDefinitionId(),\n\t\t\t\tcpDefinitionGroupedEntry.getEntryCProductId()\n\t\t\t}, cpDefinitionGroupedEntry);\n\n\t\tcpDefinitionGroupedEntry.resetOriginalValues();\n\t}", "public void removeBookmark ( final CCodeBookmark bookmark ) { Preconditions . checkNotNull ( bookmark , STR_ ) ; Preconditions . checkArgument ( m_bookmarks . remove ( bookmark ) , STR_ ) ; for ( final ICodeBookmarkManagerListener listener : m_listeners )", "public static List<Point> getPath (\n        TraversalPred tpred, Stepper stepper, Object trav, int longest,\n        int ax, int ay, int bx, int by, boolean partial)\n    {\n        Info info = new Info(tpred, trav, longest, bx, by);\n\n        // set up the starting node\n        Node s = info.getNode(ax, ay);\n        s.g = 0;\n        s.h = getDistanceEstimate(ax, ay, bx, by);\n        s.f = s.g + s.h;\n\n        // push starting node on the open list\n        info.open.add(s);\n        _considered = 1;\n\n        // track the best path\n        float bestdist = Float.MAX_VALUE;\n        Node bestpath = null;\n\n        // while there are more nodes on the open list\n        while (info.open.size() > 0) {\n\n            // pop the best node so far from open\n            Node n = info.open.first();\n            info.open.remove(n);\n\n            // if node is a goal node\n            if (n.x == bx && n.y == by) {\n                // construct and return the acceptable path\n                return getNodePath(n);\n\n            } else if (partial) {\n                float pathdist = MathUtil.distance(n.x, n.y, bx, by);\n                if (pathdist < bestdist) {\n                    bestdist = pathdist;\n                    bestpath = n;\n                }\n            }\n\n            // consider each successor of the node\n            stepper.init(info, n);\n            stepper.considerSteps(n.x, n.y);\n\n            // push the node on the closed list\n            n.closed = true;\n        }\n\n        // return the best path we could find if we were asked to do so\n        if (bestpath != null) {\n            return getNodePath(bestpath);\n        }\n\n        // no path found\n        return null;\n    }", "    public Attributes2Impl () {\n        // BEGIN android-added\n        declared = new boolean[0];\n        specified = new boolean[0];\n        // END android-added\n    }\n", "private int countChunks(int len){\n  int result=0;\n  if (len == 0)   return result;\n  if (readChunk != null) {\n    len-=Math.min(readChunk.remaining(),len);\n    result++;\n  }\n  if (len == 0)   return result;\n  if (!list.isEmpty()) {\n    Iterator<ByteBuffer> i=list.iterator();\n    while (len > 0 && i.hasNext()) {\n      ByteBuffer src=i.next();\n      len-=Math.min(src.remaining(),len);\n      result++;\n    }\n  }\n  if (len == 0)   return result;\n  if (writeChunk != null) {\n    result++;\n  }\n  return result;\n}\n", "public static ClassLoader bootCallerClassLoader(){\n  return BootstrapClassLoader.getBootstrapClassLoader();\n}\n", "void positionPopup() {\n\n        if (m_popup.isShowing()) {\n            int width = m_popup.getOffsetWidth();\n\n            int openerHeight = CmsDomUtil.getCurrentStyleInt(m_opener.getElement(), CmsDomUtil.Style.height);\n            int popupHeight = getPo", "public StreamingJsonBuilder ( Writer writer ) { this . writer = writer ; generator = JsonOutput . DEFAULT_GENERATOR ; }", "public static < T > Predicate < T > or ( final Collection < ? extends Predicate < T > > that ) { if ( that . size ( ) == NUM_ ) { return Iterables . getOnlyElement ( that ) ; } return new OrPredicate < > ( that ) ; }", "private boolean journalRebuildRequired(){\n  final int redundantOpCompactThreshold=2000;\n  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();\n}", "private Strategy getStrategy(final char f, final int width, final Calendar definingCalendar) {\n\t\tswitch (f) {\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalArgumentException(\"Format '\" + f + \"' not supported\");\n\t\t\tcase 'D':\n\t\t\t\treturn DAY_OF_YEAR_STRATEGY;\n\t\t\tcase 'E':\n\t\t\t\treturn getLocaleSpecificStrategy(Calendar.DAY_OF_WEEK, definingCalendar);\n\t\t\tcase 'F':\n\t\t\t\treturn DAY_OF_WEEK_IN_MONTH_STRATEGY;\n\t\t\tcase 'G':\n\t\t\t\treturn getLocaleSpecificStrategy(Calendar.ERA, definingCalendar);\n\t\t\tcase 'H': // Hour in day (0-23)\n\t\t\t\treturn HOUR_OF_DAY_STRATEGY;\n\t\t\tcase 'K': // Hour in am/pm (0-11)\n\t\t\t\treturn HOUR_STRATEGY;\n\t\t\tcase 'M':\n\t\t\t\treturn width >= 3 ? getLocaleSpecificStrategy(Calendar.MONTH, definingCalendar) : NUMBER_MONTH_STRATEGY;\n\t\t\tcase 'S':\n\t\t\t\treturn MILLISECOND_STRATEGY;\n\t\t\tcase 'W':\n\t\t\t\treturn WEEK_OF_MONTH_STRATEGY;\n\t\t\tcase 'a':\n\t\t\t\treturn getLocaleSpecificStrategy(Calendar.AM_PM, definingCalendar);\n\t\t\tcase 'd':\n\t\t\t\treturn DAY_OF_MONTH_STRATEGY;\n\t\t\tcase 'h': // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n\t\t\t\treturn HOUR12_STRATEGY;\n\t\t\tcase 'k': // Hour in day (1-24), i.e. midnight is 24, not 0\n\t\t\t\treturn HOUR24_OF_DAY_STRATEGY;\n\t\t\tcase 'm':\n\t\t\t\treturn MINUTE_STRATEGY;\n\t\t\tcase 's':\n\t\t\t\treturn SECOND_STRATEGY;\n\t\t\tcase 'u':\n\t\t\t\treturn DAY_OF_WEEK_STRATEGY;\n\t\t\tcase 'w':\n\t\t\t\treturn WEEK_OF_YEAR_STRATEGY;\n\t\t\tcase 'y':\n\t\t\tcase 'Y':\n\t\t\t\treturn width > 2 ? LITERAL_YEAR_STRATEGY : ABBREVIATED_YEAR_STRATEGY;\n\t\t\tcase 'X':\n\t\t\t\treturn ISO8601TimeZoneStrategy.getStrategy(width);\n\t\t\tcase 'Z':\n\t\t\t\tif (width == 2) {\n\t\t\t\t\treturn ISO8601TimeZoneStrategy.ISO_8601_3_STRATEGY;\n\t\t\t\t}\n\t\t\t\t//$FALL-THROUGH$\n\t\t\tcase 'z':\n\t\t\t\treturn getLocaleSpecificStrategy(Calendar.ZONE_OFFSET, definingCalendar);\n\t\t}\n\t}", "public void marshall(GetBackupPlanRequest getBackupPlanRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (getBackupPlanRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(getBackupPlanRequest.getBackupPlanId(), BACKUPPLANID_BINDING);\n            protocolMarshaller.marshall(getBackupPlanRequest.getVersionId(), VERSIONID_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public final native KeyMap propagate ( String key ) ;", "    public void setYear(TagContent year) throws TagFormatException {\n        if (year.getTextContent() == null\n                || !checkNumeric(year.getTextContent())\n                || (!checkMaxLength(year.getTextContent(), 4) && !checkMaxLength(\n                        year.getTextContent(), 5))) {\n            throw new TagFormatException();\n        }\n\n        id3.setYear(year.getTextContent());\n\n        (new TextFrameEncoding(id3v2, \"TYER\", year, use_compression)).write();\n    }\n", "private synchronized void ungetLogService() {\n        doWarnIfClosed = doDebug();\n        if (log != null) {\n            bc.ungetService(logSR);\n            logSR = null;\n            log = null;\n        }\n    }", "protected void assertSameScores(Query q1,Query q2) throws Exception {\n  assertSameSet(q1,q2);\n  assertSameScores(q1,q2,null);\n  int numFilters=TEST_NIGHTLY ? atLeast(10) : atLeast(3);\n  for (int i=0; i < numFilters; i++) {\n    Query filter=randomFilter();\n    assertSameScores(q1,q2,filter);\n    assertSameScores(filteredQuery(q1,filter),filteredQuery(q2,filter),null);\n  }\n}\n", "\tpublic int updatePstmt() {\n\t\ttry {\n\t\t\treturn pstmt.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn -1;\n\t}\n", "public void visitIincInsn ( int var , int increment ) { if ( mv != null ) { mv . visitIincInsn ( var , increment ) ; } }", "public static String arrayToString(float[] array,boolean breaks){\n  StringBuilder sb=new StringBuilder();\n  for (int x=0; x < array.length; x++) {\n    sb.append(x + \": \" + array[x]);\n    if (breaks) {\n      sb.append(\"\\n\");\n    }\n else {\n      if (x % 8 == 7) {\n        sb.append(\"\\n\");\n      }\n else {\n        sb.append(\"\\t\");\n      }\n    }\n  }\n  return sb.toString();\n}\n", "public void open ( ) throws IOException , UnsupportedAudioFileException ;", "public static String abbreviate(String str, int offset, int maxWidth) {\n      if (str == null) {\n          return null;\n      }\n      if (maxWidth < 4) {\n          throw new IllegalArgumentException(\"Minimum abbreviation width is 4\");\n      }\n      if (str.length() <= maxWidth) {\n          return str;\n      }\n      if (offset > str.length()) {\n          offset = str.length();\n      }\n      if ((str.length() - offset) < (maxWidth - 3)) {\n          offset = str.length() - (maxWidth - 3);\n      }\n      if (offset <= 4) {\n          return str.substring(0, maxWidth - 3) + \"...\";\n      }\n      if (maxWidth < 7) {\n          throw new IllegalArgumentException(\"Minimum abbreviation width with offset is 7\");\n      }\n      if ((offset + (maxWidth - 3)) < str.length()) {\n          return \"...\" + abbreviate(str.substring(offset), maxWidth - 3);\n      }\n      return \"...\" + str.substring(str.length() - (maxWidth - 3));\n  }", "public AccessPath appendFields(SootField[] apFields,Type[] apFieldTypes,boolean taintSubFields){\n  int offset=this.fields == null ? 0 : this.fields.length;\n  SootField[] fields=new SootField[offset + (apFields == null ? 0 : apFields.length)];\n  Type[] fieldTypes=new Type[offset + (apFields == null ? 0 : apFields.length)];\n  if (this.fields != null) {\n    System.arraycopy(this.fields,0,fields,0,this.fields.length);\n    System.arraycopy(this.fieldTypes,0,fieldTypes,0,this.fieldTypes.length);\n  }\n  if (apFields != null && apFields.length > 0) {\n    System.arraycopy(apFields,0,fields,offset,apFields.length);\n    System.arraycopy(apFieldTypes,0,fieldTypes,offset,apFieldTypes.length);\n  }\n  return new AccessPath(this.value,fields,baseType,fieldTypes,taintSubFields);\n}\n", "public static String readString(){\n  if (isEmpty())   throw new RuntimeException(\"Reading from empty input stream\");\n  StringBuilder sb=new StringBuilder();\n  while (!isEmpty()) {\n    char c=readChar();\n    sb.append(c);\n  }\n  return sb.toString();\n}\n", "public void writeToParcel(Parcel dest,int flags){\n  if (address != null) {\n    dest.writeByte((byte)1);\n    dest.writeByteArray(address.getAddress());\n    dest.writeInt(prefixLength);\n  }\n else {\n    dest.writeByte((byte)0);\n  }\n}\n", "\tpublic ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tif(!ActionsHelper.isAdmin(request)) {\n\t\t\treturn ActionsHelper.homepageForward();\n\t\t}\n        String stUserLogin = (String)request.getParameter(Params.USER_ADMIN.EDITED_USER_LOGIN);\n        request.setAttribute(Params.USER_ADMIN.EDITED_USER, Portal.getInstance().getUserService().getUser(stUserLogin));\n        return mapping.findForward(\"users.edit\");\n    }\t\n", "public AllianceIconsResponse getAlliancesAllianceIdIcons(Integer allianceId, String datasource, String ifNoneMatch)\n            throws ApiException {\n        ApiResponse<AllianceIconsResponse> resp = getAlliancesAllianceIdIconsWithHttpInfo(allianceId, datasource,\n                ifNoneMatch);\n        return resp.getData();\n    }", "private static <T>void assertCollectionEqualsNoOrder(Collection<T> expected,Collection<T> actual){\n  String msg=String.format(\"expected=%s, actual=%s\",expected.toString(),actual.toString());\n  assertEquals(msg,expected.size(),actual.size());\n  for (  T e : expected) {\n    if (!actual.contains(e)) {\n      msg=String.format(\"Expected element %s not found in \" + \"actual. expected=%s, actual=%s\",e,expected,actual);\n      fail(msg);\n    }\n  }\n}\n", "private Object getTraceable(Object d) throws ResourceException {\n        WSJdbcTracer tracer = new WSJdbcTracer(helper.getTracer(), helper.getPrintWriter(), d, type, null, true);\n\n        Set<Class<?>> classes = new HashSet<Class<?>>();\n        for (Class", "protected FileStore(DataHandler handler,String name,String mode){\n  this.handler=handler;\n  this.name=name;\n  try {\n    boolean exists=FileUtils.exists(name);\n    if (exists && !FileUtils.canWrite(name)) {\n      mode=\"r\";\n    }\n else {\n      FileUtils.createDirectories(FileUtils.getParent(name));\n    }\n    file=FileUtils.open(name,mode);\n    if (exists) {\n      fileLength=file.size();\n    }\n  }\n catch (  IOException e) {\n    throw DbException.convertIOException(e,\"name: \" + name + \" mode: \"+ mode);\n  }\n  this.mode=mode;\n}\n", "public Response deleteAdmin(String roomName, String jid) {\n\t\treturn restClient.delete(\"chatrooms/\" + roomName + \"/admins/\" + jid,\n\t\t\t\tnew HashMap<String, String>());\n\t}", "private Automaton insertionsOf(String s){\n  List<Automaton> list=new ArrayList<>();\n  for (int i=0; i <= s.length(); i++) {\n    Automaton a=Automata.makeString(s.substring(0,i));\n    a=Operations.concatenate(a,Automata.makeAnyChar());\n    a=Operations.concatenate(a,Automata.makeString(s.substring(i)));\n    list.add(a);\n  }\n  Automaton a=Operations.union(list);\n  a=MinimizationOperations.minimize(a,DEFAULT_MAX_DETERMINIZED_STATES);\n  return a;\n}\n", "public static Vector2 floor(Vector2 o){\n  return new Vector2(Math.floor(o.x),Math.floor(o.z));\n}", "private static void registerDefaultNamespaces(){\n  registerNamespace(\"ds\",XMLSignature.XMLNS);\n  registerNamespace(\"dsig\",XMLSignature.XMLNS);\n  registerNamespace(\"xades\",XAdESNamespaces.XAdES);\n  registerNamespace(\"xades141\",XAdESNamespaces.XAdES141);\n  registerNamespace(\"xades122\",XAdESNamespaces.XAdES122);\n  registerNamespace(\"xades111\",XAdESNamespaces.XAdES111);\n  registerNamespace(\"asic\",ASiCNamespaces.ASiC);\n}\n", "public static Boolean isAscendingOrder(String sorting) {\n        return \"desc\".equalsIgnoreCase(sorting) ? Boolean.FALSE : Boolean.TRUE;\n    }", "public static StringBuffer getSqlData(final String[] columns, final String[] columnTypes,\n\t\tfinal String[] columnTypesEdit, final Map<Integer, Integer> lineOrder,\n\t\tfinal List<String[]> lines, final boolean withEndSemicolon)\n\t{\n\t\tfinal StringBuffer sb = new StringBuffer();\n\t\tint autoincrement = 0;\n\t\tfor (final Iterator<String[]> iterator = lines.iterator(); iterator.hasNext();)\n\t\t{\n\t\t\tString[] line;\n\t\t\tif (lineOrder != null)\n\t\t\t{\n\t\t\t\tfinal String[] trueLine = iterator.next();\n\t\t\t\tfinal String newLine[] = new String[columnTypes.length];\n\t\t\t\tfor (final Integer index : lineOrder.keySet())\n\t\t\t\t{\n\t\t\t\t\tnewLine[lineOrder.get(index)] = trueLine[index];\n\t\t\t\t}\n\t\t\t\tline = newLine;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tline = iterator.next();\n\t\t\t}\n\t\t\tsb.append(\"(\");\n\t\t\tfor (int i = 0; i < line.length; i++)\n\t\t\t{\n\t\t\t\tString lineItem = line[i];\n\t\t\t\tif (columnTypesEdit != null)\n\t\t\t\t{\n\t\t\t\t\tfinal String columTypeEdit = columnTypesEdit[i];\n\t\t\t\t\tfinal String[] editTypeData = columTypeEdit.split(\",\");\n\t\t\t\t\tfinal String editType = editTypeData[0];\n\t\t\t\t\tif (editType.equals(\"edit\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (3 < editTypeData.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlineItem = lineItem.replace(editTypeData[1], editTypeData[2]);\n\t\t\t\t\t\t\tfinal Boolean lc = new Boolean(editTypeData[3]);\n\t\t\t\t\t\t\tif (lc)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfinal String tlc = lineItem.toLowerCase();\n\t\t\t\t\t\t\t\tsb.append(\"\\\"\" + tlc + \"\\\"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsb.append(\"\\\"\" + lineItem + \"\\\"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsb.append(\"\\\"\" + lineItem + \"\\\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (editType.equals(\"autoincrement\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tfinal int startCount = Integer.parseInt(editTypeData[1]);\n\t\t\t\t\t\tif (i == 0 && autoincrement == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tautoincrement = startCount;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsb.append(autoincrement);\n\t\t\t\t\t\tautoincrement++;\n\t\t\t\t\t}\n\t\t\t\t\telse if (editType.equals(\"constant\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tfinal String type = editTypeData[1];\n\t\t\t\t\t\tif (type.equals(\"text\"))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsb.append(\"\\\"\" + editTypeData[2] + \"\\\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsb.append(editTypeData[2]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (lineItem != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (columnTypes[i].endsWith(\"text\"))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsb.append(\"\\\"\" + lineItem + \"\\\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsb.append(lineItem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tsb.append(lineItem);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tif (i < columns.length - 1)\n\t\t\t\t{\n\t\t\t\t\tsb.append(\", \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tsb.append(\")\");\n\t\t\tif (iterator.hasNext())\n\t\t\t{\n\t\t\t\tsb.append(\",\\n\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (withEndSemicolon)\n\t\t\t\t{\n\t\t\t\t\tsb.append(\";\\n\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tsb.append(\",\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sb;\n\t}", "    public void actionNextPerson_actionPerformed(ActionEvent e) throws Exception {\n        super.actionNextPerson_actionPerformed(e);\n    }\n", "  public UserData getUserData(String uName) throws UserDoesNotExistException {\n    sem.down();\n    try {\n      if (uName.compareTo(\"\") == 0) return new UserData(0, \"\", \"\");\n      UserData user = (UserData)users.get(uName);\n      if (user == null) throw new UserDoesNotExistException(\"There is no user with the name \\\"\" + uName + \"\\\".\");\n      return user;\n    }\n    finally {\n      sem.up();\n    }\n  }\n", "    public void setPassword1WV(String value) {\n        EditBoxController.updateModel(value, getPassword1WM());\n    }\n", "private void weightedMedian(int iteration,mxGraphHierarchyModel model){\n  boolean downwardSweep=(iteration % 2 == 0);\n  if (downwardSweep) {\n    for (int j=model.maxRank - 1; j >= 0; j--) {\n      medianRank(j,downwardSweep);\n    }\n  }\n else {\n    for (int j=1; j < model.maxRank; j++) {\n      medianRank(j,downwardSweep);\n    }\n  }\n}\n", "public static int copy(InputStream is, OutputStream os, boolean closeOs) {\n        if (closeOs) {\n            return write(is).ensureCloseSink().to(os);\n        } else {\n            return write(is).to(os);\n        }\n    }", "public void setLevels(List<String> levels, List<Integer> codes, boolean isOrdered) throws DDFException {\n    if (levels == null || levels.isEmpty()) throw new DDFException(\"Levels cannot be null or empty\");\n    if (codes != null && codes.size() != levels.size()) throw new DDFException(String.format(\n        \"The number of levels is %d which does not match the number of codes %d\", levels.size(), codes.size()));\n\n    if (mLevelMap == null) mLevelMap = this.instantiateSynchronizedLevelMap();\n\n    if (codes == null) {\n      // Auto-create a 1-based level-code map\n      codes = new ArrayList<Integer>();\n      for (int i = 1; i <= levels.size(); i++) {\n        codes.add(i);\n      }\n    }\n\n    Iterator<String> levelIter = levels.iterator();\n    Iterator<Integer> codeIter = codes.iterator();\n    while (levelIter.hasNext()) {\n      mLevelMap.put(levelIter.next(), codeIter.next());\n    }\n    this.mLevels = new ArrayList<String>(levels);\n    this.setOrdered(isOrdered);\n  }", "final public byte[] toByteArray(){\n  final byte[] tmp=new byte[this.pos];\n  System.arraycopy(buf,0,tmp,0,this.pos);\n  return tmp;\n}\n", "public static boolean rsaCheckContent ( String content , String sign , String publicKey , String charset ) throws CommonsException { try { PublicKey pubKey = getPublicKeyFromX509 ( SignatureConstant . SIGN_TYPE_RSA , new ByteArrayInputStream ( publicKey .", "public static List < String > tokenize ( String str , String delim ) { return tokenize ( str , delim , BOOL_ ) ; }", "private static void exit(@Nullable String errMsg,boolean showUsage,int exitCode){\n  if (errMsg != null)   X.error(errMsg);\n  String runner=System.getProperty(IGNITE_PROG_NAME,\"ignite.{sh|bat}\");\n  int space=runner.indexOf(' ');\n  runner=runner.substring(0,space == -1 ? runner.length() : space);\n  if (showUsage) {\n    boolean ignite=runner.contains(\"ignite.\");\n    X.error(\"Usage:\",\"    \" + runner + (ignite ? \" [?]|[path {-v}{-np}]|[-i]\" : \" [?]|[-v]\"),\"    Where:\",\"    ?, /help, -help, - show this message.\",\"    -v               - verbose mode (quiet by default).\",\"    -np              - no pause on exit (pause by default)\",\"    -nojmx           - disable JMX monitoring (enabled by default)\");\n    if (ignite) {\n      X.error(\"    -i              - interactive mode (choose configuration file from list).\",\"    path            - path to Spring XML configuration file.\",\"                      Path can be absolute or relative to IGNITE_HOME.\",\" \",\"Spring file should contain one bean definition of Java type\",\"'org.apache.ignite.configuration.IgniteConfiguration'. Note that bean will be\",\"fetched by the type and its ID is not used.\");\n    }\n  }\n  System.exit(exitCode);\n}\n", "public static double exp(double lambda){\n  return -Math.log(1 - Math.random()) / lambda;\n}\n", "\tpublic String get(String path) {\n\t\treturn this.getElementText(path);\n\t}\n", "  protected String castedType(Classifier type, String ot) {\n    if (type instanceof MofClass) {\n      return jmi.implType((MofClass)type);\n    }\n    return ot;\n  }\n", "public byte [ ] asByteArray ( ) { byte [ ] result = new byte [ NUM_ ] ; toByteArray ( result ) ; return result ; }", "public void onPullDownToRefresh ( final PullToRefreshBase < V > refreshView ) ;", "  public Vector2 timesWithShift(int pScalar) {\n    return new Vector2((int)((long)x * pScalar >> MathUtils.SHIFT_COUNT),\n        (int)((long)y * pScalar >> MathUtils.SHIFT_COUNT));\n  }\n", "public void storeOriginals ( ) { mStartingStartTrim = mStartTrim ; mStartingEndTrim = mEndTrim ; mStartingRotation = mRotation ; }", "\tpublic int extendEnd(int endPos) throws BadLocationException {\n\t\ttry {\n\t\t\tint markPos = endMark.getOffset();\n\t\t\tendPos = Math.max(endPos, markPos);\n\t\t\tif (endPos != markPos) {\n\t\t\t\tdoc.op.moveMark(endMark, endPos);\n\t\t\t}\n\t\t\treturn endPos;\n\t\t} catch (InvalidMarkException e) {\n\t\t\tif (Boolean.getBoolean(\"netbeans.debug.exceptions\")) { // NOI18N\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t}\n", "private static Shape rightEdge(BufferedImage image,GeneralPath path,int start){\n  int lastj=0;\n  Point2D p1=path.getCurrentPoint();\n  Point2D p2=null;\n  Line2D line=new Line2D.Float();\n  for (int i=start; i >= 0; i-=sample) {\n    boolean aPointExistsOnThisLine=false;\n    for (int j=image.getWidth() - 1; j >= 0; j-=sample) {\n      if ((image.getRGB(j,i) & 0xff000000) != 0) {\n        Point2D p=new Point2D.Float(j,i);\n        aPointExistsOnThisLine=true;\n        p2=detectLine(p1,p2,p,line,path);\n        lastj=j;\n        break;\n      }\n    }\n    if (aPointExistsOnThisLine == false) {\n      break;\n    }\n  }\n  return topEdge(image,path,lastj);\n}\n", "void onAccessPointsUpdated(PreferenceScreen preferenceScreen,Collection<AccessPoint> accessPoints){\n  if (mProgressBar.isIndeterminate() && accessPoints.size() > 0) {\n    showDisconnectedProgressBar();\n    if (mScreenState == SCREEN_STATE_DISCONNECTED) {\n      mWifiSettingsFragmentLayout.setVisibility(View.VISIBLE);\n      mBottomPadding.setVisibility(View.GONE);\n    }\n    mAddNetworkButton.setEnabled(true);\n    mRefreshButton.setEnabled(true);\n  }\n  for (  AccessPoint accessPoint : accessPoints) {\n    accessPoint.setLayoutResource(R.layout.custom_preference);\n    preferenceScreen.addPreference(accessPoint);\n  }\n}\n", "    public Channel inheritedChannel() throws IOException {\n        if (null == inheritedChannel) {\n            inheritedChannel = Platform.getNetworkSystem().inheritedChannel();\n        }\n        return inheritedChannel;\n    }\n", "public static AVList openSpatialImage(File imageFile) throws IOException {\n  return openSpatialImage(imageFile,ImageUtil.NEAREST_NEIGHBOR_INTERPOLATION);\n}\n", "public void returnHandlerObject(ModelHandler modelHandler) {\r\n\t\tif (modelHandler == null)\r\n\t\t\treturn;\r\n\t\ttry {\r\n\t\t\thandlerObjectFactory.returnHandlerObject(modelHandler);\r\n\t\t} catch (Exception ex) {\r\n\t\t\tDebug.logError(\"[JdonFramework] return modelHandler error\" + ex, module);\r\n\t\t}\r\n\r\n\t}", "public void checkNumberArgs(int argNum) throws WrongNumberArgsException {\n  if ((argNum < 1) || (argNum > 2))   reportWrongNumberArgs();\n}\n", "boolean matches(final String path) {\n\n        logger.debug(\"path to match: {}\", path);\n\n        if (excludedPaths.contains(path)) {\n            return false;\n        }\n\n        for (Pattern pattern : excludedPatterns) {\n            if (pattern.matcher(path).matches()) {\n                return false;\n            }\n        }\n\n        return true;\n    }", "    public Walker at(String state) {\n        if (!getProcessInstance().isActive(state)) {\n            throw new RuntimeException(\"State '\" + state + \"' not reached.\");\n        }\n        return this;\n    }\n", "public final void printlnNoWrap(final LocalizableMessage msg){\n  if (!isQuiet()) {\n    out.println(msg);\n  }\n}\n", "public static <T>List<T> asList(T... values){\n  if (values == null) {\n    return new ArrayList<T>(0);\n  }\n else {\n    return new ArrayList<T>(Arrays.asList(values));\n  }\n}", "private boolean readModule(int row, int column, int numRows, int numColumns) {\n    // Adjust the row and column indices based on boundary wrapping\n    if (row < 0) {\n      row += numRows;\n      column += 4 - ((numRows + 4) & 0x07);\n    }\n    if (column < 0) {\n      column += numColumns;\n      row += 4 - ((numColumns + 4) & 0x07);\n    }\n    readMappingMatrix.set(column, row);\n    return mappingBitMatrix.get(column, row);\n  }", "public TransferEntropyCalculatorDiscrete ( int base , int destHistoryEmbedLength , int sourceHistoryEmbeddingLength ) { this ( base , destHistoryEmbedLength , NUM_ , sourceHistoryEmbeddingLength , NUM_ , NUM_ ) ; }", "public static Ticker adaptTicker(CryptopiaTicker cryptopiaTicker, CurrencyPair currencyPair) {\n    return new Ticker.Builder()\n        .currencyPair(currencyPair)\n        .last(cryptopiaTicker.getLast())\n        .bid(cryptopiaTicker.getBid())\n        .ask(cryptopiaTicker.getAsk())\n        .high(cryptopiaTicker.getHigh())\n        .low(cryptopiaTicker.getLow())\n        .volume(cryptopiaTicker.getVolume())\n        .timestamp(new Date())\n        .build();\n  }", "    public boolean takeUnits(int units) {\n        if ((units > 0) && (units <= availUnits) && isOn() &&\n                !isFailed()) {\n            int oldUnits = availUnits;\n                availUnits -= units;\n            firePropertyChange(this.availUnitsPropertyName, oldUnits,\n                    availUnits);\n            return true;\n        } else {\n            return false;\n        }\n    }\n", "public void initTuner ( boolean controlI2C ) throws UsbException { writeDemodRegister ( mDeviceHandle , Page . ONE , ( short ) NUM_ , ( short ) NUM_ , NUM_ ) ; writeDemodRegister ( mDeviceHandle , Page . ZERO , ( short ) NUM_ , ( short ) NUM_ , NUM_ ) ; s", "public static long addAndCheck ( long a , long b ) { return addAndCheck ( a , b , STR_ ) ; }", "public static String getCategoryPath(String rootPath, String baseFolder) throws CmsException {\n\n        String base;\n        if (rootPath.startsWith(CmsCategoryService.CENTRALIZED_REPOSITORY)) {\n            base = CmsCategoryService.CENTRALIZED_REPOSITORY;\n        } else {\n            base = baseFolder;\n            if (!base.endsWith(\"/\")) {\n                base += \"/\";\n            }\n            if (!base.startsWith(\"/\")) {\n                base = \"/\" + base;\n            }\n            int pos = rootPath.indexOf(base);\n            if (pos < 0) {\n                throw new CmsDataAccessException(\n                    Messages.get().container(Messages.ERR_CATEGORY_INVALID_LOCATION_1, rootPath));\n            }\n            base = rootPath.substring(0, pos + base.length());\n        }\n        return rootPath.substring(base.length());\n    }", "void appendedComment ( FunctionNode node , IComment comment ) ;", "public void stop ( ) { end_time = System . nanoTime ( ) ; total_time = end_time - start_time ; }", "public void sendPacketToPlayer ( IPacket packet , EntityPlayerMP player ) { checkClassAndSync ( packet . getClass ( ) ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . PLAYER ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGETARGS ) . set ( player ) ; serverOutboundChannel . writeOutbound ( packet ) ; isCurrentlySendingSemaphor = BOOL_ ; }", "   public OpUser getUserByName(String userName) {\n      Long id = getSubjectId(userName);\n      if (id != null) {\n         String locator = OpLocator.locatorString(OpUser.USER, Long.parseLong(id.toString()));\n\n         return getUserById(locator);\n      }\n\n      return null;\n   }\n", "public void invalidateAll ( ) { cache . invalidateAll ( ) ; }", "public JSONException syntaxError ( String message ) { return new JSONException ( message + this . toString ( ) ) ; }", "public void setAjaxChangeEvent(ISliderAjaxEvent ajaxChangeEvent)\n\t{\n\t\tthis.ajaxEvents.put(SliderAjaxEvent.ajaxChangeEvent, ajaxChangeEvent);\n\t\tsetChangeEvent(new SliderAjaxJsScopeUiEvent(this, SliderAjaxEvent.ajaxChangeEvent));\n\t}", "public static StringLiteralExpr escape ( String string ) { return new StringLiteralExpr ( Utils . escapeEndOfLines ( string ) ) ; }", "\tprivate boolean willBeUnpacked(ZipEntry file, List filter) {\n\t\tif(filter == null) {\n\t\t\treturn true;\n\t\t} else if(filter.size() < 1 || file.isDirectory() || isSupportedArchive(file.getName())) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tfor(Iterator i = filter.iterator(); i.hasNext(); ) {\n\t\t\tString f = (String) i.next();\n\t\t\t\n\t\t\tif(file.getName().endsWith(f)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n", "@Override\n\tpublic int getBand(int x, int y, int band) {\n\t\tif (!isInBounds(x, y))\n\t\t\tthrow new ImageAccessException(\"Requested pixel is out of bounds.\");\n\t\tif (band < 0 || band >= numBands)\n\t\t\tthrow new ImageAccessException(\"Invalid band requested.\");\n\n\t\treturn data[getIndex(x, y, band)] & 0xFFFF;\n\t}", "    public int hashCode() {\n        int result;\n        result = (int)_accessFlags;\n        result = 31 * result + (_name != null ? _name.hashCode() : 0);\n        result = 31 * result + (_descriptor != null ? _descriptor.hashCode() : 0);\n        result = 31 * result + (_attributes != null ? _attributes.hashCode() : 0);\n        return result;\n    }\n", "public static BigDecimal stringToDecimal(String valueStr) {\n        BigInteger bi = new BigInteger(valueStr);\n        BigDecimal bd = new BigDecimal(bi);\n        bd = VoltDecimalHelper.setDefaultScale(bd);\n        return bd;\n    }", "protected abstract void createBodyContent ( IManagedForm managedForm ) ;", "public int numGlyphs ( ) { return this . lastGlyphIndex ( ) + NUM_ ; }", "public LookupListTable lookupList ( ) { if ( lookupListTable . get ( ) == null ) { lookupListTable . compareAndSet ( null , gsub . createLookupList ( ) ) ; } return lookupListTable . get ( ) ; }", "public SumTask ( Class < R > reduceType , Task < T > task ) throws IllegalArgumentException { super ( task ) ; this . reducer = new SumReducer < T , R > ( reduceType ) ; }", "    protected NodeData nextImpl() throws Exception {\n        if (links == null || linkIndex >= links.length) {\n            if (query.isDone()) {\n                return null;\n            }\n            links = getLinks();\n            linkIndex = 0;\n            if (links.length == 0) {\n                return null;\n            }\n        }\n        return links[linkIndex++];\n    }\n", "private int findOrCreateHeapIdx(int cmid){\n  if (cmid >= map.length) {\n    growHeapMap(cmid);\n  }\n  int index=map[cmid];\n  if (index == 0) {\n    index=nextIndex++;\n    if (index >= counts.length) {\n      growHeap();\n    }\n    counts[index]=0.0;\n    cmids[index]=cmid;\n    map[cmid]=index;\n  }\n  return index;\n}\n", "@Nonnull\n    public static <Message extends PMessage<Message, Field>, Field extends PField>\n    Stream<Message> path(Path file,\n                         Serializer serializer,\n                         PMessageDescriptor<Message, Field> descriptor)\n            throws IOException {\n        return file(file.toFile(), serializer, descriptor);\n    }", "private boolean parseSource(HttpMessage message,Source source,int depth,String baseURL){\n  log.debug(\"Parsing an HTML message...\");\n  boolean resourcesfound=false;\n  List<Element> elements=source.getAllElements(HTMLElementName.A);\n  for (  Element el : elements) {\n    resourcesfound|=processAttributeElement(message,depth,baseURL,el,\"href\");\n  }\n  elements=source.getAllElements(HTMLElementName.AREA);\n  for (  Element el : elements) {\n    resourcesfound|=processAttributeElement(message,depth,baseURL,el,\"href\");\n  }\n  elements=source.getAllElements(HTMLElementName.FRAME);\n  for (  Element el : elements) {\n    resourcesfound|=processAttributeElement(message,depth,baseURL,el,\"src\");\n  }\n  elements=source.getAllElements(HTMLElementName.IFRAME);\n  for (  Element el : elements) {\n    resourcesfound|=processAttributeElement(message,depth,baseURL,el,\"src\");\n  }\n  elements=source.getAllElements(HTMLElementName.LINK);\n  for (  Element el : elements) {\n    resourcesfound|=processAttributeElement(message,depth,baseURL,el,\"href\");\n  }\n  elements=source.getAllElements(HTMLElementName.SCRIPT);\n  for (  Element el : elements) {\n    resourcesfound|=processAttributeElement(message,depth,baseURL,el,\"src\");\n  }\n  elements=source.getAllElements(HTMLElementName.IMG);\n  for (  Element el : elements) {\n    resourcesfound|=processAttributeElement(message,depth,baseURL,el,\"src\");\n  }\n  elements=source.getAllElements(HTMLElementName.META);\n  for (  Element el : elements) {\n    String equiv=el.getAttributeValue(\"http-equiv\");\n    String content=el.getAttributeValue(\"content\");\n    if (equiv != null && content != null) {\n      if (equiv.equalsIgnoreCase(\"refresh\") || equiv.equalsIgnoreCase(\"location\")) {\n        Matcher matcher=urlPattern.matcher(content);\n        if (matcher.find()) {\n          String url=matcher.group(1);\n          processURL(message,depth,url,baseURL);\n          resourcesfound=true;\n        }\n      }\n    }\n  }\n  return resourcesfound;\n}\n", "public void copyTo(Gradient g) {\n\t\tg.numKnots = numKnots;\n\t\tg.map = (int[])map.clone();\n\t\tg.xKnots = (int[])xKnots.clone();\n\t\tg.yKnots = (int[])yKnots.clone();\n\t\tg.knotTypes = (byte[])knotTypes.clone();\n\t}", "public List<StorageUnitEntity> excludePartitions(List<StorageUnitEntity> storageUnitEntities,List<List<String>> excludedPartitions){\n  List<StorageUnitEntity> result=new ArrayList<>();\n  for (  StorageUnitEntity storageUnitEntity : storageUnitEntities) {\n    if (!excludedPartitions.contains(businessObjectDataHelper.getPrimaryAndSubPartitionValues(storageUnitEntity.getBusinessObjectData()))) {\n      result.add(storageUnitEntity);\n    }\n  }\n  return result;\n}\n", "private void compressSamples(){\n  if (samples.size() < 2) {\n    return;\n  }\n  final ListIterator<SampleItem> it=samples.listIterator();\n  SampleItem next=it.next();\n  while (it.hasNext()) {\n    final SampleItem prev=next;\n    next=it.next();\n    if (prev.g + next.g + next.delta > allowableError(it.previousIndex())) {\n      continue;\n    }\n    next.g+=prev.g;\n    it.previous();\n    it.previous();\n    it.remove();\n    it.next();\n  }\n}\n", "public void initializeReference(Object conc_object){\n  if (this.isInitialized) {\n    throw new IllegalStateException(\"Reference already initialized!\");\n  }\n  this.concreteValue=conc_object;\n  this.concIdentityHashCode=System.identityHashCode(conc_object);\n  this.isInitialized=true;\n}\n", "    public short getNodeType(int nodeIndex, boolean free) {\n\n        if (nodeIndex == -1) {\n            return -1;\n        }\n\n        int chunk = nodeIndex >> CHUNK_SHIFT;\n        int index = nodeIndex & CHUNK_MASK;\n        if (free) {\n            return (short)clearChunkIndex(fNodeType, chunk, index);\n        }\n        return (short)getChunkIndex(fNodeType, chunk, index);\n\n    } // getNodeType(int):int\n", "void saveSettings ( Map < String , String > settings ) throws CouldntSaveDataException ;", "@Override public boolean equals(Object obj){\n  if (obj == this) {\n    return true;\n  }\n  if (!(obj instanceof TaskSeriesCollection)) {\n    return false;\n  }\n  TaskSeriesCollection that=(TaskSeriesCollection)obj;\n  if (!ObjectUtilities.equal(this.data,that.data)) {\n    return false;\n  }\n  return true;\n}\n", "    public void write(OutputStream out) throws IOException {\n        int size = this.getSize();\n\n        WMFConstants.writeLittleEndian(out, size);\n        WMFConstants.writeLittleEndian(out, WMFConstants.WMF_RECORD_SELECTOBJECT);\n        WMFConstants.writeLittleEndian(out, objectIndex);\n    }\n", "public List<ShardRouting> allShards(String index){\n  List<ShardRouting> shards=new ArrayList<>();\n  IndexRoutingTable indexRoutingTable=index(index);\n  if (indexRoutingTable == null) {\n    throw new IndexNotFoundException(index);\n  }\n  for (  IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {\n    for (    ShardRouting shardRouting : indexShardRoutingTable) {\n      shards.add(shardRouting);\n    }\n  }\n  return shards;\n}\n", "public static Map<String,byte[]> readZipFromResource(String path) throws IOException {\n  ClassLoader cl=ClassLoader.getSystemClassLoader();\n  URL url=cl.getResource(path);\n  Validate.isTrue(url != null);\n  Map<String,byte[]> ret=new LinkedHashMap<>();\n  try (InputStream is=url.openStream();ZipArchiveInputStream zais=new ZipArchiveInputStream(is)){\n    ZipArchiveEntry entry;\n    while ((entry=zais.getNextZipEntry()) != null) {\n      ret.put(entry.getName(),IOUtils.toByteArray(zais));\n    }\n  }\n   return ret;\n}\n", "public TokenMetadata cloneAfterAllSettled()\n    {\n        lock.readLock().lock();\n\n        try\n        {\n            TokenMetadata metadata = cloneOnlyTokenMap();\n\n            for (InetAddress endpoint : leavingEndpoints)\n                metadata.removeEndpoint(endpoint);\n\n\n            for (Pair<Token, InetAddress> pair : movingEndpoints)\n                metadata.updateNormalToken(pair.left, pair.right);\n\n            return metadata;\n        }\n        finally\n        {\n            lock.readLock().unlock();\n        }\n    }", "public final String replaceExpr(\n        String message,\n        String type\n    ) {\n        message = decode(message);\n\n        List mapFilter = getFilter(type);\n\n        if (mapFilter == null)\n            return message;\n\n        Iterator it = mapFilter.iterator();\n\n        while (it.hasNext()) {\n            Object value[] = (Object[]) it.next();\n            String replacement = (String) value[0];\n            List vFilter = (List) value[1];\n\n            if ((vFilter.size() == 0) && (replacement.equals(\"[VALIDATE]\"))) {\n                message = validate(\n                        message,\n                        type\n                    );\n\n                continue;\n            }\n\n            for (int j = 0; j < vFilter.size(); j++) {\n                Pattern filter = (Pattern) vFilter.get(j);\n                Matcher match = filter.matcher(message);\n\n                while (match.find()) {\n                    message = match.replaceAll(replacement);\n                    match = filter.matcher(message);\n                }\n            }\n        }\n\n        return message;\n    }", "public Code39Reader(){\n  this(false);\n}\n", "public static Configuration convertProperties(Properties p){\n  Configuration c=new Configuration();\n  for (Enumeration e=p.keys(); e.hasMoreElements(); ) {\n    String s=(String)e.nextElement();\n    c.setProperty(s,p.getProperty(s));\n  }\n  return c;\n}\n", "@SuppressWarnings(\"PMD.UseStringBufferForStringAppends\")\n    public static String toStringType(final Type type, final Map<String, Type> generics) {\n        final String res;\n        if (type instanceof Class) {\n            res = processClass((Class) type);\n        } else if (type instanceof ParameterizedType) {\n            res = processParametrizedType((ParameterizedType) type, generics);\n        } else if (type instanceof GenericArrayType) {\n            res = toStringType(((GenericArrayType) type).getGenericComponentType(), generics) + \"[]\";\n        } else if (type instanceof WildcardType) {\n            res = processWildcardType((WildcardType) type, generics);\n        } else if (type instanceof ExplicitTypeVariable) {\n            // print generic name (only when PrintableGenericsMap used)\n            res = type.toString();\n        } else {\n            // deep generics nesting case\n            // when PrintableGenericsMap used and generics is not known, will print generic name (see above)\n            res = toStringType(declaredGeneric((TypeVariable) type, generics), generics);\n        }\n        return res;\n    }", "public void read(Callback<Event> callback) throws BugError, InterruptedException {\r\n\t\tif (inputStream == null) {\r\n\t\t\tthrow new BugError(\"Attempt to read from a not connected event stream.\");\r\n\t\t}\r\n\t\tthis.callback = callback;\r\n\t\tthread = new Thread(this, getClass().getSimpleName());\r\n\t\tsynchronized (this) {\r\n\t\t\tthread.start();\r\n\t\t\tthread.wait(THREAD_START_TIMEOUT);\r\n\t\t}\r\n\t}", "NodeTextRep toNodeTextRep ( ) { NodeTextRep result = new NodeTextRep ( nodeText , mapping ) ; if ( decomposition != null ) { result . renaming = decomposition . renaming ; } return result ; }", "public static ClientException adaptInputException(final Throwable cause){\n  return new ClientException(ReturnCode.ERROR_USER_DATA,ERR_CONSOLE_INPUT_ERROR.get(cause.getMessage()),cause);\n}\n", "        protected long saveContent(String content, boolean safeMode) throws Exception {\n            int saveable = countSaveableSizeReleaseMemory(Functions.getStringByteSize(content), safeMode);\n\n            if (saveable < Functions.getStringByteSize(content)) {\n                // TODO: there can occur OutOfMemoryException: handle better\n                content = content.substring(0, saveable);\n            }\n\n            try {\n                //throw new MyException(0);\n                saveContentToDB(content, safeMode);\n            } catch (MyException e) {\n                handleProblemWithSavingBodyPart(saveable);\n                saveContentToDB(content, safeMode);\n            }\n\n            return saveable;\n        }\n", "public static ReservationTokenAttribute createReservationTokenAttribute(\n\t\t\tbyte token[]) {\n\t\tReservationTokenAttribute attribute = new ReservationTokenAttribute();\n\n\t\tattribute.setReservationToken(token);\n\t\treturn attribute;\n\t}", "private static void verifyNode ( final IZyTreeNode node ) { Preconditions . checkNotNull ( node , STR_ ) ; for ( final IZyTreeNode child : node . getChildren ( ) ) { verifyNode ( child ) ; } }", "ByteVector put11 ( final int b1 , final int b2 ) { int length = this . length ; if ( length + NUM_ > data . length ) { enlarge ( NUM_ ) ; } byte [ ] data = this . data ; data [ length ++ ] = ( byte ) b1 ; data [ length ++ ] = ( byte ) b2 ; this . length =", "\tpublic Number numberValue() {\n\t\tif(size <= Byte.SIZE)\n\t\t\treturn new Byte((byte) value);\n\t\tif(size <= Short.SIZE)\n\t\t\treturn new Short((short) value);\n\t\tif(size <= Integer.SIZE)\n\t\t\treturn new Integer((short) value);\n\t\treturn value;\n\t}\n", "public boolean isExpired(DrawContext dc){\n  return dc != null ? timer.isExpired(dc) : timer.isExpired(System.currentTimeMillis());\n}\n", "private CGlobalSettings ( ) { }", "\tpublic long getConfigValueAsLong (String key, long def) {\n\t\tString prop = getConfigValue(key);\n\t\tif (prop == null) return def;\n\t\ttry {\n\t\t\treturn Long.parseLong(prop);\n\t\t} catch (NumberFormatException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn def;\n\t\t}\n\t}\n", "public Period withMillis(int millis) {\n        int[] values = getValues();  // cloned\n        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);\n        return new Period(values, getPeriodType());\n    }", "    public String getRootCommunityId() {\n        // get the config value\n    \treturn resourceManager.getRootCommunityId();/*\n        String rootCommunityId = getConfigurationValue(\"up2p.root.id\");\n            //LOG.debug(\"DefWA: root community set to:\"  + rootCommunityId);\n        \n        return rootCommunityId;*/\n    }\n", "  public int rawSize() {\n    return rawMap.size();\n  }\n", "private static Map<String,Object> addMapObject(Map<String,Object> props,String key){\n  Object v=props.get(key);\n  if (v == null)   return props;\n  List<String> val=new ArrayList<>();\n  if (v instanceof String[]) {\n    val.addAll(Arrays.asList((String[])v));\n  }\n else {\n    val.add(v.toString());\n  }\n  if (val.size() > 0) {\n    ArrayList<Map> l=new ArrayList<>();\n    for (    String rule : val)     l.add(Rule.parseRule(rule));\n    props.put(key,l);\n  }\n  return props;\n}\n", "@Nullable\n  public CSSKeyframesRule getKeyframesRuleAtIndex (@Nonnegative final int nIndex)\n  {\n    return m_aRules.getAtIndexMapped (r -> r instanceof CSSKeyframesRule, nIndex, r -> (CSSKeyframesRule) r);\n  }", "public void refreshDestinations() \n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(tc, \"refreshDestinations\");\n     \n    DestinationTypeFilter filter = new DestinationTypeFilter();\n    //this filter should only let through Active, CleanupPending and CleanupDefered\n    filter.VISIBLE = Boolean.TRUE;\n    filter.CORRUPT = Boolean.FALSE;\n    filter.RESET_ON_RESTART = Boolean.FALSE;\n    SIMPIterator itr = _destinationIndex.iterator(filter);\n    while(itr.hasNext())\n    {\n      DestinationHandler destinationHandler = (DestinationHandler) itr.next();\n      \n      try\n      {\n        // Don't attempt to reload system destinations or deleted or toBeDeleted destinations.\n        if(!(destinationHandler.isSystem() ||\n             destinationHandler.isTemporary() ||\n             destinationHandler.isToBeDeleted() || //these should be invisible anyway\n             destinationHandler.isDeleted()))      //these should be invisible anyway\n        {\n          reloadDestinationFromAdmin(destinationHandler);\n        }\n          \n      }\n      catch(Exception e)\n      { \n        //If the reload of a destination fails, an FFDC is taken, then we continue\n        FFDCFilter.processException(\n          e,\n          \"com.ibm.ws.sib.processor.impl.DynamicConfigManager.refreshDestinations\",\n          \"1:149:1.32\",\n          this);\n\n        SibTr.exception(tc, e);\n\n      }\n    }\n    itr.finished(); // 535718\n\n    ForeignBusTypeFilter foreignFilter = new ForeignBusTypeFilter();\n    //this filter should only let through Active, CleanupPending and CleanupDefered\n    foreignFilter.VISIBLE = Boolean.TRUE;\n    foreignFilter.CORRUPT = Boolean.FALSE;\n    foreignFilter.RESET_ON_RESTART = Boolean.FALSE;\n    SIMPIterator foreignItr = _foreignBusIndex.iterator(foreignFilter);\n    while(foreignItr.hasNext())\n    {\n      BusHandler busHandler = (BusHandler) foreignItr.next();\n      \n      try\n      {\n        // Don't attempt to reload deleted or toBeDeleted destinations.\n        if(!(busHandler.isToBeDeleted() || //these should be invisible anyway\n            busHandler.isDeleted()))      //these should be invisible anyway\n        {\n          reloadForeignBusFromAdmin(busHandler);\n        }\n          \n      }\n      catch(Exception e)\n      { \n        //If the reload of a destination fails, an FFDC is taken, then we continue\n        FFDCFilter.processException(\n          e,\n          \"com.ibm.ws.sib.processor.impl.DynamicConfigManager.refreshDestinations\",\n          \"1:184:1.32\",\n          this);\n\n        SibTr.exception(tc, e);\n\n      }\n    }\n    foreignItr.finished(); // 535718\n\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(tc, \"refreshDestinations\");    \n  }", "public void redeemRewards(@NonNull final String bucket,\n                              final int count, BranchReferralStateChangedListener callback) {\n        ServerRequestRedeemRewards req = new ServerRequestRedeemRewards(context_, bucket, count, callback);\n        if (!req.constructError_ && !req.handleErrors(context_)) {\n            handleNewRequest(req);\n        }\n    }", "public void setAuxAnalyzepath(Path src) {\n        boolean nonEmpty = false;\n\n        String[] elementList = src.list();\n        for (String anElementList : elementList) {\n            if (!\"\".equals(anElementList)) {\n                nonEmpty = true;\n                break;\n            }\n        }\n\n        if (nonEmpty) {\n            if (auxAnalyzepath == null) {\n                auxAnalyzepath = src;\n            } else {\n                auxAnalyzepath.append(src);\n            }\n        }\n    }", "protected void setAllocationAllowed()\n                    throws ObjectManagerException {\n        final String methodName = \"setAllocationAllowed\";\n        if (Tracing.isAnyTracingEnabled() && trace.isEntryEnabled())\n            trace.entry(this, cclass, methodName, new Object[] { new Long(storeFileSizeAllocated),\n                                                                new Long(storeFileSizeUsed) });\n\n        // Users of the store should have reserved space in the store for Objects that are allocated before\n        // they finally add them to the store. We have already reserved enough space for a complete replacement \n        // of the directory which also implies there is already enough space to delete any number of \n        // ManagedObjects in the store.\n\n        // Calculate how much file space we need to continue storing ManagedObjects.\n        // We make the pessimistic assumption that the entire contents of the log might need to be written \n        // to this ObjectStore.\n\n        // We have to take into account any pending request to increase the size of the log file, because this\n        // would allow applications to over commit the store if they used the extra log space when it did not \n        // exist in the Object Store.\n\n        long storeFileSizeRequired = storeFileSizeAllocated;\n\n        if (simulateFullReservedSize > 0) {\n            // We are simulating a a full filesystem.\n            allocationAllowed = false;\n            reservationThreshold = 0;\n\n        }\n        else\n        {\n            // do we have enough space to accomdate the whole log in the store plus reserved space in the store\n            long currentReservedSize = reservedSize.get();\n\n            long pesimisticSpaceRequired = Math.max(objectManagerState.logOutput.getLogFileSize(),\n                                                    objectManagerState.logOutput.getLogFileSizeRequested())\n                                           + directoryReservedSize\n                                           + currentReservedSize;\n\n            long largestFreeSpace = 0;\n            if (freeSpaceByLength.size() > 0) {\n                largestFreeSpace = ((FreeSpace) freeSpaceByLength.last()).length;\n            }\n\n            if (pesimisticSpaceRequired <= largestFreeSpace) {\n                // we can at least fit the whole log plus reserved space in the largest free space entry\n                // so we are ok\n                allocationAllowed = true;\n            }\n            else\n            {\n                storeFileSizeRequired = storeFileSizeUsed +\n                                        pesimisticSpaceRequired;\n\n                // See if we need to change the size of the store file.\n                if (storeFileSizeRequired <= storeFileSizeAllocated) {\n                    // we have allocated more than is required, its just not in the free space map yet\n                    allocationAllowed = true;\n\n                } else if (storeFileSizeRequired <= maximumStoreFileSize) {\n                    // we need more than we have allocated, and that is less than the maximum allowed, try grow to the required...\n                    allocationAllowed = setStoreFileSizeInternal(storeFileSizeRequired);\n\n                } else {\n                    // We need greater than the maximum allowed, make sure we have all the space we are\n                    // allowed to have.\n                    if (storeFileSizeAllocated < maximumStoreFileSize)\n                        setStoreFileSizeInternal(maximumStoreFileSize);\n                    // TODO We could still allow allocation until we really are full when the reservation scheme will catch it!\n                    allocationAllowed = false;\n                    // Request a checkpoint, see if we can clear some space.\n                    numberOfStoreFullCheckpointsTriggered++;\n                    objectManagerState.requestCheckpoint(persistent);\n\n                } // if ( storeFileSizeRequired...\n\n                reservationThreshold = storeFileSizeAllocated - storeFileSizeUsed - directoryReservedSize;\n                reservationCheckpointThreshold = Math.min(reservationThreshold,\n                                                          currentReservedSize + reservationCheckpointMaximum);\n            }\n        }\n        // Release at least one blocked reservation request.\n        if (reservationPacing) {\n            synchronized (reservationPacingLock) {\n                reservationPacing = false;\n                reservationPacingLock.notify();\n            } // synchronized (reservationPacingLock).\n        }\n\n        if (Tracing.isAnyTracingEnabled() && trace.isEntryEnabled())\n            trace.exit(this,\n                       cclass,\n                       methodName,\n                       new Object[] { new Boolean(allocationAllowed), new Long(storeFileSizeRequired) });\n    }", "public static ValueGetterSpacePredicate < ServerEntry > pathIn ( String path , Object ... values ) { return path ( path , in ( values ) ) ; }", "public void paintButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBackground(context,g,x,y,w,h,null);\n}\n", "  public Directory createDirectory(String name) {\n    AbstractFile<?> sd = this.find(name);\n\n    if (sd != null && !(sd instanceof Directory))\n      throw new IllegalArgumentException(\"File \" + name + \" already exists in \" + this.getPath());\n    if (sd == null) {\n      sd = new Directory(this, name + \"/\");  \n      this.contents.add(sd);\n    }\n    return (Directory) sd;\n  }\n", "public void addTrace(LogTrace<E> trace) throws ParameterException {\n                Validate.notNull(trace);\n                trace.setCaseNumber(traces.size() + 1);\n                traces.add(trace);\n                summary.addTrace(trace);\n                if (!distinctTraces.add(trace)) {\n                        for (LogTrace<E> storedTrace : traces) {\n                                if (storedTrace.equals(trace)) {\n                                        storedTrace.addSimilarInstance(trace.getCaseNumber());\n                                        trace.addSimilarInstance(storedTrace.getCaseNumber());\n                                }\n                        }\n                }\n        }", "public DependencyStructure compose2(DependencyStructure other,final List<UnlabelledDependency> newResolvedDependencies){\n  other=other.standardizeApart(coindexation.getMaxID() + 1);\n  final UnifyingSubstitution substitution=UnifyingSubstitution.make(coindexation.right,other.coindexation.left.left,false);\n  final Set<UnresolvedDependency> newUnresolvedDependencies=new HashSet<>();\n  updateResolvedDependencies(other,substitution,newUnresolvedDependencies,newResolvedDependencies);\n  final Set<UnresolvedDependency> normalizedUnresolvedDependencies=new HashSet<>(newUnresolvedDependencies.size());\n  final Coindexation normalizedCoindexation;\n  if (coindexation.isModifier()) {\n    normalizedCoindexation=normalize(substitution.applyTo(other.coindexation),newUnresolvedDependencies,normalizedUnresolvedDependencies,newResolvedDependencies,1);\n  }\n else {\n    final Coindexation leftWithSubstitution=substitution.applyTo(coindexation);\n    final Coindexation rightWithSubstitution=substitution.applyTo(other.coindexation);\n    normalizedCoindexation=normalize(new Coindexation(new Coindexation(leftWithSubstitution.left,rightWithSubstitution.left.right,leftWithSubstitution.idOrHead),rightWithSubstitution.right,leftWithSubstitution.idOrHead),newUnresolvedDependencies,normalizedUnresolvedDependencies,newResolvedDependencies,1);\n  }\n  return new DependencyStructure(normalizedCoindexation,normalizedUnresolvedDependencies);\n}\n", "public Document getResultDocument() throws TransformerException {\n        return withExceptionHandling(new Trans<Document>() {\n                public Document transform() {\n                    return transformation.transformToDocument();\n                }\n            });\n    }", "public Address toFilebase ( final Module module , final Address address ) { Preconditions . checkNotNull ( module , STR_ ) ; Preconditions . checkNotNull ( address , STR_ ) ; return new Address ( m_debugger . memoryToFile ( module . getNative ( ) , new RelocatedAddress ( new CAddress ( address . toLong ( ) ) ) ) . getAddress ( ) . toBigInteger ( ) ) ; }", "    public void unloadRootModule() {\n        ModuleOperation operation = facade.getModuleOperationRegistry().getOperation(\n                ModuleOperationConstants.CloseRootModuleOperation);\n        execute(operation, null);\n    }\n", "public static Object readObject ( byte [ ] data ) throws IOException , ClassNotFoundException { ByteArrayInputStream buffer = new ByteArrayInputStream ( data ) ; ObjectInputStreamExt in = new ObjectInputStreamExt ( buffer ) ; Object answer = in . readObje", "    public void ok () {\n        String printText = tfPrintText.getText ();\n        if (printText.trim ().length () > 0) {\n            breakpoint.setPrintText (printText.trim ());\n        } else {\n            breakpoint.setPrintText (null);\n        }\n        \n        switch (cbSuspend.getSelectedIndex ()) {\n            case 0:\n                breakpoint.setSuspend (ClojureLineBreakpoint.SUSPEND_NONE);\n                break;\n            case 1:\n                breakpoint.setSuspend (ClojureLineBreakpoint.SUSPEND_EVENT_THREAD);\n                break;\n            case 2:\n                breakpoint.setSuspend (ClojureLineBreakpoint.SUSPEND_ALL);\n                break;\n        }\n    }\n", "@Override\n\tpublic boolean hasNext() {\n\t\tif (next == null) {\n\t\t\ttry {\n\t\t\t\tnext = readNextFromStream();\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(\"Failed to receive next element: \" + e.getMessage(), e);\n\t\t\t}\n\t\t}\n\n\t\treturn next != null;\n\t}", "public boolean doClearAllRegisters ( ) { return m_clearRegisterCheckbox . isSelected ( ) ; }", "public void put(HttpHeader header, String value) {\n        if (value == null)\n            remove(header);\n        else\n            put(new HttpField(header, value));\n    }", "public static vpnclientlessaccessprofile[] get_filtered(nitro_service service, filtervalue[] filter) throws Exception{\n\t\tvpnclientlessaccessprofile obj = new vpnclientlessaccessprofile();\n\t\toptions option = new options();\n\t\toption.set_filter(filter);\n\t\tvpnclientlessaccessprofile[] response = (vpnclientlessaccessprofile[]) obj.getfiltered(service, option);\n\t\treturn response;\n\t}", "private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {\n        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {\n            return;\n        }\n\n        try {\n            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies);\n            for (Artifact artifact : artifacts) {\n                // must\n                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)\n                    || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {\n                    getLog().debug(\"Adding extra plugin dependency artifact: \" + artifact.getArtifactId()\n                        + \" to classpath\");\n                    path.add(artifact.getFile().toURI().toURL());\n\n                    // add the transient dependencies of this artifact\n                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true);\n                    if (deps != null) {\n                        for (Artifact dep : deps) {\n                            getLog().debug(\"Adding extra plugin dependency artifact: \" + dep.getArtifactId()\n                                + \" to classpath\");\n                            path.add(dep.getFile().toURI().toURL());\n                        }\n                    }\n                }\n            }\n        } catch (MalformedURLException e) {\n            throw new MojoExecutionException(\"Error during setting up classpath\", e);\n        }\n    }", "\tprivate void init(IVMInstall realVM) {\n\t\tsetName(realVM.getName());\n\t\tsetInstallLocation(realVM.getInstallLocation());\n\t\tsetLibraryLocations(realVM.getLibraryLocations());\n\t\tif (realVM instanceof IVMInstall2) {\n\t\t\tIVMInstall2 vm2 = (IVMInstall2) realVM;\n\t\t\tsetVMArgs(vm2.getVMArgs());\n\t        fRubyVersion = vm2.getRubyVersion();\t\t\t\n\t\t} else {\n\t\t\tsetVMArguments(realVM.getVMArguments());\n\t\t\tfRubyVersion = null;\n\t\t}\n\t}\n", "void changedName ( DebuggerTemplate template , String name ) ;", "public static int findNextConsistencyId(Database conn,Table ct) throws Exception {\n  int id=1;\n  try {\n    Statement st;\n    st=conn.createStatement();\n    ResultSet rs=st.executeQuery(\"SELECT MAX(\" + ConsistencyTable.idColumnName + \") FROM \"+ ct.getSchema()+ \".\"+ ct.getName());\n    if (rs.next()) {\n      id=rs.getInt(1) + 1;\n    }\n    rs.close();\n    st.close();\n  }\n catch (  Exception e) {\n    logger.error(\"Failed to query last consistency check ID: \" + e.getMessage());\n    throw e;\n  }\n  return id;\n}\n", "    public void test03( ) {\n\tassertEquals((m_ripper.log != null), true );\n\n\tm_ripper.setLog( null );\n\n\tassertEquals( m_ripper.log, null );\n\n\tm_ripper.setLog( null );\n\n\tassertEquals( m_ripper.log, null );\n\n\tm_ripper.setLog( m_logger1 );\n\n\tassertSame( m_ripper.log, m_logger1 );\n\n\tm_ripper.setLog( m_logger2 );\n\n\tassertSame( m_ripper.log, m_logger2 );\n    }\n", "public boolean accept(File dir,String name){\n  File file=new File(dir,name);\n  if (file.isDirectory())   return true;\n  String filterString=getFilterString();\n  if (filterString == null || filterString.length() == 0)   return true;\n  if (name == null)   return false;\n  if (name.indexOf('~') != -1 || name.equals(\"FileUtil.java\"))   return false;\n  return name.indexOf(filterString) != -1;\n}\n", "public static SecretKeys generateKey() throws GeneralSecurityException {\n  fixPrng();\n  KeyGenerator keyGen=KeyGenerator.getInstance(CIPHER);\n  keyGen.init(AES_KEY_LENGTH_BITS);\n  SecretKey confidentialityKey=keyGen.generateKey();\n  byte[] integrityKeyBytes=randomBytes(HMAC_KEY_LENGTH_BITS / 8);\n  SecretKey integrityKey=new SecretKeySpec(integrityKeyBytes,HMAC_ALGORITHM);\n  return new SecretKeys(confidentialityKey,integrityKey);\n}\n", "    public void hide() {\n        if (!hideable) {\n            return;\n        }\n        if (activeButton != null) {\n            activeButton.setIcon(getButtonIcon((String)activeButton.getClientProperty(\"text\"), true, false));\n            activeButton = null;\n        }\n\n        if (activeComponent != null) {\n            hideTab(activeComponent);\n        }\n    }\n", "public static Request createSendRequest ( String username , TransportAddress peerAddress , byte [ ] data ) { Request sendRequest = new Request ( ) ; try { sendRequest . setMessageType ( Message . SEND_REQUEST ) ; sendRequest . putAttribute ( AttributeFactory . createMagicCookieAttribute ( ) ) ; sendRequest . putAttribute ( AttributeFactory . createUsernameAttribute ( username ) ) ; DestinationAddressAttribute peerAddressAttribute = AttributeFactory . createDestinationAddressAttribute ( peerAddress ) ; sendRequest . putAttribute ( peerAddressAttribute ) ; if ( data != null && data . length > NUM_ ) { DataAttribute dataAttribute = AttributeFactory . createDataAttributeWithoutPadding ( data ) ; sendRequest . putAttribute ( dataAttribute ) ; } } catch ( IllegalArgumentException ex ) { logger . log ( Level . FINE , STR_ , ex ) ; } return sendRequest ; }", "public default void writeVertices(final OutputStream outputStream,final Iterator<Vertex> vertexIterator) throws IOException {\n  while (vertexIterator.hasNext()) {\n    writeVertex(outputStream,vertexIterator.next());\n  }\n}\n", "    public void setOverscrollHeader(Drawable header) {\n        mOverScrollHeader = header;\n        if (mScrollY < 0) {\n            invalidate();\n        }\n    }\n", "protected void send(Packet packet){\n  if (connection != null) {\n    connection.send(packet);\n  }\n}\n", "\tpublic Tank getNewTank(ActionArea a) {\n\t\ttank = TankTypes.newTank(a,tankType,this);\n\t\treturn tank;\n\t}\n", "public static String serialize(Node doc){\n  StringWriter writer=new StringWriter();\n  try {\n    serializeNode(doc,\"\",writer);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n  writer.flush();\n  return writer.toString();\n}\n", "        public void delFile(int ID){\n            execute(\"delete from files where ID=\"+ID);\n        }\n", "private List<BatchInfo> createBatch(InputStream inputStream,List<BatchInfo> batchInfos,JobInfo jobInfo,BulkConnection bulkConnection){\n  try {\n    LOG.info(\"Creating batch for the test classes to execute using bulk connection....\");\n    BatchInfo batchInfo=bulkConnection.createBatchFromStream(jobInfo,inputStream);\n    batchInfos.add(batchInfo);\n  }\n catch (  AsyncApiException e) {\n    ApexUnitUtils.shutDownWithDebugLog(e,\"Encountered AsyncApiException Exception while trying to create batchInfo\" + \" using bulk connection. \" + e.getMessage());\n  }\n finally {\n    try {\n      inputStream.close();\n    }\n catch (    IOException e) {\n      ApexUnitUtils.shutDownWithDebugLog(e,\"Encountered IO Exception while trying to close the input stream after \" + \"creating batchInfo using bulk connection. \" + e.getMessage());\n    }\n  }\n  return batchInfos;\n}\n", "\tprivate void wireBeans() {\n\t\tField[] fields = this.getClass().getDeclaredFields();\n\t\tfor (final Field field : fields) {\n\t\t\tString name = field.getName();\n\t\t\tClass< ? > clazz = field.getType();\n\t\t\tfinal Object obj = this;\n\t\t\t\n\t\t\tfinal Object bean = this.beanFactory.getBean(name, clazz);\n\t\t\tif (bean != null) {\n\t\t\t\tAccessController.doPrivileged(new PrivilegedAction<Object>() {\n\t\t\t\t\tpublic Object run() {\n\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tfield.set(obj, bean);\n\t\t\t\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n", "public static Credentials obtainToken(Configuration hConf, Credentials credentials) {\n    if (!User.isHBaseSecurityEnabled(hConf)) {\n      return credentials;\n    }\n\n    try {\n      Class c = Class.forName(\"org.apache.hadoop.hbase.security.token.TokenUtil\");\n      Method method = c.getMethod(\"obtainToken\", Configuration.class);\n\n      Token<? extends TokenIdentifier> token = castToken(method.invoke(null, hConf));\n      credentials.addToken(token.getService(), token);\n\n      return credentials;\n\n    } catch (Exception e) {\n      LOG.error(\"Failed to get secure token for HBase.\", e);\n      throw Throwables.propagate(e);\n    }\n  }", "@Override\n    public TransferCertificateResult transferCertificate(TransferCertificateRequest request) {\n        request = beforeClientExecution(request);\n        return executeTransferCertificate(request);\n    }", "  public void sign (String secretKey) {\n    NameValuePair[] params = getParameters();\n    List sigParams = new ArrayList(params.length);\n    for (int i = 0; i < params.length; i++) {\n      NameValuePair nvp = params[i];\n      sigParams.add(nvp.getName() + \"=\" + nvp.getValue());\n    }\n    addParameter(\"sig\", generateSignature(sigParams, secretKey));\n    signed = true;\n  }\n", "@Nonnegative\n  static int _decode4to3 (@Nonnull final byte [] source,\n                          final int srcOffset,\n                          @Nonnull final byte [] destination,\n                          final int destOffset,\n                          fi", "public boolean updateAttribute ( String fieldName , Object newVal ) { Class < ? > fieldClass = dictionary . getType ( getResourceClass ( ) , fieldName ) ; newVal = coerce ( newVal , fieldName , fieldClass ) ; Object val = getValueUnchecked ( fieldName ) ;", "public String consumeRawAttribute(String name){\n  if (!elem.hasAttribute(name)) {\n    return null;\n  }\n  String value=elem.getAttribute(name);\n  elem.removeAttribute(name);\n  return value.trim();\n}\n", "public boolean isCoinBase() {\n        return outpoint.getHash().equals(Sha256Hash.ZERO_HASH) &&\n                (outpoint.getIndex() & 0xFFFFFFFFL) == 0xFFFFFFFFL;  // -1 but all is serialized to the wire as unsigned int.\n    }", "public Fragment ( String aWord ) { this ( aWord , null ) ; }", "public Matrix4d ortho2D(double left, double right, double bottom, double top, Matrix4d dest) {\n        if ((properties & PROPERTY_IDENTITY) != 0)\n            return dest.setOrtho2D(left, right, bottom, top);\n        return ortho2DGeneric(left, right, bottom, top, dest);\n    }", "\tpublic void startServing() {\n\t\tlog.trace(\"start serving\");\n\t\t// notify all clients that serving started\n\t\tmyServer.startServing(intCurrentPageNum, intPageNum, strSplitedFileDir,\n\t\t\t\tstrPdfFileName);\n\t}\n", "String generateSignature(final String data,final OAuthToken token){\n  byte[] byteHMAC=null;\n  try {\n    final Mac mac=Mac.getInstance(HMAC_SHA1);\n    SecretKeySpec spec;\n    if (null == token) {\n      final String oauthSignature=HttpParameter.encode(consumerSecret) + \"&\";\n      spec=new SecretKeySpec(oauthSignature.getBytes(),HMAC_SHA1);\n    }\n else {\n      spec=token.getSecretKeySpec();\n      if (null == spec) {\n        final String oauthSignature=HttpParameter.encode(consumerSecret) + \"&\" + HttpParameter.encode(token.getTokenSecret());\n        spec=new SecretKeySpec(oauthSignature.getBytes(),HMAC_SHA1);\n        token.setSecretKeySpec(spec);\n      }\n    }\n    mac.init(spec);\n    byteHMAC=mac.doFinal(data.getBytes());\n  }\n catch (  final InvalidKeyException ike) {\n    logger.error(\"Failed initialize \\\"Message Authentication Code\\\" (MAC)\",ike);\n    throw new AssertionError(ike);\n  }\ncatch (  final NoSuchAlgorithmException nsae) {\n    logger.error(\"Failed to get HmacSHA1 \\\"Message Authentication Code\\\" (MAC)\",nsae);\n    throw new AssertionError(nsae);\n  }\n  return BASE64Encoder.encode(byteHMAC);\n}\n", "\tprotected Object postProcessExtension(Object result, Type target) {\n\t\t// does nothing at the moment, but will later!\n\t\treturn result;\n\t}\n", "public static void initialize(Class<?>... classes){\n  HashSet<Class<?>> classSet=new HashSet<>(Arrays.asList(classes));\n  MockitoFilter filter=new AllowSet(classSet);\n  initialize(filter);\n}\n", "public void addModule ( final MemoryModule module ) { Preconditions . checkNotNull ( module , STR_ ) ; if ( addressSpaceModules . contains ( module ) ) { throw new IllegalStateException ( STR_ ) ; } addressSpaceModules . add ( module ) ; moduleAddresses .", "private void findFirst ( List < Trade > trades ) { Optional < Trade > firstBigTrade = trades . stream ( ) . filter ( null ) . findFirst ( ) ; System . out . println ( STR_ + firstBigTrade . get ( ) ) ; }", "public void shuffle(){\n  Random r=new Random();\n  int num=count;\n  while (num > 1) {\n    int value=r.nextInt(num);\n    num--;\n    String temp=data[num];\n    data[num]=data[value];\n    data[value]=temp;\n  }\n}\n", "boolean hasAcceleratorAt ( int index ) ;", "public long env_start(){\n  return Long.parseLong(fields[49]);\n}\n", "public static final String parseInputStreamToString(InputStream stream,boolean html) throws IOException {\n  try (InputStreamReader inputStreamReader=new InputStreamReader(stream,StandardCharsets.UTF_8);BufferedReader reader=new BufferedReader(inputStreamReader)){\n    StringBuilder contentBuilder=new StringBuilder();\n    if (html) {\n      contentBuilder.append(\"<html>\");\n    }\n    String line=reader.readLine();\n    while (line != null) {\n      contentBuilder.append(line);\n      if (html) {\n        contentBuilder.append(\"<br/>\");\n      }\n      line=reader.readLine();\n    }\n    if (html) {\n      contentBuilder.append(\"</html>\");\n    }\n    return contentBuilder.toString();\n  }\n }\n", "public void onProgress(int bytesWritten,int totalSize){\n  Log.v(LOG_TAG,String.format(\"Progress %d from %d (%2.0f%%)\",bytesWritten,totalSize,(totalSize > 0) ? (bytesWritten * 1.0 / totalSize) * 100 : -1));\n}\n", "private static void insertCommentsInCu ( CompilationUnit cu , CommentsCollection commentsCollection ) { if ( commentsCollection . size ( ) == NUM_ ) return ; List < Comment > comments = commentsCollection . getAll ( ) ; PositionUtils . sortByBeginPosition", "private ProtoNetwork stage1(final File[] networks) {\n        beginStage(PHASE2_STAGE1_HDR, \"1\", NUM_PHASES);\n        final int netct = networks.length;\n\n        final StringBuilder bldr = new StringBuilder();\n        bldr.append(\"Merging \");\n        bldr.append(netct);\n        bldr.append(\" network\");\n        if (netct > 1) {\n            bldr.append(\"s\");\n        }\n        stageOutput(bldr.toString());\n\n        long t1 = currentTimeMillis();\n        Collection<ProtoNetworkDescriptor> nds = sizedArrayList(netct);\n        for (final File network : networks) {\n            final String root = network.getAbsolutePath();\n            final String netPath = asPath(root, PROTO_NETWORK_FILENAME);\n            final File networkBin = new File(netPath);\n            nds.add(new BinaryProtoNetworkDescriptor(networkBin));\n        }\n\n        ProtoNetwork ret = p2.stage1Merger(nds);\n\n        new File(artifactPath.getAbsolutePath() + \"/merged\").mkdirs();\n\n        p2.stage4WriteEquivalentProtoNetwork(ret,\n                artifactPath.getAbsolutePath() + \"/merged\");\n\n        if (withDebug()) {\n            try {\n                TextProtoNetworkExternalizer textExternalizer =\n                        new TextProtoNetworkExternalizer();\n                textExternalizer.writeProtoNetwork(ret,\n                        artifactPath.getAbsolutePath() + \"/merged\");\n            } catch (ProtoNetworkError e) {\n                error(\"Could not write out equivalenced proto network.\");\n            }\n        }\n\n        long t2 = currentTimeMillis();\n\n        bldr.setLength(0);\n        markTime(bldr, t1, t2);\n        markEndStage(bldr);\n        stageOutput(bldr.toString());\n        return ret;\n    }", "public ChatCompletionHelper(final ChatTextController chatTextController,final Set<String> nameList,final Set<String> commands){\n  chatController=chatTextController;\n  playersonline=nameList;\n  slashCommands=new HashSet<String>(commands.size());\n  for (  String s : commands) {\n    slashCommands.add(\"/\" + s);\n  }\n}\n", "public boolean add(Tag tag) throws IllegalArgumentException {\n        if(tag == null) {\n            return false;\n        }\n\n        // If empty list, use this as tag type.\n        if(this.type == null) {\n            this.type = tag.getClass();\n        } else if(tag.getClass() != this.type) {\n            throw new IllegalArgumentException(\"Tag type cannot differ from ListTag type.\");\n        }\n\n        return this.value.add(tag);\n    }", "protected HttpResponse execute(final HttpMethod meth, String postURL) throws IOException {\r\n\t\tfinal String url = (meth == HttpMethod.POST) ? postURL : this.toString();\r\n\r\n\t\tif (log.isLoggable(Level.FINER))\r\n\t\t\tlog.finer(meth + \"ing: \" + url);\r\n\r\n\t\treturn RequestExecutor.instance().execute(this.retries, new RequestSetup() {\r\n\t\t\tpublic void setup(RequestDefinition req) throws IOException {\r\n\t\t\t\treq.init(meth, url);\r\n\t\t\t\t\r\n\t\t\t\tfor (Map.Entry<String, String> header: headers.entrySet())\r\n\t\t\t\t\treq.setHeader(header.getKey(), header.getValue());\r\n\t\t\t\t\r\n\t\t\t\tif (timeout > 0)\r\n\t\t\t\t\treq.setTimeout(timeout);\r\n\t\t\t\t\r\n\t\t\t\tif (meth == HttpMethod.POST && !params.isEmpty()) {\r\n\t\t\t\t\tif (!hasBinaryAttachments) {\r\n\t\t\t\t\t\tString queryString = createQueryString();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (log.isLoggable(Level.FINER))\r\n\t\t\t\t\t\t\tlog.finer(\"POST data is: \" + queryString);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// This is more efficient if we don't have any binary attachments\r\n\t\t\t\t\t\treq.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\");\r\n\t\t\t\t\t\treq.setContent(queryString.getBytes(\"utf-8\"));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlog.finer(\"POST contains binary data, sending multipart/form-data\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// Binary attachments requires more complicated multipart/form-data format\r\n\t\t\t\t\t\tMultipartWriter writer = new MultipartWriter(req);\r\n\t\t\t\t\t\twriter.write(params);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}", "  static public Automaton complement(Automaton a) {\n    a = a.cloneExpandedIfRequired();\n    a.determinize();\n    a.totalize();\n    for (State p : a.getNumberedStates())\n      p.accept = !p.accept;\n    a.removeDeadTransitions();\n    return a;\n  }\n", "Object awaitFulfill(QNode s,E e,boolean timed,long nanos){\n  final long deadline=timed ? System.nanoTime() + nanos : 0L;\n  Thread w=Thread.currentThread();\n  int spins=((head.next == s) ? (timed ? maxTimedSpins : maxUntimedSpins) : 0);\n  for (; ; ) {\n    if (w.isInterrupted())     s.tryCancel(e);\n    Object x=s.item;\n    if (x != e)     return x;\n    if (timed) {\n      nanos=deadline - System.nanoTime();\n      if (nanos <= 0L) {\n        s.tryCancel(e);\n        continue;\n      }\n    }\n    if (spins > 0)     --spins;\n else     if (s.waiter == null)     s.waiter=w;\n else     if (!timed)     LockSupport.park(this);\n else     if (nanos > spinForTimeoutThreshold)     LockSupport.parkNanos(this,nanos);\n  }\n}\n", "@Override\n    public Request<SearchTransitGatewayRoutesRequest> getDryRunRequest() {\n        Request<SearchTransitGatewayRoutesRequest> request = new SearchTransitGatewayRoutesRequestMarshaller().marshall(this);\n        request.addParameter(\"DryRun\", Boolean.toString(true));\n        return request;\n    }", "public void addMouseListenerToHeaderInTable(JTable table)\n    { \n        table.setColumnSelectionAllowed(false); \n        MouseListener mouseListener = new MouseAdapter()\n        {\n            public void mouseClicked(MouseEvent e)\n            {\n                if (e.getSource() instanceof JTableHeader)\n                {   // Always\n                    JTableHeader tableHeader = (JTableHeader)e.getSource();\n                    TableColumnModel columnModel = tableHeader.getColumnModel();\n                    int viewColumn = columnModel.getColumnIndexAtX(e.getX()); \n                    int column = tableHeader.getTable().convertColumnIndexToModel(viewColumn); \n                    if(e.getClickCount() == 1 && column != -1)\n                    {\n                        boolean order = Constants.ASCENDING;\n                        if ((e.getModifiers() & InputEvent.SHIFT_MASK) != 0)\n                            order = !order;\n                        if (!(tableHeader.getDefaultRenderer() instanceof SortableHeaderRenderer))\n                            tableHeader.setDefaultRenderer(new SortableHeaderRenderer(tableHeader.getDefaultRenderer()));   // Set up header renderer the first time\n                        if ((((SortableHeaderRenderer)tableHeader.getDefaultRenderer()).getSortedByColumn() == viewColumn)\n                                && (((SortableHeaderRenderer)tableHeader.getDefaultRenderer()).getSortedOrder() == order))\n                                    order = !order;\n                        column = columnToFieldColumn(column);\n                        boolean bSuccess = sortByColumn(column, order);\n                        if (bSuccess)\n                            setSortedByColumn(tableHeader, viewColumn, order);\n                    }\n                }\n             }\n         };\n        table.getTableHeader().addMouseListener(mouseListener);\n    }", "public List<PdfDocument> extractPageRanges(List<PageRange> pageRanges){\n  List<PdfDocument> splitDocuments=new ArrayList<>();\n  for (  PageRange currentPageRange : pageRanges) {\n    PdfDocument currentPdfDocument=createPdfDocument(currentPageRange);\n    splitDocuments.add(currentPdfDocument);\n    pdfDocument.copyPagesTo(currentPageRange.getAllPages(),currentPdfDocument);\n  }\n  return splitDocuments;\n}\n", "public void clear ( ) ;", "ReviewerApi reviewer ( String id ) throws RestApiException ;", "protected boolean connectInput(NeuralConnection i,int n){\n  if (!super.connectInput(i,n)) {\n    return false;\n  }\n  m_weights[m_numInputs]=m_random.nextDouble() * .1 - .05;\n  m_changeInWeights[m_numInputs]=0;\n  return true;\n}\n", "public String encode(){\n  StringBuilder retval=new StringBuilder();\n  ListIterator li=sdpFields.listIterator();\n  while (li.hasNext()) {\n    SDPField sdphdr=(SDPField)li.next();\n    retval.append(sdphdr.encode());\n  }\n  return retval.toString();\n}\n", "public EaseOut ( ) { }", "LineOnOtherInfo lineOnOther(DisplaySide mySide,int line){\n  List<LineGap> lineGaps=gapList(mySide);\n  int ret=Collections.binarySearch(lineGaps,new LineGap(line));\n  if (ret == -1) {\n    return new LineOnOtherInfo(line,true);\n  }\n  LineGap lookup=lineGaps.get(0 <= ret ? ret : -ret - 2);\n  int start=lookup.start;\n  int end=lookup.end;\n  int delta=lookup.delta;\n  if (start <= line && line <= end && end != -1) {\n    return new LineOnOtherInfo(end + delta,false);\n  }\n  return new LineOnOtherInfo(line + delta,true);\n}\n", "private void checkForVersionChange(){\n  String currentVersion=settings.getString(\"currentVersion\");\n  if (!currentVersion.equals(Chatty.VERSION)) {\n    settings.setString(\"currentVersion\",Chatty.VERSION);\n    settings.setString(\"updateAvailable\",\"\");\n    g.openReleaseInfo();\n  }\n}\n", "public static <V> void addAllVertices(DirectedGraph<V, DefaultEdge> graph, Set<V> vertices) {\n        // add all of the new vertices to prep for linking\n        for (V vertex : vertices) {\n            graph.addVertex(vertex);\n        }\n    }", "MotionEvent createMotionEventForStackScroll ( MotionEvent ev ) { MotionEvent pev = MotionEvent . obtainNoHistory ( ev ) ; pev . setLocation ( NUM_ , mScroller . progressToScrollRange ( mScroller . getStackScroll ( ) ) ) ; return pev ; }", "    public boolean equalValue(Attribute first, Attribute second) {\n        if (first.isNominal() && second.isNominal()) {\n            return getValueAsString(first).equals(getValueAsString(second));\n        } else if ((!first.isNominal()) && (!second.isNominal())) {\n            return com.rapidminer.tools.Tools.isEqual(getValue(first), getValue(second));\n        } else {\n            return false;\n        }\n    }\n", "private void firePropertyChangeEvent ( PropertyChangeEvent event ) { Object [ ] listeners = fClientListeners . getListeners ( ) ; for ( int i = NUM_ ; i < listeners . length ; i ++ ) ( ( IPropertyChangeListener ) listeners [ i ] ) . propertyChange ( event", "public static byte[][] splitNalUnits(byte[] data){\n  if (!isNalStartCode(data,0)) {\n    return null;\n  }\n  List<Integer> starts=new ArrayList<Integer>();\n  int nalUnitIndex=0;\n  do {\n    starts.add(nalUnitIndex);\n    nalUnitIndex=findNalStartCode(data,nalUnitIndex + NAL_START_CODE.length);\n  }\n while (nalUnitIndex != -1);\n  byte[][] split=new byte[starts.size()][];\n  for (int i=0; i < starts.size(); i++) {\n    int startIndex=starts.get(i);\n    int endIndex=i < starts.size() - 1 ? starts.get(i + 1) : data.length;\n    byte[] nal=new byte[endIndex - startIndex];\n    System.arraycopy(data,startIndex,nal,0,nal.length);\n    split[i]=nal;\n  }\n  return split;\n}\n", "public static void logStartArticleProcessing ( final Logger logger , final Task < Revision > article , long time , long transmittingTime ) { logger . logMessage ( Level . FINE , STR_ + article . toString ( ) ) ; }", "public void extend ( ChangeAttribute a , Change change ) { a . createdOn = change . getCreatedOn ( ) . getTime ( ) / NUM_ ; a . lastUpdated = change . getLastUpdatedOn ( ) . getTime ( ) / NUM_ ; a . open = change . getStatus ( ) . isOpen ( ) ; }", "  private void createKbList(String kbConfigFile) {\n    try {\n      kbList_ = new KbConfigParser().createKbList(kbConfigFile, isMemory_);\n    }\n    catch (Exception e) {\n      e.printStackTrace();\n      System.exit(-1);\n    }\n  }\n", "public void onRemove ( EvictableServerEntry entry ) { }", "    public void setOper(String value) {\n        newOper = toOperValue(value.trim());\n        operClicked = true;\n    }\n", "   public String allText() {\n      String text = comment;\n      text += beginRemoteTag();\n      text += allOptionText();\n      text += allCodeText();\n      text += endRemoteTag();\n      return text + StringUtil.lineSeparator();\n   }\n", "\tpublic int compareTo(MenuItem o) {\n\t\tif (o == null) {\n\t\t\treturn 1;\n\t\t}\n\t\tCompareToBuilder compareToBuilder = new CompareToBuilder();\n\t\tcompareToBuilder.append(getOrder(), o.getOrder());\n\t\tcompareToBuilder.append(getKey(), o.getKey());\n\n\t\treturn compareToBuilder.toComparison();\n\t}\n", "public void startPreview ( ) { if ( camera != null && ! previewing ) { camera . startPreview ( ) ; previewing = BOOL_ ; } }", "public boolean isRetryable ( SQLException ex , Connection connection ) ;", "public void initialise ( ) throws Exception { initialise ( k ) ; }", "private void logSlowRequests ( long requestLifetime , Request < ? > request , byte [ ] responseContents , StatusLine statusLine ) { if ( DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS ) { VolleyLog . d ( STR_ + STR_ , request , requestLifetime , responseContents != null ? responseContents . length : STR_ , statusLine . getStatusCode ( ) , request . getRetryPolicy ( ) . getCurrentRetryCount ( ) ) ; } }", "public UIGraphicTestCase ( String name ) { super ( name ) ; }", "private static void onTabPressed(KeyEvent event) throws BadLocationException {\n  JEditorPane editor=(JEditorPane)event.getSource();\n  Document doc=editor.getDocument();\n  int pos=editor.getCaretPosition();\n  String remainder=doc.getText(pos,doc.getLength() - pos);\n  if (pos < doc.getLength() - 1 && remainder.charAt(0) == '\"') {\n    for (int i=1; i < remainder.length() - 1; i++) {\n      char c=remainder.charAt(i);\n      char c2=remainder.charAt(i + 1);\n      if (c == '\"' && c2 == '\"') {\n        editor.setCaretPosition(pos + i + 1);\n        event.consume();\n        return;\n      }\n    }\n  }\n}\n", "public void setShareErrors(java.util.Collection<ShareError> shareErrors) {\n        if (shareErrors == null) {\n            this.shareErrors = null;\n            return;\n        }\n\n        this.shareErrors = new java.util.ArrayList<ShareError>(shareErrors);\n    }", "public void addPage ( Integer pageNumber , PDFPage page ) { addPageRecord ( pageNumber , page , null ) ; }", "public Observable<DeploymentExtendedInner> createOrUpdateAsync(String resourceGroupName, String deploymentName, DeploymentProperties properties) {\n        return createOrUpdateWithServiceResponseAsync(resourceGroupName, deploymentName, properties).map(new Func1<ServiceResponse<DeploymentExtendedInner>, DeploymentExtendedInner>() {\n            @Override\n            public DeploymentExtendedInner call(ServiceResponse<DeploymentExtendedInner> response) {\n                return response.body();\n            }\n        });\n    }", "public ActionType subtypeAsActionType ( ) throws ReplicatorException { if ( type != ETYPE_LCR_DATA ) { throw new ReplicatorException ( STR_ ) ; } switch ( this . subtype ) { case ESTYPE_LCR_INSERT : return ActionType . INSERT ; case ESTYPE_LCR_UPDATE : re", "public BurpCertificate importCertificateFromString(String inputString){\n  setStatus(\"Importing certificate...\");\n  CertificateFactory certFactory;\n  try {\n    certFactory=CertificateFactory.getInstance(\"X.509\");\n    ByteArrayInputStream bais=new ByteArrayInputStream(Base64.decode(inputString));\n    X509Certificate x509certificate=(X509Certificate)certFactory.generateCertificate(bais);\n    BurpCertificate certificate=new BurpCertificate(x509certificate);\n    certificate.setPublicKey(x509certificate.getPublicKey());\n    certificate.setSource(\"Imported\");\n    burpCertificateStore.addCertificate(certificate);\n    setCertificateTree();\n    setStatus(\"Certificate imported\");\n    return certificate;\n  }\n catch (  CertificateException|Base64DecodingException e) {\n    setStatus(\"Error reading input certificate. (\" + e.getMessage() + \")\");\n    e.printStackTrace();\n  }\ncatch (  Exception e) {\n    setStatus(\"Error. (\" + e.getMessage() + \")\");\n    e.printStackTrace();\n  }\n  return null;\n}\n", "        public void setName(String name) {\n            if (!isValidName(name)) {\n                throw new BuildException(\n                    \"Illegal name [\" + name + \"] for macro element\");\n            }\n            this.name = name.toLowerCase(Locale.US);\n        }\n", "private boolean containsComment(GHPullRequest ghPullRequest, String expectedBody) {\n        List<GHIssueComment> prComments;\n        try {\n            prComments = ghPullRequest.getComments();\n        } catch (IOException e) {\n            LOGGER.log(Level.WARNING, \"Failed to get comments for PR \" + ghPullRequest, e);\n            // return false in case of an error - probably safer to have multiple comments than possibly none\n            return false;\n        }\n        for (GHIssueComment comment : prComments) {\n            if (comment.getBody() != null && comment.getBody().equals(expectedBody)) {\n                return true;\n            }\n        }\n        return false;\n    }", "public void cacheStatements(Closure closure) throws SQLException {\n        boolean savedCacheStatements = cacheStatements;\n        cacheStatements = true;\n        Connection connection = null;\n        try {\n            connection = createConnection();\n            callClosurePossiblyWithConnection(closure, connection);\n        } finally {\n            cacheStatements = false;\n            closeResources(connection, null);\n            cacheStatements = savedCacheStatements;\n        }\n    }", "public void stateChanged(ChangeEvent e){\n  JSlider j=(JSlider)e.getSource();\n  BoundedRangeModel r=j.getModel();\n  for (int i=0; i < nValues; i++) {\n    if (r == models[i]) {\n      setModel(i,r.getValue());\n      break;\n    }\n  }\n  prop.firePropertyChange(\"Value\",null,j);\n}\n", "public void invokeDynamic ( String name , String desc , Handle bsm , Object ... bsmArgs ) { mv . visitInvokeDynamicInsn ( name , desc , bsm , bsmArgs ) ; }", "\tpublic void doSaveAs() {\n\t\tOutputHandler.writeDebug(\"JavaEditor(doSaveAs):\");\n\t\t// write xlang file\n\t\tupdateModel();\n\t\t// call super\n\t\tsuper.doSaveAs();\n\t}\n", "public void addClassPath(String path) {\n        String[] paths = path.split(File.pathSeparator);\n        for (String cpPath : paths) {\n            // Check to support wild card classpath\n            if (cpPath.endsWith(\"*\")) {\n                File dir = new File(cpPath.substring(0, cpPath.length() - 1));\n                File[] files = dir.listFiles();\n                if (files != null) {\n                    for (File file : files) {\n                        if (file.isFile() && file.getName().endsWith(\".jar\")) addFile(file);\n                    }\n                }\n            } else {\n                addFile(new File(cpPath));\n            }\n        }\n    }", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "protected Map<String,Set<String>> filterQueryParamsByKey(QueryParamsParserContext context,String queryKey){\n  Map<String,Set<String>> filteredQueryParams=new HashMap<>();\n  for (  String paramName : context.getParameterNames()) {\n    if (paramName.startsW", "public final boolean cancel(@NonNull final String tag,final boolean mayInterrupt){\n  final Integer id=mTaggedRequests.get(tag);\n  if (id != null) {\n    return cancel(id,mayInterrupt);\n  }\n else {\n    return false;\n  }\n}\n", "public Path (Device device) {\n\tsuper(device);\n\tthis.device.checkGDIP();\n\thandle = Gdip.GraphicsPath_new(Gdip.FillModeAlternate);\n\tif (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);\n\tinit();\n}\n", "protected boolean isInvalidResourceName(String resourceName) {\n\n        if (resourceName == null) {\n            return true;\n        }\n        try {\n\n            m_cms.readResource(resourceName);\n            return false;\n        } catch (CmsException e) {\n            //Ok, resource not valid..\n        }\n        return true;\n    }", "@Override\n  public void shutdown(ShutdownModeAmp mode)\n  {\n    TreeSet<String> serviceNames = new TreeSet<>(_serviceMap.keySet());\n    \n    // HashSet<ServiceRefAmp> serviceSet = new HashSet<>(_serviceMap.values());\n    \n    if (mode == ShutdownModeAmp.GRACEFUL) {\n      save(serviceNames);\n    }\n    \n    for (String serviceName : serviceNames) {\n      try {\n        ServiceRefAmp serviceRef = _serviceMap.get(serviceName);\n        \n        serviceRef.shutdown(mode);\n      } catch (Throwable e) {\n        log.log(Level.FINE, e.toString(), e);\n      }\n    }\n  }", "public boolean contains(final String logicTableName) {\n        return findTableRule(logicTableName).isPresent() || findBindingTableRule(logicTableName).isPresent() || isBroadcastTable(logicTableName);\n    }", "private Bitmap getBitmapOfView(final View view){\n\t\tview.destroyDrawingCache();\n\t\tview.buildDrawingCache(false);\n\t\tBitmap orig = view.getDrawingCache();\n\t\tBitmap.Config config = null;\n\n\t\tif(orig == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconfig = orig.getConfig();\n\n\t\tif(config == null) {\n\t\t\tconfig = Bitmap.Config.ARGB_8888;\n\t\t}\n\t\tBitmap b = orig.copy(config, false);\n\t\torig.recycle();\n\t\tview.destroyDrawingCache();\n\t\treturn b; \n\t}", "public static ColumnFamilyDescriptor createColumnFamilyDescriptor(\n\t\tRegisteredStateMetaInfoBase metaInfoBase,\n\t\tFunction<String, ColumnFamilyOptions> columnFamilyOptionsFactory,\n\t\t@Nullable RocksDbTtlCompactFiltersManager ttlCompactFiltersManager) {\n\n\t\tColumnFamilyOptions options = createColumnFamilyOptions(columnFamilyOptionsFactory, metaInfoBase.getName());\n\t\tif (ttlCompactFiltersManager != null) {\n\t\t\tttlCompactFiltersManager.setAndRegisterCompactFilterIfStateTtl(metaInfoBase, options);\n\t\t}\n\t\tbyte[] nameBytes = metaInfoBase.getName().getBytes(ConfigConstants.DEFAULT_CHARSET);\n\t\tPreconditions.checkState(!Arrays.equals(RocksDB.DEFAULT_COLUMN_FAMILY, nameBytes),\n\t\t\t\"The chosen state name 'default' collides with the name of the default column family!\");\n\n\t\treturn new ColumnFamilyDescriptor(nameBytes, options);\n\t}", "private void listenerDropped(ArrayList drops,ArrayList notifies){\n  ServiceRegistrar[] proxys=new ServiceRegistrar[drops.size()];\n  drops.toArray(proxys);\n  listenerDropped(proxys,notifies);\n}\n", "private String getArgumentName(final String arg) {\n        int pos = arg.indexOf(\"=\");\n        if (pos == -1) {\n            pos = arg.indexOf(\":\");\n        }\n        return arg.substring(0, pos != -1 ? pos : arg.length());\n    }", "private CmsCreatableListItem makeDetailPageItem(CmsNewResourceInfo typeInfo) {\n\n        CmsListInfoBean info = new CmsListInfoBean();\n        String subtitle = typeInfo.getSubTitle();\n        String title = Messages.get().key(\n            typeInfo.isFunct", "public UIGraphicTestCase ( String name ) { super ( name ) ; }", "public boolean hasProvider(Class<?> dtoInterface){\n  return dtoInterface2Providers.get(dtoInterface) != null;\n}\n", "        public void update(int row, int column) {\n            this.row = row;\n            this.column = column;\n        }\n", "public static String create(Map<String, String> properties) throws RottenTomatoesException {\n        if (StringUtils.isBlank(apiKey)) {\n            throw new RottenTomatoesException(ApiExceptionType.INVALID_URL, \"Missing API Key\");\n        }\n\n        StringBuilder urlBuilder = new StringBuilder(API_SITE);\n        urlBuilder.append(API_VERSION);\n\n        urlBuilder.append(getUrlFromProps(properties));\n\n        urlBuilder.append(API_PREFIX).append(apiKey);\n\n        for (Map.Entry<String, String> property : properties.entrySet()) {\n            // Validate the key/value\n            if (StringUtils.isNotBlank(property.getKey()) && StringUtils.isNotBlank(property.getValue())) {\n                urlBuilder.append(\"&\").append(property.getKey()).append(\"=\").append(property.getValue());\n            }\n        }\n\n        LOG.trace(\"URL: {}\", urlBuilder.toString());\n        return urlBuilder.toString();\n    }", "String readSetting ( String key ) throws CouldntLoadDataException ;", "private JsonValue performUpdate ( String resourceID , JsonValue value ) throws ResourceException { String id = value . get ( STR_ ) . required ( ) . asString ( ) ; String fullID = retrieveFullID ( resourceID , value ) ; String rev = value . get ( STR_ ) . required ( ) . asString ( ) ; UpdateRequest updateRequest = Requests . newUpdateRequest ( fullID , value ) ; updateRequest . setRevision ( rev ) ; connectionFactory . getConnection ( ) . update ( taskScannerContext . getContext ( ) , updateRequest ) ; return retrieveObject ( resourceID , id ) ; }", "public synchronized void fetchAndStoreLogsFromDriver(SessionId sessionId, WebDriver driver)\n    throws IOException {\n    if (!perSessionDriverEntries.containsKey(sessionId)) {\n      perSessionDriverEntries.put(sessionId, new HashMap<>());\n    }\n    Map<String, LogEntries> typeToEntriesMap = perSessionDriverEntries.get(sessionId);\n    if (storeLogsOnSessionQuit) {\n      typeToEntriesMap.put(LogType.SERVER, getSessionLog(sessionId));\n      Set<String> logTypeSet = driver.manage().logs().getAvailableLogTypes();\n      for (String logType : logTypeSet) {\n        typeToEntriesMap.put(logType, driver.manage().logs().get(logType));\n      }\n    }\n  }", "\tprotected int getState() {\n\t\tif (board.getNumberOfPieces() >= 8) {\n\t\t\treturn Game.GAME_STATE_CHECKMATE;\n\t\t}\n\t\telse if (hasPossibleMoves()) {\n\t\t\treturn Game.GAME_STATE_CONTINUE;\n\t\t} else {\n\t\t\treturn Game.GAME_STATE_LOSE;\n\t\t}\n\t}\n", "public int getDefaultDisplayFieldSeq()\n    {\n        String iKeyOrder = this.getDefaultScreenKeyArea();\n        if (iKeyOrder == null)\n        {\n            for (int i = 0; i < this.getFieldCount(); i++)\n            {\n            \tif (this.getField(i).isHidden())\n            \t\tcontinue;\n                if (this.getField(i) instanceof StringField)\n                    return i;\n            }\n            return DBConstants.MAIN_FIELD + 1;\n        }\n        for (int i = 0; i < this.getFieldCount(); i++)\n        {\n            if (this.getField(i) == this.getKeyArea(iKeyOrder).getField(DBConstants.FILE_KEY_AREA))\n                return i;\n        }\n        return DBConstants.MAIN_FIELD + 1;\n    }", "protected void nextTable ( ) throws ReplicatorException , SQLException { while ( importTables . next ( ) ) { if ( includeImportTable ( ) == BOOL_ ) { currentTablePosition = NUM_ ; extractCreateTableStatement = this . includeStructure ; prepareImportTable ", "public CSearchResultsDialog ( final Window parent , final CGraphSearchField searchField ) { super ( parent , STR_ ) ; m_searchField = searchField ; setResults ( m_searchField . getGraphSearcher ( ) . getResults ( ) ) ; setLayout ( new BorderLayout ( ) ) ;", "public ReplEvent peek ( ) throws InterruptedException { return eventQueue . peek ( ) ; }", "  public UrsiList getUrsiList() {\n    UrsiList ul = new UrsiList(connection);\n    for (int i = 0; i < rows.size(); i++) {\n      IonoRow id = rows.get(i);\n      ul.addUrsi(id.getUrsi());\n    }\n    return ul;\n  }\n", "    public void load(URL vert, URL frag) {\n        vertexByteBuffer = vert != null ? load(vert) : null;\n        fragmentByteBuffer = frag != null ? load(frag) : null;\n        needsRefresh = true;\n    }\n", "protected void scanRecordFields(String[] strClassNames, int iClassIndex, boolean bMarkUnused)\n    {\n        ClassInfo recClassInfo = new ClassInfo(Record.findRecordOwner(m_recClassInfo));\n        FieldData recFieldData = new FieldData(Record.findRecordOwner(m_recFieldData));\n        String strClassName = strClassNames[iClassIndex];\n        try {\n            // First, re-read the original class.\n            recClassInfo.getField(ClassInfo.CLASS_NAME).setString(strClassName);\n            recClassInfo.setKeyArea(ClassInfo.CLASS_NAME_KEY);\n            if (!recClassInfo.seek(null))\n                return; // Never\n            \n            recFieldData.setKeyArea(FieldData.FIELD_FILE_NAME_KEY);\n            recFieldData.addListener(new SubFileFilter(recClassInfo.getField(ClassInfo.CLASS_NAME), FieldData.FIELD_FILE_NAME, null, null, null, null));\n\n            strClassName = recClassInfo.getField(ClassInfo.CLASS_NAME).toString();\n            recFieldData.close();\n            while (recFieldData.hasNext())\n            {\n                recFieldData.next();\n                \n                int iIndex = this.findField(recFieldData, true);    // Find the base field in my list\n                FieldSummary fieldSummary = new FieldSummary(recFieldData, FieldSummary.RECORD_FIELD);\n                if (iIndex == -1)\n                {\n                    m_vFieldList.add(fieldSummary);  // Add this\n                }\n                else\n                {   // If there is a base, replace it with this\n                    FieldSummary fieldSummaryBase = (FieldSummary)m_vFieldList.get(iIndex);\n                    m_vFieldList.set(iIndex, fieldSummaryBase.mergeNewSummary(fieldSummary, (iClassIndex >= strClassNames.length - 1), strClassName));  // Replace this\n                }\n            }\n            \n            if (bMarkUnused)\n            {\n                for (int i = 0; i < m_vFieldList.size(); i++)\n                {\n                    FieldSummary fieldSummary = (FieldSummary)m_vFieldList.elementAt(i);\n                    if (!this.isInRecord(strClassNames, iClassIndex, fieldSummary.m_strFieldFileName))\n                    {\n                        fieldSummary.m_strNewFieldClass = UNUSED;\n                        fieldSummary.m_strNewBaseField = fieldSummary.m_strFieldName;\n                    }\n                }\n            }\n        } catch (DBException ex)    {\n            ex.printStackTrace();\n        } finally {\n            recClassInfo.free();\n            recFieldData.free();\n        }\n    }", "    private LispObject javaListToLispList(java.util.List list) throws ParseException {\n\tLispObject result = Nil.instance();\n\tfor(int i = list.size() - 1; i >= 0; i--) {\n\t    result = new Cons((LispObject)list.get(i), result);\n\t}\n\treturn result;\n    }\n", "@RequestMapping(value=\"/{id}\",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable(\"id\") Long batchId,Principal principal){\n  RestWrapper restWrapper=null;\n  try {\n    batchDAO.delete(batchId);\n    restWrapper=new RestWrapper", "public ServiceFuture<PolicyStatesQueryResultsInner> listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(PolicyStatesResource policyStatesResource, String subscriptionId, String policyAssignmentName, QueryOptions queryOptions, final ServiceCallback<PolicyStatesQueryResultsInner> serviceCallback) {\n        return ServiceFuture.fromResponse(listQueryResultsForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(policyStatesResource, subscriptionId, policyAssignmentName, queryOptions), serviceCallback);\n    }", "public void startObjectName ( O object ) { }", "public void stop ( Duration timeout ) throws TimeoutException { stop ( ) ; logger . trace ( STR_ ) ; if ( ! stopped . await ( timeout . toMillis ( ) , TimeUnit . MILLISECONDS ) ) { throw new TimeoutException ( String . format ( STR_ , getClass ( ) . getSimpleName ( ) ) ) ; } }", "protected void sortPartsOnView(){\n  viewPartPositions.clear();\n  List<PartPresenter> sortedParts=getSortedParts();\n  for (  PartPresenter partPresenter : sortedParts) {\n    viewPartPositions.add(sortedParts.indexOf(partPresenter),parts.indexOf(partPresent", "public String getRawProperty(T property)\r\n    {\r\n        String propertyName = getTranslator().getPropertyName(property);\r\n        String value = properties.getProperty(propertyName);\r\n\r\n        if (value != null && isAutoTrim())\r\n        {\r\n            value = value.trim();\r\n        }\r\n\r\n        return value;\r\n    }", "public static void registerUpdateListener(UpdateListener l){\n  updateListeners.add(l);\n}\n", "public void save(DataOutput out) throws IOException {\n  out.writeLong(myTimestamp);\n}\n", "public static String obtainEncodingStringFromFile ( String filename ) throws IOException { String encoding = STR_ ; FileInputStream fis = new FileInputStream ( filename ) ; BufferedInputStream bis = new BufferedInputStream ( fis ) ; if ( bis . markSupport", "protected String handleDate ( ResultSet rs , int columnIndex , String dateFormatString ) throws SQLException { java . sql . Date date = rs . getDate ( columnIndex ) ; String value = null ; if ( date != null ) { SimpleDateFormat dateFormat = new SimpleDate", "public static Completable clear(CacheConfigBean cacheConfigBean, String cacheKey) {\n        return SingleRxXian.call(CacheService.CACHE_SERVICE, \"cacheListClear\", new JSONObject() {{\n            put(\"cacheConfig\", cacheConfigBean);\n            put(\"key\", cacheKey);\n        }}).toCompletable();\n    }", "public PointF mapImageToView ( PointF imagePoint ) { float [ ] points = mTempValues ; points [ NUM_ ] = imagePoint . x ; points [ NUM_ ] = imagePoint . y ; mapRelativeToAbsolute ( points , points , NUM_ ) ; mActiveTransform . mapPoints ( points , NUM_ , p", "\tpublic void setAppName(String appName, String appVersion) {\n\t\tif (appVersion != null && !appVersion.equals(\"\")) {\n\t\t\tlblAppName.setText(appName + \" \" + appVersion);\n\t\t} else {\n\t\t\tlblAppName.setText(appName);\n\t\t}\n\t}\n", "public Double toDouble ( ) { return StringGroovyMethods . toDouble ( text ( ) ) ; }", "protected void registerClientInterestList(String regionName,List keysOfInterest,boolean sendUpdatesAsInvalidates){\n  FilterProfile p=getProfile(regionName);\n  if (p == null) {\n    throw new RegionDestroyedException(\"Region not found during client interest registration\",regionName);\n  }\n  Set keysRegistered=null;\nsynchronized (this.interestListLock) {\n    keysRegistered=p.registerClientInterestList(id,keysOfInterest,sendUpdatesAsInvalidates);\n    regions.add(regionName);\n  }\n  if (containsInterestRegistrationListeners() && !keysRegistered.isEmpty()) {\n    handleInterestEvent(regionName,keysRegistered,InterestType.KEY,true);\n  }\n}\n", "public static String normalizeDigits(String token){\n  StringBuilder sb=new StringBuilder(token.length());\n  int len=token.length();\n  for (int i=0; i < len; ++i) {\n    char c=token.charAt(i);\n    sb.append(Character.isDigit(c) ? \"0\" : c);\n  }\n  return sb.toString();\n}\n", "public void     forEach(final Function<T, Void> function)\n    {\n        for ( final ListenerEntry<T> entry : listeners.values() )\n        {\n            entry.executor.execute\n            (\n                new Runnable()\n                {\n                    @Override\n                    public void run()\n                    {\n                        try\n                        {\n                            function.apply(entry.listener);\n                        }\n                        catch ( Throwable e )\n                        {\n                            log.error(String.format(\"Listener (%s) threw an exception\", entry.listener), e);\n                        }\n                    }\n                }\n            );\n        }\n    }", "protected byte readByteProtected(DataInputStream istream) throws java.io.IOException {\n  while (true) {\n    int nchars;\n    nchars=istream.read(rcvBuffer,0,1);\n    if (nchars > 0) {\n      return rcvBuffer[0];\n    }\n  }\n}\n", "public CodedException withPrefix(String... prefixes){\n  String prefix=StringUtils.join(prefixes,\".\");\n  if (!faultCode.startsWith(prefix)) {\n    faultCode=prefix + \".\" + faultCode;\n  }\n  return this;\n}\n", "public boolean isPermissionGranted(String permission) {\n        List<String> grantedPermissions = getPermissions();\n        if (grantedPermissions != null) {\n            return grantedPermissions.contains(permission);\n        }\n        return false;\n    }", "    public String print(boolean shortestIsReference) {\n        SStringBuilder result = new SStringBuilder();\n        long reference = findReferenceValue(shortestIsReference);\n        Iterator it = measures.iterator();\n        while (it.hasNext()) {\n            Measure m = (Measure) it.next();\n            String factor = \" -- \";\n            long duration = m.getDuration();\n            if (reference > 0) {\n                long tmp = (long) ((duration * RESOLUTION) / reference);\n                factor = String.valueOf(tmp / RESOLUTION);\n            }\n            Object[] args = {m.getComment(), (duration + \"ms\"), factor};\n            result.append(formatter.format(args));\n        }\n        return result.toString();\n    }\n", "public static boolean isTernaryInstruction ( final ReilInstruction instruction ) { Preconditions . checkNotNull ( instruction , STR_ ) ; return instruction . getMnemonic ( ) . equalsIgnoreCase ( STR_ ) || instruction . getMnemonic ( ) . equalsIgnoreCase (", "    public void transformBX (double b){\n      for (int row = 0; row < genes.size(); row++) {\n        Gene g = (Gene)genes.elementAt(row);\n        double tempData[] = g.getData();\n        for (int column = 0; column < tempData.length; column++) {\n           if(tempData[column]!=Double.POSITIVE_INFINITY&&tempData[column]!=Double.NaN&&tempData[column]!=Double.NEGATIVE_INFINITY){\n              tempData[column] = Math.pow(b,(double)tempData[column]);\n          }\n        }\n        g.setData(tempData);\n        g.setAvg(calcAvg(tempData));\n        g.setSD(calcSD(tempData, g.getAvg()));\n      }\n      recalcMinMax();\n    }\n", "@Override\n  protected MkAppEntry createNewDirectoryEntry(MkAppTreeNode<O> node, DBID routingObjectID, double parentDistance) {\n    return new MkAppDirectoryEntry(routingObjectID, parentDistance, node.getPageID(), node.coveringRadiusFromEntries(routingObjectID, this), null);\n  }", "public void popCurrentTemplateName(){\n  templateNameStack.pop();\n  return;\n}\n", "public static void sendEvent(Context context, Parcelable event) {\n        Intent intent = new Intent(EventManager.ACTION_ACCESSORY_EVENT);\n        intent.putExtra(EventManager.EXTRA_EVENT, event);\n        context.sendBroadcast(intent);\n    }", "    public boolean isSecure() {\n        return servletRequest.isSecure();\n    }\n", "        public void mouseEntered(MouseEvent e) {\n            // requestFocus();  // This would grab focus every time mouse enters!\n            selectInteractor(e);\n            if (interactor != null) {\n                interactor.mouseEntered(e);\n                deselectInteractor();\n            } else if (eventDispatcher != null) {\n                dispatchMouseEntered(e);\n            }\n        }\n", "void radf4(final int ido, final int l1, final double in[], final int in_off, final double out[], final int out_off, final int offset) {\n\t\tfinal double hsqt2 = 0.707106781186547572737310929369414225;\n\t\tint i, ic;\n\t\tdouble ci2, ci3, ci4, cr2, cr3, cr4, ti1, ti2, ti3, ti4, tr1, tr2, tr3, tr4, w1r, w1i, w2r, w2i, w3r, w3i;\n\t\tint iw1, iw2, iw3;\n\t\tiw1 = offset;\n\t\tiw2 = offset + ido;\n\t\tiw3 = iw2 + ido;\n\t\tint idx0 = l1 * ido;\n\t\tfor (int k = 0; k < l1; k++) {\n\t\t\tint idx1 = k * ido;\n\t\t\tint idx2 = 4 * idx1;\n\t\t\tint idx3 = idx1 + idx0;\n\t\t\tint idx4 = idx3 + idx0;\n\t\t\tint idx5 = idx4 + idx0;\n\t\t\tint idx6 = idx2 + ido;\n\t\t\tdouble i1r = in[in_off + idx1];\n\t\t\tdouble i2r = in[in_off + idx3];\n\t\t\tdouble i3r = in[in_off + idx4];\n\t\t\tdouble i4r = in[in_off + idx5];\n\n\t\t\ttr1 = i2r + i4r;\n\t\t\ttr2 = i1r + i3r;\n\n\t\t\tint oidx1 = out_off + idx2;\n\t\t\tint oidx2 = out_off + idx6 + ido;\n\n\t\t\tout[oidx1] = tr1 + tr2;\n\t\t\tout[oidx2 - 1 + ido + ido] = tr2 - tr1;\n\t\t\tout[oidx2 - 1] = i1r - i3r;\n\t\t\tout[oidx2] = i4r - i2r;\n\t\t}\n\t\tif (ido < 2)\n\t\t\treturn;\n\t\tif (ido != 2) {\n\t\t\tfor (int k = 0; k < l1; k++) {\n\t\t\t\tint idx1 = k * ido;\n\t\t\t\tint idx2 = idx1 + idx0;\n\t\t\t\tint idx3 = idx2 + idx0;\n\t\t\t\tint idx4 = idx3 + idx0;\n\t\t\t\tint idx5 = 4 * idx1;\n\t\t\t\tint idx6 = idx5 + ido;\n\t\t\t\tint idx7 = idx6 + ido;\n\t\t\t\tint idx8 = idx7 + ido;\n\t\t\t\tfor (i = 2; i < ido; i += 2) {\n\t\t\t\t\tic = ido - i;\n\t\t\t\t\tint widx1 = i - 1 + iw1;\n\t\t\t\t\tint widx2 = i - 1 + iw2;\n\t\t\t\t\tint widx3 = i - 1 + iw3;\n\t\t\t\t\tw1r = wtable_r[widx1 - 1];\n\t\t\t\t\tw1i = wtable_r[widx1];\n\t\t\t\t\tw2r = wtable_r[widx2 - 1];\n\t\t\t\t\tw2i = wtable_r[widx2];\n\t\t\t\t\tw3r = wtable_r[widx3 - 1];\n\t\t\t\t\tw3i = wtable_r[widx3];\n\n\t\t\t\t\tint idx9 = in_off + i;\n\t\t\t\t\tint idx10 = out_off + i;\n\t\t\t\t\tint idx11 = out_off + ic;\n\t\t\t\t\tint iidx1 = idx9 + idx1;\n\t\t\t\t\tint iidx2 = idx9 + idx2;\n\t\t\t\t\tint iidx3 = idx9 + idx3;\n\t\t\t\t\tint iidx4 = idx9 + idx4;\n\n\t\t\t\t\tdouble i1i = in[iidx1 - 1];\n\t\t\t\t\tdouble i1r = in[iidx1];\n\t\t\t\t\tdouble i2i = in[iidx2 - 1];\n\t\t\t\t\tdouble i2r = in[iidx2];\n\t\t\t\t\tdouble i3i = in[iidx3 - 1];\n\t\t\t\t\tdouble i3r = in[iidx3];\n\t\t\t\t\tdouble i4i = in[iidx4 - 1];\n\t\t\t\t\tdouble i4r = in[iidx4];\n\n\t\t\t\t\tcr2 = w1r * i2i + w1i * i2r;\n\t\t\t\t\tci2 = w1r * i2r - w1i * i2i;\n\t\t\t\t\tcr3 = w2r * i3i + w2i * i3r;\n\t\t\t\t\tci3 = w2r * i3r - w2i * i3i;\n\t\t\t\t\tcr4 = w3r * i4i + w3i * i4r;\n\t\t\t\t\tci4 = w3r * i4r - w3i * i4i;\n\t\t\t\t\ttr1 = cr2 + cr4;\n\t\t\t\t\ttr4 = cr4 - cr2;\n\t\t\t\t\tti1 = ci2 + ci4;\n\t\t\t\t\tti4 = ci2 - ci4;\n\t\t\t\t\tti2 = i1r + ci3;\n\t\t\t\t\tti3 = i1r - ci3;\n\t\t\t\t\ttr2 = i1i + cr3;\n\t\t\t\t\ttr3 = i1i - cr3;\n\n\t\t\t\t\tint oidx1 = idx10 + idx5;\n\t\t\t\t\tint oidx2 = idx11 + idx6;\n\t\t\t\t\tint oidx3 = idx10 + idx7;\n\t\t\t\t\tint oidx4 = idx11 + idx8;\n\n\t\t\t\t\tout[oidx1 - 1] = tr1 + tr2;\n\t\t\t\t\tout[oidx4 - 1] = tr2 - tr1;\n\t\t\t\t\tout[oidx1] = ti1 + ti2;\n\t\t\t\t\tout[oidx4] = ti1 - ti2;\n\t\t\t\t\tout[oidx3 - 1] = ti4 + tr3;\n\t\t\t\t\tout[oidx2 - 1] = tr3 - ti4;\n\t\t\t\t\tout[oidx3] = tr4 + ti3;\n\t\t\t\t\tout[oidx2] = tr4 - ti3;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ido % 2 == 1)\n\t\t\t\treturn;\n\t\t}\n\t\tfor (int k = 0; k < l1; k++) {\n\t\t\tint idx1 = k * ido;\n\t\t\tint idx2 = 4 * idx1;\n\t\t\tint idx3 = idx1 + idx0;\n\t\t\tint idx4 = idx3 + idx0;\n\t\t\tint idx5 = idx4 + idx0;\n\t\t\tint idx6 = idx2 + ido;\n\t\t\tint idx7 = idx6 + ido;\n\t\t\tint idx8 = idx7 + ido;\n\t\t\tint idx9 = in_off + ido;\n\t\t\tint idx10 = out_off + ido;\n\n\t\t\tdouble i1i = in[idx9 - 1 + idx1];\n\t\t\tdouble i2i = in[idx9 - 1 + idx3];\n\t\t\tdouble i3i = in[idx9 - 1 + idx4];\n\t\t\tdouble i4i = in[idx9 - 1 + idx5];\n\n\t\t\tti1 = -hsqt2 * (i2i + i4i);\n\t\t\ttr1 = hsqt2 * (i2i - i4i);\n\n\t\t\tout[idx10 - 1 + idx2] = tr1 + i1i;\n\t\t\tout[idx10 - 1 + idx7] = i1i - tr1;\n\t\t\tout[out_off + idx6] = ti1 - i3i;\n\t\t\tout[out_off + idx8] = ti1 + i3i;\n\t\t}\n\t}", "public void writeLong ( long l ) throws IOException { this . writeULong ( l ) ; }", "\tprivate int binsearch(int num) {\n\t\t\n\t\tint left = 0;\n\t\tint right = dividers.length-1;\n\t\tint index = right - left / 2;\n\t\t\n\t\twhile(left < right) {\n\t\t\tindex = (right + left) / 2;\n\t\t\t\n\t\t\tif (num == dividers[index]) { \n\t\t\t\treturn num; \n\t\t\t} else if (num > dividers[index]) { \n\t\t\t\tleft = index+1; \n\t\t\t} else if (num < dividers[index]) { \n\t\t\t\tright = index-1;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn dividers[left];\n\t}\n", "public SchemaException(final LocalizableMessage message,final Throwable cause){\n  super(String.valueOf(message),cause);\n  this.message=message;\n}\n", "public BuildMetadataContextAction ( ) { }", "private void reset(){\n  rootNode.removeAllChildren();\n  treeModel.reload();\n}\n", "boolean building ( GraphBuilderEvents event , int counter ) ;", "private static boolean isFourBytesSequence ( byte b ) { return - NUM_ <= b && b <= - NUM_ ; }", "    public void setPeaks(MeasuredPeak[] peaks) {\n        listModel.clear();\n        for (int i = 0; i < peaks.length; i++) {\n            listModel.addElement(peaks[i]);\n        }\n        int index = peakList.getSelectedIndex();\n        peakList.setSelectedIndex(index);\n        peakList.ensureIndexIsVisible(index);\n        stateChanged();\n    }\n", "void breakpointConditionSet ( DebuggerBreakpointConditionSetReply reply ) ;", "public static TileRendererLayer createTileRendererLayer(\n            TileCache tileCache, IMapViewPosition mapViewPosition,\n            MapDataStore mapFile, XmlRenderTheme renderTheme) {\n        TileRendererLayer tileRendererLayer = new TileRendererLayer(tileCache, mapFile,\n                mapViewPosition, AndroidGraphicFactory.INSTANCE);\n        tileRendererLayer.setXmlRenderTheme(renderTheme);\n        return tileRendererLayer;\n    }", "public boolean isPostConstructCalled ( ) { return this . postConstructCalled ; }", "    private void setType() {\n        String wrapStyle = TexlipsePlugin.getPreference(TexlipseProperties.WORDWRAP_TYPE);\n        ISourceViewer viewer = getTextEditor().getViewer();\n        if (wrapStyle.equals(TexlipseProperties.WORDWRAP_TYPE_SOFT)) {\n            if (viewer != null) {\n                TexAutoIndentStrategy.setHardWrap(false);\n                viewer.getTextWidget().setWordWrap(true);\t\n            }\n        } else if (wrapStyle.equals(TexlipseProperties.WORDWRAP_TYPE_HARD)) {\n            if (viewer != null) {\n                viewer.getTextWidget().setWordWrap(false);\n                TexAutoIndentStrategy.setHardWrap(true);\n            }\n        }\n    }\n", "public OperationRejectedException(OperationType type,LocalizableMessage ufn,LocalizableMessage message){\n  this(type,ufn,Collections.singleton(message));\n}\n", "boolean processEvent(long address){\n  short source=unsafe.getShort(address + OFFSETOF_SOURCE);\n  long object=unsafe.getAddress(address + OFFSETOF_OBJECT);\n  int events=unsafe.getInt(address + OFFSETOF_EVENTS);\n  if (source != PORT_SOURCE_FILE) {\n    if (source == PORT_SOURCE_USER) {\n      boolean shutdown=processRequests();\n      if (shutdown)       return true;\n    }\n    return false;\n  }\n  Node node=object2Node.get(object);\n  if (node == null) {\n    return false;\n  }\n  boolean reregister=true;\n  boolean isDirectory=(node instanceof SolarisWatchKey);\n  if (isDirectory) {\n    processDirectoryEvents((SolarisWatchKey)node,events);\n  }\n else {\n    boolean ignore=processEntryEvents((EntryNode)node,events);\n    if (ignore)     reregister=false;\n  }\n  if (reregister) {\n    try {\n      events=FILE_MODIFIED | FILE_ATTRIB;\n      if (!isDirectory)       events|=FILE_NOFOLLOW;\n      portAssociate(port,PORT_SOURCE_FILE,object,events);\n    }\n catch (    UnixException x) {\n      reregister=false;\n    }\n  }\n  if (!reregister) {\n    object2Node.remove(object);\n    releaseObject(object,false);\n    if (isDirectory) {\n      SolarisWatchKey key=(SolarisWatchKey)node;\n      fileKey2WatchKey.remove(key.getFileKey());\n      key.invalidate();\n      key.signal();\n    }\n else {\n      EntryNode entry=(EntryNode)node;\n      SolarisWatchKey key=(SolarisWatchKey)entry.parent();\n      key.removeChild(entry.name());\n    }\n  }\n  return false;\n}\n", "public static void serialize ( Node node , Writer w ) { serialize ( asString ( node ) , w ) ; }", "private static String extendRepeating(String e, String max) {\r\n\t\tString[] parts = e.split(\",\");\r\n\t\tfor (int i = 0; i < parts.length; ++i) {\r\n\t\t\tif (parts[i].indexOf('-') == -1 && parts[i].indexOf('*') == -1) {\r\n\t\t\t\tint indSlash = parts[i].indexOf('/');\r\n\t\t\t\tif (indSlash == 0) {\r\n\t\t\t\t\tparts[i] = \"*\" + parts[i];\r\n\t\t\t\t} else if (indSlash > 0) {\r\n\t\t\t\t\tparts[i] = parts[i].substring(0, indSlash) + \"-\" + max + parts[i].substring(indSlash);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn concat(',', parts);\r\n\t}", "public List<Ticket> checkTickets(Set<String> tickets) throws FlickrException {\r\n        Map<String, Object> parameters = new HashMap<String, Object>();\r\n        parameters.put(\"method\", METHOD_CHECK_TICKETS);\r\n\r\n        StringBuffer sb = new StringBuffer();\r\n        Iterator<String> it = tickets.iterator();\r\n        while (it.hasNext()) {\r\n            if (sb.length() > 0) {\r\n                sb.append(\",\");\r\n            }\r\n            Object obj = it.next();\r\n            if (obj instanceof Ticket) {\r\n                sb.append(((Ticket) obj).getTicketId());\r\n            } else {\r\n                sb.append(obj);\r\n            }\r\n        }\r\n        parameters.put(\"tickets\", sb.toString());\r\n\r\n        Response response = transportAPI.post(transportAPI.getPath(), parameters, apiKey, sharedSecret);\r\n        if (response.isError()) {\r\n            throw new FlickrException(response.getErrorCode(), response.getErrorMessage());\r\n        }\r\n\r\n        // <uploader>\r\n        // <ticket id=\"128\" complete=\"1\" photoid=\"2995\" />\r\n        // <ticket id=\"129\" complete=\"0\" />\r\n        // <ticket id=\"130\" complete=\"2\" />\r\n        // <ticket id=\"131\" invalid=\"1\" />\r\n        // </uploader>\r\n\r\n        List<Ticket> list = new ArrayList<Ticket>();\r\n        Element uploaderElement = response.getPayload();\r\n        NodeList ticketNodes = uploaderElement.getElementsByTagName(\"ticket\");\r\n        int n = ticketNodes.getLength();\r\n        for (int i = 0; i < n; i++) {\r\n            Element ticketElement = (Element) ticketNodes.item(i);\r\n            String id = ticketElement.getAttribute(\"id\");\r\n            String complete = ticketElement.getAttribute(\"complete\");\r\n            boolean invalid = \"1\".equals(ticketElement.getAttribute(\"invalid\"));\r\n            String photoId = ticketElement.getAttribute(\"photoid\");\r\n            Ticket info = new Ticket();\r\n            info.setTicketId(id);\r\n            info.setInvalid(invalid);\r\n            info.setStatus(Integer.parseInt(complete));\r\n            info.setPhotoId(photoId);\r\n            list.add(info);\r\n        }\r\n        return list;\r\n    }", "static byte[] decryptData(byte[] password,byte[] encryptedData){\n  try {\n    Cipher c=Cipher.getInstance(ENCRYPT_DATA_ALGORITHM);\n    c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(password,SECRET_KEY_ALGORITHM),CBC_SALT_DATA);\n    return c.doFinal(encryptedData);\n  }\n catch (  Exception e) {\n    throw new IllegalStateException(ENCRYPT_DATA_ALGORITHM + \" is not available\",e);\n  }\n}\n", "public void paintTableHeaderBackground ( SynthContext context , Graphics g , int x , int y , int w , int h ) { paintBackground ( context , g , x , y , w , h , null ) ; }", "@Override\n\t@Transactional(enabled = false)\n\tpublic CommerceDiscountUserSegmentRel createCommerceDiscountUserSegmentRel(\n\t\tlong commerceDiscountUserSegmentRelId) {\n\t\treturn commerceDiscountUserSegmentRelPersistence.create(commerceDiscountUserSegmentRelId);\n\t}", "public static Integer[] sequence(final Integer from, final Integer to) {\n        return sequence(from, to, Integer.valueOf(from <= to? 1 : -1));\n    }", "    public InputStream getResourceAsStream(String resourceName) {\n        try {\n            if (resourceName.equals(name))\n                return new FileInputStream( classFile );\n        } catch (FileNotFoundException e) {\n            // Fall through, return null.\n        }\n        return null;\n    }\n", "public java.lang.StringBuffer delete(int start,int end){\n  internal.delete(start,end);\n  return this;\n}\n", "protected JsonObject readJsonFromContent(Object contentToValidate) throws Exception {\n        if (contentToValidate == null) {\n            throw new Exception(\"Provided content is null so cannot be validated.\");\n        }\n        JsonObject obj = null;\n        try {\n            String responseText = WebResponseUtils.getResponseText(contentToValidate);\n            obj = Json.createReader(new StringReader(responseText)).readObject();\n        } catch (Exception e) {\n            throw new Exception(\"Failed to read JSON data from the provided content. The exception was [\" + e + \"]. The content to validate was: [\" + contentToValidate + \"].\");\n        }\n        return obj;\n    }", "public void updateCalendar ( ) { updateCalendar ( null ) ; }", "public < N extends Node > ParseResult < N > parse ( ParseStart < N > start , Provider provider ) { try { final ASTParser parser = getParserForProvider ( provider ) ; N resultNode = start . parse ( parser ) ; final CommentsCollection comments = astParser .", "public int getSymLinkDepth() {\n        int value = 0;\n        try {\n            value = Integer.parseInt(line.getOptionValue(ARGUMENT.SYM_LINK_DEPTH, \"0\"));\n            if (value < 0) {\n                value = 0;\n            }\n        } catch (NumberFormatException ex) {\n            LOGGER.debug(\"Symbolic link was not a number\");\n        }\n        return value;\n    }", "    public boolean equals(final Object object) {\n\n        if (object instanceof SerialDate) {\n            final SerialDate s = (SerialDate) object;\n            return (s.toSerial() == this.toSerial());\n        }\n        else {\n            return false;\n        }\n\n    }\n", "public ZonedDateTime nextTimeAfter(ZonedDateTime afterTime, ZonedDateTime dateTimeBarrier) {\n        ZonedDateTime nextTime = ZonedDateTime.from(afterTime).withNano(0).plusSeconds(1).withNano(0);\n\n        while (true) { // day of week\n            while (true) { // month\n                while (true) { // day of month\n                    while (true) { // hour\n                        while (true) { // minute\n                            while (true) { // second\n                                if (secondField.matches(nextTime.getSecond())) {\n                                    break;\n                                }\n                                nextTime = nextTime.plusSeconds(1).withNano(0);\n                            }\n                            if (minuteField.matches(nextTime.getMinute())) {\n                                break;\n                            }\n                            nextTime = nextTime.plusMinutes(1).withSecond(0).withNano(0);\n                        }\n                        if (hourField.matches(nextTime.getHour())) {\n                            break;\n                        }\n                        nextTime = nextTime.plusHours(1).withMinute(0).withSecond(0).withNano(0);\n                    }\n                    if (dayOfMonthField.matches(nextTime.toLocalDate())) {\n                        break;\n                    }\n                    nextTime = nextTime.plusDays(1).withHour(0).withMinute(0).withSecond(0).withNano(0);\n                    checkIfDateTimeBarrierIsReached(nextTime, dateTimeBarrier);\n                }\n                if (monthField.matches(nextTime.getMonth().getValue())) {\n                    break;\n                }\n                nextTime = nextTime.plusMonths(1).withDayOfMonth(1).withHour(0).withMinute(0).withSecond(0).withNano(0);\n                checkIfDateTimeBarrierIsReached(nextTime, dateTimeBarrier);\n            }\n            if (dayOfWeekField.matches(nextTime.toLocalDate())) {\n                break;\n            }\n            nextTime = nextTime.plusDays(1).withHour(0).withMinute(0).withSecond(0).withNano(0);\n            checkIfDateTimeBarrierIsReached(nextTime, dateTimeBarrier);\n        }\n\n        return nextTime;\n    }", "protected String generateOtherFeaturesText(String containerId){\n  StringBuilder output=new StringBuilder();\n  output.append(\"h3.Other Features\");\n  output.append(LINE_SEPARATOR);\n  output.append(LINE_SEPARATOR);\n  output.append(\"|| Feature name || Java API || Ant tasks || Maven 2 / Maven 3 plugin || Comment ||\");\n  output.append(LINE_SEPARATOR);\n  output.append(\"| [Debugging] | (/) | (/) | (/) | |\");\n  output.append(LINE_SEPARATOR);\n  return output.toString();\n}\n", "\tpublic void setParent(Controller parent) {\n\t\tparentController = parent;\n\t\tparentController.addChild(this, actions.keySet());\n\t}\n", "@Override public void clear(){\n  for (int i=0; i < array.length(); i++) {\n    array.set(i,defaultGetKeyReturnValue);\n  }\n  size.set(0);\n}", "public static int generateLongSocketSerial ( ) { synchronized ( SERIAL_LOCK ) { return SERIAL_LONG_TASK ++ ; } }", "static boolean checkStandardUPCEANChecksum ( CharSequence s ) throws FormatException { int length = s . length ( ) ; if ( length == NUM_ ) { return BOOL_ ; } int sum = NUM_ ; for ( int i = length - NUM_ ; i >= NUM_ ; i -= NUM_ ) { int digit = ( int ) s . charAt ( i ) - ( int ) STR_ ; if ( digit < NUM_ || digit > NUM_ ) { throw FormatException . getFormatInstance ( ) ; } sum += digit ; } sum *= NUM_ ; for ( int i = length - NUM_ ; i >= NUM_ ; i -= NUM_ ) { int digit = ( int ) s . charAt ( i ) - ( int ) STR_ ; if ( digit < NUM_ || digit > NUM_ ) { throw FormatException . getFormatInstance ( ) ; } sum += digit ; } return sum % NUM_ == NUM_ ; }", "    public boolean isCompletelySpecified(List<String> errormessages) {\n        return false;\n    }\n", "public abstract boolean isSlave ( ) ;", "  public void setSpellEvent (SpellCheckEvent event) {\n    spellEvent = event;\n    DefaultListModel m = new DefaultListModel();\n    java.util.List suggestions = event.getSuggestions();\n    for (int i = 0; i < suggestions.size(); i++) {\n      m.addElement(suggestions.get(i));\n    }\n    suggestList.setModel(m);\n    if (m.size()>0) {\n    \tsuggestList.setSelectedIndex(0);\n    }\n   \tcheckText.setText(event.getInvalidWord());\n  }\n", "    protected PropertyChangeListener createActionPropertyChangeListener(Action a) {\n        return new NBPropertyChangeListener(this, a);\n    }\n", "protected final void closeResources ( ResultSet rs ) { Sql . this . closeResources ( connection , statement , rs ) ; }", "public Container createContainer(Configuration configuration){\n  return createContainer(getTestData().containerType,configuration);\n}\n", "private Object getValue(Object object, String propertyPath) throws TemplateException\r\n  {\r\n    if(this.model == null) {\r\n      return null;\r\n    }\r\n\r\n    // anonymous property path has only a dot\r\n    if(propertyPath.equals(\".\")) {\r\n      return object;\r\n    }\r\n\r\n    Object o = object;\r\n    if(propertyPath.charAt(0) == '.') {\r\n      o = this.model;\r\n      propertyPath = propertyPath.substring(1);\r\n    }\r\n    for(String property : propertyPath.split(\"\\\\.\")) {\r\n      o = getObjectProperty(o, property);\r\n      if(o == null) {\r\n        return null;\r\n      }\r\n    }\r\n    return o;\r\n  }", "public BoardList updateBoardList(Object projectIdOrPath, Integer boardId, Integer listId, Integer position) throws GitLabApiException {\n        GitLabApiForm formData = new GitLabApiForm().withParam(\"position\", position, true);\n        Response response =", "public SpaceAuthority ( SpacePrivilege spacePrivilege ) { this ( spacePrivilege , null ) ; }", "public HashMap < Integer , ArrayList < IComment > > loadMultipleCommentsById ( final Collection < Integer > commentIds ) throws CouldntLoadDataException ;", "    private JPanel buildGearRatioDistancesPanel() {\n\n        labelTable = new GearRatioLabelTable(curGears);\n        labelTable.setFocusable(false);\n        \n        FormLayout layout = new FormLayout(\n            \"10dlu, default, 10dlu\", // colums\n            \"6dlu, default, 6dlu, default, 6dlu\");  // rows\n\n        PanelBuilder builder = new PanelBuilder(layout);\n        CellConstraints cc = new CellConstraints();\n        \n        builder.addSeparator( dLab.getString(\"gearsdialog.label.cycle\"),\n                cc.xy( 2, 2) );\n        builder.add( labelTable.buildTablePanel(), cc.xy(2, 4) );\n        \n        return builder.getPanel();\n    }\n", "private void copyApplicationStub ( ) throws BuildException { File newStubFile = new File ( mMacOsDir , bundleProperties . getCFBundleExecutable ( ) ) ; if ( mVerbose ) log ( STR_ + bundlePath ( newStubFile ) + STR_ ) ; try { mFileUtils . copyFile ( mStubFile , newStubFile ) ; } catch ( IOException ex ) { throw new BuildException ( STR_ + ex ) ; } setExecutable ( newStubFile ) ; }", "static public Timestamp addDays(Timestamp day,int offset){\n  if (offset == 0) {\n    return day;\n  }\n  if (day == null) {\n    day=new Timestamp(System.currentTimeMillis());\n  }\n  GregorianCalendar cal=new GregorianCalendar();\n  cal.setTime(day);\n  cal.set(Calendar.HOUR_OF_DAY,0);\n  cal.set(Calendar.MINUTE,0);\n  cal.set(Calendar.SECOND,0);\n  cal.set(Calendar.MILLISECOND,0);\n  if (offset == 0)   return new Timestamp(cal.getTimeInMillis());\n  cal.add(Calendar.DAY_OF_YEAR,offset);\n  return new Timestamp(cal.getTimeInMillis());\n}\n", "public static List<AbstractInsnNode> findInvocationsOf(InsnList insnList,Method expectedMethod){\n  Validate.notNull(insnList);\n  Validate.notNull(expectedMethod);\n  List<AbstractInsnNode> ret=new ArrayList<>();\n  Type expectedMethodDesc=Type.getType(expectedMethod);\n  Type expectedMethodOwner=Type.getType(expectedMethod.getDeclaringClass());\n  String expectedMethodName=expectedMethod.getName();\n  Iterator<AbstractInsnNode> it=insnList.iterator();\n  while (it.hasNext()) {\n    AbstractInsnNode instructionNode=it.next();\n    Type methodDesc;\n    Type methodOwner;\n    String methodName;\n    if (instructionNode instanceof MethodInsnNode) {\n      MethodInsnNode methodInsnNode=(MethodInsnNode)instructionNode;\n      methodDesc=Type.getType(methodInsnNode.desc);\n      methodOwner=Type.getObjectType(methodInsnNode.owner);\n      methodName=expectedMethod.getName();\n    }\n else {\n      continue;\n    }\n    if (methodDesc.equals(expectedMethodDesc) && methodOwner.equals(expectedMethodOwner) && methodName.equals(expectedMethodName)) {\n      ret.add(instructionNode);\n    }\n  }\n  return ret;\n}\n", "public boolean rFlagFunctionForRecompileOnce(StatementBlock sb,boolean inLoop){\n  boolean ret=false;\n  if (sb instanceof FunctionStatementBlock) {\n    FunctionStatementBlock fsb=(FunctionStatementBlock)sb;\n    FunctionStatement fstmt=(FunctionStatement)fsb.getStatement(0);\n    for (    StatementBlock c : fstmt.getBody())     ret|=rFlagFunctionForRecompileOnce(c,inLoop);\n  }\n else   if (sb instanceof WhileStatementBlock) {\n    ret=true;\n  }\n else   if (sb instanceof IfStatementBlock) {\n    IfStatementBlock isb=(IfStatementBlock)sb;\n    IfStatement istmt=(IfStatement)isb.getStatement(0);\n    ret|=(inLoop && isb.requiresPredicateRecompilation());\n    for (    StatementBlock c : istmt.getIfBody())     ret|=rFlagFunctionForRecompileOnce(c,inLoop);\n    for (    StatementBlock c : istmt.getElseBody())     ret|=rFlagFunctionForRecompileOnce(c,inLoop);\n  }\n else   if (sb instanceof ForStatementBlock) {\n    ret=true;\n  }\n else {\n    ret|=(inLoop && sb.requiresRecompilation());\n  }\n  return ret;\n}\n", "@SuppressWarnings(\"unchecked\") public Relation addPredecessor(Task targetTask, RelationType type, Duration lag)\n   {\n      //\n      // Ensure that we have a valid lag duration\n      //\n      if (lag == null)\n      {\n         lag = Duration.getInstance(0, TimeUnit.DAYS);\n      }\n\n      //\n      // Retrieve the list of predecessors\n      //\n      List<Relation> predecessorList = (List<Relation>) getCachedValue(TaskField.PREDECESSORS);\n\n      //\n      // Ensure that there is only one predecessor relationship between\n      // these two tasks.\n      //\n      Relation predecessorRelation = null;\n      Iterator<Relation> iter = predecessorList.iterator();\n      while (iter.hasNext() == true)\n      {\n         predecessorRelation = iter.next();\n         if (predecessorRelation.getTargetTask() == targetTask)\n         {\n            if (predecessorRelation.getType() != type || predecessorRelation.getLag().compareTo(lag) != 0)\n            {\n               predecessorRelation = null;\n            }\n            break;\n         }\n         predecessorRelation = null;\n      }\n\n      //\n      // If necessary, create a new predecessor relationship\n      //\n      if (predecessorRelation == null)\n      {\n         predecessorRelation = new Relation(this, targetTask, type, lag);\n         predecessorList.add(predecessorRelation);\n      }\n\n      //\n      // Retrieve the list of successors\n      //\n      List<Relation> successorList = (List<Relation>) targetTask.getCachedValue(TaskField.SUCCESSORS);\n\n      //\n      // Ensure that there is only one successor relationship between\n      // these two tasks.\n      //\n      Relation successorRelation = null;\n      iter = successorList.iterator();\n      while (iter.hasNext() == true)\n      {\n         successorRelation = iter.next();\n         if (successorRelation.getTargetTask() == this)\n         {\n            if (successorRelation.getType() != type || successorRelation.getLag().compareTo(lag) != 0)\n            {\n               successorRelation = null;\n            }\n            break;\n         }\n         successorRelation = null;\n      }\n\n      //\n      // If necessary, create a new successor relationship\n      //\n      if (successorRelation == null)\n      {\n         successorRelation = new Relation(targetTask, this, type, lag);\n         successorList.add(successorRelation);\n      }\n\n      return (predecessorRelation);\n   }", "private static boolean doDeleteDir ( File file , boolean recurse ) { if ( file != null && file . exists ( ) ) { if ( file . isFile ( ) || ! recurse ) { return file . delete ( ) ; } String [ ] fnames = file . list ( ) ; File child = null ; for ( int i = NUM_ ; i < fnames . length ; i ++ ) { child = new File ( file , fnames [ i ] ) ; if ( ! doDeleteDir ( child , recurse ) ) { return BOOL_ ; } } return file . delete ( ) ; } return BOOL_ ; }", "public String readLine() throws IOException {\n  if (finished)   throw new DccException(DccException.Reason.ChatNotConnected,user,\"Chat has already finished\");\n  String line=bufferedReader.readLine();\n  log.info(INPUT_CHAT_MARKER,\"<<<\" + line);\n  return line;\n}\n", "\tpublic void setX(int x_coord)\n\t{   if (this.theLocation == null)\n\t\t{   this.theLocation = new Point();  }\n\t\tthis.theLocation.setLocation(x_coord, this.theLocation.y);\n\t}\n", "public void testSchemasIgnoredWithFile ( ) throws ReplicatorException , InterruptedException { ReplicateFilter rf = new ReplicateFilter ( ) ; rf . setTungstenSchema ( STR_ ) ; rf . setFilePrefix ( STR_ ) ; filterHelper . setFilter ( rf ) ; verifyStmtIgnore ( filterHelper , NUM_ , STR_ , STR_ ) ; verifyStmtIgnore ( filterHelper , NUM_ , STR_ , STR_ ) ; verifyStmtIgnore ( filterHelper , NUM_ , STR_ , STR_ ) ; verifyStmtIgnore ( filterHelper , NUM_ , STR_ , STR_ ) ; verifyStmtIgnore ( filterHelper , NUM_ , STR_ , STR_ ) ; verifyStmtAccept ( filterHelper , NUM_ , STR_ , STR_ ) ; filterHelper . done ( ) ; }", "public static void assertScript ( final String script ) throws Exception { GroovyShell shell = new GroovyShell ( ) ; shell . evaluate ( script , genericScriptName ( ) ) ; }", "private void addWlstArguments(JvmLauncher java){\n  File serverDir=new File(getWeblogicHome(),\"server\");\n  java.addClasspathEntries(new File(serverDir,\"lib/weblogic.jar\"));\n  java.setMainClass(\"weblogic.WLST\");\n}", "protected Set<ObjectName> searchMBeans(MBeanServerExecutor pMBeanServerExecutor, String pMbeanPattern) {\n        try {\n            ObjectName oName = new ObjectName(pMbeanPattern);\n            return pMBeanServerExecutor.queryNames(oName);\n        } catch (MalformedObjectNameException e) {\n            return new HashSet<ObjectName>();\n        } catch (IOException e) {\n            return new HashSet<ObjectName>();\n        }\n    }", "@Override\n    public void writeFragmentTo(MwsWriter w) {\n        w.write(\"NextToken\", nextToken);\n        w.write(\"AmazonOrderId\", amazonOrderId);\n        w.writeList(\"OrderItems\", \"OrderItem\", orderItems);\n    }", "private void updateFilter ( ) { IFilter < T > filter ; try { filter = m_filterFactory . createFilter ( m_inputField . getText ( ) ) ; m_inputField . setBackground ( Color . WHITE ) ; } catch ( final RecognitionException e ) { m_inputField . setBackground ", "public void onRefreshComplete(){\n  state=State.PULL_TO_REFRESH;\n  resetHeader();\n  lastUpdated=System.currentTimeMillis();\n}\n", "boolean isEncrypted ( ) { return isEncrypted ; }", "public static void out(final String _debug_message){\n  out(_debug_message,null);\n}\n", "    private void configureColumn(TableColumn col, ColumnBindingInfos infos) {\n        col.setCellRenderer(infos.getRenderer());\n        col.setCellEditor(infos.getEditor());\n    }\n", "public static String convertMethodSignature ( String className , String methodName , String methodSig ) { return convertMethodSignature ( className , methodName , methodSig , STR_ ) ; }", "public CheckpointRecord ( BasicLogRecord rec ) { int txCount = ( Integer ) rec . nextVal ( INTEGER ) . asJavaVal ( ) ; this . lsn = rec . getLSN ( ) ; this . txNums = new ArrayList < Long > ( ) ; for ( int i = NUM_ ; i < txCount ; i ++ ) { txNums . add ( ( Long ) rec . nextVal ( BIGINT ) . asJavaVal ( ) ) ; } }", "private void sendBody ( OutputStream outputStream , long pending ) throws IOException { long BUFFER_SIZE = NUM_ * NUM_ ; byte [ ] buff = new byte [ ( int ) BUFFER_SIZE ] ; boolean sendEverything = pending == - NUM_ ; while ( pending > NUM_ || sendEverythi", "protected final UtlInvLine<RS, PurchaseInvoice, PurchaseInvoiceLine,\n    PurchaseInvoiceTaxLine, PurchaseInvoiceGoodsTaxLine> lazyGetUtlPurGdLn(\n      final Map<String, Object> pAddParam) throws Exception {\n    UtlInvLine<RS, PurchaseInvoice, PurchaseInvoiceLine,\n      PurchaseInvoiceTaxLine, PurchaseInvoiceGoodsTaxLine> utlInvLn = this\n        .utlPurInvGdLn;\n    if (utlInvLn == null) {\n      utlInvLn = new UtlInvLine<RS, PurchaseInvoice, PurchaseInvoiceLine,\n        PurchaseInvoiceTaxLine, PurchaseInvoiceGoodsTaxLine>();\n      utlInvLn.setUtlInvBase(lazyGetUtlInvBase(pAddParam));\n      utlInvLn.setInvTxMeth(lazyGetPurInvTxMeth(pAddParam));\n      utlInvLn.setIsMutable(false);\n      utlInvLn.setNeedMkTxCat(true);\n      utlInvLn.setLtlCl(PurchaseInvoiceGoodsTaxLine.class);\n      utlInvLn.setDstTxItLnCl(DestTaxGoodsLn.class);\n      FactoryPersistableBase<PurchaseInvoiceGoodsTaxLine> fctLtl =\n        new FactoryPersistableBase<PurchaseInvoiceGoodsTaxLine>();\n      fctLtl.setObjectClass(PurchaseInvoiceGoodsTaxLine.class);\n      fctLtl.setDatabaseId(getSrvDatabase().getIdDatabase());\n      utlInvLn.setFctLineTxLn(fctLtl);\n      //assigning fully initialized object:\n      this.utlPurInvGdLn = utlInvLn;\n    }\n    return utlInvLn;\n  }", "public static ExtensionRegistry addToRegistry(final FieldDescriptor extension,\r\n      final ExtensionRegistry registry) {\r\n    if (extension.getJavaType() == JavaType.MESSAGE) {\r\n      registry.add(extension, DynamicMessage.getDefaultInstance(extension.getMessageType()));\r\n    } else {\r\n      registry.add(extension);\r\n    }\r\n\r\n    return registry;\r\n  }", "public boolean isPatchVisible ( PatchSet ps , ChangeData cd ) throws OrmException { checkArgument ( cd . getId ( ) . equals ( ps . getId ( ) . getParentKey ( ) ) , STR_ , ps , cd . getId ( ) ) ; if ( ps . isDraft ( ) && ! isDraftVisible ( cd . db ( ) , cd ) ) { return BOOL_ ; } return isVisible ( cd . db ( ) ) ; }", "public void stopExecution ( ) { interrupt ( ) ; }", "public static Vector3 max(Vector3 o1,Vector3 o2){\n  return new Vector3(Math.max(o1.x,o2.x),Math.max(o1.y,o2.y),Math.max(o1.z,o2.z));\n}\n", "@Override\n\tpublic void printContentStart(\n\t\tChainWriter out,\n\t\tWebSiteRequest req,\n\t\tHttpServletResponse resp\n\t) throws IOException, SQLException {\n\t\tout.print(getDescription());\n\t}", "public boolean isEmpty(){\n  return delegate.isEmpty();\n}\n", "public boolean hasAction ( String action ) { return getFilter ( ) . hasAction ( action ) ; }", "@Override public int hashCode(){\n  return id.hashCode();\n}\n", "    public void closeDialog(DialogOptions dialogOptions) {\n        ManagerFrameMain.getManager(dialogOptions.getParent()).applyFontColor(false, new Color(persistenceManager.gettIniFile().getValue(PersistenceManager.Sections.Appearance.name(), PersistenceManager.Keys.red_value_font_color.name(), 0), persistenceManager.gettIniFile().getValue(PersistenceManager.Sections.Appearance.name(), PersistenceManager.Keys.green_value_font_color.name(), 0), persistenceManager.gettIniFile().getValue(PersistenceManager.Sections.Appearance.name(), PersistenceManager.Keys.blue_value_font_color.name(), 0)), false);\n        this.closeWindow(dialogOptions);\n    }\n", "private void moveSlotBefore ( ) { int startSlot = NUM_ , endSlot = currentPage . getNumRecords ( ) - NUM_ ; int middleSlot = ( startSlot + endSlot ) / NUM_ ; if ( endSlot >= NUM_ ) { while ( middleSlot != startSlot ) { if ( searchRange . largerThan ( getK", "public int numSquares1(int n){\n  while (n % 4 == 0)   n/=4;\n  if (n % 8 == 7)   return 4;\n  for (int a=0; a * a <= n; a++) {\n    int b=(int)Math.sqrt(n - a * a);\n    if (a * a + b * b == n) {\n      return 1 + (a > 0 ? 1 : 0);\n    }\n  }\n  return 3;\n}\n", "\tprivate int getPrimaryTrainingForSkill (int skillIndex) {\n\t\tswitch (skillIndex) {\n\t\t\tcase PlayerSkill.KEEPER :\n\t\t\t\treturn TrainingType.GOALKEEPING;\n\n\t\t\tcase PlayerSkill.PLAYMAKING :\n\t\t\t\treturn TrainingType.PLAYMAKING;\n\n\t\t\tcase PlayerSkill.PASSING :\n\t\t\t\treturn TrainingType.SHORT_PASSES;\n\n\t\t\tcase PlayerSkill.WINGER :\n\t\t\t\treturn TrainingType.CROSSING_WINGER;\n\n\t\t\tcase PlayerSkill.DEFENDING :\n\t\t\t\treturn TrainingType.DEFENDING;\n\n\t\t\tcase PlayerSkill.SCORING :\n\t\t\t\treturn TrainingType.SCORING;\n\n\t\t\tcase PlayerSkill.SET_PIECES :\n\t\t\t\treturn TrainingType.SET_PIECES;\n\n\t\t}\n\n\t\treturn 0;\n\t}\n", "public void insert(int elem){\n  heap=Arrays.copyOf(heap,size + 1);\n  int i=size;\n  int parentIndex=(int)Math.floor((i - 1) / 2);\n  while (i > 0 && elem > heap[parentIndex]) {\n    heap[i]=heap[parentIndex];\n    i=parentIndex;\n    parentIndex=(int)Math.floor((i - 1) / 2);\n  }\n  heap[i]=elem;\n  size++;\n}\n", "public void run() {\n    /**\n     * Ensure we start fresh.\n     */\n    closeServerSocket();\n    closeAllAcceptedSockets();\n\n    // start the server socket\n    try {\n      serverSocket = new ServerSocket(port);\n    } catch (Exception e) {\n      getLogger().error(\n        \"error starting SocketReceiver (\" + this.getName()\n        + \"), receiver did not start\", e);\n      active = false;\n\n      return;\n    }\n\n    Socket socket = null;\n\n    try {\n      getLogger().debug(\"in run-about to enter while not interrupted loop\");\n\n      active = true;\n\n      while (!rThread.isInterrupted()) {\n        // if we have a socket, start watching it\n        if (socket != null) {\n          getLogger().debug(\n                  \"socket not null - creating and starting socketnode\");\n          socketList.add(socket);\n\n          SocketNode13 node = new SocketNode13(socket, this);\n          synchronized (listenerList) {\n            for (Iterator iter = listenerList.iterator();\n                 iter.hasNext();) {\n                SocketNodeEventListener l =\n                        (SocketNodeEventListener) iter.next();\n                node.addSocketNodeEventListener(l);\n            }\n          }\n          socketMap.put(socket, node);\n          new Thread(node).start();\n          socket = null;\n        }\n\n        getLogger().debug(\"waiting to accept socket\");\n\n        // wait for a socket to open, then loop to start it\n        socket = serverSocket.accept();\n        getLogger().debug(\"accepted socket\");\n      }\n    } catch (Exception e) {\n      getLogger().warn(\n        \"exception while watching socket server in SocketReceiver (\"\n        + this.getName() + \"), stopping\");\n    }\n\n    getLogger().debug(\"{} has exited the not interrupted loop\", getName());\n\n    // socket not watched because we a no longer running\n    // so close it now.\n    if (socket != null) {\n      try {\n        socket.close();\n      } catch (IOException e1) {\n        getLogger().warn(\"socket exception caught - socket closed\");\n      }\n    }\n\n    getLogger().debug(\"{} is exiting main run loop\", getName());\n  }", "private void sendingMessage ( boolean isSending , String message ) { streamActv . setEnabled ( ! isSending ) ; textView . setEnabled ( ! isSending ) ; messageEt . setEnabled ( ! isSending ) ; topicActv . setEnabled ( ! isSending ) ; sendBtn . setEnabled (", "private Cell detectAndAddHit(float x,float y){\n  final Cell cell=checkForNewHit(x,y);\n  if (cell != null) {\n    Cell fillInGapCell=null;\n    final ArrayList<Cell> pattern=mPattern;\n    if (!pattern.isEmpty()) {\n      final Cell lastCell=pattern.get(patter", "    public void write(byte[] b, int off, int len) throws IOException {\n        out.write(b, off, len);\n        writtenCounter += len;\n\n        if (writtenCounter > lengthReset) {\n            writtenCounter -= lengthReset;\n            scheduler.resetTrigger(triggerName);\n        }\n    }\n", "public void stop() throws Exception {\n    // close all connectors and release all binding ports\n    for (Connector connector : mServer.getConnectors()) {\n      connector.stop();\n    }\n\n    mServer.stop();\n  }", "public OvhBoostHistory serviceName_boostHistory_date_GET(String serviceName, java.util.Date date) throws IOException {\n\t\tString qPath = \"/hosting/web/{serviceName}/boostHistory/{date}\";\n\t\tStringBuilder sb = path(qPath, serviceName, date);\n\t\tString resp = exec(qPath, \"GET\", sb.toString(), null);\n\t\treturn convertTo(resp, OvhBoostHistory.class);\n\t}", "@Override\n    public boolean isImplicitBeanArchivesScanningDisabled() {\n        boolean enableImplicitBeanArchivesValue = (Boolean) this.properties.get(\"enableImplicitBeanArchives\");\n\n        if (tc.isWarningEnabled() && !hasLoggedNoImplicitMsg && !enableImplicitBeanArchivesValue) {\n            hasLoggedNoImplicitMsg = true;\n            Tr.warning(tc, \"implicit.bean.scanning.disabled.CWOWB1009W\");\n        }\n\n        return !enableImplicitBeanArchivesValue;\n    }", "public DBMSEvent extract ( String eventId ) throws ReplicatorException , InterruptedException ;", "    private void sendACK(int seqnAck) {\n        List<Integer> selectedAckList = new ArrayList<Integer>();\n        \n        synchronized (inputQueue) {\n            Iterator<IQElt> eachInQueue = inputQueue.iterator();\n            \n            while (eachInQueue.hasNext() && (selectedAckList.size() < MAXQUEUESIZE)) {\n                IQElt anIQElt = eachInQueue.next();\n\n                if (anIQElt.seqnum > seqnAck) {\n                    selectedAckList.add(new Integer(anIQElt.seqnum));\n                }\n            }\n        }\n        \n        // PERMIT DUPLICATE ACKS. Just a list and one small message.\n        sendACK(seqnAck, selectedAckList);\n    }\n", "    public void printData() {\n        for (IntersectionConstants.Approach approach : dataByApproach.keySet()) {\n            S data = dataByApproach.get(approach);\n            logger.debug(\"  Approach: \" + approach.toString() + \", data: \" + data);\n        }\n    }\n", "public CSpecialInstructionsModel ( ) { m_descriptions . add ( new CCallsDescription ( ) ) ; m_descriptions . add ( new CReadsDescription ( ) ) ; m_descriptions . add ( new CWritesDescription ( ) ) ; }", "\tpublic PrecisionDimension inverseTransformDimension(PrecisionDimension inDimension)\n\t{ \n\t\tPrecisionDimension outDimension = \n\t\t\tnew PrecisionDimension(\n\t\t\t\tthis.inverseTransformX(inDimension.preciseWidth - \n\t\t\t\t\tthis.inverseTransformX(0.0)),\n\t\t\t\tthis.inverseTransformY(inDimension.preciseHeight - \n\t\t\t\t\tthis.inverseTransformY(0.0)));\n\t\t\n\t\treturn(outDimension);\n\t}\n", "\tpublic String getRemoveAllSemanticAuxText(Object object) {\n\t\tif (object == null) {\n\t\t\treturn INodeTextProvider.NULL_TEXT;\n\t\t}\n\t\treturn doGetRemoveAllSemanticAuxText((AtcCollectionProcess)object);\n\t}\n", "Future < Job > updateNow ( ) { this . updated_at = System . currentTimeMillis ( ) ; return this . set ( STR_ , String . valueOf ( updated_at ) ) ; }", "  public void fireCommentEvent(CommentEvent event) {\n    Iterator it = getEventListenerList().getCommentListeners().iterator();\n    while (it.hasNext()) {\n      CommentListener listener = (CommentListener)it.next();\n      if (event.getType() == CommentEvent.COMMENT_ADDED) {\n        listener.commentAdded(event);\n      } else if (event.getType() == CommentEvent.COMMENT_REMOVED) {\n        listener.commentRemoved(event);\n      } else if (event.getType() == CommentEvent.COMMENT_APPROVED) {\n        listener.commentApproved(event);\n      } else if (event.getType() == CommentEvent.COMMENT_REJECTED) {\n        listener.commentRejected(event);\n      }\n\n      // has the event been vetoed?\n      if (event.isVetoed()) {\n        break;\n      }\n    }\n  }\n", "public FileHandler(int size,int limit,String directory) throws MqttException {\n  sizeLimit=(size <= 0) ? DEFAULT_SIZE : size;\n  noOfFiles=(limit <= 0) ? DEFAULT_LIMIT : limit;\n  if (directory == null || directory.equals(\"\"))   throw new MqttException(MqttException.REASON_CODE_UNABLE_TO_WRITE);\n  this.directory=directory;\n  try {\n    validateLog();\n  }\n catch (  Exception e) {\n    throw new MqttException(MqttException.REASON_CODE_UNABLE_TO_WRITE);\n  }\n}\n", "@Override\n    public void setAsText(final String text) {\n        if (BeanUtils.isNull(text)) {\n            setValue(null);\n            return;\n        }\n        try {\n            Object newValue = Long.valueOf(text);\n            setValue(newValue);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse long.\", e);\n        }\n    }", "default Map<String,String> snapshot(){\n  final Map<String,String> map=new LinkedHashMap<>();\n  forEach(null);\n  return Collections.unmodifiableMap(map);\n}\n", "public static boolean writeObjectToFile(Object obj, File f) {\r\n        try {\r\n            FileOutputStream fout = new FileOutputStream(f);\r\n            ObjectOutputStream oos = new ObjectOutputStream(fout);\r\n            oos.writeObject(obj);\r\n            oos.close();\r\n        } catch (Exception e) {\r\n            System.out.println(\"Error writing Object to file: \"\r\n                    + e.getMessage());\r\n            return false;\r\n        }\r\n        return true;\r\n    }", "public FileWriterWithEncoding ( String filename , CharsetEncoder encoding , boolean append ) throws IOException { this ( new File ( filename ) , encoding , append ) ; }", "private static List<String> parseForSummarise(final Reader input, final ObjectMapper inputMapper,\n\t\t\tfinal JDefaultDict<String, AtomicInteger> emptyCounts,\n\t\t\tfinal JDefaultDict<String, AtomicInteger> nonEmptyCounts,\n\t\t\tfinal JDefaultDict<String, AtomicBo", "\tpublic String getMessageFrame(String destination,String msgID, String body){\n\t\t\n\t\treturn \"MESSAGE\\ndestination:\"+destination+\"\\nmessage-id:\"+msgID+\n\t\t\t\t\"\\n\"+body+\"\\u0000\\n\";\n\t}\n", "public void deleteProject ( final Project project ) throws CouldntDeleteException { Preconditions . checkNotNull ( project , STR_ ) ; try { m_database . getContent ( ) . delete ( project . getNative ( ) ) ; } catch ( final com . google . security . zynami", "public Map<String, String> getParticipantProperties(int surveyId, String token, List<String> tokenProperties) throws LimesurveyRCException {\n        LsApiBody.LsApiParams params = getParamsWithKey(surveyId);\n        Map<String, String> queryProperties = n", "public Configuration allowMultipleRootScopes ( ) { this . multipleRootScopeCheckConfiguration = new MultipleRootScopeCheckOffConfiguration ( ) ; return this ; }", "public static void OuterProductUpdate(Matrix A, Vec x, Vec y, double c)\n    {\n        if (x.length() != A.rows() || y.length() != A.cols())\n            throw new ArithmeticException(\"Matrix dimensions do not agree with outer product\");\n        if (x.isSparse())\n            for (IndexValue iv : x)\n                A.updateRow(iv.getIndex(), iv.getValue() * c, y);\n        else\n            for (int i = 0; i < x.length(); i++)\n            {\n                double rowCosnt = c * x.get(i);\n                A.updateRow(i, rowCosnt, y);\n            }\n    }", "byte [ ] urlDecode ( byte [ ] data ) ;", "private TungstenProperties runScript ( String cmd ) throws ReplicatorException { return runScript ( cmd , null ) ; }", "\tpublic void setFocusSize(int focusSize) {\n\t\tthis.focusSize = focusSize;\n\t\tcursorBounds = new Rectangle2D.Double(0, 0, focusSize, focusSize);\n\t}\n", "public String consumeOpeningTag ( ) { String rtn = getOpeningTag ( ) ; for ( int i = getAttributeCount ( ) - NUM_ ; i >= NUM_ ; i -- ) { getAttribute ( i ) . consumeRawValue ( ) ; } return rtn ; }", "  private void readIndex() {\n    File indexFile = new File(blog.getIndexesDirectory(), \"email-subscriptions.index\");\n    if (indexFile.exists()) {\n      try {\n        BufferedReader reader = new BufferedReader(new FileReader(indexFile));\n        String emailAddress = reader.readLine();\n        while (emailAddress != null) {\n          emailAddresses.add(emailAddress);\n          emailAddress = reader.readLine();\n        }\n\n        reader.close();\n      } catch (Exception e) {\n        log.error(\"Error while reading index\", e);\n      }\n    }\n  }\n", "private void readObject ( ObjectInputStream stream ) throws IOException , ClassNotFoundException { stream . defaultReadObject ( ) ; attrs = unmarshalAttributes ( stream ) ; }", "long size ( ) ;", "public static void registerSerializerFactory(SerializerFactory factory){\n  String method;\nsynchronized (_factories) {\n    method=factory.getSupportedMethod();\n    _factories.put(method,factory);\n  }\n}\n", "\tprotected void addNoresizePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Frame_noresize_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_Frame_noresize_feature\", \"_UI_Frame_type\"),\n\t\t\t\t DxlPackage.Literals.FRAME__NORESIZE,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public static double log2(double a){\n  return Math.log(a) / log2;\n}", "public int size ( ) { return this . archives . size ( ) ; }", "\tprivate Object getInstance(String classname, Class baseClass) {\n\t\tObject o = null;\n\t\ttry {\n\t\t\tClass goClass = Class.forName(classname);\n\t\t\tif (!(baseClass.isAssignableFrom(goClass)))\n\t\t\t\treturn null;\n\t\t\to = goClass.newInstance();\n\t\t} catch (Exception ex) {\n\t\t\treturn null;\n\t\t}\n\t\treturn o;\n\t}\n", "public Properties getSystemProperties() {\n\n    Properties properties = new Properties();     \n    properties.putAll(System.getenv());\n    properties.putAll(System.getProperties());\n\n    return properties;\n  }", "public static void runExample(AdManagerServices adManagerServices, AdManagerSession session)\n      throws RemoteException {\n    // Get the LabelService.\n    LabelServiceInterface labelService =\n        adManagerServices.get(session, LabelServiceInterface.class);\n\n    // Create a competitive exclusion label.\n    Label competitiveExclusionLabel = new Label();\n    competitiveExclusionLabel.setName(\n        \"Car company label #\" + new Random().nextInt(Integer.MAX_VALUE));\n    competitiveExclusionLabel.setTypes(new LabelType[] {LabelType.COMPETITIVE_EXCLUSION});\n\n    // Create an ad unit frequency cap label.\n    Label adUnitFrequencyCapLabel = new Label();\n    adUnitFrequencyCapLabel.setName(\n        \"Don't run too often label #\" + new Random().nextInt(Integer.MAX_VALUE));\n    adUnitFrequencyCapLabel.setTypes(new LabelType[] {LabelType.AD_UNIT_FREQUENCY_CAP});\n\n    // Create the labels on the server.\n    Label[] labels =\n        labelService.createLabels(new Label[] {competitiveExclusionLabel, adUnitFrequencyCapLabel});\n\n    for (Label createdLabel : labels) {\n      System.out.printf(\"A label with ID %d and name '%s' was created.%n\",\n          createdLabel.getId(), createdLabel.getName());\n    }\n  }", "void addAnnotation(@NonNull Annotation annotation){\n  annotations.put(annotation.annotationType(),annotation);\n}\n", "public static JBBPParser prepare(final String script, final int flags) {\n    return JBBPParser.prepare(script, JBBPBitOrder.LSB0, flags);\n  }", "\tprivate void stopRecordAction() {\n\t\tif ((programState == ProgramState.TRACKING) && (isRecording == true)) {\n\t\t\tisRecording = false;\n\t\t\tinTrackingState();\n\t\t\tPManager.getDefault().getVideoManager().getFilterManager()\n\t\t\t\t\t.enableFilter(\"Recorder\", false);\n\t\t\tfinal FileDialog fileDialog = new FileDialog(shell, SWT.SAVE);\n\t\t\tfinal String file_name = fileDialog.open();\n\t\t\t((VideoRecorder) PManager.getDefault().getVideoManager()\n\t\t\t\t\t.getFilterManager().getFilterByName(\"Recorder\"))\n\t\t\t\t\t.saveVideoFile(file_name);\n\t\t}\n\n\t}\n", "public boolean isMethodResult ( ) { return method != null ; }", "private void checkClassAndSync ( Class < ? extends IPacket > clazz ) { if ( ! registeredClasses . contains ( clazz ) ) { throw new RuntimeException ( STR_ + clazz + STR_ ) ; } while ( isCurrentlySendingSemaphor ) { Thread . yield ( ) ; } isCurrentlySendin", "private static void enableAll ( final BreakpointManager manager ) { for ( int i = NUM_ ; i < manager . getNumberOfBreakpoints ( BreakpointType . REGULAR ) ; i ++ ) { manager . setBreakpointStatus ( BreakpointType . REGULAR , BreakpointStatus . BREAKPOINT_", "\tpublic void addCode(final String code){\n\t\t// Don't add the code if it's already in the table.\n\t\tif (foodCodes.contains(code))\n\t\t\treturn;\n\n\t\tfoodCodes.add(code);\n\n\t}\n", "public static double [ ] matrixToArray ( double [ ] [ ] input , int fromRow , int rows ) { return matrixToArray ( input , fromRow , rows , NUM_ , input [ NUM_ ] . length ) ; }", "public synchronized void error(Product p,Exception e){\n  if ((e != null) && (e.getMessage() != null)) {\n    String message=\"\";\n    if (p != null) {\n      String o=p.getOrigin();\n      if (o != null) {\n        String file=o.substring(o.lastIndexOf(\"/\") + 1,o.length());\n        message=\"(\" + file + \")\";\n      }\n    }\n    processingErrors+=e.getMessage() + message + \"<br>\";\n  }\n  errorCounter++;\n  if ((endCounter + errorCounter) >= getTotalProcessed()) {\n    processingsDone(null);\n  }\n}\n", "R borrow ( K key , Callable < ? extends R > loader ) ;", "public int doSetData(Object objData, boolean bDisplayOption, int iMoveMode)\n    {\n        int iErrorCode = DBConstants.NORMAL_RETURN;\n        FieldListener nextListener = (FieldListener)this.getNextValidListener(iMoveMode);\n        if (nextListener != null)\n        {\n            boolean bOldState = nextListener.setEnabledListener(false);      // Disable the listener to eliminate echos\n            iErrorCode = nextListener.doSetData(objData, bDisplayOption, iMoveMode);\n            nextListener.setEnabledListener(bOldState);   // Reenable\n        }\n        else if (m_owner != null)\n            iErrorCode = this.getOwner().doSetData(objData, bDisplayOption, iMoveMode);\n        return iErrorCode;\n    }", "public void paintOptionPaneBackground ( SynthContext context , Graphics g , int x , int y , int w , int h ) { }", "public Handle ( int tag , String owner , String name , String desc ) { this . tag = tag ; this . owner = owner ; this . name = name ; this . desc = desc ; }", "@Override protected void doBefore(){\n  filePrefs.add(new ApplicationPreference(\"filePref1\"));\n  filePrefs.add(new ApplicationPreference(\"filePref2\"));\n  persistedPrefs.add(new ApplicationPreference(PERSISTED_APP_PREF1));\n  persistedPrefs.add(new ApplicationPreference(PERSISTED_APP_PREF2));\n}\n", "public String run ( String scriptName , String argument ) throws ResourceException , ScriptException { Binding binding = new Binding ( ) ; binding . setVariable ( STR_ , argument ) ; Object result = run ( scriptName , binding ) ; return result == null ? S", "        public void processMessage(Message m, ReplyHandler handler) {\n            // allow only udp replies.\n            if(handler instanceof UDPReplyHandler) {\n                if(hosts.remove(handler)) {\n                    if(LOG.isTraceEnabled())\n                        LOG.trace(\"Recieved: \" + m);\n                }\n                // OPTIMIZATION: if we've gotten succesful responses from\n                // each hosts, unregister ourselves early.\n                if(hosts.isEmpty())\n                    RouterService.getMessageRouter().\n\t\t\t\t\t  unregisterMessageListener(guid, this);\n            }\n        }\n", "public static Number multiply(Number left,Character right){\n  return NumberNumberMultiply.multiply(Integer.valueOf(right),left);\n}\n", "public static String chop(String s,int i,String eol){\n  if (i == 0 || s == null || eol == null) {\n    return s;\n  }\n  int length=s.length();\n  if (eol.length() == 2 && s.endsWith(eol)) {\n    length-=2;\n    i-=1;\n  }\n  if (i > 0) {\n    length-=i;\n  }\n  if (length < 0) {\n    length=0;\n  }\n  return s.substring(0,length);\n}\n", "private boolean more(){\n  if (nextOffset < 0) {\n    return false;\n  }\n  int skippedWS=0;\n  char c=0;\n  while (nextOffset + skippedWS < nextFencePost) {\n    c=s.charAt(nextOffset + skippedWS);\n    if (Character.isWhitespace(c)) {\n      skippedWS++;\n    }\n else {\n      break;\n    }\n  }\n  if (nextOffset + 1 + skippedWS < nextFencePost && c == '*' && s.charAt(skippedWS + nextOffset + 1) == '/') {\n    nextOffset=-1;\n    return false;\n  }\n  if (nextOffset + skippedWS < nextFencePost) {\n    return true;\n  }\n  nextOffset=-1;\n  return false;\n}\n", "@Deprecated\n    public static BigDecimal toBigDecimalTrunc(BigDecimal universalTime, int timeScale)\n    {\n        TimeScaleData data = getTimeScaleData(timeScale);\n        BigDecimal units = new BigDecimal(data.units);\n        BigDecimal epochOffset = new BigDecimal(data.epochOffset);\n        \n        return universalTime.divide(units, BigDecimal.ROUND_DOWN).subtract(epochOffset);\n    }", "\tprotected void nodeChanged() {\n\t    FileNode        parent = getParent();\n\n\t    if (parent != null) {\n\t\tFileNode[]   path = parent.getPath();\n\t\tint[]        index = { getIndexOfChild(parent, this) };\n\t\tObject[]     children = { this };\n\n\t\tfireTreeNodesChanged(FileSystemModel2.this, path,  index,\n\t\t\t\t     children);\n\t    }\n\t}\n", "@Override\n    public GetPresetResult getPreset(GetPresetRequest request) {\n        request = beforeClientExecution(request);\n        return executeGetPreset(request);\n    }", "public void killSession(CmsObject cms, CmsUUID sessionid) throws CmsException {\n\n        OpenCms.getRoleManager().checkRole(cms, CmsRole.ACCOUNT_MANAGER);\n        m_sessionStorageProvider.remove(sessionid);\n\n    }", "public void writeToFile(String filePath, String fileData)\n        throws IOException {\n        \n        writeToFile(filePath, fileData, false);\n    }", "\tpublic void initializeSectionToolBarColors() {\n\t\tif (getColor(FormColors.TB_BG) != null)\n\t\t\treturn;\n\t\tcreateTitleBarGradientColors();\n\t\tcreateTitleBarOutlineColors();\n\t}\n", "public void rotateY(double theta){\n  Matrix3D tmp=new Matrix3D();\n  double c=Math.cos(theta);\n  double s=Math.sin(theta);\n  tmp.set(2,2,c);\n  tmp.set(2,0,-s);\n  tmp.set(0,2,s);\n  tmp.set(0,0,c);\n  preMultiply(tmp);\n}", "@SuppressWarnings(\"PMD.AvoidCatchingNPE\")\n  private Map<K, V> getAll(Set<? extends K> keys, boolean updateAccessTime) {\n    requireNotClosed();\n    boolean statsEnabled = statistics.isEnabled();\n    long start = statsEnabled ? ticker.read() : 0L;\n    try {\n      Map<K, Expirable<V>> entries = getAndFilterExpiredEntries(keys, updateAccessTime);\n\n      if (entries.size() != keys.size()) {\n        List<K> keysToLoad = keys.stream()\n            .filter(key -> !entries.containsKey(key))\n            .collect(Collectors.<K>toList());\n        entries.putAll(cache.getAll(keysToLoad));\n      }\n\n      Map<K, V> result = copyMap(entries);\n      if (statsEnabled) {\n        statistics.recordGetTime(ticker.read() - start);\n      }\n      return result;\n    } catch (NullPointerException | IllegalStateException | ClassCastException | CacheException e) {\n      throw e;\n    } catch (RuntimeException e) {\n      throw new CacheException(e);\n    } finally {\n      dispatcher.awaitSynchronous();\n    }\n  }", "public Image addImage(File file) throws IOException {\n        String contentType = ImageUtils.getContentType(file);\n        String base64Content = ImageUtils.getImageAsBase64(file);\n\n        Image image = new Image(file.getName(), contentType, base64Content);\n        documentation.addImage(image);\n\n        return image;\n    }", "public String toStringForQuestState(){\n  final StringBuilder sb=new StringBuilder();\n  boolean first=true;\n  for (  final Map.Entry<String,Integer> e : entrySet()) {\n    if (first) {\n      first=false;\n    }\n else {\n      sb.append(';');\n    }\n    sb.append(e.getKey());\n    sb.append(\"=\");\n    sb.append(e.getValue());\n  }\n  return sb.toString();\n}\n", "public void init(Locale locale) throws CLIException {\n  Class defClass=getDefinitionClass();\n  getProductName(defClass);\n  getCommands(defClass);\n}\n", "protected void saveNow(){\n  WalletFiles files=vFileManager;\n  if (files != null) {\n    try {\n      files.saveNow();\n    }\n catch (    IOException e) {\n      log.error(\"Failed to save wallet to disk!\",e);\n      Thread.UncaughtExceptionHandler handler=Threading.uncaughtExceptionHandler;\n      if (handler != null)       handler.uncaughtException(Thread.currentThread(),e);\n    }\n  }\n}\n", "private static int getThumbnailKind(ResizeOptions resizeOptions) {\n    if (ThumbnailSizeChecker.isImageBigEnough(\n        MICRO_THUMBNAIL_DIMENSIONS.width(),\n        MICRO_THUMBNAIL_DIMENSIONS.height(),\n        resizeOptions)) {\n      return MediaStore.Images.Thumbnails.MICRO_KIND;\n    } else if (ThumbnailSizeChecker.isImageBigEnough(\n        MINI_THUMBNAIL_DIMENSIONS.width(),\n        MINI_THUMBNAIL_DIMENSIONS.height(),\n        resizeOptions)) {\n      return MediaStore.Images.Thumbnails.MINI_KIND;\n    } else {\n      return NO_THUMBNAIL;\n    }\n  }", "public final boolean contains ( CharSequence s ) { return toString ( ) . contains ( s ) ; }", "public void addTableModelListener(TableModelListener l){\n  if (!listeners.contains(l))   listeners.add(l);\n}\n", "public static void notFoundException(Exception e){\n  throw new MappingException(e.getMessage());\n}\n", "void membersMoved ( final Set < BaseType > affectedTypes ) ;", "public static Calendar reduceCalendarMin(Calendar calendar){\n  int roundedHours=Math.round(calendar.get(Calendar.MINUTE) / 60f);\n  calendar.add(Calendar.HOUR,roundedHours);\n  calendar.set(Calendar.MILLISECOND,0);\n  calendar.set(Calendar.SECOND,0);\n  calendar.set(Calendar.MINUTE,0);\n  return calendar;\n}\n", "\tpublic void connect()throws DBConnectionException, XmlIOException {\n\t\t// connection to the DBMS\n\t\tthis.jdbcConnector = OracleJDBConnector.getInstance();\n\t\tif (!this.jdbcConnector.isConnected())\n\t\t\tthis.jdbcConnector.connect();\n\t}\n", "public void marshall(ArchiveContainerSettings archiveContainerSettings, ProtocolMarshaller protocolMarshaller) {\n\n        if (archiveContainerSettings == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n       ", "    public void setObject(int parameterIndex, Object x) throws SQLException{\n      try{\n        ps.setObject(parameterIndex, x);\n      }\n      catch (SQLException sqlex){\n        log.debug(getLogString() + \" Exception: \" + sqlex);\n        throw sqlex;\n      }\n      setContent(parameterIndex, x);\n    }\n", "\tpublic void appendBytes(byte[] bytes, int length){\n\t\tthrow new RuntimeException(\"Stub\");\n\t}\n", "public void deleteShare(String id,String zoneName) throws IsilonException {\n  String uriWithZoneName=getURIWithZoneName(id,zoneName);\n  delete(_baseUrl.resolve(URI_SMB_SHARES),uriWithZoneName,\"share\");\n}\n", "public Transaction(String transaction){\n  String[] a=transaction.split(\"\\\\s+\");\n  who=a[0];\n  when=new Date(a[1]);\n  amount=Double.parseDouble(a[2]);\n  if (Double.isNaN(amount) || Double.isInfinite(amount))   throw new IllegalArgumentException(\"Amount cannot be NaN or infinite\");\n}\n", "byte [ ] buildHttpMessage ( List < String > headers , byte [ ] body ) ;", "public void addConnectionListener(ConnectionListener listener){\n  connectionListeners.addElement(listener);\n}\n", "\tpublic DDLWriter writer() {\n\t\treturn writer;\n\t}\n", "Thread newStartedThread(Runnable runnable){\n  Thread t=new Thread(runnable);\n  t.setDaemon(true);\n  t.start();\n  return t;\n}\n", "public static IMessageSender createTransferMessageSenderFromEntityPath(MessagingFactory messagingFactory, String entityPath, String viaEntityPath)  throws InterruptedException, ServiceBusException\n    {\n        return Utils.completeFuture(createTransferMessageSenderFromEntityPathAsync(messagingFactory, entityPath, viaEntityPath));\n    }", "protected void buildGetMethod(ClassVisitor cw,\n                                  ClassDefinition classDef,\n                                  FieldDefinition fieldDef) {\n        MethodVisitor mv;\n        // Get method\n        {\n            mv = cw.visitMethod( Opcodes.ACC_PUBLIC,\n                    fieldDef.getReadMethod(),\n                    Type.getMethodDescriptor( Type.getType( BuildUtils.getTypeDescriptor( fieldDef.getTypeName() ) ),\n                            new Type[]{} ),\n                    null,\n                    null );\n            mv.visitCode();\n            Label l0 = null;\n            if ( this.debug ) {\n                l0 = new Label();\n                mv.visitLabel( l0 );\n            }\n            mv.visitVarInsn( Opcodes.ALOAD,\n                    0 );\n            if ( ! fieldDef.hasOverride() ) {\n                mv.visitFieldInsn( Opcodes.GETFIELD,\n                                   BuildUtils.getInternalType( classDef.getClassName() ),\n                                   fieldDef.getName(),\n                                   BuildUtils.getTypeDescriptor( fieldDef.getTypeName() ) );\n                mv.visitInsn( Type.getType( BuildUtils.getTypeDescriptor( fieldDef.getTypeName() ) ).getOpcode( Opcodes.IRETURN ) );\n            } else {\n                mv.visitMethodInsn( INVOKESPECIAL,\n                                    BuildUtils.getInternalType( classDef.getSuperClass() ),\n                                    BuildUtils.getterName( fieldDef.getName(), fieldDef.getOverriding() ),\n                                    Type.getMethodDescriptor( Type.getType( BuildUtils.getTypeDescriptor( fieldDef.getOverriding() ) ), new Type[]{} ),\n                                    false );\n                mv.visitTypeInsn( CHECKCAST, BuildUtils.getInternalType( fieldDef.getTypeName() ) );\n                mv.visitInsn( BuildUtils.returnType( fieldDef.getTypeName() ) );\n            }\n\n            Label l1 = null;\n            if ( this.debug ) {\n                l1 = new Label();\n                mv.visitLabel( l1 );\n                mv.visitLocalVariable( \"this\",\n                        BuildUtils.getTypeDescriptor( classDef.getClassName() ),\n                        null,\n                        l0,\n                        l1,\n                        0 );\n            }\n            mv.visitMaxs( 0,\n                    0 );\n            mv.visitEnd();\n        }\n    }", "public XAConnection getXAConnection() throws SQLException {\n\n        // Comment out before public release:\n        System.err.print(\"Executing \" + getClass().getName()\n                         + \".getXAConnection()...\");\n\n        try {\n            Class.forName(driver).newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new SQLException(\"Error opening connection: \"\n                                   + e.getMessage());\n        } catch (IllegalAccessException e) {\n            throw new SQLException(\"Error opening connection: \"\n                                   + e.getMessage());\n        } catch (InstantiationException e) {\n            throw new SQLException(\"Error opening connection: \"\n                                   + e.getMessage());\n        }\n\n        JDBCConnection connection =\n            (JDBCConnection) DriverManager.getConnection(url, connProperties);\n\n        // Comment out before public release:\n        System.err.print(\"New phys:  \" + connection);\n\n        JDBCXAResource xaResource = new JDBCXAResource(connection, this);\n        JDBCXAConnectionWrapper xaWrapper =\n            new JDBCXAConnectionWrapper(connection, xaResource,\n                                        connectionDefaults);\n        JDBCXAConnection xaConnection = new JDBCXAConnection(xaWrapper,\n            xaResource);\n\n        xaWrapper.setPooledConnection(xaConnection);\n\n        return xaConnection;\n    }", "\tpublic void setViewPoint(Vector3D viewPoint) {\n\t\tif (viewPoint == null)\n\t\t\tthis.viewPoint = viewPoint = new Vector3D(20,0,0);\n\t\telse\n\t\t\tthis.viewPoint = new Vector3D(viewPoint);\n\t\tviewDirection = new Vector3D(this.viewPoint);\n\t\tviewDirection.normalize();\n\t\tviewDirection.negate();\n\t\tfocalLength = viewPoint.norm();\n\t\tclipDistance = 0.25*focalLength;\n\t\tsaveViewPoint = new Vector3D(viewPoint);\n\t\tsaveViewDirection = new Vector3D(viewDirection);\n\t\tsetImagePlaneYDirection(imagePlaneYDirection); // calls fireTransformChangeEvent()\n\t}\n", "private VoiceChannel findUsersChannel ( MessageReceivedEvent event , Guild guild ) { VoiceChannel channel = null ; outerloop : for ( VoiceChannel channel1 : guild . getVoiceChannels ( ) ) { for ( net . dv8tion . jda . entities . User user : channel1 . getUsers ( ) ) { if ( user . getId ( ) . equals ( event . getAuthor ( ) . getId ( ) ) ) { channel = channel1 ; break outerloop ; } } } return channel ; }", "public static JDBC4ClientConnection get(String[] servers, String user,\n            String password, boolean isHeavyWeight, int maxOutstandingTxns, boolean reconnectOnConnectionLoss) throws Exception {\n        return get(servers, user, password, isHeavyWeight, maxOutstandingTxns, reconnectOnConnectionLoss, null, null);\n    }", "public void connect() throws ConnectException {\n        try {\n            connectToWebSocket();\n            setWebSocketListener();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Interrupted while connecting via WebSocket protocol\");\n        }\n    }", "  public void convert(ArrayList list) {\n    PLExpression        e;\n    ArrayList           params = new ArrayList(l.size());\n\n    for (int i = 0; i < l.size(); i++) {\n      params.add(((V2Expression)l.get(i)).convert());\n    }\n\n    e = new PLNameExpression(getTokenReference(), what);\n\n    e = new PLMethodCallExpression(getTokenReference(),\n                                   e,\n                                   params);\n\n    list.add(new PLExpressionStatement(getTokenReference(), e, null));\n  }\n", "@Override\n    public String getText()\n    {\n        if (_closed) {\n            return null;\n        }\n        // need to separate handling a bit...\n        switch (_currToken) {\n        case FIELD_NAME:\n            return _nodeCursor.currentName();\n        case VALUE_STRING:\n        case VALUE_NUMBER_INT:\n        case VALUE_NUMBER_FLOAT:\n            return currentNode().asText();\n// 28-Dec-2015, tatu: Not yet supported:\n//        case VALUE_EMBEDDED_OBJECT:\n        default:\n        \treturn (_currToken == null) ? null : _currToken.asString();\n        }\n    }", "  public void drawLine(Posn p1, Posn p2, IColor color){\n    drawLine(p1, p2, color.thisColor());\n  }\n", "    public AxisModule getModule(String name) {\n        AxisModule module = allModules.get(name);\n        if (module != null) {\n            return module;\n        }\n        // checks whether the version string seperator is not there in the\n        // modul", "@Override\n    public ListDistributionsByWebACLIdResult listDistributionsByWebACLId(ListDistributionsByWebACLIdRequest request) {\n        request = beforeClientExecution(request);\n        return executeListDistributionsByWebACLId(request);\n    }", "public ConcurrentSkipListMap ( SortedMap < K , ? extends V > m ) { this . comparator = m . comparator ( ) ; initialize ( ) ; buildFromSorted ( m ) ; }", "protected boolean readBoolSetting(final String key) throws CouldntLoadDataException {\n  return Boolean.parseBoolean(readSetting(key));\n}\n", "public boolean isRelease ( ) { return release ; }", "    public void setValueAt(Object aValue, int rowIndex, int columnIndex){\n        Object[] row = (Object[])m_rows.get(rowIndex);\n        row[columnIndex] = aValue;\n        m_rows.set(rowIndex, row);\n        fireTableRowsUpdated(rowIndex, rowIndex);\n    }\n", "private void collectionParallelStream(){\n  Stream<Trade> parallelStreams=trades.parallelStream();\n  parallelStreams.forEach(null);\n}\n", "public JKEmptyReportException ( ) { super ( ) ; }", "private Constants ( ) { }", "@Override\n  public final IProcessor lazyGet(\n    final Map<String, Object> pAddParam,\n      final String pBeanName) throws Exception {\n    IProcessor proc =\n      this.processorsMap.get(pBeanName);\n    if (proc == null) {\n      // locking:\n      synchronized (this.processorsMap) {\n        // make sure again whether it's null after locking:\n        proc = this.processorsMap.get(pBeanName);\n        if (proc == null) {\n          if (pBeanName.equals(PrcEntitiesPage.class.getSimpleName())) {\n            proc = createPutPrcEntitiesPage();\n          } else if (pBeanName.equals(PrcRefreshHndlI18n\n            .class.getSimpleName())) {\n            proc = lazyGetPrcRefreshHndlI18n(pAddParam);\n          } else if (pBeanName.equals(PrcAbout.class.getSimpleName())) {\n            proc = lazyGetPrcAbout(pAddParam);\n          }\n        }\n      }\n    }\n    if (proc == null && !this.isItSubfactory) {\n      throw new ExceptionWithCode(ExceptionWithCode.CONFIGURATION_MISTAKE,\n        \"There is no processor with name \" + pBeanName);\n    }\n    return proc;\n  }", "protected void init ( ) throws ConfigurationException , LoggingException { this . sqlEncoder = new SQLEncoder ( logger ) ; }", "public Socket createSocket ( String host , int port , InetAddress localHost , int localPort ) throws IOException , UnknownHostException { Socket socket = createBoundSocket ( new InetSocketAddress ( localHost , localPort ) ) ; connectSocket ( socket , new ", "public static void openBrowser(String url){\n  lastUrl=url;\n}\n", "public ClassNode makeArray ( ) { if ( redirect != null ) { ClassNode res = redirect ( ) . makeArray ( ) ; res . componentType = this ; return res ; } ClassNode cn ; if ( clazz != null ) { Class ret = Array . newInstance ( clazz , NUM_ ) . getClass ( ) ; c", "  public boolean equals(Vector other) {\n    return _equals(nativeObject, other.nativeObject);\n  }\n", "private static void appendNoDefaultValue(Document htmldoc,Element optdd){\n  Element p=htmldoc.createElement(HTMLUtil.HTML_P_TAG);\n  p.appendChild(htmldoc.createTextNode(HEADER_DEFAULT_VALUE));\n  p.appendChild(htmldoc.createTextNode(NO_DEFAULT_VALUE));\n  optdd.appendChild(p);\n}\n", "public RDFParseException(Throwable t,long lineNo,long columnNo){\n  super(t.getMessage() + getLocationString(lineNo,columnNo),t);\n  this.lineNo=lineNo;\n  this.columnNo=columnNo;\n}\n", "public Duration getWorkVariance()\n   {\n      Duration variance = (Duration) getCachedValue(ResourceField.WORK_VARIANCE);\n      if (variance == null)\n      {\n         Duration work = getWork();\n         Duration baselineWork = getBaselineWork();\n         if (work != null && baselineWork != null)\n         {\n            variance = Duration.getInstance(work.getDuration() - baselineWork.convertUnits(work.getUnits(), getParentFile().getProjectProperties()).getDuration(), work.getUnits());\n            set(ResourceField.WORK_VARIANCE, variance);\n         }\n      }\n      return (variance);\n   }", "public void addExtraCC ( Collection < Account . Id > who ) { ccFromCommandLine . addAll ( who ) ; }", "public static BufferedReader getBufferedReader(final File f) throws IOException {\n        BufferedReader br = null;\n        if ((f == null) || (!f.isFile())) {\n            return br;\n        }\n        if (f.getName().endsWith(\".gz\") || f.getName().endsWith(\".zip\") || f.getName().endsWith(\".tgz\")) {\n            br = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(f)), \"UTF-8\"));\n        } else {\n            br = new BufferedReader(new InputStreamReader(new FileInputStream(f), \"UTF-8\"));\n        }\n        return br;\n    }", "    public void add(String symbol, Type t, boolean isGlobal) throws TypeCheckException {\n        if (table.containsKey(symbol)) {\n            throw new TypeCheckException(\"Duplicate definition of \" + symbol);\n        }\n        \n        table.put(symbol, new SymTabEntry(t, isGlobal));\n    }\n", "    private boolean isStopword(Token word) {\n        // for each stopword\n        for (int i = 0; i < getStopWordProviderInstance().length(); i++) {\n            // is this word a stopword as specified\n            // by stopword String[] array ?\n            if (word.getString().equalsIgnoreCase(getStopWordProviderInstance().getStopWords()[i])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n", "public static JMenuItem addSetting(JMenu parent,final String name,BooleanSetting setting){\n  JMenuItem item=new SkinCheckBoxMenuItem(name,setting.getValue());\n  item.putClientProperty(SETTING,setting);\n  item.addActionListener(SETTING_LISTENER);\n  parent.add(item);\n  return item;\n}\n", "public ComponentConfigBuilder addItemInFieldset(String fieldsetLabel,String itemType,String itemLabel,String value){\n  String type=String.format(\"fieldset#%s\",itemType);\n  String label=String.format(\"%s#%s\",fieldsetLabel,itemLabel);\n  config.add(new ConfigurationEntry(currentTab,type,label,value));\n  return this;\n}\n", "    protected Clause getNextGoal(Clause c1, Clause c2, Resolution r) {\n        TmpClause nextClause = new TmpClause();\n        nextClause.positiveLiterals =\n            merge(\n                c2.getPositiveLiterals(),\n                c1.getPositiveLiterals(),\n                r.position2);\n        nextClause.negativeLiterals =\n            merge2(\n                c1.getNegativeLiterals(),\n                c2.getNegativeLiterals(),\n                r.position1);\n        return nextClause;\n    }\n", "\tpublic void retractEvent(BaseNode node, Fact fact) {\n\t\tIterator itr = this.listeners.iterator();\n\t\twhile (itr.hasNext()) {\n\t\t\tEngineEventListener eel = (EngineEventListener) itr.next();\n\t\t\teel.eventOccurred(new EngineEvent(this, EngineEvent.RETRACT_EVENT,\n\t\t\t\t\tnode, new Fact[] { fact }));\n\t\t}\n\t}\n", "public String distanceFunctionTipText(){\n  return \"The distance function to use for finding neighbours \" + \"(default: weka.core.EuclideanDistance). \";\n}\n", "public ResponsePacket executeQuery ( RequestPacket request , ConnectionContext context ) throws RemoteException , SQLException ;", "public static double meanDiffSq(GrayF32 imgA, GrayF32 imgB ) {\n\t\tInputSanityCheck.checkSameShape(imgA,imgB);\n\t\tif(BoofConcurrency.USE_CONCURRENT) {\n\t\t\treturn ImplImageStatistics_MT.meanDiffSq(imgA.data,imgA.startIndex,imgA.stride, imgB.data,imgB.startIndex,imgB.stride,imgA.height, imgA.width);\n\t\t} else {\n\t\t\treturn ImplImageStatistics.meanDiffSq(imgA.data,imgA.startIndex,imgA.stride, imgB.data,imgB.startIndex,imgB.stride,imgA.height, imgA.width);\n\t\t}\n\t}", "void onInject ( Object target ) ;", "protected void enqueue(MethodCall<?> methodCall){\n  if (!running.get()) {\n    throw new IllegalStateException(\"Cannot write to a closed service client\");\n  }\n  if (!pendingCalls.offer(methodCall)) {\n    throw new IllegalStateException(\"Call queue is full\");\n  }\n}\n", "@SuppressWarnings({\"unchecked\"}) public static <T>T[] join(Class<T> componentType,T[][] arrays){\n  if (arrays.length == 1) {\n    return arrays[0];\n  }\n  int length=0;\n  for (  T[] array : arrays) {\n    length+=array.length;\n  }\n  T[] result=(T[])Array.newInstance(componentType,length);\n  length=0;\n  for (  T[] array : arrays) {\n    System.arraycopy(array,0,result,length,array.length);\n    length+=array.length;\n  }\n  return result;\n}\n", "@VisibleForTesting\n    byte[] RSADecrypt(byte[] encryptedInput) throws IncompatibleDeviceException, CryptoException {\n        try {\n            PrivateKey privateKey = getRSAKeyEntry().getPrivateKey();\n            Cipher cipher = Cipher.getInstance(RSA_TRANSFORMATION);\n            cipher.init(Cipher.DECRYPT_MODE, privateKey);\n            return cipher.doFinal(encryptedInput);\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException e) {\n            /*\n             * This exceptions are safe to be ignored:\n             *\n             * - NoSuchPaddingException:\n             *      Thrown if PKCS1Padding is not available. Was introduced in API 1.\n             * - NoSuchAlgorithmException:\n             *      Thrown if the transformation is null, empty or invalid, or if no security provider\n             *      implements it. Was introduced in API 1.\n             * - InvalidKeyException:\n             *      Thrown if the given key is inappropriate for initializing this cipher.\n             *\n             * Read more in https://developer.android.com/reference/javax/crypto/Cipher\n             */\n            Log.e(TAG, \"The device can't decrypt input using a RSA Key.\", e);\n            throw new IncompatibleDeviceException(e);\n        } catch (IllegalBlockSizeException | BadPaddingException e) {\n            /*\n             * Any of this exceptions mean the encrypted input is somehow corrupted and cannot be recovered.\n             * Delete the AES keys since those originated the input.\n             *\n             * - IllegalBlockSizeException:\n             *      Thrown only on encrypt mode.\n             * - BadPaddingException:\n             *      Thrown if the input doesn't contain the proper padding bytes.\n             *\n             */\n            deleteAESKeys();\n            throw new CryptoException(\"The RSA encrypted input is corrupted and cannot be recovered. Please discard it.\", e);\n        }\n    }", "public List<TaskSummary> doCriteriaQuery(String userId, UserGroupCallback userGroupCallback, QueryWhere queryWhere) {\n\n        // 1. create builder and query instances\n        CriteriaBuilder builder = getCriteriaBuilder();\n        CriteriaQuery<Tuple> criteriaQuery = builder.createTupleQuery();\n\n        // 2. query base\n        Root<TaskImpl> taskRoot = criteriaQuery.from(TaskImpl.class);\n        criteriaQuery = criteriaQuery.multiselect(\n                taskRoot.get(TaskImpl_.id),                                                         // 0\n                taskRoot.get(TaskImpl_.name),                                                       // 1\n                taskRoot.get(TaskImpl_.subject),                                                    // 2\n                taskRoot.get(TaskImpl_.description),                                                // 3\n\n                taskRoot.get(TaskImpl_.taskData).get(TaskDataImpl_.status),                         // 4\n                taskRoot.get(TaskImpl_.priority),                                                   // 5\n                taskRoot.get(TaskImpl_.taskData).get(TaskDataImpl_.skipable),                       // 6\n\n                taskRoot.get(TaskImpl_.taskData).get(TaskDataImpl_.actualOwner).get(UserImpl_.id),  // 7\n                taskRoot.get(TaskImpl_.taskData).get(TaskDataImpl_.createdBy).get(UserImpl_.id),    // 8\n\n                taskRoot.get(TaskImpl_.taskData).get(TaskDataImpl_.createdOn),                      // 9\n                taskRoot.get(TaskImpl_.taskData).get(TaskDataImpl_.activationTime),                 // 10\n                taskRoot.get(TaskImpl_.taskData).get(TaskDataImpl_.expirationTime),                 // 11\n\n                taskRoot.get(TaskImpl_.taskData).get(TaskDataImpl_.processId),                      // 12\n                taskRoot.get(TaskImpl_.taskData).get(TaskDataImpl_.processSessionId),               // 13\n                taskRoot.get(TaskImpl_.taskData).get(TaskDataImpl_.processInstanceId),              // 14\n                taskRoot.get(TaskImpl_.taskData).get(TaskDataImpl_.deploymentId),                   // 15\n\n                taskRoot.get(TaskImpl_.subTaskStrategy),                                            // 16\n                taskRoot.get(TaskImpl_.taskData).get(TaskDataImpl_.parentId)                        // 17\n                );\n        taskRoot.join(TaskImpl_.taskData); // added for convienence sake, since other logic expects to find this join\n\n        addUserGroupsViaCallBackToQueryWhere(userGroupCallback, queryWhere.getCriteria());\n\n        // 3. check to see if there's already a user(/security)-limitation in the search\n        checkExistingCriteriaForUserBasedLimit(queryWhere, userId, userGroupCallback);\n        for( QueryModificationService queryModificationService : queryModificationServiceLoader ) {\n            queryModificationService.optimizeCriteria(queryWhere);\n        }\n\n        // 4. process query criteria\n        fillCriteriaQuery(criteriaQuery, queryWhere, builder, TaskImpl.class);\n\n        // 5. retrieve result (after also applying meta-criteria)\n        useDistinctWhenLefOuterJoinsPresent(criteriaQuery);\n        List<Tuple> result = createQueryAndCallApplyMetaCriteriaAndGetResult(queryWhere, criteriaQuery, builder);\n\n        List<TaskSummary> taskSummaryList = new ArrayList<TaskSummary>(result.size());\n        for( Tuple tupleRow : result ) {\n            int i = 0;\n            //@formatter:off\n            TaskSummaryImpl taskSummaryImpl = new TaskSummaryImpl(\n               // id\n               tupleRow.get(i++, Long.class),\n               // name, subject, description\n               tupleRow.get(i++, String.class), tupleRow.get(i++, String.class), tupleRow.get(i++, String.class),\n               // status, prio, skippable\n               tupleRow.get(i++, Status.class), tupleRow.get(i++, Integer.class), tupleRow.get(i++, Boolean.class),\n               // actual owner, created by\n               tupleRow.get(i++, String.class), tupleRow.get(i++, String.class),\n               // created on, activation time, expiration time\n               tupleRow.get(i++, Date.class), tupleRow.get(i++, Date.class), tupleRow.get(i++, Date.class),\n               // process id, process session id, process inst id, deployment id\n               tupleRow.get(i++, String.class), tupleRow.get(i++, Long.class), tupleRow.get(i++, Long.class), tupleRow.get(i++, String.class),\n               tupleRow.get(i++, SubTasksStrategy.class),\n               tupleRow.get(i++, Long.class) );\n            //@formatter:on\n            taskSummaryList.add(taskSummaryImpl);\n\n        }\n        return taskSummaryList;\n    }", "    public Object copy_data(Object destination, Object source) {\n        PointCloudSample typedDst = (PointCloudSample) destination;\n        PointCloudSample typedSrc = (PointCloudSample) source;\n\n        return typedDst.copy_from(typedSrc);\n    \n    }\n", "@RequestMapping(value=\"/{id}\",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable(\"id\") String configGroup,Principal principal){\n  RestWrapper restWrapper=null;\n  try {\n    generalConfigDAO.deleteByConfigGroup(configGroup);\n    restWrapper=new RestWrapper(null,RestWrapper.OK);\n    LOGGER.info(\"Record with configGroup:\" + configGroup + \" deleted from generalConfig by User:\"+ principal.getName());\n  }\n catch (  MetadataException e) {\n    LOGGER.error(e);\n    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);\n  }\ncatch (  SecurityException e) {\n    LOGGER.error(e);\n    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);\n  }\n  return restWrapper;\n}\n", "    public void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n        res.getWriter().print(myString);\n    }\n", "\tpublic List getPropertyDescriptors(Object object) {\n\t\tif (itemPropertyDescriptors == null) {\n\t\t\tsuper.getPropertyDescriptors(object);\n\n\t\t\taddSignalPropertyDescriptor(object);\n\t\t}\n\t\treturn itemPropertyDescriptors;\n\t}\n", "public void paint ( Interaction i , Color c ) ;", "boolean checkDecryptedBytes(final byte[] msg){\n  boolean conform=false;\n  byte[] tmpMsg=msg;\n  if (oracleType == OracleType.BigIP && tmpMsg[1] == 0x02) {\n    conform=true;\n  }\n  if (tmpMsg[0] == 0x00) {\n    byte[] tmp=new byte[tmpMsg.length - 1];\n    System.arraycopy(tmpMsg,1,tmp,0,tmp.length);\n    tmpMsg=tmp;\n  }\n  if (oracleType == OracleType.MANGER_0x00 && tmpMsg.length == (blockSize - 1)) {\n    conform=true;\n  }\n  if (tmpMsg[0] == 0x02 && tmpMsg.length == (blockSize - 1)) {\nswitch (oracleType) {\ncase TTT:\ncase BigIP:\n      conform=true;\n    break;\ncase FTT:\n  if (checkFirst(tmpMsg)) {\n    conform=true;\n  }\nbreak;\ncase TFT:\nif (checkSecond(tmpMsg)) {\nconform=true;\n}\nbreak;\ncase FFT:\nif (checkFirst(tmpMsg) && checkSecond(tmpMsg)) {\nconform=true;\n}\nbreak;\ncase FFF:\nif (checkFirst(tmpMsg) && checkSecond(tmpMsg) && checkThird(tmpMsg)) {\nconform=true;\n}\nbreak;\ncase JSSE:\nif (checkJSSE(tmpMsg)) {\nconform=true;\n}\nbreak;\ncase XMLENC:\nif (checkXMLENC(tmpMsg)) {\nconform=true;\n}\nbreak;\ndefault :\nbreak;\n}\n}\nif (conform) {\nLOGGER.debug(\"-------- Valid message by query number {} -----------\",numberOfQueries);\n}\nreturn conform;\n}\n", "protected void disableDownloadVerifyButtons(){\n  if (log.isDebugEnabled()) {\n    log.debug(\"disableGUI\");\n  }\n  setOperationAborted(false);\n  loadButton.setEnabled(false);\n  loadButton.setToolTipText(Bundle.getMessage(\"TipLoadDisabled\"));\n  verifyButton.setEnabled(false);\n  verifyButton.setToolTipText(Bundle.getMessage(\"TipVerifyDisabled\"));\n  abortButton.setEnabled(false);\n  abortButton.setToolTipText(Bundle.getMessage(\"TipAbortDisabled\"));\n}\n", "public static synchronized List getPropertyNames(String entityTypeName) {\n        if (propertyNames != null) {\n            return propertyNames;\n        } else {\n            {\n                List names = new ArrayList();\n                names.add(PROP_PRINCIPAL_NAME);\n                names.add(PROP_PASSWORD);\n                names.add(PROP_REALM);\n                names.add(PROP_CERTIFICATE);\n                names.addAll(Party.getPropertyNames(\"Party\"));\n                propertyNames = Collections.unmodifiableList(names);\n                return propertyNames;\n            }\n        }\n    }", "public void destroy ( ) { super . destroy ( ) ; }", "protected void _deselectAll(boolean notifyListeners) {\n\n\t\tif (DEBUG)\n\t\t\tSystem.out.println(\"clear\"); //$NON-NLS-1$\n\n\t\tthis.selection = null;\n\t\tthis.selectionIndices = null;\n\n\t\tif (items == null)\n\t\t\treturn;\n\t\tfor (int i = 0; i < items.length; i++) {\n\t\t\tif", "private boolean isOneOf ( char ch , final char [ ] charray ) { boolean result = BOOL_ ; for ( char element : charray ) { if ( ch == element ) { result = BOOL_ ; break ; } } return result ; }", "    public void registerInterfaceConnection(QName fromItf, QName toSvc, String toEp) throws JBIException {\n        if (interfaceConnections.get(fromItf) != null) {\n            throw new JBIException(\"An interface connection for \" + fromItf + \" is already registered\");\n        }\n        interfaceConnections.put(fromItf, new InterfaceConnection(toSvc, toEp));\n    }\n", "protected long computeJoinCardinality(IJoinDimension d1,IJoinDimension d2){\n  if (d1.isOptional() && d2.isOptional()) {\n    return BOTH_OPTIONAL;\n  }\n  if (d1.isOptional() || d2.isOptional()) {\n    return ONE_OPTIONAL;\n  }\n  final boolean sharedVars=hasSharedVars(d1,d2);\n  final boolean unsharedVars=hasUnsharedVars(d1,d2);\n  final long joinCardinality;\n  if (sharedVars == false) {\n    joinCardinality=NO_SHARED_VARS;\n  }\n else {\n    if (unsharedVars == false) {\n      joinCardinality=Math.min(d1.getCardinality(),d2.getCardinality());\n    }\n else {\n      joinCardinality=Math.min(d1.getCardinality(),d2.getCardinality());\n    }\n  }\n  return joinCardinality;\n}\n", "\tprivate boolean shouldDoUpdate(String o, String n) {\n\t\t// Never update to the default name\n\t\tif(n.compareTo(defaultName) == 0) return false;\n\t\t\n\t\t// Never update if names are the same\n\t\tif(o.compareTo(n) == 0) return false;\n\t\t\n\t\treturn true;\n\t}\n", "void loadEventDaysInBackground(int startDay,int numDays,boolean[] eventDays,final Runnable uiCallback){\n  LoadEventDaysRequest request=new LoadEventDaysRequest(startDay,numDays,eventDays,uiCallback);\n  try {\n    mLoaderQueue.put(request);\n  }\n catch (  InterruptedException ex) {\n    Log.e(\"Cal\",\"loadEventDaysInBackground() interrupted!\");\n  }\n}\n", "public Matrix premultiplyBy ( Matrix mx ) { return mx . multiply ( this ) ; }", "public LR0ItemSet calc(LR0ItemSet initialItemSet) {\n\tLR0ItemSet result = closures.get(initialItemSet);\n\tif (result == null) {\n\t    return calculate(initialItemSet);\n\t}\n\treturn result;\n    }", "private static String removeCStyleComments(String ddl)\n    {\n        // Avoid Apache commons StringUtils.join() to minimize client dependencies.\n        StringBuilder sb = new StringBuilder();\n        for (String part : PAT_STRIP_CSTYLE_COMMENTS.split(ddl)) {\n            sb.append(part);\n        }\n        return sb.toString();\n    }", "public static void updateActorPosition(final Actor actor, final Vector2 newScreenSizeInStageCoords) {\n        if (actor != null) {\n            updateActorPosition(actor, actor.getStage(), newScreenSizeInStageCoords);\n        }\n    }", "public static void setAccountSid(final String accountSid) {\n        if (accountSid == null) {\n            throw new AuthenticationException(\"AccountSid can not be null\");\n        }\n\n        if (!accountSid.equals(Twilio.accountSid)) {\n            Twilio.invalidate();\n        }\n\n        Twilio.accountSid = accountSid;\n    }", "public void limit(double x1,double y1,double x2,double y2){\n  clip[0]=Math.max(clip[0],x1);\n  clip[1]=Math.max(clip[1],y1);\n  clip[6]=Math.min(clip[6],x2);\n  clip[7]=Math.min(clip[7],y2);\n}\n", "\tpublic void draw(Node node, PApplet parent){\n//\t\tdraw rect\n\t\tparent.smooth();\n\t\tparent.stroke(0);\n\t\tparent.rect(node.x1,node.y1,node.width, node.height);\n\t}\n", "static void stringToPacket(String s,DatagramPacket packet){\n  byte[] bytes=s.getBytes();\n  System.arraycopy(bytes,0,packet.getData(),0,bytes.length);\n  packet.setLength(bytes.length);\n}\n", "public java.util.List<String> getBillingProducts() {\n        if (billingProducts == null) {\n            billingProducts = new com.amazonaws.internal.SdkInternalList<String>();\n        }\n        return billingProducts;\n    }", "public String diff_prettyHtml ( LinkedList < Diff > diffs ) { StringBuilder html = new StringBuilder ( ) ; for ( Diff aDiff : diffs ) { String text = aDiff . text . replace ( STR_ , STR_ ) . replace ( STR_ , STR_ ) . replace ( STR_ , STR_ ) . replace ( ST", "public Shape createArrowLeft ( final double x , final double y , final double w , final double h ) { path . reset ( ) ; path . moveTo ( x + w , y ) ; path . lineTo ( x , y + h / NUM_ ) ; path . lineTo ( x + w , y + h ) ; path . closePath ( ) ; return path", "public InstructionIterator instructionIterator(){\n  return new InstructionIterator(firstInstruction,lastInstruction);\n}\n", "\tpublic void putCasCellLabel(GeoCasCell geoCasCell, String label) {\n\t\tif (label == null) return;\n\t\t\n\t\tif (geoCasCellTable == null) \n\t\t\tgeoCasCellTable = new HashMap<String,GeoCasCell>(); \n\t\tgeoCasCellTable.put(label, geoCasCell);\t\n\t}\n", "private Entity chooseEntity(Coords pos){\n  Entity choice=null;\n  List<Entity> entities=game.getEntitiesVector(pos);\n  if (entities.size() == 1) {\n    choice=entities.get(0);\n  }\n else   if (entities.size() > 1) {\n    String input=(String)JOptionPane.showInputDialog(null,Messages.getString(\"BoardView1.ChooseEntityDialog.message\",new Object[]{pos.getBoardNum()}),Messages.getString(\"BoardView1.ChooseEntityDialog.title\"),JOptionPane.QUESTION_MESSAGE,null,SharedUtility.getDisplayArray(entities),null);\n    choice=(Entity)SharedUtility.getTargetPicked(entities,input);\n  }\n  return choice;\n}\n", "private void stopResources(boolean waitForShutdown) throws InterruptedException {\n\t\temitter.stop();\n\t\temitterThread.interrupt();\n\n\t\texecutor.shutdown();\n\n\t\tif (waitForShutdown) {\n\t\t\ttry {\n\t\t\t\tif (!executor.awaitTermination(365L, TimeUnit.DAYS)) {\n\t\t\t\t\texecutor.shutdownNow();\n\t\t\t\t}\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\texecutor.shutdownNow();\n\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * FLINK-5638: If we have the checkpoint lock we might have to free it for a while so\n\t\t\t * that the emitter thread can complete/react to the interrupt signal.\n\t\t\t */\n\t\t\tif (Thread.holdsLock(checkpointingLock)) {\n\t\t\t\twhile (emitterThread.isAlive()) {\n\t\t\t\t\tcheckpointingLock.wait(100L);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\temitterThread.join();\n\t\t} else {\n\t\t\texecutor.shutdownNow();\n\t\t}\n\t}", "public String dumpStops(TIntIntMap stops){\n  if (DUMP_STOPS) {\n    StringBuilder sb=new StringBuilder();\n    stops.forEachEntry(null);\n    return sb.toString();\n  }\n else {\n    return \"\";\n  }\n}\n", "\tpublic String convertNodeToString(Node node){\n\t\tString val = node.getStringValue();\t\t\n\t\tlog.debug(\"Trying to index: \"+val);\n\t\t\n\t\tString result = null;\n\t\ttry{\n\t\t\t// currently, index with a resolution of DAY\n\t\t\tString[] parts = val.split(\"T\");\n\t\t\tresult = parts[0]; \n\t\t\t// remove - as it just takes up space in index.\n\t\t\tresult = result.replace(\"-\", \"\"); \n\t\t}catch (Exception e) {\n\t\t\tlog.debug(\"failed to split date:\",e);\n\t\t}\n\t\tlog.debug(\"Result of date conversion: \"+result);\n\t\treturn result;\n\t}\n", "public boolean createNewFile() throws IOException\n  {\n    synchronized (LOCK) {\n      if (! exists()) {\n        clearStatusCache();\n        WriteStreamOld s = openWrite();\n        s.close();\n        return true;\n      }\n    }\n\n    return false;\n  }", "\tpublic void renameCategory(String username, String catName, String newName) {\n\t\tUser user=getByUsername(username);\n\t\tCategory cat = CategoryDAO.getInstance().getByName(user, catName);\n\t\tList<Category> allCat = CategoryDAO.getInstance().getByUserId(\n\t\t\t\tuser.getId());\n\t\tif (allCat.contains(cat)) {\n\t\t\tSession session = SessionManager.getCurrentSession();\n\t\t\tif (session == null) {\n\t\t\t\tsession = SessionManager.openSession();\n\t\t\t}\n\t\t\tcat.setName(newName);\n\t\t\tsession.update(cat);\n\t\t\tSessionManager.commitTransaction();\n\t\t} else {\n\t\t\tJOptionPane.showMessageDialog(null,\n\t\t\t\t\t\"You don't have this category, ypu can not rename it.\",\n\t\t\t\t\t\"Error\", JOptionPane.ERROR_MESSAGE);\n\t\t}\n\t}\n", "private static void validateTypes(byte[] types) {\n        if (types == null) {\n            throw new IllegalArgumentException(\"types is null\");\n        }\n        for (int i = 0; i < types.length; ++i) {\n            if (types[i] < TYPE_MIN || types[i] > TYPE_MAX) {\n                throw new IllegalArgumentException(\"illegal type value at \" + i + \": \" + types[i]);\n            }\n        }\n        for (int i = 0; i < types.length - 1; ++i) {\n            if (types[i] == B) {\n                throw new IllegalArgumentException(\"B type before end of paragraph at index: \" + i);\n            }\n        }\n    }", "public boolean isUninterestingStreamEscape(Stream stream){\n  return uninterestingStreamEscapeSet.contains(stream);\n}\n", "public void replaceMisspelling ( String word ) ;", "public static String parseExperimentName(String name){\n  Scanner scanner=new Scanner(name);\n  StringBuilder csvName=new StringBuilder();\n  scanner.useDelimiter(\"_\");\n  for (int i=0; i < 8; i++) {\n    if (scanner.hasNext()) {\n      csvName.append(scanner.next() + \",\");\n    }\n else {\n      csvName.append(\",\");\n    }\n  }\n  scanner.close();\n  return csvName.toString();\n}\n", "public JClass getSuperClass()\n  {\n    Class cl = _class.getSuperclass();\n\n    if (cl != null)\n      return _loader.forName(cl.getName());\n    else\n      return null;\n  }", "public static byte [ ] toUTF8 ( Document hostDoc ) throws IOException { return toString ( hostDoc ) . getBytes ( ENC ) ; }", "public UnsafeCopier build ( Unsafe unsafe ) throws IllegalAccessException , InstantiationException , NoSuchMethodException , InvocationTargetException { checkArgument ( offset >= NUM_ , STR_ ) ; checkArgument ( length >= NUM_ , STR_ ) ; checkNotNull ( unsafe ) ; Class < ? > dynamicType = new ByteBuddy ( ) . subclass ( UnsafeCopier . class ) . method ( named ( STR_ ) ) . intercept ( new CopierImplementation ( offset , length ) ) . make ( ) . load ( getClass ( ) . getClassLoader ( ) , ClassLoadingStrategy . Default . WRAPPER ) . getLoaded ( ) ; return ( UnsafeCopier ) dynamicType . getDeclaredConstructor ( Unsafe . class ) . newInstance ( unsafe ) ; }", "        public void addEvidenceOid(OID anOid) {\n            // Get the evidence (forcing a load from Facade if null)...\n            Collection theEvidenceOids = Feature.this.getEvidenceOidsFromFacade();\n\n            // Make sure we don't already have this", "public static boolean isOctalDigit ( char c ) { return c >= STR_ && c <= STR_ ; }", "public void addFillPaint ( PDFPaint p ) { addCommand ( new PDFFillPaintCmd ( p ) ) ; }", "    public Row get() {\n        if (current == null && currentSearchRow != null) {\n            current = cursor.get();\n        }\n        return current;\n    }\n", "boolean isEnabled ( ) ;", "public static ClassNode pickGenericType(ClassNode type, int gtIndex) {\n        final GenericsType[] genericsTypes = type.getGenericsTypes();\n        if (genericsTypes==null || genericsTypes.length<gtIndex) {\n            return ClassHelper.OBJECT_TYPE;\n        }\n        return genericsTypes[gtIndex].getType();\n    }", "public void marshall(GetRelationalDatabaseLogStreamsRequest getRelationalDatabaseLogStreamsRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (getRelationalDatabaseLogStreamsRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(getRelationalDatabaseLogStreamsRequest.getRelationalDatabaseName(), RELATIONALDATABASENAME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void initialise ( ) throws Exception { mvkeDestinationPast . initialise ( k , epsilon ) ; mvkeDestinationNextPast . initialise ( k + NUM_ , epsilon ) ; mvkeDestinationPastSource . initialise ( k + NUM_ , epsilon ) ; mvkeDestinationNextPastSource . ", "\tpublic int getY(double y) {\n\t\treturn (int) (y * c_scaleByProcent / 100);\n\t}\n", "public void remove(T object){\nsynchronized (mLock) {\n    if (mOriginalValues != null) {\n      mOriginalValues.remove(object);\n    }\n else {\n      mObjects.remove(object);\n    }\n  }\n  if (mNotifyOnChange)   notifyDataSetChanged();\n}\n", "final boolean hasValidNext(){\n  return validIndex < validTypes.size();\n}\n", "public static <T> boolean retainAll(Collection<T> self, @ClosureParams(FirstParam.FirstGenericType.class) Closure condition) {\n        Iterator iter = InvokerHelper.asIterator(self);\n        BooleanClosureWrapper bcw = new BooleanClosureWrapper(condition);\n        boolean result = false;\n        while (iter.hasNext()) {\n            Object value = iter.next();\n            if (!bcw.call(value)) {\n                iter.remove();\n                result = true;\n            }\n        }\n        return result;\n    }", "@Override\n    public void prepare(MissionInit missionInit) {\n        super.prepare(missionInit);\n        // We need to see chat commands as they come in.\n        // Following the example of RewardForSendingCommandImplementation.\n        MissionBehaviour mb = parentBehaviour();\n        ICommandHandler oldch = mb.commandHandler;\n        CommandGroup newch = new CommandGroup() {\n            protected boolean onExecute(String verb, String parameter, MissionInit missionInit) {\n                // See if this command gets handled by the legitimate handlers:\n                boolean handled = super.onExecute(verb, parameter, missionInit);\n                if (handled && verb.equalsIgnoreCase(ChatCommand.CHAT.value())) // Yes, so check if we need to produce a reward\n                {\n                    Iterator<Map.Entry<Pattern, Float>> patternIt = patternMap.entrySet().iterator();\n                    while (patternIt.hasNext()) {\n                        Map.Entry<Pattern, Float> entry = patternIt.next();\n                        Matcher m = entry.getKey().matcher(parameter);\n                        if (m.matches()) {\n                            String distribution = distributionMap.get(entry.getKey());\n                            addAndShareCachedReward(RewardForSendingMatchingChatMessageImplementation.this.params.getDimension(), entry.getValue(), distribution);\n                        }\n                    }\n                }\n                return handled;\n            }\n        };\n\n        newch.setOverriding((oldch != null) ? oldch.isOverriding() : true);\n        if (oldch != null)\n            newch.addCommandHandler(oldch);\n        mb.commandHandler = newch;\n    }", "private boolean decodeBuffer(ByteBuf in, ChannelHandlerContext ctx) throws IOException {\n\n\t\tDecoderState decoderState;\n\t\twhile ((decoderState = decodeEnvelope(in)) != DecoderState.PENDING) {\n\t\t\tif (decoderState == DecoderState.COMPLETE) {\n\t\t\t\tctx.fireChannelRead(this.currentEnvelope);\n\t\t\t\tthis.currentEnvelope = null;\n\t\t\t}\n\t\t\telse if (decoderState == DecoderState.NO_BUFFER_AVAILABLE) {\n\t\t\t\tswitch (this.currentBufferProvider.registerBufferAvailabilityListener(this)) {\n\t\t\t\t\tcase SUCCEEDED_REGISTERED:\n\t\t\t\t\t\tif (ctx.channel().config().isAutoRead()) {\n\t\t\t\t\t\t\tctx.channel().config().setAutoRead(false);\n\n\t\t\t\t\t\t\tif (LOG.isDebugEnabled()) {\n\t\t\t\t\t\t\t\tLOG.debug(String.format(\"Set channel %s auto read to false.\", ctx.channel()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.stagedBuffer = in;\n\t\t\t\t\t\tthis.stagedBuffer.retain();\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\tcase FAILED_BUFFER_AVAILABLE:\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tcase FAILED_BUFFER_POOL_DESTROYED:\n\t\t\t\t\t\tthis.bytesToSkip = skipBytes(in, this.currentBufferRequestSize);\n\n\t\t\t\t\t\tthis.currentBufferRequestSize = 0;\n\t\t\t\t\t\tthis.currentEventsBuffer = null;\n\t\t\t\t\t\tthis.currentEnvelope = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (in.isReadable()) {\n\t\t\tthrow new IllegalStateException(\"Every buffer should have been fully\" +\n\t\t\t\t\t\"consumed after *successfully* decoding it (if it was not successful, \" +\n\t\t\t\t\t\"the buffer will be staged for later consumption).\");\n\t\t}\n\n\t\tin.release();\n\t\treturn true;\n\t}", "protected CompletableFuture<Map<Integer,ClientResponse>> callNTProcedureOnAllHosts(String procName, Object... params) {\n        return m_runner.callAllNodeNTProcedure(procName, params);\n    }", "protected Shape createOuterFocus ( final SegmentType segmentType , final int x , final int y , final int w , final int h ) { switch ( segmentType ) { case FIRST : return shapeGenerator . createRoundRectangle ( x - NUM_ , y - NUM_ , w + NUM_ , h + NUM_ , CornerSize . OUTER_FOCUS , CornerStyle . ROUNDED , CornerStyle . ROUNDED , CornerStyle . SQUARE , CornerStyle . SQUARE ) ; case MIDDLE : return shapeGenerator . createRectangle ( x - NUM_ , y - NUM_ , w + NUM_ , h + NUM_ ) ; case LAST : return shapeGenerator . createRoundRectangle ( x - NUM_ , y - NUM_ , w + NUM_ , h + NUM_ , CornerSize . OUTER_FOCUS , CornerStyle . SQUARE , CornerStyle . SQUARE , CornerStyle . ROUNDED , CornerStyle . ROUNDED ) ; default : return shapeGenerator . createRoundRectangle ( x - NUM_ , y - NUM_ , w + NUM_ , h + NUM_ , CornerSize . OUTER_FOCUS ) ; } }", "public static double distance(double lat1,double lat2,double lon1,double lon2,double el1,double el2){\n  final int R=6371;\n  Double latDistance=deg2rad(lat2 - lat1);\n  Double lonDistance=deg2rad(lon2 - lon1);\n  Double a=Math.sin(latDistance / 2) * Math.sin(latDistance / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(lonDistance / 2)* Math.sin(lonDistance / 2);\n  Double c=2 * Math.atan2(Math.sqrt(a),Math.sqrt(1 - a));\n  double distance=R * c * 1000;\n  double height=el1 - el2;\n  distance=Math.pow(distance,2) + Math.pow(height,2);\n  return Math.sqrt(distance);\n}\n", "\tpublic boolean hasOptions() {\n\t\treturn _options != null;\n\t}\n", "private int idToInt(String value) {\n    try {\n      return Integer.valueOf(value);\n    } catch (NumberFormatException e) {\n      throw new ConfigurationException(\"invalid type ID: \" + value);\n    }\n  }", "private void validateJdbcStatements(List<JdbcStatement> jdbcStatements){\n  Assert.notNull(jdbcStatements,\"JDBC statements are required\");\n  Assert.isTrue(!jdbcStatements.isEmpty(),\"JDBC statements are required\");\n  Integer jdbcMaxStatements=configurationHelper.getProperty(ConfigurationValue.JDBC_MAX_STATEMENTS,Integer.class);\n  if (jdbcMaxStatements != null) {\n    Assert.isTrue(jdbcStatements.size() <= jdbcMaxStatements,\"The number of JDBC statements exceeded the maximum allowed \" + jdbcMaxStatements + \".\");\n  }\n  for (int i=0; i < jdbcStatements.size(); i++) {\n    JdbcStatement jdbcStatement=jdbcStatements.get(i);\n    validateJdbcStatement(jdbcStatement,i);\n  }\n}\n", "  public int countBytes(String command) {\n\n    String str = new String(command);\n    str = normalize(str);\n    String strArr[] = str.split(\" \");\n    return strArr.length;\n  }\n", "\tpublic void passString(String s, byte destination){\n\t\tsetPending(ByteArray.fromString(s), destination);\n\t\trequestSend();\n\t}\n", "public boolean init(String[] args) throws ParseException, IOException {\n        Options opts = new Options();\n        opts.addOption(JOYConstants.APP_ATTEMPT_ID, true,\n                \"App Attempt ID. Not to be used unless for testing purposes\");\n        opts.addOption(JOYConstants.SHELL_SCRIPT, true,\n                \"Environment for shell script. Specified as env_key=env_val pairs\");\n        opts.addOption(JOYConstants.CONTAINER_MEMORY, true,\n                \"Amount of memory in MB to be requested to run the shell command\");\n        opts.addOption(JOYConstants.CONTAINER_VCORES, true,\n                \"Amount of virtual cores to be requested to run the shell command\");\n        opts.addOption(JOYConstants.NUM_CONTAINERS, true,\n                \"No. of containers on which the shell command needs to be executed\");\n        opts.addOption(JOYConstants.PRIORITY, true, \"Application Priority. Default 0\");\n        opts.addOption(JOYConstants.DEBUG, false, \"Dump out debug information\");\n        opts.addOption(JOYConstants.HELP, false, \"Print usage\");\n        if (args.length == 0) {\n            printUsage(opts);\n            throw new IllegalArgumentException(\n                    \"No args specified for application master to initialize\");\n        }\n\n        try {\n            CommandLine cliParser = new GnuParser().parse(opts, args);\n            JstormYarnUtils.checkAndSetMasterOptions(cliParser, jstormMasterContext, this.conf);\n        } catch (Exception e) {\n            LOG.error(e);\n        }\n        return true;\n    }", "public static void notifyAll(Object lock){\nsynchronized (lock) {\n    lock.notifyAll();\n  }\n}\n", "public long totalTimeMS ( ) { return totalTime ( ) / NUM_ ; }", "private static String[] splitValueAndUnit(String encodedValueAndUnit){\n  String[] result=new String[2];\n  int len=encodedValueAndUnit.length();\n  int firstLetterIndex=len;\n  while (firstLetterIndex > 0 && Character.isLetter(encodedValueAndUnit.charAt(firstLetterIndex - 1))) {\n    firstLetterIndex--;\n  }\n  result[0]=encodedValueAndUnit.substring(0,firstLetterIndex);\n  result[1]=encodedValueAndUnit.substring(firstLetterIndex);\n  return result;\n}\n", "IComment editLocalComment ( final IComment comment , final String commentText ) throws CouldntSaveDataException ;", "public KdTree ( double [ ] [ ] data ) { this ( new int [ ] { data [ NUM_ ] . length } , new double [ ] [ ] [ ] { data } ) ; }", "IEspDevice doActionDeviceNewActivateInternet ( long userId , String userKey , String randomToken , long negativeDeviceId ) throws InterruptedException ;", "public void execute ( String SQL ) throws SQLException ;", "public final static <T>Optional<ListX<T>> streamToOptional(final Stream<T> stream){\n  final List<T> collected=stream.collect(Collectors.toList());\n  if (collected.size() == 0)   return Optional.empty();\n  return Optional.of(ListX.fromIterable(collected));\n}\n", "public void addParameter(Object owner, Parameter<?> param, TrackParameters track) {\n    this.setBorder(new SoftBevelBorder(SoftBevelBorder.LOWERED));\n    ParameterConfigurator cfg = null;\n    { // Find\n      Object cur = owner;\n      while(cur != null) {", "int calculateHeight(int width,double ratio){\n  if (ratio == 0) {\n    return 0;\n  }\n  return (int)Math.round(width / ratio);\n}\n", "public NativeFont(String platName,boolean bitmapDelegate) throws FontFormatException {\n  super(platName,null);\n  isBitmapDelegate=bitmapDelegate;\n  if (GraphicsEnvironment.isHeadless()) {\n    throw new FontFormatException(\"Native font in headless toolkit\");\n  }\n  fontRank=Font2D.NATIVE_RANK;\n  initNames();\n  if (getNumGlyphs() == 0) {\n    throw new FontFormatException(\"Couldn't locate font\" + platName);\n  }\n}\n", "private synchronized void addBookKeeperEntry(byte[] buf, int off, int len)\n      throws IOException {\n    try {\n      ledger.addEntry(buf, off, len);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Last add pushed to ledger \" + ledger.getId() + \" is \" +\n            ledger.getLastAddPushed());\n        LOG.debug(\"Last add confirmed to ledger \" + ledger.getId() + \" is \" +\n            ledger.getLastAddConfirmed());\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new IOException(\"Interrupted writing to BookKeeper\", e);\n    } catch (BKException e) {\n      throw new IOException(\"Failed to write to BookKeeper\", e);\n    }\n  }", "private static void doSort(double[] a,int left,int right,double[] work,int workBase,int workLen){\n  if (right - left < QUICKSORT_THRESHOLD) {\n    sort(a,left,right,true);\n    return;\n  }\n  int[] run=new int[MAX_RUN_COUNT + 1];\n  int count=0;\n  run[0]=left;\n  for (int k=left; k < right; run[count]=k) {\n    while (k < right && a[k] == a[k + 1])     k++;\n    if (k == right)     break;\n    if (a[k] < a[k + 1]) {\n      while (++k <= right && a[k - 1] <= a[k])       ;\n    }\n else     if (a[k] > a[k + 1]) {\n      while (++k <= right && a[k - 1] >= a[k])       ;\n      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {\n        double t=a[lo];\n        a[lo]=a[hi];\n        a[hi]=t;\n      }\n    }\n    if (run[count] > left && a[run[count]] >= a[run[count] - 1]) {\n      count--;\n    }\n    if (++count == MAX_RUN_COUNT) {\n      sort(a,left,right,true);\n      return;\n    }\n  }\n  if (count == 0) {\n    return;\n  }\n else   if (count == 1 && run[count] > right) {\n    return;\n  }\n  right++;\n  if (run[count] < right) {\n    run[++count]=right;\n  }\n  byte odd=0;\n  for (int n=1; (n<<=1) < count; odd^=1)   ;\n  double[] b;\n  int ao, bo;\n  int blen=right - left;\n  if (work == null || workLen < blen || workBase + blen > work.length) {\n    work=new double[blen];\n    workBase=0;\n  }\n  if (odd == 0) {\n    System.arraycopy(a,left,work,workBase,blen);\n    b=a;\n    bo=0;\n    a=work;\n    ao=workBase - left;\n  }\n else {\n    b=work;\n    ao=0;\n    bo=workBase - left;\n  }\n  for (int last; count > 1; count=last) {\n    for (int k=(last=0) + 2; k <= count; k+=2) {\n      int hi=run[k], mi=run[k - 1];\n      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {\n        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {\n          b[i + bo]=a[p++ + ao];\n        }\n else {\n          b[i + bo]=a[q++ + ao];\n        }\n      }\n      run[++last]=hi;\n    }\n    if ((count & 1) != 0) {\n      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;\n      run[++last]=right;\n    }\n    double[] t=a;\n    a=b;\n    b=t;\n    int o=ao;\n    ao=bo;\n    bo=o;\n  }\n}\n", "public void expectFailure(MessageInfo messageInfo,String faultCode){\n  if (messageInfo == null) {\n    expectedApiCalls.add(new ApiCall(FAILURE,new Object[]{faultCode}));\n  }\n else {\n    expectedApiCalls.add(new ApiCall(FAILURE,new Object[]{messageInfo.getOrigin(),messageInfo.getClient(),messageInfo.getService(),faultCode}));\n  }\n}\n", "@Override\n\tpublic boolean apply(final HttpResponse httpResponse) {\n\t\ttry {\n\t\t\tfinal InputStream content = httpResponse.getEntity().getContent();\n\t\t\treturn pattern.matcher(IOUtils.toString(content, StandardCharsets.ISO_8859_1)).matches();\n\t\t}\n\t\tcatch(IOException shouldntReallyHappen) {\n\t\t\tthrow new RuntimeException(shouldntReallyHappen);\n\t\t}\n\t}", "protected String byteArrayToHexString ( byte [ ] bytes ) { StringBuilder sb = new StringBuilder ( bytes . length * NUM_ ) ; for ( byte element : bytes ) { int v = element & NUM_ ; if ( v < NUM_ ) { sb . append ( STR_ ) ; } sb . append ( Integer . toHexString ( v ) ) ; } return sb . toString ( ) . toUpperCase ( Locale . US ) ; }", "\tpublic String getInvalidValue() {\n\t        log.debug (\"Sending INVALID_VALUE\");\n\t\treturn INVALID_VALUE;\n\t}\n", "protected String decodePercent(String str) throws InterruptedException {\n  try {\n    StringBuilder sb=new StringBuilder();\n    for (int i=0; i < str.length(); i++) {\n      char c=str.charAt(i);\nswitch (c) {\ncase '+':\n        sb.append(' ');\n      break;\ncase '%':\n    sb.append((char)Integer.parseInt(str.substring(i + 1,i + 3),16));\n  i+=2;\nbreak;\ndefault :\nsb.append(c);\nbreak;\n}\n}\nreturn sb.toString();\n}\n catch (Exception e) {\nthrow new InterruptedException();\n}\n}\n", "public String getPreselectOption(String siteRoot, List<CmsSiteSelectorOption> options) {\n\n        if ((siteRoot == null) || options.isEmpty()) {\n            return null;\n        }\n        for (CmsSiteSelectorOption option : options) {\n            if (CmsStringUtil.joinPaths(siteRoot, \"/\").equals(CmsStringUtil.joinPaths(option.getSiteRoot(), \"/\"))) {\n                return option.getSiteRoot();\n            }\n        }\n        return options.get(0).getSiteRoot();\n    }", "public boolean isNavBarTintEnabled ( ) { return mNavBarTintEnabled ; }", "public void testParseEnumSingleChar ( ) throws Exception { String [ ] enumDefinition = new String [ NUM_ ] ; enumDefinition [ NUM_ ] = STR_ ; enumDefinition [ NUM_ ] = STR_ ; for ( int i = NUM_ ; i < NUM_ ; i ++ ) { String [ ] elements = EnumToStringFilte", "public void addSectionHandling ( int level , EnumMap < SIT , EnumMap < CIT , Boolean > > sh ) { sectionHandling . put ( SectionType . SECTION_LEVEL . toString ( ) + level , sh ) ; }", "public void specifyLines(int line_num){\n  int childNum=0;\n  if (line_num > lineNumList.size()) {\n    line_num=lineNumList.size();\n  }\n  for (int i=0; i < line_num; i++) {\n    childNum+=lineNumList.get(i);\n  }\n  List<View> viewList=new ArrayList<>();\n  for (int i=0; i < childNum; i++) {\n    viewList.add(getChildAt(i));\n  }\n  removeAllViews();\n  for (  View v : viewList) {\n    addView(v);\n  }\n}\n", "synchronized void removeTracer(Tracer tracer){\n  if (curTracers.remove(tracer)) {\n    LOG.trace(toString() + \": removing tracer \" + tracer.toString());\n    if (curTracers.size() == 0) {\n      removeAndCloseAllSpanReceivers();\n    }\n  }\n}\n", "public static PreviewFragment newInstance ( String serialized ) { PreviewFragment fragment = new PreviewFragment ( ) ; Bundle args = new Bundle ( ) ; args . putString ( SERIALIZED , serialized ) ; fragment . setArguments ( args ) ; return fragment ; }", "private float pop ( ) { float val = NUM_ ; if ( sloc > NUM_ ) { val = stack [ -- sloc ] ; } return val ; }", "@SequentialOnly\r\n    public <R, A> Stream<R> collapseByKey(final BiPredicate<? super K, ? super K> collapsible, final Collector<? super V, A, R> collector) {\r\n        final BiPredicate<? super Entry<K, V>, ? super Entry<K, V>> collapsible2 = new BiPredicate<Entry<K, V>, Entry<K, V>>() {\r\n            @Override\r\n            public boolean test(Entry<K, V> t, Entry<K, V> u) {\r\n                return collapsible.test(t.getKey(), u.getKey());\r\n            }\r\n        };\r\n\r\n        final Function<Entry<K, V>, V> mapper = Fn.value();\r\n\r\n        return s.collapse(collapsible2, Collectors.mapping(mapper, collector));\r\n    }", "private Tab createConnectionTab(final String name,final Node content,final MqttConnectionController connectionController){\n  final Tab tab=new Tab();\n  connectionController.setTab(tab);\n  tab.setText(name);\n  tab.setContent(content);\n  return tab;\n}\n", "private void prepareLogger(String verboseLog) {\n        final StaticLoggerBinder loggerBinder = StaticLoggerBinder.getSingleton();\n        final LoggerContext context = (LoggerContext) loggerBinder.getLoggerFactory();\n\n        final PatternLayoutEncoder encoder = new PatternLayoutEncoder();\n        encoder.setPattern(\"%d %C:%L%n%-5level - %msg%n\");\n        encoder.setContext(context);\n        encoder.start();\n        final FileAppender<ILoggingEvent> fa = new FileAppender<>();\n        fa.setAppend(true);\n        fa.setEncoder(encoder);\n        fa.setContext(context);\n        fa.setFile(verboseLog);\n        final File f = new File(verboseLog);\n        String name = f.getName();\n        final int i = name.lastIndexOf('.');\n        if (i > 1) {\n            name = name.substring(0, i);\n        }\n        fa.setName(name);\n        fa.start();\n        final ch.qos.logback.classic.Logger rootLogger = context.getLogger(ch.qos.logback.classic.Logger.ROOT_LOGGER_NAME);\n        rootLogger.setLevel(Level.DEBUG);\n        final ThresholdFilter filter = new ThresholdFilter();\n        filter.setLevel(LogLevel.INFO.getValue());\n        filter.setContext(context);\n        filter.start();\n        rootLogger.iteratorForAppenders().forEachRemaining(action -> {\n            action.addFilter(filter);\n        });\n        rootLogger.addAppender(fa);\n    }", "void editedComment ( Instruction instruction , IComment comment ) ;", "\tpublic void addGraphObserver(GraphObserver newObserver) {\n\t\tobservers.add(newObserver);\n\t}\n", "private String buildJobTriggerName(String fileBasename){\n  String jobTriggerName=JOB_INITIALIZATION_PLUGIN_NAME + '_' + getName()+ '_'+ fileBasename.replace('.','_');\n  if (jobTriggerName.length() > MAX_JOB_TRIGGER_NAME_LEN) {\n    jobTriggerName=jobTriggerName.substring(0,MAX_JOB_TRIGGER_NAME_LEN);\n  }\n  int currentIndex=1;\n  while (jobTriggerNameSet.add(jobTriggerName) == false) {\n    if (currentIndex > 1) {\n      jobTriggerName=jobTriggerName.substring(0,jobTriggerName.lastIndexOf('_'));\n    }\n    String numericSuffix=\"_\" + currentIndex++;\n    if (jobTriggerName.length() > (MAX_JOB_TRIGGER_NAME_LEN - numericSuffix.length())) {\n      jobTriggerName=jobTriggerName.substring(0,(MAX_JOB_TRIGGER_NAME_LEN - numericSuffix.length()));\n    }\n    jobTriggerName+=numericSuffix;\n  }\n  return jobTriggerName;\n}\n", "    public String shortName() {\n        String classname = getClass().getName();\n        int last = classname.lastIndexOf(\".\");\n        return classname.substring(last + 1);\n    }\n", "public static byte[] readAll(InputStream in,long maxLen) throws IOException {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(Math.max(8192,in.available()));\n  byte[] buf=new byte[8192];\n  int read=0;\n  long totalRead=0;\n  while ((read=in.read(buf)) > 0) {\n    out.write(buf,0,read);\n    totalRead+=read;\n    if (totalRead > maxLen) {\n      throw new IOException(\"Too much data to read into memory. Got already \" + totalRead + buf);\n    }\n  }\n  return out.toByteArray();\n}\n", "  public void enableLogging(Logger logger) {\n    m_logger = logger;\n    getLogger().info(\"logging\");\n  }\n", "    public double getProgress() {\n        if (state == Download.SUCCESS) {\n            return 1;\n        }\n        if (state == Download.IDLE && Assets.containsCatalog(assetCatalogFile)) {\n            return 1;\n        }\n            \n        if (download == null) {\n            return showProgress ? 0 : -1;\n        }\n        double p = download.getPercentDownloaded();\n        \n        if (p < 0 && download.getSize() == -1 && totalTime > 0) {\n            // Content length unknown. Use a 30 second half life\n            p = 1 - Math.pow(0.5, totalTime / 30000.0);\n        }\n        \n        if (p < 0) {\n            return showProgress ? 0 : -1;\n        }\n        else {\n            return p;\n        }\n    }\n", "@Override public boolean addEntry(Principal caller,AclEntry entry) throws NotOwnerException {\n  if (!isOwner(caller))   throw new NotOwnerException();\n  if (entryList.contains(entry))   return false;\n  entryList.addElement(entry);\n  return true;\n}\n", "\tpublic void addExpansionChangeListener(final ExpansionStateListener listener) {\n\t\tsynchronized (this.expansionListeners) {\n\t\t\tif (listener == null) {\n\t\t\t\tthrow new NullPointerException();\n\t\t\t}\n\t\t\tif (!this.expansionListeners.contains(listener)) {\n\t\t\t\tthis.expansionListeners.add(listener);\n\t\t\t}\n\t\t}\n\t}\n", "public XMLDocument addToProlog(ConcreteElement element){\n  prolog.addElement(element);\n  return (this);\n}\n", "public IdentityArrayList(final K a[],final int offset,final int length){\n  this(length);\n  System.arraycopy(a,offset,this.a,0,length);\n  size=length;\n}\n", "public void removePlayersMonsters(){\n  for (  final Creature creature : spawnedCreatures) {\n    final StendhalRPZone monsterZone=creature.getZone();\n    if (monsterZone != null) {\n      monsterZone.remove(creature);\n    }\n  }\n}\n", "public ShoppingCart(Delegator delegator,String productStoreId,String webSiteId,Locale locale,String currencyUom){\n  this(delegator,productStoreId,webSiteId,locale,currencyUom,null,null);\n}", "private void writeObject(ObjectOutputStream out) throws IOException {\n  out.defaultWriteObject();\n  registrarID.writeBytes(out);\n}\n", "public void addAndRegisterAddOns(List<AddOnModel> addOns) {\n        this.addOns.addAll(addOns);\n        registerAllAddOns(this.addOns);\n        initialized();\n    }", "  public void delete() throws PObjSQLException {\n    if (state == STATE_NEW_OBJECT)\n      setPObjState(STATE_TRANSIENT);\n    else {\n      /* If the objects data is not in memory yet, then load it before actually\n       * deleting it.  This ensures that ac", "public void reset ( ) { mRecordable = mSourceRecordable ; setIdentifier ( mSource ) ; mPriority = Priority . DEFAULT_PRIORITY ; List < MetadataType > toRemove = new ArrayList < > ( ) ; for ( MetadataType type : mMetadata . keySet ( ) ) { Metadata metadata", "\tpublic BaseTargetParameter (java.lang.Integer id) {\n\t\tthis.setId(id);\n\t\tinitialize();\n\t}\n", "private void logDeprecationWarning(Node node,Context cx,String name,String since,String message,String replacement){\n  final int pos=node.getPosition();\n  final InputBuffer input=cx.input;\n  assert ((name != null) && (name.length() > 0));\n  final boolean hasSince=(since != null) && (since.length() > 0);\n  final boolean hasMessage=(message != null) && (message.length() > 0);\n  final boolean hasReplacement=(replacement != null) && (replacement.length() > 0);\n  if (hasMessage) {\n    warning(pos,input,kWarning_DeprecatedMessage,message);\n  }\n else   if (hasReplacement) {\n    if (hasSince) {\n      warning(pos,input,kWarning_DeprecatedSince,name,since,replacement);\n    }\n else {\n      warning(pos,input,kWarning_DeprecatedUseReplacement,name,replacement);\n    }\n  }\n else   if (hasSince) {\n    warning(pos,input,kWarning_DeprecatedSinceNoReplacement,name,since);\n  }\n else {\n    warning(pos,input,kWarning_Deprecated,name);\n  }\n}\n", "void processResumed ( DebuggerResumeReply reply ) ;", "    public void setActiveEditor(IAction action, IEditorPart targetEditor) {\n        editor = targetEditor;\n        if (editor != null) {\n            page = editor.getSite().getPage();\n        }\n    }\n", "   protected void go(URL url, String filename) {\n      super.go(url);      \n      try {\n\t  Vector urls = new Vector();\n\t  urls.addElement(url);\n          Slave.create(null, SlaveClassName, getAgletContext(), \n                       this, urls, filename);\n      } catch (IOException ae) {\n          inError(ae.getMessage());\n      } catch (AgletException ae) {\n          inError(ae.getMessage());\n      }\n   }\n", "public void advance ( ) { moveToNextIndex ( ) ; }", "public static <T>boolean contains(Enumeration<T> enumeration,T element){\n  if (enumeration != null) {\n    while (enumeration.hasMoreElements()) {\n      T candidate=enumeration.nextElement();\n      if (ObjectUtils.nullSafeEquals(candidate,element))       return true;\n    }\n  }\n  return false;\n}\n", "    public String getPeerFileName(Download adownload) {\n        SingleDonkeySource sds = (SingleDonkeySource)singleDonkeySources.get(adownload);\n        return sds != null ? sds.getPeerFileName() : null;\n    }\n", "public static String replaceNotEscaped ( String s , String old , String replacement ) { s = s . replace ( ESCAPE_CHARACTER + old , TEMP_REPLACEMENT ) ; s = s . replace ( old , replacement ) ; s = s . replace ( TEMP_REPLACEMENT , old ) ; return s ; }", "public void setEnterpriseNumber(int index, Number value)\n   {\n      set(selectField(TaskFieldLists.ENTERPRISE_NUMBER, index), value);\n   }", "public void beginStopEnvironment(String userName, String environmentId) {\n        beginStopEnvironmentWithServiceResponseAsync(userName, environmentId).toBlocking().single().body();\n    }", "@Override\n    public Iterable<T> save(final Iterable<T> entities) {\n        return inTransaction(new Callable<Iterable<T>>() {\n            @Override\n            public Iterable<T> call() throws Exception {\n                for (T object : entities) {\n                    entityManager.persist(object);\n                }\n                return entities;\n            }\n        });\n    }", "    public void setFileExtensions(Set<String> extensions) {\n        this.fileExtensions.clear();\n        this.fileExtensions.addAll(extensions);\n    }\n", "public void setEnabled(boolean enabled) {\n\n        if (enabled) {\n            enable();\n        } else {\n            m_button.setEnabled(enabled);\n            getElement().setPropertyBoolean(\"disabled\", true);\n        }\n    }", "Map<String,TypeName> convertPropertiesToTypes(Map<String,ExecutableElement> properties){\n  Map<String,TypeName> types=new LinkedHashMap<String,TypeName>();\n  for (  Map.Entry<String,ExecutableElement> entry : properties.entrySet()) {\n    ExecutableElement el=entry.getValue();\n    types.put(entry.getKey(),TypeName.get(el.getReturnType()));\n  }\n  return types;\n}\n", "@SuppressWarnings(\"static-method\")\n\tprotected XExpression _generate(XClosure closure, IAppendable it, IExtraLanguageGeneratorContext context) {\n\t\tif (it.hasName(closure)) {\n\t\t\tappendReturnIfExpectedReturnedExpression(it, context);\n\t\t\tit.append(it.getName(closure)).append(\"()\"); //$NON-NLS-1$\n\t\t}\n\t\treturn closure;\n\t}", "\tpublic void init(Graphics2D g, GUIHelper helper) {\n\t\tthis.helper = helper;\n\t\tthis.g = g;\n\t}\n", "public Notifications action(Action... actions){\n  this.actions=actions == null ? FXCollections.<Action>observableArrayList() : FXCollections.observableArrayList(actions);\n  return this;\n}\n", "private static < A extends Annotation > boolean shouldSkipCollection ( Class < ? > resourceClass , Class < A > annotationClass , RequestScope requestScope ) { try { requestScope . getPermissionExecutor ( ) . checkUserPermissions ( resourceClass , annotati", "@Override public void finish(){\n  for (  Entry<String,FileChannel> entry : fileNameAndStreamCache.entrySet()) {\n    try {\n      FileChannel channel=entry.getValue();\n      if (null != channel) {\n        channel.close();\n      }\n    }\n catch (    IOExcepti", "static ClassLoader createLoader(){\n  List<URL> urls=new ArrayList<>();\n  for (  String name : new String[]{\"java.class.path\",\"jdk.module.path\"}) {\n    String value=System.getProperty(name);\n    if (value != null) {\n      addURLsFromPath(urls,value);\n    }\n  }\n  for (int i=0; addPatchPaths(urls,i); i++) {\n  }\n  return new URLClassLoader(urls.toArray(new URL[urls.size()]));\n}\n", "public BoundingBox overlap(BoundingBox projectedCoverage) {\n\t\tBoundingBox overlap = null;\n\t\tif (point) {\n\t\t\toverlap = projectedBoundingBox;\n\t\t} else {\n\t\t\toverlap = projectedBoundingBox.overlap(projectedCoverage);\n\t\t}\n\t\treturn overlap;\n\t}", "final int findMarkAdjustIndex(int searchIndex){\n  search.index=Math.max(searchIndex,1);\n  int index=findSortIndex(search);\n  for (int i=index - 1; i >= 0; i--) {\n    MarkData d=marks.elementAt(i);\n    if (d.index != search.index) {\n      break;\n    }\n    index-=1;\n  }\n  return index;\n}\n", "public PagedList<ComputePolicyInner> listByAccountNext(final String nextPageLink) {\n        ServiceResponse<Page<ComputePolicyInner>> response = listByAccountNextSinglePageAsync(nextPageLink).toBlocking().single();\n        return new PagedList<ComputePolicyInner>(response.body()) {\n            @Override\n            public Page<ComputePolicyInner> nextPage(String nextPageLink) {\n                return listByAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();\n            }\n        };\n    }", "public byte [ ] toByteArray ( ) { return this . stream . toByteArray ( ) ; }", "public static void put3ByteInt(ByteBuffer buffer,int val,int offset,ByteOrder order){\n  int offInc=1;\n  if (order == ByteOrder.BIG_ENDIAN) {\n    offInc=-1;\n    offset+=2;\n  }\n  buffer.put(offset,(byte)(val & 0xFF));\n  buffer.put(offset + (1 * offInc),(byte)((val >>> 8) & 0xFF));\n  buffer.put(offset + (2 * offInc),(byte)((val >>> 16) & 0xFF));\n}\n", "protected void displayValues(CmsLocationValue value) {\n\n        m_addressField.setTextValue(value.getAddress());\n        m_latitudeField.setFormValueAsString(value.getLatitudeString());\n        m_longitudeField.setFormValueAsString(value.getLongitudeString());\n        m_heightField.setFormValueAsString(\"\" + value.getHeight());\n        m_widthField.setFormValueAsString(\"\" + value.getWidth());\n        m_zoomField.setFormValueAsString(\"\" + value.getZoom());\n        m_modeField.setFormValueAsString(value.getMode());\n        m_typeField.setFormValueAsString(value.getType());\n    }", "void convertType(Class<?> arg,Class<?> target,Class<?> functional){\n  if (arg.equals(target) && arg.equals(functional)) {\n    return;\n  }\n  if (arg == Void.TYPE || target == Void.TYPE) {\n    return;\n  }\n  if (arg.isPrimitive()) {\n    Wrapper wArg=Wrapper.forPrimitiveType(arg);\n    if (target.isPrimitive()) {\n      widen(wArg,Wrapper.forPrimitiveType(target));\n    }\n else {\n      String dTarget=BytecodeDescriptor.unparse(target);\n      Wrapper wPrimTarget=wrapperOrNullFromDescriptor(dTarget);\n      if (wPrimTarget != null) {\n        widen(wArg,wPrimTarget);\n        box(wPrimTarget);\n      }\n else {\n        box(wArg);\n        cast(wrapperName(wArg),dTarget);\n      }\n    }\n  }\n else {\n    String dArg=BytecodeDescriptor.unparse(arg);\n    String dSrc;\n    if (functional.isPrimitive()) {\n      dSrc=dArg;\n    }\n else {\n      dSrc=BytecodeDescriptor.unparse(functional);\n      cast(dArg,dSrc);\n    }\n    String dTarget=BytecodeDescriptor.unparse(target);\n    if (target.isPrimitive()) {\n      Wrapper wTarget=toWrapper(dTarget);\n      Wrapper wps=wrapperOrNullFromDescriptor(dSrc);\n      if (wps != null) {\n        if (wps.isSigned() || wps.isFloating()) {\n          unbox(wrapperName(wps),wTarget);\n        }\n else {\n          unbox(wrapperName(wps),wps);\n          widen(wps,wTarget);\n        }\n      }\n else {\n        String intermediate;\n        if (wTarget.isSigned() || wTarget.isFloating()) {\n          intermediate=\"java/lang/Number\";\n        }\n else {\n          intermediate=wrapperName(wTarget);\n        }\n        cast(dSrc,intermediate);\n        unbox(intermediate,wTarget);\n      }\n    }\n else {\n      cast(dSrc,dTarget);\n    }\n  }\n}\n", "\tpublic boolean isModified() {\n\t\tsynchronized (this) {\n\t\t\tif (this.baseDir.lastModified() != this.baseDirLastModified) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tfor (LifecycleResource resource : this.watchResources) {\n\t\t\t\tif (resource.isModified()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n", "@Override\n\tpublic com.liferay.commerce.product.model.CPOptionCategory deleteCPOptionCategory(\n\t\tcom.liferay.commerce.product.model.CPOptionCategory cpOptionCategory)\n\t\tthrows com.liferay.portal.kernel.exception.PortalException {\n\t\treturn _cpOptionCategoryLocalService.deleteCPOptionCategory(cpOptionCategory);\n\t}", "private void fillMapWithTemplateData ( String textForTemplateExtraction , TemplateFilter filterToApply , int id , Map < String , Set < Integer > > mapToFill ) { Set < String > names = getTemplateNames ( textForTemplateExtraction ) ; for ( String name : na", "public void addListener ( final IProjectListener listener ) { m_listeners . addListener ( listener ) ; }", "protected int[] dummyColorInscribedDataCircleFromYuvImage(ImageProxy img,int subsample){\n  logWrapper(\"RUNNING DUMMY dummyColorInscribedDataCircleFromYuvImage\");\n  int w=img.getWidth() / subsample;\n  int h=img.getHeight() / subsample;\n  int r=inscribedCircleRadius(w,h);\n  int len=r * r * 4;\n  int[] colors=new int[len];\n  for (int i=0; i < len; i++) {\n    int x=i % (2 * r);\n    int y=i / (2 * r);\n    colors[i]=(255 << 24) | ((x & 255) << 16) | ((y & 255) << 8);\n  }\n  return colors;\n}\n", "public Waiter<DescribeFleetsRequest> fleetStarted() {\n\n        return new WaiterBuilder<DescribeFleetsRequest, DescribeFleetsResult>().withSdkFunction(new DescribeFleetsFunction(client))\n                .withAcceptors(new FleetStarted.IsACTIVEMatcher(), new FleetStarted.IsPENDING_DEACTIVATEMatcher(), new FleetStarted.IsINACTIVEMatcher())\n                .withDefaultPollingStrategy(new PollingStrategy(new MaxAttemptsRetryStrategy(40), new FixedDelayStrategy(30)))\n                .withExecutorService(executorService).build();\n    }", "protected void addValidationException ( SAXException e ) { validationExceptions . add ( e ) ; }", "protected final Pair<?, ?> entry(Object key, Object value) {\n    return Pair.of(key, value);\n  }", "private CGlobalSettings ( ) { }", "private void handleResponseFailure(long requestId, Throwable t) {\n    ContextualFuture future = responseFutures.remove(requestId);\n    if (future != null) {\n      future.context.executor().execute(() -> future.completeExceptionally(t));\n    }\n  }", "public synchronized void deleteGlobalCodeNodeComment ( final INaviCodeNode node , final IComment comment ) throws CouldntDeleteException { Preconditions . checkNotNull ( node , STR_ ) ; deleteComment ( new CodeNodeCommentingStrategy ( node , CommentScope ", "public OvhImage serviceType_imageName_GET(net.minidev.ovh.api.distribution.image.OvhService serviceType, String imageName) throws IOException {\n\t\tString qPath = \"/distribution/image/{serviceType}/{imageName}\";\n\t\tStringBuilder sb = path(qPath, serviceType, imageName);\n\t\tString resp = execN(qPath, \"GET\", sb.toString(), null);\n\t\treturn convertTo(resp, OvhImage.class);\n\t}", "protected static ModbusResponse readRequest(int functionCode,int register,int count){\n  ModbusUDPTransaction trans;\n  UDPMasterConnection connection=null;\n  try {\n    connection=new UDPMasterConnection(InetAddress.getByName(TestUtils.getFirstIp4Address()));\n    connection.setPort(PORT);\n    connection.connect();\n    connection.setTimeout(500);\n    ModbusRequest req=null;\nswitch (functionCode) {\ncase Modbus.READ_COILS:\n      req=new ReadCoilsRequest(register,count);\n    break;\ncase Modbus.READ_INPUT_DISCRETES:\n  req=new ReadInputDiscretesRequest(register,count);\nbreak;\ncase Modbus.READ_INPUT_REGISTERS:\nreq=new ReadInputRegistersRequest(register,count);\nbreak;\ncase Modbus.READ_HOLDING_REGISTERS:\nreq=new ReadMultipleRegistersRequest(register,count);\nbreak;\ndefault :\nfail(String.format(\"Request type %d is not supported by the test harness\",functionCode));\n}\nreq.setUnitID(UNIT_ID);\ntrans=new ModbusUDPTransaction(connection);\ntrans.setRequest(req);\ntrans.execute();\nreturn trans.getResponse();\n}\n catch (Exception e) {\nlogger.debug(e.getMessage());\n}\n finally {\nif (connection != null) {\nconnection.close();\n}\n}\nreturn null;\n}\n", "public static void main ( final String [ ] args ) throws Exception { if ( args . length != NUM_ ) { System . err . println ( STR_ ) ; System . err . println ( STR_ + STR_ ) ; return ; } ClassReader cr ; if ( args [ NUM_ ] . endsWith ( STR_ ) ) { cr = new ", "@Override\n    public UpdateSMBFileShareResult updateSMBFileShare(UpdateSMBFileShareRequest request) {\n        request = beforeClientExecution(request);\n        return executeUpdateSMBFileShare(request);\n    }", "protected final void scanClass(Class<?> c){\n  for (  Class<? extends Annotation> cAnnotation : supportedClassAnnotations) {\n    if (c.isAnnotationPresent(cAnnotation)) {\n      annotatedClasses.add(c);\n    }\n  }\n}\n", "public static void clear ( JComboBox self ) { self . removeAllItems ( ) ; }", "protected PostgreSQLModuleViewsLoader ( ) { }", "public static BitInputStream toBitInputStream ( InputStream in ) { return in instanceof BitInputStream ? ( BitInputStream ) in : new BitInputStream ( in ) ; }", "public Object get(int index) {\n\n        if (index >= elementCount) {\n            throw new IndexOutOfBoundsException(\"Index out of bounds: \"\n                                                + index + \" >= \"\n                                                + elementCount);\n        }\n\n        if (index < 0) {\n            throw new IndexOutOfBoundsException(\"Index out of bounds: \"\n                                                + index + \" < 0\");\n        }\n\n        return elementData[index];\n    }", "protected void hideTitleBar ( ) { mTitleView . setVisibility ( View . GONE ) ; }", "\tpublic void setContentTypeViewMapping(final Map<String, String> contentTypeViewMapping) {\n\t\tAssert.notNull(contentTypeViewMapping, \"'contentTypeViewMapping' must not be null\");\n\t\tthis.contentTypeViewMapping.clear();\n\t\tthis.contentTypeViewMapping.putAll(contentTypeViewMapping);\n\t}\n", "static URLClassLoader createURLCLassLoader(final URL[] urls, final ClassLoader parent)\n   {\n      return (URLClassLoader)AccessController.doPrivileged(new PrivilegedAction<Object>() \n      {\n         public Object run()\n         {\n            return new U", "public static ReilInstruction createLdm ( final Address address , final ReilOperand loadSource , final ReilOperand loadTarget ) { return new ReilInstruction ( address , ReilMnemonics . LDM , loadSource , ReilOperand . EMPTY_OPERAND , loadTarget ) ; }", "public Optional<T> first(){\n  Iterator<T> iterator=iterator();\n  return iterator.hasNext() ? Optional.of(iterator.next()) : Optional.<T>empty();\n}\n", "@Test\n    public void getGroupsForUserInTopGroup() throws Exception {\n        // This test will only be executed when using physical LDAP server\n        Assume.assumeTrue(!LDAPUtils.USE_LOCAL_LDAP_SERVER);\n        String user = topGroupUser;\n        Log.info(logClass, \"getGroupsForUserInTopGroup\", \"Checking with a valid user.\");\n        List<String> list = myServlet.getGroupsForUser(user);\n        System.out.println(\"List of groups : \" + list.toString());\n        assertTrue(list.contains(getCN() + topGroup + getSuffix()));\n    }", "public Mat rgba ( ) ;", "public static final WritableFontData createWritableFontData ( ReadableFontData original ) { ByteArray < ? > ba = null ; if ( original . array . growable ( ) ) { ba = new GrowableMemoryByteArray ( ) ; } else { ba = new MemoryByteArray ( original . array . length ( ) ) ; } original . array . copyTo ( ba ) ; WritableFontData wfd = new WritableFontData ( ba ) ; wfd . setCheckSumRanges ( original . checkSumRange ( ) ) ; return wfd ; }", "private void cleanStatic ( MethodNode method ) { }", "public static void updateLog4jConfiguration(Class<?> targetClass, String log4jPath, String log4jFileName)\n      throws IOException {\n    Closer closer = Closer.create();\n    try {\n      InputStream fileInputStream = closer.register(new FileInputStream(log4jPath));\n      InputStream inputStream = closer.register(targetClass.getResourceAsStream(\"/\" + log4jFileName));\n      Properties customProperties = new Properties();\n      customProperties.load(fileInputStream);\n      Properties originalProperties = new Properties();\n      originalProperties.load(inputStream);\n\n      for (Entry<Object, Object> entry : customProperties.entrySet()) {\n        originalProperties.setProperty(entry.getKey().toString(), entry.getValue().toString());\n      }\n\n      LogManager.resetConfiguration();\n      PropertyConfigurator.configure(originalProperties);\n    } catch (Throwable t) {\n      throw closer.rethrow(t);\n    } finally {\n      closer.close();\n    }\n  }", "public static int indexOf(@NotNull CharSequence buffer,@NotNull CharSequence pattern,int fromIndex,final int toIndex){\n  final int patternLength=pattern.length();\n  int limit=toIndex - patternLength + 1;\n  if (fromIndex < 0) {\n    fromIndex=0;\n  }\n  SearchLoop:   for (int i=fromIndex; i < limit; i++) {\n    for (int j=0; j < patternLength; j++) {\n      if (pattern.charAt(j) != buffer.charAt(i + j))       continue SearchLoop;\n    }\n    return i;\n  }\n  return -1;\n}\n", "\tpublic String getjdbcDatabaseSelectLimit() {\n\t\treturn jdbcDatabaseSelectLimit;\n\t}\n", "protected List<String> tokenize(final char[] srcChars, final int offset, final int count) {\n        if (srcChars == null || count == 0) {\n            return Collections.emptyList();\n        }\n        final StrBuilder buf = new StrBuilder();\n        final List<String> tokenList = new ArrayList<>();\n        int pos = offset;\n\n        // loop around the entire buffer\n        while (pos >= 0 && pos < count) {\n            // find next token\n            pos = readNextToken(srcChars, pos, count, buf, tokenList);\n\n            // handle case where end of string is a delimiter\n            if (pos >= count) {\n                addToken(tokenList, StringUtils.EMPTY);\n            }\n        }\n        return tokenList;\n    }", "protected void verifyMatch ( Object target , Object deserialized ) { CronExpression targetCronExpression = ( CronExpression ) target ; CronExpression deserializedCronExpression = ( CronExpression ) deserialized ; assertNotNull ( deserializedCronExpression", "public CRefreshAction ( final JFrame parent , final IFrontEndDebuggerProvider debugPerspectiveModel , final IRefreshRangeProvider rangeProvider , final IRefreshRangeProvider stackRangeProvider ) { Preconditions . checkNotNull ( parent , STR_ ) ; Preconditions . checkNotNull ( debugPerspectiveModel , STR_ ) ; m_parent = parent ; m_debugPerspectiveModel = debugPerspectiveModel ; m_rangeProvider = rangeProvider ; m_stackRangeProvider = stackRangeProvider ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; putValue ( Action . SHORT_DESCRIPTION , STR_ ) ; }", "public ShapeHandler getShapeHandler() throws ShapefileException {\n    ShapeHandler handler;\n    switch (id) {\n      case 1: case 11: case 21:\n        handler = new PointHandler(this);\n        break;\n      case 3: case 13: case 23:\n        handler = new MultiLineHandler(this);\n        break;\n      case 5: case 15: case 25:\n        handler = new PolygonHandler(this);\n        break;\n      case 8: case 18: case 28:\n        handler = new MultiPointHandler(this);\n        break;\n      default:\n        handler = null;\n    }\n    return handler;\n  }", "public void visitClassType ( String name ) { }", "public static boolean copyMerge(FileSystem srcFS, Path srcDir, \n                                  FileSystem dstFS, Path dstFile, \n                                  boolean deleteSource,\n                                  Configuration conf, String addStri", "\tprivate void initPositionAndAnimation(Vector3f initialPosition, Quaternion initialRotation)\t{\n\t\tanimControl = new CharacterAnimationControl(this);\n\t\tnodeModel.addControl(animControl);\n\t\tmanualControl = new ManualCharacterControl(initialPosition,initialRotation,animControl);\n    \tthis.addControl(manualControl);\n\t}\n", "public void scrollToOpen(){\n  if (currentInnerStatus == InnerStatus.OPENED) {\n    return;\n  }\n  if (maxOffset == minOffset) {\n    return;\n  }\n  int dy=-getScrollY() - maxOffset;\n  if (dy == 0) {\n    return;\n  }\n  currentInnerStatus=InnerStatus.SCROLLING;\n  int duration=MIN_SCROLL_DURATION + Math.abs((MAX_SCROLL_DURATION - MIN_SCROLL_DURATION) * dy / (maxOffset - minOffset));\n  scroller.startScroll(0,getScrollY(),0,dy,duration);\n  invalidate();\n}\n", "public boolean isStatusCheck ( ) { return checkStatus ; }", "private static long FNVhash64(long val){\n  long hashval=FNV_offset_basis_64;\n  for (int i=0; i < 8; i++) {\n    long octet=val & 0x00ff;\n    val=val >> 8;\n    hashval=hashval ^ octet;\n    hashval=hashval * FNV_prime_64;\n  }\n  return Math.abs(hashval);\n}\n", "public Thread connect ( ) throws IOException { this . running = BOOL_ ; this . readyState = WEBSOCKET_STATE_CONNECTING ; socketChannel = SocketChannel . open ( ) ; socketChannel . configureBlocking ( BOOL_ ) ; socketChannel . connect ( new InetSocketAddre", "private JPanel createSubGroupPanel(String labelText){\n  JLabel subGroupLabel=new JLabel();\n  Font font=subGroupLabel.getFont();\n  font=font.deriveFont(Font.BOLD,14f);\n  subGroupLabel.setFont(font);\n  subGroupLabel.setForeground(SettingsTabs.COLOR_SUBGROUP);\n  subGroupLabel.setText(labelText);\n  int top=SUBGROUP_TOP_MARGIN;\n  if (isFirstSubGroup) {\n    isFirstSubGroup=false;\n    top=FIRST_SUBGROUP_TOP_MARGIN;\n  }\n  subGroupLabel.setBorder(BorderFactory.createEmptyBorder(top,0,7,0));\n  JPanel subGroupPanel=new JPanel();\n  subGroupPanel.setLayout(new BoxLayout(subGroupPanel,BoxLayout.LINE_AXIS));\n  subGroupPanel.add(subGroupLabel);\n  subGroupPanel.add(Box.createHorizontalGlue());\n  return subGroupPanel;\n}\n", "\tprivate File getLatestVersionFile(Binder binder, DefinableEntity entry, String relativeFilePath) {\n\t\tString latestVersionName = getLatestVersionName(binder, entry, relativeFilePath);\n\t\tif(latestVersionName != null)\n\t\t\treturn getVersionFile(binder, entry, relativeFilePath, latestVersionName);\n\t\telse\n\t\t\treturn null;\n\t}\n", "boolean canEmail ( String address ) ;", "public TypeName(String fullName,String nickname){\n  this.topLevelAlias=TypeAlias.create(fullName,nickname);\n  this.pattern=null;\n  this.innerTypeNames=Arrays.asList();\n}\n", "private void assertNoBackendCodeInUIThread ( ) { Assert . assertTrue ( STR_ , MonitorAdaptor . aspectIsActive ( ) ) ; Assert . assertFalse ( STR_ + MonitorAdaptor . getTriggeredJoinPoints ( ) . size ( ) , MonitorAdaptor . hasTriggeredBackendCode ( ) ) ; M", "public static InputStream toInputStream ( String input , Charset encoding ) { return new ByteArrayInputStream ( input . getBytes ( Charsets . toCharset ( encoding ) ) ) ; }", "public static void setImageResource(EfficientCacheView cacheView, int viewId,\n            @DrawableRes int resId) {\n        View view = cacheView.findViewByIdEfficient(viewId);\n        if (view instanceof ImageView) {\n            ((ImageView) view).setImageResource(resId);\n        }\n    }", "@Override\n  public final String getFor(final Class<?> pCls, final String pFldNm) {\n    String cnNm;\n    boolean isCr = this.mngSettings.getFieldsSettings() == null\n      || this.mngSettings.getFieldsSettings().get(pCls) == null;\n    cnNm = this.mngSettings.lazFldSts(pCls, pFldNm).get(this.settingName);\n    if (cnNm != null && isCr && (CnvTfsEnum.class.getSimpleName().equals(cnNm)\n      || CnvTfsObject.class.getSimpleName().equals(cnNm)\n        || cnNm.startsWith(CnvTfsHasId.class.getSimpleName()))) {\n      Field field = this.fieldsRapiHolder.getFor(pCls, pFldNm);\n      Class fldCl = field.getType();\n      cnNm += fldCl.getSimpleName();\n      this.mngSettings.lazFldSts(pCls, pFldNm).put(this.settingName, cnNm);\n    }\n    return cnNm;\n  }", "  public void createControl(Composite parent) {\n    Composite composite = new TemporaryCarateristicComposite(parent, SWT.NONE, perso);\n    setControl(composite);\n  }\n", "public static int combineHashCodes(int hashCode1,int hashCode2){\n  return hashCode1 * 17 + hashCode2;\n}\n", "    public CMLAtomSet complement(CMLAtomSet atomSet2) {\n        if (atomSet2 == null) {\n            return this;\n        }\n        CMLAtomSet newAtomSet = new CMLAtomSet();\n\n        List<CMLAtom> atoms = this.getAtoms();\n        for (int i = 0; i < atoms.size(); i++) {\n            if (!atomSet2.contains(atoms.get(i))) {\n                newAtomSet.addAtom(atoms.get(i));\n            }\n        }\n        return newAtomSet;\n    }\n", "public boolean init(StepMetaInterface smi,StepDataInterface sdi){\n  meta=(MDKeyGenStepMeta)smi;\n  data=(MDKeyGenStepData)sdi;\n  return super.init(smi,sdi);\n}\n", "public SphericalPolarCoordinates(Vector3D v,double newRadius){\n  radius=v.modulus();\n  theta=Math.acos(v.getZ() / radius);\n  phi=Math.atan(v.getY() / v.getX());\n  if (v.getY() < 0)   phi+=Math.PI;\n  radius=newRadius;\n}\n", "public void consume(double value){\n  if (consumed == nextToTake) {\n    data[next]=value;\n    next++;\n  }\n  consumed++;\n  if (consumed == blockSize) {\n    if (next == size) {\n      Arrays.sort(data);\n    }\n else {\n      consumed=0;\n      if (blockSize > 1) {\n        nextToTake=randomGenerator.nextLong(blockSize);\n      }\n    }\n  }\n}\n", "public static String toStringAccessValue(short accessValue) throws SecurityException {\nswitch (accessValue) {\ncase VALUE_NONE:\n    return \"none\";\ncase VALUE_YES:\n  return \"yes\";\ncase VALUE_LOCAL:\nreturn \"local\";\ncase VALUE_1:\nreturn \"1\";\ncase VALUE_2:\nreturn \"2\";\ncase VALUE_3:\nreturn \"3\";\ncase VALUE_4:\nreturn \"4\";\ncase VALUE_5:\nreturn \"5\";\ncase VALUE_6:\nreturn \"6\";\ncase VALUE_7:\nreturn \"7\";\ncase VALUE_8:\nreturn \"8\";\ncase VALUE_9:\nreturn \"9\";\ncase VALUE_10:\nreturn \"10\";\n}\nthrow new SecurityException(\"invalid access value\",\"valid access values are [all,local,no,none,yes,1,...,10]\");\n}\n", "public static float getFloat(JsonObject object, String field, float defaultValue) {\n        final JsonValue value = object.get(field);\n        if (value == null || value.isNull()) {\n            return defaultValue;\n        } else {\n            return value.asFloat();\n        }\n    }", "void checkAndRemoveHeaderRow(int position){\n  if (isUpdateListEmpty()) {\n    for (Iterator<Displayable> it=displayableList.iterator(); it.hasNext(); ) {\n      Displayable displayable=it.next();\n      if (displayable instanceof UpdateHeaderRow) {\n        it.remove();\n        notifyItemRemoved(position);\n      }\n    }\n  }\n}\n", "public Array ( final double [ ] array , final Set < Address . Flags > flags ) { super ( NUM_ , array . length , null ) ; this . addr = new DirectArrayRowAddress ( this . $ , NUM_ , null , NUM_ , array . length - NUM_ , flags , BOOL_ , NUM_ , array . lengt", "public void marshall(LayerVersionContentOutput layerVersionContentOutput, ProtocolMarshaller protocolMarshaller) {\n\n        if (layerVersionContentOutput == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(layerVersionContentOutput.getLocation(), LOCATION_BINDING);\n            protocolMarshaller.marshall(layerVersionContentOutput.getCodeSha256(), CODESHA256_BINDING);\n            protocolMarshaller.marshall(layerVersionContentOutput.getCodeSize(), CODESIZE_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "        private void rescale() {\n                final Dimension s=getMinimumSize();\n                // Swing optimised\n                final int thisWidth=Math.max(getWidth(),s.width);\n                final int thisHeight=Math.max(getHeight(),s.height);\n                xScale=(thisWidth-(leftAxisPad+axisPad))/(maxX-minX);\n                yScale=(thisHeight-2*axisPad)/(maxY-minY);\n                origin.x=leftAxisPad-Math.round(minX*xScale);\n                origin.y=thisHeight-axisPad+Math.round(minY*yScale);\n                redraw();\n        }\n", "    public boolean isAmendment() {\n        return amendment;\n    }\n", "\tprivate void append(Segment s){\n\t\ttry{\n\t\t\tfw.write( s.data);\n\t\t\tfw.flush();\n\t\t\tseg_counter ++;\n\t\t\ttime_last_written = System.currentTimeMillis();\n\t\t\t//listener.msgEvent(\"SEG \" + s.nr+ \" written->\" + (recordCounter-1) + \"\\n\");\n\t\t}catch(IOException ioe){\n\t\t\tSystem.out.println(\"Error writing to file:\" + ioe.getMessage());\n\t\t}\n\t}\n", "public double saxMinDist(char[] a,char[] b,double[][] distanceMatrix,int n,int w) throws SAXException {\n  if (a.length == b.length) {\n    double dist=0.0D;\n    for (int i=0; i < a.length; i++) {\n      if (Character.isLetter(a[i]) && Character.isLetter(b[i])) {\n        int numA=Character.getNumericValue(a[i]) - 10;\n        int numB=Character.getNumericValue(b[i]) - 10;\n        int maxIdx=distanceMatrix[0].length;\n        if (numA > (maxIdx - 1) || numA < 0 || numB > (maxIdx - 1) || numB < 0) {\n          throw new SAXException(\"The character index greater than \" + maxIdx + \" or less than 0!\");\n        }\n        double localDist=distanceMatrix[numA][numB];\n        dist=dist + localDist * localDist;\n      }\n else {\n        throw new SAXException(\"Non-literal character found!\");\n      }\n    }\n    return Math.sqrt((double)n / (double)w) * Math.sqrt(dist);\n  }\n else {\n    throw new SAXException(\"Data arrays lengths are not equal!\");\n  }\n}\n", "private static int indexOfLeastSignificantZeroBit(int value){\n  int index=1;\n  while ((value & 1) != 0) {\n    value>>=1;\n    index++;\n  }\n  return index;\n}\n", "private void importRecords(){\n  for (  X_I_Product_BOM importBOM : getRecords(false,m_IsImportOnlyNoErrors)) {\n    isImported=false;\n    MPPProductBOM bom=getMPPProductBOM(importBOM);\n    MPPProductBOMLine bomLine=null;\n    if (bom != null)     bomLine=importBOMLine(bom,importBOM);\n    if (bomLine != null) {\n      importBOM.setPP_Product_BOMLine_ID(bomLine.getPP_Product_BOMLine_ID());\n      importBOM.setPP_Product_BOM_ID(bom.get_ID());\n      imported++;\n      isImported=true;\n    }\n    importBOM.setI_IsImported(isImported);\n    importBOM.setProcessed(isImported);\n    importBOM.saveEx();\n  }\n}\n", "public boolean readBoolean(InputStream in) throws ConversionException, IOException {\n        JSONArray json = parseArray(in);\n        if (json.size() != 1) {\n            throwConversionException(\"readBoolean() expects one item in the array: [ true | false ].\", json);\n        }\n        return readBooleanInternal(json.get(0));\n    }", "public static void updateMemberOffsets ( final Connection connection , final List < Integer > members , final int delta , final List < Integer > implicitlyUpdatedMembers , final int implicitDelta , final INaviModule module ) throws CouldntSaveDataException { try { final CallableStatement statement = connection . prepareCall ( STR_ ) ; try { statement . setInt ( NUM_ , module . getConfiguration ( ) . getId ( ) ) ; statement . setArray ( NUM_ , connection . createArrayOf ( STR_ , members . toArray ( ) ) ) ; statement . setInt ( NUM_ , delta ) ; statement . setArray ( NUM_ , connection . createArrayOf ( STR_ , implicitlyUpdatedMembers . toArray ( ) ) ) ; statement . setInt ( NUM_ , implicitDelta ) ; statement . execute ( ) ; } finally { statement . close ( ) ; } } catch ( final SQLException exception ) { throw new CouldntSaveDataException ( exception ) ; } }", "    public void consistCheck(Model m, InconsistentAction inconsist) {\n        boolean finished;\n        do{\n            finished = true;\n            Iterator<Rule> i = rules.iterator();\n            \n            while(i.hasNext()) {\n                finished = consistCheck(m, i.next(), 0, inconsist, new CheckerCondition() {\n                    public boolean check(int argument, Rule rule, Graph g, int i, int j) {\n                        return (argument < rule.premiseCount && g.isConnected(i,j)) ||\n                                (argument >= rule.premiseCount && !g.isConnected(i,j));\n                    }\n                    public boolean mustConnect(int argument, Rule rule) { return argument < rule.premiseCount; }\n                })\n                && finished;\n            }\n        } while(!finished);\n    }\n", "public static void search ( final Window parent , final ComboBoxEditor editor , final ZyGraph graph , final GraphSearcher searcher , final String searchString , final boolean cycleBackwards , final boolean zoomToResult ) { if ( searcher . hasChanged ( ) || ! searchString . equals ( searcher . getLastSearchString ( ) ) ) { CSearchExecuter . startNewSearch ( parent , editor , graph , searcher , searchString , zoomToResult ) ; } else if ( ! searcher . getResults ( ) . isEmpty ( ) ) { CSearchExecuter . cycleExistingSearch ( parent , graph , searcher , cycleBackwards , zoomToResult ) ; } }", "public static List<TaskEntity> getTaskEntities(TopologyInfo topologyInfo, String componentName) {\n        TreeMap<Integer, TaskEntity> tasks = new TreeMap<>();\n\n        for (ComponentSummary cs : topologyInfo.get_components()) {\n            String compName = cs.get_name();\n            String type = cs.get_type();\n            if (componentName.equals(compName)) {\n                for (int id : cs.get_taskIds()) {\n                    tasks.put(id, new TaskEntity(id, compName, type));\n                }\n            }\n        }\n\n        for (TaskSummary ts : topologyInfo.get_tasks()) {\n            if (tasks.containsKey(ts.get_taskId())) {\n                TaskEntity te = tasks.get(ts.get_taskId());\n                te.setHost(ts.get_host());\n                te.setPort(ts.get_port());\n                te.setStatus(ts.get_status());\n                te.setUptime(ts.get_uptime());\n                te.setErrors(ts.get_errors());\n            }\n        }\n\n        return new ArrayList<>(tasks.values());\n    }", "@Override public void put(final String key,final Object value){\n  if (null == key)   throw new IllegalArgumentException(\"key may not be null\");\n  if (key.isEmpty())   throw new IllegalArgumentException(\"key may not be empty\");\n  globalScope.put(key,value);\n}\n", "String upcaseFirst(String name)\n   {\n      StringBuilder sb = new StringBuilder();\n      sb.append(name.substring(0, 1).toUpperCase(Locale.ENGLISH));\n      sb.append(name.substring(1));\n      return sb.toString();\n   }", "private Supplier < Pair < Integer , JsonNode > > handleReplaceOp ( String path , JsonNode patchVal , PatchRequestScope requestScope ) { try { JsonApiDocument value = requestScope . getMapper ( ) . readJsonApiPatchExtValue ( patchVal ) ; PatchVisitor visit", "public StringEncoderComparator ( ) { }", "    private int getStartOfFilename(final String text) {\n        if (text.startsWith(\"file:\")) {\n            return 5;\n        }\n\n        int start = text.indexOf(\"] \");\n\n        if (start > 0) {\n            return start + 2;\n        }\n\n        start = text.indexOf(\": \");\n\n        if (start > 0) {\n            return start + 2;\n        }\n\n        start = text.indexOf(\"file:\");\n\n        if (start > 0) {\n            return start + 5;\n        }\n\n        return 0;\n    }\n", "public boolean bound ( int offset , int length ) { if ( ( offset + length > this . size ( ) ) || offset < NUM_ || length < NUM_ ) { return BOOL_ ; } this . boundOffset += offset ; this . boundLength = length ; return BOOL_ ; }", "private static void createInitialEdges ( final View view , final Collection < FunctionBlock > passedFunctions , final Map < BasicBlock , ViewNode > nodeMap ) { for ( final FunctionBlock functionBlock : passedFunctions ) { final Function function = functio", "public static void closeQuietly ( LineIterator iterator ) { if ( iterator != null ) { iterator . close ( ) ; } }", "\tpublic short getShort(String columnName) throws SQLException {\n\t    String str = getString(columnName);\n\t    return (str == null) ? 0 : Short.parseShort(str);\n\t}\n", "   public void setIndex(final int newIndex, final Page page) {\n      removeWithoutDispose(page);\n      page.setDialog(this);\n      add(newIndex, page);\n   }\n", "private Object getObject(final Element el,\n                           final Class cl) throws Throwable {\n    Class objClass = cl;\n\n    /* Element may have type attribute */\n    String type = XmlUtil.getAttrVal(el, \"type\");\n\n    if ((type == null) && (objClass == null)) {\n      error(\"Must supply a class or have type attribute\");\n      return null;\n    }\n\n    if (objClass == null) {\n      objClass = Class.forName(type);\n    }\n\n    return objClass.newInstance();\n  }", "public void removeListener ( final IDebugEventListener listener ) { listeners . removeListener ( listener ) ; }", "private void validateAddParams(T source,String sourceID,T target,Position p){\n  if (source == null || sourceID == null || sourceID.length() < 1 || target == null || p == null) {\n    String message=null;\n    if (source == null) {\n      message=\"Attempt to add a null source object\";\n    }\n else     if (sourceID == null) {\n      message=\"Attempt to assign an invalid id to added source \" + source + \",  sourceID = \"+ sourceID;\n    }\n else     if (target == null) {\n      message=\"Attempt to add a source object to an invalid target\";\n    }\n else     if (p == null) {\n      message=\"Attempt to add a source object to an invalid target location p = \" + p;\n    }\n    throw new IllegalArgumentException(message);\n  }\n}\n", "public void writeInt(int value) throws IOException {\n  checkWritePrimitiveTypes();\n  primitiveTypes.writeInt(value);\n}\n", "private ConcurrentBufferedUpdate(final Network network){\n  this.network=network;\n  currentAvailableProcessors=getAvailableConsumerProcessors();\n  executors=Executors.newFixedThreadPool(currentAvailableProcessors);\n  for (  Neuron n : network.getFlatNeuronList()) {\n    neurons.add(n);\n  }\n  for (  NeuronGroup ng : network.getFlatNeuronGroupList()) {\n    neurons.addAll(ng.getNeuronList());\n  }\n  taskSet=new CyclicTaskQueue(neurons,currentAvailableProcessors);\n}\n", "private static List<String> getExcludedForResource(final String sitePath, final List<String> excluded) {\n\n        List<String> result = new ArrayList<String>();\n        for (String exclude : excluded) {\n            if (CmsStringUtil.isPrefixPath(sitePath, exclude)) {\n                result.add(exclude);\n            }\n        }\n        return result;\n    }", "private String numberToNational(String number){\n  final PhoneNumberUtil util=PhoneNumberUtil.getInstance();\n  try {\n    final Phonenumber.PhoneNumber phoneNumber=util.parse(number,mCountryCode);\n    return String.valueOf(phoneNumber.getNationalNumber());\n  }\n catch (  NumberParseException e) {\n    return \"\";\n  }\n}\n", "public static int min ( final int a , final int b ) { return ( a <= b ) ? a : b ; }", "public void addEvent ( final ITraceEvent event ) { Preconditions . checkNotNull ( event , STR_ ) ; if ( traceEvents . contains ( event ) ) { throw new IllegalStateException ( STR_ ) ; } traceEvents . add ( event ) ; for ( final ITraceListListener listener : listeners ) { try { listener . eventAdded ( this , event ) ; } catch ( final Exception exception ) { CUtilityFunctions . logException ( exception ) ; } } }", "public static SourceLineAnnotation fromVisitedInstruction ( BytecodeScanningDetector visitor ) { return fromVisitedInstruction ( visitor . getClassContext ( ) , visitor , visitor . getPC ( ) ) ; }", "public boolean inClip ( double time ) { return time < clipEnd && time >= clipBegin ; }", "public final int endLine ( ) { return this . eLine ; }", "private boolean tryLoadBuildProperties(Manifest manifest)\n    {\n        Attributes mainAttributes = manifest.getMainAttributes();\n        String projectVersion = mainAttributes.getValue(PROJECT_VERSION_ATTRIBUTE);\n        String time = mainAttributes.getValue(BUILD_TIME_ATTRIBUTE);\n\n        if (projectVersion == null || time == null)\n        {\n            return false;\n        }\n\n        ourProjectVersion = projectVersion;\n\n        try\n        {\n            ourBuildTime = Timestamp.valueOf(time);\n        }\n        catch (IllegalArgumentException e)\n        {\n            // Badly formatted timestamp. Ignore it.\n        }\n        return true;\n    }", "public void setExpiryDate(\n            @IntRange(from = 1, to = 12) int month,\n            @IntRange(from = 0, to = 9999) int year) {\n        mExpiryDateEditText.setText(DateUtils.createDateStringFromIntegerInput(month, year));\n    }", "public void setSAMLProviderList(java.util.Collection<SAMLProviderListEntry> sAMLProviderList) {\n        if (sAMLProviderList == null) {\n            this.sAMLProviderList = null;\n            return;\n        }\n\n        this.sAMLProviderList = new com.amazonaws.internal.SdkInternalList<SAMLProviderListEntry>(sAMLProviderList);\n    }", "public IdQuery(Class<T> type,Object id,Object routing,QueryResultType queryResultType,int version){\n  this(type.getName(),id,routing,queryResultType,version);\n}\n", "public INode remove(){\n  ArrayList<INode> min=tree.minimum();\n  INode best=min.remove(0);\n  hash.remove(best);\n  if (min.size() > 0) {\n    tree.insert(best.score(),min);\n  }\n  return best;\n}\n", "public void startSearch(int timeout, boolean wait) throws KNXException\r\n\t{\r\n\t\tif (timeout < 0)\r\n\t\t\tthrow new KNXIllegalArgumentException(\"timeout has to be >= 0\");\r\n\t\tfinal Enumeration eni;\r\n\t\ttry {\r\n\t\t\teni = NetworkInterface.getNetworkInterfaces();\r\n\t\t}\r\n\t\tcatch (final SocketException e) {\r\n\t\t\tlogger.error(\"failed to get network interfaces\", e);\r\n\t\t\tthrow new KNXException(\"network interface error: \" + e.getMessage());\r\n\t\t}\r\n\t\tif (eni == null) {\r\n\t\t\tlogger.error(\"no network interfaces found\");\r\n\t\t\tthrow new KNXException(\"no network interfaces found\");\r\n\t\t}\r\n\t\tfinal List rcv = new ArrayList();\r\n\t\tboolean lo = false;\r\n\t\twhile (eni.hasMoreElements()) {\r\n\t\t\tfinal NetworkInterface ni = (NetworkInterface) eni.nextElement();\r\n\t\t\tfor (final Enumeration ea = ni.getInetAddresses(); ea.hasMoreElements();) {\r\n\t\t\t\tfinal InetAddress a = (InetAddress) ea.nextElement();\r\n\t\t\t\tif (!isNatAware && a.getAddress().length != 4)\r\n\t\t\t\t\tlogger.info(\"skipped \" + a + \", not an IPv4 address\");\r\n\t\t\t\telse\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tif (!(lo && a.isLoopbackAddress()))\r\n\t\t\t\t\t\t\trcv.add(search(new InetSocketAddress(a, port), ni, timeout));\r\n\t\t\t\t\t\tif (a.isLoopbackAddress())\r\n\t\t\t\t\t\t\tlo = true;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (final KNXException e) {}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (rcv.size() == 0)\r\n\t\t\tthrow new KNXException(\"search couldn't be started on any network interface\");\r\n\t\tif (wait)\r\n\t\t\tfor (final Iterator i = rcv.iterator(); i.hasNext();)\r\n\t\t\t\tjoin((Thread) i.next());\r\n\t}\r\n\r\n\t/**\r\n\t * Stops every search currently running within this Discoverer.\r\n\t * <p>\r\n\t * Already gathered search responses from a search will not be removed.\r\n\t */\r\n\tpublic final void stopSearch()\r\n\t{\r\n\t\tsynchronized (receiver) {\r\n\t\t\tfor (final Iterator i = receiver.iterator(); i.hasNext();)\r\n\t\t\t\t((Receiver) i.next()).quit();\r\n\t\t\treceiver.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns <code>true</code> if a search is currently running.\r\n\t * <p>\r\n\t * \r\n\t * @return a <code>boolean</code> showing the search state\r\n\t */\r\n\tpublic final boolean isSearching()\r\n\t{\r\n\t\treturn receiver.size() != 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all collected search responses received by searches so far.\r\n\t * <p>\r\n\t * As long as searches are running, new responses might be added to the list of\r\n\t * responses.\r\n\t * \r\n\t * @return array of {@link SearchResponse}s\r\n\t * @see #stopSearch()\r\n\t */\r\n\tpublic final SearchResponse[] getSearchResponses()\r\n\t{\r\n\t\treturn (SearchResponse[]) responses.toArray(new SearchResponse[responses.size()]);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all search responses collected so far.\r\n\t * <p>\r\n\t */\r\n\tpublic final void clearSearchResponses()\r\n\t{\r\n\t\tresponses.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * Sends a description request to <code>server</code> and waits at most\r\n\t * <code>timeout</code> seconds for the answer message to arrive.\r\n\t * <p>\r\n\t * \r\n\t * @param server the InetSocketAddress of the server the description is requested from\r\n\t * @param timeout time window in seconds to wait for answer message, 0 &lt; timeout\r\n\t *        &lt; ({@link Integer#MAX_VALUE} / 1000)\r\n\t * @return the description response message\r\n\t * @throws KNXException on network I/O error\r\n\t * @throws KNXTimeoutException if the timeout was reached before the description\r\n\t *         response arrived\r\n\t * @throws KNXInvalidResponseException if a received message from <code>server</code>\r\n\t *         does not match the expected response\r\n\t */\r\n\tpublic DescriptionResponse getDescription(InetSocketAddress server, int timeout)\r\n\t\tthrows KNXException\r\n\t{\r\n\t\tif (timeout <= 0 || timeout >= Integer.MAX_VALUE / 1000)\r\n\t\t\tthrow new KNXIllegalArgumentException(\"timeout out of range\");\r\n\t\tDatagramSocket s = null;\r\n\t\ttry {\r\n\t\t\ts = new DatagramSocket(port, host);\r\n\t\t\tfinal byte[] buf = PacketHelper.toPacket(new DescriptionRequest(\r\n\t\t\t\tisNatAware ? null : (InetSocketAddress) s.getLocalSocketAddress()));\r\n\t\t\ts.send(new DatagramPacket(buf, buf.length, server));\r\n\t\t\tfinal long end = System.currentTimeMillis() + timeout * 1000L;\r\n\t\t\tDatagramPacket p = null;\r\n\t\t\twhile ((p = receive(s, end)) != null) {\r\n\t\t\t\tif (p.getSocketAddress().equals(server)) {\r\n\t\t\t\t\tfinal KNXnetIPHeader h =\r\n\t\t\t\t\t\tnew KNXnetIPHeader(p.getData(), p.getOffset());\r\n\t\t\t\t\tif (h.getServiceType() == KNXnetIPHeader.DESCRIPTION_RES)\r\n\t\t\t\t\t\treturn new DescriptionResponse(p.getData(), p.getOffset()\r\n\t\t\t\t\t\t\t+ h.getStructLength());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (final IOException e) {\r\n\t\t\tfinal String msg = \"network failure on getting description\";\r\n\t\t\tlogger.error(msg, e);\r\n\t\t\tthrow new KNXException(msg);\r\n\t\t}\r\n\t\tcatch (final KNXFormatException e) {\r\n\t\t\tlogger.error(\"invalid description response\", e);\r\n\t\t\tthrow new KNXInvalidResponseException(e.getMessage());\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tif (s != null)\r\n\t\t\t\ts.close();\r\n\t\t}\r\n\t\tfinal String msg = \"timeout, no description response received\";\r\n\t\tlogger.warn(msg);\r\n\t\tthrow new KNXTimeoutException(msg);\r\n\t}\r\n\r\n\t/**\r\n\t * Starts a search sending a search request message.\r\n\t * <p>\r\n\t * \r\n\t * @param a local SocketAddress to send search request from\r\n\t * @param ni {@link NetworkInterface} used to send outgoing multicast, or\r\n\t *        <code>null</code> to use the default multicast interface\r\n\t * @param timeout timeout in seconds, timeout >= 0, 0 for an infinite time window\r\n\t * @return the receiver thread for the search started\r\n\t * @throws KNXException\r\n\t */\r\n\tprivate Receiver search(InetSocketAddress a, NetworkInterface ni, int timeout)\r\n\t\tthrows KNXException\r\n\t{\r\n\t\tlogger.info(\"search on \" + a);\r\n\t\tMulticastSocket s = null;\r\n\t\ttry {\r\n\t\t\ts = new MulticastSocket(a);\r\n\t\t\tif (ni != null)\r\n\t\t\t\ts.setNetworkInterface(ni);\r\n\t\t\tfinal byte[] buf = PacketHelper.toPacket(new SearchRequest(isNatAware ? null\r\n\t\t\t\t: (InetSocketAddress) s.getLocalSocketAddress()));\r\n\t\t\ts.send(new DatagramPacket(buf, buf.length, multicast, SEARCH_PORT));\r\n\t\t\tfinal Receiver r = new Receiver(s, timeout);\r\n\t\t\treceiver.add(r);\r\n\t\t\treturn r;\r\n\t\t}\r\n\t\tcatch (final IOException e) {\r\n\t\t\tif (s != null)\r\n\t\t\t\ts.close();\r\n            e.printStackTrace();\r\n\t\t\tlogger.warn(\"I/O failure sending search request on \" + a, e);\r\n\t\t\tthrow new KNXException(\"search request failed, \" + e.getMessage());\r\n\t\t}\r\n\t}\r\n\r\n\t// timeEnd = 0 for infinite timeout\r\n\tprivate DatagramPacket receive(DatagramSocket s, long timeEnd) throws IOException\r\n\t{\r\n\t\tfinal long timeout = timeEnd == 0 ? 0 : timeEnd - System.currentTimeMillis();\r\n\t\tif (timeout > 0 || timeEnd == 0) {\r\n\t\t\tfinal byte[] buf = new byte[bufferSize];\r\n\t\t\tfinal DatagramPacket p = new DatagramPacket(buf, bufferSize);\r\n\t\t\ttry {\r\n\t\t\t\ts.setSoTimeout((int) timeout);\r\n\t\t\t\ts.receive(p);\r\n\t\t\t\treturn p;\r\n\t\t\t}\r\n\t\t\tcatch (final InterruptedIOException ignore) {}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate void join(Thread t)\r\n\t{\r\n\t\twhile (t.isAlive())\r\n\t\t\ttry {\r\n\t\t\t\tt.join();\r\n\t\t\t}\r\n\t\t\tcatch (final InterruptedException ignore) {}\r\n\t}\r\n\r\n\tprivate void checkHost() throws KNXException\r\n\t{\r\n\t\tif (isNatAware || host.getAddress().length == 4)\r\n\t\t\treturn;\r\n\t\tfinal KNXException e =\r\n\t\t\tnew KNXException(host.getHostAddress() + \" is not an IPv4 address\");\r\n\t\tlogger.error(\"NAT not used, only IPv4 address support\", e);\r\n\t\tthrow e;\r\n\t}\r\n\r\n\tprivate final class Receiver extends Thread\r\n\t{\r\n\t\tprivate volatile boolean quit;\r\n\t\tprivate final MulticastSocket s;\r\n\t\tprivate final int timeout;\r\n\r\n\t\t/**\r\n\t\t * Creates a new Receiver.\r\n\t\t * <p>\r\n\t\t * \r\n\t\t * @param socket socket to receive from\r\n\t\t * @param timeout live time of this Receiver, timeout >= 0, 0 is infinite timeout\r\n\t\t */\r\n\t\tReceiver(MulticastSocket socket, int timeout)\r\n\t\t{\r\n\t\t\tsuper(\"Discoverer receiver \" + socket.getLocalAddress().getHostAddress());\r\n\t\t\ts = socket;\r\n\t\t\tthis.timeout = timeout;\r\n\t\t\tsetDaemon(true);\r\n\t\t\tstart();\r\n\t\t}\r\n\r\n\t\tvoid quit()\r\n\t\t{\r\n\t\t\tquit = true;\r\n\t\t\ts.close();\r\n\t\t}\r\n\r\n\t\t/* (non-Javadoc)\r\n\t\t * @see java.lang.Thread#run()\r\n\t\t */\r\n\t\tpublic void run()\r\n\t\t{\r\n\t\t\tfinal long end = System.currentTimeMillis() + timeout * 1000;\r\n\t\t\tDatagramPacket p;\r\n\t\t\ttry {\r\n\t\t\t\twhile (!quit && (p = receive(s, timeout == 0 ? 0 : end)) != null)\r\n\t\t\t\t\tcheckForResponse(p);\r\n\t\t\t}\r\n\t\t\tcatch (final IOException e) {\r\n\t\t\t\tif (!quit)\r\n\t\t\t\t\tlogger.error(\"while waiting for response\", e);\r\n\t\t\t}\r\n\t\t\tfinally {\r\n\t\t\t\ts.close();\r\n\t\t\t\treceiver.remove(this);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate void checkForResponse(final DatagramPacket p)\r\n\t\t{\r\n\t\t\ttry {\r\n\t\t\t\tfinal KNXnetIPHeader h = new KNXnetIPHeader(p.getData(), p.getOffset());\r\n\t\t\t\tif (h.getServiceType() == KNXnetIPHeader.SEARCH_RES)\r\n\t\t\t\t\t// sync with receiver queue: check if our search was stopped\r\n\t\t\t\t\tsynchronized (receiver) {\r\n\t\t\t\t\t\tif (receiver.contains(this))\r\n\t\t\t\t\t\t\tresponses.add(new SearchResponse(p.getData(), p.getOffset()\r\n\t\t\t\t\t\t\t\t+ h.getStructLength()));\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (final KNXFormatException ignore) {}\r\n\t\t}\r\n\t}\r\n}", "public ImageSize scale ( float scale ) { return new ImageSize ( ( int ) ( width * scale ) , ( int ) ( height * scale ) ) ; }", "public MaxReducer ignoreExceptions ( ) { this . ignoreExceptions = BOOL_ ; return this ; }", "public Blade after ( String path , RouteHandler handler ) { routers . route ( path , handler , HttpMethod . AFTER ) ; return this ; }", "private int parseKeyProviderInfo(final byte[] b,final int off) throws ParseException {\n  final int bytesToParseLen=b.length - off;\n  if (bytesToParseLen >= keyProviderInfoLen_) {\n    keyProviderInfo_=Arrays.copyOfRange(b,off,off + keyProviderInfoLen_);\n    return keyProviderInfoLen_;\n  }\n else {\n    throw new ParseException(\"Not enough bytes to parse key provider info\");\n  }\n}\n", "public SequenceElement parse(InputStream stream) throws IOException, SAXException, ParserConfigurationException {\n  return parse(stream,\"UTF-8\");\n}\n", "public static boolean isVoid(String desc){\n  return desc.endsWith(\"V\");\n}\n", "    public Object getValueAt(int row, int col) {\n        if(row < 0 || row >= elogs.size())\n            return null;\n\n        Elog elog = elogs.get(row);\n\n        if(col == 0)\n            return elog.getId();\n\n        if(col == 1)\n            return DateFormatter.toString(elog.getUpdateDate());\n\n        if(col == 2)\n            return elog.getType();\n\n        if(col == 3)\n            return CIAHelper.asOneLine(elog.getDescription());\n\n        return null;\n    }\n", "private int offsetForNameRecord ( int index ) { return Offset . nameRecordStart . offset + index * Offset . nameRecordSize . offset ; }", "public static Collection < MessageFragmentStyle > colorizeRegex ( Style style , String text , Pattern regex , int group ) { ArrayList < MessageFragmentStyle > list = new ArrayList < > ( ) ; Matcher matcher = regex . matcher ( text ) ; while ( matcher . fi", "  final public void FieldTypeNameLookahead() throws ParseException {\n    trace_call(\"FieldTypeNameLookahead\");\n    try {\n      jj_consume_token(IDENTIFIER);\n      label_38:\n      while (true) {\n        if (jj_2_24(2)) {\n          ;\n        } else {\n          break label_38;\n        }\n        jj_consume_token(DOT);\n        Identifier();\n      }\n    } finally {\n      trace_return(\"FieldTypeNameLookahead\");\n    }\n  }\n", "@SuppressWarnings(\"rawtypes\")\n\tpublic static Enumeration getCurrentLoggers() {\n\t\tArrayList<Logger> copy;\n\t\tsynchronized (mutex) {\n\t\t\tcopy = new ArrayList<Logger>(loggers.values());\n\t\t}\n\t\tcopy.remove(root);\n\t\treturn Collections.enumeration(copy);\n\t}", "public static Calendar toCalendar ( Date self ) { Calendar cal = Calendar . getInstance ( ) ; cal . setTime ( self ) ; return cal ; }", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "\tprotected void listen(SensorId sid, AgentId aid){\n\t\ttry {\n\t\t\t//mainActivityLock.lock();\n\t\t\tuse(msgBoxId,new Op(\"listen\",new AcceptFromMsgFilter(aid.getName())),sid);\n\t\t} catch (Exception ex){\n\t\t\tthrow new IllegalArgumentException(\"agent \"+aid+\" no more available.\");\n\t\t} finally {\n\t\t\t//mainActivityLock.lock();\n\t\t}\n\t}\n", "@SuppressWarnings(\"unchecked\") public static boolean supports(Class cls){\n  return getMapper(cls) != null;\n}\n", "public abstract boolean eventOccured ( SpecEvent event ) ;", "private void initListeners ( ) { addMouseListener ( m_listener ) ; addMouseMotionListener ( m_listener ) ; addMouseWheelListener ( m_listener ) ; addFocusListener ( m_listener ) ; addComponentListener ( m_listener ) ; addKeyListener ( m_listener ) ; m_caret . addCaretListener ( m_listener ) ; }", "public void renew(long extension) throws LeaseDeniedException, UnknownLeaseException {\n  _leaseRenewed=true;\n  _leaseRenewedExtension=extension;\n  str.setLease(extension);\n  ParticipantHandle[] phs=parthandles();\n  if (phs == null)   return;\n  for (  ParticipantHandle ph : phs) {\n    renewParticipantLease(ph,extension);\n  }\n}\n", "\tpublic void visitInstanceofExpression(JInstanceofExpression self) {\n\t\tJExpression expr = self.expr();\n\t\t// @ assert expr != null;\n\t\tLOG(\" --> \" + expr.getClass().toString());\n\t\texpr.accept(this);\n\t\tRETURN_RESULT(GET_RESULT() + \" instanceof \" + self.dest());\n\t}\n", "public boolean isSupportedLookAndFeel ( ) { return BOOL_ ; }", "static <T>ReplayPromise<Void> anyReplay(final Duration timeout,final List<Promise<T>> promises){\n  return anyReplay(timeout,System.currentTimeMillis(),promises.toArray(new Promise[promises.size()]));\n}\n", "    public boolean isSuccess() {\n        boolean result = false;\n        int statusCode = this.fetchStatus;\n        if (statusCode == HttpStatus.SC_UNAUTHORIZED &&\n            hasRfc2617Credential()) {\n            result = false;\n        } else {\n            result = (statusCode > 0);\n        }\n        return result;\n    }\n", "public static File buildConfigZip(final String configName,final File parentDir){\n  if (!parentDir.isDirectory()) {\n    throw new RuntimeException(MSGS.format(Messages.CONFIG_NOT_DIR_1,parentDir.toString()));\n  }\n  final File zipFile=createEmptyZipFile(configName);\n  final ZipOutputStream out;\n  try {\n    out=new ZipOutputStream(new FileOutputStream(zipFile));\n  }\n catch (  final FileNotFoundException e) {\n    throw new RuntimeException(MSGS.format(Messages.ERROR_ZIPPING_1,parentDir.toString()),e);\n  }\n  try {\n    addFilesToZip(parentDir,out,parentDir);\n    return zipFile;\n  }\n catch (  final IOException e) {\n    throw new RuntimeException(MSGS.format(Messages.ERROR_ZIPPING_1,parentDir.toString()),e);\n  }\n finally {\n    try {\n      out.close();\n    }\n catch (    final IOException e) {\n    }\n  }\n}\n", "public Where < Message , Object > modWhere ( Where < Message , Object > where ) throws SQLException ;", "public static Coordinate createCoordinate(Attributes attributes) throws NumberFormatException {\n        // Associate a latitude and a longitude to the point\n        double lat;\n        double lon;\n        try {\n            lat = Double.parseDouble(attributes.getValue(GPXTags.LAT));\n        } catch (NumberFormatException e) {\n            throw new NumberFormatException(\"Cannot parse the latitude value\");\n        }\n        try {\n            lon = Double.parseDouble(attributes.getValue(GPXTags.LON));\n        } catch (NumberFormatException e) {\n            throw new NumberFormatException(\"Cannot parse the longitude value\");\n        }\n        String eleValue = attributes.getValue(GPXTags.ELE);\n        double ele = Double.NaN;\n        if (eleValue != null) {\n            try {\n                ele = Double.parseDouble(eleValue);\n\n            } catch (NumberFormatException e) {\n                throw new NumberFormatException(\"Cannot parse the elevation value\");\n            }\n        }        \n        return new Coordinate(lon, lat, ele);\n    }", "public static boolean isDirectoryName(String fileName){\n  for (  String suffix : directoryNames) {\n    if (fileName.equals(suffix)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "private void skipEmployees ( List < Employee > employees ) { Stream < String > employeesNamesStream = employees . stream ( ) . skip ( NUM_ ) . map ( null ) ; employeesNamesStream . forEach ( null ) ; }", "    public boolean getAdded(int n) {\n        if ((n < 0) || (n >= size)) {\n            throw new IndexOutOfBoundsException(Integer.toString(n));\n        }\n\n        return (added & (1 << n)) != 0;\n    }\n", "public static void unregister(ProteinModification modification) {\n\t\tif (modification==null) throw new IllegalArgumentException(\"modification == null!\");\n\n\t\tregistry.remove(modification);\n\n\t\tbyId.remove(modification.getId());\n\n\t\tSet<ProteinModification> mods;\n\n\t\tmods = byResidId.get(modification.getResidId());\n\t\tif (mods!=null) mods.remove(modification);\n\n\t\tmods = byPsimodId.get(modification.getPsimodId());\n\t\tif (mods!=null) mods.remove(modification);\n\n\t\tmods = byPdbccId.get(modification.getPdbccId());\n\t\tif (mods!=null) mods.remove(modification);\n\n\t\tfor (String keyword : modification.getKeywords()) {\n\t\t\tmods = byKeyword.get(keyword);\n\t\t\tif (mods!=null) mods.remove(modification);\n\t\t}\n\n\t\tModificationCondition condition = modification.getCondition();\n\t\tList<Component> comps = condition.getComponents();\n\t\tfor (Component comp : comps) {\n\t\t\tmods = byComponent.get(comp);\n\t\t\tif (mods!=null) mods.remove(modification);\n\t\t}\n\n\t\tbyCategory.get(modification.getCategory()).remove(modification);\n\t\tbyOccurrenceType.get(modification.getOccurrenceType()).remove(modification);\n\t}", "    public int getCullFace() {\n        if (isLiveOrCompiled())\n            if(!this.getCapability(ALLOW_CULL_FACE_READ))\n              throw new CapabilityNotSetException(Ding3dI18N.getString(\"PolygonAttributes4\"));\n\n        return ((PolygonAttributesRetained)this.retained).getCullFace();\n    }\n", "K previous ( ) ;", "private VisorCacheMetricsCollectorJob(IgniteBiTuple<Boolean,Collection<String>> arg,boolean debug){\n  super(arg,debug);\n}\n", "private Type ( final int sort , final char [ ] buf , final int off , final int len ) { this . sort = sort ; this . buf = buf ; this . off = off ; this . len = len ; }", "\tpublic void setPropertyPanel(JComponent propertyControl) {\n\t\tpropertyPanel.removeAll();\n\t\tpropertyPanel.add(propertyControl);\n\t\trevalidate();\n\t\trepaint();\n\t}\n", "public void set(String name, String value) {\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    updatingResource.put(name, SOURCE_CODE);\n  }", "public String getAsXMLString() {\n        // Create a string XML representation:\n        String rewardString = null;\n        try {\n            rewardString = SchemaHelper.serialiseObject(this.getAsReward(), Reward.class);\n        } catch (JAXBException e) {\n            System.out.println(\"Caught reward serialization exception: \" + e);\n        }\n        return rewardString;\n    }", "@JSFunction\n    public static void writeLine(Context cx, Scriptable thisObj,\n                                            Object[] args, Function funObj)\n        throws IOException\n    {\n        write0(thisObj, args, true);\n    }", "public OutlierResult run(Database database, Relation<O> relation) {\n    final DistanceQuery<O> distanceQuery = database.getDistanceQuery(relation, getDistanceFunction());\n    KNNQuery<O> knnQuery = database.getKNNQuery(distanceQuery, k + 1); // +\n                                                                       // query\n                                                                       // point\n\n    FiniteProgress prog = LOG.isVerbose() ? new FiniteProgress(\"Compute Local Isolation Coefficients\", relation.size(), LOG) : null;\n\n    DoubleMinMax minmax = new DoubleMinMax();\n    WritableDoubleDataStore lic_score = DataStoreUtil.makeDoubleStorage(relation.getDBIDs(), DataStoreFactory.HINT_STATIC);\n    for(DBIDIter iditer = relation.iterDBIDs(); iditer.valid(); iditer.advance()) {\n      final KNNList knn = knnQuery.getKNNForDBID(iditer, k + 1); // + query\n                                                                 // point\n      double skn = 0; // sum of the distances to the k nearest neighbors\n      int i = 0; // number of neighbors so far\n      for(DoubleDBIDListIter neighbor = knn.iter(); i < k && neighbor.valid(); neighbor.advance()) {\n        if(DBIDUtil.equal(iditer, neighbor)) {\n          continue;\n        }\n        skn += neighbor.doubleValue();\n        ++i;\n      }\n      double lic = knn.getKNNDistance() + (i > 0 ? skn / i : 0);\n      lic_score.putDouble(iditer, lic);\n      minmax.put(skn);\n\n      LOG.incrementProcessed(prog);\n    }\n    LOG.ensureCompleted(prog);\n\n    DoubleRelation res = new MaterializedDoubleRelation(\"Local Isolation Coefficient\", \"lic-outlier\", lic_score, relation.getDBIDs());\n    OutlierScoreMeta meta = new BasicOutlierScoreMeta(minmax.getMin(), minmax.getMax(), 0., Double.POSITIVE_INFINITY, 0.);\n    return new OutlierResult(meta, res);\n  }", "public static Map<String,Set<String>> parse(final URI uri,boolean decodeQueryParam){\n  Map<String,Set<String>> result=Collections.emptyMap();\n  final String query=uri.getRawQuery();\n  if (query != null && query.length() > 0) {\n    result=new HashMap<>();\n    parse(result,new Scanner(query),null,decodeQueryParam);\n  }\n  return result;\n}\n", "    public boolean gotHave(Peer peer, int piece) {\n        \n        listener.peerChange(this, peer, CoordinatorListener.HAVE, new Integer(piece));\n        \n        synchronized(wantedPieces) {\n            return wantedPieces.contains(new Integer(piece));\n        }\n    }\n", "public AwardEmoji addNoteAwardEmoji(Object projectIdOrPath, Integer issueIid, Integer noteId, String name) throws GitLabApiException {\n        GitLabApiForm form = new GitLabApiForm().withParam(\"name\",  name, true);\n        Response response = post(Response.Status.CREATED, form.asMap(),\n                \"projects\", getProjectIdOrPath(projectIdOrPath), \"issues\", issueIid, \"notes\", noteId, \"award_emoji\");\n        return (response.readEntity(AwardEmoji.class));\n    }", "public LessEqualConstraint(int constraintValue){\n  super(Integer.valueOf(constraintValue));\n}\n", "@InterfaceAudience.Public\n    public List<Attachment> getAttachments() {\n        Map<String, Object> attachmentMetadata = getAttachmentMetadata();\n        if (attachmentMetadata == null) {\n            return new ArrayList<Attachment>();\n        }\n        List<Attachment> result = new ArrayList<Attachment>(attachmentMetadata.size());\n        for (Map.Entry<String, Object> entry : attachmentMetadata.entrySet()) {\n            Attachment attachment = toAttachment(entry.getKey(), entry.getValue());\n            if (attachment != null) {\n                result.add(attachment);\n            }\n        }\n        return result;\n    }", "public static int indexOfIgnoreCase(int startingPosition,String searchIn,String searchFor){\n  if ((searchIn == null) || (searchFor == null)) {\n    return -1;\n  }\n  int searchInLength=searchIn.length();\n  int searchForLength=searchFor.length();\n  int stopSearchingAt=searchInLength - searchForLength;\n  if (startingPosition > stopSearchingAt || searchForLength == 0) {\n    return -1;\n  }\n  char firstCharOfSearchForUc=Character.toUpperCase(searchFor.charAt(0));\n  char firstCharOfSearchForLc=Character.toLowerCase(searchFor.charAt(0));\n  for (int i=startingPosition; i <= stopSearchingAt; i++) {\n    if (isCharAtPosNotEqualIgnoreCase(searchIn,i,firstCharOfSearchForUc,firstCharOfSearchForLc)) {\n      while (++i <= stopSearchingAt && (isCharAtPosNotEqualIgnoreCase(searchIn,i,firstCharOfSearchForUc,firstCharOfSearchForLc))) {\n      }\n    }\n    if (i <= stopSearchingAt && startsWithIgnoreCase(searchIn,i,searchFor)) {\n      return i;\n    }\n  }\n  return -1;\n}\n", "public static boolean isValidName(String str){\n  if (str.startsWith(\"`\") && str.endsWith(\"`\")) {\n    return isJavaValidName(str.substring(1,str.length() - 1));\n  }\n  return isJavaValidName(str) && !keys.contains(str);\n}\n", "private final void stopHeartbeat() {\n\n        if (timerTask != null && !HsqlTimer.isCancelled(timerTask)) {\n            HsqlTimer.cancel(timerTask);\n\n            timerTask = null;\n        }\n    }", "\tpublic int getNoOfBlogEntries() {\n\n\t\tint count = 0;\n\n\t\tString sql = \"SELECT count(*) FROM BLOGENTRY\";\n\t\ttry {\n\t\t\tConnection connection = dataSource.getConnection();\n\t\t\tPreparedStatement ppsm = connection.prepareStatement(sql);\n\t\t\tResultSet rs = ppsm.executeQuery();\n\t\t\t// we only expect to have one row returned\n\t\t\trs.next();\n\t\t\tcount = rs.getInt(1);\n\t\t\tppsm.close();\n\t\t\tconnection.close();\n\n\t\t} catch (SQLException sqle) {\n\t\t\tsqle.printStackTrace();\n\t\t}\n\t\treturn count;\n\t}\n", "public AttrItemIter ( Template tmpl , int setidx , int fldidx ) { super ( tmpl ) ; EntryRep set = tmpl . attributeSetTemplates [ setidx ] ; HashMap [ ] attrMaps = serviceByAttr . get ( getDefiningClass ( set . eclass , fldidx ) ) ; if ( attrMaps != null && attrMaps [ fldidx ] != null ) { svcs = ( ArrayList ) attrMaps [ fldidx ] . get ( set . fields [ fldidx ] ) ; if ( svcs != null ) { svcidx = svcs . size ( ) ; step ( ) ; } } }", "@SuppressFBWarnings(value=\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\",justification=\"File.listFiles() will return null if the File instance is not a directory. \" + \"Null dereference is not a possibility here since we validate sourceDirectory is \" + \"directory via sourceDirectory.isDirectory()\") public static void zipDirectory(File sourceDirectory,OutputStream outputStream) throws IOException {\n  checkNotNull(sourceDirectory);\n  checkNotNull(outputStream);\n  checkArgument(sourceDirectory.isDirectory(),\"%s is not a valid directory\",sourceDirectory.getAbsolutePath());\n  ZipOutputStream zos=new ZipOutputStream(outputStream);\n  for (  File file : sourceDirectory.listFiles()) {\n    zipDirectoryInternal(file,\"\",zos);\n  }\n  zos.finish();\n}\n", "public void init() {\n\ttry {\n\t\tsetName(\"RendererPanel\");\n\t\tsetBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));\n\t\tsetLayout(new java.awt.BorderLayout());\n\t\tsetSize(425, 276);\n\t\treloadComboBox();\n\t\tadd(getPDetails(), \"Center\");\n\t\tadd(getCHeader(), \"North\");\n\t} catch (java.lang.Throwable ivjExc) {\n\t\thandleException(ivjExc);\n\t}\n}\n", "public TermStructureCovarianceModelParametric getCloneCalibrated(final TermStructureModel calibrationModel, final CalibrationProduct[] calibrationProducts, Map<String, Object> calibrationParameters) throws CalculationException {\n\n\t\tif(calibrationParameters == null) {\n\t\t\tcalibrationParameters = new HashMap<>();\n\t\t}\n\t\tInteger numberOfPathsParameter\t= (Integer)calibrationParameters.get(\"numberOfPaths\");\n\t\tInteger seedParameter\t\t\t= (Integer)calibrationParameters.get(\"seed\");\n\t\tInteger maxIterationsParameter\t= (Integer)calibrationParameters.get(\"maxIterations\");\n\t\tDouble\tparameterStepParameter\t= (Double)calibrationParameters.get(\"parameterStep\");\n\t\tDouble\taccuracyParameter\t\t= (Double)calibrationParameters.get(\"accuracy\");\n\t\tBrownianMotion brownianMotionParameter\t= (BrownianMotion)calibrationParameters.get(\"brownianMotion\");\n\n\t\tdouble[] initialParameters = this.getParameter();\n\t\tdouble[] lowerBound = new double[initialParameters.length];\n\t\tdouble[] upperBound = new double[initialParameters.length];\n\t\tdouble[] parameterStep = new double[initialParameters.length];\n\t\tdouble[] zero = new double[calibrationProducts.length];\n\t\tArrays.fill(lowerBound, 0);\n\t\tArrays.fill(upperBound, Double.POSITIVE_INFINITY);\n\t\tArrays.fill(parameterStep, parameterStepParameter != null ? parameterStepParameter.doubleValue() : 1E-4);\n\t\tArrays.fill(zero, 0);\n\n\t\t/*\n\t\t * We allow for 2 simultaneous calibration models.\n\t\t * Note: In the case of a Monte-Carlo calibration, the memory requirement is that of\n\t\t * one model with 2 times the number of paths. In the case of an analytic calibration\n\t\t * memory requirement is not the limiting factor.\n\t\t */\n\t\tint numberOfThreads = 2;\n\t\tOptimizerFactory optimizerFactoryParameter = (OptimizerFactory)calibrationParameters.get(\"optimizerFactory\");\n\n\t\tint numberOfPaths\t= numberOfPathsParameter != null ? numberOfPathsParameter.intValue() : 2000;\n\t\tint seed\t\t\t= seedParameter != null ? seedParameter.intValue() : 31415;\n\t\tint maxIterations\t= maxIterationsParameter != null ? maxIterationsParameter.intValue() : 400;\n\t\tdouble accuracy\t\t= accuracyParameter != null ? accuracyParameter.doubleValue() : 1E-7;\n\t\tfinal BrownianMotion brownianMotion = brownianMotionParameter != null ? brownianMotionParameter : new BrownianMotionLazyInit(calibrationModel.getProcess().getStochasticDriver().getTimeDiscretization(), getNumberOfFactors(), numberOfPaths, seed);\n\t\tOptimizerFactory optimizerFactory = optimizerFactoryParameter != null ? optimizerFactoryParameter : new OptimizerFactoryLevenbergMarquardt(maxIterations, accuracy, numberOfThreads);\n\n\t\tint numberOfThreadsForProductValuation = 2 * Math.max(2, Runtime.getRuntime().availableProcessors());\n\t\tfinal ExecutorService executor = null;//Executors.newFixedThreadPool(numberOfThreadsForProductValuation);\n\n\t\tObjectiveFunction calibrationError = new ObjectiveFunction() {\n\t\t\t// Calculate model values for given parameters\n\t\t\t@Override\n\t\t\tpublic void setValues(double[] parameters, double[] values) throws SolverException {\n\n\t\t\t\tTermStructureCovarianceModelParametric calibrationCovarianceModel = TermStructureCovarianceModelParametric.this.getCloneWithModifiedParameters(parameters);\n\n\t\t\t\t// Create a term structure model with the new covariance structure.\n\t\t\t\tHashMap<String, Object> data = new HashMap<>();\n\t\t\t\tdata.put(\"covarianceModel\", calibrationCovarianceModel);\n\t\t\t\tTermStructureModel model;\n\t\t\t\ttry {\n\t\t\t\t\tmodel = calibrationModel.getCloneWithModifiedData(data);\n\t\t\t\t} catch (CalculationException e) {\n\t\t\t\t\tthrow new SolverException(e);\n\t\t\t\t}\n\t\t\t\tEulerSchemeFromProcessModel process = new EulerSchemeFromProcessModel(brownianMotion);\n\t\t\t\tfinal LIBORMonteCarloSimulationFromTermStructureModel lIBORMonteCarloSimulationFromTermStructureModel =  new LIBORMonteCarloSimulationFromTermStructureModel(model, process);\n\n\t\t\t\tArrayList<Future<Double>> valueFutures = new ArrayList<>(calibrationProducts.length);\n\t\t\t\tfor(int calibrationProductIndex=0; calibrationProductIndex<calibrationProducts.length; calibrationProductIndex++) {\n\t\t\t\t\tfinal int workerCalibrationProductIndex = calibrationProductIndex;\n\t\t\t\t\tCallable<Double> worker = new  Callable<Double>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Double call() {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn calibrationProducts[workerCalibrationProductIndex].getProduct().getValue(0.0,lIBORMonteCarloSimulationFromTermStructureModel).sub(calibrationProducts[workerCalibrationProductIndex].getTargetValue()).mult(calibrationProducts[workerCalibrationProductIndex].getWeight()).getAverage();\n\t\t\t\t\t\t\t} catch (CalculationException e) {\n\t\t\t\t\t\t\t\t// We do not signal exceptions to keep the solver working and automatically exclude non-working calibration products.\n\t\t\t\t\t\t\t\treturn 0.0;\n\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t// We do not signal exceptions to keep the solver working and automatically exclude non-working calibration products.\n\t\t\t\t\t\t\t\treturn 0.0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tif(executor != null) {\n\t\t\t\t\t\tFuture<Double> valueFuture = executor.submit(worker);\n\t\t\t\t\t\tvalueFutures.add(calibrationProductIndex, valueFuture);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tFutureTask<Double> valueFutureTask = new FutureTask<>(worker);\n\t\t\t\t\t\tvalueFutureTask.run();\n\t\t\t\t\t\tvalueFutures.add(calibrationProductIndex, valueFutureTask);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(int calibrationProductIndex=0; calibrationProductIndex<calibrationProducts.length; calibrationProductIndex++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdouble value = valueFutures.get(calibrationProductIndex).get();\n\t\t\t\t\t\tvalues[calibrationProductIndex] = value;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (InterruptedException e) {\n\t\t\t\t\t\tthrow new SolverException(e);\n\t\t\t\t\t} catch (ExecutionException e) {\n\t\t\t\t\t\tthrow new SolverException(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdouble error = 0.0;\n\n\t\t\t\tfor (int valueIndex = 0; valueIndex < values.length; valueIndex++) {\n\t\t\t\t\tdouble deviation = values[valueIndex];\n\t\t\t\t\terror += deviation * deviation;\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println(Math.sqrt(error/values.length));\n\t\t\t}\n\t\t};\n\n\t\tOptimizer optimizer = optimizerFactory.getOptimizer(calibrationError, initialParameters, lowerBound, upperBound, parameterStep, zero);\n\t\ttry {\n\t\t\toptimizer.run();\n\t\t}\n\t\tcatch(SolverException e) {\n\t\t\tthrow new CalculationException(e);\n\t\t}\n\t\tfinally {\n\t\t\tif(executor != null) {\n\t\t\t\texecutor.shutdown();\n\t\t\t}\n\t\t}\n\n\t\t// Get covariance model corresponding to the best parameter set.\n\t\tdouble[] bestParameters = optimizer.getBestFitParameters();\n\t\tTermStructureCovarianceModelParametric calibrationCovarianceModel = this.getCloneWithModifiedParameters(bestParameters);\n\n\t\t// Diagnostic output\n\t\tif (logger.isLoggable(Level.FINE)) {\n\t\t\tlogger.fine(\"The solver required \" + optimizer.getIterations() + \" iterations. The best fit parameters are:\");\n\n\t\t\tString logString = \"Best parameters:\";\n\t\t\tfor(int i=0; i<bestParameters.length; i++) {\n\t\t\t\tlogString += \"\\tparameter[\"+i+\"]: \" + bestParameters[i];\n\t\t\t}\n\t\t\tlogger.fine(logString);\n\t\t}\n\n\t\treturn calibrationCovarianceModel;\n\t}", "public static Map<String,Set<String>> parse(final URI uri,final String encoding){\n  Map<String,Set<String>> result=Collections.emptyMap();\n  final String query=uri.getRawQuery();\n  if (query != null && query.length() > 0) {\n    result=new HashMap<>();\n    parse(result,new Scanner(query),encoding,true);\n  }\n  return result;\n}\n", "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=new Vector<Option>();\n  result.addElement(new Option(\"\\tThe expression to use for filtering\\n\" + \"\\t(default: true).\",\"E\",1,\"-E <expr>\"));\n  result.addElement(new Option(\"\\tApply the filter to instances that arrive after the first\\n\" + \"\\t(training) batch. The default is to not apply the filter (i.e.\\n\" + \"\\talways return the instance)\",\"F\",0,\"-F\"));\n  result.addAll(Collections.list(super.listOptions()));\n  return result.elements();\n}\n", "public synchronized List<Sentence> sentences(String text) {\n        requireValidHandle();\n        Libvoikko lib = getLib();\n        List<Sentence> result = new ArrayList<Sentence>();\n        if (!isValidInput(text)) {\n            result.add(new Sentence(t", "public static int desaturate(int c){\n  int a=c & 0xff000000;\n  float r=((c & 0xff0000) >> 16);\n  float g=((c & 0x00ff00) >> 8);\n  float b=(c & 0x0000ff);\n  r*=0.2125f;\n  g*=0.7154f;\n  b*=0.0721f;\n  int gray=Math.min(((int)(r + g + b)),0xff) & 0xff;\n  return a | (gray << 16) | (gray << 8)| gray;\n}\n", "public Component addDetailComponent(TableModel model, Object aValue, int iRowIndex, int iColumnIndex, GridBagConstraints c)\n    {\n        JComponent component = null;\n        String string = \"\";\n        if (aValue instanceof ImageIcon)\n        {\n            component = new JLabel((ImageIcon)aValue);\n        }\n        if (aValue instanceof PortableImage)\n        {\n            component = new JLabel(new ImageIcon((Image)((PortableImage)aValue).getImage()));\n        }\n        else if (aValue != null)\n        {\n            string = aValue.toString();\n            if (model.isCellEditable(iRowIndex, iColumnIndex))\n            {\n                if (string.length() == 0)\n                    component = new JTextField(3);\n                else\n                    component = new JTextField(string);\n            }\n            else\n                component = new JLabel(string);\n        }\n        return component;\n    }", "protected void assertThrows(int expectedErrorCode,Statement stat,String sql){\n  try {\n    stat.execute(sql);\n    fail(\"Expected error: \" + expectedErrorCode);\n  }\n catch (  SQLException ex) {\n    assertEquals(expectedErrorCode,ex.getErrorCode());\n  }\n}\n", "public boolean moreInstructionsInBasicBlock ( ) { return instructionIterator . hasNext ( ) ; }", "private void readStreamCancel(InH3 hIn,HeadersAmp headers) throws IOException {\n  ServiceRefAmp serviceRef=readToAddress(hIn);\n  GatewayReply from=readFromAddress(hIn);\n  long qid=hIn.readLong();\n  if (log.isLoggable(_logLevel)) {\n    log.log(_logLevel,\"stream-cancel-r \" + from + \",\"+ qid+ \" (in \"+ this+ \")\"+ \"\\n  {id:\"+ qid+ \", to:\"+ serviceRef+ \",\"+ headers+ \"}\");\n  }\n  from.streamCancel(qid);\n}\n", "private static String parseFirebaseUrl(String firebaseSnippet){\n  int idx=firebaseSnippet.indexOf(\"databaseURL\");\n  if (-1 == idx) {\n    throw new RuntimeException(\"Please copy your Firebase web snippet into \" + FIREBASE_SNIPPET_PATH);\n  }\n  idx=firebaseSnippet.indexOf(':',idx);\n  int openQuote=firebaseSnippet.indexOf('\"',idx);\n  int closeQuote=firebaseSnippet.indexOf('\"',openQuote + 1);\n  return firebaseSnippet.substring(openQuote + 1,closeQuote);\n}\n", "@Nonnull\n    public final Word<I> subWord(int fromIndex) {\n        if (fromIndex <= 0) {\n            if (fromIndex == 0) {\n                return this;\n            }\n            throw new IndexOutOfBoundsException(\"Invalid subword range [\" + fromIndex + \",)\");\n        }\n        return subWordInternal(fromIndex, length());\n    }", "public static <A, B> void updateMapAndRemoveNulls(Map<A, B> source, Map<A, B> target) {\n\n        assert source != target;\n        for (Map.Entry<A, B> entry : source.entrySet()) {\n            A key = entry.getKey();\n            B value = entry.getValue();\n            if (value != null) {\n                target.put(key, value);\n            } else {\n                target.remove(key);\n            }\n        }\n    }", "public final <T extends IInvoice> void updInvTots(\n    final Map<String, Object> pReqVars, final T pInv, final AccSettings pAs,\n      final IInvTxMeth<T, ?> pInvTxMeth) throws Exception {\n    String query = pInvTxMeth.lazyGetQuTotals();\n    query = query.replace(\":ITSOWNER\", pInv.getItsId().toString());\n    if (pInvTxMeth.getTblNmsTot().length == 5) { //sales/purchase:\n      query = query.replace(\":TGOODLN\", pInvTxMeth.getTblNmsTot()[0]);\n      query = query.replace(\":TSERVICELN\", pInvTxMeth.getTblNmsTot()[1]);\n      query = query.replace(\":TTAXLN\", pInvTxMeth.getTblNmsTot()[2]);\n    } else { //returns:\n      query = query.replace(\":TGOODLN\", pInvTxMeth.getTblNmsTot()[0]);\n      query = query.replace(\":TTAXLN\", pInvTxMeth.getTblNmsTot()[1]);\n    }\n    String[] columns = new String[] {\"SUBTOTAL\", \"ITSTOTAL\", \"TOTALTAXES\",\n      \"FOREIGNSUBTOTAL\", \"FOREIGNTOTAL\", \"FOREIGNTOTALTAXES\"};\n    Double[] totals = getSrvDatabase()\n      .evalDoubleResults(query, columns);\n    if (totals[0] == null) {\n      totals[0] = 0d;\n    }\n    if (totals[1] == null) {\n      totals[1] = 0d;\n    }\n    if (totals[2] == null) {\n      totals[2] = 0d;\n    }\n    if (totals[3] == null) {\n      totals[3] = 0d;\n    }\n    if (totals[4] == null) {\n      totals[4] = 0d;\n    }\n    if (totals[5] == null) {\n      totals[5] = 0d;\n    }\n    if (pInv.getPriceIncTax()) {\n      pInv.setItsTotal(BigDecimal.valueOf(totals[1]).setScale(\n        pAs.getPricePrecision(), pAs.getRoundingMode()));\n      pInv.setTotalTaxes(BigDecimal.valueOf(totals[2]).setScale(\n        pAs.getPricePrecision(), pAs.getSalTaxRoundMode()));\n      pInv.setSubtotal(pInv.getItsTotal().subtract(pInv.getTotalTaxes()));\n      pInv.setForeignTotal(BigDecimal.valueOf(totals[4]).setScale(\n        pAs.getPricePrecision(), pAs.getRoundingMode()));\n      pInv.setForeignTotalTaxes(BigDecimal.valueOf(totals[5]).setScale(\n        pAs.getPricePrecision(), pAs.getSalTaxRoundMode()));\n      pInv.setForeignSubtotal(pInv.getForeignTotal().\n        subtract(pInv.getForeignTotalTaxes()));\n    } else {\n      pInv.setSubtotal(BigDecimal.valueOf(totals[0]).setScale(\n        pAs.getPricePrecision(), pAs.getRoundingMode()));\n      pInv.setTotalTaxes(BigDecimal.valueOf(totals[2]).setScale(\n        pAs.getPricePrecision(), pAs.getSalTaxRoundMode()));\n      pInv.setItsTotal(pInv.getSubtotal().add(pInv.getTotalTaxes()));\n      pInv.setForeignSubtotal(BigDecimal.valueOf(totals[3]).setScale(\n        pAs.getPricePrecision(), pAs.getRoundingMode()));\n      pInv.setForeignTotalTaxes(BigDecimal.valueOf(totals[5]).setScale(\n        pAs.getPricePrecision(), pAs.getSalTaxRoundMode()));\n      pInv.setForeignTotal(pInv.getForeignSubtotal().\n        add(pInv.getForeignTotalTaxes()));\n    }\n    getSrvOrm().updateEntity(pReqVars, pInv);\n  }", "public static int compareVersion(String version1,String version2){\n  String[] partsv1=version1.split(\"\\\\.\");\n  String[] partsv2=version2.split(\"\\\\.\");\n  int len=Math.min(partsv1.length,partsv2.length);\n  for (int i=0; i < partsv1.length && i < len; i++) {\n    Integer iv1=Integer.parseInt(partsv1[i]);\n    Integer iv2=Integer.parseInt(partsv2[i]);\n    if (iv1.compareTo(iv2) != 0)     return iv1.compareTo(iv2);\n  }\n  return 0;\n}\n", "static CoderResult overflow(CharBuffer input,int i,CharBuffer output,int j){\n  input.position(i - input.arrayOffset());\n  output.position(j - output.arrayOffset());\n  return CoderResult.OVERFLOW;\n}\n", "static String getServiceFromBuildName(String buildName) {\n        if (null == buildName || buildName.isEmpty()) {\n            return buildName;\n        }\n\n        return buildName.substring(0, buildName.lastIndexOf('-'));\n    }", "public Object [ ] keys ( ) { Object [ ] keys = new Object [ size ( ) ] ; K [ ] k = ( K [ ] ) _set ; for ( int i = k . length , j = NUM_ ; i -- > NUM_ ; ) { if ( k [ i ] != FREE && k [ i ] != REMOVED ) { keys [ j ++ ] = k [ i ] ; } } return keys ; }", "public List<Transaction> getTPTransaction(String API, Transaction.Time time, Transaction.Type type) throws GuildWars2Exception {\n\t\tisParamValid(new ParamChecker(ParamType.API, API));\n\t\tif (time == null || type == null)\n\t\t\tthrow new GuildWars2Exception(ErrorCode.TransTime, \"Transaction time/type cannot be empty\");\n\t\ttry {\n\t\t\tResponse<List<Transaction>> response = gw2API.getTPTransaction(time.getValue(), type.getValue(), API).execute();\n\t\t\tif (!response.isSuccessful()) throwError(response.code(), response.errorBody());\n\t\t\treturn response.body();\n\t\t} catch (IOException e) {\n\t\t\tthrow new GuildWars2Exception(ErrorCode.Network, \"Network Error: \" + e.getMessage());\n\t\t}\n\t}", "    protected double computeAverage( ) {\n        return (sampleSum / sampleCount);\n    }\n", "\tpublic String showManageCampaigns() throws Exception {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"showManageCampaigns() - start\"); //$NON-NLS-1$\n\t\t}\n\n\t\tthis.bannerCampaignList = BannerCampaignServiceDelegator\n\t\t\t\t.getBannerCampaigns();\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"showManageCampaigns() - end\"); //$NON-NLS-1$\n\t\t}\n\t\treturn SUCCESS;\n\t}\n", "private static ClassLoader createNarClassLoader ( final File narDirectory , final ClassLoader parentClassLoader ) throws IOException , ClassNotFoundException { logger . debug ( STR_ + narDirectory . getAbsolutePath ( ) ) ; final ClassLoader narClassLoader = new NarClassLoader ( narDirectory , parentClassLoader ) ; logger . info ( STR_ + narDirectory . getAbsolutePath ( ) + STR_ + narClassLoader ) ; return narClassLoader ; }", "protected void moveDownItem(){\n  if (selectionTable.getSelectionCount() == 0) {\n    return;\n  }\n  for (  final int index : selectionTable.getSelectionIndices()) {\n    if (index == selectionTable.getItemCount() - 1) {\n      selectionTable.forceFocus();\n      return;\n    }\n  }\n  final int[] newSelection=new int[selectionTable.getSelectionCount()];\n  int newSelectionIndex=0;\n  for (  final TableItem tableItem : selectionTable.getSelection()) {\n    final int position=selection.indexOf(tableItem.getData());\n    swap(position,position + 1);\n    newSelection[newSelectionIndex++]=position + 1;\n  }\n  redrawTables();\n  selectionTable.select(newSelection);\n  selectionTable.forceFocus();\n}\n", "public List<String> getFirstSenseBio(final List<String> lemmas,\n      final Span[] posTags) {\n\n    final List<String> mostFrequentSenseList = new ArrayList<String>();\n\n    String prefix = \"-\" + BioCodec.START;\n    String mostFrequentSense = null;\n    Stri", "\tpublic void set_CapitalGain3(String _CapitalGain3) {\n\t\tthis._CapitalGain3 = _CapitalGain3;\n\t}\n", "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n    @Override\r\n    public Object readArray(Type target) {\r\n        int count = readInteger();\r\n        log.debug(\"Count: {} and {} ref {}\", new Object[] { count, (count & 1), (count >> 1) });\r\n        if ((count & 1) == 0) {\r\n            //Reference\r\n            Object ref = getReference(count >> 1);\r\n            if (ref != null) {\r\n                return ref;\r\n            }\r\n        }\r\n        count = (count >> 1);\r\n        String key = readString();\r\n        amf3_mode += 1;\r\n        Object result;\r\n        if (key.equals(\"\")) {\r\n            Class<?> nested = Object.class;\r\n            Class<?> collection = Collection.class;\r\n            Collection resultCollection;\r\n            if (target instanceof ParameterizedType) {\r\n                ParameterizedType t = (ParameterizedType) target;\r\n                Type[] actualTypeArguments = t.getActualTypeArguments();\r\n                if (actualTypeArguments.length == 1) {\r\n                    nested = (Class<?>) actualTypeArguments[0];\r\n                }\r\n                target = t.getRawType();\r\n            }\r\n            if (target instanceof Class) {\r\n                collection = (Class) target;\r\n            }\r\n            if (collection.isArray()) {\r\n                nested = ArrayUtils.getGenericType(collection.getComponentType());\r\n                result = Array.newInstance(nested, count);\r\n                storeReference(result);\r\n                for (int i = 0; i < count; i++) {\r\n                    final Object value = Deserializer.deserialize(this, nested);\r\n                    Array.set(result, i, value);\r\n                }\r\n            } else {\r\n                if (SortedSet.class.isAssignableFrom(collection)) {\r\n                    resultCollection = new TreeSet();\r\n                } else if (Set.class.isAssignableFrom(collection)) {\r\n                    resultCollection = new HashSet(count);\r\n                } else {\r\n                    resultCollection = new ArrayList(count);\r\n                }\r\n                result = resultCollection;\r\n                storeReference(result);\r\n                for (int i = 0; i < count; i++) {\r\n                    final Object value = Deserializer.deserialize(this, nested);\r\n                    resultCollection.add(value);\r\n                }\r\n            }\r\n        } else {\r\n            Class<?> v = Object.class;\r\n            Class<?> collection = Collection.class;\r\n            if (target instanceof ParameterizedType) {\r\n                ParameterizedType t = (ParameterizedType) target;\r\n                Type[] actualTypeArguments = t.getActualTypeArguments();\r\n                if (actualTypeArguments.length == 2) {\r\n                    //k = (Class<?>) actualTypeArguments[0];\r\n                    v = (Class<?>) actualTypeArguments[1];\r\n                }\r\n                target = t.getRawType();\r\n            }\r\n            if (target instanceof Class) {\r\n                collection = (Class) target;\r\n            }\r\n            if (SortedMap.class.isAssignableFrom(collection)) {\r\n                collection = TreeMap.class;\r\n            } else {\r\n                collection = HashMap.class;\r\n            }\r\n            Map resultMap;\r\n            try {\r\n                resultMap = (Map) collection.newInstance();\r\n            } catch (Exception e) {\r\n                resultMap = new HashMap(count);\r\n            }\r\n            // associative array\r\n            storeReference(resultMap);\r\n            while (!key.equals(\"\")) {\r\n                final Object value = Deserializer.deserialize(this, v);\r\n                resultMap.put(key, value);\r\n                key = readString();\r\n            }\r\n            for (int i = 0; i < count; i++) {\r\n                final Object value = Deserializer.deserialize(this, v);\r\n                resultMap.put(i, value);\r\n            }\r\n            result = resultMap;\r\n        }\r\n        amf3_mode -= 1;\r\n        return result;\r\n    }", "      public void actionPerformed(ActionEvent e) {\n         clear();\n      } // of actionPerformed\n", "public static String findCeylonScript(File defaultValue,Project project){\n  String scriptName=getScriptName(\"ceylon\");\n  if (defaultValue != null) {\n    if (!defaultValue.exists())     throw new BuildException(\"Failed to find '\" + scriptName + \"' executable in \"+ defaultValue.getPath());\n    if (!defaultValue.canExecute())     throw new BuildException(\"Cannot execute '\" + scriptName + \"' executable in \"+ defaultValue.getPath()+ \" (not executable)\");\n    return defaultValue.getAbsolutePath();\n  }\n  File ceylonHome=null;\n  try {\n    ceylonHome=LauncherUtil.determineHome();\n  }\n catch (  URISyntaxException e) {\n    throw new BuildException(\"Failed to determine Ceylon home\",e);\n  }\n  if (ceylonHome == null)   throw new BuildException(\"Failed to find Ceylon home, specify the ceylon.home property or set the CEYLON_HOME environment variable\");\n  File script=new File(new File(ceylonHome,\"bin\"),scriptName);\n  if (!script.exists())   throw new BuildException(\"Failed to find '\" + scriptName + \"' executable in \"+ ceylonHome);\n  if (!script.canExecute())   throw new BuildException(\"Cannot execute '\" + scriptName + \"' executable in \"+ ceylonHome+ \" (not executable)\");\n  return script.getAbsolutePath();\n}\n", "    public void start( Accessor<BeanT,PropT> acc, Lister<BeanT,PropT,ItemT,PackT> lister) throws SAXException{\n        try {\n            if(!hasStarted()) {\n                this.bean = (BeanT)context.getCurrentState().target;\n                this.acc = acc;\n                this.lister = lister;\n                this.pack = lister.startPacking(bean,acc);\n            }\n        } catch (AccessorException e) {\n            Loader.handleGenericException(e,true);\n            // recover from this error by ignoring future items.\n            this.lister = Lister.getErrorInstance();\n            this.acc = Accessor.getErrorInstance();\n        }\n    }\n", "public int indexOf(Object obj){\n  final List<Node> l;\nsynchronized (this) {\n    l=this.list;\n  }\n  return l.indexOf(obj);\n}", "public java.awt.Image createAwtImage(Color foreground, Color background) {\n        int f = foreground.getRGB();\n        int g = background.getRGB();\n        Canvas canvas = new Canvas();\n\n        paintCode();\n        int h = (int)yHeight;\n        int pix[] = new int[bitColumns * codeRows * h];\n        int stride = (bitColumns + 7) / 8;\n        int ptr = 0;\n        for (int k = 0; k < codeRows; ++k) {\n            int p = k * stride;\n            for (int j = 0; j < bitColumns; ++j) {\n                int b = outBits[p + (j / 8)] & 0xff;\n                b <<= j % 8;\n                pix[ptr++] = (b & 0x80) == 0 ? g : f;\n            }\n            for (int j = 1; j < h; ++j) {\n                System.arraycopy(pix, ptr - bitColumns, pix, ptr + bitColumns * (j - 1), bitColumns);\n            }\n            ptr += bitColumns * (h - 1);\n        }\n        \n        java.awt.Image img = canvas.createImage(new MemoryImageSource(bitColumns, codeRows * h, pix, 0, bitColumns));\n        return img;\n    }", "\tpublic ImageAnalysis () {\n\t\tcompositeLength = OmniEye.getOpenCV().image().pixels.length;\n\t\tindex = 0;\n\t}\n", "public boolean addAll(Collection<? extends E> c) {\n        if (!(c instanceof JumboEnumSet))\n            return super.addAll(c);\n\n        JumboEnumSet<?> es = (JumboEnumSet<?>)c;\n        if (es.elementType != elementType) {\n            if (es.isEmpty())\n                return false;\n            else\n                throw new ClassCastException(\n                    es.elementType + \" != \" + elementType);\n        }\n\n        for (int i = 0; i < elements.length; i++)\n            elements[i] |= es.elements[i];\n        return recalculateSize();\n    }", "protected void beforeInsertDummies(int index,int length){\n  if (index > size || index < 0)   throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \"+ size);\n  if (length > 0) {\n    ensureCapacity(size + length);\n    System.arraycopy(elements,index,elements,index + length,size - index);\n    size+=length;\n  }\n}\n", "    public int getWidth() throws FopImageException {\n        synchronized(this) {\n            if (this.m_width == 0)\n                this.loadImage();\n        }\n\n        return this.m_width;\n    }\n", "public void marshall(BatchListIncomingTypedLinks batchListIncomingTypedLinks, ProtocolMarshaller protocolMarshaller) {\n\n        if (batchListIncomingTypedLinks == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(batchListIncomingTypedLinks.getObjectReference(), OBJECTREFERENCE_BINDING);\n            protocolMarshaller.marshall(batchListIncomingTypedLinks.getFilterAttributeRanges(), FILTERATTRIBUTERANGES_BINDING);\n            protocolMarshaller.marshall(batchListIncomingTypedLinks.getFilterTypedLink(), FILTERTYPEDLINK_BINDING);\n            protocolMarshaller.marshall(batchListIncomingTypedLinks.getNextToken(), NEXTTOKEN_BINDING);\n            protocolMarshaller.marshall(batchListIncomingTypedLinks.getMaxResults(), MAXRESULTS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public ProxyConfiguration<T> setProxyName(final Package pkg, final String simpleName) {\n        this.proxyName = pkg.getName() + '.' + simpleName;\n        return this;\n    }", "public static <T> ObservableTransformer<T,T> doOnErrorCount(Consumer<Integer> onError) {\n        return obs -> obs.lift(new OperatorEmissionCounter<>(new CountObserver(null,null,onError)));\n    }", "public void testConcurrentUnknownHostPing ( ) throws Exception { HostAddressService has = new HostAddressService ( BOOL_ ) ; has . setTimeout ( NUM_ ) ; HostAddress address = HostAddressService . getByName ( UNKNOWN_IP ) ; this . doConcurrentPing ( has , address , NUM_ , NUM_ , BOOL_ ) ; }", "public void yypushback ( int number ) { if ( number > yylength ( ) ) zzScanError ( ZZ_PUSHBACK_2BIG ) ; zzMarkedPos -= number ; }", "\tpublic void setPeptide_to_proteinid(long aPeptide_to_proteinid) {\n\t\tthis.iPeptide_to_proteinid = aPeptide_to_proteinid;\n\t\tthis.iUpdated = true;\n\t}\n", "private void fitImageToView(){\n  Drawable drawable=getDrawable();\n  if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) {\n    return;\n  }\n  if (matrix == null || prevMatrix == null) {\n    return;\n  }\n  int drawableWidth=drawable.getIntrinsicWidth();\n  int drawableHeight=drawable.getIntrinsicHeight();\n  float scaleX=(float)viewWidth / drawableWidth;\n  float scaleY=(float)viewHeight / drawableHeight;\nswitch (mScaleType) {\ncase CENTER:\n    scaleX=scaleY=1;\n  break;\ncase CENTER_CROP:\nscaleX=scaleY=Math.max(scaleX,scaleY);\nbreak;\ncase CENTER_INSIDE:\nscaleX=scaleY=Math.min(1,Math.min(scaleX,scaleY));\ncase FIT_CENTER:\nscaleX=scaleY=Math.min(scaleX,scaleY);\nbreak;\ncase FIT_XY:\nbreak;\ndefault :\nthrow new UnsupportedOperationException(\"TouchImageView does not support FIT_START or FIT_END\");\n}\nfloat redundantXSpace=viewWidth - (scaleX * drawableWidth);\nfloat redundantYSpace=viewHeight - (scaleY * drawableHeight);\nmatchViewWidth=viewWidth - redundantXSpace;\nmatchViewHeight=viewHeight - redundantYSpace;\nif (!isZoomed() && !imageRenderedAtLeastOnce) {\nmatrix.setScale(scaleX,scaleY);\nmatrix.postTranslate(redundantXSpace / 2,redundantYSpace / 2);\nnormalizedScale=1;\n}\n else {\nif (prevMatchViewWidth == 0 || prevMatchViewHeight == 0) {\nsavePreviousImageValues();\n}\nprevMatrix.getValues(m);\nm[Matrix.MSCALE_X]=matchViewWidth / drawableWidth * normalizedScale;\nm[Matrix.MSCALE_Y]=matchViewHeight / drawableHeight * normalizedScale;\nfloat transX=m[Matrix.MTRANS_X];\nfloat transY=m[Matrix.MTRANS_Y];\nfloat prevActualWidth=prevMatchViewWidth * normalizedScale;\nfloat actualWidth=getImageWidth();\ntranslateMatrixAfterRotate(Matrix.MTRANS_X,transX,prevActualWidth,actualWidth,prevViewWidth,viewWidth,drawableWidth);\nfloat prevActualHeight=prevMatchViewHeight * normalizedScale;\nfloat actualHeight=getImageHeight();\ntranslateMatrixAfterRotate(Matrix.MTRANS_Y,transY,prevActualHeight,actualHeight,prevViewHeight,viewHeight,drawableHeight);\nmatrix.setValues(m);\n}\nfixTrans();\nsetImageMatrix(matrix);\n}\n", "public CNodeChooser ( final ZyGraph graph , final CGraphSearchField searchField ) { super ( new BorderLayout ( ) ) ; Preconditions . checkNotNull ( graph , STR_ ) ; setBorder ( new TitledBorder ( new LineBorder ( Color . LIGHT_GRAY , NUM_ , BOOL_ ) , STR_ ) ) ; setDoubleBuffered ( BOOL_ ) ; setMinimumSize ( new Dimension ( NUM_ , NUM_ ) ) ; m_table = new CNodeChooserTable ( graph , searchField ) ; final JScrollPane scrollPane = new JScrollPane ( m_table ) ; add ( scrollPane , BorderLayout . CENTER ) ; }", "void onTimedTextUpdate ( byte [ ] pixels , int width , int height ) ;", "    protected int evaluate(String from, int value) {\n        return -value;\n    }\n", "public void jumpToState(@Nonnull State newState){\n  mStateLock.lock();\n  try {\n    if (newState.equals(mState)) {\n      Log.d(TAG,\"No op since jump to the same state.\");\n    }\n else {\n      Log.d(TAG,\"Change state : \" + mState + \" => \"+ newState);\n      m", "public final int readTTFUShort(long pos) throws IOException {\n        long cp = getCurrentPos();\n        seekSet(pos);\n        int ret = readTTFUShort();\n        seekSet(cp);\n        return ret;\n    }", "private native void upcNative ( byte [ ] essid , int mode ) ;", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "    protected String generateDefaultMessageKey(Flow flow, String property) {\n        String flowType = flow.getFlowPropertyProviderName();\n        StringBuilder sb = new StringBuilder(\"flow.\");\n        tweak(flowType, sb);\n        sb.append('.');\n        tweak(property, sb);\n        return sb.toString();\n    }\n", "private void waitUntilDeploymentIsScaled(final int count) {\n    final BlockingQueue<Object> queue = new ArrayBlockingQueue<>(1);\n    final AtomicReference<Integer> replicasRef = new AtomicReference<>(0);\n\n    final String name = checkName(getItem());\n    final String namespace = checkNamespace(getItem());\n\n    final Runnable deploymentPoller = () -> {\n      try {\n        Deployment deployment = get();\n        //If the deployment is gone, we shouldn't wait.\n        if (deployment == null) {\n          if (count == 0) {\n            queue.put(true);\n            return;\n          } else {\n            queue.put(new IllegalStateException(\"Can't wait for Deployment: \" + checkName(getItem()) + \" in namespace: \" + checkName(getItem()) + \" to scale. Resource is no longer available.\"));\n            return;\n          }\n        }\n\n        replicasRef.set(deployment.getStatus().getReplicas());\n        int currentReplicas = deployment.getStatus().getReplicas() != null ? deployment.getStatus().getReplicas() : 0;\n        long generation = deployment.getMetadata().getGeneration() != null ? deployment.getMetadata().getGeneration() : 0;\n        long observedGeneration = deployment.getStatus() != null && deployment.getStatus().getObservedGeneration() != null ? deployment.getStatus().getObservedGeneration() : -1;\n        if (observedGeneration >= generation && Objects.equals(deployment.getSpec().getReplicas(), currentReplicas)) {\n          queue.put(true);\n        } else {\n          LOG.debug(\"Only {}/{} pods scheduled for Deployment: {} in namespace: {} seconds so waiting...\",\n            deployment.getStatus().getReplicas(), deployment.getSpec().getReplicas(), deployment.getMetadata().getName(), namespace);\n        }\n      } catch (Throwable t) {\n        LOG.error(\"Error while waiting for Deployment to be scaled.\", t);\n      }\n    };\n\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n    ScheduledFuture poller = executor.scheduleWithFixedDelay(deploymentPoller, 0, POLL_INTERVAL_MS, TimeUnit.MILLISECONDS);\n    try {\n      if (Utils.waitUntilReady(queue, getConfig().getScaleTimeout(), TimeUnit.MILLISECONDS)) {\n        LOG.debug(\"{}/{} pod(s) ready for Deployment: {} in namespace: {}.\",\n          replicasRef.get(), count, name, namespace);\n      } else {\n        LOG.error(\"{}/{} pod(s) ready for Deployment: {} in namespace: {}  after waiting for {} seconds so giving up\",\n          replicasRef.get(), count, name, namespace, TimeUnit.MILLISECONDS.toSeconds(getConfig().getScaleTimeout()));\n      }\n    } finally {\n      poller.cancel(true);\n      executor.shutdown();\n    }\n  }", "public void processFile(File file) {\r\n    TreeReader tr = null;\r\n\r\n    // SRL stuff\r\n    CollectionValuedMap<Integer,String> srlMap = null;\r\n    if (this.srlMap != null) {\r\n      // there must be a better way ...\r\n      String filename = file.getAbsolutePath();\r\n      for (String suffix : this.srlMap.keySet()) {\r\n        if (filename.endsWith(suffix)) {\r\n          srlMap = this.srlMap.get(suffix);\r\n          break;\r\n        }\r\n      }\r\n      if (srlMap == null) {\r\n        System.err.println(\"could not find SRL entries for file: \"+file);\r\n      }\r\n    }\r\n\r\n    try {\r\n      // maybe print file name to stdout to get some feedback\r\n      if (PRINT_FILENAMES) {\r\n        System.err.println(file);\r\n      }\r\n      // could throw an IO exception if can't open for reading\r\n      tr = treeReaderFactory().newTreeReader(new BufferedReader(new InputStreamReader(new FileInputStream(file), encoding())));\r\n      int sentIndex=0;\r\n      Tree pt;\r\n      while ((pt = tr.readTree()) != null) {\r\n        if (pt.label() instanceof HasIndex) { // so we can trace where this tree came from\r\n          HasIndex hi = (HasIndex) pt.label();\r\n          hi.setDocID(file.getName());\r\n          hi.setSentIndex(sentIndex);\r\n        }\r\n        if (srlMap == null) {\r\n          parseTrees.add(pt);\r\n        } else {\r\n          Collection<String> srls = srlMap.get(sentIndex);\r\n//           pt.pennPrint();\r\n//           System.err.println(srls);\r\n          parseTrees.add(pt);\r\n          if (srls.isEmpty()) {\r\n//            parseTrees.add(pt);\r\n          } else {\r\n            for (String srl : srls) {\r\n//              Tree t = pt.deepCopy();\r\n              String[] bits = srl.split(\"\\\\s+\");\r\n              int verbIndex = Integer.parseInt(bits[0]);\r\n              String lemma = bits[2].split(\"\\\\.\")[0];\r\n//              Tree verb = Trees.getTerminal(t, verbIndex);\r\n              Tree verb = Trees.getTerminal(pt, verbIndex);\r\n//              ((CoreLabel)verb.label()).set(SRLIDAnnotation.class, SRL_ID.REL);\r\n              ((CoreLabel)verb.label()).set(CoreAnnotations.CoNLLPredicateAnnotation.class, true);\r\n              for (int i = 4; i < bits.length; i++) {\r\n                String arg = bits[i];\r\n                String[] bits1;\r\n                if (arg.indexOf(\"ARGM\") >= 0) {\r\n                  bits1 = arg.split(\"-\");\r\n                } else {\r\n                  bits1 = arg.split(\"-\");\r\n                }\r\n                String locs = bits1[0];\r\n                String argType = bits1[1];\r\n                if (argType.equals(\"rel\")) {\r\n                  continue;\r\n                }\r\n                for (String loc : locs.split(\"[*,]\")) {\r\n                  bits1 = loc.split(\":\");\r\n                  int term = Integer.parseInt(bits1[0]);\r\n                  int height = Integer.parseInt(bits1[1]);\r\n//                  Tree t1 = Trees.getPreTerminal(t, term);\r\n                  Tree t1 = Trees.getPreTerminal(pt, term);\r\n                  for (int j = 0; j < height; j++) {\r\n//                    t1 = t1.parent(t);\r\n                    t1 = t1.parent(pt);\r\n                  }\r\n                  Map<Integer,String> roleMap = ((CoreLabel)t1.label()).get(CoreAnnotations.CoNLLSRLAnnotation.class);\r\n                  if (roleMap == null) {\r\n                    roleMap = new HashMap<Integer, String>();\r\n                    ((CoreLabel)t1.label()).set(CoreAnnotations.CoNLLSRLAnnotation.class, roleMap);\r\n                  }\r\n                  roleMap.put(verbIndex, argType);\r\n//                  ((CoreLabel)t1.label()).set(SRLIDAnnotation.class, SRL_ID.ARG);\r\n                }\r\n              }\r\n//               for (Tree t1 : t) {\r\n//                 if (t1.isLeaf()) { continue; }\r\n//                 CoreLabel fl = (CoreLabel)t1.label();\r\n//                 if (fl.value() == null) { continue; }\r\n//                 if (!fl.has(SRLIDAnnotation.class)) {\r\n//                   boolean allNone = true;\r\n//                   for (Tree t2 : t1) {\r\n//                     SRL_ID s = ((CoreLabel)t2.label()).get(SRLIDAnnotation.class);\r\n//                     if (s == SRL_ID.ARG || s == SRL_ID.REL) {\r\n//                       allNone = false;\r\n//                       break;\r\n//                     }\r\n//                   }\r\n//                   if (allNone) {\r\n//                     fl.set(SRLIDAnnotation.class, SRL_ID.ALL_NO);\r\n//                   } else {\r\n//                     fl.set(SRLIDAnnotation.class, SRL_ID.NO);\r\n//                   }\r\n//                 }\r\n//               }\r\n//              parseTrees.add(t);\r\n            }\r\n          }\r\n        }\r\n\r\n        sentIndex++;\r\n      }\r\n    } catch (IOException e) {\r\n      System.err.println(\"loadTree IO Exception: \" + e + \" in file \" + file);\r\n    } finally {\r\n      try {\r\n        if (tr != null) {\r\n          tr.close();  // important: closes file even if error!\r\n        }\r\n      } catch (IOException e) {\r\n        // do nothin'\r\n      }\r\n    }\r\n  }", "private void objectManagerStopped()\n    {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(this, tc, \"objectManagerStopped\");\n\n        // Stop any new work coming in as we do not have a working\n        // ObjectManager to service any requests.\n        _available = false;\n\n        // Only treat this shutdown as an error if we haven't\n        // asked for it. In the case of a normal ME stop we\n        // will still get the callback but don't have to worry\n        // about it.\n        if (!_shutdownRequested)\n        {\n            // Report a local error so that we can begin failover to a\n            // new ME instance. This will allow the new instance to\n            // enter it's startup retry loop and try to re-connect to\n            // a working ObjectManager.\n            _ms.reportLocalError();\n\n            SibTr.error(tc, \"FILE_STORE_STOP_UNEXPECTED_SIMS1590\");\n        }\n        else\n        {\n            SibTr.info(tc, \"FILE_STORE_STOP_EXPECTED_SIMS1589\");\n        }\n\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc, \"objectManagerStopped\");\n    }", "public static void parseTraceKey(Map<String, String> tracerMap, String key, String value) {\n        String lowKey = key.substring(PREFIX.length());\n        String realKey = TRACER_KEY_MAP.get(lowKey);\n        tracerMap.put(realKey == null ? lowKey : realKey, value);\n    }", "@Override\n\tpublic Object invoke(final MethodInvocation invocation) throws Throwable {\n\n\t\tif (this.logger.isDebugEnabled()) {\n\t\t\tthis.logger.debug(\"Executing proxied method in stateful retry: \"\n\t\t\t\t\t+ invocation.getStaticPart() + \"(\"\n\t\t\t\t\t+ ObjectUtils.getIdentityHexString(invocation) + \")\");\n\t\t}\n\n\t\tObject[] args = invocation.getArguments();\n\t\tObject defaultKey = Arrays.asList(args);\n\t\tif (args.length == 1) {\n\t\t\tdefaultKey = args[0];\n\t\t}\n\n\t\tObject key = createKey(invocation, defaultKey);\n\t\tRetryState retryState = new DefaultRetryState(key,\n\t\t\t\tthis.newMethodArgumentsIdentifier != null\n\t\t\t\t\t\t&& this.newMethodArgumentsIdentifier.isNew(args),\n\t\t\t\tthis.rollbackClassifier);\n\n\t\tObject result = this.retryOperations\n\t\t\t\t.execute(new StatefulMethodInvocationRetryCallback(invocation, label),\n\t\t\t\t\t\tthis.recoverer != null\n\t\t\t\t\t\t\t\t? new ItemRecovererCallback(args, this.recoverer) : null,\n\t\t\t\t\t\tretryState);\n\n\t\tif (this.logger.isDebugEnabled()) {\n\t\t\tthis.logger.debug(\"Exiting proxied method in stateful retry with result: (\"\n\t\t\t\t\t+ result + \")\");\n\t\t}\n\n\t\treturn result;\n\n\t}", "static <R, W> ConnectionImpl<R, W> create(Channel nettyChannel,\n                                                                     ChannelOperations<W> delegate) {\n        final ConnectionImpl<R, W> toReturn = new ConnectionImpl<>(nettyChannel, delegate", "public Map<URI,List<URI>> addTargetVolumeSnapshots(){\n  List<URI> blockSnapshots=Lists.newArrayList();\n  Map<URI,List<URI>> snapshotsMap=new HashMap<>();\n  URI targetCG=null;\n  for (  URI volumeId : uris(volumeIds)) {\n    List<URI> targets=getTargets(volumeId);\n    for (    URI target : targets) {\n      if (targetCG == null) {\n        targetCG=getConsistencyGroup(target);\n      }\n      List<URI> snapshots=getSnapshots(target);\n      blockSnapshots.addAll(snapshots);\n      snapshotsMap.put(target,snapshots);\n    }\n  }\n  if (!blockSnapshots.isEmpty() && targetCG != null) {\n    BlockStorageUtils.addVolumesToConsistencyGroup(targetCG,blockSnapshots);\n  }\n  return snapshotsMap;\n}\n", "    public String getTitle() {\n        LocaleInfo li = getInfo(vrntLocale);\n        String title = (li != null) ? li.title : null;\n\n        // if no title found, check country locale\n        if (title == null) {\n            li = getInfo(ctryLocale);\n            title = (li != null) ? li.title : null;\n        }\n\n        // if still no title, check language locale\n        if (title == null) {\n            li = getInfo(langLocale);\n            title = (li != null) ? li.title : null;\n        }\n\n        return ((title != null) ? title : defaultInfo.title);\n    }\n", "public BlockingObservableAssert < T > failsWithError ( Class < ? extends Throwable > errorType ) { isNotNull ( ) ; fails ( ) ; assertThat ( getBlockingObservableExecutor ( ) . getError ( ) ) . isInstanceOf ( errorType ) ; return this ; }", "public boolean remove ( Object e ) { if ( e == null ) return BOOL_ ; Class < ? > eClass = e . getClass ( ) ; if ( eClass != elementType && eClass . getSuperclass ( ) != elementType ) return BOOL_ ; long oldElements = elements ; elements &= ~ ( NUM_ << ( (", "    public void fireAllItemChangeListeners(final String relativeRoot) {\n        LOG.debug(\"\");\n        final Enumeration listenerTablesEnumeration = listenerTables.keys();\n        while (listenerTablesEnumeration.hasMoreElements())\n            try {\n                final String xpathKey = (String) listenerTablesEnumeration.nextElement();\n\n                // fire all registered item change listeners for this xpath key\n                final Vector itemChangeListeners = (Vector) listenerTables.get(xpathKey);\n                if (itemChangeListeners != null)\n                    fireSpecificListeners(itemChangeListeners, xpathKey, relativeRoot);\n            } catch (Exception e) {\n            \tif (LOG.isDebugEnabled())\n            \t\tLOG.debug(e,e);\n            \telse\n            \t\tLOG.error(e);\n            }\n    }\n", "\tpublic void removeAvailableRole(Role role) {\n\t\tthis.m_availableRoles.remove(role);\n\t}\n", "private static char whitespaceToSpace ( char c ) { return Character . isWhitespace ( c ) ? STR_ : c ; }", "CacheResourceCore getCore(String path, String name) {\n\tObject obj = getCache().getValue(toKey(path, name), null);\n\tif (obj instanceof CacheResourceCore) return (CacheResourceCore) obj;\n\treturn null;\n    }", "public static String formatKeyPair(Map<String, Object> keyPairs) {\n        if (keyPairs == null) {\n            return \"\";\n        }\n        StringBuilder stringBuilder = new StringBuilder();\n        for (Map.Entry<String, Object> entry : keyPairs.entrySet()) {\n            stringBuilder.append(DIV);\n            stringBuilder.append(entry.getKey());\n            stringBuilder.append(\" : \");\n            stringBuilder.append(Reporter.formatHTML(String.valueOf(entry.getValue())));\n            stringBuilder.append(END_DIV);\n        }\n        return stringBuilder.toString();\n    }", "    public void setHouseData(int costs, int rent) {\n        this.houseCosts = costs;\n        this.houseRent = rent;\n    }\n", "public V pop ( ) throws IndexOutOfBoundsException { if ( top == NUM_ ) { throw new IndexOutOfBoundsException ( STR_ ) ; } return values [ -- top + locals ] ; }", "void writeMaps(Enumeration maps) throws IOException {\n  if (maps != null) {\n    while (maps.hasMoreElements()) {\n      Map map=(Map)maps.nextElement();\n      String name=map.getName();\n      incrIndent();\n      indentSmart();\n      write(\"<map\");\n      if (name != null) {\n        write(\" name=\\\"\");\n        write(name);\n        write(\"\\\">\");\n      }\n else {\n        write('>');\n      }\n      writeLineSeparator();\n      incrIndent();\n      AttributeSet[] areas=map.getAreas();\n      if (areas != null) {\n        for (int counter=0, maxCounter=areas.length; counter < maxCounter; counter++) {\n          indentSmart();\n          write(\"<area\");\n          writeAttributes(areas[counter]);\n          write(\"></area>\");\n          writeLineSeparator();\n        }\n      }\n      decrIndent();\n      indentSmart();\n      write(\"</map>\");\n      writeLineSeparator();\n      decrIndent();\n    }\n  }\n}\n", "    public void closeProject(final IPath projectPath) {\n        checkAssertion(\"a workspace must be open\", fIsOpen); //$NON-NLS-1$\n        try {\n            getJavaProject(projectPath).getProject().close(null);\n        } catch (final CoreException e) {\n  ", "public ClassLocation createClass ( ) { ClassLocation cl = new ClassLocation ( ) ; classLocations . add ( cl ) ; return cl ; }", "public void marshall(GetExportJobsRequest getExportJobsRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (getExportJobsRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(getExportJobsRequest.getApplicationId(), APPLICATIONID_BINDING);\n            protocolMarshaller.marshall(getExportJobsRequest.getPageSize(), PAGESIZE_BINDING);\n            protocolMarshaller.marshall(getExportJobsRequest.getToken(), TOKEN_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "protected abstract void internalRun ( ) throws Exception ;", "\tprivate boolean arrayMatchString(char[] arr, String str) {\n\t\tfor (int i = 0; i < 50 && str.charAt(i) != '\\0'; i++) {\n\t\t\tif (arr[i] != str.charAt(i))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n", "public void addAll(Collection<Individual> newIndividuals){\n  individuals.addAll(newIndividuals);\n}\n", "public static List<SourceFile> prepareExterns(CompilerOptions.Environment env,\n        Map<String, SourceFile> externs) {\n    List<SourceFile> out = new ArrayList<>();\n\n    for (String key : BUILTIN_LANG_EXTERNS) {\n      Preconditions.checkState(externs.containsKey(key), \"Externs must contain builtin: %s\", key);\n      out.add(externs.remove(key));\n    }\n\n    if (env == CompilerOptions.Environment.BROWSER) {\n      for (String key : BROWSER_EXTERN_DEP_ORDER) {\n        Preconditions.checkState(externs.containsKey(key),\n            \"Externs must contain builtin for env %s: %s\", env, key);\n        out.add(externs.remove(key));\n      }\n\n      out.addAll(externs.values());\n    }\n\n    return out;\n  }", "    public void update(byte[] bytes) {\n        for (int i=0; i < algorithms.size(); i++) {\n            ((AbstractChecksum)algorithms.elementAt(i)).update(bytes);\n        }\n        this.length += bytes.length;\n    }\n", "    public SystemProperties getProperties() {\n        if (properties == null) {\n            properties = createProperties();\n        }\n        return properties;\n    }\n", "public boolean isAfterLast ( ) { return m_isAfterLast ; }", "void update ( byte [ ] region , byte [ ] row , AggregateResult result ) ;", "public static void execute(ExecutablePool pool,String region,Function function,ServerRegionFunctionExecutor serverRegionExecutor,ResultCollector resultCollector,byte hasResult,int mRetryAttempts){\n  AbstractOp op=new ExecuteRegionFunctionOpImpl(region,function,serverRegionExecutor,resultCollector,hasResult,new HashSet<String>());\n  int retryAttempts=0;\n  boolean reexecute=false;\n  boolean reexecuteForServ=false;\n  Set<String> failedNodes=new HashSet<String>();\n  AbstractOp reexecOp=null;\n  int maxRetryAttempts=0;\n  if (function.isHA()) {\n    maxRetryAttempts=mRetryAttempts;\n  }\n  final boolean isDebugEnabled=logger.isDebugEnabled();\n  do {\n    try {\n      if (reexecuteForServ) {\n        reexecOp=new ExecuteRegionFunctionOpImpl((ExecuteRegionFunctionOpImpl)op,(byte)1,failedNodes);\n        pool.execute(reexecOp,0);\n      }\n else {\n        pool.execute(op,0);\n      }\n      reexecute=false;\n      reexecuteForServ=false;\n    }\n catch (    InternalFunctionInvocationTargetException e) {\n      if (isDebugEnabled) {\n        logger.debug(\"ExecuteRegionFunctionOp#execute : Received InternalFunctionInvocationTargetException. The failed nodes are {}\",e.getFailedNodeSet());\n      }\n      reexecute=true;\n      resultCollector.clearResults();\n      Set<String> failedNodesIds=e.getFailedNodeSet();\n      failedNodes.clear();\n      if (failedNodesIds != null) {\n        failedNodes.addAll(failedNodesIds);\n      }\n    }\ncatch (    ServerConnectivityException se) {\n      retryAttempts++;\n      if (isDebugEnabled) {\n        logger.debug(\"ExecuteRegionFunctionOp#execute : Received ServerConnectivityException. The exception is {} The retryattempt is : {} maxRetryAttempts {}\",se,retryAttempts,maxRetryAttempts);\n      }\n      if (se instanceof ServerOperationException) {\n        throw se;\n      }\n      if ((retryAttempts > maxRetryAttempts && maxRetryAttempts != -1))       throw se;\n      reexecuteForServ=true;\n      resultCollector.clearResults();\n      failedNodes.clear();\n    }\n  }\n while (reexecuteForServ);\n  if (reexecute && function.isHA()) {\n    ExecuteRegionFunctionOp.reexecute(pool,region,function,serverRegionExecutor,resultCollector,hasResult,failedNodes,maxRetryAttempts - 1);\n  }\n}\n", "private List<ReferenceType> selectCandidates(TypeVariable argument){\n  ParameterBound lowerBound=selectLowerBound(argument);\n  ParameterBound upperBound=selectUpperBound(argument);\n  List<TypeVariable> typeVariableList=new ArrayList<>();\n  typeVariableList.add(argument);\n  List<ReferenceType> typeList=new ArrayList<>();\n  for (  Type inputType : inputTypes) {\n    if (inputType.isReferenceType()) {\n      ReferenceType inputRefType=(ReferenceType)inputType;\n      Substitution<ReferenceType> substitution=Substitution.forArgs(typeVariableList,inputRefType);\n      if (lowerBound.isLowerBound(inputRefType,substitution) && upperBound.isUpperBound(inputRefType,substitution)) {\n        typeList.add(inputRefType);\n      }\n    }\n  }\n  return typeList;\n}\n", "private static void thresholdBlock ( byte [ ] luminances , int xoffset , int yoffset , int threshold , int stride , BitMatrix matrix ) { for ( int y = NUM_ , offset = yoffset * stride + xoffset ; y < BLOCK_SIZE ; y ++ , offset += stride ) { for ( int x = ", "private Pair<Double,Double> calculateMinMaxFast(){\n  debug(\"ValueSourceData: calculateMinMaxFast()\");\n  Pair<Double,Double> minMaxValues=new Pair<Double,Double>(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY);\n  GroupCellSeriesData dataForAllGroupCells=getSeriesDataForAllGroupCells();\n  Set<Double> yValues=dataForAllGroupCells.getDistinctValues(SeriesUsageType.MAIN_SERIES,PlotDimension.VALUE);\n  for (  Double value : yValues) {\n    if (value < minMaxValues.getFirst()) {\n      minMaxValues.setFirst(value);\n    }\n    if (value > minMaxValues.getSecond()) {\n      minMaxValues.setSecond(value);\n    }\n  }\n  if (yValues.isEmpty()) {\n    minMaxValues.setFirst(Double.NEGATIVE_INFINITY);\n    minMaxValues.setSecond(Double.POSITIVE_INFINITY);\n  }\n  debug(\"min: \" + minMaxValues.getFirst());\n  debug(\"max: \" + minMaxValues.getSecond());\n  return minMaxValues;\n}\n", "\tpublic boolean isManyToMany(AbstractType from, AbstractType to) {\n\t\treturn isRelatedBy(from, to, Association.ManyToMany);\n\t}\n", "    private void prepareKeyEvents(StringBuffer handlers) {\n\n        if (onKeyDown != null) {\n            handlers.append(\" onKeyDown=\\\"\");\n            handlers.append(onKeyDown);\n            handlers.append(\"\\\"\");\n        }\n\n        if (onKeyUp != null) {\n            handlers.append(\" onKeyUp=\\\"\");\n            handlers.append(onKeyUp);\n            handlers.append(\"\\\"\");\n        }\n\n        if (onKeyPress != null) {\n            handlers.append(\" onKeyPress=\\\"\");\n            handlers.append(onKeyPress);\n            handlers.append(\"\\\"\");\n        }\n    }\n", "static int findBestSampleSize(\n            int actualWidth, int actualHeight, int desiredWidth, int desiredHeight) {\n        double wr = (double) actualWidth / desiredWidth;\n        double hr = (double) actualHeight / desiredHeight;\n        double ratio = Math.min(wr, hr);\n        float n = 1.0f;\n        while ((n * 2) <= ratio) {\n            n *= 2;\n        }\n\n        return (int) n;\n    }", "\tprivate void rememberMe() {\n            BridgeExternalContext bec = ((BridgeExternalContext) (FacesContext\n                        .getCurrentInstance().getExternalContext()));\n\n            // Save the userid and password in a cookie\n            Cookie btuser = new Cookie(\"btuser\", login);\n            Cookie btpasswd = new Cookie(\"btpasswd\", pwd);\n            Cookie btremember = new Cookie(\"btremember\", \"true\");\n\n            // Set Expired date to a date far in the future\n            btuser.setMaxAge(3153600);\n            btpasswd.setMaxAge(3153600);\n            btremember.setMaxAge(3153600);\n\n            bec.addCookie(btuser);\n            bec.addCookie(btpasswd);\n            bec.addCookie(btremember);\n\t}\n", "\tpublic void printStackTrace(PrintStream output) {\n\t\tsynchronized (output) {\n\t\t\tif (status.getException() != null) {\n\t\t\t\toutput.print(getClass().getName() + \"[\" + status.getCode() + \"]: \"); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tstatus.getException().printStackTrace(output);\n\t\t\t} else\n\t\t\t\tsuper.printStackTrace(output);\n\t\t}\n\t}\n", "\tpublic void rate(int index) {\n\t\tfor(int i=0; i<statists.size(); i++){\n\t\t\tStatist st = (Statist)statists.get(i);\n\t\t\tst.rate(index);\n\t\t}\n\t}\n", "    private void checkCompile() {\n        Iterator it = jsps.values().iterator();\n        while (it.hasNext()) {\n            JspServletWrapper jsw = (JspServletWrapper)it.next();\n            JspCompilationContext ctxt = jsw.getJspEngineContext();\n            // JspServletWrapper also synchronizes on this when\n            // it detects it has to do a reload\n            synchronized(jsw) {\n                try {\n                    ctxt.compile();\n                } catch (FileNotFoundException ex) {\n                    ctxt.incrementRemoved();\n                } catch (Throwable t) {\n                    jsw.getServletContext().log(\"Background compile failed\",t);\n                }\n            }\n        }\n    }\n", "public static GroovyRowResult toRowResult(ResultSet rs) throws SQLException {\n  ResultSetMetaData metadata=rs.getMetaData();\n  Map<String,Object> lhm=new LinkedHashMap<String,Object>(metadata.getColumnCount(),1);\n  for (int i=1; i <= metadata.getColumnCount(); i++) {\n    lhm.put(metadata.getColumnLabel(i),rs.getObject(i));\n  }\n  return new GroovyRowResult(lhm);\n}\n", "public Converter getExternalConverter(String id) {\n        for (ExternalConverters ec : getExternalConverters()) {\n            for (ConverterWrapper cw : ec.getConverters()) {\n                if (cw.getId().equals(id)) {\n                    return cw.getConverter();\n                }\n            }\n        }\n        return null;\n    }", "@Override\n    public void accept(E value) {\n        for (Consumer<E> consumer : consumers) {\n            consumer.accept(value);\n        }\n    }", "protected void init ( ) throws ConfigurationException , LoggingException { this . sqlEncoder = new SQLEncoder ( logger ) ; }", "public static DMatrixRMaj createHomography(DMatrixRMaj R, Vector3D_F64 T,\n\t\t\t\t\t\t\t\t\t\t\t\t  double d, Vector3D_F64 N)\n\t{\n\t\tDMatrixRMaj H = new DMatrixRMaj(3,3);\n\n\t\tGeometryMath_F64.outerProd(T,N,H);\n\t\tCommonOps_DDRM.divide(H,d);\n\t\tCommonOps_DDRM.addEquals(H, ", "protected void validate(String operationType) throws Exception\n\t{\n\t\tsuper.validate(operationType);\n\n\t\tMPSString image_name_validator = new MPSString();\n\t\timage_name_validator.setConstraintIsReq(MPSConstants.GENERIC_CONSTRAINT, true);\n\t\timage_name_validator.setConstraintMaxStrLen(MPSConstants.GENERIC_CONSTRAINT, 128);\n\t\timage_name_validator.setConstraintMinStrLen(MPSConstants.GENERIC_CONSTRAINT, 1);\n\t\timage_name_validator.validate(operationType, image_name, \"\\\"image_name\\\"\");\n\t\t\n\t\tMPSIPAddress br_broker_ip_address_arr_validator = new MPSIPAddress();\n\t\tbr_broker_ip_address_arr_validator.setConstraintIsReq(MPSConstants.GENERIC_CONSTRAINT, true);\n\t\tif(br_broker_ip_address_arr != null)\n\t\t{\n\t\t\tfor(int i=0; i<br_broker_ip_address_arr.length; i++)\n\t\t\t{\n\t\t\t\tbr_broker_ip_address_arr_validator.validate(operationType, br_broker_ip_address_arr[i], \"br_broker_ip_address_arr[\"+i+\"]\");\n\t\t\t}\n\t\t}\n\t\t\n\t}", "\tprivate void trailerOut(Writer wtr) {\n\t\ttry {\n\t\t\twtr.write(\"</inputEvent>\");\n\t\t}\n\t\tcatch (Exception e) { /* */ }\n\t\treturn;\n\t}\n", "\tpublic boolean hasRemoves() {\n\t\treturn hasRemoves;\n\t}\n", "public final double doOperation() throws OperatorFailedException {\n  final double scale=(scaleFactor + (MathUtils.nextDouble() * ((1.0 / scaleFactor) - scaleFactor)));\n  double oldValue=variance.getParameterValue(0);\n  double newValue=scale * oldValue;\n  double logq=-Math.log(scale);\n  final Bounds<Double> bounds=variance.getBounds();\n  if (newValue < bounds.getLowerLimit(0) || newValue > bounds.getUpperLimit(0)) {\n    throw new OperatorFailedException(\"proposed value outside boundaries\");\n  }\n  variance.setParameterValue(0,newValue);\n  NodeRef root=tree.getRoot();\n  final int index=root.getNumber();\n  List<NodeRef> listNode=new ArrayList<NodeRef>();\n  getSubtree(listNode,tree.getNode(index));\n  final double rateScale=Math.sqrt(scale);\n  for (  NodeRef node : listNode) {\n    oldValue=tree.getNodeRate(node);\n    newValue=oldValue * rateScale;\n    tree.setNodeRate(node,newValue);\n  }\n  logq+=(listNode.size() - 2) * Math.log(rateScale);\n  return logq;\n}\n", "public static Integer [ ] transformIntArray ( int [ ] source ) { Integer [ ] destin = new Integer [ source . length ] ; for ( int i = NUM_ ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }", "CFunctionNode createFunctionNode ( INaviFunction function ) ;", "\tpublic void addInPort() {\n\t\taddInPort(inPorts.size());\n\t}\n", "    public double get(int index) {\n        if (index < 0 || index >= size)\n            checkIndex(index);\n        return getQuick(index);\n    }\n", "public static long[] sortAndFilterThreadIdsByValue(LongObjectMap map, int threadLimit) {\n\t\tint max = Math.min(threadLimit, map.size());\n\t\tList<Map.Entry> list = new LinkedList(map.entrySet());\n\t\tCollections.sort(list, new Comparator() {\n\t\t\t@Override\n\t\t\tpublic int compare(Object o1, Object o2) {\n\t\t\t\treturn ((Comparable) ((Map.Entry) (o2)).getValue()).compareTo(((Map.Entry) (o1)).getValue());\n\t\t\t}\n\t\t});\n\n\t\tlong[] topTidArray = new long[max];\n\t\tint i = 0;\n\t\tfor (Map.Entry entry : list) {\n\t\t\ttopTidArray[i] = (Long) entry.getKey();\n\t\t\tif (++i >= max) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn topTidArray;\n\t}", "Union1 < First > first ( First single ) ;", "private static String getTrimmedPath(String path) {\n        String result = path;\n        if (result.endsWith(\"/\")) {\n            result = result.substring(0, result.length() - 1);\n        }\n        return result;\n    }", "private synchronized boolean initFilterIfNeeded ( AllRequestFilter filter ) throws ServletException { boolean ret = BOOL_ ; if ( filters . contains ( filter ) ) { if ( ! initializedFilters . contains ( filter ) ) { filter . init ( filterConfig ) ; initializedFilters . add ( filter ) ; } } else { ret = BOOL_ ; } return ret ; }", "@CheckForNull private static Template findTemplate(String nodeLabelString,List<Template> templates){\n  Template selectedTemplate=null;\n  for (  Template template : templates) {\n    String templateLabel=template.getLabel();\n    if (templateLabel != null &&", "protected String url(int zoomLevel,int xTile,int yTile){\n  StringBuilder sb=new StringBuilder(_url);\n  sb.append(\"/\");\n  sb.append(zoomLevel);\n  sb.append(\"/\");\n  sb.append(xTile);\n  sb.append(\"/\");\n  sb.append(yTile);\n  sb.append(\".png\");\n  return sb.toS", "public boolean hasItems(){\n  return items != null && !items.isEmpty();\n}\n", "\tpublic void setTaskID(String newTaskID) {\n\t\t_pcs.firePropertyChange(\"taskID\", this.taskID, newTaskID); //$NON-NLS-1$\n\t\tthis.taskID = newTaskID;\n\t}\n", "public static boolean validLocale(final Locale locale) {\r\n        for (final Locale found : Locale.getAvailableLocales()) {\r\n            if (found.equals(locale)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }", "public void addMPDestinationChangeListener(MPDestinationChangeListener destinationChangeListener)\n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(tc, \"addMPDestinationChangeListener\",\n        new Object[]{destinationChangeListener});\n\n    _destinationChangeListeners.add(destinationChangeListener);\n\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.exit(tc, \"addMPDestinationChangeListener\");\n  }", "public static void tagSelectedNodes ( final JFrame parent , final ZyGraph graph , final CTag tag ) { final Collection < NaviNode > selectedNodes = graph . getSelectedNodes ( ) ; try { for ( final NaviNode node : selectedNodes ) { node . getRawNode ( ) . tagNode ( tag ) ; } } catch ( final CouldntSaveDataException e ) { CUtilityFunctions . logException ( e ) ; final String innerMessage = STR_ + STR_ ; final String innerDescription = CUtilityFunctions . createDescription ( String . format ( STR_ , tag . getName ( ) ) , new String [ ] { STR_ } , new String [ ] { STR_ } ) ; NaviErrorDialog . show ( parent , innerMessage , innerDescription , e ) ; } }", "    public TableMethods showBankRekvTable(TableMethods brtm, int ca_id) {\n\tbrtm.clear();\n\tString sql;\n\tsql = \"SELECT bank_name, account, mfo FROM contractor WHERE id = \"\n\t\t+ ca_id;\n\tObject[] obj;\n\tResultSet res = null;\n\ttry {\n\t    res = DBAccessor.getInst", "private void assertPivot(String field,Object value,int count,PivotField actual){\n  assertEquals(\"FIELD: \" + actual.toString(),field,actual.getField());\n  assertEquals(\"VALUE: \" + actual.toString(),value,actual.getValue());\n  assertEquals(\"COUNT: \" + actual.toString(),count,actual.getCount());\n}\n", "public String peekStringAtOffset ( int startPosition ) { int i = startPosition ; int len = NUM_ ; int maxLen = this . byteBuffer . length ; while ( ( i < maxLen ) && ( this . byteBuffer [ i ] != NUM_ ) ) { len ++ ; i ++ ; } return peekString ( startPosition , len ) ; }", "< A extends Annotation > ExpressionResult checkUserPermissions ( Class < ? > resourceClass , Class < A > annotationClass ) ;", "DHCrypt(BigInteger modulus,BigInteger base,SecureRandom random){\n  this(modulus.bitLength(),new DHParameterSpec(modulus,base),random);\n}\n", "public String name ( ) { return this . name ; }", "\tpublic String getText(Object object) {\n\t\tString label = ((Output)object).getName();\n\t\treturn label == null || label.length() == 0 ?\n\t\t\tgetString(\"_UI_Output_type\") :\n\t\t\tgetString(\"_UI_Output_type\") + \" \" + label;\n\t}\n", "    protected void setUp() throws Exception {\n        super.setUp();\n        commandHandler = new SiteCommandHandler();\n        commandHandler.setReplyTextBundle(replyTextBundle);\n        command1 = new Command(CommandNames.SITE, array(PARAMETERS1));\n        command2 = new Command(CommandNames.SITE, array(PARAMETERS2));\n    }\n", "public PlaceAutocompleteAdapter ( Context context , int resource , GoogleApiClient googleApiClient , LatLngBounds bounds , AutocompleteFilter filter ) { super ( context , resource ) ; mResultList = new ArrayList < > ( ) ; mContext = context ; mGoogleApiClient = googleApiClient ; mBounds = bounds ; mPlaceFilter = filter ; }", "public List<Notification> getBySource(Object source) {\n        List<Notification> found = new ArrayList<Notification>();\n        for (Notification n: NotificationManager.notifications)\n            if (n.getSource().equals(source)) {\n                logger.fine(\"...found a match for getBySource query. With source: \"+source);\n                found.add(n);\n            }\n        if(found.size()>0)        \n            return found;\n        return null;\n    }", "    public void removeAllStateListeners() {\n        stateListeners.clear();\n    }\n", "public <T extends SubSystem>void addSystem(Class<T> systemApi,T system){\n  SubSystem oldSystem=_systemMap.putIfAbsent(systemApi,system);\n  if (oldSystem != null) {\n    throw new IllegalStateException(L.l(\"duplicate system '{0}' is not allowed because another system with that class is already registered '{1}'\",system,oldSystem));\n  }\n  _pendingStart.add(system);\n  if (_lifecycle.isActive()) {\n    startSystems();\n  }\n}\n", "private void writeManagedConnection(Definition def, Writer out, int indent) throws IOException\n   {\n      writeWithIndent(out, indent, \"/**\\n\");\n      writeWithIndent(out, indent, \" * Creates a new physical connection to the underlying EIS resource manager.\\n\");\n      writeWithIndent(out, indent, \" *\\n\");\n      writeWithIndent(out, indent, \" * @param subject Caller's security information\\n\");\n      writeWithIndent(out, indent,\n            \" * @param cxRequestInfo Additional resource adapter \" + \"specific connection request information\\n\");\n      writeWithIndent(out, indent, \" * @throws ResourceException generic exception\\n\");\n      writeWithIndent(out, indent, \" * @return ManagedConnection instance \\n\");\n      writeWithIndent(out, indent, \" */\\n\");\n\n      writeWithIndent(out, indent, \"public ManagedConnection createManagedConnection(Subject subject,\\n\");\n      writeIndent(out, indent + 2);\n      out.write(\"ConnectionRequestInfo cxRequestInfo) throws ResourceException\");\n      writeLeftCurlyBracket(out, indent);\n      writeLogging(def, out, indent + 1, \"trace\", \"createManagedConnection\", \"subject\", \"cxRequestInfo\");\n      writeWithIndent(out, indent + 1, \"return new \" + def.getMcfDefs().get(getNumOfMcf()).getMcClass() + \"(this);\");\n      writeRightCurlyBracket(out, indent);\n      writeEol(out);\n\n      writeWithIndent(out, indent, \"/**\\n\");\n      writeWithIndent(out, indent, \" * Returns a matched connection from the candidate set of connections. \\n\");\n      writeWithIndent(out, indent, \" *\\n\");\n      writeWithIndent(out, indent, \" * @param connectionSet Candidate connection set\\n\");\n      writeWithIndent(out, indent, \" * @param subject Caller's security information\\n\");\n      writeWithIndent(out, indent,\n            \" * @param cxRequestInfo Additional resource adapter \" + \"specific connection request information\\n\");\n      writeWithIndent(out, indent, \" * @throws ResourceException generic exception\\n\");\n      writeWithIndent(out, indent,\n            \" * @return ManagedConnection if resource adapter finds an acceptable match otherwise null \\n\");\n      writeWithIndent(out, indent, \" */\\n\");\n\n      writeWithIndent(out, indent, \"public ManagedConnection matchManagedConnections(Set connectionSet,\\n\");\n      writeIndent(out, indent + 2);\n      out.write(\"Subject subject, ConnectionRequestInfo cxRequestInfo) throws ResourceException\");\n      writeLeftCurlyBracket(out, indent);\n      writeLogging(def, out, indent + 1, \"trace\", \"matchManagedConnections\", \"connectionSet\", \"subject\",\n            \"cxRequestInfo\");\n      writeWithIndent(out, indent + 1, \"ManagedConnection result = null;\\n\");\n      writeWithIndent(out, indent + 1, \"Iterator it = connectionSet.iterator();\\n\");\n      writeWithIndent(out, indent + 1, \"while (result == null && it.hasNext())\");\n      writeLeftCurlyBracket(out, indent + 1);\n      writeIndent(out, indent + 2);\n      out.write(\"ManagedConnection mc = (ManagedConnection)it.next();\\n\");\n      writeIndent(out, indent + 2);\n      out.write(\"if (mc instanceof \" + def.getMcfDefs().get(getNumOfMcf()).getMcClass() + \")\");\n      writeLeftCurlyBracket(out, indent + 2);\n      writeIndent(out, indent + 3);\n      out.write(\"result = mc;\");\n      writeRightCurlyBracket(out, indent + 2);\n      writeRightCurlyBracket(out, indent + 1);\n      writeWithIndent(out, indent + 1, \"return result;\");\n\n      writeRightCurlyBracket(out, indent);\n      writeEol(out);\n   }", "public static void decode(InputStream in, OutputStream out) throws IOException {\n    decode(in, out, true);\n  }", "    public void clear(CspBooleanVariable var) {\n        add(var).clear();\n    }\n", "        public boolean visit(EnumConstantDeclaration ecd) {\n            // System.out.println(\"visit(BodyDeclaration bd) of <\" + bd + \">\");\n            codeContext.push(ecd);\n            return true;\n        }\n", "static void makeCategoryMap(String filename){\n  specfile=filename;\n  generateNewData();\n  categoryMap=new int[categoryNames.length - 1][];\n  for (int i=0; i < categoryNames.length - 1; i++) {\n    int len=newListCount[BMP][i] + newListCount[nonBMP][i];\n    categoryMap[i]=new int[len];\n    System.arraycopy(newList[i],0,categoryMap[i],0,len);\n  }\n}\n", "static List<String> cartesianProduct(List<String> xList,List<String> yList,boolean isSuffix){\n  List<String> product=new ArrayList<String>();\n  for (  String x : xList) {\n    for (    String y : yList) {\n      product.add(x + y);\n    }\n  }\n  removeDuplicateAffix(product,isSuffix);\n  return product;\n}\n", "public void removeSurroundingEmptyLines ( ) { if ( this . lines != null ) { this . removeTrailingEmptyLines ( ) ; this . removeLeadingEmptyLines ( ) ; } }", "private XYPlot initializeUpperPlot(){\n  loadedClasses=new YIntervalSeriesImproved(\"loaded classes\");\n  totalLoadedClasses=new YIntervalSeriesImproved(\"total loaded classes\");\n  YIntervalSeriesCollection yintervalseriescollection=new YIntervalSeriesCollection();\n  yintervalseriescollection.addSeries(loadedClasses);\n  yintervalseriescollection.addSeries(totalLoadedClasses);\n  DeviationRenderer renderer=new DeviationRenderer(true,false);\n  renderer.setBaseShapesVisible(true);\n  renderer.setSeriesStroke(0,new BasicStroke(3.0f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));\n  renderer.setSeriesFillPaint(0,new Color(255,200,200));\n  renderer.setSeriesOutlineStroke(0,new BasicStroke(2.0f));\n  renderer.setSeriesShape(0,new Ellipse2D.Double(-2.5,-2.5,5.0,5.0));\n  renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator(StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,DateFormat.getDateTimeInstance(),NumberFormat.getNumberInstance()));\n  final NumberAxis rangeAxis=new NumberAxis(\"Classes\");\n  rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n  rangeAxis.setAutoRangeMinimumSize(2000.0d);\n  rangeAxis.setRangeType(RangeType.POSITIVE);\n  rangeAxis.setAutoRangeIncludesZero(true);\n  final XYPlot subplot=new XYPlot(yintervalseriescollection,null,rangeAxis,renderer);\n  subplot.setAxisOffset(new RectangleInsets(5.0,5.0,5.0,5.0));\n  subplot.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);\n  subplot.setRangeCrosshairVisible(true);\n  return subplot;\n}\n", "public static void putMessage ( int id , String m , GerritCallback < VoidResult > cb ) { editMessage ( id ) . put ( m , cb ) ; }", "public String getButtonCommand()\n    {\n        String strCommand = m_strCommand;\n        if (strCommand == null)\n            strCommand = this.getButtonDesc();\n        if ((strCommand == null) || (strCommand.equals(Constants.BLANK)))\n            strCommand = m_strImageButton;  // Use image name until the image is loaded\n        return strCommand;\n    }", "public void beginAccept3 ( WebRequest theRequest ) { theRequest . addHeader ( STR_ , STR_ ) ; }", "public static List<String> dumpResource(Class<?> forClass,String path) throws IOException {\n  InputStream is=(forClass == null) ? ClassLoader.getSystemResourceAsStream(path) : forClass.getResourceAsStream(path);\n  if (is == null) {\n    throw new FileNotFoundException(\"For class \" + forClass + \": \"+ path);\n  }\n  return readStream(is);\n}\n", "public Object put(String propertyName, Object newValue) {\r\n        if (VALID_KEY.matcher(propertyName).matches() == false) {\r\n            throw new IllegalArgumentException(\"Invalid key for FlexiBean: \" + propertyName);\r\n        }\r\n        return dataWritable().put(propertyName, newValue);\r\n    }", "    public PluginPositionSelectorController getController() {\n        Receiver<List<SelectedPosition>> callback = new Receiver<List<SelectedPosition>>() {\n\n            @Override\n            public void handle(List<SelectedPosition> object) {\n                selectionCallback.handle(object);\n            }\n        };\n        return new ControllerImpl(serverManager, serverCache, model, callback, lock);\n    }\n", "\tpublic void addToCache(List<Pupil> pupils){\n\t\t\tcacheQueue.addAll(pupils);\n\t\t\tsynchronized (this) {\n\t\t\t\tnotifyAll();\n\t\t\t}\n\t}\n", "public static com.liferay.commerce.product.type.virtual.model.CPDefinitionVirtualSetting fetchCPDefinitionVirtualSettingByUuidAndGroupId(\n\t\tString uuid, long groupId) {\n\t\treturn getService()\n\t\t\t\t   .fetchCPDefinitionVirtualSettingByUuidAndGroupId(uuid,\n\t\t\tgroupId);\n\t}", "private void updateBackground ( ) { try { Picasso . with ( mActivity ) . load ( DEFAULT_BACKGROUND_RES_ID ) . resize ( mMetrics . widthPixels , mMetrics . heightPixels ) . centerCrop ( ) . error ( mDefaultBackground ) . into ( mBackgroundTarget ) ; } catc", "public RefactoringHistoryImplementation(final RefactoringDescriptorProxy[] proxies){\n  Assert.isNotNull(proxies);\n  fDescriptorProxies=new RefactoringDescriptorProxy[proxies.length];\n  System.arraycopy(proxies,0,fDescriptorProxies,0,proxies.length);\n}\n", "protected ISpaceSynchronizeReplicaState recoverFromPrimary ( boolean transientOnly , boolean memoryOnly ) throws Exception { if ( _failoverGroup == null ) return null ; ISpaceSynchronizeReplicaState recoveryStatus = _failoverGroup . recover ( transientOnly , memoryOnly ) ; if ( recoveryStatus != null && recoveryStatus . getCopyResult ( ) . isFailed ( ) ) { Exception causeException = recoveryStatus . getCopyResult ( ) . getFailureReason ( ) ; if ( ( causeException instanceof RemoteException || causeException instanceof FinderException || causeException instanceof InternalInactiveSpaceException ) && recoveryStatus . getCopyResult ( ) . isEmpty ( ) ) throw new UnavailablePrimarySpaceException ( causeException ) ; throw causeException ; } if ( _space . getEngine ( ) . getSpaceImpl ( ) . getDirectPersistencyRecoveryHelper ( ) != null ) { if ( _logger . isLoggable ( Level . INFO ) ) { _logger . info ( STR_ + _space . getEngine ( ) . getFullSpaceName ( ) + STR_ ) ; } _space . getEngine ( ) . getSpaceImpl ( ) . getDirectPersistencyRecoveryHelper ( ) . setStorageState ( StorageConsistencyModes . Consistent ) ; } return recoveryStatus ; }", "public ReplicationFilterException ( String message , Throwable cause , String filterClassName , String sourceMemberName , String targetMemberName , int filterDirection ) { super ( message , cause ) ; _filterClassName = filterClassName ; _sourceMemberName ", "public CNodeSynchronizer ( final BreakpointManager manager , final ZyGraph graph , final CDebugPerspectiveModel debugPerspective ) { m_graph = Preconditions . checkNotNull ( graph , STR_ ) ; m_manager = Preconditions . checkNotNull ( manager , STR_ ) ; m_debugPerspective = Preconditions . checkNotNull ( debugPerspective , STR_ ) ; graph . addNodeModifier ( m_realizerListener ) ; }", "\tprotected boolean canPerformAutoRename() {\n\t\treturn true;\n\t}\n", "public RequestCreator transform ( Transformation transformation ) { data . transform ( transformation ) ; return this ; }", "public void removeClassLoader ( ClassLoader classLoader ) { if ( _logger . isLoggable ( Level . FINE ) ) _logger . fine ( STR_ + ClassLoaderHelper . getClassLoaderLogName ( classLoader ) + STR_ ) ; Long removedClassLoadedId = _classLoaderToIdMap . remove ", "public Boolean createCustomerReview ( EntityManager em , String customerReviewId ) { Boolean status = BOOL_ ; Date date = null ; CustomerReview customerReview = new CustomerReview ( ) ; Calendar cal = Calendar . getInstance ( ) ; DateFormat formatter = ne", "public void paintComponent ( Graphics g ) { super . paintComponent ( g ) ; paint ( ( Graphics2D ) g ) ; }", "    public void setUniformResourceIdentifier(ASN1IA5String unirid) {\n\tuniformResourceId_ = new ASN1IA5String(new String(unirid.getString()));\n\tuniformResourceId_.setExplicit(false);\n\tuniformResourceIdentifier_.setInnerType(uniformResourceId_);\n\tsetInnerType(uniformResourceIdentifier_);\n    }\n", "public TabButton(){\n  final int size=17;\n  setPreferredSize(new Dimension(size,size));\n  setToolTipText(\"Close this tab.\");\n  setUI(new BasicButtonUI());\n  setContentAreaFilled(false);\n  setFocusable(false);\n  setBorder(BorderFactory.createBevelBorder(1));\n  setBorderPainted(false);\n  addMouseListener(buttonMouseListener);\n  setRolloverEnabled(true);\n  addActionListener(this);\n}\n", "private void updateStyleAndText ( ) { updateStyleImp ( style ) ; if ( attr != null ) { mText = WXAttr . getValue ( attr ) ; } }", "public List<JSONValue> values(){\n  return Collections.unmodifiableList(values);\n}\n", "@Override\n\tpublic double getForward(AnalyticModel model, double fixingTime, double paymentOffset)\n\t{\n\t\tdouble forward = this.getForward(model, fixingTime);\n\t\tdouble curvePaymentOffset = this.getPaymentOffset(fixingTime);\n\t\tif(paymentOffset != curvePaymentOffset) {\n\t\t\tforward = (Math.exp(Math.log(1+forward*curvePaymentOffset) * paymentOffset/curvePaymentOffset)-1.0)/paymentOffset;\n\t\t\t// logger.warning(\"Requesting forward with paymentOffsets not agreeing with original calibration. Requested: \" + paymentOffset +\". Calibrated: \" + curvePaymentOffset + \".\");\n\t\t}\n\t\treturn forward;\n\t}", "public String toStringWithoutBraces(){\n  String set=toString();\n  return set.substring(1,set.length() - 1);\n}\n", "public List<T> parseList(JsonParser jsonParser) throws IOException {\n  List<T> list=new ArrayList<>();\n  if (jsonParser.getCurrentToken() == JsonToken.START_ARRAY) {\n    while (jsonParser.nextToken() != JsonToken.END_ARRAY) {\n      list.add(parse(jsonParser));\n    }\n  }\n  return list;\n}\n", "boolean isDisjoint(TypeDeclaration td){\n  if (this instanceof UnionType) {\n    return false;\n  }\n  if (this instanceof ClassOrInterface && td instanceof ClassOrInterface && equals(td)) {\n    return false;\n  }\n  if (this instanceof TypeParameter && td instanceof TypeParameter && equals(td)) {\n    return false;\n  }\n  List<Type> sts=getSatisfiedTypes();\n  for (int i=0, s=sts.size(); i < s; i++) {\n    Type st=sts.get(i);\n    if (isDisjoint(td,st)) {\n      return true;\n    }\n  }\n  Type et=getExtendedType();\n  if (et != null) {\n    if (isDisjoint(td,et)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "    private void loopWait() {\n\tsynchronized (this) {\n\n\t    int wait_time = SHORT_WAIT_MILLS;\n\t    if (messageServer != null) {\n\t\twait_time = messageServer.getRecommendedWaitTime();\n\t    }\n\n\t    try {\n\t\twait(wait_time);\n\t    } catch (InterruptedException e) {\n\t    }\n\n\t}\n    }\n", "@Timed(name=\"bv.emodb.sor.AstyanaxDataWriterDAO.compact\",absolute=true) @Override public void compact(Table tbl,String key,UUID compactionKey,Compaction compaction,UUID changeId,Delta delta,Collection<UUID> changesToDelete,List<History> historyList,WriteConsistency consistency){\n  checkNotNull(tbl,\"table\");\n  checkNotNull(key,\"key\");\n  checkNotNull(compactionKey,\"compactionKey\");\n  checkNotNull(compaction,\"compaction\");\n  checkNotNull(changeId,\"changeId\");\n  checkNotNull(delta,\"delta\");\n  checkNotNull(changesToDelete,\"changesToDelete\");\n  checkNotNull(consistency,\"consistency\");\n  AstyanaxTable table=(AstyanaxTable)tbl;\n  for (  AstyanaxStorage storage : table.getWriteStorage()) {\n    DeltaPlacement placement=(DeltaPlacement)storage.getPlacement();\n    CassandraKeyspace keyspace=placement.getKeyspace();\n    ByteBuffer rowKey=storage.getRowKey(key);\n    writeCompaction(rowKey,compactionKey,compaction,consistency,placement,keyspace,tbl,key);\n    deleteCompactedDeltas(rowKey,consistency,placement,keyspace,changesToDelete,historyList,tbl,key);\n  }\n}\n", "private static UntarCompressionMethod compressionMethod(File file){\n  String fn=file.toString();\n  UntarCompressionMethod out=new UntarCompressionMethod();\n  if (fn.endsWith(\"gz\")) {\n    out.setValue(\"gzip\");\n  }\n else   if (fn.endsWith(\"bz2\")) {\n    out.setValue(\"bzip2\");\n  }\n else   if (fn.endsWith(\"tar\")) {\n    out.setValue(\"none\");\n  }\n else {\n    throw new IllegalArgumentException(\"UntarJob doesn't know what to do with that file. \" + \"tar, gz, and bz2 files accepted.\");\n  }\n  return out;\n}\n", "    public void discardNotebook(String notebookUri) throws Exception {\n        if(notebookUri!=null) {\n            // find folder pointing to this notebook (if exists)\n        }\n        // TODO implement this\n        throw new OperationNotSupportedException();\n    }\n", "public boolean hasMore ( ) { return this . first != null ; }", "static void require(boolean condition, String message, Object... values) {\n\t\tif (!condition) {\n\t\t\tthrow new RuntimeException(String.format(message, values));\n\t\t}\n\t}", "public <A> Q bind(Path<A> entity, Iterable<? extends A> col) {\n        iterables.put(entity, col);\n        return queryMixin.getSelf();\n    }", "\tpublic String createDigest(String entity, byte[] suffix) {\n\t\tGeneralDigest sh=di();\n\t\tsh.update(entity.getBytes(),0,entity.getBytes().length);\n\t\tsh.update(suffix,0,suffix.length);\n\t\t// Complete hash computation, this results in binary data\n\t\tbyte[] pwhash = new byte[32];\n\t\tsh.doFinal(pwhash,0);\n\t\t\n\t\treturn new String(enc.encode(pwhash));\n\t}\n", "public static int length(final String value){\n  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);\n  return value.length();\n}\n", "private void cleanSession(final Session session){\n  logger.debug(\"End of SLO - Processing to session cleanup\");\n  session.remove(subjectMapping);\n  session.remove(sessionIndexMapping);\n  session.remove(authnContext);\n  if (attributeMapping != null) {\n    for (    final String key : attributeMapping.keySet()) {\n      session.remove(key);\n    }\n  }\n}\n", "private RenewResults renewLeasesDo(Object[] regIDs,Uuid[] leaseIDs,long[] renewals){\n  long now=SystemTime.timeMillis();\n  Exception[] exceptions=null;\n  for (int i=0; i < regIDs.length; i++) {\n    Object id=regIDs[i];\n    try {\n      if (id instanceof ServiceID)       renewals[i]=renewServiceLeaseInt((ServiceID)id,leaseIDs[i],renewals[i],now);\n else       renewals[i]=renewEventLeaseInt((Long)id,leaseIDs[i],renewals[i],now);\n    }\n catch (    Exception e) {\n      renewals[i]=-1;\n      if (exceptions == null)       exceptions=new Exception[]{e};\n else       exceptions=(Exception[])arrayAdd(exceptions,e);\n    }\n  }\n  for (int i=regIDs.length; --i >= 0; ) {\n    if (renewals[i] >= 0)     renewals[i]-=now;\n  }\n  return new RenewResults(renewals,exceptions);\n}\n", "static NameComponent[] nameToCosName(Name name) throws InvalidNameException {\n  int len=name.size();\n  if (len == 0) {\n    return new NameComponent[0];\n  }\n  NameComponent[] answer=new NameComponent[len];\n  for (int i=0; i < len; i++) {\n    answer[i]=parseComponent(name.get(i));\n  }\n  return answer;\n}\n", "public GetLoggerDefinitionResult withTags(java.util.Map<String, String> tags) {\n        setTags(tags);\n        return this;\n    }", "public SessionStateLite(String cmd,HiveOperation commandType,HiveConf conf){\n  this.cmd=cmd;\n  this.commandType=commandType.name();\n  this.conf=new HiveConf(conf);\n  this.queryId=null;\n  this.mapRedStats=null;\n}\n", "  public void printCsvToFile(String fileName) throws FileNotFoundException {\n    FileOutputStream out = new FileOutputStream(fileName);\n    PrintStream fileOutput = new PrintStream(out);\n    outputCsv(fileOutput);\n    fileOutput.close();\n  }\n", "double almostEquals(Point2D p1,Point2D p2,double tol){\n  double sepX=p1.getX() - p2.getX();\n  double sepY=p1.getY() - p2.getY();\n  double sep=Math.sqrt(sepX * sepX + sepY * sepY);\n  if (sep <= tol)   return sep;\n else   return Double.MAX_VALUE;\n}\n", "public static boolean isNullOrEmpty(@Nullable Map map){\n  return isNull(map) || map.isEmpty();\n}\n", "protected Float pxLength(TermLength spec)\n    {\n        float nval = spec.getValue();\n        TermLength.Unit unit = spec.getUnit();\n        \n        switch (unit)\n        {\n            case pt:\n                return (nval * dpi) / 72.0f;\n            case in:\n                return nval * dpi;\n            case cm:\n                return (nval * dpi) / 2.54f;\n            case mm:\n                return (nval * dpi) / 25.4f;\n            case q:\n                return (nval * dpi) / (2.54f*40f);\n            case pc:\n                return (nval * 12 * dpi) / 72.0f;\n            case px:\n                return nval;\n            case em:\n                return em * nval;\n            case ex:\n                return ex * nval;\n            default:\n                return null;\n        }\n    }", "    public void addCluster(Set elements) {\n        if (elements == null || elements.size() == 0) {\n            throw new IllegalArgumentException(\"The set of elements must have at least one element\");\n        }\n\n        for (Iterator udcIt=elements.iterator();udcIt.hasNext();) {\n            Element udc = (Element) udcIt.next();\n\n            checkLegality(udc);\n\n            Set components = (Set) mUDCToClustersMap.get(udc);\n            if (components == null) {\n                components = new HashSet();\n                mUDCToClustersMap.put(udc,components);\n            }\n\n            components.add(elements);\n        }\n        mClusters.add(elements);\n\n    }\n", "public List children() {\n        if (value == null) {\n            return new NodeList();\n        }\n        if (value instanceof List) {\n            return (List) value;\n        }\n        // we're probably just a String\n        List result = new NodeList();\n        result.add(value);\n        return result;\n    }", "private void onColumnSync(){\n  int syncPosition=Math.min(mSyncPosition,getCount() - 1);\n  SparseArray<Double> positionHeightRatios=new SparseArray<Double>(syncPosition);\n  for (int pos=0; pos < syncPosition; pos++) {\n    final GridItemRecord rec=mPositionData.get(pos);\n    if (rec == null)     break;\n    Log.d(TAG,\"onColumnSync:\" + pos + \" ratio:\"+ rec.heightRatio);\n    positionHeightRatios.append(pos,rec.heightRatio);\n  }\n  mPositionData.clear();\n  if (DBG)   Log.d(TAG,\"onColumnSync column width:\" + mColumnWidth);\n  for (int pos=0; pos < syncPosition; pos++) {\n    final GridItemRecord rec=getOrCreateRecord(pos);\n    final double heightRatio=positionHeightRatios.get(pos);\n    final int height=(int)(mColumnWidth * heightRatio);\n    rec.heightRatio=heightRatio;\n    int top;\n    int bottom;\n    if (isHeaderOrFooter(pos)) {\n      top=getLowestPositionedBottom();\n      bottom=top + height;\n      for (int i=0; i < mColumnCount; i++) {\n        mColumnTops[i]=top;\n        mColumnBottoms[i]=bottom;\n      }\n    }\n else {\n      final int column=getHighestPositionedBottomColumn();\n      top=mColumnBottoms[column];\n      bottom=top + height + getChildTopMargin(pos)+ getChildBottomMargin();\n      mColumnTops[column]=top;\n      mColumnBottoms[column]=bottom;\n      rec.column=column;\n    }\n    if (DBG)     Log.d(TAG,\"onColumnSync position:\" + pos + \" top:\"+ top+ \" bottom:\"+ bottom+ \" height:\"+ height+ \" heightRatio:\"+ heightRatio);\n  }\n  final int syncColumn=getHighestPositionedBottomColumn();\n  setPositionColumn(syncPosition,syncColumn);\n  int syncToBottom=mColumnBottoms[syncColumn];\n  int offset=-syncToBottom + mSpecificTop;\n  offsetAllColumnsTopAndBottom(offset);\n  mDistanceToTop=-syncToBottom;\n  System.arraycopy(mColumnBottoms,0,mColumnTops,0,mColumnCount);\n}\n", "\tpublic Image loadImage(byte[] contents) {\n\t\tif (sourceImage != null && !sourceImage.isDisposed()) {\n\t\t\tsourceImage.dispose();\n\t\t\tsourceImage = null;\n\t\t}\n\t\tsourceImage = new Image(getDisplay(), new ByteArrayInputStream(contents));\n\t\tshowOriginal();\n\t\treturn sourceImage;\n\t}\n", "public boolean namespacePublishedToMapgraph(final String namespace) throws Exception {\n  assertMapgraphRuntimeAvailable();\n  final String repositoryUrl=getSparqlEndpointUrlForNamespaceOrDefault(namespace);\n  final ConnectOptions opts=newConnectOptions(repositoryUrl,UUID.randomUUID(),null);\n  JettyResponseListener response=null;\n{\n    opts.setAcceptHeader(\"Accept: text/plain\");\n    opts.addRequestParam(MAPGRAPH,CHECK_PUBLISHED);\n    opts.method=\"POST\";\n  }\n  try {\n    checkResponseCode(response=doConnect(opts));\n    final String responseBody=response.getResponseBody();\n    return responseBody != null && responseBody.contains(\"true\");\n  }\n  finally {\n    if (response != null)     response.abort();\n  }\n}\n", "public void start(int totalSeeds,int maxNFE,long maxTime){\n  this.totalSeeds=totalSeeds;\n  this.maxNFE=maxNFE;\n  this.maxTime=maxTime;\n  lastSeed=1;\n  lastNFE=0;\n  currentSeed=1;\n  currentNFE=0;\n  statistics.clear();\n  startTime=System.currentTimeMillis();\n  lastTime=startTime;\n}\n", "public CodeGenerator ( Set < STypeDef > types , Map < String , STypeDef > typeDefMap ) { this . types = types ; this . typeDefMap = typeDefMap ; }", "@Override public StringBuilder stringBuilder(){\n  stringBuilder.setLength(0);\n  return this.stringBuilder;\n}\n", "  synchronized public int attributeEntryCount() {\n    return attributeEntries.size();\n  }\n", "public final void translate(final CharSequence input,final Writer out) throws IOException {\n  if (out == null) {\n    throw new IllegalArgumentException(\"The Writer must not be null\");\n  }\n  if (input == null) {\n    return;\n  }\n  int pos=0;\n  final int len=input.length();\n  while (pos < len) {\n    final int consumed=translate(input,pos,out);\n    if (consumed == 0) {\n      char c1=input.charAt(pos);\n      out.write(c1);\n      pos++;\n      if (Character.isHighSurrogate(c1) && pos < len) {\n        char c2=input.charAt(pos);\n        if (Character.isLowSurrogate(c2)) {\n          out.write(c2);\n          pos++;\n        }\n      }\n      continue;\n    }\n    for (int pt=0; pt < consumed; pt++) {\n      pos+=Character.charCount(Character.codePointAt(input,pos));\n    }\n  }\n}\n", "public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) ;", "public void testGetName ( ) { String expectedReturn = STR_ ; String actualReturn = xorOnly . getName ( ) ; assertEquals ( STR_ , expectedReturn , actualReturn ) ; }", "public void findAndInit(Object someObj){\n  if (someObj instanceof MouseDelegator) {\n    Debug.message(\"mousemodemenuitem\",\"MouseModeMenuItem found a MouseDelegator.\");\n    setMouseDelegator((MouseDelegator)someObj);\n  }\n}\n", "public static void verify ( final ClassReader cr , final boolean dump , final PrintWriter pw ) { verify ( cr , null , dump , pw ) ; }", "public void addRelationship(int linkType, Record recLeft, Record recRight, String fldLeft1, String fldRight1, String fldLeft2, String fldRight2, String fldLeft3, String fldRight3)\n    {\n        new TableLink(this, linkType, recLeft, recRight, fldLeft1, fldRight1, fldLeft2, fldRight2, fldLeft3, fldRight3);\n    }", "@Override public boolean eventGeneratable(String eventName){\n  if (m_listenee == null) {\n    return false;\n  }\n  if (!eventName.equals(\"instance\") && !eventName.equals(\"dataSet\")) {\n    return false;\n  }\n  if (m_listenee instanceof DataSource) {\n    if (m_listenee instanceof EventConstraints) {\n      EventConstraints ec=(EventConstraints)m_listenee;\n      return ec.eventGeneratable(eventName);\n    }\n  }\n  if (m_listenee instanceof TrainingSetProducer) {\n    if (m_listenee instanceof EventConstraints) {\n      EventConstraints ec=(EventConstraints)m_listenee;\n      if (!eventName.equals(\"dataSet\")) {\n        return false;\n      }\n      if (!ec.eventGeneratable(\"trainingSet\")) {\n        return false;\n      }\n    }\n  }\n  if (m_listenee instanceof TestSetProducer) {\n    if (m_listenee instanceof EventConstraints) {\n      EventConstraints ec=(EventConstraints)m_listenee;\n      if (!eventName.equals(\"dataSet\")) {\n        return false;\n      }\n      if (!ec.eventGeneratable(\"testSet\")) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n", "    public BigDecimal getSessionID() {\n        if (m_sessionID == null)\n            throw new IllegalStateException(\"session ID is not defined\");\n        return m_sessionID;\n    }\n", "public static int interp(int c1,int c2,double frac){\n  double ifrac=1 - frac;\n  return rgba((int)Math.round(frac * red(c2) + ifrac * red(c1)),(int)Math.round(frac * green(c2) + ifrac * green(c1)),(int)Math.round(frac * blue(c2) + ifrac * blue(c1)),(int)Math.round(frac * alpha(c2) + ifrac * alpha(c1)));\n}\n", "public static HighlightStyle styleForClass ( String className ) { switch ( className ) { case STR_ : return Yellow ; case STR_ : return Green ; case STR_ : return Blue ; case STR_ : return Pink ; case STR_ : return Underline ; default : return Yellow ; } ", "public DD pow(int exp){\n  if (exp == 0.0)   return valueOf(1.0);\n  DD r=new DD(this);\n  DD s=valueOf(1.0);\n  int n=Math.abs(exp);\n  if (n > 1) {\n    while (n > 0) {\n      if (n % 2 == 1) {\n        s.selfMultiply(r);\n      }\n      n/=2;\n      if (n > 0)       r=r.sqr();\n    }\n  }\n else {\n    s=r;\n  }\n  if (exp < 0)   return s.reciprocal();\n  return s;\n}\n", "private void handleRequest(Request request){\n  if (interceptors == null) {\n    return;\n  }\n  for (  IInterceptor interceptor : interceptors) {\n    interceptor.handleRequest(request,this,request.getCommand());\n  }\n}\n", "public ResultObjectProvider execute ( StoreManager store ) throws Exception ;", "public void write ( byte [ ] buf ) throws IOException { bout . write ( buf , NUM_ , buf . length , BOOL_ ) ; }", "public static boolean addSmiles ( Context context , Spannable spannable ) { boolean hasChanges = BOOL_ ; for ( Entry < Pattern , Integer > entry : emoticons . entrySet ( ) ) { Matcher matcher = entry . getKey ( ) . matcher ( spannable ) ; while ( matcher . find ( ) ) { boolean set = BOOL_ ; for ( ImageSpan span : spannable . getSpans ( matcher . start ( ) , matcher . end ( ) , ImageSpan . class ) ) if ( spannable . getSpanStart ( span ) >= matcher . start ( ) && spannable . getSpanEnd ( span ) <= matcher . end ( ) ) spannable . removeSpan ( span ) ; else { set = BOOL_ ; break ; } if ( set ) { hasChanges = BOOL_ ; spannable . setSpan ( new ImageSpan ( context , entry . getValue ( ) ) , matcher . start ( ) , matcher . end ( ) , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ) ; } } } return hasChanges ; }", "    public void setRowCount(int rowCount) {\n        numRows = rowCount;\n\n        this.fireTableStructureChanged();\n    }\n", "private void log(TaskId taskId,NotificationLevel notificationLevel,String message,boolean completed,Throwable exception){\n  notifier.notify(taskId,notificationLevel,message,completed);\nswitch (notificationLevel) {\ncase INFO:\n    log.info(message);\n  break;\ncase WARN:\nlog.warn(message,exception);\nbreak;\ncase ERROR:\nlog.error(message,exception);\nbreak;\n}\n}\n", "void write(){\n  clearAttributes();\n  if (termAttribute.length() < buffer.length()) {\n    termAttribute.resizeBuffer(buffer.length());\n  }\n  char termbuffer[]=termAttribute.buffer();\n  buffer.getChars(0,buffer.length(),termbuffer,0);\n  termAttribute.setLength(buffer.length());\n  if (hasIllegalOffsets) {\n    offsetAttribute.setOffset(savedStartOffset,savedEndOffset);\n  }\n else {\n    offsetAttribute.setOffset(startOffset,endOffset);\n  }\n  posIncAttribute.setPositionIncrement(position(true));\n  typeAttribute.setType(savedType);\n  accumPosInc=0;\n}\n", "    public void processPacket(JabberPacket packet) {\n        UserSession session=packet.getSession();\n        if (session==null)\n            return;\n\n        //parse the incoming presence packet\n        if (!updateSessionPresence(packet))\n            return;\n\n        server.getRosterManager().distributePresence(session);\n    } //processPacket\n", "\tpublic Vector2f getAnchor2() {\n\t\treturn anchor2;\n\t}\n", "public static String now(){\n  return fromCalendar(GregorianCalendar.getInstance());\n}\n", "  protected void buildYAxis() {\n    ChartWithAxes chartWithAxes = (ChartWithAxes) getChart();\n    _yAxis = chartWithAxes.getPrimaryOrthogonalAxis(getXAxis());\n    _yAxis.getMajorGrid().setTickStyle(TickStyle.LEFT_LITERAL);\n    _yAxis.setType(AxisType.LINEAR_LITERAL);\n    FontDefinition font = _yAxis.getLabel().getCaption().getFont();\n    font.setRotation(90);\n    // Default font (i.e SansSerif) does not handle rotation.\n    font.setName(\"Arial\"); //$NON-NLS-1$\n  }\n", "public static boolean isReadable(@NonNull final File file){\n  if (!file.isFile()) {\n    LogHelper.d(TAG,\"isReadable(): Not a File\");\n    return false;\n  }\n  return file.exists() && file.canRead();\n}\n", "  public void setCounterSupport(CounterSupport counterSupport) {\n    if (counterSupport == null) {\n      throw new NullPointerException();\n    }\n    this.counterSupport = counterSupport;\n  }\n", "public String consumeRequiredIntAttribute ( String name ) throws UnableToCompleteException { return consumeRequiredAttribute ( name , getIntType ( ) ) ; }", "public double min ( ) ;", "    public void addListeners() {\n\tif (indVar1Box != null)\n            indVar1Box.getTextBox().addCaretListener(new VariableListener());\n\tif (indVar2Box != null)\n            indVar2Box.getTextBox().addCaretListener(new VariableListener());\n    }\n", "public void setDataSource(DataSource dataSource) {\r\n        mDataSource = dataSource;\r\n        mDriverClassName = null;\r\n        mURL = null;\r\n        mUsername = null;\r\n        mPassword = null;\r\n    }", "public Synchronizer(ODataEntry odata_entry) throws ODataException {\n  Map<String,Object> props=odata_entry.getProperties();\n  String label=(String)props.get(SynchronizerEntitySet.LABEL);\n  String schedule=(String)props.get(SynchronizerEntitySet.SCHEDULE);\n  String request=(String)props.get(SynchronizerEntitySet.REQUEST);\n  String service_url=(String)props.get(SynchronizerEntitySet.SERVICE_URL);\n  if (schedule == null || schedule.isEmpty() || service_url == null || service_url.isEmpty()) {\n    throw new ODataException(\"Missing required parameter\");\n  }\n  if (request != null && !request.equals(\"start\") && !request.equals(\"stop\")) {\n    throw new ODataException(\"Unknown request \" + request);\n  }\n  try {\n    this.syncConf=SYNCHRONIZER_SERVICE.createSynchronizer(label,\"ODataProductSynchronizer\",schedule);\n    updateFromEntry(odata_entry);\n  }\n catch (  ParseException e) {\n    throw new ODataException(e);\n  }\n}\n", "protected void scanDirectory(){\n  if (System.currentTimeMillis() - scanIntervalMillis >= lastScanMillis) {\n    Set<Path> newPaths=scanner.scan(fs,filePath,processedFiles);\n    for (    Path newPath : newPaths) {\n      String newPathString=newPath.toString();\n      pendingFiles.add(newPathString);\n      processedFiles.add(newPathString);\n      localProcessedFileCount.increment();\n    }\n    lastScanMillis=System.currentTimeMillis();\n  }\n}\n", "public void startElement(String namespaceURI,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {\n  ElemContext elemContext=m_elemContext;\n  if (elemContext.m_startTagOpen) {\n    closeStartTag();\n    elemContext.m_startTagOpen=false;\n  }\n else   if (m_cdataTagOpen) {\n    closeCDATA();\n    m_cdataTagOpen=false;\n  }\n else   if (m_needToCallStartDocument) {\n    startDocumentInternal();\n    m_needToCallStartDocument=false;\n  }\n  if (m_needToOutputDocTypeDecl) {\n    String n=name;\n    if (n == null || n.length() == 0) {\n      n=localName;\n    }\n    outputDocTypeDecl(n);\n  }\n  if (null != namespaceURI && namespaceURI.length() > 0) {\n    super.startElement(namespaceURI,localName,name,atts);\n    return;\n  }\n  try {\n    ElemDesc elemDesc=getElemDesc2(name);\n    int elemFlags=elemDesc.getFlags();\n    if (m_doIndent) {\n      boolean isBlockElement=(elemFlags & ElemDesc.BLOCK) != 0;\n      if (m_ispreserve)       m_ispreserve=false;\n else       if ((null != elemContext.m_elementName) && (!m_inBlockElem || isBlockElement)) {\n        m_startNewLine=true;\n        indent();\n      }\n      m_inBlockElem=!isBlockElement;\n    }\n    if (atts != null)     addAttributes(atts);\n    m_isprevtext=false;\n    final java.io.Writer writer=m_writer;\n    writer.write('<');\n    writer.write(name);\n    if (m_tracer != null)     firePseudoAttributes();\n    if ((elemFlags & ElemDesc.EMPTY) != 0) {\n      m_elemContext=elemContext.push();\n      m_elemContext.m_elementName=name;\n      m_elemContext.m_elementDesc=elemDesc;\n      return;\n    }\n else {\n      elemContext=elemContext.push(namespaceURI,localName,name);\n      m_elemContext=elemContext;\n      elemContext.m_elementDesc=elemDesc;\n      elemContext.m_isRaw=(elemFlags & ElemDesc.RAW) != 0;\n    }\n    if ((elemFlags & ElemDesc.HEADELEM) != 0) {\n      closeStartTag();\n      elemContext.m_startTagOpen=false;\n      if (!m_omitMetaTag) {\n        if (m_doIndent)         indent();\n        writer.write(\"<META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=\");\n        String encoding=getEncoding();\n        String encode=Encodings.getMimeEncoding(encoding);\n        writer.write(encode);\n        writer.write(\"\\\">\");\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new SAXException(e);\n  }\n}\n", "\t\tpublic boolean isIntrinsic() {\n\t\t\treturn isIntrinsic;\n\t\t}\n", "public void saveIfExists(T object) throws ConditionalCheckFailedException {\n        final DynamoDBSaveExpression saveExpression = new DynamoDBSaveExpression();\n        for (final DynamoDBMapperFieldModel<T,Object> key : model.keys()) {\n            saveExpression.withExpectedEntry(key.name(), new ExpectedAttributeValue()\n                .withExists(true).withValue(key.convert(key.get(object))));\n        }\n        mapper.<T>save(object, saveExpression);\n    }", "public void removeListener(final IRunningQueryListener l){\n  if (l == null)   throw new IllegalArgumentException();\n  listeners.remove(l);\n}", "public static final String getString(Type type) {\n        if (type instanceof GenericObjectType) {\n            return ((GenericObjectType) type).toString(true);\n        } else if (type instanceof ArrayType) {\n            return TypeCategory.asString((ArrayType) type);\n        } else {\n            return type.toString();\n        }\n    }", "private void rotate(){\n  if (rrc % tokenDataLen != 0) {\n    rrc=rrc % tokenDataLen;\n    byte[] newBytes=new byte[tokenDataLen];\n    System.arraycopy(tokenData,rrc,newBytes,0,tokenDataLen - rrc);\n    System.arraycopy(tokenData,0,newBytes,tokenDataLen - rrc,rrc);\n    tokenData=newBytes;\n  }\n}\n", "  public void onClick(Widget sender) {\n    CellHTML cell = (CellHTML)sender;\n    this.lastMonth = date.getMonth();\n    setDate(getYear(), getMonth(), cell.getDay());\n    if (date.getMonth() != this.lastMonth) {\n      drawCalendar();\n    }\n    if (changeListeners != null) {\n      changeListeners.fireChange(this);\n    }\n    this.feedbackTextBox.setText(this.date.toString());\n    this.feedbackTextBox.setText(\n      DateTimeFactories.getInstance().getDatefactory().format(this.date));\n    ((PopupPanel)this.getParent()).hide();\n  }\n", "public void logError(String message, Exception exception) {\r\n        if (!(logError || globalLog.logError))\r\n            return;\r\n\t\r\n        if (errorLog != null)\r\n            log(errorLog, \"ERROR\", owner, message, exception);\r\n        else \r\n            log(globalLog.errorLog, \"ERROR\", owner, message, exception);\r\n    }", "public void put(String[] localFiles,String remoteTargetDirectory,String mode) throws IOException {\n  put(localFiles,null,remoteTargetDirectory,mode);\n}", "public Observable<Integer> getImagePerformanceCountAsync(UUID projectId, UUID iterationId, GetImagePerformanceCountOptionalParameter getImagePerformanceCountOptionalParameter) {\n        return getImagePerformanceCountWithServiceResponseAsync(projectId, iterationId, getImagePerformanceCountOptionalParameter).map(new Func1<ServiceResponse<Integer>, Integer>() {\n            @Override\n            public Integer call(ServiceResponse<Integer> response) {\n                return response.body();\n            }\n        });\n    }", "public static < T > T min ( T [ ] items ) { return min ( ( Iterable < T > ) Arrays . asList ( items ) ) ; }", "public boolean isDone ( ) { return done ; }", "    private String getSerializedForm(DBField theField) throws DBException {\n        try {\n            if (theField.isEncrypted()) {\n                return Base64.encodeNoPadding(\n                    cryptoManager.getStringEncryption()\n                    .encryptString(getFieldData(theField.getName())));\n            } else {\n                return getFieldData(theField.getName());\n            }\n        } catch(ChainedException e) {\n            throw new DBException(e);\n        }\n    }  /* getSerializedForm() */\n", "public boolean equals ( Object obj ) { if ( ! ( obj instanceof UseCandidateAttribute ) ) return BOOL_ ; if ( obj == this ) return BOOL_ ; UseCandidateAttribute useCandidateAtt = ( UseCandidateAttribute ) obj ; if ( useCandidateAtt . getAttributeType ( ) != getAttributeType ( ) || useCandidateAtt . getDataLength ( ) != getDataLength ( ) ) return BOOL_ ; return BOOL_ ; }", "public void remove(Individual individual){\n  individuals.remove(individual);\n}\n", "    protected void visitByteLiteral( byte value ) {\n\tprint(\"(byte)\" + value);\n    }\n", "@Override\n    public Collection<N> getNodes() {\n        List<N> nodes = new ArrayList<>();\n        Iterables.addAll(nodes, GraphTraversal.breadthFirstOrder(this, Collections.singleton(root)));\n        return nodes;\n    }", "\tpublic BaseArticle (java.lang.Long id) {\n\t\tthis.setId(id);\n\t\tinitialize();\n\t}\n", "public JBBPOut Long(final long... value) throws IOException {\n    assertNotEnded();\n    assertArrayNotNull(value);\n    if (this.processCommands) {\n      for (final long l : value) {\n        _writeLong(l);\n      }\n    }\n    return this;\n  }", "public void cancel ( ) { cancelled = BOOL_ ; }", "public static double evaluate(Phylogeny tree, DistanceMatrix matrix) {\n\t\tint numSequences = matrix.getSize();\n\t\tList<PhylogenyNode> externalNodes = tree.getExternalNodes();\n\t\tHashMap<String, PhylogenyNode> externalNodesHashMap = new HashMap<String, Phylog", "public LocalVolTermStructure ( final Date referenceDate ) { this ( referenceDate , new Calendar ( ) , BusinessDayConvention . Following , new DayCounter ( ) ) ; }", "\tpublic boolean canConvert(final Class type) {\n\t\treturn type.equals(Patient.class);\n\t}\n", "Union5 < First , Second , Third , Fourth , Fifth > fourth ( Fourth value ) ;", "  public String toDisplayName()\n  {              \n    if (displayName != null) return displayName;\n    if (name != null) return name;\n    return getElement();\n  }  \n", "public static Calendar next ( Calendar self ) { Calendar result = ( Calendar ) self . clone ( ) ; result . add ( Calendar . DAY_OF_YEAR , NUM_ ) ; return result ; }", "public String name(){\n  if (SystemType.isMacOSX() || (SystemType.isWindows() && Double.valueOf(System.getProperty(\"os.version\")) >= 6)) {\n    return \"(LocoNet MS100 not available)\";\n  }\n else {\n    return \"LocoNet MS100\";\n  }\n}\n", "default ParameterDeclaration asParameter(){\n  throw new UnsupportedOperationException(String.format(\"%s is not a ParameterDeclaration\",this));\n}\n", "\tpublic ElementSet Requirement(java.lang.Class<?> subclass) {\n\t\treturn Filters.filter(requirementSet, new TypeFilter(subclass));\n\t}\n", "public static Number getPercentileValue(int targetPercentile,\n            List<Number> unorderedNumberList) {\n        return getPercentileValueWithSorted(targetPercentile,\n                sortedDoubleList(unorderedNumberList));\n    }", "private void loadInfoOf(ResultSet rs,VEditor editor,String name) throws SQLException {\n  if (editor == null)   return;\n  int intValue=rs.getInt(name);\n  if (rs.wasNull())   editor.setValue(null);\n else   editor.setValue(new Integer(intValue));\n}\n", "public ServiceFuture<Void> beginCreateAsync(String resourceGroupName, String clusterName, String extensionName, ExtensionInner parameters, final ServiceCallback<Void> serviceCallback) {\n        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, clusterName, extensionName, parameters), serviceCallback);\n    }", "public boolean isWorseThan ( final Problem other ) { return other == null ? BOOL_ : compareTo ( other ) > NUM_ ; }", "public static XMLReader newXMLReader(JstlEntityResolver entityResolver)\n            throws ParserConfigurationException, SAXException {\n        XMLReader xmlReader = SAXPARSER_FACTORY.newSAXParser().getXMLReader();\n        xmlReader.setEntityResolver(entityResolver);\n        return xmlReader;\n    }", "\tpublic void getPlaylistPosition(final DataResponse<Integer> response, final Context context) {\n\t\tmHandler.post(new Command<Integer>(response, this) {\n\t\t\tpublic void doRun() throws Exception{ \n\t\t\t\tresponse.value = video(context).getPlaylistPosition(VideoManager.this);\n\t\t\t}\n\t\t});\n\t}\n", "@Override\r\n  public int compare(S solution1, S solution2) {\r\n    int result ;\r\n    if (solution1 == null) {\r\n      if (solution2 == null) {\r\n        result = 0;\r\n      } else {\r\n        result = 1 ;\r\n      }\r\n    } else if (solution2 == null) {\r\n      result = -1;\r\n    } else {\r\n      double contribution1 = Double.MAX_VALUE ;\r\n      double contribution2 = Double.MAX_VALUE ;\r\n\r\n      if (hvContribution.getAttribute(solution1) != null) {\r\n        contribution1 = (double) hvContribution.getAttribute(solution1);\r\n      }\r\n\r\n      if (hvContribution.getAttribute(solution2) != null) {\r\n        contribution2 = (double) hvContribution.getAttribute(solution2);\r\n      }\r\n\r\n      if (contribution1 < contribution2) {\r\n        result = 1;\r\n      } else  if (contribution1 > contribution2) {\r\n        result = -1;\r\n      } else {\r\n        result = 0;\r\n      }\r\n    }\r\n\r\n    return result ;\r\n  }", "public static void main(final String[] args)\n\t{\n\n\t\tif (args.length != 1) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Configuration File ist missing.\");\n\t\t}\n\n\t\ttry {\n\n\t\t\t// Reads the configuration\n\t\t\tConfigSettings config = readConfiguration(args[0]);\n\t\t\tnew DiffToolThread(config).run();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}", "\tpublic void test9_QueryDIndex() throws Exception {\n\t\tQuery.indexTables(Utils.MAX_MEM);\n\t\tTable oTable = Query.QueryDIndex(\"AFRICA\", Utils.MAX_MEM);\n\t\tTable oTable1 = oTable.clone();\n\t\toTable1.setFile(new File(Utils.FILEPATH_OUTPUT + \"MSAQueryDLarge.txt\"));\n\n\t\toTable = SQL.orderBy(oTable, new File(Utils.FILEPATH_WORKDIR\n\t\t\t\t+ \"QueryD.txt\"), new int[] { 2, 1 }, TPPMS.DESC, Utils.MAX_MEM);\n\t\t\n\t\toTable1 = SQL.orderBy(oTable1, new File(Utils.FILEPATH_WORKDIR\n\t\t\t\t+ \"MSAQueryDLarge.txt\"), new int[] { 2, 1 }, TPPMS.DESC, Utils.MAX_MEM);\n\n\t\tassertTableEquals(oTable1, oTable, Utils.MAX_MEM);\n\t}\n", "public static RevisionInternal revisionObject(\n            Document doc,\n            String docID,\n            String revID,\n            boolean withBody) {\n\n        boolean deleted = doc.selectedRevDeleted();\n        if (revID == null)\n            revID = doc.getSelectedRevID();\n        RevisionInternal rev = new RevisionInternal(docID, revID, deleted);\n        rev.setSequence(doc.getSelectedSequence());\n        if (withBody) {\n            Status status = loadBodyOfRevisionObject(rev, doc);\n            if (status.isError() && status.getCode() != Status.GONE)\n                return null;\n        }\n        return rev;\n    }", "public static void cloneAll ( Collection < BugInstance > dest , Collection < BugInstance > source ) { for ( BugInstance obj : source ) { dest . add ( ( BugInstance ) obj . clone ( ) ) ; } }", "public Observable<List<EntitiesSuggestionExample>> getEntitySuggestionsAsync(UUID appId, String versionId, UUID entityId, GetEntitySuggestionsOptionalParameter getEntitySuggestionsOptionalParameter) {\n        return getEntitySuggestionsWithServiceResponseAsync(appId, versionId, entityId, getEntitySuggestionsOptionalParameter).map(new Func1<ServiceResponse<List<EntitiesSuggestionExample>>, List<EntitiesSuggestionExample>>() {\n            @Override\n            public List<EntitiesSuggestionExample> call(ServiceResponse<List<EntitiesSuggestionExample>> response) {\n                return response.body();\n            }\n        });\n    }", "public String encodeHex ( String hexa ) { if ( ! hexa . matches ( STR_ ) ) return STR_ ; List < Long > matched = new ArrayList < Long > ( ) ; Matcher matcher = Pattern . compile ( STR_ ) . matcher ( hexa ) ; while ( matcher . find ( ) ) matched . add ( Lo", "public Cell<C,T> prefSize (float width, float height) {\r\n\t\tprefWidth = new FixedValue<C, T>(layout.toolkit,width);\r\n\t\tprefHeight = new FixedValue<C, T>(layout.toolkit,height);\r\n\t\treturn this;\r\n\t}", "public Trie ( ) { clear ( ) ; }", "public boolean parseXmlResource(Object resourceName,InputSource source){\n  XMLReader reader;\n  source.setEncoding(\"UTF8\");\n  try {\n    reader=XMLReaderFactory.createXMLReader();\n  }\n catch (  SAXException e) {\n    if (logger.isLoggable(Level.SEVERE)) {\n      logger.warning(\"Failed to create reader for \" + resourceName + \": \"+ e.getMessage());\n    }\n    return false;\n  }\n  boolean status=false;\n  reader.setContentHandler(this);\n  reader.setErrorHandler(this);\n  try {\n    reader.parse(source);\n    status=true;\n  }\n catch (  SAXParseException e) {\n    if (logger.isLoggable(Level.WARNING)) {\n      logger.warning(\"Failed to parse \" + resourceName + \" Line: \"+ e.getLineNumber()+ \" Col: \"+ e.getColumnNumber()+ \": \"+ e);\n    }\n  }\ncatch (  SAXException e) {\n    if (logger.isLoggable(Level.WARNING)) {\n      logger.warning(\"Failed to parse \" + resourceName + e.getMessage());\n    }\n  }\ncatch (  IOException e) {\n    if (logger.isLoggable(Level.WARNING)) {\n      logger.warning(\"Failed to parse \" + resourceName + \":\"+ e.getMessage());\n    }\n  }\n  return status;\n}\n", "\tpublic boolean equals(Object obj) {\n\t\tif (obj instanceof RemarkHdrPk) {\n\t\t\tRemarkHdrPk pk2 = (RemarkHdrPk) obj;\n\t\t\treturn (this.companyCode != null && this.companyCode.equals(pk2.companyCode)\n\t\t\t\t&& this.remarkMasterCode != null && this.remarkMasterCode.equals(pk2.remarkMasterCode));\t\t\t\n\t\t}\n\t\treturn false;\n\t}\n", "public void put ( String localPath , String hdfsPath ) throws ReplicatorException { JavaFileIO localFileIO = new JavaFileIO ( ) ; FilePath local = new FilePath ( localPath ) ; FilePath remote = new FilePath ( hdfsPath ) ; try { FileIOUtils . copyBytes ( l", "private String xmlEscape(String string){\n  if (string == null) {\n    return null;\n  }\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < string.length(); i++) {\n    char ch=string.charAt(i);\nswitch (ch) {\ncase '<':\n      sb.append(\"&lt;\");\n    break;\ncase '>':\n  sb.append(\"&gt;\");\nbreak;\ncase '&':\nsb.append(\"&amp;\");\nbreak;\ndefault :\nif (ch < 0x20 || ch > 0x7e) {\nsb.append(\"&#\" + (int)ch + \";\");\n}\n else {\nsb.append(ch);\n}\n}\n}\nreturn sb.toString();\n}\n", "public ProcessDrawer(final ProcessRendererModel model,final boolean drawHighlight){\n  if (model == null) {\n    throw new IllegalArgumentException(\"model must not be null!\");\n  }\n  this.model=model;\n  this.drawHighlight=drawHighlight;\n  decorators=new HashMap<>();\n  for (  RenderPhase phase : RenderPhase.drawOrder()) {\n    decorators.put(phase,new CopyOnWriteArrayList<ProcessDrawDecorator>());\n  }\n  operatorDecorators=new CopyOnWriteArrayList<OperatorDrawDecorator>();\n}\n", "private CoverageClassVisitor createCoverageClassVisitor(String className, ClassWriter cv, boolean isRedefined) {\n        // We cannot change classfiles if class is being redefined.\n        return new CoverageClassVisitor(className, cv);\n    }", "public IPv4AddressSection intersect(IPv4AddressSection other) throws SizeMismatchException {\n\t\treturn intersect(this, other, getAddressCreator(), this::getSegment, other::getSegment);\n\t}", "\tprivate void searchPatient(){\n\t\tpatientSearchForm.removeCommand(DefaultCommands.cmdOk);\n\t\tpatientSearchForm.removeCommand(DefaultCommands.cmdCancel);\n\t\t\n\t\tpatientSearchForm.addCommand(DefaultCommands.cmdOk);\n\t\tpatientSearchForm.addCommand(DefaultCommands.cmdCancel);\n\t\tpatientSearchForm.setCommandListener(this);\n\t\tdisplay.setCurrent(patientSearchForm);\n\t}\n", "public String toHTML(){\n  StringBuilder builder=new StringBuilder();\n  int numClasses=classes.size();\n  builder.append(\"<table>\\n\");\n  builder.append(\"<tr><th class=\\\"empty-space\\\" colspan=\\\"2\\\" rowspan=\\\"2\\\">\");\n  builder.append(String.format(\"<th class=\\\"predicted-class-header\\\" colspan=\\\"%d\\\">Predicted Class</th></tr>\\n\",numClasses + 1));\n  builder.append(\"<tr>\");\n  for (  T predicted : classes) {\n    builder.append(\"<th class=\\\"predicted-class-header\\\">\");\n    builder.append(predicted);\n    builder.append(\"</th>\");\n  }\n  builder.append(\"<th class=\\\"predicted-class-header\\\">Total</th>\");\n  builder.append(\"</tr>\\n\");\n  String firstColumnLabel=String.format(\"<tr><th class=\\\"actual-class-header\\\" rowspan=\\\"%d\\\">Actual Class</th>\",numClasses + 1);\n  for (  T actual : classes) {\n    builder.append(firstColumnLabel);\n    firstColumnLabel=\"<tr>\";\n    builder.append(String.format(\"<th class=\\\"actual-class-header\\\" >%s</th>\",actual));\n    for (    T predicted : classes) {\n      builder.append(\"<td class=\\\"count-element\\\">\");\n      builder.append(getCount(actual,predicted));\n      builder.append(\"</td>\");\n    }\n    builder.append(\"<td class=\\\"count-element\\\">\");\n    builder.append(getActualTotal(actual));\n    builder.append(\"</td>\");\n    builder.append(\"</tr>\\n\");\n  }\n  builder.append(\"<tr><th class=\\\"actual-class-header\\\">Total</th>\");\n  for (  T predicted : classes) {\n    builder.append(\"<td class=\\\"count-element\\\">\");\n    builder.append(getPredictedTotal(predicted));\n    builder.append(\"</td>\");\n  }\n  builder.append(\"<td class=\\\"empty-space\\\"></td>\\n\");\n  builder.append(\"</tr>\\n\");\n  builder.append(\"</table>\\n\");\n  return builder.toString();\n}\n", "protected void add(double value,int group){\n  if ((group < 0) || (group >= numberOfGroups)) {\n    throw new IllegalArgumentException(\"invalid group\");\n  }\n  data.add(new Observation(value,group));\n}\n", "private void readLibraryFromStreamInternal(final DataInput in) throws IOException {\n\n\t\tfinal String libraryFileName = StringRecord.readString(in);\n\n\t\tif (libraryFileName == null) {\n\t\t\tthrow new IOException(\"libraryFileName is null!\");\n\t\t}\n\n\t\tfinal long length = in.readLong();\n\n\t\tif (length > (long) Integer.MAX_VALUE) {\n\t\t\tthrow new IOException(\"Submitted jar file \" + libraryFileName + \" is too large\");\n\t\t}\n\n\t\tfinal byte[] buf = new byte[(int) length];\n\t\tin.readFully(buf);\n\n\t\tfinal Path storePath = new Path(this.libraryCachePath + \"/\" + libraryFileName);\n\n\t\tsynchronized (this.fs) {\n\n\t\t\t// Check if file already exists in our library cache, if not write it to the cache directory\n\t\t\tif (!fs.exists(storePath)) {\n\t\t\t\tfinal FSDataOutputStream fos = fs.create(storePath, false);\n\t\t\t\tfos.write(buf, 0, buf.length);\n\t\t\t\tfos.close();\n\t\t\t}\n\t\t}\n\t}", "public static String generateSourceID(String entityID){\n  if ((entityID == null) || (entityID.length() == 0)) {\n    return null;\n  }\n  MessageDigest md=null;\n  try {\n    md=MessageDigest.getInstance(\"SHA\");\n  }\n catch (  NoSuchAlgorithmException e) {\n    debug.error(\"SAML2Utils.generateSourceID: \",e);\n    return null;\n  }\n  char chars[]=entityID.toCharArray();\n  byte bytes[]=new byte[chars.length];\n  for (int i=0; i < chars.length; i++) {\n    bytes[i]=(byte)chars[i];\n  }\n  md.update(bytes);\n  return SAML2Utils.byteArrayToString(md.digest());\n}\n", "static int compareParameterTypes(Class[] left,Class[] right,Class[] actual){\n  float leftCost=getTotalTransformationCost(actual,left);\n  float rightCost=getTotalTransformationCost(actual,right);\n  return leftCost < rightCost ? -1 : rightCost < leftCost ? 1 : 0;\n}\n", "public static String[] split(final String string, final char separator, final boolean ignoreQuotes) {\n        StrTokenizer strtok = new StrTokenizer(string, StrMatcher.charMatcher(separator), StrMatcher.quoteMatcher());\n        return strtok.getTokenArray();\n    }", "private String getContentByContainer(\n        CmsContainerElementBean element,\n        CmsContainer container,\n        CmsFormatterConfiguration configs) {\n\n        String content = null;\n\n        I_CmsFormatterBean formatter = getFormatterForContainer(\n            m_cms,\n            element,\n            container,\n            m_adeConfig,\n            CmsADESessionCache.getCache(m_req, m_cms));\n        if (formatter != null) {\n            element = element.clone(); // clone element because presets for different containers may be different\n            element.initSettings(m_cms, formatter, m_locale, m_req, container.getSettingPresets());\n            try {\n                content = getElementContent(element, m_cms.readResource(formatter.getJspStructureId()), container);\n                //                }\n            } catch (Exception e) {\n                LOG.error(e.getLocalizedMessage(), e);\n            }\n            if (content != null) {\n                content = removeScriptTags(content);\n            }\n        }\n        return content;\n    }", "private void calculateChecksumOverPage(ByteBuffer page){\n  page.putInt(OggPageHeader.FIELD_PAGE_CHECKSUM_POS,0);\n  byte[] crc=OggCRCFactory.computeCRC(page.array());\n  for (int i=0; i < crc.length; i++) {\n    page.put(OggPageHeader.FIELD_PAGE_CHECKSUM_POS + i,crc[i]);\n  }\n  page.rewind();\n}\n", "    public String getIconsTheme() {\n        final String theme = properties.get(ICONS_THEME);\n        if (theme == null || theme.equals(\"\")) {\n            return \"default\";\n        }\n        return theme;\n    }\n", "public boolean sleep () {\n\ttry\n\t{\n\t\tThread.sleep(1000);\n\t}\n\tcatch (InterruptedException exception)\n\t{\n\t}\n\treturn false;\n}\n", "\tpublic void insertText(final String text) {\n\t\tassertEnabled();\n\t\tsyncExec(new VoidResult() {\n\t\t\tpublic void run() {\n\t\t\t\tgetControl().insert(text);\n\t\t\t}\n\t\t});\n\t}\n", "private /*static*/ int getLiteral(int word)\r\n  {\r\n    if (isLiteral(word)) {\r\n      return word;\r\n    }\r\n\r\n    if (simulateWAH) {\r\n      return isZeroSequence(word) ? ConciseSetUtils.ALL_ZEROS_LITERAL : ConciseSetUtils.ALL_ONES_LITERAL;\r\n    }\r\n\r\n    // get bits from 30 to 26 and use them to set the corresponding bit\r\n    // NOTE: \"1 << (word >>> 25)\" and \"1 << ((word >>> 25) & 0x0000001F)\" are equivalent\r\n    // NOTE: \">>> 1\" is required since 00000 represents no bits and 00001 the LSB bit set\r\n    int literal = (1 << (word >>> 25)) >>> 1;\r\n    return isZeroSequence(word)\r\n           ? (ConciseSetUtils.ALL_ZEROS_LITERAL | literal)\r\n           : (ConciseSetUtils.ALL_ONES_LITERAL & ~literal);\r\n  }", "public String getElementNameFromMessageName(TDefinitions descriptionType, TParam message)\n    {\n        QName qName = message.getMessage();\n        String name = qName.getLocalPart();\n        for (TDocumented nextElement : descriptionType.getAnyTopLevelOptionalElement())\n        {\n            // Create the service type\n            if (nextElement instanceof TMessage)\n            {\n                String msgName = ((TMessage)nextElement).getName();\n                for (TPart part : ((TMessage)nextElement).getPart())\n                {\n                    if (name.equals(part.getName()))\n                    {\n                        return part.getElement().getLocalPart();\n                    }\n                }\n            }\n        }\n        return null;\n    }", "boolean clear ( ) ;", "\tpublic void removeDisplayName() {\n\t\tm_strName = null;\n\t}\n", "public static boolean deleteConflict ( long id , long globalId ) { String [ ] proj = { _ID } ; String sel = GLOBAL_ID + STR_ + _ID + STR_ ; String [ ] args = Elements . toStrings ( globalId , id ) ; long otherId = Cursors . firstLong ( cr ( ) . query ( CO", "public static Injector createInjector(Stage stage,Module... modules){\n  return createInjector(stage,Arrays.asList(modules));\n}\n", "public IPsecStatus checkStatus(){\n  log.info(\"Checking ipsec status ...\");\n  IPsecStatus status=new IPsecStatus();\n  String vdcConfigVersion=loadVdcConfigVersionFromZK();\n  status.setVersion(vdcConfigVersion);\n  String ipsecKeyUpdatedTime=ipsecConfig.getIpsecKeyUpdatedTime();\n  String ipsecStatus=ipsecConfig.getIpsecStatus();\n  if (ipsecStatus != null && ipsecStatus.equals(STATUS_DISABLED)) {\n    status.setStatus(ipsecStatus);\n  }\n else {\n    List<String> disconnectedNodes=checkIPsecStatus();\n    if (CollectionUtils.isEmpty(disconnectedNodes)) {\n      status.setStatus(STATUS_GOOD);\n    }\n else {\n      status.setStatus(STATUS_DEGRADED);\n      status.setDisconnectedNodes(disconnectedNodes);\n    }\n    if (ipsecKeyUpdatedTime == null) {\n      ipsecKeyUpdatedTime=vdcConfigVersion;\n    }\n    status.setUpdatedTime(ipsecKeyUpdatedTime);\n  }\n  return status;\n}\n", "public boolean isExistingCommand(){\n  return (!name.equals(CommandTagHandle.CMD_UNKNOWN));\n}\n", "private <N, S extends State, SV, SEV> Tuple2<ColumnFamilyHandle, RegisteredKeyValueStateBackendMetaInfo<N, SV>> tryRegisterKvStateInformation(\n\t\tStateDescriptor<S, SV> stateDesc,\n\t\tTypeSerializer<N> namespaceSerializer,\n\t\t@Nonnull StateSnapshotTransformFactory<SEV> snapshotTransformFactory) throws Exception {\n\n\t\tRocksDbKvStateInfo oldStateInfo = kvStateInformation.get(stateDesc.getName());\n\n\t\tTypeSerializer<SV> stateSerializer = stateDesc.getSerializer();\n\n\t\tRocksDbKvStateInfo newRocksStateInfo;\n\t\tRegisteredKeyValueStateBackendMetaInfo<N, SV> newMetaInfo;\n\t\tif (oldStateInfo != null) {\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tRegisteredKeyValueStateBackendMetaInfo<N, SV> castedMetaInfo =\n\t\t\t\t(RegisteredKeyValueStateBackendMetaInfo<N, SV>) oldStateInfo.metaInfo;\n\n\t\t\tnewMetaInfo = updateRestoredStateMetaInfo(\n\t\t\t\tTuple2.of(oldStateInfo.columnFamilyHandle, castedMetaInfo),\n\t\t\t\tstateDesc,\n\t\t\t\tnamespaceSerializer,\n\t\t\t\tstateSerializer);\n\n\t\t\tnewRocksStateInfo = new RocksDbKvStateInfo(oldStateInfo.columnFamilyHandle, newMetaInfo);\n\t\t\tkvStateInformation.put(stateDesc.getName(), newRocksStateInfo);\n\t\t} else {\n\t\t\tnewMetaInfo = new RegisteredKeyValueStateBackendMetaInfo<>(\n\t\t\t\tstateDesc.getType(),\n\t\t\t\tstateDesc.getName(),\n\t\t\t\tnamespaceSerializer,\n\t\t\t\tstateSerializer,\n\t\t\t\tStateSnapshotTransformFactory.noTransform());\n\n\t\t\tnewRocksStateInfo = RocksDBOperationUtils.createStateInfo(\n\t\t\t\tnewMetaInfo, db, columnFamilyOptionsFactory, ttlCompactFiltersManager);\n\t\t\tRocksDBOperationUtils.registerKvStateInformation(this.kvStateInformation, this.nativeMetricMonitor,\n\t\t\t\tstateDesc.getName(), newRocksStateInfo);\n\t\t}\n\n\t\tStateSnapshotTransformFactory<SV> wrappedSnapshotTransformFactory = wrapStateSnapshotTransformFactory(\n\t\t\tstateDesc, snapshotTransformFactory, newMetaInfo.getStateSerializer());\n\t\tnewMetaInfo.updateSnapshotTransformFactory(wrappedSnapshotTransformFactory);\n\n\t\tttlCompactFiltersManager.configCompactFilter(stateDesc, newMetaInfo.getStateSerializer());\n\n\t\treturn Tuple2.of(newRocksStateInfo.columnFamilyHandle, newMetaInfo);\n\t}", "void postDelayed ( Runnable runnable , long delayMs ) ;", "public void start ( ) throws IOException , StunException { sock = new IceUdpSocketWrapper ( new SafeCloseDatagramSocket ( localAddress ) ) ; stunStack . addSocket ( sock ) ; requestSender = new BlockingRequestSender ( stunStack , localAddress ) ; started ", "    public void setCn3DGLMatrix_m9(java.lang.String cn3DGLMatrix_m9) {\n        this.cn3DGLMatrix_m9 = cn3DGLMatrix_m9;\n    }\n", "public synchronized void stop() {\n        try {\n            this.kill();\n        } finally {\n            this.killed = false;\n            this.restartCondition.setUseless(false);\n            this.restartCondition.setActive(false);\n        }\n\n    }", "protected void unsubscribe ( Subscription subscription ) { if ( subscription != null && ! subscription . isUnsubscribed ( ) ) subscription . unsubscribe ( ) ; }", "    private void resetCommitmentInventory(){\n        int currentDate = getCurrentDate();\n        ComponentCatalog catalog = getComponentCatalog();\n            \n        for(int d = Math.max(0, currentDate - 4); d < currentDate + 14; d++) {\n                if(d >= gameDuration) break;\n                reservedCapacity[d] = 0;\n                \n                commitments[d] = new InventoryStatus();\n        }\n    }\n", "protected Object createElementInfo() {\n\treturn new ClassFileInfo();\n}\n", "public void zoomOut(int x,int y){\n  double rangeX=Math.abs(pageBox.getMaxX() - pageBox.getMinX());\n  double rangeY=Math.abs(pageBox.getMaxY() - pageBox.getMinY());\n  pageBox.setMinX(x - (rangeX * 1.15) / 2.0);\n  pageBox.setMinY(y - (rangeY * 1.15) / 2.0);\n  pageBox.setMaxX(x + (rangeX * 1.15) / 2.0);\n  pageBox.setMaxY(y + (rangeY * 1.15) / 2.0);\n}\n", "protected void addConversionErrorMessage ( FacesContext context , UIComponent component , ConverterException ce ) { String converterMessageString = null ; FacesMessage message ; UIInput input ; if ( component instanceof UIInput ) { input = ( UIInput ) com", "    public void clearCache() {\n        if (m_documentsCache == null) {\n            lf.severe(\"Document cache is null\", className, \"clearCache\");\n            return;\n        }\n        m_documentsCache.clear();\n        m_documentsCache = new Hashtable<String, BizViewCache>(m_initialCacheSize);\n    }\n", "\tprotected void generateExtensions(XmlWriter w, ExtensionProfile extProfile) throws IOException {\n\t\t\n\t\tfor (Extension ext : nonRepeatingExtensionMap.values()) {\n\t\t\text.generate(w, extProfile);\n\t\t}\n\t\t\n\t\tfor (List<Extension> extList : repeatingExtensionMap.values()) {\n\t\t\tw.startRepeatingElement();\n\t\t\tfor (Extension ext : extList) {\n\t\t\t\text.generate(w, extProfile);\n\t\t\t}\n\t\t\tw.endRepeatingElement();\n\t\t}\n\t\t\n\t\tif (xmlBlob != null) {\n\t\t\tw.innerXml(xmlBlob.getBlob());\n\t\t}\n\t}\n", "public EnclosingClosure popEnclosingClosure ( ) { return enclosingClosures . removeFirst ( ) ; }", "public CmsContainerPageElementPanel replaceContainerElement(\n        CmsContainerPageElementPanel containerElement,\n        CmsContainerElementData elementData)\n    throws Exception {\n\n        I_CmsDropContainer parentContainer = containerElement.getParentTarget();\n        String containerId = parentContainer.getContainerId();\n        CmsContainerPageElementPanel replacer = null;\n        String elementContent = elementData.getContents().get(containerId);\n        if ((elementContent != null) && (elementContent.trim().length() > 0)) {\n            replacer = getContainerpageUtil().createElement(elementData, parentContainer, false);\n\n            if (containerElement.isNew()) {\n                // if replacing element data has the same structure id, keep the 'new' state by setting the new type property\n                // this should only be the case when editing settings of a new element that has not been created in the VFS yet\n                String id = getServerId(containerElement.getId());\n                if (elementData.getClientId().startsWith(id)) {\n                    replacer.setNewType(containerElement.getNewType());\n                }\n            }\n            replacer.setCreateNew(containerElement.isCreateNew());\n            // replacer.setModelGroup(containerElement.isModelGroup());\n            if (isGroupcontainerEditing() && (containerElement.getInheritanceInfo() != null)) {\n                // in case of inheritance container editing, keep the inheritance info\n                replacer.setInheritanceInfo(containerElement.getInheritanceInfo());\n                // set the proper element options\n                CmsInheritanceContainerEditor.getInstance().setOptionBar(replacer);\n            }\n            parentContainer.insert(replacer, parentContainer.getWidgetIndex(containerElement));\n            containerElement.removeFromParent();\n            initializeSubContainers(replacer);\n        }\n        cleanUpContainers();\n        return replacer;\n    }", "\tprotected void addRefRequirementPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_RequirementReferenceExpression_refRequirement_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_RequirementReferenceExpression_refRequirement_feature\", \"_UI_RequirementReferenceExpression_type\"),\n\t\t\t\t RequirementsPackage.Literals.REQUIREMENT_REFERENCE_EXPRESSION__REF_REQUIREMENT,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t true,\n\t\t\t\t null,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public Field getFieldByIndex(int fieldIndex)\n    {\n        checkElementIndex(fieldIndex, allFields.size(), \"fieldIndex\");\n        return allFields.get(fieldIndex);\n    }", "\tpublic void drawCircle(Graphics g, double []position, double radius){\n\t\tdouble []screenPosition = new double[2];\n\t\tconverter.worldToScreen(position, screenPosition);\n    \tdouble []radiusXY = new double[2]; \n    \tconverter.lengthWorldToScreen(new double[]{radius, radius}, radiusXY);\n  \t\n    \tg.drawOval((int)(screenPosition[0] - radiusXY[0]), (int)(screenPosition[1] - radiusXY[1]), (int)(2*radiusXY[0]), (int)(2*radiusXY[1]));\n\t}\n", "    protected Action getCutAction() {\n\tif (cutAction == null)\n\t    cutAction = makeCutAction();\n\treturn cutAction;\n    }\n", "INaviView createView ( String name , String description ) ;", "private int handleSingleNalUnitPacket(Buffer input,Buffer output){\n  byte[] bufferData=(byte[])input.getData();\n  int bufferDataLength=bufferData.length;\n  byte[] data=new byte[bufferDataLength];\n  System.arraycopy(bufferData,0,data,0,bufferDataLength);\n  output.setData(data);\n  output.setLength(data.length);\n  output.setOffset(0);\n  output.setTimestamp(input.getTimestamp());\n  output.setSequenceNumber(input.getSequenceNumber());\n  output.setVideoOrientation(input.getVideoOrientation());\n  output.setFormat(input.getFormat());\n  output.setFlags(input.getFlags());\n  return BUFFER_PROCESSED_OK;\n}\n", "private boolean _shouldEvaluateAlert(Alert alert, BigInteger alertId) {\n\t\tif (alert == null) {\n\t\t\t_logger.warn(MessageFormat.format(\"Could not find alert ID {0}\", alertId));\n\t\t\treturn false;\n\t\t}\n\t\tif(!alert.isEnabled()) {\n\t\t\t_logger.warn(MessageFormat.format(\"Alert {0} has been disabled. Will not evaluate.\", alert.getId().intValue()));\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}", "public String process(Item item) throws ProcessException {\n  int count=0;\n  Item ss=item.getItemAs(Relation.SYLLABLE);\n  Item firstSyllable=FIRST_SYLLABLE_PATH.findItem(item);\n  for (Item p=ss; p != null; p=p.getPrevious(), count++) {\n    if (p.equalsShared(firstSyllable)) {\n      break;\n    }\n  }\n  return Integer.toString(rail(count));\n}\n", "\tpublic String getScoreType() {\n\t\tIMarkerNote parent = getParent();\n\t\tif (parent instanceof SectionMarkerNote) {\n\t\t\treturn ((SectionMarkerNote)parent).getScoreType();\n\t\t}\n\t\treturn \"\";\n\t}\n", "\tprivate void stop(Time time) {\n\t\tLinearMove m = getMove();\n\t\tTime t = currentTime();\n\t\tsetMove(new LinearMove(m.readSpaceVec(t), t, m.readTarget(),\n\t\t\t\tSpeed.FIXED));\n\t\tAbstractSimKernel.getInstance().calendar().push(\n\t\t\t\tnew StopMovementEvent(this, time));\n\t}\n", "public Observable<Page<DscNodeReportInner>> listByNodeNextAsync(final String nextPageLink) {\n        return listByNodeNextWithServiceResponseAsync(nextPageLink)\n            .map(new Func1<ServiceResponse<Page<DscNodeReportInner>>, Page<DscNodeReportInner>>() {\n                @Override\n                public Page<DscNodeReportInner> call(ServiceResponse<Page<DscNodeReportInner>> response) {\n                    return response.body();\n                }\n            });\n    }", "@Override public void onCreate(Bundle icicle){\n  super.onCreate(icicle);\n  setContentView(R.layout.main);\n  File path=Environment.getDataDirectory();\n  StatFs stat=new StatFs(path.getPath());\n  int totalBlocks=stat.getBlockCount();\n  mBlockSize=(int)(stat.getBlockSize());\n  TextView startSizeTextView=(TextView)findViewById(R.id.totalsize);\n  startSizeTextView.setText(Long.toString((totalBlocks * mBlockSize) / BYTE_SIZE));\n  Button button=(Button)findViewById(R.id.button_run);\n  button.setOnClickListener(mStartListener);\n}\n", "public void printStackTrace(java.io.PrintStream s){\n  if (s == null)   s=System.err;\n  try {\n    super.printStackTrace(s);\n  }\n catch (  Exception e) {\n  }\n  Throwable exception=m_exception;\n  for (int i=0; (i < 10) && (null != exception); i++) {\n    s.println(\"---------\");\n    exception.printStackTrace(s);\n    if (exception instanceof TransformerException) {\n      TransformerException se=(TransformerException)exception;\n      Throwable prev=exception;\n      exception=se.getException();\n      if (prev == exception)       break;\n    }\n else {\n      exception=null;\n    }\n  }\n}\n", "public void setRev(java.lang.String rev) {\n        getStateHelper().put(PropertyKeys.rev, rev);\n        handleAttribute(\"rev\", rev);\n    }", "public ResumeParser ( final ClientReader clientReader ) { super ( clientReader , DebugCommandType . RESP_RESUME_SUCCESS ) ; }", "protected void assertBugsCount ( int expected , IProject project ) throws CoreException { SortedBugCollection bugs = FindbugsPlugin . getBugCollection ( project , null , BOOL_ ) ; assertEquals ( expected , bugs . getCollection ( ) . size ( ) ) ; }", "public StringReader(String s){\n  this.str=s;\n  this.length=s.length();\n}\n", "private Object sanitize(final Object o) {\n        if (!(o instanceof String)) {\n            return o;\n        } else {\n            // Use Python3 way of escaping characters: https://docs.python.org/3.3/howto/unicode.html#the-string-type\n            return ((String) o).replace(\"\\n\", \"\\\\N{LINE FEED}\")\n                               .replace(\"|\", \"\\\\N{VERTICAL LINE}\");\n        }\n    }", "public void generate(Editor_Model model){\n\t\tsuper.generate(model);\n\t\tgetStandardProperties(model);\n\t\tgenerateMain();\n\t\tgetSpecificProperties(model);\n\t\tgenerateStandardField();\n\t\tgenerateStandardConstructor();\n\t\tgenerateStandardInstanceBasicHead();\n\t\tgene", "public static void disposeCursors ( ) { for ( Cursor cursor : m_idToCursorMap . values ( ) ) { cursor . dispose ( ) ; } m_idToCursorMap . clear ( ) ; }", "public static void highlightNode ( final Node node , final boolean state ) { final NodeRealizer r = ( ( Graph2D ) node . getGraph ( ) ) . getRealizer ( node ) ; if ( r == null ) { return ; } if ( state ) { if ( r . getLineType ( ) == LineType . LINE_2 ) {", "void shutdown ( GSEventRegistration registration ) ;", "    public MParameter buildParameter(MBehavioralFeature oper, MParameterDirectionKind directionKind) {\n        MParameter res = buildParameter(oper);\n        if (directionKind != null) {\n        \tres.setKind(directionKind);\n        }\n        return res;\n    }\n", "    public void filterChanged() {\n        if(busTable!=null) {\n            busTable.filterChanged();\n        }\n    }\n", "private void ensureConsistencyAfterTypeUpdate ( final ImmutableSet < BaseType > affectedTypes , final Set < BaseType > inconsistentTypes , final Map < BaseType , Integer > oldSizes ) throws CouldntSaveDataException { while ( ! inconsistentTypes . isEmpty ( ) ) { final BaseType baseType = inconsistentTypes . iterator ( ) . next ( ) ; if ( baseType . getCategory ( ) == BaseTypeCategory . STRUCT ) { adjustMemberOffsets ( baseType , inconsistentTypes , oldSizes , affectedTypes ) ; } else { inconsistentTypes . remove ( baseType ) ; } } }", "public boolean isTop ( ) { return ! isValid && isTop ; }", "public void unfoldWithoutAnimation ( ) { if ( mIsFolded && ! mIsAnimating ) { mViewGroupCover . setVisibility ( GONE ) ; mViewGroupDetail . setVisibility ( VISIBLE ) ; clearImageView ( mImageViewAbove ) ; clearImageView ( mImageViewBelow ) ; if ( Foldable", "public abstract void execute ( NotInNode exp , ISpaceProxy space , Transaction txn , int readModifier , int max ) throws SQLException ;", "\tpublic void setFee (java.lang.String fee) {\n\t\tthis.fee = fee;\n\t}\n", "public void writeFiles ( IFile tlaFile , IFile cfgFile , IProgressMonitor monitor ) throws CoreException { tlaBuffer . append ( ResourceHelper . getModuleClosingTag ( ) ) ; cfgBuffer . append ( ResourceHelper . getConfigClosingTag ( ) ) ; ResourceHelper . replaceContent ( tlaFile , tlaBuffer , monitor ) ; ResourceHelper . replaceContent ( cfgFile , cfgBuffer , monitor ) ; }", "public String toHexString(byte[] block){\n  StringBuffer buf=new StringBuffer();\n  int len=block.length;\n  for (int i=0; i < len; i++) {\n    bytetohex((byte)(block[i] + 128),buf);\n    if (i < len - 1) {\n      buf.append(\":\");\n    }\n  }\n  return buf.toString();\n}\n", "  public Constraint lexeq(IntVar[] v1, IntVar[] v2) {\n     if (v1.length != v2.length)\n        throw new Error(\"the vectors of variables should be of same size for lex \" + v1.length + \" and \" + v2.length);\n     return createLex(v1,v2,false);\n  }\n", "public int remoteHashCode(){\n  return ref.hashCode();\n}\n", "public WatchedObject addResponseWatch ( SocketChannel sock , ConnectionResource client ) { return addWatch ( new ResponseWatchedObject ( this , sock , client ) ) ; }", "private static <T>void displayPropertyValues(ConsoleApplication app,PropertyDefinition<T> pd,Collection<T> values){\n  TableBuilder builder=new TableBuilder();\n  PropertyValuePrinter valuePrinter=new PropertyValuePrinter(null,null,false);\n  int sz=values.size();\n  boolean useMultipleColumns=(sz >= MULTI_COLUMN_THRESHOLD);\n  int rows=sz;\n  if (useMultipleColumns) {\n    rows/=2;\n    rows+=sz % 2;\n  }\n  List<T> vl=new ArrayList<>(values);\n  for (int i=0, j=rows; i < rows; i++, j++) {\n    builder.startRow();\n    builder.appendCell(\"*)\");\n    builder.appendCell(valuePrinter.print(pd,vl.get(i)));\n    if (useMultipleColumns && j < sz) {\n      builder.appendCell();\n      builder.appendCell(\"*)\");\n      builder.appendCell(valuePrinter.print(pd,vl.get(j)));\n    }\n  }\n  TextTablePrinter printer=new TextTablePrinter(app.getErrorStream());\n  printer.setDisplayHeadings(false);\n  printer.setIndentWidth(4);\n  printer.setColumnWidth(1,0);\n  if (useMultipleColumns) {\n    printer.setColumnWidth(2,2);\n    printer.setColumnWidth(4,0);\n  }\n  builder.print(printer);\n}\n", "public WordNumberCollectorBundle addNumberList(String key,\n            List<Number> numberList) {\n        numberCollector.addAll(key, numberList);\n        return this;\n    }", "public void logDebug ( String message , Throwable cause ) { getLog ( ) . log ( new Status ( IStatus . INFO , pluginId , DEBUG_SEVERITY , message , cause ) ) ; }", "public void setContentHandler(ContentHandler contentHandler) {\n        if (contentHandler == null) throw new NullPointerException();\n        if (contentHandler != defaultContentHandler\n                && this.contentHandler == defaultContentHandler) {\n            defaultContentHandler.close();\n        }\n    }", "public static boolean isFileValid(@Nullable File file){\n  return file != null && file.exists();\n}\n", "    public boolean equals(EPPTransfer t) {\n        return(clTRID.equals(t.getClTRID()));\n    }\n", "private void obtainCardViewBackgroundColor() {\n        int color;\n\n        try {\n            color = ThemeUtil.getColor(this, R.attr.cardViewBackgroundColor);\n        } catch (NotFoundException e) {\n            color = ContextCompat.getColor(this, R.color.card_view_background_light);\n        }\n\n        setCardViewBackgroundColor(color);\n    }", "public static CmsXmlContentDefinition unmarshal(String schemaLocation, EntityResolver resolver)\n    throws CmsXmlException, SAXException, IOException {\n\n        schemaLocation = translateSchema(schemaLocation);\n        CmsXmlContentDefinition result = getCachedContentDefinition(schemaLocation, resolver);\n        if (result == null) {\n            // content definition was not found in the cache, unmarshal the XML document\n            InputSource source = resolver.resolveEntity(null, schemaLocation);\n            result = unmarshalInternal(CmsXmlUtils.unmarshalHelper(source, resolver), schemaLocation, resolver);\n        }\n        return result;\n    }", "public Builder reconnectionDelay ( Duration duration ) { this . reconnectionDelay = duration ; return this ; }", "\tprivate Object readResolve() throws ObjectStreamException {\n\t\tXilinxDaisyChainDetectionMerger instance = _instance;\n\t\tif (instance == null) {\n\t\t\tinstance = getInstance();\n\t\t}\n\t\treturn instance;\n\t}\n", "    static public Point3D midPointWithPoints(Point3D pt11, Point3D pt12, Point3D pt21, Point3D pt22) {\n        return midpointWithDir(\n                pt11,\n                pt12.minus(pt11),\n                pt21,\n                pt22.minus(pt21) );\n    }\n", "public FullVisitContext ( FacesContext facesContext ) { this ( facesContext , null ) ; }", "public void marshall(PropertyGroup propertyGroup, ProtocolMarshaller protocolMarshaller) {\n\n        if (propertyGroup == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            pro", "public static String[] split(String str, String separator, boolean trim) {\n        if (str == null) {\n            return null;\n        }\n\n        char sep = separator.charAt(0);\n\n        ArrayList<String> strList = new ArrayList<String>();\n        StringBuilder split = new StringBuilder();\n        int index = 0;\n        while ((index = StringUtils.findNext(str, sep, StringUtils.ESCAPE_CHAR, index, split)) >= 0) {\n            ++index; // move over the separator for next search\n            strList.add(split.toString());\n            split.setLength(0); // reset the buffer\n        }\n\n        strList.add(split.toString());\n        // remove trailing empty split(s)\n        if (trim) {\n            int last = strList.size(); // last split\n            while (--last>=0 && \"\".equals(strList.get(last))) {\n                strList.remove(last);\n            }\n        }\n\n        return strList.toArray(new String[strList.size()]);\n    }", "@Indexable(type = IndexableType.DELETE)\n\t@Override\n\tpublic CPRule deleteCPRule(CPRule cpRule) throws PortalException {\n\t\treturn cpRulePersistence.remove(cpRule);\n\t}", "public void disableEL ( ) { this . supportsEL = BOOL_ ; }", "  public boolean isRunning() {\n\t  return finished;\n  }\n", "public static < T1 , T2 , R > Promise < R > join ( Promise < T1 > p1 , Promise < T2 > p2 , final Func2 < T1 , T2 , R > joinFunction ) { return new Promise < R > ( Observable . zip ( p1 . observable , p2 . observable , joinFunction ) ) ; }", "default MethodDeclaration asMethod ( ) { throw new UnsupportedOperationException ( String . format ( STR_ , this ) ) ; }", "public float onHurt ( EntityLivingBase mob , DamageSource source , float amount ) { if ( nextMod != null ) { amount = nextMod . onHurt ( mob , source , amount ) ; } else if ( source . getEntity ( ) != null ) { if ( source . getEntity ( ) . worldObj . isRemote && source . getEntity ( ) instanceof EntityPlayer ) { InfernalMobsCore . instance ( ) . sendHealthRequestPacket ( mob ) ; } } return amount ; }", "    public void saveAsImage( File file, String fileformat ) throws IOException {\n        // draw the viewer to an image\n        // create the image\n        BufferedImage bi = new BufferedImage( getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB  );\n        // get the graphics\n        Graphics g = bi.getGraphics();\n        // set clipbounds\n        g.setClip( 0, 0, getWidth(), getHeight() );\n        // draw the org.modama.viewer to the image\n        paint( g );\n        // write the file\n        ImageIO.write( bi, fileformat, file );\n    }\n", "public boolean canAddPatchSet ( ReviewDb db ) throws OrmException { if ( ! getRefControl ( ) . canUpload ( ) || isPatchSetLocked ( db ) || ! isPatchVisible ( patchSetUtil . current ( db , notes ) , db ) ) { return BOOL_ ; } if ( isOwner ( ) ) { return BOO", "    private void initialize() {\n        setName(\"JMouseComboBox\");\n        for (int i = 0; i < getComponentCount(); i++) {\n            getComponent(i).addMouseListener(this);\n        }\n    }\n", "void initInputFrame ( final ClassWriter cw , final int access , final Type [ ] args , final int maxLocals ) { inputLocals = new int [ maxLocals ] ; inputStack = new int [ NUM_ ] ; int i = NUM_ ; if ( ( access & Opcodes . ACC_STATIC ) == NUM_ ) { if ( ( access & MethodWriter . ACC_CONSTRUCTOR ) == NUM_ ) { inputLocals [ i ++ ] = OBJECT | cw . addType ( cw . thisName ) ; } else { inputLocals [ i ++ ] = UNINITIALIZED_THIS ; } } for ( int j = NUM_ ; j < args . length ; ++ j ) { int t = type ( cw , args [ j ] . getDescriptor ( ) ) ; inputLocals [ i ++ ] = t ; if ( t == LONG || t == DOUBLE ) { inputLocals [ i ++ ] = TOP ; } } while ( i < maxLocals ) { inputLocals [ i ++ ] = TOP ; } }", "default InterfaceDeclaration asInterface ( ) { throw new UnsupportedOperationException ( String . format ( STR_ , this ) ) ; }", "    private void queueSingleLinesTo(PrintWriter writer, Iterator<?> iterator) {\n        Object obj;\n        WorkQueue q;\n        boolean legendWritten = false;\n        while( iterator.hasNext()) {\n            obj = iterator.next();\n            if (obj == ", "\tpublic int getPropertyAsInteger(String propertyName) {\n\t\tpropertyName = preProcessPropertyName(propertyName);\n\t\tif (configSubset != null) {\n\t\t\treturn configSubset.getInt(propertyName);\n\t\t} else {\n\t\t\treturn compositeConfig.getInt(propertyName);\n\t\t}\n\t}\n", "    public void setCornerRadius(float cornerRadius) {\n        if (cornerRadius >= 0) {\n        \tif (cornerRadius != this.cornerRadius) {\n\t            this.cornerRadius = cornerRadius;\n\t            pointsDirty = true;\n        \t}\n        }\n    }\n", "public Iterator < NameValuePair > iterator ( ) { return nameValuePairList . iterator ( ) ; }", "private void handleColorButtonClick(int idx){\n  listener.onColorButtonClick(idx);\n}\n", "public static boolean readBoolean(){\n  String s=readString();\n  if (s.equalsIgnoreCase(\"true\"))   return true;\n  if (s.equalsIgnoreCase(\"false\"))   return false;\n  if (s.equals(\"1\"))   return true;\n  if (s.equals(\"0\"))   return false;\n  throw new InputMismatchException();\n}\n", "    public Short first() {\n        if (size() == 0) {\n            return null;\n        }\n        return get(0);\n    }\n", "public synchronized void update(double sample){\n  long now=System.currentTimeMillis();\n  if (lastMillis == 0) {\n    average=sample;\n    lastMillis=now;\n    return;\n  }\n  long deltaTime=now - lastMillis;\n  double coeff=Math.exp(-1.0 * ((double)deltaTime / windowMillis));\n  average=(1.0 - coeff) * sample + coeff * average;\n  lastMillis=now;\n}\n", "    public Vector3D closestPoint(final Line line) {\n\n        final double cos = direction.dotProduct(line.direction);\n        final double n = 1 - cos * cos;\n        if (n < MathUtils.EPSILON) {\n            // the lines are parallel\n            return zer", "public static void srs_print_bytes(String tag,ByteBuffer bb,int size){\n  StringBuilder sb=new StringBuilder();\n  int i=0;\n  int bytes_in_line=16;\n  int max=bb.remaining();\n  for (i=0; i < size && i < max; i++) {\n    sb.append(String.format(\"0x%s \",Integer.toHexString(bb.get(i) & 0xFF)));\n    if (((i + 1) % bytes_in_line) == 0) {\n      Log.i(tag,String.format(\"%03d-%03d: %s\",i / bytes_in_line * bytes_in_line,i,sb.toString()));\n      sb=new StringBuilder();\n    }\n  }\n  if (sb.length() > 0) {\n    Log.i(tag,String.format(\"%03d-%03d: %s\",size / bytes_in_line * bytes_in_line,i - 1,sb.toString()));\n  }\n}\n", "public Dep newDep(Term from, Term to, String rfunc) {\n    Dep newDep = new Dep(from, to, rfunc);\n    annotationContainer.add(newDep, Layer.DEPS, AnnotationType.DEP);\n    return newDep;\n}", "    public void deletePublishList(CmsDbContext dbc, CmsUUID publishHistoryId) throws CmsException {\n\n        m_projectDriver.deletePublishList(dbc, publishHistoryId);\n    }\n", "public void clear(){\n  dataDimensionItems.clear();\n  periods.clear();\n  relatives=null;\n  organisationUnits.clear();\n  dataElementGroups.clear();\n  organisationUnitGroups.clear();\n  organisationUnitLevels.clear();\n  categoryDimensions.clear();\n  categoryOptionGroups.clear();\n  attributeDimensions.clear();\n  dataElementDimensions.clear();\n  programIndicatorDimensions.clear();\n  userOrganisationUnit=false;\n  userOrganisationUnitChildren=false;\n  userOrganisationUnitGrandChildren=false;\n  itemOrganisationUnitGroups.clear();\n}\n", "\tpublic Operator getOperator(int index) {\n\t\trangeCheck(index);\n\t\tWhereEntry entry = (WhereEntry)list.get(index);\n\t\treturn entry.getOperator();\n\t}\n", "public static String buildStreamsString(Collection<String> set){\n  String result=\"\";\n  String sep=\"\";\n  for (  String channel : set) {\n    result+=sep + channel.replace(\"#\",\"\");\n    sep=\", \";\n  }\n  return result;\n}\n", "public static String encodeBase64(final String data) {\n        return Base64.encodeBase64String(data.getBytes(StandardCharsets.UTF_8));\n    }", "\tpublic void writeToFile(String file) {\n\t\t\tLinePrinter out = new LinePrinter(file);\n\t\t\tString line;\n\n\t\t\t// loop through the file, one line at a time\n\t\t\tdouble[] r = new double[7];\n\t\t\tfor(int i=0; i<traj.size(); i++){\n\t\t\t    r = traj.get(i);\n\t\t\t    out.println(\"\"+r[0]+\"\\t\"+r[1]+\"\\t\"+r[2]+\"\\t\"+r[3]+\"\\t\"+r[4]+\"\\t\"+r[5]+\"\\t\"+r[6]);\n\t\t\t}\n\t\t\tout.close();\n\t\t\tSystem.err.println(\"Error opening:\" + file);\n\t\t\treturn;\n\t}\n", "public MixedDataBox(List<Node> variables,int numRows){\n  this.variables=variables;\n  this.numRows=numRows;\n  this.continuousData=new double[variables.size()][];\n  this.discreteData=new int[variables.size()][];\n  for (int j=0; j < variables.size(); j++) {", "public List<FeatureTileLink> queryForFeatureTableName(\n\t\t\tString featureTableName) {\n\t\tList<FeatureTileLink> results = null;\n\t\ttry {\n\t\t\tresults = queryForEq(FeatureTileLink.COLUMN_FEATURE_TABLE_NAME,\n\t\t\t\t\tfeatureTableName);\n\t\t} catch (SQLException e) {\n\t\t\tthrow new GeoPackageException(\n\t\t\t\t\t\"Failed to query for Feature Tile Link objects by Feature Table Name: \"\n\t\t\t\t\t\t\t+ featureTableName);\n\t\t}\n\t\treturn results;\n\t}", "public static String replace ( String inString , String oldPattern , String newPattern ) { if ( ! hasLength ( inString ) || ! hasLength ( oldPattern ) || newPattern == null ) { return inString ; } StringBuilder sb = new StringBuilder ( ) ; int pos = NUM_ ", "public MethodDescriptor[] getTeaContextMethodDescriptors(\n                                                 Class<?> contextClass,\n                                                 boolean specifiedClassOnly) {\n\n        Vector<MethodDescriptor> v = new Vector<MethodDescriptor>();\n\n        MethodDescriptor[] methodDescriptors = null;\n        try {                \n            BeanInfo beanInfo = getBeanInfo(contextClass);\n            methodDescriptors = beanInfo.getMethodDescriptors();\n        }\n        catch (Throwable e) {\n            e.printStackTrace();            \n        }\n\n        if (methodDescriptors != null) {\n            Method[] methods = contextClass.getMethods();\n            if (methods.length > methodDescriptors.length) {\n                methodDescriptors = addMissingContextMethodDescriptors(\n                    methods, methodDescriptors);\n            }\n\n            for (int i = 0; i < methodDescriptors.length; i++) {\n            \n                MethodDescriptor md = methodDescriptors[i];\n                Class<?> declaringClass = md.getMethod().getDeclaringClass();\n\n                if (declaringClass != Object.class &&\n                    !md.isHidden() && \n                    (!specifiedClassOnly || declaringClass == contextClass)) {\n                    \n                    v.addElement(md);\n                }\n            }            \n        }\n        \n        methodDescriptors = new MethodDescriptor[v.size()];\n        v.copyInto(methodDescriptors);\n        \n        sortMethodDescriptors(methodDescriptors);\n\n        return methodDescriptors;\n    }", "public int calculatePointOffsetDistance(Point point) {\n        int right = left + width;\n        int bottom = top + height;\n        int pointLeft = point.getLeft();\n        int pointTop = point.getTop();\n\n        if (contains(point)) {\n            return max(top - pointTop, pointTop - bottom, left - pointLeft, pointLeft - right);\n        } else if (isQuadrant1(point)) {\n            return max(abs(left - pointLeft), abs(top - pointTop));\n        } else if (isQuadrant2(point)) {\n            return abs(top - pointTop);\n        } else if (isQuadrant3(point)) {\n            return max(abs(pointLeft - right), abs(top - pointTop));\n        } else if (isQuadrant4(point)) {\n            return abs(pointLeft - right);\n        } else if (isQuadrant5(point)) {\n            return max(abs(pointLeft - right), abs(pointTop - bottom));\n        } else if (isQuadrant6(point)) {\n            return abs(pointTop - bottom);\n        } else if (isQuadrant7(point)) {\n            return max(abs(left - pointLeft), abs(pointTop - bottom));\n        } else {\n            return abs(left - pointLeft);\n        }\n    }", "@Override protected synchronized void onMeasure(int widthMeasureSpec,int heightMeasureSpec){\n  int width=200;\n  if (MeasureSpec.UNSPECIFIED != MeasureSpec.getMode(widthMeasureSpec)) {\n    width=MeasureSpec.getSize(widthMeasureSpec);\n  }\n  int height=Utils.convertDPtoPixels(getContext(),HEIGHT_IN_DP);\n  if (MeasureSpec.UNSPECIFIED != MeasureSpec.getMode(heightMeasureSpec)) {\n    height=Math.min(height,MeasureSpec.getSize(heightMeasureSpec));\n  }\n  setMeasuredDimension(width,height);\n}\n", "private boolean isDoNotMonitor(CallEvent event){\n  Alias to=event.getToIDAlias();\n  if (to != null && to.hasCallPriority() && to.getCallPriority() == Priority.DO_NOT_MONITOR) {\n    return true;\n  }\n  Alias from=event.getFromIDAlias();\n  if (from != null && from.hasCallPriority() && from.getCallPriority() == Priority.DO_NOT_MONITOR) {\n    return true;\n  }\n  return false;\n}\n", "public static Statistics statisticsFor( long[] values ) {\n        int length = values.length;\n        if (length == 0) return EMPTY_STATISTICS;\n        if (length == 1) return statisticsFor(values[0]);\n        long total = 0L;\n        long max = Long.MIN_VALUE;\n        long min = Long.MAX_VALUE;\n        for (long value : values) {\n            total += value;\n            max = Math.max(max, value);\n            min = Math.min(min, value);\n        }\n        double mean = ((double)total) / length;\n        double varianceSquared = 0.0d;\n        double distance = 0.0d;\n        for (long value : values) {\n            distance = mean - value;\n            varianceSquared = varianceSquared + (distance * distance);\n        }\n        return new StatisticsImpl(length, min, max, mean, Math.sqrt(varianceSquared));\n    }", "public static Distribution guessNumberOfBins(DataSet data){\n  if (data.getSampleSize() < 20)   return new UniformDiscrete(2,data.getSampleSize() - 1);\n else   if (data.getSampleSize() >= 1000000)   return new LogUniform(50,1000);\n  int sqrt=(int)Math.sqrt(data.getSampleSize());\n  return new UniformDiscrete(Math.max(sqrt / 3,2),Math.min(sqrt * 3,data.getSampleSize() - 1));\n}\n", "\tpublic void initializeActiveClients() {\n\t\tConfigXMLParser crp = new ConfigXMLParser(\n\t\t\t\tConfigXMLParser.configFiles[0]);\n\t\tVector<Object[]> actorData = crp.getActorConfigData();\n\n\t\tint max = actorData.size();\n\t\tfor (int index = 0; index < max; index++) {\n\t\t\tObject[] object = actorData.get(index);\n\t\t\tString[] values = new String[object.length];\n\t\t\tif (object[9].toString().equals(\"true\")) {\n\t\t\t\tint max2 = object.length;\n\t\t\t\tfor (int index2 = 0; index2 < max2; index2++) {\n\t\t\t\t\tvalues[index2] = object[index2].toString();\n\t\t\t\t}\n\t\t\t\taddActiveClient(values);\n\t\t\t}\n\t\t}\n\t}\n", "public boolean isSameDay(Calendar calendar) {\n\t\tCalendar c1 = asCalendar();\n\t\treturn (c1.get(Calendar.ERA) == calendar.get(Calendar.ERA) &&\n\t\t\t\tc1.get(Calendar.YEAR) == calendar.get(Calendar.YEAR) &&\n\t\t\t\tc1.get(Calendar.DAY_OF_YEAR) == calendar.get(Calendar.DAY_OF_YEAR));\n\t}", "@VisibleForTesting protected static PlacementTask buildPatch(TaskState.TaskStage patchStage,boolean isDirect,Throwable t){\n  PlacementTask state=new PlacementTask();\n  state.taskState=new TaskState();\n  state.taskState.stage=patchStage;\n  state.taskState.isDirect=isDirect;\n  if (null != t) {\n    state.taskState.failure=Utils.toServiceErrorResponse(t);\n  }\n  return state;\n}\n", "  public void add(Condition condition) {\n    list = Lists.add(list, condition);\n  }\n", "public OutputStream decorateLogger(Run build, OutputStream logger) throws IOException, InterruptedException {\n        // this implementation is backward compatibility thunk in case subtypes only override the\n        // old signature (AbstractBuild,OutputStream)\n\n        if (build instanceof AbstractBuild) {\n            // maybe the plugin implements the old signature.\n            return decorateLogger((AbstractBuild) build, logger);\n        } else {\n            // this ConsoleLogFilter can only decorate AbstractBuild, so just pass through\n            return logger;\n        }\n    }", "\tpublic void accepts(Component component, String className) {\n\t\tassertHasDraggableBehavior(component);\n\t\tcomponent.add(new AttributeAppender(\"class\", new Model<String>(className), \" \"));\n\t\taddAcceptClass(className);\n\t}\n", "    public boolean mkdirs(UTF8 src) {\n        return mkdirs(src.toString());\n    }\n", "public static String addProtocolIfMissing(final String aUrl, final String aProtocol) {\n    if (aUrl != null && aUrl.startsWith(\"//\")) {\n      return aProtocol + aUrl;\n    }\n\n    return aUrl;\n  }", "protected void bindToProcessRegistry ( ) throws RemoteException { ProcessLogger . log ( STR_ + _procArg . getPort ( ) ) ; ProcessRegistry processRegistry = ProcessRegistry . locateRegistry ( _procArg . getPort ( ) ) ; ProcessLogger . log ( STR_ + processR", "public static AccessibilityNodeInfoCompat searchFromInOrderTraversal ( Context context , AccessibilityNodeInfoCompat root , NodeFilter filter , int direction ) { AccessibilityNodeInfoCompat currentNode = NodeFocusFinder . focusSearch ( root , direction ) ", "    private void deleteAllLevelSeries(final DAOCoreType daoCoreImpl, final BusinessType busType) throws LogicException {\n        if (daoCoreImpl == null) {\n            throw new LogicException(ERROR_PROCESS_DAO_CORE_IMPL_EMPTY);\n        } else {\n            if (busType == null) {\n                throw new LogicException(ERROR_PROCESS_BUSINESS_IMPL_EMPTY);\n            } else {\n                try {\n                    daoCoreImpl.getDAOFactory().getProfileDAO().deleteAllProfiles();\n                } catch (final PersistenceException e) {\n                    throw new LogicException(ERROR_LEVEL_SERIES_DELETEALL, e);\n                }\n            }\n        }\n    }\n", "public static XMLReader createXMLReader(boolean validating,boolean namespaceAware) throws Exception {\n  SAXParserFactory factory=SAXParserFactory.newInstance();\n  factory.setValidating(validating);\n  factory.setNamespaceAware(namespaceAware);\n  SAXParser parser=factory.newSAXParser();\n  return parser.getXMLReader();\n}\n", "public int addOrIncreaseItem(String productId,BigDecimal selectedAmount,BigDecimal quantity,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> features,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,String itemGroupNumber,String parentProductId,LocalDispatcher dispatcher) throws CartItemModifyException, ItemNotFoundException {\n  return addOrIncreaseItem(productId,selectedAmount,quantity,reservStart,reservLength,reservPersons,null,null,shipBeforeDate,shipAfterDate,features,attributes,prodCatalogId,configWrapper,itemType,itemGroupNumber,parentProductId,dispatcher);\n}\n", "public static int elementWiseStride(DataBuffer buffer) {\n        int length2 = shapeInfoLength(buffer.getInt(0));\n        return buffer.getInt(length2 - 2);\n    }", "public void adjustZoomFromMouseWheel(int rot){\n  Projection projection=getProjection();\n  if (projection == null) {\n    return;\n  }\n  setUserHasChangedScale(true);\n  Point2D minutesPnt0=projection.inverse(0,0);\n  Point2D minutesPnt1=projection.inverse(1,0);\n  double minutesPerPixel=minutesPnt1.getX() - minutesPnt0.getX();\n  double minSelectionWidthMinutes=minutesPerPixel * sliderPointHalfWidth * 2;\n  double selectionWidthPixels=selectionWidthMinutes / minutesPerPixel;\n  double multiplier=selectionWidthPixels / 40;\n  selectionWidthMinutes+=rot * minutesPerPixel * multiplier;\n  if (selectionWidthMinutes < minSelectionWidthMinutes) {\n    selectionWidthMinutes=minSelectionWidthMinutes;\n  }\n  if (selectionWidthMinutes > maxSelectionWidthMinutes) {\n    selectionWidthMinutes=maxSelectionWidthMinutes;\n  }\n  updateTimeline();\n  doPrepare();\n}\n", "List < IComment > appendGlobalComment ( final String commentText ) throws CouldntSaveDataException , CouldntLoadDataException ;", "public boolean checkError() {\n        if (out != null)\n            flush();\n        if (out instanceof java.io.PrintStream) {\n            PrintStream ps = (PrintStream) out;\n            return ps.checkError();\n        }\n        return trouble;\n    }", "    public long getLastTimestamp() {\n\n        if (getEntryCount() == 0)\n            return 0L;\n\n        return ((Entry) rangeIterator(null, null, 1/* capacity */,\n                IRangeQuery.DEFAULT | IRangeQuery.REVERSE, null/* filter */)\n                .next().getObject()).timestamp;\n\n    }\n", "public Revision next(){\n  try {\n    Revision revision=new Revision(result.getInt(2));\n    this.primaryKey=result.getInt(1);\n    revision.setPrimaryKey(this.primaryKey);\n    revision.setRevisionID(result.getInt(3));\n    revision.setArticleID(result.getInt(4));\n    revision.setTimeStamp(new Timestamp(result.getLong(5)));\n    revision.setFullRevisionID(result.getInt(6));\n    return revision;\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    throw new RuntimeException(e);\n  }\n}\n", "private void pickOnlyProvider() throws ServletException {\n  try {\n    Entry<OAuthLoginProvider> loginProvider=Iterables.getOnlyElement(loginProviders);\n    defaultAuthPlugin=loginProvider.getPluginName();\n    defaultAuthProvider=loginProvider.getExportName();\n  }\n catch (  NoSuchElementException e) {\n    throw new ServletException(\"No OAuth login provider installed\");\n  }\ncatch (  IllegalArgumentException e) {\n  }\n}\n", "\tprotected void paint(HtmlWriter htmlOut) throws IOException {\n\t\tif(show() == false)\n\t\t\treturn;\n\n\t\tif(child != null)\n\t\t\tpaintChild(htmlOut);\n\t}\n", "public double calculatePiElectronegativity(IAtomContainer ac, IAtom atom, int maxIterations, int maxResonStruc) {\n        maxI = maxIterations;\n        maxRS = maxResonStruc;\n\n        double electronegativity = 0;\n\n        try {\n            if (!ac.equals(acOldP)) {\n                molPi = ac.getBuilder().newInstance(IAtomContainer.class, ac);\n\n                peoe = new GasteigerMarsiliPartialCharges();\n                peoe.assignGasteigerMarsiliSigmaPartialCharges(molPi, true);\n                IAtomContainerSet iSet = ac.getBuilder().newInstance(IAtomContainerSet.class);\n                iSet.addAtomContainer(molPi);\n                iSet.addAtomContainer(molPi);\n\n                gasteigerFactors = pepe.assignrPiMarsilliFactors(iSet);\n\n                acOldP = ac;\n            }\n            IAtom atomi = molPi.getAtom(ac.indexOf(atom));\n            int atomPosition = molPi.indexOf(atomi);\n            int stepSize = pepe.getStepSize();\n            int start = (stepSize * (atomPosition) + atomPosition);\n            double q = atomi.getCharge();\n            if (molPi.getConnectedLonePairsCount(molPi.getAtom(atomPosition)) > 0\n                    || molPi.getMaximumBondOrder(atomi) != IBond.Order.SINGLE || atomi.getFormalCharge() != 0) {\n                return ((gasteigerFactors[1][start]) + (q * gasteigerFactors[1][start + 1]) + (gasteigerFactors[1][start + 2] * (q * q)));\n            }\n        } catch (Exception e) {\n            logger.error(e);\n        }\n\n        return electronegativity;\n    }", "public void onPullEvent ( final PullToRefreshBase < V > refreshView , State state , Mode direction ) ;", "public String convert ( final String expression ) { return infixToPostFix ( new CustomTokenizer ( expression ) ) ; }", "public void config(\n            String sourceClass,\n            String sourceMethod,\n            String msg,\n            Object param1\n            )\n    {\n        _log.logp(Level.CONFIG, sourceClass, sourceMethod, msg, param1);\n    }", "    public Representation options() throws ResourceException {\n        return handle(Method.OPTIONS);\n    }\n", "public Boolean isReplicateNotifyTemplate ( ) { return replicateNotifyTemplate ; }", "List < StreamEvent > map ( Tuple tuple ) throws Exception ;", "@Override\n    public void removedBundle(Bundle bundle, BundleEvent bundleEvent, List<BundleWebJarLib> webJarLibs) {\n        removeWebJarLibs(webJarLibs);\n    }", "private void push ( final int type ) { if ( outputStack == null ) { outputStack = new int [ NUM_ ] ; } int n = outputStack . length ; if ( outputStackTop >= n ) { int [ ] t = new int [ Math . max ( outputStackTop + NUM_ , NUM_ * n ) ] ; System . arraycopy ( outputStack , NUM_ , t , NUM_ , n ) ; outputStack = t ; } outputStack [ outputStackTop ++ ] = type ; int top = owner . inputStackTop + outputStackTop ; if ( top > owner . outputStackMax ) { owner . outputStackMax = top ; } }", "public RecordedEvent originalEvent ( ) { return ( link != null ) ? link : event ; }", "private static int lengthOfMimeNames(String val){\n  int len=val.indexOf(' ');\n  if (len < 0)   len=val.length();\n  return len;\n}\n", "public int countNode(XPathContext support, ElemNumber numberElem, int node)\n          throws TransformerException\n  {\n\n    int count = 0;\n    Vector counters = getCounters(numberElem);\n    int nCounters = counters.size();\n\n    // XPath countMatchPattern = numberElem.getCountMatchPattern(support, node);\n    // XPath fromMatchPattern = numberElem.m_fromMatchPattern;\n    int target = numberElem.getTargetNode(support, node);\n\n    if (DTM.NULL != target)\n    {\n      for (int i = 0; i < nCounters; i++)\n      {\n        Counter counter = (Counter) counters.elementAt(i);\n\n        count = counter.getPreviouslyCounted(support, target);\n\n        if (count > 0)\n          return count;\n      }\n\n      // In the loop below, we collect the nodes in backwards doc order, so \n      // we don't have to do inserts, but then we store the nodes in forwards \n      // document order, so we don't have to insert nodes into that list, \n      // so that's what the appendBtoFList stuff is all about.  In cases \n      // of forward counting by one, this will mean a single node copy from \n      // the backwards list (m_newFound) to the forwards list (counter.m_countNodes).\n      count = 0;\n      if (m_newFound == null)\n        m_newFound = new NodeSetDTM(support.getDTMManager());\n\n      for (; DTM.NULL != target;\n              target = numberElem.getPreviousNode(support, target))\n      {\n\n        // First time in, we should not have to check for previous counts, \n        // since the original target node was already checked in the \n        // block above.\n        if (0 != count)\n        {\n          for (int i = 0; i < nCounters; i++)\n          {\n            Counter counter = (Counter) counters.elementAt(i);\n            int cacheLen = counter.m_countNodes.size();\n\n            if ((cacheLen > 0)\n                    && (counter.m_countNodes.elementAt(cacheLen\n                                                      - 1) == target))\n            {\n              count += (cacheLen + counter.m_countNodesStartCount);\n\n              if (cacheLen > 0)\n                appendBtoFList(counter.m_countNodes, m_newFound);\n\n              m_newFound.removeAllElements();\n\n              return count;\n            }\n          }\n        }\n\n        m_newFound.addElement(target);\n\n        count++;\n      }\n\n      // If we got to this point, then we didn't find a counter, so make \n      // one and add it to the list.\n      Counter counter = new Counter(numberElem, new NodeSetDTM(support.getDTMManager()));\n\n      m_countersMade++;  // for diagnostics\n\n      appendBtoFList(counter.m_countNodes, m_newFound);\n      m_newFound.removeAllElements();\n      counters.addElement(counter);\n    }\n\n    return count;\n  }", "public void await() throws InterruptedException {\n  awaitSemaphore.acquire();\n  awaitSemaphore.release();\n}\n", "void onBoardRotationY ( NotificationBoard board , float y ) ;", "public static String idx( String str, int index, char c ) {\n\n        char[] chars = str.toCharArray();\n        Chr.idx( chars, index, c );\n        return new String( chars );\n    }", "public Vector2 floor ( ) { x = ( float ) Math . floor ( x ) ; z = ( float ) Math . floor ( z ) ; return this ; }", "\tpublic void compareDiskImages() {\n\t\tCompareDisksWizard wizard = new CompareDisksWizard(shell, imageManager);\n\t\twizard.open();\n\t}\n", "public void clear(){\n  q.clear();\n}\n", "    public String getName () {\n        return document_name;\n    }\n", "public void appendSwitchWithValue ( String name , String value ) ;", "    protected void generatePayload(XMLOutputter out) throws IOException {\n        out.startTag(\"err\");\n        out.attribute(\"code\", String.valueOf(getErrorCode()));\n        out.attribute(\"msg\", getErrorMessage());\n        out.endTag();\n    }\n", "public void invoke(X509Certificate cert, GSIConstants.CertificateType certType) throws CertPathValidatorException {\n        Set<String> criticalExtensionOids =\n                cert.getCriticalExtensionOIDs();\n        if (criticalExtensionOids == null) {\n            return;\n        }\n        for (String criticalExtensionOid : criticalExtensionOids) {\n            isUnsupported(certType, criticalExtensionOid);\n        }\n    }", "private static boolean doDeleteDir(File file,boolean recurse){\n  if (file != null && file.exists()) {\n    if (file.isFile() || !recurse) {\n      return file.delete();\n    }\n    String[] fnames=file.list();\n    File child=null;\n    for (int i=0; i < fnames.length; i++) {\n      child=new File(file,fnames[i]);\n      if (!doDeleteDir(child,recurse)) {\n        return false;\n      }\n    }\n    return file.delete();\n  }\n  return true;\n}\n", "@Override public void onBindViewHolder(StatisticViewHolder holder,int position){\nswitch (getItemViewType(position)) {\ncase StatisticViewHolder.TYPE_SMALL:\nswitch (mStatisticItems.get(position)) {\ncase TYPE_DUE:\n      holder.applyDueChart();\n    break;\ncase TYPE_STAGE:\n  holder.applyStageChart();\nbreak;\n}\nbreak;\ncase StatisticViewHolder.TYPE_LARGE:\nholder.applyMostPlayedChart(mStatisticItems.get(position));\nbreak;\n}\n}\n", "        public Object visit(ASTActualTypeArgument node, Object data) {\n\t\treturn node.childrenAccept(this, data);\n        }\n", "private int findNextUnreservedRopReg(int startReg,int width){\n  int reg;\n  reg=reservedRopRegs.nextClearBit(startReg);\n  while (true) {\n    int i=1;\n    while (i < width && !reservedRopRegs.get(reg + i)) {\n      i++;\n    }\n    if (i == width) {\n      return reg;\n    }\n    reg=reservedRopRegs.nextClearBit(reg + i);\n  }\n}\n", "public static UrlBuilder getUrlBuilder(final URL baseUrl) {\n\t\tURL url = null;\n\t\ttry {\t\t\t\n\t\t\turl = new URL(decode(requireNonNull(baseUrl).toString(), defaultCharset().name()));\n\t\t} catch (MalformedURLException | UnsupportedEncodingException e) {\n\t\t\tthrow new IllegalArgumentException(new StringBuilder(\"Cannot create a URI from the provided URL: \")\n\t\t\t\t\t.append(baseUrl != null ? baseUrl.toString() : \"null\").toString(), e);\n\t\t}\n\t\treturn new UrlBuilder(url);\n\t}", "\tprivate void syncCoordinates() {\n\t\tfloat containerX1 = swatches[0].getCoordinates()[0];\n\t\tfloat containerY1 = swatches[0].getCoordinates()[1];\n\t\tfloat containerW = swatchWidth*nPerRow;\n\t\tfloat containerH = PApplet.abs(swatches[swatches.length-1].getCoordinates()[3] - containerY1);\n\t\tsetCoordinatesFromCorner(containerX1, containerY1, containerW, containerH);\n\t}\n", "public static String formatQuantity(double quantity){\n  return quantityDecimalFormat.format(quantity);\n}\n", "  public void unpackFile(File archive) throws IOException {\n    if (null == archive) {\n      throw new IllegalArgumentException(\"archive is null\");\n    }\n    if (!archive.isFile()) {\n      throw new RuntimeException(\"File argument is not a file: \" + archive.getName());\n    }\n    if (!archive.exists()) {\n      throw new RuntimeException(\"File does not exist: \" + archive.getName());\n    }\n    if (!archive.canRead()) {\n      throw new RuntimeException(\"Cannot read file: \" + archive.getName());\n    }\n\n    unpackFile(archive, archive.getAbsoluteFile().getParent());\n  }\n", "\tpublic boolean isUserLogged(String login) throws Exception {\n\t\treturn gerenteSessao.isUserLogged(login);\n\t\n\t}\n", "    public void persisted() {\n        assert status == STATUS_PENDING;\n        status = STATUS_PERSISTED;\n        try {\n            NodeEntry vhe = mgr.getVersionHistoryEntry(nodeState);\n            if (vhe != null) {\n                vhe.invalidate(true);\n            }\n        } catch (RepositoryException e) {\n            log.debug(\"Failed to access Version history entry -> skip invalidation.\", e);\n        }\n        Iterator<PropertyEntry> entries = ((NodeEntry) nodeState.getHierarchyEntry()).getPropertyEntries();\n        while (entries.hasNext()) {\n            PropertyEntry pe = entries.next();\n            pe.invalidate(false);\n        }\n        nodeState.getHierarchyEntry().invalidate(false);\n    }\n", "public static void showToast ( Context context , String msg ) { Toast . makeText ( context , msg , Toast . LENGTH_LONG ) . show ( ) ; }", "@Override public InetAddress addressRemote(){\n  if (_s != null)   return _s.getInetAddress();\n else   return null;\n}\n", "  protected void closeStatements(Statement[] stmtArray) throws SQLException{\n    if (stmtArray != null) {\n      for( int i=0; i<stmtArray.length; i++ ){\n        Statement stmt = stmtArray[i];\n        if( stmt != null ){\n          stmt.close();\n        }\n      }\n    }\n  }\n", "public static <T extends Comparable<? super T>> boolean lessThan(final T object, final T other) {\n\n        return JudgeUtils.lessThan(object, other);\n    }", "    public E get() {\n        return this.object;\n    }\n", "public void seek(long pos) {\n    try {\n      raFile.seek(pos);\n    } catch (IOException e) {\n      logger.log(Level.SEVERE, null, e);\n      throw new RuntimeException(e);\n    }\n  }", "public static Object read(InputStream stream) throws Exception {\n  Class<?> komlClass;\n  Class<?>[] komlClassArgs;\n  Object[] komlArgs;\n  java.lang.reflect.Constructor<?> constructor;\n  Object koml;\n  java.lang.reflect.Method methodRead;\n  java.lang.reflect.Method methodClose;\n  Class<?>[] readArgsClasses;\n  Class<?>[] closeArgsClasses;\n  Object[] readArgs;\n  Object[] closeArgs;\n  Object result;\n  result=null;\n  komlClass=Class.forName(\"fr.dyade.koala.xml.koml.KOMLDeserializer\");\n  komlClassArgs=new Class[2];\n  komlClassArgs[0]=java.io.InputStream.class;\n  komlClassArgs[1]=Boolean.TYPE;\n  komlArgs=new Object[2];\n  komlArgs[0]=stream;\n  komlArgs[1]=new Boolean(false);\n  constructor=komlClass.getConstructor(komlClassArgs);\n  koml=constructor.newInstance(komlArgs);\n  readArgsClasses=new Class[0];\n  methodRead=komlClass.getMethod(\"readObject\",readArgsClasses);\n  readArgs=new Object[0];\n  closeArgsClasses=new Class[0];\n  methodClose=komlClass.getMethod(\"close\",closeArgsClasses);\n  closeArgs=new Object[0];\n  try {\n    result=methodRead.invoke(koml,readArgs);\n  }\n catch (  Exception e) {\n    result=null;\n  }\n finally {\n    methodClose.invoke(koml,closeArgs);\n  }\n  return result;\n}\n", "private void processWebModulePersistenceXml(JPAApplInfo applInfo, ContainerInfo warContainerInfo, ClassLoader warClassLoader) {\n        final boolean isTraceOn = TraceComponent.isAnyTracingEnabled();\n        if (isTraceOn && tc.isEntryEnabled()) {\n            Tr.entry(tc, \"processWebModulePersistenceXml : \" + applInfo.getApplName() + \"#\" + warContainerInfo);\n        }\n\n        String archiveName = warContainerInfo.getName();\n        Container warContainer = warContainerInfo.getContainer();\n\n        // ------------------------------------------------------------------------\n        // JPA 2.0 Specification - 8.2 Persistence Unit Packaging\n        //\n        // A persistence unit is defined by a persistence.xml file. The jar file or\n        // directory whose META-INF directory contains the persistence.xml file is\n        // termed the root of the persistence unit. In Java EE environments, the\n        // root of a persistence unit may be one of the following:\n        //\n        // -> the WEB-INF/classes directory of a WAR file\n        // -> a jar file in the WEB-INF/lib directory of a WAR file\n        // ------------------------------------------------------------------------\n\n        // Obtain any persistence.xml in WEB-INF/classes/META-INF\n        Entry pxml = warContainer.getEntry(\"WEB-INF/classes/META-INF/persistence.xml\");\n        if (pxml != null) {\n            String appName = applInfo.getApplName();\n            URL puRoot = getPXmlRootURL(appName, archiveName, pxml);\n            applInfo.addPersistenceUnits(new OSGiJPAPXml(applInfo, archiveName, JPAPuScope.Web_Scope, puRoot, warClassLoader, pxml));\n        }\n\n        // Obtain any persistenc.xml in WEB-INF/lib/*.jar. This includes 'utility'\n        // jars and web fragments. Any PUs found are WEB scoped and considered to\n        // be in the WAR, so just use the WAR archiveName (don't use a root prefix\n        // that is prepended to the jar/fragment name).\n        Entry webInfLib = warContainer.getEntry(\"WEB-INF/lib/\");\n        if (webInfLib != null) {\n            try {\n                Container webInfLibContainer = webInfLib.adapt(Container.class);\n                processLibraryJarPersistenceXml(applInfo, webInfLibContainer, archiveName, null, JPAPuScope.Web_Scope, warClassLoader);\n            } catch (UnableToAdaptException ex) {\n                // Should never occur... just propagate failure\n                throw new RuntimeException(\"Failure locating persistence.xml\", ex);\n            }\n        }\n\n        if (isTraceOn && tc.isEntryEnabled())\n            Tr.exit(tc, \"processWebModulePersistenceXml : \" + applInfo.getApplName() +\n                        \"#\" + warContainer);\n    }", "private JsonValue fetchAllObjects ( ) throws ResourceException { JsonValue flatParams = flattenJson ( taskScannerContext . getScanValue ( ) ) ; ConfigMacroUtil . expand ( flatParams ) ; return performQuery ( taskScannerContext . getObjectID ( ) , flatParams ) ; }", "    private Collection getInternalAssignedUsers() {\n        if (m_assignedUsers == null) {\n            UserCollection uc = new UserCollection\n                (getAssignedUserAssociation().cursor());\n            m_assignedUsers = new HashSet();\n\n            while (uc.next()) {\n                m_assignedUsers.add(uc.getDomainObject());\n            }\n        }\n        return m_assignedUsers;\n    }\n", "    public void executeToCompletion(ISessionStateRegistry registry) throws XAwareException {\n        while (!registry.processingComplete()) {\n            try {\n                executeStep(registry);\n            }\n            catch (XAwareException e) {\n                registry.resolveError(e);\n            }\n        }\n    }\n", "public static Map<String,Object> rebuildSolrIndexAuto(DispatchContext dctx,Map<String,Object> context) throws GenericEntityException {\n  Map<String,Object> result;\n  LocalDispatcher dispatcher=dctx.getDispatcher();\n  boolean autoRunEnabled=UtilProperties.getPropertyAsBoolean(SolrUtil.solrConfigName,\"solr.index.rebuild.autoRun.enabled\",false);\n  if (autoRunEnabled) {\n    Boolean onlyIfDirty=(Boolean)context.get(\"onlyIfDirty\");\n    if (onlyIfDirty == null) {\n      onlyIfDirty=UtilProperties.getPropertyAsBoolean(SolrUtil.solrConfigName,\"solr.index.rebuild.autoRun.onlyIfDirty\",false);\n    }\n    Debug.logInfo(\"Solr: auto-run index rebuild: starting (onlyIfDirty: \" + onlyIfDirty + \")\",module);\n    Map<String,Object> servCtx;\n    try {\n      servCtx=dctx.makeValidContext(\"rebuildSolrIndex\",ModelService.IN_PARAM,context);\n      servCtx.put(\"onlyIfDirty\",onlyIfDirty);\n      Map<String,Object> servResult=dispatcher.runSync(\"rebuildSolrIndex\",servCtx);\n      if (ServiceUtil.isSuccess(servResult)) {\n        String respMsg=(String)servResult.get(ModelService.SUCCESS_MESSAGE);\n        if (respMsg != null) {\n          Debug.logInfo(\"Solr: auto-run index rebuild: rebuildSolrIndex returned success: \" + respMsg,module);\n        }\n else {\n          Debug.logInfo(\"Solr: auto-run index rebuild: rebuildSolrIndex returned success\",module);\n        }\n      }\n else {\n        Debug.logError(\"Solr: auto-run index rebuild: rebuildSolrIndex returned an error: \" + ServiceUtil.getErrorMessage(servResult),module);\n      }\n      result=FastMap.newInstance();\n      result.putAll(servResult);\n    }\n catch (    GenericServiceException e) {\n      Debug.logError(e,module);\n      return ServiceUtil.returnError(e.getMessage());\n    }\n  }\n else {\n    Debug.logInfo(\"Solr: auto-run index rebuild: not running - disabled\",module);\n    result=ServiceUtil.returnSuccess();\n  }\n  return result;\n}\n", "public void seek(long newPosition) throws IOException {\n  out.seek(newPosition + streamOffset);\n}\n", "void updateDatabase ( ) throws CouldntUpdateDatabaseException ;", "  public FileLock createLockObject(SrvSession sess, TreeConnection tree, NetworkFile file, long offset, long len, int pid) {\n\n\t\t//\tCreate a lock object to represent the file lock\n\t\t\n\t\treturn new NIOFileLock(offset, len, pid);\n  }\n", "    private boolean removeDocument(long id) {\n        try {\n            YDocument doc = (YDocument) _db.load(YDocument.class, id);\n            return (doc != null) && _db.exec(doc, HibernateEngine.DB_DELETE, true);\n        }\n        catch (ObjectNotFoundE", "public <R> R executeTransactionalCommand(final TransactionalCommand<R> command)\r\n            throws MithraBusinessException\r\n    {\r\n        return this.executeTransactionalCommand(command, this.defaultTransactionStyle);\r\n    }", "\tpublic MQuery (int AD_Table_ID)\n\t{\t//\tUse Client Context as r/o\n\t\tm_TableName = MTable.getTableName (Env.getCtx(), AD_Table_ID);\n\t}\t//\tMQuery\n", "public static int levenshtein(String[] candidate,String[] source){\n  if (source.length == 0)   return candidate.length;\n  if (candidate.length == 0)   return source.length;\n  int distances[][]=new int[source.length + 1][candidate.length + 1];\n  for (int i=0; i <= source.length; i++)   distances[i][0]=i;\n  for (int j=0; j <= candidate.length; j++)   distances[0][j]=j;\n  for (int i=1; i <= source.length; i++) {\n    Object sourceItem=source[i - 1];\n    for (int j=1; j <= candidate.length; j++) {\n      Object targetItem=candidate[j - 1];\n      int cost;\n      if (sourceItem.equals(targetItem))       cost=0;\n else       cost=1;\n      int deletionCost=distances[i - 1][j] + 1;\n      int insertionCost=distances[i][j - 1] + 1;\n      int substitutionCost=distances[i - 1][j - 1] + cost;\n      distances[i][j]=minimum(insertionCost,deletionCost,substitutionCost);\n    }\n  }\n  return distances[source.length][candidate.length];\n}\n", "public boolean isNew(String identifier)\n   {\n\n      ItemState lastState = changesLog.getItemState(identifier);\n\n      if (lastState == null || lastState.isDeleted())\n      {\n         return false;\n      }\n\n      return changesLog.getItemState(identifier, ItemState.ADDED) != null;\n   }", "    public Account createAccount(AccountType accountType, String username, String password) {\n        if(accountType != null && username != null && password != null) {\n            MemberID memberID = this.createOpenAccount(username, password); \n            if(memberID != null) {                \n                //Link the accounts\n                Account child = this.getAccount(memberID);\n                child.setType(accountType);\n                this.updateMember(child);   \n                Logger.info(ForumServerSystemCodes.NEW_ACCOUNT_CREATED, new Object[] {child.getType(), child.getUsername(), child.getMemberID()});                             \n                return child;\n            }\n        }\n        return null;\n    }\n", "@Override public MatchResult match(String str){\n  RegexTemplate template=new RegexTemplate(toString());\n  return template.match(str);\n}\n", "public static <T> void print(List<T> table) {\n        if (table == null ) {\n            throw new IllegalArgumentException(\"No tabular data provided\");\n        }\n        if (table.isEmpty()) {\n            return;\n        }\n        final int[] widths = new int[getMaxColumns(table)];\n        adjustColumnWidths(table, widths);\n        printPreparedTable(table, widths, getHorizontalBorder(widths));\n    }", "public boolean isValid(){\n  checkState();\n  return invalidUsers.isEmpty();\n}\n", "public final void entryRuleXCollectionLiteral() throws RecognitionException {\n        try {\n            // InternalXbaseWithAnnotations.g:834:1: ( ruleXCollectionLiteral EOF )\n            // InternalXbaseWithAnnotations.g:835:1: ruleXCollectionLiteral EOF\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getXCollectionLiteralRule()); \n            }\n            pushFollow(FOLLOW_1);\n            ruleXCollectionLiteral();\n\n            state._fsp--;\n            if (state.failed) return ;\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getXCollectionLiteralRule()); \n            }\n            match(input,EOF,FOLLOW_2); if (state.failed) return ;\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }", "void interpolateDeformedPoint(float v_x , float v_y , Point2D_F32 deformed ) {\n\n\t\t// sample the closest point and x+1,y+1\n\t\tint x0 = (int)v_x;\n\t\tint y0 = (int)v_y;\n\t\tint x1 = x0+1;\n\t\tint y1 = y0+1;\n\n\t\t// make sure the 4 sample points are in bounds\n\t\tif( x1 >= gridCols )\n\t\t\tx1 = gridCols-1;\n\t\tif( y1 >= gridRows )\n\t\t\ty1 = gridRows-1;\n\n\t\t// weight along each axis\n\t\tfloat ax = v_x - x0;\n\t\tfloat ay = v_y - y0;\n\n\t\t// bilinear weight for each sample point\n\t\tfloat w00 = (1.0f - ax) * (1.0f - ay);\n\t\tfloat w01 = ax * (1.0f - ay);\n\t\tfloat w11 = ax * ay;\n\t\tfloat w10 = (1.0f - ax) * ay;\n\n\t\t// apply weights to each sample point\n\t\tPoint2D_F32 d00 = getGrid(y0,x0).deformed;\n\t\tPoint2D_F32 d01 = getGrid(y0,x1).deformed;\n\t\tPoint2D_F32 d10 = getGrid(y1,x0).deformed;\n\t\tPoint2D_F32 d11 = getGrid(y1,x1).deformed;\n\n\t\tdeformed.set(0,0);\n\t\tdeformed.x += w00 * d00.x;\n\t\tdeformed.x += w01 * d01.x;\n\t\tdeformed.x += w11 * d11.x;\n\t\tdeformed.x += w10 * d10.x;\n\n\t\tdeformed.y += w00 * d00.y;\n\t\tdeformed.y += w01 * d01.y;\n\t\tdeformed.y += w11 * d11.y;\n\t\tdeformed.y += w10 * d10.y;\n\t}", "@SafeVarargs public static AndPredicate and(Predicate<Composite> left,Predicate<Composite> right,Predicate<Composite>... optionalRight){\n  return new AndPredicate(prepend(left,prepend(right,Arrays.asList(optionalRight))));\n}\n", "\tpublic void addVariable(String varName, String varValue, String configName) {\n\t\tHashMap<String, String> vars = varMapping.get(configName);\n\t\tif (vars == null) {\n\t\t\tvars = new HashMap<String, String>();\n\t\t}\n\t\tvars.put(varName, varValue);\n\t\tvarMapping.put(configName, vars);\n\t}\n", "public TransactionID sendRequest ( Request request , TransportAddress sendTo , TransportAddress sendThrough , ResponseCollector collector , TransactionID transactionID ) throws IllegalArgumentException , IOException { return sendRequest ( request , sendTo", "private static void checkArguments ( final BackEndDebuggerProvider debuggerProvider , final int [ ] rows ) { checkArguments ( debuggerProvider ) ; Preconditions . checkNotNull ( rows , STR_ ) ; }", "public FTPCommunicationChannel(Socket connection,String charsetName) throws IOException {\n  this.connection=connection;\n  this.charsetName=charsetName;\n  InputStream inStream=connection.getInputStream();\n  OutputStream outStream=connection.getOutputStream();\n  reader=new NVTASCIIReader(inStream,charsetName);\n  writer=new NVTASCIIWriter(outStream,charsetName);\n}\n", "public LinkingMorphemes ( List < String > aMorphemes ) { morphemes = aMorphemes ; }", "public ODatabaseRecord delete(final ORID iRecord) {\r\n    executeDeleteRecord(iRecord, -1, true, true, OPERATION_MODE.SYNCHRONOUS);\r\n    return this;\r\n  }", "public void removeWritten(byte[] value){\n  writeSetLock.lock();\n  Set<TimestampValuePair> temp=(HashSet<TimestampValuePair>)writeSet.clone();\n  for (  TimestampValuePair rv : temp) {\n    if (Arrays.equals(rv.getValue(),value))     writeSet.remove(rv);\n  }\n  writeSetLock.unlock();\n}\n", "    public List getFields() {\n        List fields = new ArrayList();\n        fields.add(get_Name());\n        fields.add(get_Path());\n        fields.add(get_Comment());\n        fields.add(get_usr_SeenByEverybody());\n        fields.add(get_usr_EnableGuest());\n        fields.add(get_CreateMask());\n        fields.add(get_DirectoryMask());\n        fields.add(get_DirectorySecurityMask());\n        fields.add(get_usr_ForceUser());\n        return fields;\n    }\n", "@Override\n    public void setRowHeight(int rowHeight) {\n        super.setRowHeight(rowHeight);\n        if (tree != null && tree.getRowHeight() != rowHeight) {\n            tree.setRowHeight(getRowHeight());\n        }\n    }", "public void setTargetWidth (int targetWidth)\n    {\n        if (targetWidth <= 0) {\n            throw new IllegalArgumentException(\n                \"Invalid target width '\" + targetWidth + \"'\");\n        }\n        _constraints.width = targetWidth;\n        _constraints.height = 0;\n        invalidate(\"setTargetWidth\");\n    }", "public boolean removeFooterView(View v) {\n        if (mFooterViewInfos.size() > 0) {\n            boolean result = false;\n            ListAdapter adapter = getAdapter();\n            if (adapter != null && ((HeaderFooterViewGridAdapter) adapter).removeFooter(v)) {\n                result = true;\n            }\n            removeFixedViewInfo(v, mFooterViewInfos);\n            return result;\n        }\n        return false;\n    }", "public static boolean isViable ( World worldObj , AStarNode target , int yoffset ) { return isViable ( worldObj , target . x , target . y , target . z , yoffset ) ; }", "protected URI doPostCreate(String path, Object o) throws ClientException {\n        return doPostCreate(path, o, null);\n    }", "public T events_getMembers(Number eventId)\n    throws FacebookException, IOException {\n    assert (null != eventId);\n    return this.callMethod(FacebookMethod.EVENTS_GET_MEMBERS,\n                           new Pair<String, CharSequence>(\"eid\", eventId.toString()));\n  }", "public void setSortSelectBoxValue(String value, boolean fireEvents) {\n\n        if ((m_sortSelectBox != null) && (value != null)) {\n            m_sortSelectBox.setFormValue(value, fireEvents);\n        }\n    }", "public void checkAndNotify ( ) { for ( FileAlterationListener listener : listeners ) { listener . onStart ( this ) ; } File rootFile = rootEntry . getFile ( ) ; if ( rootFile . exists ( ) ) { checkAndNotify ( rootEntry , rootEntry . getChildren ( ) , listFiles ( rootFile ) ) ; } else if ( rootEntry . isExists ( ) ) { checkAndNotify ( rootEntry , rootEntry . getChildren ( ) , FileUtils . EMPTY_FILE_ARRAY ) ; } else { } for ( FileAlterationListener listener : listeners ) { listener . onStop ( this ) ; } }", "    public String getCNumericEdited1() {\n        return cNumericEdited1;\n    }\n", "public ErrorConnectionClosedSynchronizer ( final IDebugger debugger , final ListenerProvider < IDebugEventListener > listeners ) { super ( debugger , listeners ) ; }", "public final EObject entryRuleXUnaryOperation() throws RecognitionException {\n        EObject current = null;\n\n        EObject iv_ruleXUnaryOperation = null;\n\n\n        try {\n            // InternalSARL.g:8973:56: (iv_ruleXUnaryOperation= ruleXUnaryOperati", "  public int numNodes() {\n    \n    int no = 1;\n    int i;\n    \n    if (!m_isLeaf)\n      for (i=0;i<m_sons.length;i++)\n\tno = no+m_sons[i].numNodes();\n    \n    return no;\n  }\n", "public static void silentCloseOutputStream(OutputStream os){\n  try {\n    if (os != null) {\n      os.close();\n    }\n  }\n catch (  IOException e) {\n    log.w(LOG_TAG,\"Cannot close output stream\",e);\n  }\n}\n", "public Object parse ( Map params , URL url ) { return parseURL ( url , params ) ; }", "public void loadProject ( String arg ) throws IOException { Project newProject = Project . readProject ( arg ) ; newProject . setConfiguration ( project . getConfiguration ( ) ) ; project = newProject ; projectLoadedFromFile = BOOL_ ; }", "public int getRowEnd(int rowIndex) {\n        if (isCompacted) {\n            throw new IllegalStateException(\n                    \"Illegal Invocation of the method after compact()\");\n        }\n        if (rowIndex < 0 || rowIndex > rows) {\n            throw new IllegalArgumentException(\"rowIndex out of bound!\");\n        }\n        return v[rowIndex * columns + 1] - 1;\n    }", "public void stop() {\n\t\tisStarted = false;\n\t\tIterator i = allConnections.iterator();\n\t\twhile (i.hasNext()) {\n\t\t\tConnectionWrapper connWrap = (ConnectionWrapper) i.next();\n\t\t\ttry {\n\t\t\t\tconnWrap.getConnection().close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\tnrofErrors++;\n\t\t\t\tSystem.out.println(new LogEntry(e));\n\t\t\t}\n\t\t}\n\n\t\tallConnections.clear();\n\t\tavailableConnections.clear();\n\t\tusedConnections.clear();\n\t}", "\tprivate void setupRenderStates() {\n\t\t// Set the modes.\n\t\tthis.setModes(this);\n\t\t// Set up the zbuffer state.\n\t    ZBufferState zbuff = this.renderer.createZBufferState();\n\t    zbuff.setWritable(false);\n\t    zbuff.setEnabled(true);\n\t    zbuff.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);\n\t    this.setRenderState(zbuff);\n\t    // Update the render state.\n\t    this.updateRenderState();\n\t}\n", "public static void addPackage(String packagename){\n  packages.add(packagename);\n}", "    protected long getOsgiBundleId(IServiceIdentifier serviceId) {\n\t\tService s = getService(serviceId);\n\t\treturn s == null ? -1 : s.bundleId;\n    }\n", "public Updater updaterFor(DecoratedKey key,ColumnFamily cf,OpOrder.Group opGroup){\n  return (indexesByColumn.isEmpty() && rowLevelIndexMap.isEmpty()) ? nullUpdater : new StandardUpdater(key,cf,opGroup);\n}\n", "public static Bitmap decodeSampledBitmapFromResource ( Resources res , int resId , int reqWidth , int reqHeight , ImageCache cache ) { final BitmapFactory . Options options = new BitmapFactory . Options ( ) ; options . inJustDecodeBounds = BOOL_ ; BitmapF", "public void openWorkspace(final File theFile){\n  WorkspaceSerializer serializer=new WorkspaceSerializer(this);\n  try {\n    if (theFile != null) {\n      clearWorkspace();\n      serializer.deserialize(new FileInputStream(theFile));\n      setCurrentFile(theFile);\n      setWorkspaceChanged(false);\n      fireNewWorkspaceOpened();\n    }\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n", "public Date adjust ( final Date date ) { return adjust ( date , BusinessDayConvention . Following ) ; }", "public Class<?> type(){\n  if (isClass) {\n    return (Class<?>)object;\n  }\n else {\n    return object.getClass();\n  }\n}\n", "    public void addAttributes(NamedNodeMap attributes) {\n        if (attributes != null) {\n            for (int i = 0; i < attributes.getLength(); i++) {\n                String name = attributes.item(i).getNodeName();\n                String value = attributes.item(i).getNodeValue();\n                addAttribute(name, value);\n            }\n        }\n    }\n", "public Map<String, String> getUriVariablesForCorpNotes(Integer clientCorporationID, Set<String> fieldSet, CorpNotesParams params) {\n\t\tif (params == null) {\n\t\t\tparams = ParamFactory.corpNotesParams();\n\t\t}\n\n\t\tMap<String, String> uriVariables = params.getParameterMap();\n\n\t\tString bhRestToken = bullhornApiRest.getBhRestToken();\n\t\turiVariables.put(BH_REST_TOKEN, bhRestToken);\n\t\tString fields = this.convertFieldSetToString(fieldSet);\n\t\turiVariables.put(FIELDS, fields);\n\t\turiVariables.put(CLIENT_CORP_ID, clientCorporationID.toString());\n\n\t\treturn uriVariables;\n\t}", "public static void launchURL(final URI uri,final String title,String tooltip,String browserId,LaunchMode launchMode){\n  Check.notNull(uri,\"url\");\n  if (!URISchemeHelper.isOnTrustedUriWhiteList(uri)) {\n    URISchemeHelper.showUnsafeSchemeError(uri);\n    return;\n  }\n  if (launchMode == null) {\n    launchMode=LaunchMode.USER_PREFERENCE;\n  }\n  if (browserId == null) {\n    browserId=\"\";\n  }\n  if (tooltip == null) {\n    tooltip=\"\";\n  }\n  final boolean workbenchBrowserMode;\nsynchronized (BrowserFacade.class) {\n    workbenchBrowserMode=useWorkbenchBrowserSupport;\n  }\n  if (workbenchBrowserMode) {\n    try {\n      launchWithWorkbenchBrowserSupport(uri,title,tooltip,browserId,launchMode);\n      return;\n    }\n catch (    final Exception e) {\n      log.warn(\"Problem launching web browser with workbench support (fallback will be tried)\",e);\n    }\n  }\n  launchInFallbackMode(uri.toString(),title,tooltip,browserId,launchMode);\n}\n", "    public void setSubject(Hashtable args) {\n        String sub = getSubject();\n        subject = processArgs(subjectStringArgsKeys, args, sub);\n    }\n", "public static void addOrUpdateKeywordSet(List<KeywordSet> keywords,String keyword,String thesaurus){\n  if (!Strings.isNullOrEmpty(keyword) && !Strings.isNullOrEmpty(thesaurus)) {\n    String capped=StringUtils.capitalize(keyword.toLowerCase());\n    boolean found=false;\n    for (    KeywordSet ks : keywords) {\n      String keywordThesaurus=ks.getKeywordThesaurus();\n      if (!Strings.isNullOrEmpty(keywordThesaurus) && keywordThesaurus.equalsIgnoreCase(thesaurus)) {\n        String keywordString=ks.getKeywordsString();\n        if (Strings.isNullOrEmpty(keywordString)) {\n          ks.setKeywordsString(capped);\n        }\n        found=true;\n        break;\n      }\n    }\n    if (!found) {\n      KeywordSet ks=new KeywordSet();\n      ks.setKeywordThesaurus(thesaurus);\n      ks.setKeywordsString(capped);\n      keywords.add(ks);\n    }\n  }\n}\n", "public static String[] quotedSplit(String line,Pattern separatorPattern){\n  return quotedSplit(line,separatorPattern,'\"','\\\\');\n}", "private CGlobalSettings ( ) { }", "    public void crossover(Particle globalBest, int[] mask) {\n        for (int i = 0; i < mask.length; i++) {\n            crossoverLine(mask, game[i], localBest.game[i], globalBest.game[i]);\n        }\n    }\n", "protected AbstractProtocolDescriptor(int version,int architecture,int minimumType,int maximumType,int weight){\n  this.version=version;\n  this.architecture=architecture;\n  this.minimumType=minimumType;\n  this.maximumType=maximumType;\n  this.weight=weight;\n  hashCode=Objects.hash(version,architecture,minimumType,maximumType,weight);\n}\n", "public static List<? extends Node> evaluateXPath(Document doc,String path) throws XPathExpressionException {\n  XPathFactory factory=XPathFactory.newInstance();\n  XPath xpath=factory.newXPath();\n  xpath.setNamespaceContext(new NamespaceResolver(doc));\n  XPathExpression expr=xpath.compile(path);\n  NodeList nodes=(NodeList)expr.evaluate(doc,XPathConstants.NODESET);\n  List<Node> nodelist=new ArrayList<Node>();\n  for (int i=0; i < nodes.getLength(); ++i) {\n    nodelist.add(nodes.item(i));\n  }\n  LOG.trace(String.format(\"Evaluated XPath: %s and found %s\",path,nodeListToString(nodelist)));\n  return nodelist;\n}\n", "@Override public boolean isAllowedToTransferFile(ContactId contact) throws RemoteException {\n  if (contact == null) {\n    throw new ServerApiIllegalArgumentException(\"contact must not be null!\");\n  }\n  try {\n    Capabilities remoteCapabilities=mContactManager.getContactCapabilities(contact);\n    if (remoteCapabilities == null) {\n      if (sLogger.isActivated()) {\n        sLogger.debug(\"Cannot transfer file as the capabilities of contact \" + contact + \" are not known.\");\n      }\n      return false;\n    }\n    FileTransferProtocol protocol=getFileTransferProtocolForOneToOneFileTransfer(contact);\n    if (protocol == null) {\n      if (sLogger.isActivated()) {\n        sLogger.debug(\"Cannot transfer file as no valid file transfer protocol could be determined.\");\n      }\n      return false;\n    }\n    MessagingMode mode=mRcsSettings.getMessagingMode();\nswitch (mode) {\ncase INTEGRATED:\ncase SEAMLESS:\n      if ((FileTransferProtocol.MSRP == protocol && mRcsSettings.isFtAlwaysOn()) || (FileTransferProtocol.HTTP == protocol && mRcsSettings.isFtHttpCapAlwaysOn())) {\n        break;\n      }\n    if (!mImService.isCapabilitiesValid(remoteCapabilities)) {\n      if (sLogger.isActivated()) {\n        sLogger.debug(\"Cannot transfer file as the cached capabilities of contact \" + contact + \" are not valid anymore for one-to-one communication.\");\n      }\n      return false;\n    }\n  break;\ndefault :\nbreak;\n}\nreturn true;\n}\n catch (ServerApiBaseException e) {\nif (!e.shouldNotBeLogged()) {\nsLogger.error(ExceptionUtil.getFullStackTrace(e));\n}\nthrow e;\n}\ncatch (Exception e) {\nsLogger.error(ExceptionUtil.getFullStackTrace(e));\nthrow new ServerApiGenericException(e);\n}\n}\n", "public static void reportHostStatus(HostSpec hostSpec, HostStatus hostStatus) {\n    long now = currentTimeMillis();\n    synchronized (hostStatusMap) {\n      HostSpecStatus hostSpecStatus = hostStatusMap.get(hostSpec);\n      if (hostSpecStatus == null) {\n        hostSpecStatus = new HostSpecStatus(hostSpec);\n        hostStatusMap.put(hostSpec, hostSpecStatus);\n      }\n      hostSpecStatus.status = hostStatus;\n      hostSpecStatus.lastUpdated = now;\n    }\n  }", "\tpublic void setPredicate(Predicate p, Term[] args) {\n\t\tcode = p;\n\t\tcode.setArgument(args, new Success(this));\n\t}\n", "default boolean trySetDouble ( double value ) { if ( this . isValidDouble ( value ) ) { this . setDouble ( value ) ; return BOOL_ ; } else { return BOOL_ ; } }", "public void pause ( boolean pause ) { mAnimator . pause ( pause ) ; }", "public Line setGlyphs(int[] text, int offset, int length) {\n\t\tfor (int n = 0, i = offset; n < length; n++, i++) {\n\t\t\tint idx = text[i];\n\t\t\tif (idx != -1) {\n\t\t\t\tdrawN[n] = (short) idx;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}", "  public boolean moveTo(int location) throws Exception {\n    return db.moveTo(location);\n  }\n", "private static IQ respondError(AdHocCommandData response, StanzaError.Condition condition,\n            AdHocCommand.SpecificErrorCondition specificCondition) {\n        StanzaError.Builder error = StanzaError.getBuilder(condition).addExtension(new AdHocCommandData.SpecificError(specificCondition));\n        return respondError(response, error);\n    }", "@Override public void write(int b) throws IOException {\n  if (stack.size() == 0 || standaloneMarkers.contains(stack.peek().marker)) {\n    writeStuffed(b);\n  }\n else {\n    writeNonstuffed(b);\n  }\n}\n", "public void marshall(TaskDefinitionPlacementConstraint taskDefinitionPlacementConstraint, ProtocolMarshaller protocolMarshaller) {\n\n        if (taskDefinitionPlacementConstraint == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(taskDefinitionPlacementConstraint.getType(), TYPE_BINDING);\n            protocolMarshaller.marshall(taskDefinitionPlacementConstraint.getExpression(), EXPRESSION_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { request . getSession ( ) . setAttribute ( STR_ , STR_ ) ; response . sendRedirect ( STR_ ) ; return ; }", "\tprivate void loadLanguage(String language, String mergeWith) {\n\t\tProperties p = new Properties();\n\n\t\tif (mergeWith != null) {\n\t\t\tif (!this.isLanguageLoaded(mergeWith)) {\n\t\t\t\tthis.loadLanguage(mergeWith, null);\n\t\t\t}\n\n\t\t\tp.putAll(this.messages.get(mergeWith));\n\t\t}\n\n\t\ttry {\n\t\t\tp.load(this.getClass().getResourceAsStream(\"/jforumConfig/languages/\" + this.localeNames.getProperty(language)));\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new ForumException(e);\n\t\t}\n\n\t\tthis.messages.put(language, p);\n\t}\n", "\tprivate void setAllColliders(int i, Collider fn) {\n\t\tfor (int j = 0; j < Geom.NUM_GEOM_TYPES; j++)\n\t\t\tsetCollider(i, j, fn);\n\t}\n", "public void put(String key, String value, Charset charset)\n    {\n        BinaryValue wrappedKey = BinaryValue.unsafeCreate(key.getBytes(charset));\n        BinaryValue wrappedValue = BinaryValue.unsafeCreate(value.getBytes(charset));\n        meta.put(wrappedKey, wrappedValue);\n    }", "private Map<String, Object> bindBlocks(PrepareSignatureContext sig, PrepareInvocationContext inv) {\n\n    if(inv == null) {\n      return Collections.emptyMap();\n    }\n    \n    BlockDeclContext allDecl = null;\n    BlockDeclContext unnamedDecl = null;\n    \n    List<NamedOutputBlockContext> namedBlocks = new ArrayList<>(inv.namedBlocks);\n    Map<String, Object> blocks = new HashMap<>();\n    \n    for (BlockDeclContext blockDecl : sig.blockDecls) {\n      \n      if (blockDecl.flag != null) {\n        if (blockDecl.flag.getText().equals(\"*\")) {\n          if (allDecl != null) {\n            throw new ExecutionException(\"only a single parameter can be marked with '*'\", getLocation(blockDecl));\n          }\n          allDecl = blockDecl;\n        }\n        else if (blockDecl.flag.getText().equals(\"+\")) {\n          if (unnamedDecl != null) {\n            throw new ExecutionException(\"only a single parameter can be marked with '+'\", getLocation(blockDecl));\n          }\n          unnamedDecl = blockDecl;\n        }\n        else {\n          throw new ExecutionException(\"unknown block declaration flag\", getLocation(blockDecl));\n        }\n        continue;\n      }\n      \n      //Find the block\n      \n      ParserRuleContext paramBlock = findAndRemoveBlock(namedBlocks, name(blockDecl));\n      \n      //Bind the block\n      \n      BoundParamOutputBlock boundBlock = bindBlock(paramBlock);\n\n      blocks.put(name(blockDecl), boundBlock);\n      \n    }\n    \n    //\n    // Bind unnamed block (if requested)\n    //\n    \n    if (unnamedDecl != null) {\n      \n      UnnamedOutputBlockContext unnamedBlock = inv.unnamedBlock;\n      \n      BoundParamOutputBlock boundUnnamedBlock = bindBlock(unnamedBlock);\n      \n      blocks.put(unnamedDecl.id.getText(), boundUnnamedBlock);\n      \n    }\n    \n    //\n    // Bind rest of blocks (if requested)\n    //\n    \n    if (allDecl != null) {\n      \n      Map<String, Block> otherBlocks = new HashMap<>();\n      \n      // Add unnamed block if it wasn't bound explicitly\n      if (inv.unnamedBlock != null && unnamedDecl == null) {\n        \n        UnnamedOutputBlockContext unnamedBlock = inv.unnamedBlock;\n        \n        BoundParamOutputBlock boundUnnamedBlock = new BoundParamOutputBlock(unnamedBlock, mode(unnamedBlock), currentScope);\n        \n        otherBlocks.put(\"\", boundUnnamedBlock);\n      }\n      \n      // Add all other unbound blocks\n      for (NamedOutputBlockContext namedBlock : namedBlocks) {\n        \n        String blockName = nullToEmpty(name(namedBlock));\n        \n        BoundParamOutputBlock boundNamedBlock = new BoundParamOutputBlock(namedBlock, mode(namedBlock), currentScope);\n        \n        otherBlocks.put(blockName, boundNamedBlock);\n        \n      }\n\n      blocks.put(allDecl.id.getText(), otherBlocks);\n      \n    }\n\n    return blocks;\n  }", "public static void downloadFile(Context context, String fromUrl, File toFile,\n      DownloadProgressListener listener, DownloadCancelListener cancelListener) throws IOException {\n    downloadFileHandleRedirect(context, fromUrl, toFile, 0, listener, cancelListener);\n  }", "\tpublic void checkAll(boolean state) {\n\t\tif (state) {\n\t\t\tfCheckElements= getElements();\n\t\t} else {\n\t\t\tfCheckElements.clear();\n\t\t}\n\t\tif (fTable != null) {\n\t\t\t((CheckboxTableViewer)fTable).setAllChecked(state);\n\t\t}\n\t\tcheckStateChanged();\n\t}\n", "public int addGroup(double x, double y) {\n\t\tint pointIndex;\n\t\tif (this.pointCoordinates == null) {\n\t\t\tthis.pointCoordinates = new double[] {x, y};\n\t\t\tthis.partIndexes = null;\n\t\t\tpointIndex = 0;\n\t\t} else {\n\t\t\tdouble[] pts = new double[this.pointCoordinates.length + 2];\n\t\t\tSystem.arraycopy(this.pointCoordinates, 0, pts, 0, this.pointCoordinates.length);\n\t\t\tpointIndex = pts.length - 2;\n\t\t\tpts[pointIndex] = x;\n\t\t\tpts[pointIndex + 1] = y;\n\n\t\t\tfinal int groupCount = getGroupCount();\n\t\t\tint[] grps = new int[groupCount];\n\t\t\tif (this.partIndexes != null) {\n\t\t\t\tSystem.arraycopy(this.partIndexes, 0, grps, 0, groupCount - 1);\n\t\t\t}\n\t\t\tgrps[groupCount - 1] = pointIndex;\n\n\t\t\tthis.pointCoordinates = pts;\n\t\t\tpts = null;\n\n\t\t\tthis.partIndexes = grps;\n\t\t\tgrps = null;\n\n\t\t\tpointIndex /= 2;\n\t\t}\n\n\t\tfireShapeChanged();\n\t\tfireElementChanged();\n\n\t\treturn pointIndex;\n\t}", "protected IndexTreePath<E> createNewRoot(final N oldRoot, final N newNode) {\n    N root = createNewDirectoryNode();\n    writeNode(root);\n\n    // switch the ids\n    oldRoot.setPageID(root.getPageID());\n    if(!oldRoot.isLeaf()) {\n      for(int i = 0; i < oldRoot.getNumEntries(); i++) {\n        writeNode(getNode(oldRoot.getEntry(i)));\n      }\n    }\n\n    root.setPageID(getRootID());\n    root.addDirectoryEntry(createNewDirectoryEntry(oldRoot));\n    root.addDirectoryEntry(createNewDirectoryEntry(newNode));\n\n    writeNode(root);\n    writeNode(oldRoot);\n    writeNode(newNode);\n    if(getLogger().isDebugging()) {\n      getLogger().debugFine(\"Create new Root: ID=\" + root.getPageID() + \"\\nchild1 \" + oldRoot + \" \" + new HyperBoundingBox(createNewDirectoryEntry(oldRoot)) + \"\\nchild2 \" + newNode + \" \" + new HyperBoundingBox(createNewDirectoryEntry(newNode)));\n    }\n\n    return new IndexTreePath<>(null, getRootEntry(), -1);\n  }", "\tpublic String getSourceVarIdText(Object object) {\n\t\tif (object == null) {\n\t\t\treturn INodeTextProvider.NULL_TEXT;\n\t\t}\n\t\treturn doGetSourceVarIdText((AtcProvideTypeFromVar)object);\n\t}\n", "public PagedList<DiagnosticCategoryInner> listSiteDiagnosticCategoriesNext(final String nextPageLink) {\n        ServiceResponse<Page<DiagnosticCategoryInner>> response = listSiteDiagnosticCategoriesNextSinglePageAsync(nextPageLink).toBlocking().single();\n        return new PagedList<DiagnosticCategoryInner>(response.body()) {\n            @Override\n            public Page<DiagnosticCategoryInner> nextPage(String nextPageLink) {\n                return listSiteDiagnosticCategoriesNextSinglePageAsync(nextPageLink).toBlocking().single().body();\n            }\n        };\n    }", "  public void addData(GraphData add){\n    data.add(add);\n  }\n", "public View ( String typeName , String sqlExpression , QueryResultType queryResultType ) { super ( typeName , sqlExpression , queryResultType ) ; }", "public void softDelete(String type,String id,MetacatContext metacatContext){\n  try {\n    RETRY_ES_PUBLISH.call(null);\n  }\n catch (  Exception e) {\n    log.error(String.format(\"Failed deleting metadata of type %s with id %s\",type,id),e);\n    CounterWrapper.incrementCounter(\"dse.metacat.esDeleteFailure\");\n    log(\"ElasticSearchUtil.softDelete\",type,id,null,e.getMessage(),e,true);\n  }\n}\n", "public static void copyIntoColumn ( double [ ] [ ] destination , int column , double [ ] source ) throws Exception { if ( source . length != destination . length ) { throw new Exception ( STR_ + destination . length + STR_ + source . length + STR_ ) ; } f", "private void updateValues() {\n\t\tif (shouldReactToProgrammaticChangeEvents) {\n\t\t\tString fname = comboFonts.getSelectedItem().toString();\n\t\t\tint size = 11;\n\t\t\ttry {\n\t\t\t\tsize = Integer\n\t\t\t\t\t\t.parseInt(comboSizes.getSelectedItem().toString());\n\t\t\t} catch (Nu", "public static boolean isIgnoredProfile(String realm){\n  return IGNORE_PROFILE.equalsIgnoreCase(getProfileAttribute(realm));\n}\n", "void updateBuffers(int bytesWritten){\n  for (int i=0; i < numBufs; i++) {\n    ByteBuffer nextBuffer=bufs[i];\n    int pos=nextBuffer.position();\n    int lim=nextBuffer.limit();\n    int len=(pos <= lim ? lim - pos : lim);\n    if (bytesWritten >= len) {\n      bytesWritten-=len;\n      int newPosition=pos + len;\n      try {\n        nextBuffer.position(newPosition);\n      }\n catch (      IllegalArgumentException x) {\n      }\n    }\n else {\n      if (bytesWritten > 0) {\n        assert (pos + bytesWritten < (long)Integer.MAX_VALUE);\n        int newPosition=pos + bytesWritten;\n        try {\n          nextBuffer.position(newPosition);\n        }\n catch (        IllegalArgumentException x) {\n        }\n      }\n      break;\n    }\n  }\n}\n", "void changedColor ( Color color ) ;", "    public CharBuffer get(char[] dst, int off, int len) {\n        int length = dst.length;\n        if ((off < 0) || (len < 0) || (long) off + (long) len > length) {\n            throw new IndexOutOfBoundsException();\n        }\n\n        if (len > remaining()) {\n            throw new BufferUnderflowException();\n        }\n        for (int i = off; i < off + len; i++) {\n            dst[i] = get();\n        }\n        return this;\n    }\n", "public void processRegexOpener ( ) { allowSharpQuote = BOOL_ ; isEscaped = BOOL_ ; regexCommand = yytext ( ) ; if ( StringUtil . equals ( STR_ , regexCommand ) ) { sectionsNumber = NUM_ ; } else { sectionsNumber = NUM_ ; } pushState ( ) ; yybegin ( LEX_REGEX_OPENER ) ; }", "void performPostCreationTasks()\n    {\n        StatusAction statusAction = new StatusAction();\n        try\n        {\n            ResponseEvents events = CoherentManagerConnection.sendEventGeneratingAction(statusAction, 1000);\n            for (ResponseEvent event : events.getEvents())\n            {\n                if (event instanceof StatusEvent)\n                {\n                    // do nothing. Creating the events will register the\n                    // channels, which is after all what we are trying to do.\n                }\n            }\n\n        }\n        catch (IllegalArgumentException | IllegalStateException | IOException | TimeoutException e)\n        {\n            logger.error(e, e);\n        }\n\n    }", "public SoyGeneralOptions setCompileTimeGlobals(URL compileTimeGlobalsResource)\n      throws IOException {\n    setCompileTimeGlobalsInternal(\n        SoyUtils.parseCompileTimeGlobals(\n            Resources.asCharSource(compileTimeGlobalsResource, UTF_8)));\n    return this;\n  }", "public CampaignsResponse withItem(CampaignResponse... item) {\n        if (this.item == null) {\n            setItem(new java.util.ArrayList<CampaignResponse>(item.length));\n        }\n        for (CampaignResponse ele : item) {\n            this.item.add(ele);\n        }\n        return this;\n    }", "public static void toggleBreakpoint ( final BackEndDebuggerProvider debuggerProvider , final INaviFunctionNode functionNode ) { Preconditions . checkNotNull ( debuggerProvider , STR_ ) ; Preconditions . checkNotNull ( functionNode , STR_ ) ; if ( functionNode . getFunction ( ) . getType ( ) == FunctionType . IMPORT ) { return ; } final IDebugger debugger = getDebugger ( debuggerProvider , functionNode ) ; if ( debugger == null ) { return ; } final INaviModule module = functionNode . getFunction ( ) . getModule ( ) ; CGraphDebugger . toggleBreakpoint ( debugger . getBreakpointManager ( ) , module , new UnrelocatedAddress ( functionNode . getFunction ( ) . getAddress ( ) ) ) ; }", "public boolean hasVariable ( String name ) { return variables != null && variables . containsKey ( name ) ; }", "private CGlobalSettings ( ) { }", "    public void setStatus(int aCode, String aMessage) {\n        try {\n            sendError(aCode, aMessage);\n        }\n        catch (IOException ioe) {\n            // ignore\n        }\n    }\n", "public static boolean verifySignature(byte[] publicKey, byte[] message, byte[] signature) {\n        return curve_sigs.curve25519_verify(SHA512Provider, signature, publicKey, message, message.length) == 0;\n    }", "public IndexFacesResult withUnindexedFaces(UnindexedFace... unindexedFaces) {\n        if (this.unindexedFaces == null) {\n            setUnindexedFaces(new java.util.ArrayList<UnindexedFace>(unindexedFaces.length));\n        }\n        for (UnindexedFace ele : unindexedFaces) {\n            this.unindexedFaces.add(ele);\n        }\n        return this;\n    }", "boolean tryAdd(TaskMessage taskMsg) {\n        if ((encodedLength + msgEncodeLength(taskMsg)) > buffer_size)\n            return false;\n        add(taskMsg);\n        return true;\n    }", "public static Runnable start(Stage stage) {\n        CSSFXConfig cfg = new CSSFXConfig();\n        cfg.setRestrictedToStage(stage);\n        return cfg.start();\n    }", "public Builder customProperty ( String name , Number value ) { return customProperty ( new Property ( name , value ) ) ; }", "public static byte [ ] doubleToRegisters ( double d ) { return longToRegisters ( Double . doubleToLongBits ( d ) ) ; }", "public static int findBestSampleSize ( int actualWidth , int actualHeight , int desiredWidth , int desiredHeight ) { double wr = ( double ) actualWidth / desiredWidth ; double hr = ( double ) actualHeight / desiredHeight ; double ratio = Math . min ( wr ,", "public static synchronized int registerTokenForUDF(String functionName,\n                                                       int functionId,\n                                                       VoltType voltReturnType,\n                                                       VoltType[] voltParameterTypes) {\n        int retFunctionId;\n        Type hsqlReturnType = hsqlTypeFromVoltType(voltReturnType);\n        Type[] hsqlParameterTypes = hsqlTypeFromVoltType(voltParameterTypes);\n        // If the token is already registered in the map, do not bother again.\n        FunctionDescriptor oldFd = findFunction(functionName, hsqlReturnType, hsqlParameterTypes);\n        if (oldFd != null) {\n            // This may replace functionName with itself. This will not be an error.\n            FunctionDescriptor.addDefinedFunction(functionName, oldFd);\n            retFunctionId = oldFd.getId();\n            // If we were given a non-negative function id, it\n            // was defined in the catalog.  Our re-verification here\n            // should have a value which we put into the catalog sometime\n            // earlier.  So, this earlier value should match the one we\n            // were told to return.\n            assert((functionId < 0) || (functionId == retFunctionId));\n        } else {\n            // if the function was not already defined, then\n            //   if functionId is a valid UDF id or pre-defined SQL function id, then use it\n            //   otherwise, we want a new number.\n            //\n            if (functionId > 0) {\n                retFunctionId = functionId;\n            } else {\n                retFunctionId = getNextFunctionId();\n            }\n            FunctionDescriptor fd = makeFunctionDescriptorFromParts(functionName, retFunctionId,\n                                                            hsqlReturnType, hsqlParameterTypes);\n            // if the function id belongs to UDF, put it into the defined_function map\n            if (isUserDefinedFunctionId(retFunctionId)) {\n                FunctionDescriptor.addDefinedFunction(functionName, fd);\n            }\n            m_logger.debug(String.format(\"Added UDF \\\"%s\\\"(%d) with %d parameters\",\n                                        functionName, retFunctionId, voltParameterTypes.length));\n        }\n        // Ensure that m_udfSeqId is larger than all the\n        // ones we've seen so far.\n        if (m_udfSeqId <= retFunctionId) {\n            m_udfSeqId = retFunctionId + 1;\n        }\n        return retFunctionId;\n    }", "private void saveToSettings(){\n  List<String> dataToSave=new LinkedList<>();\n  for (  UsercolorItem item : data) {\n    dataToSave.add(item.getId() + \",\" + HtmlColors.getColorString(item.getColor()));\n  }\n  settings.putList(\"usercolors\",dataToSave);\n}\n", "public java.lang.StringBuilder append(int i){\n  return append(Integer.toString(i));\n}\n", "private static boolean isPropertyName(String name) {\n        return ((name.length() > 0) && Character.isUpperCase(name.charAt(0))) || ((name.length() > 1) && Character.isUpperCase(name.charAt(1)));\n    }", "    protected Schema getSchemaDefFromCache(ReferenceType aKey) throws AeResourceException {\n        Schema def = null;\n        Element e = mCache.get(toKey(aKey));\n        if (e != null)\n            def = (Schema) e.getObjectValue();\n        if (def == null) {\n            def = getSchemaDefForLocation(aKey);\n            mCache.put(new Element(toKey(aKey), def));\n        }\n\n        return def;\n    }\n", "public String[] abdicateDomOwnership(String[] uuids) throws RuntimeFault, RemoteException {\r\n        return getVimService().abdicateDomOwnership(getMOR(), uuids);\r\n    }", "private XPathFactory loadFromServicesFile(String uri, String resourceName, InputStream in) {\n\n        if (debug) debugPrintln(\"Reading \" + resourceName );\n\n        BufferedReader rd;\n        try {\n            rd = new BufferedReader(new InputStreamReader(in, \"UTF-8\"), DEFAULT_LINE_LENGTH);\n        } catch (java.io.UnsupportedEncodingException e) {\n            rd = new BufferedReader(new InputStreamReader(in), DEFAULT_LINE_LENGTH);\n        }\n\n        String factoryClassName;\n        XPathFactory resultFactory = null;\n        // See spec for provider-configuration files: http://java.sun.com/j2se/1.5.0/docs/guide/jar/jar.html#Provider%20Configuration%20File\n        while (true) {\n            try {\n                factoryClassName = rd.readLine();\n            } catch (IOException x) {\n                // No provider found\n                break;\n            }\n            if (factoryClassName != null) {\n                // Ignore comments in the provider-configuration file\n                int hashIndex = factoryClassName.indexOf('#');\n                if (hashIndex != -1) {\n                    factoryClassName = factoryClassName.substring(0, hashIndex);\n                }\n\n                // Ignore leading and trailing whitespace\n                factoryClassName = factoryClassName.trim();\n\n                // If there's no text left or if this was a blank line, go to the next one.\n                if (factoryClassName.length() == 0) {\n                    continue;\n                }\n\n                try {\n                    // Found the right XPathFactory if its isObjectModelSupported(String uri) method returns true.\n                    XPathFactory foundFactory = createInstance(factoryClassName);\n                    if (foundFactory.isObjectModelSupported(uri)) {\n                        resultFactory = foundFactory;\n                        break;\n                    }\n                } catch (Exception ignored) {\n                }\n            }\n            else {\n                break;\n            }\n        }\n\n        IoUtils.closeQuietly(rd);\n\n        return resultFactory;\n    }", "public Image convertToArdor3DImage(ByteBuffer raster,int pixelSize,DataType dataType,int width,int height){\n  return (convertToArdor3DImage(raster,pixelSize,null,dataType,width,height));\n}\n", "public StatelessScrollableDataIterator ( String entityName , SessionFactory sessionFactory , int fetchSize , boolean performOrderById ) { super ( entityName , sessionFactory , fetchSize , performOrderById ) ; }", "public void setPeriod(ReadableInstant start, ReadableInstant end) {\n        if (start == end) {\n            setPeriod(0L);\n        } else {\n            long startMillis = DateTimeUtils.getInstantMillis(start);\n            long endMillis = DateTimeUtils.getInstantMillis(end);\n            Chronology chrono = DateTimeUtils.getIntervalChronology(start, end);\n            setPeriod(startMillis, endMillis, chrono);\n        }\n    }", "private void initMethod ( Table table ) { String note = STR_ ; boolean valid = validateTable ( table ) ; if ( ! valid && methodPk ) { methodPk = BOOL_ ; note = STR_ ; } if ( methodPk ) { println ( String . format ( STR_ + note ) ) ; } else { println ( String . format ( STR_ + note ) ) ; } }", "private String giveTextInBestLanguage(String elementName){\n  if (mElementMap.containsKey(elementName + mRequestedLanguage)) {\n    return mElementMap.get(elementName + mRequestedLanguage);\n  }\n else   if (mElementMap.containsKey(elementName + DEFAULT_LANGUAGE)) {\n    return mElementMap.get(elementName + DEFAULT_LANGUAGE);\n  }\n else   if (mElementMap.containsKey(elementName + mFirstLanguage)) {\n    return mElementMap.get(elementName + mFirstLanguage);\n  }\n else {\n    return mElementMap.get(elementName);\n  }\n}\n", "public void removeEdtErrorHandler(ActionListener e){\n  if (errorHandler != null) {\n    errorHandler.removeListener(e);\n    Collection v=errorHandler.getListenerCollection();\n    if (v == null || v.size() == 0) {\n      errorHandler=null;\n    }\n  }\n}\n", "private static boolean allNull ( Object [ ] array ) { for ( int i = array . length ; -- i >= NUM_ ; ) { if ( array [ i ] != null ) return BOOL_ ; } return BOOL_ ; }", "static public Key[] exit(Key... keep) {\n    List<Key> keylist = new ArrayList<>();\n    if( keep != null )\n      for( Key k : keep ) if (k != null) keylist.add(k);\n    Object[] arrkeep = keylist.toArray();\n    Arrays.sort(arrkeep);\n    Stack<HashSet<Key>> keys = _scope.get()._keys;\n    if (keys.size() > 0) {\n      Futures fs = new Futures();\n      for (Key key : keys.pop()) {\n        int found = Arrays.binarySearch(arrkeep, key);\n        if ((arrkeep.length == 0 || found < 0) && key != null) Keyed.remove(key, fs);\n      }\n      fs.blockForPending();\n    }\n    return keep;\n  }", "protected void closeResources ( Connection connection , Statement statement ) { if ( cacheStatements ) return ; if ( statement != null ) { try { statement . close ( ) ; } catch ( SQLException e ) { LOG . finest ( STR_ + e . getMessage ( ) + STR_ ) ; } } c", "    public void paint(Graphics g) {\n        if(isOpaque()) {\n            Rectangle r = g.getClipBounds();\n            Color c = getBackground();\n            if(c == null)\n                c = Color.lightGray;\n            g.setColor(c);\n            if (r != null) {\n                g.fillRect(r.x, r.y, r.width, r.height);\n            }\n            else {\n                g.fillRect(0, 0, getWidth(), getHeight());\n            }\n        }\n        super.paint(g);\n    }\n", "private void sendCloseSession() throws IOException{\n        ProtocolHeader h = new ProtocolHeader();\n        h.setType(ProtocolType.CloseSession);\n\n        sendAdminPacket(h, null);\n    }", "@Override\n\tpublic ConfigParams readConfig(String correlationId, ConfigParams parameters) throws ApplicationException {\n\t\tObject value = readObject(correlationId, parameters);\n\t\treturn ConfigParams.fromValue(value);\n\t}", "public boolean add(Element element) throws DocumentException {\n        if (pause) {\n            return false;\n        }\n        RtfBasicElement[] rtfElements = rtfDoc.getMapper().mapElement(element);\n        if(rtfElements.length != 0) {\n            for(int i = 0; i < rtfElements.length; i++) {\n                if(rtfElements[i] != null) {\n                    rtfDoc.add(rtfElements[i]);\n                }\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }", "\tpublic int hashCode() {\n\t\treturn workItemId;\n\t}\n", "public void handleTblDataActionHrefRequest(RequestInvocationEvent event) throws ModelControlException {\n  String prevRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);\n  setPageSessionAttribute(AMAdminConstants.PREVIOUS_REALM,prevRealm);\n  String newRealm=hexToString((String)getDisplayFieldValue(TBL_DATA_ACTION_HREF));\n  setPageSessionAttribute(AMAdminConstants.CURRENT_REALM,newRealm);\n  setCurrentLocation(newRealm);\n  String tmp=(String)getPageSessionAttribute(getTrackingTabIDName());\n  setPageSessionAttribute(AMAdminConstants.PREVIOUS_TAB_ID,tmp);\n  AMViewConfig config=AMViewConfig.getInstance();\n  RMRealmModel model=(RMRealmModel)getModel();\n  unlockPageTrail();\n  try {\n    AMViewBeanBase vb=config.getTabViewBean(this,newRealm,model,\"realms\",-1,-1);\n    passPgSessionMap(vb);\n    vb.forwardTo(getRequestContext());\n  }\n catch (  AMConsoleException e) {\n    setPageSessionAttribute(AMAdminConstants.CURRENT_REALM,prevRealm);\n    removePageSessionAttribute(AMAdminConstants.PREVIOUS_TAB_ID);\n    setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());\n    forwardTo();\n  }\n}\n", "\tpublic void setValues() {\n\t\tfritzBoxPanel.loadSettings();\n\t\tphonePanel.loadSettings();\n\t\tmessagePanel.loadSettings();\n\t\tcallMonitorPanel.loadSettings();\n\t\tlanguagePanel.loadSettings();\n\t\totherPanel.loadSettings();\n\t\tnetworkPanel.loadSettings();\n\t\tcallerListPanel.loadSettings();\n\t\tcallerListAppearancePanel.loadSettings();\n\t\tsipPanel.loadSettings();\n\t}\n", "public static void write(OMPoly poly,Link link,LinkProperties props) throws IOException {\nswitch (poly.getRenderType()) {\ncase OMPoly.RENDERTYPE_LATLON:\n    write(poly.getLatLonArray(),OMPoly.RADIANS,poly.getLineType(),poly.getNumSegs(),props,link.dos);\n  break;\ncase OMPoly.RENDERTYPE_XY:\nwrite(poly.getXs(),poly.getYs(),props,link.dos);\nbreak;\ncase OMPoly.RENDERTYPE_OFFSET:\nwrite((float)poly.getLat(),(float)poly.getLon(),poly.getXs(),poly.getYs(),poly.getCoordMode(),props,link.dos);\nbreak;\ndefault :\nDebug.error(\"LinkPoly.write: poly rendertype unknown.\");\n}\n}\n", "    protected String beforeLoad(IPersistenceObject persistenceObject, BasicDTO dto) throws BasicException {\n        return \"\";        \n    }\n", "public static void printLabels(PrintStream out,Path imagePath,List<EntityAnnotation> labels){\n  out.printf(\"Labels for image %s:\\n\",imagePath);\n  for (  EntityAnnotation label : labels) {\n    out.printf(\"\\t%s (score: %.3f)\\n\",label.getDescription(),label.getScore());\n  }\n  if (labels.isEmpty()) {\n    out.println(\"\\tNo labels found.\");\n  }\n}\n", "public int insertFromScan ( Scan s ) { if ( ! super . insertIntoNextEmptySlot ( ) ) { return NUM_ ; } for ( String fldName : sch . fields ( ) ) { Constant val = s . getVal ( fldName ) ; this . setVal ( fldName , val ) ; } if ( s . next ( ) ) return NUM_ ;", "\tpublic void append(String data) {\n\n\t\t// sanity check\n\t\tif (!isOpen()) {\n\t\t\t// constants.error(\"trying to write to un-open file\", this);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!isLocked()) {\n\t\t\t// constants.error(\"trying to write to un-locked file\", this);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\n\t\t\t// position file pointer at the end of the logfile\n\t\t\tlogfile.seek(logfile.length());\n\n\t\t\t// log zephyr.framework.state\n\t\t\tlogfile.writeBytes(data + CRLF);\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n", "@Override\n    public DeleteCodeRepositoryResult deleteCodeRepository(DeleteCodeRepositoryRequest request) {\n        request = beforeClientExecution(request);\n        return executeDeleteCodeRepository(request);\n    }", "    private Expression readPositionExpression() throws HsqlException {\n\n        read();\n        readThis(Expression.OPEN);\n\n        Function f = new Function(Token.T_POSITION,\n                                  \"org.hsqldb.Library.position\", false);\n\n        f.setArgument(0, readTerm());\n        readThis(Expression.IN);\n        f.setArgument(1, readOr());\n        readThis(Expression.CLOSE);\n\n        return new Expression(f);\n    }\n", "\tprotected ActionForm populateActionForm(Object rawData) {\n\t\treturn new UserProfileEditForm((User) rawData);\n\t}\n", "    public boolean maxValue(Integer value, int max) {\n        return maxValue(value.intValue(), max);\n    }\n", "private int checkUserLink ( SpannableStringBuilder out , String in , int start ) { int pos = start + NUM_ ; StringBuilder temp = new StringBuilder ( ) ; String targetString = in . substring ( pos , Math . min ( in . length ( ) , pos + NUM_ ) ) ; for ( int", "public PagedResultsResponseControl(String id,boolean criticality,byte[] value) throws IOException {\n  super(id,criticality,value);\n  BerDecoder ber=new BerDecoder(value,0,value.length);\n  ber.parseSeq(null);\n  resultSize=ber.parseInt();\n  cookie=ber.parseOctetString(Ber.ASN_OCTET_STR,null);\n}\n", "public Object nativeToJava(TransferData transferData){\n\tif (!isSupportedType(transferData) || transferData.data == null) return null;\n\tNSString string = (NSString) transferData.data;\n\treturn string.getString();\n}\n", "public static void bufferedToInterleaved(DataBufferByte buffer, WritableRaster src, InterleavedF32 dst) {\n\t\tbyte[] srcData = buffer.getData();\n\n\t\tint srcStride = stride(src);\n\t\tint srcOffset = getOffset(src);\n\n\t\tint length = dst.width*dst.numBands;\n\n\t\t//CONCURRENT_BELOW BoofConcurrency.loopFor(0, dst.height, y -> {\n\t\tfor (int y = 0; y < dst.height; y++) {\n\t\t\tint indexSrc = srcOffset + y*srcStride;\n\t\t\tint indexDst = dst.startIndex + dst.stride * y;\n\t\t\tint indexDstEnd = indexDst + length;\n\t\t\twhile( indexDst < indexDstEnd) {\n\t\t\t\tdst.data[indexDst++] = srcData[indexSrc++] & 0xFF;\n\t\t\t}\n\t\t}\n\t\t//CONCURRENT_ABOVE });\n\t}", "public OutputStream write ( ) { data = null ; write = new ByteArrayOutputStream ( ) ; return write ; }", "private void prepareTransfers ( ) throws LibUsbException { if ( mAvailableTransfers == null ) { mAvailableTransfers = new LinkedTransferQueue < > ( ) ; for ( int x = NUM_ ; x < TRANSFER_BUFFER_POOL_SIZE ; x ++ ) { Transfer transfer = LibUsb . allocTransfe", "public static ArrayList<Integer> loadReports(Properties ctx){\n  int roleId=Env.getContextAsInt(ctx,UdiConstants.AD_ROLE_ID);\n  return loadReports(ctx,roleId);\n}\n", "public String namespaceString(String plainString) throws RuntimeException {\n    \tif(plainString.startsWith(NAME_SPACE_PREFIX)) {\n    \t\treturn (plainString.replace(NAME_SPACE_PREFIX, nameSpaceThreadLocale.get()));    \t\t\n    \t}\n    \tif(plainString.startsWith(SCENARIO_NAME_SPACE_PREFIX)) {\n    \t\tif(cucumberManager.getCurrentScenarioGlobals() == null) {\n    \t\t\tthrow new ScenarioNameSpaceAccessOutsideScenarioScopeException(\"You cannot fetch a Scneario namespace outside the scope of a scenario\");\n    \t\t}\n    \t\treturn (plainString.replace(SCENARIO_NAME_SPACE_PREFIX, cucumberManager.getCurrentScenarioGlobals().getNameSpace()));    \t\t\n    \t}\n    \telse {\n    \t\treturn plainString;\n    \t}\n    }", "public void marshall(GetHostnameSuggestionRequest getHostnameSuggestionRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (getHostnameSuggestionRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(getHostnameSuggestionRequest.getLayerId(), LAYERID_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "    public File outputDir(File src, File explicitOutputDir, String mapperName) throws IOException {\n        File outputDir;\n        int prev;\n        int idx;\n        File subDir;\n\n        if (explicitOutputDir == null) {\n            outputDir = src.getParentFile();\n        } else {\n            outputDir = explicitOutputDir;\n            idx = mapperName.indexOf('.');\n            prev = 0;\n            while (idx != -1) {\n                subDir = new File(outputDir, mapperName.substring(prev, idx));\n                if (!subDir.isDirectory()) {\n                    if (!subDir.mkdir()) {\n                        throw new IOException(\"cannot create directory: \" + subDir);\n                    }\n                }\n                prev = idx + 1;\n                idx = mapperName.indexOf('.', prev);\n                outputDir = subDir;\n            }\n        }\n        return outputDir;\n    }\n", "public RequestToken login(String registrationId, BaasHandler<BaasUser> handler) {\n        return login(registrationId, RequestOptions.DEFAULT, handler);\n    }", "public WriteMemoryCommand ( final int packetId , final IAddress address , final byte [ ] data ) { super ( DebugCommandType . CMD_WRITE_MEMORY , packetId ) ; addArgument ( new DebugMessageAddressArgument ( address ) ) ; addArgument ( new DebugMessageRawArg", "    public void push(Object obj) {\n        this.list.add(obj);\n    }\n", "public synchronized Class defineClass(String name,byte[] bytecode,ProtectionDomain domain){\n  inDefine=true;\n  Class c=defineClass(name,bytecode,0,bytecode.length,domain);\n  loadedClasses.put(name,c);\n  resolveClass(c);\n  inDefine=false;\n  return c;\n}\n", "public Rectangle getBarcodeSize() {\n        float width = ((code.length() + 1) * 5 + 1) * n + x;\n        return new Rectangle(width, barHeight);\n    }", "\tpublic String getStreetLine3() {\n\t\treturn(primitive.getStreet().getLine3());\n\t}\n", "public Object saveState(FacesContext context)\n    {\n        Map serializableMap = (isInitialStateMarked()) ? _deltas : _fullState;\n\n        if (_initialState != null && _deltas != null && !_deltas.isEmpty()\n            && isInitialStateMarked())\n        {\n            // Before save the state, check if the property was changed from the\n            // initial state value. If the property was changed but it has the\n            // same value from the one in the initial state, we can remove it\n            // from delta, because when the view is built again, it will be\n            // restored to the same state. This check suppose some additional\n            // map.get() calls when saving the state, but using it only in properties\n            // that are expected to change over lifecycle (value, localValueSet,\n            // submittedValue, valid), is worth to do it, because those ones\n            // always generated delta changes.\n            for (int i = 0; i < _initialState.length; i+=2)\n            {\n                Serializable key = (Serializable) _initialState[i];\n                Object defaultValue = _initialState[i+1];\n                \n                // Check only if there is delta state for that property, in other\n                // case it is not necessary. Remember it is possible to have\n                // null values inside the Map.\n                if (_deltas.containsKey(key))\n                {\n                    Object deltaValue = _deltas.get(key);\n                    if (deltaValue == null && defaultValue == null)\n                    {\n                        _deltas.remove(key);\n                        if (_deltas.isEmpty())\n                        {\n                            break;\n                        }\n                    }\n                    if (deltaValue != null && deltaValue.equals(defaultValue))\n                    {\n                        _deltas.remove(key);\n                        if (_deltas.isEmpty())\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        if (serializableMap == null || serializableMap.size() == 0)\n        {\n            return null;\n        }\n        \n        /*\n        int stateHolderKeyCount = 0;\n        if (isInitalStateMarked())\n        {\n            for (Iterator<Serializable> it = _stateHolderKeys.iterator(); it.hasNext();)\n            {\n                Serializable key = it.next();\n                if (!_deltas.containsKey(key))\n                {\n                    stateHolderKeyCount++;\n                }\n            }\n        }*/\n        \n        Map.Entry<Serializable, Object> entry;\n        //entry == key, value, key, value\n        Object[] retArr = new Object[serializableMap.entrySet().size() * 2];\n        //Object[] retArr = new Object[serializableMap.entrySet().size() * 2 + stateHolderKeyCount]; \n\n        Iterator<Map.Entry<Serializable, Object>> it = serializableMap\n                .entrySet().iterator();\n        int cnt = 0;\n        while (it.hasNext())\n        {\n            entry = it.next();\n            retArr[cnt] = entry.getKey();\n\n            Object value = entry.getValue();\n            \n            // The condition in which the call to saveAttachedState\n            // is to handle List, StateHolder or non Serializable instances.\n            // we check it here, to prevent unnecessary calls.\n            if (value instanceof StateHolder ||\n                value instanceof List ||\n                !(value instanceof Serializable))\n            {\n                Object savedValue = UIComponentBase.saveAttachedState(context,\n                    value);\n                retArr[cnt + 1] = savedValue;\n            }\n            else\n            {\n                retArr[cnt + 1] = value;\n            }\n            cnt += 2;\n        }\n        \n        /*\n        if (isInitalStateMarked())\n        {\n            for (Iterator<Serializable> it2 = _stateHolderKeys.iterator(); it.hasNext();)\n            {\n                Serializable key = it2.next();\n                if (!_deltas.containsKey(key))\n                {\n                    retArr[cnt] = key;\n                    Object value = _fullState.get(key);\n                    if (value instanceof PartialStateHolder)\n                    {\n                        //Could contain delta, save it as _AttachedDeltaState\n                        PartialStateHolder holder = (PartialStateHolder) value;\n                        if (holder.isTransient())\n                        {\n                            retArr[cnt + 1] = null;\n                        }\n                        else\n                        {\n                            retArr[cnt + 1] = new _AttachedDeltaWrapper(value.getClass(), holder.saveState(context));\n                        }\n                    }\n                    else\n                    {\n                        //Save everything\n                        retArr[cnt + 1] = UIComponentBase.saveAttachedState(context, _fullState.get(key));\n                    }\n                    cnt += 2;\n                }\n            }\n        }\n        */\n        return retArr;\n    }", "public DatabaseAutomaticTuningInner update(String resourceGroupName, String serverName, String databaseName, DatabaseAutomaticTuningInner parameters) {\n        return updateWithServiceResponseAsync(resourceGroupName, serverName, databaseName, parameters).toBlocking().single().body();\n    }", "    public String getStyle() {\n\n        ValueBinding vb = getValueBinding(\"style\");\n        if (vb != null) {\n            return (String) vb.getValue(getFacesContext());\n        } else {\n            return style;\n        }\n\n    }\n", "public static int len(String list, char delimiter, boolean ignoreEmpty) {\n\tint len = StringUtil.length(list);\n\tif (len == 0) return 0;\n\n\tint count = 0;\n\tint last = 0;\n\n\tfor (int i = 0; i < len; i++) {\n\t    if (list.charAt(i) == delimiter) {\n\t\tif (!ignoreEmpty || last < i) count++;\n\t\tlast = i + 1;\n\t    }\n\t}\n\tif (!ignoreEmpty || last < len) count++;\n\treturn count;\n    }", "    public boolean equals(Object obj) {\n\t// Quick reject tests\n        if (obj == null) \n            return false;\n\tif (this == obj)\n           return true;\n        if (!(obj instanceof SharedActivationPolicyPermission))\n           return false;\n\n        SharedActivationPolicyPermission other = \n            (SharedActivationPolicyPermission)obj; \n\n\tboolean answer = policyPermission.equals(other.policyPermission);\n\tif (DEBUG) {\n\t    System.out.println(\"SharedActivationPolicyPermission::equals() - \" \n\t        + \"checking \" + policyPermission + \" vs. \" \n\t        + other.policyPermission + \": \" + answer);\n\t}\n\n\treturn answer; \n    }\n", "public Set getEdges() {\n\t\ttry {\n\t\t\t// generate a list of IDs with an all vertex query\n\t\t\treturn idsToEdges( querier.allEdgeQuery() );\n\t\t} catch (SQLException e) {\n\t\t\tthrow new FatalException(\"SQL\", e );\n\t\t}\n\t}", "  private int mapIndex(final int index) {\n    return (bufferstart + index) % elements.length;\n  }\n", "@Override\n    public AssociateTagOptionWithResourceResult associateTagOptionWithResource(AssociateTagOptionWithResourceRequest request) {\n        request = beforeClientExecution(request);\n        return executeAssociateTagOptionWithResource(request);\n    }", "    private void combineEntries(ArrayList<long[]> list, int total) {\n        Collections.sort(list, this);\n        for (int minGap = 10; minGap < total; minGap += minGap / 2) {\n            for (int i = 0; i < list.size() - 1; i++) {\n                long[] current = list.get(i);\n                long[] next = list.get(i + 1);\n                if (current[1] + minGap >= next[0]) {\n                    current[1] = next[1];\n                    list.remove(i + 1);\n                    i--;\n                }\n            }\n            int searched = 0;\n            for (long[] range : list) {\n                searched += range[1] - range[0] + 1;\n            }\n            if (searched > 2 * total || list.size() < 100) {\n                break;\n            }\n        }\n    }\n", "private void populateDataRecyclerList(){\n  dataAdapter.setCycle(cycle);\n  dataAdapter.setDividerHeader(new RecyclerDivider(resources.getString(R.string.app_usage_header),-1));\n  dataAdapter.setAppUsage(usages);\n  dataAdapter.setMyAppHeader(new RecyclerDiv", "private static Integer computeLegacyIdFromCamera2Id(@Nonnull String camera2Id){\n  try {\n    return Integer.parseInt(camera2Id);\n  }\n catch (  NumberFormatException ignored) {\n  }\n  return null;\n}\n", "private AuthenticationProvider getAuthenticationProvider(String identifier) {\n\n        // Iterate through all installed AuthenticationProviders, searching for\n        // the given identifier\n        for (AuthenticationProvider authProvider : authProviders) {\n            if (authProvider.getIdentifier().equals(identifier))\n                return authProvider;\n        }\n\n        // No such AuthenticationProvider found\n        return null;\n\n    }", "public double yield ( final double cleanPrice , final DayCounter dc , final Compounding comp , final Frequency freq , Date settlementDate , final double accuracy , final int maxEvaluations ) { if ( settlementDate . isNull ( ) ) { settlementDate = settlementDate ( ) ; } final Brent solver = new Brent ( ) ; solver . setMaxEvaluations ( maxEvaluations ) ; final double dirtyPrice = cleanPrice + accruedAmount ( settlementDate ) ; final YieldFinder objective = new YieldFinder ( notional ( settlementDate ) , this . cashflows_ , dirtyPrice , dc , comp , freq , settlementDate ) ; return solver . solve ( objective , accuracy , NUM_ , NUM_ , NUM_ ) ; }", "public static ThreatResult withData ( String type , String desc , MethodNode mn , List < String > detections ) { String detectionStr = STR_ ; for ( String detection : detections ) { detectionStr += detection + STR_ ; } return new ThreatResult ( type , des", "public void addListener(final IBookmarkManagerListener listener){\n  m_listeners.addListener(listener);\n}\n", "public String parseApkFilePath ( Element element ) { return element . getText ( ) ; }", "    public void characters(char ch[], int start, int len) {\n        ConfigurationImpl c=(ConfigurationImpl)this.stack.peek();\n        c.appendValueData(new String(ch,start,len));\n    }\n", "Double nmeaLatToDecimal(String nmea) throws NumberFormatException {\n  int deg=Integer.parseInt(nmea.substring(0,2));\n  Double min=Double.parseDouble(nmea.substring(2));\n  return deg + min / 60d;\n}\n", "public boolean isJustBefore(SourceLocation that) {\n    if (!this.filePath.equals(that.filePath)) {\n      return false;\n    }\n\n    return this.getEndLine() == that.getBeginLine()\n        && this.getEndColumn() + 1 == that.getBeginColumn();\n  }", "public int intValue(){\n  return value;\n}", "@Override public HeadersRequestCondition combine(HeadersRequestCondition other){\n  Set<HeaderExpression> set=new LinkedHashSet<>(this.expressions);\n  set.addAll(other.expressions);\n  return new HeadersRequestCondition(set);\n}\n", "    private HistoryPoint getHistory(int location) {\n        if (this.history.isEmpty() || location < 0) {\n            return new HistoryPoint();\n        }\n        if (location > this.history.size() - 1) {\n            location = this.history.size() - 1;\n        }\n        return this.history.get(location);\n    }\n", "   public void wantCompression(boolean compression) {\n      this.compression = compression;\n   }\n", "public static double computeEuclideanSquared(\r\n        DoubleTuple t0, DoubleTuple t1)\r\n    {\r\n        Utils.checkForEqualSize(t0, t1);\r\n        double sum = 0;\r\n        int n = t0.getSize();\r\n        for (int i=0; i<n; i++)\r\n        {\r\n            double value0 = t0.get(i);\r\n            double value1 = t1.get(i);\r\n            double d = value1 - value0;\r\n            double dd = d * d;\r\n            sum += dd;\r\n        }\r\n        return sum;\r\n    }", "public static Logger createLogger ( final LoggerType type , final String consumerName ) throws LoggingException { Logger log = new Logger ( type , consumerName ) ; if ( consumerLoggingIndex . put ( consumerName , log ) != null ) { throw ErrorFactory . cre", "protected void dismissProgress ( ) { if ( progress != null ) { progress . dismiss ( ) ; progress = null ; } }", "public boolean isDefaultInstance ( ) { return pageData . isEmpty ( ) ; }", "    public void addOrderByMimeType() {\n        builder.addOrderByColumn(\"MimeType\",\"ASC\");\n    }\n", "public static void clearEditText(String editText) throws Exception{\n        Client.getInstance().map(Constants.ROBOTIUM_SOLO, \"clearEditText\", editText);\n    }", "public boolean canTerminate ( ) { return targetInformation . getDebuggerOptions ( ) . canTerminate ( ) ; }", "public PDFXref ( byte [ ] line ) { if ( line == null ) { id = - NUM_ ; generation = - NUM_ ; } else { id = Integer . parseInt ( new String ( line , NUM_ , NUM_ ) ) ; generation = Integer . parseInt ( new String ( line , NUM_ , NUM_ ) ) ; } compressed = BO", "protected boolean mutatesTo(Object o1,Object o2){\n  return null != o1 && null != o2 && o1.getClass() == o2.getClass();\n}\n", "private final void updateBuffer ( int offset ) { fBufferOffset = offset ; if ( fBufferOffset + fBuffer . length > fRangeOffset + fRangeLength ) fBufferLength = fRangeLength - ( fBufferOffset - fRangeOffset ) ; else fBufferLength = fBuffer . length ; try {", "public final AT_Row addRow(Object ...columns) throws NullPointerException, AsciiTableException {\r\n\t\tAT_Row ret = AT_Row.createContentRow(columns, TableRowStyle.NORMAL);\r\n\r\n\t\tif(this.colNumber==0){\r\n\t\t\tthis.colNumber = columns.length;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif(columns.length!=this.colNumber){\r\n\t\t\t\tthrow new AsciiTableException(\"wrong columns argument\", \"wrong number of columns, expected \" + this.colNumber + \" received \" + columns.length);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.rows.add(ret);\r\n\t\treturn ret;\r\n\t}", "@Override\n\tprotected FlinkKafkaProducer.KafkaTransactionState beginTransaction() throws FlinkKafkaException {\n\t\tswitch (semantic) {\n\t\t\tcase EXACTLY_ONCE:\n\t\t\t\tFlinkKafkaInternalProducer<byte[], byte[]> producer = createTransactionalProducer();\n\t\t\t\tproducer.beginTransaction();\n\t\t\t\treturn new FlinkKafkaProducer.KafkaTransactionState(producer.getTransactionalId(), producer);\n\t\t\tcase AT_LEAST_ONCE:\n\t\t\tcase NONE:\n\t\t\t\t// Do not create new producer on each beginTransaction() if it is not necessary\n\t\t\t\tfinal FlinkKafkaProducer.KafkaTransactionState currentTransaction = currentTransaction();\n\t\t\t\tif (currentTransaction != null && currentTransaction.producer != null) {\n\t\t\t\t\treturn new FlinkKafkaProducer.KafkaTransactionState(currentTransaction.producer);\n\t\t\t\t}\n\t\t\t\treturn new FlinkKafkaProducer.KafkaTransactionState(initNonTransactionalProducer(true));\n\t\t\tdefault:\n\t\t\t\tthrow new UnsupportedOperationException(\"Not implemented semantic\");\n\t\t}\n\t}", "boolean execute ( float a , double b ) ;", "public static Iterator<Widget> getChildren(Widget w) {\n    if (w instanceof Panel) {\n      return ((Panel) w).iterator();\n    }\n    if (w instanceof Composite) {\n      return getChildren(compositeGetWidget((Composite) w));\n    }\n    return null;\n  }", "public OvhVnc serviceName_openConsoleAccess_POST(String serviceName, OvhVncProtocolEnum protocol) throws IOException {\n\t\tString qPath = \"/vps/{serviceName}/openConsoleAccess\";\n\t\tStringBuilder sb = path(qPath, serviceName);\n\t\tHashMap<String, Object>o = new HashMap<String, Object>();\n\t\taddBody(o, \"protocol\", protocol);\n\t\tString resp = exec(qPath, \"POST\", sb.toString(), o);\n\t\treturn convertTo(resp, OvhVnc.class);\n\t}", "void onSelectionChanged ( RTEditText editor , int start , int end ) ;", "\tpublic void setDampingRatio (float ratio) {\n\t\tjniSetDampingRatio(addr, ratio);\n\t}\n", "public void stop ( ) { mCancel = BOOL_ ; if ( mRunning . compareAndSet ( BOOL_ , BOOL_ ) ) { if ( mSampleDispatcherTask != null ) { mThreadPoolManager . cancel ( mSampleDispatcherTask ) ; mSampleDispatcherTask = null ; mFilledBuffers . clear ( ) ; } } }", "protected ByteBuffer send ( FCDCommand command ) throws LibUsbException { write ( command ) ; return read ( ) ; }", "\tpublic boolean soundWorks() {\n\t\treturn soundWorks;\n\t}\n", "\tpublic void update(final Hero hero) {\n\t\tSystem.out.println(\"updating hero\");\n\t\tif (hero != null) {\n\t\t\tSystem.out.println(hero.getName());\n\t\t\tSystem.out.println(hero.getWeapons()[0]);\n\t\t\tSystem.out.println(hero.getWeapons()[1]);\n\t\t\tprimary.setItem(hero.getWeapons()[0]);\n\t\t\tsecondary.setItem(hero.getWeapons()[1]);\n\t\t\tarmor.setItem(hero.getArmor());\n\t\t} else {\n\t\t\tprimary.setItem(null);\n\t\t\tsecondary.setItem(null);\n\t\t\tarmor.setItem(null);\n\t\t}\n\t}\n", "public static String leftPad(final String value,final String pad,final int length){\n  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);\n  validate(pad,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);\n  if (value.length() > length) {\n    return value;\n  }\n  return append(repeat(pad,length - value.length()),value);\n}\n", "public FoxHttpRequestBuilder addRequestQueryEntry(String name, String value) {\n        foxHttpRequest.getRequestQuery().addQueryEntry(name, value);\n        return this;\n    }", "public StringConstant addString(String name)\n  {\n    StringConstant entry = getString(name);\n\n    if (entry != null) {\n      return entry;\n    }\n\n    Utf8Constant utf8 = addUTF8(name);\n\n    entry = new StringConstant(this, _entries.size(), utf8.getIndex());\n\n    addConstant(entry);\n\n    return entry;\n  }", "public static void call(String group, String unit, Handler<UnitResponse> handler) {\n        Xian.call(group, unit, new HashMap<>(), handler);\n    }", "public static double alongTrackDistanceRad(double lat1,double lon1,double lat2,double lon2,double latQ,double lonQ,double dist1Q,double ctd){\n  int sign=Math.abs(bearingRad(lat1,lon1,lat2,lon2) - bearingRad(lat1,lon1,latQ,lonQ)) < MathUtil.HALFPI ? +1 : -1;\n  return sign * Math.acos(Math.cos(dist1Q) / Math.cos(ctd));\n}\n", "protected void cleanupSuspendState(DLockRequestMessage request){\n  postReleaseLock(request.getRemoteThread(),request.getObjectName());\n}\n", "@Override\r\n\tpublic void redo(Transaction tx) {\r\n\t\tBuffer buff = tx.bufferMgr().pin(blk);\r\n\t\tbuff.setVal(offset, newVal, tx.getTransactionNumber(), null);\r\n\t\ttx.bufferMgr().unpin(buff);\r\n\t}", "public void generateAndroidId(){\n  long time=System.currentTimeMillis();\n  int rand=random.nextInt(10000);\n  androidId=time + \".\" + rand;\n}\n", "public boolean isEndNode(final Node node){\n  return getFirstNode() == node || getLastNode() == node;\n}\n", "\tpublic void viewChanged(YIComponent comp) {\n\t\t// enabling buttonSave:\n\t\tlogger.debug(\"Spatial Resolution view view changed\");\n\t\tthis.getParent().viewChanged(this);\n\t}\n", "public abstract double shortRate ( double t , double variable ) ;", "    public void addXYItemClickListener(XYItemClickListener listener) {\n        if (listener == null) {\n            throw new IllegalArgumentException(\"Null 'listener' argument.\");\n        }\n        this.listeners.add(XYItemClickListener.class, listener);\n    }\n", "boolean doActionDeviceConfigureLocal ( boolean discoverRequired , InetAddress inetAddress , String apSsid , String apPassword , String randomToken , String deviceBssid ) ;", "public void substituteInfoText(int state,int callback,String infoText) throws AuthLoginException {\n  if (debug.messageEnabled()) {\n    debug.message(\"setInfoText : state=\" + state + \", infoText=\"+ infoText);\n  }\n  if (state > stateLength) {\n    throw new AuthLoginException(bundleName,\"invalidState\",new Object[]{new Integer(state)});\n  }\n  Callback[] ext=getCallback(state);\n  if (ext.length <= 0) {\n    throw new AuthLoginException(bundleName,\"invalidCallbackIndex\",null);\n  }\n  if ((infoText != null) && (infoText.length() != 0)) {\n    PagePropertiesCallback pagePropertiesCallback=(PagePropertiesCallback)((Callback[])internal.get(state - 1))[0];\n    List<String> infoTexts=pagePropertiesCallback.getInfoText();\n    infoTexts.set(callback,infoText);\n    pagePropertiesCallback.setInfoText(infoTexts);\n  }\n}\n", "  private void prvt_put(float key, T e) {\n    // Hash entry to which the new pair would be inserted\n    int hashIndex = calcBaseHashIndex(key);\n\n    // 'Allocating' a pair from the \"Empty\" list.\n    int objectIndex = firstEmpty;\n\n    // Setting data\n    firstEmpty = next[firstEmpty];\n    values[objectIndex] = e;\n    keys[objectIndex] = key;\n\n    // Inserting the new pair as the first node in the specific hash entry\n    next[objectIndex] = baseHash[hashIndex];\n    baseHash[hashIndex] = objectIndex;\n\n    // Announcing a new pair was added!\n    ++size;\n  }\n", "    public void addKernel(String category, final String name, final KernelJAI kernel) {\n        if (category == null) {\n            category = Vocabulary.getResources(getLocale()).getString(VocabularyKeys.OTHERS);\n        }\n        model.addKernel(category, name, kernel);\n    }\n", "public void validate(NodeConfig node,String puppetMasterNodeDns) throws IOException {\n  Command validateSudoRightsCommand=getValidateSudoRightsCommand(node);\n  try {\n    validateSudoRightsCommand.execute();\n  }\n catch (  IOException e) {\n    String errorMessage=e.getMessage();\n    if (e.getCause() instanceof AgentException) {\n      errorMessage=format(\"It seems user doesn't have sudo rights without password on node '%s'.\",node.getHost());\n    }\n    throw new NodeException(errorMessage,e);\n  }\n  try {\n    Command validatePuppetMasterAccessibilityCommand=getValidatePuppetMasterAccessibilityCommand(puppetMasterNodeDns,node);\n    validatePuppetMasterAccessibilityCommand.execute();\n  }\n catch (  IOException e) {\n    String errorMessage=e.getMessage();\n    if (e.getCause() instanceof AgentException) {\n      errorMessage=format(\"It seems Puppet Master '%s:%s' is not accessible from the node '%s'\",puppetMasterNodeDns,8140,node.getHost());\n    }\n    throw new NodeException(errorMessage,e);\n  }\n}\n", "String readSetting ( CProject project , String key ) throws CouldntLoadDataException ;", "    private String getRecentFile(int index) {\n\tConfig config = SharpTools.getConfig();\n\treturn config.get(\"RECENTFILE\"+String.valueOf(index));\n    }\n", "public static < T > SortedSet < T > asSynchronized ( SortedSet < T > self ) { return Collections . synchronizedSortedSet ( self ) ; }", "    protected void reinitialise() {\n        papiAttributes.reset();\n    }\n", "public int arrayIndexScale(Class clazz){\n  if (!clazz.isArray()) {\n    throw new IllegalArgumentException(\"valid for array classes only\");\n  }\n  return arrayIndexScale0(clazz);\n}\n", "public void marshall(InvokeDeviceMethodRequest invokeDeviceMethodRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (invokeDeviceMethodRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(invokeDeviceMethodRequest.getDeviceId(), DEVICEID_BINDING);\n            protocolMarshaller.marshall(invokeDeviceMethodRequest.getDeviceMethod(), DEVICEMETHOD_BINDING);\n            protocolMarshaller.marshall(invokeDeviceMethodRequest.getDeviceMethodParameters(), DEVICEMETHODPARAMETERS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "private static void addHorizontalSmallSpring(Path2D.Float path,int y0,int x1,int x2){\n  int springHeight=2;\n  int springWidth=2;\n  int distance=Math.abs(x2 - x1);\n  int numSprings=(distance / (springHeight));\n  int leftOver=(distance - (numSprings * springHeight)) / 2;\n  path.lineTo(x1,y0);\n  path.lineTo(x1 - leftOver,y0 - leftOver);\n  int count=0;\n  if (x1 > x2) {\n    for (int x=x1 - leftOver; x > x2 + leftOver; x-=springHeight) {\n      int y=(count % 2 == 0) ? y0 - springWidth : y0 + springWidth;\n      path.lineTo(x,y);\n      count++;\n    }\n  }\n else {\n    for (int x=x1 + leftOver; x < x2 - leftOver; x+=springHeight) {\n      int y=(count % 2 == 0) ? y0 - springWidth : y0 + springWidth;\n      path.lineTo(x,y);\n      count++;\n    }\n  }\n  path.lineTo(x2 + leftOver,y0);\n  path.lineTo(x2,y0);\n}\n", "public void unregisterPlaylistListener(CheerleaderPlaylistListener listener){\n  checkState();\n  mCheerleaderPlaylistListeners.remove(listener);\n}\n", "    public boolean hasTasksAssigned(){\n        return this.assignedTasks.size() > 0;\n    }\n", "    public void jni_arguments(Writer out) throws IOException {\n        Class[] params = current_callable.getParameterTypes();\n        for (int i = 0; i < params.length; i++) {\n            if (i > 0) { out.write(\", \"); }\n            out.write('p');\n            out.write(Integer.toString(i));\n            out.write(getParamExtra(params[i]));\n        }\n    }\n", "@Deprecated\n    public String readLine() throws IOException, IllegalStateException {\n        LOG.trace(\"enter HttpConnection.readLine()\");\n\n        assertOpen();\n        return HttpParser.readLine(inputStream);\n    }", "\tpublic void setX(Vertex<DATA> x) {\n\t\tthis.x = x;\n\t}\n", "public static void logStartSignalMessage ( final Logger logger ) { logger . logMessage ( Level . INFO , STR_ ) ; }", "public static int levenshteinDistance(String o1, String o2) {\n    // Let o1 be the shorter one:\n    if(o1.length() > o2.length()) {\n      return levenshteinDistance(o2, o1);\n    }\n    final int l1 = o1.length(), l2 = o2.length();\n    // Exploit that Java caches the hash code of strings:\n    if(l1 == l2 && o1.hashCode() == o2.hashCode() && o1.equals(o2)) {\n      return 0;\n    }\n    // Determine prefix and postfix lengths:\n    final int prefix = prefixLen(o1, o2);\n    if(prefix == l1 || prefix == l2) {\n      return Math.abs(l1 - l2);\n    }\n    final int postfix = postfixLen(o1, o2, prefix);\n    return // Prefix and postfix are a complete object:\n    (prefix + postfix == l1 || prefix + postfix == l2) ? Math.abs(l1 - l2) : //\n    // Exactly one char difference optimization:\n        (l1 == l2 && prefix + postfix + 1 == l1) ? 1 : //\n        // Default case, compute\n            levenshteinDistance(o1, o2, prefix, postfix);\n  }", "protected char checkZone(char zone){\n  zone=Character.toUpperCase(zone);\n  if (zone != 'N' && zone != 'S') {\n    throw new NumberFormatException(\"Invalid UTMPoint zone letter: \" + zone);\n  }\n  return zone;\n}\n", "static int checkBlockSize(int blockSize,int minBlockSize,int maxBlockSize){\n  if (blockSize < minBlockSize || blockSize > maxBlockSize) {\n    throw new IllegalArgumentException(\"blockSize must be >= \" + minBlockSize + \" and <= \"+ maxBlockSize+ \", got \"+ blockSize);\n  }\n  if ((blockSize & (blockSize - 1)) != 0) {\n    throw new IllegalArgumentException(\"blockSize must be a power of two, got \" + blockSize);\n  }\n  return Integer.numberOfTrailingZeros(blockSize);\n}\n", "private void addRoundedCorner(@NonNull GeometryArrays geoArrays,@NonNull float[] center,float[] radius,float rads0,float rads1,int triangles,@NonNull RectF viewPort,float z){\n  final float[] vertices=geoArrays.triangleVertices;\n  final short[] indices=geoArrays.triangleIndices;\n  final int verticesOffset=geoArrays.verticesOffset;\n  final int indicesOffset=geoArrays.indicesOffset;\n  for (int i=0; i < triangles; i++) {\n    final int currentOffset=verticesOffset + i * 5 + (i > 0 ? 2 * 5 : 0);\n    final float rads=rads0 + (rads1 - rads0) * (i / (float)triangles);\n    final float radsNext=rads0 + (rads1 - rads0) * ((i + 1) / (float)triangles);\n    final int triangleEdge2Offset;\n    if (i == 0) {\n      vertices[currentOffset]=center[0];\n      vertices[currentOffset + 1]=center[1];\n      vertices[currentOffset + 2]=z;\n      vertices[currentOffset + 3]=(vertices[currentOffset] - viewPort.left) / viewPort.width();\n      vertices[currentOffset + 4]=(vertices[currentOffset + 1] - viewPort.bottom) / -viewPort.height();\n      vertices[currentOffset + 5]=center[0] + radius[0] * (float)Math.cos(rads);\n      vertices[currentOffset + 6]=center[1] + radius[1] * (float)Math.sin(rads);\n      vertices[currentOffset + 7]=z;\n      vertices[currentOffset + 8]=(vertices[currentOffset + 5] - viewPort.left) / viewPort.width();\n      vertices[currentOffset + 9]=(vertices[currentOffset + 6] - viewPort.bottom) / -viewPort.height();\n      triangleEdge2Offset=10;\n    }\n else {\n      triangleEdge2Offset=0;\n    }\n    final int edge2Offset=currentOffset + triangleEdge2Offset;\n    vertices[edge2Offset]=center[0] + radius[0] * (float)Math.cos(radsNext);\n    vertices[edge2Offset + 1]=center[1] + radius[1] * (float)Math.sin(radsNext);\n    vertices[edge2Offset + 2]=z;\n    vertices[edge2Offset + 3]=(vertices[edge2Offset] - viewPort.left) / viewPort.width();\n    vertices[edge2Offset + 4]=(vertices[edge2Offset + 1] - viewPort.bottom) / -viewPort.height();\n    final int initialIdx=verticesOffset / 5;\n    indices[indicesOffset + i * 3]=(short)(initialIdx);\n    indices[indicesOffset + i * 3 + 1]=(short)(initialIdx + i + 1);\n    indices[indicesOffset + i * 3 + 2]=(short)(initialIdx + i + 2);\n  }\n}\n", "public String asString(String charset) throws IOException {\n\t\tReader reader = buildReader(charset);\n\t\treturn consumeReader(reader);\n\t}", "public boolean isNegative ( ) { return isNegative ; }", "\tpublic boolean isRunning(){\n    \tif (vlcProcess == null) return false;\n    \ttry{vlcProcess.exitValue();}\n    \tcatch(IllegalThreadStateException e){return true;}\n    \treturn false;\n    }    \n", "    public void remove(final T comp) {\n        final Action action = findActionFor(comp);\n        final int index = actions.indexOf(action);\n        actions.remove(index);\n        for (final Container mMenu : cMenus) {\n            mMenu.remove(index);\n        }\n    }\n", "public void doStop ( ) { ( ( ModelEditor ) getEditor ( ) ) . stop ( ) ; }", "public int position(){\n  return buffer.position();\n}\n", "public StemmedString(CharSequence orig,String stemmed){\n  strOrig=orig.toString();\n  strStemmed=stemmed;\n}\n", "@Override\n    public JType apply(String nodeName, JsonNode mediaNode, JsonNode parent, JType baseType, Schema schema) {\n        if (!mediaNode.has(BINARY_ENCODING)) {\n            return baseType;\n        }\n\n        return baseType.owner().ref(byte[].class);\n    }", "public ReconAuditEventBuilder reconciling ( String reconciling ) { jsonValue . put ( RECONCILING , reconciling ) ; return self ( ) ; }", "\tprotected void resetProgress() {\n\t\tsetProgress(getProgress());\n\t}\n", "private void readObject(final java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {\n  try {\n    field=(String)in.readObject();\n    String patternString=(String)in.readObject();\n    pattern=Pattern.compile(patternString,Pattern.CASE_INSENSITIVE);\n  }\n catch (  PatternSyntaxException e) {\n    throw new IOException(\"Invalid LIKE rule - \" + e.getMessage());\n  }\n}\n", "void gotoState(@Nonnull ConnectivityState newState) {\n    checkNotNull(newState, \"newState\");\n    if (state != newState && state != ConnectivityState.SHUTDOWN) {\n      state = newState;\n      if (listeners.isEmpty()) {\n        return;\n      }\n      // Swap out callback list before calling them, because a callback may register new callbacks,\n      // if run in direct executor, can cause ConcurrentModificationException.\n      ArrayList<Listener> savedListeners = listeners;\n      listeners = new ArrayList<>();\n      for (Listener listener : savedListeners) {\n        listener.runInExecutor();\n      }\n    }\n  }", "public <K, V> Map<K, V> getMap(String prefix, Function<String, K> keyFactory, Function<String, V> valueFactory) {\n    Map<K, V> map = new HashMap<>();\n    for (String property : properties.stringPropertyNames()) {\n      if (property.startsWith(prefix + \".\")) {\n        map.put(keyFactory.apply(property.substring(prefix.length() + 1)),\n            valueFactory.apply(properties.getProperty(property)));\n      }\n    }\n    return map;\n  }", "    public boolean isRecordSession(RTSPRequest request) {\n        boolean isRecordSession = false;\n        String session = request.getRequestPacket().getSession();\n\n        if (session != null) {\n            int sessionId = Integer.valueOf(session).intValue();\n            isRecordSession =\n                (recordSessionMap.get(new Integer(sessionId)) != null);\n        }\n\n        return isRecordSession;\n    }\n", "public static WorkflowId randomUniqueWorkflowId ( Workflow < ? , ? > workflow ) { Name name = workflow . name ( ) . replaceUnsafeNameChars ( ) ; String randomize = format ( STR_ , ThreadLocalRandom . current ( ) . nextInt ( NUM_ , Integer . MAX_VALUE ) ) ", "public JCriteriumTreeNode ( final CCriteriumTree ctree , final ICriterium criterium , final List < ICriteriumCreator > criteria ) { m_criterium = criterium ; m_menuBuilder = new CNodeMenuBuilder ( this , ctree , criteria ) ; }", "public final T xmlns ( String uri ) { return xmlns ( uri , null ) ; }", "protected void onChecking(){\n  if (LogConfiguration.loggingIsEnabled()) {\n    logger.log(Level.INFO,messages.checkingResources());\n  }\n  fireApplicationCacheEvent(CacheEvent.onChecking);\n}\n", "public void aliasChanged ( AliasEvent event ) ;", "  public void randomise_data() {\n    if (this.getHlevel() > 0) {\n      m_Tax_GB_IN = Dice.roll(1, this.getHlevel());\n    } else {\n      m_Tax_GB_IN = 0;\n    }\n    if (m_Tax_GB_IN == 0) {\n      m_Tax_GB_OUT = 0;\n    } else {\n      m_Tax_GB_OUT = Dice.roll(1, (int)m_Tax_GB_IN);\n    }\n  }\n", "protected abstract int createNewModule ( INaviRawModule rawModule ) throws SQLException ;", "protected void bodyLeft (final int bodyOid)\n    {\n        log.debug(\"Body left\", \"where\", where(), \"oid\", bodyOid);\n\n        // if their occupant info hasn't been removed (which may be the case if they logged off\n        // rather than left via a MoveTo request), we need to get it on out of here\n        Integer key = Integer.valueOf(bodyOid);\n        if (_plobj.occupantInfo.containsKey(key)) {\n            _plobj.removeFromOccupantInfo(key);\n        }\n\n        // clear out their canonical (local) occupant info record\n        OccupantInfo leaver = _occInfo.remove(bodyOid);\n\n        // let our delegates know what's up\n        applyToDelegates(new DelegateOp(PlaceManagerDelegate.class) {\n            @Override public void apply (PlaceManagerDelegate delegate) {\n                delegate.bodyLeft(bodyOid);\n            }\n        });\n\n        // if that leaves us with zero occupants, maybe do something\n        if (shouldDeclareEmpty(leaver)) {\n            placeBecameEmpty();\n        }\n    }", "public JKInvalidUserException ( Throwable cause ) { super ( cause ) ; }", "public Map<SkbShellArgument, Object> getArgMap(SkbShellArgument[] arguments){\n\t\tMap<SkbShellArgument, Object> ret = new LinkedHashMap<SkbShellArgument, Object>();\n\t\tif(arguments!=null){\n\t\t\tfor(Entry<String, String> entry : this.getArgMap().entrySet()){", "\tpublic void setBucket(String bucket) {\n\t\tlog.debug(\"Setting bucket to\"+bucket);\n\t\tBUCKET = bucket;\n\t\t\n\t}\n", "public static void validate ( SpaceURL spaceURL ) throws Exception { if ( _logger . isLoggable ( Level . FINE ) ) { _logger . fine ( STR_ + spaceURL ) ; } try { validateURL ( spaceURL ) ; } catch ( SpaceURLValidationException e ) { if ( _logger . isLoggab", "@ManyToOne( cascade = {CascadeType.PERSIST, CascadeType.MERGE} )\n    @JoinColumn(name=\"PHONEBOOK_ID\")\n\tpublic PhoneBook getPhoneBook() \n\t{\n\t\treturn phoneBook;\n\t}", "public AnnotationVisitor visitTypeAnnotation ( int typeRef , TypePath typePath , String desc , boolean visible ) { if ( api < Opcodes . ASM5 ) { throw new RuntimeException ( ) ; } if ( mv != null ) { return mv . visitTypeAnnotation ( typeRef , typePath , ", "public void sortFromTo(int from,int to){\n  final int widthThreshold=10000;\n  if (size == 0)   return;\n  checkRangeFromTo(from,to,size);\n  short min=elements[from];\n  short max=elements[from];\n  short[] theElements=elements;\n  for (int i=from + 1; i <= to; ) {\n    short elem=theElements[i++];\n    if (elem > max)     max=elem;\n else     if (elem < min)     min=elem;\n  }\n  double N=(double)to - (double)from + 1.0;\n  double quickSortEstimate=N * Math.log(N) / 0.6931471805599453;\n  double width=(double)max - (double)min + 1.0;\n  double countSortEstimate=Math.max(width,N);\n  if (width < widthThreshold && countSortEstimate < quickSortEstimate) {\n    countSortFromTo(from,to,min,max);\n  }\n else {\n    quickSortFromTo(from,to);\n  }\n}\n", "    public void setSecondaryTable(String secondaryTable) {\n        this.secondaryTable = secondaryTable;\n        this.dbInsertable = false;\n        this.dbUpdateable = false;\n    }\n", "private static boolean validMethod(String name){\n  int len=name.length();\n  if (len == 0) {\n    return false;\n  }\n  char c=name.charAt(0);\n  if (!Character.isJavaIdentifierStart(c) && !(c == '*' && len > 1)) {\n    return false;\n  }\n  if (c != '*' && name.charAt(len - 1) == '*') {\n    len--;\n  }\n  while (--len >= 1) {\n    if (!Character.isJavaIdentifierPart(name.charAt(len))) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    @Override protected void startup() {\n        show(new udpUnitAdaptView(this));\n    }\n", "public TypedLinkFacet withAttributes(TypedLinkAttributeDefinition... attributes) {\n        if (this.attributes == null) {\n            setAttributes(new java.util.ArrayList<TypedLinkAttributeDefinition>(attributes.length));\n        }\n        for (TypedLinkAttributeDefinition ele : attributes) {\n            this.attributes.add(ele);\n        }\n        return this;\n    }", "void removedModule ( Process process , MemoryModule module ) ;", "private void drawCircleDown(@NonNull Canvas canvas, float step, float radius) {\n    canvas.drawCircle(\n            xCoordinate + step,\n            getMeasuredHeight() / 2,\n            bounceDotRadius - radius,\n            endPaint\n    );\n  }", "  public SAXException wrapAsSAXException(IOException e) {\n    SAXException saxEx =new SAXException(e.getMessage());\n    saxEx.initCause(e);\n    return saxEx;\n  }\n", "boolean insertItemAt ( int index , int command_id , String label ) ;", "public ParameterTypeVariable2 makeDeclaredParameterTypeVariable(IMethodBinding methodBinding,int parameterIndex,ICompilationUnit cu){\n  if (methodBinding == null)   return null;\n  ParameterTypeVariable2 cv=makeParameterTypeVariable(methodBinding,parameterIndex);\n  if (cv == null)   return null;\n  cv.setCompilationUnit(cu);\n  return cv;\n}\n", "public void configure ( PluginContext context ) throws ReplicatorException , InterruptedException { runtime = ( ReplicatorRuntime ) context ; }", "private HttpURLConnection configureURLConnection(HttpMethod method, String urlString, Map<String, String> httpHeaders, int contentLength) throws IOException {\n\n        preconditionNotNull(method, \"method cannot be null\");\n        preconditionNotNull(urlString, \"urlString cannot be null\");\n        preconditionNotNull(httpHeaders, \"httpHeaders cannot be null\");\n\n        HttpURLConnection connection = getHttpURLConnection(urlString);\n        connection.setRequestMethod(method.name());\n\n        Map<String, String> headerKeyValues = new HashMap<>(defaultHttpHeaders);\n\n        headerKeyValues.putAll(httpHeaders);\n\n        for (Map.Entry<String, String> entry : headerKeyValues.entrySet()) {\n            connection.setRequestProperty(entry.getKey(), entry.getValue());\n            log.trace(\"Header request property: key='{}', value='{}'\", entry.getKey(), entry.getValue());\n        }\n\n        // Perform additional configuration for POST\n        if (contentLength > 0) {\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n        }\n        connection.setRequestProperty(\"Content-Length\", Integer.toString(contentLength));\n\n        return connection;\n    }", "public JSONException ( String message ) { super ( message ) ; }", "@Override public void endDTD(Augmentations augs) throws XNIException {\n  fIsImmutable=true;\n  if (fGrammarDescription.getRootName() == null) {\n    int chunk, index=0;\n    String currName=null;\n    final int size=fElementDeclCount;\n    ArrayList elements=n", "public AttributeValue withBS(java.nio.ByteBuffer... bS) {\n        if (getBS() == null) setBS(new java.util.ArrayList<java.nio.ByteBuffer>(bS.length));\n        for (java.nio.ByteBuffer value : bS) {\n            getBS().add(value);\n        }\n        return this;\n    }", "    public boolean shouldShow() {\n        return ERXComponentUtilities.booleanValueForBinding(this, \"shouldShow\", ERXApplication.erxApplication().isDevelopmentMode());\n    }\n", "public String eatStringConstant ( ) { if ( ! matchStringConstant ( ) ) throw new BadSyntaxException ( ) ; String s = tok . sval ; nextToken ( ) ; return s ; }", "    public int accepts(LogType type, String subject, String method){\n        if(filterList_.isEmpty()){ return NEUTRAL; }\n\n        Iterator filters = filterList_.iterator();\n        while(filters.hasNext()){\n            LogFilter filter = (LogFilter)(filters.next());\n            switch(filter.accepts(type, subject, method)){\n              case ACCEPT:\n                return ACCEPT;\n\n              case NEUTRAL:\n                break;\n\n              case DENY:\n              default:\n                return DENY;\n            }\n        }\n\n        return NEUTRAL;\n    }\n", "public static ViewPropertyAnimator animate ( View view ) { ViewPropertyAnimator animator = ANIMATORS . get ( view ) ; if ( animator == null ) { final int version = Integer . valueOf ( Build . VERSION . SDK ) ; if ( version >= Build . VERSION_CODES . ICE_C", "public Remote exportObject(Remote impl,Object data,boolean permanent) throws RemoteException {\n  Class<?> implClass=impl.getClass();\n  Remote stub;\n  try {\n    stub=Util.createProxy(implClass,getClientRef(),forceStubUse);\n  }\n catch (  IllegalArgumentExce", "@RequestMapping(value={\"/{cg}/{key}\",\"/{cg}/{key}/\"},method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable(\"cg\") String configGroup,@PathVariable(\"key\") String key,Principal principal){\n  RestWrapper restWrapper=null;\n  try {\n    GeneralConfig generalConfig=new GeneralConfig();\n    generalConfig.setConfigGroup(configGroup);\n    generalConfig.setKey(key);\n    GeneralConfigId jpaGeneralConfigId=new GeneralConfigId();\n    jpaGeneralConfigId.setConfigGroup(generalConfig.getConfigGroup());\n    jpaGeneralConfigId.setGcKey(generalConfig.getKey());\n    generalConfigDAO.delete(jpaGeneralConfigId);\n    restWrapper=new RestWrapper(null,RestWrapper.OK);\n    LOGGER.info(\"Record with key:\" + key + \" deleted from general_config by User:\"+ principal.getName());\n  }\n catch (  MetadataException e) {\n    LOGGER.error(e);\n    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);\n  }\n  return restWrapper;\n}\n", "public static Object loadModule ( String homedir , ScriptEngine engine , String name ) throws FileNotFoundException , ScriptException { HashMap < String , File > mp = ( HashMap < String , File > ) engine . get ( STR_ ) ; Object ret = load ( mp . get ( nam", "public JenkinsHttpClient(URI uri){\n  this.context=uri.getPath();\n  if (!context.endsWith(\"/\")) {\n    context+=\"/\";\n  }\n  this.uri=uri;\n  this.mapper=getDefaultMapper();\n  HttpParams httpParameters=new BasicHttpParams();\n  HttpConnectionParams.setConnectionTimeout(httpParameters,10000);\n  HttpConnectionParams.setSoTimeout(httpParameters,10000);\n  this.client=new DefaultHttpClient(new PoolingClientConnectionManager(),httpParameters);\n}\n", "synchronized Set<Long> keySet(){\n  HashSet<Long> set=new HashSet<Long>();\n  for (Entry<V> e=stack.stackNext; e != stack; e=e.stackNext) {\n    set.add(e.key);\n  }\n  for (Entry<V> e=queue.queueNext; e != queue; e=e.queueNext) {\n    set.add(e.key);\n  }\n  return set;\n}\n", "private boolean parseEntity ( ) { String m ; if ( ( m = match ( ENTITY_HERE ) ) != null ) { appendText ( Html5Entities . entityToString ( m ) ) ; return BOOL_ ; } else { return BOOL_ ; } }", "\tpublic JButton getStopButton() {\n\t\tif (stopButton == null) {\n\t\t\tstopButton = new JButton(\"Stop\");\n\t\t\tstopButton.setMnemonic('S');\n\t\t\tstopButton.setDisplayedMnemonicIndex(0);\n\t\t\tstopButton.setHorizontalTextPosition(SwingConstants.CENTER);\n\t\t\tstopButton.setVerticalTextPosition(SwingConstants.BOTTOM);\n\t\t\tstopButton.addActionListener(eventHandler);\n\t\t}\n\t\treturn stopButton;\n\t}\n", "public boolean checkCrc ( ) throws IOException { if ( computedCrc == - NUM_ ) computeCrc ( ) ; return computedCrc == crc ; }", "public CTagSortingHandler ( ) { super ( CTagTransferable . TAG_FLAVOR ) ; }", "public Object getObjectByIdentity(Identity id)\r\n            throws PersistenceBrokerException\r\n    {\r\n        checkOpen();\r\n        ObjectEnvelope envelope = objectEnvelopeTable.getByIdentity(id);\r\n        if (envelope != null)\r\n        {\r\n            return (envelope.needsDelete() ? null : envelope.getObject());\r\n        }\r\n        else\r\n        {\r\n            return getBroker().getObjectByIdentity(id);\r\n        }\r\n    }", "private static void createPicassoDiskCache(Context context,long maxSize) throws IOException {\n  File httpCacheDir=new File(context.getCacheDir(),\"picasso-cache\");\n  httpCacheDir.mkdirs();\n  long freeDiskSpace=getFreeDiskSpace(httpCacheDir);\n  maxSize=Math.min(maxSize,freeDiskSpace / 2);\n  com.squareup.okhttp.Cache diskCache=new com.squareup.okhttp.Cache(httpCacheDir,maxSize);\n  diskCache.initialize();\n  picassoDiskCacheRef=new WeakReference<>(diskCache);\n}\n", "public MapKeyClass<ElementCollection<T>> getOrCreateMapKeyClass()\n   {\n      Node node = childNode.getOrCreate(\"map-key-class\");\n      MapKeyClass<ElementCollection<T>> mapKeyClass = new MapKeyClassImpl<ElementCollection<T>>(this, \"map-key-class\", childNode, node);\n      return mapKeyClass;\n   }", "    protected String getGroupDisplayableName(String groupName) {\n        for (int i = 0; i < groups.size(); i++) {\n            OptionGroup g = groups.elementAt(i); \n            if ( g != null && g.getName().equals(groupName)) {\n                return Messages.getString(name+GROUP_SUFFIX+groupName+DISPLAYABLE_NAME_SUFFIX);\n            }\n        }\n        return null;\n    }\n", "public final void recover ( ) throws IOException , InterruptedException { this . trace . recover ( ) ; this . stateQueue . recover ( ) ; this . fpSetManager . recover ( this . filename ) ; }", "public boolean validate(Signer signerToUse) throws CoseException {\n        for (Signer r : signerList) {\n            if (r == signerToUse) {\n                return r.validate(rgbProtected, rgbContent);\n            }\n        }\n        \n        throw new CoseException(\"Signer not found\");\n    }", "\tpublic OutputStream getOutputStream() throws ConnectionException {\n\t    if(outputStream != null) return outputStream;\n\t    DefaultOutputStream outputStream = (DefaultOutputStream) factory.createOutputStream();\n\t    outputStream.setConnection(this);\n\t    ostate |= 2;\n\t    return outputStream;\n\t}\n", "public void configure ( String name ) throws ReplicatorException , InterruptedException { UniversalDataSource ds = find ( name ) ; ds . configure ( ) ; }", "public CMYKColor getComplementaryColor() {\n        double[] rgb = CMYKColor.getRGB(cyan, magenta, yellow, black);\n        double[] cmyk = CMYKColor.getCMYK(1.0 - rgb[0], 1.0 - rgb[1], 1.0 - rgb[2]);\n        return new CMYKColor(cmyk[0], cmyk[1], cmyk[2], cmyk[3]);\n    }", "    public void setComparator(final Comparator newComparator){\n        comparator = newComparator;\n        sortView();\n    }\n", "private ModbusSlave ( ModbusSlaveType type , int port , int poolSize , SerialParameters serialParams ) throws ModbusException { this . type = type == null ? ModbusSlaveType . TCP : type ; this . port = port ; this . serialParams = serialParams ; logger . ", "public final boolean isTerminated(){\n  return done.getCount() == 0;\n}\n", "public void addLineTag(SourceLocationTag tag){\n  if (!lines.contains(tag))   lines.add(tag);\n}\n", "@Nullable private List<String> toArrayWrapping(@Nullable String s,int width){\n  List<String> list=new ArrayList<String>();\n  List<Pair<String,Boolean>> pairs=splitToParagraphs(s);\n  if (pairs == null) {\n    return null;\n  }\n  for (  Pair<String,Boolean> pair : pairs) {\n    String seq=pair.getFirst();\n    boolean isMarked=pair.getSecond();\n    if (seq.isEmpty()) {\n      list.add(\"\");\n      continue;\n    }\n    while (true) {\n      if (seq.length() < width) {\n        seq=isMarked ? seq : seq.trim();\n        list.add(seq);\n        break;\n      }\n else {\n        int wrapPos=Math.min(seq.length() - 1,width);\n        wrapPos=seq.lastIndexOf(' ',wrapPos);\n        if (wrapPos <= 2 * width / 3) {\n          wrapPos=Math.min(seq.length() - 1,width);\n          wrapPos=seq.indexOf(' ',wrapPos);\n        }\n        if (wrapPos >= seq.length() - 1 || wrapPos < 0) {\n          seq=isMarked ? seq : seq.trim();\n          list.add(seq);\n          break;\n        }\n else {\n          list.add(seq.substring(0,wrapPos));\n          seq=seq.substring(wrapPos + 1);\n        }\n      }\n    }\n  }\n  return list;\n}\n", "void releaseAll(long txNum, boolean sLockOnly) {\r\n\t\tSet<Object> objectsToRelease = getObjectSet(txNum);\r\n\t\tfor (Object obj : objectsToRelease) {\r\n\t\t\tObject anchor = getAnchor(obj);\r\n\t\t\tsynchronized (anchor) {\r\n\t\t\t\tLockers lks = lockerMap.get(obj);\r\n\r\n\t\t\t\tif (lks != null) {\r\n\r\n\t\t\t\t\tif (hasSLock(lks, txNum))\r\n\t\t\t\t\t\treleaseLock(lks, anchor, txNum, S_LOCK);\r\n\r\n\t\t\t\t\tif (hasXLock(lks, txNum) && !sLockOnly)\r\n\t\t\t\t\t\treleaseLock(lks, anchor, txNum, X_LOCK);\r\n\r\n\t\t\t\t\tif (hasSixLock(lks, txNum))\r\n\t\t\t\t\t\treleaseLock(lks, anchor, txNum, SIX_LOCK);\r\n\r\n\t\t\t\t\twhile (hasIsLock(lks, txNum))\r\n\t\t\t\t\t\treleaseLock(lks, anchor, txNum, IS_LOCK);\r\n\r\n\t\t\t\t\twhile (hasIxLock(lks, txNum) && !sLockOnly)\r\n\t\t\t\t\t\treleaseLock(lks, anchor, txNum, IX_LOCK);\r\n\r\n\t\t\t\t\t// Remove the locker, if there is no other transaction\r\n\t\t\t\t\t// having it\r\n\t\t\t\t\tif (!sLocked(lks) && !xLocked(lks) && !sixLocked(lks)\r\n\t\t\t\t\t\t\t&& !isLocked(lks) && !ixLocked(lks)\r\n\t\t\t\t\t\t\t&& lks.requestSet.isEmpty())\r\n\t\t\t\t\t\tlockerMap.remove(obj);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\ttxWaitMap.remove(txNum);\r\n\t\ttxnsToBeAborted.remove(txNum);\r\n\t\tlockByMap.remove(txNum);\r\n\t}", "void onChangeDeleted ( int id ) ;", "   public void enable() {\n      enable(getClass().getName());\n   } // of enable\n", "public static List<VirtualMachineDescriptor> list()\n   {\n      List<VirtualMachineDescriptor> l = new ArrayList<VirtualMachineDescriptor>();\n      List<AttachProvider> providers = AttachProvider.providers();\n\n      for (AttachProvider provider : providers", "public boolean isMemberAliveEnabled ( ) { return memberAliveIndicator . isMemberAliveEnabled ( ) ; }", "private CommandContainer<CI> getCommand(String commandName, String line) throws CommandNotFoundException {\n        try {\n            return registry.getCommand(commandName, line);\n        }\n        catch (CommandNotFoundException e) {\n            // Lookup in aliases\n            return registry.getCommandByAlias(commandName);\n        }\n    }", "public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  WebDoc doc=null;\n  WebSessionCtx wsc=WebSessionCtx.get(request);\n  WWindowStatus ws=WWindowStatus.get(request);\n  String data=WebUtil.getP", "NamedList<SolrDocumentList> buildMoreLikeThisNamed(Map<Object,SolrDocumentList> allMlt,Map<Object,ShardDoc> resultIds){\n  NamedList<SolrDocumentList> result=new NamedList<>();\n  TreeMap<Integer,Object> sortingMap=new TreeMap<>();\n  for (  Entry<Object,ShardDoc> next : resultIds.entrySet()) {\n    sortingMap.put(next.getValue().positionInResponse,next.getKey());\n  }\n  for (  Object key : sortingMap.values()) {\n    SolrDocumentList sdl=allMlt.get(key);\n    if (sdl == null) {\n      sdl=new SolrDocumentList();\n      sdl.setNumFound(0);\n      sdl.setStart(0);\n    }\n    result.add(key.toString(),sdl);\n  }\n  return result;\n}\n", "public UniversalDataSource find ( String name ) throws ReplicatorException { UniversalDataSource ds = manager . find ( name ) ; if ( ds == null ) { return null ; } else if ( ds instanceof AliasDataSource ) { String source = ( ( AliasDataSource ) ds ) . ge", "\tprotected void isNotA(String name, Class type) {\n\t\tClass t = type;  //innermost component type\n\t\t\n\t\t/* var isNotA int[][] */\n\t\twhile (t.isArray()) {\n\t\t\tt = t.getComponentType();\n\t\t}\n\t\t\n\t\t/* var isNotA int */\n\t\tif (t.isPrimitive()) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t/* pType is neither primitive nor primitive[] */\n\t\tOut.verbose(\"Ignoring constraint \"+getCnt()+\": \"+\n\t\t\t\tname+\" is not a \"+type.getName());\n\t\t/* TODO */\n\t}\n", "private void assertUploadPackRefs ( String ... expectedWithMeta ) throws Exception { try ( Repository repo = repoManager . openRepository ( project ) ) { assertRefs ( repo , new VisibleRefFilter ( tagCache , notesFactory , changeCache , repo , projectControl ( ) , new DisabledReviewDb ( ) , BOOL_ ) , BOOL_ , expectedWithMeta ) ; } }", "private boolean isAngleAtFront(double angle){\n  return (Math.sin(Math.toRadians(angle)) < 0.0);\n}\n", "    public void reset() {\n        super.reset();\n        getRecordTable().append(\"\\tY\\tM\\tU\\tV\\tZ\");\n        diceBoard.showDice(0);\n        for (int i = 0; i < 5; i++)\n            rv[i].reset();\n        rvGraph.reset();\n        rvTable.reset();\n    }\n", "    public ImageIcon getIcon(String name)  {\n        String imagePath = JLF_IMAGE_DIR + name;\n        URL url = this.getClass().getResource(imagePath);\n        if (url != null)  {\n            return new ImageIcon(url);\n        }\n        return null;\n    }\n", "Object execute ( Script script , T compiledScript , Map < String , Object > parameters ) throws ScriptExecutionException ;", "private static Collection<? extends KNXAddress> ensureDeviceAck(final KNXMediumSettings settings,\n\t\tfinal Collection<? extends KNXAddress> acknowledge)\n\t{\n\t\tif (settings.getMedium() != KNXMediumSettings.MEDIUM_TP1)\n\t\t\tthrow new KNXIllegalArgumentException", "    public void reset() {\n        super.reset();\n        choice.setVisible(false);\n    }\n", "public static RDFSyntax getSyntax(final IOService ioService, final List<MediaType> acceptableTypes,\n            final String mimeType) {\n        if (acceptableTypes.isEmpty()) {\n            return mimeType != null ? null : TURTLE;\n        }\n        final MediaType mt = mimeType != null ? MediaType.valueOf(mimeType) : null;\n        for (final MediaType type : acceptableTypes) {\n            if (type.isCompatible(mt)) {\n                return null;\n            }\n            final RDFSyntax syntax = ioService.supportedReadSyntaxes().stream()\n                .filter(s -> MediaType.valueOf(s.mediaType()).isCompatible(type))\n                .findFirst().orElse(null);\n            if (syntax != null) {\n                return syntax;\n            }\n        }\n        LOGGER.debug(\"Valid syntax not found among {} or {}\", acceptableTypes, mimeType);\n        throw new NotAcceptableException();\n    }", "protected CAbstractMenuBuilder ( final JTree projectTree ) { m_projectTree = Preconditions . checkNotNull ( projectTree , STR_ ) ; }", "private void moveToNextStatMessage(){\n  secondCounter=0;\n  statMessageIndex++;\n  if (statMessageIndex == STATS_MESSAGES) {\n    statMessageIndex=0;\n  }\n  int retries=0;\n  while (!refreshStatsMessage(false) && retries < STATS_MESSAGES) {\n    statMessageIndex++;\n    if (statMessageIndex == STATS_MESSAGES) {\n      statMessageIndex=0;\n    }\n    retries++;\n  }\n}\n", "private Set<String> doResolveFeatures(Collection<String> rootFeatures, Set<String> preResolved, SelectionContext selectionContext) {\n        // first pass; process the roots until we have selected all the candidates for multiple versions;\n        // need to reset the initial black list count so we can recalculate it during the first pass\n        selectionContext.resetInitialBlackListCount();\n        Set<String> result = processCurrentPermutation(rootFeatures, preResolved, selectionContext);\n\n        // if the first pass resulted in no conflicts return the results (optimistic)\n        if (selectionContext.getResult().getConflicts().isEmpty()) {\n            selectionContext.selectCurrentPermutation();\n            return result;\n        }\n\n        // oh oh, we have conflicts;\n        // NOTE, if the current solution has more conflicts than the initial count (black list)\n        // then that means one of the toleration (postponed) choices we made introduced an\n        // addition conflict.  That implies that a better solution may be available.\n        // As long as there are more conflicts than the number of initial root conflicts\n        // and there is a different permutation to try do another pass\n        while (selectionContext.currentHasMoreThanInitialBlackListCount() && selectionContext.popPermutation()) {\n            result = processCurrentPermutation(rootFeatures, preResolved, selectionContext);\n        }\n\n        // Return the best solution found\n        selectionContext.restoreBestSolution();\n        return selectionContext.getResult().getResolvedFeatures();\n    }", "private static List<SizePair> generateValidPreviewSizeList(Camera camera){\n  Camera.Parameters parameters=camera.getParameters();\n  List<android.hardware.Camera.Size> supportedPreviewSizes=parameters.getSupportedPreviewSizes();\n  List<android.hardware.Camera.Size> supportedPictureSizes=parameters.getSupportedPictureSizes();\n  List<SizePair> validPreviewSizes=new ArrayList<>();\n  for (  android.hardware.Camera.Size previewSize : supportedPreviewSizes) {\n    float previewAspectRatio=(float)previewSize.width / (float)previewSize.height;\n    for (    android.hardware.Camera.Size pictureSize : supportedPictureSizes) {\n      float pictureAspectRatio=(float)pictureSize.width / (float)pictureSize.height;\n      if (Math.abs(previewAspectRatio - pictureAspectRatio) < ASPECT_RATIO_TOLERANCE) {\n        validPreviewSizes.add(new SizePair(previewSize,pictureSize));\n        break;\n      }\n    }\n  }\n  if (validPreviewSizes.size() == 0) {\n    Log.w(TAG,\"No preview sizes have a corresponding same-aspect-ratio picture size\");\n    for (    android.hardware.Camera.Size previewSize : supportedPreviewSizes) {\n      validPreviewSizes.add(new SizePair(previewSize,null));\n    }\n  }\n  return validPreviewSizes;\n}\n", "protected void accessedHistoryItem ( Object item ) { contentProvider . addHistoryElement ( item ) ; }", "    public void postUrl(String url, byte[] postData) {\n        if (URLUtil.isNetworkUrl(url)) {\n            switchOutDrawHistory();\n            WebViewCore.PostUrlData arg = new WebViewCore.PostUrlData();\n            arg.mUrl = url;\n            arg.mPostData = postData;\n            mWebViewCore.sendMessage(EventHub.POST_URL, arg);\n            clearHelpers();\n        } else {\n            loadUrl(url);\n        }\n    }\n", "public static String buildOwnerId( RecipientKind ownerKind, String applicationName, String scopedInstancePath ) {\n\n\t\tStringBuilder sb = new StringBuilder();\n\t\tif( ownerKind == RecipientKind.DM ) {\n\t\t\tsb.append( \"@DM@\" );\n\n\t\t} else {\n\t\t\tif( scopedInstancePath !=null ) {\n\t\t\t\tsb.append( scopedInstancePath );\n\t\t\t\tsb.append( \" \" );\n\t\t\t}\n\n\t\t\tif( applicationName != null ) {\n\t\t\t\tsb.append( \"@ \" );\n\t\t\t\tsb.append( applicationName );\n\t\t\t}\n\t\t}\n\n\t\t// The \"domain\" is not used here.\n\t\t// \"domain\" was not designed for self-hosted messaging but for \"real\" messaging servers.\n\t\treturn sb.toString().trim();\n\t}", "public static boolean deleteContents(File directory){\n  File[] files=directory.listFiles();\n  boolean success=true;\n  if (files != null) {\n    for (    File file : files) {\n      success&=deleteRecursively(file);\n    }\n  }\n  return success;\n}\n", "    public Span getSpan() {\n        if ((_span == null)) {\n            int endColumn = getColumnNo() + 1;\n            final String text = getText();\n            if (text != null) {\n                endColumn += text.length() - 1;\n            }\n            _span = new Span(getLineNo(), getColumnNo() + 1, getLineNo(), endColumn);\n        }\n        return _span;\n    }\n", "@Override\n    public DescribeSubnetsResult describeSubnets(DescribeSubnetsRequest request) {\n        request = beforeClientExecution(request);\n        return executeDescribeSubnets(request);\n    }", "  public boolean isUndoAble() {\n    return false;\n  }\n", "\tpublic JPanel getActorJPanel() {\n\t\tif (actorPanel==null) {\n\t\t\tactorPanel = new JPanel();\n\t\t\tactorPanel.setLayout(new BorderLayout());\n\t\t\tTableColumn column = null;\n\t\t\tfor (int i = 0; i <=nbParameters; i++) {\n\t\t\t\tcolumn = actorTable.getColumnModel().getColumn(i);\n\t\t\t\tcolumn.setPreferredWidth(100); \n\t\t\t}\n\t\t\tactorPanel.add(actorTable.getTableHeader(),BorderLayout.NORTH);\n\t\t\tactorPanel.add(actorTable,BorderLayout.SOUTH);\n\t\t}\n\t\treturn actorPanel;\n\t}\n", "public void bindTo(Object proxy) {\n    if (handle != null) {\n      throw new IllegalStateException(\n          \"Attempted to rebind a default method handler that was already bound\");\n    }\n    handle = unboundHandle.bindTo(proxy);\n  }", "\tpublic void setMemberAccount (java.lang.String _memberAccount) {\n\t\tthis._memberAccount = _memberAccount;\n\t}\n", "protected RequestEntity createStringRequestContent(HTTPRequest httpRequest)\n    {\n        RequestEntity requestEntity=null;\n        String contentString=httpRequest.getContentAsString();\n        if(contentString!=null)\n        {\n            try\n            {\n                requestEntity=new StringRequestEntity(contentString,\"text/plain\",null);\n            }\n            catch(UnsupportedEncodingException exception)\n            {\n                throw new FaxException(\"Unable to set string request entity.\",exception);\n            }\n        }\n        \n        return requestEntity;\n    }", "@Override\n  public long getNextIncludedTime (final long timeInMillis)\n  {\n    long nextIncludedTime = timeInMillis + 1; // plus on millisecond\n\n    while (!isTimeIncluded (nextIncludedTime))\n    {\n\n      // If the time is in a range excluded by this calendar, we can\n      // move to the end of the excluded time range and continue testing\n      // from there. Otherwise, if nextIncludedTime is excluded by the\n      // baseCalendar, ask it the next time it includes and begin testing\n      // from there. Failing this, add one millisecond and continue\n      // testing.\n      if (m_aCronExpression.isSatisfiedBy (new Date (nextIncludedTime)))\n      {\n        nextIncludedTime = m_aCronExpression.getNextInvalidTimeAfter (new Date (nextIncludedTime)).getTime ();\n      }\n      else\n        if ((getBaseCalendar () != null) && (!getBaseCalendar ().isTimeIncluded (nextIncludedTime)))\n        {\n          nextIncludedTime = getBaseCalendar ().getNextIncludedTime (nextIncludedTime);\n        }\n        else\n        {\n          nextIncludedTime++;\n        }\n    }\n\n    return nextIncludedTime;\n  }", "protected void build(ByteBuffer raw){\n  this.dataBytes=new byte[dataSize];\n  for (int i=0; i < dataBytes.length; i++) {\n    this.dataBytes[i]=raw.get();\n  }\n}\n", "    public QueryBuilder using(String abbrev, String URI){\n        using.add(new UsingPart(abbrev,URI));\n        return this;\n    }\n", "public List<Object[]> readAllSubkeyed(Connection connection,Object[] keys){\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"select \");\n  String delimiter=\"\";\n  for (  String keyField : keyFieldNames) {\n    builder.append(delimiter);\n    builder.append(keyField);\n    delimiter=\",\";\n  }\n  for (  String valueField : valueFieldNames) {\n    builder.append(delimiter);\n    builder.append(valueField);\n    delimiter=\",\";\n  }\n  builder.append(\" from \");\n  builder.append(tableName);\n  builder.append(\" where \");\n  delimiter=\"\";\n  for (int i=0; i < keys.length; i++) {\n    builder.append(delimiter);\n    builder.append(keyFieldNames[i]);\n    builder.append(\"=?\");\n    delimiter=\" and \";\n  }\n  String query=builder.toString();\n  PreparedStatement statement=null;\n  try {\n    if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {\n      log.debug(\"Executing query '\" + query + \"' for keys '\"+ print(keys)+ \"'\");\n    }\n    statement=connection.prepareStatement(query);\n    for (int i=0; i < keys.length; i++) {\n      statement.setObject(i + 1,keys[i]);\n    }\n    ResultSet rs=statement.executeQuery();\n    if (!rs.next()) {\n      return Collections.EMPTY_LIST;\n    }\n    List<Object[]> result=new ArrayList<Object[]>();\n    do {\n      Object[] row=new Object[keyFieldNames.length + valueFieldNames.length];\n      int index=0;\n      for (int i=0; i < keyFieldNames.length; i++) {\n        row[index]=DBUtil.getValue(rs,index + 1,keyTypes[i]);\n        index++;\n      }\n      for (int i=0; i < valueFieldNames.length; i++) {\n        row[index]=DBUtil.getValue(rs,index + 1,valueTypes[i]);\n        index++;\n      }\n      result.add(row);\n    }\n while (rs.next());\n    return result;\n  }\n catch (  SQLException ex) {\n    String message=\"Failed to invoke : \" + query + \" :\"+ ex.getMessage();\n    log.error(message,ex);\n    storeExceptionHandler.handle(message,ex);\n    throw new StoreExceptionDBRel(message,ex);\n  }\n finally {\n    try {\n      if (statement != null)       statement.close();\n    }\n catch (    SQLException e) {\n    }\n  }\n}\n", "public WaitForAllListener ( int numberOfResults ) { this ( numberOfResults , null ) ; }", "public boolean subsumes(ReasonerAtomicQuery parent){\n        MultiUnifier multiUnifier = this.getMultiUnifier(parent, UnifierType.SUBSUMPTIVE);\n        if (multiUnifier.isEmpty()) return false;\n        MultiUnifier inverse = multiUnifier.inverse();\n        return//check whether propagated answers would be complete\n                !inverse.isEmpty() &&\n                        inverse.stream().allMatch(u -> u.values().containsAll(this.getVarNames()))\n                        && !parent.getAtoms(NeqPredicate.class).findFirst().isPresent()\n                        && !this.getAtoms(NeqPredicate.class).findFirst().isPresent();\n    }", "public <I, O> HeartbeatManager<I, O> createHeartbeatManagerSender(\n\t\tResourceID resourceId,\n\t\tHeartbeatListener<I, O> heartbeatListener,\n\t\tScheduledExecutor scheduledExecutor,\n\t\tLogger log) {\n\n\t\treturn new HeartbeatManagerSenderImpl<>(\n\t\t\theartbeatInterval,\n\t\t\theartbeatTimeout,\n\t\t\tresourceId,\n\t\t\theartbeatListener,\n\t\t\tscheduledExecutor,\n\t\t\tscheduledExecutor,\n\t\t\tlog);\n\t}", "    public void groupOnCatOnly(Object[] rows) {\n        int index = 0;\n        while(index < rows.length) {\n            ProductRow row = (ProductRow)rows[index];\n            for(int i=index+1;i<rows.length;i++) {\n                ProductRow trow = (ProductRow)rows[i];\n                if(row.getCategory() == trow.getCategory()) {\n                    ProductRow temp = (ProductRow)rows[index+1];\n                    rows[index+1] = trow;\n                    rows[i] = temp;\n                    index++;\n                }\n            }\n            index++;\n        }\n    }\n", "protected void warning(int no, String msg, ILexLocation location)\n\t{\n\t\tVDMWarning vdmwarning = new VDMWarning(no, msg, location);\n\t\twarnings.add(vdmwarning);\n\n\t\tif (warnings.size() >= MAX - 1)\n\t\t{\n\t\t\terrors.add(new VDMError(9, \"Too many warnings\", location));\n\t\t\tthrow new InternalException(9, \"Too many warnings\");\n\t\t}\n\t}", "public CEdgeUpdater ( final INaviEdge edge ) { Preconditions . checkNotNull ( edge , STR_ ) ; m_edge = edge ; }", "@SuppressWarnings(\"unchecked\")\n    public static <T> T getInternalState(Object object, Class<T> fieldType) {\n        Field foundField = findFieldInHierarchy(object, new AssignableToFieldTypeMatcherStrategy(fieldType));\n        try {\n            return (T) foundField.get(object);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"Internal error: Failed to get field in method getInternalState.\", e);\n        }\n    }", "    public Dimension preferredLayoutSize(Container target) {\n\tbindContainer(target);\n\treturn psize;\n    }\n", "private HttpRequestRetryHandler getRetryHandler() {\n    final HttpRequestRetryHandler myRetryHandler = new HttpRequestRetryHandler() {\n\n      public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {\n        if (executionCount >= connectionConfiguration.getExecutionCount()) {\n          // Do not retry if over max retry count\n          LOG.debug(\"Execution count {} is bigger than threshold. Stop\", executionCount);\n          return false;\n        }\n        if (exception instanceof NoHttpResponseException) {\n          LOG.debug(\"NoHttpResponseException exception. Retry count {}\", executionCount);\n          return true;\n        }\n        if (exception instanceof UnknownHostException) {\n          LOG.debug(\"UnknownHostException. Retry count {}\", executionCount);\n          return true;\n        }\n        if (exception instanceof ConnectTimeoutException) {\n          LOG.debug(\"ConnectTimeoutException. Retry count {}\", executionCount);\n          return true;\n        }\n        if (exception instanceof SocketTimeoutException\n            || exception.getClass() == SocketTimeoutException.class\n            || exception.getClass().isInstance(SocketTimeoutException.class)) {\n          // Connection refused\n          LOG.debug(\"socketTimeoutException Retry count {}\", executionCount);\n          return true;\n        }\n        if (exception instanceof InterruptedIOException) {\n          // Timeout\n          LOG.debug(\"InterruptedIOException Retry count {}\", executionCount);\n          return true;\n        }\n        if (exception instanceof SSLException) {\n          LOG.debug(\"SSLException Retry count {}\", executionCount);\n          return true;\n        }\n        final HttpClientContext clientContext = HttpClientContext.adapt(context);\n        final HttpRequest request = clientContext.getRequest();\n        boolean idempotent = !(request instanceof HttpEntityEnclosingRequest);\n        if (idempotent) {\n          LOG.debug(\"HttpEntityEnclosingRequest. Retry count {}\", executionCount);\n          return true;\n        }\n        LOG.debug(\"Retry stopped. Retry count {}\", executionCount);\n        return false;\n      }\n    };\n    return myRetryHandler;\n  }", "private static int uarimaxEq(double value,double[] bv,int bvi[],BinaryOperator bOp) throws DMLRuntimeException {\n  int ix=Arrays.binarySearch(bv,value);\n  int ixMax=bv.length;\n  if (ix >= 0)   ixMax=bvi[ix] + 1;\n  return ixMax;\n}\n", "\tpublic String getMaskRule () {\n\t\treturn maskRule;\n\t}\n", "public Instance instance(int index){\n  return m_Instances.get(index);\n}\n", "private void checkJobPromotion ( ) { int timeout = config . getInteger ( STR_ , NUM_ ) ; int limit = config . getInteger ( STR_ , NUM_ ) ; vertx . setPeriodic ( timeout , null ) ; }", "public void setReservedDBInstances(java.util.Collection<ReservedDBInstance> reservedDBInstances) {\n        if (reservedDBInstances == null) {\n            this.reservedDBInstances = null;\n            return;\n        }\n\n        this.reservedDBInstances = new com.amazonaws.internal.SdkInternalList<ReservedDBInstance>(reservedDBInstances);\n    }", "\tpublic Object clone() {\n\t\tBaseReportFilter clonedFilter = null;\n\t\ttry {\n\t\t\tclonedFilter = (BaseReportFilter) super.clone();\n\t\t\tclonedFilter.listeners.addAll(this.listeners);\n\t\t} catch (CloneNotSupportedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn clonedFilter;\n\t}\n", "public DetachSynchronizer ( final IDebugger debugger , final ListenerProvider < IDebugEventListener > listeners ) { super ( debugger , listeners ) ; }", "private static String buildMessage ( final Locale locale , final String pattern , final Object ... arguments ) { return ( pattern == null ) ? STR_ : new MessageFormat ( translate ( pattern , locale ) , locale ) . format ( arguments ) ; }", "@Override\n    public GetLoadBalancerResult getLoadBalancer(GetLoadBalancerRequest request) {\n        request = beforeClientExecution(request);\n        return executeGetLoadBalancer(request);\n    }", "public boolean isAborted(){\n  return STATE_Aborted.equals(m_state);\n}\n", "public MapEntryInfoKey(Object value,Object key){\n  super(value);\n  _hashCode=_hashCode ^ key.hashCode();\n  _key=key;\n}\n", "@Nullable public static Date stringToDate(@NonNull String dateAsString,@NonNull DateFormat df){\n  try {\n    df.setTimeZone(UTC);\n    return df.parse(dateAsString);\n  }\n catch (  ParseException e) {\n    return null;\n  }\n}\n", "       private MenuItem createMenuItem(String name, String action, String icon) {\n\n\t \t  \t   FacesContext context = FacesContext.getCurrentInstance();\n\t \t  \t   UIViewRoot uiViewRoot = context.getViewRoot();\n\n\t \t  \t   MenuItem menuItem = new MenuItem();\n\t \t  \t   menuItem.setValue(name);\t\t\n\t \t  \t   menuItem.setId(uiViewRoot.createUniqueId());\n\t \t  \t   menuItem.setAction(createActionMethodBinding(action));\n\n\t \t  \t   if(icon != null) menuItem.setIcon(icon);\n\n\t \t  \t   return menuItem;\n       }\n", "public static boolean isReferenceType(NodeId referenceTypeId){\n  if (referenceTypeId.equals(Identifiers.References) || referenceTypeId.equals(Identifiers.NonHierarchicalReferences) || referenceTypeId.equals(Identifiers.HierarchicalReferences)|| referenceTypeId.equals(Identifiers.HasEventSource)|| referenceTypeId.equals(Identifiers.HasNotifier)|| referenceTypeId.equals(Identifiers.Organizes)|| referenceTypeId.equals(Identifiers.HasChild)|| referenceTypeId.equals(Identifiers.HasSubtype)|| referenceTypeId.equals(Identifiers.Aggregates)|| referenceTypeId.equals(Identifiers.HasProperty)|| referenceTypeId.equals(Identifiers.HasComponent)|| referenceTypeId.equals(Identifiers.HasOrderedComponent)|| referenceTypeId.equals(Identifiers.GeneratesEvent)|| referenceTypeId.equals(Identifiers.AlwaysGeneratesEvent)|| referenceTypeId.equals(Identifiers.HasEncoding)|| referenceTypeId.equals(Identifiers.HasModellingRule)|| referenceTypeId.equals(Identifiers.HasDescription)|| referenceTypeId.equals(Identifiers.HasTypeDefinition)) {\n    return true;\n  }\n  return false;\n}\n", "public void optimize(final SQLStatementRule rule, final SQLStatement sqlStatement) {\n        Optional<SQLStatementOptimizer> optimizer = rule.getOptimizer();\n        if (optimizer.isPresent()) {\n            optimizer.get().optimize(sqlStatement, shardingTableMetaData);\n        }\n    }", "public static String colorize ( Console console , String diffText ) { StringBuilder sb = new StringBuilder ( ) ; for ( String line : Splitter . on ( STR_ ) . split ( diffText ) ) { sb . append ( STR_ ) ; if ( line . startsWith ( STR_ ) ) { sb . append ( c", "public NodeRepresentation getNodeRepresentation(Node node, String mediaTypeHint) throws RepositoryException\n   {\n\n      NodeRepresentationFactory factory = factory(node);\n      if (factory != null)\n         return factory.createNodeRepresentation(node, mediaTypeHint);\n      else\n         return new DocumentViewNodeRepresentation(node);\n   }", "ObjectStreamField(String name,String signature,boolean unshared){\n  if (name == null) {\n    throw new NullPointerException();\n  }\n  this.name=name;\n  this.signature=signature.intern();\n  this.unshared=unshared;\n  field=null;\nswitch (signature.charAt(0)) {\ncase 'Z':\n    type=Boolean.TYPE;\n  break;\ncase 'B':\ntype=Byte.TYPE;\nbreak;\ncase 'C':\ntype=Character.TYPE;\nbreak;\ncase 'S':\ntype=Short.TYPE;\nbreak;\ncase 'I':\ntype=Integer.TYPE;\nbreak;\ncase 'J':\ntype=Long.TYPE;\nbreak;\ncase 'F':\ntype=Float.TYPE;\nbreak;\ncase 'D':\ntype=Double.TYPE;\nbreak;\ncase 'L':\ncase '[':\ntype=Object.class;\nbreak;\ndefault :\nthrow new IllegalArgumentException(\"illegal signature\");\n}\n}\n", "public static CmsResource createModelGroup(CmsObject cms, CmsADEConfigData configData) throws CmsException {\n\n        CmsResourceTypeConfig typeConfig = configData.getResourceType(\n            CmsResourceTypeXmlContainerPage.MODEL_GROUP_TYPE_NAME);\n        return typeConfig.createNewElement(cms, configData.getBasePath());\n    }", "public void onWriteDemand ( WebSocket conn ) ;", "    public void ejbCreate() throws CreateException {\n        try {\n            m_searchSessionLocal = SearchSessionUtil.getLocalHome().create();\n            m_permissionGroupAccessCreate = PermissionUtil.getLocalHome().findByPrimaryKey(new PermissionPK(new Integer(PermissionBean.GROUP_ACCESS_CREATE)));\n            m_permissionGroupAccessDelete = PermissionUtil.getLocalHome().findByPrimaryKey(new PermissionPK(new Integer(PermissionBean.GROUP_ACCESS_DELETE)));\n        }\n        catch(NamingException e) {\n            throw new CreateException(e.getMessage());\n        }\n        catch(FinderException e) {\n            throw new CreateException(e.getMessage());\n        }\n    }\n", "\tpublic Passenger createPassenger(String passport, String name) {\n\t\t// decide whether it is a new passenger\n\t\tPassenger passenger = getPassenger(passport);\n\t\tif (passenger == null) {\n\t\t\tpassenger = new Passenger(passport, name, REGULAR);\n\t\t\taddPassenger(passenger);\n\t\t}\n\t\treturn passenger;\n\t}\n", "public RegexValidator ( String [ ] regexs , boolean caseSensitive ) { if ( regexs == null || regexs . length == NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } patterns = new Pattern [ regexs . length ] ; int flags = ( caseSensitive ? NUM_ : Patt", "public void addBee(@Nonnull Item bee,int meta){\n  logger.debug(\"Adding Bee {%s}:%d\",bee,meta);\n  beesList.add(new ItemKey(bee,meta));\n}\n", "  public DHTMessage (Id source, int type) {\n    this.source = source;\n    this.type = type;\n  }\n", "    public boolean hasNoDefenseShield(int location) {\n        return false;\n    }\n", "public void updateButton ( ) { if ( m_graph . getSettings ( ) . getDisplaySettings ( ) . getMagnifyingGlassMode ( ) ) { selectButton ( ) ; } else { unselectButton ( ) ; } }", "public void flush() {\n        BulkResponse bulk = tryFlush();\n        if (!bulk.getDocumentErrors().isEmpty()) {\n            int maxErrors = 5;\n            String header = String.format(\"Could not write all entries for bulk operation [%s/%s]. Error \" +\n                    \"sample (first [%s] error messages):\\n\", bulk.getDocumentErrors().size(), bulk.getTotalDocs(), maxErrors);\n            StringBuilder message = new StringBuilder(header);\n            int i = 0;\n            for (BulkResponse.BulkError errors : bulk.getDocumentErrors()) {\n                if (i >=maxErrors ) {\n                    break;\n                }\n                message.append(\"\\t\");\n                appendError(message, errors.getError());\n                message.append(\"\\n\");\n                message.append(\"\\t\")\n                \t.append(errors.getDocument().toString())\n                \t.append(\"\\n\");\n                i++;\n            }\n            message.append(\"Bailing out...\");\n            throw new EsHadoopException(message.toString());\n        }\n    }", "public ResponsePacket visit ( SetAutoCommitRequest request , QuerySession session ) throws LeaseDeniedException , RemoteException , TransactionException { ResponsePacket response = new ResponsePacket ( ) ; if ( request . isAutoCommit ( ) == session . isAutoCommit ( ) ) return response ; if ( request . isAutoCommit ( ) ) { if ( session . getTransaction ( ) != null ) try { session . getTransaction ( ) . abort ( ) ; } catch ( Exception e ) { if ( _logger . isLoggable ( Level . FINE ) ) { _logger . log ( Level . FINE , STR_ , e ) ; } } session . setTransaction ( null ) ; session . clearUnderTransaction ( ) ; } else { session . setTransaction ( createTransaction ( ) ) ; } session . setAutoCommit ( request . isAutoCommit ( ) ) ; session . setSelectedForUpdate ( null ) ; response . setIntResult ( NUM_ ) ; return response ; }", "public static void resolveFunction ( final Window parent , final IDatabase database , final INaviFunction function ) { final CFunctionSelectionDialog dlg = new CFunctionSelectionDialog ( parent , database ) ; GuiHelper . centerChildToParent ( parent , dlg", "public DeleteFacesResult withDeletedFaces(String... deletedFaces) {\n        if (this.deletedFaces == null) {\n            setDeletedFaces(new java.util.ArrayList<String>(deletedFaces.length));\n        }\n        for (String ele : deletedFaces) {\n            this.deletedFaces.add(ele);\n        }\n        return this;\n    }", "    public double getcountActiveSessions() {\n        return countActiveSessions;\n    }\n", "@Override public void loadTxMtd(JobConf job,FileSystem fs,Path tfMtdDir,TfUtils agents) throws IOException {\n  if (fs.isDirectory(tfMtdDir)) {\n    if (_colList != null)     for (int i=0; i < _colList.length; i++) {\n      int colID=_colList[i];\n      if (_mvMethodList[i] == MVMethod.GLOBAL_MEAN || _mvMethodList[i] == MVMethod.GLOBAL_MODE)       _replacementList[i]=readReplacement(colID,fs,tfMtdDir,agents);\n else       if (_mvMethodList[i] == MVMethod.CONSTANT) {\n      }\n else       throw new RuntimeException(\"Invalid Missing Value Imputation methods: \" + _mvMethodList[i]);\n    }\n    if (_colList != null)     for (int i=0; i < _colList.length; i++)     if (_isMVScaled.get(i))     processScalingFile(i,_colList,_meanList,_varList,fs,tfMtdDir,agents);\n    if (_scnomvList != null)     for (int i=0; i < _scnomvList.length; i++)     processScalingFile(i,_scnomvList,_scnomvMeanList,_scnomvVarList,fs,tfMtdDir,agents);\n  }\n else {\n    fs.close();\n    throw new RuntimeException(\"Path to recode maps must be a directory: \" + tfMtdDir);\n  }\n}\n", "\tprivate void stop() {\n\t\tif (state.equals(State.SENDING)) {\n\t\t\tperiodicSendTimer.stop();\n\t\t\tswitchState();\n\t\t}\n\t}\n", "public Collection<OutputPort> outputPorts(){\n  return outputPorts.values();\n}\n", "public static HttpResponse executePostRequest ( String entityName , String payLoad , boolean secure ) throws MalformedURLException , IOException , ProtocolException { URL url = ( secure ) ? new URL ( SERVICE_ROOT_URI + STR_ + entityName ) : new URL ( SERVICE_ROOT_URI + entityName ) ; HttpURLConnection connection = ( HttpURLConnection ) url . openConnection ( ) ; try { connection . setRequestMethod ( STR_ ) ; connection . setDoInput ( BOOL_ ) ; connection . setDoOutput ( BOOL_ ) ; connection . setUseCaches ( BOOL_ ) ; if ( secure ) { connection . setRequestProperty ( STR_ , AUTHORIZATION ) ; } connection . setRequestProperty ( STR_ , STR_ ) ; connection . setRequestProperty ( STR_ , STR_ ) ; DataOutputStream outStream = new DataOutputStream ( connection . getOutputStream ( ) ) ; try { outStream . writeBytes ( payLoad ) ; outStream . close ( ) ; return new HttpResponse ( connection ) ; } finally { outStream . close ( ) ; } } finally { connection . disconnect ( ) ; } }", "    public int getItemCount() {\n        int returnvalue = 0;\n        try {\n            cacheLock.readLock().acquire();\n        } catch (InterruptedException ex) {\n            log.error(\"Interrupted waiting for write lock. Aborting method\", ex);\n            return 0;\n        }\n        try {\n            returnvalue = cacheContents.size();\n        } finally {\n            cacheLock.readLock().release();\n        }\n        return returnvalue;\n    } /* getItemCount() */\n", "public static void frontEndInitialize(SpecObj spec,PrintStream syserr) throws InitException {\n  String fileName=spec.getFileName();\n  Errors initErrors=spec.initErrors;\n  try {\n    Configuration.ReInit();\n    Context.reInit();\n    Configuration.load(initErrors);\n    BuiltInLevel.load();\n    if (!initErrors.isSuccess()) {\n      syserr.println(\"*** Errors during initialization of SANY:\\n\");\n      syserr.print(initErrors);\n      spec.errorLevel=1;\n      throw new InitException();\n    }\n  }\n catch (  Exception e) {\n    syserr.println(\"Unexpected exception during SANY initialization \" + fileName + \"\\n\"+ e);\n    syserr.println(\"Initialization errors detected before \" + \"the unexpected exception:\\n\");\n    syserr.print(initErrors);\n    spec.errorLevel=1;\n    throw new InitException();\n  }\n  return;\n}\n", "    public User retrieveUser(String nm) throws SQLException {\n        return retrieveUserImpl(\"nm='\"+nm+\"'\");\n    }\n", "public static void importOperands ( final CConnection connection , final int rawModuleId , final int moduleId ) throws SQLException { final String query = STR_ + CTableNames . OPERANDS_TABLE + STR_ + moduleId + STR_ + STR_ + rawModuleId + STR_ ; connectio", "    protected String getPreDefOuFqn() {\n\n        if (Boolean.valueOf(m_actionLogout).booleanValue() && (getRequest().getAttribute(PARAM_PREDEF_OUFQN) == null)) {\n            String oufqn = getCmsObject().getRequestContext().getOuFqn();\n            if (!oufqn.startsWith(CmsOrganizationalUnit.SEPARATOR)) {\n                oufqn = CmsOrganizationalUnit.SEPARATOR + oufqn;\n            }\n            getRequest().setAttribute(CmsLogin.PARAM_PREDEF_OUFQN, oufqn);\n        }\n        return (String)getRequest().getAttribute(PARAM_PREDEF_OUFQN);\n    }\n", "public static void writeUuid(ByteBuf buf,UUID uuid){\n  buf.writeLong(uuid.getMostSignificantBits());\n  buf.writeLong(uuid.getLeastSignificantBits());\n}\n", "AddressAttribute ( char attributeType ) { super ( attributeType ) ; }", "public boolean allowLargeMessage(long size) {\n        if (!getConfig().areMessagesLimited()) {\n            // no limits on messages, so default to yes\n            return true;\n        }\n\n        if (HttpConfigConstants.UNLIMITED == getConfig().getLargerBufferSize()) {\n            // no second upper limit, the first is a hard ceiling\n            // unlimited is the same as not-set\n            return false;\n        }\n        // otherwise compare sizes\n        if (size > getConfig().getLargerBufferSize()) {\n            return false;\n        }\n\n        // if the current setting is true, then change it to false for anybody\n        // else checking and let the last caller in. If it is false, then let\n        // them know that.\n        synchronized (this.key) {\n            if (this.allowLargeMessage) {\n                this.allowLargeMessage = false;\n                return true;\n            }\n            return false;\n        }\n    }", "public boolean isIdFilter() {\n\n        return (m_structureId != null)\n            && (m_name == null)\n            && (m_namePattern == null)\n            && (m_states == null)\n            && (m_rejectStructureId == null)\n            && (m_locale == null);\n    }", "protected void copyFields() {\n        for(Field field: copied_fields) {\n            Object value=Util.getField(field,main_channel);\n            Util.setField(field, this, value);\n        }\n    }", "public boolean isPlaying ( ) { return isPlaying ; }", "public String getResourcePath(String strResourceName)\n    {\n        if (strResourceName == null)\n            strResourceName = THIN_RES_PATH + \"Menu\"; // ResourceConstants.MENU_RESOURCE;\n        if ((!strResourceName.endsWith(RESOURCES))\n            && (!strResourceName.endsWith(BUNDLE))\n                && (!strResourceName.endsWith(PROPERTIES)))\n                    strResourceName = strResourceName + \"Resources\";\n        if (strResourceName.indexOf('.') == -1)\n            strResourceName = getResPackage() + strResourceName;\n        if (strResourceName.indexOf('.') == 0)\n            strResourceName = Constants.ROOT_PACKAGE + strResourceName.substring(1);\n        return strResourceName;\n    }", "@Override public void loadUrl(Tab tab,String url){\n  loadUrl(tab,url,null);\n}\n", "@Override\n    public void setString(String parameterName, String x) throws SQLException\n    {\n        checkClosed();\n        throw SQLError.noSupport();\n    }", "public LinearRegression regression(Matrix y,double ridge){\n  return new LinearRegression(this,y,ridge);\n}\n", "public void clear ( ) { while ( pollFirst ( ) != null ) ; }", "    public void pie(int alpha, String line_colour, String label_colour) {\n        pie(alpha, line_colour, label_colour, true, false);\n    }\n", "public void release ( ) { }", "public void setContent(Content content) {\n        setSize(content.getContent().length);\n        setAttachmentContentId(content.getId());\n    }", "private void setConfigEntityMapping(Map<String, Object> configProps) throws WIMException {\n        List<String> entityTypes = getSupportedEntityTypes();\n        String rdnProp;\n        String type = null;\n        entityConfigMap = new HashMap<String, String>();\n        for (int i = 0; i < entityTypes.size(); i++) {\n            type = entityTypes.get(i);\n            rdnProp = (getRDNProperties(type) == null) ? null : getRDNProperties(type)[0];\n            entityConfigMap.put(type, rdnProp);\n        }\n        if (entityConfigMap.get(Service.DO_LOGIN_ACCOUNT) == null && entityConfigMap.get(personAccountType) != null)\n            entityConfigMap.put(Service.DO_LOGIN_ACCOUNT, entityConfigMap.get(personAccountType));\n\n        if (tc.isDebugEnabled())\n            Tr.debug(tc, \"setConfigEntityMapping entityConfigMap:\" + entityConfigMap);\n    }", "private void replacesMessages(Map<String, String> descKeys, List<CmsResource> resources)\n    throws CmsException, UnsupportedEncodingException {\n\n        for (CmsResource resource : resources) {\n            CmsFile file = getCms().readFile(resource);\n    ", "    public void addOperationalString(OperationalString opString) {\n        if (opString == null)\n            throw new NullPointerException(\"OperationalString is null\");\n        synchronized (nestedOpStrings) {\n            nestedOpStrings.add(opString);\n        }\n    }\n", "\tpublic void deleteWaitingPersons(String username,EntityManager em,int peopleId) throws Throwable {\n\t\ttry {\n\t\t\tQuery q = em.createQuery(\"delete from WaitingPerson wp where wp.pk.peopleId=?1\");\n\t\t\tList<Object> params = new ArrayList<Object>();\n\t\t\tparams.add(peopleId);\n\t\t\tJPAMethods.executeUpdate(username, q, params);\n\t\t\tem.flush();\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tLogger.error(null, ex.getMessage(), ex);\n\t\t\tthrow ex;\n\t\t}\n\t}\n", "public void rollbackMethodNull(String stepId) throws WorkflowException {\n  WorkflowStepCompleter.stepSucceded(stepId);\n}", "\tpublic void redo() {\n\t\ttry {\n\t\t\t// Redo the first step first:\n\t\t\tfor (Step step : _steps) {\n\t\t\t\tif (step._type == Step.Type.INSERT) {\n\t\t\t\t\t_annotations.add(step._index, step._annotation);\n\t\t\t\t}\n\t\t\t\telse if (step._type == Step.Type.REMOVE) {\n\t\t\t\t\t_annotations.removeLastOccurrence(step._annotation);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IndexOutOfBoundsException e) {\n\t\t\tthrow new IllegalStateException();\n\t\t}\n\t}\n", "protected static <T extends CommonConfiguration> T applyConfigurationFromCustomizations(\r\n\t            CommonConfiguration configuration, CCustomizations customizations, boolean cloneClassConfiguration)\r\n\t            throws IOException, ClassNotFoundException {\r\n\t\tCPluginCustomization customization = customizations.find(XEW_QNAME.getNamespaceURI(), XEW_QNAME.getLocalPart());\r\n\r\n\t\tif (customization == null) {\r\n\t\t\tif (cloneClassConfiguration) {\r\n\t\t\t\treturn (T) new ClassConfiguration(configuration);\r\n\t\t\t}\r\n\r\n\t\t\treturn (T) configuration;\r\n\t\t}\r\n\r\n\t\tcustomization.markAsAcknowledged();\r\n\r\n\t\tNamedNodeMap attributes = customization.element.getAttributes();\r\n\r\n\t\tif (cloneClassConfiguration) {\r\n\t\t\tconfiguration = new ClassConfiguration(configuration);\r\n\t\t}\r\n\r\n\t\tfor (int i = 0; i < attributes.getLength(); i++) {\r\n\t\t\tNode attribute = attributes.item(i);\r\n\t\t\tif (attribute.getNamespaceURI() == null) {\r\n\t\t\t\tapplyConfigurationOption(configuration, ConfigurationOption.byOption(attribute.getNodeName()),\r\n\t\t\t\t            attribute.getNodeValue());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (T) configuration;\r\n\t}", "public void startPhase(int phase,String source){\n  if (Trace.phase) {\n    String name=(compilerName == null) ? \"unknown\" : compilerName;\n    boolean isabc=name.equals(\"abc\");\n    if (isabc == false || Trace.phaseabc) {\n      Trace.trace(\"Start compiler \" + name + \" phase[\"+ getPhaseName(phase)+ \"] with: \"+ source);\n    }\n  }\n  startTime=System.currentTimeMillis();\n}\n", "public void execute ( Runnable runnable ) throws IllegalStateException { if ( runObj != null ) throw new IllegalStateException ( STR_ + STR_ ) ; synchronized ( working ) { if ( runObj != null ) throw new IllegalStateException ( STR_ + STR_ ) ; runObj = runnable ; working . notifyAll ( ) ; } }", "\tpublic String getIndicator1() {\n\t\treturn indicator1;\n\t}\n", "protected long calculateSleepTime() {\n        Calendar c = new GregorianCalendar();\n        int currentHour = c.get(Calendar.HOUR_OF_DAY);\n        int currentMin = c.get(Calendar.MINUTE);\n        int currentSec = c.get(Calendar.SECOND);\n        long stime", "public ReilBlock ( final List < ReilInstruction > instructions ) { Preconditions . checkNotNull ( instructions , STR_ ) ; for ( final ReilInstruction instruction : instructions ) { Preconditions . checkNotNull ( instruction , STR_ ) ; } m_instructions = n", "    public Channel getCellChannel2() {\n        return getCellChannel();\n    }\n", "public void destroy ( ) { super . destroy ( ) ; }", "public void setPointerColor(final ColorDef POINTER_COLOR) {\n        getModel().setPointerColor(POINTER_COLOR);\n        init(getInnerBounds().width, getInnerBounds().height);\n        repaint(getInnerBounds());\n    }", "protected void addTargetListeners (Component comp)\n    {\n        comp.addMouseListener(_targetListener);\n        comp.addMouseMotionListener(_targetListener);\n        if (comp instanceof Container) { // hm, always true for JComp..\n            Container cont = (Container) comp;\n            cont.addContainerListener(_childListener);\n            for (int ii=0, nn=cont.getComponentCount(); ii < nn; ii++) {\n                addTargetListeners(cont.getComponent(ii));\n            }\n        }\n    }", "public static void rewriteMenuURL(ArrayList<MWebMenu> menuList,HttpServletRequest request){\n  HttpSession session=request.getSession();\n  String sessionID=session.getId();\n  for (  MWebMenu menu : menuList) {\n    String link=menu.getMenuLink();\n    int index=link.indexOf(\"?\");\n    if (index != -1) {\n      String part1=link.substring(0,index);\n      String part2=link.substring(index);\n      link=part1 + \";jsessionid=\" + sessionID+ part2;\n      menu.setMenuLink(link);\n    }\n  }\n}\n", "  private void processForRuleEd(FzyRule fr) {\n    infosapient.ui.InfoSapientRuleEditor sre = null;\n    if (fr == null) {\n      sre = new infosapient.ui.InfoSapientRuleEditor(this);\n    } else {\n      sre = new infosapient.ui.InfoSapientRuleEditor(this, fr);\n    }\n    sre.setVisible(true);\n  }\n", "void notifyComplete(){\nsynchronized (waitObject) {\n    isComplete=true;\n    waitObject.notifyAll();\n    if (listener != null) {\n      listener.onSuccess(this);\n    }\n  }\n}\n", "private static Uri updateImage(Uri imageUri,ContentResolver resolver,String title,long date,Location location,int orientation,int jpegLength,String path,int width,int height,String mimeType){\n  ContentValues values=getContentValuesForData(title,date,location,orientation,jpegLength,path,width,height,mimeType);\n  Uri resultUri=imageUri;\n  if (Storage.isSessionUri(imageUri)) {\n    resultUri=addImageToMediaStore(resolver,title,date,location,orientation,jpegLength,path,width,height,mimeType);\n    sSessionsToContentUris.put(imageUri,resultUri);\n    sContentUrisToSessions.put(resultUri,imageUri);\n  }\n else {\n    resolver.update(imageUri,values,null,null);\n  }\n  return resultUri;\n}\n", "public void initializePackageContents() {\n\t\tif (isInitialized) return;\n\t\tisInitialized = true;\n\n\t\t// Initialize package\n\t\tsetName(eNAME);\n\t\tsetNsPrefix(eNS_PREFIX);\n\t\tsetNsURI(eNS_URI);\n\n\t\t// Create type parameters\n\n\t\t// Set bounds for type parameters", "protected boolean[] canHandleNClasses(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int numClasses){\n  print(\"more than two class problems\");\n  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,Attribute.NOMINAL);\n  print(\"...\");\n  ArrayList<String> accepts=new ArrayList<String>();\n  accepts.add(\"number\");\n  accepts.add(\"class\");\n  int numTrain=getNumInstances(), missingLevel=0;\n  boolean predictorMissing=false, classMissing=false;\n  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,Attribute.NOMINAL,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);\n}\n", "\t\t\tpublic Double getEditorValue( final BricksContext context ) {\n\t\t\t\tfinal String text = ((JTextField)getEditorComponent()).getText();\n\t\t\t\treturn new Double( text );\n\t\t\t}\n", "  public void insertDefaultInPattern(int tempo, int dimension) {\n    boolean patNotFree[]=getPatternUsage();\n\n    // set default for patterns not used\n    for (int i=0; i<Pattern.MAX_PATTERNS; i++) {\n      if (!patNotFree[i]) {\n        patterns[i].setTemp", "public void showVoice ( boolean show ) { if ( show ) { mVoiceBtn . setVisibility ( VISIBLE ) ; } else { mVoiceBtn . setVisibility ( GONE ) ; } }", "public static Font rebuildFont(String fontString){\n  if (fontString.length() == 0)   return DEFAULT_FONT;\n  int fontStyle=Font.PLAIN;\n  int fontSize=12;\n  int start=fontString.indexOf(\"-\",1) + 1;\n  int end=fontString.indexOf(\"-\",start + 1);\n  String name=fontString.substring(start,end);\n  if (fontString.indexOf(\"-bold-\") >= 0)   fontStyle=Font.BOLD;\n  if (fontString.indexOf(\"-i-\") >= 0)   fontStyle+=Font.ITALIC;\n  start=fontString.indexOf(\"--\") + 2;\n  end=fontString.indexOf(\"-\",start + 1);\n  String tmpFontSize=fontString.substring(start,end);\n  if (tmpFontSize.indexOf(\"*\") < 0)   fontSize=Integer.parseInt(tmpFontSize);\n  return new Font(name,fontStyle,fontSize);\n}\n", "  public void deleteGuestRecordings(String username,EntityManager em,List<GuestRecording> vos) throws Throwable {\n    try {\n      for(GuestRecording vo: vos) {\n        vo.setDeleted(Consts.FLAG_Y);\n        JPAMethods.merge(em, username, DefaultFieldsCalla", "@SuppressWarnings(\"null\")\n  protected JSONObject toReponsiveImageSource(Media media, Rendition rendition) {\n    try {\n      JSONObject source = new JSONObject();\n      MediaFormat mediaFormat = rendition.getMediaFormat();\n      source.put(MediaNameConstants.PROP_BREAKPOINT, mediaFormat.getProperties().get(MediaNameConstants.PROP_BREAKPOINT));\n      source.put(PROP_SRC, rendition.getUrl());\n      return source;\n    }\n    catch (JSONException ex) {\n      throw new RuntimeException(\"Error building JSON source.\", ex);\n    }\n  }", "private static <T> void readTableField(DatabaseTableConfig<T> config, String field, String value) {\n\t\tif (field.equals(FIELD_NAME_DATA_CLASS)) {\n\t\t\ttry {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tClass<T> clazz = (Class<T>) Class.forName(value);\n\t\t\t\tconfig.setDataClass(clazz);\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tthrow new IllegalArgumentException(\"Unknown class specified for dataClass: \" + value);\n\t\t\t}\n\t\t} else if (field.equals(FIELD_NAME_TABLE_NAME)) {\n\t\t\tconfig.setTableName(value);\n\t\t}\n\t}", "protected int pushTypeVariables () {\r\n\t\tGenericType[] genericTypes = kryo.getGenerics().nextGenericTypes();\r\n\t\tif (genericTypes == null) return 0;\r\n\r\n\t\tint pop = kryo.getGenerics().pushTypeVariables(genericsHierarchy, genericTypes);\r\n\t\tif (TRACE && pop > 0) trace(\"kryo\", \"Generics: \" + kryo.getGenerics());\r\n\t\treturn pop;\r\n\t}", "    public void setLabel(String label) {\n        this.elementLabel = this.element.getOwnerDocument().createElementNS(this.ns,\n                \"wsc:\" +\n                ConversationConstants.LABEL_LN);\n        WSSecurityUtil.setNamespace(this.elementLabel, this.ns,\n                ConversationConstants.WSC_PREFIX);\n        this.elementLabel.appendChild(this.element.getOwnerDocument().createTextNode(label));\n        this.element.appendChild(this.elementLabel);\n    }\n", "@Override\n    public ZMatrixRMaj getLower(ZMatrixRMaj lower )\n    {\n        int numRows = LU.numRows;\n        int numCols = LU.numRows < LU.numCols ? LU.numRows : LU.numCols;\n\n        lower = UtilDecompositons_ZDRM.checkZerosUT(lower, numRows,numCols);\n\n        for( int i = 0; i < numCols; i++ ) {\n            lower.set(i,i,1.0,0.0);\n\n            for( int j = 0; j < i; j++ ) {\n                int indexLU = LU.getIndex(i,j);\n                int indexL = lower.getIndex(i,j);\n\n                double real = LU.data[indexLU];\n                double imaginary = LU.data[indexLU+1];\n\n                lower.data[indexL] = real;\n                lower.data[indexL+1] = imaginary;\n            }\n        }\n\n        if( numRows > numCols ) {\n            for( int i = numCols; i < numRows; i++ ) {\n                for( int j = 0; j < numCols; j++ ) {\n                    int indexLU = LU.getIndex(i,j);\n                    int indexL = lower.getIndex(i,j);\n\n                    double real = LU.data[indexLU];\n                    double imaginary = LU.data[indexLU+1];\n\n                    lower.data[indexL] = real;\n                    lower.data[indexL+1] = imaginary;\n                }\n            }\n        }\n        return lower;\n    }", "Item newFloat ( final float value ) { key . set ( value ) ; Item result = get ( key ) ; if ( result == null ) { pool . putByte ( FLOAT ) . putInt ( key . intVal ) ; result = new Item ( index ++ , key ) ; put ( result ) ; } return result ; }", "public boolean parseKMLFile(File file){\n  mLocalFile=file;\n  Log.d(BonusPackHelper.LOG_TAG,\"KmlProvider.parseKMLFile:\" + mLocalFile.getAbsolutePath());\n  InputStream stream;\n  boolean ok;\n  try {\n    stream=new BufferedInputStream(new FileInputStream(mLocalFile));\n    ok=parseKMLStream(stream,null);\n    stream.close();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    ok=false;\n  }\n  return ok;\n}\n", "private void readObject ( ObjectInputStream s ) throws IOException , ClassNotFoundException { s . defaultReadObject ( ) ; try { init ( ) ; } catch ( RuntimeException e ) { if ( e instanceof NullPointerException || e instanceof IllegalArgumentException ) {", "public Rectangle placeBarcode(PdfContentByte cb, Color barColor, Color textColor) {\n        if (supp.getFont() != null)\n            supp.setBarHeight(ean.getBarHeight() + supp.getBaseline() - supp.getFont().getFontDescriptor(BaseFont.CAPHEIGHT, supp.getSize()));\n        else\n            supp.setBarHeight(ean.getBarHeight());\n        Rectangle eanR = ean.getBarcodeSize();\n        cb.saveState();\n        ean.placeBarcode(cb, barColor, textColor);\n        cb.restoreState();\n        cb.saveState();\n        cb.concatCTM(1, 0, 0, 1, eanR.getWidth() + n, eanR.getHeight() - ean.getBarHeight());\n        supp.placeBarcode(cb, barColor, textColor);\n        cb.restoreState();\n        return getBarcodeSize();\n    }", "public boolean addJournalRollbackStep(URI rpSystemId,String token) throws WorkflowException {\n  WorkflowStepCompleter.stepSucceded(token);\n  return true;\n}\n", "boolean closingDatabase ( IDatabase database ) ;", "    public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {\n        if (\"Datafeed\".equals(portName)) {\n            setDatafeedEndpointAddress(address);\n        }\n        else { // Unknown Port Name\n            throw new javax.xml.rpc.ServiceException(\" Cannot set Endpoint Address for Unknown Port\" + portName);\n        }\n    }\n", "public Date setDatastreamState(Context context,\n                                   String pid,\n                                   String dsID,\n                                   String dsState,\n                                   String logMessage) throws ServerException {\n        return worker.setDatastreamState(context,\n                                         pid,\n                                         dsID,\n                                         dsState,\n                                         logMessage);\n    }", "  public int hashCode() {\n    return pkcs11Module_.hashCode() ;\n  }\n", "    public Portal getPortal() {\n        if (getChannelProfile() != null) {\n            return getChannelProfile().getPortal();\n        }\n\n        return null;\n    }\n", "\tpublic void dispose() {\n\t\tif(partListener != null)\n\t\t\tNOASearchPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().removePartListener(partListener);\n\t\tsuper.dispose();\n\t}\n", "@Override\n    public void doCommit(boolean cachedObjectRequired,\n                         Context context,\n                         DigitalObject obj,\n                         String logMessage,\n                         boolean remove) throws ServerException {\n\n        super.doCommit(cachedObjectRequired, context, obj, logMessage, remove);\n\n        // determine the url we need to invoke\n        StringBuffer url = new StringBuffer();\n        url.append(_gSearchRESTURL + \"?operation=updateIndex\");\n        String pid = obj.getPid();\n        url.append(\"&value=\" + urlEncode(pid));\n        if (remove) {\n            logger.info(\"Signaling removal of {} to GSearch\", pid);\n            url.append(\"&action=deletePid\");\n        } else {\n            if (logger.isInfoEnabled()) {\n                if (obj.isNew()) {\n                    logger.info(\"Signaling add of {} to GSearch\", pid);\n                } else {\n                    logger.info(\"Signaling mod of {} to GSearch\", pid);\n                }\n            }\n            url.append(\"&action=fromPid\");\n        }\n\n        // send the signal\n        sendRESTMessage(url.toString());\n    }", "    public void shutdown() {\n        this.con = null;\n        this.listeners = null;\n        this.xaCon = null;\n    }\n", "public static Workbook getWorkbook(File file) throws IOException\n    {\n        Workbook ret = null;\n        String lowerFilename = file.getName().toLowerCase();\n        if(lowerFilename.endsWith(\".\"+CommonFiles.XLS_EXT))\n        {\n            ret = XlsWorkbook.getWorkbook(file);\n        }\n        else if(lowerFilename.endsWith(\".\"+CommonFiles.XLSX_EXT))\n        {\n            XlsxWorkbook.initJaxbContexts();\n            ret = XlsxWorkbook.getWorkbook(file);\n        }\n        return ret;\n    }", "public boolean isLoaded ( ) { return m_addressSpace . isLoaded ( ) ; }", "public void setLicenses(java.util.Collection<LicenseConfiguration> licenses) {\n        if (licenses == null) {\n            this.licenses = null;\n            return;\n        }\n\n        this.licenses = new com.amazonaws.internal.SdkInternalList<LicenseConfiguration>(licenses);\n    }", "private void createAndAddButton(PatternType pattern, String messageKey) {\n\n        CmsRadioButton btn = new CmsRadioButton(pattern.toString(), Messages.get().key(messageKey));\n        btn.addStyleName(I_CmsWidgetsLayoutBundle.INSTANCE.widgetCss().radioButtonlabel());\n        btn.setGroup(m_groupPattern);\n        m_patternButtons.put(pattern, btn);\n        m_patternRadioButtonsPanel.add(btn);\n\n    }", "public static final Collection<String> getDescription(final String pAtr) {\n\t\tCollection<String> ret = null;\n\t\tif (StringUtils.isNotBlank(pAtr)) {\n\t\t\tString val = StringUtils.deleteWhitespace(pAtr).toUpperCase();\n\t\t\tfor (String key : MAP.keySet()) {\n\t\t\t\tif (val.matches(\"^\" + key + \"$\")) {\n\t\t\t\t\tret = (Collection<String>) MAP.get(key);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}", "@Override\n  public synchronized void onNext(final ClientRuntimeProtocol.JobControlProto jobControlProto) {\n    if (jobControlProto.hasSignal()) {\n      if (jobControlProto.getSignal() == ClientRuntimeProtocol.Signal.SIG_TERMINATE) {\n        try {\n          if (jobControlProto.hasMessage()) {\n            getClientCloseWithMessageDispatcher().onNext(jobControlProto.getMessage().toByteArray());\n          } else {\n            getClientCloseDispatcher().onNext(null);\n          }\n        } finally {\n          this.driverStatusManager.onComplete();\n        }\n      } else {\n        LOG.log(Level.FINEST, \"Unsupported signal: \" + jobControlProto.getSignal());\n      }\n    } else if (jobControlProto.hasMessage()) {\n      getClientMessageDispatcher().onNext(jobControlProto.getMessage().toByteArray());\n    }\n  }", "public boolean checkForStringAttributes(){\n  return checkForAttributeType(Attribute.STRING);\n}\n", "public synchronized void clean ( ) { _queryCache . clear ( ) ; }", "void lockUserDeviceLists ( ) ;", "@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=\"FE_FLOATING_POINT_EQUALITY\",justification=\"OK to compare floating point\") protected void notifyTargetIntensityChange(double intensity){\n  double oldValue=mCurrentIntensity;\n  mCurrentIntensity=intensity;\n  if (oldValue != intensity) {\n    firePropertyChange(\"TargetIntensity\",Double.valueOf(oldValue),Double.valueOf(intensity));\n  }\n}\n", "@Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isName() || n.isImportStar() || (n.isStringKey() && !n.hasChildren())) {\n      if ((parent.isImportSpec() && n != parent.getLastChild())\n          || (parent.isExportSpec() && n != parent.getFirstChild())) {\n        // The n in `import {n as x}` or `export {x as n}` are not references, even though\n        // they are represented in the AST as NAME nodes.\n        return;\n      }\n\n      Var v = t.getScope().getVar(n.getString());\n\n      if (v != null) {\n        if (varFilter.apply(v)) {\n          addReference(v, new Reference(n, t, peek(blockStack)));\n        }\n\n        if (v.getParentNode() != null\n            && NodeUtil.isHoistedFunctionDeclaration(v.getParentNode())\n            // If we're only traversing a narrow scope, do not try to climb outside.\n            && (narrowScope == null || narrowScope.getDepth() <= v.getScope().getDepth())) {\n          outOfBandTraversal(v);\n        }\n      }\n    }\n\n    if (isBlockBoundary(n, parent)) {\n      pop(blockStack);\n    }\n  }", "private static int appendTypeArgumentSignature(char[] string,int start,boolean fullyQualifyTypeNames,StringBuffer buffer){\n  if (start >= string.length) {\n    throw new IllegalArgumentException();\n  }\n  char c=string[start];\nswitch (c) {\ncase C_STAR:\n    ", "    public void insert(Object[] data) throws HsqlException {\n\n        if (data.length != columnCount) {\n            Object[] newdata = getEmptyRowData();\n\n            ArrayUtil.copyArray(data, newdata, columnCount);\n\n            data = newdata;\n        }\n\n        Row r = newRow(data);\n\n        indexRow(r);\n    }\n", "private int normalizeCharClass(StringBuilder newPattern,int i){\n  StringBuilder charClass=new StringBuilder();\n  StringBuilder eq=null;\n  int lastCodePoint=-1;\n  String result;\n  i++;\n  charClass.append(\"[\");\n  while (true) {\n    int c=normalizedPattern.codePointAt(i);\n    StringBuilder sequenceBuffer;\n    if (c == ']' && lastCodePoint != '\\\\') {\n      charClass.append((char)c);\n      break;\n    }\n else     if (Character.getType(c) == Character.NON_SPACING_MARK) {\n      sequenceBuffer=new StringBuilder();\n      sequenceBuffer.appendCodePoint(lastCodePoint);\n      while (Character.getType(c) == Character.NON_SPACING_MARK) {\n        sequenceBuffer.appendCodePoint(c);\n        i+=Character.charCount(c);\n        if (i >= normalizedPattern.length())         break;\n        c=normalizedPattern.codePointAt(i);\n      }\n      String ea=produceEquivalentAlternation(sequenceBuffer.toString());\n      charClass.setLength(charClass.length() - Character.charCount(lastCodePoint));\n      if (eq == null)       eq=new StringBuilder();\n      eq.append('|');\n      eq.append(ea);\n    }\n else {\n      charClass.appendCodePoint(c);\n      i++;\n    }\n    if (i == normalizedPattern.length())     throw error(\"Unclosed character class\");\n    lastCodePoint=c;\n  }\n  if (eq != null) {\n    result=\"(?:\" + charClass.toString() + eq.toString()+ \")\";\n  }\n else {\n    result=charClass.toString();\n  }\n  newPattern.append(result);\n  return i;\n}\n", "    protected boolean isIrreflexive(NodeSet set) throws SiteException {\n        SiteNode[] resources = set.getNodes();\n        boolean isIrreflexive = true;\n        for (int i = 0; i < resources.length; i++) {\n            if (requires(resources[i], resources[i])) {\n                isIrreflexive = false;\n            }\n        }\n        return isIrreflexive;\n    }\n", "@Override public void fillRangeGridBand(Graphics2D g2,XYPlot plot,ValueAxis axis,Rectangle2D dataArea,double start,double end){\n  double y1=axis.valueToJava2D(start,dataArea,plot.getRangeAxisEdge());\n  double y2=axis.valueToJava2D(end,dataArea,plot.getRangeAxisEdge());\n  Rectangle2D band;\n  if (plot.getOrientation() == PlotOrientation.VERTICAL) {\n    band=new Rectangle2D.Double(dataArea.getMinX(),Math.min(y1,y2),dataArea.getWidth(),Math.abs(y2 - y1));\n  }\n else {\n    band=new Rectangle2D.Double(Math.min(y1,y2),dataArea.getMinY(),Math.abs(y2 - y1),dataArea.getHeight());\n  }\n  Paint paint=plot.getRangeTickBandPaint();\n  if (paint != null) {\n    g2.setPaint(paint);\n    g2.fill(band);\n  }\n}\n", "private SnmpPduPacket checkAcl(SnmpPduPacket pdu){\n  SnmpPduPacket response=null;\n  String community=new String(pdu.community);\n  if (ipacl != null) {\n    if (pdu.type == SnmpDefinitions.pduSetRequestPdu) {\n      if (!ipacl.checkWritePermission(pdu.address,community)) {\n        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {\n          SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,\"checkAcl\",\"sender is \" + pdu.address + \" with \"+ community+ \". Sender has no write permission\");\n        }\n        int err=SnmpSubRequestHandler.mapErrorStatus(SnmpDefinitions.snmpRspAuthorizationError,pdu.version,pdu.type);\n        response=newErrorResponsePdu(pdu,err,0);\n      }\n else {\n        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {\n          SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,\"checkAcl\",\"sender is \" + pdu.address + \" with \"+ community+ \". Sender has write permission\");\n        }\n      }\n    }\n else {\n      if (!ipacl.checkReadPermission(pdu.address,community)) {\n        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {\n          SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,\"checkAcl\",\"sender is \" + pdu.address + \" with \"+ community+ \". Sender has no read permission\");\n        }\n        int err=SnmpSubRequestHandler.mapErrorStatus(SnmpDefinitions.snmpRspAuthorizationError,pdu.version,pdu.type);\n        response=newErrorResponsePdu(pdu,err,0);\n        SnmpAdaptorServer snmpServer=(SnmpAdaptorServer)adaptorServer;\n        snmpServer.updateErrorCounters(SnmpDefinitions.snmpRspNoSuchName);\n      }\n else {\n        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {\n          SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,\"checkAcl\",\"sender is \" + pdu.address + \" with \"+ community+ \". Sender has read permission\");\n        }\n      }\n    }\n  }\n  if (response != null) {\n    SnmpAdaptorServer snmpServer=(SnmpAdaptorServer)adaptorServer;\n    snmpServer.incSnmpInBadCommunityUses(1);\n    if (ipacl.checkCommunity(community) == false)     snmpServer.incSnmpInBadCommunityNames(1);\n  }\n  return response;\n}\n", "\tpublic String extSearch() {\n\t\treturn null;\n\t}\n", "    protected void setErrorMessage(HttpServletResponse response, Exception e, Long sessionId){\n\t\ttry {\n\t\t    SessionHandler.storeLastException(sessionId, e);\n\t\t\n\t\t    //clear all\n\t\t    response.reset();\n\t\t\n\t\t    //this will format the error message as an html error page\n\t\t    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"The internal server failed to execute the JSP query. Reason : \"+e.getMessage());\n\t\t} catch(Exception ex) {\n\t\t    _logger.fatal(\"Setting an error message (\"+e.getMessage()+\") failed : \",ex);\n\t\t} finally {\n\t\t\t_logger.error(\"Servlet error occured : \" + e.getMessage());\n\t\t}\n\t\t\n    }\n", "public void call_oneway(String method, Object... arguments) throws PickleException, PyroException, IOException {\n\t\tinternal_call(method, null, Message.FLAGS_ONEWAY, true, arguments);\n\t}", "public static String interpolate(String input,final Map<String,String> namedArgs,final Map<String,String> defaultArgs){\n  if (namedArgs == null || input == null) {\n    return input;\n  }\n  final Map<String,String> interpolationArgs=createFinalInterpolation", "@SuppressWarnings(\"StatementWithEmptyBody\")\n    public static String encode(final byte[] input) {\n        ByteArrayInputStream in = new ByteArrayInputStream(input);\n        StringBuilder sb = new StringBuilder();\n        try {\n            while (encodeChunk(sb, in)) {\n                // do nothing\n            }\n        } catch (IOException ex) {\n            throw new RuntimeException(ex);\n        }\n\n        return sb.toString();\n    }", "public static String getMD5String(String str) {\n        MessageDigest messageDigest = getMessageDigest(MD5);\n        return getHashString(str, messageDigest);\n    }", "    public String getStatus() {\n\tString status = null;\n\ttry {\n\t    if (doc != null) {\n\t\t\n\t\tXPath xpathSelector = getXPath(\"/prop:itemProperties/prop:itemStatus\");\n\t\tElement elem = (Element)xpathSelector.selectSingleNode(doc);\n\t\tif (elem != null) {\n\t\t    status = elem.getText();\n\t\t}\n\t\t\n\t    }\n\t} catch (Exception e) {}\n\n\treturn status;\n\t\n    }\n", "public void close() throws IOException {\n        if (fInputStream != null) {\n            fInputStream.close();\n            fInputStream = null;\n            fData = null;\n        }\n    }", "@Override\n    protected String naryOperator(final NAryOperator operator, final String opString) {\n        final List<Formula> operands = new ArrayList<>();\n        for (final Formula op : operator) {\n            operands.add(op);\n        }\n        final int size = operator.numberOfOperands();\n        Collections.sort(operands, this.comparator);\n        final StringBuilder sb = new StringBuilder();\n        int count = 0;\n        Formula last = null;\n        for (final Formula op : operands) {\n            if (++count == size) {\n                last = op;\n            } else {\n                sb.append(operator.type().precedence() < op.type().precedence() ? toString(op) : bracket(op));\n                sb.append(opString);\n            }\n        }\n        if (last != null) {\n            sb.append(operator.type().precedence() < last.type().precedence() ? toString(last) : bracket(last));\n        }\n        return sb.toString();\n    }", "public ByteMatrix encode(String contents) throws WriterException {\n  if (contents == null || contents.length() == 0) {\n    throw new IllegalArgumentException(\"Found empty contents\");\n  }\n  code=Encoder.encode(contents,ErrorCorrectionLevel.L);\n  return renderResult(code,QR_CODE_ELEMENT_MULTIPLE);\n}\n", "private String extractString(String key,CSVRecord record,String defaultValue) throws FormatException {\n  String toReturn=defaultValue;\n  if (record.isMapped(key)) {\n    toReturn=record.get(key);\n  }\n else {\n    if (defaultValue == null) {\n      throw new FormatException(\"Field not used but expected: \" + key);\n    }\n  }\n  return toReturn;\n}\n", "private Node newArrayDeclarationNode(NodeTraversal traversal) {\n    return IR.var(\n        IR.name(createArrayName(traversal)),\n        IR.arraylit());\n  }", "\t\t\t\t\tprotected void handleFailure(ACLMessage failure) {\n\t\t\t\t\t\tif (failure.getSender().equals(myAgent.getAMS())) {\n\t\t\t\t\t\t\t// FAILURE notification from the JADE runtime: the receiver\n\t\t\t\t\t\t\t// does not exist\n\t\t\t\t\t\t\tprint(\"Responder does not exist\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbudget += reserved;\n\t\t\t\t\t\t\tprint(\"Agent \"+failure.getSender().getName()+\" failed. Rolled back budget.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Immediate failure --> we will not receive a response from this agent\n\t\t\t\t\t\tnResponders --;\n\t\t\t\t\t}\n", " public void removeMessage (Message m) {\n  receivedList.removeElement(m);\n }\n", "private void obtainStyledAttributes(@Nullable final AttributeSet attributeSet,\n                                        @AttrRes final int defaultStyle,\n                                        @StyleRes final int defaultStyleResource) {\n        TypedArray typedArray = getContext()\n                .obtainStyledAttributes(attributeSet, R.styleable.EditTextPreference, defaultStyle,\n                        defaultStyleResource);\n\n        try {\n            obtainHint(typedArray);\n        } finally {\n            typedArray.recycle();\n        }\n    }", "\tpublic boolean deleteEdge(Node from, Node to) {\n\t\tEdge e = findEdge(from, to);\n\t\tif (e != null) {\n\t\t\treturn deleteEdge(e);\n\t\t}\n\t\treturn false;\n\t}\n", "    public void setWsPs9X18Min(String value) {\n        this.wsPs9X18Min = value;\n    }\n", "public static ProjectFilterSettings createDefault ( ) { ProjectFilterSettings result = new ProjectFilterSettings ( ) ; result . setMinPriority ( DEFAULT_PRIORITY ) ; return result ; }", "        public double cost() {\n            double cost = 0;\n            for (Integer item : this.assigned) {\n                cost += this.cost(item);\n            }\n            return cost;\n        }\n", "public static String encodePathSegment(String val) {\n        try {\n            return UriUtils.encodePathSegment(val, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n            // should be unreachable...\n            throw new RuntimeException(e);\n        }\n    }", "\tpublic void setStackTrace(Exception e) {\n\t\tStringBuffer stringBuffer = new StringBuffer();\n\t\tstringBuffer.append(e.getMessage());\n\t\tfor (StackTraceElement s: e.getStackTrace()) {\n\t\t\tstringBuffer.append(\"\\n\\tat \"+ s.getClassName()+\".\"+s.getMethodName()+\"(\"+s.getFileName()+\":\"+s.getLineNumber()+\")\");\n\t\t}\n\t\tthis.stackTrace = stringBuffer.toString();\n\t}\t\n", "  private XmlElement getDCPType(String onlineRes, boolean bPost){\n    XmlElement root = new XmlElement(EL_CAP_DCP);\n    XmlElement elHttp = new XmlElement(EL_CAP_HTTP);\n\n    if(bPost){\n      XmlElement el2 = new XmlElement(EL_CAP_POST);\n      el2.addAttribute(AT_CAP_ONLINE,onlineRes);\n      elHttp.addChild(el2);\n    }else{\n      XmlElement el2 = new XmlElement(EL_CAP_GET);\n      el2.addAttribute(AT_CAP_ONLINE,onlineRes);\n      elHttp.addChild(el2);\n    }\n\n    root.addChild(elHttp);\n    return root;\n  }\n", "\tprivate int channelIndexToNumber(int chanIndex) {\n\t\tif (channelSelectionPanel.channelLUT == null ||\n\t\t\t\tchanIndex >= channelSelectionPanel.channelLUT.length) {\n\t\t\treturn chanIndex;\n\t\t}\n\t\treturn channelSelectionPanel.channelLUT[chanIndex];\n\t}\n", "public SlidingActivityHelper ( Activity activity ) { mActivity = activity ; }", "@Override\n    public void setInt(int parameterIndex, int x) throws SQLException\n    {\n        checkParameterBounds(parameterIndex);\n        this.parameters[parameterIndex-1] = x;\n    }", "public static boolean isSystemProp ( String propertyValue ) { int fIndex = propertyValue . indexOf ( STR_ ) ; int lIndex = propertyValue . lastIndexOf ( STR_ ) ; return ( fIndex != - NUM_ && lIndex != - NUM_ ) ; }", "\tpublic void setAtributo2(String atributo2) {\n\t\tthis.atributo2 = atributo2;\n\t}\n", "public String toString ( ) { Annotation [ ] [ ] aa = getAnnotations ( ) ; StringBuilder sbuf = new StringBuilder ( ) ; int k = NUM_ ; while ( k < aa . length ) { Annotation [ ] a = aa [ k ++ ] ; int i = NUM_ ; while ( i < a . length ) { sbuf . append ( a ", "static int applyMaskPenaltyRule1 ( ByteMatrix matrix ) { return applyMaskPenaltyRule1Internal ( matrix , BOOL_ ) + applyMaskPenaltyRule1Internal ( matrix , BOOL_ ) ; }", "public IteratorBuilder eventSessionConfig ( EventSessionConfig eventSessionConfig ) { this . iteratorConfig . setEventSessionConfig ( eventSessionConfig ) ; return this ; }", "    static public Shape getAngularArrowTip() {\n        Polygon arrowTip = new Polygon();\n        arrowTip.addPoint(-4, -8);\n        arrowTip.addPoint(0, -4);\n        arrowTip.addPoint(4, -8);\n        arrowTip.addPoint(0, 0);\n\n        return arrowTip;\n    }\n", "    private String proxyToString(Object proxy) {\n\tClass[] interfaces = proxy.getClass().getInterfaces();\n\tClass iface = null;\n\tfor (int i = interfaces.length; --i >= 0; iface = interfaces[i]) {\n\t    if (interfaces[i] == RemoteMethodControl.class) {\n\t\tbrea", "public static void deleteAsocRegsSec(UseCaseConf useCaseConf,Integer bookIdSec,Integer folderIdSec) throws Exception {\n  List lista=FolderAsocSession.getAsocRegFdr(useCaseConf.getSessionID(),bookIdSec,folderIdSec.intValue(),useCaseConf.getEntidadId());\n  if (lista != null && !lista.isEmpty()) {\n    for (Iterator iterator=lista.iterator(); iterator.hasNext(); ) {\n      ScrRegasoc scrRegasoc=(ScrRegasoc)iterator.next();\n      if (scrRegasoc.getIdArchsec() == bookIdSec.intValue() && scrRegasoc.getIdFdrsec() == folderIdSec.intValue()) {\n        FolderAsocSession.deleteAsocRegFdr(useCaseConf.getSessionID(),useCaseConf.getEntidadId(),scrRegasoc);\n        break;\n      }\n    }\n  }\n}\n", "public void redo() {\n\t\trequireTrue(canRedo(), \"@require (canRedo())\");\n\t\t_buffer.redo();\n\t\t_composedCommand = null;\n\t}", "        public LocalDate addWrapFieldToCopy(int value) {\n            return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));\n        }\n", "private void readObjectNoData ( ) throws ObjectStreamException { throw new InvalidObjectException ( STR_ ) ; }", "public static void cacheImg(String skinImgDir,String baseImageURL){\n  String skinDir=getSkinDir();\n  baseImageURL=baseImageURL.replace(\"[SKINIMG]\",skinDir + \"images/\");\n  baseImageURL=baseImageURL.replace(\"[SKIN]\",skinDir + skinImgDir);\n  Image.prefetch(baseImageURL);\n}\n", "private void addFragmentToView(final int viewId, final Fragment fragment) {\n    fragmentManager.beginTransaction().replace(viewId, fragment).commit();\n  }", "@Nonnull\n  public FineUploaderBasic addParams (@Nullable final Map <String, String> aParams)\n  {\n    m_aRequestParams.addAll (aParams);\n    return this;\n  }", "protected void rejectDrop(){\n  DropTargetContextPeer peer=getDropTargetContextPeer();\n  if (peer != null) {\n    peer.rejectDrop();\n  }\n}", "private PolynomialApproximation approximateKnnDistances(double[] knnDistances) {\n    StringBuilder msg = new StringBuilder();\n\n    // count the zero distances (necessary of log-log space is used)\n    int k_0 = 0;\n    if(settings.log) {\n      for(int i = 0; i < settings.kmax; i++) {\n        double dist = knnDistances[i];\n        if(dist == 0) {\n          k_0++;\n        }\n        else {\n          break;\n        }\n      }\n    }\n\n    double[] x = new double[settings.kmax - k_0];\n    double[] y = new double[settings.kmax - k_0];\n\n    for(int k = 0; k < settings.kmax - k_0; k++) {\n      if(settings.log) {\n        x[k] = FastMath.log(k + k_0);\n        y[k] = FastMath.log(knnDistances[k + k_0]);\n      }\n      else {\n        x[k] = k + k_0;\n        y[k] = knnDistances[k + k_0];\n      }\n    }\n\n    PolynomialRegression regression = new PolynomialRegression(y, x, settings.p);\n    PolynomialApproximation approximation = new PolynomialApproximation(regression.getEstimatedCoefficients());\n\n    if(LOG.isDebugging()) {\n      msg.append(\"approximation \").append(approximation);\n      LOG.debugFine(msg.toString());\n    }\n    return approximation;\n\n  }", "public abstract TLCState sPeek ( ) ;", "  private void menuItemSelect_actionPerformed(ActionEvent e) {\n    Misc.debug(this, \"Find object\");\n    find_new_record();\n// TODO - select a new object from a list.\n  }\n", "public com.sun.javadoc.Type overriddenType() {\n\n        if ((sym.flags() & Flags.STATIC) != 0) {\n            return null;\n        }\n\n        ClassSymbol origin = (ClassSymbol)sym.owner;\n        for (Type t = env.types.supertype(origin.type);\n             t.hasTag(CLASS);\n             t = env.types.supertype(t)) {\n            ClassSymbol c = (ClassSymbol)t.tsym;\n            for (Scope.Entry e = membersOf(c).lookup(sym.name); e.scope != null; e = e.next()) {\n                if (sym.overrides(e.sym, origin, env.types, true)) {\n                    return TypeMaker.getType(env, t);\n                }\n            }\n        }\n        return null;\n    }", "public void rotateRight ( int places , int startIndex , int endIndex ) { for ( int x = NUM_ ; x < places ; x ++ ) { rotateRight ( startIndex , endIndex ) ; } }", "public boolean isInstanceOf(ObjectName name,String className) throws InstanceNotFoundException {\n  return mbsInterceptor.isInstanceOf(cloneObjectName(name),className);\n}\n", "public Observable<ServiceResponse<MatchResponse>> matchMethodWithServiceResponseAsync(String listId, Boolean cacheImage) {\n        if (this.client.baseUrl() == null) {\n            throw new IllegalArgumentException(\"Parameter this.client.baseUrl() is required and cannot be null.\");\n        }\n        String parameterizedHost = Joiner.on(\", \").join(\"{baseUrl}\", this.client.baseUrl());\n        return service.matchMethod(listId, cacheImage, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())\n            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MatchResponse>>>() {\n                @Override\n                public Observable<ServiceResponse<MatchResponse>> call(Response<ResponseBody> response) {\n                    try {\n                        ServiceResponse<MatchResponse> clientResponse = matchMethodDelegate(response);\n                        return Observable.just(clientResponse);\n                    } catch (Throwable t) {\n                        return Observable.error(t);\n                    }\n                }\n            });\n    }", "public void parse(InputStream is) throws Exception {\n  LOG.trace(\"parse()\");\n  String baseContentType=HttpFields.valueParameters(contentType,null);\n  if (faultAllowed && baseContentType.equalsIgnoreCase(TEXT_XML)) {\n    parseFault(is);\n  }\n else   if (baseContentType.equalsIgnoreCase(MULTIPART_MIXED)) {\n    parseMultipart(is);\n  }\n else {\n    throw new CodedException(X_INVALID_CONTENT_TYPE,\"Invalid content type: %s\",baseContentType);\n  }\n}\n", "\tpublic void setAccessNumber (java.lang.Integer _accessNumber) {\n\t\tthis._accessNumber = _accessNumber;\n\t}\n", "    private boolean configureFeeds() {\n        boolean success = false;\n        List feedElts = this.getListFromDoc(CONFIG_ROOT + \"feeds/feed\");\n        if (feedElts == null || feedElts.size() == 0) {\n            LOG.error(\"No configured feeds\");\n        } else {\n            this.shortcuts = new HashMap();\n            this.feedTasks = new HashMap();\n            Iterator i = feedElts.iterator();\n            while (i.hasNext()) {\n                Element elt = (Element) i.next();\n                configureFeed(elt);\n            } // while\n            success = this.feedTasks.size() > 0;\n        } // else\n\n        return success;\n    }\n", "    public int getChildCount(Object parent) {\n        if (parent instanceof Node) {\n            return ((Node)parent).children.size();\n        }\n        return 0;\n    }\n", "public void receive ( Message message ) { if ( message instanceof P25Message ) { updateNAC ( ( ( P25Message ) message ) . getNAC ( ) ) ; if ( message instanceof LDUMessage ) { processLDU ( ( LDUMessage ) message ) ; } else if ( message instanceof TSBKMessage ) { processTSBK ( ( TSBKMessage ) message ) ; } else if ( message instanceof TDULinkControlMessage ) { processTDULC ( ( TDULinkControlMessage ) message ) ; } else if ( message instanceof PDUMessage ) { processPDU ( ( PDUMessage ) message ) ; } else if ( message instanceof HDUMessage ) { processHDU ( ( HDUMessage ) message ) ; } else if ( message instanceof TDUMessage ) { processTDU ( ( TDUMessage ) message ) ; } } }", "public DescribeUserProfilesRequest withIamUserArns(String... iamUserArns) {\n        if (this.iamUserArns == null) {\n            setIamUserArns(new com.amazonaws.internal.SdkInternalList<String>(iamUserArns.length));\n        }\n        for (String ele : iamUserArns) {\n            this.iamUserArns.add(ele);\n        }\n        return this;\n    }", "    public String getValueXPath(String path) {\n        data.normalize();\n        Node n = null;\n        try {\n            n = xpath_api.selectSingleNode(data,path);\n        } catch(Exception ex) {\n            log.error(\"XPath failure for path '\" + path\n                    + \"'.  Continuing as if path not found.\");\n            // TODO:  throw\n        }\n        return (n == null) ? null : n.getNodeValue();\n    }\n", "    public void addAlreadyInstalledProduct(ProductVersion productVersion) {\n        products.put(productVersion.getProductInstaller().getName(), productVersion);\n    }\n", "@Override\n  public ScoreWeight processWidgetScore(Widget widget, ScoreComponentSettings paramSettings) {\n\n    if (!Utils.isScoreEnabled(paramSettings)) {\n      return null;\n    }\n\n    //1. Init scores\n    ScoreWeight scoreWidget = initWidgetScore(paramSet", "public static InputStream fromURL(String url) throws IOException {\n\t\tif(Strings.isValid(url)) {\n\t\t\treturn fromURL(URLFactory.makeURL(url));\n\t\t}\n\t\treturn null;\n\t}", "private static int decodeDigit ( int [ ] counters ) throws NotFoundException { int bestVariance = MAX_AVG_VARIANCE ; int bestMatch = - NUM_ ; int max = PATTERNS . length ; for ( int i = NUM_ ; i < max ; i ++ ) { int [ ] pattern = PATTERNS [ i ] ; int vari", "\tpublic String manageBrowserRequest(String reqHeader) {\n\t\thtmlBuilder = new HtmlBuilder();\n\t\treturn htmlBuilder.getPage(reqHeader);\n\t}\n", "@Override public double cos(int step){\n  step=Math.abs(step) % steps;\n  if (step < costable.length) {\n    return costable[step];\n  }\n  return costable[steps - step];\n}\n", "    public void close() throws IOException {\n\tif (cnt == 1) {\n\t    word <<= 16;\n\t    output((word >>> 18) & 0x3f);\n\t    output((word >>> 12) & 0x3f);\n\t    output(PAD);\n\t    output(PAD);\n\t} else if (cnt == 2) {\n\t    word <<= 8;\n\t    output((word >>> 18) & ", "void end ( ) ;", "    public void setShowAllClusters(boolean showAllClusters) {\n        this.showAllClusters = showAllClusters;\n        getPrefs().putBoolean(\"PawTracker.showAllClusters\",showAllClusters);\n    }\n", "\tpublic Timestamp readReviewDeadline(String sessionId) {\n\t\t// if (this.isMaintainer(sessionId))\n\t\treturn this.readDeadLine(DeadLine.Review_dl);\n\t\t// else\n\t\t// return null;\n\t}\n", "private void startFromQueue(){\n  do {\n    int active0=active.get();\n    if (active0 == maxTasks)     break;\n    if (active.compareAndSet(active0,active0 + 1)) {\n      Callable<?> task=queue.poll();\n      if (task == null) {\n        int res=active.decrementAndGet();\n        assert res >= 0 : res;\n        break;\n      }\n      startThread(task);\n    }\n  }\n while (!queue.isEmpty());\n}\n", "  static public Gradient showDialog(JFrame parent, Gradient g) {\n\n    JDialog gDialog;\n    gDialog = new JDialog(parent, true);\n    return showDefDialog(gDialog, g);\n\n  }\n", "\tpublic ATObject base_share_with_taggedAs_mirroredBy_(ATObject parent, ATClosure code, ATTable types, ATObject mirror) throws InterpreterException {\n\t\treturn base_object_childOf_extends_taggedAs_mirroredBy_(\n\t\t\t\tcode,\n\t\t\t\tparent,\n\t\t\t\tNATBoolean._FALSE_ /* SHARES-A link */,\n\t\t\t\ttypes,\n\t\t\t\tmirror);\n\t}\n", "public Iterable<FunctionImport> build(FactoryLookup lookup){\n  List<FunctionImport> builder=new ArrayList<>();\n  for (  FunctionImportImpl.Builder functionImportBuilder : functionImportBuilders) {\n    EntitySet entitySet=lookup.getEntitySet(functionImportBuilder.getEntitySetName());\n    Function function=lookup.getFunction(functionImportBuilder.getFunctionName());\n    if (entitySet == null && function.isBound()) {\n      throw new IllegalArgumentException(\"Could not find EntitySet with name: \" + functionImportBuilder.getEntitySetName());\n    }\n    functionImportBuilder.setEntitySet(entitySet);\n    functionImportBuilder.setFunction(function);\n    builder.add(functionImportBuilder.build());\n  }\n  return Collections.unmodifiableList(builder);\n}\n", "private AnnotationInvocationHandler asOneOfUs(Object o){\n  if (Proxy.isProxyClass(o.getClass())) {\n    InvocationHandler handler=Proxy.getInvocationHandler(o);\n    if (handler instanceof AnnotationInvocationHandler)     return (AnnotationInvocationHandler)handler;\n  }\n  return null;\n}\n", "private CamelStreamer<Integer,String> createCamelStreamer(IgniteDataStreamer<Integer,String> dataStreamer){\n  CamelStreamer<Integer,String> streamer=new CamelStreamer<>();\n  streamer.setIgnite(grid());\n  streamer.setStreamer(dataStreamer);\n  streamer.setEndpointUri(\"jetty:\" + url);\n  dataStreamer.allowOverwrite(true);\n  dataStreamer.autoFlushFrequency(1);\n  return streamer;\n}\n", "@Override public int open(){\n  DialogSettingsHelper.recordDialogOpened(dialogSettingsKey);\n  lastOpenedTime=System.currentTimeMillis();\n  ClientTelemetryHelper.sendDialogOpened(this);\n  return super.open();\n}\n", "    public Stroke getSectionOutlineStroke(int section) {\n        \n        // return the override, if there is one...\n        if (this.sectionOutlineStroke != null) {\n            return this.sectionOutlineStroke;\n        }\n\n        // otherwise look up the paint list\n        Stroke result = this.sectionOutlineStrokeList.getStroke(section);\n        if (result == null) {\n            result = this.baseSectionOutlineStroke;\n        }\n        return result;\n       \n    }\n", "public List < MappedMember > findMethodsByDesc ( String text ) { List < MappedMember > list = new ArrayList < MappedMember > ( ) ; for ( MappedMember mm : getMethods ( ) ) { if ( mm . getDesc ( ) . equals ( text ) ) { list . add ( mm ) ; } } return list ; }", "public static void uncontribute(ComponentAddon component){\n  contributedComponents.remove(component);\n  if (currentAddon != null) {\n    component.uninitialize(currentAddon);\n  }\n}\n", "public static synchronized TokenInfo createToken(TokenType tokenType){\n  Token token=new Token(tokenType.getModuleType(),tokenType.getId());\n  token.setModuleId(tokenType.getModuleType());\n  token.setReadOnly(tokenType.isReadOnly());\n  token.setSerialNumb", "public static Sql newInstance ( String url , String driverClassName ) throws SQLException , ClassNotFoundException { loadDriver ( driverClassName ) ; return newInstance ( url ) ; }", "public static < E extends Comparable < E > > void quickSort ( InplaceList < E > array ) { if ( array . isEmpty ( ) ) { return ; } recursiveQuickSort ( array , NUM_ , array . size ( ) - NUM_ ) ; }", "protected void updateUIForMode ( ) { final LayoutParams lp = getLoadingLayoutLayoutParams ( ) ; if ( this == mHeaderLayout . getParent ( ) ) { removeView ( mHeaderLayout ) ; } if ( mMode . showHeaderLoadingLayout ( ) ) { addViewInternal ( mHeaderLayout , ", "\tpublic Object visit(ASTStart node, Object data) {\n\t\tdata = node.childrenAccept(this, data);\n\t\treturn data;\n\t}\n", "public NoSonarFilter noSonarInFile(InputFile inputFile, Set<Integer> noSonarLines) {\n    ((DefaultInputFile) inputFile).noSonarAt(noSonarLines);\n    return this;\n  }", "\tprivate JEditorPane createTextComponent() {\n\t\tURL resourceAsStream = this.getClass().getClassLoader().getResource(\n\t\t\t\t\"aboutandlicense.txt\");\n\t\ttry {\n\t\t\treturn new JEditorPane(resourceAsStream);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn new JEditorPane(\"crtext\", \"Loading of license failed.\");\n\t\t}\n\t}\n", "public StandardXYItemLabelGenerator(String formatString){\n  this(formatString,NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance());\n}\n", "public void beginDisplay(DisplayEvent event) throws ModelControlException {\n  super.beginDisplay(event);\n  setPropertySheetValues();\n  setAgentTitle();\n  String updated=(String)removePageSessionAttribute(UPDATED_PROFILE);\n  if ((updated != null) && updated.equals(\"true\")) {\n    setInlineAlertMessage(CCAlert.TYPE_INFO,\"message.information\",\"message.updated\");\n  }\n  String modified=(String)removePageSessionAttribute(MODIFIED_PROFILE);\n  if ((modified != null) && modified.equals(\"true\")) {\n    setInlineAlertMessage(CCAlert.TYPE_WARNING,\"message.warning\",\"message.profile.modified\");\n  }\n}\n", "    public void tearDown() {\n        format = null;\n    }\n", "public Node < T > addChildNodes ( Collection < ? extends Node < T > > nodes ) { for ( Node < T > aux : nodes ) { aux . increaseDepth ( ) ; aux . parent = this ; aux . index = children . size ( ) ; children . add ( aux ) ; } return this ; }", "public static void write(OutStream out,List records) throws IOException {\n  for (Iterator enumerator=records.iterator(); enumerator.hasNext(); ) {\n    ButtonRecord2 rec=(ButtonRecord2)enumerator.next();\n    rec.write(out);\n  }\n  out.writeUI8(0);\n}\n", "    public void experiments(){\n\tVector versions = new Vector();\n\t   try{\n\t\tString xmlString = \"\";\n\t\tXStream xstream = new XStream(new DomDriver());\n\t \t\tBufferedReader in = new BufferedReader(new FileReader(getExperimentPath()+getFileSeparator()+\"versions.xml\"));\n           \t\tString lineFromFile;\n            \t\twhile ((lineFromFile = in.readLine()) != null) {\n                \txmlString += lineFromFile;\n            \t\t}\n            \t\tin.close();\n\t\tversions = (Vector) xstream.fromXML(xmlString);\n\t   }catch (Exception ioe){\n\t\tprintln(\"Unable to load versions.xml\");\n\t   }\n\t   String file;\n\t   int i;\n\tfor ( i=0; i<versions.size(); i++){\n\t    file = (String) versions.elementAt(i);\n\t    println(file);\n\t}\n\tif( i == 0){\n\t    println(\"No experiments found\");\n\t}\n    }\n", "private void finishItemList(StringBuilder result){\n  result.append(\"</div></div>\");\n}\n", "public static <D extends BioPAXElement, R> PropertyAccessor<D,R> create(PropertyAccessor<D,R> pa,\n\t                                                                                     Class filter)\n\t{\n\t\t return new FilteredPropertyAccessor<D, R>(pa, filter);\n\t}", "double applyAsDouble ( T value ) ;", "protected static boolean readYes ( ) throws IOException { return ( System . in . read ( ) == STR_ ) ; }", "public double computeAverageLocal ( int states [ ] [ ] , int sourceCol , int destCol ) { initialise ( ) ; addObservations ( states , sourceCol , destCol ) ; return computeAverageLocalOfObservations ( ) ; }", "public static void loadPropsFromFile(Path filePath,FileSystem fs) throws IOException {\n  if (fs.exists(filePath)) {\n    try (InputStream stream=fs.open(filePath)){\n      logger.info(\"Loading properties file from hdfs'\" + filePath.toString() + \"'\");\n      loadProperties(stream);\n    }\n catch (    IOException e) {\n      logger.error(\"Problem loading properties file from hdfs '\" + filePath.toString() + \"'\");\n      e.printStackTrace();\n    }\n  }\n else {\n    logger.warn(\"Properties file does not exist: '\" + filePath.toString() + \"'\");\n  }\n}\n", "\tprotected void addHideLMSUIPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_NavigationInterfaceType_hideLMSUI_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_NavigationInterfaceType_hideLMSUI_feature\", \"_UI_NavigationInterfaceType_type\"),\n\t\t\t\t AdlnavV1p3Package.Literals.NAVIGATION_INTERFACE_TYPE__HIDE_LMSUI,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public java.rmi.Remote getPort(Class serviceEndpointInterface) throws javax.xml.rpc.ServiceException {\n        try {\n            if (com.google.api.ads.admanager.axis.v201805.ContentMetadataKeyHierarchyServiceInterface.class.isAssignableFrom(serviceEndpoi", "public void marshall(StartLoggingRequest startLoggingRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (startLoggingRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(startLoggingRequest.getName(), NAME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "@Override\n  public final String getFor(final Class<?> pClass, final String pThingName) {\n    if (pClass == CuOrSe.class) {\n      if (\"entitySave\".equals(pThingName)) {\n        return PrCuOrSeSv.class.getSimpleName();\n      } else if (\"entityEdit\".equals(pThingName)\n        || \"entityPrint\".equals(pThingName)) {\n        return PrcEntityRetrieve.class.getSimpleName();\n      }\n      return null;\n    } else if (\"entityEdit\".equals(pThingName)\n      || \"entityConfirmDelete\".equals(pThingName)) {\n      return getForRetrieveForEditDelete(pClass, pThingName);\n    } else if (\"entityCopy\".equals(pThingName)) {\n      return getForCopy(pClass);\n    } else if (\"entityPrint\".equals(pThingName)) {\n      return getForPrint(pClass);\n    } else if (\"entityFSave\".equals(pThingName)) {\n      return getForFSave(pClass);\n    } else if (\"entityEFSave\".equals(pThingName)) {\n      return getForEFSave(pClass);\n    } else if (\"entitySave\".equals(pThingName)) {\n      return getForSave(pClass);\n    } else if (\"entityFfolDelete\".equals(pThingName)) {\n      return getForFfolDelete(pClass);\n    } else if (\"entityFfolSave\".equals(pThingName)) {\n      return getForFfolSave(pClass);\n    } else if (\"entityFolDelete\".equals(pThingName)) {\n      return getForFolDelete(pClass);\n    } else if (\"entityFolSave\".equals(pThingName)) {\n      return getForFolSave(pClass);\n    } else if (\"entityFDelete\".equals(pThingName)) {\n      return getForFDelete(pClass);\n    } else if (\"entityEFDelete\".equals(pThingName)) {\n      return getForEFDelete(pClass);\n    } else if (\"entityDelete\".equals(pThingName)) {\n      return getForDelete(pClass);\n    } else if (\"entityCreate\".equals(pThingName)) {\n      return getForCreate(pClass);\n    }\n    return null;\n  }", "public Iterator<Drawable> iterator(){\n  return components.iterator();\n}\n", "\tprotected void addXpPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Port_xp_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_Port_xp_feature\", \"_UI_Port_type\"),\n\t\t\t\t GCLACSPackage.Literals.PORT__XP,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "private void pushScope(AbstractScope<?, ?> s, boolean quietly) {\n    checkNotNull(curNode);\n    scopes.push(s);\n    recordScopeRoot(s.getRootNode());\n    if (!quietly && scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }", "void init ( ITransportConfig config , Side side ) throws RemoteException , ConfigurationException ;", "  public void sendResponse( Request r, String response ) {\n    //session.sendResponse( r.getClassName() + \" \" + response );\n    Request resp = new Request( r, response );\n    //Logger.logDebug( \"Response to \"+r+\" is \"+resp );\n    session.sendResponse( resp );\n  }\n", "public void showErrors(final Set<String> messages) {\n    final InputElement inputElement = this.getInputElement();\n    if (messages.isEmpty()) {\n      if (FeatureCheck.supportCustomValidity(inputElement)) {\n        inputElement.setCustomValidity(StringUtils.EMPTY);\n      }\n      if (this.validationMessageElement == null) {\n        inputElement.setTitle(StringUtils.EMPTY);\n      } else {\n        this.validationMessageElement.getElement().removeAllChildren();\n      }\n    } else {\n      final String messagesAsString = ErrorMessageFormater.messagesToString(messages);\n      if (FeatureCheck.supportCustomValidity(inputElement)) {\n        inputElement.setCustomValidity(messagesAsString);\n      }\n      if (this.validationMessageElement == null) {\n        inputElement.setTitle(messagesAsString);\n      } else {\n        this.validationMessageElement.getElement()\n            .setInnerSafeHtml(ErrorMessageFormater.messagesToList(messages));\n      }\n    }\n  }", "    private BranchGroup prepareCigarBandLabelBranchGroup(BranchGroup bg) {\n        bg.setCapability(BranchGroup.ALLOW_DETACH);\n        bg.setCapability(BranchGroup.ALLOW_CHILDREN_READ);\n        bg.setCapability(BranchGroup.ALLOW_CHILDREN_WRITE);\n        return bg;\n    }\n", "\tpublic void enableFileCache(final int maxPage, final int pageSize) {\n\t\tfileCacheEnabled = true;\n\t\tthis.maxPage = maxPage;\n\t\tthis.pageSize = pageSize;\n\t}\n", "public static int parseDurationString(String timeStr) {\n        int seconds = 0;\n        Matcher matcher = timeStringPattern.matcher(timeStr);\n        while (matcher.find()) {\n            String s = matcher.group();\n            String[] parts = s.split(\"(?<=[yMwdhms])(?=\\\\d)|(?<=\\\\d)(?=[yMwdhms])\");\n            int numb = Integer.parseInt(parts[0]);\n            String type = parts[1];\n            switch (type) {\n                case \"s\":\n                    seconds = seconds + (numb);\n                    break;\n                case \"m\":\n                    seconds = seconds + (numb * 60);\n                    break;\n                case \"h\":\n                    seconds = seconds + (numb * 60 * 60);\n                    break;\n                case \"d\":\n                    seconds = seconds + (numb * 60 * 60 * 24);\n                    break;\n                case \"w\":\n                    seconds = seconds + (numb * 60 * 60 * 24 * 7);\n                    break;\n                case \"M\":\n                    seconds = seconds + (numb * 60 * 60 * 24 * 30);\n                    break;\n                case \"y\":\n                    seconds = seconds + (numb * 60 * 60 * 24 * 365);\n                    break;\n                default:\n            }\n        }\n        return seconds;\n    }", "\tprotected void startService() {\n\t\tif (watcher != null) {\n\t\t\twatcher.startService();\n\t\t} // if\n\t} // startService()\n", "public static boolean canDisplay(Font f,String s){\n  int upTo=f.canDisplayUpTo(s);\n  if (upTo >= s.length() || upTo == -1)   return true;\n else   return false;\n}\n", "\tpublic boolean openDialog(View parentView, View view, Object viewData) {\n\t\t// Init the view\n\t\tview.init();\n\t\t// Creates a view container\n\t\tViewContainer viewContainer = getViewContainerFactory().createDialogViewContainer(view);\n\t\t// Init the container\n\t\tviewContainer.init(view, viewData);\n\t\t// Displays the view\n\t\tview.onBeforeDisplay();\n\t\t// Displays the container\n\t\treturn viewContainer.display(parentView);\n\t}\n", "public static PdfAction gotoLocalPage(int page, PdfDestination dest, PdfWriter writer) {\n        PdfIndirectReference ref = writer.getPageReference(page);\n        dest.addPage(ref);\n        PdfAction action = new PdfAction();\n        action.put(PdfName.S, PdfName.GOTO);\n        action.put(PdfName.D, dest);\n        return action;\n    }", "private String fName ( String name ) { return dir . getPath ( ) + File . separator + name ; }", "public BreakpointHitSynchronizer ( final IDebugger debugger , final ListenerProvider < IDebugEventListener > listeners ) { super ( debugger , listeners ) ; }", "public Env<AttrContext> classEnv(JCClassDecl tree, Env<AttrContext> env) {\n        Env<AttrContext> localEnv =\n            env.dup(tree, env.info.dup(WriteableScope.create(tree.sym)));\n        localEnv.enclClass = tree;\n        localEnv.outer = env;\n        localEnv.info.isSelfCall = false;\n        localEnv.info.lint = null; // leave this to be filled in by Attr,\n                                   // when annotations have been processed\n        localEnv.info.isAnonymousDiamond = TreeInfo.isDiamond(env.tree);\n        return localEnv;\n    }", "@Contract(pure=true) public final boolean isCancelled(){\n  return mIsCancelled.get();\n}\n", "private long computeNumberOfPartitions(int numTasks,long totalPointsInRange,int minDatapointsPerTask){\n  final long maxTasksByDatapointRestriction=totalPointsInRange / minDatapointsPerTask;\n  final long desiredNumTasks=Math.max(numTasks,1);\n  long nrSubRanges=Math.min(maxTasksByDatapointRestriction,desiredNumTasks);\n  return Math.max(1,nrSubRanges);\n}\n", "public static void removeTagFromAllNodes ( final JFrame parent , final ZyGraph graph , final CTag tag ) { final Collection < NaviNode > nodes = GraphHelpers . getNodes ( graph ) ; try { for ( final NaviNode n : nodes ) { n . getRawNode ( ) . removeTag ( t", "@Override public void write(String value) throws IOException {\n  write(value.getBytes(defaultCharset));\n}\n", "@Override\n    public DeleteVPCEConfigurationResult deleteVPCEConfiguration(DeleteVPCEConfigurationRequest request) {\n        request = beforeClientExecution(request);\n        return executeDeleteVPCEConfiguration(request);\n    }", "private Object[] ensureCapacity(int minCapacity){\n  if (tmp.length < minCapacity) {\n    int newSize=minCapacity;\n    newSize|=newSize >> 1;\n    newSize|=newSize >> 2;\n    newSize|=newSize >> 4;\n    newSize|=newSize >> 8;\n    newSize|=newSize >> 16;\n    newSize++;\n    if (newSize < 0)     newSize=minCapacity;\n else     newSize=Math.min(newSize,a.length >>> 1);\n    Object[] newArray=new Object[newSize];\n    tmp=newArray;\n  }\n  return tmp;\n}\n", "public ArrayList<String> serviceName_pca_pcaServiceName_sessions_sessionId_files_GET(String serviceName, String pcaServiceName, String sessionId, String name) throws IOException {\n\t\tString qPath = \"/cloud/{serviceName}/pca/{pcaServiceName}/sessions/{sessionId}/files\";\n\t\tStringBuilder sb = path(qPath, serviceName, pcaServiceName, sessionId);\n\t\tquery(sb, \"name\", name);\n\t\tString resp = exec(qPath, \"GET\", sb.toString(), null);\n\t\treturn convertTo(resp, t1);\n\t}", "static String getClassSimpleName(String className) {\n    int lastPeriod = className.lastIndexOf(\".\");\n    if (lastPeriod != -1) {\n      return className.substring(lastPeriod + 1);\n    }\n    return className;\n  }", "public LALRKParserGenerator getParserGenerator(ParseMethod parseMethod)\r\n    {\r\n        Grammar g = new Grammar(parseMethod.start(), this, parseMethod.eof(), parseMethod.whiteSpace());\r\n        try\r\n        {\r\n            return g.createParserGenerator(parseMethod.start(), ParserFeature.get(parseMethod));\r\n        }\r\n        catch (Throwable t)\r\n        {\r\n            throw new GrammarException(\"problem with \"+parseMethod, t);\r\n        }\r\n    }", "public RequestTemplate headers(Map<String, Collection<String>> headers) {\n    if (headers != null && !headers.isEmpty()) {\n      headers.forEach(this::header);\n    } else {\n      this.headers.clear();\n    }\n    return this;\n  }", "    public void setConfiguration(Configuration conf) {\n        _conf = (OpenJPAConfiguration) conf;\n        _log = _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n    }\n", "protected void addResult(CmsXmlSitemapUrlBean result, int resultPriority) {\r\n\r\n        String url = CmsFileUtil.removeTrailingSeparator(result.getUrl());\r\n        boolean writeEntry = true;\r\n        if (m_resultMap.containsKey(url)) {\r\n            LOG.warn(\"Encountered duplicate URL with while generating sitemap: \" + result.getUrl());\r\n            ResultEntry entry = m_resultMap.get(url);\r\n            writeEntry = entry.getPriority() <= resultPriority;\r\n        }\r\n        if (writeEntry) {\r\n            m_resultMap.put(url, new ResultEntry(result, resultPriority));\r\n        }\r\n    }", "void onItemFocused ( View view , boolean hasFocus ) ;", "public Workflow.Method updateConsistencyGroupReadOnlyStateMethod(List<URI> vplexVolumeURIs,Boolean isReadOnly){\n  return new Workflow.Method(\"updateConsistencyGroupReadOnlyState\",vplexVolumeURIs,isReadOnly);\n}\n", "public static FacetsConfig getFacetsConfig()\n    {\n        final FacetsConfig ret = new FacetsConfig();\n        ret.setHierarchical(Indexer.Dimension.DIMCREATED.name(), true);\n        return ret;\n    }", "private boolean heyThatsTooClose(Point2D p,Point2D q,double min){\n  return Math.abs(p.getX() - q.getX()) < min && Math.abs(p.getY() - q.getY()) < min;\n}\n", "@Override\n    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {\n        if (localName.compareToIgnoreCase(GPXTags.GPX) == 0) {\n            version = attributes.getValue(GPXTags.VERSION);\n    ", "public static void sendDataToPebbleWithTransactionId(final Context context,\n                                                         final UUID watchappUuid, final PebbleDictionary data, final int transactionId)\n            throws IllegalArgumentException {\n\n        if (watchappUuid == null) {\n            throw new IllegalArgumentException(\"uuid cannot be null\");\n        }\n\n        if (data == null) {\n            throw new IllegalArgumentException(\"data cannot be null\");\n        }\n\n        if (data.size() == 0) {\n            return;\n        }\n\n        final Intent sendDataIntent = new Intent(INTENT_APP_SEND);\n        sendDataIntent.putExtra(APP_UUID, watchappUuid);\n        sendDataIntent.putExtra(TRANSACTION_ID, transactionId);\n        sendDataIntent.putExtra(MSG_DATA, data.toJsonString());\n        context.sendBroadcast(sendDataIntent);\n    }", "    public List findAll() {\n        log.debug(\"getting all SensorAtCrossroadSensorAtCrossroadInterval instance\");\n        SessionFactory factory = HibernateUtil.getSessionFactory();\n        Session session = factory.openSession();\n        try {\n            Query query = session.createQuery(\"from SensorAtCrossroadSensorAtCrossroadInterval\");\n            List list = query.list();\n\n            if (list == null) {\n                log.debug(\"get successful, no instance found\");\n            } else {\n                log.debug(\"get successful, instance found\");\n            }\n\n            return list;\n        } catch (RuntimeException re) {\n            log.error(\"get failed\", re);\n            throw re;\n        } finally {\n            session.close();\n        }\n    }\n", "public StateInteractive extent_to_whole_components(){\n  Set<Integer> curr_group_no_set=new TreeSet<Integer>();\n  Iterator<BrdItem> it=items_list.iterator();\n  while (it.hasNext()) {\n    BrdItem curr_item=it.next();\n    if (curr_item.get_component_no() > 0) {\n      curr_group_no_set.add(curr_item.get_component_no());\n    }\n  }\n  Set<BrdItem> new_selected_items=new TreeSet<BrdItem>();\n  new_selected_items.addAll(items_list);\n  Iterator<Integer> it2=curr_group_no_set.iterator();\n  while (it2.hasNext()) {\n    int curr_group_no=it2.next();\n    new_selected_items.addAll(r_brd.get_component_items(curr_group_no));\n  }\n  if (new_selected_items.isEmpty()) {\n    return return_state;\n  }\n  items_list=new_selected_items;\n  actlog_start_scope(LogfileScope.EXTEND_TO_WHOLE_COMPONENTS);\n  i_brd.repaint();\n  return this;\n}\n", "    public void setMaxCacheSize( final int n ) {\n        sizeOfCache = n;\n\n        if ( query_server != null ) {\n            Categories.dataServer().info( \"Size of the cache in \" + query_server.getName() + \" is \" + n );\n        } else {\n            Categories.dataServer().info( \"Size of the cache in \" + this.getClass().getName() + \" is \" + n );\n        }\n        query_cache = Collections.synchronizedMap( new LinkedHashMap( 16, ( float ) 0.75, true ) {\n            private final int MAX_ENTRIES = n;\n\n            protected boolean removeEldestEntry( Map.Entry eldest ) {\n                return size() > MAX_ENTRIES;\n            }\n        } );\n    }\n", "\t  public Object getParent(Object arg0) {\n\t    // Return this file's parent file\n\t\tString s = ((File) arg0).getAbsolutePath();\n\t\tSystem.out.println(s);\n\t    return ((File) arg0).getParentFile();\n\t  }\n", "public void queueSound(Uri uri,MediaPlayer.OnCompletionListener listener){\n  mAudioQueue.offer(new AudioQueueItem(uri,listener));\n}\n", "public void doPrepare(){\nsynchronized (LAYERWORKER_LOCK) {\n    if (layerWorkerQueue) {\n      return;\n    }\n    ISwingWorker<OMGraphicList> currentLayerWorker=layerWorker;\n    if (currentLayerWorker != null) {\n      layerWorkerQueue=true;\n      if (interruptable) {\n        currentLayerWorker.interrupt();\n      }\n      return;\n    }\n    setLayerWorker(createLayerWorker());\n  }\n}\n", "    public void loadContext() {\n        jclContext.addJcl( JclContext.DEFAULT_NAME, jcl );\n\n        if( logger.isDebugEnabled() )\n            logger.debug( \"Default JarClassLoader loaded into context.\" );\n    }\n", "private String getResourceNameInOtherFolder(String resName, String sourceMergeFolder, String targetMergefolder) {\n\n        // get the resourcename of the resouce to test without the source merge folder\n        String resourcename = resName.substring(sourceMergeFolder.length());\n        // get the complete path of the resource in the other merge folder\n        return targetMergefolder + resourcename;\n    }", "public static boolean isLetterOrDigit(char c){\n  return Character.isLetterOrDigit(c);\n}\n", "public static void unregisterJSIncludeFromThisRequest (@Nonnull final IJSPathProvider aJSPathProvider)\n  {\n    final JSResourceSet aSet = _getPerRequestSet (false);\n    if (aSet != null)\n      aSet.removeItem (aJSPathProvider);\n  }", "\tpublic int extendToInclude(final Date someDate){\n\t\tlong time = prepareDate(someDate);\n\t\tif (this.isEmpty) {\n\t\t\tthis.isEmpty = false;\n\t\t\tthis.endTime = time;\n\t\t\tthis.startTime = time;\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tif (time < this.startTime){\n\t\t\t\tlong result = (time - this.startTime) / interval;\n\t\t\t\tthis.startTime = time;\n\t\t\t\treturn (int)result;\t\t\t\n\t\t\t} else if (time > this.endTime){\n\t\t\t\tlong result = (time - this.endTime) / interval;\n\t\t\t\tthis.endTime = time;\n\t\t\t\treturn (int)result ;\n\t\t\t} else return 0;\n\t\t}\n\t}\n", "public JMenu createAlignMenu(){\n  JMenu alignSubMenu=new JMenu(\"Align\");\n  alignSubMenu.add(actionManager.getAlignHorizontalAction());\n  alignSubMenu.add(actionManager.getAlignVerticalAction());\n  return alignSubMenu;\n}\n", "protected abstract void createNativeCallgraphNodes ( int moduleId , int viewId ) throws SQLException ;", "public T status ( Status status ) { if ( null != status ) { jsonValue . put ( STATUS , status . name ( ) ) ; } return self ( ) ; }", "@Bean\n\tpublic JpaModule jpaModule() {\n\t\tJpaModule module = JpaModule.newServerModule(em, transactionRunner);\n\n\t\t// directly expose entity\n\t\tmodule.addRepository(JpaRepositoryConfig.builder(ScheduleEntity.class).build());\n\n\t\t// additionally expose entity as a mapped dto\n\t\tmodule.addRepository(JpaRepositoryConfig.builder(ScheduleEntity.class, ScheduleDto.class, new ScheduleMapper()).build());\n\t\tJpaCriteriaQueryFactory queryFactory = (JpaCriteriaQueryFactory) module.getQueryFactory();\n\n\t\t// register a computed a attribute\n\t\t// you may consider QueryDSL or generating the Criteria query objects.\n\t\tqueryFactory.registerComputedAttribute(ScheduleEntity.class, \"upperName\", String.class,\n\t\t\t\tnew JpaCriteriaExpressionFactory<From<?, ScheduleEntity>>() {\n\n\t\t\t\t\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Expression<String> getExpression(From<?, ScheduleEntity> entity, CriteriaQuery<?> query) {\n\t\t\t\t\t\tCriteriaBuilder builder = em.getCriteriaBuilder();\n\t\t\t\t\t\treturn builder.upper((Expression) entity.get(\"name\"));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\treturn module;\n\t}", "private void writeObject (final ObjectOutputStream aOS) throws IOException\n  {\n    // Read the data\n    if (m_aDFOS.isInMemory ())\n    {\n      _ensureCachedContentIsPresent ();\n    }\n    else\n    {\n      m_aCachedContent = null;\n      m_aDFOSFile = m_aDFOS.getFile ();\n    }\n\n    // write out values\n    aOS.defaultWriteObject ();\n  }", "@Override public void modifyVariableId(String oldVarId,String newVarId){\n  Map<Assignment,Double> newTable=new HashMap<Assignment,Double>();\n  for (  Assignment head : table.keySet()) {\n    Assignment newHead=head.copy();\n    if (head.containsVar(oldVarId)) {\n      Value condVal=newHead.removePair(oldVarId);\n      newHead.addPair(newVarId,condVal);\n    }\n    newTable.put(newHead,table.get(head));\n  }\n  if (headVars.contains(oldVarId)) {\n    headVars.remove(oldVarId);\n    headVars.add(newVarId);\n  }\n  table=newTable;\n  intervals=null;\n}\n", "public < T extends PluginCanvas > PluginCanvasRegistry < T > generate ( Plugin thiz , String identifier , Class < T > clazz ) throws NamingException ;", "public void renderInline(String text, Map<String, Object> parameters, Writer out, GlobalScope... extraGlobalScopes) throws IOException, ParseException {\n    render(loadInline(text), parameters, out, extraGlobalScopes);\n  }", "public LocalVolTermStructure ( final Date referenceDate ) { this ( referenceDate , new Calendar ( ) , BusinessDayConvention . Following , new DayCounter ( ) ) ; }", "  public Capabilities getCapabilities() {\n    Capabilities result = new Capabilities(this);\n    \n    // class\n    if (!m_noClass) {\n      result.enable(Capability.NOMINAL_CLASS);\n      result.enable(Capability.MISSING_CLASS_VALUES);\n    } else {\n      result.enable(Capability.NO_CLASS);\n    }\n       \n    return result;\n  }\n", "public void removeTileListener ( TileListener listener ) { tileListeners . remove ( listener ) ; }", "public static void removeIncludedGroups ( AccountGroup . UUID group , Set < AccountGroup . UUID > ids , final AsyncCallback < VoidResult > cb ) { if ( ids . size ( ) == NUM_ ) { AccountGroup . UUID g = ids . iterator ( ) . next ( ) ; groups ( group ) . id", "public T trimFunction(@NonNull SerializableFunction<HString, HString> trimFunction) {\n      this.trimFunction = trimFunction;\n      return Cast.as(this);\n   }", "public static ReilInstruction createOr ( final long offset , final OperandSize firstSize , final String firstValue , final OperandSize secondSize , final String secondValue , final OperandSize thirdSize , final String thirdValue ) { return createTrinaryIn", "private void parseSessionString(){\n  if (isParsed) {\n    return;\n  }\n  if (isNull()) {\n    throw new IllegalArgumentException(\"sid value is null or empty\");\n  }\n  String serverID=null;\n  try {\n    String sidString=encryptedString;\n    if (isC66Encoded()) {\n      sidString=c66DecodeCookieString(encryptedString);\n    }\n    int outerIndex=sidString.lastIndexOf(\"@\");\n    if (outerIndex == -1) {\n      isParsed=true;\n      return;\n    }\n    String outer=sidString.substring(outerIndex + 1);\n    int tailIndex=outer.indexOf(\"#\");\n    tail=outer.substring(tailIndex + 1);\n    if (tailIndex != -1) {\n      String extensionPart=outer.substring(0,tailIndex);\n      extensions=new DynamicSessionIDExtensions(new LegacySessionIDExtensions(extensionPart));\n    }\n else {\n      extensions=new LegacySessionIDExtensions();\n    }\n    serverID=extensions.getSiteID();\n    if (serverID != null) {\n      setServerID(serverID);\n    }\n  }\n catch (  Exception e) {\n    debug.error(\"Invalid sessionid format:[\" + encryptedString + \"]\",e);\n    throw new IllegalArgumentException(\"Invalid sessionid format:[\" + encryptedString + \"]\"+ e);\n  }\n  isParsed=true;\n}\n", "@Override\n    public int read(byte[] out, final int off, final int len) throws IOException {\n        if (off < 0 || len < 0 || (off + len) > out.length) {\n            throw new IllegalArgumentException(String.format(\n                    \"Illegal arguments for read: byte[%d], off:%d, len:%d\",\n                    out.length, off, len));\n        }\n\n        final int end = off + len;\n        int pos = off;\n        int i;\n        while (pos < end && (i = in.read(out, off, end - off)) >= 0) {\n            pos += i;\n        }\n        return pos - off;\n    }", "public void setCaption(String v) {\n    if (DataTable_Type.featOkTst && ((DataTable_Type)jcasType).casFeat_caption == null)\n      jcasType.jcas.throwFeatMissing(\"caption\", \"ch.epfl.bbp.uima.types.DataTable\");\n    jcasType.ll_cas.ll_setStringValue(addr, ((DataTable_Type)jcasType).casFeatCode_caption, v);}", "EscapeSet(int reg,int size,EscapeState escState){\n  regSet=new BitSet(size);\n  regSet.set(reg);\n  escape=escState;\n  childSets=new ArrayList<EscapeSet>();\n  parentSets=new ArrayList<EscapeSet>();\n  replaceableArray=false;\n}\n", "public void async(Activity act){\n  if (act.isFinishing()) {\n    AQUtility.warn(\"Warning\",\"Possible memory leak. Calling ajax with a terminated activity.\");\n  }\n  if (type == null) {\n    AQUtility.warn(\"Warning\",\"type() is not called with response type.\");\n    return;\n  }\n  this.act=new WeakReference<Activity>(act);\n  async((Context)act);\n}\n", "private void emitRawLines(final StringBuilder out, final Line lines)\n    {\n        Line line = lines;\n        if (this.config.safeMode)\n        {\n            final StringBuilder temp = new StringBuilder();\n            while (line != null)\n            {\n                if (!line.isEmpty)\n                {\n                    temp.append(line.value);\n                }\n                temp.append('\\n');\n                line = line.next;\n            }\n            final String in = temp.toString();\n            for (int pos = 0; pos < in.length(); pos++)\n            {\n                if (in.charAt(pos) == '<')\n                {\n                    temp.setLength(0);\n                    final int t = Utils.readXML(temp, in, pos, this.config.safeMode);\n                    if (t != -1)\n                    {\n                        out.append(temp);\n                        pos = t;\n                    }\n                    else\n                    {\n                        out.append(in.charAt(pos));\n                    }\n                }\n                else\n                {\n                    out.append(in.charAt(pos));\n                }\n            }\n        }\n        else\n        {\n            while (line != null)\n            {\n                if (!line.isEmpty)\n                {\n                    out.append(line.value);\n                }\n                out.append('\\n');\n                line = line.next;\n            }\n        }\n    }", "public void onPaused ( Activity activity ) ;", "    public void setSessionProperty(String nm, Object val, String context) {\n        if (context != null) {\n            nm = nm + \"/\" + context;\n        }\n        HttpServletRequest req = getCurrentRequest();\n        if (req != null) {\n            HttpSession sess = req.getSession();\n            if (sess != null) {\n                sess.setAttribute(nm, val);\n            }\n        }\n    }\n", "public void postProcessing() {\n        // Later: move this into the GraphStorage.optimize method\n        // Or: Doing it after preparation to optimize shortcuts too. But not possible yet #12\n\n        if (sortGraph) {\n            if (ghStorage.isCHPossible", "    public void setRefid(Reference r) throws BuildException {\n        if (!includeList.isEmpty() || !excludeList.isEmpty()) {\n            throw tooManyAttributes();\n        }\n        super.setRefid(r);\n    }\n", "public void pushOntoLogger ( Logger logger ) { logger . setAdditivity ( additive ) ; logger . removeAllAppenders ( ) ; for ( Appender appender : appenders ) { logger . addAppender ( appender ) ; } }", "protected static final boolean intersects(double xmin1,double ymin1,double xmax1,double ymax1,double xmin2,double ymin2,double xmax2,double ymax2){\n  return !((xmax1 <= xmin2) || (ymax1 <= ymin2) || (xmin1 >= xmax2)|| (ymin1 >= ymax2));\n}\n", "public void writeRaw(final long offset,final ByteBuffer transfer) throws IOException {\n  if (log.isDebugEnabled())   log.debug(\"writeRaw: \" + offset);\n  final Lock lock=m_extensionLock.readLock();\n  lock.lock();\n  try {\n    FileChannelUtility.writeAll(m_reopener,transfer,offset);\n  }\n  finally {\n    lock.unlock();\n  }\n}\n", "private boolean userInGroupsMembershipList(String userDN,Map<String,Collection<String>> groupMembershipList){\n  boolean result=false;\n  Collection<Collection<String>> memberLists=groupMembershipList.values();\n  Iterator<Collection<String>> memberListsIter", "    public void drawexecute(Drawer inDrawer){\n        System.out.println(\"Executing\");\n        myDrawer = inDrawer;\n        myThread = new Thread(this);\n        myThread.start();\n        System.out.println(\"Finished Starting Thread\");\n    }    \n", "public static void loadModel() throws IOException, TException, UnknownWordException {\n  final Word2VecModel model;\n  try (ProfilingTimer timer=ProfilingTimer.create(LOG,\"Loading model\")){\n    String json=Common.readFileToString(new File(\"text8.model\"));\n    model=Word2VecModel.fromThrift(ThriftUtils.deserializeJson(new Word2VecModelThrift(),json));\n  }\n   interact(model.forSearch());\n}\n", "public Set < BreakpointAddress > stop ( ) { NaviLogger . info ( STR_ , eventList . getName ( ) , eventList . getEventCount ( ) ) ; if ( activeEchoBreakpointCount ( ) == NUM_ ) { return new HashSet < BreakpointAddress > ( ) ; } lock . lock ( ) ; removeListeners ( ) ; final Set < BreakpointAddress > ebps = new HashSet < > ( activeEchoBreakpoints . keySet ( ) ) ; breakpointManager . removeBreakpoints ( BreakpointType . ECHO , ebps ) ; try { for ( final ITraceLoggerListener listener : listeners ) { listener . removedBreakpoint ( ) ; } } catch ( final IllegalArgumentException exception ) { } activeEchoBreakpoints . clear ( ) ; lock . unlock ( ) ; for ( final ITraceLoggerListener listener : listeners ) { try { listener . finished ( eventList ) ; } catch ( final Exception exception ) { CUtilityFunctions . logException ( exception ) ; } } return ebps ; }", "public void remove(Object pKey)\r\n    {\r\n        Identity id;\r\n        if(pKey instanceof Identity)\r\n        {\r\n            id = (Identity) pKey;\r\n        }\r\n        else\r\n        {\r\n            id = transaction.getBroker().serviceIdentity().buildIdentity(pKey);\r\n        }\r\n        mhtObjectEnvelopes.remove(id);\r\n        mvOrderOfIds.remove(id);\r\n    }", "public static HttpRequest put ( final CharSequence url ) throws HttpRequestException { return new HttpRequest ( url , METHOD_PUT ) ; }", "public static void cleanup ()\n  {\n    if (MimeTypeInfoManager.isDefaultInstantiated ())\n      MimeTypeInfoManager.getDefaultInstance ().reinitializeToDefault ();\n    if (MicroTypeConverterRegistry.isInstantiated ())\n      MicroTypeConverterRegistry.getInstance ().reinitialize ();\n    if (XMLSchemaCache.isInstantiated ())\n      XMLSchemaCache.getInstance ().clearCache ();\n    XMLSchemaCache.clearPerClassLoaderCache ();\n  }", "private static Permission [ ] grantablePermissions ( Permission [ ] permissions ) { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm == null || permissions . length == NUM_ ) { return permissions ; } try { sm . checkPermission ( new GrantPer", "@Override public void ignoredCharacters(XMLString text,Augmentations augs) throws XNIException {\n  if (fDTDGrammar != null)   fDTDGrammar.ignoredCharacters(text,augs);\n  if (fDTDHandler != null) {\n    fDTDHandler.ignoredCharacters(text,augs);\n  }\n}", "public LogStream printf(String format,Object... args){\n  if (ps != null) {\n    print(String.format(format,args));\n  }\n  return this;\n}\n", "@Nullable\n  private String getRealRemoteAddressOrNull(HttpExchange httpExchange) {\n    if (config.getTrustXForwardForHeader()) {\n      List<String> forwardedIpsStr = httpExchange.getRequestHeaders().get(\"X-forwarded-for\");\n      if (forwardedIpsStr != null && forwardedIpsStr.size() > 0) {\n        return forwardedIpsStr.get(0);\n      }\n    }\n    return null;\n  }", "\t\tpublic void reset() throws IOException {\n\t\t\tsynchronized (CircularCharBuffer.this){\n\t\t\t\tif (readerClosed) throw new IOException(\"Reader has been closed; cannot reset a closed Reader.\");\n\t\t\t\treadPosition = markPosition;\n\t\t\t}\n\t\t}\n", "public static void multTransB(DMatrix1Row a , DMatrix1Row b , DMatrix1Row c )\n    {\n        if( b.numRows == 1 ) {\n            MatrixVectorMult_DDRM.mult(a, b, c);\n        } else {\n            MatrixMatrixMult_DDRM.multTransB(a, b, c);\n        }\n    }", "    public void resetUserSession() {\n        session.removeAttribute(\"UserId\");\n        session.removeAttribute(\"UserRoles\");\n        session.removeAttribute(\"Status\");\n    }\n", "   public boolean block_winning_move() {\n\n      // Loop through each combination and see if any player occupies \n      // three positions. If so, take the last remaining position.\n      int pos;\n      for (int i=0; i<76; i++) {\n         if (combinations[i][0] == 3) {\n            for (int j=2; j<6; j++) {\n               pos = combinations[i][j];\n               if (occupied[pos] == 0) {\n                  occupied[pos] = MACHINE;\n                  positions.set(pos, MACHINE);\n                  player = update_logic_arrays(pos);\n                  if (debug) System.out.println(\"block_winning_move:  true\");\n                  return true;  \n               }\n            }\n         }\n      }\n      if (debug) System.out.println(\"check_winning_move:  false\");\n      return false;\n   }\n", "MySQLAuthPacket ( byte packetNumber , String user , byte [ ] encryptedPassword , String db ) { super ( NUM_ + NUM_ + NUM_ + NUM_ + user . length ( ) + NUM_ + encryptedPassword . length + NUM_ + ( db == null || db . length ( ) == NUM_ ? NUM_ : db . length ( ) + NUM_ ) , packetNumber ) ; int flags = NUM_ | ( db == null || db . length ( ) == NUM_ ? NUM_ : NUM_ ) | NUM_ | NUM_ | NUM_ | NUM_ | NUM_ ; putInt32 ( flags ) ; putInt32 ( NUM_ ) ; putByte ( ( byte ) NUM_ ) ; putBytes ( new byte [ NUM_ ] ) ; putString ( user ) ; putLenBytes ( encryptedPassword ) ; if ( db != null && db . length ( ) > NUM_ ) { putString ( db ) ; } }", "private QueryParameters.Direction convertToDirection(int columnType) {\n        QueryParameters.Direction result = null;\n\n        if (columnType == DatabaseMetaData.procedureColumnIn) {\n            result = QueryParameters.Direction.IN;\n        } else", "public MapWithProtoValuesFluentAssertion<M> ignoringFieldAbsenceOfFieldsForValues(\n      Iterable<Integer> fieldNumbers) {\n    return usingConfig(config.ignoringFieldAbsenceOfFields(fieldNumbers));\n  }", "public void addListener(U type,T listener){\n  List<T> newlisteners=new ArrayList<T>();\n  if (listeners != null)   newlisteners.addAll(listeners);\n  newlisteners.add(listener);\n  List<T> terminals=new ArrayList<T>();\n  for (  T i : newlisteners) {\n    boolean isterm=true;\n    for (    T j : newlisteners) {\n      if (ispre(type,i,j)) {\n        isterm=false;\n        break;\n      }\n    }\n    if (isterm) {\n      terminals.add(i);\n    }\n  }\n  if (terminals.size() == 0) {\n    logger.error(\"No listener dependency solution: \" + \"No listeners without incoming dependencies\");\n    listeners=newlisteners;\n    return;\n  }\n  HashSet<T> visited=new HashSet<T>();\n  List<T> ordering=new ArrayList<T>();\n  for (  T term : terminals) {\n    visit(newlisteners,type,visited,ordering,term);\n  }\n  listeners=ordering;\n}\n", "private void parseToken(String token){\n  int len=token.length();\n  for (int i=0; i < len; i++) {\n    int chr=sr.read();\n    if (chr == -1) {\n      throw new IllegalArgumentException(\"EOF reached while reading token: \" + token);\n    }\n    chr=Character.toLowerCase((char)chr);\n    int loTokenChar=token.charAt(i);\n    if (loTokenChar != chr) {\n      throw new IllegalArgumentException(\"Expected token: \" + token + \" at position \"+ sr.getPosition());\n    }\n  }\n}\n", "public static base_response unset(nitro_service client, appfwsettings resource, String[] args) throws Exception{\n\t\tappfwsettings unsetresource = new appfwsettings();\n\t\treturn unsetresource.unset_resource(client,args);\n\t}", "public static void checkContentProviderVarsAndArguments(final SQLiteModelMethod method,\n\t\t\tList<JQLPlaceHolder> placeHolders) {\n\t\tAssertKripton.assertTrue(placeHolders.size() == method.contentProviderUriVariables.size(),\n\t\t\t\t\"In '%s.%s' content provider URI path variables and variables used in where conditions are different. If SQL uses parameters, they must be defined in URI path.\",\n\t\t\t\tmethod.getParent().getName(), method.getName());\n\t}", "public CompositeOutputStream(OutputStream... out){\n  final Set<OutputStream> newSet=new HashSet<OutputStream>();\n  for (  OutputStream stream : out) {\n    newSet.add(stream);\n  }\n  this.streams=newSet;\n}\n", "  public void addCompressor(Compressor compressor) {\n    compressors.add(compressor);\n  }\n", "boolean doActionPostDeviceStatus ( final IEspDevice device , final IEspDeviceStatus status ) ;", "public void applyModifications(Properties mods)\r\n    {\r\n        String key;\r\n        String value;\r\n\r\n        for (Iterator it = mods.keySet().iterator(); it.hasNext();)\r\n        {\r\n            key   = (String)it.next();\r\n            value = mods.getProperty(key);\r\n            setProperty(key, value);\r\n        }\r\n    }", "    public HtmlComponent getListComponent(String name) {\n\n\t    int elementsSize = _elements.size();\n        for (int i = 0; i < elementsSize; i++) {\n            BaseListFormComponent blfc = (BaseListFormComponent) _elements.elementAt(i);\n            if (blfc.getName().equals(name) && blfc.getListComponent() != null) {\n                return blfc.getListComponent();\n            }\n        }\n\n        return null;\n   \n    }\n", "public void addX509Certificate(X509CertificateEntity x509Certificate){\n  x509Certificates.add(x509Certificate);\n}\n", "void stopScroller ( ) { if ( ! mScroller . isFinished ( ) ) { mScroller . abortAnimation ( ) ; } }", "@Override public void run(){\n  tracker.persist(false);\n}\n", "public static int magnitude(int v){\n  return Integer.SIZE - Integer.numberOfLeadingZeros(v);\n}\n", "public String readIntern ()\n        throws IOException\n    {\n        // create our intern map if necessary\n        if (_internmap == null) {\n            _internmap = Lists.newArrayList();\n            // insert a zeroth element\n            _internmap.add(null);\n        }\n\n        // read in the intern code for this instance\n        short code = readShort();\n\n        // a zero code indicates a null value\n        if (code == 0) {\n            return null;\n\n        // if the code is negative, that means that we've never seen if before and value follows\n        } else if (code < 0) {\n            // first swap the code into positive-land\n            code *= -1;\n\n            // read in the value\n            String value = readUTF().intern();\n\n            // create the mapping and return the value\n            mapIntern(code, value);\n            return value;\n\n        } else {\n            String value = (code < _internmap.size()) ? _internmap.get(code) : null;\n\n            // sanity check\n            if (value == null) {\n                // this will help with debugging\n                log.warning(\"Internal stream error, no intern value\", \"code\", code,\n                            \"ois\", this, new Exception());\n                log.warning(\"ObjectInputStream mappings\", \"map\", _internmap);\n                String errmsg = \"Read intern code for which we have no registered value \" +\n                    \"metadata [code=\" + code + \"]\";\n                throw new RuntimeException(errmsg);\n            }\n            return value;\n        }\n    }", "private void fireProjectAdded(int index,Project project) {\n\t\tif (listener!=null) {\n\t\t\tlistener.projectAdded(new ProjectsEvent(this,index,project));\n\t\t}\n\t}", "public void addGlobPattern(final String pattern){\n  globMatchers.add(new GlobMatcher(pattern));\n}\n", "public static void v ( String tag , String msg , Throwable tr ) { println ( VERBOSE , tag , msg , tr ) ; }", "private void loadDataFromService(){\n  List<InvocationSequenceData> invocData;\n  if (!autoUpdate) {\n    if (template.getMethodIdent() != IdDefinition.ID_NOT_USED) {\n      invocData=dataAccessService.getInvocationSequenceOverview(template.getPlatformIdent(),template.getMethodIdent(),limit,fromDate,toDate,resultComparator);\n    }\n else {\n      invocData=dataAccessService.getInvocationSequenceOverview(template.getPlatformIdent(),limit,fromDate,toDate,resultComparator);\n    }\n  }\n else {\n    if (template.getMethodIdent() != IdDefinition.ID_NOT_USED) {\n      invocData=dataAccessService.getInvocationSequenceOverview(template.getPlatformIdent(),template.getMethodIdent(),limit,resultComparator);\n    }\n else {\n      invocData=dataAccessService.getInvocationSequenceOverview(template.getPlatformIdent(),limit,resultComparator);\n    }\n  }\n  invocationSequenceData.clear();\n  if (!invocData.isEmpty()) {\n    invocationSequenceData.addAll(invocData);\n  }\n}\n", "public SerializedObject(Object toStore,boolean compress) throws Exception {\n  ByteArrayOutputStream ostream=new ByteArrayOutputStream();\n  OutputStream os=ostream;\n  ObjectOutputStream p;\n  if (!compress)   p=new ObjectOutputStream(new BufferedOutputStream(os));\n else   p=new ObjectOutputStream(new BufferedOutputStream(new GZIPOutputStream(os)));\n  p.writeObject(toStore);\n  p.flush();\n  p.close();\n  m_storedObjectArray=ostream.toByteArray();\n  m_isCompressed=compress;\n  m_isJython=(toStore instanceof JythonSerializableObject);\n}\n", "public static Number minus(Number left,Character right){\n  return NumberNumberMinus.minus(left,Integer.valueOf(right));\n}\n", "@Override\n    public synchronized DatabaseEngine duplicate(Properties mergeProperties, final boolean copyEntities) throws DuplicateEngineException {\n        if (mergeProperties == null) {\n            mergeProperties = new Properties();\n        }\n\n        final PdbProperties niwProps = properties.clone();\n        niwProps.merge(mergeProperties);\n\n\n        if (!(niwProps.isSchemaPolicyNone() || niwProps.isSchemaPolicyCreate())) {\n            throw new DuplicateEngineException(\"Duplicate can only be called if pdb.policy is set to 'create' or 'none'\");\n        }\n\n        try {\n            DatabaseEngine niw = DatabaseFactory.getConnection(niwProps);\n\n            if (copyEntities) {\n                for (MappedEntity entity : entities.values()) {\n                    niw.addEntity(entity.getEntity());\n                }\n            }\n\n            return niw;\n        } catch (final Exception e) {\n            throw new DuplicateEngineException(\"Could not duplicate connection\", e);\n        }\n    }", "void visitTableSwitchInsn ( int min , int max , Label dflt , Label [ ] labels ) ;", "protected void onRequestStarted ( Context context , View view , String actionType , M model ) { if ( mShowProgressEnabled ) showProgressDialog ( context , view , actionType , model ) ; }", "public static String getFormattedTagAndLength(final byte[] data, final int indentLength) {\n\t\tStringBuilder buf = new StringBuilder();\n\t\tString indent = getSpaces(indentLength);\n\t\tTLVInputStream stream = new TLVInputStream(new ByteArrayInputStream(data));\n\n\t\tboolean firstLine = true;\n\t\ttry {\n\t\t\twhile (stream.available() > 0) {\n\t\t\t\tif (firstLine) {\n\t\t\t\t\tfirstLine = false;\n\t\t\t\t} else {\n\t\t\t\t\tbuf.append(\"\\n\");\n\t\t\t\t}\n\t\t\t\tbuf.append(indent);\n\n\t\t\t\tITag tag = searchTagById(stream.readTag());\n\t\t\t\tint length = stream.readLength();\n\n\t\t\t\tbuf.append(prettyPrintHex(tag.getTagBytes()));\n\t\t\t\tbuf.append(\" \");\n\t\t\t\tbuf.append(String.format(\"%02x\", length));\n\t\t\t\tbuf.append(\" -- \");\n\t\t\t\tbuf.append(tag.getName());\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tLOGGER.error(e.getMessage(), e);\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(stream);\n\t\t}\n\t\treturn buf.toString();\n\t}", "public boolean updateSelection ( int actionType , IStructuredSelection selection ) ;", "@Override protected double updateDistance(double currDist,double diff){\n  double result;\n  result=currDist;\n  result+=Math.pow(Math.abs(diff),m_Order);\n  return result;\n}\n", "public void addItem(String key, PdfNumber n) {\n\t\tPdfName fieldname = new PdfName(key);\n\t\tPdfCollectionField field = (PdfCollectionField)schema.get(fieldname);\n\t\tif (field.fieldType == PdfCollectionField.NUMBER) {\n\t\t\tput(fieldname, n);\n\t\t}\n\t}", "public final Application getApplication(ApplicationName name) {\n\n    GetApplicationRequest request =\n        GetApplicationRequest.newBuilder().setName(name == null ? null : name.toString()).build();\n    return getApplication(request);\n  }", "public static long secondsIntervalAs(long secondsIntervalRaw,TimeUnit as){\n  return as.convert(secondsIntervalRaw,AkIntervalSecondsFormat.UNDERLYING_UNIT);\n}\n", "private static String generateTimestamp(){\n  SimpleDateFormat sdf=new SimpleDateFormat(\"yyyy_MM_dd_HH_mm_ss_SSS\",Locale.US);\n  return sdf.format(new Date());\n}\n", "private void setGroupSearchScope(Map<String, Object> configProps) {\n        if (configProps.get(\"recursiveSearch\") != null &&\n            configProps.get(\"recursiveSearch\") instanceof Boolean)\n            iRecursiveSearch = (Boolean) configProps.get(\"recursiveSearch\");\n    }", "private void checkHashes(Dependency dependency, String sha1, String sha256, String md5) throws FileNotFoundException {\n        final String md5sum = dependency.getMd5sum();\n        if (!md5.equals(md5sum)) {\n            throw new FileNotFoundException(\"Artifact found by API is not matching the md5 \"\n                    + \"of the artifact (repository hash is \" + md5 + WHILE_ACTUAL_IS + md5sum + \") !\");\n        }\n        final String sha1sum = dependency.getSha1sum();\n        if (!sha1.equals(sha1sum)) {\n            throw new FileNotFoundException(\"Artifact found by API is not matching the SHA1 \"\n                    + \"of the artifact (repository hash is \" + sha1 + WHILE_ACTUAL_IS + sha1sum + \") !\");\n        }\n        final String sha256sum = dependency.getSha256sum();\n        if (sha256 != null && !sha256.equals(sha256sum)) {\n            throw new FileNotFoundException(\"Artifact found by API is not matching the SHA-256 \"\n                    + \"of the artifact (repository hash is \" + sha256 + WHILE_ACTUAL_IS + sha256sum + \") !\");\n        }\n    }", "  public boolean removeItem( JContactListItem item )  {\n\n    if( !listModel.contains( item ) )\n      return false;\n\n    listModel.removeElement( item );\n\n    return true;\n  }\n", "@Trivial\n    public static String lookupAppName() {\n        String appName;\n        try {\n            appName = (String) new InitialContext().lookup(\"java:app/AppName\");\n        } catch (NamingException e) {\n            Tr.error(tc, \"OPENTRACING_NO_APPNAME_FOUND_IN_JNDI\"); // Should never happen\n            appName = DEFAULT_SERVICE_NAME;\n        }\n        return appName;\n    }", "\tpublic boolean removeMember(K1 key, K2 subKey) {\n\t\tMap<K2, Integer> element = get(key);\n\t\tif (element != null) {\n\t\t\treturn element.remove(subKey) != null;\n\t\t}\n\t\treturn false;\n\t}\n", "public static Map<UUID,Collection<ClusterNode>> neighbors(Collection<ClusterNode> topSnapshot){\n  Map<String,Collection<ClusterNode>> macMap=new HashMap<>(topSnapshot.size(),1.0f);\n  for (  ClusterNode node : topSnapshot) {\n    String macs=node.attribute(", "\tpublic void clear(){\n\t\tstatements = new ArrayList<SqlStatment>();\n\t}\n", "  public NBEdge edgeAt(int index) {\n    if (edges.size() == 0) {\n      return null;\n    }\n    return (NBEdge) edges.elementAt(index);\n  }\n", "public static ViewAction performDescendantAction ( Matcher < View > viewMatcher , ViewAction viewAction ) { return ViewActions . actionWithAssertions ( new DescendantViewAction ( viewMatcher , viewAction ) ) ; }", "\tpublic void setImageIndex(int imageLayer, int newImageIndex) throws IllegalArgumentException  {\n\t\tParameterChecker.checkMinMax(imageLayer, \"imageLayer\", BACKGROUND, FOREGROUND3);\n\t\timageIndex[imageLayer] = newImageIndex;\n\t}\n", "@Transactional\n  @PostMapping(\n      value = \"/{entityTypeId}/{id}\",\n      params = \"_method=PUT\",\n      headers = \"Content-Type=multipart/form-data\")\n  @ResponseStatus(NO_CONTENT)\n  public void updateFromFormPostMultiPart(\n      @PathVariable(\"entityTypeId\") String entityTypeId,\n      @PathVariable(\"id\") String untypedId,\n      MultipartHttpServletRequest request) {\n    Map<String, Object> paramMap = new HashMap<>();\n    for (String param : request.getParameterMap().keySet()) {\n      String[] values = request.getParameterValues(param);\n      String value = values != null ? StringUtils.join(values, ',') : null;\n      paramMap.put(param, value);\n    }\n\n    // add files to param map\n    for (Entry<String, List<MultipartFile>> entry : request.getMultiFileMap().entrySet()) {\n      String param = entry.getKey();\n      List<MultipartFile> files = entry.getValue();\n      if (files != null && files.size() > 1) {\n        throw new IllegalArgumentException(\"Multiple file input not supported\");\n      }\n      paramMap.put(param, files != null && !files.isEmpty() ? files.get(0) : null);\n    }\n    updateInternal(entityTypeId, untypedId, paramMap);\n  }", "protected double updateDistance(double currDist,double diff){\n  double result;\n  result=currDist;\n  diff=Math.abs(diff);\n  if (diff > result)   result=diff;\n  return result;\n}", "\tpublic void save(School entity) {\n\t\tEntityManagerHelper.log(\"saving School instance\", Level.INFO, null);\n\t\ttry {\n\t\t\tgetEntityManager().persist(entity);\n\t\t\tEntityManagerHelper.log(\"save successful\", Level.INFO, null);\n\t\t} catch (RuntimeException re) {\n\t\t\tEntityManagerHelper.log(\"save failed\", Level.SEVERE, re);\n\t\t\tthrow re;\n\t\t}\n\t}\n", "private String updateMethodName ( MethodInsnNode min ) { ClassNode methodOwner = getClassNode ( min . owner ) ; while ( ! methodOwner . name . equals ( STR_ ) ) { MethodNode method = getMethod ( methodOwner , min . name , min . desc ) ; if ( method != null ) { String renamed = getRefactoredName ( method ) ; if ( ! renamed . equals ( min . name ) ) { return renamed ; } } methodOwner = getClassNode ( methodOwner . superName ) ; } return min . name ; }", "public void decodePasswords() {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            Tr.entry(tc, \"decodePasswords\");\n        Enumeration<?> e = propertyNames();\n\n        while (e.hasMoreElements()) {\n            String name = (String) e.nextElement();\n            if (name.toLowerCase().indexOf(\"password\") != -1) {\n                setProperty(name, WSKeyStore.decodePassword(getProperty(name)));\n            }\n        }\n\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            Tr.exit(tc, \"decodePasswords\");\n    }", "public final void setValidField(final int field, final boolean valid)\n\t{\n\t\tif (field < 0 || field >= FIELD_MASKS.length)\n\t\t\tthrow new KNXIllegalArgumentException(\"illegal field\");\n\t\tsetBit(0, FIELD_MASKS[field], !valid);\n\t}", "public CHelpSavePane ( final IHelpInformation information ) { this ( STR_ , information ) ; }", "    private void createSelectorCache() {\n\tselectorsCache = new ArrayList<SGSelector>();\n\tfor (SGSelector sel : task.getSearchSpace()) {\n\t    if (sel instanceof DefaultSGSelector) {\n\t\tselectorsCache.add(new FastSelector(sel.getAttribute(),\n\t\t\t((DefaultSGSelector) sel).getValues()));\n\t    } else {\n\t\tselectorsCache.add(sel);\n\t    }\n\t}\n    }\n", "@Override\n    public void add(@Nonnull SoftwareSystem softwareSystem, boolean addRelationships) {\n        if (softwareSystem != null && !softwareSystem.equals(getSoftwareSystem())) {\n            addElement(softwareSystem, addRelationships);\n        }\n    }", "public static void unbox ( MethodVisitor mv , Class type ) { if ( type . isPrimitive ( ) && type != Void . TYPE ) { String returnString = STR_ + BytecodeHelper . getTypeDescription ( type ) ; mv . visitMethodInsn ( INVOKESTATIC , DTT_CLASSNAME , type . ge", "public String readLine ( ) throws IOException { return keepCarriageReturns ? readUntilNewline ( ) : reader . readLine ( ) ; }", "    public void setDirectory(RemoteFile directory) {\n        if (this.directory != directory) {\n            this.directory = directory;\n            listMediaFiles();\n        }\n    }\n", "public static void colorizeToolbar(Toolbar toolbarView, int toolbarIconsColor, Activity activity) {\n        final PorterDuffColorFilter colorFilter\n                = new PorterDuffColorFilter(toolbarIconsColor, PorterDuff.Mode.SRC_IN);\n\n        for (int i = 0; i < toolbarView.getChildCount(); i++) {\n            final View v = toolbarView.getChildAt(i);\n\n            doColorizing(v, colorFilter, toolbarIconsColor);\n        }\n\n        //Step 3: Changing the color of title and subtitle.\n        toolbarView.setTitleTextColor(toolbarIconsColor);\n        toolbarView.setSubtitleTextColor(toolbarIconsColor);\n    }", "public StringRequest ( String url , Listener < String > listener , ErrorListener errorListener ) { this ( Method . GET , url , listener , errorListener ) ; }", "    public boolean removeAll(long[] values) {\n        checkRemoveModifiable();\n        boolean changed = false;\n        if (values != null) {\n            for (LongIterator it = iterator(); it.hasNext(); ) {\n                long value = it.nextLong();\n                for (int i = 0; i < values.length; i++) {\n                    if (values[i] == value) {\n                        it.remove();\n                        changed = true;\n                    }\n                }\n            }\n        }\n        return changed;\n    }\n", "    public int getActiveCellRow() {\n        if (_selection == null) {\n            return 0;\n        }\n        return _selection.getActiveCellRow();\n    }\n", "public BoundedObject queryOne(int px,int py){\n  return queryOne(px,py,root);\n}\n", "public FileListFromComputeNodeNextOptions withOcpDate(DateTime ocpDate) {\n        if (ocpDate == null) {\n            this.ocpDate = null;\n        } else {\n            this.ocpDate = new DateTimeRfc1123(ocpDate);\n        }\n        return this;\n    }", "        public void fileChanged(String filename) throws Exception {\n            redeploy(filename);\n        }\n"], "comment": ["attach to a running attachresult in a container .", "get this object properties", "removes a permission overwrite for the given entity .", "creates the context menu", "returns the previous element in the history log", "one or more reserved instances offering ids .", "sets the search locations used for resource lookups", "remove a trainer listener .", "get the person that this object points to .", "subtract a value from this value .", "makes a clean shutdown when a main method reaches a uncaught exception", "inside method to parse a structure .", "adds the list of tuner configurations to the model", "registers mbean with the server .", "given a c3p0 pooled connection , extracts the enclosed \" real \" connection", "parses a colon - delimited list of packages", "return a path for an arrow pointing to the right .", "parse a single type out of the signature , starting at the beginning of the remaining part of the signature .", "show a long toast", "generate the classfile instructions for this operand", "retrieves metadata about a directory .", "the doget method of the servlet .", "sends an end of log message to the master of that partition .", "warns the user that layouting could take a while .", "converts an antrl and ast into a filter and ast .", "returns the current queue size .", "clear all items and groups .", "get a single file", "read the station names to string array", "sets the ascending sorter or null for no sorter for the ascending order", "add all strings in list to result of current action", "included ordinary classes in this package .", "returns entry with maximum value of path of matching entries .", "convert tag identifiers to tags", "deleting all comments out of the spanmanager . . . br lt ! comment", "create a builder from the configuration .", "an array of custom recipe names to be run following a setup event .", "checks if the value is negative or not", "configure the sarl project .", "determine whether or not the id of the given basicblock appears anywhere in the path", "return the buffer s current value as a string .", "implements the capture thread get a frame from the framegrabber and send it for processing", "loads all data of a memory section .", "this is invoked as part of the \" store all \" mechanism , which is not used for these objects .", "implementers should invoke the call that actually performs the request on the relationship that affects the referenced side of this relationship .", "print composite stack trace to printstream ps", "does post processing of the distances ( if necessary ) returned by distance ( distance ( instance first , instance second , double cutoffvalue ) .", "finds a document in the collection and performs the given update .", "destruction of the servlet .", "verify that the filter raises exception if no definitions file is provided .", "extracts the metric to be examined from the having tokenizedquery .", "smoothly reposition rotate and zoom the camera to the atlas slide view", "apply a boolean attribute value on the form , with the given name .", "caches the cp definition grouped entry in the entity cache if it is enabled .", "removes a code bookmark from the code bookmark manager .", "return a list of point objects representing a path from coordinates ( ax , by ) to ( bx , by ) , inclusive , determined by performing an", "construct a new empty attributes2impl object", "count the number of chunks the given amount of bytes is spawn starting from the read pointer .", "this method must be provided by the vm vendor , as it is used by org . apache . harmony . luni . util . msghelp . setlocale ( ) to get the bootstrap classloader .", "positions the select popup .", "instantiates a json builder .", "combine the passed predicates into a single or node .", "we only rebuild the journal when it will halve the size of the journal and eliminate at least 2000 ops .", "obtain a strategy given a field from a simpledateformat pattern", "marshall the given parameter object .", "do not handle inside of codemirror instead push up the dom tree .", "set year of recording read from text content", "unget the log service .", "assert that two queries return the same documents and with the same scores .", "executes the update prepared statement", "visits an iinc instruction .", "utility to log the arrays of doubles with line breaks", "opens the file source", "abbreviates a string using ellipses .", "appends additional fields to this access path", "reads the remaining bytes of data from standard input and return as a string .", "implement the parcelable interface .", "edit a user by given login", "get alliance icon get the icon urls for a alliance - - - this route expires daily at 11 : 05", "test whether two collections contains the same elements , regardless of the order in which the elements appear in the collections", "enable supplemental tracing for the underlying data source or java . sql . driver .", "create a new file using the given settings .", "delete admin from chatroom .", "return an automaton that accepts all 1 - character insertions of s ( inserting one character )", "rounds the x and y values of the given vector2 down to the nearest integer value .", "this method registers the default namespaces .", "verify if the string sorting matches with asc or desc", "gets the sql data .", "output actionnextperson actionperformed", "the function returns user data", "setter for property password1", "sweeps up or down the layout attempting to minimise the median placement of connected cells on adjacent ranks", "copy an stream to another one .", "similar to setlevels ( levels , isordered ) ,", "return a copy of the data written on the buffer ( the bytes in [ 0 : pos ] ) .", "check the sign content .", "tokenize the supplied string and return all tokens in list instance allows duplication .", "exists with optional error message , usage show and exit code .", "return a real number from an exponential distribution with rate lambda .", "shortcut to getelementtext", "returns implementation type value", "returns the uuid as a byte byte array", "onpulldowntorefresh will be called only when the user has pulled from the start and released .", "just like times but it shifts the result", "if the start end trim are offset to begin with store them so that animation starts from that offset .", "possibly move end mark if its position is above the given number", "trace the right side of the image", "called when the list of accesspoints are modified and this activity needs to refresh the list .", "answer the channel inherited from the instance which created this jvm", "opens a spatial image .", "return the handler instance .", "overide the superclass method to allow one or two arguments .", "returns true if a path should be authenticated , false to skip authentication .", "checks if the walker is at the specified state", "displays a message to the output stream without wrapping .", "collects the passed in objects into a list .", "reads a bit of the mapping matrix accounting for boundary wrapping .", "create a new te calculator for the given base destination and source history embedding lengths .", "adapts a cryptopiaticker to a ticker object", "carries out the actions to use a specific number of units", "initializes the tuner section .", "add two long integers checking for overflow .", "returns the category path for the given root path .", "invoked after the local comment of the function node changed .", "stop the entity .", "sends the supplied packet from the server to the chosen player", "retrieve an user by his user name", "release all metadata in the cache .", "make a jsonexception to signal a syntax error .", "sets the call - back for the ajax change event .", "utility method that creates a new stringliteralexpr .", "checks if a file will be unpacked or not", "returns the value of the specified band in the specified pixel .", "returns a hash code value for the object", "convert a string to a voltdb decimal number with the default ( and only possible ) scale .", "is called to create the body content of the form .", "get the number of glyphs that this builder has support for .", "return information about the lookup tables in this gsub table .", "constructs a new sum distributed task that delegates the actual execution to th provided task .", "returns the next links in the incrementaltopodataquery without regard to the nodedatafilter", "either find the index that is already being used to hold the counts for cmid or allocate a new entry in the heap for cmid .", "read a file containing entries of a given type .", "parses the html jericho source for the elements that contain references to other resources .", "copy one gradient into another .", "excludes storage units from the list with primary and sub - partition values matching one of the excluded partitions .", "try to remove extraneous items from the set of sampled items .", "initializes the current reference using the concrete object", "returns the type of the given node", "saves the view settings to the database .", "tests this instance for equality with an arbitrary object .", "writes the record to a stream", "all the shards ( replicas ) for the provided index .", "loads up a zip file that ' s contained in the classpath .", "create a copy of tokenmetadata with tokentoendpointmap reflecting situation after all current leave , and move operations have finished .", "replace the input message using the rules ' type ' found in the xml configuration file", "creates a reader that assumes all encoded data is data , and does not treat the final character as a check digit .", "convert a standard properties class into a configuration class .", "prints type as string .", "read asynchronously events from connected event stream .", "returns just the nodetextrep part of this noderepresentation object .", "adapts any exception that may have occurred whilst reading input from the console .", "saves given content to this storage part", "create a reservationtokenattribute .", "verifies a single node of an operand tree .", "puts two bytes into this byte vector .", "get best fitting number", "indicates whether this entry has expired .", "you are not supposed to instantiate this class .", "searches for the property with the specified key in this property list", "returns a new period with the specified number of millis .", "retrieves the id of the root community", "return the size of the raw map", "converts a string of the form a : b , c : d to a map", "get the @ keyframes rule at the specified index .", "method to dynamically refresh the configuration of all destinations currently known about on this messaging engine .", "redeems the specified number of credits from the named bucket , if there are sufficient credits within it .", "the auxanalyzepath to use .", "tests to see if allocation of new objects should be allowed or not .", "shortcut for path path in values .", "paints the background of a button .", "create a subdirectory with a specific name", "adds a trace to the log .", "generalized forward composition ( to degree 2 )", "perform the xslt transformation specified in the constructor", "converts a memory relocated address to the same address in the unrelocated module .", "unloads all modules starting from the root module", "read an object from a byte array", "called when ok button is pressed", "returns true if the datastream has more elements .", "returns whether function calls clear all registers .", "set a field .", "use this api to fetch filtered set of vpnclientlessaccessprofile resources .", "add any relevant project dependencies to the classpath .", "initializes the settings of this standin based on the settings in the given", "invoked after the name of a debugger template changed .", "finds what id should be used for the next consistency check .", "this function tests the ripper setlog function", "accept directories and files matching filter .", "a function that generates random aes & hmac keys and prints out exceptions but doesn ' t throw them since none should be encountered .", "hides the sidebar", "create a old send request .", "write a vertex to a stream without writing its edges .", "sets the drawable that will be drawn above all other list content", "send the message to the server", "creates and returns a new tank", "serialize the given node .", "deletes file with given id from database", "create a batchinfo by using the inputstream consisting of classids .", "wires all declared fields to beans of the same name and type", "gets a hbase delegation token and stores it in the given credentials .", "transfers the specified certificate to the specified aws account .", "signs the post according to fb sig rules", "decodes four bytes from array source and writes the resulting bytes ( up to three of them ) to destination .", "update attribute in existing resource .", "consumes the given attribute and returns its trimmed value , or null if it was unset .", "coinbase transactions have special inputs with hashes of zero .", "creates a split element with a word but no linking morpheme", "apply an orthographic projection transformation for a right - handed coordinate system to this matrix and store the result in dest .", "map start serving method to gui components", "computes rfc 2104 - compliant hmac signature .", "post processes the result", "registers the mockitocomponentfactory that will mock all spork components .", "adds a module to the address space of the target process .", "this function finds the first big trade off the list .", "randomize the order of the list elements .", "returns true if the specified index has a keyboard accelerator assigned .", "( since linux 3 . 5 ) address above which program environment is placed .", "reads content from the provided input stream .", "fired when the request progress , override to handle in your own code", "comments are attributed to the thing the comment and are removed from allcomments .", "stage one merger of networks , returning the merged proto - network .", "create a new chatcompletionhelper", "adds a tag to this list tag .", "execute given the specified http method , retrying up to the allowed number of retries .", "returns a deterministic automaton that accepts the complement of the language of the given automaton", "spins / blocks until node s is fulfilled .", "this method is intended for internal use only .", "there is no - where else to put this .", "extracts the specified page ranges from a document .", "clear the screen of current context .", "look up the reviewer of the change .", "this will connect the specified unit to be an input to this unit .", "encode into a canonical string .", "easing equation function for an exponential t easing out decelerating from zero velocity .", "helper method to retrieve the line number on the other side .", "check if the current version ( chatty . version ) is different from the \" currentversion \" in the settings , which means a different version is being run compared to the last time .", "add all of the vertices to the graph without any edges .", "constructs a simulated motion event for the current stack scroll .", "returns true if both nominal values are the same if both attributes are nominal or if both real values are the same if both attributes are real values or false otherwise", "fire the given property change event .", "splits an array of nal units .", "logs the start of the processing of an revision task .", "extend the existing changeattribute with additional fields .", "creates the target system list from the config file", "called when an entry is removed from the space .", "sets the operation or entered by the user", "gets all the text including tags options and codes", "sorting current menu item by provided order property", "asks the camera hardware to begin drawing preview frames to the screen .", "as whether a given exception should be retried", "initialise the calculator using the existing value of k", "logs requests that took over slow request threshold ms to complete .", "construct a new instance of this test case .", "reacts to a pressed tab .", "list of errors .", "add a page to the cache .", "deploys resources to a resource group .", "get action type as tungsten actiontype constant convert our id into tungsten one", "read an pem encoded x . 509v3 certificate", "sets the name of this element", "checks whether the specific pr contains a comment with the expected body .", "caches every created preparedstatement in closure closure", "called for new values of a slider .", "generates an invokedynamic instruction .", "saves the editor content in a new file", "adds a classpath to this configuration .", "creates a new action object .", "filters provided query params to one starting with provided string key", "cancels operation launch by its tag .", "constructs a new empty path", "checks if given resource is invalid .", "@ override public void publish ( string address , rampbroker broker ) { _ brokermap . put ( address , broker ) ; }", "judge contains table in sharding rule .", "returns a bitmap of a given view .", "creates a column descriptor for sate column family .", "sends discarded event to each listener waiting for discarded lookups .", "get argument name", "creates a list item representing a detail page to be created .", "construct a new instance of this test case .", "test weather or not this dtofactory has any dtoprovider which can provide implementation of dto interface .", "updates the entry", "create the url", "reads a single module setting from the database .", "performs an update on a given resource with a supplied jsonvalue", "fetches and stores available logs from the given session and driver .", "returns state of the game", "get the default display field for this record ( for popups and lookups ) .", "prepare the next table for extraction by resetting the position and parsing column definitions", "creates a new dialog object .", "returns but does not remove next event from the queue if it exists or returns null if queue is empty .", "get the list of ursi codes in the array list of data arrays", "loads the shader object", "go through the fields in this class and add them to the field list .", "transforms a java util list into an equivalent chain of cons pairs", "this method calls proc deletebatch and deletes a record corresponding to passed batchid .", "queries policy states for the subscription level policy assignment .", "indicates the beginning of the name of an object member in the json input .", "unsubscribes from the catch up subscription .", "sort parts depending on constraint .", "get the current value of the given property , but without translating references .", "register a callback for when the player service changes its state and the ui needs to be updated .", "saves the validity state to the specified stream .", "helper method to obtain the content encoding from an file .", "retrieves a date from the result set .", "clear the specified cached list .", "maps point from the image s relative to the view s coordinate system .", "sets the name and version of the application", "converts the text of this gpathresult to a double object .", "registers interest in the input region name and list of keys", "map all characters in the range [ 0 - 9 ] to 0 in the input string .", "utility - apply the given function to each listener .", "read a single byte , protecting against various timeouts , etc .", "returns the current exception with prefix appended in front of the fault code .", "returns whether a particular permission has been granted", "creates a formatted output using the messageformat of all results", "determines whether a given reil instruction is one of the ternary instructions that use all of their operands .", "transforms the data", "creates a new directory entry representing the specified node .", "remove the current template name from stack", "send an event to other applications", "returns a boolean indicating whether this request was made using a secure channel such as", "invoked when the mouse enters a component", "radf4 : real fft ' s forward processing of factor 4", "write a long value .", "performs a binary search on the dividers array for the given number", "creates a new schema exception with the provided message and cause .", "instantiates a new saml metadata context action .", "reset the tree structure", "invoked after each graph build event .", "if the byte has the form xx then it s the first byte of a four bytes sequence character .", "adds new peaks to the panel", "invoked after a set breakpoint condition reply was received from the debug client .", "utility method to create a standard tile renderer layer ( without hillshading ) .", "getter for property postconstructcalled .", "checks the type of the word wrap and activates the correct type", "creates a new operation rejected exception with the provided message .", "process a single port _ event returns true if poller thread is requested to shutdown .", "write a pretty version of the node to the writer .", "converts repeating segments from \" short \" quartz form to \" extended \"", "checks the status of one or more asynchronous photo upload tickets .", "decrypt key ( does not use salting , so the encryption result is the same for the same input )", "paints the background of the header of a table .", "creates a new commerce discount user segment rel with the primary key .", "produces an array with a sequence of integer numbers .", "overloaded getresourceasstream so we can be sure to return the correct class file regardless of where it might live on our hard drive", "removes the characters in a substring of this stringbuffer .", "attempts to read the response text in the provided object as a json string and convert it to its corresponding jsonobject representation .", "display dates correctly in grid", "parses source code .", "returns the symbolic link depth ( how deeply symbolic links will be followed ) .", "tests the equality of this date with an arbitrary object", "this will search for the next time within the given datetimebarrier .", "generate documentation for other features of a given container .", "set a parent controller", "resets the internal state , but note that size does not change , and also counters are not reset !", "get a new long socket task serial", "computes the upc ean checksum on a string of digits and reports whether the checksum is correct or not .", "checks whether this node and its children are specified completely", "returns true if the replicator role is slave .", "sets the current spell check event that is being shown to the user", "returns a property change listener", "after performing the execute operation and making use of its return it s necessary to free the resources allocated for the statement .", "creates a container for a given configuration .", "get content value .", "updates an existing issue board list .", "an authority with the specified privilege .", "loads multiple comments from the database at once .", "build the panel with table of gear ratios distances", "copy the application stub into the bundle", "return day + offset ( truncates )", "find invocations of a certain method .", "returns true if this statementblock requires recompilation inside a loop statement block .", "this method allows a predecessor relationship to be added to this task instance .", "implementation of the file deletion", "reads the next line of text from the client at the other end of our dcc chat connection .", "set the x coordinate", "verify that we properly ignore operations on schemas including those with wildcard substitutions .", "asserts that the script runs without any exceptions", "adding wlst dependencies and setting main class .", "check for the existence of a certain mbean .", "write members to a mwswriter .", "updates the active filter according to the current user input .", "set the state back to ' pull to refresh ' .", "returns true if this field had encryption attributes configured .", "prints out the given debug message to system . out , prefixed by the calling class name , method and line number .", "configures the given column according to the binding info", "convenience method for generating a method signature in human readable form .", "creates a log record by reading no other values from the basic log record .", "sends the body to the specified outputstream .", "get purchase invoice good line utility .", "adds extension to the registry , making a default dynamicmessage if its type is a message .", "can this user see the given patchset ?", "stop the thread s execution by interrupting it without marking the flag as not alive", "returns a vector3 containing the largest x , y , and z values .", "prints the content that will be put before the auto - generated list .", "tests whether this list has any components .", "whether the given action is included in the filter .", "override this method too , when using functionalities like stableids , filter or collapseall .", "discards all changes hides the optionsdialog and resets the interface static color font", "positions the current slot right before the first index record matching the specified search range .", "a natural number is . . .", "gets the primary training for a specific skill", "insert a new element into the heap satisfying the heap property .", "loop , accepting new socket connections .", "disable chatbox and show a loading footer while sending the message .", "determines whether the point x , y will add a new point to the current pattern ( in addition to finding the cell , also makes heuristic choices such as filling in gaps based on current pattern ) .", "write an array of bytes to the stream", "shuts down the web server .", "get this object properties", "get the container level configuration about whether to disable the scanning for implicit bean archives .", "extract starting after the event id provided as an argument .", "send a sequential ack and selective acks for all of the queued messages", "print the intersection data volume information", "creates a new model object .", "this method transforms the input dimension from the device coordinate system to the world coordinate system", "this returns the removeall semantic aux text for the adapted class", "update the job update time updatetime .", "fires a comment event to registered listeners", "constructs a filehandler object .", "map the argument text into and integer using integer . valueof .", "provides an immutable snapshot of all configured traces mapped by name to their current values .", "writes a generic object to a file", "constructs a filewriterwithencoding with a file encoding .", "parse the given inputs to in - memory maps to allow for summarisation .", "returns a message frame", "deletes a project from the database .", "gets participant properties .", "allows multiple root scopes in the scope forest .", "alters the matrix a such that ,", "this method can be used to url decode the specified data .", "helper method for script calls without command arguments .", "sets the focussize", "consumes all attributes and returns a string representing the entire opening tag .", "helper method to load the index", "reads in null terminated list of marshalledinstances from which attributes are unmarshalled .", "return the number of items on the stack .", "register a serializer factory , keyed by the given method string .", "this adds a property descriptor for the noresize feature", "returns the logarithm of a for base 2 .", "returns the number of remaining archives .", "gets an instance of a class with the given name and ensures that the class is assignable to a specified baseclass", "read in the system properties", "runs the example .", "adds a annotation to the method .", "prepare a parser for a script with default bit order ( lsb0 ) use and special flags", "stops recording frames and saves the video file", "returns true if the result is pointing to a methodnode .", "since the crash that happens if we dont do this is complete garbage", "enables all breakpoints of a given breakpoint manager .", "adds a row to the table", "converts a dimensional array into a single dimension .", "case of error during processing : informations are accumulated to be displayed to the user .", "retrieves a resource from the pool immediately .", "move the physical binary data to this field .", "paints the background of an option pane .", "constructs a new field or method handle .", "setting up some test data .", "run a script identified by name with a single argument .", "notification that a message has been processed", "multiply a number by a character .", "chop i characters off the end of a string .", "returns true if more comment contains more characters .", "convert a time in the universal time scale into another time scale .", "can be invoked when a node has changed will create the appropriate event", "retrieve the json for a specific preset .", "destroys a session given the session id .", "write the contents of the given file data to the file at the given path .", "allocates colors for the section tool bar all the keys that start with", "rotate transformation about the x axis", "returns the entries , loading if necessary , and optionally updates their access expiry time .", "adds an image from the given file to the workspace .", "return the items as quest state string .", "initializes the definition class .", "if auto saving is enabled , do an immediate sync write to disk ignoring any delays .", "when scaling it to fit a view will not be significant .", "returns true if and only if this string contains the specified sequence of char values .", "adds a listener to the list that is notified each time a change to the data model occurs .", "thrown when bytecode library don ' t find classes .", "called after a list of members was moved within their parent type .", "sets the supplied calendar object with 0 values for fields lower than hour", "proceed to the connection with the oracle 10g database", "marshall the given parameter object .", "sets the value of the designated parameter using the given object", "void appendbytes const void bytes length nsuinteger length", "delete smb share in access zone", "initializes a new transaction by parsing a string of the form name date amount .", "this method builds an http message containing the specified headers and message body .", "adds the specified connection listener to receive connection events from connection .", "get the handle for ddl write operations", "returns a new started daemon thread running the given runnable .", "creates a transfer message sender .", "creates the get method for the given field definition", "get new physical connection , to be managed by a connection manager .", "sets the viewpoint of the transformation", "finds a users voice channel based on event and what guild to look in .", "gets a client connection to the given voltdb server ( s ) .", "connect to a websocket server .", "converts the statement in plsql", "public api , access to textual content", "draws a line", "get an axismodule by name", "list the distributions that are associated with a specified aws waf web acl .", "constructs a new map containing the same mappings and using the same ordering as the specified sorted map .", "read a string and return its boolean representation .", "getters and setters .", "sets the value in the cell at columnindex and rowindex to avalue", "we can also invoke parallelstream on a collection to fetch the stream", "instantiates a new jk empty report exception .", "this class cannot be instantiated .", "get bean in lazy mode ( if bean is null then initialize it ) .", "creates the sql encoder .", "creates a socket and connects it to the specified remote host at the specified remote port .", "this method is called via reflection .", "returns a classnode representing an array of the class represented by this classnode", "compares the given vector to this vector and returns true if both are equal", "append string that there is not default value .", "creates a new parseexception wrapping another exception .", "retrieves the work variance .", "add reviewers for new or updated changes .", "obtains an instance of bufferedreader depending on the file extension : if it ends with gz , zip , or tgz then a compressed reader is used instead of the standard one .", "add the given entry to the table if the symbol is already present throw a duplicatesymbolexception", "check if string value is a stopword", "creates & adds a checkbox - setting with a listener .", "adds fieldset entry , equivalent of : | tab _ name | fieldset # itemtype | multifieldlabel # itemlabel | value |", "build the next goal i e remove the unified terms join the remaining clauses and apply the unifications", "method will process the retractevent referably using an event queue", "returns the tip text for this property .", "execute query request and returns the response", "computes the mean squared error ( mse ) between the two images .", "called when the graph is about to inject dependencies into the given object", "when invoked by a derived instance , places the given call in a queue to be sent to the server .", "joins arrays using provided component type .", "decrypts the given input using a generated rsa private key .", "implementation specific methods", "this is a concrete implementation of this method inherited from the base class", "this method deletes the records from properties table corresponding to the configgroup passed corresponding to processid passed .", "writes the string", "this returns the property descriptors for the adapted class", "invoked when the user use paint tools to paint on the map .", "checks the message and its pkcs # 1 conformity according to the oracle type", "cleans up the gui interface after a firmware file read fails .", "gets a list of all supported properties for this model object , loginaccount", "destruction of the servlet .", "deselects all items and send selection event depending on parameter", "tests if the given character is present in the array of characters .", "registers an interface connection", "this is the secret sauce .", "decides whether or not we should update a name from o to n", "sends a request for the days with events to be marked .", "multiply this matrix by another matrix .", "this is the closure method for a set of items .", "remove c - style comments from a string aggressively", "when called before resizing the stage , moves the actor to match the same aspect ratio as before .", "set the account sid .", "limit the clip such that it fits within the specified region .", "draws the node border like rectangles", "converts a given string into a datagram packet .", "the billing product codes .", "convert a diff list into a pretty html report .", "return a path for an arrow pointing to the left .", "get an iterator over the instructions in the basic block .", "adds given geocascell to a table where label object pairs of cas view variables are stored", "have the player select an entity from the entities at the given coords .", "close the operator ' s resources .", "dump out all stop names", "convert a node containing a date formated as 2009 10 01t16 10 30 into an indexable string omitting the time of day", "creates the file named by this path and returns true if the file is new .", "renames a category of specified user", "throw exception if type array is invalid .", "determine if an uninteresting stream escapes at given location .", "if a misspelled word is currently selected in an editable node calling this method will replace it with the specified word .", "parses the experiment name .", "returns the superclass", "convert a document to a utf byte sequence .", "constructs a new copier using the passed in unsafe instance", "add a oid to the to the evidence of this feature", "returns true if the specific character is a base digit .", "set the fill paint", "get the current row", "flag that says whether instructions of this type are included in the current search results .", "a helper method which will extract the n - th generic type from a class node .", "marshall the given parameter object .", "initialise using default or existing values for k and epsilon", "scales the x to the zoomlevel and returns it", "removes the specified object from the array .", "checks to see if this creator has any additional valid items left .", "modifies this collection so that it retains only its elements that are matched according to the specified closure condition .", "called once before the mission starts - use for any necessary initialisation .", "decodes all envelopes contained in a netty bytebuf and forwards them in the pipeline .", "run a non - transactional ( only ) procedure on each live host .", "create the shape for the outer focus ring .", "calculate distance between two points in latitude and longitude taking into account height difference .", "returns true if this field has any options", "converts a string to an integer .", "validates parameters specified in the given statements .", "returns the number of bytes in a string", "method for sending a string to a specific destination on the other brick", "parse command line options", "locks the object ( synchronized ) before calling notifyall", "get the total time of the section .", "splits a string that encodes size with unit into the size and unit substrings .", "changes the comment text of a local comment currently associated to this edge .", "construct the k d tree from a set of double data .", "activate device in the internet if suc delete the negative device id device in local db", "executes a sql request .", "create an optional containing a list materialized from a stream", "add parameter to this panel .", "returns the height that will satisfy the width to height aspect ratio , keeping the given width fixed .", "verifies native font is accessible .", "write the buffer to a new entry in a bookkeeper ledger or throw an ioexception if we are unable to successfully write to a quorum of bookies", "sorts the specified range of the array .", "expect a failure with the given message info and fault code .", "checks whether the response associated with this page matches ( in iso - 8859 - 1 encoding ) the regular expression provided at construction time .", "using some super basic byte array lt gt hex conversions so we don t have to rely on any large base libraries .", "this method returns an invalid value", "decodes the percent encoding scheme .", "gets the option which should be preselected for the site selector , or null .", "is tinting enabled for the system navigation bar ?", "test parsing of enum definitions with single character .", "adds section handling for a specified relative level . . .", "cut the flowlayout to the specified num of lines", "remove a tracer .", "use this factory method to create a new instance of this fragment using the provided parameters .", "pop the next item off the stack", "merge series of adjacent elements which satisfy the given predicate using the merger function and return a new stream .", "creates a new connection tab .", "creates a file appender and adds it to logback .", "invoked after the comment of the instruction was edited .", "adds newobserver to the list of graph observers which is managed in this controller", "helper method for generating unique job / trigger name for the file scanning jobs ( one per filejob ) .", "returns a short descriptive name for the node such as arraycomprehension", "reads the contents of the given inputstream into a byte array , but does not read more than maxlen bytes .", "supply of a logging channel by the container", "returns a value from 0 to 1", "adds an acl entry to this acl .", "adds a expansion chane listener to this instance", "this adds the specified element to the prolog of the document", "creates a new array list and fills it with the elements of a given array .", "removes the critters that the player was supposed to kill .", "creates new empty shoppingcart object .", "writes the default serializable field value for this instance , followed by the registrar ' s service id encoded as specified by the serviceid . writebytes method .", "registers all addons .", "deletes the object from the rdbms", "removes any accumulated temporal metadata and returns to a default set .", "constructor for primary key", "logs the appropriate deprecation warning based on available information in the metadata ; will not log anything if since , message , and replacement are null .", "invoked after a resume reply was received from the debug client .", "sets the active editor for the delegate", "creates and sets up the slave with necessary information for it to dispatch to a remote aglet server and hopefully return safely", "moves the iterator forward to the next entry in the underlying map .", "check whether the given enumeration contains the given element .", "provides the filename known by the source for the specified download", "this method does not use complex regular expressions to avoid problems with compiling to gwt", "set an enterprise field value .", "stops an environment by stopping all resources inside the environment this operation can take a while to complete .", "saves all given entities .", "sets the extensions of files that are to be examined for ontological content", "enables or disables the button .", "converts the executableelement properties to typename properties", "generate the given object .", "initializes the data", "specify the actions that should be shown in the notification as buttons .", "determine whether or not to skip loading a collection .", "this method will be used to close all the streams currently present in the cache", "creates a class loader than can access all resources in all modules on the module path .", "get the bounding box overlap between the projected bounding box and the coverage data bounding box", "finds the index to start mark adjustments given some search index .", "lists the data lake analytics compute policies within the specified data lake analytics account .", "returns the content of the buffer as byte array .", "put an integer into the given buffer at the given offset as a 3 - byte integer .", "displays the location value fields .", "convert an argument of type ' arg ' to be passed to ' target ' assuring that it is ' functional ' .", "indicates whether this resource or any of its sub resources has been modified", "deletes the cp option category from the database .", "fill map maptofill with template data", "adds an object that is notified about changes in the project .", "debug image function converts an android image to a inscribed circle bitmap , currently wired to the test pattern .", "builds a fleetstarted waiter by using custom parameters waiterparameters and other parameters defined in the waiters specification , and then polls until it determines whether the resource entered the desired state or not , where polling criteria is bound by either default polling strategy or custom polling strategy .", "adds a detected validation exception .", "return new map entry", "you are not supposed to instantiate this class .", "handles a failure response .", "deletes a global comment from a code nodes global comment list .", "show image details", "executes a read transaction using the function code , register and count", "checks a given class .", "updates a server message block ( smb ) file share .", "checks if a class has at least one of the required annotations for mapping", "removes all items from the jcombobox .", "do not instantiate this class .", "wrap or cast an inputstream to a bitinputstream .", "gets the element at given position", "hide esp title bar", "set the mapping from the media content type to a view", "create an urlclassloader", "creates a new ldm instruction .", "convert an iterable stream into one first item of the stream .", "hit the test servlet to see if getgroupsforuser works when supplied with a valid user in top level nested group .", "this method returns rgba mat with frame", "constructs a writable font data object .", "finds the begining of the zkm blurb the end then removed everything in between !", "update the log4j configuration .", "tries to find index of given pattern at the given buffer .", "method getjdbcdatabaseselectlimit", "internal method to performs the tokenization .", "verify that the target object and the object we just deserialized match .", "creates a new refresh memory action object .", "each shapetype corresponds to a handler .", "starts the visit of a signature corresponding to a class or interface type .", "copy all files in a directory to one output file ( merge ) .", "init the animation and initial position and rotation", "scroll the layout to open , meaning scroll down to maxoffset .", "if true the prover will be launched for status checking only not proving .", "64 bit fnv hash .", "starts a new thread and connects to server", "creates a panel with a heading .", "returns latest version file or null if no version file exists", "can the address receive messages from us ?", "creates a type alias with the given fullname and nickname .", "checks how many invocations of backend code have happend inside the ui thread", "convert the specified string to an input stream encoded as bytes using the specified character encoding .", "equivalent to calling imageview . setimageresource", "get thing for given class and field name .", "creates the controls for this page", "combines two hash codes to make a new one .", "returns complement of this atomset with another", "initialize and do work where other steps need to wait for . . .", "create spherical polar coordinates from the given vector", "consumes a value from the input stream .", "translate a short access value ( all , local , none , no , yes ) to string type", "returns a field in a json object as a float .", "check if there ' s any update on the displayablelist and if so , removes the update header", "creates an array given a double array", "marshall the given parameter object .", "rescales the jlinetrace", "determine if the current value comes from an amendment", "appends segment to the end of currently open file", "this function implements sax mindist function which uses alphabet based distance matrix .", "returns the index of the least significant zero bit in the specified value .", "import the i _ product _ bom records to pp _ productbom table", "decode a json document to retrieve an boolean value .", "increments the offsets of all members which have an offset startoffset .", "check the model is consistent or more accurately search for inconsistencies", "executes a search operation .", "get the task entities in the specific component", "sets the specified key / value pair in the global scope .", "upcase first letter", "replace data via patch extension .", "constructs a new instance .", "get the start position of a filename in the message", "sets limits on the size of the fontdata .", "creates view edges for all edges in the passed functions .", "closes the iterator handling null and ignoring exceptions .", "retrieves the value of the designated column in the current row of this resultset object as a short in the java programming language", "sets the index of the specified page to the specified number", "private from xml methods", "removes a listener object from the debugger synchronizer .", "called to validate add params .", "writes an integer ( 32 bit ) to the target stream .", "creates the consumer threads , in a quantity equal to the number of available processors , since the producer ' s job is small enough that having more threads than processors will not be problematic ( they are also not active at the same time at least half the time ) .", "returns only the resource names starting with the provided sitepath .", "creates a national number from a number string", "compute the minimum of two values", "adds a trace event to the end of the list .", "factory method for creating a source line annotation describing the source line number for the instruction being visited by given visitor .", "whether the given time is in the clip of this audio element", "gets the end line number of this location .", "returns true if the properties were loaded , otherwise false .", "set the expiration date .", "the list of saml provider resource objects defined in iam for this aws account .", "creates an idquery using the specified type , id , routing and query result type .", "remove and return inode with minimum score value", "starts a new discovery from all found network interfaces .", "scales dimensions according to incoming scale .", "causes the reducer to ignore exceptions and just sum the results that succeeded .", "register a after routing request interceptor", "parse the key provider info in the provided bytes .", "parses the input stream of content with a default encoding of utf - 8 .", "tells whether a given type is a void", "gets the value at row x col in the table", "get the offset for the given name record .", "apply styles on styleddocument using regular expression", "takes special consideration for assert", "retrieves all existing loggers .", "convert a date to a calendar .", "creates a new action object .", "action to start listening messages sent from a specific agent", "returns whether or not logansquare can handle a given class .", "is called on every spec event .", "initializes all internal listeners .", "sends renew event to all transaction participants", "translates a java instanceof expression", "returns true seaglasslookandfeel is always supported .", "any promises must complete .", "ask this uri if it was a success or not", "builds the configuration zip file .", "mutates a where object to implement the desired narrowing filter .", "general method to create a coordinate from a gpx point .", "returns true if the filename that was passed is one of the directory artifact names .", "this method demonstrates the skipping function", "gets the nth added flag bit", "remove a modification from registry .", "gets the face culling for this appearance component object", "returns the previous element from the collection .", "create job with given argument .", "constructs a reference type .", "sets the given property control to be the control for manipulating the materials property", "set the value of the name property .", "gets the reward structure as an xml string as defined by the schema .", "write strings and a newline .", "runs the algorithm in the timed evaluation part .", "returns map > as built from the uri ' s query portion .", "returns true if we dont have the given piece yet", "add an award emoji for the specified note .", "creates a less - equal - than - number parameter constraint .", "all attachments , as attachment objects .", "finds the position of a substring within a string ignoring case .", "check whether the given string can be a name", "cancels the lock heartbeat task .", "return the number of the blog entry records", "tmpl . serviceid null and tmpl . servicetypes is empty and tmpl . attributesettemplates setidx . fields fldidx ! null", "zips an entire directory specified by the path .", "initialize the class", "return a calibrated clone of the covariance model .", "returns map > as built from the uri ' s query portion .", "returns an enumeration describing the available options .", "split the given natural language text into a list of sentence objects .", "get a desaturated shade of an input color .", "create the appropriate component and add it to the grid detail at this location .", "check that executing the specified query results in the specified error .", "determine if there are more instructions in the same basic block .", "the stream result message is a partial or final result from the target ' s stream .", "parses out the firebase database url from the client - side code snippet .", "retrieves the subword of this word starting at the given index and extending until the end of this word .", "copies entries from one map to another and deletes those entries in the target map for which the value in the source map is null .", "update invoice totals after its line has been changed / deleted and taxes lines has been made or after tax line has been changed ( invoice basis ) .", "compares two version strings of format x . y . z , where x is major , y is minor , and z is maintenance release .", "internal helper method to properly position buffers after encoding up until an overflow .", "converts an openshift build name into a service name", "returns the keys of the map .", "for more info on transaction api go here", "if users choose to custom format the stats", "show manage campaigns", "creates a new narclassloader .", "move the selected item down", "extract most frequent sense baseline from wordnet data , using ciaramita and", "mutator method for xcapitalgain3", "returns an array", "clear the text area", "tries to find the given script either user - specified or detected", "starts the packing scope without adding any item", "returns the index of object if present , else - 1 .", "creates a java . awt . image .", "this class analyzes the composite image from the camera and network", "adds all of the elements in the specified collection to this set .", "inserts length dummies before the specified position into the receiver .", "return the image width", "marshall the given parameter object .", "sets the proxy name", "performs an action on onerror with the provided emission count", "verify ability of multiple threads to issue localhost ping calls without serializing even when the ping call is to an unknown host .", "pushes the specified amount of characters back into the input stream .", "this method sets the value for the peptide to proteinid column", "if the normalizedscale is equal to 1 , then the image is made to fit the screen .", "creates a new node chooser object .", "called to indicate that an image timed text need to display", "negates the inp value", "jumps directly to a specific state .", "read 2 bytes unsigned at position pos without changing current position .", "native key generator implementation .", "creates a new action object .", "generate default message keys where uppercase characters are preceded by a and lowercased", "lets wait until there are enough ready pods of the given deployment", "load a collection of parse trees from the file of given name .", "as we can not function once we have lost the objectmanager .", "parse tracer key", "wrap the method invocation in a stateful retry with the policy and other helpers provided .", "visible for testing", "adds all target volumes ' snapshots to the target consistency group", "returns title for the current locale", "verifies that the observable emits an error that matches an specific type .", "removes the specified element from this set if it is present .", "fire item change listeners for a specific relativeroot", "removes an available role", "turns every whitespace character into a space character .", "returns core for this path if exists , otherwise return null", "from an object map passed in , building a key value set , properly html formatted for used in reporting", "sets the financial data of any house of the property", "pops a value from the operand stack of this frame .", "outputs the maps as elements .", "close a project from the workspace", "add a class location", "marshall the given parameter object .", "method executed in a separate thread created by the task manager", "judge whether arr is equal to str", "adds all individuals from the given collection .", "filters and orders the passed externs for the specified environment .", "updates all checksums with the specified array of bytes", "returns the properties object for this graph grammar", "returns a flag that indicates whether search result iteration passed the last search result .", "compatible for older callback interface in . or older .", "does a execute function on a server using connections from the given pool to communicate with the server .", "selects all input types that potentially satisfies the bounds on the argument .", "applies a single threshold to a block of pixels .", "fast calculation of min / max if no utility is set .", "returns true if the association between the two entities is many to many", "prepares the keyboard event handlers appending them to the the given", "visible for testing .", "set cookies for the rememberme feature", "prints a stack trace out for the exception and any nested exception that it may have embedded in its status object", "rate all the statist in the list", "method used by background thread to check the jsp dependencies registered with this class for jsps", "returns a groovyrowresult given a resultset .", "search external converter by id", "performs every composed consumer", "creates the sql encoder .", "computes a homography matrix from a rotation , translation , plane normal and plane distance : x [ 2 ] = h * x [ 1 ] where x [ 1 ] is the point on the first camera and x [ 2 ] the location in the second camera .", "performs generic data validation for the operation to be performed", "output the xml trailer into the output stream", "returns true if any remove or clear method is called since creation of this vector or since last call of the method setunchanged", "scale the rates of a subtree and return the hastings ratio .", "convert int array to integer array", "creates a function node in the view .", "appends an inport to the list of inports", "returns the matrix cell value at coordinate index", "sorts a map by its values , using natural ordering .", "creates a union wrapping a value", "a slash and those that don ' t .", "initializes a filter if needed", "finds a template from the given templates list that matches the given label string .", "build a url request for a tile", "indicates whether this dashboard has at least one item .", "changes the id of the task iv trkorr", "verifies if the give locale is in the java list of known locales .", "this method is used internal to mp only and is used to register additional destination change listeners that are need as well as the main mp listener registered at startup .", "tags all selected nodes of a graph with a given tag .", "fills banking info model for contractor", "asserts that the actual pivotfield matches the expected criteria", "returns a string from the buffer .", "check strictly user permissions on an entity .", "generate a diffie - hellman keypair using the specified parameters .", "returns the name of this gpathresult .", "this returns the label text for the adapted class", "perform initialization before each test", "initializes with a resource for text rows and autocomplete query bounds .", "search for notifications originated from the given source object .", "removes all jinglesessionstatelisteners", "adds a new system .", "output connectionfactory method", "decode base64 encoded data from the inputstream to the outputstream .", "clears the istrue isfalse flag and sets variable to an unbound state", "record in the codecontext when we visit an enum constant declaration", "generates categorymap for generatebreakiteratordata .", "this function calculates the cartesian product of two string lists ( treated as set ) , and removes the duplicates in the results .", "removes leading and trailing empty lines .", "initializes the upper plot .", "put message into a change edit .", "get the best guess for the command name .", "level precedence test text html level is higher than text html", "dumps the content of a resource into a list , where each element is one line of the resource .", "sets a property in this bean to the specified value .", "returns the controller to use in the plugin selector ui", "adds a list of pupils to cache", "returns the cp definition virtual setting matching the uuid and group .", "update background to default image", "creates a new refactoring history implementation .", "recover only from primary in failover group .", "constructs an replicationfilterexception with the specified detail message source and target member .", "creates a new node synchronizer object .", "returns whether this operation is able to perform on the fly auto renaming of resources with name collisions", "add a custom transformation to be applied to the image .", "remove the specified class loader", "helper method to create customerreview", "paint the component on the gui", "set the generalname as uniformresourceidentifier note that the", "creates a new tab button object .", "update style and text .", "returns a list of the values in this array in document order .", "returns the forward for the corresponding fixing time .", "same as tostring , but without curly braces", "parse a list of objects from a jsonparser .", "implement the rule that foo & bar = = nothing if there exists some enumerated type baz with baz of foo | bar", "makes the method run sleep for an interval of time", "we need to make sure that compaction is written * before * the compacted deltas are deleted .", "internal convenience method determines the archive type from the filename extension .", "discard notebook from the model without knowing its folder", "returns whether more chrono storage blocks are available .", "validates a condition , throwing a runtimeexception if the condition is violated .", "bind the given collection to an already existing query source", "create digest for each entity values passed in", "returns length of string .", "clean the session at the end of the slo process .", "the code that does the real work of renewleases .", "creates a namecomponent [ ] from a name structure .", "the tags for the definition .", "creates a lightweight representation of the session state .", "prints the table to a file", "returns the straight line separation in pixels between the specified points if separation is equal to or less than the specified tolerance amount , else returns double . max _ value", "returns true if the map is null or 0 - length .", "converts a length from a css length to ' px ' .", "adds a new cluster to the collection", "returns a list of the nodes children .", "our mcolumntops and mcolumnbottoms need to be re - built up to the msyncposition - the following layout request will then layout the that position and then fillup and filldown appropriately .", "reload image from a file", "checks whether the given namespace has been published .", "prepares this progress helper for use .", "create the code generator with types to generate", "a string builder that can be used to construct complex names for example .", "returns number of attributeentries in group", "translate an input onto a writer .", "this method will be invoked when the current page is scrolled either as part of a programmatically initiated smooth scroll or a user initiated touch scroll .", "verifies the name do we really need this ?", "called when a component that is needed , and not available with an appropriate iterator from the beancontext .", "checks a given class", "add this table link to this query .", "returns true if , at the current time , the named event could be generated .", "returns the current session id", "interpolate between two color values by the given mixing proportion .", "return highlightstyle for css class .", "computes the value of this number raised to an integral power .", "handle the given request .", "execute the jpa translated expression tree .", "writes an array of bytes .", "replace existing spannable with smiles", "sets the number of rows in the model", "helper method for logging both for custom logger and for notifier .", "writes the concatenation to the attributes", "processes the presence packet", "get the anchor of the joint on the second body", "gets current date and time formatted as iso 8601 string .", "build y axis", "checks if file could be read or created", "sets the counter support instance", "convenience method for parsing the named required attribute as a integer value or reference .", "return the minimum element in a range using comparison functor .", "adds the variablelisteners to the ind", "set the source of jdbc connections , overriding any configuration supported by these methods :", "creates an new synchronizer from the given odataentry .", "scans the directory for new files .", "receive notification of the beginning of an element .", "checks if is intrinsic", "saves the object given into dynamodb with the condition that the hash and , if applicable , the range key , already exist .", "remove a query listener .", "get string representation of a type including generic information", "rotate bytes as per the \" rrc \" ( right rotation count ) received .", "this method responds to a click within the calendar widget", "prints error info to the current errorlog", "copy a set of local files to a remote directory , uses the specified mode when creating the files on the remote side .", "gets the number of images tagged with the provided { tagids } that have prediction results from training for the provided iteration { iterationid } .", "selects the minimum value found in an array of items so min as object .", "checks if filtering has been done", "this function is called whenever the dbfield is about to be written to the database", "compares two stun attributes .", "removes a single individual .", "prints a byte literal", "automatalib graph api", "constructor for primary key", "write each long value from a long value array into the session stream .", "signal that the task should end .", "evaluate the goodness of fit of a given tree to the original distance matrix .", "initialize with a fixed reference date", "determines whether the converter can marshall a particular type", "creates a union wrapping a value of the fourth type", "if displayname is specified return it otherwise return name", "increment a calendar by one day .", "provide this adapter name , if it ' s available on this system .", "return this as a parameterdeclaration or throw an unsupportedoperationexception", "returns a subset of association requirement filtered by type", "gets percentile value .", "set value of editor", "creates an hdinsight cluster extension .", "determine if this problem is more severe than another .", "create an xmlreader that resolves entities using jstl semantics .", "returns the position of the currently playing video in the playlist", "compare two solutions .", "starts the difftool application .", "test 9 querydindex", "in cblforestbridge . m + ( cbl _ mutablerevision * ) revisionobjectfromforestdoc : ( versioneddocument & ) doc revid : ( nsstring * ) revid withbody : ( bool ) withbody", "clone all of the buginstance objects in the source collection and add them to the destination collection .", "get suggestion examples that would improve the accuracy of the entity model .", "encrypt hexa to string", "sets the prefwidth and prefheight to the specified value .", "create an emptry trie .", "parse from the given source .", "properly evaluate the equality of two primary keys by comparing values for each part of the composite key", "move a local file to hdfs .", "performs escaping of special xml characters .", "creates a new drawer instance which can be used to draw the process specified in the model .", "creates class visitor to instrument for coverage based on configuration options .", "produces the subnet sections whose addresses are found in both this and the given argument .", "displays the search patient form", "outputs confusion matrix in an html table .", "adds a new observation with the specified value and group .", "reads library data from the given stream .", "generates provider source id based on provider entity id .", "compare the relative fitness of two sets of parameter types in terms of matching a third set of runtime parameter types , such that a list ordered by the results of the comparison would return the best match first ( least ) .", "splits the given string using as separator the separator character .", "returns the html content of the given element and container .", "calculate checksum over the page", "gets icons theme name", "causes the user interface thread to sleep that is to be put in a state where it does not consume cpu cycles until an event is received or it is otherwise awakened", "inserts text at the end", "gets the literal word that represents the first 31 bits of the given the word ( i . e . the first block of a sequence word , or the bits of a literal word ) .", "search through the messages for this one and return the element name .", "clears the menu .", "removes display m strname from nameaddress if it exists", "delete any other restaurant that has the global id and move its reviews to the restaurant .", "creates an injector for the given set of modules , in a given development stage .", "checking ipsec status against the entire system .", "check whether the present commandtaghandle object represents a commandtag that exists on the server .", "registers a k / v state information , which includes its state id , type , rocksdb column family handle , and serializers .", "post the runnable to run on android ui thread with the given delay .", "puts the discoverer into an operational state .", "sets the cn3dglmatrix m9 value for this cn3dglmatrixtype", "stops the executing thread but does not kill the thread .", "helper method to unsubscribe from subscription", "this function clears the committed inventory list from 4 to 14 days", "returns a new element info for this element", "used to zoom out of the map page", "add a conversion error message in the case of a propertyeditor based conversion error .", "clears the documentscache of all bizview files", "generates xml corresponding to extended properties", "pops a closure expression from the closure expression stack .", "replaces the given drag - element with the given container element .", "this adds a property descriptor for the ref requirement feature", "gets the field at the specified index .", "to draw the collision tree of nodes used in execution class", "returns the action object for cut", "creates a new empty view in the view container .", "handle single nal unit packet", "determines if the alert should be evaluated or not .", "performs some processing on the given item .", "returns the scoring type for this sectionmarkernote", "stop the movement", "retrieve the dsc node report list by node id .", "called when the activity is first created .", "print the the trace of methods from where the error originated .", "set the value of the rev property .", "creates a new resume reply parser .", "assert the total number of bugs in the given resource .", "creates a new string reader .", "sanitize special characters which could impact the import process", "generate constructor s field s and instance s", "dispose all of the cached cursors .", "highlights the border of a node .", "lifecycle recursive callback for the managed listener .", "constructs a default parameter adds it to oper and sets its type return etc", "called when the associated filter options were changed", "transitively propagates effects of a size change of a single base type through the type system .", "return whether or not this is the special top dataflow value .", "unfold the layout without animations .", "execute not in query", "set the value related to the column fee", "write the content to files", "converts a given byte block to comprehensible hexadecimal string", "enforce a lexicographic ordering on two vectors of integer variables x lex y with x and y", "default implementation of hashcode for remote objects", "add given socket and cpeer to the watched objects response group", "display a table of property values .", "add number list word number collector bundle .", "writes a string into some debugging place", "sets the content handler .", "returns if the given file is not null and exists in the file system", "checks if the given epptransfer has the same cltrid as this one", "obtains the background color of the card view , which contains the currently shown preference fragment , when using the split screen layout , from the activity ' s theme .", "factory method to unmarshal ( read ) a xml content definition instance from a given xml schema location .", "sets the amount of time to delay before attempting to reconnect .", "this method ensures that during deserialization the instance variable will be referred to and possibly modified so that extra instances more than necessary dont get created", "returns the point equidistant between the two provided lines", "creates a fullvisitorcontext instance .", "marshall the given parameter object .", "splits this string around matches of the given separator .", "deletes the cp rule from the database .", "disables el evaluation for this resource .", "allows parent to know if the animatio is on or off", "combines the values of the promises into a promise of type r by applying the specified function .", "return this as a methoddeclaration or throw an unsupportedoperationexception", "modified mob is being hurt", "saves the viewerimage to a file", "can this user add a patch set to this change ?", "initialize the class", "initializes the input frame of the first basic block from the method descriptor .", "return this as a interfacedeclaration or throw unsupportedoperationexception .", "write the single line reports of all queues in the iterator to the writer", "this method returns the property value as integer", "set the radius for each corner", "return an iterator over namevaluepairs .", "handles the color button", "reads the next token from standard input , parses it as a boolean , and returns the boolean .", "gets the first short value", "updates the average with the latest measurement .", "compute the point of the instance closest to another line", "print the size of bytes in bb", "creates a new dependency .", "deletes the publish list assigned to a publish job", "clear or set to false all persistent dimensional ( not option ) properties for this object .", "return the operator for the index", "takes a set of strings and builds a single comma - seperated string of streams out of it .", "base64 - encode the given string as a string .", "write the trajectory data to a tab delimited ascii text file", "the variables here are used only to determine which columns are discrete and which are continuous ; bounds checking is not done .", "query by feature table name", "replace all occurences of a substring within a string with another string .", "gets the methoddescriptors of the specified context class", "calculates the distance of given point to one of the rect edges .", "ensures correct size of the widget .", "checks for aliases that contain a do not follow / process priority .", "utility method to construct the statistics for a series of values .", "attempts to guess the number of bins to use", "function to determine which clients are allowed to initialize", "checks if two calendar objects are on the same day ignoring time .", "builds a new placementtask with the specified stage and isdirect boolean .", "appends a condition", "called on the start of each build , giving extensions a chance to intercept the data that is written to the log .", "configure the draggable target to accept a component", "create the given directory and all its parent dirs", "adds the protocol if missing .", "start javaprocess export ijavaprocess as remoteobject and bind to executer registry .", "performs in order traversal from a given node in a particular direction until a node matching the specified filter is reached .", "deletes all level series in the persistence system", "this method attempts to use jaxp to locate the sax2 xmlreader implementation .", "add an item to the shopping cart , or if already there , increase the quantity .", "get the element wise stride for the shape info buffer", "treat mouse wheel rotations like slider - handle drags .", "appends a comment to the list of global comments of this instruction .", "flushes the stream and checks its error state .", "return the timestamp associated with the last performance counter value", "returns the next revision information .", "picks the only installed oauth provider .", "calls the paint method for all is children components", "calculate the electronegativity of orbitals pi .", "called when the internal state has been changed usually by the user pulling .", "convert in fix expression to post fix .", "log a config message , with one object parameter .", "describes the resource using content negotiation to select the best variant based on the client preferences", "should this template be replicated .", "map from storm tuple to stream event .", "a bundle is removed .", "pushes a new type onto the output frame stack .", "gets event that was read or which triggered the subscription .", "get the length of the mime names within the property value", "count forward until the given node is found , or until we have looked to the given amount .", "waits until the count gets reduced to zero , and then all threads waiting will get to run .", "called when this board is rotated in y direction .", "puts character at index", "rounds the x and y values of this vector down to the nearest integer value .", "start the compare disks wizard", "clears all elements from the queue .", "retrieve the name property", "add a switch with the specified value to the end of the command line .", "generate the xml payload and write it to the xmloutputter", "method that checks if there are unsupported critical extension .", "implementation of the file deletion", "called to bind the viewholder at the given position .", "to visit a node", "finds a range of unreserved rop registers .", "convenient factory method that creates a new instance of this class .", "update the corners of this colorpicker so that it wraps all of the colors it holds", "formats an double representing a quantity into a string", "unpacks a file to the directory contains the file via archive getabsolutefile getparent", "metodo que encapsula o metodo isuserlogged de gerenciador de sessao", "invalidate the target nodestate", "shows a long toast", "returns the remote client ' s inet address .", "close an array of statements if they are not null", "returns true if object less than other ; false otherwise .", "get the shared object", "moves the cursor to certain position .", "reads the xml - serialized object from a stream", "locates and processes all persistence . xml file in a war module .", "flatten a list of parameters and perform a query to fetch all objects from storage .", "return the internal collection of users assigned to this task", "executes to completion the bizview whose execution state is contained in the isessionstateregistry provided", "rebuilds the solr index - auto run .", "seeks relative to the beginning of the iff output stream .", "updates a binnavi database if necessary .", "create a lock object allows the filelock object to be extended", "removes a document from the database", "executes the transactional command .", "constructor get tablename from table", "calculates the levenshtein distance for a candidate paraphrase given the source .", "returns true if the item with identifier is a new item , meaning that it exists only in transient storage on the session and has not yet been saved .", "creates a new account with the provided name and password", "returns the result of a full match between the template and the string .", "bean based input for pretty printing", "get the validity state of the policy rights graph .", "internalxbasewithannotations . g : 833 : 1 : entryrulexcollectionliteral : rulexcollectionliteral eof ;", "samples the 4 grid points around v and performs bilinear interpolation", "create a new and specification .", "this method adds a variable for a given configuration", "sends the specified request through the specified access point and registers the specified responsecollector for later notification .", "checks whether any of the input arguments is null and throws an exception if it is .", "it builds a ftp communication channel .", "create a linking morphemes object from a list of morphemes", "deletes the record without checking the version .", "remove an already writte value from writeset", "return a list of all fields", "overridden to pass the new rowheight to the tree .", "sets the target width for this label .", "removes a previously - added footer view .", "astarnode wrapper for isviable", "creates a resource specified as a json object .", "retrieves the membership list of an event", "sets the value selected in the sort select box , if possible .", "check whether the file and its chlidren have been created modified or deleted .", "gets the value of the cnumericedited1 property", "creates a new error connection closed synchronizer .", "internalsarl . g : 8973 : 1 : entryrulexunaryoperation returns [ eobject current = null ] : iv _ rulexunaryoperation = rulexunaryoperation eof ;", "returns number of nodes in tree structure", "a utility function to close an output stream without raising an exception .", "parse a json data structure from content at a given url .", "load given project file .", "returns an int which is the limit codepoint minus 1 in row rowindex .", "stops the component and closes all connections", "set up the essential render states", "adds the given package name to the list of known package names .", "find the osgi bundle id of the given service", "this helper acts as a closure around the indexmanager and updated cf data to ensure that down in memtable ' s columnfamily implementation , the index can get updated .", "decode and sample down a bitmap from resources to the requested width and height .", "open a workspace from a file .", "adjusts a non business day to the appropriate near business day with respect to the given convention .", "get the type of the wrapped object .", "add attributes from namednodemap to the list", "returns the uri variables needed for a get corp notes call", "launches a url .", "returns the subject string to be sent with this request for an automated", "add or update keywordset identified by thesaurus name .", "splits the given line according to the given separator pattern while only those separators will be regarded not lying inside of a quoting string .", "you are not supposed to instantiate this class .", "perform a multi parental crossover between this object localbest and globalbest", "initializes the basic protocoldescriptor fields .", "takes a document and evaluates an xpath expression on it .", "returns true if it is possible to initiate file transfer to the contact specified by the contact parameter , else returns false .", "store the actual observed host status .", "sets a goal and its arguments to this prolog thread", "try to set the double value .", "setter status of pause motion animator", "updates the glyphs in an existing line", "calls dbs moveto method", "responds an error with an specific condition .", "writes a stuffed or non - stuffed byte to the underlying output stream .", "marshall the given parameter object .", "the doget method of the servlet .", "load a language file", "uses the passed in collider to collide with all other geometry types", "set a user metadata entry .", "bind block values to names based on prepare signature", "download a file at fromurl to a file specified by tofile .", "sets the check state of all elements", "add the specified point into a newgroup .", "creates a new root node that points to the two specified child nodes and return the path to the new root .", "this returns the sourcevarid label text for the adapted class", "get diagnostics categories .", "adds a data set to the graph", "creates a view using the specified type expression and result type .", "marks the document as deleted", "copies the given source array into the required column number of the destination", "updates whenever a newer thing has been select0red", "checks if ignore profile is enabled .", "invoked after a write has completed to update the buffer positions and release any substituted buffers .", "invoked after the color of a type description changed .", "reads chars from the current position into the specified char array starting from the specified offset and increases the position by the number of chars read", "sets up regex parser", "find all the channels that came into existence before startup .", "sets the resource file containing compile - time globals .", "a list of campaigns .", "sets or removes a breakpoint from a function node .", "simple check for whether the binding contains a particular variable or not .", "you are not supposed to instantiate this class .", "sets the http statuscode", "verification of signature", "an array of faces that were detected in the image but weren ' t indexed .", "try to add a taskmessage to a batch", "directly start monitoring css for the given stage .", "sets number type custom metadata property .", "converts a double value to a byte .", "returns the largest power of two divisor for use in downscaling a bitmap that will not result in the scaling past the desired dimensions .", "this function registers a udf using volttype values for the return type and parameter types .", "copy the current data to the settings .", "appends the string representation of the int argument to this string buffer .", "determine if this method name suffix is a legitimate bean property name .", "utility method to locate def", "abdicate ownership of dom objects .", "searches for a xpathfactory for a given uri in a meta - inf / services file .", "convert a bytebuffer to an ardor3d image", "constructs a scrollable iterator over the given entity name .", "sets all the fields in one go from two instants representing an interval .", "validate and change chosen consistency check method if needed .", "returns text part off xml element , if found for requested language ( ' xml : lang ' attribute = = requestedlanguage ) or with ' xml : lang ' is equal \" en \" ( english ) or with ' xml : lang ' attribute equals to this from the first ' subject ' element or the text from the element with out any ' xml : lang ' attribute or null if element not found", "an error handler will receive an action event with the source exception from the edt once an error handler is installed the default codename one error dialog will no longer appear", "test if all elements of the array are null .", "exit the inner - most scope , remove all keys created since the matching enter call except for the listed keys .", "an extension point allowing the behavior of resource closing to be overridden in derived classes .", "paints this jlayeredpane within the specified graphics context", "send the closesession packet .", "reads configuration and parameterize it with given values .", "adds an element to the document", "returns a hash code based on this entitys identifiers", "handles edit realm request .", "sets properties to dialog components", "write a poly to the link .", "it happens before the dto data be retrieved from database", "prints the labels received from the vision api .", "insert records to temprecordfile for sorting at most one block long", "appends data to the log file", "deletes the specified git repository from your account .", "reads a position expression", "returns a populated struts actionform", "check if the value is less than or equal to a maximum", "change this should review account . java", "constructs a paged - results response control .", "this implementation of nativetojava converts a platform specific representation of html text to a java string", "a faster convert that works directly with a specific raster", "returns a stream to write record contents .", "prepares allocates a set of transfer buffers for use in transferring data from the tuner via the bulk interface", "loads reports accessible by context role .", "extends the name space prefix with the actual name space", "marshall the given parameter object .", "creates new directory if necessary", "asynchronously logins this user with password and registrationid obtained through gcm .", "creates a new write memory command .", "inserts an object in the queue", "helper method to define reflector classes .", "gets the maximum area that the barcode and the text , if any , will occupy .", "gets the line3 field of the address street element", "serializing cod the serialized data structure consists of key value pairs unless the value itself is an internal array or a map in case of an internal array or map the value itself is another array with its initial value myfaces . internalarray , myfaces . internalmap", "update automatic tuning properties for target database .", "return the css style s to be rendered for this component", "returns count of items in the list", "two instances are equal if they have the same name", "returns a set of edges that this graph inclueds", "maps a container index to a ring buffer index", "associate the specified tagoption with the specified portfolio or product .", "combine entries if the size of the list is too large", "populate the recycler view with the relevant data .", "this should compute a legacy api1 camera id for the given camera2 device .", "returns the authenticationprovider having the given identifier .", "yield given a clean price and settlement date the default bond settlement is used if no date is given .", "creates a threatresult given data from a method .", "add a bookmark listener to the list of bookmark listeners .", "parse the apk file path xml element", "receive notification of character data", "convert from nmea format to decimal ( there is already a method in location so this is not really necessary )", "returns true if this location ends one character before the other location starts .", "return the integer form of the enumerated .", "returns a new instance with the union of the header expressions from \" this \" and the \" other \" instance .", "this method returns the history at a particular history", "set whether or not compression is desired", "computes the squared euclidean distance between the given tuples", "creates a new logger .", "dismiss and clear progress dialog field", "know if this is the default instance .", "add mimetype to the order by clause", "clears edit text for the specified widget", "checks whether the debugger can terminate the target process .", "create a new pdfxref given a sequence of bytes representing the fixed width cross reference table line", "determines whether one object mutates to the other object .", "fills the buffer with the contents of the document starting at the given offset .", "adds a content row to the table .", "logic for handling checkpoint flushing", "executes this procedure .", "return children of the first widget ' s panel .", "return the necessary informations to open a vnc connection to your vps", "provides details of the new selection including the start and ending character positions and the id of this rtedittext component .", "set get the damping ratio dimensionless", "stops the sample fetching thread", "sends the no argument fcd command .", "check if sound works at all", "updates the view", "returns a new string of a given length such that the beginning of the string is padded .", "add a new query entry", "adds a string constant .", "call the specified unit without parameters", "the along track distance , is the distance from s to q along the track s to e .", "departure or other codepath not specific to unlock requires that we cleanup suspend state that was already permitted to request .", "replaces the specified data value with the new value saved in the log record .", "generates a new local id for this feature based on the current time and a random number .", "checks if a node is an end node of the way ( i . e . either the first or the last one )", "executed when user has changed any field in a view", "compute short rate from state variable .", "registers a listener to receive notification of category item clicks", "configure the device to an ap accessible to internet and make the device activate on server", "allows you to set the info text for a specific callback .", "adds a pair to the map", "adds a kernel to the list of available kernels", "check if node is accessible and user on the node has sudo rights , and node is able to communicate with puppet master .", "reads a project setting from the database .", "get the file name from the recent list by index", "a convenience method for creating a synchronized sortedset .", "reinitialise all the data members", "gets the size of each element of the given array class .", "marshall the given parameter object .", "add an horizontal spring between ( x1 , y0 ) and ( x2 , y0 ) to the given path object", "unregister listener used to catch playlist events .", "indicates whether this category has tasks assigned or not", "callback from method tmpl", "reads up to \" \\ n \" from the ( unchunked ) input stream .", "sets the x", "logs the receival of the start signal .", "levenshtein distance for two strings .", "method that provides a check for utm zone letters .", "check that the block size is a power of 2 , in the right bounds , and return its log in base 2 .", "adds the vertices of a number of triangles to form a rounded corner .", "gets the stream contents as a string .", "is the number negative ?", "checks if the vlc instance is running", "remove an component from being managed", "delegate to the editor", "returns the position within the internal buffer .", "create a stemmedstring from one charsequence ( original ) and one string ( stemmed )", "applies this schema rule .", "sets the reconciling value on the builder .", "reset the progress text based on the current minimum and maximum progress range", "deserialize the state of the object .", "connectivity state is changed to the specified value .", "returns a map of properties for a given prefix .", "checks if the given session id is a play session id", "make a unique and valid workflowid .", "creates a new tree node object .", "sets the default namespace on the last started tag .", "called when a checking event is triggered", "notifies the listener that an alias event has occurred", "randomise all data that is confidential", "creates a new module .", "called when a body object leaves this place .", "instantiates a new jk invalid user exception .", "returns an argument map fitting the given value key set ( using defined types ) .", "sets the riak bucket where to send the data", "the method is used for valid the space url before finding it from space", "getter for the field phonebook .", "visits an annotation on a type in the method signature .", "sorts the specified range of the receiver into ascending order .", "set to true if this property is included in persisting", "returns true if the name is a syntactically valid method name , or if the name is a syntactically valid method name with a ' * ' appended or could be constructed from some syntactically valid method name containing more than two characters by replacing the first character of that name with ' * ' , and returns false otherwise .", "at startup create and show the main frame of the application", "a set of key - value pairs associated with the typed link .", "invoked after a module was unloaded from the address space of the target process .", "circle radius is decrease", "create a saxexception that wraps the given ioexception", "insert an item in the menu at the specified index .", "make a parametertypevariable2 from a method declaration .", "complete plug in configuration .", "provides an internal convenience method to allow easy overriding by test classes", "constructs a jsonexception with an explanatory message .", "the end of the dtd .", "a set of binary attributes .", "allow users to override when the debug flags show", "throws an exception if the current token is not a string .", "examine loggability of specified request", "this method returns a viewpropertyanimator object which can be used to animate specific properties on this view .", "export this object , create the skeleton and stubs for this dispatcher .", "this method calls proc deletegeneralconfig and deletes a record in generalconfig table corresponding to config group and key passed .", "load a module into the javascript engine", "create an unauthenticated jenkins http client", "get the set of keys for resident entries .", "attempt to parse an entity and return entity object if successful .", "return the stopbutton", "computes the crc value and compares to the crc stored in the record returning true only if the crc values match .", "creates a new tag d d handler object .", "get object by identity .", "creates and initializes the disk cache used by picasso ' s okhttpdownloader with the specified size limited by half of the system ' s free space .", "if not already created , a new map - key - class element with the given value will be created .", "returns the user friendly nls dependent name suitable for displaying in the options editor dialogs etc", "recovers a model run", "validate the signature on a message for a specific signer .", "returns the outputstream associated with this connection", "configures a data source .", "returns a color object that shows a complementary color .", "sets the comparator to use for sorting the view", "creates an appropriate type of listener", "returns true if testsubscriber received any onerror or oncomplete events .", "add a line number tag to this method remembering where it was called or defined .", "processes all lines ( char sequences separated by line feed symbol ) from the given string slitting them if necessary ensuring that every returned line contains less symbols than the given width .", "releases all locks held by a transaction .", "invoked when a change is deleted from the index .", "this method is implemented for all subclasses in the superclass", "return a list of java virtual machines .", "should this space be checked to see if it is alive or not .", "try to return the command in the given registry if the given registry do not find the command , check if we have a internal registry and if its there .", "process the http post request", "returns namedlist based on the order of resultids . sharddoc . positioninresponse", "looks up and returns a named data source .", "name is not a ptype", "assert that refs seen by a non admin user match expected .", "a utility method that returns true if the angle represents a point at the front of the 3d pie chart .", "this method resets the experiment including the record table the dice the random variables and the graph and table for the selected variable", "returns the icon associated with the name from the resources", "executes the given compiled script .", "if possible , add this link to the list of addresses to acknowledge", "resets the data of the choice control", "given a list of acceptable media types , get an rdf syntax .", "creates a new menu builder .", "moves to the next statistics message .", "there are two phases to resolving the root features .", "generates a list of acceptable preview sizes .", "adds item to history .", "load the url with postdata using post method into the webview", "builds a unique id .", "deletes all files and subdirectories in directory ( doesn ' t delete the directory passed as parameter ) .", "gets span of this node", "describes one or more of your subnets .", "to know if undo is available", "get the actors panel", "bind this handler to a proxy object .", "set the value related to the column memberaccount", "this function creates a string type request entity and populates it with the data from the provided http request .", "determines the next time included by the croncalendar after the specified time .", "build from data after returning buffers position will be after the end of this atom", "add a part to the using clause", "read all rows starting with the key values supplied , key value must start at the first and can between the 1st and last key .", "constructs a new listener with the number of executions this listener will be set on .", "determines whether the subsumption relation between this ( c ) and provided query ( p ) holds , i .", "creates a heartbeat manager which actively sends heartbeats to monitoring targets .", "organise based on the categories", "report a warning .", "creates a new edge updater object .", "get the value of a field using reflection .", "returns the preferred dimensions for this layout given the components in the specified target container", "creates custom retry handler to be used if http exception happens", "find out rowindexmax for equal operator .", "gets the current pattern of the mask rule", "returns the instance at the given position .", "check job promotion .", "a list of reserved db instances .", "this method clones this filter adds its listeners to its clone", "creates a new detach synchronizer .", "builds a message string by from a pattern and its arguments .", "returns information about the specified lightsail load balancer .", "state is aborted ( environment / setup issue )", "creates a new mapentryinfokey , used to find existing key in mapversiontable .", "converts a string representation of a date to its date object .", "creates an icefaces menuitem with an el action bound", "convenience method wrapping different reference types .", "optimize sql statement .", "given a git compatible diff returns the diff colorized if the console allows it .", "get noderepresentation for given node .", "creates an objectstreamfield representing a field with the given name , signature and unshared setting .", "creates a new model group resource .", "this method is used to inform the selector thread that there is data queued to be written to the socket .", "create the session bean", "create a or obtain an existing passenger", "construct a validator that matches any one of the set of regular expressions with the specified case sensitivity .", "addbee ( ) adds a custom bee the mod .", "builds a new message with the specified source node orignode and specified type type", "does the mech have an shield in no defense mode", "updates the toggle state of the button to remain synchronized with the magnifying mode state .", "attempts a flush operation , handling failed documents based on configured error listeners .", "handle set auto commit on off request", "shows a dialog where the user can resolve a function .", "an array of strings ( face ids ) of the faces that were deleted .", "gets the count active sessions", "method to load transform metadata for all attributes", "if sending stops periodicsendtimer and switches state", "returns the output ports of this interpreter .", "helper method to execute a http post request", "get the number of items in the cache", "initialize the all parts of the frontend to handle a new specification .", "retrieve a user based on their name", "imports the operands table .", "returns the predefined organizational unit fqn", "write a uuid encoded as two longs to the buffer .", "constructs an address attribute with the specified type .", "query whether a large message is allowed or not at this time .", "checks whether this is a filter which only filters by structure id .", "copies state from main - channel to this fork - channel", "this method return true if animation is playing .", "fix this resource name to point to the resources .", "load the url into the given webview and update the title bar to reflect the new load .", "sets the designated parameter to the given java string value .", "performs a ( ridged ) linear regression .", "removes all of the elements from this deque .", "draw a pie chart", "this implementation is empty since we expect the runnable to terminate based on some specific shutdown signal .", "sets the content for this attachment , i . e . the size and the attachmentcontentid .", "set the mapping of rdn properties for each entity type .", "replaces the messages for the given resources .", "add included operationalstring to the operationalstring", "phisically delete all waitingperson objects related to the specified person", "a rollback workflow method that does nothing , but allows rollback to continue to prior steps back up the workflow chain .", "redoes this action", "clone given configuration and apply settings from global / class / field jaxb customization .", "call at the start of a compile phase to reset the start time .", "define what to run and wake up this dozing thread", "get indicator 1", "return the sleep time in msec", "creates a new reil block .", "hack to get the cell channel from the private method", "destruction of the servlet .", "sets the color of the pointer", "add the appropriate target listeners to this component and all its children .", "rewrite all the urls .", "open an editor on the specified rule", "notify successful completion of the operation", "updates the image values in mediastore .", "complete the initialization of the package and its meta model", "checks whether nominal schemes can handle more than two classes .", "get the cell editor value", "insert the default tempo and pattern into not used pattern", "if show is true this will enable voice search .", "build a font out of an x font description string .", "delete logically a guestrecording", "build json metadata for one rendition as image source .", "read a field into our table configuration for field = value line .", "prepares the type variables for the serialized type .", "sets the label of the derived key", "writes the lower triangular matrix into the specified matrix .", "adds a float to the constant pool of the class being build .", "parse a kml document from a file , to build the kml structure .", "verifies the syntax of the target name and recreates any transient state .", "places the barcode in a pdfcontentbyte .", "workflow step method for rolling back adding journal volumes to cg .", "invoked right before closing a database .", "set the endpoint address for the specified port name", "delegate to the journalworker .", "the overriding of this method should ensure that the objects of this class work correctly in a hashtable", "convienience method to get the portal", "disposes the page", "commits the changes to the given object as usual , then attempts to propagate the change to the gsearch service .", "closes this connection wrapper permanently", "returns an existing workbook object .", "returns a flag that indicates whether the address space is loaded .", "the license configurations .", "creates a pattern choice radio button and adds it where necessary .", "method used to find description from atr", "this method reacts to control messages passed by the client to the driver .", "checks for string attributes in the dataset", "cleans resources held by this parser manager .", "before the user s device list or sta device list will be changed lock the device list and sta device list", "change the stored target intensity value and do notification , but don ' t change anything in the hardware", "for each node , update the block stack and reference collection as appropriate .", "scans the given string for a type argument signature starting at the given index and appends it to the given buffer , and returns the index of the last character .", "used by the methods above", "complete the character class being parsed and add a set of alternations to it that will match the canonical equivalences of the characters within the class .", "checks if the dependence relation is irreflexive", "fills a band between two values on the range axis .", "check if the specified pdu is conform to the acl .", "perform extended search", "seterrormessage change the response content to be an html error page", "call a method on the remote pyro object this proxy is for , using oneway call semantics ( return immediately ) .", "performs variable interpolation using the named arguments from an action on a single string", "base64 encode a textual string according to rfc 3548", "calculate md5 hash of a string", "gets the status from the properties document or null if that property has not yet been set", "closes underlying byte stream .", "returns the sorted string representation of an n - ary operator .", "this object renders a qr code as a bytematrix 2d array of greyscale values .", "extract a string from the items array .", "create and return a new array declaration node .", "handle failures e g in case the product is not available anymore", "removes message from receivedlist", "obtains all attributes from a specific attribute set .", "delete the edge spanning node from to node to returning true if successful", "sets the value of the wsps9x18min property", "factory method to create a default projectfiltersettings object .", "computes the cost by summing up the cost from each assigned item", "url encode a path segment .", "assign the stacktrace to the stacktrace attribute", "creates a new xml element named as dcptype by using the specified parameters", "convert a channel index into a channel number", "instantiates a new slidingactivityhelper .", "sets the designated parameter to the given java int value .", "this method checks if value has format of system property", "sets the atributo2", "returns a string representation of this object .", "apply mask penalty rule and return the penalty .", "the event session configuration to be used when subscribing for notifications .", "vends a triangular arrow tip with sharp angles that is suitable for use as an endpoint shape", "returns a string representation for a proxy that uses this invocation handler", "eliminamos un registro secundario", "redoes a previously undone command and moves to the next undone command if exists", "adds to this field possibly wrapped in a copy of this localdate", "throws invalidobjectexception since data for this class is required .", "cache a list of images", "use fragmentmanager to attach one fragment to one view using the viewid .", "these parameters are sent with the request to the endpoint specified in the action option .", "called to signal that the drop is unacceptable .", "computes the polynomial approximation of the specified knn - distances .", "returns the first element in the queue .", "menu find select new object", "return the type containing the method that this method overrides .", "right rotates the bits between start and end indices number of places .", "returns true if the mbean specified is an instance of the specified class , false otherwise .", "fuzzily match an image against one of your custom image lists .", "attempts to decode the proxy soap message from the given input stream .", "set the value related to the column accessnumber", "configure subscribed feeds", "returns the number of children of parent", "primary message processing method .", "an array of iam or federated user arns that identify the users to be described .", "return the node value of a single node selected by the given xpath expression", "adds a product to the map of prodcts", "process widget score", "reads a resource from an url , specified as a string ; since this class makes use of the url factory , urls may also represent resources in the class path , re ( in the format \" classpath : org / dihedron / resources / myresource . png \" ) .", "attempts to decode a sequence of itf black white lines into single digit .", "manages browser http request", "get cosine by step value .", "closes this outputstream and releases any system resources associated with this outputstream", "for events that mark span the beginning and end of something call this method to mark the completion of the event window .", "sets annotation visibility of clusters that are not visible", "function to return a review deadline", "attempts to start task from queue .", "display the gradient editor view", "the share with taggedas mirroredby object creation primitive", "returns built function imports using passed lookup for searching entity sets and functions for appropriate function import .", "returns an object ' s invocation handler if that object is a dynamic proxy with a handler of type annotationinvocationhandler .", "creates a camel streamer .", "override open to record that an open happened , then call super .", "returns the stroke for the specified section", "returns a list of methods matching a given descriptor .", "removes the contribution of the given addon", "creates a new token with specified type .", "creates a new sql instance given a jdbc connection url and a driver class name .", "sorts given array using quicksort", "updates the view state when the mode has been set .", "called when visitor starts with root node of parsing tree", "register lines in a file that contains the nosonar flag .", "creates the text component with loaded text", "creates an item label generator using the specified number formatters .", "sets the property sheet values and agent title .", "destroys the simpledateformat used for parsing", "adds a collection of nodes to the child list .", "write a button record array", "displays all of the experiments that have been created by retrieving the names from the versions xml file", "called to finish an item list .", "factorymethod that creates a filtered property accessor by decorating a given accessor with a class filter .", "applies this function to the given argument .", "reads a character from stdin blocks until it is not received .", "standalone routine to compute local transfer entropy between specific variables in a d spatiotemporal multivariate time series .", "loads the properties from the specified file in hdfs the new properties are added to the current system configuration .", "this adds a property descriptor for the hide lmsui feature", "for the given interface , get the stub implementation .", "marshall the given parameter object .", "get processor name for given class and action name .", "returns an iterator over the container ' s elements .", "this adds a property descriptor for the xp feature", "creates a new scope ( e . g . when entering a function ) .", "initializes the protocol adapter according to the supplied properties .", "sends the response back to the client", "show error messages .", "sets up with all capabilities required", "enable persistence file cache", "parse to seconds duration string like ' nynmndnhnmns ' to seconds", "signal from service manager to start the service", "determines if a font can display up to a point in the string .", "displays and validates a dialog", "creates a goto action to an internal page .", "generates a filename prepended with the stable storage directory path .", "creates a new breakpoint hit synchronizer .", "create a fresh environment for class bodies .", "checks if the operation was cancelled .", "the number of partitions is calculated based on two parameters .", "removes a given tag from all nodes of a graph .", "this method will write the data in thrift format to disk .", "deletes a configuration for your amazon virtual private cloud ( vpc ) endpoint .", "ensures that the external array tmp has at least the specified number of elements , increasing its size if necessary .", "cloud archives files in session", "fake class # getsimplename logic .", "return a parser generator from grammar .", "headers for this request .", "caches a copy of the configuration", "adds an url bean to the internal map of results , but only if there is no existing entry with higher internal priority than the priority given as an argument .", "called when an item gains or loses focus .", "method to update consistencygroup read - only state , must match args of updateconsistencygroupreadonlystate ( except stepid )", "gets the facets config .", "rejects picking if the rectangle is too small , like if the user meant to select one vertex but moved the mouse slightly", "fires whenever an xml start markup is encountered .", "send one - or - more key - value pairs to the watch - app identified by the provided uuid .", "unit operator find all object", "select also all items belonging to any group of the current selected items .", "this method sets the maximum size of cache", "gets the parent of the specified object", "queue a sound into the audio queue .", "a method that will launch a layerworker thread to call the prepare method .", "loads a single jcl instance in context", "gets the name of a resource in the other merge folder .", "returns true if character c is a letter or digit .", "unregister a existing js item only from this request", "extends the time series to include not only the dates it already includes but also the specified date", "return the align sub menu .", "creates the nodes of the native call graph .", "saves the status of the sync on the event .", "expose jpa entities as repositories .", "writes the state of this object during serialization .", "modifies the variable identifiers .", "generate a plugin canvas for this plugin .", "renders given text with the provided parameters to the given character stream .", "initialize with a fixed reference date", "returns the capabilities of this estimator", "removes a tile listener", "remove included groups from a group .", "trim function t .", "creates a or instruction .", "extracts the server , protocol , port , extensions and tail from session id", "read binary data from stream .", "setter for caption - sets", "constructs an instance of an escapeset", "starts the async process .", "writes a set of raw lines into the stringbuilder .", "called when the given activity is paused .", "set a property that will be active during the users session", "does the preparation and creates the location index", "makes this instance in effect a reference to another patternset instance", "pushes this settings back onto a logger .", "determines if two rectangles intersect .", "used as part of the rebuild protocol", "indicates if the user with the specified dn can be found in the group membership map - as encapsulated by the specified parameter map .", "called when the drawer completes", "loads a model and allows user to find similar words", "stops the trace mode .", "remove an objects entry from the object registry", "start a put request to the given url", "cleanup all custom caches contained in this library .", "returns subset of given permissions that is grantable given the current calling context .", "characters within an ignore conditional section .", "writes a formatted string to this stream .", "a ( reverse ) proxy can set the ' x - forwarded - for ' header so we can see a user ' s original ip .", "reset the stream", "performs the following operation :", "removes all user session attributes from session", "check for a winning move", "constructs an authentication packet with the given credentials", "converts sql column type ( returned from database metadata description class ) into queryparameters direction", "specifies that the ' has ' bit of these explicitly specified top - level field numbers should be ignored when comparing for equality .", "add a listener to the list of listeners", "return the specified token from the reader .", "use this api to unset the properties of appfwsettings resource .", "check content provider vars and arguments .", "constructs a new instance of compositeoutputstream with zero or more outputstreams .", "adds a compressor to the container", "post the status to device via local or internet if local it will use local first", "applies the modifications contained in the given properties object .", "returns component in list box associated with given name or null", "adds a new x509certificate to this user", "stops the scroller and any current fling .", "the action to be performed by this timer task .", "the magnitude is the position of the highest bit set", "reads a pooled string value from the input stream .", "signals a project addition", "adds a glob pattern to the glob patterns checked by this class .", "prints a message at verbose priority .", "reloads the data from the service .", "creates a new serialized object .", "subtract a character from a number .", "duplicates a connection .", "visits a tableswitch instruction .", "called on request started .", "this is just a list of tag and lengths ( eg dols )", "returns whether an action of the supplied action type should be enabled based on the supplied selection .", "updates the current distance calculated so far with the new difference between two attributes .", "sets the value of the collection item .", "retrieves specified application .", "gets the interval from a raw long , which should correspond to an akinterval . seconds value , in some unit", "generate a string containing a formatted timestamp with the current date and time .", "public list getrdnproperties ( string qualifiedentitytype , map configprops , set pids , configurationadmin configadmin ) { / / todo : : extract ldap entity rdn return null ; }", "validates the hashes of the dependency .", "removes a item of this jlist", "answer the name of the current application name .", "removes the specified value corresponding to subkey the from the secondary map which can be located by key", "builds neighborhood map for all nodes in snapshot .", "clears all registered sql statements", "return the edge at int index null if none are available", "perform an action on a descendant view .", "sets the image index of the given block layer", "updates an entity from a html form post .", "updates the current distance calculated so far with the new difference between two attributes .", "perform an initial save of a previously unsaved school entity", "takes in a methodinsnnode and returns the name dictated by the remappedname annotation if one is present .", "this method attempts to decode the values of any property that contains \" password \" in any case .", "sets a date / time field of the first translation item to valid or not valid .", "creates a new save text field object .", "this converts the default selectors in the task to fastselectors and saves them in the selectorcache", "adds the specified software system .", "generates the bytecode to unbox the current value on the stack", "reads the next line from the reader .", "this method is called to initiate the selected directory and the directories files", "use this method to colorize toolbar icons to the desired target color", "creates a new get request .", "removes all occurrences from this collection of each primitive in the specified array", "returns the active row", "returns one item that intersects the query point , or null if no items intersect that point .", "set the time the request was issued .", "handle a change to an existing deployment"], "label": ["what", "what", "what", "what", "property", "what", "why", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "property", "how-it-is-done", "what", "why", "what", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "how-to-use", "what", "what", "what", "property", "how-it-is-done", "what", "what", "how-to-use", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "how-it-is-done", "why", "what", "what", "property", "what", "what", "what", "what", "what", "what", "why", "how-it-is-done", "what", "what", "property", "what", "how-it-is-done", "how-it-is-done", "property", "what", "property", "property", "how-to-use", "what", "why", "what", "what", "how-to-use", "what", "what", "property", "what", "property", "what", "what", "what", "why", "why", "how-it-is-done", "why", "what", "why", "property", "how-to-use", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "property", "property", "how-it-is-done", "why", "why", "property", "what", "property", "how-it-is-done", "what", "why", "what", "what", "what", "what", "property", "what", "what", "what", "why", "what", "what", "how-it-is-done", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "others", "what", "property", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "property", "property", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "why", "what", "what", "why", "how-it-is-done", "what", "what", "property", "why", "what", "why", "others", "how-it-is-done", "what", "how-it-is-done", "property", "property", "property", "why", "why", "what", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "others", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "why", "why", "what", "property", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "why", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "property", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "others", "what", "why", "what", "what", "what", "how-to-use", "what", "what", "how-to-use", "why", "why", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "property", "what", "why", "why", "what", "what", "what", "how-it-is-done", "what", "property", "what", "property", "how-it-is-done", "why", "what", "what", "what", "what", "what", "what", "property", "what", "property", "why", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "how-it-is-done", "how-it-is-done", "why", "what", "what", "what", "what", "others", "how-it-is-done", "property", "why", "what", "what", "how-to-use", "how-it-is-done", "what", "others", "why", "how-it-is-done", "what", "what", "what", "what", "what", "what", "why", "what", "why", "what", "what", "what", "why", "what", "what", "what", "what", "how-it-is-done", "what", "what", "why", "property", "what", "what", "what", "what", "why", "what", "what", "property", "what", "what", "property", "what", "why", "property", "property", "property", "what", "what", "what", "why", "what", "property", "how-to-use", "what", "what", "how-it-is-done", "why", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "property", "how-it-is-done", "what", "why", "what", "what", "why", "what", "property", "how-it-is-done", "property", "what", "what", "why", "property", "why", "property", "how-to-use", "why", "what", "others", "how-it-is-done", "others", "what", "how-it-is-done", "how-it-is-done", "why", "why", "property", "what", "why", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "why", "what", "property", "what", "what", "what", "how-to-use", "property", "how-it-is-done", "what", "what", "what", "why", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "property", "what", "what", "how-to-use", "how-to-use", "how-it-is-done", "what", "what", "what", "what", "what", "property", "how-to-use", "how-it-is-done", "what", "why", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "how-to-use", "what", "why", "what", "how-it-is-done", "what", "how-it-is-done", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "property", "what", "what", "what", "property", "how-it-is-done", "how-it-is-done", "how-it-is-done", "property", "what", "what", "what", "why", "what", "how-it-is-done", "how-it-is-done", "what", "what", "why", "how-to-use", "how-it-is-done", "what", "why", "how-it-is-done", "property", "how-it-is-done", "what", "property", "why", "what", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "property", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "property", "what", "what", "why", "what", "why", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "how-to-use", "how-it-is-done", "why", "property", "why", "what", "property", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "property", "why", "how-it-is-done", "how-to-use", "what", "how-it-is-done", "what", "what", "why", "how-it-is-done", "what", "how-it-is-done", "what", "why", "what", "how-it-is-done", "what", "what", "what", "what", "why", "what", "what", "why", "what", "property", "what", "what", "how-it-is-done", "why", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "property", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-to-use", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "how-it-is-done", "what", "what", "others", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "why", "others", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "why", "property", "how-it-is-done", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "property", "what", "what", "how-it-is-done", "why", "what", "what", "property", "what", "why", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "why", "what", "how-it-is-done", "what", "why", "property", "how-to-use", "what", "what", "what", "property", "why", "what", "what", "what", "why", "property", "what", "what", "what", "why", "property", "what", "what", "why", "what", "how-it-is-done", "what", "what", "property", "property", "what", "what", "what", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "what", "property", "property", "property", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "why", "how-it-is-done", "property", "why", "property", "what", "what", "what", "how-it-is-done", "why", "property", "what", "what", "what", "property", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "why", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "others", "what", "property", "what", "what", "what", "what", "how-it-is-done", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "how-it-is-done", "property", "property", "what", "how-it-is-done", "what", "how-to-use", "what", "property", "what", "what", "why", "how-it-is-done", "what", "why", "property", "what", "what", "what", "how-it-is-done", "why", "what", "property", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "property", "how-it-is-done", "what", "others", "what", "what", "why", "what", "what", "what", "how-it-is-done", "what", "what", "what", "property", "what", "how-it-is-done", "property", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "how-it-is-done", "how-it-is-done", "what", "what", "what", "property", "what", "what", "property", "what", "property", "what", "what", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "property", "why", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "property", "property", "what", "why", "property", "what", "what", "what", "what", "what", "what", "property", "property", "how-it-is-done", "what", "property", "how-it-is-done", "what", "what", "why", "what", "why", "property", "what", "how-to-use", "others", "how-to-use", "what", "how-it-is-done", "property", "property", "how-it-is-done", "property", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "why", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "what", "what", "why", "what", "what", "why", "what", "what", "what", "what", "what", "what", "property", "property", "what", "what", "what", "what", "what", "property", "what", "what", "what", "how-it-is-done", "how-it-is-done", "why", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "property", "what", "what", "how-it-is-done", "what", "why", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "why", "what", "what", "what", "property", "what", "why", "what", "what", "what", "what", "why", "what", "why", "property", "what", "what", "what", "what", "property", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "how-to-use", "what", "property", "what", "what", "what", "what", "how-it-is-done", "what", "why", "how-it-is-done", "what", "what", "what", "what", "property", "what", "how-to-use", "how-it-is-done", "what", "how-it-is-done", "property", "what", "others", "what", "what", "what", "what", "what", "property", "what", "what", "others", "what", "what", "property", "what", "property", "why", "property", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "property", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "how-to-use", "why", "what", "what", "how-it-is-done", "how-it-is-done", "what", "why", "how-it-is-done", "why", "what", "how-it-is-done", "what", "property", "property", "what", "why", "what", "how-to-use", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "property", "how-to-use", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-to-use", "why", "what", "why", "why", "what", "how-it-is-done", "what", "what", "what", "property", "what", "property", "what", "what", "what", "how-it-is-done", "how-it-is-done", "property", "why", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "property", "why", "what", "others", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "why", "why", "why", "why", "what", "what", "what", "what", "what", "what", "others", "property", "why", "what", "what", "property", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "property", "what", "property", "how-it-is-done", "how-it-is-done", "how-to-use", "what", "what", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "property", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "how-to-use", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "why", "how-it-is-done", "what", "what", "how-it-is-done", "property", "how-it-is-done", "what", "what", "what", "why", "what", "what", "how-it-is-done", "what", "what", "what", "property", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "property", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "property", "what", "property", "how-it-is-done", "what", "what", "what", "how-to-use", "property", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "property", "property", "property", "property", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "why", "what", "what", "what", "what", "how-it-is-done", "why", "what", "property", "property", "what", "what", "what", "what", "what", "what", "why", "what", "what", "how-to-use", "what", "why", "what", "how-it-is-done", "what", "how-to-use", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "what", "why", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "property", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "what", "how-to-use", "what", "property", "what", "why", "what", "what", "what", "what", "property", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "property", "what", "property", "why", "how-it-is-done", "what", "what", "what", "how-it-is-done", "property", "how-it-is-done", "what", "what", "what", "what", "property", "what", "why", "property", "what", "property", "why", "what", "property", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "why", "property", "what", "how-it-is-done", "what", "property", "property", "what", "what", "how-it-is-done", "how-it-is-done", "property", "what", "how-it-is-done", "what", "what", "what", "what", "property", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "why", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "property", "how-to-use", "why", "what", "property", "what", "property", "what", "what", "what", "property", "what", "why", "what", "what", "what", "what", "property", "why", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "what", "what", "what", "why", "why", "why", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "why", "why", "why", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "why", "how-to-use", "what", "what", "why", "why", "what", "how-it-is-done", "what", "property", "property", "what", "what", "what", "what", "why", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "property", "how-to-use", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "property", "what", "property", "what", "what", "what", "property", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "property", "property", "why", "why", "property", "what", "how-it-is-done", "what", "property", "what", "how-it-is-done", "why", "what", "what", "property", "what", "property", "what", "property", "what", "what", "what", "what", "property", "what", "what", "property", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "property", "what", "what", "what", "property", "property", "what", "how-it-is-done", "property", "property", "what", "what", "what", "how-it-is-done", "what", "how-to-use", "what", "what", "what", "what", "why", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "how-to-use", "what", "why", "how-it-is-done", "what", "what", "what", "what", "property", "why", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "what", "why", "how-it-is-done", "what", "what", "property", "what", "what", "how-it-is-done", "how-to-use", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "property", "what", "why", "property", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "how-to-use", "property", "what", "what", "what", "what", "how-to-use", "what", "how-to-use", "why", "what", "what", "what", "what", "property", "others", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "why", "how-it-is-done", "property", "what", "what", "what", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "property", "how-it-is-done", "what", "what", "how-it-is-done", "what", "others", "what", "what", "what", "how-it-is-done", "why", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "why", "what", "what", "how-it-is-done", "what", "why", "what", "what", "what", "what", "what", "property", "property", "what", "what"]}