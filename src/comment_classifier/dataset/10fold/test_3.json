{"id": [9273, 19380, 7993, 93, 953, 2979, 1427, 14732, 17803, 3713, 7348, 16911, 7679, 8211, 4016, 13558, 16180, 18363, 8705, 4646, 13779, 12684, 16184, 14345, 1772, 13247, 1561, 7699, 10143, 8372, 6365, 1308, 14114, 14321, 6954, 5014, 13407, 2942, 8302, 11292, 1457, 16435, 8461, 11494, 16321, 15641, 10518, 1207, 5593, 1424, 5930, 19745, 5362, 12971, 1067, 9192, 5227, 2689, 12043, 3188, 2840, 18643, 5414, 13219, 11077, 5986, 10640, 15827, 13825, 16138, 21, 16223, 1615, 5492, 4971, 16074, 12823, 11491, 11994, 14654, 743, 7143, 12912, 17749, 4110, 18668, 1420, 8598, 15996, 7696, 9402, 13650, 10894, 11589, 16795, 9841, 19177, 8852, 5377, 14626, 19100, 14442, 13910, 14790, 9704, 19392, 13677, 16476, 19772, 8938, 3207, 10236, 7762, 1043, 4512, 10036, 16769, 10695, 966, 15132, 17638, 14292, 16667, 18778, 7990, 3983, 4944, 9047, 2393, 10798, 6608, 3549, 996, 18201, 7046, 8102, 12298, 2798, 5682, 18142, 61, 3136, 865, 10699, 12254, 7478, 15102, 19155, 8388, 18319, 739, 4837, 11712, 2929, 2889, 15317, 12850, 17868, 5035, 13179, 547, 13465, 18653, 17190, 15851, 15489, 15140, 5877, 17105, 7319, 8874, 9589, 8486, 5254, 1277, 6023, 628, 1908, 2288, 8826, 10830, 1880, 13148, 12241, 1662, 6691, 18007, 6618, 18626, 19880, 10544, 1639, 5301, 13760, 17136, 4639, 15115, 8260, 9145, 5594, 8185, 10997, 3593, 18112, 18023, 8474, 17086, 12354, 11233, 19474, 12179, 12455, 6858, 15359, 8263, 565, 19534, 8295, 7384, 2899, 15104, 12961, 4785, 10117, 6013, 19942, 10434, 11303, 7076, 12943, 6463, 13796, 15266, 6097, 2121, 927, 15404, 10238, 15487, 10837, 17291, 14607, 18108, 8173, 9064, 15192, 11420, 6840, 3041, 10232, 11884, 6406, 19811, 2749, 2141, 15446, 843, 5797, 17993, 19428, 1220, 14455, 826, 6697, 12323, 16261, 1151, 2128, 17541, 3308, 8369, 11204, 4243, 5687, 12224, 466, 7557, 1664, 18344, 14194, 488, 13590, 10290, 7113, 8541, 10073, 2332, 19735, 3744, 19661, 9031, 5032, 8448, 2955, 16642, 12772, 12057, 8111, 1953, 4233, 5731, 12269, 5260, 12445, 6707, 2673, 3161, 2517, 14907, 12623, 5827, 9137, 6417, 2995, 19234, 11471, 16146, 1079, 5394, 3998, 12348, 7399, 9032, 17897, 5107, 6734, 14595, 9497, 7037, 5937, 13264, 18895, 8594, 2510, 19282, 6274, 15652, 14800, 6577, 8745, 10358, 3152, 17319, 2392, 6346, 3212, 12302, 18502, 12627, 4716, 3270, 3815, 14483, 9378, 4471, 14081, 12293, 2771, 11921, 1011, 9903, 15601, 3580, 299, 8266, 18359, 19332, 7689, 19175, 15255, 9592, 12535, 14704, 9777, 14106, 2248, 14736, 3981, 14165, 11873, 19277, 16014, 8471, 2972, 18390, 14952, 12897, 1507, 7257, 19113, 6681, 19198, 4111, 12655, 8333, 76, 1600, 2511, 7454, 7974, 6729, 1527, 9431, 2551, 9478, 17410, 5264, 16522, 1003, 54, 5801, 19878, 5924, 16493, 2493, 16983, 11965, 16097, 13859, 19227, 16821, 7409, 6426, 7709, 3901, 18925, 15398, 16055, 2360, 2825, 17944, 8169, 11111, 128, 9003, 14050, 10406, 15079, 2859, 7118, 5426, 19038, 8382, 875, 1109, 12104, 17673, 13269, 10315, 17210, 10187, 7470, 12566, 2638, 4570, 12, 17238, 1619, 8597, 693, 5063, 10048, 19535, 14019, 10852, 17563, 15839, 12342, 18316, 9935, 8201, 2423, 1153, 3344, 1172, 1595, 16262, 16773, 16720, 1110, 110, 1436, 14461, 17359, 9183, 11505, 6724, 16750, 3114, 11123, 9292, 2108, 16501, 644, 4852, 16527, 730, 8426, 10166, 7413, 7633, 7656, 1846, 2776, 8427, 3739, 10193, 17401, 18782, 4712, 17948, 13880, 5295, 4036, 13083, 17033, 7842, 10545, 1430, 14639, 13104, 4742, 9167, 7573, 6449, 11819, 2849, 2525, 17471, 4778, 18709, 14062, 9345, 377, 13973, 17213, 8132, 1122, 12877, 7916, 5007, 19785, 7036, 18485, 10756, 16327, 5408, 10580, 14417, 59, 7404, 1278, 15195, 6921, 17858, 5669, 11709, 1359, 1014, 1373, 6220, 711, 3638, 2097, 179, 17017, 14440, 10582, 17148, 11592, 1190, 1809, 13414, 11832, 15154, 14109, 2984, 16395, 17634, 13884, 8635, 5154, 4044, 1352, 14825, 10670, 11425, 5353, 19124, 7246, 17299, 3120, 5383, 13203, 18243, 18180, 5096, 4835, 19261, 5866, 5139, 6723, 15408, 16763, 5655, 17063, 10534, 125, 13053, 5220, 178, 15133, 14095, 8258, 5533, 4669, 7938, 14640, 1586, 5443, 11252, 14572, 2733, 5404, 5883, 10438, 19907, 11672, 7548, 67, 19592, 1897, 7185, 17640, 12316, 15760, 19292, 6371, 8840, 8877, 5727, 5743, 8370, 8863, 1009, 11533, 14634, 9266, 17908, 18533, 16273, 11023, 7737, 4722, 11778, 11692, 16010, 19419, 1483, 13489, 1439, 959, 5685, 14585, 9818, 12983, 1554, 18850, 17824, 6395, 16592, 9731, 3330, 18506, 16047, 1090, 3233, 10247, 17900, 6774, 1646, 3240, 6063, 13883, 16011, 16994, 6603, 13363, 1351, 6614, 8699, 17187, 17313, 15855, 17503, 18680, 656, 12524, 364, 8162, 12891, 8583, 5307, 19449, 19224, 3649, 9576, 19085, 7964, 7260, 4921, 11853, 4877, 14243, 18153, 1184, 6689, 15763, 8848, 6390, 9537, 4685, 11218, 5347, 8363, 359, 11348, 17068, 16680, 18724, 16835, 15833, 10215, 1375, 9187, 6597, 11456, 18473, 2943, 7583, 3146, 15445, 4336, 3705, 12641, 7242, 12067, 13626, 18524, 19330, 2137, 9001, 19909, 10526, 14735, 3217, 13233, 16678, 18927, 8656, 17061, 2384, 8438, 3056, 12570, 4868, 4468, 1905, 11693, 19945, 5824, 8783, 8607, 3029, 7296, 13715, 19411, 5692, 10326, 2264, 19022, 10472, 7176, 376, 4454, 7137, 8779, 6368, 8405, 17037, 1128, 11301, 4569, 15347, 9901, 1084, 11497, 5872, 10004, 10452, 13077, 13146, 8058, 10849, 7849, 14137, 8548, 2641, 2397, 19809, 7026, 13391, 10697, 3993, 1823, 13634, 10261, 15671, 15546, 8854, 5735, 18075, 4799, 16747, 19018, 10466, 8627, 8069, 9331, 2975, 2089, 5051, 10950, 12727, 16043, 17892, 8846, 1126, 12989, 8946, 6554, 19820, 4037, 17799, 8392, 16371, 9366, 439, 9915, 13821, 16906, 10937, 14436, 4629, 14477, 1405, 16866, 18725, 6895, 69, 8331, 17199, 18568, 18325, 17198, 17642, 3868, 3336, 3879, 1500, 19417, 19892, 5826, 16742, 16172, 14379, 4266, 1924, 18966, 8165, 3792, 9730, 7879, 7291, 1453, 19212, 14060, 10891, 13495, 7072, 11407, 12310, 10164, 17812, 14861, 874, 7778, 17641, 255, 11284, 4000, 19602, 10059, 17981, 18831, 18021, 11852, 6340, 8491, 10027, 7281, 10949, 19089, 608, 14253, 1981, 14304, 15811, 18973, 14578, 6300, 12424, 16801, 16765, 19475, 13671, 5210, 8708, 8324, 2703, 16220, 13640, 5379, 18790, 16111, 9314, 7516, 9888, 19453, 9974, 8965, 19858, 416, 11170, 16078, 13927, 12160, 14459, 16533, 18544, 13116, 789, 3461, 5565, 12520, 4593, 15121, 4377, 1012, 17677, 6064, 13856, 16300, 3227, 17476, 5859, 18223, 8650, 14680, 11092, 15919, 2997, 14148, 7998, 18234, 9812, 16884, 8554, 1485, 78, 8696, 14269, 16226, 15219, 6791, 3952, 18998, 4431, 4589, 135, 2865, 19664, 2753, 16935, 4302, 10356, 12192, 6950, 18211, 15548, 16092, 4353, 3754, 13890, 4536, 16075, 10562, 12802, 8512, 14552, 7716, 18459, 18882, 16716, 16930, 5358, 2891, 16976, 19685, 12038, 19861, 17740, 12528, 9417, 12472, 13710, 6761, 13214, 3354, 17165, 14817, 14524, 13851, 10521, 8195, 19129, 18562, 2406, 15624, 5352, 1307, 2411, 4013, 7950, 5821, 1512, 17220, 5439, 18085, 19462, 6972, 971, 11249, 9964, 19569, 16836, 18912, 8576, 14875, 10403, 19687, 7329, 11799, 2078, 2535, 14943, 14822, 1121, 7427, 4638, 11624, 14450, 16364, 5787, 3194, 8744, 11221, 2701, 6812, 12994, 19410, 10362, 10364, 18037, 19439, 18859, 18420, 2601, 8626, 12858, 9805, 1756, 3317, 11228, 13144, 17144, 1409, 15927, 12277, 3502, 13317, 10704, 7003, 8048, 5575, 2928, 2744, 622, 19146, 3457, 6548, 19112, 14989, 10173, 11696, 5192, 1413, 19008, 11332, 11363, 6165, 10068, 7122, 1123, 9585, 5066, 9413, 13628, 10735, 18721, 7320, 7701, 14242, 14904, 17989, 16345, 6585, 17321, 16403, 8940, 1696, 2093, 276, 13945, 18787, 12621, 6167, 10423, 6917, 11102, 19954, 16553, 8227, 17696, 13598, 7888, 1487, 3891, 9385, 5266, 16510, 11677, 19211, 8716, 18198, 12598, 1325, 11377, 14339, 5108, 17933, 9088, 14406, 9372, 12612, 19702, 3412, 19220, 13507, 11487, 11397, 18121, 8228, 4167, 4494, 9594, 8443, 16709, 10888, 19368, 5568, 8087, 13374, 8207, 19879, 1553, 16904, 3529, 8289, 4575, 1961, 6632, 15505, 16442, 10285, 1925, 729, 7631, 5036, 15035, 3204, 19548, 13284, 4362, 15157, 11224, 494, 17385, 7129, 18907, 11118, 1648, 9676, 11889, 18719, 12270, 8062, 2305, 124, 9358, 7627, 15356, 14823, 5621, 12034, 5278, 19154, 8153, 306, 3954, 15608, 12563, 11354, 8433, 14049, 14871, 17529, 15530, 16023, 18915, 17357, 2181, 16933, 2905, 18430, 9545, 18209, 10744, 7839, 14611, 16238, 18273, 18455, 15929, 19556, 7273, 10978, 11793, 9180, 14296, 15393, 11313, 18168, 17414, 1899, 12050, 8969, 6059, 19985, 2540, 14690, 7507, 12024, 1758, 6687, 3079, 8330, 13986, 2824, 1989, 2542, 10674, 16950, 3062, 18641, 877, 18035, 9472, 14767, 3255, 8117, 15870, 13756, 11697, 14394, 9696, 1180, 11925, 6491, 10561, 11805, 664, 16488, 9455, 16028, 2639, 4496, 5311, 4118, 16471, 19002, 13266, 18924, 13012, 4484, 11604, 5402, 7039, 3616, 15816, 5610, 903, 13566, 1444, 9622, 8425, 11582, 9294, 8056, 6992, 6673, 11162, 19334, 11043, 9806, 8007, 15831, 6655, 13734, 649, 3010, 11877, 17064, 10661, 8961, 18985, 9723, 218, 18331, 2414, 19041, 18339, 15136, 3963, 14535, 8031, 7444, 1162, 4212, 16267, 7417, 13376, 1242, 10676, 1481, 18976, 17855, 9393, 4031, 10566, 18975, 1341, 7459, 5666, 1266, 15096, 6633, 13832, 16653, 14649, 13481, 1330, 685, 352, 13365, 9679, 7223, 12773, 18079, 5808, 12779, 8646, 14030, 18161, 18825, 13273, 6201, 11975, 7581, 3039, 6416, 155, 19730, 7041, 16305, 3835, 3975, 1637, 2436, 2705, 11948, 12906, 5155, 15074, 14856, 8413, 2909, 1836, 5428, 3700, 15114, 6743, 12493, 17707, 4292, 16719, 18649, 15705, 2272, 12518, 12062, 16122, 9026, 3037, 2783, 10741, 12132, 4699, 3943, 3980, 10291, 18821, 10778, 11982, 8498, 3523, 19204, 9130, 15518, 4997, 6714, 7385, 16543, 19712, 7208, 1979, 4554, 1886, 11719, 13885, 3224, 7138, 2485, 2555, 4697, 10288, 6297, 2155, 373, 9596, 3165, 10680, 6164, 1859, 18580, 19266, 19595, 5143, 7909, 17832, 7225, 17202, 5881, 12026, 11250, 402, 11953, 18755, 11408, 10507, 701, 4263, 8239, 8276, 11571, 10295, 2655, 18519, 13895, 8977, 17254, 12836, 17226, 4460, 11790, 2877, 11183, 2618, 13818, 9856, 14960, 7224, 19339, 5790, 5904, 4856, 17234, 4381, 552, 6014, 16879, 15289, 19079, 6670, 4939, 13046, 7332, 12854, 15789, 18125, 18810, 14090, 6038, 8557, 15472, 12515, 8820, 9370, 17735, 12410, 10416, 8768, 1773, 15940, 14017, 14249, 19890, 12116, 1749, 8915, 8299, 886, 15874, 7733, 11048, 18408, 16353, 15882, 13996, 13386, 22, 12346, 14560, 5532, 5740, 19486, 8672, 9961, 15704, 17129, 6966, 9491, 5493, 15921, 15177, 2962, 14778, 11133, 14681, 15815, 17560, 16388, 3750, 2683, 15433, 9197, 10369, 14037, 12459, 7645, 12969, 12590, 17504, 9649, 80, 19092, 17011, 17031, 13790, 10933, 12091, 5746, 18155, 12106, 18077, 15418, 10248, 2576, 7395, 18705, 12017, 7493, 4189, 13188, 1669, 10337, 14576, 1909, 2022, 19719, 1320, 7997, 5502, 2818, 11376, 8054, 3932, 18955, 2150, 12519, 12581, 8905, 12120, 16048, 13466, 4139, 13680, 4122, 4361, 6497, 19389, 8911, 2715, 935, 11281, 16294, 19110, 19980, 19923, 3213, 16932, 17115, 1093, 19779, 13497, 11825, 16145, 14276, 12357, 2780, 8136, 14167, 18414, 15291, 14258, 4540, 2151, 19776, 14160, 17363, 16281, 9243, 11257, 2427, 13891, 13954, 4878, 18246, 4537, 10714, 13546, 16559, 9081, 4946, 726, 2782, 18940, 10383, 15272, 13490, 14288, 19678, 610, 831, 2839, 19218, 15541, 16744, 5637, 15197, 12155, 14432, 3586, 13075, 2898, 8604, 17965, 6962, 5025, 18898, 5771, 16666, 16107, 19158, 5927, 14230, 16316, 3938, 10152, 14900, 12724, 7967, 10136, 11928, 10831, 12119, 437, 17060, 13917, 8565, 10747, 9040, 12079, 9222, 1063, 10812, 10536, 10527, 4172, 2233, 5343, 14423, 13586, 19594, 6348, 1147, 13139, 411, 12386, 3422, 3547, 15467, 17847, 5850, 17597, 7929, 14493, 481, 6174, 9977, 8352, 2338, 16322, 6684, 15143, 16739, 13130, 9309, 10228, 7962, 8735, 17813, 10432, 11565, 9351, 3682, 4913, 3423, 13765, 7691, 15181, 3023, 4641, 5199, 2480, 18904, 9354, 15589, 6927, 14984, 9671, 5002, 18305, 14023, 4894, 13291, 10112, 2841, 12746, 13745, 6477, 7180, 8721, 11817, 13769, 6313, 11663, 7328, 2321, 6062, 6519, 2650, 17776, 15249, 17513, 2564, 14679, 13017, 10172, 16617, 3387, 10028, 14162, 9980, 6487, 9441, 17219, 5940, 7772, 19867, 18191, 436, 9522, 19931, 19364, 10962, 11180, 4342, 3272, 5472, 6422, 8362, 14486, 18300, 10279, 5497, 7880, 14184, 16706, 10774, 5126, 1202, 10333, 15465, 867, 16890, 4150, 6367, 10242, 19651, 2589, 1713, 12463, 18752, 12258, 4804, 10653, 12432, 7302, 6016, 2866, 799, 15242, 14021, 2758, 17919, 4900, 9623, 7064, 11991, 12702, 1735, 10444, 332, 17021, 13283, 16988, 3362, 2117, 3059, 17973, 17151, 18002, 10332, 10360, 11367, 10547, 14396, 11585, 5416, 12093, 6910, 14993, 77, 2893, 13071, 18327, 15091, 4574, 4613, 17567, 17418, 12638, 10885, 10930, 11428, 12756, 7125, 19131, 16329, 17270, 1214, 12467, 16266, 4592, 18478, 7668, 7152, 15609, 7491, 1784, 15686, 15095, 2654, 11507, 1364, 1949, 17551, 19499, 15838, 16218, 3693, 5875, 4958, 11651, 10079, 6073, 10829, 17324, 18421, 11813, 8824, 14139, 17705, 11286, 5337, 10907, 127, 13926, 131, 19005, 10497, 10116, 18290, 6553, 5515, 5604, 12476, 586, 19666, 5831, 17727, 1941, 12438, 2647, 17923, 18864, 7672, 10603, 6722, 571, 10711], "code": ["public void registerServiceHandler(String name, Object handler) {\r\n        Map<String, Object> serviceHandlers = getServiceHandlers();\r\n        serviceHandlers.put(name, handler);\r\n    }", "private boolean tableExists ( String table ) throws SQLException { PreparedStatement statement = null ; ResultSet result = null ; try { statement = this . connection . prepareStatement ( STR_ ) ; result = statement . executeQuery ( ) ; if ( result == null ) { return BOOL_ ; } boolean found = BOOL_ ; while ( result . next ( ) ) { if ( table . equalsIgnoreCase ( result . getString ( NUM_ ) ) ) { found = BOOL_ ; } } return found ; } finally { if ( statement != null ) { statement . close ( ) ; } if ( result != null ) { result . close ( ) ; } } }", "\t public RuleBasedScanner getScribbleCodeScanner() {\n\t \tif (fCodeScanner == null)\n\t\t\tfCodeScanner= new ScribbleCodeScanner(getScribbleColorProvider());\n\t\treturn fCodeScanner;\n\t}\n", "  public void resetGUI(){\n\t stateLabel = null;\n  }\n", "public static int[] compressOneBlockOpt(final int[] inBlock,\n                int blockSize) {\n                // find the best b that may lead to the smallest overall\n                // compressed size\n                int currentB = POSSIBLE_B[0];\n                int[] outBlock = null;\n                int tmpB = currentB;\n                // deal with the large exception cases\n                boolean hasBigNum = checkBigNumbers(inBlock,\n                        POSSIBLE_B[POSSIBLE_B.length - 1], blockSize);\n                if (hasBigNum) {\n                        currentB = 4;\n                        System.out.println(\"has big num and the currentB is: \"\n                                + currentB);\n                } else {\n                        int optSize = estimateCompressedSize(inBlock, tmpB,\n                                blockSize);\n                        for (int i = 1; i < POSSIBLE_B.length; ++i) {\n                                tmpB = POSSIBLE_B[i];\n                                int curSize = estimateCompressedSize(inBlock,\n                                        tmpB, blockSize);\n                                if (curSize < optSize) {\n                                        currentB = tmpB;\n                                        optSize = curSize;\n                                }\n                        }\n                }\n\n                // compress the block using the above best b\n                outBlock = compressOneBlock(inBlock, currentB, blockSize);\n\n                return outBlock;\n        }", "  protected Area getShadeShape(Map map) {\n    final Area myShape = type.equals(FG_TYPE) ?\n      new Area() : new Area(getBoardClip());\n\n    for (GamePiece p : map.getPieces()) {\n      checkPiece(myShape, p);\n    }\n\n    return myShape;\n  }\n", "    public String indexVarName(int idx, String...vars) {\n        return vars[length()-idx-1];\n    }\n", "    public int id() {\n        return nodeID;\n    }\n", "private CGlobalSettings ( ) { }", "\tpublic void setInactiveRollOverForeground(Color newInactiveRollOverForeground) {\n\t\tColor oldValue = inactiveRollOverForeground;\n\t\tinactiveRollOverForeground = newInactiveRollOverForeground;\n\t\tfirePropertyChange(INACTIVE_ROLLOVER_BACKGROUND_CHANGED_PROPERTY, oldValue, newInactiveRollOverForeground);\n\t}\n", "public void send(CoordinatorStreamMessage message){\n  log.debug(\"Sending {}\",message);\n  try {\n    String source=message.getSource();\n    byte[] key=keySerde.toBytes(Arrays.asList(message.getKeyArray()));\n    byte[] value=null;\n    if (!message.isDelete()) {\n      value=messageSerde.toBytes(message.getMessageMap());\n    }\n    OutgoingMessageEnvelope envelope=new OutgoingMessageEnvelope(systemStream,Integer.valueOf(0),key,value);\n    systemProducer.send(source,envelope);\n  }\n catch (  Exception e) {\n    throw new SamzaException(e);\n  }\n}\n", "public boolean isEnabled ( ) { return getModel ( ) . isRunning ( ) ; }", "\tpublic void printTree() {\n\t\tif (isEmpty()) System.out.println(\"EmptyTree\");\n\t\telse printTree(root);\n\t}\n", "    public boolean removeInterceptor(PacketInterceptor interceptor) {\n        return globalInterceptors.remove(interceptor);\n    }\n", "private String createMnemonic(String text){\n  if (text == null)   return text;\n  int pos=text.indexOf('&');\n  if (pos != -1) {\n    char ch=text.charAt(pos + 1);\n    if (ch != ' ') {\n      setMnemonic(ch);\n      return text.substring(0,pos) + text.substring(pos + 1);\n    }\n  }\n  return text;\n}\n", "private String getBundlePath(String contextPath) {\n\t\tString bundlePath = contextPath;\n\t\tint idx = -1;\n\t\tif (bundlePath.startsWith(JawrConstant.URL_SEPARATOR)) {\n\t\t\tidx = bundlePath.indexOf(JawrConstant.URL_SEPARATOR, 1);\n\t\t} else {\n\t\t\tidx = bundlePath.indexOf(JawrConstant.URL_SEPARATOR, 1);\n\t\t}\n\n\t\tif (idx != -1) {\n\t\t\tbundlePath = bundlePath.substring(idx);\n\t\t}\n\t\treturn bundlePath;\n\t}", "public boolean hasEnoughSpaceOnSdCard ( long updateSize ) { RootTools . log ( STR_ ) ; String status = Environment . getExternalStorageState ( ) ; if ( ! status . equals ( Environment . MEDIA_MOUNTED ) ) { return BOOL_ ; } File path = Environment . getExt", "public static void keepAlive ( final boolean keepAlive ) { setProperty ( STR_ , Boolean . toString ( keepAlive ) ) ; }", "    private void verifySerialization(SegmentedTimeline a1) {\n        SegmentedTimeline a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            a2 = (SegmentedTimeline) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(a1, a2);\n    }\n", "\tprotected LinkedList merge(LinkedList child, LinkedList parent) {\n\t\treturn merge(child, parent, true);\n\t}\n", "private JsonObject copyWithContext(JsonObject jsonObj,int context){\n  JsonObject copy=new JsonObject();\n  for (  Map.Entry<String,JsonElement> entry : jsonObj.entrySet()) {\n    String field=entry.getKey();\n    if (!field.equals(Utils.CHILDREN_PROP)) {\n      copy.add(field,entry.getValue());\n    }\n  }\n  copy.addProperty(CONTEXT_PROP,Integer.valueOf(context));\n  return copy;\n}\n", "\tprivate void handleRemove() {\n\t\tIStructuredSelection ssel = (IStructuredSelection) getViewerSelection();\n\n\t\tList commands = new ArrayList();\n\t\tfor (Iterator iter = ssel.iterator(); iter.hasNext();) {\n\t\t\tFormBeanType formBean = (FormBeanType) iter.next();\n\t\t\tCommand cmd = RemoveCommand.create(getEditingDomain(),\n\t\t\t\t\tgetFormBeans(), StrutsConfigPackage.eINSTANCE\n\t\t\t\t\t\t\t.getFormBeansType_FormBean(), formBean);\n\t\t\tcommands.add(cmd);\n\t\t}\n\n\t\tCompoundCommand cmd = new CompoundCommand(commands);\n\t\tif (cmd.canExecute()) {\n\t\t\tgetEditingDomain().getCommandStack().execute(cmd);\n\t\t}\n\t}\n", "public static IOFileFilter ageFileFilter ( File cutoffReference ) { return new AgeFileFilter ( cutoffReference ) ; }", "public void setDiffuse(float diffuse[]){\n        for(int i = 0; i<diffuse.length;i++)\n            this.diffuse[i]=diffuse[i];\n        Di = true;\n    }", "public void setTriggerEvents(java.util.Collection<String> triggerEvents) {\n        if (triggerEvents == null) {\n            this.triggerEvents = null;\n            return;\n        }\n\n        this.triggerEvents = new com.amazonaws.internal.SdkInternalList<String>(triggerEvents);\n    }", "public static byte[] decodeChecked(String input) throws ParseException {\n  byte[] decoded=decode(input);\n  if (decoded.length < 4) {\n    throw new ParseException(\"Input too short\",0);\n  }\n  byte[] data=Arrays.copyOfRange(decoded,0,decoded.length - 4);\n  byte[] checksum=Arrays.copyOfRange(decoded,decoded.length - 4,decoded.length);\n  byte[] actualChecksum=Arrays.copyOfRange(hashTwice(data),0,4);\n  if (!Arrays.equals(checksum,actualChecksum)) {\n    throw new ParseException(\"Checksum does not validate\",0);\n  }\n  return data;\n}\n", "    public boolean isUserInAllRoles(FacesContext ctx, List roleDefinitions){\n        return false;\n    }\n", "@Override\n\tpublic FileBaseStatistics getStatistics(BaseStatistics cachedStats) throws IOException {\n\t\t\n\t\tfinal FileBaseStatistics cachedFileStats = cachedStats instanceof FileBaseStatistics ?\n\t\t\t(FileBaseStatistics) cachedStats : null;\n\t\t\t\t\n\t\ttry {\n\t\t\treturn getFileStats(cachedFileStats, getFilePaths(), new ArrayList<>(getFilePaths().length));\n\t\t} catch (IOException ioex) {\n\t\t\tif (LOG.isWarnEnabled()) {\n\t\t\t\tLOG.warn(\"Could not determine statistics for paths '\" + Arrays.toString(getFilePaths()) + \"' due to an io error: \"\n\t\t\t\t\t\t+ ioex.getMessage());\n\t\t\t}\n\t\t}\n\t\tcatch (Throwable t) {\n\t\t\tif (LOG.isErrorEnabled()) {\n\t\t\t\tLOG.error(\"Unexpected problem while getting the file statistics for paths '\" + Arrays.toString(getFilePaths()) + \"': \"\n\t\t\t\t\t\t+ t.getMessage(), t);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// no statistics available\n\t\treturn null;\n\t}", "public <T> Buffer writeObject(T object, Buffer buffer) {\n    writeObject(object, (BufferOutput<?>) buffer);\n    return buffer;\n  }", "\tprivate String getDictValue(String dict,String key) {\n\t\tint level = -1;\n\t    StringTokenizer st = new StringTokenizer(dict);\n\t    String tok;\n\t    StringBuffer value = new StringBuffer();\n\t    \n\t    key = \"/\" + key;\n\t    \n\t    while (st.hasMoreTokens()) {\n\t    \ttok = st.nextToken();\n\t    \tif (tok.equals(\"<<\")) {\n\t    \t\tlevel++;\n\t    \t} else if (tok.equals(\">>\")) {\n\t    \t\tlevel--;\n\t    \t\tif ( level ==0 ) {\n\t    \t\t\treturn null;\n\t    \t\t}\n\t    \t} else {\n\t    \t\tif (tok.equals(key)) {\n\t    \t\t\twhile (st.hasMoreTokens()) {\n\t    \t\t\t\ttok = st.nextToken();\n\t    \t\t\t\tif (!tok.startsWith(\"/\") && !tok.equals(\">>\")) {\n\t    \t\t\t\t\tvalue.append(tok).append(' ');\n\t    \t\t\t\t} else\n\t    \t\t\t\t\treturn value.toString().trim();\n\t    \t\t\t}\n\t    \t\t}\n\t    \t}\n\t    }\n\t\treturn null;\n\t}\n", "public static <T extends Comparable<?>> ComparableEntityPath<T> comparableEntityPath(Class<? extends T> type,\n                                                                             PathMetadata metadata) {\n        return new ComparableEntityPath<T>(type, metadata);\n    }", "  public void setAngle(float Angle_Arg) {\n    debug(1, \"setAngle DSViewSplitter: \" + Angle_Arg);\n\n    for (Enumeration Enumeration1 = ViewList.keys(); Enumeration1.hasMoreElements(); ) {\n      Shape  Shape1  = (Shape)Enumeration1.nextElement();\n\n      if (Shape1.contains(new Point(0, 0))) {\n        DSView  DSView1  = (DSView)ViewList.get(Shape1);\n\n        DSView1.setAngle(Angle_Arg);\n        return;\n      }\n    }\n  } // setAngle()\n", "public final B requestStartTime(long requestStartTimeNanos, long requestStartTimeMicros) {\n        this.requestStartTimeNanos = requestStartTimeNanos;\n        this.requestStartTimeMicros = requestStartTimeMicros;\n        requestStartTimeSet = true;\n      ", "public static void main(String[] args){\n  System.setProperty(\"spring.config.name\",\"web-server\");\n  SpringApplication.run(WebServer.class,args);\n}", "  private void updateNetworkWeights(double l, double m) {\n    for (int noc = 0; noc < m_numClasses; noc++) {\n      //update weights\n      m_outputs[noc].updateWeights(l, m);\n    }\n\n  }\n", "    protected void gotoTapePosition(final int position) {\n        this.tapePosition = position;\n    }\n", "  private void genMdfGetMofName(ModelElement m) {\n    line(\"public String mdfGetMofName()\");\n    sblock();\n    line(\"return \\\"\" + m.getName() + \"\\\";\");\n    eblock();\n  }\n", "    protected Icon getIconForType(int messageType) {\n        if ((messageType < 0) || (messageType > 3)) {\n            return null;\n        }\n\n        switch (messageType) {\n        case 0:\n            return UIManager.getIcon(\"OptionPane.errorIcon\");\n\n        case 1:\n            return UIManager.getIcon(\"OptionPane.informationIcon\");\n\n        case 2:\n            return UIManager.getIcon(\"OptionPane.warningIcon\");\n\n        case 3:\n            return UIManager.getIcon(\"OptionPane.questionIcon\");\n        }\n\n        return null;\n    }\n", "    public void initReceiver(boolean debug) {\n        receiver_debug = debug;\n        udppackagecombine = new UDPPackageCombine(debug);\n\n        udppackagecombine.start();\n    }\n", "\tpublic void visitNameExpression(JNameExpression self) {\n\t\tif (self.prefix != null) {\n\t\t\tself.prefix.accept(this);\n\t\t\tprint('.');\n\t\t}\n\t\tprint(self.ident);\n\t}\n", "public List<ShovelStatus> getShovelsStatus(String vhost) {\n    final URI uri = uriWithPath(\"./shovels/\" + encodePathSegment(vhost));\n    final ShovelStatus[] result = this.getForObjectReturningNullOn404(uri, ShovelStatus[].class);\n    return asListOrNull(result);\n  }", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "    public void executeAfs(Str str){\n    \tDebug.println(\"\\nEl AFS \" +\n\t\t      (runMachine(str)?\"SI\":\"NO\") +\n\t\t      \" acepta \" + str);\n    }\n", "static <K, E> List<E> getList(Map<K, List<E>> map, K k)\r\n    {\r\n        List<E> list = map.get(k);\r\n        if (list == null)\r\n        {\r\n            list = new ArrayList<E>();\r\n            map.put(k, list);\r\n        }\r\n        return list;\r\n    }", "public static HttpRequest put ( final CharSequence url ) throws HttpRequestException { return new HttpRequest ( url , METHOD_PUT ) ; }", "protected abstract WorkItem poll ( ) ;", "@Override public synchronized void stop(){\n  if (running) {\n    if (statusLogger != null) {\n      statusLogger.cancel(false);\n    }\n    deduplicator.stop();\n    clear();\n    running=false;\n  }\n}\n", "public static Counter<String> readWeightsPlain(String filename) throws IOException {\n  LineNumberReader reader=new LineNumberReader(new FileReader(filename));\n  Counter<String> wts=new ClassicCounter<String>();\n  for (String line; (line=reader.readLine()) != null; ) {\n    String[] input=line.split(\" \");\n    if (input.length != 2) {\n      reader.close();\n      throw new IOException(\"Illegal input in weight file \" + filename + \": \"+ line);\n    }\n    wts.setCount(input[0],Double.parseDouble(input[1]));\n  }\n  reader.close();\n  return wts;\n}\n", "\tprotected String registeredInterests() {\n\t\treturn registeredInterests(null);\n\t}\n", "public void resume(\n      long remotePos, long remoteImpliedPos, Function<Mono<Long>, Mono<Void>> resumeFrameSent) {\n    /*race between sendFrame and doResume may lead to duplicate frames on resume store*/\n    dispatch(new Resume(remotePos, remoteImpliedPos, resumeFrameSent));\n  }", "    public void setRemoteFiles(String remoteFiles) {\n        this.remoteFiles = remoteFiles;\n        remoteFileStrings = remoteFiles.split(\"\\\\s+\");\n    }\n", "void unregister ( ) { mListener = null ; mMediaFactory = null ; }", "public INode[] getExistingPathINodes(String path) {\n    byte[][] components = getPathComponents(path);\n    INode[] inodes = new INode[components.length];\n\n    this.getExistingPathINodes(components, inodes);\n    \n    return inodes;\n  }", "        public void onDebuggerStatement(Context cx) {\n            dim.handleBreakpointHit(this, cx);\n        }\n", "@Override public Promise<AuthStatus,AuthenticationException> secureResponse(MessageInfoContext messageInfo,Subject subject){\n  return newResultPromise(SEND_SUCCESS);\n}\n", "public void deregister(Location location){\n  if (location == null) {\n    return;\n  }\n  location.dispose();\n  Integer oldSize=Integer.valueOf(_locationHashTable.size());\n  _locationHashTable.remove(location.getId());\n  setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_locationHashTable.size()));\n}\n", "public PageFlowController getPageFlowForPath( RequestContext context, String path )\n        throws InstantiationException, IllegalAccessException\n    {\n        HttpServletRequest request = context.getHttpRequest();\n        HttpServletResponse response = context.getHttpResponse();\n        PageFlowController cur = PageFlowUtils.getCurrentPageFlow( request, getServletContext() );\n        String parentDir = PageFlowUtils.getModulePathForRelativeURI( path );\n\n        //\n        // Reinitialize transient data that may have been lost on session failover.\n        //\n        if ( cur != null )\n            cur.reinitialize( request, response, getServletContext() );\n\n        //\n        // If there's no current PageFlow, or if the current PageFlowController has a module path that\n        // is incompatible with the current request URI, then create the appropriate PageFlowController.\n        //\n        if ( cur == null || ! PageFlowUtils.getModulePathForRelativeURI( cur.getURI() ).equals( parentDir ) )\n        {\n            String className = null;\n            try\n            {\n                className = InternalUtils.getFlowControllerClassName( parentDir, request, getServletContext() );\n                return className != null ? createPageFlow( context, className ) : null;\n            }\n            catch ( ClassNotFoundException e )\n            {\n                if ( LOG.isInfoEnabled() )\n                    LOG.info(\"No page flow exists for path \" + path +\n                        \".  Unable to load class \\\"\" + className + \"\\\".  Cause: \" + e, e);\n                return null;\n            }\n        }\n\n        return cur;\n    }", "    protected void put(String key, byte[] value) {\n        if (value == null || key == null)\n            throw new NullPointerException(\"key and value must not be null.\");\n        payload.put(key, value);\n    }\n", "    public void flush() throws IOException {\n        if (closed)\n            throw new IOException (\n                MessageService.getTextMessage(MessageId.OBJECT_CLOSED));\n        // A no-op.\n        // Flushing is currently the responsibility of the underlying stream(s).\n    }\n", "public String classifierTipText(){\n  return \"The classifier to use for classification.\";\n}\n", "private static List<String> fixArguments(List<String> command) {\n    if (!IS_OS_WINDOWS) {\n      return command;\n    }\n    List<String> result = new ArrayList<String>(command);\n    for (ListIterator it = result.listIterator(); it.hasNext(); ) {\n      if (\"\".equals(it.next())) {\n        it.set(\"\\\"\\\"\");\n      }\n    }\n    return result;\n  }", "public void addListener ( final ITagListener listener ) { m_listeners . addListener ( listener ) ; }", "   private String getString(ArrayList<String> stringList) {\n\n      StringBuffer buf = new StringBuffer();\n\n      for (int i = 0; i < stringList.size(); i++) {\n         buf.append(stringList.get(i));\n         buf.append(\" \");\n      }\n\n      return buf.toString();\n   }\n", "protected boolean checkImmutable(String resourceName) {\n\n        boolean resourceImmutable = false;\n        if (getImmutableResources().contains(resourceName)) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\n                    Messages.get().getBundle().key(Messages.LOG_IMPORTEXPORT_RESOURCENAME_IMMUTABLE_1, resourceName));\n            }\n            // this resource must not be modified by an import if it already exists\n            String storedSiteRoot = getCms().getRequestContext().getSiteRoot();\n            try {\n                getCms().getRequestContext().setSiteRoot(\"/\");\n                getCms().readResource(resourceName);\n                resourceImmutable = true;\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\n                        Messages.get().getBundle().key(Messages.LOG_IMPORTEXPORT_IMMUTABLE_FLAG_SET_1, resourceName));\n                }\n            } catch (CmsException e) {\n                // resourceNotImmutable will be true\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\n                        Messages.get().getBundle().key(\n                            Messages.LOG_IMPORTEXPORT_ERROR_ON_TEST_IMMUTABLE_1,\n                            resourceName),\n                        e);\n                }\n            } finally {\n                getCms().getRequestContext().setSiteRoot(storedSiteRoot);\n            }\n        }\n        return resourceImmutable;\n    }", "public void pop(){\n  Deque<TaskContext> stack=contextStacks.get();\n  if (stack == null) {\n    throw new IllegalStateException(\"Invalid execution context stack state: \" + stack + \" trying to remove: \"+ this);\n  }\n  final TaskContext last=stack.pollLast();\n  if (last != this) {\n    if (last != null) {\n      stack.addLast(last);\n    }\n    throw new IllegalStateException(\"Invalid execution context stack state: \" + stack + \" trying to remove: \"+ this+ \" but got: \"+ last);\n  }\n}\n", "public LongArray(boolean ordered,long[] array){\n  this(ordered,array.length);\n  size=array.length;\n  System.arraycopy(array,0,items,0,size);\n}\n", "@Override\n    public ListEntityRecognizersResult listEntityRecognizers(ListEntityRecognizersRequest request) {\n        request = beforeClientExecution(request);\n        return executeListEntityRecognizers(request);\n    }", "private static void logThrow ( Level level , String className , String methodName , String message , Object [ ] args , Throwable thrown ) { java . util . logging . LogRecord lr = new java . util . logging . LogRecord ( level , message ) ; lr . setLoggerNa", "\t\tprivate boolean affects(Thing cloud, Thing target) {\n\t\t\tString s=cloud.getString(\"AffectType\");\n\t\t\treturn target.getFlag(s);\n\t\t}\n", "public static boolean isSupportedAttr ( String attrName ) { if ( BACKGROUND . equals ( attrName ) ) { return BOOL_ ; } if ( TEXT_COLOR . equals ( attrName ) ) { return BOOL_ ; } if ( LIST_SELECTOR . equals ( attrName ) ) { return BOOL_ ; } if ( DIVIDER . ", "\tpublic void applyRenderKit () {\n\t\tif (this.renderKit != null) {\n\t\t\tGracelets.getGraceletsContext().setSpecifiedRenderKitId(this.renderKit.getName());\n\t\t}\n\t}\n", "public static Talon talon ( int pwmPort ) { return pwmRegistrar . fetch ( pwmPort , Talon . class , null ) ; }", "\t  public int compare(Object obj1, Object obj2) {\n\t    int rc = 0;\n\t    DecodedPacket p1 = (DecodedPacket) obj1;\n\t    DecodedPacket p2 = (DecodedPacket) obj2;\n\t    \n\t    rc=p1.getLine()[column].compareTo(p2.getLine()[column]);\n\t    if (direction == DESCENDING) {\n\t      rc = -rc;\n\t    }\n\t    return rc;\n\n\t    \n\t  }\n", "public ListVoiceConnectorTerminationCredentialsResult withUsernames(String... usernames) {\n        if (this.usernames == null) {\n            setUsernames(new java.util.ArrayList<String>(usernames.length));\n        }\n        for (String ele : usernames) {\n            this.usernames.add(ele);\n        }\n        return this;\n    }", "    public void setTitleFont(Font font) {\n        m_title_font = font;\n\n        if (m_label != null) {\n            m_label.setFont(font);\n        }\n    }\n", "public Response newFixedLengthResponse ( Response . IStatus status , String mimeType , InputStream data , long totalBytes ) { return new Response ( status , mimeType , data , totalBytes ) ; }", "@Override public Object createStatement(Object proxy,Method method,Object[] args,Object statement,long time){\n  try {\n    String name=method.getName();\n    Constructor<?> constructor=null;\n    String sql=null;\n    if (compare(CREATE_STATEMENT,name)) {\n      constructor=getConstructor(CREATE_STATEMENT_IDX,Statement.class);\n    }\n else     if (compare(PREPARE_STATEMENT,name)) {\n      constructor=getConstructor(PREPARE_STATEMENT_IDX,PreparedStatement.class);\n      sql=(String)args[0];\n    }\n else     if (compare(PREPARE_CALL,name)) {\n      constructor=getConstructor(PREPARE_CALL_IDX,CallableStatement.class);\n      sql=(String)args[0];\n    }\n else {\n      return statement;\n    }\n    return createDecorator(proxy,method,args,statement,constructor,sql);\n  }\n catch (  Exception x) {\n    if (x instanceof InvocationTargetException) {\n      Throwable cause=x.getCause();\n      if (cause instanceof ThreadDeath) {\n        throw (ThreadDeath)cause;\n      }\n      if (cause instanceof VirtualMachineError) {\n        throw (VirtualMachineError)cause;\n      }\n    }\n    logger.warn(\"Unable to create statement proxy for slow query report.\",x);\n  }\n  return statement;\n}\n", "  public void insert(final URL url, final T container) throws Exception {\n    Reader reader = null;\n    try {\n      InputStream in = url.openStream();\n      if (in == null) {\n        throw new IOException(IO_ERROR_MSG + url.toString());\n      }\n      reader = new InputStreamReader(in);\n      insert(reader, container);\n    } finally {\n      try {\n        reader.close();\n      } catch (Exception ex) {\n        // intentionally empty\n      }\n    }\n  }\n", "\tprivate void heapRender(Graphics g, int x, int y, int w, int h) {\n\t\tbufferLock.lock();\n\t\ttry {\n\t\t\tupdatePending = false;\n\t\t\tg.drawImage(currentImage, x, y, w, h, null);\n\t\t} finally {\n\t\t\tbufferLock.unlock();\n\t\t}\n\t}\n", "public boolean shouldMerge(Entity e1,Entity e2){\n  return true;\n}", "@Override\n\tpublic List<CommercePriceListAccountRel> getCommercePriceListAccountRelsByUuidAndCompanyId(\n\t\tString uuid, long companyId) {\n\t\treturn commercePriceListAccountRelPersistence.findByUuid_C(uuid,\n\t\t\tcompanyId);\n\t}", "   public void close() {\n      if (leaf != null)\n         leaf.close();\n   }\n", "private void createTheUserForSingleUserMode(){\n  if (!isInSingleUserMode()) {\n    return;\n  }\n  try {\n    final User user=dbLogic.getOrCreateUser(singleUserName);\n    if (user == null) {\n      logger.log(Level.SEVERE,\"Could not create single user user\");\n      return;\n    }\n    if (!user.getIsSingleUser()) {\n      user.setIsSingleUser(true);\n    }\n    if (!user.getIsAdmin()) {\n      user.setIsAdmin(true);\n    }\n    dbLogic.commit();\n  }\n catch (  final PersistenceException e) {\n    logger.log(Level.SEVERE,\"Could not create single user user\",e);\n  }\n}\n", "void onTargetChannelConnected ( String groupName , String sourceMemberName , Object sourceUniqueId ) ;", "    public FGLocation _oprSubtrOut(final FGLocation l) {\n        return new FGLocation(mECLoc._oprSubtrOut(l.mECLoc));\n    }\n", "private void sumUsingPrimitiveStream ( ) { int sumQuantity = trades . stream ( ) . mapToInt ( null ) . sum ( ) ; System . out . println ( STR_ + sumQuantity ) ; }", "public static List<String> splitFileNames(String fileNames){\n  if (fileNames == null)   return Collections.<String>emptyList();\n  List<String> result=new ArrayList<>();\n  for (  String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n    result.add(file.replaceAll(\"\\\\\\\\(?=,)\",\"\"));\n  }\n  return result;\n}\n", "\tpublic void showDialog(BaseDialogPage dialogPage, String title, int width, int height) {\n\t\tXProject project = XProjectManager.getCurrentProject();\n\t\tXPageDialog dialog = new XPageDialog( project.getAppFrame() );\n\t\tdialog.showDialog( dialogPage, title, width, height, false);\n\t}\n", "public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { request . getSession ( ) . setAttribute ( STR_ , STR_ ) ; response . sendRedirect ( STR_ ) ; return ; }", "    public void addCycleCommand(Command c) {\n        cycleCommandList.add(c);\n    }\n", "public static SimpleMatrix convertSimple( DMatrixRBlock A ) {\n        DMatrixRMaj B = ConvertDMatrixStruct.convert(A, null);\n\n        return SimpleMatrix.wrap(B);\n    }", "    public double invCDF(double p) {\n        if ((p < 0.0) || (p > 1.0))\n            throw new IllegalArgumentException(\"Probability must be [0,1]\");\n\n        checkTotalProb();\n        \n        double x = 0.0;\n        ListIterator iter = myProbabilityPoints.listIterator();\n        \n        while (iter.hasNext()) {\n            ProbPoint pp = (ProbPoint)iter.next();\n            double cp = pp.getCumProbability();\n            if( p <= cp) {\n                x = pp.getValue();\n                break;\n            }\n        }\n        return(x);\n    }    \n", "    protected String getServiceLoader() throws WfException {\n        GenericValue dataObject = getRuntimeObject();\n\n        if (dataObject.get(\"serviceLoaderName\") == null)\n            throw new WfException(\"No service loader name defined\");\n        return dataObject.getString(\"serviceLoaderName\");\n    }\n", "public static Trends createTrends(final String rawJSON) throws TwitterException {\n  try {\n    return trendsConstructor.newInstance(rawJSON);\n  }\n catch (  final InstantiationException e) {\n    throw new TwitterException(e);\n  }\ncatch (  final IllegalAccessException e) {\n    throw new TwitterException(e);\n  }\ncatch (  final InvocationTargetException e) {\n    throw new AssertionError(e);\n  }\n}\n", "public static void recycleNodes ( Collection < AccessibilityNodeInfoCompat > nodes ) { if ( nodes == null ) { return ; } for ( AccessibilityNodeInfoCompat node : nodes ) { if ( node != null ) { node . recycle ( ) ; } } nodes . clear ( ) ; }", "    public void finer(Object msg) {\n        logger.log(FQCN, Finer.FINER, msg, null);\n    }\n", "public void addRequest ( RecordRequest request ) { if ( request . getRequestSize ( ) + getRequestSize ( ) > NUM_ ) { throw new IllegalArgumentException ( ) ; } if ( records == null ) { records = new RecordRequest [ NUM_ ] ; } else { RecordRequest old [ ] = records ; records = new RecordRequest [ old . length + NUM_ ] ; System . arraycopy ( old , NUM_ , records , NUM_ , old . length ) ; } records [ records . length - NUM_ ] = request ; setDataLength ( getRequestSize ( ) ) ; }", "    public void refresh() {\n        try {\n            ((BasicListModel) _combo.getModel()).setData(_datum.getEntry().getCollection().getOriginalVarieties());\n        } catch (DatabaseException e) {\n            Dialogs.genericError(e);\n        }\n    }\n", "\tpublic void clearStatistics() {\n\t\tfor( int ix = 0; ix < optimizations.size(); ix++ ) {\n\t\t\tByteCodePattern bcp = optimizations.get(ix);\n\t\t\tbcp.matchCount = 0;\n\t\t}\n\t}\n", "protected boolean optimize(Polygon2D_F64 seed , Polygon2D_F64 current ) {\n\n\t\tprevious.set(seed);\n\n\t\t// pixels squares is faster to compute\n\t\tdouble convergeTol = convergeTolPixels*convergeTolPixels;\n\n\t\t// initialize the lines since they are used to check ", "public < T > T to ( String tailAPIUrl , Class < T > type , T instance ) throws IOException { HttpURLConnection connection = null ; try { connection = setupConnection ( root . getAPIUrl ( tailAPIUrl ) ) ; if ( hasOutput ( ) ) { submitData ( connection ) ; } else if ( STR_ . equals ( method ) ) { connection . setDoOutput ( BOOL_ ) ; connection . setFixedLengthStreamingMode ( NUM_ ) ; } try { return parse ( connection , type , instance ) ; } catch ( IOException e ) { handleAPIError ( e , connection ) ; } return null ; } finally { if ( connection != null ) { connection . disconnect ( ) ; } } }", "public PeriodAxisLabelInfo(Class periodClass,DateFormat dateFormat,RectangleInsets padding,Font labelFont,Paint labelPaint,boolean drawDividers,Stroke dividerStroke,Paint dividerPaint){\n  ParamChecks.nullNotPermitted(periodClass,\"periodClass\");\n  ParamChe", "@Override\n    public Object mapSequence(Object sequence) {\n        List<Long> longs = (List<Long>) sequence;\n        List<List<Object>> ret = new ArrayList<>();\n        for (Long l : longs)\n            ret.add((List<Object>) map(l));\n        return ret;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"DeriveColumnsFromTimeTransform(timeColumn=\\\"\").append(columnName).append(\"\\\",insertAfter=\\\"\")\n                        .append(insertAfter).append(\"\\\",derivedColumns=(\");\n\n        boolean first = true;\n        for (DerivedColumn d : derivedColumns) {\n            if (!first)\n                sb.append(\",\");\n            sb.append(d);\n            first = false;\n        }\n\n        sb.append(\"))\");\n\n        return sb.toString();\n    }\n\n    /**\n     * The output column name\n     * after the operation has been applied\n     *\n     * @return the output column name\n     */\n    @Override\n    public String outputColumnName() {\n        return outputColumnNames()[0];\n    }\n\n    /**\n     * The output column names\n     * This will often be the same as the input\n     *\n     * @return the output column names\n     */\n    @Override\n    public String[] outputColumnNames() {\n        String[] ret = new String[derivedColumns.size()];\n        for (int i = 0; i < ret.length; i++)\n            ret[i] = derivedColumns.get(i).columnName;\n        return ret;\n    }\n\n    /**\n     * Returns column names\n     * this op is meant to run on\n     *\n     * @return\n     */\n    @Override\n    public String[] columnNames() {\n        return new String[] {columnName()};\n    }\n\n    /**\n     * Returns a singular column name\n     * this op is meant to run on\n     *\n     * @return\n     */\n    @Override\n    public String columnName() {\n        return columnName;\n    }\n\n    public static class Builder {\n\n        private final String columnName;\n        private String insertAfter;\n        private final List<DerivedColumn> derivedColumns = new ArrayList<>();\n\n\n        /**\n         * @param timeColumnName The name of the time column from which to derive the new values\n         */\n        public Builder(String timeColumnName) {\n            this.columnName = timeColumnName;\n            this.insertAfter = timeColumnName;\n        }\n\n        /**\n         * Where should the new columns be inserted?\n         * By default, they will be inserted after the source column\n         *\n         * @param columnName Name of the column to insert the derived columns after\n         */\n        public Builder insertAfter(String columnName) {\n            this.insertAfter = columnName;\n            return this;\n        }\n\n        /**\n         * Add a String column (for example, human readable format), derived from the time\n         *\n         * @param columnName Name of the new/derived column\n         * @param format     Joda time format, as per <a href=\"http://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html\">http://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html</a>\n         * @param timeZone   Timezone to use for formatting\n         */\n        public Builder addStringDerivedColumn(String columnName, String format, DateTimeZone timeZone) {\n            derivedColumns.add(new DerivedColumn(columnName, ColumnType.String, format, timeZone, null));\n            return this;\n        }\n\n        /**\n         * Add an integer derived column - for example, the hour of day, etc. Uses timezone from the time column metadata\n         *\n         * @param columnName Name of the column\n         * @param type       Type of field (for example, DateTimeFieldType.hourOfDay() etc)\n         */\n        public Builder addIntegerDerivedColumn(String columnName, DateTimeFieldType type) {\n            derivedColumns.add(new DerivedColumn(columnName, ColumnType.Integer, null, null, type));\n            return this;\n        }\n\n        /**\n         * Create the transform instance\n         */\n        public DeriveColumnsFromTimeTransform build() {\n            return new DeriveColumnsFromTimeTransform(this);\n        }\n    }\n\n    @JsonInclude(JsonInclude.Include.NON_NULL)\n    @EqualsAndHashCode(exclude = \"dateTimeFormatter\")\n    @Data\n    @JsonIgnoreProperties({\"dateTimeFormatter\"})\n    public static class DerivedColumn implements Serializable {\n        private final String columnName;\n        private final ColumnType columnType;\n        private final String format;\n        private final DateTimeZone dateTimeZone;\n        @JsonSerialize(using = DateTimeFieldTypeSerializer.class)\n        @JsonDeserialize(using = DateTimeFieldTypeDeserializer.class)\n        private final DateTimeFieldType fieldType;\n        private transient DateTimeFormatter dateTimeFormatter;\n\n        //        public DerivedColumn(String columnName, ColumnType columnType, String format, DateTimeZone dateTimeZone, DateTimeFieldType fieldType) {\n        public DerivedColumn(@JsonProperty(\"columnName\") String columnName,\n                        @JsonProperty(\"columnType\") ColumnType columnType, @JsonProperty(\"format\") String format,\n                        @JsonProperty(\"dateTimeZone\") DateTimeZone dateTimeZone,\n                        @JsonProperty(\"fieldType\") DateTimeFieldType fieldType) {\n            this.columnName = columnName;\n            this.columnType = columnType;\n            this.format = format;\n            this.dateTimeZone = dateTimeZone;\n            this.fieldType = fieldType;\n            if (format != null)\n                dateTimeFormatter = DateTimeFormat.forPattern(this.format).withZone(dateTimeZone);\n        }\n\n        @Override\n        public String toString() {\n            return \"(name=\" + columnName + \",type=\" + columnType + \",derived=\" + (format != null ? format : fieldType)\n                            + \")\";\n        }\n\n        //Custom serialization methods, because Joda Time doesn't allow DateTimeFormatter objects to be serialized :(\n        private void writeObject(ObjectOutputStream out) throws IOException {\n            out.defaultWriteObject();\n        }\n\n        private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n            in.defaultReadObject();\n            if (format != null)\n                dateTimeFormatter = DateTimeFormat.forPattern(format).withZone(dateTimeZone);\n        }\n    }\n}", "public static int[] compute(int[] obs, int[] states, double[] startProb, double[][] transProb, double[][] emitProb) {\n        double[][] v = new double[obs.length][states.length];\n        int[][] path = new int[states.length][obs.length];\n\n        for (in", "    public void release() {\n\n        super.release();\n        this.page = null;\n        this.name = \"user\";\n\n    }\n", "void typeDeleted ( final BaseType deletedType ) ;", "public ResultSet executeQuery(String sql) throws GenericDataSourceException, GenericEntityException {\n  prepareStatement(sql);\n  return executeQuery();\n}\n", "public void add ( OutputStream stream ) { outs . add ( stream ) ; }", "public CDumpAllWaiter ( final IDebugger debugger , final IAddress offset , final int size ) { m_debugger = Preconditions . checkNotNull ( debugger , STR_ ) ; m_offset = Preconditions . checkNotNull ( offset , STR_ ) ; m_size = size ; debugger . addListener ( m_debuggerListener ) ; debugger . getProcessManager ( ) . addListener ( m_processListener ) ; }", "    public void updateRecord(Record record, boolean logUndo, Data old) throws SQLException {\n        synchronized (database) {\n            if (trace.isDebugEnabled()) {\n                if (!record.isChanged()) {\n                    trace.debug(\"updateRecord \" + record.toString());\n                }\n            }\n            checkOpen();\n            database.checkWritingAllowed();\n            record.setChanged(true);\n            int pos = record.getPos();\n            allocatePage(pos);\n            cache.update(pos, record);\n            if (logUndo && !recoveryRunning) {\n                if (old == null) {\n                    old = readPage(pos);\n                }\n                log.addUndo(pos, old);\n            }\n        }\n    }\n", "public void run()\n    {\n        Object objMessage = null;\n        String[] files = this.getFileList();\n        if (files == null)\n            return;\n        \n        for (String strFile : files)\n        {\n            m_reader = this.getReader(strFile);\n        \n            try {\n                while (true)\n                {\n                    objMessage = m_reader.readObject();\n                    if (objMessage == null)\n                        break;  // EOF = Done\n                    \n                    BaseBuffer buffer = new VectorBuffer((Vector)objMessage, BaseBuffer.PHYSICAL_FIELDS | BaseBuffer.MODIFIED_ONLY);\n                    buffer.setHeaderCount(3);\n                    String strTrxType = buffer.getHeader().toString();\n                    String strTableName = buffer.getHeader().toString();\n                    String strKey = buffer.getHeader().toString();\n                    \n                    try {\n                        Record record = this.getRecord(strTableName);\n                        if (record == null)\n                        {\n                        \tClassInfo recClassInfo = (ClassInfo)this.getMainRecord();\n                            recClassInfo.addNew();\n                            recClassInfo.setKeyArea(ClassInfo.CLASS_NAME_KEY);\n                            recClassInfo.getField(ClassInfo.CLASS_NAME).setString(strTableName);\n                            if (recClassInfo.seek(DBConstants.EQUALS))\n                            {\n                                strTableName = recClassInfo.getPackageName(null) + '.' + strTableName;\n                                record = Record.makeRecordFromClassName(strTableName, this);\n                                this.disableAllListeners(record);\n                                record.setAutoSequence(false);\n                            }\n                            else\n                            {\n                                if (!NOTRX.equalsIgnoreCase(strTrxType))\n                                    System.out.println(\"Error - table not found: \" + strTableName);\n                                continue;\n                            }\n                        }\n                        record.addNew();\n                        record.getCounterField().setString(strKey);\n                        if (ProxyConstants.ADD.equalsIgnoreCase(strTrxType))\n                        {\n                            buffer.bufferToFields(record, DBConstants.DISPLAY, DBConstants.READ_MOVE);\n                            record.add();\n                        }\n                        else if (ProxyConstants.SET.equalsIgnoreCase(strTrxType))\n                        {\n                            if (record.seek(DBConstants.EQUALS))\n                            {\n                                record.edit();\n                                buffer.bufferToFields(record, DBConstants.DISPLAY, DBConstants.READ_MOVE);\n                                record.set();\n                            }\n                            else\n                                System.out.println(\"Error - record not found: \" + strTableName + \", key: \" + strKey);\n                        }\n                        else if (ProxyConstants.REMOVE.equalsIgnoreCase(strTrxType))\n                        {\n                            if (record.seek(DBConstants.EQUALS))\n                            {\n                                record.edit();\n                                record.remove();\n                            }\n                            else\n                                System.out.println(\"Error - record not found: \" + strTableName + \", key: \" + strKey);\n                        }\n                    } catch (DBException e) {\n                        e.printStackTrace();\n                        System.out.println(\"Error - record: \" + strTableName + \", key: \" + strKey + \" trx type: \" + strTrxType);\n                    }\n                    \n                    System.out.println(\"trxType: \" + strTrxType + \" record: \" + strTableName + \" key: \" + strKey);\n                }\n                m_reader.close();\n                m_reader = null;\n            \n            } catch (EOFException e) {\n                // Ok - Done\n            } catch (IOException e) {\n                e.printStackTrace();\n            } catch (ClassNotFoundException e) {\n                e.printStackTrace();\n            }\n        }\n    }", "public void queueNow(Job job) throws InvalidJobException {\n  job.queue();\n  try {\n    executor.execute(job);\n  }\n catch (  Exception e) {\n    job.deQueue();\n  }\n}\n", "public Float read(String value){\n  return Float.valueOf(value);\n}\n", "\tprivate void verify() {\n\t\tfor (int i = 0; i < uploaders.size(); i++) {\n\t\t\tFileUpload current = (uploaders.get(i)).getFileUpload();\n\t\t\tif (current.getFilename().equals(\"\")) {\n\t\t\t\tcurrent.setName(\"\");\n\t\t\t\tinnerPanel.remove(current);\n\t\t\t}\n\t\t}\n\t}\n", "\tpublic void onModuleLoad() {\n\t\t// Set GWT container invisible\n\t\tDOM.setInnerHTML(RootPanel.get(\"loadingMsg\").getElement(),\"Checking logged-in-edness\");\n\t\t// get better exception handling\n\t\tsetUncaughtExceptionHandler();\n\t\t\n\t\tloginService.login(GWT.getHostPageBaseURL() + \"SwagSwapGWT.html\",\n\t\t\tnew AsyncCallback<LoginInfo>() {\n\t\t\t\tpublic void onFailure(Throwable error) {\n\t\t\t\t\tthrow new RuntimeException(\"can't reach SwagSwap server\", error);\n\t\t\t\t}\n\t\t\t\tpublic void onSuccess(LoginInfo result) {\n\t\t\t\t\tloginInfo = result;\n\t\t\t\t\tDOM.setInnerHTML(RootPanel.get(\"loadingMsg\").getElement(),\"Fetching Swag Items\");\n\t\t\t\t\tbuildGUI();\n\t\t\t\t}\n\t\t\t});\n\t}\n", "@Override public EnvVar addNewEnvVar(String name,Class<?> type,String value){\n  EnvVar envVar=null;\n  if (!exist(name)) {\n    envVar=new EnvVar(name,type,false);\n    envVar.setValue(value);\n    envVarList.add(envVar);\n  }\n  return envVar;\n}\n", "public boolean isExhaustiveQualifier ( ) { return isExhaustive ; }", "public static MPrintFormat copy(Properties ctx,int from_AD_PrintFormat_ID,int to_AD_PrintFormat_ID){\n  return copy(ctx,from_AD_PrintFormat_ID,to_AD_PrintFormat_ID,-1);\n}\n", "public void doEncodeSharedObject(ISharedObjectMessage so,RTMP rtmp,IoBuffer out){\n  final Output output=new org.red5.io.amf.Output(out);\n  output.putString(so.getName());\n  out.putInt(so.getVersion());\n  out.putInt(so.isPersistent() ? 2 : 0);\n  out.putInt(0);\n  int mark, len;\n  for (  ISharedObjectEvent event : so.getEvents()) {\n    byte type=SharedObjectTypeMapping.toByte(event.getType());\nswitch (event.getType()) {\ncase SERVER_CONNECT:\ncase CLIENT_INITIAL_DATA:\ncase CLIENT_CLEAR_DATA:\n      out.put(type);\n    out.putInt(0);\n  break;\ncase SERVER_DELETE_ATTRIBUTE:\ncase CLIENT_DELETE_DATA:\ncase CLIENT_UPDATE_ATTRIBUTE:\nout.put(type);\nmark=out.position();\nout.skip(4);\noutput.putString(event.getKey());\nlen=out.position() - mark - 4;\nout.putInt(mark,len);\nbreak;\ncase SERVER_SET_ATTRIBUTE:\ncase CLIENT_UPDATE_DATA:\nif (event.getKey() == null) {\nMap<?,?> initialData=(Map<?,?>)event.getValue();\nfor (Object o : initialData.keySet()) {\nout.put(type);\nmark=out.position();\nout.skip(4);\nString key=(String)o;\noutput.putString(key);\nserializer.serialize(output,initialData.get(key));\nlen=out.position() - mark - 4;\nout.putInt(mark,len);\n}\n}\n else {\nout.put(type);\nmark=out.position();\nout.skip(4);\noutput.putString(event.getKey());\nserializer.serialize(output,event.getValue());\nlen=out.position() - mark - 4;\nout.putInt(mark,len);\n}\nbreak;\ncase CLIENT_SEND_MESSAGE:\ncase SERVER_SEND_MESSAGE:\nout.put(type);\nmark=out.position();\nout.skip(4);\nserializer.serialize(output,event.getKey());\nfor (Object arg : (List<?>)event.getValue()) {\nserializer.serialize(output,arg);\n}\nlen=out.position() - mark - 4;\nout.putInt(mark,len);\nbreak;\ncase CLIENT_STATUS:\nout.put(type);\nfinal String status=event.getKey();\nfinal String message=(String)event.getValue();\nout.putInt(message.length() + status.length() + 4);\noutput.putString(message);\noutput.putString(status);\nbreak;\ndefault :\nout.put(type);\nmark=out.position();\nout.skip(4);\noutput.putString(event.getKey());\nserializer.serialize(output,event.getValue());\nlen=out.position() - mark - 4;\nout.putInt(mark,len);\nbreak;\n}\n}\n}\n", "public static byte [ ] toUtf ( String s ) throws UTFDataFormatException { try { OptimizedByteArrayOutputStream bout = new OptimizedByteArrayOutputStream ( s . length ( ) ) ; DataOutput dout = new DataOutputStream ( bout ) ; dout . writeUTF ( s ) ; return ", "public List slice ( int fromIndex ) { return slice ( fromIndex , size ( ) ) ; }", "    public void dumpProblems() {\n        for (Map.Entry<JavaProblem, Integer> problem : problems.entrySet()) {\n            // ESCA-JAVA0267\n            System.err.println(problem.getValue() + \": \" + problem.getKey().getMessage());\n        }\n    }\n", "public void adjustValues ( ) { preAdjustValues ( ) ; postAdjustValues ( ) ; }", "private void initPanel ( ) { final JPanel mainPanel = new JPanel ( new BorderLayout ( ) ) ; mainPanel . setBorder ( new TitledBorder ( STR_ ) ) ; final JPanel comboPanel = new JPanel ( new BorderLayout ( ) ) ; comboPanel . setBorder ( new EmptyBorder ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ; selectionStateBox . addItem ( SelectionState . SELECTED ) ; selectionStateBox . addItem ( SelectionState . UNSELECTED ) ; comboPanel . add ( selectionStateBox , BorderLayout . CENTER ) ; mainPanel . add ( comboPanel , BorderLayout . NORTH ) ; add ( mainPanel , BorderLayout . CENTER ) ; }", "    public void uninstallCG(final SComponent comp) {\n        final SFrame component = (SFrame) comp;\n\n        component.removeDynamicResource(ReloadResource.class);\n        component.removeDynamicResource(UpdateResource.class);\n\n        SessionHeaders.getInstance().deregisterHeaders(headers);\n    }\n", "public static boolean moveToTrash(final File file) throws FileNotFoundException {\n  if (file == null || !file.exists())   throw new FileNotFoundException();\n  final String fileName=file.getAbsolutePath();\n  final SecurityManager security=System.getSecurityManager();\n  if (security != null)   security.checkWrite(fileName);\n  return _moveToTrash(fileName);\n}\n", "private void updateFileSystem(VNXeApiClient apiClient,DbClient dbClient,FileShare fsObj){\n  SMBShareMap shareMap=fsObj.getSMBFileShares();\n  if (shareMap == null) {\n    return;\n  }\n  shareMap.remove(smbShare.getName());\n  deleteShareACLsFromDB(dbClient,fsObj);\n  dbClient.persistObject(fsObj);\n}\n", "private boolean isUserActive(String uid) throws NotFoundException {\n  try {\n    AMIdentity userIdentity=new AMIdentity(RestUtils.getToken(),uid);\n    if (debug.messageEnabled()) {\n      debug.message(\"IdentityResource.isUserActive() : UID={} isActive={}\",uid,userIdentity.isActive());\n    }\n    return userIdentity.isActive();\n  }\n catch (  IdRepoException idre) {\n    if (debug.errorEnabled()) {\n      debug.error(\"IdentityResource.isUserActive() : Invalid UID={}\",uid,idre);\n    }\n    throw new NotFoundException(\"Invalid UID, could not retrieved \" + uid,idre);\n  }\ncatch (  SSOException ssoe) {\n    if (debug.errorEnabled()) {\n      debug.error(\"IdentityResource.isUserActive() : Invalid SSOToken\",ssoe);\n    }\n    throw new NotFoundException(\"Invalid SSOToken \" + ssoe.getMessage(),ssoe);\n  }\n}\n", "private void playFirstInQueue(){\n  AudioQueueItem queueItem=mAudioQueue.poll();\n  try {\n    mMediaPlayer.setDataSource(this,queueItem.mUri);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n    endPlayback();\n    return;\n  }\n  mMediaPlayer.setOnCompletionListener(queueItem.mListener);\n  try {\n    mMediaPlayer.prepare();\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n    endPlayback();\n    return;\n  }\n  mMediaPlayer.start();\n}\n", "public ServiceFuture<BandwidthScheduleInner> createOrUpdateAsync(String deviceName, String name, String resourceGroupName, BandwidthScheduleInner parameters, final ServiceCallback<BandwidthScheduleInner> serviceCallback) {\n        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(deviceName, name, resourceGroupName, parameters), serviceCallback);\n    }", "public String writeToString(Node nodeArg) throws DOMException, LSException {\n        // return null is nodeArg is null.  Should an Exception be thrown instead?\n        if (nodeArg == null) {\n            return null;\n        }\n\n        // Should we reset the serializer configuration before each write operation?\n        // Obtain a reference to the serializer to use\n        Serializer serializer = fXMLSerializer;\n        serializer.reset();\n        \n        if (nodeArg != fVisitedNode){\n            // Determine the XML Document version of the Node \n            String xmlVersion = getXMLVersion(nodeArg);\n            \n            serializer.getOutputFormat().setProperty(\"version\", xmlVersion);\n            \n            // Set the output encoding and xml version properties\n            fDOMConfigProperties.setProperty(DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.S_XML_VERSION, xmlVersion);\n            fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_ENCODING, \"UTF-16\");\n            \n            // If the node to be serialized is not a Document, Element, or Entity\n            // node\n            // then the XML declaration, or text declaration, should be never be\n            // serialized.\n            if  ((nodeArg.getNodeType() != Node.DOCUMENT_NODE\n                    || nodeArg.getNodeType() != Node.ELEMENT_NODE\n                    || nodeArg.getNodeType() != Node.ENTITY_NODE)\n                    && ((fFeatures & XMLDECL) != 0)) {\n                fDOMConfigProperties.setProperty(\n                        DOMConstants.S_XSL_OUTPUT_OMIT_XML_DECL,\n                        DOMConstants.DOM3_DEFAULT_FALSE);\n            }            \n\n            fVisitedNode = nodeArg;       \n        } \n        // Update the serializer properties\n        fXMLSerializer.setOutputFormat(fDOMConfigProperties);\n        \n        // StringWriter to Output to\n        StringWriter output = new StringWriter();\n        \n        // \n        try {\n            \n            // Set the Serializer's Writer to a StringWriter\n            serializer.setWriter(output);\n            \n            // Get a reference to the serializer then lets you serilize a DOM\n            // Use this hack till Xalan support JAXP1.3\n            if (fDOMSerializer == null) {\n                fDOMSerializer = (DOM3Serializer)serializer.asDOM3Serializer();\n            } \n                        \n            // Set the error handler on the DOM3Serializer interface implementation\n            if (fDOMErrorHandler != null) {\n                fDOMSerializer.setErrorHandler(fDOMErrorHandler);\n            }\n            \n            // Set the filter on the DOM3Serializer interface implementation\n            if (fSerializerFilter != null) {\n                fDOMSerializer.setNodeFilter(fSerializerFilter);\n            }\n            \n            // Set the NewLine character to be used\n            fDOMSerializer.setNewLine(fEndOfLine.toCharArray());\n            \n            // Serializer your DOM, where node is an org.w3c.dom.Node\n            fDOMSerializer.serializeDOM3(nodeArg);\n        } catch (LSException lse) {\n            // Rethrow LSException.\n            throw lse;\n        } catch (RuntimeException e) {\n            throw (LSException) createLSException(LSException.SERIALIZE_ERR, e).fillInStackTrace();\n        }  catch (Exception e) {\n            if (fDOMErrorHandler != null) {\n                fDOMErrorHandler.handleError(new DOMErrorImpl(\n                        DOMError.SEVERITY_FATAL_ERROR, e.getMessage(),\n                        null, e));\n            }\n            throw (LSException) createLSException(LSException.SERIALIZE_ERR, e).fillInStackTrace();\n        }        \n        \n        // return the serialized string\n        return output.toString();\n    }", "  public Object construct(WireContext wireContext) {\n    try {\n      return ReflectUtil.classForName(className);\n    } catch (ClassNotFoundException e) {\n      throw new WireException(\"could not find class: \"+className, e);\n    }\n  }\n", "public void addRow(final int rowIndex){\n  model.add(rowIndex,new MemberTableRowData());\n  validRows.add(rowIndex,false);\n  fireTableRowsInserted(rowIndex,rowIndex);\n}\n", "public void tearDown ( ) { super . tearDown ( ) ; }", "\tprivate void updateSigns(Node node, int type) throws InfraException {\n\t\tDrivelane[] lanes = node.getInboundLanes();\n\t\tSign[] signs = new Sign[lanes.length];\n\t\tfor (int i=0; i < lanes.length; i++) {\n\t\t\tsigns[i] = Sign.getInstance(type);\n\t\t\tsigns[i].setNode(node);\n\t\t\tsigns[i].setLane(lanes[i]);\n\t\t\tlanes[i].setSign(signs[i]);\n\t\t}\n\t\tnode.setSigns(signs);\n \t}\n", "public static String fixDesc(String description,Map<String,MappedClass> oldNamestoClasses){\n  if (description == null || description.length() == 0 || isPrimitive(description)) {\n    return description;\n  }\n  if (description.contains(\"L\") && description.contains(\";\")) {\n    if (description.startsWith(\"(\") || (description.startsWith(\"L\") || description.startsWith(\"[\")) && description.endsWith(\";\")) {\n      String regex=\"(?<=[L])[^;]*(?=;)\";\n      Pattern p=Pattern.compile(regex);\n      Matcher m=p.matcher(Pattern.quote(description));\n      for (int i=0; i < m.groupCount(); i++) {\n        String found=m.group(i);\n        description=description.replace(found,fixDesc(found,oldNamestoClasses));\n      }\n      return description;\n    }\n  }\n else {\n    MappedClass mc=oldNamestoClasses.get(description);\n    if (mc == null) {\n      return description;\n    }\n    return mc.getNewName();\n  }\n  return description;\n}\n", "public final static boolean doesSequenceContainInvalidChar(String sequence, Set<Character> cSet){\n\t\tfor(char c:sequence.toCharArray()){\n\t\t\tif(!cSet.contains(c)) return true;\n\t\t}\n\t\treturn false;\n\t}", "public void serviceName_serviceMonitoring_monitoringId_alert_email_alertId_DELETE(String serviceName, Long monitoringId, Long alertId) throws IOException {\n\t\tString qPath = \"/dedicated/server/{serviceName}/serviceMonitoring/{monitoringId}/alert/email/{alertId}\";\n\t\tStringBuilder sb = path(qPath, serviceName, monitoringId, alertId);\n\t\texec(qPath, \"DELETE\", sb.toString(), null);\n\t}", "    public void destroy() {\n        model.removeAdapter(this);\n    }\n", "public double valueAndGradient ( final Array grad_f , final Array x ) { functionEvaluation_ ++ ; gradientEvaluation_ ++ ; return costFunction_ . valueAndGradient ( grad_f , x ) ; }", "\tpublic void leave() {\n\t\tChatAdministration.getInstance().removeFileFromList(this);\n\t\t\n\t} \n", "public void loadArgs(final int arg,final int count){\n  int index=getArgIndex(arg);\n  for (int i=0; i < count; ++i) {\n    Type t=argumentTypes[arg + i];\n    loadInsn(t,index);\n    index+=t.getSize();\n  }\n}\n", "void _setText(byte[] text){\n  this._text=text;\n  this._props=null;\n}\n", "private static Field.Index getIndexParameter(int flags)\n   {\n      if ((flags & INDEXED_FLAG) == 0)\n      {\n         return Field.Index.NO;\n      }\n      else if ((flags & TOKENIZED_FLAG) > 0)\n      {\n         return Field.Index.ANALYZED;\n      }\n      else\n      {\n         return Field.Index.NOT_ANALYZED;\n      }\n   }", "@Px private int calculateIndicatorDotStart(){\n  final int dotCount=indicatorDots.size();\n  final float halfDotCount=dotCount / 2f;\n  final int dotWidth=2 * dotRadius;\n  final float totalDotWidth=dotWidth * halfDotCount;\n  final float halfDotPaddingCount=Math.max(halfDotCount - 0.5f,0);\n  final float totalDotPaddingWidth=dotPadding * halfDotPaddingCount;\n  int startPosition=getWidth() / 2;\n  startPosition-=totalDotWidth + totalDotPaddingWidth;\n  return startPosition;\n}\n", "    public void addHeader(String name, String value) {\n        if (name.toLowerCase().equals(\"content-type\")) { // ensure ContentType is always set through setContentType()\n            setContentType(value);\n        } else if (!parseablePage || !name.toLowerCase().equals(\"content-length\")) {\n            super.addHeader(name, value);\n        }\n    }\n", "public void discovered ( DiscoveryEvent event ) { DiscoveryListener l = get ( ) ; if ( l != null ) { l . discovered ( event ) ; } }", "protected void handleStyledAttributes ( TypedArray a ) { }", "\tpublic void setXTickColor(Color tickColor) {\n\t\tif (tickColor != xTickColor) {\n\t\t\txTickColor = tickColor;\n\t\t\tneedsRedraw();\n\t\t}\n\t}\n", "private DiffTool ( ) { }", "public Boolean isInRelationService(){\n  return myInRelServFlg.get();\n}\n", "    public Pan panXYZ(double panX, double panY, double panZ) {\n        Double[] pan = {panX, panY, panZ};\n        return new Pan(this, pan);\n    }\n", "    public void addMessage(Document message) {\n        addMessage(message.getRootElement());\n    }\n", "    private Integer getOrCreateAvailability(String _availability, boolean addAvailability) throws SQLException{\n\t\tDb db = getDb();\n\t\ttry {\n\t\t    db.enter();\n\t\t    String availability = DbHelper.nullify(_availability);\n\t\t    if (availability == null)\n\t\t \t\treturn null;\n\t\t    pstLookupAvailability.setString(1, availability);\n\t\t    Integer avId = DbHelper.getKey(pstLookupAvailability);\n\t\t    if (avId != null || !addAvailability)\n\t\t\t\treturn avId;\n\t\t    _logger.info(\"Creating availability [\"+availability+\"]\");\n\t\t    pstAddAvailability.setString(1, availability);\n\t\t    \n\t\t\treturn DbHelper.getKey(pstAddAvailability);\n\t\t} finally {\n\t\t    db.exit();\n\t\t}\n    }\n", "private int removeRecursive(final File basePath,final int numFiles){\n  int numLogsDeleted=0;\n  try {\n    if (basePath.isDirectory()) {\n      if (Cfg.DEBUG) {\n        Check.log(TAG + \" (removeRecursive): \" + basePath.getName());\n      }\n      final File[] fileLogs=basePath.listFiles();\n      for (      final File file : fileLogs) {\n        final int removed=removeRecursive(file,numFiles - numLogsDeleted);\n        numLogsDeleted+=removed;\n      }\n    }\n    if (!basePath.delete()) {\n      if (Cfg.DEBUG) {\n        Check.log(TAG + \" (removeRecursive) Error: \" + basePath.getAbsolutePath());\n      }\n    }\n else {\n      numLogsDeleted+=1;\n    }\n  }\n catch (  final Exception e) {\n    if (Cfg.EXCEPTION) {\n      Check.log(e);\n    }\n    if (Cfg.DEBUG) {\n      Check.log(TAG + \" Error: removeLog: \" + basePath+ \" ex: \"+ e);\n    }\n  }\n  if (Cfg.DEBUG) {\n    Check.log(TAG + \" removeLogRecursive removed: \" + numLogsDeleted);\n  }\n  return numLogsDeleted;\n}\n", "public CModuleLoaderOperation ( final INaviModule module ) { m_module = module ; CGlobalProgressManager . instance ( ) . add ( this ) ; module . addListener ( m_listener ) ; }", "        public boolean tasksAccepted() {\n            \n            return tasksAccepted;\n            \n        }\n", "public void handleHighlightLine ( final NaviNode node , final double y ) { if ( node . getRawNode ( ) instanceof INaviCodeNode ) { highlightLine ( node , ( INaviCodeNode ) node . getRawNode ( ) , y ) ; } }", "\tpublic void collapsePath() {\n\n\t\tString[] args = this.objectToStringArray();\n\n\t\tString operation = Operations.COLLAPSE_PATH;\n\n\t\tthis.executeOperation(operation, args);\n\n\t}\n", "public String getBeaconIdAsString()\n    {\n        if (mBeaconIdAsString == null)\n        {\n            mBeaconIdAsString = Bytes.toHexString(getBeaconId(), true);\n        }\n\n        return mBeaconIdAsString;\n    }", "void mutate(){\n  do {\n    int iBit;\n    do {\n      iBit=m_random.nextInt(m_nNodes * m_nNodes);\n    }\n while (isSquare(iBit));\n    m_bits[iBit]=!m_bits[iBit];\n  }\n while (hasCycles());\n  calcGlobalScore();\n}\n", "public static boolean setSpecialContentModeEnabled(\n            AccessibilityNodeInfoCompat node, boolean enabled) {\n        final int direction = (enabled) ? DIRECTION_FORWARD : DIRECTION_BACKWARD;\n        return performSpecialAction(node, ACTION_TOGGLE_SPECIAL_CONTENT, direction);\n    }", "public void connect ( ) { try { if ( sftp != null ) { log . debug ( this , STR_ , STR_ ) ; } JSch jsch = new JSch ( ) ; jsch . getSession ( username , host , port ) ; Session sshSession = jsch . getSession ( username , host , port ) ; log . debug ( this , STR_ , STR_ ) ; sshSession . setPassword ( password ) ; Properties sshConfig = new Properties ( ) ; sshConfig . put ( STR_ , STR_ ) ; sshSession . setConfig ( sshConfig ) ; sshSession . connect ( ) ; log . debug ( this , STR_ , STR_ ) ; Channel channel = sshSession . openChannel ( STR_ ) ; channel . connect ( ) ; sftp = ( ChannelSftp ) channel ; log . debug ( this , STR_ , STR_ + host ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }", "public CallableDistributedTaskAdapter ( ) { }", "public CFunctionReplacement ( final INaviFunction function ) { m_function = function ; m_function . addListener ( m_listener ) ; }", "public void putLineRecord ( String file , int line , String content ) { Map < Integer , String > map ; if ( lineRecord . containsKey ( file ) ) { map = lineRecord . get ( file ) ; } else { map = new HashMap < > ( ) ; lineRecord . put ( file , map ) ; } ma", "public boolean isFakeDragging ( ) { return mFakeDragging ; }", "public static Element addChildElementCDATAValue(Element element,String childElementName,String childElementValue,Document document){\n  Element newElement=addChildElement(element,childElementName,document);\n  newElement.appendChild(document.createCDATASection(childElementValue));\n  return newElement;\n}\n", "public void init ( ) throws ServletException { }", "Reference getReference() {\n\n        if (TraceComponent.isAnyTracingEnabled() && TRACE.isEntryEnabled()) {\n            SibTr.entry(this, TRACE, \"getReference\");\n        }\n\n        // Create a reference object describing this class\n        final Reference reference = new Reference(getConnectionType(),\n                        getClass().getName(), null);\n\n        // Make sure no-one can pull the rug from beneath us.\n        synchronized (_properties) {\n\n            // Convert the map of properties into an encoded form, where the\n            // keys have the necessary prefix on the front, and the values are\n            // all Strings.\n            final Map encodedMap = JmsJcaReferenceUtils.getInstance()\n                            .getStringEncodedMap(_properties, defaultJNDIProperties);\n\n            // Now turn the encoded map into the reference items.\n            for (final Iterator iterator = encodedMap.entrySet().iterator(); iterator\n                            .hasNext();) {\n\n                final Map.Entry entry = (Map.Entry) iterator.next();\n                final String prefixedKey = (String) entry.getKey();\n                final String stringForm = (String) entry.getValue();\n\n                // Store the prefixed key and value in string form.\n                reference.add(new StringRefAddr(prefixedKey, stringForm));\n\n            }\n\n        }\n\n        if (TraceComponent.isAnyTracingEnabled() && TRACE.isEntryEnabled()) {\n            SibTr.exit(TRACE, \"getReference\", reference);\n        }\n        return reference;\n\n    }", "private float calculateTypeAndScale(){\n  movementType=MovingViewAnimator.AUTO_MOVE;\n  float scale=1f;\n  float scaleByImage=Math.max(imageWidth / canvasWidth,imageHeight / canvasHeight);\n  Matrix m=new Matrix();\n  if (offsetWidth == 0 && offsetHeight == 0) {\n    float sW=canvasWidth / imageWidth;\n    float sH=canvasHeight / imageHeight;\n    if (sW > sH) {\n      scale=Math.min(sW,maxRelativeSize);\n      m.setTranslate((canvasWidth - imageWidth * scale) / 2f,0);\n      movementType=MovingViewAnimator.VERTICAL_MOVE;\n    }\n else     if (sW < sH) {\n      scale=Math.min(sH,maxRelativeSize);\n      m.setTranslate(0,(canvasHeight - imageHeight * scale) / 2f);\n      movementType=MovingViewAnimator.HORIZONTAL_MOVE;\n    }\n else {\n      scale=Math.max(sW,maxRelativeSize);\n      movementType=(scale == sW) ? MovingViewAnimator.NONE_MOVE : MovingViewAnimator.DIAGONAL_MOVE;\n    }\n  }\n else   if (offsetWidth == 0) {\n    scale=canvasWidth / imageWidth;\n    movementType=MovingViewAnimator.VERTICAL_MOVE;\n  }\n else   if (offsetHeight == 0) {\n    scale=canvasHeight / imageHeight;\n    movementType=MovingViewAnimator.HORIZONTAL_MOVE;\n  }\n else   if (scaleByImage > maxRelativeSize) {\n    scale=maxRelativeSize / scaleByImage;\n    if (imageWidth * scale < canvasWidth || imageHeight * scale < canvasHeight) {\n      scale=Math.max(canvasWidth / imageWidth,canvasHeight / imageHeight);\n    }\n  }\n  m.preScale(scale,scale);\n  setImageMatrix(m);\n  return scale;\n}\n", "public void setSortedByColumn(JTableHeader tableHeader, int iViewColumn, boolean bOrder)\n    {\n        if (!(tableHeader.getDefaultRenderer() instanceof SortableHeaderRenderer))\n            tableHeader.setDefaultRenderer(new SortableHeaderRenderer(tableHeader.getDefaultRenderer()));   // Set up header renderer the first time\n        ((SortableHeaderRenderer)tableHeader.getDefaultRenderer()).setSortedByColumn(tableHeader, iViewColumn, bOrder);\n    }", "public OutlierResult run(Database database, Relation<O> relation) {\n    // Get a nearest neighbor query on the relation.\n    KNNQuery<O> knnq = QueryUtil.getKNNQuery(relation, getDistanceFunction(), k);\n    // Output data storage\n    WritableDoubleDataStore scores = DataStoreUtil.makeDoubleStorage(relation.getDBIDs(), DataStoreFactory.HINT_DB);\n    // Track minimum and maximum scores\n    DoubleMinMax minmax = new DoubleMinMax();\n\n    // Iterate over all objects\n    for(DBIDIter iter = relation.iterDBIDs(); iter.valid(); iter.advance()) {\n      KNNList neighbors = knnq.getKNNForDBID(iter, k);\n      // Aggregate distances\n      MeanVariance mv = new MeanVariance();\n      for(DoubleDBIDListIter neighbor = neighbors.iter(); neighbor.valid(); neighbor.advance()) {\n        // Skip the object itself. The 0 is not very informative.\n        if(DBIDUtil.equal(iter, neighbor)) {\n          continue;\n        }\n        mv.put(neighbor.doubleValue());\n      }\n      // Store score\n      scores.putDouble(iter, mv.getSampleStddev());\n    }\n\n    // Wrap the result in the standard containers\n    // Actual min-max, theoretical min-max!\n    OutlierScoreMeta meta = new BasicOutlierScoreMeta(minmax.getMin(), minmax.getMax(), 0, Double.POSITIVE_INFINITY);\n    DoubleRelation rel = new MaterializedDoubleRelation(relation.getDBIDs(), \"stddev-outlier\", scores);\n    return new OutlierResult(meta, rel);\n  }", "@Override\n    protected void runUnsafe() throws Exception {\n        Path reportDirectory = getReportDirectoryPath();\n        Files.walkFileTree(reportDirectory, new DeleteVisitor());\n        LOGGER.info(\"Report directory <{}> was successfully cleaned.\", reportDirectory);\n    }", "    public String getTypeName() {\n        Class type = getType();\n        if (type == null)\n            return null;\n        return type.getName();\n    }\n", "@Override\n    public CreateOrUpdateTagsResult createOrUpdateTags(CreateOrUpdateTagsRequest request) {\n        request = beforeClientExecution(request);\n        return executeCreateOrUpdateTags(request);\n    }", "public static String replaceElementText(String xmlFile,String tagName,String value,boolean all,boolean overwrite) throws DOMException {\n  Map elements=new HashMap();\n  elements.put(tagName,value);\n  return replaceElementText(xmlFile,elements,all,overwrite);\n}\n", "        public BindingType bindingType(Class type) {\n            BindingType result =  BindingType.COMPLEX;\n            if (isStandardPrimitive(type)) {\n                result = BindingType.PRIMITIVE;\n            }\n       \n            return result;\n        }\n", "public static <T>List<T> toList(T... items){\n  if (items == null)   return null;\n  List<T> list=new ArrayList<T>(items.length);\n  for (  T item : items)   list.add(item);\n  return list;\n}\n", "    private void initialiseFFConfigCmd(String line)\n    {   int index = line.indexOf(',');\n        GEVAFitness.fitnessCommands.put\n        (   line.substring(0, index),\n            line.substring(index + 1)\n        );\n    }\n", "   protected String getContent() {\n      //return content.toString();\n      char c[] = new char[content.length()];\n      content.getChars(0, content.length(), c, 0);\n      return String.valueOf(c);\n   }\n", "    public Command getExitCommand() {\n        if (exitCommand == null) {//GEN-END:|18-getter|0|18-preInit\n            // write pre-init user code here\n            exitCommand = new Command(\"Exit\", Command.EXIT, 5);//GEN-LINE:|18-getter|1|18-postInit\n        // write post-init user code here\n        }//GEN-BEGIN:|18-getter|2|\n        return exitCommand;\n    }\n", "\tpublic Connection getConnection() throws DBAccessException {\n\t\tConnection conn1;\n\t\ttry {\n\t\tDriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());\n\t\tconn1 = DriverManager.getConnection(\"jdbc:oracle:thin:@localhost:1521:XE\", \"hruser\",\"hruser\");\n\t\t} catch(SQLException e) {\n\t\t\tthrow new DBAccessException(e.getMessage(), null, 0, true);\n\t\t}\n\t\t// prepard for db access listener\n\t\t//try{\n\t\t//\tconnectDB();\n\t\t//} catch (Exception e) {\n\t\t//  listener.executeTask(new DBAccessDefaultTask());\t\n\t\t//}\n\t\treturn conn1;\n\t}\n", "    protected Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        \n        if( nestedDumper != null ) {\n            out.endElement();\n            nestedDumper = null;\n        }\n                \n        return printCall(method, args);\n    }\n", "public static Expression mod(String lhs, Long divisor, Long remainder) {\n        return new Expression(lhs, \"$mod\", divisor, remainder);\n    }", "protected MessageContext getEncoderMessageContext(final RequestAbstractType request, final T samlObject, final String relayState) {\n        val ctx = new MessageContext<SAMLObject>();\n        ctx.setMessage(samlObject);\n        SAMLBindingSupport.setRelayState(ctx, relayState);\n        SamlIdPUtils.preparePeerEntitySamlEndpointContext(request, ctx, adaptor, getBinding());\n        val self = ctx.getSubcontext(SAMLSelfEntityContext.class, true);\n        self.setEntityId(SamlIdPUtils.getIssuerFromSamlObject(samlObject));\n        return ctx;\n    }", "public void sendPacketToAllPlayers ( IPacket packet ) { checkClassAndSync ( packet . getClass ( ) ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . ALL ) ; serverOutboundChannel . writeOutbound ( packet ) ; isCurrentlySendingSemaphor = BOOL_ ; }", "\tprivate OperationCallExp createCollectionSizeCondition(OclExpression source) {\n\t\treturn qvtFactory.createIntegerOperation(\">\", qvtFactory\n\t\t\t\t.createSizeOperation(source), qvtFactory\n\t\t\t\t.createIntegerLiteralExp(0));\n\t}\n", "public static List < IUser > loadUsers ( final SQLProvider provider ) throws CouldntLoadDataException { Preconditions . checkNotNull ( provider , STR_ ) ; final CConnection connection = provider . getConnection ( ) ; final String query = STR_ + CTableNames . USER_TABLE ; final ArrayList < IUser > users = new ArrayList < > ( ) ; try ( ResultSet resultSet = connection . executeQuery ( query , BOOL_ ) ) { while ( resultSet . next ( ) ) { final int userId = resultSet . getInt ( NUM_ ) ; final String userName = resultSet . getString ( NUM_ ) ; users . add ( new CUser ( userId , userName ) ) ; } } catch ( final SQLException exception ) { throw new CouldntLoadDataException ( exception ) ; } return users ; }", "protected void fireEvent ( HashSet < RegistryEntry > entries , Object event ) { if ( entries != null ) { for ( RegistryEntry registryEntry : entries ) { try { if ( registryEntry . method . getParameterTypes ( ) . length == NUM_ ) { registryEntry . method . invoke ( registryEntry . object ) ; } else { registryEntry . method . invoke ( registryEntry . object , event ) ; } } catch ( InvocationTargetException e ) { logger . error ( STR_ + registryEntry . object + STR_ + registryEntry . method , e ) ; } catch ( Exception e ) { logger . error ( STR_ + registryEntry . object + STR_ + registryEntry . method , e ) ; } } } }", "@SuppressWarnings({\"cast\",\"unchecked\"}) public List<DeviceInfo> listDeviceInfo(){\n  EntityManager mgr=getEntityManager();\n  List<DeviceInfo> result=new ArrayList<DeviceInfo>();\n  try {\n    Query query=mgr.createQuery(\"select from DeviceInfo\");\n    for (    Object obj : (List<Object>)query.getResultList()) {\n      result.add(((DeviceInfo)obj));\n    }\n  }\n  finally {\n    mgr.close();\n  }\n  return result;\n}\n", "public java.lang.String getInstanceClass() {\n    java.lang.Object ref = instanceClass_;\n    if (ref instanceof java.lang.String) {\n      return (java.lang.String) ref;\n    } else {\n      com.google.protobuf.ByteString bs = \n          (com.google.protobuf.ByteString) ref;\n      java.lang.String s = bs.toStringUtf8();\n      instanceClass_ = s;\n      return s;\n    }\n  }", "public java.util.List<MetricDataResult> getMetricDataResults() {\n        if (metricDataResults == null) {\n            metricDataResults = new com.amazonaws.internal.SdkInternalList<MetricDataResult>();\n        }\n        return metricDataResults;\n    }", "  public void removeTutorialListener(TutorialListener listener) {\n    listeners.remove(listener);\n  }\n", "void changedName ( IFunction function , String name ) ;", "@Override\r\n\tpublic boolean hasNext() {\r\n\t\tif (!isForward) {\r\n\t\t\tcurrentRec = currentRec - pointerSize;\r\n\t\t\tisForward = true;\r\n\t\t}\r\n\t\treturn currentRec > 0 || blk.number() > 0;\r\n\t}", "T readPacketFromStream ( ObjectInput input ) throws IOException , ClassNotFoundException ;", "void appendArrayType(StringBuilder sb,Class[] objs){\n  if (objs.length > 0) {\n    appendArrayType(sb,objs[0]);\n    for (int i=1; i < objs.length; i++) {\n      sb.append(',');\n      appendArrayType(sb,objs[i]);\n    }\n  }\n}\n", "protected boolean isDistorted(){\n  if (!isTransformed()) {\n    return false;\n  }\n  int type=transform.getType();\n  int otherButTranslatedOrScaled=~(AffineTransform.TYPE_TRANSLATION | AffineTransform.TYPE_MASK_SCALE);\n  return (type & otherButTranslatedOrScaled) != 0;\n}\n", "private List<Expression> getParamList( CssFormatter formatter ) {\n        Expression ex0 = get( 0 ).unpack( formatter );\n        if( ex0.getDataType( formatter ) == LIST ) {\n            Operation op = ex0.listValue( formatter );\n            List<Expression> operants = op.getOperands();\n            if( operants.size() == 1 ) {\n                Expression ex0_0 = operants.get( 0 );\n                if( ex0_0.getDataType( formatter ) == LIST ) {\n                    return ex0_0.listValue( formatter ).getOperands();\n                }\n            }\n            return operants;\n        }\n        List<Expression> result = new ArrayList<Expression>();\n        result.add( ex0 );\n        return result;\n    }", "public static File absoluteFile(File file){\n  if (file != null) {\n    try {\n      file=file.getCanonicalFile();\n    }\n catch (    IOException e) {\n      file=file.getAbsoluteFile();\n    }\n  }\n  return file;\n}\n", "    public boolean isRegion() {\n\treturn fDefinition.isRegion() ;\n    }\n", "public void close() throws IOException {\n  mOutputStream.close();\n}\n", "private void maybeShowPopup ( final MouseEvent event ) { if ( event . isPopupTrigger ( ) ) { final JPopupMenu menu = new JPopupMenu ( ) ; menu . add ( new CopyLogAction ( m_textArea ) ) ; menu . show ( event . getComponent ( ) , event . getX ( ) , event . getY ( ) ) ; } }", "public static JsonElement fromUri ( Uri uri ) { return JSON_SCHEME . equals ( uri . getScheme ( ) ) ? new JsonParser ( ) . parse ( uri . getPath ( ) ) : null ; }", "\tpublic double getAvgAgentFitness() {\n\t\t// Possibly or probably this is not the most performant way to\n\t\t// yield the intended result, but for now it should work.\n\t\tfinal Iterator it = agents.values().iterator();\n\t\tdouble fitnessSum = 0;\n\t\tAgent a;\n\t\t\n\t\twhile (it.hasNext()) {\n\t\t\ta = (Agent)it.next();\n\t\t\tfitnessSum += a.getFitness();\n\t\t}\n\t\t\n\t\treturn fitnessSum / this.agents.size();\n\t}\n", "public static Vector3 cross ( Vector3 a , Vector3 b ) { return new Vector3 ( a . getY ( ) * b . getZ ( ) - a . getZ ( ) * b . getY ( ) , a . getZ ( ) * b . getX ( ) - a . getX ( ) * b . getZ ( ) , a . getX ( ) * b . getY ( ) - a . getY ( ) * b . getX ( ) ", "public void addAttribute(Attribute attribute, Object value) {\n\n        if (attribute == null) {\n            throw new NullPointerException();\n        }\n\n        int len = length();\n        if (len == 0) {\n            throw new IllegalArgumentException(\"Can't add attribute to 0-length text\");\n        }\n\n        addAttributeImpl(attribute, value, 0, len);\n    }", "  public void addDirtyRegion(JComponent component, int x, int y, int w, int h) {\n    checkThread();\n    super.addDirtyRegion(component, x, y, w, h);\n  }\n", "public void writeXML ( XMLOutput xmlOutput ) throws IOException ;", "private void initialLoad() {\n        AddressTemplate coreServiceManagement = CONFIGURATION_CHANGES_TEMPLATE.subTemplate(0, 2);\n\n        Operation operation1 = new Operation.Builder(READ_CHILDREN_NAMES_OPERATION,\n                coreServiceManagement.resolve(statementContext))\n                .param(CHILD_TYPE, SERVICE)\n                .build();\n\n        dispatcher.execute(new DMRAction(operation1), new SimpleCallback<DMRResponse>() {\n\n            @Override\n            public void onSuccess(DMRResponse result) {\n                ModelNode response = result.get();\n\n                if(response.isFailure()) {\n                    Console.error(Console.MESSAGES.failed(\"Configuration Management\"), response.getFailureDescription());\n                } else {\n                    List<ModelNode> payload = response.get(RESULT).asList();\n\n                    boolean enabled = false;\n                    for (ModelNode service: payload) {\n                        if (CONFIGURATION_CHANGES.equals(service.asString())) {\n                            enabled = true;\n                            break;\n                        }\n                    }\n                    if (enabled) {\n                        loadChanges();\n                    }\n                    getView().setEnabled(enabled);\n                }\n            }\n        });\n    }", "public boolean addAll(int index,Collection<? extends E> c){\n  rangeCheckForAdd(index);\n  Object[] a=c.toArray();\n  int numNew=a.length;\n  ensureCapacity(size + numNew);\n  int numMoved=size - index;\n  if (numMoved > 0) {\n    System.arraycopy(elementData,index,elementData,index + numNew,numMoved);\n  }\n  System.arraycopy(a,0,elementData,index,numNew);\n  size+=numNew;\n  return numNew != 0;\n}\n", "private void clearIssueReferences(String launchId){\n  List<FailReferenceResource> issues=issuesRepository.findAllLaunchIssues(launchId);\n  issuesRepository.delete(issues);\n}\n", "public LocalVolTermStructure ( final Date referenceDate ) { this ( referenceDate , new Calendar ( ) , BusinessDayConvention . Following , new DayCounter ( ) ) ; }", "public List<String> localText(){\n  List<String> answer=new ArrayList<String>();\n  for (Iterator iter=InvokerHelper.asIterator(value); iter.hasNext(); ) {\n    Object child=iter.next();\n    if (!(child instanceof Node)) {\n      answer.add(child.toString());\n    }\n  }\n  return answer;\n}\n", "public String getFileName() {\n\n        if (m_fileName == null) {\n            // use \"lazy initializing\"\n            if (!m_sitePath.endsWith(\"/\")) {\n                m_fileName = m_sitePath.substring(m_sitePath.lastIndexOf(\"/\") + 1, m_sitePath.length());\n            } else {\n                m_fileName = m_sitePath.substring(\n                    m_sitePath.substring(0, m_sitePath.length() - 1).lastIndexOf(\"/\") + 1,\n                    m_sitePath.length());\n            }\n        }\n        return m_fileName;\n    }", "protected void onGetImageSuccess ( String cacheKey , BitmapDrawable response ) { mCache . putBitmap ( cacheKey , response ) ; BatchedImageRequest request = mInFlightRequests . remove ( cacheKey ) ; if ( request != null ) { request . mResponseBitmap = response ; batchResponse ( cacheKey , request ) ; } }", "    public void clearLog() {\n        mLogTxt.setText(\"\");\n    }\n", "    public void setTextColors(Color text, Color shadow) {\n        textColor_ = text;\n        textShadowColor_ = shadow;\n        updateBar_ = true;\n        parent_.repaint();\n    }\n", "@GET\n    public Map<String, ExternalType> getObjects(\n            @QueryParam(\"permission\") List<ObjectPermission.Type> permissions)\n            throws GuacamoleException {\n\n        // An admin user has access to all objects\n        Permissions effective = userContext.self().getEffectivePermissions();\n        SystemPermissionSet systemPermissions = effective.getSystemPermissions();\n        boolean isAdmin = systemPermissions.hasPermission(SystemPermission.Type.ADMINISTER);\n\n        // Filter objects, if requested\n        Collection<String> identifiers = directory.getIdentifiers();\n        if (!isAdmin && permissions != null && !permissions.isEmpty()) {\n            ObjectPermissionSet objectPermissions = getObjectPermissions(effective);\n            identifiers = objectPermissions.getAccessibleObjects(permissions, identifiers);\n        }\n\n        // Translate each retrieved object into the corresponding external object\n        Map<String, ExternalType> apiObjects = new HashMap<String, ExternalType>();\n        for (InternalType object : directory.getAll(identifiers))\n            apiObjects.put(object.getIdentifier(), translator.toExternalObject(object));\n\n        return apiObjects;\n\n    }", "public Stack ( ) { }", "    public void renderWhenConnected () {\n        mainPanel.clear ();\n        mainPanel.add ( logoutLink );\n        mainPanel.add ( new HTML ( \" Your api key is \" + apiClient.getApiKey ()  ) );\n        getFriends();\n    }\n", "\tpublic void aimUp(){\n\t\tcurrentAim++;\n\t\t\n\t\t//Loops back to the beginning of the list when the last note has been reached\n\t\tif( currentAim >= targetStaff.getAims().length){\n\t\t\tcurrentAim = 0;\n\t\t}\n\t}\n", "public void handleInit(ChaincodeMessage message) throws InvalidTransactionException  {\n\t\tRunnable task = () -> {\n\t\t\tChaincodeMessage nextStatemessage = null;\n\t\t\tboolean send = true;\n\t\t\ttry {\n\t\t\t\t// Get the function and args from Payload\n\t\t\t\tChaincodeInput input;\n\t\t\t\ttry {\n\t\t\t\t\tinput = ChaincodeInput.parseFrom(message.getPayload());\n\t\t\t\t} catch (InvalidProtocolBufferException e) {\n                    nextStatemessage = ChaincodeMessage.newBuilder()\n                            .setType(ERROR)\n                            .setPayload(ByteString.copyFromUtf8(\"Unmarshall error -\"\n                                    + e.getMessage()))\n                            .setTxid(message.getTxid())\n                            .build();\n                    return;\n\t\t\t\t}\n\n\t\t\t\t//\t\t\t// Mark as a transaction (allow put/del state)\n\t\t\t\tmarkIsTransaction(message.getTxid(), true);\n\n\t\t\t\t// Create the ChaincodeStub which the chaincode can use to callback\n\t\t\t\tChaincodeStub stub = new ChaincodeStub(message.getTxid(), this, message.getSecurityContext());\n\t\t\t\t// Call chaincode's Run\n\t\t\t\tByteString result;\n\t\t\t\ttry {\n\t\t\t\t\tresult = chaincode.runHelper(stub, getFunction(input.getArgsList()), getParameters(input.getArgsList()));\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t// Send ERROR message to chaincode support and change state\n\t\t\t\t\tlogger.debug(String.format(\"[%s]Init failed. Sending %s\", shortID(message), ERROR));\n\t\t\t\t\tnextStatemessage = ChaincodeMessage.newBuilder()\n\t\t\t\t\t\t\t.setType(ERROR)\n\t\t\t\t\t\t\t.setPayload(ByteString.copyFromUtf8(e.getMessage()))\n\t\t\t\t\t\t\t.setTxid(message.getTxid())\n\t\t\t\t\t\t\t.build();\n\t\t\t\t\treturn;\n\t\t\t\t} finally {\n\t\t\t\t\t// delete isTransaction entry\n\t\t\t\t\tdeleteIsTransaction(message.getTxid());\n\t\t\t\t}\n\n\t\t\t\t// Send COMPLETED message to chaincode support and change state\n\t\t\t\tnextStatemessage = ChaincodeMessage.newBuilder()\n\t\t\t\t\t\t.setType(COMPLETED)\n\t\t\t\t\t\t.setPayload(result)\n\t\t\t\t\t\t.setTxid(message.getTxid())\n\t\t\t\t\t\t.build();\n\n\t\t\t\tlogger.debug(String.format(String.format(\"[%s]Init succeeded. Sending %s\",\n\t\t\t\t\t\tshortID(message), COMPLETED)));\n\n\t\t\t\t//TODO put in all exception states\n\t\t\t}\n\t\t finally {\n\t\t\t\ttriggerNextState(nextStatemessage, send);\n\t\t\t}\n\t\t};\n\n\t\t//Run above task\n\t\tnew Thread(task).start();\n\t}", "    protected Action makeCreateEdgeAction(Object modelElement, String descr) {\n        return new RadioAction(\n            new ActionSetMode(ModeCreatePolyEdge.class, \"edgeClass\",\n                    modelElement, descr));\n    }\n", "public boolean isDictType ( String match ) throws IOException { if ( type == INDIRECT ) { return dereference ( ) . isDictType ( match ) ; } else if ( type != DICTIONARY && type != STREAM ) { return BOOL_ ; } PDFObject obj = getDictRef ( STR_ ) ; return obj != null && obj . getStringValue ( ) . equals ( match ) ; }", "    protected ForeignKey getForeignKey(Table table, String fkName) {\n        Iterator iter = table.getForeignKeyIterator();\n        while(iter.hasNext() ) {\n            ForeignKey fk = (ForeignKey) iter.next();\n            if(fk.getName().equals(fkName) ) {\n                return fk;\n            }\n        }\n        return null;\n    }\n", "    protected boolean resolutionExists(String resolution) {\n        if (resolution!=null) {\n            for (int i=0;i<Bug.RESOLUTIONS_ARR.length;i++) {\n                if (resolution.equals(Bug.RESOLUTIONS_ARR[i])) {\n                    return true;\n                }\n            }\n        } else {\n            log.debug(\"null resolution\");\n        }\n        return false;\n    }\n", "    public void repaintBrush() {\n        int x1 = Math.min(startX, endX);\n        int y1 = Math.min(startY, endY);\n        int x2 = Math.max(startX, endX);\n        int y2 = Math.max(startY, endY);\n        repaint(x1 - 128, y1 - 128, x2 - x1 + 256, y2 - y1 + 256);\n    }\n", "private boolean isPartialRequest(VolumeGroupFullCopyCreateParam param,final VolumeGroup application,List<URI> partialVolumeList){\n  return isPartialRequest(param.getPartial(),param.getVolumes(),param.getSubGroups(),application,partialVolumeList);\n}\n", "    public Number getY() {\n        return this.y;\n    }\n", "    public void unregisterListener(final EventListener listener) {\n        if (!listeners.remove(listener)) {\n            log.warn(\"unknown listener \" + listener); //$NON-NLS-1$\n        }\n    }\n", "private void writeRow ( List < String > row ) throws IOException { for ( int i = NUM_ ; i < row . size ( ) ; i ++ ) { if ( i > NUM_ ) writer . append ( fieldSeparator ) ; String value = row . get ( i ) ; if ( value == null ) { if ( this . nullPolicy == Nu", "    private void uninstallListeners() {\n        c.removeMouseListener(this);\n    }\n", "public UrlContextMenu(String url,boolean deleted,ContextMenuListener listener){\n  this.url=url;\n  this.listener=listener;\n  if (deleted) {\n    addItem(\"\",\"Warning: Link may be malicious\");\n    addSeparator();\n  }\n  addItem(\"open\",\"Open link\");\n  addItem(\"copy\",\"Copy to clipboard\");\n  Matcher m=channelFromUrl.matcher(url);\n  if (m.matches()) {\n    channel=m.group(1);\n    addSeparator();\n    addItem(\"join\",\"Join #\" + channel);\n  }\n}\n", "public java.util.List<AdditionalAttribute> getAdditionalAttributes() {\n        if (additionalAttributes == null) {\n            additionalAttributes = new com.amazonaws.internal.SdkInternalList<AdditionalAttribute>();\n        }\n        return additionalAttributes;\n    }", "public static String [ ] split ( String str , String delimiter ) { List < String > result = new ArrayList < String > ( ) ; int lastIndex = NUM_ ; int index = str . indexOf ( delimiter ) ; while ( index != - NUM_ ) { result . add ( str . substring ( lastIn", "public java.lang.String getMaybeTypeName() {\n    java.lang.Object ref = maybeTypeName_;\n    if (ref instanceof java.lang.String) {\n      return (java.lang.String) ref;\n    } else {\n      com.google.protobuf.ByteString bs = \n          (com.google.protobuf.ByteString) ref;\n      java.lang.String s = bs.toStringUtf8();\n      maybeTypeName_ = s;\n      return s;\n    }\n  }", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "  private boolean driverFound( String driverName ) {\n    IEditorUtility editorUtility = XEditorProjectManager.getEditorUtility();\n    URL[] urls = editorUtility.getProjectURLs( currentProject );\n    ClassLoader classLoader = new URLClassLoader( urls );\n    boolean driverFound = true;\n    try {\n      Class.forName( driverName, false, classLoader );\n    }\n    catch( ClassNotFoundException ex ) {\n      driverFound = false;\n    }\n    return driverFound;\n  }\n", "private void createGui ( final List < INaviModule > modules ) { setLayout ( new BorderLayout ( ) ) ; final JTextArea field = new JTextArea ( STR_ ) ; field . setEditable ( BOOL_ ) ; add ( field , BorderLayout . NORTH ) ; m_table = new JTable ( new CAddres", "private boolean isInsideString(String line,int position){\n  if (line.indexOf(\"\\\"\") < 0) {\n    return false;\n  }\n  int index;\n  String left=line.substring(0,position);\n  String right=line.substring(position);\n  int leftCount=0;\n  int rightCount=0;\n  while ", "public CStatusColumnRenderer ( ) { setOpaque ( BOOL_ ) ; }", "public static void fillRectange(Graphics2D g2D,JComponent c,boolean round){\n  CompiereColor cc=null;\n  boolean stdCC=c.getClientProperty(CompiereLookAndFeel.BACKGROUND_FILL) != null;\n  try {\n    cc=(CompiereColor)c.getClientProperty(CompiereLookAndFeel.BACKGROUND);\n  }\n catch (  Exception e) {\n    stdCC=true;\n  }\n  if (stdCC)   cc=CompiereColor.getDefaultBackground();\n  if (cc != null) {\n    cc.paint(g2D,c);\n  }\n else {\n    Paint paint=c.getBackground();\n    g2D.setPaint(paint);\n    RectangularShape rec=null;\n    if (round)     rec=new RoundRectangle2D.Float(0,0,c.getWidth(),c.getHeight(),15,15);\n else     rec=new Rectangle(0,0,c.getWidth(),c.getHeight());\n    g2D.fill(rec);\n  }\n}\n", "public char charAt(int index){\n  return internal.charAt(index);\n}\n", "public ReplicatorCapabilities ( ) { }", "private void writeDocument(String fullDocument,String filename){\n  File outFile=new File(mOutputDir,filename + \".xml\");\n  BufferedWriter bw=null;\n  try {\n    bw=new BufferedWriter(new FileWriter(outFile));\n    bw.append(fullDocument);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n    Logger.printError(component,\"File \" + outFile.getAbsolutePath() + \" could not be written.\");\n  }\n finally {\n    try {\n      bw.close();\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n      Logger.printError(component,\"File \" + outFile.getAbsolutePath() + \" could not be closed.\");\n    }\n  }\n}\n", "private double angleTo(Point2D that){\n  double dx=that.x - this.x;\n  double dy=that.y - this.y;\n  return Math.atan2(dy,dx);\n}\n", "public static String rowToString(JSONArray ja) {\n\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < ja.length(); i += 1) {\n            if (i > 0) {\n                sb.append(',');\n            }\n            Object o = ja.opt(i);\n            if (o != null) {\n                String s = o.toString();\n                if (s.indexOf(',') >= 0) {\n                    if (s.indexOf('\"') >= 0) {\n                        sb.append('\\'');\n                        sb.append(s);\n                        sb.append('\\'');\n                    } else {\n                        sb.append('\"');\n                        sb.append(s);\n                        sb.append('\"');\n                    }\n                } else {\n                    sb.append(s);\n                }\n            }\n        }\n        sb.append('\\n');\n        return sb.toString();\n\n    }", "public Class<?> getClassType() {\n        try {\n            return Class.forName(getType(), true, ClassLoaderHolder.getClassLoader());\n        } catch (ClassNotFoundException e) {\n            throw new IllegalStateException(e);\n        }\n    }", "public void mouseReleased (MouseEvent e)\n    {\n        // if the mouse was released within the bounds of the button, go\n        // ahead and select it properly\n        if (_selectedButton != null) {\n            if (_selectedButton.contains(e.getX(), e.getY())) {\n                // tell the model that the selection has changed (and\n                // we'll respond and do our business\n                Object elem = _selectedButton.getClientProperty(\"element\");\n                _model.setSelectedItem(elem);\n\n            } else {\n                _selectedButton.setBorder(DESELECTED_BORDER);\n                _selectedButton.repaint();\n            }\n\n            // clear out the selected button indicator\n            _selectedButton = null;\n        }\n    }", "protected Object getRequestData() throws ActivityException {\n        String varname = getAttributeValue(REQUEST_VARIABLE);\n        Object request = varname == null ? null : getParameterValue(varname);\n        if (!StringHelper.isEmpty(getPreScript())) {\n            Object returnVal = executePreScript(request);\n            if (returnVal == null) {\n                // nothing returned; requestVar may have been assigned by script\n                request = getParameterValue(varname);\n            }\n            else {\n                request = returnVal;\n            }\n        }\n        return request;\n    }", "protected final void dragTargetDragLeave ( ) { try { N_DragTargetDragLeave ( ) ; } catch ( UnsatisfiedLinkError ule ) { ule . printStackTrace ( ) ; } }", "@SuppressLint(\"HardwareIds\")\n  public static String getDeviceId(Context context) {\n    String androidId = getString(context.getContentResolver(), ANDROID_ID);\n    if (!isNullOrEmpty(androidId)\n        && !\"9774d56d682e549c\".equals(androidId)\n        && !\"unknown\".equals(androidId)\n        && !\"000000000000000\".equals(androidId)) {\n      return androidId;\n    }\n\n    // Serial number, guaranteed to be on all non phones in 2.3+.\n    if (!isNullOrEmpty(Build.SERIAL)) {\n      return Build.SERIAL;\n    }\n\n    // Telephony ID, guaranteed to be on all phones, requires READ_PHONE_STATE permission\n    if (hasPermission(context, READ_PHONE_STATE) && hasFeature(context, FEATURE_TELEPHONY)) {\n      TelephonyManager telephonyManager = getSystemService(context, TELEPHONY_SERVICE);\n      @SuppressLint(\"MissingPermission\")\n      String telephonyId = telephonyManager.getDeviceId();\n      if (!isNullOrEmpty(telephonyId)) {\n        return telephonyId;\n      }\n    }\n\n    // If this still fails, generate random identifier that does not persist across installations\n    return UUID.randomUUID().toString();\n  }", "public MultimapWithProtoValuesFluentAssertion<M> usingDoubleToleranceForFieldsForValues(\n      double tolerance, Iterable<Integer> fieldNumbers) {\n    return usingConfig(config.usingDoubleToleranceForFields(tolerance, fieldNumbers));\n  }", "private static double doubleHighPart ( double d ) { if ( d > - Precision . SAFE_MIN && d < Precision . SAFE_MIN ) { return d ; } long xl = Double . doubleToRawLongBits ( d ) ; xl &= MASK_30BITS ; return Double . longBitsToDouble ( xl ) ; }", "    protected void writeHeader() {\n        printHtmlHeader(configuration.getText(\"doclet.Window_Deprecated_List\"),\n            null, true);\n        navLinks(true);\n        hr();\n        center();\n        h2();\n        boldText(\"doclet.Deprecated_API\");\n        h2End();\n        centerEnd();\n        \n        hr(4, \"noshade\");\n    }\n", "@SafeVarargs\n    private final <T> Set<T> join(Set<T>... sets)\n    {\n        Set<T> result = new HashSet<>();\n        if (sets == null)\n            return result;\n\n        for (Set<T> set : sets)\n        {\n            if (set != null)\n                result.addAll(set);\n        }\n        return result;\n    }", "public void run ( ) { try { Thread . sleep ( timeout ) ; thread . interrupt ( ) ; } catch ( InterruptedException e ) { } }", "public IdQuery ( Class < T > type , Object id , QueryResultType queryResultType ) { this ( type . getName ( ) , id , null , queryResultType , NUM_ ) ; }", "@Override public String generateToolTip(XYDataset dataset,int series,int item){\n  return generateLabelString(dataset,series,item);\n}\n", "    public void assertTransient(Object a) {\n        OpenJPAEntityManager pm = currentEntityManager();\n        assertTrue(!pm.isPersistent(a));\n        assertTrue(!pm.isTransactional(a));\n        assertTrue(!pm.isNewlyPersistent(a));\n        assertTrue(!pm", "private void init(InputStream in) throws java.io.IOException {\n        if (in.available() > 2000000) {\n        \tthrow new IOException(\"Font too big\");\n        }\n        this.file = IOUtils.toByteArray(in);\n        this.fsize = this.file.length;\n        if (fsize > 2000000) {\n        \tthrow new IOException(\"Font too big\");\n        }\n        this.current = 0;\n    }", "private Cursor onGet(EnvKelp envKelp, RowCursor rowCursor, Boolean isFound)\n  {\n    if (Boolean.TRUE.equals(isFound)) {\n      envKelp.test(rowCursor);\n\n      CursorKraken cursor = new CursorKraken(table(), envKelp, rowCursor, _results);\n      \n      return cursor;\n    }\n    else {\n      return null;\n    }\n  }", "\tpublic E beforeSave(E entity) {\n\t\treturn entity;\n\t}\n", "public String toString ( ) { StringWriter sw = new StringWriter ( ) ; writeTo ( sw ) ; return sw . toString ( ) ; }", "private void checkTemporary(DestinationHandler destination, boolean mqinterop)\n\n                    throws SITemporaryDestinationNotFoundException\n    {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.entry(tc, \"checkTemporary\", new Object[] { destination, Boolean.valueOf(mqinterop) });\n\n        // If a Temporary Destination, ensure it is on this connection unless mqinterop\n        if (destination.isTemporary()\n            && !mqinterop\n            && (_temporaryDestinations.indexOf(destination.getName()) == -1))\n        {\n            SIMPTemporaryDestinationNotFoundException e =\n                            new SIMPTemporaryDestinationNotFoundException(\n                                            nls.getFormattedMessage(\n                                                                    \"TEMPORARY_DESTINATION_CONNECTION_ERROR_CWSIP0099\",\n                                                                    new Object[] { destination.getName() },\n                                                                    null));\n\n            if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            {\n                SibTr.exception(tc, e);\n                SibTr.exit(tc, \"checkTemporary\", e);\n            }\n            throw e;\n        }\n\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.exit(tc, \"checkTemporary\");\n    }", "private static double computeLuminance(int argb)\r\n    {\r\n        int r = (argb >> 16) & 0xFF;\r\n        int g = (argb >>  8) & 0xFF;\r\n        int b = (argb      ) & 0xFF;\r\n        double nr = Math.pow((r / 255.0), 2.2);\r\n        double ng = Math.pow((g / 255.0), 2.2);\r\n        double nb = Math.pow((b / 255.0), 2.2);\r\n        double y = 0.2126 * nr + 0.7151 * ng + 0.0721 * nb;\r\n        return y;\r\n    }", "private CGlobalSettings ( ) { }", "public VNXeCommandResult deleteLunGroup(String lunGroupId,boolean isForceSnapDeletion,boolean isForceVolumeDeletion){\n  if (isForceVolumeDeletion) {\n    DeleteStorageResourceRequest deleteReq=new DeleteStorageResourceRequest(_khClient);\n    return deleteReq.deleteLunGroup(lunGroupId,isForceSnapDeletion);\n  }\n else {\n    BlockLunRequests lunReq=new BlockLunRequests(_khClient);\n    List<VNXeLun> luns=lunReq.getLunsInLunGroup(lunGroupId);\n    if (luns != null && !luns.isEmpty()) {\n      List<String> lunIds=new ArrayList<String>();\n      for (      VNXeLun lun : luns) {\n        lunIds.add(lun.getId());\n      }\n      removeLunsFromLunGroup(lunGroupId,lunIds);\n    }\n    DeleteStorageResourceRequest deleteReq=new DeleteStorageResourceRequest(_khClient);\n    return deleteReq.deleteLunGroup(lunGroupId,isForceSnapDeletion);\n  }\n}\n", "MetricFamilySamples fromHistogram(String dropwizardName, Histogram histogram) {\n        return fromSnapshotAndCount(dropwizardName, histogram.getSnapshot(), histogram.getCount(), 1.0,\n                getHelpMessage(dropwizardName, histogram));\n    }", "@Override public void debugPrint(PrintStream out) throws AdeException {\n  super.debugPrint(out);\n  out.println(\"consideringEmptyIntervals = \" + m_percentilesWithEmptyIntervals);\n  out.println(\"intervalCount = \" + m_intervalCount);\n  out.println(\"percentiles:\");\n  for (int i=0; i < NUM_BUCKETS; ++i) {\n    out.printf(\"  %3d: %10.5f\\n\",i,m_percentiles[i]);\n  }\n}\n", "public void throwException(){\n  mv.visitInsn(Opcodes.ATHROW);\n}\n", "    public int hashCode() {\n\treturn hashCodeValue; \n    }\n", "\tpublic void resetLineWidth() {\n\t\tpredraw();\n\t\tGL.glLineWidth(1.0f);\n\t\tGL.glPointSize(1.0f);\n\t\tpostdraw();\n\t}\n", "private void addXmlBundle(CmsResource xmlBundle) {\r\n\r\n        String name = xmlBundle.getName();\r\n        String path = xmlBundle.getRootPath();\r\n        m_bundleBaseNames.add(name);\r\n\r\n        LOG.info(String.format(\"Adding property VFS bundle (path=%s, name=%s)\", xmlBundle.getRootPath(), name));\r\n        for (Locale locale : getAllLocales()) {\r\n            CmsVfsBundleParameters params = new CmsVfsBundleParameters(\r\n                name,\r\n                path,\r\n                locale,\r\n                false,\r\n                CmsVfsResourceBundle.TYPE_XML);\r\n            CmsVfsResourceBundle bundle = new CmsVfsResourceBundle(params);\r\n            addBundle(name, locale, bundle);\r\n        }\r\n    }", "public static INDArray reshapeWeights(long[] shape, INDArray paramsView, char flatteningOrder) {\n        return paramsView.reshape(flatteningOrder, shape);\n    }", "private static void printUsage(String cmd) {\n    if (\"-create\".equals(cmd)) {\n      System.err.println(\"Usage: java SnapshotShell [-create snapshot_id [-ignoreleases]]\");\n    } else if (\"-list\".equals(cmd)) {\n      System.err.println(\"Usage: java SnapshotShell [-list]\");\n    } else if (\"-delete\".equals(cmd)) {\n      System.err.println(\"Usage: java SnapshotShell [-delete snapshot_id]\");\n    } else {\n      System.err.println(\"Usage: java SnapshotShell \"\n                         + \"[-create snapshot_id [-ignoreleases]] \"\n                         + \"[-list] \"\n                         + \"[-delete snapshot_id] \");\n    }\n  }", "public void destroy ( ) { super . destroy ( ) ; }", "    public boolean validateRequired(String input) {\n        return ((input != null) && (input.trim().length() > 0));\n    }\n", "@Nullable\n  public WebSiteResourceBundleSerialized getResourceBundleOfID (@Nullable final String sBundleID)\n  {\n    if (StringHelper.hasNoText (sBundleID))\n      return null;\n\n    return m_aRWLock.readLocked ( () -> m_aMapToBundle.get (sBundleID));\n  }", "        public boolean deleteAdvertiser(Advertiser advertiser) throws Exception {\n                IAdvertiserDAO dao = null;\n                boolean retValue = false;\n\n                try {\n                        dao = AbstractJASSDAOFactory.getJASSDAO().getAdvertiserDAO();\n                        retValue = dao.deleteAdvertiser(advertiser);\n                } catch (Exception ex) {\n                        logger.log(Level.SEVERE, null, ex);\n                        ex.printStackTrace();\n                        throw ex;\n                } finally {\n                        dao = null;\n                }\n\n                return retValue;\n        }\n", "@Override public void handlePeriodicMaintenance(Operation maintenance){\n  ServiceUtils.logInfo(this,\"Periodic maintenance triggered. %s\",getSelfLink());\n  try {\n    maintenance.complete();\n    TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.STARTED,null));\n  }\n catch (  Throwable e) {\n    ServiceUtils.logSevere(this,\"Maintenance trigger failed with the failure: %s\",e.toString());\n  }\n}\n", "protected void destroy() {\n        ContextLogger.LOG.contextCleared(this);\n        final BeanStore beanStore = getBeanStore();\n        if (beanStore == null) {\n            throw ContextLogger.LOG.noBeanStoreAvailable(this);\n        }\n        for (BeanIdentifier id : beanStore) {\n            destroyContextualInstance(beanStore.get(id));\n        }\n        beanStore.clear();\n    }", "    public void removeMessageListener(MessageListener listener) {\n        messageListenerList.remove(listener);\n    }\n", "public void addListener(final INaviGraphListener listener){\n  super.addListener(listener);\n  m_listeners.addListener(listener);\n  m_synchronizer.addListener(listener);\n}\n", "\t public JabExtension (String namespace) {\n\t\t  this.namespace = namespace;\n\t\t  attributes = new HashMap();\n    }\n", "public void run ( File file , String [ ] arguments ) throws CompilationFailedException , IOException { GroovyShell shell = new GroovyShell ( getClass ( ) . getClassLoader ( ) , binding ) ; shell . run ( file , arguments ) ; }", "public boolean matchComparator(String dbschema,String codeschema){\n  if (!codeschema.startsWith(COMPARATOR_PACKAGE)) {\n    codeschema=COMPARATOR_PACKAGE + codeschema;\n  }\n  return dbschema.equals(codeschema);\n}\n", "public static void error ( final String message ) { if ( JQuantLib . logger != null ) { JQuantLib . logger . error ( message ) ; } else { System . err . printf ( STR_ , message ) ; } }", "\tpublic boolean contains(int x, int y) {\n\t\t// check to see if point is within the circle\n\t\treturn circle.contains(x, y);\n\t}\n", "public SharedIteratorSQLDataProviderDecorator(SQLDataProvider<T> sqlDataProvider,long timeToLive){\n  _sqlDataProvider=sqlDataProvider;\n  _timeToLive=timeToLive;\n  _queryToSources=new ConcurrentHashMap<SQLQuery<T>,SharedDataIteratorSource<T>>();\n  _sourcesToQuery=new ConcurrentHashMap<SharedDataIteratorSource<T>,SQLQuery<T>>();\n}\n", "public static InputStream doPOST(URL url, String data) throws IOException\n\t{\n\t\treturn doPOST(url,data,DEFAULT_CONNECTION_TIMEOUT);\n\t}", "private boolean awaitWork(WorkQueue w,int r){\n  if (w == null || w.qlock < 0)   return false;\n  for (int pred=w.stackPred, spins=SPINS, ss; ; ) {\n    if ((ss=w.scanState) >= 0)     break;\n else     if (spins > 0) {\n      r^=r << 6;\n      r^=r >>> 21;\n      r^=r << 7;\n      if (r >= 0 && --spins == 0) {\n        WorkQueue v;\n        WorkQueue[] ws;\n        int s, j;\n        AtomicLong sc;\n        if (pred != 0 && (ws=workQueues) != null && (j=pred & SMASK) < ws.length && (v=ws[j]) != null && (v.parker == null || v.scanState >= 0))         spins=SPINS;\n      }\n    }\n else     if (w.qlock < 0)     return false;\n else     if (!Thread.interrupted()) {\n      long c, prevctl, parkTime, deadline;\n      int ac=(int)((c=ctl) >> AC_SHIFT) + (config & SMASK);\n      if ((ac <= 0 && tryTerminate(false,false)) || (runState & STOP) != 0)       return false;\n      if (ac <= 0 && ss == (int)c) {\n        prevctl=(UC_MASK & (c + AC_UNIT)) | (SP_MASK & pred);\n        int t=(short)(c >>> TC_SHIFT);\n        if (t > 2 && U.compareAndSwapLong(this,CTL,c,prevctl))         return false;\n        parkTime=IDLE_TIMEOUT * ((t >= 0) ? 1 : 1 - t);\n        deadline=System.nanoTime() + parkTime - TIMEOUT_SLOP;\n      }\n else       prevctl=parkTime=deadline=0L;\n      Thread wt=Thread.currentThread();\n      U.putObject(wt,PARKBLOCKER,this);\n      w.parker=wt;\n      if (w.scanState < 0 && ctl == c)       U.park(false,parkTime);\n      U.putOrderedObject(w,QPARKER,null);\n      U.putObject(wt,PARKBLOCKER,null);\n      if (w.scanState >= 0)       break;\n      if (parkTime != 0L && ctl == c && deadline - System.nanoTime() <= 0L && U.compareAndSwapLong(this,CTL,c,prevctl))       return false;\n    }\n  }\n  return true;\n}\n", "public boolean stop ( ) { logger . info ( STR_ , hostId ) ; boolean status = network . stop ( ) ; status = Utils . stopThreads ( threads ) && status ; threads . clear ( ) ; for ( Shard shard : shards ) { status = shard . stop ( ) && status ; } shards . cl", "@Override\n    public ListProtectionsResult listProtections(ListProtectionsRequest request) {\n        request = beforeClientExecution(request);\n        return executeListProtections(request);\n    }", "public void invokeLater(Runnable r){\n  queue.add(r);\nsynchronized (this) {\n    if (synchronizer == null) {\n      runQueue();\n    }\n else {\n      synchronizer.activate();\n    }\n  }\n}\n", "public boolean checkedAdd(final int x) {\n    final short hb = Util.highbits(x);\n    final int i = highLowContainer.getIndex(hb);\n    if (i >= 0) {\n      Container c = highLowContainer.getContainerAtIndex(i);\n      int oldCard = c.getCardinality();\n      // we need to keep the newContainer if a switch between containers type\n      // occur, in order to get the new cardinality\n      Container newCont = c.add(Util.lowbits(x));\n      highLowContainer.setContainerAtIndex(i, newCont);\n      if (newCont.getCardinality() > oldCard) {\n        return true;\n      }\n    } else {\n      final ArrayContainer newac = new ArrayContainer();\n      highLowContainer.insertNewKeyValueAt(-i - 1, hb, newac.add(Util.lowbits(x)));\n      return true;\n    }\n    return false;\n  }", "public InputStreamReader reader(final String charset) throws HttpRequestException {\n  try {\n    return new InputStreamReader(stream(),getValidCharset(charset));\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new HttpRequestException(e);\n  }\n}\n", "public int evictStaleRefs(){\n  if (timeout != 0L) {\n    return evictStaleRefs(timeout);\n  }\n  return 0;\n}\n", "\tpublic int getBinderIconHeight() {\n\t\tint reply;\n\t\tswitch (this) {\n\t\tdefault:\n\t\tcase SMALL:   reply = BINDER_HEIGHT_SMALL_INT;  break;\n\t\tcase MEDIUM:  reply = BINDER_HEIGHT_MEDIUM_INT; break;\n\t\tcase LARGE:   reply = BINDER_HEIGHT_LARGE_INT;  break;\n\t\t}\n\t\treturn reply;\n\t}\n", "public Vector readTasksForProject(int projectId, int tasktype, String orderBy, String sort) throws CmsException {\n    return (m_rb.readTasksForProject(m_context.currentUser(), m_context.currentProject(), projectId, tasktype, orderBy, sort));\n}\n", "@SuppressWarnings(\"unchecked\")\n    static <T> Node<T> emptyNode(StreamShape shape) {\n        switch (shape) {\n            case REFERENCE:    return (Node<T>) EMPTY_NODE;\n            case INT_VALUE:    return (Node<T>) EMPTY_INT_NODE;\n            case LONG_VALUE:   return (Node<T>) EMPTY_LONG_NODE;\n            case DOUBLE_VALUE: return (Node<T>) EMPTY_DOUBLE_NODE;\n            default:\n                throw new IllegalStateException(\"Unknown shape \" + shape);\n        }\n    }", "    public BDD andWith(BDD that) {\n        return this.applyWith(that, BDDFactory.and);\n    }\n", "public void setSuiteIdsUsingZeroBasedIndex() {\n        synchronized (cachedSuites) {\n            List<WebAgentTestSuite> s = new ArrayList<>(cachedSuites.values());\n            cachedSuites.clear();\n            for ( int index=0; index < s.size(); index++) {\n                WebAgentTestSuite suite = s.get(index);\n                cachedSuites.put(suite.getTestSuiteName() + \"-\" + index, suite);\n            }\n        }\n    }", "\tprivate void removeModuleOperations(AxisModule module) {\n\t\tHashMap<QName, AxisOperation> moduleOperations = module.getOperations();\n\t\tif (moduleOperations != null) {\n\t\t\tfor (Iterator<AxisOperation> modOpsIter = moduleOperations.values().iterator(); modOpsIter\n\t\t\t\t\t.hasNext();) {\n\t\t\t\tAxisOperation operation = (AxisOperation) modOpsIter.next();\n\t\t\t\tremoveOperation(operation.getName());\n\t\t\t}\n\t\t}\n\t}\n", "    public double get_bottom_edge_width() {\n        return (getHeight()\n                - content_offset.getY()\n                - contents.get_frame_relative_height()); \n    }\n", "public static Intent newSmsIntent(Context context, String body, String[] phoneNumbers) {\n        Uri smsUri;\n        if (phoneNumbers == null || phoneNumbers.length==0) {\n            smsUri = Uri.parse(\"smsto:\");\n        } else {\n            smsUri = Uri.parse(\"smsto:\" + Uri.encode(TextUtils.join(\",\", phoneNumbers)));\n        }\n\n        Intent intent;\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n            intent = new Intent(Intent.ACTION_SENDTO, smsUri);\n            intent.setPackage(Telephony.Sms.getDefaultSmsPackage(context));\n        } else {\n            intent = new Intent(Intent.ACTION_VIEW, smsUri);\n        }\n\n        if (body!=null) {\n            intent.putExtra(\"sms_body\", body);\n        }\n\n        return intent;\n    }", "    public void removeBootInitializer(BootInitializer bootInitializer) {\n        this.bootInitializerList.remove(bootInitializer);\n    }\n", "    public int size() {\n        return descriptor.get().size;\n    }\n", "public Collection getMergedExcludes( Class target ) {\n      if( target == null ) {\n         return getMergedExcludes();\n      }\n\n      Collection exclusionSet = getMergedExcludes();\n      if( !exclusionMap.isEmpty() ) {\n         Object key = propertyExclusionClassMatcher.getMatch( target, exclusionMap.keySet() );\n         Set set = (Set) exclusionMap.get( key );\n         if( set != null && !set.isEmpty() ) {\n            for( Iterator i = set.iterator(); i.hasNext(); ) {\n               Object e = i.next();\n               if( !exclusionSet.contains( e ) ) {\n                  exclusionSet.add( e );\n               }\n            }\n         }\n      }\n\n      return exclusionSet;\n   }", "public UMUserPasswordResetOptionsData(String question,String questionLocalizedName,String answer,int dataStatus){\n  this.question=question.trim();\n  this.questionLocalizedName=questionLocalizedName;\n  this.answer=answer.trim();\n  this.dataStatus=dataStatus;\n}\n", "protected void updatePanelForMaximization(float percentage){\n  float promoVisibilityPercentage=isFullscreenSizePanel() ? 1.f - percentage : 1.f;\n  updatePromoVisibility(promoVisibilityPercentage);\n  mBasePageY=getBasePageTargetY();\n  float brightness=MathUtils.interpolate(BASE_PAGE_BRIGHTNESS_STATE_EXPANDED,BASE_PAGE_BRIGHTNESS_STATE_MAXIMIZED,percentage);\n  mBasePageBrightness=brightness;\n  float searchBarHeight=Math.round(MathUtils.interpolate(getSearchBarHeightExpanded(),getSearchBarHeightMaximized(),percentage));\n  mSearchBarHeight=searchBarHeight;\n  mIsSearchBarBorderVisible=true;\n  mArrowIconOpacity=ARROW_ICON_OPACITY_STATE_MAXIMIZED;\n  mCloseIconOpacity=CLOSE_ICON_OPACITY_STATE_MAXIMIZED;\n  mProgressBarOpacity=1.f;\n  updateSearchBarShadow();\n}\n", "private void initialize(){\n\t\tif(config.commandLogging){\n\t\t\tLog.d(config.commandLoggingTag, \"initialize()\");\n\t\t}\n\t\t\n\t\tTimeout.setLargeTimeout(initializeTimeout(\"solo_large_timeout\", config.timeout_large));\n\t\tTimeout.setSmallTimeout(initializeTimeout(\"solo_small_timeout\", config.timeout_small));\n\t}", "public static void startUp ( int port ) throws Exception { Registry reg = LocateRegistry . createRegistry ( port ) ; RemoteDriver d = new RemoteDriverImpl ( ) ; reg . rebind ( RMI_REG_NAME , d ) ; }", "public final void serialize(OutputStream out) throws IOException {\n        out.write(Jackson.toJsonString(this).getBytes(UTF8));\n        out.flush();\n    }", "private IEntryHolder updateEntrySA ( Context context , IEntryHolder entry , ITemplateHolder template , boolean fromReplication , boolean origin , IServerTypeDesc typeDesc ) throws SAException { _cacheManager . insertToRecentUpdatesIfNeeded ( entry , _cach", "public CommonDialogWindow createUpdateSoftwareModuleWindow(final Long baseSwModuleId) {\n        this.baseSwModuleId = baseSwModuleId;\n        resetComponents();\n        populateTypeNameCombo();\n        populateValuesOfSwModule();\n        return createWindow();\n    }", "    public void last(Container parent) {\n        synchronized (parent.getTreeLock()) {\n            checkLayout( parent );\n\n            int ncomponents = parent.getComponentCount();\n\n            for (int i = 0; i < ncomponents; i++) {\n                Component comp = parent.getComponent( i );\n\n                if (comp.isVisible()) {\n                    setActive( comp, false );\n                    comp = parent.getComponent( ncomponents - 1 );\n                    setActive( comp, true );\n                    parent.validate();\n                    return;\n                }\n            }\n        }\n    }\n", "public SignatureFile(Manifest manifest,String name) throws JarException {\n  this(name,true);\n  this.manifest=manifest;\n  Enumeration<MessageHeader> enum_=manifest.entries();\n  while (enum_.hasMoreElements()) {\n    MessageHeader mh=enum_.nextElement();\n    String entryName=mh.findValue(\"Name\");\n    if (entryName != null) {\n      add(entryName);\n    }\n  }\n}\n", "  public void removeHandle ( PHandle h ) {\n\t\n    for (int i = 0; i < handleList.size(); i++) {\n\n      if (((PNamedHandle) handleList.get(i)).equals(h)) {\n\t\tremoveHandle( i );\n        break;\n      }\n    }\n  }\n", "   private void setPosition() {\n      setWidth(this.panel.getSystemVariable(UploadPanel.SV_DIALOG_WIDTH) + \"px\");\n      this.content.setWidth(this.panel.getSystemVariable(UploadPanel.SV_DIALOG_WIDTH) + \"px\");\n      setPopupPosition((Window.getClientWidth() - this.panel.getSystemVariable(UploadPanel.SV_DIALOG_WIDTH)) / 2, (Window.getClientHeight() - this.content.getOffsetHeight()) / 2);\n      DOM.setStyleAttribute(this.slots.getElement(), \"backgroundColor\", this.panel.getMessage(UploadPanel.MSG_SLOTS_COLOR));\n   }\n", "    public boolean hasMoreTokens() {\n        return (currentToken < tokenized.length);\n    }\n", "private JButton createAndAddIconToToolbar ( final Action action , final String defaultIconPath , final String rolloverIconPath , final String pressedIconPath ) { final JButton button = add ( CActionProxy . proxy ( action ) ) ; button . setBorder ( new Emp", "public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n  ref=LiveRef.read(in,false);\n}\n", "public static void times(Number self, @ClosureParams(value=SimpleType.class,options=\"int\")  Closure closure) {\n        for (int i = 0, size = self.intValue(); i < size; i++) {\n            closure.call(i);\n            if (closure.getDirective() == Closure.DONE) {\n                break;\n            }\n        }\n    }", "public void runOnce(Runnable task){\n  temporaryTasks.add(task);\n}", "public static Date fixEncounterDateTime(Date datetime){\n  Date now=new Date();\n  if (datetime.after(now)) {\n    datetime=now;\n  }\n  return datetime;\n}\n", "    public void setShape(final Shape shape) {\n        if(shape == null) {\n            throw new IllegalArgumentException(\"Shape cannot be null.\");\n        }\n\n        final PropertyChangeEvent event = new PropertyChangeEvent(this,\"shape\",this.shape,shape);\n        this.shape = shape;\n        getPropertyChangeSupport().firePropertyChange(event);\n    }\n", "  public void removeFile(org.jajuk.base.File file) {\n    if (files.contains(file)) {\n      files.remove(file);\n    }\n  }\n", "\tpublic void enterScope(Scope s){\n\t\tcurrentScope.addChild(s);\n\t\tcurrentScope = s;\n\t\tscopeLevel++;\n\t}\n", "private void uploadReviews ( ContentProviderClient cp ) throws RemoteException { String [ ] proj = { alias ( ReviewsJoinRestaurants . REVIEW__ID ) , alias ( ReviewsJoinRestaurants . REVIEW_GLOBAL_ID ) , ReviewsJoinRestaurants . RESTAURANT_GLOBAL_ID + STR_ + Reviews . RESTAURANT_ID , Reviews . COMMENTS , alias ( ReviewsJoinRestaurants . REVIEW_RATING ) , Reviews . WRITTEN_ON , alias ( ReviewsJoinRestaurants . REVIEW_STATUS_ID ) , alias ( ReviewsJoinRestaurants . REVIEW_DIRTY ) , alias ( ReviewsJoinRestaurants . REVIEW_VERSION ) } ; String sel = Reviews . TYPE_ID + STR_ + ReviewsJoinRestaurants . REVIEW_DIRTY + STR_ ; String [ ] args = { String . valueOf ( PRIVATE . id ) } ; List < Review > reviews = Reviews . from ( cp . query ( ReviewsJoinRestaurants . CONTENT_URI , proj , sel , args , null ) ) ; if ( reviews != null ) { response ( Server . syncReviews ( reviews ) , cp , REVIEWS_URI ) ; } }", "    public TextField getOutrosObitos() {\n        if (OutrosObitos == null) {//GEN-END:|136-getter|0|136-preInit\n            // write pre-init user code here\n            OutrosObitos = new TextField(\"Outros \\u00D3bitos\", null, 3, TextField.NUMERIC);//GEN-LINE:|136-getter|1|136-postInit\n            OutrosObitos.setString(\"0\");\n        }//GEN-BEGIN:|136-getter|2|\n        return OutrosObitos;\n    }\n", "\tpublic int set(int i, int newValue) {\n\t\tif ( i>=n ) {\n\t\t\tsetSize(i); // unlike definition of set in ArrayList, set size\n\t\t}\n\t\tint v = elements[i];\n\t\telements[i] = newValue;\n\t\treturn v;\n\t}\n", "public void visit ( int version , int access , String name , String signature , String superName , String [ ] interfaces ) { if ( cv != null ) { cv . visit ( version , access , name , signature , superName , interfaces ) ; } }", "    public float getMolecularWeight(String smiles) throws CDKException {\n        try {\n            SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n            IMolecule mol = sp.parseSmiles(smiles);\n            CDKHydrogenAdder hAdder = CDKHydrogenAdder.getInstance(DefaultChemObjectBuilder.getInstance());\n            hAdder.addImplicitHydrogens(mol);\n            AtomContainerManipulator.convertImplicitToExplicitHydrogens(mol);\n\n            return (float) MolecularFormulaManipulator.getNaturalExactMass(MolecularFormulaManipulator.getMolecularFormula(mol));\n        } catch (CDKException cdke) {\n            logger.error(\"SMILES parsing error for '\" + smiles + \"'\");\n            throw new CDKException(cdke.toString());\n        }\n    }\n", "void swipeFullLeft ( By by ) ;", "public void paint(Graphics g,Component c){\n  int x=c.getX();\n  int y=c.getY();\n  int width=c.getWidth();\n  int height=c.getHeight();\n  if (outerBorder != null) {\n    if (paintOuterBorderFirst) {\n      outerBorder.paint(g,x,y,width,height,c);\n      paint(g", "public Object[] getDataAccordingToSchema(SpreadSheetCellDAO[] dataRow) {\n\t\tif (dataRow == null) {\n\t\t\treturn new Object[this.schemaRow.size()];\n\t\t}\n\t\tif (dataRow.length > this.schemaRow.size()) {\n\t\t\tLOG.warn(\"Data row is larger than schema. Will return String for everything that is not specified. \");\n\t\t}\n\t\tList<Object> returnList = new ArrayList<>();\n\t\tfor (int i = 0; i < this.schemaRow.size(); i++) { // fill up with schema rows\n\t\t\treturnList.add(null);\n\t\t}\n\t\tfor (int i = 0; i < dataRow.length; i++) {\n\t\t\tSpreadSheetCellDAO currentCell = dataRow[i];\n\n\t\t\tif (currentCell != null) {\n\t\t\t\t// determine real position\n\t\t\t\tint j = new CellAddress(currentCell.getAddress()).getColumn();\n\t\t\t\tif (j >= returnList.size()) {\n\t\t\t\t\t// fill up\n\t\t\t\t\tfor (int x = returnList.size(); x <= j; x++) {\n\t\t\t\t\t\treturnList.add(null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tGenericDataType applyDataType = null;\n\t\t\t\tif (j >= this.schemaRow.size()) {\n\t\t\t\t\tLOG.warn(\n\t\t\t\t\t\t\t\"No further schema row for column defined: \" + String.valueOf(j) + \". Will assume String.\");\n\t\t\t\t} else {\n\t\t\t\t\tapplyDataType = this.schemaRow.get(j);\n\t\t\t\t}\n\t\t\t\tif (applyDataType == null) {\n\t\t\t\t\treturnList.set(j, currentCell.getFormattedValue());\n\t\t\t\t} else if (applyDataType instanceof GenericStringDataType) {\n\t\t\t\t\treturnList.set(j, currentCell.getFormattedValue());\n\t\t\t\t} else if (applyDataType instanceof GenericBooleanDataType) {\n\t\t\t\t\tif (!\"\".equals(currentCell.getFormattedValue())) {\n\t\t\t\t\t\tif (currentCell.getFormattedValue().equalsIgnoreCase(\"true\")\n\t\t\t\t\t\t\t\t|| currentCell.getFormattedValue().equalsIgnoreCase(\"false\")) {\n\t\t\t\t\t\t\treturnList.set(j, Boolean.valueOf(currentCell.getFormattedValue()));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t\telse if (applyDataType instanceof GenericTimestampDataType) {\n\t\t\t\t\tif (!\"\".equals(currentCell.getFormattedValue())) {\n\t\t\t\t\t\tboolean timestampFound=false;\n\t\t\t\t\t\tif (this.dateTimeFormat!=null) { // check first dateTimeFormat\n\t\t\t\t\t\t\tDate theDate = this.dateTimeFormat.parse(currentCell.getFormattedValue(), new ParsePosition(0));\n\t\t\t\t\t\t\tif (theDate != null) {\n\t\t\t\t\t\t\t\treturnList.set(j, new java.sql.Timestamp(theDate.getTime()));\n\t\t\t\t\t\t\t\ttimestampFound=true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturnList.set(j, null);\n\t\t\t\t\t\t\t\tLOG.warn(\"Could not identify timestamp using Date.parse using provided dateTime format. Trying Timestamp.valueOf. Original value: \"+currentCell.getFormattedValue());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} \n\t\t\t\t\t\tif (!timestampFound) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturnList.set(j, java.sql.Timestamp.valueOf(currentCell.getFormattedValue()));\n\t\t\t\t\t\t\t\ttimestampFound=true;\n\t\t\t\t\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\t\t\t\t\treturnList.set(j, null);\n\t\t\t\t\t\t\t\tLOG.warn(\"Could not identify timestamp using TimeStamp.valueOf. Trying last resort Date parsing. Original value: \"+currentCell.getFormattedValue());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!timestampFound) {\n\t\t\t\t\t\t\tDate theDate = this.dateFormat.parse(currentCell.getFormattedValue(), new ParsePosition(0));\n\t\t\t\t\t\t\tif (theDate != null) {\n\t\t\t\t\t\t\t\treturnList.set(j, new java.sql.Timestamp(theDate.getTime()));\n\t\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturnList.set(j, null);\n\t\t\t\t\t\t\t\tLOG.warn(\"Could not identify timestamp using Date.parse using provided date format\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (applyDataType instanceof GenericDateDataType) {\n\t\t\t\t\tif (!\"\".equals(currentCell.getFormattedValue())) {\n\t\t\t\t\t\tDate theDate = this.dateFormat.parse(currentCell.getFormattedValue(), new ParsePosition(0));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (theDate != null) {\n\t\t\t\t\t\t\treturnList.set(j, theDate);\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturnList.set(j, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} \n\n\t\t\t\telse if (applyDataType instanceof GenericNumericDataType) {\n\t\t\t\t\tif (!\"\".equals(currentCell.getFormattedValue())) {\n\t\t\t\t\t\tBigDecimal bd = null;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!\"\".equals(currentCell.getFormattedValue())) {\n\t\t\t\t\t\t\t\t// check scientific notation\n\t\t\t\t\t\t\t\tif (currentCell.getFormattedValue().toUpperCase().contains(\"E\")) { // parse scientific notation\n\t\t\t\t\t\t\t\t\t// remove any characters that could cause issues\n\t\t\t\t\t\t\t\t\tString sanitizedCellContent = currentCell.getFormattedValue().replace(\",\", \".\");\n\t\t\t\t\t\t\t\t\tbd = new BigDecimal(sanitizedCellContent);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tbd = (BigDecimal) this.decimalFormat.parse(currentCell.getFormattedValue());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (ParseException p) {\n\t\t\t\t\t\t\tLOG.warn(\n\t\t\t\t\t\t\t\t\t\"Could not parse decimal in spreadsheet cell, although type was detected as decimal\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (bd != null) {\n\t\t\t\t\t\t\tBigDecimal bdv = bd.stripTrailingZeros();\n\t\t\t\t\t\t\tif (applyDataType instanceof GenericByteDataType) {\n\t\t\t\t\t\t\t\treturnList.set(j, (byte) bdv.byteValueExact());\n\t\t\t\t\t\t\t} else if (applyDataType instanceof GenericShortDataType) {\n\t\t\t\t\t\t\t\treturnList.set(j, (short) bdv.shortValueExact());\n\t\t\t\t\t\t\t} else if (applyDataType instanceof GenericIntegerDataType) {\n\t\t\t\t\t\t\t\treturnList.set(j, (int) bdv.intValueExact());\n\t\t\t\t\t\t\t} else if (applyDataType instanceof GenericLongDataType) {\n\t\t\t\t\t\t\t\treturnList.set(j, (long) bdv.longValueExact());\n\t\t\t\t\t\t\t} else if (applyDataType instanceof GenericDoubleDataType) {\n\t\t\t\t\t\t\t\treturnList.set(j, (double) bdv.doubleValue());\n\t\t\t\t\t\t\t} else if (applyDataType instanceof GenericFloatDataType) {\n\t\t\t\t\t\t\t\treturnList.set(j, (float) bdv.floatValue());\n\t\t\t\t\t\t\t} else if (applyDataType instanceof GenericBigDecimalDataType) {\n\t\t\t\t\t\t\t\treturnList.set(j, bd);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturnList.set(j, null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturnList.set(j, null);\n\t\t\t\t\tLOG.warn(\"Could not convert object in spreadsheet cellrow. Did you add a new datatype?\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tObject[] result = new Object[returnList.size()];\n\t\treturnList.toArray(result);\n\t\treturn result;\n\t}", "  public Object clone() {\n    try {\n      DAS d = (DAS)super.clone();\n      d.attr = new SortedTable();\n      for(int i=0; i<attr.size(); i++) {\n\tString key = (String)attr.getKey(i);\n\tAttributeTable element = (AttributeTable)attr.elementAt(i);\n\t// clone element (don't clone key because it's a read-only String)\n\td.attr.put(key, element.clone());\n      }\n      return d;\n    } catch (CloneNotSupportedException e) {\n      // this shouldn't happen, since we are Cloneable\n      throw new InternalError();\n    }\n  }\n", "public CSelectionCriteriumPanel(final CSelectionCriterium criterium){\n  super(new BorderLayout());\n  m_criterium=criterium;\n  selectionStateBox.addActionListener(selectionStateBoxListener);\n  initPanel();\n}\n", "public static String outputNestedList(NestedList nl, int depth){\n\t\tString result = \"\";\n\t\tif(nl == null)\n\t\t {\n\t\t\treturn result; // If null return empty string\n\t\t}\n\n\t\tfor(int i = 0; i<depth; i++)\n\t\t {\n\t\t\tresult += \" \";\t\t// insert indentation according to depth\n\t\t}\n\n\t\tif(nl.getClass() == NestedListElement.class){ // If it is a NestedListElement,\n\t\t\t\t\t\t\t\t\t\t\t\t\t  // we reached a leaf, return its contents\n\t\t\tresult += nl.getText();\n\t\t}else{\n\t\t\tresult += \"---\";\t// If it is not a NestedListElement, it is a NestedListContainer\n\t\t\t\t\t\t\t\t// print out all its childs, increment depth\n\t\t\tfor(NestedList nl2 : ((NestedListContainer)nl).getNestedLists()) {\n\t\t\t\tresult += \"\\n\"+outputNestedList(nl2, depth+1);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}", "public File resolve ( String filename , boolean isModule ) ;", "public int getRating(Reference reference, RatingType type, int userId) {\r\n\t\treturn getResourceFactory()\r\n\t\t\t\t.getApiResource(\r\n\t\t\t\t\t\t\"/rating/\" + reference.toURLFragment() + type + \"/\"\r\n\t\t\t\t\t\t\t\t+ userId).get(SingleRatingValue.class)\r\n\t\t\t\t.getValue();\r\n\t}", "public static String encode(PemInfo pemInfo){\n  StringBuffer sbPem=new StringBuffer();\n  sbPem.append(\"-----BEGIN \");\n  sbPem.append(pemInfo.getType());\n  sbPem.append(\"-----\");\n  sbPem.append(\"\\n\");\n  PemAttributes attributes=pemInfo.getAttributes();\n  if (attributes != null && attributes.size() > 0) {\n    for (    PemAttribute attribute : attributes.values()) {\n      sbPem.append(attribute);\n      sbPem.append('\\n');\n    }\n    sbPem.append('\\n');\n  }\n  String base64=new String(Base64.encode(pemInfo.getContent()));\n  for (int i=0; i < base64.length(); i+=MAX_PRINTABLE_ENCODING_LINE_LENGTH) {\n    int lineLength;\n    if (i + MAX_PRINTABLE_ENCODING_LINE_LENGTH > base64.length()) {\n      lineLength=base64.length() - i;\n    }\n else {\n      lineLength=MAX_PRINTABLE_ENCODING_LINE_LENGTH;\n    }\n    sbPem.append(base64.substring(i,i + lineLength));\n    sbPem.append(\"\\n\");\n  }\n  sbPem.append(\"-----END \");\n  sbPem.append(pemInfo.getType());\n  sbPem.append(\"-----\");\n  sbPem.append(\"\\n\");\n  return sbPem.toString();\n}\n", "public static String escape(String input, char echar, char[] special) {\n        StringBuilder sb = new StringBuilder();\n        for (Character character : special) {\n            sb.append(character);\n        }\n        sb.append(echar);\n        String s = Matcher.quoteReplacement(new String(new char[]{echar}));\n        return input.replaceAll(\"[\" + Pattern.quote(sb.toString()) + \"]\", s + \"$0\");\n    }", "\tpublic void logMessage(String label, String msg) {\n\n\t\tif(msg == null)\n\t\t\treturn;\n\n\t\tDate now = new Date();\n\t\t_out.print(now.toString());\n\t\t_out.print(\" : \");\n\t\t_out.print(label);\n\t\t_out.print(\" : \");\n\t\t_out.println(msg);\n\t}\n", "private void merge ( VelocityContext context , Table table , Writer writer ) throws ReplicatorException { try { context . put ( STR_ , table ) ; if ( template != null ) template . merge ( context , writer ) ; } catch ( MethodInvocationException mie ) { throw new ReplicatorException ( STR_ , mie ) ; } catch ( Exception e ) { throw new ReplicatorException ( e ) ; } }", "public static Document parse(Path path, boolean validation) throws IOException, SAXException, IllegalArgumentException {\n        return parse(path.toFile(), validation);\n    }", "public AttributeInfo copy(ConstPool newCp,Map classnames){\n  Copier copier=new Copier(info,constPool,newCp,classnames);\n  try {\n    copier.parameters();\n    return new ParameterAnnotationsAttribute(newCp,getName(),copier.close());\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e.toString());\n  }\n}\n", "protected void addSpace(){\n  add(new JLabel(\" \"));\n}\n", "public void invDctInPlaceNxN(double[][] coeffs){\n  int u=0;\n  int v=0;\n  double two_over_sqrtncolsnrows=2.0 / Math.sqrt((double)this.N * this.M);\n  for (u=0; u <= this.M - 1; u++) {\n    invFctNoScale(coeffs[u]);\n  }\n  for (v=0; v <= this.N - 1; v++) {\n    for (u=0; u <= this.M - 1; u++) {\n      this.nxnTmp[u]=coeffs[u][v];\n    }\n    invFctNoScale(this.nxnTmp);\n    for (u=0; u <= this.M - 1; u++) {\n      coeffs[u][v]=this.nxnTmp[u] * two_over_sqrtncolsnrows;\n    }\n  }\n}\n", "  public void saveFrame() {\n    try {\n      g.save(savePath(\"screen-\" + nf(frameCount, 4) + \".tif\"));\n    } catch (SecurityException se) {\n      System.err.println(\"Can't use saveFrame() when running in a browser, \" +\n                         \"unless usin", "public SockAddr getNetmask() {\n\t\tSockAddr sockAddr = null;\n\t\tif (this.netmask != null) {\n\t\t\tsockAddr = new SockAddr(this.netmask.getSaFamily().getValue(), this.netmask.getData());\n\t\t}\n\t\treturn sockAddr;\n\t}", "    public boolean isEnableBinocluarAssociation() {\n        return enableBinocluarAssociation;\n    }\n", "public static boolean hasFunction(Object object, String functionName, Class[] parameters) {\n        boolean result = false;\n\n        try {\n            Method method = object.getClass().getMethod(functionName, parameters);\n\n            if (method != ", "@PostMapping(\"/tagattribute\")\n  public @ResponseBody OntologyTag addTagAttribute(@Valid @RequestBody AddTagRequest request) {\n    return ontologyTagService.addAttributeTag(\n        request.getEntityTypeId(),\n        request.getAttributeName(),\n        request.getRelationIRI(),\n        request.getOntologyTermIRIs());\n  }", "public void callSerially(Runnable r){\n  if (codenameOneRunning) {\nsynchronized (lock) {\n      pendingSerialCalls.add(r);\n      lock.notifyAll();\n    }\n  }\n else {\n    r.run();\n  }\n}\n", "public void updateEvent(String key, String value, boolean useTemp, boolean toNext) {\n        if (isEventExist()) {\n            getCurrentEvent().put(key, value);\n        } else {\n            HashMap tmp;\n            if (\"date\".equals(key)) {\n                tmp = addEvent(value, useTemp);\n            } else {\n                tmp = addEvent(null, useTemp);\n            }\n            tmp.putAll(template);\n            tmp.put(key, value);\n        }\n        if (toNext) {\n            getNextEventIndex();\n        }\n    }", "public static void distributeShare(\n      double total, final Collection<? extends Schedulable> schedulables,\n      ScheduleComparator comparator) {\n    switch (comparator) {\n    case FIFO:\n    case DEADLINE:\n      Schedulable.distributeShareSorted(total, schedulables, comparator);\n      break;\n    case FAIR:\n      Schedulable.distributeShareFair(total, schedulables);\n      break;\n    case PRIORITY:\n      Schedulable.distributeSharePriority(total, schedulables);\n      break;\n    default:\n      throw new IllegalArgumentException(\"Unknown comparator\");\n    }\n  }", "public static boolean endsWith(CharSequence seq, CharSequence pattern, IntUnaryOperator op)\r\n    {\r\n        if (pattern.length() > seq.length())\r\n        {\r\n            return false;\r\n        }\r\n        int ls = seq.length();\r\n        int lp = pattern.length();\r\n        for (int ii=1;ii<=lp;ii++)\r\n        {\r\n            if (op.applyAsInt(seq.charAt(ls-ii)) != op.applyAsInt(pattern.charAt(lp-ii)))\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }", "private void addJobGroupName ( String groupName ) throws JobPersistenceException , ResourceException { addRepoListName ( groupName , JOB_GROUP_NAMES_RESOURCE_PATH , STR_ ) ; }", "public boolean nextTile() throws ModelControlException {\n  boolean movedToRow=super.nextTile();\n  PWResetQuestionModel model=getModel();\n  if (movedToRow) {\n    String question=questionKeys.get(getTileIndex());\n    String localizedStr=model.getLocalizedStrForQuestion(question);\n    HiddenField hf=(HiddenField)getChild(FLD_ATTR_NAME);\n    hf.setValue(question);\n    setDisplayFieldValue(LBL_QUESTION,localizedStr);\n  }\n  return movedToRow;\n}\n", "    public void endEntity(String name) throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.endEntity(name);\n        }\n    }\n", "private boolean validateEndIp(Set ipSet) throws PolicyException {\n  if (startIp == Long.MAX_VALUE) {\n    String args[]={END_IP,START_IP};\n    throw new PolicyException(ResBundleUtils.rbName,\"pair_property_not_defined\",args,null);\n  }\n  if (ipSet.size() != 1) {\n    String args[]={END_IP};\n    throw new PolicyException(ResBundleUtils.rbName,\"multiple_values_not_allowed_for\",args,null);\n  }\n  Iterator endIpIter=ipSet.iterator();\n  try {\n    String endIpString=(String)endIpIter.next();\n    endIp=stringToIp(endIpString);\n  }\n catch (  ClassCastException ce) {\n    String args[]={END_IP};\n    throw new PolicyException(ResBundleUtils.rbName,\"property_is_not_a_String\",args,ce);\n  }\n  if (endIp < startIp) {\n    throw new PolicyException(ResBundleUtils.rbName,\"start_ip_can_not_be_greater_than_end_ip\",null,null);\n  }\n  return true;\n}\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public void addListener ( final IFilterDialogListener listener ) { m_listeners . addListener ( listener ) ; }", "    public boolean canExit() {\n        for (final Plugin<G, A, R> plugin : pluginModel) {\n            if (plugin.isModified()) {\n                final int result = ACTION_BUILDER.showConfirmDialog(parent, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, \"pluginConfirmSaveChanges\", plugin.getName());\n                if (result == JOptionPane.YES_OPTION) {\n                    if (!savePlugin(plugin)) {\n                        return false;\n                    }\n                } else if (result == JOptionPane.CANCEL_OPTION || result == JOptionPane.CLOSED_OPTION) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n", "public static ReilInstruction createSub ( final Address address , final ReilOperand firstOperand , final ReilOperand secondOperand , final ReilOperand thirdOperand ) { return new ReilInstruction ( address , ReilMnemonics . SUB , firstOperand , secondOperand , thirdOperand ) ; }", "public MethodCallExpr addArgument ( Expression arg ) { getArgs ( ) . add ( arg ) ; arg . setParentNode ( this ) ; return this ; }", "    public Profile getGLSLProfile() {\n        for (Profile p : profiles) {\n            if (p.getProfileType() == ProfileType.GLSL) {\n                return p;\n            }\n        }\n        return null;\n    }\n", "public V computeIfPresent(K key,BiFun<? super K,? super V,? extends V> remappingFunction){\n  if (key == null || remappingFunction == null)   throw new NullPointerException();\n  int h=spread(key.hashCode());\n  V val=null;\n  int delta=0;\n  int binCount=0;\n  for (Node<K,V>[] tab=table; ; ) {\n    Node<K,V> f;\n    int n, i, fh;\n    if (tab == null || (n=tab.length) == 0)     tab=initTable();\n else     if ((f=tabAt(tab,i=(n - 1) & h)) == null)     break;\n else     if ((fh=f.hash) == MOVED)     tab=helpTransfer(tab,f);\n else {\nsynchronized (f) {\n        if (tabAt(tab,i) == f) {\n          if (fh >= 0) {\n            binCount=1;\n            for (Node<K,V> e=f, pred=null; ; ++binCount) {\n              K ek;\n              if (e.hash == h && ((ek=e.key) == key || (ek != null && key.equals(ek)))) {\n                val=remappingFunction.apply(key,e.val);\n                if (val != null)                 e.val=val;\n else {\n                  delta=-1;\n                  Node<K,V> en=e.next;\n                  if (pred != null)                   pred.next=en;\n else                   setTabAt(tab,i,en);\n                }\n                break;\n              }\n              pred=e;\n              if ((e=e.next) == null)               break;\n            }\n          }\n else           if (f instanceof TreeBin) {\n            binCount=2;\n            TreeBin<K,V> t=(TreeBin<K,V>)f;\n            TreeNode<K,V> r, p;\n            if ((r=t.root) != null && (p=r.findTreeNode(h,key,null)) != null) {\n              val=remappingFunction.apply(key,p.val);\n              if (val != null)               p.val=val;\n else {\n                delta=-1;\n                if (t.removeTreeNode(p))                 setTabAt(tab,i,untreeify(t.first));\n              }\n            }\n          }\n        }\n      }\n      if (binCount != 0)       break;\n    }\n  }\n  if (delta != 0)   addCount(delta,binCount);\n  return val;\n}\n", "  public String getName(String documentType) {\n\t\tif(documentType.equals(IDocument.WRITER)) {\n      return \"Open Document Template Text\";\n    }\n\t\telse if(documentType.equals(IDocument.CALC)) {\n      return \"Open Document Template Spreadsheet\";\n    }\n\t\telse", "public static Field[] getFields (Class<?> clazz)\n    {\n        ArrayList<Field> list = new ArrayList<Field>();\n        getFields(clazz, list);\n        return list.toArray(new Field[list.size()]);\n    }", "private UserRole getPanelRole(User user, Panel panel) {\n    if (panel != null) {\n      PanelUserDAO panelUserDAO = new PanelUserDAO();\n      PanelUser panelUser = panelUserDAO.findByPanelAndUserAndStamp(panel, user, panel.getCurrentStamp());\n      return ", "@Nonnull\n\tpublic static LFltSupplier fltSupplierFrom(Consumer<LFltSupplierBuilder> buildingFunction) {\n\t\tLFltSupplierBuilder builder = new LFltSupplierBuilder();\n\t\tbuildingFunction.accept(builder);\n\t\treturn builder.build();\n\t}", "public Matrix4f frustum(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {\n        if ((properties & PROPERTY_IDENTITY) != 0)\n            return dest.setFrustum(left, right, bottom, top, zNear, ", "public void setTimeBasedAutoScalingConfigurations(java.util.Collection<TimeBasedAutoScalingConfiguration> timeBasedAutoScalingConfigurations) {\n        if (timeBasedAutoScalingConfigurations == null) {\n            this.timeBasedAutoScalingConfigurations = null;\n            return;\n        }\n\n        this.timeBasedAutoScalingConfigurations = new com.amazonaws.internal.SdkInternalList<TimeBasedAutoScalingConfiguration>(\n                timeBasedAutoScalingConfigurations);\n    }", "public SnowballAnalyzer(String name,CharArraySet stopWords){\n  this(name);\n  stopSet=CharArraySet.unmodifiableSet(CharArraySet.copy(stopWords));\n}", "public <T> void addListener(final Listener<T> listener, final Object instance) {\n\t\tfinal ListenerInstancePair<T> pair = new ListenerInstancePair<T>(listener, instance);\n\t\tthis.listeners.add(pair);\n\t\tfinal Type observableType = GenericsUtil.getEntityGenericType(listener.getClass(), 0, Listener.class);\n\t\tfinal Class<?> observable = GenericsUtil.guessClazz(observableType);\n\t\tif (!this.cachedListeners.containsKey(observable)) {\n\t\t\tthis.cachedListeners.put(observable, new LinkedList<ListenerInstancePair<?>>());\n\t\t}\n\t\tfor (final Map.Entry<Class<?>, List<ListenerInstancePair<?>>> entry : this.cachedListeners.entrySet()) {\n\t\t\tfinal Class<?> type = entry.getKey();\n\t\t\tif (observable.isAssignableFrom(type)) {\n\t\t\t\tentry.getValue().add(pair);\n\t\t\t}\n\t\t}\n\t}", "public byte [ ] scramble ( byte [ ] serverRandom ) { byte [ ] result = new byte [ serverRandom . length ] ; byte mask = nextByte ( NUM_ ) ; for ( int i = NUM_ ; i < serverRandom . length ; i ++ ) { result [ i ] = ( byte ) ( serverRandom [ i ] ^ ( nextByte ( ) & mask ) ) ; } return result ; }", "public void paintTreeCellFocus ( SynthContext context , Graphics g , int x , int y , int w , int h ) { }", "public int size(){\n  return cursors.size();\n}\n", "public static List<History> findHistoryByJobAndStatus(EntityManager em,JPAEntity job,BigInteger limit,JobStatus jobStatus){\n  requireArgument(em != null,\"Entity manager cannot be null.\");\n  requireArgument(job != null,\"The job cannot be null.\");\n  TypedQuery<History> query=em.createNamedQuery(\"History.findByJobAndStatus\",History.class);\n  if (limit != null) {\n    query.setMaxResults(limit.intValue());\n  }\n  try {\n    query.setParameter(\"entity\",job);\n    query.setParameter(\"jobStatus\",jobStatus);\n    return query.getResultList();\n  }\n catch (  NoResultException ex) {\n    return new ArrayList<History>(0);\n  }\n}\n", "public void onEdgeDragStarted ( int edgeFlags , int pointerId ) { }", "    protected boolean unitLeavesTransport(AIUnit aiUnit, Direction direction) {\n        final Unit unit = aiUnit.getUnit();\n        boolean result = (direction == null)\n            ? AIMessage.askDisembark(aiUnit)\n            : AIMessage.askMove(aiUnit, d", "protected void checkLock(){\n  ReentrantLock lock=Bridge.getLock();\n  if (lock.isHeldByCurrentThread() == false) {\n    throw new IllegalStateException(\"scene must be acquired first. see #acquire(long)\");\n  }\n  if (sCurrentContext != mContext) {\n    throw new IllegalStateException(\"Thread acquired a scene but is rendering a different one\");\n  }\n}\n", "public boolean hasLocalFilterInfo(){\n  return this.localFilterInfo != null;\n}\n", "   public void drawGlyphVector(GlyphVector g, float x, float y) {\n      tempDoubles[0] = x;\n      tempDoubles[1] = y;\n      transform.transform(tempDoubles, 0, tempDoubles, 0, 1);\n      g2d.drawGlyphVector(g, (int) tempDoubles[0], (int) tempDoubles[1]);\n   }\n", "void closedDatabase ( IDatabase database ) ;", "static public String munge(final String s){\n  return s.replaceAll(\"[\\\\W]\",\"_\");\n}\n", "protected void showTitleBar ( ) { mTitleView . setVisibility ( View . VISIBLE ) ; }", "@DataProvider(name=\"invalidCommandLineArgs\") public Object[][] createInvalidCommandLineArgs(){\n  return new Object[][]{{new String[]{\"sub-command1\",\"one\"}},{new String[]{\"sub-command1\",\"one\",\"two\"}},{new String[]{\"sub-command2\"}},{new String[]{\"sub-command2\",\"one\"}},{new String[]{\"sub-command2\",\"one\",\"two\",\"three\",\"four\",\"five\"}}};\n}\n", "public static String encodeQuery(String url){\n  Uri uri=Uri.parse(url);\n  try {\n    String query=uri.getQuery();\n    String encodedQuery=query != null ? URLEncoder.encode(query,\"UTF-8\") : null;\n    URI tmp=new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),null,uri.getFragment());\n    return tmp + (encodedQuery != null && encodedQuery.length() > 0 ? \"?\" + encodedQuery : \"\");\n  }\n catch (  UnsupportedEncodingException ignore) {\n  }\ncatch (  URISyntaxException ignore) {\n  }\n  return uri.toString();\n}\n", "    public void visitDisjunction(Disjunction expr) {\n        Node newExpr = doc.createElement(\"or\");\n        finishBinary(expr, newExpr);\n    }\n", "\t   public void removeGestureHandler(MultimodalGestureHandler gestureHandler) {\n\t      gestureHandlers.remove(gestureHandler);\n\t   } // removeGestureHandler\n", "   public boolean equals(Object o) {\n      if (this == o) return true;\n      if (o == null || getClass() != o.getClass()) return false;\n\n      OsmMasteragentParameter that = (OsmMasteragentParameter) o;\n\n      if (id != null ? !id.equals(that.id) : that.id != null) return false;\n      if (osmMasteragent != null ? !osmMasteragent.equals(that.osmMasteragent) : that.osmMasteragent != null)\n         return false;\n      if (osmMasteragentDefparam != null ? !osmMasteragentDefparam.equals(that.osmMasteragentDefparam) : that.osmMasteragentDefparam != null)\n         return false;\n      if (txtValue != null ? !txtValue.equals(that.txtValue) : that.txtValue != null) return false;\n\n      return true;\n   }\n", "\tprotected void addIsDerivedPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Property_isDerived_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_Property_isDerived_feature\", \"_UI_Property_type\"),\n\t\t\t\t EmofPackage.Literals.PROPERTY__IS_DERIVED,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "private String getValue(String defaultValue, String attribute)\n    {\n        Check.notNull(attribute);\n\n        if (root.hasAttribute(attribute))\n        {\n            return root.getAttribute(attribute);\n        }\n        return defaultValue;\n    }", "public boolean contentEquals(CharSequence chars){\n  if (chars == null)   return false;\n  if (this._length != chars.length())   return false;\n  for (int i=_length, j=_offset + _length; --i >= 0; ) {\n    if (_array[--j] != chars.charAt(i))     return false;\n  }\n  return true;\n}\n", "public void assertNotEquals(String assertID,String expected,String actual){\n  framework.assertNotEquals(this,assertID,expected,actual);\n}\n", "public TrxMessageHeader addDestInfo(TrxMessageHeader trxMessageHeader)\n    {\n        String strMessageTransport = (String)trxMessageHeader.get(MessageTransportModel.SEND_MESSAGE_BY_PARAM);\n        if ((MessageTransportModel.EMAIL.equalsIgnoreCase(strMessageTransport))\n            && (trxMessageHeader.get(TrxMessageHeader.DESTINATION_PARAM) == null))\n                trxMessageHeader.put(TrxMessageHeader.DESTINATION_PARAM, this.getField(Person.EMAIL).toString());\n        else if ((MessageTransportModel.FAX.equalsIgnoreCase(strMessageTransport))\n            && (trxMessageHeader.get(TrxMessageHeader.DESTINATION_PARAM) == null))\n                trxMessageHeader.put(TrxMessageHeader.DESTINATION_PARAM, this.getField(Person.FAX).toString());\n        else if ((MessageTransportModel.MAIL.equalsIgnoreCase(strMessageTransport))\n            && (trxMessageHeader.get(TrxMessageHeader.DESTINATION_PARAM) == null))\n        {\n            String strMail = this.getField(Person.NAME).toString();\n            strMail += '\\n' + this.getField(Person.ADDRESS_LINE_1).toString();\n            if (!this.getField(Person.ADDRESS_LINE_2).isNull())\n                strMail += '\\n' + this.getField(Person.ADDRESS_LINE_2).toString();\n            strMail += '\\n' + this.getField(Person.CITY_OR_TOWN).toString();\n            if (!this.getField(Person.STATE_OR_REGION).isNull())\n                strMail += \", \" + this.getField(Person.STATE_OR_REGION).toString();\n            if (!this.getField(Person.POSTAL_CODE).isNull())\n                strMail += ' ' + this.getField(Person.POSTAL_CODE).toString();\n            if (!this.getField(Person.COUNTRY).isNull())\n                strMail += ' ' + this.getField(Person.COUNTRY).toString();\n            trxMessageHeader.put(TrxMessageHeader.DESTINATION_PARAM, strMail);\n        }\n        Map<String,Object> mapInfo = trxMessageHeader.getMessageInfoMap();\n        if (mapInfo == null)\n            trxMessageHeader.setMessageInfoMap(mapInfo = new HashMap<String,Object>());\n        \n        mapInfo.put(TrxMessageHeader.CONTACT_TYPE, this.getTableNames(false));\n        mapInfo.put(TrxMessageHeader.CONTACT_ID, this.getField(Person.ID).toString());\n        if (!this.getField(Person.USER_ID).isNull())\n        {\n            mapInfo.put(TrxMessageHeader.CONTACT_USER_ID, this.getField(Person.USER_ID).toString());\n            Record recUserInfo = ((ReferenceField)this.getField(Person.USER_ID)).getReference();\n            if (recUserInfo != null)\n                if ((recUserInfo.getEditMode() == DBConstants.EDIT_CURRENT) || (recUserInfo.getEditMode() == DBConstants.EDIT_IN_PROGRESS))\n                    if (!recUserInfo.getField(UserInfo.USER_NAME).isNull())\n                        mapInfo.put(TrxMessageHeader.CONTACT_USER, recUserInfo.getField(UserInfo.USER_NAME).toString());\n        }\n        \n        return trxMessageHeader;\n    }", "public void addSecurityRequirementExtensionForEntireService(Swagger swagger){\n  AuthenticationRule.Builder builder=AuthenticationRule.newBuilder();\n  if (convertSecurityRequirementExtension(swagger.getVendorExtensions(),builder,new SimpleLocation(\"Swagger Spec\"))) {\n    builder.setSelector(\"*\");\n    authRules.add(builder.build());\n  }\n}\n", "    public void showProperty(Property property) throws KAONException {\n        m_property=property;\n        m_propertyTitle.setText(property.getURI());\n        m_superProperties.showEntity(property);\n        m_subProperties.showEntity(property);\n        m_domainConcepts.showEntity(property);\n        m_rangeConcepts.showEntity(property);\n        m_lexiconTable.showEntity(property);\n        updateControls();\n    }\n", "    public double   getCovYZ()   {\n        double  y = this.getMeanY();\n        double  z = this.getMeanZ();\n        \n        double yz = this.getElem(IND_Y, IND_Z);\n        \n        return yz - y*z; \n    }\n", "private PDFObject find ( PDFObject root , String key ) throws IOException { PDFObject names = root . getDictRef ( STR_ ) ; if ( names != null ) { return findInArray ( names . getArray ( ) , key ) ; } PDFObject kidsObj = root . getDictRef ( STR_ ) ; if ( k", "public boolean isRepeatFinished() throws IllegalAccessException {\n  return mRepeatFinished.getBoolean(mRepeatWrapper);\n}\n", "public void paintListBackground ( SynthContext context , Graphics g , int x , int y , int w , int h ) { }", "    private boolean addIfUnderCorePoolSize(Runnable firstTask) {\n        Thread t = null;\n        final ReentrantLock mainLock = this.mainLock;\n        mainLock.lock();\n        try {\n            if (poolSize < corePoolSize && runState == RUNNING)\n                t = addThread(firstTask);\n        } finally {\n            mainLock.unlock();\n        }\n        if (t == null)\n            return false;\n        t.start();\n        return true;\n    }\n", "protected void submit() {\n\n        if (m_userinfoNoEditGroup.getRows().size() != m_addInfoReadOnly.size()) {\n            List<String> currentKeys = getKeyListFromGroup(m_userinfoNoEditGroup);\n            for (String key : m_addInfoReadOnly.keySet()) {\n                if (!currentKeys.contains(key)) {\n                    saveAddInfo(key, null);\n                }\n            }\n        }\n\n        for (I_CmsEditableGroupRow row : m_userinfoGroup.getRows()) {\n            String key = ((TextField)(((HorizontalLayout)row.getComponent()).getComponent(0))).getValue();\n            String value = ((TextField)(((HorizontalLayout)row.getComponent()).getComponent(1))).getValue();\n            saveAddInfo(key, value);\n            m_addInfoEditable.remove(key);\n        }\n\n        //Remaining items in list seem to be deleted by the user..\n        for (String key : m_addInfoEditable.keySet()) {\n            saveAddInfo(key, null);\n        }\n        try {\n            m_cms.writeUser(m_user);\n        } catch (CmsException e) {\n            LOG.error(\"Unable to write user.\", e);\n        }\n    }", "public void putTypeDescription(String extension,String typeDescription){\n  typeDescriptions.put(extension,typeDescription);\n}\n", "public static Object extractInnerConnectionFromSQLR ( Object sqlrConnection ) throws IOException { if ( logger . isTraceEnabled ( ) ) logger . trace ( STR_ ) ; try { Field connectionField = sqlrConnection . getClass ( ) . getDeclaredField ( STR_ ) ; connectionField . setAccessible ( BOOL_ ) ; sqlrConnection = connectionField . get ( sqlrConnection ) ; } catch ( Exception e ) { throw new IOException ( e . getLocalizedMessage ( ) ) ; } return sqlrConnection ; }", "    protected Response send(String command) throws IOException, DictException {\n        sendLine(command);\n        return new Response(this);\n    }\n", "public void showClearView ( boolean show ) { if ( mClearView . isShown ( ) != show ) { mClearView . setVisibility ( show ? VISIBLE : INVISIBLE ) ; } }", "public Transitions transition(Object stringOrProperties, final int duration, final Easing easing,\n      final int delay, final Function... funcs) {\n    if (!isEmpty()) {\n      Properties p = (stringOrProperties instanceof String)\n          ? $$((String) stringOrProperties)\n          : (Properties) stringOrProperties;\n      for (Element e : elements()) {\n        queueAnimation(new TransitionsClipAnimation().setEasing(easing).setProperties(p)\n            .setElement(e).setCallback(funcs), duration);\n      }\n    }\n    return this;\n  }", "public void onCameraViewStarted ( int width , int height ) ;", "    public void _setGroup() {\n        log.println(\"Always SKIPPED.OK since deprecated.\");\n        tRes.tested(\"setGroup()\", Status.skipped(true));\n    }\n", "public static BinaryMessage load ( String message ) { if ( ! message . matches ( STR_ ) ) { throw new IllegalArgumentException ( STR_ ) ; } BinaryMessage buffer = new BinaryMessage ( message . length ( ) ) ; for ( int x = NUM_ ; x < message . length ( ) ;", "private synchronized void updateDeploymentMap(DigitalObject obj,\n            Connection c, boolean isPurge) throws SQLException {\n\n        String sDep = obj.getPid();\n        Set<RelationshipTuple> sDefs =\n                obj.getRelationships(Constants.MODEL.IS_DEPLOYMENT_OF, null);\n        Set<RelationshipTuple> models =\n                obj.getRelationships(Constants.MODEL.IS_CONTRACTOR_OF, null);\n\n        /* Read in the new deployment map from the object */\n        Set<ServiceContext> newContext = new HashSet<ServiceContext>();\n\n        if (!isPurge) {\n            for (RelationshipTuple sDefTuple : sDefs) {\n                String sDef = sDefTuple.getObjectPID();\n                for (RelationshipTuple cModelTuple : models) {\n                    String cModel = cModelTuple.getObjectPID();\n                    newContext.add(ServiceContext.getInstance(cModel, sDef));\n                }\n            }\n        }\n\n        /* Read in the old deployment map from the cache */\n        Set<ServiceContext> oldContext =\n                m_cModelDeploymentMap.getContextFor(sDep);\n\n        /* Remove any obsolete deployments from the registry/cache */\n        for (ServiceContext o : oldContext) {\n            if (!newContext.contains(o)) {\n                removeDeployment(o, obj, c);\n            }\n        }\n\n        /* Add any new deployments from the registry/cache */\n        for (ServiceContext n : newContext) {\n            if (!oldContext.contains(n)) {\n                addDeployment(n, obj, c);\n            } else {\n                updateDeployment(n, obj, c);\n            }\n        }\n    }", "public HttpRequest receive ( final PrintStream output ) throws HttpRequestException { return receive ( ( OutputStream ) output ) ; }", "public boolean runAfter ( List list , int max ) { return BOOL_ ; }", "private int endRecoverAnimation(RecyclerView.ViewHolder viewHolder,boolean override){\n  final int recoverAnimSize=mRecoverAnimations.size();\n  for (int i=recoverAnimSize - 1; i >= 0; i--) {\n    final RecoverAnimation anim=mRecoverAnimations.get(i);\n    if (anim.mViewHolder == viewHolder) {\n      anim.mOverridden|=override;\n      if (!anim.mEnded) {\n        anim.cancel();\n      }\n      mRecoverAnimations.remove(i);\n      return anim.mAnimationType;\n    }\n  }\n  return 0;\n}\n", "    public double getArea() throws RuntimeException {\n        if (valid) {\n            double area = 0;\n            \n            for(int i=0; i<verts.length-1; i++)\n                area += verts[i].x*verts[i+1].y - verts[i+1].x*verts[i].y;\n\n            return area*.5;\n        } else\n            throw new RuntimeException(\"Cannot calculate area of non valid polygon!\");\n    }\n", "public void addListeners()\n    {\n        super.addListeners();\n        Record record = this.getMainRecord();\n        Record recClassInfo = this.getRecord(ClassInfo.CLASS_INFO_FILE);\n        if (recClassInfo != null)\n        {\n            record.setKeyArea(LogicFile.SEQUENCE_KEY);\n            SubFileFilter listener = new SubFileFilter(recClassInfo.getField(ClassInfo.CLASS_NAME), LogicFile.METHOD_CLASS_NAME, null, null, null, null, true);\n            record.addListener(listener);\n            recClassInfo.getField(ClassInfo.CLASS_NAME).addListener(new FieldReSelectHandler(this));\n        }\n    }", "public Repair(final ExecutorDriver driver,final CassandraDaemonProcess daemon,final RepairTask task){\n  this.driver=driver;\n  this.daemon=daemon;\n  this.task=task;\n}\n", "default FieldDeclaration addField ( Type < ? > type , String name , Modifier ... modifiers ) { FieldDeclaration fieldDeclaration = new FieldDeclaration ( ) ; fieldDeclaration . setParentNode ( ( Node ) this ) ; VariableDeclarator variable = new VariableDeclarator ( new VariableDeclaratorId ( name ) ) ; fieldDeclaration . getVariables ( ) . add ( variable ) ; variable . setParentNode ( fieldDeclaration ) ; fieldDeclaration . setModifiers ( Arrays . stream ( modifiers ) . collect ( toCollection ( null ) ) ) ; variable . setType ( type ) ; getMembers ( ) . add ( fieldDeclaration ) ; return fieldDeclaration ; }", "public Iterator < Edge > removedEdgeIterator ( ) { return removedEdgeList != null ? removedEdgeList . iterator ( ) : new NullIterator < Edge > ( ) ; }", "public void increment ( ) { mLoopPhase += mLoopFrequency ; unwrapPhase ( ) ; }", "    public void write(byte[] bytes) throws IOException {\n        for (byte b : bytes) {\n            write(b);\n        }\n    }\n", "  public void addEvent(EnvironmentEvent envEvent) {\n    this.envEvents.add(envEvent);\n  }\n", "public final Header header ( ) { return this . header ; }", "@Override public byte process(Target target){\n  Element syllable=navigator.getElement(target);\n  if (syllable == null)   return 0;\n  String accent=syllable.getAttribute(\"accent\");\n  if (accent.equals(\"\")) {\n    return 0;\n  }\n  return values.get(accent);\n}\n", "        public void add(Permission permission) {\n            if (isReadOnly()) throw new IllegalArgumentException(\"Read only collection\");\n\n            if (!(permission instanceof WebUserDataPermission)) throw new IllegalArgumentException(\"Wrong permission type\");\n\n            WebUserDataPermission p  = (WebUserDataPermission)permission;\n\n            permissions.put(p, p);\n        }\n", "public void register(Route route){\n  Integer oldSize=Integer.valueOf(_routeHashTable.size());\n  _routeHashTable.put(route.getId(),route);\n  int id=Integer.parseInt(route.getId());\n  if (id > _id) {\n    _id=id;\n  }\n  setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_routeHashTable.size()));\n}\n", "private static void adjust(Object[] array,Comparator c,int lower,int upper){\n  int j, k;\n  Object temp;\n  j=lower;\n  k=lower * 2;\n  while (k <= upper) {\n    if ((k < upper) && (c.compare(array[k - 1],array[k]) < 0)) {\n      k+=1;\n    }\n    if (c.compare(array[j - 1],array[k - 1]) < 0) {\n      temp=array[j - 1];\n      array[j - 1]=array[k - 1];\n      array[k - 1]=temp;\n    }\n    j=k;\n    k*=2;\n  }\n}\n", "    public void addPluginShowMenuItem(JMenuItem menuItem) {\n        pluginsMenu.add(menuItem);\n    }\n", "public static void eachFile(final Path self,final FileType fileType,@ClosureParams(value=SimpleType.class,options=\"java.nio.file.Path\") final Closure closure) throws IOException {\n  checkDir(self);\n  try (DirectoryStream<Path> stream=Files.newDirectoryStream(self)){\n    for (    Path path : stream) {\n      if (fileType == FileType.ANY || (fileType != FileType.FILES && Files.isDirectory(path)) || (fileType != FileType.DIRECTORIES && Files.isRegularFile(path))) {\n        closure.call(path);\n      }\n    }\n  }\n }\n", "public void Done ( ) { nextCharBuf = null ; buffer = null ; bufline = null ; bufcolumn = null ; }", "        public boolean isCurrent() {\n\t    return id.equals(\n\t\tGenericCharacter.getLocalCharacter().getUserIdentifier());\n\t}\n", "private boolean allMatch(final Request request) throws IOException {\n        boolean success = true;\n        for (final Pass pass : this.all) {\n            if (!pass.enter(request).has()) {\n                success = false;\n                break;\n            }\n        }\n        return success;\n    }", "\tpublic void ShutUp() {\n\t\tsuper.ShutUp();\n\t\tcustomControlPanel.removeAll();\n\t\tcustomGraphPanel.removeAll();\n\t\tgraphAnalysis.addDraggedVerLinesListener(null);\n\t\tgraphAnalysis.removeVerticalValue(0);\n\n\t\tgraphAnalysis.addChooseListener(null);\n\t\tgraphAnalysis.removeMouseListener(graphChooserMouseAdapter);\n\t}\n", "public Iterator < T > iterator ( ) ;", "\tprotected void addShowborderPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Urllink_showborder_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_Urllink_showborder_feature\", \"_UI_Urllink_type\"),\n\t\t\t\t DxlPackage.Literals.URLLINK__SHOWBORDER,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public static NSObject parse(InputStream is) throws ParserConfigurationException, IOException, SAXException, PropertyListFormatException, ParseException {\n  DocumentBuilder docBuilder=getDocBuilder();\n  Document doc=docBuilder.parse(is);\n  return parse(doc);\n}\n", "public static String removeQuotationMarksIfNeeded(String str){\n  if (str.startsWith(\"\\\"\") && str.endsWith(\"\\\"\"))   return str.substring(1,str.length() - 1);\n  return str;\n}\n", "public static List<URI> returnVplexSrdfTargets(DbClient dbClient,List<URI> vplexVolumeURIs){\n  List<URI> returnedVolumes=new ArrayList<URI>();\n  for (  URI vplexURI : vplexVolumeURIs) {\n    Volume vplexVolume=dbClient.queryObject(Volume.class,vplexURI);\n    if (vplexVolume == null) {\n      continue;\n    }\n    Volume srdfVolume=getSrdfVolumeFromVplexVolume(dbClient,vplexVolume);\n    if (srdfVolume != null && !NullColumnValueGetter.isNullNamedURI(srdfVolume.getSrdfParent())) {\n      returnedVolumes.add(vplexVolume.getId());\n    }\n  }\n  return returnedVolumes;\n}\n", "private boolean hasEarpiece ( ) { return apprtcContext . getPackageManager ( ) . hasSystemFeature ( PackageManager . FEATURE_TELEPHONY ) ; }", "\t  public double getClosenessCentrality(Node n) {\n\t\t  calculateCentralityStat();\n\t\t  return closenessCentrality[getNodeIndex(n)];\n\t  }\n", "@RequestMapping(value={\"/\",\"\"},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute(\"execstatus\") @Valid ExecStatus execStatus,BindingResult bindingResult,Principal principal){\n  RestWrapper restWrapper=null;\n  if (bindingResult.hasErrors()) {\n    BindingResultError bindingResultError=new BindingResultError();\n    return bindingResultError.errorMessage(bindingResult);\n  }\n  try {\n    com.wipro.ats.bdre.md.dao.jpa.ExecStatus jpaExecStatus=new com.wipro.ats.bdre.md.dao.jpa.ExecStatus();\n    jpaExecStatus.setExecStateId(execStatus.getExecStateId());\n    jpaExecStatus.setDescription(execStatus.getDescription());\n    Integer execStateId=execStatusDAO.insert(jpaExecStatus);\n    jpaExecStatus.setExecStateId(execStateId);\n    restWrapper=new RestWrapper(execStatus,RestWrapper.OK);\n    LOGGER.info(\"Record with ID:\" + execStatus.getExecStateId() + \" inserted in ExecStatus by User:\"+ principal.getName()+ execStatus);\n  }\n catch (  MetadataException e) {\n    LOGGER.error(e);\n    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);\n  }\n  return restWrapper;\n}\n", "public static void append ( Path file , Reader reader , String charset ) throws IOException { append ( file , reader , charset , BOOL_ ) ; }", "public Observable<ServiceResponse<WorkflowRunActionRepetitionDefinitionCollectionInner>> listWithServiceResponseAsync(String resourceGroupName, String workflowName, String runName, String actionName) {\n        if (this.client.subscriptionId() == null) {\n            throw new IllegalArgumentException(\"Parameter this.client.subscriptionId() is required and cannot be null.\");\n        }\n        if (resourceGroupName == null) {\n            throw new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\");\n        }\n        if (workflowName == null) {\n            throw new IllegalArgumentException(\"Parameter workflowName is required and cannot be null.\");\n        }\n        if (runName == null) {\n            throw new IllegalArgumentException(\"Parameter runName is required and cannot be null.\");\n        }\n        if (actionName == null) {\n            throw new IllegalArgumentException(\"Parameter actionName is required and cannot be null.\");\n        }\n        if (this.client.apiVersion() == null) {\n            throw new IllegalArgumentException(\"Parameter this.client.apiVersion() is required and cannot be null.\");\n        }\n        return service.list(this.client.subscriptionId(), resourceGroupName, workflowName, runName, actionName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())\n            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkflowRunActionRepetitionDefinitionCollectionInner>>>() {\n                @Override\n                public Observable<ServiceResponse<WorkflowRunActionRepetitionDefinitionCollectionInner>> call(Response<ResponseBody> response) {\n                    try {\n                        ServiceResponse<WorkflowRunActionRepetitionDefinitionCollectionInner> clientResponse = listDelegate(response);\n                        return Observable.just(clientResponse);\n                    } catch (Throwable t) {\n                        return Observable.error(t);\n                    }\n                }\n            });\n    }", "public synchronized boolean verifyAndAdvanceState(Byte newStep){\n  logger.debug(\"NODE {}: ZWaveSecurityCommandClass in verifyAndAdvanceState with newstep={}, currentstep={}\",node.getNodeId(),ZWaveSecurityCommandClass.commandToString(newStep),ZWaveSecurityCommandClass.commandToString(currentStep));\n  if (!INIT_COMMAND_ORDER_LIST.contains(newStep)) {\n    return true;\n  }\n  if (INIT_COMMAND_ORDER_LIST.indexOf(newStep) > 0) {\n    int currentIndex=INIT_COMMAND_ORDER_LIST.indexOf(currentStep);\n    int newIndex=INIT_COMMAND_ORDER_LIST.indexOf(newStep);\n    if (newIndex != currentIndex && newIndex - currentIndex > 1) {\n      if (HALT_ON_IMPROPER_ORDER) {\n        setErrorState(String.format(\"NODE %d: Commands received out of order, aborting current=%s, new=%s\",node.getNodeId(),ZWaveSecurityCommandClass.commandToString(currentStep),ZWaveSecurityCommandClass.commandToString(newStep)));\n        return false;\n      }\n else {\n        logger.warn(\"NODE {}: Commands received out of order (warning only, continuing) current={}, new={}\",node.getNodeId(),ZWaveSecurityCommandClass.commandToString(currentStep),ZWaveSecurityCommandClass.commandToString(newStep));\n      }\n    }\n  }\n  currentStep=newStep;\n  return true;\n}\n", "\tpublic void projectSucceeded() {\n\t\tif (isReportingEnabled()) {\n\t\t\tgetLogger().info(\"\");\n\t\t\tgetLogger().info(\"BUILD SUCCESSFUL\");\n\t\t\tlogElapsedTime();\n\t\t\tgetLogger().info(\"\");\n\t\t}\n\t}\n", "private List<Tuple> tuplesResult(EntityKey[] keys, TupleContext tupleContext, ClosableIterator<NodeWithEmbeddedNodes> nodes, Long txId, HttpNeo4jEntityQueries queries) {\n\t\t// The list is initialized with null because some keys might not have a corresponding node\n\t\tTuple[] tuples = new Tuple[keys.length];\n\t\twhile ( nodes.hasNext() ) {\n\t\t\tNodeWithEmbeddedNodes node = nodes.next();\n\t\t\tfor ( int i = 0; i < keys.length; i++ ) {\n\t\t\t\tString[] keyNames = keys[i].getColumnNames();\n\t\t\t\tObject[] keyValues = keys[i].getColumnValues();\n\t\t\t\tMap<String, Object> nodeProperties = node.getOwner().getProperties();\n\t\t\t\tif ( RemoteNeo4jHelper.matches( nodeProperties, keyNames, keyValues ) ) {\n\t\t\t\t\tEntityKeyMetadata metadata = keys[i].getMetadata();\n\t\t\t\t\tMap<String, Node> toOneEntities = HttpNeo4jAssociatedNodesHelper.findAssociatedNodes( client, txId, node, metadata,\n\t\t\t\t\t\t\ttupleContext.getTupleTypeContext(), queries );\n\t\t\t\t\ttuples[i] = new Tuple(\n\t\t\t\t\t\t\tnew HttpNeo4jTupleSnapshot(\n\t\t\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\t\t\tmetadata,\n\t\t\t\t\t\t\t\t\ttoOneEntities,\n\t\t\t\t\t\t\t\t\ttupleContext.getTupleTypeContext() ),\n\t\t\t\t\t\t\tSnapshotType.UPDATE );\n\t\t\t\t\t// We assume there are no duplicated keys\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Arrays.asList( tuples );\n\t}", "private void addGlobalHotkeys(){\n  if (!globalHotkeysRegister) {\n    return;\n  }\n  for (  Hotkey hotkey : hotkeys) {\n    if (doesHotkeyHaveAction(hotkey) && hotkey.type == Type.GLOBAL) {\n      addGlobalHotkey(hotkey);\n    }\n  }\n}\n", "\tpublic String rawFormat() {\n\t\treturn name + \" \" + getID();\n\t}\n", "public static void writeStringToFile ( File file , String data , String encoding , boolean append ) throws IOException { writeStringToFile ( file , data , Charsets . toCharset ( encoding ) , append ) ; }", "    public YearMonthDay minusDays(int days) {\n        return withFieldAdded(DurationFieldType.days(), FieldUtils.safeNegate(days));\n    }\n", "public static long readLong(ArrayView source, int position) {\n        return (long) (source.get(position) & 0xFF) << 56\n                | (long) (source.get(position + 1) & 0xFF) << 48\n                | (long) (source.get(position + 2) & 0xFF) << 40\n                | (long) (source.get(position + 3) & 0xFF) << 32\n                | (long) (source.get(position + 4) & 0xFF) << 24\n                | (source.get(position + 5) & 0xFF) << 16\n                | (source.get(position + 6) & 0xFF) << 8\n                | (source.get(position + 7) & 0xFF);\n    }", "public final Processor.ExecutionContext print(\n            final String jobId, final PJsonObject specJson, final OutputStream out)\n            throws Exception {\n        final OutputFormat format = getOutputFormat(specJson);\n        final File taskDirectory = this.workingDirectories.getTaskDirectory();\n\n        try {\n            return format.print(jobId, specJson, getConfiguration(), this.configFile.getParentFile(),\n                                taskDirectory, out);\n        } finally {\n            this.workingDirectories.removeDirectory(taskDirectory);\n        }\n    }", "public int prepare(Xid xid) throws XAException\n    {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(this, tc, \"prepare\", \"XID=\"+xid);\n\n        int retval = XAResource.XA_OK;\n\n        try\n        {\n            retval = _manager.prepare(new PersistentTranId(xid));\n\n         \n        }\n        catch (XidStillAssociatedException xsae)\n        {\n            com.ibm.ws.ffdc.FFDCFilter.processException(xsae, \"com.ibm.ws.sib.msgstore.transactions.MSDelegatingXAResource.prepare\", \"1:421:1.51.1.7\", this);\n            if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) SibTr.event(this, tc, \"Cannot prepare transaction branch, resources are still associated with this Xid!\", xsae);\n            if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc, \"prepare\");\n            XAException xaException = new XAException(XAException.XAER_PROTO);\n            xaException.initCause(xsae);\n            throw xaException;\n        }\n        catch (XidUnknownException xue)\n        {\n            com.ibm.ws.ffdc.FFDCFilter.processException(xue, \"com.ibm.ws.sib.msgstore.transactions.MSDelegatingXAResource.prepare\", \"1:430:1.51.1.7\", this);\n            if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) SibTr.event(this, tc, \"Cannot prepare transaction branch, Xid is unknown!\", xue);\n            if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc, \"prepare\");\n            XAException xaException = new XAException(XAException.XAER_NOTA);\n            xaException.initCause(xue);\n            throw xaException;\n        }\n        catch (ProtocolException pe)\n        {\n            com.ibm.ws.ffdc.FFDCFilter.processException(pe, \"com.ibm.ws.sib.msgstore.transactions.MSDelegatingXAResource.prepare\", \"1:439:1.51.1.7\", this);\n            if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) SibTr.event(this, tc, \"A Transaction protocol error occurred during prepare of transaction branch!\", pe);\n            if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc, \"prepare\");\n            XAException xaException = new XAException(XAException.XAER_PROTO);\n            xaException.initCause(pe);\n            throw xaException;\n        }\n        catch (RollbackException rbe)\n        {\n            com.ibm.ws.ffdc.FFDCFilter.processException(rbe, \"com.ibm.ws.sib.msgstore.transactions.MSDelegatingXAResource.prepare\", \"1:448:1.51.1.7\", this);\n\n    \n            if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) SibTr.event(this, tc, \"RollbackException caught during prepare of transaction branch!\", rbe);\n            if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc, \"prepare\");\n            XAException xaException = new XAException(XAException.XA_RBROLLBACK);\n            xaException.initCause(rbe);\n            throw xaException;\n        }\n        catch (SeverePersistenceException spe)\n        {\n            com.ibm.ws.ffdc.FFDCFilter.processException(spe, \"com.ibm.ws.sib.msgstore.transactions.MSDelegatingXAResource.prepare\", \"1:463:1.51.1.7\", this);\n            if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) SibTr.event(this, tc, \"Unexpected error occurred whilst persisting transaction work!\", spe);\n            if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc, \"prepare\");\n            XAException xaException = new XAException(XAException.XAER_RMFAIL);\n            xaException.initCause(spe);\n            throw xaException;\n        }\n        catch (TransactionException te)\n        {\n            com.ibm.ws.ffdc.FFDCFilter.processException(te, \"com.ibm.ws.sib.msgstore.transactions.MSDelegatingXAResource.prepare\", \"1:472:1.51.1.7\", this);\n            if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) SibTr.event(this, tc, \"TransactionException occurred whilst preparing transaction work!\", te);\n            if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc, \"prepare\");\n            XAException xaException = new XAException(XAException.XAER_RMFAIL);\n            xaException.initCause(te);\n            throw xaException;\n        }\n\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n        {\n            String retstr;\n            switch (retval)\n            {\n            case XAResource.XA_OK:\n                    retstr = \"return=XA_OK\";\n                    break;\n            case XAResource.XA_RDONLY:\n                    retstr = \"return=XA_RDONLY\";\n                    break;\n            default:\n                    retstr = \"return=XA_UNKNOWN\";\n            }\n            SibTr.exit(this, tc, \"prepare\", retstr);\n        }\n        return retval;\n    }", "private void skipCommaSpaces() throws IOException {\n        wsp1: for (;;) {\n            switch (current) {\n                default:\n                    break wsp1;\n                case 0x20:\n                case 0x9:\n                case 0xD:\n                case 0xA:\n            }\n            current = reader.read();\n            appendToContext(current);\n        }\n        if (current == ',') {\n            wsp2: for (;;) {\n                switch (current = reader.read()) {\n                    default:\n                        appendToContext(current);\n                        break wsp2;\n                    case 0x20:\n                    case 0x9:\n                    case 0xA:\n                    case 0xD:\n                        appendToContext(current);\n                }\n            }\n        }\n    }", "public String toString ( int indentFactor ) throws JSONException { StringWriter w = new StringWriter ( ) ; synchronized ( w . getBuffer ( ) ) { return this . write ( w , indentFactor , NUM_ ) . toString ( ) ; } }", "    public void checkElegibilityToAddInstances(String workItemID) throws YStateException, YPersistenceException {\n        /**\n         * SYNC'D External interface\n         */\n        synchronized (mutex) {\n            super.checkElegibilityToAddInstances(", "protected <T> T doExecute(URI url, HttpMethod method, RequestCallback requestCallback,\n\t\t\tResponseExtractor<T> responseExtractor) throws RestClientException {\n\n\t\tAssert.notNull(url, \"'url' must not be null\");\n\t\tAssert.notNull(method, \"'method' must not be null\");\n\t\tClientHttpResponse response = null;\n\t\ttry {\n\t\t\tClientHttpRequest request = createRequest(url, method);\n\t\t\tif (requestCallback != null) {\n\t\t\t\trequestCallback.doWithRequest(request);\n\t\t\t}\n\t\t\tresponse = request.execute();\n\t\t\tif (!getErrorHandler().hasError(response)) {\n\t\t\t\tlogResponseStatus(method, url, response);\n\t\t\t}\n\t\t\telse {\n\t\t\t\thandleResponseError(method, url, response);\n\t\t\t}\n\t\t\tif (responseExtractor != null) {\n\t\t\t\treturn responseExtractor.extractData(response);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new ResourceAccessException(\"I/O error on \" + method.name() +\n\t\t\t\t\t\" request for \\\"\" + url + \"\\\": \" + ex.getMessage(), ex);\n\t\t}\n\t\tfinally {\n\t\t\tif (response != null) {\n\t\t\t\tresponse.close();\n\t\t\t}\n\t\t}\n\t}", "public FilenameUtils ( ) { super ( ) ; }", "public void writeShort ( short v ) throws IOException { dataOutput . writeShort ( v ) ; offset += NUM_ ; }", "public static Expression dateTruncMillis(Expression expression, DatePart part) {\n        return x(\"DATE_TRUNC_MILLIS(\" + expression.toString() + \", \\\"\" + part.toString() + \"\\\")\");\n    }", "private void reducingTradeQuantity ( List < Trade > trades ) { Optional < Integer > totalQuantity = trades . stream ( ) . map ( null ) . reduce ( null ) ; System . out . println ( STR_ + totalQuantity . get ( ) ) ; }", "public static Object deserialize(String input) throws IOException, ClassNotFoundException {\n  byte[] decoded=Base64.decodeBase64(input.getBytes(\"UTF-8\"));\n  return deserialize(decoded);\n}\n", "protected void processSelectors(List<Node> results,List<CssSelector> selectors){\n  List<Node> selectedNodes=select(rootNode,selectors);\n  for (  Node selectedNode : selectedNodes) {\n    if (!results.contains(selectedNode)) {\n      results.add(selectedNode);\n    }\n  }\n}\n", "public void unregisterMBean(ObjectName name) throws InstanceNotFoundException, MBeanRegistrationException {\n  mbsInterceptor.unregisterMBean(cloneObjectName(name));\n}\n", "   public int reset(int size) throws IOException {\n      if(mark == pos) {\n         return source.reset(size);\n      }\n      if(pos - size < mark) {\n         size = pos - mark;\n      }\n      if(size > 0) {\n         count += size;\n         pos -= size;\n      }\n      return size;\n   }\n", "public void nextToken(){\n  previousLine=line;\n  previousColumn=column;\n  while (pos < matcher.regionStart()) {\n    if (text.charAt(pos) == '\\n') {\n      ++line;\n      column=0;\n    }\n else {\n      ++column;\n    }\n    ++pos;\n  }\n  if (matcher.regionStart() == matcher.regionEnd()) {\n    currentToken=\"\";\n  }\n else {\n    matcher.usePattern(TOKEN);\n    if (matcher.lookingAt()) {\n      currentToken=matcher.group();\n      matcher.region(matcher.end(),matcher.regionEnd());\n    }\n else {\n      currentToken=String.valueOf(text.charAt(pos));\n      matcher.region(pos + 1,matcher.regionEnd());\n    }\n    skipWhitespace();\n  }\n}\n", "\tpublic long get( int index ) {\n\t\tif (index < 0 || index >= this.size ) {\n\t\t\tthrow new IndexOutOfBoundsException(\"the index [\" + index + \"] is not valid for this list with the size [\" + this.size + \"].\");\n\t\t}\n\t\treturn this.storedObjects[ index ];\n\t}\n", "public static String[] split(String input, String regex) {\n    if (input == null) {\n      return null;\n    }\n    String[] arr = input.split(regex);\n    List<String> results = new ArrayList<>(arr.length);\n    for (String a : arr) {\n      if (!a.trim().isEmpty()) {\n        results.add(a);\n      }\n    }\n    return results.toArray(new String[0]);\n  }", "public IEntryPacket aggregate ( IQueryResultSet < IEntryPacket > entries ) throws SQLException ;", "public abstract Observable < E > clearObservers ( ) ;", "private boolean isMineshafterPresent ( ) { try { Class . forName ( STR_ ) ; return BOOL_ ; } catch ( Exception e ) { return BOOL_ ; } }", "    public Double getA1Max() {\n        return a1Max;\n    }\n", "        public void error(final TransformerException e) {\n            getListener().error(\"xsddoc caused an error: \" + XMLUtil.getLocallizedMessageAndLocation(e));\n        }\n", "private <K,V>V forceFind(NavigableMap<K,V> map,K key,V newObject){\n  V data=map.get(key);\n  if (data == null) {\n    data=newObject;\n    map.put(key,data);\n  }\n  return data;\n}\n", "public static void translate2D(IAtomContainer atomCon, double transX, double transY) {\n        translate2D(atomCon, new Vector2d(transX, transY));\n    }", "public boolean isDozing ( ) { return mIsDozing ; }", "    public void environmentQuiting(ScapeEvent scapeEvent) {\n        //Get rid of any remaining non-scape specific listeners\n        if ((((ComponentView) getScapeListener()).getViewFrame() != null) && !getScapeListener().isLifeOfScape()) {\n            ((ComponentView) getScapeListener()).getViewFrame().dispose();\n        }\n    }\n", "public static long elevationAtTick(GeoTimeSerie gts,long tick){\n  if (null == gts.elevations) {\n    return GeoTimeSerie.NO_ELEVATION;\n  }\n  sort(gts,false);\n  int idx=Arrays.binarySearch(gts.ticks,0,gts.values,tick);\n  if (idx < 0) {\n    return GeoTimeSerie.NO_ELEVATION;\n  }\n else {\n    return gts.elevations[idx];\n  }\n}\n", "@TaskAction\n  public void generateRepositoryInfoFile() throws AppEngineException {\n    gcloud\n        .newGenRepoInfo(CloudSdkOperations.getDefaultHandler(getLogger()))\n        .generate(configuration.toGenRepoInfoFileConfiguration());\n  }", "public LockableFileWriter ( String fileName ) throws IOException { this ( fileName , BOOL_ , null ) ; }", "\tpublic boolean add(ShowResource resource) {\n\n\t\tboolean added = getResources().add(resource);\n\n\t\tif (added) {\n\t\t\tresource.setShow(this);\n\t\t\tresource.setIndex(getResources().size() - 1);\n\t\t}\n\n\t\treturn added;\n\n\t}\n", "    public void addVersionInfo( EvaluationTarget target ) {\n        // need to jump through extra hoops to avoiding having any of these library's in memory\n        // for the master application.  Some libraries use other libraries which might be different\n        // version.\n        ExternalExecFunction exec = new ExternalExecFunction(versionClass,listOfJarFilePaths());\n\n        String version = exec.call(\"getVersionString\");\n        String date = exec.call(\"getReleaseDate\");\n\n        target.setVersion(version);\n        target.setModificationData(date);\n    }\n", "protected static Guid[] toGuidArray(Set set){\n  Object[] obj=set.toArray();\n  Guid[] ss=new Guid[obj.length];\n  for (int i=0; i < obj.length; i++) {\n    ss[i]=new Guid((String)obj[i]);\n  }\n  return ss;\n}\n", "protected static Path getPath(int startindex, String[] uriParts) {\n        Path ret = Paths.get(\"/\");\n        List<FileSystem> toClose = new ArrayList<FileSystem>();\n\n        try {\n            for (int i = startindex; i < uriParts.length; i++) {\n                String name = uriParts[i];\n                if (name.endsWith(\"!\")) {\n                    name = name.substring(0, name.length() - 1);\n                }\n                ret = ret.resolve(name);\n\n                if (name.endsWith(\".jar\") || name.endsWith(\".war\")) {\n                    try (FileSystem jarfs = FileSystems.newFileSystem(ret,\n                            Thread.currentThread().getContextClassLoader())) {\n                        ret = jarfs.getRootDirectories().iterator().next();\n                    } catch (IOException e) {\n                        log.log(Level.SEVERE, \"Failed to access archive '\" + name + \"'\", e);\n                    }\n                }\n            }\n        } finally {\n            for (FileSystem fs : toClose) {\n                try {\n                    fs.close();\n                } catch (IOException e) {\n                    log.log(Level.SEVERE, \"Failed to close file system '\" + fs + \"'\", e);\n                }\n            }\n        }\n\n        return ret;\n    }", "public void checkInterfaceCircularInheritance ( final SInterfaceDef toCheck , List < SInterfaceDef > current , List < SInterfaceDef > recorder ) throws SyntaxException { for ( SInterfaceDef i : current ) { recorder . add ( i ) ; if ( i . equals ( toCheck ", "public static final void hexToBytes(String s, byte[] out, int off)\n            throws NumberFormatException, IndexOutOfBoundsException {\n\n        int slen = s.length();\n        if ((slen % 2) != 0) {\n            s = '0' + s;\n        }\n\n        if (out.length < off + slen / 2) {\n            throw new IndexOutOfBoundsException(\n                    \"Output buffer too small for input (\" + out.length + '<'\n                            + off + slen / 2 + ')');\n        }\n\n        // Safe to assume the string is even length\n        byte b1, b2;\n        for (int i = 0; i < slen; i += 2) {\n            b1 = (byte) Character.digit(s.charAt(i), 16);\n            b2 = (byte) Character.digit(s.charAt(i + 1), 16);\n            if ((b1 < 0) || (b2 < 0)) {\n                throw new NumberFormatException();\n            }\n            out[off + i / 2] = (byte) (b1 << 4 | b2);\n        }\n    }", "    private boolean hasXmlizer() {\n        return (null != xmlizerClassName);\n    }\n", "public void removeProtocolEventListener ( final DebugEventListener listener ) { protocolListeners . removeListener ( listener ) ; }", "    public boolean isValid() {\n        return mediatorsWithFailures.size() == 0;\n    }\n", "\tpublic void resizeWire(float factor) {\n\t\tx1 *= factor;\n\t\ty1 *= factor;\n\t\tx2 *= factor;\n\t\ty2 *= factor;\n\t\tfloat[] dashArray = wireStroke.getDashArray();\n\t\tif(dashArray != null){\n\t\t\tfor(int i = 0; i < dashArray.length; i++){\n\t\t\t\tdashArray[i]*=factor;\n\t\t\t}\n\t\t}\n\t\twireStroke = new BasicStroke(\twireStroke.getLineWidth()*factor,\n\t\t\t\t\t\t\t\t\t\twireStroke.getEndCap(),\n\t\t\t\t\t\t\t\t\t\twireStroke.getLineJoin(),\n\t\t\t\t\t\t\t\t\t\twireStroke.getMiterLimit(),\n\t\t\t\t\t\t\t\t\t\tdashArray,\n\t\t\t\t\t\t\t\t\t\twireStroke.getDashPhase());\n\t}\n", "   public void setDistance ( final double distance ) {\n      if ( frozen ) {\n         return;\n      }\n\n      this.distance = distance;\n   }\n", "private void printQueryStats(final HttpQuery query) {\n    switch (query.apiVersion()) {\n    case 0:\n    case 1:\n      query.sendReply(query.serializer().formatQueryStatsV1(\n          QueryStats.getRunningAndCompleteStats()));\n      break;\n    default: \n      throw new BadRequestException(HttpResponseStatus.NOT_IMPLEMENTED, \n          \"Requested API version not implemented\", \"Version \" + \n          query.apiVersion() + \" is not implemented\");\n    }\n  }", "final public void print(float v){\n  Writer out=this.out;\n  if (out == null)   return;\n  try {\n    String s=String.valueOf(v);\n    out.write(s,0,s.length());\n  }\n catch (  IOException e) {\n    log.log(Level.FINE,e.toString(),e);\n  }\n}\n", "public void dropActionChanged(DropTargetDragEvent dtde){\n  Debug.message(\"dndlistener\",\"dropActionChanged(target)\");\n  int action=dtde.getDropAction();\n  Debug.message(\"dndlistener\",\"action=\" + action);\n  dtde.acceptDrag(action);\n}\n", "public AttributeDataset parse(Attribute[] attributes, File file) throws IOException, ParseException {\n        String name = file.getPath();\n        return parse(name, attributes, file);\n    }", "\tpublic void addFile(File f) {\n\t\tSystem.out.println(\"ADD File to Config\");\n\t\tthis.lastFiles.remove(f.getAbsolutePath());\n\t\tthis.lastFiles.addFirst(f.getAbsolutePath());\n\t\tthis.lastFileNames.remove(f.getName());\n\t\tthis.lastFileNames.addFirst(f.getName());\n\n\t\tif (this.lastFiles.size() > this.maxFiles) {\n\t\t\tthis.lastFiles.removeLast();\n\t\t\tthis.lastFileNames.removeLast();\n\t\t}\n\t\tthis.view.refreshLast();\n\t}\n", "private boolean entryExists(Connection conn,DN dn) throws UpgradeException {\n  try {\n    conn.readEntry(dn,\"dn\");\n  }\n catch (  EntryNotFoundException enfe) {\n    return false;\n  }\ncatch (  LdapException ere) {\n    DEBUG.error(\"Unable to read entry with dn: \" + dn,ere);\n    throw new UpgradeException(ere);\n  }\n  return true;\n}\n", "    public Listener findByRegistrationID(int registrationID)  throws Exception{\n        Iterator it = listeners.iterator();\n        while (it.hasNext()) {\n            RegisteredListener rl = (RegisteredListener) it.next();\n            if (rl.getOID() == registrationID) {\n                return rl.getListener();\n            }\n        }\n        throw new SQLException(\"Listener not found for oid \" + registrationID);\n    }\n", "public AllAccessExporter(String input,byte[] cpData) throws NoSuchAlgorithmException, NoSuchPaddingException, IOException {\n  mCipher=Cipher.getInstance(\"AES/CTR/NoPadding\");\n  mKeySpec=new SecretKeySpec(cpData,\"AES\");\n  mInput=new FileInputStream(input);\n  mMagicNumber=new byte[4];\n  if (mInput.read(mMagicNumber) != 4)   mMagicNumber=null;\n}\n", "public static void closeShell ( boolean root ) throws IOException { if ( root ) { Shell . closeRootShell ( ) ; } else { Shell . closeShell ( ) ; } }", "public void produceEvent ( LogConnection conn , long seqno , String shardId , Timestamp ts ) throws ReplicatorException , InterruptedException { produceEvent ( conn , seqno , ( short ) NUM_ , BOOL_ , shardId , ts ) ; }", "  public void setTOTALCURRENTENROLLMENT (String newTOTALCURRENTENROLLMENT) {\n    this.TOTALCURRENTENROLLMENT = newTOTALCURRENTENROLLMENT;\n  }\n", "public CResultsTableModel ( final CSpecialInstructionsModel model ) { m_model = model ; model . addListener ( m_listener ) ; m_instructions = model . getInstructions ( ) ; }", "public static final Mem byte_ptr_abs(long target, long disp, SEGMENT segmentPrefix) {\n        return _ptr_build_abs(target, disp, segmentPrefix, SIZE_BYTE);\n    }", "private String toJavaName(String name) {\n        StringBuilder stb = new StringBuilder();\n        char[] namechars = name.toCharArray();\n        if (!Character.isJavaIdentifierStart(namechars[0])) {\n            stb.append(\"__\");\n        } else {\n            stb.append(namechars[0]);\n        }\n        for (int i = 1; i < namechars.length; i++) {\n            if (!Character.isJavaIdentifierPart(namechars[i])) {\n                stb.append(\"__\");\n            } else {\n                stb.append(namechars[i]);\n            }\n        }\n\n        return stb.toString();\n    }", "public HashMultimap<WordNetRelation, Sense> getRelatedSenses(@NonNull Sense sense) {\n        HashMultimap<WordNetRelation, Sense> map = HashMultimap.create();\n        for (Map.Entry<Sense, WordNetRelation> entry : db\n                                                           .getRelations(sense)\n                                                           .entrySet()) {\n            map.put(entry.getValue(), entry.getKey());\n        }\n        return map;\n    }", "public static void assertEqual(Object expected,Object actual){\n  if (verbose) {\n    log(\"assertEqual(\" + expected + \", \"+ actual+ \")\");\n  }\n  assertBool(expected.equals(actual));\n}\n", "public Cleaner ( String parentName , ReferenceQueue < K > queue , Map < KeyHolder < K > , V > entryInfos , ICleanerListener < V > listener ) { super ( parentName + STR_ ) ; _queue = queue ; _table = entryInfos ; _listener = listener ; this . setDaemon ( B", "public static List<String> split(String str, char separatorChar) {\n        List<String> list = new ArrayList<String>();\n        if (str == null || str.length() == 0) {\n            return list;\n        }\n        if (str.indexOf(separatorChar) == -1) {\n            list.add(str);\n            return list;\n        }\n        int start = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) == separatorChar) {\n                String token = str.substring(start, i).trim();\n                if (token.length() > 0) {\n                    list.add(token);\n                }\n                start = i+1;\n            }\n        }\n        String token = str.substring(start, str.length()).trim();\n        if (token.length() > 0) {\n            list.add(token);\n        }\n        return list;\n    }", "  public boolean hasAttributeHistogram() {\n    return owner.getExtension(AttributeHistogram.class) != null;\n  }\n", "public static boolean isNameDeclOrSimpleAssignLhs(Node n, Node parent) {\n    return\n        (parent.isAssign() && parent.getFirstChild() == n) || NodeUtil.isNameDeclaration(parent);\n  }", "public Builder withTokenizer(Class<? extends TokenizerFactory> factory,String... params) throws IOException {\n  return withTokenizer(factory,paramsToMap(params));\n}", "public void AllClear(){\n  mTitle.setText(\"\");\n  mContent.setText(\"\");\n  mAuthor.setText(\"\");\n}\n", "@Controller(events = EventType.PIN_ADDED)\n    public void onPinAdded(WebSocketSession session, Event event) {\n        reply(session, event, \"Thanks for the pin! You can find all pinned items under channel details.\");\n    }", "public boolean equals(final Object obj){\n  if (obj instanceof RFC1960SimpleFilter) {\n    final RFC1960SimpleFilter filter=(RFC1960SimpleFilter)obj;\n    return comparator == filter.comparator && id.equals(filter.id) && value.equals(filter.value);\n  }\n  return false;\n}\n", "    public TermEntry removeEntry(TermEntry entry){\n    \tif(entries.contains(entry)){\n    \t\tentries.remove(entry);\n    \t\treturn entry;\n    \t}\n    \tSystem.out.println(\"That TermEntry does not exist in the TermChunk and can't be removed.\");\n    \treturn entry;\n    }\n", "    protected void appendOctet(int number) {\n        append(number);\n    }\n", "\tpublic ParameterReceiver getSourceObject() {\n\t\tif (sourceObject != null) {\n\t\t\tfor (String key: parameterValue.keySet()) {\n\t\t\t\tsourceObject.setParameter(key, parameterValue.get(key));\n\t\t\t}\n\t\t}\n\t\treturn sourceObject;\n\t}\n", "\tprotected void setMessage(String message) {\n\t\tif (message == null)\n\t\t\tthis.message = \"\"; //$NON-NLS-1$\n\t\telse\n\t\t\tthis.message = message;\n\t}\n", "  public boolean isPoolInitalised(String name) {\n    boolean initalised = false;\n    Pool pool = getPool(name);\n    if (pool != null) {\n      initalised = pool.isPoolInitalised();\n    }\n    return initalised;\n  }\n", "public boolean isLargePacket ( ) { return getDataLength ( ) == MySQLPacket . MAX_LENGTH ; }", "public String getTBoxLanguage (String tbn) throws RacerException, IOException {\n        String res=send(\"(get-tbox-language \"+tbn+\")\",true);\n        return res;\n}\n", "public void addListener ( final IDebugPerspectiveModelListener listener ) { m_listeners . addListener ( listener ) ; }", "    public void setValue(float v) {\n        if ((v < 0) || (v > 1)) {\n            System.out.println(\"!!! Wrong value: \" + v);\n        } else {\n            value = (short) (v * 10000.0 + 0.5);\n        }\n    }\n", "\tpublic BaseCommandType (java.lang.Long id) {\n\t\tthis.setId(id);\n\t\tinitialize();\n\t}\n", "protected boolean isNotFullyInitializedReceiver(MethodTree methodTree){\n  return TreeUtils.isConstructor(methodTree);\n}\n", "protected Polygon makeHullComplex(double[][] pc){\n  GrahamScanConvexHull2D hull=new GrahamScanConvexHull2D();\n  double[] diag=new double[]{0,0};\n  for (int j=0; j < pc.length; j++) {\n    hull.add(pc[j]);\n    hull.add(times(pc[j],-1));\n    for (int k=j + 1; k < pc.length; k++) {\n      double[] q=pc[k];\n      double[] ppq=timesEquals(plus(pc[j],q),MathUtil.SQRTHALF);\n      double[] pmq=timesEquals(minus(pc[j],q),MathUtil.SQRTHALF);\n      hull.add(ppq);\n      hull.add(times(ppq,-1));\n      hull.add(pmq);\n      hull.add(times(pmq,-1));\n      for (int l=k + 1; l < pc.length; l++) {\n        double[] r=pc[k];\n        double[] ppqpr=timesEquals(plus(ppq,r),Math.sqrt(1 / 3.));\n        double[] pmqpr=timesEquals(plus(pmq,r),Math.sqrt(1 / 3.));\n        double[] ppqmr=timesEquals(minus(ppq,r),Math.sqrt(1 / 3.));\n        double[] pmqmr=timesEquals(minus(pmq,r),Math.sqrt(1 / 3.));\n        hull.add(ppqpr);\n        hull.add(times(ppqpr,-1));\n        hull.add(pmqpr);\n        hull.add(times(pmqpr,-1));\n        hull.add(ppqmr);\n        hull.add(times(ppqmr,-1));\n        hull.add(pmqmr);\n        hull.add(times(pmqmr,-1));\n      }\n    }\n    plusEquals(diag,pc[j]);\n  }\n  timesEquals(diag,1.0 / Math.sqrt(pc.length));\n  hull.add(diag);\n  hull.add(times(diag,-1));\n  return hull.getHull();\n}\n", "public static IOFileFilter ageFileFilter ( File cutoffReference , boolean acceptOlder ) { return new AgeFileFilter ( cutoffReference , acceptOlder ) ; }", "\tpublic void delete(T entity) {\n\t\t// todo: add logger\n\t\ttry {\n\t\t\tentity = getEntityManager().getReference(entityClass,\n\t\t\t\t\tentity.getId());\n\t\t\tgetEntityManager().remove(entity);\n\t\t\tEntityManagerHelper.log(\"delete successful\", Level.INFO, null);\n\t\t} catch (RuntimeException ex) {\n\t\t\tEntityManagerHelper.log(\"delete failed\", Level.SEVERE, ex);\n\t\t\tthrow ex;\n\t\t}\n\t}\n", "public PutRestApiResult withBinaryMediaTypes(String... binaryMediaTypes) {\n        if (this.binaryMediaTypes == null) {\n            setBinaryMediaTypes(new java.util.ArrayList<String>(binaryMediaTypes.length));\n        }\n        for (String ele : binaryMediaTypes) {\n            this.binaryMediaTypes.add(ele);\n        }\n        return this;\n    }", "public ServiceInfo(String name,String title,String url,String version){\n  this.name=name;\n  this.title=title;\n  this.url=url;\n  this.version=version;\n}\n", "protected void removeBackground(PositionableLabel b){\n  for (int i=0; i < backgroundImage.size(); i++) {\n    if (b == backgroundImage.get(i)) {\n      backgroundImage.remove(i);\n      setDirty(true);\n      return;\n    }\n  }\n}\n", "public void requestAuthenticationFailureTimes(){\n  operations.add(PasswordPolicyStateOperationType.GET_AUTHENTICATION_FAILURE_TIMES);\n}\n", "public synchronized void showErrorDialog ( String message ) { showErrorDialog ( message , null ) ; }", "public void addMetadataEntry(String value){\n  metadata.add(value.replaceAll(\";\",\":\"));\n}\n", "public static Test suite ( ) { return ( new TestSuite ( SelectManyCollectionITCase . class ) ) ; }", "@SuppressWarnings(\"unchecked\")\n\tpublic T assemble() {\n\t\tif (instance == null) {\n\t\t\tConstructor<T> constructor = descriptor.constructor();\n\t\t\t\n\t\t\ttry {\n\t\t\t\tif (descriptor.joinpoints().isEmpty()) {\n\t\t\t\t\tif (constructor == null) {\n\t\t\t\t\t\tinstance = descriptor.type().newInstance();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinstance = constructor.newInstance(\n\t\t\t\t\t\t\t\tparameters(constructor).toArray());\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tEnhancer enhancer = new Enhancer();\n\t\t\t\t\tenhancer.setSuperclass(descriptor.type());\n\t\t\t\t\tenhancer.setCallback(new Interceptor(container, descriptor));\n\t\t\t\t\tenhancer.setNamingPolicy(NAMING_POLICY);\n\t\t\t\t\t\n\t\t\t\t\tif (constructor == null) {\n\t\t\t\t\t\tinstance = (T) enhancer.create();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinstance = (T) enhancer.create(\n\t\t\t\t\t\t\t\tconstructor.getParameterTypes(),\n\t\t\t\t\t\t\t\tparameters(constructor).toArray());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.warn(\"Component cannot be instantiated: Descriptor [\" + descriptor + \"]\", e);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t\n\t\t\tcontainer.instances().put(instance, descriptor);\n\t\t\tEvent.of(Constructed.class).on(instance).fire();\n\t\t}\n\t\t\n\t\tfor (Field field : descriptor.injects()) {\n\t\t\tif (!field.isAccessible()) {\n\t\t\t\tfield.setAccessible(true);\n\t\t\t}\n\t\t\t\n\t\t\tSet<Annotation> qualifiers = new HashSet<Annotation>();\n\t\t\t\n\t\t\tfor (Annotation annotation : field.getAnnotations()) {\n\t\t\t\tClass<? extends Annotation> type = annotation.annotationType();\n\t\t\t\t\n\t\t\t\tif (type.isAnnotationPresent(Qualifier.class) || type.isAnnotationPresent(Binding.class)) {\n\t\t\t\t\tqualifiers.add(annotation);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tObject component = container.component(new Target(Target.Kind.FIELD, field.getGenericType(), qualifiers));\n\t\t\t\n\t\t\ttry {\n\t\t\t\tfield.set(instance, component);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.warn(\"Dependent component cannot be injected into [\" + field + \"]\", e);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (Field field : descriptor.validates()) {\n\t\t\tfor (Annotation annotation : field.getAnnotations()) {\n\t\t\t\tClass<? extends Annotation> annotationType = annotation.annotationType();\n\t\t\t\t\n\t\t\t\tif (annotationType.isAnnotationPresent(Constraint.class)) {\n\t\t\t\t\tConstraint constraint = annotationType.getAnnotation(Constraint.class);\n\t\t\t\t\tClass<? extends Validator<Annotation>> validator = (Class<? extends Validator<Annotation>>) constraint.value();\n\t\t\t\t\tValidator<Annotation> v = container.component(validator);\n\t\t\t\t\t\n\t\t\t\t\tif (v == null) {\n\t\t\t\t\t\tcontainer.install(validator);\n\t\t\t\t\t\tv = container.component(validator);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!field.isAccessible()) {\n\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tObject value = null;\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvalue = field.get(instance);\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tlogger.warn(\"Component field [\" + field + \"] cannot be validated\", e);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tboolean valid = false;\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvalid = v.validate(annotation, value);\n\t\t\t\t\t} catch (ClassCastException e) {\n\t\t\t\t\t\tthrow new ConfigurationException(\n\t\t\t\t\t\t\t\t\"The other way around about Constraint and Validator: Validator [\"\n\t\t\t\t\t\t\t\t\t\t+ validator + \"] must validate [\"\n\t\t\t\t\t\t\t\t\t\t+ annotationType + \"]\", e);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (valid) {\n\t\t\t\t\t\tlogger.debug(\"Field [\" + field + \"]'s value [\" + value + \"] is valid for [\"\n\t\t\t\t\t\t\t\t+ annotation + \"] constraint\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.error(\"Field [\" + field + \"]'s value [\" + value + \"] is invalid for [\"\n\t\t\t\t\t\t\t\t+ annotation + \"] constraint\");\n\t\t\t\t\t\tthrow new ViolationException(field, annotation, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (Annotation annotation : descriptor.constraints()) {\n\t\t\tClass<? extends Annotation> annotationType = annotation.annotationType();\n\t\t\tConstraint constraint = annotationType.getAnnotation(Constraint.class);\n\t\t\tClass<? extends Validator<Annotation>> validator = (Class<? extends Validator<Annotation>>) constraint.value();\n\t\t\tValidator<Annotation> v = container.component(validator);\n\t\t\t\n\t\t\tif (v == null) {\n\t\t\t\tcontainer.install(validator);\n\t\t\t\tv = container.component(validator);\n\t\t\t}\n\t\t\t\n\t\t\tboolean valid = false;\n\t\t\t\n\t\t\ttry {\n\t\t\t\tvalid = v.validate(annotation, instance);\n\t\t\t} catch (ClassCastException e) {\n\t\t\t\tthrow new ConfigurationException(\n\t\t\t\t\t\t\"The other way around about Constraint and Validator: Validator [\"\n\t\t\t\t\t\t\t\t+ validator + \"] must validate [\"\n\t\t\t\t\t\t\t\t+ annotationType + \"]\", e);\n\t\t\t}\n\t\t\t\n\t\t\tif (valid) {\n\t\t\t\tlogger.debug(\"Class [\" + descriptor.type() + \"]'s value [\" \n\t\t\t\t\t\t+ instance + \"] is valid for [\" + annotation + \"] constraint\");\n\t\t\t} else {\n\t\t\t\tlogger.error(\"Class [\" + descriptor.type() + \"]'s value [\" \n\t\t\t\t\t\t+ instance + \"] is invalid for [\" + annotation + \"] constraint\");\n\t\t\t\tthrow new ViolationException(descriptor.type(), annotation, instance);\n\t\t\t}\n\t\t}\n\t\t\n\t\tlogger.debug(\"Component has been assembled: Descriptor [\" + descriptor + \"]\");\n\t\treturn instance;\n\t}", "public TungstenProperties loadPasswordsAsTungstenProperties ( ) throws ServerRuntimeException { this . passwordsProperties = SecurityHelper . loadPasswordsFromAuthenticationInfo ( this . authenticationInfo ) ; return passwordsProperties ; }", "public WebTarget appendPathAndQueryParameters(final WebTarget webTarget) {\n    ArgumentChecker.notNull(webTarget, \"webTarget\");\n    WebTarget resultTarget = webTarget;\n    resultTarget = resultTarget.path(MULTI_SET_NAME + EXTENSION);\n    resultTarget = resultTarget.queryParam(COLUMNS_PARAM, buildCodeList(_quandlCodeRequests));\n    if (_startDate != null) {\n      resultTarget = resultTarget.queryParam(START_DATE_PARAM, _startDate.toString());\n    }\n    if (_endDate != null) {\n      resultTarget = resultTarget.queryParam(END_DATE_PARAM, _endDate.toString());\n    }\n    if (_frequency != null) {\n      resultTarget = resultTarget.queryParam(FREQUENCY_PARAM, _frequency.getQuandlString());\n    }\n    if (_maxRows != null) {\n      resultTarget = resultTarget.queryParam(MAX_ROWS_PARAM, _maxRows);\n    }\n    if (_transform != null) {\n      resultTarget = resultTarget.queryParam(TRANSFORM_PARAM, _transform.getQuandlString());\n    }\n    if (_sortOrder != null) {\n      resultTarget = resultTarget.queryParam(SORT_ORDER_PARAM, _sortOrder.getQuandlString());\n    }\n    return resultTarget;\n  }", "\tpublic boolean containsBar(JToolBar bar) {\n\n\t\tint count = vtRows.size();\n\t\tUIToolBarControllerRow row = null;\n\t\tfor (int i=0; i<count; i++) {\n\t\t\trow = (UIToolBarControllerRow)vtRows.elementAt(i);\n\t\t\tif (row.containsBar(bar)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\t\t\n\t\treturn false;\n\t}\t\n", "    public void clearMessages(String fieldName) {\n    \tSet messagesForFieldName = getMessages(fieldName);\n    \tfor (Iterator mi = messagesForFieldName.iterator(); mi.hasNext();) {\n\t\t\tmessages.remove(mi.next());\n\t\t}\n    \tmessagesSubSets.clear();\n    }\n", "    public void fromAngleAxis(float angle, fVector3 axis) {\n        fVector3 normAxis = axis.normalize();\n        fromAngleNormalAxis(angle, normAxis);\n    }\n", "@Override\n\tpublic void open(int taskNumber, int numTasks) throws IOException {\n\t\tthis.session = cluster.connect();\n\t\tthis.prepared = session.prepare(insertQuery);\n\t\tthis.callback = new FutureCallback<ResultSet>() {\n\t\t\t@Override\n\t\t\tpublic void onSuccess(ResultSet ignored) {\n\t\t\t\tonWriteSuccess(ignored);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onFailure(Throwable t) {\n\t\t\t\tonWriteFailure(t);\n\t\t\t}\n\t\t};\n\t}", "public static <C extends ConfigurationClient,S extends Configuration>CreateSubCommandHandler<C,S> create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,SetRelationDefinition<C,S> r) throws ArgumentException {\n  return new CreateSubCommandHandler<>(parser,p,r,null,p.child(r));\n}\n", "public void sendPacketToAllAroundPoint ( IPacket packet , TargetPoint tp ) { checkClassAndSync ( packet . getClass ( ) ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . ALLAROUNDPOINT", "void addSubsystem(final OperationTransformerRegistry registry, final String name, final ModelVersion version) {\n        final OperationTransformerRegistry profile = registry.getChild(PathAddress.pathAddress(PROFILE));\n        final OperationTransformerRegistry server = registry.getChild(PathAddress.pathAddress(HOST, SERVER));\n        final PathAddress address = PathAddress.pathAddress(PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM, name));\n        subsystem.mergeSubtree(profile, Collections.singletonMap(address, version));\n        if(server != null) {\n            subsystem.mergeSubtree(server, Collections.singletonMap(address, version));\n        }\n    }", "public void afterMovingToBackup ( ) { switch ( _spaceMode ) { case NONE : startComponents ( BOOL_ ) ; break ; case PRIMARY : try { _space . stopInternal ( ) ; _space . startInternal ( ) ; } catch ( RemoteException e ) { if ( _logger . isLoggable ( Level .", "protected void deleteDirectory(File webAppFile){\n  if (webAppFile.isDirectory()) {\n    File[] children=webAppFile.listFiles();\n    for (    File element : children) {\n      deleteDirectory(element);\n    }\n    webAppFile.delete();\n  }\n else {\n    webAppFile.delete();\n  }\n}\n", "    public void insertCommand(String commandName, Command command ){\n        registerOneCommand(\"core/\" + commandName, command);\n    }\n", "public static int murmurhash3x8632(byte[] data, int offset, int len, int seed) {\n\n        int c1 = 0xcc9e2d51;\n        int c2 = 0x1b873593;\n\n        int h1 = seed;\n        int roundedEnd = offset + (len & 0xfffffffc);  // round down to 4 byte block\n\n        for (int i = offset; i < roundedEnd; i += 4) {\n            // little endian load order\n            int k1 = (data[i] & 0xff) | ((data[i + 1] & 0xff) << 8) | ((data[i + 2] & 0xff) << 16) | (data[i + 3] << 24);\n            k1 *= c1;\n            k1 = (k1 << 15) | (k1 >>> 17);  // ROTL32(k1,15);\n            k1 *= c2;\n\n            h1 ^= k1;\n            h1 = (h1 << 13) | (h1 >>> 19);  // ROTL32(h1,13);\n            h1 = h1 * 5 + 0xe6546b64;\n        }\n\n        // tail\n        int k1 = 0;\n\n        switch(len & 0x03) {\n            case 3:\n                k1 = (data[roundedEnd + 2] & 0xff) << 16;\n                // fallthrough\n            case 2:\n                k1 |= (data[roundedEnd + 1] & 0xff) << 8;\n                // fallthrough\n            case 1:\n                k1 |= data[roundedEnd] & 0xff;\n                k1 *= c1;\n                k1 = (k1 << 15) | (k1 >>> 17);  // ROTL32(k1,15);\n                k1 *= c2;\n                h1 ^= k1;\n            default:\n        }\n\n        // finalization\n        h1 ^= len;\n\n        // fmix(h1);\n        h1 ^= h1 >>> 16;\n        h1 *= 0x85ebca6b;\n        h1 ^= h1 >>> 13;\n        h1 *= 0xc2b2ae35;\n        h1 ^= h1 >>> 16;\n\n        return h1;\n    }", "  public void addNewEntry() {\n    String editedProperty = manager.getProperty(editorTemplate + \".\" + ALLOWED_VALUES, \"\");\n    //\n    //manager.getFactory().showNewEditorWindow(\"Add property\", editedProperty, editedProperty, manager);\n    PropertyEditorUI sourceEditor = manager.getPropertyEditor(editedProperty);\n    if (sourceEditor == null) {\n      sourceEditor = manager.getFactory().createEditor(editedProperty, editedProperty, manager);\n    }\n    if (sourceEditor instanceof MultiEditorPane) {\n      MultiEditorPane multiEditor = (MultiEditorPane) sourceEditor;\n      multiEditor.addNewValue(multiEditor.getNewValueName(), this.getPropertyEditorPane().getContainer());\n    }\n  }\n", "private static String cutHead(String image) throws CommonsException {\n  return image.replace(formHead(HAIR,cutWhom(image),NECK),\"\");\n}\n", "@Override public void onBindViewHolder(final RecyclerView.ViewHolder holder,int positions){\n  int viewType=holder.getItemViewType();\nswitch (viewType) {\ncase 0:\n    convert((BaseViewHolder)holder,mData.get(holder.getLayoutPosition() - getHeaderLayoutCount()));\n  break;\ncase LOADING_VIEW:\naddLoadMore(holder);\nbreak;\ncase HEADER_VIEW:\nbreak;\ncase EMPTY_VIEW:\nbreak;\ncase FOOTER_VIEW:\nbreak;\ndefault :\nconvert((BaseViewHolder)holder,mData.get(holder.getLayoutPosition() - getHeaderLayoutCount()));\nonBindDefViewHolder((BaseViewHolder)holder,mData.get(holder.getLayoutPosition() - getHeaderLayoutCount()));\nbreak;\n}\n}\n", "public MBeanOperationInfo[] getOperationsInfo(ObjectName name) throws JMException {\n\t\tcheckClientConnected();\n\t\ttry {\n\t\t\treturn mbeanConn.getMBeanInfo(name).getOperations();\n\t\t} catch (Exception e) {\n\t\t\tthrow createJmException(\"Problems getting bean information from \" + name, e);\n\t\t}\n\t}", "\tprivate Vector createElementTRT(Trainingtypes o) {\n\t\tVector v = new Vector();\n\t\tv.addElement(o.getName());\n\t\tv.addElement(o.getDescription());\n\t\tv.addElement(o.getDefaultoption());\n\t\tv.addElement(o.getGoodformonths());\n\t\tv.addElement(o.getObsoletetraining());\n\t\treturn v;\n\t}\n", "public boolean equals(Object object){\n  if (!(object instanceof Attribute)) {\n    return false;\n  }\n  Attribute val=(Attribute)object;\n  if (value == null) {\n    if (val.getValue() == null) {\n      return name.equals(val.getName());\n    }\n else {\n      return false;\n    }\n  }\n  return ((name.equals(val.getName())) && (value.equals(val.getValue())));\n}\n", "    public Iterator valueIterator() {\n        final Iterator iter = keyIterator();\n        return new Iterator() {            \n            public boolean hasNext() {\n                return iter.hasNext();\n            }\n            public Object next() {\n                Object key = iter.next();\n                return get(key);\n            }\n            public void remove() {\n                throw new UnsupportedOperationException( \"remove() not supported for BeanMap\" );\n            }\n        };\n    }\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public int size(){\n  return _elementOrder.size();\n}", "protected ClassWriter buildClassHeader(ClassLoader classLoader,\n                                           ClassDefinition classDef) {\n        boolean reactive = classDef.isReactive();\n\n        String[] original = classDef.getInterfaces();\n        int interfacesNr = original.length + (reactive ? 2 : 1);\n        String[] interfaces = new String[interfacesNr];\n        for ( int i = 0; i < original.length; i++ ) {\n            interfaces[i] = BuildUtils.getInternalType( original[i] );\n        }\n        interfaces[original.length] = BuildUtils.getInternalType( GeneratedFact.class.getName() );\n        if (reactive) {\n            interfaces[original.length+1] = BuildUtils.getInternalType( ReactiveObject.class.getName() );\n        }\n\n        int classModifiers = Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER;\n        if ( classDef.isAbstrakt() ) {\n            classModifiers += Opcodes.ACC_ABSTRACT;\n        }\n\n        ClassWriter cw = createClassWriter( classLoader,\n                                            classModifiers,\n                                            BuildUtils.getInternalType( classDef.getClassName() ),\n                                            null,\n                                            BuildUtils.getInternalType( classDef.getSuperClass() ),\n                                            interfaces );\n\n        buildClassAnnotations(classDef, cw);\n\n        cw.visitSource( classDef.getClassName() + \".java\",\n                        null );\n\n        return cw;\n    }", "private void writeResponseHeaderToRecordHeader ( Response response , Record . Header header ) { for ( Map . Entry < String , List < String > > entry : response . getStringHeaders ( ) . entrySet ( ) ) { if ( ! entry . getValue ( ) . isEmpty ( ) ) { String ", "void switchPresentation(){\n  if (availablePresentations.size() < 2) {\n    return;\n  }\n  int index=availablePresentations.indexOf(activePresentationDescriptor);\n  if (index < availablePresentations.size() - 1) {\n    index++;\n  }\n else {\n    index=0;\n  }\n  switchPresentation(availablePresentations.get(index));\n}\n", "private void writeIntegerNoTag(int value)\n\t\tthrows IOException\n\t{\n\t\twhile(true)\n\t\t{\n\t\t\tif((value & ~0x7F) == 0)\n\t\t\t{\n\t\t\t\tout.write(value);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tout.write((value & 0x7f) | 0x80);\n\t\t\t\tvalue >>>= 7;\n\t\t\t}\n\t\t}\n\t}", "public void write(String str,int off,int len){\nsynchronized (lock) {\n    int newcount=count + len;\n    if (newcount > buf.length) {\n      buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));\n    }\n    str.getChars(off,off + len,buf,count);\n    count=newcount;\n  }\n}\n", "    public void setAntiSpamState(long accountId, boolean enabled) throws NoSuchAccountException {\n        AccountEntity account;\n        try {\n            account = anAccountEntityHome.findByPrimaryKey(new Long(accountId));\n            account.setAntispamState(enabled);\n        } catch (RemoteException e) {\n            System.out.println(\"Remote exception in IMFSB.setAntiSpamState\");\n        } catch (FinderException e) {\n            throw new NoSuchAccountException();\n        }\n    }\n", "public String resolveTimeZoneId(String zoneId) {\n    String alias = _CalendarUtils.getTimeZoneAlias(zoneId);\n    if (alias != null) {\n      zoneId = alias;\n    }\n    alias = TimeZoneAliases.getAlias(zoneId);\n    if (alias != null) {\n      zoneId = alias;\n    }\n    return zoneId;\n  }", "public void resume ( ) throws DebugException { try { m_debugger . resume ( ) ; } catch ( final DebugExceptionWrapper e ) { throw new DebugException ( e ) ; } }", "public void processTransOpener(){\n  allowSharpQuote=true;\n  pushState();\n  yybegin(LEX_TRANS_OPENER);\n}", "@NotNull\n    public IntStream onClose(@NotNull final Runnable closeHandler) {\n        Objects.requireNonNull(closeHandler);\n        final Params newParams = Params.wrapWithCloseHandler(params, closeHandler);\n        return new IntStream(newParams, iterator);\n    }", "public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { request . getSession ( ) . setAttribute ( STR_ , STR_ ) ; response . sendRedirect ( STR_ ) ; return ; }", "private void validateMessage ( String expectedType , String type , long returnCode , String service , String payload ) throws ReplicatorException { if ( ! type . equals ( expectedType ) ) { throw new ReplicatorException ( STR_ + Protocol . TYPE_FILTERED +", "\tpublic void setFocus() {\n\t\tOmniUITrace.trace(this,\"setFocus()\",\"(called)\");\n\t\tviewer.getControl().setFocus();\n\t}\n", "public Invoice finalizeInvoice() throws StripeException {\n    return finalizeInvoice((Map<String, Object>) null, (RequestOptions) null);\n  }", "public void set(int r, int c, double value) throws MatrixException\n    {\n        if ((r < 0) || (r >= nRows) || (c < 0) || (c >= nCols)) {\n            throw new MatrixException(MatrixException.INVALID_INDEX);\n        }\n\n        values[r][c] = value;\n    }", "static protected JsonNode getQueryResultJSON(String queryId,\n                                               SFSession session)\n  throws SFException, SnowflakeSQLException\n  {\n    String getResultPath = String.format(SF_PATH_QUERY_RESULT, queryId);\n    StmtInput stmtInput = new StmtInput()\n        .setServerUrl(session.getServerUrl())\n        .setSessionToken(session.getSessionToken())\n        .setNetworkTimeoutInMillis(session.getNetworkTimeoutInMilli())\n        .setMediaType(SF_MEDIA_TYPE)\n        .setServiceName(session.getServiceName());\n\n    String resultAsString = getQueryResult(getResultPath, stmtInput);\n\n    StmtOutput stmtOutput = pollForOutput(resultAsString, stmtInput, null);\n    return stmtOutput.getResult();\n  }", "public java.util.List<LaunchPermission> getAdd() {\n        if (add == null) {\n            add = new com.amazonaws.internal.SdkInternalList<LaunchPermission>();\n        }\n        return add;\n    }", "@Test\n    @AllowedFFDC // The tested exceptions cause FFDC so we have to allow for this.\n    @Mode(TestMode.FULL)\n    @SkipForRepeat(SkipForRepeat.EE8_FEATURES)\n    public void launchFaultToleranceTCKEE7() throws Exception {\n        MvnUtils.runTCKMvnCmd(", "private Method getMethod(Class<?> clazz) {\n    Method method = null;\n    if (methodName != null) {\n      method = getPublicMethod(clazz, methodName, methodParams);\n      if (method != null\n          && returnType != null\n          && !returnType.isAssignableFrom(method.getReturnType())) {\n\n        // If the return type is non-null it must be compatible.\n        method = null;\n      }\n    }\n    return method;\n  }", "private void updateInternalMask() throws ParseException {\n  String mask=getMask();\n  ArrayList<MaskCharacter> fixed=new ArrayList<MaskCharacter>();\n  ArrayList<MaskCharacter> temp=fixed;\n  if (mask != null) {\n    for (int counter=0, maxCounter=mask.length(); counter < maxCounter; counter++) {\n      char maskChar=mask.charAt(counter);\nswitch (maskChar) {\ncase DIGIT_KEY:\n        temp.add(new DigitMaskCharacter());\n      break;\ncase LITERAL_KEY:\n    if (++counter < maxCounter) {\n      maskChar=mask.charAt(counter);\n      temp.add(new LiteralCharacter(maskChar));\n    }\n  break;\ncase UPPERCASE_KEY:\ntemp.add(new UpperCaseCharacter());\nbreak;\ncase LOWERCASE_KEY:\ntemp.add(new LowerCaseCharacter());\nbreak;\ncase ALPHA_NUMERIC_KEY:\ntemp.add(new AlphaNumericCharacter());\nbreak;\ncase CHARACTER_KEY:\ntemp.add(new CharCharacter());\nbreak;\ncase ANYTHING_KEY:\ntemp.add(new MaskCharacter());\nbreak;\ncase HEX_KEY:\ntemp.add(new HexCharacter());\nbreak;\ndefault :\ntemp.add(new LiteralCharacter(maskChar));\nbreak;\n}\n}\n}\nif (fixed.size() == 0) {\nmaskChars=EmptyMaskChars;\n}\n else {\nmaskChars=new MaskCharacter[fixed.size()];\nfixed.toArray(maskChars);\n}\n}\n", "    private void createFileByContentDir() throws IOException {\n\n        filesByContentDir = new File(baseDir, \"filesByContentDir\");\n        assertTrue(filesByContentDir.mkdirs());\n\n        // for each type create the files without its extension\n\n        File uniqueFile = new File(filesByContentDir, \"\"\n                + System.currentTimeMillis());\n        TYPE.HIVERC.writer.writeTestData(uniqueFile, fileRecords, fileColumns,\n                colSeparator);\n\n    }\n", "public void addPipeline ( String name , String stages , String storeNames ) { conf . setString ( ReplicatorConf . PIPELINES , name ) ; conf . setString ( ReplicatorConf . PIPELINE_ROOT + STR_ + name , stages ) ; if ( storeNames != null ) conf . setString ( ReplicatorConf . PIPELINE_ROOT + STR_ + name + STR_ , storeNames ) ; }", "public void write(String filename){\n  logger.info(\"write carrier plans\");\n  try {\n    openFile(filename);\n    writeXmlHead();\n    startCarriers(this.writer);\n    for (    Carrier carrier : carriers) {\n      startCarrier(carrier,this.writer);\n      writeVehiclesAndTheirTypes(carrier,this.writer);\n      writeShipments(carrier,this.writer);\n      writeServices(carrier,this.writer);\n      writePlans(carrier,this.writer);\n      endCarrier(this.writer);\n    }\n    endCarriers(this.writer);\n    close();\n    logger.info(\"done\");\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n    logger.error(e);\n    System.exit(1);\n  }\n}\n", "public static void logArticleProcessed ( final Logger logger , final Task < Revision > article , long time ) { logger . logMessage ( Level . INFO , STR_ + Time . toClock ( time ) + STR_ + article . toString ( ) ) ; }", "public static void parseModelToContentValues(Object model,ContentValues contentValues){\n  if (contentValues.size() > 0)   contentValues.clear();\n  Class<?> clazz=model.getClass();\n  Field[] fields=clazz.getDeclaredFields();\n  Class<?> fieldType=null;\n  Object fieldVal=null;\n  for (  Field field : fields) {\n    try {\n      if (field.isAccessible() == false)       field.setAccessible(true);\n      Column column=field.getAnnotation(Column.class);\n      fieldType=field.getType();\n      fieldVal=field.get(model);\n      if (column == null || fieldVal == null)       continue;\n      if (fieldType.equals(int.class)) {\n        contentValues.put(column.name(),field.getInt(model));\n      }\n else       if (fieldType.equals(Integer.class)) {\n        contentValues.put(column.name(),(Integer)field.get(model));\n      }\n else       if (fieldType.equals(short.class)) {\n        contentValues.put(column.name(),field.getShort(model));\n      }\n else       if (fieldType.equals(Short.class)) {\n        contentValues.put(column.name(),(Short)field.get(model));\n      }\n else       if (fieldType.equals(long.class)) {\n        contentValues.put(column.name(),field.getLong(model));\n      }\n else       if (fieldType.equals(Long.class)) {\n        contentValues.put(column.name(),(Long)field.get(model));\n      }\n else       if (fieldType.equals(float.class)) {\n        contentValues.put(column.name(),field.getFloat(model));\n      }\n else       if (fieldType.equals(Float.class)) {\n        contentValues.put(column.name(),(Float)field.get(model));\n      }\n else       if (fieldType.equals(double.class)) {\n        contentValues.put(column.name(),field.getDouble(model));\n      }\n else       if (fieldType.equals(Double.class)) {\n        contentValues.put(column.name(),(Double)field.get(model));\n      }\n else       if (fieldType.equals(boolean.class)) {\n        if (field.getBoolean(model) == true) {\n          contentValues.put(column.name(),\"1\");\n        }\n else {\n          contentValues.put(column.name(),\"0\");\n        }\n      }\n else       if (fieldType.equals(Boolean.class)) {\n        if ((Boolean)field.get(model) == true) {\n          contentValues.put(column.name(),\"1\");\n        }\n else {\n          contentValues.put(column.name(),\"0\");\n        }\n      }\n else       if (fieldType.equals(String.class)) {\n        contentValues.put(column.name(),(String)field.get(model));\n      }\n else       if (fieldType.equals(byte[].class)) {\n        contentValues.put(column.name(),(byte[])field.get(model));\n      }\n else       if (fieldType.equals(Date.class)) {\n        Date date=(Date)field.get(model);\n        contentValues.put(column.name(),DateUtils.formatDate2Str(date));\n      }\n    }\n catch (    IllegalArgumentException e) {\n      e.printStackTrace();\n    }\ncatch (    IllegalAccessException e) {\n      e.printStackTrace();\n    }\n  }\n}\n", "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        long instant = year().set(0, year);\n        instant = monthOfYear().set(instant, monthOfYear);\n        instant = dayOfMonth().set(instant, dayOfMonth);\n        instant = hourOfDay().set(instant, hourOfDay);\n        instant = minuteOfHour().set(instant, minuteOfHour);\n        instant = secondOfMinute().set(instant, secondOfMinute);\n        return millisOfSecond().set(instant, millisOfSecond);\n    }", "protected void checkIndex(int parameterIndex, int type, String getName) throws SQLException {\n    checkIndex(parameterIndex);\n    if (type != this.testReturn[parameterIndex - 1]) {\n      throw new PSQLException(\n          GT.tr(\"Parameter of type {0} was registered, but call to get{1} (sqltype={2}) was made.\",\n              \"java.sql.Types=\" + testReturn[parameterIndex - 1], getName,\n                  \"java.sql.Types=\" + type),\n          PSQLState.MOST_SPECIFIC_TYPE_DOES_NOT_MATCH);\n    }\n  }", "public abstract void reset ( int size ) ;", "public CSVParser ( char separator , char quotechar , char escape , boolean strictQuotes ) { this ( separator , quotechar , escape , strictQuotes , DEFAULT_IGNORE_LEADING_WHITESPACE ) ; }", "protected void invoke(Type type,String namespace,String localPart,String state){\n  coreDeclarationHandler.invoke(type,namespace,localPart,state);\n}\n", "void initialize() throws ManagerCommunicationException\n    {\n        ResponseEvents re;\n\n        re = server.sendEventGeneratingAction(new AgentsAction());\n\n        for (ManagerEvent event : re.getEvents())\n        {\n            if (event instanceof AgentsEvent)\n            {\n                logger.info( event );\n                handleAgentsEvent((AgentsEvent) event);\n            }\n        }\n    }", "public boolean extract ( IProgressListener ipl ) { Util . secure ( ipl ) . onTaskChanged ( STR_ + name ) ; return Util . extract ( new File ( ClientProxy . ROOT , name ) , new File ( ClientProxy . ROOT ) ) ; }", "public int hashCode(){\n  return uri.hashCode();\n}\n", "public static StringBuffer leftShift(String self, Object value) {\n        return new StringBuffer(self).append(value);\n    }", "public java.util.List<LaunchTemplateLicenseConfigurationRequest> getLicenseSpecifications() {\n        if (licenseSpecifications == null) {\n            licenseSpecifications = new com.amazonaws.internal.SdkInternalList<LaunchTemplateLicenseConfigurationRequest>();\n        }\n        return licenseSpecifications;\n    }", "public Builder acl ( StreamAcl acl ) { aclBuilder = ( acl != null ) ? acl . toBuilder ( ) : null ; return this ; }", "void onEvent ( T subscription , ResolvedEvent event ) ;", "    public boolean isEatingRequired() {\n        return getMyPlayer().getHPPercent() < random(45, 65);\n    }\n", "public boolean isSelectQuery ( ) { return BOOL_ ; }", "private void hierarchCard(String card,HeaderCardCountingArrayDataInput dis) throws IOException, TruncatedFileException {\n  this.key=FitsHeaderCardParser.parseCardKey(card);\n  extractValueCommentFromString(dis,card);\n}\n", "public MonthDateFormat(Locale locale,int chars){\n  this(TimeZone.getDefault(),locale,chars,true,false);\n}\n", "@Override\n    public CreateStorediSCSIVolumeResult createStorediSCSIVolume(CreateStorediSCSIVolumeRequest request) {\n        request = beforeClientExecution(request);\n        return executeCreateStorediSCSIVolume(request);\n    }", "    public String c2() {\n        Map sessionMap = FacesContext.getCurrentInstance().getExternalContext().getSessionMap();\n        sessionMap.put(\"bean_c1_c2\", new SampleBean());\n\n        return \"c2\";\n    }\n", "public static int calculateDarkerColor(final int color,final float factor){\n  final int a=Color.alpha(color);\n  final int r=Color.red(color);\n  final int g=Color.green(color);\n  final int b=Color.blue(color);\n  final int lightnessLevel=Math.round(RGB_TOTAL_COLORS * factor);\n  return Color.argb(a,Math.max(r - lightnessLevel,0),Math.max(g - lightnessLevel,0),Math.max(b - lightnessLevel,0));\n}\n", "public byte map ( byte src ) { int i = NUM_ & src ; return glyphIndex [ i ] ; }", "public static MediaType parseMediaType(String typeStr){\n  Matcher typeMatcher=RE_ACCEPT_FRAGMENT.matcher(typeStr);\n  if (typeMatcher.find()) {\n    return new MediaType(typeMatcher.group(1),typeMatcher.group(2));\n  }\n else {\n    throw new IllegalArgumentEx", "@Override\n    public DeleteBackupPlanResult deleteBackupPlan(DeleteBackupPlanRequest request) {\n        request = beforeClientExecution(request);\n        return executeDeleteBackupPlan(request);\n    }", "@SuppressWarnings({\"fallthrough\"})\n\tpublic static void spooky4(final BitVector bv, final long prefixLength, final long seed, final long[] state, final long[] tuple) {\n\n\t\tlong h0, h1, h2, h3;\n\t\th0 = seed;\n\t\th1 = seed;\n\t\th2 = ARBITRARY_BITS;\n\t\th3 = ARBITRARY_BITS;\n\t\tlong pos;\n\n\t\tif (prefixLength >= 2 * Long.SIZE) {\n\t\t\tfinal int p = 4 * (int) ((prefixLength - 2 * Long.SIZE) / (4 * Long.SIZE));\n\t\t\th0 = state[p + 0];\n\t\t\th1 = state[p + 1];\n\t\t\th2 = state[p + 2];\n\t\t\th3 = state[p + 3];\n\t\t\tpos = p * Long.SIZE + 2 * Long.SIZE;\n\t\t} else pos = 0;\n\n\t\tlong remaining = prefixLength - pos;\n\n\t\tif (remaining >= Long.SIZE * 2) {\n\t\t\th0 += bv.getLong(pos + 0 * Long.SIZE, pos + 1 * Long.SIZE);\n\t\t\th1 += bv.getLong(pos + 1 * Long.SIZE, pos + 2 * Long.SIZE);\n\t\t\tremaining -= 2 * Long.SIZE;\n\t\t\tpos += 2 * Long.SIZE;\n\t\t}\n\n\t\tif (remaining > Long.SIZE) {\n\t\t\th2 += bv.getLong(pos + 0 * Long.SIZE, pos + 1 * Long.SIZE);\n\t\t\th3 += bv.getLong(pos + 1 * Long.SIZE, prefixLength);\n\t\t} else if (remaining > 0) {\n\t\t\th2 += bv.getLong(pos, prefixLength);\n\t\t} else {\n\t\t\th2 += ARBITRARY_BITS;\n\t\t\th3 += ARBITRARY_BITS;\n\t\t}\n\n\t\th0 += prefixLength;\n\n\t\th3 ^= h2;\n\t\th2 = Long.rotateLeft(h2, 15);\n\t\th3 += h2;\n\t\th0 ^= h3;\n\t\th3 = Long.rotateLeft(h3, 52);\n\t\th0 += h3;\n\t\th1 ^= h0;\n\t\th0 = Long.rotateLeft(h0, 26);\n\t\th1 += h0;\n\t\th2 ^= h1;\n\t\th1 = Long.rotateLeft(h1, 51);\n\t\th2 += h1;\n\t\th3 ^= h2;\n\t\th2 = Long.rotateLeft(h2, 28);\n\t\th3 += h2;\n\t\th0 ^= h3;\n\t\th3 = Long.rotateLeft(h3, 9);\n\t\th0 += h3;\n\t\th1 ^= h0;\n\t\th0 = Long.rotateLeft(h0, 47);\n\t\th1 += h0;\n\t\th2 ^= h1;\n\t\th1 = Long.rotateLeft(h1, 54);\n\t\th2 += h1;\n\t\th3 ^= h2;\n\t\th2 = Long.rotateLeft(h2, 32);\n\t\th3 += h2;\n\t\th0 ^= h3;\n\t\th3 = Long.rotateLeft(h3, 25);\n\t\th0 += h3;\n\t\th1 ^= h0;\n\t\th0 = Long.rotateLeft(h0, 63);\n\t\th1 += h0;\n\n\t\tswitch (tuple.length) {\n\t\tcase 4:\n\t\t\ttuple[3] = h3;\n\t\tcase 3:\n\t\t\ttuple[2] = h2;\n\t\tcase 2:\n\t\t\ttuple[1] = h1;\n\t\tcase 1:\n\t\t\ttuple[0] = h0;\n\t\t}\n\t}", "public boolean isFinal(){\n  return Modifier.isFinal(_method.getModifiers());\n}\n", "public EmbedBuilder setTitle(String title, String url)\n    {\n        if (title == null)\n        {\n            this.title = null;\n            this.url = null;\n        }\n        else\n        {\n            Checks.notEmpty(title, \"Title\");\n            Checks.check(title.length() <= MessageEmbed.TITLE_MAX_LENGTH, \"Title cannot be longer than %d characters.\", MessageEmbed.TITLE_MAX_LENGTH);\n            if (Helpers.isBlank(url))\n                url = null;\n            urlCheck(url);\n\n            this.title = title;\n            this.url = url;\n        }\n        return this;\n    }", "    public void extensionRemoved(ExtensionPoint point, Extension extension) {\n        refresh();\n    }\n", "private boolean stage2(final Document document) {\n        beginStage(PHASE1_STAGE2_HDR, \"2\", NUM_PHASES);\n        final StringBuilder bldr = new StringBuilder();\n\n        Collection<Namespace> namespaces = document.getNamespaceMap().values();\n        final int docNSCount = namespaces.size();\n\n        bldr.append(\"Compiling \");\n        bldr.append(docNSCount);\n        bldr.append(\" namespace\");\n        if (docNSCount > 1) {\n            bldr.append(\"s\");\n        }\n        bldr.append(\" for \");\n        bldr.append(document.getName());\n        stageOutput(bldr.toString());\n\n        boolean success = true;\n        long t1 = currentTimeMillis();\n        try {\n            p1.stage2NamespaceCompilation(document);\n        } catch (ResourceDownloadError e) {\n            success = false;\n            stageError(e.getUserFacingMessage());\n        } catch (IndexingFailure e) {\n            success = false;\n            stageError(e.getUserFacingMessage());\n        }\n\n        long t2 = currentTimeMillis();\n        bldr.setLength(0);\n        markTime(bldr, t1, t2);\n        markEndStage(bldr);\n        stageOutput(bldr.toString());\n        return success;\n    }", "  public void setAsText(String text) {\n    throw new IllegalArgumentException(\"LibraryEditor: \"\n\t+ \"Library properties cannot be \" + \"expressed as text\");\n  }\n", "public static String dump(final ByteBuffer bytes){\n  bytes.rewind();\n  final int columns=16;\n  final StringBuilder builder=new StringBuilder();\n  int i=0;\n  while (bytes.hasRemaining()) {\n    if ((i % columns) != 0) {\n      builder.append(' ');\n    }\n else     if (i >= columns) {\n      builder.append(String.format(\"%n\"));\n    }\n    builder.append(String.format(\"%02x\",bytes.get()));\n    i++;\n  }\n  return builder.toString();\n}\n", "public String extractType(XAttribute attribute) {\n\t\tXAttribute attr = attribute.getAttributes().get(KEY_TYPE);\n\t\tif (attr == null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn ((XAttributeLiteral) attr).getValue();\n\t\t}\n\t}", "public void removeOKResponses() {\n\tfor (int i = responses.size() - 1; i >= 0; i--) {\n\t\tResponse response = (Response) responses.elementAt(i);\n\t\tif (response.isOK()) {\n\t\t\tresponses.removeElementAt(i);\n\t\t}\n\t}\n}\n", "public double getScore() {\n        verifyPropertyPresence(SCORE);\n        //noinspection unchecked\n        if (getCommandResult().get(SCORE) instanceof Long) {\n            return ((Long) getCommandResult().get(SCORE)).doubleValue();\n        }\n        return (double) getCommandResult().get(SCORE);\n    }", "protected Icon getSizingIcon(AbstractButton b) {\n        // NOTE: this is slightly different than BasicButtonUI, where it\n        // would just use getIcon, but this should be ok.\n        Icon icon = (b.isEnabled() || b.getDisabledIcon() == null) ? b.getIcon() : b.getDisabledIcon();\n\n        if (icon == null) {\n            icon = getDefaultIcon(b);\n        }\n\n        return icon;\n    }", "\tpublic boolean removeFromCategory(Category category){\n\t\tif (category == null){\n\t\t\treturn false;\n\t\t}\n\t\tif (!(this.getCategories().contains(category) && category.getCourses().contains(this))){\n\t\t\treturn false;\n\t\t}\n\t\tcategories.remove(category);\n\t\tcategory.getCourses().remove(this);\n\t\treturn true;\n\t}\n", "public LinkedList ( ) { head . next = head . previous = head ; }", "private Evaluator evaluatorFactory(Backend evaluator) throws HaskellException {\nswitch (evaluator) {\ncase GHCi:\n    return new GhciEvaluator();\ncase Clash:\n  return new ClashEvaluator();\ndefault :\nreturn new GhciEvaluator();\n}\n}\n", "\tpublic HashMap buildValues(Command command) throws CallCausedException {\n\t\tlogger.debug(\"building values...\");\n\t\tHashMap formData = super.buildValuesByReflection();\n\t\t\n\t\tformData.put(FORM_XBOATTRIBUTES, Factory.cumulativeBuildValues(this.getXBOAttributes()));\t\n\t\t\n\t\tformData.put(FORM_UID, this.getUid());\n\t\tlogger.debug(\"...done\");\n\t\treturn formData;\n\t}\n", "public String buildSelectDeleteFileMode(String htmlAttributes) {\n\n        List<String> options = new ArrayList<String>(2);\n        options.add(key(Messages.GUI_PREF_PRESERVE_SIBLINGS_0));\n        options.add(key(Messages.GUI_PREF_DELETE_SIBLINGS_0));\n        List<String> values = new ArrayList<String>(2);\n        values.add(String.valueOf(CmsResource.DELETE_PRESERVE_SIBLINGS));\n        values.add(String.valueOf(CmsResource.DELETE_REMOVE_SIBLINGS));\n        int selectedIndex = values.indexOf(getParamTabDiDeleteFileMode());\n        return buildSelect(htmlAttributes, options, values, selectedIndex);\n    }", "public static NameMatcher < TriggerKey > triggerNameContains ( String compareTo ) { return NameMatcher . nameContains ( compareTo ) ; }", "\tpublic void ejbPostCreate(Integer courseId, Integer navigationInt, Manifest manifestVO, String title, Integer id) throws NamingException, ServiceLocatorException, CreateException, FinderException, EJBException {\n\t\tsetOrganizations(manifestVO.organizations);\n\t\tsetResources(manifestVO.resources);\n\t\tif (manifestVO.MetaData != null)\n\t\t\tsetMetaData(manifestVO.MetaData);\n\t\t// load Course\n\t\tCourseEntityLocal course = HomeInterfaceFinder.getCourseHome().findByPrimaryKey(courseId);\n\t\t// set Course\n\t\tsetCourse(course);\n\t}\n", "Matcher(Pattern parent,CharSequence text){\n  this.parentPattern=parent;\n  this.text=text;\n  int parentGroupCount=Math.max(parent.capturingGroupCount,10);\n  groups=new int[parentGroupCount * 2];\n  locals=new int[parent.localCount];\n  reset();\n}\n", "public static Object objectFromByteBuffer ( byte [ ] buffer ) throws IOException , ClassNotFoundException { if ( buffer == null ) return null ; OptimizedByteArrayInputStream inStream = new OptimizedByteArrayInputStream ( buffer ) ; ObjectInputStream in = ", "public double distance(Vector2D v){\n  double delx=v.x - x;\n  double dely=v.y - y;\n  return Math.sqrt(delx * delx + dely * dely);\n}\n", "public BasicBlock ( final IBlockNode block , final Function parentFunction ) { m_block = Preconditions . checkNotNull ( block , STR_ ) ; m_parentFunction = Preconditions . checkNotNull ( parentFunction , STR_ ) ; for ( final INaviInstruction instruction :", "private ByteBuffer decodeStream ( ) throws IOException { ByteBuffer outStream = null ; if ( decodedStream != null ) { outStream = ( ByteBuffer ) decodedStream . get ( ) ; } if ( outStream == null ) { stream . rewind ( ) ; outStream = PDFDecoder . decodeStream ( this , stream ) ; decodedStream = new SoftReference ( outStream ) ; } return outStream ; }", "private double calculateSingleTraitLikelihood(ContrastedTraitNode contrastNode){\n  SimpleTree contrastTree=new SimpleTree(contrastNode);\n  double s2=0.0;\n  double sssContrast=0.0;\n  double slogCV=0.0;\n  for (int i=0; i < contrastTree.getInternalNodeCount(); i++) {\n    ContrastedTraitNode ctNode=(ContrastedTraitNode)contrastTree.getInternalNode(i);\n    double contrast=ctNode.getTraitContrasts()[0];\n    double cv=ctNode.getContrastVariance();\n    sssContrast+=(contrast * contrast) / cv;\n    slogCV+=Math.log(cv);\n    if (ctNode.isRoot()) {\n      slogCV+=Math.log(ctNode.getNodeVariance());\n    }\n  }\n  double tl=0.0;\n  for (int i=0; i < contrastTree.getNodeCount(); i++) {\n    NodeRef node=contrastTree.getNode(i);\n    if (!contrastTree.isRoot(node)) {\n      tl+=contrastTree.getBranchLength(node);\n    }\n  }\n  s2=sssContrast / contrastTree.getInternalNodeCount();\n  int n=contrastTree.getInternalNodeCount() + 1;\n  double logL=n * Math.log(2.0 * Math.PI * s2);\n  logL+=slogCV;\n  logL+=sssContrast / s2;\n  logL=-logL / 2.0;\n  return logL;\n}\n", "\tpublic T remove(String resource) {\n\t\tT res = detach(resource);\n\t\t\n\t\t/*\n\t\t * Destroy it\n\t\t */\n\t\tif ( res != null ) {\n\t\t\tres.destroy();\n\t\t}\n\t\t\n\t\treturn (res);\n\t}\n", "public int size(){\n  return isNull() ? 0 : this.end - this.start + 1;\n}\n", "public void copyFrom(Properties src,boolean shouldResetDefaults){\n  Enumeration keys=src.keys();\n  while (keys.hasMoreElements()) {\n    String key=(String)keys.nextElement();\n    if (!isLegalPropertyKey(key))     throw new IllegalArgumentException(XSLMessages.createMessage(XSLTErrorResources.ER_OUTPUT_PROPERTY_NOT_RECOGNIZED,new Object[]{key}));\n    Object oldValue=m_properties.get(key);\n    if (null == oldValue) {\n      String val=(String)src.get(key);\n      if (shouldResetDefaults && key.equals(OutputKeys.METHOD)) {\n        setMethodDefaults(val);\n      }\n      m_properties.put(key,val);\n    }\n else     if (key.equals(OutputKeys.CDATA_SECTION_ELEMENTS)) {\n      m_properties.put(key,(String)oldValue + \" \" + (String)src.get(key));\n    }\n  }\n}\n", "\tpublic void draw(ArrayList<Line> lines){\n\t\tfor(Line line:lines){\n\t\t\tgraphics.drawLine((int)(line.getStartP().x), (int)(line.getStartP().y), (int)(line.getEndP().x), (int)(line.getEndP().y));\n\t\t}\n\t}\n", "\tpublic int read8(int address) {\n\t\treturn readMap[address].read(address);\n\t}\n", "public static final String writeTime(final double seconds,final String timeformat,final char separator){\n  if (TIMEFORMAT_SSSS.equals(timeformat)) {\n    return Long.toString((long)seconds);\n  }\n  if (seconds < 0) {\n    if (seconds == UNDEFINED_TIME)     return \"undefined\";\n    return \"-\" + writeTime(Math.abs(seconds),timeformat,separator);\n  }\n  double s=seconds;\n  long h=(long)(s / 3600);\n  s=s % 3600;\n  int m=(int)(s / 60);\n  s=s % 60;\n  StringBuilder str=new StringBuilder(10);\n  if (h < timeElements.length) {\n    str.append(timeElements[(int)h]);\n  }\n else {\n    str.append(Long.toString(h));\n  }\n  str.append(separator);\n  str.append(timeElements[m]);\n  if (TIMEFORMAT_HHMM.equals(timeformat)) {\n    return str.toString();\n  }\n  if (TIMEFORMAT_HHMMSS.equals(timeformat)) {\n    str.append(separator);\n    str.append(timeElements[(int)s]);\n    return str.toString();\n  }\n  if (TIMEFORMAT_HHMMSSDOTSS.equals(timeformat)) {\n    str.append(separator);\n    if (s < 10.) {\n      str.append(\"0\");\n    }\n    str.append(s);\n    return str.toString();\n  }\n  throw new IllegalArgumentException(\"The time format (\" + timeformat + \") is not known.\");\n}\n", "public Object[] elements(){\n  Object[] objects=new Object[_elementOrder.size()];\n  for (int i=0; i < _elementOrder.size(); i++) {\n    objects[i]=_elements.get(_elementOrder.get(i));\n  }\n  return objects;\n}\n", "@Override\n\tpublic List<CPDefinition> findAll(int start, int end) {\n\t\treturn findAll(start, end, null);\n\t}", "private void processMethods(final Object component, final Context context,\n            final ContextDestroyer contextDestroyer) {\n        Class<?> componentClass = component.getClass();\n        while (componentClass != null && !componentClass.equals(Objec", "static boolean isLoopStructure(Node n) {\n    switch (n.getToken()) {\n      case FOR:\n      case FOR_IN:\n      case FOR_OF:\n      case FOR_AWAIT_OF:\n      case DO:\n      case WHILE:\n        return true;\n      default:\n        return false;\n    }\n  }", "public boolean updateFileListing ( File configDir , boolean zipOnly ) { if ( resources . isEmpty ( ) ) return BOOL_ ; FileListing fl = new FileListing ( configDir ) ; if ( ! fl . load ( ) ) Log . warning ( STR_ ) ; if ( ! zipOnly ) { for ( Resource r : re", "public boolean isCached ( String uri ) { return mImageLoader . isCached ( uri , NUM_ , NUM_ ) ; }", "public void restoreComponentTreeStructure ( TreeStructure treeStructure , UIComponent component ) { Iterator kids = treeStructure . getChildren ( ) ; while ( kids . hasNext ( ) ) { TreeStructure kid = ( TreeStructure ) kids . next ( ) ; UIComponent child ", "\tprivate int getModifierCode(DeclarationElement de) {\n\t\tint modifier = de.getModifiers();\n\n\t\t// sort: public < default < protected < private\n\t\tif (Modifier.isPublic(modifier))\n\t\t\treturn 0;\n\t\tif (Modifier.isProtected(modifier))\n\t\t\treturn 2;\n\t\tif (Modifier.isPrivate(modifier))\n\t\t\treturn 3;\n\t\treturn 1;\n\t}\n", "    protected String getAttributePrefix() {\n        String value = null;\n        if (null == (value = getAttributePrefixBasic())) {\n            updateAttributePrefix();\n            return getAttributePrefix();\n        }\n        return value;\n    }\n", "    public boolean add(EnzymaticReactions er){\n        boolean changed = false;\n        if (er != null && er.size() > 0){\n            if (reactions == null)\n                reactions = new LinkedHashSet<VisibleReaction>(4);\n            changed = reactions.addAll(er.reactions);\n        }\n        return changed;\n    }\n", "private void followDecoratedComponent(JLayeredPane layeredPane) {\n        Point relativeLocationToOwner = anchorLink.getRelativeSlaveLocation(decoratedComponent.getWidth(),\n                decoratedComponent.getHeight(), getWidth(), getHeight());\n\n        updateDecorationPainterUnclippedBounds(layeredPane, relativeLocationToOwner);\n        updateDecorationPainterClippedBounds(layeredPane, relativeLocationToOwner);\n\n        // Repaint decoration\n        if (layeredPane != null) {\n            decorationPainter.revalidate();\n            decorationPainter.repaint();\n        }\n    }", "String regExpGroupName(String elementName) {\n        for (String regexp : sortedRegExpList) {\n            if (elementName.startsWith(regexp)) {\n                return regExpGroupMap.get(regexp);\n            }\n        }\n        return null;\n    }", "public final Hashtable initializeConstants ( ) { Vect consts = this . config . getConstants ( ) ; if ( consts == null ) { return new Hashtable ( ) ; } return this . makeConstantTable ( consts ) ; }", "public void push ( final float value ) { int bits = Float . floatToIntBits ( value ) ; if ( bits == NUM_ || bits == NUM_ || bits == NUM_ ) { mv . visitInsn ( Opcodes . FCONST_0 + ( int ) value ) ; } else { mv . visitLdcInsn ( value ) ; } }", "    public int getLastRow() {\n        int numbRows = getRowCount();\n        int lastRow = numbRows;\n\n        if (getPageSize() > 0) {\n            lastRow = getFirstRow() + getPageSize();\n            lastRow = Math.min(lastRow, numbRows);\n        }\n        return lastRow;\n    }\n", "    private void showPupUpMenu(MouseEvent e) {\n        TransBaseMap map=mainPane.getMap();\n        if (map!=null) {\n            setPopUpMenu(map);\n            if (popup!=null) popup.show(e.getComponent(), e.getX(), e.getY());\n        }\n    }\n", "public static boolean exportSupported(@NonNull String sparkMaster, @NonNull FileSystem fs) {\n        // Anything is supported with a local master. Regex matches 'local', 'local[DIGITS]' or 'local[*]'\n        if (sparkMaster.matches(\"^local(\\\\[(\\\\d+|\\\\*)])?$\")) {\n            return true;\n        }\n        // Clustered mode is supported as long as the file system is not a local one\n        return !fs.getUri().getScheme().equals(\"file\");\n    }", "@Override\n    public void merge(Resource annotation, Class<?> instanceClass, Member member) throws InjectionException\n    {\n        final boolean isTraceOn = TraceComponent.isAnyTracingEnabled();\n        if (isTraceOn && tc.isEntryEnabled())\n            Tr.entry(tc, \"merge : \" + ivMergeCompleted);\n\n        //  XML / Annotation merge rules from EJB 3.0 Core Contracts Spec section 16.2.3:\n        //\n        //  The following rules apply to how a deployment descriptor entry may override a Resource annotation:\n        //\n        //  - The relevant deployment descriptor entry is located based on the JNDI name used with the\n        //    annotation (either defaulted or provided explicitly).\n        //\n        //  - The type specified in the deployment descriptor must be assignable to the type of the field or\n        //    property or the type specified in the Resource annotation.\n        //\n        //  - The description, if specified, overrides the description element of the annotation.\n        //\n        //  - The injection target, if specified, must name exactly the annotated field or property method.\n        //\n        //  - The res-sharing-scope element, if specified, overrides the shareable element of the\n        //    annotation. In general, the Application Assembler or Deployer should never change the value\n        //    of this element, as doing so is likely to break the application.\n        //\n        //  - The res-auth element, if specified, overrides the authenticationType element of the\n        //     annotation. In general, the Application Assembler or Deployer should\n\n        // Load the XML metadata settings (ie. set during ctor time)\n        Resource currentAnnotation = this.getAnnotation();\n\n        // If this object was constructed with metadata from xml, then we are being asked to\n        // merge xml and annotations, following the EJB spec rules for xml overrides of annotations.\n        // However, if one merge has already been completed, we simply need to check the new annotation\n        // metadata passed in to assure it matches the previous merge result.\n        if ((currentAnnotation instanceof ResourceImpl) && (!ivMergeCompleted) && !isComplete())\n        {\n            // If Type was set from XML, and it is either the same class or a subclass of the annotation type field, then\n            // it overrides the annotation.  If the types mismatch between xml and an annotation throw an error. Otherwise,\n            // if there was no data from XML just use the class from the annotation.\n            if (((ResourceImpl) currentAnnotation).ivIsSetType)\n            {\n                // check that value from xml is a subclasss, if not throw an error\n                if (InjectionBinding.isClassesCompatible(annotation.type(), currentAnnotation.type())) {\n                    // do nothing - xml data overrides the annotation\n                }\n                else\n                {\n                    // Error - conflicting annotation type classes detected\n                    Tr.error(tc, \"CONFLICTING_XML_ANNOTATION_VALUES_CWNEN0053E\",\n                             ivComponent,\n                             ivModule,\n                             ivApplication,\n                             ivXMLType.type_element(),\n                             \"type\",\n                             ivXMLType,\n                             \"@Resource\",\n                             ivXMLType.name_element(),\n                             \"name\",\n                             getJndiName(),\n                             currentAnnotation.type().getName(),\n                             annotation.type().getName()); // d479669\n                    String exMsg = \"The \" + ivComponent + \" bean in the \" +\n                                   ivModule + \" module of the \" + ivApplication +\n                                   \" application has conflicting configuration data between\" +\n                                   \" the XML deployment descriptor and source code annotations.\" +\n                                   \" Conflicting \" + ivXMLType.type_element() + \" element values or \" +\n                                   \"type\" + \" attribute values exist for multiple \" + ivXMLType +\n                                   \" elements or \" + \"@Resource\" + \" annotations with the same \" +\n                                   ivXMLType.name_element() + \" element value or \" + \"name\" +\n                                   \" attribute value : \" + getJndiName() + \". The conflicting \" +\n                                   ivXMLType.type_element() + \" element values or \" + \"type\" +\n                                   \" attribute values are \" + currentAnnotation.type().getName() +\n                                   \" and \" + annotation.type().getName() + \".\"; // d479669\n                    throw new InjectionConfigurationException(exMsg);\n                }\n            }\n            else\n            {\n                // replace current type value, using the annotation data\n                ((ResourceImpl) currentAnnotation).ivType = annotation.type();\n                setInjectionClassType(annotation.type()); // d729308\n            }\n\n            // If Authentication value was set from XML then it overrides the  annotation.  Otherwise, use value from annotation.\n            if (((ResourceImpl) currentAnnotation).ivIsSetAuthenticationType)\n            {\n                // do nothing - XML overrides the annotation\n            }\n            else\n            {\n                ((ResourceImpl) currentAnnotation).ivAuthenticationType = annotation.authenticationType();\n            }\n\n            // If shareable value was set from XML then it overrides the annotation.   Otherwise, use value from annotation.\n            if (((ResourceImpl) currentAnnotation).ivIsSetShareable)\n            {\n                // do nothing - XML overrides the annotation\n            }\n            else\n            {\n                ((ResourceImpl) currentAnnotation).ivShareable = annotation.shareable();\n            }\n\n            // If Mapped Name value was set from XML then it overrides the annotation.  Otherwise, use value from annotation.\n            if (((ResourceImpl) currentAnnotation).ivIsSetMappedName)\n            {\n                // do nothing - XML overrides the annotation\n            }\n            else\n            {\n                ((ResourceImpl) currentAnnotation).ivMappedName = annotation.mappedName();\n            }\n\n            // If Description value was set from XML then it overrides the annotation.  Otherwise, use value from annotation.\n            if (((ResourceImpl) currentAnnotation).ivIsSetDescription)\n            {\n                // do nothing - XML overrides the annotation\n            }\n            else\n            {\n                ((ResourceImpl) currentAnnotation).ivDescription = annotation.description();\n            }\n\n            ivMergeCompleted = true;\n        }\n        else\n        {\n            // Otherwise, we need to validate that that two metdata sources have the exact same metadata.\n            // We may have one source that is from a previous merge with xml (ie. currentAnnotation is a ResourceImpl object),\n            // and the other source is from an annotation (ie. annotation is a simple Resource object).   Or, we may have a\n            // case where both the currentAnnotation and annotation objects are from annotations (ie. neither was xml).   In either\n            // case if the metadata does not match we log and throw a configuration error.\n\n            if (currentAnnotation instanceof ResourceImpl)\n            {\n                // Here we are checking a previous merge result (ie. one source was xml) against metadata from another annotation.\n                // Therefore, we only need to check for matches on fields where the xml has not already overridden the annotation value.\n                if ((!((ResourceImpl) currentAnnotation).ivIsSetType) &&\n                    (!(currentAnnotation.type().equals(annotation.type()))))\n                {\n                    // Error - conflicting resource type specified\n                    Tr.error(tc, \"CONFLICTING_XML_ANNOTATION_VALUES_CWNEN0053E\",\n                             ivComponent,\n                             ivModule,\n                             ivApplication,\n                             ivXMLType.type_element(),\n                             \"type\",\n                             ivXMLType,\n                             \"@Resource\",\n                             ivXMLType.name_element(),\n                             \"name\",\n                             getJndiName(),\n                             currentAnnotation.type().getName(),\n                             annotation.type().getName()); // d479669\n                    String exMsg = \"The \" + ivComponent + \" bean in the \" +\n                                   ivModule + \" module of the \" + ivApplication +\n                                   \" application has conflicting configuration data between\" +\n                                   \" the XML deployment descriptor and source code annotations.\" +\n                                   \" Conflicting \" + ivXMLType.type_element() + \" element values or \" +\n                                   \"type\" + \" attribute values exist for multiple \" + ivXMLType +\n                                   \" elements or \" + \"@Resource\" + \" annotations with the same \" +\n                                   ivXMLType.name_element() + \" element value or \" + \"name\" +\n                                   \" attribute value : \" + getJndiName() + \". The conflicting \" +\n                                   ivXMLType.type_element() + \" element values or \" + \"type\" +\n                                   \" attribute values are \" + currentAnnotation.type().getName() +\n                                   \" and \" + annotation.type().getName() + \".\"; // d479669\n                    throw new InjectionConfigurationException(exMsg);\n                }\n\n                if ((!((ResourceImpl) currentAnnotation).ivIsSetAuthenticationType) &&\n                    (!(currentAnnotation.authenticationType().equals(annotation.authenticationType()))))\n                {\n                    // Error - conflicting Authentication Type specified\n                    Tr.error(tc, \"CONFLICTING_XML_ANNOTATION_VALUES_CWNEN0053E\",\n                             ivComponent,\n                             ivModule,\n                             ivApplication,\n                             \"res-auth\",\n                             \"authenticationType\",\n                             ivXMLType,\n                             \"@Resource\",\n                             ivXMLType.name_element(),\n                             \"name\",\n                             getJndiName(),\n                             currentAnnotation.authenticationType(),\n                             annotation.authenticationType()); // d479669\n                    String exMsg = \"The \" + ivComponent + \" bean in the \" +\n                                   ivModule + \" module of the \" + ivApplication +\n                                   \" application has conflicting configuration data between\" +\n                                   \" the XML deployment descriptor and source code annotations.\" +\n                                   \" Conflicting \" + \"res-auth\" + \" element values or \" +\n                                   \"authenticationType\" + \" attribute values exist for multiple \" +\n                                   ivXMLType + \" elements or \" + \"@Resource\" +\n                                   \" annotations with the same \" + ivXMLType.name_element() +\n                                   \" element value or \" + \"name\" + \" attribute value : \" +\n                                   getJndiName() + \". The conflicting \" + \"res-auth\" +\n                                   \" element values or \" + \"authenticationType\" +\n                                   \" attribute values are \" + currentAnnotation.authenticationType() +\n                                   \" and \" + annotation.authenticationType() + \".\"; // d479669\n                    throw new InjectionConfigurationException(exMsg);\n                }\n\n                if ((!((ResourceImpl) currentAnnotation).ivIsSetShareable) &&\n                    (currentAnnotation.shareable() != annotation.shareable()))\n                {\n                    // Error - conflicting shareable resource specified\n                    Tr.error(tc, \"CONFLICTING_XML_ANNOTATION_VALUES_CWNEN0053E\",\n                             ivComponent,\n                             ivModule,\n                             ivApplication,\n                             \"res-sharing-scope\",\n                             \"shareable\",\n                             ivXMLType,\n                             \"@Resource\",\n                             ivXMLType.name_element(),\n                             \"name\",\n                             getJndiName(),\n                             currentAnnotation.shareable(),\n                             annotation.shareable()); // d479669\n                    String exMsg = \"The \" + ivComponent + \" bean in the \" +\n                                   ivModule + \" module of the \" + ivApplication +\n                                   \" application has conflicting configuration data between\" +\n                                   \" the XML deployment descriptor and source code annotations.\" +\n                                   \" Conflicting \" + \"res-sharing-scope\" + \" element values or \" +\n                                   \"shareable\" + \" attribute values exist for multiple \" +\n                                   ivXMLType + \" elements or \" + \"@Resource\" +\n                                   \" annotations with the same \" + ivXMLType.name_element() +\n                                   \" element value or \" + \"name\" + \" attribute value : \" +\n                                   getJndiName() + \". The conflicting \" + \"res-sharing-scope\" +\n                                   \" element values or \" + \"shareable\" +\n                                   \" attribute values are \" + currentAnnotation.shareable() +\n                                   \" and \" + annotation.shareable() + \".\"; // d479669\n                    throw new InjectionConfigurationException(exMsg);\n                }\n\n                if ((!((ResourceImpl) currentAnnotation).ivIsSetMappedName) &&\n                    (!(currentAnnotation.mappedName().equals(annotation.mappedName()))))\n                {\n                    // Error - conflicting mapped name specified\n                    Tr.error(tc, \"CONFLICTING_XML_ANNOTATION_VALUES_CWNEN0053E\",\n                             ivComponent,\n                             ivModule,\n                             ivApplication,\n                             \"mapped-name\",\n                             \"mappedName\",\n                             ivXMLType,\n                             \"@Resource\",\n                             ivXMLType.name_element(),\n                             \"name\",\n                             getJndiName(),\n                             currentAnnotation.mappedName(),\n                             annotation.mappedName()); // d479669\n                    String exMsg = \"The \" + ivComponent + \" bean in the \" +\n                                   ivModule + \" module of the \" + ivApplication +\n                                   \" application has conflicting configuration data between\" +\n                                   \" the XML deployment descriptor and source code annotations.\" +\n                                   \" Conflicting \" + \"mapped-name\" + \" element values or \" +\n                                   \"mappedName\" + \" attribute values exist for multiple \" +\n                                   ivXMLType + \" elements or \" + \"@Resource\" +\n                                   \" annotations with the same \" + ivXMLType.name_element() +\n                                   \" element value or \" + \"name\" + \" attribute value : \" +\n                                   getJndiName() + \". The conflicting \" + \"mapped-name\" +\n                                   \" element values or \" + \"mappedName\" +\n                                   \" attribute values are \" + currentAnnotation.mappedName() +\n                                   \" and \" + annotation.mappedName() + \".\"; // d479669\n                    throw new InjectionConfigurationException(exMsg);\n                }\n            }\n            else\n            {\n                // In this case both metadata sources are from annotations and there was not a previous merge of xml with an annotation.\n                // Therefore, we simply need to compare the two annotation sources to make sure they do not conflict.\n                if (!(currentAnnotation.type().equals(annotation.type())))\n                {\n                    // Error - conflicting resource type specified\n                    Tr.error(tc, \"CONFLICTING_ANNOTATION_VALUES_CWNEN0054E\",\n                             ivComponent,\n                             ivModule,\n                             ivApplication,\n                             \"type\",\n                             \"@Resource\",\n                             \"name\",\n                             getJndiName(),\n                             currentAnnotation.type().getName(),\n                             annotation.type().getName()); // d479669\n                    String exMsg = \"The \" + ivComponent + \" bean in the \" +\n                                   ivModule + \" module of the \" + ivApplication +\n                                   \" application has conflicting configuration data\" +\n                                   \" in source code annotations. Conflicting \" +\n                                   \"type\" + \" attribute values exist for multiple \" +\n                                   \"@Resource\" + \" annotations with the same \" +\n                                   \"name\" + \" attribute value : \" + getJndiName() +\n                                   \". The conflicting \" + \"type\" +\n                                   \" attribute values are \" + currentAnnotation.type().getName() +\n                                   \" and \" + annotation.type().getName() + \".\"; // d479669\n                    throw new InjectionConfigurationException(exMsg);\n                }\n\n                if (!(currentAnnotation.authenticationType().equals(annotation.authenticationType())))\n                {\n                    // Error - conflicting authentication type specified\n                    Tr.error(tc, \"CONFLICTING_ANNOTATION_VALUES_CWNEN0054E\",\n                             ivComponent,\n                             ivModule,\n                             ivApplication,\n                             \"authenticationType\",\n                             \"@Resource\",\n                             \"name\",\n                             getJndiName(),\n                             currentAnnotation.authenticationType(),\n                             annotation.authenticationType()); // d479669\n                    String exMsg = \"The \" + ivComponent + \" bean in the \" +\n                                   ivModule + \" module of the \" + ivApplication +\n                                   \" application has conflicting configuration data\" +\n                                   \" in source code annotations. Conflicting \" +\n                                   \"authenticationType\" + \" attribute values exist for multiple \" +\n                                   \"@Resource\" + \" annotations with the same \" +\n                                   \"name\" + \" attribute value : \" + getJndiName() +\n                                   \". The conflicting \" + \"authenticationType\" +\n                                   \" attribute values are \" + currentAnnotation.authenticationType() +\n                                   \" and \" + annotation.authenticationType() + \".\"; // d479669\n                    throw new InjectionConfigurationException(exMsg);\n                }\n\n                if (currentAnnotation.shareable() != annotation.shareable())\n                {\n                    // Error - conflicting shareable resource specified\n                    Tr.error(tc, \"CONFLICTING_ANNOTATION_VALUES_CWNEN0054E\",\n                             ivComponent,\n                             ivModule,\n                             ivApplication,\n                             \"shareable\",\n                             \"@Resource\",\n                             \"name\",\n                             getJndiName(),\n                             currentAnnotation.shareable(),\n                             annotation.shareable()); // d479669\n                    String exMsg = \"The \" + ivComponent + \" bean in the \" +\n                                   ivModule + \" module of the \" + ivApplication +\n                                   \" application has conflicting configuration data\" +\n                                   \" in source code annotations. Conflicting \" +\n                                   \"shareable\" + \" attribute values exist for multiple \" +\n                                   \"@Resource\" + \" annotations with the same \" +\n                                   \"name\" + \" attribute value : \" + getJndiName() +\n                                   \". The conflicting \" + \"shareable\" +\n                                   \" attribute values are \" + currentAnnotation.shareable() +\n                                   \" and \" + annotation.shareable() + \".\"; // d479669\n                    throw new InjectionConfigurationException(exMsg);\n                }\n\n                if (!(currentAnnotation.mappedName().equals(annotation.mappedName())))\n                {\n                    // Error - conflicting mapped name specified\n                    Tr.error(tc, \"CONFLICTING_ANNOTATION_VALUES_CWNEN0054E\",\n                             ivComponent,\n                             ivModule,\n                             ivApplication,\n                             \"mappedName\",\n                             \"@Resource\",\n                             \"name\",\n                             getJndiName(),\n                             currentAnnotation.mappedName(),\n                             annotation.mappedName()); // d479669\n                    String exMsg = \"The \" + ivComponent + \" bean in the \" +\n                                   ivModule + \" module of the \" + ivApplication +\n                                   \" application has conflicting configuration data\" +\n                                   \" in source code annotations. Conflicting \" +\n                                   \"mappedName\" + \" attribute values exist for multiple \" +\n                                   \"@Resource\" + \" annotations with the same \" +\n                                   \"name\" + \" attribute value : \" + getJndiName() +\n                                   \". The conflicting \" + \"mappedName\" +\n                                   \" attribute values are \" + currentAnnotation.mappedName() +\n                                   \" and \" + annotation.mappedName() + \".\"; // d479669\n                    throw new InjectionConfigurationException(exMsg);\n                }\n            }\n        }\n\n        // If \"lookup\" has not been defined in XML, then use the value from\n        // annotations.  However, if there are multiple annotations with the\n        // same name, then the values must match.                     F743-21028.4\n        // However, ignore lookup from the annotation if an env-entry-value\n        // has been specified in XML.                                 F743-22218.3\n        if (!ivLookupInXml && ivEnvValue == null)\n        {\n            String lookup = getResourceLookup(annotation); // F743-16274.1\n\n            // An empty string is the default and not considered a specified value.\n            if (lookup != null && !(lookup.equals(\"\")))\n            {\n                if (!isComplete() && (ivLookup == null || ivLookup.equals(\"\")))\n                {\n                    ivLookup = lookup;\n                }\n                else\n                {\n                    if (!(lookup.equals(ivLookup)))\n                    {\n                        // Error - conflicting lookup values between annotations\n                        Tr.error(tc, \"CONFLICTING_ANNOTATION_VALUES_CWNEN0054E\",\n                                 ivComponent,\n                                 ivModule,\n                                 ivApplication,\n                                 \"lookup\",\n                                 \"@Resource\",\n                                 \"name\",\n                                 getJndiName(),\n                                 ivLookup,\n                                 lookup);\n                        String exMsg = \"The \" + ivComponent + \" bean in the \" +\n                                       ivModule + \" module of the \" + ivApplication +\n                                       \" application has conflicting configuration data\" +\n                                       \" in source code annotations. Conflicting \" +\n                                       \"lookup\" + \" attribute values exist for multiple \" +\n                                       \"@Resource\" + \" annotations with the same \" +\n                                       \"name\" + \" attribute value : \" + getJndiName() +\n                                       \". The conflicting \" + \"lookup\" +\n                                       \" attribute values are \" + ivLookup +\n                                       \" and \" + lookup + \".\";\n                        throw new InjectionConfigurationException(exMsg);\n                    }\n                }\n            }\n        }\n\n        // On exit trace the merged configuration data that is contained in this object\n        if (isTraceOn && tc.isEntryEnabled())\n            Tr.exit(tc, \"merge\", this);\n    }", "public Double getFileStoreMetric(String fileStoreNameName, ID metricToCollect) {\n\n        Map<String, OSFileStore> cache = getFileStores();\n        OSFileStore fileStore = cache.get(fileStoreNameName);\n        if (fileStore == null) {\n            return null;\n        }\n\n        if (PlatformMetricType.FILE_STORE_TOTAL_SPACE.getMetricTypeId().equals(metricToCollect)) {\n            return Double.valueOf(fileStore.getTotalSpace());\n        } else if (PlatformMetricType.FILE_STORE_USABLE_SPACE.getMetricTypeId().equals(metricToCollect)) {\n            return Double.valueOf(fileStore.getUsableSpace());\n        } else {\n            throw new UnsupportedOperationException(\"Invalid file store metric to collect: \" + metricToCollect);\n        }\n    }", "@Override public double valueToAngle(double value){\n  double range=this.upperBound - this.lowerBound;\n  double unit=this.extent / range;\n  return this.startAngle + unit * (value - this.lowerBound);\n}", "public static String trimTrailingCharacter(String str,char trailingCharacter){\n  if (!hasLength(str)) {\n    return str;\n  }\n  StringBuilder sb=new StringBuilder(str);\n  while (sb.length() > 0 && sb.charAt(sb.length() - 1) == trailingCharacter) {\n    sb.deleteCharAt(sb.length() - 1);\n  }\n  return sb.toString();\n}\n", "    public void init() {\n        hostname = Utils.getHostname();\n        ipaddr = Utils.getIpAddr();\n    }\n", "public void removeListener(AnimatorListener listener){\n  if (mListeners == null) {\n    return;\n  }\n  mListeners.remove(listener);\n  if (mListeners.size() == 0) {\n    mListeners=null;\n  }\n}\n", "private void observe ( Future < ? > future ) { Observable observable = new Observable ( future , timeout ) ; queue . add ( observable ) ; }", "public AtomicTypePanel ( final Component parent , final TypeManager typeManager , final BaseType existingType ) { super ( parent , typeManager , existingType ) ; createControls ( ) ; populateControls ( ) ; }", "public TimeZoneGenericNames setFormatPattern(Pattern patType, String patStr) {\n        if (isFrozen()) {\n            throw new UnsupportedOperationException(\"Attempt to modify frozen object\");\n        }\n\n        // Changing pattern will invalidates cached names\n        if (!_genericLocationNamesMap.isEmpty()) {\n            _genericLocationNamesMap = new ConcurrentHashMap<String, String>();\n        }\n        if (!_genericPartialLocationNamesMap.isEmpty()) {\n            _genericPartialLocationNamesMap = new ConcurrentHashMap<String, String>();\n        }\n        _gnamesTrie = null;\n        _gnamesTrieFullyLoaded = false;\n\n        if (_patternFormatters == null) {\n            _patternFormatters = new MessageFormat[Pattern.values().length];\n        }\n        _patternFormatters[patType.ordinal()] = new MessageFormat(patStr);\n        return this;\n    }", "private static KeePassFile createEmptyDatabase ( ) throws Exception { InputStream inputStream = SimpleDatabase . class . getClassLoader ( ) . getResourceAsStream ( STR_ ) ; return getSerializer ( ) . read ( KeePassFile . class , inputStream ) ; }", "private ImmutableSet<CassandraJmxCompactionClient> createCompactionClients(CassandraJmxCompactionConfig jmxConfig){\n  Set<CassandraJmxCompactionClient> clients=Sets.newHashSet();\n  Set<InetSocketAddress> servers=config.servers();\n  int jmxPort=jmxConfig.port();\n  for (  InetSocketAddress addr : servers) {\n    CassandraJmxCompactionClient client=createCompactionClient(addr.getHostString(),jmxPort,jmxConfig.username(),jmxConfig.password());\n    clients.add(client);\n  }\n  return ImmutableSet.copyOf(clients);\n}\n", "public boolean isAllSitesStable(){\n  try {\n    verifyIPsecOpAllowableWithinDR();\n    return true;\n  }\n catch (  Exception e) {\n    return false;\n  }\n}\n", "private static void Starting ( String name ) { if ( Parameters . Debug ) { start = Debug . now ( ) ; ToolIO . out . println ( STR_ + name ) ; } }", "public static boolean haveAccess ( int modifiers , Class < ? > target , Class < ? > caller ) { if ( Modifier . isPrivate ( modifiers ) ) { if ( ! caller . equals ( target ) ) return BOOL_ ; } else if ( Modifier . isProtected ( modifiers ) ) { if ( ! getPa", "public ServiceFuture<PrivateZoneInner> beginUpdateAsync(String resourceGroupName, String privateZoneName, PrivateZoneInner parameters, String ifMatch, final ServiceCallback<PrivateZoneInner> serviceCallback) {\n        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, privateZoneName, parameters, ifMatch), serviceCallback);\n    }", "private void bind() {\n    upcomingManeuverView = findViewById(R.id.maneuverView);\n    upcomingDistanceText = findViewById(R.id.stepDistanceText);\n    upcomingPrimaryText = findViewById(R.id.stepPrimaryText);\n    upcomingSecondaryText = findViewById(R.id.stepSecondaryText);\n    subManeuverView = findViewById(R.id.subManeuverView);\n    subStepText = findViewById(R.id.subStepText);\n    alertView = findViewById(R.id.alertView);\n    rerouteLayout = findViewById(R.id.rerouteLayout);\n    turnLaneLayout = findViewById(R.id.turnLaneLayout);\n    subStepLayout = findViewById(R.id.subStepLayout);\n    rvTurnLanes = findViewById(R.id.rvTurnLanes);\n    instructionLayout = findViewById(R.id.instructionLayout);\n    instructionLayoutText = findViewById(R.id.instructionLayoutText);\n    instructionListLayout = findViewById(R.id.instructionListLayout);\n    rvInstructions = findViewById(R.id.rvInstructions);\n    soundButton = findViewById(R.id.soundLayout);\n    feedbackButton = findViewById(R.id.feedbackLayout);\n  }", "private void findHostname() {\n    String startupInfo = Environment.runCommand(\n        \"grep --max-count=1 STARTUP_MSG:\\\\s*host \" + file.getName()).toString();\n    Pattern pattern = Pattern.compile(\"\\\\s+(\\\\w+/.+)\\\\s+\");\n    Matcher matcher = pattern.matcher(startupInfo);\n    if (matcher.find(0)) {\n      hostname = matcher.group(1).split(\"/\")[0];\n      ips = new String[1];\n      ips[0] = matcher.group(1).split(\"/\")[1];\n    }\n  }", "public ImmutableSet < BaseType > deleteType ( final BaseType baseType ) { Preconditions . checkNotNull ( baseType , STR_ ) ; final Node containedTypeNode = containedRelationMap . get ( baseType ) ; Preconditions . checkNotNull ( containedTypeNode , STR_ )", "public MyEntitiesValidationReport addEntity(String entityTypeId, boolean importable) {\n    sheetsImportable.put(entityTypeId, importable);\n    valid = valid && importable;\n    if (importable) {\n      fieldsImportable.put(entityTypeId, new ArrayList<>());\n      fieldsUnknown.put(entityTypeId, new ArrayList<>());\n      fieldsRequired.put(entityTypeId, new ArrayList<>());\n      fieldsAvailable.put(entityTypeId, new ArrayList<>());\n      importOrder.add(entityTypeId);\n    }\n    return this;\n  }", "public void deleteHistoricTaskInstancesByProcessInstanceIds(List<String> processInstanceIds, boolean deleteVariableInstances) {\n\n    CommandContext commandContext = Context.getCommandContext();\n\n    if (deleteVariableInstances) {\n      getHistoricVariableInstanceManager().deleteHistoricVariableInstancesByTaskProcessInstanceIds(processInstanceIds);\n    }\n\n    getHistoricDetailManager()\n        .deleteHistoricDetailsByTaskProcessInstanceIds(processInstanceIds);\n\n    commandContext\n        .getCommentManager()\n        .deleteCommentsByTaskProcessInstanceIds(processInstanceIds);\n\n    getAttachmentManager()\n        .deleteAttachmentsByTaskProcessInstanceIds(processInstanceIds);\n\n    getHistoricIdentityLinkManager()\n        .deleteHistoricIdentityLinksLogByTaskProcessInstanceIds(processInstanceIds);\n\n    getDbEntityManager().deletePreserveOrder(HistoricTaskInstanceEntity.class, \"deleteHistoricTaskInstanceByProcessInstanceIds\", processInstanceIds);\n  }", "\tprotected boolean checkConstraint(Task task, GregorianCalendar begin, int duration){\n\t\tint count = task.getAssetCountAvailableAt(begin, duration, this.getAssetType());\n\t\tboolean min = this.getMinimum() <= count;\n\t\tboolean max = count <= this.getMaximum();\n\t\treturn (min) && (max);\n\t}\n", "public boolean isValidAttachmentPoint(DatapathId switchDPID,OFPort switchPort){\n  if (topology.isAttachmentPointPort(switchDPID,switchPort) == false)   return false;\n  if (suppressAPs.contains(new SwitchPort(switchDPID,switchPort)))   return false;\n  return true;\n}\n", "    private ODGFigure readFrameElement(IXMLElement elem) throws IOException {\n        if (DEBUG) System.out.println(\"ODGInputFormat.readFrameElement(\"+elem+\") not implemented.\");\n        return null;\n    }\n", "public synchronized void initializeFunctionNodeComment ( final INaviFunctionNode functionNode , final List < IComment > comments ) { Preconditions . checkNotNull ( functionNode , STR_ ) ; initializeComment ( new FunctionNodeCommentingStrategy ( functionNo", "private void processAcrValuesBasedOnPrincipalWeightMap ( final List < Principal > principals ) { if ( principals . isEmpty ( ) ) { final AuthnContextClassRefPrincipal [ ] principalArray = this . authenticationPrincipalWeightMap . keySet ( ) . toArray ( ne", "public void transform(Result result) {\n    if (logger.isInfoEnabled())\n      logger.info(\"Transforming source into result\");\n    try {\n      if (content == null) {\n        throw new IllegalStateException(\"No source to transform\");\n      }\n\n      Transformer transformer = null;\n      if (this.transformer != null) {\n        transformer = getTransformer();\n      } else {\n        if (logger.isWarnEnabled())\n          logger.warn(\"No transformer, so using identity transform\");\n        transformer = TransformerFactory.newInstance().newTransformer();\n      }\n\n      transformer.transform(content, result);\n    } catch (TransformerException e) {\n      logger.error(\"Failed to transform source into result\",e);\n      throw new MarkLogicIOException(e);\n    }\n  }", "public List<AdministeredObjectType<InterceptorType<T>>> getAllAdministeredObject()\n   {\n      List<AdministeredObjectType<InterceptorType<T>>> list = new ArrayList<AdministeredObjectType<InterceptorType<T>>>();\n      List<Node> nodeList = childNode.get(\"administered-object\");\n      for(Node node: nodeList)\n      {\n         AdministeredObjectType<InterceptorType<T>>  type = new AdministeredObjectTypeImpl<InterceptorType<T>>(this, \"administered-object\", childNode, node);\n         list.add(type);\n      }\n      return list;\n   }", "public static URI changeProtocolAndPort(String protocol, int port, URI template) throws URISyntaxException {\n    return new URI(protocol, template.getUserInfo(), template.getHost(), port, template.getPath(), template.getQuery(), null);\n  }", "    public List constructors() {\n        return subst.substConstructorList(base.constructors());\n    }\n", "@SuppressWarnings(\"unchecked\")\n    E removeAt(int i) {\n        // assert i >= 0 && i < size;\n        modCount++;\n        int s = --size;\n        if (s == i) // removed last element\n            queue[i] = null;\n        else {\n            E moved = (E) queue[s];\n            queue[s] = null;\n            siftDown(i, moved);\n            if (queue[i] == moved) {\n                siftUp(i, moved);\n                if (queue[i] != moved)\n                    return moved;\n            }\n        }\n        return null;\n    }", "private WebSocketOutputStream openOutputStream ( Socket socket ) throws WebSocketException { try { return new WebSocketOutputStream ( new BufferedOutputStream ( socket . getOutputStream ( ) ) ) ; } catch ( IOException e ) { throw new WebSocketException ( ", "private static void prepareForSave ( SimpleGroup parent ) { for ( SimpleGroup group : parent . group ) { prepareForSave ( group ) ; } for ( SimpleEntry entry : parent . entry ) { for ( EntryClasses . StringProperty property : entry . string ) { boolean sh", "public boolean isPrivileged ( ) ;", "public boolean isDurableSubscriber ( ) { return ! StringsUtils . isEmpty ( m_durableSubscriptionName ) ; }", "private LayoutManager createLayout ( ) { SeaGlassContext context = getContext ( this ) ; LayoutManager lm = ( LayoutManager ) style . get ( context , STR_ ) ; context . dispose ( ) ; return ( lm != null ) ? lm : new SeaGlassTitlePaneLayout ( ) ; }", "private Attributes extractNamespaces(Attributes attrs) throws SAXException {\n  AttributesImpl attrsOnly;\n  String rawName;\n  int i;\n  int length;\n  if (attrs == null) {\n    return null;\n  }\n  length=attrs.getLength();\n  attrsOnly=new AttributesImpl(attrs);\n  for (i=length - 1; i >= 0; --i) {\n    rawName=attrsOnly.getQName(i);\n    if (rawName.startsWith(\"xmlns\")) {\n      if (rawName.length() == 5) {\n        startPrefixMapping(\"\",attrs.getValue(i));\n        attrsOnly.removeAttribute(i);\n      }\n else       if (rawName.charAt(5) == ':') {\n        startPrefixMapping(rawName.substring(6),attrs.getValue(i));\n        attrsOnly.removeAttribute(i);\n      }\n    }\n  }\n  return attrsOnly;\n}\n", "protected String stripPrefixIfPresent(String path) {\n    String stripedKey = CommonUtils.stripPrefixIfPresent(path,\n        PathUtils.normalizePath(getRootKey(), PATH_SEPARATOR));\n    if (!stripedKey.equals(path)) {\n      return stripedKey;\n    }\n    return CommonUtils.stripPrefixIfPresent(path, PATH_SEPARATOR);\n  }", "private void initList(){\n  mList=new ArrayList<>();\n  for (int i=0; i < names.length; i++) {\n    mList.add(new Item(images[i],names[i],textDescription));\n  }\n  mRecyclerView.setLayoutManager(new LinearLayoutManager(this));\n  myAdapterRecyclerView=new MyAdapterRecyclerView(mList);\n  mRecyclerView.setAdapter(myAdapterRecyclerView);\n  ItemTouchHelper.Callback callback=new MyItemTouchHelperCallback(this);\n  ItemTouchHelper touchHelper=new ItemTouchHelper(callback);\n  touchHelper.attachToRecyclerView(mRecyclerView);\n}\n", "public static long hash64(final String text){\n  final byte[] bytes=text.getBytes();\n  return hash64(bytes,bytes.length);\n}\n", "    private void displayQuestion (int currentQuestion) {\n        if (currentQuestion >= questions.size())\n\t\t\treturn;\n\t\t\n\t\tquestionLabel.setText (\"<html><p>\" + questions.get(currentQuestion)\n                + \"</p>\");\n        String answersText = \"<html><p>A: \";\n        answersText += answerAs.get(currentQuestion) + \"</p><p>B: \";\n        answersText += answerBs.get(currentQuestion) + \"</b></html>\";\n        choicesLabel.setText (answersText);\n    }\n", "public void unregisterSource(ProgressSource pi){\nsynchronized (progressSourceList) {\n    if (progressSourceList.contains(pi) == false)     return;\n    pi.close();\n    progressSourceList.remove(pi);\n  }\n  if (progressListenerList.size() > 0) {\n    ArrayList<ProgressListener> listeners=new ArrayList<ProgressListener>();\nsynchronized (progressListenerList) {\n      for (Iterator<ProgressListener> iter=progressListenerList.iterator(); iter.hasNext(); ) {\n        listeners.add(iter.next());\n      }\n    }\n    for (Iterator<ProgressListener> iter=listeners.iterator(); iter.hasNext(); ) {\n      ProgressListener pl=iter.next();\n      ProgressEvent pe=new ProgressEvent(pi,pi.getURL(),pi.getMethod(),pi.getContentType(),pi.getState(),pi.getProgress(),pi.getExpected());\n      pl.progressFinish(pe);\n    }\n  }\n}\n", "public RenderedImage createScaledRendering(int w,int h,RenderingHints hints){\n  double sx=(double)w / getWidth();\n  double sy=(double)h / getHeight();\n  if (Math.abs(sx / sy - 1.0) < 0.01) {\n    sx=sy;\n  }\n  AffineTransform usr2dev=AffineTransform.getScaleInstance(sx,sy);\n  RenderContext newRC=new RenderContext(usr2dev,hints);\n  return createRendering(newRC);\n}\n", "public < T > void bindInitializer ( Initializer < T > initializer , Class < T > cls ) { getEntityBinding ( cls ) . setInitializer ( initializer ) ; }", "protected abstract Map < Integer , FilterOperationDelegateInvoker > doGetInvokerLookup ( ) ;", "public Entity getEntities(int i) {\n    if (Document_Type.featOkTst && ((Document_Type)jcasType).casFeat_entities == null)\n      jcasType.jcas.throwFeatMissing(\"entities\", \"de.julielab.jules.types.ace.Document\");\n    jcasType.jcas.checkArrayBounds(jcasType.ll_cas.ll_getRefValue(addr, ((Document_Type)jcasType).casFeatCode_entities), i);\n    return (Entity)(jcasType.ll_cas.ll_getFSForRef(jcasType.ll_cas.ll_getRefArrayValue(jcasType.ll_cas.ll_getRefValue(addr, ((Document_Type)jcasType).casFeatCode_entities), i)));}", "public boolean start() {\n        Intent emailIntent = build();\n        try {\n            startActivity(emailIntent);\n        } catch (ActivityNotFoundException e) {\n            return false;\n        }\n\n        return true;\n    }", "public CSelectionCriteriumPanel ( final CSelectionCriterium criterium ) { super ( new BorderLayout ( ) ) ; m_criterium = criterium ; selectionStateBox . addActionListener ( selectionStateBoxListener ) ; initPanel ( ) ; }", "      public void mouseReleased(MouseEvent evt) { \n         calculatePercentage(evt);\n      } // of mouseReleased\n", "\tprotected void createImageDescriptor(String id, URL baseURL) {\n\t\tURL url = null;\n\t\ttry {\n\t\t\turl = new URL(baseURL, ICON_PATH + id);\n\t\t} catch (MalformedURLException e) {\n\t\t}\n\t\tImageDescriptor desc = ImageDescriptor.createFromURL(url);\n\t\timageDescriptors.put(id, desc);\n\t}\n", "private String parseFormatDescription(final String pattern,final ParsePosition pos){\n  final int start=pos.getIndex();\n  seekNonWs(pattern,pos);\n  final int text=pos.getIndex();\n  int depth=1;\n  for (; pos.getIndex() < pattern.length(); next(pos)) {\nswitch (pattern.charAt(pos.getIndex())) {\ncase START_FE:\n      depth++;\n    break;\ncase END_FE:\n  depth--;\nif (depth == 0) {\n  return pattern.substring(text,pos.getIndex());\n}\nbreak;\ncase QUOTE:\ngetQuotedString(pattern,pos);\nbreak;\ndefault :\nbreak;\n}\n}\nthrow new IllegalArgumentException(\"Unterminated format element at position \" + start);\n}\n", "private String constructISCSIQuery(String systemId,String hsdId,List<String> scsiNameList,String model){\n  Map<String,Object> attributeMap=new HashMap<String,Object>();\n  StorageArray array=new StorageArray(systemId);\n  Add addOp=new Add(HDSConstants.ISCSI_NAME_FOR_HSD_TARGET);\n  attributeMap.put(HDSConstants.STORAGEARRAY,array);\n  attributeMap.put(HDSConstants.ADD,addOp);\n  attributeMap.put(HDSConstants.MODEL,model);\n  HostStorageDomain hsd=new HostStorageDomain(hsdId);\n  attributeMap.put(HDSConstants.HOST_STORAGE_DOMAIN,hsd);\n  List<ISCSIName> iSCSIObjList=new ArrayList<ISCSIName>();\n  if (null != scsiNameList && !scsiNameList.isEmpty()) {\n    for (    String iScsiName : scsiNameList) {\n      ISCSIName iSCSIName=new ISCSIName(iScsiName,null);\n      iSCSIObjList.add(iSCSIName);\n    }\n  }\n  attributeMap.put(HDSConstants.ISCSINAME_LIST,iSCSIObjList);\n  String addISCSINamesToHSDQuery=InputXMLGenerationClient.getInputXMLString(HDSConstants.ADD_ISCSI_NAME_TO_HSD_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);\n  return addISCSINamesToHSDQuery;\n}\n", "protected double shorter(double[] rawTarget,double min){\n  double minsq=min * min;\n  double maxV=minsq;\n  for (int i=0; i < this.max; i++) {\n    double d=rawTarget[i] - cached[i];\n    if ((maxV-=d * d) < 0) {\n      return -1;\n    }\n  }\n  return Math.sqrt(minsq - maxV);\n}\n", "protected void deepMarkSizeInvalid() {\n\t\tlog.fine(\"start\");\n\t    markSizeInvalid();\n\t    for(int counter = getChildCount() - 1; counter >= 0; counter--)\n\t\t((TreeStateNode)getChildAt(counter)).deepMarkSizeInvalid();\n\t}", "private void endFormals ( ) { if ( hasFormals ) { hasFormals = BOOL_ ; buf . append ( STR_ ) ; } }", "\tpublic Record copy() {\n\t\tRecord copyRecord = new Record(dataObjectClass);\n\t\tSet<String> propertySet = columnMap.keySet();\n\t\tfor (String propertyName : propertySet) {\n\t\t\tRecordValue value = columnMap.get(propertyName);\n\t\t\tcopyRecord.columnMap.put(propertyName, value.copy());\n\t\t\tif (value.getKeySequence() > 0) {\n\t\t\t\tcopyRecord.keyMap.put(value.getKeySequence(), propertyName);\n\t\t\t}\n\t\t}\n\t\treturn copyRecord;\n\t}\n", "public static boolean hasMnemonic(String caption){\n  return (caption.indexOf(MNEMONIC_INDICATOR) > -1);\n}\n", "void afterSpaceModeChange ( SpaceMode newMode ) throws RemoteException ;", "private void fireObjectRemoved(Binding oldBd,long changeID){\n  if (namingListeners == null || namingListeners.size() == 0)   return;\n  NamingEvent e=new NamingEvent(eventSrc,NamingEvent.OBJECT_REMOVED,null,oldBd,new Long(changeID));\n  support.queueEvent(e,namingListeners);\n}\n", "    public void initialize(final byte[] encodedBinder) throws PromotionException {\n        backingSignedMessage = null;\n        final MessageContainerParser parser = new MessageContainerParser();\n        MessageContainer message;\n        try {\n            message = parser.parse(encodedBinder);\n        } catch (BadGGEPBlockException ex) {\n            throw new PromotionException(\"GGEP block exception during parsing.\", ex);\n        }\n        if (!(message instanceof SignedMessageContainer))\n            throw new PromotionException(\"Encoded message is not signed.\");\n        initialize((SignedMessageContainer) message);\n    }\n", "@VisibleForTesting\n  String getOverridenHost() {\n    URI uri = GrpcUtil.authorityToUri(defaultAuthority);\n    if (uri.getHost() != null) {\n      return uri.getHost();\n    }\n\n    return defaultAuthority;\n  }", "private void readStatus(boolean emptyForMissing, final Path statusFile) {\n    this.status = null;\n    if (Files.exists(statusFile)) {\n      // try some number of times if dsMsg is null\n      for (int i = 1; i <= 3; i++) {\n        this.status = Status.spinRead(baseName, statusFile);\n        if (this.status.dsMsg != null) break;\n      }\n    }\n    if (this.status == null && emptyForMissing) {\n      this.status = Status.create(baseName, Status.SHUTDOWN, 0, statusFile);\n    }\n  }", "public void addEventFirst(SimEvent newEvent){\n  newEvent.setSerial(0);\n  sortedSet.add(newEvent);\n}\n", "    public void buildClasses(JarFile file) throws IOException { \n        Enumeration entries = file.entries();\n        while (entries.hasMoreElements()) {\n            ZipEntry e = (ZipEntry)entries.nextElement();\n            if (fileManager.acceptClassFileName(e.getName())) {\n                InputStream is = null;\n                try {\n                    is = file.getInputStream(e);\n                    buildClass(is);\n                } finally {\n                    is.close();\n                }\n            }\n        }\n    }\n", "public static long convertStringToMemorySizeLong(String memSize){\n  long result=0;\n  if (memSize.endsWith(\"K\")) {\n    result=Long.valueOf(StringUtils.remove(memSize,'K')) * 1000;\n  }\n else   if (memSize.endsWith(\"M\")) {\n    result=Long.valueOf(StringUtils.remove(memSize,'M')) * 1000 * 1000;\n  }\n else   if (memSize.endsWith(\"G\")) {\n    result=Long.valueOf(StringUtils.remove(memSize,'G')) * 1000 * 1000* 1000;\n  }\n  return result;\n}\n", " public void add(double x) {\n   if( x < hi && x>= lo) \n   {\n     double val = x - lo;\n\n     // Casting to int will round off to lower\n     // integer value.\n    int bin = (int)(numBins * (val/range) );\n\n     // Increment the corresponding bin.\n     bins[bin]++;\n   }\n }\n", "private static boolean CheckForConflictingSpecOptions(){\n  if ((PcalParams.SpecOption ? 1 : 0) + (PcalParams.MyspecOption ? 1 : 0) + (PcalParams.Spec2Option ? 1 : 0)+ (PcalParams.Myspec2Option ? 1 : 0)+ (PcalParams.WriteASTFlag ? 1 : 0) > 1) {\n    CommandLineError(\"\\nCan have at most one of the options \" + \"-spec, -myspec, -spec2, -myspec2, writeAST\");\n    return true;\n  }\n  ;\n  return false;\n}\n", "private void addSupertypeEdges ( ClassVertex vertex , LinkedList < XClass > workList ) { XClass xclass = vertex . getXClass ( ) ; ClassDescriptor superclassDescriptor = xclass . getSuperclassDescriptor ( ) ; if ( superclassDescriptor != null ) { addInheri", "public PDFObject cachedDereference ( ) throws IOException { if ( type == INDIRECT ) { PDFObject obj = null ; if ( cache != null ) { obj = ( PDFObject ) cache . get ( ) ; } if ( obj == null || obj . value == null ) { if ( owner == null ) { System . out . p", "public static boolean evaluate ( final NaviNode node , final VisibilityState visibilityState ) { return node . getRawNode ( ) . isVisible ( ) == ( visibilityState == VisibilityState . VISIBLE ) ; }", "public static JSONObject PostForJson ( String uriStr , String deviceBssid , JSONObject json , HeaderPair ... headers ) { return MeshCommunicationUtils . HttpPost ( uriStr , deviceBssid , json , headers ) ; }", "private String pickCodebase ( EntryClass eclass , ArrayList svcs , long now ) throws ClassNotFoundException { for ( int i = svcs . size ( ) ; -- i >= NUM_ ; ) { SvcReg reg = ( SvcReg ) svcs . get ( i ) ; if ( reg . leaseExpiration <= now ) continue ; Entr", "\tpublic boolean isChoiceState() {\n\t\tSet alllinks = this.outLinks_;\n\t\tif (alllinks.isEmpty()) return false;\n\t\tfor (Iterator links = alllinks.iterator(); links.hasNext();) {\n\t\t\tTransition tr = (Transition)links.next();\n\t\t\tStateGraphEvent ev = tr.getEvent();\n\t\t\tif (ev instanceof Operation || ev instanceof Delay) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n", "static public String rand() {\n    UUID uid = UUID.randomUUID();\n    long l1 = uid.getLeastSignificantBits();\n    long l2 = uid. getMostSignificantBits();\n    return \"_\"+Long.toHexString(l1)+Long.toHexString(l2);\n  }", "   protected void setPages(String[] pageNames) {\n      attributeSetIDs = pageNames;\n      attributeSets = new AttributeSet[attributeSetIDs.length];\n      for (int n = 0; n < attributeSets.length; n++) {\n         attributeSets[n] = new AttributeSet(getNamespace(), attributeSetIDs[n].toString());\n         attributeSets[n].setOrdinal(n);\n      }\n   }\n", "  public Object meet(Object e1, Object e2) {\n    if (e1==null || e2==null) return null;\n    Stack s1 = (Stack)e1;\n    Stack s2 = (Stack)e2;\n    if (s1.size()!=s2.size()) return null;\n    Stack result = new Stack();\n    for (int i=0; i<s1.size(); i++) {\n      if (!(set.isElement(s1.elementAt(i)) && set.isElement(s2.elementAt(i))))\n\tthrow new IllegalArgumentException();\n      result.push(((Lattice)set).meet(s1.elementAt(i),s2.elementAt(i)));\n    }\n    return result;\n  }\n", "    private DataHandler createDataHandler() {\n        try {\n            return new DataHandler(new FileDataSource(getZipscormLoc()));\n        } catch (Exception e) {\n            Logger.getLogger(SamgiConstantsG.LOGGER).error(\"Error creating the datahandler for the BIS lesson with lesson code \" + getLessonCode(), e);\n            SamgiUtilG.getInstance().getErrorHistory().add(e);\n            return null;\n        }\n    }\n", "protected void doAttributes ( ProxyReg proxyReg ) throws Exception { log ( Level . FINEST , STR_ ) ; try { if ( logger . isLoggable ( Level . FINEST ) ) { log ( Level . FINEST , STR_ + Arrays . toString ( attrSets ) + STR_ + proxyReg . proxy . getServiceID ( ) + STR_ ) ; } proxyReg . addAttributes ( attrSets ) ; } finally { if ( latch != null ) { latch . countDown ( ) ; } } log ( Level . FINEST , STR_ ) ; }", "public synchronized static void clearWeakReferencesNow(){\n  LAYOUTS.clear();\n}\n", "public void update(double sample) {\n        // Adjust min&max\n        min = (sample < min ? sample : min);\n        max = (sample > max ? sample : max);\n\n        // Update average\n        average += (sample - average) / ++count;\n        _pwrSumAverage += ( sample * sample - _pwrSumAverage) / count;\n\n        // Update variance\n        stdDev = Math.sqrt((_pwrSumAverage * count - count * average * average) / (count - 1));\n        cv = 100 * (stdDev / average);\n    }", "public void unassignGroupInDb(final JAASSystem _jaasSystem,\n                                  final Group _group)\n        throws EFapsException\n    {\n        unassignFromUserObjectInDb(CIAdminUser.Person2Group.getType(), _jaasSystem, _group);\n    }", "public DebugExceptionWrapper ( final Exception exception ) { super ( exception ) ; this . exception = exception ; }", "@SuppressWarnings(\"unchecked\") protected TypeToken(){\n  this.type=getSuperclassTypeParameter(getClass());\n  this.rawType=(Class<? super T>)$Gson$Types.getRawType(type);\n  this.hashCode=type.hashCode();\n}\n", "    public boolean isNewQuery() {\n        if (useNewRdo.getSelection()) {\n            return true;\n        }\n\n        return false;\n    }\n", "    public String getLabeledName() {\n        if (label == null) {\n            return getName();\n        }\n        return label + \"[\" + getName() + \"]\";\n    }\n", "private void updateElements(){\n  comboboxElements.clear();\n  comboboxElements.add(new CDebuggerTemplateWrapper(null));\n  for (  final DebuggerTemplate template : debuggerContainer.getDebuggers()) {\n    comboboxElements.add(new CDebuggerTemplateWrapper(template));\n  }\n}\n", "  public boolean doRemoteSetupAndVerification() throws IOException {\n\n    /*\n     * Stop if any required parameters are missing (error)\n     */\n    if (!verifyMinimumParameters()) {\n      throw new ResponseException(\"Missing required parameters\");\n    }\n    /*\n     * Initial page setup\n     */\n    return commandSetup();\n  }\n", "public static RowExpression toRowExpression(Object object, Type type)\n    {\n        requireNonNull(type, \"type is null\");\n\n        if (object instanceof RowExpression) {\n            return (RowExpression) object;\n        }\n\n        if (object == null) {\n            return constantNull(type);\n        }\n\n        return constant(object, type);\n    }", "private static void databaseUpdater ( final CConnection connection , final String resource ) throws CouldntUpdateDatabaseException { final BufferedReader input = new BufferedReader ( new InputStreamReader ( ClassLoader . getSystemResourceAsStream ( resource ) ) ) ; final StringBuffer contents = new StringBuffer ( ) ; String line = null ; try { while ( ( line = input . readLine ( ) ) != null ) { if ( line . length ( ) > NUM_ && line . charAt ( NUM_ ) == STR_ ) { continue ; } contents . append ( line ) ; contents . append ( STR_ ) ; } input . close ( ) ; } catch ( final IOException exception ) { throw new CouldntUpdateDatabaseException ( exception . toString ( ) , NUM_ ) ; } try ( PreparedStatement statement = connection . getConnection ( ) . prepareStatement ( contents . toString ( ) ) ) { statement . execute ( ) ; } catch ( final SQLException exception ) { throw new CouldntUpdateDatabaseException ( exception . toString ( ) , NUM_ ) ; } }", "private void unpressTouchedChild ( ) { if ( mViewBeingTouched != null ) { mViewBeingTouched . setPressed ( BOOL_ ) ; refreshDrawableState ( ) ; mViewBeingTouched = null ; } }", "@RequestMapping(value = \"api/group/{groupId}/{overrideId}\", method = RequestMethod.DELETE)\n    public\n    @ResponseBody\n    String removeOverride(Model model, @PathVariable int overrideId) {\n        pathOverrideService.removeOverride(overrideId);\n        return null;\n    }", "public void selectAll(){\n  if (isEditing()) {\n    removeEditor();\n  }\n  if (getRowCount() > 0 && getColumnCount() > 0) {\n    int oldLead;\n    int oldAnchor;\n    ListSelectionModel selModel;\n    selModel=selectionModel;\n    selModel.setValueIsAdjusting(true);\n    oldLead=getAdjustedIndex(selModel.getLeadSelectionIndex(),true);\n    oldAnchor=getAdjustedIndex(selModel.getAnchorSelectionIndex(),true);\n    setRowSelectionInterval(0,getRowCount() - 1);\n    SwingUtilities2.setLeadAnchorWithoutSelection(selModel,oldLead,oldAnchor);\n    selModel.setValueIsAdjusting(false);\n    selModel=columnModel.getSelectionModel();\n    selModel.setValueIsAdjusting(true);\n    oldLead=getAdjustedIndex(selModel.getLeadSelectionIndex(),false);\n    oldAnchor=getAdjustedIndex(selModel.getAnchorSelectionIndex(),false);\n    setColumnSelectionInterval(0,getColumnCount() - 1);\n    SwingUtilities2.setLeadAnchorWithoutSelection(selModel,oldLead,oldAnchor);\n    selModel.setValueIsAdjusting(false);\n  }\n}\n", "public boolean equals ( final Object o ) { if ( this == o ) { return BOOL_ ; } if ( ! ( o instanceof Type ) ) { return BOOL_ ; } Type t = ( Type ) o ; if ( sort != t . sort ) { return BOOL_ ; } if ( sort == OBJECT || sort == ARRAY ) { if ( len != t . len ) { return BOOL_ ; } for ( int i = off , j = t . off , end = i + len ; i < end ; i ++ , j ++ ) { if ( buf [ i ] != t . buf [ j ] ) { return BOOL_ ; } } } return BOOL_ ; }", "public static <T> T fill(T destination, Object source) {\n        if (destination != source) {\n            Class<?> stype = source.getClass();\n            for (Field field: destination.getClass().getFields()) {\n                try {\n                    Object value = field.get(destination);\n                    if (value == null) {\n                        field.set(destination, stype.getField(field.getName()).get(source));\n                    }\n                } catch (Exception x) {\n                }\n            }\n        }\n        return destination;\n    }", "public void requestResources(List<ResourceRequest> wanted)\n    throws IOException {\n    if (failException != null) {\n      throw failException;\n    }\n\n    cmNotifier.addCall(\n        new ClusterManagerService.requestResource_args(sessionId, wanted));\n  }", "    public boolean canProduce(String mapFormat) {\n        return getSupportedFormats().contains(mapFormat);\n    }\n", "private void mapDatabase(FileInputStream is) throws IOException {\n  FileChannel fc=is.getChannel();\n  mbb=fc.map(FileChannel.MapMode.READ_ONLY,0,(int)fc.size());\n  mbb.load();\n  loadDatabaseHeader(mbb);\n}\n", "public Iterator < SearchTree < VertexType > > searchTreeIterator ( ) { return searchTreeList . iterator ( ) ; }", "public static WebSocketFrame createTextFrame ( String payload ) { return new WebSocketFrame ( ) . setFin ( BOOL_ ) . setOpcode ( TEXT ) . setPayload ( payload ) ; }", "private void onAltitudeElementEnd() throws SAXException {\n  try {\n    elevation=Double.parseDouble(content);\n  }\n catch (  NumberFormatException e) {\n    throw new SAXException(createErrorMessage(\"Unable to parse altitude: \" + content),e);\n  }\n}\n", "void addMember ( final TypeMember member ) { Preconditions . checkNotNull ( member , STR_ ) ; Preconditions . checkArgument ( member . getParentType ( ) == this , STR_ ) ; members . add ( member ) ; }", "private String nextUrlBaseToken(String url){\n  StringBuffer token=new StringBuffer();\n  while (urlBaseEndIndex < url.length()) {\n    char ch=url.charAt(urlBaseEndIndex++);\n    if (ch == ':' || ch == ';' || ch == '?') {\n      break;\n    }\n    if (ch == '/') {\n      if (urlBaseEndIndex < url.length() && url.charAt(urlBaseEndIndex) == '/') {\n        urlBaseEndIndex++;\n        continue;\n      }\n else {\n        break;\n      }\n    }\n    token.append(ch);\n  }\n  if (token.length() == 0)   return null;\n else   return token.toString();\n}\n", "public Itinerary(StreetSegment streetSegment,int accessIndex,ZonedDateTime fromTimeDateZD){\n  transfers=0;\n  waitingTime=0;\n  walkTime=duration=streetSegment.duration;\n  distance=streetSegment.distance;\n  transitTime=0;\n  startTime=fromTimeDateZD;\n  endTime=fromTimeDateZD.plusSeconds(streetSegment.duration);\n  PointToPointConnection pointToPointConnection=new PointToPointConnection(accessIndex);\n  connection=pointToPointConnection;\n}\n", "    public void flush() throws IOException {\n        if (closed) {\n            throw new IOException(\"Cannot flush a closed output stream.\");\n        }\n\n        gzipstream.flush();\n    }\n", "public static void setupTracingConfig() {\n    TracingUtilities.setupTracingConfig();\n    List<String> descriptors = Arrays.asList(\n      \"BigtableTable.getTableDescriptor\",\n      \"BigtableTable.exists\",\n      \"BigtableTable.existsAll\",\n      \"BigtableTable.batch\",\n      \"BigtableTable.batchCallback\",\n      \"BigtableTable.get\",\n      \"BigtableTable.put\",\n      \"BigtableTable.checkAndPut\",\n      \"BigtableTable.delete\",\n      \"BigtableTable.checkAndDelete\",\n      \"BigtableTable.checkAndMutate\",\n      \"BigtableTable.mutateRow\",\n      \"BigtableTable.append\",\n      \"BigtableTable.increment\",\n      \"BigtableTable.incrementColumnValue\"\n    );\n\n    Tracing.getExportComponent().getSampledSpanStore().registerSpanNamesForCollection(descriptors);\n  }", "public void addElement(SequenceElement element){\n  includedElements.add(element);\n}\n", "  public void addPropertyChangeListener(PropertyChangeListener listener) {\n    wrappedAction.addPropertyChangeListener(listener);\n  }\n", "public static Object objectFromByteBuffer(byte[] buffer) throws IOException, ClassNotFoundException {\n  if (buffer == null)   return null;\n  OptimizedByteArrayInputStream inStream=new OptimizedByteArrayInputStream(buffer);\n  ObjectInputStream in=new ObjectInputStream(inStream);\n  Object retval=in.readObject();\n  in.close();\n  return retval;\n}\n", "protected final PainGeneratorIf getPainGenerator() {\n        if (this.generator == null) {\n            try {\n                this.generator = PainGeneratorFactory.get(this, this.getPainVersion());\n            } catch (Exception e) {\n                String msg = HBCIUtils.getLocMsg(\"EXCMSG_JOB_CREATE_ERR\", this.getPainJobName());\n                throw new HBCI_Exception(msg, e);\n            }\n\n        }\n        return this.generator;\n    }", "void removeSuiteTab ( ITab tab ) ;", "public static Color fromHex( String hex ) {\n        if (hex.startsWith(\"#\")) {\n            hex = hex.substring(1);\n        }\n        int length = hex.length();\n        int total = 6;\n        if (length < total) {\n            // we have a shortened version\n            String token = hex;\n            int tokenLength = token.length();\n            for( int i = 0; i < total; i = i + tokenLength ) {\n                hex += token;\n            }\n        }\n\n        int index = 0;\n        String r = hex.substring(index, index + 2);\n        String g = hex.substring(index + 2, index + 4);\n        String b = hex.substring(index + 4, index + total);\n        return new Color(Integer.valueOf(r, 16), Integer.valueOf(g, 16), Integer.valueOf(b, 16));\n    }", "@Override\n    public synchronized int read() throws IOException {\n        if (!isConnected) {\n            throw new IOException(\"Not connected\");\n        }\n        if (buffer == null) {\n            throw new IOException(\"InputStream is closed\");\n        }\n\n        if (isClosed && in == -1) {\n            // write end closed and no more need to read\n            return -1;\n        }\n\n        /**\n         * Set the last thread to be reading on this PipedInputStream. If\n         * lastReader dies while someone is waiting to write an IOException of\n         * \"Pipe broken\" will be thrown in receive()\n         */\n        lastReader = Thread.currentThread();\n        try {\n            int attempts = 3;\n            while (in == -1) {\n                // Are we at end of stream?\n                if (isClosed) {\n                    return -1;\n                }\n                if ((attempts-- <= 0) && lastWriter != null && !lastWriter.isAlive()) {\n                    throw new IOException(\"Pipe broken\");\n                }\n                // Notify callers of receive()\n                notifyAll();\n                wait(1000);\n            }\n        } catch (InterruptedException e) {\n            IoUtils.throwInterruptedIoException();\n        }\n\n        int result = buffer[out++] & 0xff;\n        if (out == buffer.length) {\n            out = 0;\n        }\n        if (out == in) {\n            // empty buffer\n            in = -1;\n            out = 0;\n        }\n\n        // let blocked writers write to the newly available buffer space\n        notifyAll();\n\n        return result;\n    }", "protected Collection<byte[]> processCrl(Certificate cert,Collection<ICrlClient> crlList){\n  if (crlList == null)   return null;\n  List<byte[]> crlBytes=new ArrayList<>();\n  for (  ICrlClient cc : crlList) {\n    if (cc == null)     continue;\n    Collection<byte[]> b=cc.getEncoded((X509Certificate)cert,null);\n    if (b == null)     continue;\n    crlBytes.addAll(b);\n  }\n  if (crlBytes.size() == 0)   return null;\n else   return crlBytes;\n}\n", "public static String sortCommonTokens(String column){\n  StringBuilder order=new StringBuilder();\n  order.append(\" (CASE \");\n  for (  String token : commonTokens) {\n    order.append(\" WHEN \" + column + \" LIKE '\"+ token+ \" %'\"+ \" THEN SUBSTR(\"+ column+ \",\"+ String.valueOf(token.length() + 2)+ \")\"+ \" || ', \"+ token+ \"' \");\n  }\n  order.append(\" ELSE \" + column + \" END) \");\n  return order.toString();\n}\n", "    public boolean find(int key) {\n        for (int i=0; i<used; i++) {\n            if (keys[i] == key) {\n                return true;\n            }\n        }\n        return false;\n    }\n", "public void extendTo(long newMax){\n  if (newMax < mCurrentLength) {\n    throw new IllegalArgumentException(\"\" + newMax + \" is less than current length of: \"+ mCurrentLength);\n  }\n  while (mTotalSize < newMax) {\n    final long i=mTotalSize >>> mBits;\n    if (i >= mData.length) {\n      final long newSize=(mData.length + 1) * 2;\n      if (newSize > Integer.MAX_VALUE) {\n        throw new RuntimeException(\"Attempting to allocate too large a chunk array. newSize=\" + newSize);\n      }\n      mData=Arrays.copyOf(mData,(int)newSize);\n    }\n    final int ii=(int)i;\n    if (mData[ii] == null) {\n      mData[ii]=new byte[mChunkSize];\n      mTotalSize+=mChunkSize;\n    }\n else {\n      final byte[] newSubArray=new byte[mChunkSize];\n      final byte[] arr=mData[ii];\n      final int lenArr=arr.length;\n      System.arraycopy(arr,0,newSubArray,0,lenArr);\n      mTotalSize+=mChunkSize - lenArr;\n      mData[ii]=newSubArray;\n    }\n  }\n  mCurrentLength=newMax;\n}\n", "public static XorPeerAddressAttribute createXorPeerAddressAttribute ( TransportAddress address , byte [ ] tranID ) { XorPeerAddressAttribute attribute = new XorPeerAddressAttribute ( ) ; attribute . setAddress ( address , tranID ) ; return attribute ; }", "    private void updateRate(SnacRequestSentEvent e) {\n        CmdType cmdType = CmdType.ofCmd(e.getRequest().getCommand());\n\n        RateClassMonitorImpl monitor = getMonitor(cmdType);\n\n        if (monitor == null) return;\n\n        monitor.updateRate(e.getSentTime());\n    }\n", "public void handleCacheRemoval(Cache cache) throws ManagementException {\n  if (!isServiceInitialised(\"handleCacheRemoval\")) {\n    return;\n  }\n  this.serviceInitialised=false;\n  try {\n    cleanUpMonitors();\n    cleanBridgeResources();\n  }\n catch (  Exception e) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(e.getMessage(),e);\n    }\n  }\n  try {\n    service.close();\n  }\n catch (  Exception e) {\n    logger.warn(e.getMessage(),e);\n  }\n finally {\n    this.cacheImpl=null;\n    this.service=null;\n    this.memberMBeanBridge=null;\n    this.memberBean=null;\n    this.memberLevelNotifEmitter=null;\n  }\n}\n", "public static transformpolicylabel_policybinding_binding[] get(nitro_service service, String labelname) throws Exception{\n\t\ttransformpolicylabel_policybinding_binding obj = new transformpolicylabel_policybinding_binding();\n\t\tobj.set_labelname(labelname);\n\t\ttransformpolicylabel_policybinding_binding response[] = (transformpolicylabel_policybinding_binding[]) obj.get_resources(service);\n\t\treturn response;\n\t}", "public static void showSynopsis ( ) { System . out . println ( STR_ ) ; }", "    public void writeNullReference(Field field) throws IOException {\n\twrite(\"<\" + NULL);\t\n \tif (field != null) {\n\t    write(\" \" + A_NAME + \"=\\'\" + field.getName() + \"'/>\\n\");\n\t} else {\n\t    write(\"/>\\n\");\n\t}\n    }\n", "public Object optuserdata(Class c,Object defval){\n  argerror(c.getName());\n  return null;\n}\n", "@Override public void onException(final JMSException exception){\n  LOGGER.error(\"JMSException caught by JMS connection exception listener. Attempting to reconnect.\",exception);\n  startReconnectThread();\n}\n", "public void setCheckType(int checkType) {\n        if (checkType < TYPE_CHECK || checkType > TYPE_STAR)\n            checkType = TYPE_CHECK;\n        this.checkType = checkType;\n        setText(typeChars[checkType - 1]);\n        try {\n            setFont(BaseFont.createFont(BaseFont.ZAPFDINGBATS, BaseFont.WINANSI, false));\n        }\n        catch (Exception e) {\n            throw new ExceptionConverter(e);\n        }\n    }", "public Complex cos(){\n  return new Complex(Math.cos(re) * Math.cosh(im),-Math.sin(re) * Math.sinh(im));\n}\n", "    private String getIncludingInclusionPath() {\n        DeviceLayoutContext including = getIncludingDeviceLayoutContext();\n        if (including == null) {\n            return null;\n            } else {\n            return including.getInclusionPath();\n            }\n            }\n", "\tpublic boolean isCertificadoAc(){\n\t\treturn certificate.getBasicConstraints() >= 0;\n\t}\n", "public void drawSheared(float x,float y, float hshear, float vshear, Color filter) { \r\n    \tif (alpha != 1) {\r\n    \t\tif (filter == null) {\r\n    \t\t\tfilter = Color.white;\r\n    \t\t}\r\n    \t\t\r\n    \t\tfilter = new Color(filter);\r\n    \t\tfilter.a *= alpha;\r\n    \t}\r\n        if (filter != null) { \r\n            filter.bind(); \r\n        } \r\n        \r\n        texture.bind(); \r\n        \r\n        GL.glTranslatef(x, y, 0);\r\n        if (angle != 0) {\r\n\t        GL.glTranslatef(centerX, centerY, 0.0f); \r\n\t        GL.glRotatef(angle, 0.0f, 0.0f, 1.0f); \r\n\t        GL.glTranslatef(-centerX, -centerY, 0.0f); \r\n        }\r\n        \r\n        GL.glBegin(SGL.GL_QUADS); \r\n        \tinit();\r\n\t\t\r\n\t\t    GL.glTexCoord2f(textureOffsetX, textureOffsetY);\r\n\t\t\tGL.glVertex3f(0, 0, 0);\r\n\t\t\tGL.glTexCoord2f(textureOffsetX, textureOffsetY + textureHeight);\r\n\t\t\tGL.glVertex3f(hshear, height, 0);\r\n\t\t\tGL.glTexCoord2f(textureOffsetX + textureWidth, textureOffsetY\r\n\t\t\t\t\t+ textureHeight);\r\n\t\t\tGL.glVertex3f(width + hshear, height + vshear, 0);\r\n\t\t\tGL.glTexCoord2f(textureOffsetX + textureWidth, textureOffsetY);\r\n\t\t\tGL.glVertex3f(width, vshear, 0);\r\n        GL.glEnd(); \r\n        \r\n        if (angle != 0) {\r\n\t        GL.glTranslatef(centerX, centerY, 0.0f); \r\n\t        GL.glRotatef(-angle, 0.0f, 0.0f, 1.0f); \r\n\t        GL.glTranslatef(-centerX, -centerY, 0.0f); \r\n        }\r\n        GL.glTranslatef(-x, -y, 0);\r\n    }", "void deletedFunctionNodeComment ( NodeType node , CommentType comment ) ;", "public NodeSchema toTVEAndFixColumns(Map<String, Pair<String, Integer>> nameMap) {\n      final NodeSchema ns = copyAndReplaceWithTVE();    // First convert all non-TVE expressions to TVE in a copy\n       m_columns.clear();\n       m_columnsMapHelper.clear();\n       for(int indx = 0; indx < ns.size(); ++indx) {    // then update columns\n           final SchemaColumn sc = ns.getColumn(indx);\n           assert(sc.getExpression() instanceof TupleValueExpression);\n           if(nameMap.containsKey(sc.getColumnName())) {\n               final String newColName = nameMap.get(sc.getColumnName()).getFirst();\n               sc.reset(sc.getTableName(), sc.getTableAlias(), newColName, sc.getColumnAlias());\n               sc.setDifferentiator(indx);\n               TupleValueExpression exp = (TupleValueExpression) sc.getExpression();\n               exp.setColumnIndex(indx);\n               exp.setColumnName(newColName);\n               exp.setDifferentiator(indx);\n           }\n       }\n       for(SchemaColumn sc : ns) {\n           addColumn(sc);\n       }\n       return this;\n    }", "static ImmutableMap<String, Node> getFunctionCallParameterMap(\n      final Node fnNode, Node callNode, Supplier<String> safeNameIdSupplier) {\n    checkNotNull(fnNode);\n    // Create an argName -> expression map\n    ImmutableMap.Builder<String, Node> argMap = ImmutableMap.builder();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getSecondChild();\n    if (cArg != null && NodeUtil.isFunctionObjectCall(callNode)) {\n      argMap.put(THIS_MARKER, cArg);\n      cArg = cArg.getNext();\n    } else {\n      // 'apply' isn't supported yet.\n      checkState(!NodeUtil.isFunctionObjectApply(callNode), callNode);\n      argMap.put(THIS_MARKER, NodeUtil.newUndefinedNode(callNode));\n    }\n\n    for (Node fnParam : NodeUtil.getFunctionParameters(fnNode).children()) {\n      if (cArg != null) {\n        if (fnParam.isRest()) {\n          checkState(fnParam.getOnlyChild().isName(), fnParam.getOnlyChild());\n          Node array = IR.arraylit();\n          array.useSourceInfoIfMissingFromForTree(cArg);\n          while (cArg != null) {\n            array.addChildToBack(cArg.cloneTree());\n            cArg = cArg.getNext();\n          }\n          argMap.put(fnParam.getOnlyChild().getString(), array);\n          return argMap.build();\n        } else {\n          checkState(fnParam.isName(), fnParam);\n          argMap.put(fnParam.getString(), cArg);\n        }\n        cArg = cArg.getNext();\n      } else { // cArg != null\n        if (fnParam.isRest()) {\n          checkState(fnParam.getOnlyChild().isName(), fnParam);\n          //No arguments for REST parameters\n          Node array = IR.arraylit();\n          argMap.put(fnParam.getOnlyChild().getString(), array);\n        } else {\n          checkState(fnParam.isName(), fnParam);\n          Node srcLocation = callNode;\n          argMap.put(fnParam.getString(), NodeUtil.newUndefinedNode(srcLocation));\n        }\n      }\n    }\n\n    // Add temp names for arguments that don't have named parameters in the\n    // called function.\n    while (cArg != null) {\n      String uniquePlaceholder = getUniqueAnonymousParameterName(safeNameIdSupplier);\n      argMap.put(uniquePlaceholder, cArg);\n      cArg = cArg.getNext();\n    }\n\n    return argMap.build();\n  }", "    public void cleanup() {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"cleanup() - start\");\n\t\t}\n\n        // run cleanup on input adapter & set reference to null.\n        if (getInputAdapter() != null) {\n        \tgetInputAdapter().close();\n        \tsetInputAdapter(null);\n        }\n        // run cleanup on output adapter & set reference to null.\n        if (getOutputAdapter() != null) {\n        \tgetOutputAdapter().close();\n        \tsetOutputAdapter(null);\n        }\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"cleanup() - end\");\n\t\t}\n    }\n", "public static Set < XMethod > resolveMethodCallTargets ( ReferenceType receiverType , InvokeInstruction invokeInstruction , ConstantPoolGen cpg , boolean receiverTypeIsExact ) throws ClassNotFoundException { if ( invokeInstruction . getOpcode ( ) == Const", "public Object next(){\n  return enumeration.nextElement();\n}\n", "\tprotected void initThis(Composite parent) {\n\t\tsetBackground(parent.getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));\n\t\tGridData gd = new GridData(GridData.FILL_HORIZONTAL);\n\t\tthis.setLayoutData(gd);\n\t\tGridLayout layout = new GridLayout();\n\t\tlayout.verticalSpacing = 0;\n\t\tlayout.horizontalSpacing = 0;\n\t\tlayout.marginWidth = 0;\n\t\tlayout.numColumns=1;\n\t\tthis.setLayout(layout);\n\t}\n", "public static Element detectHashedPostTree(Element signedElement,String postXPath){\n  Element signedPostPart=signedElement;\n  Node signedPostPartParent=signedPostPart.getParentNode();\n  final XPathFactory factory=XPathFactory.newInstance();\n  final XPath xpath=factory.newXPath();\n  final Document ownerDocument=signedElement.getOwnerDocument();\n  final NamespaceResolver nsr=new NamespaceResolver(ownerDocument);\n  xpath.setNamespaceContext(nsr);\n  XPathExpression expr=null;\n  try {\n    expr=xpath.compile(postXPath);\n  }\n catch (  XPathExpressionException e1) {\n    LOG.warn(\"No valid PostXPath: \" + postXPath);\n    return null;\n  }\n  NodeList nodes;\n  while (signedPostPartParent != null && signedPostPartParent.getNodeType() == Node.ELEMENT_NODE) {\n    try {\n      nodes=(NodeList)expr.evaluate(signedPostPartParent,XPathConstants.NODESET);\n    }\n catch (    XPathExpressionException e) {\n      continue;\n    }\n    if (nodes.getLength() == 1) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Matched with postXPath from Element: \" + signedPostPart.getNodeName());\n      }\n      break;\n    }\n    signedPostPart=(Element)signedPostPartParent;\n    signedPostPartParent=signedPostPart.getParentNode();\n  }\n  return signedPostPart;\n}\n", "    public void setTag(String t) throws ParseException {\n        // JvB: check that it is a valid token\n        Parser.checkToken(t);\n        this.setParameter(ParameterNames.TAG, t);\n    }\n", "protected boolean addHash(Object entity,Hasher hasher){\n  EntityType entityType=getElementType(entity);\n  if (entityType == UNKNOWN) {\n    return false;\n  }\n  try {\n    hasher.putString(getJson(entity,entityType),Charset.defaultCharset());\n  }\n catch (  RuntimeException e) {\n    return false;\n  }\n  return true;\n}\n", "    public void run() {\n\n        ServerSocket ss = null;\n        try {\n            ss = new ServerSocket(port + 1);  // open a server socket on the load port\n        } catch (IOException e) {\n            LimeServer.error(\"Error while opening socket.\", e, true);\n        }\n\n\n        while(true) {\n            try {\n                Socket s = ss.accept();\n                DataInputStream is = new DataInputStream(s.getInputStream());\n                String classname = is.readUTF();   // read in the class name\n                loadAgent(classname, null); // load the agent into the LimeServer\n                is.close();         // close the input stream\n                s.close();     // close the connection to the client\n            } catch (Exception e) {\n                LimeServer.error(\"Error\", e, true);\n            }\n        }\n    } // end run()\n", "    private void loadHeader(int fileNo) throws Exception {\n        this.header = FileUtils.readArffStructure(this.input.get(fileNo));\n    }\n", "\tprivate void chooseFile() {\n\t\tfinal JFileChooser fileDialog = new JFileChooser();\n\t\tfileDialog.setCurrentDirectory(new java.io.File(\".\"));\n\t\tfileDialog.setDialogTitle(\"Please choose SUMO configuration file.\");\n\t\tfileDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);\n\n\t\tif (fileDialog.showOpenDialog(getParent()) == JFileChooser.APPROVE_OPTION) {\n\t\t\ttry {\n\t\t\t\tfilename.setText(fileDialog.getSelectedFile().getCanonicalPath());\n\t\t\t} catch (final IOException ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n", "public static <R> Stream<R> zip(final LongIterator a, final LongIterator b, final long valueForNoneA, final long valueForNoneB,\r\n            final LongBiFunction<R> zipFunction) {\r\n        return new IteratorStream<>(new ObjIteratorEx<R>() {\r\n            @Override\r\n            public boolean hasNext() {\r\n                return a.hasNext() || b.hasNext();\r\n            }\r\n\r\n            @Override\r\n            public R next() {\r\n                if (hasNext() == false) {\r\n                    throw new NoSuchElementException();\r\n                }\r\n\r\n                return zipFunction.apply(a.hasNext() ? a.nextLong() : valueForNoneA, b.hasNext() ? b.nextLong() : valueForNoneB);\r\n            }\r\n        });\r\n    }", "public static String crypt(final String text,final String salt){\n  try {\n    final MessageDigest md=MessageDigest.getInstance(SHA_512);\n    md.update(salt.getBytes(StandardCharsets.UTF_8));\n    final byte[] digest=md.digest(text.getBytes(StandardCharsets.UTF_8));\n    return String.format(\"%064x\",new BigInteger(1,digest));\n  }\n catch (  final NoSuchAlgorithmException e) {\n    throw new IllegalStateException(\"The SHA512Crypt class uses an invalid algorithm\",e);\n  }\n}\n", "public JobDeleteOptions withOcpDate(DateTime ocpDate) {\n        if (ocpDate == null) {\n            this.ocpDate = null;\n        } else {\n            this.ocpDate = new DateTimeRfc1123(ocpDate);\n        }\n        return this;\n    }", "public static void setExpires(@NotNull HttpServletResponse response, @Nullable Date date) {\n    if (date == null) {\n      response.setHeader(HEADER_EXPIRES, \"-1\");\n    }\n    else {\n      response.setHeader(HEADER_EXPIRES, formatDate(date));\n    }\n  }", "    public String convert(String columnName, String columnValue) {\n\ttry {\n\t    return columnConverter.get(columnName).get(columnValue);\n\t} catch (NullPointerException e) {\n\t    return columnValue;\n\t}\n    }\n", "public Query appendIf(final String name, final GitlabAccessLevel value) throws UnsupportedEncodingException {\n        if (value != null) {\n            append(name, Integer.toString(value.accessValue));\n        }\n        return this;\n    }", "public DViewCertCsrPem(JFrame parent,String title,X509Certificate cert) throws CryptoException {\n  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);\n  this.cert=cert;\n  initComponents();\n}\n", "public int removeEntryIndexedField ( IEntryHolder eh , ArrayList < IObjectInfo < IEntryCacheInfo > > deletedBackRefs , K fieldValue , int refpos , boolean removeIndexedValue , IEntryCacheInfo pEntry ) { if ( _fifoGroupsIndexExtention == null || ! removeIndexedValue || fieldValue == null ) return removeEntryIndexedField_impl ( eh , deletedBackRefs , fieldValue , refpos , removeIndexedValue , pEntry ) ; else return _fifoGroupsIndexExtention . removeEntryIndexedField ( eh , deletedBackRefs , fieldValue , refpos , removeIndexedValue , pEntry ) ; }", "    public Note nextNote(int[] scale){\n\t//int[] scaleType = scale.getScaleType();\n\tNote nextNote =null;\n\tfor (int i = 0; i < scale.length; i++) {\n////\t    this.getPitch()\n////\t    //scale[i]\n//Note note = (Note)scale.get(i);\n\t    //System.out.println(\"Scale \" + scale[i]);\n\t    //System.out.println(\"Mod This Note \" + this.getPitchValue() % 12);\n            if(this.getPitchValue() % 12 == 0){\n                nextNote = new Note(this.getPitch() + scale[i],DEFAULT_RHYTHM_VALUE);\n            }\n////\t\t\tNote note2 = (Note)scale.get(i+1);\n////\t\t\treturn note2;\n////\t\t}\n//\t\n\t}\n", "public ServiceFuture<NetworkInterfaceTapConfigurationInner> createOrUpdateAsync(String resourceGroupName, String networkInterfaceName, String tapConfigurationName, NetworkInterfaceTapConfigurationInner tapConfigurationParameters, final ServiceCallback<NetworkInterfaceTapConfigurationInner> serviceCallback) {\n        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, networkInterfaceName, tapConfigurationName, tapConfigurationParameters), serviceCallback);\n    }", "\tpublic void addFigure(EuclideFigure shape) {\n\t\tfigures.addLast(shape);\n\t\tthis.fireEvent(new LayerModifiedEvent(this,\n\t\t\t\tEuclideLayerEvent.ELEMENT_ADDED));\n\t}\n", "public PagedList<DetectorResponseInner> listHostingEnvironmentDetectorResponses(final String resourceGroupName, final String name) {\n        ServiceResponse<Page<DetectorResponseInner>> response = listHostingEnvironmentDetectorResponsesSinglePageAsync(resourceGroupName, name).toBlocking().single();\n        return new PagedList<DetectorResponseInner>(response.body()) {\n            @Override\n            public Page<DetectorResponseInner> nextPage(String nextPageLink) {\n                return listHostingEnvironmentDetectorResponsesNextSinglePageAsync(nextPageLink).toBlocking().single().body();\n            }\n        };\n    }", "    public FeatureMap getPreviousTurn() {\n\tif (!agenda.isEmpty()) {\n\t    return (FeatureMap) agenda.peek(0);\n\t} else {\n\t    return null;\n\t}\n    }\n", "\tprivate SchedElemIdentifier getKey(int i) {\n\t\tif (i < 0 || i >= keys.size())\n\t\t\treturn null;\n\t\telse {\n\t\t\treturn keys.get(i);\n\t\t}\n\t}\n", "NumberStrategy(final int field){\n  this.field=field;\n}\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public void addAction ( int icon , CharSequence title , Action . OnActionListener listener , ComponentName activity , ComponentName service , String broadcast , Bundle extra ) { addAction ( new Action ( icon , title , listener , activity , service , broad", "@Override\n    public Object convertUponSet(\n                    final Object value\n                    )\n    {\n        Date  date = null;\n        if (value != null) {\n            try {\n                date = _formatter.parse( (String)value );\n            } catch (ParseException p_ex) {\n                throw new IllegalArgumentException( p_ex.getMessage() );\n            }\n        }\n\n        return date;\n    }", "private void insert(Map<String,String> abbrevToItem,String item,String abbrev){\n  abbrev=expand(item,abbrev);\n  if (!abbrevToItem.containsKey(abbrev)) {\n    abbrevToItem.put(abbrev,item);\n  }\n else {\n    String other=abbrevToItem.get(abbrev);\n    if (!item.equals(other)) {\n      if (!abbrev.equals(other)) {\n        abbrevToItem.put(abbrev,null);\n        if (other != null) {\n          insert(abbrevToItem,other,abbrev);\n        }\n      }\n      if (other == null && item.equals(abbrev)) {\n        abbrevToItem.put(abbrev,item);\n      }\n else {\n        insert(abbrevToItem,item,abbrev);\n      }\n    }\n  }\n}\n", "public int encodingId ( ) { return this . cmapId ( ) . encodingId ( ) ; }", "@Override public void sendMail(MimeMessage message) throws MessagingException {\n  MailAddress sender=new MailAddress((InternetAddress)message.getFrom()[0]);\n  Collection<MailAddress> recipients=new HashSet<MailAddress>();\n  Address addresses[]=message.getAllRecipients();\n  if (addresses != null) {\n    for (    Address address : addresses) {\n      if (address instanceof InternetAddress) {\n        recipients.add(new MailAddress((InternetAddress)address));\n      }\n    }\n  }\n  sendMail(sender,recipients,message);\n}\n", "private void resetDatabase ( TungstenProperties serviceProps , Map < String , String > progress ) throws InterruptedException { DataSourceAdministrator admin = null ; String serviceName = serviceProps . getString ( ReplicatorConf . SERVICE_NAME ) ; try { ", "protected static byte [ ] buildPayload ( CommandAction commandAction , byte [ ] payload ) { byte payloadLength = ( byte ) ( payload == null ? NUM_ : payload . length ) ; ByteBuffer payloadBuffer = ByteBuffer . allocate ( ENVELOPE_SIZE + payloadLength + CRC_SIZE ) ; payloadBuffer . order ( ByteOrder . LITTLE_ENDIAN ) ; payloadBuffer . put ( commandAction . value ) ; payloadBuffer . put ( ( byte ) ( ENVELOPE_SIZE + payloadLength ) ) ; if ( payloadLength != NUM_ ) { payloadBuffer . put ( payload != null ? payload : new byte [ NUM_ ] ) ; } payloadBuffer . putShort ( ( short ) MessageUtils . CRC16CCITT ( payloadBuffer . array ( ) , NUM_ , NUM_ , ENVELOPE_SIZE + payloadLength ) ) ; return payloadBuffer . array ( ) ; }", "public static String removeAll(final String text, final Pattern regex) {\n        return replaceAll(text, regex, StringUtils.EMPTY);\n    }", "private void remapKey(InputMapUIResource map,int key,int defaultModifier,int nativeModifier){\n  KeyStroke defaultKey=KeyStroke.getKeyStroke(key,defaultModifier);\n  Object action=map.get(defaultKey);\n  KeyStroke nativeKey=KeyStroke.getKeyStroke(key,nativeModifier);\n  if (!nativeKey.equals(defaultKey)) {\n    map.remove(defaultKey);\n    map.put(nativeKey,action);\n  }\n}\n", "public void addPropertyChangeListener(PropertyChangeListener l){\n  m_Support.addPropertyChangeListener(l);\n}\n", "    public Class getElementByType(Class type, boolean isForceCreation) {\n\tif (type == null) {\n\t    return null;\n\t}\n\tIterator<AssociationElement> itr = elements.iterator();\n\twhile (itr.hasNext()) {\n\t    AssociationElement e = itr.next();\n\t    Class elementClass = e.getElementClass();\n\t    if (elementClass == null) {\n\t\tcontinue;\n\t    }\n\t    if (AssociationManager.isAssignByClass(type, elementClass)) {\n\t\treturn elementClass;\n\t    }\n\t}\n\n\tif (!isForceCreation) {\n\t    return null;\n\t}\n\t\n\tClass element = AssociationManager.createElement(this, type);\n\tif (element != null) {\n\t    addElementByClass(element);\n\t}\n\treturn element;\n    }\n", "static public int asInt(byte[] array) {\n\n        if (null == array || 4 != array.length) {\n            throw new IllegalArgumentException(\"Length of the byte array should be 4\");\n        }\n\n        return ((array[0] << 24)\n                + ((array[1] & 255) << 16)\n                + ((array[2] & 255) << 8) + (array[3] & 255));\n    }", "public void addLink( final String path, final String target, int permissions, String username, String groupname) throws NoSuchAlgorithmException, IOException {\n\t\tcontents.addLink( path, target, permissions, username, groupname);\n\t}", "private ArrayList<AStarNode> backTrace(AStarNode start){\n  ArrayList<AStarNode> foundpath=new ArrayList<AStarNode>();\n  foundpath.add(currentNode);\n  int x;\n  int y;\n  int z;\n  int px;\n  int pz;\n  int dx;\n  int dz;\n  while (!currentNode.equals(start)) {\n    x=currentNode.x;\n    y=currentNode.y;\n    z=currentNode.z;\n    px=currentNode.parent.x;\n    pz=currentNode.parent.z;\n    dx=(px - x) / Math.max(Math.abs(x - px),1);\n    dz=(pz - z) / Math.max(Math.abs(z - pz),1);\n    x+=dx;\n    z+=dz;\n    while (x != px || z != pz) {\n      y=getGroundNodeHeight(x,y,z);\n      foundpath.add(new AStarNode(x,y,z,0,null));\n      x+=dx;\n      z+=dz;\n    }\n    foundpath.add(currentNode.parent);\n    currentNode=currentNode.parent;\n  }\n  return foundpath;\n}\n", "        private void reselect() {\n            firePropertyChange(\"selected\", null, Boolean.TRUE);\n        }\n", "@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n  super.readExternal(in);\n  this.parentDistance=in.readDouble();\n}\n", "public static int compareTo ( Character left , Character right ) { return compareTo ( Integer . valueOf ( left ) , right ) ; }", "public UIGraphicTestCase ( String name ) { super ( name ) ; }", "\tpublic String appendExtensionToFileName(String szFileName) {\n\t\tif (!szFileName.endsWith(getExtension())) {\n\t\t\treturn szFileName + getExtension();\n\t\t} else\n\t\t\treturn szFileName;\n\t}\n", "    public void setResultsetKeys(boolean resultsetKeys) {\n\n        boolean previous = profileSettings.getBoolean(JDBC_GENERATE_KEYS);\n        profileSettings.putBoolean(JDBC_GENERATE_KEYS, resultsetKeys);\n        propertyListeners.firePropertyChange(JDBC_GENERATE_KEYS, previous, resultsetKeys);\n    }\n", "public RelativeDateFormat(Date time){\n  this(time.getTime());\n}\n", "public boolean containsAllOuvrier(Collection<Ouvrier> ouvrier){\n\treturn this.ouvrier.containsAll(ouvrier);\n}\n", "public void cleanPatchByVersion(File patchFile){\n  if (patchDirectory == null || patchFile == null || !patchFile.exists()) {\n    return;\n  }\n  String versionName=SharePatchFileUtil.getPatchVersionDirectory(SharePatchFileUtil.getMD5(patchFile));\n  cleanPatchByVersion(versionName);\n}\n", "public SharedDataIteratorSource ( Object identifier , ISourceDataIteratorProvider < T > sourceDataIteratorProvider , long timeToLive ) { if ( sourceDataIteratorProvider == null ) throw new IllegalArgumentException ( STR_ ) ; _identifier = identifier ; _sourceDataIteratorProvider = sourceDataIteratorProvider ; _timeToLive = timeToLive ; _createdTime = SystemTime . timeMillis ( ) ; }", "public synchronized LogRecord readRecord(int waitMillis) throws IOException, InterruptedException, LogTimeoutException, ReplicatorException {\n  assertReadMode();\n  long offset=dataInput.getOffset();\n  if (logger.isDebugEnabled())   logger.debug(\"Reading log file position=\" + offset);\n  dataInput.mark(65636);\n  long startIntervalMillis=System.currentTimeMillis();\n  long available=dataInput.waitAvailable(RECORD_LENGTH_SIZE,waitMillis);\n  if (available < RECORD_LENGTH_SIZE) {\n    dataInput.reset();\n    if (waitMillis > 0) {\n      throw new LogTimeoutException(\"Log read timeout: waitMillis=\" + waitMillis + \" file=\"+ file.getName()+ \" offset=\"+ offset);\n    }\n else     if (available == 0) {\n      if (logger.isDebugEnabled())       logger.debug(\"Read empty record\");\n      return new LogRecord(file,offset,false);\n    }\n else     if (available < RECORD_LENGTH_SIZE) {\n      if (logger.isDebugEnabled())       logger.debug(\"Length is truncated; returning immediately\");\n      return new LogRecord(file,offset,true);\n    }\n  }\n  int recordLength=dataInput.readInt();\n  if (recordLength < LogRecord.NON_DATA_BYTES || recordLength > MAX_RECORD_LENGTH) {\n    logger.warn(\"Record length is invalid, log may be corrupt: offset=\" + offset + \" record length=\"+ recordLength);\n    dataInput.reset();\n    return new LogRecord(file,offset,true);\n  }\n  if (logger.isDebugEnabled())   logger.debug(\"Record length=\" + recordLength);\n  waitMillis=waitMillis + (int)(startIntervalMillis - System.currentTimeMillis());\n  int remainingRecordLength=recordLength - RECORD_LENGTH_SIZE;\n  available=dataInput.waitAvailable(remainingRecordLength,waitMillis);\n  if (available < remainingRecordLength) {\n    dataInput.reset();\n    if (waitMillis > 0) {\n      throw new LogTimeoutException(\"Log read timeout: waitMillis=\" + waitMillis + \" file=\"+ file.getName()+ \" offset=\"+ offset);\n    }\n else {\n      return new LogRecord(file,offset,true);\n    }\n  }\n  byte[] bytesToRead=new byte[recordLength - LogRecord.NON_DATA_BYTES];\n  dataInput.readFully(bytesToRead);\n  byte crcType=dataInput.readByte();\n  long crc=dataInput.readLong();\n  return new LogRecord(file,offset,bytesToRead,crcType,crc);\n}\n", "public int numCMaps ( ) { return this . data . readUShort ( Offset . numTables . offset ) ; }", "public String shortenPfeat(String fea){\n  String s=fea;\n  s=s.replace(\"phone\",\"phn\");\n  s=s.replace(\"prev\",\"p\");\n  s=s.replace(\"next\",\"n\");\n  s=s.replace(\"sentence\",\"snt\");\n  s=s.replace(\"phrase\",\"phr\");\n  s=s.replace(\"word\",\"wrd\");\n  s=s.replace(\"from_\",\"\");\n  s=s.replace(\"to_\",\"\");\n  s=s.replace(\"in_\",\"\");\n  s=s.replace(\"is_\",\"\");\n  s=s.replace(\"break\",\"brk\");\n  s=s.replace(\"start\",\"stt\");\n  s=s.replace(\"accented\",\"acc\");\n  s=s.replace(\"accent\",\"acc\");\n  s=s.replace(\"stressed\",\"str\");\n  s=s.replace(\"punctuation\",\"punc\");\n  s=s.replace(\"frequency\",\"freq\");\n  s=s.replace(\"position\",\"pos\");\n  s=s.replace(\"halfphone_lr\",\"lr\");\n  return s;\n}\n", "public String contentType ( ) { return header ( HEADER_CONTENT_TYPE ) ; }", "public String registerCallbackHandler(SSOToken token,SMSObjectListener changeListener) throws SMSException, SSOException {\n  return null;\n}\n", "    public boolean insertAllowed(){\n        return permissions[0];\n    }\n", "private void postprocess_ModifyMemberProperty(ShapeModel shapeModel, String memberName,\n                                                  ShapeModifier_ModifyModel modifyModel) {\n        if (modifyModel.getEmitEnumName() != null) {\n            EnumModel enumModel = shapeModel.findEnumModelByValue(memberName);\n            if (enumModel == null) {\n                throw new IllegalStateException(\n                        String.format(\"Cannot find enum [%s] in the intermediate model when processing \"\n                                + \"customization config shapeModifiers.%s\", memberName, memberName));\n            }\n            enumModel.setName(modifyModel.getEmitEnumName());\n        }\n\n        if (modifyModel.getMarshallLocationName() != null) {\n            MemberModel memberModel =  shapeModel.findMemberModelByC2jName(memberName);\n            memberModel.getHttp().setMarshallLocationName(modifyModel.getMarshallLocationName());\n        }\n\n        if (modifyModel.getUnmarshallLocationName() != null) {\n            MemberModel memberModel =  shapeModel.findMemberModelByC2jName(memberName);\n            memberModel.getHttp().setUnmarshallLocationName(modifyModel\n                    .getUnmarshallLocationName());\n        }\n\n    }", "@Override public InetSocketAddress ipRemote(){\n  Socket s=getSocket();\n  if (s != null) {\n    return (InetSocketAddress)s.getRemoteSocketAddress();\n  }\n else {\n    return null;\n  }\n}\n", "public void play ( String musicName ) { if ( musicMap . containsKey ( musicName ) ) { soundPool . play ( musicMap . get ( musicName ) , UIdefaultData . defaultMusicVolume , UIdefaultData . defaultMusicVolume , NUM_ , NUM_ , NUM_ ) ; } }", "\tpublic void swapPlayers(final int pNum1, final int pNum2) throws IndexOutOfBoundsException {\n\t\tfinal Player p1 = this.players.get(pNum1);\n\t\tfinal Player p2 = this.players.get(pNum2);\n\t\tp1.swap(p2);\n\t\tthis.players.set(pNum2, p1);\n\t\tthis.players.set(pNum1, p2);\n\t\tif (this.currentPlayer == pNum1) {\n\t\t\tthis.currentPlayer = pNum2;\n\t\t} else if (this.currentPlayer == pNum2) {\n\t\t\tthis.currentPlayer = pNum1;\n\t\t}\n\t}\n", "public static void createRMA6FileFromBLAST(String creator,String blastFile,BlastFileFormat format,String queryFile,String rma6FileName,boolean useCompression,Document doc,int maxMatchesPerRead,boolean hasMagnitudes,ProgressListener progressListener) throw", "    private Double getValueInCentimeters(UnitValue originalUnit, Number value) {\n        double result;\n        double valueDouble = value.doubleValue();\n        if (originalUnit.equals(QuantityUnits.MILLIMETERS)) {\n            result = valueDouble / 10;\n        } else if (originalUnit.equals(QuantityUnits.INCHES)) {\n            result = valueDouble * 2.54;\n        } else if (originalUnit.equals(QuantityUnits.CENTIMETERS)) {\n            result = valueDouble;\n        } else {\n            throw new IllegalArgumentException(\"Unknown UnitValue: \" + originalUnit);\n        }\n        return new Double(result);\n    }\n", "    public void deleteObject(String objectId) throws DataAccessException {\n    \tLog.write(\"Enter\", Log.INFO, \"deleteObject\", KasaiFacade.class);\n    \t\n        try {\n            AuthObjectHandler.getInstance().delete(objectId);\n        } catch (DataAccessE", "public static <T>T selectRandomItem(Set<T> items){\n  checkNotNull(items,\"Cannot selectRandomItem from null items\");\n  checkArgument(!items.isEmpty(),\"Cannot selectRandomItem from empty items\");\n  randomGenerator.setSeed(System.currentTimeMillis());\n  int selectedServerIndex=randomGenerator.nextInt(items.size());\n  T item=null;\n  Iterator<T> itemsIterator=items.iterator();\n  for (int i=0; i <= selectedServerIndex && itemsIterator.hasNext(); i++) {\n    item=itemsIterator.next();\n  }\n  return item;\n}\n", "public FilledList ( ) { }", "Item newInteger ( final int value ) { key . set ( value ) ; Item result = get ( key ) ; if ( result == null ) { pool . putByte ( INT ) . putInt ( value ) ; result = new Item ( index ++ , key ) ; put ( result ) ; } return result ; }", "    public void build() throws Exception {\n        this.beanMapping = new BeanMapping();\n        Map propertyCipherMapping = buildPropertyCipherMapFor(cfgRegistry);\n        for (Iterator iter = this.cfgBeanMapping.getMappings().iterator(); iter.hasNext();) {\n            CFGMapping cfgMapping = (CFGMapping) iter.next();\n            String propertyCipherName = cfgMapping.getSpecificPropertyCipher();\n            if (propertyCipherName == null) propertyCipherName = this.cfgBeanMapping.getDefaultPropertyCipher();\n            IPropertyCipher propertyCipher = (IPropertyCipher)propertyCipherMapping.get(propertyCipherName);\n            mapClasses(this.beanMapping, cfgMapping, propertyCipher);\n        }\n    }\n", "public static Integer findLimit(Map<String,String> operatorProperties) throws PlanGenException {\n  String limitStr=getOptionalProperty(LIMIT,operatorProperties);\n  if (limitStr == null) {\n    return null;\n  }\n  Integer limit=Integer.parseInt(limitStr);\n  if (limit < 0) {\n    throw new PlanGenException(\"Limit must be equal to or greater than 0\");\n  }\n  return limit;\n}\n", "\tprotected void closeClientWindow() throws HyperdriveException {\n\t\tgetTargetRenderArea().requestDestroy();\n\t}\n", "public void destroy ( ) { super . destroy ( ) ; }", "private void sendInputStringToProcess ( Process process ) { if ( inputString != null ) { try ( PrintStream ps = new PrintStream ( process . getOutputStream ( ) ) ) { ps . print ( inputString ) ; ps . print ( STR_ ) ; } } }", "public synchronized void flush ( ) { try { writer . flush ( ) ; } catch ( IOException ioe ) { ioe . printStackTrace ( ) ; } }", "public static SystemConfig create ( ) { final SystemConfig r = new SystemConfig ( ) ; r . singleton = new SystemConfig . Key ( ) ; return r ; }", "public static IEditorPart openEditor ( String editorId , IFile file ) { return openEditor ( editorId , new FileEditorInput ( file ) ) ; }", "public void setTargetDirectory(String directory) {\n        if (directory != null && directory.length() > 0) {\n            this.targetDirectory = new File(directory);\n        } else {\n            this.targetDirectory = null;\n        }\n    }", "@Deprecated\n  public static String reverseDns(InetAddress hostIp, String ns)\n    throws NamingException {\n    //\n    // Builds the reverse IP lookup form\n    // This is formed by reversing the IP numbers and appending in-addr.arpa\n    //\n    String[] parts = hostIp.getHostAddress().split(\"\\\\.\");\n    String reverseIP = parts[3] + \".\" + parts[2] + \".\" + parts[1] + \".\"\n      + parts[0] + \".in-addr.arpa\";\n\n    DirContext ictx = new InitialDirContext();\n    Attributes attribute =\n      ictx.getAttributes(\"dns://\"               // Use \"dns:///\" if the default\n                         + ((ns == null) ? \"\" : ns) + \n                         // nameserver is to be used\n                         \"/\" + reverseIP, new String[] { \"PTR\" });\n    ictx.close();\n    \n    return attribute.get(\"PTR\").get().toString();\n  }", "\t\tpublic void detatch() {\n\t\t\tif (this.target != null && !this.target.isDisposed()) {\n\t\t\t\tthis.target.removeDropListener(this);\n\t\t\t}\n\t\t\tthis.target = null;\n\t\t}\n", "public Observable<Book> observeChangingBooks(){\n  return changingBookSubject;\n}\n", "static void link ( final BasicBlock parent , final BasicBlock child ) { parent . m_children . add ( child ) ; child . m_parents . add ( parent ) ; }", "private int measureHeight ( int measureSpec ) { int result = NUM_ ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( count > upLimit ) { return mTextHeight + getPaddingTop ( ) + getPaddingBottom ( ) ; } if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = NUM_ * radius + getPaddingTop ( ) + getPaddingBottom ( ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return result ; }", "    public int compareTo(Age age) {\n        if ((age == DONT_CARE) || (this == DONT_CARE)) {\n            return 0;\n        } else {\n            return ordinal - age.ordinal;\n        }\n    }\n", "public void injectKeyReleased ( char c , int mods ) ;", "private String nextUrlBaseToken ( String url ) { StringBuffer token = new StringBuffer ( ) ; while ( urlBaseEndIndex < url . length ( ) ) { char ch = url . charAt ( urlBaseEndIndex ++ ) ; if ( ch == STR_ || ch == STR_ || ch == STR_ ) { break ; } if ( ch =", "public void eraseRoundRect(final Rectangle2D pRectangle, int pArcW, int pArcH) {\n        eraseShape(toRoundRect(pRectangle, pArcW, pArcH));\n    }", "\tpublic void\tsetName(String an_name) { \n\t\tm_name = new String(an_name);\t}\n", "  public void add(RegularTimePeriod period, Number x, Number y) {\n   add(period, x, y, true); \n  }\n", "public void stop ( ) { if ( mRunning . compareAndSet ( BOOL_ , BOOL_ ) ) { if ( mSource != null ) { mSource . stop ( ) ; switch ( mSource . getSampleType ( ) ) { case COMPLEX : ( ( ComplexSource ) mSource ) . removeListener ( mComplexBufferBroadcaster ) ; break ; case REAL : ( ( RealSource ) mSource ) . removeListener ( mFilteredRealBufferBroadcaster ) ; break ; default : throw new IllegalArgumentException ( STR_ + STR_ ) ; } mSource . dispose ( ) ; mSource = null ; } for ( Module module : mModules ) { module . stop ( ) ; } } }", "@SuppressWarnings(\"deprecation\") private void updateClockControlLight(){\n  if (_clock != null) {\n    Date now=_clock.getTime();\n    int timeNow=now.getHours() * 60 + now.getMinutes();\n    int state=_parentLight.getState();\n    if (_timeOn <= _timeOff) {\n      if ((timeNow < _timeOn) || (timeNow >= _timeOff)) {\n        if (state == Light.ON) {\n          _parentLight.setState(Light.OFF);\n        }\n      }\n else {\n        if (state == Light.OFF) {\n          _parentLight.setState(Light.ON);\n        }\n      }\n    }\n else {\n      if ((timeNow >= _timeOn) || (timeNow < _timeOff)) {\n        if (state == Light.OFF) {\n          _parentLight.setState(Light.ON);\n        }\n      }\n else {\n        if (state == Light.ON) {\n          _parentLight.setState(Light.OFF);\n        }\n      }\n    }\n  }\n}\n", "public static <T>CompletableFuture<T> completedFutureAsync(T result,Executor executor){\n  CompletableFuture<T> future=new CompletableFuture<>();\n  executor.execute(null);\n  return future;\n}\n", "public void pop(){\n  state=(GraphicsState)stack.pop();\n  setTransform(state.xform);\n  setClip(state.cliprgn);\n}\n", "public static String contextAsString(final Set<Attribute> context) {\n        StringBuilder sb = new StringBuilder();\n        for (Attribute attribute : context) {\n            if(sb.length()<1) {\n                sb.append(\"{\");\n            }else {\n                sb.append(\", \");\n            }\n            sb.append(Attribute.propertyKeyForURIBase(attribute, EnvironmentalContext.URI_BASE))\n              .append(\"=\")\n              .append(attribute.getValue())\n              ;\n        }\n        sb.append(\"}\");\n        return sb.toString();\n    }", "public static boolean isBasic(Class<?> aClass){\n  return basicTypes.contains(aClass.getName());\n}\n", "@Override\n\tpublic Point getPoint(int index) {\n\t\tif (index < 0 || index >= m_pointCount)\n\t\t\tthrow new IndexOutOfBoundsException();\n\n\t\t_verifyAllStreams();\n\n\t\tPoint outPoint = new Point();\n\t\toutPoint.assignVertexDescription(m_description);\n\t\tif (outPoint.isEmpty())\n\t\t\toutPoint._setToDefault();\n\n\t\tfor (int attributeIndex = 0; attributeIndex < m_description\n\t\t\t\t.getAttributeCount(); attributeIndex++) {\n\t\t\tint semantics = m_description.getSemantics(attributeIndex);\n\t\t\tfor (int icomp = 0, ncomp = VertexDescription\n\t\t\t\t\t.getComponentCount(semantics); icomp < ncomp; icomp++) {\n\t\t\t\tdouble v = m_vertexAttributes[attributeIndex].readAsDbl(ncomp\n\t\t\t\t\t\t* index + icomp);\n\t\t\t\toutPoint.setAttribute(semantics, icomp, v);\n\t\t\t}\n\t\t}\n\t\treturn outPoint;\n\t}", "private int readByte ( Command command , int value , int index , boolean signed ) throws LibUsbException , UsbException { if ( mDeviceHandle != null ) { ByteBuffer buffer = ByteBuffer . allocateDirect ( NUM_ ) ; int transferred = LibUsb . controlTransfer ( mDeviceHandle , USB_REQUEST_IN , command . getValue ( ) , ( short ) value , ( short ) index , buffer , USB_TIMEOUT_MS ) ; if ( transferred < NUM_ ) { throw new LibUsbException ( STR_ , transferred ) ; } byte result = buffer . get ( NUM_ ) ; if ( signed ) { return ( result & NUM_ ) ; } else { return result ; } } else { throw new LibUsbException ( STR_ , LibUsb . ERROR_NO_DEVICE ) ; } }", "public synchronized Collection<T> getAll() {\n    List<T> all = new ArrayList<T>(size);\n    for (T e = head; e != null; e = e.getNext()) {\n      all.add(e);\n    }\n    return all;\n  }", "public int polyEval(GrowQueue_I8 input , int x ) {\n\t\tint y = input.data[0]&0xFF;\n\n\t\tfor (int i = 1; i < input.size; i++) {\n\t\t\ty = multiply(y,x) ^ (input.data[i]&0xFF);\n\t\t}\n\n\t\treturn y;\n\t}", "public static String sendDhlRequest(String xmlString,Delegator delegator,String shipmentGatewayConfigId,String resource,Locale locale) throws DhlConnectException {\n  String conStr=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,\"connectUrl\",resource,\"shipment.dhl.connect.url\");\n  if (conStr == null) {\n    throw new DhlConnectException(UtilProperties.getMessage(resourceError,\"FacilityShipmentDhlConnectUrlIncomplete\",locale));\n  }\n  if (xmlString == null) {\n    throw new DhlConnectException(UtilProperties.getMessage(resourceError,\"FacilityShipmentDhlXmlCannotBeNull\",locale));\n  }\n  conStr=conStr.trim();\n  String timeOutStr=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,\"connectTimeout\",resource,\"shipment.dhl.connect.timeout\",\"60\");\n  int timeout=60;\n  try {\n    timeout=Integer.parseInt(timeOutStr);\n  }\n catch (  NumberFormatException e) {\n    Debug.logError(e,\"Unable to set timeout to \" + timeOutStr + \" using default \"+ timeout);\n  }\n  if (Debug.verboseOn()) {\n    Debug.logVerbose(\"DHL Connect URL : \" + conStr,module);\n    Debug.logVerbose(\"DHL XML String : \" + xmlString,module);\n  }\n  HttpClient http=new HttpClient(conStr);\n  http.setTimeout(timeout * 1000);\n  String response=null;\n  try {\n    response=http.post(xmlString);\n  }\n catch (  HttpClientException e) {\n    Debug.logError(e,\"Problem connecting with DHL server\",module);\n    throw new DhlConnectException(UtilProperties.getMessage(resourceError,\"FacilityShipmentDhlConnectUrlProblem\",UtilMisc.toMap(\"errorString\",e),locale),e);\n  }\n  if (response == null) {\n    throw new DhlConnectException(UtilProperties.getMessage(resourceError,\"FacilityShipmentDhlReceivedNullResponse\",locale));\n  }\n  if (Debug.verboseOn()) {\n    Debug.logVerbose(\"DHL Response : \" + response,module);\n  }\n  return response;\n}\n", "    public void setVisionModeNight() throws StellariumException {\n        if (!getVisionModeNight()) {\n            core.setColorScheme(conf, \"night_color\");\n            //            ui.setColorScheme(getConfigFile(), \"night_color\");\n        }\n        drawMode = DRAWMODE.NIGHT;\n    }\n", "   protected void setUp() throws ServletException, IOException {\n      File xinsProps = new File(System.getProperty(\"user.dir\"), \"src/tests/xins.properties\");\n      System.setProperty(\"org.xins.server.config\", xinsProps.getAbsolutePath());\n      String warLocation = \"src/tests/build/webapps/allinone/allinone.war\".replace('/', File.separatorChar);\n      File warFile = new File(System.getProperty(\"user.dir\"), warLocation);\n\n      // Start the web server\n      //System.out.println(\"Web server set up.\");\n      _httpServer = new HTTPServletHandler(warFile);\n   }\n", "private void updateVersion(){\n  prop.put(\"version.\" + oldVersion,\"UPDATE_NEEDED\");\n  prop.put(\"version.\" + newVersion,\"CURRENT\");\n  prop.put(\"version.destination.\" + oldVersion,newVersion);\n}\n", "@Override\n    public StartPersonTrackingResult startPersonTracking(StartPersonTrackingRequest request) {\n        request = beforeClientExecution(request);\n        return executeStartPersonTracking(request);\n    }", "public static ReilInstruction createMod ( final long offset , final OperandSize firstSize , final String firstValue , final OperandSize secondSize , final String secondValue , final OperandSize thirdSize , final String thirdValue ) { return createTrinaryI", "    public void update(Observable o, Object arg) {\n        r = getValueSetter(0).getValue();\n        floor.setRadius(r);\n        scatter.setRadius(r);\n        crossDist.setProbability(floor.getProbability());\n        reset();\n    }\n", "  public Document getDocument(Term term) throws IOException {\n    Snapshot snapshot = snapshots.getLatestSnapshot();\n    try {\n      IndexReader reader = snapshot.getIndexReader();\n      int doc = Util.getTermDoc(term, reader);\n      if (doc >= 0)\n        return reader.document(doc);\n      else\n        return null;\n    } finally {\n      snapshot.decRef();\n    }\n  }\n", "private void nextPoint(double x,double y,boolean connect){\n  if (x == px && y == py) {\n    return;\n  }\n  if (w == 0) {\n    if (data == null) {\n      data=new double[6];\n    }\n    if (connect) {\n      w=3;\n    }\n  }\n  if (w != 0 && !connect && !pconnect) {\n    data[w - 3]=px=x;\n    data[w - 2]=py=y;\n    return;\n  }\n  if (w == data.length) {\n    double[] t=new double[w * 2];\n    System.arraycopy(data,0,t,0,w);\n    data=t;\n  }\n  if (connect) {\n    double dx=x - px;\n    double dy=y - py;\n    a+=sqrt(dx * dx + dy * dy);\n  }\n  data[w++]=x;\n  data[w++]=y;\n  data[w++]=a;\n  px=x;\n  py=y;\n  pconnect=connect;\n}\n", "private static byte [ ] [ ] rotateArray ( byte [ ] [ ] bitarray ) { byte [ ] [ ] temp = new byte [ bitarray [ NUM_ ] . length ] [ bitarray . length ] ; for ( int ii = NUM_ ; ii < bitarray . length ; ii ++ ) { int inverseii = bitarray . length - ii - NUM_ ", "public void enableStart(){\n  EventTarget targ=(EventTarget)element;\n  targ.addEventListener(SVGConstants.SVG_EVENT_MOUSEDOWN,this,false);\n}\n", "@Override\n  public final String getFor(final Class<?> pClass, final String pThingName) {\n    if (\"entityEdit\".equals(pThingName) && pClass == Cart.class) {\n      return null;\n    } else if (pClass == CustOrder.class) {\n      if (\"entitySave\".equals(pThingName)) {\n        return PrCuOrSv.class.getSimpleName();\n      } else if (\"entityEdit\".equals(pThingName)\n        || \"entityPrint\".equals(pThingName)) {\n        return PrcEntityRetrieve.class.getSimpleName();\n      }\n      return null;\n    } else if (\"entityEdit\".equals(pThingName)\n      || \"entityConfirmDelete\".equals(pThingName)) {\n      return getForRetrieveForEditDelete(pClass);\n    } else if (\"entityCopy\".equals(pThingName)) {\n      return getForCopy(pClass);\n    } else if (\"entityPrint\".equals(pThingName)) {\n      return getForPrint(pClass);\n    } else if (\"entitySave\".equals(pThingName)) {\n      return getForSave(pClass);\n    } else if (\"entityFDelete\".equals(pThingName)) {\n      return getForFDelete(pClass);\n    } else if (\"entityEFDelete\".equals(pThingName)) {\n      return getForEFDelete(pClass);\n    } else if (\"entityFSave\".equals(pThingName)) {\n      return getForFSave(pClass);\n    } else if (\"entityEFSave\".equals(pThingName)) {\n      return getForEFSave(pClass);\n    } else if (\"entityFolDelete\".equals(pThingName)) {\n      return getForFolDelete(pClass);\n    } else if (\"entityFolSave\".equals(pThingName)) {\n      return getForFolSave(pClass);\n    } else if (\"entityDelete\".equals(pThingName)) {\n      return getForDelete(pClass);\n    } else if (\"entityCreate\".equals(pThingName)) {\n      return getForCreate(pClass);\n    }\n    return null;\n  }", "private double avgDistance(double[] centroid,DBIDs objectIDs,Relation<V> database,int dimension){\n  Mean avg=new Mean();\n  for (DBIDIter iter=objectIDs.iter(); iter.valid(); iter.advance()) {\n    V o=database.get(iter);\n    avg.put(Math.abs(centroid[dimension] - o.doubleValue(dimension)));\n  }\n  return avg.getMean();\n}\n", "public RbrRowImage ( ImageType type , RbrTableChangeSet changeSet , List < OneRowChange . ColumnSpec > specs , List < OneRowChange . ColumnVal > values ) { this . type = type ; this . changeSet = changeSet ; this . specs = specs ; this . values = values ; }", "    public void setSelection(String[] items) {\n        String[] unquoted = new String[items.length];\n        for (int i = 0; i < items.length; i++) {\n            unquoted[i] = StringUtils.removeQuotes(items[i]);\n        }\n        currentSelection = unquoted;\n    }\n", "public CSVReader ( Reader reader , char separator ) { this ( reader , separator , CSVParser . DEFAULT_QUOTE_CHARACTER , CSVParser . DEFAULT_ESCAPE_CHARACTER ) ; }", "public void testSendWithDelay ( ) { PseudoTcpTestTransfer test = new PseudoTcpTestTransfer ( ) ; test . setLocalMtu ( NUM_ ) ; test . setRemoteMtu ( NUM_ ) ; test . setDelay ( NUM_ ) ; test . doTestTransfer ( NUM_ ) ; }", "public StunException ( int id , String message ) { super ( message ) ; setID ( id ) ; }", "   protected boolean isBoolean(String aValue) {\n      return aValue!=null && (TRUE.equalsIgnoreCase(aValue) || FALSE.equalsIgnoreCase(aValue));\n   }\n", "protected static void captureSystemStreams(boolean captureOut, boolean captureErr){\r\n    if(captureOut){\r\n      System.setOut(new RedwoodPrintStream(STDOUT, realSysOut));\r\n    }\r\n    if(captureErr){\r\n      System.setErr(new RedwoodPrintStream(STDERR, realSysErr));\r\n    }\r\n  }", "private static <T> UnmodifiableIterator<Iterator<? extends T>> iterators(Iterable<? extends CloseableIterable<? extends T>> iterables) {\n        final Iterator<? extends Iterable<? extends T>> iterableIterator = iterables.iterator();\n        return new UnmodifiableIterator<Iterator<? extends T>>() {\n            @Override\n            public boolean hasNext() {\n                return iterableIterator.hasNext();\n            }\n\n            @Override\n            public Iterator<? extends T> next() {\n                return iterableIterator.next().iterator();\n            }\n        };\n    }", "    public void delete() throws IsProtectedException {\n        if (keyboardLocked) {\n            return;\n        }\n\n        if (getChar(cursorPosition).getField().isProtected()) {\n            throw new IsProtectedException();\n        }\n\n        getChar(cursorPosition).setChar(' ');\n        getChar(cursorPosition).getField().isModified(true);\n        client.cursorMove(cursorPosition, cursorPosition);\n    }\n", "public int size(){\n  return theList.size();\n}\n", "    protected void trimStackFrames(List<String[]> stacks) {\n         for (int size=stacks.size(), i=size-1; i > 0; i--) {\n             String[] curr = stacks.get(i);\n             String[] next = stacks.get(i-1);\n\n             List<String> currList = new ArrayList<String>(Arrays.asList(curr));\n             List<String> nextList = new ArrayList<String>(Arrays.asList(next));\n             NestedUtils.removeCommonFrames(currList, nextList);\n\n             int trimmed = curr.length - currList.size();\n             if (trimmed > 0) {\n                 currList.add(\"\\t... \"+trimmed+\" more\");\n                 stacks.set(\n                     i,\n                     currList.toArray(new String[currList.size()])\n                 );\n             }\n         }\n     }\n", "public SourcePrinter ( PrintStream out , String [ ] tokenNames ) { this ( out , tokenNames , BOOL_ ) ; }", "public static float ccpLength(final CGPoint v){\n  return (float)Math.sqrt(ccpLengthSQ(v));\n}\n", "public void marshall(ImportSourceCredentialsRequest importSourceCredentialsRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (importSourceCredentialsRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marsha", "public FoxHttpClientBuilder registerFoxHttpInterceptor(FoxHttpInterceptorType interceptorType, FoxHttpInterceptor foxHttpInterceptor) throws FoxHttpException {\n        foxHttpClient.register(interceptorType, foxHttpInterceptor);\n        return this;\n    }", "public static IOException convertCmsException(CmsException e) {\n\n        LOG.error(e.getLocalizedMessage(), e);\n        if (e instanceof CmsSecurityException) {\n            return new AccessDeniedException(e.getMessage(), e);\n        } else if (e ins", "public final static int readMdLinkId ( final StringBuilder out , final String in , final int start ) { int pos = start ; int counter = NUM_ ; while ( pos < in . length ( ) ) { final char ch = in . charAt ( pos ) ; boolean endReached = BOOL_ ; switch ( ch ", "public void removeTable ( String tagString ) { tables . remove ( tagString ) ; }", "  public String escapeExtensionField(String extfield) {\n    return QueryParser.escape(extfield);\n  }\n", "private CPluginOutputDialog(){\n  super((JFrame)null,\"Global Plugin Log\");\n  new CDialogEscaper(this);\n  setLayout(new BorderLayout());\n  m_textArea.setEditable(false);\n  m_textArea.setFont(GuiHelper.MONOSPACED_FONT);\n  add(new JScrollPane(m_textArea));\n  final JPanel bottomPanel=new JPanel(new BorderLayout());\n  bottomPanel.add(new JButton(new ClearAction()),BorderLayout.WEST);\n  bottomPanel.add(new JButton(new CloseAction()),BorderLayout.EAST);\n  add(bottomPanel,BorderLayout.SOUTH);\n  setAlwaysOnTop(true);\n  setJMenuBar(new CLogConsoleMenuBar());\n  m_textArea.addMouseListener(new InternalMouseListener());\n  setSize(600,400);\n}\n", "public static void deleteResourceBundle(SSOToken token,String rbName,String locale) throws SMSException, SSOException {\n  if (rbName == null) {\n    return;\n  }\n  ServiceConfigManager scm=new ServiceConfigManager(token,LOCALE_SERVICE,VERSION);\n  ServiceConfig globalConfig=scm.getGlobalConfig(null);\n  if (locale == null) {\n    try {\n      globalConfig.removeSubConfig(rbName);\n    }\n catch (    SMSException se) {\n      throw new MissingResourceException(_bundle.getString(\"isResourceBundleMsg1\") + rbName + \". \"+ se.getMessage(),_bundle.getString(\"isResourceBundleMsg2\"),_bundle.getString(\"isResourceBundleMsg3\"));\n    }\n  }\n else {\n    ServiceConfig rbConfig=globalConfig.getSubConfig(rbName);\n    if (rbConfig == null) {\n      throw new MissingResourceException(_bundle.getString(\"isResourceBundleMsg0\") + rbName + \". \",_bundle.getString(\"isResourceBundleMsg2\"),_bundle.getString(\"isResourceBundleMsg3\"));\n    }\n else {\n      rbConfig.removeSubConfig(locale);\n    }\n  }\n}\n", "public String toString ( ) { long offset = - NUM_ ; try { offset = getOffset ( ) ; } catch ( IOException e ) { } StringBuffer sb = new StringBuffer ( ) ; sb . append ( this . getClass ( ) . getSimpleName ( ) ) ; sb . append ( STR_ ) . append ( file . getN", "void interrupt ( ) ;", "public static void addCommentMenu ( final JPopupMenu menu , final CGraphModel model , final INaviViewNode node ) { Preconditions . checkNotNull ( menu , STR_ ) ; Preconditions . checkNotNull ( node , STR_ ) ; menu . add ( CActionProxy . proxy ( new CActionEditComments ( model , node ) ) ) ; menu . add ( CActionProxy . proxy ( new CActionCreateCommentNode ( model . getParent ( ) , model . getGraph ( ) . getRawView ( ) , node ) ) ) ; menu . addSeparator ( ) ; }", "@NonNull\n    private Class<?> getBuildConfigClass(@NonNull Context context, @NonNull CoreConfiguration config) throws ClassNotFoundException {\n        final Class configuredBuildConfig = config.buildConfigClass();\n        if (!configuredBuildConfig.equals(Object.class)) {\n            // If set via annotations or programmatically then it will have a real value,\n            // otherwise it will be Object.class (default).\n            return configuredBuildConfig;\n        }\n\n        final String className = context.getPackageName() + \".BuildConfig\";\n        return Class.forName(className);\n    }", "  public void flush() {\n    pipe.reset();\n    bufHold = maxHold;\n  }\n", "private String base64(String value){\n  StringBuffer cb=new StringBuffer();\n  int i=0;\n  for (i=0; i + 2 < value.length(); i+=3) {\n    long chunk=(int)value.charAt(i);\n    chunk=(chunk << 8) + (int)value.charAt(i + 1);\n    chunk=(chunk << 8) + (int)value.charAt(i + 2);\n    cb.append(encode(chunk >> 18));\n    cb.append(encode(chunk >> 12));\n    cb.append(encode(chunk >> 6));\n    cb.append(encode(chunk));\n  }\n  if (i + 1 < value.length()) {\n    long chunk=(int)value.charAt(i);\n    chunk=(chunk << 8) + (int)value.charAt(i + 1);\n    chunk<<=8;\n    cb.append(encode(chunk >> 18));\n    cb.append(encode(chunk >> 12));\n    cb.append(encode(chunk >> 6));\n    cb.append('=');\n  }\n else   if (i < value.length()) {\n    long chunk=(int)value.charAt(i);\n    chunk<<=16;\n    cb.append(encode(chunk >> 18));\n    cb.append(encode(chunk >> 12));\n    cb.append('=');\n    cb.append('=');\n  }\n  return cb.toString();\n}\n", "    public Vector getData() {\n\n\tVector allData = new Vector();\n\n\tEnumeration enum = getDataHash().keys();\n\n\twhile(enum.hasMoreElements()) {\n\t    IMasterDataContainer container = \n\t\t(IMasterDataContainer) enum.nextElement();\n\t    allData.addAll(container.getData());\n\t}\n\treturn allData;\n    }\n", "public int calculate_framesize()\n\t{\n\n\t if (h_layer == 1)\n\t {\n\t   framesize = (12 * bitrates[h_version][0][h_bitrate_index]) /\n\t               frequencies[h_version][h_sample_frequency];\n\t   if (h_padding_bit != 0 ) framesize++;\n\t   framesize <<= 2;\t\t// one slot is 4 bytes long\n\t   nSlots = 0;\n\t }\n\t else\n\t {\n\t   framesize = (144 * bitrates[h_version][h_layer - 1][h_bitrate_index]) /\n\t               frequencies[h_version][h_sample_frequency];\n\t   if (h_version == MPEG2_LSF || h_version == MPEG25_LSF) framesize >>= 1;\t// SZD\n\t   if (h_padding_bit != 0) framesize++;\n\t   // Layer III slots\n\t   if (h_layer == 3)\n\t   {\n\t     if (h_version == MPEG1)\n\t     {\n\t  \t\t nSlots = framesize - ((h_mode == SINGLE_CHANNEL) ? 17 : 32) // side info size\n\t  \t\t\t\t\t\t\t\t  -  ((h_protection_bit!=0) ? 0 : 2) \t\t       // CRC size\n\t  \t\t\t\t\t\t\t\t  - 4; \t\t\t\t\t\t\t\t             // header size\n\t     }\n\t     else\n\t\t {  // MPEG-2 LSF, SZD: MPEG-2.5 LSF\n\t        nSlots = framesize - ((h_mode == SINGLE_CHANNEL) ?  9 : 17) // side info size\n\t  \t\t\t\t\t   \t\t  -  ((h_protection_bit!=0) ? 0 : 2) \t\t       // CRC size\n\t  \t\t\t\t\t\t\t\t  - 4; \t\t\t\t\t\t\t\t             // header size\n\t     }\n\t   }\n\t   else\n\t   {\n\t  \t nSlots = 0;\n\t   }\n\t }\n\t framesize -= 4;             // subtract header size\n\t return framesize;\n\t}", "private void createProjectionIndices ( IQueryResultSet < IEntryPacket > entries ) { if ( isJoined ( ) ) { for ( IEntryPacket entry : entries ) { JoinedEntry joinedEntry = ( JoinedEntry ) entry ; joinedEntry . createProjection ( getQueryColumns ( ) ) ; } }", "private Pair<Long, Integer> updateCooked(byte[] compressedData) {\n        // Uncompress (inflate) the bytes.\n        byte[] cookedBytes;\n        try {\n            cookedBytes = gunzipBytes(compressedData);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Unable to decompress elastic hashinator data.\");\n        }\n\n        int numEntries = (cookedBytes.length >= 4\n                ? ByteBuffer.wrap(cookedBytes).getInt()\n                : 0);\n        int tokensSize = 4 * numEntries;\n        int partitionsSize = 4 * numEntries;\n        if (numEntries <= 0 || cookedBytes.length != 4 + tokensSize + partitionsSize) {\n            throw new RuntimeException(\"Bad elastic hashinator cooked config size.\");\n        }\n        long tokens = Bits.unsafe.allocateMemory(8 * numEntries);\n        ByteBuffer tokenBuf = ByteBuffer.wrap(cookedBytes, 4, tokensSize);\n        ByteBuffer partitionBuf = ByteBuffer.wrap(cookedBytes, 4 + tokensSize, partitionsSize);\n        int tokensArray[] = new int[numEntries];\n        for (int zz = 3; zz >= 0; zz--) {\n            for (int ii = 0; ii < numEntries; ii++) {\n                int value = tokenBuf.get();\n                value = (value << (zz * 8)) & (0xFF << (zz * 8));\n                tokensArray[ii] = (tokensArray[ii] | value);\n            }\n        }\n\n        int lastToken = Integer.MIN_VALUE;\n        for (int ii = 0; ii < numEntries; ii++) {\n            int token = tokensArray[ii];\n            Preconditions.checkArgument(token >= lastToken);\n            lastToken = token;\n            long ptr = tokens + (ii * 8);\n            Bits.unsafe.putInt(ptr, token);\n            final int partitionId = partitionBuf.getInt();\n            Bits.unsafe.putInt(ptr + 4, partitionId);\n        }\n        return Pair.of(tokens, numEntries);\n    }", "public static int interpolateColor(double x,double y,int c0,int c1,int c2,int c3){\n  int a0=(c0 >> 24) & 0xff;\n  int r0=(c0 >> 16) & 0xff;\n  int g0=(c0 >> 8) & 0xff;\n  int b0=c0 & 0xff;\n  int a1=(c1 >> 24) & 0xff;\n  int r1=(c1 >> 16) & 0xff;\n  int g1=(c1 >> 8) & 0xff;\n  int b1=c1 & 0xff;\n  int a2=(c2 >> 24) & 0xff;\n  int r2=(c2 >> 16) & 0xff;\n  int g2=(c2 >> 8) & 0xff;\n  int b2=c2 & 0xff;\n  int a3=(c3 >> 24) & 0xff;\n  int r3=(c3 >> 16) & 0xff;\n  int g3=(c3 >> 8) & 0xff;\n  int b3=c3 & 0xff;\n  double rx=1.0d - x;\n  double ry=1.0d - y;\n  double x0=rx * a0 + x * a1;\n  double x1=rx * a2 + x * a3;\n  int a=(int)(ry * x0 + y * x1);\n  a=a << 24;\n  x0=rx * r0 + x * r1;\n  x1=rx * r2 + x * r3;\n  int r=(int)(ry * x0 + y * x1);\n  r=r << 16;\n  x0=rx * g0 + x * g1;\n  x1=rx * g2 + x * g3;\n  int g=(int)(ry * x0 + y * x1);\n  g=g << 8;\n  x0=rx * b0 + x * b1;\n  x1=rx * b2 + x * b3;\n  int b=(int)(ry * x0 + y * x1);\n  return (a | r | g| b);\n}\n", "private boolean readLine ( InputStream in , StringBuffer buf ) throws IOException { while ( BOOL_ ) { int c = in . read ( ) ; if ( c < NUM_ ) return ( buf . length ( ) > NUM_ ) ; if ( c == STR_ ) { in . mark ( NUM_ ) ; c = in . read ( ) ; if ( c != STR_ ) in . reset ( ) ; return ( BOOL_ ) ; } if ( c == STR_ ) return ( BOOL_ ) ; buf . append ( ( char ) c ) ; } }", "public void destroy ( ) { super . destroy ( ) ; }", "    private List win(List bets, float amountMultiplier, float oddsMultiplier) {\n        List processedBets = new ArrayList();\n        if(bets == null)\n            bets = new ArrayList();\n        while(bets.size() > 0) {\n            Bet b = (Bet)bets.remove(0);\n            b.setWinnings((int)Math.round(b.getAmount() * amountMultiplier) +\n                          (int)Math.round(b.getOdds() * oddsMultiplier));\n            processedBets.add(b);\n            b.getOwner().win(table_, b);\n        }\n        return processedBets;\n    }\n", "public int getMaxBW(Node n1, Node n2) {\n        int max = Integer.MAX_VALUE;\n        for (Link inf : getPath(n1, n2)) {\n            if (inf.getCapacity() < max) {\n                max = inf.getCapacity();\n            }\n            Switch sw = inf.getSwitch();\n            if (sw.getCapacity() >= 0 && sw.getCapacity() < max) {\n                //The >= 0 stays for historical reasons\n                max = sw.getCapacity();\n            }\n\n        }\n        return max;\n    }", "public StringBuilder appendToBuffer(StringBuilder buf) {\n    Iterator<double[]> iter = points.iterator();\n    while(iter.hasNext()) {\n      double[] data = iter.next();\n      for(int i = 0; i < data.length; i++) {\n        if(i > 0) {\n          buf.append(',');\n        }\n        buf.append(data[i]);\n      }\n      if(iter.hasNext()) {\n        buf.append(' ');\n      }\n    }\n    return buf;\n  }", "public static List < SearchResult > search ( final Object element , final ZyLabelContent content , final String searchString , final boolean regEx , final boolean caseSensitive ) { final ArrayList < SearchResult > results = new ArrayList < SearchResult > ( ) ; if ( STR_ . equals ( searchString ) ) { return results ; } int lineCounter = NUM_ ; for ( final ZyLineContent lineContent : content ) { final String lineText = caseSensitive ? lineContent . getText ( ) : lineContent . getText ( ) . toLowerCase ( ) ; int startPosition = NUM_ ; do { startPosition = regEx ? CElementSearcher . doRegexSearch ( element , lineText , lineCounter , searchString , startPosition , caseSensitive , results ) : CElementSearcher . doTextSearch ( element , lineText , lineCounter , searchString , startPosition , caseSensitive , results ) ; } while ( startPosition != - NUM_ ) ; ++ lineCounter ; } return results ; }", "private static byte[] readBytes(final ClientReader inputStream,final int length) throws IOException {\n  final ByteArrayOutputStream baos=new ByteArrayOutputStream();\n  final byte[] data=new byte[length];\n  int read=0;\n  while (read < length) {\n    final int retval=inputStream.read(data,0,length - read);\n    baos.write(data,0,retval);\n    read+=retval;\n  }\n  return baos.toByteArray();\n}\n", "    public String deepSerialize(Object target, StringBuilder out) {\n        return serialize(target, SerializationType.DEEP, new StringBuilderOutputHandler(out));\n    }\n", "public void paint ( Graphics2D g ) { g . setRenderingHint ( RenderingHints . KEY_ANTIALIASING , RenderingHints . VALUE_ANTIALIAS_ON ) ; origAlpha = NUM_ ; Composite origComposite = g . getComposite ( ) ; if ( origComposite instanceof AlphaComposite ) { AlphaComposite origAlphaComposite = ( AlphaComposite ) origComposite ; if ( origAlphaComposite . getRule ( ) == AlphaComposite . SRC_OVER ) { origAlpha = origAlphaComposite . getAlpha ( ) ; } } AffineTransform trans_0 = g . getTransform ( ) ; paintRootGraphicsNode_0 ( g ) ; g . setTransform ( trans_0 ) ; }", "    public int getNodeName(int nodeIndex, boolean free) {\n\n        if (nodeIndex == -1) {\n            return -1;\n        }\n\n        int chunk = nodeIndex >> CHUNK_SHIFT;\n        int index = nodeIndex & CHUNK_MASK;\n        return free ? clearChunkIndex(fNodeName, chunk, index)\n                    : getChunkIndex(fNodeName, chunk, index);\n\n    } // getNodeName(int,boolean):int\n", "   public boolean readBoolean() throws IOException, IllegalStateException {\n      int i = read();\n      return (i != 0);\n   }\n", "public void matched ( E event , int taskId ) ;", "\tpublic void resetAll() {\n\t\tresetObjects();\n\t\tresetFacts();\n\t}\n", "CharacterHit hitText(CaretOffsetX x, double y) {\n        return text.hit(x.value, y);\n    }", "    public void removeListDataListener(ListDataListener l) {\n        listeners.remove(ListDataListener.class, l);\n    }\n", "public SectionContainerBackend ( final SQLProvider provider , final INaviModule module ) { this . provider = Preconditions . checkNotNull ( provider , STR_ ) ; this . module = Preconditions . checkNotNull ( module , STR_ ) ; }", "public static Builder createBuilder ( Header header , WritableFontData data ) { return new Builder ( header , data ) ; }", "void updateSAML2EntityConfig(String realm,String cotName,Set trustedProviders) throws COTException {\n  String classMethod=\"COTManager:updateSAML2EntityConfig\";\n  String entityId=null;\n  SAML2COTUtils saml2CotUtils=new SAML2COTUtils(callerSession);\n  if (trustedProviders != null && !trustedProviders.isEmpty()) {\n    for (Iterator iter=trustedProviders.iterator(); iter.hasNext(); ) {\n      entityId=(String)iter.next();\n      try {\n        saml2CotUtils.updateEntityConfig(realm,cotName,entityId);\n      }\n catch (      SAML2MetaException sme) {\n        throw new COTException(sme);\n      }\ncatch (      JAXBException e) {\n        debug.error(classMethod,e);\n        String[] data={e.getMessage(),cotName,entityId,realm};\n        LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_CREATE_COT_DESCRIPTOR,data);\n        throw new COTException(e);\n      }\n    }\n  }\n}\n", "\tpublic void setCustomerShippingAddressId(String customerShippingAddressId) {\n\t\tif(this.paymentTransaction == null) {\n\t\t\tthis.paymentTransaction = PaymentTransaction.createPaymentTransaction();\n\t\t}\n\t\tthis.paymentTransaction.setCustomerShippingAddressId(customerShippingAddressId);\n\t}\n", "  private boolean providesAbstractMethods(ProgramCode superClass) {\n\n    // Interfaces don't have to provide inherited abstract methods\n    if (this.getType() == Component.INTERFACE) {\n      return true;\n    }\n\n    Iterator iter = superClass.getMembers().iterator();\n\n    while (iter.hasNext()) {\n      Member mbr = (Member) iter.next();\n      if (mbr instanceof Method) {\n\tMethod method = (Method) mbr;\n\n\tif (method.isAbstract()) {\n\t  log.fine(\"Abstract method found from superclass, should be provided.\");\n\n\t  if (! hasMethodWithEqualSignature(method)) {\n\t    log.fine(\"Conflict: abstract method is not provided, method = \" \n\t\t     + method.toString());\n\t    return false;\n\t  }\n\t}\n      }\n    }\n\n    return true;\n  }\n", "\tpublic void run() {\n\n\t\twhile (true) {\n\t\t\t\n\t\t\t// updates and renders the current frame\n\t\t\trender();\n\t\t\t\n\t\t\t// be nice - share the processor\n\t\t\tThread.yield();\n\t\t}\n\n\t}\n", "@Override\n    public JDefinedClass apply(String nodeName, JsonNode node, JsonNode parent, JDefinedClass jclass, Schema schema) {\n\n        if (node != null && node.isBoolean() && node.asBoolean() == false) {\n            // no additional properties allowed\n            return jclass;\n        }\n\n        if (!this.ruleFactory.getGenerationConfig().isIncludeAdditionalProperties()) {\n            // no additional properties allowed\n            return jclass;\n        }\n\n        if (!ruleFactory.getAnnotator().isAdditionalPropertiesSupported()) {\n            // schema allows additional properties, but serializer library can't support them\n            return jclass;\n        }\n\n        JType propertyType;\n        if (node != null && node.size() != 0) {\n            propertyType = ruleFactory.getSchemaRule().apply(nodeName + \"Property\", node, parent, jclass, schema);\n        } else {\n            propertyType = jclass.owner().ref(Object.class);\n        }\n\n        JFieldVar field = addAdditionalPropertiesField(jclass, propertyType);\n\n        addGetter(jclass, field);\n\n        addSetter(jclass, propertyType, field);\n\n        if (ruleFactory.getGenerationConfig().isIncludeJsr303Annotations()) {\n            ruleFactory.getValidRule().apply(nodeName, node, parent, field, schema);\n        }\n\n        if (ruleFactory.getGenerationConfig().isGenerateBuilders()) {\n            addBuilder(jclass, propertyType, field);\n        }\n\n        return jclass;\n    }", "private static Supplier<IllegalArgumentException> handleNonExistentModule(String module){\n  return null;\n}\n", "void receivePairResult ( String deviceMac , boolean success , Queue < String > queue ) ;", "protected byte[] engineSign() throws SignatureException {\n  BigInteger k=generateK(presetQ);\n  BigInteger r=generateR(presetP,presetQ,presetG,k);\n  BigInteger s=generateS(presetX,presetQ,r,k);\n  try {\n    DerOutputStream outseq=new DerOutputStream(100);\n    outseq.putInteger(r);\n    outseq.putInteger(s);\n    DerValue result=new DerValue(DerValue.tag_Sequence,outseq.toByteArray());\n    return result.toByteArray();\n  }\n catch (  IOException e) {\n    throw new SignatureException(\"error encoding signature\");\n  }\n}\n", "public void init(TempCharBuffer head)\n  {\n    _top = head;\n    _head = head;\n\n    if (head != null) {\n      _buffer = head.buffer();\n      _length = head.getLength();\n    }\n    else\n      _length = 0;\n\n    _offset = 0;\n  }", "public static void writeFile ( IFile file , final FileOutput output , IProgressMonitor monitor ) throws CoreException { try { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; output . writeFile ( bos ) ; ByteArrayInputStream bis = new ByteArray", "public static String escapeJson(final String text,\n                                    final JsonEscapeType type, final JsonEscapeLevel level) {\n\n        if (type == null) {\n            throw new IllegalArgumentException(\"The 'type' argument cannot be null\");\n        }\n\n        if (level == null) {\n            throw new IllegalArgumentException(\"The 'level' argument cannot be null\");\n        }\n\n        return JsonEscapeUtil.escape(text, type, level);\n\n    }", "static RightThreadedBinaryTree<Integer> buildComplete(int n){\n  RightThreadedBinaryTree<Integer> bt=new RightThreadedBinaryTree<Integer>();\n  int b=(int)Math.pow(2,n - 1);\n  for (int i=0; i < n; i++) {\n    bt.insert(b);\n    for (int j=1; j <= Math.pow(2,i) - 1; j++) {\n      bt.insert(b + 2 * b * j);\n    }\n    b=b / 2;\n  }\n  return bt;\n}\n", "public abstract void onSkipPressed ( ) ;", "default G useDefaultGroup(){\n  return useOptionalGroup(Optional.empty());\n}\n", "void deletedFunctionNodeComment ( INaviFunctionNode functionNode , IComment comment ) ;", "private void addWeekNumberLabels() {\n        weekNumberLabels = new ArrayList<JLabel>();\n        int weekNumberLabelColumnX = constantFirstWeekNumberLabelCell.x;\n        int weekNumberLabelWidthInCells = 1;\n        int weekNumberLabelHeightInCells = 1;\n        for (int i = 0; i < 6; ++i) {\n            int weekNumberLabelRowY = (i + constantFirstWeekNumberLabelCell.y);\n            JLabel weekNumberLabel = new JLabel();\n            weekNumberLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            weekNumberLabel.setVerticalAlignment(SwingConstants.CENTER);\n            weekNumberLabel.setBorder(new EmptyBorder(constantWeekNumberLabelInsets));\n            weekNumberLabel.setOpaque(true);\n            weekNumberLabel.setText(\"3\" + i);\n            weekNumberLabel.setVisible(false);\n            CellConstraints constraints = CC.xywh(weekNumberLabelColumnX, weekNumberLabelRowY,\n                weekNumberLabelWidthInCells, weekNumberLabelHeightInCells);\n            centerPanel.add(weekNumberLabel, constraints);\n            weekNumberLabels.add(weekNumberLabel);\n        }\n        setSizeOfWeekNumberLabels();\n    }", "public void removeListener ( final IZyGraphSelectionListener listener ) { m_selectionObserver . removeListener ( listener ) ; }", "public int getIconColor(Context ctx) {\n        int iconColor;\n        if (this.isEnabled()) {\n            iconColor = ColorHolder.color(getIconColor(), ctx, R.attr.material_drawer_primary_icon, R.color.material_drawer_primary_icon);\n        } else {\n            iconColor = ColorHolder.color(getDisabledIconColor(), ctx, R.attr.material_drawer_hint_icon, R.color.material_drawer_hint_icon);\n        }\n        return iconColor;\n    }", "    protected void toXMLImpl(XMLStreamWriter out) throws XMLStreamException {\n        // Start element:\n        out.writeStartElement(getXMLElementTagName());\n        out.writeAttribute(ID_ATTRIBUTE_TAG, getId());\n        out.writeAttribute(\"editable\", Bo", "public static Normalizer2WithImpl getN2WithImpl(int index) {\n        switch(index) {\n        case 0: return getNFCInstance().decomp;  // NFD\n        case 1: return getNFKCInstance().decomp; // NFKD\n        case 2: return getNFCInstance().comp;    // NFC\n        case 3: return getNFKCInstance().comp;   // NFKC\n        default: return null;\n        }\n    }", "void close ( ) ;", "default EnumDeclaration asEnum(){\n  throw new UnsupportedOperationException(String.format(\"%s is not an enum\",this));\n}\n", "public static Rectangle getSelectedBounds(BufferedImage p) {\n\t\tint width = p.getWidth();\n        int height = p.getHeight();\n\t\tint maxX = 0, maxY = 0, minX = width, minY = height;\n\t\tboolean anySelected = false;\n\t\tint y1;\n\t\tint [] pixels = null;\n\t\t\n\t\tfor (", "\tpublic void invalidate(){\n\t\tthrow new RuntimeException(\"Stub\");\n\t}\n", "public static void download ( long globalId ) { User user = new User ( ) ; user . globalId = globalId ; List < Review > reviews = Server . reviews ( user ) ; if ( reviews != null ) { int size = reviews . size ( ) ; for ( int i = NUM_ ; i < size ; i ++ ) { add ( reviews . get ( i ) ) ; } } }", "  public void updateDocument(Term term, Document doc) throws CorruptIndexException, IOException {\n    ensureOpen();\n    updateDocument(term, doc, getAnalyzer());\n  }\n", "public ResultType analyze ( IAnalysisCache analysisCache , DescriptorType descriptor ) throws CheckedAnalysisException ;", "public BlurBuilder algorithm(EBlurAlgorithm algorithm) {\n        data.blurAlgorithm = BuilderUtil.getIBlurAlgorithm(algorithm, data.contextWrapper);\n\n        return this;\n    }", "private static Request build(final Request req,\n        final String hdr, final String val) throws IOException {\n        final Request request;\n        if (new RqHeaders.Base(req).header(hdr).iterator().hasNext()) {\n            request = req;\n        } else {\n            request = new RqWithHeader(req, hdr, val);\n        }\n        return request;\n    }", "private void validateExplicitHashKey(final String explicitHashKey){\n  if (explicitHashKey == null) {\n    return;\n  }\n  BigInteger b=null;\n  try {\n    b=new BigInteger(explicitHashKey);\n    if (b.compareTo(UINT_128_MAX) > 0 || b.compareTo(BigInteger.ZERO) < 0) {\n      throw new IllegalArgumentException(\"Invalid explicitHashKey, must be greater or equal to zero and less than or equal to (2^128 - 1), got \" + explicitHashKey);\n    }\n  }\n catch (  NumberFormatException e) {\n    throw new IllegalArgumentException(\"Invalid explicitHashKey, must be an integer, got \" + explicitHashKey);\n  }\n}\n", "private static Constructor<?> findConstructorForInnerClass(final Class<?> klazz, final Class<?> declaringClass) {\n    final Constructor<?>[] constructors = klazz.getDeclaredConstructors();\n    if (constructors.length == 1) {\n      return constructors[0];\n    }\n    for (final Constructor<?> c : constructors) {\n      final Class<?>[] params = c.getParameterTypes();\n      if (params.length == 1 && params[0] == declaringClass) {\n        return c;\n      }\n    }\n    return constructors[0];\n  }", "  protected boolean closeEditorCallback(E e) {\n    return true;\n  }\n", "public boolean instructionIsReturn ( ) { return isReturn ; }", "public TLCJobChangeListener ( Model model ) { this . model = model ; }", "\tpublic String mapString(String originalString) {\n\t\ttry {\n\t\t\treturn URLDecoder.decode(originalString, \"UTF-8\");\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tthrow new RuntimeException(\"Missing encoding 'UTF-8' in Java installation!\");\n\t\t}\n\t}\n", "private CharSequence parseString() throws ParseException {\n        skipWhitespace();\n        if (peek() != '\"') {\n            return null;\n        }\n        next();\n        final int startIdx = getPosition();\n\n        // Fast path\n        boolean hasEscape = false;\n        while (hasMore()) {\n            final char c = getc();\n            if (c == '\\\\') {\n                switch (getc()) {\n                case 'b':\n                case 'f':\n                case 'n':\n                case 'r':\n                case 't':\n                case '\\'':\n                case '\"':\n                case '/':\n                case '\\\\':\n                    hasEscape = true;\n                    break;\n                case 'u':\n                    hasEscape = true;\n                    advance(4);\n                    break;\n                default:\n                    throw new ParseException(this, \"Invalid escape sequence: \\\\\" + c);\n                }\n            } else if (c == '\"') {\n                break;\n            }\n        }\n        final int endIdx = getPosition() - 1;\n        if (!hasEscape) {\n            return getSubsequence(startIdx, endIdx);\n        }\n\n        // Slow path (for strings with escape characters)\n        setPosition(startIdx);\n        final StringBuilder buf = new StringBuilder();\n        while (hasMore()) {\n            final char c = getc();\n            if (c == '\\\\') {\n                switch (getc()) {\n                case 'b':\n                    buf.append('\\b');\n                    break;\n                case 'f':\n                    buf.append('\\f');\n                    break;\n                case 'n':\n                    buf.append('\\n');\n                    break;\n                case 'r':\n                    buf.append('\\r');\n                    break;\n                case 't':\n                    buf.append('\\t');\n                    break;\n                case '\\'':\n                case '\"':\n                case '/':\n                case '\\\\':\n                    buf.append(c);\n                    break;\n                case 'u':\n                    int charVal = 0;\n                    charVal = getAndParseHexChar() << 12;\n                    charVal |= getAndParseHexChar() << 8;\n                    charVal |= getAndParseHexChar() << 4;\n                    charVal |= getAndParseHexChar();\n                    buf.append((char) charVal);\n                    break;\n                default:\n                    throw new ParseException(this, \"Invalid escape sequence: \\\\\" + c);\n                }\n            } else if (c == '\"') {\n                break;\n            } else {\n                buf.append(c);\n            }\n        }\n        skipWhitespace();\n        return buf.toString();\n    }", "public static boolean isDouble ( ClassNode type ) { return double_TYPE == type ; }", "@Override public void run(){\n  try {\n    audioLine.open();\n    audioLine.start();\n    audioLine.flush();\n    AudioFormat format=audioLine.getFormat();\n    byte[] buffer=new byte[4000];\n    while (audioLine.isOpen()) {\n      boolean systemTurnBeforeRead=outputSpeech != null;\n      int numBytesRead=audioLine.read(buffer,0,buffer.length);\n      if (systemTurnBeforeRead && outputSpeech == null) {\n        audioLine.drain();\n        continue;\n      }\n else       if (outputSpeech != null || numBytesRead == 0 || (!voiceActivityDetection && inputSpeech == null)) {\n        if (speechPanel != null) {\n          speechPanel.clearVolume();\n        }\n        continue;\n      }\n      double rms=AudioUtils.getRMS(buffer,format);\n      currentVolume=(currentVolume + rms) / 2;\n      if (rms < backgroundVolume) {\n        backgroundVolume=rms;\n      }\n else {\n        backgroundVolume+=(rms - backgroundVolume) * 0.003;\n      }\n      if (speechPanel != null) {\n        speechPanel.updateVolume((int)currentVolume);\n      }\n      double difference=currentVolume - backgroundVolume;\n      if (voiceActivityDetection && inputSpeech == null && difference > VOLUME_THRESHOLD) {\n        startRecording();\n      }\n      if (inputSpeech != null && !inputSpeech.isFinal()) {\n        inputSpeech.write(buffer);\n        if (voiceActivityDetection && difference < VOLUME_THRESHOLD / 10) {\n          stopRecording();\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n", "public ResourceBundle getResourceBundle(Class<?> aClass, String bundleName, Locale locale) {\n        ResourceBundle bundle = null;\n        ClassLoader classLoader = null;\n\n        if (bundleName == null) // instead of waiting for ResourceBundle to\n                                // throw the NPE, do it now\n            throw new NullPointerException(\"Unable to load resource bundle: null bundleName\");\n\n        if (locale == null)\n            locale = Locale.getDefault();\n\n        // TODO: add resource bundle cache.. ?\n\n        // yikes! TRY to figure out the class from the callstack--\n        // have to do this every time aClass is null coming in, which is\n        // definitely not optimal, but at least makes sure the resource bundle\n        // is loaded from the right place\n        if (aClass == null) {\n            if (finder == null)\n                finder = StackFinder.getInstance();\n\n            if (finder != null)\n                aClass = finder.getCaller();\n        }\n\n        if (aClass != null) {\n            // If aClass is NOT null (it was passed in, or we found it),\n            // use its classloader first to try loading the resource bundle\n            try {\n                classLoader = aClass.getClassLoader();\n                bundle = ResourceBundle.getBundle(bundleName, locale, classLoader);\n            } catch (RuntimeException re) {\n                logEvent(\"Unable to load {0} from {1} (from class {2}) in {3}; caught exception: {4}\", new Object[] { bundleName, classLoader, aClass, locale, re });\n            }\n        }\n\n        if (bundle == null) {\n            // If the bundle wasn't found using the class' classloader,\n            // try the default classloader (in OSGi, will be in the RAS\n            // bundle..)\n            try {\n                bundle = ResourceBundle.getBundle(bundleName, locale);\n            } catch (RuntimeException re) {\n                logEvent(\"Unable to load {0} from {1} in {2}; caught exception: {3}\", new Object[] { bundleName, classLoader, locale, re });\n\n                try {\n                    // Try the context classloader\n                    classLoader = (ClassLoader) AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n                        public Object run() throws Exception {\n                            return Thread.currentThread().getContextClassLoader();\n                        }\n                    });\n\n                    bundle = ResourceBundle.getBundle(bundleName, locale, classLoader);\n                } catch (PrivilegedActionException pae) {\n                    logEvent(\"Unable to load {0} from {1} in {2}; caught exception: {3}\", new Object[] { bundleName, classLoader, locale, pae });\n                    throw new RuntimeException(\"Unable to get context classloader\", pae);\n                }\n            }\n        }\n\n        return bundle;\n    }", "public static Set<Policy> policies(Config config) {\n    BasicSettings settings = new BasicSettings(config);\n    return settings.admission().stream().map(admission ->\n      new SegmentedLruPolicy(admission, config)\n    ).collect(toSet());\n  }", "\tpublic void actionPerformed(ActionEvent event) {\n\t\tColor color = getColor();\n\t\tcolor = JColorChooser.showDialog(button,\"Select color:\",color);\n\t\tif (node == null || color == null) return;\n\t\tsetColor(color);\n\t}\n", "boolean handlePacket ( T pkt ) ;", "public static int parseMajorJavaVersion(String version){\n  String jvmVersion=version;\n  if (jvmVersion.startsWith(\"1.\")) {\n    jvmVersion=jvmVersion.substring(2);\n  }\n  int separator=jvmVersion.indexOf('.');\n  if (separator > 0) {\n    jvmVersion=jvmVersion.substring(0,separator);\n  }\n  separator=jvmVersion.indexOf('-');\n  if (separator > 0) {\n    jvmVersion=jvmVersion.substring(0,separator);\n  }\n  return Integer.parseInt(jvmVersion);\n}\n", "public int consistencyCheck ( String method , String schemaName , String tableName , int rowOffset , int rowLimit ) throws Exception ;", "public static boolean different(GenericRecord first,GenericRecord second,List<String> valueFieldNames){\n  for (  String valueFieldName : valueFieldNames) {\n    Object firstValue=first.get(valueFieldName);\n    Object secondValue=second.get(valueFieldName);\n    if (firstValue != null && secondValue != null && !firstValue.equals(secondValue)) {\n      return true;\n    }\n    if ((firstValue != null && secondValue == null) || (firstValue == null && secondValue != null)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "   private void initMessage() {\n   \n      //See if there is a Message Panel already\n      if(descriptor.getCustomPanel() != null) {\n          add(descriptor.getCustomPanel(), BorderLayout.CENTER);\n         return;\n      }\n      \n      //See if there is an Exception\n      if(descriptor.getException() != null) {\n         initExceptionMessage();\n         return;\n      }\n      \n      add(createMessageLabel(), BorderLayout.CENTER);\n   }\n", "static <T>T checkNotNull(T instance,String name){\n  if (instance == null) {\n    throw new NullPointerException(name + \" must not be null\");\n  }\n  return instance;\n}\n", "public static void validateAttribute(Attr attr,String validatorClass,String rule) throws UMSException, DataConstraintException {\n  if (attr != null) {\n    String[] values=attr.getStringValues();\n    for (int i=0; i < values.length; i++) {\n      String aValue=values[i];\n      if ((aValue != null) && (!aValue.equalsIgnoreCase(\"\")) && (validatorClass != null)) {\n        IValidator validator=null;\n        try {\n          Class theClass=Class.forName(validatorClass);\n          validator=(IValidator)theClass.newInstance();\n        }\n catch (        Exception e) {\n          throw new UMSException(i18n.getString(IUMSConstants.INSTANCE_FAILED),e);\n        }\n        if (!validator.validate(aValue,rule)) {\n          String msg=i18n.getString(IUMSConstants.DATA_CONSTRAINT);\n          throw new DataConstraintException(msg + \": \" + \"{ type=\"+ attr.getName()+ \", value=\"+ aValue+ \" }\");\n        }\n      }\n    }\n  }\n}\n", "public abstract boolean isProvisioning ( ) ;", "private CGlobalSettings ( ) { }", "public void validateConfigurationValues ( ) throws ConfigurationException { if ( getKeepAliveTimeout ( ) <= NUM_ || getKeepAliveTimeout ( ) > ConfigurationConstants . KEEP_ALIVE_TIMEOUT_MAX ) { throw new ConfigurationException ( STR_ + getKeepAliveTimeout", "\tpublic void windowClosing() {\n\t\tExtensionManager.getInstance().shutdownExtensionsWindow(this);\n\t}\n", "    protected void deleteDirectoryContents(File directory) {\n        File[] children = directory.listFiles();\n        if (children != null) {\n            for (File child : children) {\n                if (child.isDirectory()) {\n                    deleteDirectoryContents(child);\n                }\n                boolean deleted = child.delete();\n                if (!deleted) {\n                    throw new IllegalStateException(\"Failed to delete: \"\n                            + child);\n                }\n            }\n        }\n    }\n", "public static boolean isSerializable(String classname){\n  boolean result;\n  try {\n    result=isSerializable(Class.forName(classname));\n  }\n catch (  Exception e) {\n    result=false;\n  }\n  return result;\n}\n", "@Override public int hashCode(){\n  int result=23;\n  long l=Double.doubleToLongBits(this.top);\n  result=37 * result + (int)(l ^ (l >>> 32));\n  l=Double.doubleToLongBits(this.bottom);\n  result=37 * result + (int)(l ^ (l >>> 32));\n  l=Double.doubleToLongBits(this.left);\n  result=37 * result + (int)(l ^ (l >>> 32));\n  l=Double.doubleToLongBits(this.right);\n  result=37 * result + (int)(l ^ (l >>> 32));\n  return result;\n}\n", "public void doSaveWithoutValidating ( IProgressMonitor monitor ) { this . commitPages ( monitor , BOOL_ ) ; model . save ( monitor ) ; this . editorDirtyStateChanged ( ) ; }", "\t\tpublic Fleet getFleetAt(int x, int y) {\n\t\t\tfor (Fleet f : player().fleets.keySet()) {\n\t\t\t\tif (knowledge(f, FleetKnowledge.VISIBLE) >= 0) {\n\t\t\t\t\tint x0 = (int)(f.x * width / commons.starmap().background.getWidth());\n\t\t\t\t\tint y0 = (int)(f.y * height / commons.starmap().background.getHeight());\n\t\t\t\t\tint w = f.owner.fleetIcon.getWidth();\n\t\t\t\t\tint h = y0 - f.owner.fleetIcon.getHeight();\n\t\t\t\t\tint x1 = x0 - w / 2;\n\t\t\t\t\tint y1 = h / 2;\n\t\t\t\t\t\n\t\t\t\t\tif (x >= x1 - 1 && x <= x1 + w + 2 && y >= y1 - 1 && y <= y1 + h + 2) {\n\t\t\t\t\t\treturn f;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\treturn null;\n\t\t}\n", "    public double doubleValue() {\n        return this.value;\n    }\n", "public static String urlEncode(String str) {\n        try {\n            String encodeForForm = URLEncoder.encode(str, \"UTF-8\");\n            String encodeForUrl = encodeForForm.replace(\"+\", \"%20\");\n            return encodeForUrl;\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(\"JVM does not support UTF-8\");\n        }\n    }", "public void debug(String msg) {\n        if (!logger.isDebugEnabled())\n            return;\n\n        if (instanceofLAL) {\n            ((LocationAwareLogger) logger).log(null, fqcn, LocationAwareLogger.DEBUG_INT, msg, null, null);\n        } else {\n          ", "    public void update(RevenueSource rs, Connection conn) throws DataException, SQLException {\n        super.update(rs, conn);\n        PrintOrder po = (PrintOrder)rs;\n        PreparedStatement ps = conn.prepareStatement(\"update PRINTS set QUANTITY = ? where PRINTID = ?\");\n        ps.setInt(1, po.getQuantity());\n        ps.setString(2, po.getId());\n        ps.executeUpdate();\n    }\n", "public abstract Socket connect ( ) ;", "public void removeListener ( Listener < ComplexBuffer > listener ) { synchronized ( mComplexBufferBroadcaster ) { mComplexBufferBroadcaster . removeListener ( listener ) ; if ( ! mComplexBufferBroadcaster . hasListeners ( ) ) { mBufferProcessor . stop ( ) ; } } }", "public static Tailer create ( File file , TailerListener listener ) { return create ( file , listener , DEFAULT_DELAY_MILLIS , BOOL_ ) ; }", "public Matrix timesEquals ( double s ) { for ( int i = NUM_ ; i < m ; i ++ ) { for ( int j = NUM_ ; j < n ; j ++ ) { A [ i ] [ j ] = s * A [ i ] [ j ] ; } } return this ; }", "private static Duration parseDuration(String periodString) {\n    DateTime zeroEpoc = new DateTime(0);\n    return new Duration(zeroEpoc, zeroEpoc.plus(ISOPeriodFormat.standard().parsePeriod(periodString)));\n  }", "private final void stop(){\n  logMessage(thread.getName() + \" received stop() request.\");\n  stopped=true;\n  thread.interrupt();\n}\n", "boolean isHeading ( ) ;", "public void iterateVisible ( final INodeCallback < NodeType > callback ) ;", "public static byte[] decode(String data){\n  int len=data.length() / 4 * 3;\n  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);\n  try {\n    encoder.decode(data,bOut);\n  }\n catch (  Exception e) {\n    throw new DecoderException(\"unable to decode base64 string: \" + e.getMessage(),e);\n  }\n  return bOut.toByteArray();\n}\n", "static void checkIdentifier ( final String name , final int start , final int end , final String msg ) { if ( name == null || ( end == - NUM_ ? name . length ( ) <= start : end <= start ) ) { throw new IllegalArgumentException ( STR_ + msg + STR_ ) ; } if ( ! Character . isJavaIdentifierStart ( name . charAt ( start ) ) ) { throw new IllegalArgumentException ( STR_ + msg + STR_ + name ) ; } int max = end == - NUM_ ? name . length ( ) : end ; for ( int i = start + NUM_ ; i < max ; ++ i ) { if ( ! Character . isJavaIdentifierPart ( name . charAt ( i ) ) ) { throw new IllegalArgumentException ( STR_ + msg + STR_ + name ) ; } } }", "public static Vector2 max ( Vector2 o1 , Vector2 o2 ) { return new Vector2 ( Math . max ( o1 . x , o2 . x ) , Math . max ( o1 . z , o2 . z ) ) ; }", "  public void exit() {\n    driver.exit(0);\n  }\n", "\t\n\tpublic Element toXml() throws XmlException {\t\t\n\t\tElement root = new Element(XML_EL);\n\t\t\n\t\tIterator it = mealTemplates.values().iterator();\n\t\t\n\t\twhile (it.hasNext()) {\n\t\t\troot.addContent(((DbblMealTemplate) it.next()).toXml());\n\t\t}\n\t\t\n\t\treturn root;\t\t\n\t}\n", "    public int left() {\n        return getDMinimum();\n    }\n", "public DNetscapeCertificateRenewalUrl(JDialog parent,byte[] value) throws IOException {\n  super(parent);\n  setTitle(res.getString(\"DNetscapeCertificateRenewalUrl.Title\"));\n  initComponents();\n  prepopulateWithValue(value);\n}\n", "public Region region (final float rx, final float ry, final float rwidth, final float rheight) {\n    final Image image = this;\n    return new Region() {\n      private Tile tile;\n      @Override public boolean isLoaded () { return image.isLoaded(); }\n      @Override public Tile tile () {\n        if (tile == null) tile = image.texture().tile(rx, ry, rwidth, rheight);\n        return tile;\n      }\n      @Override public RFuture<Tile> tileAsync () {\n        return image.state.map(new Function<Image,Tile>() {\n          public Tile apply (Image image) { return tile(); }\n        });\n      }\n\n      @Override public float width () { return rwidth; }\n      @Override public float height () { return rheight; }\n\n      @Override public void draw (Object ctx, float x, float y, float width, float height) {\n        image.draw(ctx, x, y, width, height, rx, ry, rwidth, rheight);\n      }\n      @Override public void draw (Object ctx, float dx, float dy, float dw, float dh,\n                                  float sx, float sy, float sw, float sh) {\n        image.draw(ctx, dx, dy, dw, dh, rx+sx, ry+sy, sw, sh);\n      }\n    };\n  }", "protected ArrayList<GCParser> create_gc_parsers(GCStats gc_stats,boolean verbose){\n  ArrayList<GCParser> parsers=new ArrayList<GCParser>(7);\n  parsers.add(new ParGCYoungGCParser(gc_stats,verbose));\n  parsers.add(new FWYoungGCParser(gc_stats,verbose));\n  parsers.add(new ParGCFullGCParser(gc_stats,verbose));\n  parsers.add(new CMSGCParser(gc_stats,verbose));\n  parsers.add(new ParCompactPhaseGCParser(gc_stats,verbose));\n  parsers.add(new FWOldGCParser(gc_stats,verbose));\n  parsers.add(new FWFullGCParser(gc_stats,verbose));\n  parsers.add(new VerboseGCParser(gc_stats,verbose));\n  return parsers;\n}\n", "public static Collection<AnnotationValue> resolveTypeQualifiers(AnnotationValue value) {\n        LinkedList<AnnotationValue> result = new LinkedList<>();\n        resolveTypeQualifierNicknames(value, result, new LinkedList<ClassDescriptor>());\n        return result;\n    }", "public static void playSampleTune ( ) { if ( ! sampleTuneThread . isAlive ( ) ) { sampleTuneThread = new SampleTuneThread ( ) ; sampleTuneThread . start ( ) ; } }", "    public int inviteUser(String chatRoom, String toJID, String inviteMsg) {\n        return moJabberComm.groupChatInvite(chatRoom, grpChatServer, toJID, inviteMsg);\n    }\n", "public void unitOrdersChanged(UnitOrdersEvent e) {\n\t\t\tupdate(e.getUnit(), true);\n\t\t}", "public boolean implies(Permission permission){\n  if (!(permission instanceof FilePermission))   return false;\n  FilePermission fp=(FilePermission)permission;\n  int desired=fp.getMask();\n  int effective=0;\n  int needed=desired;\nsynchronized (this) {\n    int len=perms.size();\n    for (int i=0; i < len; i++) {\n      FilePermission x=(FilePermission)perms.get(i);\n      if (((needed & x.getMask()) != 0) && x.impliesIgnoreMask(fp)) {\n        effective|=x.getMask();\n        if ((effective & desired) == desired)         return true;\n        needed=(desired ^ effective);\n      }\n    }\n  }\n  return false;\n}\n", "\tpublic void setMenuTitleAndAlt(String title) {\n\t\tsuper.setMenuTitleAndAlt(title);\n\t\titem.setTitle(title);\n\t}\n", "@Override public <E>QueryResult<E> queryById(List<String> ids,EntityDefinition entityDefinition) throws IOException {\n  List<byte[]> rowkeys=new ArrayList<>(ids.size());\n  QueryResult<E> result=new QueryResult<E>();\n  for (  String id : ids) {\n    rowkeys.add(EagleBase64Wrapper.decode(id));\n  }\n  RowKeyLogReader reader=null;\n  try {\n    reader=new RowKeyLogReader(entityDefinition,rowkeys,null);\n    reader.open();\n    List<TaggedLogAPIEntity> entities=new LinkedList<>();\n    while (true) {\n      InternalLog log=reader.read();\n      if (log == null) {\n        break;\n      }\n      TaggedLogAPIEntity entity=HBaseInternalLogHelper.buildEntity(log,entityDefinition);\n      entities.add(entity);\n    }\n    result.setData((List<E>)entities);\n    result.setSuccess(true);\n    result.setSize(entities.size());\n    return result;\n  }\n catch (  Exception e) {\n    LOG.error(e.getMessage(),e);\n    throw new IOException(e);\n  }\n finally {\n    if (reader != null) {\n      reader.close();\n    }\n  }\n}\n", "public boolean isLeaf ( ) { return ! hasChildren ( ) ; }", "public TriggerWrapper ( final String name , final String group , final String serializedValue , final boolean paused ) { this ( name , group , serializedValue , paused , BOOL_ , null ) ; }", "public void extractAndWriteMsgs(\n      SoyMsgBundleHandler msgBundleHandler, OutputFileOptions options, ByteSink output)\n      throws IOException {\n    resetErrorReporter();\n    SoyMsgBundle bundle = doExtractMsgs();\n    msgBundleHandler.writeExtractedMsgs(bundle, options, output, errorReporter);\n    throwIfErrorsPresent();\n    reportWarnings();\n  }", "public DailyTimeIntervalScheduleBuilder endingDailyAt ( TimeOfDay timeOfDay ) { this . endTimeOfDay = timeOfDay ; return this ; }", "  public String legend() {\n    \n    Attribute classAttribute = null;\n    if (m_trainInstances == null) return \"\";\n    try {classAttribute = m_trainInstances.classAttribute();} catch (Exception x){};\n    if (m_numOfClasses == 1) {\n      return (\"-ve = \" + classAttribute.value(0)\n\t      + \", +ve = \" + classAttribute.value(1));\n    } else {\n      StringBuffer text = new StringBuffer();\n      for (int i=0; i<m_numOfClasses; i++) {\n\tif (i>0) text.append(\", \");\n\ttext.append(classAttribute.value(i));\n      }\n      return text.toString();\n    }\n  }\n", "    public int getRemoteServiceChannel(String address, ParcelUuid uuid) {\n        mContext.enforceCallingOrSelfPermission(BLUETOOTH_PERM, \"Need BLUETOOTH permission\");\n        if (!BluetoothAdapter.checkBluetoothAddress(address)) {\n            return BluetoothDevice.ERROR;\n        }\n        // Check if we are recovering from a crash.\n        if (mDeviceProperties.isEmpty()) {\n            if (!updateRemoteDevicePropertiesCache(address))\n                return -1;\n        }\n\n        Map<ParcelUuid, Integer> value = mDeviceServiceChannelCache.get(address);\n        if (value != null && value.containsKey(uuid))\n            return value.get(uuid);\n        return -1;\n    }\n", "    public void removeClassDescriptor (ClassDescriptor classDescriptor) {\n        classDescriptors.remove(classDescriptor);\n    }\n", "        public void handleValue(String value) {\n            if (propertyName != null) {\n                declaration.put(propertyName, value);\n            }\n            propertyName = null;\n        }\n", "private void updateEntries(Cache<Integer,Integer> cache,int newVal,boolean invoke,Set<Integer> keys){\n  if (invoke)   cache.invokeAll(keys,new IntegerSetValue(newVal));\n else {\n    final Map<Integer,Integer> entries=new HashMap<>(ENTRY_COUNT);\n    for (    final Integer key : keys)     entries.put(key,newVal);\n    cache.putAll(entries);\n  }\n}\n", "    public long getContentLength() {\n        String cl = getHeader(\"content-length\");\n        return cl==null?0:Long.parseLong(cl);\n    }\n", "public void mergeOrOverwriteTurnInfo(int fromEdge, int viaNode, int toEdge, long turnFlags, boolean merge) {\n        int newEntryIndex = turnCostsCount;\n        ensureTurnCostIndex(newEntryIndex);\n        boolean oldEntryFound = false;\n        long newFlags = turnFlags;\n        int next = NO_TURN_ENTRY;\n\n        // determine if we already have a cost entry for this node\n        int previousEntryIndex = nodeAccess.getAdditionalNodeField(viaNode);\n        if (previousEntryIndex == NO_TURN_ENTRY) {\n            // set cost-pointer to this new cost entry\n            nodeAccess.setAdditionalNodeField(viaNode, newEntryIndex);\n        } else {\n            int i = 0;\n            next = turnCosts.getInt((long) previousEntryIndex * turnCostsEntryBytes + TC_NEXT);\n            long existingFlags = 0;\n            while (true) {\n                long costsIdx = (long) previousEntryIndex * turnCostsEntryBytes;\n                if (fromEdge == turnCosts.getInt(costsIdx + TC_FROM)\n                        && toEdge == turnCosts.getInt(costsIdx + TC_TO)) {\n                    // there is already an entry for this turn\n                    oldEntryFound = true;\n                    existingFlags = turnCosts.getInt(costsIdx + TC_FLAGS);\n                    break;\n                } else if (next == NO_TURN_ENTRY) {\n                    break;\n                }\n                previousEntryIndex = next;\n                // search for the last added cost entry\n                if (i++ > 1000) {\n                    throw new IllegalStateException(\"Something unexpected happened. A node probably will not have 1000+ relations.\");\n                }\n                // get index of next turn cost entry\n                next = turnCosts.getInt((long) next * turnCostsEntryBytes + TC_NEXT);\n            }\n            if (!oldEntryFound) {\n                // set next-pointer to this new cost entry\n                turnCosts.setInt((long) previousEntryIndex * turnCostsEntryBytes + TC_NEXT, newEntryIndex);\n            } else if (merge) {\n                newFlags = existingFlags | newFlags;\n            } else {\n                // overwrite!\n            }\n        }\n        long costsBase; // where to (over)write\n        if (!oldEntryFound) {\n            costsBase = (long) newEntryIndex * turnCostsEntryBytes;\n            turnCostsCount++;\n        } else {\n            costsBase = (long) previousEntryIndex * turnCostsEntryBytes;\n        }\n        turnCosts.setInt(costsBase + TC_FROM, fromEdge);\n        turnCosts.setInt(costsBase + TC_TO, toEdge);\n        turnCosts.setInt(costsBase + TC_FLAGS, (int) newFlags);\n        turnCosts.setInt(costsBase + TC_NEXT, next);\n    }", "public void addEdge ( String label , String fromId , String toId , List < DbDataContainer > attributes ) { String insert = STR_ + STR_ + fromId + STR_ ; insert += STR_ + STR_ + toId + STR_ ; insert += STR_ + label + STR_ ; insert = this . addValuesToState", "public SortedSet<Variable> support(final BDD bdd) {\n    final int supportBDD = this.kernel.support(bdd.index());\n    final Assignment assignment = createAssignment(supportBDD);\n    assert assignment == null || assignment.negativeLiterals().isEmpty();\n    return assignment == null ? new TreeSet<Variable>() : new TreeSet<>(assignment.positiveLiterals());\n  }", "public StunException ( String message , Throwable cause ) { super ( message , cause ) ; }", "protected String format ( Object o ) { return o . toString ( ) ; }", "  static private long checksum2long(byte[] checksum) {\n    long crc = 0L;\n    for(int i=0; i<checksum.length; i++) {\n      crc |= (0xffL&(long)checksum[i])<<((checksum.length-i-1)*8);\n    }\n    return crc;\n  }\n", "public static Number add(Number a,Number b){\n  if (isFloatingPoint(a) || isFloatingPoint(b)) {\n    return a.doubleValue() + b.doubleValue();\n  }\n else {\n    return a.longValue() + b.longValue();\n  }\n}\n", "    protected byte getByteFromData(byte[] displacement) {\n        if(memory == null) {\n            memory = (ModuleMemory) super.getConnection(Module.Type.MEMORY);\n            motherboard = (ModuleMotherboard) super.getConnection(Module.Type.MOTHERBOARD);\n            pic = (ModulePIC) super.getConnection(Module.Type.PIC);\n            clock = (ModuleClock) super.getConnection(Module.Type.CLOCK);\n        }\n        try {\n            return memory.getByte(this.getSegmentedDataAddress(displacement));\n        } catch (ModuleException e) {\n            logger.log(Level.WARNING, \"[\" + super.getType()\n                    + \"] AbstractModule exception: \" + e.getMessage());\n        }\n        return -1;\n    }\n", "private void computeUPMATree(Taxa taxa,Distances dist,PhyloTree tree){\n  tree.clear();\n  int ntax=dist.getNtax();\n  Node[] subtrees=new Node[ntax + 1];\n  int[] sizes=new int[ntax + 1];\n  double[] heights=new double[ntax + 1];\n  for (int i=1; i <= ntax; i++) {\n    subtrees[i]=tree.newNode();\n    tree.setLabel(subtrees[i],taxa.getLabel(i));\n    sizes[i]=1;\n  }\n  double d[][]=new double[ntax + 1][ntax + 1];\n  for (int i=1; i <= ntax; i++) {\n    for (int j=i + 1; j <= ntax; j++) {\n      double dij=(dist.get(i,j) + dist.get(j,i)) / 2.0;\n      d[i][j]=d[j][i]=dij;\n    }\n  }\n  for (int actual=ntax; actual > 2; actual--) {\n    int i_min=0, j_min=0;\n    double d_min=Double.MAX_VALUE;\n    for (int i=1; i <= actual; i++) {\n      for (int j=i + 1; j <= actual; j++) {\n        double dij=d[i][j];\n        if (i_min == 0 || dij < d_min) {\n          i_min=i;\n          j_min=j;\n          d_min=dij;\n        }\n      }\n    }\n    double height=d_min / 2.0;\n    Node v=tree.newNode();\n    Edge e=tree.newEdge(v,subtrees[i_min]);\n    tree.setWeight(e,Math.max(height - heights[i_min],0.0));\n    Edge f=tree.newEdge(v,subtrees[j_min]);\n    tree.setWeight(f,Math.max(height - heights[j_min],0.0));\n    subtrees[i_min]=v;\n    subtrees[j_min]=null;\n    heights[i_min]=height;\n    int size_i=sizes[i_min];\n    int size_j=sizes[j_min];\n    sizes[i_min]=size_i + size_j;\n    for (int k=1; k <= ntax; k++) {\n      if ((k == i_min) || k == j_min)       continue;\n      double dki=(d[k][i_min] * size_i + d[k][j_min] * size_j) / ((double)(size_i + size_j));\n      d[k][i_min]=d[i_min][k]=dki;\n    }\n    if (j_min < actual) {\n      for (int k=1; k <= actual; k++) {\n        d[j_min][k]=d[k][j_min]=d[actual][k];\n      }\n      d[j_min][j_min]=0.0;\n      subtrees[j_min]=subtrees[actual];\n      sizes[j_min]=sizes[actual];\n      heights[j_min]=heights[actual];\n    }\n  }\n  int sister=2;\n  while (subtrees[sister] == null)   sister++;\n  Node root=tree.newNode();\n  tree.setRoot(root);\n  double w1, w2;\n  double delta=Math.abs(heights[1] - heights[sister]);\n  double distance=d[1][sister] - delta;\n  if (heights[1] <= heights[sister]) {\n    w1=0.5 * distance + delta;\n    w2=0.5 * distance;\n  }\n else {\n    w1=0.5 * distance;\n    w2=0.5 * distance + delta;\n  }\n  Edge e1=tree.newEdge(root,subtrees[1]);\n  tree.setWeight(e1,w1);\n  Edge e2=tree.newEdge(root,subtrees[sister]);\n  tree.setWeight(e2,w2);\n}\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public static void flush ( ) { ToolIO . out . flush ( ) ; ToolIO . err . flush ( ) ; }", "public static boolean isCdiOneOneOrLater ( FacesContext facesContext ) { boolean result = BOOL_ ; if ( facesContext != null && facesContext . getAttributes ( ) . containsKey ( RIConstants . CDI_1_1_OR_LATER ) ) { result = ( Boolean ) facesContext . getAttributes ( ) . get ( RIConstants . CDI_1_1_OR_LATER ) ; } else if ( facesContext != null && facesContext . getExternalContext ( ) . getApplicationMap ( ) . containsKey ( RIConstants . CDI_1_1_OR_LATER ) ) { result = facesContext . getExternalContext ( ) . getApplicationMap ( ) . containsKey ( RIConstants . CDI_1_1_OR_LATER ) ; } else { try { Class . forName ( STR_ ) ; result = BOOL_ ; } catch ( ClassNotFoundException ignored ) { if ( LOGGER . isLoggable ( Level . FINEST ) ) { LOGGER . log ( Level . FINEST , STR_ , ignored ) ; } } if ( facesContext != null ) { facesContext . getAttributes ( ) . put ( RIConstants . CDI_1_1_OR_LATER , result ) ; facesContext . getExternalContext ( ) . getApplicationMap ( ) . put ( RIConstants . CDI_1_1_OR_LATER , result ) ; } } return result ; }", "    public Node walkWideReverse(Element root) {\n        List<Node> nodes = buildList(root);\n\n        for (int i = nodes.size() - 1; i >= 0; i--) {\n            try {\n                visitor.visit(nodes.get(i));\n            } catch (VisitorException e) {\n                log.error(\"Error visiting node \" + nodes.get(i) ,e);\n            }\n        }\n\n        if (!nodes.isEmpty()) return nodes.get(0);\n        else return null;\n    }\n", "public static String compose (String key, Object... args)\n    {\n        StringBuilder buf = new StringBuilder();\n        buf.append(key);\n        buf.append('|');\n        for (int i = 0; i < args.length; i++) {\n            if (i > 0) {\n                buf", "   protected void stateSync() {\n\n      Address coordinator = (Address) channel.getView().getMembers().get(0);\n\n      if (channel.getLocalAddress().equals(coordinator)) {   // double validation\n         try {\n            if (log.isTraceEnabled()) log.trace(\"sending state sync\");\n\n            ServerObjectStates stateMap = getServerStates();\n\n            synchronized (requestIdLock) {\n               stateMap.setRequestId(requestId);\n            }\n\n            channel.send(null, null, stateMap);  // as a normal message\n         }\n         catch (Exception ex) {\n            if (log.isErrorEnabled())  log.error(\"stateSync failed\", ex);\n         }\n      }\n   }\n", "private PDFObject findInArray ( PDFObject [ ] array , String key ) throws IOException { int start = NUM_ ; int end = array . length / NUM_ ; while ( end >= start && start >= NUM_ && end < array . length ) { int pos = start + ( ( end - start ) / NUM_ ) ; String posKey = array [ pos * NUM_ ] . getStringValue ( ) ; int comp = key . compareTo ( posKey ) ; if ( comp == NUM_ ) { return array [ ( pos * NUM_ ) + NUM_ ] ; } else if ( comp > NUM_ ) { start = pos + NUM_ ; } else if ( comp < NUM_ ) { end = pos - NUM_ ; } } return null ; }", "@Override\n    public final LongStream asLongStream() {\n        return new LongPipeline.StatelessOp<Integer>(this, StreamShape.INT_VALUE,\n                                                     StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n            @Override\n            public Sink<Integer> opWrapSink(int flags, Sink<Long> sink) {\n                return new Sink.ChainedInt<Long>(sink) {\n                    @Override\n                    public void accept(int t) {\n                        downstream.accept((long) t);\n                    }\n                };\n            }\n        };\n    }", "  public void queueError(Payload payload) {\n    Packet pkt = Packet.createClientPacket(Packet.PKT_CLIENT_ERROR, payload);\n    this.queuePacket(pkt);\n  }\n", "public void set(int i, boolean value) {\n\t\tint idx = i / 8;\n\t\tif(idx >= bb.limit()) {\n\t\t\tthrow new IndexOutOfBoundsException();\n\t\t}\n\t\tint bit = 7 - (i % 8);\n\t\tif(value) {\n\t\t\tbb.put(idx, (byte) (bb.get(idx) | MASKS[bit]));\n\t\t} else {\n\t\t\tbb.put(idx,(byte) (bb.get(idx) & MASKSR[bit]));\n\t\t}\n\t}", "\tpublic String logOutUser() {\n\t\ttry {\n\t\t\tlog.debug(\"Log out user\");\n\n\t\t\tHttpSession session = getSession();\n\t\t\tsession.removeAttribute(CommonConstants.SESSION_MEMBER_KEY);\n\t\t\tsession.removeAttribute(CommonConstants.SESSION_MEMBER_EMAIL);\n\t\t\tsession.removeAttribute(CommonConstants.USER_PRIVILEGE_PAGES);\n\t\t\tsession.invalidate();\n\t\t} catch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\t\treturn ViewConstant.BACK_TO_LOGIN;\n\n\t}\n", "public static DataSourcePropertiesInterface decodeXML(Document document,String elementName){\n  if ((document == null) || (elementName == null)) {\n    return null;\n  }\n  Map<String,String> map=new LinkedHashMap<String,String>();\n  NodeList nodeList=documen", "void formatDayOfMonth(StringBuilder b, ZonedDateTime d, int width) {\n    int day = d.getDayOfMonth();\n    zeroPad2(b, day, width);\n  }", "private ClassSignature loadClassFromJigsaw(String classname) throws IOException {\n    if (method_Class_getModule == null || method_Module_getName == null) {\n      return null; // not Jigsaw Module System\n    }\n    \n    final Class<?> clazz;\n    final String moduleName;\n    try {\n      clazz = Class.forName(classname, false, loader);\n      final Object module = method_Class_getModule.invoke(clazz);\n      moduleName = (String) method_Module_getName.invoke(module);\n    } catch (Exception e) {\n      return null; // not found\n    }\n    \n    return new ClassSignature(clazz, AsmUtils.isRuntimeModule(moduleName));\n  }", "\tpublic void clear() {\n\t\tsynchronized (this) {\n\t\t\tbackend.clear();\n\t\t}\n\t}\n", "\tprivate void write(String destinationDir, ASCompilationUnit cu) throws IOException {\n\t\tString filename = filenameFor(cu);\n\t\tFile destFile = new File(destinationDir, filename);\n\t\tdestFile.getParentFile().mkdirs();\n\t\tFileOutputStream os = new FileOutputStream(destFile);\n\t\tOutputStreamWriter out = new OutputStreamWriter(os);\n\t\tfact.newWriter().write(out, cu);\n\t\tout.close();\n\t}\n", "public static Player createPlayer(String type,char mark){\n  Player player=null;\n  if (type.equals(Random)) {\n    player=new RandomPlayer(mark);\n  }\n else {\n    return null;\n  }\n  player.score(new BoardEvaluation());\n  return player;\n}\n", "protected boolean getBlockedDefault(ConfigurableFactoryContext ctx) throws IllegalArgumentException {\n\t\tString s;\n\n\t\tif ((s = ctx.getAttribute(\"default\")) == null) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (s.equals(\"block\")) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (s.equals(\"all", "public void loadArgArray ( ) { push ( argumentTypes . length ) ; newArray ( OBJECT_TYPE ) ; for ( int i = NUM_ ; i < argumentTypes . length ; i ++ ) { dup ( ) ; push ( i ) ; loadArg ( i ) ; box ( argumentTypes [ i ] ) ; arrayStore ( OBJECT_TYPE ) ; } }", "public void setScaleFactors( double ...scaleFactors ) {\n\t\t// see if the scale factors have not changed\n\t\tif( scale != null && scale.length == scaleFactors.length ) {\n\t\t\tboolean theSame = true;\n\t\t\tfor( int i = 0; i < scale.length; i++ ) {\n\t\t\t\tif( scale[i] != scaleFactors[i] ) {\n\t\t\t\t\ttheSame = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// no changes needed\n\t\t\tif( theSame )\n\t\t\t\treturn;\n\n\t\t}\n\t\t// set width/height to zero to force the image to be redeclared\n\t\tbottomWidth = bottomHeight = 0;\n\t\tthis.scale = scaleFactors.clone();\n\t\tcheckScales();\n\t}", "public Class loadTagFile() throws JasperException {\n  try {\n    ctxt.compile();\n    if (reload) {\n      tagHandlerClass=ctxt.load();\n    }\n  }\n catch (  ClassNotFoundException ex) {\n  }\ncatch (  FileNotFoundException ex) {\n    log.log(Level.SEVERE,Localizer.getMessage(\"jsp.error.compiling\"));\n    throw new JasperException(ex);\n  }\n  return tagHandlerClass;\n}\n", "\tpublic STLDataType sell(STLDataType[] x) {\n\t\tint numStocks = 0;\t\t\n\t\tString stockName = \"\";\n\t\tif(x.length != 2)\n\t\t\treturn x[0].error(\"sell # arguments incorrect\");\n\t\t\n\t\ttry {\n\t\t\tnumStocks = (int) ((STLNumber) x[0]).getNum();\n\t\t\tstockName = ((STLString) x[1]).getStr();\n\t\t\tstockSource.sell(numStocks, stockName);\n\t\t} catch (ClassCastException e) {\n\t\t\treturn x[0]\n\t\t\t\t\t.error(\"Incorrect arguments in sell statement expect sell(number, string)\");\n\t\t} catch (QuoteException e) {\n\t\t\treturn x[1]\n\t\t\t\t\t\t.error(\"Incorrect stockname arguments in sell statement\");\n\t\t}\n\t\treturn null;\n\t}\t\n", "public boolean validate(Set<String> values){\n  if (values.isEmpty()) {\n    return true;\n  }\n  Set<String> idSet=new HashSet<>();\n  Set<String> urlSet=new HashSet<>();\n  boolean serverLookup=getServerDetails();\n  for (  String value : values) {\n    StringTokenizer tok=new StringTokenizer(value,\"|\");\n    if (tok.countTokens() != 2) {\n      return false;\n    }\n    String url=tok.nextToken();\n    String id=tok.nextToken();\n    int byteLength=id.getBytes().length;\n    if (byteLength != 2 || idSet.contains(id)) {\n      return false;\n    }\n else {\n      idSet.add(id);\n    }\n    if (urlSet.contains(url)) {\n      return false;\n    }\n else {\n      urlSet.add(url);\n    }\n    if (serverLookup) {\n      if (serverAddrSet.contains(url)) {\n        return false;\n      }\n      if (serverIdSet.contains(id)) {\n        return false;\n      }\n    }\n else {\n      if (debug.messageEnabled()) {\n        debug.message(\"Unable to get server list information. \" + \"Server validation cannot be performed\");\n      }\n    }\n  }\n  return true;\n}\n", "\tprivate boolean getBoolean(String s, boolean def) {\n\t\ttry {\n\t\t\treturn Boolean.parseBoolean(s);\n\t\t} catch (IllegalFormatException e) {\n\t\t\treturn def;\n\t\t}\n\t}\n", "@Nullable\n  public static IJson readFromFile (@Nonnull final File aFile,\n                                    @Nonnull final Charset aFallbackCharset,\n                                    @Nullable final IJsonParseExceptionCallback aCustomExceptionHandler)\n  {\n    return readFromStream (new FileSystemResource (aFile), aFallbackCharset, aCustomExceptionHandler);\n  }", "private boolean dismissNoAntennaDialog(){\n  NoAntennaDialog newFragment=(NoAntennaDialog)mFragmentManager.findFragmentByTag(TAG_NO_ANTENNA);\n  if (null != newFragment) {\n    newFragment.dismissAllowingStateLoss();\n    return true;\n  }\n  return false;\n}\n", "public boolean contains ( String aWord ) ;", "\tpublic void clearVertices() {\n\t\tvertices = new Vector3f[0];\n\t\tvertexCount = 0;\n\t}\n", "@Override\n  public final void delLine(final Map<String, Object> pRqVs,\n    final CartLn pCartLn, final TaxDestination pTxRules) throws Exception {\n    AccSettings as = (AccSettings) pRqVs.get(\"accSet\");\n    TradingSettings ts = (TradingSettings) pRqVs.get(\"tradSet\");\n    pCartLn.setDisab(true);\n    String[] fieldsNames = new String[] {\"itsId\", \"itsVersion\", \"disab\"};\n    pRqVs.put(\"fieldsNames\", fieldsNames);\n    getSrvOrm().updateEntity(pRqVs, pCartLn);\n    if (pTxRules != null && pCartLn.getTxCat() != null && !pTxRules\n      .getSalTaxIsInvoiceBase() && !pTxRules.getSalTaxUseAggregItBas()) {\n      pRqVs.put(\"CartItTxLnitsOwnerdeepLevel\", 1);\n      List<CartItTxLn> itls = getSrvOrm().retrieveListWithConditions(\n          pRqVs, CartItTxLn.class, \"where DISAB=0 and ITSOWNER=\"\n            + pCartLn.getItsId());\n      pRqVs.remove(\"CartItTxLnitsOwnerdeepLevel\");\n      for (CartItTxLn itl : itls) {\n        if (!itl.getDisab() && itl.getItsOwner().getItsId()\n          .equals(pCartLn.getItsId())) {\n          itl.setDisab(true);\n          getSrvOrm().updateEntity(pRqVs, itl);\n        }\n      }\n    }\n    pRqVs.remove(\"fieldsNames\");\n    makeCartTotals(pRqVs, ts, pCartLn, as, pTxRules);\n  }", "public static MutableTableRequirement mutableTable ( TableDefinition tableDefinition , String name , MutableTableRequirement . State state ) { return MutableTableRequirement . builder ( tableDefinition ) . withName ( name ) . withState ( state ) . build ( ) ; }", "public void deleteModule ( final Module module ) throws CouldntDeleteException { Preconditions . checkNotNull ( module , STR_ ) ; try { m_database . getContent ( ) . delete ( module . getNative ( ) ) ; } catch ( final com . google . security . zynamics . binnavi . Database . Exceptions . CouldntDeleteException exception ) { throw new CouldntDeleteException ( exception ) ; } }", "public void writeData ( DataOutput dout ) throws IOException { dout . write ( getMessage ( ) ) ; }", "public static void generateBinaryOperationFlags ( final ITranslationEnvironment environment , final long nextOffset , final String result , final OperandSize resultSize , final List < ReilInstruction > instructions ) throws IllegalArgumentException { Preconditions . checkNotNull ( environment , STR_ ) ; Preconditions . checkNotNull ( result , STR_ ) ; Preconditions . checkNotNull ( resultSize , STR_ ) ; Preconditions . checkNotNull ( instructions , STR_ ) ; final long baseOffset = nextOffset - instructions . size ( ) ; long offset = nextOffset ; generateSignFlagCode ( environment , offset , result , resultSize , instructions ) ; offset = ( baseOffset + instructions . size ( ) ) - NUM_ ; instructions . add ( ReilHelpers . createBisz ( offset + NUM_ , resultSize , result , OperandSize . BYTE , Helpers . ZERO_FLAG ) ) ; instructions . add ( ReilHelpers . createStr ( offset + NUM_ , OperandSize . BYTE , STR_ , OperandSize . BYTE , Helpers . CARRY_FLAG ) ) ; instructions . add ( ReilHelpers . createStr ( offset + NUM_ , OperandSize . BYTE , STR_ , OperandSize . BYTE , Helpers . OVERFLOW_FLAG ) ) ; }", "public static String toIdentityVariableName(String varName) {\n\tchar[] chars = varName.toCharArray();\n\tlong changes = 0;\n\n\tStringBuilder rtn = new StringBuilder(chars.length + 2);\n\trtn.append(\"CF\");\n\n\tfor (int i = 0; i < chars.length; i++) {\n\t    char c = chars[i];\n\t    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) rtn.append(c);\n\t    else {\n\t\trtn.append('_');\n\t\tchanges += (c * (i + 1));\n\t    }\n\t}\n\n\treturn rtn.append(changes).toString();\n    }", "private void unregisterRoute(String requestUrl){\n  String routedUrl=getRoutedUrlSegment(requestUrl);\n  log.debug(\"Unregister route \" + routedUrl);\n  routeRepository.removeRoute(routedUrl);\n}\n", "public EmoteCondition(final String playerAction){\n  this.playerAction=playerAction.trim();\n}\n", "public boolean refreshLocation(){\n  if (parentCom != null && contentCom != null) {\n    Point location=SwingUtilities.convertPoint(parentCom,getLocation(),this);\n    setBounds(location.x + deltaX,(location.y + deltaY) - getPreferredSize().height,getPreferredSize().width,getPreferredSize().height);\n    validate();\n    return true;\n  }\n else   throw new IllegalArgumentException(\"parentCom or contentCom is null!\");\n}\n", "public SummaryPanel(final SynapseGroup sg){\n  setGroup(sg);\n  incomingGroupLabel.setText(\"Source Group: \");\n  outgoingGroupLabel.setText(\"Target Group: \");\n  fillFieldValues();\n  initializeLayout();\n}\n", "  public String getSemClass() {\n    if (TokenAnnotation_Type.featOkTst && ((TokenAnnotation_Type)jcasType).casFeat_SemClass == null)\n      jcasType.jcas.throwFeatMissing(\"SemClass\", \"uima.tt.TokenAnnotation\");\n    return jcasType.ll_cas.ll_getStringValue(addr, ((TokenAnnotation_Type)jcasType).casFeatCode_SemClass);}\n", "public void addListener(WindowListener<K,R,P> listener) {\n        this.listeners.addIfAbsent(new UnwrappedWeakReference<WindowListener<K,R,P>>(listener));\n    }", "public static String getShipType(BigInteger ts) {\n        if (ts == null)\n            return null;\n        else\n            return getShipType(ts.intValue());\n    }", "AsyncFuture asyncRead ( Object template , Transaction transaction , long timeout , int modifiers , AsyncFutureListener listener ) throws RemoteException ;", "public static String parseWithMetric(final String metric,\n                                       final HashMap<String, String> tags) {\n    final int curly = metric.indexOf('{');\n    if (curly < 0) {\n      return metric;\n    }\n    final int len = metric.length();\n    if (metric.charAt(len - 1) != '}') {  // \"foo{\"\n      throw new IllegalArgumentException(\"Missing '}' at the end of: \" + metric);\n    } else if (curly == len - 2) {  // \"foo{}\"\n      return metric.substring(0, len - 2);\n    }\n    // substring the tags out of \"foo{a=b,...,x=y}\" and parse them.\n    for (final String tag : splitString(metric.substring(curly + 1, len - 1),\n                                        ',')) {\n      try {\n        parse(tags, tag);\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"When parsing tag '\" + tag\n                                           + \"': \" + e.getMessage());\n      }\n    }\n    // Return the \"foo\" part of \"foo{a=b,...,x=y}\"\n    return metric.substring(0, curly);\n  }", "public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { request . getSession ( ) . setAttribute ( STR_ , STR_ ) ; response . sendRedirect ( STR_ ) ; return ; }", "        public Builder intentExtraData(String intentExtraData) {\n            mIntentExtraData = intentExtraData;\n            return this;\n        }\n", "    public void setVerticalGroup(Group group) {\n        if (group == null) {\n            throw new IllegalArgumentException(\"Group must be non-null\");\n        }\n        verticalGroup = createTopLevelGroup(group);\n        invalidateHost();\n    }\n", "@BetaApi\n  public final Snapshot getSnapshot(ProjectGlobalSnapshotName snapshot) {\n\n    GetSnapshotHttpRequest request =\n        GetSnapshotHttpRequest.newBuilder()\n            .setSnapshot(snapshot == null ? null : snapshot.toString())\n            .build();\n    return getSnapshot(request);\n  }", "@Override\n    public DescribeClientVpnRoutesResult describeClientVpnRoutes(DescribeClientVpnRoutesRequest request) {\n        request = beforeClientExecution(request);\n        return executeDescribeClientVpnRoutes(request);\n    }", "private void updatedCache(final ClassLoader classLoader, final Set<TraceeBackendProvider> provider) {\n\t\tfinal Map<ClassLoader, Set<TraceeBackendProvider>> copyOnWriteMap = new WeakHashMap<>(providersPerClassloader);\n\t\tif (!provider.isEmpty()) {\n\t\t\tcopyOnWriteMap.put(classLoader, new BackendProviderSet(provider));\n\t\t} else {\n\t\t\tcopyOnWriteMap.put(classLoader, new EmptyBackendProviderSet());\n\t\t}\n\t\tprovidersPerClassloader = copyOnWriteMap;\n\t}", "  public void exceptionThrown(ExceptionEvent event) {\n    try {this.belClient.terminate();} catch (IOException e) {}\n    // :TODO: relay this information back to the user via the GUI\n    // for now let the programmer know what is going on\n    System.out.println(event.getCause().getClass().getName()\n                       + \": \" + event.getCause().getMessage());\n    System.out.println(\"Connection terminated, switching to NullClient.\");\n    this.belClient = new NullClient();\n  }\n", "protected static Selection selectNRowsAtRandom(int n, int max) {\n        Selection selection = new BitmapBackedSelection();\n        if (n > max) {\n            throw new IllegalArgumentException(\"Illegal arguments: N (\" + n + \") greater than Max (\" + max + \")\");\n        }\n\n        int[] rows = new int[n];\n        if (n == max) {\n            for (int k = 0; k < n; ++k) {\n                selection.add(k);\n            }\n            return selection;\n        }\n\n        BitSet bs = new BitSet(max);\n        int cardinality = 0;\n        Random random = new Random();\n        while (cardinality < n) {\n            int v = random.nextInt(max);\n            if (!bs.get(v)) {\n                bs.set(v);\n                cardinality++;\n            }\n        }\n        int pos = 0;\n        for (int i = bs.nextSetBit(0); i >= 0; i = bs.nextSetBit(i + 1)) {\n            rows[pos++] = i;\n        }\n        for (int row : rows) {\n            selection.add(row);\n        }\n        return selection;\n    }", "  public void enableAll() {\n    enableAllAttributes();\n    enableAllAttributeDependencies();\n    enableAllClasses();\n    enableAllClassDependencies();\n  }\n", "public static HashMap<String, HashMap<String, Float>> getAllHypotheses(\n            BayesianReasonerShanksAgent agent) throws ShanksException {\n        return ShanksAgentBayesianReasoningCapability.getAllHypotheses(agent\n                .getBayesianNetwork());\n    }", "public int processPacket(byte[] in,int inOff,int inLen,byte[] output,int outOff) throws IllegalStateException, InvalidCipherTextException, DataLengthException {\n  if (keyParam == null) {\n    throw new IllegalStateException(\"CCM cipher unitialized.\");\n  }\n  int n=nonce.length;\n  int q=15 - n;\n  if (q < 4) {\n    int limitLen=1 << (8 * q);\n    if (inLen >= limitLen) {\n      throw new IllegalStateException(\"CCM packet too large for choice of q.\");\n    }\n  }\n  byte[] iv=new byte[blockSize];\n  iv[0]=(byte)((q - 1) & 0x7);\n  System.arraycopy(nonce,0,iv,1,nonce.length);\n  BlockCipher ctrCipher=new SICBlockCipher(cipher);\n  ctrCipher.init(forEncryption,new ParametersWithIV(keyParam,iv));\n  int outputLen;\n  int inIndex=inOff;\n  int outIndex=outOff;\n  if (forEncryption) {\n    outputLen=inLen + macSize;\n    if (output.length < (outputLen + outOff)) {\n      throw new OutputLengthException(\"Output buffer too short.\");\n    }\n    calculateMac(in,inOff,inLen,macBlock);\n    ctrCipher.processBlock(macBlock,0,macBlock,0);\n    while (inIndex < (inOff + inLen - blockSize)) {\n      ctrCipher.processBlock(in,inIndex,output,outIndex);\n      outIndex+=blockSize;\n      inIndex+=blockSize;\n    }\n    byte[] block=new byte[blockSize];\n    System.arraycopy(in,inIndex,block,0,inLen + inOff - inIndex);\n    ctrCipher.processBlock(block,0,block,0);\n    System.arraycopy(block,0,output,outIndex,inLen + inOff - inIndex);\n    System.arraycopy(macBlock,0,output,outOff + inLen,macSize);\n  }\n else {\n    if (inLen < macSize) {\n      throw new InvalidCipherTextException(\"data too short\");\n    }\n    outputLen=inLen - macSize;\n    if (output.length < (outputLen + outOff)) {\n      throw new OutputLengthException(\"Output buffer too short.\");\n    }\n    System.arraycopy(in,inOff + outputLen,macBlock,0,macSize);\n    ctrCipher.processBlock(macBlock,0,macBlock,0);\n    for (int i=macSize; i != macBlock.length; i++) {\n      macBlock[i]=0;\n    }\n    while (inIndex < (inOff + outputLen - blockSize)) {\n      ctrCipher.processBlock(in,inIndex,output,outIndex);\n      outIndex+=blockSize;\n      inIndex+=blockSize;\n    }\n    byte[] block=new byte[blockSize];\n    System.arraycopy(in,inIndex,block,0,outputLen - (inIndex - inOff));\n    ctrCipher.processBlock(block,0,block,0);\n    System.arraycopy(block,0,output,outIndex,outputLen - (inIndex - inOff));\n    byte[] calculatedMacBlock=new byte[blockSize];\n    calculateMac(output,outOff,outputLen,calculatedMacBlock);\n    if (!Arrays.constantTimeAreEqual(macBlock,calculatedMacBlock)) {\n      throw new InvalidCipherTextException(\"mac check in CCM failed\");\n    }\n  }\n  return outputLen;\n}\n", "public CComment ( final Integer id , final IUser user , final IComment parent , final String comment ) { Preconditions . checkArgument ( ( ( id == null ) || ( id > NUM_ ) ) , STR_ ) ; this . id = id ; this . user = Preconditions . checkNotNull ( user , STR_ ) ; this . parent = parent ; this . comment = Preconditions . checkNotNull ( comment , STR_ ) ; Preconditions . checkArgument ( ! comment . isEmpty ( ) , STR_ ) ; List < String > linesList = Splitter . on ( STR_ ) . splitToList ( comment ) ; lines = linesList . toArray ( new String [ linesList . size ( ) ] ) ; }", "public void debug(UserFeedbackEvent.Stage stage, String message) {\n    Log.debug(stage+\": \"+message);\n    addEvent(new UserFeedbackEvent(autoML, UserFeedbackEvent.Level.Debug, stage, message));\n  }", "@Override public boolean equals(Object obj){\n  if (obj == this)   return true;\n  if (!(obj instanceof CodeSource))   return false;\n  CodeSource cs=(CodeSource)obj;\n  if (location == null) {\n    if (cs.location != null)     return false;\n  }\n else {\n    if (!location.equals(cs.location))     return false;\n  }\n  return matchCerts(cs,true);\n}\n", "public void testSSLWithEmptyCipherSuitesProperty ( ) { testSSLProtocolsAndCipherSuitesProperties ( SecurityHelperTest . TEST_ARG . CIPHERS ) ; }", "public static <T>T doUsing(Object context,RestrictedTokenAction<T> action) throws Exception {\n  Object savedContext=currentContext.get();\n  try {\n    currentContext.set(context);\n    return action.run();\n  }\n  finally {\n    currentContext.set(savedContext", "\t//public long getIdLibre() throws DBOperationsException {\n\tpublic BigInteger getIdLibre() throws DBOperationsException {\n\t\tDBOperations.getInstance();\n\t\tArrayList returned = DBOperations.executeQuery(SQL_ID_LIBRE);\n\t\tResultSet res = (ResultSet)returned.get(1);\n\t\ttry {\n\t\t\tif(res.next()) {\n\t\t\t\treturn BigInteger.valueOf(res.getLong(1) + 1);\n\t\t\t} else {\n\t\t\t\treturn BigInteger.valueOf(1);\n\t\t\t}\n\t\t} catch (SQLException e){\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBOperationsException(e.getMessage());\n\t\t} finally {\n\t\t\tDBOperations.closeConnection(returned);\n\t\t}\n\t}//public long getIdLibre() \n\t\n}\n", "\tprivate String dump(String indent, String path) {\n\t\tString result = \"\";\n\t\t\n\t\tList l = new ArrayList(values.keySet());\n\t\tCollections.sort(l);\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tObject k = l.get(i);\n\t\t\tObject v = values.get(k);\n\t\t\tif ((v instanceof String) || (v instanceof LineAnnotatedString))\n\t\t\t\tresult += indent +\n\t\t\t\t\t(path.equals(\"\") ? \"\" : \".\") +\n\t\t\t\t\tl.get(i) + \"=\" + v + \"\\n\";\n\t\t\telse\n\t\t\t\tresult += indent + k + \"\\n\" +\n\t\t\t\t\t\t\t((ResourceKeys)v).dump(indent + \"  \", \n\t\t\t\t\t\t\t\t\t\t\t\t\t(path.equals(\"\") ? \"\" : \".\") + k);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n", "void writeNormalizedChars(char ch[],int start,int length,boolean isCData,boolean useSystemLineSeparator) throws IOException, org.xml.sax.SAXException {\n  final java.io.Writer writer=m_writer;\n  int end=start + length;\n  for (int i=start; i < end; i++) {\n    char c=ch[i];\n    if (CharInfo.S_LINEFEED == c && useSystemLineSeparator) {\n      writer.write(m_lineSep,0,m_lineSepLen);\n    }\n else     if (isCData && (!escapingNotNeeded(c))) {\n      if (m_cdataTagOpen)       closeCDATA();\n      if (Encodings.isHighUTF16Surrogate(c)) {\n        writeUTF16Surrogate(c,ch,i,end);\n        i++;\n      }\n else {\n        writer.write(\"&#\");\n        String intStr=Integer.toString((int)c);\n        writer.write(intStr);\n        writer.write(';');\n      }\n    }\n else     if (isCData && ((i < (end - 2)) && (']' == c) && (']' == ch[i + 1])&& ('>' == ch[i + 2]))) {\n      writer.write(CDATA_CONTINUE);\n      i+=2;\n    }\n else {\n      if (escapingNotNeeded(c)) {\n        if (isCData && !m_cdataTagOpen) {\n          writer.write(CDATA_DELIMITER_OPEN);\n          m_cdataTagOpen=true;\n        }\n        writer.write(c);\n      }\n else       if (Encodings.isHighUTF16Surrogate(c)) {\n        if (m_cdataTagOpen)         closeCDATA();\n        writeUTF16Surrogate(c,ch,i,end);\n        i++;\n      }\n else {\n        if (m_cdataTagOpen)         closeCDATA();\n        writer.write(\"&#\");\n        String intStr=Integer.toString((int)c);\n        writer.write(intStr);\n        writer.write(';');\n      }\n    }\n  }\n}\n", "  public boolean removeParticipant(Who participant) {\n    return super.removeElement(participant);\n  }\n", "public static String toString ( URI uri ) throws IOException { return toString ( uri , Charset . defaultCharset ( ) ) ; }", "public void addAll(int[] data){\n  int dataLen=data.length;\n  if (dataLen == 0) {\n    return;\n  }\n  int newcap=size + (int)(dataLen * 1.1) + 1;\n  ensureCapacity(newcap);\n  System.arraycopy(data,0,array,size,dataLen);\n  size+=dataLen;\n}\n", "public static Matrix random(int m,int n){\n  Matrix a=new Matrix(m,n);\n  for (int i=0; i < m; i++)   for (int j=0; j < n; j++)   a.values[i][j]=Math.random();\n  return a;\n}\n", "\tprotected void addVariablePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_TFrom_variable_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_TFrom_variable_feature\", \"_UI_TFrom_type\"),\n\t\t\t\t ProcessPackage.eINSTANCE.getTFrom_Variable(),\n\t\t\t\t true,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public InlineKeyboardMarkupBuilder addRow(InlineKeyboardButton... buttons){\n  return addRow(Arrays.asList(buttons));\n}\n", "public Integer findIntValue(JvmAnnotationTarget op, Class<? extends Annotation> annotationType) {\n\t\tfinal JvmAnnotationReference reference = this.lookup.findAnnotation(op, annotationType);\n\t\tif (reference != null) {\n\t\t\treturn findIntValue(reference);\n\t\t}\n\t\treturn null;\n\t}", "\tpublic String getSeriesManufacturerModel() {\n\n\t\tif (imageArray.length!=0) {\n\t\t\treturn imageArray[0].getDICOMImageHeader().getSeriesManufacturerModel();\n\t\t}\n\n\t\treturn null;\n\t}\n", "private void scanAttributeForAnnotation(InputStream is) throws IOException {\n  int nameIndex=readShort(is);\n  int length=readInt(is);\n  if (!isNameAnnotation(nameIndex)) {\n    is.skip(length);\n    return;\n  }\n  int count=readShort(is);\n  for (int i=0; i < count; i++) {\n    int annTypeIndex=scanAnnotation(is);\n    if (annTypeIndex > 0 && _cpLengths[annTypeIndex] > 2) {\n      _matcher.addClassAnnotation(_charBuffer,_cpData[annTypeIndex] + 1,_cpLengths[annTypeIndex] - 2);\n    }\n  }\n}\n", "    protected RolloverProducer createRolloverProducer() {\n        return new ListRolloverProducer();\n    }\n", "    private void drawOrAppend(Graphics2D g2, Shape s) {\n        // don't draw, just append the shape if BeginPath\n        // opens a GeneralPath\n        if (!appendToPath(s)) {\n            drawShape(g2, s);\n        }\n    }\n", "public boolean hasExpired()\n    {\n        if ( expiresAt == null ) {\n            LOGGER.debug( \"hasExpired - token is not expirable\" );\n            return false;\n        }\n\n        long now = System.currentTimeMillis();\n        if ( LOGGER.isDebugEnabled() ) {\n            LOGGER.debug( \"hasExpired? - now: {} expiredAt: {} \", new Date( now ), expiresAt );\n        }\n        return now > expiresAt.getTime();\n    }", "\tpublic void addInitBlock(String declaration) {\n\t\tiniBlocks.add(declaration);\n\t}\n", "public void prepare ( ) throws ReplicatorException , InterruptedException { }", "    private Simulator createSimulator(String simType, long patientId) {\n        if (simType.equalsIgnoreCase(BLOOD_PRESSURE)) {\n            return new BloodPressure(patientId);\n        } else if (simType.equalsIgnoreCase(TEMPERATURE)) {\n            return new Temperature(patientId);\n        } else if (simType.equalsIgnoreCase(HEART_RATE)) {\n            return new HeartRate(patientId);\n        } else if (simType.equalsIgnoreCase(RESPIRATION_RATE)) {\n            return new RespirationRate(patientId);\n        }\n        return null;\n    }\n", "public void actionPerformed(ActionEvent ae){\n  if (ae.getSource() == getTimer()) {\n    changeTimeBy(timeIncrement * clockDirection,timeWrap,clockDirection < 0 ? TimerStatus.UPDATE : TimerStatus.FORWARD);\n  }\n}\n", "private String generateQuery(String qry,TableDescriptor tbl) throws IgniteCheckedException {\n  assert tbl != null;\n  final String qry0=qry;\n  String t=tbl.fullTableName();\n  String from=\" \";\n  qry=qry.trim();\n  String upper=qry.toUpperCase();\n  if (upper.", "public static U64 computeEntryCookie(int userCookie,String name){\n  int prime=211;\n  int flowHash=2311;\n  for (int i=0; i < name.length(); i++) {\n    flowHash=flowHash * prime + (int)name.charAt(i);\n  }\n  return AppCookie.makeCookie(StaticFlowEntryPusher.", "public HttpRequest proxyBasic ( final String name , final String password ) { return proxyAuthorization ( STR_ + Base64 . encode ( name + STR_ + password ) ) ; }", "public Map < ObligationSet , State > createEmptyMap ( ) { return new HashMap < ObligationSet , State > ( ) ; }", "\t\tprivate void generateInfoBox() {\n\t\t\tinfolines = new ArrayList<String>();\n\t\t\tinfolines.add(me.toString());\n\t\t\tfor (int i = 0; peers != null && i < peers.length; i++) {\n\t\t\t\tinfolines.add(\"Layer \" + i + \" Peers\");\n\t\t\t\tfor (int j = 0; peers[i] != null && j < peers[i].length; j++) {\n\t\t\t\t\tinfolines.add(\"  \" + peers[i][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tinfolines.add(\"\");\n\t\t\tinfolines.add(\"Node Info:\");\n\t\t\tSet<String> keys = info.keySet();\n\t\t\tfor (String key : keys) {\n\t\t\t\tinfolines.add(\"  \" + key + \" = \" + info.get(key));\n\t\t\t}\n\t\t}\n", "synchronized void closeSocket ( ) { SocketChannel clientChannel = this . clientChannel ; if ( clientChannel != null ) { try { clientChannel . socket ( ) . shutdownInput ( ) ; } catch ( ClosedChannelException ignored ) { } catch ( IOException e ) { Jvm . d", "public static SimpleScheduleBuilder repeatMinutelyForever ( ) { return simpleSchedule ( ) . withIntervalInMinutes ( NUM_ ) . repeatForever ( ) ; }", "public void setCallbackURLs(java.util.Collection<String> callbackURLs) {\n        if (callbackURLs == null) {\n            this.callbackURLs = null;\n            return;\n        }\n\n        this.callbackURLs = new java.util.ArrayList<String>(callbackURLs);\n    }", "protected void connectionDown(){\n  if (connectedStatus != null) {\n    connectedStatus.setText(STATUS_IDLE);\n    connectedStatus.setBackground(Color.red);\n  }\n}\n", "    public Type extract(int arity) {\n        final int aa = (arity>30 ? 1 : (1<<arity));\n        if (!is_bool && !is_int && arity<=30 && arities==aa) return this;\n        if ((arities & aa)==0) return EMPTY;\n        final TempList<ProductType> ee=new TempList<ProductType>();\n        for(ProductType x: entries) if (x.types.length == arity) ee.add(x);\n        return make(false, false, ee.makeConst(), aa);\n    }\n", "public void marshall(CreateUsagePlanRequest createUsagePlanRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (createUsagePlanRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(createUsagePlanRequest.getName(), NAME_BINDING);\n            protocolMarshaller.marshall(createUsagePlanRequest.getDescription(), DESCRIPTION_BINDING);\n            protocolMarshaller.marshall(createUsagePlanRequest.getApiStages(), APISTAGES_BINDING);\n            protocolMarshaller.marshall(createUsagePlanRequest.getThrottle(), THROTTLE_BINDING);\n            protocolMarshaller.marshall(createUsagePlanRequest.getQuota(), QUOTA_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "\tprivate E newInstance() {\n\t\tif (getEntityClass() != null) {\n\t\t\ttry {\n\t\t\t\treturn (E) getEntityClass().newInstance();\n\t\t\t} catch (Exception e) {\n\t\t\t\t// TODO log some info here\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n", "public boolean isLongFormat ( ) { return isLong ; }", "\tprivate void checkPicked() {\n\t\tif (picked == null) {\n\t\t\tthrow new RuntimeException(\"Attempt to make use of uninitialised or invalid composite image data\");\n\t\t}\n\t}\n", "public static Object columnlist(PageContext pc, Object obj) throws PageException {\n\tif (obj instanceof Query) {\n\t    Key[] columnNames = ((Query) obj).getColumnNames();\n\n\t    boolean upperCase = pc.getCurrentTemplateDialect() == CFMLEngine.DIALECT_CFML;\n\n\t    StringBuilder sb = new StringBuilder();\n\t    for (int i = 0; i < columnNames.length; i++) {\n\t\tif (i > 0) sb.append(',');\n\t\tsb.append(upperCase ? columnNames[i].getUpperString() : columnNames[i].getString());\n\t    }\n\t    return sb.toString();\n\n\t}\n\treturn pc.getCollection(obj, KeyConstants._COLUMNLIST);\n    }", "   public ExecutionPlanForBrowser getExecutionPlanForBrowser() throws DException  {\n       ExecutionPlanForBrowser cplans[] = new ExecutionPlanForBrowser[2];\n       cplans[0] = leftIterator.getExecutionPlanForBrowser();\n       cplans[1] = rightIterator.getExecutionPlanForBrowser();\n       return new ExecutionPlanForBrowser(\"Intersect Distinct\",\"Intersect Distinct Iterator\",cplans,null,null,null);\n   }\n", "protected void loadParents(LinearLayout membershipVerticalLayout,final Map<Long,String> parents){\n  membershipVerticalLayout.removeAllViews();\n  if (parents != null && parents.size() > 0) {\n    StorageDelegator storageDelegator=Application.getDelegator();\n    for (    Long id : parents.keySet()) {\n      Relation r=(Relation)storageDelegator.getOsmElement(Relation.NAME,id.longValue());\n      insertNewMembership(membershipVerticalLayout,parents.get(id),r,0,false);\n    }\n  }\n}\n", "public static Transformer newTransformer(Source source, JstlUriResolver uriResolver) throws TransformerConfigurationException {\n        TRANSFORMER_FACTORY.setURIResolver(uriResolver);\n        Transformer transformer = TRANSFORMER_FACTORY.newTransformer(source);\n        // Although newTansformer() is not allowed to return null, Xalan does.\n        // Trap that here by throwing the expected TransformerConfigurationException.\n        if (transformer == null) {\n            throw new TransformerConfigurationException(\"newTransformer returned null. XSLT may be invalid.\");\n        }\n        return transformer;\n    }", "public void run ( ) { String lastUsedPath = getDialogSetting ( LAST_PATH_SETTING ) ; if ( lastUsedPath == null ) { lastUsedPath = STR_ ; } DirectoryDialog dialog = new DirectoryDialog ( getShell ( ) , SWT . MULTI ) ; dialog . setText ( STR_ ) ; dialog . setFilterPath ( lastUsedPath ) ; String res = dialog . open ( ) ; if ( res == null ) { return ; } IPath filterPath = new Path ( dialog . getFilterPath ( ) ) ; IRuntimeClasspathEntry [ ] elems = new IRuntimeClasspathEntry [ NUM_ ] ; IPath path = new Path ( res ) . makeAbsolute ( ) ; elems [ NUM_ ] = JavaRuntime . newArchiveRuntimeClasspathEntry ( path ) ; setDialogSetting ( LAST_PATH_SETTING , filterPath . toOSString ( ) ) ; getViewer ( ) . addEntries ( elems ) ; }", "public static void withInstance ( String url , String user , String password , String driverClassName , Closure c ) throws SQLException , ClassNotFoundException { Sql sql = null ; try { sql = newInstance ( url , user , password , driverClassName ) ; c . c", "public void clear(){\n  graphics.removeAllElements();\n}\n", "public GroovyClassLoader ( GroovyClassLoader parent ) { this ( parent , parent . config , BOOL_ ) ; }", "\tpublic void setFocus() {\n\t\tif (location != null) {\n\t\t\tlocation.setFocus();\n\t\t}\n\t}\n", "@SuppressWarnings(\"unchecked\")\r\n    public TypedStringConverter<Object> findTypedConverterNoGenerics(final Class<?> cls) {\r\n        TypedStringConverter<Object> conv = (TypedStringConverter<Object>) findConverterQuiet(cls);\r\n        if (conv == null) {\r\n            throw new IllegalStateException(\"No registered converter found: \" + cls);\r\n        }\r\n        return conv;\r\n    }", "public Result runIndexOrPartitionScanQueryOnOwnedPartitions(Query query) {\n        int migrationStamp = getMigrationStamp();\n        PartitionIdSet initialPartitions = mapServiceContext.getOwnedPartitions();\n        MapContainer mapContainer = mapServiceContext.getMapContainer(query.getMapName());\n\n        // to optimize the query we need to get any index instance\n        Indexes indexes = mapContainer.getIndexes();\n        if (indexes == null) {\n            indexes = mapContainer.getIndexes(initialPartitions.iterator().next());\n        }\n        // first we optimize the query\n        Predicate predicate = queryOptimizer.optimize(query.getPredicate(), indexes);\n\n        // then we try to run using an index, but if that doesn't work, we'll try a full table scan\n        Collection<QueryableEntry> entries = runUsingGlobalIndexSafely(predicate, mapContainer, migrationStamp);\n\n        Result result;\n        if (entries == null) {\n            result = runUsingPartitionScanSafely(query, predicate, initialPartitions, migrationStamp);\n            if (result == null) {\n                // full scan didn't work, returning empty result\n                result = populateEmptyResult(query, initialPartitions);\n            }\n        } else {\n            result = populateNonEmptyResult(query, entries, initialPartitions);\n        }\n\n        return result;\n    }", "private static String getFilePath(String file) {\n        logger.entering(file);\n        String filePath = null;\n        URL fileURL = GuiMapReaderFactory.class.getClassLoader().getResource(file);\n        if (fileURL != null) {\n            filePath = fileURL.getPath();\n        }\n        logger.exiting(filePath);\n        return filePath;\n    }", "public synchronized String getSignature(long nonce) {\n    return HexEncoder.encode(sha256HMAC.doFinal(buildSignatureData(nonce)))\n        .toLowerCase(Locale.ROOT);\n  }", "  public void setDay (String d) {\n    setDateTime(d,getTime());\n  }\n", "void doubleClicked ( ) ;", "\tpublic ExamPeriod (java.lang.Long uniqueId) {\n\t\tsuper(uniqueId);\n\t}\n", "public static String pidMemoryUsage ( int pid ) throws IOException { Process process = new ProcessBuilder ( ) . command ( STR_ , STR_ , STR_ , STR_ , Long . toString ( pid ) ) . start ( ) ; BufferedReader reader = new BufferedReader ( new InputStreamReader ( process . getInputStream ( ) ) ) ; reader . readLine ( ) ; String line = reader . readLine ( ) ; String [ ] parts = line . trim ( ) . split ( STR_ , NUM_ ) ; int readPid = Integer . parseInt ( parts [ NUM_ ] ) ; if ( pid != readPid ) { throw new RuntimeException ( STR_ + line + STR_ ) ; } long rss = Long . parseLong ( parts [ NUM_ ] ) * NUM_ ; long vsz = Long . parseLong ( parts [ NUM_ ] ) ; return String . format ( STR_ , rss , vsz ) ; }", "    private void loadResources() throws IOException {\n\n        Class c = this.getClass();\n/*\n        alertXML = StaticDataHelper.read(\n            c.getResourceAsStream(XML_ALERT)\n        );\n*/\n        clientInitXML = StaticDataHelper.read(\n            c.getResourceAsStream(XML_INITIALIZATION)\n        );\n\n        modificationsXMLTemplate = StaticDataHelper.read(\n            c.getResourceAsStream(XML_MODIFICATIONS)\n        );\n        \n        mappingXML = StaticDataHelper.read(\n            c.getResourceAsStream(XML_MAPPING)\n        );\n    }\n", "public static Builder createBuilder ( Header header , WritableFontData data ) { return new Builder ( header , data ) ; }", "    protected String result(HttpServletRequest request) {\n        return (\"bob\".equalsIgnoreCase(request.getParameter(\"name\")) ? \"found\"\n                : \"not-found\");\n    }\n", "    public void terminateServerThread(ServerThread serverThread) {\n        if (serverThread != null) {\n            serverThreadList.remove(serverThread);\n            Thread moribund = serverThread;\n            serverThread = null;\n            moribund.interrupt();\n        }\n    }\n", "private void drawFrequencyLineAndLabel(Graphics2D graphics,long frequency){\n  double xAxis=getAxisFromFrequency(frequency);\n  drawFrequencyLine(graphics,xAxis,mColorSpectrumLine);\n  drawTickLine(graphics,frequency,false);\n  graphics.setColor(mColorSpectrumLine);\n  drawFrequencyLabel(graphics,xAxis,frequency);\n}\n", "private void appendAffix(StringBuffer buffer,String affixPattern,String expAffix,boolean localized){\n  if (affixPattern == null) {\n    appendAffix(buffer,expAffix,localized);\n  }\n else {\n    int i;\n    for (int pos=0; pos < affixPattern.length(); pos=i) {", "public static Map<String,Object> createOrderNote(DispatchContext dctx,Map<String,? extends Object> context){\n  Delegator delegator=dctx.getDelegator();\n  LocalDispatcher dispatcher=dctx.getDispatcher();\n  GenericValue userLogin=(GenericValue)context.get(\"userLogin\");\n  String noteString=(String)context.get(\"note\");\n  String noteName=(String)context.get(\"noteName\");\n  String orderId=(String)context.get(\"orderId\");\n  String internalNote=(String)context.get(\"internalNote\");\n  Map<String,Object> noteCtx=UtilMisc.<String,Object>toMap(\"note\",noteString,\"userLogin\",userLogin,\"noteName\",noteName);\n  Locale locale=(Locale)context.get(\"locale\");\n  try {\n    Map<String,Object> noteRes=dispatcher.runSync(\"createNote\",noteCtx);\n    if (ServiceUtil.isError(noteRes))     return noteRes;\n    String noteId=(String)noteRes.get(\"noteId\");\n    if (UtilValidate.isEmpty(noteId)) {\n      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,\"OrderProblemCreatingTheNoteNoNoteIdReturned\",locale));\n    }\n    Map<String,String> fields=UtilMisc.<String,String>toMap(\"orderId\",orderId,\"noteId\",noteId,\"internalNote\",internalNote);\n    GenericValue v=delegator.makeValue(\"OrderHeaderNote\",fields);\n    delegator.create(v);\n  }\n catch (  GenericEntityException ee) {\n    Debug.logError(ee,module);\n    return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"OrderOrderNoteCannotBeCreated\",UtilMisc.toMap(\"errorString\",ee.getMessage()),locale));\n  }\ncatch (  GenericServiceException se) {\n    Debug.logError(se,module);\n    return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"OrderOrderNoteCannotBeCreated\",UtilMisc.toMap(\"errorString\",se.getMessage()),locale));\n  }\n  return ServiceUtil.returnSuccess();\n}\n", "< T > T onReplication ( AbstractReplicationPacket < T > packet ) throws RemoteException ;", "\tprivate Host useCache(String localId) {\n\t\tHost h = null;\n\n\t\tlong now = System.currentTimeMillis();\n\n\t\tif (!localId.equals(\"all\")) {\n\t\t\tHost aux = cache.get(localId);\n\t\t\tif (aux != null)\n\t\t\t\tif ((now - aux.getLocalTime()) < CACHE_TIME)\n\t\t\t\t\th = aux;\n\t\t}\n\n\t\treturn h;\n\t}\n", "    public void setToolsVisible(boolean visible) {\n        synchronized (getTreeLock()) {\n            if ((getToolBar() != null) &&\n                    (getToolBar().isVisible() != visible)) {\n                getToolBar().setVisible(visible);\n            ", "    public void setSampleid(Long newVal) {\n        if ((newVal != null && this.sampleid != null && (newVal.compareTo(this.sampleid) == 0)) ||\n            (newVal == null && this.sampleid == null && sampleid_is_initialized)) {\n            return;\n        }\n        this.sampleid = newVal;\n        sampleid_is_modified = true;\n        sampleid_is_initialized = true;\n    }\n", "@SuppressWarnings({\"unused\", \"WeakerAccess\"})\n    public void enableDeviceNetworkInfoReporting(boolean value){\n        enableNetworkInfoReporting = value;\n        StorageHelper.putBoolean(context,storageKeyWithSuffix(Constants.NETWORK_INFO),enableNetworkInfoReporting);\n        getConfigLogger().verbose(getAccountId(), \"Device Network Information reporting set to \" + enableNetworkInfoReporting);\n    }", "private synchronized boolean stillLeased ( ) throws InterruptedException { if ( _cancelled ) return BOOL_ ; _expirationTime = SystemTime . timeMillis ( ) + _duration ; wait ( _duration ) ; if ( _renewed ) { _renewed = BOOL_ ; return BOOL_ ; } _expired = BOOL_ ; return BOOL_ ; }", "private void addFoldersToSearchIn(final List<String> folders) {\n\n        if (null == folders) {\n            return;\n        }\n\n        for (String folder : folders) {\n            if (!CmsResource.isFolder(folder)) {\n                folder += \"/\";\n            }\n\n            m_foldersToSearchIn.add(folder);\n        }\n    }", "protected PostgreSQLModuleViewsLoader ( ) { }", "public ManagementGroupVertex getGroupVertex(final int index) {\n\n\t\tif (index < this.groupVertices.size()) {\n\t\t\treturn this.groupVertices.get(index);\n\t\t}\n\n\t\treturn null;\n\t}", "public static boolean removeFromCache(String imageUri,DiskCache diskCache){\n  File image=diskCache.get(imageUri);\n  return image != null && image.exists() && image.delete();\n}\n", "\tprotected void execute(MoveOperation move) {\n\t\tIMovableBinding binding = (IMovableBinding) ast\n\t\t\t\t.getBindingManager().getBinding(move.elementName);\n\t\tif (binding == null) {\n\t\t\tlog.warn(\"Could find type \" + move.elementName + \" to move\");\n\t\t\treturn;\n\t\t}\n\n\t\tASTNode dest = null;\n\t\tswitch (((IBinding) binding).getKind()) {\n\t\tcase TYPE:\n\t\tcase PACKAGE:\n\t\t\tdest = ASPackage.getOrCreatePackage(ASName\n\t\t\t\t\t.valueOf(move.newLocation));\n\t\t\tbreak;\n\n\t\tcase VARIABLE:\n\t\tcase METHOD:\n\t\t\tdest = ASTypeDeclaration.getType(move.newLocation);\n\t\t\tbreak;\n\t\t}\n\n\t\ttry {\n\t\t\tString newKey = binding.move(dest);\n\t\t\tast.getBindingManager().renameBinding(binding.getKey(), newKey);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Error moving binding\", e);\n\t\t}\n\t}\n", "public String rewriteUrl ( String originalUrl ) ;", "@SuppressWarnings(\"unchecked\") public Iterator<Node> xpathIterator(String xpath){\n  List<Node> nodes=XMLUtil.selectNodes(document,xpath);\n  return nodes.iterator();\n}\n", "    public boolean allow(Message m) {\n        byte[] guid=m.getGUID();\n        for (int i=0; i<BAD_BYTES_LENGTH; i++) {\n            if (guid[i]!=BAD_BYTES[i])\n                return true;    //Does not match; allow.\n        }\n        return false;           //Does match; disallow.\n    }           \n", "@HLEFunction(nid=0x0C622081,version=150,checkInsideInterrupt=true) public int sceWlanGetEtherAddr(TPointer etherAddr){\n  pspNetMacAddress macAddress=new pspNetMacAddress();\n  macAddress.setMacAddress(Wlan.getMacAddress());\n  macAddress.write(etherAddr);\n  if (log.isDebugEnabled()) {\n    log.debug(String.format(\"sceWlanGetEtherAddr returning %s\",macAddress));\n  }\n  return 0;\n}\n", "\tprivate void refreshMain() {\n\t\tif (null != mainComponent) {\n\t\t\tmainComponent.setSize(800, detView.packagesTable.getRowCount()\n\t\t\t\t\t* detView.packagesTable.getRowHeight());\n\t\t\tint tempDivLoc = 0;\n\t\t\ttempDivLoc = this.splity.getDividerLocation();\n\t\t\tthis.mainComponent = detView.getMainComponent();\n\t\t\tmainComponent.setSize(800, detView.packagesTable.getRowCount()\n\t\t\t\t\t* detView.packagesTable.getRowHeight());\n\t\t\tthis.splity.setTopComponent(mainComponent);\n\t\t\tthis.splity.setDividerLocation(tempDivLoc);\n\t\t} else\n\t\t\tthis.mainComponent = detView.getMainComponent();\n\n\t}\n", "    private void printTupleset(String n, TupleSet ts, Map<Object,String> atomMap) {\n        file.printf(\"TupleSet %s = factory.noneOf(%d);%n\", n, ts.arity());\n        for(Tuple t:ts) {\n            file.printf(\"%s.add(\",n);\n            for(int i=0; i<ts.arity(); i++) {\n                if (i!=0) file.printf(\".product(\");\n                Object a=t.atom(i);\n                String b=atomMap==null ? null : atomMap.get(a);\n                file.printf(\"factory.tuple(\\\"%s\\\")\" , (b==null ? a.toString() : b) );\n                if (i!=0) file.printf(\")\");\n            }\n            file.printf(\");%n\");\n        }\n    }\n", "BinaryResult file ( String path ) throws RestApiException ;", "\tpublic int hashCode() {\n\t\treturn expr.hashCode();\n\t}\n", "private void checkState ( ) { if ( diagramRetrieved ) { throw new IllegalStateException ( STR_ ) ; } }", "public void skipChars(final int n){\n  if (n < 0) {\n    throw new IllegalArgumentException(\"Amount of chars to skip must be non neagitve: \" + n);\n  }\n  if (myPosition + n >= myText.length()) {\n    throw new IllegalArgumentException(\"Skipping beyond end of the text (\" + myPosition + \" + \"+ n+ \" >= \"+ myText.length()+ \")\");\n  }\n  myPosition+=n;\n}\n", "private boolean streamHasMoreTokens() {\n        if (streamTokenizer.ttype != StreamTokenizer.TT_EOF) {\n            try {\n                streamTokenizer.nextToken();\n            } catch (IOException e1) {\n                throw new RuntimeException(e1);\n            }\n        }\n        return streamTokenizer.ttype != StreamTokenizer.TT_EOF && streamTokenizer.ttype != -1;\n    }", "\tpublic boolean drawFocusRing(Widget widget, double x, double y) {\n\t\treturn context.drawFocusRing(widget.getElement(), x, y);\n\t}\n", "    public void unregisterName(String name) {\n        operatorNameMap.remove(name);\n    }\n", "protected PostgreSQLModuleViewsLoader ( ) { }", "private void removeLockToJobsNeedingLock(String lock,Job job,boolean shouldBeAtHead){\n  ArrayList<Job> jobs=lockToJobsNeedingLock.get(lock);\n  if (shouldBeAtHead && jobs.get(0) != job) {\n    throw new RuntimeException(\"Tried to remove \" + job + \" but it \"+ \"wasn't at the head of the list for lock \"+ lock+ \"! List is: \"+ jobs);\n  }\n  boolean removed=jobs.remove(job);\n  if (!removed) {\n    throw new RuntimeException(\"Didn't remove job \" + job + \" from list \"+ jobs);\n  }\n}\n", "CTag insertTag ( ITreeNode < CTag > parent , String name , String description , TagType type ) throws CouldntSaveDataException ;", "    public void showPage() {\n        final ShowPageImage viewer = new ShowPageImage();\n\n        if (SwingUtilities.isEventDispatchThread()) {\n            viewer.run();\n        } else {\n            SwingUtilities.invokeLater(viewer);\n        }\n    }\n", "  \n  public void setHeaderForeground(final Color c) {    \n    for (int i=0; this.header != null && i < this.header.length; i++) {\n      this.header[i].setForeground(c);\n    }\n  }\n", "public void addNode(NodeT node) {\n        node.setOwner(this);\n        nodeTable.put(node.key(), node);\n    }", "\tprivate Image checkOrCreateImage(Image image) {\n\n\t\tfinal Rectangle mapRect = map.getViewport();\n\n\t\t// create map image\n\t\tif (!(Util.canReuseImage(image, mapRect))) {\n\t\t\timage = Util.createImage(getDisplay(), image, mapRect);\n\t\t}\n\n\t\treturn image;\n\t}\n", "    public IToolBarManager getToolBarManager() {\n        if (checkDisposed()) {\n            return null;\n        }\n        return toolBarManager;\n    }\n", "public void fillRow ( final int row , final Array array ) { QL . require ( cols ( ) == array . size ( ) , ARRAY_IS_INCOMPATIBLE ) ; if ( this . addr . isContiguous ( ) && array . addr . isContiguous ( ) ) { System . arraycopy ( array . $ , NUM_ , $ , addr", "void applySubscribe ( ) ;", "public static void writeLongSequence(long hd, long hr, DataOutput out) throws IOException {\n        if(hr < hd)\n            throw new IllegalArgumentException(\"hr (\" + hr + \") has to be >= hd (\" + hd + \")\");\n\n        if(hd == 0 && hr == 0) {\n            out.write(0);\n            return;\n        }\n\n        long delta=hr - hd;\n\n        // encode highest_delivered followed by delta\n        byte bytes_for_hd=bytesRequiredFor(hd), bytes_for_delta=bytesRequiredFor(delta);\n        byte bytes_needed=encodeLength(bytes_for_hd, bytes_for_delta);\n        out.write(bytes_needed);\n\n        for(int i=0; i < bytes_for_hd; i++)\n            out.write(getByteAt(hd, i));\n\n        for(int i=0; i < bytes_for_delta; i++)\n            out.write(getByteAt(delta, i));\n    }", "public void replace(Component existingComponent,Component newComponent){\n  if (existingComponent == null || newComponent == null) {\n    throw new IllegalArgumentException(\"Components must be non-null\");\n  }\n  if (springsChanged) {\n    registerComponents(horizontalGroup,HORIZONTAL);\n    registerComponents(verticalGroup,VERTICAL);\n  }\n  ComponentInfo info=(ComponentInfo)componentInfos.remove(existingComponent);\n  if (info == null) {\n    throw new IllegalArgumentException(\"Component must already exist\");\n  }\n  host.removeComponent(existingComponent);\n  if (newComponent.getParent() != host) {\n    host.addComponent(newComponent);\n  }\n  info.setComponent(newComponent);\n  componentInfos.put(newComponent,info);\n  invalidateHost();\n}\n", "public static double F1(int s1[],int s2[]){\n  double p=P_Precision(s1,s2);\n  double r=P_Recall(s1,s2);\n  if (Double.isNaN(r) || Double.isNaN(p)) {\n    return Double.NaN;\n  }\n  if (p == 0.0 && r == 0.0)   return 0.0;\n  return 2. * p * r / (p + r);\n}\n", "\tprotected void close() {\n\t\tcontext.close();\n\t\tcontext = null;\n\n\t\tstate = UNINSTALLED;\n\t}\n", "public EngineOutput(List<String> oStd,List<String> oErr){\n  std=Collections.unmodifiableList(oStd);\n  err=Collections.unmodifiableList(oErr);\n}\n", "public SyncHttpClient ( int httpPort , int httpsPort ) { super ( BOOL_ , httpPort , httpsPort ) ; }", "public AdeExtConfigProperties(String propertyFile) throws AdeException {\n  final ConfigPropertiesWrapper m_props=new ConfigPropertiesWrapper(ADE_EXT_PREFIX);\n  m_props.addPropertyFile(propertyFile);\n  m_props.addProperties(System.getProperties(),\"system property\");\n  m_rmiPort=m_props.getIntProperty(RMI_PORT_PARAM,0);\n  m_rmiServerCodeBase=m_props.getStringProperty(RMI_CODE_BASE_PARAM,null);\n  m_trainingScriptFilePath=m_props.getStringProperty(TRAINING_SCRIPT_FILE_PARAM,null);\n  if (m_props.containsKey(PARSE_ERROR_TO_KEEP)) {\n    m_parseErrorsToKeep=m_props.getIntProperty(PARSE_ERROR_TO_KEEP);\n  }\n else {\n    m_parseErrorsToKeep=-1;\n  }\n  if (m_props.containsKey(PARSE_ERROR_DAYS_TO_TOLERATE)) {\n    m_parseErrorDaysToTolerate=m_props.getIntProperty(PARSE_ERROR_DAYS_TO_TOLERATE);\n  }\n else {\n    m_parseErrorDaysToTolerate=-1;\n  }\n  if (m_props.containsKey(PARSE_ERROR_TRACK_NULL_COMPONENT)) {\n    m_parseErrorTrackNullComponent=m_props.getBooleanProperty(PARSE_ERROR_TRACK_NULL_COMPONENT);\n  }\n else {\n    m_parseErrorTrackNullComponent=false;\n  }\n  if (m_props.containsKey(MSG_RATE_MSG_TO_KEEP)) {\n    m_msgRateMsgToKeep=m_props.getIntProperty(MSG_RATE_MSG_TO_KEEP);\n  }\n else   m_msgRateMsgToKeep=-1;\n  if (m_props.containsKey(MSG_RATE_10MIN_SLOTS_TO_KEEP)) {\n    m_msgRate10MinIntervalToKeep=(short)m_props.getIntProperty(MSG_RATE_10MIN_SLOTS_TO_KEEP);\n  }\n else {\n    m_msgRate10MinIntervalToKeep=-1;\n  }\n  if (m_props.containsKey(MSG_RATE_MERGE_SOURCE)) {\n    m_isMsgRateMergeSource=m_props.getBooleanProperty(MSG_RATE_MERGE_SOURCE);\n  }\n else {\n    m_isMsgRateMergeSource=false;\n  }\n  if (m_props.containsKey(RUNTIME_MODEL_DATA_STORE_AT_SOURCE)) {\n    m_isRuntimeModelDataStoreAtSource=m_props.getBooleanProperty(RUNTIME_MODEL_DATA_STORE_AT_SOURCE);\n  }\n else {\n    m_isRuntimeModelDataStoreAtSource=null;\n  }\n  if (m_props.containsKey(MSG_RATE_10MIN_SUBINTERVAL_LIST)) {\n    final String subIntervalList=m_props.getStringProperty(MSG_RATE_10MIN_SUBINTERVAL_LIST);\n    final StringTokenizer tokenizer=new StringTokenizer(subIntervalList,\",\");\n    m_msgRate10MinSubIntervalList=new short[tokenizer.countTokens()];\n    for (int i=0; i < m_msgRate10MinSubIntervalList.length; i++) {\n      m_msgRate10MinSubIntervalList[i]=Short.parseShort(tokenizer.nextToken());\n    }\n  }\n else {\n    m_msgRate10MinSubIntervalList=null;\n  }\n  if (m_props.containsKey(MSG_RATE_REPORT_FREQ)) {\n    m_msgRateReportReq=m_props.getStringProperty(MSG_RATE_REPORT_FREQ);\n    boolean isNumber=false;\n    try {\n      Integer.parseInt(m_msgRateReportReq);\n      isNumber=true;\n    }\n catch (    Exception e) {\n    }\n    if (!m_msgRateReportReq.equalsIgnoreCase(\"MONTHLY\") && !isNumber) {\n      throw new AdeUsageException(MSG_RATE_REPORT_FREQ + \" must be either \\\"MONTHLY\\\" or number\");\n    }\n  }\n else {\n    m_msgRateReportReq=\"\";\n  }\n  if (m_props.containsKey(STATS_ROOT_DIR)) {\n    m_statsRootDir=m_props.getStringProperty(STATS_ROOT_DIR);\n  }\n else {\n    m_statsRootDir=DEFAULT_STATS_ROOT_DIR;\n  }\n  m_props.verifyAllPropertiesUsed();\n}\n", "public void stopLoad ( ) ;", "private boolean isShortOption(String token)\n    {\n        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n        return token.startsWith(\"-\") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));\n    }", "    public void cascadeFrames() {\n        restoreFrames();\n        int x = 0;\n        int y = 0;\n        JInternalFrame allFrames[] = getAllFrames();\n\n        manager.setNormalSize();\n        int frameHeight =\n                getBounds().height - 5 - allFrames.length * FRAME_OFFSET;\n        int frameWidth =\n                getBounds().width - 5 - allFrames.length * FRAME_OFFSET;\n        for (int i = allFrames.length - 1; i >= 0; i--) {\n            allFrames[i].setSize(frameWidth, frameHeight);\n            allFrames[i].setLocation(x, y);\n            x = x + FRAME_OFFSET;\n            y = y + FRAME_OFFSET;\n        }\n    }\n", "public long toLong ( ) { return m_value . longValue ( ) ; }", "public static ByteBuffer encode(String string) throws CharacterCodingException {\n  return encode(string,true);\n}\n", "        public void checkLink(final String lib) {\n            if (m_delegate != null) {\n                m_delegate.checkLink(lib);\n            }\n        }\n", "public EmailBuilder bcc ( List < String > bccAddresses ) { this . bcc . addAll ( bccAddresses ) ; return this ; }", "public static Pattern compile(String regex,String flags) throws PatternSyntaxException{\n        return new Pattern(regex, flags);\n    }", "int readMemory ( IAddress address , int size ) throws DebugExceptionWrapper ;", "    public void removeChild(String name) {\n        JSnarkElement child = getChild(name);\n        if (child instanceof DefaultElement) {\n            ((DefaultElement) child).removeThis();\n        }\n    }\n", "public static List<String> split(\n    List<String> list, Functor<Integer, Integer> symbols, String text, int begin, int end, char delimiter, Functor<Integer, Integer> extra\n    ) {\n        int next;\n        while ((next = Balanced.indexOf(symbols, text, begin, end, delimiter, extra)) != -1) {\n            list.add(text.substring(begin, next));\n            begin = next + 1;\n        }\n        if (begin < end) list.add(text.substring(begin, end));\n        while (list.size() > 0 && list.get(list.size()-1).length() == 0) list.remove(list.size()-1);\n        return list;\n    }", "public static boolean isXML11ValidLiteral(int c) {\n        return ((c < 0x10000 && ((XML11CHARS[c] & MASK_XML11_VALID) != 0 && (XML11CHARS[c] & MASK_XML11_CONTROL) == 0))\n            || (0x10000 <= c && c <= 0x10FFFF)); \n    }", "    public void hideDiagram() {\n\tthis.model = null;\n\tthis.diagram = null;\n\n\tthis.diagramPanel.setVisible(false);\n\tthis.previewPanel.setEnabled(false);\n\tthis.modelTree.setVisible(false);\n    }\n", "protected void importTypes ( final int rawModuleId , final int moduleId ) throws SQLException { PostgreSQLDataImporter . importTypes ( getProvider ( ) . getConnection ( ) , rawModuleId , moduleId ) ; }", "\tprotected void recordGwtModulePath(String gwtModulePath) {\n\t\tGwtChanges changes = this.getGwtChanges();\n\t\tthis.recordReturn(changes, changes.createGwtModulePath(null),\n\t\t\t\tgwtModulePath, new AlwaysMatcher());\n\t}\n", "private ExpirationAttributes parseExpirationAttributes(RegionFunctionArgs.ExpirationAttrs newExpirationAttrs,ExpirationAttributes oldExpirationAttributes){\n  ExpirationAction action=oldExpirationAttributes.getAction();\n  int timeout=oldExpirationAttributes.getTimeout();\n  if (newExpirationAttrs.getTime() != null) {\n    timeout=newExpirationAttrs.getTime();\n  }\n  if (newExpirationAttrs.getAction() != null) {\n    action=newExpirationAttrs.getAction();\n  }\n  return new ExpirationAttributes(timeout,action);\n}\n", "   public String getFormat(){\n      StringBuffer format = new StringBuffer(\"\");\n\n      if (!solveOrder.getText().trim().equals(\"\")){\n         format.append(\"SOLVE_ORDER='\" + solveOrder.getText().trim() + \"'\");\n      }\n\n      if (!backColor.getText().trim().equals(\"\")){\n          if (format.length()>0) format.append(\", \");\n         format.append(\"BACK_COLOR='\" + backColor.getText().trim() + \"'\");\n      }\n      if (!foreColor.getText().trim().equals(\"\")){\n         if (format.length()>0) format.append(\", \");\n         format.append(\"FORE_COLOR='\" + foreColor.getText().trim() + \"'\");\n      }\n      if (!cbFormats.getSelectedItem().toString().trim().equals(\"\")){\n         if (format.length()>0) format.append(\", \");\n         format.append(\"FORMAT_STRING='\" + cbFormats.getSelectedItem() + \"'\");\n      }\n\n      return format.toString();\n   }\n", "\tpublic void delete(Employees entity) {\n\t\tEntityManagerHelper\n\t\t\t\t.log(\"deleting Employees instance\", Level.INFO, null);\n\t\ttry {\n\t\t\tentity = getEntityManager().getReference(Employees.class,\n\t\t\t\t\tentity.getId());\n\t\t\tgetEntityManager().remove(entity);\n\t\t\tEntityManagerHelper.log(\"delete successful\", Level.INFO, null);\n\t\t} catch (RuntimeException re) {\n\t\t\tEntityManagerHelper.log(\"delete failed\", Level.SEVERE, re);\n\t\t\tthrow re;\n\t\t}\n\t}\n", "public static String getServletPath(HttpServletRequest request) {\n    String servletPath = request.getServletPath();\n    if (Strings.isNotEmpty(servletPath)) {\n      return servletPath;\n    } else {\n      String uri = request.getRequestURI();\n      if (uri.length() == 1) return \"\";\n      // process context\n      String context = request.getContextPath();\n      int length = context.length();\n      if (length > 2) {\n        if ('/' == context.charAt(length - 1)) context = context.substring(0, length - 1);\n        return servletPath = uri.substring(context.length());\n      } else {\n        return uri;\n      }\n    }\n  }", "    public void addValue() {\n        super.addValue();\n        series.add(new Double(getValue()));\n    }\n", "protected void runStatements ( Reader reader , PrintStream out ) throws IOException { log . debug ( STR_ ) ; StringBuilder txt = new StringBuilder ( ) ; String line = STR_ ; BufferedReader in = new BufferedReader ( reader ) ; while ( ( line = in . readLin", "private int getExtendedState(SynthContext ctx, Values v) {\n        JComponent c      = ctx.getComponent();\n        int        xstate = 0;\n        int        mask   = 1;\n\n        // check for the SeaGlass.State client property\n        // Performance NOTE: ", "public static <T> Predicate<T> OR(final Predicate<T> a, final Predicate<T> b) {\n\treturn new Predicate<T>() {\n\t    public boolean check(T obj) {\n\t\treturn a.check(obj) || b.check(obj);\n\t    }\n\t};\n    }", "public void marshall(DeleteJobRequest deleteJobRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (deleteJobRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(deleteJobRequest.getJobName(), JOBNAME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public static boolean canAccessSystemClipboard(){\n  boolean canAccess=false;\n  if (!GraphicsEnvironment.isHeadless()) {\n    SecurityManager sm=System.getSecurityManager();\n    if (sm == null) {\n      canAccess=true;\n    }\n else {\n      try {\n        sm.checkPermission(SecurityConstants.AWT.ACCESS_CLIPBOARD_PERMISSION);\n        canAccess=true;\n      }\n catch (      SecurityException e) {\n      }\n      if (canAccess && !isTrustedContext()) {\n        canAccess=canCurrentEventAccessSystemClipboard(true);\n      }\n    }\n  }\n  return canAccess;\n}\n", "protected void ccAllApprovals ( ) { if ( ! NotifyHandling . ALL . equals ( notify ) && ! NotifyHandling . OWNER_REVIEWERS . equals ( notify ) ) { return ; } try { for ( Account . Id id : changeData . reviewers ( ) . all ( ) ) { add ( RecipientType . CC , id ) ; } } catch ( OrmException err ) { log . warn ( STR_ , err ) ; } }", "@Override\n    public DeleteRobotResult deleteRobot(DeleteRobotRequest request) {\n        request = beforeClientExecution(request);\n        return executeDeleteRobot(request);\n    }", "\tpublic FuncBinding lookupFunc( String id ) {\n\t\t\n\t\tSymTable symtab = currentSymTable() ;\n\t\tFuncBinding rslt = null ;\n\t\t\n\t\t// search all enclosing scopes\n\t\twhile( symtab != null ) {\n\t\t\tif ( symtab.funcExist( id ) ) {\n\t\t\t\trslt = symtab.getFunc( id ) ;\n\t\t\t\tbreak ; // found it, stop search\n\t\t\t} else {\n\t\t\t\t// not found - go up to the enclosing scope\n\t\t\t\tsymtab = symtab.parent() ;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn rslt ;\n\t}\n", "public synchronized void addToState(BNetwork newState){\n  for (  ChanceNode cn : new ArrayList<ChanceNode>(newState.getChanceNodes())) {\n    cn.setId(cn.getId() + \"'\");\n    addNode(cn);\n    connectToPredictions(cn);\n  }\n}\n", "void deleteFunctionNodeComment ( INaviFunctionNode functionNode , Integer commentId , Integer userId ) throws CouldntDeleteException ;", "public static HashMap<String, ArrayList<String>> getIcnDistribution(HashMap data, String icin) {\n        HashMap<String, ArrayList<String>> results = new HashMap<String, ArrayList<String>>();\n        ArrayList<HashMap<String, String>> soilLayers;\n        soilLayers = getSoilLayer(data);\n\n        icin = sum(icin);\n        if (icin == null) {\n            LOG.error(\"Input variable ICIN come with invalid  value icin={}\", icin);\n            return results;\n        }\n\n        String lastSllb = \"0\";\n        String[] productSBXTH = new String[soilLayers.size()];\n        for (int i = 0; i < soilLayers.size(); i++) {\n            HashMap<String, String> soilLayer = soilLayers.get(i);\n            String sllb = getValueOr(soilLayer, \"sllb\", \"\");\n            String slbdm = getValueOr(soilLayer, \"slbdm\", \"\");\n            String thick = substract(sllb, lastSllb);\n            productSBXTH[i] = product(slbdm, thick);\n            if (productSBXTH[i] == null) {\n                LOG.error(\"Invalid SLLB and/or SLBDM in the soil layer data with value sllb={}, slbdm={}\", sllb, slbdm);\n                return results;\n            }\n            lastSllb = sllb;\n        }\n\n        String totalSBXTH = sum(productSBXTH);\n        if (compare(totalSBXTH, \"0\", CompareMode.EQUAL)) {\n            LOG.error(\"Total SLBDM * thick is 0\");\n            return results;\n        }\n        String nppm = divide(product(icin, \"10\"), totalSBXTH);\n        String icnh4 = product(\"0.1\", nppm);\n        String icno3 = product(\"0.9\", nppm);\n\n        ArrayList<String> icnTotArr = new ArrayList();\n        ArrayList<String> icnh4Arr = new ArrayList();\n        ArrayList<String> icno3Arr = new ArrayList();\n\n        for (int i = 0; i < productSBXTH.length; i++) {\n            String icn_tot = divide(product(productSBXTH[i], icin), totalSBXTH);\n            icnTotArr.add(round(icn_tot, 2));\n            icnh4Arr.add(round(icnh4, 2));\n            icno3Arr.add(round(icno3, 2));\n        }\n\n        results.put(\"icn_tot\", icnTotArr);\n        results.put(\"icnh4\", icnh4Arr);\n        results.put(\"icno3\", icno3Arr);\n        return results;\n    }", "    public Photo getParentPhoto() {\n        if (deleted) throw new IllegalStateException(\"Tag has already been deleted\");\n        return photo;\n    }\n", "    private String formatCnt(final int cnt, final int total) {\n        String result = (cnt + 1) + \"/\" + total;\n        return \"        \".substring(result.length()) + result;\n    }\n", "public ParameterBlock add(Object obj){\n  parameters.addElement(obj);\n  return this;\n}", "    private void updateTree() {\n        if (errorTree == null) {\n            logger.error(\"Unable to update the tree because errorTree is null\");\n        }\n        else {\n            treeModel.reload();\n            logger.debug(\"Updating the tree\");\n     ", "public RhythmOverlay ( int initialCapacity ) { super ( initialCapacity ) ; }", "public float min ( ) { if ( size ( ) == NUM_ ) { throw new IllegalStateException ( STR_ ) ; } float min = _data [ _pos - NUM_ ] ; for ( int i = _pos - NUM_ ; i -- > NUM_ ; ) { min = Math . min ( min , _data [ _pos ] ) ; } return min ; }", "public String post ( Context context , String url , HttpEntity entity , String contentType ) throws HttpException { return sendRequest ( httpClient , httpContext , addEntityToRequestBase ( new HttpPost ( url ) , entity ) , contentType , context ) ; }", "public PatternMatcher execute ( ) throws DataflowAnalysisException { workList . addLast ( cfg . getEntry ( ) ) ; while ( ! workList . isEmpty ( ) ) { BasicBlock basicBlock = workList . removeLast ( ) ; visitedBlockMap . put ( basicBlock , basicBlock ) ; BasicBlock . InstructionIterator i = basicBlock . instructionIterator ( ) ; while ( i . hasNext ( ) ) { attemptMatch ( basicBlock , i . duplicate ( ) ) ; i . next ( ) ; } Iterator < BasicBlock > succIterator = cfg . successorIterator ( basicBlock ) ; while ( succIterator . hasNext ( ) ) { BasicBlock succ = succIterator . next ( ) ; if ( visitedBlockMap . get ( succ ) == null ) { workList . addLast ( succ ) ; } } } return this ; }", "public void testInvokeMethodFallsThroughToMethodClosureInBinding ( ) throws IOException , CompilationFailedException , IllegalAccessException , InstantiationException { String text = STR_ ; GroovyCodeSource codeSource = new GroovyCodeSource ( text , STR_ ", "  public void writeStartClasses() throws IOException {\n    write(\"<\" + KOMLConstants.CLASSES + \">\\n\");\n  }\n", "public void testQtz259LW ( ) throws Exception { CronScheduleBuilder schedBuilder = CronScheduleBuilder . cronSchedule ( STR_ ) ; Trigger trigger = TriggerBuilder . newTrigger ( ) . withIdentity ( STR_ ) . withSchedule ( schedBuilder ) . build ( ) ; int i ", "public IdentityArrayList(Collection<? extends E> c){\n  elementData=c.toArray();\n  size=elementData.length;\n  if (elementData.getClass() != Object[].class)   elementData=Arrays.copyOf(elementData,size,Object[].class);\n}\n", "public long valueLong ( ) { byte [ ] barr = new byte [ rawData . length * NUM_ ] ; ByteBuffer b = ByteBuffer . wrap ( barr , NUM_ , barr . length ) ; b . order ( java . nio . ByteOrder . LITTLE_ENDIAN ) ; IntBuffer i = b . asIntBuffer ( ) ; i . put ( NUM_ , rawData [ NUM_ ] ) ; i . put ( NUM_ , rawData [ NUM_ ] ) ; LongBuffer l = b . asLongBuffer ( ) ; return l . get ( ) ; }", "public static String[][] read(Set fileNames,LogQuery logQuery,Object userCrdential) throws IOException, NoSuchFieldException, IllegalArgumentException, RuntimeException, Exception {\n  LogReader lr=new LogReader();\n  lr.readConfiguration();\n  if (fileNames == null) {\n    throw new IllegalArgumentException(\"filenames can't be null\");\n  }\n  if (fileNames.isEmpty()) {\n    throw new IllegalArgumentException(\"filenames can't be empty\");\n  }\n else {\n    for (Iterator it=fileNames.iterator(); it.hasNext(); ) {\n      String ss=(String)it.next();\n      if (ss != null) {\n        ss=ss.trim();\n      }\n      if ((ss == null) || (ss.length() == 0)) {\n        throw new IllegalArgumentException(\"filename cannot be null\");\n      }\n    }\n  }\n  if (maxReordToReturn <= 0) {\n    maxReordToReturn=1;\n  }\n  if (logQuery != null) {\n    if (logQuery.getNumRecordsWanted() < LogQuery.ALL_RECORDS) {\n      logQuery.setMaxRecord(maxReordToReturn);\n    }\n else     if ((logQuery.getNumRecordsWanted() == LogQuery.MOST_RECENT_MAX_RECORDS) && (logTypeIsFile)) {\n      logQuery.setMaxRecord(maxReordToReturn);\n    }\n  }\n else {\n    logQuery=new LogQuery(maxReordToReturn);\n  }\n  String tmpF=getAllFilenames(fileNames);\n  setLoggerName(tmpF);\n  if (lr.isAllowed(userCrdential) != true) {\n    throw new AMLogException(tmpF + \":\" + AMLogException.LOG_RD_AUTH_FAILED);\n  }\n  if (logTypeIsFile) {\n    Set fullFileNames=new HashSet();\n    for (Iterator it=fileNames.iterator(); it.hasNext(); ) {\n      String ss=(String)it.next();\n      ss=logPathName + ss;\n      fullFileNames.add(ss);\n    }\n    queryResult=currentHandler.logRecRead(fullFileNames,logQuery,true);\n  }\n else {\n    queryResult=currentDBHandler.logRecRead(fileNames,logQuery,manager,true);\n  }\n  return queryResult;\n}\n", "public void markDelivered ( ) { mResponseDelivered = BOOL_ ; }", "public void put(String name, String... values) {\n    getMap().put(name, Arrays.asList(values));\n  }", "    private RefreshableMenuItem getEditMenuItem() {\n        if (this.editGraphItem == null) {\n            this.editGraphItem = new RefreshableMenuItem() {\n                @Override\n                protected void refresh(ResourceKind resource) {\n                    setAction(getActions().getEditAction(resource));\n                }\n            };\n            this.editGraphItem.setAccelerator(Options.EDIT_KEY);\n        }\n        return this.editGraphItem;\n    }\n", "private void defineToolBars(UIDefaults d){\n  d.put(\"ToolBar.contentMargins\",new InsetsUIResource(2,2,2,2));\n  d.put(\"ToolBar.opaque\",Boolean.TRUE);\n  d.put(\"ToolBar:Button.contentMargins\",new InsetsUIResource(4,4,4,4));\n  d.put(\"ToolBar:ToggleButton.conte", "public boolean isBinding ( ) { return ( bindingTransactionID != null ) ; }", "public static void upgradeToJerseyConfigBean ( List < Config > configs ) { List < Config > configsToAdd = new ArrayList < > ( ) ; List < Config > configsToRemove = new ArrayList < > ( ) ; List < String > movedConfigs = ImmutableList . of ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ) ; for ( Config config : configs ) { if ( hasPrefixIn ( movedConfigs , config . getName ( ) ) ) { configsToRemove . add ( config ) ; configsToAdd . add ( new Config ( config . getName ( ) . replace ( STR_ , STR_ ) , config . getValue ( ) ) ) ; } } configsToAdd . add ( new Config ( STR_ , RequestEntityProcessing . CHUNKED ) ) ; configs . removeAll ( configsToRemove ) ; configs . addAll ( configsToAdd ) ; }", "public boolean isStale ( ) { final IFile resource = getFile ( ) ; if ( resource . exists ( ) ) { IMarker [ ] foundMarkers ; try { foundMarkers = resource . findMarkers ( TLC_CRASHED_MARKER , BOOL_ , IResource . DEPTH_ZERO ) ; if ( foundMarkers . length > NUM_ ) { return BOOL_ ; } else { return BOOL_ ; } } catch ( CoreException shouldNotHappen ) { TLCActivator . logError ( shouldNotHappen . getMessage ( ) , shouldNotHappen ) ; } } return BOOL_ ; }", "public Node appendNode ( Object name , Map attributes , Object value ) { return new Node ( this , name , attributes , value ) ; }", "long crawl ( ) throws Exception ;", "private boolean isUnsignedNumber(String string){\n  String s=string.trim();\n  if (s.length() < 1)   return false;\n  if (s.charAt(0) != '+' && s.charAt(0) != '-') {\n    double value=0;\n    try {\n      value=Double.parseDouble(s);\n    }\n catch (    NumberFormatException e) {\n      return false;\n    }\n    return true;\n  }\n  return false;\n}\n", "public static SyncListPermissionUpdater updater(final String pathServiceSid, \n                                                    final String pathListSid, \n                                                    final String pathIdentity, \n                                                    final Boolean read, \n                                                    final Boolean write, \n                                                    final Boolean manage) {\n        return new SyncListPermissionUpdater(pathServiceSid, pathListSid, pathIdentity, read, write, manage);\n    }", "public ReconciliationContext(ReconciliationService.ReconAction reconAction,ObjectMapping mapping,Context callingContext,JsonValue reconParams,JsonValue overridingConfig,ReconciliationService service) throws BadRequestException {\n  this.reconAction=reconAction;\n  this.mapping=mapping;\n  this.reconId=callingContext.getId();\n  this.reconStat=new ReconciliationStatistic(this);\n  this.reconParams=reconParams;\n  this.overridingConfig=overridingConfig;\n  this.service=service;\n  reconTypeHandler=createReconTypeHandler(reconAction);\n  int noOfThreads=mapping.getTaskThreads();\n  if (noOfThreads > 0) {\n    executor=Executors.newFixedThreadPool(noOfThreads);\n  }\n else {\n    executor=null;\n  }\n}\n", "protected void sendDispositionHeader(final OutputStream out) throws IOException {\n  LOG.trace(\"enter sendDispositionHeader(OutputStream out)\");\n  out.write(CONTENT_DISPOSITION_BYTES);\n  out.write(QUOTE_BYTES);\n  out.write(EncodingUtil.getAsciiBytes(getName()));\n  out.write(QUOTE_BYTES);\n}\n", "public void detach(FoldingObserver obs) {\n\t\tobservers.remove(obs);\n\t}", "public final int myGetId ( ) { return this . id ; }", "    public void leaveFromGame(GamePlayer player) {\n        synchronized (this) {\n            gamePlayers.remove(player);\n            model.removePlayer(player.getPlayerId()); // will fireGameMapChange if need\n        }\n        if (!started) {\n            fireParametersChanged();\n        } \n\n        if (player == owner) {\n            terminateGame();    // will affect listeners\n        }\n    }\n", "public static void disableLogs ( ) { sLogsEnabled = BOOL_ ; }", "public ArraySet ( int capacity ) { if ( capacity == NUM_ ) { mHashes = SupportContainerInternals . EMPTY_INTS ; mArray = SupportContainerInternals . EMPTY_OBJECTS ; } else { allocArrays ( capacity ) ; } mSize = NUM_ ; }", "@Override\n    public InfraAlertCondition deserialize(JsonElement element, Type type, JsonDeserializationContext context)\n        throws JsonParseException\n    {\n        JsonObject obj = element.getAsJsonObject();\n        JsonElement condition = obj.get(\"data\");\n        if(condition != null && condition.isJsonObject())\n        {\n            JsonElement conditionType = condition.getAsJsonObject().get(\"type\");\n            if(conditionType != null)\n            {\n                switch(InfraAlertCondition.ConditionType.fromValue(conditionType.getAsString()))\n                {\n                    case METRIC:\n                        return gson.fromJson(condition, InfraMetricAlertCondition.class);\n                    case HOST_NOT_REPORTING:\n                        return gson.fromJson(condition, InfraHostNotReportingAlertCondition.class);\n                    case PROCESS_RUNNING:\n                        return gson.fromJson(condition, InfraProcessRunningAlertCondition.class);\n                }\n            }\n        }\n        return null;\n    }", "public boolean addAll(List<ImageInfo> collection){\n  final boolean added=data.addAll(collection);\n  notifyItemRangeInserted(0,data.size() + 1);\n  return added;\n}\n", "public void initializeOrgUnit(CmsRequestContext context, CmsOrganizationalUnit ou) {\n\n        CmsDbContext dbc = m_dbContextFactory.getDbContext(context);\n        m_driverManager.initOrgUnit(dbc, ou);\n\n    }", "public void clipTile(InternalTile tile, double scale, Coordinate panOrigin) throws GeomajasException {\n\t\tlog.debug(\"clipTile before {}\", tile);\n\t\tList<InternalFeature> orgFeatures = tile.getFeatures();\n\t\ttile.setFeatures(new ArrayList<InternalFeature>());\n\t\tGeometry maxScreenBbox = null; // The tile's maximum bounds in screen space. Used for clipping.\n\t\tfor (InternalFeature feature : orgFeatures) {\n\t\t\t// clip feature if necessary\n\t\t\tif (exceedsScreenDimensions(feature, scale)) {\n\t\t\t\tlog.debug(\"feature {} exceeds screen dimensions\", feature);\n\t\t\t\tInternalFeatureImpl vectorFeature = (InternalFeatureImpl) feature.clone();\n\t\t\t\ttile.setClipped(true);\n\t\t\t\tvectorFeature.setClipped(true);\n\t\t\t\tif (null == maxScreenBbox) {\n\t\t\t\t\tmaxScreenBbox = JTS.toGeometry(getMaxScreenEnvelope(tile, panOrigin));\n\t\t\t\t}\n\t\t\t\tGeometry clipped = maxScreenBbox.intersection(feature.getGeometry());\n\t\t\t\tvectorFeature.setClippedGeometry(clipped);\n\t\t\t\ttile.addFeature(vectorFeature);\n\t\t\t} else {\n\t\t\t\ttile.addFeature(feature);\n\t\t\t}\n\t\t}\n\t\tlog.debug(\"clipTile after {}\", tile);\n\t}", "private static XYZDataset createBackgroundData ( INDArray backgroundIn , INDArray backgroundOut ) { int nRows = backgroundIn . rows ( ) ; double [ ] xValues = new double [ nRows ] ; double [ ] yValues = new double [ nRows ] ; double [ ] zValues = new double [ nRows ] ; for ( int i = NUM_ ; i < nRows ; i ++ ) { xValues [ i ] = backgroundIn . getDouble ( i , NUM_ ) ; yValues [ i ] = backgroundIn . getDouble ( i , NUM_ ) ; zValues [ i ] = backgroundOut . getDouble ( i ) ; } DefaultXYZDataset dataset = new DefaultXYZDataset ( ) ; dataset . addSeries ( STR_ , new double [ ] [ ] { xValues , yValues , zValues } ) ; return dataset ; }", "    protected IClassPathModel getPreferredModelExtension(boolean create) throws CoreException {\n        if ( loaded[preferredIndex ] == null )\n            loaded[preferredIndex] = underlying[preferredIndex];\n        return loaded[preferredIndex ];\n    }\n", "protected void pi(String target,String body) throws SAXException {\n  mHandCont.processingInstruction(target,body);\n}", "private double getHalfLogDeterminant(CholeskyDecomposition chol) {\n    double[][] l = chol.getL();\n    double logdet = FastMath.log(l[0][0]);\n    for(int i = 1; i < l.length; i++) {\n      // We get half the log(det), because we did not square values here.\n      logdet += FastMath.log(l[i][i]);\n    }\n    return logdet;\n  }", "public static String[] toArray(List<String> list) {\n        String[] ret = new String[list.size()];\n        for (int i = 0; i < ret.length; i++)\n            ret[i] = list.get(i);\n        return ret;\n    }", "public void requestSecondsUntilPasswordExpiration(){\n  operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_PASSWORD_EXPIRATION);\n}\n", "public Observable<DetectorResponseInner> getSiteDetectorResponseAsync(String resourceGroupName, String siteName, String detectorName, DateTime startTime, DateTime endTime, String timeGrain) {\n        return getSiteDetectorResponseWithServiceResponseAsync(resourceGroupName, siteName, detectorName, startTime, endTime, timeGrain).map(new Func1<ServiceResponse<DetectorResponseInner>, DetectorResponseInner>() {\n            @Override\n            public DetectorResponseInner call(ServiceResponse<DetectorResponseInner> response) {\n                return response.body();\n            }\n        });\n    }", "public void hideSplashScreen(){\n  if (splashScreen != null) {\n    splashScreen.close();\n    splashScreen=null;\n  }\n}\n", "    public String getResolvedSql() {\n        String sql;\n        QueryCtl queryCtl = resolveQueryToExecute();\n        boolean compiled = queryCtl.isCompiled();\n        if (compiled) {\n            sql = queryCtl.getSql();\n        } else {\n            sql = queryCtl.compile(queryDefinition.getDatabasePolicy()).getSql();\n            queryCtl.decompile();\n        }\n        return sql;\n    }\n", "public static double[] GaToLLa(Geo[] ga,double[] lla){\n  if (lla == null) {\n    lla=new double[2 * ga.length];\n  }\n  for (int i=0; i < ga.length; i++) {\n    Geo g=ga[i];\n    lla[i * 2]=g.getLatitude();\n    lla[i * 2 + 1]=g.getLongitude();\n  }\n  return lla;\n}\n", "\tprivate void reset() {\n\n\t\tif (noGui == false) {\n\n\t\t\tif (ascmlTabPanel.locationComboBox.getSelectedItem() != null)\n\t\t\t\tdirName =\n\t\t\t\t\t(String) ascmlTabPanel\n\t\t\t\t\t\t.locationComboBox\n\t\t\t\t\t\t.getSelectedItem();\n\t\t\telse\n\t\t\t\tdirName = \".\";\n\t\t}\n\n\t\t// if the output dir doesn't exist, create it and all its parents\n\t\tFile outputDir = new File(dirName);\n\t\tif (!outputDir.exists()) {\n\t\t\toutputDir.mkdirs();\n\t\t}\n\n\t}\n", "public boolean deleteShipLoadName(String load){\n  if (!_shipLoadList.contains(load)) {\n    return false;\n  }\n  _shipLoadList.remove(load);\n  log.debug(\"track ({}) delete car load ({})\",getName(),load);\n  setDirtyAndFirePropertyChange(LOADS_CHANGED_PROPERTY,_shipLoadList.size() + 1,_shipLoadList.size());\n  return true;\n}\n", "    public Class getColumnClass(int c) {\n        \n        /* only cell objects in this TableModel */\n        return Cell.class;\n    }    \n", "public void schedule(int timeMillis,boolean repeat,Form bound){\n  lastEllapse=System.currentTimeMillis();\n  ms=timeMillis;\n  this.repeat=repeat;\n  this.bound=bound;\n  bound.registerAnimated(i);\n}\n", "public void begin ( ) { startMillis = System . currentTimeMillis ( ) ; endMillis = startMillis ; }", "private void initGridLabels() {\n        int dim = base.getDimension();\n        double[] offset = new double[dim];\n        for (int j = 0; j < dim; j++) {\n            if (j != index) {\n                offset[j] = -(base.getUpperBounds()[j] - base.getLowerBounds()[j]) / 100;\n            }\n        }\n\n        int decimal = 0;\n        String label;\n\n        gridLabels = new Label[labelsSlicing.length];\n\n        for (int i = 0; i < gridLabels.length; i++) {\n\n            double[] labelCoord = new double[base.getDimension()];\n            System.arraycopy(base.getCoordinateSpace()[index + 1], 0, labelCoord, 0, base.getDimension());\n            labelCoord[index] = labelsSlicing[i];\n\n            if (dim == 3) {\n                if (index == 0) {\n                    labelCoord[2] = base.getUpperBounds()[2] - 2 * offset[2];\n                } else if (index == 1) {\n                    labelCoord[0] = base.getUpperBounds()[0] - 2 * offset[0];\n                } else if (index == 2) {\n                    labelCoord[1] = base.getUpperBounds()[1] - 2 * offset[1];\n                }\n            }\n\n            decimal = base.getPrecisionDigits()[index];\n\n            if (gridLabelStrings != null) {\n                label = gridLabelStrings[i % gridLabelStrings.length];\n            } else {\n                String format = \"%.0f\";\n                if (decimal < 0) {\n                    format = String.format(\"%%.%df\", -decimal);\n                }\n                label = String.format(format, labelsSlicing[i]);\n            }\n\n            for (int j = 0; j < dim; j++) {\n                labelCoord[j] += offset[j];\n            }\n\n            if (base.getDimension() == 2) {\n                if (index == 0) {\n                    if (rotation == 0.0) {\n                        gridLabels[i] = new Label(label, 0.5, 1.0, labelCoord);\n                    } else {\n                        gridLabels[i] = new Label(label, 1.0, 0.5, rotation, labelCoord);\n                    }\n                } else {\n                    gridLabels[i] = new Label(label, 1.0, 0.5, labelCoord);\n                }\n            } else {\n                if (index == 0) {\n                    gridLabels[i] = new Label(label, 0.5, -0.5, labelCoord);\n                } else if (index == 1) {\n                    gridLabels[i] = new Label(label, 0.5, 1.0, labelCoord);\n                } else if (index == 2) {\n                    gridLabels[i] = new Label(label, 0.0, 0.5, labelCoord);\n                }\n            }\n\n            gridLabels[i].setFont(gridLabelFont);\n        }\n\n        gridLabelStrings = null;\n    }", "public ExtractorException ( String msg ) { this ( msg , null , null ) ; }", "public void read(byte[] buff,int off,int len){\n  System.arraycopy(data,pos,buff,off,len);\n  pos+=len;\n}\n", "public List breadthFirst ( boolean preorder ) { List answer = new NodeList ( ) ; if ( preorder ) answer . add ( this ) ; answer . addAll ( breadthFirstRest ( preorder ) ) ; if ( ! preorder ) answer . add ( this ) ; return answer ; }", "static void redistributeBuckets(ArrayList<NotificationInfo> highPriorityEvents,ArrayList<NotificationInfo> mediumPriorityEvents,ArrayList<NotificationInfo> lowPriorityEvents,int maxNotifications){\n  if (highPriorityEvents.size() > maxNotifications) {\n    lowPriorityEvents.addAll(0,mediumPriorityEvents);\n    List<NotificationInfo> itemsToMoveSublist=highPriorityEvents.subList(0,highPriorityEvents.size() - maxNotifications);\n    lowPriorityEvents.addAll(0,itemsToMoveSublist);\n    if (DEBUG) {\n      logEventIdsBumped(mediumPriorityEvents,itemsToMoveSublist);\n    }\n    mediumPriorityEvents.clear();\n    itemsToMoveSublist.clear();\n  }\n  if (mediumPriorityEvents.size() + highPriorityEvents.size() > maxNotifications) {\n    int spaceRemaining=maxNotifications - highPriorityEvents.size();\n    List<NotificationInfo> itemsToMoveSublist=mediumPriorityEvents.subList(spaceRemaining,mediumPriorityEvents.size());\n    lowPriorityEvents.addAll(0,itemsToMoveSublist);\n    if (DEBUG) {\n      logEventIdsBumped(itemsToMoveSublist,null);\n    }\n    itemsToMoveSublist.clear();\n  }\n}\n", "public void clear() {\n\t\twordList = new ArrayList<Word>();\n\t}", "@Override protected void buildSprites(Food entity,final Map<Object,Sprite> map){\n  final SpriteStore store=SpriteStore.get();\n  ZoneInfo info=ZoneInfo.get();\n  final Sprite tiles=store.getModifiedSprite(translate(entity.getType()),info.getZoneColor(),info.getColorMethod());\n  final int theight=tiles.getHeight();\n  int i=0;\n  for (int y=0; y < theight; y+=IGameScreen.SIZE_UNIT_PIXELS) {\n    map.put(Integer.valueOf(i++),store.getTile(tiles,0,y,IGameScreen.SIZE_UNIT_PIXELS,IGameScreen.SIZE_UNIT_PIXELS));\n  }\n}\n", "public void clear(){\n  Arrays.fill(count,0);\n}\n", "public ClassNode buildMapType ( ClassNode keyType , ClassNode valueType ) { return parameterizedType ( ClassHelper . MAP_TYPE , keyType , valueType ) ; }", "public synchronized void clear(){\n  Entry tab[]=table;\n  modCount++;\n  for (int index=tab.length; --index >= 0; )   tab[index]=null;\n  lruTracker.clear();\n  count=0;\n}\n", "public void setAllCorners(CornerTreatment cornerTreatment) {\n        topLeftCorner = cornerTreatment.clone();\n        topRightCorner = cornerTreatment.clone();\n        bottomRightCorner = cornerTreatment.clone();\n        bottomLeftCorner = cornerTreatment.clone();\n    }", "@Override public boolean isPunctuationTag(String str){\n  return str.equals(\"PU\");\n}", "public boolean columnExistsCaseSensitive(DatabaseMetaData dbMetaData,String tableName,String columnName) throws SQLException {\n  ResultSet rsTables=dbMetaData.getColumns(null,null,tableName,columnName);\n  try {\n    return rsTables.next();\n  }\n  finally {\n    closeJDBCResultSet(rsTables);\n  }\n}\n", "public TextField getCodLocal() {\n    if (CodLocal == null) {//GEN-END:|48-getter|0|48-preInit\n            // write pre-init user code here\n        CodLocal = new TextField(\"Cod Local:\", null, 5, TextField.ANY);//GEN-LINE:|48-getter|1|48-postInit\n            // write post-init user code here\n    }//GEN-BEGIN:|48-getter|2|\n    return CodLocal;\n}\n", "private void createCommandDescription(Description descAnnotation) {\n        setName(descAnnotation.name());\n        setSummary(descAnnotation.summary());\n        setMethods(descAnnotation.methods());\n        setURI(descAnnotation.uri());\n        setInputEntity(descAnnotation.inputEntity());\n        setOutputEntity(descAnnotation.outputEntity());\n        setPrivileged(descAnnotation.privileged());\n        setVisibility(descAnnotation.visible());\n    }", "protected void addError(final DefaultDataSet ds, final String errorDesc, final int lineNo, final int errorLevel) {\r\n        addError(ds, errorDesc, lineNo, errorLevel, null);\r\n    }", "protected void aliasGeneric( Object variable , String name ) {\n        if( variable.getClass() == Integer.class ) {\n            alias(((Integer)variable).intValue(),name);\n        } else if( variable.getClass() == Double.class ) {\n            alias(((Double)variable).doubleValue(),name);\n        } else if( variable.getClass() == DMatrixRMaj.class ) {\n            alias((DMatrixRMaj)variable,name);\n        } else if( variable.getClass() == FMatrixRMaj.class ) {\n            alias((FMatrixRMaj)variable,name);\n        } else if( variable.getClass() == DMatrixSparseCSC.class ) {\n            alias((DMatrixSparseCSC)variable,name);\n        } else if( variable.getClass() == SimpleMatrix.class ) {\n            alias((SimpleMatrix) variable, name);\n        } else if( variable instanceof DMatrixFixed ) {\n            DMatrixRMaj M = new DMatrixRMaj(1,1);\n            ConvertDMatrixStruct.convert((DMatrixFixed)variable,M);\n            alias(M,name);\n        } else if( variable instanceof FMatrixFixed ) {\n            FMatrixRMaj M = new FMatrixRMaj(1,1);\n            ConvertFMatrixStruct.convert((FMatrixFixed)variable,M);\n            alias(M,name);\n        } else {\n            throw new RuntimeException(\"Unknown value type of \"+\n                    (variable.getClass().getSimpleName())+\" for variable \"+name);\n        }\n    }", "\tpublic int numVertices_method(){\n\t\treturn vertices_method.size();\n\t}\n", "@Override\n  public final IEntityProcessor lazyGet(final Map<String, Object> pAddParam,\n    final String pBeanName) throws Exception {\n    IEntityProcessor proc = this.processorsMap.get(pBeanName);\n    if (proc == null) {\n      // locking:\n      synchronized (this.processorsMap) {\n        // make sure again whether it's null after locking:\n        proc = this.processorsMap.get(pBeanName);\n        if (proc == null) {\n          if (pBeanName.equals(PrcHasSeSellerSave.class.getSimpleName())) {\n            proc = lazyGetPrcHasSeSellerSave(pAddParam);\n          } else if (pBeanName.equals(PrcHasSeSellerDel\n            .class.getSimpleName())) {\n            proc = lazyGetPrcHasSeSellerDel(pAddParam);\n          } else if (pBeanName.equals(PrcSeGoodsSpecSave\n            .class.getSimpleName())) {\n            proc = lazyGetPrcSeGoodsSpecSave(pAddParam);\n          } else if (pBeanName.equals(PrCuOrSeSv\n            .class.getSimpleName())) {\n            proc = lazyGetPrCuOrSeSv(pAddParam);\n          } else if (pBeanName.equals(PrcSeServiceSpecSave\n            .class.getSimpleName())) {\n            proc = lazyGetPrcSeServiceSpecSave(pAddParam);\n          } else if (pBeanName.equals(PrcSeGdSpecEmbFlSave\n            .class.getSimpleName())) {\n            proc = lazyGetPrcSeGdSpecEmbFlSave(pAddParam);\n          } else if (pBeanName.equals(PrcSeGdSpecEmbFlDel\n            .class.getSimpleName())) {\n            proc = lazyGetPrcSeGdSpecEmbFlDel(pAddParam);\n          } else if (pBeanName.equals(PrcSeSrvSpecEmbFlSave\n            .class.getSimpleName())) {\n            proc = lazyGetPrcSeSrvSpecEmbFlSave(pAddParam);\n          } else if (pBeanName.equals(PrcSeSrvSpecEmbFlDel\n            .class.getSimpleName())) {\n            proc = lazyGetPrcSeSrvSpecEmbFlDel(pAddParam);\n          } else {\n            proc = this.fctBnEntitiesProcessors.lazyGet(pAddParam, pBeanName);\n          }\n        }\n      }\n    }\n    if (proc == null) {\n      throw new ExceptionWithCode(ExceptionWithCode.CONFIGURATION_MISTAKE,\n        \"There is no processor with name \" + pBeanName);\n    }\n    return proc;\n  }", "public GPathResult declareNamespace ( final Map newNamespaceMapping ) { this . namespaceMap . putAll ( newNamespaceMapping ) ; return this ; }", "private void tql2 (double[][] V) {\n\n   //  This is derived from the Algol procedures tql2, by\n   //  Bowdler, Martin, Reinsch, and Wilkinson, Handbook for\n   //  Auto. Comp., Vol.ii-Linear Algebra, and the corresponding\n   //  Fortran subroutine in EISPACK.\n   \n      for (int i = 1; i < n; i++) {\n         e[i-1] = e[i];\n      }\n      e[n-1] = 0.0;\n   \n      double f = 0.0;\n      double tst1 = 0.0;\n      double eps = Math.pow(2.0,-52.0);\n      for (int l = 0; l < n; l++) {\n\n         // Find small subdiagonal element\n   \n         tst1 = Math.max(tst1,Math.abs(d[l]) + Math.abs(e[l]));\n         int m = l;\n         while (m < n) {\n            if (Math.abs(e[m]) <= eps*tst1) {\n               break;\n            }\n            m++;\n         }\n   \n         // If m == l, d[l] is an eigenvalue,\n         // otherwise, iterate.\n   \n         if (m > l) {\n            int iter = 0;\n            do {\n               iter = iter + 1;  // (Could check iteration count here.)\n   \n               // Compute implicit shift\n   \n               double g = d[l];\n               double p = (d[l+1] - g) / (2.0 * e[l]);\n               double r = Math.hypot(p,1.0);\n               if (p < 0) {\n                  r = -r;\n               }\n               d[l] = e[l] / (p + r);\n               d[l+1] = e[l] * (p + r);\n               double dl1 = d[l+1];\n               double h = g - d[l];\n               for (int i = l+2; i < n; i++) {\n                  d[i] -= h;\n               }\n               f = f + h;\n   \n               // Implicit QL transformation.\n   \n               p = d[m];\n               double c = 1.0;\n               double c2 = c;\n               double c3 = c;\n               double el1 = e[l+1];\n               double s = 0.0;\n               double s2 = 0.0;\n               for (int i = m-1; i >= l; i--) {\n                  c3 = c2;\n                  c2 = c;\n                  s2 = s;\n                  g = c * e[i];\n                  h = c * p;\n                  r = Math.hypot(p,e[i]);\n                  e[i+1] = s * r;\n                  s = e[i] / r;\n                  c = p / r;\n                  p = c * d[i] - s * g;\n                  d[i+1] = h + s * (c * g + s * d[i]);\n   \n                  // Accumulate transformation.\n   \n                  for (int k = 0; k < n; k++) {\n                     h = V[k][i+1];\n                     V[k][i+1] = s * V[k][i] + c * h;\n                     V[k][i] = c * V[k][i] - s * h;\n                  }\n               }\n               p = -s * s2 * c3 * el1 * e[l] / dl1;\n               e[l] = s * p;\n               d[l] = c * p;\n   \n               // Check for convergence.\n   \n            } while (Math.abs(e[l]) > eps*tst1);\n         }\n         d[l] = d[l] + f;\n         e[l] = 0.0;\n      }\n     \n      // Sort eigenvalues and corresponding vectors.\n   \n      for (int i = 0; i < n-1; i++) {\n         int k = i;\n         double p = d[i];\n         for (int j = i+1; j < n; j++) {\n            if (d[j] < p) {\n               k = j;\n               p = d[j];\n            }\n         }\n         if (k != i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (int j = 0; j < n; j++) {\n               p = V[j][i];\n               V[j][i] = V[j][k];\n               V[j][k] = p;\n            }\n         }\n      }\n   }", "public boolean isEdgeSlideEnable ( ) { return mIsEdgeSlideEnable ; }", "public static void toDot(Writer w, FSA fsa, int node) throws IOException {\r\n    w.write(\"digraph Automaton {\\n\");\r\n    w.write(\"  rankdir = LR;\\n\");\r\n\r\n    final BitSet visited = new BitSet();\r\n\r\n    w.write(\"  stop [shape=doublecircle,label=\\\"\\\"];\\n\");\r\n    w.write(\"  initial [shape=plaintext,label=\\\"\\\"];\\n\");\r\n    w.write(\"  initial -> \" + node + \"\\n\\n\");\r\n\r\n    visitNode(w, 0, fsa, node, visited);\r\n    w.write(\"}\\n\");\r\n  }", "public void removeDateTimeChangeListener(DateTimeChangeListener listener){\n  dateTimeChangeListeners.remove(listener);\n}\n", "    public SERObject getSERObject() {\n        SERObject serObject = new SERObject(resultVector,\n                database.size(),\n                database.getInstances().numAttributes(),\n                getEpsilon(),\n                getMinPoints(),\n                writeOPTICSresults,\n                getDatabase_Type(),\n                getDatabase_distanceType(),\n                numberOfGeneratedClusters,\n                Utils.doubleToString(elapsedTime, 3, 3));\n        return serObject;\n    }\n", "@Override\n    public void actionExit() throws IOException, JspException, ServletException {\n\n        if (getAction() == ACTION_CANCEL) {\n            // save and exit was canceled\n            return;\n        }\n\n        // unlock resource, if no modified\n        actionClear(false);\n\n        // close the editor\n        actionClose();\n    }", "static int innerNewVecInsertPos ( int oldPos , int idx , Vector < Insertion > vec ) { if ( vec . size ( ) <= idx ) { return oldPos ; } else { return innerNewVecInsertPos ( newInsertPos ( oldPos , vec . elementAt ( idx ) ) , idx + NUM_ , vec ) ; } }", "public NumberIsTooLargeException ( Localizable specific , Number wrong , Number max , boolean boundIsAllowed ) { super ( specific , wrong , max ) ; this . max = max ; this . boundIsAllowed = boundIsAllowed ; }", "    private void addPressed() {\n        setPresentsDefaultValue(false);\n        doAdd();\n    }\n", "public synchronized void waitForResponse ( ) { try { if ( receivedResponses . size ( ) == NUM_ ) wait ( NUM_ ) ; } catch ( InterruptedException e ) { } }", "private void resetInternal() {\n    mTransitionState = TRANSITION_NONE;\n    Arrays.fill(mStartAlphas, mDefaultLayerAlpha);\n    mStartAlphas[0] = 255;\n    Arrays.fill(mAlphas, mDefaultLayerAlpha);\n    mAlphas[0] = 255;\n    Arrays.fill(mIsLayerOn, mDefaultLayerIsOn);\n    mIsLayerOn[0] = true;\n  }", "  public boolean check(Tuple t)  {\n    if (top == null) {\n      return false;\n    } else {\n      return top.check(t);\n    }\n  }\n", "public UnicodeSet clear(){\n  list[0]=HIGH;\n  len=1;\n  pat=null;\n  strings.clear();\n  return this;\n}\n", "public static DocumentFragment readXMLFragment(Reader reader) throws IOException, SAXException,\n\t\t\tParserConfigurationException {\n\t\treturn readXMLFragment(reader, false);\n\t}", "private void paintMenu(Graphics2D g,JComponent c,int width,int height,ButtonColors colors){\n  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);\n  g.setColor(colors.top);\n  g.drawLine(0,0,width - 2,0);\n  g.setColor(colors.leftOuter);\n  g.drawLine(0,0,0,height - 4);\n  g.setColor(colors.leftInner);\n  g.drawLine(1,1,1,height - 4);\n  g.drawLine(2,height - 3,2,height - 3);\n  Shape s=decodeInterior(width,height);\n  g.setColor(colors.interior);\n  g.fill(s);\n  s=decodeEdge(width,height);\n  g.setColor(colors.edge);\n  g.draw(s);\n  g.setColor(colors.edgeShade);\n  g.drawLine(2,height - 2,2,height - 2);\n  g.drawLine(1,height - 3,1,height - 3);\n  g.drawLine(0,height - 4,0,height - 4);\n  s=decodeShadow(width,height);\n  g.setColor(colors.shadow);\n  g.draw(s);\n  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);\n  s=decodeMarkInterior(width,height);\n  g.setColor(colors.markInterior);\n  g.fill(s);\n  s=decodeMarkBorder(width,height);\n  g.setColor(colors.markBorder);\n  g.draw(s);\n}\n", "public void writePageLayoutStyles(final XMLUtil util, final Appendable appendable)\n            throws IOException {\n        for (final PageLayoutStyle ps : this.pageLayoutStylesContainer.getValues()) {\n            assert ps.isHidden();\n            ps.appendXMLToAutomaticStyle(util, appendable);\n        }\n    }", "protected abstract DiscreteCalcAndArguments assignCalcObjectDiscrete ( ) throws Exception ;", "public static void setFieldValueWithPath(Object object, String path, Object value) throws IllegalStateException {\n\n        int lastDot = path.lastIndexOf('.');\n\n        if (lastDot > -1) {\n\n            String parentPath = path.substring(0, lastDot);\n            String field = path.substring(lastDot + 1);\n            Object parentObject = getFieldValueWithPath(object, parentPath);\n\n            if (parentObject == null) {\n                throw new IllegalStateException(String.format(\"Null value for %s while accessing %s on object %s\",\n                        parentPath,\n                        path,\n                        object));\n            }\n\n            setFieldValue(parentObject, field, value);\n\n        } else {\n            setFieldValue(object, path, value);\n        }\n\n    }", "private Long getUserIdArg(Object[] arguments) {\n        if (arguments.length <= USER_ID_INDEX) {\n            log.error(\"Illegal number of args: \" + arguments.length);\n        }\n        return (Long) arguments[USER_ID_INDEX];\n    }", "private void adaptButtonBarDividerMargin() {\n        if (buttonBarDivider != null) {\n            LinearLayout.LayoutParams layoutParams =\n                    (LinearLayout.LayoutParams) buttonBarDivider.getLayoutParams();\n            layoutParams.leftMargin = buttonBarDividerMargin;\n            layoutParams.rightMargin = buttonBarDividerMargin;\n            buttonBarDivider.setLayoutParams(layoutParams);\n        }\n    }", "public BaseField setupField(int iFieldSeq)\n    {\n        BaseField field = null;\n        //if (iFieldSeq == 0)\n        //{\n        //  field = new CounterField(this, ID, Constants.DEFAULT_FIELD_LENGTH, null, null);\n        //  field.setHidden(true);\n        //}\n        //if (iFieldSeq == 1)\n        //{\n        //  field = new RecordChangedField(this, LAST_CHANGED, Constants.DEFAULT_FIELD_LENGTH, null, null);\n        //  field.setHidden(true);\n        //}\n        //if (iFieldSeq == 2)\n        //{\n        //  field = new BooleanField(this, DELETED, Constants.DEFAULT_FIELD_LENGTH, null, new Boolean(false));\n        //  field.setHidden(true);\n        //}\n        //if (iFieldSeq == 3)\n        //  field = new StringField(this, NAME, 40, null, null);\n        //if (iFieldSeq == 4)\n        //  field = new FolderField(this, PARENT_FOLDER_ID, Constants.DEFAULT_FIELD_LENGTH, null, null);\n        //if (iFieldSeq == 5)\n        //  field = new ShortField(this, SEQUENCE, Constants.DEFAULT_FIELD_LENGTH, null, null);\n        //if (iFieldSeq == 6)\n        //  field = new MemoField(this, COMMENT, Constants.DEFAULT_FIELD_LENGTH, null, null);\n        //if (iFieldSeq == 7)\n        //  field = new StringField(this, CODE, 30, null, null);\n        if (iFieldSeq == 8)\n            field = new PropertiesField(this, PROPERTIES, Constants.DEFAULT_FIELD_LENGTH, null, null);\n        if (iFieldSeq == 9)\n            field = new ScriptCommandField(this, COMMAND, Constants.DEFAULT_FIELD_LENGTH, null, \"true\");\n        if (iFieldSeq == 10)\n        {\n            field = new StringField(this, SOURCE, 128, null, null);\n            field.setVirtual(true);\n        }\n        if (iFieldSeq == 11)\n        {\n            field = new StringField(this, DESTINATION, 128, null, null);\n            field.setVirtual(true);\n        }\n        if (field == null)\n            field = super.setupField(iFieldSeq);\n        return field;\n    }", "public static <S extends Serializable>S deserialize(byte[] bytes) throws IOException {\n  if (bytes == null) {\n    return null;\n  }\n  return deserialize(new ByteArrayInputStream(bytes));\n}\n", "@Nonnull\n    public static <T> Function<Pair<?, ? extends T>, ? extends T> snd() {\n        return new Function<Pair<?, ? extends T>, T>() {\n            @Nullable\n            @Override\n            public T apply(@Nullable final Pair<?, ? extends T> input) {\n                return (input == null) ? null : input.getSecond();\n            }\n        };\n    }", "public ArrayList<String> get(String key) {\n    Iterator<Pair<String, ArrayList<String>>> it = store.iterator();\n    while (it.hasNext()) {\n      Pair<String, ArrayList<String>> pair = it.next();\n      if (key.equals(pair.first)) {\n        return pair.second;\n      }\n    }\n    return null;\n  }", "public boolean isLoadedDataSuccessfullyRecently() {\n        final Integer timeSinceLastError = getSecondsSinceLastFailedLoad();\n        final Integer timeSinceLastSuccess = getSecondsSinceLastLoad();\n        if (timeSinceLastSuccess == null) {\n            return false; // never loaded data, so must be FAIL\n        }\n        if (timeSinceLastError == null) {\n            return true; // no errors ever, so must be OKAY\n        }\n        return lastLoadWasSuccessful;\n    }", "    public String getName() {\n        if (_name != null) {\n            return _name;\n        }\n        if (_id != null) {\n            return _id;\n        }\n        if (_filename != null) {\n            return new File(_filename).getName();\n        }\n        return \"unknown\";\n    }\n", "public void addMember(AbstractResourceUndoState member){\n  if (members == null) {\n    members=new AbstractResourceUndoState[]{member};\n  }\n else {\n    AbstractResourceUndoState[] expandedMembers=new AbstractResourceUndoState[members.length + 1];\n    System.arraycopy(members,0,expandedMembers,0,members.length);\n    expandedMembers[members.length]=member;\n    members=expandedMembers;\n  }\n}\n", "        private void setValue(Value val, long o) {\n            val.index = getPool().findLongEntry(o, true);\n            val.index2 = -1;\n            val.value = null;\n            val.type = null;\n        }\n", "public static Object invoke(Object object, String methodName, Object[] parameters) {\n        try {\n            Class[] classTypes = new Class[parameters.length];\n            for (int i = 0; i < classTypes.length; i++) {\n                classTypes[i] = parameters[i].getClass();\n            }\n            Method method = object.getClass().getMethod(methodName, classTypes);\n            return method.invoke(object, parameters);\n        } catch (Throwable t) {\n            return InvokerHelper.invokeMethod(object, methodName,  parameters);\n        }\n    }", "public static boolean isLetter ( Character self ) { return Character . isLetter ( self ) ; }", "private int search(int startLine, boolean backward) throws IOException {\n        search = search.toLowerCase();\n        try (Stream<String> stream = Files.lines(path)) {\n            if (backward) {\n                int idx = -1;\n                if (startLine > 0)\n                    idx = searchTo(startLine - 1, true);\n                if (idx < 0)\n                    idx = searchFrom(startLine, true);\n                return idx;\n            }\n            else {\n                int idx = searchFrom(startLine);\n                if (idx < 0) {\n                    // wrap search\n                    idx = searchTo(startLine - 1);\n                }\n                return idx;\n            }\n        }\n        catch (UncheckedIOException ex) {\n            throw ex.getCause();\n        }\n    }", "public static void copyMemory(Object srcBase,long srcOff,Object dstBase,long dstOff,long len){\n  UNSAFE.copyMemory(srcBase,srcOff,dstBase,dstOff,len);\n}\n", "public Collection<AsteriskQueueMember> getMembers()\n    {\n        List<AsteriskQueueMember> listOfMembers = new ArrayList<>(members.size());\n        synchronized (members)\n        {\n            listOfMembers.addAll(members.values());\n        }\n        return listOfMembers;\n    }", "public JSONObject putOpt ( String key , Object value ) throws JSONException { if ( key != null && value != null ) { this . put ( key , value ) ; } return this ; }", "\tprivate SourceManager createSourceManager() {\n\t\treturn new SourceManager(_schema, _types);\n\t}\n", "protected void tearDown(){\n  objArray=null;\n  objArray2=null;\n  hm=null;\n}\n", "static ZoneRules readExternal(DataInput in) throws IOException, ClassNotFoundException {\n        int stdSize = in.readInt();\n        long[] stdTrans = (stdSize == 0) ? EMPTY_LONG_ARRAY\n                                         : new long[stdSize];\n        for (int i = 0; i < stdSize; i++) {\n            stdTrans[i] = Ser.readEpochSec(in);\n        }\n        ZoneOffset[] stdOffsets = new ZoneOffset[stdSize + 1];\n        for (int i = 0; i < stdOffsets.length; i++) {\n            stdOffsets[i] = Ser.readOffset(in);\n        }\n        int savSize = in.readInt();\n        long[] savTrans = (savSize == 0) ? EMPTY_LONG_ARRAY\n                                         : new long[savSize];\n        for (int i = 0; i < savSize; i++) {\n            savTrans[i] = Ser.readEpochSec(in);\n        }\n        ZoneOffset[] savOffsets = new ZoneOffset[savSize + 1];\n        for (int i = 0; i < savOffsets.length; i++) {\n            savOffsets[i] = Ser.readOffset(in);\n        }\n        int ruleSize = in.readByte();\n        ZoneOffsetTransitionRule[] rules = (ruleSize == 0) ?\n            EMPTY_LASTRULES : new ZoneOffsetTransitionRule[ruleSize];\n        for (int i = 0; i < ruleSize; i++) {\n            rules[i] = ZoneOffsetTransitionRule.readExternal(in);\n        }\n        return new ZoneRules(stdTrans, stdOffsets, savTrans, savOffsets, rules);\n    }", "public static final Color fromNormalizedHSL(final double h, final double s, final double l)\n    {\n        // see http://www.w3.org/TR/css3-color/\n        //\n        // HOW TO RETURN hsl.to.rgb(h, s, l):\n        // SELECT:\n        // l<=0.5: PUT l*(s+1) IN m2\n        // ELSE: PUT l+s-l*s IN m2\n        // PUT l*2-m2 IN m1\n        // PUT hue.to.rgb(m1, m2, h+1/3) IN r\n        // PUT hue.to.rgb(m1, m2, h ) IN g\n        // PUT hue.to.rgb(m1, m2, h-1/3) IN b\n        // RETURN (r, g, b)\n\n        final double m2 = (l <= 0.5) ? (l * (s + 1)) : ((l + s) - (l * s));\n\n        final double m1 = (l * 2) - m2;\n\n        return new Color(fixRGB((int) Math.round(255 * hueToRGB(m1, m2, h + (1.0 / 3)))), fixRGB((int) Math.round(255 * hueToRGB(m1, m2, h))), fixRGB((int) Math.round(255 * hueToRGB(m1, m2, h - (1.0 / 3)))));\n    }", "public static String getHostStringWithoutNameLookup(InetSocketAddress inetSocketAddress) {\n        String newHost;\n        if (inetSocketAddress.isUnresolved()) {\n            newHost = inetSocketAddress.getHostName();\n        } else {\n            newHost = inetSocketAddress.getAddress().getHostAddress();\n        }\n        return newHost;\n    }", "protected final void sendMouseWheelEvent ( MouseWheelEvent e ) { try { N_SendMouseWheelEvent ( e ) ; } catch ( UnsatisfiedLinkError ule ) { ule . printStackTrace ( ) ; } }", "  protected final String TEXT_274 = NL + \"\\t@Override\";\n  protected final String TEXT_275 = NL + \"\\tpublic boolean isSaveAsAllowed()\" + NL + \"\\t{\" + NL + \"\\t\\treturn true;\" + NL + \"\\t}\" + NL + \"\" + NL + \"\\t/**\" + NL + \"\\t * This also changes the editor's input.\" + NL + \"\\t * <!-- begin-user-doc -->\" + NL + \"\\t * <!-- end-user-doc -->\" + NL + \"\\t * @generated\" + NL + \"\\t */\";\n", "public void removeListener(final ISPARQLUpdateListener l){\n  if (isReadOnly())   throw new UnsupportedOperationException();\n  if (l == null)   throw new IllegalArgumentException();\n  listeners.remove(l);\n}\n", "public List < QueryResult < T > > query ( List < Predicate < T > > queries ) throws OrmException , QueryParseException { try { return query ( null , queries ) ; } catch ( OrmRuntimeException e ) { throw new OrmException ( e . getMessage ( ) , e ) ; } catch ( OrmException e ) { if ( e . getCause ( ) != null ) { Throwables . throwIfInstanceOf ( e . getCause ( ) , QueryParseException . class ) ; } throw e ; } }", "public int indexOf (TreeItem item) {\n\tcheckWidget ();\n\tif (item == null) error (SWT.ERROR_NULL_ARGUMENT);\n\tif (item.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);\n\tif (item.parentItem != this) return -1;\n\treturn item.getIndex ();\n}\n", "public int writeGraphToFile(byte[] img,String file){\n  File to=new File(file);\n  return writeGraphToFile(img,to);\n}\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public static PublicKey readPublicKey(final byte[] publicKeyBytes, final String algorithm)\n\t\tthrows NoSuchAlgorithmException, InvalidKeySpecException, NoSuchProviderException\n\t{\n\t\tfinal X509EncodedKeySpec keySpec = new X509EncodedKeySpec(publicKeyBytes);\n\t\tfinal KeyFactory keyFactory = KeyFactory.getInstance(algorithm);\n\t\tfinal PublicKey publicKey = keyFactory.generatePublic(keySpec);\n\t\treturn publicKey;\n\t}", "public void removeEntry ( String entry ) { _classpathList . remove ( entry ) ; }", "public static ApiException wrapUnknownException ( Throwable cause ) { return new ApiException ( ResultStat . SERVER_INTERNAL_ERROR , cause ) ; }", "Constant evaluate ( Record rec ) ;", "public void addNotificationListener(NotificationListener listener,NotificationFilter filter,Object handback) throws IllegalArgumentException {\n  broadcaster.addNotificationListener(listener,filter,handback);\n}\n", "    public int sum(long number) {\n        int sum = 0;\n        do sum += number % base;\n        while ((number /= base) > 0);\n        return sum;\n    }\n", "   public boolean isAvailable(String userName) {\n      final BigDecimal available = new BigDecimal(-1);\n      LookupService lookupService = (LookupService)getSession().getCompApi(LookupService.COMP_NAME);; \n      Resolver resolver = lookupService.createResolver(true, false, true, false);\n      ResolveListener listener = new ResolveListener() {\n         public void resolved(ResolveEvent re) {\n            if (re.getResolved() instanceof STUser) {\n               STUser user = ((STUser) re.getResolved());\n               available.negate();\n            }\n         }\n         public void resolveConflict(ResolveEvent arg0) {}\n         public void resolveFailed(ResolveEvent arg0) {}\n      };\n      resolver.addResolveListener(listener);\n      resolver.resolve(userName);\n      resolver.removeResolveListener(listener);\n      return available.intValue() == 1;\n   }\n", "private void keyTyped(KeyEvent event) {\n        String text = event.getCharacter();\n        int n = text.length();\n\n        if(n == 0) {\n            return;\n        }\n\n        view.replaceSelection(text);\n    }", "protected boolean validateText(final String text,final JLabel label,final IValidator IValidator){\n  boolean valid=true;\n  Color color=m_labelColor;\n  if (!IValidator.isValid(text)) {\n    valid=false;\n    color=Color.RED;\n    label.setForeground(color);\n  }\n  if (label != null) {\n    label.setForeground(color);\n  }\n  return valid;\n}\n", "private boolean createFolder(String debugDirectory){\n  File dir=new File(debugDirectory);\n  if (dir.exists()) {\n    Date previousRecordDate;\n    try {\n      JsonValue infoJson=JsonValueBuilder.toJsonValue(IOUtils.getFileContent(debugDirectory + File.separator + RecordConstants.INFO_FILE_NAME));\n      previousRecordDate=recordReport.getDateFromInfoReport(infoJson);\n    }\n catch (    IOException|ParseException|JsonValueException e) {\n      debug.error(\"Can't extract starting date from previous record. We will use the current date instead\",e);\n      previousRecordDate=newDate();\n    }\n    SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT_UID);\n    dir.renameTo(new File(debugDirectory + \"_\" + dateFormat.format(previousRecordDate)));\n  }\n  return dir.mkdirs();\n}\n", "public static VictorSP victorSP ( int pwmPort ) { return pwmRegistrar . fetch ( pwmPort , VictorSP . class , null ) ; }", "public static Object valueOf(Class<?> type,String value){\n  try {\n    if (type.equals(String.class))     return value;\n    Method m=class2Value.get(type);\n    if (m != null)     return m.invoke(null,value);\n    if (type.equals(Character.TYPE) || type.equals(Character.class))     return new Character(value.charAt(0));\n    Constructor<?> c=type.getConstructor(String.class);\n    return c.newInstance(value);\n  }\n catch (  NoSuchMethodException e) {\n  }\ncatch (  IllegalAccessException e) {\n  }\ncatch (  InstantiationException e) {\n  }\ncatch (  InvocationTargetException e) {\n    if (e.getTargetException() instanceof Error)     throw (Error)(e.getTargetException());\n  }\n  return null;\n}\n", "    public void setFaultMsg(String faultMsgName, String partNames) {\n        faultMsg = new WebServiceMsg();\n        faultMsg.setName(faultMsgName);\n        faultMsg.setPartNames(partNames);\n    }    \n", "public static ArrayList<String> convertStringArrayToArrayList(String[] stringArray){\n  if (stringArray != null && stringArray.length > 0) {\n    return new ArrayList<>(Arrays.asList(stringArray));\n  }\n else {\n    return null;\n  }\n}\n", "\tpublic boolean anyRunning() {\n\t\tTreeNode tree = (TreeNode)viewer.getInput();\n\t\treturn tree.getChildCount() > 0;\n\t}\n", "private static synchronized String makeDateString(Date date){\n  return sdfDefault.format(date);\n}\n", "public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { request . getSession ( ) . setAttribute ( STR_ , STR_ ) ; response . sendRedirect ( STR_ ) ; return ; }", "public static void tagSelectedNodes ( final JFrame parent , final JTree tagsTree , final ZyGraph graph ) { try { tagSelectedNodes ( parent , graph , getSelectedTag ( tagsTree ) ) ; } catch ( final MaybeNullException exception ) { } }", "private void parseDiagnostics() {\n        // If we found any meta, then process it with SnakeYAML\n        if (state.getDiagnosticBuffer().length() > 0) {\n\n            if (state.getLastParsedElement() == null) {\n                throw new ParserException(\"Found diagnostic information without a previous TAP element.\");\n            }\n\n            try {\n                @SuppressWarnings(\"unchecked\")\n                Map<String, Object> metaIterable = (Map<String, Object>) new Yaml()\n                        .load(state.getDiagnosticBuffer().toString());\n                state.getLastParsedElement().setDiagnostic(metaIterable);\n            } catch (Exception ex) {\n                throw new ParserException(String.format(\"Error parsing YAML [%s]: %s\",\n                        state.getDiagnosticBuffer().toString(), ex.getMessage()), ex);\n            }\n            this.state.getDiagnosticBuffer().setLength(0);\n        }\n    }", "public static Beans<AuthToken> load(W q,int s,int n){\n  return Helper.load(q,s,n,AuthToken.class);\n}\n", "public int getInt32() throws IOException\n    {\n        if (_isMotorolaByteOrder) {\n            // Motorola - MSB first (big endian)\n            return (getByte() << 24 & 0xFF000000) |\n                   (getByte() << 16 & 0xFF0000) |\n                   (getByte() << 8  & 0xFF00) |\n                   (getByte()       & 0xFF);\n        } else {\n            // Intel ordering - LSB first (little endian)\n            return (getByte()       & 0xFF) |\n                   (getByte() << 8  & 0xFF00) |\n                   (getByte() << 16 & 0xFF0000) |\n                   (getByte() << 24 & 0xFF000000);\n        }\n    }", "public String tableName ( ) { return tblName ; }", "private void ensureInitialized(){\n  if (!mInitialized) {\n    lock.lock();\n    try {\n      if (!mInitialized) {\n        mInternalPath=Environment.getDataDirectory();\n        mExternalPath=Environment.getExternalStorageDirectory();\n        updateStats();\n        mInitialized=true;\n      }\n    }\n  finally {\n      lock.unlock();\n    }\n  }\n}\n", "@Override public synchronized void removeAttribute(int index){\n  Attribute a=attributes.get(index);\n  if (a == null) {\n    return;\n  }\n  attributes.set(index,null);\n  unusedColumnList.add(index);\n}\n", "public void onKeyPress (KeyPressEvent event)\n    {\n        if (event.getCharCode() == KeyCodes.KEY_ESCAPE) {\n            _onEscape.onClick(null);\n        }\n    }", "public static double computeNewPriority_sigmoidFractionOfFriends(double priority,int sharedFriends,int myFriends){\n  double trustMultiplier=sigmoid(sharedFriends / (double)myFriends,0.3,13.0);\n  trustMultiplier=trustMultiplier + getGaussian(MEAN,VAR);\n  trustMultiplier=Math.min(trustMultiplier,1);\n  trustMultiplier=Math.max(trustMultiplier,0);\n  if (sharedFriends == 0) {\n    trustMultiplier=EPSILON_TRUST;\n  }\n  return priority * trustMultiplier;\n}\n", "public boolean isExtendedIndexing ( ) { return _isExtendedIndexing ; }", "  public void editCommand() {\n    try {\n      int res = getTable().getSelectedIndex();\n      if (res == -1) {\n        showErrorDialog( getDesc(\"error\"), getDesc(\"no_row_selected\"), true);\n      } else {\n        new WorkingSubProjectView( getSession(), this, loadSelectedItem()).runWindow( null );\n      }\n    } catch (Throwable t) {\n      showExceptionDialog( getDesc(\"error\"), getDesc(\"error\"), t, false);\n    }\n  }\n", "@Override\n\tpublic void configure(SceneStructureProjective structure ,\n\t\t\t\t\t\t  SceneObservations observations )\n\t{\n\t\tthis.structure = structure;\n\t\tthis.observations = observations;\n\n\t\tnumObservations = observations.getObservationCount();\n\t\tnumParameters = structure.getParameterCount();\n\t}", "void resumeTriggersAll ( ) throws Exception ;", "   private TreePath buildPathTo(ProjectEvent evt) {\n      List path = evt.getPath();\n      path.set(0, project);\n      return toTreePath(path);\n   }\n", "public static Object wrap(\n        Object value, Class<?> type )\n    {\n        if ( type == Void.TYPE )\n            return Primitive.VOID;\n\n        if ( value == null )\n            return Primitive.NULL;\n\n        if(value instanceof Boolean)\n            return ((Boolean)value).booleanValue() ? Primitive.TRUE :\n                Primitive.FALSE;\n\n        if ( Types.isPrimitive(type) && isWrapperType( value.getClass() ) )\n            return new Primitive( value );\n\n        return value;\n    }", "public static boolean isPrimitiveWrapperArray(Class<?> clazz){\n  Assert.notNull(clazz,\"Class must not be null\");\n  return (clazz.isArray() && isPrimitiveWrapper(clazz.getComponentType()));\n}\n", "private void dagDFS(Lop root,boolean[] marked){\n  if (!IDMap.containsKey(root.getID()))   return;\n  int mapID=IDMap.get(root.getID());\n  if (marked[mapID])   return;\n  marked[mapID]=true;\n  for (  Lop lop : root.getOutputs()) {\n    dagDFS(lop,marked);\n  }\n}\n", "    private String getFirstInstance(String pattern, String line) {\n        String result = null;\n        Pattern p = Pattern.compile(pattern);\n        Matcher matcher = p.matcher(line);\n        if (matcher.find()) {\n            result = matcher.group();\n        }\n        \n        return result;\n    }\n", "\tpublic int size(){\n\t\treturn this.mValues.size();\n\t}\n", "    public String getTextElementName() {\n\tif (reservedTextElement==null) { \n\t    return NiteMetaConstants.defaultReservedText; \n\t}\n\treturn reservedTextElement;\n    }\n", "  public Iterator iterator() {\n    return new CacheableEntrySetIterator(map, head, reaper);\n  }\n", "@Override\r\n    public NodeSet<OWLClass> getObjectPropertyDomains(\r\n            OWLObjectPropertyExpression pe, boolean direct)\r\n            throws InconsistentOntologyException, FreshEntitiesException,\r\n            ReasonerInterruptedException, TimeOutException {\r\n        throw new ReasonerInternalException(\r\n                \"getObjectPropertyDomains not implemented\");\r\n    }", "public static AccessibilityNodeInfoCompat focusSearch ( AccessibilityNodeInfoCompat node , int direction ) { final AccessibilityNodeInfoRef ref = AccessibilityNodeInfoRef . unOwned ( node ) ; if ( ref == null ) return null ; switch ( direction ) { case SEARCH_FORWARD : { if ( ! ref . nextInOrder ( ) ) { return null ; } return ref . release ( ) ; } case SEARCH_BACKWARD : { if ( ! ref . previousInOrder ( ) ) { return null ; } return ref . release ( ) ; } } return null ; }", "public Object invokeSetter(final Object instance, final Object value)\n            throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n        final Class<?> valueClass = value.getClass();\n        final Method method = getInvokableMethodForClass(valueClass);\n        if (method == null) {\n            throw new IllegalArgumentException(\n                    \"class \" + instance.getClass().getName()\n                            + \" does not have an annotated setter for values of type \" + valueClass.getName());\n        }\n\n        return method.invoke(instance, value);\n    }", "public <R>FutureW<R> flatMapCf(final Function<? super T,? extends CompletionStage<? extends R>> mapper){\n  return FutureW.<R>of(future.<R>thenCompose(null));\n}\n", "private static byte[] unwrapEncoded(GTSWrapper wrapper){\n  if (!wrapper.isCompressed()) {\n    return wrapper.getEncoded();\n  }\n  ByteArrayOutputStream baos=new ByteArrayOutputStream();\n  byte[] bytes=wrapper.getEncoded();\n  int pass=wrapper.getCompressionPasses();\n  while (pass > 0) {\n    ByteArrayInputStream in=new ByteArrayInputStream(bytes);\n    baos.reset();\n    try {\n      GZIPInputStream gzis=new GZIPInputStream(in);\n      byte[] buf=new byte[1024];\n      while (true) {\n        int len=gzis.read(buf);\n        if (len < 0) {\n          break;\n        }\n        baos.write(buf,0,len);\n      }\n      gzis.close();\n    }\n catch (    IOException ioe) {\n      throw new RuntimeException(\"Invalid compressed content.\");\n    }\n    bytes=baos.toByteArray();\n    pass--;\n  }\n  return bytes;\n}\n", "    public void writeIndentation(final OutputStream result) throws IOException {\n        result.write(LIST_LEVEL_FIRST_INDENT);\n        result.write(intToByteArray(firstIndent));\n        result.write(RtfParagraphStyle.INDENT_LEFT);\n        result.write(in", "public static LoggingException createLoggingException ( final ErrorKeys errorId , final Exception e ) { return new LoggingException ( errorId . toString ( ) , e ) ; }", "public Future < Job > save ( ) { Objects . requireNonNull ( this . type , STR_ ) ; if ( this . id > NUM_ ) return update ( ) ; Future < Job > future = Future . future ( ) ; client . incr ( RedisHelper . getKey ( STR_ ) , null ) ; return future . compose ( null ) ; }", "private void validateBean(Object bean) throws PropertyException\n    {\n        if (getValidatorFactory() != null) {\n            Validator validator = getValidatorFactory().getValidator();\n            Set<ConstraintViolation<Object>> constraintViolations = validator.validate(bean);\n            if (!constraintViolations.isEmpty()) {\n                throw new PropertyException(\n                    \"Failed to validate bean: [\" + constraintViolations.iterator().next().getMessage() + \"]\");\n            }\n        }\n    }", "public static byte[] fromHexString(String text){\n  text=text.trim();\n  if (text.length() % 2 != 0)   text=\"0\" + text;\n  int resLen=text.length() / 2;\n  int loNibble, hiNibble;\n  byte[] res=new byte[resLen];\n  for (int i=0; i < resLen; i++) {\n    int j=i << 1;\n    hiNibble=charToNibble(text.charAt(j));\n    loNibble=charToNibble(text.charAt(j + 1));\n    if (loNibble == -1 || hiNibble == -1)     return null;\n    res[i]=(byte)(hiNibble << 4 | loNibble);\n  }\n  return res;\n}\n", "public Observable<List<VirtualMachineImageResourceInner>> listPublishersAsync(String location) {\n        return listPublishersWithServiceResponseAsync(location).map(new Func1<ServiceResponse<List<VirtualMachineImageResourceInner>>, List<VirtualMachineImageResourceInner>>() {\n            @Override\n            public List<VirtualMachineImageResourceInner> call(ServiceResponse<List<VirtualMachineImageResourceInner>> response) {\n                return response.body();\n            }\n        });\n    }", "private URL extractActualUrl(URL jarUrl) throws MalformedURLException {\n  String urlFile=jarUrl.getFile();\n  int separatorIndex=urlFile.indexOf(\"!/\");\n  if (separatorIndex != -1) {\n    String jarFile=urlFile.substring(0,separatorIndex);\n    try {\n      return new URL(jarFile);\n    }\n catch (    MalformedURLException var5) {\n      if (!jarFile.startsWith(\"/\")) {\n        jarFile=\"/\" + jarFile;\n      }\n      return new URL(\"file:\" + jarFile);\n    }\n  }\n else {\n    return jarUrl;\n  }\n}\n", "public static final void clear(final double[][] v1){\n  for (  double[] row : v1) {\n    Arrays.fill(row,0.0);\n  }\n}\n", "public Query adding( Column... columns ) {\n        List<Column> newColumns = null;\n        if (this.columns != null) {\n            newColumns = new ArrayList<Column>(this.columns);\n            for (Column column : columns) {\n                newColumns.add(column);\n            }\n        } else {\n            newColumns = Arrays.asList(columns);\n        }\n        return new Query(source, constraint, orderings(), newColumns, getLimits(), distinct);\n    }", "public void throttle(){\n  if (currentCommandStart == 0) {\n    currentCommandStart=System.currentTimeMillis();\n  }\n  if (throttle == 0) {\n    return;\n  }\n  long time=System.currentTimeMillis();\n  if (lastThrottle + Constants.THROTTLE_DELAY > time) {\n    return;\n  }\n  lastThrottle=time + throttle;\n  try {\n    Thread.sleep(throttle);\n  }\n catch (  Exception e) {\n  }\n}\n", "void visit ( SubExpression expression ) ;", "   final public void startSimulation() {\n      startAnimation();\n   }\n", "public synchronized void initializeGroupNodeComment ( final INaviGroupNode groupNode , final List < IComment > comments ) { Preconditions . checkNotNull ( groupNode , STR_ ) ; initializeComment ( new GroupNodeCommentingStrategy ( groupNode ) , comments ) ", "    public void sendEmptyChunk() throws MsrpException {\n        if (msrpSession == null) {\n        \tthrow new MsrpException(\"MSRP session is null\");\n        }\n\n\t\tmsrpSession.sendEmptyChunk();\n    }\n", "public static InternalAggregations reduce(List<InternalAggregations> aggregationsList,ReduceContext context){\n  if (aggregationsList.isEmpty()) {\n    return null;\n  }\n  Map<String,List<InternalAggregation>> aggByName=new HashMap<>();\n  for (  InternalAggregations aggregations : aggregationsList) {\n    for (    InternalAggregation aggregation : aggregations.aggregations) {\n      List<InternalAggregation> aggs=aggByName.get(aggregation.getName());\n      if (aggs == null) {\n        aggs=new ArrayList<>(aggregationsList.size());\n        aggByName.put(aggregation.getName(),aggs);\n      }\n      aggs.add(aggregation);\n    }\n  }\n  List<InternalAggregation> reducedAggregations=new ArrayList<>();\n  for (  Map.Entry<String,List<InternalAggregation>> entry : aggByName.entrySet()) {\n    List<InternalAggregation> aggregations=entry.getValue();\n    InternalAggregation first=aggregations.get(0);\n    reducedAggregations.add(first.reduce(aggregations,context));\n  }\n  return new InternalAggregations(reducedAggregations);\n}\n", "    public void sendBreak() {\n\t   this.sendBreak( 1000 );\n    }\n", "  public boolean askGenerateAnyway(String text) {\n    final boolean[] result = new boolean[] { false };\n    new DrJavaScrollableDialog(this,\n                               \"Additional Files Conflict\",\n                               \"The files you want to add create conflicts. As a result,\\n\"+\n                               \"the generated file may not work.\",\n                               text,\n                               INFO_DIALOG_WIDTH,\n                               INFO_DIALOG_HEIGHT,\n                               true) {\n      protected void _addButtons() {\n        _buttonPanel.add(new JButton(new AbstractAction(\"Generate anyway\") {\n          public void actionPerformed(ActionEvent e) {\n            result[0] = true;\n            _dialog.dispose();\n          }\n        }));\n        _buttonPanel.add(new JButton(new AbstractAction(\"Go back\") {\n          public void actionPerformed(ActionEvent e) {\n            result[0] = false;\n            _dialog.dispose();\n          }\n        }));\n      }\n    }.show();\n    return result[0];\n  }\n", "public JSVariant[] getDominatedVariants() {\n    if (dominated == null) {\n      List dom = new ArrayList();\n      getDominatedVariants(dom);\n      dominated = (JSVariant[])dom.toArray(new JSVariant[0]);\n    }\n    return dominated;\n  }", "    public void check() {\n        if (type == null) {\n            throw new BuildException(\n                \"type attribute must be set for service element\",\n                getLocation());\n        }\n        if (type.length() == 0) {\n            throw new BuildException(\n                \"Invalid empty type classname\", getLocation());\n        }\n        if (providerList.size() == 0) {\n            throw new BuildException(\n                \"provider attribute or nested provider element must be set!\",\n                getLocation());\n        }\n    }\n", "    public ReferencedEnvelope getBounds() {\n        FeatureIterator r = features();\n\n        try {\n            Envelope newBBox = new Envelope();\n            Envelope internal;\n            Feature feature;\n\n            while (r.hasNext()) {\n                feature = r.next();\n\n                final Geometry geom = feature.getDefaultGeometry();\n\n                if (geom != null) {\n                    internal = geom.getEnvelopeInternal();\n                    newBBox.expandToInclude(internal);\n                }\n            }\n\n            return ReferencedEnvelope.reference(newBBox);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Exception occurred while computing reprojected bounds\", e);\n        } finally {\n            r.close();\n        }\n    }\n", "\tpublic TACInstruction instruction(ASTNode astNode) {\n\t\tif(astNode == null)\n\t\t\tthrow new IllegalArgumentException(\"No node given.\");\n\n\t\tif(instr.containsKey(astNode))\n\t\t\treturn instr.get(astNode);\n\t\tTACInstruction result = createInstruction(astNode);\n\t\tinstr.put(astNode, result);\n\t\treturn result;\n\t}\n", "protected AnyBreakpointSetReply ( final int packetId , final int errorCode , final List < Pair < RelocatedAddress , Integer > > addresses ) { super ( packetId , errorCode ) ; this . addresses = Preconditions . checkNotNull ( addresses , STR_ ) ; }", "private void createOEXDirectory(String wuid) throws IOException {\n    File oexDirectory = new File(directory, wuid);\n    if (!oexDirectory.exists() && !oexDirectory.mkdirs()) {\n      throw new WebDriverException(\"Unable to create directory path: \" + direc", "public ClassDoc[] enums() {\n        ListBuffer<ClassDocImpl> ret = new ListBuffer<ClassDocImpl>();\n        for (ClassDocImpl c : getClasses(true)) {\n            if (c.isEnum()) {\n                ret.append(c);\n            }\n        }\n        return ret.toArray(new ClassDocImpl[ret.length()]);\n    }", "\tpublic IPropertySheetPage getPropertySheetPage() {\n\t\tif (propertySheetPage == null) {\n\t\t\tpropertySheetPage =\n\t\t\t\tnew ExtendedPropertySheetPage(editingDomain) {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void setSelectionToViewer(List<?> selection) {\n\t\t\t\t\t\tSocialNetworkAnalysisEditor.this.setSelectionToViewer(selection);\n\t\t\t\t\t\tSocialNetworkAnalysisEditor.this.setFocus();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void setActionBars(IActionBars actionBars) {\n\t\t\t\t\t\tsuper.setActionBars(actionBars);\n\t\t\t\t\t\tgetActionBarContributor().shareGlobalActions(this, actionBars);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tpropertySheetPage.setPropertySourceProvider(new AdapterFactoryContentProvider(adapterFactory));\n\t\t}\n\n\t\treturn propertySheetPage;\n\t}\n", "@Override\n\tpublic int doEndTag() throws JspException {\n\n\t\ttry {\n\n\t\t\tBinaryResourcesHandler rsHandler = null;\n\t\t\tif ((rsHandler = (BinaryResourcesHandler) pageContext.getServletContext()\n\t\t\t\t\t.getAttribute(JawrConstant.BINARY_CONTEXT_ATTRIBUTE)) == null)\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"Binary ResourceBundlesHandler not present in servlet context. Initialization of Jawr either failed or never occurred.\");\n\n\t\t\tJawrConfig jawrConfig = rsHandler.getConfig();\n\t\t\tthis.renderer = RendererFactory.getImgRenderer(jawrConfig, isPlainImage());\n\t\t\tthis.renderer.renderImage(getImgSrcToRender(), getAttributeMap(), pageContext.getOut());\n\t\t} catch (IOException e) {\n\t\t\tthrow new JspException(e);\n\t\t} finally {\n\t\t\t// Reset the Thread local for the Jawr context\n\t\t\tThreadLocalJawrContext.reset();\n\t\t}\n\n\t\treturn (EVAL_PAGE);\n\t}", "public synchronized void abort()\n    {\n        if (done)\n            return;\n\n        done = true;\n        for (SSTableWriter writer : sstables)\n            writer.abort();\n        sstables.clear();\n    }", "    public Iterator getPreferencesIterator() {\n        this.preferencesIterator = preferences.iterator();\n        return this.preferencesIterator;\n    }\n", "public static TimeOfDay hourAndMinuteAndSecondFromDate ( Date dateTime , TimeZone tz ) { if ( dateTime == null ) return null ; Calendar cal = Calendar . getInstance ( ) ; cal . setTime ( dateTime ) ; if ( tz != null ) cal . setTimeZone ( tz ) ; return new", "\tpublic void setDir(File dir) throws IOException {\n\t\tif (dir.isDirectory())\n\t\t\tsetDir(dir.getAbsolutePath());\n\t\telse\n\t\t\tthrow new IOException(\"'\" + dir.getAbsolutePath()\n\t\t\t\t\t+ \"' is not a directory.\");\n\t}\n", "\tpublic void toggleHelpingGrid() {\n\t\tToggleGridAction action = new ToggleGridAction();\n\t\tpushInQueue(action);\n\t}\n", "public void onClickRemote ( NotificationRemote remote , NotificationEntry entry ) { if ( DBG ) Log . v ( TAG , STR_ + entry . ID ) ; }", "    public void show(Object constraint) {\n        SComponent visibleComponent = (SComponent) tab.get(constraint);\n        if (visibleComponent != null) {\n            for (Iterator en = tab.values().iterator(); en.hasNext();) {\n                SComponent c = (SComponent) en.next();\n                c.setVisible(false);\n            }\n            visibleComponent.setVisible(true);\n        }\n        container.setRecursivelyVisible(container.isRecursivelyVisible());\n    }\n", "public int hashCode ( K o ) ;", "private void interpretUndef ( final ReilInstruction instruction ) { registers . remove ( instruction . getThirdOperand ( ) . getValue ( ) ) ; }", "private String buildMessage ( Locale locale , String separator ) { final StringBuilder sb = new StringBuilder ( ) ; int count = NUM_ ; final int len = msgPatterns . size ( ) ; for ( int i = NUM_ ; i < len ; i ++ ) { final Localizable pat = msgPatterns . g", "private static String normalizeFPNumber(String value,String minMantissa,String maxMantissa,String minExponent,String maxExponent){\n  value=collapseWhiteSpace(value);\n  if (value.contains(\" \")) {\n    throwIAE(\"No space allowed in floating point lexical value (\" + value + \")\");\n  }\n  if (value.equals(POSITIVE_INFINITY) || value.equals(NEGATIVE_INFINITY) || value.equals(NaN)) {\n    return value;\n  }\n  int eIdx=value.indexOf('E');\n  if (eIdx == -1) {\n    eIdx=value.indexOf('e');\n  }\n  String mantissa, exponent;\n  if (eIdx == -1) {\n    mantissa=normalizeDecimal(value);\n    exponent=\"0\";\n  }\n else {\n    mantissa=normalizeDecimal(value.substring(0,eIdx));\n    exponent=normalizeInteger(value.substring(eIdx + 1));\n  }\n  int shift=0;\n  int dotIdx=mantissa.indexOf('.');\n  int digitCount=dotIdx;\n  if (mantissa.charAt(0) == '-') {\n    digitCount--;\n  }\n  if (digitCount > 1) {\n    StringBuilder sb=new StringBuilder(mantissa.length());\n    int firstDigitIdx=0;\n    if (mantissa.charAt(0) == '-') {\n      sb.append('-');\n      firstDigitIdx=1;\n    }\n    sb.append(mantissa.charAt(firstDigitIdx));\n    sb.append('.');\n    sb.append(mantissa.substring(firstDigitIdx + 1,dotIdx));\n    sb.append(mantissa.substring(dotIdx + 1));\n    mantissa=sb.toString();\n    int nonZeroIdx=mantissa.length() - 1;\n    while (nonZeroIdx >= 3 && mantissa.charAt(nonZeroIdx) == '0') {\n      nonZeroIdx--;\n    }\n    if (nonZeroIdx < 3 && mantissa.charAt(0) == '-') {\n      nonZeroIdx++;\n    }\n    if (nonZeroIdx < mantissa.length() - 1) {\n      mantissa=mantissa.substring(0,nonZeroIdx + 1);\n    }\n    shift=1 - digitCount;\n  }\n else   if (mantissa.startsWith(\"0.\") || mantissa.startsWith(\"-0.\")) {\n    int nonZeroIdx=2;\n    boolean negative=false;\n    if (mantissa.charAt(0) == '-') {\n      nonZeroIdx++;\n      negative=true;\n    }\n    while (nonZeroIdx < mantissa.length() && mantissa.charAt(nonZeroIdx) == '0') {\n      nonZeroIdx++;\n    }\n    if (nonZeroIdx < mantissa.length()) {\n      StringBuilder sb=new StringBuilder(mantissa.length());\n      if (negative) {\n        sb.append('-');\n      }\n      sb.append(mantissa.charAt(nonZeroIdx));\n      sb.append('.');\n      if (nonZeroIdx == mantissa.length() - 1) {\n        sb.append('0');\n      }\n else {\n        sb.append(mantissa.substring(nonZeroIdx + 1));\n      }\n      mantissa=sb.toString();\n      shift=negative ? nonZeroIdx - 2 : nonZeroIdx - 1;\n    }\n  }\n  if (shift != 0) {\n    try {\n      int exp=Integer.parseInt(exponent);\n      exponent=String.valueOf(exp - shift);\n    }\n catch (    NumberFormatException e) {\n      throw new RuntimeException(\"NumberFormatException: \" + e.getMessage());\n    }\n  }\n  if (minMantissa != null) {\n    if (compareCanonicalDecimals(mantissa,minMantissa) < 0) {\n      throwIAE(\"Mantissa smaller than minimum value (\" + minMantissa + \")\");\n    }\n  }\n  if (maxMantissa != null) {\n    if (compareCanonicalDecimals(mantissa,maxMantissa) > 0) {\n      throwIAE(\"Mantissa larger than maximum value (\" + maxMantissa + \")\");\n    }\n  }\n  if (minExponent != null) {\n    if (compareCanonicalIntegers(exponent,minExponent) < 0) {\n      throwIAE(\"Exponent smaller than minimum value (\" + minExponent + \")\");\n    }\n  }\n  if (maxExponent != null) {\n    if (compareCanonicalIntegers(exponent,maxExponent) > 0) {\n      throwIAE(\"Exponent larger than maximum value (\" + maxExponent + \")\");\n    }\n  }\n  return mantissa + \"E\" + exponent;\n}\n", "public int hashCode(){\n  return (Float.floatToIntBits(extraAlpha) * 31 + rule);\n}\n", "public static void assertRequiredDescriptionTriples(final Model model)\n            throws ConstraintViolationException {\n        assertContainsRequiredProperties(model, REQUIRED_PROPERTIES);\n        assertContainsRequiredTypes(model, BINARY_TYPES);\n    }", "void run ( T context ) ;", "    public boolean open() {\n        InputDialog dialog = new InputDialog(_shell,\n                \"New \" + _componentName,\n                \"Enter name\",\n                _intitialValue,\n                new InputValidator());\n        \n        int code = dialog.open();\n        \n        if(code == Window.OK) {\n            _name = dialog.getValue();\n            return true;\n        }\n        \n        else {\n            _name = null;\n            return false;\n        }\n    }\n", "\tprotected void addEnabletimeslotsPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Calendarformat_enabletimeslots_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_Calendarformat_enabletimeslots_feature\", \"_UI_Calendarformat_type\"),\n\t\t\t\t DxlPackage.Literals.CALENDARFORMAT__ENABLETIMESLOTS,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public TXStateProxy masqueradeAs(TransactionMessage msg) throws InterruptedException {\n  if (msg.getTXUniqId() == NOTX || !msg.canParticipateInTransaction()) {\n    return null;\n  }\n  TXId key=new TXId(msg.getMemberToMasqueradeAs(),msg.getTXUniqId());\n  TXStateProxy val=getOrSetHostedTXState(key,msg);\n  if (val != null) {\n    boolean success=getLock(val,key);\n    while (!success) {\n      val=getOrSetHostedTXState(key,msg);\n      if (val != null) {\n        success=getLock(val,key);\n      }\n else {\n        break;\n      }\n    }\n  }\n  setTXState(val);\n  return val;\n}\n", "protected final static int rhumbStep(Point2D pt1,Point2D pt2){\n  int step=(int)DrawUtil.distance(pt1.getX(),pt1.getY(),pt2.getX(),pt2.getY());\n  if (step > 8192) {\n    step=512;\n  }\n else {\n    step>>=3;\n  }\n  return (step == 0) ? 1 : step;\n}\n", "   public Result call(Request request) throws Throwable {\n      SuccessfulResult result = new SuccessfulResult();\n      String[] name = _users.getUser(request.getAccountNumber());\n      if (name == null) {\n         return new AccountNotFoundResult();\n      }\n      result.setFirstName(name[0]);\n      result.setLastName(name[1]);\n      return result;\n   }\n", "public static Number sqrt(Number a){\n  if ((a.doubleValue() < 0.0) && Settings.isProtectedFunctions()) {\n    return Math.sqrt(Math.abs(a.doubleValue()));\n  }\n else {\n    return Math.sqrt(a.doubleValue());\n  }\n}\n", "@Override public int hashCode(){\n  return Arrays.hashCode(ipaddress);\n}\n", "public static <D>void iterateDfs(D rootData,NodeDataAdapter<D> dataAdapter,Visitor<D> callback){\n  LinkedList<D> nodes=new LinkedList<>();\n  nodes.add(rootData);\n  while (!nodes.isEmpty()) {\n    D parentNodeData=nodes.pop();\n    boolean willVisitChildren=false;\n    List<D> children=dataAdapter.getChildren(parentNodeData);\n    for (int i=0, n=children.size(); i < n; i++) {\n      D child=children.get(i);\n      if (callback.shouldVisit(child)) {\n        nodes.add(child);\n        willVisitChildren=true;\n      }\n    }\n    callback.visit(parentNodeData,willVisitChildren);\n  }\n}\n", "        public void addActionListener (ActionListener l) {\n                eventListenerList.add(ActionListener.class, l);\n        }\n", "static int readInt ( final byte [ ] b , final int index ) { return ( ( b [ index ] & NUM_ ) << NUM_ ) | ( ( b [ index + NUM_ ] & NUM_ ) << NUM_ ) | ( ( b [ index + NUM_ ] & NUM_ ) << NUM_ ) | ( b [ index + NUM_ ] & NUM_ ) ; }", "public static void generateImmutableCollectionIfPossible(ModelClass<?> entity, Builder methodBuilder, String name,\n\t\t\tTypeName typeName) {\n\t\tif (TypeUtility.isList(typeName)\n\t\t\t\t&& ((ParameterizedTypeName) typeName).rawType.equals(ClassName.get(List.class))) {\n\t\t\tmethodBuilder.addCode(\"($L==null ? null : $T.unmodifiableList($L))\", name, Collections.class, name);\n\t\t} else if (TypeUtility.isSet(typeName)\n\t\t\t\t&& ((ParameterizedTypeName) typeName).rawType.equals(ClassName.get(SortedSet.class))) {\n\t\t\tmethodBuilder.addCode(\"($L==null ? null : $T.unmodifiableSortedSet($L))\", name, Collections.class, name);\n\t\t} else if (TypeUtility.isSet(typeName)\n\t\t\t\t&& ((ParameterizedTypeName) typeName).rawType.equals(ClassName.get(Set.class))) {\n\t\t\tmethodBuilder.addCode(\"($L==null ? null : $T.unmodifiableSet($L))\", name, Collections.class, name);\n\t\t} else if (TypeUtility.isMap(typeName)\n\t\t\t\t&& ((ParameterizedTypeName) typeName).rawType.equals(ClassName.get(SortedMap.class))) {\n\t\t\tmethodBuilder.addCode(\"($L==null ? null : $T.unmodifiableSortedMap($L))\", name, Collections.class, name);\n\t\t} else if (TypeUtility.isMap(typeName)\n\t\t\t\t&& ((ParameterizedTypeName) typeName).rawType.equals(ClassName.get(Map.class))) {\n\t\t\tmethodBuilder.addCode(\"($L==null ? null : $T.unmodifiableMap($L))\", name, Collections.class, name);\n\t\t} else {\n\t\t\tmethodBuilder.addCode(name);\n\t\t}\n\t}", "public static Time convertTime(Value value,Calendar calendar){\n  if (value == ValueNull.INSTANCE) {\n    return null;\n  }\n  ValueTime t=(ValueTime)value.convertTo(Value.TIME);\n  Calendar cal=(Calendar)calendar.clone();\n  cal.clear();\n  cal.setLenient(true);\n  long nanos=t.getNanos();\n  long millis=nanos / 1000000;\n  nanos-=millis * 1000000;\n  long s=millis / 1000;\n  millis-=s * 1000;\n  long m=s / 60;\n  s-=m * 60;\n  long h=m / 60;\n  m-=h * 60;\n  setCalendarFields(cal,1970,1,1,(int)h,(int)m,(int)s,(int)millis);\n  long ms=cal.getTimeInMillis();\n  return new Time(ms);\n}\n", "    public void addDataPoint(DataPoint... dpIDs) {\n        for (DataPoint dpID : dpIDs) {\n            if (dpID != null) dataPoints.add(dpID);\n        }\n    }\n", "public static String toJSON(Object value, ObjectMapper mapper) {\r\n\t\ttry {\r\n\t\t\treturn mapper.writeValueAsString(value);\r\n\t\t} catch (IOException ex) {\r\n\t\t\tthrow new FacebookException(ex);\r\n\t\t}\r\n\t}", "protected AbstractYieldTermStructure ( final int settlementDays , final Calendar cal , final DayCounter dc ) { super ( settlementDays , cal , dc ) ; }", "     public void startPrefixMapping (String prefix, String uri) {\n        namespaces.put(prefix, uri);\n        System.out.println(prefix + \":\" + uri);\n     }\n", "public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ) ; }", "    public void setOracle8Compatibility(boolean pOracle8Compatibility) {\n        isOracle8Compatibility = pOracle8Compatibility;\n    }\n", "public ServiceFuture<List<RemoteLoginInformationInner>> listRemoteLoginInformationNextAsync(final String nextPageLink, final ServiceFuture<List<RemoteLoginInformationInner>> serviceFuture, final ListOperationCallback<RemoteLoginInformationInner> serviceCallback) {\n        return AzureServiceFuture.fromPageResponse(\n            listRemoteLoginInformationNextSinglePageAsync(nextPageLink),\n            new Func1<String, Observable<ServiceResponse<Page<RemoteLoginInformationInner>>>>() {\n                @Override\n                public Observable<ServiceResponse<Page<RemoteLoginInformationInner>>> call(String nextPageLink) {\n                    return listRemoteLoginInformationNextSinglePageAsync(nextPageLink);\n                }\n            },\n            serviceCallback);\n    }", "private void encodeScript(final FacesContext context, final SlideOut slideOut) throws IOException {\n        final WidgetBuilder wb = getWidgetBuilder(context);\n        final String clientId = slideOut.getClientId(context);\n        final String handleId = getHandleId(context, slideOut);\n        wb.init(\"ExtSlideOut\", slideOut.resolveWidgetVar(), clientId);\n        wb.attr(\"tabLocation\", slideOut.getLocation());\n        wb.attr(\"tabHandle\", handleId);\n        wb.attr(\"speed\", slideOut.getAnimateSpeed());\n        wb.attr(\"action\", StringUtils.lowerCase(slideOut.getShowOn()));\n        wb.attr(\"clickScreenToClose\", slideOut.isClickScreenToClose());\n        wb.attr(\"onLoadSlideOut\", slideOut.isAutoOpen());\n        wb.attr(\"positioning\", slideOut.isSticky() ? \"absolute\" : \"fixed\");\n        wb.attr(\"offset\", slideOut.getOffset());\n        wb.attr(\"offsetReverse\", slideOut.isOffsetReverse());\n        wb.attr(\"handleOffsetReverse\", slideOut.isHandleOffsetReverse());\n        wb.attr(\"bounceTimes\", slideOut.getBounceTimes());\n        wb.attr(\"bounceDistance\", slideOut.getBounceDistance());\n        wb.nativeAttr(\"clickScreenToCloseFilters\", \"['.ui-slideouttab-panel', 'button', 'a']\");\n\n        if (slideOut.getHandleOffset() != null) {\n            wb.attr(\"handleOffset\", slideOut.getHandleOffset());\n        }\n\n        if (slideOut.getOnopen() != null) {\n            wb.callback(\"onOpen\", \"function()\", slideOut.getOnopen());\n        }\n        if (slideOut.getOnclose() != null) {\n            wb.callback(\"onClose\", \"function()\", slideOut.getOnclose());\n        }\n        if (slideOut.getOnslide() != null) {\n            wb.callback(\"onSlide\", \"function()\", slideOut.getOnslide());\n        }\n        if (slideOut.getOnbeforeopen() != null) {\n            wb.callback(\"onBeforeOpen\", \"function()\", slideOut.getOnbeforeopen());\n        }\n        if (slideOut.getOnbeforeclose() != null) {\n            wb.callback(\"onBeforeClose\", \"function()\", slideOut.getOnbeforeclose());\n        }\n        if (slideOut.getOnbeforeslide() != null) {\n            wb.callback(\"onBeforeSlide\", \"function()\", slideOut.getOnbeforeslide());\n        }\n\n        encodeClientBehaviors(context, slideOut);\n\n        wb.finish();\n    }", "static int zuneLoopOfDeath ( int days ) { int year = NUM_ ; while ( days > NUM_ ) { if ( year % NUM_ == NUM_ && ( year % NUM_ != NUM_ || year % NUM_ == NUM_ ) ) { if ( days > NUM_ ) { days -= NUM_ ; year += NUM_ ; } } else { days -= NUM_ ; year += NUM_ ; ", "public static Number previous ( Number self ) { return NumberNumberMinus . minus ( self , ONE ) ; }", "    public void deleteAllSuperClusters(List nodesToBeDeleted) {\n\tIterator it = superClusters.iterator();\n\twhile (it.hasNext()) {\n\t    SCluster sc = (SCluster) it.next();\n\t    sc.deleteAllClusters(nodesToBeDeleted);\n\t    it.remove();\n\t}\n    }\n", "  private void addDiskInfo(Element root, String elementName, String text) {\n    Element element;\n\n    element = getXmlUtils().createElement(root, elementName);\n    XmlUtils.addText(element, text);\n  }\n", "public Object parseAsPropertyType(String stringToParse, String propertyPath) {\n\n        Class propertyType = getPropertyType(propertyPath);\n        if (propertyType == null) {\n            return null;\n        }\n        NumberTransformer parser = transformers.get(propertyType);\n        return parser == null ? stringToParse : parser.parseObject(stringToParse);\n    }", "\tpublic T getContentsAsObject() {\n\t\tif(this.objectContents != null) {return this.objectContents;}\n\t\treturn convertBytesToObject(this.byteContents);\n\t}\n", "protected void read(ObjectInputStream s) throws IOException, ClassNotFoundException {\n        val header = BaseDataBuffer.readHeader(s);\n        data = Nd4j.createBuffer(header.getRight(), length, false);\n\n        data.read(s, header.getLeft(), header.getMiddle(), header.getRight());\n    }", "public double[] getLinearRegressionParameters(RandomVariable dependents) {\n\n\t\tRandomVariable[] basisFunctions = basisFunctionsEstimator.getBasisFunctions();\n\n\t\tsynchronized (solverLock) {\n\t\t\tif(solver == null) {\n\t\t\t\t// Build XTX - the symmetric matrix consisting of the scalar products of the basis functions.\n\t\t\t\tdouble[][] XTX = new double[basisFunctions.length][basisFunctions.length];\n\t\t\t\tfor(int i=0; i<basisFunctions.length; i++) {\n\t\t\t\t\tfor(int j=i; j<basisFunctions.length; j++) {\n\t\t\t\t\t\tXTX[i][j] = basisFunctions[i].mult(basisFunctions[j]).getAverage();\t// Scalar product\n\t\t\t\t\t\tXTX[j][i] = XTX[i][j];\t\t\t\t\t\t\t\t\t\t\t\t// Symmetric matrix\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsolver = new SingularValueDecomposition(new Array2DRowRealMatrix(XTX, false)).getSolver();\n\t\t\t}\n\t\t}\n\n\t\t// Build XTy - the projection of the dependents random variable on the basis functions.\n\t\tdouble[] XTy = new double[basisFunctions.length];\n\t\tfor(int i=0; i<basisFunctions.length; i++) {\n\t\t\tXTy[i] = dependents.mult(basisFunctions[i]).getAverage();\t\t\t\t// Scalar product\n\t\t}\n\n\t\t// Solve X^T X x = X^T y - which gives us the regression coefficients x = linearRegressionParameters\n\t\tdouble[] linearRegressionParameters = solver.solve(new ArrayRealVector(XTy)).toArray();\n\n\t\treturn linearRegressionParameters;\n\t}", "public static Capabilities forInstances(Instances data) throws Exception {\n  return forInstances(data,false);\n}\n", "public int getNumErrors() {\n        int numErrors = 0;\n        if (getBuildData().getErrorDatabase() != null && getBuildData().getErrorDatabase().getErrors(\n                getBuildData().getBuildLocale()) != null) {\n            for (final TopicErrorData errorData : getBuildData().getErrorDatabase().getErrors(getBuildData().getBuildLocale())) {\n                numErrors += errorData.getItemsOfType(ErrorLevel.ERROR).size();\n            }\n        }\n        return numErrors;\n    }", "public static String parseQueryFields(UriInfo uriInfo) {\n        List<String> selectables = uriInfo.getQueryParameters()\n                .get(EntityFieldsScopeResolver.FIELDS_PARAM_NAME);\n        StringBuilder builder = new StringBuilder();\n        if (selectables != null) {\n            for (int i = 0; i < selectables.size(); i++) {\n                String s = selectables.get(i);\n                if (StringUtils.isNotBlank(s)) {\n                    if (!s.startsWith(\"(\")) {\n                        builder.append(\"(\");\n                    }\n                    builder.append(s);\n                    if (!s.endsWith(\")\")) {\n                        builder.append(\")\");\n                    }\n                    if (i < selectables.size() - 1) {\n                        builder.append(\":\");\n                    }\n                }\n            }\n        }\n        return builder.length() == 0 ? null : builder.toString();\n    }", "public static boolean looksLikeBluetoothAddress(String s){\n  return Pattern.matches(\"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\",s);\n}\n", "protected void finishExecution(){\n  sendNow(getId(),CloudSimTags.END_OF_SIMULATION);\n}\n", "    public String getUseBeanCode(String instr){\n        StringBuffer sb = new StringBuffer(\"JSPBeanHandler beanHandler = new JSPBeanHandler();\");        \n        sb.append(rn);\n        \n        int ididx       = instr.indexOf(\"id=\\\"\");\n        ididx += 4;\n        int endididx    = instr.indexOf(\"\\\"\", ididx);\n        int classidx    = instr.indexOf(\"class=\\\"\");\n        classidx += 7;\n        int endclassidx = instr.indexOf(\"\\\"\", classidx);\n        \n        String id = instr.substring(ididx, endididx);\n        String classname = instr.substring(classidx, endclassidx);\n        // class id = new class();\n        \n        // must have bean constructor\n        sb.append(classname + \" \" + id + \" = new \" + classname + \"();\");\n        return sb.toString();\n    }\n", "    private void loadProperties(Properties props) {\n        props.put(\"user\", bizDriverInfo.getJndiLoginName()); //$NON-NLS-1$\n        props.put(\"password\", bizDriverInfo.getJndiPassword()); //$NON-NLS-1$\n        props.put(\"java.naming.factory.initial\", bizDriverInfo.getFactoryName()); //$NON-NLS-1$\n        props.put(\"java.naming.provider.url\", bizDriverInfo.getHostName()); //$NON-NLS-1$\n\t}\n", "\tsynchronized public void setTimeDilationForAnimations(double dilationFactor) {\n\t\tif (dilationFactor < 0.2)\n\t\t\tdilationFactor = 0.2;\n\t\telse if (dilationFactor > 100)\n\t\t\tdilationFactor = 100;\n\t\ttimeDilationForAnimations = dilationFactor;\n\t\tif (animation != null)\n\t\t\tanimation.setTimeDilation(dilationFactor);\n\t}\n", "public int size(){\n  return this.values;\n}\n", "     public Drawable getShadow(){\n\n         if(wolfShadowSprite!=null)\n             return (Drawable) wolfShadowSprite;\n\n      // Shadow Creation\n         String path = null;\n\n         path = \"players-0/shadows-3/wolf-walking-6\";\n\n         wolfShadowSprite = new ShadowSprite( wolfSprite.getDataSupplier(),\n                                                  new ImageIdentifier( path ),\n                                                  ImageLibRef.SHADOW_PRIORITY, 4, 4 );\n         return wolfShadowSprite;\n     }\n", "@Override\n    public List<SubsetMove> getAllMoves(SubsetSolution solution) {\n        // create empty list to store generated moves\n        List<SubsetMove> moves = new ArrayList<>();\n        // get set of candidate IDs for removal (fixed IDs are discarded)\n        Set<Integer> delCandidates = getRemoveCandidates(solution);\n        // compute number of deletions\n        int curNumDel = numDeletions(delCandidates, solution);\n        if(curNumDel == 0){\n            // impossible: return empty set\n            return moves;\n        }\n        // create all moves that remove curNumDel items\n        Set<Integer> del;\n        SubsetIterator<Integer> itDel = new SubsetIterator<>(delCandidates, curNumDel);\n        while(itDel.hasNext()){\n            del = itDel.next();\n            // create and add move\n            moves.add(new GeneralSubsetMove(Collections.emptySet(), del));\n        }\n        // return all moves\n        return moves;\n    }", "    public void eventOccured(RenewalEvent ev) {\n    \t\n        FadaLeaseID leaseId = (FadaLeaseID) ev.getSource();\n        int status = ev.getStatus();\n        FadaServiceID fadaId = (FadaServiceID) this.sid2lid.getKey(leaseId);\n        switch (status) {\n        case RenewalEvent.NOT_RENEWED:\n        \tlogger.info (\"FADA - event occurred - NOT_RENEWED.\");\n            this.sid2lid.remove(fadaId);\n            if (fadaId != null) {\n                this.reregister(fadaId);\n            }\n            break;\n        case RenewalEvent.GET_CANDIDATES:\n        \tlogger.debug (\"FADA - event occurred - Get_Candidates.\");\n            // nop \n            break;\n        default:\n        \tlogger.debug (\"FADA - event occurred - Unknown,\");\n            // nop \n            break;\n        }\n    }\n", "public static String soundex(String s) {\n\n        if (s == null) {\n            return s;\n        }\n\n        s = s.toUpperCase(Locale.ENGLISH);\n\n        int    len       = s.length();\n        char[] b         = new char[] {\n            '0', '0', '0', '0'\n        };\n        char   lastdigit = '0';\n\n        for (int i = 0, j = 0; i < len && j < 4; i++) {\n            char c = s.charAt(i);\n            char newdigit;\n\n            if (\"AEIOUY\".indexOf(c) != -1) {\n                newdigit = '7';\n            } else if (c == 'H' || c == 'W') {\n                newdigit = '8';\n            } else if (\"BFPV\".indexOf(c) != -1) {\n                newdigit = '1';\n            } else if (\"CGJKQSXZ\".indexOf(c) != -1) {\n                newdigit = '2';\n            } else if (c == 'D' || c == 'T') {\n                newdigit = '3';\n            } else if (c == 'L') {\n                newdigit = '4';\n            } else if (c == 'M' || c == 'N') {\n                newdigit = '5';\n            } else if (c == 'R') {\n                newdigit = '6';\n            } else {\n                continue;\n            }\n\n            if (j == 0) {\n                b[j++]    = c;\n                lastdigit = newdigit;\n            } else if (newdigit <= '6') {\n                if (newdigit != lastdigit) {\n                    b[j++]    = newdigit;\n                    lastdigit = newdigit;\n                }\n            } else if (newdigit == '7') {\n                lastdigit = newdigit;\n            }\n        }\n\n        return new String(b, 0, 4);\n    }", "\tpublic long learnParametersWithDigamma(Object[] observations) {\n\n\t\tint[][] binCounts = new int[partition.length][observations.length];\n//\t\tSystem.out.println(\"got mem: \" + (System.currentTimeMillis() - start));\n\n\t\tint[] observationLengths = new int[observations.length];\n//\t\tSystem.out.println(\"got lengths: \" + (System.currentTimeMillis() - start));\n\n\t\tfor (int i=0; i < observations.length; i++) {\n\t\t\tint[] observation = (int[]) observations[i];\n\t\t\tfor (int bin=0; bin < partition.length; bin++) {\n\t\t\t\tbinCounts[bin][i] = observation[bin];\n\t\t\t\tobservationLengths[i] += observation[bin];\n\t\t\t}\n\t\t}\n//\t\tSystem.out.println(\"init: \" + (System.currentTimeMillis() - start));\n\n\t\treturn learnParametersWithDigamma(binCounts, observationLengths);\n\t}\n", "public boolean hasHadResponseDelivered ( ) { return mResponseDelivered ; }", "public boolean targetEquals ( String compareTargetId ) { String normalizedCompId = mapping . getLinkType ( ) . normalizeTargetId ( compareTargetId ) ; String normalizedTargetId = mapping . getLinkType ( ) . normalizeTargetId ( targetId ) ; if ( normalizedTargetId != null ) { return normalizedTargetId . equals ( normalizedCompId ) ; } else { return normalizedTargetId == normalizedCompId ; } }", "public static Test suite ( ) { return ( new TestSuite ( SelectManyCollectionITCase . class ) ) ; }", "@SuppressWarnings(\"unlikely-arg-type\")\n\tprotected final void setPrimitiveValidity(BusPrimitiveInvalidity invalidityReason) {\n\t\tif ((invalidityReason == null && this.invalidityReason != null)\n\t\t\t\t|| (invalidityReason != null\n\t\t\t\t&& !invalidityReason.equals(BusPrimitiveInvalidityType.VALIDITY_NOT_CHECKED)\n\t\t\t\t&& !invalidityReason.equals(this.invalidityReason))) {\n\t\t\tfinal BusPrimitiveInvalidity old = this.invalidityReason;\n\t\t\tthis.invalidityReason = invalidityReason;\n\t\t\tfireValidityChanged(old, this.invalidityReason);\n\t\t}\n\t}", "private static CharHandler parseInternationalCodes(String[] codeStrings){\n  if (codeStrings.length != 2) {\n    throw new IllegalStateException(\"Unexpected code strings \" + Arrays.asList(codeStrings));\n  }\n  return new InternationalCharHandler(codesToBytes(codeStrings[0],true),codesToBytes(codeStrings[1],true));\n}\n", "public static void serialize ( Element element , Writer w ) { Source source = new DOMSource ( element ) ; serialize ( source , w ) ; }", "  public void incrCounter(Enum<?> key, long amount) {\n    findCounter(key).increment(amount);\n  }\n", "public boolean equals ( Object o ) { return ReferentUuids . compare ( this , o ) ; }", "    protected void startDragActivity(final PInputEvent event) {\n        dragActivity = new PActivity(-1, PUtil.DEFAULT_ACTIVITY_STEP_RATE);\n        dragActivity.setDelegate(new PActivity.PActivityDelegate() {\n            public void activityStarted(final PActivity activity) {\n                dragActivityFirstStep(dragEvent);\n            }\n\n            public void activityStepped(final PActivity activity) {\n                dragActivityStep(dragEvent);\n            }\n\n            public void activityFinished(final PActivity activity) {\n                dragActivityFinalStep(dragEvent);\n            }\n        });\n\n        event.getCamera().getRoot().addActivity(dragActivity);\n    }\n", "public char[] readPassword(){\nsynchronized (CONSOLE_LOCK) {\n    int previousState=setEcho(false,0);\n    try {\n      String password=readLine();\n      writer.println();\n      return (password == null) ? null : password.toCharArray();\n    }\n  finally {\n      setEcho(true,previousState);\n    }\n  }\n}\n", "   private TranscriptFacade getTranscriptFacade() throws Exception {\n\n      if (transcriptFacade == null) {\n         transcriptFacade = new XmlTranscriptFacade();\n         ((XmlTranscriptFacade)transcriptFacade).setGenomeVersionSpace(getGenomeVersionSpace());\n      } // Must create one.\n\n      return transcriptFacade;\n\n   } // End method: getTranscriptFacade\n", "    protected void writeStartParagraph(Element elem) throws IOException {\n\tAttributeSet attr = elem.getAttributes();\n\tObject resolveAttr = attr.getAttribute(StyleConstants.ResolveAttribute);\n\tif (resolveAttr instanceof StyleContext.NamedStyle) {\n\t    writeStartTag(\"<p class=\" + mapStyleName(((StyleContext.NamedStyle)resolveAttr).getName()) + \">\");\n\t} else {\n\t    writeStartTag(\"<p>\");\n\t}\n    }\n", "private void determineLocale_MD_Y_Indices(){\n  String formattedDate=formatMonthDayYear(mCalendar);\n  String monthAndDay=formatMonthAndDay(mCalendar);\n  String year=extractYearFromFormattedDate(formattedDate,monthAndDay);\n  if (formattedDate.indexOf(monthAndDay) < formattedDate.indexOf(year)) {\n    mLocaleMonthDayIndex=0;\n    mLocaleYearIndex=1;\n  }\n else {\n    mLocaleYearIndex=0;\n    mLocaleMonthDayIndex=1;\n  }\n}\n", "void topicPending ( Publisher publisher , String topic , int outstanding , int concurrency ) ;", "public static void putInt(ByteBuffer buffer,int val,ByteOrder order){\n  int offset=buffer.position();\n  putInt(buffer,val,offset,order);\n  buffer.position(offset + 4);\n}\n", "  public String errorLevelToString() {\n    return Level.ERROR.toString();\n  }\n", "public static Duration getInstance(String dur, NumberFormat format, Locale locale) throws MPXJException\n   {\n      try\n      {\n         int lastIndex = dur.length() - 1;\n         int index = lastIndex;\n         double duration;\n         TimeUnit units;\n\n         while ((index > 0) && (Character.isDigit(dur.charAt(index)) == false))\n         {\n            --index;\n         }\n\n         //\n         // If we have no units suffix, assume days to allow for MPX3\n         //\n         if (index == lastIndex)\n         {\n            duration = format.parse(dur).doubleValue();\n            units = TimeUnit.DAYS;\n         }\n         else\n         {\n            ++index;\n            duration = format.parse(dur.substring(0, index)).doubleValue();\n            while ((index < lastIndex) && (Character.isWhitespace(dur.charAt(index))))\n            {\n               ++index;\n            }\n            units = TimeUnitUtility.getInstance(dur.substring(index), locale);\n         }\n\n         return (Duration.getInstance(duration, units));\n      }\n\n      catch (ParseException ex)\n      {\n         throw new MPXJException(\"Failed to parse duration\", ex);\n      }\n   }", "public Instant minusMillis(long millisToSubtract) {\n        if (millisToSubtract == Long.MIN_VALUE) {\n            return plusMillis(Long.MAX_VALUE).plusMillis(1);\n        }\n        return plusMillis(-millisToSubtract);\n    }", "public void setAgentNetworkInfoList(java.util.Collection<AgentNetworkInfo> agentNetworkInfoList) {\n        if (agentNetworkInfoList == null) {\n            this.agentNetworkInfoList = null;\n            return;\n        }\n\n        this.agentNetworkInfoList = new java.util.ArrayList<AgentNetworkInfo>(agentNetworkInfoList);\n    }", "\tprotected void notifyMessageToSend(AbstractDimseMessage message, boolean isFinished) {\n\t\tif ( this.serviceWorkerListener != null ) {\n\t\t\tthis.serviceWorkerListener.handleMessageToSend(message, isFinished);\n\t\t}\n\t}\n", "public void writePropertyObject(CmsRequestContext context, CmsResource resource, CmsProperty property)\n    throws CmsException, CmsSecurityException {\n\n        CmsDbContext dbc = m_dbContextFactory.getDbContext(context);\n        try {\n            checkOfflineProject(dbc);\n            checkPermissions(dbc, resource, CmsPermissionSet.ACCESS_WRITE, true, CmsResourceFilter.IGNORE_EXPIRATION);\n            m_driverManager.writePropertyObject(dbc, resource, property);\n        } catch (Exception e) {\n            dbc.report(\n                null,\n                Messages.get().container(Messages.ERR_WRITE_PROP_2, property.getName(), context.getSitePath(resource)),\n                e);\n        } finally {\n            dbc.clear();\n        }\n    }", "public PrintWriter append(CharSequence csq) {\n        if (csq == null)\n            write(\"null\");\n        else\n            write(csq.toString());\n        return this;\n    }", "public void addEmail(String newEmail) {\n        Assert.hasText(newEmail, \"Attempted to add null or empty email string to user.\");\n\n        if (emails == null) {\n            emails = new ArrayList<>(1);\n        }\n        for (Email email : emails) {\n            if (email.value.equals(newEmail)) {\n                throw new IllegalArgumentException(\"Already contains email \" + newEmail);\n            }\n        }\n\n        Email e = new Email();\n        e.setValue(newEmail);\n        emails.add(e);\n    }", "void taggedNode ( INaviView view , INaviViewNode node , CTag tag ) ;", "public static String[][] read(final InputStream is,final String delim) throws IOException {\n  String[][] result=null;\n  List<String[]> list=new ArrayList<String[]>();\n  String inputLine;\n  BufferedReader reader=new BufferedReader(new InputStreamReader(is,\"UTF-8\"));\n  while ((inputLine=reader.readLine()) != null) {\n    try {\n      String[] item;\n      if (delim == null) {\n        item=parseLine(inputLine,DELIM_CHAR);\n      }\n else {\n        item=parseLine(inputLine,delim);\n      }\n      if (item != null) {\n        list.add(item);\n      }\n    }\n catch (    Exception e) {\n    }\n  }\n  reader.close();\n  if (list.size() > 0) {\n    result=new String[list.size()][];\n    list.toArray(result);\n  }\n  return result;\n}\n", "boolean addAvfRestriction(OwlClass r){\n  return avfRestrictions.add(r);\n}\n", "private void createChildren ( ) { add ( new CTaggedGraphNodesContainerNode ( getGraph ( ) , m_model , m_tag ) ) ; for ( final ITreeNode < CTag > child : m_tag . getChildren ( ) ) { add ( new CTagTreeNode ( m_parent , getGraph ( ) , m_tagManager , m_model ", "private void addVolumesToBlockConsistencyGroup(URI cgUri,List<Volume> volumes){\n  for (  Volume volume : volumes) {\n    addVolumeToBlockConsistencyGroup(cgUri,volume);\n  }\n}\n", "void onPluginCrashed ( CefBrowser browser , String pluginPath ) ;", "public synchronized void remove(String item){\n  int index=items.indexOf(item);\n  if (index < 0) {\n    throw new IllegalArgumentException(\"item \" + item + \" not found in list\");\n  }\n else {\n    remove(index);\n  }\n}\n", "    public FSLLearningUnitViewElement createLearningUnitViewElement(String id, String parentId, String title, boolean folder) {\n    \tFLGSelectorElement newElement = new FLGSelectorElement();\n        newElement.setId(id);\n        newElement.setParentId(parentId);\n        newElement.setTitle(title);\n        newElement.setFolder(folder);\n        newElement.setLastModificationDate(String.valueOf(new Date().getTime()));\n        if (!folder) newElement.setType(FLGSelectorElement.ELEMENT_TYPE_TEXT);\n        else {\n            newElement.setType(FLGSelectorElement.ELEMENT_TYPE_FOLDER);\n        }\n        return newElement;\n    }\n", "\tpublic void clearSelection() {\n\t\tif (!_selItems.isEmpty()) {\n\t\t\tfor (Iterator it = _selItems.iterator(); it.hasNext();) {\n\t\t\t\tfinal Listitem item = (Listitem)it.next();\n\t\t\t\titem.setSelectedDirectly(false);\n\t\t\t}\n\t\t\t_selItems.clear();\n\t\t\t_jsel = -1;\n\t\t\tsmartUpdate(\"selectedIndex\", \"-1\");\n\t\t}\n\t}\n", "public static CmsModelPageTreeItem createRootItem(boolean isModelGroup, String title, String subTitle) {\n\n        return new CmsModelPageTreeItem(isModelGroup, title, subTitle);\n    }", "public static boolean validateSamRg(CFlags flags){\n  final String rg=(String)flags.getValue(SAM_RG);\n  final File in=new File(rg);\n  if (!in.exists() && rg.indexOf('\\t') != -1) {\n    flags.setParseMessage(\"given string \\\"\" + rg + \"\\\" for --\"+ SAM_RG+ \" contains literal tab characters, please use \\\\t instead\");\n    return false;\n  }\n else   if (in.isDirectory()) {\n    flags.setParseMessage(\"given input file \\\"\" + in.getPath() + \"\\\" for --\"+ SAM_RG+ \" is a directory, must be a file\");\n    return false;\n  }\n  return true;\n}\n", "public static void report(){\n  if (!reported.compareAndSet(false,true)) {\n    return;\n  }\n  if (USE_EPOLL) {\n    logger.info(\"/dev/epoll: \" + (Epoll.isAvailable() ? \"yes\" : \"no (\" + filterCause(Epoll.unavailabilityCause()) + ')'));\n  }\n else {\n    logger.info(\"/dev/epoll: disabled\");\n  }\n  if (USE_OPENSSL) {\n    logger.info(\"OpenSSL: \" + (OpenSsl.isAvailable() ? \"yes (\" + OpenSsl.versionString() + \", \"+ OpenSsl.version()+ ')' : \"no (\" + filterCause(OpenSsl.unavailabilityCause()) + ')'));\n  }\n else {\n    logger.info(\"OpenSSL: disabled\");\n  }\n}\n", "    protected String findLibrary(String libname) {\n        return super.findLibrary(libname);\n    }\n", "public static <T>ReactiveSeq<T> fromStream(final Stream<T> stream){\n  Objects.requireNonNull(stream);\n  if (stream instanceof ReactiveSeq)   return (ReactiveSeq<T>)stream;\n  return StreamUtils.reactiveSeq(stream,Optional.empty());\n}", "public String negotiate(\n      SSLSocket sslSocket, String hostname, @Nullable List<Protocol> protocols) throws IOException {\n    if (protocols != null) {\n      configureTlsExtensions(sslSocket, hostname, protocols);\n    }\n    try {\n      // Force handshake.\n      sslSocket.startHandshake();\n\n      String negotiatedProtocol = getSelectedProtocol(sslSocket);\n      if (negotiatedProtocol == null) {\n        throw new RuntimeException(\"TLS ALPN negotiation failed with protocols: \" + protocols);\n      }\n      return negotiatedProtocol;\n    } finally {\n      platform.afterHandshake(sslSocket);\n    }\n  }", "public static < T > Iterator < T > tail ( Iterator < T > self ) { if ( ! self . hasNext ( ) ) { throw new NoSuchElementException ( STR_ ) ; } self . next ( ) ; return self ; }", "\tpublic int close(String id, int part) {\n\t\treturn serviceDomeImpl.close(id, part);\n\t}\n", "public void init(){\n  initScriptSelectionModel();\n}\n", "public int hashCode(){\n  return group.hashCode();\n}\n", "Object invoke ( Object service , Object ... args ) throws IllegalAccessException , IllegalArgumentException , InvocationTargetException ;", "public String processDefaultValFromStateOnly(IStateAccess state) throws InstallException {\n  String result=null;\n  result=(String)state.get(getKey());\n  return result;\n}\n", "    public void addLink(EntityLink link) {\n        IntegrationEntity main = link.getMainObject();\n        IntegrationEntity dep = link.getDependantObject();\n        // Delete the old link, if there is one:\n        EntityLink old = mainToDependants.get(main, dep);\n        if (old != null) {\n            removeLink(old);\n        }\n        mainToDependants.put(main, dep, link);\n        dependantToMains.put(dep, main, link);\n    }\n", "public void marshall(UpdateUserProfileRequest updateUserProfileRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (updateUserProfileRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(updateUserProfileRequest.getIamUserArn(), IAMUSERARN_BINDING);\n            protocolMarshaller.marshall(updateUserProfileRequest.getSshUsername(), SSHUSERNAME_BINDING);\n            protocolMarshaller.marshall(updateUserProfileRequest.getSshPublicKey(), SSHPUBLICKEY_BINDING);\n            protocolMarshaller.marshall(updateUserProfileRequest.getAllowSelfManagement(), ALLOWSELFMANAGEMENT_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public native boolean isBuffering ( ) ;", "public AndroidAuthenticator ( Context context , Account account , String authTokenType , boolean notifyAuthFailure ) { this ( AccountManager . get ( context ) , account , authTokenType , notifyAuthFailure ) ; }", "private byte [ ] __getUserBin ( boolean isUser1 , String deviceKey , String latestRomVersion ) { byte [ ] result = __loadBinFromLocal ( isUser1 , latestRomVersion ) ; if ( result != null ) { log . debug ( Thread . currentThread ( ) . toString ( ) + STR_ + isUser1 + STR_ + deviceKey + STR_ + latestRomVersion + STR_ + result ) ; return result ; } else { __deleteDownloadIdValue ( latestRomVersion ) ; result = __loadBinFromInternet ( isUser1 , deviceKey , latestRomVersion ) ; if ( result != null ) { __saveDownloadIdValue ( latestRomVersion ) ; } log . debug ( Thread . currentThread ( ) . toString ( ) + STR_ + isUser1 + STR_ + deviceKey + STR_ + latestRomVersion + STR_ + result ) ; return result ; } }", "public void markDirty(Instruction s,Register symb){\n  HashSet<Register> set=dirtyMap.get(s);\n  if (set == null) {\n    set=new HashSet<Register>(3);\n    dirtyMap.put(s,set);\n  }\n  set.add(symb);\n}\n", "\t\tpublic void onAgentCreated(AgentCreated event) {\n\t\t\tnew StatAgent(event.getAgent().getOrgname(),\n\t\t\t\t\tevent.getAgent().getName(),\n\t\t\t\t\tevent.getRecipientId());\n\t\t}\n", "  public boolean isDebugEnabled() {\n    if (hierarchy.enableInt > Priority.DEBUG_INT) { return false; }\n    return Priority.DEBUG.isGreaterOrEqual(getChainedPriority());\n  }\n", "      \tpublic void windowClosing(WindowEvent e) {\n      \t\teventManager.sendEvent(EventManager.EVENT.APPLICATION_EXIT);\n      \t}\n", "\tfinal public GeoConicPart ConicSector(String label, GeoConic conic, GeoPoint P, GeoPoint Q) {\n\t\tAlgoConicPartConicPoints algo = new AlgoConicPartConicPoints(cons, label, conic, P, Q, \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tGeoConicPart.CONIC_PART_SECTOR);\n\t\tprocessCreateCommand(algo.getConicPart()); //VMT modification\n\t\treturn algo.getConicPart();\n\t}\n", "public abstract boolean isReadOnly ( ) ;", "public abstract INaviView findView ( int containerId , int viewId ) ;", "boolean isPragma ( ) ;", "    public Command getHacer_pedidos() {\n        if (hacer_pedidos == null) {//GEN-END:|27-getter|0|27-preInit\n            // write pre-init user code here\n            hacer_pedidos = new Command(\"hacer_pedidos\", Command.OK, 0);//GEN-LINE:|27-getter|1|27-p", "public void countUp(int count){\n  sync.releaseShared(-1 * (Math.abs(count)));\n}\n", "    public LogHistory filterAllAfterDate(Date dStart) {\n        return (LogHistory) \n               (HistoryLib.filterAllAfterDate(this, dStart, new LogHistory()));\n    } // of method\n", "int sendSetRegisterMessage ( long tid , int index , BigInteger value ) throws IOException ;", "public int process(Collection<? extends Object> aExpected,Collection<? extends Object> aActual){\n  expectedCount+=aExpected.size();\n  actualCount+=aActual.size();\n  Set<Object> actual=new HashSet<>(aActual);\n  for (  Object eUnit : aExpected) {\n    boolean found=actual.remove(eUnit);\n    if (found) {\n      hitCount++;\n    }\n  }\n  return hitCount;\n}\n", "public GraphType transpose(GraphType orig,GraphToolkit<GraphType,EdgeType,VertexType> toolkit){\n  GraphType trans=toolkit.createGraph();\n  for (Iterator<VertexType> i=orig.vertexIterator(); i.hasNext(); ) {\n    VertexType v=i.next();\n    VertexType dupVertex=toolkit.duplicateVertex(v);\n    dupVertex.setLabel(v.getLabel());\n    trans.addVertex(v);\n    m_origToTransposeMap.put(v,dupVertex);\n    m_transposeToOrigMap.put(dupVertex,v);\n  }\n  trans.setNumVertexLabels(orig.getNumVertexLabels());\n  for (Iterator<EdgeType> i=orig.edgeIterator(); i.hasNext(); ) {\n    EdgeType e=i.next();\n    VertexType transSource=m_origToTransposeMap.get(e.getTarget());\n    VertexType transTarget=m_origToTransposeMap.get(e.getSource());\n    EdgeType dupEdge=trans.createEdge(transSource,transTarget);\n    dupEdge.setLabel(e.getLabel());\n    toolkit.copyEdge(e,dupEdge);\n  }\n  trans.setNumEdgeLabels(orig.getNumEdgeLabels());\n  return trans;\n}\n", "    public void setDtfm(String value) {\n        if (value.length() > 3) {\n            value = value.substring(0, 3);\n        }\n        setField(\"CRDTFM\", value);\n    }\n", "boolean isObjectMethod ( ) ;", "\tprotected IJavaElement getElementAt(int offset, boolean reconcile) {\n\t\tICompilationUnit unit= (ICompilationUnit)getInputJavaElement();\n\n\t\tif (unit != null) {\n\t\t\ttry {\n\t\t\t\tif (reconcile) {\n\t\t\t\t\tJavaModelUtil.reconcile(unit);\n\t\t\t\t\treturn unit.getElementAt(offset);\n\t\t\t\t} else if (unit.isConsistent())\n\t\t\t\t\treturn unit.getElementAt(offset);\n\n\t\t\t} catch (JavaModelException x) {\n\t\t\t\tif (!x.isDoesNotExist())\n\t\t\t\tJavaPlugin.log(x.getStatus());\n\t\t\t\t// nothing found, be tolerant and go on\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n", "    public void shutdown() {\n        active = false;\n    }\n", "\tpublic void selectedOne(MouseEvent evt){\n\n\t\tint row = table.getSelectedRow();\n\n\t\tif(row >= 0) {\n\t\t\tint modelRow = table.convertRowIndexToModel(row);\n\t\t\t//get selected entry\n\n//\t\t\tGroupEntity group = (GroupEntity) table.getModel().getValueAt(modelRow, 0);\n//\t\t\trequestGroup = (GroupEntity) table.getModel().getValueAt(modelRow, 0);\n//\t\t\tEmployeeMediatorEntity empMediator = (EmployeeMediatorEntity) table.getModel().getValueAt(modelRow, 0);\n\n\t\t\t//set focus\n\t\t\t\tif(row > 0) {\n\t\t\t\t\ttable.setRowSelectionInterval(row, row);\n\t\t\t\t}\n\t\t\t}\n\t}\n", "  public boolean hasChangedConstructs() {\n    if (added.isEmpty() && removed.isEmpty() && edited.isEmpty())\n      return false;\n    else return true;\t\t\t\t   \n  }\n", "public UIGraphicTestCase ( String name ) { super ( name ) ; }", "void loadCache(){\n  boolean worked=true;\n  ArrayList<SourceFile> files=new ArrayList<SourceFile>();\n  SwfInfo[] swfs=getAllSwfs();\n  for (int i=0; i < swfs.length; i++) {\n    if (swfs[i] != null)     worked=loadSwfFiles(files,swfs[i]) ? worked : false;\n  ", "public void send(Destination _destination,Message _message,int _deliveryMode,int _priority,long _timeToLive) throws JMSException {\n  if (_destination == null || !(_destination instanceof Queue || _destination instanceof Topic)) {\n    throw new InvalidDest", "public AbstractDepthFirstSearch < GraphType , EdgeType , VertexType > search ( ) { visitAll ( ) ; classifyUnknownEdges ( ) ; return this ; }", "private void logRunException(final Exception e) {\n    if (shutDown) {\n      getLogger().debug(\"Exception occurred during shutdown\", e);\n    } else {\n      getLogger().warn(\"Problem handling memcached IO\", e);\n    }\n  }", "  public void setField(String fname,String value){\n    if (!rec.containsKey(fname)){\n      flist.add(fname);\n    }\n    rec.setProperty(fname,value);\n  }\n", "public static void mapClasses(int numClusters,int lev,int[][] counts,int[] clusterTotals,double[] current,double[] best,int error){\n  if (lev == numClusters) {\n    if (error < best[numClusters]) {\n      best[numClusters]=error;\n      for (int i=0; i < numClusters; i++) {\n        best[i]=current[i];\n      }\n    }\n  }\n else {\n    if (clusterTotals[lev] == 0) {\n      current[lev]=-1;\n      mapClasses(numClusters,lev + 1,counts,clusterTotals,current,best,error);\n    }\n else {\n      current[lev]=-1;\n      mapClasses(numClusters,lev + 1,counts,clusterTotals,current,best,error + clusterTotals[lev]);\n      for (int i=0; i < counts[0].length; i++) {\n        if (counts[lev][i] > 0) {\n          boolean ok=true;\n          for (int j=0; j < lev; j++) {\n            if ((int)current[j] == i) {\n              ok=false;\n              break;\n            }\n          }\n          if (ok) {\n            current[lev]=i;\n            mapClasses(numClusters,lev + 1,counts,clusterTotals,current,best,(error + (clusterTotals[lev] - counts[lev][i])));\n          }\n        }\n      }\n    }\n  }\n}\n", "    private String getLogLevel() {\n        if (DEBUG) {\n            return \"DEBUG\";\n        }\n\n        return \"WARN\";\n    }\n", "private Map<String, String> getConfigMapFromProperties(String prefix) {\n        Map<String, String> rval = new HashMap<>();\n        getKeys(prefix).forEach(pair -> {\n            if (!pair.getKey().equals(prefix)) {\n                String shortKey = pair.getKey().substring(prefix.length() + 1);\n                rval.put(shortKey, pair.getValue());\n            }\n        });\n        return rval;\n    }", "void validateCorrectVersion ( JsonValue updateConfig , File updateFile ) throws UpdateException { if ( ! updateConfig . get ( ORIGIN_VERSION ) . asList ( ) . contains ( getProductVersion ( ) ) && ! updateConfig . get ( ORIGIN_VERSION ) . asList ( ) . cont", "@Override public boolean isResultRequired(ResultProducer rp,Object[] key) throws Exception {\n  return true;\n}\n", "public GenericDraweeHierarchyBuilder setActualImageScaleType(\n      @Nullable ScalingUtils.ScaleType actualImageScaleType) {\n    mActualImageScaleType = actualImageScaleType;\n    mActualImageMatrix = null;\n    return this;\n  }", "public DebuggerTemplate findDebugger ( final int debuggerId ) { for ( final DebuggerTemplate description : debuggers ) { if ( description . getId ( ) == debuggerId ) { return description ; } } return null ; }", "public static < V > int addDistinctList ( List < V > sourceList , List < V > entryList ) { if ( sourceList == null || isEmpty ( entryList ) ) { return NUM_ ; } int sourceCount = sourceList . size ( ) ; for ( V entry : entryList ) { if ( ! sourceList . con", "public abstract void onMemoryAllocation ( java . io . Serializable id ) throws BlobStoreMemoryShortageException ;", "public long getEndToEndDuration() {\n\t\tSubtaskStateStats subtask = getLatestAcknowledgedSubtaskStats();\n\t\tif (subtask != null) {\n\t\t\treturn Math.max(0, subtask.getAckTimestamp() - triggerTimestamp);\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}", "public static <T> SerializedCheckpointData[] fromDeque(\n\t\t\tArrayDeque<Tuple2<Long, Set<T>>> checkpoints,\n\t\t\tTypeSerializer<T> serializer) throws IOException {\n\t\treturn fromDeque(checkpoints, serializer, new DataOutputSerializer(128));\n\t}", "private static boolean isDataTypeSetPrecisely(Element bindNode){\n  String type=bindNode.getAttributeValue(null,ATTRIBUTE_TYPE);\n  if (type != null && !type.equalsIgnoreCase(DATA_TYPE_TEXT))   return true;\n  return false;\n}\n", "\tprivate String indent(int count) {\n\n\t\tStringBuffer ret = new StringBuffer();\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\tret.append(indent);\n\t\t}\n\t\treturn ret.toString();\n\t}\n", "public void addAttribute(String attrName,String value) throws SMSException {\n  Set attrValues=null;\n  if (attrSet == null) {\n    attrSet=new CaseInsensitiveHashMap();\n  }\n else   if (attrSet.containsKey(attrName)) {\n    attrValues=(Set)attrSet.get(attrNam", "ReplaceStringQuickFix(@Nullable String name,@Nullable String regexp,@NotNull String newValue){\n  myName=name;\n  myNewValue=newValue;\n  if (regexp != null && regexp.indexOf('(') == -1) {\n    regexp=\"(\" + Pattern.quote(regexp) + \")\";\n  }\n  myRegexp=regexp;\n}\n", "    public void _setMaxTextLen() {\n        oObj.setMaxTextLen((short)10);\n        //oObj.setText(\"0123456789ABCDE\");\n        //String get = oObj.getText();\n        //tRes.tested(\"setMaxTextLen()\",get.length() == 10);\n        tRes.tested(\"setMaxTextLen()\",oObj.getMaxTextLen()==10);\n    }\n", "HttpResponseTemp < ? > downloadLogFile ( int imageId ) ;", "public void init() throws MessagingException {\n  repositoryPath=getInitParameter(\"repositoryPath\");\n  processor=(getInitParameter(\"processor\") == null) ? Mail.DEFAULT : getInitParameter(\"processor\");\n  try {\n    delete=(getInitParameter(\"delete\") == null) ? false : Boolean.valueOf(getInitParameter(\"delete\"));\n  }\n catch (  Exception e) {\n  }\n  try {\n    repository=mailStore.select(repositoryPath);\n  }\n catch (  Exception e) {\n    throw new MessagingException(\"Failed to retrieve MailRepository for url \" + repositoryPath,e);\n  }\n}\n", "   public void addContactHeader(ContactHeader ch, boolean top) \n   {  addHeader(ch,top);\n   }   \n", "public static IOFileFilter sizeRangeFileFilter ( long minSizeInclusive , long maxSizeInclusive ) { IOFileFilter minimumFilter = new SizeFileFilter ( minSizeInclusive , BOOL_ ) ; IOFileFilter maximumFilter = new SizeFileFilter ( maxSizeInclusive + NUM_ , B", "public StorageSpecification [ ] list ( ) throws BackupException ;", "    public SingleVariableDeclaration declareVariable(AST ast, String varName, PrimitiveType varType) {\n        SingleVariableDeclaration newVar = ast.newSingleVariableDeclaration();\n\n        newVar.setType(varType);\n        newVar.setName(ast.newSimpleName(varName));\n\n        return newVar;\n    }\n", "public static void copy(File source, File dest) throws IOException {\n        if (dest.isDirectory()) {\n            dest = new File(dest + File.separator + source.getName());\n        }\n\n        FileChannel in = null, out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n\n            out.write(buf);\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        }\n    }", "\tpublic T removeFirst() {\n\t\tif (size == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tsize -= 1;\n\t\tListEntry<T> oldHead = head;\n\t\tListEntry<T> newHead = oldHead.getNext();\n\t\thead = newHead;\n\t\tif (newHead == null) {\n\t\t\t// if this was the last element\n\t\t\ttail = null;\n\t\t} else {\n\t\t\tnewHead.setPrevious(null);\n\t\t}\n\t\treturn oldHead.getElement();\n\t}\n", "public JSONObject toJSONObject ( JSONArray names ) throws JSONException { if ( names == null || names . length ( ) == NUM_ || length ( ) == NUM_ ) { return null ; } JSONObject jo = new JSONObject ( ) ; for ( int i = NUM_ ; i < names . length ( ) ; i += NU", "public static String nextCode ( final String immCode , final boolean mainCycle ) { return nextCode ( immCode , mainCycle , new Date ( ) ) ; }", "public static String locateUndefinedElement(Element e) {\n\n        if (e instanceof Resource) {\n            // recursively check all of the resources children\n            Resource r = (Resource) e;\n            for (Resource.Entry entry : r) {\n                String rpath = locateUndefinedElement(entry.getValue());\n                String term = entry.getKey().toString();\n                if (rpath != null) {\n                    return (!\"\".equals(rpath)) ? term + \"/\" + rpath : term;\n                }\n            }\n            return null;\n        } else if (e instanceof TransientElement) {\n            // return empty string as relative path and indicating transient element was found\n            return \"\";\n        } else {\n            // property that isn't a transient element\n            return null;\n        }\n    }", "String resolveSymbolicString(String symbolicPath) {\n        if (symbolicPath == null)\n            throw new NullPointerException(\"Path must be non-null\");\n\n        return resolveStringSymbols(symbolicPath, symbolicPath, true, 0, true);\n    }", "\tpublic void close() {\n\t\tconnected = false;\n\t\tmysocket.close();\n\t}\n", "public synchronized void clearSelectionListeners(){\n  if (listeners != null) {\n    listeners.clear();\n  }\n}", "public void testZeroCovarianceConditional ( ) throws Exception { ConditionalMutualInfoCalculatorMultiVariateGaussian condMiCalc = new ConditionalMutualInfoCalculatorMultiVariateGaussian ( ) ; condMiCalc . initialise ( NUM_ , NUM_ , NUM_ ) ; double covar1 ", "CTagManager loadTagManager ( TagType type ) throws CouldntLoadDataException ;", "void addEventListener ( final DebugEventListener listener ) ;", "protected final Statement createStatement(int resultSetType,int resultSetConcurrency) throws SQLException {\n  return addAndReturnStatement(createdStatements,connection.createStatement(resultSetType,resultSetConcurrency));\n}\n", "public BitbucketRepositoryFork forkRepository(@NotNull final String owner,@NotNull final String repositorySlug,@NotNull final String forkName,final boolean isForkPrivate) throws IOException, BitbucketException, ServerException {\n  checkArgument(!isNullOrEmpty(owner),\"owner\");\n  checkArgument(!isNullOrEmpty(repositorySlug),\"repositorySlug\");\n  checkArgument(!isNullOrEmpty(forkName),\"forkName\");\n  final String url=BITBUCKET_1_0_API_URL + \"/repositories/\" + owner+ \"/\"+ repositorySlug+ \"/fork\";\n  final String data=\"name=\" + encode(forkName,\"UTF-8\") + \"&is_private=\"+ isForkPrivate;\n  final String response=doRequest(POST,url,OK,APPLICATION_FORM_URLENCODED,data);\n  return parseJsonResponse(response,BitbucketRepositoryFork.class);\n}\n", "public static void overrideSymbolSet ( SymbolInfo [ ] override ) { symbols = override ; }", "    private void addChildren(Node p_branch) throws InvalidKeyException {\n        Node childNode;\n        Field child;\n        // get the first child of the DOM node\n        childNode = p_branch.getFirstChild();\n\n        // loop through all children\n        while (childNode != null) {\n            // if the child node is a field description\n            if (childNode.getNodeType() == Node.ELEMENT_NODE) {\n                // create a new child branch\n                child = createChild(childNode);\n                // and add the field to the list of children\n                addChild(child);\n            }\n            // go on with parsing the next child node\n            childNode = childNode.getNextSibling();\n        }\n    }\n", "public Notification[] readNotifications(InputStream in) throws ConversionException, IOException, ClassNotFoundException {\n        final NotificationRecord[] records = readNotificationRecords(in);\n        final Notification[] ret = new Notification[records.length];\n        for (int i = 0; i < records.length; ++i) {\n            ret[i] = records[i].getNotification();\n        }\n        return ret;\n    }", "public void visitRealLiteral(/* @non_null */JRealLiteral self) {\n\t\tthrow new TacoNotImplementedYetException(self.getClass().getName());\n\t}", "public void setDagEdges(java.util.Collection<CodeGenEdge> dagEdges) {\n        if (dagEdges == null) {\n            this.dagEdges = null;\n            return;\n        }\n\n        this.dagEdges = new java.util.ArrayList<CodeGenEdge>(dagEdges);\n    }", "public com.google.protobuf.ByteString\n      getFullNameBytes() {\n    java.lang.Object ref = fullName_;\n    if (ref instanceof java.lang.String) {\n      com.google.protobuf.ByteString b = \n          com.google.protobuf.ByteString.copyFromUtf8(\n              (java.lang.String) ref);\n      fullName_ = b;\n      return b;\n    } else {\n      return (com.google.protobuf.ByteString) ref;\n    }\n  }", "public final void reset() {\n        successfulTests = 0;\n        failedTests = 0;\n        timeoutTests = 0;\n        errorTests = 0;\n        individualErrors = 0;\n\n        startTime = null;\n        endTime = null;\n    }", "    public Position3DInterface requestInterfacePosition3D (int index, int access) {\n        return (Position3DInterface)\n            requestInterface (PLAYER_POSITION3D_CODE, index, access);\n    }\n", "AuditLogFilter build ( JsonValue config ) { List < AuditLogFilter > filters = new ArrayList < > ( ) ; for ( Map . Entry < String , JsonValueObjectConverter < AuditLogFilter > > entry : auditLogFilterBuilder . entrySet ( ) ) { final String configPath = ent", "    public BasePublisher getPublisher(Admin admin, int id) {\n        BasePublisher returnval = null;\n\n        try {\n            returnval = (publisherhome.findByPrimaryKey(new Integer(id))).getPublisher();\n        } catch (FinderException e) {\n            // return null if we cant find it\n        }\n        return returnval;\n    } // getPublisher\n", "public static Object withInputStream(Path self, @ClosureParams(value = SimpleType.class, options = \"java.io.InputStream\") Closure closure) throws IOException {\n        return IOGroovyMethods.withStream(newInputStream(self), closure);\n    }", "public CGotoOffsetAction ( final CDebugPerspectiveModel debugPerspectiveModel , final IAddress offset ) { super ( String . format ( STR_ , offset . toHexString ( ) ) ) ; Preconditions . checkNotNull ( debugPerspectiveModel , STR_ ) ; m_debugPerspectiveModel = debugPerspectiveModel ; m_offset = offset ; }", "private void updateGui ( ) { final IDebugger debugger = m_debugPerspectiveModel . getCurrentSelectedDebugger ( ) ; final TargetProcessThread thread = debugger == null ? null : debugger . getProcessManager ( ) . getActiveThread ( ) ; final boolean connecte", "private UniversalDataSource createDataSource ( String name ) throws ReplicatorException , InterruptedException { TungstenProperties datasourceProps = new TungstenProperties ( ) ; datasourceProps . setString ( STR_ , name ) ; datasourceProps . setLong ( ST", "public void init() {\n        if (manifests == null) {\n            manifests = new ArrayList<>();\n            \n            try {\n                primaryManifest = addToList(applicationContext.getResource(MANIFEST_PATH));\n                Resource[] resources = applicationContext.getResources(\"classpath*:/\" + MANIFEST_PATH);\n\n                for (Resource resource : resources) {\n                    Manifest manifest = addToList(resource);\n                    \n                    if (primaryManifest == null) {\n                        primaryManifest = manifest;\n                    }\n                }\n\n            } catch (Exception e) {\n                log.error(\"Error enumerating manifests.\", e);\n            }\n\n        }\n    }", "public static ChainableStatement mouseout(JsScope jsScope)\n\t{\n\t\treturn new DefaultChainableStatement(MouseEvent.MOUSEOUT.getEventLabel(), jsScope.render());\n\t}", "    private void buildTable() {\n        Object[][] dataArray = new Object[fieldElements.size()][2];\n\n        for (int i = 0; i < fieldElements.size(); i++) {\n            dataArray[i][0] = fieldElements.elementAt(i);\n            dataArray[i][1] = valueElements.elementAt(i);\n        }\n\n        String[] colheads = {\n                \"field\", \"value\" };\n\n        detailsTable = new DetailsTable(dataArray, colheads);\n    }\n", "private void extendColourMap(int highest){\n  for (int i=m_colorList.size(); i < highest; i++) {\n    Color pc=m_DefaultColors[i % 10];\n    int ija=i / 10;\n    ija*=2;\n    for (int j=0; j < ija; j++) {\n      pc=pc.brighter();\n    }\n    m_colorList.add(pc);\n  }\n}\n", "private int currentDepth ( ) { try { Integer oneBased = ( ( Integer ) DEPTH_FIELD . get ( this ) ) ; return oneBased - NUM_ ; } catch ( IllegalAccessException e ) { throw new AssertionError ( e ) ; } }", "public ArrayList<Integer> doScan(){\n  cancelled=false;\n  ArrayList<Integer> openPorts=new ArrayList<>();\n  for (  int portNo : ports) {\n    if (PortScanTCP.scanAddress(address,portNo,timeOutMillis)) {\n      openPorts.add(portNo);\n    }\n    if (cancelled)     break;\n  }\n  return openPorts;\n}\n", "public void reset ( ) { mDetector . reset ( ) ; }", "public void init ( ) throws ServletException { }", "public VoltageScorer(Hypergraph<V,E> g,Function<? super E,? extends Number> edge_weights,V source,V sink){\n  this(g,edge_weights,Collections.singletonMap(source,1.0),Collections.singletonList(sink));\n  initialize();\n}\n", "   \tprotected Properties createServiceProperties(TiiraService tiiraService) {\n   \t\tString implName =  tiiraService.getServiceImpl().getName();\n        String interfaceName = tiiraService.getServiceInterface().getName();\n        String beanName = tiiraService.getBeanName();\n        String urlName = tiiraService.getUrlName();\n        \n        Properties props =new Properties();\n        props.put(beanName+ \".(class)\", implName);\n            \n        props.put(urlName+\".(class)\", this.exporterClass.getName());\n        props.put(urlName+\".service(ref)\", beanName);\n        props.put(urlName+\".serviceInterface\" , interfaceName);\n     \t\n        return props;\n    }\n", "public boolean hasOption(char opt){\n  return hasOption(String.valueOf(opt));\n}\n", "private DateUtil ( ) { this ( DateTimeZone . getDefault ( ) ) ; }", "@Override\n  public PollResult startPoll(PollController conn)\n  {\n    if (! _lifecycle.isActive()) {\n      log.warning(this + \" select disabled\");\n        \n      return PollResult.CLOSED;\n    }\n    else if (_selectMax <= _connectionCount.get()) {\n      log.warning(this + \" keepalive overflow \"\n                  + _connectionCount + \" max=\" + _selectMax);\n      System.out.println(\"OVERFLOW:\");\n      \n      return PollResult.CLOSED;\n    }\n    \n    if (! conn.toKeepaliveStart()) {\n      return PollResult.CLOSED;\n    }\n\n    return poll(conn);\n  }", "public boolean inCloudConsoleUrl(Point point,int activeIndex){\n  double playYStart=VGAP + ACTIVE_USER_IMAGE_HEIGHT - cloudLabelDimension.getHeight() - 3 + (mainPanelDimension.getHeight() * activeIndex) + (USER_LABEL_VERTICAL_STRUT * 2);\n  double playYEnd=playYStart + cloudLabelDimension.getHeight();\n  double playXStart=ACTIVE_USER_IMAGE_WIDTH + HGAP + VGAP;\n  double playXEnd=playXStart + cloudLabelDimension.getWidth();\n  return (point.getX() > playXStart) && (point.getX() < playXEnd) && (point.getY() > playYStart)&& (point.getY() < playYEnd);\n}\n", "public void marshall(ProviderUserIdentifierType providerUserIdentifierType, ProtocolMarshaller protocolMarshaller) {\n\n        if (providerUserIdentifierType == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(providerUserIdentifierType.getProviderName(), PROVIDERNAME_BINDING);\n            protocolMarshaller.marshall(providerUserIdentifierType.getProviderAttributeName(), PROVIDERATTRIBUTENAME_BINDING);\n            protocolMarshaller.marshall(providerUserIdentifierType.getProviderAttributeValue(), PROVIDERATTRIBUTEVALUE_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void cancel(RpcCancel rpcCancel){\n  int correlationId=rpcCancel.getCorrelationId();\n  if (callExecutor == null) {\n    return;\n  }\n  PendingServerCallState state=pendingServerCallMap.remove(correlationId);\n  if (state != null) {\n    callExecutor.cancel(state.getExecutor());\n    if (log.isDebugEnabled()) {\n      log.debug(\"Received [\" + rpcCancel.getCorrelationId() + \"]RpcCancel.\");\n    }\n    doLog(state,rpcCancel,\"Cancelled\");\n  }\n}\n", "@RequestProcessing(value=\"/member/{userName}\",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHome(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception {\n  final JSONObject user=(JSONObject)request.getAttribute(User.USER);\n  String pageNumStr=request.getParameter(\"p\");\n  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {\n    pageNumStr=\"1\";\n  }\n  final int pageNum=Integer.valueOf(pageNumStr);\n  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get(\"skinDirName\"));\n  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();\n  context.setRenderer(renderer);\n  final Map<String,Object> dataModel=renderer.getDataModel();\n  filler.fillHeaderAndFooter(request,response,dataModel);\n  final String followingId=user.optString(Keys.OBJECT_ID);\n  dataModel.put(Follow.FOLLOWING_ID,followingId);\n  renderer.setTemplateName(\"/home/home.ftl\");\n  dataModel.put(User.USER,user);\n  fillHomeUser(dataModel,user);\n  avatarQueryService.fillUserAvatarURL(user);\n  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);\n  if (isLoggedIn) {\n    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);\n    final String followerId=currentUser.optString(Keys.OBJECT_ID);\n    final boolean isFollowing=followQueryService.isFollowing(followerId,followingId);\n    dataModel.put(Common.IS_FOLLOWING,isFollowing);\n  }\n  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));\n  final int pageSize=Symphonys.getInt(\"userHomeArticlesCnt\");\n  final int windowSize=Symphonys.getInt(\"userHomeArticlesWindowSize\");\n  final List<JSONObject> userArticles=articleQueryService.getUserArticles(user.optString(Keys.OBJECT_ID),pageNum,pageSize);\n  dataModel.put(Common.USER_HOME_ARTICLES,userArticles);\n  final int articleCnt=user.optInt(UserExt.USER_ARTICLE_COUNT);\n  final int pageCount=(int)Math.ceil((double)articleCnt / (double)pageSize);\n  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);\n  if (!pageNums.isEmpty()) {\n    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));\n    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));\n  }\n  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);\n  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);\n  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);\n  final JSONObject currentUser=Sessions.currentUser(request);\n  if (null == currentUser) {\n    dataModel.put(Common.IS_MY_ARTICLE,false);\n  }\n else {\n    dataModel.put(Common.IS_MY_ARTICLE,userName.equals(currentUser.optString(User.USER_NAME)));\n  }\n}\n", "public void addToRenderQueue(VisualItem item){\n  if (ritems.length == rsize) {\n    int capacity=(3 * ritems.length) / 2 + 1;\n    VisualItem[] q=new VisualItem[capacity];\n    int[] s=new int[capacity];\n    System.arraycopy(ritems,0,q,0,rsize);\n    System.arraycopy(rscores,0,s,0,rsize);\n    ritems=q;\n    rscores=s;\n  }\n  ritems[rsize]=item;\n  rscores[rsize++]=(sort != null ? sort.score(item) : 0);\n}\n", "public Result run(Database database, Relation<O> relation) {\n    // Get a distance and knn query for the Euclidean distance\n    // Hardcoded, only use this if you only allow the eucliden distance\n    DistanceQuery<O> distQuery = database.getDistanceQuery(", "public static final void rotate(Group group, Matrix m){\n\n\t\tAtomIterator iter = new AtomIterator(group) ;\n\n\t\twhile (iter.hasNext()) {\n\t\t\tAtom atom = iter.next() ;\n\t\t\trotate(atom,m);\n\n\t\t}\n\n\t}", "\tpublic boolean isStateful() {\n\t\treturn true;\n\t}\n", "< T > T [ ] takeMultiple ( ISpaceQuery < T > template , int maxEntries , TakeModifiers modifiers ) throws DataAccessException ;", "\tpublic void setNextChain(MarkBlock b) {\n\t\tthis.next = b;\n\t\tif (b != null) {\n\t\t\tb.prev = this;\n\t\t}\n\t}\n", "public static String transformMethodSignature(String signature){\n  StringBuilder buf=new StringBuilder();\n  buf.append('(');\n  SignatureParser parser=new SignatureParser(signature);\n  for (Iterator<String> i=parser.parameterSignatureIterator(); i.hasNext(); ) {\n    String param=i.next();\n    param=transformSignature(param);\n    buf.append(param);\n  }\n  buf.append(')');\n  return buf.toString();\n}\n", "protected void readFile() throws IOException {\n\n        String  line;\n        try(BufferedReader reader=new BufferedReader(\n          new InputStreamReader(stream))) {\n            while((line=reader.readLine()) != null) {\n                if(line.contains(BEGIN_MARKER)) {\n                    beginMarker=line.trim();\n                    String endMarker=beginMarker.replace(\"BEGIN\", \"END\");\n                    derBytes=readBytes(reader, endMarker);\n                    return;\n                }\n            }\n            throw new IOException(\"Invalid PEM file: no begin marker\");\n        }\n    }", "public void initPortNames(){\n  initialized=false;\n  cbPort.addItem(\"\");\n  CommPortIdentifier currPort;\n  Enumeration ports=CommPortIdentifier.getPortIdentifiers();\n  while (ports.hasMoreElements()) {\n    currPort=(CommPortIdentifier)ports.nextElement();\n    if (currPort.getPortType() == CommPortIdentifier.PORT_SERIAL) {\n      cbPort.addItem(currPort.getName());\n    }\n  }\n  initialized=true;\n}\n", "public void marshall(WorkflowExecutionTimedOutEventAttributes workflowExecutionTimedOutEventAttributes, ProtocolMarshaller protocolMarshaller) {\n\n        if (workflowExecutionTimedOutEventAttributes == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(workflowExecutionTimedOutEventAttributes.getTimeoutType(), TIMEOUTTYPE_BINDING);\n            protocolMarshaller.marshall(workflowExecutionTimedOutEventAttributes.getChildPolicy(), CHILDPOLICY_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public static CRC check(BitSet msg){\n  CRC crc=CRC.UNKNOWN;\n  int calculated=1;\n  if (msg.cardinality() % 2 == 0) {\n    for (int i=msg.nextSetBit(0); i >= 0 && i < 48; i=msg.nextSetBit(i + 1)) {\n      calculated^=sCHECKSUMS[i];\n    }\n    if (calculated == getChecksum(msg)) {\n      crc=CRC.PASSED;\n    }\n else {\n      crc=CRC.FAILED_CRC;\n    }\n  }\n else {\n    crc=CRC.FAILED_PARITY;\n  }\n  return crc;\n}\n", "private static String[] match(String value){\n  if (value == null) {\n    return null;\n  }\n  Matcher matcher=IPV4_PATTERN.matcher(value);\n  if (matcher.matches()) {\n    int count=matcher.groupCount();\n    String[] groups=new String[count];\n    for (int j=0; j < count; j++) {\n      groups[j]=matcher.group(j + 1);\n    }\n    return groups;\n  }\n  return null;\n}\n", "private String readLineTrimComments ( BufferedReader br ) throws IOException { String line = br . readLine ( ) ; if ( line != null ) { line = line . trim ( ) ; if ( line . indexOf ( STR_ ) == NUM_ ) { line = STR_ ; } } return line ; }", "public Builder withEvents(Event<?>... events){\n  return withEvents(Arrays.asList(Assert.notNull(events,\"events\")));\n}\n", "public int read() throws IOException {\n  int ch1=is.read();\nswitch (ch1) {\ncase 130:\n    return ',';\ncase 131:\n  return 'f';\ncase 132:\nreturn '\"';\ncase 133:\nreturn 8230;\ncase 134:\nreturn '+';\ncase 135:\nreturn '+';\ncase 136:\nreturn '^';\ncase 137:\nreturn 8240;\ncase 138:\nreturn 'S';\ncase 139:\nreturn '<';\ncase 140:\nreturn 'O';\ncase 145:\ncase 146:\nreturn '\\'';\ncase 147:\ncase 148:\nreturn '\"';\ncase 149:\nreturn '*';\ncase 150:\ncase 151:\nreturn '-';\ncase 152:\nreturn '~';\ncase 153:\nreturn 8482;\ncase 154:\nreturn 's';\ncase 155:\nreturn '>';\ncase 156:\nreturn 'o';\ncase 376:\nreturn 'Y';\ndefault :\nreturn ch1;\n}\n}\n", "public static <T extends CharSequence>T eachMatch(T self,CharSequence regex,@ClosureParams(value=FromString.class,options={\"List<String>\",\"String[]\"}) Closure closure){\n  eachMatch(self.toString(),regex.toString(),closure);\n  return self;\n}\n", "\tpublic int optInt(final int index, final int defaultValue) {\n\t\ttry {\n\t\t\treturn getInt( index );\n\t\t} catch ( final Exception e ) {\n\t\t\treturn defaultValue;\n\t\t}\n\t}\n", "\tprivate void createMaterialThreads() {\n\t\t// NOTE: this is not the right way to do it, but this viewer can't do the right\n\t\t// mapping without further information on the model etc.\n\t\tfor(int materialIndex = 0; materialIndex < coreModel.getCoreMaterialCount(); materialIndex++) {\n\t\t\t// create the a material thread\n\t\t    coreModel.createCoreMaterialThread(materialIndex);\n\n\t\t    // initialize the material thread\n\t\t    coreModel.setCoreMaterialId(materialIndex, 0, materialIndex);\n\t\t }\n\t}\n", "public Composer frequency ( int frequency ) { mFrequency = frequency ; return this ; }", "public synchronized void addMessage(SmsMmsMessage newMessage){\n  messages.add(newMessage);\n  UpdateMessageCount();\n}\n", "public static void initializeDomainRegistry(final TransformerRegistry registry) {\n\n        //The chains for transforming will be as follows\n        //For JBoss EAP: 8.0.0 -> 5.0.0 -> 4.0.0 -> 1.8.0 -> 1.7.0 -> 1.6.0 -> 1.5.0\n\n        registerRootTransformers(registry);\n        registerChainedManagementTransformers(registry);\n        registerChainedServerGroupTransformers(registry);\n        registerProfileTransformers(registry);\n        registerSocketBindingGroupTransformers(registry);\n        registerDeploymentTransformers(registry);\n    }", "protected void generateFormalParameterAppender() {\n\t\tfinal CodeElementExtractor.ElementDescription parameter = getCodeElementExtractor().getFormalParameter();\n\t\tfinal String accessor = \"get\" //$NON-NLS-1$\n\t\t\t\t+ Strings.toFirstUpper(parameter.getElementType().getSimpleName()) + \"()\"; //$NON-NLS-1$\n\t\tfinal TypeReference builderInterface = getFormalParameterBuilderInterface();\n\t\tfinal TypeReference appender = getCodeElementExtractor().getElementAppenderImpl(\"FormalParameter\"); //$NON-NLS-1$\n\t\tfinal StringConcatenationClient content = new StringConcatenationClient() {\n\t\t\t@Override\n\t\t\tprotected void appendTo(TargetStringConcatenation it) {\n\t\t\t\tit.append(\"/** Appender of a \" + getLanguageName() //$NON-NLS-1$\n\t\t\t\t\t\t+ \" formal parameter.\"); //$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\" */\"); //$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"@SuppressWarnings(\\\"all\\\")\"); //$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"public class \"); //$NON-NLS-1$\n\t\t\t\tit.append(appender.getSimpleName());\n\t\t\t\tit.append(\" extends \"); //$NON-NLS-1$\n\t\t\t\tit.append(getCodeElementExtractor().getAbstractAppenderImpl());\n\t\t\t\tit.append(\" implements \"); //$NON-NLS-1$\n\t\t\t\tit.append(builderInterface);\n\t\t\t\tit.append(\" {\"); //$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(generateAppenderMembers(appender.getSimpleName(), builderInterface, accessor));\n\t\t\t\tit.append(generateMembers(false, true));\n\t\t\t\tit.append(\"}\"); //$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t}\n\t\t};\n\t\tfinal JavaFileAccess javaFile = getFileAccessFactory().createJavaFile(appender, content);\n\t\tjavaFile.writeTo(getSrcGen());\n\t}", "public void storeNewPackageOrder(){\n  List<String> packageList=new ArrayList<String>();\n  for (  AppInfo actApp : mInstalledApps) {\n    packageList.add(actApp.packageName);\n  }\n  mSettings.setPackageOrder(packageList);\n}\n", "    public void fireChartDataModelChangedEvent(Object src) {\n        ChartDataModelEvent e = new ChartDataModelEvent(src);\n        Object[] ls = listener.getListenerList();\n        for (int i = (ls.length - 2); i >= 0; i-=2) {\n            if (ls[i] == ChartDataModelListener.class) {\n                ((ChartDataModelListener)ls[i + 1]).chartDataChanged(e);\n            }\n        }\n    }\n", "public void addField(FieldRef fref){\n  mFieldRefs.add(fref);\n}\n", "private int colToLoc ( int col , Vector < MappingPair > vec ) { int loc = col ; for ( int i = NUM_ ; ( i < vec . size ( ) ) && ( vec . elementAt ( i ) . col <= col ) ; i ++ ) { loc = loc + vec . elementAt ( i ) . inc ; } return loc ; }", "public void serviceName_modem_portMappings_name_PUT(String serviceName, String name, OvhPortMapping body) throws IOException {\n\t\tString qPath = \"/xdsl/{serviceName}/modem/portMappings/{name}\";\n\t\tStringBuilder sb = path(qPath, serviceName, name);\n\t\texec(qPath, \"PUT\", sb.toString(), body);\n\t}", "\tpublic IDatabaseTableIndexBuilder indexConstraint(EDBIndexConstrains constraint){\n\t\tthis.indexConstrains=constraint;\n\t\treturn this;\n\t}\n", "public int indexOf(final String str,int startIndex){\n  startIndex=(startIndex < 0 ? 0 : startIndex);\n  if (str == null || startIndex >= size) {\n    return -1;\n  }\n  final int strLen=str.length();\n  if (strLen == 1) {\n    return indexOf(str.charAt(0),startIndex);\n  }\n  if (strLen == 0) {\n    return startIndex;\n  }\n  if (strLen > size) {\n    return -1;\n  }\n  final char[] thisBuf=buffer;\n  final int len=size - strLen + 1;\n  outer:   for (int i=startIndex; i < len; i++) {\n    for (int j=0; j < strLen; j++) {\n      if (str.charAt(j) != thisBuf[i + j]) {\n        continue outer;\n      }\n    }\n    return i;\n  }\n  return -1;\n}\n", "public void setQualificationRequirements(java.util.Collection<QualificationRequirement> qualificationRequirements) {\n        if (qualificationRequirements == null) {\n            this.qualificationRequirements = null;\n            return;\n        }\n\n        this.qualificationRequirements = new java.util.ArrayList<QualificationRequirement>(qualificationRequirements);\n    }", "public static Text createText ( Composite parent , int style , int hspan ) { Text t = new Text ( parent , style ) ; t . setFont ( parent . getFont ( ) ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = hspan ; t . setLay", "public void testParseSetMixedCase ( ) throws Exception { String values [ ] = new String [ NUM_ ] ; values [ NUM_ ] = STR_ ; values [ NUM_ ] = STR_ ; values [ NUM_ ] = STR_ ; values [ NUM_ ] = STR_ ; String [ ] setDefinition = new String [ NUM_ ] ; setDefinition [ NUM_ ] = STR_ + values [ NUM_ ] + STR_ + values [ NUM_ ] + STR_ + values [ NUM_ ] + STR_ + values [ NUM_ ] + STR_ ; setDefinition [ NUM_ ] = STR_ + values [ NUM_ ] + STR_ + values [ NUM_ ] + STR_ + values [ NUM_ ] + STR_ + values [ NUM_ ] + STR_ ; for ( int i = NUM_ ; i < NUM_ ; i ++ ) { String [ ] elements = SetToStringFilter . parseSet ( setDefinition [ i ] ) ; for ( int v = NUM_ ; v < values . length ; v ++ ) Assert . assertEquals ( errorMsgMismatch , values [ v ] , elements [ v ] ) ; } }", "public void find ( int identifier , String searchText , boolean forward , boolean matchCase , boolean findNext ) ;", "private void releaseEdgeGlow ( ) { if ( mEdgeGlowLeft != null ) { mEdgeGlowLeft . onRelease ( ) ; } if ( mEdgeGlowRight != null ) { mEdgeGlowRight . onRelease ( ) ; } }", "public SocketHandler(Socket sock,Server s) throws IOException {\n  super();\n  _input=sock.getInputStream();\n  _output=sock.getOutputStream();\n  _socket=sock;\n  _server=s;\n  setup(this,_input);\n}\n", "public static ReilInstruction createAnd ( final Address address , final ReilOperand firstOperand , final ReilOperand secondOperand , final ReilOperand thirdOperand ) { return new ReilInstruction ( address , ReilMnemonics . AND , firstOperand , secondOpera", "public void addIgnoredView ( View v ) { ignoredViews . add ( v ) ; }", "    public int findLastSpace(String s) {\n        for (int i = s.length() - 1; i > 0; i--)\n            if ((s.substring(i - 1, i)).equals(\" \"))\n                return i - 1;\n        return 0;\n    }\n", "public synchronized void processResponse ( StunResponseEvent response ) { collectedResponse = ( Response ) response . getMessage ( ) ; logger . finest ( STR_ ) ; notifyAll ( ) ; }", "public int purge(){\n  if (capacity >= 0) {\n    int start=size();\n    Object[] cache=messageCache.toArray();\n    for (int i=start - 1; i >= capacity; i--) {\n      messageCache.remove((IMessage)cache[i]);\n    }\n    return start - size();\n  }\n  return 0;\n}\n", "public double convert(double time, TimeUnit from, TimeUnit to) {\n        return time * factorOf(to) / factorOf(from);\n    }", "public static MethodNode generateSetter ( String methodName , String fieldName , String className , String fieldDesc ) { MethodNode methodNode = new MethodNode ( ACC_PUBLIC , methodName , STR_ + fieldDesc + STR_ , null , null ) ; methodNode . instructions", "    public void openStream() throws IOException {\n    \tconnection.packetReader.addPacketListener(StanzaType.features, new FeaturesStanzaEvent());\n    \tStringBuilder stream = new StringBuilder();\n        stream.append(\"<stream:stream\");\n        stream.appe", "  private void show3DError() {\n    ResourceBundle resource = ResourceBundle.getBundle(SweetHome3D.class.getName());\n    String message = resource.getString(\"3DError.message\");\n    String title = resource.getString(\"3DError.title\");\n    JOptionPane.showMessageDialog(null, message, title, JOptionPane.ERROR_MESSAGE);\n  }\n", "IntegerKey(int val){\n  this.val=val;\n  this.affinity=val;\n}\n", "private String entryAnnotationString(LocalList.Entry e){\n  StringBuilder sb=new StringBuilder();\n  sb.append(RegisterSpec.PREFIX);\n  sb.append(e.getRegister());\n  sb.append(' ');\n  CstString name=e.getName();\n  if (name == null) {\n    sb.append(\"null\");\n  }\n else {\n    sb.append(name.toHuman());\n  }\n  sb.append(' ');\n  CstType type=e.getType();\n  if (type == null) {\n    sb.append(\"null\");\n  }\n else {\n    sb.append(type.toHuman());\n  }\n  CstString signature=e.getSignature();\n  if (signature != null) {\n    sb.append(' ');\n    sb.append(signature.toHuman());\n  }\n  return sb.toString();\n}\n", "protected IndexSearcher retrieveIndexSearcher(String virtualWiki) throws IOException {\n\t\tIndexSearcher searcher = searchers.get(virtualWiki);\n\t\tif (searcher == null) {\n\t\t\tsearcher = new IndexSearcher(this.retrieveIndexWriter(virtualWiki, false).getReader", "private List < Supplier < Pair < Integer , JsonNode > > > handleActions ( PatchRequestScope requestScope ) { return actions . stream ( ) . map ( null ) . collect ( Collectors . toList ( ) ) ; }", "public void paint ( Graphics2D g ) { g . setRenderingHint ( RenderingHints . KEY_ANTIALIASING , RenderingHints . VALUE_ANTIALIAS_ON ) ; origAlpha = NUM_ ; Composite origComposite = g . getComposite ( ) ; if ( origComposite instanceof AlphaComposite ) { Al", "public static String cleanupEscapedCharForXML(char escapedChar,String toClean){\n  if (toClean == null || toClean.indexOf(escapedChar) == -1 || toClean.indexOf('\\\\') == -1) {\n    return toClean;\n  }\n  StringBuilder buf=new StringBuilder(toClean.length());", "CompletableFuture<Void> removeEntities(String scope, String stream, Collection<Long> entities) {\n        Set<Integer> collections = entities.stream().collect(Collectors.groupingBy(x -> new Position(x).collectionNumber)).keySet();\n        return Futures.allOf(entities.stream()\n                                     .map(entity -> storeHelper.deletePath(getEntityPath(scope, stream, entity), false))\n                                     .collect(Collectors.toList()))\n                      .thenCompose(v -> Futures.allOf(\n                              collections.stream().map(collectionNum -> isSealed(scope, stream, collectionNum)\n                                      .thenCompose(sealed -> {\n                                          if (sealed) {\n                                              return tryDeleteSealedCollection(scope, stream, collectionNum);\n                                          } else {\n                                              return CompletableFuture.completedFuture(null);\n                                          }\n                                      })).collect(Collectors.toList())))\n                      .whenComplete((r, e) -> {\n                          if (e != null) {\n                              log.error(\"error encountered while trying to remove entity positions {} for stream {}/{}\", entities, scope, stream, e);\n                          } else {\n                              log.debug(\"entities at positions {} removed for stream {}/{}\", entities, scope, stream);\n                          }\n                      });\n    }", "public void harvest(RtpPortManager portManager) throws HarvestException, NoCandidatesGatheredException {\n\t\t// Initialize the selector if necessary\n\t\tif (this.selector == null || !this.selector.isOpen()) {\n\t\t\ttry {\n\t\t\t\tthis.selector = Selector.open();\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new HarvestException(\"Could not initialize selector\", e);\n\t\t\t}\n\t\t}\n\n\t\t// Gather candidates for each media stream\n\t\tfor (IceMediaStream mediaStream : getMediaStreams()) {\n\t\t\tthis.harvestManager.harvest(mediaStream, portManager, this.selector);\n\t\t}\n\t}", "void finishedRedo ( ) ;", "public static MetaFieldInfo[] toMetaFieldInfoArray(Class type, Object obj, String stringForNullValues, boolean ignoreAnnotatedName, boolean recursive) {\n        return internalToMetaFieldInfoArray(type, obj, null, null, stringForNullValues, ignoreAnnotate", "public boolean valid ( ) { return line > NUM_ && column > NUM_ ; }", "private void searchAll ( final List < NaviNode > nodes , final List < NaviEdge > edges , final String searchString ) { for ( final NaviNode node : nodes ) { searchNode ( node , searchString ) ; } for ( final NaviEdge edge : edges ) { searchEdge ( edge , s", "public Observable<ServiceResponse<ImagePrediction>> predictImageUrlWithNoStoreWithServiceResponseAsync(UUID projectId, PredictImageUrlWithNoStoreOptionalParameter predictImageUrlWithNoStoreOptionalParameter) {\n        if (projectId == null) {\n            throw new IllegalArgumentException(\"Parameter projectId is required and cannot be null.\");\n        }\n        if (this.client.apiKey() == null) {\n            throw new IllegalArgumentException(\"Parameter this.client.apiKey() is required and cannot be null.\");\n        }\n        final UUID iterationId = predictImageUrlWithNoStoreOptionalParameter != null ? predictImageUrlWithNoStoreOptionalParameter.iterationId() : null;\n        final String application = predictImageUrlWithNoStoreOptionalParameter != null ? predictImageUrlWithNoStoreOptionalParameter.application() : null;\n        final String url = predictImageUrlWithNoStoreOptionalParameter != null ? predictImageUrlWithNoStoreOptionalParameter.url() : null;\n\n        return predictImageUrlWithNoStoreWithServiceResponseAsync(projectId, iterationId, application, url);\n    }", "private void registerHeapVariables(IR ir){\n  SSADictionary dictionary=ir.HIRInfo.dictionary;\n  for (Enumeration<BasicBlock> bbe=ir.getBasicBlocks(); bbe.hasMoreElements(); ) {\n    BasicBlock b=bbe.nextElement();\n    for (Enumeration<Instruction> e=b.forwardInstrEnumerator(); e.hasMoreElements(); ) {\n      Instruction s=e.nextElement();\n      if (s.isImplicitLoad() || s.isImplicitStore() || s.isAllocation()|| Phi.conforms(s)|| s.isPEI()|| Label.conforms(s)|| BBend.conforms(s)|| s.getOpcode() == UNINT_BEGIN_opcode || s.getOpcode() == UNINT_END_opcode) {\n        dictionary.registerInstruction(s,b);\n      }\n    }\n  }\n}\n", "    public void init() throws PortletException {\n        try {\n            InputStream xslstream = this.getPortletContext().getResourceAsStream(RssPortlet.RSS10XSL);\n            StreamSource source = new StreamSource(xslstream);\n            TransformerFactory tFactory = TransformerFactory.newInstance();\n            this.m_translet10 = tFactory.newTemplates(source);\n\n            xslstream = this.getPortletContext().getResourceAsStream(RssPortlet.RSS20XSL);\n            source = new StreamSource(xslstream);\n            tFactory = TransformerFactory.newInstance();\n            this.m_translet20 = tFactory.newTemplates(source);\n        }\n        catch (Exception e) {\n            String es = \"Error init translets\";\n            log.error(es, e);\n            throw new PortletException(es, e);\n        }\n    }\n", "@Override\n    public DescribeDBClusterEndpointsResult describeDBClusterEndpoints(DescribeDBClusterEndpointsRequest request) {\n        request = beforeClientExecution(request);\n        return executeDescribeDBClusterEndpoints(request);\n    }", "\tpublic int decreaseJob() {\n\t\treturn --numJobs;\n\t}\n", "public static final SyslogIF getInstance(String protocol) throws SyslogRuntimeException {\r\n        String _protocol = protocol.toLowerCase();\r\n\r\n        if (instances.containsKey(_protocol)) {\r\n            return (SyslogIF) instances.get(_protocol);\r\n\r\n        } else {\r\n            StringBuffer message = new StringBuffer(\"Syslog protocol \\\"\" + protocol + \"\\\" not defined; call Syslogger.createSyslogInstance(protocol,config) first\");\r\n\r\n            if (instances.size() > 0) {\r\n                message.append(\" or use one of the following instances: \");\r\n\r\n                Iterator i = instances.keySet().iterator();\r\n                while (i.hasNext()) {\r\n                    String k = (String) i.next();\r\n\r\n                    message.append(k);\r\n                    if (i.hasNext()) {\r\n                        message.append(' ');\r\n                    }\r\n                }\r\n            }\r\n\r\n            throwRuntimeException(message.toString());\r\n            return null;\r\n        }\r\n    }", "ReplicationChannelDataFilterResult filterBeforeReplicatingData ( IReplicationPacketData < ? > data , PlatformLogicalVersion targetLogicalVersion , Logger contextLogger ) ;", "public static boolean[] join(boolean[] arrayA,boolean... arrayB){\n  if ((arrayB == null) || (arrayB.length == 0)) {\n    return arrayA;\n  }\n  if ((arrayA == null) || (arrayA.length == 0)) {\n    return arrayB;\n  }\n  boolean[] array=new boolean[arrayA.length + arrayB.length];\n  System.arraycopy(arrayA,0,array,0,arrayA.length);\n  System.arraycopy(arrayB,0,array,arrayA.length,arrayB.length);\n  return array;\n}\n", "public static Color fadeToColor(Color source,Color target,float ratio){\n  int r=(int)((1 - ratio) * source.getRed() + ratio * target.getRed());\n  int g=(int)((1 - ratio) * source.getGreen() + ratio * target.getGreen());\n  int b=(int)((1 - ratio) * source.getBlue() + ratio * target.getBlue());\n  int a=(int)((1 - ratio) * source.getAlpha() + ratio * target.getAlpha());\n  return new Color(r,g,b,a);\n}\n", "    public boolean isOnDictionary(String word) {\n        if (arrayList.contains(word)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public static int countTrueElements(boolean[] arra) {\n\n        int count = 0;\n\n        for (int i = 0; i < arra.length; i++) {\n            if (arra[i]) {\n                count++;\n            }\n        }\n\n        return count;\n    }", "@SuppressWarnings({\"unchecked\"})\n\tpublic L add(N newChild, Kind newChildKind) {\n\t\tgetAst().setChanged();\n\t\tL n = getAst().buildTree(newChild, newChildKind);\n\t\tif (n == null) return null;\n\t\tn.parent = (L) this;\n\t\tchildren = children.append(n);\n\t\treturn n;\n\t}", "    private void refreshIfNeeded() {\n        if (refreshNeeded) {\n            calculateSubTypeMap();\n            calculateSuperTypeMap();\n        }\n        refreshNeeded = false;\n    }\n", "    public Node matchingSon(Item item) {\n\tif (item == null)\n\t    throw new IllegalArgumentException(\"Invalid 'null' argument\");\n\n\tDecisionTree tree = tree();\n\n\tif (tree == null) \n\t    throw new CannotCallMethodException(\"The node is not attached to \" +\n\t\t\t\t\t\t\"a tree\");\n\t\n\treturn matchingSon(item.valueOf(tree.getAttributeSet(),\n\t\t\t\t\ttest.attribute));\n    }\n", "void dispose ( ) ;", "public final AlertPolicy updateAlertPolicy(FieldMask updateMask, AlertPolicy alertPolicy) {\n\n    UpdateAlertPolicyRequest request =\n        UpdateAlertPolicyRequest.newBuilder()\n            .setUpdateMask(updateMask)\n            .setAlertPolicy(alertPolicy)\n            .build();\n    return updateAlertPolicy(request);\n  }", "public static Button createRadioButton ( Composite parent , String label , int hspan ) { Button button = new Button ( parent , SWT . RADIO ) ; button . setFont ( parent . getFont ( ) ) ; if ( label != null ) { button . setText ( label ) ; } GridData gd = ", "protected void storeComponentState(Component c,Hashtable destination){\n  if (shouldAutoStoreState()) {\n    storeComponentStateImpl(c,destination);\n  }\n}\n", "  private void loadLoggingConfig(URL loggingConfig) {\n\n    // validate the loggingConfig parameter\n    if (loggingConfig == null) {\n\n      throw new IllegalArgumentException(\"Null \\\"loggingConfig\\\" parameter\");\n    }\n\n    // end if\n    // configure the lo", "private void reverseTransactions ( ArrayList < DataStore > restoreList , Throwable cause ) { for ( DataStore dataStore : restoreList ) { try ( DataStoreTransaction transaction = dataStore . beginTransaction ( ) ) { List < Object > list = dirtyObjects . get ( dataStore ) ; for ( Object dirtyObject : list == null ? Collections . emptyList ( ) : list ) { Object cloned = clonedObjects . get ( dirtyObject ) ; if ( cloned == NEWLY_CREATED_OBJECT ) { transaction . delete ( dirtyObject ) ; } else { transaction . save ( cloned ) ; } } transaction . commit ( ) ; } catch ( RuntimeException | IOException e ) { cause . addSuppressed ( e ) ; } } }", "private void applyQueryHints(final AST2BOpContext context,final QueryRoot queryRoot,final QueryHintScope scope,final ASTBase t,final Properties queryHints){\n  @SuppressWarnings(\"rawtypes\") final Enumeration e=queryHints.propertyNames();\n  while (e.hasMoreElements()) {\n    final String name=(String)e.nextElement();\n    final String value=queryHints.getProperty(name);\n    _applyQueryHint(context,queryRoot,scope,t,name,value);\n  }\n}\n", "\tpublic Chessman generateFromIndex (PawnMoveCode index, ChessColor size) {\n\t\tswitch (index) {\n\t\t\tcase TOBISHOP   : return   Bishop.getFigureOfSameColor(size);\n\t\t\tcase TOKNIGHT   : return   Knight.getFigureOfSameColor(size);\n\t\t\tcase TOQUEEN    : return    Queen.getFigureOfSameColor(size);\n\t\t\tcase TOROOK     : return     Rook.getFigureOfSameColor(size);\n\t\t\tdefault         : return    Queen.getFigureOfSameColor(size);\n\t\t}\n\t}\n", "public OvhOfferTask billingAccount_service_serviceName_offerTask_taskId_GET(String billingAccount, String serviceName, Long taskId) throws IOException {\n\t\tString qPath = \"/telephony/{billingAccount}/service/{serviceName}/offerTask/{taskId}\";\n\t\tStringBuilder sb = path(qPath, billingAccount, serviceName, taskId);\n\t\tString resp = exec(qPath, \"GET\", sb.toString(), null);\n\t\treturn convertTo(resp, OvhOfferTask.class);\n\t}", "public static < T > Response < T > ok ( T value ) { return new Impl < > ( NUM_ , value ) ; }", "void delete ( INaviModule module ) throws CouldntDeleteException ;", "default void onLiveProcessingStarted ( CatchUpSubscription subscription ) { }", "\tpublic void move(long delta) {\n\t\t// proceed with normal move\n\t\tsuper.move(delta);\n\n\t\t// if we shot off the screen, remove ourselfs\n\t\tif (y < TOP_BORDER) {\n\t\t\tgame.removeEntity(this);\n\t\t}\n\t}\n", "public BreakpointCondition ( final String condition , final ConditionNode root ) { this . condition = condition ; this . root = root ; }", "public String encrypt(String input){\n  if (input == null || input.length() == 0) {\n    return input;\n  }\n  byte[] inputBytes=input.getBytes(UTF_8);\n  byte[] outputBytes=encrypt(inputBytes);\n  return new String(outputBytes,UTF_8);\n}\n", "public synchronized void addThresholdDataListener(ThresholdDataListener cl){\n  m_thresholdListeners.addElement(cl);\n}", "public static <T> T decode(String string, Class<T> targetType) {\n        Type type = typeOf(targetType);\n        return type.decode(string, targetType);\n    }", "    public void setMin(String value) throws RuntimeException {\n        StringSTAttribute att = null;\n        if (_att_min == null) {\n            _att_min = (StringSTAttribute) attributeFactory.getAttribute(\"min\", \"length\");\n            if (_att_min == null) {\n                throw new RuntimeException(\"BUG: cannot process attributeGroupName : min probably incompatible attributeGroupName and attributeName\");\n            }\n        }\n        att = new StringSTAttribute(_att_min);\n        super.addRemove(att, value);\n    }\n", "public Observable<RoleAssignmentInner> getByIdAsync(String roleAssignmentId) {\n        return getByIdWithServiceResponseAsync(roleAssignmentId).map(new Func1<ServiceResponse<RoleAssignmentInner>, RoleAssignmentInner>() {\n            @Override\n            public RoleAssignmentInner call(ServiceResponse<RoleAssignmentInner> response) {\n                return response.body();\n            }\n        });\n    }", "\tpublic void recycle(Object source, int id, GlyphI glyph)  {\n\t\tthis.source = source;\n\t\tthis.id = id;\n\t\tdragged_glyph = glyph;\n\t}\n", "public DetachParser ( final ClientReader clientReader ) { super ( clientReader , DebugCommandType . RESP_DETACH_SUCCESS ) ; }", "    public int printWSDL2(OutputStream out, String requestIP, String wsdl) \n        throws IOException, AxisFault {    \n        // a name is present - try to pump the requested wsdl file\n        if (!\"\".equals(wsdl)) {\n            // make sure we are only serving .wsdl files and ignore requests with\n            // \"..\" in the name.\n            if (wsdl.endsWith(\".wsdl\") && wsdl.indexOf(\"..\") == -1) {\n                InputStream in = getClassLoader().getResourceAsStream(\n                                    DeploymentConstants.META_INF + \"/\" + wsdl);\n                if (in != null) {\n                    IOUtils.copy(in, out, true);\n                } else {\n                    // can't find the wsdl\n                    return -1;\n                }\n            } else {\n                // bad wsdl2 request\n                return -1;\n            }\n        } else {\n            printWSDL2(out, requestIP);\n        }\n        \n        return 1;\n    }\n", "    public DComplexMatrix2D composeDiagonal(DComplexMatrix2D A, DComplexMatrix2D B) {\n        int ar = A.rows();\n        int ac = A.columns();\n        int br = B.rows();\n        int bc = B.columns();\n        DComplexMatrix2D sum = make(ar + br, ac + bc);\n        sum.viewPart(0, 0, ar, ac).assign(A);\n        sum.viewPart(ar, ac, br, bc).assign(B);\n        return sum;\n    }\n", "public T delayY ( final float ... transitions ) { getDelayedProcessor ( ) . addProcess ( Y , transitions ) ; return self ( ) ; }", "public void marshall(ListPolicyAttachmentsRequest listPolicyAttachmentsRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (listPolicyAttachmentsRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(listPolicyAttachmentsRequest.getDirectoryArn(), DIRECTORYARN_BINDING);\n            protocolMarshaller.marshall(listPolicyAttachmentsRequest.getPolicyReference(), POLICYREFERENCE_BINDING);\n            protocolMarshaller.marshall(listPolicyAttachmentsRequest.getNextToken(), NEXTTOKEN_BINDING);\n            protocolMarshaller.marshall(listPolicyAttachmentsRequest.getMaxResults(), MAXRESULTS_BINDING);\n            protocolMarshaller.marshall(listPolicyAttachmentsRequest.getConsistencyLevel(), CONSISTENCYLEVEL_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "void maybeAddExport ( Node exportsName ) { if ( isGoogModule ) { maybeAddGoogExport ( exportsName ) ; } else { maybeAddProvidesExport ( exportsName ) ; } }", "boolean doCommandDeviceNewConfigureLocal ( String deviceSsid , WifiCipherType deviceWifiCipherType , String devicePassword , String apSsid , WifiCipherType apWifiCipherType , String apPassword , String randomToken ) ;", "void addPendingOnViewReadyActions ( Runnable runnable ) { delegateFragment . pendingOnViewReadyActions . add ( runnable ) ; }", "@Override public double valueToJava2D(double value,Rectangle2D plotArea,RectangleEdge edge){\n  Range range=getRange();\n  double axisMin=switchedLog10(range.getLowerBound());\n  double axisMax=switchedLog10(range.getUpperBound());\n  double min=0.0;\n  double max=0.0;\n  if (RectangleEdge.isTopOrBottom(edge)) {\n    min=plotArea.getMinX();\n    max=plotArea.getMaxX();\n  }\n else   if (RectangleEdge.isLeftOrRight(edge)) {\n    min=plotArea.getMaxY();\n    max=plotArea.getMinY();\n  }\n  value=switchedLog10(value);\n  if (isInverted()) {\n    return max - (((value - axisMin) / (axisMax - axisMin)) * (max - min));\n  }\n else {\n    return min + (((value - axisMin) / (axisMax - axisMin)) * (max - min));\n  }\n}\n", "public void peerFound(RemotePeer server) {\n\t\tservers.addElement(server);\n\t\tappendItem(server.getFriendlyName(), ConnectorCanvasItem.SELECTABLE);\n\t}", "public void undo ( ) { for ( final ISelectionHistoryListener listener : m_listeners ) { try { listener . startedUndo ( ) ; } catch ( final Exception exception ) { CUtilityFunctions . logException ( exception ) ; } } m_graph . selectNodes ( m_graph . getSe", "public synchronized void schedule(@NonNull JobRequest request) {\n        // call must be synchronized, otherwise with isUpdateCurrent() true it's possible to end up in a race condition with multiple jobs scheduled\n\n        if (mJobCreatorHolder.isEmpty()) {\n            CAT.w(\"you haven't registered a JobCreator with addJobCreator(), it's likely that your job never will be executed\");\n        }\n\n        if (request.getScheduledAt() > 0) {\n            return;\n        }\n\n        if (request.isUpdateCurrent()) {\n            cancelAllForTag(request.getTag());\n        }\n\n        JobProxy.Common.cleanUpOrphanedJob(mContext, request.getJobId());\n\n        JobApi jobApi = request.getJobApi();\n        boolean periodic = request.isPeriodic();\n        boolean flexSupport = periodic && jobApi.isFlexSupport() && request.getFlexMs() < request.getIntervalMs();\n\n        request.setScheduledAt(JobConfig.getClock().currentTimeMillis());\n        request.setFlexSupport(flexSupport);\n        getJobStorage().put(request);\n\n        try {\n            scheduleWithApi(request, jobApi, periodic, flexSupport);\n            return;\n        } catch (JobProxyIllegalStateException e) {\n            // try again below, the other cases stop\n\n        } catch (Exception e) {\n            // if something fails, don't keep the job in the database, it would be rescheduled later\n            getJobStorage().remove(request);\n            throw e;\n        }\n\n        try {\n            // try to reload the proxy\n            jobApi.invalidateCachedProxy();\n\n            scheduleWithApi(request, jobApi, periodic, flexSupport);\n            return;\n        } catch (Exception e) {\n            if (jobApi == JobApi.V_14 || jobApi == JobApi.V_19) {\n                // at this stage we cannot do anything\n                getJobStorage().remove(request);\n                throw e;\n            } else {\n                jobApi = JobApi.V_19.isSupported(mContext) ? JobApi.V_19 : JobApi.V_14; // try one last time\n            }\n        }\n\n        try {\n            scheduleWithApi(request, jobApi, periodic, flexSupport);\n        } catch (Exception e) {\n            // if something fails, don't keep the job in the database, it would be rescheduled later\n            getJobStorage().remove(request);\n            throw e;\n        }\n    }", "  public String _LAUNCHING_ROM(String romName) {\n    return \"Maje sta lanciando la rom \".concat(romName).concat(\".\");\n  };\n", "public static GeoPoint calculateCenter(List<GeoPoint> geoPoints) {\n        checkNotNull(geoPoints, \"geoPoints cannot be null\");\n        checkArgument(geoPoints.size() > 0, \"must have at least 1 geoPoints\");\n        if (geoPoints.size() == 1) {\n           ", "protected void initMaxPings(){\n  String maxPingsParam=getInitParameter(\"maxPings\");\n  setMaxPings((maxPingsParam == null) ? DEFAULT_MAX_PINGS : Integer.parseInt(maxPingsParam));\n  if (isDebug()) {\n    log(\"maxPings: \" + getMaxPings());\n  }\n}\n", "\tpublic double compute(double a, double b) {\n\t\tif (a <= b)\n\t\t\treturn AlgoIntegralDefinite.adaptiveGaussQuad(arcLengthFunction, a, b);\n\t\telse\n\t\t\treturn AlgoIntegralDefinite.adaptiveGaussQuad(arcLengthFunction, 0, Kernel.PI_2)\n\t\t\t\t - AlgoIntegralDefinite.adaptiveGaussQuad(arcLengthFunction, b, a);\n\t\t\n\t}\n", "private final ByteBuffer advance() {\r\n    if (position == 0) {\r\n      return null;\r\n    }\r\n\r\n    while (position > 0) {\r\n      final int lastIndex = position - 1;\r\n      final int arc = arcs[lastIndex];\r\n\r\n      if (arc == 0) {\r\n        // Remove the current node from the queue.\r\n        position--;\r\n        continue;\r\n      }\r\n\r\n      // Go to the next arc, but leave it on the stack\r\n      // so that we keep the recursion depth level accurate.\r\n      arcs[lastIndex] = fsa.getNextArc(arc);\r\n\r\n      // Expand buffer if needed.\r\n      final int bufferLength = this.buffer.length;\r\n      if (lastIndex >= bufferLength) {\r\n        this.buffer = Arrays.copyOf(buffer, bufferLength + EXPECTED_MAX_STATES);\r\n        this.bufferWrapper = ByteBuffer.wrap(buffer);\r\n      }\r\n      buffer[lastIndex] = fsa.getArcLabel(arc);\r\n\r\n      if (!fsa.isArcTerminal(arc)) {\r\n        // Recursively descend into the arc's node.\r\n        pushNode(fsa.getEndNode(arc));\r\n      }\r\n\r\n      if (fsa.isArcFinal(arc)) {\r\n        bufferWrapper.clear();\r\n        bufferWrapper.limit(lastIndex + 1);\r\n        return bufferWrapper;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }", "void createProject(final IProjectDescription description,final IProject proj,final IProgressMonitor monitor) throws CoreException, OperationCanceledException {\n  try {\n    monitor.beginTask(\"\",2000);\n    proj.create(description,new SubProgressMonitor(monitor,1000));\n    if (monitor.isCanceled()) {\n      throw new OperationCanceledException();\n    }\n    proj.open(new SubProgressMonitor(monitor,1000));\n    WorkspaceModelsManager.setValuesProjectDescription(proj,false,false,null);\n    final IContainer container=proj;\n    final IFolder libFolder=container.getFolder(new Path(\"doc\"));\n    libFolder.create(true,true,monitor);\n    final IFolder snapshotsFolder=libFolder.getFolder(new Path(\"snapshots\"));\n    snapshotsFolder.create(true,true,monitor);\n    final IFolder modelFolder=container.getFolder(new Path(\"models\"));\n    modelFolder.create(true,true,monitor);\n    final IFolder incFolder=container.getFolder(new Path(\"includes\"));\n    incFolder.create(true,true,monitor);\n    final IFolder imFolder=container.getFolder(new Path(\"images\"));\n    imFolder.create(true,true,monitor);\n  }\n catch (  final CoreException ioe) {\n    final IStatus status=new Status(IStatus.ERROR,\"ProjectWizard\",IStatus.OK,ioe.getLocalizedMessage(),null);\n    throw new CoreException(status);\n  }\n finally {\n    monitor.done();\n  }\n}\n", "private void takePicture(){\n  Log.d(TAG,\"takePicture: \");\n  lockFocus();\n}\n", "    public void setErrorMessage(String errorMessage) {\n    \tthis.errorMessage = errorMessage;\n    \tif (errorMessageText != null && !errorMessageText.isDisposed()) {\n    \t\terrorMessageText.setText(errorMessage == null ? \"\" : errorMessage); //$NON-NLS-1$\n    \t\terrorMessageText.getParent().update();\n    \t\tControl button = getButton(IDialogConstants.OK_ID);\n    \t\tif (button != null) {\n    \t\t\tbutton.setEnabled(errorMessage == null);\n    \t\t}\n    \t}\n    }\n", "    private void autoRefreshStaleMailbox() {\n        if (!mCanAutoRefresh\n                || (mListAdapter.getCursor() == null) // Check if messages info is loaded\n                || (mPushModeMailbox != null && mPushModeMailbox) // Check the push mode\n                || (mMailboxId < 0)) { // Check if this mailbox is synthetic/combined\n            return;\n        }\n        mCanAutoRefresh = false;\n        if (!Email.mailboxRequiresRefresh(mMailboxId)) {\n            return;\n        }\n        onRefresh();\n    }\n", "public void start ( ) { boolean captured = lock . tryLock ( ) ; try { Log . d ( MP_TAG , STR_ ) ; if ( invalidServiceConnectionConfiguration ( ) ) { setupMpi ( this . mpi . mContext ) ; } this . state = State . STARTED ; Log . d ( MP_TAG , STR_ ) ; this .", "public static UserAgent valueOf(String name){\n  if (name == null)   throw new NullPointerException(\"Name is null\");\n  String[] elements=name.split(\"-\");\n  if (elements.length == 2) {\n    OperatingSystem operatingSystem=OperatingSystem.valueOf(elements[0]);\n    Browser browser=Browser.valueOf(elements[1]);\n    return new UserAgent(operatingSystem,browser);\n  }\n  throw new IllegalArgumentException(\"Invalid string for userAgent \" + name);\n}\n", "    public boolean isDuplicateParentStateEnabled() {\n        return (mViewFlags & DUPLICATE_PARENT_STATE) == DUPLICATE_PARENT_STATE;\n    }\n", "@Override\n\tpublic List<CPOption> getCPOptionsByUuidAndCompanyId(String uuid,\n\t\tlong companyId, int start, int end,\n\t\tOrderByComparator<CPOption> orderByComparator) {\n\t\treturn cpOptionPersistence.findByUuid_C(uuid, companyId, start, end,\n\t\t\torderByComparator);\n\t}", "public OneLoginResponse<Long> getRolesAssignedToPrivilegesBatch(String id, int batchSize, String afterCursor)\n\t\t\tthrows OAuthSystemException, OAuthProblemException, URISyntaxException {\n\t\tExtractionContext context = extractResourceBatch((Object)id, batchSize, afterCursor, Constants.GET_ROLES_ASSIGNED_TO_PRIVILEGE_URL);\n\t\tList<Long> roleIds = new ArrayList<Long>(batchSize);\n\t\tafterCursor = getRolesAssignedToPrivilegesBatch(roleIds, context.url, context.bearerRequest, context.oAuth2Response);\n\t\treturn new OneLoginResponse<Long>(roleIds, afterCursor);\n\t}", "public static Data manufactureData(Header hdr) throws FitsException {\n  return new AsciiTable(hdr);\n}\n", "    public boolean equals(XMLLoader other) {\n        return this.recordIdentifier.equals(other.recordIdentifier);\n    }\n", "@NonNull @Contract(pure=true) private <Output>ChronosOperationResult<Output> createEmptyResult(@NonNull final ChronosOperation<Output> operation,final boolean broadcastResult){\n  final ChronosOperationResult<Output> operationResult;\n  final Class<? extends ChronosOperationResult<Output>> resultClass=operation.getResultClass();\n  try {\n    operationResult=resultClass.newInstance();\n  }\n catch (  InstantiationException e) {\n    throw new RuntimeException(\"Can't create a new instance of \" + resultClass.getName());\n  }\ncatch (  IllegalAccessException e) {\n    throw new RuntimeException(resultClass.getName() + \" constructor is not accessible\");\n  }\n  operationResult.setId(mLastOperationId.incrementAndGet());\n  operationResult.setOperation(operation);\n  operationResult.setBroadcast(broadcastResult);\n  return operationResult;\n}\n", "\tpublic MigHelper pushY() {\n\t\tcomponentConstraints.pushY();\n\t\t\n\t\treturn this;\n\t}\n", "public static void main(String args[]){\n  try {\n    String command, param;\n    int delim=QueryString.indexOf(\"=\");\n    if (delim == -1) {\n      command=QueryString;\n      param=\"\";\n    }\n else {\n      command=QueryString.substring(0,delim);\n      param=QueryString.substring(delim + 1);\n    }\n    CGICommandHandler handler=commandLookup.get(command);\n    if (handler != null)     try {\n      handler.execute(param);\n    }\n catch (    CGIClientException e) {\n      e.printStackTrace();\n      returnClientError(e.getMessage());\n    }\ncatch (    CGIServerException e) {\n      e.printStackTrace();\n      returnServerError(e.getMessage());\n    }\n else     returnClientError(\"invalid command.\");\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    returnServerError(\"internal error: \" + e.getMessage());\n  }\n  System.exit(0);\n}\n", "\t\tpublic IStatus getStatus() {\n\t\t\tIStatus[] errors = new IStatus[errorTable.size()];\n\t\t\terrorTable.toArray(errors);\n\t\t\treturn new MultiStatus(IDEWorkbenchPlugin.IDE_WORKBENCH, IStatus.OK, errors, \"\", null);\n\t\t}\n", "\tpublic void doTag() throws JspException, IOException {\n\t\t//System.out.println(\">>> LeafTag::doTag(): <\"+this.getJspTagName()+\">\");\n\t\tif (!isEffective())return; //nothing to do\n\t\t\n\t\ttry {// use-class initial works...\n\t\t\t\n\t\t\tinitComponent(); //creates and registers the component\n\t\t\tdoComponentContent();// do Component Content\n\t\t\tafterComposeComponent();//finish compose the component\n\t\t\t\n\t\t} catch (Throwable e) {\n\t\t\tdoCatch(e);\n\t\t} finally {\n\t\t\tdoFinally ();\n\t\t}\n\t\t\n\t\twriteComponentMark(); //write a special mark denoting the component\n\t\t\n\t}\n", "\tprivate int getSkillForTraining (int trType) {\n\t\tswitch (trType) {\n\t\t\tcase TrainingType.GOALKEEPING:\n\t\t\t\treturn PlayerSkill.KEEPER;\n\n\t\t\tcase TrainingType.PLAYMAKING:\n\t\t\t\treturn PlayerSkill.PLAYMAKING;\n\n\t\t\tcase TrainingType.SHORT_PASSES:\n\t\t\tcase TrainingType.THROUGH_PASSES:\n\t\t\t\treturn PlayerSkill.PASSING;\n\n\t\t\tcase TrainingType.CROSSING_WINGER:\n\t\t\tcase TrainingType.WING_ATTACKS:\n\t\t\t\treturn PlayerSkill.WINGER;\n\n\t\t\tcase TrainingType.DEFENDING:\n\t\t\tcase TrainingType.DEF_POSITIONS:\n\t\t\t\treturn PlayerSkill.DEFENDING;\n\n\t\t\tcase TrainingType.SCORING:\n\t\t\tcase TrainingType.SHOOTING:\n\t\t\t\treturn PlayerSkill.SCORING;\n\n\t\t\tcase TrainingType.SET_PIECES:\n\t\t\t\treturn PlayerSkill.SET_PIECES;\n\n\t\t}\n\n\t\treturn 0;\n\t}\n", "@Override\n\tprotected Object fetchRelatedObject(RegistryEntry entry, Serializable relationId, RepositoryMethodParameterProvider parameterProvider, QueryAdapter queryAdapter) {\n\n\t\tString uid = getUID(entry, relationId);\n\t\tObject relatedResource = resourceMap.get(uid);\n\t\tif (relatedResource != null) {\n\t\t\treturn relatedResource;\n\t\t}\n\t\tResourceInformation resourceInformation = entry.getResourceInformation();\n\t\tClass<?> resourceClass = resourceInformation.getResourceClass();\n\t\treturn proxyFactory.createResourceProxy(resourceClass, relationId);\n\t}", "public void drawEmphasizedText(Graphics g,Color foreground,Color emphasis,String s,int underlinedIndex,int x,int y){\n  Graphics2D g2d=(Graphics2D)g.create();\n  g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_O", "public static void main(String[] args) throws IOException {\r\n    Timing.startTime();\r\n\r\n    StringBuilder treePrintFormats = new StringBuilder();\r\n    String printNonMatchingTreesOption = \"-v\";\r\n    String subtreeCodeOption = \"-x\";\r\n    String extractSubtreesOption = \"-extract\";\r\n    String extractSubtreesFileOption = \"-extractFile\";\r\n    String inputFileOption = \"-i\";\r\n    String headFinderOption = \"-hf\";\r\n    String headFinderArgOption = \"-hfArg\";\r\n    String trfOption = \"-trf\";\r\n    String headFinderClassName = null;\r\n    String[] headFinderArgs = StringUtils.EMPTY_STRING_ARRAY;\r\n    String treeReaderFactoryClassName = null;\r\n    String printHandleOption = \"-h\";\r\n    String markHandleOption = \"-k\";\r\n    String encodingOption = \"-encoding\";\r\n    String encoding = \"UTF-8\";\r\n    String macroOption = \"-macros\";\r\n    String macroFilename = \"\";\r\n    Map<String,Integer> flagMap = new HashMap<String,Integer>();\r\n    flagMap.put(extractSubtreesOption,2);\r\n    flagMap.put(extractSubtreesFileOption,2);\r\n    flagMap.put(subtreeCodeOption,0);\r\n    flagMap.put(printNonMatchingTreesOption,0);\r\n    flagMap.put(encodingOption,1);\r\n    flagMap.put(inputFileOption,1);\r\n    flagMap.put(printHandleOption,1);\r\n    flagMap.put(markHandleOption,2);\r\n    flagMap.put(headFinderOption,1);\r\n    flagMap.put(headFinderArgOption,1);\r\n    flagMap.put(trfOption,1);\r\n    flagMap.put(macroOption, 1);\r\n    Map<String, String[]> argsMap = StringUtils.argsToMap(args, flagMap);\r\n    args = argsMap.get(null);\r\n\r\n    if (argsMap.containsKey(encodingOption)) {\r\n      encoding = argsMap.get(encodingOption)[0];\r\n      System.err.println(\"Encoding set to \" + encoding);\r\n    }\r\n    PrintWriter errPW = new PrintWriter(new OutputStreamWriter(System.err, encoding), true);\r\n\r\n    if (argsMap.containsKey(extractSubtreesOption)) {\r\n      List<String> subTreeStrings = Collections.singletonList(argsMap.get(extractSubtreesOption)[0]);\r\n      extractSubtrees(subTreeStrings,argsMap.get(extractSubtreesOption)[1]);\r\n      return;\r\n    }\r\n    if (argsMap.containsKey(extractSubtreesFileOption)) {\r\n      List<String> subTreeStrings = Arrays.asList(IOUtils.slurpFile(argsMap.get(extractSubtreesFileOption)[0]).split(\"\\n|\\r|\\n\\r\"));\r\n      extractSubtrees(subTreeStrings,argsMap.get(extractSubtreesFileOption)[0]);\r\n      return;\r\n    }\r\n\r\n    if (args.length < 1) {\r\n      errPW.println(\"Usage: java edu.stanford.nlp.trees.tregex.TregexPattern [-T] [-C] [-w] [-f] [-o] [-n] [-s] [-filter]  [-hf class] [-trf class] [-h handle]* pattern [filepath]\");\r\n      return;\r\n    }\r\n    String matchString = args[0];\r\n\r\n    if (argsMap.containsKey(macroOption)) {\r\n      macroFilename = argsMap.get(macroOption)[0];\r\n    }\r\n    if (argsMap.containsKey(headFinderOption)) {\r\n      headFinderClassName = argsMap.get(headFinderOption)[0];\r\n      errPW.println(\"Using head finder \" + headFinderClassName + \"...\");\r\n    }\r\n    if(argsMap.containsKey(headFinderArgOption)) {\r\n      headFinderArgs = argsMap.get(headFinderArgOption);\r\n    }\r\n    if (argsMap.containsKey(trfOption)) {\r\n      treeReaderFactoryClassName = argsMap.get(trfOption)[0];\r\n      errPW.println(\"Using tree reader factory \" + treeReaderFactoryClassName + \"...\");\r\n    }\r\n    if (argsMap.containsKey(\"-T\")) {\r\n      TRegexTreeVisitor.printTree = true;\r\n    }\r\n    if (argsMap.containsKey(inputFileOption)) {\r\n      String inputFile = argsMap.get(inputFileOption)[0];\r\n      matchString = IOUtils.slurpFile(inputFile, encoding);\r\n      String[] newArgs = new String[args.length+1];\r\n      System.arraycopy(args,0,newArgs,1,args.length);\r\n      args = newArgs;\r\n    }\r\n    if (argsMap.containsKey(\"-C\")) {\r\n      TRegexTreeVisitor.printMatches = false;\r\n      TRegexTreeVisitor.printNumMatchesToStdOut = true ;\r\n\r\n    }\r\n    if (argsMap.containsKey(\"-v\")) {\r\n      TRegexTreeVisitor.printNonMatchingTrees = true;\r\n    }\r\n    if (argsMap.containsKey(\"-x\")) {\r\n      TRegexTreeVisitor.printSubtreeCode = true;\r\n      TRegexTreeVisitor.printMatches = false;\r\n    }\r\n    if (argsMap.containsKey(\"-w\")) {\r\n      TRegexTreeVisitor.printWholeTree = true;\r\n    }\r\n    if (argsMap.containsKey(\"-f\")) {\r\n      TRegexTreeVisitor.printFilename = true;\r\n    }\r\n    if(argsMap.containsKey(\"-o\"))\r\n      TRegexTreeVisitor.oneMatchPerRootNode = true;\r\n    if(argsMap.containsKey(\"-n\"))\r\n      TRegexTreeVisitor.reportTreeNumbers = true;\r\n    if (argsMap.containsKey(\"-u\")) {\r\n      treePrintFormats.append(TreePrint.rootLabelOnlyFormat).append(',');\r\n    } else if (argsMap.containsKey(\"-s\")) { // display short form\r\n      treePrintFormats.append(\"oneline,\");\r\n    } else if (argsMap.containsKey(\"-t\")) {\r\n      treePrintFormats.append(\"words,\");\r\n    } else {\r\n      treePrintFormats.append(\"penn,\");\r\n    }\r\n\r\n    HeadFinder hf = new CollinsHeadFinder();\r\n    if(headFinderClassName != null) {\r\n      Class[] hfArgClasses = new Class[headFinderArgs.length];\r\n      for(int i = 0; i < hfArgClasses.length; i++)   hfArgClasses[i] = String.class;\r\n      try {\r\n        hf = (HeadFinder) Class.forName(headFinderClassName).getConstructor(hfArgClasses).newInstance((Object[]) headFinderArgs); // cast to Object[] necessary to avoid varargs-related warning.\r\n      }\r\n      catch(Exception e) { throw new RuntimeException(\"Error occurred while constructing HeadFinder: \" + e); }\r\n    }\r\n\r\n    TRegexTreeVisitor.tp = new TreePrint(treePrintFormats.toString(), new PennTreebankLanguagePack());\r\n\r\n    try {\r\n      //TreePattern p = TreePattern.compile(\"/^S/ > S=dt $++ '' $-- ``\");\r\n      TregexPatternCompiler tpc = new TregexPatternCompiler(hf);\r\n      Macros.addAllMacros(tpc, macroFilename, encoding);\r\n      TregexPattern p = tpc.compile(matchString);\r\n      errPW.println(\"Pattern string:\\n\" + p.pattern());\r\n      errPW.println(\"Parsed representation:\");\r\n      p.prettyPrint(errPW);\r\n\r\n      String[] handles = argsMap.get(printHandleOption);\r\n      if (argsMap.containsKey(\"-filter\")) {\r\n        TreeReaderFactory trf = getTreeReaderFactory(treeReaderFactoryClassName);\r\n        treebank = new MemoryTreebank(trf, encoding);//has to be in memory since we're not storing it on disk\r\n        //read from stdin\r\n        Reader reader = new BufferedReader(new InputStreamReader(System.in, encoding));\r\n        ((MemoryTreebank) treebank).load(reader);\r\n        reader.close();\r\n      } else if (args.length == 1) {\r\n        errPW.println(\"using default tree\");\r\n        TreeReader r = new PennTreeReader(new StringReader(\"(VP (VP (VBZ Try) (NP (NP (DT this) (NN wine)) (CC and) (NP (DT these) (NNS snails)))) (PUNCT .))\"), new LabeledScoredTreeFactory(new StringLabelFactory()));\r\n        Tree t = r.readTree();\r\n        treebank = new MemoryTreebank();\r\n        treebank.add(t);\r\n      } else {\r\n        int last = args.length - 1;\r\n        errPW.println(\"Reading trees from file(s) \" + args[last]);\r\n        TreeReaderFactory trf = getTreeReaderFactory(treeReaderFactoryClassName);\r\n        treebank = new DiskTreebank(trf, encoding);\r\n        treebank.loadPath(args[last], null, true);\r\n      }\r\n      TRegexTreeVisitor vis = new TRegexTreeVisitor(p, handles, encoding);\r\n\r\n      treebank.apply(vis);\r\n      Timing.endTime();\r\n      if (TRegexTreeVisitor.printMatches) {\r\n        errPW.println(\"There were \" + vis.numMatches() + \" matches in total.\");\r\n      }\r\n      if (TRegexTreeVisitor.printNumMatchesToStdOut) {\r\n        System.out.println(vis.numMatches());\r\n      }\r\n    } catch (IOException e) {\r\n      e.printStackTrace();\r\n    } catch (TregexParseException e) {\r\n      errPW.println(\"Error parsing expression: \" + args[0]);\r\n      errPW.println(\"Parse exception: \" + e.toString());\r\n    }\r\n  }", "public void loadXml ( String fileName ) throws CoreException { if ( fileName == null ) { return ; } st = new StopTimer ( ) ; clearMarkers ( null ) ; final Project findBugsProject = new Project ( ) ; final Reporter bugReporter = new Reporter ( javaProject , findBugsProject , monitor ) ; bugReporter . setPriorityThreshold ( userPrefs . getUserDetectorThreshold ( ) ) ; reportFromXml ( fileName , findBugsProject , bugReporter ) ; updateBugCollection ( findBugsProject , bugReporter , BOOL_ ) ; monitor . done ( ) ; }", "    public void saveBizDriverFile() throws IOException {\n        saveBizDriverFile(false);\n    }\n", "@When(\"^I change active window$\")\n    public void seleniumChangeWindow() {\n        String originalWindowHandle = commonspec.getDriver().getWindowHandle();\n        Set<String> windowHandles = commonspec.getDriver().getWindowHandles();\n\n        for (String window : windowHandles) {\n            if (!window.equals(originalWindowHandle)) {\n                commonspec.getDriver().switchTo().window(window);\n            }\n        }\n\n    }", "private void doFailCgCreateStep(List<VolumeDescriptor> volumeDescriptors,CGRequestParams cgParams,URI protectionSetId,String token) throws InternalException {\n  if (VolumeDescriptor.getVirtualPoolChangeVolume(volumeDescriptors) != null) {\n    AuditBlockUtil.auditBlock(_dbClient,OperationTypeEnum.CHANGE_VOLUME_VPOOL,true,AuditLogManager.AUDITOP_END,token);\n  }\n}\n", "public ConcurrentLinkedHashMapPro(Map<? extends K,? extends V> m){\n  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL,UNLIMITED_SIZE,new FIFOPolicy());\n  putAll(m);\n}\n", "private void mergeSOSNode(Node node) throws IIOInvalidTreeException {\n  SOSMarkerSegment firstSOS=(SOSMarkerSegment)findMarkerSegment(SOSMarkerSegment.class,true);\n  SOSMarkerSegment lastSOS=(SOSMarkerSegment)findMarkerSegment(SOSMarkerSegment.class,false);\n  if (firstSOS != null) {\n    if (firstSOS != lastSOS) {\n      throw new IIOInvalidTreeException(\"Can't merge SOS node into a tree with > 1 SOS node\",node);\n    }\n    firstSOS.updateFromNativeNode(node,false);\n  }\n else {\n    markerSequence.add(new SOSMarkerSegment(node));\n  }\n}\n", "    public void resetIsModified() {\n        roleid_is_modified = false;\n        rolename_is_modified = false;\n        accesslevel_is_modified = false;\n        deleted_is_modified = false;\n    }\n", "public java.util.List<SpotFleetRequestConfig> getSpotFleetRequestConfigs() {\n        if (spotFleetRequestConfigs == null) {\n            spotFleetRequestConfigs = new com.amazonaws.internal.SdkInternalList<SpotFleetRequestConfig>();\n        }\n        return spotFleetRequestConfigs;\n    }", "public boolean isChecked ( ) { return getBaseKind ( ) == CHECKED_NULL || getBaseKind ( ) == CHECKED_NN ; }", "public static boolean checkValueIsTypeNotString ( Object value , Object name , Class type ) { if ( value != null ) { if ( type . isAssignableFrom ( value . getClass ( ) ) ) { return BOOL_ ; } else if ( value instanceof String ) { return BOOL_ ; } else { t", "  protected boolean shouldNeverLogAtStart () {\n    return false;\n  }\n", "public static DataInputStream newDataInputStream ( Path self ) throws IOException { return new DataInputStream ( Files . newInputStream ( self ) ) ; }", "private void addAttributeGroup(XsdAttributeGroup attributeGroup) {\n        String interfaceName = firstToUpper(attributeGroup.getName());\n\n        if (!attributeGroupInterfaces.containsKey(interfaceName)){\n            List<XsdAttribute> ownElements = attributeGroup.getXsdElements()\n                    .filter(attribute -> attribute.getParent().equals(attributeGroup))\n                    .map(attribute -> (XsdAttribute) attribute)\n                    .collect(Collectors.toList());\n\n            List<String> parentNames = attributeGroup.getAttributeGroups().stream().map(XsdNamedElements::getName).collect(Collectors.toList());\n            AttributeHierarchyItem attributeHierarchyItemItem = new AttributeHierarchyItem(parentNames, ownElements);\n\n            attributeGroupInterfaces.put(interfaceName, attributeHierarchyItemItem);\n\n            attributeGroup.getAttributeGroups().forEach(this::addAttributeGroup);\n        }\n    }", "public long getDurationInFrames(boolean allowDropFrameRemoval)\n\t{\n\t\tfinal long totalFrames = getFrameNumber(hours + (days * 24),\n\t\t                                        minutes,\n\t\t                                        seconds,\n\t\t                      ", "\tpublic Font getFont() {\n\t\tif (fFont == null)\n\t\t\tfFont = Fontkit.getFont(fCurrentFontName, fCurrentFontStyle & ~Font_UNDERLINED, fCurrentFontSize);\n\t\treturn fFont;\n\t}\n", "private boolean isListChildUnderClipped(float x,float y){\n  final View listChild=findListChildUnder(x,y);\n  return listChild != null && isDescendantClipped(listChild);\n}\n", "\tpublic void putDispatchRef(Dispatch in) {\n\t\tputVariantDispatch(in);\n\t}\n", "public boolean isOwnedBy(String possibleOwner) {\n        boolean retval = false;\n        if (this.owner != null) {\n            retval = (this.owner.compareTo(possibleOwner) == 0);\n        }\n        return retval;\n    }", "public void startElement(\n          String uri, String localName, String qName, Attributes attributes)\n            throws SAXException\n  {\n\n    if (!m_foundFirstElement && null != m_serializer)\n    {\n      m_foundFirstElement = true;\n\n      Serializer newSerializer;\n\n      try\n      {\n        newSerializer = SerializerSwitcher.switchSerializerIfHTML(uri,\n                localName, m_outputFormat.getProperties(), m_serializer);\n      }\n      catch (TransformerException te)\n      {\n        throw new SAXException(te);\n      }\n\n      if (newSerializer != m_serializer)\n      {\n        try\n        {\n          m_resultContentHandler = newSerializer.asContentHandler();\n        }\n        catch (IOException ioe)  // why?\n        {\n          throw new SAXException(ioe);\n        }\n\n        if (m_resultContentHandler instanceof DTDHandler)\n          m_resultDTDHandler = (DTDHandler) m_resultContentHandler;\n\n        if (m_resultContentHandler instanceof LexicalHandler)\n          m_resultLexicalHandler = (LexicalHandler) m_resultContentHandler;\n\n        m_serializer = newSerializer;\n      }\n    }\n    flushStartDoc();\n    m_resultContentHandler.startElement(uri, localName, qName, attributes);\n  }", "protected void handleStyledAttributes ( TypedArray a ) { }", "    public void associate(Attribute value, String name) {\n        associate(value, name, namespace);\n    }\n", "public static String infoText ( boolean showAll ) { return STR_ + ( showAll ? STR_ : STR_ ) + STR_ ; }", "public final AlertDialog shareText ( CharSequence text , CharSequence type ) { Intent intent = new Intent ( ) ; intent . addCategory ( Intent . CATEGORY_DEFAULT ) ; intent . setAction ( BS_PACKAGE + STR_ ) ; intent . putExtra ( STR_ , type ) ; intent . pu", "@Nullable\n  static FillOptions fromFeature(@NonNull Feature feature) {\n    if (feature.geometry() == null) {\n      throw new RuntimeException(\"geometry field is required\");\n    }\n    if (!(feature.geometry() instanceof Polygon)) {      return null;\n    }\n\n    FillOptions options = new FillOptions();\n    options.geometry = (Polygon) feature.geometry();\n    if (feature.hasProperty(PROPERTY_FILL_OPACITY)) {\n      options.fillOpacity = feature.getProperty(PROPERTY_FILL_OPACITY).getAsFloat();\n    }\n    if (feature.hasProperty(PROPERTY_FILL_COLOR)) {\n      options.fillColor = feature.getProperty(PROPERTY_FILL_COLOR).getAsString();\n    }\n    if (feature.hasProperty(PROPERTY_FILL_OUTLINE_COLOR)) {\n      options.fillOutlineColor = feature.getProperty(PROPERTY_FILL_OUTLINE_COLOR).getAsString();\n    }\n    if (feature.hasProperty(PROPERTY_FILL_PATTERN)) {\n      options.fillPattern = feature.getProperty(PROPERTY_FILL_PATTERN).getAsString();\n    }\n    if (feature.hasProperty(PROPERTY_IS_DRAGGABLE)) {\n      options.isDraggable = feature.getProperty(PROPERTY_IS_DRAGGABLE).getAsBoolean();\n    }\n    return options;\n  }", "public static Date newDate(final Date original) {\n        return original != null ? new Date(original.getTime()) : null;\n    }", "\tprotected void update(final Object obj) {\n\t\trun (\n\t\t\tnew TransactionRunnable () {\n\t\t\t\tpublic Object run (Session s) {\n\t\t\t\t\tupdate(obj, s);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\t}\n", "public QueryBuilder<T,ID> orderBy(String columnName,boolean ascending){\n  FieldType fieldType=verifyColumnName(columnName);\n  if (fieldType.isForeignCollection()) {\n    throw new IllegalArgumentException(\"Can't orderBy foreign colletion field: \" + columnName);\n  }\n  if (orderByList == null) {\n    orderByList=new ArrayList<OrderBy>();\n  }\n  orderByList.add(new OrderBy(columnName,ascending));\n  return this;\n}\n", "    public void writeThreeByteInt(int pos, int value) {\n    \tif(value<0 || value>ThreeByteInt_MAX)\n    \t\tthrow new IllegalArgumentException(\"out of range: \"+value);\n        data[pos+0] = (byte)(0xff & (value >> 16));\n        data[pos+1] = (byte)(0xff & (value >>  8));\n        data[pos+2] = (byte)(0xff & (value >>  0));\n        setDirty();\n    }\n", "public static String restoreSoftApBSSID ( String BSSID ) { String pollutedBitStr = BSSID . substring ( NUM_ , NUM_ ) ; Integer pollutedBitInt = NUM_ ; pollutedBitInt = Integer . parseInt ( pollutedBitStr , NUM_ ) ; Integer cleanBitInt = pollutedBitInt | N", "public static ULocale acceptLanguage(String acceptLanguageList, boolean[] fallback) {\n        return acceptLanguage(acceptLanguageList, ULocale.getAvailableLocales(),\n                fallback);\n    }", "\tpublic Object get(String paramName, Class<?> clazz) {\n\t\tString stringVal = getParamValue(paramName);\n\t\tValueConverter converter = ConvertersRegistry.getInstance().getConverter(clazz);\n\t\tif (converter == null) {\n\t\t\tthrow new IllegalStateException(\"No converter for class: \" + clazz.getName());\n\t\t} else {\n\t\t\treturn converter.parse(stringVal);\n\t\t}\n\t}\n", "public DescribeEventSubscriptionsResult withEventSubscriptionsList(EventSubscription... eventSubscriptionsList) {\n        if (this.eventSubscriptionsList == null) {\n            setEventSubscriptionsList(new java.util.ArrayList<EventSubscription>(eventSubscriptionsList.length));\n        }\n        for (EventSubscription ele : eventSubscriptionsList) {\n            this.eventSubscriptionsList.add(ele);\n        }\n        return this;\n    }", "public void awaitNextReadyWork() throws InterruptedException {\n\twrite.lockInterruptibly();\n\ttry {\n\t    long next = getEarliestReadyEstimate();\n\t    while (!workAvailable() && !waitingWork.isEmpty()) {\n\t\tif (next > 0L) {\n\t\t    workChanged.awaitNanos(next - System.nanoTime()); // Or signal\n\t\t    next = getEarliestReadyEstimate(); // Might be new work added?\n\t\t}\n\t    }\n\t} finally {\n\t    write.unlock();\n\t}\n    }", "public List<Class<?>> findAllImplementations(Class<?> interfase) throws IOException, ClassNotFoundException {\n  List<Class<?>> implementations=new ArrayList<>();\n  List<String> strings=findAllStrings(interfase.getName());\n  for (  String className : strings) {\n    Class<?> impl=_classLoader.loadClass(className);\n    if (!interfase.isAssignableFrom(impl)) {\n      throw new ClassCastException(\"Class not of type: \" + interfase.getName());\n    }\n    implementations.add(impl);\n  }\n  return implementations;\n}\n", "public TimeZone read(String zone){\n  return TimeZone.getTimeZone(zone);\n}\n", "\tpublic boolean isPositive() {\n\t\treturn hi > 0.0 || (hi == 0.0 && lo > 0.0);\n\t}\n", "\tpublic void stop() throws InterruptedException{\n\t\tstop(20);\t\n\t}\n", "public CAddressSpacesTable ( final JTree projectTree , final IDatabase database , final INaviProject project , final IViewContainer container ) { super ( projectTree , new CAddressSpacesModel ( project ) , new CAddressSpacesTableHelp ( ) ) ; m_database = ", "public static boolean isValidBedLine(String line){\n  String[] bdg=line.split(\"\\t\");\n  if (bdg.length < 3) {\n    return false;\n  }\n  try {\n    Integer.parseInt(bdg[1]);\n    Integer.parseInt(bdg[2]);\n  }\n catch (  NumberFormatException e) {\n    return false;\n  }\n  return true;\n}\n", "  protected void deleteIndexsForColumn(String c) {\n    \n    String sql = \"\";\n    if (databaseType == 1) {\n      sql = \"SHOW INDEX FROM `\" + dd.table + \"` FROM `\" + dd.database + \"` \"\n      + \"WHERE (Key_name != 'Primary') AND (Key_name = '\" + c + \"')\";\n      \n    } else if (databaseType == 2) {\n      sql = \"\";\n    }\n\n    try {\n      Connection conn = getConnection();\n      Statement select = conn.createStatement();\n      ResultSet result = select.executeQuery(sql);\n      while (result.next()) {\n        deleteIndex(result.getString(3));\n      }\n      select.close();\n      result.close();\n    } catch (SQLException e) {\n      System.err.println(\"Mysql Statement Error:\" + sql);\n      e.printStackTrace();\n    }\n  }\n", "private int findSchemeSeparator(){\n  return cachedSsi == NOT_CALCULATED ? cachedSsi=uriString.indexOf(':') : cachedSsi;\n}\n", "  public Wire padClock(Wire pad, String[] mods) {\n    return padClock(pad, mods, null);\n  }\n", "public GSXASessionImpl ( GSXAConnectionImpl conn ) throws JMSException { super ( conn , BOOL_ , - NUM_ ) ; TransactionManager tm = conn . getTransactionManager ( ) ; xaResource = new XAResourceJMSImpl ( tm , this , ( ISpaceProxy ) m_space ) ; }", "    protected BComponent createTooltipComponent(String tiptext) {\n        if (tiptext.startsWith(\"<html>\")) {\n            return new HTMLView(\"\", tiptext);\n        } else {\n            return new BLabel(tiptext, _tipStyle);\n        }\n    }\n", "public static Throwable deepSanitize ( Throwable t ) { Throwable current = t ; while ( current . getCause ( ) != null ) { current = StackTraceUtils . sanitize ( current . getCause ( ) ) ; } return StackTraceUtils . sanitize ( t ) ; }", "protected final boolean callbackCreateOptionsMenu(Menu menu) {\r\n        if (DEBUG) Log.d(TAG, \"[callbackCreateOptionsMenu] menu: \" + menu);\r\n\r\n        boolean result = true;\r\n        if (mActivity instanceof OnCreatePanelMenuListener) {\r\n            OnCreatePanelMenuListener listener = (OnCreatePanelMenuListener)mActivity;\r\n            result = listener.onCreatePanelMenu(Window.FEATURE_OPTIONS_PANEL, menu);\r\n        } else if (mActivity instanceof OnCreateOptionsMenuListener) {\r\n            OnCreateOptionsMenuListener listener = (OnCreateOptionsMenuListener)mActivity;\r\n            result = listener.onCreateOptionsMenu(menu);\r\n        }\r\n\r\n        if (DEBUG) Log.d(TAG, \"[callbackCreateOptionsMenu] returning \" + result);\r\n        return result;\r\n    }", "private static ColumnInfo[] prependColumn(ColumnInfo firstColumn, ColumnInfo[] columns) {\n        int allLen = 1 + columns.length;\n        ColumnInfo[] allColumns = new ColumnInfo[allLen];\n        allColumns[0] = firstColumn;\n        for (int i = 0; i < c", "private synchronized void drawIsometricSpritesForHex(Coords c,Graphics g,Collection<IsometricSprite> spriteArrayList){\n  Rectangle view=g.getClipBounds();\n  for (  IsometricSprite sprite : spriteArrayList) {\n    Coords cp=sprite.getPosition();\n    Rectangle spriteBounds=sprite.getBounds();\n    if (cp.equals(c) && view.intersects(spriteBounds) && !sprite.isHidden()) {\n      if (!sprite.isReady()) {\n        sprite.prepare();\n      }\n      sprite.drawOnto(g,spriteBounds.x,spriteBounds.y,this,false);\n    }\n  }\n}\n", "public void process(Reader reader, SheetToCSV sheetToCSV) throws IOException, OpenXML4JException, SAXException {\n        ReadOnlySharedStringsTable strings    = new ReadOnlySharedStringsTable(sheetToCSV.getOpcPackage());\n        XSSFReader                 xssfReader = new XSSFReader(sheetToCSV.getOpcPackage());\n        StylesTable                styles     = xssfReader.getStylesTable();\n        XSSFReader.SheetIterator   iter       = (XSSFReader.SheetIterator) xssfReader.getSheetsData();\n        int                        index      = 0;\n\n        boolean bySheetName = StringUtil.isNotEmpty(reader.sheetName());\n\n        while (iter.hasNext()) {\n            try (InputStream stream = iter.next()) {\n                String sheetName = iter.getSheetName();\n                if (bySheetName && reader.sheetName().equals(sheetName)) {\n                    processSheet(styles, strings, sheetToCSV, stream);\n                    break;\n                }\n                if (!bySheetName && reader.sheetIndex() == index) {\n                    processSheet(styles, strings, sheetToCSV, stream);\n                    break;\n                }\n            }\n            ++index;\n        }\n    }", "public ClearModifiers ( ClearModifiers modifiers1 , ClearModifiers modifiers2 , ClearModifiers modifiers3 ) { super ( modifiers1 , modifiers2 , modifiers3 ) ; }", "@Override public boolean isValid(){\n  return valid;\n}", "\tpublic Timer getTimer() {\n\t\t// if (heartbeat_==null) heartbeat_ = new Timer(100, 1000); // on\n\t\t// demand:\n\t\t// don't slow down startup\n\t\tif (timer_ == null)\n\t\t\ttimer_ = new java.util.Timer();\n\t\treturn timer_;\n\t}\n", "public Credentials toCredentials(Element el,String attributeUser,String attributePassword){\n  String user=el.getAttribute(attributeUser);\n  String pass=el.getAttribute(attributePassword);\n  if (user == null)   return null;\n  if (pass == null)   pass=\"\";\n  return CredentialsImpl.toCredentials(user,pass);\n}\n", "public void collapse(GraphNode master,Collection<GraphNode> picked,boolean erase,Object author){\n  collapser.collapse(master,picked,erase);\n  fireCollapseChanged(Collections.singleton(collapser.getCollapseData(master)),CollapseData.EMPTY_LIST,author);\n}\n", "private void cleanupList(){\n  Iterator<PlayerPositionEntry> itr=playerPositions.iterator();\n  while (itr.hasNext()) {\n    PlayerPositionEntry entry=itr.next();\n    if (entry.hasPlayerMovedAway()) {\n      itr.remove();\n    }\n  }\n}\n", "\tpublic boolean visit(AnnotationTypeMemberDeclaration node) {\n\t\treturn isVisitChildren();\n\t}\n", "private boolean nodeHasAttribute(Node node, String attributeName) {\n        return node.hasAttributes() && node.getAttributes().getNamedItem(attributeName) != null;\n    }", "public void writeToFile(Path loc, JobConf job)\n      throws IOException {\n    writeToFile(loc, job, new PureJavaCrc32());\n  }", "  public boolean isAligned (Alignment alignment) {\n    if (this.isAbsolute () && alignment.isAbsolute () ||\n        this.isRelative () && alignment.isRelative ()) {\n      return (false);\n    }\n\n    return ((this.value & alignment.value) != 0);\n  }\n", "\tpublic void setSession(ISession session) {\n\t\tif (session == null) {\n\t\t\tthrow new IllegalArgumentException(\"Null ISession passed\");\n\t\t}\n\t\t_session = session;\n\t}\n", "public int size(){\n  return keys.size();\n}\n", "public static Scriptable getTopLevelScope(Scriptable obj)\n    {\n        for (;;) {\n            Scriptable parent = obj.getParentScope();\n            if (parent == null) {\n                return obj;\n            }\n            obj = parent;\n        }\n    }", "@Override\n    public void open(AudioFormat format, int bufferSize) throws LineUnavailableException {\n        opening();\n        sourceDataLine.open(format, bufferSize);\n    }", "    public Hashtable getAllElements() {\n        if (myParser == null) {\n            throw new IllegalArgumentException(\"Parser not set\");\n        }\n\n        Hashtable allElements = new Hashtable();\n        String oneKey = null;\n\n        for (Enumeration ee = myParser.keys(); ee.hasMoreElements();) {\n            oneKey = (String) ee.nextElement();\n\n            Object o = myParser.get(oneKey);\n\n            if (o != null) {\n                allElements.put(oneKey, o);\n            }\n        }\n\n        return allElements;\n    }\n", "public static <K, V> Map<K, V> take(Map<K, V> self, int num) {\n        if (self.isEmpty() || num <= 0) {\n            return createSimilarMap(self);\n        }\n        Map<K, V> ret = createSimilarMap(self);\n        for (Map.Entry<K, V> entry : self.entrySet()) {\n            K key = entry.getKey();\n            V value = entry.getValue();\n\n            ret.put(key, value);\n            if (--num <= 0) {\n                break;\n            }\n        }\n        return ret;\n    }", "public synchronized void addStratum(SmapStratum stratum, boolean defaultStratum) {\n        strata.add(stratum);\n        if (defaultStratum)\n            this.defaultStratum = stratum.getStratumName();\n    }", "private static int[] filterBySetPos(int[] members, int[] bySetPos) {\n        members = Util.uniquify(members);\n        IntSet iset = new IntSet();\n        for (int pos : bySetPos) {\n            if (pos == 0) {\n                continue;\n            }\n            if (pos < 0) {\n                pos += members.length;\n            } else {\n                --pos;  // Zero-index.\n            }\n            if (pos >= 0 && pos < members.length) {\n                iset.add(members[pos]);\n            }\n        }\n        return iset.toIntArray();\n    }", "\tpublic Object search(String key) {\n\t\tString keyString = key.toString();\n\t\treturn get(this.getRoot(), keyString, 0);\n\t}\n", "\tpublic void installUI(JComponent c) {\n\t\tsuper.installUI(c);\n\t\toLine = (UILine)c;\n\t\tinstallListeners(c);\n\t}\n", "public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ) ; }", "public Token ( int kind , String image ) { this . kind = kind ; this . image = image ; }", "protected static int normaliseIndex ( int i , int size ) { int temp = i ; if ( i < NUM_ ) { i += size ; } if ( i < NUM_ ) { throw new ArrayIndexOutOfBoundsException ( STR_ + temp + STR_ + size ) ; } return i ; }", "\tpublic void reconnect(RouteEndPoint newSource, RouteEndPoint newTarget) {\n\t\tif ((newSource == null) || (newTarget == null) || (newSource == newTarget)) throw new IllegalArgumentException();\n\t\tdisconnect();\n\t\tsource = newSource;\n\t\ttarget = newTarget;\n\t\treconnect();\n\t}\n", "@Override\n\tpublic com.liferay.commerce.product.model.CPRule addCPRule(\n\t\tcom.liferay.commerce.product.model.CPRule cpRule) {\n\t\treturn _cpRuleLocalService.addCPRule(cpRule);\n\t}", "public void rectValuesToPixel(List<RectF> rects){\n  for (int i=0; i < rects.size(); i++)   rectValueToPixel(rects.get(i));\n}\n", "    public void setMiniMapVisible(boolean miniMapVisible) {\n        boolean old = this.isMiniMapVisible();\n        this.miniMapVisible = miniMapVisible;\n        miniMapMaximizeButton.setVisible(!miniMapVisible);\n        miniMapMinimizeButton.setVisible(miniMapVisible);\n        ///miniMapMinimizeButton.setComponentZOrder(miniMap.getCo, miniMap.getComponentZOrder(miniMap.getParent())-1);\n        miniMap.setVisible(miniMapVisible);\n        firePropertyChange(\"miniMapVisible\", old, this.isMiniMapVisible());\n    }\n", "public static void binderInit ( ) { ProfilerSection sec = Profiler . INSTANCE . section ( STR_ ) ; sec . start ( STR_ ) ; loadSystem ( ) ; sec . stop ( STR_ ) ; sec . start ( STR_ ) ; JSEngine . init ( ) ; sec . stop ( STR_ ) ; }", "protected void removeAllIndexes(){\n  indexes.clear();\n}\n", "\tstatic public void displayPathPreferenceSelector(java.awt.Dialog owner) {\n\t\tfinal PathPreferenceSelector selector;\n\t\tselector = new PathPreferenceSelector( owner, DEFAULTS, DOCUMENT_KEY, SUFFIX, DESCRIPTION );\n\t\tselector.setLocationRelativeTo(owner);\n\t\tselector.setVisible( true );\n\t}\n", "public void connect() throws DBException {\n        try {\n            LOGGER.debug(\"Initializing MongoDB client\");\n            mongoClient = new MongoClient(this.host, this.port);\n        } catch (UnknownHostException e) {\n            throw new DBException", "@Override\n\tpublic void initDownstream()\n\t{\n\t\tfor (Process prc : ctrl.getControlled())\n\t\t{\n\t\t\tif (prc instanceof Conversion ||\n\t\t\t\tprc instanceof Control ||\n\t\t\t\tprc instanceof TemplateReaction)\n\t\t\t{\n\t\t\t\tAbstractNode node = (AbstractNode) graph.getGraphObject(prc);\n\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tEdge edge = new EdgeL3(this, node, graph);\n\t\t\t\t\tnode.getUpstreamNoInit().add(edge);\n\t\t\t\t\tgetDownstreamNoInit().add(edge);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "    public boolean isPortConnectionStatusChanged(int port) {\n        testPort(port);\n        return io.getPortSCBits(port, USBPORTSC_CSC);\n    }\n", "  public void setDesktopActionDefaultStat() {\n    try {\n      wpMask mask = new wpMask(DESKTOP_ACTIONS, desktopActionIndices,\n                               desktopActionDefaultStat);\n      wpMaskEvent event = new wpMaskEvent(this, mask);\n      maskHandler.fireMaskChanged(event);\n    }\n    catch (wpMaskException me) {}\n\n  }\n", "public MP3Player ( final String filename ) throws FileNotFoundException { this ( JKIOUtil . getInputStream ( filename ) ) ; this . filename = filename ; }", "private static String fieldsToStringPretty(JsonObject jsonObj,int level){\n  StringBuffer buf=new StringBuffer();\n  String indent=\"\\n\" + VAUtils.indent(level);\n  boolean firstField=true;\n  for (  Map.Entry<String,JsonElement> entry : jsonObj.entrySet()) {\n    String field=entry.getKey();\n    if (!field.equals(CHILDREN_PROP) && !field.equals(\"src-loc\")) {\n      if (!firstField)       buf.append(\",\");\n      if (level == 1 && firstField)       buf.append(\" \");\n else       buf.append(indent);\n      firstField=false;\n      buf.append(field);\n      buf.append(\": \");\n      JsonElement value=entry.getValue();\n      buf.append(toStringPretty(value,level + 1));\n    }\n  }\n  return buf.toString();\n}\n", "private void addNameSpaceStorage(int nsID, NameSpaceSliceStorage nsStorage)\n      throws IOException {\n    if (!this.nsStorageMap.containsKey(nsID)) {\n      this.nsStorageMap.put(nsID, nsStorage);\n    }   \n  }", "public static ChangedAddressAttribute createChangedAddressAttribute ( TransportAddress address ) { ChangedAddressAttribute attribute = new ChangedAddressAttribute ( ) ; attribute . setAddress ( address ) ; return attribute ; }", "private static JsonNode toErrorNode ( String detail , Integer status ) { ObjectNode formattedError = JsonNodeFactory . instance . objectNode ( ) ; formattedError . set ( STR_ , JsonNodeFactory . instance . textNode ( detail ) ) ; if ( status != null ) { formattedError . set ( STR_ , JsonNodeFactory . instance . numberNode ( status ) ) ; } return formattedError ; }", "public String getSimpleName() {\n        String prefix = user + \"/\";\n        return repository.startsWith(prefix) ? repository.substring(prefix.length()) : repository;\n    }", "@SuppressWarnings(\"unchecked\") private static OutlierResult runOnlineLOF(UpdatableDatabase db){\n  Relation<DoubleVector> rep=db.getRelation(TypeUtil.DOUBLE_VECTOR_FIELD);\n  OnlineLOF<DoubleVector> lof=new OnlineLOF<>(k,k,neighborhoodDistanceFunction,reachabilityDistanceFunction);\n  OutlierResult result=lof.run(db);\n  ArrayList<DoubleVector> insertions=new ArrayList<>();\n  NumberVector.Factory<DoubleVector> o=RelationUtil.getNumberVectorFactory(rep);\n  int dim=RelationUtil.dimensionality(rep);\n  Random random=new Random(seed);\n  for (int i=0; i < size; i++) {\n    DoubleVector obj=VectorUtil.randomVector(o,dim,random);\n    insertions.add(obj);\n  }\n  DBIDs deletions=db.insert(MultipleObjectsBundle.makeSimple(rep.getDataTypeInformation(),insertions));\n  db.delete(deletions);\n  return result;\n}\n", "public abstract void close ( ) ;", "public SlickForm withProcessingLabel ( String label ) { this . endTag = label ; return this ; }", "public void createUpdate4Trigger(String tableName,\n\t\t\tString geometryColumnName, String idColumnName) {\n\n\t\tString sqlName = GeoPackageProperties.getProperty(TRIGGER_PROPERTY,\n\t\t\t\tTRIGGER_UPDATE4_NAME);\n\t\texecuteSQL(sqlName, tableName, geometryColumnName, idColumnName);\n\t}", "public static int copy(InputStream in,OutputStream out,long start,long end,boolean closeAfterDone) throws IOException {\n  try {\n    if (in == null || out == null)     return 0;\n    byte[] bb=new byte[1024 * 4];\n    int total=0;\n    in.skip(start);\n    int ii=(int)Math.min((end - start),bb.length);\n    int len=in.read(bb,0,ii);\n    while (len > 0) {\n      out.write(bb,0,len);\n      total+=len;\n      ii=(int)Math.min((end - start - total),bb.length);\n      len=in.read(bb,0,ii);\n      out.flush();\n    }\n    return total;\n  }\n  finally {\n    if (closeAfterDone) {\n      if (in != null) {\n        in.close();\n      }\n      if (out != null) {\n        out.close();\n      }\n    }\n  }\n}\n", "\tprivate void onArchetypeTreeNothingSelected(EHRflexEvent pEvent) {\n\t\tnew MessageDialog(messages.ehrflex_archetype_not_selected());\n\t}\n", "private ClassDescriptor getItemClassDescriptor(ObjectReferenceDescriptor ord, List hintClasses)\r\n    {   \r\n        DescriptorRepository repo = ord.getClassDescriptor().getRepository();\r\n\r\n        if (hintClasses == null || hintClasses.isEmpty())\r\n        {\r\n            return repo.getDescriptorFor(ord.getItemClass()); \r\n        }\r\n        \r\n        Class resultClass = (Class) hintClasses.get(0);\r\n        \r\n        for (Iterator iter = hintClasses.iterator(); iter.hasNext();)\r\n        {\r\n            Class clazz = (Class) iter.next();\r\n            Class superClazz = clazz.getSuperclass();\r\n\r\n            if (superClazz != null && resultClass.equals(superClazz.getSuperclass()))\r\n            {\r\n                continue; // skip if we already have a super superclass \r\n            }\r\n           \r\n            if (hintClasses.contains(superClazz))\r\n            {\r\n                resultClass = superClazz;   // use superclass if it's in the hints\r\n            }\r\n        }\r\n\r\n        return repo.getDescriptorFor(resultClass);\r\n    }", "public void addReturnHotspot(String signature){\n  List<ValueBox> sigSpots=StringAnalysis.getReturnExpressions(signature);\n  logger.debug(\"For signature \" + signature + \" got \"+ sigSpots.size()+ \" hotspots.\");\n  if (!sigSpots.isEmpty()) {\n    addSignatureToHotspotMap(signature,new Hotspot(signature,sigSpots));\n    hotspots.addAll(sigSpots);\n  }\n}\n", "@SuppressWarnings(\"unchecked\") private <T>T lookDependencyAmongDependants(final Class<T> dependencyType){\n  for (int i=dependants.size() - 1; i >= 0; i--) {\n    final Object dependant=dependants.get(i);\n    if (dependencyType.isAssignableFrom(dependant.getClass())) {\n      dependants.remove(dependant);\n      return cache(dependencyType,dependant);\n    }\n  }\n  return null;\n}\n", "   public void visit(AtomicExpression n, A argu) {\n      n.f0.accept(this, argu);\n   }\n", "    public Object getRepresentedOperation(Object handle) {\n        if (handle instanceof MCollaboration) {\n            return ((MCollaboration) handle).getRepresentedOperation();\n        }\n\treturn illegalArgumentObject(handle);\n    }\n", "public void initializeFeaturePathInfoFrom ( FeaturePathInfo aFp , String [ ] featurePathString ) throws FeaturePathException { if ( featurePathString . length > NUM_ ) { aFp . initialize ( featurePathString [ NUM_ ] ) ; } else { aFp . initialize ( STR_ ) ; } }", "public boolean contains(final Object element){\n  return _elements.containsValue(element);\n}\n", "public ConsistentHash getConsistentHash(byte[] cacheName) {\n      lock.readLock().lock();\n      try {\n         return topologyInfo.getConsistentHash(cacheName);\n      } finally {\n         lock.readLock().unlock();\n      }\n   }", "public void setACModel(AbstractACModel<?> acModel, boolean notifyListeners) {\n                Validate.notNull(acModel);\n                if (this.acModel == acModel) {\n                        return;\n                }\n                validateACModel(acModel);\n                this.acModel = acModel;\n                acModel.getContext().addContextListener(this);\n                if (notifyListeners) {\n                        processContextListenerSupport.notifyACModelSet(acModel);\n                }\n        }", "    public boolean isEOFRecord(byte[] record) {\n        for (int i = 0, sz = getRecordSize(); i < sz; ++i) {\n            if (record[i] != 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n", "void showGoogleShopperButton ( View . OnClickListener listener ) { View shopperButton = activity . findViewById ( fakeR . getId ( STR_ , STR_ ) ) ; shopperButton . setVisibility ( View . VISIBLE ) ; shopperButton . setOnClickListener ( listener ) ; }", "public Frustum setToOrtho (\n        double left, double right, double bottom, double top, double near, double far) {\n        return setToProjection(left, right, bottom, top, near, far, Vector3.UNIT_Z, true, false);\n    }", "public Query append(final String name,final String value) throws UnsupportedEncodingException {\n  params.add(new Tuple<String,Tuple<String,String>>(name,new Tuple<String,String>(value,URLEncoder.encode(value,\"UTF-8\"))));\n  return this;\n}\n", "public boolean flushAndRefresh() throws IOException {\n  message(\"top: now flushAndRefresh\");\n  Set<String> completedMergeFiles;\nsynchronized (finishedMergedFiles) {\n    completedMergeFiles=Collections.unmodifiableSet(new HashSet<>(finishedMergedFiles));\n  }\n  mgr.maybeRefreshBlocking();\n  boolean result=setCurrentInfos(completedMergeFiles);\n  if (result) {\n    message(\"top: opened NRT reader version=\" + curInfos.getVersion());\n    finishedMergedFiles.removeAll(completedMergeFiles);\n    message(\"flushAndRefresh: version=\" + curInfos.getVersion() + \" completedMergeFiles=\"+ completedMergeFiles+ \" finishedMergedFiles=\"+ finishedMergedFiles);\n  }\n else {\n    message(\"top: no changes in flushAndRefresh; still version=\" + curInfos.getVersion());\n  }\n  return result;\n}\n", "\tpublic void clearExtension() {\n\t\tmExtension = null;\n\t}\n", "public void write ( XMLWriteable obj ) { try { obj . writeXML ( this ) ; } catch ( java . io . IOException e ) { } }", "private static String[] extractHostports(SrvRecord[] srvRecords){\n  String[] hostports=null;\n  int head=0;\n  int tail=0;\n  int sublistLength=0;\n  int k=0;\n  for (int i=0; i < srvRecords.length; i++) {\n    if (hostports == null) {\n      hostports=new String[srvRecords.length];\n    }\n    head=i;\n    while (i < srvRecords.length - 1 && srvRecords[i].priority == srvRecords[i + 1].priority) {\n      i++;\n    }\n    tail=i;\n    sublistLength=(tail - head) + 1;\n    for (int j=0; j < sublistLength; j++) {\n      hostports[k++]=selectHostport(srvRecords,head,tail);\n    }\n  }\n  return hostports;\n}\n", "protected ClassNode findClassNode ( final SourceUnit sourceUnit , final CompilationUnit compilationUnit , final String className ) { if ( className . endsWith ( STR_ ) ) { return findClassNode ( sourceUnit , compilationUnit , className . substring ( NUM_ ", "protected void declareDataStructures(PyramidDiscrete<I> image) {\n\t\tnumPyramidLayers = image.getNumLayers();\n\n\t\tpreviousDerivX = (D[])Array.newInstance(derivType,image.getNumLayers());\n\t\tpreviousDerivY = (D[])Array.newInstance(derivType,image.getNumLayers());\n\t\tcurrentDerivX = (D[])Array.newInstance(derivType,image.getNumLayers());\n\t\tcurrentDerivY = (D[])Array.newInstance(derivType,image.getNumLayers());\n\n\t\tfor( int i = 0; i < image.getNumLayers(); i++ ) {\n\t\t\tint w = image.getWidth(i);\n\t\t\tint h = image.getHeight(i);\n\n\t\t\tpreviousDerivX[i] = GeneralizedImageOps.createSingleBand(derivType, w, h);\n\t\t\tpreviousDerivY[i] = GeneralizedImageOps.createSingleBand(derivType, w, h);\n\t\t\tcurrentDerivX[i] = GeneralizedImageOps.createSingleBand(derivType, w, h);\n\t\t\tcurrentDerivY[i] = GeneralizedImageOps.createSingleBand(derivType, w, h);\n\t\t}\n\n\t\tClass imageClass = image.getImageType().getImageClass();\n\t\tpreviousImage = FactoryPyramid.discreteGaussian(image.getScales(), -1, 1, false, ImageType.single(imageClass));\n\t\tpreviousImage.initialize(image.getInputWidth(), image.getInputHeight());\n\n\t\tfor( int i = 0; i < tracks.length; i++ ) {\n\t\t\tTrack t = new Track();\n\t\t\tt.klt = new PyramidKltFeature(numPyramidLayers,featureRadius);\n\t\t\ttracks[i] = t;\n\t\t}\n\t}", "public static void addDatasource(String sourcePath,String destPath,DsDef newDatasource) throws IOException {\n  addDatasources(sourcePath,destPath,Collections.singleton(newDatasource));\n}\n", "\tpublic V get(long key) {\n\t\tint idx = hash(key) % tabSize;\n\t\tif(idx < 0)\n\t\t\tidx *= -1;\n\t\tif (values[idx] == null)\n\t\t\treturn null; // key does not exist\n\t\t\n\t\tEntry<V> next = values[idx];\n        while (next != null) {\n            if (next.key == key)\n                return next.value;\n            next = next.nextDup;\n        }\n        return null;\n\t}\n", "public static int compareByteArrays ( byte [ ] left , byte [ ] right ) { for ( int i = NUM_ , j = NUM_ ; i < left . length && j < right . length ; i ++ , j ++ ) { int a = ( left [ i ] & NUM_ ) ; int b = ( right [ j ] & NUM_ ) ; if ( a != b ) { return a - b ; } } return left . length - right . length ; }", "    public void setName(String name){\n        ptgId = 0x39;   // PtgNameX\n        record = new byte[PTG_NAMEX_LENGTH];\n        record[0] = ptgId;\n        WorkBook b = this.getParentRec().getSheet().getWorkBook();\n        ilbl= b.getExtenalNameNumber(name);\n        ixti = (short)b.getExternSheet().getVirtualReference();\n        byte[] bb= ByteTools.shortToLEBytes(ixti);\n        record[1]= bb[0];\n        record[2]= bb[1];\n        byte[] bbb= ByteTools.cLongToLEBytes(ilbl);\n        record[3]= bbb[0];\n        record[4]= bbb[1];\n    }\n", "@Override\n    public double fast()\n    {\n        readLock.lock();\n        try\n        {\n            int count = count();\n            return toDegrees(sinSum / count, cosSum / count);\n        }\n        finally\n        {\n            readLock.unlock();\n        }\n    }", "\tprivate void formWindowIconified(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowIconified\n\t{//GEN-HEADEREND:event_formWindowIconified\n\t\tif (trayIcon != null && isTray)\n\t\t{\n\t\t\tsetState(java.awt.Frame.NORMAL) ;\n\t\t\tsetVisible(false) ;\n\t\t\tif(iconifiedMessageFromTray)\n\t\t\t{\n\t\t\t   trayIcon.displayMessage(\"Mooch Minimized\", \"Click icon to restore Mooch\", TrayIcon.MessageType.INFO);\n\t\t\t   iconifiedMessageFromTray = false;\n\t\t\t}\n\t\t}\n\t}//GEN-LAST:event_formWindowIconified\n", "public static PublicKey generatePublicKey ( String encodedPublicKey ) { try { byte [ ] decodedKey = Base64 . decode ( encodedPublicKey ) ; KeyFactory keyFactory = KeyFactory . getInstance ( KEY_FACTORY_ALGORITHM ) ; return keyFactory . generatePublic ( new X509EncodedKeySpec ( decodedKey ) ) ; } catch ( NoSuchAlgorithmException e ) { throw new RuntimeException ( e ) ; } catch ( InvalidKeySpecException e ) { Log . e ( TAG , STR_ ) ; throw new IllegalArgumentException ( e ) ; } catch ( Base64DecoderException e ) { Log . e ( TAG , STR_ ) ; throw new IllegalArgumentException ( e ) ; } }", "public RequestBuilder createFormUrlEncodedRequestBuilder(String httpUrl, String methodName, String reqBodyAsString) throws IOException {\n        RequestBuilder requestBuilder = RequestBuilder\n                .create(methodName)\n                .setUri(httpUrl);\n        if (reqBodyAsString != null) {\n            Map<String, Object> reqBodyMap = HelperJsonUtils.readObjectAsMap(reqBodyAsString);\n            List<NameValuePair> reqBody = new ArrayList<>();\n             for(String key : reqBodyMap.keySet()) {\n                 reqBody.add(new BasicNameValuePair(key, reqBodyMap.get(key).toString()));\n             }\n             HttpEntity httpEntity = new UrlEncodedFormEntity(reqBody);\n             requestBuilder.setEntity(httpEntity);\n            requestBuilder.setHeader(CONTENT_TYPE, APPLICATION_FORM_URL_ENCODED);\n        }\n        return requestBuilder;\n    }", "    public boolean supportsMinimumSQLGrammar() {\n        debugCodeCall(\"supportsMinimumSQLGrammar\");\n        return true;\n    }\n", "public static synchronized void sse(String url, SseCallback connectionCallback) {\n        checkStarted();\n        instance().endpoints.add(HandlerUtil.sse(url, connectionCallback));\n    }", "public BigInteger floor() {\n        /* is already integer: return the numerator\n         */\n        if (b.compareTo(BigInteger.ONE) == 0) {\n            return a;\n        } else if (a.compareTo(BigInteger.ZERO) > 0) {\n            return a.divide(b);\n        } else {\n            return a.divide(b).subtract(BigInteger.ONE);\n        }\n    }", "public static String[] insertAt(String[] dest,String[] src,int offset){\n  String[] temp=new String[dest.length + src.length - 1];\n  System.arraycopy(dest,0,temp,0,offset);\n  System.arraycopy(src,0,temp,offset,src.length);\n  System.arraycopy(dest,offset + 1,temp,src.length + offset,dest.length - offset - 1);\n  return temp;\n}\n", "public void put(String key,boolean value){\n  put(key,Boolean.toString(value));\n}\n", "\tpublic void databaseEventOccurred(DatabaseEvent de) {\n\t\tString message = null;\n\n\t\tif (de.getOnline()) {\n\t\t\t\n\t\t\tmessage = \"Online\";\n\n\t\t\t// To limit how frequently we do this, we'll just let\n\t\t\t// the Browser's DBClient initiate a synchronization\n\t\t\tDBClient client = (DBClient) de.getSource();\n\t\t\tif (client.getName().equalsIgnoreCase(\"configuration\")) {\n\t\t\t\tclient.runDBSyncAgent();\n\t\t\t}\n\t\t} else {\n\t\t\tmessage = \"Offline\";\n\t\t}\t\t\n\t}\n", "public void sendData(Object req, Object res)\n        throws Exception, IOException\n    {\n        this.sendData((HttpServletRequest)req, (HttpServletResponse)res);\n    }", "public HttpRequest acceptGzipEncoding ( ) { return acceptEncoding ( ENCODING_GZIP ) ; }", "public Ability banUser() {\n    return builder()\n        .name(BAN)\n        .locality(ALL)\n        .privacy(ADMIN)\n        .input(1)\n        .action(ctx -> {\n          String username = stripTag(ctx.firstArg());\n          int userId = getUserIdSendError(us", "\tprivate void checkClosed() {\n\t\tif (closed) {\n\t\t\tthrow new IllegalStateException(\"index accessor has been closed\");\n\t\t}\n\t}\n", "public void testFloatField ( ) throws Exception { AnObject empty = new AnObject ( ) ; AnObject full = helper . fill ( new AnObject ( ) ) ; assertTrue ( helper . areEquals ( full , full ) ) ; assertFalse ( helper . areEquals ( empty , full ) ) ; }", "    public void broadcast(Message m) throws ComponentMonitorException {\n        logger.debug(\"Sending \" + m);\n        try {\n            jbora.multiCast(m);\n        } catch (JBoraException e) {\n            throw new ComponentMonitorException(\"Error sending message\", e);\n        }\n    }\n", "public static final HashMap readMapXml(InputStream in) throws XmlPullParserException, IOException {\n  XmlPullParser parser=Xml.newPullParser();\n  parser.setInput(in,null);\n  return (HashMap)readValueXml(parser,new String[1]);\n}\n", "    public boolean isInternal() {\n\treturn exception != null;\n    }\n", "public void setMeSHList(FSArray v) {\n    if (ManualDescriptor_Type.featOkTst && ((ManualDescriptor_Type)jcasType).casFeat_meSHList == null)\n      jcasType.jcas.throwFeatMissing(\"meSHList\", \"de.julielab.jules.types.pubmed.ManualDescriptor\");\n    jcasType.ll_cas.ll_setRefValue(addr, ((ManualDescriptor_Type)jcasType).casFeatCode_meSHList, jcasType.ll_cas.ll_getFSRef(v));}", "@Override public void disconnect(){\n  try {\nsynchronized (rawSocketLock) {\n      if (serverSocket != null) {\n        serverSocket.close();\n        serverSocket=null;\n      }\n    }\n  }\n catch (  IOException e) {\n    reportError(\"Failed to close server socket: \" + e.getMessage());\n  }\n  super.disconnect();\n}\n", "public static String getMapFieldKeyType(Field field) {\n        FieldType type = field.getType();\n        if (!(type instanceof Message)) {\n            throw new IllegalArgumentException(field.toString());\n        }\n        Message entryType = (Message) type;\n        ScalarFieldType keyType = (ScalarFieldType) entryType.getField(MAP_ENTRY_KEY).getType();\n        return ScalarFieldTypeUtil.getWrapperType(keyType);\n    }", "protected int onMeasureDimension(int min,int measureSpec){\nswitch (MeasureSpec.getMode(measureSpec)) {\ncase MeasureSpec.EXACTLY:\n    return MeasureSpec.getSize(measureSpec);\ncase MeasureSpec.AT_MOST:\n  return Math.min(min,MeasureSpec.getSize(measureSpec));\ncase MeasureSpec.UNSPECIFIED:\ndefault :\nreturn min;\n}\n}\n", "protected base_resource[] get_nitro_bulk_response(nitro_service service, String response) throws Exception\r\n\t{\r\n\t\txen_sf_storagecentervpx_image_responses result = (xen_sf_storagecentervpx_image_responses) service.get_payload_formatter().string_to_resource(xen_sf_storagecentervpx_image_responses.class, response);\r\n\t\tif(result.errorcode != 0)\r\n\t\t{\r\n\t\t\tif (result.errorcode == SESSION_NOT_EXISTS)\r\n\t\t\t\tservice.clear_session();\r\n\t\t\tthrow new nitro_exception(result.message, result.errorcode, (base_response [])result.xen_sf_storagecentervpx_image_response_array);\r\n\t\t}\r\n\t\txen_sf_storagecentervpx_image[] result_xen_sf_storagecentervpx_image = new xen_sf_storagecentervpx_image[result.xen_sf_storagecentervpx_image_response_array.length];\r\n\t\t\r\n\t\tfor(int i = 0; i < result.xen_sf_storagecentervpx_image_response_array.length; i++)\r\n\t\t{\r\n\t\t\tresult_xen_sf_storagecentervpx_image[i] = result.xen_sf_storagecentervpx_image_response_array[i].xen_sf_storagecentervpx_image[0];\r\n\t\t}\r\n\t\t\r\n\t\treturn result_xen_sf_storagecentervpx_image;\r\n\t}", "public RealBuffer apply ( RealBuffer buffer ) { float [ ] samples = buffer . getSamples ( ) ; apply ( samples ) ; return buffer ; }", "private void readMoreBytesFromStream() throws IOException {\n        if (!innerStreamHasMoreData) {\n            return;\n        }\n\n        int bufferSpaceAvailable = buffer.length - bytesInBuffer;\n        if (bufferSpaceAvailable <= 0) {\n            return;\n        }\n\n        int bytesRead =\n                stream.read(buffer, bytesInBuffer, bufferSpaceAvailable);\n\n        if (bytesRead == -1) {\n            innerStreamHasMoreData = false;\n        } else {\n            bytesInBuffer += bytesRead;\n        }\n    }", "public IMqttDeliveryToken publish ( String clientHandle , String topic , byte [ ] payload , int qos , boolean retained , String invocationContext , String activityToken ) throws MqttPersistenceException , MqttException { MqttConnection client = getConnect", "\tpublic void dump(int indent, boolean recurse) {\n\t\tString spacer = \"\";\n\t\tfor (int i = 0; i<indent; i++) {\n\t\t\tspacer = spacer + \" \";\n\t\t}\n\n\t\tString commandName;\n\t\tif (command != null) {\n\t\t\tcommandName = command.getPresentationName();\n\t\t} else {\n\t\t\tcommandName = \"No command!\";\n\t\t}\n\t       \n\t\tif (isLeaf()) {\n\t\t\tSystem.out.println(spacer + id + \": Leaf node (cmd \"+commandName+\")\");\n\t\t} else {\n\t\t\tString type;\n\t\t\tif (isRoot()) {\n\t\t\t\ttype = \"Root\";\n\t\t\t} else {\n\t\t\t\ttype = \"Internal\";\n\t\t\t}\n\n\t\t\tSystem.out.println(spacer + id + \": \" + type + \" node with \"+children.size()+\n\t\t\t\t\t\t\t\t\t \" children (cmd \"+commandName+\")\");\n\t\t\tif (recurse) {\n\t\t\t\tIterator it = children.iterator();\n\t\t\t\twhile (it.hasNext()) {\n\t\t\t\t\tBranchedCommandQueueNode child = (BranchedCommandQueueNode) it.next();\n\t\t\t\t\tchild.dump(indent+2, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "private static int getStyle(TextStyle style)\n    {\n        final int value;\n        if (TextStyle.NORMAL == style)\n        {\n            value = Font.TRUETYPE_FONT;\n        }\n        else if (TextStyle.BOLD == style)\n        {\n            value = Font.BOLD;\n        }\n        else if (TextStyle.ITALIC == style)\n        {\n            value = Font.ITALIC;\n        }\n        else\n        {\n            throw new LionEngineException(style);\n        }\n        return value;\n    }", "        public boolean isVisible(Viewpoint viewpoint) {\n\t    return true;\n\t}\n", "public Channel ( String host , int port , int timeout ) throws Exception { this . host = host ; this . port = port ; this . timeout = timeout ; }", "public ProgressBar ( ) { this ( STR_ ) ; }", "public void resetOriginals ( ) { mStartingStartTrim = NUM_ ; mStartingEndTrim = NUM_ ; mStartingRotation = NUM_ ; setStartTrim ( NUM_ ) ; setEndTrim ( NUM_ ) ; setRotation ( NUM_ ) ; }", "private static char whitespaceToSpace(char c){\n  return Character.isWhitespace(c) ? ' ' : c;\n}\n", "public void copyTexturesTo(Material material) throws TextureException {\n  int num=mTextureList.size();\n  for (int i=0; i < num; ++i)   material.addTexture(mTextureList.get(i));\n}\n", "public static boolean isValid(Date expirationDate){\n  Date currentDate=new Date();\n  String formattedDate=dateFormat.format(currentDate);\n  currentDate=convertDate(formattedDate);\n  boolean isExpired=currentDate.after(expirationDate);\n  boolean isEqual=currentDate.equals(expirationDate);\n  return isExpired || isEqual;\n}\n", "protected SuballocatedIntVector findNamespaceContext(int elementNodeIndex){\n  if (null != m_namespaceDeclSetElements) {\n    int wouldBeAt=findInSortedSuballocatedIntVector(m_namespaceDeclSetElements,elementNodeIndex);\n    if (wouldBeAt >= 0)     return (SuballocatedIntVector)m_namespaceDeclSets.elementAt(wouldBeAt);\n    if (wouldBeAt == -1)     return null;\n    wouldBeAt=-1 - wouldBeAt;\n    int candidate=m_namespaceDeclSetElements.elementAt(--wouldBeAt);\n    int ancestor=_parent(elementNodeIndex);\n    if (wouldBeAt == 0 && candidate < ancestor) {\n      int rootHandle=getDocumentRoot(makeNodeHandle(elementNodeIndex));\n      int rootID=makeNodeIdentity(rootHandle);\n      int uppermostNSCandidateID;\n      if (getNodeType(rootHandle) == DTM.DOCUMENT_NODE) {\n        int ch=_firstch(rootID);\n        uppermostNSCandidateID=(ch != DTM.NULL) ? ch : rootID;\n      }\n else {\n        uppermostNSCandidateID=rootID;\n      }\n      if (candidate == uppermostNSCandidateID) {\n        return (SuballocatedIntVector)m_namespaceDeclSets.elementAt(wouldBeAt);\n      }\n    }\n    while (wouldBeAt >= 0 && ancestor > 0) {\n      if (candidate == ancestor) {\n        return (SuballocatedIntVector)m_namespaceDeclSets.elementAt(wouldBeAt);\n      }\n else       if (candidate < ancestor) {\n        do {\n          ancestor=_parent(ancestor);\n        }\n while (candidate < ancestor);\n      }\n else       if (wouldBeAt > 0) {\n        candidate=m_namespaceDeclSetElements.elementAt(--wouldBeAt);\n      }\n else       break;\n    }\n  }\n  return null;\n}\n", "public static List<String> readLines(File file) throws IOException {\n  return readLines(file,Charset.defaultCharset());\n}", "public static Number cos(Number a){\n  return Math.cos(a.doubleValue());\n}\n", "\tpublic String getAbilities() {\n\t\tStringBuffer sb = new StringBuffer();\n\t\tlong abilities = hero.getAbilities();\n\t\tlong mask = 1;\n\t\tlong ability = 0;\n\t\tboolean hit = false;\n\t\tfor (int i=0; i<ViewConstant.HERO.ABILITY_COUNT; ++i) {\n\t\t\tif ((ability = abilities & mask) > 0) {\n\t\t\t\tif (hit) sb.append(SEPERATOR);\n\t\t\t\tsb.append(ViewConstant.HERO.ability.get(new Long(ability)));\n\t\t\t\thit = true;\n\t\t\t}\n\t\t\tmask <<= 1;\n\t\t}\n\t\treturn sb.toString();\n\t}\n", "boolean handleOutliers(ThroughputDistribution distribution, double throughput) {\n        if (throughput < 0.0) {\n            resetStatistics(false);\n            return true;\n        } else if (throughput == 0.0) {\n            return false;\n        }\n\n        double zScore = distribution.getZScore(throughput);\n        boolean currentIsOutlier = zScore <= -3.0 || zScore >= 3.0;\n\n        // 8/10/2012: Reset the data for this thread count when we hit an outlier\n        // 1/20/2018: refine the distribution reset criteria\n        if (currentIsOutlier) {\n            /*\n             * Decide whether to reset the distribution, which throws away the historical\n             * ewma for the poolSize and replaces it with the new throughput.\n             * We will use 3 criteria, any of which is sufficient to reset the distribution:\n             *\n             * 1) How much do we trust the historical data?\n             * If the historical ewma is the result of many observations with similar throughput,\n             * the standard deviation will be a small fraction of the ewma. If stddev/ewma is\n             * greater than 10%, then the historical data is not really strong, let's reset.\n             *\n             * 2) How much different is the new tput from the ewma?\n             * If the new throughput is very very different from the ewma, that suggests the workload\n             * may have changed significantly, in which case the historical data would no longer be\n             * valid. If the throughput change is greater than 50% of ewma, let's reset.\n             *\n             * 3) Is the throughput simply unstable?\n             * If every new datapoint at this poolSize is more than 3 standard deviations off the\n             * historical ewma, then we may as well follow the bouncing ball, rather than averaging\n             * points which do not seem to want to cluster around a mean. If we get N outliers in a\n             * row at this poolSize, let's reset.\n             */\n            double ewma = distribution.getMovingAverage();\n            double stddev = distribution.getStddev();\n            if ((stddev / ewma) > resetDistroStdDevEwmaRatio\n                || (Math.abs(throughput - ewma) / ewma) > resetDistroNewTputEwmaRatio\n                || distribution.incrementAndGetConsecutiveOutliers() >= resetDistroConsecutiveOutliers) {\n                if (tc.isEventEnabled()) {\n                    Tr.event(tc, \"reset distribution\", (\" distribution: \" + distribution + \", new throughput: \" + throughput));\n                }\n                distribution.reset(throughput, controllerCycle);\n                distributionReset = true;\n            } else if (tc.isEventEnabled()) {\n                Tr.event(tc, \"outlier detected\", (\" distribution: \" + distribution + \", new throughput: \" + throughput));\n            }\n        } else {\n            distribution.resetConsecutiveOutliers();\n        }\n\n        // Check for repeated outliers\n        // 1/20/2018: increment only after resetting a distribution, not a single outlier event\n        if (lastAction != LastAction.NONE) {\n            if (distributionReset) {\n                consecutiveOutlierAfterAdjustment++;\n            } else {\n                consecutiveOutlierAfterAdjustment = 0;\n            }\n        }\n\n        // If we repeatedly hit an outlier after changing the pool size\n        // we should reset the statistics\n        if (consecutiveOutlierAfterAdjustment >= MAX_OUTLIER_AFTER_CHANGE_BEFORE_RESET) {\n            resetThreadPool();\n            return true;\n        }\n\n        return false;\n    }", "private static boolean needsExtraction(final ITranslationEnvironment environment,final String registerName) throws InternalTranslationException {\n  return (getRegisterSize(registerName) != environment.getArchitectureSize()) && !isSegment(registerName);\n}\n", "protected void doExecuteCommand() {\n        if (this.commandExecutor instanceof ParameterizableActionCommandExecutor) {\n            ((ParameterizableActionCommandExecutor) this.commandExecutor).execute(getParameters());\n        }\n        else {\n        \ti", "     public void setLegajoCa83AntigAnt(int newValue) throws DataStoreException {\n          setInt(LEGAJO_CA_83_ANTIG_ANT, newValue);\n     }\n", "public DescribeJobQueuesRequest withJobQueues(String... jobQueues) {\n        if (this.jobQueues == null) {\n            setJobQueues(new java.util.ArrayList<String>(jobQueues.length));\n        }\n        for (String ele : jobQueues) {\n            this.jobQueues.add(ele);\n        }\n        return this;\n    }", "\tpublic String getSource() {\n\t\tStringBuffer cleanedup = new StringBuffer(source.length());\n\t\tliteralMatcher.reset(source);\n\t\t\n\t\twhile (literalMatcher.find()) {\n\t\t\tliteralMatcher.appendReplacement(cleanedup, getData(literalMatcher.group()).toString());\n\t\t }\n\t\t literalMatcher.appendTail(cleanedup);\n\t\t\n\t\treturn cleanedup.toString();\n\t}\n", "public static BandPassBuilder bandPassBuilder ( ) { return new BandPassBuilder ( ) ; }", "private static void ensureRedirectUriIsAuthorized ( final AuthorizationRequest authorizationRequest , final ClientDetailsEntity client ) { if ( ! Strings . isNullOrEmpty ( authorizationRequest . getRedirectUri ( ) ) ) { boolean found = BOOL_ ; final Itera", "final private String matchRuleDef2MatchRuleDesc(Attributes attrs) throws NamingException {\n  StringBuffer matchRuleDesc=new StringBuffer(\"( \");\n  Attribute attr=null;\n  int count=0;\n  attr=attrs.get(NUMERICOID_ID);\n  if (attr != null) {\n    matchRuleDesc.append(writeNumericOID(attr));\n    count++;\n  }\n else {\n    throw new ConfigurationException(\"Attribute type doesn't\" + \"have a numeric OID\");\n  }\n  attr=attrs.get(NAME_ID);\n  if (attr != null) {\n    matchRuleDesc.append(writeQDescrs(attr));\n    count++;\n  }\n  attr=attrs.get(DESC_ID);\n  if (attr != null) {\n    matchRuleDesc.append(writeQDString(attr));\n    count++;\n  }\n  attr=attrs.get(OBSOLETE_ID);\n  if (attr != null) {\n    matchRuleDesc.append(writeBoolean(attr));\n    count++;\n  }\n  attr=attrs.get(SYNTAX_ID);\n  if (attr != null) {\n    matchRuleDesc.append(writeWOID(attr));\n    count++;\n  }\n else {\n    throw new ConfigurationException(\"Attribute type doesn't\" + \"have a syntax OID\");\n  }\n  if (count < attrs.size()) {\n    String attrId=null;\n    for (NamingEnumeration<? extends Attribute> ae=attrs.getAll(); ae.hasMoreElements(); ) {\n      attr=ae.next();\n      attrId=attr.getID();\n      if (attrId.equals(NUMERICOID_ID) || attrId.equals(NAME_ID) || attrId.equals(SYNTAX_ID)|| attrId.equals(DESC_ID)|| attrId.equals(OBSOLETE_ID)) {\n        continue;\n      }\n else {\n        matchRuleDesc.append(writeQDStrings(attr));\n      }\n    }\n  }\n  matchRuleDesc.append(\")\");\n  return matchRuleDesc.toString();\n}\n", "KeySetValidator(Set<IntegerKey> keys){\n  if (keys == null)   throw new IllegalArgumentException();\n  this.keys=keys;\n}\n", "public static HttpRequest head ( final CharSequence baseUrl , final boolean encode , final Object ... params ) { String url = append ( baseUrl , params ) ; return head ( encode ? encode ( url ) : url ) ; }", "public void close ( ) { close ( BOOL_ ) ; }", "\tpublic KeyboardItem (KeyboardItem item)\n\t{\tShift=item.Shift; Control=item.Control; Alt=item.Alt;\n\t\tCharKey=item.CharKey; MenuString=item.MenuString;\n\t\tActionName=item.ActionName; CommandType=item.CommandType;\n\t}\n", "    public void addLogger(Logger l) {\n        if ( l != null ) {\n            if ( l.getLoggerName() != null ) {\n                logger.put(l.getLoggerName(), l);\n            }\n        }\n    }\n", "public static void validate(SpaceURL spaceURL) throws Exception {\n  if (_logger.isLoggable(Level.FINE)) {\n    _logger.fine(\"attributesSpaceUrl  =  \" + spaceURL);\n  }\n  try {\n    validateURL(spaceURL);\n  }\n catch (  SpaceURLValidationException e) {\n    if (_logger.isLoggable(Level.FINE)) {\n      _logger.fine(\"Exception while validating space URL: \" + e.getMessage() + \"\\nSpace URL: \"+ spaceURL);\n    }\n    throw e;\n  }\n}\n", "private boolean matchStrings(String pattern,String str,boolean caseSensitive){\n  char[] patArr=pattern.toCharArray();\n  char[] strArr=str.toCharArray();\n  int patIdxStart=0;\n  int patIdxEnd=patArr.length - 1;\n  int strIdxStart=0;\n  int strIdxEnd=strArr.length - 1;\n  char ch;\n  boolean containsStar=false;\n  for (  char c : patArr) {\n    if (c == '*') {\n      containsStar=true;\n      break;\n    }\n  }\n  if (!containsStar) {\n    if (patIdxEnd != strIdxEnd) {\n      return false;\n    }\n    for (int i=0; i <= patIdxEnd; i++) {\n      ch=patArr[i];\n      if (ch != '?') {\n        if (different(caseSensitive,ch,strArr[i])) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  if (patIdxEnd == 0) {\n    return true;\n  }\n  while ((ch=patArr[patIdxStart]) != '*' && strIdxStart <= strIdxEnd) {\n    if (ch != '?') {\n      if (different(caseSensitive,ch,strArr[strIdxStart])) {\n        return false;\n      }\n    }\n    patIdxStart++;\n    strIdxStart++;\n  }\n  if (strIdxStart > strIdxEnd) {\n    for (int i=patIdxStart; i <= patIdxEnd; i++) {\n      if (patArr[i] != '*') {\n        return false;\n      }\n    }\n    return true;\n  }\n  while ((ch=patArr[patIdxEnd]) != '*' && strIdxStart <= strIdxEnd) {\n    if (ch != '?') {\n      if (different(caseSensitive,ch,strArr[strIdxEnd])) {\n        return false;\n      }\n    }\n    patIdxEnd--;\n    strIdxEnd--;\n  }\n  if (strIdxStart > strIdxEnd) {\n    for (int i=patIdxStart; i <= patIdxEnd; i++) {\n      if (patArr[i] != '*') {\n        return false;\n      }\n    }\n    return true;\n  }\n  while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {\n    int patIdxTmp=-1;\n    for (int i=patIdxStart + 1; i <= patIdxEnd; i++) {\n      if (patArr[i] == '*') {\n        patIdxTmp=i;\n        break;\n      }\n    }\n    if (patIdxTmp == patIdxStart + 1) {\n      patIdxStart++;\n      continue;\n    }\n    int patLength=patIdxTmp - patIdxStart - 1;\n    int strLength=strIdxEnd - strIdxStart + 1;\n    int foundIdx=-1;\n    strLoop:     for (int i=0; i <= strLength - patLength; i++) {\n      for (int j=0; j < patLength; j++) {\n        ch=patArr[patIdxStart + j + 1];\n        if (ch != '?') {\n          if (different(caseSensitive,ch,strArr[strIdxStart + i + j])) {\n            continue strLoop;\n          }\n        }\n      }\n      foundIdx=strIdxStart + i;\n      break;\n    }\n    if (foundIdx == -1) {\n      return false;\n    }\n    patIdxStart=patIdxTmp;\n    strIdxStart=foundIdx + patLength;\n  }\n  for (int i=patIdxStart; i <= patIdxEnd; i++) {\n    if (patArr[i] != '*') {\n      return false;\n    }\n  }\n  return true;\n}\n", "private static Object readFieldValue(final Object obj,final Field field){\n  try {\n    return field.get(obj);\n  }\n catch (  Exception ex) {\n    throw new JBBPException(\"Can't get falue from field [\" + field + ']',ex);\n  }\n}\n", "    public String image() {\n\treturn image;\n    }\n", "public void onReachedTaskBlock ( ) { workerReachedBlock = BOOL_ ; timeBlockReached = System . currentTimeMillis ( ) ; this . worker . setWorking ( BOOL_ ) ; worker . adaptItem ( worker . worldObj . getBlockState ( new BlockPos ( posX , posY , posZ ) ) . getBlock ( ) . getMaterial ( ) ) ; }", "public TargetInformationReply ( final int packetId , final int errorCode , final TargetInformation targetInformation ) { super ( packetId , errorCode ) ; if ( success ( ) ) { Preconditions . checkNotNull ( targetInformation , STR_ ) ; } else { if ( target", "protected void broadcast ( CallEvent event ) { if ( mCallEventListener != null ) { mCallEventListener . receive ( event ) ; } }", "public static snmp_manager[] get(nitro_service client) throws Exception\r\n\t{\r\n\t\tsnmp_manager resource = new snmp_manager();\r\n\t\tresource.validate(\"get\");\r\n\t\treturn (snmp_manager[]) resource.get_resources(client);\r\n\t}", "\tprivate void dialogChanged() {\n\t\tif( pjc == null ){\n\t\t\tupdateStatus( \"Invalid project!\" );\n\t\t\treturn;\n\t\t}\n\t\tif( !pjc.isConnected() ) {\n\t\t\tif( dbConnectionComposite.getComboDbIni().length() == 0 ) {\n\t\t\t\tupdateStatus( \"Select db.ini\" );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif( dbConnectionComposite.getComboDbIniIndex().length() == 0 ) {\n\t\t\t\tupdateStatus( \"Select db.ini connection to db\" );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif( dbConnectionComposite.getTextUser().length() == 0 ) {\n\t\t\t\tupdateStatus( \"Insert username (and password if needed)\" );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif( !pjc.isConnected() ) {\n\t\t\t\tupdateStatus( \"Complete db connection [CLICK CONNECT]\" );\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tupdateStatus( null );\n\t\t}\n\t}\n", "public void dispose ( ) { mCallEventBroadcaster . dispose ( ) ; mCallEventBroadcaster = null ; mChangedAttributeListener = null ; mDecoderStateListener = null ; mMetadataListener = null ; mAliasList = null ; }", "public void addColumn(final String content){\n  if (!firstColumn) {\n    out.print(columnSeparator);\n  }\n  out.print(StringUtil.escapeString(content));\n  firstColumn=false;\n}\n", "private static float [ ] normalize ( float [ ] coefficients ) { float accumulator = NUM_ ; for ( int x = NUM_ ; x < coefficients . length ; x ++ ) { accumulator += Math . abs ( coefficients [ x ] ) ; } for ( int x = NUM_ ; x < coefficients . length ; x ++ ) { coefficients [ x ] = coefficients [ x ] / accumulator ; } return coefficients ; }", "\tfinal public boolean includesDivisionBy(ExpressionValue val) {\n\t\tif (operation == DIVIDE) {\n\t\t\tif (right.contains(val))\n\t\t\t\treturn true;\n\n\t\t\tif (left.isExpressionNode()\n\t\t\t\t\t&& ((ExpressionNode) left).includesDivisionBy(val))\n\t\t\t\treturn true;\n\t\t} else {\n\t\t\tif (left.isExpressionNode()\n\t\t\t\t\t&& ((ExpressionNode) left).includesDivisionBy(val))\n\t\t\t\treturn true;\n\n\t\t\tif (right != null && right.isExpressionNode()\n\t\t\t\t\t&& ((ExpressionNode) right).includesDivisionBy(val))\n\t\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n", "    public void setValue(int numValue, String value) throws WizardException {\n        switch (numValue) {\n            case 0:\n                cboMountPoint.setSelectedItem(value);\n            case 1:\n                txtVolumeName.setText(value);\n            case 2:\n                cboVolumeType.setSelectedItem(value);\n            default:\n                throw new WizardException(mediBundle.getString(\"Volume2DbPanel_value_non_valid\"));\n        }\n    }\n", "public void removeCache ( String uri , int maxWidth , int maxHeight , ImageView . ScaleType scaleType ) { mImageLoader . removeCache ( uri , maxWidth , maxHeight , scaleType ) ; }", "    public int findInvSlot(Player p) {\n        if (p == null) {\n            return -1;\n        }\n        for (int i = 0; i < p.items.length; i++) {\n            if (p.items[i] == -1) {\n                return i;\n            }\n        }\n        return -1;\n    }\n", "private String getTSUIDForMetric(final String query_string, TSDB tsdb) {\n    if (query_string == null || query_string.isEmpty()) {\n      throw new BadRequestException(\"The query string was empty\");\n    }\n    \n    // m is of the following forms:\n    // metric[{tag=value,...}]\n    // where the parts in square brackets `[' .. `]' are optional.\n    final HashMap<String, String> tags = new HashMap<String, String>();\n    String metric = null;\n    try {\n      metric = Tags.parseWithMetric(query_string, tags);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(e);\n    }\n    \n    // sort the UIDs on tagk values\n    final ByteMap<byte[]> tag_uids = new ByteMap<byte[]>();\n    for (final Entry<String, String> pair : tags.entrySet()) {\n      tag_uids.put(tsdb.getUID(UniqueIdType.TAGK, pair.getKey()), \n          tsdb.getUID(UniqueIdType.TAGV, pair.getValue()));\n    }\n    \n    // Byte Buffer to generate TSUID, pre allocated to the size of the TSUID\n    final ByteArrayOutputStream buf = new ByteArrayOutputStream(\n        TSDB.metrics_width() + tag_uids.size() * \n        (TSDB.tagk_width() + TSDB.tagv_width()));\n    try {\n      buf.write(tsdb.getUID(UniqueIdType.METRIC, metric));\n      for (final Entry<byte[], byte[]> uids: tag_uids.entrySet()) {\n        buf.write(uids.getKey());\n        buf.write(uids.getValue());\n      }\n    } catch (IOException e) {\n      throw new BadRequestException(e);\n    }\n    final String tsuid = UniqueId.uidToString(buf.toByteArray());\n    \n    return tsuid;\n  }", "public Builder userStreamAcl ( StreamAcl userStreamAcl ) { this . userStreamAcl = userStreamAcl ; return this ; }", "private boolean usingNewAPI ( JndiNameEnvironment envDescriptor ) { if ( getInjectionInfoMethod == null ) { try { getInjectionInfoMethod = envDescriptor . getClass ( ) . getMethod ( STR_ , String . class ) ; usingNewAPI = BOOL_ ; } catch ( NoSuchMethodExc", "    public void printProfile() {\n        if (profile == null) {\n            System.out.println(\"No profile collected\");\n        } else {\n            ArrayList counts = new ArrayList();\n            counts.addAll(profile.values());\n            Collections.sort(counts);\n            System.out.println(\"LP engine rule profile\");\n            for (Iterator i = counts.iterator(); i.hasNext(); ) {\n                System.out.println(i.next());\n            }\n        }\n    }\n", "@Pure\n\tprotected XExpression fromString(String expression) {\n\t\tif (!Strings.isEmpty(expression)) {\n\t\t\tResourceSet resourceSet = this.context.eResource().getResourceSet();\n\t\t\tURI uri = computeUnusedUri(resourceSet);\n\t\t\tResource resource = getResourceFactory().createResource(uri);\n\t\t\tresourceSet.getResources().add(resource);\n\t\t\ttry (StringInputStream is = new StringInputStream(generateExpressionCode(expression))) {\n\t\t\t\tresource.load(is, null);\n\t\t\t\tSarlScript script = resource.getContents().isEmpty() ? null : (SarlScript) resource.getContents().get(0);\n\t\t\t\tSarlEvent topElement = (SarlEvent) script.getXtendTypes().get(0);\n\t\t\t\tSarlField member = (SarlField) topElement.getMembers().get(0);\n\t\t\t\treturn member.getInitialValue();\n\t\t\t} catch (Throwable exception) {\n\t\t\t\tthrow new RuntimeException(exception);\n\t\t\t} finally {\n\t\t\t\tresourceSet.getResources().remove(resource);\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalArgumentException(\"not a valid expression\");\n\t}", "protected static Long convertTimepointToBucketingLong(Date timepointToBeConverted){\n  if (timepointToBeConverted == null) {\n    return null;\n  }\n  Long toReturn=timepointToBeConverted.getTime() - PrimaryIndexBucketGeneratorImpl.TIMEPOINT_MIN;\n  if (toReturn < 0l) {\n    return 0l;\n  }\n else   if (toReturn > PrimaryIndexBucketGeneratorImpl.TIMEPOINT_MAX) {\n    return PrimaryIndexBucketGeneratorImpl.TIMEPOINT_MAX;\n  }\n else {\n    return toReturn;\n  }\n}\n", "private void deliverBeatAnnouncement(final Beat beat) {\n        for (final MasterListener listener : getMasterListeners()) {\n            try {\n                listener.newBeat(beat);\n            } catch (Throwable t) {\n                logger.warn(\"Problem delivering master beat announcement to listener\", t);\n            }\n        }\n    }", "public TriggerContext ( final JsonValue savedContext , final ClassLoader classLoader ) throws ResourceException { super ( savedContext , classLoader ) ; }", "public static < A , S > List < A > unfold_ ( S z , Function < S , Result < Tuple < A , S > > > f ) { return f . apply ( z ) . map ( null ) . getOrElse ( list ( ) ) ; }", "public static synchronized void close ( ) { for ( ModbusSlave slave : new ArrayList < ModbusSlave > ( slaves . values ( ) ) ) { slave . close ( ) ; } }", "public void testSubList ( ) { Range range = createRange ( NUM_ , NUM_ ) ; List subList = range . subList ( NUM_ , NUM_ ) ; assertEquals ( STR_ , NUM_ , subList . size ( ) ) ; assertTrue ( STR_ , subList instanceof Range ) ; Range subListRange = ( Range ) ", "public void publishExpiredQuietly(Cache<K, V> cache, K key, V value) {\n    publish(cache, EventType.EXPIRED, key, value, /* newValue */ null, /* quiet */ true);\n  }", "protected void processMetadataInitialization(HttpServletRequest request) throws ServletException {\n\n        // In case the hosted IdP metadata weren't initialized, let's do it now\n        if (manager.getHostedIdpName() == null) {\n\n            synchronized (IdpMetadataManager.class) {\n\n                if (manager.getHostedIdpName() == null) {\n\n                    try {\n\n                        log.info(\n                                \"No default metadata configured, generating with default values, please pre-configure metadata for production use\");\n\n                        // Defaults\n                        String alias = generator.getEntityAlias();\n                        String baseURL = getDefaultBaseURL(request);\n\n                        // Use default baseURL if not set\n                        if (generator.getEntityBaseURL() == null) {\n                            log.warn(\n                                    \"Generated default entity base URL {} based on values in the first server request. Please set property entityBaseURL on MetadataGenerator bean to fixate the value.\",\n                                    baseURL);\n                            generator.setEntityBaseURL(baseURL);\n                        } else {\n                            baseURL = generator.getEntityBaseURL();\n                        }\n\n                        // Use default entityID if not set\n                        if (generator.getEntityId() == null) {\n                            generator.setEntityId(getDefaultEntityID(baseURL, alias));\n                        }\n\n                        // Ensure supported nameID formats in uaa are listed in the metadata\n                        Collection<String> supportedNameID = Arrays.asList(NameIDType.EMAIL, NameIDType.PERSISTENT,\n                                NameIDType.UNSPECIFIED);\n                        generator.setNameID(supportedNameID);\n\n                        EntityDescriptor descriptor = generator.generateMetadata();\n                        ExtendedMetadata extendedMetadata = generator.generateExtendedMetadata();\n\n                        log.info(\"Created default metadata for system with entityID: \" + descriptor.getEntityID());\n                        MetadataMemoryProvider memoryProvider = new MetadataMemoryProvider(descriptor);\n                        memoryProvider.initialize();\n                        MetadataProvider metadataProvider = new ExtendedMetadataDelegate(memoryProvider,\n                                extendedMetadata);\n\n                        manager.addMetadataProvider(metadataProvider);\n                        manager.setHostedIdpName(descriptor.getEntityID());\n                        manager.refreshMetadata();\n\n                    } catch (MetadataProviderException e) {\n                        log.error(\"Error generating system metadata\", e);\n                        throw new ServletException(\"Error generating system metadata\", e);\n                    }\n\n                }\n\n            }\n\n        }\n\n    }", "private static String addIDPPPrefix(String expression){\n  if (expression == null || expression.length() == 0) {\n    return expression;\n  }\n  if (expression.indexOf(\"/\") == -1) {\n    debug.error(\"IDPPUtils:addIDPPPrefix:Not a valid expression\");\n    return expression;\n  }\n  StringBuffer sb=new StringBuffer(100);\n  StringTokenizer st=new StringTokenizer(expression,\"/\");\n  while (st.hasMoreTokens()) {\n    String temp=(String)st.nextToken();\n    String prefixedStr=\"/\" + idppPrefix + \":\"+ temp;\n    sb.append(prefixedStr);\n  }\n  return sb.toString();\n}\n", "public CodonFitnessFunction(int codonCount,double alpha,double beta,double pInv){\n  GammaDistribution gamma=new GammaDistribution(beta,alpha);\n  stateSize=20;\n  fitness=new double[codonCount][stateSize];\n  byte[] aaFittest=new byte[codonCount];\n  fittest=getFittestGenome(codonCount,aaFittest);\n  for (int i=0; i < codonCount; i++) {\n    fitness[i][aaFittest[i]]=1.0;\n    for (int j=0; j < stateSize; j++) {\n      if (j != aaFittest[i]) {\n        if (MathUtils.nextDouble() < pInv) {\n          fitness[i][j]=0.0;\n        }\n else {\n          double prob=Math.round(MathUtils.nextDouble() * 1000.0) / 1000.0;\n          while ((prob <= 0.0) || (prob >= 1.0)) {\n            prob=Math.round(MathUtils.nextDouble() * 1000.0) / 1000.0;\n          }\n          fitness[i][j]=Math.max(0.0,1.0 - gamma.quantile(prob));\n        }\n      }\n    }\n  }\n}\n", "protected void activate(ComponentContext compcontext) {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n            Tr.debug(tc, \"Activating \" + this.getClass().getName());\n        }\n        this.unauthenticatedSubjectServiceRef.activate(compcontext);\n    }", "\tpublic boolean disconnect(){\n\t\ttry {\n\t\t\tnetwork.disconnect();\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Client exception: \" + e.getMessage());\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n", "    public boolean isBackgroundVisible(){\n    \treturn this.backgroundVisible;\n    }\n", "public SLMapServerInfo ( ) { this ( STR_ ) ; }", "public boolean isEmbeddedProtocol ( ) { return StringUtils . equalsIgnoreCase ( getProtocol ( ) , EMBEDDED_SPACE_PROTOCOL ) ; }", "public void transformDownSamplerToRollupQuery(final Aggregator group_by, \n      final String str_interval)  {\n    \n    if (downsampler != null && downsampler.getInterval() > 0) {\n      if (tsdb.getRollupConfig() != null) {\n        try {\n          best_match_rollups = tsdb.getRollupConfig().\n              getRollupInterval(downsampler.getInterval() / 1000, str_interval);\n          //It is thread safe as each thread will be working on unique \n          // TsdbQuery object\n          //RollupConfig.getRollupInterval guarantees that, \n          //  it always return a non-empty list\n          // TODO\n          rollup_query = new RollupQuery(best_match_rollups.remove(0), \n                  downsampler.getFunction(), downsampler.getInterval(),\n                  group_by);\n          if (group_by == Aggregators.COUNT) {\n            aggregator = Aggregators.SUM;\n          }\n        }\n        catch (NoSuchRollupForIntervalException nre) {\n          LOG.error(\"There is no such rollup for the downsample interval \"\n            + str_interval + \". So fall back to the  default tsdb down\"\n            + \" sampling approach and it requires raw data scan.\" );\n          //nullify the rollup_query if this api is called explicitly\n          rollup_query = null;\n          return;\n        }\n        \n        if (rollup_query.getRollupInterval().isDefaultInterval()) {\n          //Anyways it is a scan on raw data\n          rollup_query = null;\n        }\n      }       \n    }\n  }", "public String chooseServerAlias(String keyType,Principal[] issuers,Socket sock){\n  return sunX509KeyManager.chooseServerAlias(keyType,issuers,sock);\n}\n", "@Override\n    public UIDefaults getDefaults() {\n        if (uiDefaults == null) {\n            uiDefaults =  new UIWrapper(super.getDefaults());\n\n            // Install Keybindings for the operating system.\n            if (PlatformUtils.isWindows()) {\n    ", "public SlickForm withField ( FormField field ) { this . formFields . add ( field ) ; return this ; }", "public static boolean isChildOf(Resource file,Resource dir){\n  while (file != null) {\n    if (file.equals(dir))     return true;\n    file=file.getParentResource();\n  }\n  return false;\n}\n", "public void addSubItem(WebMenuItem item){\n\t\tif (subMenu == null){\n\t\t\tsubMenu = new ArrayList<WebMenuItem>();\n\t\t}\n\t\tsubMenu.add(item);\n\t}", "public Observable<VaultExtendedInfoResourceInner> createOrUpdateAsync(String resourceGroupName, String vaultName, VaultExtendedInfoResourceInner resourceResourceExtendedInfoDetails) {\n        return createOrUpdateWithServiceResponseAsync(resourceGroupName, vaultName, resourceResourceExtendedInfoDetails).map(new Func1<ServiceResponse<VaultExtendedInfoResourceInner>, VaultExtendedInfoResourceInner>() {\n            @Override\n            public VaultExtendedInfoResourceInner call(ServiceResponse<VaultExtendedInfoResourceInner> response) {\n                return response.body();\n            }\n        });\n    }", "    private void setCertificateToPartner( Partner partner, KeystoreCertificate certificate, int category, int prio){\n        partner.getPartnerCertificateInformationList().insertNewCertificate(certificate.getSerialNumberDEC(), category, prio);\n        this.certificateAccess.storePartnerCertificateInformationList(partner);\n        //display the changes in the certificates for the user in the log\n        this.logger.fine( partner.getPartnerCertificateInformationList().getCertificatePurposeDescription(this.certificateManager, partner, category));\n    }\n", "@SuppressWarnings(\"unchecked\") public static Object parseMemberValue(Class<?> memberType,ByteBuffer buf,ConstantPool constPool,Class<?> container){\n  Object result=null;\n  int tag=buf.get();\nswitch (tag) {\ncase 'e':\n    return parseEnumValue((Class<? extends Enum<?>>)memberType,buf,constPool,container);\ncase 'c':\n  result=parseClassValue(buf,constPool,container);\nbreak;\ncase '@':\nresult=parseAnnotation(buf,constPool,container,true);\nbreak;\ncase '[':\nreturn parseArray(memberType,buf,constPool,container);\ndefault :\nresult=parseConst(tag,buf,constPool);\n}\nif (!(result instanceof ExceptionProxy) && !memberType.isInstance(result)) result=new AnnotationTypeMismatchExceptionProxy(result.getClass() + \"[\" + result+ \"]\");\nreturn result;\n}\n", "public void queueEvent(KeenProject project, String eventCollection, Map<String, Object> event,\n                           Map<String, Object> keenProperties, final KeenCallback callback) {\n\n        if (!isActive) {\n            handleLibraryInactive(callback);\n            return;\n        }\n\n        if (project == null && defaultProject == null) {\n            handleFailure(null,\n                          project,\n                          eventCollection,\n                          event,\n                          keenProperties,\n                          new IllegalStateException(\n                                  \"No project specified, but no default project found\"));\n            return;\n        }\n        KeenProject useProject = (project == null ? defaultProject : project);\n\n        try {\n            // Build the event\n            Map<String, Object> newEvent =\n                    validateAndBuildEvent(useProject, eventCollection, event, keenProperties);\n\n            // Serialize the event into JSON.\n            StringWriter writer = new StringWriter();\n            jsonHandler.writeJson(writer, newEvent);\n            String jsonEvent = writer.toString();\n            KeenUtils.closeQuietly(writer);\n\n            try {\n                // Save the JSON event out to the event store.\n                Object handle = eventStore.store(useProject.getProjectId(), eventCollection, jsonEvent);\n\n                if (eventStore instanceof KeenAttemptCountingEventStore) {\n                    synchronized (attemptsLock) {\n                        Map<String, Integer> attempts = getAttemptsMap(useProject.getProjectId(), eventCollection);\n                        attempts.put(\"\" + handle.hashCode(), maxAttempts);\n                        setAttemptsMap(useProject.getProjectId(), eventCollection, attempts);\n                    }\n                }\n            } catch(IOException ex) {\n                KeenLogging.log(\"Failed to set the event POST attempt count. The event was still \" +\n                        \"queued and will we POSTed.\");\n            }\n            handleSuccess(callback, project, eventCollection, event, keenProperties);\n        } catch (Exception e) {\n            handleFailure(callback, project, eventCollection, event, keenProperties, e);\n        }\n    }", "public boolean hasNotification ( int entryId ) { return mCenter . hasEntry ( ID , entryId ) ; }", "public void checkAccess(String pHost, String pAddress, String pOrigin) {\n        if (!backendManager.isRemoteAccessAllowed(pHost, pAddress)) {\n            throw new SecurityException(\"No access from client \" + pAddress + \" allowed\");\n        }\n        if (!backendManager.isOriginAllowed(pOrigin,true)) {\n            throw new SecurityException(\"Origin \" + pOrigin + \" is not allowed to call this agent\");\n        }\n    }", "@SuppressWarnings(\"unchecked\") <T>T parse(Class<T> clazz) throws JsonParserException {\n  advanceToken();\n  Object parsed=currentValue();\n  if (advanceToken() != Token.EOF)   throw createParseException(null,\"Expected end of input, got \" + token,true);\n  if (clazz != Object.class && (parsed == null || clazz != parsed.getClass()))   throw createParseException(null,\"JSON did not contain the correct type, expected \" + clazz.getName() + \".\",true);\n  return (T)(parsed);\n}\n", "private JobDataMap createJobDataMap ( String jobName , ScheduleConfig scheduleConfig ) { String invokeService = scheduleConfig . getInvokeService ( ) ; Object invokeContext = scheduleConfig . getInvokeContext ( ) ; String invokeLogLevel = scheduleConfig . getInvokeLogLevel ( ) ; JobDataMap map = new JobDataMap ( ) ; map . put ( ScheduledService . CONFIG_NAME , STR_ + ( jobName != null ? STR_ + jobName : STR_ ) ) ; map . put ( ScheduledService . CONFIGURED_INVOKE_SERVICE , invokeService ) ; map . put ( ScheduledService . CONFIGURED_INVOKE_CONTEXT , invokeContext ) ; map . put ( ScheduledService . CONFIGURED_INVOKE_LOG_LEVEL , invokeLogLevel ) ; map . put ( CONFIG , scheduleConfig . getConfig ( ) . toString ( ) ) ; return map ; }", "\tprotected void tearDown() throws Exception {\n\t\tsuper.tearDown();\n        \n        if (isTruncate()) {\n            String spcFile = scriptsDir + spcFilesDir + \"ProteinHitUtils.spc\";\n            String commandString = scriptsDir + \"load_test_data.pl --mode=unload --file=\" \n                + spcFile;\n            if (logger.isDebugEnabled()) {\n                commandString += \" --debug\";\n            }\n\n            RunSystemCommand runCommand = new RunSystemCommand();\n\n            try {\n                runCommand.runCommand(commandString);\n            }\n            catch (Throwable e) {\n                throw new Exception(e.getMessage());\n            }\n            finally {\n            }          \n        }\n\t}\n", "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(1);\n  newVector.addElement(new Option(\"\\ttreat missing values as a seperate \" + \"value.\",\"M\",0,\"-M\"));\n  return newVector.elements();\n}\n", "private void complete(Object value) {\n        future.complete(value);\n        if (context.invocationRegistry.deregister(this) && taskDoneCallback != null) {\n            context.asyncExecutor.execute(taskDoneCallback);\n        }\n    }", "private void writeBlock(DataInputStream in,\n      VersionAndOpcode versionAndOpcode) throws IOException {\n    DatanodeInfo srcDataNode = null;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"writeBlock receive buf size \" + s.getReceiveBufferSize() +\n                \" tcp no delay \" + s.getTcpNoDelay());\n    }\n    //\n    // Read in the header\n    //\n    long startTime = System.currentTimeMillis();\n    \n    WriteBlockHeader headerToReceive = new WriteBlockHeader(\n        versionAndOpcode);\n    headerToReceive.readFields(in);\n\n    WriteOptions options = headerToReceive.getWritePipelineInfo()\n        .getWriteOptions();\n    boolean ioprioEnabled = !options.isIoprioDisabled();\n    if (ioprioEnabled) {\n      NativeIO.ioprioSetIfPossible(options.getIoprioClass(),\n          options.getIoprioData());\n    }\n\n    int namespaceid = headerToReceive.getNamespaceId();\n    Block block = new Block(headerToReceive.getBlockId(), \n        dataXceiverServer.estimateBlockSize, headerToReceive.getGenStamp());\n    if (LOG.isInfoEnabled()) {\n      if (remoteAddress == null) {\n        getAddresses();\n      }\n      LOG.info(\"Receiving block \" + block + \n               \" src: \" + remoteAddress +\n               \" dest: \" + localAddress);\n    }\n    int pipelineSize = headerToReceive.getPipelineDepth(); // num of datanodes in entire pipeline\n    boolean isRecovery = headerToReceive.isRecoveryFlag(); // is this part of recovery?\n    String client = headerToReceive.getWritePipelineInfo().getClientName(); // working on behalf of this client\n    boolean hasSrcDataNode = headerToReceive.getWritePipelineInfo()\n        .hasSrcDataNode(); // is src node info present\n    if (hasSrcDataNode) {\n      srcDataNode = headerToReceive.getWritePipelineInfo().getSrcDataNode();\n    }\n    int numTargets = headerToReceive.getWritePipelineInfo().getNumTargets();\n    DatanodeInfo targets[] = headerToReceive.getWritePipelineInfo().getNodes();\n    int fadvise = headerToReceive.getWritePipelineInfo().getWriteOptions()\n        .getFadvise();\n\n    DataOutputStream mirrorOut = null;  // stream to next target\n    DataInputStream mirrorIn = null;    // reply from next target\n    DataOutputStream replyOut = null;   // stream to prev target\n    Socket mirrorSock = null;           // socket to next target\n    BlockReceiver blockReceiver = null; // responsible for data handling\n    String mirrorNode = null;           // the name:port of next target\n    String firstBadLink = \"\";           // first datanode that failed in connection setup\n\n    updateCurrentThreadName(\"receiving block \" + block + \" client=\" + client);\n    InjectionHandler.processEvent(InjectionEvent.DATANODE_WRITE_BLOCK);\n    try {\n      boolean ifProfileEnabled = headerToReceive.getWritePipelineInfo()\n          .getWriteOptions().ifProfileEnabled();\n      boolean isSecondary = (targets.length + 1 != pipelineSize);\n      // open a block receiver and check if the block does not exist\n      blockReceiver = new BlockReceiver(namespaceid, block, block, in, \n          s.getRemoteSocketAddress().toString(),\n          s.getLocalSocketAddress().toString(),\n          isRecovery, client, srcDataNode, datanode, isSecondary, fadvise,\n          ifProfileEnabled, versionAndOpcode.getDataTransferVersion() >=\n            DataTransferProtocol.PACKET_INCLUDE_VERSION_VERSION,\n            options.getSyncFileRange());\n\n      // get a connection back to the previous target\n      replyOut = new DataOutputStream(new BufferedOutputStream(\n                     NetUtils.getOutputStream(s, datanode.socketWriteTimeout),\n                     SMALL_BUFFER_SIZE));\n\n      //\n      // Open network conn to backup machine, if \n      // appropriate\n      //\n      if (targets.length > 0) {\n        InetSocketAddress mirrorTarget = null;\n        // Connect to backup machine\n        mirrorNode = targets[0].getName();\n        mirrorTarget = NetUtils.createSocketAddr(mirrorNode);\n        mirrorSock = datanode.newSocket();\n        try {\n          int timeoutValue = datanode.socketTimeout +\n                             (datanode.socketReadExtentionTimeout * numTargets);\n          int writeTimeout = datanode.socketWriteTimeout + \n                             (datanode.socketWriteExtentionTimeout * numTargets);\n          NetUtils.connect(mirrorSock, mirrorTarget, timeoutValue);\n          mirrorSock.setSoTimeout(timeoutValue);\n          mirrorSock.setSendBufferSize(DEFAULT_DATA_SOCKET_SIZE);\n          mirrorOut = new DataOutputStream(\n             new BufferedOutputStream(\n                         NetUtils.getOutputStream(mirrorSock, writeTimeout),\n                         SMALL_BUFFER_SIZE));\n          mirrorIn = new DataInputStream(NetUtils.getInputStream(mirrorSock));\n\n          // Write header: Copied from DFSClient.java!\n          WriteBlockHeader headerToSend = new WriteBlockHeader(\n              versionAndOpcode.getDataTransferVersion(), namespaceid,\n              block.getBlockId(), block.getGenerationStamp(), pipelineSize,\n              isRecovery, hasSrcDataNode, srcDataNode, targets.length - 1, targets,\n              client);\n          headerToSend.getWritePipelineInfo().setWriteOptions(options);\n          headerToSend.writeVersionAndOpCode(mirrorOut);\n          headerToSend.write(mirrorOut);\n          blockReceiver.writeChecksumHeader(mirrorOut);\n          mirrorOut.flush();\n\n          // read connect ack (only for clients, not for replication req)\n          if (client.length() != 0) {\n            firstBadLink = Text.readString(mirrorIn);\n            if (LOG.isDebugEnabled() || firstBadLink.length() > 0) {\n              LOG.info(\"Datanode \" + targets.length +\n                       \" got response for connect ack \" +\n                       \" from downstream datanode with firstbadlink as \" +\n                       firstBadLink);\n            }\n          }\n\n        } catch (IOException e) {\n          if (client.length() != 0) {\n            Text.writeString(replyOut, mirrorNode);\n            replyOut.flush();\n          }\n          IOUtils.closeStream(mirrorOut);\n          mirrorOut = null;\n          IOUtils.closeStream(mirrorIn);\n          mirrorIn = null;\n          IOUtils.closeSocket(mirrorSock);\n          mirrorSock = null;\n          if (client.length() > 0) {\n            throw e;\n          } else {\n            LOG.info(datanode.getDatanodeInfo() + \":Exception transfering block \" +\n                     block + \" to mirror \" + mirrorNode +\n                     \". continuing without the mirror.\\n\" +\n                     StringUtils.stringifyException(e));\n          }\n        }\n      }\n\n      // send connect ack back to source (only for clients)\n      if (client.length() != 0) {\n        if (LOG.isDebugEnabled() || firstBadLink.length() > 0) {\n          LOG.info(\"Datanode \" + targets.length +\n                   \" forwarding connect ack to upstream firstbadlink is \" +\n                   firstBadLink);\n        }\n        Text.writeString(replyOut, firstBadLink);\n        replyOut.flush();\n      }\n\n      // receive the block and mirror to the next target\n      String mirrorAddr = (mirrorSock == null) ? null : mirrorNode;\n      long totalReceiveSize = blockReceiver.receiveBlock(mirrorOut, mirrorIn, replyOut,\n                                 mirrorAddr, null, targets.length);\n\n      // if this write is for a replication request (and not\n      // from a client), then confirm block. For client-writes,\n      // the block is finalized in the PacketResponder.\n      if (client.length() == 0) {\n        datanode.notifyNamenodeReceivedBlock(namespaceid, block, null);\n        LOG.info(\"Received block \" + block + \n                 \" src: \" + remoteAddress +\n                 \" dest: \" + localAddress +\n                 \" of size \" + block.getNumBytes());\n      } else {\n        // Log the fact that the block has been received by this datanode and\n        // has been written to the local disk on this datanode.\n        LOG.info(\"Received Block \" + block +\n            \" src: \" + remoteAddress +\n            \" dest: \" + localAddress +\n            \" of size \" + block.getNumBytes() +\n            \" and written to local disk\");\n      }\n\n      if (datanode.blockScanner != null) {\n        datanode.blockScanner.addBlock(namespaceid, block);\n      }\n      \n      long writeDuration = System.currentTimeMillis() - startTime;\n      datanode.myMetrics.bytesWrittenLatency.inc(writeDuration);\n      if (totalReceiveSize > KB_RIGHT_SHIFT_MIN) {\n        datanode.myMetrics.bytesWrittenRate.inc((int) (totalReceiveSize >> KB_RIGHT_SHIFT_BITS),\n                              writeDuration);\n      }\n\n    } catch (IOException ioe) {\n      LOG.info(\"WriteBlock: Got exception while receiving block: \" + block + \n                \" from \" + s.getInetAddress() + \", client: \" + client + \":\\n\" + \n                StringUtils.stringifyException(ioe) );\n      throw ioe;\n    } finally {\n      // close all opened streams\n      IOUtils.closeStream(mirrorOut);\n      IOUtils.closeStream(mirrorIn);\n      IOUtils.closeStream(replyOut);\n      IOUtils.closeSocket(mirrorSock);\n      IOUtils.closeStream(blockReceiver);\n    }\n  }", "public static base_responses unset(nitro_service client, String servicegroupname[], String args[]) throws Exception {\n\t\tbase_responses result = null;\n\t\tif (servicegroupname != null && servicegroupname.length > 0) {\n\t\t\tsslservicegroup unsetresources[] = new sslservicegroup[servicegroupname.length];\n\t\t\tfor (int i=0;i<servicegroupname.length;i++){\n\t\t\t\tunsetresources[i] = new sslservicegroup();\n\t\t\t\tunsetresources[i].servicegroupname = servicegroupname[i];\n\t\t\t}\n\t\t\tresult = unset_bulk_request(client, unsetresources,args);\n\t\t}\n\t\treturn result;\n\t}", "private void countHit ( final long threadId , final BigInteger breakpointAddress ) { if ( ! hitCounter . containsKey ( breakpointAddress ) ) { hitCounter . put ( breakpointAddress , NUM_ ) ; } hitCounter . put ( breakpointAddress , hitCounter . get ( breakpointAddress ) + NUM_ ) ; lastHits . put ( threadId , breakpointAddress ) ; }", "public int hashCode(){\n  int retval=0;\n  int len=available();\n  int p=pos;\n  for (int i=0; i < len; i++)   retval+=buf[p + i] * i;\n  return retval;\n}\n", "public Expression and ( Expression exp1 , Expression exp2 ) { return new LogicalExpression ( exp1 , exp2 , ExpressionType . AND ) ; }", "public DescribePendingMaintenanceActionsResult withPendingMaintenanceActions(ResourcePendingMaintenanceActions... pendingMaintenanceActions) {\n        if (this.pendingMaintenanceActions == null) {\n            setPendingMaintenanceActions(new java.util.ArrayList<ResourcePendingMaintenanceActions>(pendingMaintenanceActions.length));\n        }\n        for (ResourcePendingMaintenanceActions ele : pendingMaintenanceActions) {\n            this.pendingMaintenanceActions.add(ele);\n        }\n        return this;\n    }", "private static void pushAnnotations(\n      Deque<GraphAnnotationState> stack,\n      Collection<? extends Annotatable> haveAnnotations) {\n    stack.push(new GraphAnnotationState(haveAnnotations.size()));\n    for (Annotatable h : haveAnnotations) {\n      stack.peek().add(new AnnotationState(h, h.getAnnotation()));\n      h.setAnnotation(null);\n    }\n  }", "protected Object loadSpecial(ResultSet rs,int index) throws SQLException {\n  log.config(p_info.getColumnName(index));\n  if (index == get_ColumnIndex(\"ColorType\"))   return rs.getString(index + 1);\n  return null;\n}\n", "public static void addCommentTagLines ( final ZyLabelContent content , final INaviViewNode node , final List < IComment > localComment , final List < IComment > globalComment ) { addCommentLines ( content , node , localComment , globalComment ) ; addTagLi", "public LocalVolTermStructure ( final Date referenceDate ) { this ( referenceDate , new Calendar ( ) , BusinessDayConvention . Following , new DayCounter ( ) ) ; }", "    private void set(Function function) {\n        if (function != null) {\n            functionId = function.getFunctionID();\n        } else {\n            functionId = null;\n        }\n    }\n", "@Override\n    public void sendMessage(String subject, String message) {\n        first.sendMessage(subject, message);\n        second.sendMessage(subject, message);\n    }", "\tpublic void mouseUp(MouseEvent e, int x, int y) {\n\t\tif (e.isPopupTrigger()) {\n\t\t\thandlePopupMenu(e, x, y);\n\t\t\t\t// Patch JHotDraw 5.4b1\n\t\t\t\tsuper.mouseUp(e, x, y);\n\t\t}\n\t\telse if (e.getClickCount() == 2) {\n\t\t\t\t// Patch JHotDraw 5.4b1\n\t\t\t\tsuper.mouseUp(e, x, y);\n\t\t\thandleMouseDoubleClick(e, x, y);\n\t\t}\n\t\telse {\n\t\t\tsuper.mouseUp(e, x, y);\n\t\t\thandleMouseUp(e, x, y);\n\t\t\thandleMouseClick(e, x, y);\n\t\t}\n\t}\n", "public final void exclusiveOrExpression() throws RecognitionException {\n\t\tint exclusiveOrExpression_StartIndex = input.index();\n\n\t\ttry {\n\t\t\tif ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return; }\n\n\t\t\t// src/main/resources/org/drools/compiler/semantics/java/parser/Java.g:1154:5: ( andExpression ( '^' andExpression )* )\n\t\t\t// src/main/resources/org/drools/compiler/semantics/java/parser/Java.g:1154:9: andExpression ( '^' andExpression )*\n\t\t\t{\n\t\t\tpushFollow(FOLLOW_andExpression_in_exclusiveOrExpression5158);\n\t\t\tandExpression();\n\t\t\tstate._fsp--;\n\t\t\tif (state.failed) return;\n\t\t\t// src/main/resources/org/drools/compiler/semantics/java/parser/Java.g:1154:23: ( '^' andExpression )*\n\t\t\tloop146:\n\t\t\twhile (true) {\n\t\t\t\tint alt146=2;\n\t\t\t\tint LA146_0 = input.LA(1);\n\t\t\t\tif ( (LA146_0==61) ) {\n\t\t\t\t\talt146=1;\n\t\t\t\t}\n\n\t\t\t\tswitch (alt146) {\n\t\t\t\tcase 1 :\n\t\t\t\t\t// src/main/resources/org/drools/compiler/semantics/java/parser/Java.g:1154:25: '^' andExpression\n\t\t\t\t\t{\n\t\t\t\t\tmatch(input,61,FOLLOW_61_in_exclusiveOrExpression5162); if (state.failed) return;\n\t\t\t\t\tpushFollow(FOLLOW_andExpression_in_exclusiveOrExpression5164);\n\t\t\t\t\tandExpression();\n\t\t\t\t\tstate._fsp--;\n\t\t\t\t\tif (state.failed) return;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault :\n\t\t\t\t\tbreak loop146;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\treportError(re);\n\t\t\trecover(input,re);\n\t\t}\n\t\tfinally {\n\t\t\t// do for sure before leaving\n\t\t\tif ( state.backtracking>0 ) { memoize(input, 114, exclusiveOrExpression_StartIndex); }\n\n\t\t}\n\t}", "@Override public void run(){\nsynchronized (mSync) {\n    mRequestStop=false;\n    mRequestDrain=0;\n    mSync.notify();\n  }\n  final boolean isRunning=true;\n  boolean localRequestStop;\n  boolean localRequestDrain;\n  while (isRunning) {\nsynchronized (mSync) {\n      localRequestStop=mRequestStop;\n      localRequestDrain=(mRequestDrain > 0);\n      if (localRequestDrain)       mRequestDrain--;\n    }\n    if (localRequestStop) {\n      drain();\n      signalEndOfInputStream();\n      drain();\n      release();\n      break;\n    }\n    if (localRequestDrain) {\n      drain();\n    }\n else {\nsynchronized (mSync) {\n        try {\n          mSync.wait();\n        }\n catch (        final InterruptedException e) {\n          break;\n        }\n      }\n    }\n  }\n  if (DEBUG)   Log.d(TAG,\"Encoder thread exiting\");\nsynchronized (mSync) {\n    mRequestStop=true;\n    mIsCapturing=false;\n  }\n}\n"], "comment": ["register service handler by name", "checks if a specific table exists", "returns the singleton java code scanner", "will set statelabel to null", "compress one block of blocksize integers using pfordelta with the optimal parameter b", "get build the shape of the shade", "get the variable name at index", "returns the id of this node", "you are not supposed to instantiate this class .", "sets the rollover foreground color of the", "serialize and send a coordinator stream message .", "run is only enabled if the model is not in use", "print the tree contents in sorted order", "removes the global interceptor from the list", "create mnemonics of text containing \" & \" .", "returns the ie css bundle path from the context path", "checks if there is enough space on sdcard", "set the http . keepalive property to the given value .", "tests serialization of an instance", "merge two lists", "copies all the properties of the given json object except the children property to a new json object .", "handles the click on the remove button", "returns a filter that returns true if the file was last modified after the specified reference file .", "sets the diffuse color of the materials used for shapes drawn to the screen .", "the event type or types for which notifications are triggered .", "decodes the given base58 string into the original data bytes , using the checksum in the last 4 bytes of the decoded data to verify that the rest are correct .", "default impl of the user in all roles check hardcoded to false", "obtains basic file statistics containing only file size .", "writes an object to the given buffer .", "parse the dict object line and return the value of the key provided", "create a new path expression", "sets the angle attribute of the dsviewsplitter object", "sets the request start time of the request .", "run the application using spring boot and an embedded servlet engine .", "this will cause the weight values to be updated based on the learning rate momentum and the errors that have been calculated for each node", "go to a given position in a tape file", "generates mdfgetmofname method", "returns the icon to use for the passed in type", "initilize parameters for receiver", "prints a name expression", "returns virtual host shovels .", "creates a new action object .", "run the afs on the given string", "returns the list that is stored under the given key in the given map .", "start a put request to the given url", "subclass implements to perform the swf polling work .", "stops this store and purges all registered exchanges .", "read weights from a plain text file .", "control message request registeredinterests", "after receiving resume ( server ) or resume _ ok ( client ) calculate and send resume frames", "sets the patterns used to select remote files", "usually called from the rtmanager . ondestroy method", "retrieve the existing inodes along the given path .", "called when a debugger statement is executed", "sends send _ success automatically .", "forget a namedbean object created outside the manager .", "get the page flow instance that should be associated with the given path .", "stores the given key value pair overwriting any previous value if present", "flushes the stream", "returns the tip text for this property .", "fixes the command line arguments on windows by replacing empty arguments with \" \" .", "adds a listener object that is notified about changes in the tag .", "converts the array list of string to a concatenated string separated by a whitespace character", "checks if the resources is in the list of immutable resources .", "removes the this execution context from the context stack for the current thread .", "creates a new array containing the elements in the specified array .", "gets a list of the properties of all entity recognizers that you created , including recognizers currently in training .", "logs a thrown exception .", "determines whether a cloud has any affect on a given thing", "check whether the attribute is supported", "if a render kit was defined make it the current render kit", "get a talon sr instance from the registrar", "compares two player objects", "a list of user names .", "sets the font of the title text", "create a response with known length .", "creates a statement interceptor to monitor query response times", "inserts swing object rendered from an xml document into the given container", "renders directly to the given graphics", "returns true if e1 should be merged with e2", "returns all the commerce price list account rels matching the uuid and company .", "closes the index by closing its open leaf page if necessary", "creates the user for single user mode .", "called when a target channel is connected created", "fglocation operator const fglocation l", "summing up the quantity using primitive stream .", "splits file names separated by comma character .", "shows the dialog for the specified base dialog object", "the doget method of the servlet .", "addcyclecommand", "converts the block matrix into a simplematrix .", "provides the inverse cumulative distribution function for the distribution", "gets the name of this workflows service loader", "constructs a trends object from rawjson string .", "recycles the given nodes .", "log a message at the finer level", "addrequest add a new record request .", "refresh this object", "reset the statistics counters", "refines the initial line estimates using em .", "opens the http s connection submits any data and parses the response .", "creates a new instance .", "transform a sequence", "compute hmm hidden states", "release any acquired resources", "called after the given base type has been deleted .", "execute a query based on the sql string given", "add an output stream to the splitstream .", "creates a new waiter object .", "update a record", "add this data to the backup stream .", "adds a job to the job queue .", "this method is used to convert the string value given to an appropriate representation .", "set the names of uploaders with bad content to be empty", "check login status and build gui", "adds the new environment variable .", "return whether or not this typequalifiervalue denotes an exhaustive qualifier .", "copy existing definition to client", "perform the actual encoding of the shared object contents .", "returns a byte array containing the utf encoding of the given string .", "select elements from current list", "output the detected problems to the console", "this method performs both pre and post adjustment", "creates the gui of the panel .", "uninstall renderer i e other to apply other renderer", "moves the specified file to the trash", "update file system object with the smb share .", "uses an amadmin ssotoken to create an amidentity from the uid provided and checks whether the amidentity in context is active / inactive", "play the first item in the audio queue .", "creates or updates a bandwidth schedule .", "serializes the specified node and returns a string with the serialized data to the caller .", "loads the class from the class loader of the specified wirecontext", "adds an empty row at the given index .", "tear down instance variables required by this test case .", "makes sure all inbound lanes on given node have correct signs", "given an obfuscated description , finds the new values for class names and updates the description .", "checks if given sequence contains invalid characters .", "remove this email alert monitoring", "we make sure that the adapted class removes all references to the adaptor so as not to cause memory leaks", "call cost function computation and it gradient", "removes the file from the filelist", "generates the instructions to load the given method arguments on the stack .", "this is used internally by the framework", "returns the index parameter extracted from the flags .", "calculate the starting horizontal position for the line of indicator dots .", "prevent content length being set if page is parseable", "delegate the notification to the listener .", "allows derivative classes to handle the xml attrs without creating a typedarray themsevles", "set the color of tick marks and labels on the x axis", "no object utility class", "returns an internal flag specifying if the object is still handled by the relation service .", "sets the pan xyz position for this synth", "adds the incomming message to the chatarea", "get the id corresponding to the availability", "removes the log recursive .", "creates a new loader operation .", "return true iff new tasks are accepted and will be eventually executed while in this run state", "invoked when the user wants to highlight unhighlight a line .", "ensures that the specified tree node is collapsed", "get the 16 - byte beacon id as an upper - case hex string .", "apply mutation operation to bayesnet calculate score and as a side effect sets bayesnet parent sets .", "sends a message to chromevox indicating that it should enter or exit special content navigation .", "connect server via sftp", "here just for externalizable .", "creates a new function replacement object .", "put the line record", "returns true if a fake drag is in progress .", "creates a child element with the given name and appends it to the element child node list .", "initialization of the servlet .", "returns a reference for this managed connection factory .", "sets the best movement type and scale .", "change the tableheader to display this sort column and order .", "run the outlier detection algorithm", "remove the report directory .", "return the type of constant this attribute represents or null if not set", "creates or updates tags for the specified auto scaling group .", "replaces elements subtree with the text value in the xml document important ! ! this method removes entire subtree of the element and puts the text as a child node .", "gets the binding type to be used for the given java type", "converts the supplied array into a list .", "make sense of the cmd section", "this returns the read content", "returns an initiliazed instance of exitcommand component", "acquires database connection", "to be overidden called when a method on the interface proxy is invoked", "divisor and remainder are both positive or negative integers .", "build encoder message context .", "sends a packet from the server to all currently connected players", "creates a size 0 condition", "loads the complete list of users known to the database .", "invokes the registered beans methods passing them the space mode change event .", "this method lists all the entities inserted in datastore .", "instance class that is used to run this version .", "the metrics that are returned , including the metric name , namespace , and dimensions .", "removes a listener", "invoked if the name of a function has been changed .", "determines if the current log record is the earliest record in the log file .", "reads a packet from the given input stream", "appends names of the specified array classes to the buffer .", "returns whether a distorting transformation has been applied to the document .", "get for extract and length the first parameter as parameter list .", "turns the given file into the best absolute representation available", "returns an indication if this state is a substate of a concurrent state", "finalizes the ivf header and closes the file .", "shows a popup menu depending on the mouse event .", "parse json data from a json uri", "returns the average fitness of the agents in this swarm", "creates a new vector that is the a x b the cross product is the vector orthogonal to both a and b", "adds an attribute to the entire string .", "adds a dirty region", "write this object to given xmloutput .", "if positive , then call : list - changes", "inserts all of the elements in the specified collection into this list , starting at the specified position .", "clear failreference collections by specified launch id", "initialize with a fixed reference date", "returns the list of any direct string nodes of this node .", "returns the filename of the navigation element , i . e .", "handler for when an image was successfully loaded .", "clear log messages", "set the colors of the text and its shadow", "returns a map of all objects available within this directoryresource , filtering the returned map by the given permission , if specified .", "creates an empty stack .", "ui rendered when connected", "cycle through the notes one step upward", "handles requests to initialize chaincode", "factory method to build an action for creating an edge in the diagram", "returns true only if this object is a dictionary or a stream and the type entry in the dictionary matches a given value .", "return the first foreignkey with the matching name", "tells if the given resolution exists", "repaint the area containing the brush", "determines if the full copy create request is partial or full ; also gets the partial list of volumes if the request is partial", "returns the y value", "unregisters manager event listener", "write contents of a single row including separator .", "internal cleaning remove listeners", "contructs a new context menu .", "this parameter is reserved .", "same as the string . split except it doesn t use regexes so it s faster .", "for debug - only , the name of the type pointed to by this handle , if available .", "creates a new action object .", "tests whether the the specified tabase driver is in the projects class path", "creates the gui of the dialog .", "checks if is inside string .", "creates a new renderer object .", "fill background with color .", "the specified character of the sequence currently represented by the string buffer , as indicated by the index argument , is returned .", "create an instance with default properties .", "writes a populated dom xml ( timeml ) document to a given directory / file", "returns the angle between this point and that point .", "produce a comma delimited text row from a jsonarray .", "this is the fully qualified classname of the configurable class that this schema originates from .", "documentation inherited from interface", "override this method if need to translate data from variable or need to get data elsewhere .", "call this method when the user drags the mouse out of the web view after calling dragtargetdragenter .", "creates a unique device id .", "compares double fields with these explicitly specified top - level field numbers using the provided absolute tolerance .", "get the high order bits from the mantissa .", "print the navigation bar and header for the deprecated api listing", "join n sets .", "sleep until the specified timout amount and then interrupt the thread being monitored .", "creates an idquery using the specified type id and query result type .", "generates the tool tip text for an item in a dataset .", "assert that the given object is persistent", "initializes class and reads stream .", "private class getresult extends result . wrapper { private envkelp _ envkelp ; private rowcursor _ rowcursor ;", "subclasses override this method to do something before save", "convert the template and binding into a result string .", "checks to see if the destination is temporary and the connection used to create the temp destination is the same as the one trying to access it .", "returns the luminance of the given argb color", "you are not supposed to instantiate this class .", "delete lun group .", "convert histogram snapshot .", "print out object state for debugging purposes .", "generates the instruction to throw an exception .", "get the hashcode for this header", "reset the line width in use to the default for this graphics context", "adds an xml based message bundle .", "reshape the parameters view , without modifying the paramsview array values .", "displays format of commands .", "destruction of the servlet .", "checks if input is null or empty or just contains whitespace", "get the serialized resource bundle with the passed id .", "this operation will update advertiser object to the persistent", "handle service periodic maintenance calls .", "destroys the context", "unregister a messagelistener object", "adds a listener object that is notified about changes in the graph .", "creates a new jabextension", "a helper method to allow scripts to be run taking command line arguments", "matches comparator names from db against code schema", "this method unconditionally emits a message to the logging system but does not throw any exception .", "tells whether point p is whithin the component", "create a new instance", "do a post to a url and return the response stream for further processing elsewhere .", "possibly blocks worker w waiting for a task to steal , or returns false if the worker should terminate .", "stops all threads and releases all resources .", "lists all protection objects for the account .", "add a new update to run at any appropriate time .", "add the value to the container ( set the value to \" true \" ) , whether it already appears or not .", "get reader to response body using given character set .", "examine references backwards from the tail , evicting any that have become stale ( too long since they were last touched ) based on the timeout specified to the ctor ( this is a nop if the timeout is zero ( 0 ) ) .", "returns the height to use for an icon of this size", "reads all tasks for a project", "produces an empty node whose count is zero , has no children and no content .", "makes this bdd be the logical and of two bdds", "a testing hook to set the cached suites to have predictable keys", "remove any operations which were added by a given module", "gets the width of the bottom edge of the areaframe", "creates an intent that will allow to send an sms to a phone number", "removes archive location to archive location list", "return size of vector", "returns a set of default excludes with user - defined excludes .", "constructs a user password reset options data object", "updates the ui state for the expanded to maximized transition ( and vice versa ) , according to a completion | percentage | .", "initialize timeout using ' adb shell setprop ' or use setlargetimeout ( ) and setsmalltimeout ( ) .", "starts up the jdbc driver in server side by binding the remote driver object to local registry .", "writes the serialized representation of the paused transfer state to the given outputstream .", "update the entry drop waiting for from original call cache manager to update", "creates window for update software module .", "flips to the last card of the container", "constructs a new signature file corresponding to a given manifest .", "removes the specified phandle", "sets position of the dialog on the screen middle center of the screen", "returns true if there are more tokens that have not yet been seen", "small helper function for adding buttons to the toolbar .", "read in external representation for remote ref .", "executes the closure this many times , starting from zero .", "add a task that should be run once in the game loop thread .", "adjusts an encounter datetime to ensure that openmrs will accept it .", "sets the shape of the of the entity", "remove a file from local references", "enters the scope s setting it as a child of the current scope", "upload review changes to the server .", "returns an initiliazed instance of outrosobitos component", "set the ith element", "visits the header of the class .", "get the molecular weight of a molecule", "swipes left from the right of the screen to the left of the screen on the vertical alignment of an element .", "draws the border for the given component , this method is called before a call to background painting is made .", "translate a data row according to the currently defined schema .", "returns a clone of this das", "creates a new panel object .", "returns string with all elements of a nestedlist", "this method resolves the logical name to the os resource", "returns the rating value for the given rating type , object and user .", "encode the supplied information as pem .", "escape the input string using the escape delimiter for the given special chars", "add an entry to the log output queue", "generate output by merging extracted metadata to a template .", "parses xml to a w3c document object with activated or deactivated validation .", "copies this attribute and returns a new copy .", "add a space between tools .", "perform inverse dct in place for n x n matrix", "grab an image of whats currently in the drawing area and save it as a tif or tga file", "getting interface netmask .", "returns enablebinocluarassociation", "checks if instance has specified function", "add a tag for a single attribute", "causes the runnable to be invoked on the event dispatch thread .", "update the current event with given key and value , if current event not available , add a new one into array", "distribute the shares among the schedulables based on the comparator", "return true if seq end match pattern after both characters have been converted", "adds a job group name to the list of job group names", "moves the current tile position to the next available tile .", "report the end of an entity", "validates if the value of property end _ ip is correct and adheres to the expected format", "creates a new action object .", "adds a listener that is notified about changes in the dialog .", "prompts the user for all unsaved plugins", "creates a new sub instruction .", "adds the given argument to the method call .", "gets the glsl profile", "if the value for the specified key is present , attempts to compute a new mapping given the key and its current mapped value .", "returns name of the filter", "get the fields contained in the class and its superclasses .", "returns user ' s panel role", "one of ways of creating builder .", "apply an arbitrary perspective projection frustum transformation for a right - handed coordinate system using the given ndc z range to this matrix and store the result in dest .", "an array of timebasedautoscalingconfiguration objects that describe the configuration for the specified instances .", "builds the named analyzer with the given stop words .", "adds a listener .", "this is the clash key generator .", "paints the focus indicator for a cell in a tree when it has focus .", "get the amount of cursors in this collection .", "finds all history records for the given job and job status .", "called when the user has started a deliberate drag away from one of the subscribed edges in the parent view while no child view is currently captured .", "a unit leaves a ship", "checks that the lock is owned by the current thread and that the current context is the one from this scene .", "returns true if the local filter information is set .", "delegate the call to the underlying graphics2d", "invoked after a database was closed .", "munge a name index so that it is suitable for use in a filesystem .", "show esp title bar", "provide invalid command line args .", "this method encodes the query part of an url", "builds a node in the document with the binarys operator type as name", "removes a gesture handler from the recogniser", "compare the current object with the passed one", "this adds a property descriptor for the is derived feature", "get the attribute value .", "compares this character array against the specified character sequence .", "asserts that values of expected and actual are not equal .", "add the destination information of this person to the message .", "adds auth security requirement for the entire service .", "shows the given property", "compute and return the covariance value of the yz phase space coordinate monomial", "recursively walk the name tree looking for a given value", "get current value of mrepeatfinished .", "paints the background of a list .", "creates and starts a new thread running firsttask as its first task only if fewer than corepoolsize threads are running and the pool is not shut down", "submit additional info to user .", "adds a human readable type description for files .", "given a sql router connection retrieve the encapsulated connection", "sends a command and returns its complete response", "show hide the clear view .", "the transition ( ) method allows you to create animation effects on any numeric html attribute ,", "this method is invoked when camera preview has started .", "sets the group named xtabcontrolmodel to sequence with a single element from model2 relation", "creates a bitsetbuffer loaded from a string of zeros and ones", "update the registry and deployment cache to reflect the latest state of reality .", "stream response to given print stream", "inherit doc comment from supertype .", "returns the animation type or 0 if cannot be found .", "calculates area of this polygon", "add all the screen listeners .", "creates a new repair .", "add a field to this", "get an iterator over edges removed from this cfg .", "increments the phase of the loop", "write the given bytes to the stream", "this method will add an external created events to the databus collector", "public interface for table building", "for the given syllable item , return its tobi accent , or 0 if there is none .", "adds a permission object to the current collection of permission objects", "remember a namedbean object created outside the manager .", "assumes that array [ lower + 1 ] through to array [ upper ] is already in heap form and then puts array [ lower ] to array [ upper ] in heap form .", "adds menuitem of a plugin into show menu", "invokes the closure for each ' child ' file in this ' parent ' folder / directory .", "set buffers back to null when finished .", "returns true if the user is a current active user", "checks if you can enter every pass with a request .", "does what necessary for close this analysis window", "returns an iterator over the takebyids operation results .", "this adds a property descriptor for the showborder feature", "parses a xml property list from an input stream .", "remove quotation marks at the beginning and end of the string if present .", "given a list of vplex volume uris , return any that front srdf targets .", "gets the current earpiece state .", "get the closeness centrality for the given node", "this method calls proc insertexecstatus and adds a record in database .", "append the text supplied by the reader at the end of the file without writing a bom using a specified encoding .", "list the workflow run action scoped repetitions .", "since these operations are security sensitive we must ensure they are executing in the proper sequence", "logs that the project command was successfully executed", "this method assumes that the nodes might not be in the same order as the keys and some keys might not have a matching result in the db .", "adds global hotkeys based on the current data , if global hotkeys are currently enabled .", "function returns the raw string representation of this object", "writes a string to a file creating the file if it does not exist .", "returns a copy of this date minus the specified number of days", "reads a 64 - bit long from the given arrayview starting at the given position .", "start a print .", "the first stage of completion in the two - phase - commit protocol .", "skips the whitespaces and an optional comma .", "make a prettyprinted json text of this jsonobject .", "determines whether or not a task will aloow a dynamically created new instance to be created", "execute the given method on the provided uri .", "instances should not be constructed in standard programming .", "writes a single short .", "returned expression results in unix timestamp that has been truncated so that the given date part is the least significant .", "aggregating the sum of all trades using reduce function", "base64 decodes a string into a decoded byte array , then deserializes the object .", "process selectors and keep adding results .", "de - registers an mbean from the mbean server .", "moves the cursor backward within the stream", "advance to the next token .", "returns the element at the specified position in this list", "splits the input string with the given regex and filters empty strings .", "execute sql function that processes the result entries and calculates one value sum average min max", "remove all observers from this object", "check if mineshafter is present .", "this will return the maximum a1 in the series", "handler for errors in transformations", "helper method to find a key in a map .", "translates the given molecule by the given vector .", "returns whether we are dozing or not .", "called before the environment quits", "return the elevation in a geo time serie at a given timestamp .", "task entrypoint : generate source context file .", "constructs a lockablefilewriter .", "add a resource to this show", "at runtime determines the librarys version and release data", "convert a set to guid object array", "this method constructs a path based on potentially accessing one or more archive files ( jar / war ) .", "check whether the interface extends itself", "converts a string of hex characters into an array of bytes .", "checks whether this type has an associated external object that handles marshalling and unmarshalling of the implementation class", "removes an event listener from the list of protocol event listeners that are notified about incoming debug events .", "returns true if this strategy represents a valid validation state", "resizes the wire", "sets the distance", "print the detailed query stats to the caller using the proper serializer", "prints a double followed by a newline .", "called if the user has modified the current drop gesture .", "parse a dataset from given file .", "adds a new file to the lastfile list", "as its name says , this method checks if a given entry exists in the directory or not .", "finds a listener instance based on registrationid", "creates a new exporter for allaccess files", "this will close either the root shell or the standard shell depending on what you specify .", "helper method to write unfragmented transactions to log .", "sets the current enrollment of a course", "creates a new table model object .", "create byte pointer operand .", "turns the name into a valid , simplified java identifier .", "gets the lexical relations associated with the given sense .", "asserts that the given objects are equal using the first object ' s . equal ( ) method", "creates a new cleaner .", "splits the provided text into an array , separator specified .", "checks whether an attribute histogram is available in the current entry", "determines whether this node is strictly on the left hand side of an assign or var initialization .", "uses the given tokenizer .", "all clear the input", "invoked when an item is pinned in the channel .", "check , if the instance matches another object .", "remove entry when included in this chunk", "append an octet number between 128 and 255 into mmessage", "returns the source object of this folder element", "sets the message", "returns if the pool as given by the synonym is initalised or not", "whether or not this packet is a large packet thus part of a large query or result", "this method refers to the racer function get tbox language", "adds a listener that is notified about changes in the debug perspective .", "set new value rounded with validity checking", "constructor for primary key", "returns true if the receiver of a method might not yet be fully initialized .", "build a convex hull to approximate the sphere .", "returns a filter that filters files based on a cutoff reference file .", "delete a persistent entity", "the list of binary media types supported by the restapi .", "constructs a new service info object .", "remove a background image from the list of background images", "returns the authentication failure times .", "shows an error dialog with a message", "adds a metadata entry to the header file .", "return the tests included in this test suite .", "assembles a component instance according to the descriptor .", "passwords loaded from file as tungstenproperties .", "append any specified parameters to the provided webtarget .", "return if this toolbar controller panel currently contains the given toolbar", "clear all messages of the given fieldname", "fromangleaxis sets this matrix4f to the values specified by an angle and an axis of rotation", "opens a session to cassandra and initializes the prepared statement .", "creates a new create - xxx sub - command for a sets relation .", "sends a packet from the server to all players in a dimension around a location", "add a new subsystem to a given registry .", "called after space becomes backup .", "recursively delete the webapp directory .", "helper method for inserting a mock object", "this code is public domain .", "opens up an editor to add a new item to the list", "cut head ! mr . base64image to mr . headless .", "to bind different types of holder and solve different the bind events", "return an array of the operations associated with the bean name .", "creates the element trt", "compares the current attribute object with another attribute object .", "convenience method for getting an iterator over the values", "creates a new action object .", "gets size of the ordered list .", "defines the class header for the given class definition", "writes http response headers to the sdc record header with the configured optional prefix .", "switch to the next presentation", "write an integer to the output stream without tagging it .", "write a portion of a string to the buffer .", "enables or disables antispam in the given account", "check if the zoneid has an alias in the cldr data .", "executes a resume command in the active thread .", "transliteration processors tr y", "adds close handler to the current stream .", "the doget method of the servlet .", "protocol safety checks for the server returned message .", "passing the focus request to the viewers control", "stripe automatically finalizes drafts before sending and attempting payment on invoices .", "set the value of element [ r , c ] .", "issue get - result call to get query result given an in progress response .", "the aws account id to add to the list of launch permissions for the ami .", "run the tck ( controlled by autofvt / publish / tckrunner / tcl / tck - suite . html )", "perform a lookup for the method .", "updates the internal representation of the mask .", "write out all files without there extensions", "adds a pipeline with one or more stages and stores .", "writes carriers and their plans into a xml - file .", "logs the processing of a revision task .", "use reflection to parse model ' s value to contentvalues", "returns a datetime millisecond instant , formed from the given year , month , day , hour , minute , second , and millisecond values .", "helper function for the getxxx calls to check isfunction and index = = 1 .", "this method should initialize the asset values to an array of the given size and with values depending on the particular asset .", "constructs csvparser with supplied separator and quote char .", "defer to our core declaration handler for state - centric invocations as well .", "retrieves all agents registered at asterisk server by sending an", "if the resource is a zip archive it may be extracted using this method .", "returns a hashcode for this uri attribute .", "overloads the left shift operator to provide an easy way to append multiple objects as string representations to a string .", "the license configurations .", "sets an access control list for the stream .", "invoked when a new event is received over the subscription .", "checks the player hp", "gets whether this query is a select query .", "process hierarch style cards . . .", "creates a new instance for the specified time zone .", "creates a volume on a specified gateway .", "go to page c2", "this method calculates a darker color provided a factor of reduction in lightness .", "map from a byte", "parse from the given string contains media type .", "deletes a backup plan .", "constant - time spookyhash 4 - word - state hashing reusing precomputed state partially .", "returns true for a final method .", "sets the title of the embed .", "an extension has been removed from an extension point", "stage two resolution of document namespaces .", "some objects can be represented as text but a library cannot", "dumps the specified byte buffer into a hex string and returns it .", "retrieves the cost type for an attribute , if set by this extension ' s type attribute .", "remove responses that are ok from this multistatus", "returns the similarity score as a float number in range [ 0 . 0 , 1 . 0 ] .", "returns the icon used in calculating the pref / min / max size .", "convenience method to remove this course from a category", "creates a new linked list .", "build the evaluator that corresponds to the given backend identifier .", "fills a formdata hashmap with the data of this entity", "builds the html for the default delete file mode select box .", "create a namematcher that matches trigger names containing the given string .", "the container invokes this method immediately after it calls ejbcreate", "all matchers have the state used by pattern during a match .", "creates an object from a byte buffer .", "computes the distance between this vector and another one .", "creates a new api basic block object .", "get the decoded stream value", "calculate the likelihood of a single continuous trait on the given tree .", "remove a resource from the pool", "returns the size of this range ( the number of values within its bounds ) .", "copy the keys and values from the source to this object .", "legacy code for previous method of drawing the map", "read a byte", "converts the given time in seconds after midnight into a textual representation", "gets all the elements in the ordered list in the order in which they were entered .", "returns a range of all the cp definitions .", "scans class tree of component to process all its methods .", "determines whether the given node is a for , do , or while node .", "writes in a text file all files used by mcef for uninstall purposes .", "is the specified uri image cached or not .", "reconstitutes the component tree from treestructure hierarchy", "returns an own defined modifier code for a better comparison", "returns a lazy initialised attributeprefix", "adds several reactions to the list in one go", "updates the decoration painter in the specified layered pane .", "search for element name in the sorted regular expression list , if found return the group name .", "initialize the spec constants using the config file .", "generates the instruction to push the given value on the stack .", "return the index of the last row to display", "shows the popup menu", "check if exporting data is supported in the current environment .", "the merge method performs a couple different functions , depending on the input .", "returns the given metric ' s value , or null if there is no file store with the given name .", "converts a data value to an angle against this scale .", "trim all occurrences of the supplied trailing character from the given string .", "initialisation extracts the hostname from the localhost", "removes a listener from the set listening to this animation .", "add this observable future into the queue", "creates a new instance in order to edit an existing type .", "sets the pattern string for the pattern type .", "create an empty underlying keepassfile instance", "return an empty set if no client can be created .", "check if all sites of local vdc are", "starting finished used to print debugging information .", "check whether the caller can have access to the class or its members .", "updates a private dns zone .", "finds and binds all necessary views", "attempt to determine the hostname of the node that created the log file .", "delete the given base type .", "creates a new report , with an entity added to it .", "deletes all data related with tasks , which belongs to specified process instance ids .", "checks whether the constraint is satisfied for said task at the specified timings", "check whether the given attachment point is valid given the current topology", "reads a draw frame element from the specified", "initializes the comment of a function node .", "process acr values based on principal weight map .", "transforms the source for the content output to the result .", "returns all administered - object elements", "returns a new uri object , based on the specified uri template , with an updated port ( scheme ) and port .", "get the classs constructors", "removes the ith element from queue .", "open the output stream of the websocket connection .", "utility to mark fields that need to be encrypted and vice versa", "returns true if this account is a super user .", "determines if the subscriber is durable", "create the layout manager for the title pane .", "retrieve and remove the namespaces declarations from the list of attributes .", "strips the bucket prefix or the preceding path separator from the path if it is present .", "add data to the list", "generates 64 bit hash from a string .", "updates the layout to display the given question", "unregister progress source when progress is finished .", "creates a renderedimage instance of this image with width w , and height h in pixels .", "bind a particular initializer to a class .", "responsible for returning a lookup map of operation code to invoker .", "indexed getter for entities - gets an indexed value -", "launch the email intent .", "creates a new panel object .", "pens can never do click correctly", "creates an image and places it in the image registry", "parse the format component of a format element .", "construct the iscsinames query by adding multiple wwns .", "given the target in optimized form , determine if node is closer than min .", "marks the receivers size and all its descendants sizes as invalid", "ends the formal type parameters section of the signature .", "create a copy of this record with all the same property values", "checks the caption whether an underscore \" _ \" is present to indicate that the following character is to act as mnemonic .", "called right after the space mode changes .", "fire an \" object removed \" event to registered naminglisteners .", "takes the given byte array parses it and does an initial verification that the data contained inside is valid", "gets the overridden authority hostname .", "returns the status of the node .", "adds a new event to the head of the queue .", "builds the javaclass instances from the specified jar or zip file", "converts a string denoting an amount of bytes into an long value .", "takes the value x as input and places it in the according bin", "returns if the options are conflicting", "add supertype edges to the inheritancegraph for given classvertex .", "make sure that this object is dereferenced .", "evaluates a visibility criterium match on a node .", "execute post to get jsonobject by mesh net", "return any valid codebase for an entry of the exact given class .", "returns true if all the transitions from this state are guards", "a random string , useful as a key name or partial key suffix .", "sets the pages attribute of the pagedattributeset object", "computes the meet of two elements", "create the datahandler for the bis scorm package", "performs the actual attribute augmentation replacement or modification work .", "this method clear any weak references right away instead of waiting for the gc .", "updates statistics with ' sample '", "the given group is unassigned for the given jaas system from this person .", "creates a new debug exception object .", "constructs a new type literal .", "isnewquery", "returns the name and label in the form of label username if the label is set for that marker", "updates the elements of the combobox after relevant changes to the debugger container .", "populate the response body", "unlike toexpression , torowexpression should be very straightforward given object is serializable", "performs an update of a postgresql database with the resource passed as argument .", "if a view is currently pressed then unpress it", "remove an override from a group", "selects all rows , columns , and cells in the table .", "tests if the given object is equal to this type .", "fills empty , identically named public fields with values from another object .", "request needed resources from the clustermanager", "evaluates if this getfeatureinfo producer can generate the map format specified by mapformat where mapformat is the mime type of the requested response", "maps the database from the given fileinputstream .", "get an iterator over the recorded searchtrees .", "create a text frame .", "on altitude element end .", "adds a member to this base type .", "extracts the next lexical token from the provided url base .", "creates itinerary from streetsegment it assumes it is a direct path ( without transit ) starttime is set fromtimedatazd endtime is set from starttime plus duration of streetsegment", "flush the response stream", "this is a one time setup for grpcz pages .", "adds a sequence element that is a member of this fragment .", "this passes the call on to the wrapped action", "creates an object from a byte buffer .", "liefert den passenden sepa - generator .", "this method is used to remove a previously added tab from the main burp suite window .", "convert hex color to color .", "reads a single byte from this stream and returns it as an integer in the range from 0 to 255 .", "processes a crl list .", "given column create sqlite column expression to convert any sorttokens prefixes to suffixes eg . column = \" title \" , commontokens = { \" the \" , \" an \" , \" a \" } ; ( case when title like ' the % ' then substr ( title , 5 ) | | ' , the ' when title like ' an % ' then substr ( title , 4 ) | | ' , an ' when title like ' a % ' then substr ( title , 3 ) | | ' , a ' else title end ) this allows it to be used in sql where a column expression is expected ( select , order by )", "finds a key in the map", "ensure there is enough space to store at least given number of entries .", "creates a xorpeeraddressattribute of the specified type and with the specified address and port", "updates the rate for the rate class associated with the request associated with the given event", "handles cache removal .", "use this api to fetch transformpolicylabel _ policybinding _ binding resources of given name .", "show the overall findbugs command synopsis .", "write a null reference to an object or an array", "check that optional argument is a userdata whose instance is of a type and return the object instance", "listeners are notified of disconnection in reconnection thread .", "sets the checked symbol .", "returns the complex cosine of this complex number .", "get the inclusion path from the including device layout context", "check if is a certificate authority certificate icp brasil ac", "draw this image at a specified location and size", "invoked if a comment has been deleted from a function node .", "\\ pre : m _ columns is a bi - map to \\ param m .", "get a mapping for function parameter names to call arguments .", "perform any cleanup required", "resolve possible instance method call targets .", "fetch the next object in the iteration", "method initthis", "detects the minimal elements protected by the postxpath .", "set the tag member", "helper method to add entity to hash .", "listens on the load port when a client connects it passes in the name of the agent that should be loaded into the limeserver", "this loads the header of the original arff file", "slot for the file choose dialog", "zip together the \" a \" and \" b \" iterators until all of them runs out of values .", "returns the sha256 - hash of the given string using the specified salt", "set the time the request was issued .", "set expires header to given date .", "converts an enumeration value", "conditionally append a parameter to the query if the value of the parameter is not null", "creates a new dviewcertcsrpem dialog .", "remove entry indexed field from cache .", "gives the next note in the scale", "creates or updates a tap configuration in the specified networkinterface .", "add the shape at the end of the list", "list hosting environment detector responses .", "returns the previous turn", "get the object key at position i", "construct a strategy that parses a number field", "creates a new action object .", "add a action to this notification .", "from string to date", "insert an entry in a map of abbreviations to items .", "gets the encoding id for this cmap .", "place a mail on the spool for processing", "resets all catalog data for data sources associated with current replicator .", "medtronicmessage commandaction byte payload size byte payload bytes le short ccitt crc", "removes each substring of the text string that matches the given regular expression pattern .", "remap a swing default key binding to a native one , if needed .", "adds a propertychangelistener who will be notified of value changes .", "return element by super type", "takes an array of 4 bytes and returns an integer that is represented by them .", "adds a symbolic link to the repository .", "traces the path back to our starting node , interpolating new nodes inbetween the jump poins as we go .", "enforces selected to true", "calls the super method and reads the parentdistance of this entry from the specified input stream .", "compare two characters .", "construct a new instance of this test case .", "given a string representing the possible file name this function will ensure the proper extension is attached to it", "sets the parameter to access generated keys from executed statements", "creates a new instance .", "returns true if this collection contains all of the elements in the specified collection", "try delete the temp version files", "construct a new source", "reads a record from the file into a byte array .", "gets the number of cmaps within the cmap table .", "shorten the key name ( to make the full context names shorter ) see common _ routines . pl in hts training .", "get the content type header from the response", "register a listener .", "returns whether insertion operations are allowed or not for current user", "override name of the enums , marshall / unmarshall location of the members in the given shape model .", "returns the server port that accepted the request .", "play sound with defaultmusicvolume", "swaps the positions of two players", "create an rma6 file from a blast file", "gets a value in centimeters", "unregister an object from kasai", "randomly select one of the items .", "creates an empty filled list .", "adds an integer to the constant pool of the class being build .", "builds the mapping classname propertycipher instance", "this function finds the \" limit \" value in the operator ' s properties .", "request that the destroy process of the target", "destruction of the servlet .", "if an input string was specified stream it to the process standard input .", "flushes the buffered output of the writer to the file .", "construct a new unconfigured instance .", "convenience method to reduce client dependencies", "sets the target directory .", "returns the hostname associated with the specified ip address by the provided nameserver .", "disconnects the droptarget", "emit event , when book changed", "links a parent node with a child node .", "determines the height of this view", "compare two ages", "simulates a key release .", "extracts the next lexical token from the provided url base .", "eraseroundrect ( r , int , int ) / / fills the rectangle ' s interior with the background pattern", "set the name of this attribute", "add a data item and notify series change listeners", "stops processing if the chain is currently processing .", "updates the status of a light under fast _ clock _ control .", "creates a future that is asynchronously completed .", "restore the state of this object to what it was when the previous push ( ) was called .", "generate a string representation of the context attribute set", "returns true if aclass is a wrapper or primitive class , false otherwise .", "methods to remove", "reads a single byte value from the device .", "returns all the elements from this list .", "evaluate the polynomial using horner ' s method .", "opens a url to dhl and makes a request .", "set flag for activating night vision mode", "starts the http server with the correct parameters", "updates the version number .", "starts the asynchronous tracking of a person ' s path in a stored video .", "creates a mod instruction .", "scrollbar event change the radius of the coin", "returns a document matching the given term", "add a new point , and increment advance if connect is true .", "takes and rotates the it degrees", "enable capturing of ' mousedown ' events .", "get thing for given class and thing name .", "computes the average distance of the objects to the centroid along the specified dimension .", "creates a row image with the minimum effort required .", "sets the font selection for the dialog and populates the dialogs list with the items in the array", "constructs csvreader with supplied separator .", "test sending data with a ms rtt .", "creates a stunexception setting an error message and an error id .", "returns true if the string is one of true or false", "captures system . out and system . err and redirects them to redwood logging .", "returns an iterator over the iterators of the given iterables .", "deletes the current character by setting it to", "the size of the list .", "trims the stack frames", "a visitor that prints groovy source code for each node visited .", "calculates distance between point and origin", "marshall the given parameter object .", "register an interceptor", "tries to convert a cmsexception to the matching exception type from jlan .", "reads a markdown link id .", "remove a table by name", "escapes an extension field", "creates a new plugin output dialog .", "deletes the specified resourcebundle from the directory .", "print contents of the reader .", "set the the task over", "adds menus related to comments to a given node context menu .", "get the configured buildconfigclass or guess it if not configured", "remove all data stored in the buffer", "creates the base64 value .", "returns the master data for all languages", "calculate frame size .", "creates the projection indices for all visible query columns", "update from optimized ( cooked ) wire format .", "performs bilinear interpolation of 32 - bit colors over a convex quadrilateral .", "read up to crlf return false if eof", "destruction of the servlet .", "mark the given list of bets as winners giving each bet winnings based on the given amountmultiplier and oddsmultiplier", "get the maximal bandwidth available between two nodes .", "append the polygon to the buffer .", "performs a search on a label content .", "reads a number of bytes from an input stream .", "this performs a deep serialization of the target instance and passes the generated json into the provided stringbuilder", "paints the transcoded svg image on the specified graphics context .", "returns the real int name of the given node", "read a boolean value from the packet one byte", "execute watch action on task id .", "method will call resetobjects first followed by resetfacts", "hits the embedded textflow at the given x and y offset .", "removes a listener from the list thats notified each time a change to the data model occurs", "creates a new section container .", "create a new builder using the header information and data provided .", "updates the saml2 entity configuration .", "set the customer shipping address id", "checks whether this programcode provides the required abstract methods defined in the given superclass", "executes the main simulation loop until thread is terminated", "applies this schema rule to take the required code generation steps .", "wrap an illegal module inside an exception .", "receive pair result from device", "sign all the data thus far updated .", "initialize the reader .", "write the contents of a file in the eclipse workspace .", "perform a ( configurable ) json escape operation on a string input .", "build a complete tree with 2 ^ n - 1 nodes .", "perform action when skip button is pressed", "use the default group .", "invoked after a function node comment has been deleted from a function node .", "addweeknumberlabels , this adds a set of 6 week number labels to the calendar panel .", "removes a selection listener from the graph .", "helper method to decide for the correct color", "this method writes an xml representation of this object to the given stream", "for use in properties apis .", "close the storage and clears its resources the storage can no longer be used .", "return this as a enumdeclaration or throw unsupportedoperationexception .", "calculates the bounds of the non - transparent parts of the given image .", "void cfnetservicebrowserinvalidate cfnetservicebrowserref browser", "download reviews written by the user .", "updates a document by first deleting the document s containing term and then adding the new document", "perform an analysis on class or method named by given descriptor .", "sets the blur algorithm .", "builds the request with the default header if it is not already present .", "validate the explicit hash key of an input kinesis user record .", "find a constructor for an inner class .", "call back invoked with the old e if that editor is being closed", "is the analyzed instruction a method return ?", "constructs the change listener", "decodes the input string", "parse a quoted / escaped json string .", "used to check if a type is an double or double .", "captures the audio data in the audio line and updates the data array .", "looks up the specified resourcebundle", "returns all variations of this policy based on the configuration parameters .", "called when the color button has been pressed", "does something with a packet .", "parse major java version from a java version string .", "initiates consistency check transaction on a given table .", "whether the two records are considered different , based on the values of the fields that have been provided to check for differences .", "build the message area", "returns instance unless it ' s null .", "determines whether a specific attribute is valid .", "are we provisioning first before coming online ?", "you are not supposed to instantiate this class .", "checks critical configuration values and throws and exception if invalid settings are found .", "invoke this method when the window that owns the browserpanel is about to close", "remove all files and sub directories in this directory so it will be pristine for the next test", "checks whether a class is serializable .", "returns a hash code for this object .", "commits the pages and saves the config without running validation on the model .", "locate a fleet at the given coordinates", "returns the value of this xdrdouble object as a double primitive", "encodes the given string so it can be placed inside a url .", "delegate to the appropriate method of the underlying logger .", "updates changes to the printorder revenue source object", "connect to the peer potentially a slow operation .", "removes the sample listener .", "how-it-is-done", "multiply a matrix by a scalar in place a s a", "since months and years can have arbitrary days , joda time does not allow conversion of a period string containing months or years to a duration .", "stops this thread .", "heading elements should return true", "iterates over all visible nodes in the graph .", "decode the base 64 encoded string data - whitespace will be ignored .", "checks that the given substring is a valid java identifier .", "returns a vector containing the largest x and y values .", "exits the simulator environment with an error code of 0", "writes object data to xml string", "return the left of the column", "creates a new dnetscapecertificaterenewalurl dialog .", "returns a region of this image which can be drawn independently .", "create the set of gcparsers .", "resolve an annotationvalue into a list of annotationvalues representing type qualifier annotations .", "play sample tune using the pibrella buzzer", "invite user to groupchat", "invoked when the orders of a unit are modified", "check and see if this set of permissions implies the permissions expressed in \" permission \" .", "sets the nodes title and alt text truncates title", "query by hbase rowkey .", "checks if the node is a leaf node", "create a new triggerwrapper from parameters .", "extracts all messages from this soy file set and writes the messages to an output sink .", "set the starttimeofday for this trigger to end firing each day at the given time .", "returns the legend of the tree describing how results are to be interpreted", "gets the rfcomm channel associated with the uuid", "remove a classdescriptor", "invoked when a property value is encountered", "update the cache using either invokeall ( ) or putall ( ) .", "get the response content length", "add a new turn cost entry or clear an existing .", "add a new edge to the graph .", "returns all the variables that a given bdd depends on .", "creates a stunexception setting an error message and a cause object .", "default object formatter using object . tostring .", "convert a checksum byte array to a long", "returns the value of adding the two numbers", "retrieves a byte from the data memory segment", "run the upgma algorithm", "creates a new action object .", "flushes the output buffers", "is cdi . or later", "walk jdom tree with provided walker using reversed breadth first algorithm", "composes a message key with an array of arguments .", "inovked from state sync timer", "find an object in a key value array .", "stateless intermediate ops from intstream", "queues error messages", "set the i ' th bit to 1 or 0", "logout the user from application and clear user information from session object", "decode the data source properties from xml .", "format the day of the month , optionally zero - padded .", "loads the class from java9 ' s module system and uses reflection to get methods and fields .", "removes all attributes", "writes the actionscript code in the given compilationunit to the given directory creating any subfolders for package hierarchy as appropriate and deriving the filename from the name of the type defined by the compilation unit", "create a player just by the type .", "extract the default action from a context", "generates the instructions to load all the method arguments on the stack as a single object array .", "specifies the pyramid ' s structure .", "compile ( if needed ) and load a tag file", "returns an stldatatype object", "validates the values for the attribute iplanet - am - platform - server - list .", "small helper method for convenience", "read the json from the passed file .", "dismiss no antenna dialog", "checks if a word is in the dictionary .", "clears vertex array", "deletes cart line .", "requirement for mutable table .", "deletes a module from the database .", "writedata output this modbus message to dout .", "sets the flags according to the result of a binary and or xor operation .", "translate a string to a valid identity variable name", "removes the route from the repository .", "creates a new admincondition for high level admins .", "reset location of this dialog and sync to its parent .", "constructs the summary panel based on a synapse group .", "getter for semclass gets semantic class of token", "adds a new windowlistener if and only if it isn ' t already present .", "returns the ship type for given integer .", "internal methods only .", "parses the metric and tags out of the given string .", "the doget method of the servlet .", "sets the intent extra data", "sets the group that is responsible for layout along the vertical axis", "returns the specified snapshot resource .", "describes the routes for the specified client vpn endpoint .", "helper method to update the static class cache", "indicates that the given exceptionevent has occurred in the", "returns an randomly generated selection of size n where max is the largest possible value", "enables all attribute and class types including dependencies", "to know all values of all nodes of the bayesian network", "process a packet of data for either ccm decryption or encryption .", "creates a new comment object", "add a debug userfeedbackevent and log .", "tests for equality between the specified object and this object .", "check that loading authenticationinfo also succeeds with empty cipher suites property", "performs an action while temporary replacing the current token restriction checking context associated with the running thread after returning from action run ( ) method original context is restored", "devuelve un id libre en la bd", "return a string representation debugging purposes only", "normalize the characters , but don ' t escape .", "removes an existing event participant", "gets the contents at the given uri .", "appends all of the elements in the specified array to the end of this list .", "creates and return a randovalues . length m - by - n matrix with values between 0 and 1", "this adds a property descriptor for the variable feature", "optional add a new row to the keyboard", "extract the integer value of the given annotation , if it exists .", "returns manufacturer model name", "parses an attribute for an annotation .", "creates and returns the rolloverproducer to use with this tree", "draws a shape using the penpaint and penstroke", "indicates if the access token has expired", "add instance initializing block", "connect to the underlying database containing thl .", "simulator factory method", "actionlistener interface , gets called when the timer goes ping if there isn ' t a command with the actionevent .", "prepares statement for query .", "this function generates a random hash for the bottom half of the cookie", "set the proxy authorization header to given values in basic authentication format", "return a newly allocated map of obligationset to state that may be passed to applytoallstatesandupdatemap .", "generates the information box that is dispalyed on mouse over of a node", "closes the existing connections", "create a simpleschedulebuilder set to repeat forever with a minute interval .", "a list of allowed redirect ( callback ) urls for the identity providers .", "callback for the netmapreader to let it provide the connector with connection status .", "returns a new type a a in this and a arity arity", "marshall the given parameter object .", "create a new object of class e", "return true if the glyphs arte in long int format or false if they are in short short format", "check the state of the image data and throw a runtime exception if theres a problem", "used by generated bytecode", "this method is responsible to display the iterators hierarchy of a select query", "creates edits from a sortedmap containing tags ( as sequential key - value pairs )", "create a new transformer from an xslt .", "prompts for a folder to add .", "invokes a closure passing it a new sql instance created from the given jdbc connection url .", "remove all elements from the graphic list", "creates a groovyclassloader using the given groovyclassloader as parent .", "grabs input focus", "finds a suitable converter for the type with open generics .", "full query = index query ( if possible ) , then partition - scan query", "method to get the complete file path .", "returns a valid signature for the given nonce .", "set the day", "invoked when the user double clicked on a node .", "constructor for primary key", "calculates the memory usage according to ps for a given pid .", "load the resources from the classpath", "create a new builder using the header information and data provided .", "simple test for the string bob as an example", "termina il serverthread in maniera pulita", "draws a vertical line and a corresponding frequency label at the bottom", "appends an affix pattern to the given stringbuffer , quoting special characters as needed .", "service to create a order header note .", "handles incoming replication packet", "check if the cache copy of a host should be used or not", "set the visible state of all tools", "setter method for sampleid", "use this method to enable device network - related information tracking , including ip address .", "waits until this lease expires .", "adds folders to perform the search in .", "do not instantiate this class .", "returns the management group vertex with the given index .", "removed cached image file from disk cache ( if image was cached in disk cache before )", "performs a move operation", "returns a url to use instead of the provided one or null to indicate this url should not be used at all .", "get iterator over nodes selected by given xpath expression .", "disallows m if it has the bad guid", "get the ethernet address of the wlan controller", "refreshes the main component", "print the tupleset using the name n", "returns the content of a file from the head revision .", "takes hashcode from expr", "throws an exception if the diagram was already returned", "skip specified amount of characters", "checks , if underlying stream has any tokens left", "this is equivalent to calling drawfocusring widget x y false", "this method is used for unregistering a name from the operator name map", "do not instantiate this class .", "mark the lock as not being needed by the specified job in the internal data structures .", "inserts a tag into the database .", "display the current page", "sets calendar header foreground color", "adds a node to this graph .", "check the image or create it when it has the wrong size", "returns the internal tool bar manager of the contribution item", "overwrites contents of a certain row", "implement this to establish a subscription with the server", "writes 2 sequence numbers ( seqnos ) in compressed format to an output stream .", "removes an existing component replacing it with the specified component .", "f1 - the f1 measure for two sets .", "close the the bundles file", "creates instance which outputs are initiated with provided initial values", "creates a new synchttpclient .", "set the adeextconfigproperties from the specified property file .", "stop loading the page .", "tells if the token looks like a short option .", "cascade all internal frames un iconfying any minimized first", "returns the long value of the address .", "converts the provided string to bytes using the utf - 8 encoding .", "throws a securityexception if the calling thread is not allowed to dynamic link the library code specified by the string argument file", "adds bcc blind carbon copy recipients to the email that is being built .", "compiles the given string into a pattern that can be used to match text .", "tells the debug client to read memory of the target process .", "remove the child with the given name", "splits a string around the specified character , storing split parts into a provided list .", "returns true if the specified character is valid and permitted outside of a character reference .", "hide the diagram and also the relational elements like preview panel and model tree", "imports the member types into the corresponding binnavi table .", "records the gwt module path", "converts the expiration attributes passed as arguments from the command to the function into a type suitable for applying to a region .", "returns calculated member or named set name that user typed in", "delete a persistent employees entity", "return the true servlet path .", "adds a new value to the series", "read in lines and execute them .", "gets the extended state for a given synth context .", "short - circuited or operation .", "marshall the given parameter object .", "checks the security permissions for accessing system clipboard for untrusted context ( see istrustedcontext ) checks the permissions for the current event being handled", "any user who has published comments on this change .", "deletes a robot .", "get the binding for the given symbol in the context of current scope as a function", "merges the dialogue state included as argument into the current one .", "deletes a local comment from the list of comment associated to a function .", "given a total inorganic n amount for the soil profile , this function distributes the n over the soil layers assuming a constant concentration of no3 ( 90 % ) and nh4 ( 10 % )", "get the photo that this tag is attached to", "format the move count", "adds an object to the list of parameters .", "make sure that the error tree is updated", "create a new overlay with initial capacity", "finds the minimum value in the list .", "perform a http post request and track the android context which initiated the request .", "search for examples of the bytecodepattern .", "when a method is not found in the current script checks that it s possible to call a method closure from the binding .", "starts a new class description xml file", "qtz last day offset causes repeating fire time", "constructs a list containing the elements of the specified collection , in the order they are returned by the collection ' s iterator .", "convert tag value to a long bit .", "retrieves specific records in a given sorted order on specific field ( if user specifies valid sorting by field ) .", "mark this request as having a response delivered on it .", "sets a parameter to a list of values .", "returns the menu item in the edit menu that specifies editing the currently displayed graph or rule", "initialize the tool bar settings .", "gets the indicator which determines whether this instance has started binding installing itself and has not received a confirmation that it has succeeded in doing so yet .", "helper method to upgrade both http stages to the jerseyconfigbean", "looks up if the model has a stale marker .", "creates a new node as a child of the current node .", "return if failed or there is no file to crawl .", "tell whether the string contains an unsigned number .", "create a synclistpermissionupdater to execute update .", "creates the instance with info from the current call context", "write the content disposition header to the specified output stream", "remove a foldingobserver from the list of observer objects", "return this thread s id .", "remove client controller from game", "disable logs printing to console .", "create a new arrayset with a given initial capacity .", "gson invokes this call - back method during deserialization when it encounters a field of the specified type .", "adds the objects in the specified collection to the end of the data .", "initializes the default groups for an organizational unit .", "apply clipping to the features in a tile .", "create data for the background data set", "method that simulates retrieving the preferred model", "reports a processing instruction .", "get 0 . 5 * log ( det ) of a cholesky decomposition .", "convert a string list into a array", "returns the seconds until password expiration .", "get site detector response .", "close the curren splash screen and remove all resources", "returns sql string including inlined queries", "convert a geo array into a floating point lat lon array ( alternating lat and lon values ) .", "reset all global fields and read options", "delete a ship load name that the track will either service or exclude .", "jtable uses this method to determine the default renderer editor for each cell", "binds the timer to start at the given schedule", "start the task progress timer .", "initialize grid line labels .", "creates a new exception with only a message .", "copy a number of bytes to the given buffer from the current position .", "provides a collection of all the nodes in the tree using a breadth first traversal .", "redistributes events in the priority lists based on the max # of notifications we can show .", "a function clear out the wordlist", "populate named state sprites .", "reset all counters to 0 .", "builds a parametrized class node representing the map lt keytype valuetype gt type .", "clears this cache so that it contains no keys .", "sets all corner treatments .", "accepts a string that is a punctuation tag name , and rejects everything else .", "checks database metadata to see if a column exists in a table .", "returns an initiliazed instance of codlocal component", "create a commanddescription object for the given description annotation .", "adds a new error to this dataset .", "aliases variables with an unknown type .", "returns number of vertices", "get bean in lazy mode ( if bean is null then initialize it ) .", "adds the specified map of prefix to namespace mappings to this gpathresult .", "symmetric tridiagonal ql algorithm .", "indicate user can only open slidemenu from the edge", "saves the right - language reachable from a given fsa node , formatted as an input for the graphviz package ( expressed in the dot language ) , to the given writer .", "removedatetimechangelistener , this removes the specified change listener from this datetimepicker .", "returns the internal database", "performs the exit editor action .", "the recursive procedure that evaluates newvecinsertpos oldpos v where v is the vector of elements vec idx vec idx . . .", "construct the exception with a specific context .", "notifies that the add button has been pressed", "waits for a short period of time for a response to arrive", "resets internal state to the initial state .", "tries passing the given tuple through the filter", "removes all of the elements from this set .", "read an xml fragment from an xml file .", "paint the button using the specified colors .", "write the page layout styles .", "method to assign and initialise our discrete calculator class", "returns the value of a field identified using a path from the parent .", "this method returns userid argument of the target method invocation .", "adapts the left and right margin of the divider , which is shown above the dialog ' s buttons .", "add this field in the record ' s field sequence .", "deserializes the given byte array into to a newly allocated object .", "makes grabbing the second value out of a collection of pairs a bit easier , e . g .", "find a saved setting by key .", "useful for artifact - based healthchecks", "return the name of the catalog", "add the specified resource description as a member of this resource description", "set the long value of this property", "invoke a method through reflection .", "determines if a character is a letter .", "search pass locates line index of first match .", "sets all bytes in a given block of memory to a copy of another block .", "returns a collection of members of this queue .", "put a key value pair in the jsonobject but only if the key and the value are both non null .", "method used to create source manager in order to enable mocking while testing", "tears down the fixture , for example , close a network connection .", "reads the state from the stream .", "converts hsl ( hue , saturation , lightness ) to rgb .", "a java 6 / 7 safe way of looking up a host name from an inetsocketaddress without tickling a name lookup .", "send a mouse wheel event .", "protected final string text 273 instance log exception nl t t nl t tupdateproblemindication true nl t tupdateproblemindication nl t nl nl t nl t this returns whether something has been persisted to the uri of the specified resource nl t the implementation uses the uri converter from the editors resource set to try to open an input stream", "remove a sparql udpate listener .", "perform multiple queries in parallel .", "searches the receivers list starting at the first item index 0 until an item is found that is equal to the argument and returns the index of that item", "writes the graph ' s image in a file .", "creates a new action object .", "read public key .", "removes the entry from the classpath .", "use this function when you need to return to user and do not know how to handle the exception this exception will be logged stack trace unified .", "evaluates the expression with respect to the specified record .", "mbeannotification support - delegates to broadcaster .", "returns the digit sum of a number in this base", "check if the given user is currently available on this service", "key handling implementation", "validates a the contents of textusing a specified validator .", "create the record directory", "get a victor sp instance from the registrar", "convert string value to instance .", "set the fault message providing the message name and its parts names", "convert string array to array list", "this method checks to see if any modules are still running", "generates a string representation of a java date object .", "the doget method of the servlet .", "tags all selected nodes with the currently selected tag of a tags tree .", "checks if there is any diagnostic information on the diagnostic buffer .", "load the token by the query", "returns a signed 32 - bit integer from four bytes of data .", "returns the table name of this tableinfo", "initialization code that can sometimes take a long time .", "sets the attribute with the given index to null .", "from interface keypresshandler", "compute the priority score for a person normalized by his number of friends , and passed through a sigmoid function .", "indicator if this class has extended indexing turned on .", "execution of the edit command", "specifies the scenes structure and observed feature locations", "resume all triggers whose group is anything", "build a tree path to the specified project file excluding the file itself", "wrap primitive values ( as indicated by type param ) and nulls in the", "check if the given class represents an array of primitive wrappers , i . e . boolean , byte , character , short , integer , long , float , or double .", "method to perform depth - first traversal from a given node in the dag .", "searches for the first instance of pattern in line", "get the number of values in the forward map", "get the name of the reserved element for text in this corpus", "returns an iterator over the elements in this collection", "gets the named classes that are the direct or indirect domains of this property with respect to the imports closure of the root ontology .", "perform in order navigation from a given node in a particular direction .", "invokes the annotated setter appropriate to the passed value ( must not be null ) .", "a flatmap operation that accepts a completeablefuture completionstage as the return type", "extract the encoded data , removing compression if needed", "write the indentation values for this rtflist", "creates a loggingexception object .", "save the job to the backend .", "validate populated values based on jsr 303 .", "convert a string containing consecutive ( no inside whitespace ) hexadecimal digits into a corresponding byte array .", "gets a list of virtual machine image publishers for the specified azure location .", "extracts parent jar url from original classpath entry url .", "reset the matrix to 0 .", "create a copy of this query , but that returns results that include the columns specified by this query as well as the supplied columns .", "wait for some time if this session is throttled ( slowed down ) .", "invoked to visit subtraction expressions .", "starts the simulation thread", "initializes the comment of a group node .", "send an empty chunk", "reduces the given lists of addaggregation .", "send a one second break signal", "ask if the user wants to generate the file anyway", "identify any variants that are descendents of this tuple , either directly , or via other tuples .", "check if this object is configured correctly as a nested element", "this method computes reprojected bounds the hard way but computing them feature by feature", "instruction for a given ast node", "creates a new breakpoint set reply .", "create the minimal directory structure and prefs . dat for an opera extension .", "get included enum types in this package .", "this accesses a cached version of the property sheet", "render the img tag .", "abort this task .", "getter of the parameter preferencesiterator", "create a timeofday from the given date in the given timezone .", "sets the output directory", "toggles presence of the helping grid in the virtual world", "called when notification is clicked .", "flips to the component", "returns the hash code of the specified object with respect to this hash strategy .", "interprets an undef instruction .", "builds a message string .", "normalizes a floating point lexical value to its canonical representation .", "returns the hashcode for this composite .", "throws a constraintviolationexception if the model does not contain all required server - managed triples for a binary description .", "method invoked in given context t", "throw up a dialog asking for a resource group name", "this adds a property descriptor for the enabletimeslots feature", "associate the remote txstate with the thread processing this message .", "computes the best stepping factor for a rhumbline .", "calls this function", "returns the square root of the number .", "gets the hashcode of the represented ip address .", "recursively iterates children of a given root node using dfs .", "adds listeners to the eventlistenerlist", "reads a signed int value in the given byte array .", "used for example for dao select result", "convert the time to the specified time zone .", "adds datapoints to the offering", "converts the object to a json string using the mapper", "calculate the reference date based on the global evaluation date", "receive notification of the start of a namespace mapping", "the dopost method of the servlet .", "enables compatibility mode for oracle 8", "gets the ip address and port information of all the compute nodes which are used for job execution .", "create the javascript .", "the zune loop of death from http pastie . org this code goes into an infinite loop on dec st of a leap year", "decrement a number by one .", "deletes all the super clusters present in this super super cluster", "add disk information text to a named element", "parses a given string into an object whose class corresponds with the type of the property given .", "returns the current contents of the message as an object", "custom deserialization for java serialization", "return the solution x of xtx x = xt y for a given y .", "returns a capabilities object specific for this data .", "gets the number of errors that occurred during the last build .", "parse and return a beanpathproperties format from uriinfo", "sanity check a string for whether it looks basically like a bt mac .", "send an internal event communicating the end of the simulation .", "get the java code for the usebean section", "loads the porperties with the values from bizdriverinfo", "sets the speed for any animation that runs in this display", "return the number of measures in this geo time series .", "return the characters shadow", "generates the list of all possible moves that perform \\ ( k \\ ) deletions , where \\ ( k \\ ) is the fixed number specified at construction .", "called when an event ocurred", "returns a four character code representing the sound of the given", "use the fixed point iteration described by tom minka", "returns true if this request has had a response delivered for it .", "compares the given id to the current targetid taking into account the settings for case sensitivity", "return the tests included in this test suite .", "set if this component has invalid or not .", "returns an internationalcharhandler parsed from the given index code strings .", "write a pretty version of the element to the writer .", "increments the specified counter by the specified amount creating it if it didnt already exist", "proxies for servers with the same id are considered equal .", "schedules the infinite drag activity so that auto panning and zooming will continue to update the scene even if there are no further drag events fired", "reads a password from the console .", "returns new or cached transcript api facade", "emits the start tag for a paragraph", "determine the relative positions of ( md ) and y according to the formatting style of the current locale .", "called when a topic is enqueued as pending for future batch sending due to the publisher hitting the concurrency limit .", "writes an int at the current position in the given buffer , using the given byteorder", "the error level as a string", "retrieve an duration instance .", "returns a copy of this instant with the specified duration in milliseconds subtracted .", "network details about the host where the agent or connector resides .", "to notify the listener it should send a message to the remote peer", "writes a property for a specified resource .", "appends the specified character sequence to this writer .", "adds a new email address , ignoring \" type \" and \" primary \" fields , which we don ' t need yet", "invoked after a node of a view was tagged with a tag .", "parses an input stream and returns a string [ ] [ ] object .", "add an allvaluesfrom restriction on this class", "creates the children of the node .", "associates a list of volumes with a given blockconsistencygroup uri .", "called on the browser process ui thread when a plugin has crashed .", "removes the first occurrence of an item from the list .", "creates a new learning unit selector view element", "clears the selection", "creates the fake model page tree item used as a root for the tree view .", "validate sam read group flag", "logs the availability of the native libraries used by armeria .", "returns the absolute path name of a native library", "construct a reactiveseq from a stream", "start and wait until the negotiation is done , returns the negotiated protocol .", "returns the original iterator after throwing away the first element .", "close a fixed part of a dome", "initializes the class variables with appropriate references", "return a hashcode for the principal .", "invokes this execution on the specified service using the supplied arguments .", "calculate default value for the interaction from state only .", "adds the specified link to the lookup", "marshall the given parameter object .", "checks whether the buffer is filled", "creates a new authenticator .", "get user . bin or user . bin", "records that the real value of a symbolic register is cached in a dirty scratch register at a given instruction that is a gc point .", "creates a new agent", "check whether this category is enabled for the debug priority", "send event when user is trying to close the window", "conic sector from conic and points", "returns true if the values of this object are read only .", "searches for a view with the given id .", "returns true if package is pragma false otherwise", "returns an initiliazed instance of hacer pedidos component", "increments the count of the latch by a positive number .", "remove everything after the specified date", "sends a set register value request to the debug client .", "assumes that neither expected nor actual units contain any duplicates .", "transpose a graph .", "sets the crdtfm property", "check if this is an object method invocation", "returns the most narrow element including the given offset", "shuts down the thread", "selected one time", "finds out whether any constructs in the set have changed", "construct a new instance of this test case .", "go out to the session and request a list of files but we dump ones that have a name collision .", "sends a message with given delivery parameters for an unidentified message producer .", "perform the depth first search .", "log a exception to different levels depending on the state .", "adds a field with value to the dto", "finds the minimum error mapping of classes to clusters .", "get the textual description of the loglevel as it is used in the log4j configuration", "gets all properties in the engine configuration that are prefixed with the given prefix .", "check if the file is for the correct version .", "always says a result is required .", "sets the scale type for the actual image .", "finds a debugger with a given id number .", "add all distinct entry to list from list", "verify that the designated threshold was not exceeded and throw blobstorememoryshortageexception", "returns the duration of this checkpoint calculated as the time since triggering until the latest acknowledged subtask or - 1 if no subtask was acknowledged yet .", "converts a list of checkpoints with elements into an array of serializedcheckpointdata .", "checks if the xforms data type is set to any value other than text .", "indents the text", "adds the attribute value to the given attribute name .", "creates a new lint quickfix which can replace string contents at the given psi element", "test calls the method", "download log file api", "initialize the mailet , loading configuration information .", "adds contactheader", "returns a filter that accepts files whose size is gt minimum size and lt maximum size .", "returns the storage specifications of all backups in storage ordered from oldest to most recent .", "declares a variable", "fast and simple file copy .", "remove the first element from the list", "produce a jsonobject by combining a jsonarray of names with the values of this jsonarray .", "returns next imm code from the given imm code", "determine if the element contains any undefined ( transient ) elements .", "resolves the given string , evaluating all symbols , and path - normalizes the value .", "close the connection to the icecast server", "remove all listeners from the list .", "test whether if the conditional variable has zero covariance that the method just returns the mi", "loads the tag manager for tags of a given type .", "adds event listeners that want to be notified about incoming debug events .", "creates an empty statement with custom type and concurrency level using the active database connection", "fork a bitbucket repository .", "overrides the symbol info set used by this class .", "creates and adds all child fields to the current field", "decode a json document to retrieve an array of notification instances .", "visits the given real literal", "a list of the edges in the resulting dag .", "name of the full variable of which this is a slice .", "reset all variables", "request a position3d device", "create the auditlogfilter from the live configuration .", "finds a publisher by id", "create a new inputstream for this file and passes it into the closure .", "creates a new goto offset action object .", "updates the gui depending on the state of the active debugger .", "creates a data source stores it in the manager and returns to caller .", "initialize the manifest list if not already done .", "bind a function to the mouseout event of each matched element .", "this method builds the table of the details register", "add more colours to the colour map", "returns a based depth within the object graph of the current object being serialized .", "perform a synchrnous port scan and return a list of open ports", "resets the component to the initial state .", "initialization of the servlet .", "creates an instance with the specified graph , edge weights , source , and sink .", "creates bean properties for service exporting", "query to see if an option has been set .", "creates a dateutil using the default timezone and generates iso timestamps .", "adds a keepalive connection .", "determines if clicked point is on the cloud console url .", "marshall the given parameter object .", "on cancel from the client , the rpcserver does not expect to receive a callback anymore from the rpcservercallexecutor .", "shows user home page .", "add an item to the rendering queue .", "run the algorithm .", "rotate a group object .", "checks if is stateful", "takes removes all the entries matching the specified template from this space .", "set the next block of this one in the chain", "transform a method signature to allow it to be compared even if any of its parameter types are moved to another package .", "read the pem file and save the der encoded octet stream and begin marker .", "initialize list of available port names for combo box", "marshall the given parameter object .", "determines if message bits 0 - 47 pass the fleetsync crc checksum contained in bits 48 - 63 , using a lookup table of crc checksum values derived from the crc - 15 value , and verifies the message has even parity", "validate a value against the set of regular expressions returning the array of matched groups .", "reads the next line from the specified bufferedreader removing leading and trailing whitespace and comments .", "sets the request events .", "reads into a character buffer using the correct encoding .", "process each regex group matched substring of the given charsequence .", "get the optional int value associated with an index", "creates one material thread for each material", "set the number to be updated in every times of tick", "add a message and its view to the end of the list of messages .", "initialize the domain registry .", "generate the formal parameter appender .", "store current package - order in settings", "promotes a new chartdatamodelevent", "adds the field to the field list .", "returns the string position to which the line mapping defined by mappingpair vec maps the column col .", "alter this object properties", "set the constraint", "searches the string builder to find the first reference to the specified string starting searching from the given index .", "conditions that a worker ' s qualifications must meet in order to accept the hit .", "creates a new text widget", "test parsing of various set definitions with mixed case .", "search for some kind of text on the page .", "release the edgeglow so it animates", "sets up a client communication on a given socket .", "creates a new and instruction .", "if there ware some view you don t want reside menu to intercept their touch event you can use the method to set .", "method to find the last space prior to the current word", "logs the received response and notifies the wait method .", "this purges the list ' s internal message cache so that the oldest messages are removed until the list ' s capacity requirements are met .", "converts the time to different scales", "generates a setter method for the specified field", "sends to the server a new stream element", "displays in a 3d error message", "create a new integerkey for the given integer value .", "returns a string representation of this locallist entry that is appropriate for emitting as an annotation .", "for performance reasons cache the indexsearcher for re use", "handle a patch action .", "paints the transcoded svg image on the specified graphics context .", "get rid of backslashes that were escaping the specified character", "method to remove entities from the ordered set .", "gathers all available candidates and sets the components of each media stream .", "signals the end of a redo operation .", "returns a new metafieldinfo array of all fields annotated with metafield in the object type .", "check if the position is usable .", "searches through the given nodes and edges .", "predict an image url without saving the result .", "register every instruction in this method with the implicit heap array ssa lookaside structure .", "gets the xsl file and puts it into application scope", "returns information about endpoints for an amazon aurora db cluster .", "decreases the number of jobs reservations that rely on this entry to mark their expected completion time or their anchor point", "use getinstance ( protocol ) as the starting point for syslog4j .", "specifies whether the given data should pass the filter as is be converted or removed", "joins 2 arrays together , if any array is null or empty then other array will be retuned without coping anything .", "utility function returning a new color faded to a target color", "test the string if it contains a word from the dictionary", "creates a new action object .", "return count of true elements in array", "adds the stated node as a direct child of this node .", "refreshes the direct and indirect maps", "returns the son matching an item given this nodes test", "called right before a node is removed from the tree .", "updates an alerting policy .", "creates and returns a new radio button with the given label .", "by default codename one stores the states of components in the navigation graph as it moves between forms .", "loads the embedded logging configuration from an external url", "attempt to reverse changes of last commit since not all transactions successfully committed .", "apply each query hint in turn to the ast node .", "generates a figure out from the move index parameter", "get this object properties", "http ok pointless wrapper for type safety .", "removes a module from the database .", "invoked when the subscription switches from the reading phase to the live subscription phase .", "request that this shot moved based on time elapsed", "creates a new breakpoint condition .", "encrypts the provided string .", "add a threshold data listener", "decode a object instance from a string with given target object type", "the minimum value allowed for an element or attribute", "gets a role assignment by id .", "experimenting with recycling events to improve efficiency", "creates a new detach reply parser .", "produces a wsdl2 for this axisservice and prints it to the specified", "constructs a diagonal block matrix from the given parts the direct sum of two matrices", "similar to y float but wait until the transition is about to start to perform the evaluation", "marshall the given parameter object .", "attempts to export the name exportsname .", "configure the new device to an ap accessible to internet", "add callback so that onviewready will be delay to call after all instance state are restored", "converts a data value to a coordinate in java2d space , assuming that the axis runs along one edge of the specified plotarea .", "handles event of new server found", "executes an undo operation .", "schedule a request which will be executed in the future .", "launching rom romname", "for large distances center point calculation has rounding errors", "initializer for property maxpings .", "computes the arc length of an ellipse where a is the start parameter and b is the end parameter of the arc in radians", "advances to the next available final state .", "this creates the project in the workspace .", "initiate a still image capture .", "sets or clears the error message", "implements a timed refresh of stale mailboxes", "functions identically to android . media . mediaplayer . start starts a track playing", "returns useragent based on combined string representation", "indicates whether this duplicates its drawable state from its parent", "returns a range of cp options matching the uuid and company .", "get a batch of roles assigned to privilege .", "create a data object to correspond to the header description .", "to check for equality", "creates a template object for storing operations ' run result .", "pushes the next added component in the y direction maximum weighting", "execute command given in query string on url .", "returns the status of the operation", "to process the leaf tag", "gets the skill trained by a specific training type iteam ta ispieler skill", "get relations from includes section or create a remote proxy", "draw text with an emphasized background .", "prints out all matches of a tree pattern on each tree in the path .", "load existing findbugs xml report for the given collection of files .", "saves bizdriver file", "change current window to another opened window .", "process failure of creating a cg step .", "creates a new map with the same mappings as the given map .", "merge the given sos node into the marker sequence .", "resets the object modification status to not modified", "information about the configuration of your spot fleet .", "is this value known because of an explicit null check ?", "checks values against factory s type", "tasks that should never log at start can overide this", "create a data input stream for this file", "adds information about the attribute group interface to the attributegroupinterfaces variable .", "returns the duration of the timecode ( from 00 : 00 : 00 : 00 ) in frames", "gets the font", "this only checks clipping along the bottom edge .", "dispatch and dispatchref are treated the same this is a cover for putvariantdispatch", "convenience function for comparing possibleowner against this . owner", "receive notification of the start of an element .", "allows derivative classes to handle the xml attrs without creating a typedarray themsevles", "adds an association to the complex attribute being built", "the text for telling the user to choose hiding showing instantiated definitions .", "shares the given text by encoding it as a barcode such that another user can scan the text off the screen of the device .", "creates filloptions out of a feature .", "copy a date .", "used by the base dao classes but here for your modification", "add \" order by \" clause to the sql query statement .", "writes an int to the indicated position", "for the reason we use some bit to differ whether it is softap or sta .", "[ icu ] based on a http formatted list of acceptable locales , determine an available locale for the user .", "gets an object that corresponds to te given parameter based on the existence of a valueconverter", "a list of event subscriptions .", "awaits until the next work is ready ( or the work queue is empty ) .", "assumes the class specified points to a file in the classpath that contains the name of a class that implements or is a subclass of the specfied class .", "this method is used to convert the string value given to an appropriate representation .", "tests whether this value is greater than 0", "attempts to gracefully shutdown the worker but interrupts the thread after 20ms if the worker does not stop on its own", "creates a new address spaces table .", "add introns to the set of features in input .", "delete indexes for this column so that one can resize column", "finds the first ' : ' .", "create a clock pad", "creates an instance of gsxasessionimpl .", "creates the component that will be used to display our tooltip", "sanitize the exception and all nested causes p this will modify the stacktrace of the exception instance and all its causes irreversibly", "internal method to trigger the menu creation process .", "given a column and an array of columns , return a new array of columns with the single guy prepended onto the others .", "draws the entity for the given hex .", "initiates the processing of the xls workbook file to csv .", "creates a new modifiers from the specified modifiers .", "returns true when this destinationobject is valid .", "heartbeat timer calls observers every 100 ms", "reads 2 xml element attribute ans cast it to a credential", "collapse a set of nodes under a specific master node .", "removes players that have moved away from the list", "visits the given type specific ast node", "check node attribute .", "write this spill record to the location provided .", "determine if this alignment is aligned with another alignment", "set the current session", "get the number of key / value pairs .", "get the global scope .", "opens the line with the specified format and suggested buffer size , causing the line to acquire any required system resources and become operational .", "this method returns all elements of a multipart request", "returns a new map containing the first num elements from the head of this map .", "adds the given smapstratum object , representing a stratum with logically associated filesection and linesection blocks , to the current smapgenerator .", "given an array like bymonth = 2 , 3 , 4 , 5 and a set pos like bysetpos = 1 , - 1 reduce both clauses to a single one , bymonth = 2 , 5 in the preceding .", "search for an object with the specified string key", "run any install instructions for installing this ui", "the dopost method of the servlet .", "constructs a new token for the specified image and kind .", "this converts a possibly negative index to a real index into the array .", "reconnect to a different source and or target shape", "adds the cp rule to the database .", "transforms multiple rects with all matrices", "sets if the mini map should be visible", "called when toast is ready and bindings are ready to be bound .", "remove all indexes from the settings .", "display the pathpreferenceselector with the specified dialog as the owner", "connect to mongodb host .", "binds the controlled objects .", "has the port connection status changed", "set the desktop actions default status enabled disabled", "instantiates a new mp player .", "returns a pretty printed string of the field values for the given json object , indented at the given level .", "add nsstorage into nsstoragemap", "creates a changedaddressattribute of the specified type and with the specified address and port", "convert a message and status to an error node .", "get the simple name of the image , which is the repository sans the user parts .", "run onlinelof ( with insertions and removals ) on database .", "close the port and clean up associated elements .", "changes the form s is label when its doing background work", "create update 4 trigger", "copy the data in \" inputstream \" to \" outputstream \" , from start to end .", "shows a dialog that informs the user that no archetype is selected", "answer the classdescriptor for itemclass for an objectreferencedescriptor check optional hint .", "add a hotspot for methods that return a sting .", "checks it the requested dependency is one of the cached dependent instances .", "f0 constant expression variable expression brackets expression readport", "returns the represented operation of a collaboration", "checks for empty feature path and initializes the feature path object .", "checks to see if the element is in the ordered list .", "note that the returned consistenthash may not be thread - safe .", "sets the access control model which is used to determine authorized subjects for activity execution .", "determine if an archive record indicate end of archive", "the google shopper button is special and is not handled by the abstract button methods above .", "sets this frustum to an orthographic one pointing in the z - direction with the specified parameters determining its size ( see the opengl documentation for glortho ) .", "appends a parameter to the query", "flush all index operations to disk and opens a new near - real - time reader .", "clears the extension array", "add given object to the tree .", "extract hosts and port numbers from a list of srv records .", "finds a class node given a string representing the type .", "declares internal data structures based on the input image pyramid", "creates a new rrd file with one more datasource in it .", "returns the value for key or null if the key is not in the map", "unsigned lexicographical byte comparator .", "for creating a ptg namex from formula parser", "returns fast average .", "minimize mooch to the tray when the user tries to minimize it", "generates a publickey instance from a string containing the base encoded public key .", "this is how framework makes the keyvalue pair when \" application / x - www - form - urlencoded \" headers is passed in the request .", "returns whether odbc minimum sql grammar is supported", "define a server sent events endpoint with a specified handler .", "floor ( ) : the nearest integer not greater than this .", "inserts one array into another by replacing specified offset .", "associates the specified boolean value with the specified key in this map .", "sync the database", "process an html get or post .", "set the accept encoding header to gzip", "banned users are accumulated in the blacklist .", "throws an exception if indexaccessor is closed", "float field should always assigned .", "broadcasts a message to everyone in the group", "read a hashmap from an inputstream containing xml .", "returns true if the wrapped exception is not null", "setter for meshlist - sets a collection of objects of type uima . julielab . uima . meshheading , o", "closes the listening socket and calls super .", "returns map field key type name .", "calculates the measured dimension in a single direction ( width or height ) .", "converts api response of bulk operation into object and returns the object array in case of get request .", "applies gain to the real buffer", "fill the buffer with more data from the inputstream , if there is any .", "publish a message to a topic", "dump this node textually", "get the style equivalence .", "returns true if the chunk is within the bounds of the given viewport", "connect to the specified host port .", "create a bar with no message text .", "reset the progress spinner to default rotation start and end angles .", "turns every whitespace character into a space character .", "copies this material ' s textures to another material .", "validate the token expiration date .", "retrieve list of namespace declaration locations active at this node .", "reads the contents of a file line by line to a list of strings using the default encoding for the vm .", "returns the trigonometric cosine of the number .", "displays abilities as strings", "detect and handle aberrant data points by resetting the statistics in the throughput distribution .", "determines whether a register requires extraction because it is the sub - register of a bigger register .", "executes this command by delegating to the currently assigned executor .", "set the value of the legajo ca 83 antig ant column for the current row", "a list of up to 100 queue names or full queue amazon resource name ( arn ) entries .", "gets the source of the response", "creates a band pass fir filter specification builder that allows you to define the filter parameters and create a filter specification .", "ensure redirect uri is authorized .", "translate attributes that describe an attribute matching rule definition into the string description as defined in rfc 2252 .", "create a new keysetvalidator .", "start a get request to the given url along with the query params", "close the compiler flushing the logs", "copy constructor for use in editing clone", "this method adds a logger to this configuration with the name of the logger", "the method is used for valid the space url before finding it from space", "tests whether or not a string matches against a pattern .", "inside auxiliary method to read object field value .", "returns the representation of the identifier", "called when a worker comes within accessing range of the block .", "creates a new target information reply .", "broadcasts the call event to the registered listener", "use this operation to get snmp manager details .", "ensures that both text fields are set", "disposes any resources or pointers held by this instance to prepare for garbage collection", "adds a text string as a new column in the current line of output , taking care of escaping as necessary .", "normalizes all filter coefficients to achieve unity gain by ensuring that the sum of the absolute value of all coefficients adds up to .", "returns true if this tree includes a division by val", "sets a value whose position is specified", "remove the specified uri image cache .", "returns an empty inventory slot", "parses a query string \" m = metric { tagk1 = tagv1 , . . . } \" type query and returns a tsuid .", "sets default access control list for new user streams .", "this method is necessary to allow us to run within older and newer versions of glassfish .", "print a profile of rules used since the last reset", "create an expression but does not change the container .", "this method converts the timepoint value to its corresponding long value , this method assumes that the date format is the same as the format being returned by the parseutils . parsestringasdate .", "send a beat announcement to all registered master listeners .", "restore from json representation .", "caution not stack safe", "closes all slaves and removes them from the running list", "tests getting a sub list .", "publishes a expire event for the entry to all of the interested listeners .", "verifies whether generation is needed and if so the metadata document is created and stored in metadata manager .", "adds prefix \" idpp \" to the expression .", "selection coefficients are gamma distributed with parameters alpha and beta", "ds method to activate this component .", "disconnect the user from the server", "visibility of the background", "uses the default base url", "returns true if the protocol is embedded space false otherwise .", "transform downsampler properties to rollup properties , if the rollup is enabled at configuration level and down sampler is set .", "choose an alias to authenticate the server side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer ( if any ) .", "returns the defaults for seaglasslookandfeel .", "adds a new field to the slickform s fields collection", "check if file is a child of given directory", "add a menuitem as the last one in its sub - menu .", "create vault extended info .", "sets a certificate to a partner", "parses the annotation member value at the current position in the specified byte buffer , resolving constant references in the specified constant pool .", "synchronously queues an event for publishing .", "whether the notification with id exists .", "check whether the given host and / or address is allowed to access this agent .", "parse a single json value from the string , expecting an eof at the end .", "creates and returns a jobdatamap using the supplied schedule configuration .", "the teardown method is called after the test is completed", "returns an enumeration describing the available options .", "because both invocationregistry . deregister ( ) and future . complete ( ) are idempotent .", "write a block to disk .", "use this api to unset the properties of sslservicegroup resources .", "processes a hit breakpoint .", "returns a hashcode for this derinputbuffer .", "return the two expressions and d together .", "the maintenance actions to be applied .", "pushes a new list on stack and stores nodes annotations in the new list .", "load special data ( images , . . ) .", "adds the comment and tag lines to the label content that displays a view node .", "initialize with a fixed reference date", "call this if the activity represents a function", "sends a message that consists of a subject and a message body .", "mouselistener method for mouseup events", "src / main / resources / org / drools / compiler / semantics / java / parser / java . g : 1153 : 1 : exclusiveorexpression : andexpression ( ' ^ ' andexpression ) * ;", "encoding loop on private thread"], "label": ["what", "what", "property", "what", "how-it-is-done", "what", "what", "property", "how-to-use", "what", "what", "how-to-use", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "property", "what", "property", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "property", "why", "what", "property", "what", "what", "property", "what", "how-to-use", "how-it-is-done", "what", "what", "property", "what", "how-to-use", "what", "how-to-use", "what", "what", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "why", "what", "what", "property", "property", "how-it-is-done", "what", "how-to-use", "what", "how-it-is-done", "how-it-is-done", "why", "what", "others", "how-it-is-done", "why", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "how-to-use", "what", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "why", "what", "what", "what", "property", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "others", "what", "how-it-is-done", "what", "what", "what", "what", "what", "why", "how-to-use", "property", "what", "what", "what", "what", "what", "others", "property", "why", "how-it-is-done", "what", "what", "what", "property", "how-to-use", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "how-it-is-done", "what", "property", "what", "how-it-is-done", "what", "what", "property", "why", "how-it-is-done", "why", "how-it-is-done", "what", "property", "property", "what", "why", "property", "what", "what", "what", "what", "how-it-is-done", "what", "why", "property", "what", "how-to-use", "what", "what", "what", "property", "why", "how-it-is-done", "property", "what", "what", "what", "property", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "property", "property", "why", "what", "what", "property", "what", "what", "what", "why", "why", "property", "property", "what", "what", "what", "property", "what", "what", "what", "what", "property", "what", "why", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "why", "property", "what", "why", "what", "how-to-use", "how-to-use", "what", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "what", "why", "what", "how-it-is-done", "how-it-is-done", "why", "how-it-is-done", "why", "property", "how-to-use", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "how-it-is-done", "property", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "property", "property", "what", "why", "how-it-is-done", "how-it-is-done", "what", "what", "why", "what", "what", "what", "what", "property", "how-it-is-done", "why", "what", "how-to-use", "why", "what", "what", "what", "what", "property", "what", "what", "what", "what", "how-to-use", "how-it-is-done", "property", "what", "property", "what", "property", "what", "why", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "how-it-is-done", "how-it-is-done", "property", "how-it-is-done", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "how-it-is-done", "property", "what", "property", "what", "how-it-is-done ", "why", "how-it-is-done", "what", "what", "what", "what", "why", "how-to-use", "what", "how-it-is-done", "property", "what", "how-to-use", "why", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "why", "what", "how-it-is-done", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "property", "what", "why", "property", "why", "what", "how-it-is-done", "property", "what", "why", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "property", "what", "property", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "property", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "what", "property", "what", "what", "what", "what", "property", "why", "why", "how-it-is-done", "property", "how-to-use", "property", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "what", "property", "what", "what", "what", "what", "how-to-use", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "property", "what", "what", "what", "how-it-is-done", "what", "property", "what", "property", "what", "property", "what", "what", "property", "what", "what", "property", "what", "what", "what", "property", "what", "how-it-is-done", "what", "why", "what", "what", "how-to-use", "what", "what", "others", "why", "what", "why", "property", "what", "what", "why", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "what", "why", "how-it-is-done", "how-it-is-done", "what", "what", "why", "property", "why", "what", "what", "what", "what", "what", "why", "property", "what", "how-it-is-done", "what", "why", "how-it-is-done", "what", "property", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "property", "property", "what", "what", "what", "what", "why", "what", "why", "how-it-is-done", "what", "what", "what", "what", "why", "what", "property", "what", "why", "what", "how-it-is-done", "how-it-is-done", "property", "what", "what", "why", "property", "what", "property", "property", "what", "what", "how-it-is-done", "how-it-is-done", "what", "property", "what", "what", "how-it-is-done", "property", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-to-use", "why", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "why", "property", "property", "what", "what", "what", "why", "property", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "how-to-use", "what", "what", "why", "why", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "how-to-use", "why", "how-it-is-done", "what", "property", "what", "what", "how-it-is-done", "how-it-is-done", "property", "how-it-is-done", "what", "what", "what", "property", "property", "property", "what", "what", "what", "what", "what", "what", "why", "what", "what", "others", "property", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "how-to-use", "what", "why", "what", "why", "what", "why", "what", "what", "how-it-is-done", "what", "what", "property", "what", "what", "what", "what", "others", "why", "what", "what", "what", "others", "how-it-is-done", "what", "how-it-is-done", "why", "what", "why", "how-it-is-done", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "why", "why", "what", "others", "what", "what", "what", "property", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "why", "what", "what", "property", "what", "property", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "what", "why", "what", "property", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "property", "property", "what", "property", "why", "what", "why", "how-it-is-done", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "what", "what", "why", "what", "what", "what", "property", "what", "property", "how-it-is-done", "what", "what", "what", "what", "others", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "how-to-use", "what", "what", "why", "what", "why", "how-it-is-done", "property", "what", "others", "what", "how-it-is-done", "what", "what", "what", "what", "why", "how-to-use", "property", "what", "what", "what", "what", "what", "what", "property", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "property", "what", "others", "how-to-use", "what", "how-to-use", "why", "what", "property", "how-it-is-done", "what", "property", "why", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "property", "what", "why", "what", "property", "what", "what", "property", "what", "property", "what", "how-it-is-done", "how-it-is-done", "what", "how-to-use", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-to-use", "property", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "property", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "others", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "property", "why", "why", "what", "what", "what", "what", "what", "why", "what", "others", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-it-is-done", "why", "how-it-is-done", "property", "how-to-use", "how-it-is-done", "what", "what", "why", "property", "why", "what", "what", "property", "what", "why", "why", "what", "what", "why", "what", "property", "what", "property", "what", "what", "what", "what", "what", "why", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "property", "what", "what", "what", "why", "why", "property", "what", "what", "property", "what", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "what", "why", "how-it-is-done", "what", "property", "what", "how-to-use", "what", "how-it-is-done", "what", "what", "why", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "why", "how-it-is-done", "what", "why", "property", "property", "why", "what", "property", "how-it-is-done", "what", "what", "what", "what", "property", "what", "property", "what", "what", "what", "why", "property", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "property", "what", "property", "how-it-is-done", "how-to-use", "what", "what", "how-it-is-done", "property", "what", "what", "what", "how-it-is-done", "property", "what", "property", "what", "what", "what", "what", "what", "why", "others", "what", "why", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "why", "what", "what", "property", "what", "how-it-is-done", "why", "what", "what", "property", "what", "why", "what", "what", "what", "property", "what", "what", "what", "why", "how-it-is-done", "why", "what", "why", "what", "what", "what", "how-it-is-done", "property", "what", "how-it-is-done", "property", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "why", "what", "what", "what", "property", "why", "what", "what", "property", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "property", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "property", "property", "what", "what", "what", "what", "what", "why", "property", "what", "what", "how-it-is-done", "what", "what", "what", "property", "how-it-is-done", "why", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-to-use", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "property", "what", "what", "others", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "how-it-is-done", "why", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "property", "what", "what", "what", "property", "property", "what", "property", "why", "what", "what", "others", "property", "what", "what", "how-it-is-done", "what", "why", "how-it-is-done", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "why", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "property", "why", "property", "property", "what", "what", "why", "what", "what", "what", "why", "property", "property", "how-it-is-done", "how-to-use", "property", "how-it-is-done", "property", "what", "property", "what", "property", "what", "how-it-is-done", "what", "why", "what", "property", "why", "how-it-is-done", "how-to-use", "how-it-is-done", "what", "what", "property", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "how-to-use", "how-it-is-done", "what", "what", "what", "how-to-use", "what", "what", "what", "why", "what", "what", "property", "what", "how-it-is-done", "property", "what", "what", "property", "how-it-is-done", "why", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "property", "why", "property", "property", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "property", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "others", "what", "what", "what", "what", "how-to-use", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "property", "what", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "why", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "what", "why", "what", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "why", "why", "what", "what", "what", "what", "what", "what", "why", "why", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "why", "property", "why", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "how-it-is-done", "what", "what", "property", "what", "why", "what", "how-it-is-done", "what", "what", "what", "property", "what", "how-it-is-done", "property", "how-to-use", "what", "what", "how-it-is-done", "what", "why", "what", "what", "what", "why", "what", "how-to-use", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "why", "what", "property", "what", "what", "what", "why", "how-it-is-done", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "what", "property", "what", "what", "why", "why", "what", "what", "property", "why", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "how-it-is-done", "why", "what", "what", "what", "why", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "why", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "why", "what", "how-it-is-done", "what", "what", "why", "what", "what", "what", "why", "what", "why", "property", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "property", "property", "how-it-is-done", "how-it-is-done", "why", "why", "what", "why", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "why", "why", "what", "why", "property", "what", "what", "what", "how-it-is-done", "what", "how-to-use", "how-it-is-done", "what", "why", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "property", "what", "what", "property", "what", "what", "how-it-is-done", "property", "what", "why", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "what", "property", "how-it-is-done", "how-it-is-done", "property", "what", "how-it-is-done", "how-to-use", "what", "what", "what", "what", "property", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "property", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "why", "how-it-is-done", "why", "what", "what", "property", "how-to-use", "what", "what", "why", "what", "what", "how-it-is-done", "how-it-is-done", "property", "what", "what", "property", "property", "what", "how-to-use", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "why", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "how-it-is-done", "how-it-is-done", "property", "how-it-is-done", "what", "what", "what", "what", "what", "why", "what", "what", "property", "what", "how-to-use", "property", "others", "what", "why", "what", "property", "property", "why", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "why", "others", "what"]}