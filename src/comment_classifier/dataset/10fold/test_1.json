{"id": [9999, 11788, 15990, 11076, 19217, 7067, 13449, 4157, 15365, 16640, 15483, 13322, 18393, 9103, 16817, 17828, 11006, 225, 515, 19663, 11091, 3723, 16743, 12324, 17701, 5332, 17515, 5456, 18809, 12700, 2069, 10126, 17840, 11856, 17997, 14588, 15860, 17852, 10092, 12529, 13136, 6160, 14728, 1114, 1297, 2320, 9708, 14912, 17340, 1150, 7829, 13255, 7905, 5550, 15215, 18446, 12114, 13515, 18599, 11317, 6458, 2052, 7333, 12670, 18690, 18748, 10336, 9239, 19104, 1175, 9875, 14498, 4462, 7676, 8480, 13965, 18295, 14644, 805, 5348, 10912, 17876, 1234, 10914, 15542, 15948, 15130, 7562, 11688, 14257, 2130, 8287, 320, 15835, 5770, 809, 16446, 7540, 6604, 16947, 16025, 2202, 13199, 1768, 13047, 2428, 9394, 7074, 16158, 18566, 13486, 18049, 4445, 18457, 17394, 4874, 18206, 6030, 3674, 12072, 9205, 10620, 18952, 4307, 16589, 13055, 1177, 15283, 16268, 10041, 3397, 18428, 17845, 8731, 11480, 4257, 12911, 4274, 10479, 13016, 5441, 12595, 5800, 9876, 2663, 425, 5895, 2871, 9226, 17714, 6490, 11973, 16509, 13340, 13822, 8449, 18072, 73, 11242, 17586, 13909, 2785, 9769, 2659, 7876, 18896, 7626, 3137, 7443, 14391, 233, 17825, 8612, 14710, 16378, 3773, 9092, 938, 19578, 18372, 4459, 15901, 369, 12197, 9223, 14746, 14693, 1408, 16885, 2214, 14982, 8124, 14978, 12941, 19144, 16163, 5660, 3950, 1071, 1281, 16917, 14719, 14485, 17912, 15783, 15137, 3966, 173, 11214, 12226, 314, 16303, 19891, 3714, 16658, 14077, 9257, 17914, 8308, 12861, 2454, 11433, 19068, 2575, 18654, 4401, 15190, 17870, 16239, 3643, 19646, 6561, 10757, 18593, 4750, 8219, 7469, 2330, 5240, 3190, 7520, 15684, 8403, 14811, 9716, 12794, 13985, 15689, 12795, 9426, 563, 140, 5050, 14830, 16199, 6304, 4485, 17110, 8995, 13056, 13552, 8041, 14625, 10262, 13854, 2828, 19422, 13308, 6124, 9621, 18453, 4704, 6155, 17029, 6770, 9564, 11098, 19940, 16489, 15234, 11872, 945, 11310, 18143, 2356, 3606, 12869, 8619, 14433, 16756, 1672, 4042, 11381, 14893, 10410, 19216, 12011, 11251, 17051, 5088, 5470, 17838, 16102, 617, 15809, 8690, 8595, 6136, 810, 13494, 16024, 4300, 19505, 2527, 15295, 12065, 9474, 14119, 15574, 386, 2686, 2708, 12947, 17753, 1389, 9286, 1484, 11890, 4508, 164, 12898, 6696, 7789, 9194, 4597, 7884, 12320, 6579, 5885, 4928, 8328, 570, 858, 8906, 1414, 14627, 11744, 7969, 14616, 5988, 7393, 13418, 4420, 4146, 13301, 3365, 9544, 5522, 13815, 10663, 6074, 12431, 10571, 91, 2322, 11902, 15665, 1810, 15702, 14675, 15864, 7617, 14488, 15615, 6595, 14356, 4346, 6454, 5840, 14718, 16793, 11779, 9401, 263, 15934, 11552, 85, 13093, 10450, 10396, 5228, 6793, 15579, 7079, 881, 8878, 1047, 7204, 2131, 13706, 13345, 19561, 16503, 19046, 18926, 17929, 3708, 1736, 18820, 4553, 19615, 12923, 14207, 15046, 19010, 6693, 15110, 14380, 9236, 1155, 16923, 7027, 6222, 12394, 10314, 17277, 19013, 17931, 19645, 19737, 2176, 12370, 15678, 2694, 7127, 11506, 606, 11419, 17689, 15397, 10239, 9813, 10357, 10435, 10267, 596, 981, 17889, 9825, 1631, 12318, 580, 1406, 18482, 145, 11929, 16833, 18030, 626, 4204, 17300, 16702, 19584, 1531, 5688, 10589, 5938, 4085, 5324, 18548, 14058, 2243, 10376, 1523, 8679, 8284, 16737, 15706, 13100, 16311, 10712, 11153, 14171, 11110, 350, 15957, 3028, 4607, 9349, 16776, 5065, 8606, 18439, 4324, 2103, 5899, 17592, 8092, 7513, 15037, 2902, 5684, 19713, 16902, 16938, 4621, 18542, 7963, 14117, 9494, 14449, 13554, 5262, 19267, 14374, 17431, 998, 17453, 10516, 6354, 10018, 1616, 5720, 12986, 18435, 19575, 11649, 1849, 1973, 9571, 19045, 7015, 1259, 15526, 15168, 13952, 2260, 5847, 9049, 16029, 2630, 9954, 2352, 10271, 5726, 5249, 16796, 8497, 15127, 10897, 17843, 6668, 9045, 5119, 18493, 12376, 9318, 7032, 16942, 11698, 19983, 4933, 6584, 12309, 10748, 2590, 17617, 13746, 7378, 15060, 16873, 1919, 15654, 19272, 3829, 15312, 11725, 11350, 7106, 19352, 335, 9520, 9404, 3435, 14267, 2246, 19684, 15230, 4506, 3640, 5231, 9984, 5529, 4730, 521, 10024, 13609, 1985, 49, 12749, 12975, 7107, 18575, 3400, 3020, 18080, 16986, 9628, 10883, 14894, 589, 581, 10319, 6591, 11980, 18492, 170, 15692, 5955, 9428, 293, 15378, 18401, 14534, 8303, 19541, 17719, 15950, 19115, 8385, 66, 3629, 18906, 8428, 2651, 17911, 14619, 4196, 14305, 14564, 19185, 2644, 12771, 10811, 4988, 15275, 17470, 10573, 7356, 16189, 851, 1873, 3687, 12036, 1632, 11138, 10221, 1866, 5929, 9750, 4163, 1832, 896, 17008, 1686, 15845, 6820, 940, 6818, 1551, 14865, 17486, 7292, 18018, 418, 18406, 5832, 6301, 16170, 8191, 15499, 9839, 14122, 15358, 19705, 8853, 10439, 1850, 13666, 10131, 19314, 17817, 14956, 14293, 17637, 10287, 16683, 1837, 3614, 8572, 6887, 1618, 6821, 7102, 19306, 13506, 14103, 8242, 11369, 2748, 13794, 19813, 19897, 8105, 19800, 3469, 13798, 1649, 6135, 9028, 9365, 57, 10053, 8439, 3424, 3222, 5387, 1319, 8034, 18444, 14263, 18767, 1534, 2329, 17058, 16699, 6007, 14399, 15485, 9460, 19916, 9069, 16439, 4700, 6438, 18888, 11128, 16612, 12630, 8453, 9009, 3590, 3402, 14000, 4862, 360, 14418, 2282, 17517, 14092, 9068, 6412, 17961, 12536, 7218, 10515, 1903, 854, 15976, 3546, 147, 11446, 18862, 8059, 13299, 15817, 3132, 17087, 8842, 188, 468, 17023, 15156, 14852, 7718, 9312, 12494, 4453, 15464, 4983, 11996, 9456, 7956, 6502, 3602, 9966, 12425, 10617, 8167, 461, 17654, 17815, 19042, 13551, 5045, 9598, 17491, 17922, 13186, 1584, 12474, 1590, 11360, 3683, 10001, 2856, 12660, 9481, 5645, 13911, 3301, 2515, 4727, 18084, 18349, 1681, 16206, 2994, 12482, 11152, 13181, 8251, 107, 8011, 1548, 9531, 9979, 2349, 10060, 17942, 2518, 3266, 12054, 14929, 14947, 16629, 9611, 5271, 14451, 10874, 12447, 11549, 9738, 17786, 3951, 3135, 17781, 16067, 4219, 11894, 11017, 19406, 11090, 6079, 4957, 2939, 8319, 887, 9764, 4437, 19125, 11276, 6993, 13113, 14928, 13977, 17584, 7761, 11514, 2269, 12738, 11049, 3560, 9339, 3581, 1537, 11489, 8089, 18461, 16755, 13660, 13897, 3703, 8923, 18854, 2977, 13915, 5221, 7167, 13903, 17109, 17311, 669, 803, 10567, 7090, 19040, 1144, 3191, 15434, 1577, 5777, 11822, 1232, 11046, 8383, 7555, 11776, 7063, 12718, 4419, 11312, 16127, 16608, 9324, 10969, 14176, 16492, 14414, 14614, 18521, 246, 9340, 4630, 8178, 3524, 16051, 6592, 12769, 12829, 1858, 6857, 14716, 10397, 11662, 15733, 11537, 9079, 15142, 15995, 16781, 870, 12609, 18350, 4090, 19448, 1630, 3561, 7831, 6469, 19378, 16964, 14052, 15656, 10535, 4050, 3886, 16106, 12207, 4199, 7867, 18847, 10720, 12996, 5911, 18370, 1966, 10706, 1604, 6943, 9567, 9499, 15924, 6087, 17802, 15536, 3321, 2298, 2059, 19351, 6663, 11949, 2826, 2046, 2175, 13578, 2757, 19984, 15496, 1227, 9751, 12577, 3987, 10370, 12654, 18597, 2958, 3914, 2685, 13830, 17265, 526, 16998, 4882, 18942, 19621, 9857, 5810, 18483, 4841, 14364, 4458, 12338, 18127, 11859, 19076, 4387, 13037, 18221, 12053, 4579, 17614, 11, 11912, 4017, 15554, 16882, 11412, 4095, 19563, 6092, 11923, 3719, 9161, 15214, 5656, 4845, 40, 705, 10605, 3264, 9135, 3077, 1496, 507, 17307, 7366, 10934, 10380, 9541, 13095, 17045, 5838, 13658, 16405, 2344, 19610, 3484, 1472, 15241, 17406, 9196, 12758, 16551, 4973, 1629, 2197, 6457, 3758, 6329, 3544, 8740, 9089, 17474, 19662, 18237, 7632, 10977, 961, 8045, 5287, 1415, 9121, 9535, 13441, 6751, 3843, 13500, 8357, 5342, 8670, 4032, 5696, 4325, 6260, 7587, 6760, 9224, 15754, 15417, 15501, 8963, 1133, 16778, 3262, 19035, 38, 10729, 12284, 7991, 5643, 3603, 8447, 10994, 15427, 6799, 15547, 11261, 8255, 19698, 11680, 5809, 675, 7033, 3245, 6352, 17224, 8014, 1210, 14044, 12821, 11605, 16675, 16672, 13787, 11089, 16724, 6716, 17959, 3221, 19188, 11322, 5890, 97, 19739, 17927, 361, 14546, 7834, 11272, 13244, 8067, 1719, 1725, 12625, 16524, 3324, 18900, 3095, 7760, 4004, 14581, 12945, 7270, 13663, 3797, 17516, 8605, 10420, 11685, 11914, 16799, 13982, 3668, 6868, 993, 2268, 7457, 615, 3531, 8408, 13065, 2547, 6797, 6575, 10246, 3118, 3251, 1168, 12714, 15369, 15986, 10870, 11786, 8883, 5448, 285, 6265, 426, 15520, 14384, 18602, 11477, 14648, 10923, 14967, 11403, 11349, 11707, 3825, 3349, 15353, 309, 8065, 2343, 1374, 5699, 13643, 8025, 11382, 14211, 406, 10486, 5454, 1171, 19249, 6120, 9916, 14001, 17915, 237, 10331, 2251, 12319, 15072, 15306, 14279, 7439, 8026, 5910, 199, 1937, 13443, 18217, 6908, 13659, 12426, 2819, 11656, 4421, 8815, 18729, 6061, 14201, 14613, 14954, 12306, 17302, 16181, 19652, 16040, 19479, 775, 11296, 19043, 14435, 18728, 6748, 9150, 5170, 10017, 17761, 12450, 15998, 14350, 3414, 16090, 7354, 3327, 2345, 12086, 17007, 3609, 3967, 1376, 19476, 4813, 4931, 1440, 9533, 19265, 1068, 9864, 15216, 13543, 8800, 523, 10097, 10062, 18070, 7147, 415, 1463, 13716, 15208, 18679, 16597, 7860, 196, 16556, 5488, 7869, 2307, 8074, 18323, 6451, 6290, 14810, 8068, 1830, 384, 26, 11080, 13202, 6086, 5523, 398, 5500, 9942, 15399, 16892, 11461, 15567, 12926, 3939, 1627, 10431, 5098, 3527, 14688, 12578, 8616, 15628, 13237, 6069, 18222, 13058, 16526, 15167, 15162, 19982, 15920, 12260, 2607, 18671, 19679, 6978, 17937, 13579, 10591, 737, 7155, 19099, 8021, 3500, 18681, 12420, 18145, 3167, 6351, 10709, 801, 11476, 13152, 6645, 18691, 1517, 9905, 2206, 16558, 7486, 18412, 3015, 14183, 18676, 17413, 15439, 16470, 17946, 2054, 7852, 9468, 4657, 929, 11132, 18525, 6037, 8406, 10045, 14094, 11101, 7898, 12786, 10690, 12868, 4426, 15146, 7763, 1889, 1019, 17239, 6824, 5180, 3286, 3862, 16188, 11033, 9529, 7268, 7965, 7451, 10340, 13062, 16704, 17866, 11628, 7652, 15953, 4906, 14002, 18489, 12144, 9117, 12611, 18722, 11000, 1159, 3389, 19995, 16711, 14791, 8902, 3071, 6, 15218, 14793, 10602, 15598, 15126, 5792, 9012, 520, 13260, 16498, 12387, 17059, 4912, 18959, 19565, 2293, 15017, 1764, 14463, 7369, 14687, 8224, 12840, 18099, 7985, 257, 18422, 14464, 13235, 18811, 15857, 18977, 18434, 1743, 3087, 4408, 14677, 12831, 5537, 1008, 6105, 17429, 2488, 472, 12948, 4479, 1635, 16609, 10936, 2185, 5584, 17785, 14686, 11154, 807, 4330, 10208, 19913, 11496, 4743, 9352, 13853, 11538, 5451, 13171, 13478, 3202, 16864, 4824, 12973, 7811, 5181, 1315, 16155, 1926, 8246, 6912, 9373, 13270, 4563, 3179, 6249, 12414, 12177, 17575, 5016, 15112, 15645, 12434, 10511, 4769, 4282, 11357, 15610, 6334, 4127, 18048, 4520, 16426, 13217, 3177, 10417, 16764, 14291, 4290, 7495, 9278, 14403, 4719, 9090, 1515, 10437, 6998, 2033, 4658, 14306, 8275, 12469, 19055, 16464, 1324, 10590, 8822, 2692, 949, 7001, 18119, 12622, 1701, 19196, 17604, 17084, 670, 8499, 15262, 9976, 18936, 10281, 12531, 8197, 18537, 15248, 4895, 7783, 3941, 11306, 6286, 11473, 1576, 688, 7472, 7704, 1194, 10839, 4210, 1355, 17733, 10887, 12543, 14711, 6022, 5361, 5860, 3284, 7911, 4986, 15015, 15420, 11044, 2838, 19398, 13456, 15543, 6273, 3974, 18445, 15573, 16661, 19060, 18623, 7825, 4541, 1673, 3657, 16954, 5316, 652, 17467, 11519, 1419, 17360, 946, 18200, 9451, 15444, 15205, 18702, 18675, 6355, 7071, 2721, 2247, 1667, 4924, 1535, 16357, 16826, 14404, 18507, 4969, 10032, 5405, 16186, 17468, 14337, 11941, 5078, 15057, 4767, 18334, 19511, 15053, 12264, 18799, 3709, 12987, 3619, 6148, 18968, 268, 15525, 79, 19302, 1688, 3830, 19458, 6192, 1940, 6366, 2259, 18374, 741, 10952, 1102, 8188, 6179, 16665, 265, 19253, 10966, 14926, 1254, 17046, 17044, 2212, 15563, 12573, 1560, 11172, 12064, 3447, 12443, 493, 16957, 842, 3678, 8008, 17227, 8297, 16171, 18156, 8444, 2011, 2879, 14518, 16297, 7179, 16804, 10866, 14169, 6690, 13128, 15462, 5077, 1670, 9850, 5467, 1829, 11388, 2462, 1104, 7886, 8128, 9868, 15171, 10827, 7780, 13866, 6042, 17853, 8206, 12076, 5984, 2605, 17097, 8329, 3042, 8231, 18899, 12982, 15565, 5373, 14387, 12059, 17375, 19075, 19750, 5811, 5487, 11031, 15852, 10995, 9459, 13753, 1249, 14999, 15160, 9297, 7590, 11078, 10329, 8642, 5606, 1609, 8908, 6151, 6031, 7343, 2593, 12358, 11598, 13620, 16569, 13806, 6688, 7250, 12674, 8639, 12646, 4099, 7324, 12334, 13187, 1235, 10158, 13976, 4130, 8648, 4917, 7854, 5546, 3925, 195, 8423, 12001, 17170, 3755, 18447, 15368, 16292, 6634, 12195, 11459, 9728, 3332, 3756, 9473, 2157, 2723, 19496, 13766, 4365, 10223, 14915, 16956, 12218, 14972, 11854, 15203, 15176, 3626, 5406, 6727, 14224, 12584, 12705, 17438, 14948, 18510, 5450, 3176, 15849, 7335, 2957, 4249, 6369, 14994, 15108, 15085, 6787, 9870, 12049, 1120, 11999, 6526, 1140, 3125, 12023, 18817, 10667, 8000, 10309, 7697, 11391, 12390, 14133, 5478, 3472, 10501, 9749, 15676, 14514, 5216, 11216, 13405, 11157, 16780, 4690, 13033, 15125, 1129, 4487, 4543, 19951, 7924, 19618, 2926, 9701, 17532, 8305, 14318, 3394, 9880, 1597, 17601, 9487, 491, 7002, 13764, 990, 4203, 9495, 2862, 6901, 4304, 7401, 12620, 1465, 1252, 14466, 14932, 7934, 8075, 17842, 18994, 4810, 18953, 15761, 6197, 8047, 17103, 9466, 4434, 15694, 1300, 5965, 12360, 14199, 18488, 4899, 2499, 6370, 13326, 12251, 8469, 10677, 10251, 4242, 9041, 2188, 7667, 11842, 15980, 5549, 1070, 13138, 17374, 1366, 7004, 6875, 3875, 17393, 13963, 15021, 17272, 9672, 16969, 13043, 14476, 6317, 325, 4366, 12696, 5380, 11626, 1072, 3234, 5758, 17662, 7104, 848, 14615, 15785, 2734, 9918, 13254, 10198, 5557], "code": ["  public void deleteAll(String dataSetName) {\n    deleteAll(getDataSet(dataSetName));\n  }\n", "\tpublic Configuration get(final String path) {\n\t\tString fullPath = \"\".equals(this.path) ? path : this.path + \"/\" + path;\n\n\t\tConfiguration configuration = configurations.get(fullPath);\n\t\tif (configuration == null) {\n\t\t\tint index = path.indexOf('/');\n\t\t\tif (index == -1) {\n\t\t\t\tconfiguration = new Configuration(fullPath, this);\n\t\t\t} else {\n\t\t\t\tConfiguration parent = get(path.substring(0, index));\n\t\t\t\tconfiguration = parent.get(path.substring(index + 1));\n\t\t\t}\n\t\t}\n\n\t\treturn configuration;\n\t}\n", "public EspUpgradeApkResult upgrade ( ) { JSONObject apkInfo = getNewestApkInfo ( ) ; if ( apkInfo == null ) { log . debug ( STR_ ) ; return EspUpgradeApkResult . NOT_FOUND ; } String version ; String apkName ; try { version = apkInfo . getString ( KEY_APK", "\tpublic void sendCreated() {\n\t\tthis.response.setStatus(HttpServletResponse.SC_CREATED);\n\t}\n", "private void readObject ( ObjectInputStream s ) throws IOException , ClassNotFoundException { s . defaultReadObject ( ) ; if ( ! ( server instanceof RemoteMethodControl ) ) { throw new InvalidObjectException ( STR_ + STR_ ) ; } }", "public static <T> ImmutableSet<ImmutableSet<T>> immutablePowerSet(Set<T> set)\n    {\n        return powerSet(set).collect(new Function<MutableSet<T>, ImmutableSet<T>>()\n        {\n            public ImmutableSet<T> valueOf(MutableSet<T> set)\n            {\n                return set.toImmutable();\n            }\n        }).toImmutable();\n    }", "public static void updateCache(){\n  try {\n    if (!updating) {\n      updateCacheNative();\n    }\n  }\n catch (  Exception e) {\n    if (LogConfiguration.loggingIsEnabled()) {\n      logger.log(Level.SEVERE,\"Error updating cache.\",e);\n    }\n  }\n}\n", "public static byte[] gzip(String input){\n  FastByteArrayOutputStream baos=new FastByteArrayOutputStream();\n  PGZIPOutputStream gzos=null;\n  try {\n    gzos=new PGZIPOutputStream(baos);\n    gzos.write(input.getBytes(\"UTF-8\"));\n  }\n catch (  IOException e) {\n    MainUtil.handleError(e);\n  }\n finally {\n    if (gzos != null)     try {\n      gzos.close();\n    }\n catch (    IOException ignore) {\n    }\n  }\n  return baos.toByteArray();\n}\n", "public void decode ( ) { super . execute ( ( Void [ ] ) null ) ; }", "public void onTaskFinished ( BlockTask task , int x , int y , int z ) { }", "public Session createSession ( boolean transacted , int acknowledgeMode ) throws JMSException { if ( closed ) { throw new IllegalStateException ( STR_ ) ; } GSSessionImpl session = new GSSessionImpl ( this , transacted , acknowledgeMode ) ; if ( ! isStopp", "public GangliaListener(final IGangliaMessageHandler handler) throws UnknownHostException {\n  this(InetAddress.getByName(DEFAULT_GROUP),DEFAULT_PORT,new GangliaMessageDecoder31(),handler);\n}\n", "public abstract boolean isOpen ( ) ;", "\tpublic void setNatureza(int value) {\n\t\tif (value<-1 || value>=DadosBasicosDoProdutoTecnologicoNaturezaValues.values.length) {\n\t\t\tthrow new IllegalArgumentException(\"'\"+value+\"' is not a valid value for property natureza.\");\n\t\t}\n\t\tthis.natureza=value;\n\t}\n", "public synchronized void startPolling ( ) { m_scheduler . scheduleAtFixedRate ( m_notificationPoller , NUM_ , NUM_ , TimeUnit . MILLISECONDS ) ; }", "public boolean removeContainerAndCancelIfNecessary ( ImageContainer container ) { mContainers . remove ( container ) ; if ( mContainers . size ( ) == NUM_ ) { mRequest . cancel ( ) ; return BOOL_ ; } return BOOL_ ; }", "public boolean hasFile(InputFile inputFile){\n  return patchPositionMappingByFile.containsKey(getPath(inputFile));\n}\n", "private void createGui(){\n  final JPanel topPanel=new JPanel(new BorderLayout());\n  final JPanel innerTopPanel=new JPanel(new BorderLayout());\n  topPanel.add(innerTopPanel);\n  innerTopPanel.add(m_stdEditPanel);\n  innerTopPanel.add(m_debuggerPanel,BorderLayout.SOUTH);\n  final JPanel buttonPanel=new JPanel(new GridLayout(1,2));\n  buttonPanel.setBorder(new EmptyBorder(0,0,5,2));\n  buttonPanel.add(new JPanel());\n  buttonPanel.add(m_saveButton);\n  topPanel.add(buttonPanel,BorderLayout.SOUTH);\n  final JPanel innerSp=new JPanel(new BorderLayout());\n  m_middlePanel.setPreferredSize(new Dimension(m_middlePanel.getPreferredSize().width,75));\n  innerSp.add(m_middlePanel,BorderLayout.NORTH);\n  innerSp.add(m_bottomPanel,BorderLayout.CENTER);\n  final JSplitPane outerSp=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,topPanel,innerSp);\n  outerSp.setOneTouchExpandable(true);\n  outerSp.setDividerLocation(outerSp.getMinimumDividerLocation());\n  outerSp.setResizeWeight(0.5);\n  final JPanel innerPanel=new JPanel(new BorderLayout());\n  innerPanel.add(outerSp);\n  add(innerPanel);\n}\n", "    private void addContactGroup(BlackBerryContactGroup contactGroup) {\n    \t// Implementing this either requires having the composition\n    \t// screen add multiple recipient lines, or actually supporting\n    \t// contact groups directly in this field\n    \tDialog.alert(resources.getString(LogicMailResource.EMAILADDRESSBOOKEDIT_ALERT_GROUPS_UNSUPPORTED));\n    }\n", "public void addToSpriteGroup ( BaseSub sprite ) { l_sprite_group . add ( sprite ) ; }", "public void requestModificationLock() {\r\n    lock.readLock().lock();\r\n    if (!veto)\r\n      return;\r\n\r\n    if (throwException) {\r\n      lock.readLock().unlock();\r\n      throw new OModificationOperationProhibitedException(\"Modification requests are prohibited\");\r\n    }\r\n\r\n    boolean wasInterrupted = false;\r\n    Thread thread = Thread.currentThread();\r\n    waiters.add(thread);\r\n\r\n    while (veto) {\r\n      LockSupport.park(this);\r\n      if (Thread.interrupted())\r\n        wasInterrupted = true;\r\n    }\r\n\r\n    waiters.remove(thread);\r\n    if (wasInterrupted)\r\n      thread.interrupt();\r\n  }", "public DefaultSwidProcessor setSoftwareLicensor(final String softwareLicensorName,\n            final String softwareLicensorRegId) {\n        swidTag.setSoftwareLicensor(\n                new EntityComplexType(\n                        new Token(softwareLicensorName, idGenerator.nextId()),\n                        new RegistrationId(softwareLicensorRegId, idGenerator.nextId()),\n                        idGenerator.nextId()));\n        return this;\n    }", "public float lengthSquared ( ) { return Vector2 . lengthSquared ( this ) ; }", "\tprivate ConnectionAnchor getConnectionAnchor() {\n\t\tif (connectionAnchor == null) {\n\t\t\tconnectionAnchor = new ChopboxAnchor(getFigure());\n\t\t}\n\t\treturn connectionAnchor;\n\t}\n", "Union6 < First , Second , Third , Fourth , Fifth , Sixth > first ( First value ) ;", "public Observable<ManagedClusterAccessProfileInner> getAccessProfileAsync(String resourceGroupName, String resourceName, String roleName) {\n        return getAccessProfileWithServiceResponseAsync(resourceGroupName, resourceName, roleName).map(new Func1<ServiceResponse<ManagedClusterAccessProfileInner>, ManagedClusterAccessProfileInner>() {\n            @Override\n            public ManagedClusterAccessProfileInner call(ServiceResponse<ManagedClusterAccessProfileInner> response) {\n                return response.body();\n            }\n        });\n    }", "public CArbitraryViewsTable ( final JTree projectTree , final CAbstractTreeViewsTableModel model , final IViewContainer container , final IHelpInformation helpInfo ) { super ( projectTree , model , container , helpInfo ) ; }", "public void marshall(RebootRelationalDatabaseRequest rebootRelationalDatabaseRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (rebootRelationalDatabaseRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(rebootRelationalDatabaseRequest.getRelationalDatabaseName(), RELATIONALDATABASENAME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public File nextBinlog ( String binlogName ) { if ( this . binlogFiles == null ) throw new IllegalStateException ( STR_ ) ; int index = - NUM_ ; File binlog = new File ( this . binlogDirectory , binlogName ) ; for ( index = NUM_ ; index < binlogFiles . size ( ) ; index ++ ) { if ( binlog . getName ( ) . equals ( binlogFiles . get ( index ) . getName ( ) ) ) { break ; } } if ( index == - NUM_ ) { logger . warn ( STR_ + binlogName ) ; return null ; } int nextIndex = index + NUM_ ; if ( ( nextIndex ) < binlogFiles . size ( ) ) { return ( binlogFiles . get ( nextIndex ) ) ; } else { return null ; } }", "private static int selectTrack(MediaExtractor extractor){\n  int numTracks=extractor.getTrackCount();\n  for (int i=0; i < numTracks; i++) {\n    MediaFormat format=extractor.getTrackFormat(i);\n    String mime=format.getString(MediaFormat.KEY_MIME);\n    if (mime.startsWith(\"video/\")) {\n      if (VERBOSE) {\n        Log.d(TAG,\"Extractor selected track \" + i + \" (\"+ mime+ \"): \"+ format);\n      }\n      return i;\n    }\n  }\n  return -1;\n}\n", "public static void setHTTPVersion(Stub stub, boolean http10) {\n        stub._setProperty(MessageContext.HTTP_TRANSPORT_VERSION,\n                          (http10)\n                          ? HTTPConstants.HEADER_PROTOCOL_V10\n                          : HTTPConstants.HEADER_PROTOCOL_V11);\n    }", "private void collectLineEdge(DirectedEdge de,int opCode,List edges){\n  Label label=de.getLabel();\n  Edge e=de.getEdge();\n  if (de.isLineEdge()) {\n    if (!de.isVisited() && OverlayOp.isResultOfOp(label,opCode) && !e.isCovered()) {\n      edges.add(e);\n      de.setVisitedEdge(true);\n    }\n  }\n}\n", "private boolean finishLine ( boolean sawNewline ) throws IOException { handleLine ( line . toString ( ) , sawReturn ? ( sawNewline ? STR_ : STR_ ) : ( sawNewline ? STR_ : STR_ ) ) ; line = new StringBuilder ( ) ; sawReturn = BOOL_ ; return sawNewline ; }", "public void stop() throws Exception {\n\t\tsynchronized (this.lock) {\n\t\t\tif (this.nephele != null) {\n\t\t\t\tthis.nephele.stop();\n\t\t\t\tthis.nephele = null;\n\t\t\t} else {\n\t\t\t\tthrow new IllegalStateException(\"The local executor was not started.\");\n\t\t\t}\n\t\t}\n\t}", "public static NotEqualsSpacePredicate notEqual ( Object value ) { return new NotEqualsSpacePredicate ( value ) ; }", "private static List<String> extractWildcardPrefixes(List<String> propertyKeys) {\n\t\treturn propertyKeys.stream()\n\t\t\t.filter(p -> p.endsWith(\"*\"))\n\t\t\t.map(s -> s.substring(0, s.length() - 1))\n\t\t\t.collect(Collectors.toList());\n\t}", "public double computeAverageLocalOfObservations ( int [ ] newOrdering ) throws Exception { double actualMI = lastAverage ; int [ ] originalDiscrete = discObservations ; int [ ] newDiscrete = MatrixUtils . extractSelectedTimePoints ( originalDiscrete , new", "public void addBugCategory ( BugCategory bugCategory ) { BugCategory old = bugCategories . get ( bugCategory . getCategory ( ) ) ; if ( old != null ) { throw new IllegalArgumentException ( STR_ ) ; } bugCategories . put ( bugCategory . getCategory ( ) , b", "public byte[] readPersistentBytes(String key){\n  try {\n    if (checkService()) {\n      return sService.readPersistentBytes(key);\n    }\n  }\n catch (  RemoteException e) {\n  }\n  return null;\n}\n", "protected void generatePackageTreeFile() throws DocFileIOException {\n        HtmlTree body = getPackageTreeHeader();\n        HtmlTree htmlTree = (configuration.allowTag(HtmlTag.MAIN))\n                ? HtmlTree.MAIN()\n                : body;\n        Content headContent = contents.getContent(\"doclet.Hierarchy_For_Package\",\n                utils.getPackageName(packageElement));\n        Content heading = HtmlTree.HEADING(HtmlConstants.TITLE_HEADING, false,\n                HtmlStyle.title, headContent);\n        Content div = HtmlTree.DIV(HtmlStyle.header, heading);\n        if (configuration.packages.size() > 1) {\n            addLinkToMainTree(div);\n        }\n        htmlTree.addContent(div);\n        HtmlTree divTree = new HtmlTree(HtmlTag.DIV);\n        divTree.addStyle(HtmlStyle.contentContainer);\n        addTree(classtree.baseClasses(), \"doclet.Class_Hierarchy\", divTree);\n        addTree(classtree.baseInterfaces(), \"doclet.Interface_Hierarchy\", divTree);\n        addTree(classtree.baseAnnotationTypes(), \"doclet.Annotation_Type_Hierarchy\", divTree);\n        addTree(classtree.baseEnums(), \"doclet.Enum_Hierarchy\", divTree, true);\n        htmlTree.addContent(divTree);\n        if (configuration.allowTag(HtmlTag.MAIN)) {\n            body.addContent(htmlTree);\n        }\n        HtmlTree tree = (configuration.allowTag(HtmlTag.FOOTER))\n                ? HtmlTree.FOOTER()\n                : body;\n        addNavLinks(false, tree);\n        addBottom(tree);\n        if (configuration.allowTag(HtmlTag.FOOTER)) {\n            body.addContent(tree);\n        }\n        printHtmlDocument(null, true, body);\n    }", "private boolean isProjectUsingDefaultSdk(T projectSdk){\n  if (!isDefaultSdk(projectSdk)) {\n    return false;\n  }\n  try {\n    IClasspathEntry entry=ClasspathUtilities.findClasspathEntryContainer(javaProject.getRawClasspath(),doGetContainerId());\n    if (entry != null) {\n      if (SdkClasspathContainer.isDefaultContainerPath(doGetContainerId(),entry.getPath())) {\n        return true;\n      }\n    }\n  }\n catch (  CoreException ce) {\n    CorePluginLog.logError(ce);\n  }\n  return false;\n}\n", "    public void test2BuildQuery() {\n        System.out.println(\"buildQuery\");\n        Collection<LinkQuery> source = new LinkedList<LinkQuery>();\n        NullLinkQuery part = new NullLinkQuery();\n        part.buildQuery(false);\n        source.add(part);\n        part = new NullLinkQuery();\n        part.buildQuery(false);\n        source.add(part);\n        OrLinkQuery instance = new OrLinkQuery();\n        instance.buildQuery(source);\n    }\n", "public static boolean isPercentage(String value){\n  if (!isInteger(value)) {\n    return false;\n  }\n  Integer integer=Integer.valueOf(value);\n  return integer >= 0 && integer <= 100;\n}", "public void readFrom(ChannelBuffer data){\n  this.portNumber=data.readShort();\n  if (this.hardwareAddress == null)   this.hardwareAddress=new byte[OFP_ETH_ALEN];\n  data.readBytes(this.hardwareAddress);\n  byte[] name=new byte[16];\n  data.readBytes(name);\n  int index=0;\n  for (  byte b : name) {\n    if (0 == b)     break;\n    ++index;\n  }\n  this.name=new String(Arrays.copyOf(name,index),Charset.forName(\"ascii\"));\n  this.config=data.readInt();\n  this.state=data.readInt();\n  this.currentFeatures=data.readInt();\n  this.advertisedFeatures=data.readInt();\n  this.supportedFeatures=data.readInt();\n  this.peerFeatures=data.readInt();\n}\n", "private FilterConfig processFilterConfig(DeploymentDescriptor webDD, Filter filter) {\n\n        String filterName = filter.getFilterName();\n        Map<String, ConfigItem<FilterConfig>> filterMap = configurator.getConfigItemMap(\"filter\");\n        ConfigItem<FilterConfig> existedFilter = filterMap.get(filterName);\n\n        FilterConfig filterConfig = null;\n        if (existedFilter == null) {\n            String id = webDD.getIdForComponent(filter);\n            if (id == null) {\n                id = \"FilterGeneratedId\" + configurator.generateUniqueId();\n            }\n            filterConfig = webAppConfiguration.createFilterConfig(id, filterName);\n\n            configureTargetConfig(filterConfig, filter.getFilterClass(), \"Filter\", filter);\n\n            webAppConfiguration.addFilterInfo(filterConfig);\n\n            filterMap.put(filterName, createConfigItem(filterConfig));\n        } else {\n            filterConfig = existedFilter.getValue();\n        }\n\n        configureInitParams(filterConfig, filter.getInitParams(), \"filter\");\n\n        if (filter.isSetAsyncSupported()) {\n            configureAsyncSupported(filterConfig, filter.isAsyncSupported(), \"filter\");\n        }\n        return filterConfig;\n    }", "public static Map<String, String> convertPropertyConnectionsToSimpleForm(Map<String, Set<String>> connections) {\n        Map<String, String> result = new HashMap<String, String>();\n        if (connections == null) {\n            return result;\n        }\n        for (Map.Entry<String, Set<String>> entry : connections.entrySet()) {\n            result.put(entry.getKey(), Joiner.on(',').join(entry.getValue()));\n        }\n        return result;\n    }", "\tprotected void printFooter(ProgramElement x) {\n\t\t// also in visitComment!\n\t\tif (overwriteParsePositions) {\n\t\t\toverwritePosition.setPosition(line, column);\n\t\t\tx.setEndPosition(overwritePosition);\n\t\t}\n\t\tint s = (x.getComments() != null) ? x.getComments().size() : 0;\n\t\tfor (int i = 0; i < s; i += 1) {\n\t\t\tComment c = x.getComments().getComment(i);\n\t\t\tif (!c.isPrefixed()) {\n\t\t\t\tif (c instanceof SingleLineComment) {\n\t\t\t\t\t// Store until the next line feed is written.\t   \n\t\t\t\t\tsingleLineCommentWorkList.add((SingleLineComment) c);\n\t\t\t\t} else {\n\t\t\t\t\tc.accept(this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "private List<List<UnitFactor>> getPaths(Unit from, Unit to, Set<Unit> seen) {\n    List<List<UnitFactor>> result = new ArrayList<>();\n\n    // See if there is a direct path and return it.\n    UnitFactor factor = get(from, to);\n    if (factor != null) {\n    ", "public synchronized boolean isRunning ( ) throws ReplicatorException { String command = vmrrControlScript + STR_ ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STR_ + command ) ; } int result = this . execAndReturnExitValue ( command ) ; return (", "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final <U> Maybe<U> cast(final Class<? extends U> clazz) {\n        ObjectHelper.requireNonNull(clazz, \"clazz is null\");\n        return map(Functions.castFunction(clazz));\n    }", "public void copyTo(QuerySpecification clonedSpec){\n  clonedSpec.context.documentLinkWhiteList=this.context.documentLinkWhiteList;\n  clonedSpec.context.filter=this.context.filter;\n  clonedSpec.context.nativePage=this.context.nativePage;\n  clonedSpec.context.nativeQuery=this.context.nativeQuery;\n  clonedSpec.context.nativeSearcher=this.context.nativeSearcher;\n  clonedSpec.context.nativeSort=this.context.nativeSort;\n  clonedSpec.expectedResultCount=this.expectedResultCount;\n  clonedSpec.linkTerms=this.linkTerms;\n  clonedSpec.groupByTerm=this.groupByTerm;\n  clonedSpec.options=EnumSet.copyOf(this.options);\n  clonedSpec.query=this.query;\n  clonedSpec.resultLimit=this.resultLimit;\n  clonedSpec.sortOrder=this.sortOrder;\n  clonedSpec.sortTerm=this.sortTerm;\n  clonedSpec.groupSortTerm=this.groupSortTerm;\n  clonedSpec.groupSortOrder=this.groupSortOrder;\n}\n", "public JSON readFromStream( InputStream stream ) {\n      try{\n         StringBuffer xml = new StringBuffer();\n         BufferedReader in = new BufferedReader( new InputStreamReader( stream ) );\n         String line = null;\n         while( (line = in.readLine()) != null ){\n            xml.append( line );\n         }\n         return read( xml.toString() );\n      }catch( IOException ioe ){\n         throw new JSONException( ioe );\n      }\n   }", "\tpublic void repairOffset() {\n\t\tint runnigOffset = 0;\n\t\tInteger linesAdded = 0;\n\t\tint skip = 0;\n\t\tint multilineEndCol = 0;\n\t\tfor (int i = 1; i <= lastLineNumber; i += 1) {\n\t\t\tTokenLine tl = map.get(i);\n\t\t\tif (skip == 0 || tl != null) {\n\t\t\t\tif (skip == 0) {\n\t\t\t\t\tmultilineEndCol = 0;\n\t\t\t\t}\n\t\t\t\tint[] arr = setOffsetAndGetLengthOfLine(tl, runnigOffset,\n\t\t\t\t\t\tmultilineEndCol);\n\t\t\t\tint offset = arr[0];\n\t\t\t\tlinesAdded = arr[1];\n\t\t\t\tskip = linesAdded - 1;\n\t\t\t\tif (skip > 1) {\n\t\t\t\t\tmultilineEndCol = tl.getEndCol();\n\t\t\t\t}\n\n\t\t\t\trunnigOffset += offset;\n\t\t\t} else {\n\t\t\t\tskip--;\n\t\t\t}\n\n\t\t}\n\n\t}\n", "public static int h(long key){\n  return (int)((int)(key >> 32) ^ Integer.reverseBytes((int)(key & 0xFFFFFFFF))) & 0x7fffffff;\n}\n", "private void pickOnlyProvider ( ) throws ServletException { try { Entry < OAuthLoginProvider > loginProvider = Iterables . getOnlyElement ( loginProviders ) ; defaultAuthPlugin = loginProvider . getPluginName ( ) ; defaultAuthProvider = loginProvider . ge", "public String [ ] headers ( final String name ) { final Map < String , List < String > > headers = headers ( ) ; if ( headers == null || headers . isEmpty ( ) ) return EMPTY_STRINGS ; final List < String > values = headers . get ( name ) ; if ( values != null && ! values . isEmpty ( ) ) return values . toArray ( new String [ values . size ( ) ] ) ; else return EMPTY_STRINGS ; }", "public void childrenRemoved(BeanContextMembershipEvent bcme){\n  Iterator it=bcme.iterator();\n  while (it.hasNext()) {\n    findAndUndo(it.next());\n  }\n}\n", "    public void info(Object message, Throwable error) {\n        add(Level.INFO, message, error);\n    }\n", "public static boolean isTimeSeries ( Class < ? extends TaggedLogAPIEntity > clazz ) { TimeSeries ts = clazz . getAnnotation ( TimeSeries . class ) ; return ts != null && ts . value ( ) ; }", "private boolean isClosed(){\n  if (!verifyReader) {\n    return false;\n  }\n  try {\n    br.mark(1);\n    int nextByte=br.read();\n    br.reset();\n    return nextByte == -1;\n  }\n catch (  IOException e) {\n    return true;\n  }\n}\n", "    public void setMovingTimeString(Date moveStartDate, Date moveEndDate) {\n        this.moveDate = moveStartDate;\n        this.movingString = timeFormat.format(moveDate) + \" - \" + timeFormat.format(moveEndDate);\n    }\n", "\tpublic void clearFacts() {\n\t\tmodules.clearAllFacts();\n\t}\n", "public SyncToolConfig retrievePrevConfig(File backupDir) {\n        File prevConfigBackupFile =\n            new File(backupDir, PREV_BACKUP_FILE_NAME);\n        if (prevConfigBackupFile.exists()) {\n            String[] prevConfigArgs = retrieveConfig(prevConfigBackupFile);\n            try {\n                return processStandardOptions(prevConfigArgs, false);\n            } catch (ParseException e) {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }", "\tpublic Chapter getChapter(String chapterPath) {\n\t\tint slash = chapterPath.indexOf(\"/\"); //$NON-NLS-1$\n\t\tString chapterName = (slash == -1) ? chapterPath : chapterPath\n\t\t\t\t.substring(0, slash);\n\n\t\tfor (Chapter chapter : children) {\n\t\t\tif (chapter.getName().compareTo(chapterName) == 0) {\n\t\t\t\treturn (slash == -1) ? chapter : chapter.getChapter(chapterPath\n\t\t\t\t\t\t.substring(slash + 1));\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n", "private static int calculateLRC ( byte [ ] data , int off , int length ) { return calculateLRC ( data , off , length , NUM_ ) ; }", "public void loadURL ( String url ) ;", "  public File getRepositoryFile(Path filePath, String fileName) {\n    File repoDir = getFile(repositoryPath.add(filePath));\n    repoDir.mkdirs();\n    return new File(repoDir, fileName);\n  }\n", "private void checkSearchables(ArrayList<SearchableInfo> searchablesList){\n  assertNotNull(searchablesList);\n  int count=searchablesList.size();\n  for (int ii=0; ii < count; ii++) {\n    SearchableInfo si=searchablesList.get(ii);\n    checkSearchable(si);\n  }\n}\n", "public Connection ( String clientHandle , String clientId , String host , int port , Context context , MqttAndroidClient client , boolean sslConnection ) { this . clientHandle = clientHandle ; this . clientId = clientId ; this . host = host ; this . port = port ; this . context = context ; this . client = client ; this . sslConnection = sslConnection ; history = new ArrayList < String > ( ) ; StringBuffer sb = new StringBuffer ( ) ; sb . append ( STR_ ) ; sb . append ( clientId ) ; sb . append ( STR_ ) ; addAction ( sb . toString ( ) ) ; }", "    public Type type() {\n        return Type.t_bool;\n    }\n", "\tpublic void assertDecryptWithOwnerPasswd(final String expected) {\n\t\ttester.assertDecryptionWithOwnerPasswd(expected);\n\t}\n", "    public Power1 get_left_width() {\n        return edge_widths[AbsEdge.LEFT.ordinal()];\n    }\n", "@SuppressWarnings(\"deprecation\")\n\t@VisibleForTesting\n\tpublic static boolean hasNewNetworkConfig(final Configuration config) {\n\t\treturn config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||\n\t\t\tconfig.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||\n\t\t\tconfig.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||\n\t\t\t!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS);\n\t}", "private String encodeUri(String uri){\n  String newUri=\"\";\n  StringTokenizer st=new StringTokenizer(uri,\"/ \",true);\n  while (st.hasMoreTokens()) {\n    String tok=st.nextToken();\n    if (tok.equals(\"/\"))     newUri+=\"/\";\n else     if (tok.equals(\" \"))     newUri+=\"%20\";\n else {\n      newUri+=URLEncoder.encode(tok);\n    }\n  }\n  return newUri;\n}\n", "private boolean appendText(final String indent, final Element element, final StringBuilder sb) {\n        if (sb != null) {\n            if (element.getTagName().indexOf(\":annotation\") < 0 && element.getTagName().indexOf(\":documentation\") < 0) {\n                sb.append(String.format(ELEMENT_LOG, indent, element.getTagName(), element.getAttribute(\"name\")));\n                return true;\n            }\n        }\n        return false;\n    }", "@Override public void end(){\n  super.end();\n  final GameData data=getData();\n  if (GameStepPropertiesHelper.isRemoveAirThatCanNotLand(data)) {\n    removeAirThatCantLand();\n  }\n  if (GameStepPropertiesHelper.isFireRockets(data)) {\n    if (m_needToDoRockets && TechTracker.hasRocket(m_bridge.getPlayerID())) {\n      final RocketsFireHelper helper=new RocketsFireHelper();\n      helper.fireRockets(m_bridge,m_bridge.getPlayerID());\n      m_needToDoRockets=false;\n    }\n  }\n  if (GameStepPropertiesHelper.isResetUnitStateAtEnd(data)) {\n    resetUnitStateAndDelegateState();\n  }\n  m_needToInitialize=true;\n  m_needToDoRockets=true;\n}\n", "public boolean parse ( ) { try { String jsonManifest = readManifestFile ( manifestPath ) ; Object obj = parser . parse ( jsonManifest ) ; rootJSONObject = ( JSONObject ) obj ; return BOOL_ ; } catch ( IOException ioe ) { logger . error ( STR_ + manifestPath + STR_ + ioe . toString ( ) ) ; return BOOL_ ; } catch ( ParseException pe ) { logger . error ( STR_ + manifestPath + STR_ + pe . getPosition ( ) ) ; logger . error ( pe ) ; return BOOL_ ; } }", "@Override\n\tpublic void tableUpdated() {\n\t\tsuper.tableUpdated();\n\t\tsynchronized(unsortedRowsCacheLock) {\n\t\t\tunsortedRowsCache = null;\n\t\t}\n\t\tsynchronized(sortedRowsCacheLock) {\n\t\t\tsortedRowsCache = null;\n\t\t}\n\t\tsynchronized(rowCacheLock) {\n\t\t\trowCacheLoaded ", "protected static String getOpenSSLVersion(long openSSLVersionConstant) {\n        final long major = openSSLVersionConstant >>> MAJOR_OFFSET;\n        final long minor = (openSSLVersionConstant & MINOR_MASK) >>> MINOR_OFFSET;\n        final long fix = (openSSLVersionConstant & FIX_MASK) >>> FIX_OFFSET;\n        final long patchLevel = (openSSLVersionConstant & PATCH_MASK) >>> PATCH_OFFSET;\n        final String patch = 0 == patchLevel || patchLevel > NUM_LETTERS ? \"\" : String.valueOf((char) (patchLevel + 'a' - 1));\n        final int statusCode = (int) (openSSLVersionConstant & STATUS_MASK);\n        final String status = 0xf == statusCode ? \"\" : (0 == statusCode ? \"-dev\" : \"-beta\" + statusCode);\n        return String.format(\"%d.%d.%d%s%s\", major, minor, fix, patch, status);\n    }", "  public int getNumberTuple (){\n    return first_var.size();\n  }\n", "    private void init(HostId hostId, boolean isAutomaticMarketPlaceStart) throws IOException {\n        // Verify host id to be a local one.\n        if (!hostId.isLocalHost()) {\n            throw new IOException(\"Host id is not local: \" + hostId);\n        }\n        this.hostId = hostId;\n\n        // Create server socket.\n        final int port = hostId.getPort();\n        serverSocket = new ServerSocket(port);\n\n        // Create market place.\n        this.marketPlace = createMarketPlace();\n        this.isAutomaticMarketPlaceStart = isAutomaticMarketPlaceStart;\n\n        // Set thread attributes.\n        setName(\"Host (\" + hostId + \")\");\n        setPriority(AgentopiaConstants.HOST_PRIORITY);\n        setDaemon(true);\n    }\n", "private static SecretKey loadSecretKey ( ) { final String PRIVATE_KEY_FILENAME = STR_ ; SecretKey secretKey = KeyFactory . loadKey ( PRIVATE_KEY_FILENAME ) ; if ( secretKey == null ) { secretKey = KeyFactory . generateKey ( new byte [ ] { - NUM_ , - NUM_ ", "public boolean isActive(){\n  return timeEnd == null || timeEnd.getTime() > System.currentTimeMillis();\n}\n", "public void addPolicyFileUrl(String url){\n  if (policyFileUrls == null) {\n    policyFileUrls=new ArrayList<String>();\n  }\n  policyFileUrls.add(url == null ? \"\" : url);\n}\n", "public void addInstruction ( InstructionHandle handle ) throws CFGBuilderException { int position = handle . getPosition ( ) ; if ( usedInstructionSet . get ( position ) ) { throw new CFGBuilderException ( STR_ + handle + STR_ ) ; } instructionSet . set (", "public void readXML ( String fileName ) throws IOException , DocumentException ;", "public void focusGained ( FocusEvent e ) { comboBox . repaint ( ) ; }", "public QuarkFactoryResult create(Properties info) throws QuarkException {\n  try {\n    Connection connection=new Connection(info);\n    connection.runFlyWay();\n    DSSet dsSet=connection.getDSSet();\n    DBI dbi=connection.getDbi();\n    JdbcSourceDAO jdbcSourceDAO=dbi.onDemand(JdbcSourceDAO.class);\n    QuboleDbSourceDAO quboleDbSourceDAO=dbi.onDemand(QuboleDbSourceDAO.class);\n    CubeDAO cubeDAO=dbi.onDemand(CubeDAO.class);\n    ViewDAO viewDAO=dbi.onDemand(ViewDAO.class);\n    MeasureDAO measureDAO=dbi.onDemand(MeasureDAO.class);\n    DimensionDAO dimensionDAO=dbi.onDemand(DimensionDAO.class);\n    long dsSetId=dsSet.getId();\n    long defaultDataSourceId=dsSet.getDefaultDatasourceId();\n    List<JdbcSource> jdbcSources=jdbcSourceDAO.findByDSSetId(dsSetId);\n    List<QuboleDbSource> quboleDbSources=quboleDbSourceDAO.findByDSSetId(dsSetId);\n    List<DataSource> dataSources=new ArrayList<>();\n    dataSources.addAll(jdbcSources);\n    dataSources.addAll(quboleDbSources);\n    ImmutableList.Builder<com.qubole.quark.planner.DataSourceSchema> schemaList=new ImmutableList.Builder<>();\n    com.qubole.quark.planner.DataSourceSchema defaultSchema=null;\n    for (    DataSource dataSource : dataSources) {\n      com.qubole.quark.planner.DataSourceSchema dataSourceSchema=new DataSourceSchema(dataSource.getProperties(defaultDataSourceId));\n      if (dataSource.getId() == defaultDataSourceId) {\n        defaultSchema=dataSourceSchema;\n      }\n      schemaList.add(dataSourceSchema);\n    }\n    RelSchema relSchema=getRelSchema(viewDAO,cubeDAO,measureDAO,dimensionDAO,dsSetId);\n    return new QuarkFactoryResult(schemaList.build(),relSchema,defaultSchema);\n  }\n catch (  Exception se) {\n    LOG.error(se.getMessage());\n    throw new QuarkException(se);\n  }\n}\n", "public boolean connect() throws Exception {\n  serverAddress=InetAddress.getByName(serverIP);\n  latch=new CountDownLatch(2);\n  tcpThread.start();\n  udpThread.start();\n  return latch.await(10,TimeUnit.SECONDS);\n}\n", "private static String convertActionTypeToIntent(RamlActionType actionType, boolean isIdInPath) {\n\t\tswitch (actionType) {\n\t\t\tcase DELETE:\n\t\t\t\treturn \"delete\";\n\t\t\tcase GET:\n\t\t\t\treturn \"get\";\n\t\t\tcase POST:\n\t\t\t\tif (!isIdInPath) {\n\t\t\t\t\treturn \"create\";\n\t\t\t\t}", "public static String getAnnotationString(Annotation annotation) throws ReflectiveOperationException {\n\t\tClass<? extends Annotation> annotationType = annotation.annotationType();\n\t\tStringBuilder annotationString = new StringBuilder();\n\t\tMethod[] annotationElements = filterNonEmptyElements(annotation);\n\t\tif (annotationElements.length == 0) {\n\t\t\t// annotation without elements\n\t\t\tannotationString.append(annotationType.getSimpleName());\n\t\t\treturn annotationString.toString();\n\t\t}\n\t\tif (annotationElements.length == 1 && annotationElements[0].getName().equals(\"value\")) {\n\t\t\t// annotation with single element which has name \"value\"\n\t\t\tannotationString.append(annotationType.getSimpleName());\n\t\t\tObject value = fetchAnnotationElementValue(annotation, annotationElements[0]);\n\t\t\tannotationString.append('(').append(value.toString()).append(')');\n\t\t\treturn annotationString.toString();\n\t\t}\n\t\t// annotation with one or more custom elements\n\t\tannotationString.append('(');\n\t\tfor (Method annotationParameter : annotationElements) {\n\t\t\tObject value = fetchAnnotationElementValue(annotation, annotationParameter);\n\t\t\tString nameKey = annotationParameter.getName();\n\t\t\tString nameValue = value.toString();\n\t\t\tannotationString.append(nameKey).append('=').append(nameValue).append(',');\n\t\t}\n\n\t\tassert annotationString.substring(annotationString.length() - 1).equals(\",\");\n\n\t\tannotationString = new StringBuilder(annotationString.substring(0, annotationString.length() - 1));\n\t\tannotationString.append(')');\n\t\treturn annotationString.toString();\n\t}", "  public long getIdle() {\n    if (idle == 0) {\n      return idle;\n    }\n    long currentTime = System.currentTimeMillis() / 60000;\n    // divide by 1000 * 60 to get minutes\n    return currentTime - becameIdleTime + idle;\n  }\n", "    public boolean hasSumOfLogarithms() {\n        return this.hasSumOfLogarithms;\n    }\n", "void removed ( IProgressOperation operation ) ;", "   public void setEventType (int type) {\n      eventType = type;\n   }\n", "\tpublic SmartWriter write(boolean b) throws IOException {\n\t\t_w.write(Boolean.toString(b));\n\t\treturn this;\n\t}\n", "protected HttpRequest startPart ( ) throws IOException { if ( ! multipart ) { multipart = BOOL_ ; contentType ( CONTENT_TYPE_MULTIPART ) . openOutput ( ) ; output . write ( STR_ + BOUNDARY + CRLF ) ; } else output . write ( CRLF + STR_ + BOUNDARY + CRLF )", "public Buffer read(VertexInfo vertexInfo,int address,int firstVertex,int numberOfVertex,boolean canAllNativeVertexInfo){\n  videoEngine=VideoEngine.getInstance();\n  this.vertexInfo=vertexInfo;\n  this.canAllNativeVertexInfo=canAllNativeVertexInfo;\n  update();\n  if (isAllNative()) {\n    if (log.isDebugEnabled()) {\n      log.debug(String.format(\"Not reading Vertex, all native at 0x%08X\",address));\n    }\n    return null;\n  }\n  if (log.isDebugEnabled()) {\n    log.debug(String.format(\"Reading %d Vertex at 0x%08X\",numberOfVertex,address + firstVertex * vertexInfo.vertexSize));\n    if (!textureNative) {\n      log.debug(\"Texture non-native \" + vertexInfo.toString());\n    }\n    if (!colorNative) {\n      log.debug(\"Color non-native \" + vertexInfo.toString());\n    }\n    if (!normalNative) {\n      log.debug(\"Normal non-native \" + vertexInfo.toString());\n    }\n    if (!positionNative) {\n      log.debug(\"Position non-native \" + vertexInfo.toString());\n    }\n  }\n  setAddress(address + firstVertex * vertexInfo.vertexSize);\n  createVertexDataBuffer(numberOfVertex);\n  IVertexInfoReader weightReader=getWeightReader(weightNative);\n  IVertexInfoReader textureReader=getTextureReader(textureNative);\n  IVertexInfoReader colorReader=getColorReader(colorNative);\n  IVertexInfoReader normalReader=getNormalReader(normalNative);\n  IVertexInfoReader positionReader=getPositionReader(positionNative);\n  IVertexInfoReader padReader=getPaddingReader(vertexInfo.alignmentSize);\n  for (int i=0; i < numberOfVertex; i++) {\n    weightReader.read();\n    textureReader.read();\n    colorReader.read();\n    normalReader.read();\n    positionReader.read();\n    padReader.read();\n  }\n  return vertexDataBuffer.getBuffer();\n}\n", "public static void addImageFileToTheMapOfCatalogImages(String key,CachedFile file){\n  assert file != null : \"Program Error: attempt to add 'null' file to image map\";\n  assert (file.getName().equals(\"c2o_thumbnail.jpg\") || file.getName().equals(\"c2o_resizedcover.jpg\") || file.getName().equals(Constants.CALIBRE_COVER_FILENAME)) : \"Program Error: Unexpected name '\" + file.getName() + \"' when trying to add image to map\";\n  if (!mapOfImagesToCopy.containsKey(key)) {\n    mapOfImagesToCopy.put(key,file);\n  }\n}\n", "public void addObligation ( final Obligation obligation , int basicBlockId ) throws ObligationAcquiredOrReleasedInLoopException { Map < ObligationSet , State > updatedStateMap = new HashMap < ObligationSet , State > ( ) ; if ( stateMap . isEmpty ( ) ) { S", "public boolean hasChanged ( ) { return m_changed ; }", "public void marshall(USD uSD, ProtocolMarshaller protocolMarshaller) {\n\n        if (uSD == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(uSD.getDollars(), DOLLARS_BINDING);\n            protocolMarshaller.marshall(uSD.getCents(), CENTS_BINDING);\n            protocolMarshaller.marshall(uSD.getTenthFractionsOfACent(), TENTHFRACTIONSOFACENT_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public boolean offer(T t) {\n\t\t// the current position will be just past the length bytes for this\n\t\t// item (length bytes will be 0 at the moment)\n\t\tint serializedLength = serializer.size();\n\t\tif (serializedLength == UNKNOWN_LENGTH) {\n\t\t\treturn offerUnknownLength(t);\n\t\t} else {\n\t\t\treturn offerKnownLength(t, serializedLength);\n\t\t}\n\t}", "    public boolean isShowAllDefaults() {\n        return showAllDefaults;\n    }\n", "\tpublic PercentageColumnBuilder percentageColumn(String title, String fieldName, Class<? extends Number> valueClass) {\n\t\treturn Columns.percentageColumn(title, fieldName, valueClass);\n\t}\n", "  static public String removeFile(String filePath) {\n    int p = filePath.lastIndexOf(\"\\\\\");\n    if(p == -1) p = filePath.lastIndexOf(\"/\");\n    if(p > -1) filePath = filePath.substring(0, p);\n    return filePath;\n  }\n", "private static String unqualify(String path){\n  path=path.replace('\\\\','/');\n  return path.substring(path.lastIndexOf('/') + 1);\n}\n", "    private String escapeText(final String text) {\n        if (text == null) {\n            // return empty string\n            return \"\"; //$NON-NLS-1$\n        }\n\n        final StringBuilder builder = new StringBuilder(text);\n        for (int i = builder.length() - 1; i >= 0; --i) {\n            final char singleChar = builder.charAt(i);\n            if (!Character.isLetterOrDigit(singleChar) &&\n                !Character.isWhitespace(singleChar) &&\n                (singleChar != '\\'') &&\n                (singleChar != ',')) {\n                builder.deleteCharAt(i);\n            }\n        }\n\n        return builder.toString();\n    }\n", "public static boolean isMyAddress ( InetAddress address ) { if ( address . isAnyLocalAddress ( ) || address . isLoopbackAddress ( ) ) { return BOOL_ ; } try { return NetworkInterface . getByInetAddress ( address ) != null ; } catch ( SocketException e ) {", "public void testDefinitionsParsing ( ) throws Exception { DropOnValueFilter dovf = new DropOnValueFilter ( ) ; dovf . setTungstenSchema ( STR_ ) ; dovf . setDefinitionsFile ( definitionsFile ) ; createDefinitionsFile ( ) ; filterHelper . setContext ( replicatorContext ) ; filterHelper . setFilter ( dovf ) ; assertEquals ( STR_ , NUM_ , dovf . getDefinedValueEntries ( ) ) ; filterHelper . done ( ) ; assertEquals ( STR_ , NUM_ , dovf . getDefinedValueEntries ( ) ) ; filterHelper . setContext ( replicatorContext ) ; filterHelper . setFilter ( dovf ) ; assertEquals ( STR_ , NUM_ , dovf . getDefinedValueEntries ( ) ) ; filterHelper . done ( ) ; }", "    public String encloses(double number) {\n        boolean leftCheck = lowerBound < number;\n        if (!rangeType.leftOpen && !leftCheck)\n            leftCheck = lowerBound == number;\n\n        boolean rightCheck = upperBound > number;\n        if (!rangeType.rightOpen && !rightCheck)\n            rightCheck = upperBound == number;\n\n        if (leftCheck && rightCheck)\n            return null;\n        String msg = number + \" is not contained in \" + toString() + \".\";\n        return msg;\n    }\n", "public Object [ ] keys ( ) { Object [ ] keys = new Object [ size ( ) ] ; K [ ] k = ( K [ ] ) _set ; for ( int i = k . length , j = NUM_ ; i -- > NUM_ ; ) { if ( k [ i ] != FREE && k [ i ] != REMOVED ) { keys [ j ++ ] = k [ i ] ; } } return keys ; }", "@Override public void streamsMenuItemClicked(ActionEvent e,Collection<String> streams){\n  String cmd=e.getActionCommand();\n  streamStuff(cmd,streams);\n}\n", "public static HappyURL URL ( String url ) throws IOException { return new HappyURL ( url ) ; }", "public CInstructionUpdater ( final ZyGraph graph ) { m_graph = graph ; }", "    public String substring(String input, int beginIndex, int endIndex) {\n        if (input == null) input = \"\";\n        if (beginIndex >= input.length()) return \"\";\n        if (beginIndex < 0) beginIndex = 0;\n        if (endIndex < 0 || endIndex > input.length()) endIndex = input.length();\n        if (endIndex < beginIndex) return \"\";\n        return input.substring(beginIndex, endIndex);\n    }    \n", "public Trace ( final com . google . security . zynamics . binnavi . debug . models . trace . TraceList trace ) { this . trace = trace ; for ( final ITraceEvent event : this . trace ) { events . add ( new TraceEvent ( event ) ) ; } this . trace . addListener ( listener ) ; }", "public static String toHexString(byte[] bytes, int start, int len) {\n        StringBuilder buf = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            int b = bytes[start + i] & 0xFF;\n            if (b < 16) buf.append('0');\n            buf.append(Integer.toHexString(b));\n        }\n        return buf.toString();\n    }", "private long memAllocationUnit2Multiplier(String unit){\n  Long res=multipliersByMemoryAllocationUnit.get(unit.replace(\" \",\"\"));\n  if (res == null) {\n    throw new IllegalArgumentException(\"Cannot map \" + unit + \" to a known unit\");\n  }\n else {\n    return res;\n  }\n}\n", "@Override public Object clone(){\n  try {\n    IdentityHashMap<K,V> cloneHashMap=(IdentityHashMap<K,V>)super.clone();\n    cloneHashMap.elementData=newElementArray(elementData.length);\n    System.arraycopy(elementData,0,cloneHashMap.elementData,0,elementData.length);\n    return cloneHashMap;\n  }\n catch (  CloneNotSupportedException e) {\n    throw new AssertionError(e);\n  }\n}\n", "  public void addEncryptionPane() {\n    cryptoPanel = new JPanel();\n//    NewMessageCryptoDisplay nmcd = new NewMessageCryptoDisplay(getNewMessageProxy());\n//    cryptoDisplay = nmcd;\n\n    cryptoPanel.setLayout(new FlowLayout(FlowLayout.LEFT));\n    cryptoPanel.setSize(headerPanel.getSize());\n\n    ((JPanel)cryptoPanel).setBorder(BorderFactory.createEtchedBorder());\n\n//    cryptoPanel.add(nmcd);\n\n    tabbedPane.add(Pooka.getProperty(\"MessageWindow.EncryptionTab\", \"Encryption\"), cryptoPanel);\n  }\n", "public double pdf(double x){\n  return this.TERM * Math.pow((1 + x * x / freedom),-(freedom + 1) * 0.5);\n}\n", "private static void checkArguments ( final AbstractSQLProvider provider , final CTag tag , final TagType type ) { checkArguments ( provider , tag ) ; Preconditions . checkNotNull ( type , STR_ ) ; Preconditions . checkArgument ( tag . getType ( ) == type , STR_ ) ; }", "    public FriendsResult getFriendsInfo() {\n        GetFriendsArgument argument = new GetFriendsArgument();\n        argument.setUsername(login);\n        argument.setHpassword(password);\n        argument.setIncludeFriendOf(true);\n        argument.setIncludeFriendOf(true);\n        return client.getfriends(argument);\n    }\n", "void addDevice ( IEspDevice device ) ;", "public void removeVisually() {\n\ttry {\n\t\tremoveVisually((ch.ehi.uml1_4.foundation.core.Association)getStartElement());\n\t} catch(Throwable e) {\n\t\tNodeFigure.handleException(e, CommonUserAccess.getMniEditRemoveText(), null, this);\n\t}\n}\n", "private void blackmanHarris4s(int size){\n  int start=(windowFunction.length - size) / 2;\n  int stop=(windowFunction.length + size) / 2;\n  double scale=1.0 / (double)size / 0.4;\n  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.40217 - 0.49703 * Math.cos(twoPI * i / size) + 0.09392 * Math.cos(2 * twoPI * i / size) - 0.00183 * Math.cos(3 * twoPI * i / size));\n}\n", "private void defineScrollPane ( UIDefaults d ) { String c = PAINTER_PREFIX + STR_ ; String p = STR_ ; d . put ( p + STR_ , Boolean . FALSE ) ; d . put ( p + STR_ , new InsetsUIResource ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ; d . put ( p + STR_ , new LazyPainter", "private static int addToBuffer ( Writer out , char [ ] buffer , int bufferIndex , int bufferLength , char ch ) throws IOException { if ( bufferIndex >= bufferLength ) { out . write ( buffer , NUM_ , bufferIndex ) ; bufferIndex = NUM_ ; } buffer [ bufferIn", "public void checkpoint(ObjectEnvelope mod) throws PersistenceBrokerException\r\n    {\r\n        mod.doInsert();\r\n        mod.setModificationState(StateOldClean.getInstance());\r\n    }", "\tpublic void removeSelected() {\n\t\tremove(getSelectedComponent());\n\t}\n", "void onNodeClosing ( View view , Node < ? > node ) ;", "public int indexType ( ) { return idxType ; }", "\tpublic void removeall ()\n\t{\tinit(new Line(this));\n\t\tlinesChanged();\n\t}\n", "public void addPieSegment(int dataIndex,float value,float startAngle,float angle){\n  mPieSegmentList.add(new PieSegment(dataIndex,value,startAngle,angle));\n}\n", "public Instance withSecurityGroups(GroupIdentifier... securityGroups) {\n        if (this.securityGroups == null) {\n            setSecurityGroups(new com.amazonaws.internal.SdkInternalList<GroupIdentifier>(securityGroups.length));\n        }\n        for (GroupIdentifier ele : securityGroups) {\n            this.securityGroups.add(ele);\n        }\n        return this;\n    }", "public int hashCode(){\n  return 1;\n}\n", "    protected void processMouseMotionEvent(MouseEvent e) {\n        processMouseEvent(e);\n    }\n", "private Object readNewArray(boolean unshared) throws OptionalDataException, ClassNotFoundException, IOException {\n  ObjectStreamClass classDesc=readClassDesc();\n  if (classDesc == null) {\n    throw missingClassDescriptor();\n  }\n  int newHandle=nextHandle();\n  int size=input.readInt();\n  Class<?> arrayClass=classDesc.forClass();\n  Class<?> componentType=arrayClass.getComponentType();\n  Object result=Array.newInstance(componentType,size);\n  registerObjectRead(result,newHandle,unshared);\n  if (componentType.isPrimitive()) {\n    if (componentType == int.class) {\n      int[] intArray=(int[])result;\n      for (int i=0; i < size; i++) {\n        intArray[i]=input.readInt();\n      }\n    }\n else     if (componentType == byte.class) {\n      byte[] byteArray=(byte[])result;\n      input.readFully(byteArray,0,size);\n    }\n else     if (componentType == char.class) {\n      char[] charArray=(char[])result;\n      for (int i=0; i < size; i++) {\n        charArray[i]=input.readChar();\n      }\n    }\n else     if (componentType == short.class) {\n      short[] shortArray=(short[])result;\n      for (int i=0; i < size; i++) {\n        shortArray[i]=input.readShort();\n      }\n    }\n else     if (componentType == boolean.class) {\n      boolean[] booleanArray=(boolean[])result;\n      for (int i=0; i < size; i++) {\n        booleanArray[i]=input.readBoolean();\n      }\n    }\n else     if (componentType == long.class) {\n      long[] longArray=(long[])result;\n      for (int i=0; i < size; i++) {\n        longArray[i]=input.readLong();\n      }\n    }\n else     if (componentType == float.class) {\n      float[] floatArray=(float[])result;\n      for (int i=0; i < size; i++) {\n        floatArray[i]=input.readFloat();\n      }\n    }\n else     if (componentType == double.class) {\n      double[] doubleArray=(double[])result;\n      for (int i=0; i < size; i++) {\n        doubleArray[i]=input.readDouble();\n      }\n    }\n else {\n      throw new ClassNotFoundException(\"Wrong base type in \" + classDesc.getName());\n    }\n  }\n else {\n    Object[] objectArray=(Object[])result;\n    for (int i=0; i < size; i++) {\n      objectArray[i]=readObject();\n    }\n  }\n  if (enableResolve) {\n    result=resolveObject(result);\n    registerObjectRead(result,newHandle,false);\n  }\n  return result;\n}\n", "public float getTextRise() {\n    \tFloat f = (Float) getAttribute(Chunk.SUBSUPSCRIPT);\n    \tif (f != null) {\n    \t\treturn f.floatValue();\n    \t}\n    \treturn 0.0f;\n    }", "public static List<SelectArg> makeSelectArgsFromList(Collection<? extends Object> items){\n  List<SelectArg> args=new ArrayList<SelectArg>(items.size());\n  for (  Object item : items) {\n    args.add(new SelectArg(item));\n  }\n  return args;\n}\n", "@Override\n    public IEntityLock[] findUnexpired(\n            java.util.Date expiration,\n            Class entityType,\n            String entityKey,\n            Integer lockType,\n            String lockOwner)\n            throws LockingException {\n        IEntityLock[] locks = find(entityType, entityKey, lockType, null, lockOwner);\n        List lockAL = new ArrayList(locks.length);\n        for (int i = 0; i < locks.length; i++) {\n            if (locks[i].getExpirationTime().after(expiration)) {\n                lockAL.add(locks[i]);\n            }\n        }\n        return ((IEntityLock[]) lockAL.toArray(new IEntityLock[lockAL.size()]));\n    }", "@NullSafe\n  public static Calendar truncate(Calendar dateTime) {\n    Optional.ofNullable(dateTime).ifPresent(localDateTime -> {\n      localDateTime.clear(Calendar.HOUR_OF_DAY);\n      localDateTime.clear(Calendar.MINUTE);\n      localDateTime.clear(Calendar.SECOND);\n      localDateTime.clear(Calendar.MILLISECOND);\n    });\n\n    return dateTime;\n  }", "public Group<E> group(String name) {\n        for (Group<E> group : this.groups()) {\n            if (group.expr instanceof Expression.NamedGroup<?>) {\n                Expression.NamedGroup<E> namedGroup = (Expression.NamedGroup<E>) group.expr;\n                if (namedGroup.name.equals(name)) {\n                    return group;\n                }\n            }\n        }\n\n        return null;\n    }", "static protected String[] splitLineCSV(String line){\n  char[] c=line.toCharArray();\n  int rough=1;\n  boolean quote=false;\n  for (int i=0; i < c.length; i++) {\n    if (!quote && (c[i] == ',')) {\n      rough++;\n    }\n else     if (c[i] == '\\\"') {\n      quote=!quote;\n    }\n  }\n  String[] pieces=new String[rough];\n  int pieceCount=0;\n  int offset=0;\n  while (offset < c.length) {\n    int start=offset;\n    int stop=nextComma(c,offset);\n    offset=stop + 1;\n    if (c[start] == '\\\"' && c[stop - 1] == '\\\"') {\n      start++;\n      stop--;\n    }\n    int i=start;\n    int ii=start;\n    while (i < stop) {\n      if (c[i] == '\\\"') {\n        i++;\n      }\n      if (i != ii) {\n        c[ii]=c[i];\n      }\n      i++;\n      ii++;\n    }\n    String s=new String(c,start,ii - start);\n    pieces[pieceCount++]=s;\n  }\n  for (int i=pieceCount; i < pieces.length; i++) {\n    pieces[i]=\"\";\n  }\n  return pieces;\n}\n", "public void close() throws IOException {\n  if (inputStream != null) {\n    try {\n      inputStream.close();\n    }\n  finally {\n      inputStream=null;\n    }\n  }\n}\n", "public DemoService(Gondola gondola,String shardId){\n  super(gondola,shardId);\n  registerEventHandler(listener);\n}\n", "    public int getStreamVolume(int streamType) {\n        IAudioService service = getService();\n        try {\n            return service.getStreamVolume(streamType);\n        } catch (RemoteException e) {\n            Log.e(TAG, \"Dead object in getStreamVolume\", e);\n            return 0;\n        }\n    }\n", "public static void write(Id parcelID,Map<Modes4Accessibility,Double> accessibilities){\n  try {\n    assert (UrbanSimParcelCSVWriter.parcelWriter != null);\n    parcelWriter.write(parcelID.toString());\n    for (    Modes4Accessibility mode : Modes4Accessibility.values()) {\n      parcelWriter.write(\",\" + accessibilities.get(mode));\n    }\n    parcelWriter.newLine();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    throw new RuntimeException(\"could not write\");\n  }\n}\n", "private void validateDuration ( long renewDuration , boolean isForever , String name ) { if ( renewDuration <= NUM_ && ! ( renewDuration == Lease . ANY && isForever ) ) { if ( renewDuration == Lease . ANY ) { throw new IllegalArgumentException ( STR_ + ST", "public void marshall(CreateConfigurationRequest createConfigurationRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (createConfigurationRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(createConfigurationRequest.getEngineType(), ENGINETYPE_BINDING);\n            protocolMarshaller.marshall(createConfigurationRequest.getEngineVersion(), ENGINEVERSION_BINDING);\n            protocolMarshaller.marshall(createConfigurationRequest.getName(), NAME_BINDING);\n            protocolMarshaller.marshall(createConfigurationRequest.getTags(), TAGS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "\tprotected void reopen() {\n\t\ttry {\n\t\t\tlog.warn(\"Request to reopen store after interrupt\");\n\n\t\t\tm_store.close();\n\t\t\tm_fileMetadata.raf = new RandomAccessFile(m_fileMetadata.file, m_fileMetadata.fileMode);\n\t\t\tm_store = new RWStore(m_fmv, false); // never read-only for now\n\t\t\tm_needsReopen = false;\n\t\t} catch (Throwable t) {\n\t\t\tt.printStackTrace();\n\t\t\t\n\t\t\tthrow new RuntimeException(t);\n\t\t}\t\t\n\t}\n", "ResultIterable queryTarget ( ) throws SynchronizationException { ResultIterable result = getReconHandler ( ) . queryTarget ( ) ; setTargets ( result ) ; return result ; }", "private int parseStatusLine(InputStream is){\n  int index;\n  int nread=0;\n  log(\"Parse status line\");\n  nread=readOneLine(is);\n  if (nread == -1) {\n    requestMethod=UNKNOWN_METHOD;\n    return -1;\n  }\n  if (buf[0] == (byte)'G' && buf[1] == (byte)'E' && buf[2] == (byte)'T' && buf[3] == (byte)' ') {\n    requestMethod=GET_METHOD;\n    log(\"GET request\");\n    index=4;\n  }\n else   if (buf[0] == (byte)'H' && buf[1] == (byte)'E' && buf[2] == (byte)'A' && buf[3] == (byte)'D' && buf[4] == (byte)' ') {\n    requestMethod=HEAD_METHOD;\n    log(\"HEAD request\");\n    index=5;\n  }\n else   if (buf[0] == (byte)'P' && buf[1] == (byte)'O' && buf[2] == (byte)'S' && buf[3] == (byte)'T' && buf[4] == (byte)' ') {\n    requestMethod=POST_METHOD;\n    log(\"POST request\");\n    index=5;\n  }\n else {\n    requestMethod=UNKNOWN_METHOD;\n    return -1;\n  }\n  if (requestMethod > UNKNOWN_METHOD) {\n    int i=index;\n    while (buf[i] != (byte)' ') {\n      if ((buf[i] == (byte)'\\n') || (buf[i] == (byte)'\\r')) {\n        requestMethod=UNKNOWN_METHOD;\n        return -1;\n      }\n      i++;\n    }\n    path=new String(buf,0,index,i - index);\n    testID=path.substring(1);\n    return nread;\n  }\n  return -1;\n}\n", "\tstatic public boolean parseBoolean(String s, boolean defaultValue) {\n\t\tif (s != null) {\n\t\t\tString s2 = s.trim();\n\t\t\tif (s2.equalsIgnoreCase(\"true\") || s2.equalsIgnoreCase(\"yes\"))\n\t\t\t\treturn true;\n\n\t\t\tif (s2.equalsIgnoreCase(\"false\") || s2.equalsIgnoreCase(\"no\"))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn defaultValue;\n\t}\n", "public void writeBatch() throws IOException {\n  if (getRetrieval() == INCREMENTAL)   throw new IOException(\"Batch and incremental saving cannot be mixed.\");\n  if (getInstances() == null)   throw new IOException(\"No instances to save\");\n  setRetrieval(BATCH);\n  if (m_objectstream == null)   throw new IOException(\"No output for serialization.\");\n  setWriteMode(WRITE);\n  m_objectstream.writeObject(getInstances());\n  m_objectstream.flush();\n  m_objectstream.close();\n  setWriteMode(WAIT);\n  resetWriter();\n  setWriteMode(CANCEL);\n}\n", "public RecoveryMgr ( long txNum , boolean isReadOnly ) { this . txNum = txNum ; if ( ! isReadOnly && enableLogging ) new StartRecord ( txNum ) . writeToLog ( ) ; }", "public static void main(String args[]) {\n        Statement stmts[] = null;\n        try {\n            stmts = getStatements(args[0]);\n        } catch (Throwable e) {\n            System.out.println(e.getMessage());\n            return;\n        }\n        for (Statement s : stmts) {\n            System.out.print(s.statement);\n        }\n    }", "public ContainerGroupInner createOrUpdate(String resourceGroupName, String containerGroupName, ContainerGroupInner containerGroup) {\n        return createOrUpdateWithServiceResponseAsync(resourceGroupName, containerGroupName, containerGroup).toBlocking().last().body();\n    }", "public short [ ] encodePOV ( ) { short [ ] vals = new short [ povs . length ] ; for ( int i = NUM_ ; i < vals . length ; i ++ ) vals [ i ] = ( short ) povs [ i ] ; return vals ; }", "public static ArrayList<Integer> findCorners(java.util.List<Point2D.Double> digitizedPoints,double minAngle,double minDistance){\n  ArrayList<Integer> cornerIndices=new ArrayList<Integer>();\n  double squaredDistance=minDistance * minDistance;\n  int previousCorner=-1;\n  double previousCornerAngle=0;\n  for (int i=1, n=digitizedPoints.size(); i < n - 1; i++) {\n    Point2D.Double p=digitizedPoints.get(i);\n    Point2D.Double prev=null;\n    boolean intersectsPreviousCorner=false;\n    for (int j=i - 1; j >= 0; j--) {\n      if (j == previousCorner || v2SquaredDistanceBetween2Points(digitizedPoints.get(j),p) >= squaredDistance) {\n        prev=digitizedPoints.get(j);\n        intersectsPreviousCorner=j < previousCorner;\n        break;\n      }\n    }\n    if (prev == null) {\n      continue;\n    }\n    Point2D.Double next=null;\n    for (int j=i + 1; j < n; j++) {\n      if (v2SquaredDistanceBetween2Points(digitizedPoints.get(j),p) >= squaredDistance) {\n        next=digitizedPoints.get(j);\n        break;\n      }\n    }\n    if (next == null) {\n      continue;\n    }\n    double aPrev=Math.atan2(prev.y - p.y,prev.x - p.x);\n    double aNext=Math.atan2(next.y - p.y,next.x - p.x);\n    double angle=Math.abs(aPrev - aNext);\n    if (angle < Math.PI - minAngle || angle > Math.PI + minAngle) {\n      if (intersectsPreviousCorner) {\n        cornerIndices.set(cornerIndices.size() - 1,i);\n      }\n else {\n        cornerIndices.add(i);\n      }\n      previousCorner=i;\n      previousCornerAngle=angle;\n    }\n  }\n  return cornerIndices;\n}\n", "  public void startTask(String taskName, double taskWeight) {\n    startTask(taskName, TASK_NONE, taskWeight);\n  }\n", "    public Project getTargetProject() {\n        for (int tIt = 0 ; tIt < allTemplates.size() ; tIt++) {\n            FileObject fo = getTargetFileObject(tIt);\n            if (fo != null) {\n                return FileOwnerQuery.getOwner(fo);\n            }\n        }\n        return null;\n    }\n", "@Nonnull\n  @Nonempty\n  public static String getObjectAddress (@Nullable final Object aObject)\n  {\n    if (aObject == null)\n      return \"0x00000000\";\n    return \"0x\" + StringHelper.getHexStringLeadingZero (System.identityHashCode (aObject), 8);\n  }", "static boolean containsIn(CloneGroup first, CloneGroup second) {\n    if (first.getCloneUnitLength() > second.getCloneUnitLength()) {\n      return false;\n    }\n    List<ClonePart> firstParts = first.getCloneParts();\n    List<ClonePart> secondParts = second.getCloneParts();\n    return SortedListsUtils.contains(secondParts, firstParts, new ContainsInComparator(second.getCloneUnitLength(), first.getCloneUnitLength()))\n      && SortedListsUtils.contains(firstParts, secondParts, ContainsInComparator.RESOURCE_ID_COMPARATOR);\n  }", "private static String buildMessage ( String format , Object ... args ) { String msg = ( args == null ) ? format : String . format ( Locale . US , format , args ) ; StackTraceElement [ ] trace = new Throwable ( ) . fillInStackTrace ( ) . getStackTrace ( ) ; String caller = STR_ ; for ( int i = NUM_ ; i < trace . length ; i ++ ) { Class < ? > clazz = trace [ i ] . getClass ( ) ; if ( ! clazz . equals ( VolleyLog . class ) ) { String callingClass = trace [ i ] . getClassName ( ) ; callingClass = callingClass . substring ( callingClass . lastIndexOf ( STR_ ) + NUM_ ) ; callingClass = callingClass . substring ( callingClass . lastIndexOf ( STR_ ) + NUM_ ) ; caller = callingClass + STR_ + trace [ i ] . getMethodName ( ) ; break ; } } return String . format ( Locale . US , STR_ , Thread . currentThread ( ) . getId ( ) , caller , msg ) ; }", "public CheckerMain(final File checkerJar,final List<String> args){\n  this.checkerJar=checkerJar;\n  final File searchPath=checkerJar.getParentFile();\n  this.checkerQualJar=new File(searchPath,\"checker-qual.jar\");\n  replaceShorthandProcessor(args);\n  argListFiles=collectArgFiles(args);\n  this.javacJar=extractFileArg(PluginUtil.JAVAC_PATH_OPT,new File(searchPath,\"javac.jar\"),args);\n  final String jdkJarName=PluginUtil.getJdkJarName();\n  this.jdkJar=extractFileArg(PluginUtil.JDK_PATH_OPT,new File(searchPath,jdkJarName),args);\n  this.compilationBootclasspath=createCompilationBootclasspath(args);\n  this.runtimeBootClasspath=createRuntimeBootclasspath(args);\n  this.jvmOpts=extractJvmOpts(args);\n  this.cpOpts=createCpOpts(args);\n  this.ppOpts=createPpOpts(args);\n  this.toolOpts=args;\n  assertValidState();\n}\n", "    public void addObjectMenuPressed() {\n\n        final Object node = find(projectTree, \"frameworknode\");\n        final DepotObject frameworknode = (DepotObject) getProperty(node, \"object\");\n        if (null == frameworknode) {\n            return;\n        }\n\n        try {\n            final AddObjectDialog d = AddObjectDialog.newAddObjectDialog(this, frameworknode);\n            d.prompt();\n\n        } catch (Exception e) {\n            ErrorDialog.newDialog(this, \"Object add error\", e);\n        }\n    }\n", "    public void setFont(final Font font) {\n        if (font == null) {\n            this.font = FontManager.getSharedInstance().getFont(\"Dialog-PLAIN-12\");\n        }\n        else {\n            this.font = font;\n        }\n\n        if (text != null) {\n            glyphVector = this.font.createGlyphVector(context, text);\n            super.setShape(glyphVector.getOutline());\n        }\n    }\n", "public static Request newPostRequest(Session session, String graphPath, GraphObject graphObject, Callback callback) {\n        Request request = new Request(session, graphPath, null, HttpMethod.POST , callback);\n        request.setGraphObject(graphObject);", "public boolean addHangupListener(CallHangupListener listener)\r\n    {\r\n        boolean callStillUp = true;\r\n\r\n        if ((this._originatingParty != null && this._originatingParty.isLive())\r\n                || (this._acceptingParty != null && this._acceptingParty.isLive())\r\n                || (this._transferTargetParty != null && this._transferTargetParty.isLive()))\r\n            this._hangupListeners.add(listener);\r\n        else\r\n            callStillUp = false;\r\n        return callStillUp;\r\n\r\n    }", "public int size ( ) { return size ; }", "public void addAll(JsonArray array){\n  elements.addAll(array.elements);\n}\n", "@ReadOperation\n    public Set<? extends MultifactorAuthenticationTrustRecord> devicesForUser(@Selector final String username) {\n        val onOrAfter = expireRecordsByDate();\n        return this.mfaTrustEngine.get(username, onOrAfter);\n    }", "private String normalizeText ( String text ) { String firstPassNormalising = text . toLowerCase ( ) . replace ( STR_ , STR_ ) ; StringBuilder sb = new StringBuilder ( ) ; Matcher matcher = allowedCharacters . matcher ( firstPassNormalising ) ; while ( mat", "    protected void loadScrollBarImages(final CoronaImageBundle images) {\n        ScrollBarLoader.loadImages(images, getScrollBarImagesPackage());\n    }\n", "public void addDeleted(boolean deleted){\n  query.append(\" +deleted:\" + deleted);\n}\n", "private <T>void assertContains(final T[] expectedEntries,final Collection<T> collection){\n  assertEquals(expectedEntries.length,collection.size());\n  for (  T t : expectedEntries) {\n    assertTrue(collection.contains(t));\n  }\n}\n", "public void initLongPressAction ( ) { mLongPressAction = new Action ( ) ; }", "Iterable < IReplicationFilterEntry > toFilterEntries ( T data ) ;", "static Type getRequiredOutputStreamType(Class<?> clazz,\n                                            int rmicCompatible) // PM46698\n    {\n        // NOTE: This logic must be kept in sync with write_value\n\n        if (clazz == Void.TYPE || // nothing to write\n            clazz == Object.class || // writeAny\n            clazz.isPrimitive() || // write_<primitive>\n            (clazz.isInterface() &&\n            (clazz == Serializable.class || // writeAny\n             clazz == Externalizable.class || // writeAny\n             isCORBAObject(clazz, rmicCompatible) || // write_Object\n             (Remote.class).isAssignableFrom(clazz) || // writeRemoteObject\n            isAbstractInterface(clazz, rmicCompatible)))) // writeAbstractObject\n        {\n            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n                Tr.debug(tc, \"getRequiredOutputStreamType: \" + clazz.getName() +\n                             \" => org.omg.CORBA.portable.OutputStream\");\n            return TYPE_CORBA_OutputStream;\n        }\n\n        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n            Tr.debug(tc, \"getRequiredOutputStreamType: \" + clazz.getName() +\n                         \" => org.omg.CORBA_2_3.portable.OutputStream\");\n\n        // requires 'write_value'\n        return TYPE_CORBA_2_3_OutputStream;\n    }", "public static boolean copyStream ( InputStream is , OutputStream os , CopyListener listener , int bufferSize ) throws IOException { int current = NUM_ ; int total = is . available ( ) ; if ( total <= NUM_ ) { total = DEFAULT_IMAGE_TOTAL_SIZE ; } final byt", "public JVMMetrics showJVMMetrics(String member) throws Exception {\n  MemberMXBean bean=validateMember(member);\n  return bean.showJVMMetrics();\n}\n", "protected <V> CompletableFuture<V> callAsyncWithoutFencing(Callable<V> callable, Time timeout) {\n\t\tif (rpcServer instanceof FencedMainThreadExecutable) {\n\t\t\treturn ((FencedMainThreadExecutable) rpcServer).callAsyncWithoutFencing(callable, timeout);\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"FencedRpcEndpoint has not been started with a FencedMainThreadExecutable RpcServer.\");\n\t\t}\n\t}", "public Matrix4d m11(double m11) {\n        this.m11 = m11;\n        properties &= ~PROPERTY_ORTHONORMAL;\n        if (m11 != 1.0)\n            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);\n        return this;\n    }", "    public double evaluate(double x) throws NumericException {\n\n        int n = getFirstIndex();\n        double z = Math.pow(x, n);\n        double t = getTerm(n) * z;\n        double s = t;\n        double sn = s;\n        double error = Double.MAX_VALUE;\n\n ", "  public void setSdpFileLength(int l) throws Exception {\n    if(l <= 1) {\n      throw new Exception();\n    } else {\n      this.sdp_length = l;\n    }\n  }\n", "@Override\n    public Shape modelToView(int pos, Shape a, Position.Bias b)\n            throws BadLocationException\n    {\n        if (view != null) { return view.modelToView(pos, a, b); }\n        return null;\n    }", "public void testGetInt24 ( ) { byte [ ] bytes = { NUM_ , NUM_ , NUM_ , NUM_ , - NUM_ , - NUM_ , - NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , - NUM_ , - NUM_ , - NUM_ , NUM_ } ; MySQLPacket array = new MySQLPacket ( bytes . length - MySQLPacket . HEADER_LEN", "private void moveCaretRight(){\n  int len=buffer.length();\n  if (++insertionPoint > len) {\n    insertionPoint=len;\n    beep();\n  }\n  context.dispatchInputMethodEvent(InputMethodEvent.CARET_POSITION_CHANGED,null,0,TextHitInfo.leading(insertionPoint),null);\n}\n", "public static Map createSessionScopeMap(PageContext pContext)\n    {\n        final PageContext context = pContext;\n\n        return new EnumeratedMap()\n        {\n            public Enumeration enumerateKeys()\n            {\n                return context.get", "public void error(SourceLocator srcLctr,String msg,Object args[],Exception e) throws TransformerException {\n  String formattedMsg=XSLMessages.createMessage(msg,args);\n  ErrorListener errHandler=m_transformer.getErrorListener();\n  if (null != errHandler)   errHandler.fatalError(new TransformerException(formattedMsg,srcLctr));\n else   throw new TransformerException(formattedMsg,srcLctr);\n}\n", "public List<HttpCookie> parse(byte[] headerValue, HeaderKeys cookieHeader) throws IllegalArgumentException {\n        if (null == headerValue) {\n            throw new IllegalArgumentException(\"Null input\");\n        }\n\n        // initialize the member varia", "    public void replaceAll(Vector<String> v){\n        v.clear();\n        v.ensureCapacity(sourceVector.capacity());\n        sourceVector.addAll(v);\n    }\n", "public static Resource copyInstance ( ResourceNode source , String destinationKey , ResourceNode destination , Directory directory ) throws ResourceException { Resource copy = ( Resource ) ReflectUtils . clone ( source . getResource ( ) ) ; if ( copy . getType ( ) != destination . getResource ( ) . getChildType ( ) ) { throw new ResourceException ( String . format ( STR_ , copy . getType ( ) , destination . getResource ( ) . getChildType ( ) ) ) ; } copy . setName ( destinationKey ) ; return copy ; }", "public void destroy ( ) { super . destroy ( ) ; }", "public CDebuggerComboBox(final ComboBoxModel<CDebuggerTemplateWrapper> model){\n  super(model);\n  if (model != null && model.getSize() != 0) {\n    setSelectedIndex(0);\n  }\n}\n", "public static Long nextLogSegmentSequenceNumber(List<LogSegmentMetadata> segmentListDesc){\n  int lastAssignedLogSegmentIdx=-1;\n  Long lastAssignedLogSegmentSeqNo=null;\n  Long nextLogSegmentSeqNo=null;\n  for (int i=0; i < segmentListDesc.size(); i++) {\n    LogSegmentMetadata metadata=segmentListDesc.get(i);\n    if (LogSegmentMetadata.supportsLogSegmentSequenceNo(metadata.getVersion())) {\n      lastAssignedLogSegmentSeqNo=metadata.getLogSegmentSequenceNumber();\n      lastAssignedLogSegmentIdx=i;\n      break;\n    }\n  }\n  if (null != lastAssignedLogSegmentSeqNo) {\n    nextLogSegmentSeqNo=lastAssignedLogSegmentSeqNo + lastAssignedLogSegmentIdx + 1;\n  }\n  return nextLogSegmentSeqNo;\n}\n", "public int read(){\n  if (position >= document.getLength()) {\n    return -1;\n  }\n  try {\n    document.getText((int)position,1,segment);\n    position++;\n    return segment.array[segment.offset];\n  }\n catch (  BadLocationException ble) {\n    ble.printStackTrace();\n    return -1;\n  }\n}\n", "    public void run() {\n        bindToPort();\n        while (true) {\n            listen();\n        }\n    }\n", "void onRevealAnimationStart ( ) ;", "public static <E extends Enum<E> & ByteEnum> int setToInt (Set<E> set)\n    {\n        int flags = 0;\n        for (E value : set) {\n            flags |= toIntFlag(value);\n        }\n        return flags;\n    }", "public boolean matches(Integer i){\n  if (m_Integer == null)   return false;\n else   if (i == null)   return false;\n else   return (m_Integer.intValue() == i.intValue());\n}", "public void add ( Iterator < IEntryPacket > iterator ) { if ( iterator == null ) return ; if ( _iterator == null ) _iterator = iterator ; _listOfIterators . add ( iterator ) ; }", "public void testWriteByte ( ) throws Exception { ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; BitOutputStream bOut = new BitOutputStream ( out ) ; bOut . writeBit ( BOOL_ ) ; byte [ ] bytes = out . toByteArray ( ) ; Assert . assertEquals ( ", "public boolean isUnhandledExceptionBlock ( BasicBlock block ) { return unhandledExceptionBlockSet . get ( block . getLabel ( ) ) ; }", "public synchronized void write(int b){\n  if (buf.length() > 5000)   return;\n  buf.append((char)b);\n  if ((char)b == '\\n') {\n    int maxSize=50000;\n    if (false) {\n      String text=textArea.getText();\n      StringBuilder buf1=new StringBuilder(text.substring(maxSize - 10000));\n      buf1.append(buf);\n      textArea.setText(buf1.toString());\n      lengthWritten=buf1.length();\n      buf.setLength(0);\n      buf=new StringBuilder();\n      moveToEnd();\n      try {\n        Thread.sleep(100);\n      }\n catch (      InterruptedException e) {\n        e.printStackTrace();\n      }\n    }\n else {\n      textArea.append(buf.toString());\n      lengthWritten=lengthWritten + buf.length();\n      buf.setLength(0);\n      moveToEnd();\n    }\n  }\n}\n", "protected CmsFile getScaledImage(CmsObject cms, CmsResource resource, CmsImageScaler scaler)\n    throws IOException, CmsException {\n\n        String cacheParam = scaler.isValid() ? scaler.toString() : null;\n        String cacheName = m_vfsDiskCache.getCacheName(resource, cacheParam);\n        byte[] content = m_vfsDiskCache.getCacheContent(cacheName);\n\n        CmsFile file;\n        if (content != null) {\n            if (resource instanceof CmsFile) {\n                // the original file content must be modified (required e.g. for static export)\n                file = (CmsFile)resource;\n            } else {\n                // this is no file, but we don't want to use \"upgrade\" since we don't need to read the content from the VFS\n                file = new CmsFile(resource);\n            }\n            // save the content in the file\n            file.setContents(content);\n        } else {\n            // we must read the content from the VFS (if this has not been done yet)\n            file = cms.readFile(resource);\n            // upgrade the file (load the content)\n            if (scaler.isValid()) {\n                if (scaler.getType() == 8) {\n                    // only need the focal point for mode 8\n                    scaler.setFocalPoint(CmsPreviewService.readFocalPoint(cms, resource));\n                }\n                // valid scaling parameters found, scale the content\n                content = scaler.scaleImage(file);\n                // exchange the content of the file with the scaled version\n                file.setContents(content);\n            }\n            // save the file content in the cache\n            m_vfsDiskCache.saveCacheFile(cacheName, file.getContents());\n        }\n        return file;\n    }", "public SDVariable eye(String name, int rows, int cols, DataType dataType) {\n        return eye(name, rows, cols, dataType);\n    }", "    public BigDecimal getBigDecimal(String columnLabel, int scale) throws SQLException {\n        try {\n            if (isDebugEnabled()) {\n                debugCode(\"getBigDecimal(\" + StringUtils.quoteJavaString(columnLabel)+\", \"+scale+\");\");\n            }\n            if (scale < 0) {\n                throw DbException.getInvalidValueException(\"scale\", scale);\n            }\n            BigDecimal bd = get(columnLabel).getBigDecimal();\n            return bd == null ? null : MathUtils.setScale(bd, scale);\n        } catch (Exception e) {\n            throw logAndConvert(e);\n        }\n    }\n", "\tpublic void setWidth() {\n\t\tif (textureWidth != 0)\n\t\t\twidthRatio = ((float)width) / textureWidth;\n\t}\n", "boolean rhsEqualToField ( ) { return rhs != null && memberName . equals ( rhs . getQualifiedName ( ) ) ; }", "public static void invertSelection ( final ZyGraph graph ) { Preconditions . checkNotNull ( graph , STR_ ) ; SelectionFunctions . invertSelection ( graph ) ; if ( graph . getSettings ( ) . getProximitySettings ( ) . getProximityBrowsingFrozen ( ) ) { graph . selectNodes ( GraphHelpers . filter ( graph , new CInvisibleNodeFilter ( ) ) , BOOL_ ) ; } }", "@Override public void updateClassifier(Instance instance) throws Exception {\n  updateClassifier(instance,true);\n}\n", "public static XorSpacePredicate xor ( ISpacePredicate leftPredicate , ISpacePredicate rightPredicate ) { return new XorSpacePredicate ( leftPredicate , rightPredicate ) ; }", "        public Row get(Object primaryKey) {\n            return (Row) keyedObjects.get(primaryKey);\n        }\n", "  public void setListValueHolder(ListValueHolder newListValueHolder) {\n    if (listValueHolder != null)\n      listValueHolder.removeListSelectionListener(this);\n    listValueHolder = newListValueHolder;\n    listValueHolder.addListSelectionListener(this);\n  }\n", "public BufferedReader bufferedReader ( final String charset ) throws HttpRequestException { return new BufferedReader ( reader ( charset ) , bufferSize ) ; }", "public void add(int position,T item){\n  mData.add(position,item);\n  notifyItemInserted(position);\n}\n", "private long getFixedDate(BaseCalendar cal, int year, int fieldMask) {\n        int month = JANUARY;\n        if (isFieldSet(fieldMask, MONTH)) {\n            // No need to check if MONTH has been set (no isSet(MONTH)\n            // call) since its unset value happens to be JANUARY (0).\n            month = internalGet(MONTH);\n\n            // If the month is out of range, adjust it into range\n            if (month > DECEMBER) {\n                year += month / 12;\n                month %= 12;\n            } else if (month < JANUARY) {\n                int[] rem = new int[1];\n                year += CalendarUtils.floorDivide(month, 12, rem);\n                month = rem[0];\n            }\n        }\n\n        // Get the fixed date since Jan 1, 1 (Gregorian). We are on\n        // the first day of either `month' or January in 'year'.\n        long fixedDate = cal.getFixedDate(year, month + 1, 1,\n                                          cal == gcal ? gdate : null);\n        if (isFieldSet(fieldMask, MONTH)) {\n            // Month-based calculations\n            if (isFieldSet(fieldMask, DAY_OF_MONTH)) {\n                // We are on the first day of the month. Just add the\n                // offset if DAY_OF_MONTH is set. If the isSet call\n                // returns false, that means DAY_OF_MONTH has been\n                // selected just because of the selected\n                // combination. We don't need to add any since the\n                // default value is the 1st.\n                if (isSet(DAY_OF_MONTH)) {\n                    // To avoid underflow with DAY_OF_MONTH-1, add\n                    // DAY_OF_MONTH, then subtract 1.\n                    fixedDate += internalGet(DAY_OF_MONTH);\n                    fixedDate--;\n                }\n            } else {\n                if (isFieldSet(fieldMask, WEEK_OF_MONTH)) {\n                    long firstDayOfWeek = BaseCalendar.getDayOfWeekDateOnOrBefore(fixedDate + 6,\n                                                                                  getFirstDayOfWeek());\n                    // If we have enough days in the first week, then\n                    // move to the previous week.\n                    if ((firstDayOfWeek - fixedDate) >= getMinimalDaysInFirstWeek()) {\n                        firstDayOfWeek -= 7;\n                    }\n                    if (isFieldSet(fieldMask, DAY_OF_WEEK)) {\n                        firstDayOfWeek = BaseCalendar.getDayOfWeekDateOnOrBefore(firstDayOfWeek + 6,\n                                                                                 internalGet(DAY_OF_WEEK));\n                    }\n                    // In lenient mode, we treat days of the previous\n                    // months as a part of the specified\n                    // WEEK_OF_MONTH. See 4633646.\n                    fixedDate = firstDayOfWeek + 7 * (internalGet(WEEK_OF_MONTH) - 1);\n                } else {\n                    int dayOfWeek;\n                    if (isFieldSet(fieldMask, DAY_OF_WEEK)) {\n                        dayOfWeek = internalGet(DAY_OF_WEEK);\n                    } else {\n                        dayOfWeek = getFirstDayOfWeek();\n                    }\n                    // We are basing this on the day-of-week-in-month.  The only\n                    // trickiness occurs if the day-of-week-in-month is\n                    // negative.\n                    int dowim;\n                    if (isFieldSet(fieldMask, DAY_OF_WEEK_IN_MONTH)) {\n                        dowim = internalGet(DAY_OF_WEEK_IN_MONTH);\n                    } else {\n                        dowim = 1;\n                    }\n                    if (dowim >= 0) {\n                        fixedDate = BaseCalendar.getDayOfWeekDateOnOrBefore(fixedDate + (7 * dowim) - 1,\n                                                                            dayOfWeek);\n                    } else {\n                        // Go to the first day of the next week of\n                        // the specified week boundary.\n                        int lastDate = monthLength(month, year) + (7 * (dowim + 1));\n                        // Then, get the day of week date on or before the last date.\n                        fixedDate = BaseCalendar.getDayOfWeekDateOnOrBefore(fixedDate + lastDate - 1,\n                                                                            dayOfWeek);\n                    }\n                }\n            }\n        } else {\n            if (year == gregorianCutoverYear && cal == gcal\n                && fixedDate < gregorianCutoverDate\n                && gregorianCutoverYear != gregorianCutoverYearJulian) {\n                // January 1 of the year doesn't exist.  Use\n                // gregorianCutoverDate as the first day of the\n                // year.\n                fixedDate = gregorianCutoverDate;\n            }\n            // We are on the first day of the year.\n            if (isFieldSet(fieldMask, DAY_OF_YEAR)) {\n                // Add the offset, then subtract 1. (Make sure to avoid underflow.)\n                fixedDate += internalGet(DAY_OF_YEAR);\n                fixedDate--;\n            } else {\n                long firstDayOfWeek = BaseCalendar.getDayOfWeekDateOnOrBefore(fixedDate + 6,\n                                                                              getFirstDayOfWeek());\n                // If we have enough days in the first week, then move\n                // to the previous week.\n                if ((firstDayOfWeek - fixedDate) >= getMinimalDaysInFirstWeek()) {\n                    firstDayOfWeek -= 7;\n                }\n                if (isFieldSet(fieldMask, DAY_OF_WEEK)) {\n                    int dayOfWeek = internalGet(DAY_OF_WEEK);\n                    if (dayOfWeek != getFirstDayOfWeek()) {\n                        firstDayOfWeek = BaseCalendar.getDayOfWeekDateOnOrBefore(firstDayOfWeek + 6,\n                                                                                 dayOfWeek);\n                    }\n                }\n                fixedDate = firstDayOfWeek + 7 * ((long)internalGet(WEEK_OF_YEAR) - 1);\n            }\n        }\n\n        return fixedDate;\n    }", "private static List<String> loadInstantRunDexFile(ApplicationInfo appInfo) {\n        List<String> instantRunDexPaths = new ArrayList<>();\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && appInfo.splitSourceDirs != null) {\n            instantRunDexPaths.addAll(Arrays.asList(appInfo.splitSourceDirs));\n            Log.i(AndServer.TAG, \"InstantRun support was found.\");\n        } else {\n            try {\n                // Reflect instant run sdk to find where is the dex file.\n                Class pathsByInstantRun = Class.forName(\"com.android.tools.fd.runtime.Paths\");\n                Method getDexFileDirectory = pathsByInstantRun.getMethod(\"getDexFileDirectory\", String.class);\n                String dexDirectory = (String)getDexFileDirectory.invoke(null, appInfo.packageName);\n\n                File dexFolder = new File(dexDirectory);\n                if (dexFolder.exists() && dexFolder.isDirectory()) {\n                    File[] dexFiles = dexFolder.listFiles();\n                    for (File file : dexFiles) {\n                        if (file.exists() && file.isFile() && file.getName().endsWith(\".dex\")) {\n                            instantRunDexPaths.add(file.getAbsolutePath());\n                        }\n                    }\n                    Log.i(AndServer.TAG, \"InstantRun support was found.\");\n                }\n\n            } catch (ClassNotFoundException e) {\n                Log.i(AndServer.TAG, \"InstantRun support was not found.\");\n            } catch (Exception e) {\n                Log.w(AndServer.TAG, \"Finding InstantRun failed.\", e);\n            }\n        }\n\n        return instantRunDexPaths;\n    }", "  public double add(Azimuth other) {\n\n    // Add\n    double sum = this.getAngle() + other.getAngle();\n\n    // Reduce to 0 to 359\n    return sum % DEGREES_IN_CIRCLE;\n  }\n", "public void addEvent ( String e ) { if ( TextUtils . isEmpty ( e ) ) { return ; } if ( event == null ) { event = new WXEvent ( ) ; } if ( containsEvent ( e ) ) { return ; } event . add ( e ) ; }", "public void hide(){\n  dialog.setVisible(false);\n}\n", "public TriggerBuilder < T > forJob ( JobKey keyOfJobToFire ) { this . jobKey = keyOfJobToFire ; return this ; }", "public void setQueryExecutions(java.util.Collection<QueryExecution> queryExecutions) {\n        if (queryExecutions == null) {\n            this.queryExecutions = null;\n            return;\n        }\n\n        this.queryExecutions = new java.util.ArrayList<QueryExecution>(queryExecutions);\n    }", "private CGlobalSettings ( ) { }", "private static long upperBound ( long from , final long mid , final long secondCut , final LongComparator comp ) { long len = mid - from ; while ( len > NUM_ ) { long half = len / NUM_ ; long middle = from + half ; if ( comp . compare ( secondCut , middle", "public boolean hasUTF16BEBom ( ) { if ( buffer . length >= NUM_ ) return ( buffer [ NUM_ ] == - NUM_ && buffer [ NUM_ ] == - NUM_ ) ; else return BOOL_ ; }", "public void fixupVariables(java.util.Vector vars,int globalsSize){\n  if (null != m_parts) {\n    int n=m_parts.size();\n    for (int i=0; i < n; i++) {\n      AVTPart part=(AVTPart)m_parts.elementAt(i);\n      part.fixupVariables(vars,globalsSize);\n    }\n  }\n}\n", "public static double [ ] matrixProduct ( double [ ] [ ] A , double [ ] v ) throws Exception { if ( v . length != A [ NUM_ ] . length ) { throw new Exception ( STR_ + v . length + STR_ + A [ NUM_ ] . length ) ; } double [ ] result = new double [ A . length ] ; for ( int r = NUM_ ; r < result . length ; r ++ ) { result [ r ] = NUM_ ; for ( int c = NUM_ ; c < v . length ; c ++ ) { result [ r ] += A [ r ] [ c ] * v [ c ] ; } } return result ; }", "    public void setBytes(byte[] alreadyHashedBytes) {\n        this.bytes = alreadyHashedBytes;\n        this.hexEncoded = null;\n        this.base64Encoded = null;\n    }\n", "public void queueData(final NBTTagCompound data,final byte type){\n  sendQueue.add(new QueueEntryNBT(type,data));\n}\n", "public void destroy ( ) { super . destroy ( ) ; }", "    private String getParameter(IContentItem contentItem, String key) {\n        Properties props = (Properties) propertyRegistry.get(contentItem.getKey());\n        String status = \"\";\n\n        if ((props == null) || (props.get(key) == null)) {\n            return status;\n        } else {\n            status = (String) props.get(key);\n\n            // In case the user wrapped that status with quotes strip them\n            if (status.startsWith(\"\\\"\")) {\n                status = status.substring(2);\n            }\n\n            if (status.endsWith(\"\\\"\")) {\n                status = status.substring(1, status.length() - 1);\n            }\n\n            return status;\n        }\n    }\n", "    private void applyOptions() {\n\n        //We retrieve our stored options from the session and set the controls state\n        TreeOptions options = (TreeOptions)\n            ExampleUtils.getSessionObject(TreeOptions.class);\n\n        jsEnabled.setChecked(options.javascriptEnabled);\n        rootNodeDisplayed.setChecked(options.rootNodeDisplayed);\n\n        //Enable or disable javascript functionality based on users current option\n        enableJavascript(options.javascriptEnabled);\n\n        //Indicates if we want to display the root node or not.\n        tree.setRootNodeDisplayed(options.rootNodeDisplayed);\n    }\n", "    public void addSelectionListener(SelectionListener listener) {\n        eventListenerList.add(SelectionListener.class,listener);\n    }\n", "public StringBuffer process(StringBuffer source) {\n        CharSequence result = process((CharSequence) source);\n        if (result instanceof StringBuffer) {\n            return (StringBuffer) result;\n        } else {\n            return new StringBuffer(result);\n        }\n    }", "public Vector3i set(Vector2ic v, int z) {\n        return set(v.x(), v.y(), z);\n    }", "private Field checkFieldInAllSchemas(String name) throws TupleMRException {\n    Field field = null;\n    for (int i = 0; i < mrConfig.getIntermediateSchemas().size(); i++) {\n      Field fieldInSource = checkFieldInSchema(name, i);\n      if (field == null) {\n        field = fieldInSource;\n      } else if (field.getType() != fieldInSource.getType() || field.getObjectClass() != fieldInSource.getObjectClass()) {\n        throw new TupleMRException(\"The type for field '\" + name\n            + \"' is not the same in all the sources\");\n      } else if (fieldInSource.isNullable()) {\n        // IMPORTANT CASE. Nullable fields must be returned when present nullable and non nullable fields mixed\n        field = fieldInSource;\n      }\n    }\n    return field;\n  }", "private boolean doesStorageSystemSupportVolumeExpand(StorageSystem storageSystem) throws WBEMException {\n  boolean expandSupported=false;\n  CloseableIterator<CIMInstance> cimInstances=null;\n  CIMObjectPath storageConfigServicePath=_cimPath.getConfigSvcPath(storageSystem);\n  try {\n    cimInstances=_helper.getAssociatorInstances(storageSystem,storageConfigServicePath,null,SmisConstants.EMC_STORAGE_CONFIGURATION_CAPABILITIES,null,null,SmisConstants.PS_SUPPORTED_STORAGE_ELEMENT_FEATURES);\n    if (cimInstances != null) {\n      while (cimInstances.hasNext()) {\n        CIMInstance capabilitiesInstance=cimInstances.next();\n        UnsignedInteger16[] supportedFeatures=(UnsignedInteger16[])capabilitiesInstance.getPropertyValue(SmisConstants.CP_SUPPORTED_STORAGE_ELEMENT_FEATURES);\n        for (        UnsignedInteger16 supportedFeatureEntry : supportedFeatures) {\n          if (supportedFeatureEntry.intValue() == SmisConstants.STORAGE_ELEMENT_CAPACITY_EXPANSION_VALUE) {\n            expandSupported=true;\n            return true;\n          }\n        }\n      }\n    }\n  }\n  finally {\n    if (cimInstances != null) {\n      cimInstances.close();\n    }\n    _log.info(String.format(\"StorageSystem %s %s volume expand\",storageSystem.getNativeGuid(),(expandSupported) ? \"supports\" : \"does not support\"));\n  }\n  return false;\n}\n", "public static Certificate readCertificate ( String certString ) throws Exception { StringReader sr = new StringReader ( certString ) ; PEMReader pw = new PEMReader ( sr ) ; Object object = pw . readObject ( ) ; if ( object instanceof X509Certificate ) { r", "public static void displayTransform( InterleavedF32 transform , String name ) {\n\n\t\t// declare storage\n\t\tGrayF32 magnitude = new GrayF32(transform.width,transform.height);\n\t\tGrayF32 phase = new GrayF32(transform.width,transform.height);\n\n\t\t// Make a copy so that you don't modify the input\n\t\ttransform = transform.clone();\n\n\t\t// shift the zero-frequency into the image center, as is standard in image processing\n\t\tDiscreteFourierTransformOps.shiftZeroFrequency(transform,true);\n\n\t\t// Compute the transform's magnitude and phase\n\t\tDiscreteFourierTransformOps.magnitude(transform,magnitude);\n\t\tDiscreteFourierTransformOps.phase(transform, phase);\n\n\t\t// Convert it to a log scale for visibility\n\t\tPixelMath.log(magnitude,magnitude);\n\n\t\t// Display the results\n\t\tBufferedImage visualMag = VisualizeImageData.grayMagnitude(magnitude, null, -1);\n\t\tBufferedImage visualPhase = VisualizeImageData.colorizeSign(phase, null, Math.PI);\n\n\t\tImageGridPanel dual = new ImageGridPanel(1,2,visualMag,visualPhase);\n\t\tShowImages.showWindow(dual,\"Magnitude and Phase of \"+name);\n\t}", "    public Title truncate(final int noWords) {\n        if (noWords < 1) {\n            throw new IllegalArgumentException(\"Truncation must be to one or more words\");\n        }\n        int pos = 0;\n        int spaces = 0;\n\n        while (pos < string.length", "public Subject authenticate(CallbackHandler callbackHandler, Subject subject) throws WSLoginFailedException, CredentialException {\n        if (callbackHandler == null) {\n            throw new WSLoginFailedException(TraceNLS.getFormattedMessage(\n                                                                          this.getClass(),\n                                                                          TraceConstants.MESSAGE_BUNDLE,\n                                                                          \"JAAS_LOGIN_NO_CALLBACK_HANDLER\",\n                                                                          new Object[] {},\n                                                                          \"CWWKS1170E: The login on the client application failed because the CallbackHandler implementation is null. Ensure a valid CallbackHandler implementation is specified either in the LoginContext constructor or in the client application's deployment descriptor.\"));\n        }\n\n        CallbackHandlerAuthenticationData cAuthData = new CallbackHandlerAuthenticationData(callbackHandler);\n        AuthenticationData authenticationData = null;\n        try {\n            authenticationData = cAuthData.createAuthenticationData();\n        } catch (IOException e) {\n            throw new WSLoginFailedException(TraceNLS.getFormattedMessage(\n                                                                          this.getClass(),\n                                                                          TraceConstants.MESSAGE_BUNDLE,\n                                                                          \"JAAS_LOGIN_UNEXPECTED_EXCEPTION\",\n                                                                          new Object[] { e.getLocalizedMessage() },\n                                                                          \"CWWKS1172E: The login on the client application failed because of an unexpected exception. Review the logs to understand the cause of the exception. The exception is: \"\n                                                                                          + e.getLocalizedMessage()));\n        } catch (UnsupportedCallbackException e) {\n            throw new WSLoginFailedException(TraceNLS.getFormattedMessage(\n                                                                          this.getClass(),\n                                                                          TraceConstants.MESSAGE_BUNDLE,\n                                                                          \"JAAS_LOGIN_UNEXPECTED_EXCEPTION\",\n                                                                          new Object[] { e.getLocalizedMessage() },\n                                                                          \"CWWKS1172E: The login on the client application failed because of an unexpected exception. Review the logs to understand the cause of the exception. The exception is: \"\n                                                                                          + e.getLocalizedMessage()));\n        }\n        return createBasicAuthSubject(authenticationData, subject);\n    }", "public void arcTo(double rx,double ry,double xAxisRotation,boolean largeArcFlag,boolean sweepFlag,double x,double y){\n  if (rx == 0 || ry == 0) {\n    lineTo(x,y);\n    return;\n  }\n  Node lastPoint=get(size() - 1);\n  double x0=((lastPoint.mask & C2_MASK) == C2_MASK) ? lastPoint.x[2] : lastPoint.x[0];\n  double y0=((lastPoint.mask & C2_MASK) == C2_MASK) ? lastPoint.y[2] : lastPoint.y[0];\n  if (x0 == x && y0 == y) {\n    return;\n  }\n  double dx2=(x0 - x) / 2d;\n  double dy2=(y0 - y) / 2d;\n  double angle=Math.toRadians(xAxisRotation);\n  double cosAngle=Math.cos(angle);\n  double sinAngle=Math.sin(angle);\n  double x1=(cosAngle * dx2 + sinAngle * dy2);\n  double y1=(-sinAngle * dx2 + cosAngle * dy2);\n  rx=Math.abs(rx);\n  ry=Math.abs(ry);\n  double Prx=rx * rx;\n  double Pry=ry * ry;\n  double Px1=x1 * x1;\n  double Py1=y1 * y1;\n  double radiiCheck=Px1 / Prx + Py1 / Pry;\n  if (radiiCheck > 1) {\n    rx=Math.sqrt(radiiCheck) * rx;\n    ry=Math.sqrt(radiiCheck) * ry;\n    Prx=rx * rx;\n    Pry=ry * ry;\n  }\n  double sign=(largeArcFlag == sweepFlag) ? -1 : 1;\n  double sq=((Prx * Pry) - (Prx * Py1) - (Pry * Px1)) / ((Prx * Py1) + (Pry * Px1));\n  sq=(sq < 0) ? 0 : sq;\n  double coef=(sign * Math.sqrt(sq));\n  double cx1=coef * ((rx * y1) / ry);\n  double cy1=coef * -((ry * x1) / rx);\n  double sx2=(x0 + x) / 2.0;\n  double sy2=(y0 + y) / 2.0;\n  double cx=sx2 + (cosAngle * cx1 - sinAngle * cy1);\n  double cy=sy2 + (sinAngle * cx1 + cosAngle * cy1);\n  double ux=(x1 - cx1) / rx;\n  double uy=(y1 - cy1) / ry;\n  double vx=(-x1 - cx1) / rx;\n  double vy=(-y1 - cy1) / ry;\n  double p, n;\n  n=Math.sqrt((ux * ux) + (uy * uy));\n  p=ux;\n  sign=(uy < 0) ? -1d : 1d;\n  double angleStart=Math.toDegrees(sign * Math.acos(p / n));\n  n=Math.sqrt((ux * ux + uy * uy) * (vx * vx + vy * vy));\n  p=ux * vx + uy * vy;\n  sign=(ux * vy - uy * vx < 0) ? -1d : 1d;\n  double angleExtent=Math.toDegrees(sign * Math.acos(p / n));\n  if (!sweepFlag && angleExtent > 0) {\n    angleExtent-=360f;\n  }\n else   if (sweepFlag && angleExtent < 0) {\n    angleExtent+=360f;\n  }\n  angleExtent%=360f;\n  angleStart%=360f;\n  Arc2D.Double arc=new Arc2D.Double(cx - rx,cy - ry,rx * 2d,ry * 2d,-angleStart,-angleExtent,Arc2D.OPEN);\n  PathIterator i=arc.getPathIterator(AffineTransform.getRotateInstance(angle,arc.getCenterX(),arc.getCenterY()));\n  double[] coords=new double[6];\n  i.next();\n  while (!i.isDone()) {\n    int type=i.currentSegment(coords);\nswitch (type) {\ncase PathIterator.SEG_CLOSE:\n      break;\ncase PathIterator.SEG_CUBICTO:\n    curveTo(coords[0],coords[1],coords[2],coords[3],coords[4],coords[5]);\n  break;\ncase PathIterator.SEG_LINETO:\nlineTo(coords[0],coords[1]);\nbreak;\ncase PathIterator.SEG_MOVETO:\nbreak;\ncase PathIterator.SEG_QUADTO:\nquadTo(coords[0],coords[1],coords[2],coords[3]);\nbreak;\n}\ni.next();\n}\n}\n", "@Override\n    public DeleteResourceServerResult deleteResourceServer(DeleteResourceServerRequest request) {\n        request = beforeClientExecution(request);\n        return executeDeleteResourceServer(request);\n    }", "public String brokerList ( ) { return String . join ( STR_ , kafka . config ( ) . hostName ( ) , Integer . toString ( kafka . boundPort ( SecurityProtocol . PLAINTEXT ) ) ) ; }", "public void removeChildObjectFromCamera(final GVRSceneObject child,\n                                            int camera) {\n        switch (camera) {\n            case LEFT_CAMERA:\n                mLeftCameraRootObject.removeChildObject(child);\n                break;\n            case RIGHT_CAMERA:\n                mRightCameraRootObject.removeChildObject(child);\n                break;\n            default:\n                mMainCameraRootObject.removeChildObject(child);\n                break;\n        }\n    }", "\tpublic void writeEvaluationResult(String evaluationResultFilename) {\n\t\ttry {\n\t\t\tPrintStream out =\n\t\t\t\tnew PrintStream(new FileOutputStream(evaluationResultFilename));\n\t\t\twriteEvaluationResult(out);\n\t\t\tout.close();\n\t\t} catch (FileNotFoundException fnfe) {\n\t\t\tSystem.err.println(\n\t\t\t\t\"File not found exception in Evaluation.writeEvaluationResult(filename):\"\n\t\t\t\t\t+ fnfe);\n\t\t\tSystem.exit(1);\n\t\t}\n\t}\n", "    public Vertex getVertex(int i) {\n        if (i < 0 || i >= rank)\n            throw new IndexOutOfBoundsException(\"Invalid index: \" + i);\n        return vertices[i];\n    }\n", "    public void setQueryTimeout(int seconds) throws SQLException {\n        try {\n            if(Trace.isEnabled()) Trace.trace(getId(),seconds);\n            if(seconds<0) {\n                throw Factory.getInvalidValueException(\"seconds:\"+seconds);\n            }\n            queryTimeout=seconds;\n            queryTimeoutSet=true;\n        } catch(Throwable e) {\n            throw convertThrowable(e);\n        }\n    }\n", "@Override public ArrayList<String> list(String path){\n  ArrayList<String> fileNameList=new ArrayList<String>();\n  DropboxAPI.Entry files=null;\n  try {\n    files=mDBApi.metadata(path,25000,null,true,null);\n    for (    Entry e : files.contents) {\n      fileNameList.add(e.fileName());\n    }\n  }\n catch (  DropboxException e) {\n    e.printStackTrace();\n  }\n  return fileNameList;\n}\n", "public boolean isBold(){\n  return modifiers.contains(SGR.BOLD);\n}", "public static void mixin ( Class self , Class categoryClass ) { mixin ( getMetaClass ( self ) , Collections . singletonList ( categoryClass ) ) ; }", "    private Excludes readExcludes() throws IOException {\n        List<Pattern> patterns = new ArrayList<Pattern>();\n\n        File globalExcludes = new File(toolDirectory, EXCLUDED_PATHS);\n        parseFile(globalExcludes, patterns);\n\n        // Look for Google-specific excludes.\n        // TODO: Traverse all vendor-specific directories.\n        File googleExcludes = new File(\"./vendor/google/\" + EXCLUDED_PATHS);\n        if (googleExcludes.exists()) {\n            parseFile(googleExcludes, patterns);\n        }\n\n        // Look for user-specific excluded-paths file in current directory.\n        File localExcludes = new File(EXCLUDED_PATHS);\n        if (localExcludes.exists()) {\n            parseFile(localExcludes, patterns);\n        }\n\n        return new Excludes(patterns);\n    }\n", "void paintComponent(Graphics g){\n  RectangularShape rectangle;\n  int radius=RapidLookAndFeel.CORNER_DEFAULT_RADIUS;\nswitch (position) {\ncase SwingConstants.LEFT:\n    rectangle=new RoundRectangle2D.Double(0,0,button.getWidth() + radius,button.getHeight(),radius,radius);\n  break;\ncase SwingConstants.CENTER:\nrectangle=new Rectangle2D.Double(0,0,button.getWidth(),button.getHeight());\nbreak;\ndefault :\nrectangle=new RoundRectangle2D.Double(-radius,0,button.getWidth() + radius,button.getHeight(),radius,radius);\nbreak;\n}\nRapidLookTools.drawButton(button,g,rectangle);\n}\n", "public synchronized String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( this . getClass ( ) . getSimpleName ( ) ) . append ( STR_ ) ; sb . append ( STR_ ) . append ( file . getName ( ) ) ; sb . append ( STR_ ) . append ( mode ) ; ", "@Nullable public static Label createLabelFromString(@Nullable BuildFile file,@Nullable String labelString){\n  if (labelString == null) {\n    return null;\n  }\n  int colonIndex=labelString.indexOf(':');\n  if (labelString.startsWith(\"//\")) {\n    if (colonIndex == -1) {\n      labelString+=\":\" + PathUtil.getFileName(labelString);\n    }\n    return Label.createIfValid(labelString);\n  }\n  WorkspacePath packagePath=file != null ? file.getPackageWorkspacePath() : null;\n  if (packagePath == null) {\n    return null;\n  }\n  String localPath=colonIndex == -1 ? labelString : labelString.substring(1);\n  return Label.createIfValid(\"//\" + packagePath.relativePath() + \":\"+ localPath);\n}\n", "public void fatal(Object message, Throwable t)\n    {\n        if (IS12)\n        {\n            getLogger().log(FQCN, Level.FATAL, message, t);\n        }\n        else\n        {\n            getLogger().log(FQCN, Level.FATAL, message, t);\n        }\n    }", "void addNodeMap(TreeNode node){\n  StringBuffer sb=new StringBuffer();\n  TreeNode tn=node;\n  while (tn != root) {\n    sb.insert(0,tn.toString());\n    if (tn.getParent() != root)     sb.insert(0,\".\");\n    tn=tn.getParent();\n  }\n  String pack=sb.toString();\n  nodeForPackage.put(pack,node);\n}\n", "public static void syncImmediately(Context context){\n  Bundle bundle=new Bundle();\n  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);\n  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);\n  ContentResolver.requestSync(getSyncAccount(context),context.getString(R.string.content_authority),bundle);\n}\n", "    public Point getPoint(int inIndex){\n        Point tempPoint = null;\n        if ((myPolygons != null)&&(inIndex > -1)){\n            int tempIndex = inIndex;\n            for (int i=0; i<myPolygons.length; i++){\n                if (myPolygons[i].getNumPo", "private int findSalesRep(MRequest request){\n  String QText=request.getSummary();\n  if (QText == null)   QText=\"\";\n else   QText=QText.toUpperCase();\n  MRequestProcessorRoute[] routes=m_model.getRoutes(false);\n  for (int i=0; i < routes.length; i++) {\n    MRequestProcessorRoute route=routes[i];\n    if (request.getR_RequestType_ID() == route.getR_RequestType_ID() && route.getR_RequestType_ID() != 0)     return route.getAD_User_ID();\n    String keyword=route.getKeyword();\n    if (keyword != null) {\n      StringTokenizer st=new StringTokenizer(keyword.toUpperCase(),\" ,;\\t\\n\\r\\f\");\n      while (st.hasMoreElements()) {\n        if (QText.indexOf(st.nextToken()) != -1)         return route.getAD_User_ID();\n      }\n    }\n  }\n  return m_model.getSupervisor_ID();\n}\n", "  public boolean isStable(final boolean pThrowOnError) throws RaccoonException {\n    boolean isStable = true;\n\n    if (!isInitialised()) {\n      isStable = false;\n      if (pThrowOnError) {\n        throw new RaccoonException(ErrorCodes.COMPONENT_NOT_INITIALISED,\n            ErrorMsgs.MSG_COMPONENT_NOT_INITIALISED);\n      }\n    }\n    return isStable;\n  }\n", "    public boolean nodeRemoteChanged(String machine,String number,String builder,String ctype) {\n        super.nodeRemoteChanged(machine,number,builder,ctype);\n        return nodeChanged(machine,number,builder,ctype);\n    }", "private void changeBitmapColor ( Bitmap sourceBitmap , ImageView image , int color ) { Bitmap resultBitmap = Bitmap . createBitmap ( sourceBitmap , NUM_ , NUM_ , sourceBitmap . getWidth ( ) - NUM_ , sourceBitmap . getHeight ( ) - NUM_ ) ; Paint p = new Paint ( ) ; ColorFilter filter = new PorterDuffColorFilter ( color , PorterDuff . Mode . OVERLAY ) ; p . setColorFilter ( filter ) ; image . setImageBitmap ( resultBitmap ) ; Canvas canvas = new Canvas ( resultBitmap ) ; canvas . drawBitmap ( resultBitmap , NUM_ , NUM_ , p ) ; }", "    protected void checkTranspose(Matrix B) {\n        if (numRows != B.numColumns())\n            throw new IndexOutOfBoundsException(\"A.numRows != B.numColumns (\"\n                    + numRows + \" != \" + B.numColumns() + \")\");\n        if (numColumns != B.numRows())\n            throw new IndexOutOfBoundsException(\"A.numColumns != B.numRows (\"\n                    + numColumns + \" != \" + B.numRows() + \")\");\n    }\n", "public synchronized void saveCommitPoint(Long indexCommitGen){\n  AtomicInteger reserveCount=savedCommits.get(indexCommitGen);\n  if (reserveCount == null)   reserveCount=new AtomicInteger();\n  reserveCount.incrementAndGet();\n  savedCommits.put(indexCommitGen,reserveCount);\n}\n", "private boolean isServiceSupportedInRegion(String serviceName) {\n        return partition.getServices().get(serviceName) != null\n                && partition.getServices().get(serviceName).getEndpoints()\n                .containsKey(region);\n    }", "public static boolean isResponseType ( char type ) { return ( isSuccessResponseType ( type ) || isErrorResponseType ( type ) ) ; }", "private long generateExpirationDate(Date expirationDate) {\n\n        long expirationInSeconds = expirationDate != null ? ((expirationDate\n                .getTime() - clock.currentTimeMillis()) / 1000L)\n                : PRESIGN_URL_MAX_EXPIRATION_SECONDS;\n\n        if (expirationInSeconds > PRESIGN_URL_MAX_EXPIRATION_SECONDS) {\n            throw new SdkClientException(\n                    \"Requests that are pre-signed by SigV4 algorithm are valid for at most 7 days. \"\n                            + \"The expiration date set on the current request [\"\n                            + AWS4SignerUtils.formatTimestamp(expirationDate\n                                    .getTime()) + \"] has exceeded this limit.\");\n        }\n        return expirationInSeconds;\n    }", "public static boolean isPossibleRegex(String str){\n  for (int i=0; i < str.length(); i++) {\nswitch (str.charAt(i)) {\ncase '*':\n      return true;\ncase '{':\n    if (i < str.length() - 1 && str.charAt(i + 1) != '}')     return true;\n  break;\ncase '|':\nreturn true;\ncase '?':\nif (i > 1 && str.charAt(i - 1) == ')') return true;\nbreak;\ndefault :\nbreak;\n}\n}\nreturn false;\n}\n", "public jMatrix times ( double s ) { jMatrix X = new jMatrix ( m , n ) ; double [ ] [ ] C = X . getArray ( ) ; for ( int i = NUM_ ; i < m ; i ++ ) { for ( int j = NUM_ ; j < n ; j ++ ) { C [ i ] [ j ] = s * A [ i ] [ j ] ; } } return X ; }", "public DisjunctionMaxWeight(IndexSearcher searcher,boolean needsScores,float boost) throws IOException {\n  super(DisjunctionMaxQuery.this);\n  for (  Query disjunctQuery : disjuncts) {\n    weights.add(searcher.createWeight(disjunctQuery,needsScores,boost));\n  }\n  this.needsScores=needsScores;\n}\n", "private DisplayMode isSupported(DisplayMode display)\n    {\n        final DisplayMode[] supported = dev.getDisplayModes();\n        for (final DisplayMode current : supported)\n        {\n            final boolean multiDepth = current.getBitDepth() != DisplayMode.BIT_DEPTH_MULTI && display.equals(current);\n            if (multiDepth\n                || current.getBitDepth() == DisplayMode.BIT_DEPTH_MULTI\n                   && display.getWidth() == current.getWidth()\n                   && display.getHeight() == current.getHeight())\n            {\n                return current;\n            }\n        }\n        return null;\n    }", "\tpublic boolean add(Permission p) {\n\t\t//\n\t\t// XXX : Add conflict resolution portion (needs implementation\n\t\t//       of central algebra controller first).\n\t\t//\n\t\tif (! permissionlist.contains(p)) {\n\t\t\tpermissionlist.add(p);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n", "public static void deepCopyOnto ( JsonObject source , JsonObject destination , boolean replace ) { if ( source == null || destination == null ) { throw new RuntimeException ( STR_ ) ; } JsonObject sourceCopy = new JsonParser ( ) . parse ( source . toString ( ) ) . getAsJsonObject ( ) ; deepCopyOnto ( sourceCopy , destination , replace , BOOL_ ) ; }", "public static AnySpacePredicate any ( ISpacePredicate ... predicates ) { return new AnySpacePredicate ( predicates ) ; }", "void appendedGroupNodeComment ( INaviGroupNode groupNode , IComment comment ) ;", "public String toSummaryString(){\n  String result=\"Selected values: \" + Utils.joinOptions(m_BestClassifierOptions);\n  return result + '\\n';\n}\n", "\tpublic void init(ServletConfig config) throws ServletException{\n\t\tif(CmsStruts.strutsServlet == null){\n\t\t\tCmsStruts.strutsServlet = new OpenCmsActionServlet();\n\t\t\tCmsStruts.strutsServlet.init(config);\n\t\t\ttry{\n\t\t\t\tCmsStruts.strutsServlet.init(null,null);\t\t\t\t\n\t\t\t}catch(StrutsParseException e){\n\t\t\t\t//do nothing, not parsing anything\n\t\t\t}catch(CmsException e){\n\t\t\t\t//do nothing not sending a CmsObject\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n", "public static void cursorDoubleToContentValues(Cursor cursor, String field,\n            ContentValues values, String key) {\n        int colIndex = cursor.getColumnIndex(field);\n        if (!cursor.isNull(colIndex)) {\n            values.put(key, cursor.getDouble(colIndex));\n        } else {\n            values.put(key, (Double) null);\n        }\n    }", "public void testFileNameInStackTrace ( ) { testFileNameInStackTrace ( STR_ , STR_ ) ; testFileNameInStackTrace ( STR_ , STR_ ) ; }", "public static ArrayList<IndexedMatrixValue> reshape(IndexedMatrixValue in,long rows1,long cols1,int brlen1,int bclen1,ArrayList<IndexedMatrixValue> out,long rows2,long cols2,int brlen2,int bclen2,boolean rowwise) throws DMLRuntimeException {\n  MatrixIndexes ixIn=in.getIndexes();\n  MatrixBlock mbIn=(MatrixBlock)in.getValue();\n  Collection<MatrixIndexes> rix=computeAllResultBlockIndexes(ixIn,rows1,cols1,brlen1,bclen1,rows2,cols2,brlen2,bclen2,rowwise);\n  HashMap<MatrixIndexes,MatrixBlock> rblk=createAllResultBlocks(rix,mbIn.nonZeros,rows1,cols1,brlen1,bclen1,rows2,cols2,brlen2,bclen2,rowwise,out);\n  long row_offset=(ixIn.getRowIndex() - 1) * brlen1;\n  long col_offset=(ixIn.getColumnIndex() - 1) * bclen1;\n  if (mbIn.sparse)   reshapeSparse(mbIn,row_offset,col_offset,rblk,rows1,cols1,rows2,cols2,brlen2,bclen2,rowwise);\n else   reshapeDense(mbIn,row_offset,col_offset,rblk,rows1,cols1,rows2,cols2,brlen2,bclen2,rowwise);\n  out=new ArrayList<IndexedMatrixValue>();\n  for (  Entry<MatrixIndexes,MatrixBlock> e : rblk.entrySet())   out.add(new IndexedMatrixValue(e.getKey(),e.getValue()));\n  return out;\n}\n", "final public JSType TypeDef(Map refs) throws ParseException {\n                             JSType ans;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case 3:\n      ans = Array(refs);\n      break;\n    case 5:\n      ans = Variant(refs);\n      break;\n    case 8:\n      ans = Tuple(refs);\n      break;\n    case 10:\n      ans = Dynamic();\n      break;\n    case 11:\n      ans = Ref(refs);\n      break;\n    case 13:\n    case 14:\n    case 15:\n    case 16:\n    case 17:\n    case 18:\n    case 19:\n    case 20:\n    case 21:\n    case 22:\n    case 23:\n    case 24:\n    case 25:\n    case 26:\n    case 27:\n    case 28:\n    case 29:\n    case 30:\n    case 31:\n    case 32:\n    case 33:\n    case 34:\n    case 35:\n    case 36:\n    case 37:\n    case 38:\n    case 39:\n    case 40:\n    case 41:\n    case 42:\n    case 43:\n    case 44:\n    case 45:\n    case 46:\n    case 47:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n    case 58:\n    case 59:\n      ans = Primitive();\n      break;\n    default:\n      jj_la1[2] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    {if (true) return ans;}\n    throw new Error(\"Missing return statement in function\");\n  }", "public static void setElementContent(final Node n,\n                                       final String s) throws SAXException {\n    NodeList children = n.getChildNodes();\n\n    for (int i = 0; i < children.getLength(); i++) {\n      Node curnode = children.item(i);\n\n      n.removeChild(curnode);\n    }\n\n    Document d = n.getOwnerDocument();\n\n    final Node textNode = d.createTextNode(s);\n\n    n.appendChild(textNode);\n  }", "public Writer write(Writer writer) throws JSONException {\n        try {\n            boolean notFirst = false;\n            writer.write('{');\n            for(Iterator it = myHashMap.entrySet().iterator(); it.hasNext();) {\n                Map.Entry entry = (Entry)it.next();\n                if (notFirst) {\n                    writer.write(',');\n                }\n                writeQuoted(writer, entry.getKey());\n                writer.write(':');\n                writeValue(writer, entry.getValue());\n                notFirst = true;\n            }\n            writer.write('}');\n            return writer;\n        } catch (IOException e) {\n            throw new JSONException(e);\n        }\n    }", "    public boolean hasGoal(String goalName) {\n        for (Goal g : goals) {\n\t    if (g.getName().equals(goalName)) {\n\t\treturn g.getPriority() > 0;\n\t    }\n\t}\n\treturn false;\n    }\n", "private void clearRegistryForComponent ( WXComponent component ) { WXComponent removedComponent = mRegistry . remove ( component . getDomObject ( ) . ref ) ; if ( removedComponent != null ) { removedComponent . removeAllEvent ( ) ; removedComponent . remo", "public void loadDemoFiles() throws IOException {\n  File fromDir=new File(XmlFile.xmlDir(),\"demoOperations\");\n  copyBackupSet(fromDir,getOperationsRoot());\n  log.debug(\"copying file: {}\",_demoPanelFileName);\n  File src=new File(fromDir,_demoPanelFileName);\n  File dst=new File(getOperationsRoot(),_demoPanelFileName);\n  FileHelper.copy(src.getAbsolutePath(),dst.getAbsolutePath(),true);\n}\n", "  public boolean hasListeners() {\n    if (listeners.size() > 0) return true;\n    return false;\n  }\n", "public synchronized boolean reloadConfigsIfNecessary() {\n    long time = RaidNode.now();\n    if (time > lastReloadAttempt + reloadInterval) {\n      lastReloadAttempt = time;\n      try {\n        File file = new File(configFileName);\n        long lastModified = file.lastModified();\n        if (lastModified > lastSuccessfulReload &&\n            time > lastModified + RELOAD_WAIT) {\n          reloadConfigs();\n          lastSuccessfulReload = time;\n          lastReloadAttemptFailed = false;\n          return true;\n        }\n      } catch (Exception e) {\n        if (!lastReloadAttemptFailed) {\n          LOG.error(\"Failed to reload config file - \" +\n              \"will use existing configuration.\", e);\n        }\n        lastReloadAttemptFailed = true;\n      }\n    }\n    return false;\n  }", "private static String hex4(char c) {\n\t\tchar[] r = new char[] { '0', '0', '0', '0' };\n\t\tint i = 3;\n\t\twhile (c > 0) {\n\t\t\tr[i] = HEX_DIGITS[c & 0xF];\n\t\t\tc >>>= 4;\n\t\t\t--i;\n\t\t}\n\t\treturn new String(r);\n\t}", "private void sort(InstructionGroup group) {\n        final InsnList instructions = method.instructions;\n        Collections.sort(group.getNodes(), new Comparator<InstructionGraphNode>() {\n            public int compare(InstructionGraphNode a, InstructionGraphNode b) {\n                return Integer.valueOf(instructions.indexOf(a.getInstruction()))\n                        .compareTo(instructions.indexOf(b.getInstruction()));\n            }\n        });\n    }", "long size64 ( ) ;", "\tprivate void printToStream(OutputStream out) {\n\n\t\ttry {\n\t\t\t// print\n\t\t\tOutputFormat format = new OutputFormat(dom);\n\t\t\tformat.setIndenting(true);\n\n\t\t\t// to generate output to console use this serializer\n\t\t\t// XMLSerializer serializer = new XMLSerializer(\n\n\t\t\t// to generate a file output use fileoutputstream instead of\n\t\t\t// \n\t\t\tXMLSerializer serializer = new XMLSerializer(out, format);\n\n\t\t\tserializer.serialize(dom);\n\t\t} catch (IOException ie) {\n\t\t\tie.printStackTrace();\n\t\t}\n\t}\n", "  public boolean validateNext(java.util.List list) {\n    return true;\n  }\n", "private int computeNumberOfObservations ( boolean [ ] sourceValid , boolean [ ] destValid ) throws Exception { TransferEntropyCalculatorMultiVariateKraskov tecmvKras = new TransferEntropyCalculatorMultiVariateKraskov ( ) ; tecmvKras . initialise ( k ) ; V", "public void setOutputStyle(final String outputStyle) {\n        if (outputStyle == null && this.outputStyle == null) {\n            return;\n        } else if (outputStyle == null) {\n            removeChild(this.outputStyle);\n            this.outputStyle = null;\n        } else if (this.outputStyle == null) {\n            this.outputStyle = new KeyValueNode<String>(CSConstants.OUTPUT_STYLE_TITLE, outputStyle);\n            appendChild(this.outputStyle, false);\n        } else {\n            this.outputStyle.setValue(outputStyle);\n        }\n    }", "private void processRedirect(String stringStatusCode,\n                                 HttpMethod httpMethodProxyRequest,\n                                 HttpServletRequest httpServletRequest,\n                                 HttpServletResponse httpServletResponse) throws Exception {\n        // Check if the proxy response is a redirect\n        // The following code is adapted from\n        // org.tigris.noodle.filters.CheckForRedirect\n        // Hooray for open source software\n\n        String stringLocation = httpMethodProxyRequest.getResponseHeader(STRING_LOCATION_HEADER).getValue();\n        if (stringLocation == null) {\n            throw new ServletException(\"Received status code: \"\n                                           + stringStatusCode + \" but no \"\n                                           + STRING_LOCATION_HEADER\n                                           + \" header was found in the response\");\n        }\n        // Modify the redirect to go to this proxy servlet rather than the proxied host\n        String stringMyHostName = httpServletRequest.getServerName();\n        if (httpServletRequest.getServerPort() != 80) {\n            stringMyHostName += \":\" + httpServletRequest.getServerPort();\n        }\n        stringMyHostName += httpServletRequest.getContextPath();\n        httpServletResponse.sendRedirect(stringLocation.replace(\n            getProxyHostAndPort() + this.getProxyPath(),\n            stringMyHostName));\n    }", "public List < IComment > appendGlobalComment ( final String comment ) throws com . google . security . zynamics . binnavi . API . disassembly . CouldntSaveDataException , com . google . security . zynamics . binnavi . API . disassembly . CouldntLoadDataEx", "public double distance ( Vector3 a ) { return Vector3 . distance ( a , this ) ; }", "public static byte[] toBytes(String hex){\n  if (hex == null)   return null;\n  int len=hex.length();\n  byte[] bytes=new byte[len / 2];\n  int k=0;\n  for (int i=0; i < len; i+=2) {\n    int digit=0;\n    char ch=hex.charAt(i);\n    if ('0' <= ch && ch <= '9')     digit=ch - '0';\n else     if ('a' <= ch && ch <= 'f')     digit=ch - 'a' + 10;\n else     if ('A' <= ch && ch <= 'F')     digit=ch - 'A' + 10;\n    ch=hex.charAt(i + 1);\n    if ('0' <= ch && ch <= '9')     digit=16 * digit + ch - '0';\n else     if ('a' <= ch && ch <= 'f')     digit=16 * digit + ch - 'a' + 10;\n else     if ('A' <= ch && ch <= 'F')     digit=16 * digit + ch - 'A' + 10;\n    bytes[k++]=(byte)digit;\n  }\n  return bytes;\n}\n", "void removeScannerInsertionPointProvider ( IScannerInsertionPointProvider provider ) ;", "    public String getParameter(String name) {\n        if (params.containsKey(name))\n            return ((String[])params.get(name))[0];\n        if (req != null) {\n            String value = req.getParameter(name);\n            if (value != null)\n                return value;\n        }\n        if ((document != null) && (name.equalsIgnoreCase(\"producer\")))\n            return \"org.apache.cocoon.producer.ProducerFromRequest\";\n        return null;\n    }\n", "\tpublic boolean saveAsGif() {\n\t\tif (!FileSaver.okForGif(imp))\n\t\t\treturn false;\n\t\tString path = getPath(\"GIF\", \".gif\");\n\t\tif (path==null)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn saveAsGif(path);\n\t}\n", "\tprotected void fireEdgeAdded(SDFEdge edge) {\n\t\tGraphEdgeChangeEvent<SDFAbstractVertex, SDFEdge> e = createGraphEdgeChangeEvent(\n\t\t\t\tGraphEdgeChangeEvent.EDGE_ADDED, edge);\n\n\t\tfor (int i = 0; i < graphListeners.size(); i++) {\n\t\t\tGraphListener<SDFAbstractVertex, SDFEdge> l = graphListeners.get(i);\n\n\t\t\tl.edgeAdded(e);\n\t\t}\n\t}\n", "\tpublic P2 norm() {\n\t\tdouble l=length();\n\t\tif(l>UtilNumber.eps)\n\t\t{\n\t\t\treturn new P2(x1/l, x2/l);\n\t\t}\n\t\telse return new P2(this);\n\t}\n", "  public void ensureCapacity(int nCols, int nRows) {\n    if (DebugFile.trace) {\n      DebugFile.writeln(\"Begin DBSubset.ensureCapacity(\"+String.valueOf(nCols)+\",\"+String.valueOf(nRows)+\")\");\n      DebugFile.incIdent();\n    }\n\n    for (int r=0;r<nRows; r++) {\n      Vector<Object> oNewRow = new Vector<Object>(nCols);\n      for (int c=0; c<nCols; c++) {\n        oNewRow.add(null);\n      }\n      super.add(oNewRow);\n    }\n    if (DebugFile.trace) {\n      DebugFile.decIdent();\n      DebugFile.writeln(\"End DBSubset.ensureCapacity()\");\n    }\n  } // ensureCapacity\n", "Object invokeMethod ( Object object , String methodName , Object arguments ) ;", "public void marshall(ChannelSummary channelSummary, ProtocolMarshaller protocolMarshaller) {\n\n        if (channelSummary == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(channelSummary.getArn(), ARN_BINDING);\n            protocolMarshaller.marshall(channelSummary.getChannelClass(), CHANNELCLASS_BINDING);\n            protocolMarshaller.marshall(channelSummary.getDestinations(), DESTINATIONS_BINDING);\n            protocolMarshaller.marshall(channelSummary.getEgressEndpoints(), EGRESSENDPOINTS_BINDING);\n            protocolMarshaller.marshall(channelSummary.getId(), ID_BINDING);\n            protocolMarshaller.marshall(channelSummary.getInputAttachments(), INPUTATTACHMENTS_BINDING);\n            protocolMarshaller.marshall(channelSummary.getInputSpecification(), INPUTSPECIFICATION_BINDING);\n            protocolMarshaller.marshall(channelSummary.getLogLevel(), LOGLEVEL_BINDING);\n            protocolMarshaller.marshall(channelSummary.getName(), NAME_BINDING);\n            protocolMarshaller.marshall(channelSummary.getPipelinesRunningCount(), PIPELINESRUNNINGCOUNT_BINDING);\n            protocolMarshaller.marshall(channelSummary.getRoleArn(), ROLEARN_BINDING);\n            protocolMarshaller.marshall(channelSummary.getState(), STATE_BINDING);\n            protocolMarshaller.marshall(channelSummary.getTags(), TAGS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public static SessionId generateIdentifier ( ) { SessionId sessionId = new SessionId ( ) ; sessionId . identifier = String . valueOf ( System . currentTimeMillis ( ) ) . concat ( STR_ ) . concat ( UUID . randomUUID ( ) . toString ( ) ) ; return sessionId ; }", "public void removeDiscoveryListener(DiscoveryListener listener){\n  listeners.remove(listener);\n}\n", "public static String addAndDeHump ( String input ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = NUM_ ; i < input . length ( ) ; i ++ ) { if ( ( i != NUM_ ) && Character . isUpperCase ( input . charAt ( i ) ) ) { sb . append ( STR_ ) ; } sb .", "protected void drawPolygon(Polygon polygon,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){\n  if (fillColor != null || fillPaint != null) {\n    if (shadow) {\n      g.setColor(mxConstants.SHADOW_COLOR);\n      g.translate(mxConstants.SHADOW_OFFSETX,mxConstants.SHADOW_OFFSETY);\n      g.fillPolygon(polygon);\n      g.translate(-mxConstants.SHADOW_OFFSETX,-mxConstants.SHADOW_OFFSETY);\n    }\n    if (fillPaint != null) {\n      g.setPaint(fillPaint);\n    }\n else {\n      g.setColor(fillColor);\n    }\n    g.fillPolygon(polygon);\n  }\n  if (penColor != null) {\n    g.setColor(penColor);\n    g.drawPolygon(polygon);\n  }\n}\n", "\tprotected void firePathChanged(javax.swing.tree.TreePath path) {\n\t\tObject node = path.getLastPathComponent();\n\t\tjavax.swing.tree.TreePath parentPath = path.getParentPath();\n\n\t\tif (parentPath == null) {\n\t\t\tfireChildrenChanged(path, null, null);\n\t\t} else {\n\t\t\tObject parent = parentPath.getLastPathComponent();\n\t\t\tfireChildChanged(parentPath, getIndexOfChild(parent, node), node);\n\t\t}\n\t}\n", "public void removeDummyLunPath(StorageSystem storageSystem,URI blockObjectURI) throws Exception {\n  log.info(\"Started dummy lun path removal from secondary volume\");\n  HDSApiClient apiClient=HDSUtils.getHDSApiClient(hdsApiFactory,storageSystem);\n  HDSApiE", "public void onRetry ( int retryNo ) { AsyncHttpClient . log . d ( LOG_TAG , String . format ( STR_ , retryNo ) ) ; }", "public String startSymbol() {\r\n    String[] ssyms = startSymbols();\r\n    if (ssyms == null || ssyms.length == 0) {\r\n      return null;\r\n    }\r\n    return ssyms[0];\r\n  }", "public void addMemberships(String universalId,Set membership) throws AMConsoleException {\n  if ((membership == null) || membership.isEmpty()) {\n    throw new AMConsoleException(\"entities.membership.add.no.selection.message\");\n  }\n  SSOToken ssoToken=getUserSSOToken();\n  String currentId=\"\";\n  try {\n    AMIdentity amid=IdUtils.getIdentity(ssoToken,universalId);\n    String[] params=new String[2];\n    params[1]=universalId;\n    for (Iterator iter=membership.iterator(); iter.hasNext(); ) {\n      String id=(String)iter.next();\n      AMIdentity amidentity=IdUtils.getIdentity(ssoToken,id);\n      currentId=id;\n      params[0]=id;\n      logEvent(\"ATTEMPT_ADD_IDENTITY_MEMBER\",params);\n      amidentity.addMember(amid);\n      logEvent(\"SUCCEED_ADD_IDENTITY_MEMBER\",params);\n    }\n  }\n catch (  SSOException e) {\n    String[] paramsEx={currentId,universalId,getErrorString(e)};\n    logEvent(\"SSO_EXCEPTION_ADD_IDENTITY_MEMBER\",paramsEx);\n    debug.warning(\"EntitiesModelImpl.addMemberships\",e);\n    throw new AMConsoleException(getErrorString(e));\n  }\ncatch (  IdRepoException e) {\n    String[] paramsEx={currentId,universalId,getErrorString(e)};\n    logEvent(\"IDM_EXCEPTION_ADD_IDENTITY_MEMBER\",paramsEx);\n    debug.warning(\"EntitiesModelImpl.addMemberships\",e);\n    throw new AMConsoleException(getErrorString(e));\n  }\n}\n", "public static File unpackLibraryAndDependencies(String shortName) throws UnsatisfiedLinkError {\n  assertInitialized();\n  try {\n    return unpackLibraryBySoName(System.mapLibraryName(shortName));\n  }\n catch (  IOException ex) {\n    throw new RuntimeException(ex);\n  }\n}\n", "@Override\r\n  public String asString(Object object)\r\n  {\r\n    // at this point object is guaranteed to be enumeration\r\n    Enum<?> e = (Enum<?>)object;\r\n    if(object instanceof OrdinalEnum) {\r\n      return Integer.toString(e.ordinal());\r\n    }\r\n    return e.name();\r\n  }", "public void updateSubstitution ( final TypeSubstitution substitution , final BaseType baseType , final List < Integer > memberPath , final int offset ) throws CouldntSaveDataException ;", "private void revalidateAxisExtrema(){\nsynchronized (this) {\n    for (    Entry<DataSource,Map<Integer,String>> entryByDataSource : columnToAxisMappingByDataSource.entrySet()) {\n      DataSource dataSource=entryByDataSource.getKey();\n      Map<Integer,String> columnToAxisMapping=entryByDataSource.getValue();\n      for (      Entry<Integer,String> entry : columnToAxisMapping.entrySet()) {\n        Integer colIndex=entry.getKey();\n        String axisName=entry.getValue();\n        Column<?> col=dataSource.getColumn(colIndex);\n        Double min=axisMin.get(axisName);\n        Double max=axisMax.get(axisName);\n        if (min == null || max == null) {\n          min=col.getStatistics(Statistics.MIN);\n          max=col.getStatistics(Statistics.MAX);\n        }\n else {\n          min=Math.min(min,col.getStatistics(Statistics.MIN));\n          max=Math.max(max,col.getStatistics(Statistics.MAX));\n        }\n        axisMin.put(axisName,min);\n        axisMax.put(axisName,max);\n      }\n    }\n  }\n}\n", "    public BCClass getFieldDeclarerBC() {\n        String type = getFieldDeclarerName();\n        if (type == null)\n            return null;\n        return getProject().loadClass(type, getClassLoader());\n    }\n", "\tpublic int addAllToContainedElements (Collection pContainedElementsList) {\n\t\tif (pContainedElementsList == null) {\n\t\t\tthrow new RuntimeException(\"Attempted to add null container to Namespace#ContainedElements!\");\n\t\t}\n\t\tint lInserted=0;\n\t\tfor(Iterator it = pContainedElementsList.iterator(); it.hasNext(); ) {\n\t\t\ttry {\n\t\t\t\tModelElement lContainedElements = (ModelElement)it.next();\t\t\t\t\n\t\t\t\taddContainedElements( lContainedElements );\n\t\t\t\t++lInserted;\n\t\t\t} catch(Throwable t) {\t\t\t\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\treturn lInserted;\n\t}\n", "private void sendResponse(String status,String mime,Properties header,InputStream data){\n  try {\n    if (status == null)     throw new Error(\"sendResponse(): Status can't be null.\");\n    OutputStream out=mySocket.getOutputStream();\n    PrintWriter pw=new PrintWriter(out);\n    pw.print(\"HTTP/1.0 \" + status + \" \\r\\n\");\n    if (mime != null)     pw.print(\"Content-Type: \" + mime + \"\\r\\n\");\n    if (header == null || header.getProperty(\"Date\") == null)     pw.print(\"Date: \" + gmtFrmt.format(new Date()) + \"\\r\\n\");\n    if (header != null) {\n      Enumeration<?> e=header.keys();\n      while (e.hasMoreElements()) {\n        String key=(String)e.nextElement();\n        String value=header.getProperty(key);\n        pw.print(key + \": \" + value+ \"\\r\\n\");\n      }\n    }\n    pw.print(\"\\r\\n\");\n    pw.flush();\n    if (data != null) {\n      int pending=data.available();\n      byte[] buff=new byte[theBufferSize];\n      while (pending > 0) {\n        int read=data.read(buff,0,((pending > theBufferSize) ? theBufferSize : pending));\n        if (read <= 0)         break;\n        out.write(buff,0,read);\n        pending-=read;\n      }\n    }\n    out.flush();\n    out.close();\n    if (data != null)     data.close();\n  }\n catch (  IOException ioe) {\n    try {\n      mySocket.close();\n    }\n catch (    Exception t) {\n    }\n  }\n}\n", "public static lbpersistentsessions[] get(nitro_service service, lbpersistentsessions_args args) throws Exception{\n\t\tlbpersistentsessions obj = new lbpersistentsessions();\n\t\toptions option = new options();\n\t\toption.set_args(nitro_util.object_to_string_withoutquotes(args));\n\t\tlbpersistentsessions[] response = (lbpersistentsessions[])obj.get_resources(service, option);\n\t\treturn response;\n\t}", "@SuppressWarnings(\"index\") // dependent: os[1] is legal when optionLength(os[0])==2\n  public static boolean validOptions(String[] @MinLen(1) [] options, DocErrorReporter reporter) {\n    boolean hasDocFile = false;\n    boolean hasOutFile = false;\n    boolean hasDestDir = false;\n    boolean hasFormat = false;\n    boolean inPlace = false;\n    String docFile = null;\n    String outFile = null;\n    for (int oi = 0; oi < options.length; oi++) {\n      String[] os = options[oi];\n      String opt = os[0].toLowerCase();\n      if (opt.equals(\"-docfile\")) {\n        if (hasDocFile) {\n          reporter.printError(\"-docfile option specified twice\");\n          return false;\n        }\n        docFile = os[1];\n        File f = new File(docFile);\n        if (!f.exists()) {\n          reporter.printError(\"-docfile file not found: \" + docFile);\n          return false;\n        }\n        hasDocFile = true;\n      }\n      if (opt.equals(\"-outfile\")) {\n        if (hasOutFile) {\n          reporter.printError(\"-outfile option specified twice\");\n          return false;\n        }\n        if (inPlace) {\n          reporter.printError(\"-i and -outfile can not be used at the same time\");\n          return false;\n        }\n        outFile = os[1];\n        hasOutFile = true;\n      }\n      if (opt.equals(\"-i\")) {\n        if (hasOutFile) {\n          reporter.printError(\"-i and -outfile can not be used at the same time\");\n          return false;\n        }\n        inPlace = true;\n      }\n      if (opt.equals(\"-format\")) {\n        if (hasFormat) {\n          reporter.printError(\"-format option specified twice\");\n          return false;\n        }\n        String format = os[1];\n        if (!format.equals(\"javadoc\") && !format.equals(\"html\")) {\n          reporter.printError(\"unrecognized output format: \" + format);\n          return false;\n        }\n        hasFormat = true;\n      }\n      if (opt.equals(\"-d\")) {\n        if (hasDestDir) {\n          reporter.printError(\"-d specified twice\");\n          return false;\n        }\n        hasDestDir = true;\n      }\n    }\n    if (docFile != null && outFile != null && outFile.equals(docFile)) {\n      reporter.printError(\"docfile must be different from outfile\");\n      return false;\n    }\n    if (inPlace && docFile == null) {\n      reporter.printError(\"-i supplied but -docfile was not\");\n      return false;\n    }\n    return true;\n  }", "public static byte[] insertAt(byte[] dest,byte[] src,int offset){\n  byte[] temp=new byte[dest.length + src.length - 1];\n  System.arraycopy(dest,0,temp,0,offset);\n  System.arraycopy(src,0,temp,offset,src.length);\n  System.arraycopy(dest,offset + 1,temp,src.length + offset,dest.length - offset - 1);\n  return temp;\n}\n", "    public JComponent removeElementAt(int index) {\n        JComponent compRemoved = null;\n        synchronized(componentList) {\n            checkIndex(index, componentList.size());\n            compRemoved = (JComponent)componentList.remove(index);\n        }\n        fireListDataEvent(new ListDataEvent(this,\n                                            ListDataEvent.INTERVAL_REMOVED,\n                                            index,\n                                            index));\n        return compRemoved;\n    }\n", "public void marshall(SMBFileShareInfo sMBFileShareInfo, ProtocolMarshaller protocolMarshaller) {\n\n        if (sMBFileShareInfo == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(sMBFileShareInfo.getFileShareARN(), FILESHAREARN_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getFileShareId(), FILESHAREID_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getFileShareStatus(), FILESHARESTATUS_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getGatewayARN(), GATEWAYARN_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getKMSEncrypted(), KMSENCRYPTED_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getKMSKey(), KMSKEY_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getPath(), PATH_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getRole(), ROLE_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getLocationARN(), LOCATIONARN_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getDefaultStorageClass(), DEFAULTSTORAGECLASS_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getObjectACL(), OBJECTACL_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getReadOnly(), READONLY_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getGuessMIMETypeEnabled(), GUESSMIMETYPEENABLED_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getRequesterPays(), REQUESTERPAYS_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getSMBACLEnabled(), SMBACLENABLED_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getValidUserList(), VALIDUSERLIST_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getInvalidUserList(), INVALIDUSERLIST_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getAuthentication(), AUTHENTICATION_BINDING);\n            protocolMarshaller.marshall(sMBFileShareInfo.getTags(), TAGS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public synchronized String format(Date inDate){\n  return format(inDate.getTime());\n}\n", "public void removeKeyListener(KeyListener listener) {\r\n\t\tkeyListeners.remove(listener);\r\n\t\tkeyListenersToAdd.remove(listener);\r\n\t\t\r\n\t\tif (!mouseListeners.contains(listener) && !controllerListeners.contains(listener)) {\r\n\t\t\tallListeners.remove(listener);\r\n\t\t}\r\n\t}", "protected List<GroovyRowResult> asList(String sql, ResultSet rs, Closure metaClosure) throws SQLException {\n        return asList(sql, rs, 0, 0, metaClosure);\n    }", "public long getTimestamp()\n    {\n        while (true)\n        {\n            long current = System.currentTimeMillis() * 1000;\n            long last = lastTimestampMicros.get();\n            long tstamp = last >= current ? last + 1 : current;\n            if (lastTimestampMicros.compareAndSet(last, tstamp))\n                return tstamp;\n        }\n    }", "public boolean intersects(Polygon2D polygon){\n  for (  Point2D p : polygon.points)   if (contains(p))   return true;\n  for (  Point2D p : points)   if (polygon.contains(p))   return true;\n  return false;\n}\n", "private static String buildHeader(){\n  if (header == null) {\n    StringBuilder strb=new StringBuilder();\n    strb.append(LEFT_BRACE);\n    strb.append(SELENIUM_VERSION_KEY);\n    strb.append(COLON);\n    strb.append(SELENIUM_VERSION_VALUE);\n    strb.append(COMMA);\n    strb.append(FORMAT_VERSION_KEY);\n    strb.append(COLON);\n    strb.append(FORMAT_VERSION_VALUE);\n    strb.append(COMMA);\n    strb.append(STEPS_KEY);\n    strb.append(COLON);\n    strb.append(LEFT_SQUARE_BRACKET);\n    header=strb.toString();\n  }\n  return header;\n}\n", "ParseRelation(JSONObject jsonObject,ParseDecoder decoder){\n  this.parent=null;\n  this.parentObjectId=null;\n  this.parentClassName=null;\n  this.key=null;\n  this.targetClass=jsonObject.optString(\"className\",null);\n  JSONArray objectsArray=jsonObject.optJSONArray(\"objects\");\n  if (objectsArray != null) {\n    for (int i=0; i < objectsArray.length(); ++i) {\n      knownObjects.add((ParseObject)decoder.decode(objectsArray.optJSONObject(i)));\n    }\n  }\n}\n", "public void fixConversion(String rep){\n  if (sHashCode != rep.hashCode())   throw new RuntimeException(\"bad use of fixConversion!\");\n  if (s == null) {\n    s=rep;\n  }\n}\n", "public static void main(String[] args) throws LoginFailedException,\n\t\t\tIOException, MediaWikiApiErrorException {\n\t\tExampleHelpers.configureLogging();\n\t\tprintDocumentation();\n\n\t\tSetLabelsForNumbersBot bot = new SetLabelsForNumbersBot();\n\t\tExampleHelpers.processEntitiesFromWikidataDump(bot);\n\t\tbot.finish();\n\n\t\tSystem.out.println(\"*** Done.\");\n\t}", "@Trivial // traced by caller\n    public static <U> CompletableFuture<U> supplyAsync(Supplier<U> action, Executor executor) {\n        // Reject ManagedTask so that we have the flexibility to decide later how to handle ManagedTaskListener and execution properties\n        if (action instanceof ManagedTask)\n            throw new IllegalArgumentException(ManagedTask.class.getName());\n\n        FutureRefExecutor futureExecutor = supportsAsync(executor);\n\n        ThreadContextDescriptor contextDescriptor;\n        if (action instanceof ContextualSupplier) {\n            ContextualSupplier<U> s = (ContextualSupplier<U>) action;\n            contextDescriptor = s.getContextDescriptor();\n            action = s.getAction();\n        } else if (executor instanceof WSManagedExecutorService) {\n            WSContextService contextSvc = ((WSManagedExecutorService) executor).getContextService();\n            contextDescriptor = contextSvc.captureThreadContext(XPROPS_SUSPEND_TRAN);\n        } else {\n            contextDescriptor = null;\n        }\n\n        if (JAVA8) {\n            if (contextDescriptor != null)\n                action = new ContextualSupplier<U>(contextDescriptor, action);\n            CompletableFuture<U> completableFuture = CompletableFuture.supplyAsync(action, futureExecutor == null ? executor : futureExecutor);\n            return new ManagedCompletableFuture<U>(completableFuture, executor, futureExecutor);\n        } else {\n            ManagedCompletableFuture<U> completableFuture = new ManagedCompletableFuture<U>(executor, futureExecutor);\n            Runnable task = new ContextualSupplierAction<U>(contextDescriptor, action, completableFuture, true);\n            (futureExecutor == null ? executor : futureExecutor).execute(task);\n            return completableFuture;\n        }\n    }", "public Observable<DeletedStorageBundle> deleteStorageAccountAsync(String vaultBaseUrl, String storageAccountName) {\n        return deleteStorageAccountWithServiceResponseAsync(vaultBaseUrl, storageAccountName).map(new Func1<ServiceResponse<DeletedStorageBundle>, DeletedStorageBundle>() {\n            @Override\n            public DeletedStorageBundle call(ServiceResponse<DeletedStorageBundle> response) {\n                return response.body();\n            }\n        });\n    }", "public static boolean cholL( DMatrix2x2 A ) {\n\n        A.a11 = Math.sqrt(A.a11);\n        A.a12 = 0;\n        A.a21 = (A.a21)/A.a11;\n        A.a22 = Math.sqrt(A.a22-A.a21*A.a21);\n        return !UtilEjml.isUncountable(A.a22);\n    }", "public void load(Persistable persistable, int id) throws FloggyException {\n\t\tload(persistable, id, false);\n\t}", "private void startSpinning()\n    {\n        assert get() == Work.WORKING;\n        pool.spinningCount.incrementAndGet();\n        set(Work.SPINNING);\n    }", "public Dimension maximumLayoutSize(Container target){\n  Dimension rd, mbd;\n  Insets i=getInsets();\n  if (menuBar != null && menuBar.isVisible()) {\n    mbd=menuBar.getMaximumSize();\n  }\n else {\n    mbd=new Dimension(0,0);\n  }\n  if (contentPane != null) {\n    rd=contentPane.getMaximumSize();\n  }\n else {\n    rd=new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE - i.top - i.bottom- mbd.height- 1);\n  }\n  return new Dimension(Math.min(rd.width,mbd.width) + i.left + i.right,rd.height + mbd.height + i.top+ i.bottom);\n}\n", "public static AnyMSeq<Long> fromRangeLong(final long start,final long end){\n  return AnyM.fromStream(ReactiveSeq.rangeLong(start,end));\n}", "  public void onProviderDisabled(String provider) {\n    Log.i(TAG, \"Provider \" + provider + \" disabled.\");\n    nativeProviderError(true, nativeObject);\n  }\n", "    public IDataBag getBag() {\n        IDataBag bag = (IDataBag) getModel().getData();\n        if (bag == null) {\n            bag = new DataBag(null);\n            ((DefaultCompoundModel) getModel()).setData(bag);\n        }\n        return bag;\n    }\n", "private static void checkTempDirs(String[] tmpDirs) throws IOException {\n\t\tfor (String dir : tmpDirs) {\n\t\t\tif (dir != null && !dir.equals(\"\")) {\n\t\t\t\tFile file = new File(dir);\n\t\t\t\tif (!file.exists()) {\n\t\t\t\t\tif (!file.mkdirs()) {\n\t\t\t\t\t\tthrow new IOException(\"Temporary file directory \" + file.getAbsolutePath() + \" does not exist and could not be created.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!file.isDirectory()) {\n\t\t\t\t\tthrow new IOException(\"Temporary file directory \" + file.getAbsolutePath() + \" is not a directory.\");\n\t\t\t\t}\n\t\t\t\tif (!file.canWrite()) {\n\t\t\t\t\tthrow new IOException(\"Temporary file directory \" + file.getAbsolutePath() + \" is not writable.\");\n\t\t\t\t}\n\n\t\t\t\tif (LOG.isInfoEnabled()) {\n\t\t\t\t\tlong totalSpaceGb = file.getTotalSpace() >> 30;\n\t\t\t\t\tlong usableSpaceGb = file.getUsableSpace() >> 30;\n\t\t\t\t\tdouble usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100;\n\t\t\t\t\tString path = file.getAbsolutePath();\n\t\t\t\t\tLOG.info(String.format(\"Temporary file directory '%s': total %d GB, \" + \"usable %d GB (%.2f%% usable)\",\n\t\t\t\t\t\tpath, totalSpaceGb, usableSpaceGb, usablePercentage));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new IllegalArgumentException(\"Temporary file directory #$id is null.\");\n\t\t\t}\n\t\t}\n\t}", "\tprivate void untrack(Object e) {\n\t\tif (e instanceof Changeable) {\n\t\t\t((Changeable)e).features().removeChangeableListener(this);\n\t\t}\n\t}\n", "public void marshall(DeactivateUserRequest deactivateUserRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (deactivateUserRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(deactivateUserRequest.getUserId(), USERID_BINDING);\n            protocolMarshaller.marshall(deactivateUserRequest.getAuthenticationToken(), AUTHENTICATIONTOKEN_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public OvhResetPhoneInfo billingAccount_line_serviceName_phone_resetConfig_POST(String billingAccount, String serviceName, String ip) throws IOException {\n\t\tString qPath = \"/telephony/{billingAccount}/line/{serviceName}/phone/resetConfig\";\n\t\tStringBuilder sb = path(qPath, billingAccount, serviceName);\n\t\tHashMap<String, Object>o = new HashMap<String, Object>();\n\t\taddBody(o, \"ip\", ip);\n\t\tString resp = exec(qPath, \"POST\", sb.toString(), o);\n\t\treturn convertTo(resp, OvhResetPhoneInfo.class);\n\t}", "@Override\n    public String encode() throws IOException {\n        FastStringWriter fsw = new FastStringWriter();\n\n        try {\n            fsw.write(super.encode());\n            ChartUtils.writeDataValue(fsw, \"labels\", this.labels, true);\n            ChartUtils.writeDataValue(fsw, \"min\", this.min, true);\n            ChartUtils.writeDataValue(fsw, \"max\", this.max, true);\n        }\n        finally {\n            fsw.close();\n        }\n\n        return fsw.toString();\n    }", "\tpublic boolean isSet(final String key) {\n\t\tif (key == null) {\n\t\t\tthrow new IllegalArgumentException(OptionSet.CLASS\n\t\t\t\t\t+ \": key may not be null\");\n\t\t}\n\t\tif (!keys.containsKey(key)) {\n\t\t\tthrow new IllegalArgumentException(OptionSet.CLASS + \": unknown key: \"\n\t\t\t\t\t+ key);\n\t\t}\n\t\treturn (keys.get(key)).getResultCount() > 0 ? true : false;\n\t}\n", "    public void handleDoubleClick(IStructuredSelection argSelection) {\n        _datasetEditorAction.update(argSelection);\n        Object element = argSelection.getFirstElement();\n        TreeViewer viewer = _navigator.getViewer();\n        \n        if (viewer.isExpandable(element)) {\n            // do not expand on double-click for dataset editor\n            // and code elements representing files\n            if (!_datasetEditorAction.isEnabled() &&\n                    !(element instanceof IEslinkCodeModel)) {\n                viewer.setExpandedState(element, !viewer.getExpandedState(element));\n            }\n        }\n    }\n", "    private void executeSetUpBizDoc() {\n        HttpURLConnection connection =\n                getHttpURLConnection(setUpBizDocFileName, false, false);\n        getServletResponse(connection, null);\n    }\n", "\tprivate Map arrayToMap(Object[] array) {\n\t\tMap map = new HashMap();\n\t\tif (array != null) {\n\t\t\tfor (int i = 0; i < array.length; ++i) {\n\t\t\t\tmap.put(Integer.toString(i), array[i]);\n\t\t\t}\n\t\t}\n\t\treturn map;\n\t}\n", "    public boolean updatesAreDetected(int type) throws SQLException {\n        try {\n            return m_metaData.updatesAreDetected(type);\n        } catch (SQLException e) {\n            throw m_conn.wrap(e);\n        }\n    }\n", "@Override\n    public StartDocumentClassificationJobResult startDocumentClassificationJob(StartDocumentClassificationJobRequest request) {\n        request = beforeClientExecution(request);\n        return executeStartDocumentClassificationJob(request);\n    }", "    protected CFGBuilder createCFGBuilder(TypeSystem ts, FlowGraph g) {\n        return new CFGBuilder(ts, g, this);\n    }\n", "public static boolean implementsZeroArgMethod(ClassNode classNode,String methodName){\n  return implementsMethod(classNode,methodName,new Class[0]);\n}\n", "\t\tpublic void ok() {\n\t\t\t// get the values from the controls and set them in the static properties\n\t\t\t_readSQLJavaObject = _showSQLJavaObjectChk.isSelected();\n\t\t\tDTProperties.put(\n\t\t\t\tthisClassName,\n\t\t\t\t\"readSQLJavaObject\", Boolean.valueOf(_readSQLJavaObject).toString());\n\t\t}\n", "static public Identifier toIdentifier(Expression e){\n  StringBuffer buf=new StringBuffer();\n  while (e.op == FIELD) {\n    FieldExpression fe=(FieldExpression)e;\n    if (fe.id == idThis || fe.id == idClass) {\n      return null;\n    }\n    buf.insert(0,fe.id);\n    buf.insert(0,'.');\n    e=fe.right;\n  }\n  if (e.op != IDENT) {\n    return null;\n  }\n  buf.insert(0,((IdentifierExpression)e).id);\n  return Identifier.lookup(buf.toString());\n}\n", "public void removeListener ( final IBookmarkListener listener ) { m_listeners . removeListener ( listener ) ; }", "    public Ship getShipById(int fleetNumber, String shipId){\n        Fleet fleet = null;\n        \n        // Enumerate through the Fleets and find the Fleet\n        // with the specified number, then find the\n        // specified Ship.\n        for(Enumeration fleetEnum = fleets.elements(); fleetEnum.hasMoreElements();){\n            fleet = (Fleet) (fleetEnum.nextElement());\n            if(fleet.fleetNumber() == fleetNumber){\n                return fleet.getShipById(shipId);\n            }\n        }\n        return null;\n    }\n", "public static void error ( final String message ) { if ( JQuantLib . logger != null ) { JQuantLib . logger . error ( message ) ; } else { System . err . printf ( STR_ , message ) ; } }", "    public Field getFieldByName(final String fieldName) {\n        Component found = getComponentByName(getContainer(),fieldName);\n        if (found != null)\n            return getFieldByComponent((JComponent)found);\n        else\n            return null;\n ", "protected GroovyScriptEngine createGroovyScriptEngine ( ) { return new GroovyScriptEngine ( this ) ; }", "\tprivate void signalRecipient(Thread recipient) {\n\t\t// System.err.println(\"FIRING \" + toString() + \"!\");\n\t\trecipient.interrupt();\n\t}\n", "public void schedule(Runnable command,long delay,long tolerance,TimeUnit unit){\n  if (delay < 0 || tolerance < 0) {\n    throw new IllegalArgumentException();\n  }\n  long triggerPoint=clock.now() + unit.toMillis(delay);\n  scheduledTasks.add(new ScheduledRun", "public static MethodAnnotation fromXMethod ( XMethod xmethod ) { return fromForeignMethod ( xmethod . getClassName ( ) , xmethod . getName ( ) , xmethod . getSignature ( ) , xmethod . isStatic ( ) ) ; }", "public static final String byteToHexString(byte a){\n  StringBuffer sb=new StringBuffer(2);\n  sb.append(NIBBLE[(a >>> 4) & 0xf]);\n  sb.append(NIBBLE[a & 0xf]);\n  return sb.toString();\n}\n", "private void queue(Command command) {\n\t\tsynchronized(this) {\n\t\t\tif (command.isResume()) paused = false;\n\t\t\tif (!paused) addLast(command);\t\t\t\t\n\t\t}\n\t\tsem.V();\n\t}", "public void delete(SSOToken token,String objName) throws SMSException, SSOException {\n  if ((objName == null) || (objName.length() == 0)) {\n    throw new IllegalArgumentException(\"SMSFlatFileObject.delete: object name is null or empty.\");\n  }\n  String objKey=objName.toLowerCase();\n  String filepath=null;\n  mRWLock.readRequest();\n  try {\n    filepath=mNameMap.getProperty(objKey);\n    if ((filepath == null) && mDebug.messageEnabled()) {\n      mDebug.message(\"SMSFlatFileObject.delete: \" + objName + \": object not found.\");\n    }\n  }\n  finally {\n    mRWLock.readDone();\n  }\n  if (filepath != null) {\n    mRWLock.writeRequest();\n    try {\n      filepath=mNameMap.getProperty(objKey);\n      if (filepath == null) {\n        if (mDebug.messageEnabled()) {\n          mDebug.message(\"SMSFlatFileObject.delete: \" + objName + \": object not found.\");\n        }\n      }\n else {\n        File filehandle=new File(filepath);\n        File parentDir=filehandle.getParentFile();\n        deleteDir(parentDir);\n        objName=objName.toLowerCase();\n        Enumeration keysEnum=mNameMap.keys();\n        while (keysEnum.hasMoreElements()) {\n          String key=(String)keysEnum.nextElement();\n          if (key.endsWith(objName)) {\n            mNameMap.remove(key);\n          }\n        }\n        saveProperties(mNameMap,mNameMapHandle,null);\n      }\n    }\n  finally {\n      mRWLock.writeDone();\n    }\n  }\n}\n", "public static void debug(String msg) {\n        if (debugEnabled && !quietMode) {\n            System.out.println(PREFIX + msg);\n        }\n    }", "public void marshall(CreateExportJobRequest createExportJobRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (createExportJobRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(createExportJobRequest.getApplicationId(), APPLICATIONID_BINDING);\n            protocolMarshaller.marshall(createExportJobRequest.getExportJobRequest(), EXPORTJOBREQUEST_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "    public double getRSqr(int r, int c) {\n        int i = getIndex(r, c);\n        if (i > -1) {\n            return (double) rsqr[i];\n        } else {\n            return Double.NaN;\n        }\n    }\n", "public static void info ( final String string , final Object ... args ) { if ( log . isLoggable ( Level . INFO ) ) { log . info ( String . format ( string , args ) ) ; } }", "@SuppressWarnings(\"nls\") private void writeUnclippedShape(Shape s){\n  if (s instanceof Line2D) {\n    Line2D l=(Line2D)s;\n    double x1=l.getX1();\n    double y1=l.getY1();\n    double x2=l.getX2();\n    double y2=l.getY2();\n    write(\"<line x1=\\\"\",x1,\"\\\" y1=\\\"\",y1,\"\\\" x2=\\\"\",x2,\"\\\" y2=\\\"\",y2,\"\\\" \");\n  }\n else   if (s instanceof Rectangle2D) {\n    Rectangle2D r=(Rectangle2D)s;\n    double x=r.getX();\n    double y=r.getY();\n    double width=r.getWidth();\n    double height=r.getHeight();\n    write(\"<rect x=\\\"\",x,\"\\\" y=\\\"\",y,\"\\\" width=\\\"\",width,\"\\\" height=\\\"\",height,\"\\\" \");\n  }\n else   if (s instanceof RoundRectangle2D) {\n    RoundRectangle2D r=(RoundRectangle2D)s;\n    double x=r.getX();\n    double y=r.getY();\n    double width=r.getWidth();\n    double height=r.getHeight();\n    double arcWidth=r.getArcWidth();\n    double arcHeight=r.getArcHeight();\n    write(\"<rect x=\\\"\",x,\"\\\" y=\\\"\",y,\"\\\" width=\\\"\",width,\"\\\" height=\\\"\",height,\"\\\" rx=\\\"\",arcWidth,\"\\\" ry=\\\"\",arcHeight,\"\\\" \");\n  }\n else   if (s instanceof Ellipse2D) {\n    Ellipse2D e=(Ellipse2D)s;\n    double x=e.getX();\n    double y=e.getY();\n    double rx=e.getWidth() / 2.0;\n    double ry=e.getHeight() / 2.0;\n    write(\"<ellipse cx=\\\"\",x + rx,\"\\\" cy=\\\"\",y + ry,\"\\\" rx=\\\"\",rx,\"\\\" ry=\\\"\",ry,\"\\\" \");\n  }\n else {\n    write(\"<path d=\\\"\");\n    writePath(s);\n    write(\"\\\" \");\n  }\n}\n", "public boolean matches(Function function,String id){\n  return mFunction == function && mID != null && id != null && id.matches(mID.replace(\"*\",\".?\"));\n}\n", "public Bookmark addBookmark(Bookmark bookmark){\n  Assert.notNull(bookmark);\n  bookmarks.add(bookmark);\n  bookmark.setUser(this);\n  return bookmark;\n}\n", "public ResourceCache ( ) { this ( WebConfiguration . getInstance ( ) ) ; }", "public void removeTask(Future task){\n  taskSet.remove(task);\n}\n", "    public double evaluate(double x, double epsilon) throws MathException {\n        return evaluate(x, epsilon, Integer.MAX_VALUE);\n    }\n", "private Map<String,String> checkIPVersion(String range){\n  Map<String,String> details=new HashMap<String,String>(3);\n  StringTokenizer st;\n  String ipStart, ipEnd;\n  if (range.contains(\"-\")) {\n    debug.message(\"IPRange found - \");\n    st=new StringTokenizer(range,\"-\");\n    if (st.countTokens() != 2) {\n      throw new IllegalArgumentException(range + \" is not a valid range\");\n    }\n    ipStart=st.nextToken();\n    ipEnd=st.nextToken();\n    if (ValidateIPaddress.isIPv4(ipStart) && ValidateIPaddress.isIPv4(ipEnd)) {\n      details.put(IP_Version,IP_V4);\n      details.put(IP_TYPE,\"Range\");\n    }\n else     if (ValidateIPaddress.isIPv6(ipStart) && ValidateIPaddress.isIPv6(ipEnd)) {\n      details.put(IP_Version,IP_V6);\n      details.put(IP_TYPE,\"Range\");\n      details.put(IP_START,ipStart);\n      details.put(IP_END,ipEnd);\n    }\n else {\n      throw new IllegalArgumentException(range + \" is not a valid range\");\n    }\n  }\n else   if (range.contains(\"/\")) {\n    debug.message(\"IPRange found / \");\n    String cidr;\n    st=new StringTokenizer(range,\"/\");\n    if (st.countTokens() != 2) {\n      throw new IllegalArgumentException(\"Invalid CIDR found.\");\n    }\n    ipStart=st.nextToken();\n    cidr=st.nextToken();\n    if (ValidateIPaddress.isIPv4(ipStart) && (Integer.parseInt(cidr) >= 0) && (Integer.parseInt(cidr) <= 32)) {\n      details.put(IP_Version,IP_V4);\n      details.put(IP_TYPE,\"CIDR\");\n    }\n else     if (ValidateIPaddress.isIPv6(ipStart) && (Integer.parseInt(cidr) >= 0) && (Integer.parseInt(cidr) <= 128)) {\n      details.put(IP_Version,IP_V6);\n      details.put(IP_TYPE,\"CIDR\");\n    }\n else {\n      throw new IllegalArgumentException(ipStart + \" is not a valid format for CIDR\");\n    }\n  }\n else {\n    debug.message(\"IPRange found single IP\");\n    if (ValidateIPaddress.isIPv4(range)) {\n      details.put(IP_Version,IP_V4);\n      details.put(IP_TYPE,\"Single\");\n    }\n else     if (ValidateIPaddress.isIPv6(range)) {\n      details.put(IP_Version,IP_V6);\n      details.put(IP_TYPE,\"Single\");\n    }\n else {\n      throw new IllegalArgumentException(range + \" is not a valid IP\");\n    }\n  }\n  return details;\n}\n", "private void updateLargestChunkSoFarSize(@NotNull ByteBuffer outBuffer) {\n        int sizeOfThisChunk = (int) (outBuffer.limit() - limitOfLast);\n        if (largestChunkSoFar < sizeOfThisChunk)\n            largestChunkSoFar = sizeOfThisChunk;\n\n        limitOfLast = outBuffer.limit();\n    }", "public static boolean containsIgnoreCase(String[] array,String value){\n  for (  String str : array) {\n    if (value == null && str == null) {\n      return true;\n    }\n    if (value != null && value.equalsIgnoreCase(str)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "public void marshall(DescribeCacheRequest describeCacheRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (describeCacheRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(describeCacheRequest.getGatewayARN(), GATEWAYARN_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "        private void addEndThread(Thread thread) {\n            if (thread == null) {\n                throw new NullPointerException(\"thread == null\");\n            }\n            Integer threadId = threadIds.remove(thread);\n            if (threadId == null) {\n                throw new IllegalArgumentException(\"Unknown thread \" + thread);\n            }\n            HprofData.ThreadEvent event = HprofData.ThreadEvent.end(threadId);\n            hprofData.addThreadEvent(event);\n        }\n", "private void configDragViewHelper ( ) { dragHelper = ViewDragHelper . create ( this , SENSITIVITY , new DraggerHelperCallback ( this , dragView , draggerListener ) ) ; }", "final long logNodeStart(long parentIndex,Move m,int alpha,int beta,int ply,int depth){\n  bb.putInt(0,(int)-1);\n  bb.putInt(4,(int)parentIndex);\n  bb.putShort(8,(short)(m.from + (m.to << 6) + (m.promoteTo << 12)));\n  bb.putShort(10,(short)alpha);\n  bb.putShort(12,(short)beta);\n  bb.put(14,(byte)ply);\n  bb.put(15,(byte)depth);\n  try {\n    bos.write(bb.array());\n  }\n catch (  IOException e) {\n    throw new RuntimeException();\n  }\n  return nextIndex++;\n}\n", "private static byte[] lmResponse(byte[] hash,byte[] challenge) throws Exception {\n  byte[] keyBytes=new byte[21];\n  System.arraycopy(hash,0,keyBytes,0,16);\n  Key lowKey=createDESKey(keyBytes,0);\n  Key middleKey=createDESKey(keyBytes,7);\n  Key highKey=createDESKey(keyBytes,14);\n  Cipher des=Cipher.getInstance(\"DES/ECB/NoPadding\");\n  des.init(Cipher.ENCRYPT_MODE,lowKey);\n  byte[] lowResponse=des.doFinal(challenge);\n  des.init(Cipher.ENCRYPT_MODE,middleKey);\n  byte[] middleResponse=des.doFinal(challenge);\n  des.init(Cipher.ENCRYPT_MODE,highKey);\n  byte[] highResponse=des.doFinal(challenge);\n  byte[] lmResponse=new byte[24];\n  System.arraycopy(lowResponse,0,lmResponse,0,8);\n  System.arraycopy(middleResponse,0,lmResponse,8,8);\n  System.arraycopy(highResponse,0,lmResponse,16,8);\n  return lmResponse;\n}\n", "public void scheduleExpirationTask() {\n        if (nodeEngine.getLocalMember().isLiteMember() || scheduled.get()\n                || !scheduled.compareAndSet(false, true)) {\n            return;\n        }\n\n        scheduledExpirationTask =\n                globalTaskScheduler.scheduleWithRepetition(task, taskPeriodSeconds,\n                        taskPeriodSeconds, SECONDS);\n\n        scheduledOneTime.set(true);\n    }", "\tprivate int calculateCrossings(JGraphHierarchyModel model) {\n\t\t// The intra-rank order of cells are stored within the temp variables\n\t\t// on cells\n\t\tint numRanks = model.ranks.size();\n\t\tint totalCrossings = 0;\n\t\tfor (int i = 1; i < numRanks; i++) {\n\t\t\ttotalCrossings += calculateRankCrossing(i, model);\n\t\t}\n\n\t\treturn totalCrossings;\n\t}\n", "public <T> DynamicJdbcMapper<T> newMapper(final Class<T> target) {\n\t\treturn newMapper((Type) target);\n\t}", "\tprivate void drawWidget(WindowPanel widget, int colonne){\n\t\tcolonne--;\n\t\tverticalPanelList.get(colonne).remove(spacerLabelList.get(colonne));\n\t\tboundaryPanel.add(widget, 70, 30);\n\t\tverticalPanelList.get(colonne).add(widget);\n\t\tverticalPanelList.get(colonne).add(spacerLabelList.get(colonne));\n\t}\n", "public void marshall(PutCorsPolicyRequest putCorsPolicyRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (putCorsPolicyRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(putCorsPolicyRequest.getContainerName(), CONTAINERNAME_BINDING);\n            protocolMarshaller.marshall(putCorsPolicyRequest.getCorsPolicy(), CORSPOLICY_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "  public boolean isHasContents() {\n    return hasContents;\n  }\n", "public PdfLayoutEventStripper ( ) throws IOException { super ( ResourceLoader . loadProperties ( STR_ , BOOL_ ) ) ; }", "void iterateSelected ( final INodeCallback < NodeType > callback ) ;", "public JobGroupWrapper ( JsonValue map ) { name = map . get ( STR_ ) . asString ( ) ; if ( map . get ( STR_ ) . isNotNull ( ) ) { paused = map . get ( STR_ ) . asBoolean ( ) ; } if ( map . get ( STR_ ) . isNotNull ( ) ) { jobs = map . get ( STR_ ) . asList ( String . class ) ; } else { jobs = new ArrayList < > ( ) ; } revision = map . get ( STR_ ) . asString ( ) ; }", "private void queueEvents ( ) { for ( int i = NUM_ ; i < newNotifies . length ; i ++ ) { if ( ! newNotifies [ i ] . isEmpty ( ) ) { taskerEvent [ i ] . addAll ( newNotifies [ i ] ) ; newNotifies [ i ] . clear ( ) ; } } }", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "\tpublic void setType(String type) {\n\t\tPreconditions.checkNotNull(type, \"type\");\n\t\tthis.type = type;\n\t}\n", "    public void logout() {\n\tSecurityManager sm = System.getSecurityManager();\n\tif (sm != null) sm.checkPermission(new AdminPermission(\"user.login\"));\n\n\tif (player != null) {\n\t    player.dispose();\n\t}\n\tthis.loggedIn = false;\n\tonlineTime += System.currentTimeMillis() - lastLogin;\n\tsave();\n\tUserManagement.getInstance().logout(this);\n    }\n", "public abstract DynamicMBeanHelper createHelper ( ) throws Exception ;", "public ArrayRealVector(RealVector v1,ArrayRealVector v2){\n  final int l1=v1.getDimension();\n  final int l2=v2.data.length;\n  data=new double[l1 + l2];\n  for (int i=0; i < l1; ++i) {\n    data[i]=v1.getEntry(i);\n  }\n  System.arraycopy(v2.data,0,data,l1,l2);\n}\n", "public static Number parseDecimal ( String text ) { text = text . replace ( STR_ , STR_ ) ; int length = text . length ( ) ; char type = STR_ ; if ( isNumericTypeSpecifier ( text . charAt ( length - NUM_ ) , BOOL_ ) ) { type = Character . toLowerCase ( text . charAt ( length - NUM_ ) ) ; text = text . substring ( NUM_ , length - NUM_ ) ; length -= NUM_ ; } BigDecimal value = new BigDecimal ( text ) ; switch ( type ) { case STR_ : if ( value . compareTo ( MAX_FLOAT ) <= NUM_ && value . compareTo ( MIN_FLOAT ) >= NUM_ ) { return new Float ( text ) ; } throw new NumberFormatException ( STR_ ) ; case STR_ : if ( value . compareTo ( MAX_DOUBLE ) <= NUM_ && value . compareTo ( MIN_DOUBLE ) >= NUM_ ) { return new Double ( text ) ; } throw new NumberFormatException ( STR_ ) ; case STR_ : default : return value ; } }", "  public void restart() {\n\t  if(bucketScan!=null ){\n\t\t  bucketScan.close();\n\t  }\n\t  bucketScan=hashIndex.openScan();\n  }\n", "public static void add3DCoordinates1(IAtomContainer atomContainer) {\n        // atoms without coordinates\n        IAtomContainer noCoords = atomContainer.getBuilder().newInstance(IAtomContainer.class);\n        // get vector of possible referenceAtoms?\n   ", "protected void updateHitBreakpoints ( final BreakpointAddress address ) { Preconditions . checkNotNull ( address , STR_ ) ; final BreakpointManager manager = debugger . getBreakpointManager ( ) ; for ( final Breakpoint breakpoint : manager . getBreakpoint", "public TimeOfDay ( int hour , int minute ) { this . hour = hour ; this . minute = minute ; this . second = NUM_ ; validate ( ) ; }", "    public void notifyTaskDone(int result){\n\tsynchronized(this) {\n\t    this.result = result;\n\t    SwingUtilities.invokeLater(new Runnable() {\n\t\tpublic void run() {\n\t\tsetVisible(false);\n\t\tcloseButton.setEnabled(true);\n\t\t}});\n\t}\n    }\n", "public static WebSocketFrame createContinuationFrame ( String payload ) { return createContinuationFrame ( ) . setPayload ( payload ) ; }", "    private void processTaskforceMissions(TurnResult turnresult) {\n\n        MissionStatus mstatus;\n        \n        for (Taskforce tf : taskforces) {\n            \n            if (!(tf.isOnMission()))\n                continue;\n            \n            Syst", "public static void main(String argv[]) throws Exception {   \n    DnsMonitorSecurityManager.setTheManager();\n    AvatarShell shell = null;\n    try {\n      shell = new AvatarShell();\n    } catch (RPC.VersionMismatch v) {\n      System.err.println(\"Version Mismatch between client and server\"\n          + \"... command aborted.\");\n      System.exit(-1);\n    } catch (IOException e) {\n      System.err.println(\"Bad connection to AvatarNode. command aborted.\");\n      System.exit(-1);\n    }\n\n    int res;\n    try {\n      res = ToolRunner.run(shell, argv);\n    } finally {\n      shell.close();\n    }\n    System.exit(res);\n  }", "public int getIncrement () {\n\tcheckWidget ();\n\tGtkAdjustment adjustment = new GtkAdjustment ();\n\tOS.memmove (adjustment, handle);\n\treturn (int) adjustment.step_increment;\n}\n", "public void addListener ( Listener < ComplexBuffer > listener ) { synchronized ( mComplexBufferBroadcaster ) { mComplexBufferBroadcaster . addListener ( listener ) ; if ( mBufferProcessor == null || ! mBufferProcessor . isRunning ( ) ) { mBufferProcessor ", "public void execute(final CCTask task, final List<File> sources, final Map<String, TargetInfo> targets,\n      final TargetInfo linkTarget) {\n    try {\n      this.projectWriter.writeProject(this.outFile, task, this, sources, targets, linkTarget);\n    } catch (final BuildException ex) {\n      if (this.failOnError) {\n        throw ex;\n      } else {\n        task.log(ex.toString());\n      }\n    } catch (final Exception ex) {\n      if (this.failOnError) {\n        throw new BuildException(ex);\n      } else {\n        task.log(ex.toString());\n      }\n    }\n  }", "    public void setRateAveragingSamples (final int samples) {\n        m_encoder.writeTimerConfig_AverageSize(samples);\n    } // setRateAveragingSamples()\n", "    public ExtendedIterator listComments( String lang ) {\n        checkProfile( getProfile().COMMENT(), \"COMMENT\" );\n        return WrappedIterator.create( listProperties( getProfile().COMMENT() ) )\n               .filterKeep( new LangTagFilter( lang ) )\n               .mapWith( new ObjectMapper() );\n    }\n", "\tpublic int intValue() {\n\t\ttry {\n\t\t\treturn ((Integer) item.toJavaObject(Integer.class)).intValue();\n\t\t} catch (XPathException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t}\n", "private void createGui ( final List < INaviModule > modules ) { setLayout ( new BorderLayout ( ) ) ; final JTextArea field = new JTextArea ( STR_ ) ; field . setEditable ( BOOL_ ) ; add ( field , BorderLayout . NORTH ) ; m_table = new JTable ( new CAddres", "boolean isAccessorReadable ( ) ;", "void endPackageDefinition ( String pkgName ) ;", "public Builder rotate ( float degrees ) { rotationDegrees = degrees ; return this ; }", "public UrlSpaceFactoryBean ( String url , Map < String , Object > params ) { this ( url ) ; setParameters ( params ) ; }", "final public boolean equalsIgnoreCase(final MutableString s){\n  if (this == s)   return true;\n  if (s == null)   return false;\n  final int n=length();\n  if (n == s.length()) {\n    final char[] a1=array;\n    final char[] a2=s.array;\n    for (int i=0; i < n; i++) {\n      if (a1[i] != a2[i] && Character.toLowerCase(a1[i]) != Character.toLowerCase(a2[i]) && Character.toUpperCase(a1[i]) != Character.toUpperCase(a2[i]))       return false;\n    }\n    return true;\n  }\n  return false;\n}\n", "protected boolean isBlockTag(AttributeSet attr){\n  Object o=attr.getAttribute(StyleConstants.NameAttribute);\n  if (o instanceof HTML.Tag) {\n    HTML.Tag name=(HTML.Tag)o;\n    return name.isBlock();\n  }\n  return false;\n}\n", "public EventStoreBuilder tcpReceiveBufferSize ( int size ) { tcpSettingsBuilder . receiveBufferSize ( size ) ; return this ; }", "protected void print(double v) throws IOException {\n  print(String.valueOf(v));\n}\n", "FlexibleNode readBranch(HashMap<String,Taxon> translationList) throws IOException, ImportException {\n  double length=0.0;\n  FlexibleNode branch;\n  clearLastMetaComment();\n  if (nextCharacter() == '(') {\n    branch=readInternalNode(translationList);\n  }\n else {\n    branch=readExternalNode(translationList);\n  }\n  if (getLastDelimiter() != ':' && getLastDelimiter() != ',' && getLastDelimiter() != ')') {\n    String label=readToken(\",():;\");\n    if (label.length() > 0) {\n      branch.setAttribute(\"label\",label);\n    }\n  }\n  if (getLastDelimiter() == ':') {\n    length=readDouble(\" ,():;\");\n    if (getLastMetaComment() != null) {\n      parseMigrationString(getLastMetaComment(),branch);\n      clearLastMetaComment();\n    }\n  }\n  branch.setLength(length);\n  return branch;\n}\n", "    public void setVideoFrame(IVideoFrame annotation) {\n        VideoFrame oldFrame = videoFrame;\n        this.videoFrame = (VideoFrame) annotation;\n        getPropertyChangeSupport().firePropertyChange(\n                PROP_VIDEOFRAME, oldFrame, videoFrame);\n    }\n", "    public short and(short b) {\n        value = (short) (value & b);\n        return value;\n    }\n", "public boolean ifExists(String pathStr,Configuration conf) {\n    AllocatorPerContext context = obtainContext(contextCfgItemName);\n    return context.ifExists(pathStr, conf);\n  }", "public void addParameterAnnotation ( int param , AnnotationValue annotationValue ) ;", "public LessSpacePredicate ( Comparable < ? > expectedValue ) { super ( expectedValue ) ; }", "    public void writeAll() throws FileNotFoundException, IOException{\n        // Creation of a document object\n        Document document = new Document();\n\n        // Variable declaration and initialization\n        ResultManager rm = new ResultManager(result);\n        GraphResultDrawer graphDrawer = rm.getGraphDrawer();\n        Image[] images = graphDrawer.getGraphImages();\n\n        // Add the data into the PDF file based on the page\n        // layout that the user chosen\n        if(pageSetup == false) {\n            // Set the page layout as landscape\n            document = new Document(PageSize.LETTER.rotate());\n            addDataLandscape(document, images);\n        }else if(pageSetup == true) {\n            addDataPortrait(document, images);\n        }        \n  }\n", "public static boolean showUserPoolInfo(\n      String user,\n      Set<String> userFilterSet, PoolInfo poolInfo,\n      Set<String> poolGroupFilterSet, Set<PoolInfo> poolInfoFilterSet) {\n    boolean showUser = false;\n    if (userFilterSet.isEmpty() || userFilterSet.contains(user)) {\n      showUser = true;\n    }\n\n    return showUser &&\n        showPoolInfo(poolInfo, poolGroupFilterSet, poolInfoFilterSet);\n  }", "public <T> RestBuilder addProvider(Class<T> clazz, Class<? extends ContextProvider<T>> provider) {\n\n\t\tAssert.notNull(clazz, \"Missing provided class type!\");\n\t\tAssert.notNull(provider, \"Missing context provider!\");\n\t\tregisteredProviders.put(clazz, provider);\n\t\treturn this;\n\t}", "@Override\n    public InputType getOutputType(InputType... inputType) throws InvalidKerasConfigurationException {\n        if (inputType.length > 1)\n            throw new InvalidKerasConfigurationException(\n                    \"Keras Subsampling 2D layer accepts only one input (received \" + inputType.length + \")\");\n        return this.getSubsampling2DLayer().getOutputType(-1, inputType[0]);\n    }", "protected void ensureBufferSpace(int expectedAdditions) {\n    final int bufferLen = (buffer == null ? 0 : buffer.length);\n    if (elementsCount + expectedAdditions > bufferLen) {\n      final int newSize = resizer.grow(bufferLen, elementsCount, expectedAdditions);\n      assert newSize >= elementsCount + expectedAdditions : \"Resizer failed to\" + \" return sensible new size: \"\n          + newSize + \" <= \" + (elementsCount + expectedAdditions);\n\n      this.buffer = Arrays.copyOf(buffer, newSize);\n    }\n  }", "void resetWaitTimer(){\n  waitTimer=System.currentTimeMillis();\n}\n", "\tpublic void iniInit() {\n\t\tiniCombo.add(\"once\");\n\t\tiniCombo.add(\"each\");\n\t}\n", "public static boolean isSystemApplication ( Context context ) { if ( context == null ) { return BOOL_ ; } return isSystemApplication ( context , context . getPackageName ( ) ) ; }", "@Handler(channels = NetworkChannel.class)\n    public void onIoError(IOError event) throws IOException {\n        for (Channel channel : event.channels()) {\n            if (channel instanceof TcpChannel) {\n                // Error while using established network connection\n                TcpChannel netConnChannel = (TcpChannel) channel;\n                Optional<WebAppMsgChannel> appChannel\n                    = netConnChannel.associated(WebAppMsgChannel.class);\n                if (appChannel.isPresent()) {\n                    // Error while using a network connection\n                    appChannel.get().handleIoError(event, netConnChannel);\n                    continue;\n                }\n                // Just in case...\n                pooled.remove(netConnChannel.remoteAddress(), netConnChannel);\n                continue;\n            }\n            // Error while trying to establish the network connection\n            if (event.event() instanceof OpenTcpConnection) {\n                OpenTcpConnection connEvent\n                    = (OpenTcpConnection) event.event();\n                Optional<Set<WebAppMsgChannel>> erroneous;\n                synchronized (connecting) {\n                    erroneous = Optional\n                        .ofNullable(connecting.get(connEvent.address()));\n                    connecting.remove(connEvent.address());\n                }\n                erroneous.ifPresent(set -> {\n                    for (WebAppMsgChannel chann : set) {\n                        chann.openError(event);\n                    }\n                });\n            }\n        }\n    }", "\tprotected void startTrade(Player partner) {\n\t\tthis.partnerName = partner.getName();\n\t\tthis.tradeState = TradeState.MAKING_OFFERS;\n\t}\n", "public final String getJmsType() {\n        if (getHdr2().getChoiceField(JsHdr2Access.JMSTYPE) == JsHdr2Access.IS_JMSTYPE_EMPTY) {\n            return getDerivedJmsType();\n        }\n        else {\n            return (String) getHdr2().getField(JsHdr2Access.JMSTYPE_DATA);\n        }\n    }", "private void updateComponents() {\n        updatingComponents = true;\n\n        Font font = getFont();\n\n        fontList.setSelectedValue(font.getName(), true);\n        sizeList.setSelectedValue(font.getSize(), true);\n        boldCheckBox.setSelected(font.isBold());\n        italicCheckBox.setSelected(font.isItalic());\n\n        if (previewText == null) {\n            previewLabel.setText(font.getName());\n        }\n\n        // set the font and fire a property change\n        Font oldValue = previewLabel.getFont();\n        previewLabel.setFont(font);\n        firePropertyChange(\"font\", oldValue, font);\n\n        updatingComponents = false;\n    }", "public static ExchangeRate retrieve(String currency) throws StripeException {\n    return retrieve(currency, (Map<String, Object>) null, (RequestOptions) null);\n  }", "public CThreadInformationTableMenu ( final Window parent , final IDebugger debugger , final TargetProcessThread thread ) { Preconditions . checkNotNull ( parent , STR_ ) ; Preconditions . checkNotNull ( thread , STR_ ) ; if ( debugger != null ) { if ( thread . getState ( ) == ThreadState . RUNNING ) { add ( CActionProxy . proxy ( new CSuspendThreadAction ( thread ) ) ) ; } else { add ( CActionProxy . proxy ( new CResumeThreadAction ( thread ) ) ) ; } } }", "public TrueTypeFont(int type){\n  this.type=type;\n  tables=Collections.synchronizedSortedMap(new TreeMap<String,Object>());\n}\n", "private void handleButtons(boolean hideButtons){\n  if (hideButtons) {\n    quickActionButtons.setVisibility(View.GONE);\n  }\n else {\n    quickActionButtons.setVisibility(View.VISIBLE);\n  }\n  Broadcaster.broadcast(getActivity(),\"TIMELIST\",\"TIME UPDATED\");\n}\n", "public void sendPacketToAllInDimension ( IPacket packet , int dimension ) { checkClassAndSync ( packet . getClass ( ) ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . DIMENSION ) ; s", "private void doDelete ( FileEntry entry ) { for ( FileAlterationListener listener : listeners ) { if ( entry . isDirectory ( ) ) { listener . onDirectoryDelete ( entry . getFile ( ) ) ; } else { listener . onFileDelete ( entry . getFile ( ) ) ; } } }", "\tprivate String createPrivateProcessNotFoundException(String tscToken, String processID) {\n\t\t\t\n\t\tPropertyMap propertyMap = new PropertyMap();\n\t\t\t\n\t\tDiagnosticsListCreator edg;\n\t\tedg = new DiagnosticsListCreator();\n\t\t\t\n\t\tString severityType = DiagnosticsCodes.getErrorDiagnosticsCode();\n\t\tString exceptionID = \"80031\";\n\t\t\t\n\t\tpropertyMap.addPropertyValuePair(\"processID\", processID);\n\t\t\t\n\t\tString serExMsg = edg.constructErrorDocOneItemParam(tscToken, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomponentID, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tseverityType, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubSystemCode, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\texceptionID,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpropertyMap);\n\n\t\treturn serExMsg;\n\t\t\t\n\t}\n", "public static void close(){\n  try {\n    in.close();\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n    throw new RuntimeException(\"Could not close BinaryStdIn\");\n  }\n}\n", "public RefUpdateAttribute asRefUpdateAttribute ( ObjectId oldId , ObjectId newId , Branch . NameKey refName ) { RefUpdateAttribute ru = new RefUpdateAttribute ( ) ; ru . newRev = newId != null ? newId . getName ( ) : ObjectId . zeroId ( ) . getName ( ) ; ", "public static void v ( String tag , String msg , Throwable tr ) { println ( VERBOSE , tag , msg , tr ) ; }", "public static Object bytesToObject ( byte [ ] bytes ) throws IOException , ClassNotFoundException { ByteArrayInputStream inStream = new ByteArrayInputStream ( bytes ) ; ObjectInputStream in = new ContextClassLoaderObjectInputStream ( inStream ) ; Object data = in . readObject ( ) ; in . close ( ) ; return data ; }", "\tpublic Expression le(float ref) {\n\t\treturn le(PrimitiveToObject.convert(ref));\n\t}\n", "public List<CmsResource> readCategoryResources(\n        CmsObject cms,\n        String categoryPath,\n        boolean recursive,\n        String referencePath,\n        CmsResourceFilter resFilter)\n    throws CmsException {\n\n        Set<CmsResource> resources = new HashSet<CmsResource>();\n        CmsRelationFilter filter = CmsRelationFilter.SOURCES.filterType(CmsRelationType.CATEGORY);\n        if (recursive) {\n            filter = filter.filterIncludeChildren();\n        }\n        CmsCategory category = readCategory(cms, categoryPath, referencePath);\n        Iterator<CmsRelation> itRelations = cms.getRelationsForResource(\n            cms.getRequestContext().removeSiteRoot(category.getRootPath()),\n            filter).iterator();\n        while (itRelations.hasNext()) {\n            CmsRelation relation = itRelations.next();\n            try {\n                resources.add(relation.getSource(cms, resFilter));\n            } catch (CmsException e) {\n                // source does not match the filter\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(e.getLocalizedMessage(), e);\n                }\n            }\n        }\n        List<CmsResource> result = new ArrayList<CmsResource>(resources);\n        Collections.sort(result);\n        return result;\n    }", "private CourierImportDeclarations addNthImport(CourierImportDeclaration importDecl) {\n    CourierTopLevel root = getRoot();\n    CourierImportDeclarations importDecls = root.getImportDeclarations();\n    if (importDecl.getFullname() == null) {\n      return importDecls;\n    }\n\n    boolean added = false;\n    for (CourierImportDeclaration existing : importDecls.getImportDeclarationList()) {\n      if (existing.getFullname() != null && importDecl.getFullname().toString().compareTo(existing.getFullname().toString()) < 0) {\n        importDecls.addBefore(importDecl, existing);\n        added = true;\n        break;\n      }\n    }\n    if (!added) {\n      importDecls.add(importDecl);\n    }\n    return importDecls;\n  }", "public static String readString(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {\n  if (required) {\n    return jsonArray.getString(index);\n  }\n  if (notNull && jsonArray.isNull(index)) {\n    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));\n  }\n  String value=null;\n  if (!jsonArray.isNull(index)) {\n    value=jsonArray.getString(index);\n  }\n  return value;\n}\n", "@Deprecated\n    public CqlRecordWriter getRecordWriter(org.apache.hadoop.fs.FileSystem filesystem, org.apache.hadoop.mapred.JobConf job, String name, org.apache.hadoop.util.Progressable progress) throws IOException\n    {\n        return new CqlRecordWriter(job, progress);\n    }", "    protected boolean setVersion(int version) {\n        if (this.version != version) {\n            this.version = version;\n            return true;\n        }\n        return false;\n    }\n", "public static boolean asBoolean ( float [ ] array ) { return array . length > NUM_ ; }", "public CreateLaunchConfigurationRequest withClassicLinkVPCSecurityGroups(String... classicLinkVPCSecurityGroups) {\n        if (this.classicLinkVPCSecurityGroups == null) {\n            setClassicLinkVPCSecurityGroups(new com.amazonaws.internal.SdkInternalL", "public static BufferedInputStream newInputStream(Path self) throws IOException {\n  return new BufferedInputStream(Files.newInputStream(self));\n}\n", "        public boolean isClientAlive(long clientID) {\n\t    return false;\n\t}\n", "void insertOp(int pos,int length,int op){\n  int totalLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH);\n  for (int i=totalLen - 1; i >= pos; i--) {\n    m_ops.setOp(i + length,m_ops.getOp(i));\n  }\n  m_ops.setOp(pos,op);\n  m_ops.setOp(OpMap.MAPINDEX_LENGTH,totalLen + length);\n}\n", "\tpublic void addMethod(final IMethodCoverage method) {\n\t\tthis.methods.add(method);\n\t\tincrement(method);\n\t\t// As class is considered as covered when at least one method is\n\t\t// covered:\n\t\tif (methodCounter.getCoveredCount() > 0) {\n\t\t\tthis.classCounter = CounterImpl.COUNTER_0_1;\n\t\t}\n\t}\n", "public void setDelimiter(String delimiter) {\n  _delimiter = Val.chkStr(delimiter);\n  if (_delimiter.length() == 0) {\n    _delimiter = getDefaultDelimeter();\n  }\n  if (_delimiter.length() == 0) {\n    _delimiter = \",\";\n  }\n}\n", "synchronized public static void toFile ( String context , String fileName , boolean append ) throws IOException { PrintStream ps = new PrintStream ( new FileOutputStream ( fileName , append ) ) ; ps . println ( context ) ; ps . flush ( ) ; ps . close ( ) ", "public static String normalize ( String value ) { if ( value == null ) return value ; value = value . trim ( ) ; if ( value . indexOf ( STR_ ) == - NUM_ ) return value ; boolean space = BOOL_ ; int len = value . length ( ) ; StringBuffer b = new StringBuf", "private static int parseInt(String value,int beginIndex,int endIndex) throws NumberFormatException {\n  if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\n    throw new NumberFormatException(value);\n  }\n  int i=beginIndex;\n  int result=0;\n  int digit;\n  if (i < endIndex) {\n    digit=Character.digit(value.charAt(i++),10);\n    if (digit < 0) {\n      throw new NumberFormatException(\"Invalid number: \" + value);\n    }\n    result=-digit;\n  }\n  while (i < endIndex) {\n    digit=Character.digit(value.charAt(i++),10);\n    if (digit < 0) {\n      throw new NumberFormatException(\"Invalid number: \" + value);\n    }\n    result*=10;\n    result-=digit;\n  }\n  return -result;\n}\n", "public JobService activeCount ( String type , Handler < AsyncResult < Long > > handler ) { delegate . activeCount ( type , handler ) ; return this ; }", "private void checkTypeDepth(Feature feature, Class<?> current)\r\n    {\r\n        for (final Class<?> type : current.getInterfaces())\r\n        {\r\n            if (type.isAnnotationPresent(FeatureInterface.class))\r\n            {\r\n                final Feature old;\r\n                // CHECKSTYLE IGNORE LINE: InnerAssignment\r\n                if ((old = typeToFeature.put(type.asSubclass(Feature.class), feature)) != null)\r\n                {\r\n                    throw new LionEngineException(ERROR_FEATURE_EXISTS\r\n                                                  + feature.getClass()\r\n                                                  + AS\r\n                                                  + type\r\n                                                  + WITH\r\n                                                  + old.getClass());\r\n                }\r\n                checkTypeDepth(feature, type);\r\n            }\r\n        }\r\n        final Class<?> parent = current.getSuperclass();\r\n        if (parent != null)\r\n        {\r\n            checkTypeDepth(feature, parent);\r\n        }\r\n    }", "public void marshall(DescribeRiskConfigurationRequest describeRiskConfigurationRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (describeRiskConfigurationRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(describeRiskConfigurationRequest.getUserPoolId(), USERPOOLID_BINDING);\n            protocolMarshaller.marshall(describeRiskConfigurationRequest.getClientId(), CLIENTID_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "private void invalidateLoginDataOnNewSettings() {\n        String authDataString = \"\" + authData.getHost() + authData.getLogin() + authData.getPassword();\n        if (!authDataString.equals(lastConnection)) {\n            invalidate();\n            lastConne", "    public void removePeriodFromBegin(PeriodInTime period) {\n        if(null==period) throw new NullPointerException(\"period must not be null!\");\n        if(periods.contains(period)) {\n            periodsBegin.remove(period);\n            periods.remove(period);\n            period.removeDateListener(this);\n            period.setContainer(null);\n            period.setStartDate(null);\n        }\n    }\n", "        public boolean accepts(Object value, Context context) {\n            if (!(value instanceof String)) {\n                return false;\n            }\n\n            String strValue = (String) value;\n            String pattern = RuleConverter.getLocalizedString(_pattern, context);\n\n            if (!isCaseSensitive() && (strValue != null)) {\n                strValue = strValue.toLowerCase();\n            }\n\n            return strValue.matches(pattern);\n        }\n", "public Value index ( Value target ) { throw new RuntimeException ( STR_ ) ; }", "private static DefaultDirectedGraph<DataPropertyExpression,DefaultEdge> getDataPropertyGraph(OntologyImpl.UnclassifiedOntologyTBox ontology) {\n\n\t\tDefaultDirectedGraph<DataPropertyExpression,DefaultEdge> graph = new DefaultDirectedGraph<>(DefaultEdge.class);\n\n\t\tfor (DataPropertyExpression role : ontology.dataProperties())\n\t\t\tif (!role.isBottom() && !role.isTop())\n\t\t\t\tgraph.addVertex(role);\n\n        DataPropertyExpression top = null;\n\t\tfor (BinaryAxiom<DataPropertyExpression> roleIncl : ontology.getSubDataPropertyAxioms()) {\n\t\t    if (roleIncl.getSub().isBottom() || roleIncl.getSuper().isTop())\n\t\t        continue;\n\t\t    if (roleIncl.getSuper().isBottom()) {\n                throw new RuntimeException(\"BOT cannot occur on the LHS - replaced by DISJ\");\n            }\n            if (roleIncl.getSub().isTop()) {\n                top = roleIncl.getSub();\n                graph.addVertex(top);\n            }\n            graph.addEdge(roleIncl.getSub(), roleIncl.getSuper());\n        }\n\n        if (top != null) {\n            for (DataPropertyExpression dpe : graph.vertexSet())\n                graph.addEdge(dpe, top);\n        }\n\n\t\treturn graph;\n\t}", "private String preProcessSignature(String signature){\n  int index;\n  if ((index=signature.indexOf(\" throws\")) > 0) {\n    signature=signature.substring(0,index);\n  }\n  while ((index=signature.indexOf(\"java.lang.\")) > 0) {\n    signature=signature.substring(0,index) + signature.substring(index + 10,signature.length());\n  }\n  return signature;\n}\n", "public static void correctLocation(JSONObject map){\n  String location=map.has(\"location\") ? (String)map.get(\"location\") : null;\n  if (location != null && location.length() > 0) {\n    String location_country=map.has(\"location_country\") ? (String)map.get(\"location_country\") : null;\n    if (location_country != null && location_country.length() > 0) {\n      if (location.endsWith(\", \" + location_country)) {\n        location=location.substring(0,location.length() - location_country.length() - 2);\n        map.put(\"location\",location);\n      }\n    }\n  }\n}\n", "public void addAll ( List < Fragment > aSplits ) { splits . addAll ( aSplits ) ; }", "    public String sendMessage(String msg) throws SQSException {\n\t\tMap<String, String> params = new HashMap<String, String>();\n\t\tString encodedMsg = enableEncoding?new String(Base64.encodeBase64(msg.getBytes())):msg;\n\t\tparams.put(\"MessageBody\", encodedMsg);\n\t\tHttpPost method = new HttpPost();\n\t\tSendMessageResponse response =\n\t\t\t\tmakeRequestInt(method, \"SendMessage\", params, SendMessageResponse.class);\n\t\treturn response.getSendMessageResult().getMessageId();\n\t}\n", "public ModifyResponse modify(Modify modify) throws DiscoveryException {\n  Message req=createRequest();\n  req.setSOAPBody(DiscoSDKUtils.parseXML(modify.toString()));\n  return new ModifyResponse(getResponse(req));\n}\n", "public AttributesImpl ( ) { length = NUM_ ; data = null ; }", "@Benchmark\n  @BenchmarkMode(Mode.AverageTime)\n  @OutputTimeUnit(TimeUnit.NANOSECONDS)\n  public Map<String, AttributeValue> createAttributeMap(Data data) {\n    Map<String, AttributeValue> attributeMap = new HashMap<>(data.size);\n    for (int i = 0; i < data.size; i++) {\n      attributeMap.put(data.attributeKeys[i], data.attributeValues[i]);\n    }\n    return attributeMap;\n  }", "public PagedResult<CellHistory> getCellHistory(long sheetId, long rowId, long columnId, PaginationParameters pagination,\n                                                   EnumSet<CellHistoryInclusion> includes, Integer level) throws SmartsheetException {\n        String path = \"sheets/\" + sheetId + \"/rows/\" + rowId + \"/columns/\"+columnId + \"/history\";\n\n        HashMap<String, Object> parameters = new HashMap<String, Object>();\n        if (pagination != null) {\n            parameters = pagination.toHashMap();\n        }\n        if (level != null) {\n            parameters.put(\"level\", level);\n        }\n        parameters.put(\"include\", QueryUtil.generateCommaSeparatedList(includes));\n\n        path += QueryUtil.generateUrl(null, parameters);\n\n        return this.listResourcesWithWrapper(path, CellHistory.class);\n    }", "    public Object remove(Object object) {\n\tEntry entry = this.first;\n\tEntry previous = null;\n\twhile (entry != null) {\n\t    if (entry.object.equals(object)) {\n\t\tif (previous != null) {\n\t\t    previous.next = entry.next;\n\t\t    return entry.object;\n\t\t} else {\n\t\t    this.first = entry.next;\n\t\t}\n\t\tif (entry.next == null) last = previous;\n\t    }\n\t    previous = entry;\n\t    entry = entry.next;\n\t}\n\treturn null;\t    \n   }\n", "public abstract void start ( ) ;", "public static void setTargetTime(Duration targetTime) {\n        ByteString bytes = ByteString.copyFrom(Longs.toByteArray(targetTime.toMillis()));\n        Main.bitcoin.wallet().setTag(TAG, bytes);\n    }", "public void setTypeResolver(RelationshipResolver resolver, Class<?> type) {\n\t\tif (resolver != null) {\n\t\t\tString typeName = ReflectionUtils.getTypeName(type);\n\n\t\t\tif (typeName != null) {\n\t\t\t\ttypedResolvers.put(type, resolver);\n\t\t\t}\n\t\t}\n\t}", "public void accept ( final MethodVisitor mv , boolean visible ) { Label [ ] start = new Label [ this . start . size ( ) ] ; Label [ ] end = new Label [ this . end . size ( ) ] ; int [ ] index = new int [ this . index . size ( ) ] ; for ( int i = NUM_ ; i ", "public boolean isZero() {\nreturn this.equals(TimeSpan.ZERO);\n}\n", "    public void info (String msg) throws RootException {\n       info(defaultLogChannel,msg);\n    }\n", "protected static final Map < Integer , Set < CTag > > loadTags ( final CConnection connection , final INaviModule module , final CTagManager viewTagManager ) throws SQLException { return PostgreSQLViewTagLoader . loadViewTags ( connection , CTableNames . MODULE_VIEWS_TABLE , STR_ , module . getConfiguration ( ) . getId ( ) , viewTagManager ) ; }", "void onBoardRotationX ( NotificationBoard board , float x ) ;", "public List < IComment > appendLocalComment ( final String comment ) throws com . google . security . zynamics . binnavi . API . disassembly . CouldntSaveDataException , com . google . security . zynamics . binnavi . API . disassembly . CouldntLoadDataExc", "public void drawString(String pString) {\n        setupForText();\n        graphics.drawString(pString, (float) getPenPosition().getX(), (float) getPenPosition().getY());\n    }", "public JsonBuilder ( Object content , JsonGenerator generator ) { this . content = content ; this . generator = generator ; }", "public int executeAddedHooks(){\n  List<Thread> list=removeNewHooks();\n  if (list == null || list.isEmpty()) {\n    return 0;\n  }\n  for (  Thread t : list) {\n    t.run();\n  }\n  return list.size();\n}\n", "public boolean columnExists(DatabaseMetaData dbMetaData,String tableName,String columnName) throws SQLException {\n  return (columnExistsCaseSensitive(dbMetaData,tableName,columnName) || columnExistsCaseSensitive(dbMetaData,tableName,columnName.toUpperCase", "public DBInstance withReadReplicaDBClusterIdentifiers(String... readReplicaDBClusterIdentifiers) {\n        if (this.readReplicaDBClusterIdentifiers == null) {\n            setReadReplicaDBClusterIdentifiers(new java.util.ArrayList<String>(readReplicaDBClusterIdentifiers.length));\n        }\n        for (String ele : readReplicaDBClusterIdentifiers) {\n            this.readReplicaDBClusterIdentifiers.add(ele);\n        }\n        return this;\n    }", "public boolean isAndExceptionGroupMatched(AnalyzedToken token) {\n    for (PatternToken testAndGroup : andGroupList) {\n      if (testAndGroup.isExceptionMatched(token)) {\n        return true;\n      }\n    }\n    return false;\n  }", "private static String encodePath(String path){\n  StringBuilder buffer=new StringBuilder();\n  for (int i=0; i < path.length(); i++) {\n    char c=path.charAt(i);\n    if (c == ' ') {\n      buffer.append(\"%20\");\n    }\n else {\n      buffer.append(c);\n    }\n  }\n  return buffer.toString();\n}\n", "final void validateOid(long[] oid,int pos) throws SnmpStatusException {\n  final int length=oid.length;\n  if (pos + 2 >= length) {\n    throw new SnmpStatusException(SnmpStatusException.noSuchInstance);\n  }\n  if (oid[pos] != nodeId) {\n    throw new SnmpStatusException(SnmpStatusException.noSuchObject);\n  }\n}\n", "public AuthenticationPermission ( String name , String actions ) { super ( name ) ; this . actions = actions ; init ( ) ; }", "public static AccountTotals createAccountTotals(final String rawJSON) throws TwitterException {\n  try {\n    final JSONObject json=new JSONObject(rawJSON);\n    return accountTotalsConstructor.newInstance(json);\n  }\n catch (  final InstantiationException e)", "public void paintToolBarBackground ( SynthContext context , Graphics g , int x , int y , int w , int h , int orientation ) { paintToolBarBackground ( context , g , x , y , w , h ) ; }", "public Object readObject() throws IOException {\n  int tag=read();\nswitch (tag) {\ncase 'N':\n    return null;\ncase 'T':\n  return Boolean.valueOf(true);\ncase 'F':\nreturn Boolean.valueOf(false);\ncase 'I':\nreturn Integer.valueOf(parseInt());\ncase 'L':\nreturn Long.valueOf(parseLong());\ncase 'D':\nreturn Double.valueOf(parseDouble());\ncase 'd':\nreturn new Date(parseLong());\ncase 'x':\ncase 'X':\n{\n_isLastChunk=tag == 'X';\n_chunkLength=(read() << 8) + read();\nreturn parseXML();\n}\ncase 's':\ncase 'S':\n{\n_isLastChunk=tag == 'S';\n_chunkLength=(read() << 8) + read();\nint data;\n_sbuf.setLength(0);\nwhile ((data=parseChar()) >= 0) _sbuf.append((char)data);\nreturn _sbuf.toString();\n}\ncase 'b':\ncase 'B':\n{\n_isLastChunk=tag == 'B';\n_chunkLength=(read() << 8) + read();\nint data;\nByteArrayOutputStream bos=new ByteArrayOutputStream();\nwhile ((data=parseByte()) >= 0) bos.write(data);\nreturn bos.toByteArray();\n}\ncase 'V':\n{\nString type=readType();\nint length=readLength();\nreturn _serializerFactory.readList(this,length,type);\n}\ncase 'M':\n{\nString type=readType();\nreturn _serializerFactory.readMap(this,type);\n}\ncase 'R':\n{\nint ref=parseInt();\nreturn _refs.get(ref);\n}\ncase 'r':\n{\nString type=readType();\nString url=readString();\nreturn resolveRemote(type,url);\n}\ndefault :\nthrow error(\"unknown code for readObject at \" + codeName(tag));\n}\n}\n", "public static < V > int distinctList ( List < V > sourceList ) { if ( isEmpty ( sourceList ) ) { return NUM_ ; } int sourceCount = sourceList . size ( ) ; int sourceListSize = sourceList . size ( ) ; for ( int i = NUM_ ; i < sourceListSize ; i ++ ) { for ", "private static byte[] createColorTable(ColorModel colorModel,SampleModel sampleModel){\n  byte[] colorTable;\n  if (colorModel instanceof IndexColorModel) {\n    IndexColorModel icm=(IndexColorModel)colorModel;\n    int mapSize=icm.getMapSize();\n    int ctSize=getGifPaletteSize(mapSize);\n    byte[] reds=new byte[ctSize];\n    byte[] greens=new byte[ctSize];\n    byte[] blues=new byte[ctSize];\n    icm.getReds(reds);\n    icm.getGreens(greens);\n    icm.getBlues(blues);\n    for (int i=mapSize; i < ctSize; i++) {\n      reds[i]=reds[0];\n      greens[i]=greens[0];\n      blues[i]=blues[0];\n    }\n    colorTable=new byte[3 * ctSize];\n    int idx=0;\n    for (int i=0; i < ctSize; i++) {\n      colorTable[idx++]=reds[i];\n      colorTable[idx++]=greens[i];\n      colorTable[idx++]=blues[i];\n    }\n  }\n else   if (sampleModel.getNumBands() == 1) {\n    int numBits=sampleModel.getSampleSize()[0];\n    if (numBits > 8) {\n      numBits=8;\n    }\n    int colorTableLength=3 * (1 << numBits);\n    colorTable=new byte[colorTableLength];\n    for (int i=0; i < colorTableLength; i++) {\n      colorTable[i]=(byte)(i / 3);\n    }\n  }\n else {\n    colorTable=null;\n  }\n  return colorTable;\n}\n", "protected void removeProvisonalProject() {\n\t\tif (!this.currProject.exists()) {\n\t\t\tthis.currProject = null;\n\t\t\treturn;\n\t\t}\n\n\t\tfinal IRunnableWithProgress op = new IRunnableWithProgress() {\n\t\t\t@SuppressWarnings(\"synthetic-access\")\n\t\t\t@Override\n\t\t\tpublic void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {\n\t\t\t\tdoRemoveProject(monitor);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\tgetContainer().run(true, true, new WorkspaceModifyDelegatingOperation(op));\n\t\t} catch (InvocationTargetException e) {\n\t\t\tfinal String title = NewWizardMessages.NewJavaProjectWizardPageTwo_error_remove_title;\n\t\t\tfinal String message = NewWizardMessages.NewJavaProjectWizardPageTwo_error_remove_message;\n\t\t\tExceptionHandler.handle(e, getShell(), title, message);\n\t\t} catch (InterruptedException e) {\n\t\t\t// cancel pressed\n\t\t}\n\t}", "private void enableDisableView(View view, boolean enabled) {\n        view.setEnabled(enabled);\n        view.setFocusable(enabled);\n        if (view instanceof ViewGroup) {\n            ViewGroup group = (ViewGroup) view;\n\n            for (int idx = 0; idx < group.getChildCount(); idx++) {\n                enableDisableView(group.getChildAt(idx), enabled);\n            }\n        }\n    }", "public void mouseReleased(MouseEvent e){\n  if (log.isDebugEnabled()) {\n    log.debug(\"released \" + (e.getModifiers() & MouseEvent.BUTTON1_MASK) + \" \"+ e.isPopupTrigger()+ \" \"+ (e.getModifiers() & (MouseEvent.ALT_MASK + MouseEvent.META_MASK + MouseEvent.CTRL_MASK)));\n  }\n  JToggleButton button=(JToggleButton)e.getSource();\n  if (e.isPopupTrigger()) {\n    popup.show(e.getComponent(),e.getX(),e.getY());\n  }\n else   if (button.isEnabled() && ((e.getModifiers() & MouseEvent.BUTTON1_MASK) != 0) && ((e.getModifiers() & (MouseEvent.ALT_MASK + MouseEvent.META_MASK + MouseEvent.CTRL_MASK)) == 0)) {\n    if (!isLockable) {\n      changeState(false);\n    }\n else {\n      changeState(!isOn);\n    }\n  }\n  button.setSelected(isOn);\n}\n", "public boolean isLenient(){\n  return calendar.isLenient();\n}\n", "    public CCombo getCCombo() {\n        Assert.isNotNull(ccombo);\n        return ccombo;\n    }\n", "public ExportPermission ( String name ) { super ( name ) ; }", "void error ( String message ) ;", "\tpublic void setTables(final Set<SqlTable.Implementation> tables) {\n\t\tthis.tables = tables;\n\t\tthis.tableNameMappings = new HashMap<String, SqlTable.Implementation>();\n\t\tif(tables != null){\n\t\t\tfor(final SqlTable.Implementation sqlTable : tables) {\n\t\t\t\tthis.tableNameMappings.put(sqlTable.toString(), sqlTable);\n\t\t\t}\n\t\t}\n\t}\n", "\tpublic void closeEM() {\n\t\tEntityManager theEM = emw.getEntityManager();\n\t\ttheEM.close();\n\t}\n", "    public boolean hasSelectedRange() {\n        final LinePosition selectedRange = canvas.getSelectedRange();\n        return !(selectedRange.getStartLine() == selectedRange.getEndLine() &&\n                selectedRange.getStartPos() == selectedRange.getEndPos());\n    }\n", "public void sendRedirect(final String location) {\n        try {\n            response.sendRedirect(location);\n        } catch (final Exception e) {\n            LOGGER.log(Level.ERROR, \"Sends redirect [\" + location + \"] failed: \" + e.getMessage());\n        }\n    }", "boolean isEmpty ( ) ;", "public void installAppFromUpdateRow(List<UpdateRow> rows){\n  UpdatesResponse.UpdateApk apk;\n  for (  UpdateRow row : rows) {\n    apk=new UpdatesResponse.UpdateApk();\n    apk.name=row.appName;\n    apk.packageName=row.packageName;\n    apk.versionName=row.versionName;\n    apk.md5sum=row.md5sum;\n    apk.icon=row.icon;\n    apk.apk=new UpdatesResponse.UpdateApk.Apk();\n    apk.apk.path=row.path;\n    apk.apk.path_alt=row.path_alt;\n    apk.apk.filesize=row.fileSize;\n    apk.size=row.fileSize;\n    apk.id=row.id;\n    downloadFromV7(apk,false);\n  }\n}\n", "public static BartenderFileSystem \n  createAndAddSystem()\n  {\n    SystemManager system = preCreate(BartenderFileSystem.class);\n\n    BartenderFileSystem barSystem = new BartenderFileSystem();\n    \n    system.addSystem(BartenderFileSystem.class, barSystem);\n    \n    return barSystem;\n  }", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public static void loadDebuggers ( final AbstractSQLProvider provider , final DebuggerTemplateManager manager ) throws CouldntLoadDataException { final CConnection connection = provider . getConnection ( ) ; final String query = STR_ + CTableNames . DEBUG", "private void readHeaderFields(final CiphertextHeaders ciphertextHeaders){\n  final byte version=ciphertextHeaders.getVersion();\n  if (version != VersionInfo.CURRENT_CIPHERTEXT_VERSION) {\n    throw new BadCiphertextException(\"Invalid version in ciphertext.\");\n  }\n  cryptoAlgo_=ciphertextHeaders.getCryptoAlgoId();\n  final CiphertextType ciphertextType=ciphertextHeaders.getType();\n  if (ciphertextType != CiphertextType.CUSTOMER_AUTHENTICATED_ENCRYPTED_DATA) {\n    throw new BadCiphertextException(\"Invalid type in ciphertext.\");\n  }\n  final byte[] messageId=ciphertextHeaders.getMessageId();\n  encryptionContext_=ciphertextHeaders.getEncryptionContextMap();\n  if (cryptoAlgo_.getTrailingSignatureLength() > 0) {\n    try {\n      trailingPublicKey_=deserializeTrailingKeyFromEc(encryptionContext_.get(Constants.EC_PUBLIC_KEY_FIELD));\n      trailingSig_=Signature.getInstance(cryptoAlgo_.getTrailingSignatureAlgo(),\"BC\");\n      trailingSig_.initVerify(trailingPublicKey_);\n    }\n catch (    final GeneralSecurityException ex) {\n      throw new AwsCryptoException(ex);\n    }\n  }\n else {\n    trailingPublicKey_=null;\n    trailingSig_=null;\n  }\n  final ContentType contentType=ciphertextHeaders.getContentType();\n  final short nonceLen=ciphertextHeaders.getNonceLength();\n  final int frameLen=ciphertextHeaders.getFrameLength();\n  dataKey_=getDataKey(ciphertextHeaders);\n  try {\n    decryptionKey_=cryptoAlgo_.getEncryptionKeyFromDataKey(dataKey_.getKey(),ciphertextHeaders);\n  }\n catch (  final InvalidKeyException ex) {\n    throw new AwsCryptoException(ex);\n  }\n  verifyHeaderIntegrity(ciphertextHeaders);\nswitch (contentType) {\ncase FRAME:\n    contentCryptoHandler_=new FrameDecryptionHandler(decryptionKey_,(byte)nonceLen,cryptoAlgo_,messageId,frameLen);\n  break;\ncase SINGLEBLOCK:\ncontentCryptoHandler_=new BlockDecryptionHandler(decryptionKey_,(byte)nonceLen,cryptoAlgo_,messageId);\nbreak;\ndefault :\nbreak;\n}\n}\n", "    public void set(int offset, int val) {\n        if (offset < 0)\n            throw new IndexOutOfBoundsException(\"invalid value offset\");\n        \n        // convert to an actual offset in arrays\n        int actualOffset = basePointer + offset;\n        \n        // check if offset is beyond current size of list\n        if (offset >= size) {\n            // ensure capacity exists for offset requested \n            ensureCapacity(actualOffset);\n            \n            // initialize values to zero that have not already been accessed\n            int lastOffset = basePointer + size;\n            for (int i=lastOffset; i<=actualOffset; i++) {\n                dataStack[i] = 0;\n            }\n            \n            size = offset+1;\n        }\n        \n        // store value at requested position\n        dataStack[actualOffset] = val;\n    }\n", "public static String removeFNC1(String code){\n  int len=code.length();\n  StringBuilder buf=new StringBuilder(len);\n  for (int k=0; k < len; ++k) {\n    char c=code.charAt(k);\n    if (c >= 32 && c <= 126)     buf.append(c);\n  }\n  return buf.toString();\n}\n", "public boolean isRightOf(T point, boolean inclusive){\n\t\tif (point == null || start == null)\n\t\t\treturn false;\n\t\tint compare = point.compareTo(start);\n\t\tif (compare != 0)\n\t\t\treturn compare < 0;\n\t\treturn !isStartInclusive() || !inclusive;\n\t}", "public void testChecksumFailure ( ) throws Exception { Serializer serializer = new ProtobufSerializer ( ) ; ReplDBMSEvent replEvent = new ReplDBMSEvent ( NUM_ , ( short ) NUM_ , BOOL_ , STR_ , NUM_ , new Timestamp ( System . currentTimeMillis ( ) ) , new ", "  public boolean isVisible(Element e) {\n    return !\"none\".equalsIgnoreCase(curCSS(e, \"display\", true));\n  }\n", "    public void setSize(Dimension size) {\n        throw new UnsupportedOperationException(\"Size of TreeLayout is set\" +\n                \" by vertex spacing in constructor\");\n    }\n", "\tprotected void createRequiredFolders() {\n\t\tFile documentsFolder = new File(documentsPath);\n\t\tif (!documentsFolder.exists() && !documentsFolder.mkdirs()) {\n\t\t\tString msg = \"Unable to create the folder '\" + documentsPath + \"'.\";\n\t\t\tthrow new DocumentException(msg);\n\t\t}\n\t\tFile bindingsFolder = new File(bindingsPath);\n\t\tif (!bindingsFolder.exists() && !bindingsFolder.mkdirs()) {\n\t\t\tString msg = \"Unable to create the folder '\" + bindingsPath + \"'.\";\n\t\t\tthrow new DocumentException(msg);\n\t\t}\t\t\n\t}\n", "public static boolean isByte(String desc){\n  return desc.endsWith(\"B\");\n}\n", "private UIComponent newInstance(TreeNode n) throws FacesException {\n  if (LOGGER.isLoggable(Level.FINEST)) {\n    LOGGER.log(Level.FINEST,\"newInstance\",n.componentType);\n  }\n  try {\n    Class<?> t=((classMap != null) ? classMap.get(n.componentType) : null);\n    if (t == null) {\n      t=Util.loadClass(n.componentType,n);\n      if (t != null && classMap != null) {\n        classMap.put(n.componentType,t);\n      }\n else {\n        if (!isDevelopmentMode) {\n          throw new NullPointerException();\n        }\n      }\n    }\n    assert (t != null);\n    UIComponent c=(UIComponent)t.newInstance();\n    c.setId(n.id);\n    return c;\n  }\n catch (  ClassNotFoundException|NullPointerException|InstantiationException|IllegalAccessException e) {\n    throw new FacesException(e);\n  }\n}\n", "@NonNull\n  public static AlterMaterializedViewStart alterMaterializedView(\n      @Nullable CqlIdentifier keyspace, @NonNull CqlIdentifier viewName) {\n    return new DefaultAlterMaterializedView(keyspace, viewName);\n  }", "public static Map < String , MappedClass > mappingsFromSRG ( File file , Map < String , ClassNode > nodes ) { Map < String , MappedClass > base = mappingsFromNodes ( nodes ) ; MappingLoader loader = new SRGLoader ( nodes ) ; try { Map < String , MappedCla", "\tprivate void addNewItem(DataSetItem newItem) {\n\t\tnewItem.setIntValueByKey(\"id\", -(items.getDatasets().size() + 1));\n\t\titems.getDatasets().add(newItem);\n\t}\n", "public void increment ( F1 field1 , F2 field2 , F3 field3 ) { incrementBy ( field1 , field2 , field3 , NUM_ ) ; }", "public static byte[] toByteArray(Bitmap bitmap){\n  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();\n  bitmap.compress(Bitmap.CompressFormat.PNG,0,outputStream);\n  return outputStream.toByteArray();\n}\n", "public static boolean classExists ( String clazz ) { try { Class . forName ( clazz ) ; return BOOL_ ; } catch ( ClassNotFoundException e ) { return BOOL_ ; } }", "public static boolean isFileTypeSupported(AudioFileFormat.Type fileType,AudioInputStream stream){\n  List providers=getAudioFileWriters();\n  for (int i=0; i < providers.size(); i++) {\n    AudioFileWriter writer=(AudioFileWriter)providers.get(i);\n    if (writer.isFileTypeSupported(fileType,stream)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "private int colorWheelLocationToRGB(int x,int y,double rad){\n  double angle=Math.acos((double)x / rad);\n  int rgb;\n  if (angle < PI_3) {\n    if (y < 0) {\n      rgb=0xFF0000 | Math.min(255,(int)(255 * angle / PI_3)) << 8;\n    }\n else {\n      rgb=0xFF0000 | Math.min(255,(int)(255 * angle / PI_3));\n    }\n  }\n else   if (angle < 2 * PI_3) {\n    angle-=PI_3;\n    if (y < 0) {\n      rgb=0x00FF00 | Math.max(0,255 - (int)(255 * angle / PI_3)) << 16;\n    }\n else {\n      rgb=0x0000FF | Math.max(0,255 - (int)(255 * angle / PI_3)) << 16;\n    }\n  }\n else {\n    angle-=2 * PI_3;\n    if (y < 0) {\n      rgb=0x00FF00 | Math.min(255,(int)(255 * angle / PI_3));\n    }\n else {\n      rgb=0x0000FF | Math.min(255,(int)(255 * angle / PI_3)) << 8;\n    }\n  }\n  return rgb;\n}\n", "\tpublic void warning( String code, Throwable t, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5 ) {\n\t    if ( isWarningEnabled() ) {\n\t\tObject[] args = { arg0, arg1, arg2, arg3, arg4, arg5 };\n\t\twarning( code, t, args );\n\t    }\n\t}\n", "void __clearTempStaDeviceList ( ) ;", "\tpublic boolean hasParticipantRequestCondition() {\n\t\tif (this.participantRequestConditions.size() > 0)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n", "public static boolean addColumn (\n        Connection conn, String table, String cname, String cdef, String afterCname)\n        throws SQLException\n    {\n        if (tableContainsColumn(conn, table, cname)) {\n//             Log.info(\"Database table '\" + table + \"' already has column '\" + cname + \"'.\");\n            return false;\n        }\n\n        String update = \"ALTER TABLE \" + table + \" ADD COLUMN \" + cname + \" \" + cdef;\n        if (afterCname != null) {\n            update += \" AFTER \" + afterCname;\n        }\n        PreparedStatement stmt = null;\n        try {\n            stmt = conn.prepareStatement(update);\n            stmt.executeUpdate();\n        } finally {\n            close(stmt);\n        }\n        log.info(\"Database column '\" + cname + \"' added to table '\" + table + \"'.\");\n        return true;\n    }", "public CmsProject onlineProject() throws CmsException {\n    return (m_rb.onlineProject(m_context.currentUser(), m_context.currentProject()));\n}\n", "public JKMapTableModel ( Map < K , V > map , String keyLabel , String valueLabel ) { this . map = map ; addJKTableColumn ( keyLabel ) ; addJKTableColumn ( valueLabel ) ; Set < K > keySet = map . keySet ( ) ; int row = NUM_ ; for ( K k : keySet ) { addReco", "@When(\"^I create a Cassandra index named '(.+?)' with schema '(.+?)' of type '(json|string)' in table '(.+?)' using magic_column '(.+?)' using keyspace '(.+?)' with:$\")\n    public void createCustomMapping(String index_name, String schema, String type, String table, String magic_column, String keyspace, DataTable modifications) throws Exception {\n        String retrievedData = commonspec.retrieveData(schema, type);\n        String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n        String query = \"CREATE CUSTOM INDEX \" + index_name + \" ON \" + keyspace + \".\" + table + \"(\" + magic_column + \") \"\n                + \"USING 'com.stratio.cassandra.lucene.Index' WITH OPTIONS = \" + modifiedData;\n        commonspec.getLogger().debug(\"Will execute a cassandra query: {}\", query);\n        commonspec.getCassandraClient().executeQuery(query);\n    }", "public static String readPastebin ( String pasteID ) { return readURL ( WebUtils . PASTEBIN_URL_PREFIX + pasteID ) ; }", "@Deprecated\n    public void removeData(C data) {\n        Preconditions.checkState(mGroupBasicAdapter != null, \"Must call bindView() first\");\n        this.mGroupBasicAdapter.removeGroup(data);\n    }", "public void putAttribute(final String attrId,final Object value){\n  if (map == null) {\n    map=new HashMap();\n  }\n  map.put(attrId.toLowerCase(),new LdapEntryAttributeVO(attrId.toLowerCase(),value));\n}\n", "public void setForeground (Color color) {\n\tcheckWidget ();\n\tif (color != null && color.isDisposed ()) {\n\t\tSWT.error (SWT.ERROR_INVALID_ARGUMENT);\n\t}\n\tColor oldColor = foreground;\n\tif (oldColor == color) return;\n\tforeground = color;\n\tif (oldColor != null && oldColor.equals (color)) return;\n\tif ((parent.style & SWT.VIRTUAL) != 0) cached = true;\n\tredrawItem ();\n}\n", "    public boolean pushDiff(final Diff d) {\n        if (diff == null) {\n            diff = d;\n            return true;\n        } else {\n            return false;\n        }\n    }\n", "    public void expandWidget () {\n        stateModel.setBooleanState (false);\n    }\n", "public LinkedList < Patch > patch_make ( String text1 , String text2 ) { if ( text1 == null || text2 == null ) { throw new IllegalArgumentException ( STR_ ) ; } LinkedList < Diff > diffs = diff_main ( text1 , text2 , BOOL_ ) ; if ( diffs . size ( ) > NUM_", "public void dispose(){\n        // acquire status lock\n        synchronized(statusLock){\n            // abort if already disposed\n            if(status == SearchStatus.DISPOSED){\n                return;\n            }\n            // assert idle\n            assertIdle(\"Cannot dispose search.\");\n            // all good, handle disposed\n            searchDisposed();\n            // log\n            LOGGER.debug(\"Search {} changed status: {} --> {}\", this, status, SearchStatus.DISPOSED);\n            // update status\n            status = SearchStatus.DISPOSED;\n            // fire status update\n            fireStatusChanged(status);\n        }\n    }", "public static List<TrackSegment> mergeSegments(\n\t\tfinal List<TrackSegment> segments\n\t) {\n\t\tfinal List<WayPoint> points = segments.stream()\n\t\t\t.flatMap(TrackSegment::points)\n\t\t\t.collect(Collectors.toList());\n\n\t\treturn Collections.singletonList(TrackSegment.of(points));\n\t}", "public ServletBinding ( HttpServletRequest request , HttpServletResponse response , ServletContext context ) { super . setVariable ( STR_ , request ) ; super . setVariable ( STR_ , response ) ; super . setVariable ( STR_ , context ) ; super . setVariable ", "public LeaseRenewalEvent ( Object source , Lease lease , long expiration , Throwable ex ) { super ( source ) ; this . lease = lease ; this . expiration = expiration ; this . ex = ex ; }", "public GenericFeed retrievePageOfMailboxDumpRequests(Date fromDate) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {\n  String url=BASE_URL + \"mail/export/\" + domain;\n  if (fromDate != null) {\n    url+=\"?fromDate=\" + DATE_FORMAT.format(fromDate);\n  }\n  return getFeed(new URL(url),GenericFeed.class);\n}\n", "public SizeFileFilter ( long size , boolean acceptLarger ) { if ( size < NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } this . size = size ; this . acceptLarger = acceptLarger ; }", "public static Composite createComposite ( Composite parent , int columns , int hspan , int fill ) { Composite g = new Composite ( parent , SWT . NONE ) ; g . setLayout ( new GridLayout ( columns , BOOL_ ) ) ; g . setFont ( parent . getFont ( ) ) ; GridData gd = new GridData ( fill ) ; gd . horizontalSpan = hspan ; gd . grabExcessHorizontalSpace = BOOL_ ; g . setLayoutData ( gd ) ; return g ; }", "public DecorationCursor queryDecorationsSearch(String filter){\n  filter=(filter == null) ? \"\" : filter.trim();\n  if (filter.equals(\"\"))   return mHelper.queryDecorations();\n  return mHelper.queryDecorationsSearch(filter);\n}\n", "public abstract boolean flushStore ( CefCompletionCallback handler ) ;", "public void addElements(final int index,final char a[],final int offset,final int length){\n  ensureIndex(index);\n  CharArrays.ensureOffsetLength(a,offset,length);\n  grow(size + length);\n  System.arraycopy(this.a,index,this.a,index + length,size - index);\n  System.arraycopy(a,offset,this.a,index,length);\n  size+=length;\n}\n", "public static long sizeof(Class clazz,boolean roundResult){\n  Assert.assertTrue(!clazz.isArray());\n  long size;\n  if (unsafe != null) {\n    Field lastField=null;\n    long lastFieldOffset=0;\n    do {\n      Field[] fields=clazz.getDeclaredFields();\n      for (      Field field : fields) {\n        if (!Modifier.isStatic(field.getModifiers())) {\n          long offset=unsafe.fieldOffset(field);\n          if (offset >= lastFieldOffset) {\n            lastFieldOffset=offset;\n            lastField=field;\n          }\n        }\n      }\n      if (lastField != null) {\n        break;\n      }\n      clazz=clazz.getSuperclass();\n    }\n while (clazz != null);\n    if (lastField != null) {\n      size=lastFieldOffset + sizeType(lastField.getType());\n    }\n else {\n      size=OBJECT_SIZE;\n    }\n  }\n else {\n    size=OBJECT_SIZE;\n    do {\n      Field[] fields=clazz.getDeclaredFields();\n      for (      Field field : fields) {\n        if (!Modifier.isStatic(field.getModifiers())) {\n          size+=sizeType(field.getType());\n        }\n      }\n      clazz=clazz.getSuperclass();\n    }\n while (clazz != null);\n  }\n  if (roundResult) {\n    size=roundUpSize(size);\n  }\n  return size;\n}\n", "\tpublic void select() {\n\n\n\t\tString operation = Operations.SELECT;\n\n\t\tthis.executeOperation(this.objectToGuiObjectRequest(), operation);\n\n\t}\n", "public ShowSystemMenuAction ( boolean show ) { this . show = show ; }", "    public Side getSide() {\n        int position = pointer - 1;\n        if (position == -1) { return RIGHT; }\n        if (position < leftText.length()) { return LEFT; }\n        return RIGHT;\n    }\n", "public void skipValue(){\nswitch (peek()) {\ncase ENCODED_BYTE:\n    readByte();\n  break;\ncase ENCODED_SHORT:\nreadShort();\nbreak;\ncase ENCODED_CHAR:\nreadChar();\nbreak;\ncase ENCODED_INT:\nreadInt();\nbreak;\ncase ENCODED_LONG:\nreadLong();\nbreak;\ncase ENCODED_FLOAT:\nreadFloat();\nbreak;\ncase ENCODED_DOUBLE:\nreadDouble();\nbreak;\ncase ENCODED_STRING:\nreadString();\nbreak;\ncase ENCODED_TYPE:\nreadType();\nbreak;\ncase ENCODED_FIELD:\nreadField();\nbreak;\ncase ENCODED_ENUM:\nreadEnum();\nbreak;\ncase ENCODED_METHOD:\nreadMethod();\nbreak;\ncase ENCODED_ARRAY:\nfor (int i=0, size=readArray(); i < size; i++) {\nskipValue();\n}\nbreak;\ncase ENCODED_ANNOTATION:\nfor (int i=0, size=readAnnotation(); i < size; i++) {\nreadAnnotationName();\nskipValue();\n}\nbreak;\ncase ENCODED_NULL:\nreadNull();\nbreak;\ncase ENCODED_BOOLEAN:\nreadBoolean();\nbreak;\ndefault :\nthrow new DexException(\"Unexpected type: \" + Integer.toHexString(type));\n}\n}\n", "public boolean getBoolean(String name, boolean defaultValue) {\n    String valueString = getTrimmed(name);\n    if (null == valueString || \"\".equals(valueString)) {\n      return defaultValue;\n    }\n\n    valueString = valueString.toLowerCase();\n\n    if (\"true\".equals(valueString)) {\n      return true;\n    } else if (\"false\".equals(valueString)) {\n      return false;\n    } else {\n      return defaultValue;\n    }\n  }", "static int count(final String s, final char c) {\n\n        int pos   = 0;\n        int count = 0;\n\n        if (s != null) {\n            while ((pos = s.indexOf(c, pos)) > -1) {\n                count++;\n                pos++;\n            }\n        }\n\n        return count;\n    }", "    public void setListData(Vector<?> listData) {\n        PictureListModel piclist = new PictureListModel();\n        piclist.copyInto(listData.toArray());\n        setModel(piclist);\n    }\n", "public void flushUpdate()\r\n    {\r\n        for (int i = 0; i < numberOfQueues; i++)\r\n        {\r\n            if (!dbUpdateLists[i].isEmpty())\r\n            {\r\n                this.submitTaskToQueue(this.createUpdateTask(dbUpdateLists[i], fileUpdateLists[i]), i, processedUpdates);\r\n                this.dbUpdateLists[i] = new ArrayList(batchSize);\r\n                this.fileUpdateLists[i] = new ArrayList(batchSize);\r\n                this.updatesQueued++;\r\n            }\r\n        }\r\n    }", "private ChildNodeDescriptor insertType ( final DefaultMutableTreeNode parentNode , final BaseType baseType , final int index ) { final BaseTypeTreeNode newNode = new BaseTypeTreeNode ( baseType ) ; parentNode . insert ( newNode , index ) ; createTypeNodes ( newNode , baseType ) ; return new ChildNodeDescriptor ( newNode , index ) ; }", "public NaviEdge ( final NaviNode source , final NaviNode target , final Edge edge , final ZyEdgeRealizer < NaviEdge > realizer , final INaviEdge rawEdge ) { super ( source , target , edge , realizer , rawEdge ) ; }", "    final public boolean makeWindowScreen(int width, int height) {\n        windowed = true;\n\n        // resize the frame\n        setSize(width, height);\n\n        // validate the frame\n        validate();\n\n        // make the frame visible\n        setVisible(true);\n\n        return true;\n    }\n", "@Pure\n\tpublic static URL convertFileToURL(File file, boolean allowRelativePath) {\n\t\tif (file == null) {\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\tFile thefile = file;\n\t\t\tif (FileSystem.isWindowsNativeFilename(file.toString())) {\n\t\t\t\tthefile = FileSystem.normalizeWindowsNativeFilename(file.toString());\n\t\t\t\tif (thefile == null) {\n\t\t\t\t\tthefile = file;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal URL url;\n\t\t\tif (thefile.isAbsolute() || !allowRelativePath) {\n\t\t\t\turl = thefile.toURI().toURL();\n\t\t\t} else {\n\t\t\t\tfinal String[] elements = FileSystem.split(thefile);\n\t\t\t\tfinal StringBuilder path = new StringBuilder();\n\t\t\t\tfor (final String element : elements) {\n\t\t\t\t\tif (path.length() > 0) {\n\t\t\t\t\t\tpath.append(FileSystem.URL_PATH_SEPARATOR);\n\t\t\t\t\t}\n\t\t\t\t\tpath.append(element);\n\t\t\t\t}\n\t\t\t\turl = new URL(URISchemeType.FILE.name().toLowerCase(), null, path.toString());\n\t\t\t}\n\t\t\treturn FileSystem.toShortestURL(url);\n\t\t} catch (MalformedURLException e) {\n\t\t\treturn null;\n\t\t}\n\t}", "\tprotected void remove(Rete engine) {\n\t\tif (tnode != null) {\n\t\t\ttnode.removeActivation(engine.getWorkingMemory(),this);\n\t\t}\n\t}\n", "public static Nd4jBackend load() throws NoAvailableBackendException {\n\n        List<Nd4jBackend> backends = new ArrayList<>(1);\n        ServiceLoader<Nd4jBackend> loader = ServiceLoader.load(Nd4jBackend.class);\n        try {\n\n            Iterator<Nd4jBackend> backendIterator = loader.iterator();\n            while (backendIterator.hasNext())\n                backends.add(backendIterator.next());\n\n        } catch (ServiceConfigurationError serviceError) {\n            // a fatal error due to a syntax or provider construction error.\n            // backends mustn't throw an exception during construction.\n            throw new RuntimeException(\"failed to process available backends\", serviceError);\n        }\n\n        Collections.sort(backends, new Comparator<Nd4jBackend>() {\n            @Override\n            public int compare(Nd4jBackend o1, Nd4jBackend o2) {\n                // high-priority first\n                return o2.getPriority() - o1.getPriority();\n            }\n        });\n\n        for (Nd4jBackend backend : backends) {\n            boolean available = false;\n            String error = null;\n            try {\n                available = backend.isAvailable();\n            } catch (Exception e) {\n                error = e.getMessage();\n            }\n            if (!available) {\n                log.warn(\"Skipped [{}] backend (unavailable): {}\", backend.getClass().getSimpleName(), error);\n                continue;\n            }\n\n            try {\n                Nd4jContext.getInstance().updateProperties(backend.getConfigurationResource().getInputStream());\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n\n            log.info(\"Loaded [{}] backend\", backend.getClass().getSimpleName());\n            return backend;\n        }\n\n        //need to dynamically load jars and recall, note that we do this right before the backend loads.\n        //An existing backend should take precedence over\n        //ones being dynamically discovered.\n        //Note that we prioritize jvm properties first, followed by environment variables.\n        String[] jarUris;\n        if (System.getProperties().containsKey(ND4JSystemProperties.DYNAMIC_LOAD_CLASSPATH_PROPERTY) && !triedDynamicLoad) {\n            jarUris = System.getProperties().getProperty(ND4JSystemProperties.DYNAMIC_LOAD_CLASSPATH_PROPERTY).split(\";\");\n        // Do not call System.getenv(): Accessing all variables requires higher security privileges\n        } else if (System.getenv(ND4JEnvironmentVars.BACKEND_DYNAMIC_LOAD_CLASSPATH) != null && !triedDynamicLoad) {\n            jarUris = System.getenv(ND4JEnvironmentVars.BACKEND_DYNAMIC_LOAD_CLASSPATH).split(\";\");\n        }\n\n        else\n            throw new NoAvailableBackendException(\n                            \"Please ensure that you have an nd4j backend on your classpath. Please see: http://nd4j.org/getstarted.html\");\n\n        triedDynamicLoad = true;\n        //load all the discoverable uris and try to load the backend again\n        for (String uri : jarUris) {\n            loadLibrary(new File(uri));\n        }\n\n        return load();\n    }", "private static byte[] toByteArray(BigInteger bi,int len){\n  byte[] b=bi.toByteArray();\n  int n=b.length;\n  if (n == len) {\n    return b;\n  }\n  if ((n == len + 1) && (b[0] == 0)) {\n    byte[] t=new byte[len];\n    System.arraycopy(b,1,t,0,len);\n    return t;\n  }\n  assert (n < len);\n  byte[] t=new byte[len];\n  System.arraycopy(b,0,t,(len - n),n);\n  return t;\n}\n", "static void appendVmSynonymMessage(String vm1,String vm2){\n  outBuf=outBuf.append(getLocalizedMessage(\"java.launcher.opt.hotspot\",vm1,vm2));\n}\n", "public static String[] getDefaultWhiteList(Field field) {\n        Method values = null;\n\n        if (!field.getType().isEnum()) {\n            try {\n                values = field.getType().getMethod(\"values\");\n            } catch (NoSuchMethodException e) {\n                log.info(\"field : \" + field.getName() + \" values method not found \");\n            }\n\n            try {\n                Object[] objs = (Object[]) values.invoke(field.getType());\n                return (String[]) Arrays.stream(objs).map(obj -> String.valueOf(obj)).toArray();\n            } catch (IllegalAccessException | InvocationTargetException e) {\n                log.info(\"values invoke error : \" + e.getMessage());\n            }\n        }\n        return null;\n    }", "    public double getRadius() {\n        if (center == null) {\n            calcCenterRadius();\n        }\n        return radius;\n    }\n", "public XPointerEngine setLanguage(final String language)\n    {\n        if (language == null)\n        {\n            this.languageValue = XdmEmptySequence.getInstance();\n        }\n        else\n        {\n            this.languageValue = new XdmAtomicValue(language);\n        }\n        return this;\n    }", "\tpublic int getIndexOfChild(Object parent, Object child) {\n\n\t\tMailboxTreeNode m = (MailboxTreeNode) parent;\n\t\tMailboxTreeNode n = (MailboxTreeNode) child;\n\n\t\treturn m.getIndexOfChild(child);\n\n\t}\n", "    public Form getIntervals() {\n        if (Intervals == null) {//GEN-END:|61-getter|0|61-preInit\n            // write pre-init user code here\n            Intervals = new Form(\"Interval training\", new Item[] { getMessageBox(), getAnswerSelect(), getEnabledIntervals(), getVolumeInputIntervals() });//GEN-BEGIN:|61-getter|1|61-postInit\n            Intervals.addCommand(getBackCommand());\n            Intervals.addCommand(getNewCommand());\n            Intervals.addCommand(getRepeatCommand());\n            Intervals.setCommandListener(this);//GEN-END:|61-getter|1|61-postInit\n            // write post-init user code here\n        }//GEN-BEGIN:|61-getter|2|\n        return Intervals;\n    }\n", "    public void setTextPainter(TextPainter textPainter) {\n        if (textPainter == null) {\n            this.textPainter = StrokingTextPainter.getInstance();\n        } else {\n            this.textPainter = textPainter;\n        }\n    }\n", "    public Object inverseMap(Object[] objects) {\n        Object object = objects[0];\n        if (object instanceof String) {\n            String number = (String) object;\n            if (number.indexOf(\"%\") > 0)\n                number = number.substring(0, number.length() - 1);\n            Object out = new Double(number.trim());\n            return out;\n        } else {\n            return null;\n        }\n    }\n", "\tpublic void run(IAction action) {\n\t\tUpdateManagerUI.openInstaller(window.getShell());\n\t}\n", "public static float readSwappedFloat ( InputStream input ) throws IOException { return Float . intBitsToFloat ( readSwappedInteger ( input ) ) ; }", "   public R visit(TupleCompose n) {\n      R _ret=null;\n      n.nodeToken.accept(this);\n      n.tupleExp.accept(this);\n      return _ret;\n   }\n", "synchronized void receive(byte b[],int off,int len) throws IOException {\n  checkStateForReceive();\n  writeSide=Thread.currentThread();\n  int bytesToTransfer=len;\n  while (bytesToTransfer > 0) {\n    if (in == out)     awaitSpace();\n    int nextTransferAmount=0;\n    if (out < in) {\n      nextTransferAmount=buffer.length - in;\n    }\n else     if (in < out) {\n      if (in == -1) {\n        in=out=0;\n        nextTransferAmount=buffer.length - in;\n      }\n else {\n        nextTransferAmount=out - in;\n      }\n    }\n    if (nextTransferAmount > bytesToTransfer)     nextTransferAmount=bytesToTransfer;\n    assert (nextTransferAmount > 0);\n    System.arraycopy(b,off,buffer,in,nextTransferAmount);\n    bytesToTransfer-=nextTransferAmount;\n    off+=nextTransferAmount;\n    in+=nextTransferAmount;\n    if (in >= buffer.length) {\n      in=0;\n    }\n  }\n}\n", "static void runWithTestKit ( Type type ) throws Exception { GradleRunner . create ( ) . withPluginClasspath ( ) . withProjectDir ( new File ( StandardSystemProperty . USER_DIR . value ( ) ) ) . withArguments ( STR_ , STR_ , STR_ + type . checkApply ( STR_ , STR_ ) , STR_ ) . forwardOutput ( ) . build ( ) ; }", "boolean addStateListener ( IAsyncHandlerProviderStateListener listener ) ;", "public final void fsubr(X87Register dst, X87Register src)\n  {\n    assert(dst.index() == 0 || src.index() == 0);\n    emitX86(INST_FSUBR, dst, src);\n  }", "\tpublic boolean isSelectionEmpty(){\n\t\treturn list.isSelectionEmpty();\n\t}\n", "public MultiStatus(String pluginId,int code,String message,Throwable exception){\n  super(OK,pluginId,code,message,exception);\n  children=new IStatus[0];\n}", "public LUDecomposition(Matrix A){\n  LU=A.getArrayCopy();\n  m=A.getRowDimension();\n  n=A.getColumnDimension();\n  piv=new int[m];\n  for (int i=0; i < m; i++) {\n    piv[i]=i;\n  }\n  pivsign=1;\n  double[] LUrowi;\n  double[] LUcolj=new double[m];\n  for (int j=0; j < n; j++) {\n    for (int i=0; i < m; i++) {\n      LUcolj[i]=LU[i][j];\n    }\n    for (int i=0; i < m; i++) {\n      LUrowi=LU[i];\n      int kmax=Math.min(i,j);\n      double s=0.0;\n      for (int k=0; k < kmax; k++) {\n        s+=LUrowi[k] * LUcolj[k];\n      }\n      LUrowi[j]=LUcolj[i]-=s;\n    }\n    int p=j;\n    for (int i=j + 1; i < m; i++) {\n      if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n        p=i;\n      }\n    }\n    if (p != j) {\n      for (int k=0; k < n; k++) {\n        double t=LU[p][k];\n        LU[p][k]=LU[j][k];\n        LU[j][k]=t;\n      }\n      int k=piv[p];\n      piv[p]=piv[j];\n      piv[j]=k;\n      pivsign=-pivsign;\n    }\n    if (j < m & LU[j][j] != 0.0) {\n      for (int i=j + 1; i < m; i++) {\n        LU[i][j]/=LU[j][j];\n      }\n    }\n  }\n}\n", "\t  private void init(SampleDescriptor3D descriptor, IDeviceManager manager) {\n\t    initTitle();\n\t    initSampleSection(descriptor.getSamples());\n\t    initInputSection(manager);\n\t  }\n", "\tpublic void setData(String key, Object value) {\n\t\tif (richText != null) {\n\t\t\trichText.setData(key, value);\n\t\t}\n\t}\n", "public void schedule(TimerTask task,Date time){\n  sched(task,time.getTime(),0);\n}\n", "public void addArgIfAbsent(final BOp arg){\n  if (arg == null)   throw new IllegalArgumentException();\n  if (arg == this)   throw new IllegalArgumentException();\n  if (!args.contains(arg)) {\n    addArg(arg);\n  }\n}\n", "void startLaunchTaskAnimation ( Runnable postAnimRunnable ) { startFadeAnimation ( NUM_ , NUM_ , mConfig . taskViewExitToAppDuration , postAnimRunnable ) ; }", "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>();\n  newVector.addElement(new Option(\"\\tThe seed for the random number generator used\\n\" + \"\\tin selecting random anchor.\\n\" + \"(default: 1)\",\"S\",1,\"-S <num>\"));\n  newVector.addElement(new Option(\"\\tUse randomly chosen initial anchors.\",\"R\",0,\"-R\"));\n  newVector.addAll(Collections.list(super.listOptions()));\n  return newVector.elements();\n}\n", "public static JPopupMenu leftShift ( JPopupMenu self , Component component ) { self . add ( component ) ; return self ; }", "@Override\n    public Collection<String> wordsNearestSum(String word, int n) {\n        //INDArray vec = Transforms.unitVec(this.lookupTable.vector(word));\n        INDArray vec = this.lookupTable.vector(word);\n        return wordsNearestSum(vec, n);\n    }", "\tpublic void start(BundleContext context) throws Exception {\n\t\tsuper.start(context);\n\n\t\tPerspectivePlugin.getDefault().createContributorsList(\"edu.depauw.csc.cppll.evaluator\");\n\t\t\t\t\n\t\t// I think this has to be done here.\n\t\tIPreferenceStore store = PerspectivePlugin.getDefault().getPreferenceStore();\n\t\tstore.setDefault(CPPLLJabberPreferencePage.P_PORT, 5222);\n\t\tstore.setDefault(\"B_SIZE\", 20);\n\t}\n", "public static BaseComponent compress(@NonNull BaseComponent[] components){\n  if (components.length == 0) {\n    throw new IllegalArgumentException(\"Array of components cannot be empty\");\n  }\n  BaseComponent component=components[0];\n  for (int i=1; i < components.length; i++) {\n    component.addExtra(components[i]);\n  }\n  return component;\n}\n", "public OkHttpStack ( OkHttpClient okHttpClient ) { this . okHttpClient = okHttpClient ; }", "public void resetModelNames ( ) { pageStorage = new Hashtable ( ) ; }", "private void clearTagViewMap(){\n  TextView view;\n  for (  final Tag tag : mTagViewMap.keySet()) {\n    view=mTagViewMap.get(tag);\n    view.setTag(null);\n    view.setOnClickListener(null);\n    view.setSelected(false);\n    mTextViewPool.add(view);\n  }\n  mTag", "    public boolean existsCommitted(String name) {\n\treturn (null != this.findSymbol(name));\n    }\n", "public String encrypt ( String message ) { String base64 = null ; PublicKey publicKey = this . getPublicKey_from_Truststore ( ) ; try { Cipher cipher = Cipher . getInstance ( publicKey . getAlgorithm ( ) ) ; cipher . init ( Cipher . ENCRYPT_MODE , publicKey ) ; byte [ ] stringBytes = message . getBytes ( STR_ ) ; byte [ ] raw = cipher . doFinal ( stringBytes ) ; base64 = DatatypeConverter . printBase64Binary ( raw ) ; } catch ( Exception e ) { String msg = MessageFormat . format ( STR_ , e . getMessage ( ) ) ; logger . error ( msg ) ; throw new ServerRuntimeException ( msg , e ) ; } return base64 ; }", "public void addStrokeWidth ( float w ) { PDFChangeStrokeCmd sc = new PDFChangeStrokeCmd ( ) ; sc . setWidth ( w ) ; addCommand ( sc ) ; }", "public int peekEOFWarningCount ( ) { if ( isEOF ( ) && getDataLength ( ) >= NUM_ ) { return ( byteBuffer [ EOF_WARNING_COUNT_OFFSET ] & NUM_ ) | ( ( byteBuffer [ EOF_WARNING_COUNT_OFFSET + NUM_ ] & NUM_ ) << NUM_ ) ; } return - NUM_ ; }", "private CGlobalSettings ( ) { }", "public void setThingGroupsToRemove(java.util.Collection<String> thingGroupsToRemove) {\n        if (thingGroupsToRemove == null) {\n            this.thingGroupsToRemove = null;\n            return;\n        }\n\n        this.thingGroupsToRemove = new java.util.ArrayList<String>(thingGroupsToRemove);\n    }", "\tpublic int getSequenceNumber() {\n\t\tif (sequenceNumber == null)\n\t\t\treturn Integer.MAX_VALUE;\n  \n\t\treturn sequenceNumber.getValue();\n\t}\n", "public void marshall(BaiduMessage baiduMessage, ProtocolMarshaller protocolMarshaller) {\n\n        if (baiduMessage == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(baiduMessage.getAction(), ACTION_BINDING);\n            protocolMarshaller.marshall(baiduMessage.getBody(), BODY_BINDING);\n            protocolMarshaller.marshall(baiduMessage.getData(), DATA_BINDING);\n            protocolMarshaller.marshall(baiduMessage.getIconReference(), ICONREFERENCE_BINDING);\n            protocolMarshaller.marshall(baiduMessage.getImageIconUrl(), IMAGEICONURL_BINDING);\n            protocolMarshaller.marshall(baiduMessage.getImageUrl(), IMAGEURL_BINDING);\n            protocolMarshaller.marshall(baiduMessage.getRawContent(), RAWCONTENT_BINDING);\n            protocolMarshaller.marshall(baiduMessage.getSilentPush(), SILENTPUSH_BINDING);\n            protocolMarshaller.marshall(baiduMessage.getSmallImageIconUrl(), SMALLIMAGEICONURL_BINDING);\n            protocolMarshaller.marshall(baiduMessage.getSound(), SOUND_BINDING);\n            protocolMarshaller.marshall(baiduMessage.getSubstitutions(), SUBSTITUTIONS_BINDING);\n            protocolMarshaller.marshall(baiduMessage.getTimeToLive(), TIMETOLIVE_BINDING);\n            protocolMarshaller.marshall(baiduMessage.getTitle(), TITLE_BINDING);\n            protocolMarshaller.marshall(baiduMessage.getUrl(), URL_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "static int addOrSubtract ( int a , int b ) { return a ^ b ; }", "private static Object[] splitLine(String line,Pattern delim,char quote,BufferedReader in,int numColumns) throws IOException {\n  List<String> tokens=new ArrayList<String>();\n  StringBuilder sb=new StringBuilder();\n  Matcher m=delim.matcher(line);\n  int idx=0;\n  while (idx < line.length()) {\n    if (line.charAt(idx) == quote) {\n      sb.setLength(0);\n      ++idx;\n      while (true) {\n        int endIdx=line.indexOf(quote,idx);\n        if (endIdx >= 0) {\n          sb.append(line,idx,endIdx);\n          ++endIdx;\n          if ((endIdx < line.length()) && (line.charAt(endIdx) == quote)) {\n            sb.append(quote);\n            idx=endIdx + 1;\n          }\n else {\n            idx=endIdx;\n            break;\n          }\n        }\n else {\n          sb.append(line,idx,line.length());\n          sb.append(LINE_SEPARATOR);\n          idx=0;\n          line=in.readLine();\n          if (line == null) {\n            throw new EOFException(\"Missing end of quoted value \" + sb);\n          }\n        }\n      }\n      tokens.add(sb.toString());\n      idx=(m.find(idx) ? m.end() : line.length());\n    }\n else     if (m.find(idx)) {\n      tokens.add(line.substring(idx,m.start()));\n      idx=m.end();\n    }\n else {\n      tokens.add(line.substring(idx));\n      idx=line.length();\n    }\n  }\n  return tokens.toArray(new Object[Math.max(tokens.size(),numColumns)]);\n}\n", "@Override synchronized public void shutdown(){\n  if (!isOpen())   return;\n  open=false;\n  if (log.isInfoEnabled())   log.info(\"begin\");\n  final long begin=System.currentTimeMillis();\n  final long shutdownTimeout=this.shutdownTimeout == 0L ? Long.MAX_VALUE : this.shutdownTimeout;\n  final TimeUnit unit=TimeUnit.MILLISECONDS;\n  txWriteService.shutdown();\n  readService.shutdown();\n  writeService.shutdown();\n  if (sampleService != null)   sampleService.shutdown();\n  try {\n    if (log.isInfoEnabled())     log.info(\"Awaiting transaction service termination\");\n    final long elapsed=System.currentTimeMillis() - begin;\n    if (!txWriteService.awaitTermination(shutdownTimeout - elapsed,unit)) {\n      log.warn(\"Transaction service termination: timeout\");\n    }\n  }\n catch (  InterruptedException ex) {\n    log.warn(\"Interrupted awaiting transaction service termination.\",ex);\n  }\n  try {\n    if (log.isInfoEnabled())     log.info(\"Awaiting read service termination\");\n    final long elapsed=System.currentTimeMillis() - begin;\n    if (!readService.awaitTermination(shutdownTimeout - elapsed,unit)) {\n      log.warn(\"Read service termination: timeout\");\n    }\n  }\n catch (  InterruptedException ex) {\n    log.warn(\"Interrupted awaiting read service termination.\",ex);\n  }\n  try {\n    final long elapsed=System.currentTimeMillis() - begin;\n    final long timeout=shutdownTimeout - elapsed;\n    if (log.isInfoEnabled())     log.info(\"Awaiting write service termination: will wait \" + timeout + \"ms\");\n    if (!writeService.awaitTermination(timeout,unit)) {\n      log.warn(\"Write service termination : timeout\");\n    }\n  }\n catch (  InterruptedException ex) {\n    log.warn(\"Interrupted awaiting write service termination.\",ex);\n  }\n  final long elapsed=System.currentTimeMillis() - begin;\n  if (log.isInfoEnabled())   log.info(\"Done: elapsed=\" + elapsed + \"ms\");\n}\n", "public void show ( ) { ctx . show ( ) ; }", "public Object addHighlight(int p0,int p1,Highlighter.HighlightPainter p) throws BadLocationException {\n  Document doc=component.getDocument();\n  HighlightInfo i=(getDrawsLayeredHighlights() && (p instanceof LayeredHighlighter.LayerPainter)) ? new LayeredH", "protected Integer[] getVersionParts() {\n\n        String[] sParts = version.split(\"\\\\.\");\n        ArrayList<Integer> iParts = new ArrayList<>();\n        int trailingZeros = 0;\n\n        for (String sPart : sParts) {\n            Integer iPart = new Integer(sPart);\n\n            if (iPart == 0) {\n                ++trailingZeros;\n            } else {\n                for (int i = 0; i < trailingZeros; ++i) {\n                    iParts.add(0);\n                }\n                trailingZeros = 0;\n                iParts.add(iPart);\n            }\n        }\n        return iParts.toArray(new Integer[iParts.size()]);\n    }", "public static ValueLobDb createTempBlob(InputStream in,long length,DataHandler handler){\n  try {\n    long remaining=Long.MAX_VALUE;\n    boolean compress=handler.getLobCompressionAlgorithm(Value.BLOB) != null;\n    if (length >= 0 && length < remaining) {\n ", "   public void actionPerformed(ActionEvent e) {\n       ApplicationSettings.getApplicationView().getCurrentTab().getHistoryManager().addNewEdit(\n               selected.showBorder(!selected.isShowingBorder()));\n   }\n", "public void moveToBack ( E e ) { if ( e != last ) { unlink ( e ) ; linkLast ( e ) ; } }", "    protected void notifyListeners(AlternativeEvent e, int type) {\n        if (_listeners == null) {\n            _listeners = new Vector();\n        }\n        Vector list;\n\n        synchronized(this) { list = (Vector)_listeners.clone(); }\n        \n        for (int i=0; i < list.size(); i++) {\n            switch (type) {\n                case CHANGED_DESCRIPTION:\n                    ((AlternativeListener)list.elementAt(i)).changedDescription((AlternativeEvent) e);\n                    break;\n                case CHANGED_SHORTDESCRIPTION:\n                    ((AlternativeListener)list.elementAt(i)).changedShortDescription((AlternativeEvent) e);\n                    break;\n                case CHANGED_COMMENT:\n                    ((AlternativeListener)list.elementAt(i)).changedComment((AlternativeEvent) e);\n                    break;\n            }\n        }\n    }\n", "public static String formatCSV(Iterable<String> values){\n  StrBuilder sb=new StrBuilder();\n  for (  String value : values) {\n    sb.appendSeparator(\",\");\n    sb.append(\"\\\"\");\n    if (StringUtils.isNotEmpty(value)) {\n      for (int i=0; i < value.length(); i++) {\n        char ch=value.charAt(i);\n        if (ch == '\"') {\n          sb.append('\"');\n        }\n        sb.append(ch);\n      }\n    }\n    sb.append(\"\\\"\");\n  }\n  return sb.toString();\n}\n", "\tpublic void applyToolGroupSettings() {\n\t\tif(mElement != null){\n\t\t\tmElement.addMouseListener(new MouseListener(){\n\t\t\t\tpublic void mouseDoubleClick(MouseEvent e) {\n\t\t\t\t}\n\t\t\t\tpublic void mouseDown(MouseEvent e) {\n\t\t\t\t\ttoolSelected();\n\t\t\t\t}\n\t\t\t\tpublic void mouseUp(MouseEvent e) {\n\t\t\t\t}\t\t\t\t\n\t\t\t});\n\t\t}\n\t}\n", "public Spkac(String challenge,SignatureType signatureAlgorithm,SpkacSubject subject,PublicKey publicKey,PrivateKey privateKey) throws SpkacException {\n  this.challenge=challenge;\n  this.signatureAlgorithm=signatureAlgorithm;\n  this.subject=subject;\n  this.publicKey=publicKey;\n  this.signature=createSignature(privateKey);\n}\n", "public static void toggleSelectedGroups ( final ZyGraph graph ) { for ( final NaviNode node : graph . getSelectedNodes ( ) ) { if ( node . getRawNode ( ) instanceof INaviGroupNode ) { final INaviGroupNode gnode = ( INaviGroupNode ) node . getRawNode ( ) ;", "public static void closeAllShells ( ) throws IOException { Shell . closeAll ( ) ; }", "    protected void addExitFlag() {\n        addArg(EXIT_AFTER_STARTING);\n    }\n", "static public boolean isEqual(float a,float b,float tolerance){\n  return Math.abs(a - b) <= tolerance;\n}\n", "public void reset ( ) { cur . reset ( ) ; line . reset ( ) ; inuse = BOOL_ ; word . setLength ( NUM_ ) ; }", "@Override\n    @InterfaceAudience.Private\n    protected void processInbox(final RevisionList changes) {\n\n        Log.v(TAG, \"processInbox() changes=\" + changes.size());\n\n        // Generate a set of doc/rev IDs in the JSON format that _revs_diff wants:\n        // <http://wiki.apache.org/couchdb/HttpPostRevsDiff>\n        Map<String, List<String>> diffs = new HashMap<String, List<String>>();\n        for (RevisionInternal rev : changes) {\n            String docID = rev.getDocID();\n            List<String> revs = diffs.get(docID);\n            if (revs == null) {\n                revs = new ArrayList<String>();\n                diffs.put(docID, revs);\n            }\n            revs.add(rev.getRevID());\n            addPending(rev);\n        }\n\n        // Call _revs_diff on the target db:\n        Log.v(TAG, \"%s: posting to /_revs_diff\", this);\n\n        CustomFuture future = sendAsyncRequest(\"POST\", \"_revs_diff\", diffs, new RemoteRequestCompletion() {\n\n            @Override\n            public void onCompletion(RemoteRequest remoteRequest, Response httpResponse, Object response, Throwable e) {\n\n                Log.v(TAG, \"%s: got /_revs_diff response\", this);\n                Map<String, Object> results = (Map<String, Object>) response;\n                if (e != null) {\n                    setError(e);\n                } else {\n                    if (results.size() != 0) {\n                        // Go through the list of local changes again, selecting the ones the destination server\n                        // said were missing and mapping them to a JSON dictionary in the form _bulk_docs wants:\n                        List<Object> docsToSend = new ArrayList<Object>();\n                        RevisionList revsToSend = new RevisionList();\n                        long bufferedSize = 0;\n                        for (RevisionInternal rev : changes) {\n                            // Is this revision in the server's 'missing' list?\n                            Map<String, Object> properties = null;\n                            Map<String, Object> revResults = (Map<String, Object>) results.get(rev.getDocID());\n                            if (revResults == null) {\n                                removePending(rev);\n                                continue;\n                            }\n                            List<String> revs = (List<String>) revResults.get(\"missing\");\n                            if (revs == null || !revs.contains(rev.getRevID())) {\n                                removePending(rev);\n                                continue;\n                            }\n\n                            // NOTE: force to load body by Database.loadRevisionBody()\n                            // In SQLiteStore.loadRevisionBody() does not load data from database\n                            // if sequence != 0 && body != null\n                            rev.setSequence(0);\n                            rev.setBody(null);\n\n                            RevisionInternal loadedRev;\n                            try {\n                                loadedRev = db.loadRevisionBody(rev);\n                            } catch (CouchbaseLiteException e1) {\n                                Log.w(TAG, \"%s Couldn't get local contents of %s\", rev, PusherInternal.this);\n                                continue;\n                            }\n\n                            if (loadedRev.getPropertyForKey(\"_removed\") != null &&\n                                    ((Boolean) loadedRev.getPropertyForKey(\"_removed\")).booleanValue()) {\n                                // Filter out _removed revision:\n                                removePending(rev);\n                                continue;\n                            }\n\n                            RevisionInternal populatedRev = transformRevision(loadedRev);\n\n                            List<String> possibleAncestors = (List<String>) revResults.get(\"possible_ancestors\");\n\n                            properties = new HashMap<String, Object>(populatedRev.getProperties());\n                            Map<String, Object> revisions = db.getRevisionHistoryDictStartingFromAnyAncestor(populatedRev, possibleAncestors);\n                            properties.put(\"_revisions\", revisions);\n                            populatedRev.setProperties(properties);\n\n                            // Strip any attachments already known to the target db:\n                            if (properties.containsKey(\"_attachments\")) {\n                                // Look for the latest common ancestor and stub out older attachments:\n                                int minRevPos = findCommonAncestor(populatedRev, possibleAncestors);\n\n                                Status status = new Status(Status.OK);\n                                if (!db.expandAttachments(populatedRev, minRevPos + 1, !dontSendMultipart, false, status)) {\n                                    Log.w(TAG, \"%s: Couldn't expand attachments of %s\", this, populatedRev);\n                                    continue;\n                                }\n\n                                properties = populatedRev.getProperties();\n                                if (!dontSendMultipart && uploadMultipartRevision(populatedRev)) {\n                                    continue;\n                                }\n                            }\n\n                            if (properties == null || !properties.containsKey(\"_id\")) {\n                                throw new IllegalStateException(\"properties must contain a document _id\");\n                            }\n\n                            revsToSend.add(rev);\n                            docsToSend.add(properties);\n\n                            bufferedSize += JSONUtils.estimate(properties);\n                            if (bufferedSize > kMaxBulkDocsObjectSize) {\n                                uploadBulkDocs(docsToSend, revsToSend);\n                                docsToSend = new ArrayList<Object>();\n                                revsToSend = new RevisionList();\n                                bufferedSize = 0;\n                            }\n                        }\n\n                        // Post the revisions to the destination:\n                        uploadBulkDocs(docsToSend, revsToSend);\n\n                    } else {\n                        // None of the revisions are new to the remote\n                        for (RevisionInternal revisionInternal : changes) {\n                            removePending(revisionInternal);\n                        }\n                    }\n                }\n            }\n\n        });\n        future.setQueue(pendingFutures);\n        pendingFutures.add(future);\n        pauseOrResume();\n    }", "    public void addEndpoint(Endpoint endpoint, EndpointReference epr) {\n        _eprs.put(endpoint, epr);\n    }\n", "public static List<VisorLogFile> fileTree(File file,int maxDepth,@Nullable FileFilter filter){\n  if (file.isDirectory()) {\n    File[] files=(filter == null) ? file.listFiles() : file.listFiles(filter);\n    if (files == null)     return Collections.emptyList();\n    List<VisorLogFile> res=new ArrayList<>(files.length);\n    for (    File f : files) {\n      if (f.isFile() && f.length() > 0)       res.add(new VisorLogFile(f));\n else       if (maxDepth > 1)       res.addAll(fileTree(f,maxDepth - 1,filter));\n    }\n    return res;\n  }\n  return F.asList(new VisorLogFile(file));\n}\n", "  public boolean setAllToFile(String fileName) {\n    //      Writer stream = new BufferedWriter(new FileWriter(fileName));\n    Writer thisWriter = JHDLPrintWriter.getBufferedWriter(fileName); // Let JHDLPrintWriter take care of the file handling\n    for(int x=0;x<NUMBER_OF_PRINTWRITER_IDENTIFIERS;x++)\n      redirect(x, thisWriter); \n    return true;\n  }\n", "        public Builder withValueBackReference(String key, int previousResult) {\n            if (mType != TYPE_INSERT && mType != TYPE_UPDATE && mType != TYPE_ASSERT) {\n                throw new IllegalArgumentException(\n                        \"only inserts, updates, and asserts can have value back-references\");\n            }\n            if (mValuesBackReferences == null) {\n                mValuesBackReferences = new ContentValues();\n            }\n            mValuesBackReferences.put(key, previousResult);\n            return this;\n        }\n", "    public void init(FilterConfig filterConfig) {\n        \n        this.filterConfig = filterConfig;\n        if (filterConfig != null) {\n            if (debug) {\n                log(\"TermsOfUseFilter:Initializing filter\");\n            }\n        }\n    }\n", "\t public DBRecordChangedException  (String s) {\n\t\tsuper(s);\n\t} /* DBRecordChangedException(String) */\n", "public void removeItem(YeomanGeneratorType type,String name,GeneratedItemView itemView){\n  List<String> existingNames=namesByTypes.get(type);\n  if (existingNames != null && existingNames.contains(name)) {\n    existingNames.remove(name);\n    if (existingNames.isEmpty()) {\n      namesByTypes.remove(type);\n      FoldingPanel previous=widgetByTypes.remove(type);\n      view.removeFoldingPanel(previous);\n    }\n else {\n      FoldingPanel selectedPanel=widgetByTypes.get(type);\n      selectedPanel.remove(itemView);\n    }\n  }\n  updateGenerateButton();\n}\n", "private final void contendedLock(){\n  boolean waiting=false;\n  for (int s; ; ) {\n    if (((s=lockState) & WRITER) == 0) {\n      if (U.compareAndSwapInt(this,LOCKSTATE,s,WRITER)) {\n        if (waiting)         waiter=null;\n        return;\n      }\n    }\n else     if ((s | WAITER) == 0) {\n      if (U.compareAndSwapInt(this,LOCKSTATE,s,s | WAITER)) {\n        waiting=true;\n        waiter=Thread.currentThread();\n      }\n    }\n else     if (waiting)     LockSupport.park(this);\n  }\n}\n", "protected static boolean isNestable(String expression) {\n        return !(expression.contains(SearchExpressionConstants.ALL_KEYWORD)\n                || expression.contains(SearchExpressionConstants.NONE_KEYWORD)\n                || expression.contains(SearchExpressionConstants.PFS_PREFIX));\n    }", "    public CategoryPlot findSubplot(PlotRenderingInfo info, Point2D source) {\n        CategoryPlot result = null;\n        int subplotIndex = info.getSubplotIndex(source);\n        if (subplotIndex >= 0) {\n            result =  (CategoryPlot) this.subplots.get(subplotIndex);\n        }\n        return result;\n    }\n", "public static XlsWorkbook getWorkbook(File file) throws IOException\n    {\n        try\n        {\n            return new XlsWorkbook(file);\n        }\n        catch(jxl.read.biff.BiffException e)\n        {\n            throw new IOException(e);\n        }\n    }", "public static String fakeSignature(String qualifiedName){\n  String cname=qualifiedName.substring(0,qualifiedName.lastIndexOf('.'));\n  String mname=qualifiedName.substring(qualifiedName.lastIndexOf('.') + 1,qualifiedName.length());\n  return \"<\" + cname + \": \"+ mname+ \">\";\n}\n", "public void testSSLWithEmptyProtocolsAndCipherSuitesProperties ( ) { testSSLProtocolsAndCipherSuitesProperties ( SecurityHelperTest . TEST_ARG . BOTH ) ; }", "\tpublic void setLine(Vector<Object> line, boolean state, boolean rubberState) {\n\t\tinterface_DrawPanel.line = line;\n\t\tthis.state = state;\n\t\tthis.rubberState = rubberState;\n\t\trepaint();\n\t}\n", "public JsonArray add ( final JsonValue value ) { if ( value == null ) { throw new NullPointerException ( STR_ ) ; } values . append ( value ) ; return this ; }", "public void commitRandom(final Randomizer rand){\n  rand.setPdf(pdf);\n  if (pdf == ProbDistribution.NULL) {\n    return;\n  }\n  double param1=Utils.doubleParsable(tfParam1);\n  if (tfParam1.isEnabled() && !Double.isNaN(param1)) {\n    rand.setParam1Consistent(pdf.getParam1Name(),param1);\n  }\n  double param2=Utils.doubleParsable(tfParam2);\n  if (tfParam2.isEnabled() && !Double.isNaN(param2)) {\n    rand.setParam2Consistent(pdf.getParam2Name(),param2);\n  }\n  if (!tsClipping.isNull()) {\n    rand.setClipping(tsClipping.isSelected());\n    if (tsClipping.isSelected()) {\n      double upperBound=Utils.doubleParsable(tfUpBound);\n      if (!Double.isNaN(upperBound)) {\n        rand.setUpperBound(upperBound);\n      }\n      double lowerBound=Utils.doubleParsable(tfLowBound);\n      if (!Double.isNaN(lowerBound)) {\n        rand.setLowerBound(lowerBound);\n      }\n    }\n  }\n}\n", "public FilterType<WebAppDescriptor> getOrCreateFilter()\n   {\n      List<Node> nodeList = model.get(\"filter\");\n      if (nodeList != null &&  nodeList.size() > 0)\n      {\n         return new FilterTypeImpl<WebAppDescriptor>(this, \"filter\", model, nodeList.get(0));\n      }\n      return createFilter();\n   }", "public Charge confirmCharge(final ConfirmChargeParams params) throws OpenpayServiceException,\n            ServiceUnavailableException {\n        String path = String.format(CONFIRM_FOR_MERCHANT_PATH, this.getMerchantId(), params.getChargeId());\n        return this.getJsonClient().post(path, params.asMap(), Charge.class);\n    }", "    public void register(EventHandler h, int ops) {\n\ttry {\n\t    h.channel().register(this.selector, ops, h);\n\t} catch (ClosedChannelException e) {\n\t    unregister(h);\n\t} catch (java.nio.channels.CancelledKeyException e) {\n\t    unregister(h);\n\t}\n    }\n", "protected Varargs execute(String command){\n  return varargsOf(NIL,valueOf(\"exit\"),ONE);\n}", "public void write ( final AbstractIndex index ) throws IOException { StringBuilder cmd ; while ( index . size ( ) > NUM_ ) { System . out . println ( STR_ + index + STR_ ) ; cmd = index . remove ( ) ; cmd . append ( STR_ ) ; writer . write ( cmd . toStrin", "    public boolean exists() {\n        return (existsHdr() && existsDat());\n    }\n", "IEspStatusRemote doCommandRemoteGetStatusLocal ( InetAddress inetAddress , String deviceBssid , boolean isMeshDevice ) ;", "protected boolean release(InternalDistributedMember grantor,String serviceName,boolean lockBatch,int lockId){\n  DM dm=getDistributionManager();\n  DLockReleaseMessage msg=new DLockReleaseMessage();\n  msg.processorId=getProcessorId();\n  msg.serviceName=serviceName;\n  msg.objectName=this.objectName;\n  msg.lockBatch=lockBatch;\n  msg.lockId=lockId;\n  msg.setRecipient(grantor);\n  if (grantor.equals(dm.getId())) {\n    msg.setSender(grantor);\n    msg.processLocally(dm);\n  }\n else {\n    dm.putOutgoing(msg);\n  }\n  try {\n    waitForRepliesUninterruptibly();\n  }\n catch (  ReplyException e) {\n    e.handleAsUnexpected();\n  }\n  if (this.reply == null)   return false;\n  return this.reply.replyCode == DLockReleaseReplyMessage.OK;\n}\n", "private static int convertValueToInt ( CharSequence charSeq , int defaultValue ) { if ( null == charSeq ) return defaultValue ; String nm = charSeq . toString ( ) ; int value ; int sign = NUM_ ; int index = NUM_ ; int len = nm . length ( ) ; int base = NUM_ ; if ( STR_ == nm . charAt ( NUM_ ) ) { sign = - NUM_ ; index ++ ; } if ( STR_ == nm . charAt ( index ) ) { if ( index == ( len - NUM_ ) ) return NUM_ ; char c = nm . charAt ( index + NUM_ ) ; if ( STR_ == c || STR_ == c ) { index += NUM_ ; base = NUM_ ; } else { index ++ ; base = NUM_ ; } } else if ( STR_ == nm . charAt ( index ) ) { index ++ ; base = NUM_ ; } return Integer . parseInt ( nm . substring ( index ) , base ) * sign ; }", "  public void setOption(final String option, final String value) {\n    if (value == null) { return; }\n    if (option.toUpperCase().equals(PatternLayout.CONVERSION_PATTERN_OPTION.toUpperCase())) {\n      head = new PatternParser(value).parse();\n    }\n  }\n", "public static Element toElement(final String aFilePath, final String aPattern) throws FileNotFoundException,\n            ParserConfigurationException {\n        return toElement(aFilePath, aPattern, false);\n    }", "public void suspendEncoding ( ) throws java . io . IOException { flushBase64 ( ) ; this . suspendEncoding = BOOL_ ; }", "private String cutLink(String link,int len){\n  if (link.length() > len) {\n    String cut=link.substring(0,len / 2) + \"...\" + link.substring(link.length() - (len / 2));\n    return (cut);\n  }\n  return (link);\n}\n", "public static WebSocketFrame createPongFrame ( ) { return new WebSocketFrame ( ) . setFin ( BOOL_ ) . setOpcode ( PONG ) ; }", "public double feasibilityRatio(List<S> solutionSet) {\n    double aux = 0.0;\n    for (int i = 0; i < solutionSet.size(); i++) {\n      if (overallConstraintViolation.getAttribute(solutionSet.get(i)) < 0) {\n        aux = aux + 1.0;\n      }\n    }\n    return aux / (double) solutionSet.size();\n  }", "private void initUnaryOperators() {\n        initOperators(unaryOperators,\n                new UnaryNumericOperator(Tag.POS)\n                        .addUnaryOperator(DOUBLE, DOUBLE, nop)\n                        .addUnaryOperator(FLOAT, FLOAT, nop)\n       ", "private void insertEntry ( Entry e , long now ) { e . calcRenew ( now ) ; leases . put ( e , e ) ; }", "void renderElementAsText ( StringBuilder builder , PodRenderingContext context ) ;", "  public String missingSeparateTipText() {\n    return \"Treat missing as a separate value. Otherwise, counts for missing \"\n      +\"values are distributed across other values in proportion to their \"\n      +\"frequency.\";\n  }\n", "public void characters(org.w3c.dom.Node node) throws org.xml.sax.SAXException {\n  flushPending();\n  String data=node.getNodeValue();\n  if (data != null) {\n    final int length=data.length();\n    if (length > m_charsBuff.length) {\n      m_charsBuff=new char[length * 2 + 1];\n    }\n    data.getChars(0,length,m_charsBuff,0);\n    characters(m_charsBuff,0,length);\n  }\n}\n", "public Transaction(String who,Date when,double amount){\n  if (Double.isNaN(amount) || Double.isInfinite(amount))   throw new IllegalArgumentException(\"Amount cannot be NaN or infinite\");\n  this.who=who;\n  this.when=when;\n  this.amount=amount;\n}\n", "   public boolean isExpectContinue() {\n      return expect;\n   }\n", "protected ProblemTreeViewer getViewer() {\n\t\ttry {\n\t\t\treturn (ProblemTreeViewer) this.reflect.get(this, \"fViewer\"); //$NON-NLS-1$\n\t\t} catch (SecurityException | NoSuchFieldException | IllegalArgumentException | IllegalAccessException e) {\n\t\t\tthrow new Error(e);\n\t\t}\n\t}", "public void run ( ) { logger . info ( STR_ + Thread . currentThread ( ) . getName ( ) ) ; try { while ( ! cancelled && ! Thread . currentThread ( ) . isInterrupted ( ) ) { if ( ! relayClient . processEvent ( ) ) { if ( cancelled ) { logger . info ( STR_ ) ; return ; } else { throw new ExtractorException ( STR_ ) ; } } } } catch ( InterruptedException e ) { logger . info ( STR_ ) ; } catch ( Throwable t ) { logger . error ( STR_ + t . getMessage ( ) , t ) ; } finally { relayClient . disconnect ( ) ; } logger . info ( STR_ + Thread . currentThread ( ) . getName ( ) ) ; finished = BOOL_ ; }", "public void transitionState ( RobotState state , RobotState oldState ) { }", "protected void restoreWidgetValues() {\n\t\tif (!((JarPackageWizard)getWizard()).isInitializingFromJarPackage())\n\t\t\tinitializeJarPackage();\n\n\t\tfExportWarningsCheckbox.setSelection(fJarPackage.exportWarnings());\n\t\tfExportErrorsCheckbox.setSelection(fJarPacka", "public int compareTo(DTNHost h) {\n\t\treturn this.getAddress() - h.getAddress();\n\t}", "public void testSeqnoTracking ( ) throws Exception { TungstenProperties config = helper . createSimpleRuntime ( ) ; ReplicatorRuntime runtime = new ReplicatorRuntime ( config , new MockOpenReplicatorContext ( ) , ReplicatorMonitor . getInstance ( ) ) ; ru", "public static void createASDocConfig(ASDocConfiguration config) throws CompilerException {\n  String templatesPath=config.getTemplatesPath();\n  String ditaPath=config.getOutput() + \"tempdita\" + File.separator;\n  File ditaDir=new File(ditaPath);\n  if (!ditaDir.exists()) {\n    ditaDir.mkdirs();\n  }\n  BufferedWriter writer=null;\n  Reader reader=null;\n  try {\n    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(ditaPath + \"ASDoc_Config.xml\"),\"UTF-8\"));\n    reader=new BufferedReader(new InputStreamReader(new FileInputStream(templatesPath + \"ASDoc_Config_Base.xml\"),\"UTF-8\"));\n    ASDocConfigHandler h=new ASDocConfigHandler(writer,config);\n    InputSource source=new InputSource(reader);\n    SAXParserFactory factory=SAXParserFactory.newInstance();\n    SAXParser parser=factory.newSAXParser();\n    parser.parse(source,h);\n  }\n catch (  Exception e) {\n    if (Trace.error)     e.printStackTrace();\n    CompilerMessage c=new CouldNotCreate(\"ASDoc_Config.xml\",e.getMessage());\n    ThreadLocalToolkit.log(c);\n    throw c;\n  }\n finally {\n    if (writer != null) {\n      try {\n        writer.close();\n      }\n catch (      IOException ioe) {\n      }\n    }\n    if (reader != null) {\n      try {\n        reader.close();\n      }\n catch (      IOException ioe) {\n      }\n    }\n  }\n}\n", "public Bitmap put ( String key , Bitmap value ) { return cache . put ( key , value ) ; }", "public int doEndTag() throws JspException {\n  StringBuffer results=new StringBuffer();\n  results.append(\"\");\n  ResponseUtils.write(pageContext,results.toString());\n  return (EVAL_PAGE);\n}\n", "public static void copy(Resource in,OutputStream os,boolean closeOS) throws IOException {\n  InputStream is=null;\n  try {\n    is=toBufferedInputStream(in.getInputStream());\n  }\n catch (  IOException ioe) {\n    IOUtil.closeEL(is);\n    throw ioe;\n  }\n  copy(is,os,true,closeOS);\n}\n", "\tprotected void fireChangeEvent() {\n\t\tfireEvent(new DebugEvent(this, DebugEvent.CHANGE));\n\t}\n", "public Iterator iterator() {\n        // remove garbage collected elements\n        processQueue();\n\n        // get an iterator of the superclass WeakHashSet\n        final Iterator i = super.iterator();\n\n        return new Iterator() {\n            public boolean hasNext() {\n                return i.hasNext();\n            }\n\n            public Object next() {\n                // unwrap the element\n                return getReferenceObject((WeakReference) i.next());\n            }\n\n            public void remove() {\n                // remove the element from the HashSet\n                i.remove();\n            }\n        };\n    }", "public short itemAt(int pos){\n  if (pos < 0 || pos > state.length) {\n    throw new IndexOutOfBoundsException();\n  }\n  for (; iter <= pos; ++iter) {\n    int r=random.nextInt(state.length - iter) + iter;\n    short tmp=state[r];\n    state[r]=state[iter];\n    state[iter]=tmp;\n  }\n  return state[pos];\n}\n", "private static void checkAttachment(List<Monomer> listMonomersOne, List<Monomer> listMonomersTwo,\r\n\t\t\tConnectionNotation not, HELM2Notation helm2notation, InterConnections interconnection, boolean spec)\r\n\t\t\t\t\tthrows AttachmentException {\r\n\t\tboolean specific = spec;\r\n\t\tif (listMonomersOne.size() > 1 || listMonomersTwo.size() > 1) {\r\n\t\t\tspecific = false;\r\n\t\t}\r\n\t\tfor (Monomer monomerOne : listMonomersOne) {\r\n\t\t\tfor (Monomer monomerTwo : listMonomersTwo) {\r\n\t\t\t\t\r\n\t\t\t\tif(monomerOne.getCanSMILES().equals(\"*|X|N\") || monomerTwo.getCanSMILES().equals(\"*|X|N\")){\r\n\t\t\t\tthrow new AttachmentException(\"Monomer (canonicalsmiles = *) is undefined and should be defined\")\t;\r\n\t\t\t\t}\r\n\t\t\t\t/* Rna-Basepair-hydrogen bonds */\r\n\t\t\t\tif (monomerOne.getPolymerType().equals(\"RNA\") && monomerTwo.getPolymerType().equals(\"RNA\")\r\n\t\t\t\t\t\t&& not.getrGroupSource().equals(\"pair\") && not.getrGroupTarget().equals(\"pair\")) {\r\n\t\t\t\t\tLOG.info(\"RNA strand connection\");\r\n\r\n\t\t\t\t\tif (!(monomerOne.getMonomerType().equals(\"Branch\")\r\n\t\t\t\t\t\t\t| monomerTwo.getMonomerType().equals(\"Branch\"))) {\r\n\t\t\t\t\t\tLOG.info(\"RNA strand connection is not valid\");\r\n\t\t\t\t\t\tthrow new AttachmentException(\"RNA strand connection is not valid\");\r\n\t\t\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t * is the attachment point already occupied by another\r\n\t\t\t\t\t * monomer?\r\n\t\t\t\t\t */\r\n\t\t\t\t\tString detailsource = not.getSourceUnit() + \"$\" + not.getrGroupSource();\r\n\t\t\t\t\tString detailtarget = not.getTargetUnit() + \"$\" + not.getrGroupTarget();\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t * Is the attachment point already occupied by another\r\n\t\t\t\t\t * monomer\r\n\t\t\t\t\t */\r\n\t\t\t\t\t/* Intra connections */\r\n\t\t\t\t\tif (helm2notation.getSimplePolymer(not.getSourceId().getId()).getMapIntraConnection()\r\n\t\t\t\t\t\t\t.containsKey(detailsource)) {\r\n\t\t\t\t\t\tLOG.info(\"Attachment point is already occupied\");\r\n\t\t\t\t\t\tthrow new AttachmentException(\"Attachment point is already occupied\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (helm2notation.getSimplePolymer(not.getTargetId().getId()).getMapIntraConnection()\r\n\t\t\t\t\t\t\t.containsKey(detailtarget)) {\r\n\t\t\t\t\t\tLOG.info(\"Attachment point is already occupied\");\r\n\t\t\t\t\t\tthrow new AttachmentException(\"Attachment point is already occupied\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tString detailsource = not.getSourceUnit() + \"$\" + not.getrGroupSource();\r\n\t\t\t\tString detailtarget = not.getTargetUnit() + \"$\" + not.getrGroupTarget();\r\n\r\n\t\t\t\t/* Inter connections */\r\n\t\t\t\tdetailsource = not.getSourceId().getId() + \"$\" + detailsource;\r\n\r\n\t\t\t\tdetailtarget = not.getTargetId().getId() + \"$\" + detailtarget;\r\n\r\n\t\t\t\t/* check */\r\n\t\t\t\tif (interconnection.hasKey(detailsource)) {\r\n\t\t\t\t\tLOG.info(\"Attachment point is already occupied\");\r\n\t\t\t\t\tthrow new AttachmentException(\"Attachment point is already occupied\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (interconnection.hasKey(detailtarget)) {\r\n\t\t\t\t\tLOG.info(\"Attachment point is already occupied\");\r\n\t\t\t\t\tthrow new AttachmentException(\"Attachment point is already occupied\");\r\n\t\t\t\t}\r\n\t\t\t\t/* Inter connections */\r\n\t\t\t\tdetailsource = not.getSourceId().getId() + \"$\" + not.getSourceUnit() + \"$\" + not.getrGroupSource();\r\n\t\t\t\tdetailtarget = not.getTargetId().getId() + \"$\" + not.getTargetUnit() + \"$\" + not.getrGroupTarget();\r\n\r\n\t\t\t\tif (specific) {\r\n\t\t\t\t\t/* save only specific interactions */\r\n\t\t\t\t\tinterconnection.addConnection(detailsource, \"\");\r\n\t\t\t\t\tinterconnection.addConnection(detailtarget, \"\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}", "public static PersistentDependency createDepend(PathImpl backing, long digest)\n  {\n    Jar jar = create(backing);\n\n    return new JarDigestDepend(jar.getJarDepend(), digest);\n  }", "protected Element appendElement ( Document doc , String el , Element e2 ) { Element e = doc . createElement ( el ) ; e . appendChild ( e2 ) ; return e ; }", "\tpublic QualifiedType newQualifiedType(Type qualifier, SimpleName name) {\n\t\tQualifiedType result = new QualifiedType(this);\n\t\tresult.setQualifier(qualifier);\n\t\tresult.setName(name);\n\t\treturn result;\n\t}\n", "public void configure(@Observes(precedence = -200) ArquillianDescriptor arquillianDescriptor) {\n        restAssuredConfigurationInstanceProducer.set(\n            RestAssuredConfiguration.fromMap(arquillianDescriptor\n                .extension(\"restassured", "public void tokenizeToKAF(final KAFDocument kaf) throws IOException {\n\n    int noSents = 0;\n    int noParas = 1;\n    \n    List<List<Token>> tokens;\n\n    if (isNoSeg) {\n      String[] sentences = text.toArray(new String[text.size()]);\n      tokens = tokenizer.tokenize(sentences);\n    } else {\n      final String[] sentences = segmenter.segmentSentence();\n      tokens = tokenizer.tokenize(sentences);\n    }\n    for (final List<Token> tokenizedSentence : tokens) {\n      noSents = noSents + 1;\n      for (final Token token : tokenizedSentence) {\n        if (token.getTokenValue().equals(RuleBasedSegmenter.PARAGRAPH)) {\n          ++noParas;\n          // TODO debug this\n          if (noSents < noParas) {\n            ++noSents;\n          }\n        } else {\n          final WF wf = kaf.newWF(token.startOffset(), token.getTokenValue(),\n              noSents);\n          wf.setLength(token.tokenLength());\n          wf.setPara(noParas);\n        }\n      }\n    }\n  }", "public java.rmi.Remote getPort(Class serviceEndpointInterface) throws javax.xml.rpc.ServiceException {\n        try {\n            if (com.google.api.ads.adwords.axis.v201809.cm.CustomerNegativeCriterionServiceInterface.class.isAssignableFrom(serviceEndpointInterface)) {\n                com.google.api.ads.adwords.axis.v201809.cm.CustomerNegativeCriterionServiceSoapBindingStub _stub = new com.google.api.ads.adwords.axis.v201809.cm.CustomerNegativeCriterionServiceSoapBindingStub(new java.net.URL(CustomerNegativeCriterionServiceInterfacePort_address), this);\n                _stub.setPortName(getCustomerNegativeCriterionServiceInterfacePortWSDDServiceName());\n                return _stub;\n            }\n        }\n        catch (java.lang.Throwable t) {\n            throw new javax.xml.rpc.ServiceException(t);\n        }\n        throw new javax.xml.rpc.ServiceException(\"There is no stub implementation for the interface:  \" + (serviceEndpointInterface == null ? \"null\" : serviceEndpointInterface.getName()));\n    }", "    public boolean lessThanEnum(PeekAhead a, PeekAhead b) {\n        return a.peek().toString().compareTo(b.peek().toString()) < 0;\n    }\n", "public void skipHttpHeader() throws IOException {\n        if (this.httpHeaderStream != null) {\n            // Empty the httpHeaderStream\n            for (int available = this.httpHeaderStream.available();\n                        this.httpHeaderStream != null &&\n                                (available = this.httpHeaderStream.available()) > 0;) {\n                // We should be in this loop once only we should only do this\n                // buffer allocation once.\n                byte [] buffer = new byte[available];\n                // The read nulls out httpHeaderStream when done with it so\n                // need check for null in the loop control line.\n                read(buffer, 0, available);\n            }\n        }\n    }", "public final int exponent ( ) { return this . exponent ; }", "public IndexSelectPlan ( TablePlan tp , IndexInfo ii , ConstantRange searchRange , Transaction tx ) { this . tp = tp ; this . ii = ii ; this . searchRange = searchRange ; this . tx = tx ; Map < String , ConstantRange > ranges = new HashMap < String , ConstantRange > ( ) ; ranges . put ( ii . fieldName ( ) , searchRange ) ; hist = SelectPlan . constantRangeHistogram ( tp . histogram ( ) , ranges ) ; }", "public boolean isFullyDownloaded(StorageData storageData){\n  for (  LocalStorageData lsd : downloadedStorages) {\n    if (ObjectUtils.equals(lsd.getId(),storageData.getId())) {\n      return lsd.isFullyDownloaded();\n    }\n  }\n  return false;\n}\n", "public void removeJob ( String jobId ) { if ( jobs . contains ( jobId ) ) { jobs . remove ( jobId ) ; } }", "private void makeSureServerIsRunning(PortFile portFile)\n            throws IOException, InterruptedException {\n\n        if (portFile.exists()) {\n            portFile.lock();\n            portFile.getValues();\n            portFile.unlock();\n\n            if (portFile.containsPortInfo()) {\n                // Server seems to already be running\n                return;\n            }\n        }\n\n        // Fork a new server and wait for it to start\n        SjavacClient.fork(sjavacForkCmd,\n                          portFile,\n                          poolsize,\n                          keepalive);\n    }", "static void removeSizeHints(XDecoratedPeer window,long mask){\n  mask&=XUtilConstants.PMaxSize | XUtilConstants.PMinSize;\n  XToolkit.awtLock();\n  try {\n    XSizeHints hints=window.getHints();\n    if ((hints.get_flags() & mask) == 0) {\n      return;\n    }\n    hints.set_flags(hints.get_flags() & ~mask);\n    if (insLog.isLoggable(PlatformLogger.Level.FINER)) {\n      insLog.finer(\"Setting hints, flags \" + XlibWrapper.hintsToString(hints.get_flags()));\n    }\n    XlibWrapper.XSetWMNormalHints(XToolkit.getDisplay(),window.getWindow(),hints.pData);\n  }\n  finally {\n    XToolkit.awtUnlock();\n  }\n}\n", "public java.util.List<PhysicalResourceIdContextKeyValuePair> getPhysicalResourceIdContext() {\n        if (physicalResourceIdContext == null) {\n            physicalResourceIdContext = new com.amazonaws.internal.SdkInternalList<PhysicalResourceIdContextKeyValuePair>();\n        }\n        return physicalResourceIdContext;\n    }", "\tprivate void log(String sql, long millis, Throwable exception, int type) {\n\t\tif (isLoggingEnabled())\n\t\t\tlogger[type].info(millis + \" - \" + sql, exception);\t\t\n\t}\n", "private SlashActionCommand extractCommand(){\n  final SlashActionCommand command=new SlashActionCommand();\n  char ch=ci.current();\n  if (ch == CharacterIterator.DONE) {\n    command.setError(\"Missing slash command\");\n    return command;\n  }\n  if (Character.isWhitespace(ch)) {\n    command.setError(\"Unexpected space after slash character\");\n    return command;\n  }\n  if (Character.isLetterOrDigit(ch)) {\n    final StringBuilder buf=new StringBuilder();\n    while ((ch != CharacterIterator.DONE) && !Character.isWhitespace(ch)) {\n      buf.append(ch);\n      ch=ci.next();\n    }\n    command.setName(buf.toString());\n  }\n else {\n    command.setName(String.valueOf(ch));\n    ci.next();\n  }\n  return command;\n}\n", "public void annotateFieldJSR303(JMethod getter, boolean addValidAnnotation) {\n\t\tif (isRequired()) {\n\t\t\tgetter.annotate(NotNull.class);\n\t\t}\n\t\tif (StringUtils.hasText(getPattern())) {\n\t\t\tJAnnotationUse annotation = getter.annotate(Pattern.class);\n\t\t\tannotation.param(\"regexp\", getPattern());\n\t\t}\n\t\tif (getMinLength() != null || getMaxLength() != null) {\n\t\t\tJAnnotationUse annotation = getter.annotate(Size.class);\n\n\t\t\tif (getMinLength() != null) {\n\t\t\t\tannotation.param(\"min\", getMinLength());\n\t\t\t}\n\n\t\t\tif (getMaxLength() != null) {\n\t\t\t\tannotation.param(\"max\", getMaxLength());\n\t\t\t}\n\t\t}\n\t\tif (addValidAnnotation) {\n\t\t\tgetter.annotate(Valid.class);\n\t\t}\n\n\t\tif (minimum != null) {\n\t\t\tJAnnotationUse annotation = getter.annotate(DecimalMin.class);\n\t\t\tannotation.param(\"value\", String.valueOf(minimum));\n\t\t}\n\n\t\tif (maximum != null) {\n\t\t\tJAnnotationUse annotation = getter.annotate(DecimalMax.class);\n\t\t\tannotation.param(\"value\", String.valueOf(maximum));\n\t\t}\n\t}", "public String composeOtpAttribute(OTPUserRecord otpUserRecord) throws PwmUnrecoverableException {\n  String value=\"\";\n  if (otpUserRecord != null) {\n    final Configuration config=pwmApplication.getConfig();\n    final OTPStorageFormat format=config.readSettingAsEnum(PwmSetting.OTP_SECRET_STORAGEFORMAT,OTPStorageFormat.class);\nswitch (format) {\ncase PWM:\n      value=JsonUtil.serialize(otpUserRecord);\n    break;\ncase OTPURL:\n  value=OTPUrlUtil.composeOtpUrl(otpUserRecord);\nbreak;\ncase BASE32SECRET:\nvalue=otpUserRecord.getSecret();\nbreak;\ncase PAM:\nvalue=OTPPamUtil.composePamData(otpUserRecord);\nbreak;\ndefault :\nString errorStr=String.format(\"Unsupported storage format: \",format.toString());\nErrorInformation error=new ErrorInformation(PwmError.ERROR_INVALID_CONFIG,errorStr);\nthrow new PwmUnrecoverableException(error);\n}\n}\nreturn value;\n}\n", "public static Value jsonValueToJCRValue( Object value,\n                                             ValueFactory valueFactory ) {\n        if (value == null) {\n            return null;\n        }\n\n        // try the datatypes that can be handled by Jettison\n        if (value instanceof Integer || value instanceof Long) {\n            return valueFactory.createValue(((Number)value).longValue());\n        } else if (value instanceof Double || value instanceof Float) {\n            return valueFactory.createValue(((Number)value).doubleValue());\n        } else if (value instanceof Boolean) {\n            return valueFactory.createValue((Boolean)value);\n        }\n\n        // try to convert to a date\n        String valueString = value.toString();\n        for (DateFormat dateFormat : ISO8601_DATE_PARSERS) {\n            try {\n                Date date = dateFormat.parse(valueString);\n                return valueFactory.createValue(date);\n            } catch (ParseException e) {\n                // ignore\n            } catch (ValueFormatException e) {\n                // ignore\n            }\n        }\n\n        // default to a string\n        return valueFactory.createValue(valueString);\n    }", "public GzipConfigurableOutputStream(OutputStream out,int size,int compression) throws IOException {\n  super(out,new Deflater(compression,true),size);\n  writeHeader();\n  crc.reset();\n}\n", "private void openOutboundConnection() throws IOException {\n        // Setup audio channel\n        MediaDescriptionField remoteAudio = this.remoteSdp.getMediaDescription(\"audio\");\n\n        // Set remote DTLS fingerprint\n        if (this.audioChannel.isDtlsEnabled()) {\n            FingerprintAttribute fingerprint = remoteAudio.getFingerprint();\n            this.audioChannel.setRemoteFingerprint(fingerprint.getHashFunction(), fingerprint.getFingerprint());\n        }\n        setupAudioChannelOutbound(remoteAudio);\n    }", "private Response<Bitmap> doParse(NetworkResponse response){\n  byte[] data=response.data;\n  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();\n  Bitmap bitmap;\n  if (mMaxWidth == 0 && mMaxHeight == 0) {\n    decodeOptions.inPreferredConfig=mDecodeConfig;\n    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);\n  }\n else {\n    decodeOptions.inJustDecodeBounds=true;\n    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);\n    int actualWidth=decodeOptions.outWidth;\n    int actualHeight=decodeOptions.outHeight;\n    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);\n    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);\n    decodeOptions.inJustDecodeBounds=false;\n    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);\n    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);\n    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {\n      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);\n      tempBitmap.recycle();\n    }\n else {\n      bitmap=tempBitmap;\n    }\n  }\n  if (bitmap == null) {\n    return Response.error(new ParseError(response));\n  }\n else {\n    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));\n  }\n}\n", "private void lazyLoad(){\n  if (_major > 0)   return;\n  try {\n    if (_url == null)     throw new IllegalStateException();\n    try (InputStream is=_url.openStream()){\n      _major=1;\n      ByteCodeParser parser=new ByteCodeParser();\n      parser.setClassLoader(_loader);\n      parser.setJavaClass(this);\n      parser.parse(is);\n    }\n   }\n catch (  RuntimeException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n", "\tpublic void addHTMLEditorActionListener(HTMLEditorActionListener listener) {\n\t\tif (listener != null) {\n\t\t\tlisteners.addElement(listener);\n\t\t}\n\t}\n", "public void marshall(UpdateServicePrimaryTaskSetRequest updateServicePrimaryTaskSetRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (updateServicePrimaryTaskSetRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(updateServicePrimaryTaskSetRequest.getCluster(), CLUSTER_BINDING);\n            protocolMarshaller.marshall(updateServicePrimaryTaskSetRequest.getService(), SERVICE_BINDING);\n            protocolMarshaller.marshall(updateServicePrimaryTaskSetRequest.getPrimaryTaskSet(), PRIMARYTASKSET_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public int FindProc ( String id ) { int i = NUM_ ; while ( i < procs . size ( ) ) { ProcedureEntry pe = ( ProcedureEntry ) procs . elementAt ( i ) ; if ( pe . name . equals ( id ) ) return i ; i = i + NUM_ ; } return i ; }", "public T divide(T divisor) {\n        if (divisor == null) {\n            throw new IllegalArgumentException(\"invalid (null) divisor\");\n        }\n        BigDecimal quotient = this.value.divide(divisor.value, ROUND_BEHAVIOR);\n\n        return newInstance(quo", "protected void onEntranceTransitionPrepare ( ) { }", "@Nonnull\n\tpublic static <T> LObjIntPredicateBuilder<T> objIntPredicate(Consumer<LObjIntPredicate<T>> consumer) {\n\t\treturn new LObjIntPredicateBuilder(consumer);\n\t}", "protected int align(int e){\n  int lostdigit=0;\n  boolean inexact=false;\n  int diff=exp - e;\n  int adiff=diff;\n  if (adiff < 0) {\n    adiff=-adiff;\n  }\n  if (diff == 0) {\n    return 0;\n  }\n  if (adiff > (mant.length + 1)) {\n    Arrays.fill(mant,0);\n    exp=e;\n    field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n    dotrap(DfpField.FLAG_INEXACT,ALIGN_TRAP,this,this);\n    return 0;\n  }\n  for (int i=0; i < adiff; i++) {\n    if (diff < 0) {\n      if (lostdigit != 0) {\n        inexact=true;\n      }\n      lostdigit=mant[0];\n      shiftRight();\n    }\n else {\n      shiftLeft();\n    }\n  }\n  if (inexact) {\n    field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n    dotrap(DfpField.FLAG_INEXACT,ALIGN_TRAP,this,this);\n  }\n  return lostdigit;\n}\n", "public boolean useTrainingInput ( ) ;", "public ThreadManagedMetaBeanProperty ( Class declaringClass , String name , Class type , Object iv ) { super ( name , type , null , null ) ; this . type = type ; this . declaringClass = declaringClass ; this . getter = new ThreadBoundGetter ( name ) ; thi", "public final void removeListener(TListener listener){\n  listeners.remove(listener);\n}\n", "public static String dehyphenate(String text, String docId) {\n        return dehyphenate(new LineNumberReader(new StringReader(text)), docId);\n    }", "public Vector3 ( Vector2 vector , float z ) { this ( vector . getX ( ) , vector . getY ( ) , z ) ; }", "\tpublic String getCapacityConstraintNode() {\n\t\tString name=\"\";\n\t\tdouble maxCU = 0;\n\t\t\n\t\tIterator iter = m_Graph.nodes();\n\t\twhile (iter.hasNext()) {\n\t\t\tASDNNode n = (ASDNNode)iter.next();\n\t\t\tdouble cu = NumberUtil.getDoubleAttribute(n, \"cu\");\n\t\t\tif (cu > maxCU && cu<Double.POSITIVE_INFINITY) {\n\t\t\t\tmaxCU=cu;\n\t\t\t\tname = n.getString(\"label\");\n\t\t\t}\n\t\t}\n\t\treturn name;\n\t}\n", "public ParticleSystem ( Activity a , int maxParticles , int drawableRedId , long timeToLive , int parentViewId ) { this ( a , maxParticles , a . getResources ( ) . getDrawable ( drawableRedId ) , timeToLive , parentViewId ) ; }", "\tpublic Object set(int index, RegistroOuPatente o) {\n\t\treturn this.impl.set(index,o);\n\t}\n", "public Tree ( final com . google . security . zynamics . zylib . types . trees . Tree < ObjectType > tree ) { m_rootNode = new TreeNode < ObjectType > ( tree . getRootNode ( ) . getObject ( ) ) ; generate ( m_rootNode , tree . getRootNode ( ) ) ; }", "\tpublic boolean isActive() {\n\t\treturn current != null;\n\t}\n", "public boolean doInnerCallback(ModificationQueue modificationQueue, SecurityContext securityContext, ErrorBuffer errorBuffer) throws FrameworkException {\n\n\t\t// check for modification propagation along the relationships\n\t\tif ((status & STATE_PROPAGATING_MODIFICATION) == STATE_PROPAGATING_MODIFICATION && object instanceof AbstractNode) {\n\n\t\t\tSet<AbstractNode> nodes = ((AbstractNode)object).getNodesForModificationPropagation();\n\t\t\tif (nodes != null) {\n\n\t\t\t\tfor (AbstractNode node : nodes) {\n\n\t\t\t\t\tmodificationQueue.propagatedModification(node);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\t// examine only the last 4 bits here\n\t\tswitch (status & 0x000f) {\n\n\t\t\tcase 15:\n\t\t\tcase 14:\n\t\t\tcase 13:\n\t\t\tcase 12:\n\t\t\tcase 11:\n\t\t\tcase 10:\n\t\t\tcase  9:\n\t\t\tcase  8: // since all values >= 8 mean that the object was passively deleted, no action has to be taken\n\t\t\t\t // (no callback for passive deletion!)\n\t\t\t\tbreak;\n\n\t\t\tcase 7:\t// created, modified, deleted, poor guy => no callback\n\t\t\t\tbreak;\n\n\t\t\tcase 6: // created, modified => only creation callback will be called\n\t\t\t\tobject.onCreation(securityContext, errorBuffer);\n\t\t\t\tbreak;\n\n\t\t\tcase 5: // created, deleted => no callback\n\t\t\t\tbreak;\n\n\t\t\tcase 4: // created => creation callback\n\t\t\t\tobject.onCreation(securityContext, errorBuffer);\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // modified, deleted => deletion callback\n\t\t\t\tobject.onDeletion(securityContext, errorBuffer, removedProperties);\n\t\t\t\tbreak;\n\n\t\t\tcase 2: // modified => modification callback\n\t\t\t\tobject.onModification(securityContext, errorBuffer, modificationQueue);\n\t\t\t\tbreak;\n\n\t\t\tcase 1: // deleted => deletion callback\n\t\t\t\tobject.onDeletion(securityContext, errorBuffer, removedProperties);\n\t\t\t\tbreak;\n\n\t\t\tcase 0:\t// no action, no callback\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// mark as finished\n\t\tmodified = false;\n\n\t\treturn !errorBuffer.hasError();\n\t}", "public boolean equals ( Object other ) { if ( ! ( other instanceof TLongObjectHashMap ) ) { return BOOL_ ; } TLongObjectHashMap that = ( TLongObjectHashMap ) other ; if ( that . size ( ) != this . size ( ) ) { return BOOL_ ; } return forEachEntry ( new EqProcedure ( that ) ) ; }", "public byte[] load() throws IOException, InterruptedException {\n        try (InputStream is = open()) {\n            return FileUtils.readAllBytesAsArray(is, uncompressedSize);\n        }\n    }", "public void modelInstruction ( Instruction ins , int numWordsConsumed , int numWordsProduced , Value pushValue ) { if ( frame . getStackDepth ( ) < numWordsConsumed ) { try { throw new IllegalArgumentException ( STR_ + numWordsConsumed + STR_ + frame . ge", "private void updateRender() {\r\n\t\tif (inherit.isSelected())\r\n\t\t{\r\n\t\t\temitter.usePoints = Particle.INHERIT_POINTS;\r\n\t\t\toriented.setEnabled( true );\r\n\t\t}\r\n\t\tif (quads.isSelected())\r\n\t\t{\r\n\t\t\temitter.usePoints = Particle.USE_QUADS;\r\n\t\t\toriented.setEnabled( true );\r\n\t\t}\r\n\t\tif (points.isSelected())\r\n\t\t{\r\n\t\t\temitter.usePoints = Particle.USE_POINTS;\r\n\t\t\toriented.setEnabled( false );\r\n\t\t\toriented.setSelected( false );\r\n\t\t}\r\n\t\t\r\n\t\t// oriented\r\n\t\tif( oriented.isSelected())\r\n\t\t\temitter.useOriented= true;\r\n\t\telse\r\n\t\t\temitter.useOriented= false;\r\n\t\t\r\n\t\t// additive blending\r\n\t\tif( additive.isSelected())\r\n\t\t\temitter.useAdditive= true;\r\n\t\telse\r\n\t\t\temitter.useAdditive= false;\r\n\t}", "\tpublic Connection getDerbyConnection(String db_name) {\n\t\tConnection con_derby = null;\n\t\ttry {\n\t\t\tClass.forName(\"org.apache.derby.jdbc.EmbeddedDriver\");\n\t\t\tcon_derby = DriverManager.getConnection(\"jdbc:derby:\"\n\t\t\t\t\t+ Global.tempDirectory + \"/\" + db_name + \";create=true\");\n\t\t} catch (ClassNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn con_derby;\n\t}\n", "private boolean startScrollIfNeeded(final int y){\n  final int deltaY=y - mMotionY;\n  final int distance=Math.abs(deltaY);\n  final boolean overscroll=false;\n  if (overscroll || distance > mTouchSlop) {\n    if (overscroll) {\n      mMotionCorrection=0;\n    }\n else {\n      mTouchMode=TOUCH_MODE_SCROLLING;\n      mMotionCorrection=deltaY > 0 ? mTouchSlop : -mTouchSlop;\n    }\n    setPressed(false);\n    View motionView=getChildAt(mMotionPosition - mFirstPosition);\n    if (motionView != null) {\n      motionView.setPressed(false);\n    }\n    final ViewParent parent=getParent();\n    if (parent != null) {\n      parent.requestDisallowInterceptTouchEvent(true);\n    }\n    scrollIfNeeded(y);\n    return true;\n  }\n  return false;\n}\n", "    public InputStream getInputStream() throws MessagingException, IOException {\n        retrieveContent();\n        return (super.getInputStream());\n    }\n", "protected void installListeners(){\n  Window topLevelWindows[]=EventQueueMonitor.getTopLevelWindows();\n  if (topLevelWindows != null) {\n    for (int i=0; i < topLevelWindows.length; i++) {\n      installListeners(topLevelWindows[i]);\n    }\n  }\n}\n", "public static DateTime toDate(Object o, boolean alsoNumbers, TimeZone tz) throws PageException {\n\treturn DateCaster.toDateAdvanced(o, alsoNumbers ? DateCaster.CONVERTING_TYPE_OFFSET : DateCaster.CONVERTING_TYPE_NONE, tz);\n    }", "public static BinaryAttribute load(DataInputStream in,BinaryConstantPool cpool,int mask) throws IOException {\n  BinaryAttribute atts=null;\n  int natt=in.readUnsignedShort();\n  for (int i=0; i < natt; i++) {\n    Identifier id=cpool.getIdentifier(in.readUnsignedShort());\n    int len=in.readInt();\n    if (id.equals(idCode) && ((mask & ATT_CODE) == 0)) {\n      in.skipBytes(len);\n    }\n else {\n      byte data[]=new byte[len];\n      in.readFully(data);\n      atts=new BinaryAttribute(id,data,atts);\n    }\n  }\n  return atts;\n}\n", "    private int getTxnCount() {\n\tsynchronized (txnCountLock) {\n\t    return txnCount;\n\t}\n    }\n", "public void setStaticData(ChannelStaticData sd) throws PortalException {\n\t\tthis.staticData = sd;\n\n\t\t// C\ufffdration de la session PwStore\n\t\tIPerson person = staticData.getPerson();\n\t\tint fiche = Integer.parseInt((String) person.getAttribute(FICHE_ATTRIBUTE))", "\tpublic void setDiscountAmmount (java.lang.Integer discountAmmount) {\n\t\tthis.discountAmmount = discountAmmount;\n\t}\n", "private long wc ( String text ) { long wc = NUM_ ; String [ ] lines = text . split ( STR_ ) ; for ( String line : lines ) { wc += line . split ( STR_ ) . length ; } return wc ; }", "    private void writeStatus(StringBuffer content) {\n        try {\n            out.write(content.toString());\n            out.flush();\n        } catch (IOException e) {\n            System.err.println(\"Error writing statusline to writer\");\n            e.pr", "  public void kvStop() {\n    cards.stop();\n    super.kvStop();\n  }\n", "public final void setMax(final int max) {\n\t\tif (max < 0) {\n\t\t\tthrow new IllegalArgumentException(ILLEGAL_MAX);\n\t\t}\n\t\tif (max != getMax()) {\n\t\t\tgetOrCreateComponentModel().max = max;\n\t\t}\n\t}", "private static float crossProductZ ( ResultPoint pointA , ResultPoint pointB , ResultPoint pointC ) { float bX = pointB . x ; float bY = pointB . y ; return ( ( pointC . x - bX ) * ( pointA . y - bY ) ) - ( ( pointC . y - bY ) * ( pointA . x - bX ) ) ; }", "public static boolean isBlankValue(String s){\n  if (null == s)   return true;\n  String _s=s.trim();\n  return ((EMPTY_STRING.equals(_s)) || (STRING_ZERO.equals(_s)));\n}\n", "public OvhReceiversAsynchronousCleanReport serviceName_receivers_slotId_clean_POST(String serviceName, Long slotId, Boolean freemium, Boolean priceOnly) throws IOException {\n\t\tString qPath = \"/sms/{serviceName}/receivers/{slotId}/clean\";\n\t\tStringBuilder sb = path(qPath, serviceName, slotId);\n\t\tHashMap<String, Object>o = new HashMap<String, Object>();\n\t\taddBody(o, \"freemium\", freemium);\n\t\taddBody(o, \"priceOnly\", priceOnly);\n\t\tString resp = exec(qPath, \"POST\", sb.toString(), o);\n\t\treturn convertTo(resp, OvhReceiversAsynchronousCleanReport.class);\n\t}", "protected void logWarn(String id, String messageTemplate, Object... parameters) {\n    if(delegateLogger.isWarnEnabled()) {\n      String msg = formatMessageTemplate(id, messageTemplate);\n      delegateLogger.warn(msg, parameters);\n    }\n  }", "public void organizationName_service_exchangeService_mailingList_mailingListAddress_PUT(String organizationName, String exchangeService, String mailingListAddress, OvhMailingList body) throws IOException {\n\t\tString qPath = \"/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}\";\n\t\tStringBuilder sb = path(qPath, organizationName, exchangeService, mailingListAddress);\n\t\texec(qPath, \"PUT\", sb.toString(), body);\n\t}", "public static void marginBottom(Node no,double bottom){\n  AnchorPane.setBottomAnchor(no,bottom);\n}\n", "public void addReceivers ( ClassModder ... modders ) { this . modders . addAll ( Arrays . asList ( modders ) ) ; }", "public static String dateToHumanDateAndTime(Date date){\n  if (date == null) {\n    return \"missing\";\n  }\n  return timestampToHumanDateAndTime(date.getTime());\n}\n", "\tpublic void fightEnd() {\n\t\tif (attackerCasualties == 0 && defenderCasualties == 0) {\n\t\t\tthis.activeFight = false;\n\t\t\tthis.attackerWins = false;\n\t\t\tthis.attackingBanner = null;\n\t\t\tthis.defendingBanner = null;\n\t\t\tthis.attackingProvince = null;\n\t\t\tthis.defendingProvince = null;\n\t\t}\n\t}\n", "\tpublic boolean findStartOfList() {\n\t\tcloseFile();\n\t\tloadFile(filename, listType);\n\n\t\tif (findLine(listStartLine1) && findLine(listStartLine2)) {\n\t\t\tcheckIfEOF();\n\t\t\treturn true;\n\t\t} else\n\t\t\treturn false;\n\t}\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "private void toHexString(){\n  String pubText=pubData.getText();\n  StringBuffer hexText=new StringBuffer();\n  byte[] pubBytes=pubText.getBytes();\n  for (int i=0; i < pubBytes.length; i++) {\n    int byteValue=pubBytes[i];\n    if (byteValue < 0) {\n      byteValue+=256;\n    }\n    if (byteValue < 16) {\n      hexText.append(\"0\" + Integer.toHexString(byteValue));\n    }\n else {\n      hexText.append(Integer.toHexString(byteValue));\n    }\n  }\n  hexDisplay=true;\n  pubLabel.setText(PANEL_TITLE + \" - hexadecimal display\");\n  mqttMgr.setTitleText(\"\");\n  hexButton.setText(\"Text\");\n  pubData.setText(hexText.toString());\n}\n", "      protected JDialog createDialog() {\n         try {\n            return new MenuExtractMethod(null);\n         } catch (RefactoringException e) {\n            e.printStackTrace();\n         }\n         return null;\n      }\n", "public final List cdr ( ) { List newList = new List ( ) ; newList . first = this . first . next ; newList . last = ( newList . first == null ) ? null : this . last ; return newList ; }", "private static Configuration getDefault(){\n        Configuration config = new Configuration();\n        config.addHandler(new ConsoleAuditHandler());\n        config.setMetaData(new DummyMetaData());\n        config.setLayout(new SimpleLayout());\n        config.addProperty(\"log.file.location\", \"user.dir\");\n        return config;\n    }", "private JMenuItem createJMenuItem ( boolean grayWithoutDiagram , final String name , int [ ] keyEvents , int preferredMnemonic ) { JMenuItem menuItem = new JMenuItem ( name ) ; MultipleKeyBindingsAction action = new MultipleKeyBindingsAction ( name , pref", "private Map addFormats(String realm){\n  Set values=null;\n  Map map=null;\n  try {\n    AMIdentityRepository repo=new AMIdentityRepository(adminSSOToken,realm);\n    AMIdentity realmIdentity=repo.getRealmIdentity();\n    Set servicesFromIdRepo=realmIdentity.getAssignedServices();\n    if (servicesFromIdRepo.contains(G11N_SERVICE_NAME)) {\n      map=realmIdentity.getServiceAttributes(G11N_SERVICE_NAME);\n    }\n else {\n      OrganizationConfigManager orgCfgMgr=new OrganizationConfigManager(adminSSOToken,realm);\n      map=orgCfgMgr.getServiceAttributes(G11N_SERVICE_NAME);\n    }\n  }\n catch (  SSOException e) {\n    debug.warning(\"AMCommonNameGenerator.addFormats\",e);\n  }\ncatch (  SMSException e) {\n    debug.warning(\"AMCommonNameGenerator.addFormats\",e);\n  }\ncatch (  IdRepoException e) {\n    debug.warning(\"AMCommonNameGenerator.addFormats\",e);\n  }\n  if ((map != null) && !map.isEmpty()) {\n    values=(Set)map.get(G11N_SERIVCE_COMMON_NAME_FORMAT);\n  }\n  if ((values == null) || values.isEmpty()) {\n    if (serviceSchemaManager != null) {\n      try {\n        values=AMAdminUtils.getAttribute(serviceSchemaManager,SchemaType.ORGANIZATION,G11N_SERIVCE_COMMON_NAME_FORMAT);\n      }\n catch (      SMSException e) {\n        debug.error(\"AMCommonNameGenerator.addFormats\",e);\n      }\n    }\n else {\n      debug.error(\"AMCommonNameGenerator.addFormats: \" + \"formats are not added because Console cannot get \" + \"an instance of service schema manager.\");\n    }\n  }\n  Map mapFormats=getFormatMap(values);\nsynchronized (mapRealmToFormat) {\n    mapRealmToFormat.put(realm,mapFormats);\n  }\n  return mapFormats;\n}\n", "@Override\n\tpublic com.liferay.commerce.model.CommerceOrder createCommerceOrder(\n\t\tlong commerceOrderId) {\n\t\treturn _commerceOrderLocalService.createCommerceOrder(commerceOrderId);\n\t}", "public static xen_health_ftw[] get_filtered(nitro_service service, String filter) throws Exception\n\t{\n\t\txen_health_ftw obj = new xen_health_ftw();\n\t\toptions option = new options();\n\t\toption.set_filter(filter);\n\t\txen_health_ftw[] response = (xen_health_ftw[]) obj.getfiltered(service, option);\n\t\treturn response;\n\t}", "public void decrement ( long numerator , long denominator ) ;", "public void freeSLHolder ( IStoredListIterator < T > slh ) { if ( slh != null ) slh . release ( ) ; }", "public void act (GameObject subject, GameObject object) {\n\t\n\t\t//TODO: Consider not adding if value is duplicated on target.\n\t\t//TODO: Creature should not act on the same object twice!\n\t\t\n\t\tobject.addTag(tag);\n\t\t\n\t}", "@Override\n\tpublic String getTermsOfUseContent(String languageId, boolean useDefault) {\n\t\treturn _cpDefinitionVirtualSetting.getTermsOfUseContent(languageId,\n\t\t\tuseDefault);\n\t}", "  public TCEdgeView createDefaultView(TCGraph g, CellMapper cm) {\n    return new TCEdgeView(this, g, cm);\n  }\n", "public static String buildTopicNameForAgent( Instance instance ) {\n\t\tInstance scopedInstance = InstanceHelpers.findScopedInstance( instance );\n\t\treturn buildTopicNameForAgent( InstanceHelpers.computeInstancePath( scopedInstance ));\n\t}", "private void drawAnnoDragIndicators(final Graphics2D g,final WorkflowAnnotation anno,final Rectangle2D loc,final boolean printing){\n  if (printing) {\n    return;\n  }\n  AnnotationDragHelper dragged=model.getDragged();\n  if (dragged.getHoveredOperator() == null) {\n    return;\n  }\n  Graphics2D g2=(Graphics2D)g.create();\n  int padding=15;\n  Rectangle2D opRect=rendererModel.getOperatorRect(dragged.getHoveredOperator());\n  opRect=new Rectangle2D.Double(opRect.getX(),opRect.getY(),opRect.getWidth(),opRect.getHeight());\n  Rectangle2D shadowRect=new Rectangle2D.Double(opRect.getX() - padding - 1,opRect.getY() - padding - 1,opRect.getWidth() + 2 * padding + 1,opRect.getHeight() + 2 * padding + 1);\n  g2.setColor(DRAG_LINK_COLOR);\n  g2.setStroke(DRAG_BORDER_STROKE);\n  g2.draw(shadowRect);\n  g2.dispose();\n}\n", "public static boolean openYesNoQuestion ( final Shell parent , final String title , final String message , final String toggleMessage , final boolean defaultToggleState , final String preferenceKey ) { final IPreferenceStore prefStore = TFSCommonUIClientP", "    public boolean hasRequiredBy(String projname) {\n        for(int i=0;i<requiredBy.length;i++) {\n            if(requiredBy[i].getName().equals(projname)) {\n                return true; } }\n        return false;\n    }\n", "static boolean isJavaPropertyMethod(final String methodName) {\n        return (methodName.length() > PROPERTY_METHOD_PREFIX_LEN\n                && (methodName.startsWith(\"get\") || methodName.startsWith((\"set\"))));\n    }", "    public void setColor(Color color) {\n        if (!ObjectUtils.equalObjects(_color, color)) {\n            if (color != null) {\n                _color = color;\n            } else {\n                _color = _DEFAULT_COLOR;\n            }\n            fireProductNodeChanged(PROPERTY_NAME_COLOR);\n            setModified(true);\n        }\n    }\n", "\tpublic void setParams(RichMediaParams params) {\n\t\tif (flash) {\n\t\t\tput(PdfName.PARAMS, params);\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalPdfSyntaxException(\"Parameters can only be set for Flash instances.\");\n\t\t}\n\t}\n", "public void marshall(DeleteProvisionedProductPlanRequest deleteProvisionedProductPlanRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (deleteProvisionedProductPlanRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(deleteProvisionedProductPlanRequest.getAcceptLanguage(), ACCEPTLANGUAGE_BINDING);\n            protocolMarshaller.marshall(deleteProvisionedProductPlanRequest.getPlanId(), PLANID_BINDING);\n            protocolMarshaller.marshall(deleteProvisionedProductPlanRequest.getIgnoreErrors(), IGNOREERRORS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public static void createParentDirectories(String path){\n  File targetFile=new File(path);\n  File parent=targetFile.getParentFile();\n  if (!parent.exists() && !parent.mkdirs()) {\n    throw new IllegalStateException(\"Couldn't create dir: \" + parent);\n  }\n}\n", "@Override public void disconnect(){\n  connection.disconnect();\n}\n", "    public void removeCustomizer() {\n        if (viewCustomizer != null) {\n            viewCustomizer.getViewFrame().dispose();\n            viewCustomizer = null;\n        }\n    }\n", "@Override public int size(){\n  return indexToSymbolMap.size();\n}\n", "public int read(byte[] b, int off, int len) throws IOException {\n\n    if (currentOffset >= dataLength) {\n      return -1;\n    }\n    \n    return doRead(b,off,len);\n  }", "@Override\n    public int compareTo(final MutableByte other) {\n        return (this.value > other.value) ? 1 : ((this.value == other.value) ? 0 : -1);\n    }", "boolean isModifiedBy ( long txNum ) { internalLock . writeLock ( ) . lock ( ) ; try { return modifiedBy . contains ( txNum ) ; } finally { internalLock . writeLock ( ) . unlock ( ) ; } }", "IMouseStateChange mousePressed ( MouseEvent event , AbstractZyGraph < ? , ? > graph ) ;", "void removedAddressSpace ( INaviProject project , INaviAddressSpace addressSpace ) ;", "protected void updateSLA(int seconds) throws ActivityException {\n        try {\n            ProcessExecutor engine = this.getEngine();\n            super.loginfo(\"Update activity timeout as \" + seconds + \" seconds\");\n            InternalEvent delayMsg = InternalEvent.createActivityDelayMessage(this.getActivityInstance(),\n                    this.getMasterRequestId());\n            String eventName = ScheduledEvent.INTERNAL_EVENT_PREFIX+this.getActivityInstanceId() + \"timeout\";\n            engine.sendDelayedInternalEvent(delayMsg, seconds, eventName, true);\n        } catch (Exception e) {\n            throw new ActivityException(-1, \"Failed to update SLA for activity instance\"\n                    + this.getActivityInstanceId(), e);\n        }\n    }", "public AttributeVector column(String col) {\n        int i = -1;\n        for (int j = 0; j < attributes.length; j++) {\n            if (attributes[j].getName().equals(col)) {\n                i = j;\n                break;\n            }\n        }\n\n        if (i == -1) {\n            throw new IllegalArgumentException(\"Invalid column name: \" + col);\n        }\n\n        return column(i);\n    }", "public StreamConsumer(InputStream stream){\n  in=new BufferedInputStream(stream);\n  thread.start();\n}\n", "void debuggerClosedUnexpectedly ( DebuggerDebuggerClosedUnexpectedlyReply reply ) ;", "public void put ( float newValue ) { get ( newValue ) ; }", "public static double pdf(double x,double k,double theta){\n  if (x < 0) {\n    return 0.;\n  }\n  if (x == 0) {\n    return (k == 1.) ? theta : 0;\n  }\n  if (k == 1.) {\n    return Math.exp(-x * theta) * theta;\n  }\n  final double xt=x * theta;\n  return (xt == Double.POSITIVE_INFINITY) ? 0. : Math.exp((k - 1.0) * Math.log(xt) - xt - logGamma(k)) * theta;\n}\n", "\tprivate void parseMessageType(GameData data) throws IOException {\n\t\tID id = IntegerID.create(sc.argv[0].substring(12).trim());\n\t\tMessageType mt = data.getMsgType(id);\n\n\t\tif(mt == null) {\n\t\t\tmt = new MessageType(id);\n\t\t\tdata.addMsgType(mt);\n\t\t}\n\n\t\tsc.getNextToken(); // skip the block\n\n\t\twhile(!sc.eof && !sc.isBlock) {\n\t\t\tif((sc.argc == 2) && sc.argv[1].equalsIgnoreCase(\"text\")) {\n\t\t\t\tmt.setPattern(sc.argv[0]);\n\t\t\t} else if((sc.argc == 2) && sc.argv[1].equalsIgnoreCase(\"section\")) {\n\t\t\t\tmt.setSection(sc.argv[0]);\n\t\t\t} else {\n\t\t\t\tunknown(\"MESSAGETYPE\", false);\n\t\t\t}\n\n\t\t\tsc.getNextToken();\n\t\t}\n\t}\n", "public ActiveTunnel[] getRemoteForwardingTunnels(String key)\n\t\t\tthrows IOException {\n\n\t\tsynchronized (incomingtunnels) {\n\t\t\tif (incomingtunnels.containsKey(key)) {\n\t\t\t\tVector<ActiveTunnel> v = incomingtunnels.get(key);\n\t\t\t\tActiveTunnel[] t = new ActiveTunnel[v.size()];\n\t\t\t\tv.copyInto(t);\n\n\t\t\t\treturn t;\n\t\t\t}\n\t\t}\n\n\t\tif (!remoteforwardings.containsKey(key)) {\n\t\t\tthrow new IOException(key\n\t\t\t\t\t+ \" is not a valid remote forwarding configuration\");\n\t\t}\n\n\t\treturn new ActiveTunnel[] {};\n\t}", "public void registerFamily(String familyName, String fullName, String path) {\n        if (path != null)\n            trueTypeFonts.setProperty(fullName, path);\n        ArrayList tmp = (ArrayList) fontFamilies.get(familyName);\n        if (tmp == null) {\n            tmp = new ArrayList();\n            tmp.add(fullName);\n            fontFamilies.put(familyName, tmp);\n        }\n        else {\n            int fullNameLength = fullName.length();\n            boolean inserted = false;\n            for (int j = 0; j < tmp.size(); ++j) {\n                if (((String)tmp.get(j)).length() >= fullNameLength) {\n                    tmp.add(j, fullName);\n                    inserted = true;\n                    break;\n                }\n            }\n            if (!inserted)\n                tmp.add(fullName);\n        }\n    }", "\tpublic Object extract(final L list, final List<? extends T> positions, final IPositionConverter<? super T> positionConverter) {\n\t\treturn extract(list, positions, positionConverter, 0);\n\t}\n", "private void cmd_selection(Object source){\n  for (int i=0; i < m_selectionList.size(); i++) {\n    if (source == m_selectionList.get(i)) {\n      boolean selected=isSelectionSelected(source);\n      Decimalbox qty=m_qtyList.get(i);\n      qty.setReadonly(!selected);\n      return;\n    }\n  }\n  log.log(Level.SEVERE,\"not found - \" + source);\n}\n", "    private void sortCache() {\n        // Debug: Let the user know what we are doing\n        logger.debug(\"Sorting cache.\");\n\n        // Sort the list in reverse order\n        Collections.sort(cachedObjects, Collections.reverseOrder());\n    }\n", "public static ServerSideEncryption copyWithCustomerKey(SecretKey key) \n    throws InvalidKeyException, NoSuchAlgorithmException {\n    if (!isCustomerKeyValid(key)) {\n      throw new InvalidKeyException(\"The secret key is not a 256 bit AES key\");\n    }\n    return new ServerSideEncryptionCopyWithCustomerKey(key, MessageDigest.getInstance((\"MD5\")));\n  }", "public static void add(ClassFileTransformer t){\nsynchronized (transformers) {\n    transformers.add(t);\n  }\n}\n", "public void close() {\n        if (connected) {\n            try {\n                transport.close();\n                socket.close();\n            }\n            catch (IOException ex) {\n                logger.warn(\"Could not close socket\", ex);\n            }\n            connected = false;\n        }\n    }", "\tpublic void setMode(String mode) {\n\t\tif (mode.equalsIgnoreCase(MODE_REDIRECT_STRING))\n\t\t\tthis.mode = MODE_REDIRECT;\n\t\tif (mode.equalsIgnoreCase(MODE_SSL_STRING))\n\t\t\tthis.mode = MODE_SSL;\n\t\tif (mode.equalsIgnoreCase(MODE_HTTP_STRING))\n\t\t\tthis.mode = MODE_HTTP;\n\t\tif (mode.equalsIgnoreCase(MODE_HTTPPROXY_STRING))\n\t\t\tthis.mode = MODE_HTTPPROXY;\n\t\tif (mode.equalsIgnoreCase(MODE_GNUHTTPTUNNEL_STRING))\n\t\t\tthis.mode = MODE_GNUHTTPTUNNEL;\n\t}\n", "static Set<String> parsePathParameters(String path){\n  Matcher m=PARAM_URL_REGEX.matcher(path);\n  Set<String> patterns=new LinkedHashSet<String>();\n  while (m.find()) {\n    patterns.add(m.group(1));\n  }\n  return patterns;\n}\n", "public void addPingUrl(String url){\n  _pingUrls.add(url);\n}\n", "    public boolean isCellEditable(Object node, int column) {\n        // Tool column must be editable, for a folder to be expandable by mouse\n        return (column == TOOL_COLUMN);\n    }\n", "public Observable<ServiceResponse<NewsModel>> searchWithServiceResponseAsync(String query, SearchOptionalParameter searchOptionalParameter) {\n        if (query == null) {\n            throw new IllegalArgumentException(\"Parameter query is required and cannot be null.\");\n        }\n        final String acceptLanguage = searchOptionalParameter != null ? searchOptionalParameter.acceptLanguage() : null;\n        final String userAgent = searchOptionalParameter != null ? searchOptionalParameter.userAgent() : this.client.userAgent();\n        final String clientId = searchOptionalParameter != null ? searchOptionalParameter.clientId() : null;\n        final String clientIp = searchOptionalParameter != null ? searchOptionalParameter.clientIp() : null;\n        final String location = searchOptionalParameter != null ? searchOptionalParameter.location() : null;\n        final String countryCode = searchOptionalParameter != null ? searchOptionalParameter.countryCode() : null;\n        final Integer count = searchOptionalParameter != null ? searchOptionalParameter.count() : null;\n        final Freshness freshness = searchOptionalParameter != null ? searchOptionalParameter.freshness() : null;\n        final String market = searchOptionalParameter != null ? searchOptionalParameter.market() : null;\n        final Integer offset = searchOptionalParameter != null ? searchOptionalParameter.offset() : null;\n        final Boolean originalImage = searchOptionalParameter != null ? searchOptionalParameter.originalImage() : null;\n        final SafeSearch safeSearch = searchOptionalParameter != null ? searchOptionalParameter.safeSearch() : null;\n        final String setLang = searchOptionalParameter != null ? searchOptionalParameter.setLang() : null;\n        final String sortBy = searchOptionalParameter != null ? searchOptionalParameter.sortBy() : null;\n        final Boolean textDecorations = searchOptionalParameter != null ? searchOptionalParameter.textDecorations() : null;\n        final TextFormat textFormat = searchOptionalParameter != null ? searchOptionalParameter.textFormat() : null;\n\n        return searchWithServiceResponseAsync(query, acceptLanguage, userAgent, clientId, clientIp, location, countryCode, count, freshness, market, offset, originalImage, safeSearch, setLang, sortBy, textDecorations, textFormat);\n    }", "void singleStep ( DebuggerSingleStepReply reply ) ;", "public short readShort ( ) throws JMSException { initializeReading ( ) ; try { this . dataIn . mark ( Integer . MAX_VALUE ) ; return this . dataIn . readShort ( ) ; } catch ( EOFException eof ) { try { this . dataIn . reset ( ) ; } catch ( IOException e ) { JMSException jmsEx = new JMSException ( e . toString ( ) ) ; jmsEx . setLinkedException ( e ) ; throw jmsEx ; } JMSException jmsEx = new MessageEOFException ( eof . toString ( ) ) ; jmsEx . setLinkedException ( eof ) ; throw jmsEx ; } catch ( IOException ioe ) { try { this . dataIn . reset ( ) ; } catch ( IOException e ) { JMSException jmsEx = new JMSException ( e . toString ( ) ) ; jmsEx . setLinkedException ( e ) ; throw jmsEx ; } JMSException jmsEx = new MessageFormatException ( STR_ + ioe . toString ( ) ) ; jmsEx . setLinkedException ( ioe ) ; throw jmsEx ; } }", "public DatePickerSettings copySettings() {\n        DatePickerSettings result = new DatePickerSettings();\n        result.allowEmptyDates = this.allowEmptyDates;\n        result.allowKeyboardEditing = this.allowKeyboardEditing;\n        // \"result.borderCalendarPopup\" is left at its default value.\n        if (this.borderPropertiesList == null) {\n            result.borderPropertiesList = null;\n        } else {\n            result.borderPropertiesList\n                = new ArrayList<CalendarBorderProperties>(this.borderPropertiesList.size());\n            for (CalendarBorderProperties borderProperty : this.borderPropertiesList) {\n                result.borderPropertiesList.add(borderProperty.clone());\n            }\n        }\n        result.colorBackgroundWeekNumberLabels = this.colorBackgroundWeekNumberLabels;\n        result.colorBackgroundWeekdayLabels = this.colorBackgroundWeekdayLabels;\n        if (this.colors == null) {\n            result.colors = null;\n        } else {\n            // A shallow copy is okay here, because the map key and value are immutable types.\n            result.colors = new HashMap<DateArea, Color>(this.colors);\n        }\n        result.firstDayOfWeek = this.firstDayOfWeek;\n        // The Font class is immutable.\n        result.fontClearLabel = this.fontClearLabel;\n        result.fontCalendarDateLabels = this.fontCalendarDateLabels;\n        result.fontCalendarWeekdayLabels = this.fontCalendarWeekdayLabels;\n        result.fontCalendarWeekNumberLabels = this.fontCalendarWeekNumberLabels;\n        result.fontInvalidDate = this.fontInvalidDate;\n        result.fontMonthAndYearMenuLabels = this.fontMonthAndYearMenuLabels;\n        result.fontMonthAndYearNavigationButtons = this.fontMonthAndYearNavigationButtons;\n        result.fontTodayLabel = this.fontTodayLabel;\n        result.fontValidDate = this.fontValidDate;\n        result.fontVetoedDate = this.fontVetoedDate;\n        // The DateTimeFormatter class is immutable.\n        result.formatForDatesBeforeCommonEraStrict = this.formatForDatesBeforeCommonEraStrict;\n        result.formatForDatesCommonEraStrict = this.formatForDatesCommonEraStrict;\n        result.formatForTodayButton = this.formatForTodayButton;\n        result.formatsForParsingStrict = (this.formatsForParsingStrict == null)\n            ? null : (ArrayList<DateTimeFormatter>) this.formatsForParsingStrict.clone();\n        result.gapBeforeButtonPixels = this.gapBeforeButtonPixels;\n        // \"result.highlightPolicy\" is left at its default value.\n        result.isVisibleClearButton = this.isVisibleClearButton;\n        result.isVisibleDateTextField = this.isVisibleDateTextField;\n        result.isVisibleMonthMenuButton = this.isVisibleMonthMenuButton;\n        result.isVisibleNextMonthButton = this.isVisibleNextMonthButton;\n        result.isVisibleNextYearButton = this.isVisibleNextYearButton;\n        result.isVisiblePreviousMonthButton = this.isVisiblePreviousMonthButton;\n        result.isVisiblePreviousYearButton = this.isVisiblePreviousYearButton;\n        result.isVisibleTodayButton = this.isVisibleTodayButton;\n        result.isVisibleYearMenuButton = this.isVisibleYearMenuButton;\n        result.locale = (Locale) this.locale.clone();\n        // \"result.parentCalendarPanel\" is left at its default value.\n        // \"result.parentDatePicker\" is left at its default value.\n        result.sizeDatePanelMinimumHeight = this.sizeDatePanelMinimumHeight;\n        result.sizeDatePanelMinimumWidth = this.sizeDatePanelMinimumWidth;\n        result.sizeTextFieldMinimumWidth = this.sizeTextFieldMinimumWidth;\n        result.sizeTextFieldMinimumWidthDefaultOverride = this.sizeTextFieldMinimumWidthDefaultOverride;\n        // The translation arrays will never be null, and the String class is an immutable type.\n        result.translationArrayStandaloneLongMonthNames\n            = this.translationArrayStandaloneLongMonthNames.clone();\n        result.translationArrayStandaloneShortMonthNames\n            = this.translationArrayStandaloneShortMonthNames.clone();\n        result.translationClear = this.translationClear;\n        result.translationToday = this.translationToday;\n        // \"result.vetoPolicy\" is left at its default value.\n        // The WeekFields class is immutable.\n        result.weekNumberRules = this.weekNumberRules;\n        result.weekNumbersDisplayed = this.weekNumbersDisplayed;\n        result.weekNumbersWillOverrideFirstDayOfWeek = this.weekNumbersWillOverrideFirstDayOfWeek;\n        result.zSkipDrawIndependentCalendarPanelIfNeeded = false;\n        return result;\n    }", "public V putIfAbsent ( K key , V value , boolean unstableKey ) { if ( value == null ) throw new NullPointerException ( ) ; int hash = hash ( key . hashCode ( ) ) ; return segmentFor ( hash ) . put ( key , hash , value , BOOL_ , unstableKey ) ; }", "@Override\n  public Long hlen(final byte[] key) {\n    checkIsInMultiOrPipeline();\n    client.hlen(key);\n    return client.getIntegerReply();\n  }", "@OnWebSocketConnect public void onConnect(Session session){\n  this.websocketSession=session;\n  sendUpdate(this.websocketSession,this.oAuthToken,this.streamType,this.streamQuery,this.streamVersion,this.schemaVersion);\n}\n", "    public Object parseObject (String text, ParsePosition status) {\n        return format.parseObject( text, status );\n    }\n", "public static <K,V> ExtendedMutableConfiguration<K,V> of(Cache2kBuilder<K,V> builder) {\n    return of(builder.toConfiguration());\n  }", "private static char[] zzUnpackCMap(String packed){\n  char[] map=new char[0x10000];\n  int i=0;\n  int j=0;\n  while (i < 174) {\n    int count=packed.charAt(i++);\n    char value=packed.charAt(i++);\n    do     map[j++]=value;\n while (--count > 0);\n  }\n  return map;\n}\n", "\tprotected void addValuePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_RandomListType_value_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_RandomListType_value_feature\", \"_UI_RandomListType_type\"),\n\t\t\t\t Schema1Package.eINSTANCE.getRandomListType_Value(),\n\t\t\t\t true,\n\t\t\t\t ItemPropertyDescriptor.REAL_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public static <M extends Message>String writeJsonStream(ImmutableList<M> messages){\n  ByteArrayOutputStream resultStream=new ByteArrayOutputStream();\n  MessageWriter<M> writer=MessageWriter.create(Output.forStream(new PrintStream(resultStream)));\n  writer.writeAll(messages);\n  return resultStream.toString();\n}\n", "\tprotected ElementTableModel getTableModel() {\n\t\tif ( tableModel == null) {\n\t\t\ttableModel = new TodoTableModel();\n\t\t}\n\t\t\n\t\treturn tableModel;\t\t\n\t}\n", "  public OpenFile get(int fd) throws InvalidFileDescriptor {\n    OpenFile f = files.get(fd);\n    \n    if (f == null)\n      throw new InvalidFileDescriptor();\n    \n    return f;\n  }\n", "private void updateInfo(){\n  connectAddress=brokerAddressValue.getText();\n  willTopic=willTopicValue.getText();\n  willMessage=willMessageValue.getText();\n  clientId=clientIdValue.getText();\n  willQos=Integer.parseInt(willQosDrop.getText());\n  willRetain=willRetainCheckBox.getSelection();\n  username=usernameValue.getText();\n  password=passwordValue.getText();\n  try {\n    connectPort=Integer.parseInt(brokerPortValue.getText());\n  }\n catch (  NumberFormatException e) {\n  }\n  try {\n    keepAlive=Short.parseShort(keepAliveValue.getText());\n  }\n catch (  NumberFormatException e) {\n  }\n}\n", "    public VariableStack mapStackToLocal(VariableStack stack) {\n\tStructuredBlock[] subBlocks = getSubBlocks();\n\tVariableStack after;\n\tif (subBlocks.length == 0)\n\t    after = stack;\n\telse {\n\t    after = null;\n\t    for (int i=0; i< subBlocks.length; i++) {\n\t\tafter = VariableStack.merge\n\t\t    (after, subBlocks[i].mapStackToLocal(stack));\n\t    }\n\t}\n\tif (jump != null) {\n\t    /* assert(after != null) */\n\t    jump.stackMap = after;\n\t    return null;\n\t}\n\treturn after;\n    }\n", "public void addPoint(Location location){\n  points.add(location);\n}\n", "private static void removeAll ( final BreakpointManager manager ) { final Set < BreakpointAddress > addresses = new HashSet < BreakpointAddress > ( ) ; for ( final Breakpoint breakpoint : manager . getBreakpoints ( BreakpointType . REGULAR ) ) { addresses", "public static String buildScenario(List<String> urlList){\n  if (urlList == null || urlList.isEmpty()) {\n    return null;\n  }\n  StringBuilder strb=new StringBuilder();\n  strb.append(buildHeader());\n  Iterator<String> iter=urlList.iterator();\n  while (iter.hasNext()) {\n    strb.append(buildGetStep((iter.next())));\n    if (iter.hasNext()) {\n      strb.append(COMMA);\n    }\n  }\n  strb.append(buildFooter());\n  return strb.toString();\n}\n", "public void clear(){\n  this.point=null;\n  this.normal=null;\n  this.distance=0.0;\n}\n", "protected static void removeProvidedUpServices(Protocol protocol, List<Integer> events) {\n        if(protocol == null || events == null)\n            return;\n        for(Protocol prot=protocol.getDownProtocol(); prot != null && !events.isEmpty(); prot=prot.getDownProtocol()) {\n            List<Integer> provided_up_services=prot.providedUpServices();\n            if(provided_up_services != null && !provided_up_services.isEmpty())\n                events.removeAll(provided_up_services);\n        }\n    }", "public static void main(String[] args){\n  final File pathToThisJar=new File(findPathTo(CheckerMain.class,false));\n  ArrayList<String> alargs=new ArrayList<>(args.length);\n  alargs.addAll(Arrays.asList(args));\n  final CheckerMain program=new CheckerMain(pa", "public int computeWorkload() {\n\t\tint modelGeneration = BasicModelFactory.getModelGenerationWorkload(getModelBase(), getInputDataFile(), getDatabaseProduct());\n\t\treturn modelGeneration;\n\t}", "public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ) ; }", "public static <T>List<T> patch(List<T> original,Patch<T> patch) throws PatchFailedException {\n  return patch.applyTo(original);\n}\n", "protected void drawLabelTextAndBackground(Canvas canvas, char[] labelBuffer, int startIndex, int numChars,\n                                              int autoBackgroundColor) {\n        final float textX;\n        final float textY;\n\n        if (isValueLabelBackgroundEnabled) {\n\n            if (isValueLabelBackgroundAuto) {\n                labelBackgroundPaint.setColor(autoBackgroundColor);\n            }\n\n            canvas.drawRect(labelBackgroundRect, labelBackgroundPaint);\n\n            textX = labelBackgroundRect.left + labelMargin;\n            textY = labelBackgroundRect.bottom - labelMargin;\n        } else {\n            textX = labelBackgroundRect.left;\n            textY = labelBackgroundRect.bottom;\n        }\n\n        canvas.drawText(labelBuffer, startIndex, numChars, textX, textY, labelPaint);\n    }", "private boolean parseMusicTrack(){\n  if (parseMusic && text.startsWith(musicNote)) {\n    addToken(new MusicTrack(text.substring(musicNote.length())));\n    nextChar=text.length();\n    return true;\n  }\n  return false;\n}", "@SuppressWarnings(\"unused\") public RepositoryQuery resolveQuery(Method method,RepositoryMetadata metadata,NamedQueries namedQueries){\n  QueryLookupStrategy queryLookupStrategy=Factory.super.getQueryLookupStrategy(key,evaluationContextProvider);\n  Method resolveQuery=findMethod(QueryLookupStrategy.class,\"resolveQuery\",Method.class,RepositoryMetadata.class,NamedQueries.class);\n  try {\n    RepositoryQuery query=(RepositoryQuery)resolveQuery.invoke(queryLookupStrategy,method,metadata,namedQueries);\n    return wrapQuery(method,metadata,query);\n  }\n catch (  IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {\n    throw new RuntimeException(e);\n  }\n}\n", "private static boolean isEdgeDataValid(final Quad<Integer,IAddress,Integer,IAddress> edgeData){\n  if ((edgeData.second() == null) || (edgeData.fourth() == null)) {\n    return false;\n  }\n  if ((edgeData.first() == -1) || (edgeData.third() == -1)) {\n    return false;\n  }\n  return true;\n}\n", "public synchronized void add(Timer other) {\n        this.numStarts += other.numStarts;\n        this.totMs += other.totMs;\n        this.maxSplitMs = Math.max(this.maxSplitMs, other.maxSplitMs);\n        this.sumSqMs += other.sumSqMs;\n    }", "private void createButtons() {\n\n        m_buttonClose.setButtonStyle(ButtonStyle.TEXT, ButtonColor.GREEN);\n        m_buttonClose.setTitle(Messages.get().key(Messages.GUI_DIALOG_BUTTON_CLOSE_0));\n        m_buttonClose.setText(Messages.get().key(Messages.GUI_DIALOG_BUTTON_CLOSE_0));\n        m_buttonClose.setUseMinWidth(true);\n        m_buttonClose.addClickHandler(new ClickHandler() {\n\n            /**\n             * @see com.google.gwt.event.dom.client.ClickHandler#onClick(com.google.gwt.event.dom.client.ClickEvent)\n             */\n            public void onClick(ClickEvent event) {\n\n                actionClose();\n            }\n        });\n        m_frameDialog.addButton(m_buttonClose);\n\n        if (m_dialogData.getResources().size() > 1) {\n            m_buttonNext.setTitle(Messages.get().key(Messages.GUI_DIALOG_BUTTON_NEXT_0));\n            m_buttonNext.setText(Messages.get().key(Messages.GUI_DIALOG_BUTTON_NEXT_0));\n            m_buttonNext.setUseMinWidth(true);\n            m_buttonNext.addClickHandler(new ClickHandler() {\n\n                /**\n                 * @see com.google.gwt.event.dom.client.ClickHandler#onClick(com.google.gwt.event.dom.client.ClickEvent)\n                 */\n                public void onClick(ClickEvent event) {\n\n                    actionNext();\n                }\n            });\n            m_frameDialog.addButton(m_buttonNext);\n\n            m_buttonBack.setTitle(Messages.get().key(Messages.GUI_DIALOG_BUTTON_BACK_0));\n            m_buttonBack.setText(Messages.get().key(Messages.GUI_DIALOG_BUTTON_BACK_0));\n            m_buttonBack.setUseMinWidth(true);\n            m_buttonBack.addClickHandler(new ClickHandler() {\n\n                /**\n                 * @see com.google.gwt.event.dom.client.ClickHandler#onClick(com.google.gwt.event.dom.client.ClickEvent)\n                 */\n                public void onClick(ClickEvent event) {\n\n                    actionBack();\n                }\n            });\n            m_frameDialog.addButton(m_buttonBack);\n        }\n\n        if (isExplorerMode() && (m_resources.size() == 1)) {\n            m_buttonAdvanced.setButtonStyle(ButtonStyle.TEXT, ButtonColor.RED);\n            m_buttonAdvanced.setTitle(Messages.get().key(Messages.GUI_DIALOG_BUTTON_ADVANCED_0));\n            m_buttonAdvanced.setText(Messages.get().key(Messages.GUI_DIALOG_BUTTON_ADVANCED_0));\n            m_buttonAdvanced.setUseMinWidth(true);\n            m_buttonAdvanced.addClickHandler(new ClickHandler() {\n\n                /**\n                 * @see com.google.gwt.event.dom.client.ClickHandler#onClick(com.google.gwt.event.dom.client.ClickEvent)\n                 */\n                public void onClick(ClickEvent event) {\n\n                    actionAdvanced();\n                }\n            });\n            m_frameDialog.addButton(m_buttonAdvanced);\n        }\n    }", "public void clearSelection ( ) { List < Integer > selection = getSelectedItemsPosition ( ) ; selectedItems . clear ( ) ; for ( Integer i : selection ) { notifyItemChanged ( i ) ; } }", "protected synchronized void publish(LogRecord record) throws BadLocationException {\n    // choose an appropriate formatter\n    final Formatter fmt;\n    final Style style;\n    // always format progress messages using the progress formatter.\n    if(record.getLevel().intValue() >= Level.WARNING.intValue()) {\n      // format errors using the error formatter\n      fmt = errformat;\n      style = errStyle;\n    }\n    else if(record.getLevel().intValue() <= Level.FINE.intValue()) {\n      // format debug statements using the debug formatter.\n      fmt = debugformat;\n      style = dbgStyle;\n    }\n    else {\n      // default to the message formatter.\n      fmt = msgformat;\n      style = msgStyle;\n    }\n    // format\n    final String m;\n    m = fmt.format(record);\n    StyledDocument doc = getStyledDocument();\n    if(record instanceof ProgressLogRecord) {\n      if(lastNewlinePos < doc.getLength()) {\n        doc.remove(lastNewlinePos, doc.getLength() - lastNewlinePos);\n      }\n    }\n    else {\n      // insert a newline, if we didn't see one yet.\n      if(lastNewlinePos < doc.getLength()) {\n        doc.insertString(doc.getLength(), \"\\n\", style);\n        lastNewlinePos = doc.getLength();\n      }\n    }\n    int tail = tailingNonNewline(m, 0, m.length());\n    int headlen = m.length() - tail;\n    if(headlen > 0) {\n      String pre = m.substring(0, headlen);\n      doc.insertString(doc.getLength(), pre, style);\n    }\n    lastNewlinePos = doc.getLength();\n    if(tail > 0) {\n      String post = m.substring(m.length() - tail);\n      doc.insertString(lastNewlinePos, post, style);\n    }\n  }", "public boolean isJumping(){\n  if (steps.size() > 0) {\n    boolean jump=false;\n    for (    MoveStep step : steps) {\n      if (step.getType() == MovePath.MoveStepType.START_JUMP) {\n        jump=true;\n      }\n    }\n    return jump;\n  }\n  return false;\n}\n", "public static void removeMarkers ( IResource res ) throws CoreException { res . deleteMarkers ( FindBugsMarker . NAME , BOOL_ , IResource . DEPTH_INFINITE ) ; if ( res instanceof IProject ) { IProject project = ( IProject ) res ; FindbugsPlugin . clearBug", "public static float convertPixelsToDp ( float px , Context context ) { DisplayMetrics metrics = context . getResources ( ) . getDisplayMetrics ( ) ; return px / ( metrics . densityDpi / DisplayMetrics . DENSITY_DEFAULT ) ; }", "public final void setItem(final int index, final int id, @NonNull final CharSequence title,\n                              @Nullable final Drawable icon) {\n        Item item = new Item(id, title);\n        item.setIcon(icon);\n        adapter.set(index, item);\n        adaptGridViewHeight();\n    }", "public static void escapeCssStringMinimal(final String text, final Writer writer)\n            throws IOException {\n        escapeCssString(text, writer,\n                CssStringEscapeType.BACKSLASH_ESCAPES_DEFAULT_TO_COMPACT_HEXA,\n                CssStringEscapeLevel.LEVEL_1_BASIC_ESCAPE_SET);\n    }", "public static List<Bitmap> getCachedBitmapsForImageUri(String imageUri, ImageMemoryCache memoryCache) {\n\t\tList<Bitmap> values = new ArrayList<Bitmap>();\n\t\tfor (String key : memoryCache.getKeySet()) {\n\t\t\tif (key.startsWith(imageUri)) {\n\t\t\t\tvalues.add((Bitmap) memoryCache.getObjectFromCache(key));\n\t\t\t}\n\t\t}\n\t\treturn values;\n\t}", "public DiskBasedCache ( File rootDirectory , int maxCacheSizeInBytes ) { mRootDirectory = rootDirectory ; mMaxCacheSizeInBytes = maxCacheSizeInBytes ; }", "public static void addTableSRIDConstraint(Connection connection, TableLocation tableLocation, int srid)\n            throws SQLException {\n        //Alter table to set the SRID constraint\n        if (srid > 0) {\n            connection.createStatement().execute(String.format(\"ALTER TABLE %s ADD CHECK ST_SRID(the_geom)=%d\",\n                    tableLocation.toString(), srid));\n        }\n    }", "@Override public List<AppEntry> loadInBackground(){\n  List<ApplicationInfo> apps=mPm.getInstalledApplications(PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);\n  if (apps == null) {\n    apps=new ArrayList<ApplicationInfo>();\n  }\n  final Context context=getContext();\n  List<AppEntry> entries=new ArrayList<AppEntry>(apps.size());\n  for (int i=0; i < apps.size(); i++) {\n    AppEntry entry=new AppEntry(this,apps.get(i));\n    entry.loadLabel(context);\n    entries.add(entry);\n  }\n  Collections.sort(entries,ALPHA_COMPARATOR);\n  return entries;\n}\n", "protected float[] rhumbProject(Point2D from,Point2D to,boolean include_last,int nsegs){\n  if (nsegs < 1) {\n    nsegs=DrawUtil.pixel_distance((int)from.getX(),(int)from.getY(),(int)to.getX(),(int)to.getY()) >> 3;\n    if (nsegs == 0)     nsegs=1;\n else     if (nsegs > MAX_RHUMB_SEGS)     nsegs=MAX_RHUMB_SEGS;\n  }\n  LatLonPoint llp=new LatLonPoint.Double();\n  int[] xypts=DrawUtil.lineSegments((int)from.getX(),(int)from.getY(),(int)to.getX(),(int)to.getY(),nsegs,include_last,new int[nsegs << 1]);\n  float[] llpts=new float[xypts.length];\n  for (int i=0; i < llpts.length; i+=2) {\n    inverse(xypts[i],xypts[i + 1],llp);\n    llpts[i]=(float)llp.getRadLat();\n    llpts[i + 1]=(float)llp.getRadLon();\n  }\n  return llpts;\n}\n", "  public void addToAddrs(String toAddr) {\n    if (!toAddrs.contains(toAddr)) {\n      toAddrs.add(toAddr);\n    }\n  }\n", "  public boolean isEmpty() {\n    return this.selectedProjects.isEmpty();\n  }\n", "private boolean searchNextPc(final BigInteger pc,final HashMap<BigInteger,List<ReilInstruction>> instructions,final String programCounter){\n  for (int i=0; i < 10; i++) {\n    final BigInteger current=pc.add(BigInteger.valueOf(i));\n    if (instructions.containsKey(nativeToReil(current))) {\n      setRegister(programCounter,current,OperandSize.DWORD,ReilRegisterStatus.DEFINED);\n      return true;\n    }\n  }\n  return false;\n}\n", "public ApiRequestLogsResult listRequestLogs(DiagnosticsApi.ListRequestLogsOptions options) throws ApiException {\n    Object localVarPostBody = \"{}\";\n    \n    // create path and map variables\n    String localVarPath = \"/v2/diagnostics/request_logs\".replaceAll(\"\\\\{format\\\\}\",\"json\");\n\n    // query params\n    java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();\n    java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();\n    java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();\n\n    if (options != null) {\n       localVarQueryParams.addAll(apiClient.parameterToPairs(\"\", \"encoding\", options.encoding));\n    }\n    \n    \n      final String[] localVarAccepts = {\n    \"application/json\"\n      };\n      final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n\n      final String[] localVarContentTypes = {\n    \n      };\n      final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n\n      String[] localVarAuthNames = new String[] { \"docusignAccessCode\" }; //{  };\n\n        GenericType<ApiRequestLogsResult> localVarReturnType = new GenericType<ApiRequestLogsResult>() {};\n        return apiClient.invokeAPI(localVarPath, \"GET\", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);\n          }", "public MutableInt(final String value) throws NumberFormatException {\n  super();\n  this.value=Integer.parseInt(value);\n}\n", "public IQueryResultSet < IEntryPacket > groupBy ( IQueryResultSet < IEntryPacket > entries , List < SelectColumn > groupColumns ) throws SQLException ;", "\tpublic boolean isZScriptEnabled() {\n\t\treturn _zscriptEnabled;\n\t}\n", "public static com.liferay.commerce.account.model.CommerceAccount addCommerceAccount(\n\t\tcom.liferay.commerce.account.model.CommerceAccount commerceAccount) {\n\t\treturn getService().addCommerceAccount(commerceAccount);\n\t}", "public boolean add(E o) {\n    \tif(o!=null && !contains(o)){\n    \t\treturn super.add(o);\n    \t}\n    \treturn false;\n    }", "public void tick(){\n\t\t\n//\t\t\tit register the orders to be submitted \n\t\t\tcarteira.setCurrentOrdersSubmitted(ordersToBeExecuted);\n\t\t\t\n\t\t\tagentTO.tick(clock,simTime);\n\t\t\t//clock \ufffd definido por informa\ufffd\ufffdo enviada pelo Manager (QueryResult),em MessageHandler.", "private static boolean isForStatement(String line,int offset){\n  int forPos=line.indexOf(\"for\");\n  if (forPos != -1) {\n    if ((forPos == 0 || !Character.isJavaIdentifierPart(line.charAt(forPos - 1))) && (line.length() == forPos + 3 || !Character.isJavaIdentifierPart(line.charAt(forPos + 3))))     return true;\n  }\n  return false;\n}\n", "protected void reportProgress ( ) { String [ ] messages = ToolIO . getAllMessages ( ) ; for ( ; reported < messages . length ; reported ++ ) { System . out . println ( messages [ reported ] ) ; } }", "private void changeSimpleValue(String attributeName, int index, String value, List<String> parentPathElements) {\r\n\r\n        CmsAttributeHandler handler = getAttributeHandler(attributeName, parentPathElements);\r\n        handler.changeValue(value, index);\r\n    }", "    private void _init() throws Exception {\n        getNewSessionBean2().getSct0055RowSet().setCommand(\"SELECT * FROM SCR.SCT0055 WHERE ESTDO='0' WITH UR\");\n        sct0055DataProvider.setCachedRowSet((javax.sql.rowset.CachedRowSet)getValue(\"#{newSessionBean2.sct0055RowSetTipoIdent}\"));\n        \n    }\n", "public void buildTagInfo(XMLNode node, Content constructorDocTree) {\n        writer.addTags((ConstructorDoc) constructors.get(currentConstructorIndex),\n                constructorDocTree);\n    }", "public static FloatBuffer allocateFloatBuffer(float[] coords){\n  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(coords.length * BYTES_PER_FLOAT);\n  byteBuffer.order(ByteOrder.nativeOrder());\n  FloatBuffer floatBuffer=byteBuffer.asFloatBuffer();\n  floatBuffer.put(coords);\n  floatBuffer.position(0);\n  return floatBuffer;\n}\n", "    public void applyGraphics(Graphics2D g){\n        if(color!=null){\n            g.setColor(color);\n        }\n        if(stroke!=null){\n            g.setStroke(stroke);\n        }\n        if(paint!=null){\n            g.setPaint(paint);\n        }\n        if(composite!=null){\n            g.setComposite(composite);\n        }\n    }\n", "public static List<AttributeListExtension> findAll(Collection<? extends Extension> extensions)\n    {\n        List<AttributeListExtension> result = new ArrayList<AttributeListExtension>();\n        for (Extension extension : extensions)\n        {\n            if (ATTRIBUTE_LIST_EXTENSION_ID == extension.getId())\n                result.add((AttributeListExtension)extension);\n        }\n        return result;\n    }", "    public boolean hasFeatureDetectionMethod() {\n        return featureDetectionMethod != null;\n    }\n", "public CustomHeadersInterceptor addHeaderMultimap(Map<String, List<String>> headers) {\n        this.headers.putAll(headers);\n        return this;\n    }", "\tpublic void remove() {\n\t\tPMCustomer.getInstance().remove(getPersistence());\n\t}\n", "public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh)\n          throws org.xml.sax.SAXException\n  {\n    fsb().sendSAXComment(lh, m_start, m_length);\n  }", "\tprivate void addRandomMedium() {\n\t\tint randomNumber = pickANumber(medium.size());\n\t\tMessage random = (Message)medium.get(randomNumber);\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Randomly selected medium element \" + randomNumber + \" which has imagePath \" + random.getImagePath());\n\t\t}\n\t\tmedium.add(random);\n\t}\n", "public boolean closePane ( ) { return closePane ( mSlideableView , NUM_ ) ; }", "public static HttpRequest put ( final String baseUrl , final Map < ? , ? > params , final boolean encode ) { String url = append ( baseUrl , params ) ; return put ( encode ? encode ( url ) : url ) ; }", "public static base_response update(nitro_service client, nshostname resource) throws Exception {\n\t\tnshostname updateresource = new nshostname();\n\t\tupdateresource.hostname = resource.hostname;\n\t\tupdateresource.ownernode = resource.ownernode;\n\t\treturn updateresource.update_resource(client);\n\t}", "protected void unsetDestinationAddressFactory(ServiceReference<SIDestinationAddressFactory> ref) {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n            SibTr.entry(tc, \"unsetDestinationAddressFactory\", ref);\n        destinationAddressFactoryRef.setReference(ref);\n        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n            SibTr.exit(tc, \"unsetDestinationAddressFactory\");\n\n    }", "public static boolean canReplacePart(World world,BlockPos pos,IMultipart oldPart,IMultipart newPart){\n  IMultipartContainer container=getPartContainer(world,pos);\n  if (container == null)   return false;\n  return container.canReplacePart(oldPart,newPart);\n}\n", "    private String emailAddress = null;\n    public String getEmailAddress() { return this.emailAddress; }\n", "public static void selectNodesWithString ( final ZyGraph graph , final String searchString ) { Preconditions . checkNotNull ( graph , STR_ ) ; Preconditions . checkNotNull ( searchString , STR_ ) ; final GraphSearcher searcher = new GraphSearcher ( ) ; searcher . search ( GraphHelpers . getNodes ( graph ) , new ArrayList < NaviEdge > ( ) , searchString ) ; final List < SearchResult > results = searcher . getResults ( ) ; final List < NaviNode > resultNodes = new ArrayList < NaviNode > ( ) ; for ( final SearchResult searchResult : results ) { resultNodes . add ( ( NaviNode ) searchResult . getObject ( ) ) ; } graph . selectNodes ( resultNodes , BOOL_ ) ; searcher . dispose ( ) ; }", "\tpublic void sniffingAddResults(){\n\t\tIterator iter = analyser.sniffingGetResult().values().iterator();\n\t\tHostCommRenderer target;\n\t\t\n\t\twhile(iter.hasNext()) {\n\t\t\ttarget = ((HostCommRenderer)iter.next());\n          \t\n    \t\tElement host = new Element(\"host\");\n    \t\tAttribute dst = new Attribute(\"ip\", target.getIpAddress());\n    \t\thost.setAttribute(dst);\n    \t\tsniffingResultsRoot.addContent(host);\n         }\t\n\t}\n", "\tpublic void setNavigator(boolean bNav) {\n\t\tUIInternalImage f = (UIInternalImage) desktop.getSelectedFrame();\n\n\t\tif (bNav) {\n\t\t\tif (dialogNavigator == null)\n\t\t\t\tdialogNavigator =\n\t\t\t\t\tnew UIDialogNavigator(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tUITools.getString(\"program.Navigator\"),\n\t\t\t\t\t\tf.getScrollPane(),\n\t\t\t\t\t\tf.getImage(),\n\t\t\t\t\t\tf.getImageDisplay());\n\t\t\tdialogNavigator.setVisible(true);\n\t\t} else {\n\t\t\tif (dialogNavigator != null)\n\t\t\t\tdialogNavigator.dispose();\n\t\t\tdialogNavigator = null;\n\t\t\ttgNavigator.setSelected(false);\n\t\t}\n\n\t}\n", "public void add(ResourceCollection rc){\n  classFiles.add(rc);\n}\n", "protected void readImage(){\n  ix=readShort();\n  iy=readShort();\n  iw=readShort();\n  ih=readShort();\n  int packed=read();\n  lctFlag=(packed & 0x80) != 0;\n  interlace=(packed & 0x40) != 0;\n  lctSize=2 << (packed & 7);\n  if (lctFlag) {\n    lct=readColorTable(lctSize);\n    act=lct;\n  }\n else {\n    act=gct;\n    if (bgIndex == transIndex)     bgColor=0;\n  }\n  int save=0;\n  if (transparency) {\n    save=act[transIndex];\n    act[transIndex]=0;\n  }\n  if (act == null) {\n    status=STATUS_FORMAT_ERROR;\n  }\n  if (err())   return;\n  decodeImageData();\n  skip();\n  if (err())   return;\n  frameCount++;\n  image=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB_PRE);\n  setPixels();\n  frames.add(new GifFrame(image,delay));\n  if (transparency) {\n    act[transIndex]=save;\n  }\n  resetFrame();\n}\n", "\tpublic boolean intersectsPath(DPath p, int tolerance){\n\t\treturn intersectsPath(p, tolerance, vx, vy);\n\t}\n", "synchronized boolean goToWifiSettingsIfDisconnected ( ) { final NetworkInfo info = mConnectivityManager . getActiveNetworkInfo ( ) ; if ( info == null || ! info . isConnected ( ) ) { Toast . makeText ( this , getString ( R . string . wifi_unavailable_erro", "void loadMethodIds ( ) throws IOException { int count = mHeaderItem . methodIdsSize ; mMethodIds = new MethodIdItem [ count ] ; seek ( mHeaderItem . methodIdsOff ) ; for ( int i = NUM_ ; i < count ; i ++ ) { mMethodIds [ i ] = new MethodIdItem ( ) ; mMeth", "public double distance(IntVector v){\n  double deltaX=v.x - x, deltaY=v.y - y, deltaZ=v.z - z;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);\n}\n", "public static List<Response> executeBatchAndWait(RequestBatch requests){\n  Validate.notEmptyAndContainsNoNulls(requests,\"requests\");\n  HttpURLConnection connection=null;\n  try {\n    connection=toHttpConnection(requests);\n  }\n catch (  Exception ex) {\n    List<Response> responses=Response.constructErrorResponses(requests.getRequests(),null,new FacebookException(ex));\n    runCallbacks(requests,responses);\n    return responses;\n  }\n  List<Response> responses=executeConnectionAndWait(connection,requests);\n  return responses;\n}\n", "@Override\n    public Set<OWLAxiom> getPendingAxiomRemovals() {\n        Set<OWLAxiom> removed = new HashSet<OWLAxiom>();\n        for (OWLOntologyChange change : rawChanges) {\n            if (change instanceof RemoveAxiom) {\n                removed.add(change.getAxiom());\n            }\n        }\n        return removed;\n    }", "protected NodeVector getVector() {\n      NodeVector nv = (m_cache != null) ?  m_cache.getVector() : null;\n      return nv;\n  }", "public static View showTips ( View targetView , TipsType tipsType ) { Tips tips = tipsType . createTips ( targetView . getContext ( ) ) ; return tips . applyTo ( targetView , tipsType . ordinal ( ) ) ; }", "    private  JCustomerCreatorDialog(java.awt.Dialog parent, boolean modal) {\n        super(parent, modal);\n    }\n", "public int valueForXPosition(int xPos){\n  int value;\n  int minValue=slider.getMinimum();\n  int maxValue=slider.getMaximum();\n  int trackLeft=trackRect.x + thumbRect.width / 2 + trackBorder;\n  int trackRight=trackRect.x + trackRect.width - thumbRect.width / 2 - trackBorder;\n  int trackLength=trackRight - trackLeft;\n  if (xPos <= trackLeft) {\n    value=drawInverted() ? maxValue : minValue;\n  }\n else   if (xPos >= trackRight) {\n    value=drawInverted() ? minValue : maxValue;\n  }\n else {\n    int distanceFromTrackLeft=xPos - trackLeft;\n    double valueRange=(double)maxValue - (double)minValue;\n    double valuePerPixel=valueRange / (double)trackLength;\n    int valueFromTrackLeft=(int)Math.round(distanceFromTrackLeft * valuePerPixel);\n    value=drawInverted() ? maxValue - valueFromTrackLeft : minValue + valueFromTrackLeft;\n  }\n  return value;\n}\n", "public static Builder createBuilder ( Header header , WritableFontData data ) { return new Builder ( header , data ) ; }", "private String determineBaseEcosystem(String description) {\n        if (description == null) {\n            return null;\n        }\n        int idx = StringUtils.indexOfIgnoreCase(description, \".php\");\n        if ((idx > 0 && (idx + 4 == description.length() || !Character.isLetterOrDigit(description.charAt(idx + 4))))\n                || StringUtils.containsIgnoreCase(description, \"wordpress\")\n                || StringUtils.containsIgnoreCase(description, \"drupal\")\n                || StringUtils.containsIgnoreCase(description, \"joomla\")\n                || StringUtils.containsIgnoreCase(description, \"moodle\")\n                || StringUtils.containsIgnoreCase(description, \"typo3\")) {\n            return ComposerLockAnalyzer.DEPENDENCY_ECOSYSTEM;\n        }\n        if (StringUtils.containsIgnoreCase(description, \" npm \")\n                || StringUtils.containsIgnoreCase(description, \" node.js\")) {\n            return AbstractNpmAnalyzer.NPM_DEPENDENCY_ECOSYSTEM;\n        }\n        idx = StringUtils.indexOfIgnoreCase(description, \".pm\");\n        if (idx > 0 && (idx + 3 == description.length() || !Character.isLetterOrDigit(description.charAt(idx + 3)))) {\n            return \"perl\";\n        } else {\n            idx = StringUtils.indexOfIgnoreCase(description, \".pl\");\n            if (idx > 0 && (idx + 3 == description.length() || !Character.isLetterOrDigit(description.charAt(idx + 3)))) {\n                return \"perl\";\n            }\n        }\n        idx = StringUtils.indexOfIgnoreCase(description, \".java\");\n        if (idx > 0 && (idx + 5 == description.length() || !Character.isLetterOrDigit(description.charAt(idx + 5)))) {\n            return JarAnalyzer.DEPENDENCY_ECOSYSTEM;\n        } else {\n            idx = StringUtils.indexOfIgnoreCase(description, \".jsp\");\n            if (idx > 0 && (idx + 4 == description.length() || !Character.isLetterOrDigit(description.charAt(idx + 4)))) {\n                return JarAnalyzer.DEPENDENCY_ECOSYSTEM;\n            }\n        }\n        if (StringUtils.containsIgnoreCase(description, \" grails \")) {\n            return JarAnalyzer.DEPENDENCY_ECOSYSTEM;\n        }\n\n        idx = StringUtils.indexOfIgnoreCase(description, \".rb\");\n        if (idx > 0 && (idx + 3 == description.length() || !Character.isLetterOrDigit(description.charAt(idx + 3)))) {\n            return RubyBundleAuditAnalyzer.DEPENDENCY_ECOSYSTEM;\n        }\n        if (StringUtils.containsIgnoreCase(description, \"ruby gem\")) {\n            return RubyBundleAuditAnalyzer.DEPENDENCY_ECOSYSTEM;\n        }\n\n        idx = StringUtils.indexOfIgnoreCase(description, \".py\");\n        if ((idx > 0 && (idx + 3 == description.length() || !Character.isLetterOrDigit(description.charAt(idx + 3))))\n                || StringUtils.containsIgnoreCase(description, \"django\")) {\n            return PythonPackageAnalyzer.DEPENDENCY_ECOSYSTEM;\n        }\n\n        if (StringUtils.containsIgnoreCase(description, \"buffer overflow\")\n                && !StringUtils.containsIgnoreCase(description, \"android\")) {\n            return CMakeAnalyzer.DEPENDENCY_ECOSYSTEM;\n        }\n        idx = StringUtils.indexOfIgnoreCase(description, \".c\");\n        if (idx > 0 && (idx + 2 == description.length() || !Character.isLetterOrDigit(description.charAt(idx + 2)))) {\n            return CMakeAnalyzer.DEPENDENCY_ECOSYSTEM;\n        } else {\n            idx = StringUtils.indexOfIgnoreCase(description, \".cpp\");\n            if (idx > 0 && (idx + 4 == description.length() || !Character.isLetterOrDigit(description.charAt(idx + 4)))) {\n                return CMakeAnalyzer.DEPENDENCY_ECOSYSTEM;\n            } else {\n                idx = StringUtils.indexOfIgnoreCase(description, \".h\");\n                if (idx > 0 && (idx + 2 == description.length() || !Character.isLetterOrDigit(description.charAt(idx + 2)))) {\n                    return CMakeAnalyzer.DEPENDENCY_ECOSYSTEM;\n                }\n            }\n        }\n        return null;\n    }", "    public void setPattern(Diagram diagram) {\n        this.diagram = diagram;\n        repaint();\n    }\n", "protected void incorporateDigestMethod(final Element parentDom,final DigestAlgorithm digestAlgorithm){\n  final Element digestMethodDom=documentDom.createElementNS(XMLNS,DS_DIGEST_METHOD);\n  final String digestAlgorithmXmlId=digestAlgorithm.getXmlId();\n  digestMethodDom.setAttribute(ALGORITHM,digestAlgorithmXmlId);\n  parentDom.appendChild(digestMethodDom);\n}\n", "public void remoteInvalidate(String sessionId, boolean backendUpdate) {\n        IStore iStore = _coreHttpSessionManager.getIStore();\n        ((MemoryStore) iStore).remoteInvalidate(sessionId, backendUpdate);\n    }", "    static ChannelSystem defaultSystem() {\n        return defaultFactory.channelSystem();\n    }\n", "public void stopHttpTransfers(){\n  List<Transfer> transfers=new ArrayList<>();\n  transfers.addAll(httpDownloads);\n  for (  Transfer t : transfers) {\n    if (t instanceof Transfer && !t.isComplete() && t.isDownloading()) {\n      t.remove(false);\n    }\n  }\n}\n", "public void setContent(Widget content) {\r\n\r\n        if (m_content != null) {\r\n            m_content.removeFromParent();\r\n        }\r\n        if (m_isFrame) {\r\n            m_contentPanel.setWidget(content);\r\n        } else {\r\n            m_popup.setMainContent(content);\r\n        }\r\n        m_content = content;\r\n    }", "public static void writeDouble(double num, DataOutput out) throws IOException {\n        writeLong(Double.doubleToLongBits(num), out);\n    }", "public void append(long startDrId, long endDrId, long spUniqueId, long mpUniqueId) {\n        assert(startDrId <= endDrId && (m_map.isEmpty() || startDrId > end(m_map.span())));\n\n        addRange(startDrId, endDrId, spUniqueId, mpUniqueId);\n    }", "public Observable<Void> beginFailoverPriorityChangeAsync(String resourceGroupName, String accountName, List<FailoverPolicy> failoverPolicies) {\n        return beginFailoverPriorityChangeWithServiceResponseAsync(resourceGroupName, accountName, failoverPolicies).map(new Func1<ServiceResponse<Void>, Void>() {\n            @Override\n            public Void call(ServiceResponse<Void> response) {\n                return response.body();\n            }\n        });\n    }", "public static DistributionConfigImpl produce(Properties props,boolean isConnected){\n  if (props != null) {\n    Object o=props.get(DS_CONFIG_NAME);\n    if (o instanceof DistributionConfigImpl) {\n      return (DistributionConfigImpl)o;\n    }\n  }\n  return new DistributionConfigImpl(props,false,isConnected);\n}\n", "public CircuitBreakerBuilder circuitOpenWindowMillis(long circuitOpenWindowMillis){\n  circuitOpenWindow(Duration.ofMillis(circuitOpenWindowMillis));\n  return this;\n}\n", "public ApiExceptionHandlerBase ( ProjectApiErrors projectApiErrors , List < ApiExceptionHandlerListener > apiExceptionHandlerListenerList , ApiExceptionHandlerUtils utils ) { if ( projectApiErrors == null ) throw new IllegalArgumentException ( STR_ ) ; if", "public boolean noContent ( ) throws HttpRequestException { return HTTP_NO_CONTENT == code ( ) ; }", "public synchronized void add(String name,long threadId){\n  if (mFinished) {\n    throw new IllegalStateException(\"Marker added to finished log\");\n  }\n  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));\n}\n", "    public void setVisibleUser(View2DDisplayer displayer, boolean visible) {\n        performFirstVisibleInitialization();\n        View2D view = getView(displayer);\n        if (view != null) {\n            // Note: update immediately\n            view.setVisibleUser(visible);\n        }\n    }\n", "protected boolean startingMultiLineComment(String content,int startOffset,int endOffset) throws BadLocationException {\n  if (!getMultiLineComment()) {\n    return false;\n  }\n  int index=indexOf(content,getMultiLineCommentStart(),startOffset);\n  if ((index ", "public float maximumAbsolute ( ) { if ( Math . abs ( mLeft ) > Math . abs ( mRight ) ) { return Math . abs ( mLeft ) ; } else { return Math . abs ( mRight ) ; } }", "    public BugInstance addClassAndMethod(MethodGen methodGen, String sourceFile) {\n        addClass(methodGen.getClassName());\n        addMethod(methodGen, sourceFile);\n        return this;\n    }\n", "public void addRule(String ruleExpression,T resultIfMatched){\n  mRuleMap.add(new MimeMatcherRule(ruleExpression,resultIfMatched));\n}", "public IMouseState createBackgroundClickedLeftState ( final MouseEvent event ) { final CBackgroundClickedLeftState < NodeType > state = new CBackgroundClickedLeftState < NodeType > ( this , m_graph ) ; m_factory . createBackgroundClickedLeftAction ( ) . execute ( state , event ) ; return state ; }", "@Override public Iterator<FieldInfo> iterator(){\n  return values.iterator();\n}\n", "public final static Function<Short, Short> pow(int power, MathContext mathContext) {\r\n        return new Pow(power, mathContext);\r\n    }", "public IVersion getVersion(String vstring) throws InvalidRangeException\n  {\n    IVersionRange range = getRange(vstring);\n    if (range == null) {\n      return null;\n    }\n    return range.getMinimum();\n  }", "public static void addValueHashCodeCall(CodeBuilder b,\r\n                                            TypeDesc valueType,\r\n                                            boolean testForNull,\r\n                                            boolean mixIn) \r\n    {\r\n        LocalVariable value = null;\r\n        if (mixIn) {\r\n            value = b.createLocalVariable(null, valueType);\r\n            b.storeLocal(value);\r\n\r\n            // Multiply current hashcode by 31 before adding more to it.\r\n            b.loadConstant(31);\r\n            b.math(Opcode.IMUL);\r\n\r\n            b.loadLocal(value);\r\n        }\r\n\r\n        switch (valueType.getTypeCode()) {\r\n        case TypeDesc.FLOAT_CODE:\r\n            b.invokeStatic(TypeDesc.FLOAT.toObjectType(), \"floatToIntBits\",\r\n                           TypeDesc.INT, new TypeDesc[]{TypeDesc.FLOAT});\r\n            // Fall through\r\n        case TypeDesc.INT_CODE:\r\n        case TypeDesc.CHAR_CODE:\r\n        case TypeDesc.SHORT_CODE:\r\n        case TypeDesc.BYTE_CODE:\r\n        case TypeDesc.BOOLEAN_CODE:\r\n            if (mixIn) {\r\n                b.math(Opcode.IADD);\r\n            }\r\n            break;\r\n\r\n        case TypeDesc.DOUBLE_CODE:\r\n            b.invokeStatic(TypeDesc.DOUBLE.toObjectType(), \"doubleToLongBits\",\r\n                           TypeDesc.LONG, new TypeDesc[]{TypeDesc.DOUBLE});\r\n            // Fall through\r\n        case TypeDesc.LONG_CODE:\r\n            b.dup2();\r\n            b.loadConstant(32);\r\n            b.math(Opcode.LUSHR);\r\n            b.math(Opcode.LXOR);\r\n            b.convert(TypeDesc.LONG, TypeDesc.INT);\r\n            if (mixIn) {\r\n                b.math(Opcode.IADD);\r\n            }\r\n            break;\r\n\r\n        case TypeDesc.OBJECT_CODE:\r\n        default:\r\n            if (testForNull) {\r\n                if (value == null) {\r\n                    value = b.createLocalVariable(null, valueType);\r\n                    b.storeLocal(value);\r\n                    b.loadLocal(value);\r\n                }\r\n            }\r\n            if (mixIn) {\r\n                Label isNull = b.createLabel();\r\n                if (testForNull) {\r\n                    b.ifNullBranch(isNull, true);\r\n                    b.loadLocal(value);\r\n                }\r\n                addValueHashCodeCallTo(b, valueType);\r\n                b.math(Opcode.IADD);\r\n                if (testForNull) {\r\n                    isNull.setLocation();\r\n                }\r\n            } else {\r\n                Label cont = b.createLabel();\r\n                if (testForNull) {\r\n                    Label notNull = b.createLabel();\r\n                    b.ifNullBranch(notNull, false);\r\n                    b.loadConstant(0);\r\n                    b.branch(cont);\r\n                    notNull.setLocation();\r\n                    b.loadLocal(value);\r\n                }\r\n                addValueHashCodeCallTo(b, valueType);\r\n                if (testForNull) {\r\n                    cont.setLocation();\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }", "public void sendAdd(File file, String baseURI, RDFFormat dataFormat, Resource... contexts) throws RDFParseException {\n\t\tgetClient().performAdd(file, baseURI, dataFormat, this.tx, contexts);\n\t}", "private byte [ ] readArray ( Command command , int value , int index , int length ) throws LibUsbException , UsbException { if ( mDeviceHandle != null ) { ByteBuffer buffer = ByteBuffer . allocateDirect ( length ) ; int transferred = LibUsb . controlTrans", "    public boolean delete(int id) {\n\tString sql = \"DELETE FROM position WHERE id = \" + String.valueOf(id);\n\ttry {\n\t    DBAccessor.getInstance().executeQuery(sql);\n\t    return true;\n\t} catch (Exception e) {\n\t    e.printStackTrace();\n\t    return false;\n\t}\n    }\n", "private static String sanitizeString(String str){\n  if (!str.startsWith(\"http\") && str.length() > MAX_STRING_LEN) {\n    str=str.substring(0,MAX_STRING_LEN) + \"[...]\";\n  }\n  return escapeString(str);\n}\n", "\tpublic void uninstall() {\n\t\tthis.getRootNode().detachChild(\n\t\t\t\tgetTerrainMarker().getShape());\n\t}\n", "    public double getMinutes() {\n        double v = value * (180.0d / Math.PI);\n        v -= getDegrees();\n        return 60 * v; // 60 minutes in one degree.\n    }\n", "public void exportStaticResources(Vector linksToExport) throws CmsException {\n\n    m_rb.exportStaticResources(m_context.currentUser(), m_context.currentProject(),\n             this, linksToExport);\n}\n", "public TransportCandidate getPreferredCandidate() {\n        TransportCandidate result = null;\n\n        ArrayList<ICECandidate> cands = new ArrayList<>();\n        for (TransportCandidate tpcan : getCandidatesList()) {\n            if (tpcan instanceof ICECa", "public synchronized boolean execute(String sql) throws SQLException {\n\n        fetchResult(sql, StatementTypes.RETURN_ANY,\n                    JDBCStatementBase.NO_GENERATED_KEYS, null, null);\n\n        return resultIn.isData();\n    }", "public static File createTempFile(){\n  File tempFile;\n  try {\n    tempFile=File.createTempFile(\"cqengine_\",\".db\");\n  }\n catch (  Exception e) {\n    throw new IllegalStateException(\"Failed to create temp file for CQEngine disk persistence\",e);\n  }\n  return tempFile;\n}\n", "public String valueString ( ) { byte [ ] barr = new byte [ rawData . length * NUM_ ] ; ByteBuffer b = ByteBuffer . wrap ( barr , NUM_ , barr . length ) ; b . order ( java . nio . ByteOrder . LITTLE_ENDIAN ) ; IntBuffer i = b . asIntBuffer ( ) ; i . put ( ", "private ThreadState convertThreadState(final int value){\nswitch (value) {\ncase 0:\n    return ThreadState.RUNNING;\ncase 1:\n  return ThreadState.SUSPENDED;\ndefault :\nthrow new IllegalArgumentException(String.format(\"Received invalid thread state %d\",value));\n}\n}\n", "private void read(InputNode node,Object list,int index) throws Exception {\n  Class type=entry.getType();\n  Object value=null;\n  if (!node.isEmpty()) {\n    value=root.read(node,type);\n  }\n  Array.set(list,index,value);\n}\n", "protected PostgreSQLModuleViewsLoader ( ) { }", "public static boolean isBoolean ( final Class type ) { if ( Boolean . class . isAssignableFrom ( type ) ) { return BOOL_ ; } return type . getName ( ) . equals ( STR_ ) ; }", "public synchronized final Map < K , V > snapshot ( ) { return new LinkedHashMap < K , V > ( map ) ; }", "public double min(double... values) {\n        double min = Double.MAX_VALUE;\n        for (int i = 0; i < values.length; i++) {\n            if (i == 0 || values[i] < min) {\n                min = values[i];\n            }\n        }\n        \n        return min;\n    }", "\tpublic Node applyTransform(Reader source) throws SmooksException {\n\t\tNode deliveryNode;\n\t\t\n\t\tif(source == null) {\n\t\t\tthrow new IllegalArgumentException(\"null 'source' arg passed in method call.\");\n\t\t} \n\t\t\n\t\ttry {\n\t\t\tDocument document = Parser.parse(source); \n\t\t\t\n\t\t\tdeliveryNode = applyTransform(document);\n\t\t} catch(Exception cause) {\n\t\t\tthrow new SmooksException(\"Unable to transform InputStream for target device [\" + containerRequest.getUseragentContext().getCommonName() + \"].\", cause);\n\t\t}\n\t\t\n\t\treturn deliveryNode;\n\t}\n", "public synchronized static void updateDbCredentials ( String dbURL , String oldUser , String oldPassword , String newUser , String newPassword ) { ODatabaseDocumentTx db = null ; try { db = new ODatabaseDocumentTx ( dbURL ) ; db . open ( oldUser , oldPassword ) ; OSecurity security = db . getMetadata ( ) . getSecurity ( ) ; security . dropUser ( oldUser ) ; security . createUser ( newUser , newPassword , security . getRole ( ORole . ADMIN ) ) ; } catch ( Exception e ) { logger . error ( STR_ , e ) ; } finally { if ( db != null ) { db . close ( ) ; } } }", "public static void updateCategory(Context context,Category category){\n  if (mCategories != null && mCategories.contains(category)) {\n    final int location=mCategories.indexOf(category);\n    mCategories.remove(location);\n    mCategories.add(location,category);\n  }\n  SQLiteDatabase writableDatabase=getWritableDatabase(context);\n  ContentValues categoryValues=createContentValuesFor(category);\n  writableDatabase.update(CategoryTable.NAME,categoryValues,CategoryTable.COLUMN_ID + \"=?\",new String[]{category.getId()});\n  final List<Quiz> quizzes=category.getQuizzes();\n  updateQuizzes(writableDatabase,quizzes);\n}\n", "public void start ( ) { this . prestartAllCoreThreads ( ) ; }", "public static void executeStrategyOnExcelSheet(InputStream is,RowStrategy rowStrategy,ExcelUtilStatus status) throws IOException {\n  BufferedInputStream bis=new BufferedInputStream(is);\n  bis.mark(32);\n  Map<String,Integer> headerMapping=new HashMap<String,Integer>();\n  try {\n    Workbook workbook=WorkbookFactory.create(bis);\n    Sheet sheet=workbook.getSheetAt(0);\n    status.setTotalNumberOfRows(sheet.getLastRowNum());\n    Iterator<Row> rowIterator=sheet.rowIterator();\n    while (rowIterator.hasNext()) {\n      status.newRow();\n      Row row=rowIterator.next();\n      if (status.getCurrentRowNumber() == 1) {\n        headerMapping=readHeaderMapping(row);\n      }\n else {\n        try {\n          Map<String,Object> content=getRowAsMap(row,headerMapping);\n          rowStrategy.executeRow(content);\n          status.addSuccesfulRow();\n        }\n catch (        Exception e) {\n          status.addFailedRowWithException(e);\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    Logger.warn(ExcelUtil.class,\"Can't read Excel file, trying csv format: \" + e.getMessage());\n    bis.reset();\n    ICsvMapReader inFile=new CsvMapReader(new InputStreamReader(bis),CsvPreference.EXCEL_PREFERENCE);\n    try {\n      final String[] header=inFile.getHeader(true);\n      Map<String,String> stringMap;\n      while ((stringMap=inFile.read(header)) != null) {\n        Map<String,Object> row=getStringMapAsMap(stringMap);\n        try {\n          rowStrategy.executeRow(row);\n          status.addSuccesfulRow();\n        }\n catch (        Exception e2) {\n          status.addFailedRowWithException(e2);\n        }\n      }\n    }\n catch (    IOException ioe) {\n      Logger.error(ExcelUtil.class,\"Can't read excel file as CSV\",ioe);\n      Logger.error(ExcelUtil.class,\"Original WorkbookFactory excel reader error:\",e);\n    }\n  }\n  status.setFinished();\n}\n", "public void checkJvmMemPoolThreshold(Long x) throws SnmpStatusException {\n  if (!pool.isUsageThresholdSupported())   throw new SnmpStatusException(SnmpDefinitions.snmpRspInconsistentValue);\n  final long val=x.longValue();\n  if (val < 0)   throw new SnmpStatusException(SnmpDefinitions.snmpRspWrongValue);\n}\n", "public static FieldDeclaration getFieldDeclaration(TypeDeclaration type, String fieldName)\n            throws FieldDeclarationNotFoundException {\n        requireNonNull(type, \"type declaration\");\n        requireNonNull(fieldName, \"field name\");\n\n        for (FieldDeclaration field : type.getFields()) {\n            for (Object fragObj : field.fragments()) {\n                VariableDeclarationFragment fragment = (VariableDeclarationFragment) fragObj;\n                if (fieldName.equals(fragment.getName().getIdentifier())) {\n                    return field;\n                }\n            }\n        }\n\n        throw new FieldDeclarationNotFoundException(type, fieldName);\n    }", "  private String getInitParam(String paramName) throws FatalException {\n    String param = this.context.getInitParameter(paramName);\n\n    if (param == null || param.trim().length() == 0) {\n      String message = \"Missing InitParameter for \" + paramName;\n      log.error(message);\n      throw new FatalException(message);\n    }\n\n    return param;\n  }\n", "public JSONTokener ( Reader reader ) { this . reader = reader . markSupported ( ) ? reader : new BufferedReader ( reader ) ; this . eof = BOOL_ ; this . usePrevious = BOOL_ ; this . previous = NUM_ ; this . index = NUM_ ; this . character = NUM_ ; this . line = NUM_ ; }", "private boolean validate ( final IAbstractNode root ) { if ( root instanceof CPredicateExpression ) { final CPredicateExpression predicate = ( CPredicateExpression ) root ; for ( final IPredicateGenerator < WrapperType > expression : m_expressions ) { if ", "  public boolean _matches_helper(OwnershipResponse c) {\n    if (c==null) return false;\n    if (!super._matches_helper(c)) return false;\n    if(c.success != success) return false;\n    return true;\n  }\n", "private static String toDatabaseString ( final OperandSize size ) { switch ( size ) { case BYTE : return STR_ ; case WORD : return STR_ ; case DWORD : return STR_ ; case QWORD : return STR_ ; case OWORD : return STR_ ; case ADDRESS : return STR_ ; default", "\tpublic boolean isTrivial() {\n\t\treturn constructors.size() == 0 && changes.size() == 0;\n\t}\n", "public void addRange(int lonm1,int lonm2){\n  calcFinished=false;\n  data.add(new LonmData(Util.normalizeLonm(lonm1),Util.normalizeLonm(lonm2)));\n}\n", "public T textSize(float size) {\n\n        if (view instanceof TextView) {\n            TextView tv = (TextView) view;\n            tv.setTextSize(size);\n        }\n        return self();\n    }", "public void reset ( ) { this . currentList . clear ( ) ; this . currentList . add ( root ) ; }", "@Nullable private KtFile parseFile(@NotNull FileObject file) throws IOException {\n  return parseText(StringUtilRt.convertLineSeparators(file.asText()),file);\n}\n", "public static String getParameter(DbConn cnx, String key, String defaultValue)\n    {\n        try\n        {\n            return cnx.runSelectSingle(\"globalprm_select_by_key\", 3, String.class, key);\n        }\n        catch (NoResultException e)\n        {\n            return defaultValue;\n        }\n    }", "private StringBuffer format(BigDecimal number,StringBuffer result,FieldDelegate delegate){\n  if (multiplier != 1) {\n    number=number.multiply(getBigDecimalMultiplier());\n  }\n  boolean isNegative=number.signum() == -1;\n  if (isNegative) {\n    number=number.negate();\n  }\nsynchronized (digitList) {\n    int maxIntDigits=getMaximumIntegerDigits();\n    int minIntDigits=getMinimumIntegerDigits();\n    int maxFraDigits=getMaximumFractionDigits();\n    int minFraDigits=getMinimumFractionDigits();\n    int maximumDigits=maxIntDigits + maxFraDigits;\n    digitList.set(isNegative,number,useExponentialNotation ? ((maximumDigits < 0) ? Integer.MAX_VALUE : maximumDigits) : maxFraDigits,!useExponentialNotation);\n    return subformat(result,delegate,isNegative,false,maxIntDigits,minIntDigits,maxFraDigits,minFraDigits);\n  }\n}\n", "public static void writeXML ( XMLOutput xmlOutput , String elementName , BugAnnotation annotation , XMLAttributeList attributeList , boolean addMessages ) throws IOException { SourceLineAnnotation src = null ; if ( annotation instanceof BugAnnotationWithSourceLines ) { src = ( ( BugAnnotationWithSourceLines ) annotation ) . getSourceLines ( ) ; } if ( addMessages || src != null ) { xmlOutput . openTag ( elementName , attributeList ) ; if ( src != null ) { src . writeXML ( xmlOutput , addMessages , BOOL_ ) ; } if ( addMessages ) { xmlOutput . openTag ( BugAnnotation . MESSAGE_TAG ) ; xmlOutput . writeText ( annotation . toString ( ) ) ; xmlOutput . closeTag ( BugAnnotation . MESSAGE_TAG ) ; } xmlOutput . closeTag ( elementName ) ; } else { xmlOutput . openCloseTag ( elementName , attributeList ) ; } }", "protected void addRepeatableStereotype(List<String> parents, String stereotype, io.micronaut.core.annotation.AnnotationValue annotationValue) {\n        Map<String, Map<CharSequence, Object>> allStereotypes = getAllStereotypes();\n        List<String> annotationList = getAnnotationsByStereotypeInternal(stereotype);\n        for (String parentAnnotation : parents) {\n            if (!annotationList.contains(parentAnnotation)) {\n                annotationList.add(parentAnnotation);\n            }\n        }\n\n        addRepeatableInternal(stereotype, annotationValue, allStereotypes);\n    }", "\tpublic String getLocation( ) {\n\t\tStringBuffer sb = new StringBuffer(100);\n\t\tboolean first = true;\n\t\tfor ( int x = location.size(); x > 0; x--) {\n\t\t\tif (first) first=false;\n\t\t\telse sb.append(\".\");\n\t\t\tsb.append( location.get(x) );\n\t\t}\n\t\treturn sb.toString();\n\t}\n", "    public void addChangeListener(ChangeListener listener) {\n\n        li.addChangeListener(listener);\n        ui.addChangeListener(listener);\n    }\n", "public void releaseScan ( ) throws SAException { if ( _curValueList != null ) { _curValueList . releaseScan ( ) ; _curValueList = null ; } if ( _entriesIter != null ) { _entriesIter . releaseScan ( ) ; _entriesIter = null ; } _curValueListHolder = null ; }", "public InfocardInvocation(OpenIDTokenType tokenType){\n  _requiredClaims.add(OpenIDTokenType.OPENID_CLAIM);\n  _tokenType=tokenType;\n  if (DEBUG)   _log.debug(\"Created \" + _tokenType + \" token type InfocardInvocation\");\n}\n", "public static void clearallLocalDBs() {\n    for (final Map.Entry<MongoClient, Boolean> entry : localInstances.entrySet()) {\n      for (final String dbName : entry.getKey().listDatabaseNames()) {\n        entry.getKey().getDatabase(dbName).drop();\n      }\n    }\n  }", "public static void putAt(StringBuilder self,EmptyRange range,Object value){\n  RangeInfo info=subListBorders(self.length(),range);\n  self.replace(info.from,info.to,value.toString());\n}\n", "public int match(byte[] search,int offset,int length){\n  int ret=-1;\n  int searchLength=search.length;\n  if (searchLength > 0) {\n    int limit=Math.min(offset + length,buffer.size()) - searchLength - offset;\n    byte byte0=search[0];\n    for (int start=offset; start <= limit; ++start) {\n      if (buffer.getByte(start) == byte0) {\n        int i=0;\n        for (; i < searchLength; ++i) {\n          if (search[i] != buffer.getByte(start + i)) {\n            break;\n          }\n        }\n        if (i == searchLength) {\n          ret=start;\n          break;\n        }\n      }\n    }\n  }\n  return ret;\n}\n", "public final static <T> Stream<Vector<T>> grouped(final Stream<T> stream, final int groupSize) {\n        return StreamSupport.stream(new GroupingSpliterator<>(stream.spliterator(),()->Vector.empty(),\n                c->Vector.fromIterable(c),groupSize),stream.isParallel());\n\n\n    }", "public Predicate<CollectionId> collectionFilter(){\n  return collectionFilter;\n}\n", "boolean relative ( ) { return rel ; }", "private boolean internalDelete(\n                                  Object            deleteKey)\n    {\n        boolean deleted = false;\n\n        if (root() != null)\n        {\n            DeleteStack stack = getDeleteStack();\n\n            boolean didit = optimisticDelete(stack, deleteKey);\n            if (didit == pessimisticNeeded)\n                pessimisticDelete(stack, deleteKey);\n\n            DeleteNode point = stack.deleteNode();\n            if (point.wasFound())\n                deleted = true;\n        }\n        return deleted;\n    }", "public void go ( ) { Gerrit . display ( getTargetHistoryToken ( ) ) ; }", "public static void logPingSignal ( final Logger logger ) { logger . logMessage ( Level . INFO , STR_ ) ; }", "public boolean isValid(Date startDate,Date date){\n  return isValid(startDate.getTime(),date.getTime());\n}\n", "private void recurse(Bundle bundle, String path, IResourceVisitor visitor, String relPathName) throws IOException {\r\n\t\tEnumeration<?> entries = bundle.findEntries(path, \"*\", false); //$NON-NLS-1$\r\n\t\tif (entries != null) {\r\n\t\t\twhile (entries.hasMoreElements()) {\r\n\t\t\t\tURL child = (URL)entries.nextElement();\r\n\t\t\t\tString childPath = child.getPath();\r\n\t\t\t\tString temp = childPath;\r\n\t\t\t\tif (temp.endsWith(\"/\")) { //$NON-NLS-1$\r\n\t\t\t\t\ttemp = temp.substring(0, temp.length()-1);\r\n\t\t\t\t}\r\n\t\t\t\tint idx = temp.lastIndexOf(\"/\"); //$NON-NLS-1$\r\n\t\t\t\tString childName = temp.substring(idx+1);\r\n\t\t\t\tString relPath = relPathName\r\n\t\t\t\t\t\t+ (relPathName.length() == 0 ? \"\" : \"/\") //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\t\t\t+ childName;\r\n\t\t\t\tboolean result = visitor.visitResource(\r\n\t\t\t\t\t\tnew VisitorResource(child, relPath), relPath);\r\n\t\t\t\tif (result && child.getPath().endsWith(\"/\")) { //$NON-NLS-1$\r\n\t\t\t\t\trecurse(bundle, childPath, visitor, relPath);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}", "public JSONNode addObject(String name){\n  return add(name,null,NodeType.OBJECT);\n}\n", "private Node newFloatingComment ( ) { Node c = new Node ( Token . EMPTY ) ; linkCommentToNode ( c ) ; return c ; }", "public void addLoadMore(){\n  if (loadMoreItem != null || footerItem != null) {\n    return;\n  }\n  loadMoreItem=new Object();\n  notifyDataSetChanged();\n}\n", "public double set(double value)\n    {\n        String prevValue = setString(Double.toString(limit(value)));\n        if (prevValue == null) {\n            prevValue = getDefaultValue();\n            if (prevValue == null) {\n                return noValue();\n            }\n        }\n\n        double v = Double.parseDouble(prevValue);\n\n        return limit(v);\n    }", "public static NamingException wrapRemoteException(RemoteException re){\n  NamingException ne;\n  if (re instanceof ConnectException) {\n    ne=new ServiceUnavailableException();\n  }\n else   if (re instanceof AccessException) {\n    ne=new NoPermissionException();\n  }\n else   if (re instanceof StubNotFoundException || re instanceof UnknownHostException || re instanceof SocketSecurityException) {\n    ne=new ConfigurationException();\n  }\n else   if (re instanceof ExportException || re instanceof ConnectIOException || re instanceof MarshalException|| re instanceof UnmarshalException|| re instanceof NoSuchObjectException) {\n    ne=new CommunicationException();\n  }\n else   if (re instanceof ServerException && re.detail instanceof RemoteException) {\n    ne=wrapRemoteException((RemoteException)re.detail);\n  }\n else {\n    ne=new NamingException();\n  }\n  ne.setRootCause(re);\n  return ne;\n}\n", "    public double sample(){\n        if (Scheduler.rvg.randU01() <= p)\n            return 1;\n        else\n            return 0;\n    }\n", "public void addAll(T... items){\nsynchronized (mLock) {\n    if (mOriginalValues != null) {\n      Collections.addAll(mOriginalValues,items);\n    }\n else {\n      Collections.addAll(mObjects,items);\n    }\n  }\n  if (mNotifyOnChange)   notifyDataSetChanged();\n}\n", "private String findGemVersion(String gemName, String pathToGems) {\n        String version = null;\n        File maxVersionFile = findMaxVersionFile(gemName, pathToGems);\n        if (maxVersionFile != null) {\n            String fileName = maxVersionFile.getName();\n            version = getVersionFromFileName(fileName, gemName);\n        }\n        return version;\n    }", "public static boolean isCurrentVersionEqualTo(Integer expectedVersion){\n  String[] parsedVersion=parseVersion(getCurrentVersion());\n  if (parsedVersion == null) {\n    return false;\n  }\n  return expectedVersion.equals(Integer.valueOf(parsedVersion[0]));\n}\n", "public ByteVector put1 ( final int b ) { int length = this . length ; if ( length + NUM_ > data . length ) { enlarge ( NUM_ ) ; } data [ length ++ ] = ( byte ) b ; this . length = length ; return this ; }", "public static void showPreferencePage ( Shell shell , String id , Object data ) { PreferencesUtil . createPreferenceDialogOn ( shell , id , new String [ ] { id } , data ) . open ( ) ; }", "    public int getChildCount() {\n        int children = 0;\n\n        if (model != null\n            && model.getForms() != null) {\n              children = model.getForms().length;\n        }\n        return children;\n    }\n", "public boolean decrypt(ByteBuffer buf){\n  final byte[] data=buf.array();\n  final int size=buf.remaining();\n  byte[] clientPacketKey=keys[CLIENT];\n  int arrayIndex=buf.arrayOffset() + buf.position();\n  int prev=data[arrayIndex];\n  data[arrayIndex++]^=(clientPacketKey[0] & 0xff);\n  for (int i=1; i < size; i++, arrayIndex++) {\n    int curr=data[arrayIndex] & 0xff;\n    data[arrayIndex]^=(staticKey[i & 63] & 0xff) ^ (clientPacketKey[i & 7] & 0xff) ^ prev;\n    prev=curr;\n  }\n  long oldKey=(((long)clientPacketKey[0] & 0xff) << 0) | (((long)clientPacketKey[1] & 0xff) << 8) | (((long)clientPacketKey[2] & 0xff) << 16)| (((long)clientPacketKey[3] & 0xff) << 24)| (((long)clientPacketKey[4] & 0xff) << 32)| (((long)clientPacketKey[5] & 0xff) << 40)| (((long)clientPacketKey[6] & 0xff) << 48)| (((long)clientPacketKey[7] & 0xff) << 56);\n  oldKey+=size;\n  if (validateClientPacket(buf)) {\n    clientPacketKey[0]=(byte)(oldKey >> 0 & 0xff);\n    clientPacketKey[1]=(byte)(oldKey >> 8 & 0xff);\n    clientPacketKey[2]=(byte)(oldKey >> 16 & 0xff);\n    clientPacketKey[3]=(byte)(oldKey >> 24 & 0xff);\n    clientPacketKey[4]=(byte)(oldKey >> 32 & 0xff);\n    clientPacketKey[5]=(byte)(oldKey >> 40 & 0xff);\n    clientPacketKey[6]=(byte)(oldKey >> 48 & 0xff);\n    clientPacketKey[7]=(byte)(oldKey >> 56 & 0xff);\n    return true;\n  }\n  return false;\n}\n", "public DERObject toASN1Object()\n    {\n        ASN1EncodableVector  v = new ASN1EncodableVector();\n\n        v.add(new DERInteger(getModulus()));\n        v.add(new DERInteger(getPublicExponent()));\n\n        return new DERSequence(v);\n    }", "static private boolean isQuoteEscapedChar(final String s,final int pos){\n  boolean openQuoteFound=false;\n  boolean closeQuoteFound=false;\n  final String s2=s.substring(0,pos);\n  int posOpen=pos;\n  while ((posOpen=s2.lastIndexOf(\"\\\\Q\",posOpen - 1)) != -1) {\n    if (!isSlashEscapedChar(s2,posOpen)) {\n      openQuoteFound=true;\n      break;\n    }\n  }\n  if (openQuoteFound) {\n    if (s2.indexOf(\"\\\\E\",posOpen) != -1) {\n      closeQuoteFound=true;\n    }\n  }\n  return openQuoteFound && !closeQuoteFound;\n}\n", "    public boolean combatDifference(int cbLvl) {\n\treturn wildLevel >= combatLevel && combatLevel + cbLvl >= wildLevel || cbLvl < combatLevel && combatLevel - wildLevel <= cbLvl || cbLvl == combatLevel;\n    }\n", "public static DataSource createDataSource(final Map<String, DataSource> dataSourceMap, final File yamlFile) throws SQLException, IOException {\n        YamlRootMasterSlaveConfiguration config = YamlEngine.unmarshal(yamlFile, YamlRootMasterSlaveConfiguration.class);\n        return MasterSlaveDataSourceFactory.createDataSource(dataSourceMap, new MasterSlaveRuleConfigurationYamlSwapper().swap(config.getMasterSlaveRule()), config.getProps());\n    }", "public boolean isBlocked ( String permissionName ) { return ! doCanPerform ( permissionName , BOOL_ , BOOL_ ) ; }", "    protected void generateSelectionEvent() {\n        if (selected)\n            return;\n        selevt.initSelectionEvent(getElement(), this,\n                ElementSelectionEvent.ACTIVATE);\n        ((EventTarget) getElement()).dispatchEvent(selevt);\n    }\n", "private void recomputeSeperation(double[][] means,double[][] cdist,int[][] cnum,LongStatistic diststat){\n  final int k=means.length;\n  for (int i=1; i < k; i++) {\n    DoubleVector mi=DoubleVector.wrap(means[i]);\n    for (int j=0; j < i; j++) {\n      cdist[i][j]=cdist[j][i]=distanceFunction.distance(mi,DoubleVector.wrap(means[j]));\n    }\n  }\n  double[] buf=new double[k - 1];\n  for (int i=0; i < k; i++) {\n    System.arraycopy(cdist[i],0,buf,0,i);\n    System.arraycopy(cdist[i],i + 1,buf,i,k - i - 1);\n    for (int j=0; j < buf.length; j++) {\n      cnum[i][j]=j < i ? j : (j + 1);\n    }\n    DoubleIntegerArrayQuickSort.sort(buf,cnum[i],k - 1);\n  }\n  if (diststat != null) {\n    diststat.increment((k * (k - 1)) >> 1);\n  }\n}\n", "    public void setDoActivityOutputBindings (ArrayList effectOutputBindings) {\n        this.doActivityOutputBindings = doActivityOutputBindings;\n    }\n", "public static URL[] parseClassPath(){\n  return parseClassPath(System.getProperty(\"java.class.path\"));\n}\n", "public static long computeCrc32 ( byte [ ] bytes ) throws IOException { ByteArrayInputStream bais = new ByteArrayInputStream ( bytes ) ; try { CheckedInputStream cis = new CheckedInputStream ( bais , new CRC32 ( ) ) ; byte [ ] buf = new byte [ NUM_ ] ; wh", "public void addValue(IFitsHeader key,String val) throws HeaderCardException {\n  addValue(key.key(),val,key.comment());\n}\n", "public IdQuery ( Class < T > type , Object id ) { this ( type . getName ( ) , id , null , QueryResultType . DEFAULT , NUM_ ) ; }", "    public boolean execute(String sql, int[] columnIndexes) throws SQLException {\n        validateConnection();\n\n        try {\n            return _statement.execute(sql, columnIndexes);\n        } catch (SQLException sqlException) {\n            processSQLException(sqlException);\n        }\n        \n        return false;\n    }\n", "public static final CefMessageRouter create ( ) { return CefMessageRouter . create ( null , null ) ; }", "public boolean matchesCS ( String seq ) { return queue . startsWith ( seq , pos ) ; }", "public OkRequest<T> form(final String name, final String value, String charset) {\n        final boolean first = !mForm;\n        if (first) {\n            contentType(PROTOCOL_CONTENT_TYPE_FORM);\n            mForm = true;\n\n        }\n        charset = getValidCharset(charset);\n\n        openOutput();\n        if (!first) {\n            mOutput.write('&');\n        }\n        try {\n            if (VolleyLog.DEBUG) {\n                VolleyLog.d(\"name=%1$s, value=%2$s\", name, value);\n            }\n            mOutput.write(URLEncoder.encode(name, charset));\n            mOutput.write(\"=\");\n            if (value != null) {\n                mOutput.write(URLEncoder.encode(value, charset));\n            }\n        } catch (IOException e) {\n            //Do Nothing\n        }\n\n\n        return this;\n    }", "public @NotNull <T> List<T> findAll(@NotNull Class<T> cl, @NotNull SqlQuery query) {\n        return executeQuery(resultProcessorForClass(cl), query);\n    }", "public static void rename ( int id , String path , String newPath , AsyncCallback < VoidResult > cb ) { Input in = Input . create ( ) ; in . oldPath ( path ) ; in . newPath ( newPath ) ; ChangeApi . edit ( id ) . post ( in , cb ) ; }", "public static List<SourcePlugin> buildPluginList(String... pluginIds){\n  List<SourcePlugin> result=Lists.newArrayListWithExpectedSize(pluginIds.length);\n  for (  String pluginId : pluginIds) {\n    result.add(getSourcePlugin(pluginId));\n  }\n  return result;\n}\n", "    public void clearPanels() {\n        albumPanels = new HashMap<MPDAlbum, AlbumCellPanel>();\n    }\n", "private int getAtomTypeXCount(IAtomContainer ac, IAtom atom) {\n        List<IAtom> neighbours = ac.getConnectedAtomsList(atom);\n        int nocounter = 0;\n        IBond bond;\n        for (IAtom neighbour : neighbours) {\n            if ((neighbour.getSymbol().equals(\"N\") || neighbour.getSymbol().equals(\"O\"))\n                    && !(Boolean) neighbour.getProperty(\"IS_IN_AROMATIC_RING\")) {\n                //if (ac.getMaximumBondOrder(neighbours[i]) == 1.0) {\n                bond = ac.getBond(neighbour, atom);\n                if (bond.getOrder() != IBond.Order.DOUBLE) {\n                    nocounter += 1;\n                }\n            }\n        }\n        return nocounter;\n    }", "    synchronized public void insert(String str, int pos) {\n        super.insert(str, pos);\n    }\n", "public int find ( Object key ) { Object o = this . map . get ( key ) ; return o instanceof Integer ? ( ( Integer ) o ) . intValue ( ) : none ; }", "public static <T>Key<T> of(Class<T> type,Annotation ann){\n  Objects.requireNonNull(type);\n  Objects.requireNonNull(ann);\n  return new Key<>(type,new Annotation[]{ann});\n}\n", "TaskProgress ( String stageName , int taskId ) { this . stageName = stageName ; this . taskId = taskId ; }", "\tpublic void update(SimulationThread agentThread) {\n\t\tif (agentThread.isCanceled()) {\n\t\t\tframe.setStatus(\"Task canceled.\");\n\t\t\tisPrepared = false;\n\t\t} else if (frame.simulationPaused()) {\n\t\t\tframe.setStatus(\"Task paused.\");\n\t\t} else {\n\t\t\tframe.setStatus(\"Task completed.\");\n\t\t}\n\t}\n", "public HttpRequest contentLength(final int value){\n  connection.setFixedLengthStreamingMode(value);\n  return this;\n}\n", "void update ( T object ) throws DataSourceException ;", "public static void state(Boolean valid, Supplier<String> message) {\n    if (isNotValid(valid)) {\n      throw new IllegalStateException(message.get());\n    }\n  }", "public void debug(String s,Object... params){\n  if (isEnabled(TraceSystem.DEBUG)) {\n    s=MessageFormat.format(s,params);\n    traceWriter.write(TraceSystem.DEBUG,module,s,null);\n  }\n}\n", "void remove ( IReplicationParticipantsMetadata participantsMetadata ) ;", "public static void startServices(ServiceHost host,Class... services) throws InstantiationException, IllegalAccessException {\n  checkArgument(services != null,\"services cannot be null\");\n  for (  Class service : services) {\n    startService(host,service);\n  }\n}\n", "private boolean shouldAcceptMastership(MemberMap memberMap, MemberImpl candidate) {\n        assert lock.isHeldByCurrentThread() : \"Called without holding cluster service lock!\";\n        for (MemberImpl member : memberMap.headMemberSet(candidate, false)) {\n            if (!membershipManager.isMemberSuspected(member.getAddress())) {\n                if (logger.isFineEnabled()) {\n                    logger.fine(\"Should not accept mastership claim of \" + candidate + \", because \" + member\n                            + \" is not suspected at the moment and is before than \" + candidate + \" in the member list.\");\n                }\n\n                return false;\n            }\n        }\n        return true;\n    }", "    public CMLElement makeElementInContext(Element parent) {\n        return new CMLKpointList();\n    }\n", "public void endWithNewline ( ) { custom ( STR_ , null ) ; }", "void onTextMessage ( WebSocket websocket , String text ) throws Exception ;", "public String productName(){\n  return properties.getProperty(\"product.name\");\n}\n", "public void stop() {\n        if (session == null) {\n            return;\n        }\n\n        sync.lock();\n\n        try {\n            if (session == null) {\n                return;\n            }\n\n            onBeforeStop();\n\n            session s = session;\n            session = null; // stop alerts loop and session methods\n\n            // guarantee one more alert is post and detected\n            s.post_session_stats();\n            try {\n                // 250 is to ensure that the sleep is bigger\n                // than the wait in alerts loop\n                Thread.sleep(ALERTS_LOOP_WAIT_MILLIS + 250);\n            } catch (InterruptedException ignore) {\n            }\n\n            if (alertsLoop != null) {\n                try {\n                    alertsLoop.join();\n                } catch (Throwable e) {\n                    // ignore\n                }\n            }\n\n            resetState();\n\n            s.delete();\n\n            onAfterStop();\n\n        } finally {\n            sync.unlock();\n        }\n    }", "public OutputStreamWriter writer ( ) throws HttpRequestException { try { openOutput ( ) ; return new OutputStreamWriter ( output , output . encoder . charset ( ) ) ; } catch ( IOException e ) { throw new HttpRequestException ( e ) ; } }", "public void store(Object key, Object value) {\n        getJdbcTemplate().update(getMergeSql(),\n                                 new BeanPropertySqlParameterSource(value));\n    }", "public static Group[] twistOptimized(AFPChain afpChain, Atom[] ca1,\n\t\t\tAtom[] ca2) throws StructureException {\n\n\t\tAtom[] optTwistPdb = new Atom[ca2.length];\n\n\t\tint gPos = -1;\n\t\tfor (Atom a : ca2) {\n\t\t\tgPos++;\n\t\t\toptTwistPdb[gPos] = a;\n\t\t}\n\n\t\tint blockNum = afpChain.getBlockNum();\n\n\t\tint b2 = 0;\n\t\tint e2 = 0;\n\t\tint focusResn = 0;\n\t\tint[] focusRes1 = afpChain.getFocusRes1();\n\t\tint[] focusRes2 = afpChain.getFocusRes2();\n\n\t\tif (focusRes1 == null) {\n\t\t\tfocusRes1 = new int[afpChain.getCa1Length()];\n\t\t\tafpChain.setFocusRes1(focusRes1);\n\t\t}\n\t\tif (focusRes2 == null) {\n\t\t\tfocusRes2 = new int[afpChain.getCa2Length()];\n\t\t\tafpChain.setFocusRes2(focusRes2);\n\t\t}\n\n\t\tint[] optLen = afpChain.getOptLen();\n\t\tint[][][] optAln = afpChain.getOptAln();\n\n\t\tfor (int bk = 0; bk < blockNum; bk++) {\n\t\t\t// THIS IS TRANSFORMING THE ORIGINAL ca2 COORDINATES, NO CLONING...\n\t\t\t// copies the atoms over to iniTwistPdb later on in modifyCod\n\t\t\ttransformOrigPDB(optLen[bk], optAln[bk][0], optAln[bk][1], ca1,\n\t\t\t\t\tca2, afpChain, bk);\n\n\t\t\t// transform pro2 according to comparison of pro1 and pro2 at give\n\t\t\t// residues\n\t\t\tif (bk > 0) {\n\t\t\t\tb2 = e2;\n\t\t\t}\n\t\t\tif (bk < blockNum - 1) { // bend at the middle of two consecutive\n\t\t\t\t\t\t\t\t\t\t// blocks\n\t\t\t\te2 = optAln[bk][1][optLen[bk] - 1];\n\t\t\t\te2 = (optAln[bk + 1][1][0] - e2) / 2 + e2;\n\t\t\t} else {\n\t\t\t\te2 = ca2.length;\n\t\t\t}\n\t\t\tcloneAtomRange(optTwistPdb, ca2, b2, e2);\n\t\t\tfor (int i = 0; i < optLen[bk]; i++) {\n\t\t\t\tfocusRes1[focusResn] = optAln[bk][0][i];\n\t\t\t\tfocusRes2[focusResn] = optAln[bk][1][i];\n\t\t\t\tfocusResn++;\n\t\t\t}\n\t\t}\n\t\tint totalLenOpt = focusResn;\n\t\tlogger.debug(\"calrmsdopt for {} residues\", focusResn);\n\t\tdouble totalRmsdOpt = calCaRmsd(ca1, optTwistPdb, focusResn, focusRes1,\n\t\t\t\tfocusRes2);\n\t\tlogger.debug(\"got opt RMSD: {}\", totalRmsdOpt);\n\t\tint optLength = afpChain.getOptLength();\n\n\t\tif (totalLenOpt != optLength) {\n\t\t\tlogger.warn(\"Final alignment length is different {} {}\",\n\t\t\t\t\ttotalLenOpt, optLength);\n\t\t}\n\t\tlogger.debug(\"final alignment length {}, rmsd {}\", focusResn,\n\t\t\t\ttotalRmsdOpt);\n\n\t\tafpChain.setTotalLenOpt(totalLenOpt);\n\t\tafpChain.setTotalRmsdOpt(totalRmsdOpt);\n\n\t\treturn StructureTools.cloneGroups(optTwistPdb);\n\n\t}", "public ExpressionFactory getExpressionFactory()\n    {\n        Application application = getMyfacesApplicationInstance();\n        if (application != null)\n        {\n            return application.getExpressionFactory();\n        }\n        throw new UnsupportedOperationException();\n    }", "private Element toElement(ScheduleTask task){\n  Element el=doc.createElement(\"task\");\n  setAttributes(el,task);\n  return el;\n}\n", "public static void mediumText ( TextView textView ) { highlightText ( textView , R . string . wire__typeface__regular ) ; }", "   public void setChainInterfaceName(String pInterfaceName) {\n      JavaQName qName = JavaQNameImpl.getInstance(pInterfaceName, true);\n      setChainInterface(qName);\n   }\n", "\tpublic void putPixelValue(int x, int y, double value) {\n\t\tif (x>=0 && x<width && y>=0 && y<height) {\n\t\t\tif (value>255.0)\n\t\t\t\tvalue = 255;\n\t\t\telse if (value<0.0)\n\t\t\t\tvalue = 0.0;\n\t\t\tint gray = (int)(value+0.5);\n\t\t\tpixels[y*width + x] = 0xff000000 + (gray<<16) + (gray<<8) + gray;\n\n\t\t}\n\t}\n", "public void renameThread(String base_name, Thread thread, String addr, String cluster_name) {\n        String thread_name=getThreadName(base_name, thread, addr, cluster_name);\n        if(thread_name != null)\n            thread.setName(thread_name);\n    }", "private void addTag(String key,String value,boolean mandatory,List<String> values,int position,boolean updatable,TagItem.Type type){\n  String valueFormatted=ParserManager.getValue(value,type);\n  type=type == null ? TagItem.Type.TEXT : type;\n  type=key.equals(\"collection_times\") ? TagItem.Type.TIME : type;\n  type=key.equals(\"opening_hours\") ? TagItem.Type.OPENING_HOURS : type;\n  TagItem tagItem=new TagItem(key,value,mandatory,values,updatable ? type : TagItem.Type.CONSTANT,valueFormatted != null || type == TagItem.Type.NUMBER);\n  if (!tagItemList.contains(tagItem)) {\n    tagItemList.add(position,tagItem);\n  }\n  keyTagItem.put(key,tagItem);\n  notifyItemInserted(position);\n}\n", "public static void check(boolean cond,long value){\n  if (!cond)   error(String.valueOf(value));\n}\n", "private static boolean include(String host, java.nio.file.Path path) throws ServiceException {\n        List<java.nio.file.Path> roots = getRootPaths(host);\n        if (roots != null) {\n            for (java.nio.file.Path rootPath : roots) {\n                if (path.startsWith(rootPath))\n                    return true;\n            }\n        }\n        return false;\n    }", "public static <T> WritableDataStore<T> makeStorage(DBIDs ids, int hints, Class<? super T> dataclass) {\n    return DataStoreFactory.FACTORY.makeStorage(ids, hints, dataclass);\n  }", "    public R2Vect transform(double coeff) {\n        x *= coeff;\n        y *= coeff;\n        return this;\n    }\n", "@Override public boolean include(String identifier){\n  return !blacklist.contains(identifier);\n}\n", "    public Vector getChildrenNamed(String name) {\n        Vector result = new Vector(this.children.size());\n        Enumeration enm = this.children.elements();\n        while (enm.hasMoreElements()) {\n            IXMLElement child = (IXMLElement) enm.nextElement();\n            String childName = child.getFullName();\n            if ((childName != null) && childName.equals(name)) {\n                result.addElement(child);\n            }\n        }\n        return result;\n    }\n", "void changedView ( INaviView oldView , INaviView newView ) ;", "public static void checkXerbla() {\n        double[] x = new double[9];\n        System.out.println(\"Check whether we're catching XERBLA errors. If you see something like \\\"** On entry to DGEMM  parameter number  4 had an illegal value\\\", it didn't work!\");\n        try {\n            NativeBlas.dgemm('N', 'N', 3, -1, 3, 1.0, x, 0, 3, x, 0, 3, 0.0, x, 0, 3);\n        } catch (IllegalArgumentException e) {\n            check(\"checking XERBLA\", e.getMessage().contains(\"XERBLA\"));\n            return;\n        }\n        assert (false); // shouldn't happen\n    }", "public KeyArea setupKey(int iKeyArea)\n    {\n        KeyArea keyArea = null;\n        if (iKeyArea == 0)\n        {\n            keyArea = this.makeIndex(DBConstants.UNIQUE, ID_KEY);\n            keyArea.addKeyField(ID, DBConstants.ASCENDING);\n        }\n        if (iKeyArea == 1)\n        {\n            keyArea = this.makeIndex(DBConstants.UNIQUE, KEY_FILENAME_KEY);\n            keyArea.addKeyField(KEY_FILENAME, DBConstants.ASCENDING);\n            keyArea.addKeyField(KEY_NUMBER, DBConstants.ASCENDING);\n        }\n        if (keyArea == null)\n            keyArea = super.setupKey(iKeyArea);     \n        return keyArea;\n    }", "    public IDataSet getMapForRouters() {\n        if (myMap == null)\n            throw new IllegalStateException(\"null map cannot be returned\");\n        IDataSet routingMap = myMap;\n/*        //TO DO: take all destinations and the current\n        // location and load a strip of width N between\n        // these points into memory\n        if (!(myMap instanceof MemoryDataSet)) {\n            MysqlDatabaseLoader databaseLoader = new MysqlDatabaseLoader();\n            routingMap = databaseLoader.parseOsm();\n        }*/\n        return routingMap;\n    }\n", "@Override\n\tpublic com.liferay.commerce.price.list.model.CommerceTierPriceEntry getCommerceTierPriceEntryByUuidAndGroupId(\n\t\tString uuid, long groupId)\n\t\tthrows com.liferay.portal.kernel.exception.PortalException {\n\t\treturn _commerceTierPriceEntryLocalService.getCommerceTierPriceEntryByUuidAndGroupId(uuid,\n\t\t\tgroupId);\n\t}", "@NullSafe\n  public static String truncate(String value, int length) {\n\n    assertThat(length).throwing(new IllegalArgumentException(String.format(\n      \"[%d] must be greater than equal to 0\", length))).isGreaterThanEqualTo(0);\n\n    return (value != null ? value.substring(0, Math.min(value.length(), length)) : null);\n  }", "protected void uninstallListeners ( ) { frame . removePropertyChangeListener ( this ) ; removePropertyChangeListener ( this ) ; }", "private int removeNext(){\n  if (lastUsageDates.isEmpty()) {\n    return INVALID_SIZE;\n  }\n  Long oldestUsage=null;\n  File mostLongUsedFile=null;\n  Set<Entry<File,Long>> entries=lastUsageDates.entrySet();\nsynchronized (lastUsageDates) {\n    for (    Entry<File,Long> entry : entries) {\n      if (mostLongUsedFile == null) {\n        mostLongUsedFile=entry.getKey();\n        oldestUsage=entry.getValue();\n      }\n else {\n        Long lastValueUsage=entry.getValue();\n        if (lastValueUsage < oldestUsage) {\n          oldestUsage=lastValueUsage;\n          mostLongUsedFile=entry.getKey();\n        }\n      }\n    }\n  }\n  int fileSize=0;\n  if (mostLongUsedFile != null) {\n    if (mostLongUsedFile.exists()) {\n      fileSize=getSize(mostLongUsedFile);\n      if (mostLongUsedFile.delete()) {\n        lastUsageDates.remove(mostLongUsedFile);\n      }\n    }\n else {\n      lastUsageDates.remove(mostLongUsedFile);\n    }\n  }\n  return fileSize;\n}\n", "public static ArrayList<Prediction> toWekaPredictions(int y[],double p[]){\n  ArrayList<Prediction> predictions=new ArrayList<Prediction>();\n  for (int i=0; i < y.length; i++) {\n    predictions.add(new NominalPrediction((double)y[i],new double[]{1. - p[i],p[i]}));\n  }\n  return predictions;\n}\n", "public static boolean isInstalled ( ) { if ( ! checked ) { installed = hasFlash ( ) ; checked = BOOL_ ; } return installed ; }", "    public int getIndexOfChild(Object parent, Object child) {\n        if (parent instanceof DbTreeNode) {\n            DbTreeNode node = (DbTreeNode) parent;\n            for (int i = 0; i < node.getChildren().size(); i++) {\n                if (node.getChildren().get(i).equals(child)) {\n                    return i;\n                }\n            }\n        }\n        return 0;\n    }\n", "public static void init ( ) { int size = ToastConfiguration . Property . THREAD_POOL_SIZE . asInt ( ) ; INSTANCE = new Async ( size , size , STR_ ) ; }", "private static boolean compareStringCase(final String val,final int comparator,final String attr){\n  final String value=comparator == APPROX ? stripWhitespaces(val) : val;\n  final String attribute=comparator == APPROX ? stripWhitespaces(attr) : attr;\nswitch (comparator) {\ncase APPROX:\ncase EQUALS:\n    return RFC1960Filter.stringCompare(value.toCharArray(),0,attribute.toCharArray(),0) == 0;\ncase GREATER:\n  return RFC1960Filter.stringCompare(value.toCharArray(),0,attribute.toCharArray(),0) <= 0;\ncase LESS:\nreturn RFC1960Filter.stringCompare(value.toCharArray(),0,attribute.toCharArray(),0) >= 0;\ndefault :\nthrow new IllegalStateException(\"Found illegal comparator.\");\n}\n}\n", "public void toggleSelection(int position) {\n        if (mFastAdapter.getItem(position).isSelected()) {\n            deselect(position);\n        } else {\n            select(position);\n        }\n    }", "public List < ? > endBatch ( ) { List < ? > result = null ; if ( operationsBatch . size ( ) > NUM_ ) { result = doFlush ( ) ; } useBatch = BOOL_ ; operationsBatch = null ; return result ; }", "private static LinkedHashSet < FunctionBlock > findPassedFunctions ( final Callgraph callgraph , final Function startFunction , final Function targetFunction ) { final FunctionBlock sourceCallgraphNode = findBlock ( callgraph , startFunction ) ; final Fun", "\tprotected String toAlpha( final char index ) {\n\t\tswitch( index ) {\n\t\t\tcase '1':  return \"a\";\n\t\t\tcase '2':  return \"b\";\n\t\t\tcase '3':  return \"c\";\n\t\t\tcase '4':  return \"d\";\n\t\t\tcase '5':  return \"e\";\n\t\t\tcase '6':  return \"f\";\n\t\t\tdefault: return null;\n\t\t}\n\t}\n", "public TimestampVerifier(long tolerance,TimeUnit unit){\n  if (tolerance < 0) {\n    throw new IllegalArgumentException(\"A negative tolerance is not supported\");\n  }\n  toleranceInMilliseconds=unit.toMillis(tolerance);\n}\n", "public void add ( T value ) { pushBack ( ) ; array [ NUM_ ] = value ; }", "    public void setMachineAndPeId(int machineId, int peId) {\n        // if this job only requires 1 Pe\n        this.machineId = machineId;\n        this.peId = peId;\n\n        // if this job requires many PEs\n        if (this.peArrayId != null && this.pesNumber > 1)\n        {\n            this.machineArrayId[index] = machineId;\n            this.peArrayId[index] = peId;\n            index++;\n        }\n    }\n", "@Override protected Instance process(Instance instance) throws Exception {\n  Instance result;\n  Attribute att;\n  double[] values;\n  int i;\n  values=new double[instance.numAttributes()];\n  for (i=0; i < instance.numAttributes(); i++) {\n    att=instance.attribute(i);\n    if (!att.isNominal() || !m_AttributeIndices.isInRange(i) || instance.isMissing(i)) {\n      values[i]=instance.value(i);\n    }\n else {\n      values[i]=m_NewOrder[i][(int)instance.value(i)];\n    }\n  }\n  result=new DenseInstance(instance.weight(),values);\n  return result;\n}\n", "public Collection<Monitor> list(List<String> queryParams)\n    {\n        return HTTP.GET(\"/v3/monitors\", null, queryParams, MONITORS).get();\n    }", "\tpublic void log(final String message) {\n\t\tlogger.info(message);\n\t}\n", "    public ANTLRError (String s) {\n        super(s);\n    }\n", "private static synchronized Date parseDateString(String textRepresentation) throws ParseException {\n  try {\n    return sdfDefault.parse(textRepresentation);\n  }\n catch (  ParseException ex) {\n    return sdfGnuStep.parse(textRepresentation);\n  }\n}\n", "public boolean requestTime(String host,int timeout){\n  DatagramSocket socket=null;\n  try {\n    socket=new DatagramSocket();\n    socket.setSoTimeout(timeout);\n    InetAddress address=InetAddress.getByName(host);\n    byte[] buffer=new byte[NTP_PACKET_SIZE];\n    DatagramPacket request=new DatagramPacket(buffer,buffer.length,address,NTP_PORT);\n    buffer[0]=NTP_MODE_CLIENT | (NTP_VERSION << 3);\n    long requestTime=System.currentTimeMillis();\n    long requestTicks=SystemClock.elapsedRealtime();\n    writeTimeStamp(buffer,TRANSMIT_TIME_OFFSET,requestTime);\n    socket.send(request);\n    DatagramPacket response=new DatagramPacket(buffer,buffer.length);\n    socket.receive(response);\n    long responseTicks=SystemClock.elapsedRealtime();\n    long responseTime=requestTime + (responseTicks - requestTicks);\n    long originateTime=readTimeStamp(buffer,ORIGINATE_TIME_OFFSET);\n    long receiveTime=readTimeStamp(buffer,RECEIVE_TIME_OFFSET);\n    long transmitTime=readTimeStamp(buffer,TRANSMIT_TIME_OFFSET);\n    long roundTripTime=responseTicks - requestTicks - (transmitTime - receiveTime);\n    long clockOffset=((receiveTime - originateTime) + (transmitTime - responseTime)) / 2;\n    mNtpTime=responseTime + clockOffset;\n    mNtpTimeReference=responseTicks;\n    mRoundTripTime=roundTripTime;\n  }\n catch (  Exception e) {\n    if (false)     Log.d(TAG,\"request time failed: \" + e);\n    return false;\n  }\n finally {\n    if (socket != null) {\n      socket.close();\n    }\n  }\n  return true;\n}\n", "protected void setSelectedComponent (int idx)\n    {\n        int cid = _components.get(idx).intValue();\n        _model.setSelectedComponent(_cclass, cid);\n    }", "\tpublic Connection getConnection() {\n\t\tif (con != null)\n\t\t\treturn con;\n\t\telse\n\t\t\treturn null;\n\t}\n", "Join ( SQLBuilder builder , JoinType type , String table , String alias ) { this . builder = builder ; this . type = type ; this . table = new Table ( table , alias ) ; this . onClause = null ; }", "public Shape createRoundRectangle ( final int x , final int y , final int w , final int h , final CornerSize size ) { return createRoundRectangle ( x , y , w , h , size , CornerStyle . ROUNDED , CornerStyle . ROUNDED , CornerStyle . ROUNDED , CornerStyle . ROUNDED ) ; }", "int requestFileSystem ( ) throws DebugExceptionWrapper ;", "        public int getBaseline(int width, int height) {\n            // check size.\n            super.getBaseline(width, height);\n            Insets insets = getInsets();\n            width = width - insets.left - insets.right;\n            height = height - insets.top - insets.bottom;\n            int baseline = getComponent(0).getBaseline(width, height);\n            if (baseline >= 0) {\n                return baseline + insets.top;\n            }\n            return -1;\n        }\n", "    public WrapMode getWrap(WrapAxis axis) {\n        switch (axis) {\n            case S:\n                return wrapS;\n        }\n        throw new IllegalArgumentException(\"invalid WrapAxis: \" + axis);\n    }\n", "public static void encodeVaxLong(OutputStream stream,long value) throws IOException {\n  stream.write(8);\n  encodeVaxLongWithoutLength(stream,value);\n}\n", "    private long implicitEnumFinalFlag(JCTree tree) {\n        if (!tree.hasTag(CLASSDEF)) return 0;\n        class SpecialTreeVisitor extends JCTree.Visitor {\n            boolean specialized;\n            SpecialTreeVisitor() {\n                this.specialized = false;\n            };\n\n            @Override\n            public void visitTree(JCTree tree) { /* no-op */ }\n\n            @Override\n            public void visitVarDef(JCVariableDecl tree) {\n                if ((tree.mods.flags & ENUM) != 0) {\n                    if (tree.init instanceof JCNewClass &&\n                        ((JCNewClass) tree.init).def != null) {\n                        specialized = true;\n                    }\n                }\n            }\n        }\n\n        SpecialTreeVisitor sts = new SpecialTreeVisitor();\n        JCClassDecl cdef = (JCClassDecl) tree;\n        for (JCTree defs: cdef.defs) {\n            defs.accept(sts);\n            if (sts.specialized) return 0;\n        }\n        return FINAL;\n    }\n", "public static final void pushTransform(GL2 gl){\n  gl.glPushMatrix();\n}\n", "protected int[] addPeriodInto(int[] values,ReadablePeriod period){\n  for (int i=0, isize=period.size(); i < isize; i++) {\n    DurationFieldType type=period.getFieldType(i);\n    int value=period.getValue(i);\n    if (value != 0) {\n      int index=indexOf(type);\n      if (index == -1) {\n        throw new IllegalArgumentException(\"Period does not support field '\" + type.getName() + \"'\");\n      }\n else {\n        values[index]=FieldUtils.safeAdd(getValue(index),value);\n      }\n    }\n  }\n  return values;\n}\n", "public void launchPurchaseFlow(@NotNull Activity act, String sku, @NotNull String itemType, int requestCode,\n                                   @Nullable OnIabPurchaseFinishedListener listener, String extraData) {\n        checkSetupDone(\"launchPurchaseFlow\");\n        flagStartAsync(\"launchPurchaseFlow\");\n        IabResult result;\n\n        if (itemType.equals(ITEM_TYPE_SUBS) && !mSubscriptionsSupported) {\n            IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,\n                    \"Subscriptions are not available.\");\n            Logger.d(\"Subscriptions are not available.\");\n            if (listener != null) listener.onIabPurchaseFinished(r, null);\n            flagEndAsync();\n            return;\n        }\n\n        try {\n            Logger.d(\"Constructing buy intent for \", sku, \", item type: \", itemType);\n            if (mService == null) {\n                result = new IabResult(BILLING_RESPONSE_RESULT_ERROR, \"Unable to buy item\");\n                Logger.e(\"In-app billing error: Unable to buy item, Error response: service is not connected.\");\n                if (listener != null) listener.onIabPurchaseFinished(result, null);\n                flagEndAsync();\n                return;\n            }\n            Bundle buyIntentBundle = mService.getBuyIntent(3, getPackageName(), sku, itemType, extraData);\n            int response = getResponseCodeFromBundle(buyIntentBundle);\n            if (response != BILLING_RESPONSE_RESULT_OK) {\n                result = new IabResult(response, \"Unable to buy item\");\n                Logger.e(\"In-app billing error: Unable to buy item, Error response: \" + getResponseDesc(response));\n                if (listener != null) listener.onIabPurchaseFinished(result, null);\n                flagEndAsync();\n                return;\n            }\n\n            PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);\n            Logger.d(\"Launching buy intent for \", sku, \". Request code: \", requestCode);\n            mRequestCode = requestCode;\n            mPurchaseListener = listener;\n            mPurchasingItemType = itemType;\n            act.startIntentSenderForResult(pendingIntent.getIntentSender(),\n                    requestCode, new Intent(),\n                    Integer.valueOf(0), Integer.valueOf(0),\n                    Integer.valueOf(0));\n        } catch (SendIntentException e) {\n            result = new IabResult(IABHELPER_SEND_INTENT_FAILED, \"Failed to send intent.\");\n            Logger.e(\"In-app billing error: SendIntentException while launching purchase flow for sku \" + sku, e);\n            if (listener != null) listener.onIabPurchaseFinished(result, null);\n        } catch (RemoteException e) {\n            result = new IabResult(IABHELPER_REMOTE_EXCEPTION, \"Remote exception while starting purchase flow\");\n            Logger.e(\"In-app billing error: RemoteException while launching purchase flow for sku \" + sku, e);\n            if (listener != null) listener.onIabPurchaseFinished(result, null);\n        }\n        flagEndAsync();\n    }", "    public CallRing next() {\n        return CHAIN.poll();\n    }\n", "\tprivate IRodinElement getTarget(IStructuredSelection selection) {\n\t\tif (selection.size() == 0) {\n\t\t\treturn getRodinInput();\n\t\t}\n\t\tObject firstElement = selection.getFirstElement();\n\t\tif (firstElement instanceof IRodinElement)\n\t\t\treturn (IRodinElement) firstElement;\n\n\t\treturn null;\n\t}\n", "public Optional<String> staticTableNameFor(Class<?> entityClass) {\n\n        final Optional<String> tableName = entityProperties\n                .stream()\n                .filter(x -> x.entityClass.equals(entityClass))\n                .map(x -> x.getKeyspace().map(ks -> ks + \".\" + x.getTableOrViewName()).orElseGet(x::getTableOrViewName))\n                .findFirst();\n\n        if (LOGGER.isTraceEnabled()) {\n            LOGGER.trace(format(\"Determining table name for entity type %s : %s\",\n                    entityClass.getCanonicalName(), tableName));\n        }\n\n        return tableName;\n    }", "public static Vec2D fromDegrees2(double angleInDegrees,double magnitude){\n  double x=magnitude * Math.sin(angleInDegrees * Math.PI / 180);\n  double y=magnitude * Math.cos(angleInDegrees * Math.PI / 180);\n  return new Vec2D(x,y);\n}\n", "\tpublic void modelElementChanged(ModelEvent event) {\n\t\t// update\n\t\tupdateBreakPointsTree();\n\t}\n", "final public void write(char[] buf){\n  try {\n    _out.print(buf,0,buf.length);\n  }\n catch (  IOException e) {\n    log.log(Level.FINE,e.toString(),e);\n  }\n}\n", "public static boolean isDatabasePresent(String packageName,String dbName){\n  SQLiteDatabase checkDB=null;\n  try {\n    checkDB=SQLiteDatabase.openDatabase(\"/data/data/\" + packageName + \"/databases/\"+ dbName,null,SQLiteDatabase.OPEN_READONLY);\n    checkDB.close();\n  }\n catch (  SQLiteException e) {\n    e.printStackTrace();\n    Log.e(TAG,\"The database does not exist.\" + e.getMessage());\n  }\ncatch (  Exception e) {\n    e.printStackTrace();\n    Log.e(TAG,\"Exception \" + e.getMessage());\n  }\n  boolean isDbPresent=checkDB != null;\n  return isDbPresent;\n}\n", "    public void post(Runnable runnable) {\n        threadPool.execute( runnable );\n    }\n", "private static final String truncateNameTo45Bytes(String name){\n  String ret=name;\n  if (ret.getBytes().length > MAX_BYTES) {\n    ret=name.substring(0,MAX_BYTES);\n  }\n  if (ret.getBytes().length > MAX_BYTES) {\n    ret=name.substring(0,MAX_BYTES / 2);\n  }\n  return ret;\n}\n", "static long adjustForField(long sizeSoFar, final Field f) {\r\n    final Class<?> type = f.getType();\r\n    final int fsize = type.isPrimitive() ? primitiveSizes.get(type) : NUM_BYTES_OBJECT_REF;\r\n    // TODO: No alignments based on field type/ subclass fields alignments?\r\n    return sizeSoFar + fsize;\r\n  }", "public TimeSection(){\n  this(LocalTime.now(),LocalTime.now(),\"\",null,Color.TRANSPARENT,Color.TRANSPARENT,Color.TRANSPARENT);\n}\n", "protected String generateMessage(Log log){\n  ErrLoggingEvent ev=log.getLoggingEvent();\n  if (host != null) {\n    return String.format(\"[ %s ] %s%n%s%n:mag: %s/log/list.err?id=%s\",ev.getLevel(),log.getRabbitId(),ev.getRenderedMessage(),host,log.getRabbitId());\n  }\n else {\n    return String.format(\"[ %s ] %s%n%s\",ev.getLevel(),log.getRabbitId(),ev.getRenderedMessage());\n  }\n}\n", "@Override public void agg(Object newVal){\n  if (newVal instanceof byte[]) {\n    ByteBuffer buffer=ByteBuffer.wrap((byte[])newVal);\n    buffer.rewind();\n    while (buffer.hasRemaining()) {\n      byte[] valueByte=new byte[buffer.getInt()];\n      buffer.get(valueByte);\n      BigDecimal valueBigDecimal=DataTypeUtil.byteToBigDecimal(valueByte);\n      aggVal=aggVal.add(valueBigDecimal);\n      count+=buffer.getDouble();\n      firstTime=false;\n    }\n    return;\n  }\n  if (firstTime) {\n    aggVal=(BigDecimal)newVal;\n    firstTime=false;\n  }\n else {\n    aggVal=aggVal.add((BigDecimal)newVal);\n  }\n  count++;\n}\n", "public void assertSeenPrompts(List<String> prompts){\n  Assert.assertEquals(prompts,seenPrompts);\n}\n", "private Response doRSET(SMTPSession session,String argument){\n  if ((argument == null) || (argument.length() == 0)) {\n    session.resetState();\n    return OK;\n  }\n else {\n    return SYNTAX_ERROR;\n  }\n}\n", "public abstract boolean match ( OpApplNode test , ModuleNode mn ) throws AbortException ;", "public void testDecodeAttributeBodyv6 ( ) throws StunException { byte [ ] attributeValue = msgFixture . mappedAddressv6 ; char offset = Attribute . HEADER_LENGTH ; char length = ( char ) ( attributeValue . length - offset ) ; addressAttribute . decodeAttr", "void unlock ( Object key ) ;", "    public void setFeatureType(FeatureType[] featureType) {\n        this.featureType.clear();\n        for (int i = 0; i < featureType.length; i++) {\n            addFeatureType( featureType[i] );\n        }\n    }\n", "protected boolean isEmptyTag(String tagName){\n  int i=0;\n  boolean found=false;\n  while ((i < EMPTY_TAGS.length) && (!found)) {\n    if (tagName.equals(EMPTY_TAGS[i])) {\n      found=true;\n    }\n    i++;\n  }\n  return found;\n}\n", "public static void updateFile ( ContainerConfig config , String containerConfigURL , String schemaPrefixFileName ) throws IOException { ReplaceInFileUtils containerFile = new ReplaceInFileUtils ( containerConfigURL ) ; containerFile . xmlReplace ( CONTAIN", "    public SmtpTemplate getTemplate(final SmtpBizDriver bizDriver, IScriptNode node) throws XAwareException{\n\n        // First attempt to get Template from the Pool\n        final IChannelKey key = bizDriver.getChannelKey();\n        SmtpTemplate template = (SmtpTemplate) node.getChannelScope().getScopedChannel(IScopedChannel.Type.SMTP, key);\n\n        if (template == null) { // Create a new one and put it in the ChannelScope\n            template = new SmtpTemplate(bizDriver);\n            node.getChannelScope().setScopedChannel(key, template);\n        }\n        return template;\n    }\n", "public static IPackageFragmentRoot addSourceContainer ( IJavaProject jproject , String containerName , IPath [ ] inclusionFilters , IPath [ ] exclusionFilters ) throws CoreException { return addSourceContainer ( jproject , containerName , inclusionFilters , exclusionFilters , null ) ; }", "public synchronized void removeListener(final T listener){\n  listeners.remove(listener);\n}\n", "public void addToBucket(BasicBlock block){\n  bucket.add(block);\n}\n", "\tprotected void delete(File file) {\n\t\tif (file.isDirectory()) {\n\t\t\tFile[] children = file.listFiles();\n\t\t\tfor (int i = 0; i < children.length; i++) {\n\t\t\t\tdelete(children[i]);\n\t\t\t}\n\t\t}\n\t\tif (!file.delete()) {\n\t\t\tfile.delete();\n\t\t}\n\t}\n", "void append(char text[],int offset,int length){\n  buffer.append(text,offset,length);\n  subwordCount++;\n}\n", "public void addVariable(VariableInitializer v){\n  assertNotNull(v);\n  variables.add(v);\n  v.setParent(this);\n}\n", "  public void log(int level, String msg) {\n    log(level, msg, null);\n  }\n", "\tprivate void enableMenuItems() {\n\t\tControllerFacade.getInstance().updateSessionMenuItems();\n\t}\n", "    private void addComponent(Component component, int x, int y, int width, int height) {\n        gc.gridx = x;\n        gc.gridy = y;\n        gc.gridwidth = width;\n        gc.gridheight = height;\n        gc.weightx = 0.0;\n        gc.weighty = 0.0;\n        gc.anchor = GridBagConstraints.CENTER;\n        gc.fill = GridBagConstraints.NONE;\n        getContentPane().add(component, gc);\n    }\n", "protected GlyfSimple ( ) { }", "  private List getCleanUpMenu() {\n    if (sCleanUpMenu == null) {\n      sCleanUpMenu = Application.getMenu(Application.messages[NewsReader.MSG_ME_CLEANUP], NewsReader.ME_CLEANUP, -1, Application.cBACK);\n    }\n    return sCleanUpMenu;\n  }\n", "public static String unifyLineSeparators ( String s ) { return unifyLineSeparators ( s , System . getProperty ( STR_ ) ) ; }", "@Nullable\n  public static String javaScriptEscapeForRegEx (@Nullable final String sInput)\n  {\n    if (StringHelper.hasNoText (sInput))\n      return sInput;\n\n    final char [] aInput = sInput.toCharArray ();\n    if (!StringHelper.containsAny (aInput, CHARS_TO_MASK_REGEX))\n      return sInput;\n\n    // At last each character has one masking character\n    final char [] ret = new char [aInput.length * 2];\n    int nIndex = 0;\n    for (final char cCurrent : aInput)\n      if (ArrayHelper.contains (CHARS_TO_MASK_REGEX, cCurrent))\n      {\n        ret[nIndex++] = MASK_CHAR_REGEX;\n        ret[nIndex++] = cCurrent;\n      }\n      else\n        ret[nIndex++] = cCurrent;\n\n    return new String (ret, 0, nIndex);\n  }", "public static List<File> findFiles(final File dir, final String filenameToSearch)\n\t{\n\t\tfinal List<File> foundedFileList = new ArrayList<>();\n\t\tfinal String regex = RegExExtensions.replaceWildcardsWithRE(filenameToSearch);\n\t\tfinal String[] children = dir.list();\n\t\tfor (final String filename : children)\n\t\t{\n\t\t\tif (filename.matches(regex))\n\t\t\t{\n\t\t\t\tfinal File foundedFile = new File(filename);\n\t\t\t\tfoundedFileList.add(foundedFile);\n\t\t\t}\n\t\t}\n\t\treturn foundedFileList;\n\t}", "E pollFirst ( long timeout , TimeUnit unit ) throws InterruptedException ;", "\tprivate void newInternalPaging() {\n//\t\tassert inPagingMold(): \"paging mold only\";\n//\t\tassert (_paging == null && _pgi == null);\n\n\t\tfinal Paging paging = new Paging();\n\t\tpaging.setAutohide(true);\n\t\tpaging.setDetailed(true);\n\t\tpaging.applyProperties();\n\t\tpaging.setTotalSize(getVisibleItemCount());\n\t\tpaging.setParent(this);\n\t\tif (_pgi != null)\n\t\t\taddPagingListener(_pgi);\n\t}\n", "  public void setCellToolTips(String[] toolTips) {\n    this.toolTips = toolTips;\n    initCellToolTips();\n  }\n", "protected boolean isMultimedia(File file) {\n        //noinspection SimplifiableIfStatement\n        if (isDir(file)) {\n            return false;\n        }\n\n        String path = file.getPath().toLowerCase();\n        for (String ext : MULTIMEDIA_EXTENSIONS) {\n            if (path.endsWith(ext)) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "@Override\n    protected CommPortAdapter createResourceImpl()\n    {\n        //get COMM port name\n        String portName=this.getPortName();\n        \n        //get timeout\n        int timeout=this.getTimeOut();\n\n        CommPort commPort=null;\n        try\n        {\n            //get COMM port identifier\n            CommPortIdentifier commPortIdentifier=this.getPortIdentifier(portName);\n\n            //open connection\n            commPort=commPortIdentifier.open(\"fax4j\",timeout);\n        }\n        catch(Exception exception)\n        {\n            throw new FaxException(\"Unable to connect to COMM port: \"+portName,exception);\n        }\n\n        //create adapter wrapper\n        CommPortAdapter adapter=new RXTXCommPortAdapter(commPort);\n        \n        return adapter;\n    }", "public WebhookMessageBuilder addFile(File file)\n    {\n        Checks.notNull(file, \"File\");\n        return addFile(file.getName(), file);\n    }", "    public TypeExpr copy() {\n        return new PartialLiteral(partLiteral, part);\n    }\n", "public AnimationDialogFragment build ( ) { if ( speedCoefficient < NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } if ( speedCoefficient == NUM_ ) { speedCoefficient = Constants . DEFAULT_SPEED_COEFFICIENT ; } return new AnimationDialogFragment (", "public static void applyDecidedIconOrSetGone(ImageHolder imageHolder, ImageView imageView, int iconColor, boolean tint) {\n        if (imageHolder != null && imageView != null) {\n            Drawable drawable = ImageHolder.decideIcon(imageHolder, imageView.getContext(), iconColor, tint);\n            if (drawable != null) {\n                imageView.setImageDrawable(drawable);\n                imageView.setVisibility(View.VISIBLE);\n            } else if (imageHolder.getBitmap() != null) {\n                imageView.setImageBitmap(imageHolder.getBitmap());\n                imageView.setVisibility(View.VISIBLE);\n            } else {\n                imageView.setVisibility(View.GONE);\n            }\n        } else if (imageView != null) {\n            imageView.setVisibility(View.GONE);\n        }\n    }", "public void seek(long block, long recordInBlock) throws IOException {\n\n\t\tList<BlockMetaData> blockMetaData = reader.getRowGroups();\n\n\t\tif (block == -1L && recordInBlock == -1L) {\n\t\t\t// the split was fully consumed\n\t\t\tcurrentBlock = blockMetaData.size() - 1;\n\t\t\tnumReadRecords = numTotalRecords;\n\t\t\tnumRecordsUpToCurrentBlock = numTotalRecords;\n\t\t\treturn;\n\t\t}\n\n\t\t// init all counters for the start of the first block\n\t\tcurrentBlock = 0;\n\t\tnumRecordsUpToPreviousBlock = 0;\n\t\tnumRecordsUpToCurrentBlock = blockMetaData.get(0).getRowCount();\n\t\tnumReadRecords = 0;\n\n\t\t// seek to the given block\n\t\twhile (currentBlock < block) {\n\t\t\tcurrentBlock++;\n\t\t\treader.skipNextRowGroup();\n\t\t\tnumRecordsUpToPreviousBlock = numRecordsUpToCurrentBlock;\n\t\t\tnumRecordsUpToCurrentBlock += blockMetaData.get(currentBlock).getRowCount();\n\t\t\tnumReadRecords = numRecordsUpToPreviousBlock;\n\t\t}\n\n\t\t// seek to and read the given record\n\t\tPageReadStore pages = reader.readNextRowGroup();\n\t\trecordReader = createRecordReader(pages);\n\t\tfor (int i = 0; i <= recordInBlock; i++) {\n\t\t\treadNextRecord();\n\t\t}\n\t}", "public static Process runCommand (List<String> toRun) throws OSHelperException {\n\t\tProcess proc;\n\t\tProcessBuilder procBuilder = new ProcessBuilder ();\n\t\tprocBuilder.command (toRun);\n\n\t\ttry {\n\t\t\tproc = procBuilder.start ();\n\t\t} catch (IOException ex) {", "  public String costTipText() {\n    return \"The cost parameter C for C-SVC, epsilon-SVR and nu-SVR.\";\n  }\n", "\tpublic boolean isSetDescription() {\n\t\treturn setDescription;\n\t}\n", "public CSelectionCriteriumPanel ( final CSelectionCriterium criterium ) { super ( new BorderLayout ( ) ) ; m_criterium = criterium ; selectionStateBox . addActionListener ( selectionStateBoxListener ) ; initPanel ( ) ; }", "public PatchSetAttribute asPatchSetAttribute ( RevWalk revWalk , Change change , PatchSet patchSet ) { try ( ReviewDb db = schema . open ( ) ) { return asPatchSetAttribute ( db , revWalk , change , patchSet ) ; } catch ( OrmException e ) { log . error ( S", "private void computeEquationParts(){\n  expMultiplier=Math.sqrt(2.0 * Math.PI) / sigma / rho;\n  expMember=4.0 * sigma * sigma;\n}\n", "\tstatic private void generatePropertySetterCalls(IPropertyHolderBind flowletBind, CodeBlock codeBlock, String fieldName) {\n\t\tList properties = flowletBind.getProperties();\n\t\tif (properties == null || properties.isEmpty())\n\t\t\treturn;\n\t\t\t\n\t\tfor (Iterator iter = properties.iterator(); iter.hasNext();) {\n\t\t\tPropertyBind propBind = (PropertyBind) iter.next();\n\t\t\tcodeBlock.addFragment(new CodeLine(fieldName + \".setProperty(\\\"\"\n\t\t\t\t\t\t\t+ propBind.getName() + \"\\\", \\\"\"\n\t\t\t\t\t\t\t+ propBind.getValue() + \"\\\");\"));\n\t\t}\n\t}\n", "public synchronized int send ( byte [ ] buffer , int offset , int len ) throws IOException { if ( m_state != PseudoTcpState . TCP_ESTABLISHED ) { throw new IOException ( STR_ ) ; } long available_space ; available_space = m_sbuf . getWriteRemaining ( ) ; ", "\tpublic void advanceStatus(String newStatus){\n\t\t\n\t\tif (prioritizeStatusString(newStatus) > prioritizeStatusString(uaStatus)){\n\t\t\tuaStatus = newStatus;\n\t\t}\n\t\t\n\t}\n", "public void initializeConnectionToPlayer ( NetworkManager netManager , EntityPlayerMP playerIn ) { initializeConnectionToPlayer ( netManager , playerIn , null ) ; }", "    private boolean isJobNameValid(String str) {\n      if(str == null) {\n        return false;\n      }\n      String[] parts = str.split(\"_\");\n      if(parts.length == 3) {\n        if(parts[0].equals(\"job\")) {\n            // other 2 parts should be parseable\n            return JobTracker.validateIdentifier(parts[1])\n                   && JobTracker.validateJobNumber(parts[2]);\n        }\n      }\n      return false;\n    }\n", "public CDefaultProgressOperation ( final String description , final boolean indeterminate , final boolean showCancelButton ) { m_description = description ; m_progressPanel = new CProgressPanel ( STR_ , indeterminate , showCancelButton ) ; m_progressPanel . start ( ) ; CGlobalProgressManager . instance ( ) . add ( this ) ; }", "private ItemDetail getItemDetail(Gson gson, JsonElement itemType, JsonElement detail) {\n\t\tif (itemType == null || detail == null) return null;\n\n\t\tItem.Type type = gson.fromJson(itemType, Item.Type.class);\n\t\tClass<? extends ItemDetail> detailType;\n\n\t\tswitch (type) {\n\t\t\tcase Armor:\n\t\t\t\tdetailType = Armor.class;\n\t\t\t\tbreak;\n\t\t\tcase Back:\n\t\t\t\tdetailType = Back.class;\n\t\t\t\tbreak;\n\t\t\tcase Bag:\n\t\t\t\tdetailType = Bag.class;\n\t\t\t\tbreak;\n\t\t\tcase Consumable:\n\t\t\t\tdetailType = Consumable.class;\n\t\t\t\tbreak;\n\t\t\tcase MiniPet:\n\t\t\t\tdetailType = Mini.class;\n\t\t\t\tbreak;\n\t\t\tcase Trinket:\n\t\t\t\tdetailType = Trinket.class;\n\t\t\t\tbreak;\n\t\t\tcase UpgradeComponent:\n\t\t\t\tdetailType = UpgradeComponent.class;\n\t\t\t\tbreak;\n\t\t\tcase Weapon:\n\t\t\t\tdetailType = Weapon.class;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tdetailType = Utility.class;\n\t\t}\n\n\t\treturn gson.fromJson(detail, detailType);\n\t}", "protected void definingClass(String className){\n  String baseName=Name.suffix(className,1);\n  int i=baseName.indexOf(\"$\");\n  if (i != -1)   baseName=baseName.substring(i + 1);\n  String cur=(String)definingClassesBaseNames.get(baseName);\n  if (cur != null)   throw new InterpreterError(\"Defining class problem: \" + className + \": BeanShell cannot yet simultaneously define two or more \"+ \"dependent classes of the same name.  Attempt to define: \"+ className+ \" while defining: \"+ cur);\n  definingClasses.put(className,NOVALUE);\n  definingClassesBaseNames.put(baseName,className);\n}\n", "public V get(Map<?, V> map){\r\n\t\tfor (Object k : keys){\r\n\t\t\tV v = map.get(k);\r\n\t\t\tif (v != null){\r\n\t\t\t\treturn v;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}", "public RequestHandle post ( String url , ResponseHandlerInterface responseHandler ) { return post ( null , url , null , responseHandler ) ; }", "boolean createUserForLDAP ( User user ) ;", "public String getOnColor() {\n\t\tString value = (String) getStateHelper().eval(PropertyKeys.onColor);\n\t\treturn value;\n\t}", "private LockedObject generateLockedObjects( String path ) {\n        if (!locks.containsKey(path)) {\n            LockedObject returnObject = new LockedObject(this, path, !temporary);\n            String parentPath = getParentPath(path);\n            if (pare", "public void removeCameraListener(CameraListener lis){\n  if (listeners == null) {\n    return;\n  }\n  listeners.remove(lis);\n}\n", "public char skip(int n)\n  {\n    _pos += n;\n    \n    if (_length <= _pos) {\n      _pos = _string.length();\n      return DONE;\n    } else\n      return _string.charAt(_pos);\n  }", "\tprivate void init(int newType, int newSubType, byte[] newData) {\n\t\ttype = newType;\n\t\tsubType = newSubType;\n\t\tdata = newData;\n\t}\n", "public void setEditIcon(Icon editIcon, String text) {\n        if (editIcon != null) {\n            editButton.setIcon(editIcon);\n            if (text != null) {\n                editButton.setToolTipText(text);\n            }\n            editButton.setText(\"\");\n        } else {\n            editButton.setIcon(null);\n            if (text != null) {\n                editButton.setText(text);\n            }\n        }\n    }", "public PhaseOneResult process(TreePath bodyPath,ProcessingEnvironment env,UnderlyingAST underlyingAST,Label exceptionalExitLabel,TreeBuilder treeBuilder,AnnotationProvider annotationProvider){\n  this.env=env;\n  this.tryStack=new TryStack(exceptionalExitLabel);\n  this.treeBuilder=treeBuilder;\n  this.annotationProvider=annotationProvider;\n  elements=env.getElementUtils();\n  types=env.getTypeUtils();\n  treeLookupMap=new IdentityHashMap<>();\n  convertedTreeLookupMap=new IdentityHashMap<>();\n  nodeList=new ArrayList<>();\n  bindings=new HashMap<>();\n  leaders=new HashSet<>();\n  breakLabels=new HashMap<>();\n  continueLabels=new HashMap<>();\n  returnNodes=new ArrayList<>();\n  scan(bodyPath,null);\n  nodeList.add(new UnconditionalJump(regularExitLabel));\n  return new PhaseOneResult(underlyingAST,treeLookupMap,convertedTreeLookupMap,nodeList,bindings,leaders,returnNodes);\n}\n", "public static void assertNotStatic(final Field field, Class<? extends Annotation> annotation) \n   {\n      if (Modifier.isStatic(field.getModifiers()))\n      {\n         throw annotation == null ? MESSAGES.fieldCannotBeStaticOrFinal(field) : MESSAGES.fieldCannotBeStaticOrFinal2(field, annotation);\n      }\n   }", "\tpublic int getLength() {\n\t\tif (PEPActivator.getDefault().getDetectedOS()\n\t\t\t== KnownPlatforms.WINDOWS) {\n\t\t\treturn getWindowsLength();\n\t\t}\n\t\telse {\n\t\t\treturn getLinuxLength();\n\t\t}\n\t}\t\n", "boolean hasInnerCorner ( ) { return hasOuterCorner ( ) && ( getPreBorderWidth ( ) >= NUM_ ) && ( getPostBorderWidth ( ) >= NUM_ ) && ( getOuterCornerRadius ( ) > getPreBorderWidth ( ) ) && ( getOuterCornerRadius ( ) > getPostBorderWidth ( ) ) ; }", "\tpublic void close() throws IOException {\n\t\tthis.closeConnections();\n\t\tif(Server.server!= null){\n\t\t\tServer.server.close();\n\t\t}\n\t}\n", "public void init ( ) { this . encodedSize = NUM_ ; this . encodedSQLSize = NUM_ ; }", "public void add(Collection<Dashboard> dashboards)\n    {\n        for(Dashboard dashboard : dashboards)\n            this.dashboards.put(dashboard.getId(), dashboard);\n    }", "private String transformSQLCase(String sql){\n  StringBuilder s=new StringBuilder(sql);\n  try {\n    PositionedStringReader r=new PositionedStringReader(sql);\n    StreamTokenizer st=new StreamTokenizer(r);\n    st.resetSyntax();\n    for (    char quote : valueQuotes)     st.quoteChar(quote);\n    int start=0;\n    int end=0;\n    while (st.nextToken() != StreamTokenizer.TT_EOF) {\n      if (end < (r.getCurrentPosition() - 1) || r.getCurrentPosition() >= (sql.length())) {\n        String str=sql.substring(start,end + 1);\n        str=transformCase(str);\n        s.replace(start,end + 1,str);\n        start=r.getCurrentPosition();\n      }\n      end=r.getCurrentPosition();\n    }\n  }\n catch (  IOException e) {\n    logger.warn(\"Unexpected exception while transforming SQL statement case: \" + e);\n  }\n  return s.toString();\n}\n", "    public void actualizeText() {\n        // set menu\n        JMenuBar menu=this.getJMenuBar();\n        if (menu instanceof HGBaseGui) ((HGBaseGui)menu).actualizeText();\n        // set containing components\n        for (int i=0;i<this.getComponentCount();i++) {\n            Component c=getComponent(i);\n            if (c instanceof HGBaseGui) ((HGBaseGui)c).actualizeText();\n        }\n        if (this.panel!=null) panel.actualizeText();\n        // inform the listeners\n        for (Iterator it=actualizeTextList.iterator(); it.hasNext(); ) {\n            IActualizeTextListener listener = (IActualizeTextListener)it.next();\n            listener.actualizeText();\n        }\n    }\n", "@Nonnull\n    public BugInstance addSourceLineRange(ClassContext classContext, PreorderVisitor visitor, int startPC, int endPC) {\n        SourceLineAnnotation sourceLineAnnotation = SourceLineAnnotation.fromVisitedInstructionRange(classContext, visitor,\n  ", "    public void receivedEmptyResult(InfoQuery iq, String id) { \n        if (id != null && !id.equals(servedID.getID())) return;\n        \n        servedID.setID(null);\n        outputTextArea.append(\"OK\" + \"\\n\\n**********\\n\\n\");\n        progressInfo.setText(\"Ready\");\n    }    \n", "boolean run(String... argArray) {\n        Queue<String> args = new ArrayDeque<>(Arrays.asList(argArray));\n        LoadMode loadMode = LoadMode.RELEASE;\n        ScanMode scanMode = ScanMode.ARGS;\n        String dir = null;\n        String jar = null;\n        String jdkHome = null;\n        String release = \"9\";\n        List<String> loadClasses = new ArrayList<>();\n        String csvFile = null;\n\n        try {\n            while (!args.isEmpty()) {\n                String a = args.element();\n                if (a.startsWith(\"-\")) {\n                    args.remove();\n                    switch (a) {\n                        case \"--class-path\":\n                            classPath.clear();\n                            Arrays.stream(args.remove().split(File.pathSeparator))\n                                  .map(File::new)\n                                  .forEachOrdered(classPath::add);\n                            break;\n                        case \"--for-removal\":\n                            forRemoval = true;\n                            break;\n                        case \"--full-version\":\n                            out.println(System.getProperty(\"java.vm.version\"));\n                            return false;\n                        case \"--help\":\n                        case \"-h\":\n                            out.println(Messages.get(\"main.usage\"));\n                            out.println();\n                            out.println(Messages.get(\"main.help\"));\n                            return false;\n                        case \"-l\":\n                        case \"--list\":\n                            require(scanMode == ScanMode.ARGS);\n                            scanMode = ScanMode.LIST;\n                            break;\n                        case \"--release\":\n                            loadMode = LoadMode.RELEASE;\n                            release = args.remove();\n                            if (!validReleases.contains(release)) {\n                                throw new UsageException();\n                            }\n                            break;\n                        case \"-v\":\n                        case \"--verbose\":\n                            verbose = true;\n                            break;\n                        case \"--version\":\n                            out.println(System.getProperty(\"java.version\"));\n                            return false;\n                        case \"--Xcompiler-arg\":\n                            options.add(args.remove());\n                            break;\n                        case \"--Xcsv-comment\":\n                            comments.add(args.remove());\n                            break;\n                        case \"--Xhelp\":\n                            out.println(Messages.get(\"main.xhelp\"));\n                            return false;\n                        case \"--Xload-class\":\n                            loadMode = LoadMode.CLASSES;\n                            loadClasses.add(args.remove());\n                            break;\n                        case \"--Xload-csv\":\n                            loadMode = LoadMode.LOAD_CSV;\n                            csvFile = args.remove();\n                            break;\n                        case \"--Xload-dir\":\n                            loadMode = LoadMode.DIR;\n                            dir = args.remove();\n                            break;\n                        case \"--Xload-jar\":\n                            loadMode = LoadMode.JAR;\n                            jar = args.remove();\n                            break;\n                        case \"--Xload-jdk9\":\n                            loadMode = LoadMode.JDK9;\n                            jdkHome = args.remove();\n                            break;\n                        case \"--Xload-old-jdk\":\n                            loadMode = LoadMode.OLD_JDK;\n                            jdkHome = args.remove();\n                            break;\n                        case \"--Xload-self\":\n                            loadMode = LoadMode.SELF;\n                            break;\n                        case \"--Xprint-csv\":\n                            require(scanMode == ScanMode.ARGS);\n                            scanMode = ScanMode.PRINT_CSV;\n                            break;\n                        default:\n                            throw new UsageException();\n                    }\n                } else {\n                    break;\n                }\n            }\n\n            if ((scanMode == ScanMode.ARGS) == args.isEmpty()) {\n                throw new UsageException();\n            }\n\n            if (    forRemoval && loadMode == LoadMode.RELEASE &&\n                    releasesWithoutForRemoval.contains(release)) {\n                throw new UsageException();\n            }\n\n            boolean success = false;\n\n            switch (loadMode) {\n                case CLASSES:\n                    success = doClassNames(loadClasses);\n                    break;\n                case DIR:\n                    success = processDirectory(dir, loadClasses);\n                    break;\n                case JAR:\n                    success = processJarFile(jar, loadClasses);\n                    break;\n                case JDK9:\n                    require(!args.isEmpty());\n                    success = processJdk9(jdkHome, loadClasses);\n                    break;\n                case LOAD_CSV:\n                    deprList = DeprDB.loadFromFile(csvFile);\n                    success = true;\n                    break;\n                case OLD_JDK:\n                    success = processOldJdk(jdkHome, loadClasses);\n                    break;\n                case RELEASE:\n                    success = processRelease(release, loadClasses);\n                    break;\n                case SELF:\n                    success = processSelf(loadClasses);\n                    break;\n                default:\n                    throw new UsageException();\n            }\n\n            if (!success) {\n                return false;\n            }\n        } catch (NoSuchElementException | UsageException ex) {\n            err.println(Messages.get(\"main.usage\"));\n            return false;\n        } catch (IOException ioe) {\n            if (verbose) {\n                ioe.printStackTrace(err);\n            } else {\n                err.println(ioe);\n            }\n            return false;\n        }\n\n        // now the scanning phase\n\n        boolean scanStatus = true;\n\n        switch (scanMode) {\n            case LIST:\n                for (DeprData dd : deprList) {\n                    if (!forRemoval || dd.isForRemoval()) {\n                        out.println(Pretty.print(dd));\n                    }\n                }\n                break;\n            case PRINT_CSV:\n                out.println(\"#jdepr1\");\n                comments.forEach(s -> out.println(\"# \" + s));\n                for (DeprData dd : deprList) {\n                    CSV.write(out, dd.kind, dd.typeName, dd.nameSig, dd.since, dd.forRemoval);\n                }\n                break;\n            case ARGS:\n                DeprDB db = DeprDB.loadFromList(deprList);\n                List<String> cp = classPath.stream()\n                                           .map(File::toString)\n                                           .collect(toList());\n                Scan scan = new Scan(out, err, cp, db, verbose);\n\n                for (String a : args) {\n                    boolean s;\n                    if (a.endsWith(\".jar\")) {\n                        s = scan.scanJar(a);\n                    } else if (a.endsWith(\".class\")) {\n                        s = scan.processClassFile(a);\n                    } else if (Files.isDirectory(Paths.get(a))) {\n                        s = scan.scanDir(a);\n                    } else {\n                        s = scan.processClassName(a.replace('.', '/'));\n                    }\n                    scanStatus = scanStatus && s;\n                }\n                break;\n        }\n\n        return scanStatus;\n    }", "@Override public void onReset(){\n  closeDialog();\n}\n", "public void start() throws IOException, ConnectionFailedException {\n    LOG.info(\"Start Alluxio job service\");\n    setupTest();\n    updateTestConf();\n    startMaster();\n    TestUtils.waitForReady(mMaster);\n    startWorker();\n    TestUtils.waitForReady(mWorker);\n  }", "public Path createAuxClasspath ( ) { if ( auxClasspath == null ) { auxClasspath = new Path ( getProject ( ) ) ; } return auxClasspath . createPath ( ) ; }", "@Nullable\n    public Node<I> getChild(int idx) {\n        if (children == null) {\n            return null;\n        }\n        return children.array[idx];\n    }", "protected void refreshVisuals() {\n\tPoint loc = getWorkflowSubpart().getLocation();\n\tDimension size= getWorkflowSubpart().getSize();\n\tRectangle r = new Rectangle(loc ,size);\n\t((NodeFigure) this.getFigure()).setText(((WorkflowSubpart) this.getModel()).getName());\n\t((GraphicalEditPart) getParent()).setLayoutConstraint(\n\t\tthis,\n\t\tgetFigure(),\n\t\tr);\n}\n", "public static bridgegroup_binding get(nitro_service service, Long id) throws Exception{\n\t\tbridgegroup_binding obj = new bridgegroup_binding();\n\t\tobj.set_id(id);\n\t\tbridgegroup_binding response = (bridgegroup_binding) obj.get_resource(service);\n\t\treturn response;\n\t}", "public static DiscoMatchType calculateCompositeMatchType(MatchType bestMatch,\n                                                             MatchType worstMatch) {\n        if (bestMatch instanceof LogicConceptMatchType && worstMatch instanceof LogicConceptMatchType) {\n            return calculateCompositeMatchType((LogicConceptMatchType) bestMatch, (LogicConceptMatchType) worstMatch);\n        }\n\n        return DiscoMatchType.Fail;\n    }", "public void connectImageAsset ( ImageAsset imageAsset , TransitionType transitionType ) { connectImageAsset ( imageAsset , transitionType , BOOL_ ) ; }", "    public void write(RowOutputInterface out) {\n\n        out.writeSize(storageSize);\n        out.writeData(oData, tTable);\n        out.writeEnd();\n\n        hasDataChanged = false;\n    }\n", "public void translate(Point2D vector){\n  translate(vector.getX(),vector.getY());\n}\n", "public static boolean moveUp(Alignment alignment,int firstRow,int lastRow){\n  lastRow=Math.min(lastRow,alignment.getNumberOfSequences());\n  if (firstRow <= 0 || firstRow > lastRow)   return false;\n else {\n    Integer[] array=new Integer[alignment.getNumberOfSequences()];\n    for (int i=0; i < alignment.getNumberOfSequences(); i++)     array[i]=alignment.getOrder(i);\n    int replaced=array[firstRow - 1];\n    System.arraycopy(array,firstRow,array,firstRow - 1,lastRow + 1 - firstRow);\n    array[lastRow]=replaced;\n    alignment.setOrder(Arrays.asList(array));\n    return true;\n  }\n}\n", "    public String getNonce() {\n        if (this.elementNonce != null) {\n            return getFirstNode(this.elementNonce).getData();\n        }\n        return null;\n    }\n", "protected List<String> getPersistQueries(EntityMetadata entityMetadata, Object entity,\n        org.apache.cassandra.thrift.Cassandra.Client conn, List<RelationHolder> rlHolders, Object ttlColumns) {\n        List<String> queries;\n        if (entityMetadata.isCounterColumnType()) {\n            queries = createUpdateQueryForCounter(entityMetadata, entity, conn, rlHolders);\n        } else {\n            queries = createInsertQuery(entityMetadata, entity, conn, rlHolders, ttlColumns);\n        }\n        return queries;\n    }", "public static void readFully(Input in,long position,byte[] buffer,int offset,int length) throws IOException {\n  int nread=0;\n  while (nread < length) {\n    int nbytes=in.read(position + nread,buffer,offset + nread,length - nread);\n    if (nbytes < 0) {\n      throw new IOException(\"End of stream reached before reading fully.\");\n    }\n    nread+=nbytes;\n  }\n}\n", "public void selectRadioButtonByValue(final String radioButtonName,\n\t\t\tfinal String value) {\n\t\tList<WebElement> radioGroup = driver.findElements(By\n\t\t\t\t.name(radioButtonName));\n\t\tfor (WebElement button : radioGroup) {\n\t\t\tif (button.getAttribute(\"value\").equalsIgnoreCase(value)) {\n\t\t\t\tbutton.click();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}", "public static FontProgram createFont(byte[] ttc,int ttcIndex,boolean cached) throws java.io.IOException {\n  String fontKey=null;\n  if (cached) {\n    fontKey=Integer.toString(ArrayUtil.hashCode(ttc)) + Integer.toString(ttcIndex);\n    FontProgram fontFound=FontCache.getFont(fontKey);\n    if (fontFound != null) {\n      return fontFound;\n    }\n  }\n  FontProgram fontBuilt=new TrueTypeFont(ttc,ttcIndex);\n  return cached ? FontCache.saveFont(fontBuilt,fontKey) : fontBuilt;\n}\n", "public int getTotalLeased(){\r\n\t\tint total=0;\r\n\t\tfor (int i=0; i < this.partitionCount && this.partitions[i] != null; i++){\r\n\t\t\ttotal+=this.partitions[i].getCreatedConnections()-this.partitions[i].getAvailableConnections();\r\n\t\t}\r\n\t\treturn total;\r\n\t}", "public static final IntStream reducingStream(IntStream stream, ReducingFunction func)\r\n    {\r\n        return StreamSupport.intStream(new ReducingSpliterator(stream, func), false);\r\n    }", "\tpublic void openLog(String name) throws RemoteException {\n\t\tString oldlog = logFileName;\n\t\t\n\t\tif (useLogger) {\n\t\t\tif (dbg > 2) System.out.println(prg +\": opening log \"+ name);\n\t\t\tlogFileName = name;\n\t\t\tif (gotLogger) {\n\t\t\t\ttry {\n\t\t\t\t\tcall(logger, \"closeOutputFile\", myID, oldlog);\n\t\t\t\t\tcall(logger, \"openOutputFile\", myID, logFileName);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tif (dbg > 2) {\n\t\t\t\t\t\tSystem.err.println(myID +\": Exception opening log \"+ name);\n\t\t\t\t\t\tSystem.err.println(e);\n\t\t\t\t\t}\n\t\t\t\t\tthrow new RemoteException(myID +\": opening log \"+ name, e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "\tpublic OMElement callOperation() {\n\t\tOMElement result = null;\n\n\t\tEndpointReference targetEPR = new EndpointReference(epr);\n\t\ttry {\n\t\t\tOptions options = new Options();\n\t\t\toptions.setTo(targetEPR);\n\t\t\toptions.setAction(operation);\n\n\t\t\toptions.setProperty(\n\t\t\t\t\torg.apache.axis2.transport.http.HTTPConstants.CHUNKED,\n\t\t\t\t\torg.apache.axis2.Constants.VALUE_FALSE);\n\n\t\t\tServiceClient client = new ServiceClient();\n\t\t\tclient.setOptions(options);\n\t\t\tresult = client.sendReceive(getPayload());\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn result;\n\t}\n", "public static <A, B, C, R> Stream<R> parallelZip(final Iterator<? extends A> a, final Iterator<? extends B> b, final Iterator<? extends C> c,\r\n            final TriFunction<? super A, ? super B, ? super C, R> zipFunction, final int queueSize) {\r\n        final AtomicInteger threadCounterA = new AtomicInteger(1);\r\n        final AtomicInteger threadCounterB = new AtomicInteger(1);\r\n        final AtomicInteger threadCounterC = new AtomicInteger(1);\r\n        final BlockingQueue<A> queueA = new ArrayBlockingQueue<>(queueSize);\r\n        final BlockingQueue<B> queueB = new ArrayBlockingQueue<>(queueSize);\r\n        final BlockingQueue<C> queueC = new ArrayBlockingQueue<>(queueSize);\r\n        final Holder<Throwable> eHolder = new Holder<>();\r\n        final MutableBoolean onGoing = MutableBoolean.of(true);\r\n\r\n        readToQueue(a, b, c, DEFAULT_ASYNC_EXECUTOR, threadCounterA, threadCounterB, threadCounterC, queueA, queueB, queueC, eHolder, onGoing);\r\n\r\n        return of(new QueuedIterator<R>(queueSize) {\r\n            A nextA = null;\r\n            B nextB = null;\r\n            C nextC = null;\r\n\r\n            @Override\r\n            public boolean hasNext() {\r\n                if (nextA == null || nextB == null || nextC == null) {\r\n                    try {\r\n                        while (nextA == null && onGoing.value() && (threadCounterA.get() > 0 || queueA.size() > 0)) { // (threadCounterA.get() > 0 || queueA.size() > 0) is wrong. has to check counter first\r\n                            nextA = queueA.poll(1, TimeUnit.MILLISECONDS);\r\n                        }\r\n\r\n                        if (nextA == null) {\r\n                            onGoing.setFalse();\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        while (nextB == null && onGoing.value() && (threadCounterB.get() > 0 || queueB.size() > 0)) { // (threadCounterB.get() > 0 || queueB.size() > 0) is wrong. has to check counter first\r\n                            nextB = queueB.poll(1, TimeUnit.MILLISECONDS);\r\n                        }\r\n\r\n                        if (nextB == null) {\r\n                            onGoing.setFalse();\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        while (nextC == null && onGoing.value() && (threadCounterC.get() > 0 || queueC.size() > 0)) { // (threadCounterC.get() > 0 || queueC.size() > 0) is wrong. has to check counter first\r\n                            nextC = queueC.poll(1, TimeUnit.MILLISECONDS);\r\n                        }\r\n\r\n                        if (nextC == null) {\r\n                            onGoing.setFalse();\r\n\r\n                            return false;\r\n                        }\r\n                    } catch (Exception e) {\r\n                        setError(eHolder, e, onGoing);\r\n                    }\r\n\r\n                    if (eHolder.value() != null) {\r\n                        throwError(eHolder, onGoing);\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public R next() {\r\n                if ((nextA == null || nextB == null || nextC == null) && hasNext() == false) {\r\n                    throw new NoSuchElementException();\r\n                }\r\n\r\n                boolean isOK = false;\r\n\r\n                try {\r\n                    final R result = zipFunction.apply(nextA == NONE ? null : nextA, nextB == NONE ? null : nextB, nextC == NONE ? null : nextC);\r\n                    nextA = null;\r\n                    nextB = null;\r\n                    nextC = null;\r\n                    isOK = true;\r\n                    return result;\r\n                } finally {\r\n                    // error happened\r\n                    if (isOK == false) {\r\n                        onGoing.setFalse();\r\n                    }\r\n                }\r\n            }\r\n        }).onClose(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                onGoing.setFalse();\r\n            }\r\n        });\r\n    }", "private void cancelLease(Lease lease){\n  try {\n    leaseRenewalMgr.cancel(lease);\n  }\n catch (  Exception e) {\n    logger.log(Level.FINER,\"exception occurred while cancelling an event \" + \"registration lease\",e);\n  }\n}\n", "public Observable<VirtualMachineScaleSetInstanceViewInner> getInstanceViewAsync(String resourceGroupName, String vmScaleSetName) {\n        return getInstanceViewWithServiceResponseAsync(resourceGroupName, vmScaleSetName).map(new Func1<ServiceResponse<VirtualMachineScaleSetInstanceViewInner>, VirtualMachineScaleSetInstanceViewInner>() {\n            @Override\n            public VirtualMachineScaleSetInstanceViewInner call(ServiceResponse<VirtualMachineScaleSetInstanceViewInner> response) {\n                return response.body();\n            }\n        });\n    }", "    public void disconnected(Bot bot) {\n        clearFriends();\n        clearChannels();\n    }\n", "public static void log(String label, Class<?> klass, Map<String, Object> map)\n   {\n      if (LOG != null)\n      {\n         LOG.write(label);\n         LOG.write(\": \");\n         LOG.println(klass.getSimpleName());\n\n         for (Map.Entry<String, Object> entry : map.entrySet())\n         {\n            LOG.println(entry.getKey() + \": \" + entry.getValue());\n         }\n         LOG.println();\n         LOG.flush();\n      }\n   }", "public void start() {\n    if (isActive) {\n      return;\n    }\n\n    log.info(\"Starting up the default async job executor [{}].\", getClass().getName());\n    \n    if (timerJobRunnable == null) {\n      timerJobRunnable = new AcquireTimerJobsRunnable(this, processEngineConfiguration.getJobManager());\n    }\n    \n    if (resetExpiredJobsRunnable == null) {\n      resetExpiredJobsRunnable = new ResetExpiredJobsRunnable(this);\n    }\n    \n    if (!isMessageQueueMode && asyncJobsDueRunnable == null) {\n      asyncJobsDueRunnable = new AcquireAsyncJobsDueRunnable(this);\n    }\n    \n    if (!isMessageQueueMode) {\n      initAsyncJobExecutionThreadPool();\n      startJobAcquisitionThread();\n    }\n    \n    startTimerAcquisitionThread();\n    startResetExpiredJobsThread();\n\n    isActive = true;\n\n    executeTemporaryJobs();\n  }", "HttpResponseTemp < ? > listProjectInfo ( ) ;", "public boolean isBufferAtString ( CharSequence buffer , int offset , CharSequence pattern ) { int patternEnd = offset + pattern . length ( ) ; return getBufferEnd ( ) >= patternEnd && StringUtil . equals ( buffer . subSequence ( offset , patternEnd ) , pa", "private GenericKieSessionMonitoringImpl getKnowledgeSessionBean(CBSKey cbsKey, KieRuntimeEventManager ksession) {\n        if (mbeansRefs.get(cbsKey) != null) {\n            return (GenericKieSessionMonitoringImpl) mbeansRefs.get(cbsKey);\n        } else {\n            if (ksession instanceof StatelessKnowledgeSession) {\n                synchronized (mbeansRefs) {\n                    if (mbeansRefs.get(cbsKey) != null) {\n                        return (GenericKieSessionMonitoringImpl) mbeansRefs.get(cbsKey);\n                    } else {\n                        try {\n                            StatelessKieSessionMonitoringImpl mbean = new StatelessKieSessionMonitoringImpl( cbsKey.kcontainerId, cbsKey.kbaseId, cbsKey.ksessionName );\n                            registerMBean( cbsKey, mbean, mbean.getName() );\n                            mbeansRefs.put(cbsKey, mbean);\n                            return mbean;\n                        } catch ( Exception e ) {\n                            logger.error(\"Unable to instantiate and register StatelessKieSessionMonitoringMBean\");\n                        }\n                        return null;\n                    }\n                }\n            } else {\n                synchronized (mbeansRefs) {\n                    if (mbeansRefs.get(cbsKey) != null) {\n                        return (GenericKieSessionMonitoringImpl) mbeansRefs.get(cbsKey);\n                    } else {\n                        try {\n                            KieSessionMonitoringImpl mbean = new KieSessionMonitoringImpl( cbsKey.kcontainerId, cbsKey.kbaseId, cbsKey.ksessionName );\n                            registerMBean( cbsKey, mbean, mbean.getName() );\n                            mbeansRefs.put(cbsKey, mbean);\n                            return mbean;\n                        } catch ( Exception e ) {\n                            logger.error(\"Unable to instantiate and register (stateful) KieSessionMonitoringMBean\");\n                        }\n                        return null;\n                    }\n                }\n            }\n        }\n    }", "public static PublicKey mutate(final PublicKey key){\n  return new PublicKey(Utils.incrementAtIndex(key.getRaw(),12));\n}\n", "    public boolean exceptionFilter(Request request, HttpException ex) {\n\treturn false;\n    }\n", "public static void load( InputStream in ) throws IOException {\r\n        if( in != null ) {\r\n            prp.load( in );\r\n        }\r\n        try {\r\n            prp.putAll( (java.util.Map)System.getProperties().clone() );\r\n        } catch( SecurityException se ) {\r\n            if( log.level > 1 )\r\n                log.println( \"SecurityException: jcifs will ignore System properties\" );\r\n        }\r\n    }", "public static Map<URLParts, String> splitURL(String URLString) {\n        try {\n            return splitURL(new URL(URLString));\n        } \n        catch (MalformedURLException ex) {\n            throw new RuntimeException(ex);\n        }\n    }", "public static long getNanoTick() {\n        synchronized(NANO_TICK) {\n            long tick = NANO_TICK.get();\n            if (tick > 0) {\n                return tick;\n            }\n            tick = computeTick();\n            NANO_TICK.set(tick);\n            return tick;\n        }\n    }", "private int readChar() throws IOException {\n  Reader readEncoding=_readEncoding;\n  if (readEncoding == null)   return read();\n else {\n    if (readEncoding.read(_charBuffer,0,1) == 1) {\n      return _charBuffer[0];\n    }\n else {\n      return -1;\n    }\n  }\n}\n", "public boolean isCanceled ( ) { return mCanceled ; }", "public void disconnectFromBroker(final MqttAsyncConnection connection){\n  try {\n    connection.disconnect(new MqttDisconnectionResultHandler());\n  }\n catch (  SpyException e) {\n    Platform.runLater(new MqttEventHandler(new MqttDisconnectionAttemptFailure", "public static boolean isDate ( String strDate , String pattern ) { try { parseDate ( strDate , pattern ) ; return BOOL_ ; } catch ( Exception e ) { return BOOL_ ; } }", "\tprotected void notifyFormulaEditorObserversParseMessage(String message) {\n\t\tfor (FormulaEditorObserver observer : new ArrayList<FormulaEditorObserver>(formulaEditorObservers)) {\n\t\t\tobserver.receiveParseMessage(this, message);\n\t\t}\n\t}\n", "public static JavacTrees instance(JavaCompiler.CompilationTask task) {\n        if (!(task instanceof BasicJavacTask))\n            throw new IllegalArgumentException();\n        return instance(((BasicJavacTask)task).getContext());\n    }", "public Parse filter(String url,WebPage page,Parse parse,HTMLMetaTags metaTags,DocumentFragment doc){\n  for (  ParseFilter parseFilter : parseFilters) {\n    parse=parseFilter.filter(url,page,parse,metaTags,doc);\n    if (!ParseStatusUtils.isSuccess(parse.getParseStatus())) {\n      return parse;\n    }\n  }\n  return parse;\n}\n", "public Object invoke(Object recorderProxy, Method method, Object[] args) throws Throwable {\n\t\tfinal Class<?>[] parameterTypes = method.getParameterTypes();\n\t\tif (parameterTypes.length == 0 && args == null) {\n\t\t\targs = new Object[0];\n\t\t}\n\t\tfinal MethodInv", "    public void registerBeanTag(String name, TagFactory factory) {\n        templates.put(name, factory);\n    }\n", "protected void drawCenterText(Canvas c){\n  String centerText=mChart.getCenterText();\n  if (mChart.isDrawCenterTextEnabled() && centerText != null) {\n    PointF center=mChart.getCenterCircleBox();\n    String[] lines=centerText.split(\"\\n\");\n    float maxlineheight=0f;\n    for (    String line : lines) {\n      float curHeight=Utils.calcTextHeight(mCenterTextPaint,line);\n      if (curHeight > maxlineheight)       maxlineheight=curHeight;\n    }\n    float linespacing=maxlineheight * 0.25f;\n    float totalheight=maxlineheight * lines.length - linespacing * (lines.length - 1);\n    int cnt=lines.length;\n    float y=center.y;\n    for (int i=0; i < lines.length; i++) {\n      String line=lines[lines.length - i - 1];\n      c.drawText(line,center.x,y + maxlineheight * cnt - totalheight / 2f,mCenterTextPaint);\n      cnt--;\n      y-=linespacing;\n    }\n  }\n}\n", "    public Automaton computeEmpty(Empty expr) {\n        Automaton result = createAutomaton();\n        result.setAcceptsEmptyWord(true);\n        return result;\n    }\n", "    public TradingDate next(int days) {\n\n\tCalendar date = this.toCalendar();\n\n\tfor(int i = 0; i < days; i++) {\n\n\t    // Add 1 day or more to skip weekends as necessary\n\t    do {\n\t\tdate.add(Calendar.DAY_OF_WEEK, 1);\n\t    } while(date.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY ||\n\t\t    date.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY);\n\t}\n\n\t// Create new date\n\treturn new TradingDate(date);\n    }\n", "public void setPartitionReplicaVersions(int partitionId, ServiceNamespace namespace,\n                                            long[] versions, int replicaOffset) {\n        replicaVersions[partitionId].set(namespace, versions, replicaOffset);\n    }", "public synchronized static void closePool ( String dbUrl , ODatabaseDocumentPool pool ) { logger . debug ( STR_ , dbUrl , pool ) ; try { pools . remove ( dbUrl ) ; pool . close ( ) ; logger . trace ( STR_ , dbUrl , pool ) ; } catch ( Exception ex ) { logg", "private void sawMonitorExit(int pc) {\n        if (!monitorSyncPCs.isEmpty()) {\n            ScopeBlock sb = findSynchronizedScopeBlock(rootScopeBlock, monitorSyncPCs.get(0).intValue());\n            if (sb != null) {\n                sb.setFinish(pc);\n            }\n            monitorSyncPCs.remove(monitorSyncPCs.size() - 1);\n        }\n    }", "public void addListener(TrackingListener listener){\n  listeners.add(listener);\n}\n", "    private void fireWindowAttachEvent(Window window) {\n        // Fires the window attach event\n        if (windowAttachListeners != null) {\n            final Object[] listeners = windowAttachListeners.toArray();\n            final WindowAttachEvent event = new WindowAttachEvent(window);\n            for (int i = 0; i < listeners.length; i++) {\n                ((WindowAttachListener) listeners[i]).windowAttached(event);\n            }\n        }\n    }\n", "JMenu createInsertMenu(){\n  JMenu insertMenu=new JMenu(\"Insert\");\n  insertMenu.add(actionManager.getNewNeuronAction());\n  insertMenu.add(actionManager.getNewActivityGeneratorAction());\n  insertMenu.addSeparator();\n  insertMenu.add(new AddNeuronsAction(this));\n  insertMenu.addSeparator();\n  insertMenu.add(actionManager.getNewGroupMenu());\n  insertMenu.add(actionManager.getNewNetworkMenu());\n  insertMenu.addSeparator();\n  insertMenu.add(actionManager.getTestInputAction());\n  insertMenu.add(actionManager.getShowWeightMatrixAction());\n  return insertMenu;\n}\n", "\tpublic void doAlign(hmiElement e) {\n\t\t//\t\tSystem.out.println(\"doAlign \" + e);\n\t\tdoAlignX(e);\n\t\tdoAlignY(e);\n\t}\n", "  public OpenCardEvent (Object source, int anId) {\n    super (source);\n\n    id = anId;\n  } // OpenCardEvent\n", "    protected String getExpectedXFSelectString() {\n        return \"<testRoot><div id=\\\"TestID\\\"><input id=\\\"OptionId\\\" \" +\n            \"name=\\\"TestSelect\\\" title=\\\"Prompt1\\\" type=\\\"radio\\\" \" +\n            \"value=\\\"Value1\\\"/><span style='font-weight: bold'>Caption1\" +\n            \"</span><br/><input id=\\\"OptionId\\\" name=\\\"TestSelect\\\" \" +\n            \"title=\\\"Prompt2\\\" type=\\\"radio\\\" value=\\\"Value2\\\"/>Caption2\" +\n            \"</div></testRoot>\";\n    }\n", "  public void setTable(JTable table) {\n    if (this.table != null) {\n      this.table.getSelectionModel().removeListSelectionListener(this);\n      this.table.getModel().removeTableModelListener(this);\n      this.setViewportView(null);\n      if (this.table instanceof CDataTable)\n        ((CDataTable) this.table).removeItemListener(this);\n    }\n    this.table = table;\n    this.lastSelection = 0;\n    if (this.table != null) {\n      this.table.getSelectionModel().addListSelectionListener(this);\n      this.table.getModel().addTableModelListener(this);\n      this.setViewportView(this.table);\n      if (this.table instanceof CDataTable)\n        ((CDataTable) this.table).addItemListener(this);\n      updateContent();\n    }\n  }\n", "public static InetAddress longToIp(long ip){\n  try {\n    return InetAddress.getByAddress(longToNetworkByteOrderArray(ip));\n  }\n catch (  UnknownHostException e) {\n    throw new IllegalArgumentException(\"Invalid IP \" + ip);\n  }\n}", "public void close() throws java.io.IOException {\n    td.delete();\n    td = null;\n    dir = null;\n    mf = null;\n}\n", "public void removeOnScrollListener(OnScrollListener listener){\n  mOnScrollListeners.remove(listener);\n}\n", "private void _serializeComponent(Component c, StringBuilder sb, Set<Object> done) throws ConverterException {\n\n\tComponentSpecificAccess cw = new ComponentSpecificAccess(Component.ACCESS_PRIVATE, c);\n\n\tsb.append(goIn());\n\ttry {\n\t    sb.append(\"evaluateComponent(\").append(QUOTE_CHR).append(c.getAbsName()).append(QUOTE_CHR).append(',').append(QUOTE_CHR).append(ComponentUtil.md5(c)).append(QUOTE_CHR)\n\t\t    .append(\",{\");\n\t}\n\tcatch (Exception e) {\n\t    throw toConverterException(e);\n\t}\n\n\tboolean doIt = false;\n\tObject member;\n\t{\n\n\t    Iterator<Entry<Key, Object>> it = cw.entryIterator();\n\t    deep++;\n\t    Entry<Key, Object> e;\n\t    while (it.hasNext()) {\n\t\te = it.next();\n\t\tmember = e.getValue();\n\t\tif (member instanceof UDF) continue;\n\t\tif (doIt) sb.append(',');\n\t\tdoIt = true;\n\t\tsb.append(QUOTE_CHR);\n\t\tsb.append(escape(e.getKey().getString()));\n\t\tsb.append(QUOTE_CHR);\n\t\tsb.append(':');\n\t\t_serialize(member, sb, done);\n\t    }\n\t    sb.append(\"}\");\n\t    deep--;\n\t}\n\t{\n\t    boolean isPeristent = c.isPersistent();\n\n\t    ComponentScope scope = c.getComponentScope();\n\t    Iterator<Entry<Key, Object>> it = scope.entryIterator();\n\t    sb.append(\",{\");\n\t    deep++;\n\t    doIt = false;\n\t    Property p;\n\t    Boolean remotingFetch;\n\t    Struct props = ignoreRemotingFetch ? null : ComponentUtil.getPropertiesAsStruct(c, false);\n\t    Entry<Key, Object> e;\n\t    Key k;\n\t    while (it.hasNext()) {\n\t\te = it.next();\n\t\tk = e.getKey();\n\t\t// String key=Caster.toString(it.next(),\"\");\n\t\tif (KeyConstants._THIS.equalsIgnoreCase(k)) continue;\n\t\tif (!ignoreRemotingFetch) {\n\t\t    p = (Property) props.get(k, null);\n\t\t    if (p != null) {\n\t\t\tremotingFetch = Caster.toBoolean(p.getDynamicAttributes().get(REMOTING_FETCH, null), null);\n\t\t\tif (remotingFetch == null) {\n\t\t\t    if (isPeristent && ORMUtil.isRelated(p)) continue;\n\t\t\t}\n\t\t\telse if (!remotingFetch.booleanValue()) continue;\n\t\t    }\n\t\t}\n\n\t\tmember = e.getValue();\n\t\tif (member instanceof UDF) continue;\n\t\tif (doIt) sb.append(',');\n\t\tdoIt = true;\n\t\tsb.append(QUOTE_CHR);\n\t\tsb.append(escape(k.getString()));\n\t\tsb.append(QUOTE_CHR);\n\t\tsb.append(':');\n\t\t_serialize(member, sb, done);\n\t    }\n\t    sb.append(\"}\");\n\t    deep--;\n\t}\n\n\tsb.append(\")\");\n\t// sb.append(\"\");\n\t// throw new ConverterException(\"can't serialize a component \"+component.getDisplayName());\n    }", "    public InputStream openRawResource(int id, TypedValue value) throws NotFoundException {\n        getValue(id, value, true);\n\n        try {\n            return mAssets.openNonAsset(value.assetCookie, value.string.toString(),\n                    AssetManager.ACCESS_STREAMING);\n        } catch (Exception e) {\n            NotFoundException rnf = new NotFoundException(\"File \" + value.string.toString() +\n                    \" from drawable resource ID #0x\" + Integer.toHexString(id));\n            rnf.initCause(e);\n            throw rnf;\n        }\n    }\n", "public void launch ( ) throws Exception { if ( ! CheckBcel . check ( ) ) { System . exit ( NUM_ ) ; } int launchProperty = getLaunchProperty ( ) ; if ( GraphicsEnvironment . isHeadless ( ) || launchProperty == TEXTUI ) { FindBugs2 . main ( args ) ; } else if ( launchProperty == SHOW_HELP ) { ShowHelp . main ( args ) ; } else if ( launchProperty == SHOW_VERSION ) { Version . main ( new String [ ] { STR_ } ) ; } else { Class < ? > launchClass = Class . forName ( STR_ ) ; Method mainMethod = launchClass . getMethod ( STR_ , args . getClass ( ) ) ; mainMethod . invoke ( null , ( Object ) args ) ; } }", "public Object newProxyInstance(Class<?> interfaceClass,String implClassName) throws Exception {\n  MyInvocationHandler handler=new MyInvocationHandler(implClassName);\n  return Proxy.newProxyInstance(interfaceClass.getClassLoader(),new Class[]{interfaceClass},handler);\n}\n", "@Nullable public N random(){\n  return node(RAND.nextLong());\n}\n", "   public void printJavaDocComponents(PrintData printData) {\n      jdi.printJavaDocComponents(printData, bundle.getString(\"field.tags\"));\n   }\n", "public Configuration build ( ) { return new Configuration ( this . encoding , this . decorator ) ; }", "protected Supplier<Map<String,String>> buildDruidWebServiceHeaderSupplier(){\n  Supplier<Map<String,String>> supplier=null;\n  String customSupplierClassString=SYSTEM_CONFIG.getStringProperty(DRUID_HEADER_SUPPLIER_CLASS,null);\n  if (customSupplierClassString != null && customSupplierClassString.equals(\"\")) {\n    try {\n      Class<?> c=Class.forName(customSupplierClassString);\n      Constructor<?> constructor=c.getConstructor();\n      supplier=(Supplier<Map<String,String>>)constructor.newInstance();\n    }\n catch (    Exception e) {\n      LOG.error(\"Unable to load the Druid query header supplier, className: {}, exception: {}\",customSupplierClassString,e);\n      throw new IllegalStateException(e);\n    }\n  }\n  return supplier;\n}\n", "public void setBorder(String border)\n    {\n        _tableState.registerAttribute(AbstractHtmlState.ATTR_GENERAL, HtmlConstants.BORDER, border);\n    }", "protected void validate(String operationType) throws Exception\r\n\t{\r\n\t\tsuper.validate(operationType);\r\n\r\n\t\tMPSString file_name_validator = new MPSString();\r\n\t\tfile_name_validator.setConstraintMaxStrLen(MPSConstants.GENERIC_CONSTRAINT, 256);\r\n\t\tfile_name_validator.setConstraintMinStrLen(MPSConstants.GENERIC_CONSTRAINT, 1);\r\n\t\tfile_name_validator.setConstraintIsReq(MPSConstants.MODIFY_CONSTRAINT, true);\r\n\t\tfile_name_validator.validate(operationType, file_name, \"\\\"file_name\\\"\");\r\n\t\t\r\n\t\tMPSInt reset_type_validator = new MPSInt();\r\n\t\treset_type_validator.validate(operationType, reset_type, \"\\\"reset_type\\\"\");\r\n\t\t\r\n\t\tMPSString name_validator = new MPSString();\r\n\t\tname_validator.setConstraintCharSetRegEx(MPSConstants.GENERIC_CONSTRAINT,\"[ a-zA-Z0-9_#.:@=-]+\");\r\n\t\tname_validator.setConstraintMaxStrLen(MPSConstants.GENERIC_CONSTRAINT, 128);\r\n\t\tname_validator.setConstraintMinStrLen(MPSConstants.GENERIC_CONSTRAINT, 1);\r\n\t\tname_validator.validate(operationType, name, \"\\\"name\\\"\");\r\n\t\t\r\n\t\tMPSIPAddress ip_address_validator = new MPSIPAddress();\r\n\t\tip_address_validator.validate(operationType, ip_address, \"\\\"ip_address\\\"\");\r\n\t\t\r\n\t\tMPSString type_validator = new MPSString();\r\n\t\ttype_validator.setConstraintMaxStrLen(MPSConstants.GENERIC_CONSTRAINT, 64);\r\n\t\ttype_validator.setConstraintMinStrLen(MPSConstants.GENERIC_CONSTRAINT, 1);\r\n\t\ttype_validator.validate(operationType, type, \"\\\"type\\\"\");\r\n\t\t\r\n\t\tMPSIPAddress ip_address_list_validator = new MPSIPAddress();\r\n\t\tif(ip_address_list != null)\r\n\t\t{\r\n\t\t\tfor(int i=0; i<ip_address_list.length; i++)\r\n\t\t\t{\r\n\t\t\t\tip_address_list_validator.validate(operationType, ip_address_list[i], \"ip_address_list[\"+i+\"]\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tMPSString act_id_validator = new MPSString();\r\n\t\tact_id_validator.validate(operationType, act_id, \"\\\"act_id\\\"\");\r\n\t\t\r\n\t}", "static String formatPriceString(double amount, @NonNull Currency currency) {\n        double majorUnitAmount = amount / Math.pow(10, currency.getDefaultFractionDigits());\n        NumberFormat currencyFormat = NumberFormat.getCurrencyInstance();\n        try {\n            DecimalFormatSymbols decimalFormatSymbols = ((java.text.DecimalFormat) currencyFormat)\n                    .getDecimalFormatSymbols();\n            decimalFormatSymbols.setCurrencySymbol(currency.getSymbol(Locale.getDefault()));\n            ((java.text.DecimalFormat) currencyFormat)\n                    .setDecimalFormatSymbols(decimalFormatSymbols);\n            return currencyFormat.format(majorUnitAmount);\n        } catch (ClassCastException e) {\n            return currencyFormat.format(majorUnitAmount);\n        }\n    }", "private void initializeRegisterInformation ( final RegisterInformation [ ] passedRegisters ) { for ( int i = NUM_ ; i < passedRegisters . length ; i ++ ) { final RegisterInformation register = passedRegisters [ i ] ; Preconditions . checkNotNull ( registe", "public static boolean sameClass ( Class c , Object o ) { if ( o == null ) return BOOL_ ; return o . getClass ( ) == c ; }", "public PatternTokenizer setIgnorableCharacters(UnicodeSet ignorableCharacters) {\n        this.ignorableCharacters = (UnicodeSet) ignorableCharacters.clone();\n        needingQuoteCharacters = null;\n        return this;\n    }", "protected final int getViewHeight(@NonNull final ListAdapter adapter, final int position) {\n        View view = adapter.getView(position, null, this);\n        LayoutParams layoutParams = (LayoutParams) view.getLayoutParams();\n\n        if (layoutParams == null) {\n            layoutParams = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n            view.setLayoutParams(layoutParams);\n        }\n\n        int widthMeasureSpec = getChildMeasureSpec(\n                MeasureSpec.makeMeasureSpec(getColumnWidthCompatible(), MeasureSpec.EXACTLY), 0,\n                layoutParams.width);\n        int heightMeasureSpec =\n                getChildMeasureSpec(MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED), 0,\n                        layoutParams.height);\n        view.measure(widthMeasureSpec, heightMeasureSpec);\n        return view.getMeasuredHeight();\n    }", "public Locale inferDeviceLocale(Context context) {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n      return context.getResources().getConfiguration().getLocales().get(0);\n    } else {\n      return context.getResources().getConfiguration().locale;\n    }\n  }", "  public boolean isInPenaltyArea(Field field, Team opponentTeam)\n  {   \n    Vector3f position = this.getPosition();\n\n    return (position.x * opponentTeam.getCurrentSide() >\n      field.getLength() / 2 - field.getPenaltyLength() &&\n      Math.abs(position.z) < field.getPenaltyWidth() / 2);\n  }\n", "    public boolean contains(Point pt) {\n        return contains(pt, 0, 0);\n    }\n", "    @Override public void setCustomChoices(Set<CustomChoice> choices) {\n        if ((choices == null) || choices.isEmpty()) {\n            this.customChoices = null;\n        } else {\n            this.customChoices = new HashSet<CustomChoice>(choices);\n        }\n\n        requestChoices();\n    }\n", "void onPreStart(){\n  log.info(\"Remove all dirs under {}\",dbDir);\n  File dir=new File(dbDir);\n  try {\n    for (    File file : dir.listFiles()) {\n      if (!file.isDirectory()) {\n        continue;\n      }\n      FileUtils.deleteDirectory(file);\n      log.info(\"Delete directory({}) successful\",file.getAbsolutePath());\n    }\n  }\n catch (  IOException ex) {\n    log.warn(\"Could not cleanup db directory {}\",dbDir);\n    throw new IllegalStateException(\"Error when cleanup db dir\",ex);\n  }\n}\n", "public Builder withCornerRadius ( float radius ) { this . radius = radius ; return this ; }", "\tpublic void sort(TSSortField sortField, TSSortOrder sortOrder) {\n\t\tsetSortField(sortField);\n\t\tsetSortOrder(sortOrder);\n\t\tthis.sort();\n\t}\n", "    public CellGroup moveNorth() {\n        Cell[][] newCells = new Cell[_maxWidth][_maxHeight];\n        for(int i=0;i<_maxWidth;i++) {\n            for(int j=0;j<_maxHeight;j++) {\n                newCells[i][j] =  _cellMap.getCell(_cells[i][j].getX(), _cells[i][j].getY()+1 );\n            }\n        }\n        return this.createInstance(_cellMap,newCells);\n    }\n", "public final String toSqlOperator(\n    final EFilterOperator pFilterOperator) throws Exception {\n    if (EFilterOperator.LESS_THAN.equals(pFilterOperator)) {\n      return \"<\";\n    }\n    if (EFilterOperator.LESS_THAN_EQUAL.equals(pFilterOperator)) {\n      return \"<=\";\n    }\n    if (EFilterOperator.GREATER_THAN.equals(pFilterOperator)) {\n      return \">\";\n    }\n    if (EFilterOperator.GREATER_THAN_EQUAL.equals(pFilterOperator)) {\n      return \">=\";\n    }\n    throw new Exception(\n      \"Algorithm error! Cant match SQL operator to EFilterOperator: \"\n        + pFilterOperator);\n  }", "public SearchResult current(){\n  return m_reducedResults.isEmpty() ? null : m_reducedResults.get(m_currentSearchIndex);\n}\n", "protected final CnvObjectToColumnsValues\n    lazyGetCnvObjectToColumnsValues(\n      final Class pBeanClass) throws Exception {\n    @SuppressWarnings(\"unchecked\")\n    CnvObjectToColumnsValues<Object> convrt =\n      (CnvObjectToColumnsValues<Object>)\n        this.convertersMap.get(pBeanClass);\n    if (convrt == null) {\n      convrt = new CnvObjectToColumnsValues<Object>();\n      convrt.setLogger(getLogger());\n      convrt.setTablesMap(getTablesMap());\n      convrt.setFieldsConvertersNamesHolder(getFieldsConvertersNamesHolder());\n      convrt.setGettersRapiHolder(getGettersRapiHolder());\n      convrt.setFieldsRapiHolder(getFieldsRapiHolder());\n      convrt.setFieldsConvertersFatory(getFieldsConvertersFatory());\n      convrt.setObjectClass(pBeanClass);\n      //assigning fully initialized object:\n      this.convertersMap.put(pBeanClass, convrt);\n    }\n    return convrt;\n  }", "@Override\n\tpublic String getProperty(final String key) {\n\t\tlock.readLock().lock();\n\t\ttry {\n\t\t\tfinal boolean useLocalPrefixes = !mixDefaultAndLocalPrefixes && hasLocalPrefixConfigurations();\n\t\t\tfinal Object object = get(key, useLocalPrefixes);\n\t\t\tif (object instanceof String) {\n\t\t\t\treturn (String) object;\n\t\t\t} else {\n\t\t\t\tif (object == null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tthrow new IllegalStateException(\"The value of \" + key + \" is of type: \" + object.getClass().getName());\n\t\t\t}\n\t\t} finally {\n\t\t\tlock.readLock().unlock();\n\t\t}\n\t}", "public String writeStringField() {\n    final List<String> strs = Lists.newArrayList();\n    if (sub_expressions != null) {\n      for (ExpressionTree sub : sub_expressions) {\n        strs.add(sub.toString());\n      }\n    }\n\n    if (sub_metric_queries != null) {\n      final String sub_metrics = clean(sub_metric_queries.values());\n      if (sub_metrics != null && sub_metrics.length() > 0) {\n        strs.add(sub_metrics);\n      }\n    }\n\n    final String inner_expression = DOUBLE_COMMA_JOINER.join(strs);\n    return expression.writeStringField(func_params, inner_expression);\n  }", "public PerlTokenData lookupToken ( int steps ) { assert steps != NUM_ ; int rawStep = NUM_ ; int step = steps / Math . abs ( steps ) ; IElementType rawTokenType = null ; while ( steps != NUM_ ) { rawStep += step ; rawTokenType = rawLookup ( rawStep ) ; if ( rawTokenType == null ) { return null ; } if ( ! PerlParserDefinition . WHITE_SPACE_AND_COMMENTS . contains ( rawTokenType ) ) { steps -= step ; } } return new PerlTokenData ( rawTokenType , getOriginalText ( ) . subSequence ( rawTokenTypeStart ( rawStep ) , rawTokenTypeStart ( rawStep + NUM_ ) ) . toString ( ) ) ; }", "public Observable<ImmutabilityPolicyInner> createOrUpdateImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, int immutabilityPeriodSinceCreationInDays, String ifMatch) {\n        return createOrUpdateImmutabilityPolicyWithServiceResponseAsync(resourceGroupName, accountName, containerName, immutabilityPeriodSinceCreationInDays, ifMatch).map(new Func1<ServiceResponseWithHeaders<ImmutabilityPolicyInner, BlobContainersCreateOrUpdateImmutabilityPolicyHeaders>, ImmutabilityPolicyInner>() {\n            @Override\n            public ImmutabilityPolicyInner call(ServiceResponseWithHeaders<ImmutabilityPolicyInner, BlobContainersCreateOrUpdateImmutabilityPolicyHeaders> response) {\n                return response.body();\n            }\n        });\n    }", "@Override public boolean equals(Object other){\n  if (other == this) {\n    return true;\n  }\n  if (other instanceof ZoneOffsetTransition) {\n    ZoneOffsetTransition d=(ZoneOffsetTransition)other;\n    return transition.equals(d.transition) && offsetBefore.eq", "public JClass forName(String name){\n  SoftReference<JClass> jClassRef=_classMap.get(name);\n  JClass jClass=jClassRef != null ? jClassRef.get() : null;\n  if (jClass == null) {\n    jClass=_staticClassMap.get(name);\n    if (jClass == null) {\n      if (name.s", "private static boolean isUnknown(ProtectionDomain domain){\n  if (domain == null || domain.getCodeSource() == null) {\n    return true;\n  }\n  return false;\n}", "public <U>BaseSimpleReactStream<U> from(final IntStream stream){\n  return (BaseSimpleReactStream<U>)from(stream.boxed());\n}\n", "public static < NodeType extends IGraphNode < NodeType > & ISelectableNode > void selectSuccessorsOfSelection ( final ISelectableGraph < NodeType > graph ) { graph . selectNodes ( getSuccessorsOfSelection ( graph ) , BOOL_ ) ; }", "IStateAction < CBendEnterState > createBendEnterAction ( ) ;", "Object invokeMissingMethod ( Object instance , String methodName , Object [ ] arguments ) ;", "protected boolean isNewLineForbidden ( PerlFormattingBlock block ) { PsiElement element = block . getNode ( ) . getPsi ( ) ; PsiFile file = element . getContainingFile ( ) ; assert file instanceof PerlFileImpl ; return ( ( PerlFileImpl ) file ) . isNewLin", "public void postError ( Request < ? > request , VolleyError error ) ;", "public QuarterDateFormat(){\n  this(TimeZone.getDefault());\n}\n", "public Observable<ConnectivityInformationInner> checkConnectivityAsync(String resourceGroupName, String networkWatcherName, ConnectivityParameters parameters) {\n        return checkConnectivityWithServiceResponseAsync(resourceGroupName, networkWatcherName, parameters).map(new Func1<ServiceResponse<ConnectivityInformationInner>, ConnectivityInformationInner>() {\n            @Override\n            public ConnectivityInformationInner call(ServiceResponse<ConnectivityInformationInner> response) {\n                return response.body();\n            }\n        });\n    }", "public static EntryRep [ ] toEntryRep ( Entry [ ] entries , boolean needCodebase ) throws RemoteException { EntryRep [ ] reps = null ; if ( entries != null ) { reps = new EntryRep [ entries . length ] ; for ( int i = entries . length ; -- i >= NUM_ ; ) { if ( entries [ i ] != null ) { reps [ i ] = new EntryRep ( entries [ i ] ) ; if ( ! needCodebase ) reps [ i ] . codebase = null ; } } } return reps ; }", "public static byte[] writeToArray(NSObject root) throws IOException {\n  ByteArrayOutputStream bout=new ByteArrayOutputStream();\n  write(bout,root);\n  return bout.toByteArray();\n}", "boolean next ( ) throws ParserException ;", "public int getMaximum () {\n\tcheckWidget ();\n\treturn max;\n}\n", "\tpublic void addVertex(double x, double y) {\n\t\treserve(top + 2);\n\t\tdataBuffer.put((float) x);\n\t\tdataBuffer.put((float) y);\n\t\tpath = null;\n\t\ttop += 2;\n\t}\n", "private synchronized boolean bootAmx(MBeanServerExecutor pServers, final LogHandler pLoghandler) {\n        ObjectName bootMBean = null;\n        try {\n            bootMBean = new ObjectName(\"amx-support:type=boot-amx\");\n        } catch (MalformedObjectNameException e) {\n            // Cannot happen ....\n        }\n        try {\n            pServers.call(bootMBean, new MBeanServerExecutor.MBeanAction<Void>() {\n                /** {@inheritDoc} */\n                public Void execute(MBeanServerConnection pConn, ObjectName pName, Object ... extraArgs)\n                        throws ReflectionException, InstanceNotFoundException, IOException, MBeanException {\n                    pConn.invoke(pName, \"bootAMX\", null, null);\n                    return null;\n                }\n            });\n            return true;\n        } catch (InstanceNotFoundException e) {\n            pLoghandler.error(\"No bootAmx MBean found: \" + e,e);\n            // Can happen, when a call to bootAmx comes to early before the bean\n            // is registered\n            return false;\n        } catch (IllegalArgumentException e) {\n            pLoghandler.error(\"Exception while booting AMX: \" + e,e);\n            // We dont try it again\n            return true;\n        } catch (Exception e) {\n            pLoghandler.error(\"Exception while executing bootAmx: \" + e, e);\n            // dito\n            return true;\n        }\n    }", "    public void replayStateChanged(ReplayEvent event) {\n        switch (event.getType()) {\n            case STOPPED:\n                storeTestReport();\n\n                break;\n        }\n    }\n", "public void SwitchTo ( int lexState ) { if ( lexState >= NUM_ || lexState < NUM_ ) throw new TokenMgrError ( STR_ + lexState + STR_ , TokenMgrError . INVALID_LEXICAL_STATE ) ; else curLexState = lexState ; }", "  public float getFloat(int Index) {\n    if ((Index < 1) || (Index >= ItemType.length) || (ItemType[Index] != CONSTANT_FLOAT))\n      throw new ClassFormatError(\"Constant pool item does not exist\");\n    return ((Float)ItemValue1[Index]).floatValue();\n  }\n", "private static boolean isPropertyName ( String name ) { return ( ( name . length ( ) > NUM_ ) && Character . isUpperCase ( name . charAt ( NUM_ ) ) ) || ( ( name . length ( ) > NUM_ ) && Character . isUpperCase ( name . charAt ( NUM_ ) ) ) ; }", "public void loadAndShow() {\n\n        CmsRpcAction<CmsRenameInfoBean> infoAction = new CmsRpcAction<CmsRenameInfoBean>() {\n\n            @Override\n            public void execute() {\n\n                start(0, true);\n                CmsCoreProvider.g", "public static <T extends ImageGray<T>>\n\tDetectPolygonBinaryGrayRefine<T> polygon(@Nullable ConfigPolygonDetector config, Class<T> imageType)\n\t{\n\t\tconfig.checkValidity();\n\n\t\tRefinePolygonToContour refineContour = config.refineContour ? new RefinePolygonToContour() : null;\n\n\t\tRefinePolygonToGray<T> refineGray = config.refineGray != null ?\n\t\t\t\trefinePolygon(config.refineGray,imageType) : null;\n\n\t\tDetectPolygonFromContour<T> detector = polygonContour(config.detector,imageType);\n\n\t\treturn new DetectPolygonBinaryGrayRefine<>(detector,refineContour,refineGray,\n\t\t\t\tconfig.minimumRefineEdgeIntensity,\n\t\t\t\tconfig.adjustForThresholdBias);\n\t}", "public ReconciliationContext ( ReconciliationService . ReconAction reconAction , ObjectMapping mapping , Context callingContext , JsonValue reconParams , JsonValue overridingConfig , ReconciliationService service ) throws BadRequestException { this . reco", "public static void loadClass(Context cx, Scriptable thisObj,\n                                 Object[] args, Function funObj)\n        throws IllegalAccessException, InstantiationException\n    {\n        Class<?> clazz = getClass(args);\n        if (!Script.class.isAssignableFrom(clazz)) {\n            throw reportRuntimeError(\"msg.must.implement.Script\");\n        }\n        Script script = (Script) clazz.newInstance();\n        script.exec(cx, thisObj);\n    }", "WebContents takePrerenderedUrl(IBinder session,String url,String referrer){\n  ThreadUtils.assertOnUiThread();\n  if (mPrerender == null || session == null || !session.equals(mPrerender.mSession)) {\n    return null;\n  }\n  WebContents webContents=mPrerender.mWebContents;\n  String prerenderedUrl=mPrerender.mUrl;\n  String prerenderReferrer=mPrerender.mReferrer;\n  if (referrer == null)   referrer=\"\";\n  mPrerender=null;\n  if (TextUtils.equals(prerenderedUrl,url) && TextUtils.equals(prerenderReferrer,referrer)) {\n    return webContents;\n  }\n  mExternalPrerenderHandler.cancelCurrentPrerender();\n  webContents.destroy();\n  return null;\n}\n", "public void open(String stream,String quality){\n  if (stream != null) {\n    String url=\"twitch.tv/\" + stream;\n    if (!Helper.validateChannel(stream)) {\n      url=stream;\n    }\n    Item existingItem=getExisitingItem(url,quality);\n    if (existingItem != null) {\n      existingItem.start();\n      tabs.setSelectedComponent(existingItem);\n    }\n else {\n      Item newItem=new Item(url,quality,stream);\n      tabs.add(StringUtil.shortenTo(stream,-20),newItem);\n      tabs.setSelectedComponent(newItem);\n      tabs.setToolTipTextAt(tabs.getSelectedIndex(),stream);\n      newItem.start();\n      pack();\n    }\n  }\n  loadSettings();\n  if (stream == null || quality == null || openDialog.isSelected()) {\n    setLocationRelativeTo(parent);\n    setVisible(true);\n  }\n}\n", "\tprotected Annotation getAnnotationImpl(Object object){\n\t\tAnnotation annotation = null;\n\t\tfor(AnnotationObjectFinder aof: this.annotationFinderStrategies){\n\t\t\tannotation = aof.findAnnotationAt(object, this.getClassAnnotation());\n\t\t\tif(annotation != null){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn annotation;\n\t}\n", "private void configureRenderer ( XYMultipleSeriesRenderer XYRenderer ) { XYRenderer . setAxesColor ( Color . LTGRAY ) ; XYRenderer . setLabelsColor ( Color . LTGRAY ) ; XYRenderer . setZoomEnabled ( BOOL_ , BOOL_ ) ; XYRenderer . setAxisTitleTextSize ( NU", "private String retrieveString(String resourceKey, boolean checkPrefix) {\n  String sResource = \"\";\n  try {\n    resourceKey = Val.chkStr(resourceKey);\n    if (checkPrefix && (resourceKey.length() > 0)) {\n      if (!resourceKey.startsWith(getResourceKeyPrefix())) {\n        if (!resourceKey.startsWith(\"fgdc.\")) {\n          resourceKey = getResourceKeyPrefix()+resourceKey;\n        }\n      }\n    }\n    ResourceBundle bundle = getBundle();\n    sResource = Val.chkStr(bundle.getString(resourceKey));\n  } catch (MissingResourceException mre) {\n    sResource = \"\";\n  } catch (Exception e) {\n    sResource = \"\";\n  }\n  return sResource;\n}\n", "private void handleInConfirmedState(final SipPacket msg) throws SipPacketParseException {\n        if (msg.isRequest()) {\n            if (msg.isBye()) {\n                if (this.byeRequest == null) {\n                    this.byeRequest = msg.toRequest();\n                }\n                transition(CallState.COMPLETED, msg);\n            } else if (msg.isAck()) {\n                this.handshakeIsComplete = true;\n                transition(CallState.IN_CALL, msg);\n            }\n        } else {\n            final SipResponsePacket response = (SipResponsePacket) msg;\n            if (response.isSuccess()) {\n                // probably re-transmits.\n                // need to check it better\n                this.reTransmisionsDetected = true;\n            } else if (response.isBye()) {\n                // already in completed (or should be)\n            }\n        }\n    }", "@Override public void shutdown(){\n  executor.shutdown();\n}\n", "public void remove ( IObjectInfo < T > oi ) { lock . lock ( ) ; try { remove_impl ( ( ObjectInfo < T > ) oi ) ; } finally { lock . unlock ( ) ; } }", "public static void registerPluginAnalysisEngines(DetectorFactoryCollection detectorFactoryCollection,IAnalysisCache analysisCache) throws IOException {\n  for (Iterator<Plugin> i=detectorFactoryCollection.pluginIterator(); i.hasNext(); ) {\n    Plugin plugin=i.next();\n    Class<? extends IAnalysisEngineRegistrar> engineRegistrarClass=plugin.getEngineRegistrarClass();\n    if (engineRegistrarClass != null) {\n      try {\n        IAnalysisEngineRegistrar engineRegistrar=engineRegistrarClass.newInstance();\n        engineRegistrar.registerAnalysisEngines(analysisCache);\n      }\n catch (      InstantiationException e) {\n        IOException ioe=new IOException(\"Could not create analysis engine registrar for plugin \" + plugin.getPluginId());\n        ioe.initCause(e);\n        throw ioe;\n      }\ncatch (      IllegalAccessException e) {\n        IOException ioe=new IOException(\"Could not create analysis engine registrar for plugin \" + plugin.getPluginId());\n        ioe.initCause(e);\n        throw ioe;\n      }\n    }\n  }\n}\n", "\tpublic S appendChild(int index, Node child){\n\t\tif(this == child){\n\t\t\tthrow new Error(\"Cannot append a node to itself.\");\n\t\t}\n\t\tchild.setParent(this);\n\t\tchildren.add(index, child);\n\t\treturn this;\n\t}\n", "private void checkTimeout() throws ParserException {\n\tif (timeout > 0) {\n\t    if (System.currentTimeMillis() - startTime > timeout * 1000) {\n\t\tthrow new ParserException(\"Timeout after \" + timeout + \" seconds near '\"\n\t\t\t+ getTokenStream().getCodeSample(maxPosition) + \"'!\");\n\t    }\n\t}\n    }", "public VNXeCommandResult deleteConsistencyGroup(String cgId,boolean isForceSnapDeletion,boolean isForceVolumeDeletion){\n  if (isForceVolumeDeletion) {\n    DeleteStorageResourceRequest deleteReq=new DeleteStorageResourceRequest(_khClient);\n    return deleteReq.deleteLunGroup(cgId,isForceSnapDeletion);\n  }\n else {\n    BlockLunRequests lunReq=new BlockLunRequests(_khClient);\n    List<VNXeLun> luns=lunReq.getLunsInLunGroup(cgId);\n    if (luns != null && !luns.isEmpty()) {\n      List<String> lunIds=new ArrayList<String>();\n      for (      VNXeLun lun : luns) {\n        lunIds.add(lun.getId());\n      }\n      removeLunsFromConsistencyGroup(cgId,lunIds);\n    }\n    DeleteStorageResourceRequest deleteReq=new DeleteStorageResourceRequest(_khClient);\n    return deleteReq.deleteLunGroup(cgId,isForceSnapDeletion);\n  }\n}\n", "void disconnect ( String invocationContext , String activityToken ) { service . traceDebug ( TAG , STR_ ) ; disconnected = BOOL_ ; final Bundle resultBundle = new Bundle ( ) ; resultBundle . putString ( MqttServiceConstants . CALLBACK_ACTIVITY_TOKEN , activityToken ) ; resultBundle . putString ( MqttServiceConstants . CALLBACK_INVOCATION_CONTEXT , invocationContext ) ; resultBundle . putString ( MqttServiceConstants . CALLBACK_ACTION , MqttServiceConstants . DISCONNECT_ACTION ) ; if ( ( myClient != null ) && ( myClient . isConnected ( ) ) ) { IMqttActionListener listener = new MqttConnectionListener ( resultBundle ) ; try { myClient . disconnect ( invocationContext , listener ) ; } catch ( Exception e ) { handleException ( resultBundle , e ) ; } } else { resultBundle . putString ( MqttServiceConstants . CALLBACK_ERROR_MESSAGE , NOT_CONNECTED ) ; service . traceError ( MqttServiceConstants . DISCONNECT_ACTION , NOT_CONNECTED ) ; service . callbackToActivity ( clientHandle , Status . ERROR , resultBundle ) ; } if ( connectOptions != null && connectOptions . isCleanSession ( ) ) { service . messageStore . clearArrivedMessages ( clientHandle ) ; } releaseWakeLock ( ) ; }", "@Override\r\n    public Template getWsagObject(String serializedData) throws ParserException{\r\n        Template templateXML = null;\r\n        try{\r\n            logger.info(\"Will parse {}\", serializedData);\r\n            JAXBContext jaxbContext = JAXBContext.newInstance(Template.class);\r\n            Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();\r\n            jaxbUnmarshaller.setEventHandler(new ValidationHandler());            \r\n            templateXML = (Template)jaxbUnmarshaller.unmarshal(new StringReader(serializedData));\r\n            logger.info(\"Template parsed {}\", templateXML);\r\n        }catch(JAXBException e){\r\n            throw new ParserException(e);\r\n        }\r\n        return templateXML;\r\n\r\n    }", "    public GridBagLayout () {\n        comptable = new Hashtable<Component,GridBagConstraints>();\n        defaultConstraints = new GridBagConstraints();\n    }\n", "void init ( ) throws IOException ;", "public UpdateRequest add(final SolrInputDocument doc,Integer commitWithin,Boolean overwrite){\n  Objects.requireNonNull(doc,\"Cannot add a null SolrInputDocument\");\n  if (documents == null) {\n    documents=new LinkedHashMap<>();\n  }\n  Map<String,Object> params=new HashMap<>(2);\n  if (commitWithin != null)   params.put(COMMIT_WITHIN,commitWithin);\n  if (overwrite != null)   params.put(OVERWRITE,overwrite);\n  documents.put(doc,params);\n  return this;\n}\n", "public static boolean equal(byte[] a, byte[] b) {\n       if (a == b)\n          return (true);\n       if ((a == null) || (b == null))\n          return (false);\n       if (a.length != b.length)\n          return (false);\n       for (int i = 0; i < a.length; i++)\n          if (a[i] != b[i])\n             return (false);\n       return (true);\n    }", "    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\n        MethodVisitor mv = super.visitMethod(access, name, desc, signature, exceptions);\n        return new MethodCodeAdapter(mv, m_outer, access, name, desc, m_fields);\n    }\n", "public RESTResponse call() throws IOException {\n  HttpURLConnection urlConnect=null;\n  RESTResponse response=new RESTResponse();\n  List<String> returnList=new ArrayList<>();\n  try {\n    URL serviceURL=new URL(path + paramsToString());\n    urlConnect=(HttpURLConnection)serviceURL.openConnection();\n    if (httpMethod == HTTPMethod.GET) {\n      urlConnect.setRequestMethod(\"GET\");\n    }\n else {\n      urlConnect.setRequestMethod(\"POST\");\n      urlConnect.setDoOutput(true);\n    }\n    urlConnect.setUseCaches(false);\n    if (!headers.isEmpty()) {\n      for (      Map.Entry<String,String> entry : headers.entrySet()) {\n        urlConnect.setRequestProperty(entry.getKey(),entry.getValue());\n      }\n    }\n    if (httpMethod == HTTPMethod.POST) {\n      try (DataOutputStream output=new DataOutputStream(urlConnect.getOutputStream())){\n        output.writeBytes(postData);\n        output.flush();\n      }\n     }\n    response.setResponseCode(urlConnect.getResponseCode());\n    try (BufferedReader reader=new BufferedReader(new InputStreamReader(urlConnect.getInputStream()))){\n      String line;\n      while ((line=reader.readLine()) != null) {\n        returnList.add(line);\n      }\n    }\n   }\n catch (  FileNotFoundException|UnknownHostException|ConnectException ex) {\n    throw ex;\n  }\ncatch (  IOException ex) {\n    if (urlConnect != null) {\n      InputStream is=urlConnect.getErrorStream();\n      try (BufferedReader br=new BufferedReader(new InputStreamReader(is))){\n        String line;\n        while ((line=br.readLine()) != null) {\n          returnList.add(line);\n        }\n      }\n     }\n  }\n  response.setContent(returnList);\n  return response;\n}\n", "public Map<String,MappedClass> remapClass(MappedClass mc,Map<String,MappedClass> mappings,MappingMode mode){\n  if (mc.isLibrary() || remapped.contains(mc.getOriginalName())) {\n    return mappings;\n  }\n  if (mc.hasParent()) {\n    mappings=remapClass(mc.getParent(),mappings,mode);\n  }\n  for (  MappedClass interfaze : mc.getInterfaces()) {\n    mappings=remapClass(interfaze,mappings,mode);\n  }\n  if (mc.isInnerClass()) {\n    mappings=remapClass(mc.getOuterClass(),mappings,mode);\n  }\n  if (!mc.isInnerClass()) {\n    mc.setNewName(mode.getClassName(mc));\n  }\n else {\n    MappedClass outter=mc.getOuterClass();\n    String newName=mode.getClassName(mc);\n    String post=newName.contains(\"/\") ? newName.substring(newName.lastIndexOf(\"/\") + 1,newName.length()) : newName;\n    mc.setNewName(outter.getNewName() + \"$\" + post);\n  }\n  for (  MappedMember mm : mc.getFields()) {\n    mm.setNewName(mode.getFieldName(mm));\n  }\n  for (  MappedMember mm : mc.getMethods()) {\n    if (keepName(mm) || mm.isLibrary()) {\n      continue;\n    }\n    MappedMember override=ParentUtils.findMethodOverride(mm);\n    if (override.equals(mm)) {\n      mm.setNewName(mode.getMethodName(mm));\n    }\n else {\n      mm.setNewName(override.getNewName());\n      if (mm.doesOverride() && !mm.isOverriden()) {\n        fixOverrideNames(mm,override);\n      }\n    }\n    MethodNode mn=mm.getMethodNode();\n    updateStrings(mn,mappings);\n  }\n  remapped.add(mc.getOriginalName());\n  return mappings;\n}\n", "public Tailer ( File file , TailerListener listener , long delayMillis ) { this ( file , listener , delayMillis , BOOL_ ) ; }", "@Override public void tableChanged(TableModelEvent e){\n  m_propSupport.firePropertyChange(null,null,null);\n}\n", "\tpublic String getText(Object object) {\n\t\tString label = ((EncapsulatedClassifier) object).getName();\n\t\treturn label == null || label.length() == 0 ? getString(\"_UI_EncapsulatedClassifier_type\") : //$NON-NLS-1$\n\t\t\t\tgetString(\"_UI_EncapsulatedClassifier_type\") + \" \" + label; //$NON-NLS-1$ //$NON-NLS-2$\n\t}\n", "private static boolean trusted(Set set,TrustVerifier.Context ctx) throws RemoteException {\n  return trusted(set.iterator(),ctx);\n}\n", "public Processor setOutputDir(final File output) {\n        if (!output.isAbsolute()) {\n            throw new IllegalArgumentException(\"Output directory path must be absolute: \" + output);\n        }\n        if (output.exists() && !output.isDirectory()) {\n            throw new IllegalArgumentException(\"Output directory exists and is not a directory: \" + output);\n        }\n        args.put(\"output.dir\", output.getAbsolutePath());\n        return this;\n    }", "Uuid landlordUuid ( ) { return landlordUuid ; }", "private void fillBuf ( ) throws IOException { int result = in . read ( buf , NUM_ , buf . length ) ; if ( result == - NUM_ ) { throw new EOFException ( ) ; } pos = NUM_ ; end = result ; }", "public WarningMessage ( int importance , String message , Object data , CSTNode context , SourceUnit owner ) { super ( message , data , context , owner ) ; this . importance = importance ; }", "    public double computeStartX(double containingBoxWidth, double itemWidth) {\n    \tdouble x;\n        if (this == HorizontalAlignment.LEFT) {\n            x = 0;\n        } else if (this == HorizontalAlignment.CENTER) {\n            x = containingBoxWidth/2 - itemWidth/2;\n        } else if (this == HorizontalAlignment.RIGHT) {\n            x = containingBoxWidth - itemWidth;\n        } else {\n            throw new IllegalStateException(\"Unknown horizontal alignment: \" + this);\n        }\n        return x;\n    }\n", "    public ArrayList getPeerArray() {\n\t    ArrayList res = new ArrayList(getPeerCount());\n\t    ECPAddress peer;\n\t    for (int i = 0; i < getPeerCount(); i++) {\n\t\tpeer = getPeerAt(i);\n\t\tif (!isBlocked(peer)) \n\t\t    res.add(peer);\n\t    }\n\t    return res;\n    }\n", "public static void cherrypick ( int id , String commit , String destination , String message , AsyncCallback < ChangeInfo > cb ) { CherryPickInput cherryPickInput = CherryPickInput . create ( ) ; cherryPickInput . setMessage ( message ) ; cherryPickInput ", "private Component createUserInfoDropDown() {\n\n        PopupView pv = new PopupView(new PopupView.Content() {\n\n            private static final long serialVersionUID = 1L;\n\n            public String getMinimizedValueAsHTML() {\n\n                CmsObject cms = A_CmsUI.getCmsObject();\n                return getDropDownButtonHtml(\n                    new ExternalResource(\n                        OpenCms.getWorkplaceAppManager().getUserIconHelper().getSmallIconPath(\n                            cms,\n                            cms.getRequestContext().getCurrentUser())));\n            }\n\n            public Component getPopupComponent() {\n\n                return new CmsUserInfo(new I_UploadListener() {\n\n                    public void onUploadFinished(List<String> uploadedFiles) {\n\n                        handleUpload(uploadedFiles);\n                    }\n                }, getDialogContext());\n            }\n        });\n        pv.setDescription(CmsVaadinUtils.getMessageText(Messages.GUI_USER_INFO_TITLE_0));\n        pv.addStyleName(OpenCmsTheme.NAVIGATOR_DROPDOWN);\n        pv.setHideOnMouseOut(false);\n        pv.addStyleName(OpenCmsTheme.USER_INFO);\n        return pv;\n    }", "public boolean solvePolynomial( double f1, double f2 , double a , Double b , double c , double d )\n\t{\n\t\tdouble f1_2 = f1*f1;\n\t\tdouble f1_4 = f1_2*f1_2;\n\t\tdouble f2_2 = f2*f2;\n\t\tdouble f2_4 = f2_2*f2_2;\n\t\tdouble a_2 = a*a;\n\t\tdouble b_2 = b*b;\n\t\tdouble c_2 = c*c;\n\t\tdouble d_2 = d*d;\n\t\tdouble b_3 = b_2*b;\n\t\tdouble d_3 = d_2*d;\n\t\tdouble a_4 = a_2*a_2;\n\t\tdouble b_4 = b_2*b_2;\n\t\tdouble c_4 = c_2*c_2;\n\t\tdouble d_4 = d_2*d_2;\n\n\t\tpoly.size = 6;\n\t\tpoly.c[5] = a*b*c_2*f1_4 - a_2*c*d*f1_4;\n\t\tpoly.c[4] = b_2*c_2*f1_4 - a_2*d_2*f1_4 + c_4*f2_4 + 2*a_2*c_2*f2_2 + a_4;\n\t\tpoly.c[3] = 2*(3*c_2*d_2*f2_4 + b_2*c_2*f1_2 - a_2*d_2*f1_2 + b_2*c_2*f2_2 + 4*a*b*c*d*f2_2 + a_2*d_2*f2_2 + 3*a_2*b_2);\n\t\tpoly.c[2] = (4*c*d_3*f2_4 + 2*b_2*c*d*f1_2 - 2*a*b*d_2*f1_2 + 4*b_2*c*d*f2_2 + 4*a*b*d_2*f2_2 + 4*a*b_3 + a*b*c_2 - a_2*c*d);\n\t\tpoly.c[1] = d_4*f2_4 + 2*b_2*d_2*f2_2 + b_4 + b_2*c_2 - a_2*d_2;\n\t\tpoly.c[0] = b_2*c*d - a*b*d_2;\n\n\t\treturn rootFinder.process(poly);\n\t}", "\tpublic ResultSet getRelTagsByName(String name) throws Exception{\n\t\tString query_clause = \"SELECT DISTINCT id, name, group_id FROM \"+DataDefinitions.getRelTagsTableName()\n        \t\t\t\t\t+\" WHERE name = \\\"\"+name+\"\\\"\";\n\t\treturn query(query_clause);\t\t\n\t}\n", "@CheckReturnValue\n    @BackpressureSupport(BackpressureKind.FULL)\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Flowable<T> repeatUntil(BooleanSupplier stop) {\n        ObjectHelper.requireNonNull(stop, \"stop is null\");\n        return RxJavaPlugins.onAssembly(new FlowableRepeatUntil<T>(this, stop));\n    }", "public static void loadModule ( final JTree tree , final INaviModule module ) { Preconditions . checkNotNull ( tree , STR_ ) ; Preconditions . checkNotNull ( module , STR_ ) ; loadModuleThreaded ( SwingUtilities . getWindowAncestor ( tree ) , module , tree ) ; }", "public void moveCartItem(int fromIndex,int toIndex){\n  if (toIndex < fromIndex) {\n    cartLines.add(toIndex,cartLines.remove(fromIndex));\n  }\n else   if (toIndex > fromIndex) {\n    cartLines.add(toIndex - 1,cartLines.remove(fromIndex));\n  }\n}\n", "public boolean process( int sideLength,\n                            double diag[] ,\n                            double off[] ,\n                            double eigenvalues[] ) {\n        if( diag != null )\n            helper.init(diag,off,sideLength);\n        if( Q == null )\n            Q = CommonOps_DDRM.identity(helper.N);\n        helper.setQ(Q);\n\n        this.followingScript = true;\n        this.eigenvalues = eigenvalues;\n        this.fastEigenvalues = false;\n\n        return _process();\n    }", "@Override public void itemStateChanged(ItemEvent ie){\n  CardLayout cl=(CardLayout)(settingsContainer.getLayout());\n  cl.show(settingsContainer,(String)ie.getItem());\n}", "private static void writeParam(Object v, DataOutput writer) throws IOException {\n\t\tif (v instanceof Byte) {\n\t\t\twriter.write(BYTE_ID);\n\t\t\twriter.writeByte(((Byte) v).byteValue());\n\t\t} else if (v instanceof Short) {\n\t\t\twriter.write(SHORT_ID);\n\t\t\twriter.writeShort(((Short) v).shortValue());\n\t\t} else if (v instanceof Integer) {\n\t\t\twriter.write(INTEGER_ID);\n\t\t\twriter.writeInt(((Integer) v).intValue());\n\t\t} else if (v instanceof Character) {\n\t\t\twriter.write(CHAR_ID);\n\t\t\twriter.writeChar(((Character) v).charValue());\n\t\t} else if (v instanceof Long) {\n\t\t\twriter.write(LONG_ID);\n\t\t\twriter.writeLong(((Long) v).longValue());\n\t\t} else if (v instanceof Float) {\n\t\t\twriter.write(FLOAT_ID);\n\t\t\twriter.writeFloat(((Float) v).floatValue());\n\t\t} else if (v instanceof Double) {\n\t\t\twriter.write(DOUBLE_ID);\n\t\t\twriter.writeDouble(((Double) v).doubleValue());\n\t\t} else if (v instanceof Date) {\n\t\t\twriter.write(DATE_ID);\n\t\t\twriter.writeLong(((Date) v).getTime());\n\t\t} else if (v != null) {\n\t\t\twriter.write(STRING_ID);\n\t\t\twriteString(v.toString(), writer);\n\t\t} else {\n\t\t\twriter.write(NULL_ID);\n\t\t}\n\t}", "public DaylightCondition(final DaylightPhase... daylightPhases){\n  super();\n  this.daylightPhases=Arrays.asList(daylightPhases);\n}\n", "public String getKeyAsString(Key key) {\n        Objects.requireNonNull(key, Required.KEY.toString());\n        \n        return encodeBase64(key.getEncoded());\n    }", "\tpublic void substractResources(Resources resource, int quantity) throws NotEnoughResourcesException {\n\t\tInteger totalResources = resources.get(resource);\n\t\tif (totalResources == null || totalResources - quantity < 0) {\n\t\t\tthrow new NotEnoughResourcesException(resource, this);\n\t\t} else {\n\t\t\ttotalResources -= quantity;\n\t\t}\n\t\tresources.put(resource, totalResources);\n\t}\n", "\tprotected Object executeOperation(String operation, String[] obj) {\n\n\t\tString[] vec = new String[objLength + 1];\n\n\t\tfor (int i = 0; i < objLength; i++) {\n\n\t\t\tvec[i] = obj[i];\n\n\t\t}\n\n\t\tvec[objLength] = operation;\n\n\t\treturn client.invokeOperation(vec);\n\n\t}\n", "public void setDocuments(java.util.Collection<DocumentMetadata> documents) {\n        if (documents == null) {\n            this.documents = null;\n            return;\n        }\n\n        this.documents = new java.util.ArrayList<DocumentMetadata>(documents);\n    }", "protected void encryptBlock(byte[] in,int pos,int length){\n  byte[] encryptedIn=new byte[blockSize];\n  byte[] ivBytes=ByteArrayHelper.toByteArray(nonce++,16);\n  ParametersWithIV ivParams=new ParametersWithIV(cipherParameters,ivBytes);\n  aesCipher.init(true,ivParams);\n  int remainingCount=length - pos;\n  if (remainingCount >= blockSize) {\n    aesCipher.processBlock(in,pos,encryptedIn,0);\n    System.arraycopy(encryptedIn,0,in,pos,blockSize);\n    mac.update(encryptedIn,0,blockSize);\n  }\n else {\n    byte[] extendedIn=new byte[blockSize];\n    System.arraycopy(in,pos,extendedIn,0,remainingCount);\n    aesCipher.processBlock(extendedIn,0,encryptedIn,0);\n    System.arraycopy(encryptedIn,0,in,pos,remainingCount);\n    mac.update(encryptedIn,0,remainingCount);\n  }\n}\n", "public <T> Optional<T> PUT(String partialUrl, Object payload, \n        Map<String, Object> headers, List<String> queryParams, GenericType<T> returnType)\n    {\n        URI uri = buildUri(partialUrl);\n        return executePutRequest(uri, payload, headers, queryParams, returnType);\n    }", "public static void debug(Object... x){\n  ConcurrentLinkedQueue<Item> q=que.get();\n  if (q != null)   q.add(new Item(x));\n}\n", "    public Object get(MethodContext methodContext) {\n        if (this.needsExpand) {\n            return methodContext.getEnv(name);\n        } else {\n            return methodContext.getEnv(fma);\n        }\n    }\n", "private void dumpRecentInvalidateSets(PrintWriter out) {\n    int size = recentInvalidateSets.values().size();\n    out.println(\"Metasave: Blocks \" + pendingDeletionBlocksCount\n      + \" waiting deletion from \" + size + \" datanodes.\");\n    if (size == 0) {\n      return;\n    }\n    for (Map.Entry<String, LightWeightHashSet<Block>> entry : recentInvalidateSets\n        .entrySet()) {\n      LightWeightHashSet<Block> blocks = entry.getValue();\n      if (blocks.size() > 0) {\n        out.println(datanodeMap.get(entry.getKey()).getName() + blocks);\n      }\n    }\n  }", "public FileWriterWithEncoding ( String filename , CharsetEncoder encoding , boolean append ) throws IOException { this ( new File ( filename ) , encoding , append ) ; }", "public void toggle ( boolean animate ) { if ( isMenuShowing ( ) ) { showContent ( animate ) ; } else { showMenu ( animate ) ; } }", "\tprotected void addPagesPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Book_pages_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_Book_pages_feature\", \"_UI_Book_type\"),\n\t\t\t\t LibraryPackage.Literals.BOOK__PAGES,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public IMouseState createNodeEditState ( final Node n , final MouseEvent event ) { final CNodeEditState state = new CNodeEditState ( this , m_graph , n ) ; m_factory . createNodeEditAction ( ) . execute ( state , event ) ; return state ; }", "public void silentAdd(ConstraintWidget widget){\n  mSelectedWidgets.add(new Element(widget));\n}\n", "public boolean execute(String fileName) {\n\tif (fileName == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);\n\tint desktop = getDesktop(display);\n\tswitch (desktop) {\n\t\tcase DESKTOP_GNOME_24: return gnome_24_execute(fileName);\n\t\tcase DESKTOP_GNOME: return gnome_execute(fileName);\n\t\tcase DESKTOP_CDE: return cde_execute(fileName);\n\t}\n\treturn false;\n}\n", "@Override\r\n\tpublic final void invoke() {\r\n\t\tif (index < inters.length)\r\n\t\t\tinters[index++].intercept(this);\r\n\t\telse if (index++ == inters.length)\r\n\t\t\tinvocation.invoke();\r\n\t}", "    public int getChannelCount(final int totalChannelCount) {\n        int channelCount = 0;\n        for (int i = 0; i < totalChannelCount; i++) {\n            if (includes(i)) {\n                channelCount++;\n            }\n        }\n        return channelCount;\n    }\n", "@Override\n    public T execute() throws Auth0Exception {\n        okhttp3.Request request = createRequest();\n        try (Response response = client.newCall(request).execute()) {\n            return parseResponse(response);\n        } catch (Auth0Exception e) {\n            throw e;\n        } catch (IOException e) {\n            throw new Auth0Exception(\"Failed to execute request\", e);\n        }\n    }", "\tprotected void addEnabledPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_RPCMonModel_enabled_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_RPCMonModel_enabled_feature\", \"_UI_RPCMonModel_type\"),\n\t\t\t\t ModelPackage.Literals.RPC_MON_MODEL__ENABLED,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "    public char charValue() {\n        return value;\n    }\n", "    private Component createSeparator(String text) {\n        return DefaultComponentFactory.getInstance().createSeparator(text);\n    }\n", "@Override\r\n\tpublic void delete(SearchKey key, RecordId dataRecordId, boolean doLogicalLogging) {\r\n\t\tif (tx.isReadOnly())\r\n\t\t\tthrow new UnsupportedOperationException();\r\n\r\n\t\tsearch(new SearchRange(key), SearchPurpose.DELETE);\r\n\t\t\r\n\t\t// log the logical operation starts\r\n\t\tif (doLogicalLogging)\r\n\t\t\ttx.recoveryMgr().logLogicalStart();\r\n\t\t\r\n\t\tleaf.delete(dataRecordId);\r\n\t\t\r\n\t\t// log the logical operation ends\r\n\t\tif (doLogicalLogging)\r\n\t\t\ttx.recoveryMgr().logIndexDeletionEnd(ii.indexName(), key,\r\n\t\t\t\t\tdataRecordId.block().number(), dataRecordId.id());\r\n\t}", "private void sendTapEvent ( BitSet bitset , Shift shift , boolean decision ) { if ( mSymbolEventTap != null ) { SymbolEvent event = new SymbolEvent ( bitset . get ( NUM_ , mSymbolLength ) , mSymbolLength , decision , shift ) ; mSymbolEventTap . receive ( ", "public int hashCode(){\n  long v=doubleToLongBits(value);\n  return (int)(v ^ (v >>> 32));\n}\n", "public List<operators> loadAllDeepFromCursor(Cursor cursor){\n  int count=cursor.getCount();\n  List<operators> list=new ArrayList<operators>(count);\n  if (cursor.moveToFirst()) {\n    if (identityScope != null) {\n      identityScope.lock();\n      identityScope.reserveRoom(count);\n    }\n    try {\n      do {\n        list.add(loadCurrentDeep(cursor,false));\n      }\n while (cursor.moveToNext());\n    }\n  finally {\n      if (identityScope != null) {\n        identityScope.unlock();\n      }\n    }\n  }\n  return list;\n}\n", "void eidtTodo ( YokeRequest request ) { request . exceptionHandler ( null ) ; client . findOne ( id ( request ) , null ) ; }", "protected void registerPropertyChangeListener(List objects, boolean register) throws ClassCastException {\n\tIterator iterator = objects.iterator();\n\twhile (iterator.hasNext()) {\n\t\tif (register) {\n\t\t\t((DbChangeableBean)iterator.next()).addPropertyChangeListener((java.beans.PropertyChangeListener)this);\n\t\t} else {\n\t\t\t((DbChangeableBean)iterator.next()).removePropertyChangeListener((java.beans.PropertyChangeListener)this);\n\t\t}\n\t}\n}\n", "private void checkIfNext ( ) { for ( ; _pos != null ; _pos = _entries . next ( _pos ) ) { IEntryCacheInfo pEntry = _pos . getSubject ( ) ; if ( pEntry == null ) continue ; _currentEntry = pEntry ; _pos = _entries . next ( _pos ) ; return ; } _currentEntry", "public void testGetFamily ( ) { char expectedReturn = NUM_ ; this . requestedAddressFamilyAttribute . setFamily ( MsgFixture . REQUESTED_ADDRESS_FAMILY_ATTRIBUTE_V4 ) ; char actualReturn = this . requestedAddressFamilyAttribute . getFamily ( ) ; assertEqu", "public boolean empty ( ) ;", "public PointerTypePanel ( final Component parent , final TypeManager typeManager ) { this ( parent , typeManager , null ) ; }", "public ClearModifiers ( ClearModifiers modifiers1 , ClearModifiers modifiers2 , ClearModifiers modifiers3 ) { super ( modifiers1 , modifiers2 , modifiers3 ) ; }", "public Integer delete(CMAAsset asset) {\n    final String assetId = getResourceIdOrThrow(asset, \"asset\");\n    final String spaceId = getSpaceIdOrThrow(asset, \"asset\");\n    final String environmentId = asset.getEnvironmentId();\n\n    return service.delete(spaceId, environmentId, assetId).blockingFirst().code();\n  }", "  public String getServerTraceUrl() {\n    assert hasServerTraceUrl() : \"hasServerTraceUrl is false for this resource\";\n    return new Url(getUrl()).getOrigin()\n        + responseHeaders.get(SERVER_TRACE_HEADER_NAME);\n  }\n", "private Object writeReplace ( ) throws ObjectStreamException { Object impl_proxy = impl ; if ( impl instanceof ProxyAccessor ) { impl_proxy = ( ( ProxyAccessor ) impl ) . getProxy ( ) ; logger . log ( Level . FINEST , STR_ , impl_proxy ) ; if ( impl_proxy == null ) { throw new InvalidObjectException ( STR_ ) ; } } return impl_proxy ; }", "public Interaction reCoordinate ( int x , int y ) { return new Interaction ( x , y , this . sender , this . blockLocation , frameLocation , rightHanded ) ; }", "  public Data set(Data other) {\n    copy(other, this);\n    return this;\n  }\n", "public ByteFifoBuffer ( int len ) { array = new byte [ len ] ; }", "public void fillDefaultValues(){\n  tfLearningRate.setText(Double.toString(SubtractiveNormalizationRule.DEFAULT_LEARNING_RATE));\n}\n", "@SuppressWarnings(\"unchecked\") public static List<String> parseGetBucketReplicationLocation(InputStream responseBody) throws ResponseParseException {\n  try {\n    Element root=getXmlRootElement(responseBody);\n    List<String> locationList=new ArrayList<String>();\n    List<Element> locElements=root.getChildren(\"Location\");\n    for (    Element locElem : locElements) {\n      locationList.add(locElem.getText());\n    }\n    return locationList;\n  }\n catch (  Exception e) {\n    throw new ResponseParseException(e.getMessage(),e);\n  }\n}\n", "private String replaceUsernameToken(Matcher matcher,String string){\n  return matcher != null ? matcher.replaceAll(username) : string;\n}\n", "public TabItem getItem (Point point) {\n\tcheckWidget ();\n\tif (point == null) error (SWT.ERROR_NULL_ARGUMENT);\n\tTCHITTESTINFO pinfo = new TCHITTESTINFO ();\n\tpinfo.x = point.x;\n\tpinfo.y = point.y;\n\tint index = (int)/*64*/OS.SendMessage (handle, OS.TCM_HITTEST, 0, pinfo);\n\tif (index == -1) return null;\n\treturn items [index];\n}\n", "public static String asciis2String ( String ASCIIs ) { String [ ] ASCIIss = ASCIIs . split ( STR_ ) ; StringBuffer sb = new StringBuffer ( ) ; for ( int i = NUM_ ; i < ASCIIss . length ; i ++ ) { sb . append ( ( char ) __ascii2Char ( Integer . parseInt ( ASCIIss [ i ] ) ) ) ; } return sb . toString ( ) ; }", "    public void add(ResourceSelector s) {\n        if (sel != null) {\n            throw new IllegalStateException(\n                \"The Not ResourceSelector accepts a single nested ResourceSelector\");\n        }\n        sel = s;\n    }\n", "\tprotected void continueGameAfterBidNotHold(Watten watten, Team team) {\n\t\twatten.setProceedActionForAllPlayers(NullProceedAction.instance());\n\t\twatten.setBlocked(false);\n\t\t\n\t\t// complete game\n\t\twatten.getSession().wonBy(team);\n\t\tfinishSession(watten);\n\t}\n", "private int findClosestChunk ( int chunkSize ) { int x = NUM_ ; for ( ; x <= chunkSize ; x = x * NUM_ ) ; return x ; }", "    public void attributeReplaced(ServletContextAttributeEvent event) {\n\n        String name = event.getName();\n        log.info(\"attributeReplaced(\" + name + \")\");\n        if (Globals.ACTION_SERVLET_KEY.equals(name)) {\n            servlet = (ActionServlet) event.getValue();\n        }\n\n    }\n", "public static List < SearchResult > search ( final NaviEdge edge , final String searchString , final boolean regEx , final boolean caseSensitive ) { if ( edge . getRealizerLabelCount ( ) != NUM_ ) { return new ArrayList < SearchResult > ( ) ; } return CElementSearcher . search ( edge , edge . getLabelContent ( ) , searchString , regEx , caseSensitive ) ; }", "\tprotected void stopReceiving() {\n\t\tif (transmit != null) {\n\t\t\tlog.info(\"Media Receiver stopped!!!\");\n\t\t\treceiver.stop();\n\t\t}\n\t}\n", "\tpublic Decision makePreDecision(FilterProcessResult filterProcessResult, int maxResults) {\n\t\tDecision preDecision = makeDecision(filterProcessResult);\n\t\tif (preDecision.isSpam()) {\n\t\t\treturn preDecision; // once decided on spam, it will never change to ham\n\t\t}\n\t\t\n\t\t// TODO: We could decide on ham if current spam results + 'open' results < min_spam \n\n\t\treturn null; // decision is still ham, so we have to wait for remaining results\n\t}\n", "\tpublic void validate(String name) {\n\t\tif (name.length() == 0) {\n\t\t\tsetErrorMessage(EMPTY_NAME);\n\t\t\treturn;\n\t\t}\n\t\tif (!Path.EMPTY.isValidSegment(name)) {\n\t\t\tsetErrorMessage(INVALID_NAME);\n\t\t\treturn;\n\t\t}\n\n\t\tfinal IProject project = ROOT.getProject(name);\n\t\tif (!project.exists()) {\n\t\t\tsetErrorMessage(INEXISTENT);\n\t\t\treturn;\n\t\t}\n\t\tif (!project.isOpen()) {\n\t\t\tsetErrorMessage(CLOSED);\n\t\t\treturn;\n\t\t}\n\n\t\tfinal IRodinProject rodinProject = RodinCore.valueOf(project);\n\t\tif (!rodinProject.exists()) {\n\t\t\tsetErrorMessage(NOT_RODIN);\n\t\t\treturn;\n\t\t}\n\t\tif (rodinProject.isReadOnly()) {\n\t\t\tsetErrorMessage(READ_ONLY);\n\t\t\treturn;\n\t\t}\n\t\tevbProject = (IEventBProject) rodinProject\n\t\t\t\t.getAdapter(IEventBProject.class);\n\t\terrorMessage = null;\n\t}\n", "\tprivate void onItemAdded(TreeModelEvent event) {\n\t\tfor(TreeModelListener tml : tmListener)\n\t\t\ttml.treeNodesInserted(event);\n\t}\n", "\tpublic boolean isShowTitle() {\n\t\treturn showTitle;\n\t}\n", "    static public BufferedImage bytesToImage(byte[] imageData) throws IOException {\n        return ImageIO.read(new ByteArrayInputStream(imageData));\n    }\n", "public static boolean isUnitInterval(String value){\n  if (!isNumeric(value)) {\n    return false;\n  }\n  Double dbl=Double.parseDouble(value);\n  return dbl >= 0d && dbl <= 1d;\n}\n", "protected boolean isAnnotationCompatible ( ) { return CompilerConfiguration . isPostJDK5 ( this . source . getConfiguration ( ) . getTargetBytecode ( ) ) ; }", "@Override\n  public void reset() throws SQLException {\n    cmdPrologue();\n    try {\n\n      writer.startPacket(0);\n      writer.write(COM_RESET_CONNECTION);\n      writer.flush();\n      getResult(new Results());\n\n      //clear prepare statement cache\n      if (options.cachePrepStmts && options.useServerPrepStmts) {\n        serverPrepareStatementCache.clear();\n      }\n\n    } catch (SQLException sqlException) {\n      throw logQuery\n          .exceptionWithQuery(\"COM_RESET_CONNECTION failed.\", sqlException, explicitClosed);\n    } catch (IOException e) {\n      throw handleIoException(e);\n    }\n\n  }", "\tpublic Object set(int index, Object o) {\n\t\tif (!(o instanceof CapituloDeLivroPublicado)) {\n\t\t\tthrow new ClassCastException(\"Cannot insert a \"+o.getClass()+\" to a \"+this.getClass()+\".\");\n\t\t}\n\t\treturn this.impl.set(index,(CapituloDeLivroPublicado) o);\n\t}\n", "    public CharSet remove(char c) {\n        if (set.contains(c))\n            set.remove(c);\n        return this;\n    }\n", "public static void printArrayOfBigInts ( InputStream in ) throws IOException { BigInt [ ] A = ByteUtils . readSizeArrayOfSizeBigInts ( in ) ; for ( int i = NUM_ ; i < A . length ; i ++ ) { ToolIO . out . println ( A [ i ] ) ; } }", "public boolean removeName(String name){\n  return m_names.remove(name);\n}\n", "void onEvent ( Event event ) ;", "public static String readResourceToStringChecked(Class<?> clazz, String fn) throws IOException {\n\t\ttry (InputStream stream = getResourceAsStream(clazz, fn)) {\n\t\t\treturn IOUtils.toString(asReaderUTF8Lenient(stream));\n\t\t}\n\t}", "public void genStat(JCTree tree, Env<GenContext> env, int crtFlags) {\n        if (!genCrt) {\n            genStat(tree, env);\n            return;\n        }\n        int startpc = code.curCP();\n        genStat(tree, env);\n        if (tree.hasTag(Tag.BLOCK)) ", "public long createTriggerInternet ( IEspDevice device , EspDeviceTrigger trigger ) ;", "public InstrumentedFacesContext pushViewIntoRequestMap ( ) { getExternalContext ( ) . getRequestMap ( ) . put ( STR_ , super . getViewRoot ( ) . getViewId ( ) ) ; return this ; }", "public void putBitmap ( String cacheKey , Bitmap bitmap ) ;", "private void restoreMissingKeygens ( ) { boolean foundMissingKeygen = BOOL_ ; for ( Keygen keygen : wifiNetwork . getKeygens ( ) ) { if ( keygen == null ) { foundMissingKeygen = BOOL_ ; break ; } } if ( foundMissingKeygen ) { wifiNetwork . setKeygens ( nu", "private AnimationUtil ( ) { throw new Error ( STR_ ) ; }", "    public Process exec(String cmdarray[]) throws IOException {\n\treturn exec(cmdarray, null);\n    }\n", "public long extractAlarm(long now,boolean isTest){\n  long lastTime=_now.getAndSet(now);\n  long nextTime=_nextAlarmTime.get();\n  if (now < nextTime) {\n    return nextTime;\n  }\n  _nextAlarmTime.set(now + CLOCK_NEXT);\n  int delta;\n  delta=(int)(now - lastTime) / CLOCK_INTERVAL;\n  delta=Math.min(delta,CLOCK_PERIOD);\n  Alarm alarm;\n  int bucket=getBucket(lastTime);\n  for (int i=0; i <= delta; i++) {\n    while ((alarm=extractNextAlarm(bucket,now,isTest)) != null) {\n      dispatch(alarm,now,isTest);\n    }\n    bucket=(bucket + 1) % CLOCK_PERIOD;\n  }\n  while ((alarm=extractNextCurrentAlarm()) != null) {\n    dispatch(alarm,now,isTest);\n  }\n  long next=updateNextAlarmTime(now);\n  _lastTime=now;\n  return next;\n}\n", "\tpublic void setErrorDescriptor(ErrorDescriptor errorDescriptor) throws IllegalArgumentException, IllegalStateException {\n\t\tif (errorDescriptor == null) {\n\t\t\tthrow new IllegalArgumentException(\"ErrorDescriptor must not be null.\");\n\t\t}\n\n\t\tif (this.terminationList != null) {\n\t\t\tthrow new IllegalStateException(\"ErrorDescriptor must not be set when Termination[] is present\");\n\t\t}\n\n\t\tthis.errorDescriptor = errorDescriptor;\n\t}\n", "public static HELM2Notation readRNA(String notation)\r\n\t\t\tthrows FastaFormatException, NotationException, ChemistryException, NucleotideLoadingException {\r\n\t\tHELM2Notation helm2notation = new HELM2Notation();\r\n\t\tPolymerNotation polymer = new PolymerNotation(\"RNA1\");\r\n\t\tif (!(FastaFormat.isNormalDirection(notation))) {\r\n\t\t\tString annotation = \"3'-5'\";\r\n\t\t\thelm2notation.addPolymer(new PolymerNotation(polymer.getPolymerID(),\r\n\t\t\t\t\tFastaFormat.generateElementsforRNA(notation, polymer.getPolymerID()), annotation));\r\n\t\t} else {\r\n\t\t\thelm2notation.addPolymer(new PolymerNotation(polymer.getPolymerID(),\r\n\t\t\t\t\tFastaFormat.generateElementsforRNA(notation, polymer.getPolymerID())));\r\n\t\t}\r\n\r\n\t\treturn helm2notation;\r\n\t}", "\t\tpublic Options packageUrl(String packageUrl) throws MalformedURLException {\n\t\t\tthis.packageUrl = new URL(packageUrl);\n\t\t\treturn this;\n\t\t}\n", "private void createAndShowGUI(){\n  frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\n  frame.setVisible(true);\n}\n", "public SearchFieldPainter ( Which state ) { super ( ) ; this . state = state ; this . ctx = new PaintContext ( AbstractRegionPainter . PaintContext . CacheMode . FIXED_SIZES ) ; type = ( state == Which . BACKGROUND_DISABLED || state == Which . BORDER_DISABLED ) ? CommonControlState . DISABLED : CommonControlState . ENABLED ; focused = ( state == Which . BORDER_FOCUSED ) ; }", "\tpublic void clear() {\n\t\tDataSet.clear();\n\t}\n", "void cancelPressed(ActionEvent e){\n  Logix logix=checkNamesOK();\n  if (logix != null) {\n    logix.activateLogix();\n  }\n  clearPage();\n}\n", "\tprivate String generateComponentID() {\n\t\treturn \"C\" + (++componentCtr);\n\t}\n", "public synchronized void refreshIndexes() {\n\t\t/*\n\t\t * cache index by Bin name\n\t\t */\n\t\tif (this.indexCache == null)\n\t\t\tthis.indexCache = new TreeMap<String, Index>();\n\n\t\tNode[] nodes = client.getNodes();\n\t\tfor (Node node : nodes) {\n\t\t\tif (node.isActive()) ", "public ThreadPool getThreadPool(String threadPoolName, int minSize, int maxSize)\n   {\n      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(this, tc, \"getThreadPool\",\n                                           new Object[]{threadPoolName, minSize, maxSize});\n\n      ThreadPool threadPool = null;\n\n      if (RuntimeInfo.isThinClient())\n      {\n         try\n         {\n            Class clazz = Class.forName(JFapChannelConstants.THIN_CLIENT_THREADPOOL_CLASS);\n            threadPool = (ThreadPool) clazz.newInstance();\n         }\n         catch (Exception e)\n         {\n            FFDCFilter.processException(e, CLASS_NAME + \".getInstance\",\n                                        JFapChannelConstants.FRAMEWORK_GETTHREADPOOL_01,\n                                        JFapChannelConstants.THIN_CLIENT_THREADPOOL_CLASS);\n\n            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(tc, \"Unable to instantiate thin client thread pool\", e);\n\n            // Nothin we can do throw this on...\n            throw new SIErrorException(e);\n         }\n      }\n      else\n      {\n         try\n         {\n            Class clazz = Class.forName(JFapChannelConstants.RICH_CLIENT_THREADPOOL_CLASS);\n            threadPool = (ThreadPool) clazz.newInstance();\n         }\n         catch (Exception e)\n         {\n            FFDCFilter.processException(e, CLASS_NAME + \".getInstance\",\n                                        JFapChannelConstants.FRAMEWORK_GETTHREADPOOL_02,\n                                        JFapChannelConstants.RICH_CLIENT_THREADPOOL_CLASS);\n\n            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(tc, \"Unable to instantiate rich client thread pool\", e);\n\n            // Nothin we can do throw this on...\n            throw new SIErrorException(e);\n         }\n      }\n\n      threadPool.initialise(threadPoolName, minSize, maxSize);\n\n      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc, \"getThreadPool\", threadPool);\n      return threadPool;\n   }", "private String getDisabledHelpKey(I_CmsWidgetParameter param) {\n\n        StringBuffer result = new StringBuffer(64);\n        result.append(LABEL_PREFIX);\n        result.append(param.getKey());\n        result.append(HELP_POSTFIX);\n        result.append(DISABLED_POSTFIX);\n        return result.toString();\n    }", "public static void sort(double[] array){\n  DualPivotQuicksort.sort(array);\n}\n", "public static final void drawArc(GL2 gl,double cx,double cy,double r,double sa,double aa){\n  double t;\n  double x=r;\n  double y=0;\n  t=x;\n  x=Math.cos(sa) * x - Math.sin(sa) * y;\n  y=Math.sin(sa) * t + Math.cos(sa) * y;\n  double sign=Math.signum(aa);\n  double cos=COS;\n  double sin=sign >= 0 ? SIN : -SIN;\n  gl.glBegin(GL.GL_LINE_STRIP);\n  for (int i=0; i < N; i++) {\n    gl.glVertex2d(x + cx,y + cy);\n    t=x;\n    x=cos * x - sin * y;\n    y=sin * t + cos * y;\n    if (Math.abs(cos * i) >= Math.abs(aa))     break;\n  }\n  gl.glEnd();\n}\n", "public static <T>LinkedHashSet<T> asOrderedSet(T... values){\n  if (values == null) {\n    return new LinkedHashSet<T>(0);\n  }\n else {\n    return new LinkedHashSet<T>(Arrays.asList(values));\n  }\n}\n", "public Set<String> getReturnFields() {\n\n        if (m_fieldAdded) {\n            for (CmsSearchField field : getLuceneFields()) {\n                if (field.isStored() && !LAZY_FIELDS.contains(field.getName())) {\n                    m_returnFields.add(field.getName());\n                }\n            }\n        }\n        m_fieldAdded = false;\n        return m_returnFields;\n    }", "public static void writeFileList ( XMLOutput xmlOutput , String tagName , Iterable < File > listValues ) throws IOException { if ( listValues != null ) { writeFileList ( xmlOutput , tagName , listValues . iterator ( ) ) ; } }", "public void drawShape(int x,int y,int w,int h,Map<String,Object> style){\n  Color penColor=mxUtils.getColor(style,mxConstants.STYLE_STROKECOLOR);\n  float penWidth=mxUtils.getFloat(style,mxConstants.STYLE_STROKEWIDTH,1);\n  int pw=(int)Math.ceil(penWidth * scale);\n  if (g.hitClip(x - pw,y - pw,w + 2 * pw,h + 2 * pw)) {\n    boolean shadow=mxUtils.isTrue(style,mxConstants.STYLE_SHADOW,false);\n    Color fillColor=mxUtils.getStyleFillColor(style);\n    Paint fillPaint=getFillPaint(new Rectangle(x,y,w,h),fillColor,style);\n    if (penWidth > 0) {\n      setStroke(penWidth,style);\n    }\n    String shape=mxUtils.getString(style,mxConstants.STYLE_SHAPE,\"\");\n    if (shape.equals(mxConstants.SHAPE_IMAGE)) {\n      String img=getImageForStyle(style);\n      if (img != null) {\n        drawImage(x,y,w,h,img);\n      }\n    }\n else     if (shape.equals(mxConstants.SHAPE_LINE)) {\n      if (penColor != null) {\n        g.setColor(penColor);\n        String direction=mxUtils.getString(style,mxConstants.STYLE_DIRECTION,mxConstants.DIRECTION_EAST);\n        if (direction.equals(mxConstants.DIRECTION_EAST) || direction.equals(mxConstants.DIRECTION_WEST)) {\n          int mid=(int)(y + h / 2);\n          drawLine(x,mid,x + w,mid);\n        }\n else {\n          int mid=(int)(x + w / 2);\n          drawLine(mid,y,mid,y + h);\n        }\n      }\n    }\n else     if (shape.equals(mxConstants.SHAPE_ELLIPSE)) {\n      drawOval(x,y,w,h,fillColor,fillPaint,penColor,shadow);\n    }\n else     if (shape.equals(mxConstants.SHAPE_DOUBLE_ELLIPSE)) {\n      drawOval(x,y,w,h,fillColor,fillPaint,penColor,shadow);\n      int inset=(int)((3 + penWidth) * scale);\n      x+=inset;\n      y+=inset;\n      w-=2 * inset;\n      h-=2 * inset;\n      drawOval(x,y,w,h,null,null,penColor,false);\n    }\n else     if (shape.equals(mxConstants.SHAPE_RHOMBUS)) {\n      drawRhombus(x,y,w,h,fillColor,fillPaint,penColor,shadow);\n    }\n else     if (shape.equals(mxConstants.SHAPE_CYLINDER)) {\n      drawCylinder(x,y,w,h,fillColor,fillPaint,penColor,shadow);\n    }\n else     if (shape.equals(mxConstants.SHAPE_ACTOR)) {\n      drawActor(x,y,w,h,fillColor,fillPaint,penColor,shadow);\n    }\n else     if (shape.equals(mxConstants.SHAPE_CLOUD)) {\n      drawCloud(x,y,w,h,fillColor,fillPaint,penColor,shadow);\n    }\n else     if (shape.equals(mxConstants.SHAPE_TRIANGLE)) {\n      String direction=mxUtils.getString(style,mxConstants.STYLE_DIRECTION,\"\");\n      drawTriangle(x,y,w,h,fillColor,fillPaint,penColor,shadow,direction);\n    }\n else     if (shape.equals(mxConstants.SHAPE_HEXAGON)) {\n      String direction=mxUtils.getString(style,mxConstants.STYLE_DIRECTION,\"\");\n      drawHexagon(x,y,w,h,fillColor,fillPaint,penColor,shadow,direction);\n    }\n else {\n      drawRect(x,y,w,h,fillColor,fillPaint,penColor,shadow,mxUtils.isTrue(style,mxConstants.STYLE_ROUNDED));\n      if (shape.equals(mxConstants.SHAPE_LABEL)) {\n        String img=getImageForStyle(style);\n        if (img != null) {\n          String imgAlign=mxUtils.getString(style,mxConstants.STYLE_IMAGE_ALIGN,mxConstants.ALIGN_CENTER);\n          String imgValign=mxUtils.getString(style,mxConstants.STYLE_IMAGE_VERTICAL_ALIGN,mxConstants.ALIGN_MIDDLE);\n          int imgWidth=(int)(mxUtils.getInt(style,mxConstants.STYLE_IMAGE_WIDTH,mxConstants.DEFAULT_IMAGESIZE) * scale);\n          int imgHeight=(int)(mxUtils.getInt(style,mxConstants.STYLE_IMAGE_HEIGHT,mxConstants.DEFAULT_IMAGESIZE) * scale);\n          int spacing=(int)(mxUtils.getInt(style,mxConstants.STYLE_SPACING,2) * scale);\n          int imgX=x;\n          if (imgAlign.equals(mxConstants.ALIGN_LEFT)) {\n            imgX+=spacing;\n          }\n else           if (imgAlign.equals(mxConstants.ALIGN_RIGHT)) {\n            imgX+=w - imgWidth - spacing;\n          }\n else {\n            imgX+=(w - imgWidth) / 2;\n          }\n          int imgY=y;\n          if (imgValign.equals(mxConstants.ALIGN_TOP)) {\n            imgY+=spacing;\n          }\n else           if (imgValign.equals(mxConstants.ALIGN_BOTTOM)) {\n            imgY+=h - imgHeight - spacing;\n          }\n else {\n            imgY+=(h - imgHeight) / 2;\n          }\n          drawImage(imgX,imgY,imgWidth,imgHeight,img);\n        }\n      }\n    }\n  }\n}\n", "public void flush(){\n  if (batch.size() > 0) {\n    submitBatch(batch);\n    batch.clear();\n  }\n}\n", "\tpublic Element computeHighlightRangeIDLElement() {\n\t\tISourceViewer sourceViewer = getSourceViewer();\n\t\tif (sourceViewer == null) {\n\t\t\treturn null;\n\t\t}\n\t\tStyledText styledText = sourceViewer.getTextWidget();\n\t\tif ((styledText == null) || styledText.isDisposed()) {\n\t\t\treturn null;\n\t\t}\n\t\tint offset = sourceViewer.getVisibleRegion().getOffset();\n\t\tint caret = offset + styledText.getCaretOffset();\n\n\t\treturn getIDLElementAt(caret);\n\t}\n", "public XorSpacePredicate ( ISpacePredicate leftPredicate , ISpacePredicate rightPredicate ) { super ( leftPredicate , rightPredicate ) ; }", "private void parseTrailerHeaders() throws IOException {\n        try {\n            this.footers = AbstractMessageParser.parseHeaders(in,\n                    constraints.getMaxHeaderCount(),\n                    constraints.getMaxLineLength(),\n                    null);\n        } catch (final HttpException ex) {\n            final IOException ioe = new MalformedChunkCodingException(\"Invalid footer: \"\n                    + ex.getMessage());\n            ioe.initCause(ex);\n            throw ioe;\n        }\n    }", "@Override\n    public CancelJobResult cancelJob(CancelJobRequest request) {\n        request = beforeClientExecution(request);\n        return executeCancelJob(request);\n    }", "public TeXParser(boolean isPartial,String parseString,TeXFormula formula,boolean firstpass){\n  this.formula=formula;\n  this.isPartial=isPartial;\n  if (parseString != null) {\n    this.parseString=new StringBuffer(parseString);\n    this.len=parseString.length();\n    this.pos=0;\n    if (firstpass) {\n      firstpass();\n    }\n  }\n else {\n    this.parseString=null;\n    this.pos=0;\n    this.len=0;\n  }\n}\n", "public static List<WebElement> findElementsPresentAfter(SearchContext parent,By by,int waitInSeconds){\n  Preconditions.checkNotNull(parent);\n  Preconditions.checkNotNull(by);\n  findElementPresentAfter(parent,by,waitInSeconds);\n  return parent.findElements(by);\n}\n", "public CategoryGraph ( Wikipedia pWiki , Iterable < Category > categories ) throws WikiApiException { Set < Integer > pageIDs = new HashSet < Integer > ( ) ; while ( categories . iterator ( ) . hasNext ( ) ) { pageIDs . add ( categories . iterator ( ) . n", "public Iterator<String> fileNameIterator(){\n  return resultList.iterator();\n}\n", "public void execute(){\n  actions.add(activeAction);\n  Runnable requestRunnable=null;\n  if (isAsync) {\n    asyncExecutor.submit(requestRunnable);\n  }\n else {\n    requestRunnable.run();\n  }\n}\n", "public String rubyTypeName(TypeRef typeRef){\nswitch (typeRef.getKind()) {\ncase TYPE_MESSAGE:\n    return rubyTypeNameForProtoElement(typeRef.getMessageType());\ncase TYPE_ENUM:\n  return rubyTypeNameForProtoElement(typeRef.getEnumType());\ndefault :\n{\n  String name=PRIMITIVE_TYPE_NAMES.get(typeRef.getKind());\n  if (!Strings.isNullOrEmpty(name)) {\n    return name;\n  }\n  throw new IllegalArgumentException(\"unknown type kind: \" + typeRef.getKind());\n}\n}\n}\n", "    private void layoutOrderFrame() {\n        setLayout( new BorderLayout() );\n        add( \"Center\", orderFramePanel );\n    }\n", "public Id<TtPath> convertPathInfo2PathId(List<Id<DgStreet>> ksPath,Id<DgCrossingNode> ksSourceNodeId,Id<DgCrossingNode> ksDrainNodeId){\n  String idString=ksSourceNodeId.toString() + \"22\";\n  for (  Id<DgStreet> streetId : ksPath) {\n    idString+=streetId.toString() + \"44\";\n  }\n  idString.substring(0,idString.length() - 3);\n  idString+=\"22\" + ksDrainNodeId.toString();\n  return idPool.createId(idString,TtPath.class);\n}\n", "    protected void paintArrow(final Graphics2D g2) {\n        arrow.paint(g2, arrowCoordinates());\n    }\n", "@Override\n    public void visitBeanDefinitionConstructor(AnnotationMetadata annotationMetadata,\n                                               boolean requiresReflection) {\n        if (constructorVisitor == null) {\n            // first build the constructor\n            visitBeanDefinitionConstructorInternal(annotationMetadata, requiresReflection, Collections.emptyMap(), null, null);\n\n            // now prepare the implementation of the build method. See BeanFactory interface\n            visitBuildMethodDefinition(annotationMetadata, Collections.emptyMap(), Collections.emptyMap());\n\n            // now override the injectBean method\n            visitInjectMethodDefinition();\n        }\n    }", "public static void download ( long [ ] globalIds ) { for ( long globalId : globalIds ) { download ( globalId ) ; } }", "public static JSONObject JsonPost ( String url , String bssid , JSONObject postJSON , HeaderPair ... headers ) { return JsonPost ( url , bssid , SERIAL_NORMAL_TASK , postJSON , headers ) ; }", "public static String getStaticFixedURLForTopicNode(final ITopicNode topicNode) {\n        if (topicNode.getTopicType() == TopicType.REVISION_HISTORY) {\n            return \"appe-Revision_History\";\n        } else if (topicNode.getTopicType() == TopicType.LEGAL_NOTICE) {\n            return \"Legal_Notice\";\n        } else if (topicNode.getTopicType() == TopicType.AUTHOR_GROUP) {\n            return \"Author_Group\";\n        } else if (topicNode.getTopicType() == TopicType.ABSTRACT) {\n            return \"Abstract\";\n        } else {\n            return null;\n        }\n    }", "public <T> T doReadEntity(Class<T> cls, Type t, Annotation[] anns) throws ProcessingException, IllegalStateException {\n        return doReadEntity(cls, t, anns, false);\n    }", "public static Date nextDate ( final String immCode , final boolean mainCycle ) { return nextDate ( immCode , mainCycle , new Date ( ) ) ; }", "public boolean remove(Solution solution){\n  modCount++;\n  return data.remove(solution);\n}\n", "@Override\n\tpublic String getDescription(String languageId, boolean useDefault) {\n\t\treturn _commercePaymentMethodGroupRel.getDescription(languageId,\n\t\t\tuseDefault);\n\t}", "public RequestFilesPathCommand ( final int packetId , final String path ) { super ( DebugCommandType . CMD_LIST_FILES_PATH , packetId ) ; Preconditions . checkNotNull ( path , STR_ ) ; addArgument ( new DebugMessageRawArgument ( path . getBytes ( ) ) ) ; }", "    public boolean add(Object o) {\n\tLocalInfo li = (LocalInfo) o;\n\tLocalInfo contained = findSlot(li.getSlot());\n\tif (contained != null) {\n\t    li.combineWith(contained);\n\t    return false;\n\t} else {\n\t    grow(1);\n\t    locals[count++] = li;\n\t    return true;\n\t}\n    }\n", "    private void validateProjectLocation(String text) {\n        IWorkspace workspace = ResourcesPlugin.getWorkspace();\n        String pName = projectNameField.getText();\n        //Project needs a name, otherwise an exception is thrown. The name is not important for path checking\n        if (\"\".equals(pName)) pName = \"fdslajflj\";\n        IProject p = workspace.getRoot().getProject(pName);\n        IStatus status = workspace.validateProjectLocation(p, new Path(text));\n        if (status.getSeverity() == IStatus.OK) {\n            attributes.setProjectLocation(text);\n        }\n        updateStatus(status, projectLocationField);\n    }\n", "public void validate() {\n\n\t\tErrorDetails details = null;\n\t\tif( this.fileName != null )\n\t\t\tdetails = ErrorDetails.file( this.fileName );\n\n\t\tif( this.failed ) {\n\t\t\tthis.errors.add( new ModelError( ErrorCode.REC_TARGET_INVALID_FILE_OR_CONTENT, this.modelObject, details ));\n\n\t\t} else {\n\t\t\tString id = this.props.getProperty( Constants.TARGET_PROPERTY_ID );\n\t\t\tif( Utils.isEmptyOrWhitespaces( id ))\n\t\t\t\tthis.errors.add( new ModelError( ErrorCode.REC_TARGET_NO_ID, this.modelObject, details ));\n\n\t\t\tString handler = this.props.getProperty( Constants.TARGET_PROPERTY_HANDLER );\n\t\t\tif( Utils.isEmptyOrWhitespaces( handler ))\n\t\t\t\tthis.errors.add( new ModelError( ErrorCode.REC_TARGET_NO_HANDLER, this.modelObject, details ));\n\n\t\t\tString name = this.props.getProperty( Constants.TARGET_PROPERTY_NAME );\n\t\t\tif( Utils.isEmptyOrWhitespaces( name ))\n\t\t\t\tthis.errors.add( new ModelError( ErrorCode.REC_TARGET_NO_NAME, this.modelObject, details ));\n\t\t}\n\t}", "static < V > AuditLogFilter newFieldValueFilter ( JsonPointer field , Set < V > values , final JsonValueObjectConverter < V > asValue ) { return new FieldValueFilter < > ( field , values , asValue ) ; }", "\tprivate void notifyCaseValueCalculators(final Event event) {\n\t\tfor (final Iterator<CaseValueCalculator> it = caseValueCalculators\n\t\t\t\t.iterator(); it.hasNext();) {\n\t\t\tit.next().calculateCaseValue(event, caseValues);\n\t\t}\n\t}\n", "public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {\n        executeSqlScript(connection, new EncodedResource(resource));\n    }", "private MobileDoc createLayout(MobileDoc doc,MWorkflow wf,int activeNode,MWFNode[] nodes,ArrayList nodes_ID,int[][] imageMap){\n  body b=doc.getBody();\n  b.addElement(printWorkflow(activeNode,wf,nodes,nodes_ID,imageMap));\n  b.addElement(new hr());\n  b.addElement(printDescription(activeNode,wf,nodes,nodes_ID));\n  b.addElement(new br());\n  b.addElement(printControlPanel(activeNode,wf,nodes,nodes_ID));\n  return doc;\n}\n", "public abstract void modifyIndex ( String dataFileName ) ;", "private static void splitMult ( double a [ ] , double b [ ] , double ans [ ] ) { ans [ NUM_ ] = a [ NUM_ ] * b [ NUM_ ] ; ans [ NUM_ ] = a [ NUM_ ] * b [ NUM_ ] + a [ NUM_ ] * b [ NUM_ ] + a [ NUM_ ] * b [ NUM_ ] ; resplit ( ans ) ; }", "public static GraphicalModel readFromStream(InputStream stream) throws IOException {\n    return readFromProto(GraphicalModelProto.GraphicalModel.parseDelimitedFrom(stream));\n  }", "   public boolean precedes(DiffConflictLine next) {\n      return next != null &&\n               (firstFile == next.firstFile) &&\n               next.getLineNumber() == number + 1;\n   }\n", "public java.util.List<String> getProducts() {\n        if (products == null) {\n            products = new com.amazonaws.internal.SdkInternalList<String>();\n        }\n        return products;\n    }", "\tpublic ArrayList getEdgesBetween(Node source, Node target){\n\t\tArrayList ans=new ArrayList();\n\t\t\n\t\tEdgeIterator eit=edges();\n\t\t\n\t\twhile(eit.hasNext()){\n\t\t\tEdge edge=eit.nextEdge();\n\t\t\tif((edge.source()==source && edge.target()==target)||\n\t\t\t\t\t(edge.target()==source && edge.source()==target))\n\t\t\t\tans.add(edge);\n\t\t}\n\t\t\n\t\treturn ans;\n\t}\n", "public Document toDocument ( ) ;", "protected void engineSetMode(String mode) throws NoSuchAlgorithmException {\n  if (!mode.equalsIgnoreCase(\"ECB\")) {\n    throw new NoSuchAlgorithmException(mode + \" cannot be used\");\n  }\n}", "public DateTime toDateTime(double days) {\n\tlong utc = Math.round(days * DAY_MILLIS);\n\tutc -= CF_UNIX_OFFSET;\n\tutc -= getLocalTimeZoneOffset(utc);\n\treturn new DateTimeImpl(utc, false);\n    }", "public static boolean writeModPoll ( int register , int type , int value , String expectedOutput ) { return execModPoll ( register , type , value , expectedOutput , NUM_ ) ; }", "public NodeFilter or ( NodeFilter filter ) { if ( filter == null ) { return this ; } return new NodeFilterOr ( this , filter ) ; }", "public void getMaterialStorage(String API, Callback<List<MaterialStorage>> callback) throws GuildWars2Exception, NullPointerException {\n\t\tisParamValid(new ParamChecker(ParamType.API, API));\n\t\tgw2API.getMaterialBank(API).enqueue(callback);\n\t}", "  public boolean equals(java.lang.Object otherObject) {\n    boolean equal = false;\n\n    if (otherObject instanceof X942DH2KeyDerivationParameters) {\n      X942DH2KeyDerivationParameters other = (X942DH2KeyDerivationParameters) otherObject;\n      equal = (this == other)\n              || (super.equals(other)\n                  && (this.privateDataLength_ == other.privateDataLength_)\n                  && this.privateData_.equals(other.privateData_)\n                  && Functions.equals(this.publicData2_, other.publicData2_));\n    }\n\n    return equal ;\n  }\n", "public void writeJobDataFile(String version) throws Exception {\n  Object obj=getTargetObject();\n  FileOutputStream fos=new FileOutputStream(getSerializedFileName(version,obj.getClass()));\n  ObjectOutputStream oos=new ObjectOutputStream(fos);\n  oos.writeObject(obj);\n  oos.flush();\n  fos.close();\n  oos.close();\n}\n", "public boolean resumeWaiting(InternalEvent eventMessageDoc) throws ActivityException {\n        if (WorkStatus.STATUSNAME_COMPLETED.equalsIgnoreCase(eventMessageDoc.getCompletionCode())){\n            setReturnCode(null);\n            return true;\n        }\n        EventWaitInstance received = registerWaitEvents(true, true);\n        if (received!=null) {\n            setReturnCodeAndExitStatus(received.getCompletionCode());\n            processMessage(getExternalEventInstanceDetails(received.getMessageDocumentId()));\n            return handleCompletionCode();\n        } else {\n            setReturnCode(null);\n            return true;\n        }\n    }", "Integer appendTypeInstanceComment ( int moduleId , int instanceId , String commentText , Integer userId ) throws CouldntSaveDataException ;", "    public void tearDown() {\n\n        super.tearDown();\n\n    }\n", "public void clearClassContextCache ( ) { throw new UnsupportedOperationException ( ) ; }", "    public void modifyTension(Player player, int addToTension) {\n        modifyTension(player, addToTension, null);\n    }\n", "public void online ( ) throws Exception ;", "public static File createTempFile ( final String ext ) throws IOException { final File file = File . createTempFile ( STR_ , STR_ + ext ) ; return file ; }", "public void writeObject (ObjectOutputStream out)\n        throws IOException\n    {\n        if (!classDefinesElementType()) {\n            out.writeUTF(_elementType.getName());\n        }\n        out.write(_contents);\n    }", "default boolean isVerbose ( ) { return BOOL_ ; }", "    public int getCustomersCount() {\n        Transaction tx = getSession().beginTransaction();\n        String hql = \"select count(*) from Customer as customer where customer.idUser = '\"\n                + userManager.getUser().getId() + \"' and customer.isActive = 'y'\";\n        int num =  ( (Long) (getSession().createQuery(hql).iterate().next()) ).intValue();\n        tx.commit();\n        return num;\n    }\n", "protected void updateModifiedDate(java.util.Date modifiedDate) {\n\t\tthis.modifiedDate = modifiedDate;\n\t\tConnection con = null;\n\t\tPreparedStatement pstmt = null;\n\t\ttry {\n\t\t\tcon = DbConnectionManager.getConnection();\n\t\t\tpstmt = con.prepareStatement(UPDATE_F", "public static String lower(String string){\n  return string != null ? string.toLowerCase() : null;\n}\n", "  public void setValues(Vector newStates){\n    for (int i = 0; i < network.size(); i++)\n      nodeStates[i] = ((Integer) newStates.elementAt(i)).intValue();\n  }\n", "\tpublic void init() {\n\t\tlog.info(\"initialize page registry\");\n\t}\n", "    public boolean askConfirm(@NotNull final String title, @NotNull final String message) {\n        return JOptionPane.showConfirmDialog(this, message, title, JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE) == JOptionPane.YES_OPTION;\n    }\n", "public void stopSpinning ( ) { isSpinning = BOOL_ ; mProgress = NUM_ ; mTargetProgress = NUM_ ; invalidate ( ) ; }", "@Override\n  public final UserCredentials[] retrieveUsersCredentials() throws Exception {\n    String query = \"select USERTOMCAT.ITSUSER as ITSUSER, ITSPASSWORD, ITSROLE\"\n      + \" from USERTOMCAT join USERROLETOMCAT\"\n        + \" on USERROLETOMCAT.ITSUSER = USERTOMCAT.ITSUSER;\";\n    ArrayList<UserCredentials> result = null;\n    IRecordSet<RS> recordSet = null;\n    try {\n      this.srvDatabase.setIsAutocommit(false);\n      this.srvDatabase.\n        setTransactionIsolation(ISrvDatabase.TRANSACTION_READ_UNCOMMITTED);\n      this.srvDatabase.beginTransaction();\n      recordSet = getSrvDatabase().retrieveRecords(query);\n      if (recordSet != null && recordSet.moveToFirst()) {\n        result = new ArrayList<UserCredentials>();\n        UserCredentials uc = null;\n        ArrayList<String> roles = new ArrayList<String>();\n        do {\n          String currUser = recordSet.getString(\"ITSUSER\");\n          if (uc == null) {\n            uc = new UserCredentials();\n            result.add(uc);\n            uc.setUserName(currUser);\n            uc.setUserPassword(recordSet.getString(\"ITSPASSWORD\"));\n          } else if (!currUser.equals(uc.getUserName())) {\n            uc.setUserRoles(roles.toArray(new String[roles.size()]));\n            roles.clear();\n            uc = new UserCredentials();\n            result.add(uc);\n            uc.setUserName(currUser);\n            uc.setUserPassword(recordSet.getString(\"ITSPASSWORD\"));\n          }\n          roles.add(recordSet.getString(\"ITSROLE\"));\n        } while (recordSet.moveToNext());\n        uc.setUserRoles(roles.toArray(new String[roles.size()]));\n      }\n      this.srvDatabase.commitTransaction();\n    } catch (Exception ex) {\n      this.srvDatabase.rollBackTransaction();\n      throw ex;\n    } finally {\n      this.srvDatabase.releaseResources();\n      if (recordSet != null) {\n        recordSet.close();\n      }\n    }\n    if (result == null) {\n      return null;\n    }\n    return result.toArray(new UserCredentials[result.size()]);\n  }", "  public Material material() {\n    if (material != null) {\n      return material;\n    } else if (isFunctionalSpace()) {\n      return Defaults.getFunctionalMaterial();\n    } else {\n      return Defaults.getConstructionMaterial();\n    }\n  }\n", "public static < T > LinkedBindingBuilder < T > bind ( Binder binder , TypeLiteral < T > type , Named name ) { binder . disableCircularProxies ( ) ; return binder . bind ( type ) . annotatedWith ( name ) ; }", "  @Override public int hashCode() {\n    int hash = hashBase;\n    \n    hash = hash * 5 + this.id;\n    hash = hash * 5 + this.id;\n    hash = hash * 5 + this.id;    \n    \n    return hash;\n  } \n", "public String dump(){\n  StringBuilder buffer=new StringBuilder();\n  for (int row=0; row < getRowCount(); row++) {\n    buffer.append(timestamps[row]);\n    buffer.append(\":  \");\n    for (int dsIndex=0; dsIndex < getColumnCount(); dsIndex++) {\n      buffer.append(Util.formatDouble(values[dsIndex][row],true));\n      buffer.append(\"  \");\n    }\n    buffer.append(\"\\n\");\n  }\n  return buffer.toString();\n}\n", "public void addFunction ( final IBlockContainer < InstructionType > original , final ReilFunction translated ) { functions . add ( new Pair < IBlockContainer < InstructionType > , ReilFunction > ( original , translated ) ) ; }", "private boolean isParentClosable ( ) { return BOOL_ ; }", "public static Vector3m toVector3m ( Vector2 o , float y ) { return new Vector3m ( o . x , y , o . z ) ; }", "public void testBinaryMapParse ( ) throws Exception { String [ ] setDefs = { STR_ , STR_ , STR_ , STR_ , STR_ } ; String [ ] binary = { STR_ , STR_ , STR_ , STR_ , STR_ } ; String [ ] expected = { STR_ , STR_ , STR_ , STR_ , STR_ } ; for ( int i = NUM_ ; i < binary . length ; i ++ ) { Long value = Long . parseLong ( binary [ i ] , NUM_ ) ; String parsed = SetToStringFilter . binarySetMapToString ( setDefs , value ) ; Assert . assertEquals ( STR_ , expected [ i ] , parsed ) ; } }", "public final void endElement(\n        final String namespaceURI,\n        final String localName,\n        final String name)\n        throws org.xml.sax.SAXException\n    {\n        // deal with any pending issues\n        if (m_cdataTagOpen)\n            closeCDATA();\n\n        // if the element has a namespace, treat it like XML, not HTML\n        if (null != namespaceURI && namespaceURI.length() > 0)\n        {\n            super.endElement(namespaceURI, localName, name);\n\n            return;\n        }\n\n        try\n        {\n\n            ElemContext elemContext = m_elemContext;\n            final ElemDesc elemDesc = elemContext.m_elementDesc;\n            final int elemFlags = elemDesc.getFlags();\n            final boolean elemEmpty = (elemFlags & ElemDesc.EMPTY) != 0;\n\n            // deal with any indentation issues\n            if (m_doIndent)\n            {\n                final boolean isBlockElement = (elemFlags&ElemDesc.BLOCK) != 0;\n                boolean shouldIndent = false;\n\n                if (m_ispreserve)\n                {\n                    m_ispreserve = false;\n                }\n                else if (m_doIndent && (!m_inBlockElem || isBlockElement))\n                {\n                    m_startNewLine = true;\n                    shouldIndent = true;\n                }\n                if (!elemContext.m_startTagOpen && shouldIndent)\n                    indent(elemContext.m_currentElemDepth - 1);\n                m_inBlockElem = !isBlockElement;\n            }\n\n            final java.io.Writer writer = m_writer;\n            if (!elemContext.m_startTagOpen)\n            {\n                writer.write(\"</\");\n                writer.write(name);\n                writer.write('>');\n            }\n            else\n            {\n                // the start-tag open when this method was called,\n                // so we need to process it now.\n                \n                if (m_tracer != null)\n                    super.fireStartElem(name);\n\n                // the starting tag was still open when we received this endElement() call\n                // so we need to process any gathered attributes NOW, before they go away.\n                int nAttrs = m_attributes.getLength();\n                if (nAttrs > 0)\n                {\n                    processAttributes(m_writer, nAttrs);\n                    // clear attributes object for re-use with next element\n                    m_attributes.clear();\n                }\n                if (!elemEmpty)\n                {\n                    // As per Dave/Paul recommendation 12/06/2000\n                    // if (shouldIndent)\n                    // writer.write('>');\n                    //  indent(m_currentIndent);\n\n                    writer.write(\"></\");\n                    writer.write(name);\n                    writer.write('>');\n                }\n                else\n                {\n                    writer.write('>');\n                }\n            }\n            \n            // clean up because the element has ended\n            if ((elemFlags & ElemDesc.WHITESPACESENSITIVE) != 0)\n                m_ispreserve = true;\n            m_isprevtext = false;\n\n            // fire off the end element event\n            if (m_tracer != null)\n                super.fireEndElem(name);            \n                           \n            // OPTIMIZE-EMPTY                \n            if (elemEmpty)\n            {\n                // a quick exit if the HTML element had no children.\n                // This block of code can be removed if the corresponding block of code\n                // in startElement() also labeled with \"OPTIMIZE-EMPTY\" is also removed\n                m_elemContext = elemContext.m_prev;\n                return;\n            }\n\n            // some more clean because the element has ended. \n            if (!elemContext.m_startTagOpen)\n            {\n                if (m_doIndent && !m_preserves.isEmpty())\n                    m_preserves.pop();\n            }\n            m_elemContext = elemContext.m_prev;\n//            m_isRawStack.pop();\n        }\n        catch (IOException e)\n        {\n            throw new SAXException(e);\n        }\n    }", "public void setFlags(int modeOrFlags) {\n        setShowMoreTimeItems((modeOrFlags & ReminderDatePicker.FLAG_MORE_TIME) != 0);\n        setShowNumbersInView((modeOrFlags & ReminderDatePicker.FLAG_NUMBERS) != 0);\n    }", "private List resultSetToArrayList(final List<Object[]> resultList) throws ApplicationRuntimeException {\n  final List list=new ArrayList();\n  LabelValueBean labelValueBean=null;\n  BigDecimal id;\n  try {\n    for (    final Object[] objArr : resultList) {\n      labelValueBean=new LabelValueBean();\n      id=(BigDecimal)objArr[0];\n      labelValueBean.setId(id.intValue());\n      labelValueBean.setName((String)objArr[1]);\n      list.add(labelValueBean);\n    }\n  }\n catch (  final Exception e) {\n    LOGGER.error(\"Error occurred in EgovMasterDataCaching resultSetToArrayList\",e);\n    throw new ApplicationRuntimeException(\"Error occurred in EgovMasterDataCaching resultSetToArrayList\",e);\n  }\n  return list;\n}\n", "public java.rmi.Remote getPort(Class serviceEndpointInterface) throws javax.xml.rpc.ServiceException {\n        try {\n            if (com.google.api.ads.admanager.axis.v201808.ReportServiceInterface.class.isAssignableFrom(serviceEndpointInterface)) {\n     ", "public static void initializeGenericKeys(Configuration conf, String serviceKey) {\n    if ((serviceKey == null) || serviceKey.isEmpty()) {\n      return;\n    }\n\n    // adjust meta directory names by service key\n    adjustMetaDirectoryNames(conf, serviceKey);\n\n    DFSUtil.setGenericConf(conf, serviceKey, NAMESERVICE_SPECIFIC_KEYS);\n  }", "    public boolean mapToObj(AddressDetailForm addressDetailForm, AddressVO addressVO) {\n        boolean hasChanged = false;\n            boolean changed = mapper.mapToObj(addressDetailForm, addressVO);\n            if (changed) {\n              hasChanged = changed;\n            }\n            return hasChanged;\n        }\n", "\tpublic void setValue(Object value) {\n\t\tif (!isGoodType(value)) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Value given is not allowed for the Text type : '\" + value\n\t\t\t\t\t\t\t+ \"'\");\n\t\t} else {\n\t\t\tobjValue = (String) value;\n\t\t\telement.setTextContent((String) value);\n\t\t}\n\n\t}\n", "  public void append(double x, double y) {\n    super.append(x, y);\n    adjustCapacity(xpoints.length);\n  }\n", "private Object cloneObject ( Object object ) { if ( object == null ) { return null ; } Class < ? > cls = multiplexManager . getDictionary ( ) . lookupEntityClass ( object . getClass ( ) ) ; try { Object clone = cls . newInstance ( ) ; for ( Field field : ", "public void put(int key,E value){\n  int i=ContainerHelpers.binarySearch(mKeys,mSize,key);\n  if (i >= 0) {\n    mValues[i]=value;\n  }\n else {\n    i=~i;\n    if (i < mSize && mValues[i] == DELETED) {\n      mKeys[i]=key;\n      mValues[i]=value;\n      return;\n    }\n    if (mGarbage && mSize >= mKeys.length) {\n      gc();\n      i=~ContainerHelpers.binarySearch(mKeys,mSize,key);\n    }\n    if (mSize >= mKeys.length) {\n      int n=ArrayUtils.idealIntArraySize(mSize + 1);\n      int[] nkeys=new int[n];\n      Object[] nvalues=new Object[n];\n      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);\n      System.arraycopy(mValues,0,nvalues,0,mValues.length);\n      mKeys=nkeys;\n      mValues=nvalues;\n    }\n    if (mSize - i != 0) {\n      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);\n      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);\n    }\n    mKeys[i]=key;\n    mValues[i]=value;\n    mSize++;\n  }\n}\n", "protected JsonDeserializer<Object> _createAndCache2(DeserializationConfig config,JavaType type,BeanProperty property) throws JsonMappingException {\n  JsonDeserializer<Object> deser;\n  try {\n    deser=_createDeserializer(config,type,property);\n  }\n catch (  IllegalArgumentException iae) {\n    throw new JsonMappingException(iae.getMessage(),null,iae);\n  }\n  if (deser == null) {\n    return null;\n  }\n  boolean isResolvable=(deser instanceof ResolvableDeserializer);\n  boolean addToCache=(deser.getClass() == BeanDeserializer.class);\n  if (!addToCache) {\n    if (config.isEnabled(DeserializationConfig.Feature.USE_ANNOTATIONS)) {\n      AnnotationIntrospector aintr=config.getAnnotationIntrospector();\n      AnnotatedClass ac=AnnotatedClass.construct(deser.getClass(),aintr,null);\n      Boolean cacheAnn=aintr.findCachability(ac);\n      if (cacheAnn != null) {\n        addToCache=cacheAnn.booleanValue();\n      }\n    }\n  }\n  if (isResolvable) {\n    _incompleteDeserializers.put(type,deser);\n    _resolveDeserializer(config,(ResolvableDeserializer)deser);\n    _incompleteDeserializers.remove(type);\n  }\n  if (addToCache) {\n    _cachedDeserializers.put(type,deser);\n  }\n  return deser;\n}\n", "public RaygunClient withData(Object key, Object value) {\n        clientData.put(key, value);\n        return this;\n    }", "private void buildTree(MapModel mapModel) {\n\t\ttreeGrid.setWidth100();\n\t\ttreeGrid.setHeight100();\n\t\ttreeGrid.setShowHeader(false);\n\t\ttree = new RefreshableTree();\n\t\tfinal TreeNode nodeRoot = new TreeNode(\"ROOT\");\n\t\ttree.setRoot(nodeRoot); // invisible ROOT node (ROOT node is required)\n\n\t\tClientLayerTreeInfo layerTreeInfo = mapModel.getMapInfo().getLayerTree();\n\t\tif (layerTreeInfo != null) {\n\t\t\tClientLayerTreeNodeInfo treeNode = layerTreeInfo.getTreeNode();\n\t\t\tprocessNode(treeNode, nodeRoot, tree, mapModel, false);\n\t\t}\n\n\t\ttreeGrid.setData(tree);\n\t\ttreeGrid.addLeafClickHandler(this);\n\t\ttreeGrid.addFolderClickHandler(this);\n\n\t\t// -- add event listeners to layers\n\t\tfor (Layer<?> layer : mapModel.getLayers()) {\n\t\t\tregistrations.add(layer.addLayerChangedHandler(new LayerChangedHandler() {\n\t\t\t\tpublic void onLabelChange(LayerLabeledEvent event) {\n\t\t\t\t}\n\n\t\t\t\tpublic void onVisibleChange(LayerShownEvent event) {\n\t\t\t\t\tfor (TreeNode node : tree.getAllNodes()) {\n\t\t\t\t\t\tif (node.getName().equals(event.getLayer().getLabel())) {\n\t\t\t\t\t\t\tif (node instanceof LayerTreeTreeNode) {\n\t\t\t\t\t\t\t\t((LayerTreeTreeNode) node).updateIcon();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}", "private void add(String key, String value, boolean tokenize) {\r\n\r\n        if (tokenize && (value.indexOf(ParameterTokenizer.COMMA) > 0)) {\r\n            // token contains commas, so must be split apart then added\r\n            ParameterTokenizer tokenizer = new ParameterTokenizer(value);\r\n            while (tokenizer.hasMoreTokens()) {\r\n                String token = tokenizer.nextToken();\r\n                addInternal(key, unescape(token));\r\n            }\r\n        } else if (tokenize) {\r\n            addInternal(key, unescape(value));\r\n        } else {\r\n            // token contains no commas, so can be simply added\r\n            addInternal(key, value);\r\n        }\r\n    }", "public BasicBlock nextItem ( ) { return workList . removeFirst ( ) ; }", "    public int indexOf(TreeNode child) {\n        return children == null ? -1 : children.indexOf(child);\n    }\n", "public static final HashSet readSetXml(InputStream in) throws XmlPullParserException, IOException {\n  XmlPullParser parser=Xml.newPullParser();\n  parser.setInput(in,null);\n  return (HashSet)readValueXml(parser,new String[1]);\n}\n", "public static String getFilename(final URL url) throws UnsupportedEncodingException\n\t{\n\t\tif (isJar(url) || isEar(url))\n\t\t{\n\t\t\tString fileName = URLDecoder.decode(url.getFile(), \"UTF-8\");\n\t\t\tfileName = fileName.substring(5, fileName.indexOf(\"!\"));\n\t\t\treturn fileName;\n\t\t}\n\t\treturn URLDecoder.decode(url.getFile(), \"UTF-8\");\n\t}", "private CGlobalSettings ( ) { }", "public Observable<ServiceResponse<Page<DomainOwnershipIdentifierInner>>> listOwnershipIdentifiersNextWithServiceResponseAsync(final String nextPageLink) {\n        return listOwnershipIdentifiersNextSinglePageAsync(nextPageLink)\n            .concatMap(new ", "    public void init(ServletConfig config) throws ServletException {\n        super.init(config);\n        try {\n            home = (ejb.bprocess.administration.SubjectTopicalTermHome)ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome(\"SubjectTopicalTerm\");\n        }catch (Exception exp){exp.printStackTrace(System.out);}\n        newGenXMLGenerator = servlet.util.NewGenXMLGenerator.getInstance();\n    }\n", "    protected void noteUpdate(Object key, Object newValue, Object oldValue) {\n        synchronized (listeners) {\n            Iterator it = listeners.iterator();\n            while (it.hasNext()) {\n                CacheListener listener = (CacheListener) it.next();\n                listener.noteKeyUpdate(this, key, newValue, oldValue);\n            }\n        }\n    }\n", "public Long getMax() {\r\n\t\treturn processFunction(new AbstractSplitFunction<Long>(Long.MIN_VALUE) {\r\n\t\t\t@Override\r\n\t\t\tpublic void evaluate(long runningFor) {\r\n\t\t\t\tif (runningFor > result) {\r\n\t\t\t\t\tresult = runningFor;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}", "public static String locateChrome(){\n  String os=Platform.getOS();\n  List<File> locationsToCheck=new ArrayList<File>();\n  if (Platform.OS_WIN32.equals(os)) {\n    String[] envVariables=new String[]{\"home\",\"userprofile\",\"home\",\"userprofile\",\"ProgramFiles(X86)\",\"ProgramFiles\"};\n    String[] appendedPaths=new String[]{\"\\\\Local Settings\\\\Application Data\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\"\\\\Local Settings\\\\Application Data\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\"\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\"\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\"\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\"\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\"};\n    assert envVariables.length == appendedPaths.length;\n    for (int i=0; i < envVariables.length; i++) {\n      String envValue=System.getenv(envVariables[i]);\n      if (envValue != null) {\n        locationsToCheck.add(new File(envValue + appendedPaths[i]));\n      }\n    }\n  }\n else   if (Platform.OS_MACOSX.equals(os)) {\n    locationsToCheck.add(new File(\"/Applications/ChromeWithSpeedTracer.app\"));\n    String homeDir=System.getenv(\"HOME\");\n    if (homeDir != null) {\n      locationsToCheck.add(new File(homeDir + \"/Applications/ChromeWithSpeedTracer.app\"));\n    }\n  }\n else {\n    locationsToCheck.add(new File(\"/usr/bin/chrome\"));\n    locationsToCheck.add(new File(\"/usr/local/bin/chrome\"));\n    locationsToCheck.add(new File(\"/usr/bin/google-chrome\"));\n    locationsToCheck.add(new File(\"/usr/local/bin/google-chrome\"));\n    locationsToCheck.add(new File(\"/usr/bin/chromium\"));\n    locationsToCheck.add(new File(\"/usr/local/bin/chromium\"));\n    locationsToCheck.add(new File(\"/usr/bin/chromium-browser\"));\n    locationsToCheck.add(new File(\"/usr/local/bin/chromium-browser\"));\n  }\n  for (  File location : locationsToCheck) {\n    if (location.exists() && (Platform.OS_MACOSX.equals(os) || location.isFile())) {\n      return location.getAbsolutePath();\n    }\n  }\n  return null;\n}\n", "public boolean isJoinQuery ( ) { return BOOL_ ; }", "public static boolean matchSecret(String secret){\n  return secretSet.remove(secret);\n}\n", "    private void initDao() throws JBIException {\n        BpelDAOConnectionFactoryJDBC cf;\n        try {\n            cf = _db.createDaoCF();\n        } catch (DatabaseConfigException e) {\n            String errmsg = __msgs.msgDAOInstantiationFailed(_ode._config.getDAOConnectionFactory());\n            throw new JBIException(errmsg,e);\n        }\n        _ode._daocf = cf;\n    }\n", "default long now(TimeUnit unit){\n  return unit.convert(System.currentTimeMillis(),TimeUnit.MILLISECONDS);\n}\n", "private Object executePlus(PageContext pc,SQL sql,Query qr,Operation2 expression,int row) throws PageException {\n  Object left=executeExp(pc,sql,qr,expression.getLeft(),row);\n  Object right=executeExp(pc,sql,qr,expression.getRight(),row);\n  try {\n    return new Double(Caster.toDoubleValue(left) + Caster.toDoubleValue(right));\n  }\n catch (  PageException e) {\n    return Caster.toString(left) + Caster.toString(right);\n  }\n}\n", "public java.util.List<String> getRemoteDomainNames() {\n        if (remoteDomainNames == null) {\n            remoteDomainNames = new com.amazonaws.internal.SdkInternalList<String>();\n        }\n        return remoteDomainNames;\n    }", "@Override\n\tpublic ServletOutputStream getOutputStream() throws IOException {\n\t\tif (printWriter != null) {\n\t\t\tthrow new IOException(\"getWriter method has been called on this response\");\n\t\t}\n\n\t\tif (outputStream == null) {\n\t\t\toutputStream = new MockServletOutputStream();\n\t\t}\n\n\t\treturn outputStream;\n\t}", "private void invokeMetering() throws BaseCollectionException {\n  _commInterface.collectStatisticsInformation(_accessProfile);\n}\n", "protected DOMField getFirstFieldDeclaration() {\n\tif (isVariableDeclarator()) {\n\t\treturn ((DOMField)this.fPreviousNode).getFirstFieldDeclaration();\n\t} else {\n\t\treturn this;\n\t}\n}\n", "  public String getAppletInfo() {\n    return \"SEHR - Login/Menu Applet to SEHR Services\\nVersion \"\n        + MODULE_VERSION + \".\" + SOURCE_REVISION;\n  }\n", "public void removeListener ( ISpaceModeListener listener ) { _listeners . remove ( listener ) ; }", "    public void mustReadEq() {\n        // Drop any prefix space\n        this.dropS();\n        // Get the next character, which must be equals\n        char ch = this.getChar();\n        if ( ch != '=' ) {\n            throw new XmlWellFormednessAlert( \"'=' character expected\" ).culpritChar( ch ).mishap();\n        }\n        // Drop any postfix space\n        this.dropS();\n    }\n", "    public void removeAttribute(BaseDO authenticatedDO, BaseDO targetSubjectDO, BaseDO targetObject, RelationshipAttributeDO attribute ) throws BaseAuthorisationException{\n        throw new BaseAuthorisationException(\"Not Implemented in this example class\");\n        //TODO\n    }\n", "    public AbstractQueryType getAbstractQuery() {\n        if (abstractQuery!= null) {\n            return abstractQuery.getValue();\n        }\n        return null;\n    }\n", "private WritableDoubleDataStore computeMaxHeight() {\n    WritableDoubleDataStore maxheight = DataStoreUtil.makeDoubleStorage(ids, DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP, 0.);\n    DBIDVar v1 = DBIDUtil.newVar();\n    for(DBIDIter it = ids.iter(); it.valid(); it.advance()) {\n      double d = parentDistance.doubleValue(it);\n      if(d > maxheight.doubleValue(it)) {\n        maxheight.putDouble(it, d);\n      }\n      if(d > maxheight.doubleValue(parent.assignVar(it, v1))) {\n        maxheight.putDouble(v1, d);\n      }\n    }\n    return maxheight;\n  }", "    public Object resolve(String id) {\n        return references.get(id);\n    }\n", "public Object evaluate ( String scriptText , String fileName ) throws CompilationFailedException { return evaluate ( scriptText , fileName , DEFAULT_CODE_BASE ) ; }", "\tpublic void setContactmethod (final ContactsContactmethodEnum contactmethod) {\n\t\tthis.contactmethod = contactmethod;\n\t}\n", "private static void doBox(CodeBuilder adapter, SoyRuntimeType type) {\n    if (type.isKnownSanitizedContent()) {\n      FieldRef.enumReference(\n              ContentKind.valueOf(((SanitizedType) type.soyType()).getContentKind().name()))\n          .accessStaticUnchecked(adapter);\n      MethodRef.ORDAIN_AS_SAFE.invokeUnchecked(adapter);\n    } else if (type.isKnownString()) {\n      MethodRef.STRING_DATA_FOR_VALUE.invokeUnchecked(adapter);\n    } else if (type.isKnownListOrUnionOfLists()) {\n      MethodRef.LIST_IMPL_FOR_PROVIDER_LIST.invokeUnchecked(adapter);\n    } else if (type.isKnownLegacyObjectMapOrUnionOfMaps()) {\n      FieldRef.enumReference(RuntimeMapTypeTracker.Type.LEGACY_OBJECT_MAP_OR_RECORD)\n          .putUnchecked(adapter);\n      MethodRef.DICT_IMPL_FOR_PROVIDER_MAP.invokeUnchecked(adapter);\n    } else if (type.isKnownMapOrUnionOfMaps()) {\n      MethodRef.MAP_IMPL_FOR_PROVIDER_MAP.invokeUnchecked(adapter);\n    } else if (type.isKnownProtoOrUnionOfProtos()) {\n      MethodRef.SOY_PROTO_VALUE_CREATE.invokeUnchecked(adapter);\n    } else {\n      throw new IllegalStateException(\"Can't box soy expression of type \" + type);\n    }\n  }", "public void onFirstRun(ConfigurationContext context,Runnable startRunnable){\n  startRunnable.run();\n}\n", "public static <T> void reverse(final T array) {\n\n        if (ArrayUtils.isArray(array)) {\n            int mlength = Array.getLength(array) - 1;\n            Object temp = null;\n            for (int i = 0, j = mlength; i < mlength; i++, j--) {\n                Object arg0 = Array.get(array, i);\n                Object arg1 = Array.get(array, j);\n                temp = arg0;\n                Array.set(array, i, arg1);\n                Array.set(array, j, temp);\n            }\n        }\n    }", "public PaymentResponse createPaymentResponse(final ServiceDetails paymentServiceDetails,final String response){\n  final PaymentGatewayAdaptor paymentGatewayAdaptor=getPaymentGatewayAdaptor(paymentServiceDetails.getCode());\n  final PaymentResponse paymentResponse=paymentGatewayAdaptor.parsePaymentResponse(response);\n  return paymentResponse;\n}\n", "public Builder addListenUrl(String url){\n  if (UrlUtil.isUrl(url)) {\n    if (mListenUrls == null) {\n      mListenUrls=new HashSet<String>();\n    }\n    mListenUrls.add(url);\n  }\n  return this;\n}\n", "public void addEntry(String id, int score, RelType context)\n\t{\n\t\tthis.score.put(id, score);\n\t\tthis.context.put(id, context);\n\t}", "    public Object remove(Object key) {\n        return super.remove((Key) key);\n    }\n", "public static DynamicClassLoader create(ClassLoader parent,\n                                          PathImpl path)\n  {\n    DynamicClassLoader loader = new DynamicClassLoader(parent, false, false);\n\n    loader.addLoader(new SimpleLoader(loader, path));\n\n    loader.init();\n    \n    return loader;\n  }", "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return ID;\ncase 2:\n  return PROPERTY;\ndefault :\nreturn null;\n}\n}\n", "public HttpRequest acceptEncoding ( final String acceptEncoding ) { return header ( HEADER_ACCEPT_ENCODING , acceptEncoding ) ; }", "\tpublic int compareTo(MXQueryBinary arg) throws MXQueryException{\n\t\tif (this.equals(arg))\n\t\t\t return 0;\n\t\telse return -1;\n\t} \n", "public boolean isFillViewport ( ) { return mFillViewport ; }", "private static boolean isLocalLoader ( ClassLoader loader ) { return ( loader == null || localLoaders . containsKey ( loader ) ) ; }", "static public ContentHandleFactory newFactory(Class<?>... pojoClasses) {\n    if (pojoClasses == null || pojoClasses.length == 0) return null;\n    return new JacksonDatabindHandleFactory(pojoClasses);\n  }", "@Override\n  public Optional<DatenFilm> deserialize(final JsonElement aElement, final Type aType,\n      final JsonDeserializationContext aContext) {\n    try {\n      final Optional<JsonObject> viewer = getViewer(aElement.getAsJsonObject());\n      if (viewer.isPresent()) {\n\n        final Optional<JsonObject> detailClip = getDetailClip(viewer.get());\n\n        return buildFilm(detailClip, viewer.get());\n\n\n      } else {\n        printMissingDetails(JSON_ELEMENT_VIEWER);\n      }\n    } catch (final UnsupportedOperationException unsupportedOperationException) {\n      // This will happen when a element is JsonNull.\n      LOG.error(\"BR: A needed JSON element is JsonNull.\", unsupportedOperationException);\n      FilmeSuchen.listeSenderLaufen.inc(crawler.getSendername(), RunSender.Count.FEHLER);\n    }\n\n    return Optional.empty();\n  }", "    public Publisher createPublisher( String name, String web ) {\n        try {\n            Publisher pub = new Publisher( name, web );\n            String qryAddPublisher = \"INSERT INTO publishers( name, website ) VALUES ( '\"\n                        + name + \"', '\"\n                        + web + \"' )\";\n            Statement stmAddPublisher = conComics.createStatement();\n            stmAddPublisher.executeUpdate( qryAddPublisher );\n\n            pub.setID( getLastInsertID() );\n            addPublisher( pub );\n            stmAddPublisher.close();\n            return pub;\n        } catch( SQLException E ) {\n            System.err.println( getClass() + \".createPublisher() :: Error saving Publisher to database. \" );\n            E.printStackTrace();\n            return null;\n        }\n    }\n", "@Override\n    public void sawOpcode(int seen) {\n        try {\n            stack.precomputation(this);\n\n            int sDepth = stack.getStackDepth();\n            Iterator<PopInfo> it = popStack.iterator();\n\n            while (it.hasNext()) {\n                if (sDepth < it.next().popDepth) {\n                    it.remove();\n                }\n            }\n\n            if ((seen == Const.INVOKESTATIC) && !popStack.isEmpty()) {\n                String method = getNameConstantOperand();\n                if (method.indexOf(Values.SYNTHETIC_MEMBER_CHAR) < 0) {\n                    PopInfo pInfo = popStack.get(0);\n                    int numArguments = SignatureUtils.getNumParameters(getSigConstantOperand());\n                    if (((numArguments > 0) || (pInfo.popPC == (getPC() - 1))) && (numArguments == (stack.getStackDepth() - pInfo.popDepth))\n                            && classDefinesStaticMethod(SignatureUtils.stripSignature(pInfo.popSignature))) {\n                        int lineNumber = -1;\n                        if (lineNumberTable != null) {\n                            lineNumber = lineNumberTable.getSourceLine(getPC());\n                        }\n                        if (pInfo.popLineNum == lineNumber) {\n                            bugReporter.reportBug(new BugInstance(this, BugType.SMII_STATIC_METHOD_INSTANCE_INVOCATION.name(), NORMAL_PRIORITY).addClass(this)\n                                    .addMethod(this).addSourceLine(this));\n                        }\n                        popStack.clear();\n                    }\n                }\n            }\n\n            if ((seen == Const.PUTFIELD) || (seen == Const.ATHROW) || (seen == Const.GOTO) || (seen == Const.GOTO_W)\n                    || ((seen >= Const.IFEQ) && (seen <= Const.IF_ACMPNE)) || OpcodeUtils.isAStore(seen)) {\n                popStack.clear();\n            } else if ((seen == Const.INVOKESPECIAL) || (seen == Const.INVOKEINTERFACE) || (seen == Const.INVOKEVIRTUAL) || (seen == Const.INVOKESTATIC)) {\n                if (Values.SIG_VOID.equals(SignatureUtils.getReturnSignature(getSigConstantOperand()))) {\n                    popStack.clear();\n                }\n            }\n\n            if ((seen == Const.POP) && (stack.getStackDepth() > 0)) {\n                OpcodeStack.Item itm = stack.getStackItem(0);\n                String popSig = itm.getSignature();\n                if (popSig.startsWith(Values.SIG_QUALIFIED_CLASS_PREFIX)) {\n                    int lineNumber = -1;\n                    if (lineNumberTable != null) {\n                        lineNumber = lineNumberTable.getSourceLine(getPC());\n                    }\n                    popStack.add(new PopInfo(getPC(), lineNumber, popSig, sDepth - 1));\n                }\n            }\n        } catch (ClassNotFoundException cnfe) {\n            bugReporter.reportMissingClass(cnfe);\n            popStack.clear();\n        } finally {\n            stack.sawOpcode(this, seen);\n        }\n    }", "\tpublic Td appendChild(Node... children){\n\t\tfor(int i = 0; i < children.length; i++){\n\t\t\tappendChild(children[i]);\n\t\t}\n\t\treturn this;\n\t}\n", "public String toString ( int depth ) { if ( depth <= NUM_ ) return STR_ ; return super . toString ( depth ) + STR_ + arity + STR_ + ( originallyDefinedInModule != null ? originallyDefinedInModule . getName ( ) . toString ( ) : STR_ ) ; }", "\tpublic void removeMenuListener( MenuListener listener ) {\n\t\tif( menuListeners.contains(listener) )\n\t\t\tmenuListeners.remove(listener);\n\t}\n", "public boolean isLocalInstance(){\n  return LOCAL.equalsIgnoreCase(instanceName);\n}\n", "void start ( ) ;", "public static void writeInt(byte[] buf, int pos, int v) {\n    checkBoundary(buf, pos, 4);\n    buf[pos++] = (byte) (0xff & (v >> 24));\n    buf[pos++] = (byte) (0xff & (v >> 16));\n    buf[pos++] = (byte) (0xff & (v >> 8));\n    buf[pos] = (byte) (0xff & v);\n  }", "public TextHttpResponseHandler ( ) { this ( DEFAULT_CHARSET ) ; }", "@Override\n    public AttachInstancesResult attachInstances(AttachInstancesRequest request) {\n        request = beforeClientExecution(request);\n        return executeAttachInstances(request);\n    }", "public void increment(int position,double weight){\n  leftLabelWeights[position]+=weight;\n  rightLabelWeights[position]-=weight;\n  leftWeight+=weight;\n  rightWeight-=weight;\n}\n", "    public void refresh() {\n        if (controlsCreated) {\n            for (int i = 0; i < sections.length; i++) {\n                final ISection section = sections[i];\n                ISafeRunnable runnable = new ISafeRunnable() {\n\n                    public void run() throws Exception {\n                        section.refresh();\n                    }\n\n                    public void handleException(Throwable throwable) {\n                        throwable.printStackTrace();\n                    }\n                };\n                SafeRunner.run(runnable);\n            }\n        }\n    }\n", "private void showMessage ( String msg ) { Toast . makeText ( AppDetailsActivity . this , msg , Toast . LENGTH_LONG ) . show ( ) ; }", "    public IntMatrix1D make(int size, int initialValue) {\n        return make(size).assign(initialValue);\n    }\n", "\tpublic AccelerateAction (double unitsPerSecond) {\n\t\tsetRate(unitsPerSecond);\n\t}\n", "\tprotected void setDocumentProvider(IEditorInput input) {\n\t\tIDocumentProvider provider = DocumentProviderRegistry.getDefault().getDocumentProvider(input, new IDocumentProviderSelector() {\n\t\t\tpublic boolean select(String documentType) {\n\t\t\t\t// Only checking of the interface name\n\t\t\t\treturn documentType.equals(IDiagramDocument.class.getName());\n\t\t\t}\n\t\t});\n\t\tsetDocumentProvider(provider);\n\t}\n", "public static CopyJobConfiguration of(TableId destinationTable, TableId sourceTable) {\n    return newBuilder(destinationTable, sourceTable).build();\n  }", "public int size(){\n  return count.get();\n}", "public void setSpeed(float speed) {\n        this.paceInSec = null;\n        this.speed = Math.max(0, Math.min(speed, 99.9));\n    }", "public void revokeWritePermission(Collection attributeNames){\n  Iterator it=attributeNames.iterator();\n  if (it != null) {\n    while (it.hasNext()) {\n      String temp=(String)it.next();\n      writables.remove(temp.toLowerCase());\n    }\n  }\n}\n", "public static Double makeDouble(String s){\n  if (WWUtil.isEmpty(s)) {\n    return null;\n  }\n  try {\n    return Double.valueOf(s);\n  }\n catch (  NumberFormatException e) {\n    return null;\n  }\n}\n", "  public void transpose() {\n    _da.transpose(_transposeType);\n  }\n", "\tpublic boolean deleteTemplate(String name) {\n\t\treturn getTemplateFile(name).delete();\n\t}\n", "public static String readOutput(BufferedReader in) throws IOException {\n  StringBuffer output=new StringBuffer();\n  String line=null;\n  while ((line=in.readLine()) != null) {\n    output.append(line);\n    output.append(Tools.getLineSeparator());\n  }\n  return output.toString();\n}\n", "public void addSpiderParserListener(SpiderParserListener listener){\n  listeners.add(listener);\n}\n", "private IConfigurationElement selectConfigurationElement(Set set){\n  if (set != null && !set.isEmpty()) {\n    Iterator e=set.iterator();\n    return (IConfigurationElement)e.next();\n  }\n  return null;\n}", "\tpublic Vector2D minus(Vector2D v) {\n\t\treturn new Vector2D(x - v.x, y - v.y);\n\t}\n", "public static String read(final String filename){\n  try {\n    return asString(new FileInputStream(new File(filename)),Charset.defaultCharset());\n  }\n catch (  IOException e) {\n    logger.warn(\"An error occurred while reading the file {}\",filename,e);\n    return null;\n  }\n}\n", "void close ( ) ;", "protected boolean onConnect ( SelectionKey key ) { return BOOL_ ; }", "public String printLeafModels(){\n  StringBuffer text=new StringBuffer();\n  if (m_isLeaf) {\n    text.append(\"\\nLM num: \" + m_leafModelNum);\n    text.append(m_nodeModel.toString());\n    text.append(\"\\n\");\n  }\n else {\n    text.append(m_left.printLeafModels());\n    text.append(m_right.printLeafModels());\n  }\n  return text.toString();\n}\n", "        public EditContext readEditContext(boolean isValidating) {\n            EditContext editContext = new EditContext();\n            Collection groups = getTableGroups();\n            Iterator groupIter = groups.iterator();\n            \n            while ( groupIter.hasNext() ) {\n                String group = (String)groupIter.next();\n                readTableGroup(editContext, group, isValidating);\n            }\n            \n            return editContext;\n        }\n", "public MP4Reader(FileInputStream fis) throws IOException {\n  if (null == fis) {\n    log.warn(\"Reader was passed a null file\");\n    log.debug(\"{}\",ToStringBuilder.reflectionToString(this));\n  }\n  this.fis=new MP4DataStream(fis);\n  channel=fis.getChannel();\n  decodeHeader();\n  analyzeFrames();\n  firstTags.add(createFileMeta());\n  createPreStreamingTags(0,false);\n}\n", "    public void assertRadioOptionSelected(String name, String radioOption) {\n        assertRadioOptionPresent(name, radioOption);\n        assertEquals(radioOption, getTestingEngine()\n        \t\t.getSelectedRadio(name));\n    }\n", "public boolean validateSensor(String sensorName,LayoutBlock blk,Component openFrame){\n  if (sensorName.length() < 1) {\n    return false;\n  }\n  Sensor s=blk.validateSensor(sensorName,openFrame);\n  if (s == null) {\n    return false;\n  }\n  return true;\n}\n", "\tprivate Object serializeTrailer(Node trailerNode) throws XException\n\t{ // Easy: no record type identification necessary\n\t\t// Jump directly to contained fields.\n\t\treturn serializeFieldsAndGroups(trailerNode, trailerSpec);\n\t} // serializeTrailer(Node trailerNode)\n", "public static Value Assert ( Value v1 , Value v2 ) { if ( ( v1 instanceof BoolValue ) && ( ( BoolValue ) v1 ) . val ) { return v1 ; } throw new EvalException ( EC . TLC_VALUE_ASSERT_FAILED , Value . ppr ( v2 . toString ( ) ) ) ; }", "boolean allocateTiny(PoolArena<?> area, PooledByteBuf<?> buf, int reqCapacity, int normCapacity) {\n        return allocate(cacheForTiny(area, normCapacity), buf, reqCapacity);\n    }", "public int calculatePartition(int splitno,int numPartitions){\n  final int partitionSize=(int)(Math.ceil((double)numSplits / (double)numPartitions));\n  return splitno / partitionSize;\n}\n", "private CGlobalSettings ( ) { }", "public BasicProxyPreparer ( ) { verify = BOOL_ ; methodConstraintsSpecified = BOOL_ ; methodConstraints = null ; permissions = new Permission [ NUM_ ] ; }", "public T adjacentDifference ( final Ops . BinaryDoubleOp f ) ;", "public void deleteUser(Integer targetUserId) throws IOException {\n        String tailUrl = GitlabUser.USERS_URL + \"/\" + targetUserId;\n        retrieve().method(DELETE).to(tailUrl, Void.class);\n    }", "    public BigMoney dividedBy(BigDecimal valueToDivideBy, RoundingMode roundingMode) {\n        MoneyUtils.checkNotNull(valueToDivideBy, \"Divisor must not be null\");\n        MoneyUtils.checkNotNull(roundingMode, \"RoundingMode must not be null\");\n        if (valueToDivideBy.compareTo(BigDecimal.ONE) == 0) {\n            return this;\n        }\n        BigDecimal amount = iAmount.divide(valueToDivideBy, roundingMode);\n        return BigMoney.of(iCurrency, amount);\n    }\n", "public SaaSApplicationException ( Throwable cause ) { super ( cause ) ; init ( ) ; this . setCauseStackTrace ( cause ) ; }", "private static String getVectorString(Vector vector) {\n        StringBuffer buffer = new StringBuffer();\n        int[] indices = vector.getIndices();\n        double[] values = vector.getValues();\n        for (int i = 0; i < indices.length; i++) {\n            buffer.append(\" \").append(indices[i]).append(\":\").append(values[i]);\n        }\n        return buffer.toString();\n    }", "int executeModify ( ModifyData data , Transaction tx ) ;", "\tprivate void sleep(long duration) {\n\t\ttry {\n\t\t\tThread.sleep(duration);\n\t\t} catch (InterruptedException e) {\n\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n", "  protected String getPrimaryKeyColumn(String tableName) {\n    HashMap map = getPrimaryKeyColumnMapping();\n    Object obj = map.get(tableName);\n    return (obj == null) ? null : (String)obj;\n  }\n", "    private boolean isWeblog(String potentialHandle) {\n        \n        log.debug(\"checking weblog handle \"+potentialHandle);\n        \n        boolean isWeblog = false;\n        \n        try {\n            UserManager mgr = WebloggerFactory.getWeblogger().getUserManager();\n            Weblog weblog = mgr.getWebsiteByHandle(potentialHandle);\n            \n            if(weblog != null) {\n                isWeblog = true;\n            }\n        } catch(Exception ex) {\n            // doesn't really matter to us why it's not a valid website\n        }\n        \n        return isWeblog;\n    }\n", "private PointF correctBugMuPdf ( PointF size ) { return new PointF ( size . x / NUM_ , size . y / NUM_ ) ; }", "private void updateAction ( TextView view , boolean isChecked , boolean isUser ) { if ( isChecked ) { view . setText ( isUser ? R . string . following : R . string . inviting ) ; view . setCompoundDrawablesWithIntrinsicBounds ( R . drawable . ic_action_ac", "public static final void writeDoubleArrayXml(double[] val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {\n  if (val == null) {\n    out.startTag(null,\"null\");\n    out.endTag(null,\"null\");\n    return;\n  }\n  out.startTag(null,\"double-array\");\n  if (name != null) {\n    out.attribute(null,\"name\",name);\n  }\n  final int n=val.length;\n  out.attribute(null,\"num\",Integer.toString(n));\n  for (int i=0; i < n; i++) {\n    out.startTag(null,\"item\");\n    out.attribute(null,\"value\",Double.toString(val[i]));\n    out.endTag(null,\"item\");\n  }\n  out.endTag(null,\"double-array\");\n}\n", "public String getProperty(String strProperty)\n    {\n        if (this.getParentRecordOwner() != null)\n            return this.getParentRecordOwner().getProperty(strProperty);\n        return null;\n    }", "public static int twoBytesToInt(byte[] bytes) throws SAML2Exception {\n  if (bytes == null || bytes.length != 2) {\n    debug.error(\"SAML2Utils.twoBytesToInt: input is null or length is \" + \"not 2.\");\n    throw new SAML2Exception(bundle.getString(\"wrontInput\"));\n  }\n  String str0=Integer.toHexString(bytes[0]);\n  int len0=str0.length();\n  String norm0=null;\n  if (len0 > 2) {\n    norm0=str0.substring(len0 - 2,len0);\n  }\n else {\n    norm0=str0;\n  }\n  String str1=Integer.toHexString(bytes[1]);\n  int len1=str1.length();\n  String norm1=null;\n  if (len1 > 2) {\n    norm1=str1.substring(len1 - 2,len1);\n  }\n else   if (len1 == 1) {\n    norm1=\"0\" + str1;\n  }\n else {\n    norm1=str1;\n  }\n  String wholeHexStr=norm0 + norm1;\n  int i=Integer.parseInt(wholeHexStr,16);\n  return i;\n}\n", "public String current(){\n  return urls.get(index.get());\n}\n", "@Override\n    public void unset(String propName) {\n        if (propName.equals(PROP_ST)) {\n            unsetSt();\n        }\n        if (propName.equals(PROP_STATE_OR_PROVINCE_NAME)) {\n            unsetStateOrProvinceName();\n        }\n        if (propName.equals(PROP_STREET)) {\n            unsetStreet();\n        }\n        if (propName.equals(PROP_SEE_ALSO)) {\n            unsetSeeAlso();\n        }\n        if (propName.equals(PROP_DESCRIPTION)) {\n            unsetDescription();\n        }\n        super.unset(propName);\n    }", "public int firstIndexOf(CqlIdentifier id) {\n    Integer index = byId.get(id);\n    return (index == null) ? -1 : index;\n  }", "public LinkIcon(boolean linked){\n  this.linked=linked;\n  link=linked ? linkedImIc.getImage() : unlinkedImIc.getImage();\n  addMouseListener(this);\n  Dimension dim=new Dimension((int)link.getWidth(null),link.getHeight(null));\n  setPreferredSize(dim);\n  setMinimumSize(dim);\n  setMaximumSize(dim);\n  setSize(dim);\n  setLayout(null);\n  repaint();\n}\n", "public static boolean optionalBooleanAttribute(\n            final XMLStreamReader reader,\n            final String localName,\n            final boolean defaultValue) {\n        return optionalBooleanAttribute(reader, null, localName, defaultValue);\n    }", "public static int previousSetBit(long[] v,int start){\n  if (start == -1) {\n    return -1;\n  }\n  int wordindex=start >>> LONG_LOG2_SIZE;\n  if (wordindex >= v.length) {\n    return magnitude(v) - 1;\n  }\n  final int off=Long.SIZE - 1 - (start & LONG_LOG2_MASK);\n  long cur=v[wordindex] & (LONG_ALL_BITS >>> off);\n  for (; ; ) {\n    if (cur != 0) {\n      return (wordindex + 1) * Long.SIZE - 1 - Long.numberOfLeadingZeros(cur);\n    }\n    if (wordindex == 0) {\n      return -1;\n    }\n    wordindex--;\n    cur=v[wordindex];\n  }\n}\n", "    public void setDateFormat(DateFormat dateFormat){\n\tif(dateFormat != null){\n\t    this.dateFormat = dateFormat;\n\t}\n    }\n", "@Override public boolean equals(final Object obj){\n  if (obj == this) {\n    return true;\n  }\n  if (obj == null) {\n    return false;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  if (ObjectUtils.notEqual(getClass(),obj.getClass())) {\n    return false;\n  }\n  final ExtendedMessageFormat rhs=(ExtendedMessageFormat)obj;\n  if (ObjectUtils.notEqual(toPattern,rhs.toPattern)) {\n    return false;\n  }\n  if (ObjectUtils.notEqual(registry,rhs.registry)) {\n    return false;\n  }\n  return true;\n}\n", "final public boolean addChild(final IRunningQuery childQuery){\nsynchronized (children) {\n    final UUID childId=childQuery.getQueryId();\n    if (children.containsKey(childId)) {\n      return false;\n    }\n    if (future.isDone()) {\n      childQuery.cancel(true);\n      throw new RuntimeException(\"Query is done\");\n    }\n    children.put(childId,childQuery);\n    return true;\n  }\n}\n", "public Object eval( Reader in ) throws EvalError\n    {\n        return eval( in, globalNameSpace, null == sourceFileInfo ? \"eval stream\" : sourceFileInfo );\n    }", "    public Image getImage(Object element) {\n        if (element instanceof DataGUIItem) {\n            return ((DataGUIItem) element).getIcon();            \n        }\n\n        return null;\n    }\n", "private ProxyReg findReg ( ServiceRegistrar proxy ) { Iterator iter = proxyRegSet . iterator ( ) ; while ( iter . hasNext ( ) ) { ProxyReg reg = ( ProxyReg ) iter . next ( ) ; if ( reg . proxy . equals ( proxy ) ) return reg ; } return null ; }", "public JcsegServer registerHandler()\n    {\n        String basePath = this.getClass().getPackage().getName()+\".controller\";\n        AbstractRouter router = new DynamicRestRouter(basePath, MainController.class);\n        router.addMapping(\"/extractor/keywords\", KeywordsController.class);\n        router.addMapping(\"/extractor/keyphrase\", KeyphraseController.class);\n        router.addMapping(\"/extractor/sentence\", SentenceController.class);\n        router.addMapping(\"/extractor/summary\", SummaryController.class);\n        router.addMapping(\"/tokenizer/default\", TokenizerController.class);\n        \n        /*\n         * the rest of path and dynamic rest checking will handler it \n        */\n        //router.addMapping(\"/tokenizer/default\", TokenizerController.class);\n        \n        /*\n         * prepare standard handler\n        */\n        StandardHandler stdHandler = new StandardHandler(config, resourcePool, router);\n        \n        /*\n         * prepare the resource handler \n        */\n        JcsegResourceHandler resourceHandler = new JcsegResourceHandler();\n        \n        /*\n         * i am going to rewrite the path to handler mapping mechanism\n         * check the Router handler for more info \n        */\n        GzipHandler gzipHandler = new GzipHandler();\n        HandlerList handlers = new HandlerList();\n        handlers.setHandlers(new Handler[]{stdHandler, resourceHandler});\n        gzipHandler.setHandler(handlers);\n        server.setHandler(gzipHandler);\n        \n        return this;\n    }", "@Override public final char readChar() throws IOException {\n  dis.readFully(work,0,2);\n  return (char)((work[1] & 0xff) << 8 | (work[0] & 0xff));\n}\n", "public ResourceManager getResourceManager() {\n\t\tif (myResources == null) {\n\t\t\tmyResources = new LocalResourceManager(JFaceResources.getResources());\n\t\t}\n\t\treturn myResources;\n\t}", "\tpublic float getSpawnFrequency(int ruType) {\n\t\tfor (int i=0; i < spawnFreq.length; i++) {\n\t\t\tif (spawnFreq[i].ruType == ruType)\n\t\t\t\treturn spawnFreq[i].freq;\n\t\t}\n\t\treturn -1;\n\t}\n", "\tpublic void moveNorth(){\n\t\tcordY =+ 1;\n\t}\n", "public void dischargeItem(ItemStack aStack){\n  increaseStoredEnergyUnits(GT_ModHandler.dischargeElectricItem(aStack,(int)Math.min(Integer.MAX_VALUE,getEUCapacity() - getStoredEU()),(int)Math.min(Integer.MAX_VALUE,mMetaTileEntity.getInputTier()),false,false,false),true);\n}\n", "    public int hashCode() {\n        return cardNumber ^ deckID.hashCode();\n    }\n", "static String getAromaticType(Map<String, String> map, char suffix, String symb, boolean imidazolium, boolean anion) {\n        if (anion && symb.startsWith(\"N\")) symb = \"N5M\";\n        if (map.containsKey(symb)) symb = map.get(symb);\n        if ((imidazolium || anion) && symb.charAt(symb.length() - 1) == suffix)\n            symb = symb.substring(0, symb.length() - 1);\n        return symb;\n    }", "@Override\n    public INDArray randn(long rows, long columns) {\n        return randn(new long[] {rows, columns}, System.currentTimeMillis());\n    }", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public boolean isMultiValued ( final Attribute attribute ) throws BadRequestException { checkForInvalidAttribute ( attribute . getName ( ) ) ; for ( final AttributeInfoHelper attributeInfo : attributes ) { final String attributeName = attributeInfo . getA", "    public void recreateDB(){\n        removeDB();\n        createDB();\n    }\n", "public void forceCloseAndDelete() {\n    try {\n      if (objectOutputStream != null) {\n        objectOutputStream.close();\n        objectOutputStream = null;\n      }\n      if (fileOutputStream != null) {\n        fileOutputStream.close();\n        fileOutputStream = null;\n      }\n    } catch (IOException e) {\n      log.debug(e);\n    }\n    closed = true;\n    tokenNumber = 0;\n    if (file != null) {\n      if (file.exists() && file.canWrite() && !file.delete()) {\n        log.debug(\"couldn't delete \" + file.getName());\n      }\n      file = null;\n    }\n  }", "public boolean add ( BugInstance bugInstance ) ;", "public boolean endsWith(java.lang.CharSequence suffix){\n  return startsWith(suffix,length() - suffix.length());\n}\n", "public void addRequestListener ( RequestListener listener ) { addMessageListener ( new RequestListenerMessageEventHandler ( listener ) ) ; }", "private static void storeAsTypeWithSignaturesImport(String strTypeToImport,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){\n  if (strTypeToImport.contains(\"|\")) {\n    for (    String strOneType : strTypeToImport.split(\"\\\\|\")) {\n      storeAsTypeWithSignaturesImport(Types.getType(strOneType),objScope,objIndex,objTypesSet);\n    }\n    return;\n  }\n  if (StringUtil.isEmpty(strTypeToImport) || strTypeToImport.equals(\"?\")) {\n    return;\n  }\n  if (strTypeToImport.contains(\"#\")) {\n    TypeFromSignatureResolvingUtil.resolveSignature(strTypeToImport,objScope,objIndex,objTypesSet);\n    return;\n  }\n  objTypesSet.add(Types.getType(strTypeToImport));\n}\n", "public B setProviderName(String provider) {\n        set(AbstractContext.KEY_PROVIDER, Objects.requireNonNull(provider));\n        return (B) this;\n    }", "private boolean matchingOpArgOperand ( ExprOrOpArgNode arg , int i ) { return ( ( arg instanceof OpArgNode ) && params [ i ] . getArity ( ) == ( ( OpArgNode ) arg ) . getArity ( ) ) ; }", "public PopupMenuPainter ( Which state ) { super ( ) ; this . state = state ; this . ctx = new PaintContext ( CacheMode . NO_CACHING ) ; }", "public void testSelectOneInvalidValue ( ) throws Exception { HtmlPage page = getPage ( STR_ ) ; List list = getAllElementsOfGivenClass ( page , null , HtmlSubmitInput . class ) ; HtmlSubmitInput button = ( HtmlSubmitInput ) list . get ( NUM_ ) ; list = ge", "void addedTag ( CTagManager manager , ITreeNode < CTag > tag ) ;", "private Cursor makeStreamCursor ( CharSequence streamName ) throws SQLException { if ( streamName == null ) { streamName = STR_ ; } return ( ( AndroidDatabaseResults ) app . getDao ( Stream . class ) . queryRaw ( STR_ + Stream . SUBSCRIBED_FIELD + STR_ + Stream . NAME_FIELD + STR_ + Stream . NAME_FIELD + STR_ , DatabaseHelper . likeEscape ( streamName . toString ( ) ) + STR_ ) . closeableIterator ( ) . getRawResults ( ) ) . getRawCursor ( ) ; }", "public static void p(int i, Regex r) {\n        if (0 == i) {\n            System.out.println(i + \": \" + r.stringMatched());\n        } else {\n            System.out.println(i + \": \" + r.stringMatched(i));\n        }\n    }", "public DBObject getObject(String tableName, String objectID) {\r\n        Utils.require(!Utils.isEmpty(tableName), \"tableName\");\r\n        Utils.require(!Utils.isEmpty(objectID), \"objectID\");\r\n        TableDefinition tableDef = m_appDef.getTableDef(tableName);\r\n        Utils.require(tableDef != null,\r\n                      \"Unknown table for application '%s': %s\", m_appDef.getAppName(), tableName);\r\n        \r\n        try {\r\n            // Send a GET request to \"/{application}/{table}/{object ID}\"\r\n            StringBuilder uri = new StringBuilder(Utils.isEmpty(m_restClient.getApiPrefix()) ? \"\" : \"/\" + m_restClient.getApiPrefix());          \t\t\t\r\n            uri.append(\"/\");\r\n            uri.append(Utils.urlEncode(m_appDef.getAppName()));\r\n            uri.append(\"/\");\r\n            uri.append(Utils.urlEncode(tableName));\r\n            uri.append(\"/\");\r\n            uri.append(Utils.urlEncode(objectID));\r\n            RESTResponse response = m_restClient.sendRequest(HttpMethod.GET, uri.toString());\r\n            m_logger.debug(\"getObject() response: {}\", response.toString());\r\n            \r\n            // If the response is not \"OK\", return null.\r\n            if (response.getCode() != HttpCode.OK) {\r\n                return null;\r\n            }\r\n            return new DBObject().parse(getUNodeResult(response));\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }", "public static SparseIntArray adjustPosition(SparseIntArray positions,int startPosition,int endPosition,int adjustBy){\n  SparseIntArray newPositions=new SparseIntArray();\n  for (int i=0, size=positions.size(); i < size; i++) {\n    int position=positions.keyAt(i);\n    if (position < startPosition || position > endPosition) {\n      newPositions.put(position,positions.valueAt(i));\n    }\n else     if (adjustBy > 0) {\n      newPositions.put(position + adjustBy,positions.valueAt(i));\n    }\n else     if (adjustBy < 0) {\n      if (position > startPosition + adjustBy && position <= startPosition) {\n        ;\n      }\n else {\n        newPositions.put(position + adjustBy,positions.valueAt(i));\n      }\n    }\n  }\n  return newPositions;\n}\n", "\tprotected boolean isEligibleForOverriding(String className) {\n\t\treturn !isExcluded(className);\n\t}\n", "private static HashSet < IAddress > fillJumpTargets ( final Collection < ReilInstruction > reilInstructions ) { final HashSet < IAddress > jumpTargets = new HashSet < IAddress > ( ) ; for ( final ReilInstruction reilInstruction : reilInstructions ) { if (", "    public String release(PartnerLinkInstance plinkInstnace, String opName, String mexId) {\n        if (__log.isTraceEnabled())\n            __log.trace(ObjectPrinter.stringifyMethodEnter(\"release\", new Object[] { \"plinkInstance\", plinkInstnace, \"opName\", opName, \"mexId\", mexId }));\n\n        final OutstandingRequestIdTuple orid = new OutstandingRequestIdTuple(plinkInstnace, opName, mexId);\n        String mexRef = _byOrid.remove(orid);\n        if (mexRef == null) {\n            if (__log.isDebugEnabled()) {\n                __log.debug(\"==release: ORID \" + orid + \" not found in \" + _byOrid);\n            }\n            return null;\n        }\n        return mexRef;\n    }\n", "private Optional<Pattern> getDefaultValidationPattern(Class javaType) {\n        return javaType.isEnum() ?\n                Optional.of(createValidationPatternFromEnumType(javaType)) :\n                getDefaultPatternIfPrimitive(javaType);\n    }", "public final void yyclose ( ) throws java . io . IOException { zzAtEOF = BOOL_ ; zzEndRead = zzStartRead ; if ( zzReader != null ) zzReader . close ( ) ; }", "public static Set<NetworkLite> queryNetworkLites(Collection<URI> uris,DbClient dbClient){\n  Set<NetworkLite> networks=new HashSet<NetworkLite>();\n  NetworkLite networkLite=null;\n  for (  URI uri : uris) {\n    networkLite=getNetworkLite(uri,dbClient);\n    if (networkLite != null) {\n      networks.add(networkLite);\n    }\n  }\n  return networks;\n}\n", "public void addHierarchyChangeListener(@NotNull final HierarchyChangeListener l){\n  myListenerList.add(HierarchyChangeListener.class,l);\n}\n", "public void loadScript ( ) { if ( script != null ) { return ; } try { script = FileCopyUtils . copyToString ( new BufferedReader ( new InputStreamReader ( resourceLoader . getResource ( resourceLocation ) . getInputStream ( ) ) ) ) ; } catch ( IOException", "\tprivate void buildStreams() {\n\t\tsuper.assertNotNull(\"Error getting connection from factory\", connection);\n\t\t// Why doesn't this work...????\n\t\t//super.assertTrue(\"Connection needs to be made before building streams\", connection.isConnectionValid());\n\t\tInputStream is = connection.getInputStream();\n\t\tsuper.assertNotNull(\"Error getting input stream from connection\", is);\n\t\treader = new BufferedReader(new InputStreamReader(is));\n\t\tsuper.assertNotNull(reader);\n\t\tOutputStream os = connection.getOutputStream();\n\t\tsuper.assertNotNull(\"Error getting output stream from connection\", os);\n\t\twriter = new PrintStream(os);\n\t\tsuper.assertNotNull(writer);\n\t}\n", "public void insert ( final AbstractInsnNode location , final InsnList insns ) { if ( insns . size == NUM_ ) { return ; } size += insns . size ; AbstractInsnNode ifirst = insns . first ; AbstractInsnNode ilast = insns . last ; AbstractInsnNode next = location . next ; if ( next == null ) { last = ilast ; } else { next . prev = ilast ; } location . next = ifirst ; ilast . next = next ; ifirst . prev = location ; cache = null ; insns . removeAll ( BOOL_ ) ; }", "@Override\n    public Object[][] readAll(List<String> columnNames) {\n        int rowNum = (int) getSasFileProperties().getRowCount();\n        Object[][] result = new Object[rowNum][];\n        for (int i = 0; i < rowNum; i++) {\n            try {\n                result[i] = readNext(columnNames);\n            } catch (IOException e) {\n                if (LOGGER.isWarnEnabled()) {\n                    LOGGER.warn(\"I/O exception, skipping the rest of the file. \"\n                            + \"Rows read: \" + i + \". Expected number of rows from metadata: \" + rowNum, e);\n                }\n                break;\n            }\n        }\n        return result;\n    }", "public void addLineOffset ( int offset ) { if ( numLines >= lineNumberMap . length ) { int capacity = lineNumberMap . length * NUM_ ; int [ ] newLineNumberMap = new int [ capacity ] ; System . arraycopy ( lineNumberMap , NUM_ , newLineNumberMap , NUM_ , l", "public CArbitraryViewsTable ( final JTree projectTree , final CAbstractTreeViewsTableModel model , final IViewContainer container , final IHelpInformation helpInfo ) { super ( projectTree , model , container , helpInfo ) ; }", "public void onConsumeFinished ( Purchase purchase , IabResult result ) ;", "public CGraphSynchronizer ( final ZyGraph graph , final CSpecialInstructionsModel model ) { m_graph = Preconditions . checkNotNull ( graph , STR_ ) ; m_model = Preconditions . checkNotNull ( model , STR_ ) ; updateInstructionMap ( ) ; m_model . setInstructions ( updateInstructions ( ) ) ; m_graph . addListener ( m_graphListener ) ; m_graph . getRawView ( ) . addListener ( m_listener ) ; for ( final ITypeDescription description : model . getDescriptions ( ) ) { description . addListener ( m_descriptionListener ) ; } }", "public static void writeBytesToStream(byte[] bytes,OutputStream outputStream) throws IOException {\n  BufferedOutputStream bos=new BufferedOutputStream(outputStream);\n  try {\n    bos.write(bytes);\n  }\n  finally {\n    bos.close();\n  }\n}\n", "public void removeAt(int index){\n  System.arraycopy(mKeys,index + 1,mKeys,index,mSize - (index + 1));\n  System.arraycopy(mValues,index + 1,mValues,index,mSize - (index + 1));\n  --mSize;\n}\n", "public void setBeforeLoginMessage(CmsLoginMessage message) {\n\n        m_beforeLoginMessage = message;\n        if (CmsLog.INIT.isInfoEnabled()) {\n            CmsLog.INIT.info(\n                Messages.get().getBundle().key(\n                    Messages.INIT_LOGINMESSAGE_3,\n                    Boolean.valueOf(message.isEnabled()),\n                    Boolean.valueOf(message.isLoginForbidden()),\n                    message.getMessage()));\n        }\n    }", "public void addOverride(MappedMember override){\n  overrides.add(override);\n}\n", "    public void setNodeType(SimpleData type) {\n        if (type == null) {\n            this.nodeType = null;\n            this.nodeTypeEditable = false;\n        } else {\n            this.nodeType = type.format();\n            this.nodeTypeEditable = type.isEditable();\n        }\n    }\n", "    public void addExecuteAlgorithmListener(ActionListener anActionListener){\n        cmdExecAlg.addActionListener(anActionListener);\n    }\n", "public OvhDomain service_domain_domainName_GET(String service, String domainName) throws IOException {\n\t\tString qPath = \"/email/pro/{service}/domain/{domainName}\";\n\t\tStringBuilder sb = path(qPath, service, domainName);\n\t\tString resp = exec(qPath, \"GET\", sb.toString(), null);\n\t\treturn convertTo(resp, OvhDomain.class);\n\t}", "public static ReilInstruction createUnknown ( final Address address ) { return new ReilInstruction ( address , ReilMnemonics . UNKNOWN , ReilOperand . EMPTY_OPERAND , ReilOperand . EMPTY_OPERAND , ReilOperand . EMPTY_OPERAND ) ; }", "private void processFormFieldBegin ( ) { currentFieldPosition ++ ; FormField field = formFields . get ( currentFieldPosition ) ; slickFormSubmitButton . setText ( field . getStepLabel ( ) ) ; slickFieldContainer . setVisibility ( View . VISIBLE ) ; slickF", "public void sub(Quaternion q) {\n\t\tvalues.sub(q.values);\n\t}", "public DailyTimeIntervalScheduleBuilder onDaysOfTheWeek ( Set < Integer > onDaysOfWeek ) { if ( onDaysOfWeek == null || onDaysOfWeek . size ( ) == NUM_ ) throw new IllegalArgumentException ( STR_ ) ; for ( Integer day : onDaysOfWeek ) if ( ! ALL_DAYS_OF_THE_WEEK . contains ( day ) ) throw new IllegalArgumentException ( STR_ + day ) ; this . daysOfWeek = onDaysOfWeek ; return this ; }", "public void eachRow(Closure closure) throws SQLException {\n  while (next()) {\n    closure.call(this);\n  }\n}\n", "public static Object createInstanceFromClassname(String className,\n                                                     Class<?>[] argClasses,\n                                                     Object[] args)\n            throws JournalException {\n\n        try {\n            Class<?> clazz = Class.forName(className);\n            Constructor<?> constructor = clazz.getConstructor(argClasses);\n            return constructor.newInstance(args);\n        } catch (Exception e) {\n            throw new JournalException(e);\n        }\n    }", "@SuppressWarnings({\"ThrowableInstanceNeverThrown\"})\n    public static void validateVoid(Method method, List<Throwable> errors)\n    {\n        if (method.getReturnType() != Void.TYPE)\n        {\n            errors.add(new Exception(\"Method \" + method.getName() + \"() should be void\"));\n        }\n    }", "public ApplicationImpl ( ApplicationServiceFactory applicationServiceFactory ) { this . applicationServiceFactory = applicationServiceFactory ; }", "private void actorStream ( List < Movie > movies ) { Stream < List < Actor > > actorStream = movies . stream ( ) . map ( null ) ; actorStream . forEach ( null ) ; }", "protected void handleActivate() {\n\t\t// Recompute the read only state.\n\t\t//\n\t\tif (editingDomain.getResourceToReadOnlyMap() != null) {\n\t\t  editingDomain.getResourceToReadOnlyMap().clear();\n\n\t\t  // Refresh any actions that may become enabled or disabled.", "\tpublic void zeroAll() {\n\t\tfor (int i=0; i<bits.length; i++) {\n\t\t\tbits[i] = false;\n\t\t}\n\t}\n", "\tpublic IEcutModel getEcutModel() {\n\n\t\tif (ecutModel == null) {\n\t\t\tecutModel = new EcutModel();\n\t\t}\n\t\treturn ecutModel;\n\t}\n", "public MethodNode popEnclosingMethod ( ) { return enclosingMethods . removeFirst ( ) ; }", "    public String decrypt(String key, String encryptedText) {\n        if (StringUtil.isEmpty(encryptedText)) {\n            return encryptedText;\n        }\n        validateAesKey(key);\n        String result = null;\n        try {\n            SecretKeySpec spec =\n                new SecretKeySpec(key.getBytes(ENCODING), ALGORITHM_KEY);\n            javax.crypto.Cipher cipher =\n                javax.crypto.Cipher.getInstance(ALGORITHM);\n            cipher.init(\n                javax.crypto.Cipher.DECRYPT_MODE,\n                spec,\n                new IvParameterSpec(CBC_IV));\n            byte[] bytes = Base64.decode(encryptedText);\n            result = new String(cipher.doFinal(bytes), ENCODING);\n        } catch (Exception e) {\n            logger.log(Level.WARNING, e.getMessage(), e);\n        }\n        return result;\n    }\n", "public final String toString ( ) { StringBuffer buf = new StringBuffer ( ) ; int sz = this . initNodes . size ( ) ; if ( sz != NUM_ ) { boolean seen = this . getInitNode ( NUM_ ) . getVisited ( ) ; for ( int i = NUM_ ; i < this . initNodes . size ( ) ; i ++ ) { BEGraphNode node = this . getInitNode ( i ) ; node . toString ( buf , seen ) ; } } return buf . toString ( ) ; }", "private void linkCommentToNode ( Node n ) { StringBuilder sb = new StringBuilder ( ) ; String sep = STR_ ; for ( Comment c : group ) { String comment = filterCommentContent ( c . type , c . value ) ; if ( ! comment . isEmpty ( ) ) { sb . append ( sep ) . append ( comment ) ; sep = STR_ ; } } if ( sb . toString ( ) . length ( ) > NUM_ ) { nodeComments . putComment ( n , sb . toString ( ) ) ; } group . clear ( ) ; forceAddCommentToGroup ( ) ; }", "public ModelAndView ( String view ) { super ( ) ; this . model = CollectionKit . newHashMap ( ) ; this . view = view ; }", "\tprotected void addPrivatePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Folder_private_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_Folder_private_feature\", \"_UI_Folder_type\"),\n\t\t\t\t DxlPackage.Literals.FOLDER__PRIVATE,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public boolean canDelete ( ReviewDb db , Change . Status status ) throws OrmException { if ( ! isVisible ( db ) ) { return BOOL_ ; } switch ( status ) { case DRAFT : return ( isOwner ( ) || getRefControl ( ) . canDeleteDrafts ( ) ) ; case NEW : case ABANDONED : return isAdmin ( ) ; case MERGED : default : return BOOL_ ; } }", "protected Object resolveTypeReference(TypeMirror mirror, Map<String, Object> boundTypes) {\n        TypeKind kind = mirror.getKind();\n        switch (kind) {\n            case TYPEVAR:\n                TypeVariable tv = (TypeVariable) mirror;\n                String name = tv.toString();\n                if (boundTypes.containsKey(name)) {\n                    return boundTypes.get(name);\n                } else {\n                    return modelUtils.resolveTypeReference(mirror);\n                }\n            case WILDCARD:\n                WildcardType wcType = (WildcardType) mirror;\n                TypeMirror extendsBound = wcType.getExtendsBound();\n                TypeMirror superBound = wcType.getSuperBound();\n                if (extendsBound == null && superBound == null) {\n                    return Object.class.getName();\n                } else if (extendsBound != null) {\n                    return resolveTypeReference(typeUtils.erasure(extendsBound), boundTypes);\n                } else if (superBound != null) {\n                    return resolveTypeReference(superBound, boundTypes);\n                } else {\n                    return resolveTypeReference(typeUtils.getWildcardType(extendsBound, superBound), boundTypes);\n                }\n            case ARRAY:\n                ArrayType arrayType = (ArrayType) mirror;\n                Object reference = resolveTypeReference(arrayType.getComponentType(), boundTypes);\n                if (reference instanceof Class) {\n                    Class componentType = (Class) reference;\n                    return Array.newInstance(componentType, 0).getClass();\n                } else if (reference instanceof String) {\n                    return reference + \"[]\";\n                } else {\n                    return modelUtils.resolveTypeReference(mirror);\n                }\n            case BOOLEAN:\n            case BYTE:\n            case CHAR:\n            case DOUBLE:\n            case FLOAT:\n            case INT:\n            case LONG:\n            case SHORT:\n                Optional<Class> type = ClassUtils.getPrimitiveType(mirror.toString());\n                if (type.isPresent()) {\n                    return type.get();\n                } else {\n                    throw new IllegalStateException(\"Unknown primitive type: \" + mirror.toString());\n                }\n            default:\n                return modelUtils.resolveTypeReference(mirror);\n        }\n    }", "public static List<String> generateXVals(int from,int to){\n  List<String> xvals=new ArrayList<String>();\n  for (int i=from; i < to; i++) {\n    xvals.add(\"\" + i);\n  }\n  return xvals;\n}\n", "    public void fire() throws IllegalActionException {\n        super.fire();\n        //convert token\n        Token token = ((BitwidthDirector) getDirector()).newTokenInstance(value.getToken());\n        output.send(0, quantize(token));\n    }\n", "    protected void notifyListeners(AlgorithmEvent algorithmEvent) {\n        for(AlgorithmListener listener : listeners)\n            listener.handleAlgorithmEvent(algorithmEvent);\n    }\n", "protected void checkCollectionType ( Collection c ) { if ( type != null ) { for ( Iterator iter = c . iterator ( ) ; iter . hasNext ( ) ; ) { Object element = iter . next ( ) ; checkType ( element ) ; } } }", "    public void drawPath(GeneralPath path, PathStyle style) {\n        GeneralPath pathClone = (GeneralPath) path.clone();\n        pathClone.transform(((PlaneVisometry)visometry).at);\n        style.draw(gr, pathClone, selected);\n    }\n", "public static TungstenProperties loadShardProperties ( File shardMap ) throws ReplicatorException { if ( shardMap == null ) { shardMap = new File ( System . getProperty ( STR_ ) + File . separatorChar + STR_ + File . separatorChar + STR_ ) ; } if ( ! shar", "public MethodHandleConstant addMethodHandle(MethodHandleType mhType,\n                                              ConstantPoolEntry cpEntry)\n  {\n    MethodHandleConstant entry = getMethodHandle(mhType, cpEntry);\n\n    if (entry != null) {\n      return entry;\n    }\n\n    entry = new MethodHandleConstant(this, _entries.size(), mhType, cpEntry);\n\n    addConstant(entry);\n\n    return entry;\n  }", "public NameFileComparator ( ) { this . caseSensitivity = IOCase . SENSITIVE ; }", "private static Episode parseNextEpisode(Element eEpisode) {\n        Episode episode = new Episode();\n\n        episode.setId(DOMHelper.getValueFromElement(eEpisode, \"id\"));\n        episode.setCombinedEpisodeNumber(DOMHelper.getValueFromElement(eEpisode, \"Combined_episodenumber\"));\n        episode.setCombinedSeason(DOMHelper.getValueFromElement(eEpisode, \"Combined_season\"));\n        episode.setDvdChapter(DOMHelper.getValueFromElement(eEpisode, \"DVD_chapter\"));\n        episode.setDvdDiscId(DOMHelper.getValueFromElement(eEpisode, \"DVD_discid\"));\n        episode.setDvdEpisodeNumber(DOMHelper.getValueFromElement(eEpisode, \"DVD_episodenumber\"));\n        episode.setDvdSeason(DOMHelper.getValueFromElement(eEpisode, \"DVD_season\"));\n        episode.setDirectors(parseList(DOMHelper.getValueFromElement(eEpisode, \"Director\"), \"|,\"));\n        episode.setEpImgFlag(DOMHelper.getValueFromElement(eEpisode, \"EpImgFlag\"));\n        episode.setEpisodeName(DOMHelper.getValueFromElement(eEpisode, \"EpisodeName\"));\n        episode.setEpisodeNumber(getEpisodeValue(eEpisode, \"EpisodeNumber\"));\n        episode.setFirstAired(DOMHelper.getValueFromElement(eEpisode, FIRST_AIRED));\n        episode.setGuestStars(parseList(DOMHelper.getValueFromElement(eEpisode, \"GuestStars\"), \"|,\"));\n        episode.setImdbId(DOMHelper.getValueFromElement(eEpisode, IMDB_ID));\n        episode.setLanguage(DOMHelper.getValueFromElement(eEpisode, LANGUAGE));\n        episode.setOverview(DOMHelper.getValueFromElement(eEpisode, OVERVIEW));\n        episode.setProductionCode(DOMHelper.getValueFromElement(eEpisode, \"ProductionCode\"));\n        episode.setRating(DOMHelper.getValueFromElement(eEpisode, RATING));\n\n        episode.setSeasonNumber(getEpisodeValue(eEpisode, \"SeasonNumber\"));\n\n        episode.setWriters(parseList(DOMHelper.getValueFromElement(eEpisode, \"Writer\"), \"|,\"));\n        episode.setAbsoluteNumber(DOMHelper.getValueFromElement(eEpisode, \"absolute_number\"));\n        String filename = DOMHelper.getValueFromElement(eEpisode, \"filename\");\n        if (StringUtils.isNotBlank(filename)) {\n            episode.setFilename(URL_BANNER + filename);\n        }\n\n        episode.setLastUpdated(DOMHelper.getValueFromElement(eEpisode, LAST_UPDATED));\n        episode.setSeasonId(DOMHelper.getValueFromElement(eEpisode, \"seasonid\"));\n        episode.setSeriesId(DOMHelper.getValueFromElement(eEpisode, \"seriesid\"));\n\n        episode.setAirsAfterSeason(getEpisodeValue(eEpisode, \"airsafter_season\"));\n        episode.setAirsBeforeEpisode(getEpisodeValue(eEpisode, \"airsbefore_episode\"));\n        episode.setAirsBeforeSeason(getEpisodeValue(eEpisode, \"airsbefore_season\"));\n\n        return episode;\n    }", "public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY){\n  if (mFlywheel && !mFinished) {\n    float oldVel=getCurrVelocity();\n    float dx=(float)(mFinalX - mStartX);\n    float dy=(float)(mFinalY - mStartY);\n    float hyp=(float)Math.hypot(dx,dy);\n    float ndx=dx / hyp;\n    float ndy=dy / hyp;\n    float oldVelocityX=ndx * oldVel;\n    float oldVelocityY=ndy * oldVel;\n    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {\n      velocityX+=oldVelocityX;\n      velocityY+=oldVelocityY;\n    }\n  }\n  mMode=FLING_MODE;\n  mFinished=false;\n  float velocity=(float)Math.hypot(velocityX,velocityY);\n  mVelocity=velocity;\n  mDuration=getSplineFlingDuration(velocity);\n  mStartTime=AnimationUtils.currentAnimationTimeMillis();\n  mStartX=startX;\n  mStartY=startY;\n  float coeffX=velocity == 0 ? 1.0f : velocityX / velocity;\n  float coeffY=velocity == 0 ? 1.0f : velocityY / velocity;\n  double totalDistance=getSplineFlingDistance(velocity);\n  mDistance=(int)(totalDistance * Math.signum(velocity));\n  mMinX=minX;\n  mMaxX=maxX;\n  mMinY=minY;\n  mMaxY=maxY;\n  mFinalX=startX + (int)Math.round(totalDistance * coeffX);\n  mFinalX=Math.min(mFinalX,mMaxX);\n  mFinalX=Math.max(mFinalX,mMinX);\n  mFinalY=startY + (int)Math.round(totalDistance * coeffY);\n  mFinalY=Math.min(mFinalY,mMaxY);\n  mFinalY=Math.max(mFinalY,mMinY);\n}\n", "public static void link ( final COperandTreeNode parent , final COperandTreeNode child ) { Preconditions . checkNotNull ( child , STR_ ) ; Preconditions . checkNotNull ( parent , STR_ ) ; parent . children . add ( child ) ; child . parent = parent ; }", "protected void setIdentifer(final String _identifier)\n        throws EFapsException\n    {\n        if (!_identifier.equals(this.identifier)) {\n\n            ConnectionResource res = null;\n            try {\n                res = Context.getThreadContext().getConnectionResource();\n\n                final StringBuffer cmd = new StringBuffer().append(\"update \")\n                                .append(JCRStoreResource.TABLENAME_STORE).append(\" set \")\n                                .append(JCRStoreResource.COLNAME_IDENTIFIER).append(\"=? \")\n                                .append(\"where ID =\").append(getGeneralID());\n\n                final PreparedStatement stmt = res.prepareStatement(cmd.toString());\n                try {\n                    stmt.setString(1, _identifier);\n                    stmt.execute();\n                } finally {\n                    stmt.close();\n                }\n                this.identifier = _identifier;\n            } catch (final EFapsException e) {\n                throw e;\n            } catch (final SQLException e) {\n                throw new EFapsException(JDBCStoreResource.class, \"write.SQLException\", e);\n            }\n        }\n    }", "    public void setHeader(String name, String value) {\n//\t\tint pos = 0;\n//\t\tint crlfpos = 0;\n\t\tPattern pattern = null;\n\n\t\tif (getHeaders(name) == null && value != null) {\n\t\t\t// header value not found, append to end\n\t\t\taddHeader(name, value);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tpattern = getHeaderRegex(name);\n\t\t\t\tMatcher matcher = pattern.matcher(mMsgHeader);\n\t\t\t\tif (value == null) {\n\t\t\t\t\t// delete header\n\t\t\t\t\tmMsgHeader = matcher.replaceAll(\"\");\n\t\t\t\t} else {\n\t\t\t\t\t// replace header\n\t\t\t\t\tString newString = name + \": \" + value + mLineDelimiter;\n\t\t\t\t\tmMsgHeader = matcher.replaceAll(newString);\n\t\t\t\t}\n\n\t\t\t\t// set into hashtable\n\t\t\t\treplaceInternalHeaderFields(name, value);\n\t\t\t\t\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\t\t\t\n\t\t}\n    }\n", "private void fillZChoice(ZaurusChoice zc, String tab, String col) {\n\n        Statement stmt = null;\n\n        try {\n            if (cConn == null) {\n                return;\n            }\n\n            stmt = cConn.createStatement();\n\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM \" + tab\n                                             + \" ORDER BY \" + col);\n            ResultSetMetaData rsmd            = rs.getMetaData();\n            int               numberOfColumns = rsmd.getColumnCount();\n            int               colIndex        = rs.findColumn(col);\n\n            while (rs.next()) {\n                String tmp = \"\";\n\n                for (int i = 1; i <= numberOfColumns; i++) {\n                    if (i > 1) {\n                        tmp += \"; \";\n                    }\n\n                    tmp += rs.getString(i);\n                }    // end of for (int i=1; i<=numberOfColumns; i++)\n\n                zc.add(tmp, rs.getString(colIndex));\n            }\n\n            rs.close();\n        } catch (SQLException e) {\n            System.out.println(\"SQL Exception: \" + e.getMessage());\n        } finally {\n            try {\n                if (stmt != null) {\n                    stmt.close();\n                }\n            } catch (SQLException e) {}\n        }\n    }", "public List<CommitStatus> getCommitStatuses(Object projectIdOrPath, String sha,\n            CommitStatusFilter filter, int page, int perPage) throws GitLabApiException {\n\n        if (projectIdOrPath == null) {\n            throw new RuntimeException(\"projectIdOrPath cannot be null\");\n        }\n\n        if (sha == null || sha.trim().isEmpty()) {\n            throw new RuntimeException(\"sha cannot be null\");\n        }\n\n        MultivaluedMap<String, String> queryParams = (filter != null ?\n                filter.getQueryParams(page, perPage).asMap() : getPageQueryParams(page, perPage));\n        Response response = get(Response.Status.OK, queryParams, \n                \"projects\", this.getProjectIdOrPath(projectIdOrPath), \"repository\", \"commits\", sha, \"statuses\");\n        return (response.readEntity(new GenericType<List<CommitStatus>>() {}));\n    }", "public static Set < String > readStopwordsFile ( File file , boolean lowercase ) throws IOException { return readStopwordsPath ( file . toPath ( ) , lowercase ) ; }", "public Map<String, String> getCodeToPropIdMap() {\n        Map<String, String> result\n                = new HashMap<>(this.codeToPropIdMap);\n        return result;\n    }", "@Override\n    public long[] validatePartitioning(long[] tableIds, byte[] hashinatorConfig) {\n        ByteBuffer paramBuffer = m_ee.getParamBufferForExecuteTask(4 + (8 * tableIds.length) + 4 + hashinatorConfig.length);\n        paramBuffer.putInt(tableIds.length);\n        for (long tableId : tableIds) {\n            paramBuffer.putLong(tableId);\n        }\n        paramBuffer.put(hashinatorConfig);\n\n        ByteBuffer resultBuffer = ByteBuffer.wrap(m_ee.executeTask( TaskType.VALIDATE_PARTITIONING, paramBuffer));\n        long mispartitionedRows[] = new long[tableIds.length];\n        for (int ii = 0; ii < tableIds.length; ii++) {\n            mispartitionedRows[ii] = resultBuffer.getLong();\n        }\n        return mispartitionedRows;\n    }", "\tpublic boolean hasPreferredPlace() {\n\t\treturn prefPlace != null;\n\t}\n", "public void delete(String name){\n  set(name,\"-delete-\",-30);\n}\n", "protected boolean computeOffset(CacheDataSet cache) {\n        // offset computation: update offset for all items in the cache\n        float startDataOffset = getStartingOffset((cache.getTotalSizeWithPadding()));\n        float layoutOffset = getLayoutOffset();\n\n        boolean inBounds = startDataOffset < -layoutOffset;\n\n        for (int pos = 0; pos < cache.count(); ++pos) {\n            int id = cache.getId(pos);\n            if (id != -1) {\n                float endDataOffset = cache.setDataAfter(id, startDataOffset);\n                inBounds = inBounds &&\n                        endDataOffset > layoutOffset &&\n                        startDataOffset < -layoutOffset;\n                startDataOffset = endDataOffset;\n                Log.d(LAYOUT, TAG, \"computeOffset [%d] = %f\" , id, cache.getDataOffset(id));\n            }\n        }\n\n        return inBounds;\n    }", "private void startTransaction ( ) throws SQLException { transactionStarted = BOOL_ ; conn . setAutoCommit ( BOOL_ ) ; }", "public void setParamEditContext(String editContext) {\n\n        m_paramEditContext = editContext;\n        CmsObject cms = getCms();\n        if ((cms != null) && (editContext != null)) {\n            cms.getRequestContext().setAttribute(ATTRIBUTE_EDITCONTEXT, editContext);\n        }\n    }", "private void interpretSub ( final ReilInstruction instruction ) { final Pair < Boolean , BigInteger > firstValue = loadLongValue ( instruction . getFirstOperand ( ) ) ; final Pair < Boolean , BigInteger > secondValue = loadLongValue ( instruction . getSecondOperand ( ) ) ; if ( firstValue . first ( ) && secondValue . first ( ) ) { final OperandSize targetSize = instruction . getThirdOperand ( ) . getSize ( ) ; final BigInteger result = firstValue . second ( ) . subtract ( secondValue . second ( ) ) . and ( getTruncateMask ( targetSize ) ) ; final String targetRegister = instruction . getThirdOperand ( ) . getValue ( ) ; setRegister ( targetRegister , result , targetSize , ReilRegisterStatus . DEFINED ) ; } else { assert BOOL_ ; } }", "public static Object findObject(PageContext pageContext, String scope, String name, String property, boolean beanRequired, boolean valueRequired) throws JspTagException {\n\t\ttry {\n\t\t\t// Check the name\n\t\t\tif(name==null) throw new AttributeRequiredException(\"name\");\n\n\t\t\t// Find the bean\n\t\t\tObject bean;\n\t\t\tif(scope==null) bean = pageContext.findAttribute(name);\n\t\t\telse bean = pageContext.getAttribute(name, Scope.getScopeId(scope));\n\n\t\t\t// Check required\n\t\t\tif(bean==null) {\n\t\t\t\tif(beanRequired) {\n\t\t\t\t\t// null and required\n\t\t\t\t\tif(scope==null) throw new LocalizedJspTagException(ApplicationResources.accessor, \"PropertyUtils.bean.required.nullScope\", name);\n\t\t\t\t\telse throw new LocalizedJspTagException(ApplicationResources.accessor, \"PropertyUtils.bean.required.scope\", name, scope);\n\t\t\t\t} else {\n\t\t\t\t\t// null and not required\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(property==null) {\n\t\t\t\t\t// No property lookup, use the bean directly\n\t\t\t\t\treturn bean;\n\t\t\t\t} else {\n\t\t\t\t\t// Find the property\n\t\t\t\t\tObject value = org.apache.commons.beanutils.PropertyUtils.getProperty(bean, property);\n\t\t\t\t\tif(valueRequired && value==null) {\n\t\t\t\t\t\t// null and required\n\t\t\t\t\t\tif(scope==null) throw new LocalizedJspTagException(ApplicationResources.accessor, \"PropertyUtils.value.required.nullScope\", property, name);\n\t\t\t\t\t\telse throw new LocalizedJspTagException(ApplicationResources.accessor, \"PropertyUtils.value.required.scope\", property, name, scope);\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch(IllegalAccessException | InvocationTargetException | NoSuchMethodException err) {\n\t\t\tthrow new JspTagException(err);\n\t\t}\n\t}", "public int getIndexMax() {\n        int indexMax = 0;\n        double max = getEigenvalue(0).getMagnitude2();\n\n        final int N = getNumberOfEigenvalues();\n        for( int i = 1; i < N; i++ ) {\n            double m = getEigenvalue(i).getMagnitude2();\n  ", "public void write(final String filename){\n  try (PrintStream stream=new PrintStream(new File(filename))){\n    write(stream);\n  }\n catch (  FileNotFoundException e) {\n    e.printStackTrace();\n  }\n}\n", "public Future < ReplDBMSHeader > watchForProcessedSequenceNumber ( long seqno ) throws InterruptedException { return stages . getLast ( ) . watchForProcessedSequenceNumber ( seqno , BOOL_ ) ; }", "protected CMapFormat6 ( short language ) { super ( ( short ) NUM_ , language ) ; }", "public Query like(int docNum) throws IOException {\n  Map<String,Map<String,Flt>> fieldTermFreq=retrieveTerms(docNum);\n  BooleanQuery query=new BooleanQuery();\n  for (  String fieldName : fieldTermFreq.keySet()) {\n    Map<String,Flt> words=fieldTermFreq.get(fieldName);\n    PriorityQueue<USField> queue=createQueue(fieldName,words);\n    buildQueryForField(fieldName,queue,query);\n  }\n  return query;\n}\n", "public static BufferedReader newReader ( File file , String charset ) throws FileNotFoundException , UnsupportedEncodingException { return new BufferedReader ( new InputStreamReader ( new FileInputStream ( file ) , charset ) ) ; }", "public void setCategoryDisplayOptions(\n        String displayCategoriesByRepository,\n        String displayCategorySelectionCollapsed) {\n\n        m_displayCategoriesByRepository = Boolean.parseBoolean(displayCategoriesByRepository);\n        m_displayCategorySelectionCollapsed = Boolean.parseBoolean(displayCategorySelectionCollapsed);\n    }", "public int generate(byte[] output,byte[] additionalInput,boolean predictionResistant){\n  if (_isTDEA) {\n    if (_reseedCounter > TDEA_RESEED_MAX) {\n      return -1;\n    }\n    if (Utils.isTooLarge(output,TDEA_MAX_BITS_REQUEST / 8)) {\n      throw new IllegalArgumentException(\"Number of bits per request limited to \" + TDEA_MAX_BITS_REQUEST);\n    }\n  }\n else {\n    if (_reseedCounter > AES_RESEED_MAX) {\n      return -1;\n    }\n    if (Utils.isTooLarge(output,AES_MAX_BITS_REQUEST / 8)) {\n      throw new IllegalArgumentException(\"Number of bits per request limited to \" + AES_MAX_BITS_REQUEST);\n    }\n  }\n  if (predictionResistant) {\n    CTR_DRBG_Reseed_algorithm(_entropySource,additionalInput);\n    additionalInput=null;\n  }\n  if (additionalInput != null) {\n    additionalInput=Block_Cipher_df(additionalInput,_seedLength);\n    CTR_DRBG_Update(additionalInput,_Key,_V);\n  }\n else {\n    additionalInput=new byte[_seedLength];\n  }\n  byte[] out=new byte[_V.length];\n  _engine.init(true,new KeyParameter(expandKey(_Key)));\n  for (int i=0; i <= output.length / out.length; i++) {\n    int bytesToCopy=((output.length - i * out.length) > out.length) ? out.length : (output.length - i * _V.length);\n    if (bytesToCopy != 0) {\n      addOneTo(_V);\n      _engine.processBlock(_V,0,out,0);\n      System.arraycopy(out,0,output,i * out.length,bytesToCopy);\n    }\n  }\n  CTR_DRBG_Update(additionalInput,_Key,_V);\n  _reseedCounter++;\n  return output.length * 8;\n}\n", "    public LAView setView(LAView newView) {\n        LAView oldView = this.view;\n        if (oldView != null) {\n            getContentPane().remove(oldView);\n        }\n        this.view = (LAView) newView;\n        getContentPane().add(this.view);\n        view.setViewContainer(this);\n        return oldView;\n    }\n", "private static ArrayList<Object> readAmfStrictArray(ParsableByteArray data){\n  int count=data.readUnsignedIntToInt();\n  ArrayList<Object> list=new ArrayList<>(count);\n  for (int i=0; i < count; i++) {\n    int type=readAmfType(data);\n    list.add(readAmfData(data,type));\n  }\n  return list;\n}\n", "public static int curandGenerateNormal(curandGenerator generator, Pointer outputPtr, long n, float mean, float stddev)\r\n    {\r\n        return checkResult(curandGenerateNormalNative(generator, outputPtr, n, mean, stddev));\r\n    }", "@BeforeClass public static void loadProperties() throws Exception {\n  URL url=ClassLoader.getSystemResource(PROP_FILE_NAME);\n  s_logsvcProps.load(url.openStream());\n}\n", "public String TO_NUMBER(BigDecimal number,int displayType){\n  if (number == null)   return \"NULL\";\n  BigDecimal result=number;\n  int scale=DisplayType.getDefaultPrecision(displayType);\n  if (scale > number.scale()) {\n    try {\n      result=number.setScale(scale,BigDecimal.ROUND_HALF_UP);\n    }\n catch (    Exception e) {\n    }\n  }\n  return result.toString();\n}\n", "protected void sectionInitialize ( FormToolkit toolkit ) { GridData gd ; Composite sectionArea = ( Composite ) getSection ( ) . getClient ( ) ; sectionArea . setLayout ( new GridLayout ( NUM_ , BOOL_ ) ) ; gd = new GridData ( GridData . FILL_BOTH ) ; gd .", "private Map<String, Class<? extends Command<? extends CLIContext>>> loadCommands() throws CLIInitException{\r\n\t\tMap<String, Class<? extends Command<? extends CLIContext>>> commands =\r\n\t\t\tnew HashMap<String, Class<? extends Command<? extends CLIContext>>>();\r\n\t\t\r\n\t\tDiscoverer discoverer = new ClasspathDiscoverer();\r\n\t\tCLIAnnotationDiscovereryListener discoveryListener = new CLIAnnotationDiscovereryListener(new String[] {CLICommand.class.getName()});\r\n\t\tdiscoverer.addAnnotationListener(discoveryListener);\r\n\t\tdiscoverer.discover(true, true, true, true, true);\r\n\t\t\r\n\t\tloadCommands(commands, discoveryListener.getDiscoveredClasses());\r\n\t\t\r\n\t\tif (commands.isEmpty()) {\r\n\t\t\tthrow new CLIInitException(\"No commands could be loaded.\");\r\n\t\t}\r\n\t\t\r\n\t\treturn commands;\r\n\t}", "public static String formatTimeWithMillis(Date date){\nsynchronized (dateMillisFormat) {\n    return dateMillisFormat.format(date);\n  }\n}\n", "public static void appendColumns(StringBuilder s,String[] columns){\n  int n=columns.length;\n  for (int i=0; i < n; i++) {\n    String column=columns[i];\n    if (column != null) {\n      if (i > 0) {\n        s.append(\", \");\n      }\n      s.append(column);\n    }\n  }\n  s.append(' ');\n}\n", "void addIncomingEdge ( INaviEdge edge ) ;", "    public TaxonParentGroup getTaxonParentGroup(TaxonParentFilter filter) {\n        \n        int numConnections = myNumConnections;\n        \n        TaxonParentGroup [] groups = new TaxonParentGroup[numConnections];\n        \n        for (int i=0; i<numConnections; i++) {\n            DBConnection connection = (DBConnection) myConnections.get(i);\n            \n            try {\n                groups[i] = connection.getTaxonParentGroup(filter);\n            }\n            catch (Exception e) {\n                myLogger.error(\"getTaxonParentGroup: error getting group from connection: \" + connection.toString() + \"error text: \" + e.toString());\n                ExceptionUtils.logStackTrace(e, 10, myLogger, Level.ERROR);\n            }\n        }\n        \n        return new DefaultTaxonParentGroup(groups);\n        \n    }\n", "public void init ( ) throws ServletException { }", "synchronized void clueless ( ) throws Exception { synchronized ( this ) { this . wait ( ) ; } }", "public static boolean isNetworkUri(Uri uri){\n  final String scheme=getSchemeOrNull(uri);\n  return HTTPS_SCHEME.equals(scheme) || HTTP_SCHEME.equals(scheme);\n}\n", "private void dble() {\n            Assert.check(shared == 0);\n            Entry[] oldtable = table;\n            Entry[] newtable = new Entry[oldtable.length * 2];\n            for (ScopeImpl s = this; s != null; s = s.next) {\n                if (s.table == oldtable) {\n                    Assert.check(s == this || s.shared != 0);\n                    s.table = newtable;\n                    s.hashMask = newtable.length - 1;\n                }\n            }\n            int n = 0;\n            for (int i = oldtable.length; --i >= 0; ) {\n                Entry e = oldtable[i];\n                if (e != null && e != sentinel) {\n                    table[getIndex(e.sym.name)] = e;\n                    n++;\n                }\n            }\n            // We don't need to update nelems for shared inherited scopes,\n            // since that gets handled by leave().\n            nelems = n;\n        }", "public void setShrink(double shrink)\n    {\n        if(shrink >= 1 || shrink <= 0 || Double.isNaN(shrink) || Double.isInfinite(shrink) )\n            throw new ArithmeticException(\"Shrinkage constant must be > 0 and < 1, not \" + shrink);\n        this.shrink = shrink;\n    }", "public void setLexicons(java.util.Collection<LexiconDescription> lexicons) {\n        if (lexicons == null) {\n            this.lexicons = null;\n            return;\n        }\n\n        this.lexicons = new java.util.ArrayList<LexiconDescription>(lexicons);\n  ", "protected void checkMIForGivenData ( double [ ] [ ] var1 , double [ ] [ ] var2 , int [ ] kNNs , double [ ] expectedResults ) throws Exception { MutualInfoCalculatorMultiVariateKraskov miCalc = getNewCalc ( NUM_ ) ; for ( int kIndex = NUM_ ; kIndex < kNNs ", "public static void putDouble(String property,double val){\n  SIMBRAIN_PREFERENCES.putDouble(property,val);\n}\n", "public AnnotationVisitor visitTypeAnnotation ( int typeRef , TypePath typePath , String desc , boolean visible ) { if ( api < Opcodes . ASM5 ) { throw new RuntimeException ( ) ; } if ( fv != null ) { return fv . visitTypeAnnotation ( typeRef , typePath , ", "public InsertStrategy getOverridenStrategy(AbstractEntityProperty<?> property) {\n\n        final InsertStrategy insertStrategy = OverridingOptional\n                .from(this.insertStrategy)\n                .defaultValue(property.insertStrategy())\n                .get();\n\n        if (LOGGER.isTraceEnabled()) {\n            LOGGER.trace(format(\"Get runtime insert strategy for entity %s : %s\",\n                    property.entityClass.getCanonicalName(), insertStrategy.name()));\n        }\n\n        return insertStrategy;\n    }", "public DocumentPath childPath() {\n    if (pathElements.size() <= 1) {\n      return null;\n    }\n    return new DocumentPath(this.pathElements.subList(pathElements.size() - 1, pathElements.size()));\n  }", "private boolean isProjectPageEmpty(Eml eml){\n  if (eml.getProject() != null) {\n    Project project=eml.getProject();\n    List<Agent> personnelList=project.getPersonnel();\n    StudyAreaDescription area=project.getStudyAreaDescription();\n    String title=project.getTitle();\n    String funding=project.getFunding();\n    String design=project.getDesignDescription();\n    String desc=area.getDescriptorValue();\n    return (Strings.isNullOrEmpty(title) && Strings.isNullOrEmpty(funding) && Strings.isNullOrEmpty(design)&& Strings.isNullOrEmpty(desc)&& isAgentsListEmpty(personnelList));\n  }\n  return false;\n}\n", "\tpublic DcBranchXmlType createDcBranch() {\n\t\tDcBranchXmlType branch = this.getFactory().createDcBranchXmlType();\n\t\tintiBranchData(branch);\n\t\treturn branch;\n\t}\n", "private static int nameToNum ( String nm , Vector names ) { for ( int i = NUM_ ; i < names . size ( ) ; i ++ ) { if ( names . elementAt ( i ) . equals ( nm ) ) { return i ; } } return - NUM_ ; }", "    public void addWrapper(String jspUri, JspServletWrapper jsw) {\n        jsps.put(jspUri, jsw);\n        addJspDependencies(jsw);\n    }\n", "int getIntProperty(String name, int defaultValue) {\n        String val = getProperty(name);\n        if (val == null) {\n            return defaultValue;\n        }\n        try {\n            return Integer.parseInt(val.trim());\n        } catch (Exception ex) {\n            return defaultValue;\n        }\n    }", "public void add(CoreCmd ccmd) throws GondolaException {\n  if (cmember.masterId >= 0) {\n    throw new GondolaException(GondolaException.Code.SLAVE_MODE,cmember.memberId);\n  }\n  commandQueue.add(ccmd);\n}\n", "    public void setValue(boolean value) {\n        if (!isRendered()) {\n            setAttribute(\"value\", value, true);\n        } else {\n            setValueRendered(value);\n\t\t}\n\t}\n", "private InternalDistributedMember waitForNodeOrCreateBucket(RetryTimeKeeper retryTime,EntryEventImpl event,Integer bucketId){\n  InternalDistributedMember newNode;\n  if (retryTime.overMaximum()) {\n    PRHARedundancyProvider.timedOut(this,null,null,\"allocate a bucket\",retryTime.getRetryTime());\n  }\n  retryTime.waitForBucketsRecovery();\n  newNode=getNodeForBucketWrite(bucketId.intValue(),retryTime);\n  if (newNode == null) {\n    newNode=createBucket(bucketId.intValue(),getEntrySize(event),retryTime);\n  }\n  return newNode;\n}\n", "public void start(){\n  managedPorts.add(createPort());\n  fixNames();\n  ports.addObserver(observer,false);\n}\n", "@Override\n\tprotected void transform(final XtendConstructor source, final JvmGenericType container) {\n\t\tfinal String constructorName = container.getSimpleName();\n\n\t\t// Special case: static constructor\n\t\tif (source.isStatic()) {\n\t\t\tfinal JvmOperation staticConstructor = this.typesFactory.createJvmOperation();\n\t\t\tcontainer.getMembers().add(staticConstructor);\n\t\t\tthis.associator.associatePrimary(source, staticConstructor);\n\t\t\tstaticConstructor.setSimpleName(Utils.STATIC_CONSTRUCTOR_NAME);\n\t\t\tstaticConstructor.setVisibility(JvmVisibility.PRIVATE);\n\t\t\tstaticConstructor.setStatic(true);\n\t\t\tstaticConstructor.setReturnType(this._typeReferenceBuilder.typeRef(Void.TYPE));\n\t\t\tsetBody(staticConstructor, source.getExpression());\n\t\t\tcopyAndCleanDocumentationTo(source, staticConstructor);\n\t\t\treturn;\n\t\t}\n\n\t\tfinal GenerationContext context = getContext(container);\n\n\t\tfinal boolean isVarArgs = Utils.isVarArg(source.getParameters());\n\n\t\t// Generate the unique identifier of the constructor.\n\t\tfinal QualifiedActionName actionKey = this.sarlSignatureProvider.createConstructorQualifiedName(container);\n\n\t\t// Generate all the constructor signatures related to the constructor to create.\n\t\tfinal InferredPrototype constructorSignatures = this.sarlSignatureProvider.createPrototypeFromSarlModel(\n\t\t\t\tactionKey,\n\t\t\t\tUtils.isVarArg(source.getParameters()), source.getParameters());\n\n\t\t// Generate the main Java constructor.\n\t\tfinal JvmConstructor constructor = this.typesFactory.createJvmConstructor();\n\t\tcontainer.getMembers().add(constructor);\n\t\tthis.associator.associatePrimary(source, constructor);\n\t\tconstructor.setSimpleName(constructorName);\n\t\tsetVisibility(constructor, source);\n\t\tconstructor.setVarArgs(isVarArgs);\n\n\t\t// Generate the parameters\n\t\tfinal List<InferredStandardParameter> paramList = constructorSignatures.getOriginalParameterTypes();\n\t\ttranslateSarlFormalParameters(\n\t\t\t\tcontext,\n\t\t\t\tconstructor, container, isVarArgs,\n\t\t\t\tsource.getParameters(), false, paramList);\n\n\t\t// Generate additional information (type parameters, exceptions...)\n\t\tcopyAndFixTypeParameters(source.getTypeParameters(), constructor);\n\t\tfor (final JvmTypeReference exception : source.getExceptions()) {\n\t\t\tconstructor.getExceptions().add(this.typeBuilder.cloneWithProxies(exception));\n\t\t}\n\t\ttranslateAnnotationsTo(source.getAnnotations(), constructor);\n\n\t\t// Set the body.\n\t\tsetBody(constructor, source.getExpression());\n\n\t\t// The signature definition of the constructor.\n\t\tfinal ActionParameterTypes sigKey = this.sarlSignatureProvider.createParameterTypesFromJvmModel(\n\t\t\t\tisVarArgs, constructor.getParameters());\n\n\t\t// Update the list of generated constructors\n\t\tif (context != null) {\n\t\t\tcontext.getGeneratedConstructors().put(sigKey, constructor);\n\t\t}\n\n\t\tcopyAndCleanDocumentationTo(source, constructor);\n\n\t\tfinal Runnable differedGeneration  = () -> {\n\t\t\t// Generate the Java functions that correspond to the action with the parameter default values applied.\n\t\t\tfor (final Entry<ActionParameterTypes, List<InferredStandardParameter>> entry\n\t\t\t\t\t: constructorSignatures.getInferredParameterTypes().entrySet()) {\n\n\t\t\t\tif (context == null || !context.getGeneratedConstructors().containsKey(entry.getKey())) {\n\t\t\t\t\tfinal List<InferredStandardParameter> otherSignature = entry.getValue();\n\t\t\t\t\t// Generate the additional constructor that is invoke the main constructor previously generated.\n\t\t\t\t\tfinal JvmConstructor constructor2 = SARLJvmModelInferrer.this.typesFactory.createJvmConstructor();\n\t\t\t\t\tcontainer.getMembers().add(constructor2);\n\t\t\t\t\tcopyAndCleanDocumentationTo(source, constructor2);\n\t\t\t\t\tconstructor2.setSimpleName(container.getSimpleName());\n\t\t\t\t\tconstructor2.setVisibility(constructor.getVisibility());\n\t\t\t\t\tconstructor2.setVarArgs(isVarArgs);\n\n\t\t\t\t\tfinal List<String> args = translateSarlFormalParametersForSyntheticOperation(\n\t\t\t\t\t\t\tconstructor2, container, isVarArgs, otherSignature);\n\n\t\t\t\t\taddAnnotationSafe(\n\t\t\t\t\t\t\tconstructor2, DefaultValueUse.class,\n\t\t\t\t\t\t\tconstructorSignatures.getFormalParameterTypes().toString());\n\t\t\t\t\tappendGeneratedAnnotation(constructor2, context);\n\n\t\t\t\t\tsetBody(constructor2, toStringConcatenation(\n\t\t\t\t\t\t\t\"this(\" //$NON-NLS-1$\n\t\t\t\t\t\t\t+ IterableExtensions.join(args, \", \") //$NON-NLS-1$\n\t\t\t\t\t\t\t+ \");\")); //$NON-NLS-1$\n\n\t\t\t\t\t// Update the list of the generated constructors.\n\t\t\t\t\tif (context != null) {\n\t\t\t\t\t\tcontext.getGeneratedConstructors().put(entry.getKey(), constructor2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (context != null) {\n\t\t\tcontext.getPreFinalizationElements().add(differedGeneration);\n\t\t\tcontext.setActionIndex(context.getActionIndex() + 1);\n\t\t\tcontext.incrementSerial(sigKey.hashCode());\n\t\t} else {\n\t\t\tdifferedGeneration.run();\n\t\t}\n\t}", "private static void doSort(double[] a,int left,int right,double[] work,int workBase,int workLen){\n  if (right - left < QUICKSORT_THRESHOLD) {\n    sort(a,left,right,true);\n    return;\n  }\n  int[] run=new int[MAX_RUN_COUNT + 1];\n  int count=0;\n  run[0]=left;\n  for (int k=left; k < right; run[count]=k) {\n    if (a[k] < a[k + 1]) {\n      while (++k <= right && a[k - 1] <= a[k])       ;\n    }\n else     if (a[k] > a[k + 1]) {\n      while (++k <= right && a[k - 1] >= a[k])       ;\n      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {\n        double t=a[lo];\n        a[lo]=a[hi];\n        a[hi]=t;\n      }\n    }\n else {\n      for (int m=MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {\n        if (--m == 0) {\n          sort(a,left,right,true);\n          return;\n        }\n      }\n    }\n    if (++count == MAX_RUN_COUNT) {\n      sort(a,left,right,true);\n      return;\n    }\n  }\n  if (run[count] == right++) {\n    run[++count]=right;\n  }\n else   if (count == 1) {\n    return;\n  }\n  byte odd=0;\n  for (int n=1; (n<<=1) < count; odd^=1)   ;\n  double[] b;\n  int ao, bo;\n  int blen=right - left;\n  if (work == null || workLen < blen || workBase + blen > work.length) {\n    work=new double[blen];\n    workBase=0;\n  }\n  if (odd == 0) {\n    System.arraycopy(a,left,work,workBase,blen);\n    b=a;\n    bo=0;\n    a=work;\n    ao=workBase - left;\n  }\n else {\n    b=work;\n    ao=0;\n    bo=workBase - left;\n  }\n  for (int last; count > 1; count=last) {\n    for (int k=(last=0) + 2; k <= count; k+=2) {\n      int hi=run[k], mi=run[k - 1];\n      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {\n        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {\n          b[i + bo]=a[p++ + ao];\n        }\n else {\n          b[i + bo]=a[q++ + ao];\n        }\n      }\n      run[++last]=hi;\n    }\n    if ((count & 1) != 0) {\n      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;\n      run[++last]=right;\n    }\n    double[] t=a;\n    a=b;\n    b=t;\n    int o=ao;\n    ao=bo;\n    bo=o;\n  }\n}\n", "protected boolean usesDOTable() throws Exception {\n        Connection conn = getConnection();\n        DatabaseMetaData dmd = conn.getMetaData();\n\n        // check if we need to update old table\n        ResultSet rs = dmd.getTables(null, null, \"do%\", null);\n        while (rs.next()) {\n            if (rs.getString(\"TABLE_NAME\").equals(\"do\")) {\n                rs.close();\n                return true;\n            }\n        }\n        rs.close();\n        return false;\n    }", "public X509CertImpl(InputStream in) throws CertificateException {\n  DerValue der=null;\n  BufferedInputStream inBuffered=new BufferedInputStream(in);\n  try {\n    inBuffered.mark(Integer.MAX_VALUE);\n    der=readRFC1421Cert(inBuffered);\n  }\n catch (  IOException ioe) {\n    try {\n      inBuffered.reset();\n      der=new DerValue(inBuffered);\n    }\n catch (    IOException ioe1) {\n      throw new CertificateException(\"Input stream must be \" + \"either DER-encoded bytes \" + \"or RFC1421 hex-encoded \"+ \"DER-encoded bytes: \"+ ioe1.getMessage(),ioe1);\n    }\n  }\n  try {\n    parse(der);\n  }\n catch (  IOException ioe) {\n    signedCert=null;\n    throw new CertificateException(\"Unable to parse DER value of \" + \"certificate, \" + ioe,ioe);\n  }\n}\n", "private void parseHeaderValidation(Map<Object, Object> props) {\n        Object value = props.get(HttpConfigConstants.PROPNAME_HEADER_VALIDATION);\n        if (null != value) {\n            this.bHeaderValidation = convertBoolean(value);\n            if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {\n                Tr.event(tc, \"Config: header validation is \" + isHeaderValidationEnabled());\n            }\n        }\n    }", "public List < String > localText ( ) { final List < String > result = new ArrayList < String > ( ) ; for ( Object child : this . children ) { if ( ! ( child instanceof Node ) ) { result . add ( child . toString ( ) ) ; } } return result ; }", "public static List<? extends Element> childElementList(Element element){\n  if (element == null)   return null;\n  List<Element> elements=new LinkedList<Element>();\n  Node node=element.getFirstChild();\n  if (node != null) {\n    do {\n      if (node.getNodeType() == Node.ELEMENT_NODE) {\n        Element childElement=(Element)node;\n        elements.add(childElement);\n      }\n    }\n while ((node=node.getNextSibling()) != null);\n  }\n  return elements;\n}\n", "public final void println(float f) throws IOException {\n  println(String.valueOf(f));\n}\n", "\tpublic boolean isPDFSelected() {\n\n\t\treturn pdfButton.getSelection();\n\t}\n", "    public boolean intersects(double x, double y, double w, double h) {\n        return transShape.intersects(x, y, w, h);\n    }\n", "public static WebElement swipeDownWaitVisible ( AppiumDriver driver , AugmentedFunctions < ? > augmentedFunctions , By swipeElement , By elementVisible , int waitTimeInSeconds , int quantity , int pressInMilliSeconds ) { Preconditions . checkNotNull ( dri", "    public int getDefaultCloseOperation() {\n        if (isBusy()) {\n            return WindowConstants.DO_NOTHING_ON_CLOSE;\n        } else {\n            return super.getDefaultCloseOperation();\n        }\n    }\n", "private void update(boolean forced){\n  long now=System.currentTimeMillis();\n  long diff=now - this.lastUpdateRt;\n  double dur=(now - startTime) / 1000.0;\n  if (forced || (diff > UI_UP_INTERVAL)) {\n    double ssps=((SimClock.getTime() - lastUpdate) * 1000) / diff;\n    print(String.format(\"%.1f %d: %.2f 1/s\",dur,SimClock.getIntTime(),ssps));\n    this.lastUpdateRt=System.currentTimeMillis();\n    this.lastUpdate=SimClock.getTime();\n  }\n}\n", "private Shape createThumbShape(int width,int height,boolean upper){\n  Path2D path=new Path2D.Float();\n  if (slider.getOrientation() == JSlider.HORIZONTAL) {\n    float d=0.5F * width;\n    path.moveTo(d,0);\n    path.lineTo((upper ? width : 0.0),d);\n    path.lineTo((upper ? width : 0.0),height);\n    path.lineTo(0.5 * width,height);\n  }\n else {\n    float d=0.5F * height;\n    path.moveTo(0,d);\n    path.lineTo(d,(upper ? height : 0.0));\n    path.lineTo(width,(upper ? height : 0.0));\n    path.lineTo(height,0.5 * height);\n  }\n  path.closePath();\n  return path;\n}\n", "    public Attributes additionallyAtts( Object obj ) {\n\n        if (obj instanceof OzoneObject) {\n            ObjectID objID = ((OzoneObject)obj).container().id();\n            String name = ((OzoneObject)obj).container().name();\n            AttributesImpl atts = new AttributesImpl();\n            atts.addAttribute( \"\", ATTR_OBJID, ATTR_OBJID, \"long\", \"\" + objID.value() );\n\n            if (name != null) {\n                atts.addAttribute( \"\", ATTR_OBJID, ATTR_OBJNAME, \"String\", name );\n            }\n\n            return atts;\n        } else {\n            return null;\n        }\n    }\n", "public String eatId ( ) { if ( ! matchId ( ) ) throw new BadSyntaxException ( ) ; String s = tok . sval ; nextToken ( ) ; return s ; }", "public static sms_profile update(nitro_service client, sms_profile resource) throws Exception\r\n\t{\r\n\t\tresource.validate(\"modify\");\r\n\t\treturn ((sms_profile[]) resource.update_resource(client))[0];\r\n\t}", "  public void setMouseCoords(int x, int y) {\n    tmouseX = x;\n    tmouseY = y;\n    // Apply relative rotation/scale to these values\n    updateLocalMouse();\n    \n  }\n", "public static Date parseAWSDate(String date) {\n\t\tif (date == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn TIME_FORMATTER.parseDateTime(date).toDate();\n\t}", "private void parseExternalsConfig ( final Node node , final ConfigSettings config ) { String name , value ; Node nnode ; NodeList list = node . getChildNodes ( ) ; int length = list . getLength ( ) ; for ( int i = NUM_ ; i < length ; i ++ ) { nnode = list . item ( i ) ; name = nnode . getNodeName ( ) . toUpperCase ( ) ; if ( name . equals ( KEY_SEVENZIP ) ) { value = nnode . getChildNodes ( ) . item ( NUM_ ) . getNodeValue ( ) ; value = value . substring ( NUM_ , value . length ( ) - NUM_ ) ; config . setConfigParameter ( ConfigurationKeys . PATH_PROGRAM_7ZIP , value ) ; } } }", "private ResourceXMLParser.Entity createEntity(final INodeEntry node) {\n        final ResourceXMLParser.Entity ent = new ResourceXMLParser.Entity();\n        ent.setName(node.getNodename());\n        ent.setResourceType(NODE_ENTITY_TAG);\n        \n\n        if(null!=node.getAttributes()){\n            for (final String setName : node.getAttributes().keySet()) {\n                String value = node.getAttributes().get(setName);\n                ent.setProperty(setName, value);\n            }\n        }\n        if(null!=node.getTags()){\n            ent.setProperty(\"tags\", joinStrings(node.getTags(), \", \"));\n        }\n\n\n\n        return ent;\n    }", "public void overrideResourceName ( String resourceName ) ;", "public static base_response add(nitro_service client, linkset resource) throws Exception {\n\t\tlinkset addresource = new linkset();\n\t\taddresource.id = resource.id;\n\t\treturn addresource.add_resource(client);\n\t}", "public String getLogMessage(Split context) {\n\t\tcontext.getStopwatch().setAttribute(CallTreeCallback.ATTR_NAME_LAST, this);\n\t\treturn \"Call Tree:\\r\\n\" + rootNode.toString();\n\t}", "  public void unload(boolean rec, boolean del) {\n      _classifier = null;\n      super.unload(rec, del);\n  }\n", "private ArrayList < Rect > calculateAllBounds ( Paint paint ) { ArrayList < Rect > list = new ArrayList < Rect > ( ) ; final int count = mViewPager . getAdapter ( ) . getCount ( ) ; final int width = getWidth ( ) ; final int halfWidth = width / NUM_ ; for", "boolean isBuiltIn ( ) ;", "public Object [ ] keys ( ) { Object [ ] keys = new Object [ size ( ) ] ; K [ ] k = ( K [ ] ) _set ; for ( int i = k . length , j = NUM_ ; i -- > NUM_ ; ) { if ( k [ i ] != FREE && k [ i ] != REMOVED ) { keys [ j ++ ] = k [ i ] ; } } return keys ; }", "private boolean validateStartIp(Set ipSet) throws PolicyException {\n  if (ipSet.size() != 1) {\n    String args[]={START_IP};\n    throw new PolicyException(ResBundleUtils.rbName,\"multiple_values_not_allowed_for_property\",args,null);\n  }\n  Iterator startIpIter=ipSet.iterator();\n  try {\n    String startIpString=(String)startIpIter.next();\n    startIp=stringToIp(startIpString);\n  }\n catch (  ClassCastException ce) {\n    String args[]={START_IP};\n    throw new PolicyException(ResBundleUtils.rbName,\"property_is_not_a_String\",args,ce);\n  }\n  return true;\n}\n", "protected static List<Element> getElements(final Element parent, final String tagName) {\r\n        List<Element> elements = new ArrayList<Element>();\r\n        NodeList nodes = parent.getElementsByTagName(tagName);\r\n        for (int i = 0; i < nodes.getLength(); i++) {\r\n            org.w3c.dom.Node node = nodes.item(i);\r\n            if (node instanceof Element) {\r\n                elements.add(Element.class.cast(node));\r\n            }\r\n        }\r\n        return elements;\r\n    }", "@Override public void append(String s,TextAttributeSet attrs){\n  int beginIndex=stringBuilder.length();\n  int endIndex=beginIndex + s.length();\n  stringBuilder.append(s);\n  attributeList.add(new AttributeDefinition(attrs,beginIndex,endIndex));\n}\n", "public Restaurant clear ( ) { placeId = null ; name = null ; address = null ; phone = null ; url = null ; notes = null ; showGeofenceNotifications = BOOL_ ; return this ; }", "private <T> ApiFuture<T> extractFirst(ApiFuture<List<T>> results) {\n    return ApiFutures.transform(\n        results,\n        new ApiFunction<List<T>, T>() {\n          @Override\n          public T apply(List<T> results) {\n            return results.isEmpty() ? null : results.get(0);\n          }\n        });\n  }", "public void addValue(IFitsHeader key,boolean val) throws HeaderCardException {\n  addValue(key.key(),val,key.comment());\n}\n", "private void copyCarbonDataFileToCarbonStorePath(String localFileName) throws CarbonDataWriterException {\n  long copyStartTime=System.currentTimeMillis();\n  LOGGER.info(\"Copying \" + localFileName + \" --> \"+ carbonDataDirectoryPath);\n  try {\n    CarbonFile localCarbonFile=FileFactory.getCarbonFile(localFileName,FileFactory.getFileType(localFileName));\n    String carbonFilePath=carbonDataDirectoryPath + localFileName.substring(localFileName.lastIndexOf(File.separator));\n    copyLocalFileToCarbonStore(carbonFilePath,localFileName,CarbonCommonConstants.BYTEBUFFER_SIZE,getMaxOfBlockAndFileSize(fileSizeInBytes,localCarbonFile.getSize()));\n  }\n catch (  IOException e) {\n    throw new CarbonDataWriterException(\"Problem while copying file from local store to carbon store\");\n  }\n  LOGGER.info(\"Total copy time (ms) to copy file \" + localFileName + \" is \"+ (System.currentTimeMillis() - copyStartTime));\n}\n", "\tpublic RuleBasedScanner getJsonScanner(){\n\t\tif (fJsonScanner == null) {\n\t\t\tfJsonScanner = new JsonScanner(getColorProvider());\n\t\t}\n\t\treturn fJsonScanner;\n\t}\n", "    public boolean isAcessoPublico() {\n        return acessoPublico;\n    }\n", "public static BigDecimal uptimeNanosToTimestamp ( long nanos ) { if ( TimeUtil . secondsOffset == null ) { calibrateNanosConversion ( ) ; } else { long currentMillis1 = System . currentTimeMillis ( ) ; long currentNanos = System . nanoTime ( ) ; long curr", "protected Object convertValueFromXml(Class type,Object value){\n  if (value instanceof String && type.isPrimitive()) {\n    String tmp=(String)value;\n    if (type.equals(boolean.class)) {\n      if (tmp.equals(\"1\") || tmp.equals(\"0\")) {\n        tmp=(tmp.equals(\"1\")) ? \"true\" : \"false\";\n      }\n      value=new Boolean(tmp);\n    }\n else     if (type.equals(char.class)) {\n      value=new Character(tmp.charAt(0));\n    }\n else     if (type.equals(byte.class)) {\n      value=new Byte(tmp);\n    }\n else     if (type.equals(short.class)) {\n      value=new Short(tmp);\n    }\n else     if (type.equals(int.class)) {\n      value=new Integer(tmp);\n    }\n else     if (type.equals(long.class)) {\n      value=new Long(tmp);\n    }\n else     if (type.equals(float.class)) {\n      value=new Float(tmp);\n    }\n else     if (type.equals(double.class)) {\n      value=new Double(tmp);\n    }\n  }\n  return value;\n}\n", "public final void put(String key,int value){\n  if ((m_firstFree + 1) >= m_mapSize) {\n    m_mapSize+=m_blocksize;\n    String newMap[]=new String[m_mapSize];\n    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);\n    m_map=newMap;\n    int newValues[]=new int[m_mapSize];\n    System.arraycopy(m_values,0,newValues,0,m_firstFree + 1);\n    m_values=newValues;\n  }\n  m_map[m_firstFree]=key;\n  m_values[m_firstFree]=value;\n  m_firstFree++;\n}\n", "public KAlignerParameters2 setScoring(AffineGapAlignmentScoring<NucleotideSequence> scoring) {\n        if (scoring != null && !scoring.uniformBasicMatchScore())\n            throw new IllegalArgumentException(\"Use scoring with common match score.\");\n        this.scoring = scoring;\n        return this;\n    }", "\tpublic void defloat(Glyph floater, ViewModeGlyph floatingGlyph) {\n\t\tfloater.removeChild(floatingGlyph);\n\t\tviewModeGlyph = floatingGlyph;\n\t\tviewModeGlyph.setCoordBox(super.getCoordBox());\n\t}\n", "public void propertyChange(PropertyChangeEvent evt){\n  if (evt.getPropertyName() == MapBean.LayersProperty) {\n    listenToLayers((Layer[])evt.getNewValue());\n  }\n}\n", "protected ObjectData collectObjectData(\r\n        CmsCmisCallContext context,\r\n        CmsObject cms,\r\n        CmsResource resource,\r\n        CmsRelation relation,\r\n        Set<String> filter,\r\n        boolean includeAllowableActions,\r\n        boolean includeAcl) {\r\n\r\n        ObjectDataImpl result = new ObjectDataImpl();\r\n        ObjectInfoImpl objectInfo = new ObjectInfoImpl();\r\n\r\n        result.setProperties(collectProperties(cms, resource, relation, filter, objectInfo));\r\n\r\n        if (includeAllowableActions) {\r\n            result.setAllowableActions(collectAllowableActions(cms, resource, relation));\r\n        }\r\n\r\n        if (includeAcl) {\r\n            result.setAcl(collectAcl(cms, resource, true));\r\n            result.setIsExactAcl(Boolean.FALSE);\r\n        }\r\n\r\n        if (context.isObjectInfoRequired()) {\r\n            objectInfo.setObject(result);\r\n            context.getObjectInfoHandler().addObjectInfo(objectInfo);\r\n        }\r\n        return result;\r\n    }", "protected void serializeComment(Comment node) throws SAXException {\n  if ((fFeatures & COMMENTS) != 0) {\n    String data=node.getData();\n    if ((fFeatures & WELLFORMED) != 0) {\n      isCommentWellFormed(data);\n    }\n    if (fLexicalHandler != null) {\n      if (!applyFilter(node,NodeFilter.SHOW_COMMENT)) {\n        return;\n      }\n      fLexicalHandler.comment(data.toCharArray(),0,data.length());\n    }\n  }\n}\n", "public static PathImpl lookupNative(String url, Map<String,Object> attr)\n  {\n    return getPwd().lookupNative(url, attr);\n  }", "static public NodeModel parse(File f) throws SAXException, IOException, ParserConfigurationException {\n  return parse(f,true,true);\n}\n", "\tpublic void setNumeroPessoas (java.lang.String numeroPessoas) {\n\t\tthis.numeroPessoas = numeroPessoas;\n\t}\n", "    public Set keySet() {\n        return new KeySetView(this);\n    }\n", "private boolean internalOfferTask(AFrameTask task){\nsynchronized (mFrameTaskQueue) {\n    return mFrameTaskQueue.offer(task);\n  }\n}\n", "private int decodeTns(TemporalNoiseShaping tns,IndividualChannelStream ics){\n  final int is8=ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE ? 1 : 0;\n  final int tnsMaxOrder=is8 != 0 ? 7 : ac.oc[1].m4ac.objectType == AOT_AAC_MAIN ? 20 : 12;\n  for (int w=0; w < ics.numWindows; w++) {\n    tns.nFilt[w]=br.read(2 - is8);\n    if (tns.nFilt[w] != 0) {\n      int coefRes=br.read1();\n      for (int filt=0; filt < tns.nFilt[w]; filt++) {\n        tns.length[w][filt]=br.read(6 - 2 * is8);\n        tns.order[w][filt]=br.read(5 - 2 * is8);\n        if (tns.order[w][filt] > tnsMaxOrder) {\n          log.error(String.format(\"TNS filter order %d is greater than maximum %d\",tns.order[w][filt],tnsMaxOrder));\n          tns.order[w][filt]=0;\n          return AAC_ERROR;\n        }\n        if (tns.order[w][filt] > 0) {\n          tns.direction[w][filt]=br.readBool();\n          int coefCompress=br.read1();\n          int coefLen=coefRes + 3 - coefCompress;\n          int tmp2Idx=2 * coefCompress + coefRes;\n          for (int i=0; i < tns.order[w][filt]; i++) {\n            tns.coef[w][filt][i]=tns_tmp2_map[tmp2Idx][br.read(coefLen)];\n          }\n        }\n      }\n    }\n  }\n  return 0;\n}\n", "public boolean isFloat(Type type) throws Exception {\n  return isFloat(type.getType());\n}\n", "List<Configuration> removeMismatching() {\n\t\t// List mismatching\n\t\tList<InventoryEntry> mismatching = configs.values().stream()\n\t\t\t.filter(v->\n\t\t\t\t(v.getConfiguration().isPresent()\n\t\t\t\t&& !v.getIdentifier().equals(v.getConfiguration().get().getDetails().getKey()))\n\t\t\t).collect(Collectors.toList());\n\t\t// Remove from inventory\n\t\tmismatching.forEach(v->configs.remove(v.getIdentifier()));\n\t\t// Return the list of removed configurations \n\t\treturn mismatching.stream()\n\t\t\t\t.map(v->v.getConfiguration().get())\n\t\t\t\t.collect(Collectors.toList());\n\t}", "public GPUImage ( final Context context ) { if ( ! supportsOpenGLES2 ( context ) ) { throw new IllegalStateException ( STR_ ) ; } mContext = context ; mFilter = new GPUImageFilter ( ) ; mRenderer = new GPUImageRenderer ( mFilter ) ; }", "\tpublic ATObject base_object_taggedAs_(ATClosure code, ATTable types) throws InterpreterException {\n\t\treturn base_object_childOf_extends_taggedAs_mirroredBy_(\n\t\t\t\tcode,\n\t\t\t\tEvaluator.getNil(),\n\t\t\t\tNATBoolean._FALSE_ /* SHARES-A link */,\n\t\t\t\ttypes,\n\t\t\t\tbase_defaultMirror());\n\t}\n", "public void printMap(){\n  if (lastEntry > 0) {\n    VM.sysWrite(\"On-stack-replacement maps:\\n\");\n  }\n  for (int i=0; i <= lastEntry; i++) {\n    VM.sysWrite(\"Entry \" + i + \" : \");\n    int mapIndex=getOSRMapIndex(i);\n    VM.sysWrite(\"  mapIndex \" + mapIndex + \", \");\n    int mcOffset=getMCOffset(i);\n    VM.sysWrite(\"  mc \" + mcOffset + \", \");\n    int bcIndex=getBCIndex(i);\n    VM.sysWriteln(\"bc \" + bcIndex);\n    int regmap=osrMaps[mapIndex] & ~NEXT_BIT;\n    VM.sysWrite(\"regmap: \" + Integer.toBinaryString(regmap));\n    OSRMapIterator iterator=new OSRMapIterator(osrMaps,mapIndex);\n    while (iterator.hasMore()) {\n      VM.sysWrite(\"(\" + iterator.getValueType() + \",\"+ iterator.getValue()+ \")\");\n      iterator.moveToNext();\n    }\n    VM.sysWrite(\"\\n\");\n  }\n}\n", "\tpublic void deletePoint (Point p) {\n\t\tboolean deleted = points.remove (p);\n\t\tif (deleted) {\n\t\t\thasPoints.remove(awtPoint(p)) ;\n\t\t\tsetUpdated (false);\n\t\t}\n\t}\n", "public void push(AwtreeNode p_element){\n  if (p_element == null)   return;\n  node_list.add(p_element);\n}\n", "private void connectToRoomInternal(){\n  this.roomState=ConnectionState.NEW;\n  String endpoint=connectionParameters.roomId;\n  Matcher matcher=IP_PATTERN.matcher(endpoint);\n  if (!matcher.matches()) {\n    reportError(\"roomId must match IP_PATTERN for DirectRTCClient.\");\n    return;\n  }\n  String ip=matcher.group(1);\n  String portStr=matcher.group(matcher.groupCount());\n  int port;\n  if (portStr != null) {\n    try {\n      port=Integer.parseInt(portStr);\n    }\n catch (    NumberFormatException e) {\n      reportError(\"Invalid port number: \" + portStr);\n      return;\n    }\n  }\n else {\n    port=DEFAULT_PORT;\n  }\n  tcpClient=new TCPChannelClient(executor,this,ip,port);\n}\n", "\tpublic void saveData(String fname, int interval) {\n\t\tFile file = new File(Coordinator.getInstance().getCurrentDir(), fname);\n\t\tsaveData(file, interval);\n\t}\n", "    public EqualsBuilder append(long[] lhs, long[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            isEquals = false;\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            isEquals = false;\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }\n", "private void startFunction(){\n  function=new FunctionLibFunction();\n  insideFunction=true;\n}\n", "protected Properties loadProperties(File filehandle,String objName) throws SMSException {\n  FileInputStream fileistr=null;\n  try {\n    fileistr=new FileInputStream(filehandle);\n    Properties props=new CaseInsensitiveProperties();\n    props.load(fileistr);\n    return props;\n  }\n catch (  FileNotFoundException e) {\n    String errmsg=\"SMSFlatFileObject.loadProperties: \" + objName + \" File, \"+ filehandle.getPath()+ e.getMessage();\n    mDebug.error(\"SMSFlatFileObject.loadProperties\",e);\n    throw new ServiceNotFoundException(errmsg);\n  }\ncatch (  IOException e) {\n    String errmsg=\"SMSFlatFileObject.loadProperties: \" + objName + \" File, \"+ filehandle.getPath()+ e.getMessage();\n    mDebug.error(\"SMSFlatFileObject.loadProperties\",e);\n    throw new ServiceNotFoundException(errmsg);\n  }\ncatch (  IllegalArgumentException e) {\n    String errmsg=\"SMSFlatFileObject.loadProperties: \" + objName + \" File, \"+ filehandle.getPath()+ e.getMessage();\n    mDebug.error(\"SMSFlatFileObject.loadProperties\",e);\n    throw new ServiceNotFoundException(errmsg);\n  }\n finally {\n    if (fileistr != null) {\n      try {\n        fileistr.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\n}\n", "\tpublic String getName() {\n\t\tString ret;\n\n\t\tret = super.getName();\n\t\tif (null == ret) {\n\t\t\tif ((null != mPage) && (0 <= mNameStart)) {\n\t\t\t\tret = mPage.getText(mNameStart, mNameEnd);\n\t\t\t\tsetName(ret); // cache the value\n\t\t\t}\n\t\t}\n\n\t\treturn (ret);\n\t}\n", "public void addPickupRS(RollingStock rs){\n  int old=_pickupRS;\n  _pickupRS++;\n  if (Setup.isBuildAggressive()) {\n    setReserved(getReserved() - rs.getTotalLength());\n  }\n  setDirtyAndFirePropertyChange(\"trackPickupRS\",Integer.toString(old),Integer.toString(_pickupRS));\n}\n", "public static String makePath(String path, Clientlib.Type type, boolean minified, String hash) {\n        StringBuilder builder = new StringBuilder(path);\n        if (minified) builder.append(\".min\");\n        if (!path.endsWith(\".\" + type.name()) && type != Clientlib.Type.img && type != Clientlib.Type.link) {\n            builder.append('.').append(type.name()); // relevant for categories\n        }\n        return appendHashSuffix(builder.toString(), hash);\n    }", "public final void setItem(final int index, final int id, @NonNull final CharSequence title) {\n        Item item = new Item(id, title);\n        adapter.set(index, item);\n        adaptGridViewHeight();\n    }", "    public void overviewHorizontalMagnificationChange(double pNewMag, double pOldMag) {\n        try {\n            int width  = this.characterMetrics.width;\n            // re-run xform\n            this.mapTransform(pNewMag, width);\n            // and notify any interested listeners\n            this.fireGeometryChange();\n        }\n        catch (SeqdataException sx) {\n            Log.log(Log.ERROR, new Throwable(), sx,\n                    ResourceUtil.getMessage(TDBAssemblySupportingSequencesCoveragePanel.class, \"caught_seqdata_exception\"));\n        }\n    }\n", "public static csvserver_copolicy_binding[] get(nitro_service service, String name) throws Exception{\n\t\tcsvserver_copolicy_binding obj = new csvserver_copolicy_binding();\n\t\tobj.set_name(name);\n\t\tcsvserver_copolicy_binding response[] = (csvserver_copolicy_binding[]) obj.get_resources(service);\n\t\treturn response;\n\t}", "public String getNamespaceFromURI(String uri) {\n        String breakChar = \"/\";\n        if (uri.contains(\"#\")) {\n            breakChar = \"#\";\n        } else {\n            if (uri.substring(6).contains(\":\")) {\n                breakChar = \":\";\n            }\n        }\n\n        int pos = Math.min(uri.lastIndexOf(breakChar), uri.length());\n        return uri.substring(0, pos + 1);\n    }", "public StopRecordingResponse stopRecording(String sessionId) {\n        checkStringNotEmpty(sessionId, \"The parameter sessionId should NOT be null or empty string.\");\n        StopRecordingRequest request = new StopRecordingRequest().withSessionId(sessionId);\n        InternalRequest internalRequest = createRequest(HttpMethodName.PUT, request, LIVE_SESSION, sessionId);\n        internalRequest.addParameter(RECORDING, null);\n        return invokeHttpClient(internalRequest, StopRecordingResponse.class);\n    }", "\tpublic void setExecutingTitle() {\n\t\tfinal IEditorInput input = getEditorInput();\n\t\tsetPartName(\"Executing : \" + input.getName());\n\t\tsetTitleToolTip(input.getToolTipText());\n\t}\n", "\tpublic void process(Context context) throws Exception{\n\t\tInvocation invocation = new RestInvocation();\n\t\tinvocation.setContext(context);\n\t\tinvocation.setActionReached(false);\n\t\tinvocation.invoke();\n\t}\n", "\tpublic void back(double distance) {\n\t\tif (peer != null) {\n\t\t\tpeer.move(-distance);\n\t\t} else {\n\t\t\tuninitializedException(\"back\");\n\t\t}\n\t}\n", "    private void setDirection(Direction direction, C context) {\n        if (direction == Direction.OUTBOUND) {\n            context.put(MessageContext.MESSAGE_OUTBOUND_PROPERTY, true);\n        } else {\n            context.put(MessageContext.MESSAGE_OUTBOUND_PROPERTY, false);\n        }\n    }\n", "public void addPoller(PollRunnable task, long delay, TimeUnit timeUnit) {\n    ScheduledExecutorService service = executor.get();\n    if (service != null) {\n      service.scheduleWithFixedDelay(task, 0, delay, timeUnit);\n    } else {\n      throw new IllegalStateException(\n          \"you must start the scheduler before tasks can be submitted\");\n    }\n  }", "final public Token NEPrefixOpToken ( ) throws ParseException { Token t ; switch ( ( jj_ntk == - NUM_ ) ? jj_ntk ( ) : jj_ntk ) { case op_26 : t = jj_consume_token ( op_26 ) ; break ; case op_29 : t = jj_consume_token ( op_29 ) ; break ; case op_58 : t = j", "public static URI appendQuery(final URI uri,final Form query){\n  Reject.ifNull(uri);\n  if (query == null || query.isEmpty()) {\n    return uri;\n  }\n  if (uri.getRawQuery() != null) {\n    query.fromQueryString(uri.getRawQuery());\n  }\n  try {\n    return create(uri.getScheme(),uri.getRawUserInfo(),uri.getHost(),uri.getPort(),uri.getRawPath(),query.toQueryString(),uri.getRawFragment());\n  }\n catch (  final URISyntaxException e) {\n    throw new IllegalStateException(e);\n  }\n}\n", "public Expression whenScalar ( Value val1 , Value val2 ) { throw new RuntimeException ( STR_ ) ; }", "public Closure addPreInstantiateDelegate ( Closure delegate ) { getProxyBuilder ( ) . preInstantiateDelegates . addFirst ( delegate ) ; return delegate ; }", "public int listMaxChannel ( Database conn ) throws SQLException { ResultSet rs = null ; Statement statement = null ; int maxChannel = - NUM_ ; try { statement = conn . createStatement ( ) ; rs = statement . executeQuery ( selectMax ) ; while ( rs . next (", "private boolean staticFinalCorrectFormat(String name){\n  return name.equals(name.toUpperCase());\n}\n", "\tprivate void hashAndPrintBdayBits(byte[] identPublicKey) {\n\t\tDaviesMeyerDESRoque digester = new DaviesMeyerDESRoque();\n\t\tbyte[] hash = null;\n\t\tbyte[] hash2 = null;\n\t\ttry {\n\t\t\tdigester.doHash(origCert.toByteArray(), roqueCert.toByteArray());\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n", "public void fireVetoableChange(String name,Object oldValue,Object newValue) throws PropertyVetoException {\n  super.fireVetoableChange(name,oldValue,newValue);\n  beanContextChildSupport.fireVetoableChange(name,oldValue,newValue);\n}\n", "public static GetSignedUrlTaskParameters deserialize(String taskParameters) {\n        JaxbJsonSerializer<GetSignedUrlTaskParameters> serializer =\n            new JaxbJsonSerializer<>(GetSignedUrlTaskParameters.class);\n        try {\n            GetSignedUrlTaskParameters params =\n                serializer.deserialize(taskParameters);\n            // Verify expected parameters\n            if (null == params.getSpaceId() || params.getSpaceId().isEmpty()) {\n                throw new TaskDataException(\n                    \"Task parameter 'spaceId' may not be empty\");\n            } else if (null == params.getContentId() || params.getContentId().isEmpty()) {\n                throw new TaskDataException(\n                    \"Task parameter 'contentId' may not be empty\");\n            }\n\n            return params;\n        } catch (IOException e) {\n            throw new TaskDataException(\n                \"Unable to parse task parameters due to: \" + e.getMessage());\n        }\n    }", "public static final void readFully(InputStream is,byte[] buffer,int offset,int len) throws IOException {\n  int temp;\n  while (len > 0) {\n    temp=is.read(buffer,offset,len);\n    if (temp == -1)     throw new EOFException(\"Cannot read all \" + len + \" bytes needed to form this token!\");\n    offset+=temp;\n    len-=temp;\n  }\n}\n", "public void write(ObjectOutput out) throws IOException {\n  if (csf == null) {\n    out.writeByte(FORMAT_HOST_PORT);\n    out.writeUTF(host);\n    out.writeInt(port);\n  }\n else {\n    out.writeByte(FORMAT_HOST_PORT_FACTORY);\n    out.writeUTF(host);\n    out.writeInt(port);\n    out.writeObject(csf);\n  }\n}\n", "public static String prependUri(String baseUri, String uri) {\n        if (!uri.startsWith(\"/\")) {\n            uri = \"/\" + uri;\n        }\n        if (uri.length() == 1 && uri.charAt(0) == '/') {\n            uri = \"\";\n        }\n        uri = baseUri + uri;\n        return uri.replaceAll(\"[\\\\/]{2,}\", \"/\");\n    }", "public void startButtonChange(ActionEvent e){\n  firePropertyChangeEvent(new PropertyChangeEvent(this,\"start\",engine_started,start_button.isSelected()));\n  engine_started=start_button.isSelected();\n}\n", "@SuppressWarnings(\"unchecked\")\n    public static <T extends Serializable> T makeClone(T from) {\n        return (T) SerializationUtils.clone(from);\n    }", "private CommentManager ( final SQLProvider sqlProvider ) { provider = Preconditions . checkNotNull ( sqlProvider , STR_ ) ; provider . addListener ( providerListener ) ; }", "\tpublic void reset(ReferenceMode mode) {\n\t\tthis.clearReferences();\n\t\treferenceMode = mode;\n\t}\n", "public JSONObject actions(String reference, HashMap<String, String> params) throws JSONException {\n        return oClient.post(\"/offers/v1/contractors/offers/\" + reference, params);\n    }", "    protected void setUp() throws Exception {\n        super.setUp();\n        properties = new Properties();\n        properties.load( this.getClass().getResourceAsStream(\"remote.properties\") );\n    }\n", "protected void checkCacheVersion() {\n        // Be very aggressive in invalidating the cache.\n        boolean invalidate = true;\n        QueryRunner run = new QueryRunner(ds);\n        try {\n            long latestVersion = run.query(\"SELECT version FROM g", "public static boolean hasPossibleStaticProperty ( ClassNode candidate , String methodName ) { if ( ! methodName . startsWith ( STR_ ) && ! methodName . startsWith ( STR_ ) ) { return BOOL_ ; } String propName = getPropNameForAccessor ( methodName ) ; Prop", "public static GraphWithParameters regress(DataSet dataSet,Graph graph){\n  SemPm semPmEstDag=new SemPm(graph);\n  SemEstimator estimatorEstDag=new SemEstimator(dataSet,semPmEstDag);\n  estimatorEstDag.estimate();\n  SemIm semImEstDag=estimatorEstDag.getEstimatedSem();\n  GraphWithParameters estimatedGraph=new GraphWithParameters(semImEstDag,graph);\n  return estimatedGraph;\n}\n", "protected void renderARIAInvalid(FacesContext context, UIInput component) throws IOException {\n        if (!component.isValid()) {\n            ResponseWriter writer = context.getResponseWriter();\n            writer.writeAttribute(HTML.ARIA_INVALID, \"true\"", "public static ApplicationType fromString(String type){\n  if (type != null) {\n    for (    ApplicationType applicationType : ApplicationType.values()) {\n      if (type.equalsIgnoreCase(applicationType.type)) {\n        return applicationType;\n      }\n    }\n  }\n  return null;\n}\n", "public void checkAndSetupStreamsDrawer ( ) { setupListViewAdapter ( ) ; }", "private List < Integer > muxToList ( PageResultMultiplexer < Integer > mux ) throws InterruptedException , IOException { Integer n ; List < Integer > list = new ArrayList < > ( ) ; while ( BOOL_ ) { if ( ( n = mux . next ( ) ) == null ) { break ; } list .", "private void processPhiInsn(PhiInsn insn){\n  RegisterSpec result=insn.getResult();\n  int resultReg=result.getReg();\n  int category=result.getCategory();\n  RegisterSpecList sources=insn.getSources();\n  int sourcesSize=sources.size();\n  ArrayList<RegisterSpec> ssaRegs=new ArrayList<RegisterSpec>();\n  Multiset mapSet=new Multiset(sourcesSize + 1);\n  if (ssaRegsMapped.get(resultReg)) {\n    mapSet.add(mapper.oldToNew(resultReg));\n  }\n else {\n    ssaRegs.add(result);\n  }\n  for (int i=0; i < sourcesSize; i++) {\n    RegisterSpec source=sources.get(i);\n    SsaInsn def=ssaMeth.getDefinitionForRegister(source.getReg());\n    RegisterSpec sourceDef=def.getResult();\n    int sourceReg=sourceDef.getReg();\n    if (ssaRegsMapped.get(sourceReg)) {\n      mapSet.add(mapper.oldToNew(sourceReg));\n    }\n else {\n      ssaRegs.add(sourceDef);\n    }\n  }\n  for (int i=0; i < mapSet.getSize(); i++) {\n    int maxReg=mapSet.getAndRemoveHighestCount();\n    tryMapRegs(ssaRegs,maxReg,category,false);\n  }\n  int mapReg=findNextUnreservedRopReg(paramRangeEnd,category);\n  while (!tryMapRegs(ssaRegs,mapReg,category,false)) {\n    mapReg=findNextUnreservedRopReg(mapReg + 1,category);\n  }\n}\n", "public static StringBuffer readFromFile(String filePath){\n  return readFromFile(new File(filePath));\n}\n", "public void updatePostStatus(final long postId,\n                                final Post.Status status) throws SQLException {\n      Connection conn = null;\n      PreparedStatement stmt = null;\n      try {\n         conn = connectionSupplier.getConnection();\n         stmt = conn.prepareStatement(updatePostStatusSQL);\n         stmt.setString(1, status.toString().toLowerCase());\n         stmt.setLong(2, postId);\n         stmt.executeUpdate();\n      } finally {\n         SQLUtil.closeQuietly(conn, stmt);\n      }\n   }", "        public Element create(String prefix, Document doc) {\n            return new SVGOMFEImageElement(prefix, (AbstractDocument)doc);\n        }\n", "    public void clearSearchHighlights() {\n        if (this.searchHighlights != null) {\n            this.getHighlighter().removeAllHighlights();\n            this.searchHighlights = null;\n        }\n    }\n", "public void addLayersToBeanContext(List<Layer> layers){\n  BeanContext bc=getBeanContext();\n  if (bc == null || layers == null) {\n    return;\n  }\n  for (  Layer layer : layers) {\n    if (layer.getAddToBeanContext() && layer.getBeanContext() == null) {\n      bc.add(layer);\n    }\n  }\n}\n", "public void removeListener ( final IDebuggerTemplateManagerListener listener ) { listeners . removeListener ( listener ) ; }", "public void printUsage() {\n        String name = mainClass == null ? \"<MainClass>\" : mainClass.getName();\n        String usage = \"java \" + name + \" [OPTIONS]\";\n        final HelpFormatter formatter = new HelpFormatter();\n        formatter.setWidth(120);\n ", "public static void init ( Context context ) { if ( cameraManager == null ) { cameraManager = new CameraManager ( context ) ; } }", "@Override\n    public GetPipelineStateResult getPipelineState(GetPipelineStateRequest request) {\n        request = beforeClientExecution(request);\n        return executeGetPipelineState(request);\n    }", "public static int trim(SequenceQuality quality,\n                           int leftmostPosition, int rightmostPosition, int scanIncrement,\n                           boolean searchForRise,\n                           QualityTrimmerParameters parameters) {\n        return trim(quality, leftmostPosition, rightmostPosition, scanIncrement, searchForRise, parameters.getAverageQualityThreshold(), parameters.getWindowSize());\n    }", "public static boolean isJavaArtifact ( IResource resource ) { if ( resource == null || ( resource . getType ( ) != IResource . FILE ) ) { return BOOL_ ; } String ex = resource . getFileExtension ( ) ; if ( STR_ . equalsIgnoreCase ( ex ) || STR_ . equalsIg", "public void copyHeader(InputStream in,OutputStream out) throws IOException {\n  BufferedInputStream is=new BufferedInputStream(in);\n  byte[] buf=new byte[64 * 1024];\n  int bytesRead;\n  while ((bytesRead=is.read(buf)) != -1) {\n    out.write(buf,0,bytesRead);\n  }\n}\n", "    public boolean isDone() {\n        return this != PENDING && this != RUNNING;\n    }\n", "public void mergeWithExisting(Annotation existingAnnotation,Annotation... annotations){\n  mergeWithExisting(existingAnnotation,Arrays.asList(annotations));\n}\n", "public List<ValueSource> parseValueSourceList() throws SyntaxError {\n  List<ValueSource> sources=new ArrayList<>(3);\n  while (hasMoreArguments()) {\n    sources.add(parseValueSource(true));\n  }\n  return sources;\n}\n", "public static BigInteger convertVarNumberToBigInteger(byte[] rawData) {\n\t\tBigInteger result=BigInteger.ZERO;\n\t\tif (rawData!=null) {\n\t\t\tif (rawData.length>0) {\n\t\t\t\tresult = new BigInteger(1,rawData); // we know it is always positive\n\t\t\t}\n\t\t}\n\t\treturn resul", "public final static boolean isEjbQlIdentifier ( String s ) { if ( s == null || s . length ( ) == NUM_ ) { return BOOL_ ; } for ( int i = NUM_ ; i < ejbQlIdentifiers . length ; i ++ ) { if ( ejbQlIdentifiers [ i ] . equalsIgnoreCase ( s ) ) { return BOOL_ ", "private long minimalPlogIdInOpenTransactions ( ) { Collection < PlogTransaction > allTrans = openTransactions . values ( ) ; long minPlogId = Long . MAX_VALUE ; for ( PlogTransaction tran : allTrans ) { if ( tran . startPlogId > NUM_ && tran . startPlogId", "                              protected void validatePersonalNameSubject(PersonalNameSubjectType[] param){\n                             \n                              if ((param != null) && (param.length < 1)){\n                                throw new java.lang.RuntimeException();\n                              }\n                              \n                              }\n", "  public boolean containsSuspect() {\n    Response r;\n\n    for (int i = 0; i < _resps.size(); i++) {\n      r = (Response) _resps.get(i);\n\n      if (r.isError()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n", "\tpublic void updateFont() {\n\t\ttitle.setFont(gui.getMainFont().deriveFont(Font.BOLD));\n\t\tinitVariablesView();\n\t\tvalidate();\n\t\trepaint();\n\t}\n", "@Override\n    public File inputrc() {\n        if(inputrc == null) {\n            inputrc = new File(System.getProperty(\"user.home\")+Config.getPathSeparator()+\".inputrc\");\n        }\n        return inputrc;\n    }", "public void removeCovering(MapTile me){\n  covering.remove(me);\n  calculatePosition();\n}\n", "public byte[] encryptViaKek(byte[] content){\n  return cryptoViaKek(content,Cipher.ENCRYPT_MODE);\n}\n", "    public void refresh() {\n        graphView.repaint();\n        synchronized (nodePagePane) {\n            nodePagePane.repaint();\n        }\n        return;\n    }\n", "    public ItemIF addItem(ItemIF item) {\n        if (channel == null)\n            throw new NullPointerException(\"ChannelBuilder has not been set!\");\n\n        if (log.isInfoEnabled()) {\n            log.info(\"item: \" + item);\n        }\n        channel.addItem(item);\n        return item;\n    }\n", "    public String getSubtype() {\n        String subtype = this.getQualifiedNameMap().get(Fields.Subtype);\n        return (subtype != null ? subtype : \"\");\n    }\n", "public ScrollButtonDropShadowEffect ( ) { color = new Color ( NUM_ , NUM_ , NUM_ ) ; angle = NUM_ ; distance = NUM_ ; size = NUM_ ; opacity = NUM_ ; }", "public Validation duplicate() {\n  return new Validation(this);\n}\n", "public int rtf(XPathContext support)\n  {\n\n    int result = rtf();\n\n    if (DTM.NULL == result)\n    {\n      DTM frag = support.createDocumentFragment();\n\n      // %OPT%\n      frag.appendTextChild(str());\n\n      result = frag.getDocument();\n    }\n\n    return result;\n  }", "public void play(String terminal, String[] streamIds, int offset, net.sourceforge.gjtapi.media.RTCHolder[] holders, Dictionary optArgs) throws javax.telephony.media.MediaResourceException {\n\tRTC[] rtcs = new RTC[holders.length];\n\tfor (int i = 0; i < holders.length; i++) {\n\t\trtcs[i] = holders[i].getRTC();\n\t}\n\tthis.getDelegate().play(terminal, streamIds, offset, rtcs, this.fromSerializable(optArgs));\n}\n", "\t\tpublic Prescribe asPrescribe() {\n\t\t\treturn _prescribe;\n\t\t}\n", "public final boolean isDayChange() {\n        if (!getEventType().equals(ENTRY_INTERVAL_CHANGED)) {\n            return false;\n        }\n\n        Interval newInterval = entry.getInterval();\n        Interval oldInterval = getOldInterval();\n\n        ZonedDateTime newStart = newInterval.getStartZonedDateTime();\n        ZonedDateTime oldStart = oldInterval.getStartZonedDateTime();\n        if (!newStart.toLocalDate().equals(oldStart.toLocalDate())) {\n            return true;\n        }\n\n        ZonedDateTime newEnd = newInterval.getEndZonedDateTime();\n        ZonedDateTime oldEnd = oldInterval.getEndZonedDateTime();\n        return !newEnd.toLocalDate().equals(oldEnd.toLocalDate());\n\n    }", "    public boolean isGBC() {\n        return this.isGBC;\n    }\n", "synchronized int lookup(final Object tx,final boolean insert){\n  if (tx == null) {\n    throw new IllegalArgumentException(\"transaction object is null\");\n  }\n  Integer index=(Integer)mapping.get(tx);\n  if (index == null) {\n    if (insert) {\n      final int", "public long skip(long n) throws IOException {\n  if ((n % frameSize) != 0) {\n    n-=(n % frameSize);\n  }\n  if (frameLength != AudioSystem.NOT_SPECIFIED) {\n    if ((n / frameSize) > (frameLength - framePos)) {\n      n=(frameLength - framePos) * frameSize;\n    }\n  }\n  long temp=stream.skip(n);\n  if (temp % frameSize != 0) {\n    throw new IOException(\"Could not skip an integer number of frames.\");\n  }\n  if (temp >= 0) {\n    framePos+=temp / frameSize;\n  }\n  return temp;\n}\n", "public static void main(String[] args) {\n        try {\n            KeyGenerator kgen = KeyGenerator.getInstance(\"Blowfish\");\n            SecretKey skey = kgen.generateKey();\n            byte[] raw = skey.getEncoded();\n            String keyString = new String(Hex.encodeHex(raw));\n            System.out.println(\"storm -c \" + SECRET_KEY + \"=\" + keyString + \" -c \" + Config.TOPOLOGY_TUPLE_SERIALIZER + \"=\"\n                    + BlowfishTupleSerializer.class.getName() + \" ...\");\n        } catch (Exception ex) {\n            LOG.error(ex.getMessage());\n            ex.printStackTrace();\n        }\n    }", "@Override public boolean isRunning(){\n  return !paused;\n}\n", "DataImporter(){\n  this.handlerName=\"dataimport\";\n}\n", "public static Charset toCharset ( Charset charset ) { return charset == null ? Charset . defaultCharset ( ) : charset ; }", "public static Double toDouble(Object o) throws PageException {\n\tif (o instanceof Double) return (Double) o;\n\treturn new Double(toDoubleValue(o));\n\n    }", "    public Join addInnerJoin(String joinedTableName, String joinedTableAlias) {\n        return add(null, joinedTableName, joinedTableAlias, null, null);\n    }\n", "public void removeExceptionMessage(ExceptionMessage message){\n  m_exceptionMessages.removeElement(message);\n}\n", "public static final float[] resize(float[] a,int size){\n  if (a.length >= size)   return a;\n  float[] b=new float[size];\n  System.arraycopy(a,0,b,0,a.length);\n  return b;\n}\n", "public static <E> E argmin(Counter<E> c) {\r\n    double min = Double.POSITIVE_INFINITY;\r\n    E argmin = null;\r\n\r\n    for (E key : c.keySet()) {\r\n      double count = c.getCount(key);\r\n      if (argmin == null || count < min) {// || (count == min &&\r\n                                          // tieBreaker.compare(key, argmin) <\r\n                                          // 0)) {\r\n        min = count;\r\n        argmin = key;\r\n      }\r\n    }\r\n    return argmin;\r\n  }", "public ChangeModifiers remove ( ChangeModifiers modifiers ) { return createIfNeeded ( super . remove ( modifiers ) ) ; }", "public ServerManagedObjectDecodingException(ServerManagedObject<?> partialManagedObject,Collection<PropertyException> causes){\n  super(createMessage(partialManagedObject,causes));\n  this.partialManagedObject=partialManagedObject;\n  this.causes=Collections.unmodifiableList(new LinkedList<PropertyException>(causes));\n}\n", "public void decode(ByteBuffer buffer,int stride,Format fmt) throws IOException {\n  final int offset=buffer.position();\n  final int lineSize=((width * bitdepth + 7) / 8) * bytesPerPixel;\n  byte[] curLine=new byte[lineSize + 1];\n  byte[] prevLine=new byte[lineSize + 1];\n  byte[] palLine=(bitdepth < 8) ? new byte[width + 1] : null;\n  byte[] data=JTranscZlibTemp.uncompress(idat.toByteArray(),(lineSize + 1) * height);\n  for (int y=0; y < height; y++) {\n    FastMemory.copy(data,y * (lineSize + 1),curLine,0,(lineSize + 1));\n    unfilter(curLine,prevLine);\n    buffer.position(offset + y * stride);\nswitch (colorType) {\ncase COLOR_TRUECOLOR:\nswitch (fmt) {\ncase ABGR:\n        copyRGBtoABGR(buffer,curLine);\n      break;\ncase RGBA:\n    copyRGBtoRGBA(buffer,curLine);\n  break;\ncase BGRA:\ncopyRGBtoBGRA(buffer,curLine);\nbreak;\ncase RGB:\ncopy(buffer,curLine);\nbreak;\ndefault :\nthrow new UnsupportedOperationException(\"Unsupported format for this image\");\n}\nbreak;\ncase COLOR_TRUEALPHA:\nswitch (fmt) {\ncase ABGR:\ncopyRGBAtoABGR(buffer,curLine);\nbreak;\ncase RGBA:\ncopy(buffer,curLine);\nbreak;\ncase BGRA:\ncopyRGBAtoBGRA(buffer,curLine);\nbreak;\ncase RGB:\ncopyRGBAtoRGB(buffer,curLine);\nbreak;\ndefault :\nthrow new UnsupportedOperationException(\"Unsupported format for this image\");\n}\nbreak;\ncase COLOR_GREYSCALE:\nswitch (fmt) {\ncase LUMINANCE:\ncase ALPHA:\ncopy(buffer,curLine);\nbreak;\ndefault :\nthrow new UnsupportedOperationException(\"Unsupported format for this image\");\n}\nbreak;\ncase COLOR_GREYALPHA:\nswitch (fmt) {\ncase LUMINANCE_ALPHA:\ncopy(buffer,curLine);\nbreak;\ndefault :\nthrow new UnsupportedOperationException(\"Unsupported format for this image\");\n}\nbreak;\ncase COLOR_INDEXED:\nswitch (bitdepth) {\ncase 8:\npalLine=curLine;\nbreak;\ncase 4:\nexpand4(curLine,palLine);\nbreak;\ncase 2:\nexpand2(curLine,palLine);\nbreak;\ncase 1:\nexpand1(curLine,palLine);\nbreak;\ndefault :\nthrow new UnsupportedOperationException(\"Unsupported bitdepth for this image\");\n}\nswitch (fmt) {\ncase ABGR:\ncopyPALtoABGR(buffer,palLine);\nbreak;\ncase RGBA:\ncopyPALtoRGBA(buffer,palLine);\nbreak;\ncase BGRA:\ncopyPALtoBGRA(buffer,palLine);\nbreak;\ndefault :\nthrow new UnsupportedOperationException(\"Unsupported format for this image\");\n}\nbreak;\ndefault :\nthrow new UnsupportedOperationException(\"Not yet implemented\");\n}\nbyte[] tmp=curLine;\ncurLine=prevLine;\nprevLine=tmp;\n}\n}\n", "public static void fill ( long [ ] [ ] [ ] [ ] matrix , long value ) { int rows = matrix . length ; for ( int r = NUM_ ; r < rows ; r ++ ) { int cols = matrix [ r ] . length ; for ( int c = NUM_ ; c < cols ; c ++ ) { int height = matrix [ r ] [ c ] . leng", "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n  public Map<Class<?>, List<Object>> execSelectTableWithJoin(String preparedSql, Object[] searchKeys, Class<? extends D6Model>... modelClazz) {\n    log(\"#execSelectTableWithJoin preparedSql=\" + preparedSql + \" searchKeys=\" + searchKeys + \" modelClazz=\" + modelClazz);\n    final Map<Class<?>, List<Object>> resultMap = new HashMap<Class<?>, List<Object>>();\n\n    final List<ModelWrapper> modelList = new ArrayList<ModelWrapper>();\n\n    for (int i = 0; i < modelClazz.length; i++) {\n\n      @SuppressWarnings(\"unchecked\")\n      final ModelWrapper model = new ModelWrapper(modelClazz[i]);\n      modelList.add(model);\n    }\n\n    PreparedStatement preparedStmt = null;\n    ResultSet rs = null;\n\n    final Connection conn = createConnection();\n\n    try {\n\n      preparedStmt = conn.prepareStatement(preparedSql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);\n\n      final StringBuilder logSb = new StringBuilder();\n      if (searchKeys != null) {\n        logSb.append(\"/ \");\n        for (int i = 0; i < searchKeys.length; i++) {\n          //\n          Object object = searchKeys[i];\n\n          setObject((i + 1), preparedStmt, object);\n\n          logSb.append(\"key(\" + (i + 1) + \")=\" + searchKeys[i]);\n          logSb.append(\" \");\n        }\n      }\n\n      log(\"#execSelectTableWithJoin SQL=\" + preparedSql + \" \" + logSb.toString());\n\n      // execute SQL\n      rs = preparedStmt.executeQuery();\n\n      final ResultSetMetaData rsMetaData = rs.getMetaData();\n      final int numberOfColumns = rsMetaData.getColumnCount();\n      final List<String> columnNameList = new ArrayList<String>();\n\n      // cache column names of this result set\n      for (int i = 0; i < numberOfColumns; i++) {\n        String columnName = rsMetaData.getColumnName(i + 1);\n        columnNameList.add(columnName);\n      }\n\n      while (rs.next()) {\n\n        // Processing of a single resultset[begin]=============\n\n        for (int i = 0; i < numberOfColumns; i++) {\n\n          // Get from the current resultSet\n          final String columnName = columnNameList.get(i);\n\n          final Object value = rs.getObject(i + 1);\n\n          // Set the values to all the properties of model class (You\n          // know property is corresponding to each column of the DB)\n          // via modelWrapper\n          for (ModelWrapper model : modelList) {\n            // set value to model wrapper\n            model.setValue(columnName, value);\n          }\n        }\n\n        // Processing of a single resultset[end]=============\n\n        for (ModelWrapper model : modelList) {\n\n          final Class<?> modelClazzName = model.getClazz();\n\n          List<Object> modelObjectList = resultMap.get(modelClazzName);\n\n          // Generate the result list corresponding to a certain model\n          // class if the list have not been generated.\n          if (modelObjectList == null) {\n            modelObjectList = new ArrayList<Object>();\n            resultMap.put(modelClazzName, modelObjectList);\n          }\n\n          // Generates a model object having a property value held in\n          // the model wrapper, and stores the model object in the\n          // modelObjectList\n          final Object resultModelObject = model.getAsObject();\n          modelObjectList.add(resultModelObject);\n\n          model.initializeFieldMap();\n        }\n\n      }\n\n    } catch (Exception e) {\n      loge(\"#execSelectTableWithJoin General \", e);\n\n    } finally {\n      try {\n        if (rs != null) {\n          rs.close();\n        }\n        if (preparedStmt != null) {\n          preparedStmt.close();\n        }\n        if (conn != null) {\n          conn.close();\n        }\n      } catch (SQLException e) {\n        loge(\"#execSelectTableWithJoin SQLException \", e);\n      }\n    }\n\n    return resultMap;\n\n  }", "private Network createMatsimNetwork(String osmFile){\n  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());\n  NetworkSink networkGenerator=createAndInitNetworkSink(sc,TransformationFactory.getCoordinateTransformation(TransformationFactory.WGS84,TransformationFactory.WGS84));\n  TagFilter transitRelationsFilter=createTransitRelationsFilter();\n  TagFilter transitWaysFilter=createTransitWaysFilter();\n  FastXmlReader reader=new FastXmlReader(new File(osmFile),true,CompressionMethod.None);\n  reader.setSink(transitRelationsFilter);\n  transitRelationsFilter.setSink(transitWaysFilter);\n  transitWaysFilter.setSink(networkGenerator);\n  networkGenerator.setSink(new NullWriter());\n  reader.run();\n  NetworkCalcTopoType networkCalcTopoType=new NetworkCalcTopoType();\n  networkCalcTopoType.run(sc.getNetwork());\n  return sc.getNetwork();\n}\n", "    public boolean forEachEntry(TObjectIntProcedure procedure) {\n        Object[] keys = _set;\n        int[] values = _values;\n        for (int i = keys.length; i-- > 0;) {\n            if (keys[i] != null\n                && keys[i] != REMOVED\n                && ! procedure.execute(keys[i],values[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "private static void splitAdd ( final double a [ ] , final double b [ ] , final double ans [ ] ) { ans [ NUM_ ] = a [ NUM_ ] + b [ NUM_ ] ; ans [ NUM_ ] = a [ NUM_ ] + b [ NUM_ ] ; resplit ( ans ) ; }", "    public HTMLElement elements(String elementName) {\n\n        if (elementName == null) {\n            return null;\n        }\n\n        // locate the object whose name == this string.\n        String name = \"\";\n        HTMLElement element;\n        int j;\n\n        for (j = 0; j < elements.size(); j++) {\n\n            if (elementName.equalsIgnoreCase(elements.get(j).getName())) {\n                break;\n            }\n        }\n\n        if (j < elements.size()) {\n            return elements(j);\n        } else {\n            // THROW EXCEPTION\n            // Based on the HashMap, no exception is thrown but a null is returned which\n            // will cause a null pointer exception later.\n            return null;\n        }\n    }\n", "public static Label createWrapLabel ( Composite parent , String text , int hspan , int wrapwidth ) { Label l = new Label ( parent , SWT . NONE | SWT . WRAP ) ; l . setFont ( parent . getFont ( ) ) ; l . setText ( text ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = hspan ; gd . widthHint = wrapwidth ; l . setLayoutData ( gd ) ; return l ; }", "public Builder port(int port){\n  this.port=Integer.toString(port);\n  return this;\n}\n", "public Action(String content,int priority){\n  this.content=content.trim();\n  this.priority=priority;\n}\n", "public FileClassLoader ( final String filePrefix ) { this . filePrefix = filePrefix ; }", "    public void removeOption(Option option) {\n        this.removeObject(option);\n    }\n", "    public TreePath getPathForRow(int row) {\n\tif(row >= 0 && row < getRowCount()) {\n\t    if(root.getPathForRow(row, getRowCount(), info)) {\n\t\treturn info.getPath();\n\t    }\n\t}\n\treturn null;\n    }\n", "  public void stopUpdate() {\n    fReloadFeedQueue.cancel(false, false);\n  }\n", "private void addPinClickListener(final ClickEvent event){\n  eventBus.publish(this,DragEvent.HIDE_DROP_HINT);\n  checkifAlreadyPinned(event.getButton());\n  if (isTargetPinned) {\n    pinTarget(event.getButton());\n  }\n else {\n    unPinTarget(event.getButton());\n  }\n}\n", "public Db(Connection conn){\n  try {\n    this.conn=conn;\n    stat=conn.createStatement();\n  }\n catch (  SQLException e) {\n    throw convert(e);\n  }\n}\n", "protected abstract void endDocument ( PDDocument pdf ) throws IOException ;", "public static int nvgraphSetVertexData(\n        nvgraphHandle handle, \n        nvgraphGraphDescr descrG, \n        Pointer vertexData, \n        long setnum)\n    {\n        return checkResult(nvgraphSetVertexDataNative(handle, descrG, vertexData, setnum));\n    }", "public static JsonLocation expectObjectStart(JsonParser parser)\n        throws IOException, JsonReadException\n    {\n        if (parser.getCurrentToken() != JsonToken.START_OBJECT) {\n            throw new JsonReadException(\"expecting the start of an object (\\\"{\\\")\", parser.getTokenLocation());\n        }\n        JsonLocation loc = parser.getTokenLocation();\n        nextToken(parser);\n        return loc;\n    }", "public static int getIndexOfIgnoreCase (@Nullable final String sText,\n                                          final char cSearch,\n                                          @Nonnull final Locale aSortLocale)\n  {\n    return sText != null && sText.length () >= 1 ? sText.toLowerCase (aSortLocale)\n                                                        .indexOf (Character.toLowerCase (cSearch))\n                                                 : STRING_NOT_FOUND;\n  }", "public void write(String content,final boolean changeDelimiter) throws IOException {\n  checkClosed();\n  checkInit();\n  if (content == null) {\n    content=\"\";\n  }\n  if (!firstColumn) {\n    outputStream.write(userSettings.Delimiter);\n  }\n  boolean textQualify=userSettings.ForceQualifier;\n  if (changeDelimiter && content.length() > 0) {\n    content=content.replace(userSettings.Delimiter,REPLACEMENTS.get(userSettings.Delimiter));\n  }\n  if (!textQualify && userSettings.UseTextQualifier && (content.indexOf(userSettings.TextQualifier) > -1 || content.indexOf(userSettings.Delimiter) > -1 || !useCustomRecordDelimiter && (content.indexOf(Letters.LF) > -1 || content.indexOf(Letters.CR) > -1) || useCustomRecordDelimiter && content.indexOf(userSettings.RecordDelimiter) > -1 || firstColumn && content.length() > 0 && content.charAt(0) == userSettings.Comment || firstColumn && content.length() == 0)) {\n    textQualify=true;\n  }\n  if (userSettings.UseTextQualifier && !textQualify && content.length() > 0) {\n    final char firstLetter=content.charAt(0);\n    if (firstLetter == Letters.SPACE || firstLetter == Letters.TAB) {\n      textQualify=true;\n    }\n    if (!textQualify && content.length() > 1) {\n      final char lastLetter=content.charAt(content.length() - 1);\n      if (lastLetter == Letters.SPACE || lastLetter == Letters.TAB) {\n        textQualify=true;\n      }\n    }\n  }\n  if (textQualify) {\n    outputStream.write(userSettings.TextQualifier);\n    if (userSettings.EscapeMode == ESCAPE_MODE_BACKSLASH) {\n      content=replace(content,\"\" + Letters.BACKSLASH,\"\" + Letters.BACKSLASH + Letters.BACKSLASH);\n      content=replace(content,\"\" + userSettings.TextQualifier,\"\" + Letters.BACKSLASH + userSettings.TextQualifier);\n    }\n else {\n      content=replace(content,\"\" + userSettings.TextQualifier,\"\" + userSettings.TextQualifier + userSettings.TextQualifier);\n    }\n  }\n else   if (userSettings.EscapeMode == ESCAPE_MODE_BACKSLASH) {\n    content=replace(content,\"\" + Letters.BACKSLASH,\"\" + Letters.BACKSLASH + Letters.BACKSLASH);\n    content=replace(content,\"\" + userSettings.Delimiter,\"\" + Letters.BACKSLASH + userSettings.Delimiter);\n    if (useCustomRecordDelimiter) {\n      content=replace(content,\"\" + userSettings.RecordDelimiter,\"\" + Letters.BACKSLASH + userSettings.RecordDelimiter);\n    }\n else {\n      content=replace(content,\"\" + Letters.CR,\"\" + Letters.BACKSLASH + Letters.CR);\n      content=replace(content,\"\" + Letters.LF,\"\" + Letters.BACKSLASH + Letters.LF);\n    }\n    if (firstColumn && content.length() > 0 && content.charAt(0) == userSettings.Comment) {\n      if (content.length() > 1) {\n        content=\"\" + Letters.BACKSLASH + userSettings.Comment+ content.substring(1);\n      }\n else {\n        content=\"\" + Letters.BACKSLASH + userSettings.Comment;\n      }\n    }\n  }\n  outputStream.write(content);\n  if (textQualify) {\n    outputStream.write(userSettings.TextQualifier);\n  }\n  firstColumn=false;\n}\n", "\tpublic User getUser(String nick) {\n\t\tif (nick == null)\n\t\t\tthrow new NullPointerException(\"Can't get a null user\");\n\t\tUser user = null;\n\t\tfor (User curUser : _userChanInfo.getAValues())\n\t\t\tif (curUser.getNick().equals(nick))\n\t\t\t\tuser = curUser;\n\n\t\tif (user == null)\n\t\t\t//User does not exist, create one\n\t\t\t_userChanInfo.putA(user = new User(this, nick));\n\t\treturn user;\n\t}\n", "\tpublic int seeNumber(){\n\t\treturn number.getIntValue();\n\t}\n", "    public boolean equals(Object object) {\n        if (!(object instanceof ViewOperation)) {\n            return false;\n        }\n        return getOperation().equals(((ViewOperation) object).getOperation());\n    }\n", "public void setPeriod(int years, int months, int weeks, int days,\n                          int hours, int minutes, int seconds, int millis) {\n        super.setPeriod(years, months, weeks, days, hours, minutes, seconds, millis);\n    }", "private void registerWakeLocks(){\n  if (mWifiLock != null) {\n    int mode=WifiManager.WIFI_MODE_SCAN_ONLY;\n    if (Integer.parseInt(prefs.getString(Preferences.KEY_WIFI_SCAN_MODE,Preferences.VAL_WIFI_SCAN_MODE)) == 2) {\n      Log.i(TAG,\"Scanning in full power mode\");\n      mode=WifiManager.WIFI_MODE_FULL;\n    }\n else     if (Integer.parseInt(prefs.getString(Preferences.KEY_WIFI_SCAN_MODE,Preferences.VAL_WIFI_SCAN_MODE)) == 3) {\n      Log.i(TAG,\"Scanning in full high perf mode\");\n      mode=WifiManager.WIFI_MODE_FULL_HIGH_PERF;\n    }\n    mWifiLock=mWifiManager.createWifiLock(mode,WIFILOCK_NAME);\n    mWifiLock.acquire();\n  }\n}\n", "public static UIContext getCurrent() {\n\t\tStack<UIContext> stack = CONTEXT_STACK.get();\n\n\t\tif (stack == null || stack.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn getStack().peek();\n\t}", "public XingApi removeAuthErrorCallback(AuthErrorCallback errorCallback){\n  authErrorCallbacks.remove(errorCallback);\n  return this;\n}\n", "    public void addModifyListener(ModifyListener listener) {\n        getText().addModifyListener(listener);\n    }\n", "private static String getFirstErrorMessage(String defaultMessage, JsonElement json) {\n    if (json == null) {\n      return defaultMessage;\n    }\n\n    JsonObject jsonObject = null;\n\n    if (!json.isJsonArray()) {\n      jsonObject = json.getAsJsonObject();\n    } else {\n      JsonArray jsonArray = json.getAsJsonArray();\n      if (jsonArray.size() != 0) {\n        jsonObject = jsonArray.get(0).getAsJsonObject();\n      }\n    }\n\n    if (jsonObject != null) {\n      if (jsonObject.has(\"error_description\")) {\n        defaultMessage = defaultMessage + jsonObject.get(\"error_description\").getAsString();\n      } else if (jsonObject.has(\"message\")) {\n        defaultMessage = defaultMessage + jsonObject.get(\"message\").getAsString();\n      }\n    }\n\n    return defaultMessage;\n  }", "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Year)) {\n            return false;\n        }\n        Year that = (Year) obj;\n        return (this.year == that.year);\n    }\n", "public static lbwlm_lbvserver_binding[] get(nitro_service service, String wlmname) throws Exception{\n\t\tlbwlm_lbvserver_binding obj = new lbwlm_lbvserver_binding();\n\t\tobj.set_wlmname(wlmname);\n\t\tlbwlm_lbvserver_binding response[] = (lbwlm_lbvserver_binding", "\tprivate void paintBackground(Graphics2D g2, Color[] c, int w, int h) {\n\t\t// Paint background\n\t\tg2.setPaint(new GradientPaint(0, 0, c[0], 0, h / 2, c[1], true));\n\t\tg2.fillRect(1, 1, w - 2, h / 2 - 1);\n\t\tg2.setPaint(new GradientPaint(0, h / 2, c[2], 0, h, ", "\tpublic Docs getTitleDocs(String title) {\n\t\tPropertyRule<Doc> rule = PropertyRule.defineEqual(\"title\", title);\n\t\treturn getDocs(rule);\n\t}\n", "public JBBPNumericField findForFieldOffset(final int offset) {\n    JBBPNumericField result = null;\n    for (final Map.Entry<JBBPNamedFieldInfo, JBBPNumericField> f : fieldMap.entrySet()) {\n      if (f.getKey().getFieldOffsetInCompiledBlock() == offset) {\n        result = f.getValue();\n        break;\n      }\n    }\n    return result;\n  }", "void onItemClickItemPickerUI ( int which , int position , String valueResult ) ;", "public SqlConnectionSpecOracle ( ) { this . tableType = STR_ ; }", "public DateDue setDateDue(Date dateDue, boolean hasTime) {\n\t\tDateDue prop = (dateDue == null) ? null : new DateDue(dateDue, hasTime);\n\t\tsetDateDue(prop);\n\t\treturn prop;\n\t}", "public static double round ( final double v ) { return ( ( long ) ( v * NUM_ ) ) / NUM_ ; }", "public CSelectionCriteriumPanel ( final CSelectionCriterium criterium ) { super ( new BorderLayout ( ) ) ; m_criterium = criterium ; selectionStateBox . addActionListener ( selectionStateBoxListener ) ; initPanel ( ) ; }", "public static Method[] collectMethods(Class<?> c, int inclusiveModifiers, int exclusiveModifiers, Class<?> limitExclusive) {\n        \n        Set<Method> methods = new HashSet<Method>();\n        while (c != limitExclusive) {\n            for (Method f : c.getDeclaredMethods()) {\n                if (((f.getModifiers() & exclusiveModifiers) == 0)\n                \t\t&& ((f.getModifiers() & inclusiveModifiers) == inclusiveModifiers)) {\n                    methods.add(f);\n                    f.setAccessible(true);\n                }\n            }\n            c = c.getSuperclass();\n        }\n        return methods.toArray(new Method[]{});\n    }", "  public void setCallback() {\n    callBRViewButton.setFrameContainer(this.getDesktop());\n    callBRViewButton.setServerConn(BirMailClient.getApp().getConn());\n  }\n", "private static void checkArguments ( final AbstractSQLProvider provider , final CTag tag , final TagType type ) { checkArguments ( provider , tag ) ; Preconditions . checkNotNull ( type , STR_ ) ; Preconditions . checkArgument ( tag . getType ( ) == type ", "\tpublic void addTree(LoadLineMap l, VMasterTreeMap tree) {\n\t\tif(l == null || tree == null) \n\t\t\tthrow new IllegalArgumentException(\"l not tree can be null\");\n\n\t\tl.addTree(tree);\n\n\t\tsetMaxTreeHeight(tree.getHeight());\n\t\tsetMaxTreeWidth(tree.getWidth());\n\n\t\ttree.addTreeMapListener(sizeListener);\n\t}\n", "    public boolean shouldBeEnabled() {\n        Object target = getTarget();\n        return shouldBeEnabled(target);\n    }\n", "public void visitInnerClass ( String name , String outerName , String innerName , int access ) { if ( cv != null ) { cv . visitInnerClass ( name , outerName , innerName , access ) ; } }", "public String getPendingCertificateSigningRequest(String vaultBaseUrl, String certificateName) {\n        return getPendingCertificateSigningRequestWithServiceResponseAsync(vaultBaseUrl, certificateName).toBlocking()\n                .single().body();\n    }", "boolean waitForFileDone(){\nsynchronized (waitFileSync) {\n    try {\n      while (!fileDone)       waitFileSync.wait();\n    }\n catch (    Exception e) {\n    }\n  }\n  return fileSuccess;\n}\n", "@Deprecated public static void multiply(String name,double amount) throws UserDoesNotExistException, NoLoanPermittedException {\n  try {\n    multiply(name,BigDecimal.valueOf(amount));\n  }\n catch (  ArithmeticException e) {\n    logger.log(Level.WARNING,\"Failed to multiply balance of \" + name + \" by \"+ amount+ \": \"+ e.getMessage(),e);\n  }\n}\n", "private void cleanupAnyGroupBackupSnapshots(StorageSystem storage,CIMObjectPath replicationGroupPath){\n  _log.info(\"Cleaning up backup snapshots for: {}\",replicationGroupPath);\n  CloseableIterator<CIMObjectPath> settings=null;\n  try {\n    settings=_helper", "public abstract void filesDropped ( java . io . File [ ] files ) ;", "\tpublic void print() {\n\t\tSystem.out.println(\"Unit Name English:\" + unitNameEng + \"Unit Name French:\" +unitNameFr+ \"Unit Type\" + unitType);\n\t}\n", "\tpublic void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n\t\tfor (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof NameCallback) {\n                ((NameCallback) callbacks[i]).setName(username);\n            } else if (callbacks[i] instanceof PasswordCallback) {\n                final char[] passwordcontents;\n                if (password != null) {\n                    passwordcontents = password.toCharArray();\n                } else {\n                    passwordcontents = new char[0];\n                }\n                ((PasswordCallback) callbacks[i]).setPassword(passwordcontents);\t\t\t\n            } else if (callbacks[i] instanceof CertificateCallback) {\n\t\t\t\t((CertificateCallback) callbacks[i]).setCertificates(certificates);\n\t\t\t} else {\n\t\t\t\tthrow new UnsupportedCallbackException(callbacks[i]);\n\t\t\t}\n\t\t}\n\t}\n", "public static boolean hasEncoding(List<Encoding> encodings,Encoding encoding){\n  return encodings.contains(encoding);\n}\n", "private String makeTimesText(long startTime,long endTime){\n  String startTimeText=makeTimeText(startTime,fixedStartTime);\n  String endTimeText=makeTimeText(endTime,fixedEndTime);\n  String text=startTimeText + \" - \" + endTimeText;\n  if (fixedStartTime <= 0 && currentRange > 0) {\n    text+=\" (\" + duration(currentRange) + \"h)\";\n  }\n  return text;\n}\n", "    @Override public void onCreate() {\n        super.onCreate();\n        //android.os.Debug.waitForDebugger();\n        mWordSeparators = getResources().getString(R.string.word_separators);\n        mInstance = this;\n    }\n", "    public IEBISecurity getIEBISecurityInstance() {\n        if (security == null) {\n            security = new EBISecurityManagement(this);\n        }\n        return security;\n    }\n", "  public void beginEdit(int col) throws ObviousException {\n    this.editing = true;\n    for (TableListener listnr : this.getTableListeners()) {\n      listnr.beginEdit(col);\n    }\n  }\n", "public void PUT(String partialUrl, Object payload, Map<String, Object> headers, \n        List<String> queryParams)\n    {\n        URI uri = buildUri(partialUrl);\n        executePutRequest(uri, payload, headers, queryParams);\n    }", "public static void addDefaultResource(String name){\n  ArrayList<Configuration> toReload;\nsynchronized (Configuration.class) {\n    if (defaultResources.contains(name)) {\n      return;\n    }\n    defaultResources.add(name);\n    toReload=new ArrayList<>(REGISTRY.size());\n    toReload.addAll(REGISTRY.keySet());\n  }\n  for (  Configuration conf : toReload) {\n    if (conf.loadDefaults) {\n      conf.reloadConfiguration();\n    }\n  }\n}\n", "private void build(List<String> paths,String fieldName,boolean multiValued,boolean record,int flags){\n  String xpseg=paths.remove(0);\n  if (paths.isEmpty() && xpseg.startsWith(\"@\")) {\n    if (attributes == null) {\n      attributes=new ArrayList<>();\n    }\n    xpseg=xpseg.substring(1);\n    attributes.add(new Node(xpseg,fieldName,multiValued));\n  }\n else   if (xpseg.length() == 0) {\n    xpseg=paths.remove(0);\n    if (wildCardNodes == null)     wildCardNodes=new ArrayList<>();\n    Node n=getOrAddNode(xpseg,wildCardNodes);\n    if (paths.isEmpty()) {\n      n.hasText=true;\n      n.fieldName=fieldName;\n      n.multiValued=multiValued;\n      n.flatten=flags == FLATTEN;\n    }\n else {\n      n.build(paths,fieldName,multiValued,record,flags);\n    }\n  }\n else {\n    if (childNodes == null)     childNodes=new ArrayList<>();\n    Node n=getOrAddNode(xpseg,childNodes);\n    if (paths.isEmpty()) {\n      if (record) {\n        n.isRecord=true;\n        n.forEachPath=fieldName;\n      }\n else {\n        n.hasText=true;\n        n.fieldName=fieldName;\n        n.multiValued=multiValued;\n        n.flatten=flags == FLATTEN;\n      }\n    }\n else {\n      n.build(paths,fieldName,multiValued,record,flags);\n    }\n  }\n}\n", "  public int random() {\n\n//    System.out.println(\"RANDOM INVOKED ONCE!\");\n\n    return random.nextInt();\n  }\n", "public void addEventListener(SIPDialogEventListener newListener){\n  eventListeners.add(newListener);\n}\n", "    protected AbstractMatrix3D vStrides(int sliceStride, int rowStride, int columnStride) {\n        if (sliceStride <= 0 || rowStride <= 0 || columnStride <= 0)\n            throw new IndexOutOfBoundsException(\"illegal strides: \" + sliceStride + \", \" + rowStride + \", \"\n                    + columnStride);\n\n        this.sliceStride *= sliceStride;\n        this.rowStride *= rowStride;\n        this.columnStride *= columnStride;\n\n        if (this.slices != 0)\n            this.slices = (this.slices - 1) / sliceStride + 1;\n        if (this.rows != 0)\n            this.rows = (this.rows - 1) / rowStride + 1;\n        if (this.columns != 0)\n            this.columns = (this.columns - 1) / columnStride + 1;\n\n        this.isNoView = false;\n        return this;\n    }\n", "public void reelect ( ) throws InterruptedException , ActiveElectionException , RemoteException { changeState ( getState ( ) , State . PENDING , BOOL_ ) ; elect ( ) ; }", "private int naturalFollowerConnections(final List<ConnectableSegment> segments){\n  int connected=0;\n  for (  final ConnectableSegment segment : segments) {\n    if (segment.getNext() == null) {\n      final BSPTree<Euclidean2D> node=segment.getNode();\n      final BSPTree<Euclidean2D> end=segment.getEndNode();\n      for (      final ConnectableSegment candidateNext : segments) {\n        if (candidateNext.getPrevious() == null && candidateNext.getNode() == end && candidateNext.getStartNode() == node) {\n          segment.setNext(candidateNext);\n          candidateNext.setPrevious(segment);\n          ++connected;\n          break;\n        }\n      }\n    }\n  }\n  return connected;\n}\n", "\tpublic void destroyApp(boolean unconditional) {\n\t\tMainController.endProgram();\n\t\tnotifyDestroyed();\n\t}\n", "public double localScore(int i,int parent){\n  double sum=0.0;\n  for (  BDeuScore score : scores) {\n    sum+=score.localScore(i,parent);\n  }\n  return sum / scores.size();\n}\n", "long freeSpaceWindows ( String path , long timeout ) throws IOException { path = FilenameUtils . normalize ( path , BOOL_ ) ; if ( path . length ( ) > NUM_ && path . charAt ( NUM_ ) != STR_ ) { path = STR_ + path + STR_ ; } String [ ] cmdAttribs = new Str", "\tprotected void run() {\n\t\tint counter = 0;\n\t\tint instancesIDsTmp[] = new int[numInstances];\n\t\t\n\t\tfor (int inst = 0; inst < numInstances; inst++) {\n\t\t\tif (instances[inst].data[classIndex] == interestingClass) {\n\t\t\t\tinstancesIDsTmp[counter] = inst;\n\t\t\t\t++counter;\n\t\t\t}\n\t\t}\n\t\tint instancesIDs[] = new int[counter];\n\t\tfor (int i = 0; i < counter; i++) {\n\t\t\tinstancesIDs[i] = instancesIDsTmp[i];\n\t\t}\n\t\t\n\t\trun(instancesIDs);\n\t}\n", "public static <T extends Comparable<? super T>> void siftUp(T[] arr, int k) {\n        while (k > 1 && arr[k/2].compareTo(arr[k]) < 0) {\n            swap(arr, k, k/2);\n            k = k/2;\n        }\n    }", "public void addDisallowedString(final String string){\n  disallowedStrings.add(string.toLowerCase());\n}\n", "public void writeElement(String name, int type) {\n        StringBuffer nsdecl = new StringBuffer();\n\n        if (_isRootElement) {\n            for (Iterator<String> iter = _namespaces.keySet().iterator(); iter\n                    .hasNext();) {\n                String fullName = (String) iter.next();\n                String abbrev = (String) _namespaces.get(fullName);\n                nsdecl.append(\" xmlns:\").append(abbrev).append(\"=\\\"\").append(\n                        fullName).append(\"\\\"\");\n            }\n            _isRootElement = false;\n        }\n\n        int pos = name.lastIndexOf(':');\n        if (pos >= 0) {\n            // lookup prefix for namespace\n            String fullns = name.substring(0, pos);\n            String prefix = (String) _namespaces.get(fullns);\n            if (prefix == null) {\n                // there is no prefix for this namespace\n                name = name.substring(pos + 1);\n                nsdecl.append(\" xmlns=\\\"\").append(fullns).append(\"\\\"\");\n            } else {\n                // there is a prefix\n                name = prefix + \":\" + name.substring(pos + 1);\n            }\n        } else {\n            throw new IllegalArgumentException(\n                    \"All XML elements must have a namespace\");\n        }\n\n        switch (type) {\n        case OPENING:\n            _buffer.append(\"<\");\n            _buffer.append(name);\n            _buffer.append( nsdecl);\n            _buffer.append( \">\");\n            break;\n        case CLOSING:\n            _buffer.append(\"</\");\n            _buffer.append( name);\n            _buffer.append( \">\\n\");\n            break;\n        case NO_CONTENT:\n        default:\n            _buffer.append(\"<\");\n            _buffer.append( name);\n            _buffer.append( nsdecl);\n            _buffer.append( \"/>\");\n            break;\n        }\n    }", "public void paint ( final Graphics2D g2d , final int width , final int height ) { g2d . setPaint ( m_texture ) ; g2d . fillRect ( NUM_ , NUM_ , width , height ) ; }", "public boolean isValidTimestampMac(String hmac) throws HawkException {\n\t\tString this_hmac = this.generateHmac();\n\t\treturn Util.fixedTimeEqual(this_hmac, hmac);\n\t}", "public boolean startsWith ( XMLString prefix ) { return startsWith ( prefix , NUM_ ) ; }", "public CompletionStage < InputType > workflowInput ( List < Event > events ) { return workflowStartedEvent ( events ) . thenApply ( null ) ; }", "public Observable<OperationStatus> deleteHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId) {\n        return deleteHierarchicalEntityWithServiceResponseAsync(appId, versionId, hEntityId).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {\n            @Override\n            public OperationStatus call(ServiceResponse<OperationStatus> response) {\n                return response.body();\n            }\n        });\n    }", "public boolean addListener ( IClassLoaderCacheStateListener listener ) { _specificListeners . add ( new WeakReference < IClassLoaderCacheStateListener > ( listener ) ) ; return ! _dispatchingRemoved ; }", "private void trace(){\n  glUseProgram(computeProgram);\n  glDisable(GL_DEPTH_TEST);\n  long thisTime=System.nanoTime();\n  float elapsedSeconds=(thisTime - firstTime) / 1E9f;\n  glUniform1f(timeUniform,elapsedSeconds);\n  float blendFactor=frameNumber / (frameNumber + 1.0f);\n  glUniform1f(blendFactorUniform,blendFactor);\n  glUniform1i(bounceCountUniform,bounceCount);\n  glBindImageTexture(framebufferImageBinding,raytraceTexture,0,false,0,GL_READ_WRITE,GL_RGBA32F);\n  glBindImageTexture(worldPositionImageBinding,positionTexture,0,false,0,GL_READ_ONLY,GL_RGBA32F);\n  glBindImageTexture(worldNormalImageBinding,normalTexture,0,false,0,GL_READ_ONLY,GL_RGBA16F);\n  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,boxesSsboBinding,ssbo);\n  int worksizeX=mathRoundPoT(width);\n  int worksizeY=mathRoundPoT(height);\n  glDispatchCompute(worksizeX / workGroupSizeX,worksizeY / workGroupSizeY,1);\n  glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);\n  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,boxesSsboBinding,0);\n  glBindImageTexture(framebufferImageBinding,0,0,false,0,GL_READ_WRITE,GL_RGBA32F);\n  glBindImageTexture(worldPositionImageBinding,0,0,false,0,GL_READ_ONLY,GL_RGBA32F);\n  glBindImageTexture(worldNormalImageBinding,0,0,false,0,GL_READ_ONLY,GL_RGBA16F);\n  glUseProgram(0);\n  frameNumber++;\n}\n", "public CTerminal startWith(Object value) {\n\t\tCollectExpression collXpr = (CollectExpression)this.astNode;\n\t\tReduceEvalExpression reduceEval = (ReduceEvalExpression)(collXpr).getEvalExpression();\n\t\treduceEval.setInitialValue(value);\n\t\treturn new CTermi", "    public AbstractOption getOption(String Id) throws IllegalArgumentException {\n        if (Id == null) {\n            throw new IllegalArgumentException(\"Trying to retrieve AbstractOption\" + \" with ID 'null'.\");\n        } else if (!allOptions.containsKey(Id)) {\n            throw new IllegalArgumentException(\"Trying to retrieve AbstractOption\" + \" with ID '\" + Id\n                    + \"' returned 'null'.\");\n        } else {\n            return allOptions.get(Id);\n        }\n    }\n", "public int read(char cbuf[], int offset, int length) throws IOException {\n        return sd.read(cbuf, offset, length);\n    }", "public static void startTimer(final String type) {\n    TransactionLogger instance = getInstance();\n    if (instance == null) {\n      return;\n    }\n\n    instance.components.putIfAbsent(type, new Component(type));\n    instance.components.get(type).startTimer();\n  }", "private boolean validatePattern(Object validationObject, Annotation annotate)\n    {\n        if (checkNullObject(validationObject))\n        {\n            return true;\n        }\n\n        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(((Pattern) annotate).regexp(),\n                ((Pattern) annotate).flags().length);\n        Matcher matcherPattern = pattern.matcher((String) validationObject);\n        if (!matcherPattern.matches())\n        {\n            throwValidationException(((Pattern) annotate).message());\n           \n        }\n\n        return true;\n    }", "@Override\n    public void visitCode(Code obj) {\n        state = State.SAW_NOTHING;\n        stack.resetForMethodEntry(this);\n        super.visitCode(obj);\n    }", "   public String getVisitNumberId() {\n      CXElement cxVisitNumber = (CXElement)getField(19);\n      if( cxVisitNumber != null )\n         return cxVisitNumber.getIdentifier();\n      else\n         return \"\";\n   }\n", "\tpublic void endPrinting() {\n\t\tif (isPrinting){\n\t\t\tisPrinting = false;\n\t\t\tif(printOnWhiteBackground){\n\t\t\t\tsetBackground(background);\n\t\t\t}\n\t\t\t/* repaint for end printing:*/\n\t\t\tif(NEED_PREF_SIZE_BUG_FIX){\n\t\t\t\tgetRoot().updateAll();\n\t\t\t\tvalidate();\n\t\t\t}\n\t\t\telse{\n\t\t\t\trepaintSelecteds();\n\t\t\t}\n\t\t} else {\n\t\t\tlogger.warning(\"Called endPrinting although isPrinting is false.\");\n\t\t}\n\t}\n", "@Override\n    public final void truncate(ClusterName targetCluster, TableName tableName) throws UnsupportedException,\n            ExecutionException {\n\n        try {\n\n            connectionHandler.startJob(targetCluster.getName());\n            if (logger.isDebugEnabled()) {\n                logger.debug(\n                        \"Tuncating table [\" + tableName.getName() + \"] in cluster [\" + targetCluster.getName() + \"]\");\n            }\n            truncate(tableName, connectionHandler.getConnection(targetCluster.getName()));\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"The table [\" + tableName.getName() + \"] has been successfully truncated in cluster [\"\n                        + targetCluster.getName() + \"]\");\n            }\n        } finally {\n            connectionHandler.endJob(targetCluster.getName());\n        }\n    }", "@Override public Enumeration<String> enumerateMeasures(){\n  Vector<String> newVector=new Vector<String>(1);\n  newVector.addElement(\"measureOutOfBagError\");\n  return newVector.elements();\n}\n", "public abstract void initialize ( ) throws SchedulerException ;", "@LogMessageDoc(level=\"ERROR\",message=\"Unexpected action '{action}', '{subaction}'\",explanation=\"A static flow entry contained an invalid action\",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) public static void parseActionString(OFFlowMod flowMod,String actionstr,Logger log){\n  List<OFAction> actions=new LinkedList<OFAction>();\n  int actionsLength=0;\n  if (actionstr != null) {\n    actionstr=actionstr.toLowerCase();\n    for (    String subaction : actionstr.split(\",\")) {\n      String action=subaction.split(\"[=:]\")[0];\n      SubActionStruct subaction_struct=null;\n      if (action.equals(\"output\")) {\n        subaction_struct=StaticFlowEntries.decode_output(subaction,log);\n      }\n else       if (action.equals(\"enqueue\")) {\n        subaction_struct=decode_enqueue(subaction,log);\n      }\n else       if (action.equals(\"strip-vlan\")) {\n        subaction_struct=decode_strip_vlan(subaction,log);\n      }\n else       if (action.equals(\"set-vlan-id\")) {\n        subaction_struct=decode_set_vlan_id(subaction,log);\n      }\n else       if (action.equals(\"set-vlan-priority\")) {\n        subaction_struct=decode_set_vlan_priority(subaction,log);\n      }\n else       if (action.equals(\"set-src-mac\")) {\n        subaction_struct=decode_set_src_mac(subaction,log);\n      }\n else       if (action.equals(\"set-dst-mac\")) {\n        subaction_struct=decode_set_dst_mac(subaction,log);\n      }\n else       if (action.equals(\"set-tos-bits\")) {\n        subaction_struct=decode_set_tos_bits(subaction,log);\n      }\n else       if (action.equals(\"set-src-ip\")) {\n        subaction_struct=decode_set_src_ip(subaction,log);\n      }\n else       if (action.equals(\"set-dst-ip\")) {\n        subaction_struct=decode_set_dst_ip(subaction,log);\n      }\n else       if (action.equals(\"set-src-port\")) {\n        subaction_struct=decode_set_src_port(subaction,log);\n      }\n else       if (action.equals(\"set-dst-port\")) {\n        subaction_struct=decode_set_dst_port(subaction,log);\n      }\n else {\n        log.error(\"Unexpected action '{}', '{}'\",action,subaction);\n      }\n      if (subaction_struct != null) {\n        actions.add(subaction_struct.action);\n        actionsLength+=subaction_struct.len;\n      }\n    }\n  }\n  log.debug(\"action {}\",actions);\n  flowMod.setActions(actions);\n  flowMod.setLengthU(OFFlowMod.MINIMUM_LENGTH + actionsLength);\n}\n", "    public Script stopScript(String startCommand) {\n        System.out.println(\"Stopping script \" + startCommand);\n        Script s = runningScripts.remove(startCommand);\n        if (s != null) {\n            s.stopScript(\"Stopped by human\");\n            stop();\n        }\n        return s;\n    }\n", "public void printWrapped(PrintWriter pw,int width,int nextLineTabStop,String text){\n  StringBuffer sb=new StringBuffer(text.length());\n  renderWrappedText(sb,width,nextLineTabStop,text);\n  pw.println(sb.toString());\n}", "private Utf8InfoRef findConstant ( String text ) { byte [ ] utf8InfoBytes = getUtf8InfoBytes ( text ) ; assert utf8InfoBytes [ NUM_ ] == NUM_ ; int off = NUM_ ; for ( int i = NUM_ ; i < constant_pool_count && off < templateBytes . length ; ++ i ) { if ( m", "private int[] makeWorkingKey(byte[] key) throws IllegalArgumentException {\n  int[] kPad=new int[16];\n  int off=0;\n  int length=0;\n  for (off=key.length - 4; off > 0; off-=4) {\n    kPad[length++]=bytesToWord(key,off);\n  }\n  if (off == 0) {\n    kPad[length++]=bytesToWord(key,0);\n    if (length < 8) {\n      kPad[length]=1;\n    }\n  }\n else {\n    throw new IllegalArgumentException(\"key must be a multiple of 4 bytes\");\n  }\n  int amount=(ROUNDS + 1) * 4;\n  int[] w=new int[amount];\n  for (int i=8; i < 16; i++) {\n    kPad[i]=rotateLeft(kPad[i - 8] ^ kPad[i - 5] ^ kPad[i - 3]^ kPad[i - 1]^ PHI^ (i - 8),11);\n  }\n  System.arraycopy(kPad,8,w,0,8);\n  for (int i=8; i < amount; i++) {\n    w[i]=rotateLeft(w[i - 8] ^ w[i - 5] ^ w[i - 3]^ w[i - 1]^ PHI^ i,11);\n  }\n  sb3(w[0],w[1],w[2],w[3]);\n  w[0]=X0;\n  w[1]=X1;\n  w[2]=X2;\n  w[3]=X3;\n  sb2(w[4],w[5],w[6],w[7]);\n  w[4]=X0;\n  w[5]=X1;\n  w[6]=X2;\n  w[7]=X3;\n  sb1(w[8],w[9],w[10],w[11]);\n  w[8]=X0;\n  w[9]=X1;\n  w[10]=X2;\n  w[11]=X3;\n  sb0(w[12],w[13],w[14],w[15]);\n  w[12]=X0;\n  w[13]=X1;\n  w[14]=X2;\n  w[15]=X3;\n  sb7(w[16],w[17],w[18],w[19]);\n  w[16]=X0;\n  w[17]=X1;\n  w[18]=X2;\n  w[19]=X3;\n  sb6(w[20],w[21],w[22],w[23]);\n  w[20]=X0;\n  w[21]=X1;\n  w[22]=X2;\n  w[23]=X3;\n  sb5(w[24],w[25],w[26],w[27]);\n  w[24]=X0;\n  w[25]=X1;\n  w[26]=X2;\n  w[27]=X3;\n  sb4(w[28],w[29],w[30],w[31]);\n  w[28]=X0;\n  w[29]=X1;\n  w[30]=X2;\n  w[31]=X3;\n  sb3(w[32],w[33],w[34],w[35]);\n  w[32]=X0;\n  w[33]=X1;\n  w[34]=X2;\n  w[35]=X3;\n  sb2(w[36],w[37],w[38],w[39]);\n  w[36]=X0;\n  w[37]=X1;\n  w[38]=X2;\n  w[39]=X3;\n  sb1(w[40],w[41],w[42],w[43]);\n  w[40]=X0;\n  w[41]=X1;\n  w[42]=X2;\n  w[43]=X3;\n  sb0(w[44],w[45],w[46],w[47]);\n  w[44]=X0;\n  w[45]=X1;\n  w[46]=X2;\n  w[47]=X3;\n  sb7(w[48],w[49],w[50],w[51]);\n  w[48]=X0;\n  w[49]=X1;\n  w[50]=X2;\n  w[51]=X3;\n  sb6(w[52],w[53],w[54],w[55]);\n  w[52]=X0;\n  w[53]=X1;\n  w[54]=X2;\n  w[55]=X3;\n  sb5(w[56],w[57],w[58],w[59]);\n  w[56]=X0;\n  w[57]=X1;\n  w[58]=X2;\n  w[59]=X3;\n  sb4(w[60],w[61],w[62],w[63]);\n  w[60]=X0;\n  w[61]=X1;\n  w[62]=X2;\n  w[63]=X3;\n  sb3(w[64],w[65],w[66],w[67]);\n  w[64]=X0;\n  w[65]=X1;\n  w[66]=X2;\n  w[67]=X3;\n  sb2(w[68],w[69],w[70],w[71]);\n  w[68]=X0;\n  w[69]=X1;\n  w[70]=X2;\n  w[71]=X3;\n  sb1(w[72],w[73],w[74],w[75]);\n  w[72]=X0;\n  w[73]=X1;\n  w[74]=X2;\n  w[75]=X3;\n  sb0(w[76],w[77],w[78],w[79]);\n  w[76]=X0;\n  w[77]=X1;\n  w[78]=X2;\n  w[79]=X3;\n  sb7(w[80],w[81],w[82],w[83]);\n  w[80]=X0;\n  w[81]=X1;\n  w[82]=X2;\n  w[83]=X3;\n  sb6(w[84],w[85],w[86],w[87]);\n  w[84]=X0;\n  w[85]=X1;\n  w[86]=X2;\n  w[87]=X3;\n  sb5(w[88],w[89],w[90],w[91]);\n  w[88]=X0;\n  w[89]=X1;\n  w[90]=X2;\n  w[91]=X3;\n  sb4(w[92],w[93],w[94],w[95]);\n  w[92]=X0;\n  w[93]=X1;\n  w[94]=X2;\n  w[95]=X3;\n  sb3(w[96],w[97],w[98],w[99]);\n  w[96]=X0;\n  w[97]=X1;\n  w[98]=X2;\n  w[99]=X3;\n  sb2(w[100],w[101],w[102],w[103]);\n  w[100]=X0;\n  w[101]=X1;\n  w[102]=X2;\n  w[103]=X3;\n  sb1(w[104],w[105],w[106],w[107]);\n  w[104]=X0;\n  w[105]=X1;\n  w[106]=X2;\n  w[107]=X3;\n  sb0(w[108],w[109],w[110],w[111]);\n  w[108]=X0;\n  w[109]=X1;\n  w[110]=X2;\n  w[111]=X3;\n  sb7(w[112],w[113],w[114],w[115]);\n  w[112]=X0;\n  w[113]=X1;\n  w[114]=X2;\n  w[115]=X3;\n  sb6(w[116],w[117],w[118],w[119]);\n  w[116]=X0;\n  w[117]=X1;\n  w[118]=X2;\n  w[119]=X3;\n  sb5(w[120],w[121],w[122],w[123]);\n  w[120]=X0;\n  w[121]=X1;\n  w[122]=X2;\n  w[123]=X3;\n  sb4(w[124],w[125],w[126],w[127]);\n  w[124]=X0;\n  w[125]=X1;\n  w[126]=X2;\n  w[127]=X3;\n  sb3(w[128],w[129],w[130],w[131]);\n  w[128]=X0;\n  w[129]=X1;\n  w[130]=X2;\n  w[131]=X3;\n  return w;\n}\n", "public String printList(MyIdxList points){\n  if (points == null || points.length() == 0) {\n    return \"\";\n  }\n  StringBuffer bf=new StringBuffer();\n  try {\n    ListNode temp;\n    for (int i=0; i < points.size(); i++) {\n      temp=points.get(i);\n      if (i == 0) {\n        bf.append(\"\" + temp.idx);\n      }\n else {\n        bf.append(\", \" + temp.idx);\n      }\n    }\n  }\n catch (  Exception ex) {\n    ex.printStackTrace();\n  }\n  return bf.toString();\n}\n", "public static int tests(int b){\n  short x=(short)b;\n  int y=x & 0xffff;\n  if (y == 0xffff) {\n    y=(int)(System.currentTimeMillis() >> 32);\n  }\n  return y;\n}\n", "public void marshall(DeleteApnsVoipSandboxChannelRequest deleteApnsVoipSandboxChannelRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (deleteApnsVoipSandboxChannelRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(deleteApnsVoipSandboxChannelRequest.getApplicationId(), APPLICATIONID_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public static PollTcpManager createJni()\n  {\n    try {\n      /*\n      Class<?> jniSelectManager = SelectManagerJni.class;\n      \n      Method method = jniSelectManager.getMethod(\"create\");\n      */\n      \n      return (PollTcpManager) SelectManagerJni.create();\n    } catch (Throwable e) {\n      // catch Throwable because of possible linking errors\n      log.finer(e.toString());\n    }\n\n    return null;\n  }"], "comment": ["performs a databaseoperation delete all using the given data set", "get the configuration with the given path", "check and upgrade newest apk from server", "used on a successful post only", "performs various functions related to the trust verification process for the current instance of this proxy class as detailed in the description for this class .", "returns an immutable version of powerset where the inner sets are also immutable .", "asks the application cache to update itself .", "gzip compress a string of bytes", "initiates the background process to decoding and sampling the image .", "event coming back from an issued blocktask useful in recursive tasks or similar", "use the extended methods from gstopicconnectionimpl for topic and from gsqueueconnectionimpl for queue .", "listen at the default multicast group address and port .", "reports the open status of the port .", "sets the natureza property", "activates the scheduler and queues the notification poller .", "detatches the bitmap container from the request and cancels the request if no one is left listening .", "test if the p / r contains the provided file path ( ie this file was added / modified / updated )", "creates the gui elements of the component .", "adds a selected contact group", "add basesub to group", "tells the lock that thread is going to perform data modifications in storage .", "identifies the licensor of the software ( tag : software _ licensor ) .", "calculates the length of this vector squared .", "returns the connection anchor", "creates a union wrapping a value of the first type", "gets an access profile of a managed cluster .", "creates a new table object .", "marshall the given parameter object .", "return the next binlog file following the named file .", "selects the video track , if any .", "sets on option on the stub to control what http protocol version should be used .", "collect line edges which are in the result .", "called when a line is complete .", "stop the local executor instance .", "creates a not equals predicate using the specified expected value .", "converts the prefix of properties with wildcards ( e . g . , \" format . * \" ) .", "compute the mi if data were reordered .", "add a bugcategory reported by the plugin .", "read a byte array from persistent storage", "generate a separate tree file for each package .", "returns true if the given project sdk is actually the default sdk for the workspace and the project has a classpath container entry for the given sdk that indicates that the workspace default should actually be used ( i . e . no trailing segments ) .", "test of buildquery method of class orlinkquery", "returns true if the provided string argument is an integer in the inclusive range of 0 to 100 .", "read this message off the wire from the specified bytebuffer", "merging rules : a .", "converts a complex property connection map ( key : string , value : set of strings ) to a simple property connection map , so that the connections can easily be saved to the edges in the model graph .", "sets end positions if required and prints program element footer", "search into the mapping to find lists of factors that can convert the ' from ' unit into the ' to ' unit .", "checks the status of the vmrr process and returns true if it is running .", "casts the success value of the current maybe into the target type or signals a", "performs shallow copy of this instance to the supplied instance", "creates a json value from an input stream .", "recalculates the offset of each token in the layout", "returns a non - negative hash value", "picks the only installed oauth provider .", "get all values of the given header from the response", "method for beancontextmembership interface", "logs an info message", "check whether the entity class is time series false by default", "checks to see if the file is closed .", "sets the string that is displayed while moving", "clear the deffacts from the working memory", "retrieves the configuration of the previous run of the sync tool .", "returns the chapter according to the chapter path", "calculates a lrc checksum", "load the specified url in the main frame .", "returns the correct file in the repository", "generic health checker for an array of searchables .", "creates a connection object with the server information and the client hand which is the reference used to pass the client around activities", "type created 4 sept", "the method compares the supposed owner password with the owner password if it exists of the document and trys to decrypt the document", "gets the width of the left side offset", "returns whether the new network buffer memory configuration is present in the configuration object , i . e . at least one new parameter is given or the old one is not present .", "url - encodes everything between \" / \" - characters .", "appends the given element .", "called before the delegate will stop running .", "read and parse manifest file .", "clears the global caches when the table is updated .", "returns the open ssl version as a string .", "gets the number of tuple", "creates a server socket on given local address which includes the port", "attempts to load a custom secret key .", "checks if ban is still active", "add a policy file to support the associated entry in the rsl url list .", "add an instruction to the subroutine .", "read xml data from given file into this object populating given project as a side effect .", "invoked when a component gains the keyboard focus .", "creates list of quarkschema", "performs an actual connection to the server", "attempts to convert the http verb into a textual representation of intent based on rest conventions", "builds string representation of annotation with its elements .", "returns the buddys idle time", "tells whether sumoflogarithms can return meaningful results", "invoked after an operation was removed from the manager .", "sets the type of event this is", "writes a boolean", "start part of a multipart", "reads a sequence of vertexinfo structures .", "add a file to the map of image files that are to be copied to the catalog ( assuming this option is even set ! )", "add an obligation to every state in the stateset .", "returns a flag that indicates that search options changed since the last search .", "marshall the given parameter object .", "returns true if value written to file or false if not enough space ( writes and end - of - file marker in the fixed - length memory mapped file ) .", "get whether to show default values as their value or as no value", "creates a new percentage column", "removes the file from a path", "returns an unqualified version of the given file path .", "removes forbidden characters from the given text", "check address is on the server", "checks that a valid json file is parsed without errors .", "tests whether a given number is enclosed in this range and returns a formatted message if not", "returns the keys of the map .", "context menu event associated with a list of stream or channel names .", "creates a new instance of a happymysql object with the same parameters as those of the input happymysql object .", "creates a new updater object .", "returns a subset of a string", "creates a new api trace object .", "writes some bytes in hexadecimal format", "convert a an allocationunit string to bytes multiplier , for example kb would produce 1024 .", "returns a new identityhashmap with the same mappings and size as this one .", "this creates the jcomponent which shows the encryption status and then adds it to the jtabbedpane", "returns the probability distribution function .", "checks arguments for validity .", "returns complete friends information for the user", "add device in the group", "remove the figure visually only", "fill an array with the values of a 74 - db 4 - sample blackman - harris window function", "initialize the scroll pane ui", "add a character to the buffer flushing the buffer if the buffer is full and returning the new buffer index", "checkpoint the objectmodification", "remove from cafe the current selected component", "called before the node closing animation is started .", "returns the type of this indexinfo .", "remove all lines", "add configuration for a piechart segment .", "the security groups for the instance .", "returns a hashcode value for this gssname .", "processes all mouse events occurring in the application", "read a new array from the receiver .", "gets the text displacement relative to the baseline .", "this generates a list of selectargs which must be used when building queries , especially with strings .", "returns an ientitylock [ ] containing unexpired locks , based on the params , any or all of which may be null except for expiration .", "truncates the time portion of the calendar ' s date / time components .", "retrieve a group by name .", "parse a line of text as comma - separated values , returning each value as one entry in an array of string objects .", "close inputstream if we have one .", "instantiates a new routing service .", "returns the current volume index for a particular stream", "writing the parcel data ( accessibilities ) to csv file", "error checking function that ensures renewduration is valid taking into account the whether or not the desired expiration duration is lease . forever .", "marshall the given parameter object .", "must ensure that the writecacheservice is reset and direct buffers released", "query and cache if necessary targets to reconcile", "read the status line from the input stream extracting method information .", "parses a boolean value", "writes a batch of instances .", "creates a recovery manager for the specified transaction .", "run the parser as a stand - alone tool sending output to standard out .", "create or update container groups .", "encode the pov to a short system that wpilib can read and parse into it s joystick class .", "finds corners in the provided point list , and returns their indices .", "starts a new task", "try find target project from setted fileobjects", "get the hex representation of the passed object ' s address .", "checks that second clone contains first one .", "formats the caller s provided message and prepends useful info like calling thread id and method name .", "construct all the relevant file locations and java version given the path to this jar and a set of directories in which to search for jars .", "callback handler for the action method of menuitem addobjectmenu", "sets the font that will be used to render the text", "creates a new request configured to post a graphobject to a particular graph path , to either create or update the object at that path .", "call this method to get a notification when this call hangs up .", "returns the number of bytes written out through the stream .", "adds all the elements of the specified array to self .", "devices for user .", "assume we ve been given a space separated text .", "loads the scroll bar images", "adds + deleted to the query", "checks that the given collection contains exactly all of the exptectedentries , but none more .", "init long press action", "transform generated data to filter entry in order to be passed to a filter", "returns the asm type object for the outputstream required to write an instance of the specified class .", "copies stream fires progress events by listener can be interrupted by listener .", "requests the corresponding member to provide the basic jvm metrics which are listed in class jvmmetrics to be sent to managing node .", "run the given callable in the main thread of the rpcendpoint without checking the fencing token .", "set the value of the matrix element at column 1 and row 1 .", "evaluate this series at the given value", "set the length of the sdp file", "provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it .", "test the getint method .", "move the insertion point one position to the right in the composed text .", "creates the map that \" wraps \" session - scoped attributes", "tell the user of an error , and probably throw an exception .", "parses the specified cookie header value byte array into", "replaces stored vector of string with specified one", "makes a copy of the source routerresource and returns it with the new key set .", "destruction of the servlet .", "creates a new debugger combobox .", "assign next log segment sequence number based on a decreasing list of log segments .", "reads the single character at the current position in the document .", "begins an infinite loop accepting and dispatching incoming connections", "listen when animation start end cancel and setup view for it", "convert a set of byteenums into an integer compactly representing the elements that are included .", "matches the integer against the search string if it represents an integer .", "appends the specified iterator to the end of this list .", "test that normal write operations flush the accumulated bits .", "does this block throw an unhandled exception ?", "writes the specified byte to this byte array output stream .", "returns a scaled version of the given opencms vfs image resource .", "generate an identity matrix with the specified number of rows and columns", "returns the value of the specified column as a bigdecimal", "resets the width ratio", "returns whether the rhs is the same as the method name being declared eg .", "inverts the selection in a graph .", "updates the classifier with the given instance .", "creates an xor predicate wrapping the specified predicates .", "retrieves a cloned copy of the row from the cache with the matching primary key", "set the listvalueholder to synchronize positions with", "get buffered reader to response body using the given character set r and the configured buffer size", "insert a item associated with the specified position of adapter", "computes the fixed date under either the gregorian or the", "get instant run dex path , used to catch the branch usingapksplits = false .", "add azimuths allowing for wrap", "add the given event for current object .", "hides the totd dialogue window .", "set the identity of the job which should be fired by the produced trigger .", "information about a query execution .", "you are not supposed to instantiate this class .", "performs a binary search on an already sorted range finds the last position where an element can be inserted without violating the ordering .", "has a byte order marker for utf big endian utf and ucs .", "this function is used to fixup variables from qnames to stack frame indexes at stylesheet build time .", "return the matrix product a v i . e .", "sets the raw bytes stored by this hash instance", "enqueue the specified data packet .", "destruction of the servlet .", "method getparameter", "applies the user selected options to the tree like enabling javascript displaying the root node etc", "adds a listener to the selection", "process the text", "set the first two components from the given v and the z component from the given z", "checks that the field with the given name is in all schemas , and select a representative field that will be used for serializing .", "this method tests if the array represented by ' storagesystem ' supports volume expand .", "reads a certificate from a supplied string representation and a supplied type .", "display the fourier transform ' s magnitude and phase .", "truncates this title so it has a maximum number of words", "authenticating on the client will only create a \" dummy \" basic auth subject and does not truly authenticate anything .", "adds an elliptical arc , defined by two radii , an angle from the x - axis , a flag to choose the large arc or not , a flag to indicate if we increase or decrease the angles and the final point of the arc .", "deletes a resource server .", "this broker s metadata . broker . list value .", "removes a scene object from one or both of the left and right cameras .", "output the evaluation result to the specific file", "return the vertex at the given index within this simplex", "sets the current query timeout in seconds", "returns an arraylist which contains the name of every file within given folder .", "returns true if this textcharacter has the bold modifier active", "extend class globally with category methods .", "reads excluded path files", "draws the component background .", "returns a nicely formatting description of the file .", "canonicalizes the label ( to the form / / packagepath : packagerelativetarget ) .", "log an error to the log4j logger with fatal priority .", "map a single node up to the root", "helper method to have the sync adapter sync immediately", "get the point at the given index", "find salesrep / user based on request type and question .", "checks the state of the component", "handles changes made to a node by a remote server", "this method puts a layer over the image if you choose to put a color filter .", "checks that this matrix can be transposed into the given matrix", "permanently prevent this commit point from being deleted .", "this method returns true only if the metadata for the service contains the given region in the list of supported regions .", "determines whether type could be the type of a stun response as opposed to stun request .", "generates an expiration date for the presigned url .", "checks whether the string could possibly represent a regular expression ( this is just a first , fast guess , which will need to be verified by actually constructing the regex using the constructregex method below ) .", "multiply a matrix by a scalar c s a", "construct the weight for this query searched by searcher .", "check if the display mode is supported .", "adds a permission to this permission set using the algebras conflict resolution semantics", "in place copy of one objects values onto another with option to replace existing values in copy .", "creates an any predicate wrapping the specified predicates .", "invoked after a new group node comment has been appended to a group node .", "a concise description of the model .", "this method is called once to setup the strutsactionservlet", "reads a double out of a field in a cursor and writes it to a map .", "test that helpful file name appears in the stack trace and not just script", "mr reshape interface - for reshape we cannot view blocks independently , and hence , there are different cp and mr interfaces .", "type : : = array | variant | tuple | dynamic | primitive | ref", "replace the content for the current element .", "write the contents of the jsonobject as json text to a writer .", "reply true iff the designer wants to achieve the given goal", "clear registry information that current instance contains .", "reloads the demo operations files that are distributed with jmri .", "check if there are any listeners", "reload config file if it hasn ' t been loaded in a while", "converts the given character to a four - digit hexadecimal string", "sort the group instructions according to their method index", "returns the size of this data structure as a long .", "this method uses xerces specific classes prints the xml document to file", "called to validate the panel before moving to next panel", "dummy method to compute the number of observations for the given validities", "sets the content specifications output style .", "execute a redirected request", "append a local edge comment .", "gets the distance between this vector and a given vector .", "convert hex to bytes", "this method is used to remove a scanner insertion point provider that has been registered by the extension .", "this will return a parameter value for a given name", "save the image in gif format using a save file dialog", "notify listeners that the specified edge was added", "return the vector thats length is 1 0", "pre allocate a given number of empty rows and columns", "invokes a method on the given object with the given name and single argument .", "marshall the given parameter object .", "generate a session id to be used throughout the established session .", "removes a listener from the set of objects listening for discovery events .", "take the input string and un camel case it .", "draws a a polygon for the given parameters .", "call when the path itself has changed but no structure changes have occurred", "removes dummy lun path from secondary volume", "fired when a retry occurs override to handle in your own code", "returns a string which is the first ( perhaps unique ) start symbol of the treebank , or null if none is defined .", "adds an entity to a set of membership .", "unpack library and its dependencies , returning the location of the unpacked library file .", "get enumeration constant name .", "updates the given type substitution in the back end .", "rebuilds cached plot data .", "return the declaring class of the field this instruction operates on or null if not set", "adds pcontainedelements to assoziation containedelements", "sends given response to the socket .", "use this api to fetch all the lbpersistentsessions resources that are configured on netscaler .", "tests the validity of command - line arguments passed to this doclet .", "inserts one array into another by replacing specified offset .", "removes the element located at index from the list", "marshall the given parameter object .", "format a date according to our stored formatter .", "remove a key listener that will no longer be notified", "hook to allow derived classes to override list of result collection behavior .", "this clock guarantees that updates for the same clientstate will be ordered in the sequence seen , even if multiple updates happen in the same millisecond .", "determines if a polygon intersects the polygon", "build the header of a scenario", "parses a relation from json .", "fixes the actual string used to represent the internal representation .", "main method to run the bot .", "alternative to completablefuture . supplyasync ( supplier , executor ) with an implementation that switches the default asynchronous execution facility to be the specified managed executor .", "deletes a storage account .", "performs a lower cholesky decomposition of matrix ' a ' and stores result in a .", "load an previously stored object from the repository using the object id", "collection at the same time", "returns the maximum amount of space the layout can use .", "construct an anym instance that wraps a range from start ( inclusive ) to end ( exclusive ) provided the anym will contain a sequencem over the spefied range", "called when the provider is disabled", "this methods is a convenient method if you use the compound in the following recommended way the model is a default model which holds a", "validates that all the directories denoted by the strings do actually exist or can be created , are proper directories ( not files ) , and are writable .", "stop tracking an element", "marshall the given parameter object .", "reinitialize the phone configuration", "write the options of cartesian category ticks", "check whether a specific option is set i", "handles double clicks actions", "executes the set up bizdoc if one is defined", "this is a helper method for converting an object array into a map", "indicates whether or not a visible row update can be detected by calling the method resultset rowupdated", "starts an asynchronous document classification job .", "construct a cfgbuilder", "tests whether the clasnode implements the specified method name", "user has clicked ok in the surrounding jpanel so save the current state of all variables", "convert an ' . ' expression to a qualified identifier", "removes a listener object that was previously listening on the bookmark .", "function getshipbyid returns the ship in the fleet numbered fleetid that has the specified shipid", "this method unconditionally emits a message to the logging system but does not throw any exception .", "get field object referenced name", "hook method to setup the groovyscriptengine to use . br subclasses may override this method to provide a custom engine .", "signal to the recipient thread that the alarm has expired", "schedules the runnable for future execution on the internal runloopthread .", "create a methodannotation from an xmethod .", "convert a byte to a string of hexadecimal digits .", "queue the command unless queue is paused and the command is not a command that triggers resume queuecommand", "deletes the configuration object and all objects below it .", "this method is used to output log4j internal debug statements .", "marshall the given parameter object .", "returns r 2 estimate for a given pair of sites", "logs a message with log level info .", "writes the specified shape without clipping path information .", "indicates if the function and id combination match this alias id", "a method to add bookmarks to user ' s list .", "constructs a new resourcecache .", "stop manage of stopped task", "evaluates the continued fraction at the value x", "checks what type of version of ip range is", "calculates the size of each chunk", "check if the given array contains the given value ( with case - insensitive comparison ) .", "marshall the given parameter object .", "record that a thread has disappeared", "configure the dragviewhelper instance adding a instance of draggerhelpercallback useful to detect the touch callbacks from dragview .", "log information when entering a search node .", "creates the lm response from the given hash and type 2 challenge .", "starts scheduling of the task that clears expired entries .", "calculates the total number of edge crossing in the current graph", "will create a dynamicmapper on the specified target class .", "this function adds a created widget inside a column from the drag and drop panel", "marshall the given parameter object .", "whether the windows contents have loaded", "instantiate a new pdftextstripper object .", "iterates over all selected nodes in the graph .", "creates a jobgroupwrapper from a jsonvalue object", "queue all pending eventtasks for processing by the task manager .", "creates a new action object .", "sets the type of the parameter", "updates logintime and saves the user data", "returns a helper that supplies mbean metadata .", "construct a vector by appending one vector to another vector .", "builds a number from the given decimal descriptor .", "restarts the iterator i e as if it were just constructed", "generate coordinates for all atoms which are singly bonded and have no coordinates .", "updates the hit state of breakpoints .", "create a timeofday instance for the given hour and minute at the zero second of the minute .", "notifies this task listener that the current task is finished", "create a continuation frame .", "processes all of the human players taskforce missions", "main ( ) has some simple utility methods", "returns the amount that the receivers value will be modified by when the up down or right left arrows are pressed", "adds a sample listener .", "executes the task .", "set the number of samples to be averaged for rate sensing default is 1", "answer an iterator over all of the comment literals for this resource", "return the int value of this item", "creates the gui of the dialog .", "checks if current accessor readable", "called to indicate the end of a package definition .", "rotate the image by the specified degrees .", "creates a new url space factory bean based on the url and map parameters provided .", "checks two mutable strings for equality ignoring case .", "determines if the html . tag associated with the element is a block tag .", "sets the maximum socket receive buffer in bytes .", "prints a double to the stream .", "reads a branch in .", "developers should not call this directly", "ands the current value with the specified value", "we search through all the configured dirs for the file ' s existence and return true when we find", "destructively add a parameter annotation .", "creates a less predicate using the specified expected value .", "generates a pdf file and add contents to the file", "true if should be shown for this filtering .", "creates a provider that delivers type when needed", "get layer output type .", "ensures the internal buffer has enough free slots to store expectedadditions .", "the current event requires no waiting", "this method fills the combo box with the values once ans each", "whether context is system application", "handles i / o error events from the network layer .", "actually starts a trading session", "get the contents of the jmstype field from the message header .", "updates the font in the preview component according to the selected values .", "retrieves the exchange rates from the given currency to every supported currency .", "creates a new table menu object .", "creates a new instance of truetypeparser", "handle the delete / dnf / plustwo butons and sends a broadcast", "sends a packet from the server to all players in a dimension", "fire directory file delete events to the registered listeners .", "construct private process not found exception message", "close this input stream and release any associated system resources .", "create a refupdateattribute for the given old objectid new objectid and branch that is suitable for serialization to json .", "prints a message at verbose priority .", "convert a byte array into an object .", "passes if the actual is less than or equal to the reference", "reads the resources for a category identified by the given category path .", "add an import to an existing import list , attempting to keep the list sorted .", "reads the string value from the json array for specified index", "fills the deprecated outputformat interface for streaming .", "sets the version", "coerces a float array to a boolean value .", "the ids of one or more security groups for the specified classiclink - enabled vpc .", "creates a buffered input stream for this file .", "returns true if the client with the given id is alive", "insert room for operation .", "add a method to this class", "sets the delimiter", "writes desired string data to appropriate file .", "normalize an attribute value id style .", "parse an integer located between 2 given offsets in a string", "get cardinality of active jobs", "check annotated features parent recursively .", "marshall the given parameter object .", "gerritauthdata can change at runtime ( when getters are implemented dynamically so they return e . g . application settings .", "adds a period that starts whith the phase", "returns true if the value is a string that matches a regex", "return an index position of the given value within a collection map .", "graph representation of data property inclusions in the ontology", "this method chops off the throws exceptions , removes \" java . lang \" .", "beautify given location information .", "adds a list of split elements .", "sends a message to a specified queue", "modifies discovery resource offering .", "construct a new empty attributesimpl object .", "create an attributemap .", "get the cell modification history .", "removes an item from the list returning it if found or null therwise", "starts this server in a new background thread .", "writes the given time to the wallet as a tag so we can find it again in this class .", "registers relationship resolver for given type .", "makes the given visitor visit this type annotation .", "indicates whether the value of the timespan is zero", "log a message object with the info level", "loads view tags from the database .", "called when this board is rotated in x direction .", "append a global code node comment .", "drawstring - draws the text of a pascal string .", "instantiates a json builder with some existing data structure and a configured generator .", "execute all added shutdown hooks on this thread .", "checks database metadata to see if a column exists in a table .", "contains one or more identifiers of db clusters that are read replicas of this db instance .", "enables testing multiple conditions specified by multiple element exceptions .", "encodes the given path for compatibility with uris .", "validate the specified oid .", "creates an instance with the specified target name and actions .", "constructs an accounttotals object from rawjson string .", "paints the background of a tool bar .", "reads an arbitrary object from the input stream when the type is unknown .", "remove duplicate entries in list", "create a color table from the image colormodel and samplemodel .", "removes the provisional project .", "helper method to disable a view and all its subviews", "if the event is the popup trigger , which is dependent on the platform , present the popup menu .", "indicates whether the calendar used by this date format is lenient .", "returns this list viewers list control", "creates an instance with the specified name .", "print an error in the console", "sets the tables", "close the entitymanager instance", "returns whether there is a selected range", "sends redirect to the specified location .", "checks whether the stack is empty .", "creates an updatesresponse . updateapk with the data coming from the ui element updaterow", "public static bartendersystem createandaddsystem ( ) {", "creates a new action object .", "loads all debugger templates of a database .", "read the fields in the ciphertext headers to populate the corresponding instance variables used during decryption .", "stores a value in list", "removes the fnc1 codes in the text .", "this method checks , if this current interval is entirely to the right of a point .", "confirm that a record that has corrupted bytes triggers a checksum failure resulting in a logconsistencyexception .", "return whether the element is visible", "this method is not supported by this class", "ensures that the required folders exist", "tells whether a given type is a byte", "create a new component instance .", "starts an alter materialized view query with the given view name for the given keyspace name .", "returns a map of class names to mappedclasses given an srg mapping file .", "adds an empty item", "increment the counter by one event .", "copies a bitmap ' s pixels to a byte array .", "returns true if the provided string is a valid class name and a definition is present in the classpath .", "indicates whether an audio file of the specified file type can be written from the indicated audio input stream .", "returns the rgb color to use for the specified location .", "an internationalized wrapper call to log4js warning method", "clear temp sta device list", "checks if the compensation condition contains a participant request condition", "adds a column ( with name ' cname ' and definition ' cdef ' ) to the specified table .", "returns the online project", "instantiates a new jk map table model .", "create a cassandra index .", "get content from a pastebin file as string split to multiple lines using newlines .", "remove the target card from list .", "permite aniadir un atributo a la entrada ldap", "sets the receivers foreground color to the color specified by the argument or to the default system color for the item if the argument is null", "push a diff on the list", "expands the widget", "compute a list of patches to turn text into text .", "dispose this search , upon which all of its resources are released .", "merges the given segments into one segment containing all way - points .", "initializes a servlet binding .", "constructs an instance of this class with the specified state .", "retrieves a page of mailbox dump requests from the given start date .", "constructs a new size file filter for files based on a certain size threshold .", "creates a composite that uses the parent s font and has a grid layout", "gets a cursor that has a list of decorations that pass the filter .", "flush the backing store if any to disk and execute the specified handler on the io thread when done .", "adds elements to this type - specific list using optimized system calls .", "since unsafe . fieldoffset ( field ) will give us the offset to the first byte of that field all we need to do is find which of the non - static declared fields has the greatest offset .", "selects the tab item", "creates a new showsystemmenuaction object .", "returns the revision of the last search", "skips a single value , including its nested values if it is an array or annotation .", "get the value of the name property as a boolean .", "counts character c in string s", "constructs a picturelistmodel from the given vector then calls setmodel on it", "flushes any remaining objects .", "creates a new base type tree node below the given parent node and recursively creates all member nodes .", "creates a new edge object .", "method for creating the window screen", "replies an url for the given file and translate it into a resource url if the given file is inside the classpath .", "method is used to make sure the activation is removed from", "loads the best available backend .", "return the encoding of this biginteger that is exactly len bytes long .", "appends the vm synoym message to the header , already created .", "get default white list string [ ] .", "get the radius for this geomultishape", "setting the language for the pointer resolution", "gets the indexofchild attribute of the mailboxtreemodel object", "returns an initiliazed instance of intervals component", "sets the text painter of this text node", "inverse map the inverse conversion", "the action has been activated", "reads a float value from an inputstream .", "nodetoken tupleexp tupleexp", "receives data into an array of bytes .", "runs against the spotlessselfapply . gradle file .", "adds a state listener to be notified on this provider state changes events", "! @ note one of dst or src must be st ( 0 ) .", "returns true if nothing is selected", "creates and returns a new multi - status object with no children .", "lu decomposition , a structure to access l , u and piv .", "initialize the sample descriptor view", "sets an application specific property name and value", "schedules the specified task for execution at the specified time .", "add an argument iff it is not already present .", "animates this task thumbnail as it exits recents .", "returns an enumeration describing the available options .", "overloads the left shift operator to provide an easy way to add components to a popupmenu . p", "get the top n words most similar to the given word", "this method is called upon plug in activation", "compresses an array of base components into one .", "create a okhttpstack with a custom okhttpclient", "reset all names used in the model", "this clears the tagview map and restores the textviews to the pool", "see if a given entry exist in the symbol table", "encrypt a string using public key located in truststore .", "set the stroke width", "returns the warning count from the mysql eof packet", "you are not supposed to instantiate this class .", "the groups from which the thing will be removed .", "returns the flaps sequence number", "marshall the given parameter object .", "implements both addition and subtraction they are the same in gf size .", "splits the given line using the given delimiter pattern and quote character .", "shutdown the thread pools ( running tasks will run to completion , but no new tasks will start ) .", "show this screen in the web interface .", "adds a highlight to the view .", "get the version parts array by splitting the version string .", "create a temporary blob value from a stream .", "action for editing the text in an annotationnote", "moves the element to the back of the deque so that it becomes the last element .", "send an alternative event to all registered listeners", "formats some values into comma - separated text .", "this is applied only after the menuetelement has been created to add on functionality common to all tools in the gorup", "construct a new spkac .", "toggles the state of all selected group nodes in a graph .", "this will close all open shells .", "set a flag to tell the runtime to exit after actioning something", "returns true if a is nearly equal to b .", "reset the pdftextformat for a new run", "( void ) processinbox : ( cbl _ revisionlist * ) changes in cblrestpusher . m", "add an endpoint along with its corresponding epr", "finds all files in folder and in it ' s sub - tree of specified depth .", "sets all jhdlprintwriter instances in this jhdloutput object to the given filename", "add a contentvalues back reference", "init method for this filter", "constructs a dbrecordchanged with the specified detail message", "remove an item from the data", "possibly blocks awaiting root lock .", "checks if the given expression can be nested .", "returns the subplot if any that contains the x y point specified in java2d space", "returns an existing workbook object .", "this method should be removed soon .", "check that loading authenticationinfo also succeeds with empty protocols and cipher suites properties", "sets the drawing information vector and the different states", "appends the specified json value to the end of this array .", "called externally when dialog is being closed .", "if not already created , a new filter element will be created and returned .", "confirms a charge that was made with the option confirm set to false .", "registers a new io eventhandler with the reactor", "this function is equivalent to the c function system .", "writes the buffered finalzed queries to the output .", "check if a valid dataset header data exists", "get the statusremote to the remote by local", "returns true if release was acknowledged by the grantor ; false means we targeted someone who is not the grantor", "copied from com . android . internal . util . xmlutils from android source", "the patternlayout specific options are", "returns an xml element representing the file structure found at the supplied file system path .", "suspends encoding of the stream .", "cut the given link string to the specified length + three dots .", "create a pong frame .", "computes the feasibility ratio", "initialize all unary operators .", "calculate the preferred renew time and put in the map", "returns text representation of a subtree", "returns the tip text for this property", "this method gets the nodes value as a string and uses that string as if it were an input character notification .", "initializes a new transaction from the given arguments .", "this is used to determine if the header represents one that requires the http 1 1 continue expectation", "replies the viewer .", "extracts from the relay log until cancelled or we fail .", "called when a transition between states occurs .", "hook method for restoring widget values to the values that they held last time this wizard was used to completion", "compares two dtnhosts by their addresses", "verify that the pipeline tracks processed sequence numbers .", "reads the asdoc _ config _ base . xml from the templates folder and creates a temporary asdoc _ config . xml in the outut folder .", "put bitmap to image cache", "ignore the end of this tag .", "copy a input resource to a output resource", "fires a change event", "returns an iterator over the elements in this set .", "returns permutation element at a given position throws", "method to check the validation of the attachment", "return a jar for the path .", "tl auxiliary functions", "creates and returns a new unparented qualified type node with the given qualifier type and name", "required for rest assured base uri configuration .", "tokenize document to naf .", "for the given interface , get the stub implementation .", "test whether the next element of a is lexicographically less than the next element of b", "skip over the the http header if one present .", "the power of which when multiplied by the mantissa yields the original number e . g .", "creates a new indexselect node in the query tree for the specified index and search range .", "returns if the storage data is already downloaded .", "removes a job s id from the list of jobs in this group .", "will return immediately if a server already seems to be running , otherwise fork a new server and block until it seems to be running .", "\\ size and decoration hints . . .", "context information that enables aws cloudformation to uniquely identify a resource .", "log the given arguments to the logger specified by type", "extract slash command from the command line start .", "adds validation annotations to the supplied method", "compose a single line of otp information .", "converts an object value coming from a json object , to a jcr value by attempting to convert it to a valid data type .", "creates a new output stream with the specified buffer size .", "sets the remote peer based on the remote sdp description .", "the real guts of parsenetworkresponse .", "lazily load the class .", "adds the object to listen htmleditorevents", "marshall the given parameter object .", "returns index of entry in procedure table .", "wraps bigdecimal ' s divide method to enforce the default rounding behavior", "callback when entrance transition is prepared .", "one of ways of creating builder .", "make our exp equal to the supplied one , this may cause rounding .", "return whether or not we should make use of training data .", "constructs a new threadmanagedbeanproperty for the given arguments", "removes the supplied listener from this dispatcher .", "removes ligatures , multiple spaces and hypens from a text file", "constructs a new vector from the given vector and z", "gets name of node with highest capacity utilisation", "creates a particle system with the given parameters", "replaces the element at the specified position in this list with the specified element optional operation", "creates a new api tree object .", "returns true if there is currently an active vote", "call beforemodification / creation / deletion methods .", "compares this map with another map for equality of their stored entries .", "load the content of the zip entry , and return it as a byte array .", "primitive to model the stack effect of a single instruction explicitly specifying the value to be pushed on the stack .", "update the render setting", "gets the derby connection", "starts a scroll that moves the difference between y and our last motions y if it ' s a movement that represents a big enough scroll .", "return a decoded input stream for this messages content", "installs all currently registered listeners on all components based upon the current toplevelwindows cached by eventqueuemonitor .", "cast a object to a datetime object", "load a list of attributes", "returns the current transaction count", "receive static channel data from the portal", "set the value related to the column discount ammount", "count the words of a text file .", "writes a line and flushes", "stop applet simulation", "sets the maximum value of the progress bar .", "returns the z component of the cross product between vectors bc and ba .", "returns true if null or trims to an empty string .", "clean the invalid and inactive receivers in the document by requesting hlr on each receiver .", "logs an ' warn ' message", "alter this object properties", "defenir valores de margen rodape", "adds an array of classmodders to the matcher .", "convert a date to a humanly readable date and time .", "checks if the attacker can retreat and finishes the fight if possible", "opens the file again to start from the top of the list and then runs to the start of the list in the file after all the comments in the beginning", "creates a new action object .", "this method reads in the data from the publish text area as text characters and converts them into hex characters ( i . e . every character read is represented as two hex characters ) .", "creates an appropriate dialog to prompt the user for additional input", "this method is the cdr equivalent .", "gets the default .", "create a jmenuitem with multiple key bindings only one mnemonic can be set at any time .", "adds format by retrieving the globalization service attributes to get the list of formats and add them accordingly .", "creates a new commerce order with the primary key .", "use this api to fetch filtered set of xen _ health _ ftw resources .", "decrements the numerator and denominator by the passed values", "this method is called by outside scan that want to quit the scan and return the slholder to the factory", "tag the target object", "returns the localized terms of use content of this cp definition virtual setting in the language , optionally using the default language if no localization exists for the requested language .", "creates default view object for this tcedge", "builds the default topic name for an agent .", "draws the drag indicators for annotations .", "why", "return true if the specified project name exists in our requiredby array false otherwise", "checks if the method name looks like a java property getter ( getxxx ) .", "sets the color of this bitmask definition", "sets the parameters", "marshall the given parameter object .", "create parent directories if they don ' t exist in a given file path .", "closes the connection to the http server .", "removes the customizer for this view", "returns the number of different nominal values .", "read bytes from the stream .", "compares this mutable to another in ascending order .", "returns true if the buffer is dirty due to a modification by the specified transaction .", "executes a mouse pressed event on the mouse state .", "invoked when an address space was removed from the project .", "update sla of this", "returns a column .", "creates a streamconsumer for consuming the data from the input stream .", "invoked after a debugger closed unexpectedly reply was received from the debug client .", "why", "gamma distribution pdf ( with 0 . 0 for x < 0 )", "read a messagetype block", "get the active tunnels for a remote forwarding listener .", "register a font by giving explicitly the font family and name .", "traverse all list elements and filter out the element in the given positions list", "enable / disable qty based on selection", "sorts the objects in the cache based on its ranking", "create a new server - side - encryption object for encryption with customer provided keys ( a . k . a .", "add the class file transformer object .", "closes this tcpslaveconnection .", "sets the mode", "gets the set of unique path parameters used in the given uri .", "adds a ping url for availability testing", "set celleditable to false except for the tool column", "the news search api lets you send a search query to bing and get back a list of news that are relevant to the search query .", "invoked after a single step reply was received from the debug client .", "reads a signed bit number from the bytes message stream .", "copysettings , this function creates and returns a deep copy of this datepickersettings instance .", "same as putifabsent but key is unstable in the hosting object so create an pinnedhashentry", "return the number of items in a hash .", "executed after establishing web socket connection with streams api", "parses a number from the input text", "the preferred way to construct a jcache based on a cache2k configuration .", "unpacks the compressed character translation table .", "this adds a property descriptor for the value feature", "returns the string representation of the stream of supplied messages .", "returns the service specific table model", "look for a previously opened file identified by its filedescriptor and return it", "updates the connection information", "this is called after the analysis is completely done", "adds a new point to the end of this feature .", "removes all breakpoints of a given breakpoint manager .", "build a scenario from a list of url", "clears this object setting all values to their default values .", "removes all events provided by the protocol below protocol from events", "invoke the jsr 308 type annotations compiler .", "compute the workload for the model generation", "the dopost method of the servlet .", "patch the original text with given patch", "draws label text and label background if isvaluelabelbackgroundenabled is true .", "looks for a music track ( \\ u266b is first character , everything else is track info ) .", "compatibility for projects using spring data jpa < 1 . 10 . 0", "checks whether edge data is valid for a global edge comment .", "adds the stats from the other timer to this one .", "creates the buttons .", "clear the selection status for all items", "publish a log record to the logging pane .", "returns true if the entity is jumping or if it ' s a flying lam .", "remove all findbugs problem markers for given resource .", "and then converted to a device specific pixel density independent pixels .", "replaces the item at a specific index with another item .", "perform a css string level 1 ( only basic set ) escape operation on a string input , writing results to a writer .", "return all bitmaps in memory cache associated with the given image uri .", "constructs an instance of the diskbasedcache at the specified directory .", "alter a table to add a srid constraint .", "this is where the bulk of our work is done .", "calculates the points along a rhumbline between two xy points .", "sets the message to address list", "returns true if this model does not contain any data", "searches the instruction at the next valid pc offset .", "gets the api request logging log files .", "constructs a new mutableint parsing the given string .", "group the results according to the group by clause", "returns whether zscript is allowed", "adds the commerce account to the database .", "appends the specified element to the end of this list .", "this method tells the agent that a simulation cycle has gone", "determines whether the current line contains a for statement .", "report progress to the monitor", "changes a simple type entity value .", "automatically managed component initialization", "build the tag information .", "creates a direct float buffer , and copy coords into it .", "applies graphic styles to the graphics2d object", "returns all attributelistextensions found in the given collection of extensions , or an empty list if the extension collection does not contain attributelistextensions .", "check if the optional featuredetectionmethod is defined", "add all headers in a header multimap .", "removes the customer which is adapted from", "directly call the comment method on the passed lexicalhandler for the string - value .", "addrandommedium picks a random element in medium and adds it to the end of medium", "close the sliding pane if it is currently slideable .", "start a put request to the given url along with the query params", "use this api to update nshostname .", "declarative services method for unsetting the destinationaddressfactory service reference .", "checks whether or not the specified part can be replaced by another part to the world .", "email address for this user", "selects all nodes of a graph that contain a given search string .", "collect the results form the sniffing result of the analysisthread", "method show hide window dialog with navigator", "set of class files to check", "reads next frame image", "tells whether the picker is hovering a particular dpath or not", "navigates the user to the wifi settings if there is a connection problem", "loads the method id list .", "calculates the squared distance between the point corresponding to this vector and the point corresponding to the vector v .", "executes requests on the current thread as a single batch and returns the responses .", "gets the axioms that as a result of ontology changes need to removed to the reasoner to synchronise it with the root ontology imports closure .", "if this iterator needs to cache nodes that are fetched , they are stored in the vector in the generic object .", "show tips view to the target view .", "creates new form jticketsbagsharedlist", "returns a value give an x position .", "create a new builder using the header information and data provided .", "analyzes the description to determine if the vulnerability / software is for a specific known ecosystem .", "sets the xml definition and redraws the diagram", "this method creates the ds : digestmethod dom object", "for remote invalidateall processing . . . calls remoteinvalidate method on the store", "get the defualt system which handles static behavior of channels", "stops all httpdownloads ( cloud and wi - fi )", "sets the content widget .", "writes a double to an output stream", "appends a range to the tracker .", "changes the failover priority for the azure cosmos db database account .", "produce a distributionconfigimpl for the given properties and return it .", "sets the duration of open state .", "creates a new instance with the given arguments .", "is the response code a no content ?", "adds a marker to this log with the specified name .", "specifies whether the user wants the window to be visible in the given displayer", "does this line contain the start of a multi - line comment .", "returns the greater absolute value between left and right values", "add class and method annotations for given method", "add a matching rule in the canonical mime t form such as \" image / * \" or a mime t literal such as \" text / html \" .", "creates a new state object after the background has been clicked with the left mouse button", "returns an iterator over all the fieldinfo objects present , ordered by ascending field number", "it performs the operation targetpower and returns its value .", "get a version implementation .", "generates code to compute a hashcode for a value on the stack , consuming the value .", "add triples from file", "reads a multi byte value from the device", "removes position by id", "shortens and escapes the given string .", "un install the raise lower terrain marker", "returns the minutes part of this object when converted to coordinates", "creates a static export in the filesystem", "get the candidate with the highest preference .", "executes the given sql statement , which may return multiple results .", "creates a new unique temp file in the jvm temp directory which can be used for persistence .", "convert tag value to a string .", "converts the numerical value of a thread state into the proper enumeration value .", "this is used to read the specified node from in to the list .", "do not instantiate this class .", "checks if is boolean .", "returns a copy of the current contents of the cache ordered from least recently accessed to most recently accessed .", "get the smallest of the set of double values .", "transform the supplied inputsource", "updates the username and password for the default admin user", "updates values for a category .", "start all core threads causing them to idly wait for work", "parses an excel sheet ( in the fileinputstream ) .", "checker for the \" jvmmempoolthreshold \" variable .", "returns the fielddeclaration for the specified field name .", "gets the specified initparam from the web xml file via the servletcontext", "construct a jsontokener from a reader .", "validates a given object predicate expression tree .", "internal idl generated match test helper", "returns the database string of a given operand size .", "returns whether this patch is trivial", "note this must be in order from left to right .", "set the text size ( in sp ) of a textview .", "resets the list of current node to only contain the root node .", "this method parses the input file .", "retrieve the value of a single - valued parameter .", "formats a bigdecimal to produce a string .", "write a bugannotation as xml .", "adds a repeatable stereotype value .", "return a valid expression language el location path within the trim", "adds the change listener", "release slholder for this scan", "creates a new infocardinvocation object , describing relying party ' s requirements .", "helper function that drops all local databases for every client .", "support the range subscript operator for stringbuilder .", "locates the bytes within given length from the offset in the buffer .", "group elements in a stream by size", "get the predicate function that determines whether the given collection is to be included .", "returns true if any of the constraints are relative false otherwise .", "deletes an object from the tree and returns true if the object was found .", "create the screen and start rendering updating the browser history .", "logs the receival of the ping signal .", "tests the date to see if it falls within the rules", "internal method for recursing sub directories .", "adds an object child to the object .", "returns a new comment attached to an empty node", "adds the loadmore item .", "sets the value of this double property .", "wrap a remoteexception inside a namingexception .", "returns a sample of the rvg", "adds the specified items at the end of the array .", "in such cases , look for the relevant gem file in the cache with the highest version", "checks if the currently deployed openam has the same version number as the expected version number .", "puts a byte into this byte vector .", "this method allows us to open the preference dialog on the specific page in this case the perspective page", "method getchildcount", "decrypt client packet from this bytebuffer if decryption is successful , update client key", "this outputs the key in pkcs1v2 format .", "determines if the character at the specified position of a string is quote - escaped ( between \\ \\ q and \\ \\ e )", "checking if combat level difference is correct for attacking in wild", "create master - slave data source .", "true if the user is blocked from using this permission .", "generates an elementselectionevent if the receiver is not already selected", "recompute the separation of cluster means .", "sets the output pin bindings for the state doactivity procedure", "parses the classpath into an array of urls", "static routine to compute crc .", "add or replace a key with the given string value and comment .", "creates an idquery using the specified type and id .", "delgates calls to the statement sqlexceptions thrown from the statement will cause an event to be fired on the connection pool listeners", "create a new router with the specified configuration .", "case sensitive match test .", "write the name / value pair as form data to the request body", "executes a query and converts the results to instances of given class using default mechanisms .", "rename a file in the pending edit .", "convert an array of analyzer plugin ids into a list of the actual plugins .", "must clear for memory problems", "gets the atomtype x count attribute of the xlogpdescriptor object .", "this call must be synchronized so that there is no interaction with the", "find the integer value associated with this key or nothing if this key is not in the keep .", "builds key from a class and annotation", "defines a new task progress tracker for the given task id .", "this method is automatically called after the run and step methods have finished", "set the ' content - length ' request header to the given value", "update the given object in the data store", "asserts that the state is valid .", "write a message with trace level debug to the trace system .", "removes multiple participant context from mediator according to the provided meta data .", "starts the list of services on the host .", "mastership is accepted when all members before the candidate is suspected", "create new instance in context of parent overridable by subclasses", "ensures that files end with a single newline .", "called when a text message was received .", "returns the full product name for the directory server , which may contain white space .", "this method blocks during the destruction of the native session , it could take some time , don ' t call this from the ui thread or other sensitive multithreaded code .", "create writer to request output stream", "persist a single object into the data store .", "superimposing according to the optimized alignment", "return the expressionfactory instance for this application .", "translate a schedule task object to a xml element", "will make all sections of the text in a textview which have around them medium font .", "sets the interface name being generated for the chain objects", "stores the specified real grayscale value at x y", "names a thread according to base _ name , cluster name and local address .", "add tag into global list of tag", "equivalent to assert cond : value ;", "checks whether subpath of a designated root dir .", "make a new storage , to associate the given ids with an object of class dataclass .", "multiply this vector by a scalar", "checks if the given identifier should be included .", "returns a vector of all child elements named name", "invoked after the view of a graph changed .", "check whether error handling works .", "add this key area description to the record .", "result is never null", "returns the commerce tier price entry matching the uuid and group .", "truncates the given string to the desired length .", "uninstall the listeners from the title pane .", "remove next file and returns it ' s size", "convert to weka ( multi - target ) predictions .", "does the browser have shockwaveflash plugin installed ?", "gets the index of a child at a node", "start the main async instance .", "compare a string .", "toggles the selection of the item at the given position", "after this call the operations will be imediatelly sent to the remote peer .", "determines all functions that lie on all possible paths between a given start function and a given target function .", "get the corresponding alpha character", "constructs a new timestamp verifier with the provided tolerance ( in the provided units ) .", "add a new value to the array", "sets the machine and pe processing element id", "processes the given instance ( may change the provided instance ) and returns the modified version .", "returns the set of monitors .", "writes the specified message to the log", "antlrerror constructor comment", "parses the xml date string and creates a java date object from it .", "sends an sntp request to the given host and processes the response .", "sets the selected component in the builder model for the component class associated with this editor to the component at the given index in this editor ' s list of available components .", "returns the current connection instance", "construct the first pass of a join with the type table and alias .", "return a path for a rectangle with rounded corners .", "requests file system information from the debug client .", "returns the baseline", "getwrap returns the wrap mode for a given coordinate axis on this texture", "encodes a long using vax encoding into the output stream , length prefix is included .", "determine if this enum should be implicitly final", "saves the current opengl transformation matrix .", "adds the fields from another period .", "initiate the ui flow for an in - app purchase .", "returns the next element of this iterator", "returns the actual target of the paste action", "provide the statically computed table name with keyspace ( if defined ) for a given entity class", "create a 2d vector from an angle relative to the positive y - axis and a magnitude", "listener method is called after a model element changed", "writes a character buffer .", "checks if the db with the given name is present on the device .", "this method posts a runnable onto the servers task queue", "truncates name to fit in 45 bytes", "this method returns the maximum representation size of an object .", "represents an area of a given range , defined by a start and stop time .", "generate message from log - - - - - sample [ error ] application id it ' s error message here .", "average aggregate function which will add all the aggregate values and it will increment the total count every time , for average value", "asserts that only the given prompts have been seen", "handler method called upon receipt of a rset command .", "returns true iff the opapplnode test has the proper types of arguments for the operator as declared in module mn .", "test whetner sample binary arrays are correctly decoded .", "unlocks the given lock on the key", "sets the featuretype", "checks whether the specified tag is an empty tag as defined in empty _ tags", "pass through container configuration schema xml file and change its values according to properties saved in containerconfig instance .", "get the smtptemplate creating a new one if necessary", "adds a source container to a ijavaproject .", "unsubscribes the listener for update notifications .", "adds the passed block from the bucket for this node", "delete all of the files under the specified directory", "appends the given text of the given length , to the concetenation at the given offset", "adds a variable initializer node to the child list .", "log a message with the specified log level", "sets the enabled state of the session menu items", "adds an ui component", "creates a new instance of a simple glyf", "gets the clean up menu", "parses the given string and replaces all occurrences of n r and r n with the system line separator .", "turn special regular expression characters into escaped characters conforming to javascript .", "finds all files that match the search pattern .", "retrieves and removes the first element of this deque waiting up to the specified wait time if necessary for an element to become available .", "creates the internal paging component", "sets all of the cell tooltips", "an extremely simple method for identifying multimedia .", "creates and returns the resource .", "adds the provided file to the resulting message .", "create an exact copy", "create new dialog fragment with loading animation .", "decides which icon to apply or hide this view", "moves the reading position to the given block and seeks to and reads the given record .", "runs a new os process", "returns the tip text for this property", "checks if is sets the description", "creates a new panel object .", "create a patchsetattribute for the given patchset suitable for serialization to json .", "computer both members of the equation", "generates the setproperty calls", "enqueues data in the send buffer", "advances the status indicator of this user assignment if the event is indeed an advancement", "bridge methods to proxy modified method in vanilla nothing in forge", "check if the given string represents a job id or not", "creates a new progress operation object .", "get the correct type of item detail , will give null if itemtype / detail is empty", "flag the class name as being in the process of being defined .", "get the first matching value in the map .", "perform a http post request without any parameters .", "save user s info in database if the user login through ldap", "color of the left hand side of the switch .", "generates real lockedobjects for the resource at path and its parent folders .", "remove a camera listener .", "skips the next n characters", "initializes an icb with the type subtype and data", "set the icon to use on the edit button .", "performs the actual work of phase one .", "asserts field is not static .", "gets the length", "tell whether this corner has a rounded inner corner .", "cierra las conexiones", "initializes the encoding information .", "adds the dashboard list to the dashboards for the account .", "transforms case of a whole sql statement except values in quotes .", "actualizes all text items", "add a source line annotation describing the source line numbers for a range of instructions in the method being visited by the given visitor .", "called when empty result possible of previous set received", "parses arguments and performs the requested processing .", "called when the view navigates .", "starts both master and a worker using the configurations in test conf respectively .", "path to use for auxclasspath .", "retrieves , for a given index , the respective child of this node .", "updates the visual aspect of this", "use this api to fetch bridgegroup _ binding resource of given name .", "given the best and worst match figure out the match type for the composite .", "connects an image asset taking into account if an old image asset exists .", "writes the data to disk", "translate x and y by given vector .", "move the selected interval of sequences up one", "return the nonce of the derived key token", "gets the persist queries .", "does the readfully based on input ' s positioned read .", "select the supplied value from a radio button group .", "creates a new truetype font program from ttc ( truetype collection ) file bytes .", "return total number of connections currently in use by an application", "converts stream to stream where one or more int items are mapped to one int item .", "opens a log file", "call the sayhello operation", "put the stream in try - catch to stop the back - end reading thread if error happens", "cancels the given event lease .", "gets the status of a vm scale set instance .", "called after a bot is disconnected", "log table contents .", "starts the async executor", "list project info in database this will return latest build info", "checks if buffer at current offset contains specific string", "get currently registered session monitor , eventually creating it if necessary .", "mutates key into a slightly different key .", "an exception occured while talking to target server", "load the config with properties from the stream in from a properties file .", "this method splits a url into parts and return a map containing them .", "the minimum increment that the system . nanotime ( ) can do .", "reads the next converted character .", "returns true if this request has been canceled .", "disconnects the specified connection from the broker .", "checks if is date .", "notifies all observers that the variable value has been parsed", "called reflectively from trees . instance ( compilationtask task )", "run all defined filters .", "a expected method call has been executed on the recordmock", "creates a new jelly bean tag with the given name", "draws the description text in the center of the pie chart makes most sense when center - hole is enabled", "returns an eutomaton with end state equal to start state and no transitions", "create a new date which is the specified number of trading days after this date", "called in operation threads", "close and remove a pool managed by this helper", "processes a monitor exit to set the end of the already created scope block", "add to listeners list", "send information to all listeners about new windows associated with this application", "create and return a new insert menu for this network panel .", "align the selected widgets position", "constructs an object of this class", "expected result for the testxfoptionstyles test case", "sets a new related table control", "convert an host byte order long to inetaddress .", "closes this collection rendering it invalid", "removes listener for scroll events .", "serialize a component", "open a data stream for reading a raw resource", "launch the appropriate ui .", "create a proxy instance that implements the specified access interface and delegates incoming invocations to the specified dynamic implementation .", "picks a random node from consistent hash .", "prints all the java doc components", "builds a configuration instance .", "build the supplier for druid data request headers .", "sets the border attribute for the html table tag .", "performs generic data validation for the operation to be performed", "formats a monetary amount into a human friendly string .", "initializes the components that keep track of register information .", "guard to check if the provided object has the same class as the provided class .", "sets the characters to be ignored in parsing , eg new unicodeset ( \" [ : pattern _ whitespace : ] \" ) ;", "returns the height of the view , which corresponds to a specific position of an adapter .", "returns the device locale for which to use as a default if no language is specified", "lom patch returns true if the player is inside the opponents penalty area", "checks if this popup window contains the given point", "ifiltereditor method", "remove all db / commitlog files - including system and geostorageos keyspace", "sets the corner radius in pixel for the tool tip .", "sorts the items according to the specified sort field and sort order", "return a new cellgroup", "convert from efilteroperator to sql one .", "returns the current search result during iteration .", "get cnvobjecttocolumnsvalues ( create and put into map ) .", "gets the property .", "helper to create the original expression ( or at least a nested expression without the parameters included )", "return token ahead of current skips spaces and comments", "creates or updates an unlocked immutability policy .", "checks if this object equals another .", "returns the matching jclass .", "checks whether the given domain is unknown .", "start a reactive dataflow from a stream .", "selects all successors of the selected nodes .", "creates a new bend enter action object .", "p attempts to invoke the methodmissing method otherwise throws a missingmethodexception", "checks if heredoc is ahead of current block and it s not possible to insert newline fixme we should cache result here by line number", "posts an error for the given request .", "creates a new instance for the default time zone .", "verifies the possibility of establishing a direct tcp connection from a virtual machine to a given endpoint including another vm or an arbitrary remote server .", "converts an array of entry to an array of entryrep .", "writes a binary plist serialization of the given object as the root into a byte array .", "moves the cursor to the next line of data .", "returns the maximum value which the receiver will allow", "add a vertex", "return true if amx could be booted , false otherwise", "called when the replay process has been stopped", "switch to specified lex state .", "get the float value of a float constant", "determine if this method name suffix is a legitimate bean property name .", "loads the necessary data for the rename dialog from the server and then displays the rename dialog .", "creates a polygon detector .", "creates the instance with info from the current call context", "load and execute a script compiled to a class file .", "transfers a prerendered webcontents if one exists .", "opens the given stream and quality .", "get current annotation implementation for an object", "set some chartview settings", "retrieves a resource string from a resource bundle", "we will only get to the confirmed state on a 2xx response to the invite .", "everything else just delegates to original executor .", "remove an element described by objectinfo", "register all of the analysis engines defined in the plugins contained in a detectorfactorycollection with an ianalysiscache .", "appends a child node at the given index", "this method checks for the timeout .", "delete consistency group .", "disconnect from the server", "getwsagobject receives in serializeddata the object information in xml must returns a eu . atos . sla . parser . data . wsag . template", "creates a grid bag layout manager", "initialize when data storage is created", "add a solrinputdocument to this request", "returns true if the byte arrays are identical ; false otherwise .", "visits a method", "call a rest endpoint , returning its response .", "gives a mappedclass based on rules defined in a given mappingmode", "creates a tailer for the given file starting from the beginning .", "responds to a change in the cost matrix table .", "this returns the label text for the adapted class", "returns true if all elements of the set are trusted instances .", "set output directory .", "return the landlord s uuid .", "reads new input data into the buffer .", "creates a new warning message .", "computes the starting x position within the given box for content that has the given width", "returns a list of known peers excluding those which are tagged as blocked", "submit a specific revision of a change .", "creates the user info drop down .", "solves for the roots of an ugly polynomial defined in 12 . 7 in book [ 1 ]", "get a tag by its name", "returns a flowable that repeats the sequence of items emitted by the source publisher until the provided stop function returns true .", "loads a module while showing a progress dialog .", "moves a line item to a different index .", "computes the eigenvalue of the provided tridiagonal matrix .", "show the ui for the specific attacks .", "serialize parameter object .", "creates a new daytimecondition", "convert a key to string encoded as base64", "method that takes resources from the city", "executes an operation on the specified object", "the documents in the specified collection .", "encrypt 16 bytes ( aes standard block size ) or less starting at \" pos \" within \" in \" byte [ ]", "execute a put call against the partial url .", "add the data to debug queue .", "based on name get from map or from list in map", "dumps the contents of recentinvalidatesets", "constructs a filewriterwithencoding with a file encoding .", "toggle the slidingmenu .", "this adds a property descriptor for the pages feature", "creates a new state object after we enter edit mode .", "add a widget to the current selection without warning the listeners", "executes the program with the file as the single argument in the operating system", "invoke the action", "gets the overall number of channels all of the groups", "executes this request .", "this adds a property descriptor for the enabled feature", "returns the value of this character object", "creates and answer a separator with a label in the left hand side", "deletes the specified index record .", "sends instrumentation tap event to all registered listeners", "returns a hashcode for this double object .", "reads all available rows from the given cursor and returns a list of new imageto objects .", "renders the to do item edit page .", "helper method to register bean changes for this view", "checks if there is a valid next element and sets the m pos and m currententry fields accordingly .", "tests that the address family is always x or x .", "returns true if there is no content in the element .", "creates a new instance in order to build a new type from scratch .", "creates a new modifiers from the specified modifiers .", "delete an asset .", "gets the full url for the server side trace for this resource", "return a reference to service being wrapped in place of this object .", "clone this interaction while changing the place where interaction happened .", "set this data object based on the value of the other object", "creates buffer of specified size", "fill field values to default values for this synapse type .", "unmarshall get bucket replication response body to replication location .", "replace the username token", "returns the tab item at the given point in the receiver or null if no such item exists", "transform the raw asciis to string by its value .", "set the resourceselector", "continue game after bid not hold", "returns closest bigger valid chunk size to the given one .", "process an attribute replaced event", "searches through the label of an edge .", "stop receiving rtp stream", "to calculate a pre decision we can call the standard makedecision method since its spam decision does not depend on the number of currently available results", "attempt to validate the given name as an event b project name that exists is open and writable", "helper method informs the tree component if a new node is added", "returns the showtitle property", "converts a byte array into an image", "returns true if the provided string argument is to be considered a unit interval , which implies that the value is numeric and inclusive between 0 and 1 .", "check if the current runtime allows annotation usage .", "reset connection state .", "replaces the element at the specified position in this list with the specified element optional operation", "removes one character", "print array of big integers read from a input stream", "remove a column name from this projection", "invoked when the client event occurs .", "read the lines ( as utf8 ) of the resource file fn from the package of the given class into a string", "derived visitor method : check whether characterrangetable should be emitted , if so , put a new entry into crtable and call method to generate bytecode .", "create a new trigger on server", "make it look like we have dispatched a request using the include method .", "put the bitmap input cache with the specified key .", "some devices seem to have bugs with the parcelable implementation so we try to restore missing objects here .", "don t let anyone instantiate this class .", "executes the specified command and arguments in a separate process", "returns the next alarm ready to run", "this method sets the megaco error descriptor", "method to read a rna / dna sequence and generate a helm2notation object of it", "the url truncated at the top level directory for the package this tells google which files belong together", "create the gui and show it .", "creates a new searchfieldpainter object .", "removes all data from this data set", "responds to the cancel button", "generates an id for a newly detected component", "refreshes the index cache from the cluster", "retrieves a thread pool that is backed by the appropriate framework implementation .", "returns the localized help key for the provided widget parameter .", "sorts the specified array in ascending numerical order .", "renders an arc at ( cx , cy ) with the given radius r using n number of lines .", "collects the passed in objects to a linkedhashset .", "returns the field names used for a regular result .", "write a list of strings to document as elements with given tag name .", "draws the shape specified with the style _ shape key in the given style .", "load any remaining batches in the queue .", "computes and returns the idlelement that includes the caret and serves as provider for the outline page selection and the editor range indication", "creates a binary predicate using the specified predicates .", "reads and stores the trailer headers .", "cancels a job in an aws batch job queue .", "create a new texparser with or without a first pass", "will return all the elements that are present identified by the by .", "creates a categorygraph object using the categories given by the iterable", "get an iterator over the files found by the search .", "executes the built request .", "returns the name of ruby class for the given typeref .", "layout the orderframe object", "creates an id for a path in the ks model", "paints an arrow on this object", "visits a no - args constructor used to create the bean definition .", "download reviews written by the users .", "just post json to target url no http headers", "generate the fixed url for a static topic node .", "convenience method for classes that have not been overwritten with liberty - specific changes", "returns next imm date from the given imm code", "removes the specified solution from this population , if present .", "returns the localized description of this commerce payment method group rel in the language , optionally using the default language if no localization exists for the requested language .", "creates a new request files path command .", "adds a local info to this variable set", "check if the external project location is valid", "validates target properties .", "creates an field value filter .", "notifies all case value calculators that an event has occured", "execute the given sql script using default settings for statement separators , comment delimiters , and exception handling flags .", "print the entire layout .", "sets lock on the data file for modifying its index .", "multiply two numbers in split form .", "static function to deserialize a graphical model from an input stream .", "checks if a given conflict line precedes this one", "the specific operating system versions a patch repository applies to , such as \" ubuntu16 . 04 \" , \" amazonlinux2016 . 09 \" , \" redhatenterpriselinux7 . 2 \" or \" suse12 . 7 \" .", "get the set of edges between the source and the target", "convert the bugcollection into a dom j document object .", "sets the mode of this cipher .", "returns a date time instance by a number , the conversion from the double to date is o the base of the cfml rules .", "convenience method to run the modpoll executable with the given command parameters to write to a register", "returns the logical or of this and the specified filter .", "for more info on materialcategory storage api go here", "compares all member variables of this object with the other object", "use this method in the future to generate other versions of of the serialized object file .", "typically you will not override this method", "appends a comment to the given type instance .", "tear down instance variables required by this test case", "clear the classcontext cache .", "modifies the hostiliy against the given player", "puts the replicator into the online state using defaults for all control parameters .", "creates the temp file .", "writes our custom streamable fields .", "whether or not the permission executor will return verbose logging to the requesting user in the response .", "returns customers count", "updates the modified date but doesnt require a security check since it is a protected method", "null - safe method for converting the given string to lower - case .", "sets node states to the given values", "initializes the registry", "shows the given confirmation message as popup frame", "turn off spin mode", "retrieve all users credentials .", "returns the material for this space", "bind a named implementation into the set .", "hash code for the equals override", "dumps the content of the whole fetchdata object .", "adds a new function to the list of translated functions .", "is the parent window closable ?", "returns a vector m object with the given y value .", "tests whether parsing of binary encoded map is working .", "receive notification of the end of an element .", "set the flags to use for this time spinner .", "this method returns a list of labelvaluebean using the resultlist object .", "for the given interface , get the stub implementation .", "in federation configuration is set for a set of namenode and secondary namenode / backup / checkpointer , which are grouped under a logical nameservice id .", "mapping of campaigndetailform entities campaignvo entities", "set the property value", "appends an x y datum to the dataset", "clone contents of object for possible reverse transaction .", "adds a mapping from the specified key to the specified value , replacing the previous mapping from the specified key if there was one .", "method that handles actual construction ( via factory ) and caching ( both intermediate and eventual )", "this data will be added to all errors sent from this instance of the client", "builds up the tree showing the layers", "add a parameter to this configuration .", "get the next work list item basic block to be inlined .", "returns the index of the given child", "read a hashset from an inputstream containing xml .", "gets the filename from the given url object .", "you are not supposed to instantiate this class .", "lists domain ownership identifiers .", "initializes the servlet", "send a key update event to all registered listeners", "compute the longest duration of splits in the buffer", "locates a chrome installation in one of the default installation directories .", "should this transaction use joins .", "indicates whether a secret originally comes from this class or not", "initialize the data store", "returns the \" current time \" notion of this scheduler .", "execute a plus operation", "the fully qualified domain names ( fqdn ) of the remote domains for which to get the list of associated conditional forwarders .", "returns a servletoutputstream that would normally be used to write content back to the client .", "inject correct dbutil instance based on devicetype .", "returns the first field document fragment that defines the type for this variable declarator", "to receive an applet info", "removes a listener for space availability", "tests if the next input sequence matches the eq production in the xml specification otherwise it throws an alert", "remove an relationship attribute from the user", "gets the value of the abstractquery property", "compute the maximum height of nodes .", "resolve an object", "evaluates some script against the current binding and returns the result", "set the value related to the column contactmethod", "generates code to box the expression assuming that it is non - nullable and on the top of the stack .", "called before the configuration created from context is first executed .", "sort the array in reverse order .", "this method returns the payment response object for the given response string .", "add the url for listening", "adds a new blacklisted id .", "removes the key and its corresponding value from this", "create a class loader based on the simpleloader", "find the _ fields constant that matches fieldid , or null if its not found .", "set the accept encoding header to given value", "compares too binary values of the same type", "indicates whether this scrollview s content is stretched to fill the viewport .", "return true if the given loader is the system class loader or its parent i . e .", "creates a factory to create a jacksondatabindhandle instance for pojo instances of the specified classes .", "resolves the film details which and creates a film of it .", "creates a new publisher including a reference in the database", "implements the visitor to look for static method calls from instance variables", "appends the given children in the order given", "tostring method part of implementation of explorenode interface", "removes a registered menulistener", "means is in this jvm and not data distributed from another machine", "start the background task", "writes a specific integer value ( 4 bytes ) to the output byte array at the given offset .", "creates new instance with default utf encoding", "attaches one or more ec2 instances to the specified auto scaling group .", "increments the left label weights at the given position by the given weight and decrements the right label weights .", "if controls have been created refresh all sections on the page", "would love to use snakbar but then the fabtoolbar layout make the fab overlay the snackbar .", "constructs a matrix with the given shape each cell initialized with the given value", "constructor that takes a turn rate value", "hook method for setting the document provider for the given input", "returns a bigquery copy job configuration for the given destination and source table .", "returns the number of elements in this queue .", "set the current speed in kilometers per hour or miles per hour .", "revoke write permission on attributes .", "parses a string to a double value if the string can be parsed as a double .", "run outer transpose on distributed array", "delete template file", "reads the output of the reader and delivers it as string .", "adds a listener to spider parsing events .", "returns the first enumerated element of the given set .", "returns the subtraction of current vector with vector given as parameter", "returns the content of the given file as a plain string .", "closes the pool .", "returns whether a new connection shall be accepted or not . br therefore method is well suited to implement some kind of connection limitation . br", "print all leaf models", "for each table group read the associated xml files to get the tables", "creates mp4 reader from file input stream , sets up metadata generation flag .", "assert that a specific option is selected in a radio group", "validates that the supplied occupancy sensor name corresponds to an existing sensor and is unique among all blocks .", "serializetrailer parses the header", "returns true if the value of v is true .", "try to allocate a tiny buffer out of the cache .", "calculates the partitions for a given split number .", "you are not supposed to instantiate this class .", "creates a proxy preparer that specifies not to verify proxies grant them permissions or set their constraints .", "return differences between adjacent values .", "delete a user", "returns a copy of this monetary value divided by the specified value using the specified rounding mode to adjust the scale", "constructs a new exception with the specified cause .", "returns a vector i . e sequence of feature : value needs to have a pointer to the lexicon used during the creation of the document here we generate the scores , taking into account the data in the lexicon", "executes the specified modify statement and returns the number of affected records .", "sleeps the current thread for the given delay", "returns the name of the single primary key column for a chado table", "convenience method which determines if the given string is a valid weblog handle", "por defecto la medida de pagina que devuelve mupdf parece ser dos veces superior al correcto", "update the action view text and icon based on its state .", "flatten a double [ ] into an xmlserializer .", "get this property for this key .", "converts two bytes to an integer .", "get the current url", "sets the value of provided property to null .", "returns the first occurrence of a given identifier , or - 1 if it ' s not in the list .", "create a lock icon either in the locked or unlocked state .", "returns the value of an attribute as a boolean .", "find the previous set bit .", "sets the instance of the dateformat class that will be used to format the seconds to the date", "check if this extended message format is equal to another object .", "attach a child query .", "evaluate the inputstream in this interpreter ' s global namespace .", "returns the image associated with the given element that should be displayed in the tree", "returns element from proxyregset that corresponds to the given proxy .", "register handler service", "read on char .", "returns a local resource manager for use in this plug in", "returns the spawn freqeuncy for the roadusers of type rutype", "this moves the player one tile up or north", "called when trying to discharge items", "evaluate a hashcode for this key", "obtain the aromatic atom type for an atom in the alpha or beta position of a 5 - member aromatic ring .", "random normal using the current time stamp as the seed", "creates a new action object .", "determines if an attribute is multi valued .", "this method will completely remove the database and will create a new one", "force close and delete .", "add a buginstance to this bugcollection .", "indicates if this text ends with the specified suffix .", "add a requestlistener to the listener list .", "adds type , handling | and # , invoking signatures resolving", "sets the provider .", "this method tests whether an operand is a legal instance of an operator being passed as argument to another operator", "creates a new popupmenupainter object .", "run doinvalidtest on uiselectone", "invoked after a tag was added to the manager .", "creates a cursor to get the streams saved in the database", "for testing purpose", "get the object with the given id from the given table .", "internal method to handle the selections if items are added / removed", "determine whether the specified class is eligible for overriding by this class loader", "takes a list of reil instructions and tries to deduces as many jump targets as possible from them .", "release open ima", "try to create a sensible default for validation pattern , in the case where the java type of the parameter is an enum type or a primitive or primitive wrapper type", "closes the input stream .", "returns a networklite set for a collection of network uris", "adds specified hierarchy change listener", "loads the scirpt into memory from the resource location .", "call to fill the class with the required stream connections", "inserts the given instructions after the specified instruction .", "reads all rows from the sas7bdat file .", "add a source line byte offset .", "creates a new table object .", "called to notify that a consumption has finished .", "creates a new synchronizer object .", "writes given bytes array to given outputstream .", "removes the mapping at the given index .", "adds the before login message from the configuration .", "sets the overridden ( method ) member object .", "set the type of this node", "adds the action listener to the finalize button", "get this object properties", "creates a new unknown instruction .", "initialize the form submition progress by enabling the input field", "subtracts the given quaternion to this one", "set the trigger to fire on the given days of the week .", "call the closure once for each row in the result set .", "create an instance of the named class .", "validate that a method returns no value .", "create a new instance .", "method for mapping functionality", "handles activation of the editor or its associated views", "changes all bits to zero false", "returns the ecut model", "pops a method from the enclosing methods stack .", "decrypt the encrypted text", "this method assumes that the visited field of all the nodes is set to the same value .", "links a comment to the corresponding node", "create an empty view", "this adds a property descriptor for the private feature", "can this user delete this change or any patch set of this change ?", "resolve a type reference to use for the given type mirror taking into account generic type variables .", "generates an x - values array filled with numbers in range specified by the parameters .", "send the token in the value parameter to the output", "notifies all listeners of an event", "checks that each member of the given collection are of the correct type", "draws a path specified in local coordinates with custom style", "find and load shard properties .", "adds a method ref constant .", "construct a case sensitive file name comparator instance .", "parse the document for episode information", "start scrolling based on a fling gesture .", "links two operand tree nodes .", "set the identifier in the efaps database .", "set a header name and value", "and the column values as values", "get a list of repository commit statuses that meet the provided filter .", "read a file containing stopwords one per line .", "returns a one - to - one mapping from code to proposition id .", "for the specified list of table ids , return the number of mispartitioned rows using the provided hashinator config", "tests for the existence of a preferred place", "set a cookie with an expiration date from a month ago , effectively deleting it on the client side .", "compute the offset for the item in the layout based on the offsets of neighbors in the layout .", "starttransaction starts a new transaction .", "sets the edit context uri .", "interprets a sub instruction .", "gets the object given its scope , name , and optional property .", "returns the index of the eigenvalue which has the largest magnitude .", "writes the gathered data tab - separated into a text file .", "sets a watch for a particular sequence number to be processed .", "creates a new instance of cmapformat", "return a query that will return docs queryfromdocuments the passed lucene document id .", "create a buffered reader for this file using the specified charset as the encoding .", "sets the category display options that affect how the category selection dialog is shown .", "populate a passed in array with random data .", "sets the contained view", "read an array from an amf encoded buffer .", "generate normally distributed floats .", "loads the log service properties before executing any tests .", "return number as string for insert statements with correct precision", "constructs the section content", "load the necessary commands for this application .", "formats the time to a string value with milliseconds .", "add the names that are non - null in columns to s , separating them with commas .", "adds an incoming edge to the node .", "gets a taxon parent group based on the given taxon parent filter", "initialization of the servlet .", "dumb not an instance of holding two different locks while waiting", "check if uri represents network resource", "double size of hash table .", "sets the shrinkage constant , which must be in the range ( 0 , 1 )", "a list of lexicon names and attributes .", "utility function to run kraskov mi for data with known results", "set a property whose value is a double .", "visits an annotation on the type of the field .", "determine the insert strategy for the given entity using static configuration and runtime option", "returns the relative path to the given node .", "determine if the project page is empty .", "create a linebranchxmltype object", "if nm is the i th element of names then return i .", "add a new jspservletwrapper", "we return the given default value .", "adds command to the command queue .", "the data value of the underlying field defaults to", "find an existing live node that owns the bucket , or create the bucket and return one of its owners .", "creates an initial port and starts to listen .", "transform the constructor .", "sorts the specified range of the array .", "determines whether or not the database has a table named \" do \" .", "unmarshals an x . 509 certificate from an input stream .", "parse the configuration on whether to perform header validation or not .", "returns the list of any direct string nodes of this node .", "return a list of element objects that are children of the given element", "prints a float followed by a newline .", "allows to know if the pdf option is selected", "tests if the interior of the shape intersects the interior of a specified rectangular area", "swipes down on an element until the other element becomes visible .", "overrule defaultcloseoperation when internal frame is blocked", "updates user interface if the long enough ( real ) time ( update interval ) has passed from the previous update .", "returns a shape representing a thumb .", "method that returns additional attributes if the object is an ozoneobject", "throws an exception if the current token is not an identifier .", "use this operation to modify sms profile . .", "allows the user to specify custom mouse coordinates", "returns a parsed date .", "parses the externals parameter section .", "create entity from node", "override the resource name of this codebase entry .", "use this api to add linkset .", "transforms this call tree into a loggable message .", "to unload the object to free memory it will be reloaded automatically if needed", "calculate views bounds and scroll them according to the current index", "checks if variable is built in", "returns the keys of the map .", "validates if the value of property start _ ip is correct and adheres to the expected format", "finds child elements in dom .", "append a string with attributes .", "reset the fields in this class but not the parent to their default values .", "extracts the first result from an apifuture with list of results .", "add or replace a key with the given boolean value and comment .", "this method will copy the given file to carbon store location", "returns the json scanner used for text coloring", "retorna boolean acessopublico", "converts uptime nanos to a real utc timestamp in seconds .", "converts xml attribute values to object of the given type .", "append a string onto the vector .", "sets scoring system used for building alignments", "make the glyph a regular nonfloating glyph", "listen for the layer changes within the mapbean , to display the status lights for each layer .", "fills in an objectdata record .", "serializes a comment node .", "returns a native filesystem path with attributes .", "create a nodemodel from an xml file .", "set the value related to the column numeropessoas", "gets a view over the keys in the map", "adds a task to the frame task queue .", "decode temporal noise shaping data ; reference : table 4 . 48 .", "this is used to determine if the type specified is a floating point type .", "removes configurations with mismatching identifiers .", "instantiates a new gpuimage object .", "the object taggedas object creation primitive", "print the encoded map for debugging .", "deletes point from triangulation", "pushed p _ element onto the stack .", "connects to the room .", "saves data in the given file using specific time points", "deep comparison of array of long", "wird jedesmal wenn das tag function beginnt aufgerufen , um intern in einen anderen zustand zu gelangen .", "loads properties from the attribute file handle .", "get the name of this attribute", "increments the number of cars and or engines that will be picked up by a train from this track .", "creates an path that is rendered by this servlet containing the given parameters .", "replaces the item at a specific index with another item .", "horizontal magnification change for an overview level displayer", "use this api to fetch csvserver _ copolicy _ binding resources of given name .", "gets namespace from uri .", "stop live session recording .", "set title when tracing has started", "starts the actual execution of the action", "moves your robot backward", "sets the message direction", "add a tasks to execute at a fixed rate based on the provided delay .", "neprefixoptoken and prefixoptoken differ because the first includes .", "returns a new uri with the given query parameters appended to the original ones , if any .", "return a when scalar expression clause", "add a preinstantiate delegate so it can intercept nodes before they are created .", "return the maximum assigned channel .", "check if a class constant has the correct format ( upper _ snake _ case ) .", "sends certs to daviesmeyerdesroque object who counts the last ihvs without padding and returns the computing to an object of this class who counts the birthday bits", "report a vetoable property update to any registered listeners .", "parses properties from task parameter string", "blocks till the required number of bytes have been read from the input stream .", "write endpoint to output stream .", "prepends a partial uri and normalizes / characters .", "respond to a start button press", "creates a clone using java serialization", "creates a new global comment manager object .", "resets map and set mode to handle references", "run a specific action", "loads the properties", "checks the es store to see if the ' dataversion ' entry has been updated with a newer version # .", "return true if we have a static accessor", "creates a patternwithparameters by running a regression , given a graph and data", "adds \" aria - invalid \" if the component is invalid .", "translates a string into an application type .", "initiates the streams drawer if the streams in the drawer is .", "helper function fully consume multiplexer output into a list blocking .", "attempts to map the sources and result of a phi to a common register .", "read a plain text file .", "updates the status for a post .", "creates an instance of the associated element type", "clears all highlights from the editor including search highlights", "add layers to the beancontext , if they want to be .", "removes a listener object from the template manager .", "prints the usage of the main class for this argparser .", "initializes this static object with the context of the calling activity .", "returns information about the state of a pipeline , including the stages and actions .", "core trimming method .", "checks whether the given resource is a java artifact i . e .", "copies the inputstream to the output stream , and keeps the output stream open .", "checks if this logstatus represents a completed state", "merge an existing annotation with old annotations , removing the old annotations .", "parse a list of valuesource .", "converts a variable size number ( e . g . byte , short , int , long ) in a rlpelement to long", "check whether the given string is an identifier according to the ejb ql definition .", "get smallest start plog id among all open transactions", "validate the array for personalnamesubject", "returns true if this instance contains a response object whose status is suspect meaning that the corresponding node is probably down", "sets the font to the global font of the gui", "get the inputrc file , if not set it defaults to :", "remove the supplied tile from the covering list , as its image has been loaded .", "use the kek to encrypt a value usually the mwk", "causes the display to refesh itself", "add an item to the channel", "returns the subtype of this entry", "creates a new scrollbuttondropshadoweffect object .", "produces a deep clone of the object", "cast result object to a result tree fragment .", "forward the request on to the local rawprovider", "gets the equivalent prescription phase", "determines whether the event will have an impact on different days .", "check whether this cartridge supports gameboy color features", "lookup index assigned to transaction object .", "skips over and discards a specified number of bytes from this audio input stream .", "produce a blowfish key to be used in \" storm jar \" command", "returns true if the system is running , and false otherwise", "only for testing purposes", "returns the given charset or the default charset if the given charset is null .", "cast a object to a double object ( reference type )", "add root table in join", "remove the specified exception message from the exception .", "resize the given array as needed to meet a target size .", "finds and returns the key in this counter with the smallest count .", "creates a new modifiers instance which excludes the specified modifiers from this instance .", "create a new property decoding exception .", "decodes the image into the specified buffer .", "initialises all values in the matrix to the given value", "execute select statement for the joined multiple table .", "creates an matsim network from the osm file", "executes procedure for each key value entry in the map", "add two numbers in split form .", "this method retrieves an object from the document by name or id", "creates a wrapping label", "sets the specified port .", "creates a new action object with specified content and line number .", "attempts to load from a local file using the relative fileprefix ie starting at the current directory .", "it removes an option registered in database", "returns the path for passed in row", "cancels all pending updates to feeds", "add listener to pin .", "create a database object using the given connection .", "this method is available for subclasses of this class .", "update the vertex set # setnum with the data in * vertexdata , sets have 0 - based index", "delimiter checking helpers .", "get the first index of csearch within stext ignoring case .", "writes another column of data to this record .", "gets an existing user or creates a new one", "allows the visualization of the numberinpot without changing it", "determines if one viewoperation equals another viewoperation", "sets all the fields in one go .", "register wifilock to prevent wifi adapter going into sleep mode", "retrieves the current effective uicontext .", "removes the callback from being notified when the server responds with an auth failure .", "adds a listener", "get error message while executing http url", "tests the equality of this year object to an arbitrary object", "use this api to fetch lbwlm _ lbvserver _ binding resources of given name .", "paints the background", "gets title docs", "find a registered field for its field offset in compiled script .", "callback when the item has been clicked .", "instantiate urla specification for mysql with innodb as default table type .", "sets the date that a to - do task is due by .", "rounds the given number to a precision of two after digit numbers .", "creates a new panel object .", "produces an array with all the methods of the specified class", "set the appropriate callback values", "checks arguments for validity .", "adds a new tree at the end of the loadline", "checks if the tab should be enabled", "visits information about an inner class .", "gets the pending certificate signing request response .", "block until file writing is done .", "multiplies the balance of a user by a value", "method will look up backup snapshots that were created when a snapshot restore operation was performed , then clean them up .", "this method is called when files have been successfully dropped .", "this method displays all fields of a unit", "handles the specified set of callbacks", "below method will be used to check whether particular encoding is present in the dimension or not", "make the text for the start and end time , taking into consideration whether a specific range is displayed .", "main initialization of the input method component", "return the iebisecurity interface", "indicates the beginning of a column edit", "execute a put call against the partial url .", "add a default resource .", "build a node tree structure representing all xpaths of intrest to us .", "get next random number from the synchronized random number generator", "adds a new event listener to this dialog .", "self modifying version of viewstrides", "re elect the primary space .", "connect the segments using only natural follower information .", "destroys the application", "specialized scoring method for a single parent .", "find free space on the windows platform using the dir command .", "smote oversamples a specified class of a dataset", "to restore the max - heap condition when a node ' s priority is increased .", "adds the specified string to the list of disallowed strings .", "write an element .", "paints the background onto a canvas .", "check whether a given hmac value matches the hmac for the timestamp in this hawkwwwauthenticatecontext .", "tests if this string starts with the specified prefix .", "if available return the input string given to this workflow when it was initiated on swf .", "deletes a hierarchical entity extractor from the application version .", "adds a listener to this class loader removal event", "compute one frame by tracing the scene using our compute shader .", "jcypher specify a primitive value like a string or a number as the initial value of the accumulator variable of a reduce expression .", "returns the abstractoption with the given id", "reads characters into a portion of an array .", "start component timer for current instance", "checks whether the given string is a valid pattern or not", "overrides the visitor to reset the state and reset the opcode stack", "get just the visit number identifier", "call prepareprinting before printing and endprinting after printing to minimize calculation efforts", "this method deletes all the rows of a table .", "returns an enumeration of the additional measure names .", "initialize this remotembeanscheduler instance connecting to the remote mbean server .", "parses offlowmod actions from strings .", "this stops a script in a threadsafe manner allowing it to end itself", "print the specified text to the specified printwriter .", "find an instance of utf info in the source class s constant pool where the text matches the given argument .", "expand a user - supplied key material into a session key .", "for printing indices in a given point list .", "tests if the if does work properly on short stamp .", "marshall the given parameter object .", "sets the timeout ."], "label": ["what", "what", "what", "why", "why", "property", "what", "what", "how-it-is-done", "what", "why", "what", "what", "what", "what", "how-it-is-done", "why", "what", "what", "how-it-is-done", "what", "what", "what", "property", "what", "what", "what", "what", "property", "what", "what", "what", "how-to-use", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "property", "what", "property", "how-it-is-done", "others", "how-it-is-done", "what", "how-it-is-done", "property", "how-it-is-done", "what", "what", "what", "property", "what", "what", "why", "what", "what", "what", "what", "what", "what", "property", "what", "what", "property", "why", "what", "others", "what", "what", "property", "what", "what", "how-to-use", "how-it-is-done", "what", "property", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-to-use", "what", "what", "how-it-is-done", "what", "property", "what", "how-to-use", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "property", "what", "property", "what", "what", "what", "property", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "property", "what", "what", "how-it-is-done", "property", "how-it-is-done", "property", "why", "property", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "property", "what", "what", "why", "property", "what", "what", "what", "how-to-use", "property", "what", "what", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "why", "how-to-use", "how-it-is-done", "how-to-use", "property", "how-it-is-done", "what", "others", "what", "how-it-is-done", "what", "what", "why", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "property", "what", "property", "what", "property", "what", "property", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "why", "what", "what", "what", "how-to-use", "how-it-is-done", "why", "how-it-is-done", "property", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "why", "how-it-is-done", "what", "what", "what", "what", "property", "what", "property", "property", "how-to-use", "what", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "why", "what", "what", "why", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "why", "what", "what", "others", "others", "what", "what", "what", "what", "what", "what", "why", "how-it-is-done", "how-it-is-done", "property", "what", "how-to-use", "what", "what", "what", "what", "what", "how-it-is-done", "why", "property", "how-it-is-done", "what", "property", "what", "what", "what", "what", "why", "what", "what", "how-to-use", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "why", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "property", "how-it-is-done", "how-to-use", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "why", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "property", "what", "how-it-is-done", "what", "why", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "why", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "property", "how-it-is-done", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "why", "property", "what", "what", "why", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "why", "why", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "why", "how-it-is-done", "why", "why", "what", "what", "why", "why", "property", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "property", "what", "property", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "why", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "property", "how-it-is-done", "what", "what", "others", "what", "what", "what", "what", "what", "what", "what", "property", "why", "what", "what", "what", "why", "property", "what", "what", "how-it-is-done", "property", "how-it-is-done", "property", "what", "what", "what", "how-it-is-done", "property", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "why", "how-it-is-done", "why", "what", "property", "what", "what", "what", "why", "what", "property", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "why", "what", "what", "property", "how-it-is-done", "what", "how-to-use", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "others", "what", "property", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "what", "why", "what", "what", "what", "why", "what", "what", "what", "why", "property", "what", "others", "what", "what", "how-it-is-done", "how-it-is-done", "why", "what", "what", "what", "what", "property", "property", "property", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "what", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "property", "property", "how-it-is-done", "what", "why", "what", "property", "how-to-use", "why", "what", "what", "how-it-is-done", "what", "what", "what", "what", "property", "property", "what", "property", "others", "what", "why", "what", "what", "what", "what", "what", "why", "property", "what", "how-it-is-done", "others", "why", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "property", "what", "how-to-use", "what", "what", "property", "why", "what", "what", "what", "what", "what", "what", "what", "property", "how-to-use", "why", "how-it-is-done", "what", "what", "what", "how-it-is-done", "property", "how-it-is-done", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "what", "property", "property", "how-it-is-done", "what", "what", "others", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "why", "what", "what", "what", "how-it-is-done", "what", "how-to-use", "what", "how-to-use", "what", "property", "why", "what", "why", "why", "property", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "property", "what", "how-to-use", "what", "property", "why", "how-to-use", "why", "what", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "why", "what", "what", "what", "what", "why", "why", "how-it-is-done", "how-to-use", "what", "why", "why", "property", "what", "what", "what", "what", "why", "property", "property", "how-it-is-done", "what", "how-to-use", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "why", "what", "property", "why", "how-it-is-done", "what", "how-it-is-done", "property", "what", "why", "others", "what", "what", "property", "what", "what", "what", "how-it-is-done", "property", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "what", "what", "why", "why", "what", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "property", "how-it-is-done", "why", "what", "what", "why", "what", "what", "what", "what", "what", "why", "why", "what", "what", "what", "how-it-is-done", "why", "what", "property", "why", "why", "what", "property", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "what", "why", "how-it-is-done", "how-it-is-done", "what", "how-to-use", "what", "property", "what", "what", "why", "why", "why", "what", "why", "property", "what", "what", "what", "what", "property", "property", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "how-it-is-done", "what", "why", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "why", "how-it-is-done", "property", "what", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "others", "what", "what", "what", "what", "what", "property", "what", "what", "why", "how-it-is-done", "why", "what", "how-it-is-done", "property", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "why", "how-to-use", "how-it-is-done", "what", "property", "what", "how-it-is-done", "what", "why", "what", "what", "how-to-use", "property", "how-it-is-done", "why", "what", "what", "property", "how-it-is-done", "what", "why", "what", "how-it-is-done", "what", "what", "what", "why", "how-it-is-done", "what", "property", "how-to-use", "what", "how-it-is-done", "why", "property", "how-it-is-done", "what", "what", "what", "others", "what", "what", "what", "how-it-is-done", "how-to-use", "how-it-is-done", "what", "what", "how-it-is-done", "what", "how-it-is-done", "property", "what", "what", "what", "how-it-is-done", "how-it-is-done", "property", "what", "property", "what", "property", "why", "how-it-is-done", "what", "what", "what", "why", "property", "property", "why", "what", "how-to-use", "what", "what", "what", "what", "property", "what", "what", "how-it-is-done", "what", "how-to-use", "property", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "how-to-use", "what", "how-to-use", "what", "what", "why", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "property", "what", "how-it-is-done", "what", "how-to-use", "what", "how-it-is-done", "what", "what", "property", "what", "what", "what", "how-to-use", "what", "how-to-use", "what", "what", "property", "what", "how-to-use", "what", "why", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "why", "what", "why", "how-it-is-done", "what", "what", "what", "property", "property", "how-it-is-done", "what", "why", "what", "why", "how-it-is-done", "property", "how-it-is-done", "property", "how-it-is-done", "what", "what", "property", "what", "what", "property", "what", "what", "what", "what", "what", "what", "why", "why", "how-it-is-done", "how-it-is-done", "how-it-is-done", "how-it-is-done", "property", "what", "property", "how-to-use", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "why", "what", "what", "property", "what", "what", "what", "property", "what", "how-it-is-done", "how-it-is-done", "why", "what", "property", "property", "what", "property", "how-it-is-done", "what", "why", "property", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "why", "property", "what", "what", "what", "property", "how-it-is-done", "what", "why", "what", "what", "property", "why", "what", "what", "why", "property", "property", "how-it-is-done", "what", "why", "what", "what", "property", "how-it-is-done", "what", "what", "property", "what", "what", "what", "why", "what", "what", "property", "what", "property", "what", "what", "what", "what", "what", "what", "how-to-use", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "property", "what", "what", "why", "what", "what", "what", "what", "why", "what", "how-it-is-done", "property", "what", "how-it-is-done", "what", "property", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "what", "what", "property", "how-it-is-done", "how-it-is-done", "what", "property", "what", "why", "what", "what", "what", "what", "what", "why", "property", "what", "property", "what", "how-it-is-done", "what", "what", "what", "what", "why", "what", "why", "what", "why", "what", "how-it-is-done", "what", "what", "what", "property", "why", "property", "what", "what", "how-to-use", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "property", "property", "what", "why", "what", "what", "what", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "why", "property", "what", "why", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "what", "property", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "why", "property", "what", "property", "why", "what", "how-it-is-done", "what", "what", "what", "what", "property", "what", "how-it-is-done", "how-to-use", "what", "property", "why", "what", "what", "what", "how-it-is-done", "what", "what", "what", "property", "why", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "why", "property", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "property", "property", "what", "property", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "why", "others", "how-it-is-done", "property", "what", "property", "what", "property", "how-it-is-done", "what", "property", "what", "others", "how-it-is-done", "how-it-is-done", "why", "what", "what", "what", "property", "what", "property", "what", "how-to-use", "what", "what", "what", "property", "property", "what", "what", "property", "property", "what", "how-to-use", "why", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-to-use", "what", "why", "what", "what", "why", "what", "what", "why", "what", "property", "what", "what", "why", "property", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "why", "what", "what", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "how-it-is-done", "what", "what", "others", "why", "what", "what", "what", "what", "what", "what", "what", "what", "why", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "how-it-is-done", "why", "how-it-is-done", "why", "what", "what", "what", "what", "property", "what", "what", "what", "property", "how-it-is-done", "why", "what", "what", "what", "what", "how-to-use", "property", "what", "why", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "property", "how-to-use", "what", "what", "how-it-is-done", "property", "what", "what", "property", "what", "property", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "property", "property", "what", "what", "what", "what", "how-to-use", "what", "property", "property", "property", "what", "what", "property", "what", "what", "how-to-use", "what", "how-it-is-done", "why", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "what", "what", "property", "others", "how-it-is-done", "how-it-is-done", "what", "why", "what", "why", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "why", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "others", "property", "property", "why", "property", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "why", "property", "what", "what", "what", "what", "what", "how-it-is-done", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "why", "what", "how-to-use", "property", "why", "property", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "why", "what", "why", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "how-to-use", "what", "what", "how-to-use", "what", "why", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "how-it-is-done", "what", "why", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "property", "what", "why", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "how-it-is-done", "what", "what", "what", "why", "what", "what", "what"]}