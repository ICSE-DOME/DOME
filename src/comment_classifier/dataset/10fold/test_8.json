{"id": [503, 19254, 7132, 1842, 10377, 13421, 1421, 4891, 755, 17839, 16611, 15423, 12361, 18299, 2643, 12259, 18557, 16862, 598, 3229, 752, 390, 15005, 14757, 9849, 1962, 17598, 2136, 11724, 19447, 10084, 595, 2074, 5027, 12027, 17285, 2035, 970, 3977, 13227, 6111, 6178, 17837, 9039, 6650, 14659, 14473, 2012, 18192, 6834, 8460, 3936, 4903, 3662, 2872, 2038, 7412, 2549, 7948, 18377, 17782, 10471, 11669, 5544, 4283, 12205, 19634, 666, 8897, 11131, 15784, 19887, 4728, 10289, 17495, 15808, 14323, 15504, 1301, 18416, 15983, 2503, 10072, 12667, 19062, 14032, 10865, 13346, 11440, 1658, 4265, 6924, 19283, 16688, 4777, 1241, 18312, 13355, 12610, 8802, 10260, 5978, 19549, 4253, 5931, 18172, 872, 11150, 14870, 3595, 1158, 18378, 10324, 9263, 13542, 4451, 11436, 15661, 13131, 14969, 5646, 11774, 13142, 17797, 19226, 16057, 7228, 3578, 2434, 12838, 4345, 14474, 11717, 4886, 14849, 16394, 7856, 4194, 1115, 1738, 2968, 10850, 3601, 6229, 16813, 12855, 663, 19754, 11206, 9739, 1257, 11955, 10525, 1840, 13539, 18419, 8525, 13367, 15637, 12041, 15056, 14504, 11547, 6699, 10776, 16865, 12883, 18890, 13606, 17700, 10528, 5484, 3498, 87, 5508, 9740, 19385, 17223, 19219, 2409, 13774, 9397, 11237, 17195, 7217, 4670, 9824, 3871, 4751, 11007, 4761, 10156, 4849, 10725, 3528, 9727, 17088, 16120, 3119, 18693, 8332, 15612, 8893, 19918, 16798, 1668, 16381, 8467, 14583, 14289, 3631, 6075, 14206, 9784, 7458, 9658, 13372, 13408, 1708, 14349, 10054, 12580, 16190, 16852, 10835, 18357, 3426, 8384, 17260, 5933, 7350, 15821, 12551, 11453, 13458, 13293, 17726, 7558, 5548, 5919, 10900, 18128, 6132, 19746, 7828, 18512, 3802, 8140, 11526, 16193, 11073, 11689, 4611, 16934, 17724, 13630, 16848, 6427, 1251, 18051, 4134, 786, 17765, 4234, 13106, 2799, 11435, 9458, 10353, 14087, 11714, 18625, 16278, 920, 6232, 10549, 12545, 10988, 2946, 4746, 10392, 7199, 8898, 242, 13697, 8964, 3483, 15854, 4756, 3013, 4089, 16982, 17816, 15313, 1216, 11112, 1370, 15739, 16660, 8164, 10354, 6850, 5776, 17156, 2562, 2633, 7330, 10935, 18842, 19856, 17269, 13140, 5354, 11378, 1569, 2220, 4315, 7488, 2970, 19912, 7848, 16647, 5819, 17124, 9630, 12903, 1824, 637, 14429, 6726, 1478, 17992, 3775, 18193, 11934, 9052, 12010, 12045, 13582, 9735, 5527, 9275, 413, 5462, 2325, 15097, 13021, 3769, 11849, 10038, 979, 2383, 13683, 15800, 11591, 10692, 3552, 15367, 11661, 19771, 14846, 12554, 486, 8478, 16089, 18110, 7433, 322, 9138, 7933, 8326, 7574, 7244, 4055, 5043, 672, 8116, 15662, 16547, 4312, 14503, 12893, 18495, 4499, 3201, 3075, 9615, 8752, 13801, 18306, 19203, 18057, 13503, 8421, 704, 2956, 7240, 4309, 6542, 15897, 1066, 18016, 7635, 4297, 19373, 10707, 2238, 1834, 15667, 14962, 17884, 5222, 14075, 5079, 6271, 12200, 1544, 3658, 3115, 8130, 17242, 4651, 3722, 19269, 6200, 16710, 12165, 4326, 10860, 10483, 3572, 12555, 6769, 635, 17289, 10790, 4175, 16153, 10052, 4507, 18564, 2437, 5327, 7018, 4343, 6902, 10801, 15111, 6578, 19432, 6660, 16955, 4558, 12728, 2115, 18087, 3359, 17101, 162, 10991, 7801, 15276, 1464, 470, 10388, 13333, 18069, 17397, 14066, 15660, 3622, 18272, 6715, 4648, 18946, 3155, 1740, 15932, 13375, 18353, 19608, 16544, 1692, 9265, 3837, 18526, 15925, 17237, 8634, 2867, 137, 16001, 1528, 13479, 2741, 1915, 19872, 18081, 6606, 9102, 19927, 11736, 5305, 19210, 4191, 1964, 1791, 203, 15296, 11796, 15963, 16874, 14126, 3781, 17579, 2218, 9488, 5018, 7196, 17384, 17788, 6900, 7272, 16385, 13984, 15001, 4005, 1294, 2774, 15566, 16351, 6420, 8686, 2294, 1426, 12614, 9634, 6046, 4911, 1872, 1506, 16372, 6106, 13045, 3570, 13549, 19029, 10375, 304, 18945, 16412, 311, 15687, 3812, 9498, 17034, 14074, 4011, 11415, 15430, 5122, 7987, 955, 18288, 10411, 12709, 5068, 19233, 7918, 16643, 16794, 12507, 6190, 19318, 5603, 925, 674, 10963, 18648, 13429, 7923, 1524, 2761, 6439, 5267, 748, 9483, 13681, 17763, 16264, 11686, 5410, 11642, 3047, 5097, 17057, 14753, 18139, 16573, 9884, 16341, 8060, 5868, 11182, 89, 10327, 11009, 19668, 5556, 8975, 4096, 10178, 12708, 5917, 4296, 12866, 2847, 6781, 14284, 13709, 6429, 17670, 7364, 10341, 9528, 15964, 5516, 12931, 16007, 11809, 17499, 4725, 7034, 17883, 9479, 14080, 9593, 15038, 13733, 8409, 15703, 16370, 6125, 5197, 11746, 10134, 18093, 473, 13879, 3612, 14600, 10355, 1811, 17608, 10691, 7687, 4821, 6082, 1322, 12806, 17166, 11498, 13246, 9756, 13488, 15558, 4904, 476, 653, 13540, 4192, 19990, 834, 9929, 17274, 4193, 16996, 9181, 19557, 16560, 5070, 18212, 2666, 13457, 4478, 13258, 702, 9817, 15620, 11443, 17537, 11184, 9284, 9229, 14196, 3017, 6883, 10224, 17558, 4773, 15797, 8477, 13278, 9551, 2125, 8545, 1379, 591, 3004, 18004, 17152, 8150, 3543, 19994, 19119, 7245, 16466, 4893, 5773, 11315, 9416, 13085, 18839, 3621, 2460, 18065, 2440, 15633, 6718, 16251, 2925, 16674, 11235, 10103, 6773, 17355, 7056, 17514, 6054, 15414, 454, 14608, 13413, 9074, 6938, 7116, 3236, 5390, 5942, 6896, 9482, 18881, 19576, 4068, 19860, 18588, 8917, 3494, 3583, 7873, 9228, 8777, 14246, 19123, 16827, 11040, 4601, 197, 6876, 6157, 5634, 13154, 19631, 15903, 16634, 4525, 9785, 8968, 12549, 17984, 10787, 9577, 11066, 19481, 14844, 3130, 7722, 6090, 17777, 103, 2030, 15274, 4514, 14278, 17232, 8728, 4832, 12508, 17683, 4510, 19016, 12028, 15385, 13163, 1269, 7745, 4959, 17093, 7497, 14439, 17273, 1853, 11918, 4645, 15000, 4474, 3846, 16451, 10682, 16178, 5843, 15994, 3139, 9390, 16900, 6102, 17580, 11681, 19715, 15904, 13559, 19566, 15281, 4992, 19758, 16583, 12239, 2911, 18658, 14879, 3468, 9206, 3459, 18294, 17077, 7474, 9127, 18171, 12221, 13968, 17624, 3918, 17020, 11572, 3900, 6648, 16840, 19653, 5427, 16485, 15949, 7055, 4723, 19564, 9927, 11059, 11785, 746, 975, 4509, 7327, 13412, 8562, 16076, 17566, 16063, 19357, 19837, 11820, 1256, 19993, 14353, 19629, 19141, 8665, 8393, 1435, 12498, 15896, 14351, 12857, 6258, 9066, 17970, 8310, 2677, 4364, 16652, 10382, 2290, 2386, 11594, 12914, 17286, 16606, 1258, 12402, 584, 13119, 19021, 12374, 17650, 11632, 13164, 9532, 15305, 9921, 16017, 5269, 4109, 12446, 4714, 3, 12778, 2953, 8569, 6114, 19620, 8265, 18785, 1864, 9475, 3759, 16823, 7078, 7351, 17099, 18835, 9419, 8741, 19377, 12944, 10876, 5590, 2458, 13563, 8055, 9605, 9939, 12047, 3562, 3019, 1945, 12231, 13388, 1990, 12735, 15571, 13599, 15768, 4925, 4764, 19967, 15512, 18979, 11366, 2013, 14443, 9820, 11882, 2848, 1746, 5111, 16880, 4477, 2496, 11316, 1511, 13252, 594, 11193, 7130, 12147, 13939, 3070, 1797, 7277, 14973, 16650, 9990, 6646, 18266, 17075, 1848, 19572, 180, 1418, 8339, 16475, 16000, 5055, 1001, 16979, 16309, 13624, 214, 3913, 10016, 16314, 19839, 10662, 16596, 7230, 2357, 4770, 18175, 7276, 2200, 6436, 1818, 6959, 19208, 14128, 5960, 6035, 4006, 6849, 10804, 19012, 6012, 8257, 17235, 19834, 4497, 1862, 4809, 7833, 7162, 14395, 3318, 17256, 336, 8313, 16248, 11687, 9423, 8394, 12575, 17990, 7449, 19805, 6783, 4523, 13184, 7637, 15889, 8997, 6088, 19073, 16506, 18736, 17620, 1780, 11850, 18647, 2211, 5483, 12915, 18971, 8109, 4982, 18133, 2941, 4748, 12597, 18263, 6904, 4616, 4067, 8773, 2743, 11715, 12964, 19290, 9669, 708, 14013, 16467, 19232, 19790, 10705, 16124, 10453, 12730, 8868, 19531, 5563, 9894, 909, 12780, 11513, 17709, 15118, 4828, 6964, 18326, 3591, 7586, 4033, 11042, 1039, 10780, 11460, 5141, 992, 18550, 175, 9156, 5480, 7387, 9625, 1605, 5825, 4014, 11223, 4415, 15735, 8142, 17548, 8104, 4291, 12294, 340, 6161, 7686, 1213, 1196, 12930, 12154, 16853, 2088, 2336, 7819, 3491, 11187, 11684, 7961, 19888, 7392, 19795, 10893, 19242, 18199, 15086, 10104, 9386, 8084, 9524, 11275, 1398, 18369, 9359, 18798, 18026, 5897, 9855, 3930, 8793, 13749, 16800, 9189, 157, 13999, 13943, 154, 16897, 16452, 3334, 16915, 17684, 5128, 5176, 11678, 4086, 4177, 4792, 6629, 2008, 18415, 10162, 18287, 15943, 10955, 19356, 5235, 13828, 14622, 11243, 19465, 18659, 15105, 3691, 773, 7862, 10892, 207, 7623, 6973, 12003, 13385, 902, 11173, 313, 4803, 17633, 8881, 475, 4681, 1310, 7821, 11200, 17844, 795, 1219, 17596, 6372, 421, 1798, 7647, 19873, 19612, 6744, 9169, 8133, 7941, 17667, 11610, 4596, 11758, 11266, 5585, 3594, 19581, 12617, 4942, 7222, 19516, 220, 2656, 15840, 11564, 13808, 15050, 16066, 19975, 2945, 11047, 10213, 12066, 9067, 17010, 9341, 251, 16838, 12161, 2614, 4565, 16783, 7538, 9661, 5900, 2351, 1641, 3641, 11358, 19648, 12952, 8175, 13845, 19827, 5953, 12880, 8958, 4842, 14369, 12534, 14586, 19473, 16820, 327, 15279, 3916, 19157, 4417, 15463, 19358, 9543, 11346, 18990, 8895, 7158, 10201, 7059, 10135, 8261, 5628, 16961, 8199, 19547, 4516, 10007, 3337, 13368, 2223, 9693, 5733, 18830, 9414, 6379, 1470, 14758, 13180, 16361, 4277, 19638, 3304, 16968, 163, 12899, 10148, 16729, 4701, 7752, 15172, 9526, 19049, 9188, 1819, 19996, 13387, 2291, 9376, 19297, 19568, 1411, 11050, 18505, 15252, 16291, 19264, 17069, 10478, 12096, 16727, 19706, 2807, 9697, 2762, 2832, 192, 17266, 10347, 6194, 15371, 279, 16436, 2645, 10129, 15196, 6327, 1197, 12162, 11625, 7080, 17995, 1807, 19140, 17587, 10807, 11161, 1763, 3958, 17, 868, 15453, 15109, 2061, 8929, 4529, 18794, 11314, 14338, 768, 17412, 6631, 11569, 3108, 14164, 15349, 2099, 7838, 17142, 2842, 2829, 19446, 9967, 12153, 911, 3947, 17968, 6000, 19689, 6628, 16462, 8725, 847, 13129, 10537, 13066, 8988, 16336, 677, 19434, 3117, 19944, 15339, 11588, 15790, 17628, 7906, 18296, 8810, 776, 10367, 104, 3312, 3768, 1789, 11543, 18477, 1976, 14330, 7688, 5617, 17032, 10858, 11764, 4820, 11664, 12954, 15966, 15506, 17679, 2971, 10010, 5244, 18685, 12813, 8432, 5469, 5276, 11409, 17280, 8729, 19900, 3541, 10137, 2135, 6810, 12782, 1614, 12635, 11328, 19114, 12917, 758, 358, 16516, 12843, 1693, 3280, 17349, 4155, 18076, 14863, 11355, 5535, 2443, 403, 2916, 12186, 1372, 5858, 2466, 17244, 19955, 273, 15301, 14720, 13616, 6957, 19193, 16108, 8866, 11644, 12648, 7673, 10132, 15338, 4511, 17819, 18939, 227, 1774, 10368, 5201, 12550, 7820, 681, 4301, 10219, 11130, 18554, 13981, 767, 19206, 9307, 12185, 9, 2699, 11901, 7984, 19500, 3366, 15906, 8024, 14143, 18711, 1536, 2441, 7615, 14319, 17212, 19098, 4871, 18443, 13948, 16523, 9952, 14226, 6321, 1716, 16386, 16883, 2944, 17949, 3248, 1704, 8137, 17557, 8966, 9943, 18914, 3960, 1447, 4348, 15477, 514, 9075, 13602, 8851, 18252, 15602, 9937, 9706, 16914, 8080, 6002, 9734, 5217, 2617, 16080, 12285, 15674, 8558, 7453, 19363, 4466, 18348, 5308, 8834, 12083, 13509, 19591, 12077, 14507, 3018, 11482, 9002, 16946, 7644, 6822, 16849, 143, 18616, 3141, 12958, 6413, 181, 3652, 13547, 10815, 383, 11700, 2769, 7426, 3582, 13072, 9421, 1206, 19692, 15663, 2105, 9746, 3738, 5588, 12240, 14697, 9724, 10284, 6662, 2704, 16971, 17015, 15749, 3235, 14471, 16131, 10191, 951, 16478, 8550, 13553, 4532, 18481, 7505, 13665, 18167, 15448, 9480, 18957, 10615, 2473, 389, 3716, 2489, 15106, 18701, 5581, 2071, 15250, 12311, 2649, 19369, 18207, 6099, 11831, 2101, 4136, 4430, 7100, 18409, 3377, 18162, 4256, 13900, 8168, 15635, 969, 18245, 16999, 1726, 3151, 3786, 2908, 6627, 5491, 3537, 12441, 2323, 500, 11071, 13824, 15440, 7740, 18314, 16438, 18338, 8869, 19686, 9523, 1730, 14976, 13950, 634, 3129, 16499, 5839, 14166, 17402, 5433, 5518, 6666, 638, 123, 4980, 3979, 3903, 561, 1064, 8544, 16423, 1645, 18116, 13922, 16929, 2795, 4149, 28, 8888, 4984, 5725, 5766, 5799, 16691, 3163, 10109, 14061, 19603, 16723, 12984, 18240, 17396, 18789, 228, 14884, 14193, 8279, 7994, 457, 19048, 4765, 9542, 7299, 11063, 18706, 10460, 10245, 7742, 8355, 13701, 12683, 6083, 10665, 8269, 15075, 4224, 10014, 9861, 12605, 12156, 8943, 11716, 12516, 19108, 16518, 2281, 1675, 8742, 13682, 6498, 14359, 10678, 19414, 14155, 5444, 6224, 14426, 2424, 19133, 12128, 5208, 12012, 918, 6261, 296, 10730, 1656, 18052, 14689, 8860, 9574, 2239, 337, 6089, 19321, 8559, 9333, 14606, 18364, 19308, 6303, 14012, 4239, 18726, 15780, 17308, 14741, 15345, 4223, 1920, 7161, 4934, 2935, 6582, 13726, 10031, 16922, 2004, 19376, 17462, 19176, 4260, 6029, 14919, 18136, 16951, 10105, 13143, 1509, 10614, 14325, 8615, 15206, 5325, 19826, 11530, 15561, 12896, 7767, 7131, 13150, 17428, 18609, 1314, 16335, 10902, 12619, 1286, 10321, 10421, 17205, 9115, 9641, 1777, 19257, 16455, 1606, 16334, 7546, 774, 17510, 2372, 12145, 4093, 14361, 2333, 18063, 3956, 13124, 525, 13420, 6922, 7805, 3836, 15457, 15753, 17369, 14275, 18324, 15508, 8044, 6784, 7804, 7047, 9566, 8386, 5242, 10624, 2302, 318, 8245, 5845, 18131, 8259, 10788, 11990, 19017, 3417, 2713, 2996, 7103, 1469, 19786, 2896, 12909, 1771, 15098, 7785, 14532, 14221, 808, 8504, 3293, 6330, 16577, 6182, 14307, 9357, 12544, 19550, 13587, 18497, 9242, 6039, 8250, 13886, 6741, 2134, 11030, 14914, 12921, 15580, 4262, 10847, 5142, 2129, 18005, 16445, 1407, 5820, 6267, 5506, 12214, 1785, 1137, 18451, 8216, 4449, 17708, 16616, 7238, 14415, 15061, 11511, 6226, 4794, 3764, 12966, 6041, 19729, 5721, 3250, 4250, 10803, 15829, 11088, 88, 15655, 11260, 5673, 11198, 16659, 3696, 8361, 5157, 16802, 3439, 15235, 12009, 16457, 17452], "code": ["public void addInterPassOrderingConstraint(DetectorOrderingConstraint constraint){\n  interPassConstraintList.add(constraint);\n}\n", "public SpaceTypeDescriptorBuilder ( String typeName , SpaceTypeDescriptor superTypeDescriptor ) { if ( typeName == null || typeName . length ( ) == NUM_ ) throw new IllegalArgumentException ( STR_ ) ; if ( typeName . equals ( ROOT_TYPE_NAME ) ) throw new IllegalArgumentException ( STR_ + ROOT_TYPE_NAME + STR_ ) ; this . _typeName = typeName ; this . _superTypeDescriptor = superTypeDescriptor ; this . _fixedProperties = new TreeMap < String , SpacePropertyDescriptor > ( ) ; this . _indexes = new HashMap < String , SpaceIndex > ( ) ; this . _fifoGroupingIndexes = new HashSet < String > ( ) ; this . _storageType = StorageType . DEFAULT ; this . _blobstoreEnabled = PojoDefaults . BLOBSTORE_ENABLED ; }", "  private void runArchive() {\n    buildCaches();\n    stableIDMapper = new StableIDMapper(conf, cache);\n    archive(false, false, stableIDMapper.getRetrofitMappingSessionID());\n  }\n", "public OvhAsyncTask<Long> packName_addressMove_move_POST(String packName, OvhCreation creation, Boolean keepCurrentNumber, OvhLandline landline, Date moveOutDate, String offerCode, OvhProviderEnum provider) throws IOException {\n\t\tString qPath = \"/pack/xdsl/{packName}/addressMove/move\";\n\t\tStringBuilder sb = path(qPath, packName);\n\t\tHashMap<String, Object>o = new HashMap<String, Object>();\n\t\taddBody(o, \"creation\", creation);\n\t\taddBody(o, \"keepCurrentNumber\", keepCurrentNumber);\n\t\taddBody(o, \"landline\", landline);\n\t\taddBody(o, \"moveOutDate\", moveOutDate);\n\t\taddBody(o, \"offerCode\", offerCode);\n\t\taddBody(o, \"provider\", provider);\n\t\tString resp = exec(qPath, \"POST\", sb.toString(), o);\n\t\treturn convertTo(resp, t7);\n\t}", "\tpublic void removeRole(RoleInfo role) {\n\t\tthis.roleSet.remove(role);\n\t}\n", "        public boolean matches(EVirtualIConEvent eventObject) {\n                if(classEvent != null) {\n                        return classEvent.isAssignableFrom(EVirtualIConEvent.class);\n                } else {\n                        if (eventObject instanceof EVirtualIConEvent) {\n                                String event = ((EVirtualIConEvent) eventObject).getNameEvent();\n                                return (event == null);\n                        }\n                }\n                return false;\n        }\n", "\tpublic int compareTo(Object obj) {\n\t\tint slcomp = getStartLevel() - ((AbstractBundle) obj).getStartLevel();\n\t\tif (slcomp != 0) {\n\t\t\treturn slcomp;\n\t\t}\n\t\tlong idcomp = getBundleId() - ((AbstractBundle) obj).getBundleId();\n\t\treturn (idcomp < 0L) ? -1 : ((idcomp > 0L) ? 1 : 0);\n\t}\n", "    public Population selectFromPopulation(Population pop) {\n        Population toReturn = arg1.selectFromPopulation(pop);\n        toReturn.removeAllCellsBut(arg2.selectFromPopulation(pop));\n        return toReturn;\n    }\n", "public static Date parseDate(String d) throws ParseException {\n  return parseDate(d,DEFAULT_DATE_FORMATS);\n}\n", "protected static TLCState BACK_TO_STATE ( int number , String modelName ) { TLCState state = new TLCState ( number , modelName ) ; state . isBackToState = BOOL_ ; return state ; }", "public boolean isEncodingVerificationEnabled ( ) { return enableEncodingVerification ; }", "public CThreadInformationPanel ( final CDebugPerspectiveModel debugPerspectiveModel ) { super ( new BorderLayout ( ) ) ; Preconditions . checkNotNull ( debugPerspectiveModel , STR_ ) ; m_debugPerspectiveModel = debugPerspectiveModel ; add ( new JScrollPan", "    public void setReturnValue(MethodDescriptor methodDesc, TypeQualifierValue tqv, TypeQualifierAnnotation tqa) {\n        Map<TypeQualifierValue, TypeQualifierAnnotation> map = returnValueMap.get(methodDesc);\n        if (map == null) {\n            map = new HashMap<TypeQualifierValue, TypeQualifierAnnotation>();\n            returnValueMap.put(methodDesc, map);\n        }\n        map.put(tqv, tqa);\n\n        if (DEBUG) {\n            System.out.println(\"tqdb: \" + methodDesc + \" for \" + tqv + \" ==> \" + tqa);\n        }\n    }\n", "private Uuid newLeaseID ( ) { return resourceIdGenerator . generate ( ) ; }", "default <T>T methodWriter(Class<T> tClass,Class... additional){\n  Class[] interfaces=ObjectUtils.addAll(tClass,additional);\n  return (T)Proxy.newProxyInstance(tClass.getClassLoader(),interfaces,new MethodWriterInvocationHandler(this));\n}\n", "void refCountChanged(Long address,boolean decRefCount,int rc){\n  if (!trackReferenceCounts())   return;\n  final Object owner=refCountOwner.get();\n  if (owner == SKIP_REF_COUNT_TRACKING) {\n    return;\n  }\n  List<RefCountChangeInfo> list=stacktraces.get(address);\n  if (list == null) {\n    List<RefCountChangeInfo> newList=new ArrayList<RefCountChangeInfo>();\n    refCountChangedTestHook(address,decRefCount,rc);\n    List<RefCountChangeInfo> old=stacktraces.putIfAbsent(address,newList);\n    if (old == null) {\n      list=newList;\n    }\n else {\n      list=old;\n    }\n  }\n  if (decRefCount) {\n    if (owner != null) {\nsynchronized (list) {\n        for (int i=0; i < list.size(); i++) {\n          RefCountChangeInfo info=list.get(i);\n          if (owner instanceof RegionEntry) {\n            if (owner == info.getOwner()) {\n              if (info.getUseCount() > 0) {\n                info.decUseCount();\n              }\n else {\n                list.remove(i);\n              }\n              return;\n            }\n          }\n else           if (owner.equals(info.getOwner())) {\n            if (info.getUseCount() > 0) {\n              info.decUseCount();\n            }\n else {\n              list.remove(i);\n            }\n            return;\n          }\n        }\n      }\n    }\n  }\n  if (list == LOCKED) {\n    MemoryAllocatorImpl.debugLog(\"refCount \" + (decRefCount ? \"deced\" : \"inced\") + \" after orphan detected for @\"+ Long.toHexString(address),true);\n    return;\n  }\n  RefCountChangeInfo info=new RefCountChangeInfo(decRefCount,rc,owner);\nsynchronized (list) {\n    for (    RefCountChangeInfo e : list) {\n      if (e.isSameCaller(info)) {\n        e.incUseCount();\n        return;\n      }\n    }\n    list.add(info);\n  }\n}\n", "public Plotter ( ) { this ( STR_ ) ; }", "private JsonValue retrieveObject ( String resourceID , String id ) throws ResourceException { return performRead ( retrieveFullID ( resourceID , id ) ) ; }", "private void calcYValueSum(){\n  mYValueSum=0;\n  for (int i=0; i < mYVals.size(); i++) {\n    Entry e=mYVals.get(i);\n    if (e != null)     mYValueSum+=Math.abs(e.getVal());\n  }\n}\n", "public static Object addAll(final Object array1, final Object array2) {\n        Object joinedArray;\n        if (array1 == null) {\n            if (array2.getClass().isArray()) {\n                joinedArray = array2;\n            } else {\n                joinedArray = Array.newInstance(array2.getClass(), 1);\n                Array.set(joinedArray, 0, array2);\n            }\n        } else if (array2 == null) {\n            if (array1.getClass().isArray()) {\n                joinedArray = array1;\n            } else {\n                joinedArray = Array.newInstance(array1.getClass(), 1);\n                Array.set(joinedArray, 0, array1);\n            }\n        } else {\n            int length1 = 1;\n            if (array1.getClass().isArray()) {\n                length1 = Array.getLength(array1);\n            }\n            int length2 = 1;\n            if (array2.getClass().isArray()) {\n                length2 = Array.getLength(array2);\n            }\n            if (array1.getClass().isArray()) {\n                joinedArray = Array.newInstance(array1.getClass().getComponentType(), length1 + length2);\n            } else {\n                joinedArray = Array.newInstance(array1.getClass(), length1 + length2);\n            }\n            if (array1.getClass().isArray()) {\n                System.arraycopy(array1, 0, joinedArray, 0, length1);\n            } else {\n                Array.set(joinedArray, 0, array1);\n            }\n            if (array2.getClass().isArray()) {\n                System.arraycopy(array2, 0, joinedArray, length1, length2);\n            } else {\n                Array.set(joinedArray, length1, array2);\n            }\n        }\n        return joinedArray;\n    }", "\tpublic boolean isFilterActive() {\n\t\treturn filter != null && filter.isActive;\n\t}\n", "public BufferedReadOnlyIterator(int fromIndex){\n  _externalIteratorExhausted=true;\n  _externalIterator=null;\n  _bufferIterator=_buffer.listIterator(fromIndex);\n}\n", "public ThresholdValues ( double [ ] range ) { if ( range . length != NUM_ ) throw new IllegalArgumentException ( STR_ ) ; if ( range [ NUM_ ] >= range [ NUM_ ] ) throw new IllegalArgumentException ( STR_ ) ; this . lowThreshold = range [ NUM_ ] ; this . c", "int checkAndSendMtcToSession(Session session, JsTopicMessageController msgControl, MessageToClient mtc, Object payload) throws SessionException {\n\t\tif (session != null) {\n\t\t\tif (session.isOpen()) {\n\t\t\t\ttry {\n\t\t\t\t\tif (null != msgControl) {\n\t\t\t\t\t\tcheck", "public void init(boolean forEncryption,CipherParameters params) throws IllegalArgumentException {\n  this.forEncryption=forEncryption;\n  if (params instanceof ParametersWithIV) {\n    ParametersWithIV ivParam=(ParametersWithIV)params;\n    byte[] iv=ivParam.getIV();\n    if (iv.length < IV.length) {\n      System.arraycopy(iv,0,IV,IV.length - iv.length,iv.length);\n      for (int i=0; i < IV.length - iv.length; i++) {\n        IV[i]=0;\n      }\n    }\n else {\n      System.arraycopy(iv,0,IV,0,IV.length);\n    }\n    reset();\n    cipher.init(true,ivParam.getParameters());\n  }\n else {\n    reset();\n    cipher.init(true,params);\n  }\n}\n", "private void checkMemberAccess(int type){\n  SecurityManager security=System.getSecurityManager();\n  if (security != null) {\n    security.checkMemberAccess(this,type);\n    String packageName=getPackageName();\n    if (!packageName.isEmpty()) {\n      security.checkPackageAccess(packageName);\n    }\n  }\n}\n", "public int compareTo ( Issue otherIssue ) { return this . getKey ( ) . compareTo ( otherIssue . getKey ( ) ) ; }", "private ArrayList<FixedBitSet> ppTermsBitSets(PhrasePositions[] rpp,HashMap<Term,Integer> tord){\n  ArrayList<FixedBitSet> bb=new ArrayList<>(rpp.length);\n  for (  PhrasePositions pp : rpp) {\n    FixedBitSet b=new FixedBitSet(tord.size());\n    Integer ord;\n    for (    Term t : pp.terms) {\n      if ((ord=tord.get(t)) != null) {\n        b.set(ord);\n      }\n    }\n    bb.add(b);\n  }\n  return bb;\n}\n", "    private void addExtension(final String extension) {\n        if(filters == null) {\n            filters = new Hashtable<String,GrapherFileFilter>(5);\n        }\n        filters.put(extension.toLowerCase(), this);\n        fullDescription = null;\n    }\n", "private void processVersion ( String versionString ) { try { StringTokenizer tokens = new StringTokenizer ( versionString , STR_ ) ; majorVersion = Integer . parseInt ( tokens . nextToken ( ) ) ; minorVersion = Integer . parseInt ( tokens . nextToken ( ) ) ; this . versionString = versionString ; } catch ( Exception e ) { } }", "public void marshall(ActionTypeId actionTypeId, ProtocolMarshaller protocolMarshaller) {\n\n        if (actionTypeId == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(actionTypeId.getCategory(), CATEGORY_BINDING);\n            protocolMarshaller.marshall(actionTypeId.getOwner(), OWNER_BINDING);\n            protocolMarshaller.marshall(actionTypeId.getProvider(), PROVIDER_BINDING);\n            protocolMarshaller.marshall(actionTypeId.getVersion(), VERSION_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public static String emptyIfEqual(String string,String test){\n  return test != null && test.equals(string) ? EMPTY : string;\n}\n", "    public boolean isFixedSize() {\n        return fixedSize;\n    }\n", "private IChemFile readChemFile(IChemFile file) {\n        IChemSequence chemSequence = file.getBuilder().newInstance(IChemSequence.class);\n\n        int number_of_atoms;\n        StringTokenizer tokenizer;\n\n        try {\n            String line = input.readLine();\n            while (line.startsWith(\"#\"))\n                line = input.readLine();\n            /*\n             * while (input.ready() && line != null) {\n             */\n            //        logger.debug(\"lauf\");\n            // parse frame by frame\n            tokenizer = new StringTokenizer(line, \"\\t ,;\");\n\n            String token = tokenizer.nextToken();\n            number_of_atoms = Integer.parseInt(token);\n            String info = input.readLine();\n\n            IChemModel chemModel = file.getBuilder().newInstance(IChemModel.class);\n            IAtomContainerSet setOfMolecules = file.getBuilder().newInstance(IAtomContainerSet.class);\n\n            IAtomContainer m = file.getBuilder().newInstance(IAtomContainer.class);\n            m.setTitle(info);\n\n            String[] types = new String[number_of_atoms];\n            double[] d = new double[number_of_atoms];\n            int[] d_atom = new int[number_of_atoms]; // Distances\n            double[] a = new double[number_of_atoms];\n            int[] a_atom = new int[number_of_atoms]; // Angles\n            double[] da = new double[number_of_atoms];\n            int[] da_atom = new int[number_of_atoms]; // Diederangles\n            //Point3d[] pos = new Point3d[number_of_atoms]; // calculated positions\n\n            int i = 0;\n            while (i < number_of_atoms) {\n                line = input.readLine();\n                //          logger.debug(\"line:\\\"\"+line+\"\\\"\");\n                if (line == null) break;\n                if (line.startsWith(\"#\")) {\n                    // skip comment in file\n                } else {\n                    d[i] = 0d;\n                    d_atom[i] = -1;\n                    a[i] = 0d;\n                    a_atom[i] = -1;\n                    da[i] = 0d;\n                    da_atom[i] = -1;\n\n                    tokenizer = new StringTokenizer(line, \"\\t ,;\");\n                    int fields = tokenizer.countTokens();\n\n                    if (fields < Math.min(i * 2 + 1, 7)) {\n                        // this is an error but cannot throw exception\n                    } else if (i == 0) {\n                        types[i] = tokenizer.nextToken();\n                        i++;\n                    } else if (i == 1) {\n                        types[i] = tokenizer.nextToken();\n                        d_atom[i] = Integer.valueOf(tokenizer.nextToken()) - 1;\n                        d[i] = Double.valueOf(tokenizer.nextToken());\n                        i++;\n                    } else if (i == 2) {\n                        types[i] = tokenizer.nextToken();\n                        d_atom[i] = Integer.valueOf(tokenizer.nextToken()) - 1;\n                        d[i] = Double.valueOf(tokenizer.nextToken());\n                        a_atom[i] = Integer.valueOf(tokenizer.nextToken()) - 1;\n                        a[i] = Double.valueOf(tokenizer.nextToken());\n                        i++;\n                    } else {\n                        types[i] = tokenizer.nextToken();\n                        d_atom[i] = Integer.valueOf(tokenizer.nextToken()) - 1;\n                        d[i] = Double.valueOf(tokenizer.nextToken());\n                        a_atom[i] = Integer.valueOf(tokenizer.nextToken()) - 1;\n                        a[i] = Double.valueOf(tokenizer.nextToken());\n                        da_atom[i] = Integer.valueOf(tokenizer.nextToken()) - 1;\n                        da[i] = Double.valueOf(tokenizer.nextToken());\n                        i++;\n                    }\n                }\n            }\n\n            // calculate cartesian coordinates\n            Point3d[] cartCoords = ZMatrixTools.zmatrixToCartesian(d, d_atom, a, a_atom, da, da_atom);\n\n            for (i = 0; i < number_of_atoms; i++) {\n                m.addAtom(file.getBuilder().newInstance(IAtom.class, types[i], cartCoords[i]));\n            }\n\n            //        logger.debug(\"molecule:\"+m);\n\n            setOfMolecules.addAtomContainer(m);\n            chemModel.setMoleculeSet(setOfMolecules);\n            chemSequence.addChemModel(chemModel);\n            line = input.readLine();\n            file.addChemSequence(chemSequence);\n        } catch (IOException e) {\n            // should make some noise now\n            file = null;\n        }\n        return file;\n    }", "\tpublic void createInitialLayout(IPageLayout layout) {\n\t\tRCPUtil.addAllPerspectiveShortcuts(layout);\n\t}\n", "public boolean hasData ( final BigInteger offset , final int size ) { return debugger . getProcessManager ( ) . getMemory ( ) . hasData ( offset . longValue ( ) , size ) ; }", "    public void show() {\n        this.graph = this.engine.getWorkflow().getGraph();\n        this.nodes = this.graph.getNodes();\n        this.inputNodes = GraphUtil.getInputNodes(this.graph);\n        this.outputNodes = GraphUtil.getOutputNodes(this.graph);\n\n        this.inputPanel.setParameterNodes(this.inputNodes);\n        this.inputPanel.setMetadata(this.graph.getInputMetadata());\n        this.outputPanel.setParameterNodes(this.outputNodes);\n        this.outputPanel.setMetadata(this.graph.getOutputMetadata());\n\n        this.dialog.show();\n    }\n", "void generateMultiMcfClassCode(Definition def, String className, int num)\n   {\n      if (className == null || className.equals(\"\"))\n         return;\n      if (num < 0 || num + 1 > def.getMcfDefs().size())\n         return;\n      try\n      {\n\n         String clazzName = this.getClass().getPackage().getName() + \".code.\" + className + \"CodeGen\";\n\n         String javaFile =\n               McfDef.class.getMethod(\"get\" + className + \"Class\").invoke(def.getMcfDefs().get(num), (Object[]) null)\n                     + \".java\";\n         FileWriter fw;\n         fw = Utils.createSrcFile(javaFile, def.getRaPackage(), def.getOutputDir());\n\n         Class<?> clazz = Class.forName(clazzName, true, Thread.currentThread().getContextClassLoader());\n         AbstractCodeGen codeGen = (AbstractCodeGen) clazz.newInstance();\n         codeGen.setNumOfMcf(num);\n\n         codeGen.generate(def, fw);\n\n         fw.flush();\n         fw.close();\n      }\n      catch (Exception e)\n      {\n         e.printStackTrace();\n      }\n   }", "public void extend(String variable,Collection<Value> vals){\n  Set<Assignment> newGroundings=new HashSet<Assignment>();\n  for (  Assignment g : groundings) {\n    for (    Value v : vals) {\n      newGroundings.add(new Assignment(g,variable,v));\n    }\n  }\n  groundings=newGroundings;\n}\n", "public static String urlFormDecode(final String s)\n        {\n        if (StringUtils.isBlank(s))\n            {\n            LOG.warn(\"Could not encode blank string\");\n            throw new IllegalArgumentException(\"Blank string\");\n            }\n        try\n            {\n            return URLDecoder.decode(s, \"UTF-8\");\n            }\n        catch (final UnsupportedEncodingException e)\n            {\n            LOG.error (\"Could not encode: \" + s, e);            \n            return s;\n            }\n        }", "public static CmsResource initResource(\n        CmsObject cms,\n        String resourceName,\n        HttpServletRequest req,\n        HttpServletResponse res)\n    throws CmsException {\n\n        return OpenCmsCore.getInstance().initResource(cms, resourceName, req, res);\n    }", "private Optional<Class<?>> unwrap(Object pageObject){\n  Class<?> wrappedClass=pageObject.getClass();\n  while (wrappedClass != null && !wrappedClass.isAnnotationPresent(PageObject.class)) {\n    wrappedClass=wrappedClass.getSuperclass();\n  }\n  return Optional.ofNullable(wrappedClass);\n}\n", "void validateAssignee ( Change change , Account assignee ) throws ValidationException ;", "public static Range findStackedRangeBounds(CategoryDataset dataset,double base){\n  ParamChecks.nullNotPermitted(dataset,\"dataset\");\n  Range result=null;\n  double minimum=Double.POSITIVE_INFINITY;\n  double maximum=Double.NEGATIVE_INFINITY;\n  int categoryCount=dataset.getColumnCount();\n  for (int item=0; item < categoryCount; item++) {\n    double positive=base;\n    double negative=base;\n    int seriesCount=dataset.getRowCount();\n    for (int series=0; series < seriesCount; series++) {\n      Number number=dataset.getValue(series,item);\n      if (number != null) {\n        double value=number.doubleValue();\n        if (value > 0.0) {\n          positive=positive + value;\n        }\n        if (value < 0.0) {\n          negative=negative + value;\n        }\n      }\n    }\n    minimum=Math.min(minimum,negative);\n    maximum=Math.max(maximum,positive);\n  }\n  if (minimum <= maximum) {\n    result=new Range(minimum,maximum);\n  }\n  return result;\n}\n", "public void marshall(ListComplianceStatusRequest listComplianceStatusRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (listComplianceStatusRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(listComplianceStatusRequest.getPolicyId(), POLICYID_BINDING);\n            protocolMarshaller.marshall(listComplianceStatusRequest.getNextToken(), NEXTTOKEN_BINDING);\n            protocolMarshaller.marshall(listComplianceStatusRequest.getMaxResults(), MAXRESULTS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void marshall(AssociateIpGroupsRequest associateIpGroupsRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (associateIpGroupsRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n       ", "    public int getNumber(String key, int index) {\n\n        int[] value = numMap.get(key);\n        if (value == null && key != null) {\n            value = numMap.get(null);\n        }\n        return (value == null ? 0 : value[index]);\n    }\n", "@SideOnly(Side.CLIENT) public void addInformation(List<String> list,C crop,boolean debug){\n  for (  Season season : crop.getSeasons()) {\n    list.add(season.getDisplayName());\n  }\n}\n", "public OnLocationForward ( Object sender , NavLocation lastValue , NavLocation currentValue , boolean clearHistory , NavLocation locationWhereHistoryClearedUpTo , Navigator navigator ) { super ( lastValue , currentValue ) ; this . sender = sender ; this . clearHistory = clearHistory ; this . locationWhereHistoryClearedUpTo = locationWhereHistoryClearedUpTo ; this . navigator = navigator ; }", "public void check(){\n  Response<Set<String>> serversResp=clusterService.listOnlineServers();\n  if (!serversResp.isSuccess()) {\n    Logs.error(\"failed to get all online servers, cause: {}\",serversResp.getErr());\n    return;\n  }\n  try {\n    Set<String> allServers=serversResp.getData();\n    final Set<String> failedServers=Sets.newHashSet();\n    doCheck(allServers,failedServers);\n    removeFailedServers(failedServers);\n  }\n catch (  InterruptedException e) {\n    Logs.error(\"failed to check online servers: {}\",Throwables.getStackTraceAsString(e));\n  }\n}\n", "private void stopActivityMonitor(){\n\t\ttry {\n\t\t\t// Remove the monitor added during startup\n\t\t\tif (activityMonitor != null) {\n\t\t\t\tinst.removeMonitor(activityMonitor);\n\t\t\t\tactivityMonitor = null;\n\t\t\t}\n\t\t} catch (Exception ignored) {}\n\n\t}", "public static <T1, T2> BiPredicate<T1, T2> softenBiPredicate(final CheckedBiPredicate<T1, T2> fn) {\n        return (t1, t2) -> {\n            try {\n                return fn.test(t1, t2);\n            } catch (final Throwable e) {\n                throw throwSoftenedException(e);\n            }\n        };\n    }", "public GalleryList getList(String userId, int perPage, int page, EnumSet<JinxConstants.PhotoExtras> extras) throws JinxException {\n    JinxUtils.validateParams(userId);\n    Map<String, String> params = new TreeMap<>();\n    params.put(\"method\", \"flickr.galleries.getList\");\n    params.put(\"user_id\", userId);\n    if (perPage > 0) {\n      params.put(\"per_page\", Integer.toString(perPage));\n    }\n    if (page > 0) {\n      params.put(\"page\", Integer.toString(page));\n    }\n    if (!JinxUtils.isNullOrEmpty(extras)) {\n      params.put(\"primary_photo_extras\", JinxUtils.buildCommaDelimitedList(extras));\n    }\n    return jinx.flickrGet(params, GalleryList.class);\n  }", "static ClassInfoList getAllInterfacesOrAnnotationClasses(final Collection<ClassInfo> classes,\n            final ScanSpec scanSpec) {\n        return new ClassInfoList(ClassInfo.filterClassInfo(classes, scanSpec, /* strictWhitelist = */ true,\n                ClassType.INTERFACE_OR_ANNOTATION), /* sortByName = */ true);\n    }", "public static EnumSet<FacetRangeInclude> parseParam(final String[] param){\n  if (null == param || 0 == param.length)   return EnumSet.of(LOWER);\n  final EnumSet<FacetRangeInclude> include=EnumSet.noneOf(FacetRangeInclude.class);\n  for (  final String o : param) {\n    include.add(FacetRangeInclude.get(o));\n  }\n  if (include.contains(FacetRangeInclude.ALL))   return EnumSet.allOf(FacetRangeInclude.class);\n  return include;\n}\n", "@Override public HashMap<String,String> createMap(){\n  HashMap<String,String> queryMap=new HashMap<>();\n  if (query != null) {\n    queryMap.put(\"q\",query);\n  }\n  if (tags != null) {\n    queryMap.put(\"tags\",tags);\n  }\n  if (filter != null) {\n    queryMap.put(\"filter\",filter.toString());\n  }\n  if (license != null) {\n    queryMap.put(\"license\",license.toString());\n  }\n  if (bpmFrom != -1) {\n    queryMap.put(\"bpm[from]\",String.valueOf(bpmFrom));\n  }\n  if (bpmTo != -1) {\n    queryMap.put(\"bpm[to]\",String.valueOf(bpmTo));\n  }\n  if (durationFrom != -1) {\n    queryMap.put(\"duration[from]\",String.valueOf(durationFrom));\n  }\n  if (durationTo != -1) {\n    queryMap.put(\"duration[to]\",String.valueOf(durationTo));\n  }\n  if (createdAtFrom != null) {\n    queryMap.put(\"created_at[from]\",createdAtFrom);\n  }\n  if (createdAtTo != null) {\n    queryMap.put(\"created_at[to]\",createdAtTo);\n  }\n  if (ids != null) {\n    queryMap.put(\"ids\",ids);\n  }\n  if (createdAtTo != null) {\n    queryMap.put(\"genres\",genres);\n  }\n  if (createdAtTo != null) {\n    queryMap.put(\"types\",types);\n  }\n  if (queryMap.size() > 0) {\n    queryMap.put(Pager.LIMIT,String.valueOf(limit));\n    return queryMap;\n  }\n else {\n    return null;\n  }\n}\n", "private void responseClient(RequestResponseClass clazz, Object listener, User user) {\n\t\tif(!clazz.isResponseToClient()) return;\n\t\tString command = clazz.getResponseCommand();\n\t\tISFSObject params = (ISFSObject) new ParamTransformer(context)\n\t\t        .transform(listener).getObject();\n\t\tsend(command, params, user);\n\t}", "public boolean prepareRevoke(PersistentMemberPattern pattern,DistributionManager dm,InternalDistributedMember sender){\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Preparing revoke if pattern {}\",pattern);\n  }\n  PendingRevokeListener membershipListener=new PendingRevokeListener(pattern,sender,dm);\nsynchronized (this) {\n    for (    MemberRevocationListener listener : revocationListeners) {\n      if (listener.matches(pattern)) {\n        return false;\n      }\n    }\n    pendingRevokes.put(pattern,membershipListener);\n  }\n  Set members=dm.addMembershipListenerAndGetDistributionManagerIds(membershipListener);\n  if (!members.contains(sender) && sender.equals(dm.getId())) {\n    cancelRevoke(pattern);\n    return false;\n  }\n  return true;\n}\n", "    public MutableVector4f getCol(int col, MutableVector4f store) {\n        if (store == null)\n            store = new Vector4f();\n        \n        return store.set(get(0, col), get(1, col), get(2, col), get(3, col));\n    }\n", "private static ClassNode makeType ( ClassNode cn , boolean usingClass ) { if ( usingClass ) { ClassNode clazzType = CLASS_Type . getPlainNodeReference ( ) ; clazzType . setGenericsTypes ( new GenericsType [ ] { new GenericsType ( cn ) } ) ; return clazzType ; } else { return cn ; } }", "private void resizeAndReadVector ( RawByteCache cache , String key , int size , int chunkSize , int newSize ) throws IOException { logger . info ( STR_ + key + STR_ + size ) ; byte [ ] vector = makeVector ( size ) ; cache . allocate ( key ) ; int offset =", "public SpinJsonDataFormatException unableToParseValue(String expectedType, JsonNodeType type) {\n    return new SpinJsonDataFormatException(exceptionMessage(\"002\", \"Expected '{}', got '{}'\", expectedType, type.toString()));\n  }", "@SuppressWarnings(\"signedness\") public static String toUnsignedString(@Unsigned short s,int radix){\n  return Long.toString(toUnsignedLong(s),radix);\n}\n", "void tokenize(String pat, Vector targetStrings)\n          throws javax.xml.transform.TransformerException\n  {\n\n    m_compiler.m_currentPattern = pat;\n    m_patternMapSize = 0; \n\n    // This needs to grow too.  Use a conservative estimate that the OpMapVector\n    // needs about five time the length of the input path expression - to a\n    // maximum of MAXTOKENQUEUESIZE*5.  If the OpMapVector needs to grow, grow\n    // it freely (second argument to constructor).\n    int initTokQueueSize = ((pat.length() < OpMap.MAXTOKENQUEUESIZE)\n                                 ? pat.length() :  OpMap.MAXTOKENQUEUESIZE) * 5;\n    m_compiler.m_opMap = new OpMapVector(initTokQueueSize,\n                                         OpMap.BLOCKTOKENQUEUESIZE * 5,\n                                         OpMap.MAPINDEX_LENGTH);\n\n    int nChars = pat.length();\n    int startSubstring = -1; \n    int posOfNSSep = -1;\n    boolean isStartOfPat = true;\n    boolean isAttrName = false;\n    boolean isNum = false;\n\n    // Nesting of '[' so we can know if the given element should be\n    // counted inside the m_patternMap.\n    int nesting = 0;\n\n    // char[] chars = pat.toCharArray();\n    for (int i = 0; i < nChars; i++)\n    {\n      char c = pat.charAt(i);\n\n      switch (c)\n      {\n      case '\\\"' :\n      {\n        if (startSubstring != -1)\n        {\n          isNum = false;\n          isStartOfPat = mapPatternElemPos(nesting, isStartOfPat, isAttrName);\n          isAttrName = false;\n\n          if (-1 != posOfNSSep)\n          {\n            posOfNSSep = mapNSTokens(pat, startSubstring, posOfNSSep, i);\n          }\n          else\n          {\n            addToTokenQueue(pat.substring(startSubstring, i));\n          }\n        }\n\n        startSubstring = i;\n\n        for (i++; (i < nChars) && ((c = pat.charAt(i)) != '\\\"'); i++);\n\n        if (c == '\\\"' && i < nChars)\n        {\n          addToTokenQueue(pat.substring(startSubstring, i + 1));\n\n          startSubstring = -1;\n        }\n        else\n        {\n          m_processor.error(XPATHErrorResources.ER_EXPECTED_DOUBLE_QUOTE,\n                            null);  //\"misquoted literal... expected double quote!\");\n        }\n      }\n      break;\n      case '\\'' :\n        if (startSubstring != -1)\n        {\n          isNum = false;\n          isStartOfPat = mapPatternElemPos(nesting, isStartOfPat, isAttrName);\n          isAttrName = false;\n\n          if (-1 != posOfNSSep)\n          {\n            posOfNSSep = mapNSTokens(pat, startSubstring, posOfNSSep, i);\n          }\n          else\n          {\n            addToTokenQueue(pat.substring(startSubstring, i));\n          }\n        }\n\n        startSubstring = i;\n\n        for (i++; (i < nChars) && ((c = pat.charAt(i)) != '\\''); i++);\n\n        if (c == '\\'' && i < nChars)\n        {\n          addToTokenQueue(pat.substring(startSubstring, i + 1));\n\n          startSubstring = -1;\n        }\n        else\n        {\n          m_processor.error(XPATHErrorResources.ER_EXPECTED_SINGLE_QUOTE,\n                            null);  //\"misquoted literal... expected single quote!\");\n        }\n        break;\n      case 0x0A :\n      case 0x0D :\n      case ' ' :\n      case '\\t' :\n        if (startSubstring != -1)\n        {\n          isNum = false;\n          isStartOfPat = mapPatternElemPos(nesting, isStartOfPat, isAttrName);\n          isAttrName = false;\n\n          if (-1 != posOfNSSep)\n          {\n            posOfNSSep = mapNSTokens(pat, startSubstring, posOfNSSep, i);\n          }\n          else\n          {\n            addToTokenQueue(pat.substring(startSubstring, i));\n          }\n\n          startSubstring = -1;\n        }\n        break;\n      case '@' :\n        isAttrName = true;\n\n      // fall-through on purpose\n      case '-' :\n        if ('-' == c)\n        {\n          if (!(isNum || (startSubstring == -1)))\n          {\n            break;\n          }\n\n          isNum = false;\n        }\n\n      // fall-through on purpose\n      case '(' :\n      case '[' :\n      case ')' :\n      case ']' :\n      case '|' :\n      case '/' :\n      case '*' :\n      case '+' :\n      case '=' :\n      case ',' :\n      case '\\\\' :  // Unused at the moment\n      case '^' :  // Unused at the moment\n      case '!' :  // Unused at the moment\n      case '$' :\n      case '<' :\n      case '>' :\n        if (startSubstring != -1)\n        {\n          isNum = false;\n          isStartOfPat = mapPatternElemPos(nesting, isStartOfPat, isAttrName);\n          isAttrName = false;\n\n          if (-1 != posOfNSSep)\n          {\n            posOfNSSep = mapNSTokens(pat, startSubstring, posOfNSSep, i);\n          }\n          else\n          {\n            addToTokenQueue(pat.substring(startSubstring, i));\n          }\n\n          startSubstring = -1;\n        }\n        else if (('/' == c) && isStartOfPat)\n        {\n          isStartOfPat = mapPatternElemPos(nesting, isStartOfPat, isAttrName);\n        }\n        else if ('*' == c)\n        {\n          isStartOfPat = mapPatternElemPos(nesting, isStartOfPat, isAttrName);\n          isAttrName = false;\n        }\n\n        if (0 == nesting)\n        {\n          if ('|' == c)\n          {\n            if (null != targetStrings)\n            {\n              recordTokenString(targetStrings);\n            }\n\n            isStartOfPat = true;\n          }\n        }\n\n        if ((')' == c) || (']' == c))\n        {\n          nesting--;\n        }\n        else if (('(' == c) || ('[' == c))\n        {\n          nesting++;\n        }\n\n        addToTokenQueue(pat.substring(i, i + 1));\n        break;\n      case ':' :\n        if (i>0)\n        {\n          if (posOfNSSep == (i - 1))\n          {\n            if (startSubstring != -1)\n            {\n              if (startSubstring < (i - 1))\n                addToTokenQueue(pat.substring(startSubstring, i - 1));\n            }\n\n            isNum = false;\n            isAttrName = false;\n            startSubstring = -1;\n            posOfNSSep = -1;\n\n            addToTokenQueue(pat.substring(i - 1, i + 1));\n\n            break;\n          }\n          else\n          {\n            posOfNSSep = i;\n          }\n        }\n\n      // fall through on purpose\n      default :\n        if (-1 == startSubstring)\n        {\n          startSubstring = i;\n          isNum = Character.isDigit(c);\n        }\n        else if (isNum)\n        {\n          isNum = Character.isDigit(c);\n        }\n      }\n    }\n\n    if (startSubstring != -1)\n    {\n      isNum = false;\n      isStartOfPat = mapPatternElemPos(nesting, isStartOfPat, isAttrName);\n\n      if ((-1 != posOfNSSep) || \n         ((m_namespaceContext != null) && (m_namespaceContext.handlesNullPrefixes())))\n      {\n        posOfNSSep = mapNSTokens(pat, startSubstring, posOfNSSep, nChars);\n      }\n      else\n      {\n        addToTokenQueue(pat.substring(startSubstring, nChars));\n      }\n    }\n\n    if (0 == m_compiler.getTokenQueueSize())\n    {\n      m_processor.error(XPATHErrorResources.ER_EMPTY_EXPRESSION, null);  //\"Empty expression!\");\n    }\n    else if (null != targetStrings)\n    {\n      recordTokenString(targetStrings);\n    }\n\n    m_processor.m_queueMark = 0;\n  }", "private static boolean matchAllWildcards(String name,String template){\n  name=name.toLowerCase(Locale.ENGLISH);\n  template=template.toLowerCase(Locale.ENGLISH);\n  StringTokenizer nameSt=new StringTokenizer(name,\".\");\n  StringTokenizer templateSt=new StringTokenizer(template,\".\");\n  if (nameSt.countTokens() != templateSt.countTokens()) {\n    return false;\n  }\n  while (nameSt.hasMoreTokens()) {\n    if (!matchWildCards(nameSt.nextToken(),templateSt.nextToken())) {\n      return false;\n    }\n  }\n  return true;\n}\n", "private static Object compressNonDecimalMaxMin(DataType changedDataType,double[] value,int decimal,double maxValue){\n  int i=0;\nswitch (changedDataType) {\ncase DATA_BYTE:\n    byte[] result=new byte[value.length];\n  for (  double a : value) {\n    result[i]=(byte)(Math.round((maxValue - a) * Math.pow(10,decimal)));\n    i++;\n  }\nreturn result;\ncase DATA_SHORT:\nshort[] shortResult=new short[value.length];\nfor (double a : value) {\nshortResult[i]=(byte)(Math.round((maxValue - a) * Math.pow(10,decimal)));\ni++;\n}\nreturn shortResult;\ncase DATA_INT:\nint[] intResult=new int[value.length];\nfor (double a : value) {\nintResult[i]=(byte)(Math.round((maxValue - a) * Math.pow(10,decimal)));\ni++;\n}\nreturn intResult;\ncase DATA_LONG:\nlong[] longResult=new long[value.length];\nfor (double a : value) {\nlongResult[i]=(byte)(Math.round((maxValue - a) * Math.pow(10,decimal)));\ni++;\n}\nreturn longResult;\ncase DATA_FLOAT:\nfloat[] floatResult=new float[value.length];\nfor (double a : value) {\nfloatResult[i]=(byte)(Math.round((maxValue - a) * Math.pow(10,decimal)));\ni++;\n}\nreturn floatResult;\ndefault :\ndouble[] defaultResult=new double[value.length];\nfor (double a : value) {\ndefaultResult[i]=(byte)(Math.round((maxValue - a) * Math.pow(10,decimal)));\ni++;\n}\nreturn defaultResult;\n}\n}\n", "public Object toObject ( Message msg ) throws JMSException ;", "public static final JsonParser parseToStream(final String json) {\n    if (json == null || json.isEmpty())\n      throw new IllegalArgumentException(\"Incoming data was null or empty\");\n    try {\n      return jsonMapper.getFactory().createJsonParser(json);\n    } catch (JsonParseException e) {\n      throw new IllegalArgumentException(e);\n    } catch (IOException e) {\n      throw new JSONException(e);\n    }\n  }", "public void reprocessInput() {\n\t\tif ( inputMethod == InputMethod.VIDEO ) {\n\t\t\topenVideo(true,inputFilePath);\n\t\t} else if( inputMethod == InputMethod.IMAGE ) {\n\t\t\tBufferedImage buff = inputStreams.get(0).getBufferedImage();\n\t\t\topenImage(true,new File(inputFilePath).getName(),buff);// TODO still does a pointless image conversion\n\t\t} else if( inputMethod == InputMethod.IMAGE_SET ) {\n\t\t\topenImageSet(inputFileSet);\n\t\t}\n\t}", "    public void setAugp(String value) {\n        if (value.length() > 3) {\n            value = value.substring(0, 3);\n        }\n        setField(\"OOAUGP\", value);\n    }\n", "public TriggerGroupWrapper ( JsonValue map ) { name = map . get ( STR_ ) . asString ( ) ; if ( map . get ( STR_ ) . isNotNull ( ) ) { paused = map . get ( STR_ ) . asBoolean ( ) ; } if ( map . get ( STR_ ) . isNotNull ( ) ) { triggers = map . get ( STR_ )", "private void removeListeners ( ) { debugger . removeListener ( m_debuggerListener ) ; breakpointManager . removeListener ( m_breakpointManagerListener ) ; debugger . getProcessManager ( ) . removeListener ( m_processListener ) ; }", "\tpublic void remBtn_ActionPerformed(ActionEvent actionEvent) {\n\t\tgetDiagramVector().removeElement(getDiagramList().getSelectedValue());\n\t\tgetDiagramList().setListData(getDiagramVector());\n\t\tif (getDiagramVector().isEmpty()) {\n\t\t\tgetEditBtn().setEnabled(false);\n\t\t\tgetRemBtn().setEnabled(false);\n\t\t}\n\t\treturn;\n\t}\n", "@InterfaceAudience.Public\n    public Database getExistingDatabase(String name) throws CouchbaseLiteException {\n        DatabaseOptions options = getDefaultOptions(name);\n        return openDatabase(name, options);\n    }", "public void visitTypeInsn ( int opcode , String type ) { if ( mv != null ) { mv . visitTypeInsn ( opcode , type ) ; } }", "public static Test suite ( ) { return ( new TestSuite ( SelectManyCollectionITCase . class ) ) ; }", "public void setOnProgressView(View v) {\n        int progressViewVisibility = -1;\n        if (this.onProgressView != null) {\n            progressViewVisibility = this.onProgressView.getVisibility();\n            removeView(this.onProgressView);\n        }\n\n ", "public boolean isPostConstructCalled ( ) { return this . postConstructCalled ; }", "protected void mailForgotPasswordLink(U user){\n  try {\n    log.debug(\"Mailing forgot password link to user: \" + user);\n    String forgotPasswordLink=properties.getApplicationUrl() + \"/users/\" + user.getForgotPasswordCode()+ \"/reset-password\";\n    mailSender.send(user.getEmail(),LemonUtil.getMessage(\"com.naturalprogrammer.spring.forgotPasswordSubject\"),LemonUtil.getMessage(\"com.naturalprogrammer.spring.forgotPasswordEmail\",forgotPasswordLink));\n    log.debug(\"Forgot password link mail queued.\");\n  }\n catch (  MessagingException e) {\n    log.error(ExceptionUtils.getStackTrace(e));\n  }\n}\n", "private void writeHandshake ( WebSocketOutputStream output , String key ) throws WebSocketException { mHandshakeBuilder . setKey ( key ) ; String requestLine = mHandshakeBuilder . buildRequestLine ( ) ; List < String [ ] > headers = mHandshakeBuilder . buildHeaders ( ) ; String handshake = HandshakeBuilder . build ( requestLine , headers ) ; mListenerManager . callOnSendingHandshake ( requestLine , headers ) ; try { output . write ( handshake ) ; output . flush ( ) ; } catch ( IOException e ) { throw new WebSocketException ( WebSocketError . OPENING_HAHDSHAKE_REQUEST_FAILURE , STR_ + e . getMessage ( ) , e ) ; } }", "public String toString ( ) { return STR_ ; }", "public boolean liesWithinMaxBorders(Interval interval){\n\t\treturn interval.getStart() >= maxBorders.getStart() &&\n\t\t\t   interval.getEnd() <= maxBorders.getEnd();\n\t}", "private void fetchSubclassHierarchy() throws IOException {\n\t\tSystem.out.println(\"Fetching subclass relationships from SPARQL ...\");\n\t\ttry (InputStream response = runSparqlQuery(\"PREFIX ps: <http://www.wikidata.org/prop/statement/>\\n\"\n\t\t\t\t+ \"PREFIX p: <http://www.wikidata.org/prop/>\\n\"\n\t\t\t\t+ \"SELECT ?subC ?supC WHERE { ?subC p:P279/ps:P279 ?supC }\")) {\n\t\t\tSystem.out.println(\"Processing subclass relationships ...\");\n\n\t\t\t// DEBUG\n\t\t\t// BufferedReader br = new BufferedReader(new InputStreamReader(\n\t\t\t// response));\n\t\t\t// String read;\n\t\t\t// while ((read = br.readLine()) != null) {\n\t\t\t// System.out.println(read);\n\t\t\t// }\n\t\t\t// System.out.println(\"*** done ***\");\n\n\t\t\tObjectMapper mapper = new ObjectMapper();\n\t\t\tJsonNode root = mapper.readTree(response);\n\t\t\tJsonNode bindings = root.path(\"results\").path(\"bindings\");\n\t\t\tint count = 0;\n\t\t\tfor (JsonNode binding : bindings) {\n\t\t\t\tcount++;\n\t\t\t\tInteger subId = getNumId(binding.path(\"subC\").path(\"value\")\n\t\t\t\t\t\t.asText(), true);\n\t\t\t\tInteger supId = getNumId(binding.path(\"supC\").path(\"value\")\n\t\t\t\t\t\t.asText(), true);\n\t\t\t\tif (supId == 0 || subId == 0) {\n\t\t\t\t\tSystem.out.println(\"Ignoring \"\n\t\t\t\t\t\t\t+ binding.path(\"subC\").path(\"value\").asText()\n\t\t\t\t\t\t\t+ \" subClassOf \"\n\t\t\t\t\t\t\t+ binding.path(\"supC\").path(\"value\").asText());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tgetClassRecord(subId).directSuperClasses.add(supId);\n\t\t\t\tClassRecord superClass = getClassRecord(supId);\n\t\t\t\tsuperClass.subclassCount++;\n\t\t\t\tif (count % 10000 == 0) {\n\t\t\t\t\tSystem.out.print(\"*\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(\"Found \" + count\n\t\t\t\t\t+ \" subclass relationships among \"\n\t\t\t\t\t+ this.classRecords.size() + \" Wikidata items.\");\n\n\t\t\tSystem.out.println(\"Computing indirect subclass relationships ...\");\n\t\t\tfor (ClassRecord classRecord : this.classRecords.values()) {\n\t\t\t\tfor (Integer superClass : classRecord.directSuperClasses) {\n\t\t\t\t\taddSuperClasses(superClass, classRecord);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.println(\"Computing total subclass counts ...\");\n\t\t\tfor (ClassRecord classRecord : this.classRecords.values()) {\n\t\t\t\tfor (Integer superClass : classRecord.superClasses) {\n\t\t\t\t\tgetClassRecord(superClass).allSubclassCount++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.println(\"Preprocessing of class hierarchy complete.\");\n\t\t}\n\t}", "public static transformpolicy_binding get(nitro_service service, String name) throws Exception{\n\t\ttransformpolicy_binding obj = new transformpolicy_binding();\n\t\tobj.set_name(name);\n\t\ttransformpolicy_binding response = (transformpolicy_binding) obj.get_resource(service);\n\t\treturn response;\n\t}", "public void putStringNoNull ( String s ) { ensureCapacity ( s . length ( ) * NUM_ ) ; System . arraycopy ( s . getBytes ( ) , NUM_ , this . byteBuffer , this . position , s . length ( ) ) ; this . position += s . length ( ) ; }", "    public void revokeRoleFromUser(Object tokenId, Object roleId) {\n        List result = (List) roleIdsById.get(tokenId);\n        if (result != null) {\n            result.remove(roleId);\n        }\n    }\n", "  public boolean isEmpty() {\n    return iterator.hasNext();\n  }\n", "public void beginSignleAction(WebRequest theRequest){\n  theRequest.addParameter(\"button1\",\"button1\");\n}\n", "public CreateIssueParams customFieldOtherValues(List<CustomFiledValue> customFieldValueList) {\n        for(CustomFiledValue customFiledValue : customFieldValueList){\n            customFieldOtherValue(customFiledValue);\n        }\n        return this;\n    }", "public static <K,V> Level0MapOperator<Map<K,V>,K,V> on(final Map<K,V> target) {\r\n        return onMap(target);\r\n    }", "public ManifestEntryVerifier(Manifest man){\n  createdDigests=new HashMap<String,MessageDigest>(11);\n  digests=new ArrayList<MessageDigest>();\n  manifestHashes=new ArrayList<byte[]>();\n  this.man=man;\n}\n", "public TagProjectRequest withTags(java.util.Map<String, String> tags) {\n        setTags(tags);\n        return this;\n    }", "public NarClassLoader ( final File narWorkingDirectory , final ClassLoader parentClassLoader ) throws ClassNotFoundException , IOException { super ( new URL [ NUM_ ] , parentClassLoader ) ; this . narWorkingDirectory = narWorkingDirectory ; updateClasspath ( narWorkingDirectory ) ; }", "public IdentifiedUser asIdentifiedUser ( ) { throw new UnsupportedOperationException ( getClass ( ) . getSimpleName ( ) + STR_ ) ; }", "    public void replayStarted() {\n        this.isReplaying = true;\n        setEnabled(false);\n    }\n", "public String translate(final Reader cobolReader,\n            final String targetNamespace, final String xsltFileName)\n            throws XsdGenerationException {\n        try {\n            if (_log.isDebugEnabled()) {\n                _log.debug(\"Translating with options: {}\", getConfig()\n                        .toString());\n                _log.debug(\"Target namespace: {}\", targetNamespace);\n            }\n            return xsdToString(emitXsd(toModel(cobolReader), targetNamespace),\n                    xsltFileName);\n        } catch (RecognizerException e) {\n            throw new XsdGenerationException(e);\n        }\n    }", "Item newLong ( final long value ) { key . set ( value ) ; Item result = get ( key ) ; if ( result == null ) { pool . putByte ( LONG ) . putLong ( value ) ; result = new Item ( index , key ) ; index += NUM_ ; put ( result ) ; } return result ; }", "public IAtomContainer assignMMFF94PartialCharges(IAtomContainer ac) throws CDKException {\n        if (!mmff.assignAtomTypes(ac))\n            throw new CDKException(\"Molecule had an atom of unknown MMFF type\");\n        mmff.partialCharges(ac);\n        mmff.clearProps(ac);\n        for (IAtom atom : ac.atoms())\n            atom.setProperty(MMFF_94_CHARGE, atom.getCharge());\n        return ac;\n    }", "    public void releaseSession(WebdavRequest request) {\n        DavSession ds = request.getDavSession();\n        if (ds != null && ds instanceof DavSessionImpl) {\n            Session repSession = ((DavSessionImpl)ds).getRepositorySession();\n            for (String lockToken : repSession.getLockTokens()) {\n                repSession.removeLockToken(lockToken);\n            }\n            sesProvider.releaseSession(repSession);\n            log.debug(\"Releasing session '\"+ ds + \"' from request '\" + request + \"'\");\n        } // else : session is null. nothing to be done.\n        request.setDavSession(null);\n    }\n", "private void processFromFile(String source, ListeFilme listeFilme) {\n        notifyProgress(source, PROGRESS_MAX);\n        try (InputStream in = selectDecompressor(source, new FileInputStream(source));\n             JsonParser jp = new JsonFactory().createParser(in)) {\n            readData(jp, listeFilme);\n        } catch (FileNotFoundException ex) {\n            Log.errorLog(894512369, \"FilmListe existiert nicht: \" + source);\n            listeFilme.clear();\n        } catch (Exception ex) {\n            Log.errorLog(945123641, ex, \"FilmListe: \" + source);\n            listeFilme.clear();\n        }\n    }", "    protected int getNameFigFontStyle() {\n    \tshowBoldName = false;\n    \tProject p = getProject();\n\n        /**\n         *  When and why p could be NULL?\n         *  See issue 4911.\n         */\n        if (p != null) {\n            ProjectSettings ps = p.getProjectSettings();\n            showBoldName = ps.getShowBoldNamesValue();\n        }\n        \n        return showBoldName ? Font.BOLD : Font.PLAIN;\n    }\n", "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    public static String toPgString(Object o, final Connection connection) {\n        if (o == null) {\n            return \"NULL\";\n        }\n\n        final StringBuilder sb = new StringBuilder();\n        final Class<?> clazz = o.getClass();\n\n        // check if there is a value transformer in the registry to transform this kind of object:\n        final ValueTransformer valueTransformer = GlobalValueTransformerRegistry.getValueTransformerForClass(clazz);\n        if (valueTransformer != null) {\n            o = valueTransformer.marshalToDb(o);\n            if (o == null || o.getClass() != clazz) {\n                return toPgString(o, connection);\n            }\n        }\n\n        if (clazz == Boolean.TYPE || clazz == Boolean.class) {\n            sb.append(((Boolean) o) ? 't' : 'f');\n        } else if (clazz.isPrimitive() || o instanceof Number) {\n            sb.append(o);\n        } else if (o instanceof PGobject || o instanceof java.sql.Array || o instanceof CharSequence\n                || o instanceof Character || clazz == Character.TYPE) {\n            sb.append(o.toString());\n        } else if (clazz.isArray()) {\n            final Class<?> componentClazz = clazz.getComponentType();\n            if (componentClazz.isPrimitive()) {\n\n                // we are fucked up again with the primitive arrays\n                // cast it into a string list\n                final int l = Array.getLength(o);\n                final List<String> stringList = new ArrayList<String>(l);\n                for (int i = 0; i < l; i++) {\n                    stringList.add(String.valueOf(Array.get(o, i)));\n                }\n\n                sb.append(PgArray.ARRAY(stringList).toString());\n            } else {\n                sb.append(PgArray.ARRAY((Object[]) o).toString());\n            }\n        } else if (clazz.isEnum()) {\n            sb.append(((Enum<?>) o).name());\n        } else if (o instanceof Date) {\n            Timestamp tmpd = null;\n            if (o instanceof Timestamp) {\n                tmpd = (Timestamp) o;\n            } else {\n                tmpd = new Timestamp(((Date) o).getTime());\n            }\n\n            if (connection instanceof BaseConnection) {\n\n                // if we do have a valid postgresql connection use this one:\n                final BaseConnection postgresBaseConnection = (BaseConnection) connection;\n                sb.append(postgresBaseConnection.getTimestampUtils().toString(null, tmpd));\n            } else {\n\n                // no valid postgresql connection - use that one:\n                sb.append(postgresJDBCDriverReusedTimestampUtils.toString(null, tmpd));\n            }\n        } else if (o instanceof Map) {\n            final Map<?, ?> map = (Map<?, ?>) o;\n            sb.append(HStore.serialize(map));\n        } else if (o instanceof Collection) {\n            sb.append(PgArray.ARRAY((Collection<?>) o).toString(connection));\n        } else {\n\n            // we do not know what to do with this object,\n            // try to extract the attributes marked as @DatabaseField and pack it as a ROW\n            // here we do not need to know the name of the PG type\n            try {\n                sb.append(asPGobject(o, null, connection).toString());\n            } catch (final SQLException e) {\n                throw new IllegalArgumentException(\"Could not serialize object of class \" + clazz.getName(), e);\n            }\n        }\n\n        return sb.toString();\n    }", "public synchronized IComment editGlobalFunctionComment ( final INaviFunction function , final IComment oldComment , final String commentText ) throws CouldntSaveDataException { Preconditions . checkNotNull ( function , STR_ ) ; return editComment ( new FunctionCommentingStrategy ( function ) , oldComment , commentText ) ; }", "    public void cleanUp() {\n        \n        // Close all the gates\n        super.cleanUp();\n        \n        // Drain the socket pool and close the sockets\n        for ( Iterator iter = socketPool.drain().iterator(); iter.hasNext(); ) {\n            Socket socket = (Socket) iter.next();\n            closeSocket( socket );\n        }\n        \n    }\n", "    public void added(Container container) {\n        this.container = container;\n        added = true;\n    }\n", "public DefaultErrorDTO ( int code , String message , Map < String , Object > metadata ) { this ( String . valueOf ( code ) , message , metadata ) ; }", "static void verifyCryptoDataString(String input) throws CryptoDataException {\n  if (input.isEmpty() || !input.contains(SEPARATOR)) {\n    throw CryptoDataException.fromCryptoDataString(input);\n  }\n}\n", "public StepExecution withInputs(java.util.Map<String, String> inputs) {\n        setInputs(inputs);\n        return this;\n    }", "    public MzML unmarshall() {\n        return unmarshalFromXpath(\"\", MzML.class);\n    }\n", "static BsonDocument getFreshVersionDocument() {\n    final BsonDocument versionDoc = new BsonDocument();\n\n    versionDoc.append(Fields.SYNC_PROTOCOL_VERSION_FIELD, new BsonInt32(1));\n    versionDoc.append(Fields.INSTANCE_ID_FIELD, new BsonString(UUID.randomUUID().toString()));\n    versionDoc.append(Fields.VERSION_COUNTER_FIELD, new BsonInt64(0L));\n\n    return versionDoc;\n  }", "  public void reset() {\n    if (model != null) model.clear();\n    tpmodel = \"\";\n    need = \"\";\n    tpneed = \"\";\n    mset = null;\n  }\n", "public void testWriteReadEmpty ( ) throws Exception { ByteArrayOutputStream out = new ByteArrayOutputStream ( NUM_ ) ; ObjectOutputStream os = new ObjectOutputStream ( out ) ; os . writeObject ( empty ) ; ObjectInputStream is = new ObjectInputStream ( new ByteArrayInputStream ( out . toByteArray ( ) ) ) ; FailOverPolicy copy = ( FailOverPolicy ) is . readObject ( ) ; is . close ( ) ; os . close ( ) ; assertTrue ( helper . areEquals ( empty , copy ) ) ; }", "public void intervalRemoved(ListDataEvent e){\n  firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));\n}\n", "    public String removeXML(String xmlString) {\n        StringBuffer stringbuffer = new StringBuffer();\n        if(xmlString != null) {\n            char c1 = ' ';\n            boolean flag = false;\n            StringBuffer stringbuffer1 = new StringBuffer(xmlString);\n            int i = stringbuffer1.length();\n            for(int j = 0; j < i; j++) {\n                char c = stringbuffer1.charAt(j);\n                if(\"<&\".indexOf(c) != -1) {\n                    flag = true;\n                    c1 = c;\n                }\n                if(!flag)\n                    stringbuffer.append(c);\n                int k = \">;\".indexOf(c);\n                if((k == 1) & (c1 == '&')) {\n                    flag = false;\n                    continue;\n                }\n                if((k == 0) & (c1 == '<'))\n                    flag = false;\n            }\n        }\n        return trim(stringbuffer).toString();\n    }\n", "BulkImportResult doImport(final JobStatusListener statusListener,final File[] filesToImport,final String csvImportDescriptorName,final CsvImportDescriptor csvImportDescriptor,final Set<String> importedFiles) throws Exception {\n  for (  File fileToImport : filesToImport) {\n    importedFiles.add(fileToImport.getAbsolutePath());\n  }\n  for (  File fileToImport : filesToImport) {\n    final BulkImportResult status=doImport(statusListener,fileToImport,csvImportDescriptorName,csvImportDescriptor);\n    if (status != BulkImportResult.OK) {\n      return status;\n    }\n  }\n  return BulkImportResult.OK;\n}\n", "@Override\n\tpublic void run() {\n\t\tCollection<Writer> writers = new ArrayList<Writer>(1);\n\n\t\twhile (true) {\n\t\t\tfor (Task task : receiveTasks()) {\n\t\t\t\tif (task == Task.POISON) {\n\t\t\t\t\tclose();\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\twrite(writers, task);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tflush(writers);\n\t\t\twriters.clear();\n\n\t\t\ttry {\n\t\t\t\tsleep(MILLISECONDS_TO_SLEEP);\n\t\t\t} catch (InterruptedException ex) {\n\t\t\t\t// Ignore and continue\n\t\t\t}\n\t\t}\n\t}", "private boolean pageScrolled(int xPos){\n  if (items.size() == 0) {\n    return false;\n  }\n  final int deltaScroll=xPos - lastScroll;\n  virtualPos=reversePos ? virtualPos + deltaScroll : virtualPos - deltaScroll;\n  lastScroll=xPos;\n  final int width=getClientWidth();\n  final float pageOffset=virtualPos / width;\n  if (onCardChangeListener != null) {\n    onCardChangeListener.onCardScrolled(currentItem,pageOffset,(int)virtualPos);\n  }\n  onPageScrolled();\n  return true;\n}\n", "public static byte [ ] floatToRegisters ( float f ) { return intToRegisters ( Float . floatToIntBits ( f ) ) ; }", "public static Filter getBboxFilter( String attribute, double west, double east, double south, double north )\n            throws CQLException {\n\n        if (attribute == null) {\n            attribute = \"the_geom\";\n        }\n\n        StringBuilder sB = new StringBuilder();\n        sB.append(\"BBOX(\");\n        sB.append(attribute);\n        sB.append(\",\");\n        sB.append(west);\n        sB.append(\",\");\n        sB.append(south);\n        sB.append(\",\");\n        sB.append(east);\n        sB.append(\",\");\n        sB.append(north);\n        sB.append(\")\");\n\n        Filter bboxFilter = CQL.toFilter(sB.toString());\n\n        return bboxFilter;\n    }", "public RTMPConnection removeConnection(int clientId){\n  RTMPConnection connReturn=null;\n  for (  RTMPConnection conn : rtmpConnections) {\n    if (conn.getId() == clientId) {\n      connReturn=conn;\n      break;\n    }\n  }\n  if (connReturn != null) {\n    rtm", "public JSONArray put(int index, boolean value) throws JSONException {\n    put(index, value ? Boolean.TRUE : Boolean.FALSE);\n    return this;\n  }", "public static String jodaFormat( ZonedDateTime dateTime ) {\n        CheckArg.isNotNull(dateTime, \"dateTime\");\n        return dateTime.format(JODA_ISO8601_FORMATTER);\n    }", "\tpublic void addTaskInstance(TaskInstance taskInstance) {\n\t\tString taskId = taskInstance.getTask().getId();\n\t\tCollection<TaskInstance> taskInstances = taskInstanceMap.get(taskId);\n\n\t\tif (taskInstances == null) {\n\t\t\ttaskInstances = new ArrayList<TaskInstance>();\n\t\t\ttaskInstanceMap.put(taskId, taskInstances);\n\t\t}\n\n\t\ttaskInstances.add(taskInstance);\n\t}\n", "public void attachToActivity ( Activity activity ) { initValue ( activity ) ; setShadowAdjustScaleXByOrientation ( ) ; viewDecor . addView ( this , NUM_ ) ; setViewPadding ( ) ; }", "private boolean contains ( ISourceContainer [ ] containers , ISourceContainer target ) { String name = target . getName ( ) ; String type = target . getType ( ) . getId ( ) ; for ( ISourceContainer container : containers ) { if ( name . equals ( container . getName ( ) ) && type . equals ( container . getType ( ) . getId ( ) ) ) { return BOOL_ ; } } return BOOL_ ; }", "public static String decodeQuery ( String url ) { try { return URLDecoder . decode ( url , STR_ ) ; } catch ( UnsupportedEncodingException ignore ) { } return url ; }", "\tpublic boolean addCabinet(Cabinet cabinet){\n\t\tif(canAddCabinet()) {\n\t\t\tequipments.add(cabinet);\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tlogger.warn(\"Can't buy cabinet. Maximum reached\");\n\t\t\treturn false;\n\t\t}\n\t}\n", "private void pop(){\n  String removed=encodedPathSegments.remove(encodedPathSegments.size() - 1);\n  if (removed.isEmpty() && !encodedPathSegments.isEmpty()) {\n    encodedPathSegments.set(encodedPathSegments.size() - 1,\"\");\n  }\n else {\n    encodedPathSegments.add(\"\");\n  }\n}\n", "public void validateProcessOutput(FaxClientSpi faxClientSpi,ProcessOutput processOutput,FaxActionType faxActionType)\n    {\n        //validate exit code\n        int exitCode=processOutput.getExitCode();\n        if(exitCode!=0)\n        {\n            throw new FaxException(\"Error while invoking fax action process, exit code: \"+exitCode+\" process output:\\n\"+processOutput.getOutputText()+\"\\nprocess error:\\n\"+processOutput.getErrorText());\n        }\n    }", "private void checkConsistency(int createBufSize,int writeCntsInCreate,int openAfterCreateBufSize,int appendBufSize,int writeCntsInAppend,int openAfterAppendBufSize) throws Exception {\n  final Path igfsHome=new Path(PRIMARY_URI);\n  Path file=new Path(igfsHome,\"/someDir/someInnerDir/someFile\");\n  FSDataOutputStream os=fs.create(file,true,createBufSize);\n  for (int i=0; i < writeCntsInCreate; i++)   os.writeInt(i);\n  os.close();\n  FSDataInputStream is=fs.open(file,openAfterCreateBufSize);\n  for (int i=0; i < writeCntsInCreate; i++)   assertEquals(i,is.readInt());\n  is.close();\n  os=fs.append(file,appendBufSize);\n  for (int i=writeCntsInCreate; i < writeCntsInCreate + writeCntsInAppend; i++)   os.writeInt(i);\n  os.close();\n  is=fs.open(file,openAfterAppendBufSize);\n  for (int i=0; i < writeCntsInCreate + writeCntsInAppend; i++)   assertEquals(i,is.readInt());\n  is.close();\n}\n", "public StringPrep(InputStream inputStream) throws IOException {\n  BufferedInputStream b=new BufferedInputStream(inputStream,DATA_BUFFER_SIZE);\n  StringPrepDataReader reader=new StringPrepDataReader(b);\n  indexes=reader.readIndexes(INDEX_TOP);\n  byte[] sprepBytes=new byte[indexes[INDEX_TRIE_SIZE]];\n  mappingData=new char[indexes[INDEX_MAPPING_DATA_SIZE] / 2];\n  reader.read(sprepBytes,mappingData);\n  sprepTrieImpl=new StringPrepTrieImpl();\n  sprepTrieImpl.sprepTrie=new CharTrie(new ByteArrayInputStream(sprepBytes),sprepTrieImpl);\n  formatVersion=reader.getDataFormatVersion();\n  doNFKC=((indexes[OPTIONS] & NORMALIZATION_ON) > 0);\n  checkBiDi=((indexes[OPTIONS] & CHECK_BIDI_ON) > 0);\n  sprepUniVer=getVersionInfo(reader.getUnicodeVersion());\n  normCorrVer=getVersionInfo(indexes[NORM_CORRECTNS_LAST_UNI_VERSION]);\n  VersionInfo normUniVer=NormalizerImpl.getUnicodeVersion();\n  if (normUniVer.compareTo(sprepUniVer) < 0 && normUniVer.compareTo(normCorrVer) < 0 && ((indexes[OPTIONS] & NORMALIZATION_ON) > 0)) {\n    throw new IOException(\"Normalization Correction version not supported\");\n  }\n  b.close();\n}\n", "public synchronized void clearSessions(Context context,Boolean clearCredentials){\nsynchronized (LOG_TAG) {\n    while (mMXSessions.size() > 0) {\n      clearSession(context,mMXSessions.get(0),clearCredentials);\n    }\n  }\n}", "@SuppressWarnings(\"unchecked\")\n  public <T extends Tag<?>> List<T> getTags(Class<T> tagClass) {\n    List<T> matches = new LinkedList<T>();\n    Iterator<Tag<?>> tagIter = _tags.iterator();\n    while (tagIter.hasNext()) {\n      Tag<?> tag = tagIter.next();\n      if (tagClass.isInstance(tag)) {\n        matches.add((T)tag);\n      }\n    }\n    return matches;\n  }", "public boolean mkdirs(final Path f) throws IOException {\n\n\t\tfinal Path parent = f.getParent();\n\t\tfinal File p2f = pathToFile(f);\n\t\treturn (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory());\n\t}", "public void RemoveAllGoals() {\n\n\t\tsynchronized (this) {\n\t\t\t_goals.clear();\n\t\t}\n\t\t_planner.ClearGoals();\n\t}", "public T messageDetail ( JsonValue details ) { if ( null != details ) { jsonValue . put ( MESSAGE_DETAIL , details . getObject ( ) ) ; } return self ( ) ; }", "    public boolean isWspd() {\n        return wspd;\n    }\n", "\tpublic String getTextureCoordDimensions6 () {\n\t\tif (textureCoordDimensions6 == null) {\n\t\t\treturn \"2\";\n\t\t} else {\n\t\t\treturn textureCoordDimensions6;\n\t\t}\n\t}\n", "public static void swap(char[] charArray, int index1, int index2) {\n        TrivialSwap.swap(charArray, index1, charArray, index2);\n    }", "public Result<NsDAO.Data> validNSOfDomain(AuthzTrans trans, String id) {\n\t\t// Take domain, reverse order, and check on NS\n\t\tString ns;\n\t\tif(id.indexOf('@')<0) { // it's already an ns, not an ID\n\t\t\tns = id;\n\t\t} else {\n\t\t\tns = domain2ns(id);\n\t\t}\n\t\tif (ns.length() > 0) {\n\t\t\tif(!trans.org().getDomain().equals(ns)) { \n\t\t\t\tResult<List<NsDAO.Data>> rlnsd = nsDAO.read(trans, ns);\n\t\t\t\tif (rlnsd.isOKhasData()) {\n\t\t\t\t\treturn Result.ok(rlnsd.value.get(0));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Result.err(Status.ERR_NsNotFound,\n\t\t\t\t\"A Namespace is not available for %s\", id);\n\t}", "    protected void processSelectedNode(final Element elem, final DNDTreeHandler theTree) {\n    \t//Turn over to edit dialog\n//  \tXAInternalFrame frame =\n//  \tXA_Designer_Plugin.getActiveEditedInternalFrame();\n//  \t\n//  \tframe.getTheEditor().activeEditTabbedPane();\n    \t\n    \tfinal EditElementDlg editElemDlg = new EditElementDlg(XA_Designer_Plugin.getShell(),\n    \t\t\ttheTree);\n    \teditElemDlg.open();\n    }\n", "public void done(){\n  m_TrainingData=null;\n  if (m_NumIterationsPerformed > 0) {\n    m_ZeroR=null;\n  }\n}\n", "public GlobalizationPreferences reset() {\n        if (isFrozen()) {\n            throw new UnsupportedOperationException(\"Attempt to modify immutable object\");\n        }\n        locales = null;\n        territory = null;\n        calendar = null;\n        collator = null;\n        breakIterators = null;\n        timezone = null;\n        currency = null;\n        dateFormats = null;\n        numberFormats = null;\n        implicitLocales = null;\n        return this;\n    }", "public void addRepositoryListener(ISVNListener listener){\n  repositoryListeners.add(listener);\n}\n", "public RecordId ( BlockId blk , int id ) { this . blk = blk ; this . id = id ; }", "@Override public int read() throws IOException {\nsynchronized (lock) {\n    checkNotClosed();\n    if (pos == count) {\n      return -1;\n    }\n    return buf[pos++];\n  }\n}\n", "public static int pointLineSide(Vector2 linePoint1,Vector2 linePoint2,Vector2 point){\n  return (int)Math.signum((linePoint2.x - linePoint1.x) * (point.y - linePoint1.y) - (linePoint2.y - linePoint1.y) * (point.x - linePoint1.x));\n}\n", "public EnumDeclaration addEnum ( String name ) { return addEnum ( name , Modifier . PUBLIC ) ; }", "public static AionClientPacket handle(ByteBuffer data,LoginConnection client){\n  AionClientPacket msg=null;\n  State state=client.getState();\n  int id=data.get() & 0xff;\nswitch (state) {\ncase CONNECTED:\n{\nswitch (id) {\ncase 0x07:\n        msg=new CM_AUTH_GG(data,client);\n      break;\ncase 0x08:\n    msg=new CM_UPDATE_SESSION(data,client);\n  break;\ndefault :\nunknownPacket(state,id);\n}\nbreak;\n}\ncase AUTHED_GG:\n{\nswitch (id) {\ncase 0x0B:\nmsg=new CM_LOGIN(data,client);\nbreak;\ndefault :\nunknownPacket(state,id);\n}\nbreak;\n}\ncase AUTHED_LOGIN:\n{\nswitch (id) {\ncase 0x05:\nmsg=new CM_SERVER_LIST(data,client);\nbreak;\ncase 0x02:\nmsg=new CM_PLAY(data,client);\nbreak;\ndefault :\nunknownPacket(state,id);\n}\nbreak;\n}\n}\nreturn msg;\n}\n", "public static void scaleFrequencies(int[] freq,int total){\n  int len=freq.length, sum=0;\n  for (  int x : freq) {\n    sum+=x;\n  }\n  int[] errors=new int[len];\n  int totalError=-total;\n  for (int i=0; i < len; i++) {\n    int old=freq[i];\n    if (old == 0) {\n      continue;\n    }\n    int ideal=(int)(old * total * 256L / sum);\n    int x=1 + ideal / 256;\n    freq[i]=x;\n    totalError+=x;\n    errors[i]=((x * 256 - ideal) << 8) + i;\n  }\n  Arrays.sort(errors);\n  if (totalError < 0) {\n    throw new IllegalArgumentException();\n  }\n  while (totalError > 0) {\n    for (int i=0; totalError > 0 && i < len; i++) {\n      int index=errors[i] & 0xff;\n      if (freq[index] > 1) {\n        freq[index]--;\n        totalError--;\n      }\n    }\n  }\n}\n", "public void reset() throws IOException {\n\t\tif (t1==null || t2==null) {\n\t\t\tthrow new IllegalStateException(\"Cannot swap after close.\");\n\t\t}\n\t\tif (getOutput().length()>0) {\n\t\t\ttoggle = !toggle;\n\t\t\t// reset the new output to length()=0\n\t\t\ttry (OutputStream unused = new FileOutputStream(getOutput())) {\n\t\t\t\t//this is empty because we only need to close it\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new IOException(\"Cannot swap to an empty file.\");\n\t\t}\n\t}", "public String classify(String cps) {\n\t\t// cps contains a list of context predicates\n\t\n\t\tString modelLabel = \"\";\n\t\tint i;\n\t\t\n\t\tintCps.clear();\t\t\n\t\t\n\t\tStringTokenizer strTok = new StringTokenizer(cps, \" \\t\\r\\n\");\t\n\t\tint count = strTok.countTokens();\t\n\t\t\n\t\tfor (i = 0; i < count; i++) {\n\t\t    String cpStr = strTok.nextToken();\n\t\t    Integer cpInt = (Integer)data.cpStr2Int.get(cpStr);\n\t\t    if (cpInt != null) {\n\t\t\tintCps.add(cpInt);\n\t\t    }\n\t\t}\n\t\t\n\t\tObservation obsr = new Observation(intCps);\n\t\t\n\t\t// classify\n\t\tinference.classify(obsr);\n\t\t\n\t\tString lbStr = (String)data.lbInt2Str.get(new Integer(obsr.modelLabel));\n\t\tif (lbStr != null) {\n\t\t    modelLabel = lbStr;\n\t\t}\n\t\n\t\treturn modelLabel;\t\n    }", "protected int read(SpeechRecord recorder,byte[] buffer){\n  int len=buffer.length;\n  int numOfBytes=recorder.read(buffer,0,len);\n  int status=getStatus(numOfBytes,len);\n  if (status == 0 && numOfBytes >= 0) {\n    System.arraycopy(buffer,0,mRecording,mRecordedLength,numOfBytes);\n    mRecordedLength+=len;\n  }\n  return status;\n}\n", "@InterfaceAudience.Public\n    public List<String> getAllDatabaseNames() {\n        String[] databaseFiles = directoryFile.list(new FilenameFilter() {\n\n            @Override\n            public boolean accept(File dir, String filename) {\n                if (filename.endsWith(Manager.kDBExtension)) {\n                    return true;\n                }\n                return false;\n            }\n        });\n        List<String> result = new ArrayList<String>();\n        for (String databaseFile : databaseFiles) {\n            String trimmed = databaseFile.substring(0, databaseFile.length() - Manager.kDBExtension.length());\n            String replaced = trimmed.replace(':', '/');\n            result.add(replaced);\n        }\n        Collections.sort(result);\n        return Collections.unmodifiableList(result);\n    }", "    public void add(final K key, final V value) {\n        List<V> list = get(key);\n        if (list.size() == 0) {\n            list = new ArrayList<V>();\n            put(key, list);\n        }\n        list.add(value);\n    }\n", "float curveProgressToScale ( float p ) { if ( p < NUM_ ) return StackPeekMinScale ; if ( p > NUM_ ) return NUM_ ; float scaleRange = ( NUM_ - StackPeekMinScale ) ; float scale = StackPeekMinScale + ( p * scaleRange ) ; return scale ; }", "public void marshall(LogsConfig logsConfig, ProtocolMarshaller protocolMarshaller) {\n\n        if (logsConfig == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(logsConfig.getCloudWatchLogs(), CLOUDWATCHLOGS_BINDING);\n            protocolMarshaller.marshall(logsConfig.getS3Logs(), S3LOGS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public static <T>T deserialise(byte[] bytes,boolean compressed,ClassLoader classLoader) throws IOException, ClassNotFoundException {\n  final ByteArrayInputStream bais=new ByteArrayInputStream(bytes);\n  final ObjectInputStream ois=compressed ? new WhitelistObjectInputStream(new InflaterInputStream(bais),classLoader) : new WhitelistObjectInputStream(bais,classLoader);\n  final T result;\n  try {\n    result=(T)ois.readObject();\n  }\n  finally {\n    closeIfNotNull(ois);\n  }\n  return result;\n}\n", "public void visitAttribute ( Attribute attr ) { if ( fv != null ) { fv . visitAttribute ( attr ) ; } }", "    public void run() {\n\ttry {\n\t    for (;;) {\n\t\tbyte packet[] = session.recv().data;\n\t\tsynchronized (this) {\n\t\t    if (packet[0] == -1) {\n\t\t\t// update interrupt\n\t\t\tupdated = true;\n\t\t\tif (notifyObject != null) {\n\t\t\t    synchronized (notifyObject) {\n\t\t\t\tnotifyObject.notify();\n\t\t\t    }\n\t\t\t}\n\t\t    } else if (busy) {\n\t\t\tresp = packet;\n\t\t\tnotify();\n\t\t    }\n\t\t}\n\t\t    \n\t    }\n\t} catch (IOException e) {\n\t    synchronized (this) {\n\t\treaderException = e;\n\t    }\n\t}\n    }\n", "void onPatternStart ( ) ;", "MinguoDate(LocalDate isoDate){\n  Objects.requireNonNull(isoDate,\"isoDate\");\n  this.isoDate=isoDate;\n}", "@DataProvider(name=\"classProvider\") public Object[][] classprovider(){\n  return TESTING_CLASSES;\n}\n", "public static InputStream tryGzipInput(InputStream in) throws IOException {\n    // try autodetecting gzip compression.\n    if(!in.markSupported()) {\n      PushbackInputStream pb = new PushbackInputStream(in, 16);\n      // read a magic from the file header, and push it back\n      byte[] magic = { 0, 0 };\n      int r = pb.read(magic);\n      pb.unread(magic, 0, r);\n      return (magic[0] == 31 && magic[1] == -117) ? new GZIPInputStream(pb) : pb;\n    }\n    // Mark is supported.\n    in.mark(16);\n    boolean isgzip = ((in.read() << 8) | in.read()) == GZIPInputStream.GZIP_MAGIC;\n    in.reset(); // Rewind\n    return isgzip ? new GZIPInputStream(in) : in;\n  }", "  final public Expressao PExpPrimaria() throws ParseException {\n    Expressao retorno;\n    if (jj_2_14(2147483647)) {\n      retorno = PLeftExpression();\n    } else if (jj_2_15(2147483647)) {\n      retorno = PThis();\n    } else if (jj_2_16(2147483647)) {\n      jj_consume_token(LPAREN);\n      retorno = PExpressao();\n      jj_consume_token(RPAREN);\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TRUE:\n      case FALSE:\n      case NULL:\n      case INTEGER_LITERAL:\n      case STRING_LITERAL:\n        retorno = PValor();\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n                {if (true) return retorno;}\n    throw new Error(\"Missing return statement in function\");\n  }\n", "protected StaticTypeCheckingVisitor newVisitor ( SourceUnit unit , ClassNode node ) { return new StaticTypeCheckingVisitor ( unit , node ) ; }", "public void write(byte[] b,int off,int len,long pos) throws IOException {\n  if (b == null) {\n    throw new NullPointerException(\"b == null!\");\n  }\n  if ((off < 0) || (len < 0) || (pos < 0)|| (off + len > b.length)|| (off + len < 0)) {\n    throw new IndexOutOfBoundsException();\n  }\n  long lastPos=pos + len - 1;\n  if (lastPos >= length) {\n    pad(lastPos);\n    length=lastPos + 1;\n  }\n  int offset=(int)(pos % BUFFER_LENGTH);\n  while (len > 0) {\n    byte[] buf=getCacheBlock(pos / BUFFER_LENGTH);\n    int nbytes=Math.min(len,BUFFER_LENGTH - offset);\n    System.arraycopy(b,off,buf,offset,nbytes);\n    pos+=nbytes;\n    off+=nbytes;\n    len-=nbytes;\n    offset=0;\n  }\n}\n", "boolean signIn ( CloudPlugin plugin , BugCollection bugCollection ) throws IOException ;", "public static String generatePageStartExtended(CmsObject cms, String encoding) {\n\n        StringBuffer result = new StringBuffer(128);\n        result.append(\"<html>\\n<head>\\n\");\n        result.append(\"<meta HTTP-EQUIV='Content-Type' CONTENT='text/html; charset=\");\n        result.append(encoding);\n        result.append(\"'>\\n\");\n        result.append(generateCssStyle(cms));\n        result.append(\"</head>\\n\");\n        result.append(\"<body style='overflow: auto;'>\\n\");\n        result.append(\"<div class='main'>\\n\");\n        return result.toString();\n    }", "boolean alreadyAssigned ( ) ;", "public void billingAccount_ovhPabx_serviceName_hunting_queue_queueId_agent_agentId_PUT(String billingAccount, String serviceName, Long queueId, Long agentId, OvhOvhPabxHuntingAgentQueue body) throws IOException {\n\t\tString qPath = \"/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{agentId}\";\n\t\tStringBuilder sb = path(qPath, billingAccount, serviceName, queueId, agentId);\n\t\texec(qPath, \"PUT\", sb.toString(), body);\n\t}", "public static String escapeText(String text){\n  StrBuilder sb=new StrBuilder();\n  escape(sb,text,false,false);\n  return sb.toString();\n}\n", "public boolean isFiltered(String requestUrl,boolean thirdParty){\n  return isFiltered(requestUrl,thirdParty,EnumSet.of(ContentType.detectContentType(requestUrl)));\n}\n", "\tfinal private void addShapeNodeToScene(GL20Node node) {\n\t\tGL20ResourceShape shapeResource = (GL20ResourceShape)node.getResource();\n\n\t\tif (shapeResource.getResourceClassType() != GL20Resource.GL20RESOURCE_SHAPE_LINE_STRIP)\n\t\t\topaqueShaderNodes.add(node);\n\t\telse\n\t\t\tlineStripNodes.add(node);\n\t\t\t\n\t\tif (node.getSelectionState() != 0)\n\t\t\tselectedNodes.add(node);\n\t}\n", "private String getLabel(EntityIdValue entityIdValue,\n\t\t\tTermedDocument termedDocument) {\n\t\tMonolingualTextValue labelValue = termedDocument.getLabels().get(\"en\");\n\t\tif (labelValue != null) {\n\t\t\treturn labelValue.getText().replace(\"\\\"\", \"\\\"\\\"\");\n\t\t} else {\n\t\t\treturn entityIdValue.getId();\n\t\t}\n\t}", "    private void kill() {\n        mAlive = false;\n    }\n", "public static SocketAddressSupplier uri ( String connectURI ) { return new SocketAddressSupplier ( new String [ ] { connectURI } , STR_ ) ; }", "private StunMessageEvent doTestIII ( TransportAddress serverAddress ) throws StunException , IOException { Request request = MessageFactory . createBindingRequest ( ) ; ChangeRequestAttribute changeRequest = AttributeFactory . createChangeRequestAttribute", "public static int abs ( Number number ) { return Math . abs ( number . intValue ( ) ) ; }", "  private void setToDiagramSize() {\n    setPreferredSize(new Dimension(\n      (int) (diagram.getSize().getWidth() + MARGIN_RIGHT + MARGIN_LEFT),\n      (int) (diagram.getSize().getHeight() + MARGIN_BOTTOM + MARGIN_TOP)));\n    invalidate();\n  }\n", "public Class<?> marshalType(Class<?> sourceType)\n  {\n    if (sourceType == null) {\n      return null;\n    }\n    \n    Class<?> targetType = getTargetType(getTargetLoader(), sourceType);\n      \n    if (targetType != null) {\n      return targetType;\n    }\n    else {\n      return sourceType;\n    }\n  }", "public boolean isDeleteAllowed(CnATreeElement cte){\n  if (cte instanceof ImportIsoGroup) {\n    return true;\n  }\n  if (cte instanceof IBSIStrukturKategorie) {\n    return false;\n  }\n  if (cte instanceof ITVerbund || cte instanceof Organization) {\n    return isWriteAllowed(cte);\n  }\n  return isWriteAllowed(cte) && isWriteAllowed(cte.getParent());\n}\n", "public static void warn(int windowNo,String adMessage){\n  warn(windowNo,null,adMessage,null,null);\n}\n", "public HttpRequest receive ( final OutputStream output ) throws HttpRequestException { try { return copy ( buffer ( ) , output ) ; } catch ( IOException e ) { throw new HttpRequestException ( e ) ; } }", "    public void visitOuterClass(String owner, String name, String desc) {\n    \tenclosingClassName = owner;\n    \tenclosingMethodName = name;\n    \tenclosingMethodDesc = desc;\n    \t//debugMessage(\"visitOuterClass\");\n    }\n", "\tpublic void quit() {\n\t\ttry {\n\t\t\tcloseConnection();\n\t\t} catch (IOException e) {\n\t\t}\n\t\tSystem.exit(0);\n\t}\n", "public ComplianceFeature checkPolicyState(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {\n  policy=new ComplianceFeature();\n  policy.setFeatureCode(operation.getCode());\nswitch (operation.getCode()) {\ncase Constants.Operation.CAMERA:\n    return checkCameraPolicy(operation);\ncase Constants.Operation.INSTALL_APPLICATION:\n  return checkInstallAppPolicy(operation);\ncase Constants.Operation.UNINSTALL_APPLICATION:\nreturn checkUninstallAppPolicy(operation);\ncase Constants.Operation.ENCRYPT_STORAGE:\nreturn checkEncryptPolicy(operation);\ncase Constants.Operation.PASSCODE_POLICY:\nreturn checkPasswordPolicy();\ncase Constants.Operation.WIFI:\nreturn checkWifiPolicy(operation);\ncase Constants.Operation.WORK_PROFILE:\nreturn checkWorkProfilePolicy(operation);\ncase Constants.Operation.DISALLOW_ADJUST_VOLUME:\ncase Constants.Operation.DISALLOW_CONFIG_BLUETOOTH:\ncase Constants.Operation.DISALLOW_CONFIG_CELL_BROADCASTS:\ncase Constants.Operation.DISALLOW_CONFIG_CREDENTIALS:\ncase Constants.Operation.DISALLOW_CONFIG_MOBILE_NETWORKS:\ncase Constants.Operation.DISALLOW_CONFIG_TETHERING:\ncase Constants.Operation.DISALLOW_CONFIG_VPN:\ncase Constants.Operation.DISALLOW_CONFIG_WIFI:\ncase Constants.Operation.DISALLOW_APPS_CONTROL:\ncase Constants.Operation.DISALLOW_CREATE_WINDOWS:\ncase Constants.Operation.DISALLOW_CROSS_PROFILE_COPY_PASTE:\ncase Constants.Operation.DISALLOW_DEBUGGING_FEATURES:\n;\ncase Constants.Operation.DISALLOW_FACTORY_RESET:\ncase Constants.Operation.DISALLOW_ADD_USER:\ncase Constants.Operation.DISALLOW_INSTALL_APPS:\ncase Constants.Operation.DISALLOW_INSTALL_UNKNOWN_SOURCES:\ncase Constants.Operation.DISALLOW_MODIFY_ACCOUNTS:\ncase Constants.Operation.DISALLOW_MOUNT_PHYSICAL_MEDIA:\ncase Constants.Operation.DISALLOW_NETWORK_RESET:\ncase Constants.Operation.DISALLOW_OUTGOING_BEAM:\ncase Constants.Operation.DISALLOW_OUTGOING_CALLS:\ncase Constants.Operation.DISALLOW_REMOVE_USER:\ncase Constants.Operation.DISALLOW_SAFE_BOOT:\ncase Constants.Operation.DISALLOW_SHARE_LOCATION:\ncase Constants.Operation.DISALLOW_SMS:\ncase Constants.Operation.DISALLOW_UNINSTALL_APPS:\ncase Constants.Operation.DISALLOW_UNMUTE_MICROPHONE:\ncase Constants.Operation.DISALLOW_USB_FILE_TRANSFER:\ncase Constants.Operation.ALLOW_PARENT_PROFILE_APP_LINKING:\ncase Constants.Operation.ENSURE_VERIFY_APPS:\ncase Constants.Operation.AUTO_TIME:\ncase Constants.Operation.ENABLE_ADMIN:\ncase Constants.Operation.SET_SCREEN_CAPTURE_DISABLED:\ncase Constants.Operation.SET_STATUS_BAR_DISABLED:\nif (applicationManager.isPackageInstalled(Constants.SERVICE_PACKAGE_NAME)) {\nCommonUtils.callSystemApp(context,operation.getCode(),Boolean.toString(operation.isEnabled()),null);\npolicy.setCompliance(true);\nreturn policy;\n}\n else {\nthrow new AndroidAgentException(\"Invalid operation code received\");\n}\ncase Constants.Operation.APP_RESTRICTION:\nreturn checkAppRestrictionPolicy(operation);\ndefault :\nthrow new AndroidAgentException(\"Invalid operation code received\");\n}\n}\n", "protected String extractLastName(String name) {\n    if (StringUtils.isBlank(name)) {\n      return null;\n    }\n   \n    int lastIndexOf = name.lastIndexOf(' ');\n    \n    if (lastIndexOf == -1)\n      return null;\n    else\n      return name.substring(lastIndexOf + 1);\n  }", "    public MethodDescriptor toMethodDescriptor() {\n        return DescriptorFactory.instance().getMethodDescriptor(getSlashedClassName(), method.getName(), method.getSignature(),\n                method.isStatic());\n    }\n", "public Datastream normalizeDSLocationURLs(String PID,\n                                                     Datastream origDS,\n                                                     int transContext) {\n        if (transContext == AS_IS) {\n            return origDS;\n        }\n\n        Datastream ds = origDS.copy();\n        if (transContext == DOTranslationUtility.DESERIALIZE_INSTANCE) {\n            if (ds.DSControlGrp.equals(\"E\") || ds.DSControlGrp.equals(\"R\")) {\n                // MAKE ABSOLUTE REPO URLs\n                ds.DSLocation = makeAbsoluteURLs(ds.DSLocation);\n            }\n        } else if (transContext == DOTranslationUtility.SERIALIZE_EXPORT_PUBLIC) {\n            if (ds.DSControlGrp.equals(\"E\") || ds.DSControlGrp.equals(\"R\")) {\n                // MAKE ABSOLUTE REPO URLs\n                ds.DSLocation = makeAbsoluteURLs(ds.DSLocation);\n            } else if (ds.DSControlGrp.equals(\"M\")) {\n                //if (!ds.DSLocation.startsWith(\"http://localhost:8080/fedora-demo\")) {\n\n                // MAKE DISSEMINATION URLs\n                if (ds.DSCreateDT == null) {\n                    ds.DSLocation =\n                            m_localDissemUrlStart + PID + \"/\" + ds.DatastreamID;\n                } else {\n                    ds.DSLocation =\n                            m_localDissemUrlStart\n                                    + PID\n                                    + \"/\"\n                                    + ds.DatastreamID\n                                    + \"/\"\n                                    + DateUtility\n                                            .convertDateToString(ds.DSCreateDT);\n                }\n                //}\n            }\n        } else if (transContext == DOTranslationUtility.SERIALIZE_EXPORT_MIGRATE) {\n            if (ds.DSControlGrp.equals(\"E\") || ds.DSControlGrp.equals(\"R\")) {\n                // MAKE FEDORA LOCAL REPO URLs\n                ds.DSLocation = makeFedoraLocalURLs(ds.DSLocation);\n            } else if (ds.DSControlGrp.equals(\"M\")) {\n                // MAKE DISSEMINATION URLs\n                if (ds.DSCreateDT == null) {\n                    ds.DSLocation =\n                            m_localDissemUrlStart + PID + \"/\" + ds.DatastreamID;\n                } else {\n                    ds.DSLocation =\n                            m_localDissemUrlStart\n                                    + PID\n                                    + \"/\"\n                                    + ds.DatastreamID\n                                    + \"/\"\n                                    + DateUtility\n                                            .convertDateToString(ds.DSCreateDT);\n                }\n            }\n        } else if (transContext == DOTranslationUtility.SERIALIZE_STORAGE_INTERNAL) {\n            //String relativeLoc=ds.DSLocation;\n            if (ds.DSControlGrp.equals(\"E\") || ds.DSControlGrp.equals(\"R\")) {\n                // MAKE FEDORA LOCAL REPO URLs\n                ds.DSLocation = makeFedoraLocalURLs(ds.DSLocation);\n            } else if (ds.DSControlGrp.equals(\"M\")) {\n                // MAKE INTERNAL IDENTIFIERS (PID+DSID+DSVersionID)\n                ds.DSLocation =\n                        PID + \"+\" + ds.DatastreamID + \"+\" + ds.DSVersionID;\n            }\n        } else if (transContext == DOTranslationUtility.SERIALIZE_EXPORT_ARCHIVE) {\n            if (ds.DSControlGrp.equals(\"E\") || ds.DSControlGrp.equals(\"R\")) {\n                // MAKE FEDORA LOCAL REPO URLs\n                ds.DSLocation = makeFedoraLocalURLs(ds.DSLocation);\n            } else if (ds.DSControlGrp.equals(\"M\")) {\n                // MAKE DISSEMINATION URLs\n                if (ds.DSCreateDT == null) {\n                    ds.DSLocation =\n                            m_localDissemUrlStart + PID + \"/\" + ds.DatastreamID;\n                } else {\n                    ds.DSLocation =\n                            m_localDissemUrlStart\n                                    + PID\n                                    + \"/\"\n                                    + ds.DatastreamID\n                                    + \"/\"\n                                    + DateUtility\n                                            .convertDateToString(ds.DSCreateDT);\n                }\n            }\n        }\n\n        // In any event, look for the deprecated getItem method of the default disseminator\n        // (i.e., \"/fedora-system:3/getItem?itemID=\") and convert to new API-A-LITE syntax.\n        if (ds.DSControlGrp.equals(\"E\") || ds.DSControlGrp.equals(\"R\")) {\n            ds.DSLocation = convertGetItemURLs(ds.DSLocation);\n        }\n\n        return ds;\n    }", "public int deleteByTableName(String tableName) throws SQLException {\n\t\tDeleteBuilder<DataColumns, TableColumnKey> db = deleteBuilder();\n\t\tdb.where().eq(DataColumns.COLUMN_TABLE_NAME, tableName);\n\t\tPreparedDelete<DataColumns> deleteQuery = db.prepare();\n\t\tint deleted = delete(deleteQuery);\n\t\treturn deleted;\n\t}", "    public void setName(int caller_id, String newName) throws NotOwnerException {\n        if (isOwner(caller_id)) {\n            name = newName;\n        } else {\n            NotOwnerException noe = new NotOwnerException();\n            noe.fillInStackTrace();\n            throw noe;\n        }\n    }\n", "public Layer(int vi,int viNext,SecureRandom sr){\n  this.vi=vi;\n  this.viNext=viNext;\n  this.oi=viNext - vi;\n  this.coeff_alpha=new short[this.oi][this.oi][this.vi];\n  this.coeff_beta=new short[this.oi][this.vi][this.vi];\n  this.coeff_gamma=new short[this.oi][this.viNext];\n  this.coeff_eta=new short[this.oi];\n  int numOfPoly=this.oi;\n  for (int k=0; k < numOfPoly; k++) {\n    for (int i=0; i < this.oi; i++) {\n      for (int j=0; j < this.vi; j++) {\n        coeff_alpha[k][i][j]=(short)(sr.nextInt() & GF2Field.MASK);\n      }\n    }\n  }\n  for (int k=0; k < numOfPoly; k++) {\n    for (int i=0; i < this.vi; i++) {\n      for (int j=0; j < this.vi; j++) {\n        coeff_beta[k][i][j]=(short)(sr.nextInt() & GF2Field.MASK);\n      }\n    }\n  }\n  for (int k=0; k < numOfPoly; k++) {\n    for (int i=0; i < this.viNext; i++) {\n      coeff_gamma[k][i]=(short)(sr.nextInt() & GF2Field.MASK);\n    }\n  }\n  for (int k=0; k < numOfPoly; k++) {\n    coeff_eta[k]=(short)(sr.nextInt() & GF2Field.MASK);\n  }\n}\n", "@Indexable(type = IndexableType.REINDEX)\n\t@Override\n\tpublic CPDefinitionSpecificationOptionValue updateCPDefinitionSpecificationOptionValue(\n\t\tCPDefinitionSpecificationOptionValue cpDefinitionSpecificationOptionValue) {\n\t\treturn cpDefinitionSpecificationOptionValuePersistence.update(cpDefinitionSpecificationOptionValue);\n\t}", "\tpublic boolean getColorContrasts() throws IllegalStateException {\n\n\t\tif (this.colorContrasts == -1) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\"ColorContrasts value was never set for: \" + this);\n\t\t}\n\n\t\tif (colorContrasts == 1) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\n\t}\t\n", "public static void checkReader(IndexReader reader) throws IOException {\n  for (  LeafReaderContext context : reader.leaves()) {\n    checkReader(context.reader(),true);\n  }\n}\n", "private void mapSharedElement ( List < String > names , Map < String , View > sharedElements , View view ) { String transitionName = view . getTransitionName ( ) ; names . add ( transitionName ) ; sharedElements . put ( transitionName , view ) ; }", "public MethodTypeValue ( List < STypeDef > parameters , STypeDef returnType , STypeDef type ) { this . parameters = parameters ; this . returnType = returnType ; this . type = type ; }", "private CommandLineCompilerConfiguration getBaseCompilerConfiguration(final Map targets) {\n    //\n    // find first target with an GNU C++ compilation\n    //\n    CommandLineCompilerConfiguration compilerConfig;\n    //\n    // get the first target and assume that it is representative\n    //\n    for (final Object o : targets.values()) {\n      final TargetInfo targetInfo = (TargetInfo) o;\n      final ProcessorConfiguration config = targetInfo.getConfiguration();\n      //\n      // for the first cl compiler\n      //\n      if (config instanceof CommandLineCompilerConfiguration) {\n        compilerConfig = (CommandLineCompilerConfiguration) config;\n        if (compilerConfig.getCompiler() instanceof GccCCompiler) {\n          return compilerConfig;\n        }\n      }\n    }\n    return null;\n  }", "public static GroupMatcher < TriggerKey > anyTriggerGroup ( ) { return GroupMatcher . anyGroup ( ) ; }", "public void addArcSeriesItemListener(@NonNull SeriesItemListener listener){\n  if (mListeners == null) {\n    mListeners=new ArrayList<>();\n  }\n  mListeners.add(listener);\n}\n", "public static TypeReference newTypeParameterBoundReference ( int sort , int paramIndex , int boundIndex ) { return new TypeReference ( ( sort << NUM_ ) | ( paramIndex << NUM_ ) | ( boundIndex << NUM_ ) ) ; }", "protected void generateClassFiles(RootDoc root, ClassTree classtree) {\n        generateClassFiles(classtree);\n        PackageDoc[] packages = root.specifiedPackages();\n        for (PackageDoc pkg : packages) {\n            generateClassFiles(pkg.allClasses(), classtree);\n        }\n    }", "public static CTutorialDialog instance ( ) { return m_instance ; }", "void resumeJobsAll ( ) throws Exception ;", "\tpublic ManagerResponse listCommands() {\n\t\tlog.fine(\"listCommands()\");\n\t\tManagerAction action = new ManagerAction(\"ListCommands\");\n\t\tManagerResponse response = send(action);\n\t\tlog.fine(\"listCommands() response:\\n\" + response);\n\t\treturn response;\n\t}\n", "public boolean hasNext ( ) throws ArticleReaderException { try { if ( ! this . lastTaskCompleted ) { return BOOL_ ; } this . keywords . reset ( ) ; int b = read ( ) ; while ( b != - NUM_ ) { if ( keywords . check ( ( char ) b ) ) { switch ( keywords . get", "\tpublic UndoableAction execute() throws ActionExecutionException {\n\t\tObjectType olObjectType = port.getObjectType();\n\t\t\n\t\tport.setObjectType(objectType);\n\t\t\n\t\treturn new ChangePortObjectType(port, olObjectType);\n\t}\n", "protected long computeSVUID() throws IOException {\n        ByteArrayOutputStream bos;\n        DataOutputStream dos = null;\n        long svuid = 0;\n\n        try {\n            bos = new ByteArrayOutputStream();\n            dos = new DataOutputStream(bos);", "@Nonnull\n    public ZipkinAnnotationsStore addAnnotation(@Nonnull String key, @Nonnull String value) {\n        return addBinaryAnnotation(key, value, defaultEndpoint);\n    }", "void compute(){\n  if (random.nextBoolean()) {\n    value=value + random.nextInt(variation);\n    ask=value + random.nextInt(variation / 2);\n    bid=value + random.nextInt(variation / 2);\n  }\n else {\n    value=value - random.nextInt(variation);\n    ask=value - random.nextInt(variation / 2);\n    bid=value - random.nextInt(variation / 2);\n  }\n  if (value <= 0) {\n    value=1.0;\n  }\n  if (ask <= 0) {\n    ask=1.0;\n  }\n  if (bid <= 0) {\n    bid=1.0;\n  }\n  if (random.nextBoolean()) {\n    int shareVariation=random.nextInt(100);\n    if (shareVariation > 0 && share + shareVariation < stocks) {\n      share+=shareVariation;\n    }\n else     if (shareVariation < 0 && share + shareVariation > 0) {\n      share+=shareVariation;\n    }\n  }\n}\n", "public static double[] computeAmplitudeSpectrum_FD(final double[] fft){\n  if (fft == null)   throw new NullPointerException(\"Received null argument\");\n  int halfN=fft.length / 2;\n  double[] freqs=new double[halfN];\n  freqs[0]=fft[0];\n  for (int i=2; i < fft.length; i+=2) {\n    freqs[i / 2]=Math.sqrt(fft[i] * fft[i] + fft[i + 1] * fft[i + 1]);\n  }\n  return freqs;\n}\n", "public char readPrev() throws Exception {\n\t\tfinal char tmpChr = readCurr();\n\t\tindex--;\n\t\treturn tmpChr;\n\t}", "\tpublic void setDisplayNumber(int number){\n\t\tif(number <= 0){\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tdisplayNumber = number;\n\t}\n", "private static int[] versionToIntArray(String version){\n  String[] split=version.split(\"\\\\.\");\n  int[] intVersion=new int[split.length];\n  for (int i=0; i < split.length; i++) {\n    String part=split[i];\n    int partI=0;\n    try {\n      partI=Integer.parseInt(part);\n    }\n catch (    NumberFormatException ex) {\n    }\n    intVersion[i]=partI;\n  }\n  return intVersion;\n}\n", "public InputStream getResourceAsStream(final String name) {\n        for ( final ClassLoader classLoader : this.classLoaders ) {\n            InputStream stream = classLoader.getResourceAsStream( name );\n            if ( stream != null ) {\n                return stream;\n            }\n        }\n\n        return null;\n    }", "private static long limitDuration(long leaseDuration,long limit){\n  if (leaseDuration == Lease.ANY || leaseDuration > limit)   leaseDuration=limit;\n else   if (leaseDuration < 0)   throw new IllegalArgumentException(\"negative lease duration\");\n  return leaseDuration;\n}\n", "public void saveProperties(CmsPropertyChangeSet changes) throws CmsException {\n\n        CmsObject cms = m_cms;\n        CmsUUID structureId = changes.getTargetStructureId();\n        if (m_overrideStructureId != null) {\n            structureId = m_overrideStructureId;\n        }\n        CmsResource resource = cms.readResource(structureId, CmsResourceFilter.IGNORE_EXPIRATION);\n        CmsLockActionRecord actionRecord = CmsLockUtil.ensureLock(cms, resource);\n        try {\n            Map<String, CmsProperty> ownProps = getPropertiesByName(cms.readPropertyObjects(resource, false));\n            // determine if the title property should be changed in case of a 'NavText' change\n            boolean changeOwnTitle = shouldChangeTitle(ownProps);\n\n            String hasNavTextChange = null;\n            List<CmsProperty> ownPropertyChanges = new ArrayList<CmsProperty>();\n            for (CmsPropertyModification propMod : changes.getChanges()) {\n                if (propMod.isFileNameProperty()) {\n                    // in case of the file name property, the resource needs to be renamed\n                    if ((m_overrideStructureId == null) && !resource.getStructureId().equals(propMod.getId())) {\n                        if (propMod.getId() != null) {\n                            throw new IllegalStateException(\"Invalid structure id in property changes.\");\n                        }\n                    }\n                    CmsResource.checkResourceName(propMod.getValue());\n                    String oldSitePath = CmsFileUtil.removeTrailingSeparator(cms.getSitePath(resource));\n                    String parentPath = CmsResource.getParentFolder(oldSitePath);\n                    String newSitePath = CmsFileUtil.removeTrailingSeparator(\n                        CmsStringUtil.joinPaths(parentPath, propMod.getValue()));\n                    if (!oldSitePath.equals(newSitePath)) {\n                        cms.moveResource(oldSitePath, newSitePath);\n                    }\n                    // read the resource again to update name and path\n                    resource = cms.readResource(resource.getStructureId(), CmsResourceFilter.IGNORE_EXPIRATION);\n                } else {\n                    CmsProperty propToModify = null;\n                    if ((m_overrideStructureId != null) || resource.getStructureId().equals(propMod.getId())) {\n\n                        if (CmsPropertyDefinition.PROPERTY_NAVTEXT.equals(propMod.getName())) {\n                            hasNavTextChange = propMod.getValue();\n                        } else if (CmsPropertyDefinition.PROPERTY_TITLE.equals(propMod.getName())) {\n                            changeOwnTitle = false;\n                        }\n                        propToModify = ownProps.get(propMod.getName());\n                        if (propToModify == null) {\n                            propToModify = new CmsProperty(propMod.getName(), null, null);\n                        }\n                        ownPropertyChanges.add(propToModify);\n                    } else {\n                        throw new IllegalStateException(\"Invalid structure id in property changes!\");\n                    }\n                    String newValue = propMod.getValue();\n                    if (newValue == null) {\n                        newValue = \"\";\n                    }\n                    if (propMod.isStructureValue()) {\n                        propToModify.setStructureValue(newValue);\n                    } else {\n                        propToModify.setResourceValue(newValue);\n                    }\n                }\n            }\n            if (hasNavTextChange != null) {\n                if (changeOwnTitle) {\n                    CmsProperty titleProp = ownProps.get(CmsPropertyDefinition.PROPERTY_TITLE);\n                    if (titleProp == null) {\n                        titleProp = new CmsProperty(CmsPropertyDefinition.PROPERTY_TITLE, null, null);\n                    }\n                    titleProp.setStructureValue(hasNavTextChange);\n                    ownPropertyChanges.add(titleProp);\n                }\n            }\n            if (!ownPropertyChanges.isEmpty()) {\n                cms.writePropertyObjects(resource, ownPropertyChanges);\n            }\n        } finally {\n            if (actionRecord.getChange() == LockChange.locked) {\n                cms.unlockResource(resource);\n            }\n        }\n\n    }", "\tprotected void refresh(final Object root) {\n\t\tpostRunnable(new Runnable() {\n\n\t\t\tpublic void run() {\n\t\t\t\tControl ctrl = viewer.getControl();\n\t\t\t\tif (ctrl != null && !ctrl.isDisposed())\n\t\t\t\t\tviewer.refresh(root);\n\t\t\t}\n\t\t});\n\t}\n", "private static boolean isInHorizontalTargetZone(float x,float y,float handleXStart,float handleXEnd,float handleY,float targetRadius){\n  if (x > handleXStart && x < handleXEnd && Math.abs(y - handleY) <= targetRadius) {\n    return true;\n  }\n  return false", "\tpublic void toDebugString() {\n\n\t\tcalculateInvoiceTotal();\n\n\t\tSystem.out.println(\"---NEW INVOICE \" + invoiceID + \"---\");\n\t\tSystem.out.println();\n\n\t\tIterator iter = invoiceLines.iterator();\n\t\twhile ( iter.hasNext() ) {\n\t\t\tAbstractInvoiceLine line = (AbstractInvoiceLine)iter.next();\n\t\t\tline.debugPrint();\n\t\t}\n\n\t\titer = taxBuckets.values().iterator();\n\t\twhile ( iter.hasNext() ) {\n\t\t\tTaxBucket bucket = (TaxBucket)iter.next();\n\t\t\tbucket.debugPrint();\t\n\t\t}\t\t\t\n\t\t\n\t\tSystem.out.println(\"Invoice total: \" + invTotal.toFormattedString() );\n\t}\n", "        public void handleAnimationEvent(AnimationEvent event) {\n            // Bomb explodes\n            if (event.getType() == AnimationEvent.FINISHED) {\n                target.explode();\n            }\n        }\n", "public static void withInstance ( String url , Properties properties , Closure c ) throws SQLException { Sql sql = null ; try { sql = newInstance ( url , properties ) ; c . call ( sql ) ; } finally { if ( sql != null ) sql . close ( ) ; } }", "protected static void put ( JsonValue targetObject , JsonPointer pointer , Object value ) throws SynchronizationException { String [ ] tokens = pointer . toArray ( ) ; if ( tokens . length == NUM_ ) { throw new SynchronizationException ( STR_ ) ; } JsonVa", "\tpublic int invoke_I(byte[] arg0) throws Exception {\n\t\tcheckState();\n\t\treturn Extension.InvokeP_I(arg0, fPoint);\n\t}\n", "public static boolean zoomToAddress ( final ZyGraph graph , final IAddress address , final INaviModule module , final boolean animate ) { Preconditions . checkNotNull ( graph , STR_ ) ; Preconditions . checkNotNull ( address , STR_ ) ; final InternalNodeCallBack callBack = new InternalNodeCallBack ( module , graph , address , animate ) ; graph . iterate ( callBack ) ; return callBack . nodeFound ( ) ; }", "public static TXCommitMessage combine(Set<TXCommitMessage> msgSet){\n  assert msgSet != null;\n  TXCommitMessage firstPart=null;\n  Iterator<TXCommitMessage> it=msgSet.iterator();\n  while (it.hasNext()) {\n    if (firstPart == null) {\n      firstPart=it.next();\n      continue;\n    }\n    firstPart.combine(it.next());\n  }\n  return firstPart;\n}\n", "\tpublic void sortByUsualOrder() {\n\t\tCollections.sort(getValues());\n\t}\n", "EspResetPasswordResult doActionResetPassword ( String email ) ;", "\tpublic void addUserQuery(String name, int mobile, String sMobile) {\n            this.name = name;\n            this.mobile = mobile;\n            this.sMobile = sMobile;\n\n            int tmp = sMobile.length();\n\n\n            if(tmp == MOBILENUMBER_LENGHT) {\n\t\tdb = new DbQuery();\n\t\tdb.addPerson(name, mobile);\n\n                msgBx = new MessageBox();\n                msgBx.addUserSuccess(this, name);\n            }\n            \n            else {\n                msgBx = new MessageBox();\n                msgBx.addUserMobileError(this);\n                System.out.println(mobile);\n            }\n\t}\n", "public void buildSerializableMethods(XMLNode node, Content classContentTree) throws DocletException {\n        Content serializableMethodTree = methodWriter.getSerializableMethodsHeader();\n        SortedSet<ExecutableElement> members = utils.serializationMethods(currentTypeElement);\n        if (!members.isEmpty()) {\n            for (ExecutableElement member : members) {\n                currentMember = member;\n                Content methodsContentTree = methodWriter.getMethodsContentHeader(\n                        currentMember == members.last());\n                buildChildren(node, methodsContentTree);\n                serializableMethodTree.addContent(methodsContentTree);\n            }\n        }\n        if (!utils.serializationMethods(currentTypeElement).isEmpty()) {\n            classContentTree.addContent(methodWriter.getSerializableMethods(\n                    configuration.getText(\"doclet.Serialized_Form_methods\"),\n                    serializableMethodTree));\n            if (utils.isSerializable(currentTypeElement) && !utils.isExternalizable(currentTypeElement)) {\n                if (utils.serializationMethods(currentTypeElement).isEmpty()) {\n                    Content noCustomizationMsg = methodWriter.getNoCustomizationMsg(\n                            configuration.getText(\"doclet.Serializable_no_customization\"));\n                    classContentTree.addContent(methodWriter.getSerializableMethods(\n                    configuration.getText(\"doclet.Serialized_Form_methods\"),\n                    noCustomizationMsg));\n                }\n            }\n        }\n    }", "private static final long yearOffset ( final int year ) { return yearOffset [ year - NUM_ ] ; }", "    public int hashCode() {\n        int ans = 0;\n        for (int i = cols.length - 1; i >= 0; i--) {\n            if (cols[i].name != null) {\n                ans += cols[i].name.hashCode() * 29;\n            }\n        }\n        return ans;\n    }\n", "public ArticleAttachments createUploadArticle(long articleId, File file) throws IOException {\n        return createUploadArticle(articleId, file, false);\n  }", "public Ids pushMessages(String[] msg, long delay) throws IOException {\n        ArrayList<Message> messages = new ArrayList<Message>();\n        for (String messageName: msg){\n            Message message = new Message();\n            message.setBody(messageName);\n            message.setDelay(delay);\n            messages.add(message);\n        }\n\n        MessagesArrayList msgs = new MessagesArrayList(messages);\n\n        IronReader reader = client.post(\"queues/\" + name + \"/messages\", msgs);\n        Ids ids = gson.fromJson(reader.reader, Ids.class);\n        reader.close();\n        return ids;\n    }", "private void drawMouseWorldAxis(){\n  Vector3 v=cursorWorldPosition;\n  if (!Float.isNaN(v.x + v.y + v.z)) {\n    shapeRenderer.begin();\n    shapeRenderer.line(v.x,v.y,v.z,v.x + 1,v.y,v.z,Color.RED,Color.RED);\n    shapeRenderer.line(v.x,v.y,v.z,v.x,v.y + 1,v.z,Color.GREEN,Color.GREEN);\n    shapeRenderer.line(v.x,v.y,v.z,v.x,v.y,v.z + 1,Color.BLUE,Color.BLUE);\n    shapeRenderer.end();\n  }\n}\n", "public void removeListener ( final ICriteriumTreeListener listener ) { m_listeners . removeListener ( listener ) ; }", "public <U>BaseSimpleReactStream<U> from(final LongStream stream){\n  return (BaseSimpleReactStream<U>)from(stream.boxed());\n}\n", "public static String buildSelectorFromElementsAndAttributeValue(String elementName,String attributeName,String attributeValue){\n  StringBuilder strb=new StringBuilder();\n  strb.append(elementName);\n  strb.append(OPEN_BRACKET);\n  strb.append(attributeName);\n  strb.append(EQUAL);\n  strb.append(attributeValue);\n  strb.append(CLOSE_BRACKET);\n  return strb.toString();\n}\n", "    public void processAST(Tree ast) throws ASTProcessException {\n        // Initialize the storage if it was not initialized\n        if(!storage.isInitialized()) {\n            if(ast.getType() == CMLParser.DEFINITION_LIST) {\n                storage.init(VariableStorage.ZERO_LEVEL_IS_GLOBAL);\n            }\n            else {\n                storage.init(VariableStorage.ZERO_LEVEL_IS_LOCAL);\n            }\n        }\n\n        // Process the AST\n        processChildren(ast);\n        // Indicates the end of the processing\n        storage.end();\n    }\n", "public static <T extends Annotation> Predicate<T> annotationAnnotatedWith(Class<? extends Annotation>\n            annotationClass, boolean includeMetaAnnotations) {\n        return candidate -> elementAnnotatedWith(annotationClass, includeMetaAnnotations)\n                .test(candidate.annotationType());\n    }", "public final T raw ( String text , boolean expand ) { if ( text != null ) { writeCurrentTag ( ) ; text = expand ? expand ( text ) : text ; write ( text ) ; } return getSelf ( ) ; }", "\tpublic void defineVariable(String name, Expression value) {\n\t\tvariables.put(name, value);\n\t}\n", "public static boolean isFile ( String path ) { File f = new File ( path ) ; return f . isFile ( ) ; }", "@Override\n    public void getGeoDetails(final String id) {\n        getDispatcher().invokeLater(new AsyncTask(GEO_DETAILS, listeners) {\n            @Override\n            public void invoke(List<TwitterListener> listeners) throws TwitterException {\n                Place place = twitter.getGeoDetails(id);\n                for (TwitterListener listener : listeners) {\n                    try {\n                        listener.gotGeoDetails(place);\n                    } catch (Exception e) {\n                        logger.warn(\"Exception at getGeoDetails\", e);\n                    }\n                }\n            }\n        });\n    }", "void checkProxyTaskStateAndProc ( ) ;", "public Optional<PartnerAccount> show(long partnerId, long accountId)\n    {\n        return HTTP.GET(String.format(\"/v2/partners/%d/accounts/%d\", partnerId, accountId), PARTNER_ACCOUNT);\n    }", "\tprivate String buildMetadataSearchLink(String status, String changeDate) {\n\t\t// FIXME : hard coded link to main.search \n\t\treturn siteUrl+\"/main.search?_status=\"+status+\"&_statusChangeDate=\"+changeDate;\n\t}\n", "    public long calculateDistanceRating(long flatAdRating, double distance) {\n        return (long) (flatAdRating - 700 * distance);\n    }\n", "void resetUpdate ( ) { update = null ; }", "public java.lang.StringBuilder insert(int offset,boolean b){\n  if (b)   return insert(offset,\"true\");\n  return insert(offset,\"false\");\n}\n", "    public void addParameterizedTransformation( CT_MathTransform parameterizedTransformation ) {\n        this.parameterizedTransformation.add( parameterizedTransformation );\n    }\n", "AutoDetectDataType switchType(Object obj){\n  int typeId=getTypeId(obj);\n  AutoDetectDataType l=last;\n  if (typeId != l.typeId) {\n    last=l=newType(typeId);\n  }\n  return l;\n}\n", "public MouseButtonListener ( ) { isCancelArmed = BOOL_ ; }", "public int newLocal ( final Type type ) { Object t ; switch ( type . getSort ( ) ) { case Type . BOOLEAN : case Type . CHAR : case Type . BYTE : case Type . SHORT : case Type . INT : t = Opcodes . INTEGER ; break ; case Type . FLOAT : t = Opcodes . FLOAT ", "public WQGroup eq(final String field, final Object... values)\n\t{\n\t\tif (values == null)\n\t\t{\n\t\t\tadd(WQConstraint.eq(field, null));\n\t\t}\n\t\telse if (values.length == 1)\n\t\t{\n\t\t\tadd(WQConstraint.eq(field, values[0]));\n\t\t}\n\t\telse if (values.length > 1)\n\t\t{\n\t\t\tfinal WQGroup or = or();\n\n\t\t\tfor (Object value : values)\n\t\t\t\tor.eq(field, value);\n\t\t}\n\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Assert that a field equals one of the provided values. Implicitly creates a new OR group if multiple values are supplied.\n\t * At least one value must be supplied.\n\t *\n\t * @param field\n\t * @param values\n\t *\n\t * @return\n\t */\n\tpublic WQGroup eq(final String field, final Collection<?> values)\n\t{\n\t\tif (values == null)\n\t\t\tthrow new IllegalArgumentException(\"Must supply at least one value to .eq when passing a Collection\");\n\t\telse if (values.size() == 0)\n\t\t\treturn eq(field, values.stream().findFirst().get());\n\t\telse\n\t\t{\n\t\t\tfinal WQGroup or = or();\n\n\t\t\tfor (Object value : values)\n\t\t\t\tor.eq(field, value);\n\n\t\t\treturn this;\n\t\t}\n\t}\n\n\tpublic WQGroup neq(final String field, final Object value)\n\t{\n\t\treturn add(WQConstraint.neq(field, value));\n\t}\n\n\n\tpublic WQGroup isNull(final String field)\n\t{\n\t\treturn add(WQConstraint.isNull(field));\n\t}\n\n\n\tpublic WQGroup isNotNull(final String field)\n\t{\n\t\treturn add(WQConstraint.isNotNull(field));\n\t}\n\n\n\tpublic WQGroup lt(final String field, final Object value)\n\t{\n\t\treturn add(WQConstraint.lt(field, value));\n\t}\n\n\n\tpublic WQGroup le(final String field, final Object value)\n\t{\n\t\treturn add(WQConstraint.le(field, value));\n\t}\n\n\n\tpublic WQGroup gt(final String field, final Object value)\n\t{\n\t\treturn add(WQConstraint.gt(field, value));\n\t}\n\n\n\tpublic WQGroup ge(final String field, final Object value)\n\t{\n\t\treturn add(WQConstraint.ge(field, value));\n\t}\n\n\n\tpublic WQGroup contains(final String field, final Object value)\n\t{\n\t\treturn add(WQConstraint.contains(field, value));\n\t}\n\n\n\tpublic WQGroup startsWith(final String field, final Object value)\n\t{\n\t\treturn add(WQConstraint.startsWith(field, value));\n\t}\n\n\n\tpublic WQGroup range(final String field, final Object from, final Object to)\n\t{\n\t\treturn add(WQConstraint.range(field, from, to));\n\t}\n\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Sub-groups\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\t/**\n\t * Construct a new OR group and return it for method chaining\n\t *\n\t * @return\n\t */\n\tpublic WQGroup and()\n\t{\n\t\tfinal WQGroup and = WQGroup.newAnd();\n\n\t\tadd(and);\n\n\t\treturn and;\n\t}\n\n\n\t/**\n\t * Construct a new OR group and return it for method chaining\n\t *\n\t * @return\n\t */\n\tpublic WQGroup or()\n\t{\n\t\tfinal WQGroup or = WQGroup.newOr();\n\n\t\tadd(or);\n\n\t\treturn or;\n\t}\n\n\n\t/**\n\t * Construct a new AND group, using the supplier to add the constraints to the group. Returns the original {@link WQGroup}\n\t * for method chaining\n\t *\n\t * @param consumer\n\t *\n\t * @return\n\t */\n\tpublic WQGroup and(Consumer<WQGroup> consumer)\n\t{\n\t\tfinal WQGroup and = WQGroup.newAnd();\n\n\t\tadd(and);\n\n\t\t// Let the consumer build their sub-constraints\n\t\tif (consumer != null)\n\t\t\tconsumer.accept(and);\n\n\t\treturn this;\n\t}\n\n\n\t/**\n\t * Construct a new OR group, using the supplier to add the constraints to the group. Returns the original {@link WQGroup}\n\t * for\n\t * method chaining\n\t *\n\t * @param consumer\n\t *\n\t * @return\n\t */\n\tpublic WQGroup or(Consumer<WQGroup> consumer)\n\t{\n\t\tfinal WQGroup or = WQGroup.newOr();\n\n\t\tadd(or);\n\n\t\t// Let the consumer build their sub-constraints\n\t\tif (consumer != null)\n\t\t\tconsumer.accept(or);\n\n\t\treturn this;\n\t}\n\n\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Helper constructors\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\t/**\n\t * Construct a new empty AND group\n\t *\n\t * @return\n\t */\n\tpublic static WQGroup newAnd()\n\t{\n\t\treturn new WQGroup(WQGroupType.AND);\n\t}\n\n\n\t/**\n\t * Construct a new empty OR group\n\t *\n\t * @return\n\t */\n\tpublic static WQGroup newOr()\n\t{\n\t\treturn new WQGroup(WQGroupType.OR);\n\t}\n\n\n\t@Override\n\tpublic String toQueryFragment()\n\t{\n\t\tif (constraints.size() == 1)\n\t\t\treturn constraints.get(0).toQueryFragment();\n\t\telse\n\t\t{\n\t\t\tfinal String operatorStr = \" \" + operator.name() + \" \";\n\n\t\t\treturn constraints.stream().map(WQConstraintLine:: toQueryFragment).collect(Collectors.joining(operatorStr,\n\t\t\t                                                                                               \"(\",\n\t\t\t                                                                                               \")\"));\n\t\t}\n\t}\n}", "public LazyObjectAccessor ( ConnectionFactory connectionFactory , String componentContext , String localId , JsonValue value ) { this . connectionFactory = connectionFactory ; this . object = value ; this . componentContext = componentContext ; this . loc", "    private CategoryDataset createCategoryDataset2() {\n        DefaultCategoryDataset result = new DefaultCategoryDataset();\n        result.addValue(1.0, \"R0\", \"C0\");\n        result.addValue(-2.0, \"R1\", \"C0\");\n        result.addValue(2.0, \"R0\", \"C1\");\n        result.addValue(-1.0, \"R1\", \"C1\");\n        return result;\n    }\n", "public State lastState() {\n        Entry<Character, State> last = transitions.lastEntry();\n        if (last == null)\n            return null;\n\n        return last.getValue();\n    }", "public static Bitmap decodeSampledBitmapFromResource ( Resources res , int resId , int reqWidth , int reqHeight , ImageCache cache ) { final BitmapFactory . Options options = new BitmapFactory . Options ( ) ; options . inJustDecodeBounds = BOOL_ ; BitmapFactory . decodeResource ( res , resId , options ) ; options . inSampleSize = calculateInSampleSize ( options , reqWidth , reqHeight ) ; if ( Utils . hasHoneycomb ( ) ) { addInBitmapOptions ( options , cache ) ; } options . inJustDecodeBounds = BOOL_ ; return BitmapFactory . decodeResource ( res , resId , options ) ; }", "public static void sendBinary(final ByteBuffer[] data, final WebSocketChannel wsChannel, final WebSocketCallback<Void> callback, long timeoutmillis) {\n        sendInternal(mergeBuffers(data), WebSocketFrameType.BINARY, wsChannel, callback, null, timeoutmillis);\n    }", "    public boolean navigateLibrary(int key) {\n   \t    //Handle only relevant input\n        if (games==null || games.length==0)\n        \treturn false;\n        \n        if (key==NPC.DIR_UP)\n        \tthis.incrementCurrentGameID(-1);\n        else if (key==NPC.DIR_DOWN)\n        \tthis.incrementCurrentGameID(1);\n        else if (key==InputAdapter.KEY_ACCEPT)\n        \treturn true;\n        \n        return false;\n    }\n", "private CGlobalSettings ( ) { }", "public byte[] decryptSeq(byte[] baseKey,int usage,byte[] checksum,byte[] ciphertext,int start,int len) throws GeneralSecurityException, KrbCryptoException {\n  if (!KeyUsage.isValid(usage)) {\n    throw new GeneralSecurityException(\"Invalid key usage number: \" + usage);\n  }\n  byte[] salt=new byte[4];\n  byte[] kSeq=getHmac(baseKey,salt);\n  kSeq=getHmac(kSeq,checksum);\n  Cipher cipher=Cipher.getInstance(\"ARCFOUR\");\n  SecretKeySpec secretKey=new SecretKeySpec(kSeq,\"ARCFOUR\");\n  cipher.init(Cipher.DECRYPT_MODE,secretKey);\n  byte[] output=cipher.doFinal(ciphertext,start,len);\n  return output;\n}\n", "private static boolean isContainedIn(CQIE cq1, CQIE cq2) {\n        if (!cq2.getHead().equals(cq1.getHead()))\n            return false;\n\n        for (Function atom : cq2.getBody())\n            if (!cq1.getBody().contains(atom))\n                return false;\n\n        return true;\n    }", "  public void copy(InputStream in, MpegOutputStream out, IStreamController controller) throws IOException, SkipException {\n    LOG.debug(\"Streaming from inputstream...\");\n\n    int read;\n    byte[] buf = new byte[16384];\n\n    while ((read = in.read(buf, 0, buf.length)) != -1) {\n      out.write(buf, 0, read);\n      if (controller.mustSkip()) {\n        LOG.debug(\"Skiprequest received\");\n        throw new SkipException();\n      }\n    }\n    LOG.debug(\"Streaming from inputstream done.\");\n  }\n", "@Override\n    public boolean decompose( ZMatrixRMaj A )\n    {\n        if( A.numRows != A.numCols )\n            throw new IllegalArgumentException(\"A must be square.\");\n        if( A.numRows <= 0 )\n            return false;\n\n        QH = A;\n\n        N = A.numCols;\n\n        if( b.length < N*2 ) {\n            b = new double[ N*2 ];\n            gammas = new double[ N ];\n            u = new double[ N*2 ];\n        }\n        return _decompose();\n    }", "@Override\n    public Exception mapCSITransactionRolledBackException\n                    (EJSDeployedSupport s, CSITransactionRolledbackException ex)\n                                    throws com.ibm.websphere.csi.CSIException\n    {\n        Throwable cause = null;\n        Exception causeEx = null;\n\n        // If the invoked method threw a System exception, or an Application\n        // exception that was marked for rollback, or the application called\n        // setRollBackOnly... then use the exception thrown by the method\n        // as the cause of the rollback exception.\n        if (s.exType == ExceptionType.UNCHECKED_EXCEPTION)\n        {\n            cause = s.ivException;\n        }\n\n        // Otherwise, use the cause of the CSIException as the cause,\n        // unless it has no cause... then use the app exception.\n        else\n        {\n            cause = ExceptionUtil.findCause(ex);\n            if (cause == null)\n                cause = s.ivException;\n        }\n\n        // Because this will be mapped to an EJBException, and Throwable\n        // is not supported on the constructor... insure the cause is\n        // either an Exception, or wrap it in an Exception.\n        if (cause != null)\n        {\n            if (cause instanceof Exception)\n            {\n                causeEx = (Exception) cause;\n            }\n            else\n            {\n                causeEx = new Exception(\"See nested Throwable\", cause);\n            }\n        }\n\n        // Now, map this CSIException... this will take care of getting\n        // the stack set appropriately and will set the 'cause' on\n        // Throwable, so getCause works.\n        Exception mappedEx = mapCSIException(ex, causeEx, cause);\n\n        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n            Tr.debug(tc, \"mapped exception = \" + mappedEx);\n\n        return mappedEx;\n    }", "\tpublic void insertBeforeNoRedirect(PatchingChain pchain, List instrumCode, Stmt sTarget) {\n\t\tfor (Object oS : instrumCode)\n\t\t\tpchain.insertBeforeNoRedirect(oS, sTarget);\n\t}\n", "private long hash(final double[] a,final int l,final int k){\n  final int[] w=weight[k];\n  long h=init[k];\n  int i=l;\n  while (i-- != 0)   h^=(h << 5) + Double.doubleToRawLongBits(a[i]) * w[i % NUMBER_OF_WEIGHTS] + (h >>> 2);\n  return (h & 0x7FFFFFFFFFFFFF", "public void apply( DMatrixRMaj H , DMatrixRMaj output ) {\n\t\toutput.reshape(3,H.numCols);\n\t\tint stride = H.numCols;\n\t\tfor (int col = 0; col < H.numCols; col++) {\n\t\t\t// This column in H\n\t\t\tdouble h1 = H.data[col], h2 = H.data[col+stride], h3 = H.data[col+2*stride];\n\n\t\t\toutput.data[col] = h1/stdX - meanX*h3/stdX;\n\t\t\toutput.data[col+stride] = h2/stdY - meanY*h3/stdY;\n\t\t\toutput.data[col+2*stride] = h3;\n\t\t}\n\t}", "public static ExpectedVersion of ( int eventNumber ) { return new ExpectedVersion ( eventNumber ) ; }", "public abstract Object apply ( SqlFunctionExecutionContext context ) ;", "public boolean equals(String password){\n  if (password == null) {\n    return false;\n  }\n  if (!isEncrypted(password)) {\n    password=encrypt(algorithm,password);\n  }\n  if (!password.startsWith(algorithm + SEPERATOR)) {\n    throw new IllegalArgumentException(\"Algorithm mismatch\");\n  }\n  return value.equalsIgnoreCase(password);\n}\n", "    public Boolean getIsModelValid() {\n        FacesContext fc = FacesContext.getCurrentInstance();\n        try {\n            Integer id = Integer.parseInt((String) fc.getExternalContext().\n                    getRequestParameterMap().get(\"modelID\"));\n            return initData(id);\n        } catch (Exception e) {\n            /* there should be no ErrorBean.printStackTrace(e); here */\n            return false;\n        }\n    }\n", "public static int floorLog2(double d){\n  if (d <= 0)   throw new ArithmeticException(\"Negative number or zero\");\n  long bits=Double.doubleToLongBits(d);\n  int exp=((int)(bits >> 52)) & 0x7FF;\n  if (exp == 0x7FF)   throw new ArithmeticException(\"Infinity or NaN\");\n  if (exp == 0)   return floorLog2(d * 18014398509481984L) - 54;\n  return exp - 1023;\n}\n", "public List<String> tokenize(String inputFileName,PrintWriter writer){\n  JavaRDD<String> input=readTextFile(inputFileName);\n  JavaRDD<String> output=tokenize(input);\n  List<String> lines=output.collect();\n  for (  String line : lines) {\n    writer.write(line);\n    writer.write('\\n');\n  }\n  writer.flush();\n  return lines;\n}\n", "public static float measureText(final IFont pFont,final CharSequence pText,final int pStart,final int pEnd,final float[] pWidths){\n  final int textLength=pEnd - pStart;\n  if (pStart == pEnd) {\n    return 0;\n  }\n else   if (textLength == 1) {\n    return pFont.getLetter(pText.charAt(pStart)).mWidth;\n  }\n  Letter previousLetter=null;\n  float width=0;\n  for (int pos=pStart, i=0; pos < pEnd; pos++, i++) {\n    final Letter letter=pFont.getLetter(pText.charAt(pos));\n    if (previousLetter != null) {\n      width+=previousLetter.getKerning(letter.mCharacter);\n    }\n    previousLetter=letter;\n    if (pos == (pEnd - 1)) {\n      width+=letter.mOffsetX + letter.mWidth;\n    }\n else {\n      width+=letter.mAdvance;\n    }\n    if (pWidths != null) {\n      pWidths[i]=width;\n    }\n  }\n  return width;\n}\n", "private static boolean isPrimitive(String description){\n  String x=asmTrim(description);\n  if (x.length() == 0) {\n    return true;\n  }\n else   if (x.equals(\"Z\") || x.equals(\"J\") || x.equals(\"I\")|| x.equals(\"F\")|| x.equals(\"D\")|| x.equals(\"C\")|| x.equals(\"T\")|| x.equals(\"G\")) {\n    return true;\n  }\n  return false;\n}\n", "public static void setAccountLinkingUrl(String accountLinkingUrl) {\n\t\tSetAccountLinkingUrlRequest request = new SetAccountLinkingUrlRequest(accountLinkingUrl);\n\t\tFbBotMillNetworkController.postMessengerProfile(request);\n\t}", "@Override\n    public String get(final String key) {\n        return retrieve(new Callable<String>() {\n            @Override\n            public String call() throws Exception {\n                return configuration.getString(key);\n            }\n        }, null);\n    }", "    public IArray1D getArray(int index) throws ArrayIndexOutOfBoundsException {\n        if (index != 0)\n            throw new ArrayIndexOutOfBoundsException();\n        return this;\n    }\n", "public List<Action> getRootActions() {\n\t\tfinal List<Action> rootActions = srcUpdTrees.stream().map(t -> originalActionsSrc.get(t))\n\t\t\t\t.collect(Collectors.toList());\n\n\t\trootActions.addAll(srcDelTrees.stream() //\n\t\t\t\t.filter(t -> !srcDelTrees.contains(t.getParent()) && !srcUpdTrees.contains(t.getParent())) //\n\t\t\t\t.map(t -> originalActionsSrc.get(t)) //\n\t\t\t\t.collect(Collectors.toList()));\n\n\t\trootActions.addAll(dstAddTrees.stream() //\n\t\t\t\t.filter(t -> !dstAddTrees.contains(t.getParent()) && !dstUpdTrees.contains(t.getParent())) //\n\t\t\t\t.map(t -> originalActionsDst.get(t)) //\n\t\t\t\t.collect(Collectors.toList()));\n\n\t\trootActions.addAll(dstMvTrees.stream() //\n\t\t\t\t.filter(t -> !dstMvTrees.contains(t.getParent())) //\n\t\t\t\t.map(t -> originalActionsDst.get(t)) //\n\t\t\t\t.collect(Collectors.toList()));\n\n\t\trootActions.removeAll(Collections.singleton(null));\n\t\treturn rootActions;\n\t}", "    public void setValue(String value) {\n        final String oldValue = this.value;\n        this.value = value;\n        \n        if (value != oldValue && isDefined) {\n            firePropertyChange(\"value\", oldValue, value);\n        }\n        isDefined = true;\n    }\n", "@Override public boolean shouldSkipField(FieldAttributes fieldAttributes){\n  return blacklist.contains(fieldAttributes.getName());\n}\n", "public byte[] read() throws IOException {\n  ByteArrayOutputStream bout=new ByteArrayOutputStream();\n  int b=0;\n  while ((b=in.read()) >= 0) {\n    bout.write(b);\n  }\n  return bout.toByteArray();\n}\n", "\t\tpublic boolean importData( final JComponent component, final Transferable transferable ) {\n\t\t\ttry {\n\t\t\t\tfinal JTree nodeTree = (JTree)component;\n\t\t\t\tfinal TreePath treePath = nodeTree.getSelectionPath();\n\t\t\t\tfinal List<BeanNode> nodes = (List<BeanNode>)transferable.getTransferData( ViewNodeTransferable.VIEW_NODE_FLAVOR );\n\t\t\t\treturn BricksWindow.processViewNodeDrop( treePath, nodes );\n\t\t\t}\n\t\t\tcatch( UnsupportedFlavorException exception ) {\n\t\t\t\texception.printStackTrace();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcatch( java.io.IOException exception ) {\n\t\t\t\texception.printStackTrace();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcatch( Exception exception ) {\n\t\t\t\texception.printStackTrace();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n", "private void subscribe ( Throwable exception ) { String action = context . getString ( R . string . toast_sub_failed , ( Object [ ] ) additionalArgs ) ; c . addAction ( action ) ; Notify . toast ( context , action , Toast . LENGTH_SHORT ) ; }", "    public void loadGLTexture(PImage img) {\n    \tif (!isPImagePOT(img.width, img.height) && PlatformUtil.isNPOTTextureSupported()){\n    \t\tthis.glTextureSettings.target = TEXTURE_TARGET.RECTANGULAR;\n    \t\tthis.glWidth = img.width;\n    \t\tthis.glHeight = img.height;\n    \t}else{\n    \t\tthis.glTextureSettings.target = TEXTURE_TARGET.TEXTURE_2D;\n    \t\tthis.glWidth = ToolsMath.nextPowerOfTwo(img.width);\n    \t\tthis.glHeight = ToolsMath.nextPowerOfTwo(img.height);\n    \t}\n\n    \tif ((img.width != width) || (img.height != height) ) {\n    \t\tinit(img.width, img.height, this.glTextureSettings);\n    \t}\n    \tthis.updateGLTexture(img.pixels); \n    }\n", "    public int delay() {\n        return getDelay();\n//-        return delay;\n    }\n", "public static int putBytes(byte[] tgtBytes, int tgtOffset, byte[] srcBytes,\n      int srcOffset, int srcLength) {\n    System.arraycopy(srcBytes, srcOffset, tgtBytes, tgtOffset, srcLength);\n    return tgtOffset + srcLength;\n  }", "Map < String , String > saveConfig ( ) ;", "public FileSecretHelper ( String secretFile ) throws IOException { properties = new Properties ( ) ; try ( FileInputStream fileInputStream = new FileInputStream ( secretFile ) ) { properties . load ( fileInputStream ) ; } }", "public HttpRequest acceptGzipEncoding ( ) { return acceptEncoding ( ENCODING_GZIP ) ; }", "public static void print(char x){\n  out.print(x);\n  out.flush();\n}\n", "    public void setLink(String uri) {\n        this.uri = uri;\n        link.removeFromParent();\n        link = new HtmlContainer();\n        link.setHtml(\"<p style='padding:4px'><a href='\"+uri+\"'>\"+PropertyProvider.getInstance().getText(PropertyProvider.TEXT_DOWNLOAD_LINK)+\"</a></p>\");\n        this.add(link);\n    }\n", "\tpublic void removeAccount(String requesterLogin, long accountId) throws UnknownEntityException, PermissionDeniedException, PersistenceException {\n\t\tAccount ac = this.accountDAO.getAccount(accountId);\n\t\tif (!ac.getLogin().equals(requesterLogin)) {\n\t\t\tthrow new PermissionDeniedException(\"Permission denied: you do not own this account\");\n\t\t}\n\t\tthis.removeAccount(ac);\n\t}\n", "public static < T > boolean addAll ( Collection < T > self , Iterator < ? extends T > items ) { boolean changed = BOOL_ ; while ( items . hasNext ( ) ) { T next = items . next ( ) ; if ( self . add ( next ) ) changed = BOOL_ ; } return changed ; }", "public StatelessChunkListDataIterator ( String hQuery , SessionFactory sessionFactory , int fetchSize , int chunkSize ) { super ( hQuery , sessionFactory , fetchSize , chunkSize ) ; }", "    public void setPusl(String value) {\n        if (value.length() > 2) {\n            value = value.substring(0, 2);\n        }\n        setField(\"IBPUSL\", value);\n    }\n", "protected Transferable createTransferable(JComponent c){\n  if (c instanceof JTree) {\n    tree=(JTree)c;\n    TreePath[] paths=tree.getSelectionPaths();\n    if (paths == null || paths.length == 0) {\n      return null;\n    }\n    StringBuffer plainBuf=new StringBuffer();\n    StringBuffer htmlBuf=new StringBuffer();\n    htmlBuf.append(\"<html>\\n<body>\\n<ul>\\n\");\n    TreeModel model=tree.getModel();\n    TreePath lastPath=null;\n    TreePath[] displayPaths=getDisplayOrderPaths(paths);\n    for (    TreePath path : displayPaths) {\n      Object node=path.getLastPathComponent();\n      boolean leaf=model.isLeaf(node);\n      String label=getDisplayString(path,true,leaf);\n      plainBuf.append(label + \"\\n\");\n      htmlBuf.append(\"  <li>\" + label + \"\\n\");\n    }\n    plainBuf.deleteCharAt(plainBuf.length() - 1);\n    htmlBuf.append(\"</ul>\\n</body>\\n</html>\");\n    tree=null;\n    return new BasicTransferable(plainBuf.toString(),htmlBuf.toString());\n  }\n  return null;\n}\n", "\tpublic void nextParagraph(){\n\t\tif(currentIndexParagraph != listOfParagraph.size()-1)\n\t\t\tcurrentIndexParagraph++;\n\t\tindexOfSentence = getSentenceNumber(currentIndexParagraph);\n\t\tif(isPlaying)\n\t\t{\n\t\t\tplayer.cancel();\n\t\t\tplay(false);\n\t\t}\n\t}\n", "@Override\n\tpublic long dynamicQueryCount(DynamicQuery dynamicQuery,\n\t\tProjection projection) {\n\t\treturn commerceAvailabilityEstimatePersistence.countWithDynamicQuery(dynamicQuery,\n\t\t\tprojection);\n\t}", "private void addOnCurvePoint ( PointRec rec , RenderState rs ) { if ( rs . firstOn == null ) { rs . firstOn = rec ; rs . gp . moveTo ( rec . x , rec . y ) ; } else if ( rs . prevOff != null ) { rs . gp . quadTo ( rs . prevOff . x , rs . prevOff . y , rec ", "public TransportApiResult<Stop> getStop(String stopId)\r\n    {\r\n    \tif (Extensions.isNullOrWhiteSpace(stopId))\r\n    \t{\r\n    \t\tthrow new IllegalArgumentException(\"StopId is required.\");\r\n    \t}\r\n    \t\r\n    \treturn TransportApiClientCalls.getStop(tokenComponent, settings, stopId);\r\n    }", "    public E remove(int index) {\n\tthrow new UnsupportedOperationException();\n    }\n", "protected DateFormat handleGetDateFormat(String pattern, ULocale locale) {\n        return handleGetDateFormat(pattern, null, locale);\n    }", "public List<Item> getQueuedItems() {\n        LinkedList<Item> list = new LinkedList<>();\n        for (Item item : Jenkins.getInstance().getQueue().getItems()) {\n            if (item.task == owner) {\n                list.addFirst(item);\n            }\n        }\n    \treturn list;\n    }", "public static int [ ] transformIntArray ( Integer [ ] source ) { int [ ] destin = new int [ source . length ] ; for ( int i = NUM_ ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }", "private void updateBorder ( ) { m_tableBorder . setTitle ( getBorderText ( ) ) ; updateUI ( ) ; }", "boolean withinLine ( final TextPosition pos ) { final boolean underTop = top <= pos . getY ( ) ; final boolean overBottom = ( pos . getY ( ) + pos . getHeight ( ) ) <= bottom ; return underTop && overBottom ; }", "\tprivate ChannelAgent fieldSetChannelAgentForSupply( final String supplyID ) {\n\t\treturn new ChannelAgent( accelerator.getMagnetMainSupply( supplyID ).getChannel( MagnetMainSupply.FIELD_SET_HANDLE ) );\n\t}\n", "    public void set(Class intf, Object object) throws ContextException {\n        set (intf.getName(), object);\n    }\n", "\tfinal public boolean includesNumericCommand() {\n\t\treturn includesNumericCommand;\n\t}\n", "public boolean isCompetitor(Island isl) {\n        for (Coordinate c : isl) {\n            for (Coordinate d : islandCoordinates) {\n                if (c.sameColumn(d) || c.sameRow(d)) return true;\n            }\n        }\n        return false;\n    }", "public void setIconAwesome(String _iconAwesome) {\n\t\tAddResourcesListener.setNeedsFontsAwesome(this);\n\t\tgetStateHelper().put(PropertyKeys.iconAwesome, _iconAwesome);\n\t}", "    public void addWindowListener(WindowListener l) {\n        getEventListenerList().removeListener(WindowListener.class, this);\n        getEventListenerList().addListener(WindowListener.class, l);\n        firePropertyChange(WINDOW_LISTENERS_CHANGED_PROPERTY, null, l);\n    }\n", "public ProjectCalendar getBaselineCalendar()\n   {\n      //\n      // Attempt to locate the calendar normally used by baselines\n      // If this isn't present, fall back to using the default\n      // project calendar.\n      //\n      ProjectCalendar result = getCalendarByName(\"Used for Microsoft Project 98 Baseline Calendar\");\n      if (result == null)\n      {\n         result = getDefaultCalendar();\n      }\n      return result;\n   }", "protected void seedLine(String uri){\n  if (!uri.matches(\"[a-zA-Z][\\\\w+\\\\-]+:.*\")) {\n    uri=\"http://\" + uri;\n  }\n  try {\n    UURI uuri=UURIFactory.getInstance(uri);\n    CrawlURI curi=new CrawlURI(uuri);\n    curi.setSeed(true);\n    curi.setSchedulingDirective(SchedulingConstants.MEDIUM);\n    if (getSourceTagSeeds()) {\n      curi.setSourceTag(curi.toString());\n    }\n    publishAddedSeed(curi);\n  }\n catch (  URIException e) {\n    nonseedLine(uri);\n  }\n}\n", "boolean matches ( Field field ) ;", "public static boolean isChartByDistance(Context context){\n  return CHART_X_AXIS_DEFAULT.equals(getString(context,R.string.chart_x_axis_key,CHART_X_AXIS_DEFAULT));\n}\n", "public ResourceLazyLoadingScript name ( String name ) { this . name = name ; return this ; }", "public static void doEnqueue(final Jedis jedis, final String namespace, final String queue, final String jobJson) {\n        jedis.sadd(JesqueUtils.createKey(namespace, QUEUES), queue);\n        jedis.rpush(JesqueUtils.createKey(namespace, QUEUE, queue), jobJson);\n    }", "int readInt ( ) throws IOException { mDexFile . readFully ( tmpBuf , NUM_ , NUM_ ) ; if ( isBigEndian ) { return ( tmpBuf [ NUM_ ] & NUM_ ) | ( ( tmpBuf [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( tmpBuf [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( tmpBuf [ NUM_ ] & NUM_ ) <<", "private Metric predictAnomalies() {\n        Metric predictions = new Metric(getResultScopeName(), getResultMetricName());\n        Map<Long, Double> predictionDatapoints = new HashMap<>();\n\n        double[][] noiseMatrix = rpca.getE().getData();\n        double[] noiseVector = matrixToVector(noiseMatrix);\n\n        for (int i = 0; i < noiseVector.length; i++) {\n            Long timestamp = timestamps[i];\n            double noiseValue = noiseVector[i];\n            double anomalyScore = calculateAnomalyScore(noiseValue);\n            predictionDatapoints.put(timestamp, anomalyScore);\n        }\n\n        predictions.setDatapoints(predictionDatapoints);\n        return predictions;\n    }", "    private InputMethodRequests getIMRequests() {\n        InputMethodRequests imRequests = null;\n    \n        if (client != null) {\n            imRequests = client.getInputMethodRequests();\n            //???AWT\n            /*\n            if (imRequests == null) {                \n                imRequests = getCompositionWindow().getInputMethodRequests();\n            }\n            */\n        }\n        \n        return imRequests;\n    }\n", "protected void cleanUp(){\n  if (isReleaseReferences()) {\n    cleanUpOnAck();\n    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {\n      logger.logDebug(\"dialog cleanup : \" + getDialogId());\n    }\n    if (eventListeners != null) {\n      eventListeners.clear();\n    }\n    timerTaskLock=null;\n    ackSem=null;\n    contactHeader=null;\n    eventHeader=null;\n    firstTransactionId=null;\n    firstTransactionMethod=null;\n    lastResponseDialogId=null;\n    lastResponseMethod=null;\n    lastResponseTopMostVia=null;\n    if (originalRequestRecordRouteHeaders != null) {\n      originalRequestRecordRouteHeaders.clear();\n      originalRequestRecordRouteHeaders=null;\n      originalRequestRecordRouteHeadersString=null;\n    }\n    if (routeList != null) {\n      routeList.clear();\n      routeList=null;\n    }\n    responsesReceivedInForkingCase.clear();\n  }\n}\n", "@Override public String graph() throws Exception {\n  if (m_Tree == null) {\n    throw new Exception(\"RandomTree: No model built yet.\");\n  }\n  StringBuffer resultBuff=new StringBuffer();\n  m_Tree.toGraph(resultBuff,0,null);\n  String result=\"digraph RandomTree {\\n\" + \"edge [style=bold]\\n\" + resultBuff.toString() + \"\\n}\\n\";\n  return result;\n}\n", "  public void setOptions(String[] options) throws Exception {\n  \n    String errorString = Utils.getOption('M', options);\n    if (errorString.length() != 0) {\n      setMethod(new SelectedTag(Integer.parseInt(errorString), \n                                 ", "    public void spanStructureChanged(SpanModelEvent e){\n        resizeAndRepaint();\n    }\n", "public Sort(){\n  this(new String[0],new boolean[0]);\n}\n", "public static Vectorizer load ( File f , boolean hasHeaderLine ) throws IOException { return new TextFormatVectorizer ( TextFormatVectorizerUtils . readEmbeddingFileTxt ( f , hasHeaderLine ) ) ; }", "    public void loadBuildFile(File file) {\n        loadBuildFile(file, true);\n    }\n", "public void exec ( String description , String baseCommand ) throws BackupException { exec ( description , baseCommand . split ( STR_ ) ) ; }", "public static String encodeNonCodes(String string){\n  Matcher matcher=nonCodes.matcher(string);\n  StringBuffer buf=new StringBuffer();\n  int idx=0;\n  while (matcher.find(idx)) {\n    int start=matcher.start();\n    buf.append(string.substring(idx,start));\n    buf.append(\"%25\");\n    idx=start + 1;\n  }\n  buf.append(string.substring(idx));\n  return buf.toString();\n}\n", "@Override\n    public CancelCertificateTransferResult cancelCertificateTransfer(CancelCertificateTransferRequest request) {\n        request = beforeClientExecution(request);\n        return executeCancelCertificateTransfer(request);\n    }", "  private void storeUserProfile(OAuthUser user) {\n    PersistenceManager pm = pmf.getPersistenceManager();\n    try {\n      pm.makePersistent(user);\n    } finally {\n      pm.close();\n    }\n  }\n", "\tpublic int endPC() {\n\t\treturn endPC;\n\t}\n", "    public boolean isStartBySleeping() {\n        return startBySleeping;\n    }\n", "    public void processPendingCommands() {\n        preprocessQueue();\n        sendPendingToServer();\n    }\n", "private ConfigurationProvider(){\n  throw new AssertionError();\n}\n", "    private void firePackActionFinished(PackRequestContext context, Action action) {\n    \t// global listeners\n    \tList<PackGenerationListener> packListeners = \n    \t\tgenerationListenerMgr.getPackGenerationListeners();    \t    \t\n    \tfor (PackGenerationListener listener : packListeners) {\n    \t\tlistener.packActionFinished(context, action);\n    \t}    \t    \t   \n    \t// request listeners\n    \tpackListeners = \n    \t\tcontext.getPackGenerationListeners();\n    \tif (packListeners != null) {\n\t    \tfor (PackGenerationListener listener : packListeners) {\n\t    \t\tlistener.packActionFinished(context, action);\n\t    \t}\n    \t}\n    }\n", "public void alignOutput(int align) throws IOException\r\n    {\r\n        int mod = position % align;\r\n        if (mod > 0)\r\n        {\r\n            skipOutput(align - mod);\r\n        }\r\n    }", "private void fixupInStatementExpressions(VoltXMLElement expr) throws HSQLParseException {\n        if (doesExpressionReallyMeanIn(expr)) {\n            inFixup(expr);\n            // can't return because in with subquery can be nested\n        }\n\n        // recursive hunt\n        for (VoltXMLElement child : expr.children) {\n            fixupInStatementExpressions(child);\n        }\n    }", "    public void startGroupDescriptor(AttributeList attributes)  throws BuildException {\n        startElement(\"group-descriptor\", attributes);\n    }\n", "public CHelpSavePane ( final IHelpInformation information ) { this ( STR_ , information ) ; }", "public void execute(String sql, Object[] bindArgs, int connectionFlags,\n            CancellationSignal cancellationSignal) {\n        if (sql == null) {\n            throw new IllegalArgumentException(\"sql must not be null.\");\n        }\n\n        if (executeSpecial(sql, bindArgs, connectionFlags, cancellationSignal)) {\n            return;\n        }\n\n        acquireConnection(sql, connectionFlags, cancellationSignal); // might throw\n        try {\n            mConnection.execute(sql, bindArgs, cancellationSignal); // might throw\n        } finally {\n            releaseConnection(); // might throw\n        }\n    }", "\t\tprivate boolean isUserAdministrator(BFUser user) {\n\t\t\tif (user.getId() == BFConstant.USER_ADMINISTRATOR) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n", "    public short getSearchRange() {\n        double pow = Math.floor(Math.log(getSegmentCount()) / Math.log(2));\n        double pow2 = Math.pow(2, pow);\n        \n        return (short) (2 * pow2);\n    }\n", "protected Color desaturate(Color color){\n  float[] tmp=Color.RGBtoHSB(color.getRed(),color.getGreen(),color.getBlue(),null);\n  tmp[1]/=3.0f;\n  tmp[2]=clamp(1.0f - (1.0f - tmp[2]) / 3f);\n  return new Color((Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF));\n}\n", "private void deleteIpLeaseDocuments(final State current,List<IpLeaseService.State> ipLeaseList){\n  if (ipLeaseList.size() == 0) {\n    ServiceUtils.logInfo(this,\"No Ip Lease documents found any more.\");\n    finishTask(current);\n    return;\n  }\n  for (  IpLeaseService.State ipLease : ipLeaseList) {\n    deleteIpLease(ipLease);\n  }\n  finishTask(current);\n}\n", "@Deprecated\n  public static boolean disableIfNotPublish(Set<String> runModes, ComponentContext componentContext, Logger log) {\n    return disableIfNoRunModeActive(runModes, new String[] {\n        PUBLISH\n    }, componentContext, log);\n  }", "public GregorianCalendar getExpiredDate(GregorianCalendar relativeDate) {\r\n        // Get today's date and adjust by the specified age.\r\n        GregorianCalendar expiredDate = (GregorianCalendar)relativeDate.clone();\r\n        switch (m_units) {\r\n        case DAYS:\r\n            expiredDate.add(Calendar.DAY_OF_MONTH, -m_value);\r\n            break;\r\n        case MONTHS:\r\n            expiredDate.add(Calendar.MONTH, -m_value);\r\n            break;\r\n        case YEARS:\r\n            expiredDate.add(Calendar.YEAR, -m_value);\r\n            break;\r\n        default:\r\n            // New value we forgot to add here?\r\n            throw new AssertionError(\"Unknown RetentionUnits: \" + m_units);\r\n        }\r\n        return expiredDate;\r\n    }", "public void init ( ) throws ServletException { }", "  public String toSentenceString(Sentence s) {\n    StringBuilder sb = new StringBuilder();\n    for (int wordNum = start(), end = end(); wordNum <= end; wordNum++) {\n      sb.append(s.get(wordNum));\n      if (wordNum != end) {\n        sb.append(\" \");\n      }\n    }\n    return sb.toString();\n  }\n", "public void finish() throws IOException {\n    writer.append(\"--\" + boundary + \"--\").append(LINE_BREAK);\n    writer.flush();\n    writer.close();\n    outputStream.flush();\n    outputStream.close();\n  }", "@Override public void writeSend(StubAmp actor,String methodName,Object[] args,InboxAmp inbox){\n  try (OutputStream os=openItem(inbox)){\n    try (OutH3 out=_serializer.out(os)){\n      String key=actor.journalKey();\n      out.writeLong(CODE_SEND);\n      out.writeString(key);\n      out.writeString(methodName);\n      out.writeLong(args.length);\n      for (      Object arg : args) {\n        out.writeObject(arg);\n      }\n    }\n   }\n catch (  IOException e) {\n    log.log(Level.FINER,e.toString(),e);\n  }\n}\n", "public TypeReference ( int typeRef ) { this . value = typeRef ; }", "public static Optional<SuggestedFix> addModifiers(\n      Tree tree, ModifiersTree originalModifiers, VisitorState state, Set<Modifier> modifiers) {\n    Set<Modifier> toAdd = Sets.difference(modifiers, originalModifiers.getFlags());\n    SuggestedFix.Builder fix = SuggestedFix.builder();\n    List<Modifier> modifiersToWrite = new ArrayList<>();\n    if (!originalModifiers.getFlags().isEmpty()) {\n      // a map from modifiers to modifier position (or -1 if the modifier is being added)\n      // modifiers are sorted in Google Java Style order\n      Map<Modifier, Integer> modifierPositions = new TreeMap<>();\n      for (Modifier mod : toAdd) {\n        modifierPositions.put(mod, -1);\n      }\n      List<ErrorProneToken> tokens = state.getTokensForNode(originalModifiers);\n      int base = ((JCTree) originalModifiers).getStartPosition();\n      for (ErrorProneToken tok : tokens) {\n        Modifier mod = getTokModifierKind(tok);\n        if (mod != null) {\n          modifierPositions.put(mod, base + tok.pos());\n        }\n      }\n      // walk the map of all modifiers, and accumulate a list of new modifiers to insert\n      // beside an existing modifier\n      for (Modifier mod : modifierPositions.keySet()) {\n        int p = modifierPositions.get(mod);\n        if (p == -1) {\n          modifiersToWrite.add(mod);\n        } else if (!modifiersToWrite.isEmpty()) {\n          fix.replace(p, p, Joiner.on(' ').join(modifiersToWrite) + \" \");\n          modifiersToWrite.clear();\n        }\n      }\n    } else {\n      modifiersToWrite.addAll(toAdd);\n    }\n    addRemainingModifiers(tree, state, originalModifiers, modifiersToWrite, fix);\n    return Optional.of(fix.build());\n  }", "public synchronized void rollback ( ) throws ReplicatorException { assertWritable ( ) ; }", "public List<Subscription> getSubscriptionsAsOwner() throws NoResponseException, XMPPErrorException,\n                    NotConnectedException, InterruptedException {\n        return getSubscriptionsAsOwner(null, null);\n    }", "@Pure\n\tpublic ReadOnlyUnitVectorProperty secondAxisProperty() {\n\t\tif (this.saxis == null) {\n\t\t\tthis.saxis = new ReadOnlyUnitVectorWrapper(this, MathFXAttributeNames.SECOND_AXIS, getGeomFactory());\n\t\t\tthis.saxis.bind(Bindings.createObjectBinding(() -> {\n\t\t\t\tfinal Vector2dfx firstAxis = firstAxisProperty().get();\n\t\t\t\treturn firstAxis.toOrthogonalVector();\n\t\t\t},\n\t\t\t\t\tfirstAxisProperty()));\n\t\t}\n\t\treturn this.saxis.getReadOnlyProperty();\n\t}", "public static boolean isImage(String mimeType){\n  if (mimeType != null) {\n    if (mimeType.startsWith(\"image/\"))     return true;\n else     return false;\n  }\n else   return false;\n}\n", "int match(CharsetDetector det, int [] commonChars) {\n        @SuppressWarnings(\"unused\")\n        int   singleByteCharCount = 0;  //TODO Do we really need this?\n        int   doubleByteCharCount = 0;\n        int   commonCharCount     = 0;\n        int   badCharCount        = 0;\n        int   totalCharCount      = 0;\n        int   confidence          = 0;\n        iteratedChar   iter       = new iteratedChar();\n\n        detectBlock: {\n            for (iter.reset(); nextChar(iter, det);) {\n                totalCharCount++;\n                if (iter.error) {\n                    badCharCount++;\n                } else {\n                    long cv = iter.charValue & 0xFFFFFFFFL;\n\n                    if (cv <= 0xff) {\n                        singleByteCharCount++;\n                    } else {\n                        doubleByteCharCount++;\n                        if (commonChars != null) {\n                            // NOTE: This assumes that there are no 4-byte common chars.\n                            if (Arrays.binarySearch(commonChars, (int) cv) >= 0) {\n                                commonCharCount++;\n                            }\n                        }\n                    }\n                }\n                if (badCharCount >= 2 && badCharCount*5 >= doubleByteCharCount) {\n                    // Bail out early if the byte data is not matching the encoding scheme.\n                    break detectBlock;\n                }\n            }\n\n            if (doubleByteCharCount <= 10 && badCharCount== 0) {\n                // Not many multi-byte chars.\n                if (doubleByteCharCount == 0 && totalCharCount < 10) {\n                    // There weren't any multibyte sequences, and there was a low density of non-ASCII single bytes.\n                    // We don't have enough data to have any confidence.\n                    // Statistical analysis of single byte non-ASCII charcters would probably help here.\n                    confidence = 0;\n                }\n                else {\n                    //   ASCII or ISO file?  It's probably not our encoding,\n                    //   but is not incompatible with our encoding, so don't give it a zero.\n                    confidence = 10;\n                }\n\n                break detectBlock;\n            }\n\n            //\n            //  No match if there are too many characters that don't fit the encoding scheme.\n            //    (should we have zero tolerance for these?)\n            //\n            if (doubleByteCharCount < 20*badCharCount) {\n                confidence = 0;\n                break detectBlock;\n            }\n\n            if (commonChars == null) {\n                // We have no statistics on frequently occuring characters.\n                //  Assess confidence purely on having a reasonable number of\n                //  multi-byte characters (the more the better\n                confidence = 30 + doubleByteCharCount - 20*badCharCount;\n                if (confidence > 100) {\n                    confidence = 100;\n                }\n            }else {\n                //\n                // Frequency of occurence statistics exist.\n                //\n                double maxVal = Math.log((float)doubleByteCharCount / 4);\n                double scaleFactor = 90.0 / maxVal;\n                confidence = (int)(Math.log(commonCharCount+1) * scaleFactor + 10);\n                confidence = Math.min(confidence, 100);\n            }\n        }   // end of detectBlock:\n\n        return confidence;\n    }", "public PartialLoadException ( final CPartialLoadException exception ) { super ( exception ) ; m_module = exception . getModule ( ) . getConfiguration ( ) . getName ( ) ; }", "boolean isComplete ( ) ;", "public void readableToIndexed(CharSequence val,BytesRef result){\n  final String internal=readableToIndexed(val.toString());\n  UnicodeUtil.UTF16toUTF8(internal,result);\n}\n", "public Decorators<Beans<T>> getOrCreateDecorators()\n   {\n      Node node = childNode.getOrCreate(\"decorators\");\n      Decorators<Beans<T>> decorators = new DecoratorsImpl<Beans<T>>(this, \"decorators\", childNode, node);\n      return decorators;\n   }", "    private void assertClosed() {\n        if (isOpen()) {\n            throw new IllegalStateException(\"Folder not closed\");\n        }\n    }\n", "public OperationFuture<Database, CreateDatabaseMetadata> createDatabase(\n      String databaseId, Iterable<String> statements) throws SpannerException {\n    return dbClient.createDatabase(instanceId(), databaseId, statements);\n  }", "public void resetEdges(Object[] cells){\n  if (cells != null) {\n    HashSet<Object> set=new HashSet<Object>(Arrays.asList(cells));\n    model.beginUpdate();\n    try {\n      for (int i=0; i < cells.length; i++) {\n        Object[] edges=mxGraphModel.getEdges(model,cells[i]);\n        if (edges != null) {\n          for (int j=0; j < edges.length; j++) {\n            Object source=view.getVisibleTerminal(edges[j],true);\n            Object target=view.getVisibleTerminal(edges[j],false);\n            if (!set.contains(source) || !set.contains(target)) {\n              resetEdge(edges[j]);\n            }\n          }\n        }\n        resetEdges(mxGraphModel.getChildren(model,cells[i]));\n      }\n    }\n  finally {\n      model.endUpdate();\n    }\n  }\n}\n", "public void logVelocityMessage(int level,String message){\n  if (message.equals(Introspector.CACHEDUMP_MSG)) {\n    sawCacheDump=true;\n  }\n}\n", "public Boolean ruleExists(String topicPath, String subscriptionName, String ruleName) throws ServiceBusException, InterruptedException {\n        return Utils.completeFuture(this.asyncClient.ruleExistsAsync(topicPath, subscriptionName, ruleName));\n    }", "  public String get_EClassName() {\n    return \"http://wizards#//Advanced\";\n  }\n", "public static double cdf(double val,double rate){\n  final double v=.5 * Math.exp(-rate * val);\n  return (val < 0.) ? v : 1 - v;\n}\n", "public com.squareup.okhttp.Call getUniverseRacesAsync(String acceptLanguage, String datasource, String ifNoneMatch,\n            String language, final ApiCallback<List<RacesResponse>> callback) throws ApiException {\n\n        com.squareup.okhttp.Call call = getUniverseRacesValidateBeforeCall(acceptLanguage, datasource, ifNoneMatch,\n                language, callback);\n        Type localVarReturnType = new TypeToken<List<RacesResponse>>() {\n        }.getType();\n        apiClient.executeAsync(call, localVarReturnType, callback);\n        return call;\n    }", "@POST\n  @Produces(value = \"text/plain\")\n  public String addNewID(String str)\n  {\n    Subject user = SecurityUtils.getSubject();\n    \n    String remoteIP = request.getRemoteAddr().replaceAll(\"[.:]\", \"_\");\n    user.checkPermission(\"shortener:create:\" + remoteIP);\n    \n    return shortenerDao.shorten(str, \"\" + user.getPrincipal()).toString();\n  }", "void onUpdate ( NotificationEntry entry ) ;", "public static byte [ ] toArray ( final List < Byte > list ) { final byte [ ] output = new byte [ list . size ( ) ] ; for ( int i = NUM_ ; i < output . length ; i ++ ) { output [ i ] = list . get ( i ) ; } return output ; }", "   private int loseCommentsEtc(Reader in) throws IOException {\n      int c = in.read();\n      if (c == '-') { //First dash, the comments can contain anything, including '>' chars.\n         c = in.read();\n         if (c == '-') {//second dash\n            c = in.read();\n            while (c != -1) {\n               c = in.read();\n               if(c == '-'){\n                  c = in.read();\n                  if(c == '-'){\n                     c = in.read();\n                     if(c == '>'){\n                        return c;\n                     }\n                  }\n               }\n            }\n         }\n      }\n      while (c != '>') {\n         c = in.read();\n      }\n      return c;\n   }\n", "public Form getLessonFinishedForm() {\n    if (lessonFinishedForm == null) {//GEN-END:|98-getter|0|98-preInit\n            // write pre-init user code here\n        lessonFinishedForm = new Form(\"Lesson Finished\", new Item[] { getPassedSI(), getFailedSI(), g", "private String getPathExtension(HttpServletRequest request) {\n\t\tString extension = UriUtils.extractFileExtension(request.getRequestURI());\t\t\n\t\treturn extension != null ? \".\" + extension : \"\";\n\t}", "private static boolean sourceEquals ( SemanticNode node , SymbolNode symbol ) { if ( node == symbol ) { return BOOL_ ; } if ( ( ( node instanceof OpDefNode ) && ( ( OpDefNode ) node ) . getSource ( ) == symbol ) ) { return BOOL_ ; } if ( ( node instanceof ThmOrAssumpDefNode ) && ( ( ThmOrAssumpDefNode ) node ) . getSource ( ) == symbol ) { return BOOL_ ; } return BOOL_ ; }", "\tpublic void runEditAction() {\n\t\trenameAction.run();\n\t}\n", "@Override\n  public final Method getFor(final Class<?> pClass, final String pFieldName) {\n    Method rz = null;\n    try {\n      rz = getUtlReflection().retrieveGetterForField(pClass, pFieldName);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    return rz;\n  }", "boolean skipObject() throws IOException {\n  int ch=read();\n  int len;\nswitch (ch) {\ncase 0x00:\ncase 0x01:\ncase 0x02:\ncase 0x03:\ncase 0x04:\ncase 0x05:\ncase 0x06:\ncase 0x07:\ncase 0x08:\ncase 0x09:\ncase 0x0a:\ncase 0x0b:\ncase 0x0c:\ncase 0x0d:\ncase 0x0e:\ncase 0x0f:\ncase 0x10:\ncase 0x11:\ncase 0x12:\ncase 0x13:\ncase 0x14:\ncase 0x15:\ncase 0x16:\ncase 0x17:\ncase 0x18:\ncase 0x19:\ncase 0x1a:\ncase 0x1b:\ncase 0x1c:\ncase 0x1d:\ncase 0x1e:\ncase 0x1f:\n    skip(ch - 0x00);\n  return true;\ncase 0x20:\ncase 0x21:\ncase 0x22:\ncase 0x23:\ncase 0x24:\ncase 0x25:\ncase 0x26:\ncase 0x27:\ncase 0x28:\ncase 0x29:\ncase 0x2a:\ncase 0x2b:\ncase 0x2c:\ncase 0x2d:\ncase 0x2e:\ncase 0x2f:\nskip(ch - 0x20);\nreturn true;\ncase 0x30:\ncase 0x31:\ncase 0x32:\ncase 0x33:\nlen=256 * (ch - 0x30) + read();\nskip(len);\nreturn true;\ncase 0x34:\ncase 0x35:\ncase 0x36:\ncase 0x37:\nlen=256 * (ch - 0x34) + read();\nskip(len);\nreturn true;\ncase 0x3c:\ncase 0x3d:\ncase 0x3e:\ncase 0x3f:\nskip(2);\nreturn true;\ncase 0x41:\nlen=readShort();\nskip(len);\nreturn skipObject();\ncase 0x42:\nlen=readShort();\nskip(len);\nreturn true;\ncase 0x43:\nscanObjectDef();\nreturn skipObject();\ncase 0x44:\nskip(8);\nreturn true;\ncase 0x45:\nthrow new IllegalStateException(\"Invalid Hessian bytecode 'E'\");\ncase 0x46:\nreturn true;\ncase 0x47:\nskipObject();\nskipObject();\nreturn true;\ncase 0x48:\n{\nskipMap();\nreturn true;\n}\ncase 0x49:\nskip(4);\nreturn true;\ncase 0x4a:\nskip(8);\nreturn true;\ncase 0x4b:\nskip(4);\nreturn true;\ncase 0x4c:\nskip(8);\nreturn true;\ncase 0x4d:\n{\nskipObject();\nskipMap();\nreturn true;\n}\ncase 0x4e:\nreturn true;\ncase 0x4f:\n{\nint type=scanInt();\nString[] def=_classDefs.get(type);\nlen=def.length - 1;\nfor (int i=0; i < len; i++) {\nskipObject();\n}\nreturn true;\n}\ncase 0x50:\nskipObject();\nskipObject();\nreturn true;\ncase 0x51:\nskipObject();\nreturn true;\ncase 0x52:\nlen=readShort();\nskip(len);\nreturn skipObject();\ncase 0x53:\nlen=readShort();\nskip(len);\nreturn true;\ncase 0x54:\nreturn true;\ncase 0x55:\nreadType();\nwhile (skipObject()) {\n}\nreturn true;\ncase 0x56:\nreadType();\nlen=scanInt();\nfor (int i=0; i < len; i++) {\nskipObject();\n}\nreturn true;\ncase 0x57:\nwhile (skipObject()) {\n}\nreturn true;\ncase 0x58:\nlen=scanInt();\nfor (int i=0; i < len; i++) {\nskipObject();\n}\nreturn true;\ncase 0x59:\nskip(4);\nreturn true;\ncase 0x5a:\nreturn false;\ncase 0x5b:\ncase 0x5c:\nreturn true;\ncase 0x5d:\nskip(1);\nreturn true;\ncase 0x5e:\nskip(2);\nreturn true;\ncase 0x5f:\nreturn skipObject();\ncase 0x60:\ncase 0x61:\ncase 0x62:\ncase 0x63:\ncase 0x64:\ncase 0x65:\ncase 0x66:\ncase 0x67:\ncase 0x68:\ncase 0x69:\ncase 0x6a:\ncase 0x6b:\ncase 0x6c:\ncase 0x6d:\ncase 0x6e:\ncase 0x6f:\n{\nint type=ch - 0x60;\nString[] def=_classDefs.get(type);\nlen=def.length - 1;\nfor (int i=0; i < len; i++) {\nskipObject();\n}\nreturn true;\n}\ncase 0x70:\ncase 0x71:\ncase 0x72:\ncase 0x73:\ncase 0x74:\ncase 0x75:\ncase 0x76:\ncase 0x77:\nskipObject();\nlen=ch - 0x70;\nfor (int i=0; i < len; i++) {\nskipObject();\n}\nreturn true;\ncase 0x78:\ncase 0x79:\ncase 0x7a:\ncase 0x7b:\ncase 0x7c:\ncase 0x7d:\ncase 0x7e:\ncase 0x7f:\nlen=ch - 0x78;\nfor (int i=0; i < len; i++) {\nskipObject();\n}\nreturn true;\ncase 0x80:\ncase 0x81:\ncase 0x82:\ncase 0x83:\ncase 0x84:\ncase 0x85:\ncase 0x86:\ncase 0x87:\ncase 0x88:\ncase 0x89:\ncase 0x8a:\ncase 0x8b:\ncase 0x8c:\ncase 0x8d:\ncase 0x8e:\ncase 0x8f:\ncase 0x90:\ncase 0x91:\ncase 0x92:\ncase 0x93:\ncase 0x94:\ncase 0x95:\ncase 0x96:\ncase 0x97:\ncase 0x98:\ncase 0x99:\ncase 0x9a:\ncase 0x9b:\ncase 0x9c:\ncase 0x9d:\ncase 0x9e:\ncase 0x9f:\ncase 0xa0:\ncase 0xa1:\ncase 0xa2:\ncase 0xa3:\ncase 0xa4:\ncase 0xa5:\ncase 0xa6:\ncase 0xa7:\ncase 0xa8:\ncase 0xa9:\ncase 0xaa:\ncase 0xab:\ncase 0xac:\ncase 0xad:\ncase 0xae:\ncase 0xaf:\ncase 0xb0:\ncase 0xb1:\ncase 0xb2:\ncase 0xb3:\ncase 0xb4:\ncase 0xb5:\ncase 0xb6:\ncase 0xb7:\ncase 0xb8:\ncase 0xb9:\ncase 0xba:\ncase 0xbb:\ncase 0xbc:\ncase 0xbd:\ncase 0xbe:\ncase 0xbf:\nreturn true;\ncase 0xc0:\ncase 0xc1:\ncase 0xc2:\ncase 0xc3:\ncase 0xc4:\ncase 0xc5:\ncase 0xc6:\ncase 0xc7:\ncase 0xc8:\ncase 0xc9:\ncase 0xca:\ncase 0xcb:\ncase 0xcc:\ncase 0xcd:\ncase 0xce:\ncase 0xcf:\nskip(1);\nreturn true;\ncase 0xd0:\ncase 0xd1:\ncase 0xd2:\ncase 0xd3:\ncase 0xd4:\ncase 0xd5:\ncase 0xd6:\ncase 0xd7:\nskip(2);\nreturn true;\ncase 0xd8:\ncase 0xd9:\ncase 0xda:\ncase 0xdb:\ncase 0xdc:\ncase 0xdd:\ncase 0xde:\ncase 0xdf:\ncase 0xe0:\ncase 0xe1:\ncase 0xe2:\ncase 0xe3:\ncase 0xe4:\ncase 0xe5:\ncase 0xe6:\ncase 0xe7:\ncase 0xe8:\ncase 0xe9:\ncase 0xea:\ncase 0xeb:\ncase 0xec:\ncase 0xed:\ncase 0xee:\ncase 0xef:\nreturn true;\ncase 0xf0:\ncase 0xf1:\ncase 0xf2:\ncase 0xf3:\ncase 0xf4:\ncase 0xf5:\ncase 0xf6:\ncase 0xf7:\ncase 0xf8:\ncase 0xf9:\ncase 0xfa:\ncase 0xfb:\ncase 0xfc:\ncase 0xfd:\ncase 0xfe:\ncase 0xff:\nskip(1);\nreturn true;\ndefault :\nthrow new UnsupportedOperationException(\"0x\" + Integer.toHexString(ch));\n}\n}\n", "@Override public void addScannedResult(List<ListBasedResultWrapper> listBasedResult){\n  this.currentRowPointer=listBasedResult;\n  totalNumberOfRecords=listBasedResult.size();\n  allRowsResult.add(listBasedResult);\n}\n", "\tpublic void prtTree() {\n\t  Root forPrt = root;\n\t  prtTree( forPrt );\n\t}\n", "public Vector<MBROLAPhoneme> convertSampa(MBROLAPhoneme maryPhoneme){\n  Vector<MBROLAPhoneme> phones=new Vector<MBROLAPhoneme>();\n  String marySampa=maryPhoneme.getSymbol();\n  if (sampa2voiceMap != null && sampa2voiceMap.containsKey(marySampa)) {\n    String newSampa=sampa2voiceMap.get(marySampa);\n    Vector<String> newSampas=new Vector<String>();\n    StringTokenizer st=new StringTokenizer(newSampa);\n    while (st.hasMoreTokens()) {\n      newSampas.add(st.nextToken());\n    }\n    int n=newSampas.size();\n    int totalDur=maryPhoneme.getDuration();\n    Vector<int[]> allTargets=maryPhoneme.getTargets();\n    for (int i=0; i < newSampas.size(); i++) {\n      String sampa=newSampas.get(i);\n      int dur=totalDur / n;\n      Vector<int[]> newTargets=null;\n      int maxP=100 * (i + 1) / n;\n      boolean ok=true;\n      while (allTargets != null && allTargets.size() > 0 && ok) {\n        int[] oldTarget=allTargets.get(0);\n        if (oldTarget[0] <= maxP) {\n          int[] newTarget=new int[2];\n          newTarget[0]=oldTarget[0] * n;\n          newTarget[1]=oldTarget[1];\n          if (newTargets == null)           newTargets=new Vector<int[]>();\n          newTargets.add(newTarget);\n          allTargets.remove(0);\n        }\n else {\n          ok=false;\n        }\n      }\n      MBROLAPhoneme mp=new MBROLAPhoneme(sampa,dur,newTargets,maryPhoneme.getVoiceQuality());\n      phones.add(mp);\n    }\n  }\n else {\n    phones.add(maryPhoneme);\n  }\n  return phones;\n}\n", "public void addListener ( final IModuleListener listener ) { m_listeners . addListener ( listener ) ; }", "public void recenterToAddressLocation ( ) { setCenter ( getTileFactory ( ) . geoToPixel ( getAddressLocation ( ) , getZoom ( ) ) ) ; repaint ( ) ; }", "static boolean isTextXml ( String mime ) { return mime != null && ( mime . equals ( STR_ ) || mime . equals ( STR_ ) || mime . startsWith ( STR_ ) && mime . endsWith ( STR_ ) ) ; }", "protected void putSetMethodValueByField(DataSupport dataSupport,Field field,Object parameter) throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n  if (shouldGetOrSet(dataSupport,field)) {\n    String setMethodName=makeSetterMethodName(field);\n    DynamicExecutor.send(dataSupport,setMethodName,new Object[]{parameter},dataSupport.getClass(),new Class[]{field.getType()});\n  }\n}\n", "  public void setQuotations(StringArray v) {\n    if (Region_Type.featOkTst && ((Region_Type) jcasType).casFeat_quotations == null)\n      jcasType.jcas.throwFeatMissing(\"quotations\", \"org.apache.uima.alchemy.ts.entity.Region\");\n    jcasType.ll_cas.ll_setRefValue(addr, ((Region_Type) jcasType).casFeatCode_quotations,\n            jcasType.ll_cas.ll_getFSRef(v));\n  }\n", "public void expandToQueue( PriorityQueue priQ, double minDistance ) {\n        boolean isComp1 = isComposite(boundable1);\n        boolean isComp2 = isComposite(boundable2);\n\n        /**\n         * HEURISTIC: If both boundable are composite,\n         * choose the one with largest area to expand.\n         * Otherwise, simply expand whichever is composite.\n         */\n        if (isComp1 && isComp2) {\n            if (area(boundable1) > area(boundable2)) {\n                expand(boundable1, boundable2, priQ, minDistance);\n                return;\n            } else {\n                expand(boundable2, boundable1, priQ, minDistance);\n                return;\n            }\n        } else if (isComp1) {\n            expand(boundable1, boundable2, priQ, minDistance);\n            return;\n        } else if (isComp2) {\n            expand(boundable2, boundable1, priQ, minDistance);\n            return;\n        }\n\n        throw new IllegalArgumentException(\"neither boundable is composite\");\n    }", "@BetaApi\n  public final ListTargetHttpsProxiesPagedResponse listTargetHttpsProxies(ProjectName project) {\n    ListTargetHttpsProxiesHttpRequest request =\n        ListTargetHttpsProxiesHttpRequest.newBuilder()\n            .setProject(project == null ? null : project.toString())\n            .build();\n    return listTargetHttpsProxies(request);\n  }", "\tpublic void setRotXYinDegrees(double a, double b){\n\t\t\n\t\t//Application.debug(\"setRotXY: \"+a+\",\"+b);\n\t\t\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\t\n\t\tif (this.b>EuclidianController3D.ANGLE_MAX)\n\t\t\tthis.b=EuclidianController3D.ANGLE_MAX;\n\t\telse if (this.b<-EuclidianController3D.ANGLE_MAX)\n\t\t\tthis.b=-EuclidianController3D.ANGLE_MAX;\n\t\t\n\t\t\n\n\t\tupdateMatrix();\n\n\t\tsetViewChangedByRotate();\n\t\tsetWaitForUpdate();\n\t}\n", "protected static FlushableDataOutput writeHeader(final ManagementProtocolHeader header, final OutputStream os) throws IOException {\n        final FlushableDataOutput output = FlushableDataOutputImpl.create(os);\n        header.write(output);\n        return output;\n    }", "    public Object getRequestTag() {\n\tObject tag = null;\n\tif (panel != null)\n\t    tag = panel.getRequestTag();\n\treturn tag;\n    }\n", "public Expression isEmpty ( Value target ) { throw new RuntimeException ( STR_ ) ; }", "private double logLikelihood(double[][] trainYs,double[][] probs){\n  double logLikelihood=0;\n  for (int i=0; i < trainYs.length; i++) {\n    for (int j=0; j < m_NumClasses; j++) {\n      if (trainYs[i][j] == 1.0 - m_Offset) {\n        logLikelihood-=Math.log(probs[i][j]);\n      }\n    }\n  }\n  return logLikelihood / (double)trainYs.length;\n}\n", "private boolean isJUnit3TestSuite ( Class scriptClass ) { boolean isUnitTestSuite = BOOL_ ; try { try { Class testSuiteClass = this . loader . loadClass ( STR_ ) ; if ( testSuiteClass . isAssignableFrom ( scriptClass ) ) { isUnitTestSuite = BOOL_ ; } } catch ( ClassNotFoundException e ) { } } catch ( Throwable e ) { } return isUnitTestSuite ; }", "private void reset(){\n  mPixels=new byte[mDFTSize * mImageHeight];\n  mMemoryImageSource=new MemoryImageSource(mDFTSize,mImageHeight,mColorModel,mPixels,0,mDFTSize);\n  mMemoryImageSource.setAnimated(true);\n  mWaterfallImage=createImage(mMemoryImageSource);\n  repaint();\n}\n", "public void addAll(StreamEquivalenceClass other){\n  memberSet.addAll(other.memberSet);\n}\n", "public void applyConfiguration ( final ConfigSettings config ) { clear ( ) ; Iterator < ArchiveDescription > aIt = config . archiveIterator ( ) ; while ( aIt . hasNext ( ) ) { addArchive ( aIt . next ( ) ) ; } }", "private CCOWStatus getCCOWStatus() {\n        if (ccowContextManager == null) {\n            return ccowEnabled ? CCOWStatus.NONE : CCOWStatus.DISABLED;\n        } else if (ccowTransaction) {\n            return CCOWStatus.CHANGING;\n        } else {\n            switch (ccowContextManager.getState()) {\n                case csParticipating:\n                    return CCOWStatus.JOINED;\n                case csSuspended:\n                    return CCOWStatus.BROKEN;\n                default:\n                    return CCOWStatus.NONE;\n            }\n        }\n    }", "protected void createLogoutConfirmationView(final Flow flow) {\n        val view = createViewState(flow, CasWebflowConstants.STATE_ID_CONFIRM_LOGOUT_VIEW, \"casConfirmLogoutView\");\n        createTransitionForState(view, CasWebflowConstants.TRANSITION_ID_SUCCESS, CasWebflowConstants.STATE_ID_TERMINATE_SESSION);\n    }", "private static void copyFiles(Manifest manifest,JarFile in,JarArchiveOutputStream out,long timestamp) throws IOException {\n  final byte[] buffer=new byte[4096];\n  int num;\n  final Map<String,Attributes> entries=manifest.getEntries();\n  final List<String> names=new ArrayList<>(entries.keySet());\n  Collections.sort(names);\n  for (  final String name : names) {\n    final JarEntry inEntry=in.getJarEntry(name);\n    if (inEntry.getMethod() == JarArchiveEntry.STORED) {\n      out.putArchiveEntry(new JarArchiveEntry(inEntry));\n    }\n else {\n      final JarArchiveEntry je=new JarArchiveEntry(name);\n      je.setTime(timestamp);\n      out.putArchiveEntry(je);\n    }\n    final InputStream data=in.getInputStream(inEntry);\n    while ((num=data.read(buffer)) > 0) {\n      out.write(buffer,0,num);\n    }\n    out.flush();\n    out.closeArchiveEntry();\n  }\n}\n", "public static PhotoPickerHelper createPhotoPickerHelper ( Activity activity ) { return new PhotoPickerHelper ( activity ) ; }", "private int checkIndexObjects() throws ConnectionException {\n  CheckType checkType=CheckType.INDEX_OBJECTS;\n  helper.logMessage(\"\\nStart to check INDEX data that the related object records are missing.\\n\",false,toConsole);\n  DbConsistencyStatus status=get", "void onResultCallback ( List < PhotoDirectory < T > > directories ) ;", "static String basePluginKey(PluginInfo plugin, Map<String, PluginInfo> allPluginsPerKey) {\n    String base = plugin.getKey();\n    String parentKey = plugin.getBasePlugin();\n    while (!Strings.isNullOrEmpty(parentKey)) {\n      PluginInfo parentPlugin = allPluginsPerKey.get(parentKey);\n      base = parentPlugin.getKey();\n      parentKey = parentPlugin.getBasePlugin();\n    }\n    return base;\n  }", "public void removeFriend(User self, String friend) {\n\t\tUser fr = loadByUsername(friend);\n\t\tString query = \"DELETE FROM FriendsOf \" +\n\t\t\t\t\"WHERE frdUser1 = \" + self.getId() +\n\t\t\t\t\" AND frdUser2 = \" + fr.getId() + \";\" ;\n\t\tsql.executeQuery(query);\n\t\tquery =", "    public void setConvention(String value) throws RuntimeException {\n        StringSTAttribute att = null;\n        if (_att_convention == null) {\n            _att_convention = (StringSTAttribute) attributeFactory.getAttribute(\"convention\", \"peak\");\n            if (_att_convention == null) {\n                throw new RuntimeException(\"BUG: cannot process attributeGroupName : convention probably incompatible attributeGroupName and attributeName\");\n            }\n        }\n        att = new StringSTAttribute(_att_convention);\n        super.addRemove(att, value);\n    }\n", "    public boolean isFontSet() {\n        return getSetFlag(FONT);\n    }\n", "\tpublic String getCellTypeToViewText() {\n\t\tif (hasObject()) {\n\t\t\treturn cell.getType().toString();\n\t\t}\n\t\treturn ECCellDataCommon.FILL_NULL_TEXT;\n\t}\n", "public mxPoint(mxPoint point){\n  this(point.getX(),point.getY());\n}\n", "\tpublic int addAllToParticipants (Collection pParticipantsList) {\n\t\tif (pParticipantsList == null) {\n\t\t\tthrow new RuntimeException(\"Attempted to add null container to WFMetaObject#Participants!\");\n\t\t}\n\t\tint lInserted=0;\n\t\tfor(Iterator it = pParticipantsList.iterator(); it.hasNext(); ) {\n\t\t\ttry {\n\t\t\t\tWFResource lParticipants = (WFResource)it.next();\t\t\t\t\n\t\t\t\taddParticipants( lParticipants );\n\t\t\t\t++lInserted;\n\t\t\t} catch(Throwable t) {\t\t\t\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\treturn lInserted;\n\t}\n", "    public String getTimestampCreated() {\n        String strTimestamp = getAttribute(ATTR_TIMESTAMP_CREATED);\n        if (strTimestamp != null) {\n            return (strTimestamp);\n        }\n        else {\n            touchTimestampCreated();\n            return (getAttribute(ATTR_TIMESTAMP_CREATED));\n        }\n    } // of method\n", "public static TimeBasedKeys create( int bitsUsedInCounter ) {\n        CheckArg.isPositive(bitsUsedInCounter, \"bitsUsedInCounter\");\n        int maxAvailableBitsToShift = Long.numberOfLeadingZeros(System.currentTimeMillis());\n        CheckArg.isLessThan(bitsUsedInCounter, maxAvailableBitsToShift, \"bitsUsedInCounter\");\n        return new TimeBasedKeys((short)bitsUsedInCounter);\n    }", "public void visitAttribute ( final Attribute attr ) { buf . setLength ( NUM_ ) ; buf . append ( tab ) . append ( STR_ ) ; appendDescriptor ( - NUM_ , attr . type ) ; if ( attr instanceof Textifiable ) { ( ( Textifiable ) attr ) . textify ( buf , null ) ; ", "public ContextualReference<T> create(CreationalContext<T> ctx) {\n        if (this.instance != null) {\n            throw new IllegalStateException(\"Trying to call create() on already constructed instance\");\n        }\n        if (disposed) {\n            throw new IllegalStateException(\"Trying to call create() on an already disposed instance\");\n        }\n        this.instance = bean.create(ctx);\n        return this;\n    }", "private synchronized void pauseTrackDataHub(){\n  trackDataHub.unregisterTrackDataListener(this);\n  trackDataHub=null;\n}\n", "public void openDriver ( SurfaceHolder holder ) throws IOException { if ( camera == null ) { camera = Camera . open ( ) ; if ( camera == null ) { throw new IOException ( ) ; } camera . setPreviewDisplay ( holder ) ; if ( ! initialized ) { initialized = BOOL_ ; configManager . initFromCameraParameters ( camera ) ; } configManager . setDesiredCameraParameters ( camera ) ; FlashlightManager . enableFlashlight ( ) ; } }", "\tpublic Object getPrevItem(){\n\t\tif(index==0){\n\t\t\treturn null;\n\t\t}\n\t\tindex--;\n\t\treturn items.get(index);\n\t}\n", "Part ( String contents , String property ) throws Exception { this . contents = STR_ + contents ; this . property = property ; simplify ( ) ; }", "\tpublic void updateOriginalLength() {\n\n\t\tif (_code == null) {\n\t\t\tthrow new IllegalStateException(\"Code segment unset or removed from memory.\");\n\t\t}\n\n\t\tStringTokenizer st = new StringTokenizer(_code, \"\\n\\r\\f\");\n\t\t_originalLength = st.countTokens();\n\t\tif (_code.startsWith(\"\\n\"))\n\t\t\t_originalLength++;\n\t}\n", "\tprotected int getFHTargetAnchorLoc(){\n\t\treturn isHorizontalLayout() ? CenteredConnectionAnchor.LEFT\n\t\t\t\t: CenteredConnectionAnchor.TOP;\n\t}\n", "private PostfixCalculator convertToPostfix() {\r\n        if (postfix == null || postfix.size() == 0 || isInfixChanged) {\r\n            postfixCalculator.toPostfix(infix);\r\n            postfix = postfixCalculator.getPostfix();\r\n            isInfixChanged = false;\r\n        }\r\n\r\n        return postfixCalculator;\r\n    }", "private static String contentsOfFile(WeakReference<Context> weakContext,String filename){\n  Context context=null;\n  if (weakContext != null) {\n    context=weakContext.get();\n    if (context != null) {\n      StringBuilder contents=new StringBuilder();\n      BufferedReader reader=null;\n      try {\n        File file=new File(filename);\n        reader=new BufferedReader(new FileReader(file));\n        String line=null;\n        while ((line=reader.readLine()) != null) {\n          contents.append(line);\n          contents.append(System.getProperty(\"line.separator\"));\n        }\n      }\n catch (      FileNotFoundException e) {\n      }\ncatch (      IOException e) {\n        e.printStackTrace();\n      }\n finally {\n        IOUtils.closeQuietly(reader);\n      }\n      return contents.toString();\n    }\n  }\n  return null;\n}\n", "public static Method findMethod(Object instance,String name,Class<?>... parameterTypes) throws NoSuchMethodException {\n  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {\n    try {\n      Method method=clazz.getDeclaredMethod(name,parameterTypes);\n      if (!method.isAccessible()) {\n        method.setAccessible(true);\n      }\n      return method;\n    }\n catch (    NoSuchMethodException e) {\n    }\n  }\n  throw new NoSuchMethodException(\"Method \" + name + \" with parameters \"+ Arrays.asList(parameterTypes)+ \" not found in \"+ instance.getClass());\n}\n", "  protected String getDateString() {\n    Calendar cal = new GregorianCalendar();\n    StringBuffer buf = new StringBuffer();\n\n    int month = cal.get(Calendar.MONTH) + 1;\n    if(month < 10) {\n      buf.append(\"0\");\n    }\n    buf.append(\"\" + month);\n    buf.append(\"-\" + cal.get(Calendar.DAY_OF_MONTH));\n    buf.append(\"-\" + cal.get(Calendar.YEAR) );\n    return buf.toString();\n  }\n", "\tprivate Component getPathNameComponent(DataWrapper type) {\n\t\tswitch(type.getId()) {\n\t\t\tcase TYPE_JAVA_LIBRARY: return new JLabel(bundle.getString(\"ExternalModuleEditor.fullPathToJavaLibrary\"));\n\t\t\tcase TYPE_PROGRAM: default: return new JLabel(bundle.getString(\"ExternalModuleEditor.fullPathToProgram\"));\n\t\t}\n\t}\n", "@Override\n    public int[] withBatch(int batchSize, Closure closure) throws SQLException {\n        batchData = new ArrayList<Object>();\n        withinDataSetBatch = true;\n        closure.call(this);\n        withinDataSetBatch = false;\n        if (batchData.isEmpty()) {\n            return EMPTY_INT_ARRAY;\n        }\n        Closure transformedClosure = new Closure(null) {\n            public void doCall(BatchingPreparedStatementWrapper stmt) throws SQLException {\n                for (Object next : batchData) {\n                    stmt.addBatch(new Object[]{next});\n                }\n            }\n        };\n        return super.withBatch(batchSize, buildMapQuery(), transformedClosure);\n    }", "protected final ResultSet execute ( ) throws SQLException { connection = createConnection ( ) ; setInternalConnection ( connection ) ; statement = null ; try { ResultSet result = runQuery ( connection ) ; assert ( null != statement ) ; return result ; } c", "    public void assertSetDocumentLocatorInvoked(Locator locator) {\n        Assert.assertTrue(\"setDocumentLocator() was not invoked\",\n                          wasSetDocumentLocatorInvoked);\n\n        Assert.assertTrue(\"Unexpected Locator passed to \" +\n                          \"setDocumentLocator(Locator)\",\n                          this.locator == locator);\n    }\n", "protected final void sendAddLoaderEvent(){\n  if (_hasNewLoader && _isScanning.compareAndSet(false,true)) {\n    try {\n      while (_hasNewLoader) {\n        _hasNewLoader=false;\n        scan();\n        configureEnhancerEvent();\n        configurePostEnhancerEvent();\n      }\n    }\n  finally {\n      _isScanning.set(false);\n    }\n  }\n}\n", "public EventStoreBuilder tcpNoDelayDisabled ( ) { tcpSettingsBuilder . tcpNoDelay ( BOOL_ ) ; return this ; }", "    protected String readString(DataInput in) throws IOException {\n            if (in.readBoolean())\n                return (in.readUTF());\n            return null;        \n    }\n", "\tpublic String getAllCityList(){\n\t\t\n\t\tdistrictList=this.swdDistrictService.getAllCityList();\n\t\t\n\t\tlog.debug(\"end getAllCityList .... list is :\"+districtList);\n\t\treturn \"addressIndex\";\n\t}\n", "void addedModule ( Database database , Module module ) ;", "public static void sortMethods(MethodBinding[] sortedMethods,int left,int right){\n  Arrays.sort(sortedMethods,left,right,METHOD_COMPARATOR);\n}\n", "    public boolean cashInTreasureTrain(Unit unit) {\n        return askHandling(new CashInTreasureTrainMessage(unit),\n            null, null);\n    }\n", "public static int nextClearBit(long v,int start){\n  if (start >= Long.SIZE) {\n    return -1;\n  }\n  long cur=~v & (LONG_ALL_BITS << start);\n  if (cur == 0) {\n    return -1;\n  }\n  return Long.numberOfTrailingZeros(cur);\n}\n", "public Date getFirstDateValue(String name) {\n        Object objs[] = getValues(name);\n        for (Object obj : objs) {\n            if (obj instanceof Date) {\n                return (Date) obj;\n            }\n        }\n        return null;\n    }", "@Override public TreeNode nextElement(){\n  return iterator.next();\n}\n", "public void loadAllGlyphs(){\n  List list=fontDef.getGlyphList();\n  for (Iterator it=list.iterator(); it.hasNext(); ) {\n    FontDefinition.Glyph g=(FontDefinition.Glyph)it.next();\n    addGlyph(g);\n  }\n}\n", "private void resetAllTokens ( ) { getDeltaInfo ( ) . edit ( ) . clear ( ) . commit ( ) ; Toast . makeText ( getActivity ( ) , getString ( R . string . cleared_saved_delta_tokens ) , Toast . LENGTH_LONG ) . show ( ) ; refresh ( ) ; }", "        private boolean isInListAlready(OID Id, List list) {\n            for (int i = 0; i < list.size(); i++) {\n                OID temp = ((Feature)(list.get(i))).getOid();\n                if (temp.equals(Id)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n", "protected void assertBackToState ( int stateNum ) { assertTrue ( recorder . recorded ( EC . TLC_BACK_TO_STATE ) ) ; List < Object > loop = recorder . getRecords ( EC . TLC_BACK_TO_STATE ) ; assertTrue ( loop . size ( ) > NUM_ ) ; Object [ ] object = ( Object [ ] ) loop . get ( NUM_ ) ; assertEquals ( Integer . toString ( stateNum ) , object [ NUM_ ] ) ; }", "\tpublic SingleKey generateKey(int length, String keyname) {\n\t\tBlock keyblock = new Block(length);\n\n\t\tfor (int i = 0; i <= length - 1; i++) {\n\t\t\tdouble random = Math.random();\n\n\t\t\tif (random < 0.5) {\n\t\t\t\tkeyblock = keyblock.setBit(i, new Bit(true));\n\t\t\t} else {\n\t\t\t\tkeyblock = keyblock.setBit(i, new Bit(false));\n\t\t\t}\n\t\t}\n\n\t\tSingleKey newkey = new SingleKey(keyblock, keyname);\n\t\treturn newkey;\n\t}\n", "public static boolean isAtLeastJava15 ( ) { return getMajorJavaVersion ( ) >= JAVA_15 ; }", "@Nonnull\n  private EHTMLElementType _checkHTML ()\n  {\n    final ICommonsList <String> aTags = new CommonsLinkedList<> ();\n    final StringBuilder aSB = new StringBuilder ();\n    int nPos = m_nLeading;\n    if (m_sValue.charAt (m_nLeading + 1) == '!')\n    {\n      if (_readXMLComment (this, m_nLeading) > 0)\n        return EHTMLElementType.COMMENT;\n    }\n    nPos = MarkdownHelper.readXMLElement (aSB, m_sValue, m_nLeading, false);\n    if (nPos > -1)\n    {\n      String sElement = aSB.toString ();\n      String sTag = MarkdownHelper.getXMLTag (sElement);\n      if (!MarkdownHTML.isHtmlBlockElement (sTag))\n        return EHTMLElementType.NONE;\n      if (EHTMLElement.getFromTagNameOrNull (sTag).mayBeSelfClosed ())\n      {\n        m_aXmlEndLine = this;\n        return EHTMLElementType.TAG;\n      }\n      aTags.add (sTag);\n      Line aLine = this;\n      while (aLine != null)\n      {\n        while (nPos < aLine.m_sValue.length () && aLine.m_sValue.charAt (nPos) != '<')\n          nPos++;\n\n        if (nPos >= aLine.m_sValue.length ())\n        {\n          aLine = aLine.m_aNext;\n          nPos = 0;\n        }\n        else\n        {\n          aSB.setLength (0);\n          final int nNewPos = MarkdownHelper.readXMLElement (aSB, aLine.m_sValue, nPos, false);\n          if (nNewPos > 0)\n          {\n            sElement = aSB.toString ();\n            sTag = MarkdownHelper.getXMLTag (sElement);\n            if (MarkdownHTML.isHtmlBlockElement (sTag) && !EHTMLElement.getFromTagNameOrNull (sTag).mayBeSelfClosed ())\n            {\n              if (sElement.charAt (1) == '/')\n              {\n                if (!aTags.getLast ().equals (sTag))\n                  return EHTMLElementType.NONE;\n                aTags.removeLast ();\n              }\n              else\n              {\n                aTags.add (sTag);\n              }\n            }\n            if (aTags.isEmpty ())\n            {\n              m_aXmlEndLine = aLine;\n              break;\n            }\n            nPos = nNewPos;\n          }\n          else\n          {\n            nPos++;\n          }\n        }\n      }\n      if (aTags.isEmpty ())\n        return EHTMLElementType.TAG;\n    }\n    return EHTMLElementType.NONE;\n  }", "public static boolean isWddx(Object o){\n  if (!(o instanceof String))   return false;\n  String str=o.toString();\n  if (!(str.indexOf(\"wddxPacket\") > 0))   return false;\n  WDDXConverter converter=new WDDXConverter(TimeZone.getDefault(),false,true);\n  try {\n    converter.deserialize(Caster.toString(o),true);\n  }\n catch (  Exception e) {\n    return false;\n  }\n  return true;\n}\n", "@Override public Instance generateExample() throws Exception {\n  Instance result;\n  Random rand;\n  double x;\n  double y;\n  double[] atts;\n  Instance inst;\n  result=null;\n  rand=getRandom();\n  if (m_DatasetFormat == null) {\n    throw new Exception(\"Dataset format not defined.\");\n  }\n  x=rand.nextDouble();\n  x=x * (getMaxRange() - getMinRange()) + getMinRange();\n  atts=new double[1];\n  atts[0]=x;\n  inst=new DenseInstance(1.0,atts);\n  m_Filter.input(inst);\n  m_Filter.batchFinished();\n  inst=m_Filter.output();\n  y=inst.value(1) + getAmplitude() * m_NoiseRandom.nextGaussian() * getNoiseRate()* getNoiseVariance();\n  atts=new double[m_DatasetFormat.numAttributes()];\n  atts[0]=x;\n  atts[1]=y;\n  result=new DenseInstance(1.0,atts);\n  result.setDataset(m_DatasetFormat);\n  return result;\n}\n", "public MediaFormat ( ) { mMap = new HashMap < String , Object > ( ) ; }", "\tpublic String getTextFor(String location) {\n\t\tthis.setLocation(location);\n\t\tthis.queryArrayList();\n\t\treturn this.text;\n\t}\n", "private static Object [ ] removeRealReceiver ( Object [ ] args ) { Object [ ] ar = new Object [ args . length - NUM_ ] ; System . arraycopy ( args , NUM_ , ar , NUM_ , args . length - NUM_ ) ; return ar ; }", "protected void removeConnection(FTPConnection con) throws IOException {\n        synchronized(listeners) {\n            for(IFTPListener l : listeners) {\n                l.onDisconnected(con);\n            }\n        }\n        synchronized(connections) {\n            connections.remove(con);\n        }\n    }", "@Override\n  public void validate()\n    throws ConfigException\n  {\n    for (int i = 0; i < _jarList.size(); i++) {\n      _jarList.get(i).validate();\n    }\n  }", "public void removeAllDependencies() {\n        registryLock.writeLock().lock();\n        try {\n            dependingRegistryMapLock.writeLock().lock();\n            try {\n                List<Registry> dependingRegistryList = new ArrayList<>(dependingRegistryMap.keySet());\n                Collections.reverse(dependingRegistryList);\n                dependingRegistryList.stream().forEach((registry) -> {\n                    dependingRegistryMap.remove(registry).shutdown();\n                });\n            } finally {\n                dependingRegistryMapLock.writeLock().unlock();\n            }\n        } finally {\n            registryLock.writeLock().unlock();\n        }\n    }", "public synchronized void initializeLocalInstructionComment ( final INaviCodeNode node , final INaviInstruction instruction , final List < IComment > comments ) { Preconditions . checkNotNull ( instruction , STR_ ) ; initializeComment ( new InstructionComm", "private void insertEditEmpty() throws CmsException, JspException {\n\n        Tag ancestor = findAncestorWithClass(this, I_CmsXmlContentContainer.class);\n        I_CmsXmlContentContainer container = null;\n        if (ancestor != null) {\n            // parent content container available, use preloaded values from this container\n            container = (I_CmsXmlContentContainer)ancestor;\n            insertEditEmpty(pageContext, container, m_mode == null ? CmsDirectEditMode.AUTO : m_mode, null);\n        }\n    }", "\tpublic void clear() {\n\t\tint oldNumRows = numRows;\n\t\t\n\t\tnumRows = START_NUM_ROWS;\n\t\tdata.removeAllElements();\n\t\tnextEmptyRow = 0;\n\t\t\n\t\tif(oldNumRows > START_NUM_ROWS) {\n\t\t\tfireTableRowsUpdated(START_NUM_ROWS, oldNumRows - 1);\n\t\t}\n\t\tfireTableRowsUpdated(0, START_NUM_ROWS - 1);\n\t}\n", "\tprotected void switchToState(String state) {\n\t\tsynchronized(currentState){\n\t\t\tArtifactState st = stateMap.get(state);\n\t\t\tif (st!=null){\n\t\t\t\tcurrentState = st;\n\t\t\t\t/*\n\t\t\t\tif (observed){\n\t\t\t\t\tEvent evStateChanged = new StateEvent(id,st.getName(),currentState.getName());\n\t\t\t\t\tenv.genEvent(id,evStateChanged);\n\t\t\t\t}*/\n\t\t\t\tICartagoLoggerManager log = env.getLoggerManager();\n\t\t\t\tif (log.isLogging()){\n\t\t\t\t\tlog.logArtifactStateChanged(System.currentTimeMillis(),id,state);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new IllegalArgumentException(\"state\");\n\t\t\t}\n\t\t}\n\t}\n", "@Override\n  public Task<FcmSendMessageResult> sendMessageToUsers(\n      final Collection<String> userIds,\n      final FcmSendMessageRequest request\n  ) {\n    return dispatcher.dispatchTask(new Callable<FcmSendMessageResult>() {\n      @Override\n      public FcmSendMessageResult call() {\n        return proxy.sendMessageToUsers(userIds, request);\n      }\n    });\n  }", "private SqlStatementParser ( ) { matchers . put ( Database . MYSQL , mysqlMatcher ) ; matchers . put ( Database . ORACLE , mysqlMatcher ) ; matchers . put ( Database . POSTGRESQL , mysqlMatcher ) ; matchers . put ( Database . UNKNOWN , mysqlMatcher ) ; }", "public void nodeChanged ( TreeNode node ) { if ( listenerList != null && node != null ) { TreeNode parent = node . getParent ( ) ; if ( parent != null ) { int anIndex = parent . getIndex ( node ) ; if ( anIndex != - NUM_ ) { int [ ] cIndexs = new int [ NU", "public Object create(Class<?> iface, ClassLoader proxyLoader) {\n\t\treturn create(new Class[]{iface}, proxyLoader);\n\t}", "public HttpRequest send ( final byte [ ] input ) throws HttpRequestException { return send ( new ByteArrayInputStream ( input ) ) ; }", "  public void addFile(File file) throws IOException {\n    addFile(file, file.getName());\n  }\n", "public static boolean isPeriodActive ( final Date startDate , final Date endDate ) { if ( startDate == null && endDate == null ) { return BOOL_ ; } if ( startDate == null ) { throw new JKException ( STR_ ) ; } if ( endDate == null ) { throw new JKException ( STR_ ) ; } if ( compareTwoDates ( startDate , endDate ) . equals ( CompareDates . DATE1_GREATER_THAN_DATE2 ) ) { throw new JKException ( STR_ ) ; } final boolean startLessThanCurrent = compareTwoDates ( startDate , getSystemDate ( ) ) . equals ( CompareDates . DATE1_LESS_THAN_DATE2 ) ; final boolean endGreaterThanCurrent = compareTwoDates ( endDate , getSystemDate ( ) ) . equals ( CompareDates . DATE1_GREATER_THAN_DATE2 ) ; return startLessThanCurrent && endGreaterThanCurrent ; }", "  public Object lookupLink(String name) throws NamingException {\n    return lookupLink(parser.parse(name));\n  }\n", "    protected void createMBeans(Service service) throws Exception {\n\n        if (service instanceof StandardService) {\n            ((StandardService) service).addPropertyChangeListener(this);\n        }\n\n        // Create the MBeans for the corresponding Connectors\n        Connector connectors[] = service.findConnectors();\n        for (int j = 0; j < connectors.length; j++) {\n            createMBeans(connectors[j]);\n        }\n\n        // Create the MBean for the associated Engine and friends\n        Engine engine = (Engine) service.getContainer();\n        if (engine != null) {\n            createMBeans(engine);\n        }\n\n    }\n", "static DeltaFragment newInstance ( final Item item ) { final DeltaFragment fragment = new DeltaFragment ( ) ; final Bundle args = new Bundle ( ) ; args . putString ( ARG_ITEM_ID , item . id ) ; args . putString ( ARG_ITEM_NAME_ID , item . name ) ; fragment . setArguments ( args ) ; return fragment ; }", "                public boolean relative(int offset) {\n                    pos = pos+offset;\n                    return pos==0;\n                }\n", "private E xfer(E e,boolean haveData,int how,long nanos){\n  if (haveData && (e == null))   throw new NullPointerException();\n  Node s=null;\n  retry:   for (; ; ) {\n    for (Node h=head, p=h; p != null; ) {\n      boolean isData=p.isData;\n      Object item=p.item;\n      if (item != p && (item != null) == isData) {\n        if (isData == haveData)         break;\n        if (p.casItem(item,e)) {\n          for (Node q=p; q != h; ) {\n            Node n=q.next;\n            if (head == h && casHead(h,n == null ? q : n)) {\n              h.forgetNext();\n              break;\n            }\n            if ((h=head) == null || (q=h.next) == null || !q.isMatched())             break;\n          }\n          LockSupport.unpark(p.waiter);\n          return LinkedTransferQueue.<E>cast(item);\n        }\n      }\n      Node n=p.next;\n      p=(p != n) ? n : (h=head);\n    }\n    if (how != NOW) {\n      if (s == null)       s=new Node(e,haveData);\n      Node pred=tryAppend(s,haveData);\n      if (pred == null)       continue retry;\n      if (how != ASYNC)       return awaitMatch(s,pred,e,(how == TIMED),nanos);\n    }\n    return e;\n  }\n}\n", "private void discard ( ServiceRegistrar proxy ) { discMgr . discard ( proxy ) ; }", "public static void escapeUriQueryParam(final Reader reader, final Writer writer, final String encoding)\n            throws IOException {\n\n        if (writer == null) {\n            throw new IllegalArgumentException(\"Argument 'writer' cannot be null\");\n        }\n\n        if (encoding == null) {\n            throw new IllegalArgumentException(\"Argument 'encoding' cannot be null\");\n        }\n\n        UriEscapeUtil.escape(reader, writer, UriEscapeUtil.UriEscapeType.QUERY_PARAM, encoding);\n\n    }", "public void testLocalsAverageCorrectly ( ) throws Exception { TransferEntropyCalculatorMultiVariateKernel teCalc = new TransferEntropyCalculatorMultiVariateKernel ( ) ; String kernelWidth = STR_ ; teCalc . setProperty ( TransferEntropyCalculatorMultiVariateKernel . NORMALISE_PROP_NAME , STR_ ) ; teCalc . setProperty ( TransferEntropyCalculatorMultiVariateKernel . EPSILON_PROP_NAME , kernelWidth ) ; super . testLocalsAverageCorrectly ( teCalc , NUM_ , NUM_ , NUM_ ) ; }", "public abstract void scrollToFinishActivity ( ) ;", "public PartialLoadException ( final CPartialLoadException exception ) { super ( exception ) ; m_module = exception . getModule ( ) . getConfiguration ( ) . getName ( ) ; }", "    public void setRN(String newrn) {\n        rnvalue.setText(newrn);\n        rnlabel.setSelected(true);\n        rnvalue.setEnabled(true);\n    }\n", "    protected void updateLayoutData() {\n        widthHint = SWT.DEFAULT;\n        heightHint = SWT.DEFAULT;\n        if (!axis.getTick().isVisible()) {\n            widthHint = 0;\n            heightHint = 0;\n        } else {\n            if (axis.isHorizontalAxis()) {\n                double angle = axis.getTick().getTickLabelAngle();\n                heightHint = Axis.MARGIN\n                        + (int) (tickLabelMaxLength\n                                * Math.sin(Math.toRadians(angle)) + Util\n                                .getExtentInGC(getFont(), \"dummy\").y\n                                * Math.cos(Math.toRadians(angle)));\n            } else {\n                widthHint = tickLabelMaxLength + Axis.MARGIN;\n            }\n        }\n    }\n", "\tpublic void startBatch() {\n\t\tmNotifier.startBatch();\n\t}\n", "public void failure ( int errId , String errMsg ) ;", "private void checkTerminated ( ) { synchronized ( this ) { if ( bTerminated ) { throw new IllegalStateException ( STR_ ) ; } } }", "public ZyGraphLayoutSettings ( final GraphSettingsConfigItem type ) { Preconditions . checkNotNull ( type , STR_ ) ; m_type = type ; m_circularSettings = new ZyGraphCircularSettings ( type ) ; m_hierarchicalSettings = new ZyGraphHierarchicalSettings ( typ", "\tpublic void setHighlightColor(int r, int g, int b, int a) {\n\t\thighlightColor.set(r, g, b, a);\n\t\tsetChanged(true);\n\t\tupdateLabelColor();\n\t}\n", "public void clearViewCached(int parentId, int viewId) {\n        SparseArray<View> sparseArrayViewsParent = mSparseSparseArrayView.get(parentId);\n        if (sparseArrayViewsParent != null) {\n            sparseArrayViewsParent.remove(viewId);\n        }\n    }", "\t\tprotected boolean isSourceEditing() {\n\t\t\treturn source;\n\t\t}\n", "public boolean next ( ) throws IOException { if ( rowCount == NUM_ && useHeaders ) { List < String > row1 = this . read ( ) ; if ( row1 == null ) return BOOL_ ; for ( int i = NUM_ ; i < row1 . size ( ) ; i ++ ) { String name = row1 . get ( i ) ; names . p", "public static boolean setFilePermissions(String file, int mode) {\n        // since this will not work on Windows\n        if (ConfigUtil.getOS() == ConfigUtil.WINDOWS_OS) {\n            return false;\n        }\n\n        Runtime runtime = Runtime.getRuntime();\n        String [] cmd = new String[] { CHMOD,\n                                       String.valueOf(mode),\n                                       file };\n        Process process = null;\n        try {\n            process = runtime.exec(cmd, null);\n            return (process.waitFor() == 0) ? true : false;\n        } catch(Exception e) {\n            return false;\n        } finally {\n            if (process != null) {\n                try {\n                    process.getErrorStream().close();\n                } catch (IOException e) {}\n                try {\n                    process.getInputStream().close();\n                } catch (IOException e) {}\n                try {\n                    process.getOutputStream().close();\n                } catch (IOException e) {}\n            }\n        }\n    }", "private void computeRemainingRows(GrayS16 left, GrayS16 right )\n\t{\n\t\tfor( int row = regionHeight; row < left.height; row++ ) {\n\t\t\tint oldRow = row%regionHeight;\n\n\t\t\t// subtract first row from vertical score\n\t\t\tint scores[] = horizontalScore[oldRow];\n\t\t\tfor( int i = 0; i < lengthHorizontal; i++ ) {\n\t\t\t\tverticalScore[i] -= scores[i];\n\t\t\t}\n\n\t\t\tUtilDisparityScore.computeScoreRow(left, right, row, scores,\n\t\t\t\t\tminDisparity,maxDisparity,regionWidth,elementScore);\n\n\t\t\t// add the new score\n\t\t\tfor( int i = 0; i < lengthHorizontal; i++ ) {\n\t\t\t\tverticalScore[i] += scores[i];\n\t\t\t}\n\n\t\t\t// compute disparity\n\t\t\tcomputeDisparity.process(row - regionHeight + 1 + radiusY, verticalScore);\n\t\t}\n\t}", "    public int compare(Version other) {\n        if (other == null) throw new NullPointerException(\"other version is null\");\n        if (this._version < other._version) return -1;\n        if (this._version > other._version) return 1;\n        if (this._revision < other._revision) return -1;\n        if (this._revision > other._revision) return 1;\n        if (this._subrevision < other._subrevision) return -1;\n        if (this._subrevision > other._subrevision) return 1;\n        return 0;\n    }\n", "public static <T> T invokeSetters(final T instance, final Map<String,Object> vars) \n            throws ReflectiveOperationException {\n        if (instance != null && vars != null) {\n            final Class<?> clazz = instance.getClass();\n            final Method[] methods = clazz.getMethods();\n            for (final Entry<String,Object> entry : vars.entrySet()) {\n                final String methodName = \"set\" + entry.getKey().substring(0, 1).toUpperCase(Locale.US) \n                        + entry.getKey().substring(1);\n                boolean found = false;\n                for (final Method method : methods) {\n                    if (methodName.equals(method.getName()) && method.getParameterTypes().length == 1) {\n                        method.invoke(instance, entry.getValue());\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    throw new NoSuchMethodException(\"Expected setter named '\" + methodName \n                            + \"' for var '\" + entry.getKey() + \"'\");\n                }\n            }\n        }\n        return instance;\n    }", "public static HttpRequest put ( final String baseUrl , final Map < ? , ? > params , final boolean encode ) { String url = append ( baseUrl , params ) ; return put ( encode ? encode ( url ) : url ) ; }", "public AbstractInsnNode [ ] toArray ( ) { int i = NUM_ ; AbstractInsnNode elem = first ; AbstractInsnNode [ ] insns = new AbstractInsnNode [ size ] ; while ( elem != null ) { insns [ i ] = elem ; elem . index = i ++ ; elem = elem . next ; } return insns ; }", "private Task taskToBeRescheduled(Task task) {\n        Task taskToBeRetried = task.copy();\n        taskToBeRetried.setTaskId(IDGenerator.generate());\n        taskToBeRetried.setRetriedTaskId(task.getTaskId());\n        taskToBeRetried.setStatus(SCHEDULED);\n        taskToBeRetried.setRetryCount(task.getRetryCount() + 1);\n        taskToBeRetried.setRetried(false);\n        taskToBeRetried.setPollCount(0);\n        taskToBeRetried.setCallbackAfterSeconds(0);\n        task.setRetried(true);\n        return taskToBeRetried;\n    }", "\tpublic void loadGame(ChainLink newRoot, BranchLink newBRoot) {\n\t\tlogBuffer = new StringBuffer();\n\t\t\n\t\tlogBuffer.append(\"Initializing new tree structure. Progress:\\n\");\n\t\tsetLinkTreeRoot(newRoot);\t\t\n\t\tmoveChainCount = setBranchTreeRoot(newBRoot);\n \n\t\tlogBuffer.append(\"Setting moveChainCount to: \" + moveChainCount + \"\\n\");\n\t\t\n\t\tlogger.info(logBuffer.toString());\n\t\t\n\t\t// Select main line\n\t\ttry {\n\t\t\tsetCurrentBranch(CM_MAIN_BRANCH_NUMBER);\t\n\t\t} catch (CTEInvalidMoveChain e) {\n\t\t\te.printStackTrace();\n\t\t}\t\t\n\t}\n", "public EaseOutIn ( ) { }", "\tprotected String get_directionsURL() {\n\t\treturn _directionsURL;\n\t}\n", "@Override\n    public Request<CreateInternetGatewayRequest> getDryRunRequest() {\n        Request<CreateInternetGatewayRequest> request = new CreateInternetGatewayRequestMarshaller().marshall(this);\n        request.addParameter(\"DryRun\", Boolean.toString(true));\n        return request;\n    }", "public void visitEdge ( Edge edge ) ;", "public static com.google.android.gms.maps.model.Polygon addPolygonToMap(\n            GoogleMap map, PolygonOptions polygon) {\n        return map.addPolygon(polygon);\n    }", "public static byte[] decode(byte[] data)\n\t{\n\t\tif (data.length == 0)\n\t\t{\n\t\t\treturn data;\n\t\t}\n\t\tint lastRealDataIndex = data.length - 1;\n\t\twhile (data[lastRealDataIndex] == equalSign)\n\t\t{\n\t\t\tlastRealDataIndex--;\n\t\t}\n\t\t// original data digit is 8 bits long, but base64 digit is 6 bits long\n\t\tint padBytes = data.length - 1 - lastRealDataIndex;\n\t\tint byteLength = data.length * 6 / 8 - padBytes;\n\t\tbyte[] result = new byte[byteLength];\n\t\t// Each 4 bytes of input (encoded) we end up with 3 bytes of output\n\t\tint dataIndex = 0;\n\t\tint resultIndex = 0;\n\t\tint allBits = 0;\n\t\t// how many result chunks we can process before getting to pad bytes\n\t\tint resultChunks = (lastRealDataIndex + 1) / 4;\n\t\tfor (int i = 0; i < resultChunks; i++)\n\t\t{\n\t\t\tallBits = 0;\n\t\t\t// Loop 4 times gathering input bits (4 * 6 = 24)\n\t\t\tfor (int j = 0; j < 4; j++)\n\t\t\t{\n\t\t\t\tallBits = allBits << 6 | decodeDigit(data[dataIndex++]);\n\t\t\t}\n\t\t\t// Loop 3 times generating output bits (3 * 8 = 24)\n\t\t\tfor (int j = resultIndex + 2; j >= resultIndex; j--)\n\t\t\t{\n\t\t\t\tresult[j] = (byte) (allBits & 0xff); // Bottom 8 bits\n\t\t\t\tallBits = allBits >>> 8;\n\t\t\t}\n\t\t\tresultIndex += 3; // processed 3 result bytes\n\t\t}\n\t\t// Now we do the extra bytes in case the original (non-encoded) data\n\t\t// was not multiple of 3 bytes\n\t\tswitch (padBytes)\n\t\t{\n\t\t\tcase 1:\n\t\t\t\t// 1 pad byte means 3 (4-1) extra Base64 bytes of input, 18\n\t\t\t\t// bits, of which only 16 are meaningful\n\t\t\t\t// Or: 2 bytes of result data\n\t\t\t\tallBits = 0;\n\t\t\t\t// Loop 3 times gathering input bits\n\t\t\t\tfor (int j = 0; j < 3; j++)\n\t\t\t\t{\n\t\t\t\t\tallBits = allBits << 6 | decodeDigit(data[dataIndex++]);\n\t\t\t\t}\n\t\t\t\t// NOTE - The code below ends up being equivalent to allBits =\n\t\t\t\t// allBits>>>2\n\t\t\t\t// But we code it in a non-optimized way for clarity\n\t\t\t\t// The 4th, missing 6 bits are all 0\n\t\t\t\tallBits = allBits << 6;\n\t\t\t\t// The 3rd, missing 8 bits are all 0\n\t\t\t\tallBits = allBits >>> 8;\n\t\t\t\t// Loop 2 times generating output bits\n\t\t\t\tfor (int j = resultIndex + 1; j >= resultIndex; j--)\n\t\t\t\t{\n\t\t\t\t\tresult[j] = (byte) (allBits & 0xff); // Bottom 8\n\t\t\t\t\t// bits\n\t\t\t\t\tallBits = allBits >>> 8;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t// 2 pad bytes mean 2 (4-2) extra Base64 bytes of input, 12 bits\n\t\t\t\t// of data, of which only 8 are meaningful\n\t\t\t\t// Or: 1 byte of result data\n\t\t\t\tallBits = 0;\n\t\t\t\t// Loop 2 times gathering input bits\n\t\t\t\tfor (int j = 0; j < 2; j++)\n\t\t\t\t{\n\t\t\t\t\tallBits = allBits << 6 | decodeDigit(data[dataIndex++]);\n\t\t\t\t}\n\t\t\t\t// NOTE - The code below ends up being equivalent to allBits =\n\t\t\t\t// allBits>>>4\n\t\t\t\t// But we code it in a non-optimized way for clarity\n\t\t\t\t// The 3rd and 4th, missing 6 bits are all 0\n\t\t\t\tallBits = allBits << 6;\n\t\t\t\tallBits = allBits << 6;\n\t\t\t\t// The 3rd and 4th, missing 8 bits are all 0\n\t\t\t\tallBits = allBits >>> 8;\n\t\t\t\tallBits = allBits >>> 8;\n\t\t\t\tresult[resultIndex] = (byte) (allBits & 0xff); // Bottom\n\t\t\t\t// 8\n\t\t\t\t// bits\n\t\t\t\tbreak;\n\t\t}\n\t\treturn result;\n\t}", "public static final Tag findAncestorWithClass(Tag from, Class klass) {\n\tboolean isInterface = false;\n\n\tif (from == null ||\n\t    klass == null ||\n\t    (!Tag.class.isAssignableFrom(klass) &&\n\t     !(isInterface = klass.isInterface()))) {\n\t    return null;\n\t}\n\n\tfor (;;) {\n\t    Tag tag = from.getParent();\n\n\t    if (tag == null) {\n\t\treturn null;\n\t    }\n\n\t    if ((isInterface && klass.isInstance(tag)) ||\n\t        klass.isAssignableFrom(tag.getClass()))\n\t\treturn tag;\n\t    else\n\t\tfrom = tag;\n\t}\n    }", "public static void main(String args[]){\n  int runs=Integer.parseInt(args[0]);\n  int size=Integer.parseInt(args[1]);\n  String kind=args[2];\n  benchmark(runs,size,kind);\n}\n", "private int currentDepth ( ) { try { Integer oneBased = ( ( Integer ) DEPTH_FIELD . get ( this ) ) ; return oneBased - NUM_ ; } catch ( IllegalAccessException e ) { throw new AssertionError ( e ) ; } }", "public static boolean exists(String path){\n  File f=new File(path);\n  return f.exists();\n}\n", "private void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; }", "public long checksum ( ) { return this . checksum ; }", "  public void setShowDate(boolean showDate) {\n    this.showDate = showDate;\n    repaint();\n  }\n", "    public boolean matches(String possibleLiteral) {\n        return(possibleLiteral.startsWith(name));\n    }\n", "Union5 < First , Second , Third , Fourth , Fifth > third ( Third value ) ;", "  public void apply(FieldDef field) {\n    field.isUnique = true;\n  }\n", "public void addProperties(List<URI> propFiles) throws IOException {\n  propFiles=new ArrayList<URI>(propFiles);\n  Collections.reverse(propFiles);\n  for (  URI file : propFiles) {\n    addProperties(file);\n  }\n}\n", "public void run(String... args) throws BadArgs, IOException {\n  PrintWriter out=new PrintWriter(System.out);\n  try {\n    run(out,args);\n  }\n  finally {\n    out.flush();\n  }\n}\n", "\tpublic void save(CoMetacognitiveVariable entity) {\n\t\tEntityManagerHelper.log(\"saving CoMetacognitiveVariable instance\", Level.INFO, null);\n\t\ttry {\n\t\t\tgetEntityManager().persist(entity);\n\t\t\tEntityManagerHelper.log(\"save successful\", Level.INFO, null);\n\t\t} catch (RuntimeException re) {\n\t\t\tEntityManagerHelper.log(\"save failed\", Level.SEVERE, re);\n\t\t\tthrow re;\n\t\t}\n\t}\n", "public void handle ( String line ) { }", "public int valueInt ( ) { return rawData [ NUM_ ] ; }", "\tpublic void paint (Graphics2D g) {\n\n\t\t// render the halo (only if specified)\n\t\tif ( halo != null ) {\n\t\t\ttry {\n\t\t\t\tpaintHalo( g, halo, xpoints [0], ypoints [0] - descent);\n\t\t\t} catch (FilterEvaluationException e) {\n\t\t\t\te.printStackTrace ();\n\t\t\t}\n\t\t}\n\n\t\t// render the text\n\t\tsetColor( g, color, 1.0 );\n\t\tg.setFont (font);\n\t\tg.drawString( caption, xpoints [0], ypoints [0] - descent );\n\t}\n", "\tprivate void createTxtNewName(Composite composite) {\n\t\tthis.txtNewName = new Text(composite, SWT.BORDER);\n\t\tthis.txtNewName.setText(this.info.getSelectedText());\n\t\tthis.txtNewName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\t\tthis.txtNewName.selectAll();\n\t\tthis.txtNewName.addKeyListener(new KeyAdapter() {\n\t\t\tpublic void keyReleased(final KeyEvent e) {\n\t\t\t\tRenameFieldInputPage.this.info\n\t\t\t\t\t\t.setNewText(RenameFieldInputPage.this.txtNewName\n\t\t\t\t\t\t\t\t.getText());\n\t\t\t\tvalidate();\n\t\t\t}\n\t\t});\n\t}\n", "protected static float [ ] createGaussianKernel ( int radius ) { if ( radius < NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } float [ ] data = new float [ radius * NUM_ + NUM_ ] ; float sigma = radius / NUM_ ; float twoSigmaSquare = NUM_ * sigma", "public static byte[] copy(final byte[] data, final int start, final int end) {\n\t\tif (start > end) {\n\t\t\tthrow new IllegalArgumentException(String.format(\n\t\t\t\t\"start > end: %d > %d\", start, end\n\t\t\t));\n\t\t}\n\t\tif (start < 0 || start > data.length << 3) {\n\t\t\tthrow new ArrayIndexOutOfBoundsException(String.format(\n\t\t\t\t\"%d < 0 || %d > %d\", start, start, data.length*8\n\t\t\t));\n\t\t}\n\n\t\tfinal int to = min(data.length << 3, end);\n\t\tfinal int byteStart = start >>> 3;\n\t\tfinal int bitStart = start & 7;\n\t\tfinal int bitLength = to - start;\n\n\t\tfinal byte[] copy = new byte[toByteLength(to - start)];\n\n\t\tif (copy.length > 0) {\n\t\t\t// Perform the byte wise right shift.\n\t\t\tSystem.arraycopy(data, byteStart, copy, 0, copy.length);\n\n\t\t\t// Do the remaining bit wise right shift.\n\t\t\tshiftRight(copy, bitStart);\n\n\t\t\t// Add the 'lost' bits from the next byte, if available.\n\t\t\tif (data.length > copy.length + byteStart) {\n\t\t\t\tcopy[copy.length - 1] |= (byte)(data[byteStart + copy.length]\n\t\t\t\t\t<< (Byte.SIZE - bitStart));\n\t\t\t}\n\n\t\t\t// Trim (delete) the overhanging bits.\n\t\t\tcopy[copy.length - 1] &= 0xFF >>> ((copy.length << 3) - bitLength);\n\t\t}\n\n\t\treturn copy;\n\t}", "private static void populateLevels ( ) { levelList = new LinkedList < > ( ) ; levelList . add ( Level . SEVERE . toString ( ) ) ; levelList . add ( Level . WARNING . toString ( ) ) ; levelList . add ( Level . INFO . toString ( ) ) ; levelList . add ( Leve", "public static Name upperUnderscore(String... pieces){\n  List<NamePiece> namePieces=new ArrayList<>();\n  for (  String piece : pieces) {\n    validateUpperUnderscore(piece);\n    namePieces.add(new NamePiece(piece,CaseFormat.UPPER_UNDERSCORE));\n  }\n  return new Name(namePieces);\n}\n", "public byte[] toBytes(){\n  ByteBuffer geometryByteBuffer=data.toByteBuffer();\n  geometryByteBuffer.rewind();\n  int size=12 + geometryByteBuffer.capacity();\n  ByteBuffer buf=ByteBuffer.allocate(size);\n  buf.order(ByteOrder.LITTLE_ENDIAN);\n  buf.rewind();\n  buf.putInt(ByteSwapper.swap(recordNumber));\n  buf.putInt(ByteSwapper.swap(contentLength));\n  buf.putInt(getIntFromShapeType(shapeType));\n  byte[] bytes=geometryByteBuffer.array();\n  for (int i=0; i < bytes.length; i++) {\n    buf.put(bytes[i]);\n  }\n  return buf.array();\n}\n", "protected void handleRenderException(FacesContext context,Exception e) throws IOException {\n  if (LOGGER.isLoggable(Level.SEVERE)) {\n    UIViewRoot root=context.getViewRoot();\n    StringBuffer sb=new StringBuffer(64);\n    sb.append(\"Error Rendering View\");\n    if (root != null) {\n      sb.append('[');\n      sb.append(root.getViewId());\n      sb.append(']');\n    }\n    LOGGER.log(Level.SEVERE,sb.toString(),e);\n  }\n  if (e instanceof RuntimeException) {\n    throw (RuntimeException)e;\n  }\n else   if (e instanceof IOException) {\n    throw (IOException)e;\n  }\n else {\n    throw new FacesException(e.getMessage(),e);\n  }\n}\n", "public boolean isVisible ( ) { return m_node . isVisible ( ) ; }", "public RequestCreator transform ( Transformation transformation ) { data . transform ( transformation ) ; return this ; }", "static\n\tprivate Float toFloat(Object value){\n\n\t\tif(value instanceof Float){\n\t\t\treturn (Float)value;\n\t\t} else\n\n\t\tif(value instanceof Double){\n\t\t\tNumber number = (Number)value;\n\n\t\t\treturn toFloat(number.floatValue());\n\t\t} else\n\n\t\tif((value instanceof Long) || (value instanceof Integer) || (value instanceof Short) || (value instanceof Byte)){\n\t\t\tNumber number = (Number)value;\n\n\t\t\treturn toFloat(number.floatValue());\n\t\t} else\n\n\t\tif(value instanceof Boolean){\n\t\t\tBoolean flag = (Boolean)value;\n\n\t\t\treturn (flag.booleanValue() ? Numbers.FLOAT_ONE : Numbers.FLOAT_ZERO);\n\t\t} else\n\n\t\tif((value instanceof DaysSinceDate) || (value instanceof SecondsSinceDate) || (value instanceof SecondsSinceMidnight)){\n\t\t\tNumber number = (Number)value;\n\n\t\t\treturn toFloat(number.floatValue());\n\t\t}\n\n\t\tthrow new TypeCheckException(DataType.FLOAT, value);\n\t}", "    public void dispose() {\n        if(mConService != null) {\n            mFtpLog.info(\"Closing connection service.\");\n            mConService.dispose();\n            mConService = null;\n        }\n        \n        if (mUserManager != null) {\n            mFtpLog.info(\"Closing user manager.\");\n            mUserManager.dispose();\n            mUserManager = null;\n        }\n        \n        if (mQueue != null) {\n            mFtpLog.info(\"Closing message queue.\");\n            mQueue.dispose();\n            mQueue = null;\n        }\n        if(mFtpLog != null) {\n            mFtpLog.info(\"Closing log file.\");\n            mFtpLog.info(\"======================================================================\");\n            mFtpLog.dispose();\n            mFtpLog = null;\n        }\n    } \n", "public static long getOpNum(String name, Op.Type type) {\n        if (type == Op.Type.LOOP) {\n            return 0;\n        } else if (type == Op.Type.RETURN) {\n            return 40;\n        } else if (type == Op.Type.IF) {\n            return 30;\n        } else if (type == Op.Type.CONDITIONAL) {\n            return 10;\n        } else if (type == Op.Type.MERGE) {\n            return 60L;\n        } else if (type == Op.Type.LOOP_COND) {\n            return 70L;\n        } else if (type == Op.Type.NEXT_ITERATION) {\n            return 80L;\n        } else if (type == Op.Type.EXIT) {\n            return 90L;\n        } else if (type == Op.Type.ENTER) {\n            return 100L;\n        } else if (type == Op.Type.CUSTOM) {\n            val name2 = Nd4j.getExecutioner().getCustomOperations().get(name.toLowerCase());\n            if (name2 == null) {\n                val name3 = Nd4j.getExecutioner().getCustomOperations().get(name);\n                if (name3 == null)\n                    return 0;\n                else\n                    return name3.getHash();\n            } else\n                return name2.getHash();\n            //return Nd4j.getExecutioner().getCustomOperations().get(name.toLowerCase()).getHash();\n\n        } else {\n            try {\n                DifferentialFunction op =  DifferentialFunctionClassHolder.getInstance().getInstance(name);\n                return  op.opNum();\n            } catch (Exception e) {\n                throw new RuntimeException(\"Could not find op number for operation: [\" + name + \"]\",e);\n            }\n        }\n    }", "private void toWagonFormat(FloatLeafNode node,DataOutputStream out,String extension,PrintWriter pw) throws IOException {\n  String s=\"((\" + node.getStDeviation() + \" \"+ node.getMean()+ \"))\";\n  if (out != null) {\n    writeStringToOutput(s,out);\n  }\n else {\n  }\n  if (pw != null) {\n    pw.println(s);\n  }\n}\n", "    private LearningObject createLearningObject(String name, User owner) {\n        LearningObject learningObject = new LearningObject();\n        learningObject.setName(name);\n        learningObject.setCreator(owner);\n        learningObject.setOwner(owner);\n        String learningObjectId2 = learningObjectService.create(learningObject);\n        LearningObject retrievedLearningObject = learningObjectService.findById(learningObjectId2);\n        return retrievedLearningObject;\n    }\n", "@Override public boolean longClick(Selector obj,String corner) throws UiObjectNotFoundException {\n  return longClick(device.findObject(obj.toUiSelector()),corner);\n}\n", "public static byte[] transceiveAndGetResponse(byte[] command,IsoCard isoCard,String getResponseApdu) throws IOException {\n  byte[] resp=isoCard.transceive(command);\n  byte[] buf=new byte[2048];\n  int offset=0;\n  while (resp[resp.length - 2] == 0x61) {\n    System.arraycopy(resp,0,buf,offset,resp.length - 2);\n    offset+=resp.length - 2;\n    resp=isoCard.transceive(decodeHex(getResponseApdu));\n  }\n  System.arraycopy(resp,0,buf,offset,resp.length);\n  byte[] properlySized=new byte[offset + resp.length];\n  System.arraycopy(buf,0,properlySized,0,properlySized.length);\n  return properlySized;\n}\n", "    public Text replace(CharSet charSet, j2me.lang.CharSequence replacement) {\n        int i = indexOfAny(charSet);\n        return (i < 0) ? this : // No character to replace.\n                subtext(0, i).concat(Text.valueOf(replacement)).concat(\n                        subtext(i + 1).replace(charSet, replacement));\n    }\n", "public static void leftShift(ObjectOutputStream self,Object value) throws IOException {\n  self.writeObject(value);\n}\n", "  public Signal getOutput1() {\n    return output1;\n  }\n", "public static < T > LinkedBindingBuilder < T > bind ( Binder binder , Class < T > type ) { return bind ( binder , TypeLiteral . get ( type ) ) ; }", "\tpublic void mouseReleased(MouseEvent e) {\n\t\tif(drawable != null){\n\t\t\tdrawable.moveTo(e.getPoint());\n\t\t\t((NodeCircle)drawable).setModified(true);\n\t\t\tdrawable = null;\n\t\t\tcanvas.updateDrawables();\n\t\t\tcanvas.repaint();\n\t\t}\n\t}\n", "public void registerHandler(String method, String url, OphApiHandler handler) {\n\t\tif (mtdHandler == null)\n\t\t\tmtdHandler = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n\n\t\tTreeMap<String, OphApiHandler> reg;\n\t\tif (method == null)\n\t\t\tmethod = \"ALL\";\n\t\treg = mtdHandler.get(method);\n\t\tif (reg == null) {\n\t\t\treg = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n\t\t\tmtdHandler.put(method, reg);\n\t\t}\n\t\treg.put(url, handler);\n\t}", "public Object parse(Reader reader) {\n        if (reader == null) {\n            throw new IllegalArgumentException(\"Reader must not be null\");\n        }\n\n        Object content;\n        JsonParser parser = createParser();\n        content = parser.parse(reader);\n        return content;\n    }", "public Set<String> getCollectors() {\n\t\tfinal Set<String> collectors = new HashSet<String>();\n\t\tfinal Testcases testcases = data.getTestcases();\n\t\tfor (final TestcaseType tct : testcases.getTestcase()) {\n\t\t\tfor (final Datacollector collector : tct.getDatacollector()) {\n\t\t\t\tcollectors.add(collector.getName());\n\t\t\t}\n\t\t}\n\t\treturn collectors;\n\t}", "private void executeBadgeByContentProvider ( Context context , ComponentName componentName , int badgeCount ) { if ( badgeCount < NUM_ ) { return ; } if ( mQueryHandler == null ) { mQueryHandler = new AsyncQueryHandler ( context . getApplicationContext ( ) . getContentResolver ( ) ) { } ; } insertBadgeAsync ( badgeCount , componentName . getPackageName ( ) , componentName . getClassName ( ) ) ; }", "    public List retrieveProcessInstanceDetails(List processInstanceList) {\n        Iterator it = processInstanceList.iterator();\n        while (it.hasNext()) {\n            retrieveProcessInstance((ProcessInstance) it.next());\n        }\n        return processInstanceList;\n    }\n", "  public boolean isTouchScrollingDisabled() {\n    return touchScroller == null;\n  }\n", "public void addConfig ( DelayedConfig config ) { delayedConfigs . add ( config ) ; }", "public HostCandidate ( IceSocketWrapper socket , Component parentComponent ) { this ( socket , parentComponent , Transport . UDP ) ; }", "public static double computeL2(DoubleTuple t)\r\n    {\r\n        double sum = 0;\r\n        for (int i=0; i<t.getSize(); i++)\r\n        {\r\n            double ti = t.get(i);\r\n            sum += ti * ti;\r\n        }\r\n        return Math.sqrt(sum);\r\n    }", "public static double [ ] [ ] reshape ( double [ ] data , int rows , int columns ) { double [ ] [ ] matrix = new double [ rows ] [ columns ] ; int i = NUM_ ; for ( int r = NUM_ ; r < rows ; r ++ ) { for ( int c = NUM_ ; c < columns ; c ++ ) { matrix [ r ] ", "@Override\n  public String toSource(Node n) {\n    initCompilerOptionsIfTesting();\n    return toSource(n, null, true);\n  }", "{\nreturn new KeyNamePair(get_ID(), String.valueOf(getC_RevenueRecognition_Plan_ID()));\n}\n", "void untagView ( CTag tag ) throws CouldntSaveDataException ;", "private boolean initAndReportSuccess() {\n        // Load configuration.\n        Config.loadConfig();\n        // Initialize storer, hashes, and analyzer.\n        mDependencyAnalyzer = Config.createDepenencyAnalyzer();\n\n        // Establish if Tool is enabl", "private boolean termsContainDesired(Set<String> terms)\n\t{\n\t\tif (terms.isEmpty()) return false;\n\t\tif (featureSubstring.length == 0) return true;\n\n\t\tfor (String term : terms)\n\t\t{\n\t\t\tfor (String sub : featureSubstring)\n\t\t\t{\n\t\t\t\tif (term.contains(sub)) return true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "    protected void nameTextFieldGreen(){\n        referredToTextField.setBackground(ToolKit.NEWGREEN);\n        specialityComboBox.setEnabled(true);\n    }\n", "public void onStart ( ) { }", "public CompletableFuture<Object> putAsync(final Consumer<HttpConfig> configuration) {\n        return CompletableFuture.supplyAsync(() -> put(configuration), getExecutor());\n    }", "public static boolean solve(DMatrixRMaj a , DMatrixRMaj b , DMatrixRMaj x )\n    {\n        x.reshape(a.numCols,b.numCols);\n\n        LinearSolverDense<DMatrixRMaj> solver = LinearSolverFactory_DDRM.general(a.numRows,a.numCols);\n\n        // make sure the inputs 'a' and 'b' are not modified\n        solver = new LinearSolverSafe<>(solver);\n\n        if( !solver.setA(a) )\n            return false;\n\n        solver.solve(b, x);\n        return true;\n    }", "\tprotected SceneModel goToServiceAuctionInfoScene() {\n\t\tfinal GoScenesAction goToServ = new GoScenesAction(\n\t\t\t\tGridPSConstants.TR_OUT_ADMISSION,\n\t\t\t\tGridPSConstants.SC_SERVICE_AUCTION_INFO);\n\n\t\tSceneModel serviceScene = ((SceneModel) extAccess.getBeliefbase()\n\t\t\t\t.getBelief(\"admissionScene\").getFact()).exit(goToServ)[0];\n\t\tserviceScene.addSceneListener(this);\n\t\treturn serviceScene;\n\t}\n", "public UIGraphicTestCase ( String name ) { super ( name ) ; }", "@SuppressWarnings(\"nullness\") void expand(){\n  AtomicReferenceArray<E> oldTable=table;\n  int oldCapacity=oldTable.length();\n  if (oldCapacity >= MAXIMUM_CAPACITY) {\n    return;\n  }\n  Strategy<K,V,E> s=Impl.this.strategy;\n  AtomicReferenceArray<E> newTable=newEntryArray(oldCapacity << 1);\n  threshold=newTable.length() * 3 / 4;\n  int newMask=newTable.length() - 1;\n  for (int oldIndex=0; oldIndex < oldCapacity; oldIndex++) {\n    E head=oldTable.get(oldIndex);\n    if (head != null) {\n      E next=s.getNext(head);\n      int headIndex=s.getHash(head) & newMask;\n      if (next == null) {\n        newTable.set(headIndex,head);\n      }\n else {\n        E tail=head;\n        int tailIndex=headIndex;\n        for (E last=next; last != null; last=s.getNext(last)) {\n          int newIndex=s.getHash(last) & newMask;\n          if (newIndex != tailIndex) {\n            tailIndex=newIndex;\n            tail=last;\n          }\n        }\n        newTable.set(tailIndex,tail);\n        for (E e=head; e != tail; e=s.getNext(e)) {\n          K key=s.getKey(e);\n          if (key != null) {\n            int newIndex=s.getHash(e) & newMask;\n            E newNext=newTable.get(newIndex);\n            newTable.set(newIndex,s.copyEntry(key,e,newNext));\n          }\n else {\n          }\n        }\n      }\n    }\n  }\n  table=newTable;\n}\n", "public static PrefixedProperties createCascadingPrefixProperties(final List<PrefixConfig> configs) {\n\t\tPrefixedProperties properties = null;\n\t\tfor (final PrefixConfig config : configs) {\n\t\t\tif (properties == null) {\n\t\t\t\tproperties = new PrefixedProperties((config == null) ? new DynamicPrefixConfig() : config);\n\t\t\t} else {\n\t\t\t\tproperties = new PrefixedProperties(properties, (config == null) ? new DynamicPrefixConfig() : config);\n\t\t\t}\n\t\t}\n\t\treturn properties;\n\t}", "public String getName(boolean forcedUpdate) {\r\n\t\tString name = get().getName();\r\n\t\tif ((name == null || forcedUpdate) && api.getRiotApi() != null) {\r\n\t\t\ttry {\r\n\t\t\t\tname = api.getRiotApi().getName(getUserId());\r\n\t\t\t\tsetName(name);\r\n\t\t\t} catch (final IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn name;\r\n\t}", "private void initScrollbar ( ) { m_scrollbar . addAdjustmentListener ( m_listener ) ; m_bottomScrollbar . addAdjustmentListener ( m_listener ) ; add ( m_scrollbar , BorderLayout . EAST ) ; add ( m_bottomScrollbar , BorderLayout . SOUTH ) ; }", "\t\tpublic void addDetailFormatter(DetailFormatter detailFormatter) {\n\t\t\tfDetailFormattersSet.add(detailFormatter);\n\t\t\tfDefinedTypes.add(detailFormatter.getTypeName());\n\t\t\tfViewer.refresh();\n\t\t\trefreshViewer();\n\t\t\tIStructuredSelection selection= new StructuredSelection(detailFormatter);\n\t\t\tfViewer.setSelection(selection);\n\t\t\tupdatePage(selection);\n\t\t}\n", "public void cancelMissedCallsNotification ( ) throws android . os . RemoteException ;", "N MIN_VALUE ( ) ;", "        protected void endSchemaType() throws SAXException {\n            contentHandler.endElement(SCHEMA_NS, \"sequence\", \"xs:sequence\");\n\n            contentHandler.endElement(SCHEMA_NS, \"extension\", \"xs:extension\");\n\n            contentHandler.endElement(SCHEMA_NS, \"complexContent\", \"xs:complexContent\");\n\n            contentHandler.endElement(SCHEMA_NS, \"complexType\", \"xs:complexType\");\n        }\n", "    public HIGConstraints xwh(int x, int w, int h) {\n        this.x = x;\n        anchor = \"rltb\";\n        this.w = w;\n        this.h = h;\n        return this;\n    }\n", "public void destroy ( ) { super . destroy ( ) ; }", "public Enumeration<?> propertyNames() {\n        Hashtable<String,Object> h = new Hashtable<>();\n        enumerate(h);\n        return h.keys();\n    }", "public void put(ByteBuffer buffer){\n  buffer.put(bytes,offset,length + 1);\n}\n", "private SocketChannel createSocket(String host,int port) throws IOException {\n  SocketChannel sockChannel=SocketChannel.open();\n  sockChannel.configureBlocking(true);\n  m_Address=new InetSocketAddress(host,port);\n  LRMIUtilities.initNewSocketProperties(sockChannel);\n  return sockChannel;\n}\n", "    public String formatLocator(final Locator locator) {\n        if (locator == null) {\n            return \"\";\n        }\n        final StringBuilder sb = new StringBuilder();\n        if (locator.getSystemId() != null) {\n            sb.append(locator.getSystemId());\n        } else if (locator.getPublicId() != null) {\n            sb.append(locator.getPublicId());\n        } else {\n            sb.append(\"Unknown source\");\n        }\n        sb.append(\" (line: \");\n        sb.append(locator.getLineNumber());\n        sb.append(\", col: \");\n        sb.append(locator.getColumnNumber());\n        sb.append(\")\");\n        return sb.toString();\n    }\n", "public double [ ] computeLocalMarginalEntropyOfPreviousObservations ( int variableIndex ) { return computeLocalMarginalEntropyUsingPreviousObservations ( observations , variableIndex , BOOL_ ) ; }", "    public void setApplicationName(String name) {\n        applicationName = name;\n\n        String title;\n\n        if (applicationName != null) {\n            title = MessageFormat.format(bundle.getString(\"{0}_logs\"), name);\n        } else {\n            title = bundle.getString(\"Logs\");\n        }\n\n        header.setTitle(title);\n        setTitle(title);\n    }\n", "void setPerspShadowMatrix(Matrix4f modelMtx, GVRLight light)\n    {\n        GVRPerspectiveCamera camera = (GVRPerspectiveCamera) getCamera();\n\n        if (camera == null)\n        {\n            return;\n        }\n        float angle = light.getFloat(\"outer_cone_angle\");\n        float near = camera.getNearClippingDistance();\n        float far = camera.getFarClippingDistance();\n\n        angle = (float) Math.acos(angle) * 2.0f;\n        modelMtx.invert();\n        modelMtx.get(mTempMtx);\n        camera.setViewMatrix(mTempMtx);\n        camera.setFovY((float) Math.toDegrees(angle));\n        mShadowMatrix.setPerspective(angle, 1.0f, near, far);\n        mShadowMatrix.mul(modelMtx);\n        sBiasMatrix.mul(mShadowMatrix, mShadowMatrix);\n        mShadowMatrix.getColumn(0, mTemp);\n        light.setVec4(\"sm0\", mTemp.x, mTemp.y, mTemp.z, mTemp.w);\n        mShadowMatrix.getColumn(1, mTemp);\n        light.setVec4(\"sm1\", mTemp.x, mTemp.y, mTemp.z, mTemp.w);\n        mShadowMatrix.getColumn(2, mTemp);\n        light.setVec4(\"sm2\", mTemp.x, mTemp.y, mTemp.z, mTemp.w);\n        mShadowMatrix.getColumn(3, mTemp);\n        light.setVec4(\"sm3\", mTemp.x, mTemp.y, mTemp.z, mTemp.w);\n    }", "protected void setFunctionDirectory(List<Resource> listFunctionDirectory) {\n\tIterator<Resource> it = listFunctionDirectory.iterator();\n\tint index = -1;\n\tString mappingName;\n\tResource functionDirectory;\n\tboolean isDefault;\n\twhile (it.hasNext()) {\n\t    functionDirectory = it.next();\n\t    index++;\n\t    isDefault = index == 0;\n\t    mappingName = \"/mapping-function\" + (isDefault ? \"\" : index) + \"\";\n\t    MappingImpl mapping = new MappingImpl(this, mappingName, functionDirectory.getAbsolutePath(), null, ConfigImpl.INSPECT_NEVER, true, true, true, true, false, true, null,\n\t\t    -1, -1);\n\t    if (isDefault) defaultFunctionMapping = mapping;\n\t    this.functionMappings.put(mappingName, mapping);\n\n\t    FunctionLib flc = cfmlFlds[cfmlFlds.length - 1];\n\t    FunctionLib fll = luceeFlds[luceeFlds.length - 1];\n\n\t    // now overwrite with new data\n\t    if (functionDirectory.isDirectory()) {\n\t\tString[] files = functionDirectory.list(new ExtensionResourceFilter(Constants.getTemplateExtensions()));\n\n\t\tfor (String file: files) {\n\t\t    if (flc != null) createFunction(flc, file, mappingName);\n\t\t    if (fll != null) createFunction(fll, file, mappingName);\n\t\t}\n\t\tcombinedCFMLFLDs = null;\n\t\tcombinedLuceeFLDs = null;\n\t    }\n\t}\n    }", "@Override public void onSurfaceCreated(EGLConfig config){\n  Log.i(TAG,\"onSurfaceCreated\");\n  GLES20.glClearColor(0.1f,0.1f,0.1f,0.5f);\n  ByteBuffer bbVertices=ByteBuffer.allocateDirect(WorldLayoutData.CUBE_COORDS.length * 4);\n  bbVertices.order(ByteOrder.nativeOrder());\n  cubeVertices=bbVertices.asFloatBuffer();\n  cubeVertices.put(WorldLayoutData.CUBE_COORDS);\n  cubeVertices.position(0);\n  ByteBuffer bbColors=ByteBuffer.allocateDirect(WorldLayoutData.CUBE_COLORS.length * 4);\n  bbColors.order(ByteOrder.nativeOrder());\n  cubeColors=bbColors.asFloatBuffer();\n  cubeColors.put(WorldLayoutData.CUBE_COLORS);\n  cubeColors.position(0);\n  ByteBuffer bbFoundColors=ByteBuffer.allocateDirect(WorldLayoutData.CUBE_FOUND_COLORS.length * 4);\n  bbFoundColors.order(ByteOrder.nativeOrder());\n  cubeFoundColors=bbFoundColors.asFloatBuffer();\n  cubeFoundColors.put(WorldLayoutData.CUBE_FOUND_COLORS);\n  cubeFoundColors.position(0);\n  ByteBuffer bbNormals=ByteBuffer.allocateDirect(WorldLayoutData.CUBE_NORMALS.length * 4);\n  bbNormals.order(ByteOrder.nativeOrder());\n  cubeNormals=bbNormals.asFloatBuffer();\n  cubeNormals.put(WorldLayoutData.CUBE_NORMALS);\n  cubeNormals.position(0);\n  ByteBuffer bbFloorVertices=ByteBuffer.allocateDirect(WorldLayoutData.FLOOR_COORDS.length * 4);\n  bbFloorVertices.order(ByteOrder.nativeOrder());\n  floorVertices=bbFloorVertices.asFloatBuffer();\n  floorVertices.put(WorldLayoutData.FLOOR_COORDS);\n  floorVertices.position(0);\n  ByteBuffer bbFloorNormals=ByteBuffer.allocateDirect(WorldLayoutData.FLOOR_NORMALS.length * 4);\n  bbFloorNormals.order(ByteOrder.nativeOrder());\n  floorNormals=bbFloorNormals.asFloatBuffer();\n  floorNormals.put(WorldLayoutData.FLOOR_NORMALS);\n  floorNormals.position(0);\n  ByteBuffer bbFloorColors=ByteBuffer.allocateDirect(WorldLayoutData.FLOOR_COLORS.length * 4);\n  bbFloorColors.order(ByteOrder.nativeOrder());\n  floorColors=bbFloorColors.asFloatBuffer();\n  floorColors.put(WorldLayoutData.FLOOR_COLORS);\n  floorColors.position(0);\n  int vertexShader=loadGLShader(GLES20.GL_VERTEX_SHADER,R.raw.light_vertex);\n  int gridShader=loadGLShader(GLES20.GL_FRAGMENT_SHADER,R.raw.grid_fragment);\n  int passthroughShader=loadGLShader(GLES20.GL_FRAGMENT_SHADER,R.raw.passthrough_fragment);\n  cubeProgram=GLES20.glCreateProgram();\n  GLES20.glAttachShader(cubeProgram,vertexShader);\n  GLES20.glAttachShader(cubeProgram,passthroughShader);\n  GLES20.glLinkProgram(cubeProgram);\n  GLES20.glUseProgram(cubeProgram);\n  checkGLError(\"Cube program\");\n  cubePositionParam=GLES20.glGetAttribLocation(cubeProgram,\"a_Position\");\n  cubeNormalParam=GLES20.glGetAttribLocation(cubeProgram,\"a_Normal\");\n  cubeColorParam=GLES20.glGetAttribLocation(cubeProgram,\"a_Color\");\n  cubeModelParam=GLES20.glGetUniformLocation(cubeProgram,\"u_Model\");\n  cubeModelViewParam=GLES20.glGetUniformLocation(cubeProgram,\"u_MVMatrix\");\n  cubeModelViewProjectionParam=GLES20.glGetUniformLocation(cubeProgram,\"u_MVP\");\n  cubeLightPosParam=GLES20.glGetUniformLocation(cubeProgram,\"u_LightPos\");\n  GLES20.glEnableVertexAttribArray(cubePositionParam);\n  GLES20.glEnableVertexAttribArray(cubeNormalParam);\n  GLES20.glEnableVertexAttribArray(cubeColorParam);\n  checkGLError(\"Cube program params\");\n  floorProgram=GLES20.glCreateProgram();\n  GLES20.glAttachShader(floorProgram,vertexShader);\n  GLES20.glAttachShader(floorProgram,gridShader);\n  GLES20.glLinkProgram(floorProgram);\n  GLES20.glUseProgram(floorProgram);\n  checkGLError(\"Floor program\");\n  floorModelParam=GLES20.glGetUniformLocation(floorProgram,\"u_Model\");\n  floorModelViewParam=GLES20.glGetUniformLocation(floorProgram,\"u_MVMatrix\");\n  floorModelViewProjectionParam=GLES20.glGetUniformLocation(floorProgram,\"u_MVP\");\n  floorLightPosParam=GLES20.glGetUniformLocation(floorProgram,\"u_LightPos\");\n  floorPositionParam=GLES20.glGetAttribLocation(floorProgram,\"a_Position\");\n  floorNormalParam=GLES20.glGetAttribLocation(floorProgram,\"a_Normal\");\n  floorColorParam=GLES20.glGetAttribLocation(floorProgram,\"a_Color\");\n  GLES20.glEnableVertexAttribArray(floorPositionParam);\n  GLES20.glEnableVertexAttribArray(floorNormalParam);\n  GLES20.glEnableVertexAttribArray(floorColorParam);\n  checkGLError(\"Floor program params\");\n  Matrix.setIdentityM(modelFloor,0);\n  Matrix.translateM(modelFloor,0,0,-floorDepth,0);\n  updateModelPosition();\n  mVideoRenderer=new VideoRenderer(this);\n  mVideoRenderer.setup();\n  mVideoRenderer.start();\n  Matrix.setIdentityM(videoScreenModelMatrix,0);\n  float screenSize=2;\n  float aspectRatio=16f / 9f;\n  Matrix.scaleM(videoScreenModelMatrix,0,screenSize,screenSize / aspectRatio,1);\n  Matrix.translateM(videoScreenModelMatrix,0,0.0f,0.0f,-4.0f);\n  checkGLError(\"onSurfaceCreated\");\n}\n", "    public void actionPerformed(ActionEvent e) {\n        GGGraph graph = gograph.getGraph();\n        if (!graph.isSelectionEmpty()) {\n            Set edges;\n            Object[] cells = graph.getSelectionCells();\n            for (int i=0; i<cells.length; i++)\n                if (cells[i] == ((GGModel)graph.getModel()).getInitial()) {\n                    ((GGModel)graph.getModel()).setInitial(null);\n                    break;\n                }\n            cells = graph.getDescendants(cells);                    \n            edges = GGModel.getEdges(graph.getModel(), cells);\n            graph.getModel().remove(edges.toArray());                                                    \n            graph.getModel().remove(cells);\n        }        \n    }    \n", "public long freeMemory(){\n  return freeMemoryImpl();\n}\n", "public static Geometry readWKTString(String wkt,GeometryFactory geomFact) throws ParseException, IOException {\n  WKTReader reader=new WKTReader(geomFact);\n  WKTFileReader fileReader=new WKTFileReader(new StringReader(wkt),reader);\n  List geomList=fileReader.read();\n  if (geomList.size() == 1)   return (Geometry)geomList.get(0);\n  return geomFact.createGeometryCollection(GeometryFactory.toGeometryArray(geomList));\n}\n", "@Override\n    public Request<GetPasswordDataRequest> getDryRunRequest() {\n        Request<GetPasswordDataRequest> request = new GetPasswordDataRequestMarshaller().marshall(this);\n        request.addParameter(\"DryRun\", Boolean.toString(true));\n        return request;\n    }", "  protected void cycleRaster0() {\n    // section 3.7.2. VC and RC\n    // \"1. Once somewhere outside of the range of raster lines $30-$F7 (i.e.\n    // outside of the Bad Line range), VCBASE is reset to zero. This is\n    // presumably done in raster line 0, the exact moment cannot be determined\n    // and is irrelevant.\"\n\n    // section 3.13. DRAM refresh\n    // \"... The counter is reset to $ff in raster line 0 ...\"\n\n    if ((raster==0) && (cycle==1)) {               // is raster line 0?\n      VCBase=0;                                    // set VCBASE to 0\n      REF=0xFF;                                    // init refresh address\n    }\n  }\n", "public abstract void recover ( InputStream in ) throws Exception ;", "public int idRangeOffsetLocation ( int segment ) { isValidIndex ( segment ) ; return idRangeOffsetOffset ( this . segCount ) + segment * FontData . DataSize . USHORT . size ( ) ; }", "private Vector stringToTLATokens(String token){\n  Vector result=new Vector(3);\n  String trimmedToken=token.trim();\n  int numberOfLeftTrimmedTokens=(trimmedToken.length() == 0) ? -1 : token.indexOf(trimmedToken.charAt(0));\n  if (numberOfLeftTrimmedTokens == -1) {\n    numberOfLeftTrimmedTokens=0;\n    trimmedToken=token;\n  }\n  int objBegin=numberOfLeftTrimmedTokens;\n  result.addElement(new MappingObject.BeginTLAToken(objBegin));\n  result.addElement(new MappingObject.EndTLAToken(objBegin + trimmedToken.length()));\n  return result;\n}\n", "    public boolean isCy5laserpowerModified() {\n        return cy5laserpower_is_modified; \n    }\n", "public void addArrayIdentity(String array, String... identities) {\n        arrayIdentities.put(array, new ArrayIdentityFields(identities));\n    }", " public Object processChars(char[] pattern, char w) {\n  int j = 0;\n  int end = pattern.length < 32 ? pattern.length : 32;\n\n  for (int i = 0; i < end; ++i) {\n   if (pattern[i] == w) {\n    j |= (1 << end - i - 1);\n   }\n  }\n\n  CharIntMap b = createCharIntMap(pattern, j);\n\n  j = 1;\n  for (int i = end - 1; i >= 0; --i, j <<= 1) {\n   b.set(pattern[i], b.get(pattern[i]) | j);\n  }\n\n  return b;\n }\n", "public ParameterConstraints withAllowedValues(String... allowedValues) {\n        if (this.allowedValues == null) {\n            setAllowedValues(new com.amazonaws.internal.SdkInternalList<String>(allowedValues.length));\n        }\n        for (String ele : allowedValues) {\n            this.allowedValues.add(ele);\n        }\n        return this;\n    }", "public static IceControlledAttribute createIceControlledAttribute ( long tieBreaker ) { IceControlledAttribute attribute = new IceControlledAttribute ( ) ; attribute . setTieBreaker ( tieBreaker ) ; return attribute ; }", "public String pullRequestUrl(String account,String collection,String projectName,String repositoryName,String pullRequestId){\n  Objects.requireNonNull(projectName,\"Project name required\");\n  Objects.requireNonNull(repositoryName,\"Repository name required\"", "public CNaviViewNode ( final int nodeId , final double x , final double y , final double width , final double height , final Color color , final Color borderColor , final boolean selected , final boolean visible , final Set < CTag > tags , final SQLProvider provider ) { super ( nodeId , x , y , width , height , color , borderColor , selected , visible ) ; m_provider = Preconditions . checkNotNull ( provider , STR_ ) ; m_tags = new HashSet < CTag > ( Preconditions . checkNotNull ( tags , STR_ ) ) ; for ( final CTag tag : m_tags ) { tag . addListener ( m_tagListener ) ; } }", "public String method ( ) { return getConnection ( ) . getRequestMethod ( ) ; }", "\tpublic boolean canMoveDown(PlayableLevel level) {\n\t\t// check for solid blocks above\n\t\tFloatPoint p = getPosition();\n\t\tfloat y = p.y+getHeight();\n\t\t// check all blocks along the bottom edge\n\t\tfor(float x = p.x; x < p.x+getWidth(); x++) {\n\t\t\tPlayableBlock block = level.getBlockAtPixel(x, y);\n\t\t\tif(block == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(block.getProperties().getType().getClass().equals(Barrier.class)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n", "protected void dispatch ( Throwable object , boolean child ) { if ( object instanceof CompilationFailedException ) { report ( ( CompilationFailedException ) object , child ) ; } else if ( object instanceof GroovyExceptionInterface ) { report ( ( GroovyExc", "private int calculate8BitChecksum(String infoString){\n  int len=infoString.length();\n  if (((len + 1) / 2) != (len / 2)) {\n    return -1;\n  }\n  int calculatedChecksum=0;\n  for (int i=0; i < len; i+=2) {\n    calculatedChecksum+=Integer.parseInt(infoString.substring(i,i + 2),16);\n  }\n  return (0xFF & (0x100 - (calculatedChecksum & 0xFF)));\n}\n", "    public int hashCode() {\n        return key.intValue();\n    }\n", "    public JPanel getUI(JDialog parent, CyNetwork network) {\n        DiscreteUI ui = new DiscreteUI (parent, network ,attrName, defaultObj,\n                mapType, this);\n        return ui;\n    }\n", "public static <T,U extends InputStream>T withStream(U stream,@ClosureParams(value=FirstParam.class) Closure<T> closure) throws IOException {\n  try {\n    T result=closure.call(stream);\n    InputStream temp=stream;\n    stream=null;\n    temp.close();\n    return result;\n  }\n  finally {\n    closeWithWarning(stream);\n  }\n}\n", "public void addCustomTickLabel(final String TICK_LABEL){\n  if (null == TICK_LABEL)   return;\n  if (!customTickLabels.contains(TICK_LABEL))   customTickLabels.add(TICK_LABEL);\n  fireUpdateEvent(REDRAW_EVENT);\n}\n", "    public void update() {\n        super.update();\n        wheel.drawBall();\n        getRecordTable().append(\"\\t\" + wheel.getLabel() + \"\\t\" + win);\n        winGraph.repaint();\n        winTable.update();\n    }\n", "void put ( final ByteVector out ) { int n = NUM_ ; int size = NUM_ ; AnnotationWriter aw = this ; AnnotationWriter last = null ; while ( aw != null ) { ++ n ; size += aw . bv . length ; aw . visitEnd ( ) ; aw . prev = last ; last = aw ; aw = aw . next ; } out . putInt ( size ) ; out . putShort ( n ) ; aw = last ; while ( aw != null ) { out . putByteArray ( aw . bv . data , NUM_ , aw . bv . length ) ; aw = aw . prev ; } }", "    public boolean renameTo(Folder f) throws MessagingException {\n\tthrow new MethodNotSupportedException(\"renameTo\");\n    }\n", "public static byte[] secureRandomBytes(int len){\n  if (len <= 0) {\n    len=1;\n  }\n  byte[] buff=new byte[len];\n  SecureRandom sr=getSecureRandom();\nsynchronized (sr) {\n    sr.nextBytes(buff);\n  }\n  return buff;\n}\n", "private void writeObject(java.io.ObjectOutputStream s) throws IOException {\n  TextComponentPeer peer=(TextComponentPeer)this.peer;\n  if (peer != null) {\n    text=peer.getText();\n    selectionStart=peer.getSelectionStart();\n    selectionEnd=peer.getSelectionEnd();\n  }\n  s.defaultWriteObject();\n  AWTEventMulticaster.save(s,textListenerK,textListener);\n  s.writeObject(null);\n}\n", "    public ArrayList getTableList() {\n        if(tableList.isEmpty()) {\n            makeTableList();\n        }\n        return tableList;\n    }\n", "private static char[] zzUnpackCMap(String packed){\n  char[] map=new char[0x10000];\n  int i=0;\n  int j=0;\n  while (i < 256) {\n    int count=packed.charAt(i++);\n    char value=packed.charAt(i++);\n    do     map[j++]=value;\n while (--count > 0);\n  }\n  return map;\n}\n", "@Override public int hashCode(){\n  return name.hashCode();\n}\n", "public static Float toNullableFloat(Object value) {\n\t\tDouble result = DoubleConverter.toNullableDouble(value);\n\t\treturn result != null ? (float) ((double) result) : null;\n\t}", "public void load(InputStream in) throws IOException {\n\n\tBufferedReader input = IOUtil.toBufferedReader(new InputStreamReader(in));\n\tString read;\n\tMap section = null;\n\tString sectionName;\n\twhile ((read = input.readLine()) != null) {\n\t    if (read.startsWith(\";\") || read.startsWith(\"#\")) {\n\t\tcontinue;\n\t    }\n\t    else if (read.startsWith(\"[\")) {\n\t\t// new section\n\t\tsectionName = read.substring(1, read.indexOf(\"]\")).trim().toLowerCase();\n\t\tsection = getSectionEL(sectionName);\n\t\tif (section == null) {\n\t\t    section = newMap();\n\t\t    sections.put(sectionName, section);\n\t\t}\n\t    }\n\t    else if (read.indexOf(\"=\") != -1 && section != null) {\n\t\t// new key\n\t\tString key = read.substring(0, read.indexOf(\"=\")).trim().toLowerCase();\n\t\tString value = read.substring(read.indexOf(\"=\") + 1).trim();\n\t\tsection.put(key, value);\n\t    }\n\t}\n\n    }", "public static ParsedScheduleExpression parse(ScheduleExpression expr)\n    {\n        ParsedScheduleExpression parsedExpr = new ParsedScheduleExpression(expr);\n        parse(parsedExpr);\n        return parsedExpr;\n    }", "\tpublic void addClassPath(String[] cp) {\n\t\tint i = 0;\n\t\twhile (i < cp.length) addClassPath(cp[i++]);\n\t}\n", "private List<Entity> listNetwork(int connID,Entity e,boolean planned){\n  List<Entity> novaNetworkMembers=new LinkedList<Entity>();\n  List<Entity> novaUnits=getMyNovaUnits(connID);\n  for (  Entity ent : novaUnits) {\n    if (planned) {\n      if (ent.getNewR", "public void processAttributes(java.io.Writer writer,int nAttrs) throws IOException, SAXException {\n  String encoding=getEncoding();\n  for (int i=0; i < nAttrs; i++) {\n    final String name=m_attributes.getQName(i);\n    final String value=m_attributes.getValue(i);\n    writer.write(' ');\n    writer.write(name);\n    writer.write(\"=\\\"\");\n    writeAttrString(writer,value,encoding);\n    writer.write('\\\"');\n  }\n}\n", "public ResourceEnvRefType<MessageDrivenBeanType<T>> getOrCreateResourceEnvRef()\n   {\n      List<Node> nodeList = childNode.get(\"resource-env-ref\");\n      if (nodeList != null &&  nodeList.size() > 0)\n      {\n         return new ResourceEnvRefTypeImpl<MessageDrivenBeanType<T>>(this, \"resource-env-ref\", childNode, nodeList.get(0));\n      }\n      return createResourceEnvRef();\n   }", "public ProxyReader ( Reader proxy ) { super ( proxy ) ; }", "@DebugLog public static void checkDownloadedLanguage(Context context,ServerUtil serverUtil,boolean forceDownload,boolean fromService){\n  SharedPrefUtil mSharedPrefs=new SharedPrefUtil(context);\n  String downloadedLanguage=mSharedPrefs.getDownloadedLanguage();\n  String activeLanguage=UsefulBits.getActiveLanguage(context);\n  if (serverUtil == null)   serverUtil=new ServerUtil(context);\n  if (mSharedPrefs.getSavedLanguage() == null || forceDownload) {\n    Log.d(TAG,\"Downloading language files. Forced: \" + forceDownload);\n    mSharedPrefs.getLanguageStringsFromServer(activeLanguage.toLowerCase(),serverUtil);\n    if (mSharedPrefs.isDebugEnabled()) {\n      if (forceDownload && !fromService) {\n        showSimpleToast(context,\"Language files downloaded because it was forced\",Toast.LENGTH_SHORT);\n      }\n else       if (!fromService)       showSimpleToast(context,\"Language files downloaded because there were none\",Toast.LENGTH_SHORT);\n    }\n  }\n else {\n    long dateMillis=mSharedPrefs.getSavedLanguageDate();\n    String dateStr=UsefulBits.getFormattedDate(context,dateMillis);\n    Log.d(TAG,\"Language files are dated: \" + dateStr);\n    if (mSharedPrefs.isDebugEnabled() && !fromService)     showSimpleToast(context,\"Language files are dated: \" + dateStr,Toast.LENGTH_SHORT);\n    if (!downloadedLanguage.equalsIgnoreCase(activeLanguage)) {\n      if (mSharedPrefs.isDebugEnabled() && !fromService)       showSimpleToast(context,\"Downloaded language files did not match the preferred language\",Toast.LENGTH_SHORT);\n      Log.d(TAG,\"Downloaded language files did not match the preferred language:\" + newLine() + \"Current downloaded language: \"+ downloadedLanguage+ newLine()+ \"Active language: \"+ activeLanguage+ newLine()+ \"Downloading the correct language\");\n      mSharedPrefs.getLanguageStringsFromServer(activeLanguage.toLowerCase(),serverUtil);\n    }\n  }\n}\n", "@Provides\n    @Named(JanusConfig.DEFAULT_CONTEXT_ID_NAME)\n    public static UUID getContextID() {\n        String str = JanusConfig.getSystemProperty(JanusConfig.DEFAULT_CONTEXT_ID_NAME);\n        if (Strings.isNullOrEmpty(str)) {\n            Boolean v;\n\n            // From boot agent type\n            str = JanusConfig.getSystemProperty(JanusConfig.BOOT_DEFAULT_CONTEXT_ID_NAME);\n            if (Strings.isNullOrEmpty(str)) {\n                v = JanusConfig.BOOT_DEFAULT_CONTEXT_ID_VALUE;\n            } else {\n                v = Boolean.valueOf(Boolean.parseBoolean(str));\n            }\n            if (v.booleanValue()) {\n                final String bootClassname = JanusConfig.getSystemProperty(JanusConfig.BOOT_AGENT);\n                str = UUID.nameUUIDFromBytes(bootClassname.getBytes()).toString();\n            } else {\n                // Random\n                str = JanusConfig.getSystemProperty(JanusConfig.RANDOM_DEFAULT_CONTEXT_ID_NAME);\n                if (Strings.isNullOrEmpty(str)) {\n                    v = JanusConfig.RANDOM_DEFAULT_CONTEXT_ID_VALUE;\n                } else {\n                    v = Boolean.valueOf(Boolean.parseBoolean(str));\n                }\n                if (v.booleanValue()) {\n                    str = UUID.randomUUID().toString();\n                } else {\n                    str = JanusConfig.DEFAULT_CONTEXT_ID_VALUE;\n                }\n            }\n\n            // Force the global value of the property to prevent to re-generate the UUID at the next call.\n            System.setProperty(JanusConfig.DEFAULT_CONTEXT_ID_NAME, str);\n        }\n\n        assert !Strings.isNullOrEmpty(str);\n        return UUID.fromString(str);\n    }", "public void reissue(String resourceGroupName, String certificateOrderName, ReissueCertificateOrderRequest reissueCertificateOrderRequest) {\n        reissueWithServiceResponseAsync(resourceGroupName, certificateOrderName, reissueCertificateOrderRequest).toBlocking().single().body();\n    }", "private CGlobalSettings ( ) { }", "\tprivate void exitApplication(int code) {\n\t\tif (!isScriptVm()) {\n\t\t\tSystem.exit(code);\n\t\t} else {\n\t\t\tif (isStatusWindow()) {\n\t\t\t\tshowStatusWindow(code);\n\t\t\t} else {\n\t\t\t\tSystem.exit(code);\n\t\t\t}\n\t\t}\n\t}\n", "\tprotected void fireOnAfterGetEvent(K key, V value) {\n\t\tif (this.onAfterGetEvent != null) {\n\t\t\tthis.onAfterGetEvent.fire(new ActionEventAfter_1x0<Map.Entry<K, V>>(this, 0, CM_AFTER_PUT, new EntryImpl_1x0<K, V>(key, value)));\n\t\t}\n\t}\n", "public void accept ( final ClassVisitor cv ) { String [ ] exceptions = new String [ this . exceptions . size ( ) ] ; this . exceptions . toArray ( exceptions ) ; MethodVisitor mv = cv . visitMethod ( access , name , desc , signature , exceptions ) ; if ( ", "\tstatic private void setUI() {\n\t\t// native look & feel\n\t\ttry {\n\t\t\tString noLF = \"javax.swing.plaf.metal.MetalLookAndFeel\";\n\t\t\tString lf = UIManager.getSystemLookAndFeelClassName();\n\t\t\tif (lf.equals(noLF))\n\t\t\t\tlf = \"com.sun.java.swing.plaf.gtk.GTKLookAndFeel\";\n\t\t\tUIManager.setLookAndFeel(lf);\n\t\t} catch (InstantiationException e) {\n\t\t} catch (ClassNotFoundException e) {\n\t\t} catch (UnsupportedLookAndFeelException e) {\n\t\t} catch (IllegalAccessException e) {\n\t\t}\n\t}\n", "public void onGetMessageFromWXReq ( WXMediaMessage msg ) { Intent iLaunchMyself = getPackageManager ( ) . getLaunchIntentForPackage ( getPackageName ( ) ) ; startActivity ( iLaunchMyself ) ; }", "public void printf(String format,Object... args){\n  out.printf(LOCALE,format,args);\n  out.flush();\n}\n", "    public EasCapArea addArea() {\n        while (hasNextArea()) {\n            try {\n                getNextArea();\n            } catch (Exception e) {\n            }\n        } // move to end of list\n        EasCapArea area = new EasCapArea();\n        areasListIterator.add(area);\n        return area;\n    }\n", "private void zero ( ) throws JSONException { if ( probe ) { log ( NUM_ ) ; } write ( NUM_ , NUM_ ) ; }", "public static Predicate<Class<?>> named(final String name) {\n        return clazz -> clazz.getName().equals(name);\n    }", "public static CmsSlideAnimation slideIn(Element element, Command callback, int duration) {\n\n        CmsSlideAnimation animation = new CmsSlideAnimation(element, true, callback);\n        animation.run(duration);\n        return animation;\n    }", "public String diff_toDelta(LinkedList<Diff> diffs) {\n        StringBuilder text = new StringBuilder();\n        for (Diff aDiff : diffs) {\n            switch (aDiff.operation) {\n            case INSERT:\n                try {\n                    text.append(\"+\")\n                            .append(URLEncoder.encode(aDiff.text, \"UTF-8\")\n                                    .replace('+', ' ')).append(\"\\t\");\n                } catch (UnsupportedEncodingException e) {\n                    // Not likely on modern system.\n                    throw new Error(\"This system does not support UTF-8.\", e);\n                }\n                break;\n            case DELETE:\n                text.append(\"-\").append(aDiff.text.length()).append(\"\\t\");\n                break;\n            case EQUAL:\n                text.append(\"=\").append(aDiff.text.length()).append(\"\\t\");\n                break;\n            }\n        }\n        String delta = text.toString();\n        if (delta.length() != 0) {\n            // Strip off trailing tab character.\n            delta = delta.substring(0, delta.length() - 1);\n            delta = unescapeForEncodeUriCompatability(delta);\n        }\n        return delta;\n    }", "public Future < Long > inactiveCount ( String type ) { Future < Long > future = Future . future ( ) ; jobService . inactiveCount ( type , future . completer ( ) ) ; return future ; }", "private static int colToLoc(int col,Vector<MappingPair> vec){\n  int loc=col;\n  for (int i=0; (i < vec.size()) && (vec.elementAt(i).col <= col); i++) {\n    loc=loc + vec.elementAt(i).inc;\n  }\n  return loc;\n}\n", "private Watcher initWatcher(SolrZkClient zkClient){\n  wrappedWatcher=new LeaderStateWatcher();\n  return zkClient.wrapWatcher(wrappedWatcher);\n}\n", "public Object parse ( char [ ] chars ) { if ( chars == null ) { throw new IllegalArgumentException ( STR_ ) ; } Object content ; content = createParser ( ) . parse ( chars ) ; return content ; }", "public void draw ( Canvas c , Rect bounds ) { final RectF arcBounds = mTempBounds ; arcBounds . set ( bounds ) ; arcBounds . inset ( mStrokeInset , mStrokeInset ) ; final float startAngle = ( mStartTrim + mRotation ) * NUM_ ; final float endAngle = ( mEnd", "public void shuffle(){\n  Collections.shuffle(rowData);\n  fireTableDataChanged();\n}\n", "@Override public void trim(MemoryTrimType trimType){\n  if (!mSemaphore.tryAcquire()) {\n    return;\n  }\n  try {\n    mByteArraySoftRef.clear();\n  }\n  finally {\n    mSemaphore.release();\n  }\n}\n", "public static <T>int lowerBound(final List<T> valueList,int fromIdx,int toIdx,final Comparable<T> value){\n  int len=toIdx - fromIdx + (toIdx > fromIdx ? 1 : 0);\n  int from=fromIdx;\n  int half;\n  int middle;\n  while (len > 0) {\n    half=len >> 1;\n    middle=from;\n    middle=middle + half;\n    if (value.compareTo(valueList.get(middle)) == 1) {\n      from=middle;\n      from++;\n      len=len - half - 1;\n    }\n else {\n      len=half;\n    }\n  }\n  return from;\n}\n", "@Override public synchronized void removeTrainingSetListener(TrainingSetListener tsl){\n  m_listeners.removeElement(tsl);\n}\n", "void onBoardAlpha ( NotificationBoard board , float alpha ) ;", "private String expandLHS(final String lhs,\n                             int lineOffset) {\n        substitutions = new ArrayList<Map<String, String>>();\n\n        //        logger.info( \"*** LHS>\" + lhs + \"<\" );\n        final StringBuilder buf = new StringBuilder();\n        \n        final String[] lines = lhs.split( (lhs.indexOf(\"\\r\\n\") >= 0 ? \"\\r\\n\":\"\\n\"),\n                                          -1 ); // since we assembled the string, we know line breaks are \\n\n        final String[] expanded = new String[lines.length]; // buffer for expanded lines\n        int lastExpanded = -1;\n        int lastPattern = -1;\n        for ( int i = 0; i < lines.length - 1; i++ ) {\n            final String trimmed = lines[i].trim();\n            expanded[++lastExpanded] = lines[i];\n\n            if ( trimmed.length() == 0 || trimmed.startsWith( \"#\" ) || trimmed.startsWith( \"//\" ) ) {\n                // comments - do nothing\n            } else if ( trimmed.startsWith( \">\" ) ) {\n                // passthrough code - simply remove the passthrough mark character\n                expanded[lastExpanded] = lines[i].replaceFirst( \">\",\n                                                                \" \" );\n                lastPattern = lastExpanded;\n            } else {\n                // regular expansion - expand the expression\n                expanded[lastExpanded] =\n                        substitute( expanded[lastExpanded],\n                                    this.condition,\n                                    i + lineOffset,\n                                    useWhen,\n                                    showSteps );\n\n                // do we need to report errors for that?\n                if ( lines[i].equals( expanded[lastExpanded] ) ) {\n                    // report error\n                    this.addError( new ExpanderException( \"Unable to expand: \" + lines[i].replaceAll( \"[\\n\\r]\",\n                                                                                                      \"\" ).trim(),\n                                                          i + lineOffset ) );\n                }\n                // but if the original starts with a \"-\", it means we need to add it\n                // as a constraint to the previous pattern\n                if ( trimmed.startsWith( \"-\" ) && (!lines[i].equals( expanded[lastExpanded] )) ) {\n                    if ( lastPattern >= 0 ) {\n                        ConstraintInformation c = ConstraintInformation.findConstraintInformationInPattern( expanded[lastPattern] );\n                        if ( c.start > -1 ) {\n                            // rebuilding previous pattern structure\n                            expanded[lastPattern] = expanded[lastPattern].substring( 0,\n                                                                                     c.start ) + c.constraints + ((c.constraints.trim().length() == 0) ? \"\" : \", \") + expanded[lastExpanded].trim() + expanded[lastPattern].substring( c.end );\n                        } else {\n                            // error, pattern not found to add constraint to\n                            this.addError( new ExpanderException( \"No pattern was found to add the constraint to: \" + lines[i].trim(),\n                                                                  i + lineOffset ) );\n                        }\n                    }\n                    lastExpanded--;\n                } else {\n                    lastPattern = lastExpanded;\n                }\n            }\n        }\n        for ( int i = 0; i <= lastExpanded; i++ ) {\n            buf.append( expanded[i] );\n            buf.append( nl );\n        }\n\n        return buf.toString();\n    }", "\tpublic void sendMessage(String message){\n\t\t$connection.write(message);\n\t\tlog.debug(\"Send to player (\" + $name + \"): \" + message);\n\t}\n", "    public EndpointReferenceType mint(QName serviceName) {\n        EndpointReferenceType logical = null;\n        for (EndpointResolver resolver : resolvers) {\n            logical = resolver.mint(serviceName);\n            if (logical != null) {\n                break;\n            }\n        }\n        return logical;\n    }\n", "    public void setVisible(boolean visible) {\n        if (visible) {\n            alternateNameTextField.requestFocus();\n            getRootPane().setDefaultButton(okButton);\n        }\n        super.setVisible(visible);\n    }\n", "public void marshall(GetResourceConfigHistoryRequest getResourceConfigHistoryRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (getResourceConfigHistoryRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(getResourceConfigHistoryRequest.getResourceType(), RESOURCETYPE_BINDING);\n            protocolMarshaller.marshall(getResourceConfigHistoryRequest.getResourceId(), RESOURCEID_BINDING);\n            protocolMarshaller.marshall(getResourceConfigHistoryRequest.getLaterTime(), LATERTIME_BINDING);\n            protocolMarshaller.marshall(getResourceConfigHistoryRequest.getEarlierTime(), EARLIERTIME_BINDING);\n            protocolMarshaller.marshall(getResourceConfigHistoryRequest.getChronologicalOrder(), CHRONOLOGICALORDER_BINDING);\n            protocolMarshaller.marshall(getResourceConfigHistoryRequest.getLimit(), LIMIT_BINDING);\n            protocolMarshaller.marshall(getResourceConfigHistoryRequest.getNextToken(), NEXTTOKEN_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public static <T>ImmutableList<SonarField<T>> findFieldsWithType(Class<?> clazz,Class<T> fieldType){\n  Preconditions.checkNotNull(clazz,\"Null class\");\n  Preconditions.checkNotNull(fieldType,\"Null type\");\n  ImmutableList.Builder<SonarField<T>> builder=ImmutableList.builder();\n  for (  Field field : clazz.getDeclaredFields()) {\n    if (Reflection.isLenientlyAssignableFrom(fieldType,field.getType())) {\n      builder.add(new SonarField<T>(field));\n    }\n  }\n  return builder.build();\n}\n", "public int writeBytes ( int index , byte [ ] b ) { return this . writeBytes ( index , b , NUM_ , b . length ) ; }", "public static List<String> toPathParts(String encodedPath) {\n    if (encodedPath == null || encodedPath.length() == 0) {\n      return null;\n    }\n    List<String> result = new ArrayList<String>();\n    int cur = 0;\n    boolean notDone = true;\n    while (notDone) {\n      int slash = encodedPath.indexOf('/', cur);\n      notDone = slash != -1;\n      String sub;\n      if (notDone) {\n        sub = encodedPath.substring(cur, slash);\n      } else {\n        sub = encodedPath.substring(cur);\n      }\n      result.add(CharEscapers.decodeUri(sub));\n      cur = slash + 1;\n    }\n    return result;\n  }", "    public int indexOfChild(View child) {\n        final int count = mChildrenCount;\n        final View[] children = mChildren;\n        for (int i = 0; i < count; i++) {\n            if (children[i] == child) {\n                return i;\n            }\n        }\n        return -1;\n    }\n", "public java.lang.String getBetaSettingsOrDefault(\n      java.lang.String key,\n      java.lang.String defaultValue) {\n    if (key == null) { throw new java.lang.NullPointerException(); }\n    java.util.Map<java.lang.String, java.lang.String> map =\n        internalGetBetaSettings().getMap();\n    return map.containsKey(key) ? map.get(key) : defaultValue;\n  }", "@Override public void addFactoryLink(String factoryUrl){\n  Optional<String> jobConfigXml=getCurrentJenkinsJobConfiguration();\n  jobConfigXml.ifPresent(null);\n}\n", "  public boolean getDBExtraBooleanAttribute(int iIndex) {\n    switch (iIndex) {\n      case 3:\n        return fNo_taxes;\n      default:\n        return false;\n    }\n  }\n", "        public void releaseChannelSftp() {\n            if (channelSftp != null) {\n                if (channelSftp.isConnected()) {\n                    Message.verbose(\":: SFTP :: closing sftp connection from \" + host + \"...\");\n                    channelSftp.disconnect();\n                    channelSftp = null;\n                    Message.verbose(\":: SFTP :: sftp connection closed from \" + host);\n                }\n            }\n        }\n", "public static void importFunctions ( final CConnection connection , final int rawModuleId , final int moduleId ) throws SQLException { Preconditions . checkNotNull ( connection , STR_ ) ; Preconditions . checkArgument ( rawModuleId >= NUM_ , STR_ ) ; Prec", "@Override\n    protected void writeEdge(PrintWriter pw) {\n        pw.println(\"begin edge\");\n        pw.println(\"letter:letter\");\n        pw.println(\"end edge\");\n    }", "public void write(CDATA cdata) throws SAXException {\n  String text=cdata.getText();\n  if (lexicalHandler != null) {\n    lexicalHandler.startCDATA();\n    write(text);\n    lexicalHandler.endCDATA();\n  }\n else {\n    write(text);\n  }\n}\n", "    public boolean isConfirmationSuccessful() {\n        return confirmationSuccessful;\n    }\n", "private void appendValueLength(int value, int index) {\n    int previousValue = toIntUnsigned(getValue(index));\n    int length = toIntUnsigned(getLength(index));\n    int offset = value - previousValue;\n    if (offset > length) {\n      setLength(index, (short) offset);\n    }\n  }", "public void testLast ( ) throws Exception { StorageAgent agent = this . configureStorageService ( STR_ , NUM_ ) ; assertEquals ( STR_ , NUM_ , agent . list ( ) . length ) ; for ( int i = NUM_ ; i < NUM_ ; i ++ ) { BackupSpecification backupSpecStore = cre", "public static boolean validVarName(String varName){\n  return !varName.contains(\".\");\n}\n", "\tpublic Object getImage(Object object) {\n\t\treturn overlayImage(object, getResourceLocator().getImage(\n\t\t\t\t\"full/obj16/ConnectorEnd\")); //$NON-NLS-1$\n\t}\n", "public static Histogram productHistogram(Histogram hist1,Histogram hist2){\n  Set<String> prodFlds=new HashSet<String>(hist1.fields());\n  prodFlds.addAll(hist2.fields());\n  Histogram prodHist=new Histogram(prodFlds);\n  double numRec1=hist1.recordsOutput();\n  double numRec2=hist2.recordsOutput();\n  if (Double.compare(numRec1,1.0) < 0 || Double.compare(numRec2,1.0) < 0)   return prodHist;\n  for (  String fld : hist1.fields())   for (  Bucket bkt : hist1.buckets(fld))   prodHist.addBucket(fld,new Bucket(bkt.valueRange(),bkt.frequency() * numRec2,bkt.distinctValues(),bkt.valuePercentiles()));\n  for (  String fld : hist2.fields())   for (  Bucket bkt : hist2.buckets(fld))   prodHist.addBucket(fld,new Bucket(bkt.valueRange(),bkt.frequency() * numRec1,bkt.distinctValues(),bkt.valuePercentiles()));\n  return prodHist;\n}\n", "\tpublic String getAge() {\n\n\t\tlong age = System.currentTimeMillis() - getLastAccess();\n\t\t\n\t\tlong seconds = (age / 1000) % 60;\n\t\tlong minutes = (age / 1000 / 60);\n\t\t\n\t\treturn minutes + \"m \" + seconds + \"s\";\n\t}\n", "\tpublic void setRemoveFromQueryString(String val) {\n\t\tif (_removeFromQueryString != null)\n\t\t\t_removeFromQueryString += \",\" + val;\n\t\telse\n\t\t\t_removeFromQueryString = val;\n\t}\n", "List < INaviView > loadMixedgraphs ( CProject project ) throws CouldntLoadDataException ;", "private boolean taskSuccessfulInPriorAttempt(String taskId) {\n    if (this.taskStateStoreOptional.isPresent()) {\n      StateStore<TaskState> taskStateStore = this.taskStateStoreOptional.get();\n      // Delete the task state file for the task if it already exists.\n      // This usually happens if the task is retried upon failure.\n      try {\n        if (taskStateStore.exists(jobId, taskId + TASK_STATE_STORE_SUCCESS_MARKER_SUFFIX)) {\n          log.info(\"Skipping task {} that successfully executed in a prior attempt.\", taskId);\n\n          // skip tasks that executed successfully in a previous attempt\n          return true;\n        }\n      } catch (IOException e) {\n        // if an error while looking up the task state store then treat like it was not processed\n        return false;\n      }\n    }\n\n    return false;\n  }", "\tpublic void addOption(String key, String disp) {\n\t\taddOption(key, disp, false);\n\t}\n", "public static String unexpand ( CharSequence self , int tabStop ) { if ( self . length ( ) == NUM_ ) return self . toString ( ) ; StringBuilder builder = new StringBuilder ( ) ; for ( String line : new LineIterable ( self ) ) { builder . append ( unexpand", "  private void appendCause(StringBuffer xml, String indent, char newLine) {\n    if (getCause() != null) {\n      final Writer writer = new StringWriter();\n      final PrintWriter printWriter = new PrintWriter(writer, true);\n      getCause().printStackTrace(printWriter);\n      xml.append(indent).append(\"  <cause>\").append(writer.toString());\n      xml.append(indent).append(\"  </cause>\").append(newLine);\n    }\n  }\n", "public void deleteModule ( final Module module ) throws CouldntDeleteException { Preconditions . checkNotNull ( module , STR_ ) ; try { m_database . getContent ( ) . delete ( module . getNative ( ) ) ; } catch ( final com . google . security . zynamics . ", "void generateAntXml(Definition def, String outputDir)\n   {\n      try\n      {\n         FileWriter antfw = Utils.createFile(\"build.xml\", outputDir);\n         BuildXmlGen bxGen = new BuildXmlGen();\n         bxGen.generate(def, antfw);\n         antfw.close();\n      }\n      catch (IOException ioe)\n      {\n         ioe.printStackTrace();\n      }\n   }", "boolean isGooglePlayStoreInstalled ( ) ;", "public static Object next ( Enum self ) { final Method [ ] methods = self . getClass ( ) . getMethods ( ) ; for ( int i = NUM_ ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; if ( method . getName ( ) . equals ( STR_ ) && method . getPar", "private static Class<?>[] getFields(Class<?> clz)\n   {\n      List<Class<?>> result = new ArrayList<Class<?>>();\n\n      Class<?> c = clz;\n      while (!c.equals(Object.class))\n      {\n         try\n         {\n            Field[] fields = SecurityActions.getDeclaredFields(c);\n            if (fields.length > 0)\n            {\n               for (Field f : fields)\n               {\n                  Class<?> defClz = f.getType();\n                  String defClzName = defClz.getName();\n\n                  if (!defClz.isPrimitive() && !defClz.isArray() && \n                      !defClzName.startsWith(\"java\") && !defClzName.startsWith(\"javax\") && !result.contains(defClz))\n                  {\n                     if (trace)\n                        log.tracef(\"Adding field: %s\", defClzName);\n                     \n                     result.add(defClz);\n                  }\n               }\n            }\n         }\n         catch (Throwable t)\n         {\n            // Ignore\n         }\n\n         c = c.getSuperclass();\n      }\n\n      return result.toArray(new Class<?>[result.size()]);\n   }", "void detached ( ) ;", "@Override\n    public DeleteLogStreamResult deleteLogStream(DeleteLogStreamRequest request) {\n        request = beforeClientExecution(request);\n        return executeDeleteLogStream(request);\n    }", "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(1);\n  newVector.addElement(new Option(\"\\tNew field specification (name@type@value).\\n\" + \"\\t Environment variables may be used for any/all parts of the\\n\" + \"\\tspecification. Type can be one of (numeric, nominal, string or date).\\n\"+ \"\\tThe value for date be a specific date string or the special string\\n\"+ \"\\t\\\"now\\\" to indicate the current date-time. A specific date format\\n\"+ \"\\tstring for parsing specific date values can be specified by suffixing\\n\"+ \"\\tthe type specification - e.g. \\\"myTime@date:MM-dd-yyyy@08-23-2009\\\".\"+ \"This option may be specified multiple times\",\"A\",1,\"-A <name:type:value>\"));\n  return newVector.elements();\n}\n", "\tpublic int logicalToPhysical(double log) {\n\n\t\tdouble lowest = (position - Math.floor(markNumber() / 2)) * scale;\n\t\tint result = (int) Math.round((log - lowest) / sampleSize);\n\t\treturn result;\n\t}\n", "@Override public int lastIndexOf(Object o){\n  if (o == null) {\n    for (int i=end - 1; i >= start; i--) {\n      if (buffer[i] == null) {\n        return i - start;\n      }\n    }\n  }\n else {\n    for (int i=end - 1; i >= start; i--) {\n      if (o.equals(buffer[i])) {\n        return i - start;\n      }\n    }\n  }\n  return -1;\n}\n", "public static Builder disque(String host){\n  return disque(host,DEFAULT_DISQUE_PORT);\n}\n", "public static TIntIntHashMap makeVMIndex(Collection<Instance> instances) {\n        TIntIntHashMap index = new TIntIntHashMap();\n        int p = 0;\n        for (Instance i : instances) {\n            Mapping m = i.getModel().getMapping();\n            for (Node n : m.getOnlineNodes()) {\n                for (VM v : m.getRunningVMs(n)) {\n                    index.put(v.id(), p);\n                }\n                for (VM v : m.getSleepingVMs(n)) {\n                    index.put(v.id(), p);\n                }\n            }\n            for (VM v : m.getReadyVMs()) {\n                index.put(v.id(), p);\n            }\n            p++;\n        }\n        return index;\n    }", "public void disconnectFromDatabase ( ) throws Exception { if ( m_Debug ) { System . err . println ( STR_ + m_DatabaseURL ) ; } if ( m_Connection != null ) { m_Connection . close ( ) ; m_Connection = null ; } }", "public PeriodicAmbientSoundSource(String sound,int radius,int volume,int minInterval,int maxInterval){\n  setRPClass(\"entity\");\n  put(\"type\",\"entity\");\n  this.sounds=sound.split(\", *\");\n  this.radius=radius;\n  this.volume=volume;\n  this.minInterval=minInterval;\n  this.maxInterval=maxInterval;\n  setupNotifier();\n}\n", "public Context duplicate ( ExternalModuleTable exMT ) { Context dup = new Context ( exMT , errors ) ; Pair p = this . lastPair ; Pair current = null ; boolean firstTime = BOOL_ ; while ( p != null ) { if ( firstTime ) { current = new Pair ( null , p . inf", "    public void printCharacter(char c) throws IOException {\n        if (c == 10) {\n            printNewline();\n        } else {\n            column++;\n            writer.write(c);\n        }\n    }\n", "public void triggerVpoolMatcherIfPortAllocationQualificationChanged(URI storageSystemId,List<StoragePort> storagePorts){\n  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemId);\n  Set<StoragePort> disqualifiedPortBeforeCompute=filterAllocationDisqualifiedPorts(storagePorts);\n  computeStoragePortUsage(storagePorts,storageSystem,true);\n  Set<StoragePort> disqualifiedPortAfterCompute=filterAllocationDisqualifiedPorts(storagePorts);\n  if (!disqualifiedPortAfterCompute.equals(disqualifiedPortBeforeCompute)) {\n    StringBuffer errorMessage=new StringBuffer();\n    ImplicitPoolMatcher.matchStorageSystemPoolsToVPools(storageSystem.getId(),_dbClient,_coordinator,errorMessage);\n  }\n}\n", "    public void exec(Runnable command) {\n\tif(command instanceof CapImprinted) {\n\t    this.exec(command, (CapImprinted) command);\n\t}\n\t\t\t   \n        this.exec(command, null);\n    }\n", "    public void setFilter(Filter inFilter) {\n        if (inFilter instanceof DateAttributeFilter){\n            DateAttributeFilter tempFilter = (DateAttributeFilter) inFilter;\n            \n            // set the attribute\n            String tempAttributeN", "@SuppressWarnings(\"WeakerAccess\")\n  public ApiFuture<List<String>> listTablesAsync() {\n    ListTablesRequest request =\n        ListTablesRequest.newBuilder()\n            .setParent(NameUtil.formatInstanceName(projectId, instanceId))\n            .build();\n\n    // TODO(igorbernstein2): try to upstream pagination spooling or figure out a way to expose the\n    // paginated responses while maintaining the wrapper facade.\n\n    // Fetch the first page.\n    ApiFuture<ListTablesPage> firstPageFuture =\n        ApiFutures.transform(\n            stub.listTablesPagedCallable().futureCall(request),\n            new ApiFunction<ListTablesPagedResponse, ListTablesPage>() {\n              @Override\n              public ListTablesPage apply(ListTablesPagedResponse response) {\n                return response.getPage();\n              }\n            },\n            MoreExecutors.directExecutor());\n\n    // Fetch the rest of the pages by chaining the futures.\n    ApiFuture<List<com.google.bigtable.admin.v2.Table>> allProtos =\n        ApiFutures.transformAsync(\n            firstPageFuture,\n            new ApiAsyncFunction<ListTablesPage, List<com.google.bigtable.admin.v2.Table>>() {\n              List<com.google.bigtable.admin.v2.Table> responseAccumulator = Lists.newArrayList();\n\n              @Override\n              public ApiFuture<List<com.google.bigtable.admin.v2.Table>> apply(\n                  ListTablesPage page) {\n                // Add all entries from the page\n                responseAccumulator.addAll(Lists.newArrayList(page.getValues()));\n\n                // If this is the last page, just return the accumulated responses.\n                if (!page.hasNextPage()) {\n                  return ApiFutures.immediateFuture(responseAccumulator);\n                }\n\n                // Otherwise fetch the next page.\n                return ApiFutures.transformAsync(\n                    page.getNextPageAsync(), this, MoreExecutors.directExecutor());\n              }\n            },\n            MoreExecutors.directExecutor());\n\n    // Wrap all of the accumulated protos.\n    return ApiFutures.transform(\n        allProtos,\n        new ApiFunction<List<com.google.bigtable.admin.v2.Table>, List<String>>() {\n          @Override\n          public List<String> apply(List<com.google.bigtable.admin.v2.Table> protos) {\n            List<String> results = Lists.newArrayListWithCapacity(protos.size());\n            for (com.google.bigtable.admin.v2.Table proto : protos) {\n              results.add(NameUtil.extractTableIdFromTableName(proto.getName()));\n            }\n            return results;\n          }\n        },\n        MoreExecutors.directExecutor());\n  }", "public List<TableGenerator<EntityMappings<T>>> getAllTableGenerator()\n   {\n      List<TableGenerator<EntityMappings<T>>> list = new ArrayList<TableGenerator<EntityMappings<T>>>();\n      List<Node> nodeList = childNode.get(\"table-generator\");\n      for(Node node: nodeList)\n      {\n         TableGenerator<EntityMappings<T>>  type = new TableGeneratorImpl<EntityMappings<T>>(this, \"table-generator\", childNode, node);\n         list.add(type);\n      }\n      return list;\n   }", "@Action(\n            semantics = SemanticsOf.SAFE\n    )\n    @MemberOrder(sequence = \"50\")\n    public List<Gmap3ToDoItem> allToDos() {\n        final String currentUser = currentUserName();\n        final List<Gmap3ToDoItem> items = repositoryService.allMatches(Gmap3ToDoItem.class, Gmap3ToDoItem.Predicates.thoseOwnedBy(currentUser));\n        Collections.sort(items);\n        if(items.isEmpty()) {\n            messageService.warnUser(\"No to-do items found.\");\n        }\n        return items;\n    }", "void loaded ( IViewContainer container ) ;", "public static double cdf(double x, double k, double theta, double shift) {\n    if(x == Double.NEGATIVE_INFINITY) {\n      return 0.;\n    }\n    if(x == Double.POSITIVE_INFINITY) {\n      return 1.;\n    }\n    if(x != x) {\n      return Double.NaN;\n    }\n    final double e = FastMath.exp((x - shift) * theta);\n    return e < Double.POSITIVE_INFINITY ? GammaDistribution.regularizedGammaP(k, e) : 1.;\n  }", "public String query ( String key ) { return mQueries . get ( key ) ; }", "private void cleanupBackupDir(int keep) {\n        File[] backupDirFiles = getSortedBackupDirFiles();\n        if (backupDirFiles.length > keep) {\n            for (int i = keep; i < backupDirFiles.length; i++) {\n                backupDirFiles[i].delete();\n            }\n        }\n    }", "    public void setWorkingForm(String formIdNameOrIndex) {\n        if (formIdNameOrIndex != null) {\n            workingForm = getForm(formIdNameOrIndex);\n        }\n    }\n", "@Override protected boolean ensureFreeCapacity(){\n  if (!isFull())   return true;\n  EvictionThread evictionThread=ensureEvictionThreadIsRunning();\n  evictionThread.trigger();\n  if (isOverfull()) {\n    counterEvictionsHalts.incrementAndGet();\n    if (jamPolicy == JamPolicy.DROP) {\n      evictionThread=ensureEvictionThreadIsRunning();\n      evictionThread.trigger();\n      return false;\n    }\n  }\n  while (isOverfull()) {\n    try {\nsynchronized (evictionNotifierDone) {\n        if (evictionThread.evictionIsRunning) {\n          evictionNotifierDone.wait();\n        }\n      }\n      evictionThread=ensureEvictionThreadIsRunning();\n      evictionThread.trigger();\n    }\n catch (    InterruptedException e) {\n    }\n  }\n  return true;\n}\n", "    public void addCacheStream () throws IOException {\n\tif (!converted)\n\t    super.addCacheStream ();\n    }\n", "public static Object decodeToObject( String encodedObject )\n    throws java.io.IOException, java.lang.ClassNotFoundException {\n        return decodeToObject(encodedObject,NO_OPTIONS,null);\n    }", "protected XMLReader installXMLFilter(XMLReader reader){\n  XMLFilter filter=getXMLFilter();\n  if (filter != null) {\n    XMLFilter root=filter;\n    while (true) {\n      XMLReader parent=root.getParent();\n      if (parent instanceof XMLFilter) {\n        root=(XMLFilter)parent;\n      }\n else {\n        break;\n      }\n    }\n    root.setParent(reader);\n    return filter;\n  }\n  return reader;\n}\n", "public static boolean sendHttpPostRequest(HttpURLConnection connection,String contentType,byte[] data){\n  try {\n    connection.setRequestMethod(\"POST\");\n  }\n catch (  ProtocolException e) {\n    LOG.log(Level.SEVERE,\"Failed to set post request: \",e);\n    return false;\n  }\n  if (data.length > 0) {\n    connection.setRequestProperty(CONTENT_TYPE,contentType);\n    connection.setRequestProperty(CONTENT_LENGTH,Integer.toString(data.length));\n    connection.setUseCaches(false);\n    connection.setDoOutput(true);\n    OutputStream os=null;\n    try {\n      os=connection.getOutputStream();\n      os.write(data);\n      os.flush();\n    }\n catch (    IOException e) {\n      LOG.log(Level.SEVERE,\"Failed to send request: \",e);\n      return false;\n    }\n finally {\n      try {\n        if (os != null) {\n          os.close();\n        }\n      }\n catch (      IOException e) {\n        LOG.log(Level.SEVERE,\"Failed to close OutputStream: \",e);\n        return false;\n      }\n    }\n  }\n  return true;\n}\n", "@Override public synchronized void addTrainingSetListener(TrainingSetListener tsl){\n  m_listeners.addElement(tsl);\n}\n", "void onRestaurantAutocomplete ( Prediction place ) ;", "public AtomicTypePanel ( final Component parent , final TypeManager typeManager , final BaseType existingType ) { super ( parent , typeManager , existingType ) ; createControls ( ) ; populateControls ( ) ; }", "public static boolean hasJsType(FieldDescriptor fieldDescriptor) {\n    if (!JS_TYPEABLE_FIELDS.contains(fieldDescriptor.getType())) {\n      return false;\n    }\n    if (fieldDescriptor.getOptions().hasJstype()) {\n      return true;\n    }\n    return false;\n  }", "public OrganizationMember getMember(int orgId, int userId) {\r\n\t\treturn getResourceFactory().getApiResource(\r\n\t\t\t\t\"/org/\" + orgId + \"/member/\" + userId).get(\r\n\t\t\t\tOrganizationMember.class);\r\n\t}", "public String toString ( ) { return super . toString ( ) + STR_ + getName ( ) + STR_ + InvokerHelper . toString ( getParameterTypes ( ) ) + STR_ + getReturnType ( ) + STR_ + getDeclaringClass ( ) + STR_ ; }", "public int platformId ( int index ) { return this . data . readUShort ( Offset . nameRecordPlatformId . offset + this . offsetForNameRecord ( index ) ) ; }", "public String getInputUserSecurityName(String inputVirtualRealm) {\n        // initialize the return value\n        String returnValue = getInputMapping(inputVirtualRealm, Service.CONFIG_DO_USER_SECURITY_NAME_MAPPING,\n                                             INPUT_USER_SECURITY_NAME_DEFAULT);\n        return returnValue;\n    }", "void changedDebugger ( AddressSpace addressSpace , Debugger debugger ) ;", "@Override\n  public BitArray getBlackRow(int y, BitArray row) throws NotFoundException {\n    LuminanceSource source = getLuminanceSource();\n    int width = source.getWidth();\n    if (row == null || row.getSize() < width) {\n      row = new BitArray(width);\n    } else {\n      row.clear();\n    }\n\n    initArrays(width);\n    byte[] localLuminances = source.getRow(y, luminances);\n    int[] localBuckets = buckets;\n    for (int x = 0; x < width; x++) {\n      localBuckets[(localLuminances[x] & 0xff) >> LUMINANCE_SHIFT]++;\n    }\n    int blackPoint = estimateBlackPoint(localBuckets);\n\n    if (width < 3) {\n      // Special case for very small images\n      for (int x = 0; x < width; x++) {\n        if ((localLuminances[x] & 0xff) < blackPoint) {\n          row.set(x);\n        }\n      }\n    } else {\n      int left = localLuminances[0] & 0xff;\n      int center = localLuminances[1] & 0xff;\n      for (int x = 1; x < width - 1; x++) {\n        int right = localLuminances[x + 1] & 0xff;\n        // A simple -1 4 -1 box filter with a weight of 2.\n        if (((center * 4) - left - right) / 2 < blackPoint) {\n          row.set(x);\n        }\n        left = center;\n        center = right;\n      }\n    }\n    return row;\n  }", "        public void setPercentageDone(int percentageDone) {\n            if (percentageDone < 0 || percentageDone > 100) {\n                throw new IllegalArgumentException(\"Invalid value: \" + percentageDone);\n            }\n            this.percentageDone = percentageDone;\n        }\n", "public static Instant instant(String text, ZoneId zone) {\n\t\tInstant result = null;\n\t\ttry {\n\t\t\tLocalDateTime ldt = LocalDateTime.parse(text, getFormater(DATE_FORMAT_LOCAL, null));\n\t\t\tZonedDateTime zdt = ldt.atZone(zone);\n\t\t\tresult = zdt.toInstant();\n\t\t}\n\t\tcatch (DateTimeParseException ex) {\n\t\t\tSay.warn(\"Instant not constructable {}\", ex, text);\n\t\t}\n\t\treturn result;\n\t}", "    public double getSup() {\n        BSPTree<Euclidean1D> node = getTree(false);\n        double  sup  = Double.NEGATIVE_INFINITY;\n        while (node.getCut() != null) {\n            final OrientedPoint op = (OrientedPoint) node.getCut().getHyperplane();\n            sup  = op.getLocation().getX();\n            node = op.isDirect() ? node.getPlus() : node.getMinus();\n        }\n        return ((Boolean) node.getAttribute()) ? Double.POSITIVE_INFINITY : sup;\n    }\n", "@Override\n    public <aeClass> List<aeClass> findAllSubexpressionsOfClass(Class< ? extends AbstractExpression> aeClass) {\n        List<aeClass> list = super.findAllSubexpressionsOfClass(aeClass);\n        for (AbstractExpression pbexpr : m_partitionByExpressions) {\n            list.addAll(pbexpr.findAllSubexpressionsOfClass(aeClass));\n        }\n        for (AbstractExpression sortExpr : m_orderByExpressions) {\n            list.addAll(sortExpr.findAllSubexpressionsOfClass(aeClass));\n        }\n        for (AbstractExpression aggExpr : m_args) {\n            list.addAll(aggExpr.findAllSubexpressionsOfClass(aeClass));\n        }\n        return list;\n    }", "void disconnect ( ) ;", "private void updateBuddyProperties(BuddyProperties buddyProperties,\n            ApiBuddyProperties apiBuddyProperties) {\n        apiBuddyProperties.setInited(buddyProperties.isInited());\n        apiBuddyProperties.setNickName(buddyProperties.getNickName());\n        apiBuddyProperties.setOnline(buddyProperties.isOnline());\n        apiBuddyProperties.setState(buddyProperties.getState());\n    }", "    public String decapitalize(String s) {\n        String result;\n        if (s == null || s.length() == 0) {\n            result = s;\n        } else {\n            StringBuffer buf = new StringBuffer();\n            buf.append(Character.toLowerCase(s.charAt(0)));\n            buf.append(s.substring(1));\n            result = buf.toString();\n        }\n        return result;\n    }\n", "public abstract void onClose ( WebSocket conn , int code , String reason , boolean remote ) ;", "public static double standardCDF(double x,boolean log_p){\n  boolean i_tail=false;\n  if (Double.isNaN(x)) {\n    return Double.NaN;\n  }\n  double xden, xnum, temp, del, eps, xsq, y;\n  int i;\n  double p=x, cp=Double.NaN;\n  boolean lower, upper;\n  eps=DBL_EPSILON * 0.5;\n  lower=!i_tail;\n  upper=i_tail;\n  y=Math.abs(x);\n  if (y <= 0.67448975) {\n    if (y > eps) {\n      xsq=x * x;\n      xnum=a[4] * xsq;\n      xden=xsq;\n      for (i=0; i < 3; i++) {\n        xnum=(xnum + a[i]) * xsq;\n        xden=(xden + b[i]) * xsq;\n      }\n    }\n else {\n      xnum=xden=0.0;\n    }\n    temp=x * (xnum + a[3]) / (xden + b[3]);\n    if (lower) {\n      p=0.5 + temp;\n    }\n    if (upper) {\n      cp=0.5 - temp;\n    }\n    if (log_p) {\n      if (lower) {\n        p=Math.log(p);\n      }\n      if (upper) {\n        cp=Math.log(cp);\n      }\n    }\n  }\n else   if (y <= M_SQRT_32) {\n    xnum=c[8] * y;\n    xden=y;\n    for (i=0; i < 7; i++) {\n      xnum=(xnum + c[i]) * y;\n      xden=(xden + d[i]) * y;\n    }\n    temp=(xnum + c[7]) / (xden + d[7]);\n    xsq=((int)(y * CUTOFF)) * 1.0 / CUTOFF;\n    del=(y - xsq) * (y + xsq);\n    if (log_p) {\n      p=(-xsq * xsq * 0.5) + (-del * 0.5) + Math.log(temp);\n      if ((lower && x > 0.0) || (upper && x <= 0.0)) {\n        cp=Math.log(1.0 - Math.exp(-xsq * xsq * 0.5) * Math.exp(-del * 0.5) * temp);\n      }\n    }\n else {\n      p=Math.exp(-xsq * xsq * 0.5) * Math.exp(-del * 0.5) * temp;\n      cp=1.0 - p;\n    }\n    if (x > 0.0) {\n      temp=p;\n      if (lower) {\n        p=cp;\n      }\n      cp=temp;\n    }\n  }\n else   if (log_p || (lower && -37.5193 < x && x < 8.2924) || (upper && -8.2924 < x && x < 37.5193)) {\n    xsq=1.0 / (x * x);\n    xnum=p_[5] * xsq;\n    xden=xsq;\n    for (i=0; i < 4; i++) {\n      xnum=(xnum + p_[i]) * xsq;\n      xden=(xden + q[i]) * xsq;\n    }\n    temp=xsq * (xnum + p_[4]) / (xden + q[4]);\n    temp=(M_1_SQRT_2PI - temp) / y;\n    xsq=((int)(x * CUTOFF)) * 1.0 / CUTOFF;\n    del=(x - xsq) * (x + xsq);\n    if (log_p) {\n      p=(-xsq * xsq * 0.5) + (-del * 0.5) + Math.log(temp);\n      if ((lower && x > 0.0) || (upper && x <= 0.0)) {\n        cp=Math.log(1.0 - Math.exp(-xsq * xsq * 0.5) * Math.exp(-del * 0.5) * temp);\n      }\n    }\n else {\n      p=Math.exp(-xsq * xsq * 0.5) * Math.exp(-del * 0.5) * temp;\n      cp=1.0 - p;\n    }\n    if (x > 0.0) {\n      temp=p;\n      if (lower) {\n        p=cp;\n      }\n      cp=temp;\n    }\n  }\n else {\n    if (x > 0) {\n      p=1.0;\n      cp=0.0;\n    }\n else {\n      p=0.0;\n      cp=1.0;\n    }\n  }\n  return p;\n}\n", "public static void writeEdges ( final SQLProvider provider , final List < INaviEdge > edges ) throws SQLException { Preconditions . checkNotNull ( provider , STR_ ) ; Preconditions . checkNotNull ( edges , STR_ ) ; for ( final INaviEdge edge : edges ) { P", "private String getSecNameFromUniqueID(String uniqueId) throws WIMException {\n        String METHODNAME = \"getSecNameFromUniqueID\";\n        String secName = null;\n        try {\n            secName = getUserSecurityName(uniqueId);\n        } catch (EntryNotFoundException e) {\n            try {\n                secName = getGroupSecurityName(uniqueId);\n            } catch (com.ibm.ws.security.registry.EntryNotFoundException renf) {\n                throw new EntityNotFoundException(WIMMessageKey.ENTITY_NOT_FOUND, Tr.formatMessage(tc, WIMMessageKey.ENTITY_NOT_FOUND,\n                                                                                                   WIMMessageHelper.generateMsgParms(uniqueId)));\n            } catch (RegistryException re) {\n                throw new EntityNotFoundException(WIMMessageKey.ENTITY_NOT_FOUND, Tr.formatMessage(tc, WIMMessageKey.ENTITY_NOT_FOUND,\n                                                                                                   WIMMessageHelper.generateMsgParms(uniqueId)));\n            }\n        } catch (RegistryException e) {\n            throw new EntityNotFoundException(WIMMessageKey.ENTITY_NOT_FOUND, Tr.formatMessage(tc, WIMMessageKey.ENTITY_NOT_FOUND,\n                                                                                               WIMMessageHelper.generateMsgParms(uniqueId)));\n        }\n\n        if (tc.isDebugEnabled()) {\n            Tr.debug(tc, METHODNAME + \" The Security Name for \" + uniqueId + \" is \" + secName);\n        }\n\n        return secName;\n    }", "public void sendEvent ( ClusterEvent event ) ;", "   private void clearTableUISelection() {\n      if (this.ecType == TABLE) {\n         int row_index = 0;\n         int cell_index = 0;\n         XComponent table_row = null;\n         XComponent table_cell = null;\n         /* clear selection on table cells --view components */\n         for (row_index = 0; row_index < this.getChildCount(); row_index++) {\n            table_row = (XComponent) (this.getChild(row_index));\n            table_row.setSelected(false);\n            for (cell_index = 0; cell_index < table_row.getChildCount(); cell_index++) {\n               table_cell = (XComponent) table_row.getChild(cell_index);\n               table_cell.setSelected(false);\n            }\n         }\n      }\n   }\n", "public ExportPermission ( String name ) { super ( name ) ; }", "    public void clearFields() {\n        originText.setText(\"\");\n        destinationText.setText(\"\");\n        depTimeText.setText(\"\");\n        ariTimeText.setText(\"\");\n        priceText.setText(\"\");\n        seatsText.setText(\"\");\n        dateDay.setSelectedIndex(INDEX_RESET);\n        dateMonth.setSelectedIndex(INDEX_RESET);\n        dateYear.setSelectedIndex(INDEX_RESET);\n    }\n", "protected final void copyValue(ExtendedStatistic from, ExtendedStatistic to) {\n      try {\n         double value = container.getValue(from);\n         container.addValue(to, value);\n         if (log.isDebugEnabled()) {\n            log.debugf(\"Copy value [%s] from [%s] to [%s]\", value, from, to);\n         }\n      } catch (ExtendedStatisticNotFoundException e) {\n         log.unableToCopyValue(from, to, e);\n      }\n   }", "@Override public int hashCode(){\n  return ruleID.hashCode();\n}\n", "protected void nullValue ( String fieldName , PersistentResource oldValue ) { if ( oldValue == null ) { return ; } String inverseField = getInverseRelationField ( fieldName ) ; if ( ! inverseField . isEmpty ( ) ) { oldValue . checkFieldAwarePermissions ( ", "  public GraceletPhaseClosure getRenderResponse() {\n  \tif (renderResponse == null) renderResponse = new GraceletPhaseClosure();\n  \treturn renderResponse; \n  }\n", "public CGroupNode ( final int nodeId , final double x , final double y , final double width , final double height , final Color color , final boolean selected , final boolean visible , final Set < CTag > tags , final List < IComment > comment , final bool", "public static boolean removeUnusedVariables(TestCase t){\n  List<Integer> to_delete=new ArrayList<Integer>();\n  boolean has_deleted=false;\n  int num=0;\n  for (  Statement s : t) {\n    VariableReference var=s.getReturnValue();\n    if (!t.hasReferences(var)) {\n      to_delete.add(num);\n      has_deleted=true;\n    }\n    num++;\n  }\n  Collections.sort(to_delete,Collections.reverseOrder());\n  for (  Integer position : to_delete) {\n    t.remove(position);\n  }\n  return has_deleted;\n}\n", "public void broadcast ( ChannelEvent event ) ;", "private void addService(SvcReg reg){\n  serviceByID.put(reg.item.serviceID,reg);\n  serviceByTime.put(reg,reg);\n  addServiceByTypes(reg.item.serviceType,reg);\n  EntryRep[] entries=reg.item.attributeSets;\n  for (int i=entries.length; --i >= 0; ) {\n    addAttrs(reg,entries[i]);\n  }\n  computeMaxLeases();\n}\n", "public static <T extends Comparable<T>> T leq(T value) {\n        reportMatcher(new LessOrEqual<T>(value));\n        return null;\n    }", "    public User getUser(String name) throws SQLException {\n\tUser ret = null;\n\n\tStatement stmt = con.createStatement();\n\tResultSet  res  = stmt.executeQuery(\"SELECT user_id, user_name, sysadmin, invadmin, insadmin, clientadmin FROM UserTable WHERE user_name='\" + name + \"'\");\n\tif (res.next()) {\n\t    ret = new User(res.getLong(\"user_id\"), res.getString(\"user_name\"), res.getBoolean(\"clientadmin\"), res.getBoolean(\"insadmin\"), res.getBoolean(\"invadmin\"), res.getBoolean(\"sysadmin\"));\n\t}\n\tstmt.close();\n\treturn ret;\n    }\n", "    public Pair (String tag, Object value) {\n\tthis.tag = tag;\n\tthis.value = value;\n    }\n", "private static void loadData() throws Exception {\n  logger.debug(\"SharedUtils.loadData called\");\n  InputStream is=getInputStream(CONFIG_FILE);\n  Validate.notNull(is);\n  try {\n    ServerConfig.initialize(is);\n  }\n  finally {\n    is.close();\n  }\n}\n", "public CreateInputRequest withInputSecurityGroups(String... inputSecurityGroups) {\n        if (this.inputSecurityGroups == null) {\n            setInputSecurityGroups(new java.util.ArrayList<String>(inputSecurityGroups.length));\n        }\n        for (String ele : inputSecurityGroups) {\n            this.inputSecurityGroups.add(ele);\n        }\n        return this;\n    }", "public boolean containsElement(SequenceElement element){\n  return includedElements.contains(element);\n}\n", "public final boolean processString(String str){\n  if (getGameState() != GameState.ALIVE)   return false;\n  if (str.startsWith(\"draw \")) {\n    String drawCmd=str.substring(str.indexOf(\" \") + 1);\n    handleDrawCmd(drawCmd,true);\n    return true;\n  }\n else   if (str.equals(\"resign\")) {\n    addToGameTree(new Move(0,0,0),\"resign\");\n    return true;\n  }\n  Move m=TextIO.UCIstringToMove(str);\n  if (m != null)   if (!TextIO.isValid(currPos(),m))   m=null;\n  if (m == null)   m=TextIO.stringToMove(currPos(),str);\n  if (m == null)   return false;\n  addToGameTree(m,pendingDrawOffer ? \"draw offer\" : \"\");\n  return true;\n}\n", "public static boolean isSame( InputStream input1,\n                                  InputStream input2 ) throws IOException {\n        CheckArg.isNotNull(input1, \"input1\");\n        CheckArg.isNotNull(input2, \"input2\");\n        boolean error = false;\n        try {\n            byte[] buffer1 = new byte[1024];\n            byte[] buffer2 = new byte[1024];\n            try {\n                int numRead1 = 0;\n                int numRead2 = 0;\n                while (true) {\n                    numRead1 = input1.read(buffer1);\n                    numRead2 = input2.read(buffer2);\n                    if (numRead1 > -1) {\n                        if (numRead2 != numRead1) return false;\n                        // Otherwise same number of bytes read\n                        if (!Arrays.equals(buffer1, buffer2)) return false;\n                        // Otherwise same bytes read, so continue ...\n                    } else {\n                        // Nothing more in stream 1 ...\n                        return numRead2 < 0;\n                    }\n                }\n            } finally {\n                input1.close();\n            }\n        } catch (IOException e) {\n            error = true; // this error should be thrown, even if there is an error closing stream 2\n            throw e;\n        } catch (RuntimeException e) {\n            error = true; // this error should be thrown, even if there is an error closing stream 2\n            throw e;\n        } finally {\n            try {\n                input2.close();\n            } catch (IOException e) {\n                if (!error) throw e;\n            }\n        }\n    }", "public Observable<ServiceResponse<HybridConnectionInner>> getHybridConnectionWithServiceResponseAsync(String resourceGroupName, String name, String namespaceName, String relayName) {\n        if (resourceGroupName == null) {\n            throw new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\");\n        }\n        if (name == null) {\n            throw new IllegalArgumentException(\"Parameter name is required and cannot be null.\");\n        }\n        if (namespaceName == null) {\n            throw new IllegalArgumentException(\"Parameter namespaceName is required and cannot be null.\");\n        }\n        if (relayName == null) {\n            throw new IllegalArgumentException(\"Parameter relayName is required and cannot be null.\");\n        }\n        if (this.client.subscriptionId() == null) {\n            throw new IllegalArgumentException(\"Parameter this.client.subscriptionId() is required and cannot be null.\");\n        }\n        if (this.client.apiVersion() == null) {\n            throw new IllegalArgumentException(\"Parameter this.client.apiVersion() is required and cannot be null.\");\n        }\n        return service.getHybridConnection(resourceGroupName, name, namespaceName, relayName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())\n            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<HybridConnectionInner>>>() {\n                @Override\n                public Observable<ServiceResponse<HybridConnectionInner>> call(Response<ResponseBody> response) {\n                    try {\n                        ServiceResponse<HybridConnectionInner> clientResponse = getHybridConnectionDelegate(response);\n                        return Observable.just(clientResponse);\n                    } catch (Throwable t) {\n                        return Observable.error(t);\n                    }\n                }\n            });\n    }", "public PathImpl fsWalk(String userPath,\n                     Map<String,Object> attributes,\n                     String path)\n  {\n    ArrayList<PathImpl> pathList = getMergePaths();\n\n    if (! userPath.startsWith(\"/\") || pathList.size() == 0)\n      return new MergePath((MergePath) _root, userPath, attributes, path);\n\n    String bestPrefix = null;\n    for (int i = 0; i < pathList.size(); i++) {\n      PathImpl subPath = pathList.get(i);\n      String prefix = subPath.getPath();\n\n      if (path.startsWith(prefix) &&\n          (bestPrefix == null || bestPrefix.length() < prefix.length())) {\n        bestPrefix = prefix;\n      }\n    }\n\n    if (bestPrefix != null) {\n      path = path.substring(bestPrefix.length());\n      if (! path.startsWith(\"/\"))\n        path = \"/\" + path;\n\n      return new MergePath((MergePath) _root, userPath, attributes, path);\n    }\n\n    return pathList.get(0).lookup(userPath, attributes);\n  }", "List < T > findElementsClickableAfter ( By by , int waitInSeconds ) ;", "void amendAuthConfig ( final JsonValue authModuleConfig ) { final JsonValue socialAuthTemplate = getSocialAuthTemplate ( ) ; if ( socialAuthTemplate . asMap ( ) . isEmpty ( ) ) { logger . debug ( STR_ ) ; return ; } authModuleConfig . asList ( Map . class ) . remove ( socialAuthTemplate . asMap ( ) ) ; if ( identityProviderService != null ) { authModuleConfig . asList ( ) . addAll ( FluentIterable . from ( identityProviderService . getIdentityProviders ( ) ) . transform ( new SocialAuthModuleConfigFactory ( socialAuthTemplate ) ) . toList ( ) ) ; } }", "\tprotected void dealCards(int nbRound) {\n\t\tgiveCardsToPlayers(getPlayers(), NB_CARDS);\n\t}\n", "private void restoreDynamicActions ( FacesContext context , StateContext stateContext , Map < String , Object > stateMap ) { if ( LOGGER . isLoggable ( Level . FINEST ) ) { LOGGER . finest ( STR_ ) ; } List < Object > savedActions = ( List < Object > ) stateMap . get ( DYNAMIC_ACTIONS ) ; List < ComponentStruct > actions = stateContext . getDynamicActions ( ) ; if ( savedActions != null && ! savedActions . isEmpty ( ) ) { for ( Object object : savedActions ) { ComponentStruct action = new ComponentStruct ( ) ; action . restoreState ( context , object ) ; if ( ComponentStruct . ADD . equals ( action . action ) ) { restoreDynamicAdd ( context , stateMap , action ) ; } if ( ComponentStruct . REMOVE . equals ( action . action ) ) { restoreDynamicRemove ( context , action ) ; } pruneAndReAddToDynamicActions ( actions , action ) ; } } }", "public static < NodeType extends IGraphNode < NodeType > > Collection < NodeType > collectChildren ( final NodeType node , final INodeFilter < NodeType > filter ) { Preconditions . checkNotNull ( node , STR_ ) ; return collectNodes ( node . getChildren ( ) , filter ) ; }", "public final <R> R map(BiFunction<? super T1, ? super T2, ? extends R> function) {\n        return function.apply(v1, v2);\n    }", "int addLineToGrid(SquareNode a, SquareNode b, List<SquareNode> list) {\n\n\t\tint total = 2;\n//\t\tdouble maxAngle = UtilAngle.radian(45);\n\n\t\twhile( true ) {\n//\t\t\tdouble slopeX0 = b.center.x - a.center.x;\n//\t\t\tdouble slopeY0 = b.center.y - a.center.y;\n\n//\t\t\tdouble angleAB = Math.atan2(slopeY0,slopeX0);\n\n\t\t\t// see which side the edge belongs to on b\n\t\t\tboolean matched = false;\n\t\t\tint side;\n\t\t\tfor( side = 0; side < 4; side++ ) {\n\t\t\t\tif( b.edges[side] != null && b.edges[side].destination(b) == a ) {\n\t\t\t\t\tmatched = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!matched) {\n\t\t\t\tthrow new RuntimeException(\"BUG!\");\n\t\t\t}\n\n\t\t\t// must be on the adjacent side\n\t\t\tside = (side+2)%4;\n\n\t\t\tif( b.edges[side] == null )\n\t\t\t\tbreak;\n\n\t\t\tSquareNode c = b.edges[side].destination(b);\n\n\t\t\tif (c.graph == SEARCHED )\n\t\t\t\tbreak;\n\n//\t\t\tdouble slopeX1 = c.center.x - b.center.x;\n//\t\t\tdouble slopeY1 = c.center.y - b.center.y;\n//\n//\t\t\tdouble angleBC = Math.atan2(slopeY1,slopeX1);\n//\t\t\tdouble acute = Math.abs(UtilAngle.minus(angleAB,angleBC));\n\n//\t\t\tif( acute >= maxAngle )\n//\t\t\t\tbreak;\n\n\t\t\ttotal++;\n\t\t\tc.graph = SEARCHED;\n\t\t\tlist.add(c);\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t}\n\t\treturn total;\n\t}", "    public boolean isSerialVersionUIDDefined() {\n        return StringUtils.isNotBlank(getSerialVersionUID());\n    }\n", "public static synchronized PushNotificationsManager getInstanceFor(XMPPConnection connection) {\n        PushNotificationsManager pushNotificationsManager = INSTANCES.get(connection);\n\n        if (pushNotificationsManager == null) {\n            pushNotificationsManager = new PushNotificationsManager(connection);\n            INSTANCES.put(connection, pushNotificationsManager);\n        }\n\n        return pushNotificationsManager;\n    }", "@SuppressWarnings(\"unchecked\") @Override public V remove(Object key){\n  if (comparator == null && NumberComparator.isNumber(key)) {\n    comparator=NumberComparator.createComparator(key.getClass());\n  }\n  java.lang.Comparable<K> object=comparator == null ? toComparable((K)key) : null;\n  if (size == 0) {\n    return null;\n  }\n  K keyK=(K)key;\n  Node<K,V> node=root;\n  while (node != null) {\n    K[] keys=node.keys;\n    int left_idx=node.left_idx;\n    int result=cmp(object,keyK,keys[left_idx]);\n    if (result < 0) {\n      node=node.left;\n    }\n else     if (result == 0) {\n      V value=node.values[left_idx];\n      removeLeftmost(node);\n      return value;\n    }\n else {\n      int right_idx=node.right_idx;\n      if (left_idx != right_idx) {\n        result=cmp(object,keyK,keys[right_idx]);\n      }\n      if (result > 0) {\n        node=node.right;\n      }\n else       if (result == 0) {\n        V value=node.values[right_idx];\n        removeRightmost(node);\n        return value;\n      }\n else {\n        int low=left_idx + 1, mid=0, high=right_idx - 1;\n        while (low <= high) {\n          mid=(low + high) >>> 1;\n          result=cmp(object,keyK,keys[mid]);\n          if (result > 0) {\n            low=mid + 1;\n          }\n else           if (result == 0) {\n            V value=node.values[mid];\n            removeMiddleElement(node,mid);\n            return value;\n          }\n else {\n            high=mid - 1;\n          }\n        }\n        return null;\n      }\n    }\n  }\n  return null;\n}\n", "public static Annotation getAnnotatedChunk(CoreMap annotation, int tokenStartIndex, int tokenEndIndex,\r\n                                             Class tokenChunkKey, Class tokenLabelKey)\r\n  {\r\n    Annotation chunk = getAnnotatedChunk(annotation, tokenStartIndex, tokenEndIndex);\r\n    annotateChunkTokens(chunk, tokenChunkKey, tokenLabelKey);\r\n    return chunk;\r\n  }", "private void addMitreJoin(Coordinate p,LineSegment offset0,LineSegment offset1,double distance){\n  boolean isMitreWithinLimit=true;\n  Coordinate intPt=null;\n  try {\n    intPt=HCoordinate.intersection(offset0.p0,offset0.p1,offset1.p0,offset1.p1);\n    doubl", "public double frequency ( ) { return freq ; }", "public ChangeSet addToCollection ( String path , Serializable newItem ) { return add ( new AddToCollectionSpaceEntryMutator ( path , newItem ) ) ; }", "@NonNull\n    public static DeleteResult newInstance(\n            int numberOfRowsDeleted,\n            @NonNull String affectedTable,\n            @Nullable Collection<String> affectedTags\n    ) {\n        return new DeleteResult(numberOfRowsDeleted, singleton(affectedTable), nonNullSet(affectedTags));\n    }", "    public String getAttributeNS(String namespaceURI, String localName) {\n        Attr attr = (Attr) attributes.getNamedItemNS(namespaceURI, localName);\n        return attr != null ? attr.getValue() : \"\";\n    }\n", "public boolean correctHeatSinks(StringBuffer buff){\n  if ((aero.getHeatType() != Aero.HEAT_SINGLE) && (aero.getHeatType() != Aero.HEAT_DOUBLE)) {\n    buff.append(\"Invalid heatsink type!  Valid types are \" + Aero.HEAT_SINGLE + \" and \"+ Aero.HEAT_DOUBLE+ \".  Found \"+ aero.getHeatType()+ \".\");\n  }\n  if (aero.getEntityType() == Entity.ETYPE_CONV_FIGHTER) {\n    int maxWeapHeat=countHeatEnergyWeapons();\n    int heatDissipation=0;\n    if (aero.getHeatType() == Aero.HEAT_DOUBLE) {\n      buff.append(\"Conventional fighters may only use single \" + \"heatsinks!\");\n      return false;\n    }\n    heatDissipation=aero.getHeatSinks();\n    if (maxWeapHeat > heatDissipation) {\n      buff.append(\"Conventional fighters must be able to \" + \"dissipate all heat from energy weapons! \\n\" + \"Max energy heat: \" + maxWeapHeat + \", max dissipation: \"+ heatDissipation);\n      return false;\n    }\n else {\n      return true;\n    }\n  }\n else {\n    return true;\n  }\n}\n", "\tprivate AttributeMapping loadAttributeMappingFromAttributeMappingInfo(AttributeMappingInfo attributeMappingInfo) {\n\t\tAttributeMapping attributeMapping = null;\n\t\tif (attributeMappingInfo.getId() != null) {\n\t\t\tattributeMapping = this.load(attributeMappingInfo.getId());\n\t\t} \n\t\tif (attributeMapping == null) {\n\t\t\tattributeMapping = AttributeMapping.Factory.newInstance();\n\t\t}\n\t\treturn attributeMapping;\n\n\t}\n", "private void addNonPartialsToResources(final File dir, final Resource resource) throws CodeGenException {\n        if (dir.equals(null)) {\n            throw new CodeGenException(\"Could not read from directory \" + dir.getPath());\n        }\n        final File[] files = dir.listFiles();\n        if (files == null) {\n            return;\n        }\n        for(File entry : files) {\n            try {\n                if (entry.isDirectory()) {\n                    addNonPartialsToResources(entry, resource);\n                } else if (entry.getName().endsWith(\".json\") && ProctorUtils.readJsonFromFile(entry).has(\"tests\")) {\n                    resource.addInclude(entry.getPath().substring(getTopDirectory().getPath().length() + 1));\n                }\n            } catch (IOException e) {\n                throw new CodeGenException(\"Could not read from file \" + entry.getName(),e);\n            }\n\n        }\n    }", "private void setActiveCenters(IAtomContainer reactant) throws CDKException {\n        AllRingsFinder arf = new AllRingsFinder();\n        IRingSet ringSet = arf.findAllRings(reactant);\n        for (int ir = 0; ir < ringSet.getAtomContainerCount(); ir++) {\n            IRing ring = (IRing) ringSet.getAtomContainer(ir);\n            //only rings with even number of atoms\n            int nrAtoms = ring.getAtomCount();\n            if (nrAtoms % 2 == 0) {\n                int nrSingleBonds = 0;\n                for (IBond iBond : ring.bonds()) {\n                    if (iBond.getOrder() == IBond.Order.SINGLE) nrSingleBonds++;\n                }\n                //if exactly half (nrAtoms/2==nrSingleBonds)\n                if (nrSingleBonds != 0 && nrAtoms / 2 == nrSingleBonds) {\n                    for (IBond iBond : ring.bonds())\n                        iBond.setFlag(CDKConstants.REACTIVE_CENTER, true);\n\n                }\n            }\n        }\n    }", "  protected void handlePreviousNotFinished() {\n\n    // The default behaviour is to stop the previous sound\n    currentTask.stop();\n  }\n", "public ResourceLazyLoadingScript ( String name , String type , String resoruceLocation ) { this . name = name ; this . type = type ; this . resourceLocation = resoruceLocation ; }", "private int blockPosToInt ( BlockPos pos ) { int serialized = setNibble ( NUM_ , pos . getX ( ) & XZ_MASK , NUM_ , NUM_XZ_BITS ) ; serialized = setNibble ( serialized , pos . getY ( ) & Y_INT_MASK , NUM_ , NUM_INT_Y_BITS ) ; serialized = setNibble ( seria", "public static Response createSharedSecretErrorResponse ( ) { throw new UnsupportedOperationException ( STR_ ) ; }", "public static DrawBlock getDrawBlockFromBlockState(IBlockState state, List<IProperty> extraProperties)\n    {\n        if (state == null)\n            return null;\n\n        DrawBlock block = new DrawBlock();\n        Object blockName = Block.REGISTRY.getNameForObject(state.getBlock());\n        if (blockName instanceof ResourceLocation)\n        {\n            String name = ((ResourceLocation)blockName).getResourcePath();\n            BlockType type = BlockType.fromValue(name);\n            block.setType(type);\n        }\n\n        Colour col = null;\n        Variation var = null;\n        Facing face = null;\n\n        // Add properties:\n        for (IProperty prop : state.getProperties().keySet())\n        {\n            String propVal = state.getValue(prop).toString();\n            boolean matched = false;\n            // Try colour first:\n            if (col == null)\n            {\n                col = attemptToGetAsColour(propVal);\n                if (col != null)\n                    matched = true;\n            }\n            // Then variant:\n            if (!matched && var == null)\n            {\n                var = attemptToGetAsVariant(propVal);\n                if (var != null)\n                    matched = true;\n            }\n            // Then facing:\n            if (!matched && face == null)\n            {\n                face = attemptToGetAsFacing(propVal);\n                if (face != null)\n                    matched = true;\n            }\n            if (!matched)\n            {\n                if (extraProperties != null)\n                    extraProperties.add(prop);\n            }\n        }\n        if (col != null)\n            block.setColour(col);\n        if (var != null)\n            block.setVariant(var);\n        if (face != null)\n            block.setFace(face);\n        return block;\n    }", "public static void encodeDesc(Boolean value, byte[] dst, int dstOffset) {\r\n        if (value == null) {\r\n            dst[dstOffset] = NULL_BYTE_LOW;\r\n        } else {\r\n            dst[dstOffset] = value.booleanValue() ? (byte)127 : (byte)128;\r\n        }\r\n    }", "public static <W extends WitnessType<W>,ST,A> EitherT<W,ST,A> of(final AnyM<W,Either<ST,A>> monads) {\n        return new EitherT<>(\n                                 monads);\n    }", "    public void assertMemberExprDependsOn(String expr, String dimList) {\n        assertSetExprDependsOn(\"{\" + expr + \"}\", dimList);\n    }\n", "public static void groupSelectedNodes ( final ZyGraph graph ) { final List < NaviNode > nodes = filterSelectedNodes ( graph . getSelectedNodes ( ) ) ; if ( ! nodes . isEmpty ( ) ) { groupNodes ( graph , nodes ) ; } }", "@Override\n    public DeleteVpcLinkResult deleteVpcLink(DeleteVpcLinkRequest request) {\n        request = beforeClientExecution(request);\n        return executeDeleteVpcLink(request);\n    }", "    public ASTList sublist(int nth) {\n        ASTList list = this;\n        while (nth-- > 0)\n            list = list.right;\n\n        return list;\n    }\n", "public ListOfferingsResult withOfferings(Offering... offerings) {\n        if (this.offerings == null) {\n            setOfferings(new java.util.ArrayList<Offering>(offerings.length));\n        }\n        for (Offering ele : offerings) {\n            this.offerings.add(ele);\n        }\n        return this;\n    }", "public static DataStorage newDataStorage ( String type ) throws IllegalDataStorageTypeException { DataStorageServiceProvider serviceProvider = DataStorageServiceLoader . getInstance ( ) . getStorageProviderByType ( type ) ; if ( serviceProvider == null ) { throw new IllegalDataStorageTypeException ( STR_ + type + STR_ ) ; } DataStorage dataStorage = serviceProvider . getStorage ( ) ; try { LOG . info ( STR_ + dataStorage ) ; dataStorage . init ( ) ; } catch ( IOException e ) { LOG . error ( STR_ + dataStorage , e ) ; throw new IllegalStateException ( e ) ; } return dataStorage ; }", "public Observable<ServiceResponse<OCR>> oCRFileInputWithServiceResponseAsync(String language, byte[] imageStream, Boolean cacheImage, Boolean enhanced) {\n        if (this.client.baseUrl() == null) {\n            throw new IllegalArgumentException(\"Paramete", "public AbstractBuilder getMethodBuilder(ClassWriter classWriter) {\n        return MethodBuilder.getInstance(context, classWriter.getTypeElement(),\n            writerFactory.getMethodWriter(classWriter));\n    }", "    public void serverStopped() {\n        statusPanel.serverStarted(false);\n        serverPanel.serverStarted(false);\n\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"pageide: server stopped\");\n        }\n    }\n", "\t\tpublic HttpRequestBuilder charset(final String charset) {\n\t\t\tthis.charset = charset;\n\t\t\treturn this;\n\t\t}\n", "private void applyMappings ( Context context , JsonValue source , JsonValue oldSource , JsonValue target , JsonValue existingTarget , String linkQualifier , ReconciliationContext reconContext ) throws SynchronizationException { EventEntry measure = Publis", "    public void print(String destDir, String lineSeparator) {\n\n        String name = getLocalName();\n\n        //-- open output file\n        String filename = getFilename(destDir);\n\n        File file = new File(filename);\n        JSourceWriter jsw = null;\n        try {\n            jsw = new JSourceWriter(new FileWriter(file));\n        }\n        catch(java.io.IOException ioe) {\n            System.out.println(\"unable to create class file: \" + filename);\n            return;\n        }\n        if (lineSeparator == null) {\n            lineSeparator = System.getProperty(\"line.separator\");\n        }\n        jsw.setLineSeparator(lineSeparator);\n        print(jsw);\n        jsw.close();\n        \n    } //-- print\n", "@Nullable\n  public CharSequence getSourceCode() {\n    try {\n      return getPath().getCompilationUnit().getSourceFile().getCharContent(false);\n    } catch (IOException e) {\n      return null;\n    }\n  }", "private void wrapItunesSectionWithBorder ( ) { Node itunesSectionBorder = Borders . wrap ( itunesSectionVBox ) . etchedBorder ( ) . title ( STR_ ) . build ( ) . build ( ) ; parentVBox . getChildren ( ) . remove ( itunesSectionVBox ) ; parentVBox . getChil", "public default MatchResult partialmatch(String str){\n  List<MatchResult> results=find(str,1);\n  if (results.isEmpty()) {\n    return new MatchResult(false);\n  }\n else {\n    return results.get(0);\n  }\n}\n", "protected List<ServletDefinition> getWebXmlServletDefinitions(\n\t\t\tDocument webXmlDoc, ServletContext servletContext,\n\t\t\tList<String> servletsToInitialize, ClassLoader webAppClassLoader)\n\t\t\tthrows ClassNotFoundException {\n\n\t\t// Parse the servlet configurat", "public void addObservations ( double [ ] observations ) throws Exception ;", "private static JFreeChart createBarChart3D(){\n  Number[][] data=new Integer[][]{{new Integer(-3),new Integer(-2)},{new Integer(-1),new Integer(1)},{new Integer(2),new Integer(3)}};\n  CategoryDataset dataset=DatasetUtilities.createCategoryDataset(\"S\",\"C\",data);\n  return ChartFactory.createBarChart3D(\"Bar Chart 3D\",\"Domain\",\"Range\",dataset,PlotOrientation.HORIZONTAL,true,true,true);\n}\n", "@Override\n    public AcceptQualificationRequestResult acceptQualificationRequest(AcceptQualificationRequestRequest request) {\n        request = beforeClientExecution(request);\n        return executeAcceptQualificationRequest(request);\n    }", "public void stop(Map<String, String> additionalMetadata) {\n    if (this.stopped) {\n      return;\n    }\n    this.stopped = true;\n    long endTime = System.currentTimeMillis();\n    long duration = endTime - this.startTime;\n\n    Map<String, String> finalMetadata = Maps.newHashMap();\n    finalMetadata.putAll(additionalMetadata);\n    finalMetadata.put(EventSubmitter.EVENT_TYPE, METADATA_TIMING_EVENT);\n    finalMetadata.put(METADATA_START_TIME, Long.toString(this.startTime));\n    finalMetadata.put(METADATA_END_TIME, Long.toString(endTime));\n    finalMetadata.put(METADATA_DURATION, Long.toString(duration));\n\n    this.submitter.submit(this.name, finalMetadata);\n  }", "protected void assertLength ( int length , int [ ] array ) { assertEquals ( length , array . length ) ; }", "public <T> DataSet<T> groupReduceOnNeighbors(NeighborsFunction<K, VV, EV, T> neighborsFunction,\n\t\t\tEdgeDirection direction, TypeInformation<T> typeInfo) throws IllegalArgumentException {\n\t\tswitch (direction) {\n\t\t\tcase IN:\n\t\t\t\t// create <edge-sourceVertex> pairs\n\t\t\t\tDataSet<Tuple3<K, Edge<K, EV>, Vertex<K, VV>>> edgesWithSources = edges\n\t\t\t\t\t\t.join(this.vertices).where(0).equalTo(0)\n\t\t\t\t\t\t.with(new ProjectVertexIdJoin<>(1))\n\t\t\t\t\t\t.withForwardedFieldsFirst(\"f1->f0\").name(\"Edge with source vertex ID\");\n\t\t\t\treturn edgesWithSources.groupBy(0).reduceGroup(\n\t\t\t\t\tnew ApplyNeighborGroupReduceFunction<>(neighborsFunction))\n\t\t\t\t\t\t.name(\"Neighbors function\").returns(typeInfo);\n\t\t\tcase OUT:\n\t\t\t\t// create <edge-targetVertex> pairs\n\t\t\t\tDataSet<Tuple3<K, Edge<K, EV>, Vertex<K, VV>>> edgesWithTargets = edges\n\t\t\t\t\t\t.join(this.vertices).where(1).equalTo(0)\n\t\t\t\t\t\t.with(new ProjectVertexIdJoin<>(0))\n\t\t\t\t\t\t.withForwardedFieldsFirst(\"f0\").name(\"Edge with target vertex ID\");\n\t\t\t\treturn edgesWithTargets.groupBy(0).reduceGroup(\n\t\t\t\t\tnew ApplyNeighborGroupReduceFunction<>(neighborsFunction))\n\t\t\t\t\t\t.name(\"Neighbors function\").returns(typeInfo);\n\t\t\tcase ALL:\n\t\t\t\t// create <edge-sourceOrTargetVertex> pairs\n\t\t\t\tDataSet<Tuple3<K, Edge<K, EV>, Vertex<K, VV>>> edgesWithNeighbors = edges\n\t\t\t\t\t\t.flatMap(new EmitOneEdgeWithNeighborPerNode<>())\n\t\t\t\t\t\t.join(this.vertices).where(1).equalTo(0)\n\t\t\t\t\t\t.with(new ProjectEdgeWithNeighbor<>()).name(\"Edge with vertex ID\");\n\n\t\t\t\treturn edgesWithNeighbors.groupBy(0).reduceGroup(\n\t\t\t\t\tnew ApplyNeighborGroupReduceFunction<>(neighborsFunction))\n\t\t\t\t\t\t.name(\"Neighbors function\").returns(typeInfo);\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalArgumentException(\"Illegal edge direction\");\n\t\t}\n\t}", "void loadTypeIds ( ) throws IOException { int count = mHeaderItem . typeIdsSize ; mTypeIds = new TypeIdItem [ count ] ; seek ( mHeaderItem . typeIdsOff ) ; for ( int i = NUM_ ; i < count ; i ++ ) { mTypeIds [ i ] = new TypeIdItem ( ) ; mTypeIds [ i ] . descriptorIdx = readInt ( ) ; } }", "public void addValueSetParticipantObject(String valueSetUniqueId, String valueSetName, String valueSetVersion)\n\t{\n\t\tif (valueSetName == null){\n\t\t\tvalueSetName = \"\";\n\t\t}\n\t\tif (valueSetVersion == null){\n\t\t\tvalueSetVersion = \"\";\n\t\t}\n\t\tList<TypeValuePairType> tvp = new LinkedList<>();\n\t\ttvp.add(getTypeValuePair(\"Value Set Version\", valueSetVersion.getBytes()));\n\t\taddParticipantObjectIdentification(\n\t\t\t\tnew RFC3881ParticipantObjectCodes.RFC3881ParticipantObjectIDTypeCodes.ReportNumber(), \n\t\t\t\tvalueSetName, \n\t\t\t\tnull, \n\t\t\t\ttvp, \n\t\t\t\tvalueSetUniqueId, \n\t\t\t\tRFC3881ParticipantObjectTypeCodes.SYSTEM, \n\t\t\t\tRFC3881ParticipantObjectTypeRoleCodes.REPORT,\n\t\t\t\tnull, \n\t\t\t\tnull);\n\t}", "public void testDecodeAttributeBodyV6 ( ) throws StunException { byte [ ] attributeValue = msgFixture . requestedAddressFamilyV6 ; char offset = Attribute . HEADER_LENGTH ; char length = ( char ) ( attributeValue . length - offset ) ; requestedAddressFami", "  public void addTreeNode(Object object, TreeNode tNode) {\n    IXTreeTableNode ttn = (IXTreeTableNode)tNode;\n    //Debug.noteln(\"ATTM:***Adding node for object:\",\n    //\t ttn.toString() + \" (\" + ttn.toDebug() + \") \");\n    nodeMap.put(object, tNode);\n  }\n", "@Override public boolean equals(Object o){\n  if (o == null)   return false;\n  if (o == this)   return true;\n  if (!(o instanceof Attribute))   return false;\n  final Attribute attribute=(Attribute)o;\n  if (name != null ? !name.equals(attribute.name) : attribute.name != null)   return false;\n  if (compareValue)   if (value != null ? !value.equals(attribute.value) : attribute.value != null)   return false;\n  return true;\n}\n", "\tpublic void reloadStrings() {\n\n\t\tloadStrings();\n\t}\n", "\tpublic GeometryRule getRuleByName(String name) {\n\t\tfor (GeometryRule rule : rules) {\n\t\t\tif (rule.getName().equals(name)) {\n\t\t\t\treturn rule;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n", "public void store ( String filenameToSave , String comments ) throws FileNotFoundException , FileAlreadyExistsException { if ( StringUtils . isEmpty ( filenameToSave ) ) { throw new FileNotFoundException ( ) ; } if ( filenameToSave . equals ( filename ) )", "public static TrustManager[] getTrustManagers(Info pathInfo) throws Exception {\n        File trustStoreFile = new File(pathInfo.store);\n        if (!trustStoreFile.isFile()) {\n            throw new Exception(\"No TrustManager: \" + pathInfo.store + \" does not exist.\");\n        }\n        String trustStorePassword = pathInfo.password;\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n        KeyStore truststore = KeyStore.getInstance(\"JKS\");\n\n        FileInputStream fis = new FileInputStream(pathInfo.store);\n        truststore.load(fis, trustStorePassword.toCharArray());\n        fis.close();\n        tmf.init(truststore);\n        return tmf.getTrustManagers();\n    }", "static boolean getLoadLocalLibsFirstForFile(final File file) {\n        Attributes attributes = loadMainAttributes(file);\n        if (null == attributes) {\n            return false;\n        }\n        boolean loadFirstDefault=true;\n        String loadFirst ", "< T > List < T > result ( ) throws Exception ;", "public boolean getFlag(int index)\n   {\n      return BooleanHelper.getBoolean((Boolean) getCachedValue(selectField(ResourceFieldLists.CUSTOM_FLAG, index)));\n   }", "public Timestamp randomTimestamp(){\n  if (random.nextInt(10) == 0) {\n    return null;\n  }\n  StringBuilder buff=new StringBuilder();\n  buff.append(getInt(10) + 2000);\n  buff.append('-');\n  int month=getInt(12) + 1;\n  if (month < 10) {\n    buff.append('0');\n  }\n  buff.append(month);\n  buff.append('-');\n  int day=getInt(28) + 1;\n  if (day < 10) {\n    buff.append('0');\n  }\n  buff.append(day);\n  buff.append(' ');\n  int hour=getInt(24);\n  if (hour < 10) {\n    buff.append('0');\n  }\n  buff.append(hour);\n  buff.append(':');\n  int minute=getInt(60);\n  if (minute < 10) {\n    buff.append('0');\n  }\n  buff.append(minute);\n  buff.append(':');\n  int second=getInt(60);\n  if (second < 10) {\n    buff.append('0');\n  }\n  buff.append(second);\n  return Timestamp.valueOf(buff.toString());\n}\n", "    public void removePropertyChangeListener(PropertyChangeListener listener) {\n        if(propertyChangeSupport != null)\n            propertyChangeSupport.removePropertyChangeListener(listener);\n    }\n", "public int size ( ) { return values . size ( ) ; }", "public double sumWithWeights(){\n  double dSum=0;\n  for (  TKeyType dKey : hDistro.keySet()) {\n    if (dKey instanceof Double)     dSum+=((Double)dKey * getValue(dKey));\n else     dSum+=getValue(dKey);\n  }\n  return dSum;\n}\n", "public boolean isCapabilitiesValid(Capabilities capabilities){\n  long msgCapValidityPeriod=mRcsSettings.getMsgCapValidityPeriod();\n  return System.currentTimeMillis() <= capabilities.getTimestampOfLastResponse() + msgCapValidityPeriod;\n}\n", "public void handleCheckXtnStatusInTm ( CheckXtnStatusInTmBusPackect packet ) { boolean aliveInTm = BOOL_ ; int state ; try { state = packet . getTx ( ) . getState ( ) ; aliveInTm = state != TransactionConstants . ABORTED ; } catch ( Exception ex ) { } syn", "public IntegerComponentRaster(SampleModel sampleModel,DataBuffer dataBuffer,Point origin){\n  this(sampleModel,dataBuffer,new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);\n}\n", "public RawTypeInstanceReference ( final int moduleId , final int viewId , final IAddress address , final int operandPosition , final int expressionId , final int typeInstanceId ) { this . moduleId = moduleId ; this . viewId = viewId ; this . address = Pre", "public java.awt.Graphics2D createGraphics(float width, float height) {\n        return new PdfGraphics2D(this, width, height, null, false, false, 0);\n    }", "public CEdgeLabelEnterState ( final CStateFactory < NodeType , EdgeType > factory , final AbstractZyGraph < NodeType , EdgeType > graph , final EdgeLabel label ) { m_factory = Preconditions . checkNotNull ( factory , STR_ ) ; m_graph = Preconditions . che", "@Override\n\tpublic void seek(int recordIndex) throws IOException {\n\t\treadHeader();\n\t\tint ri = recordIndex;\n\t\tif (ri < 0) {\n\t\t\tri = 0;\n\t\t}\n\t\tif (ri >= this.recordCount) {\n\t\t\tthrow new EOFException();\n\t\t}\n\n\t\t// Goto the record\n\t\tsetReadingPosition(recordIndex, RECORD_SIZE * ri);\n\t}", "private ParseTree transformLeftHandSideExpression(ParseTree tree) {\n    switch (tree.type) {\n      case ARRAY_LITERAL_EXPRESSION:\n      case OBJECT_LITERAL_EXPRESSION:\n        resetScanner(tree);\n        // If we fail to parse as an LeftHandSidePattern then\n        // parseLeftHandSidePattern will take care reporting errors.\n        return parseLeftHandSidePattern();\n      default:\n        return tree;\n    }\n  }", "Item ( final int index , final Item i ) { this . index = index ; type = i . type ; intVal = i . intVal ; longVal = i . longVal ; strVal1 = i . strVal1 ; strVal2 = i . strVal2 ; strVal3 = i . strVal3 ; hashCode = i . hashCode ; }", "static String normalizeString(String string, int desiredLength) {\n    if (string == null || string.length() == 0) {\n      throw new IllegalArgumentException(\"Must supply a non-null, non-empty string.\");\n    }\n    if (desiredLength <= 0) {\n      throw new IllegalArgumentException(\"Desired length must be greater than zero.\");\n    }\n    if (string.length() >= desiredLength) {\n      return string.substring(0, desiredLength);\n    } else {\n      StringBuilder builder = new StringBuilder(string);\n      while (builder.length() < desiredLength) {\n        builder.append(string);\n      }\n      return builder.substring(0, desiredLength);\n    }\n  }", "boolean doActionDeviceRenameInternet ( String deviceKey , String deviceName ) ;", "static void removeFromDb(Connection conn,Object key) throws SQLException {\n  PreparedStatement stmt=null;\n  try {\n    stmt=conn.prepareStatement(\"delete from CACHE where k = ?\");\n    stmt.setBinaryStream(1,new ByteArrayInputStream(H2CacheStore.serialize(key)));\n    stmt.executeUpdate();\n  }\n  finally {\n    U.closeQuiet(stmt);\n  }\n}\n", "public static Object sum ( Object [ ] items ) { return sum ( ( Iterable ) Arrays . asList ( items ) ) ; }", "public IMouseState createEdgeExitState ( final Edge e , final MouseEvent event ) { final CEdgeExitState state = new CEdgeExitState ( this , m_graph , e ) ; m_factory . createEdgeExitAction ( ) . execute ( state , event ) ; return state ; }", "public static boolean isNull(URI id){\n  return (id == null) || NULL_URI.equals(id);\n}\n", "public CTextNodeMenu ( final JFrame parent , final INaviView view , final CTextNode node ) { Preconditions . checkNotNull ( parent , STR_ ) ; Preconditions . checkNotNull ( view , STR_ ) ; Preconditions . checkNotNull ( node , STR_ ) ; add ( new JMenuItem ( CActionProxy . proxy ( new CEditTextAction ( parent , node ) ) ) ) ; addSeparator ( ) ; add ( CActionProxy . proxy ( new CActionDeleteNode ( view , node ) ) ) ; }", "public static SourceUnit create ( String name , String source ) { CompilerConfiguration configuration = new CompilerConfiguration ( ) ; configuration . setTolerance ( NUM_ ) ; return new SourceUnit ( name , source , configuration , null , new ErrorCollect", "public PerDirectorySuite(Class<?> klass) throws Throwable {\n  super(klass,Collections.<Runner>emptyList());\n  final TestClass testClass=getTestClass();\n  final Class<?> javaTestClass=testClass.getJavaClass();\n  final List<List<File>> parametersList=getParametersList(testClass);\n  for (  List<File> parameters : parametersList) {\n    runners.add(new PerParameterSetTestRunner(javaTestClass,parameters));\n  }\n}\n", "void cancel ( boolean waitForResponse ) { cancelled = BOOL_ ; if ( ! waitForResponse ) { if ( lock . tryLock ( ) ) { try { lockCondition . signal ( ) ; } finally { lock . unlock ( ) ; } } } }", "private static BitMatrix bitMatrixFrombitArray ( byte [ ] [ ] input , int margin ) { BitMatrix output = new BitMatrix ( input [ NUM_ ] . length + NUM_ * margin , input . length + NUM_ * margin ) ; output . clear ( ) ; for ( int y = NUM_ , yOutput = output", "private void obtainNavigationWidth() {\n        int navigationWidth;\n\n        try {\n            navigationWidth = ThemeUtil.getDimensionPixelSize(this, R.attr.navigationWidth);\n        } catch (NotFoundException e) {\n            navigationWidth = getResources().getDimensionPixelSize(R.dimen.navigation_width);\n        }\n\n        setNavigationWidth(navigationWidth);\n    }", "private static boolean compare(byte[] what, String with) {\n    if (what.length != with.length()) {\n      return false;\n    }\n    for (int i = 0; i < what.length; i++) {\n      if (with.charAt(i) != what[i]) {\n        return false;\n      }\n    }\n    return true;\n  }", "public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) ;", "    public boolean add(E object) {\n        validate(object);\n        return getCollection().add(object);\n    }\n", "    public void removeSuperProperty( Property prop ) {\n        removePropertyValue( getProfile().SUB_PROPERTY_OF(), \"SUB_PROPERTY_OF\", prop );\n    }\n", "  public void setCantPalabras(int v) {\n    if (InfoDoc_Type.featOkTst && ((InfoDoc_Type)jcasType).casFeat_cantPalabras == null)\n      jcasType.jcas.throwFeatMissing(\"cantPalabras\", \"org.idtem.component.algoritmo.InfoDoc\");\n    jcasType.ll_cas.ll_setIntValue(addr, ((InfoDoc_Type)jcasType).casFeatCode_cantPalabras, v);}    \n", "   public void connect(User user) {\n\n      if (!isConnected() && !isConnecting()) {\n         _user = user;\n\n         _connection = new IRCConnection(\n            _name,\n            _ports[0],\n            _user.getName(),\n            _user.getAltNick(),\n            _user.getUserName(),\n            _user.getFullName());\n\n         _connection.setIRCConnectionListener(getServerMux());\n         _connection.open();\n      }\n      else {\n         fireStatusEvent(\"Cannot connect: already connected.\");\n      }\n   }\n", "public static boolean checkFileReadToken ( PsiBuilder b , int l ) { IElementType tokenType = b . getTokenType ( ) ; if ( tokenType == LEFT_ANGLE ) { b . advanceLexer ( ) ; return BOOL_ ; } if ( tokenType == OPERATOR_LT_NUMERIC && b . getLatestDoneMarker ( ) != null && b . getLatestDoneMarker ( ) . getTokenType ( ) == BLOCK ) { PsiBuilder . Marker m = b . mark ( ) ; b . advanceLexer ( ) ; m . collapse ( LEFT_ANGLE ) ; return BOOL_ ; } return BOOL_ ; }", "public static void doWithFields ( Class targetClass , FieldCallback fc , FieldFilter ff ) throws IllegalArgumentException { do { Field [ ] fields = targetClass . getDeclaredFields ( ) ; for ( int i = NUM_ ; i < fields . length ; i ++ ) { if ( ff != null &", "@SuppressWarnings(\"unchecked\")\n\tpublic <E> TerminalResult IN_list(E... value) {\n\t\tgetPredicateExpression().setOperator(Operator.IN);\n\t\tgetPredicateExpression().setValue_2(value);\n\t\tTerminalResult ret = APIAccess.createTerminalResult(this.getPredicateExpression());\n\t\tQueryRecorder.recordInvocation(this, \"IN_list\", ret, QueryRecorder.placeHolder(value));\n\t\treturn ret;\n\t}", "public static Iterable<CallSet> getCallSets(String variantSetId, OfflineAuth auth)\n      throws IOException {\n    Genomics genomics = GenomicsFactory.builder().build().fromOfflineAuth(auth);\n    return Paginator.Callsets.create(genomics)\n        .search(new SearchCallSetsRequest().setVariantSetIds(Lists.newArrayList(variantSetId)),\n            \"callSets,nextPageToken\");\n  }", "public void gi ( char [ ] buff , int offset , int length ) throws SAXException ;", "\tpublic double get(int row, int col){\n\t\tif(row >= 0 && col >= 0 && row < m[0].length && col < m.length){\n\t\t\treturn m[col][row];\n\t\t}\n\t\telse{\n\t\t\tthrow new MatrixException(\"index out of range : \" + row + \"x\" + col + \" in \" \n\t\t\t\t\t+ m[0].length + \"x\" + m.length);\n\t\t}\n\t}\n", "    public void setSelectedChapter( int selectedChapter ) {\n\n        chaptersController.setSelectedChapterInternal( selectedChapter );\n        mainWindow.reloadData( );\n    }\n", "public static String [ ] parseSet ( String setDefinition ) { return EnumToStringFilter . parseListDefString ( STR_ , setDefinition ) ; }", "private int getValueAccordingBoundaries(final int value) {\n\n\t\t// check boundaries\n\t\tfinal int newValue;\n\t\tif (value < 0) {\n\t\t\tnewValue = 0;\n\t\t}\n\t\telse if (value > getMaxValue()) {\n\t\t\tnewValue = getMaxValue();\n\t\t}\n\t\telse {\n\t\t\tnewValue = value;\n\t\t}\n\t\treturn newValue;\n\n\t}", "protected final void assertLogMessageContains ( String needle ) { LoggingEvent hit = null ; Iterator < LoggingEvent > iter = loggedEvents . iterator ( ) ; while ( hit == null && iter . hasNext ( ) ) { LoggingEvent event = iter . next ( ) ; if ( event . ge", "public final void packageDeclaration() throws RecognitionException {\n\t\tint packageDeclaration_StartIndex = input.index();\n\n\t\ttry {\n\t\t\tif ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return; }\n\n\t\t\t// src/main/resources/org/drools/compiler/semantics/java/parser/Java.g:277:5: ( 'package' qualifiedName ';' )\n\t\t\t// src/main/resources/org/drools/compiler/semantics/java/parser/Java.g:277:7: 'package' qualifiedName ';'\n\t\t\t{\n\t\t\tmatch(input,99,FOLLOW_99_in_packageDeclaration132); if (state.failed) return;\n\t\t\tpushFollow(FOLLOW_qualifiedName_in_packageDeclaration134);\n\t\t\tqualifiedName();\n\t\t\tstate._fsp--;\n\t\t\tif (state.failed) return;\n\t\t\tmatch(input,52,FOLLOW_52_in_packageDeclaration136); if (state.failed) return;\n\t\t\t}\n\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\treportError(re);\n\t\t\trecover(input,re);\n\t\t}\n\t\tfinally {\n\t\t\t// do for sure before leaving\n\t\t\tif ( state.backtracking>0 ) { memoize(input, 2, packageDeclaration_StartIndex); }\n\n\t\t}\n\t}", "public static void setContent (JInternalDialog dialog, JPanel content)\n    {\n        Container holder = dialog.getContentPane();\n        holder.removeAll();\n        holder.add(content, BorderLayout.CENTER);\n        dialog.pack();\n    }", "public double get(long key) {\n\tint i = indexOfKey(key);\n\tif (i<0) return 0; //not contained\n\treturn values[i];\n}\n", "void changedDescription ( TraceList traceList ) ;", "public void visitFieldInsn ( int opcode , String owner , String name , String desc ) { if ( mv != null ) { mv . visitFieldInsn ( opcode , owner , name , desc ) ; } }", "protected void addVerbatimBeforeComponent(\n            UIComponentClassicTagBase parentTag,\n            UIComponent verbatim,\n            UIComponent component) {\n\n        UIComponent parent = component.getParent();\n        if (null == parent) {\n            return;\n        }\n\n        List<UIComponent> children = parent.getChildren();\n        // EDGE CASE:\n        // Consider CASE 1 or 2 where the component is provided via a\n        // component binding in session or application scope.\n        // The automatically created UIOuput instances for the template text\n        // will already be present.  Check the JSP_CREATED_COMPONENT_IDS attribute,\n        // if present and the number of created components is the same\n        // as the number of children replace at a -1 offset from the current\n        // value of indexOfComponentInParent, otherwise, call add()\n        List createdIds = (List)\n                parent.getAttributes().get(JSP_CREATED_COMPONENT_IDS);\n        int indexOfComponentInParent = children.indexOf(component);\n        boolean replace =\n                (indexOfComponentInParent > 0 && createdIds != null &&\n                        createdIds.size() == children.size());\n        if (replace) {\n            UIComponent oldVerbatim = children.get(indexOfComponentInParent - 1);\n            if (oldVerbatim instanceof UIOutput && oldVerbatim.isTransient()) {\n                children.set((indexOfComponentInParent - 1), verbatim);\n            } else {\n                children.add(indexOfComponentInParent, verbatim);\n            }\n        } else {\n            children.add(indexOfComponentInParent, verbatim);\n        }\n        parentTag.addChild(verbatim);\n    }", "public static OutputStream leftShift ( OutputStream self , byte [ ] value ) throws IOException { self . write ( value ) ; self . flush ( ) ; return self ; }", "boolean isHeadless ( ) ;", "    public void updateDouble(int columnIndex, double x) throws SQLException {\n        myResultSet.updateDouble(columnIndex, x);\n    }\n", "    private void mark(BufferedInputStream bis) {\n        mark = col;\n        bis.mark(Integer.MAX_VALUE);\n    }\n", "public static Boolean implies ( Boolean left , Boolean right ) { return ! left || right ; }", "    public void RemoveErrorOccuredListener(ErrorOccuredListener listener) {\n        this.error_occured_listener.remove(listener);\n    }\n", "    public void contextualize(Context context) throws ContextException {\n        ParsedContextURLProtocolHandler.setContext(\n            (org.apache.cocoon.environment.Context)context.get(Constants.CONTEXT_ENVIRONMENT_CONTEXT));\n        ParsedURL.registerHandler(new ParsedContextURLProtocolHandler());\n        ParsedURL.registerHandler(new ParsedResourceURLProtocolHandler());\n    }\n", "public static void performAndWaitForWindowChange(SWTBot bot,Runnable runnable){\n  SWTBotShell shell=bot.activeShell();\n  runnable.run();\n  waitUntilShellIsNotActive(bot,shell);\n}\n", "\tpublic boolean setDataUnit(T dataUnit) {\n\t\tif (dataUnit != null) {\n\t\t\ttargetMotionLocaliser.setCurrentEventIndex(dataUnit.getDatabaseIndex(), null);\n\t\t}\n\t\treturn false;\n\t}\n", "   public String showboard() {\n      return board.toString();\n   }\n", "public void removePropertyChangeListener(final PropertyChangeListener l){\n  propertySupport.removePropertyChangeListener(l);\n}\n", "public char next() throws JSONException {\n\n        if (m_useLastChar) {\n            m_useLastChar = false;\n            if (m_lastChar != 0) {\n                m_index += 1;\n            }\n            return m_lastChar;\n        }\n        int c;\n        try {\n            c = m_reader.read();\n        } catch (IOException exc) {\n            throw new JSONException(exc);\n        }\n\n        if (c <= 0) { // End of stream\n            m_lastChar = 0;\n            return 0;\n        }\n        m_index += 1;\n        m_lastChar = (char)c;\n        return m_lastChar;\n    }", "\tprivate Vector changeDirection(Vector vector){\n\t\tif (player.isWhite()){\n\t\t\treturn vector;\n\t\t} else {\n\t\t\treturn Vector.changeDirection(vector);\n\t\t}\n\t}\n", "  public void sort()\n  { /* sort */\n    if(nSamples==0)\n      return;\n    \n    int \n      n= 0,\n      idx,\n      sortIdx[]= Sort.bubbleSortIndex(sampleNames, nSamples, true);\n    String sampleNamesTmp[]= new String[nSamples];\n    DbSample sampleListTmp[]= new DbSample[nSamples];\n    \n    for(int i=0;i<nSamples;i++)\n    {\n      idx=  sortIdx[i];      \n      sampleNamesTmp[n]= sampleNames[idx];\n      sampleListTmp[n++]= sampleList[idx];\n    }\n    \n    sampleNames= sampleNamesTmp;\n    sampleList= sampleListTmp;\n  } /* sort */\n", "public EventStoreBuilder withoutUserCredentials ( ) { settingsBuilder . withoutUserCredentials ( ) ; return this ; }", "public Object parse ( byte [ ] bytes ) { if ( bytes == null ) { throw new IllegalArgumentException ( STR_ ) ; } Object content ; content = createParser ( ) . parse ( bytes ) ; return content ; }", "private void send ( DatagramPacket [ ] packets ) throws InterruptedIOException { if ( multicastInterfaces != null ) { Level failureLogLevel = multicastInterfacesSpecified ? Level . WARNING : Levels . HANDLED ; for ( int i = NUM_ ; i < multicastInterfaces ", "public void testPipelineShutdownAfterEvent ( ) throws Exception { TungstenProperties config = helper . createSimpleRuntime ( ) ; ReplicatorRuntime runtime = new ReplicatorRuntime ( config , new MockOpenReplicatorContext ( ) , ReplicatorMonitor . getInstance ( ) ) ; runtime . configure ( ) ; runtime . prepare ( ) ; Pipeline pipeline = runtime . getPipeline ( ) ; pipeline . start ( new MockEventDispatcher ( ) ) ; Thread . sleep ( NUM_ ) ; Future < Pipeline > future = pipeline . shutdownAfterEventId ( STR_ ) ; Pipeline p = future . get ( NUM_ , TimeUnit . SECONDS ) ; assertEquals ( STR_ , pipeline , p ) ; assertTrue ( STR_ , pipeline . isShutdown ( ) ) ; pipeline . shutdown ( BOOL_ ) ; pipeline . release ( runtime ) ; }", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "private void doFlush(byte[][] toFlush,int len) throws IOException {\n  int bidx=0, widx=0;\n  ByteBuffer writevBufs[]=new ByteBuffer[2 * WRITEV_SIZE];\n  while (true) {\n    if (widx == writevBufs.length) {\n      channel.write(writevBufs);\n      widx=0;\n    }\n    if (bidx == len) {\n      break;\n    }\n    writevBufs[widx]=ByteBuffer.wrap(toFlush[bidx]);\n    writevBufs[widx + 1]=newlineBuf;\n    bidx++;\n    widx+=2;\n  }\n  if (widx > 0) {\n    channel.write(writevBufs,0,widx);\n  }\n}\n", "public static boolean hasEnoughSpace(String recordingSdcard){\n  boolean ret=false;\n  try {\n    StatFs fs=new StatFs(recordingSdcard);\n    long blocks=fs.getAvailableBlocks();\n    long blockSize=fs.getBlockSize();\n    long spaceLeft=blocks * blockSize;\n    Log.d(TAG,\"hasEnoughSpace: available space=\" + spaceLeft);\n    ret=spaceLeft > LOW_SPACE_THRESHOLD ? true : false;\n  }\n catch (  IllegalArgumentException e) {\n    Log.e(TAG,\"sdcard may be unmounted:\" + recordingSdcard);\n  }\n  return ret;\n}\n", "public boolean isDrawingViews ( ) { return drawViews ; }", "public ClasspathScanDescriptorProvider scanPackage(final String packageName, final boolean recursive,\n            final ClassLoader classLoader, final boolean strictClassLoader) {\n        return scanPackage(packageName, recursive, classLoader, strictClass", "public static void write ( Path self , String text , String charset ) throws IOException { write ( self , text , charset , BOOL_ ) ; }", "public String sqlTypeToString ( int sqlType ) { return sqlTypes . get ( sqlType ) ; }", "public ServiceFuture<OperationStatus> deletePrebuiltAsync(UUID appId, String versionId, UUID prebuiltId, final ServiceCallback<OperationStatus> serviceCallback) {\n        return ServiceFuture.fromResponse(deletePrebuiltWithServiceResponseAsync(appId, versionId, prebuiltId), serviceCallback);\n    }", "public static void saveLogoutOnExitPref(boolean logoutOnExit){\n  Preferences prefs=getPrefs();\n  prefs.putBoolean(getCustomUserKey(LOGOUT_ON_EXIT_KEY),logoutOnExit);\n  flushPrefs(prefs);\n}\n", "\tpublic Category getCategory(long id){\n\t\tCriteria crit  = session.createCriteria(Category.class);\n\t\tcrit.add(Restrictions.idEq(id));\n\t\treturn (Category)crit.uniqueResult();\n\t}\n", "public void setPort(int p_port) throws MalformedURIException\n  {\n\n    if (p_port >= 0 && p_port <= 65535)\n    {\n      if (m_host == null)\n      {\n        throw new MalformedURIException(\n          Utils.messages.createMessage(MsgKey.ER_PORT_WHEN_HOST_NULL, null)); //\"Port cannot be set when host is null!\");\n      }\n    }\n    else if (p_port != -1)\n    {\n      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_INVALID_PORT, null)); //\"Invalid port number!\");\n    }\n\n    m_port = p_port;\n  }", "public void testPipelineShutdownAfterEvent ( ) throws Exception { TungstenProperties config = helper . createSimpleRuntime ( ) ; ReplicatorRuntime runtime = new ReplicatorRuntime ( config , new MockOpenReplicatorContext ( ) , ReplicatorMonitor . getInstan", "@org.junit.Test public void verifyGetBigDecimalResponse() throws Exception {\n  Map<String,String> queryParams=new HashMap<String,String>();\n  String str=client.invokeAPI(\"/mockResponses/primitiveBigDecimalResponse\",\"GET\",queryParams,null,new HashMap<Strin", "@Override protected final boolean canCompact(){\n  return storeType == StoreTypeEnum.RW;\n}\n", "protected void saveProperties(Properties props,File filehandle,String header) throws SMSException {\n  FileOutputStream fileostr=null;\n  try {\n    fileostr=new FileOutputStream(filehandle);\n    props.store(fileostr,header);\n  }\n catch (  FileNotFoundException e) {\n    String errmsg=\"SMSFlatFileObjectBase.saveProperties: \" + (header == null ? \"\" : header + \": \") + \" File, \"+ filehandle.getPath()+ \". Exception: \"+ e.getMessage();\n    mDebug.error(\"SMSFlatFileObjectBase.saveProperties\",e);\n    throw new ServiceNotFoundException(errmsg);\n  }\ncatch (  IOException e) {\n    String errmsg=\"SMSFlatFileObjectBase.saveProperties: \" + (header == null ? \"\" : header + \": \") + \" File, \"+ filehandle.getPath()+ \". Exception: \"+ e.getMessage();\n    mDebug.error(\"SMSFlatFileObjectBase.saveProperties\",e);\n    throw new ServiceNotFoundException(errmsg);\n  }\n finally {\n    try {\n      fileostr.close();\n    }\n catch (    IOException e) {\n    }\n  }\n}\n", "private synchronized Terms drawFromQueue(){\n  if (theQ.isEmpty())   populateQueue();\n  Terms toReturn=theQ.poll();\n  return toReturn;\n}\n", "public CommentToken ( String str , int col , int sub , boolean pseudo ) { type = Token . COMMENT ; column = col ; string = str ; rsubtype = sub ; subtype = NUM_ ; switch ( rsubtype ) { case NORMAL : delimiters = pseudo ? NUM_ : NUM_ ; break ; case LINE : ", "public Map<String, String> getAutoScalingGroupTags(String autoScalingGroupName) {\n        Preconditions.checkArgument(autoScalingGroupName != null && !autoScalingGroupName.isEmpty());\n        AutoScalingGroup group = this.getAutoScalingGroup(autoScalingGroupName);\n        Map<String, String> tags = new HashMap<>();\n        for (TagDescription tagDescription : group.getTags()) {\n            tags.put(tagDescription.getKey(), tagDescription.getValue());\n        }\n        return tags;\n    }", "public SDVariable sizeAt(String name, SDVariable in, int dimension) {\n        SDVariable ret = f().sizeAt(in, dimension);\n        return updateVariableNameAndReference(ret, name);\n    }", "    private void categorySelected(Category category) {\n        System.out.println(\"Category selected: \" + category);\n    }\n", "private void notifyModuleViews ( final INaviModule module ) { for ( final INaviView view : module . getContent ( ) . getViewContainer ( ) . getViews ( ) ) { for ( final IViewContainerListener listener : m_listeners ) { try { listener . addedView ( CProjec", "public final T parseXml(Element element, ICalParameters parameters, ParseContext context) {\n\t\tT property = _parseXml(new XCalElement(element), parameters, context);\n\t\tproperty.setParameters(parameters);\n\t\treturn property;\n\t}", "public static final <T> Transformer<T, List<T>> bufferWhile(Func1<? super T, Boolean> predicate,\n            int capacityHint) {\n        return new OperatorBufferPredicateBoundary<T>(predicate, RxRingBuffer.SIZE, capacityHint,\n                false);\n    }", "private void waitForHawkularInventory(HttpClientBuilder hcb, StorageAdapterConfiguration storageAdapterConfig)\n            throws Exception {\n        OkHttpClient httpclient = hcb.getHttpClient();\n        String statusUrl = Util\n                .getContextUrlString(storageAdapterConfig.getUrl(), storageAdapterConfig.getInventoryContext())\n                .append(\"status\").toString();\n        Request request = hcb.buildJsonGetRequest(statusUrl, null);\n        int counter = 0;\n        while (true) {\n            Response response = null;\n            try {\n                response = httpclient.newCall(request).execute();\n                if (response.code() != 200) {\n                    if (response.code() != 401) {\n                        log.debugf(\"Hawkular Inventory is not ready yet: %d/%s\", response.code(), response.message());\n                    } else {\n                        log.warnBadHawkularCredentials(response.code(), response.message());\n                    }\n                } else {\n                    String bodyString = response.body().string();\n                    if (checkStatusReallyUp(bodyString)) {\n                        log.infof(\"Hawkular Inventory is ready: %s\", bodyString);\n                        break;\n                    } else {\n                        log.debugf(\"Hawkular Inventory is still starting: %s\", bodyString);\n                    }\n                }\n            } catch (Exception e) {\n                log.debugf(\"Hawkular Inventory is not ready yet: %s\", e.toString());\n            } finally {\n                if (response != null) {\n                    response.body().close();\n                }\n            }\n            Thread.sleep(5000L);\n            counter++;\n            if (counter % 12 == 0) {\n                log.warnConnectionDelayed(counter, \"inventory\", statusUrl);\n            }\n        }\n    }", "public static boolean hasNextKeyTyped(){\nsynchronized (keyLock) {\n    return !keysTyped.isEmpty();\n  }\n}\n", "public static InetAddress findConnectingAddress(InetSocketAddress targetAddress,long maxWaitMillis,long startLoggingAfter) throws IOException {\n  if (targetAddress == null) {\n    throw new NullPointerException(\"targetAddress must not be null\");\n  }\n  if (maxWaitMillis <= 0) {\n    throw new IllegalArgumentException(\"Max wait time must be positive\");\n  }\n  final long startTime=System.currentTimeMillis();\n  long currentSleepTime=MIN_SLEEP_TIME;\n  long elapsedTime=0;\n  while (elapsedTime < maxWaitMillis) {\n    AddressDetectionState strategy=AddressDetectionState.LOCAL_HOST;\n    boolean logging=elapsedTime >= startLoggingAfter;\n    if (logging) {\n      LOG.info(\"Trying to connect to \" + targetAddress);\n    }\n    do {\n      InetAddress address=findAddressUsingStrategy(strategy,targetAddress,logging);\n      if (address != null) {\n        return address;\n      }\nswitch (strategy) {\ncase LOCAL_HOST:\n        strategy=AddressDetectionState.ADDRESS;\n      break;\ncase ADDRESS:\n    strategy=AddressDetectionState.FAST_CONNECT;\n  break;\ncase FAST_CONNECT:\nstrategy=AddressDetectionState.SLOW_CONNECT;\nbreak;\ncase SLOW_CONNECT:\nstrategy=null;\nbreak;\ndefault :\nthrow new RuntimeException(\"Unsupported strategy: \" + strategy);\n}\n}\n while (strategy != null);\nelapsedTime=System.currentTimeMillis() - startTime;\nlong toWait=Math.min(maxWaitMillis - elapsedTime,currentSleepTime);\nif (toWait > 0) {\nif (logging) {\nLOG.info(\"Could not connect. Waiting for {} msecs before next attempt\",toWait);\n}\n else {\nLOG.debug(\"Could not connect. Waiting for {} msecs before next attempt\",toWait);\n}\ntry {\nThread.sleep(toWait);\n}\n catch (InterruptedException e) {\nthrow new IOException(\"Connection attempts have been interrupted.\");\n}\n}\ncurrentSleepTime=Math.min(2 * currentSleepTime,MAX_SLEEP_TIME);\n}\nLOG.warn(\"Could not connect to {}. Selecting a local address using heuristics.\",targetAddress);\nInetAddress heuristic=findAddressUsingStrategy(AddressDetectionState.HEURISTIC,targetAddress,true);\nif (heuristic != null) {\nreturn heuristic;\n}\n else {\nLOG.warn(\"Could not find any IPv4 address that is not loopback or link-local. Using localhost address.\");\nreturn InetAddress.getLocalHost();\n}\n}\n", "protected void verify ( PrivateKey privateKey , Certificate cert ) throws ResourceException { PublicKey publicKey = cert . getPublicKey ( ) ; byte [ ] data = { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ; boolean verified ; try ", "public static Date adddDaysToCurrentDate ( int numberOfDays ) { Date date = new Date ( ) ; Calendar instance = Calendar . getInstance ( ) ; instance . setTime ( date ) ; instance . add ( Calendar . DATE , numberOfDays ) ; return instance . getTime ( ) ; }", "protected GitSettings lookupSettings() {\n                if (getProject() != null && settingsRef != null) {\n                        Reference ref = (Reference) getProject().getReference(settingsRef);\n\n                        if (ref != null) {\n                                GitSettings settings = (GitSettings) ref.getReferencedObject();\n\n                                return settings;\n                        }\n                }\n\n                return null;\n        }", "public Certificate engineGetCertificate(String alias){\n  if (alias == null) {\n    throw new IllegalArgumentException(\"null alias passed to getCertificate.\");\n  }\n  Certificate c=(Certificate)certs.get(alias);\n  if (c == null) {\n    String id=(String)localIds.get(alias);\n    if (id != null) {\n      c=(Certificate)keyCerts.get(id);\n    }\n else {\n      c=(Certificate)keyCerts.get(alias);\n    }\n  }\n  return c;\n}\n", "public static Jose4jRsaJWK getInstance(int size, String alg, String use, String type) {\n\n        String kid = RandomUtils.getRandomAlphaNumeric(KID_LENGTH);\n        KeyPairGenerator keyGenerator = null;\n        try {\n            keyGenerator = KeyPairGenerator.getInstance(\"RSA\");\n        } catch (NoSuchAlgorithmException e) {\n            // This should not happen, since we hardcoded as \"RSA\"\n            if (tc.isDebugEnabled()) {\n                Tr.debug(tc, \"Caught unexpected exception: \" + e.getLocalizedMessage(), e);\n            }\n            return null;\n        }\n\n        keyGenerator.initialize(size);\n        KeyPair keypair = keyGenerator.generateKeyPair();\n\n        RSAPublicKey pubKey = (RSAPublicKey) keypair.getPublic();\n        RSAPrivateKey priKey = (RSAPrivateKey) keypair.getPrivate();\n        Jose4jRsaJWK jwk = new Jose4jRsaJWK(pubKey);\n\n        jwk.setPrivateKey(priKey);\n        jwk.setAlgorithm(alg);\n        jwk.setKeyId(kid);\n        jwk.setUse((use == null) ? JwkConstants.sig : use);\n\n        return jwk;\n    }", "public ImmutableList<EscapingMode> getEscapingModesForNode(SoyNode node) {\n    ImmutableList<EscapingMode> modes = nodeToEscapingModes.get(node);\n    if (modes == null) {\n      modes = ImmutableList.of();\n    }\n    return modes;\n  }", "void enqueue ( K x ) ;", "    public void addPreconditions(Vertex vertex, Set<Edge> preconditionSet) {\n        this.preconditions.put(vertex, preconditionSet);\n    }\n", "public Future < Job > error ( Throwable ex ) { return this . emitError ( ex ) . set ( STR_ , ex . getMessage ( ) ) . compose ( null ) ; }", "static Span readSpan(MessageUnpacker unpacker) throws IOException {\n  int numEntries=unpacker.unpackMapHeader();\n  MilliSpan.Builder builder=new MilliSpan.Builder();\n  while (--numEntries >= 0) {\n    String key=unpacker.unpackString();\n    if (key.length() != 1) {\n      throw new IOException(\"Unknown key \" + key);\n    }\nswitch (key.charAt(0)) {\ncase 'a':\n      builder.spanId(readSpanId(unpacker));\n    break;\ncase 'b':\n  builder.begin(unpacker.unpackLong());\nbreak;\ncase 'e':\nbuilder.end(unpacker.unpackLong());\nbreak;\ncase 'd':\nbuilder.description(unpacker.unpackString());\nbreak;\ncase 'r':\nbuilder.tracerId(unpacker.unpackString());\nbreak;\ncase 'p':\nint numParents=unpacker.unpackArrayHeader();\nSpanId[] parents=new SpanId[numParents];\nfor (int i=0; i < numParents; i++) {\nparents[i]=readSpanId(unpacker);\n}\nbuilder.parents(parents);\nbreak;\ncase 'n':\nint mapEntries=unpacker.unpackMapHeader();\nHashMap<String,String> entries=new HashMap<String,String>(mapEntries);\nfor (int i=0; i < mapEntries; i++) {\nString k=unpacker.unpackString();\nString v=unpacker.unpackString();\nentries.put(k,v);\n}\nbuilder.traceInfo(entries);\nbreak;\ncase 't':\nint listEntries=unpacker.unpackArrayHeader();\nArrayList<TimelineAnnotation> list=new ArrayList<TimelineAnnotation>(listEntries);\nfor (int i=0; i < listEntries; i++) {\nint timelineObjectSize=unpacker.unpackMapHeader();\nlong time=0;\nString msg=\"\";\nfor (int j=0; j < timelineObjectSize; j++) {\nString tlKey=unpacker.unpackString();\nif (tlKey.length() != 1) {\nthrow new IOException(\"Unknown timeline map key \" + tlKey);\n}\nswitch (tlKey.charAt(0)) {\ncase 't':\ntime=unpacker.unpackLong();\nbreak;\ncase 'm':\nmsg=unpacker.unpackString();\nbreak;\ndefault :\nthrow new IOException(\"Unknown timeline map key \" + tlKey);\n}\n}\nlist.add(new TimelineAnnotation(time,msg));\n}\nbuilder.timeline(list);\nbreak;\ndefault :\nthrow new IOException(\"Unknown key \" + key);\n}\n}\nreturn builder.build();\n}\n", "@Override public double utility(double totalWeight,double totalPositiveWeight,Hypothesis hypo){\n  double g=hypo.getCoveredWeight() / totalWeight;\n  double p=hypo.getPositiveWeight() / hypo.getCoveredWeight();\n  if (hypo.getPrediction() == Hypothesis.POSITIVE_CLASS) {\n    return Math.sqrt(g) * (p - this.priors[Hypothesis.POSITIVE_CLASS]);\n  }\n else {\n    return Math.sqrt(g) * (p - this.priors[Hypothesis.NEGATIVE_CLASS]);\n  }\n}\n", "public AddUpdateRowDialog(DefaultTableModel mainTableModel,RowController rowController,Object[] columns,Object[] row,int rowIndex){\n  super(new Frame(),true);\n  initComponents();\n  setLocationRelativeTo(null);\n  defaultTableModel=(DefaultTableModel)addUpdateRowTable.getModel();\n  this.mainTableModel=mainTableModel;\n  this.rowController=rowController;\n  this.columns=columns;\n  this.row=row;\n  this.rowIndex=rowIndex;\n  if (row == null) {\n    setTitle(\"Add new row\");\n    for (    Object column : columns) {\n      defaultTableModel.addRow(new Object[]{column,\"\"});\n    }\n  }\n else {\n    setTitle(\"Update row\");\n    for (int i=0; i < columns.length; i++) {\n      defaultTableModel.addRow(new Object[]{columns[i],row[i]});\n    }\n  }\n}\n", "public static List < User > syncContacts ( List < User > users ) { if ( AuthToken . isAvailable ( ) ) { try { return API . syncContacts ( users ) ; } catch ( RetrofitError e ) { log ( e ) ; } } return null ; }", "\tpublic WijCalendar setDisplayDate(Date displayDate) {\n\t\tgetOptions().put(\"displayDate\", new DateOption(displayDate));\n\t\treturn this;\n\t}\n", "public void run ( ) { try { ILaunchConfiguration config = fTab . getLaunchConfiguration ( ) ; ILaunchConfigurationWorkingCopy copy = null ; if ( config . isWorkingCopy ( ) ) { copy = ( ILaunchConfigurationWorkingCopy ) config ; } else { copy = config . ge", "\tpublic boolean isLed2Set() {\n\t\treturn ledStatusCheck(WIIMOTE_LED_2);\n\t}\n", "protected void assertAnyMode() throws ReplicatorException {\n  if (mode == null)   throw new THLException(\"Log file not initialized for access: file=\" + file.getName());\n}\n", "\tpublic Tag buildTag() {\n\t\tTag tag = super.buildTag(); \n\t\ttag.setName(\"option\");\n\t\ttag.setBody(getLabel());\n\t\tprepareAtts(tag);\n\t\t\n\t\treturn tag;\n\t}\n", "Object invokeOperation(Object implObject, Method method, Object[] args)\n                    throws IllegalAccessException, IllegalArgumentException, InvocationTargetException,\n                    SQLException {\n        if (args != null && args.length == 1 && method.getName().equals(\"getCursor\"))\n            return getCursor(implObject, method, args);\n        return super.invokeOperation(implObject, method, args);\n    }", "\tpublic Music getMusic() {\n\t\tif (m_multiPartsDef == null) {\n\t\t\tif (m_parts == null) //no part at all\n\t\t\t\treturn (m_defaultPart.getMusic());\n\t\t\telse //ah, they are some parts, but no part order\n\t\t\t\t//return the same thing than graphical rendition\n\t\t\t\t//parts in alphabetic order\n\t\t\t\treturn getMusicForGraphicalRendition();\n\t\t}\n\t\telse {\n\t\t\tMusic globalScore = newMusic();\n\t\t\tglobalScore.append(m_defaultPart.getMusic());\n\t\t\tPart[] parts = m_multiPartsDef.toPartsArray();\n\t\t\tfor (int i = 0; i < parts.length; i++) {\n\t\t\t\tglobalScore.append(parts[i].getMusic());\n\t\t\t}\n\t\t\treturn globalScore;\n\t\t}\n\t}\n", "    private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.shape = SerialUtilities.readShape(stream);\n        this.stroke = SerialUtilities.readStroke(stream);\n        this.paint = SerialUtilities.readPaint(stream);\n        this.outlineStroke = SerialUtilities.readStroke(stream);\n        this.outlinePaint = SerialUtilities.readPaint(stream);\n    }\n", "\tpublic void put(Usage usage) {\n\t\tmap.put(usage.getKey(), usage);\n\t\tlinkedList.add(usage);\n\t}\n", "public static HFCAClient createNewInstance(NetworkConfig.CAInfo caInfo) throws MalformedURLException, InvalidArgumentException {\n\n        try {\n            return createNewInstance(caInfo, CryptoSuite.Factory.getCryptoSuite());\n        } catch (MalformedURLException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new InvalidArgumentException(e);\n        }\n    }", "static String genAccess(String tbl,String var,int bits){\n  String access=null;\n  int bitoffset=bits == 1 ? 5 : bits == 2 ? 4 : bits == 4 ? 3 : 0;\n  for (int k=0; k < sizes.length; k++) {\n    int offset=((k < sizes.length - 1) ? 0 : bitoffset);\n    int shift=shifts[k] + offset;\n    String shifted=(shift == 0) ? var : \"(\" + var + \">>\"+ shift+ \")\";\n    int mask=(1 << (sizes[k] - offset)) - 1;\n    String masked=(k == 0) ? shifted : \"(\" + shifted + \"&0x\"+ hex(mask)+ \")\";\n    String index=(k == 0) ? masked : (mask == 0) ? access : \"(\" + access + \"|\"+ masked+ \")\";\n    String indexNoParens=(index.charAt(0) != '(') ? index : index.substring(1,index.length() - 1);\n    String tblname=(k == sizes.length - 1) ? tbl : tableName(k);\n    String fetched=tblname + \"[\" + indexNoParens+ \"]\";\n    String zeroextended=(zeroextend[k] == 0) ? fetched : \"(\" + fetched + \"&0x\"+ hex(zeroextend[k])+ \")\";\n    int adjustment=preshifted[k] ? 0 : sizes[k + 1] - ((k == sizes.length - 2) ? bitoffset : 0);\n    String adjusted=(preshifted[k] || adjustment == 0) ? zeroextended : \"(\" + zeroextended + \"<<\"+ adjustment+ \")\";\n    String bitshift=(bits == 1) ? \"(\" + var + \"&0x1F)\" : (bits == 2) ? \"((\" + var + \"&0xF)<<1)\" : (bits == 4) ? \"((\" + var + \"&7)<<2)\" : null;\n    String extracted=((k < sizes.length - 1) || (bits >= 8)) ? adjusted : \"((\" + adjusted + \">>\"+ bitshift+ \")&\"+ (bits == 4 ? \"0xF\" : \"\" + ((1 << bits) - 1))+ \")\";\n    access=extracted;\n  }\n  return access;\n}\n", "public static void printError ( int errorCode , String parameter ) { printError ( errorCode , new String [ ] { parameter } ) ; }", "\tpublic void mouseClicked(MouseEvent e) {\n\t\tif (e.getSource().equals(redButton))\n\t\t\tdoAction(RED);\n\t\telse if (e.getSource().equals(blueButton))\n\t\t\tdoAction(BLUE);\n\t\telse if (e.getSource().equals(greenButton))\n\t\t\tdoAction(GREEN);\n\t\telse if (e.getSource().equals(yellowButton))\n\t\t\tdoAction(YELLOW);\n\t}\n", "protected boolean isTemporaryDestination ( ) { boolean result = BOOL_ ; if ( m_TopicName . startsWith ( TEMP_TOPIC_PREFIX ) ) { result = BOOL_ ; } return result ; }", "\tpublic DataHashPairListing list(String uri) {\n\t\treturn list(uri, true);\n\t}\n", "void initProgram(){\n  glUseProgram(this.program);\n  viewMatrixUniform=glGetUniformLocation(this.program,\"viewMatrix\");\n  projMatrixUniform=glGetUniformLocation(this.program,\"projMatrix\");\n  viewportSizeUniform=glGetUniformLocation(this.program,\"viewportSize\");\n  glUseProgram(0);\n}\n", "\tprivate void goToStart() {\n\t\twhile (current.previous != null)\n\t\t\tcurrent = current.previous;\n\t}\n", "public ReplEvent take ( long timeout , TimeUnit unit ) throws InterruptedException { if ( eventQueue . size ( ) == NUM_ ) intervalGuard . unreport ( this . taskId ) ; ReplEvent event = eventQueue . poll ( timeout , unit ) ; if ( event != null ) { if ( eve", "private static void writeLogReport(long tDuration,ArrayList<Double> incumbent,double incumbentObjective){\n  log.info(\"Took \" + tDuration + \"ms for \"+ numberOfIterations+ \" iterations.\");\n  log.info(\"=============================================================================\");\n  log.info(\"Algorithm parameters:\");\n  log.info(\"\");\n  log.info(\"     Initial temperature: \" + initialTemperature);\n  log.info(\"     Temperature reduction frequency: \" + temperatureReductionFrequency);\n  log.info(\"     Temperature reduction factor: \" + temperatureReductionFactor);\n  log.info(\"     Number of iterations: \" + numberOfIterations);\n  log.info(\"=============================================================================\");\n  log.info(\"Solution parameters:\");\n  log.info(\"\");\n  log.info(\"     Beta1: \" + incumbent.get(0));\n  log.info(\"     Beta2: \" + incumbent.get(1));\n  log.info(\"     Square error: \" + incumbentObjective);\n  log.info(\"=============================================================================\");\n  log.info(\"Done.\");\n}\n", "public void render(Graphics graphics){\n  if (getNeedToRegenerate() || getNeedToReposition() || !isVisible()) {\n    return;\n  }\n  boolean smallWorld=bitmap != null && corners != null && corners.size() >= 4;\n  if (smallWorld) {\n    float[] xs=corners.get(2);\n    float[] ys=corners.get(3);\n    Point point1=new Point();\n    point1.setLocation((double)xs[0],(double)ys[0]);\n    Point point2=new Point();\n    point2.setLocation((double)xs[2],(double)ys[2]);\n    Graphics g=graphics.create();\n    if (g instanceof Graphics2D && renderRotationAngle != null) {\n      rotate((Graphics2D)g);\n    }\n    renderImage(g,bitmap,point1);\n  }\n  super.render(graphics);\n}\n", "public void checkOverrideAllMethods ( STypeDef sTypeDef ) throws SyntaxException { checkOverride ( sTypeDef ) ; if ( sTypeDef instanceof SClassDef ) { SClassDef c = ( SClassDef ) sTypeDef ; if ( c . modifiers ( ) . contains ( SModifier . ABSTRACT ) ) retu", "public void addURL ( URL url ) { super . addURL ( url ) ; }", "protected static final <T, K extends Serializable>\n    List<K> _keys2Ids(\n                    final Collection<Key<T>> keys\n                    )\n    {\n        List<K>  ids = new ArrayList<K>();\n        if (keys != null ) {\n            for (Key<T>  key : keys) {\n                @SuppressWarnings( \"unchecked\" )\n                K  id = (K)key.getId();\n                ids.add( id );\n            }\n        }\n\n        return ids;\n    }", "private static Comparable<?> castToComparable(Object obj){\n  try {\n    return (Comparable<?>)obj;\n  }\n catch (  ClassCastException cce) {\n    throw new IllegalArgumentException(\"Type \" + obj.getClass() + \" doesn't implement Comparable, Serialization mode might be different than \"+ StorageType.OBJECT+ \".\",cce);\n  }\n}\n", "public PDFPassword ( String passwordString ) { this . passwordString = passwordString != null ? passwordString : STR_ ; }", "public List<CmsResource> readResourcesVisitedBy(CmsObject cms, CmsVisitedByFilter filter) throws CmsException {\n\n        return m_securityManager.readResourcesVisitedBy(cms.getRequestContext(), getPoolName(), filter);\n    }", "\tpublic void propertyChange(PropertyChangeEvent evt) {\n\t\tassert (evt.getSource() == controller);\n\t\tupdateEnabled();\n\t}\n", "private void addTrustedCertChainsIfAbsent(ILdapMessage certChainsOld,List<ArrayList<String>> certChainsNew) throws CertificateEncodingException, NoSuchAlgorithmException {\n  if (certChainsOld != null) {\n    ILdapEntry[] entries=certChainsOld.getEntries();\n    if (entries != null && entries.length > 0) {\n      int certsIndex=getCurrMaxIndex(TRUSTED_CERT_CHAIN_OBJECT_CLASS,CONTAINER_TRUSTED_CERTIFICATE_CHAINS) + 1;\n      String dn=String.format(\"CN=%s,CN=%s,CN=Tenants,CN=IdentityManager,CN=Services,%s\",CONTAINER_TRUSTED_CERTIFICATE_CHAINS,tenantName,this.rootDn);\n      Map<String,LdapMod[]> ldapObjects=new HashMap<>();\n      for (      ILdapEntry lduCert : entries) {\n        ArrayList<String> certFingerprints=new ArrayList<>();\n        certFingerprints.addAll(CertificatesUtil.getCertFingerPrints(lduCert));\n        if (!containsCertChain(certChainsNew,certFingerprints)) {\n          List<LdapMod> objAttributes=createAtts(lduCert);\n          String cn=getTrustedCertChainCn(certsIndex);\n          LdapValue[] values={new LdapValue(cn)};\n          LdapMod mod=new LdapMod(LdapModOperation.ADD,\"cn\",values);\n          objAttributes.add(mod);\n          String objNewDn=\"CN=\" + cn + \",\"+ dn;\n          ldapObjects.put(objNewDn,objAttributes.toArray(new LdapMod[]{}));\n          certsIndex++;\n        }\n      }\n      if (ldapObjects != null && ldapObjects.size() > 0) {\n        addObjects(ldapObjects);\n      }\n    }\n  }\n}\n", "public static void ensureEquivalent(final Message m1,final ActiveMQMessage m2) throws JMSException {\n  ProxyAssertSupport.assertTrue(m1 != m2);\n  ProxyAssertSupport.assertEquals(m1.getJMSTimestamp(),m2.getJMSTimestamp());\n  byte[] corrIDBytes=null;\n  String corrIDString=null;\n  try {\n    corrIDBytes=m1.getJMSCorrelationIDAsBytes();\n  }\n catch (  JMSException e) {\n    corrIDString=m1.getJMSCorrelationID();\n  }\n  if (corrIDBytes != null) {\n    ProxyAssertSupport.assertTrue(Arrays.equals(corrIDBytes,m2.getJMSCorrelationIDAsBytes()));\n  }\n else   if (corrIDString != null) {\n    ProxyAssertSupport.assertEquals(corrIDString,m2.getJMSCorrelationID());\n  }\n else {\n    try {\n      byte[] corrID2=m2.getJMSCorrelationIDAsBytes();\n      ProxyAssertSupport.assertNull(corrID2);\n    }\n catch (    JMSException e) {\n      String corrID2=m2.getJMSCorrelationID();\n      ProxyAssertSupport.assertNull(corrID2);\n    }\n  }\n  ProxyAssertSupport.assertEquals(m1.getJMSReplyTo(),m2.getJMSReplyTo());\n  ProxyAssertSupport.assertEquals(m1.getJMSDestination(),m2.getJMSDestination());\n  ProxyAssertSupport.assertEquals(m1.getJMSDeliveryMode(),m2.getJMSDeliveryMode());\n  ProxyAssertSupport.assertEquals(m1.getJMSType(),m2.getJMSType());\n  ProxyAssertSupport.assertEquals(m1.getJMSExpiration(),m2.getJMSExpiration());\n  ProxyAssertSupport.assertEquals(m1.getJMSPriority(),m2.getJMSPriority());\n  int m1PropertyCount=0, m2PropertyCount=0;\n  for (Enumeration<String> p=m1.getPropertyNames(); p.hasMoreElements(); ) {\n    String name=p.nextElement();\n    if (!name.startsWith(\"JMSX\")) {\n      m1PropertyCount++;\n    }\n  }\n  for (Enumeration p=m2.getPropertyNames(); p.hasMoreElements(); ) {\n    String name=(String)p.nextElement();\n    if (!name.startsWith(\"JMSX\")) {\n      m2PropertyCount++;\n    }\n  }\n  ProxyAssertSupport.assertEquals(m1PropertyCount,m2PropertyCount);\n  for (Enumeration props=m1.getPropertyNames(); props.hasMoreElements(); ) {\n    boolean found=false;\n    String name=(String)props.nextElement();\n    if (name.startsWith(\"JMSX\")) {\n      continue;\n    }\n    boolean booleanProperty=false;\n    try {\n      booleanProperty=m1.getBooleanProperty(name);\n      found=true;\n    }\n catch (    JMSException e) {\n    }\n    if (found) {\n      ProxyAssertSupport.assertEquals(booleanProperty,m2.getBooleanProperty(name));\n      continue;\n    }\n    byte byteProperty=0;\n    try {\n      byteProperty=m1.getByteProperty(name);\n      found=true;\n    }\n catch (    JMSException e) {\n    }\n    if (found) {\n      ProxyAssertSupport.assertEquals(byteProperty,m2.getByteProperty(name));\n      continue;\n    }\n    short shortProperty=0;\n    try {\n      shortProperty=m1.getShortProperty(name);\n      found=true;\n    }\n catch (    JMSException e) {\n    }\n    if (found) {\n      ProxyAssertSupport.assertEquals(shortProperty,m2.getShortProperty(name));\n      continue;\n    }\n    int intProperty=0;\n    try {\n      intProperty=m1.getIntProperty(name);\n      found=true;\n    }\n catch (    JMSException e) {\n    }\n    if (found) {\n      ProxyAssertSupport.assertEquals(intProperty,m2.getIntProperty(name));\n      continue;\n    }\n    long longProperty=0;\n    try {\n      longProperty=m1.getLongProperty(name);\n      found=true;\n    }\n catch (    JMSException e) {\n    }\n    if (found) {\n      ProxyAssertSupport.assertEquals(longProperty,m2.getLongProperty(name));\n      continue;\n    }\n    float floatProperty=0;\n    try {\n      floatProperty=m1.getFloatProperty(name);\n      found=true;\n    }\n catch (    JMSException e) {\n    }\n    if (found) {\n      ProxyAssertSupport.assertTrue(floatProperty == m2.getFloatProperty(name));\n      continue;\n    }\n    double doubleProperty=0;\n    try {\n      doubleProperty=m1.getDoubleProperty(name);\n      found=true;\n    }\n catch (    JMSException e) {\n    }\n    if (found) {\n      ProxyAssertSupport.assertTrue(doubleProperty == m2.getDoubleProperty(name));\n      continue;\n    }\n    String stringProperty=null;\n    try {\n      stringProperty=m1.getStringProperty(name);\n      found=true;\n    }\n catch (    JMSException e) {\n    }\n    if (found) {\n      ProxyAssertSupport.assertEquals(stringProperty,m2.getStringProperty(name));\n      continue;\n    }\n    ProxyAssertSupport.fail(\"Cannot identify property \" + name);\n  }\n}\n", "    private boolean addGroup( JIDGroup group ) {\n        if( group == null )\n            return false;\n        add\n            ( group.toString() );\n        return true;\n    }\n", "public TransactionCommon registerInBatch()\n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(this, tc, \"registerInBatch\");\n\n    _readWriteLock.lock(); // Register as a reader\n\n    synchronized(this) // lock the state against other readers\n    {\n      if(_currentTran == null)\n        _currentTran = _txManager.createLocalTransaction(false);\n    }\n\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.exit(this, tc, \"registerInBatch\", _currentTran);\n    return _currentTran;\n  }", "public void addUI(Component component,int buffer,int width,int height){\n  if (fieldPanel != null) {\n    int lastX=-1;\n    for (    Component c : fieldPanel.getComponents()) {\n      int x=c.getX() + c.getWidth();\n      if (x > lastX) {\n        lastX=x;\n      }\n    }\n    component.setBounds(lastX + buffer,0,width,height);\n    fieldPanel.add(component);\n  }\n}\n", "\tpublic void setDs01(String value) {\n\t\tif (value.length() > 40) {\n\t\t\tvalue = value.substring(0, 40);\n\t\t}\n\t\tsetFieldValue(\"DCDS01\", value);\n\t}\n", "private static Map<String, Integer> daysOfWeekMapping() {\n        final Map<String, Integer> stringMapping = new HashMap<>();\n        stringMapping.put(\"MON\", 1);\n        stringMapping.put(\"TUE\", 2);\n        stringMapping.put(\"WED\", 3);\n        stringMapping.put(\"THU\", 4);\n        stringMapping.put(\"FRI\", 5);\n        stringMapping.put(\"SAT\", 6);\n        stringMapping.put(\"SUN\", 7);\n        return stringMapping;\n    }", "\tpublic void deleteWorkflowFromList(String wfId) throws Exception {\n\t\tthis.stopWorkflow(wfId);\n\t\tSZGWorkflow tmpWf = this.wfs.get(wfId);\n\t\tif (tmpWf != null) {\n\t\t\tthis.wfs.remove(wfId);\n\t\t\tquotaStaticService.getInstance().getUserBean(userId + \"\")\n\t\t\t\t\t.getWorkflow(tmpWf.getId() + \"\").setActive(false);\n\t\t\t// PS WF\n\t\t\tif (tmpWf.isPS()) {\n\t\t\t\ttmpWf.freeUpPSWorkflow();\n\t\t\t\tSZGWorkflowList.deleteInstance(tmpWf.getUserId() + \"/\"\n\t\t\t\t\t\t+ tmpWf.getId() + \"_files\");\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n", "@Override\n    public boolean shouldRetry(int retryCount, Response response) {\n        int code = response.code();\n        //CHECKSTYLE IGNORE MagicNumber FOR NEXT 2 LINES\n        return retryCount < this.retryCount\n                && (code == 408 || (code >= 500 && code != 501 && code != 505));\n    }", "public DBEngineVersion withSupportedEngineModes(String... supportedEngineModes) {\n        if (this.supportedEngineModes == null) {\n            setSupportedEngineModes(new com.amazonaws.internal.SdkInternalList<String>(supportedEngineModes.length));\n        }\n        for (String ele : supportedEngineModes) {\n            this.supportedEngineModes.add(ele);\n        }\n        return this;\n    }", "public String getSubSitePath() {\n\n        return m_cms.getRequestContext().removeSiteRoot(\n            OpenCms.getADEManager().getSubSiteRoot(m_cms, m_cms.getRequestContext().getRootUri()));\n    }", "private void reAliasChildren(JoinDescription join) {\n        for (JoinDescription child : join.children.values()) {\n            child.alias(J.path(join.getAlias(), child.getOriginalAlias()));\n            reAliasChildren(child);\n        }\n    }", "public void init(final FilterConfig filterConfig) {\n        final String host = filterConfig.getInitParameter(\"host\");\n        if (StringUtils.isNotBlank(host)) {\n            this.host = host;\n        }\n    }", "    public FObj effectiveParent(final FoContext context) {\n        /* If either this or its parent is a Marker, we want to return that\n         * Marker's surrogate RetrieveMarker's parent. */\n        if (this instanceof Marker) {\n            return effectiveMarkerParent(context);\n        }\n        final TreeNode parent = this.getParent();\n        if (parent instanceof Marker) {\n            return effectiveMarkerParent(context);\n        }\n        return getParent();\n    }\n", "public void add ( List < String > row ) { if ( row . size ( ) != numCols ) { throw new UnsupportedOperationException ( STR_ ) ; } data . add ( Collections . unmodifiableList ( new ArrayList < String > ( row ) ) ) ; numRows ++ ; for ( int i = NUM_ ; i < nu", "public void add(final int id){\n  toExport.add(id);\n}\n", "public void enableMultipleSettings ( ) { this . multipleSettings = BOOL_ ; }", "  public void add(final String v) {\n    add(Token.token(v));\n  }\n", "public static QuerySnapshot withDocuments(\n      final Query query, Timestamp readTime, final List<QueryDocumentSnapshot> documents) {\n    return new QuerySnapshot(query, readTime) {\n      volatile List<DocumentChange> documentChanges;\n\n      @Nonnull\n      @Override\n      public List<QueryDocumentSnapshot> getDocuments() {\n        return Collections.unmodifiableList(documents);\n      }\n\n      @Nonnull\n      @Override\n      public List<DocumentChange> getDocumentChanges() {\n        if (documentChanges == null) {\n          synchronized (documents) {\n            if (documentChanges == null) {\n              documentChanges = new ArrayList<>();\n              for (int i = 0; i < documents.size(); ++i) {\n                documentChanges.add(new DocumentChange(documents.get(i), Type.ADDED, -1, i));\n              }\n            }\n          }\n        }\n        return Collections.unmodifiableList(documentChanges);\n      }\n\n      @Override\n      public int size() {\n        return documents.size();\n      }\n\n      @Override\n      public boolean equals(Object o) {\n        if (this == o) {\n          return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n          return false;\n        }\n        QuerySnapshot that = (QuerySnapshot) o;\n        return Objects.equals(query, that.query)\n            && Objects.equals(this.size(), that.size())\n            && Objects.equals(this.getDocuments(), that.getDocuments());\n      }\n\n      @Override\n      public int hashCode() {\n        return Objects.hash(query, this.getDocuments());\n      }\n    };\n  }", "public void save ( ) { Path propsPath = getApplicationRootPath ( ) . resolve ( sPROPERTIES_FILENAME ) ; OutputStream out = null ; try { out = new FileOutputStream ( propsPath . toString ( ) ) ; String comments = STR_ ; mProperties . store ( out , comments ) ; } catch ( Exception e ) { mLog . error ( STR_ + STR_ , e ) ; } finally { if ( out != null ) { try { out . close ( ) ; } catch ( IOException e ) { } } } }", "public void onResume ( ) { }", "public abstract void removeIfExists ( java . io . Serializable id , Object position , BlobStoreObjectType objectType ) ;", "static public WorkSheet getCopyWorkSheetSelectedRows(WorkSheet copyWorkSheet, ArrayList<String> rows) throws Exception {\n\n\t\tArrayList<String> columns = copyWorkSheet.getColumns();\n\n\n\t\tWorkSheet workSheet = new WorkSheet(rows, columns);\n\t\tfor (String row : rows) {\n\t\t\tfor (String col : columns) {\n\t\t\t\tworkSheet.addCell(row, col, copyWorkSheet.getCell(row, col));\n\t\t\t}\n\t\t}\n\t\tworkSheet.setMetaDataColumns(copyWorkSheet.getMetaDataColumns());\n\t\tworkSheet.setMetaDataRows(copyWorkSheet.getMetaDataRows());\n\t\treturn workSheet;\n\n\t}", "public void marshall(AttackProperty attackProperty, ProtocolMarshaller protocolMarshaller) {\n\n        if (attackProperty == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(attackProperty.getAttackLayer(), ATTACKLAYER_BINDING);\n            protocolMarshaller.marshall(attackProperty.getAttackPropertyIdentifier(), ATTACKPROPERTYIDENTIFIER_BINDING);\n            protocolMarshaller.marshall(attackProperty.getTopContributors(), TOPCONTRIBUTORS_BINDING);\n            protocolMarshaller.marshall(attackProperty.getUnit(), UNIT_BINDING);\n            protocolMarshaller.marshall(attackProperty.getTotal(), TOTAL_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void ifPresentOrElse(Consumer<? super T> action,Runnable emptyAction){\n  if (value != null) {\n    action.accept(value);\n  }\n else {\n    emptyAction.run();\n  }\n}", "\tpublic String getExceptionCode() {\n\t\tStringBuffer eCode = new StringBuffer(0);\n\t\teCode.append(MODULE_EXCEPTION_ERR);\n\t\teCode.append(POOL_ACTION);\n\t\teCode.append(POOL_LEVEL);\n\t\treturn eCode.toString();\n\t}\n", "public static boolean isDeeplyEqual(@NonNull Event e1, @NonNull Event e2) {\n        return e1 == e2 || (e1.key.equals(e2.key) && Arrays.deepEquals(e1.params, e2.params));\n    }", "public static boolean isMobile(String phoneNum){\n  if (phoneNum != null) {\n    Pattern p=Pattern.compile(\"^((13[0-9])|(15[^4,\\\\D])|(18[0-9]))\\\\d{8}$\");\n    Matcher m=p.matcher(phoneNum);\n    return m.matches();\n  }\n else {\n    return false;\n  }\n}\n", "private User fetch(final String token) {\n        try {\n            return new DefaultFacebookClient(\n                token,\n                this.requestor,\n                new DefaultJsonMapper(),\n                Version.LATEST\n            ).fetchObject(\n                \"me\", User.class\n            );\n        } catch (final FacebookException ex) {\n            throw new IllegalArgumentException(ex);\n        }\n    }", "public String[] getDictionaryClass(String identifier) {\n\n        Entry[] dictEntries = dict.getEntries();\n\n        String specRef = getSpecRef(identifier);\n        if (specRef == null) {\n            logger.error(\"Cannot determine specification for id: \", identifier);\n            return new String[0];\n        }\n        List<String> dictClasses = new ArrayList<String>();\n\n        for (Entry dictEntry : dictEntries) {\n            if (!dictEntry.getClassName().equals(\"Descriptor\")) continue;\n            if (dictEntry.getID().equals(specRef.toLowerCase())) {\n                Element rawElement = (Element) dictEntry.getRawContent();\n                Elements classifications = rawElement.getChildElements(\"isClassifiedAs\", dict.getNS());\n                for (int i = 0; i < classifications.size(); i++) {\n                    Element element = classifications.get(i);\n                    Attribute attr = element.getAttribute(\"resource\", rdfNS);\n                    if ((attr.getValue().indexOf(\"molecularDescriptor\") >= 0)\n                            || (attr.getValue().indexOf(\"atomicDescriptor\") >= 0)) {\n                        continue;\n                    }\n                    String[] tmp = attr.getValue().split(\"#\");\n                    dictClasses.add(tmp[1]);\n                }\n            }\n        }\n\n        if (dictClasses.size() == 0)\n            return null;\n        else\n            return (String[]) dictClasses.toArray(new String[]{});\n    }", "protected abstract void createNativeFlowgraphEdges ( final int rawModuleId , final int moduleId ) throws SQLException ;", "public ServiceFuture<LoadBalancerInner> updateTagsAsync(String resourceGroupName, String loadBalancerName, Map<String, String> tags, final ServiceCallback<LoadBalancerInner> serviceCallback) {\n        return ServiceFuture.fromResponse(updateTagsWithServiceResponseAsync(resourceGroupName, loadBalancerName, tags), serviceCallback);\n    }", "    protected String getText(AttributedCharacterIterator aci) {\n        StringBuffer sb = new StringBuffer(aci.getEndIndex() - aci.getBeginIndex());\n        for (char c = aci.first(); c != CharacterIterator.DONE; c = aci.next()) {\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "public boolean isUploadInProgressForSelectedSoftwareModule(final Long softwareModuleId) {\n        for (final FileUploadId fileUploadId : getAllFileUploadIdsFromOverallUploadProcessList()) {\n            if (fileUploadId.getSoftwareModuleId().equals(softwareModuleId)) {\n                return true;\n            }\n        }\n        return false;\n    }", "    protected boolean applyUriOptions(String uriOptions, Query<?> query) {\n\n        if (logger.isLoggable(Level.FINE)) {\n            logger.fine(\"uriOptions: [\" + uriOptions + \"]\");\n        }\n\n        UriOptions options = UriOptions.parse(uriOptions);\n        return applyUriOptions(options, query);\n    }\n", "\tpublic REDStream createStream(int pos, REDStreamDirection dir) {\n\t\treturn new REDStream(this, pos, dir);\n\t}\n", "  public Effects slideDown(Function... f) {\n    return as(Effects).slideDown(f);\n  }\n", "  protected void toXmlBody(PrintWriter result) {\n    super.toXmlBody(result);\n\n    // check if there was any role to monitor. Default is SELF indicated by a\n    // null value of roleToMonitor\n    if (roleToMonitor != null) {\n      result.write(\"<role-to-monitor>\" + roleToMonitor + \"</role-to-monitor>\");\n    }\n  }\n", "public Matrix4f setRow(int row, Vector4fc src) throws IndexOutOfBoundsException {\n        switch (row) {\n        case 0:\n            this._m00(src.x());\n            this._m10(src.y());\n            this._m20(src.z());\n            this._m30(src.w());\n            break;\n        case 1:\n            this._m01(src.x());\n            this._m11(src.y());\n            this._m21(src.z());\n            this._m31(src.w());\n            break;\n        case 2:\n            this._m02(src.x());\n            this._m12(src.y());\n            this._m22(src.z());\n            this._m32(src.w());\n            break;\n        case 3:\n            this._m03(src.x());\n            this._m13(src.y());\n            this._m23(src.z());\n            this._m33(src.w());\n            break;\n        default:\n            throw new IndexOutOfBoundsException();\n        }\n        _properties(0);\n        return this;\n    }", "public N4IDEXpectFileSetup(FileSetupContext ctx,Injector injector){\n  this.ctx=ctx;\n  injector.injectMembers(this);\n}\n", "\tprotected void onReleaseThread() {\n\t\t// The last owner reference has gone away so let another\n\t\t// thread have it...\n\t\treleaseThread() ;\n\t}\n", "\tpublic String getLine(int i) {\n\t\ttry {\n\t\t\treturn headerLines.getRawLine(i);\n\t\t} catch (ArrayIndexOutOfBoundsException e) {\n\t\t\treturn null;\n\t\t}\n\t}\n", "public void drawState(Graphics sc){\n  sc.setColor(Color.black);\n  E[] its=model.items();\n  if (its == null) {\n    return;\n  }\n  for (  E e : its) {\n    drawElement(sc,e);\n  }\n}\n", "\tpublic Object unproxy(Object maybeProxy) throws HibernateException {\n\t\tif ( maybeProxy instanceof ElementWrapper ) {\n\t\t\tmaybeProxy = ( (ElementWrapper) maybeProxy ).getElement();\n\t\t}\n\t\t\n\t\tif ( maybeProxy instanceof HibernateProxy ) {\n\t\t\tHibernateProxy proxy = (HibernateProxy) maybeProxy;\n\t\t\tLazyInitializer li = proxy.getHibernateLazyInitializer();\n\t\t\tif ( li.isUninitialized() ) {\n\t\t\t\tthrow new PersistentObjectException(\n\t\t\t\t\t\t\"object was an uninitialized proxy for \" +\n\t\t\t\t\t\tli.getEntityName()\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn li.getImplementation(); //unwrap the object\n\t\t}\n\t\telse {\n\t\t\treturn maybeProxy;\n\t\t}\n\t}\n", "private static String merge(String... vals){\n  StringBuilder res=new StringBuilder();\n  if (vals != null) {\n    boolean first=true;\n    for (    String val : vals) {\n      if (first)       first=false;\n else       res.append(File.pathSeparatorChar);\n     ", "public void resumeEncoding ( ) { this . suspendEncoding = BOOL_ ; }", "protected void moveToFinalFile(Path tempOutFilePath,Path destination) throws IOException {\n  Path src=Path.getPathWithoutSchemeAndAuthority(tempOutFilePath);\n  Path dst=Path.getPathWithoutSchemeAndAuthority(destination);\n  boolean moveSuccessful=false;\n  if (!outputFS.exists(dst.getParent())) {\n    outputFS.mkdirs(dst.getParent());\n  }\n  if (outputFS.exists(dst)) {\n    outputFS.delete(dst,false);\n  }\n  moveSuccessful=outputFS.rename(src,dst);\n  if (moveSuccessful) {\n    LOG.debug(\"File {} moved successfully to destination folder.\",dst);\n  }\n else {\n    throw new RuntimeException(\"Unable to move file from \" + src + \" to \"+ dst);\n  }\n}\n", "public static <T extends Serializable> ThriftEnvelopeEvent extractEvent(final String eventName, final DateTime eventDateTime, final T thriftObject)\n    {\n        final List<ThriftField> thriftFieldList = new ArrayList<ThriftField>();\n\n        final Field[] fields = thriftObject.getClass().getFields();\n        for (int i = 0; i < fields.length; i++) {\n            try {\n                // Thrift fields start at 1, not 0\n                final ThriftField field = ThriftField.createThriftField(fields[i].getType(), fields[i].get(thriftObject), (short) (i + 1));\n\n                // null for the Thrift metaData map and potential other non-supported attributes added by the caller in the thriftObject\n                if (field != null) {\n                    thriftFieldList.add(field);\n                }\n            }\n            catch (IllegalAccessException ignored) {\n            }\n        }\n\n        final ThriftEnvelope envelope = new ThriftEnvelope(eventName, thriftFieldList);\n        return new ThriftEnvelopeEvent(eventDateTime, envelope);\n    }", "Item ( final int index , final Item i ) { this . index = index ; type = i . type ; intVal = i . intVal ; longVal = i . longVal ; strVal1 = i . strVal1 ; strVal2 = i . strVal2 ; strVal3 = i . strVal3 ; hashCode = i . hashCode ; }", "public static void moveFileToDirectory ( File srcFile , File destDir , boolean createDestDir ) throws IOException { if ( srcFile == null ) { throw new NullPointerException ( STR_ ) ; } if ( destDir == null ) { throw new NullPointerException ( STR_ ) ; } i", "public RestException(int errorCode,Object[] params,Throwable cause){\n  super(cause);\n  this.errorCode=errorCode;\n  this.params=params;\n  this.message=getLocalizedMessage(Locale.getDefault());\n}\n", "public static final boolean onlySpaces ( String str ) { return str . trim ( ) . equals ( STR_ ) ; }", "\tpublic void save(CoResponseWordE2 entity) {\n\t\tEntityManagerHelper.log(\"saving CoResponseWordE2 instance\", Level.INFO, null);\n\t\ttry {\n\t\t\tgetEntityManager().persist(entity);\n\t\t\tEntityManagerHelper.log(\"save successful\", Level.INFO, null);\n\t\t} catch (RuntimeException re) {\n\t\t\tEntityManagerHelper.log(\"save failed\", Level.SEVERE, re);\n\t\t\tthrow re;\n\t\t}\n\t}\n", "public Observable<ServiceResponse<Page<DeletedSasDefinitionItem>>> getDeletedSasDefinitionsNextWithServiceResponseAsync(final String nextPageLink) {\n        return getDeletedSasDefinitionsNextSinglePageAsync(nextPageLink)\n            .concatMap(new Func1<ServiceResponse<Page<DeletedSasDefinitionItem>>, Observable<ServiceResponse<Page<DeletedSasDefinitionItem>>>>() {\n                @Override\n                public Observable<ServiceResponse<Page<DeletedSasDefinitionItem>>> call(ServiceResponse<Page<DeletedSasDefinitionItem>> page) {\n                    String nextPageLink = page.body().nextPageLink();\n                    if (nextPageLink == null) {\n                        return Observable.just(page);\n                    }\n                    return Observable.just(page).concatWith(getDeletedSasDefinitionsNextWithServiceResponseAsync(nextPageLink));\n                }\n            });\n    }", "public static Slice getDiskRangeSlice(DiskRange diskRange, Map<DiskRange, byte[]> buffers)\n    {\n        for (Entry<DiskRange, byte[]> bufferEntry : buffers.entrySet()) {\n            DiskRange bufferRange = bufferEntry.getKey();\n            byte[] buffer = bufferEntry.getValue();\n            if (bufferRange.contains(diskRange)) {\n                int offset = toIntExact(diskRange.getOffset() - bufferRange.getOffset());\n                return Slices.wrappedBuffer(buffer, offset, diskRange.getLength());\n            }\n        }\n        throw new IllegalStateException(\"No matching buffer for disk range\");\n    }", "public UIGraphicTestCase ( String name ) { super ( name ) ; }", "public static void writeLine ( BufferedWriter writer , String line ) throws IOException { writer . write ( line ) ; writer . newLine ( ) ; }", "public static Point normalize(Point p,double length){\n  double len=Math.sqrt(p.x * p.x + p.y * p.y);\n  length=length / len;\n  return new Point(p.x * length,p.y * length);\n}\n", "public static void main(String[] args) throws IOException {\n  List<Byte> binBook=createBinBook();\n  FileOutputStream out=new FileOutputStream(\"../src/book.bin\");\n  int bookLen=binBook.size();\n  byte[] binBookA=new byte[bookLen];\n  for (int i=0; i < bookLen; i++)   binBookA[i]=binBook.get(i);\n  out.write(binBookA);\n  out.close();\n}\n", "public HttpRequest ( final URL url , final String method ) throws HttpRequestException { this . url = url ; this . requestMethod = method ; setXsrToken ( ) ; }", "private void commit ( ) throws InterruptedException , ReplicatorException { applier . commit ( ) ; schedule . commit ( ) ; blockEventCount = NUM_ ; lastCommitMillis = System . currentTimeMillis ( ) ; }", "private void init(final Map<DistributedDataSetPartition, InputSplit[]> splitsPerPartition) {\n    final Pair<InputSplit[], DistributedDataSetPartition[]>\n                                      splitsAndPartitions = getSplitsAndPartitions(splitsPerPartition);\n    final InputSplit[] splits = splitsAndPartitions.getFirst();\n    final DistributedDataSetPartition[] partitions = splitsAndPartitions.getSecond();\n    Validate.isTrue(splits.length == partitions.length);\n    for (int splitNum = 0; splitNum < splits.length; splitNum++) {\n      LOG.log(Level.FINE, \"Processing split: \" + splitNum);\n      final InputSplit split = splits[splitNum];\n      final NumberedSplit<InputSplit> numberedSplit = new NumberedSplit<>(split, splitNum,\n          partitions[splitNum]);\n      unallocatedSplits.add(numberedSplit);\n      updateLocations(numberedSplit);\n    }\n    if (LOG.isLoggable(Level.FINE)) {\n      for (final Map.Entry<String, BlockingQueue<NumberedSplit<InputSplit>>> locSplit : locationToSplits.entrySet()) {\n        LOG.log(Level.FINE, locSplit.getKey() + \": \" + locSplit.getValue().toString());\n      }\n    }\n  }", "public static short[] toPrimitive(Short[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_SHORT_ARRAY;\n        }\n        final short[] result = new short[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = array[i];\n        }\n        return result;\n    }", "    public Date getLastAccessedAsDate() {\n        String str = getLastAccessedAsString();\n        try {\n            return (Confab.parseDate(str));\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            return (new Date());\n        }\n    } // of method\n", "public static Name lowerCamel(String... pieces){\n  List<NamePiece> namePieces=new ArrayList<>();\n  for (  String piece : pieces) {\n    validateCamel(piece,CheckCase.LOWER);\n    namePieces.add(new NamePiece(piece,CaseFormat.LOWER_CAMEL));\n  }\n  return new Name(namePieces);\n}\n", "public String toString ( int offset , int length ) { if ( length == - NUM_ ) { length = this . length ( ) ; } length = Math . min ( length , this . length ( ) ) ; StringBuilder sb = new StringBuilder ( ) ; sb . append ( STR_ + this . filledLength + STR_ +", "protected void deleteProximityBrowsingNodes ( ) { m_internallyDisabled = BOOL_ ; for ( final Node node : m_proximityMap . keySet ( ) ) { m_graph . getGraph ( ) . removeNode ( node ) ; } m_proximityMap . clear ( ) ; for ( final Entry < ZyProximityNode < ? > , InternalNodeListener > entry : m_nodeListeners . entrySet ( ) ) { ( ( IViewNode < ? > ) entry . getKey ( ) . getRawNode ( ) . getAttachedNode ( ) ) . removeListener ( entry . getValue ( ) ) ; } m_nodeListeners . clear ( ) ; m_internallyDisabled = BOOL_ ; }", "public static <T extends Model, S extends Serializable> void deleteBatch(Class<T> model, List<S> idList) {\n        deleteBatch(model, AnimaUtils.toArray(idList));\n    }", "public static String readFile ( Path parentDir , String name ) throws IOException { if ( parentDir == null ) { return null ; } Path path = parentDir . resolve ( name ) ; try ( InputStream in = Files . newInputStream ( path ) ) { return new String ( ByteSt", "\tprivate void initializeToolBar() {\n\t\tIToolBarManager tbm = getViewSite().getActionBars().getToolBarManager();\n\t\ttbm.add(new Separator(RdtDebugUiConstants.EVALUATION_GROUP));\n\t\ttbm.add(fClearDisplayAction);\n\t\tgetViewSite().getActionBars().updateActionBars();\n\t}\n", "@Override public URI toVertexURI(final Object key){\n  return toURI(key.toString());\n}\n", "    public void setCurrentChatTab(int index)\n    {   \n        ChatPanel chatPanel = null;\n        if(getChatTabCount() > 0)\n        {\n            chatPanel = (ChatPanel) this.chatTabbedPane\n                .getComponentAt(index);\n        \n            setCurrentChatPanel(chatPanel);\n        }\n    }\n", "List < GenericAuditEntity > findServiceAudit ( String serviceName ) throws Exception ;", "    public double getGapPhaseAvg() throws ConnectionException, GetException {\n        final RfCavity rfCav = (RfCavity) this.getParent();\n\t\treturn toGapPhaseFromCavityPhase( rfCav.getCavPhaseAvg() );\n    }\n", "public Observable<Page<EnvironmentSettingInner>> listNextAsync(final String nextPageLink) {\n        return listNextWithServiceResponseAsync(nextPageLink)\n            .map(new Func1<ServiceResponse<Page<EnvironmentSettingInner>>, Page<EnvironmentSettingInner>>() {\n                @Override\n                public Page<EnvironmentSettingInner> call(ServiceResponse<Page<EnvironmentSettingInner>> response) {\n                    return response.body();\n                }\n            });\n    }", "public void addHistoryChangedListener(HistoryChangedListener l){\n  m_HistoryChangedListeners.add(l);\n}\n", "public synchronized void release(){\n  if (outputStreamCache != null)   outputStreamCache.invalidateAll();\n  if (cacheDir.exists() && cacheDir.isDirectory()) {\n    for (    File cachedFile : cacheDir.listFiles()) {\n      if (!cachedFile.delete()) {\n        logger.warn(\"Unable to clear cached vector: \" + cachedFile.getAbsolutePath());\n      }\n    }\n  }\n}\n", "    protected void updatePage() {\n\tswitch (desired_move) {\n\tcase PREVIOUS:\n\t    if (leavePage(step[page+1], page+1, desired_move))\n\t\tlast_move = desired_move;\n\t    break;\n\tcase NEXT:\n\t    if (leavePage(step[page-1], page-1, desired_move))\n\t\tlast_move = desired_move;\n\t    break;\n\t}\n\t\n\t\n\tupper.removeAll();\n\tupper.add(step[page]);\n\n\tenterPage(step[page], page, last_move);\n\t\n\tupdateButtons();\n\tpack();\n\trepaint();\n\t\n\tif (DEBUG)\n\t    System.err.println(\"page = \"+page);\n\tlabel.setIcon(getBanner(page));\n\n\tsetTitle(title+\" (step \"+(page+1)+\" of \"+nsteps+\")\");\n    }\n", "public void testLocalsAverageCorrectly ( ) throws Exception { TransferEntropyCalculatorMultiVariateKernel teCalc = new TransferEntropyCalculatorMultiVariateKernel ( ) ; String kernelWidth = STR_ ; teCalc . setProperty ( TransferEntropyCalculatorMultiVariateKernel . NORMALISE_PROP_NAME , STR_ ) ; teCalc . setProperty ( TransferEntropyCalculatorMultiVariateKernel . EPSILON_PROP_NAME , kernelWidth ) ; super . testLocalsAverageCorrectly ( teCalc , NUM_ , NUM_ , NUM_ ) ; }", "  public void setSourceNode ( NodeView node_view ) {\n    ( ( PNode )source).removePropertyChangeListener( this );\n    source = ( NodeView )node_view;\n    sourceLocator = new PNodeLocator( ( PNode )source );\n    sourcePoint = sourceLocator.locatePoint(sour", "    public void setDissectableAreas(DissectableArea[] dissectableAreas) {\n        if (this.dissectableAreas != null) {\n            throw new IllegalStateException(\"Method already called\");\n        }\n\n        this.dissectableAreas = dissectableAreas;\n    }\n", "    public void receiveData(D data) {\n        ConvertRecord rec = new ConvertRecord(data);\n        synchronized (records) {\n            records.put(data, rec);\n        }\n        for (String struc : matchStructures(rec)) {\n            fireChangeEvent(new DataStructureEvent(this, struc,\n                DataChangeType.DATA_ADDED));\n        }\n    }\n", "private void put(Map<String,String> variables,Object key,Object value){\n  variables.put(String.valueOf(key),String.valueOf(value));\n}\n", "    public void uCallPaint(Graphics g, Object target) {\n        if (Logging.REPORT_LEVEL <= Logging.INFORMATION) {\n            Logging.report(Logging.INFORMATION, \n                           LogChannels.LC_HIGHUI_FORM_LAYOUT,\n                           \"# in DisplayableLFImpl: uCallPaint\");        \n        }\n\n        synchronized (Display.LCDUILock) {\n            lCallPaint(g, target);\n        }\n    }\n", "void reset(){\n  System.arraycopy(iv,0,counter,0,blockSize);\n  used=blockSize;\n}\n", "public static ClassNode make ( Class c ) { return make ( c , BOOL_ ) ; }", "public void addObserver(final FileAlterationObserver observer){\n  if (observer != null) {\n    observers.add(observer);\n  }\n}\n", "\tpublic void addAttributeArea(AttributeArea area) {\n\t\t// f\ufffdr jede Position in area die abstrakte Methode addAttributeArea\n\t\t// aufrufen\n\t\tPosition[] pos = area.getPositions();\n\t\tfor (int i = 0; i < pos.length; i++) {\n\t\t\taddAttributeArea(area, pos[i]);\n\t\t}\n\t\t// area in der liste der areas merken\n\t\tthis.areas.add(area);\n\t}\n", "public synchronized void releaseInternal ( ) { if ( ! done ) { if ( cursor != null ) { cursor . release ( ) ; cursor = null ; } diskLog = null ; done = BOOL_ ; } }", "public JKReportException ( Throwable arg0 ) { super ( arg0 ) ; }", "public static void main(String[] args) {\n        if (args.length != 3)\n            printUsage();\n        try {\n            Version version = parseVersionString(args[0]);\n            if (version == null) {\n                System.err.println(\n                        \"Invalid version number format, must be \\\"x.y.z(-.*)?\\\"\");\n                System.exit(1);\n            }\n            int rev;\n            try {\n                rev = Integer.parseInt(args[1]);\n            } catch (NumberFormatException e) {\n                rev = -1;\n            }\n            generateFile(new File(\".\"), version, rev, args[2]);\n        } catch (NumberFormatException e) {\n            System.err.println(\n                    \"All version-related parameters must be valid integers!\");\n            throw e;\n        }\n    }", "\tpublic void resetNotification() {\n\t  this.notification=false; \n\t}\t\n", "public Word<I> toWord(int fromIndex, int toIndex) {\n        if (fromIndex < 0 || toIndex > length) {\n            throw new IndexOutOfBoundsException();\n        }\n        int len = toIndex - fromIndex;\n\n        lock = true;\n        return new SharedWord<>(array, fromIndex, len);\n    }", "    private void fillSlots() throws Exception {\n        int maxLeaves = UltrapeerSettings.MAX_LEAVES.getValue();\n        ManagedConnection[] mc = new ManagedConnection[maxLeaves];\n        for(int i = 0; i < mc.length; i++) {\n            mc[i] = new ManagedConnectionStub();\n        }\n        \n        PrivilegedAccessor.setValue(RouterService.getConnectionManager(), \n                \"_initializedClientConnections\", Arrays.asList(mc));\n    }\n", "@Override public Range findRangeBounds(CategoryDataset dataset){\n  if (dataset == null) {\n    return null;\n  }\n  boolean allItemsNull=true;\n  double minimum=0.0;\n  double maximum=0.0;\n  int columnCount=dataset.getColumnCount();\n  for (int row=0; row < dataset.getRowCount(); row++) {\n    double runningTotal=0.0;\n    for (int column=0; column <= columnCount - 1; column++) {\n      Number n=dataset.getValue(row,column);\n      if (n != null) {\n        allItemsNull=false;\n        double value=n.doubleValue();\n        if (column == columnCount - 1) {\n          runningTotal=value;\n        }\n else {\n          runningTotal=runningTotal + value;\n        }\n        minimum=Math.min(minimum,runningTotal);\n        maximum=Math.max(maximum,runningTotal);\n      }\n    }\n  }\n  if (!allItemsNull) {\n    return new Range(minimum,maximum);\n  }\n else {\n    return null;\n  }\n}\n", "public Message sendMessage(Chat chat, SendableMessage message) {\n\n        HttpResponse<String> response;\n        JSONObject jsonResponse = null;\n        Message messageResponse = null;\n\n        switch (message.getType()) {\n\n            case TEXT: {\n\n     ", "private static void heapify(int[] heap, int[] reverseIndex, int count, float[] values)\n  {\n    int start = (count - 2) / 2;\n    while (start >= 0) {\n      siftDown(heap, reverseIndex, start, count - 1, values);\n      start--;\n    }\n  }", "public void testNonPrefixedCommand ( ) throws Exception { ProcessHelper processHelper = new ProcessHelper ( ) ; processHelper . configure ( ) ; processHelper . exec ( STR_ , STR_ ) ; }", "public void putAll(TrxMessageHeader trxHeaderToMerge)\n    {\n        if (m_mapMessageHeader == null)\n            m_mapMessageHeader = new HashMap<String,Object>();\n        if (trxHeaderToMerge.getMessageHeaderMap() != null)\n            this.getMessageHeaderMap().putAll(trxHeaderToMerge.getMessageHeaderMap());\n        if (m_mapMessageInfo == null)\n            m_mapMessageInfo = new HashMap<String,Object>();\n        if (trxHeaderToMerge.getMessageInfoMap() != null)\n            this.getMessageInfoMap().putAll(trxHeaderToMerge.getMessageInfoMap());\n        if (m_mapMessageTransport == null)\n            m_mapMessageTransport = new HashMap<String,Object>();\n        if (trxHeaderToMerge.getMessageTransportMap() != null)\n            this.getMessageTransportMap().putAll(trxHeaderToMerge.getMessageTransportMap());\n    }", "public String query(String query) {\n        try {\n            Connection conn = this.tx().getConnection();\n            ObjectNode result = this.mapper.createObjectNode();\n            ArrayNode dataNode = this.mapper.createArrayNode();\n            ArrayNode metaNode = this.mapper.createArrayNode();\n            Statement statement = conn.createStatement();\n            if (logger.isDebugEnabled()) {\n                logger.debug(query);\n            }\n            ResultSet rs = statement.executeQuery(query);\n            ResultSetMetaData rsmd = rs.getMetaData();\n            boolean first = true;\n            while (rs.next()) {\n                int numColumns = rsmd.getColumnCount();\n                ObjectNode obj = this.mapper.createObjectNode();\n                for (int i = 1; i < numColumns + 1; i++) {\n                    String columnName = rsmd.getColumnLabel(i);\n                    int type = rsmd.getColumnType(i);\n                    //make sure to obtain array using getArray()\n                    //At least in H2, this makes a difference...\n                    Object o = type == Types.ARRAY ? rs.getArray(i) : rs.getObject(i);\n                    this.sqlDialect.putJsonObject(obj, columnName, type, o);\n                    if (first) {\n                        this.sqlDialect.putJsonMetaObject(this.mapper, metaNode, columnName, type, o);\n                    }\n                }\n                first = false;\n                dataNode.add(obj);\n            }\n            result.set(\"data\", dataNode);\n            result.set(\"meta\", metaNode);\n            return result.toString();\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        } finally {\n            this.tx().rollback();\n        }\n    }", "public void suspendEncoding ( ) throws java . io . IOException { flushBase64 ( ) ; this . suspendEncoding = BOOL_ ; }", "    public String fileToText(String url){\n        BufferedReader Buffer = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream(url)));\n        String str=\"\";\n        String text=\"\";\n        try{\n            while ((str = Buffer.readLine()) != null) {\n                text += str;\n            }\n            Buffer.close();\n        } catch(Exception ex){\n            Log.error(ex);\n            return \"\";\n        }\n        \n        return text;\n    }\n", "public Map<String, Map<String, List<String[]>>> parseACL(String aclArray, String owner) {\n    if (aclArray == null) {\n      // arwdxt -- 8.2 Removed the separate RULE permission\n      // arwdDxt -- 8.4 Added a separate TRUNCATE permission\n      String perms = connection.haveMinimumServerVersion(ServerVersion.v8_4) ? \"arwdDxt\" : \"arwdxt\";\n\n      aclArray = \"{\" + owner + \"=\" + perms + \"/\" + owner + \"}\";\n    }\n\n    List<String> acls = parseACLArray(aclArray);\n    Map<String, Map<String, List<String[]>>> privileges =\n        new HashMap<String, Map<String, List<String[]>>>();\n    for (String acl : acls) {\n      addACLPrivileges(acl, privileges);\n    }\n    return privileges;\n  }", "public void close() throws IOException {\n  done();\n  super.close();\n}\n", "    public Structure popParent() {\n        try {\n            return parentStack.pop();\n        } catch (EmptyStackException e) {\n            return null;\n        }\n    }\n", "void breakpointsConditionChanged ( Set < Breakpoint > breakpoints ) ;", "public static String clip(final String s,final int leftClip,final int rightClip){\n  return leftClip + rightClip >= s.length() ? \"\" : s.substring(leftClip,s.length() - rightClip);\n}\n", "public abstract Position lastProcessedPosition ( ) ;", "public static void main (String[] args)\n    {\n        // set up a throttle for 5 ops per 10 seconds\n        Throttle throttle = new Throttle(5, 10000);\n\n        // try doing one operation per second and we should hit the throttle on the sixth operation\n        // and then kick in again on the eleventh, only to stop again on the fifteenth\n        for (int i = 0; i < 20; i++) {\n            System.out.println((i+1) + \". Throttle: \" + throttle.throttleOp());\n            // pause for a sec\n            try { Thread.sleep(1000L); }\n            catch (InterruptedException ie) {}\n        }\n    }", "protected void updateValueCell(BandData rootBand, BandData bandData, String templateCellValue, HSSFCell resultCell, HSSFPatriarch patriarch) {\n        String parameterName = templateCellValue;\n        parameterName = unwrapParameterName(parameterName);\n        String fullParameterName = bandData.getName() + \".\" + parameterName;\n\n        if (StringUtils.isEmpty(parameterName)) return;\n\n        if (!bandData.getData().containsKey(parameterName)) {\n            resultCell.setCellValue((String) null);\n            return;\n        }\n\n        Object value = bandData.getData().get(parameterName);\n\n        if (value == null) {\n            resultCell.setCellType(HSSFCell.CELL_TYPE_BLANK);\n            return;\n        }\n\n        String formatString = getFormatString(parameterName, fullParameterName);\n        InlinerAndMatcher inlinerAndMatcher = getContentInlinerForFormat(formatString);\n        if (inlinerAndMatcher != null) {\n            inlinerAndMatcher.contentInliner.inlineToXls(patriarch, resultCell, value, inlinerAndMatcher.matcher);\n            return;\n        }\n\n        if (formatString != null) {\n            resultCell.setCellValue(new HSSFRichTextString(formatValue(value, parameterName, fullParameterName)));\n        } else if (value instanceof Number) {\n            resultCell.setCellValue(((Number) value).doubleValue());\n        } else if (value instanceof Boolean) {\n            resultCell.setCellValue((Boolean) value);\n        } else if (value instanceof Date) {\n            resultCell.setCellValue((Date) value);\n        } else {\n            resultCell.setCellValue(new HSSFRichTextString(formatValue(value, parameterName, fullParameterName)));\n        }\n    }", "private int finMidIndex(String literal){\n        int startOffset = prefix.length() + 1;\n        int endOffset = literal.length() - suffix.length() - 1;\n\n        /**\n         * Found a bug when there is only character after the prefix ends. For eg: if the spec is abc-*$* and the key\n         * we got is abc-1\n         *      prefix -> abc-\n         *      suffix -> \"\"\n         *      mid    -> $\n         *      startoffset -> 5\n         *      endoffset -> 5 - 0 - 1 = 4\n         *  We are left with no substring to search for the mid. Bail out!\n         */\n        if(startOffset >= endOffset)  {\n\n            return -1;\n\n        }\n        int midIndex = literal.substring(startOffset, endOffset).indexOf(mid);\n\n        if(midIndex >= 0) {\n\n            return midIndex +  startOffset;\n        }\n        return -1;\n    }", "    protected  void setDelays() {\n        SHORT_DELAY_MS = getShortDelay();\n        SMALL_DELAY_MS = SHORT_DELAY_MS * 5;\n        MEDIUM_DELAY_MS = SHORT_DELAY_MS * 10;\n        LONG_DELAY_MS = SHORT_DELAY_MS * 50;\n    }\n", "public abstract ExpNode newInstance ( ) ;", "@Override\n    public synchronized void addRecord(Slice record, boolean force)\n            throws IOException\n    {\n        checkState(!closed.get(), \"Log has been closed\");\n\n        SliceInput sliceInput = record.input();\n\n        // used to track first, middle and last blocks\n        boolean begin = true;\n\n        // Fragment the record int chunks as necessary and write it.  Note that if record\n        // is empty, we still want to iterate once to write a single\n        // zero-length chunk.\n        do {\n            int bytesRemainingInBlock = BLOCK_SIZE - blockOffset;\n            checkState(bytesRemainingInBlock >= 0);\n\n            // Switch to a new block if necessary\n            if (bytesRemainingInBlock < HEADER_SIZE) {\n                if (bytesRemainingInBlock > 0) {\n                    // Fill the rest of the block with zeros\n                    // todo lame... need a better way to write zeros\n                    ensureCapacity(bytesRemainingInBlock);\n                    mappedByteBuffer.put(new byte[bytesRemainingInBlock]);\n                }\n                blockOffset = 0;\n                bytesRemainingInBlock = BLOCK_SIZE - blockOffset;\n            }\n\n            // Invariant: we never leave less than HEADER_SIZE bytes available in a block\n            int bytesAvailableInBlock = bytesRemainingInBlock - HEADER_SIZE;\n            checkState(bytesAvailableInBlock >= 0);\n\n            // if there are more bytes in the record then there are available in the block,\n            // fragment the record; otherwise write to the end of the record\n            boolean end;\n            int fragmentLength;\n            if (sliceInput.available() > bytesAvailableInBlock) {\n                end = false;\n                fragmentLength = bytesAvailableInBlock;\n            }\n            else {\n                end = true;\n                fragmentLength = sliceInput.available();\n            }\n\n            // determine block type\n            LogChunkType type;\n            if (begin && end) {\n                type = LogChunkType.FULL;\n            }\n            else if (begin) {\n                type = LogChunkType.FIRST;\n            }\n            else if (end) {\n                type = LogChunkType.LAST;\n            }\n            else {\n                type = LogChunkType.MIDDLE;\n            }\n\n            // write the chunk\n            writeChunk(type, sliceInput.readBytes(fragmentLength));\n\n            // we are no longer on the first chunk\n            begin = false;\n        } while (sliceInput.isReadable());\n\n        if (force) {\n            mappedByteBuffer.force();\n        }\n    }", "public <T>Collection<T> load(File dir,Class<T> type){\n  Set<T> logImporters=new HashSet<>();\n  if (!dir.exists()) {\n    return new ArrayList<>();\n  }\n  File[] files=dir.listFiles(null);\n  logImporters.addAll(loadFromDir(dir,type));\n  for (  File file : files) {\n    logImporters.addAll(loadFromJar(file,type));\n  }\n  return logImporters;\n}\n", "public static void closeCustomShell ( ) throws IOException { Shell . closeCustomShell ( ) ; }", "public GSXAQueueSessionImpl ( GSXAConnectionImpl connection ) throws JMSException { super ( connection ) ; }", "public void restartGesture ( ) { if ( ! mGestureInProgress ) { return ; } stopGesture ( ) ; for ( int i = NUM_ ; i < MAX_POINTERS ; i ++ ) { mStartX [ i ] = mCurrentX [ i ] ; mStartY [ i ] = mCurrentY [ i ] ; } startGesture ( ) ; }", "public void testPutLenString ( ) { byte [ ] expectedResult = { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , STR_ , STR_ , STR_ } ; String string = STR_ ; MySQLPacket array = new MySQLPacket ( NUM_ , ( byte ) NUM_ ) ; ByteArrayOutputStream output = new ByteArrayOutp", "boolean checkChunkMac(byte[] headerNonce, long chunkNumber, ByteBuffer chunkBuf) {\n\t\tassert chunkBuf.remaining() >= NONCE_SIZE + MAC_SIZE;\n\n\t\t// get three components: nonce + payload + mac\n\t\tfinal ByteBuffer chunkNonceBuf = chunkBuf.asReadOnlyBuffer();\n\t\tchunkNonceBuf.position(0).limit(NONCE_SIZE);\n\t\tfinal ByteBuffer payloadBuf = chunkBuf.asReadOnlyBuffer();\n\t\tpayloadBuf.position(NONCE_SIZE).limit(chunkBuf.limit() - MAC_SIZE);\n\t\tfinal ByteBuffer expectedMacBuf = chunkBuf.asReadOnlyBuffer();\n\t\texpectedMacBuf.position(chunkBuf.limit() - MAC_SIZE);\n\n\t\t// get nonce:\n\t\tfinal byte[] chunkNonce = new byte[NONCE_SIZE];\n\t\tchunkNonceBuf.get(chunkNonce);\n\n\t\t// get expected MAC:\n\t\tfinal byte[] expectedMac = new byte[MAC_SIZE];\n\t\texpectedMacBuf.get(expectedMac);\n\n\t\t// get actual MAC:\n\t\tfinal byte[] calculatedMac = calcChunkMac(macKey, headerNonce, chunkNumber, chunkNonce, payloadBuf);\n\n\t\t// time-constant equality check of two MACs:\n\t\treturn MessageDigest.isEqual(expectedMac, calculatedMac);\n\t}", "protected HashEntry createEntry(HashEntry next,int hashCode,Object key,Object value){\n  return new ReferenceEntry(this,next,hashCode,key,value);\n}\n", "public void clear ( ) { m_writeLock . lock ( ) ; m_chunks . clear ( ) ; m_writeLock . unlock ( ) ; for ( final IMemoryListener listener : m_listeners ) { listener . memoryCleared ( ) ; } }", "public int read(char cbuf[],int off,int len) throws IOException {\n  if (_input == null)   throw new IOException(\"Reader closed\");\n  final int inputLength=_input.length();\n  if (_index >= inputLength)   return -1;\n  final int count=MathLib.min(inputLength - _index,len);\n  final Object csq=_input;\n  if (csq instanceof String) {\n    String str=(String)csq;\n    str.getChars(_index,_index + count,cbuf,off);\n  }\n else   if (csq instanceof Text) {\n    Text txt=(Text)csq;\n    txt.getChars(_index,_index + count,cbuf,off);\n  }\n else   if (csq instanceof TextBuilder) {\n    TextBuilder tb=(TextBuilder)csq;\n    tb.getChars(_index,_index + count,cbuf,off);\n  }\n else   if (csq instanceof CharArray) {\n    CharArray ca=(CharArray)csq;\n    System.arraycopy(ca.array(),_index + ca.offset(),cbuf,off,count);\n  }\n else {\n    for (int i=off, n=off + count, j=_index; i < n; ) {\n      cbuf[i++]=_input.charAt(j++);\n    }\n  }\n  _index+=count;\n  return count;\n}\n", "@Override\n    public RunPipelineActivityResult runPipelineActivity(RunPipelineActivityRequest request) {\n        request = beforeClientExecution(request);\n        return executeRunPipelineActivity(request);\n    }", "public Observable<Page<DataLakeStoreAccountInfoInner>> listDataLakeStoreAccountsAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String expand, final String select, final String orderby, final Boolean count, final String search, final String format) {\n        return listDataLakeStoreAccountsWithServiceResponseAsync(resourceGroupName, accountName, filter, top, skip, expand, select, orderby, count, search, format)\n            .map(new Func1<ServiceResponse<Page<DataLakeStoreAccountInfoInner>>, Page<DataLakeStoreAccountInfoInner>>() {\n                @Override\n                public Page<DataLakeStoreAccountInfoInner> call(ServiceResponse<Page<DataLakeStoreAccountInfoInner>> response) {\n                    return response.body();\n                }\n            });\n    }", "void sendRetryMessage ( ) ;", "public static int findWordEnd(CharSequence line,int pos,String noWordSep,boolean joinNonWordChars,boolean camelCasedWords,boolean eatWhitespace){\n  if (pos != 0)   pos--;\n  char ch=line.charAt(pos);\n  if (noWordSep == null)   noWordSep=\"\";\n  int type=getCharType(ch,noWordSep);\n  for (int i=pos; i < line.length(); i++) {\n    char lastCh=ch;\n    ch=line.charAt(i);\nswitch (type) {\ncase WHITESPACE:\n      if (Character.isWhitespace(ch))       break;\n else       return i;\ncase WORD_CHAR:\n    if (camelCasedWords && i > pos + 1 && !Character.isUpperCase(ch) && Character.isLetterOrDigit(ch) && Character.isUpperCase(lastCh)) {\n      return i - 1;\n    }\n else     if (camelCasedWords && Character.isUpperCase(ch) && !Character.isUpperCase(lastCh)) {\n      return i;\n    }\n else     if (Character.isLetterOrDigit(ch) || noWordSep.indexOf(ch) != -1) {\n      break;\n    }\n else     if (Character.isWhitespace(ch) && eatWhitespace) {\n      type=WHITESPACE;\n      break;\n    }\n else     return i;\ncase SYMBOL:\n  if (!joinNonWordChars && i != pos)   return i;\nif (Character.isWhitespace(ch)) {\n  if (eatWhitespace) {\n    type=WHITESPACE;\n    break;\n  }\n else   return i;\n}\n else if (Character.isLetterOrDigit(ch) || noWordSep.indexOf(ch) != -1) {\n  return i;\n}\n else {\n  break;\n}\n}\n}\nreturn line.length();\n}\n", "Observable<ComapiResult<ConversationDetails>> doCreateConversation(@NonNull final String token, @NonNull final ConversationCreate request) {\n        return wrapObservable(service.createConversation(AuthManager.addAuthPrefix(token), apiSpaceId, request)\n                .map(mapToComapiResult()), log, \"Creating conversation\" + request.getName());\n    }", "public GoToAction ( PDFObject obj , PDFObject root ) throws IOException { super ( STR_ ) ; PDFObject destObj = obj . getDictRef ( STR_ ) ; if ( destObj == null ) { throw new PDFParseException ( STR_ + obj ) ; } dest = PDFDestination . getDestination ( destObj , root ) ; }", "    public void run() {\n        while (true) {\n            clock.setText(this.getTime());\n            clock.setHorizontalAlignment(JLabel.CENTER);\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n", "public void darkerColor(int factor){\n  int color=getColor();\n  int r=color >> 16 & 0xff;\n  int g=color >> 8 & 0xff;\n  int b=color & 0xff;\n  r=Math.max(0,r - factor);\n  g=Math.max(0,g - factor);\n  b=Math.max(0,b - factor);\n  setColor(((r << 16) & 0xff0000) | ((g << 8) & 0xff00) | (b & 0xff));\n}\n", "\tprotected void bindUI(M model) {\n\t\tlog.enter(\"bindUI\");\n\t\t\n\t\tlog.debug(\"unbind to clear anything\");\n\t\tthis.unbindUI();\n\t\t\n\t\tlog.debug(\"keep reference to model\");\n\t\tthis.model = model;\n\t\t\n\t\tlog.debug(\"register handlers for model property change events\");\n\t\tthis.registerHandlersForModelChanges();\n\t\t\n\t\tlog.debug(\"register handlers for child widget events\");\n\t\tthis.registerHandlersForChildWidgetEvents();\n\t\t\n\t\tlog.leave();\n\t}\n", "private static void unpack ( final File nar , final File workingDirectory , final byte [ ] hash ) throws IOException { try ( JarFile jarFile = new JarFile ( nar ) ) { Enumeration < JarEntry > jarEntries = jarFile . entries ( ) ; while ( jarEntries . hasMoreElements ( ) ) { JarEntry jarEntry = jarEntries . nextElement ( ) ; String name = jarEntry . getName ( ) ; File f = new File ( workingDirectory , name ) ; if ( jarEntry . isDirectory ( ) ) { FileUtils . ensureDirectoryExistAndCanAccess ( f ) ; } else { makeFile ( jarFile . getInputStream ( jarEntry ) , f ) ; } } } final File hashFile = new File ( workingDirectory , HASH_FILENAME ) ; try ( final FileOutputStream fos = new FileOutputStream ( hashFile ) ) { fos . write ( hash ) ; } }", "\t\tprivate void updateSize() {\n\t\t\tint size = 0;\n\n\t\t\tfor (int i = 0; i < comp.getComponentCount(); i++)\n\t\t\t\tif (((JCheckBox)comp.getComponent(i)).getModel().isSelected())\n\t\t\t\t\tsize += installer.getIntProperty(\"comp.\" + i + \".size\");\n\n\n\t\t\tsizeLabel.setText(\"Estimated disk usage of selected components: \" + size + \"Kb\");\n\t\t}\n", "public static List<Property> diff(Shape oldShape,Shape newShape){\n  List<Property> oldList=oldShape.getPropertyListInternal(false);\n  List<Property> newList=newShape.getPropertyListInternal(false);\n  List<Property> diff=new ArrayList<>(oldList);\n  diff.addAll(newList);\n  List<Property> intersection=new ArrayList<>(oldList);\n  intersection.retainAll(newList);\n  diff.removeAll(intersection);\n  return diff;\n}\n", "  public int getClientY() {\n    if (event != null) {\n      return DOM.eventGetClientY(event);\n    }\n    return -1;\n  }\n", "\tpublic boolean isDirty() {\n\t\tif (getPwsFile() != null) {\n\t\t\treturn getPwsFile().isModified();\n\t\t}\n\t\treturn false;\n\t}\n", "public void setCriticality(java.util.Collection<NumberFilter> criticality) {\n        if (criticality == null) {\n            this.criticality = null;\n            return;\n        }\n\n        this.criticality = new java.util.ArrayList<NumberFilter>(criticality);\n    }", "\tprivate String mod(List<Term> argsTerm) {\n\t\tString left = env.tp.visit(argsTerm.get(0));\n\t\tString right = env.tp.visit(argsTerm.get(1));\n\t\tif(Util.simplify) {\n\t\t\ttry {\n\t\t\t\tint leftNumber = Integer.parseInt(left);\n\t\t\t\tint rightNumber = Integer.parseInt(right);\n\t\t\t\treturn String.valueOf(leftNumber % rightNumber);\n\t\t\t}\n\t\t\tcatch(NumberFormatException e) {}\n\t\t}\n\t\treturn Util.setPars(left + \" mod \" + right);\n\t}\n", "public RE union(RE y) throws InterruptedException {\n  return mkUnion(this,y);\n}\n", "public static String readFileToString ( File file , String encoding ) throws IOException { return readFileToString ( file , Charsets . toCharset ( encoding ) ) ; }", "public void setView(int which , boolean fixed , Se3_F64 worldToView ) {\n\t\tviews[which].known = fixed;\n\t\tviews[which].worldToView.set(worldToView);\n\t}", "    private void initializeThread(Thread t) {\n\n        if (getNamingPattern() != null) {\n            Long count = Long.valueOf(threadCounter.incrementAndGet());\n            t.setName(String.format(getNamingPattern(), count));\n        }\n\n        if (getUncaughtExceptionHandler() != null) {\n            t.setUncaughtExceptionHandler(getUncaughtExceptionHandler());\n        }\n\n        if (getPriority() != null) {\n            t.setPriority(getPriority().intValue());\n        }\n\n        if (getDaemonFlag() != null) {\n            t.setDaemon(getDaemonFlag().booleanValue());\n        }\n    }\n", "private static QueryInterval convertSimpleIntervalToQueryInterval( final Interval interval,\tfinal SAMSequenceDictionary sequenceDictionary ) {\n\t\tif (interval == null) {\n\t\t\tthrow new IllegalArgumentException(\"interval may not be null\");\n\t\t}\n\t\tif (sequenceD", "private void incrementSourceOffset ( HttpSourceOffset sourceOffset , int increment ) { if ( conf . pagination . mode == PaginationMode . BY_PAGE ) { sourceOffset . incrementStartAt ( NUM_ ) ; } else if ( conf . pagination . mode == PaginationMode . BY_OFF", "public static byte bArrayGet ( byte [ ] a , int i ) { try { return a [ i ] ; } catch ( Throwable t ) { return a [ DefaultGroovyMethodsSupport . normaliseIndex ( i , a . length ) ] ; } }", "public static double euclideanNorm ( double [ ] x1 , double [ ] x2 ) { double distance = NUM_ ; for ( int d = NUM_ ; d < x1 . length ; d ++ ) { double difference = x1 [ d ] - x2 [ d ] ; distance += difference * difference ; } return Math . sqrt ( distance ) ; }", "    public void set(String name, Object obj) throws IOException {\n\tif (name.equalsIgnoreCase(SKIP_CERTS)) {\n\t    if (!(obj instanceof Integer))\n                throw new IOException(\"Attribute value should be of type Integer.\");\n\t    int skipCertsValue = ((Integer)obj).intValue();\t    \n\t    if (skipCertsValue < -1)\n\t\tthrow new IOException(\"Invalid value for skipCerts\");\n\t    if (skipCertsValue == -1) {\n\t\tskipCerts = Integer.MAX_VALUE;\n\t    } else {\n\t\tskipCerts = skipCertsValue;\n\t    }\t\t\n\t} else\n            throw new IOException(\"Attribute name not recognized by \" +\n                                  \"CertAttrSet:InhibitAnyPolicy.\");\n        encodeThis();\n    }\n", "protected CompilationUnit createCompilationUnit ( CompilerConfiguration config , CodeSource source ) { return new CompilationUnit ( config , source , this ) ; }", "public void repr(StringBuilder buf, String sep) {\n    if (style != null) {\n      buf.append(\"style=\").append(style);\n    }\n    super.repr(buf, sep);\n  }", "public void marshall(GlobalTableDescription globalTableDescription, ProtocolMarshaller protocolMarshaller) {\n\n        if (globalTableDescription == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(globalTableDescription.getReplicationGroup(), REPLICATIONGROUP_BINDING);\n            protocolMarshaller.marshall(globalTableDescription.getGlobalTableArn(), GLOBALTABLEARN_BINDING);\n            protocolMarshaller.marshall(globalTableDescription.getCreationDateTime(), CREATIONDATETIME_BINDING);\n            protocolMarshaller.marshall(globalTableDescription.getGlobalTableStatus(), GLOBALTABLESTATUS_BINDING);\n            protocolMarshaller.marshall(globalTableDescription.getGlobalTableName(), GLOBALTABLENAME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "@SuppressWarnings(\"unchecked\")\n    static void registerAnnotationType(AnnotationClassValue<?> annotationClassValue) {\n        final String name = annotationClassValue.getName();\n        if (!ANNOTATION_TYPES.containsKey(name)) {\n            annotationClassValue.getType().ifPresent((Consumer<Class<?>>) aClass -> {\n                if (Annotation.class.isAssignableFrom(aClass)) {\n                    ANNOTATION_TYPES.put(name, (Class<? extends Annotation>) aClass);\n                }\n            });\n        }\n    }", "private void drawFrequencyLabel ( Graphics2D graphics , double xaxis , long frequency ) { String label = mLabelSizeMonitor . format ( frequency ) ; FontMetrics fontMetrics = graphics . getFontMetrics ( this . getFont ( ) ) ; Rectangle2D rect = fontMetrics . getStringBounds ( label , graphics ) ; float xOffset = ( float ) rect . getWidth ( ) / NUM_ ; graphics . drawString ( label , ( float ) ( xaxis - xOffset ) , ( float ) ( getSize ( ) . getHeight ( ) - NUM_ ) ) ; }", "\tprotected void addServerURLPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_BugzillaMetricsRPCConfiguration_serverURL_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_BugzillaMetricsRPCConfiguration_serverURL_feature\", \"_UI_BugzillaMetricsRPCConfiguration_type\"),\n\t\t\t\t EvaluationmodelPackage.Literals.BUGZILLA_METRICS_RPC_CONFIGURATION__SERVER_URL,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "protected String[] createOptions(){\n  String[] options=new String[m_ClassifierOptions.length + 2 * m_CVParams.size()];\n  int start=0, end=options.length;\n  for (int i=0; i < m_CVParams.size(); i++) {\n    CVParameter cvParam=(CVParameter)m_CVParams.elementAt(i);\n    double paramValue=cvParam.m_ParamValue;\n    if (cvParam.m_RoundParam) {\n      paramValue=Math.rint(paramValue);\n    }\n    boolean isInt=((paramValue - (int)paramValue) == 0);\n    if (cvParam.m_AddAtEnd) {\n      options[--end]=\"\" + ((cvParam.m_RoundParam || isInt) ? Utils.doubleToString(paramValue,4) : cvParam.m_ParamValue);\n      options[--end]=\"-\" + cvParam.m_ParamChar;\n    }\n else {\n      options[start++]=\"-\" + cvParam.m_ParamChar;\n      options[start++]=\"\" + ((cvParam.m_RoundParam || isInt) ? Utils.doubleToString(paramValue,4) : cvParam.m_ParamValue);\n    }\n  }\n  System.arraycopy(m_ClassifierOptions,0,options,start,m_ClassifierOptions.length);\n  return options;\n}\n", "public List<GoogleEntry> getEntries(GoogleCalendar calendar, LocalDate startDate, LocalDate endDate, ZoneId zoneId) throws IOException {\n        if (!calendar.existsInGoogle()) {\n            return new ArrayList<>(0);\n        }\n\n        ZonedDateTime st = ZonedDateTime.of(startDate, LocalTime.MIN, zoneId);\n        ZonedDateTime et = ZonedDateTime.of(endDate, LocalTime.MAX, zoneId);\n        String calendarId = URLDecoder.decode(calendar.getId(), \"UTF-8\");\n\n        List<Event> events = dao.events()\n                .list(calendarId)\n                .setTimeMin(new DateTime(Date.from(st.toInstant())))\n                .setTimeMax(new DateTime(Date.from(et.toInstant())))\n                .setSingleEvents(false)\n                .setShowDeleted(false)\n                .execute()\n                .getItems();\n\n        return toGoogleEntries(events);\n    }", "protected static BufferedImage createImage(JComponent component,Rectangle region) throws IOException {\n  boolean opaqueValue=component.isOpaque();\n  component.setOpaque(true);\n  BufferedImage image=new BufferedImage(region.width,region.height,BufferedImage.TYPE_INT_RGB);\n  Graphics2D g2d=image.createGraphics();\n  g2d.translate(-region.getX(),-region.getY());\n  component.paint(g2d);\n  g2d.dispose();\n  component.setOpaque(opaqueValue);\n  return image;\n}\n", "public static final VariableContext[] parse(String variable){\n  char[] text=variable.toCharArray();\n  List<VariableContext> contexts=new ArrayList<>();\n  int i=addMember(text,0,contexts);\n  while (i < text.length) {\n    if (text[i] == '[') {\n      if (text[++i] == '\\'') {\n        i=addStringIndex(text,i,contexts);\n      }\n else {\n        i=addIntIndex(text,i,contexts);\n      }\n      ++i;\n    }\n else {\n      i=addMember(text,i + 1,contexts);\n    }\n  }\n  return contexts.toArray(new VariableContext[contexts.size()]);\n}\n", "public boolean undefinesAll ( ) { return getDefinedRegisters ( ) . size ( ) == NUM_ ; }", "public static boolean registerLiteralId ( FaceletContext ctx , String id ) { Set < String > trackedIds = _getStackOfTrackedIds ( ctx ) . peek ( ) ; if ( trackedIds == null ) { return BOOL_ ; } if ( trackedIds . contains ( id ) ) { return BOOL_ ; } tracked", "    private void handleCharacter(char c, String entity) throws XNIException {\n        if (fDocumentHandler != null) {\n            if (fNotifyBuiltInRefs) {\n                fDocumentHandler.startGeneralEntity(entity, null, null, null);\n            }\n            \n            fSingleChar[0] = c;\n            fTempString.setValues(fSingleChar, 0, 1);\n            fDocumentHandler.characters(fTempString, null);\n            \n            if (fNotifyBuiltInRefs) {\n                fDocumentHandler.endGeneralEntity(entity, null);\n            }\n        }\n    } // handleCharacter(char)\n", "private void reloadCacheWithNewValue(final Long newValue){\n  final long newValueAsPrimitive=newValue == null ? getCacheUpdatePeriod() : newValue;\n  LOG.debug(\"invoking {} listeners\",cacheUpdatePeriodListeners.size());\n  for (  final PropertyChangeListener listener : cacheUpdatePeriodListeners) {\n    final PropertyChangeEvent event=new PropertyChangeEvent(this,\"cache\",getCacheUpdatePeriod(),newValueAsPrimitive);\n    listener.propertyChange(event);\n  }\n}\n", "private boolean lollipopAndAbove ( ) { return Build . VERSION . SDK_INT >= Build . VERSION_CODES . LOLLIPOP ; }", "    public String getValue1() {\n        return m_value1;\n    }\n", "private <T extends Annotation> boolean checkReusable(MetricResolver.Of<T> of) {\n        String name = of.metadata().getName();\n        // If the metric has been registered before (eg. metrics found in RequestScoped beans),\n        // we don't need to worry about re-usable\n        if (!of.isInitialDiscovery()) {\n            return true;\n        }\n\n        Metadata existingMetadata = registry.getMetadata().get(name);\n        if (existingMetadata != null && (existingMetadata.isReusable() == false || of.metadata().isReusable() == false)) {\n            throw new IllegalArgumentException(\"Cannot reuse metric for \" + of.metricName());\n        }\n        return true;\n\n    }", "public void run()\n    {\n\n        String strURL = this.getProperty(DBParams.URL);\n        String strOut = this.getProperty(\"out\");\n        \n        this.moveThisFile(strURL, strOut);\n    }", "\tpublic IS1BamBLHAnchorEditObj newEditInstance( IS1BamBLHAnchorObj orig ) {\n\t\tthrow CFLib.getDefaultExceptionFactory().newMustOverrideException( getClass(), \"newEditInstance\" );\n\t}\n", "long recordSize() {\n        return Math.max(LongMath.divide(_bytesAdded, Math.max(_adds, 1), RoundingMode.CEILING), 1);\n    }", "public void sortReverse(final Comparator<T> comparator) {\n    this.sort(comparator);\n    for (int i = 0; i < this.size / 2; i++) {\n      final T temp = this.elements[i];\n      this.elements[i] = this.elements[this.size - i - 1];\n      this.elements[this.size - i - 1] = temp;\n    }\n  }", "public long[] executeInsert(Connection conn, DataObject object, boolean generatedKeys) throws SQLException {\n        PreparedStatement statement = conn.prepareStatement(_sql, generatedKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS);\n        try {\n            load(statement, object);\n            long[] keys = new long[statement.executeUpdate()];\n            if (generatedKeys) {\n                ResultSet rs = statement.getGeneratedKeys();\n                for (int i = 0; rs.next(); ++i) {\n                    keys[i] = rs.getLong(1);\n                }\n                rs.close();\n            }\n            return keys;\n        } finally {\n            statement.close();\n        }\n    }", "public void setOnPremisesInstanceTagFilters(java.util.Collection<TagFilter> onPremisesInstanceTagFilters) {\n        if (onPremisesInstanceTagFilters == null) {\n            this.onPremisesInstanceTagFilters = null;\n            return;\n        }\n\n        this.onPremisesInstanceTagFilters = new com.amazonaws.internal.SdkInternalList<TagFilter>(onPremisesInstanceTagFilters);\n    }", "\tpublic void sendMessage(String message) {\n\t\tlog.trace(\"Try to send message: \" + message);\n\t\toutgoingPacket = new BeeldPacket(message);\n\t\ttry {\n\t\t\toosPacketOutStream.writeObject(outgoingPacket);\n\t\t} catch (IOException e) {\n\t\t\tlog.error(Messages.getString(\"beeld.csl.error.write\")\n\t\t\t\t\t+ e.getMessage());\n\t\t}\n\t}\n", "public int flags ( ) { return theType . flags ( ) ; }", "public RString restartGroup(String what) {\n    List<Placeholder> all = _placeholders.get(what);\n    assert all.size() == 1;\n\n    Placeholder result = all.get(0);\n    if( result.group == null ) {\n      throw new NoSuchElementException(\"Element \" + what + \" is not a group.\");\n    }\n    result.group.clear();\n    return result.group;\n  }", "public static <CT, ET> Iterator<Pair<CT, ET>> counted(Iterable<ET> iterable, Range<CT> range) {\n        dbc.precondition(iterable != null, \"cannot call counted with a null iterable\");\n        return new ZipShortestIterator<CT, ET>(range.iterator(), iterable.iterator());\n    }", "public static String[] getNames(Status[] status) {\n    if (status == null) {\n      return null;\n    }\n    String[] statusNames = new String[status.length];\n    for (int i = 0; i < statusNames.length; i++) {\n      statusNames[i] = status[i].getName();\n    }\n    return statusNames;\n  }", "protected static void bothSparseMatmult(MatrixObject output,MatrixObject left,MatrixObject right,boolean isLeftTransposed,boolean isRightTransposed) throws DMLRuntimeException {\n  int transA=isLeftTransposed ? CUSPARSE_OPERATION_TRANSPOSE : CUSPARSE_OPERATION_NON_TRANSPOSE;\n  int transB=isRightTransposed ? CUSPARSE_OPERATION_TRANSPOSE : CUSPARSE_OPERATION_NON_TRANSPOSE;\n  int m=(int)(isLeftTransposed ? left.getNumColumns() : left.getNumRows());\n  int n=(int)(isRightTransposed ? right.getNumRows() : right.getNumColumns());\n  int k=(int)(isLeftTransposed ? left.getNumRows() : left.getNumColumns());\n  int k1=(int)(isRightTransposed ? right.getNumColumns() : right.getNumRows());\n  if (k != k1)   throw new DMLRuntimeException(\"Dimension mismatch: \" + k + \" != \"+ k1);\n  if (m == -1 || n == -1 || k == -1)   throw new DMLRuntimeException(\"Incorrect dimensions\");\n  CSRPointer A=((JCudaObject)left.getGPUObject()).jcudaSparseMatrixPtr;\n  CSRPointer B=((JCudaObject)right.getGPUObject()).jcudaSparseMatrixPtr;\n  if (!isRightTransposed && right.getNumColumns() == 1) {\n    sparseMatrixVectorMult(output,transA,(int)left.getNumRows(),(int)left.getNumColumns(),(int)right.getNumRows(),A,B);\n  }\n else {\n    sparseSparseMatmult(output,transA,transB,m,n,k,A,B);\n  }\n}\n", "   protected void initialize() {\n      super.initialize();\n\n      text     = \"\";\n      editable = false;\n   }\n", "public List<Resource> scan(){\n  List<Resource> foundResources=new LinkedList<>();\n  List<Class<? extends Object>> classes;\n  try {\n    if (jarUrl == null) {\n      if (this.clazz != null) {\n        classes=getClassesInPackage(this.packageName,this.clazz);\n      }\n else {\n        classes=getClassesInPackage(this.packageName);\n      }\n    }\n else {\n      classes=getClassesInJarFile(jarUrl);\n    }\n  }\n catch (  IOException e) {\n    return foundResources;\n  }\n  for (  Class clazz : classes) {\n    foundResources.addAll(getResourcesFromClassRecursive(clazz));\n  }\n  return foundResources;\n}\n", "    private Integer getIntegerPropertyOverrideValue(String name, String key) {\n        if (properties != null) {\n            String propertyName = getPropertyName(name, key);\n\n            String propertyOverrideValue = properties.getProperty(propertyName);\n\n            if (propertyOverrideValue != null) {\n                try {\n                    return Integer.parseInt(propertyOverrideValue);\n                }\n                catch (NumberFormatException e) {\n                    logger.error(\"Could not parse property override key={}, value={}\",\n                            key, propertyOverrideValue);\n                }\n            }\n        }\n        return null;\n    }\n", "private void accum_subset(Chunk chks[], Chunk nids, Chunk wrks, int nnids[]) {\n      for( int row=0; row<nnids.length; row++ ) { // Over all rows\n        int nid = nnids[row];                     // Get Node to decide from\n        if( nid >= 0 ) {        // row already predicts perfectly or OOB\n          assert !Double.isNaN(wrks.at0(row)); // Already marked as sampled-away\n          DHistogram nhs[] = _hcs[nid];\n          int sCols[] = _tree.undecided(nid+_leaf)._scoreCols; // Columns to score (null, or a list of selected cols)\n          for( int j=0; j<sCols.length; j++) { // For tracked cols\n            final int c = sCols[j];\n            nhs[c].incr((float)chks[c].at0(row),wrks.at0(row)); // Histogram row/col\n          }\n        }\n      }\n    }", "@Override\n  protected ServiceRefAmp lookupService(String address)\n  {\n    String prefix = \"cluster://\";\n\n    if (address.startsWith(prefix)) {\n      int p = address.indexOf('/', prefix.length() + 1);\n      \n      if (p > 0) {\n        String cluster = address.substring(prefix.length(), p);\n        String path = address.substring(p);\n    \n        return lookupService(cluster, path);\n      }\n    }\n    \n    ServiceRefAmp serviceRef = services().service(address);\n    \n    return serviceRef;\n  }", "    public void dirtyCopy() {\n        if (start == shared.start)\n            start = start.copy();\n        if (operators == shared.operators)\n            operators = new HashMap<String,Operator>(operators);\n    }\n", "private void removeDuplicates ( ) { m_reducedResults . clear ( ) ; Object last = null ; for ( final SearchResult r : m_results ) { if ( last != r . getObject ( ) ) { last = r . getObject ( ) ; m_reducedResults . add ( r ) ; } } }", "public static ResultSet resultSetWithNull(Connection conn) throws SQLException {\n  PreparedStatement statement=conn.prepareStatement(\"select null from system_range(1,1)\");\n  return statement.executeQuery();\n}\n", "public static String replaceShortname ( String input , boolean removeIfUnsupported ) { Matcher matcher = SHORTNAME_PATTERN . matcher ( input ) ; boolean supported = Build . VERSION . SDK_INT >= NUM_ ; while ( matcher . find ( ) ) { String unicode = _short", "public void setFocusTraversalOrder( int traversalOrder ) {\n        Assert.isTrue( traversalOrder == COLUMN_MAJOR_FOCUS_ORDER || traversalOrder == ROW_MAJOR_FOCUS_ORDER,\n            \"traversalOrder must be one of COLUMN_MAJOR_FOCUS_ORDER or ROW_MAJOR_FOCUS_ORDER\");\n\n        List focusOrder = new ArrayList(items.size());\n\n        if( traversalOrder == ROW_MAJOR_FOCUS_ORDER ) {\n            for( int row=0; row < rowOccupiers.size() - 1; row++ ) {\n                for( int col=0; col < maxColumns; col++ ) {\n                    Cell currentCell = getOccupier(row, col);\n                    if (currentCell != null && currentCell.getComponent() != null && !focusOrder.contains(currentCell.getComponent())) {\n                        focusOrder.add(currentCell.getComponent());\n                    }\n                }\n            }\n        } else if( traversalOrder == COLUMN_MAJOR_FOCUS_ORDER ) {\n            for( int col = 0; col < maxColumns; col++ ) {\n                for( int row = 0; row < rowOccupiers.size() - 1; row++ ) {\n                    Cell currentCell = getOccupier( row, col );\n                    if( currentCell != null && currentCell.getComponent() != null && !focusOrder.contains( currentCell.getComponent() ) ) {\n                        focusOrder.add( currentCell.getComponent() );\n                    }\n                }\n            }\n        }\n\n        setCustomFocusTraversalOrder( focusOrder );\n    }", "public ModelConverter rotate(float rotation,float x,float y,float z,Vec3UV center){\n  ROTATION_MATRIX.setRotations((float)Math.toRadians(x * rotation),(float)Math.toRadians(y * rotation),(float)Math.toRadians(z * rotation));\n  for (  Box box : this.modelBoxList) {\n    for (    Quad quad : box.quads) {\n      for (int i=0; i < 4; i++) {\n        Vec3UV vec=quad.vertices[i];\n        Vec3UV rotatedPoint=null;\n        rotatedPoint=ROTATION_MATRIX.transformVec(vec,center);\n        vec.x=rotatedPoint.x;\n        vec.y=rotatedPoint.y;\n        vec.z=rotatedPoint.z;\n      }\n    }\n  }\n  Vec3UV rotatedFwdVec=ROTATION_MATRIX.transformVec(this.fwdVec,center);\n  this.fwdVec.x=rotatedFwdVec.x;\n  this.fwdVec.y=rotatedFwdVec.y;\n  this.fwdVec.z=rotatedFwdVec.z;\n  Vec3UV rotatedUpVec=ROTATION_MATRIX.transformVec(this.upVec,center);\n  this.upVec.x=rotatedUpVec.x;\n  this.upVec.y=rotatedUpVec.y;\n  this.upVec.z=rotatedUpVec.z;\n  return this;\n}\n", "public static SketchHex create(String sketchName,String hexString) throws HexParsingException {\n  if (sketchName.length() > Constants.MAX_SKETCH_NAME_LENGTH) {\n    sketchName=sketchName.substring(0,Constants.MAX_SKETCH_NAME_LENGTH);\n  }\n  List<Line> lines=parseHexStringToLines(hexString);\n  byte[] bytes=convertLinesToBytes(lines);\n  return new AutoParcel_SketchHex(sketchName,bytes);\n}\n", "public static String format(String[] d, String sep) {\n    if(d == null) {\n      return \"null\";\n    }\n    if(d.length == 0) {\n      return \"\";\n    }\n    if(d.length == 1) {\n      return d[0];\n    }\n    int len = sep.length() * (d.length - 1);\n    for(String s : d) {\n      len += s.length();\n    }\n    StringBuilder buffer = new StringBuilder(len)//\n        .append(d[0]);\n    for(int i = 1; i < d.length; i++) {\n      buffer.append(sep).append(d[i]);\n    }\n    return buffer.toString();\n  }", "@Override\n    public String findClassAbsoluteFileName(String fileName, String className, List<String> sourceRoots) {\n        // usually the fileName is just the name of the file without any package information\n        // so lets turn the package name into a path\n        int lastIdx = className.lastIndexOf('.');\n        if (lastIdx > 0 && !(fileName.contains(\"/\") || fileName.contains(File.separator))) {\n            String packagePath = className.substring(0, lastIdx).replace('.', File.separatorChar);\n            fileName = packagePath + File.separator + fileName;\n        }\n        File baseDir = getBaseDir();\n        String answer = findInSourceFolders(baseDir, fileName);\n        if (answer == null && sourceRoots != null) {\n            for (String sourceRoot : sourceRoots) {\n                answer = findInSourceFolders(new File(sourceRoot), fileName);\n                if (answer != null) break;\n            }\n        }\n        return answer;\n    }", "        protected int getOpposite(int edgeIndex) {\n            switch (this.direction) {\n            case FORWARD:\n                return getTarget(edgeIndex);\n            default:\n                return getSource(edgeIndex);\n            }\n        }\n", "public BusinessObjectDataCreateRequest createBusinessObjectDataCreateRequest(String namespaceCode,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,Integer businessObjectFormatVersion,String partitionKey,String partitionValue,String businessObjectDataStatusCode,String storageName,String storageDirectoryPath,List<StorageFile> storageFiles){\n  BusinessObjectDataCreateRequest businessObjectDataCreateRequest=new BusinessObjectDataCreateRequest();\n  businessObjectDataCreateRequest.setNamespace(namespaceCode);\n  businessObjectDataCreateRequest.setBusinessObjectDefinitionName(businessObjectDefinitionName);\n  businessObjectDataCreateRequest.setBusinessObjectFormatUsage(businessObjectFormatUsage);\n  businessObjectDataCreateRequest.setBusinessObjectFormatFileType(businessObjectFormatFileType);\n  businessObjectDataCreateRequest.setBusinessObjectFormatVersion(businessObjectFormatVersion);\n  businessObjectDataCreateRequest.setPartitionKey(partitionKey);\n  businessObjectDataCreateRequest.setPartitionValue(partitionValue);\n  businessObjectDataCreateRequest.setStatus(businessObjectDataStatusCode);\n  List<StorageUnitCreateRequest> storageUnits=new ArrayList<>();\n  businessObjectDataCreateRequest.setStorageUnits(storageUnits);\n  StorageUnitCreateRequest storageUnit=new StorageUnitCreateRequest();\n  storageUnits.add(storageUnit);\n  storageUnit.setStorageName(storageName);\n  if (storageDirectoryPath != null) {\n    StorageDirectory storageDirectory=new StorageDirectory();\n    storageUnit.setStorageDirectory(storageDirectory);\n    storageDirectory.setDirectoryPath(storageDirectoryPath);\n  }\n  storageUnit.setStorageFiles(storageFiles);\n  return businessObjectDataCreateRequest;\n}\n", "public SimpleGuacamoleTunnel(GuacamoleSocket socket){\n  this.socket=socket;\n}\n", "public void removeMother(Node aMother){\n  if (!motherToIndex.containsKey(aMother))   throw new IllegalArgumentException(\"The given node is not a mother of this node\");\n  motherToIndex.remove(aMother);\n  mothers.remove(aMother);\n}\n", "\tpublic Object getImage(Object object) {\n\t\treturn overlayImage(object, getResourceLocator().getImage(\n\t\t\t\t\"full/obj16/InteractionConstraint\")); //$NON-NLS-1$\n\t}\n", "void editedLocalEdgeComment ( INaviEdge edge , IComment comment ) ;", "public static LazyQueryContainer createDSLazyQueryContainer(final BeanQueryFactory<? extends AbstractBeanQuery<?>> queryFactory){\n  queryFactory.setQueryConfiguration(Collections.emptyMap());\n  return new LazyQueryContainer(new LazyQueryDefinition(true,20,\"tagIdName\"),queryFactory);\n}\n", "public boolean isInterface(){\n  lazyLoad();\n  return Modifier.isInterface(_accessFlags);\n}\n", "private static void checkMouseLocation(){\n  PointerInfo info=MouseInfo.getPointerInfo();\n  if (info == null) {\n    return;\n  }\n  Point currentLocation=info.getLocation();\n  if (lastLocation != null && !lastLocation.equals(currentLocation)) {\n    lastMoved=System.currentTimeMillis();\n    triggerActivity();\n  }\n  lastLocation=currentLocation;\n}\n", "public static Node toNode(Source s) {\n        Node n = tryExtractNodeFromDOMSource(s);\n        return n != null ? n \n            : toDocument(s, DocumentBuilderFactoryConfigurer.Default.configure(DocumentBuilderFactory.newInstance()));\n    }", "\tpublic Planet (java.lang.Integer _id) {\n\t\tsuper(_id);\n\t}\n", "public static int combine(int hashCode,float value){\n  int v=Float.floatToIntBits(value);\n  return combine(hashCode,v);\n}\n", "public E put(int key,E value){\n  if (value == null) {\n    throw new NullPointerException();\n  }\n  final E prev;\n  if (key < array.length) {\n    prev=(E)array[key];\n  }\n else {\n    array=Arrays.copyOf(array,key * 3 / 2 + 1);\n    prev=null;\n    size++;\n  }\n  array[key]=value;\n  return prev;\n}\n", "ActionMap createActionMap ( ) { ActionMap map = new ActionMapUIResource ( ) ; map . put ( STR_ , new ShowSystemMenuAction ( BOOL_ ) ) ; map . put ( STR_ , new ShowSystemMenuAction ( BOOL_ ) ) ; return map ; }", "    public void clear() {\n        super.clear();\n        int[] keys = _set;\n        float[] vals = _values;\n        byte[] states = _states;\n\n        for (int i = keys.length; i-- > 0;) {\n            keys[i] = (int)0;\n            vals[i] = (float)0;\n            states[i] = FREE;\n        }\n    }\n", "protected void broadcast ( DecoderStateEvent event ) { if ( mDecoderStateListener != null ) { mDecoderStateListener . receive ( event ) ; } }", "private static double[] calculateParameters( final double[][] elevationValues ) {\n        int rows = elevationValues.length;\n        int cols = elevationValues[0].length;\n        int pointsNum = rows * cols;\n\n        final double[][] xyMatrix = new double[pointsNum][6];\n        final double[] valueArray = new double[pointsNum];\n\n        // TODO check on resolution\n        int index = 0;\n        for( int y = 0; y < rows; y++ ) {\n            for( int x = 0; x < cols; x++ ) {\n                xyMatrix[index][0] = x * x; // x^2\n                xyMatrix[index][1] = y * y; // y^2\n                xyMatrix[index][2] = x * y; // xy\n                xyMatrix[index][3] = x; // x\n                xyMatrix[index][4] = y; // y\n                xyMatrix[index][5] = 1;\n                valueArray[index] = elevationValues[y][x];\n                index++;\n            }\n        }\n\n        RealMatrix A = MatrixUtils.createRealMatrix(xyMatrix);\n        RealVector z = MatrixUtils.createRealVector(valueArray);\n\n        DecompositionSolver solver = new RRQRDecomposition(A).getSolver();\n        RealVector solution = solver.solve(z);\n\n        // start values for a, b, c, d, e, f, all set to 0.0\n        final double[] parameters = solution.toArray();\n        return parameters;\n    }", "private static void validateURL ( SpaceURL spaceURL ) throws SpaceURLValidationException { Enumeration names = spaceURL . propertyNames ( ) ; while ( names . hasMoreElements ( ) ) { String property = names . nextElement ( ) . toString ( ) ; if ( _logger . isLoggable ( Level . FINE ) ) _logger . fine ( STR_ + property + STR_ + spaceURL . getProperty ( property ) ) ; if ( ! urlElements . contains ( property . toLowerCase ( ) ) ) throw new SpaceURLValidationException ( STR_ + property + STR_ ) ; } }", "public boolean updateDistance ( int checkingDistance , AStarNode parentOtherNode ) { if ( checkingDistance < g ) { g = checkingDistance ; parent = parentOtherNode ; updateTargetCostEstimate ( ) ; return BOOL_ ; } return BOOL_ ; }", "public boolean checkMaxIterations ( final int iteration , final Type ecType ) { if ( iteration < maxIterations_ ) return BOOL_ ; this . ecType = Type . MaxIterations ; throw new UnsupportedOperationException ( STR_ ) ; }", "static public double j1(double x) throws ArithmeticException {\n  double ax;\n  double y;\n  double ans1, ans2;\n  if ((ax=Math.abs(x)) < 8.0) {\n    y=x * x;\n    ans1=x * (72362614232.0 + y * (-7895059235.0 + y * (242396853.1 + y * (-2972611.439 + y * (15704.48260 + y * (-30.16036606))))));\n    ans2=144725228442.0 + y * (2300535178.0 + y * (18583304.74 + y * (99447.43394 + y * (376.9991397 + y * 1.0))));\n    return ans1 / ans2;\n  }\n else {\n    double z=8.0 / ax;\n    double xx=ax - 2.356194491;\n    y=z * z;\n    ans1=1.0 + y * (0.183105e-2 + y * (-0.3516396496e-4 + y * (0.2457520174e-5 + y * (-0.240337019e-6))));\n    ans2=0.04687499995 + y * (-0.2002690873e-3 + y * (0.8449199096e-5 + y * (-0.88228987e-6 + y * 0.105787412e-6)));\n    double ans=Math.sqrt(0.636619772 / ax) * (Math.cos(xx) * ans1 - z * Math.sin(xx) * ans2);\n    if (x < 0.0)     ans=-ans;\n    return ans;\n  }\n}\n", "\tprivate void clearRegionLink() {\n\t\t// Bail out if it's not there\n\t\tif (regionLink == null) return;\n\t\t\n\t\tregionLink.dispose();\n\t\tregionLink = null;\n\t\trecordLabel.dispose();\n\t\trecordLabel = null;\n\t}\n", "public static snmp_manager delete(nitro_service client, snmp_manager resource) throws Exception\r\n\t{\r\n\t\tresource.validate(\"delete\");\r\n\t\treturn ((snmp_manager[]) resource.delete_resource(client))[0];\r\n\t}", "    public void setFrustumFar( float frustumFar ) {\n        this.frustumFar = frustumFar;\n        onFrustumChange();\n    }\n", "public ServiceFuture<IntegrationAccountPartnerInner> createOrUpdateAsync(String resourceGroupName, String integrationAccountName, String partnerName, IntegrationAccountPartnerInner partner, final ServiceCallback<IntegrationAccountPartnerInner> serviceCallback) {\n        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, integrationAccountName, partnerName, partner), serviceCallback);\n    }", "private <Analysis> Analysis getMethodAnalysisNoException(Class<Analysis> analysisClass, Method method) {\n        try {\n            return getMethodAnalysis(analysisClass, method);\n        } catch (CheckedAnalysisException e) {\n            IllegalStateException ise = new IllegalStateException(\"should not happen\");\n            ise.initCause(e);\n            throw ise;\n        }\n    }", "public void commit ( ) throws InterruptedException ;", "public void add(Permission permission){\n  if (!(permission instanceof FilePermission))   throw new IllegalArgumentException(\"invalid permission: \" + permission);\n  if (isReadOnly())   throw new SecurityException(\"attempt to add a Permission to a readonly PermissionCollection\");\nsynchronized (this) {\n    perms.add(permission);\n  }\n}\n", "public void processFileAndScheduleJobs ( String fileName , Scheduler sched ) throws Exception { processFileAndScheduleJobs ( fileName , getSystemIdForFileName ( fileName ) , sched ) ; }", "public int read ( final InputStream is , final int contentLength ) { if ( is != null ) { try { final int capacity = ( contentLength > NUM_ ) ? ( contentLength + NUM_ ) : NUM_ ; final ByteArrayOutputStream buffer = new ByteArrayOutputStream ( capacity ) ; int nRead ; final byte [ ] data = new byte [ NUM_ ] ; while ( ( nRead = is . read ( data , NUM_ , data . length ) ) != - NUM_ ) { buffer . write ( data , NUM_ , nRead ) ; } buffer . flush ( ) ; read ( buffer . toByteArray ( ) ) ; } catch ( final IOException e ) { Log . w ( TAG , STR_ , e ) ; } } else { status = STATUS_OPEN_ERROR ; } try { is . close ( ) ; } catch ( final Exception e ) { Log . w ( TAG , STR_ , e ) ; } return status ; }", "\tpublic void generateBlockingWaits() {\n\t\tMap<XlimTopLevelPort,Integer> failedTests=new HashMap<XlimTopLevelPort,Integer>();\n\t\tgenerateBlockingWaits(failedTests);\n\t}\n", "public PBConfig config() {\n    if (this.config != null)\n      return this.config;\n    Configuration pbConfig = this.f.configurationFor(ConfigurationType.PB_ENCODER);\n    return pbConfig != null ? (PBConfig) pbConfig : this.defaultConfig;\n  }", "\tpublic void removeEntry(String customerID) {\n\t\tif (this.revocationList.contains(customerID)) {\n\t\t\tthis.revocationList.remove(customerID);\n\t\t}\n\t}\n", "public static LogMessage read(final DataInputStream inputStream) throws IOException {\n  LogMessage entry=new LogMessage();\n  int svclen=inputStream.read();\n  if (svclen > 0) {\n    byte[] svcArr=new byte[svclen];\n    inputStream.readFully(svcArr);\n    entry.setService(svcArr);\n  }\n  int fnameOffset=inputStream.readShort();\n  int fnameLen=inputStream.readShort();\n  entry.setFileName(fnameOffset,fnameLen);\n  int tnameOffset=inputStream.readShort();\n  int tnameLen=inputStream.readShort();\n  entry.setThreadName(tnameOffset,tnameLen);\n  entry.setLevel(inputStream.read());\n  int lineNoOffset=inputStream.readShort();\n  int lineNoLen=inputStream.read();\n  entry.setLineNumber(lineNoOffset,lineNoLen);\n  entry.setTime(inputStream.readLong());\n  int timeOffset=inputStream.readShort();\n  int timeLen=inputStream.read();\n  entry.setTimeBytes(timeOffset,timeLen);\n  entry.setLogOffset(inputStream.readShort());\n  int msglen=inputStream.readInt();\n  if (msglen > 0) {\n    byte[] msgArr=new byte[msglen];\n    inputStream.readFully(msgArr);\n    entry.setFirstLine(msgArr);\n  }\n  return entry;\n}\n", "\tpublic Object getFirstSelectedDataSource(boolean bCoreObject) {\n\t\tif (table == null || table.isDisposed() || table.getSelectionCount() == 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTableRowCore row = getRow(table.getSelection()[0]);\n\t\tif (row == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn row.getDataSource(bCoreObject);\n\t}\n", "public ResolvedFunction ( final Function function ) { assert function != null ; this . address = function . getAddress ( ) ; this . function = function ; this . memoryModule = null ; }", "@Override\n    public IAtomType findMatchingAtomType(IAtomContainer atomContainer, IAtom atomInterface) throws CDKException {\n        if (factory == null) {\n            try {\n                factory = AtomTypeFactory.getInstance(\"org/openscience/cdk/config/data/mmff94_atomtypes.xml\",\n                        atomContainer.getBuilder());\n            } catch (Exception ex1) {\n                logger.error(ex1.getMessage());\n                logger.debug(ex1);\n                throw new CDKException(\"Could not instantiate the AtomType list!\", ex1);\n            }\n        }\n\n        IAtom atom = atomInterface;\n        //logger.debug(\"****** Configure MMFF94 AtomType via findMatching ******\");\n        //logger.debug(\" Symbol:\" + atom.getSymbol() +\" HoseCode>\" + atom.getSphericalMatcher() + \" \");\n        logger.debug(\" Symbol:\" + atom.getSymbol() + \" HoseCode>\" + atom.getProperty(CDKConstants.SPHERICAL_MATCHER)\n                + \" \");\n        //System.out.print(\"IN MMFF94AtomTypeMatcher Symbol:\" + atom.getSymbol() +\" HoseCode>\" + atom.getProperty(CDKConstants.SPHERICAL_MATCHER) + \" \");\n\n        if (atom instanceof IPseudoAtom) {\n            return factory.getAtomTypes(\"DU\")[0];\n        }\n        Pattern p1 = null;\n        Pattern p2 = null;\n        String ID = \"\";\n        boolean atomTypeFlag = false;\n        Matcher mat1 = null;\n        Matcher mat2 = null;\n        IBond.Order tmpMaxBondOrder;\n        maxBondOrder = atomContainer.getMaximumBondOrder(atom);\n        for (int j = 0; j < atomTypeIds.length; j++) {\n            tmpMaxBondOrder = factory.getAtomType(atomTypeIds[j]).getMaxBondOrder();\n            String atomSphericalMatcher = (String) factory.getAtomType(atomTypeIds[j]).getProperty(\n                    CDKConstants.SPHERICAL_MATCHER);\n            logger.debug(j + \" ATOM TYPE \" + tmpMaxBondOrder + \" \" + atomSphericalMatcher);\n            p1 = Pattern.compile(atomSphericalMatcher);\n            mat1 = p1.matcher((String) atom.getProperty(CDKConstants.SPHERICAL_MATCHER));\n            if (mat1.matches()) {\n                ID = atomTypeIds[j];\n                Object property = atom.getProperty(CDKConstants.CHEMICAL_GROUP_CONSTANT);\n                int atomChemGroupConstant = (Integer) property;\n                Object ringSize = atom.getProperty(CDKConstants.PART_OF_RING_OF_SIZE);\n                int atomRingSize = -1;\n                if (ringSize != null) {\n                    atomRingSize = (Integer) ringSize;\n                }\n                if (atomTypeIds[j].equals(\"C\")) {\n                    if (atomChemGroupConstant != -1) {//in Ring\n                        if (ringSize != null && maxBondOrder == IBond.Order.SINGLE) {\n                            if (atomRingSize == 3) {\n                                ID = atomTypeIds[9];//sp3 3mem rings\n                            } else if (atomRingSize == 4) {\n                                ID = atomTypeIds[8];//sp3 4mem rings\n                            }\n                        } else {//sp2\n                            String type13Matcher = getSphericalMatcher(atomTypeIds[13]);\n                            p1 = Pattern.compile(type13Matcher);//C5B\n                            mat1 = p1.matcher(atomSphericalMatcher);\n                            String type12Matcher = getSphericalMatcher(atomTypeIds[12]);\n                            p2 = Pattern.compile(type12Matcher);//C5A\n                            mat2 = p2.matcher(atomSphericalMatcher);\n                            if (mat1.matches() && atomChemGroupConstant % 2 == 0\n                                    && atom.getFlag(CDKConstants.ISAROMATIC) && atomRingSize == 5) {\n                                ID = atomTypeIds[13];\n                            } else if (mat2.matches() && atomChemGroupConstant % 2 == 0\n                                    && atom.getFlag(CDKConstants.ISAROMATIC) && atomRingSize == 5) {\n                                ID = atomTypeIds[12];\n                            } else if (atomChemGroupConstant % 2 == 0 && atom.getFlag(CDKConstants.ISAROMATIC)\n                                    && atomRingSize == 5) {\n                                ID = atomTypeIds[14];//C5 in het 5 ring\n                            } else if (atom.getFlag(CDKConstants.ISAROMATIC)) {\n                                ID = atomTypeIds[11];//Car in benzene, pyroll\n                            }\n                        }\n\n                    } else {//not in Ring\n                        p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[66]));//S=C\n                        mat1 = p1.matcher(atomSphericalMatcher);\n                        if (mat1.matches()) {\n                            ID = atomTypeIds[66];//S=C\n                        }\n                    }\n\n                } else if (atomTypeIds[j].equals(\"Csp2\")) {\n                    if (atomChemGroupConstant % 2 == 0 & atomRingSize == 4 & !atom.getFlag(CDKConstants.ISAROMATIC)) {\n                        ID = atomTypeIds[10];//CE4R\n                    }\n\n                } else if (atomTypeIds[j].equals(\"C=\")) {\n                    if (atomChemGroupConstant % 2 == 0 && atom.getFlag(CDKConstants.ISAROMATIC)) {\n                        ID = atomTypeIds[12];//C5A\n                    }\n\n                } else if (atomTypeIds[j].equals(\"N\")) {\n                    //Amid\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[48]));//NC=0\n                    mat1 = p1.matcher(atomSphericalMatcher);\n                    if (mat1.matches() && atomChemGroupConstant == -1) {\n                        ID = atomTypeIds[48];//NC=O\n                    }\n                    //nsp3 oxide\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[44]));//sp3 n-oxide\n                    mat1 = p1.matcher(atomSphericalMatcher);\n                    if (mat1.matches() && maxBondOrder == tmpMaxBondOrder) {\n                        ID = atomTypeIds[44];\n                    }\n                    //ring sytems\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[56]));\n                    mat1 = p1.matcher(atomSphericalMatcher);\n\n                    if (atomChemGroupConstant == 10) {\n                        ID = atomTypeIds[56];\n                    } else if (atomChemGroupConstant == 4) {\n                        ID = atomTypeIds[57];\n                    } else if (atomChemGroupConstant % 2 == 0 & atomRingSize == 5\n                            & atom.getFlag(CDKConstants.ISAROMATIC)) {\n                        ID = atomTypeIds[64];\n                    }\n                    //Nsp2-Oxides\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[61]));//npox\n                    mat1 = p1.matcher(atomSphericalMatcher);\n\n                    if (mat1.matches() && maxBondOrder == tmpMaxBondOrder) {\n                        ID = atomTypeIds[43];\n                    }\n                    if (atom.getFlag(CDKConstants.ISAROMATIC)) {\n                        if (mat1.matches() && atomChemGroupConstant == 12) {\n                            ID = atomTypeIds[61];\n                        } else if (mat1.matches() && atomRingSize == 5) {\n                            ID = atomTypeIds[62];\n                        }\n                    }\n                    //NC#N\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[45]));\n                    mat1 = p1.matcher(getSphericalMatcher(atom));\n                    if (mat1.matches()) {\n                        ID = atomTypeIds[45];\n                    }\n\n                } else if (atomTypeIds[j].equals(\"N=C\")) {\n                    //n beta heteroaromatic ring\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[59]));\n                    mat1 = p1.matcher(getSphericalMatcher(atom));\n                    if (atomChemGroupConstant != -1) {\n                        if (mat1.matches() && atomChemGroupConstant % 2 == 0 && atom.getFlag(CDKConstants.ISAROMATIC)\n                                && atomRingSize == 5) {\n                            ID = atomTypeIds[59];//N5A\n                        } else if (atomChemGroupConstant == 10) {//NPYD\n                            ID = atomTypeIds[56];\n                        } else if (atomChemGroupConstant == 4) {//NPYL\n                            ID = atomTypeIds[57];\n                        }\n                    }\n                    //N2OX\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[43]));\n                    mat1 = p1.matcher(getSphericalMatcher(atom));\n                    if (mat1.matches()) {\n                        if (atomChemGroupConstant == 10) {\n                            ID = atomTypeIds[61];//npox\n                        } else if (atom.getFlag(CDKConstants.ISAROMATIC) && atomRingSize == 5) {\n                            ID = atomTypeIds[62];//n5ox\n                        } else {\n                            ID = atomTypeIds[43];//n2ox\n                        }\n                    }\n\n                } else if (atomTypeIds[j].equals(\"N2OX\")) {\n                    //NO3\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[46]));\n                    mat1 = p1.matcher(getSphericalMatcher(atom));\n                    if (mat1.matches() && atomChemGroupConstant == -1) {\n                        ID = atomTypeIds[46];//NO3\n                    }\n                    if (atomChemGroupConstant == 12) {\n                        ID = atomTypeIds[61];//NPOX\n                    } else if (atomChemGroupConstant != -1 && atom.getFlag(CDKConstants.ISAROMATIC)\n                            && atomRingSize == 5) {\n                        ID = atomTypeIds[62];//N5OX\n                    }\n\n                } else if (atomTypeIds[j].equals(\"=N=\") || atomTypeIds[j].equals(\"NAZT\")) {\n                    if (atomChemGroupConstant != -1 && atom.getFlag(CDKConstants.ISAROMATIC) && atomRingSize == 5) {\n                        ID = atomTypeIds[59];//aromatic N5A\n                    }\n\n                } else if (atomTypeIds[j].equals(\"N+=\")) {\n                    if (atomChemGroupConstant != -1 && atom.getFlag(CDKConstants.ISAROMATIC) && atomRingSize == 5) {\n                        ID = atomTypeIds[63];//n5+\n                    } else if (atomChemGroupConstant == 12) {\n                        ID = atomTypeIds[58];//npd+\n                    }\n\n                } else if (atomTypeIds[j].equals(\"O\")) {\n                    if (atomChemGroupConstant == 6) {\n                        ID = atomTypeIds[35];//Oar\n                    }\n\n                } else if (atomTypeIds[j].equals(\"HO\")) {\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[21]));\n                    mat1 = p1.matcher(atomSphericalMatcher);\n                    if (mat1.matches()) {\n                        ID = atomTypeIds[21];//HOCC\n                    }\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[18]));\n                    mat1 = p1.matcher(atomSphericalMatcher);\n                    if (mat1.matches()) {\n                        ID = atomTypeIds[18];//HOCO\n                    }\n\n                } else if (atomTypeIds[j].equals(\"P\")) {\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[75]));\n                    mat1 = p1.matcher(atomSphericalMatcher);\n                    if (mat1.matches()) {\n                        ID = atomTypeIds[75];//-P=C\n                    }\n                } else if (atomTypeIds[j].equals(\"S\")) {\n                    if (atomRingSize == 5 && atom.getFlag(CDKConstants.ISAROMATIC)) {\n                        ID = atomTypeIds[72];//Sthiophen\n                    }\n                } else if (atomTypeIds[j].equals(\"HC\")) {\n                    p1 = Pattern.compile(getSphericalMatcher(\"HP\"));\n                    mat1 = p1.matcher((String) atom.getProperty(CDKConstants.SPHERICAL_MATCHER));\n                    if (mat1.matches()) {\n                        ID = \"HP\";\n                    }\n                }\n\n                atomTypeFlag = true;\n                logger.debug(\" MATCH AtomTypeID:\" + j + \" \" + ID);\n                break;\n            }//IF\n        }//for end\n        if (atomTypeFlag) {\n            atomTypeFlag = false;\n            //System.out.println(\" \"+ID);\n            return factory.getAtomType(ID);\n        } else {\n            return factory.getAtomType(\"DU\");\n        }\n    }", "public int size() {\n        // Since the sets are disjoint, we can simple sum their sizes\n        int size = 0;\n        for (Set<T> s : sets)\n            size += s.size();\n        return size;\n    }", "private void createDataLinks(SBWorkflow workflow) throws SBException {\n  for (  SBOutputPort port : workflow.getOutputs()) {\n    List<String> sources=transformSource(port.getSource());\n    for (int position=0; position < sources.size(); position++) {\n      String destination=port.getId();\n      LinkMerge linkMerge=port.getLinkMerge() != null ? LinkMerge.valueOf(port.getLinkMerge()) : LinkMerge.merge_nested;\n      SBDataLink dataLink=new SBDataLink(sources.get(position),destination,linkMerge,position + 1);\n      workflow.addDataLink(dataLink);\n    }\n  }\n  for (  SBStep step : workflow.getSteps()) {\n    List<SBDataLink> dataLinks=new ArrayList<>();\n    for (    Map<String,Object> input : step.getInputs()) {\n      List<String> sources=transformSource(SBBindingHelper.getSource(input));\n      for (int position=0; position < sources.size(); position++) {\n        String destination=SBBindingHelper.getId(input);\n        LinkMerge linkMerge=SBBindingHelper.getLinkMerge(input) != null ? LinkMerge.valueOf(SBBindingHelper.getLinkMerge(input)) : LinkMerge.merge_nested;\n        SBDataLink dataLink=new SBDataLink(sources.get(position),destination,linkMerge,position + 1);\n        dataLinks.add(dataLink);\n      }\n    }\n    workflow.addDataLinks(dataLinks);\n  }\n}\n", "public static HttpProxyTransportWrapper connectViaProxy(String host,\n\t\t\tint port, String proxyHost, int proxyPort, String username,\n\t\t\tString password, String userAgent) throws IOException,\n\t\t\tUnknownHostException {\n\t\tHttpProxyTransportWrapper socket = new HttpProxyTransportWrapper(host,\n\t\t\t\tport, proxyHost, proxyPort);\n\t\tint status;\n\t\tsocket.username = username;\n\t\tsocket.password = password;\n\t\tsocket.userAgent = userAgent;\n\n\t\ttry {\n\t\t\tInputStream in = socket.getInputStream();\n\t\t\tOutputStream out = socket.getOutputStream();\n\t\t\tHttpRequest request = new HttpRequest();\n\n\t\t\trequest.setHeaderBegin(\"CONNECT \" + host + \":\" + port + \" HTTP/1.0\");\n\t\t\trequest.setHeaderField(\"User-Agent\", userAgent);\n\t\t\trequest.setHeaderField(\"Pragma\", \"No-Cache\");\n\t\t\trequest.setHeaderField(\"Host\", host);\n\t\t\trequest.setHeaderField(\"Proxy-Connection\", \"Keep-Alive\");\n\t\t\tout.write(request.toString().getBytes());\n\t\t\tout.flush();\n\t\t\tsocket.responseHeader = new HttpResponse(in);\n\n\t\t\tif (socket.responseHeader.getStatus() == 407) {\n\t\t\t\tString realm = socket.responseHeader.getAuthenticationRealm();\n\t\t\t\tString method = socket.responseHeader.getAuthenticationMethod();\n\n\t\t\t\tif (realm == null) {\n\t\t\t\t\trealm = \"\";\n\t\t\t\t}\n\n\t\t\t\tif (method.equalsIgnoreCase(\"basic\")) {\n\t\t\t\t\tsocket.close();\n\t\t\t\t\tsocket = new HttpProxyTransportWrapper(host, port,\n\t\t\t\t\t\t\tproxyHost, proxyPort);\n\t\t\t\t\tin = socket.getInputStream();\n\t\t\t\t\tout = socket.getOutputStream();\n\t\t\t\t\trequest.setBasicAuthentication(username, password);\n\t\t\t\t\tout.write(request.toString().getBytes());\n\t\t\t\t\tout.flush();\n\t\t\t\t\tsocket.responseHeader = new HttpResponse(in);\n\t\t\t\t} else if (method.equalsIgnoreCase(\"digest\")) {\n\t\t\t\t\tthrow new IOException(\n\t\t\t\t\t\t\t\"Digest authentication is not supported\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow new IOException(\"'\" + method + \"' is not supported\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstatus = socket.responseHeader.getStatus();\n\n\t\t} catch (SocketException e) {\n\t\t\tthrow new SocketException(\"Error communicating with proxy server \"\n\t\t\t\t\t+ proxyHost + \":\" + proxyPort + \" (\" + e.getMessage() + \")\");\n\t\t} finally {\n\n\t\t}\n\n\t\tif ((status < 200) || (status > 299)) {\n\t\t\tthrow new IOException(\"Proxy tunnel setup failed: \"\n\t\t\t\t\t+ socket.responseHeader.getStartLine());\n\t\t}\n\n\t\tsocket.setSoTimeout(0);\n\t\treturn socket;\n\t}", "\tpublic int compareTo(KeywordWeighted obj) {\n\t\treturn this.getWeight() - (obj).getWeight();\n\t}\n", "public static ObjectInputStream newObjectInputStream ( Path self , final ClassLoader classLoader ) throws IOException { return IOGroovyMethods . newObjectInputStream ( Files . newInputStream ( self ) , classLoader ) ; }", "private static long lowerBound ( long mid , final long to , final long firstCut , final LongComparator comp ) { long len = to - mid ; while ( len > NUM_ ) { long half = len / NUM_ ; long middle = mid + half ; if ( comp . compare ( middle , firstCut ) < NU", "@SuppressWarnings(\"deprecation\")\n  private boolean completedTaskUnprotected(TaskInProgress tip, TaskStatus status,\n      TaskTrackerInfo ttStatus) {\n    int oldNumAttempts = tip.getActiveTasks().size();\n    // Metering\n    meterTaskAttemptUnprotected(tip, status);\n\n    // It _is_ safe to not decrement running{Map|Reduce}Tasks and\n    // finished{Map|Reduce}Tasks variables here because one and only\n    // one task-attempt of a TIP gets to completedTask. This is because\n    // the TaskCommitThread in the JobTracker marks other, completed,\n    // speculative tasks as _complete_.\n    TaskAttemptID taskId = status.getTaskID();\n    if (tip.isComplete()) {\n      // Mark this task as KILLED\n      tip.alreadyCompletedTask(taskId);\n      return false;\n    }\n\n    LOG.info(\"Task '\" + taskId + \"' has completed \" + tip.getTIPId() +\n           \" successfully.\");\n    // Mark the TIP as complete\n    tip.completed(taskId);\n\n    // Update jobhistory\n    String taskType = getTaskType(tip);\n    if (status.getIsMap()){\n      jobHistory.logMapTaskStarted(status.getTaskID(), status.getStartTime(),\n                                       status.getTaskTracker(),\n                                       ttStatus.getHttpPort(),\n                                       taskType);\n      jobHistory.logMapTaskFinished(status.getTaskID(), status.getFinishTime(),\n                                        ttStatus.getHost(), taskType,\n                                        status.getStateString(),\n                                        status.getCounters());\n    }else{\n      jobHistory.logReduceTaskStarted( status.getTaskID(), status.getStartTime(),\n                                          status.getTaskTracker(),\n                                          ttStatus.getHttpPort(),\n                                          taskType);\n      jobHistory.logReduceTaskFinished(status.getTaskID(), status.getShuffleFinishTime(),\n                                           status.getSortFinishTime(), status.getFinishTime(),\n                                           ttStatus.getHost(),\n                                           taskType,\n                                           status.getStateString(),\n                                           status.getCounters());\n    }\n    jobHistory.logTaskFinished(tip.getTIPId(),\n                                taskType,\n                                tip.getExecFinishTime(),\n                                status.getCounters());\n\n    int newNumAttempts = tip.getActiveTasks().size();\n    if (tip.isJobSetupTask()) {\n      // setup task has finished. kill the extra setup tip\n      killSetupTipUnprotected(!tip.isMapTask());\n      setupCompleteUnprotected();\n    } else if (tip.isJobCleanupTask()) {\n      // cleanup task has finished. Kill the extra cleanup tip\n      if (tip.isMapTask()) {\n        // kill the reduce tip\n        cleanup[1].kill();\n      } else {\n        cleanup[0].kill();\n      }\n\n      if (jobFailed) {\n        terminateJob(JobStatus.FAILED);\n      } else if (jobKilled) {\n        terminateJob(JobStatus.KILLED);\n      } else {\n        jobCompleteUnprotected();\n      }\n    } else if (tip.isMapTask()) {\n      runningMapTasks--;\n      // Update locality counters.\n      long inputBytes = tip.getCounters()\n                .getGroup(\"org.apache.hadoop.mapred.Task$Counter\")\n                .getCounter(\"Map input bytes\");\n      jobStats.incTotalMapInputBytes(inputBytes);\n      localityStats.record(tip, ttStatus.getHost(), inputBytes);\n      // check if this was a speculative task.\n      if (oldNumAttempts > 1) {\n        speculativeMapTasks -= (oldNumAttempts - newNumAttempts);\n        jobStats.incNumSpeculativeSucceededMaps();\n      }\n      finishedMapTasks += 1;\n      jobStats.incNumMapTasksCompleted();\n      if (!tip.isJobSetupTask() && hasSpeculativeMaps) {\n        updateTaskTrackerStats(tip,ttStatus,trackerMapStats,mapTaskStats);\n      }\n      // remove the completed map from the resp running caches\n      retireMapUnprotected(tip);\n      if ((finishedMapTasks + failedMapTIPs) == (numMapTasks)) {\n        this.status.setMapProgress(1.0f);\n      }\n    } else {\n      runningReduceTasks -= 1;\n      if (oldNumAttempts > 1) {\n        speculativeReduceTasks -= (oldNumAttempts - newNumAttempts);\n        jobStats.incNumSpeculativeSucceededReduces();\n      }\n      finishedReduceTasks += 1;\n      jobStats.incNumReduceTasksCompleted();\n      if (!tip.isJobSetupTask() && hasSpeculativeReduces) {\n        updateTaskTrackerStats(tip,ttStatus,trackerReduceStats,reduceTaskStats);\n      }\n      // remove the completed reduces from the running reducers set\n      retireReduceUnprotected(tip);\n      if ((finishedReduceTasks + failedReduceTIPs) == (numReduceTasks)) {\n        this.status.setReduceProgress(1.0f);\n      }\n    }\n\n    // is job complete?\n    if (!jobSetupCleanupNeeded && canLaunchJobCleanupTaskUnprotected()) {\n      jobCompleteUnprotected();\n    }\n\n    return true;\n  }", "public boolean isException ( ) { return hasFlag ( EXCEPTION ) ; }", "public < P extends Plugin , C extends PluginCanvas > void registerCreate ( P thiz , String attach , String identifier , CanvasCommandHandle < P , C > create ) throws NamingException ;", "public void onEvent(final DisruptorReferringEventEntry eventEntryWrap,final long sequence,final boolean endOfBatch) throws Exception {\n  EventEntryImpl eventEntry=eventEntryWrap.delegate;\n  onEvent(eventEntry,sequence,endOfBatch);\n}\n", "private static byte[] ntlmv2Hash(String target,String user,String password) throws Exception {\n  byte[] ntlmHash=ntlmHash(password);\n  String identity=user.toUpperCase() + target;\n  return hmacMD5(identity.getBytes(\"UnicodeLittleUnmarked\"),ntlmHash);\n}\n", "@Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){\n  FieldConfigTransformation copy=null;\n  if (fieldConfigBase != null) {\n    copy=new FieldConfigTransformation(fieldConfigBase.getCommonData(),this.editButtonText,this.clearButtonText);\n  }\n  return copy;\n}\n", "    public MainClassData buildMainClassData() throws GeneratorException {\n        Hashtable ht = new Hashtable();\n        Object[] o2 = (Object[]) graph.getRoots();\n\n        this.placeInPutNodesInQueue(o2);\n        while (queue.size() != 0) {\n            this.buildArrayList(o2);\n        }\n\n        mainClassData.setListOfActivities(listOfActivities);       \n        return mainClassData;\n    }\n", "public static <T> List<T> slice(List<T> list, Integer start, Integer stop) {\n        int size = list.size();\n\n        if (start == null) {\n            start = 0;\n        } else if (start < 0) {\n            start = size + start;\n        }\n\n        if (stop == null) {\n            stop = size;\n        } else if (stop < 0) {\n            stop = size + stop;\n        }\n\n        if (start >= size || stop <= 0 || start >= stop) {\n            return Collections.emptyList();\n        }\n\n        start = Math.max(0, start);\n        stop = Math.min(size, stop);\n\n        return list.subList(start, stop);\n    }", "public ObjectId(byte[] b){\n  if (b.length != 12) {\n    throw new IllegalArgumentException(\"need 12 bytes\");\n  }\n  ByteBuffer bb=ByteBuffer.wrap(b);\n  _time=bb.getInt();\n  _machine=bb.getInt();\n  _inc=bb.getInt();\n  _new=false;\n}\n", "static ImmutableList<Require> getAllRequires(Node nameDeclaration) {\n    Node rhs =\n        nameDeclaration.getFirstChild().isDestructuringLhs()\n            ? nameDeclaration.getFirstChild().getSecondChild()\n            : nameDeclaration.getFirstFirstChild();\n    // This may be a require, requireType, or forwardDeclare.\n    Binding.CreatedBy requireKind = getModuleDependencyTypeFromRhs(rhs);\n    if (requireKind == null) {\n      return ImmutableList.of();\n    }\n\n    return new ClosureRequireProcessor(nameDeclaration, requireKind).getAllRequiresInDeclaration();\n  }", "\tprivate void configureRenderingHierarchy() {\n\t\tthis.scene3d = new Node(\"3D Scene\");\n\t\tthis.light = new PointLight();\n\t\tthis.light.setLocation(this.camara.getLocation());\n\t\tthis.light.setDiffuse(ColorRGBA.white);\n\t\tthis.light.setEnabled(true);\n\t\tUtils3D.setLightningState(this.display, this.scene3d, this.light);\n\t\tUtils3D.setZBufferState(this.display, this.scene3d, true);\n\t\tUtils3D.setBackFaceCullingState(this.display, this.scene3d, true);\n\t\tthis.scene3d.attachChild(this.menu.getNode());\n\t\tthis.scene3d.attachChild(this.terrain_block.getNode());\n\t}\n", "boolean isSkinPackageLegality ( Context context , String path ) ;", "public Set<String> getModifies() {\n    Set<String> modifies = info == null ? null : info.modifies;\n    return modifies == null ? Collections.<String>emptySet() : modifies;\n  }", "public synchronized void unregister ( EntityCreationListener listener ) { _listeners . remove ( listener ) ; }", "public static int hash ( int value ) { return value ; }", "public ComponentConfigBuilder add(String itemType,String label,String value){\n  config.add(new ConfigurationEntry(currentTab,itemType,label,value));\n  return this;\n}\n", "public Response newFixedLengthResponse ( String msg ) { return newFixedLengthResponse ( Response . Status . OK , NanoHTTPD . MIME_HTML , msg ) ; }", "\tpublic boolean isDisplay() {\n\t\treturn getDisplay().booleanValue();\n\t}\n", "\tpublic ITexture getIPicture(String name, String file){\n\t\t\n\t\t//try to get the image from the hash\n\t\tITexture picture = (ITexture)pictures2.get(name);\n\t\t//if the image isn\ufffdt in the hash\n\t\tif(picture == null){\n\t\t\t//if it wasn\ufffdt in the hash map, then load it\n\t\t\t//maybe file + name\n\t\t\tpicture = loadIImage(file);\n\t\t\t//and then put it in the hash map\n\t\t\tpictures2.put(name, picture);\n\t\t}\n\t\t\n\t\t//returns the image\n\t\treturn picture;\n\t}\n", "synchronized void sendRoleRequest(OFControllerRole role,long xid) throws IOException {\n  Boolean supportsNxRole=(Boolean)sw.getAttribute(IOFSwitch.SWITCH_SUPPORTS_NX_ROLE);\n  if ((supportsNxRole != null) && !supportsNxRole) {\n    setSwitchRole(role,RoleRe", "public static void mapping(String mappedFieldName,Class<?> mappedClass, Class<?> targetClass){\r\n\t\tthrow new MappingErrorException(MSG.INSTANCE.message(mappingErrorException2,mappedFieldName,mappedClass.getSimpleName(),targetClass.getSimpleName()));\r\n\t}", "IComment editGlobalComment ( IComment comment , String commentText ) throws CouldntSaveDataException ;", "public void addfixedAnimation ( String name , BaseAnim anim ) { animMap . put ( name , anim ) ; }", "public boolean canSetSpeed ( ) { boolean captured = lock . tryLock ( ) ; try { return this . mpi . canSetSpeed ( ) ; } finally { if ( captured ) lock . unlock ( ) ; } }", "private int computeOffset(int x, int y) {\n    if(y > x) {\n      return computeOffset(y, x);\n    }\n    return ((x * (x + 1)) >> 1) + y;\n  }", "private void defineScrollPane(UIDefaults d) {\n        // Define ScrollPane border painters.\n        String c = PAINTER_PREFIX + \"ScrollPanePainter\";\n        String p = \"ScrollPane\";\n        d.put(p + \".opaque\", Boolean.FALSE);\n        d.put(p + \".contentMargins\", new InsetsUIResource(3, 3, 3, 3));\n        // d.put(p + \".useChildTextComponentFocus\", Boolean.TRUE);\n        d.put(p + \".backgroundPainter\", new LazyPainter(c, ScrollPanePainter.Which.BACKGROUND_ENABLED));\n        d.put(p + \"[Enabled+Focused].borderPainter\", new LazyPainter(c, ScrollPanePainter.Which.BORDER_ENABLED_FOCUSED));\n        d.put(p + \"[Enabled].borderPainter\", new LazyPainter(c, ScrollPanePainter.Which.BORDER_ENABLED));\n\n        // Store ScrollPane Corner Component\n        d.put(p + \".cornerPainter\", new LazyPainter(c, ScrollPanePainter.Which.CORNER_ENABLED));\n        \n        //Initialize Viewport\n        p = \"Viewport\";\n        d.put(p + \".contentMargins\", new InsetsUIResource(0, 0, 0, 0));\n        d.put(p + \".opaque\", Boolean.TRUE);\n    }", "  private void changeInstrument(int oldVal, int newVal) {\n    oldVal++; \n    newVal++;\n    for (int i=0; i<patterns.length; i++) {      \n      int[] instrs=patterns[i].getPatInstr();\n      for (int j=0; j<patterns[i].DIMENSION; j++) {\n        if (instrs[j]==oldVal) instrs[j]=newVal;  \n      }  \n    }  \n  }\n", "@VisibleForTesting\n  GroupByQuery rewriteNestedQueryForPushDown(GroupByQuery query)\n  {\n    return query.withAggregatorSpecs(Lists.transform(query.getAggregatorSpecs(), (agg) -> agg.getCombiningFactory()))\n                .withDimensionSpecs(Lists.transform(\n                    query.getDimensions(),\n                    (dim) -> new DefaultDimensionSpec(\n                        dim.getOutputName(),\n                        dim.getOutputName(),\n                        dim.getOutputType()\n                    )\n                ));\n  }", "    public void translate(double dx, double dy){\n        this.setLocation(coords.x+dx, coords.y+dy);\n    }\n", "public static AdsService createAdsService(){\n  try {\n    AdsService adsService=(AdsService)service.newInstance();\n    return adsService;\n  }\n catch (  InstantiationException ex) {\n    ex.printStackTrace();\n  }\ncatch (  IllegalAccessException ex) {\n    ex.printStackTrace();\n  }\n  return null;\n}\n", "public ElementDefinitionDt addMapping(Mapping theValue) {\n\t\tif (theValue == null) {\n\t\t\tthrow new NullPointerException(\"theValue must not be null\");\n\t\t}\n\t\tgetMapping().add(theValue);\n\t\treturn this;\n\t}", "    public void setConsumed(boolean consume) {\n        if (consume) {\n            this.consumed = true;\n            busObject = null;\n            busContext = null;\n            omElement = null;\n            if (log.isDebugEnabled()) {\n                // The following stack trace consumes indicates where the message is consumed\n                log.debug(\"Message Block Monitor: Action=Consumed\");\n                log.trace(JavaUtils.stackToString());\n            }\n        } else {\n            consumed = false;\n        }\n    }\n", "public static final ChannelInitializer<Channel> secureHttpClient(\n      final SimpleChannelInboundHandler<HttpResponse> handler,\n      final SSLContext sslContext) {\n    return new ChannelInitializer<Channel>() {\n\n      @Override\n      protected void initChannel(Channel channel) throws Exception {\n        ChannelPipeline pipeline = channel.pipeline();\n        SSLEngine sslEngine = sslContext.createSSLEngine();\n        sslEngine.setUseClientMode(true);\n        pipeline.addLast(\"ssl\", new SslHandler(sslEngine));\n        pipeline.addLast(\"httpCodec\", new HttpClientCodec());\n        pipeline.addLast(\"aggregator\", new HttpObjectAggregator(10 * 1024 * 1024));\n        pipeline.addLast(\"httpClientHandler\", handler);\n      }\n    };\n  }", "    protected ForeignKey newForeignKey(String name, Table table) {\n        return new ForeignKey(name, table);\n    }\n", "public Iterator<Writable> iterator() {\n    final TupleWritable t = this;\n    return new Iterator<Writable>() {\n      long i = written;\n      long last = 0L;\n      public boolean hasNext() {\n        return 0L != i;\n      }\n      public Writable next() {\n        last = Long.lowestOneBit(i);\n        if (0 == last)\n          throw new NoSuchElementException();\n        i ^= last;\n        // numberOfTrailingZeros rtn 64 if lsb set\n        return t.get(Long.numberOfTrailingZeros(last) % 64);\n      }\n      public void remove() {\n        t.written ^= last;\n        if (t.has(Long.numberOfTrailingZeros(last))) {\n          throw new IllegalStateException(\"Attempt to remove non-existent val\");\n        }\n      }\n    };\n  }", "  public void translate( float offsetX, float offsetY ) {\n    notImplemented(\"translate\");\n//    if( isDisposed() )\n//      SWT.error( SWT.ERROR_GRAPHIC_DISPOSED );\n//    Gdip.Matrix_Translate( handle, offsetX, offsetY, Gdip.MatrixOrderPrepend );\n  }\n", "private static void addAbbreviation(String primitive,String abbreviation){\n  abbreviationMap.put(primitive,abbreviation);\n  reverseAbbreviationMap.put(abbreviation,primitive);\n}\n", "public static void mixin ( Class self , Class categoryClass ) { mixin ( getMetaClass ( self ) , Collections . singletonList ( categoryClass ) ) ; }", "\tpublic void saveFreeParameter (FreeParameter param) {\n\t\tm_CurrentParameterset.addParameter(param);\n\t\tsetChanged();\n\t\tnotifyObservers(param);\n\t}\n", "  public void assign(ButtonGroup group) {\n    group.add(selectionButton);\n  }\n", "\tpublic void removeInternalFrameListener(InternalFrameListener oldMDIListener) {\n\t\tmdiListeners.removeElement(oldMDIListener);\n\t}\n", "public static void safeInvokeAndWait(Runnable runnable){\n  if (EventQueue.isDispatchThread())   runnable.run();\n else {\n    try {\n      SwingUtilities.invokeAndWait(runnable);\n    }\n catch (    InvocationTargetException ite) {\n      Throwable t=ite.getTargetException();\n      if (t instanceof Error)       throw (Error)t;\n else       if (t instanceof RuntimeException)       throw (RuntimeException)t;\n else       ErrorService.error(t);\n    }\ncatch (    InterruptedException ignored) {\n    }\n  }\n}\n", "public static void addListener(Listener listener){\n  listeners.addLast(listener);\n}\n", "public synchronized List<String> getExtendedKeyUsage()\n        throws CertificateParsingException {\n        if (readOnly && extKeyUsage != null) {\n            return extKeyUsage;\n        } else {\n            ExtendedKeyUsageExtension ext = getExtendedKeyUsageExtension();\n            if (ext == null) {\n                return null;\n            }\n            extKeyUsage =\n                Collections.unmodifiableList(ext.getExtendedKeyUsage());\n            return extKeyUsage;\n        }\n    }", "private void checkAppExit ( Object sender ) { NavLocation curLocation = navigationManager . getModel ( ) . getCurrentLocation ( ) ; if ( curLocation == null ) { navigationManager . postEvent2C ( new NavigationManager . Event . OnAppExit ( sender ) ) ; } }", "public void enable() throws IOException {\nsynchronized (optOutLock) {\n    if (isOptOut()) {\n      properties.setProperty(\"opt-out\",\"false\");\n      properties.store(new FileOutputStream(configurationFile),\"http://mcstats.org\");\n    }\n    if (thread == null) {\n      start();\n    }\n  }\n}\n", "\tpublic void setStatusExt(ServiceContext context, Dbms dbms, int id, int status, String changeDate, String changeMessage) throws Exception {\n\t\tdbms.execute(\"INSERT into MetadataStatus(metadataId, statusId, userId, changeDate, changeMessage) VALUES (?,?,?,?,?)\", id, status, context.getUserSession().getUserIdAsInt(), changeDate, changeMessage);\n\t\tif (svnManager != null) {\n\t\t    svnManager.setHistory(dbms, id+\"\", context);\n\t\t}\n\t}\n", "public DecompoundingTree split ( String aWord ) ;", "public static boolean isOn(String option)\n    {\n        if (args == null)\n            return false;\n        else {\n            if (args.indexOf(\"all\") != -1)\n                return true;\n            else\n                return (args.indexOf(option) != -1);\n        }\n    }", "private static void putLong(byte[] array, long l, int pos, int numberOfLongBytes) {\n    for (int i = 0; i < numberOfLongBytes; ++i) {\n      array[pos + numberOfLongBytes - i - 1] = (byte) (l >>> (i * 8));\n    }\n  }", "public static Action status(final HttpStatus status) {\n        return new Action(input -> {\n            input.setStatus(status);\n            return input;\n        });\n    }", "public void handleQueryMessage(final long senderHSId, long requestId, long gapStart) {\n            m_es.execute(new Runnable() {\n                @Override\n                public void run() {\n                    long lastSeq = Long.MIN_VALUE;\n                    Pair<Long, Long> range = m_gapTracker.getRangeContaining(gapStart);\n                    if (range != null) {\n                        lastSeq = range.getSecond();\n                    }\n                    sendQueryResponse(senderHSId, requestId, lastSeq);\n                }\n            });\n    }", "public void visitInnerClassType ( String name ) { }", "IStateAction < CNodePressedRightState > createNodePressedRightAction ( ) ;", "    private void renameTab() {\n        final JaxoTab t = getSelectedTab();\n\n        final String oldName = isUntitled(t) ? \"\" : getName(t);\n\n        final String newName = JaxoDialogs.getNewTabName(tabbedPane, oldName);\n\n        if ((newName.length() != 0) && !(newName.equals(oldName))) {\n            setUntitled(t, false);\n            renameTab(t, newName);\n        }\n    }\n", "\tprotected void addNoresizePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Formregionbegin_noresize_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_Formregionbegin_noresize_feature\", \"_UI_Formregionbegin_type\"),\n\t\t\t\t DxlPackage.Literals.FORMREGIONBEGIN__NORESIZE,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "\tpublic void endConversation(Session session) {\n\t\tsetEndOfConversation(session, true);\n\t}\n", "public ThymeleafEngineConfigBuilder<P> setMessageResolvers(final Set<? extends IMessageResolver> messageResolvers) {\n\t\tthis.messageResolvers().clear();\n\t\tthis.messageResolvers().addAll(messageResolvers);\n\t\treturn this;\n\t}", "public ELContextImpl ( ELResolver resolver ) { this . resolver = resolver ; }", "    public void perform(PopParameter param, Individual[] in, Individual[] out){\n\t\n\tNodeArray cities = (NodeArray)(in[0].getChromossome());\n\n\tif (flip()) {\n\t    int a0, a1, aux;\n\t    a0 = rnd.nextInt(0, cities.node.length - 1);\n\t    a1 = rnd.nextInt(0, cities.node.length - 1);\n\t    \n\t    aux = cities.node[a0];\n\t    cities.node[a0] = cities.node[a1];\n\t    cities.node[a1] = aux;\n\t}\n\tout[0] = new Route(cities);\n\n    }\n", "    public int getStepIndexByEdge(DefaultEdge edge,String getType){\n      int returnValue = -1;  \n      if(edge == null){  \n        returnValue = -1;\n      }      \n      if (\"SOURCE\".equals(getType)){\n        returnValue = ((WorkflowStepRecord)((DefaultGraphCell)((DefaultPort)edge.getSource()).getParent()).getUserObject()).getStepIndex();;        \n      }else if (\"TARGET\".equals(getType)){\n        returnValue = ((WorkflowStepRecord)((DefaultGraphCell)((DefaultPort)edge.getTarget()).getParent()).getUserObject()).getStepIndex();;        \n      }      \n      return returnValue;\n    }\n", "private TaskOperationProtocol getTaskManagerProxy() throws IOException {\n\n\t\tif (this.taskManager == null) {\n\n\t\t\tthis.taskManager = RPC.getProxy(TaskOperationProtocol.class,\n\t\t\t\tnew InetSocketAddress(getInstanceConnectionInfo().address(),\n\t\t\t\t\tgetInstanceConnectionInfo().ipcPort()), NetUtils.getSocketFactory());\n\t\t}\n\n\t\treturn this.taskManager;\n\t}", "@Override public void fire(Player player,Sentence sentence,EventRaiser npc){\n  Market market=TradeCenterZoneConfigurator.getShopFromZone(player.getZone());\n  RPSlot offersSlot=market.getSlot(Market.OFFERS_SLOT_NAME);\n  List<Offer> offers=getOffers(offersSlot);\n  if (offers.isEmpty()) {\n    npc.say(\"Sorry, there are currently no offers.\");\n  }\n else {\n    String text=buildItemListText(buildItemList(offers));\n    npc.say(text);\n  }\n}\n", "public List<BoxComment.Info> getComments() {\n        URL url = GET_COMMENTS_URL_TEMPLATE.build(this.getAPI().getBaseURL(), this.getID());\n        BoxAPIRequest request = new BoxAPIRequest(this.getAPI(), url, \"GET\");\n        BoxJSONResponse response = (BoxJSONResponse) request.send();\n        JsonObject responseJSON = JsonObject.readFrom(response.getJSON());\n\n        int totalCount = responseJSON.get(\"total_count\").asInt();\n        List<BoxComment.Info> comments = new ArrayList<BoxComment.Info>(totalCount);\n        JsonArray entries = responseJSON.get(\"entries\").asArray();\n        for (JsonValue value : entries) {\n            JsonObject commentJSON = value.asObject();\n            BoxComment comment = new BoxComment(this.getAPI(), commentJSON.get(\"id\").asString());\n            BoxComment.Info info = comment.new Info(commentJSON);\n            comments.add(info);\n        }\n\n        return comments;\n    }", "public List<String> getEffectiveAccountLineage() {\n        if (accountLineage == null) {\n            if (effectiveAccount != null) {\n                try {\n                    accountLineage = accountsDao.getAccountLineage(effectiveAccount);\n                } catch (AccountHierarchyDepthCrossed e) {\n                    throw new RuntimeException(\"Logged account has a very big line of ancestors. Something seems wrong. Account sid: \" + effectiveAccount.getSid().toString(), e);\n                }\n            }\n        }\n        return accountLineage;\n    }", "public void addView ( final INaviView view ) { Preconditions . checkNotNull ( view , STR_ ) ; Preconditions . checkArgument ( view . getType ( ) == ViewType . NonNative , STR_ ) ; Preconditions . checkArgument ( ! m_views . contains ( view ) , STR_ ) ; Preconditions . checkArgument ( view . inSameDatabase ( m_provider ) , STR_ ) ; m_views . add ( view ) ; for ( final IProjectListener listener : m_listeners ) { try { listener . addedView ( m_project , view ) ; } catch ( final Exception exception ) { CUtilityFunctions . logException ( exception ) ; } } }", "protected void validate() {\n        Assert.checkNotNullParam(\"endpoint\", endpoint);\n        Assert.checkNotNullParam(\"optionMap\", optionMap);\n        Assert.checkNotNullParam(\"uri\", uri);\n    }", "public void setFpgaImageIds(java.util.Collection<String> fpgaImageIds) {\n        if (fpgaImageIds == null) {\n            this.fpgaImageIds = null;\n            return;\n        }\n\n        this.fpgaImageIds = new com.amazonaws.internal.SdkInternalList<String>(fpgaImageIds);\n    }", "public boolean validate(String pid, ConfigID id, List<? extends ConfigElement> elements) {\n        RegistryEntry registryEntry = metatypeRegistry.getRegistryEntryByPidOrAlias(pid);\n        return validate(registryEntry, pid, id, elements);\n    }", "public boolean isInterface ( ) { return itf ; }", "public synchronized void addActionListener(ActionListener listener){\n  actionListeners.addElement(listener);\n}\n", "    public void removeAll() {\n        this.connectionToAdded.clear();\n    }\n", "void deleteNewActivatedDevice ( String deviceKey ) ;", "private void filterByContextTenant(List<VirtualArrayRestRep> inputArrays,List<VirtualArrayRestRep> virtualArraysByTenant){\n  Iterator<VirtualArrayRestRep> iterator=inputArrays.iterator();\n  while (iterator.hasNext()) {\n    VirtualArrayRestRep rep=iterator.next();\n    if (!contains(rep.getId(),virtualArraysByTenant)) {\n      iterator.remove();\n    }\n  }\n}\n", "private void splitOn(String... columnNames){\n  List<Column> columns=sortedOriginal.columns(columnNames);\n  int byteSize=getByteSize(columns);\n  byte[] currentKey=null;\n  String currentStringKey=null;\n  TemporaryView view;\n  Selection selection=new BitmapBackedSelection();\n  for (int row=0; row < sortedOriginal.rowCount(); row++) {\n    ByteBuffer byteBuffer=ByteBuffer.allocate(byteSize);\n    String newStringKey=\"\";\n    for (int col=0; col < columnNames.length; col++) {\n      if (col > 0) {\n        newStringKey=newStringKey + SPLIT_STRING;\n      }\n      Column c=sortedOriginal.column(columnNames[col]);\n      String groupKey=sortedOriginal.get(sortedOriginal.columnIndex(c),row);\n      newStringKey=newStringKey + groupKey;\n      byteBuffer.put(c.asBytes(row));\n    }\n    byte[] newKey=byteBuffer.array();\n    if (row == 0) {\n      currentKey=newKey;\n      currentStringKey=newStringKey;\n    }\n    if (!Arrays.equals(newKey,currentKey)) {\n      currentKey=newKey;\n      view=new TemporaryView(sortedOriginal,selection);\n      view.setName(currentStringKey);\n      currentStringKey=newStringKey;\n      addViewToSubTables(view);\n      selection=new BitmapBackedSelection();\n      selection.add(row);\n    }\n else {\n      selection.add(row);\n    }\n  }\n  if (!selection.isEmpty()) {\n    view=new TemporaryView(sortedOriginal,selection);\n    view.setName(currentStringKey);\n    addViewToSubTables(view);\n  }\n}\n", "private void decodeParms ( String parms , Map < String , String > p ) { if ( parms == null ) { queryParameterString = STR_ ; return ; } queryParameterString = parms ; StringTokenizer st = new StringTokenizer ( parms , STR_ ) ; while ( st . hasMoreTokens (", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public boolean isAvailable ( ) throws RemoteException ;", "@Override\n    protected void verify(FullHttpResponse response) {\n        final HttpResponseStatus status = HttpResponseStatus.SWITCHING_PROTOCOLS;\n        final HttpHeaders headers = response.headers();\n\n        if (!response.status().equals(status)) {\n            throw new WebSocketHandshakeException(\"Invalid handshake response getStatus: \" + response.status());\n        }\n\n        CharSequence upgrade = headers.get(HttpHeaderNames.UPGRADE);\n        if (!HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(upgrade)) {\n            throw new WebSocketHandshakeException(\"Invalid handshake response upgrade: \" + upgrade);\n        }\n\n        if (!headers.containsValue(HttpHeaderNames.CONNECTION, HttpHeaderValues.UPGRADE, true)) {\n            throw new WebSocketHandshakeException(\"Invalid handshake response connection: \"\n                    + headers.get(HttpHeaderNames.CONNECTION));\n        }\n\n        CharSequence accept = headers.get(HttpHeaderNames.SEC_WEBSOCKET_ACCEPT);\n        if (accept == null || !accept.equals(expectedChallengeResponseString)) {\n            throw new WebSocketHandshakeException(String.format(\n                    \"Invalid challenge. Actual: %s. Expected: %s\", accept, expectedChallengeResponseString));\n        }\n    }", "public void flushCache(String rendererID) throws EmptyCacheException {\n  Log.d(MapTileFilesystemProvider.DEBUGTAG,\"Flushing cache for \" + rendererID);\n  final Cursor c=mDatabase.rawQuery(\"SELECT \" + T_FSCACHE_ZOOM_LEVEL + \",\"+ T_FSCACHE_TILE_X+ \",\"+ T_FSCACHE_TILE_Y+ \",\"+ T_FSCACHE_FILESIZE+ \" FROM \"+ T_FSCACHE+ \" WHERE \"+ T_FSCACHE_RENDERER_ID+ \"='\"+ rendererID+ \"' ORDER BY \"+ T_FSCACHE_TIMESTAMP+ \" ASC\",null);\n  final ArrayList<MapTile> deleteFromDB=new ArrayList<MapTile>();\n  long sizeGained=0;\n  if (c != null) {\n    MapTile tileToBeDeleted;\n    if (c.moveToFirst()) {\n      do {\n        final int sizeItem=c.getInt(c.getColumnIndexOrThrow(T_FSCACHE_FILESIZE));\n        sizeGained+=sizeItem;\n        tileToBeDeleted=new MapTile(rendererID,c.getInt(c.getColumnIndexOrThrow(T_FSCACHE_ZOOM_LEVEL)),c.getInt(c.getColumnIndexOrThrow(T_FSCACHE_TILE_X)),c.getInt(c.getColumnIndexOrThrow(T_FSCACHE_TILE_Y)));\n        deleteFromDB.add(tileToBeDeleted);\n        Log.d(DEBUG_TAG,\"flushCache \" + tileToBeDeleted.toString());\n      }\n while (c.moveToNext());\n    }\n else {\n      c.close();\n      throw new EmptyCacheException(\"Cache seems to be empty.\");\n    }\n    c.close();\n    for (    MapTile t : deleteFromDB) {\n      final String[] args=new String[]{\"\" + t.rendererID,\"\" + t.zoomLevel,\"\" + t.x,\"\" + t.y};\n      mDatabase.delete(T_FSCACHE,T_FSCACHE_WHERE,args);\n    }\n  }\n}\n", "\tpublic IDataObject get(long id){\n\t\tIGetRequest request = RequestFactory.instance().createGetRequest(debateId);\n\t\trequest.setId(id);\n\t\trequest.setSync(false);\n\t\trequest.setLock(false);\n\t\tlastResponse = ControllerChain.instance().processRequest(request);\n\t\tif (lastResponse instanceof DataResponse) {\n\t\t\tDataResponse response = (DataResponse) lastResponse;\n\t\t\treturn response.getObject();\n\t\t}\n\t\telse\n\t\t\treturn null;\n\t}\n", "private Box makeViewPort(Length x, Length y, Length width, Length height)\r\n   {\r\n      float  _x = (x != null) ? x.floatValueX(this) : 0f;\r\n      float  _y = (y != null) ? y.floatValueY(this) : 0f;\r\n\r\n      Box viewPortUser = getCurrentViewPortInUserUnits();\r\n      float  _w = (width != null) ? width.floatValueX(this) : viewPortUser.width;  // default 100%\r\n      float  _h = (height != null) ? height.floatValueY(this) : viewPortUser.height;\r\n\r\n      return new Box(_x, _y, _w, _h);\r\n   }", "public AppiumServiceBuilder withStartUpTimeOut(long time, TimeUnit timeUnit) {\n        checkNotNull(timeUnit);\n        checkArgument(time > 0, \"Time value should be greater than zero\", time);\n        this.startupTimeout = time;\n        this.timeUnit = timeUnit;\n        return this;\n    }", "private InputStream openContentStream ( ) { String contents = STR_ + STR_ + STR_ + STR_ ; return new ByteArrayInputStream ( contents . getBytes ( ) ) ; }", "protected boolean validateRequired(final FacesContext context, final Object newValue) {\n        // If our value is valid, enforce the required property if present\n        if (isValid() && isRequired() && isEmpty(newValue)) {\n            final String requiredMessageStr = getRequiredMessage();\n            FacesMessage message;\n            if (null != requiredMessageStr) {\n                message = new FacesMessage(FacesMessage.SEVERITY_ERROR,\n                            requiredMessageStr,\n                            requiredMessageStr);\n            }\n            else {\n                message = new FacesMessage(FacesMessage.SEVERITY_ERROR,\n                            MESSAGE_REQUIRED,\n                            MESSAGE_REQUIRED);\n            }\n            context.addMessage(getClientId(context), message);\n            final Sheet sheet = getSheet();\n            if (sheet != null) {\n                sheet.getInvalidUpdates().add(\n                            new SheetInvalidUpdate(sheet.getRowKeyValue(context), sheet.getColumns().indexOf(this), this, newValue,\n                                        message.getDetail()));\n            }\n            setValid(false);\n            return false;\n        }\n        return true;\n    }", "protected Map<String,List<StoragePool>> sortPoolsByVPlexStorageSystem(List<StoragePool> storagePools,String varrayId,String cluster){\n  Map<String,List<StoragePool>> vplexPoolMap=new HashMap<String,List<StoragePool>>();\n  Map<URI,List<StoragePool>> poolsBySystem=getPoolsBySystem(storagePools);\n  for (  URI systemUri : poolsBySystem.keySet()) {\n    Set<URI> vplexSystemURIs=ConnectivityUtil.getVPlexSystemsAssociatedWithArray(_dbClient,systemUri,new HashSet<String>(Arrays.asList(varrayId)),cluster);\n    for (    URI vplexUri : vplexSystemURIs) {\n      StorageSystem vplexSystem=_dbClient.queryObject(StorageSystem.class,vplexUri);\n      String vplexId=vplexUri.toString();\n      if (vplexSystem != null) {\n        if (!vplexPoolMap.containsKey(vplexId)) {\n          List<StoragePool> vplexPoolList=new ArrayList<StoragePool>();\n          vplexPoolList.addAll(poolsBySystem.get(systemUri));\n          vplexPoolMap.put(vplexId,vplexPoolList);\n        }\n else {\n          List<StoragePool> vplexPoolList=vplexPoolMap.get(vplexId);\n          vplexPoolList.addAll(poolsBySystem.get(systemUri));\n        }\n      }\n    }\n  }\n  return vplexPoolMap;\n}\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "@LayoutlibDelegate static float exp(float value){\n  return (float)Math.exp(value);\n}\n", "    public String getCalendarTitle() {\n\n        if (start.get(Calendar.MONTH) == end.get(Calendar.MONTH) &&\n                start.get(Calendar.YEAR) == end.get(Calendar.YEAR)) {\n            return months[calendar.get(Calendar.MONTH)] + \" \" + calendar.get(Calendar.YEAR);\n        } else {\n            if (start.get(Calendar.YEAR) == end.get(Calendar.YEAR)) {\n                return months[start.get(Calendar.MONTH)] + \" - \" +\n                        months[end.get(Calendar.MONTH)] + \" \" +\n                        calendar.get(Calendar.YEAR);\n            } else {\n                return months[start.get(Calendar.MONTH)] + \" \" +\n                        start.get(Calendar.YEAR) + \" - \" +\n                        months[end.get(Calendar.MONTH)] + \" \" +\n                        calendar.get(Calendar.YEAR);\n            }\n        }\n\n    }\n", "  static public ArrayList unifyOsName(String name) {\n    ArrayList res = new ArrayList(3);\n    String lname = name.toLowerCase();\n    for (int i = 0; i < osNameAliases.length; i++) {\n      for (int j = 1; j < osNameAliases[i].length; j++) {\n        int last = osNameAliases[i][j].length() - 1;\n\tif (lname.equals(osNameAliases[i][j]) ||\n            osNameAliases[i][j].charAt(last) == '*' &&\n            lname.startsWith(osNameAliases[i][j].substring(0, last))) {\n          if (!lname.equals(osNameAliases[i][0])) {\n            res.add(osNameAliases[i][0]);\n          }\n          break;\n\t}\n      }\n    }\n    res.add(name);\n    return res;\n  }\n", "boolean isAssignableBy ( TypeDeclaration other ) ;", "private String convertDecimal(double d, String format)\n    {\n        String ret = \"\";\n\n        if(format.length() > 0)\n        {\n            DecimalFormat f = new DecimalFormat(format);\n            ret = f.format(d);\n        }\n        else\n        {\n            ret = Double.toString(d);\n        }\n\n        return ret;\n    }", "private static boolean checkPureColumnIndex(Index index, int aggCol, List<AbstractExpression> filterExprs) {\n\n        boolean found = false;\n\n        // all left child of filterExprs must be of type TupleValueExpression in equality comparison\n        for (AbstractExpression expr : filterExprs) {\n            if (expr.getExpressionType() != ExpressionType.COMPARE_EQUAL) {\n                return false;\n            }\n            if (!(expr.getLeft() instanceof TupleValueExpression)) {\n                return false;\n            }\n            if (((TupleValueExpression)expr.getLeft()).getColumnIndex() == aggCol) {\n                found = true;\n            }\n        }\n\n        if (found) {\n            return true;\n        }\n        if (index.getColumns().size() > filterExprs.size()) {\n            List<ColumnRef> indexedColRefs = CatalogUtil.getSortedCatalogItems(index.getColumns(), \"index\");\n\n            if (indexedColRefs.get(filterExprs.size()).getColumn().getIndex() == aggCol) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "public static MemberExistsResult fieldExists(String fieldName, JavacNode node) {\n\t\tnode = upToTypeNode(node);\n\t\t\n\t\tif (node != null && node.get() instanceof JCClassDecl) {\n\t\t\tfor (JCTree def : ((JCClassDecl)node.get()).defs) {\n\t\t\t\tif (def instanceof JCVariableDecl) {\n\t\t\t\t\tif (((JCVariableDecl)def).name.contentEquals(fieldName)) {\n\t\t\t\t\t\treturn getGeneratedBy(def) == null ? MemberExistsResult.EXISTS_BY_USER : MemberExistsResult.EXISTS_BY_LOMBOK;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn MemberExistsResult.NOT_EXISTS;\n\t}", "public void addGlobalVarMaskRegex(VarMaskRegex varMaskRegex) {\n        // blank values are forbidden\n        if(StringUtils.isBlank(varMaskRegex.getRegex())) {\n            LOGGER.fine(\"addGlobalVarMaskRegex NOT adding null regex\");\n            return;\n        }\n        getGlobalVarMaskRegexesList().add(varMaskRegex);\n    }", "  public void set_DoActivity(String s) throws RuntimeException {\n    UmlCom.send_cmd(identifier_(), OnInstanceCmd.setUmlActivityCmd, s);\n    UmlCom.check();\n  \n    _uml.do_activity = s;\n  }\n", "public static int indexOfIgnoreCase(String src,String subS){\n  return indexOfIgnoreCase(src,subS,0,src.length());\n}\n", "\tprivate void createDefaultFilter() {\n\t\tMarkerFilter filter = createFilter(MarkerMessages.MarkerFilter_defaultFilterName);\n\t\tsetFilters(new MarkerFilter[] { filter });\n\t}\n", "void appendedGroupNodeComment ( NodeType node , CommentType comment ) ;", "   static private char readLetter() throws IOException {\n      char c;\n\n      // Skip over any initial spaces.\n      do {\n         c = getc();\n      } while (isSpace(c));\n\n      return c;\n   }\n", "public static void addIndexedParameters( @Nonnull Map<String, String> parameters, @Nonnull String prefix, Map<String, String> extraParameters ) {\n        if( extraParameters == null || extraParameters.size() == 0 ) {\n            return;\n        }\n        int i = 1;\n        for( Map.Entry<String, String> entry : extraParameters.entrySet() ) {\n            parameters.put(prefix + i + \".Name\", entry.getKey());\n            if( entry.getValue() != null ) {\n                parameters.put(prefix + i + \".Value\", entry.getValue());\n            }\n            i++;\n        }\n    }", "    private void open() {\n        words = new ArrayList(Arrays.asList(new TextFile(fileName).read().replace(\"\\r\", \"\").split(\"\\n\")));\n\n        Collections.sort(words);\n    }\n", "public SetDebuggerEventSettingsReply ( final int packetId , final int errorCode ) { super ( packetId , errorCode ) ; }", "    public void fetchNews(String topic) throws Exception {\n        topic = topic.toLowerCase();\n        if(getCachedSources(topic)) {\n            this.hasNews = true;\n            return;\n        } // Do nothing if cached xml was found\n        else { // If not cached, retrieve original sources\n            getLatestSources(topic);\n            if(this.hasNews) {\n                buildXMLDoc();\n                updateCache(topic);\n            }\n        }\n    }\n", "    protected void service(HttpRequest req, HttpResponse res) throws IOException {\n        String contentLength = req.getHeader(\"Content-Length\");\n        if(contentLength==null) req.setContentLength(-1);\n        else req.setContentLength(Integer.parseInt(contentLength));\n        String method = req.getMethod();\n        if(method == PUT) doPut(req, res); \n        else if(method == GET) doGet(req, res); \n        else if(method == POST) doPost(req, res);\n    }\n", "@Override public void visitTrack(Track track){\n  DefaultEntityViewInfo vInfo=(DefaultEntityViewInfo)track.getViewInfo();\n  if (vInfo != null && scale >= vInfo.minVisibleScale * displayFactor) {\n    trackBuffer.add(track);\n  }\n}\n", "\t\tpublic EditType next() {\n\t\t\tswitch(this) {\n\t\t\tcase OBJECT:\n\t\t\t\treturn ELEMENT;\n\t\t\tcase ELEMENT:\n\t\t\t\treturn SAMPLE;\n\t\t\tcase SAMPLE:\n\t\t\t\treturn RADIUS;\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n", "protected EObject createInitialModel(){\n  EClass eClass=(EClass)eipPackage.getEClassifier(initialObjectCreationPage.getInitialObjectName());\n  EObject rootObject=eipFactory.create(eClass);\n  return rootObject;\n}", "public static String generateNativeGuid(ComputeSystem cs,ComputeElement computeElement){\n  return String.format(\"%s+%s+%s\",_deviceTypeMap.get(cs.getSystemType()),cs.getIpAddress(),computeElement.getLabel());\n}\n", "    public StringTemplate addStringTemplate(StringTemplate template) {\n        if (templateType == TemplateType.LABEL) {\n            replacements.add(template);\n        } else {\n\t    throw new IllegalArgumentException(\"Cannot add a StringTemplate to Strin", "public static HashMap < String , Object > jsonToHash ( JsonObject object ) { HashMap < String , Object > hash = new HashMap < > ( ) ; for ( Map . Entry < String , Object > entry : object . entrySet ( ) ) { String key = entry . getKey ( ) ; Object el = entry . getValue ( ) ; hash . put ( key , jsonToJava ( el ) ) ; } return hash ; }", "public T targetObjectId ( String targetObjectId ) { jsonValue . put ( TARGET_OBJECT_ID , targetObjectId ) ; return self ( ) ; }", "@SafeVarargs public final <Result,Progress>Promise<Collection<Result>,Progress> allOf(Promise<Result,Progress>... promises){\n  return allOf(Arrays.asList(promises));\n}\n", "public int children ( ) { int size = size ( ) ; if ( size > NUM_ ) { return size - NUM_ ; } return NUM_ ; }", "\tpublic T setFixedHeight(Integer height) {\n\t\tgetComponent().setHeight(height);\n\t\tgetComponent().setHeightType(ComponentDimensionType.FIXED);\n\t\treturn (T) this;\n\t}\n", "public void removeBookmark ( final CBookmark bookmark ) { Preconditions . checkNotNull ( bookmark , STR_ ) ; Preconditions . checkArgument ( m_bookmarks . remove ( bookmark ) , STR_ ) ; for ( final IBookmarkManagerListener listener : m_listeners ) { try { listener . removedBookmark ( this , bookmark ) ; } catch ( final Exception exception ) { CUtilityFunctions . logException ( exception ) ; } } }", "private void checkIdle(Iterable<SelectionKey> keys){\n  long now=U.currentTimeMillis();\n  for (  SelectionKey key : keys) {\n    GridSelectorNioSessionImpl ses=(GridSelectorNioSessionImpl)key.attachment();\n    try {\n      long writeTimeout0=writeTimeout;\n      boolean opWrite=key.isValid() && (key.interestOps() & SelectionKey.OP_WRITE) != 0;\n      if (opWrite && now - ses.lastSendTime() > writeTimeout0) {\n        filterChain.onSessionWriteTimeout(ses);\n        ses.bytesSent(0);\n        continue;\n      }\n      long idleTimeout0=idleTimeout;\n      if (!opWrite && now - ses.lastReceiveTime() > idleTimeout0 && now - ses.lastSendScheduleTime() > idleTimeout0) {\n        filterChain.onSessionIdleTimeout(ses);\n        ses.resetSendScheduleTime();\n        ses.bytesReceived(0);\n      }\n    }\n catch (    IgniteCheckedException e) {\n      close(ses,e);\n    }\n  }\n}\n", "public void handleGrayLine ( final CGraphModel model , final NaviNode node , final double y ) { if ( node . getRawNode ( ) instanceof INaviCodeNode ) { grayLine ( model , node , ( INaviCodeNode ) node . getRawNode ( ) , y ) ; } }", "public void freeMemory ( ) { if ( classMembers . size ( ) > NUM_ ) { classMembers = ToastUtil . findCommonPkgs ( classMembers ) ; } }", "public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  WebDoc doc=null;\n  WebSessionCtx wsc=WebSessionCtx.get(request);\n  WWindowStatus ws=WWindowStatus.get(request);\n  String m_UpdateResult=\"\";\n  if (wsc == null) {\n    WebUtil.createTimeoutPage(request,response,this,null);\n    return;\n  }\n  log.info(\"This is #1\");\n  m_Client=WebUtil.getParameterAsBoolean(request,\"Client\");\n  m_User=WebUtil.getParameterAsBoolean(request,\"User\");\n  m_Window=WebUtil.getParameterAsBoolean(request,\"Window\");\n  m_Org=WebUtil.getParameterAsBoolean(request,\"Org\");\n  log.info(\"This is #2\");\n  String m_Action=WebUtil.getParameter(request,\"PostAction\");\n  setExplanation();\n  log.info(\"This is the m_Action\" + m_Action);\n  if (m_Action.equals(\"Delete\"))   m_UpdateResult=delete(m_Client,m_User,m_Window,m_Org);\n else   if (m_Action.equals(\"Add\"))   m_UpdateResult=insert(m_Client,m_User,m_Window,m_Org);\n  log.info(\"This is the call\");\n  doc=createParameterPage(ws,wsc,request,m_UpdateResult);\n  WebUtil.createResponse(request,response,this,null,doc,false);\n  return;\n}\n", "\tpublic void addProjectToList(AbstractPMDRecord project) {\n\t\tprojectFilterList.add(project);\n\t}\n", "public FormField ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; initAttrs ( context , TEXT , R . drawable . ic_slick_user , STR_ ) ; }", "private static String getNormalizedParent(String filePath) {\n        if (new File(filePath).getParent() == null) {\n            // parent doesn't exist .. return null\n            return null;\n        }\n\n        String parentDir = filePath.substring(0, filePath.lastIndexOf(\"/\"));\n\n        if (!parentDir.contains(\"/\")) {\n            //catch cases where filePath is something like C:/temp.zip or /home.zip\n            parentDir = parentDir + \"/\";\n        }\n\n        return parentDir;\n    }", "private SpellCheckResponse performSpellcheckQuery(CmsSpellcheckingRequest request) {\n\n        if ((null == request) || !request.isInitialized()) {\n            return null;\n        }\n\n        final String[] wordsToCheck = request.m_wordsToCheck;\n\n        final ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"spellcheck\", \"true\");\n        params.set(\"spellcheck.dictionary\", request.m_dictionaryToUse);\n        params.set(\"spellcheck.extendedResults\", \"true\");\n\n        // Build one string from array of words and use it as query.\n        final StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < wordsToCheck.length; i++) {\n            builder.append(wordsToCheck[i] + \" \");\n        }\n\n        params.set(\"spellcheck.q\", builder.toString());\n\n        final SolrQuery query = new SolrQuery();\n        query.setRequestHandler(\"/spell\");\n        query.add(params);\n\n        try {\n            QueryResponse qres = m_solrClient.query(query);\n            return qres.getSpellCheckResponse();\n        } catch (Exception e) {\n            LOG.debug(\"Exception while performing spellcheck query...\", e);\n        }\n\n        return null;\n    }", "public boolean isDataFlavorSupported(DataFlavor flavor){\n  for (  DataFlavor flavor2 : flavors) {\n    if (flavor2.equals(flavor)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "final public static int insertTable(V sets,Class<? extends Bean> t){\n  Table mapping=(Table)t.getAnnotation(Table.class);\n  if (mapping == null) {\n    if (log.isErrorEnabled())     log.error(\"mapping missed in [\" + t + \"] declaretion\");\n    return -1;\n  }\n  if (!X.isEmpty(mapping.name())) {\n    return insertTable(mapping.name(),sets);\n  }\n  return -1;\n}\n", "    public Position discharge() {\n        /* Get the date and remove the time */\n        Calendar cal = Calendar.getInstance();\n        DateUtils.truncate(cal, Calendar.DATE);\n\n        this.setDischarged(cal.getTime());\n        this.setEnabled(false);\n        return this;\n    }\n", "public void clearSelection(){\n  m_selectedItems.clear();\n}\n", "    public boolean overrideId() {\n        return !refId.equals(getId());\n    }\n", "public static < ObjectType > void link ( final TreeNode < ObjectType > parent , final TreeNode < ObjectType > child ) { parent . m_children . add ( child ) ; child . m_parent = parent ; }", "public static String join(List<?> things,String delim){\n  StringBuilder builder=new StringBuilder();\n  boolean first=true;\n  for (  Object thing : things) {\n    if (first) {\n      first=false;\n    }\n else {\n      builder.append(delim);\n    }\n    builder.append(thing.toString());\n  }\n  return builder.toString();\n}\n", "public void testConnectorSecuritySettingsSSL_alias_error ( ) { resetSecuritySystemProperties ( ) ; AuthenticationInfo authInfo = null ; try { authInfo = SecurityHelper . loadAuthenticationInformation ( STR_ , BOOL_ , TUNGSTEN_APPLICATION_NAME . CONNECTOR ) ; } catch ( ServerRuntimeException e ) { assertTrue ( STR_ , BOOL_ ) ; } catch ( ConfigurationException e ) { assertFalse ( STR_ , BOOL_ ) ; } resetSecuritySystemProperties ( ) ; }", "public void setRouteFilterPrefixes(java.util.Collection<RouteFilterPrefix> routeFilterPrefixes) {\n        if (routeFilterPrefixes == null) {\n            this.routeFilterPrefixes = null;\n            return;\n        }\n\n        this.routeFilterPrefixes = new com.amazonaws.internal.SdkInternalList<RouteFilterPrefix>(routeFilterPrefixes);\n    }", "public static Thread newManagedThread(Runnable r){\n  return FACTORY.newThread(r);\n}\n", "public static void deleteDirectoryIgnoreException(File directory){\n  try {\n    FileUtils.deleteDirectory(directory);\n  }\n catch (  Exception e) {\n    LOGGER.warn(String.format(\"Failed to delete \\\"%s\\\" directory.\",directory),e);\n  }\n}\n", "public Observable<Page<PermissionInner>> listByResourceGroupAsync(final String resourceGroupName) {\n        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)\n            .map(new Func1<ServiceResponse<Page<PermissionInner>>, Page<PermissionInner>>() {\n                @Override\n                public Page<PermissionInner> call(ServiceResponse<Page<PermissionInner>> response) {\n                    return response.body();\n                }\n            });\n    }", "public void setOcspExtensions(List<Extension> extensions)\n    {\n        this.ocspExtensions = (extensions == null)\n                              ? Collections.<Extension>emptyList()\n                              : new ArrayList<Extension>(extensions);\n    }", "    public void addComponent(int index, Component cmp) {\n        insertComponentAt(index, cmp);\n    }\n", "public static boolean isMacOS(){\n  return osname.startsWith(\"Mac\");\n}\n", "public Page ( Wikipedia wiki , String pName ) throws WikiApiException { this ( wiki , pName , BOOL_ ) ; }", "public static INDArray ndArrayDimFromInt(int... dimensions){\n        if (dimensions == null || dimensions.length == 0)\n            return Nd4j.empty(DataType.INT);\n        else\n            return Nd4j.createFromArray(dimensions);\n    }", "public void add_logging_target (String[] dvsa) throws DevFailed\n\t{\n    //- Fight against \"zombie appender\" synfrom\n    kill_zombie_appenders();\n    //- N x [device-name, ttype::tname] expected\n    if ((dvsa.length % 2) != 0) {\n      String desc = \"Incorrect number of arguments\";\n      Except.throw_exception(\"API_MethodArgument\", desc, \"Logging::add_logging_target\");\n    }\n    //- Device name pattern\n    String pattern;\n    //- The device name list which name match pattern\n    Vector dl;\n    //- For each tuple {dev-name, ttype::tname} in dvsa\n    for (int t = 0; t < dvsa.length;) {\n      //- Get device name pattern\n      pattern = dvsa[t++].toLowerCase();\n      //- Get devices which name match the pattern\n      dl = Util.instance().get_device_list(pattern);\n      //- Throw exception if list is empty\n      if (dl.size() == 0) {\n        String desc = \"No device matching pattern <\" + pattern + \">\";\n        Except.throw_exception(\"API_DeviceNotFound\", desc, \"Logging::add_logging_target\");\n      }\n      //- For each device matching pattern ...\n\t\tfor (Object aDl : dl)\n\t\t{\n\t\t\tLogger logger = ((DeviceImpl) aDl).get_logger();\n\t\t\tadd_logging_target(logger, dvsa[t++]);\n\t\t}\n    }\n\t}", "public static boolean isOutlier(int index,ArrayList<Double> values){\n  if (values.size() <= 1) {\n    return true;\n  }\n  if (index == 0) {\n    return isRightOutlier(index,values);\n  }\n else   if (index == values.size() - 1) {\n    return isLeftOutlier(index,values);\n  }\n else {\n    return isRightOutlier(index,values) || isLeftOutlier(index,values);\n  }\n}\n", "public void discardJobs(String jobFamily){\n  if (VERBOSE)   Util.verbose(\"DISCARD   background job family - \" + jobFamily);\n  try {\n    org.eclipse.jdt.internal.core.search.processing.IJob currentJob;\nsynchronized (this) {\n      currentJob=currentJob();\n ", "public static int indexOf(ByteBuf needle, ByteBuf haystack) {\n        // TODO: maybe use Boyer Moore for efficiency.\n        int attempts = haystack.readableBytes() - needle.readableBytes() + 1;\n        for (int i = 0; i < attempts; i++) {\n            if (equals(needle, needle.readerIndex(),\n                       haystack, haystack.readerIndex() + i,\n                       needle.readableBytes())) {\n                return haystack.readerIndex() + i;\n            }\n        }\n        return -1;\n    }", "public void addReadReg ( final String reg ) { m_readRegs . add ( Preconditions . checkNotNull ( reg , STR_ ) ) ; }", "    public String getLoggerEffectiveLevel(final String logger) {\n        if (logger == null) {\n            throw new IllegalArgumentException(\"logger is null\");\n        }\n\n        Level level = LogManager.getLogger(logger).getEffectiveLevel();\n\n        if (level != null) {\n            return level.toString();\n        }\n\n        return null;\n    }\n", "public static String toString ( URI uri ) throws IOException { return toString ( uri , Charset . defaultCharset ( ) ) ; }", "    final public boolean isCacheCollectable() {\n        return !getCacheReference().isStrong();\n    }\n", "public ChangeSet removeFromMap ( String path , Serializable key ) { return add ( new RemoveFromMapSpaceEntryMutator ( path , key ) ) ; }", "public void startSubreport(String subreport){\n  subreports.add(subreport);\n  addLogEntry(new SubreportStartEntry(subreport));\n}\n", "private void checkLimitRange(int limit) {\n    int minLimit = offsetPaginationConfiguration.allowZeroLimit() ? 0 : 1;\n\n    if (limit < minLimit || limit > offsetPaginationConfiguration.maxLimit()) {\n      throw InvalidParameterException.create(\n          \"Invalid value for '\" + this.getParameterFieldName() + \"': \" + limit\n              + \"  - value between \" + minLimit + \" and \" + offsetPaginationConfiguration.maxLimit()\n              + \" is required.\");\n    }\n  }", "@SuppressWarnings(\"unchecked\")\n    public M moveTo(int position)\n    {\n        Checks.notNegative(position, \"Provided position\");\n        Checks.check(position < orderList.size(), \"Provided position is too big and is out of bounds.\");\n\n        T selectedItem = orderList.remove(selectedPosition);\n        orderList.add(position, selectedItem);\n\n        return (M) this;\n    }", "public String encode ( long ... numbers ) { for ( long number : numbers ) { if ( number > NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } } String retval = STR_ ; if ( numbers . length == NUM_ ) { return retval ; } return this . _encode ( numbers", "public void hardCheckout(String branch, Boolean hard) throws Exception {\n        fetch(); // in case the branch is not known locally\n        if (hard)\n            hardReset();\n        checkout(branch);\n        pull(branch);  // pull before delete or next pull may add non-path items back\n    }", "private String printXFormat(final int x){\n  String sx=null;\n  if (x == Integer.MIN_VALUE) {\n    sx=\"80000000\";\n  }\n else   if (x < 0) {\n    final String t=Integer.toString((~(-x - 1)) ^ Integer.MIN_VALUE,16);\nswitch (t.length()) {\ncase 1:\n      sx=\"8000000\" + t;\n    break;\ncase 2:\n  sx=\"800000\" + t;\nbreak;\ncase 3:\nsx=\"80000\" + t;\nbreak;\ncase 4:\nsx=\"8000\" + t;\nbreak;\ncase 5:\nsx=\"800\" + t;\nbreak;\ncase 6:\nsx=\"80\" + t;\nbreak;\ncase 7:\nsx='8' + t;\nbreak;\ncase 8:\nswitch (t.charAt(0)) {\ncase '1':\nsx='9' + t.substring(1,8);\nbreak;\ncase '2':\nsx='a' + t.substring(1,8);\nbreak;\ncase '3':\nsx='b' + t.substring(1,8);\nbreak;\ncase '4':\nsx='c' + t.substring(1,8);\nbreak;\ncase '5':\nsx='d' + t.substring(1,8);\nbreak;\ncase '6':\nsx='e' + t.substring(1,8);\nbreak;\ncase '7':\nsx='f' + t.substring(1,8);\nbreak;\n}\nbreak;\n}\n}\n else {\nsx=Integer.toString(x,16);\n}\nreturn printXFormat(sx);\n}\n", "static void checkDesc ( final String desc , final boolean canBeVoid ) { int end = checkDesc ( desc , NUM_ , canBeVoid ) ; if ( end != desc . length ( ) ) { throw new IllegalArgumentException ( STR_ + desc ) ; } }", "public Tree<String> extractBestMaxRuleParse1(int start,int end,int state,int substate,List<String> sentence){\n  int cState=maxcChild[start][end][state][substate];\n  int cSubState=maxcChildSub[start][end][state][substate];\n  if (cState == -1) {\n    return extractBestMaxRuleParse2(start,end,state,substate,sentence);\n  }\n else {\n    List<Tree<String>> child=new ArrayList<Tree<String>>();\n    child.add(extractBestMaxRuleParse2(start,end,cState,cSubState,sentence));\n    String stateStr=(String)tagNumberer.object(state);\n    if (stateStr.endsWith(\"^g\"))     stateStr=stateStr.substring(0,stateStr.length() - 2);\n    totalUsedUnaries++;\n    int intermediateNode=grammar.getUnaryIntermediate((short)state,(short)cState);\n    if (intermediateNode > 0) {\n      List<Tree<String>> restoredChild=new ArrayList<Tree<String>>();\n      nTimesRestoredUnaries++;\n      String stateStr2=(String)tagNumberer.object(intermediateNode);\n      if (stateStr2.endsWith(\"^g\"))       stateStr2=stateStr2.substring(0,stateStr2.length() - 2);\n      restoredChild.add(new Tree<String>(stateStr2,child));\n      return new Tree<String>(stateStr,restoredChild);\n    }\n    return new Tree<String>(stateStr,child);\n  }\n}\n", "public static int findBeforeNewLineChar ( CharSequence s , int start ) { for ( int i = start - NUM_ ; i > NUM_ ; i -- ) { if ( s . charAt ( i ) == STR_ ) { return i ; } } return - NUM_ ; }", "@Override public Expected<T> ifEmpty(final Runnable runnable){\n  if (isEmpty()) {\n    runnable.run();\n  }\n  return this;\n}\n", "private boolean dropPidFile() {\n        LOG.trace(\"Entering dropPidFile()\");\n\n        // we cannot create pid files on Windows\n        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n            LOG.info(\"Pid file creation is unsupported on Windows... skipping\");\n            return true;\n        }\n\n        try {\n            final String[] cmd = {\"bash\", \"-o\", \"noclobber\", \"-c\", \"echo $PPID > \" + pidFilename};\n            final Process p = Runtime.getRuntime().exec(cmd);\n\n            if (p.waitFor() != 0) {\n                LOG.error(\"Unable to drop PID file\");\n                return false;\n            }\n        } catch (final InterruptedException | IOException e) {\n            LOG.error(\"Unable to drop PID file: \" + e.getMessage());\n            return false;\n        }\n\n        // This must be called after we've successfully dropped the PID file. Otherwise, it might clean-up another\n        // instances PID file. Keep in mind this doesn't account for kill -9 or a hard lockup. The start-up script\n        // should provide some additional logic to clean-up stale pid files.\n        new File(pidFilename).deleteOnExit();\n\n        LOG.debug(\"Dropped PID file\");\n        LOG.trace(\"Exiting dropPIDFile()\");\n        return true;\n    }", "public static String sha256 ( String origin ) { try { MessageDigest messageDigest = MessageDigest . getInstance ( STR_ ) ; messageDigest . update ( origin . getBytes ( CHARSET ) ) ; return DatatypeConverter . printHexBinary ( messageDigest . digest ( ) ) . toUpperCase ( ) ; } catch ( NoSuchAlgorithmException e ) { logger . error ( e ) ; } return null ; }", "public void setRepeat(int count, Duration pauseDuration) {\n\t\tRepeat repeat = new Repeat(count);\n\t\tDurationProperty duration = new DurationProperty(pauseDuration);\n\t\tsetRepeat(repeat);\n\t\tsetDuration(duration);\n\t}", "\tpublic void ioChanged() throws IOException {\n\t\trepaintCurrentForm(true);\n\t}\n", "@Override\n    public DescribeRiskConfigurationResult describeRiskConfiguration(DescribeRiskConfigurationRequest request) {\n        request = beforeClientExecution(request);\n        return executeDescribeRiskConfiguration(request);\n    }", "void clearAndSendKeys ( By by , String text ) ;", "public static void printError ( int errorCode , String cause , Throwable throwable ) { if ( errorCode == EC . GENERAL ) { printError ( errorCode , ECGeneralMsg ( cause , throwable ) ) ; } else { printError ( errorCode , cause , throwable , BOOL_ ) ; } }", "public void accumulate(double x){\n  Cell[] as;\n  long b, v, r;\n  int m;\n  Cell a;\n  if ((as=cells) != null || (r=Double.doubleToRawLongBits(function.applyAsDouble(Double.longBitsToDouble(b=base),x))) != b && !casBase(b,r)) {\n    boolean uncontended=true;\n    if (as == null || (m=as.length - 1) < 0 || (a=as[getProbe() & m]) == null || !(uncontended=(r=Double.doubleToRawLongBits(function.applyAsDouble(Double.longBitsToDouble(v=a.value),x))) == v || a.cas(v,r)))     doubleAccumulate(x,function,uncontended);\n  }\n}\n", "private void changeCamera(ReadOnlyVector3 dir){\n  Vector3 angle=MathUtil.directionToAzEl(dir,null);\n  setAzAndEl(-angle.getX(),angle.getY() + Math.PI / 2);\n  lookAt.set(dir);\n  lookAt.scaleAddLocal(camera.getDistanceToCoR(),camera.getLocation());\n  camera.setLookAt(lookAt);\n  rotateTurntable(camera.getDistanceToCoR());\n  updateFromCamera();\n  updateCrosshair();\n  updateGeometricState(0);\n  changed.set(true);\n}\n", "public static boolean hasFindBugsNature ( IProject project ) { try { return ProjectUtilities . isJavaProject ( project ) && project . hasNature ( FindbugsPlugin . NATURE_ID ) ; } catch ( CoreException e ) { FindbugsPlugin . getDefault ( ) . logException ( e , STR_ + project ) ; } return BOOL_ ; }", "public void __setDaoSession ( DaoSession daoSession ) { this . daoSession = daoSession ; myDao = daoSession != null ? daoSession . getHomeItemDBDao ( ) : null ; }", "public void init ( ) throws ServletException { }", "default CompletableFuture < Transaction > startTransaction ( String stream , ExpectedVersion expectedVersion ) { return startTransaction ( stream , expectedVersion , null ) ; }", "boolean doCommandRemotePostStatusInternet ( String deviceKey , IEspStatusRemote statusRemote ) ;", "public static nsratecontrol get(nitro_service service,  options option) throws Exception{\n\t\tnsratecontrol obj = new nsratecontrol();\n\t\tnsratecontrol[] response = (nsratecontrol[])obj.get_resources(service,option);\n\t\treturn response[0];\n\t}", "public ConditionalRowMutation otherwise(@Nonnull Mutation mutation) {\n    Preconditions.checkNotNull(mutation);\n    builder.addAllFalseMutations(mutation.getMutations());\n    return this;\n  }", "protected Object invokeRemote ( Object proxy , final IMethod method , Object [ ] args ) throws Throwable { ProxyInvocationHandler remoteInvocationHandler = getInvocationHandler ( ) ; return remoteInvocationHandler . invoke ( proxy , method , args ) ; }", "public static String convert ( String signature ) { return new SignatureConverter ( signature ) . parseNext ( ) ; }", "\tprotected void sendElementSelectedEvent() {\n\t\t\n\t\tif (selectionListeners != null) {\n\t\t\tElementSelectedEvent e = new ElementSelectedEvent(this, lb.getSelectedKey());\n\t\t\tfor (Iterator<ElementSelectedListener> it = selectionListeners.iterator(); it.hasNext(); ) {\n\t\t\t\tElementSelectedListener osl = it.next();\n\t\t\t\tosl.elementSelected(e);\n\t\t\t}\n\t\t}\n\n\t}\n", "private void checkBoundedTypeParameter(Method method){\n  TypeVariable<Method> typeParameter=getTypeParameter(method);\n  assertEquals(\"T\",typeParameter.getName());\n  assertEquals(method,typeParameter.getGenericDeclaration());\n  Type[] bounds=typeParameter.getBounds();\n  assertLenghtOne(bounds);\n  Type bound=bounds[0];\n  assertEquals(BoundedGenericMethods.class,bound);\n}\n", "\tpublic int getBlue() {\n\t\tbyte [] val = getData((byte)0x45, 1);\n\t\treturn 0xFF & val[0]; // Convert signed byte to unsigned (positive only)\n\t}\n", "public void marshall(DescribeBuildRequest describeBuildRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (describeBuildRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(describeBuildRequest.getBuildId(), BUILDID_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public static <K, V> Map<K, V> sortNumberMapByValueDescending(Map<K, V> map) {\n        ArrayList<Map.Entry<K, V>> entries = new ArrayList<>(map.entrySet());\n        Collections.sort(entries, (Map.Entry<K, V> a, Map.Entry<K, V> b) -> {\n            Double va = TypeInference.toDouble(a.getValue());\n            Double vb = TypeInference.toDouble(b.getValue());\n            return -va.compareTo(vb);\n        });\n        \n        Map<K, V> sortedMap = new LinkedHashMap<>();\n        for (Map.Entry<K, V> entry : entries) {\n          sortedMap.put(entry.getKey(), entry.getValue());\n        }\n        \n        return sortedMap;\n    }", "private static Object generateKey ( final Object [ ] args ) { if ( args == null ) return Collections . emptyList ( ) ; Object [ ] copyOfArgs = copyOf ( args , args . length ) ; return asList ( copyOfArgs ) ; }", "\tprotected void addLibraryElementsPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_MethodLibrary_libraryElements_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_MethodLibrary_libraryElements_feature\", \"_UI_MethodLibrary_type\"),\n\t\t\t\t SpemxtcompletePackage.eINSTANCE.getMethodLibrary_LibraryElements(),\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t true,\n\t\t\t\t null,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public float[] generateTransformedValuesHorizontalBarChart(List<? extends Entry> entries,int dataSet,BarData bd,float phaseY){\n  float[] valuePoints=new float[entries.size() * 2];\n  int setCount=bd.getDataSetCount();\n  float space=bd.getGroupSpace();\n  for (int j=0; j < valuePoints.length; j+=2) {\n    Entry e=entries.get(j / 2);\n    float x=e.getXIndex() + (j / 2 * (setCount - 1)) + dataSet+ space * (j / 2) + space / 2f;\n    float y=e.getVal();\n    valuePoints[j]=y * phaseY;\n    valuePoints[j + 1]=x;\n  }\n  pointValuesToPixel(valuePoints);\n  return valuePoints;\n}\n", "public Session ( String login , Object identifier ) { this . login = login ; this . identifier = identifier ; }", "protected synchronized void fireGeometryChange() {\n\t\tif (this.geometryListeners == null) {\n\t\t\treturn;\n\t\t}\n\t\tfinal ShapeGeometryChangeListener[] array = new ShapeGeometryChangeListener[this.geometryListeners.size()];\n\t\tthis.geometryListeners.toArray(array);\n\t\tfor (final ShapeGeometryChangeListener listener : array) {\n\t\t\tlistener.shapeGeometryChange(this);\n\t\t}\n\t}", "public float length ( ) { return Vector2 . length ( this ) ; }", "public static int cardinality(long v){\n  return Long.bitCount(v);\n}\n", "    public boolean equals(final Object object) {\n        if (object instanceof GeneralGridRange) {\n            final GeneralGridRange that = (GeneralGridRange) object;\n\n            return Arrays.equals(this.index, that.index);\n        }\n\n        return false;\n    }\n", "public void onPageScrollStateChanged ( int state ) ;", "  public Displayable getDisplayable(Element element) {\n    DisplayableClass c = (DisplayableClass) classes.get(element.getTagName());\n    if (c == null) {\n      System.err.println(\"No DisplayableClass found for '\"+element.getTagName()+\"'.\");\n      return null;\n    }\n    return c.getDisplayable(element);\n  }\n", "public static String optimize(String... args){\n  return simpleTag(\"optimize\",args);\n}\n", "    public void requestActivation(SceneEditorPlugin plugin) {\n        requestActivation(plugin, true);\n    }\n", "private void upload() throws Exception {\n  final String zookeeperUrl=topologyProperties.getProperty(KafkaWithZKComponent.ZOOKEEPER_PROPERTY);\n  try (CuratorFramework client=getClient(zookeeperUrl)){\n    client.start();\n    uploadGlobalConfig(client);\n    uploadProfilerConfig(client);\n  }\n }\n", "public void defaultChecker(CommsByteBuffer buffer, short exceptionCode)\n      throws SIErrorException\n   {\n      if (exceptionCode != CommsConstants.SI_NO_EXCEPTION)\n      {\n         throw new SIErrorException(buffer.getException(con));\n      }\n   }", "void clear ( ) ;", "@Override\n    public DeleteSshPublicKeyResult deleteSshPublicKey(DeleteSshPublicKeyRequest request) {\n        request = beforeClientExecution(request);\n        return executeDeleteSshPublicKey(request);\n    }", "void closeProxy ( ) ;", "public void stopListening ( ) { speechRecognizer . stopListening ( ) ; }", "@SuppressWarnings(\"unchecked\")\n\tpublic <T> DomainObjectMatch<T> createMatchFrom(DomainObjectMatch<T> domainObjectMatch) {\n\t\tDomainObjectMatch<T> ret;\n\t\tFromPreviousQueryExpression pqe;\n\t\tDomainObjectMatch<?> match;\n\t\tDomainObjectMatch<?> delegate = APIAccess.getDelegate(domainObjectMatch);\n\t\tif (delegate != null) { // generic model\n\t\t\tDomainObjectMatch<?> newDelegate = APIAccess.createDomainObjectMatch(delegate,\n\t\t\t\t\tthis.queryExecutor.getDomainObjectMatches().size(),\n\t\t\t\t\tthis.queryExecutor.getMappingInfo());\n\t\t\tthis.queryExecutor.getDomainObjectMatches().add(newDelegate);\n\t\t\tpqe = new FromPreviousQueryExpression(\n\t\t\t\t\tnewDelegate, delegate);\n\t\t\tret = (DomainObjectMatch<T>) APIAccess.createDomainObjectMatch(DomainObject.class, newDelegate);\n\t\t\tmatch = newDelegate;\n\t\t} else {\n\t\t\tret = APIAccess.createDomainObjectMatch(domainObjectMatch,\n\t\t\t\t\tthis.queryExecutor.getDomainObjectMatches().size(),\n\t\t\t\t\tthis.queryExecutor.getMappingInfo());\n\t\t\tthis.queryExecutor.getDomainObjectMatches().add(ret);\n\t\t\tpqe = new FromPreviousQueryExpression(\n\t\t\t\t\tret, domainObjectMatch);\n\t\t\tmatch = ret;\n\t\t}\n\t\tthis.queryExecutor.addAstObject(pqe);\n\t\tQueryRecorder.recordAssignment(this, \"createMatchFrom\", match,\n\t\t\t\tQueryRecorder.reference(domainObjectMatch));\n\t\treturn ret;\n\t}", "protected static int comparePrefix(UnitNRShape a,UnitNRShape b){\n  int minLevel=Math.min(a.getLevel(),b.getLevel());\n  for (int level=1; level <= minLevel; level++) {\n    int diff=a.getValAtLevel(level) - b.getValAtLevel(level);\n    if (diff != 0)     return diff;\n  }\n  return 0;\n}\n", "    public String WhatWifiDevice() {\n        return wifiDevice;\n    }\n", "        public void startElement(String uri, String sName, String qName, Attributes atts) {\n            if (sName.equals(XML_FORM_NAME)) {\n                currentElement = XML_FORM_NAME;\n            } else if (sName.equals(XML_COMPONENT_ID)) {\n                currentElement = XML_COMPONENT_ID;\n            } else if (sName.equals(XML_TITLE)) {\n                currentElement = XML_TITLE;\n            }\n        }\n", "public TrieNode(TrieNode predecessor,Map<Symbol,Integer> label2idMap,List<Symbol> labels){\n  this.backPointer=predecessor;\n}\n", "public synchronized void updatePath(PropertyChangeListener listener,Object newObject,Set updateSet){\n  if (currentObject != newObject) {\n    removeListeners();\n  }\n  if ((children != null) && (children.length > 0)) {\n    try {\n      Object newValue=null;\n      if (newObject != null) {\n        updateSet.add(newObject);\n        newValue=extractNewValue(newObject);\n      }\n      for (      BindPath child : children) {\n        child.updatePath(listener,newValue,updateSet);\n      }\n    }\n catch (    Exception e) {\n    }\n  }\n  if (currentObject != newObject) {\n    addListeners(listener,newObject,updateSet);\n  }\n}\n", "public void testWriteReadEmpty ( ) throws Exception { ByteArrayOutputStream out = new ByteArrayOutputStream ( NUM_ ) ; ObjectOutputStream os = new ObjectOutputStream ( out ) ; os . writeObject ( empty ) ; ObjectInputStream is = new ObjectInputStream ( new", "Item newFloat ( final float value ) { key . set ( value ) ; Item result = get ( key ) ; if ( result == null ) { pool . putByte ( FLOAT ) . putInt ( key . intVal ) ; result = new Item ( index ++ , key ) ; put ( result ) ; } return result ; }", "  public void expand() {\n\texpand(false);\n  }\n", "protected InputStream readContent( BinaryKey key,\n                                       Connection connection ) throws SQLException {\n        try {\n            // first search the contents which are in use\n            InputStream is = readStreamFromStatement(USED_CONTENT_STMT_KEY, key, connection);\n            if (is != null) {\n                // return the stream without closing the connection\n                return is;\n            }\n            // then search the contents which are in the trash\n            is = readStreamFromStatement(UNUSED_CONTENT_STMT_KEY, key, connection);\n            if (is != null) {\n                // return the stream without closing the connection\n                return is;\n            }\n            // we couldn't find anything, so close the connection\n            tryToClose(connection);\n            return null;\n        } catch (Throwable t) {\n            tryToClose(connection);\n            throw t;\n        }\n    }", "private void checkIfUpdate(int columnIndex){\n  if (!oldDuplicateNameColumn.equals(duplicateNameColumn) || !oldDuplicateRoleColumn.equals(duplicateRoleColumn)) {\n    Set<Integer> columnsUpdate=new HashSet<Integer>();\n    columnsUpdate.addAll(oldDuplicateNameColumn);\n    columnsUpdate.addAll(duplicateNameColumn);\n    columnsUpdate.addAll(oldDuplicateRoleColumn);\n    columnsUpdate.addAll(duplicateRoleColumn);\n    fireUpdate(columnsUpdate);\n  }\n else   if (!oldColumnErrorList.equals(columnErrorList) || parsingErrorAffectedColumns.contains(columnIndex)) {\n    fireUpdate();\n  }\n}\n", "private void collectingToASet ( List < Trade > trades ) { Set < Trade > bigTrades = trades . stream ( ) . filter ( null ) . collect ( toSet ( ) ) ; bigTrades . forEach ( null ) ; }", "private void removeSessionFile(){\n  File fileNew=(File)session.get(Constants.SESSION_FILE);\n  if (fileNew != null && fileNew.exists()) {\n    fileNew.delete();\n  }\n  session.remove(Constants.SESSION_FILE);\n  session.remove(Constants.SESSION_FILE_NAME);\n  session.remove(Constants.SESSION_FILE_CONTENT_TYPE);\n}\n", "    protected Boolean validDate(Object requiredParam) {\n        \n        Boolean result = validDateValue (requiredParam, Boolean.TRUE);\n        return result;\n        \n    }\n", "    public void dumpResponse(PrintStream stream) {\n        dialog.dumpResponse(stream);\n    }\n", "void validate ( ) throws WebSocketException { }", "    public Extent getAMarkedExtent() {\n        Extent retval;\n\n        if (myIntervalBoundaries.size() == 0) {\n            retval = null;\n        }\n        else {\n            Iterator<IntervalBoundary> boundaries =\n                    myIntervalBoundaries.iterator();\n\n            Time start = boundaries.next().time;\n            Time end = boundaries.next().time;\n\n            retval = new Extent(start, end);\n        }\n\n        return retval;\n    }\n", "public void marshall(MetricDimension metricDimension, ProtocolMarshaller protocolMarshaller) {\n\n        if (metricDimension == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(metricDimension.getKey(), KEY_BINDING);\n            protocolMarshaller.marshall(metricDimension.getValue(), VALUE_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "protected void synchWithTarget(Map<String,Monitor> map) throws MonitorException {\n  long timeLimit=System.currentTimeMillis() + syncWaitMs;\n  String name=\"hotspot.rt.hrt.ticks\";\n  LongMonitor ticks=(LongMonitor)pollFor(map,name,timeLimit);\n  log(\"synchWithTarget: \" + lvmid + \" \");\n  while (ticks.longValue() == 0) {\n    log(\".\");\n    try {\n      Thread.sleep(20);\n    }\n catch (    InterruptedException e) {\n    }\n    if (System.currentTimeMillis() > timeLimit) {\n      lognl(\"failed: \" + lvmid);\n      throw new MonitorException(\"Could Not Synchronize with target\");\n    }\n  }\n  lognl(\"success: \" + lvmid);\n}\n", "private void websocketCallback(final String message) {\n\t\tlogger.debug(\"Recv: {}\", message);\n\t\tif(message.startsWith(\"{\")) {\n\t\t\thandleCommandCallback(message);\n\t\t} else if(message.startsWith(\"[\")) {\n\t\t\thandleChannelCallback(message);\n\t\t} else {\n\t\t\tlogger.e", "public String restore ( String uri , long timeout ) throws Exception ;", "    public Edge createEdge(Vertex source, Vertex target, EdgeType type, int iteration, Vertex vertex, Set<Edge> preconditions) {\n\t\tif (type == EdgeType.CONTAINS) {\n            source.addChild(target);\n            target.addParent(source);\n        } else {\n            target.addOrigin(source);\n            source.addDelegatee(target);\n        }\n        HashMap<Vertex, Set<Edge>> preconditionsMap = new HashMap();\n        preconditionsMap.put(vertex, preconditions);\n        return this.edges.store(source, target, type, iteration, preconditionsMap);\n    }\n", "public byte[] toByteArray(){\n  byte[] newbuf=new byte[count];\n  System.arraycopy(buf,0,newbuf,0,count);\n  return newbuf;\n}\n", "void onExternalResourcesChange ( ExternalResources externalResources ) ;", "    protected void doClear() {\n        for (int i = 0; i < filterWords; i++) {\n            filter[i] = 0;\n        }\n    }\n", "@RequiresPermission(Manifest.permission.CAMERA) public CameraSource start(SurfaceHolder surfaceHolder) throws IOException {\nsynchronized (mCameraLock) {\n    if (mCamera != null) {\n      return this;\n    }\n    mCamera=createCamera();\n    mCamera.setPreviewDisplay(surfaceHolder);\n    mCamera.startPreview();\n    isSafeToTakePicture=true;\n    mProcessingThread=new Thread(mFrameProcessor);\n    mFrameProcessor.setActive(true);\n    mProcessingThread.start();\n  }\n  return this;\n}\n", "private static void parseExpression ( final Reader reader , final boolean writingString , final StringBuilder templateExpressions ) throws IOException { if ( ! writingString ) { templateExpressions . append ( STR_ ) ; } templateExpressions . append ( STR_ ) ; while ( BOOL_ ) { int c = reader . read ( ) ; if ( c == - NUM_ ) break ; if ( c == STR_ ) { c = reader . read ( ) ; if ( c == STR_ ) break ; templateExpressions . append ( STR_ ) ; } templateExpressions . append ( ( char ) c ) ; } templateExpressions . append ( STR_ ) ; }", "@SuppressWarnings(\"WeakerAccess\")\n  public AppProfile getAppProfile(String instanceId, String appProfileId) {\n    return ApiExceptions.callAndTranslateApiException(getAppProfileAsync(instanceId, appProfileId));\n  }", "public Object generateKey(FieldList record)\n    {\n        if (record.isQueryRecord())\n            return record;      // These can't be shared\n        else if ((record.getDatabaseType() & Constants.TABLE_TYPE_MASK) == Constants.UNSHAREABLE_MEMORY)   // Special sharable temp memory file\n            return record;      // These can't be shared\n        else\n            return this.getUniqueFilePath(record);  // These can be shared\n    }", "    public void process(final JobEvent event) {\n        this.put(event);\n        event.queued = System.currentTimeMillis();\n        this.incQueued();\n    }\n", "    public CMLAtomSet getAtomSetByElementType(String elementType) {\n\n        CMLAtomSet atomSet = new CMLAtomSet();\n        List<CMLAtom> atoms = this.getAtoms();\n        for (int i = 0; i < atoms.size(); i++) {\n            CMLAtom atom = atoms.get(i);\n            if (elementType.equals(atom.getElementType())) {\n                atomSet.addAtom((CMLAtom) atom);\n            }\n        }\n        return atomSet;\n    }\n", "void editedFunctionNodeComment ( NodeType node , CommentType comment ) ;", "public int getExpandedItemsCount(int from, int position) {\n        int totalAddedItems = 0;\n        //first we find out how many items were added in total\n        //also counting subItems\n        Item tmp;\n        for (int i = from; i < position; i++) {\n            tmp = mFastAdapter.getItem(i);\n            if (tmp instanceof IExpandable) {\n                IExpandable tmpExpandable = ((IExpandable) tmp);\n                if (tmpExpandable.getSubItems() != null && tmpExpandable.isExpanded()) {\n                    totalAddedItems = totalAddedItems + tmpExpandable.getSubItems().size();\n                }\n            }\n        }\n        return totalAddedItems;\n    }", "public ParticleSystem ( Activity a , int maxParticles , int drawableRedId , long timeToLive , int parentViewId ) { this ( a , maxParticles , a . getResources ( ) . getDrawable ( drawableRedId ) , timeToLive , parentViewId ) ; }", "public Transaction createTransaction(EvseId evseId) {\n        Transaction transaction = new Transaction();\n        transaction.setEvseId(evseId);\n\n        transactionRepository.insert(transaction);\n\n        return transaction;\n    }", "static AnimationStyle mapIntToValue ( int modeInt ) { switch ( modeInt ) { case NUM_ : default : return ROTATE ; case NUM_ : return FLIP ; } }", "  public RoSessionState fromInt(int value) throws IllegalArgumentException {\n    switch (value)\n    {\n    case 0:\n      return IDLE;\n    case 1:\n      return PENDING_EVENT;\n    case 2:\n      return PENDING_INITIAL;\n    case 3:\n      return PENDING_UPDATE;\n    case 4:\n      return PENDING_TERMINATION;\n    case 5:\n      return PENDING_BUFFERED;\n    case 6:\n      return OPEN;\n    case 7:\n      return TERMINATED;\n\n    default:\n      throw new IllegalArgumentException(\"Unknown value for Credit-Control Session State: \" + value);\n    }\n  }\n", "    public CspConstraint geq(float val) {\n        return constraint(new Float(val), ThreeVarConstraint.GEQ);\n    }\n", "@Override public ShapeTileSimplex intersection(ShapeTileSimplex p_other){\n  if (is_empty() || p_other.is_empty())   return EMPTY;\n  ArrayList<PlaLineInt> new_arr=new ArrayList<PlaLineInt>(lines_size() + p_other.lines_size());\n  new_arr.addAll(lines_list);\n  new_arr.addAll(p_other.lines_list);\n  ShapeTileSimplex result=new ShapeTileSimplex(new_arr);\n  return result.remove_redundant_lines();\n}\n", "@TargetApi(Build.VERSION_CODES.JELLY_BEAN)\n    public static boolean hasTelevisionFeature(PackageManager manager) {\n        return manager.hasSystemFeature(PackageManager.FEATURE_TELEVISION);\n    }", "private void writeRootBlock(final boolean isRootBlock0,final IRootBlockView rootBlock) throws IOException {\n  if (rootBlock == null)   throw new IllegalArgumentException();\n  final long position=isRootBlock0 ? OFFSET_ROOT_BLOCK0 : OFFSET_ROOT_BLOCK1;\n  FileChannelUtility.writeAll(reopener,rootBlock.asReadOnlyBuffer(),position);\n  if (haLog.isDebugEnabled())   haLog.debug(\"wrote root block: \" + rootBlock);\n}\n", "\tpublic ArrayList find(ArrayList names) {\n\t\treturn (ArrayList) find( getRoot(), names, 0).clone();\n\t}\n", "void resumeJobsStartingWith ( String jobGroupPrefix ) throws Exception ;", "public void processUtterance(Utterance utterance) throws ProcessException {\n  float uIndex=0, m;\n  int pmI=0, targetResidualPosition=0, nearestPM, unitPart, targetStart=0, targetEnd, residualSize, numberFrames;\n  Relation unitRelation=utterance.getRelation(Relation.UNIT);\n  boolean debug=false;\n  SampleInfo sampleInfo;\n  int addResidualMethod=ADD_RESIDUAL;\n  String residualType=utterance.getString(\"residual_type\");\n  if (residualType != null) {\n    if (residualType.equals(\"pulse\")) {\n      addResidualMethod=ADD_RESIDUAL_PULSE;\n    }\n else     if (residualType.equals(\"windowed\")) {\n      addResidualMethod=ADD_RESIDUAL_WINDOWED;\n    }\n  }\n  sampleInfo=(SampleInfo)utterance.getObject(SampleInfo.UTT_NAME);\n  if (sampleInfo == null) {\n    throw new IllegalStateException(\"UnitConcatenator: SampleInfo does not exist\");\n  }\n  LPCResult lpcResult=(LPCResult)utterance.getObject(\"target_lpcres\");\n  lpcResult.setValues(sampleInfo.getNumberOfChannels(),sampleInfo.getSampleRate(),sampleInfo.getResidualFold(),sampleInfo.getCoeffMin(),sampleInfo.getCoeffRange());\n  int[] targetTimes=lpcResult.getTimes();\n  int[] residualSizes=lpcResult.getResidualSizes();\n  int samplesSize=0;\n  if (lpcResult.getNumberOfFrames() > 0) {\n    samplesSize=targetTimes[lpcResult.getNumberOfFrames() - 1];\n  }\n  lpcResult.resizeResiduals(samplesSize);\n  for (Item unitItem=unitRelation.getHead(); unitItem != null; unitItem=unitItem.getNext()) {\n    FeatureSet featureSet=unitItem.getFeatures();\n    String unitName=featureSet.getString(\"name\");\n    targetEnd=featureSet.getInt(\"target_end\");\n    Unit unit=(Unit)featureSet.getObject(\"unit\");\n    int unitSize=unit.getSize();\n    uIndex=0;\n    m=(float)unitSize / (float)(targetEnd - targetStart);\n    numberFrames=lpcResult.getNumberOfFrames();\n    for (; (pmI < numberFrames) && (targetTimes[pmI] <= targetEnd); pmI++) {\n      Sample sample=unit.getNearestSample(uIndex);\n      lpcResult.setFrame(pmI,sample.getFrameData());\n      residualSize=lpcResult.getFrameShift(pmI);\n      residualSizes[pmI]=residualSize;\n      byte[] residualData=sample.getResidualData();\n      if (addResidualMethod == ADD_RESIDUAL_PULSE) {\n        lpcResult.copyResidualsPulse(residualData,targetResidualPosition,residualSize);\n      }\n else {\n        lpcResult.copyResiduals(residualData,targetResidualPosition,residualSize);\n      }\n      targetResidualPosition+=residualSize;\n      uIndex+=((float)residualSize * m);\n    }\n    targetStart=targetEnd;\n  }\n  lpcResult.setNumberOfFrames(pmI);\n  if (outputLPC) {\n    lpcResult.dump();\n  }\n}\n", "public static Map < String , MappedClass > mappingsFromEnigma ( File file , Map < String , ClassNode > nodes ) { Map < String , MappedClass > base = mappingsFromNodes ( nodes ) ; MappingLoader loader = new EnigmaLoader ( nodes ) ; try { Map < String , MappedClass > newMappings = loader . read ( new FileReader ( file ) ) ; for ( MappedClass mappedClass : newMappings . values ( ) ) { newMappings = linkMappings ( mappedClass , newMappings ) ; } base = fixFromMappingsText ( base , newMappings ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } return base ; }", "    private int getWidthHint(Composite control) {\n        if (fFixedWidth < 0) {\n            GC gc= new GC(control);\n            gc.setFont(control.getFont());\n            fFixedWidth= gc.getFontMetrics().getAverageCharWidth() * fWidthInChars;\n            fFixedWidth += INDENT * 2;\n            gc.dispose();\n        }\n        return fFixedWidth;\n    }\n", "public void initialise ( double [ ] kernelWidths ) { dimensions = kernelWidths . length ; this . suppliedKernelWidths = new double [ dimensions ] ; for ( int d = NUM_ ; d < dimensions ; d ++ ) { this . suppliedKernelWidths [ d ] = kernelWidths [ d ] ; } finishInitialisation ( ) ; }", "private void validateUser ( String username ) throws UserNotFoundException { if ( ! usersRepository . findByUsername ( username ) . isPresent ( ) ) { throw new UserNotFoundException ( username ) ; } }", "public static PasswordValidator buildExpireValidator(Map<String,String> properties){\n  List<Rule> ruleList=new ArrayList<Rule>();\n  ruleList.add(new ExpireRule(NumberUtils.toInt(properties.get(PASSWORD_EXPIRE_DAYS),0)));\n  PasswordValidator validator=new PasswordValidator(ruleList);\n  return validator;\n}\n", "protected final void appendInt ( final int number ) { for ( int i = NUM_ ; i >= NUM_ ; -- i ) { byteData . add ( Byte . valueOf ( ( byte ) ( number > > NUM_ * i & NUM_ ) ) ) ; } }", "void excludeFromScope ( java . net . URL url ) ;", "private boolean generateLockDiscovery(String path, Element elem, HttpServletRequest req) {\n\n        CmsRepositoryLockInfo lock = m_session.getLock(path);\n\n        if (lock != null) {\n\n            Element lockElem = addElement(elem, TAG_LOCKDISCOVERY);\n            addLockElement(lock, lockElem, generateLockToken(req, lock));\n\n            return true;\n        }\n\n        return false;\n    }", "public void killQuietly ( ) ;", "private void calculateUsingTextSize(final float textSize){\n  if (msText == null)   return;\n  final float availableWidth;\n  final float newTextSize;\n  boolean updateDrawText=false;\n  if (isClose(textSize,mfCollapsedTextSize)) {\n    availableWidth=mCollapsedBounds.width();\n    newTextSize=mfCollapsedTextSize;\n    mScale=1f;\n  }\n else {\n    availableWidth=mExpandedBounds.width();\n    newTextSize=mfExpandedTextSize;\n    if (isClose(textSize,mfExpandedTextSize)) {\n      mScale=1f;\n    }\n else {\n      mScale=textSize / mfExpandedTextSize;\n    }\n  }\n  if (availableWidth > 0) {\n    updateDrawText=(mCurrentTextSize != newTextSize) || mBoundsChanged || updateDrawText;\n    mCurrentTextSize=newTextSize;\n    mBoundsChanged=false;\n  }\n  if (mTextToDraw == null || updateDrawText) {\n    mTextPaint.setTextSize(mCurrentTextSize);\n    final CharSequence title=TextUtils.ellipsize(msText,mTextPaint,availableWidth,TextUtils.TruncateAt.END);\n    if (!TextUtils.equals(title,mTextToDraw)) {\n      mTextToDraw=title;\n    }\n  }\n}\n", "protected void unregisterClientInterestList(String regionName,List keysOfInterest){\n  FilterProfile p=getProfile(regionName);\n  Set keysUnregistered=null;\nsynchronized (this.interestListLock) {\n    if (p != null) {\n      keysUnregistered=p.unregisterClientInterestList(id,keysOfInterest);\n      if (!p.hasInterestFor(id)) {\n        regions.remove(regionName);\n      }\n    }\n else {\n      regions.remove(regionName);\n    }\n  }\n  if (!keysUnregistered.isEmpty()) {\n    handleInterestEvent(regionName,keysUnregistered,InterestType.KEY,false);\n  }\n}\n", "default void forEachRemaining(DoubleConsumer action){\n  Objects.requireNonNull(action);\n  while (hasNext())   action.accept(nextDouble());\n}\n", "protected static ISREInstall getSREInstallFor(ILaunchConfiguration configuration,\n\t\t\tILaunchConfigurationAccessor configAccessor,\n\t\t\tIJavaProjectAccessor projectAccessor) throws CoreException {\n\t\tassert configAccessor != null;\n\t\tassert projectAccessor != null;\n\t\tfinal ISREInstall sre;\n\t\tif (configAccessor.getUseProjectSREFlag(configuration)) {\n\t\t\tsre = getProjectSpecificSRE(configuration, true, projectAccessor);\n\t\t} else if (configAccessor.getUseSystemSREFlag(configuration)) {\n\t\t\tsre = SARLRuntime.getDefaultSREInstall();\n\t\t\tverifySREValidity(sre, sre.getId());\n\t\t} else  {\n\t\t\tfinal String runtime = configAccessor.getSREId(configuration);\n\t\t\tsre = SARLRuntime.getSREFromId(runtime);\n\t\t\tverifySREValidity(sre, runtime);\n\t\t}\n\n\t\tif (sre == null) {\n\t\t\tthrow new CoreException(SARLEclipsePlugin.getDefault().createStatus(IStatus.ERROR,\n\t\t\t\t\tMessages.SARLLaunchConfigurationDelegate_0));\n\t\t}\n\n\t\treturn sre;\n\t}", "\tpublic int scan(char[] cbuf) {\n\t\treturn (scan(cbuf, 0, cbuf.length));\n\t}\n", "public void run(int id,int size) throws Exception {\n  KeyPairGenerator keyGen=KeyPairGenerator.getInstance(\"RSA\");\n  keyGen.initialize(size);\n  KeyPair kp=keyGen.generateKeyPair();\n  PublicKey puk=kp.getPublic();\n  PrivateKey prk=kp.getPrivate();\n  saveToFile(id,puk,prk);\n}\n", "\tprotected String sqlDelete() {\n\t\tString sql = \"DELETE FROM T_CODE_HDR WHERE COMPANY_CODE=? AND REF_MASTER_CODE=? \";\n\n\t\t//super.logSqlQuery(sql);\n\t\treturn sql;\n\t}\n", "\tpublic void mouseReleased( MouseEvent e ) {\n\t\tcontroller.getCurrentTool().mouseReleased(view, view.toInfra(e.getPoint()),\n\t\t\tnew Tool.Mask(e.getModifiers()));\n\t}\n", "public static String stringArrayToString ( String [ ] A ) { if ( A . length == NUM_ ) { return A [ NUM_ ] ; } String result = A [ NUM_ ] ; for ( int i = NUM_ ; i < A . length ; i ++ ) { result = result + STR_ + A [ i ] ; } return result ; }", "\tpublic void setTimeToGmt() {\n\t\tfor (int i=0; i < trackPoints.size(); i++) {\n\t\t\ttrackPoints.get(i).setTimeToGmt();\n\t\t}\n\t\tzone_offset=0;\n\t}\n", "protected int triangularDithering() {\n\t\tint prevValue = oldRandomValue;\n\t\toldRandomValue = RANDOM.nextInt() & 0x3ff;\n\t\treturn oldRandomValue - prevValue;\n\t}", "private Observance getObservance(int year, int month, int day, int hour, int minute, int second) {\n\t\tBoundary boundary = getObservanceBoundary(year, month, day, hour, minute, second);\n\t\treturn (boundary == null) ? null : boundary.getObservanceIn();\n\t}", "private void rMoveTo(float dx,float dy){\n  dx+=mLastX;\n  dy+=mLastY;\n  mPath.moveTo(mLastX=dx,mLastY=dy);\n}\n", "public ClusterInfo ( ) { }", "public static boolean isNumericTypeSpecifier(char c,boolean isDecimal){\n  if (isDecimal) {\nswitch (c) {\ncase 'G':\ncase 'g':\ncase 'D':\ncase 'd':\ncase 'F':\ncase 'f':\n      return true;\n  }\n}\n else {\nswitch (c) {\ncase 'G':\ncase 'g':\ncase 'I':\ncase 'i':\ncase 'L':\ncase 'l':\n    return true;\n}\n}\nreturn false;\n}\n", "public void removeAllINarcPods(){\n  iNarcPods.clear();\n}\n", "public UncheckedIOException(String message,IOException cause){\n  super(message,Objects.requireNonNull(cause));\n}\n", "    public void setDeliveryNotes(String newNotes) {\n        String oldNotes = getDeliveryNotes();\n        deliveryNotes = newNotes;\n        firePropertyChange(PROPERTYNAME_DELIVERY_NOTES, oldNotes, newNotes);\n    }\n", "public CmsUser readUser(CmsDbContext dbc, String username, String password) throws CmsException {\n\n        // don't read user from cache here because password may have changed\n        CmsUser user = getUserDriver(dbc).readUser(dbc, username, password, null);\n        m_monitor.cacheUser(user);\n        return user;\n    }", "public boolean isExtraSafetyChecks ( ) { return extraSafetyChecks ; }", "public View ( String typeName , String sqlExpression ) { super ( typeName , sqlExpression ) ; }", "public final void enableChildRoundedCorners ( boolean enable ) { mRoundedCornersEnabled = enable ; }", "public java.util.List<String> getRequestedEc2SubnetIds() {\n        if (requestedEc2SubnetIds == null) {\n            requestedEc2SubnetIds = new com.amazonaws.internal.SdkInternalList<String>();\n        }\n        return requestedEc2SubnetIds;\n    }", "        public  void treeExpanded(TreeExpansionEvent e) {\n            fireVisibleDataPropertyChange();\n\t    TreePath path = e.getPath();\n\t    if (path != null) {\n                // TIGER - 4839971 \n\t\t// Set parent to null so AccessibleJTreeNode computes \n\t\t// its parent.\n\t\tAccessibleJTreeNode node = new AccessibleJTreeNode(JTree.this,\n\t\t\t\t\t\t\t\t   path,\n\t\t\t\t\t\t\t\t   null);\n\t\tPropertyChangeEvent pce = new PropertyChangeEvent(node,\n\t\t    AccessibleContext.ACCESSIBLE_STATE_PROPERTY,\n\t\t    AccessibleState.COLLAPSED,\n                    AccessibleState.EXPANDED);\n\t\tfirePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,\n\t\t\t\t   null, pce);\n            }\n        }\n", "\tpublic boolean cardsSelected() {\n\t\tif (programSet[4] != null) return true;\n\t\telse return false;\n\t}\n", "private boolean annotationIsVisible ( SAnno anno ) { SAnnoDef annoType = anno . type ( ) ; for ( SAnno a : annoType . annos ( ) ) { if ( a . type ( ) . fullName ( ) . equals ( STR_ ) ) { for ( Map . Entry < SAnnoField , Value > entry : a . values ( ) . entrySet ( ) ) { if ( entry . getKey ( ) . name ( ) . equals ( STR_ ) ) { Value v = entry . getValue ( ) ; if ( v instanceof EnumValue ) { if ( v . type ( ) . fullName ( ) . equals ( STR_ ) ) { return ( ( EnumValue ) v ) . enumStr ( ) . equals ( STR_ ) ; } } throw new LtBug ( STR_ + STR_ + STR_ + STR_ + v ) ; } } break ; } } return BOOL_ ; }", "    public int getG() throws AttributeNotSetException {\n        if(attributeg == null) {\n            throw new AttributeNotSetException(\"g\");\n        }\n\n        return attributeg;\n    }\n", "private void growStack(int depth){\n  if (nodes.length == depth) {\n    PathNode[] newNodes=new PathNode[ArrayUtil.oversize(nodes.length + 1,RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n    System.arraycopy(nodes,0,newNodes,0,nodes.length);\n    for (int i=depth, end=newNodes.length; i < end; i++) {\n      newNodes[i]=new PathNode();\n    }\n    nodes=newNodes;\n  }\n}\n", "public GroovyClassLoader(ClassLoader loader){\n  this(loader,null);\n}\n", "    public String getString(){\n        String serviceString = \"\";\n        for(int pos = 0; pos < serviceStringTokenized.length-1; pos++) {\n            serviceString+=serviceStringTokenized[pos]+token;\n        }\n        serviceString+=serviceStringTokenized[serviceStringTokenized.length-1];\n        return serviceString;\n    }\n", "public static byte[] hexStreamToByteArray(String hexStream){\n  int length=hexStream.length();\n  byte[] data=new byte[length / 2];\n  for (int i=0; i < length; i+=2) {\n    data[i / 2]=(byte)((Character.digit(hexStream.charAt(i),16) << 4) + Character.digit(hexStream.charAt(i + 1),16));\n  }\n  return data;\n}\n", "public LinearScan ( AbstractDriver d ) { driver = d ; }", "    public void scapeDeserialized(ScapeEvent scapeEvent) {\n        onChangeIterationsPerRedraw();\n        getScape().getRuntimeEnvironment().addView(this);\n        if (primaryCustomizer.getAgent() == null) {\n            getViewFrame().setVisible(false);\n        }\n    }\n", "public static Converter < ? > createConverter ( BeanManager beanManager , Class < ? > forClass ) { Converter < ? > managedConverter = createConverter ( beanManager , new FacesConverterAnnotationLiteral ( STR_ , forClass ) ) ; if ( managedConverter != null ) { return new CdiConverter ( STR_ , forClass , managedConverter ) ; } return null ; }", "void STAR_encoding_diag2(){\n  int i, j, stripe, k;\n  char[] tmp;\n  tmp=new char[p * block_size];\n  for (stripe=0; stripe < block_nbr + 1; stripe++) {\n    for (i=0; i < data_disk_nbr; i++) {\n      for (j=0; j < block_size; j++) {\n        k=(stripe + i + p) % p;\n        if (k < block_nbr)         tmp[stripe * block_size + j]^=check_data[i][k * block_size + j];\n      }\n    }\n  }\n  for (i=0; i < block_nbr; i++) {\n    for (j=0; j < block_size; j++) {\n      tmp[i * block_size + j]^=tmp[block_nbr * block_size + j];\n    }\n  }\n  System.arraycopy(tmp,0,check_data[data_disk_nbr + 2],0,stripe_unit_size);\n}\n", "    public void setDefaultDirectoryForSaveAs(File directory) {\n        if (directory != null) {\n            if (!directory.isDirectory()) {\n                throw new IllegalArgumentException(\n                        \"The 'directory' argument is not a directory.\");\n            }\n        }\n        this.defaultDirectoryForSaveAs = directory;\n    }\n", "\tpublic String decode(Message<?> message, ByteBuffer buffer) throws Exception {\n\t\tbyte[] bytes = buffer.array();\n\t\tString text = \"\";\n\t\tfor(int i = 0; i < bytes.length; i++) {\n\t\t\ttext += (char)bytes[i];\n\t\t}\n\t\t\n\t\treturn text;\n\t}\n", "\tprivate void display(JFrame child) {\n\t\tDimension childSize = child.getPreferredSize();\n\t\tPoint childLocation = getCentralLocation(mainFrame.getLocation(),\n\t\t\t\tmainFrame.getSize(), childSize);\n\t\tchild.setLocation(childLocation);\n\t\tchild.setVisible(true);\n\t}\n", "private static Collection<VirtualFile> convertFileSet(@NotNull Collection<File> fileSet){\n  Collection<VirtualFile> result=Lists.newArrayListWithCapacity(fileSet.size());\n  LocalFileSystem fileSystem=LocalFileSystem.getInstance();\n  for (  File file : fileSet) {\n    VirtualFile virtualFile=fileSystem.findFileByIoFile(file);\n    if (virtualFile != null) {\n      result.add(virtualFile);\n    }\n  }\n  return result;\n}\n", "private static int nextPartitionOrLineEnd(IDocument document,ITextSelection line,int offset,String partitioning){\n  final int docOffset=offset + line.getOffset();\n  final int eol=line.getOffset() + line.getLength();\n  int nextPartitionPos=eol;\n  int validPosition=docOffset;\n  try {\n    ITypedRegion partition=TextUtilities.getPartition(document,partitioning,nextPartitionPos,true);\n    validPosition=getValidPositionForPartition(document,partition,eol);\n    while (validPosition == -1) {\n      nextPartitionPos=partition.getOffset() - 1;\n      if (nextPartitionPos < docOffset) {\n        validPosition=docOffset;\n        break;\n      }\n      partition=TextUtilities.getPartition(document,partitioning,nextPartitionPos,false);\n      validPosition=getValidPositionForPartition(document,partition,eol);\n    }\n  }\n catch (  BadLocationException e) {\n  }\n  validPosition=Math.max(validPosition,docOffset);\n  validPosition-=line.getOffset();\n  return validPosition;\n}\n", "public synchronized Object put(Object name,Object value)\n    {\n        if (_initParams==null)\n            _initParams=new HashMap(3);\n        return _initParams.put(name,value);\n    }", "    protected void initialize() {\n        System.setProperty(LogFactoryImpl.LOG_PROPERTY, \"com.goulbourn.docenforcer.Logger\");\n        ErrorManager.getDefault().log(ErrorManager.INFORMATIONAL,\n                                      \"Initializing Action\");\n        super.initialize();\n    }\n", "public static long createRevision ( int textId , int timestamp ) { return ( long ) textId << NUM_ | ( long ) timestamp ; }", "protected void release(PooledConnection con){\n  if (con == null)   return;\n  try {\n    con.lock();\n    if (con.release()) {\n      size.addAndGet(-1);\n      con.setHandler(null);\n    }\n  }\n  finally {\n    con.unlock();\n  }\n  if (waitcount.get() > 0) {\n    idle.offer(create(true));\n  }\n}\n", "\tpublic ModuleClassLoader (String sModuleName) throws ClassNotFoundException {\n\t\tm_pModuleClass = loadClass (\"eu.goldenak.ircbot.module.\" + sModuleName);\n\t\t\n\t\tif (m_pModuleClass == null) {\n\t\t\tthrow new ClassNotFoundException (\"Class object is null.\");\n\t\t}\n\t}\n", "@Override\n  public void close() throws IOException {\n    final MapAppender appender = mapAppender;\n    if (appender != null) {\n      appender.close();\n    }\n    mapAppender = null;\n\n    recordCache = null;\n  }", "public String toShortString ( ) { return exited ( ) ? ( STR_ + getExitCode ( ) ) : ( getSignalString ( getTerminatingSignal ( ) ) ) ; }", "public <T> T deserialise(final Class<T> clazz, final InputSource source)\n\t{\n\t\tfinal Object obj = deserialise(source);\n\n\t\tif (clazz.isInstance(obj))\n\t\t\treturn clazz.cast(obj);\n\t\telse\n\t\t\tthrow new JAXBRuntimeException(\"XML deserialised to \" + obj.getClass() + \", could not cast to the expected \" + clazz);\n\t}", "public ByteBuffer getByteBuffer()\r\n    {\r\n        if (buffer == null)\r\n        {\r\n            return null;\r\n        }\r\n        if (!(buffer instanceof ByteBuffer))\r\n        {\r\n            return null;\r\n        }\r\n        ByteBuffer internalByteBuffer = (ByteBuffer)buffer;\r\n        ByteBuffer byteBuffer = internalByteBuffer.slice();\r\n        return byteBuffer.order(ByteOrder.nativeOrder());\r\n    }", "\tpublic String prop(String key) {\n\t\treturn getProperties().getProperty(key);\n\t}\n", "public void removeListener ( final IThreadListener listener ) { m_listeners . removeListener ( listener ) ; }", "private JPanel createFilterPane() {\n        JButton addButton = new JButton(edu.umd.cs.findbugs.L10N.getLocalString(\"dlg.add_dot_btn\", \"Add...\"));\n        JButton removeButton = new JButton(edu.umd.cs.findbugs.L10N.getLocalString(\"dlg.remove_btn\", \"Remove\"));\n        JButton removeAllButton = new JButton(edu.umd.cs.findbugs.L10N.getLocalString(\"dlg.remove_all_btn\", \"Remove All\"));\n        JPanel filterPanel = new JPanel();\n        filterPanel.setLayout(new GridBagLayout());\n        GridBagConstraints gbc = new GridBagConstraints();\n\n        gbc.gridheight = 1;\n        gbc.gridwidth = 1;\n        gbc.gridx = 0;\n        gbc.gridy = 0;\n        gbc.fill = GridBagConstraints.BOTH;\n        gbc.weightx = 1;\n        gbc.weighty = 1;\n        filterPanel.add(new JLabel(\"<HTML>These rules control which bugs are shown and which are hidden in this project\"), gbc);\n\n        gbc.gridheight = 4;\n        gbc.gridwidth = 1;\n        gbc.gridx = 0;\n        gbc.gridy = 1;\n        gbc.fill = GridBagConstraints.BOTH;\n        gbc.weightx = 1;\n        gbc.weighty = 1;\n        filterPanel.add(new JScrollPane(filterCheckBoxList), gbc);\n        updateFilterPanel();\n\n        gbc.gridheight = 1;\n        gbc.gridx = 1;\n        gbc.gridy = 1;\n        gbc.fill = GridBagConstraints.HORIZONTAL;\n        gbc.weightx = 0;\n        gbc.weighty = 0;\n        filterPanel.add(addButton, gbc);\n        addButton.addActionListener(evt -> NewFilterFrame.open());\n\n        gbc.gridy = 2;\n        gbc.insets = new Insets(5, 0, 0, 0);\n        filterPanel.add(removeButton, gbc);\n        removeButton.addActionListener(evt -> {\n            List<MatchBox> selected = filterCheckBoxList.getSelectedValuesList();\n            if (selected.isEmpty()) {\n                return;\n            }\n            for (MatchBox box : selected) {\n                MainFrame.getInstance().getProject().getSuppressionFilter().removeChild(box.getMatcher());\n            }\n            FilterActivity.notifyListeners(FilterListener.Action.UNFILTERING, null);\n            MainFrame.getInstance().setProjectChanged(true);\n            updateFilterPanel();\n        });\n        gbc.gridy = 3;\n        gbc.weighty = 0;\n        gbc.insets = new Insets(5, 0, 0, 0);\n        filterPanel.add(removeAllButton, gbc);\n        removeAllButton.addActionListener(evt -> {\n            boolean needsRebuild = false;\n            Filter suppressionFilter = MainFrame.getInstance().getProject().getSuppressionFilter();\n            if (!suppressionFilter.isEmpty()) {\n                needsRebuild = true;\n            }\n            suppressionFilter.clear();\n\n            if (needsRebuild) {\n                // filters being cleared were disabled\n                FilterActivity.notifyListeners(FilterListener.Action.UNFILTERING, null);\n            }\n            MainFrame.getInstance().setProjectChanged(true);\n            updateFilterPanel();\n        });\n        gbc.gridy = 4;\n        gbc.weighty = 1;\n        gbc.insets = new Insets(0, 0, 0, 0);\n        filterPanel.add(Box.createGlue(), gbc);\n\n        return filterPanel;\n    }", "public void close ( int code , String message ) ;", "public void recognizeText(String url, TextRecognitionMode mode) {\n        recognizeTextWithServiceResponseAsync(url, mode).toBlocking().single().body();\n    }", "public BookmarkManager(final com.google.security.zynamics.binnavi.models.Bookmarks.memory.BookmarkManager bookmarkManager){\n  m_bookmarkManager=bookmarkManager;\n  for (  final CBookmark bookmark : m_bookmarkManager) {\n    m_bookmarks.add(new Bookmark(bookmark));\n  }\n  m_bookmarkManager.addListener(m_internalBookmarkListener);\n}\n", "@Override\n    public void eval(INDArray labels, INDArray predictions, INDArray mask, final List<? extends Serializable> recordMetaData) {\n\n        Triple<INDArray,INDArray, INDArray> p = BaseEvaluation.reshapeAndExtractNotMasked(labels, predictions, mask, axis);\n        if(p == null){\n            //All values masked out; no-op\n            return;\n        }\n\n        INDArray labels2d = p.getFirst();\n        INDArray predictions2d = p.getSecond();\n        INDArray maskArray = p.getThird();\n        Preconditions.checkState(maskArray == null, \"Per-output masking for ROCMultiClass is not supported\");\n\n\n        if(labels2d.dataType() != predictions2d.dataType())\n            labels2d = labels2d.castTo(predictions2d.dataType());\n\n        // FIXME: int cast\n        int n = (int) labels2d.size(1);\n        if (underlying == null) {\n            underlying = new ROC[n];\n            for (int i = 0; i < n; i++) {\n                underlying[i] = new ROC(thresholdSteps, rocRemoveRedundantPts);\n            }\n        }\n\n        if (underlying.length != labels2d.size(1)) {\n            throw new IllegalArgumentException(\n                            \"Cannot evaluate data: number of label classes does not match previous call. \" + \"Got \"\n                                            + labels2d.size(1) + \" labels (from array shape \"\n                                            + Arrays.toString(labels2d.shape()) + \")\"\n                                            + \" vs. expected number of label classes = \" + underlying.length);\n        }\n\n        for (int i = 0; i < n; i++) {\n            INDArray prob = predictions2d.getColumn(i, true); //Probability of class i\n            INDArray label = labels2d.getColumn(i, true);\n            //Workaround for: https://github.com/deeplearning4j/deeplearning4j/issues/7305\n            if(prob.rank() == 0)\n                prob = prob.reshape(1,1);\n            if(label.rank() == 0)\n                label = label.reshape(1,1);\n            underlying[i].eval(label, prob);\n        }\n    }", "\tprotected IHash imageHashJ(File file) {\n\t\tif (!file.exists())\n\t\t\treturn null;\n\n\t\ttry {\n\t\t\tBufferedImage in = ImageLoader.load(file);\n\t\t\tinput.getGraphics().drawImage(in, 0, 0, N * 2, N * 2, null);\n\n\t\t\tGray_Hash hash = new Gray_Hash();\n\n\t\t\tint[] pixels = input.getRGB(0, 0, N * 2, N * 2, (int[]) null, 0, N * 2);\n\t\t\tint[] scaled = ImageManipulation.smoothHalfScaleGray(pixels, N * 2);\n\n\t\t\thashPixels(scaled, hash);\n\t\t\t\n\t\t\treturn hash;\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn null;\n\t}\n", "public void encode(OutputStream out) throws IOException {\n  DerOutputStream tmp=new DerOutputStream();\n  if (extensionValue == null) {\n    extensionId=PKIXExtensions.PrivateKeyUsage_Id;\n    critical=false;\n    encodeThis();\n  }\n  super.encode(tmp);\n  out.write(tmp.toByteArray());\n}\n", "private boolean isZonesSatisfied() {\n        boolean zonesSatisfied = false;\n        if(pipelineData.getZonesRequired() == null) {\n            zonesSatisfied = true;\n        } else {\n            int numZonesSatisfied = pipelineData.getZoneResponses().size();\n            if(numZonesSatisfied >= (pipelineData.getZonesRequired() + 1)) {\n                zonesSatisfied = true;\n            }\n        }\n        return zonesSatisfied;\n    }", "    public double getRanking() {\n        double a = -5.576;\n\n        double[] b = {\n            3.808,\n            3.175,\n            4.378\n        };\n\n        double z = a;\n\n        double[] x = {\n            (double)custodianInRoom(),\n            (double)isSocialEngeneering(),\n            (double)isPhysicalTheft()\n        };\n\n        for(int i = 0; i < Math.max(b.length, x.length); i++) {\n            z += b[i] * x[i];\n        }\n        \n        double p = 1.0 / (1.0 + Math.exp(-z));\n\n        return p;\n    }\n", "    private CharSequence getDialogText(long millisUntilFinished) {\n        // Format time\n        int minutes = (int)(millisUntilFinished / 60000);\n        String time = String.format(\"%d:%02d\", minutes,\n                (millisUntilFinished % 60000) / 1000);\n\n        switch (mDialogType) {\n        case EXIT_ECM_BLOCK_OTHERS:\n            return String.format(getResources().getQuantityText(\n                    R.plurals.alert_dialog_not_avaialble_in_ecm, minutes).toString(), time);\n        case EXIT_ECM_DIALOG:\n            return String.format(getResources().getQuantityText(R.plurals.alert_dialog_exit_ecm,\n                    minutes).toString(), time);\n        }\n        return null;\n    }\n", "public boolean isInner(){\n  return (ipos > 0);\n}\n", "public RestStatus status(){\n  if (state == SnapshotState.FAILED) {\n    return RestStatus.INTERNAL_SERVER_ERROR;\n  }\n  if (shardFailures.size() == 0) {\n    return RestStatus.OK;\n  }\n  return RestStatus.status(successfulShards,totalShards,shardFailures.toArray(new ShardOperationFailedException[shardFailures.size()]));\n}\n", "public boolean isInExpirationManager ( ) { return _inExpirationManager ; }", "private PostgreSQLTagManagerFunctions ( ) { }", "    public boolean applyToShip(Ship ship, ShipInventoryType invType) {\n        if (hasMaxSet()\n                && (ship.numberOfInventoryShips(invType, shipType) >= numMax)) return false;\n        ship.addInventoryShip(invType, shipType);\n        return true;\n    }\n", "public void rotateRight ( int startIndex , int endIndex ) { boolean wrapBit = get ( endIndex ) ; for ( int x = endIndex - NUM_ ; x >= startIndex ; x -- ) { if ( get ( x ) ) { set ( x + NUM_ ) ; } else { clear ( x + NUM_ ) ; } } if ( wrapBit ) { set ( star", "public int read(char[] cbuf) throws java.io.IOException {\n  return read(cbuf,0,cbuf.length);\n}", "    public void layout() {\n\t\tFontMetrics fm = getFontMetrics(font);\n\t\tint w2 = ((fm.stringWidth(\"123\") + 24)/5)*5;\n\t\tint w3 = Math.min(25, ((height+4)/5)*5);\n\t\tint w1 = Math.max(0, width - (w2+2*w3+3*gap));\n\t\t\n\t\tfonts.setBounds(0, 0, w1, height);\n\t\tsizes.setBounds(w1+gap, 0, w2, height);\n\t\tbold.setBounds(w1+w2+2*gap, 0, w3, height);\n\t\titalic.setBounds(w1+w2+w3+3*gap, 0, w3, height);\n    }\n", "@Override\n    public ContentPattern<?> forRequest(Request request) {\n        final String mimeType = request.getHeaders().getContentTypeHeader().mimeTypePart();\n        if (mimeType != null) {\n            if (mimeType.contains(\"json\")) {\n                return new EqualToJsonPattern(request.getBodyAsString(), ignoreArrayOrder, ignoreExtraElements);\n            } else if (mimeType.contains(\"xml\")) {\n                return new EqualToXmlPattern(request.getBodyAsString());\n            } else if (mimeType.equals(\"multipart/form-data\")) {\n                // TODO: Need to add a matcher that can handle multipart data properly. For now, just always match\n                return new AnythingPattern();\n            } else if (!determineIsTextFromMimeType(mimeType)) {\n                return new BinaryEqualToPattern(request.getBody());\n            }\n        }\n\n        return new EqualToPattern(request.getBodyAsString(), caseInsensitive);\n    }", "protected List < String > prepareSortKeyStatements ( List < SortKey > sortKeys ) { List < String > keys = new ArrayList < String > ( ) ; for ( int i = NUM_ ; i < sortKeys . size ( ) ; i ++ ) { SortKey sortKey = sortKeys . get ( i ) ; keys . add ( explicitMapping . getDbColumnName ( sortKey . getField ( ) ) + ( sortKey . isAscendingOrder ( ) ? STR_ : STR_ ) ) ; } return keys ; }", "public int size ( ) { return size ; }", "private void dtdsub() throws Exception {\n  char ch;\n  for (short st=0; st >= 0; ) {\n    ch=getch();\nswitch (st) {\ncase 0:\nswitch (chtyp(ch)) {\ncase '<':\n        ch=getch();\nswitch (ch) {\ncase '?':\n        pi();\n      break;\ncase '!':\n    ch=getch();\n  bkch();\nif (ch == '-') {\n  comm();\n  break;\n}\nbntok();\nswitch (bkeyword()) {\ncase 'n':\ndtdent();\nbreak;\ncase 'a':\ndtdattl();\nbreak;\ncase 'e':\ndtdelm();\nbreak;\ncase 'o':\ndtdnot();\nbreak;\ndefault :\npanic(FAULT);\nbreak;\n}\nst=1;\nbreak;\ndefault :\npanic(FAULT);\nbreak;\n}\nbreak;\ncase '%':\npent(' ');\nbreak;\ncase ']':\nst=-1;\nbreak;\ncase ' ':\nbreak;\ncase 'Z':\nif (getch() != ']') {\npanic(FAULT);\n}\nst=-1;\nbreak;\ndefault :\npanic(FAULT);\n}\nbreak;\ncase 1:\nswitch (ch) {\ncase '>':\nst=0;\nbreak;\ncase ' ':\ncase '\\n':\ncase '\\r':\ncase '\\t':\nbreak;\ndefault :\npanic(FAULT);\nbreak;\n}\nbreak;\ndefault :\npanic(FAULT);\n}\n}\n}\n", "public void acceptPhrases(List<String> phrases) {\n    List<List<PatternToken>> antiPatterns = new ArrayList<>();\n    for (String phrase : phrases) {\n      String[] parts = phrase.split(\" \");\n      List<PatternToken> patternTokens = new ArrayList<>();\n      int i = 0;\n      boolean startsLowercase = false;\n      for (String part : parts) {\n        if (i == 0) {\n          String uppercased = StringTools.uppercaseFirstChar(part);\n          if (!uppercased.equals(part)) {\n            startsLowercase = true;\n          }\n        }\n        patternTokens.add(new PatternTokenBuilder().csToken(part).build());\n        i++;\n      }\n      antiPatterns.add(patternTokens);\n      if (startsLowercase) {\n        antiPatterns.add(getTokensForSentenceStart(parts));\n      }\n    }\n    this.antiPatterns = makeAntiPatterns(antiPatterns, language);\n  }", "    public void addClass(final String name) throws MappingException {\n        addClass(name, true);\n    } // -- addClass\n", "    private void nextStartTag() throws XmlPullParserException, IOException {\n        // move the cursor to next Start_TAG\n        do {\n            logEvent();\n            parser.nextToken();\n            logEvent();\n        } while (!((parser.getEventType() == XmlPullParser.START_TAG) || (parser\n                .getEventType() == XmlPullParser.END_DOCUMENT)));\n\n    }\n", "protected static Object getIdForEntity(Object document, Method getterMethodForId) {\n    Object id = null;\n    if (null != getterMethodForId) {\n      try {\n        id = getterMethodForId.invoke(document);\n      } catch (IllegalAccessException e) {\n        logger.error(\"Failed to invoke getter method for a idAnnotated field due to permissions\", e);\n        throw new InvalidJsonDbApiUsageException(\"Failed to invoke getter method for a idAnnotated field due to permissions\", e);\n      } catch (IllegalArgumentException e) {\n        logger.error(\"Failed to invoke getter method for a idAnnotated field due to wrong arguments\", e);\n        throw new InvalidJsonDbApiUsageException(\"Failed to invoke getter method for a idAnnotated field due to wrong arguments\", e);\n      } catch (InvocationTargetException e) {\n        logger.error(\"Failed to invoke getter method for a idAnnotated field, the method threw a exception\", e);\n        throw new InvalidJsonDbApiUsageException(\"Failed to invoke getter method for a idAnnotated field, the method threw a exception\", e);\n      }\n    }\n    return id;\n  }", "public Class loadClass ( final String name , boolean lookupScriptFiles , boolean preferClassOverScript ) throws ClassNotFoundException , CompilationFailedException { return loadClass ( name , lookupScriptFiles , preferClassOverScript , BOOL_ ) ; }", "    public ModuleConfig getModuleConfig() {\n\n        return ((ModuleConfig) econtext.getRequestMap().\n                get(Globals.MODULE_KEY));\n\n    }\n", "public static int versionCompare ( final String current , final String remote ) { final String [ ] curComp = current . trim ( ) . split ( STR_ ) ; final String [ ] remComp = remote . trim ( ) . split ( STR_ ) ; int result = NUM_ ; for ( int i = NUM_ ; ( r", "public RequestHandle delete ( Context context , String url , Header [ ] headers , ResponseHandlerInterface responseHandler ) { final HttpDelete delete = new HttpDelete ( url ) ; if ( headers != null ) delete . setHeaders ( headers ) ; return sendRequest ( httpClient , httpContext , delete , null , responseHandler , context ) ; }", "    public void addObject(VersionedACSObject obj) {\n        BigDecimal id = obj.getID();\n        m_objects.put(id, obj);\n    }\n", "\tprivate void go_prot(double d) {\n\t\tdouble dx, dy, dt; // delta locations; i.e., relative changes\n\t\tdouble[] target = polarToGlobal(locPose, d, locPose[2]);\n\n\t\t// calculate the relative distances/angle\n\t\tdx = target[0] - locPose[0]; // target x - current x = relative x\n\t\tdy = target[1] - locPose[1]; // target y - current y = relative y\n\t\tgo_prot(d, dx, dy);\n\t}\n", "public static boolean containsTypeParameter(Type type){\n  if (type.isTypeParameter())   return true;\n  for (  Type pt : type.getTypeArgumentList()) {\n    if (containsTypeParameter(pt)) {\n      return true;\n    }\n  }\n  if (type.isIntersection()) {\n    List<Type> types=type.getSatisfiedTypes();\n    for (int i=0, l=types.size(); i < l; i++) {\n      if (containsTypeParameter(types.get(i)))       return true;\n    }\n    return false;\n  }\n  if (type.isUnion()) {\n    List<Type> types=type.getCaseTypes();\n    for (int i=0, l=types.size(); i < l; i++) {\n      if (containsTypeParameter(types.get(i)))       return true;\n    }\n    return false;\n  }\n  return false;\n}\n", "    public IE ie(){\n        IE ie = null;\n        if (sessionTag != null) {\n            ie = sessionTag.getSession();\n        }\n        return ie;\n    }\n", "\tpublic boolean equals(Object obj) {\n\t\tif (this == obj) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!(obj instanceof Unit)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn ((Unit) obj).type == type;\n\t}\n", "    private String getChildPortElementValue(Element elem, IBizViewContext context) throws XAwareException{\n        String portVal = getChildElementValue(elem,\n                XAwareConstants.BIZDRIVER_PORT, context, true);\n        if(portVal == null) {\n            portVal = \"25\";\n        }\n        return portVal;\n    }\n", "protected void assertEquals(float expected,float actual){\n  if (expected != actual) {\n    if (Float.isNaN(expected) && Float.isNaN(actual)) {\n    }\n else {\n      fail(\"Expected: \" + expected + \" actual: \"+ actual);\n    }\n  }\n}\n", "public void waitAndAssertForExpectedCondition(ExpectedCondition<?> condition, int timeout) {\n        if (!waitForExpectedCondition(condition, timeout)) {\n            fail(String.format(\"Element does not meet condition %1$s\", condition.toString()));\n        }\n    }", "\tpublic void log(IStatus status) {\n\t\tPlatform.getLog(bundle).log(status);\n\t}\n", "@FFDCIgnore(JAXBException.class)\n    public static Object parseRaDeploymentDescriptor(com.ibm.wsspi.adaptable.module.Entry ddEntry) throws JAXBException, SAXException, ParserConfigurationException, UnableToAdaptException {\n        Object connector = null;\n        try {\n            connector = parseResourceAdapterXml(ddEntry.adapt(InputStream.class), ddEntry.getName(), false);\n        } catch (JAXBException jax) {\n            if (isVersion10ResourceAdapter(ddEntry.adapt(InputStream.class))) {\n                if (ra10Context == null) {\n                    ra10Context = JAXBContext.newInstance(Ra10Connector.class);\n                }\n                connector = parseResourceAdapterXml(ddEntry.adapt(InputStream.class), ddEntry.getName(), true);\n            } else {\n                throw jax;\n            }\n        }\n        return connector;\n    }", "public DefaultChunkListDataIterator ( String entityName , SessionFactory sessionFactory , int fetchSize , boolean performOrderById , int chunkSize ) { super ( entityName , sessionFactory , fetchSize , performOrderById , chunkSize ) ; }", "\tpublic Object remove(int index) {\n\t\tLivreDocencia o=(LivreDocencia) this.impl.remove(index);\n\t\treturn o;\n\t}\n", "void rhs( RuleDescrBuilder rule ) {\n        defaultConsequence(rule);\n        while (input.LA(1) != DRL6Lexer.EOF && helper.validateIdentifierKey(DroolsSoftKeywords.THEN)) {\n            namedConsequence(rule);\n        }\n    }", "public void testUnspecifiedProperties ( ) throws InterruptedException { NetworkClientFilter ncf = new NetworkClientFilter ( ) ; ncf . setTungstenSchema ( STR_ ) ; try { filterHelper . setContext ( replicatorContext ) ; filterHelper . setFilter ( ncf ) ; filterHelper . done ( ) ; fail ( STR_ ) ; } catch ( ReplicatorException e ) { logger . info ( STR_ + e ) ; } }", "   @Before public void init () {\n      //Not necessary, logs to a log file from ../run directory\n      //DBProperties prop = new DBProperties();\n      //prop.setProperty(\"propPrefix\",\"Iono\");\n      //prop.getProperties();\n      //Logging log = new Logging(prop);\n      sao = new SaoGrp0();\n   }\n", "public ConcurrentCoapResource(String name){\n  super(name);\n  this.threads=getAvailableProcessors();\n  setExecutor(Executors.newFixedThreadPool(threads,new Utils.NamedThreadFactory(\"ConcurrentCoapResource-\" + name + '#')));\n}\n", "public GrpcChannelBuilder setChannelType(Class<? extends io.netty.channel.Channel> channelType) {\n    mChannelKey.setChannelType(channelType);\n    return this;\n  }", "protected void CreateCharset(OffsetItem charsetRef,int nglyphs){\n  OutputList.addLast(new MarkerItem(charsetRef));\n  OutputList.addLast(new UInt8Item((char)2));\n  OutputList.addLast(new UInt16Item((char)1));\n  OutputList.addLast(new UInt16Item((char)(nglyphs - 1)));\n}\n", "private boolean isProfilingEnabled() {\n        Class<?> mergedClass = mUnit.getRuntimeContext();\n        boolean profilingEnabled = true;\n\n        try {\n            Method a = mergedClass.getDeclaredMethod(\"getObserverMode\");\n            int observerMode = ((Integer) a.invoke(null)).intValue();\n            profilingEnabled = (observerMode & MergedClass.OBSERVER_ENABLED) != 0 &&\n                (observerMode & MergedClass.OBSERVER_EXTERNAL) != 0;\n        }\n        catch (Exception ex) { profilingEnabled = false; }\n        return profilingEnabled;\n    }", "public void nextPage(GuiManualHerblore manual){\n  if (currentPage + 2 <= visiblePages.size()) {\n    setPage(currentPage + 2,manual);\n  }\n}\n", "public void newRow ( ) { columnStyleCounter = NUM_ ; }", "public void print(byte x){\n  out.print(x);\n  out.flush();\n}\n", "public int compare ( File file1 , File file2 ) { int result = NUM_ ; for ( Comparator < File > delegate : delegates ) { result = delegate . compare ( file1 , file2 ) ; if ( result != NUM_ ) { break ; } } return result ; }", "    protected ResultSet getResultSet() {\n        if (myResultSet != null)\n            return myResultSet;\n        myResultSet = createResultSet();\n        return myResultSet;\n    }\n", "    public void setRecs(List recs) {\n        if (log.isDebugEnabled())\n            log.debug(\"setRecs: \" + (recs!=null ? recs.size() : 0));\n        this.m_recs = recs;\n    }\n", "private boolean portExceptionCheck ( SocketPermission permission , String p ) { SocketPermission impliee = new SocketPermission ( STR_ + p , STR_ ) ; return impliee . implies ( permission ) ; }", "public Matrix4f ortho2DLH(float left, float right, float bottom, float top, Matrix4f dest) {\n        if ((properties & PROPERTY_IDENTITY) != 0)\n            return dest.setOrtho2DLH(left, right, bottom, top);\n        return ortho2DLHGeneric(left, right, bottom, top, dest);\n    }", "private static Attributes encodeReference(char separator,Reference ref,Attributes attrs,Object orig) throws NamingException {\n  if (ref == null)   return attrs;\n  String s;\n  if ((s=ref.getClassName()) != null) {\n    attrs.put(new BasicAttribute(JAVA_ATTRIBUTES[CLASSNAME],s));\n  }\n  if ((s=ref.getFactoryClassName()) != null) {\n    attrs.put(new BasicAttribute(JAVA_ATTRIBUTES[FACTORY],s));\n  }\n  if ((s=ref.getFactoryClassLocation()) != null) {\n    attrs.put(new BasicAttribute(JAVA_ATTRIBUTES[CODEBASE],s));\n  }\n  if (orig != null && attrs.get(JAVA_ATTRIBUTES[TYPENAME]) != null) {\n    Attribute tAttr=LdapCtxFactory.createTypeNameAttr(orig.getClass());\n    if (tAttr != null) {\n      attrs.put(tAttr);\n    }\n  }\n  int count=ref.size();\n  if (count > 0) {\n    Attribute refAttr=new BasicAttribute(JAVA_ATTRIBUTES[REF_ADDR]);\n    RefAddr refAddr;\n    BASE64Encoder encoder=null;\n    for (int i=0; i < count; i++) {\n      refAddr=ref.get(i);\n      if (refAddr instanceof StringRefAddr) {\n        refAttr.add(\"\" + separator + i+ separator+ refAddr.getType()+ separator+ refAddr.getContent());\n      }\n else {\n        if (encoder == null)         encoder=new BASE64Encoder();\n        refAttr.add(\"\" + separator + i+ separator+ refAddr.getType()+ separator+ separator+ encoder.encodeBuffer(serializeObject(refAddr)));\n      }\n    }\n    attrs.put(refAttr);\n  }\n  return attrs;\n}\n", "public boolean recoverLease(Path f, boolean discardLastBlock) throws IOException {\n    return dfs.recoverLease(getPathName(f), discardLastBlock);\n  }", "protected void repaintCurrentForm(boolean fullRedraw) throws IOException {\n\t\tlog.debug(\"Redraw \" + (fullRedraw ? \"all\" : \"dirty\") + \" widgets in current Form\");\n\t\tgetCurrentAutomationSet().getCurrentForm().paint(fullRedraw);\n\t}", "void receivedReply ( ListFilesReply reply ) ;", "public static Response create3489BindingResponse ( TransportAddress mappedAddress , TransportAddress sourceAddress , TransportAddress changedAddress ) throws IllegalArgumentException { Response bindingResponse = new Response ( ) ; bindingResponse . setMessageType ( Message . BINDING_SUCCESS_RESPONSE ) ; MappedAddressAttribute mappedAddressAttribute = AttributeFactory . createMappedAddressAttribute ( mappedAddress ) ; SourceAddressAttribute sourceAddressAttribute = null ; if ( sourceAddress != null ) sourceAddressAttribute = AttributeFactory . createSourceAddressAttribute ( sourceAddress ) ; ChangedAddressAttribute changedAddressAttribute = null ; if ( changedAddress != null ) changedAddressAttribute = AttributeFactory . createChangedAddressAttribute ( changedAddress ) ; bindingResponse . putAttribute ( mappedAddressAttribute ) ; if ( sourceAddressAttribute != null ) bindingResponse . putAttribute ( sourceAddressAttribute ) ; if ( changedAddressAttribute != null ) bindingResponse . putAttribute ( changedAddressAttribute ) ; return bindingResponse ; }", "@SuppressWarnings(\"deprecation\") boolean trackMotionScroll(int deltaY,int incrementalDeltaY){\n  final int childCount=getChildCount();\n  if (childCount == 0) {\n    return true;\n  }\n  final int firstTop=getScrollChildTop();\n  final int lastBottom=getScrollChildBottom();\n  final Rect listPadding=mListPadding;\n  final int end=getHeight() - listPadding.bottom;\n  final int spaceAbove=listPadding.top - getFillChildTop();\n  final int spaceBelow=getFillChildBottom() - end;\n  final int height=getHeight() - getPaddingBottom() - getPaddingTop();\n  if (deltaY < 0) {\n    deltaY=Math.max(-(height - 1),deltaY);\n  }\n else {\n    deltaY=Math.min(height - 1,deltaY);\n  }\n  if (incrementalDeltaY < 0) {\n    incrementalDeltaY=Math.max(-(height - 1) / 2,incrementalDeltaY);\n  }\n else {\n    incrementalDeltaY=Math.min((height - 1) / 2,incrementalDeltaY);\n  }\n  final int firstPosition=mFirstPosition;\n  if (firstPosition == 0 && firstTop >= listPadding.top && deltaY >= 0) {\n    return true;\n  }\n  if (firstPosition + childCount == mItemCount && lastBottom <= end && deltaY <= 0) {\n    return true;\n  }\n  final boolean down=incrementalDeltaY < 0;\n  final int headerViewsCount=getHeaderViewsCount();\n  final int footerViewsStart=mItemCount - getFooterViewsCount();\n  int start=0;\n  int count=0;\n  if (down) {\n    final int top=listPadding.top - incrementalDeltaY;\n    for (int i=0; i < childCount; i++) {\n      final View child=getChildAt(i);\n      if (child.getBottom() >= top) {\n        break;\n      }\n else {\n        count++;\n        int position=firstPosition + i;\n        if (position >= headerViewsCount && position < footerViewsStart) {\n          mRecycler.addScrapView(child);\n          if (ViewDebug.TRACE_RECYCLER) {\n            ViewDebug.trace(child,ViewDebug.RecyclerTraceType.MOVE_TO_SCRAP_HEAP,firstPosition + i,-1);\n          }\n        }\n      }\n    }\n  }\n else {\n    final int bottom=getHeight() - listPadding.bottom - incrementalDeltaY;\n    for (int i=childCount - 1; i >= 0; i--) {\n      final View child=getChildAt(i);\n      if (child.getTop() <= bottom) {\n        break;\n      }\n else {\n        start=i;\n        count++;\n        int position=firstPosition + i;\n        if (position >= headerViewsCount && position < footerViewsStart) {\n          mRecycler.addScrapView(child);\n          if (ViewDebug.TRACE_RECYCLER) {\n            ViewDebug.trace(child,ViewDebug.RecyclerTraceType.MOVE_TO_SCRAP_HEAP,firstPosition + i,-1);\n          }\n        }\n      }\n    }\n  }\n  mMotionViewNewTop=mMotionViewOriginalTop + deltaY;\n  mBlockLayoutRequests=true;\n  if (count > 0) {\n    detachViewsFromParent(start,count);\n  }\n  tryOffsetChildrenTopAndBottom(incrementalDeltaY);\n  if (down) {\n    mFirstPosition+=count;\n  }\n  invalidate();\n  final int absIncrementalDeltaY=Math.abs(incrementalDeltaY);\n  if (spaceAbove < absIncrementalDeltaY || spaceBelow < absIncrementalDeltaY) {\n    fillGap(down);\n  }\n  mBlockLayoutRequests=false;\n  invokeOnItemScrollListener();\n  awakenScrollBars();\n  return false;\n}\n", "public static < T > List < T > plus ( List < T > self , int index , Iterable < T > additions ) { return plus ( self , index , toList ( additions ) ) ; }", "    public void inherit(RubyClass superClazz) {\n        if (superClazz == null) superClazz = getRuntime().getObject();\n        \n        superClazz.invokeInherited(getRuntime().getCurrentContext(), superClazz, this);\n    }\n", "public String post ( Context context , String url , HttpEntity entity , String contentType ) throws HttpException { return sendRequest ( httpClient , httpContext , addEntityToRequestBase ( new HttpPost ( url ) , entity ) , contentType , context ) ; }", "    public void visit(Class<?> item, Mould mould) throws AnalyserException {\n        mould.setValue(\"primitive\", true);\n        mould.setValue(\"operations\", PrimitiveOperations.getInstance());\n    }\n", "protected synchronized void ensurePrefetchAmount(){\n  if (mPrefetchedAdList.size() < PREFETCHED_ADS_SIZE && (mFetchFailCount < MAX_FETCH_ATTEMPT)) {\n    fetchAd();\n  }\n}", "public OvhNewMessageInfo serviceName_support_replace_hardDiskDrive_POST(String serviceName, String comment, OvhSupportReplaceHddInfo[] disks, Boolean inverse) throws IOException {\n\t\tString qPath = \"/dedicated/server/{serviceName}/support/replace/hardDiskDrive\";\n\t\tStringBuilder sb = path(qPath, serviceName);\n\t\tHashMap<String, Object>o = new HashMap<String, Object>();\n\t\taddBody(o, \"comment\", comment);\n\t\taddBody(o, \"disks\", disks);\n\t\taddBody(o, \"inverse\", inverse);\n\t\tString resp = exec(qPath, \"POST\", sb.toString(), o);\n\t\treturn convertTo(resp, OvhNewMessageInfo.class);\n\t}", "    public String addSymbol(String symbol) {\n\n        synchronized (fSymbolTable) {\n            return fSymbolTable.addSymbol(symbol);\n        }\n\n    } // addSymbol(String)\n", "private void addOperandTreeNodeMenu ( final CGraphModel model , final COperandTreeNode treeNode , final NaviNode node , final INaviInstruction instruction , final List < ICodeNodeExtension > extensions ) { final INaviCodeNode codeNode = ( INaviCodeNode ) ", "void markReviewed ( PatchSet . Id psId , Account . Id accountId , Collection < String > paths ) throws OrmException ;", "    public void updateDietTable() throws NumberFormatException, Exception {\n        CustomDietService ds = new CustomDietService();\n        JTable dietas = ds.fillCustomDietTable(ds.findByPatient(new PatientService().getById(new Long(txtId.getText()))));\n        if (dietas == null) {\n            createTable();\n        } else {\n            createTable(dietas);\n        }\n        pack();\n    }\n", "public byte [ ] bytes ( ) throws HttpRequestException { final ByteArrayOutputStream output = byteStream ( ) ; try { copy ( buffer ( ) , output ) ; } catch ( IOException e ) { throw new HttpRequestException ( e ) ; } return output . toByteArray ( ) ; }", "public void acquireWriteLockOnKey(K id){\n  if (id == null) {\n    LOGGER.error(\"Trying to acquire write lock with a NULL key - throwing an exception!\");\n    throw new IllegalArgumentException(\"Acquiring write lock with null key!\");\n  }\n  if (LOGGER.isTraceEnabled()) {\n    LOGGER.trace(cache.getName() + \" Acquiring WRITE lock for id=\" + String.valueOf(id));\n  }\n  cache.acquireWriteLockOnKey(id);\n  if (LOGGER.isTraceEnabled()) {\n    LOGGER.trace(cache.getName() + \" Got WRITE lock for id=\" + String.valueOf(id));\n  }\n}\n", "public static void init(final AuthAPI authzAPI, AuthzFacade facade) throws Exception {\n\t\t/**\n\t\t * Request User Role Access\n\t\t */\n\t\tauthzAPI.route(POST,\"/authz/userRole\",API.USER_ROLE_REQ,new Code(facade,\"Request User Role Access\", true) {\n\t\t\t@Override\n\t\t\tpublic void handle(AuthzTrans trans, HttpServletRequest req, HttpServletResponse resp) throws Exception {\n\t\t\t\tResult<Void> r = context.requestUserRole(trans, req, resp);\n\t\t\t\tswitch(r.status) {\n\t\t\t\t\tcase OK:\n\t\t\t\t\t\tresp.setStatus(HttpStatus.CREATED_201); \n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcontext.error(trans,resp,r);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t\t/**\n\t\t * Get UserRoles by Role\n\t\t */\n\t\tauthzAPI.route(GET,\"/authz/userRoles/role/:role\",API.USER_ROLES,new Code(facade,\"Get UserRoles by Role\", true) {\n\t\t\t@Override\n\t\t\tpublic void handle(AuthzTrans trans, HttpServletRequest req, HttpServletResponse resp) throws Exception {\n\t\t\t\tResult<Void> r = context.getUserRolesByRole(trans, resp, pathParam(req,\":role\"));\n\t\t\t\tswitch(r.status) {\n\t\t\t\t\tcase OK:\n\t\t\t\t\t\tresp.setStatus(HttpStatus.OK_200); \n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcontext.error(trans,resp,r);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\t/**\n\t\t * Get UserRoles by User\n\t\t */\n\t\tauthzAPI.route(GET,\"/authz/userRoles/user/:user\",API.USER_ROLES,new Code(facade,\"Get UserRoles by User\", true) {\n\t\t\t@Override\n\t\t\tpublic void handle(AuthzTrans trans, HttpServletRequest req, HttpServletResponse resp) throws Exception {\n\t\t\t\tResult<Void> r = context.getUserRolesByUser(trans, resp, pathParam(req,\":user\"));\n\t\t\t\tswitch(r.status) {\n\t\t\t\t\tcase OK:\n\t\t\t\t\t\tresp.setStatus(HttpStatus.OK_200); \n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcontext.error(trans,resp,r);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t\n\t\t/**\n\t\t * Update roles attached to user in path\n\t\t */\n\t\tauthzAPI.route(PUT,\"/authz/userRole/user\",API.USER_ROLE_REQ,new Code(facade,\"Update Roles for a user\", true) {\n\t\t\t@Override\n\t\t\tpublic void handle(AuthzTrans trans, HttpServletRequest req, HttpServletResponse resp) throws Exception {\n\t\t\t\tResult<Void> r = context.resetRolesForUser(trans, resp, req);\n\t\t\t\tswitch(r.status) {\n\t\t\t\t\tcase OK:\n\t\t\t\t\t\tresp.setStatus(HttpStatus.OK_200); \n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcontext.error(trans,resp,r);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t\t/**\n\t\t * Update users attached to role in path\n\t\t */\n\t\tauthzAPI.route(PUT,\"/authz/userRole/role\",API.USER_ROLE_REQ,new Code(facade,\"Update Users for a role\", true) {\n\t\t\t@Override\n\t\t\tpublic void handle(AuthzTrans trans, HttpServletRequest req, HttpServletResponse resp) throws Exception {\n\t\t\t\tResult<Void> r = context.resetUsersForRole(trans, resp, req);\n\t\t\t\tswitch(r.status) {\n\t\t\t\t\tcase OK:\n\t\t\t\t\t\tresp.setStatus(HttpStatus.OK_200); \n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcontext.error(trans,resp,r);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\t/**\n\t\t * Extend Expiration Date (according to Organizational rules)\n\t\t */\n\t\tauthzAPI.route(PUT, \"/authz/userRole/extend/:user/:role\", API.VOID, new Code(facade,\"Extend Expiration\", true) {\n\t\t\t@Override\n\t\t\tpublic void handle(AuthzTrans trans, HttpServletRequest req, HttpServletResponse resp) throws Exception {\n\t\t\t\tResult<Void> r = context.extendUserRoleExpiration(trans,resp,pathParam(req,\":user\"),pathParam(req,\":role\"));\n\t\t\t\tswitch(r.status) {\n\t\t\t\tcase OK:\n\t\t\t\t\tresp.setStatus(HttpStatus.OK_200); \n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcontext.error(trans,resp,r);\n\t\t\t}\n\t\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\t\n\t\t/**\n\t\t * Create a new ID/Credential\n\t\t */\n\t\tauthzAPI.route(DELETE,\"/authz/userRole/:user/:role\",API.VOID,new Code(facade,\"Delete User Role\", true) {\n\t\t\t@Override\n\t\t\tpublic void handle(AuthzTrans trans, HttpServletRequest req, HttpServletResponse resp) throws Exception {\n\t\t\t\tResult<Void> r = context.deleteUserRole(trans, resp, pathParam(req,\":user\"),pathParam(req,\":role\"));\n\t\t\t\tswitch(r.status) {\n\t\t\t\t\tcase OK:\n\t\t\t\t\t\tresp.setStatus(HttpStatus.OK_200); \n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcontext.error(trans,resp,r);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t}", "public boolean isAuthorizedForBucket(AuthContext ctx, Bucket bucket) {\n        if (ctx.getUsername().equals(adminName)) {\n            return ctx.getPassword().equals(adminPass);\n        }\n\n        if (bucket.getName().equals(ctx.getUsername())) {\n            return bucket.getPassword().equals(ctx.getPassword());\n        }\n\n        return bucket.getPassword().isEmpty() && ctx.getPassword().isEmpty();\n    }", "public static ObjectOutputStream newObjectOutputStream ( OutputStream outputStream ) throws IOException { return new ObjectOutputStream ( outputStream ) ; }", "public void start(){\n  this.documentUpdateTimeMicros=0;\n  verifySubscriptionTargetExists(null);\n}\n", "public static <T> Iterator<T> getRandomIterator (Iterator<T> itr)\n    {\n        ArrayList<T> list = new ArrayList<T>();\n        CollectionUtil.addAll(list, itr);\n        java.util.Collections.shuffle(list);\n        return getUnmodifiableIterator(list);\n    }", "public int compare ( Object o1 , Object o2 ) { Field f1 = ( Field ) o1 ; Field f2 = ( Field ) o2 ; if ( f1 == f2 ) return NUM_ ; if ( f1 . getDeclaringClass ( ) == f2 . getDeclaringClass ( ) ) return f1 . getName ( ) . compareTo ( f2 . getName ( ) ) ; if ( f1 . getDeclaringClass ( ) . isAssignableFrom ( f2 . getDeclaringClass ( ) ) ) return - NUM_ ; return NUM_ ; }", "public static String parseRevIDSuffix(String rev) {\n        String result = null;\n        int dashPos = rev.indexOf('-');\n        if (dashPos >= 0) {\n            result = rev.substring(dashPos + 1);\n        }\n        return result;\n    }", "public PathNode buildPath(final List<T> orig,final List<T> rev) throws DifferentiationFailedException {\n  if (orig == null)   throw new IllegalArgumentException(\"original sequence is null\");\n  if (rev == null)   throw new IllegalArgumentException(\"revised sequence is null\");\n  final int N=orig.size();\n  final int M=rev.size();\n  final int MAX=N + M + 1;\n  final int size=1 + 2 * MAX;\n  final int middle=size / 2;\n  final PathNode diagonal[]=new PathNode[size];\n  diagonal[middle + 1]=new Snake(0,-1,null);\n  for (int d=0; d < MAX; d++) {\n    for (int k=-d; k <= d; k+=2) {\n      final int kmiddle=middle + k;\n      final int kplus=kmiddle + 1;\n      final int kminus=kmiddle - 1;\n      PathNode prev=null;\n      int i;\n      if ((k == -d) || (k != d && diagonal[kminus].i < diagonal[kplus].i)) {\n        i=diagonal[kplus].i;\n        prev=diagonal[kplus];\n      }\n else {\n        i=diagonal[kminus].i + 1;\n        prev=diagonal[kminus];\n      }\n      diagonal[kminus]=null;\n      int j=i - k;\n      PathNode node=new DiffNode(i,j,prev);\n      while (i < N && j < M && equals(orig.get(i),rev.get(j))) {\n        i++;\n        j++;\n      }\n      if (i > node.i)       node=new Snake(i,j,node);\n      diagonal[kmiddle]=node;\n      if (i >= N && j >= M) {\n        return diagonal[kmiddle];\n      }\n    }\n    diagonal[middle + d - 1]=null;\n  }\n  throw new DifferentiationFailedException(\"could not find a diff path\");\n}\n", "\tpublic void update1() throws SVNException {\n\t\t//addfile(\"\u3060\u3060.txt\");\n\n\t\tSVNUpdateClient updateClient = manager.getUpdateClient();\n\t\tFile dst = new File( workdir );\n\t\tupdateClient.doUpdate( dst, SVNRevision.HEAD, true );\n\t}\n", "public void removeSocket ( TransportAddress localAddr , TransportAddress remoteAddr ) { cancelTransactionsForAddress ( localAddr , remoteAddr ) ; netAccessManager . removeSocket ( localAddr , remoteAddr ) ; }", "public static void main(String[] args) {\n        /*\n         * Developers Notes:\n         *\n         * -No corresponding Junit test class currently\n         * provided.  Test by eyeball of the output.\n         *\n         * -Add a menu with Help(About)\n         * --> TBD.\n         *\n         * -Figure out some sane way to set initial default\n         * column sizes.\n         *\n         * -Lots of inner classes here, done in order to keep\n         * all the .class files easily identifiable.  Some of\n         * this code is pretty ugly, very procedural in nature.\n         * Lots of very tight coupling between all the classes,\n         * thinly disguised switch statements, etc ..... This\n         * code written on the fly, with almost no thought given\n         * to OO design.\n         *\n         * -Also, I'm not really a GUI guy, so forgive any\n         * transgressions.\n         *\n         */\n            if ( args.length < 1 ) {\n                System.err.println(\"File name is required!\");\n                usage();\n                System.exit(1);\n            }\n        /*\n         * Instantiate a DateTimeBrowser and invoke it's go method,\n         * passing the input argument list.\n         */\n        new DateTimeBrowser().go( args );\n    }", "public void marshall(BatchPutMessageRequest batchPutMessageRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (batchPutMessageRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(batchPutMessageRequest.getChannelName(), CHANNELNAME_BINDING);\n            protocolMarshaller.marshall(batchPutMessageRequest.getMessages(), MESSAGES_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "\tpublic void updatePoll(User manager, Poll poll, boolean generateMessages) {\n\t    poll.setLastRevisor(manager);\n\t    Date date = new Date();\n\t    poll.setLastUpdate(date);\n\t    session.saveOrUpdate(poll);\n\n\t    if (generateMessages) {\n\t        // updating the message\n\t        this.jobController.updateMessage(poll);\n\t    }\n\t}\n", "@Override public double[] sample(){\n  double[] centre=points[sampler.nextInt(points.length)];\n  double[] newPoint=new double[bandwidths.length];\n  double total=0.0;\n  double shift=0.0;\n  for (int i=0; i < centre.length; i++) {\n    newPoint[i]=(sampler.nextGaussian() * samplingDeviation[i]) + centre[i];\n    total+=newPoint[i];\n    if (newPoint[i] < shift) {\n      shift=newPoint[i];\n    }\n  }\n  if (isBounded) {\n    for (int i=0; i < centre.length; i++) {\n      newPoint[i]=(newPoint[i] - shift) / (total - shift * centre.length);\n    }\n  }\n  return newPoint;\n}\n", "public static boolean isRedirect ( String text ) { boolean result = BOOL_ ; String pattern ; for ( int i = NUM_ ; i < redirectPatterns . size ( ) && ! result ; i ++ ) { pattern = redirectPatterns . get ( i ) ; result = text . regionMatches ( BOOL_ , NUM_ , pattern , NUM_ , pattern . length ( ) ) ; } return result ; }", "public void makeTransient ( ) { this . isTransient = BOOL_ ; }", "    public int getBlockCountInSector(int sectorIndex) {\n        validateSector(sectorIndex);\n\n        if (sectorIndex < 32) {\n            return 4;\n        } else {\n            return 16;\n        }\n    }\n", "private void getSingleUrl(List<URL> urls, SourceCode cfml, Tag tag, URL url) {\n\tchar quote = 0;\n\tboolean inside = false;\n\tStringBuilder value = new StringBuilder();\n\n\twhile (!cfml.isAfterLast()) {\n\t    if (inside) {\n\t\tif (quote != 0 && cfml.forwardIfCurrent(quote)) {\n\t\t    inside = false;\n\n\t\t    add(urls, url, value.toString());\n\t\t}\n\t\telse if (quote == 0 && (cfml.isCurrent(' ') || cfml.isCurrent(\"/>\") || cfml.isCurrent('>') || cfml.isCurrent('\\t') || cfml.isCurrent('\\n'))) {\n\t\t    inside = false;\n\t\t    try {\n\t\t\turls.add(new URL(url, value.toString()));\n\t\t    }\n\t\t    catch (MalformedURLException e) {}\n\t\t    cfml.next();\n\t\t}\n\t\telse {\n\t\t    value.append(cfml.getCurrent());\n\t\t    cfml.next();\n\t\t}\n\t    }\n\t    else if (cfml.forwardIfCurrent('>')) {\n\t\tbreak;\n\t    }\n\t    else {\n\n\t\tfor (int i = 0; i < tag.attributes.length; i++) {\n\t\t    if (cfml.forwardIfCurrent(tag.attributes[i])) {\n\t\t\tcfml.removeSpace();\n\t\t\t// =\n\t\t\tif (cfml.isCurrent('=')) {\n\t\t\t    inside = true;\n\t\t\t    cfml.next();\n\t\t\t    cfml.removeSpace();\n\n\t\t\t    quote = cfml.getCurrent();\n\t\t\t    value = new StringBuilder();\n\t\t\t    if (quote != '\"' && quote != '\\'') quote = 0;\n\t\t\t    else {\n\t\t\t\tcfml.next();\n\t\t\t    }\n\t\t\t}\n\t\t    }\n\t\t}\n\t\tif (!inside) {\n\t\t    cfml.next();\n\t\t}\n\t    }\n\t}\n    }", "public static String formatCreateDate ( String createDate ) { String result = STR_ ; if ( ! TextUtils . isEmpty ( createDate ) && createDate . length ( ) >= NUM_ ) { result = createDate . substring ( NUM_ , NUM_ ) ; } return result ; }", "public static void ungzip(String srcFile,String destDir) throws IOException {\n  String tempDestFileName=srcFile.substring(0,srcFile.lastIndexOf(\".\"));\n  tempDestFileName=tempDestFileName.substring(srcFile.lastIndexOf(FILE_SEPARATOR) + 1);\n  File bdbDir=new File(destDir);\n  if (!bdbDir.exists()) {\n    bdbDir.mkdir();\n    byte[] buffer=new byte[BUFFER_SIZE];\n    GZIPInputStream gzin=new GZIPInputStream(new FileInputStream(srcFile));\n    FileOutputStream fout=new FileOutputStream(new File(destDir,tempDestFileName));\n    int byteRead=0;\n    while ((byteRead=gzin.read(buffer)) != -1) {\n      fout.write(buffer,0,byteRead);\n    }\n    gzin.close();\n    fout.close();\n  }\n}\n", "public static Boolean toBoolean(boolean b){\n  return b ? Boolean.TRUE : Boolean.FALSE;\n}\n", "public static MethodDelegation toMethodReturnOf(String name, MethodGraph.Compiler methodGraphCompiler) {\n        return withDefaultConfiguration().toMethodReturnOf(name, methodGraphCompiler);\n    }", "protected void collectQueryParameters(HttpRequest request,HttpParameters out){\n  String url=request.getRequestUrl();\n  int q=url.indexOf('?');\n  if (q >= 0) {\n    out.putAll(OAuth.decodeForm(url.substring(q + 1)),true);\n  }\n}\n", "public void scanNonNotifyTemplates(Context context,IEntryHolder entry,ServerTransaction txn,FifoSearch fifoSearch,FifoGroupsSearch fifoGroupsSearch) throws EntryDeletedException, SAException {\n  if (_logger.isLoggable(Level.FINE))   _logger.log(Level.FINE,\"Starting scan of non-notify templates: EntryUid=\" + entry.getUID() + \", fifoSearch=\"+ fifoSearch);\n  context.setExhaustedFifoGroupsTemplatesSearch(false);\n  scanTemplates(context,entry,txn,fifoSearch,null,fifoGroupsSearch);\n  if (_logger.isLoggable(Level.FINE))   _logger.log(Level.FINE,\"Finished scan of non-notify templates: EntryUid=\" + entry.getUID() + \", fifoSearch=\"+ fifoSearch);\n}\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public Relationship[] relationships(String genome){\n  final Collection<Relationship> col=mRelationships.get(genome);\n  return col == null ? EMPTY_REL : col.toArray(new Relationship[col.size()]);\n}\n", "public static String encodeHighLevel ( String msg ) { return encodeHighLevel ( msg , SymbolShapeHint . FORCE_NONE , null , null ) ; }", "public static byte[] generateSeed(String mnemonic, String passphrase) {\n        if (isMnemonicEmpty(mnemonic)) {\n            throw new IllegalArgumentException(\"Mnemonic is required to generate a seed\");\n        }\n        passphrase = passphrase == null ? \"\" : passphrase;\n\n        String salt = String.format(\"mnemonic%s\", passphrase);\n        PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA512Digest());\n        gen.init(mnemonic.getBytes(UTF_8), salt.getBytes(UTF_8), SEED_ITERATIONS);\n\n        return ((KeyParameter) gen.generateDerivedParameters(SEED_KEY_SIZE)).getKey();\n    }", "protected Response createResponse(WebApplicationException exception) {\n\n    Response response = exception.getResponse();\n    int statusCode = response.getStatus();\n    Status status = Status.fromStatusCode(statusCode);\n    NlsRuntimeException error;\n    if (exception instanceof ServerErrorException) {\n      error = new TechnicalErrorUserException(exception);\n      LOG.error(\"Service failed on server\", error);\n      return createResponse(status, error, null);\n    } else {\n      UUID uuid = UUID.randomUUID();\n      if (exception instanceof ClientErrorException) {\n        LOG.warn(\"Service failed due to unexpected request. UUDI: {}, reason: {} \", uuid, exception.getMessage());\n      } else {\n        LOG.warn(\"Service caused redirect or other error. UUID: {}, reason: {}\", uuid, exception.getMessage());\n      }\n      return createResponse(status, exception.getMessage(), String.valueOf(statusCode), uuid, null);\n    }\n\n  }", "public BigInteger toBigInteger ( ) { return StringGroovyMethods . toBigInteger ( text ( ) ) ; }", "public static String replaceWordIgnoreCase(String input, String word, String replace) {\n        StringBuilder sb = new StringBuilder(input);\n        replaceWordIgnoreCase(sb, word, replace);\n        return sb.toString();\n    }", "public static WebSocketFrame createCloseFrame ( int closeCode ) { return createCloseFrame ( ) . setCloseFramePayload ( closeCode , null ) ; }", "private static void createDirectory(Path path) throws IOException {\n\t\ttry {\n\t\t\tFiles.createDirectory(path);\n\t\t} catch (FileAlreadyExistsException e) {\n\t\t\tif (!Files.isDirectory(path)) {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}", "void backupFile() {\n\n        writeLock.lock();\n\n        try {\n            if (incBackup) {\n                if (fa.isStreamElement(backupFileName)) {\n                    fa.removeElement(backupFileName);\n                }\n\n                return;\n            }\n\n            if (fa.isStreamElement(fileName)) {\n                FileArchiver.archive(fileName, backupFileName + \".new\",\n                                     database.getFileAccess(),\n                                     FileArchiver.COMPRESSION_ZIP);\n            }\n        } catch (IOException e) {\n            database.logger.appLog.logContext(e, null);\n\n            throw new HsqlException(e.getMessage(), \"\", 0);\n        } finally {\n            writeLock.unlock();\n        }\n    }", "public ClusterHealthStatus ensureGreen(final String... indices) {\n        final ClusterHealthResponse actionGet = client().admin().cluster().health(\n                Requests.clusterHealthRequest(indices).waitForGreenStatus().waitForEvents(Priority.LANGUID).waitForNoRelocatingShards(true))\n                .actionGet();\n        if (actionGet.isTimedOut()) {\n            onFailure(\"ensureGreen timed out, cluster state:\\n\" + client().admin().cluster().prepareState().get().getState() + \"\\n\"\n                    + client().admin().cluster().preparePendingClusterTasks().get(), actionGet);\n        }\n        return actionGet.getStatus();\n    }", "public void sendOutState(State<Serializable, Serializable> state,\n                           String checkpointId,\n                           boolean spillState,\n                           String location) {\n    outputter.sendOutState(state, checkpointId, spillState, location);\n  }", "public void renameSpec ( Spec spec , final String newName , final IProgressMonitor aMonitor ) { this . lifecycleManager . sendEvent ( new SpecRenameEvent ( spec , newName ) ) ; specStorage . remove ( spec . getName ( ) ) ; IProject project = ResourceHelper . projectRename ( spec . getProject ( ) , newName , aMonitor ) ; spec = new Spec ( project ) ; spec . setLastModified ( ) ; addSpec ( spec ) ; }", "public java.rmi.Remote getPort(Class serviceEndpointInterface) throws javax.xml.rpc.ServiceException {\n        try {\n            if (com.google.api.ads.adwords.axis.v201809.cm.CampaignCriterionServiceInterface.class.isAssignableFrom(serviceEndpointInterface)) {\n                com.google.api.ads.adwords.axis.v201809.cm.CampaignCriterionServiceSoapBindingStub _stub = new com.google.api.ads.adwords.axis.v201809.cm.CampaignCriterionServiceSoapBindingStub(new java.net.URL(CampaignCriterionServiceInterfacePort_address), this);\n                _stub.setPortName(getCampaignCriterionServiceInterfacePortWSDDServiceName());\n                return _stub;\n            }\n        }\n        catch (java.lang.Throwable t) {\n            throw new javax.xml.rpc.ServiceException(t);\n        }\n        throw new javax.xml.rpc.ServiceException(\"There is no stub implementation for the interface:  \" + (serviceEndpointInterface == null ? \"null\" : serviceEndpointInterface.getName()));\n    }", "private ArrayList<ArrayDBIDs> buildOneDimIndexes(Relation<? extends NumberVector> relation){\n  final int dim=RelationUtil.dimensionality(relation);\n  ArrayList<ArrayDBIDs> subspaceIndex=new ArrayList<>(dim + 1);\n  SortDBIDsBySingleDimension comp=new Vecto", "public OmemoFingerprint getFingerprint(OmemoDevice userDevice, OmemoDevice contactsDevice)\n            throws CorruptedOmemoKeyException, NoIdentityKeyException {\n\n        T_IdKey identityKey = loadOmemoIdentityKey(userDevice, contactsDevice);\n        if (identityKey == null) {\n            throw new NoIdentityKeyException(contactsDevice);\n        }\n        return keyUtil().getFingerprintOfIdentityKey(identityKey);\n    }", "@Nonnull\n    @Override\n    public Iterable<DatabaseProduct> listDatabaseProducts(@Nonnull DatabaseEngine forEngine) throws CloudException, InternalException {\n        if(forEngine == null)\n            throw new InternalException(\"Please specify the DatabaseEngine for which you want to retrieve the products.\");\n\n        if(!forEngine.name().toString().equalsIgnoreCase(\"sqlserver_ee\"))\n            return Arrays.asList();\n\n        ServerServiceResourceModel.Version versionResult = getSubscriptionVersionProducts();\n\n        final ArrayList<DatabaseProduct> products = new ArrayList<DatabaseProduct>();\n        CollectionUtils.forAllDo(versionResult.getEditions(), new Closure() {\n            @Override\n            public void execute(Object input) {\n                ServerServiceResourceModel.Edition edition = (ServerServiceResourceModel.Edition)input;\n                for(ServerServiceResourceModel.ServiceLevelObjective serviceLevelObjective : edition.getServiceLevelObjectives()){\n                    DatabaseProduct product = new DatabaseProduct(serviceLevelObjective.getName(), edition.getName());\n                    product.setProviderDataCenterId(provider.getDataCenterId(provider.getContext().getRegionId()));\n                    product.setEngine(DatabaseEngine.SQLSERVER_EE);\n                    product.setLicenseModel(DatabaseLicenseModel.LICENSE_INCLUDED);\n                    products.add(product);\n                }\n            }\n        });\n\n        return products;\n    }", "private void compactLogs(long compactIndex) {\n    raft.getThreadContext().execute(() -> {\n      logger.debug(\"Compacting logs up to index {}\", compactIndex);\n      try {\n        raft.getLog().compact(compactIndex);\n      } catch (Exception e) {\n        logger.error(\"An exception occurred during log compaction: {}\", e);\n      } finally {\n        this.compactFuture.complete(null);\n        this.compactFuture = null;\n        // Immediately attempt to take new snapshots since compaction is already run after a time interval.\n        takeSnapshots(false, false);\n      }\n    });\n  }", "public BeanLevelPropertyBeanPostProcessor ( BeanLevelProperties beanLevelProperties ) { this . beanLevelProperties = beanLevelProperties ; }", "public synchronized Throwable initCause(Throwable cause) throws IllegalStateException, IllegalArgumentException {\n        super.initCause(cause);\n        ivCause = cause;\n        causeInitialized = true;\n        return this;\n    }", "protected final FluentModelTImpl prepareInlineDefine(FluentModelTImpl model) {\n        FluentModelTImpl childResource = find(model.childResourceKey());\n        if (childResource != null) {\n            throw new IllegalArgumentException(pendingOperationMessage(model.name(), model.childResourceKey()));\n        }\n        model.setPendingOperation(ExternalChildResourceImpl.PendingOperation.ToBeCreated);\n        this.childCollection.put(model.childResourceKey(), model);\n        return super.prepareForFutureCommitOrPostRun(model);\n    }", "public TaggedInputStream ( InputStream proxy ) { super ( proxy ) ; }", "public static Method[] getMethods(Class<?> clazz) {\n        final boolean legacyApproach = isGetMethodsLegacyApproach();\n\n        final List<Method> allMethods = new ArrayList<>();\n        addMethods(allMethods, clazz, legacyApproach);\n\n        return allMethods.toArray(new Method[allMethods.size()]);\n    }", "void debuggerDetached ( DebuggerDetachReply reply ) ;", "public void clearBugs(){\n  map.clear();\n  hashes.clear();\n  lastBug=null;\n  lastSourceLine=null;\n}\n", "private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {\n  int[] leftTopBlack=image.getTopLeftOnBit();\n  int[] rightBottomBlack=image.getBottomRightOnBit();\n  if (leftTopBlack == null || rightBottomBlack == null) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  float moduleSize=moduleSize(leftTopBlack,image);\n  int top=leftTopBlack[1];\n  int bottom=rightBottomBlack[1];\n  int left=leftTopBlack[0];\n  int right=rightBottomBlack[0];\n  if (left >= right || top >= bottom) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (bottom - top != right - left) {\n    right=left + (bottom - top);\n    if (right >= image.getWidth()) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n  }\n  int matrixWidth=Math.round((right - left + 1) / moduleSize);\n  int matrixHeight=Math.round((bottom - top + 1) / moduleSize);\n  if (matrixWidth <= 0 || matrixHeight <= 0) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (matrixHeight != matrixWidth) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  int nudge=(int)(moduleSize / 2.0f);\n  top+=nudge;\n  left+=nudge;\n  int nudgedTooFarRight=left + (int)((matrixWidth - 1) * moduleSize) - right;\n  if (nudgedTooFarRight > 0) {\n    if (nudgedTooFarRight > nudge) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    left-=nudgedTooFarRight;\n  }\n  int nudgedTooFarDown=top + (int)((matrixHeight - 1) * moduleSize) - bottom;\n  if (nudgedTooFarDown > 0) {\n    if (nudgedTooFarDown > nudge) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    top-=nudgedTooFarDown;\n  }\n  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);\n  for (int y=0; y < matrixHeight; y++) {\n    int iOffset=top + (int)(y * moduleSize);\n    for (int x=0; x < matrixWidth; x++) {\n      if (image.get(left + (int)(x * moduleSize),iOffset)) {\n        bits.set(x,y);\n      }\n    }\n  }\n  return bits;\n}\n", "private final File locate(String name){\n  String prefix=\"\";\n  File sourceFile=null;\n  int idx=0;\n  while (true) {\n    if ((idx == 0) && (ToolIO.getUserDir() != null)) {\n      sourceFile=new File(ToolIO.getUserDir(),name);\n    }\n else {\n      sourceFile=new File(prefix + name);\n    }\n    if (sourceFile.exists())     break;\n    if (idx >= libraryPathEntries.size())     break;\n    prefix=(String)libraryPathEntries.elementAt(idx++);\n  }\n  return sourceFile;\n}\n", "public static ApplicationTemplateDescriptor load( Properties properties ) {\n\n\t\tApplicationTemplateDescriptor result = new ApplicationTemplateDescriptor();\n\n\t\t// Properties with legacy\n\t\tresult.name = getLegacyProperty( properties, APPLICATION_NAME, null );\n\t\tresult.description = getLegacyProperty( properties, APPLICATION_DESCRIPTION, null );\n\t\tresult.version = getLegacyProperty( properties, APPLICATION_VERSION, null );\n\t\tresult.dslId = getLegacyProperty( properties, APPLICATION_DSL_ID, null );\n\n\t\t// Unchanged properties\n\t\tresult.graphEntryPoint = properties.getProperty( APPLICATION_GRAPH_EP, null );\n\t\tresult.instanceEntryPoint = properties.getProperty( APPLICATION_INSTANCES_EP, null );\n\t\tresult.externalExportsPrefix = properties.getProperty( APPLICATION_EXTERNAL_EXPORTS_PREFIX, null );\n\n\t\t// Exports\n\t\tfinal Pattern pattern = Pattern.compile(\n\t\t\t\t\"([^=\\\\s]+)\\\\s+\" + APPLICATION_EXTERNAL_EXPORTS_AS + \"\\\\s+([^=\\\\s]+)\",\n\t\t\t\tPattern.CASE_INSENSITIVE );\n\n\t\tString rawExports = properties.getProperty( APPLICATION_EXTERNAL_EXPORTS, \"\" );\n\t\tfor( String rawExport : Utils.splitNicely( rawExports, \",\" )) {\n\t\t\tMatcher m = pattern.matcher( rawExport );\n\t\t\tif( m.matches())\n\t\t\t\tresult.externalExports.put( m.group( 1 ), m.group( 2 ));\n\t\t\telse\n\t\t\t\tresult.invalidExternalExports.add( rawExport );\n\t\t}\n\n\t\t// Tags\n\t\tString rawTags = properties.getProperty( APPLICATION_TAGS, \"\" );\n\t\tresult.tags.addAll( Utils.splitNicely( rawTags, \",\" ));\n\n\t\treturn result;\n\t}", "public void addResult(String name,StringBuffer result){\n  m_Model.addElement(name);\n  m_Results.put(name,result);\n}\n", "    public int parse() {\n        \n        // Get next argument. This should be the component internal name\n        findNextToken();\n        Component c = new Component();\n        c.setName(currentToken);\n        CLI.print(\"ComponentParser: \" + c.getName(), 1);\n        \n        // We're expecting an equals sign and some text next\n        findNextToken();\n        assertToken(\"=\"); if (Settings.errorFlag) return -1;\n        \n        // The text\n        findNextToken();\n        c.setText(removeQuotes(currentToken));\n        \n        // terminator\n        findNextToken();\n        assertToken(\";\"); if (Settings.errorFlag) return -1;\n\n        DataStore.entities.put(c.getName(), c);\n        DataStore.components.put(c.getName(), c);\n        \n        return currentPosition;\n    }\n", "    public boolean exists(String filename) throws FileResourceException {\n        try {\n            return ftpClient.exists(filename);\n        }\n        catch (Exception e) {\n            throw translateException(\n                \"Cannot determine the existence of the file\", e);\n        }\n    }\n", "  public Layer getLayer(String layerName) {\n\n    Layer lyr = (Layer) project.getLayerById(layerName);\n    if(lyr==null)\n       lyr = (Layer) project.getLayerByName(layerName);\n\n    return lyr;\n  }\n", "@Override\n\tpublic List<CPDefinitionLink> getCPDefinitionLinksByUuidAndCompanyId(\n\t\tString uuid, long companyId) {\n\t\treturn cpDefinitionLinkPersistence.findByUuid_C(uuid, companyId);\n\t}", "\tprivate void skipWhiteSpaceAndComments() {\n\t\ttry {\n\t\t\twhile (Character\n\t\t\t\t\t.isWhitespace(this.characterArray[this.charArrayPointer])\n\t\t\t\t\t|| this.characterArray[this.charArrayPointer] == '#'\n\t\t\t\t\t|| (this.characterArray[this.charArrayPointer] == '/' &&\n\t\t\t\t\t\t\tthis.characterArray[this.charArrayPointer+1] == '+')) {\n\t\t\t\tskipWhiteSpace();\n\t\t\t\tif (this.charArrayPointer >= this.characterArray.length)\n\t\t\t\t\tbreak;\n\t\t\t\tskipComment();\n\t\t\t\tif (this.charArrayPointer >= this.characterArray.length)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch(ArrayIndexOutOfBoundsException e) {\n\t\t\treturn;\n\t\t}\n\t}\n", "\tpublic void init(IWorkbench workbench) {\n\t\tsetPreferenceStore(PlatformUI.getPreferenceStore());\n\t\tsetDescription(\n\t\t\t\"You can change the Sample preference settings below.\" +\n\t\t\t\"\\n\\nNOTE: If \\\"Use Scroll Speed\\\" is not checked, then \" +\n\t\t\t\"the Scroll Speed value below it will be ignored.\\n\\n\"\n\t\t);\n\t}\n", "\tpublic boolean moveToCompleteFolder() {\n\t\tsynchronized(this) {\n\t\t\t_writtenRanges.clear();\n\t\t}\n\t\tLOG.trace(\"cleared ranges\");\n\t\tfor (Iterator iter = _folder.getBlocks(); iter.hasNext();) {\n\t\t\t_writtenRanges.add(iter.next());\n\t\t}\n\t\tLOG.trace(\"updated ranges\");\n\n\t\tif (!saveFile(_incompleteFile,\n\t\t\t\tSharingSettings.DIRECTORY_FOR_SAVING_FILES.getValue()))\n\t\t\treturn false;\n\n\t\t_completeFile = new File(SharingSettings.DIRECTORY_FOR_SAVING_FILES\n\t\t\t\t.getValue(), _name);\n\n\t\t// purge the stored FakeFileDesc\n\t\t_desc = null;\n\n\t\t// now fix the reference to this file in _files\n\t\tupdateReferences(_completeFile);\n\n\t\tLOG.trace(\"saved files\");\n\t\tinitializeVerifyingFolder(true);\n\t\tLOG.trace(\"initialized folder\");\n\t\treturn true;\n\t}\n", "public void componentResized(final ComponentEvent arg0){\n  workspace.setWorkspaceChanged(true);\n}\n", "  protected void release() throws DbException {\n    Exception e = null;\n    if (opened) {\n      try {\n        if (resultSet != null){\n          resultSet.close();\n        }\n        preparedStatement.close();\n      }\n      catch (SQLException sqle) {\n        e = sqle;\n      }\n      finally {\n    \t  opened = false;\n//        super.release();\n        if (e != null){\n\t\t      log.error(\"=== Sql db query not closed ===\");\n\t\t      db.raiseDbException(e.getMessage(), \"SqlQuery.close\",\n                              \"SqlQuery\", \"close()\");\n        }\n      }\n    }\n  }\n", "boolean mergeable(Range r){\n  return (1 + Math.max(last,r.last) - Math.min(first,r.first)) <= ((1 + r.last - r.first) + (1 + last - first));\n}\n", "boolean evaluate ( T element ) ;", "public void stopFinding ( boolean clearSelection ) ;", "\tpublic byte readByte(RealModeAddress address) throws MemoryException {\n\t\t\n\t\t// is reading allowed from this address ?\n\t\tif (!isAddressInRegions(m_readAccessRegions, address)) {\n\t\t\tthrow new MemoryException();\t\t\t\n\t\t}\n\t\t\n\t\treturn m_memory.readByte(address);\t\t\n\t}\n", "public static Clob toClob(Connection conn,Object value) throws PageException, SQLException {\n  if (value instanceof Clob)   return (Clob)value;\n  if (SystemUtil.JAVA_VERSION >= SystemUtil.JAVA_VERSION_1_6) {\n    Clob clob=conn.createClob();\n    clob.setString(1,Caster.toString(value));\n    return clob;\n  }\n  if (isOracle(conn)) {\n    Clob clob=OracleClob.createClob(conn,Caster.toString(value),null);\n    if (clob != null)     return clob;\n  }\n  return ClobImpl.toClob(value);\n}\n", "    public EqualsHelper append(int lhs, int rhs) {\n        if (isEqual) {\n            isEqual = (lhs == rhs);\n        }\n        return this;\n    }\n", "public static GeoTimeSerie fillticks(GeoTimeSerie gts,long location,long elevation,Object value,long[] ticks){\n  GeoTimeSerie filled=gts.clone();\n  if (null == value || GTSHelper.isBucketized(filled)) {\n    return filled;\n  }\n  long[] gticks=filled.values > 0 ? Arrays.copyOf(filled.ticks,filled.values) : new long[0];\n  Arrays.sort(gticks);\n  Arrays.sort(ticks);\n  int gtsidx=0;\n  int tickidx=0;\n  int nvalues=filled.values;\n  while (gtsidx < nvalues) {\n    long tick=gticks[gtsidx];\n    while (tickidx < ticks.length && ticks[tickidx] < tick) {\n      GTSHelper.setValue(filled,ticks[tickidx],location,elevation,value,false);\n      tickidx++;\n    }\n    gtsidx++;\n  }\n  while (tickidx < ticks.length) {\n    GTSHelper.setValue(filled,ticks[tickidx],location,elevation,value,false);\n    tickidx++;\n  }\n  return filled;\n}\n", "    public void destroyApp(boolean unconditional) {\n        synchronized (gameLock) {\n            if (game != null) {\n                game.destroy();\n            }\n        }\n    }\n", "    public int getHeaderFieldInt(String name, int Default) {\n        String value = getHeaderField(name);\n        try {\n            return Integer.parseInt(value);\n        } catch (Exception e) { }\n        return Default;\n    }\n", "protected void updateImageState() {\n        float viewWidth = getWidth();\n        float viewHeight = getHeight();\n\n        if ((int) viewWidth <= 0 || (int) viewHeight <= 0) {\n            return;\n        }\n\n        if (sourceBitmap != null) {\n            BitmapShader imageShader = new BitmapShader(sourceBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);\n            imagePaint.setShader(imageShader);\n\n            // Scale the bitmap using a matrix, ensuring that it always matches the view bounds.\n            float bitmapWidth = sourceBitmap.getWidth();\n            float bitmapHeight = sourceBitmap.getHeight();\n\n            float scaleFactor = (bitmapWidth < bitmapHeight) ? bitmapWidth : bitmapHeight;\n            float xScale = viewWidth / scaleFactor;\n            float yScale = viewHeight / scaleFactor;\n\n            // Translate image to center crop (if it is not a perfect square bitmap)\n            float dx = 0;\n            float dy = 0;\n\n            if (bitmapWidth > bitmapHeight) {\n                dx = (viewWidth - bitmapWidth * xScale) * 0.5f;\n            }\n            else if (bitmapHeight > bitmapWidth) {\n                dy = (viewHeight - bitmapHeight * yScale) * 0.5f;\n            }\n\n            matrix.set(null);\n            matrix.setScale(xScale, yScale);\n            matrix.postTranslate((dx + 0.5f), (dy + 0.5f));\n\n            imageShader.setLocalMatrix(matrix);\n            imageRectF.set(0, 0, viewWidth, viewHeight);\n        }\n        updateBackground();\n        invalidate();\n    }", "    public void clearMapping() {\n        _strategy = null;\n        _cols = Schemas.EMPTY_COLUMNS;\n        _idx = null;\n        _info.clear();\n        setResolve(MODE_MAPPING | MODE_MAPPING_INIT, false);\n    }\n", "public DErrorDetail(JFrame parent,Dialog.ModalityType modality,Throwable error){\n  super(parent,modality);\n  this.error=error;\n  initComponents();\n}\n", "    public void setBasicAuthentication(String username, String password) throws EncoderException {\n        Base64StringEncoder encoder = new Base64StringEncoder();\n        String login = username + \":\" + password;\n        String encoded_login = encoder.encode(login);\n        addRequestHeader(new Header(\"Authorization\", \"Basic \" + encoded_login));\n    }\n", "PaddedCell create ( File file , List < String > steps ) { return new PaddedCell ( file , this , steps ) ; }", "private void update ( ) { float anglePerSample = ( float ) ( NUM_ * Math . PI * mFrequency / mSampleRate ) ; mAnglePerSample = Complex . fromAngle ( anglePerSample ) ; }", "public void initialise ( ) throws Exception ;", "    public boolean isSpecific() {\n        if (getLast() == 0 ||  getFirst() == getLast()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n", "public void setQuery2(String query2) {\n\t\tif (query2.length() > MAX_QUERYX_SIZE) {\n\t\t\tthis.query2 = query2.substring(0, MAX_QUERYX_SIZE)\n\t\t\t\t\t.replace('|', '_');\n\t\t} else {\n\t\t\tthis.query2 = query2.replace('|', '_');\n\t\t}\n\t}", "private TerminationThread ( ) { super ( STR_ ) ; }", "public void setDescriptionVisible(boolean visible) {\n        if (visible) {\n            add(\"Center\", split);\n            split.setTopComponent(tableScroll);\n            split.setBottomComponent(descriptionScrollPane);\n            // restore the divider location\n            split.setDividerLocation(split.getHeight() - lastDescriptionHeight);\n        } else {\n            // save the size of the description pane to restore it later\n            lastDescriptionHeight = split.getHeight() - split.getDividerLocation();\n            remove(split);\n            add(\"Center\", tableScroll);\n        }\n        descriptionButton.setSelected(visible);\n        PropertySheetPanel.this.revalidate();\n    }", "Filter getFilter() throws InvalidSyntaxException {\n        if (filter == null && filterSpec != null) {\n            filter = eventEngine.getBundleContext().createFilter(filterSpec);\n        }\n        return filter;\n    }", "public void destroy ( ) { super . destroy ( ) ; }", "    public void updateNull(int columnIndex) throws SQLException {\n        notImplemented();\n    }\n", "    public boolean isKeyField() {\n        return keyField;\n    }\n", "public CharSetMap(){\n  String path;\n  try {\n    path=System.getProperty(\"user.home\");\n    if (path != null) {\n      path=path + File.separator + CHARSET_RESOURCE;\n      mappers[MAP_HOME]=loadPath(path);\n    }\n  }\n catch (  Exception x) {\n  }\n  try {\n    path=System.getProperty(\"java.home\") + File.separator + \"lib\"+ File.separator+ CHARSET_RESOURCE;\n    mappers[MAP_SYS]=loadPath(path);\n  }\n catch (  Exception x) {\n  }\n  mappers[MAP_JAR]=loadResource(\"/META-INF/\" + CHARSET_RESOURCE);\n  mappers[MAP_COM]=commonMapper;\n  mappers[MAP_CACHE]=new Hashtable<String,String>();\n}\n", "public void unsubscribe ( String clientHandle , final String topic , String invocationContext , String activityToken ) { MqttConnection client = getConnection ( clientHandle ) ; client . unsubscribe ( topic , invocationContext , activityToken ) ; }", "public static String encode(final String str) {\n        try {\n            return URLEncoder.encode(str, \"UTF-8\");\n        } catch (final Exception e) {\n            LOGGER.log(Level.WARN, \"Encodes str [\" + str + \"] failed\", e);\n\n            return str;\n        }\n    }", "    public void close() throws IOException{\n        handler.stop();\n        in.close();\n        out.close();\n        port.close();\n        in = null;\n        out = null;\n        port = null;\n        buf = null;\n    }\n", "public void clearBasicAuth ( ) { this . httpClient . getCredentialsProvider ( ) . clear ( ) ; }", "public void readData ( DataInput din ) throws IOException { status = din . readUnsignedShort ( ) ; events = din . readUnsignedShort ( ) ; }", "private Cookie _createFlashCookie(String name, String value, ExternalContext externalContext)\n    {\n        Cookie cookie = new Cookie(name, value);\n\n        cookie.setMaxAge(-1);\n        cookie.setPath(_getCookiePath(externalContext));\n        cookie.setSecure(externalContext.isSecure());\n        //cookie.setHttpOnly(true);\n        if (ServletSpecifications.isServlet30Available())\n        {\n            _Servlet30Utils.setCookieHttpOnly(cookie, true);\n        }\n        return cookie;\n    }", "public void write ( PrintWriter output , Janitor janitor ) { String name = source . getName ( ) ; int line = getCause ( ) . getStartLine ( ) ; int column = getCause ( ) . getStartColumn ( ) ; String sample = source . getSample ( line , column , janitor ) ; output . print ( name + STR_ + line + STR_ + getCause ( ) . getMessage ( ) ) ; if ( sample != null ) { output . println ( ) ; output . print ( sample ) ; output . println ( ) ; } }", "@Override\n\t@Transactional(enabled = false)\n\tpublic CommerceWarehouse createCommerceWarehouse(long commerceWarehouseId) {\n\t\treturn commerceWarehousePersistence.create(commerceWarehouseId);\n\t}", "    private void parseAuthentication(){\n        username = auth.substring(auth.indexOf(\"=\")+1, auth.indexOf(\":\"));\n        passwd = auth.substring(auth.indexOf(\":\")+1);\n    }\n", "public void initialize(UISearchResult sr){\n  super.initialize(sr);\n  RESULT=sr;\n  _mediaType=NamedMediaType.getFromExtension(getExtension());\n  addedOn=sr.getCreationTime() > 0 ? new Date(sr.getCreationTime()) : null;\n  actionsHolder=new SearchResultActionsHolder(sr);\n  name=new SearchResultNameHolder(sr);\n  seeds=RESULT.getSeeds() <= 0 || !(RESULT instanceof TorrentUISearchResult) ? \"\" : String.valueOf(RESULT.getSeeds());\n  icon=getIcon();\n  size=new SizeHolder(getSize());\n  source=new SourceHolder(RESULT);\n}\n", "public UrbansimCellBasedAccessibilityCSVWriterV2(String matsimOutputDirectory,String modeName){\n  try {\n    log.info(\"Initializing ...\");\n    accessibilityDataWriter=IOUtils.getBufferedWriter(matsimOutputDirectory + \"/\" + ACCESSIBILITY_INDICATORS+ \"_\"+ modeName+ \".csv\");\n    accessibilityDataWriter.write(\"x\" + \"\\t\" + \"y\"+ \"\\t\"+ \"accessibility\");\n    accessibilityDataWriter.newLine();\n    log.info(\"... done!\");\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    throw new RuntimeException(\"io not possible\");\n  }\n}\n", "private String combine(String parent, String child) {\n    if (parent.length() > 0) {\n      return parent.concat(\".\").concat(child);\n    } else {\n      return child;\n    }\n  }", "public static void terminate ( ) { final ToolboxLifecycleParticipant [ ] participants = getRegisteredTools ( ) ; Assert . isNotNull ( participants ) ; for ( int i = NUM_ ; i < participants . length ; i ++ ) { participants [ i ] . terminate ( ) ; } }", "public Class < ? > loadClass ( String name ) throws ClassNotFoundException { if ( bestCandidate != null ) { try { return bestCandidate . loadClass ( name ) ; } catch ( Throwable t ) { bestCandidate = null ; } } Throwable throwable = null ; Class < ? > clazz = null ; ClassLoadHelper loadHelper = null ; Iterator < ClassLoadHelper > iter = loadHelpers . iterator ( ) ; while ( iter . hasNext ( ) ) { loadHelper = iter . next ( ) ; try { clazz = loadHelper . loadClass ( name ) ; break ; } catch ( Throwable t ) { throwable = t ; } } if ( clazz == null ) { if ( throwable instanceof ClassNotFoundException ) { throw ( ClassNotFoundException ) throwable ; } else { throw new ClassNotFoundException ( String . format ( STR_ , name ) , throwable ) ; } } bestCandidate = loadHelper ; return clazz ; }", "public static int hash(int input)\n    {\n        int k1 = mixK1(input);\n        int h1 = mixH1(DEFAULT_SEED, k1);\n\n        return fmix(h1, SizeOf.SIZE_OF_INT);\n    }", "public IntervalleDate previousYear(){\n  Calendar lower=null;\n  if (lower_bound != null) {\n    lower=Calendar.getInstance();\n    lower.setTime(lower_bound);\n    lower.add(Calendar.YEAR,-1);\n  }\n  Calendar upper=null;\n  if (upper_bound != null) {\n    upper=Calendar.getInstance();\n    upper.setTime(upper_bound);\n    upper.add(Calendar.YEAR,-1);\n  }\n  return new IntervalleDate(lower.getTime(),upper.getTime());\n}\n", "private static PCalLocation NextLocOf ( PCalLocation loc , MappingObject [ ] [ ] map ) { if ( loc . getColumn ( ) + NUM_ < map [ loc . getLine ( ) ] . length ) { return new PCalLocation ( loc . getLine ( ) , loc . getColumn ( ) + NUM_ ) ; } for ( int i = ", "protected void reconnect(){\n  cancelReconnectionTimer();\n  connect();\n}\n", "    public String logon() {\n\n        // Attempt a successful authentication\n        LogonLogic logic = (LogonLogic) getBean(LOGIC_BEAN);\n        User user = logic.authenticate(username, password);\n        if (user != null) {\n            if (user.isConfirmed()) {\n                // Confirmed user, log him/her on\n                register(user);\n                if (isRememberMe()) {\n                    if (isRemember()) {\n                        remember(user);\n                    } else {\n                        forget(user);\n                    }\n                }\n                return AUTHENTICATED;\n            } else {\n                // Unconfirmed user, tell him/her to reply to the email\n                error(messages.getMessage(\"profile.unconfirmed\"));\n                return UNAUTHENTICATED;\n            }\n        }\n\n        // On unsuccessful authentication, tell the user to try again\n        error(messages.getMessage(\"profile.incorrect\"));\n        return null;\n\n    }\n", "public TitlePaneMenuButtonWindowNotFocusedState ( ) { super ( STR_ ) ; }", "public ListWithDefault < T > subList ( int fromIndex , int toIndex ) { return new ListWithDefault < T > ( delegate . subList ( fromIndex , toIndex ) , lazyDefaultValues , ( Closure ) initClosure . clone ( ) ) ; }", "public static int readAmount(InputStream is,byte[] buf,int offset,int length) throws IOException {\n  int read=0;\n  int len;\n  while (read < length && (len=is.read(buf,offset + read,length - read)) > 0) {\n    read+=len;\n  }\n  return read;\n}\n", "public static String hashToString(byte[] hash) {\n        StringBuilder buf = new StringBuilder();\n        for (byte b : hash) {\n            buf.append(HEX_CHARS[(b >> 4) & 0xF]);\n            buf.append(HEX_CHARS[b & 0xF]);\n        }\n        return buf.toString();\n    }", "public char[] getStringValueChunk(int nodeHandle, int chunkIndex,\n                                    int[] startAndLen)\n  {\n\n    // %TBD%\n    error(XMLMessages.createXMLMessage(XMLErrorResources.ER_METHOD_NOT_SUPPORTED, null));//\"getStringValueChunk not yet supported!\");\n\n    return null;\n  }", "\tpublic void markEnd(long endTime) {\n\t\tthis.endTime = endTime;\n\t}\n", "public void resetIndex(long index, long timestamp) {\n    currentOperation = OperationType.COMMAND;\n    operationIndex = index;\n    currentIndex = index;\n    currentTimestamp = timestamp;\n    setCommitIndex(index);\n    service.tick(new WallClockTimestamp(currentTimestamp));\n  }", "public boolean allItemsAvailable(){\n  return readCompleted.isDone();\n}\n", "public boolean isPostConstructCalled ( ) { return this . postConstructCalled ; }", "public String readString(int length) throws IOException {\n  byte[] array=new byte[length];\n  readFully(array);\n  String s=new String(array);\n  return s.trim();\n}\n", "public BermudanExercise ( final Date [ ] dates ) { this ( dates , BOOL_ ) ; }", "protected ProcessOutput invokeScript(String script)\n    {\n        File file=null;\n        try\n        {\n            //create temporary file\n            file=File.createTempFile(\"fax4j_\",\".vbs\");\n        }\n        catch(IOException exception)\n        {\n            throw new FaxException(\"Unable to create temporary vbscript file.\",exception);\n        }\n        file.deleteOnExit();\n        \n        //generate command string\n        StringBuilder buffer=new StringBuilder();\n        buffer.append(this.getVBSExePath());\n        buffer.append(\" \\\"\");\n        buffer.append(file.getAbsolutePath());\n        buffer.append(\"\\\"\");\n        String command=buffer.toString();\n\n        try\n        {\n            //write script to file\n            IOHelper.writeTextFile(script,file);\n        }\n        catch(IOException exception)\n        {\n            throw new FaxException(\"Unable to write vbscript to temporary file.\",exception);\n        }\n        \n        //get logger\n        Logger logger=this.getLogger();\n        logger.logDebug(new Object[]{\"Invoking command: \",command,\" script:\",Logger.SYSTEM_EOL,script},null);\n        \n        //execute command\n        ProcessOutput vbsOutput=ProcessExecutorHelper.executeProcess(this,command);\n        \n        //get exit code\n        int exitCode=vbsOutput.getExitCode();\n        \n        //delete temp file\n        boolean fileDeleted=file.delete();\n        logger.logDebug(new Object[]{\"Temp script file deleted: \",String.valueOf(fileDeleted)},null);\n        \n        if(exitCode!=0)\n        {\n            throw new FaxException(\"Error while invoking script, exit code: \"+exitCode+\" script output:\\n\"+vbsOutput.getOutputText()+\"\\nScript error:\\n\"+vbsOutput.getErrorText());\n        }\n        \n        return vbsOutput;\n    }", "public void marshall(StartCrawlerScheduleRequest startCrawlerScheduleRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (startCrawlerScheduleRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(startCrawlerScheduleRequest.getCrawlerName(), CRAWLERNAME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "    public CompilationMessage errVariableDeclMissingType(String varName) {\n        return this.formatCompilationMessage(\"Declaration of variable \\\"{0}\\\" does not specify\"\n            + \" the required type (either MessageType or ElementType).\", varName);\n    }\n", "public void attributeRemoved ( ServletContextAttributeEvent scae ) ;", "\tprotected void checkDrawData() throws InternalGuiException {\n\t\tif (g == null || scoreWidth == -1 || baseLine == -1) {\n\t\t\tString msg = \"prepareDraw() has not been called\";\n\t\t\tlogger.error(msg);\n\t\t\tthrow new InternalGuiException(msg);\n\t\t}\n\t}\n", "protected List < VideoDTO > extractVideosFromCursor ( Cursor cursor , int offset , int limit ) { List < VideoDTO > videos = new ArrayList < > ( ) ; int count = NUM_ ; int begin = offset > NUM_ ? offset : NUM_ ; if ( cursor . moveToPosition ( begin ) ) { do { VideoDTO video = extractOneVideoFromCursor ( cursor ) ; videos . add ( video ) ; count ++ ; if ( limit > NUM_ && count > limit ) { break ; } } while ( cursor . moveToNext ( ) ) ; } cursor . close ( ) ; return videos ; }", "public NameFileFilter ( String name ) { this ( name , null ) ; }", "        public void destroy() {\n            final JspFactory current = JspFactory.getDefaultFactory();\n            if ( current == this ) {\n                JspFactory.setDefaultFactory(this.original);\n            }\n        }\n", "public BaseField setupField(int iFieldSeq)\n    {\n        BaseField field = null;\n        if (iFieldSeq == 0)\n        {\n            field = new CounterField(this, ID, 8, null, null);\n            field.setHidden(true);\n        }\n        //if (iFieldSeq == 1)\n        //{\n        //  field = new RecordChangedField(this, LAST_CHANGED, Constants.DEFAULT_FIELD_LENGTH, null, null);\n        //  field.setHidden(true);\n        //}\n        //if (iFieldSeq == 2)\n        //{\n        //  field = new BooleanField(this, DELETED, Constants.DEFAULT_FIELD_LENGTH, null, new Boolean(false));\n        //  field.setHidden(true);\n        //}\n        if (iFieldSeq == 3)\n            field = new StringField(this, CODE, 16, null, null);\n        if (iFieldSeq == 4)\n            field = new StringField(this, NAME, 30, null, null);\n        if (iFieldSeq == 5)\n            field = new StringField(this, ADDRESS_LINE_1, 40, null, null);\n        if (iFieldSeq == 6)\n            field = new StringField(this, ADDRESS_LINE_2, 40, null, null);\n        if (iFieldSeq == 7)\n            field = new StringField(this, CITY_OR_TOWN, 15, null, null);\n        if (iFieldSeq == 8)\n            field = new StringField(this, STATE_OR_REGION, 15, null, null);\n        if (iFieldSeq == 9)\n            field = new StringField(this, POSTAL_CODE, 10, null, null);\n        if (iFieldSeq == 10)\n            field = new StringField(this, COUNTRY, 15, null, null);\n        if (iFieldSeq == 11)\n            field = new PhoneField(this, TEL, 24, null, null);\n        if (iFieldSeq == 12)\n            field = new FaxField(this, FAX, 24, null, null);\n        if (iFieldSeq == 13)\n            field = new EMailField(this, EMAIL, 40, null, null);\n        if (iFieldSeq == 14)\n            field = new URLField(this, WEB, 60, null, null);\n        if (iFieldSeq == 15)\n            field = new Person_DateEntered(this, DATE_ENTERED, Constants.DEFAULT_FIELD_LENGTH, null, null);\n        if (iFieldSeq == 16)\n            field = new DateField(this, DATE_CHANGED, Constants.DEFAULT_FIELD_LENGTH, null, null);\n        if (iFieldSeq == 17)\n            field = new ReferenceField(this, CHANGED_ID, Constants.DEFAULT_FIELD_LENGTH, null, null);\n        if (iFieldSeq == 18)\n            field = new MemoField(this, COMMENTS, Constants.DEFAULT_FIELD_LENGTH, null, null);\n        if (iFieldSeq == 19)\n            field = new UserField(this, USER_ID, Constants.DEFAULT_FIELD_LENGTH, null, null);\n        if (iFieldSeq == 20)\n            field = new StringField(this, PASSWORD, 16, null, null);\n        if (iFieldSeq == 21)\n            field = new StringField(this, NAME_SORT, 6, null, null);\n        if (iFieldSeq == 22)\n            field = new StringField(this, POSTAL_CODE_SORT, 5, null, null);\n        if (field == null)\n            field = super.setupField(iFieldSeq);\n        return field;\n    }", "public void remove(int position){\n  if (wishlistItems.size() > position) {\n    notifyItemRemoved(position);\n    wishlistItems.remove(position);\n  }\n else {\n    Timber.e(new RuntimeException(),\"Removing wishlist item at non existing position.\");\n  }\n}\n", "\tpublic Image getImage(){\n\t\t\n\t\tif(image==null)\n\t\t\tcreateImage();\n\t\treturn image;\n\t}\n", "  public void setInstances(Instances inst) throws Exception {\n    if (m_design) {\n      throw new Exception(\"This method is not to be used during design \"\n\t\t\t  +\"time. It is meant to be used if this \"\n\t\t\t  +\"bean is being used programatically as as \"\n\t\t\t  +\"stand alone component.\");\n    }\n    m_visualizeDataSet = inst;\n    PlotData2D pd1 = new PlotData2D(m_visualizeDataSet);\n    pd1.setPlotName(m_visualizeDataSet.relationName());\n    try {\n      m_visPanel.setMasterPlot(pd1);\n    } catch (Exception ex) {\n      System.err.println(\"Problem setting up \"\n\t\t\t +\"visualization (DataVisualizer)\");\n      ex.printStackTrace();\n    }\n  }\n", "@Override\n    public DataSet next() {\n        counter.incrementAndGet();\n\n        DataSet ds = new DataSet(baseFeatures, baseLabels);\n\n        return ds;\n    }", "public Position decodePosition(double time, Position receiver, SurfacePositionV0Msg msg, Position reference) {\n\t\tPosition ret = decodePosition(time, msg, reference);\n\t\tif (ret != null && receiver != null && !withinReasonableRange(receiver, ret)) {\n\t\t\tret.setReasonable(false);\n\t\t\tnum_reasonable = 0;\n\t\t}\n\t\treturn ret;\n\t}", "  private PointPlacemark findPoint(String name, boolean isPlace) {\n\tIterable<Renderable> points;\n\tif (isPlace) {\n\t  points = this.placesLayer.getRenderables();\n\t} else {\n\t  points = this.waypointsLayer.getRenderables();\n\t}\n\tfor (Renderable pp: points) {\n\t  if (pp instanceof gov.nasa.worldwind.render.PointPlacemark) {\n\t     if (name.compareTo(((PointPlacemark)pp).getLabelText()) == 0) {\n\t        return (PointPlacemark)pp;\n\t     }\n\t  }\n\t}\n\tPointPlacemark pp = null;\n\treturn pp;\n  }\n", "public boolean hasAggregationLevels(){\n  return aggregationLevels.size() > 0;\n}\n", "public double[] dataVector(V p) {\n    return strongEigenvectors.length > 0 ? times(strongEigenvectors, transposeTimes(strongEigenvectors, minusEquals(p.toArray(), centroid))) : EMPTY_VECTOR;\n  }", "  public void generateMethods() {\n    for (Iterator i = thisPkg.getContents().iterator(); i.hasNext(); ) {\n      Object o = i.next();\n\n      if (o instanceof Import) {\n        generateForImportedPackage((Import)o);\n      } else if (o instanceof javax.jmi.model.MofPackage) {\n        generateForPackage((javax.jmi.model.MofPackage)o);\n      } else if (o instanceof MofClass) {\n        generateForProxy((MofClass)o);\n      } else if (o instanceof Association) {\n        generateForAssociation((Association)o);\n      } else if (o instanceof DataType) {\n        DataType dt = (DataType)jmi.dereference((DataType)o);\n        if (jmi.isStruct(dt)) {\n          generateForStruct((StructureType)dt);\n        }\n      }\n    }\n  }\n", "public static Set<TypeDef> unrollHierarchy(TypeDef typeDef) {\n        if (OBJECT.equals(typeDef)) {\n            return new HashSet<>();\n        }\n        Set<TypeDef> hierarchy = new HashSet<>();\n        hierarchy.add(typeDef);\n        hierarchy.addAll(typeDef.getExtendsList().stream().flatMap(s -> unrollHierarchy(s.getDefinition()).stream()).collect(Collectors.toSet()));\n        return hierarchy;\n    }", "public boolean hasNext ( ) { return array . cursorHasNext ( cursorId ) ; }", "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return BEGIN_IN_BOTH;\ncase 3:\n  return OLD_STRING;\ncase 12:\nreturn END_IN_BOTH;\ndefault :\nreturn null;\n}\n}\n", "protected abstract Object doReceiveBlocking ( Object template , GigaSpace gigaSpace , long receiveTimeout ) throws DataAccessException ;", "public void init ( ) throws SourceException { mDeviceHandle = new DeviceHandle ( ) ; int result = LibUsb . open ( mDevice , mDeviceHandle ) ; if ( result != LibUsb . SUCCESS ) { mDeviceHandle = null ; throw new SourceException ( STR_ + STR_ + LibUsb . err", "public void onSplitBrainActive ( ActiveElectionEvent theEvent ) ;", "    public E get(int index) {\n        int size = getList().size();\n        if (index < size) {\n            // within bounds, get the object\n            E object = getList().get(index);\n            if (object == null) {\n                // item is a place holder, create new one, set and return\n                object = factory.create();\n                getList().set(index, object);\n                return object;\n            } else {\n                // good and ready to go\n                return object;\n            }\n        } else {\n            // we have to grow the list\n            for (int i = size; i < index; i++) {\n                getList().add(null);\n            }\n            // create our last object, set and return\n            E object = factory.create();\n            getList().add(object);\n            return object;\n        }\n    }\n", "public static void moveFile ( File srcFile , File destFile ) throws IOException { if ( srcFile == null ) { throw new NullPointerException ( STR_ ) ; } if ( destFile == null ) { throw new NullPointerException ( STR_ ) ; } if ( ! srcFile . exists ( ) ) { throw new FileNotFoundException ( STR_ + srcFile + STR_ ) ; } if ( srcFile . isDirectory ( ) ) { throw new IOException ( STR_ + srcFile + STR_ ) ; } if ( destFile . exists ( ) ) { throw new FileExistsException ( STR_ + destFile + STR_ ) ; } if ( destFile . isDirectory ( ) ) { throw new IOException ( STR_ + destFile + STR_ ) ; } boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete ( ) ) { FileUtils . deleteQuietly ( destFile ) ; throw new IOException ( STR_ + srcFile + STR_ + destFile + STR_ ) ; } } }", "public void findStronglyConnectedComponents(GraphType g, GraphToolkit<GraphType, EdgeType, VertexType> toolkit) {\n\n        // Perform the initial depth first search\n        DepthFirstSearch<GraphType, EdgeType, VertexType> initialDFS = new DepthFirstSearch<>(g);\n        if (m_vertexChooser != null) {\n            initialDFS.setVertexChooser(m_vertexChooser);\n        }\n        initialDFS.search();\n\n        // Create a transposed graph\n        Transpose<GraphType, EdgeType, VertexType> t = new Transpose<>();\n        GraphType transpose = t.transpose(g, toolkit);\n\n        // Create a set of vertices in the transposed graph,\n        // in descending order of finish time in the initial\n        // depth first search.\n        VisitationTimeComparator<VertexType> comparator = new VisitationTimeComparator<>(\n                initialDFS.getFinishTimeList(), VisitationTimeComparator.DESCENDING);\n        Set<VertexType> descendingByFinishTimeSet = new TreeSet<>(comparator);\n        Iterator<VertexType> i = transpose.vertexIterator();\n        while (i.hasNext()) {\n            descendingByFinishTimeSet.add(i.next());\n        }\n\n        // Create a SearchTreeBuilder for transposed DFS\n        SearchTreeBuilder<VertexType> searchTreeBuilder = new SearchTreeBuilder<>();\n\n        // Now perform a DFS on the transpose, choosing the vertices\n        // to visit in the main loop by descending finish time\n        final Iterator<VertexType> vertexIter = descendingByFinishTimeSet.iterator();\n        DepthFirstSearch<GraphType, EdgeType, VertexType> transposeDFS = new DepthFirstSearch<GraphType, EdgeType, VertexType>(\n                transpose) {\n            @Override\n            protected VertexType getNextSearchTreeRoot() {\n                while (vertexIter.hasNext()) {\n                    VertexType vertex = vertexIter.next();\n                    if (visitMe(vertex)) {\n                        return vertex;\n                    }\n                }\n                return null;\n            }\n        };\n        if (m_vertexChooser != null) {\n            transposeDFS.setVertexChooser(m_vertexChooser);\n        }\n        transposeDFS.setSearchTreeCallback(searchTreeBuilder);\n        transposeDFS.search();\n\n        // The search tree roots of the second DFS represent the\n        // strongly connected components. Note that we call copySearchTree()\n        // to make the returned search trees relative to the original\n        // graph, not the transposed graph (which would be very confusing).\n        Iterator<SearchTree<VertexType>> j = searchTreeBuilder.searchTreeIterator();\n        while (j.hasNext()) {\n            m_stronglyConnectedSearchTreeList.add(copySearchTree(j.next(), t));\n        }\n    }", "public static <T> List<DialogResponse<T>> toResponseList(T[] responses, T[] exclusions, T dflt) {\n        List<DialogResponse<T>> list = new ArrayList<>();\n        boolean forceDefault = dflt == null && responses.length == 1;\n\n        for (T response : responses) {\n            DialogResponse<T> rsp = new DialogResponse<>(response, response.toString(),\n                    exclusions != null && ArrayUtils.contains(exclusions, response), forceDefault || response.equals(dflt));\n            list.add(rsp);\n        }\n\n        return list;\n    }", "public static Payload create(String data) {\n    return create(ByteBufUtil.writeUtf8(ByteBufAllocator.DEFAULT, data), null);\n  }", "  public boolean getIsLandscape() throws TextException {\n    try {\n      return ((Boolean)getXPropertySet().getPropertyValue(\"IsLandscape\")).booleanValue();\n    }\n    catch(Exception exception) {\n      TextException textException = new TextException(exception.getMessage());\n      textException.initCause(exception);\n      throw textException;\n    }\n  }\n", "public boolean isVeryVerbose(){\n  return logger.isLoggable(Level.VERYVERBOSE);\n}\n", "    public int processedSize() {\n        return super.processedSize();\n    }\n", "private static boolean covers ( String [ ] sup , String [ ] sub ) { outer : for ( int i = sub . length ; i > NUM_ ; ) { String onm = sub [ -- i ] ; String ocls = sub [ -- i ] ; for ( int j = sup . length ; j > NUM_ ; ) { String nm = sup [ -- j ] ; String ", "  public void updateState() {\n    updateState(false);\n  }\n", "public <T extends Point2D>T inverse(double x,double y,T llp){\n  if (llp == null) {\n    llp=(T)new LatLonPoint.Double();\n  }\n  x-=wx;\n  y=hy - y;\n  double rho=Math.sqrt(x * x + y * y);\n  if (rho == 0) {\n    Debug.message(\"proj\",\"Orthographic.inverse: cente", "public void sendPacketToServer ( IPacket packet ) { checkClassAndSync ( packet . getClass ( ) ) ; clientOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . TOSERVER ) ; clientOutboundChannel . wr", "    public boolean shouldReportError(Entity entity) {\n        if (m_entity==null || !m_entity.equals(entity))\n            return true;\n        else {\n            boolean oldValue=m_currentEntityReportedError;\n            m_currentEntityReportedError=true;\n            return !oldValue;\n        }\n    }\n", "public static <T extends java.util.Date> T addMilliseconds(final T date, final int amount) {\r\n        return roll(date, amount, CalendarUnit.MILLISECOND);\r\n    }", "final void clearTransportVersion() {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.entry(this, tc, \"clearTransportVersion\");\n        getHdr2().setChoiceField(JsHdr2Access.TRANSPORTVERSION, JsHdr2Access.IS_TRANSPORTVERSION_EMPTY);\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.exit(this, tc, \"clearTransportVersion\");\n    }", "private void waitForRScriptInitialized() throws InterpreterException {\nsynchronized (rScriptInitializeNotifier) {\n    long startTime=System.nanoTime();\n    while (rScriptInitialized == false && rScriptRunning && System.nanoTime() - startTime < 10L * 1000 * 1000000) {\n      try {\n        rScriptInitializeNotifier.wait(1000);\n      }\n catch (      InterruptedException e) {\n        logger.error(e.getMessage(),e);\n      }\n    }\n  }\n  String errorMessage=\"\";\n  try {\n    initialOutput.flush();\n    errorMessage=new String(initialOutput.toByteArray());\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n  if (rScriptInitialized == false) {\n    throw new InterpreterException(\"sparkr is not responding \" + errorMessage);\n  }\n}\n", "    public ReusableStringBuffer append(String s) {\n\tif (s == null) {\n\t    s = String.valueOf(s);\n\t}\n\n        int newLength = s.length() + length;\n        if(newLength > value.length) {\n            expandCapacity(newLength);\n        }\n\n        s.getChars(0, s.length(), value, length);\n        setLength(newLength);\n\n        return this;\n    }   \n", "private boolean isEmpty(String text){\n  return text == null || text.length() == 0;\n}\n", "public static Long decodeLongObj(byte[] src, int srcOffset)\r\n        throws CorruptEncodingException\r\n    {\r\n        try {\r\n            int b = src[srcOffset];\r\n            if (b == NULL_BYTE_HIGH || b == NULL_BYTE_LOW) {\r\n                return null;\r\n            }\r\n            return decodeLong(src, srcOffset + 1);\r\n        } catch (IndexOutOfBoundsException e) {\r\n            throw new CorruptEncodingException(null, e);\r\n        }\r\n    }", "public static Session getSession(int dbId, long sessionId) {\n\n        Database db = (Database) databaseIDMap.get(dbId);\n\n        return db == null ? null\n                          : db.sessionManager.getSession(sessionId);\n    }", "protected AbstractAnalysisFactory(Map<String,String> args){\n  originalArgs=Collections.unmodifiableMap(new HashMap<>(args));\n  String version=get(args,LUCENE_MATCH_VERSION_PARAM);\n  if (version == null) {\n    luceneMatchVersion=Version.LATEST;\n  }\n else {\n    try {\n      luceneMatchVersion=Version.parseLeniently(version);\n    }\n catch (    ParseException pe) {\n      throw new IllegalArgumentException(pe);\n    }\n  }\n  args.remove(CLASS_NAME);\n}\n", "\tprotected int getNumSensorValues(String sensor) {\n\t\tif (mClient.connected) {\n\t\t\treturn mClient.getNumSensorValues(sensor);\n\t\t} else {\n\t\t\treturn 0;//android.hardware.Sensors.getNumSensorValues(sensor);\n\t\t}\n\t}\n", "    public void setText(String[] text) {\n        this.text = text;\n        textSet = true;\n    }\n", "public boolean isDeletedByOwnTxn ( ) { return e . isDeletedByOwnTxn ( ) ; }", "private synchronized void writeToOutputStream(int oneByte){\n  if (mClosed) {\n    return;\n  }\n  try {\n    mOutputStream.write(oneByte);\n    reportDecodedSizeIfApplicable();\n  }\n catch (  IOException e) {\n    handleIOExceptionWritingToStream(e);\n  }\n}\n", "private static StreamTokenizer createTokenizer ( String s ) { StreamTokenizer st = new StreamTokenizer ( new StringReader ( s ) ) ; st . resetSyntax ( ) ; st . wordChars ( STR_ , STR_ ) ; st . wordChars ( STR_ , STR_ ) ; st . wordChars ( STR_ , STR_ ) ; st . wordChars ( STR_ , STR_ ) ; st . wordChars ( STR_ , STR_ ) ; st . wordChars ( STR_ , STR_ ) ; st . wordChars ( NUM_ + NUM_ , NUM_ ) ; st . whitespaceChars ( NUM_ , STR_ ) ; st . lowerCaseMode ( BOOL_ ) ; st . ordinaryChar ( STR_ ) ; st . slashSlashComments ( BOOL_ ) ; st . slashStarComments ( BOOL_ ) ; return st ; }", "@Override public double classifyInstance(Instance instance){\n  return m_ClassValue;\n}\n", "public void SwitchTo ( int lexState ) { if ( lexState >= NUM_ || lexState < NUM_ ) throw new TokenMgrError ( STR_ + lexState + STR_ , TokenMgrError . INVALID_LEXICAL_STATE ) ; else curLexState = lexState ; }", "protected String getElementName(String attributeName) {\n\n        if (attributeName.contains(\"/\")) {\n            return attributeName.substring(attributeName.lastIndexOf(\"/\") + 1);\n        }\n        return attributeName;\n    }", "List<String> generateVariants(){\n  String prefix=formatPrefix();\n  String suffix=formatSuffix();\n  ArrayList<String> variants=new ArrayList<>();\n  if (inputs.length > 0) {\n    for (    String var : recurseVariants(0)) {\n      variants.add(prefix + \", \" + var+ suffix);\n    }\n  }\n else {\n    assert inputs.length == 0;\n    variants.add(prefix + suffix);\n  }\n  return variants;\n}\n", "static public boolean isZero(float value,float tolerance){\n  return Math.abs(value) <= tolerance;\n}\n", "@Indexable(type = IndexableType.DELETE)\n\t@Override\n\tpublic CommerceSubscriptionEntry deleteCommerceSubscriptionEntry(\n\t\tCommerceSubscriptionEntry commerceSubscriptionEntry) {\n\t\treturn commerceSubscriptionEntryPersistence.remove(commerceSubscriptionEntry);\n\t}", "public boolean contains(String str){\n  return (bList.contains(str));\n}\n", "public synchronized void removeRecentItem(T item){\n  item=fromString(toString(item));\n  m_RecentItems.remove(item);\n  if (m_IgnoreChanges)   return;\n  writeProps();\n  updateMenu();\n}\n", "  public String getTaskPriority(String aTaskIdorName){\n\t\t\tString taskPriority = getTaskByIdOrName(aTaskIdorName).getPriority();\n\t\t\treturn taskPriority;\n  }\n", "public void addString(String s,String encoding){\n  if (encoding == null || encoding.equals(\"ISO-8859-1\")) {\n    addString(s);\n    return;\n  }\n  byte[] bytes=null;\n  try {\n    bytes=s.getBytes(encoding);\n  }\n catch (  UnsupportedEncodingException e) {\n    addString(s);\n    return;\n  }\n  int len=bytes.length;\n  if (len + _length > _capacity)   ensureCapacity(_length + len);\n  for (int i=0; i < len; i++)   _buffer[_length++]=bytes[i];\n}\n", "public StepBreakpointsRemovedReply ( final int packetId , final int errorCode , final List < Pair < RelocatedAddress , Integer > > addresses ) { super ( packetId , errorCode , addresses ) ; }", "@NotNull\n    public Optional<T> reduce(@NotNull BiFunction<T, T, T> accumulator) {\n        boolean foundAny = false;\n        T result = null;\n        while (iterator.hasNext()) {\n            final T value = iterator.next();\n            if (!foundAny) {\n                foundAny = true;\n                result = value;\n            } else {\n                result = accumulator.apply(result, value);\n            }\n        }\n        return foundAny ? Optional.of(result) : Optional.<T>empty();\n    }", "public void forget(){\n  super.forget();\n  firstCapitalized.clear();\n  notFirstCapitalized.clear();\n}\n", "public Collection<Class<? extends Closeable>> shardServices(){\n  return Collections.emptyList();\n}", "boolean onPrintDialog ( boolean has_selection , CefPrintDialogCallback callback ) ;", "public void removePendingFifoSearchObject ( boolean disableInitialSearch ) { _pendingFifoSearch = null ; if ( disableInitialSearch ) resetInitialFifoSearchActive ( ) ; }", "public void removeEventListener(OneToOneFileTransferListener listener) throws RcsServiceNotAvailableException, RcsGenericException {\n  if (mApi == null) {\n    throw new RcsServiceNotAvailableException();\n  }\n  try {\n    WeakReference<IOneToOneFileTransferListener> weakRef=mOneToOneFileTransferListeners.remove(listener);\n    if (weakRef == null) {\n      return;\n    }\n    IOneToOneFileTransferListener rcsListener=weakRef.get();\n    if (rcsListener != null) {\n      mApi.removeEventListener2(rcsListener);\n    }\n  }\n catch (  Exception e) {\n    RcsIllegalArgumentException.assertException(e);\n    throw new RcsGenericException(e);\n  }\n}\n", "private void traceAction ( Bundle data ) { if ( traceCallback != null ) { String severity = data . getString ( MqttServiceConstants . CALLBACK_TRACE_SEVERITY ) ; String message = data . getString ( MqttServiceConstants . CALLBACK_ERROR_MESSAGE ) ; String tag = data . getString ( MqttServiceConstants . CALLBACK_TRACE_TAG ) ; if ( MqttServiceConstants . TRACE_DEBUG . equals ( severity ) ) traceCallback . traceDebug ( tag , message ) ; else if ( MqttServiceConstants . TRACE_ERROR . equals ( severity ) ) traceCallback . traceError ( tag , message ) ; else { Exception e = ( Exception ) data . getSerializable ( MqttServiceConstants . CALLBACK_EXCEPTION ) ; traceCallback . traceException ( tag , message , e ) ; } } }", "void removeSuiteTab ( ITab tab ) ;", "public OIDCException ( final String message , final Throwable cause ) { super ( message , cause ) ; }", "public AppServicePlanInner update(String resourceGroupName, String name, AppServicePlanPatchResource appServicePlan) {\n        return updateWithServiceResponseAsync(resourceGroupName, name, appServicePlan).toBlocking().single().body();\n    }", "void estimateDropCell(int originX,int originY,int spanX,int spanY,int[] result){\n  final int countX=mCountX;\n  final int countY=mCountY;\n  pointToCellRounded(originX,originY,result);\n  int rightOverhang=result[0] + spanX - countX;\n  if (rightOverhang > 0)", "public void nodeChanged(boolean save,int keyID,String name,String description,boolean isSummary,String imageIndicator){\n  log.config(\"Save=\" + save + \", KeyID=\"+ keyID+ \", Name=\"+ name+ \", Description=\"+ description+ \", IsSummary=\"+ isSummary+ \", ImageInd", "    public int getClassSize(Item classAssignedID) {\n        IntegerItem returnVal = new IntegerItem(\"COUNT(*)\", \"\", false);\n\n        String qs =\n            \"SELECT \" + returnVal.getFieldName()\n                + \" FROM \" + ATTENDSTABLE\n                + \" WHERE \" + classAssignedID.getFieldName() + \" = \" + classAssignedID.getDBFormattedString(attendsTable)\n                + \";\";\n\n        ArrayList al =\n            classTable.performDatabaseQuery(qs, new Item[] { returnVal});\n\n        for (int i = 0; i < al.size(); i++) {\n            Hashtable result = (Hashtable) al.get(i);\n            returnVal =\n                new IntegerItem(returnVal.getFieldName(), (String) result.get(returnVal.getFieldName()), false);\n        }\n\n        return ((Integer) returnVal.getObject()).intValue();\n\n    }\n", "public void rollbackLinkBlockSnapshotSessionTarget(URI systemURI,URI snapSessionURI,URI snapshotURI,String stepId){\n  BlockSnapshotSession snapSession=_dbClient.queryObject(BlockSnapshotSession.class,snapSessionURI);\n  StringSet linkedTargets=snapSession.getLinkedTargets();\n  if ((linkedTargets == null) || (!linkedTargets.contains(snapshotURI.toString()))) {\n    unlinkBlockSnapshotSessionTarget(systemURI,snapSessionURI,snapshotURI,Boolean.TRUE,stepId);\n  }\n else {\n    WorkflowStepCompleter.stepSucceded(stepId);\n  }\n}\n", "@Override public boolean equals(Object obj){\n  if (obj == this) {\n    return true;\n  }\n  if (!(obj instanceof ArrowNeedle)) {\n    return false;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  ArrowNeedle that=(ArrowNeedle)obj;\n  if (this.isArrowAtTop != that.isArrowAtTop) {\n    return false;\n  }\n  return true;\n}\n", "public static Object loadFile ( String file ) { try { requireLoad ( ) ; if ( supported ( ) ) { ScriptLoader . getScriptDirByType ( STR_ ) . mkdirs ( ) ; if ( file . contains ( STR_ ) ) { return ScriptLoader . loadSingle ( STR_ , engine , file ) ; } else { return ScriptLoader . loadModule ( STR_ , engine , file ) ; } } } catch ( Exception e ) { Toast . log ( ) . error ( STR_ + e ) ; Toast . log ( ) . exception ( e ) ; } return null ; }", "public void endDocument()\r\n            throws SAXException {\r\n        try {\r\n            out.flush();\r\n            logger.debug(\"[Freezehandler]: End parsing of pom file\");\r\n        } catch (IOException e) {\r\n            throw new SAXException(\"I/O error\", e);\r\n        }\r\n    }", "  public Map getModels() {\n    if (models == null) {\n      models = new HashMap();\n    }\n\n    return models;\n  }\n", "\tpublic void setAnimateOnShow(boolean animate) {\n\t\tif (animate) {\n\t\t\tonShowType = null;\n\t\t}\n\t\telse {\n\t\t\tonShowType = JSONBoolean.getInstance(false);\n\t\t}\n\t}\n", "    public void setZoom(float min, float max) {\n        if (min <= 0 && max < 0)\n            return;\n        PdfDictionary usage = getUsage();\n        PdfDictionary dic = new PdfDictionary();\n        if (min > 0)\n            dic.put(PdfName.MIN, new PdfNumber(min));\n        if (max >= 0)\n            dic.put(PdfName.MAX, new PdfNumber(max));\n        usage.put(PdfName.ZOOM, dic);\n    }\n", "public void sendPacketToAllAroundPoint ( IPacket packet , TargetPoint tp ) { checkClassAndSync ( packet . getClass ( ) ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . ALLAROUNDPOINT ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGETARGS ) . set ( tp ) ; serverOutboundChannel . writeOutbound ( packet ) ; isCurrentlySendingSemaphor = BOOL_ ; }", "private String createAlias(PAttr attr) {\n\n        // This is a simple property -> should not create an alias\n        if (attr instanceof AIdAttr)\n            return ((AIdAttr) attr).getIdentifier().getText().trim();\n\n        // In the other case, we have a compound property -> must create an alias (or reuse an existing one) and return the alias name to the property path\n\n        // Loop through all parts and create aliasses along the way.\n        List<String> propertyParts = getPropertyParts(attr);\n        String currentPropertyPath = \"\"; // the current property path\n        String currentAlias = \"\";\n        for (int i = 0; i < propertyParts.size() - 1; i++) { // last part is the final property itself.. must not create an alias for that one\n\n            String currentPropertyPart = propertyParts.get(i);\n            currentPropertyPath += currentPropertyPart;\n\n            if (createdAliasses.containsKey(currentPropertyPath)) // already have an alias\n                currentAlias = createdAliasses.get(currentPropertyPath);\n            else {\n\n                String newAlias = currentAlias + currentPropertyPart + \"01\";\n                criteria = criteria.createAlias((currentAlias.length() == 0 ? \"\" :(currentAlias + \".\")) + currentPropertyPart, newAlias);\n                createdAliasses.put(currentPropertyPath, newAlias);\n                currentAlias = newAlias;\n            }\n\n            currentPropertyPath += \".\";\n        }\n\n        String lastPropertyPart = propertyParts.get(propertyParts.size()-1); // Last (missing) part of the property path.\n        return currentAlias.length() == 0 ? lastPropertyPart : currentAlias + \".\" + lastPropertyPart;\n    }", "private static String tryHashStringSha256(Context context,String input){\n  String salt=createSalt(context);\n  try {\n    MessageDigest hash=MessageDigest.getInstance(\"SHA-256\");\n    hash.reset();\n    hash.update(input.getBytes());\n    hash.update(salt.getBytes());\n    byte[] hashedBytes=hash.digest();\n    return bytesToHex(hashedBytes);\n  }\n catch (  NoSuchAlgorithmException e) {\n    return input;\n  }\n}\n", "private void addToTree(int node_ID,int parent_ID,int seqNo,boolean onBar){\n  MTreeNode child=getNodeDetail(node_ID,parent_ID,seqNo,onBar);\n  if (child == null)   return;\n  MTreeNode parent=null;\n  if (m_root != null)   parent=m_root.findNode(parent_ID);\n  if (parent != null && parent.getAllowsChildren()) {\n    parent.add(child);\n    if (m_buffer.size() > 0)     checkBuffer(child);\n  }\n else   m_buffer.add(child);\n}\n", "public void getChildren(String path, boolean watch, ChildrenCallback cb,\n            Object ctx) {\n        verbotenThreadCheck();\n        getChildren(path, watch ? watchManager.defaultWatcher : null, cb, ctx);\n    }", "private void computeRange(int arc,int[][] est_heat){\n  double damage_by_bracket[]={0.0,0.0,0.0,0.0};\n  double heat_by_bracket[]={0,0,0,0};\n  long_range=MAX_RANGE - 1;\n  int bracket_start, bracket_end;\n  while ((damages[arc][long_range] == 0.0) && (long_range >= 4)) {\n    long_range--;\n  }\n  rd_bracket=long_range / 4;\n  long_range=3 * rd_bracket;\n  bracket_start=0;\n  bracket_end=rd_bracket;\n  for (int cur_bracket=RANGE_SHORT; cur_bracket <= RANGE_LONG; cur_bracket++) {\nswitch (cur_bracket) {\ncase RANGE_SHORT:\n      bracket_start=(entity instanceof Infantry ? 0 : 1);\n    bracket_end=rd_bracket;\n  break;\ncase RANGE_MEDIUM:\nbracket_start=rd_bracket + 1;\nbracket_end=2 * rd_bracket;\nbreak;\ncase RANGE_LONG:\nbracket_start=(2 * rd_bracket) + 1;\nbracket_end=Math.min(long_range,MAX_RANGE - 1);\nbreak;\n}\nfor (int cur_range=bracket_start; cur_range <= bracket_end; cur_range++) {\ndamage_by_bracket[cur_bracket]+=damages[arc][cur_range];\ndamage_by_bracket[RANGE_ALL]+=damages[arc][cur_range];\nheat_by_bracket[cur_bracket]+=est_heat[arc][cur_range];\nheat_by_bracket[RANGE_ALL]+=est_heat[arc][cur_range];\n}\n}\nfor (int cur_range=RANGE_SHORT; cur_range <= RANGE_LONG; cur_range++) {\nif ((damages[arc][0] != 0.0) && (cur_range == RANGE_SHORT)) {\ndamage_by_bracket[cur_range]/=(rd_bracket + 1);\nheat_by_bracket[cur_range]/=(rd_bracket + 1);\n}\n else {\ndamage_by_bracket[cur_range]/=rd_bracket;\nheat_by_bracket[cur_range]/=rd_bracket;\n}\n}\ndamage_by_bracket[RANGE_ALL]/=long_range;\nheat_by_bracket[RANGE_ALL]/=long_range;\nrange_damages=damage_by_bracket;\nfor (int cur_bracket=RANGE_SHORT; cur_bracket <= RANGE_ALL; cur_bracket++) {\nheat_estimates[cur_bracket]=(int)heat_by_bracket[cur_bracket];\n}\nrange=RANGE_SHORT;\nfor (int cur_bracket=RANGE_SHORT; cur_bracket <= RANGE_ALL; cur_bracket++) {\nif (range_damages[cur_bracket] > range_damages[range]) {\nrange=cur_bracket;\n}\n}\nheat_at_range=heat_estimates[range];\n}\n", "\tpublic void setCurrentPage(TextField field) {\n\t\tif (field == null)\n\t\t\tthrow new IllegalArgumentException(\"You must provided a non null currentPage textfield\");\n\t\tcurrentPage = field;\n\t\tcurrentPage.setDocument(new StringDocument() {\n\t\t\tpublic String getText() {\n\t\t\t\tif (model != null)\n\t\t\t\t\treturn (model.getPageIndex()+1)+\"\";\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\tpublic void setText(String text) {\n\t\t\t\tint value;\n\t\t\t\ttry {\n\t\t\t\t\tvalue = Integer.parseInt(text);\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (model != null) model.setPageIndex(value-1);\n\t\t\t}\n\t\t});\t\t\n\t\tfield.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t// no-op but allows for interaction\n\t\t\t}\n\n\t\t});\n\t\tfireChanged();\n\t}\n", "private void readApps(XmlPullParser parser,Set<String> apps) throws XmlPullParserException, IOException {\n  while (parser.next() != XmlPullParser.END_TAG) {\n    if (parser.getEventType() != XmlPullParser.START_TAG) {\n      continue;\n    }\n    String name=parser.getName();\n    if (TAG_APP.equals(name)) {\n      String packageName=parser.getAttributeValue(null,ATTRIBUTE_PACKAGE_NAME);\n      if (packageName != null) {\n        apps.add(packageName);\n      }\n      skipCurrentTag(parser);\n    }\n  }\n}\n", "\tpublic String getFilter() {\n\t\tif (fFilteredList == null) {\n\t\t\treturn fFilter;\n\t\t} else {\n\t\t\treturn fFilteredList.getFilter();\n\t\t}\n\t}\n", "    public void setTTL(byte ttl) throws IllegalArgumentException {\n        if (ttl < 0)\n            throw new IllegalArgumentException(\"invalid TTL: \"+ttl);\n        this.ttl = ttl;\n    }\n", "private synchronized IMqttToken removeMqttToken ( Bundle data ) { String activityToken = data . getString ( MqttServiceConstants . CALLBACK_ACTIVITY_TOKEN ) ; if ( activityToken != null ) { int tokenNumber = Integer . parseInt ( activityToken ) ; IMqttTok", "private String join(String[] s,String delimiter){\n  StringBuffer buffer=new StringBuffer();\n  for (int i=0; i < s.length; i++) {\n    buffer.append(\"'\");\n    buffer.append(s[i]);\n    buffer.append(\"'\");\n    if (i < s.length - 1) {\n      buffer.append(delimiter);\n    }\n  }\n  return buffer.toString();\n}\n", "public boolean onDelete()\n    {\n        if (this.getEditing() == false)\n        {   // Can't delete on a disabled grid.\n            String strError = \"Can't Delete from disabled grid\";\n            if (this.getTask() != null)\n                if (this.getTask().getApplication() != null)\n                    strError = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.ERROR_RESOURCE, true).getString(strError);\n            this.displayError(strError);\n            return false;\n        }\n        return super.onDelete();\n    }", "public void removeDownload(DownloadInfoRunnable downloadInfoRunnable){\n  mCompletedList.remove(downloadInfoRunnable);\n}\n", "public void removeMapping(String virtual) throws ExpressionException, SecurityException {\n  checkWriteAccess();\n  _removeMapping(virtual);\n}\n", "public static long copy(Reader input, Writer output) throws IOException {\n    char[] buffer = new char[DefaultBufferSize];\n    long count = 0;\n    int n = 0;\n    while (Eof != (n = input.read(buffer))) {\n      output.write(buffer, 0, n);\n      count += n;\n    }\n    return count;\n  }", "private View fillSpecific(int position,int top){\n  if (DEBUG)   Log.i(TAG,\"fillSpecific() position: \" + position + \" top: \"+ top+ M_FIRST_POSITION+ mFirstPosition);\n  final int numColumns=mNumColumns;\n  int motionRowStart;\n  int motionRowEnd=-1;\n  if (!mStackFromBottom) {\n    motionRowStart=position - (position % numColumns);\n  }\n else {\n    final int invertedSelection=mItemCount - 1 - position;\n    motionRowEnd=mItemCount - 1 - (invertedSelection - (invertedSelection % numColumns));\n    motionRowStart=Math.max(0,motionRowEnd - numColumns + 1);\n  }\n  final View temp=makeRow(mStackFromBottom ? motionRowEnd : motionRowStart,top,true);\n  mFirstPosition=motionRowStart;\n  final View referenceView=mReferenceView;\n  if (referenceView == null) {\n    return null;\n  }\n  final int verticalSpacing=mVerticalSpacing;\n  View above;\n  View below;\n  if (!mStackFromBottom) {\n    above=fillUp(motionRowStart - numColumns,referenceView.getTop() - verticalSpacing);\n    adjustViewsUpOrDown();\n    below=fillDown(motionRowStart + numColumns,referenceView.getBottom() + verticalSpacing);\n    final int childCount=getChildCount();\n    if (childCount > 0) {\n      correctTooHigh(numColumns,verticalSpacing,childCount);\n    }\n  }\n else {\n    below=fillDown(motionRowEnd + numColumns,referenceView.getBottom() + verticalSpacing);\n    adjustViewsUpOrDown();\n    above=fillUp(motionRowStart - 1,referenceView.getTop() - verticalSpacing);\n    final int childCount=getChildCount();\n    if (childCount > 0) {\n      correctTooLow(numColumns,verticalSpacing,childCount);\n    }\n  }\n  if (temp != null) {\n    return temp;\n  }\n else   if (above != null) {\n    return above;\n  }\n else {\n    return below;\n  }\n}\n", "public void setScalingPlans(java.util.Collection<ScalingPlan> scalingPlans) {\n        if (scalingPlans == null) {\n            this.scalingPlans = null;\n            return;\n        }\n\n        this.scalingPlans = new java.util.ArrayList<ScalingPlan>(scalingPlans);\n    }", "public void setNeedleSize(final NeedleSize SIZE) {\n        if (null == needleSize) {\n            _needleSize = null == SIZE ? NeedleSize.STANDARD : SIZE;\n            fireUpdateEvent(RESIZE_EVENT);\n        } else {\n            needleSize.set(SIZE);\n        }\n    }", "protected void storeBuffer ( ) { if ( buffer != null && buffer . length ( ) > insertStatement . length ( ) ) { if ( ! insertStatement . isEmpty ( ) ) { this . buffer . append ( STR_ ) ; } bufferList . add ( buffer ) ; } this . buffer = new StringBuilder ( ) ; this . buffer . append ( insertStatement ) ; }", "public TungstenProperties createSimpleRuntimeWith2Services ( ) throws Exception { PipelineConfigBuilder builder = new PipelineConfigBuilder ( ) ; builder . setProperty ( ReplicatorConf . SERVICE_NAME , STR_ ) ; builder . setRole ( STR_ ) ; builder . addPi", "@BetaApi\n  public final AggregatedListNodeGroupsPagedResponse aggregatedListNodeGroups(ProjectName project) {\n    AggregatedListNodeGroupsHttpRequest request =\n        AggregatedListNodeGroupsHttpRequest.newBuilder()\n            .setProject(project == null ? null : project.toString())\n            .build();\n    return aggregatedListNodeGroups(request);\n  }", "public CmsResource buildResource() {\n\n        return new CmsResource(\n            m_structureId,\n            m_resourceId,\n            m_rootPath,\n            m_type,\n            m_flags,\n            m_projectLastModified,\n            m_state,\n            m_dateCreated,\n            m_userCreated,\n            m_dateLastModified,\n            m_userLastModified,\n            m_dateReleased,\n            m_dateExpired,\n            m_length,\n            m_flags,\n            m_dateContent,\n            m_version);\n    }", "private void _cleanChildren() {\n        //bStatsTreeNeedsUpdate = true;\n        if (children != null) {\n            Iterator values = children.values().iterator();\n\n            while (values.hasNext()) {\n                ModuleItem remMI = (ModuleItem) values.next();\n                remMI.getInstance().cleanup();\n\n                //_cleanMBean(remMI);\n                remMI._cleanChildren();\n                remMI = null;\n            }\n\n            children.clear();\n        }\n    }", "  protected BindingCreator getBindingCreator(JComponent component) {\n    // PENDING: implement better lookup...\n    BindingCreator creator =\n      (BindingCreator) getBindingMap().get(component.getClass());\n    if (creator == null) {\n      creator = findByAssignable(component.getClass());\n    }\n    return creator;\n  }\n", "public void addAll(final Collection<Sensor> sensors){\n  Set<Sensor> oldSelection=new HashSet<Sensor>(selection);\n  boolean rv=selection.addAll(sensors);\n  if (rv) {\n    fireSelectionChanged(oldSelection,selection);\n  }\n}\n", "private static void reflect(Tuple2d p, Tuple2d base, double a, double b) {\n        double x = a * (p.x - base.x) + b * (p.y - base.y) + base.x;\n        double y = b * (p.x - base.x) - a * (p.y - base.y) + base.y;\n        p.x = x;\n        p.y = y;\n    }", "protected Float dpiResolution(TermResolution spec)\n    {\n        float nval = spec.getValue();\n        TermLength.Unit unit = spec.getUnit();\n        \n        switch (unit)\n        {\n            case dpi:\n                return nval;\n            case dpcm:\n                return nval * 2.54f;\n            case dppx:\n                return nval * getResolution();\n            default:\n                return null;\n        }\n    }", "public static Builder createBuilder ( Header header , WritableFontData data ) { return new Builder ( header , data ) ; }", "public static int hash(double value){\n  long bits=Double.doubleToLongBits(value);\n  return (int)(bits ^ (bits >>> 32));\n}", "    public void setStopClasses(ArrayList stopClasses) {\n\n        if (this.stopClasses == null) {\n            this.stopClasses = new ArrayList();\n        }\n\n        this.stopClasses.addAll(stopClasses);\n    }\n", "    public boolean equals(OS os) {\n        return (os.name == this.name && os.arch == this.arch);\n    }\n", "public final void sample(){\n  long totalCount=_totalCount.get();\n  _delta=totalCount - _lastTotal;\n  _lastTotal=totalCount;\n}", "private Map<String, String> getLocalIssueMap(Map<Locale, Map<String, String>> base, Locale locale) {\n\n        Map<String, String> result = base.get(locale);\n        if (result == null) {\n            result = new HashMap<String, String>();\n            base.put(locale, result);\n        }\n        return result;\n    }", "private ReplDBMSEvent filter ( FilterVerificationHelper filterHelper , ReplDBMSEvent e ) throws ReplicatorException , InterruptedException { ReplDBMSEvent e2 = filterHelper . filter ( e ) ; return e2 ; }", "public void info(CharSequence info) {\n        if (StringUtils.isNotEmpty(info)) {\n            msg.printMessage(Diagnostic.Kind.NOTE, Consts.PREFIX_OF_LOGGER + info);\n        }\n    }", "public static Object convert(String str, Class<?> type) throws Exception {\n        Object value;\n        if (int.class.equals(type) || Integer.class.equals(type))\n            value = Integer.parseInt(str);\n        else if (boolean.class.equals(type) || Boolean.class.equals(type))\n            value = Boolean.parseBoolean(str);\n        else if (long.class.equals(type) || Long.class.equals(type))\n            value = Long.parseLong(str);\n        else if (short.class.equals(type) || Short.class.equals(type))\n            value = Short.parseShort(str);\n        else if (byte.class.equals(type) || Byte.class.equals(type))\n            value = Byte.parseByte(str);\n        else if (double.class.equals(type) || Double.class.equals(type))\n            value = Double.parseDouble(str);\n        else if (float.class.equals(type) || Float.class.equals(type))\n            value = Float.parseFloat(str);\n        else if (char.class.equals(type) || Character.class.equals(type))\n            value = str.charAt(0);\n        else\n            value = type.getConstructor(String.class).newInstance(str);\n        return value;\n    }", "protected Date compute(double value,String localeString){\n  if (Double.isNaN(value) || localeString == null) {\n    return null;\n  }\n  Locale locale=new Locale(localeString);\n  long dateLong=(long)value;\n  Date date=new Date(dateLong);\n  Calendar cal=Calendar.getInstance(locale);\n  cal.setTime(date);\n  return cal.getTime();\n}\n", "public void add(int i)\n  {\n    if (_data.length <= _size)\n      expand(_size + 1);\n\n    _data[_size++] = i;\n  }", "    private void calculateTextPositions() {\n        mText1 = getTextToDraw(-2);\n        mText2 = getTextToDraw(-1);\n        mText3 = getTextToDraw(0);\n        mText4 = getTextToDraw(1);\n        mText5 = getTextToDraw(2);\n    }\n", "public void setViewEnabled(boolean enable) {\n        final NotificationRootView root = mWindow.mRoot;\n        root.setViewEnabled(enable);\n        if (enable && mView == null) {\n            mView = root.getView();\n            mView.initialize(this);\n            mView.addStateListener(new ViewStateListener());\n        }\n    }", "public static void wrapThreadLoader(ClassLoader ldr,Runnable c){\n  Thread curThread=Thread.currentThread();\n  ClassLoader ctxLdr=curThread.getContextClassLoader();\n  try {\n    curThread.setContextClassLoader(ldr);\n    c.run();\n  }\n  finally {\n    curThread.setContextClassLoader(ctxLdr);\n  }\n}\n", "private static int getHighBit(int value) {\n        if (value <= 0) {\n            return -32;\n        }\n\n        int bit = 0;\n\n        if (value >= 1 << 16) {\n            value >>= 16;\n            bit += 16;\n        }\n\n        if (value >= 1 << 8) {\n            value >>= 8;\n            bit += 8;\n        }\n\n        if (value >= 1 << 4) {\n            value >>= 4;\n            bit += 4;\n        }\n\n        if (value >= 1 << 2) {\n            value >>= 2;\n            bit += 2;\n        }\n\n        if (value >= 1 << 1) {\n            bit += 1;\n        }\n\n        return bit;\n    }", "public static CANTalon canTalon ( int canID ) { return canRegistrar . fetch ( canID , CANTalon . class , null ) ; }", "@Procedure(mode = Mode.WRITE)\n    @Description(\"apoc.periodic.iterate('statement returning items', 'statement per item', {batchSize:1000,iterateList:true,parallel:false,params:{},concurrency:50,retries:0}) YIELD batches, total - run the second statement f", "    private POIXMLDocumentPart getTheme(XSSFWorkbook wb) throws Exception {\n\n        for (POIXMLDocumentPart p : wb.getRelations()) {\n            if (p.getPackageRelationship().getRelationshipType().equals(XSSFRelation.THEME.getRelation())) {\n                return p;\n            }\n        }\n\n        return null;\n    }\n", "private static void blankOutline(final Image alphaChannelImage,final BufferedImage relief){\n  final Graphics2D gc=(Graphics2D)relief.getGraphics();\n  final Composite prevComposite=gc.getComposite();\n  gc.setComposite(AlphaComposite.getInstance(AlphaComposite.DST_IN));\n  final ImageIoCompletionWatcher watcher=new ImageIoCompletionWatcher();\n  final boolean drawComplete=gc.drawImage(alphaChannelImage,0,0,watcher);\n  if (!drawComplete) {\n    watcher.waitForCompletion();\n  }\n  gc.setComposite(prevComposite);\n}\n", "public int getResponseCode() throws IOException {\n        if (responseCode != -1) {\n            return responseCode;\n        }\n\n        // Make sure we've gotten the headers\n        getInputStream();\n        String resp = getHeaderField(0);\n\n        // should have no leading/trailing LWS\n        // expedite the typical case by assuming it has the\n        // form \"HTTP/1.x <WS> 2XX <mumble>\"\n        int ind;\n\n        try {\n            ind = resp.indexOf(' ');\n            while (resp.charAt(ind) == ' ') {\n                ind++;\n            }\n            responseCode = Integer.parseInt(resp.substring(ind, ind + 3));\n            responseMessage = resp.substring(ind + 4).trim();\n            return responseCode;\n        }\n        catch (Exception e) {\n            return responseCode;\n        }\n    }", "@Advice.OnMethodEnter public static long enter(){\n  final long startTime=System.currentTimeMillis();\n  return startTime;\n}\n", "\tpublic void removeElementListener(ElementListener listener, String pattern) {\n\t\tif ((listener != null) || (pattern != null)) {\n\t\t\tfor (Iterator i = this.listeners.iterator(); i.hasNext();) {\n\t\t\t\tXPathMatcher m = (XPathMatcher) (i.next());\n\n\t\t\t\tif (((m.getListener().equals(listener)) || (listener == null))\n\t\t\t\t\t\t&& ((m.getExpression().equals(pattern)) || (pattern == null))) {\n\t\t\t\t\ti.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Else: Both null => Just ignore that dummy call!\n\t}\n", "void removeContextMenuFactory ( IContextMenuFactory factory ) ;", "public boolean doMousePressed(MouseEvent event,Positionable pos){\n  if (_drawFrame instanceof DrawPolygon) {\n    DrawPolygon f=(DrawPolygon)_drawFrame;\n    f.anchorPoint(event.getX(),event.getY());\n  }\n  if (pos instanceof PositionableShape && _editor.isEditable()) {\n    if (!pos.equals(_currentSelection)) {\n      if (_currentSelection != null) {\n        _currentSelection.removeHandles();\n      }\n      _currentSelection=(PositionableShape)pos;\n      _currentSelection.drawHandles();\n    }\n    return true;\n  }\n  if (_currentSelection != null) {\n    _currentSelection.removeHandles();\n    _currentSelection=null;\n  }\n  return false;\n}\n", "protected void processEvent (DEvent event)\n    {\n        // look up the target object\n        DObject target = _objects.get(event.getTargetOid());\n        if (target == null) {\n            log.debug(\"Event target no longer exists\", \"event\", event);\n            return;\n        }\n\n        // check the event's permissions\n        if (!target.checkPermissions(event)) {\n            log.warning(\"Event failed permissions check\", \"event\", event, \"target\", target);\n            return;\n        }\n\n        if (dispatchEvent(event, target)) {\n            // unless requested not to, notify any proxies\n            target.notifyProxies(event);\n        }\n    }", "public JMapper<D, S> destinationFactory(DestinationFactory<D> factory){\n    \tthis.mapper.setDestinationFactory(factory);\n    \treturn this;\n    }", "private void onEvent ( NavigationManager . Event . OnLocationForward event ) { updateToolbar ( event . getCurrentValue ( ) ) ; }", "public void sendPacketToAllInDimension ( IPacket packet , int dimension ) { checkClassAndSync ( packet . getClass ( ) ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . DIMENSION ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGETARGS ) . set ( dimension ) ; serverOutboundChannel . writeOutbound ( packet ) ; isCurrentlySendingSemaphor = BOOL_ ; }", "boolean add(DownloadRequest request){\n  if (query(request.downloadId()) != DownloadState.INVALID || query(request.uri()) != DownloadState.INVALID) {\n    Log.w(TAG,\"the download requst is in downloading\");\n    return false;\n  }\n  request.setDownloadRequestQueue(this);\nsynchronized (currentRequests) {\n    currentRequests.add(request);\n  }\n  downloadQueue.add(request);\n  return true;\n}\n", "static boolean castToBoolean(final Object in) throws PSQLException {\n    if (LOGGER.isLoggable(Level.FINE)) {\n      LOGGER.log(Level.FINE, \"Cast to boolean: \\\"{0}\\\"\", String.valueOf(in));\n    }\n    if (in instanceof Boolean) {\n      return (Boolean) in;\n ", "public static Note getLowestNote(Note[] notes) {\r\n\t  Note lowestNote = notes[0];\r\n\t  for (int i=1; i<notes.length; i++)\r\n\t\t  if (notes[i].isLowerThan(lowestNote))\r\n\t\t\t  lowestNote = notes[i];\r\n\t  return lowestNote;\r\n  }", "protected void createMocksForTheConstructor ( ) { fakeCursor = PowerMock . createStrictMock ( BJETxCursor . class ) ; EasyMock . expect ( fakeCursor . cursor ( ) ) . andReturn ( realCursor ) ; }", "private Future < Job > reattempt ( ) { if ( this . backoff != null ) { long delay = this . getBackoffImpl ( ) . apply ( attempts ) ; return this . setDelay ( delay ) . setPromote_at ( System . currentTimeMillis ( ) + delay ) . update ( ) . compose ( null ", "void onBindHeaderViewHolder ( T viewHolder , int position ) ;", "public boolean addCockpit(){\n  if (getEmptyCriticals(LOC_HEAD) < 5) {\n    return false;\n  }\n  addCritical(LOC_HEAD,0,new CriticalSlot(CriticalSlot.TYPE_SYSTEM,SYSTEM_LIFE_SUPPORT));\n  addCritical(LOC_HEAD,1,new CriticalSlot(CriticalSlot.TYPE_SYSTEM,SYSTEM", "public ZyGraphProximitySettings ( final ZyGraphProximitySettings settings ) { m_proximityBrowsing = settings . getProximityBrowsing ( ) ; m_proximityBrowsingActivisionThreshold = settings . getProximityBrowsingActivationThreshold ( ) ; m_proximityBrowsing", "    public void addReference(Reference r) {\n        references.addElement(r);\n    }\n", "\tprivate boolean addFrameTags(XMLTag parent){\n\t\tif((parent!=null) && (skins!=null) && (skins.size()>0)){\n\t\t\tboolean any = false;\n\t\t\tObject[] sk = skins.toArray();\n\t\t\tVector v = (Vector)parent.value;\n\t\t\tfor(int i=0; i<sk.length; i++){\n\t\t\t\tif(sk[i] != null){\n\t\t\t\t\tXMLTag.addTag(parent, \"skin\", sk[i]);\n\t\t\t\t\tany = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn any;\n\t\t}\n\t\treturn false;\n\t}\n", "private Subject getSubject()\n   {\n      return AccessController.doPrivileged(new PrivilegedAction<Subject>()\n      {\n         /**\n          * run method\n          */\n         public Subject run()\n         {\n            try\n            {\n               String domain = recoverSecurityDomain;\n\n               if (domain != null && subjectFactory != null)\n               {\n                  Subject subject = SecurityActions.createSubject(subjectFactory, domain);\n                     \n                  Set<PasswordCredential> pcs = SecurityActions.getPasswordCredentials(subject);\n                  if (!pcs.isEmpty())\n                  {\n                     for (PasswordCredential pc : pcs)\n                     {\n                        pc.setManagedConnectionFactory(mcf);\n                     }\n                  }\n\n                  log.debugf(\"Recovery Subject=%s\", subject);\n\n                  return subject;\n               }\n               else\n               {\n                  log.noCrashRecoverySecurityDomain(jndiName);\n               }\n            }\n            catch (Throwable t)\n            {\n               log.exceptionDuringCrashRecoverySubject(jndiName, t.getMessage(), t);\n            }\n\n            return null;\n         }\n      });\n   }", "    public void addPanel(@NotNull final JPanel panel) {\n        mainPanel.addDatabaseActionPanel(panel);\n    }\n", "private static void initializeRegistry(){\n  register(PipelineOptions.class);\n  Set<PipelineOptionsRegistrar> pipelineOptionsRegistrars=Sets.newTreeSet(ObjectsClassComparator.INSTANCE);\n  pipelineOptionsRegistrars.addAll(Lists.newArrayList(ServiceLoader.load(PipelineOptionsRegistrar.class,CLASS_LOADER)));\n  for (  PipelineOptionsRegistrar registrar : pipelineOptionsRegistrars) {\n    for (    Class<? extends PipelineOptions> klass : registrar.getPipelineOptions()) {\n      register(klass);\n    }\n  }\n}\n", "protected NodeTypes without( Collection<JcrNodeType> removedNodeTypes ) {\n        if (removedNodeTypes.isEmpty()) return this;\n        Collection<JcrNodeType> nodeTypes = new HashSet<JcrNodeType>(this.nodeTypes.values());\n        nodeTypes.removeAll(removedNodeTypes);\n        return new NodeTypes(this.context, nodeTypes, getVersion() + 1);\n    }", "public static synchronized boolean execute(String sqlStatement){\n  boolean executeOk=false;\n  logger.trace(String.format(\"execute( %s ) -->entry\",sqlStatement));\n  final Statement S=getStatement();\n  if (S == null) {\n    logger.error(\"execute() <--exit (error: Statement unavailable)\");\n    return false;\n  }\n  try {\n    executeOk=S.execute(sqlStatement);\n  }\n catch (  Throwable t) {\n    surfaceThrowable(String.format(\"execute( %s )\",sqlStatement),t);\n  }\n finally {\n    cleanup(S);\n  }\n  logger.trace(\"execute() <--exit (normal): \" + executeOk);\n  return executeOk;\n}\n", "\tpublic String getDocumentNumber(int i) {\n\t\tif (i != docid) {\n\t\t\ttry {\n\t\t\t\tif (seek(i) == false)\n\t\t\t\t\treturn null;\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tSystem.err.println(\n\t\t\t\t\t\"Input/Output exception during reading the doucment index file. Stack trace follows.\");\n\t\t\t\tioe.printStackTrace();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t}\n\t\treturn docno;\n\t}\n", "public CSelectionCriteriumPanel ( final CSelectionCriterium criterium ) { super ( new BorderLayout ( ) ) ; m_criterium = criterium ; selectionStateBox . addActionListener ( selectionStateBoxListener ) ; initPanel ( ) ; }", "\tpublic boolean equals(Object o) {\n\t\treturn (o instanceof FormacaoComplementarDeExtensaoUniversitariaList) && this.impl.equals(o);\n\t}\n", "public void checkBlocksizeE ( final int value ) { if ( value > blocksize_E ) { this . blocksize_E = value ; } this . countE ++ ; }", "public synchronized boolean allCancelled ( ) { for ( TaskProgress progress : taskInfo ) { if ( progress . isCancelled ( ) ) return BOOL_ ; } return BOOL_ ; }", "protected boolean isFirst ( ) { boolean defaultValue = myNode . getTreePrev ( ) == null ; if ( defaultValue ) { IElementType parentNodeType = PsiUtilCore . getElementType ( myNode . getTreeParent ( ) ) ; if ( parentNodeType == SET_DIRECTIVE ) { return PsiUtilCore . getElementType ( myNode ) == TT2_SET ; } else if ( parentNodeType == GET_DIRECTIVE ) { return PsiUtilCore . getElementType ( myNode ) == TT2_GET ; } } return defaultValue ; }", "public void removeParentRelation(Relation relation){\n  if (parentRelations != null) {\n    parentRelations.remove(relation);\n  }\n}\n", "    public void deleteFromDBAndBox(Trash.TrashModes trashMode) {\n        deleted = true;\n        MujMail.mujmail.getTrash().storeToTrash(this, trashMode);\n        if ( getMailDB() != null) {\n            // Delete from DB, here comes only persistent folders\n            getMailDB().deleteMail(this);\n        }\n        \n        // delete message from all boxes\n        MailDBManager.getMailDBManager().removeMessageFromAllBoxes(this); // Remove from Boxes\n    }\n", "public Observable<Page<IotHubQuotaMetricInfoInner>> getQuotaMetricsAsync(final String resourceGroupName, final String resourceName) {\n        return getQuotaMetricsWithServiceResponseAsync(resourceGroupName, resourceName)\n            .map(new Func1<Servic", "public void mark ( int readLimit ) { markOffset = offset ; bufferedInput . mark ( readLimit ) ; }", "public boolean isPerInstanceMetaClassChange ( ) { return instance != null ; }", "    public void onTabChange() {\n        applications.resetLists();\n        charging.reset();\n        clouds.resetCloudsList();\n        images.resetList();\n        instances.reset();\n        keypairs.reset();\n        runningApplications.resetList();\n        securityGroups.resetSecurityGroupsList();\n        userGroups.resetUserGroupsList();\n        users.reset();\n        volumes.resetVolumesList();  \n        \n        preloadNewTab();\n    }\n", "@Deprecated\r\n\tpublic <T> List<T> getImplementors (AddOn ao, String packageName, Class<T> classType) {\r\n        Class<?> cls = null;\r\n        List<T> listClass = new ArrayList<>();\r\n        \r\n        List<ClassNameWrapper> classNames;\r\n        if (ao != null) {\r\n        \tclassNames = this.getJarClassNames(ao, packageName);\r\n        } else {\r\n        \tclassNames = this.getClassNames(packageName, classType);\r\n        }\r\n        for (ClassNameWrapper classWrapper : classNames) {\r\n            try {\r\n                cls = classWrapper.getCl().loadClass(classWrapper.getClassName());\r\n                // abstract class or interface cannot be constructed.\r\n                if (Modifier.isAbstract(cls.getModifiers()) || Modifier.isInterface(cls.getModifiers())) {\r\n                    continue;\r\n                }\r\n                if (classType.isAssignableFrom(cls)) {\r\n                    @SuppressWarnings(\"unchecked\")\r\n                    Constructor<T> c = (Constructor<T>) cls.getConstructor();\r\n                    listClass.add(c.newInstance());\r\n\r\n                }\r\n            } catch (Throwable e) {\r\n            \t// Often not an error\r\n            \tlogger.debug(e.getMessage(), e);\r\n            }\r\n        }\r\n        return listClass;\r\n\t}", "public void error(final String msg){\n  try {\n    mErr.append(msg);\n    mErr.append(LS);\n  }\n catch (  final IOException e) {\n    throw new RuntimeException(e);\n  }\n}\n", "public void removeExtensionFieldValue(ExtensionFieldValueEntity extensionFieldValue){\n  extensionFieldValues.remove(extensionFieldValue);\n}\n", "  public int getLength() {\n    int length = 0;\n    for ( int i = 0; i < 12; i++ )\n      if ( ( 1 << i & _data ) != 0 )\n        length++;\n    return length;\n  }\n", "public Object[] toArray(){\n  return al.toArray();\n}\n", "public boolean isBoolean ( ) { return BOOL_ ; }", "private Integer getNextOrdinalForMethodId(int methodId, String pathName) throws Exception {\n        String pathInfo = doGet(BASE_PATH + uriEncode(pathName), new BasicNameValuePair[0]);\n        JSONObject pathResponse = new JSONObject(pathInfo);\n\n        JSONArray enabledEndpoints = pathResponse.getJSONArray(\"enabledEndpoints\");\n        int lastOrdinal = 0;\n        for (int x = 0; x < enabledEndpoints.length(); x++) {\n            if (enabledEndpoints.getJSONObject(x).getInt(\"overrideId\") == methodId) {\n                lastOrdinal++;\n            }\n        }\n        return lastOrdinal + 1;\n    }", "public ArrayDeque ( ) { elements = new Object [ NUM_ ] ; }", "    public float addExtend(int index, float v) {\n        assert(index>=0);\n        float ret;\n        if (isValueUndefined(index)) {\n            setExtend(index, ret=v);\n        }\n        else {\n            set(index, ret=get(index)+v);\n        }\n        return ret;\n    }\n", "private void loadTemplateBytes ( ) throws IOException { String resourceName = STR_ + templateClass . getName ( ) . replace ( STR_ , STR_ ) + STR_ ; try ( InputStream in = ConverterPropertyEditorFactory . class . getResourceAsStream ( resourceName ) ) { if", "public static boolean installNormal(Context context,String filePath){\n  Intent i=new Intent(Intent.ACTION_VIEW);\n  File file=new File(filePath);\n  if (file == null || !file.exists() || !file.isFile() || file.length() <= 0) {\n    return false;\n  }\n  i.setDataAndType(Uri.parse(\"file://\" + filePath),\"application/vnd.android.package-archive\");\n  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n  context.startActivity(i);\n  return true;\n}\n", "@SuppressWarnings(\"unchecked\")\n\tprivate static <T> T maskNull(T value) {\n\t\treturn (value == null) ? (T) NULL_VALUE : value;\n\t}", "private static int daysInMonth(int year, int month) {\n    assert month >= FIRST_MONTH && month <= LAST_MONTH;\n    int d = DAYS_IN_MONTH[month - 1];\n    if (month == FEBRUARY && isLeapYear(year)) d++;\n    return d;\n  }", "public static BigFraction parseAspectRatio(String aspectRatio){\n  String[] parts=aspectRatio.split(\"/\");\n  try {\n    if (parts.length == 2) {\n      return new BigFraction(Long.parseLong(parts[0]),Long.parseLong(parts[1]));\n    }\n else     if (parts.length == 1) {\n      return new BigFraction(Long.parseLong(parts[0]));\n    }\n  }\n catch (  NumberFormatException e) {\n    throw new ConversionHelperException(\"Incorrect aspect ratio! Aspect ratio must consist of two numbers.\",e);\n  }\n  throw new ConversionHelperException(\"Incorrect aspect ratio! Aspect ratio must consist of two values.\");\n}\n", "public Shape createBullet ( int x , int y , int diameter ) { return createEllipseInternal ( x , y , diameter , diameter ) ; }", "public boolean isSavePassword ( ) { return m_database . getConfiguration ( ) . isSavePassword ( ) ; }", "@RequestMapping(method = RequestMethod.GET)\n    @Transactional\n    public Callable<ResponseEntity<JsonNode>> get(\n            @RequestParam String query,\n            @RequestParam(required = false) String variables,\n            @RequestParam(required = false) String operationName\n    ) throws IOException {\n        return () -> {\n            // Parses the arguments\n            Map<String, Object> arguments = decodeIntoMap(variables);\n            // Runs the query\n            return ResponseEntity.ok(\n                    requestAsJson(\n                            new Request(\n                                    query,\n                                    arguments,\n                                    operationName\n                            )\n                    )\n            );\n        };\n    }", "public void addTag ( final Tag tag ) throws CouldntSaveDataException { Preconditions . checkNotNull ( tag , STR_ ) ; try { naviView . getConfiguration ( ) . tagView ( tag . getNative ( ) . getObject ( ) ) ; } catch ( final com . google . security . zynami", "public static List<List<Channel>> compareChannels(List<Channel> localChannels,List<Channel> serverChannels){\n  List<Channel> channelsToAdd=new ArrayList<>();\n  List<Channel> channelsToDelete=new ArrayList<>();\n  List<Channel> channelsToUpdate=new ArrayList<>();\n  Map<String,Channel> localChannelMap=new ArrayMap<>();\n  Map<String,Channel> serverChannelMap=new ArrayMap<>();\n  for (  Channel channel : localChannels) {\n    localChannelMap.put(channel.getGeneratedId(),channel);\n  }\n  for (  Channel channel : serverChannels) {\n    serverChannelMap.put(channel.getGeneratedId(),channel);\n  }\n  for (  Channel channel : serverChannelMap.values()) {\n    if (!localChannelMap.containsKey(channel.getGeneratedId())) {\n      channelsToAdd.add(channel);\n    }\n  }\n  for (  Channel channel : localChannelMap.values()) {\n    if (!serverChannelMap.containsKey(channel.getGeneratedId())) {\n      channelsToDelete.add(channel);\n    }\n  }\n  for (  Channel channel : serverChannelMap.values()) {\n    Channel localChannel=localChannelMap.get(channel.getGeneratedId());\n    if (localChannel != null) {\n      if (!localChannel.metadataEquals(channel)) {\n        channel.setId(localChannel.getId());\n        channelsToUpdate.add(channel);\n      }\n    }\n  }\n  List<List<Channel>> channelComparison=new ArrayList<>();\n  channelComparison.add(channelsToUpdate);\n  channelComparison.add(channelsToAdd);\n  channelComparison.add(channelsToDelete);\n  return channelComparison;\n}\n", "\tpublic void updatePosition(Player player, boolean isEnteringNewCase) {\n\t\tPlayerDAO playerDAO = new PlayerDAO();\n\t\tif (isEnteringNewCase) {\n\t\t\tCaseBO caseBO = new CaseBO();\n\t\t\tHouseBO houseBO = new HouseBO();\n\t\t\tCase myCase = caseBO.retrieveCase(player.getX(), player.getY(), player.getPlanId());\n\t\t\tplayer.setHouseId(myCase.getHouseId());\n\t\t\tplayer.setCurrentHouse(houseBO.retrieveHouseByID(myCase.getHouseId()));\n\t\t}\n\t\ttry {\n\t\t\tplayerDAO.updatePosition(player);\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tSystem.out.println(e.toString());\n\t\t}\n\t}\n", "    private L3SubProcessor getFinalProcessorSafe() {\n        if (_finalProcessor == null) {\n            _finalProcessor = new L3FinalProcessor(this);\n        }\n        return _finalProcessor;\n    }\n", "private static boolean isNumericToken(String token) {\n        int tokenLen = token.length();\n        if (tokenLen > 0) {\n            char c = token.charAt(0);\n            switch (c) {\n            case 'c': // century (number)\n            case 'C': // century of era (number)\n            case 'x': // weekyear (number)\n            case 'y': // year (number)\n            case 'Y': // year of era (number)\n            case 'd': // day of month (number)\n            case 'h': // hour of day (number, 1..12)\n            case 'H': // hour of day (number, 0..23)\n            case 'm': // minute of hour (number)\n            case 's': // second of minute (number)\n            case 'S': // fraction of second (number)\n            case 'e': // day of week (number)\n            case 'D': // day of year (number)\n            case 'F': // day of week in month (number)\n            case 'w': // week of year (number)\n            case 'W': // week of month (number)\n            case 'k': // hour of day (1..24)\n            case 'K': // hour of day (0..11)\n                return true;\n            case 'M': // month of year (text and number)\n                if (tokenLen <= 2) {\n                    return true;\n                }\n            }\n        }\n            \n        return false;\n    }", "public static double pixelYToLatitude(double pixelY, long mapSize) {\n        if (pixelY < 0 || pixelY > mapSize) {\n            throw new IllegalArgumentException(\"invalid pixelY coordinate \" + mapSize + \": \" + pixelY);\n        }\n        double y = 0.5 - (pixelY / mapSize);\n        return 90 - 360 * Math.atan(Math.exp(-y * (2 * Math.PI))) / Math.PI;\n    }", "public boolean discardArrived ( String clientHandle , String id ) ;", "    public void componentResized(ComponentEvent e) {\n        iconArea_dim = this.getSize();\n        positioningStrategy.setDisplayDimension(iconArea_dim, iconAreaOffset.x,\n                iconAreaOffset.y);\n        logger.info(\"component resized to \" + iconArea_dim.width + \",\"\n                + iconArea_dim.height);\n        adaptIconAreaDim();\n    }\n", "Map<InternalDistributedMember,List<Integer>> buildNodeToBucketMap() throws QueryException {\n  return buildNodeToBucketMapForBuckets(this.bucketsToQuery);\n}\n", "\tpublic ModelUri getFirstInterfaceRemoteUri(String name) {\n\t\tIterator<ModelUri> it = component.getInterfaceRemoteUriIterator(name);\n\t\tif(it.hasNext()) {\n\t\t\treturn it.next();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n", "public Compiler add ( URL url ) { config . classpath . add ( url ) ; return this ; }", "public CProximityNode ( final T attachedNode ) { super ( NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , Color . WHITE , Color . BLACK , BOOL_ , BOOL_ ) ; m_attachedNode = Preconditions . checkNotNull ( attachedNode , STR_ ) ; }", "    public float getULRate(boolean reset){\n        if(reset){\n            float tmp = this.ulrate;\n            this.ulrate = 0;\n            return tmp;\n        }else\n            return this.ulrate;\n    }\n", "private boolean isWhitespaceOnly ( String comment ) { return EMPTY_COMMENT_REGEX . matcher ( comment ) . find ( ) ; }", "    public void registerProvider(BundleProviderLoader provider) {\n        log(Level.FINE, \"registering provider \" + provider);\n        providers.register(provider);\n    }\n", "private static Locale findFormattingMatch(Locale pref, Locale[] avail) {\n        Locale match = null;\n        boolean langAndCountryMatch = false;\n        for (int i = 0; i < avail.length; i++) {\n            if (pref.equals(avail[i])) {\n                // Exact match\n                match = avail[i];\n                break;\n            } else if (!\"\".equals(pref.getVariant())\n                    && \"\".equals(avail[i].getVariant())\n                    && pref.getLanguage().equals(avail[i].getLanguage())\n                    && pref.getCountry().equals(avail[i].getCountry())) {\n                // Language and country match; different variant\n                match = avail[i];\n                langAndCountryMatch = true;\n            } else if (!langAndCountryMatch\n                    && pref.getLanguage().equals(avail[i].getLanguage())\n                    && (\"\".equals(avail[i].getCountry()))) {\n                // Language match\n                if (match == null) {\n                    match = avail[i];\n                }\n            }\n        }\n        return match;\n    }", "public static < T > SortedSet < T > asImmutable ( SortedSet < T > self ) { return Collections . unmodifiableSortedSet ( self ) ; }", "    protected Component createNextButton() {\n        return new SpinnerArrowButton(SwingConstants.NORTH, nextButtonHandler);\n    }\n", "private void computeLabelSides(int geomIndex){\n  computeLabelSide(geomIndex,Position.LEFT);\n  computeLabelSide(geomIndex,Position.RIGHT);\n}\n", "private Format getFormatter(final String pattern, final Object argument) {\n\t\tif (pattern.indexOf('|') != -1) {\n\t\t\tint start = pattern.indexOf('{');\n\t\t\tif (start >= 0 && start < pattern.lastIndexOf('}')) {\n\t\t\t\treturn new ChoiceFormat(format(pattern, new Object[] { argument }));\n\t\t\t} else {\n\t\t\t\treturn new ChoiceFormat(pattern);\n\t\t\t}\n\t\t} else {\n\t\t\treturn new DecimalFormat(pattern, symbols);\n\t\t}\n\t}", "public void randomizeWeights(Random random){\n  for (int i=0; i < weights.length; i++)   weights[i]=random.nextDouble() * 0.2;\n}", "private boolean removeRecoveryRecord(RecoveryAgent recoveryAgent, FailureScope failureScope) {\n        if (tc.isEntryEnabled())\n            Tr.entry(tc, \"removeRecoveryRecord\", new Object[] { recoveryAgent, failureScope, this });\n\n        boolean found = false;\n\n        synchronized (_outstandingRecoveryRecords) {\n            final HashSet recoveryAgentSet = _outstandingRecoveryRecords.get(failureScope);\n\n            if (recoveryAgentSet != null) {\n                found = recoveryAgentSet.remove(recoveryAgent);\n            }\n        }\n\n        if (tc.isEntryEnabled())\n            Tr.exit(tc, \"removeRecoveryRecord\", found);\n        return found;\n    }", "boolean doCommandPlugsPostStatusInternet ( String deviceKey , IEspStatusPlugs status ) ;", "    public long getLastModified(Resource resource) {\n        String rootPath = servletContext.getRealPath(\"/\");\n        if (rootPath == null) {\n            /*\n             * rootPath is null if the servlet container cannot translate the\n             * virtual path to a real path for any reason (such as when the\n             * content is being made available from a .war archive)\n             */\n            return 0;\n        }\n\n        String fileName = Tokenizer.getFileName(resource.getName());\n        String path = (String) templatePaths.get(fileName);\n        File file = new File(rootPath + path, fileName);\n        if (file.canRead()) {\n            return file.lastModified();\n        } else {\n            return 0;\n        }\n    }\n", "public static boolean isTypeManagedBeanOrDecoratorOrInterceptor(AnnotatedType<?> annotatedType) {\n        Class<?> javaClass = annotatedType.getJavaClass();\n        return !javaClass.isEnum() && !Extension.class.isAssignableFrom(javaClass)\n                && Reflections.isTopLevelOrStaticNestedClass(javaClass) && !Reflections.isParameterizedTypeWithWildcard(javaClass)\n                && hasSimpleCdiConstructor(annotatedType);\n    }", "@Nonnull\n    public String getCommandName() {\n        String c = commandName;\n        if (c != null)\n            return c;\n        return getArchitecture().getCommand();\n    }", "    private ProcessHandler buildProcess() throws ExecutionException {\n        JavaParameters params = new JavaParameters();\n\n        params.setJdk(configuration.getJdk());\n        params.setMainClass(configuration.getMainClass());\n        params.getVMParametersList().add(configuration.getVmParameters());\n        params.setWorkingDirectory(configuration.getHomePath());\n\n\n        configureApplicationParameters(params);\n        configureClassPath(params);\n\n        return new DefaultJavaProcessHandler(params);\n    }\n", "    private void toggleDetails() {\n        Dimension dialogSize = getSize();\n\n        if (detailsVisible) {\n            detailsButton.setText(\"Details >>\");\n            getContentPane().remove(detailsPane);\n            Dimension detailsPaneSize = detailsPane.getSize();\n            dialogSize.height -= detailsPaneSize.height;\n        } else {\n            detailsButton.setText(\"Details <<\");\n            getContentPane().add(detailsPane, BorderLayout.CENTER);\n            Dimension detailsPaneSize;\n            if (detailsBeenVisible) {\n                detailsPaneSize = detailsPane.getSize();\n            } else {\n                detailsBeenVisible = true;\n                detailsPaneSize = detailsPane.getPreferredSize();\n            }\n            dialogSize.height += detailsPaneSize.height;\n        }\n\n        detailsVisible = !detailsVisible;\n\n        setSize(dialogSize);\n        invalidate();\n        validate();\n    }\n", "public void componentRemoved(ContainerEvent e){\n  Layer childLayer=(Layer)e.getChild();\n  removeProjectionListener(childLayer);\n  removedLayers.addElement(childLayer);\n  changeLayers(e);\n}\n", "public void removeCallback(Callback callback){\n  callbacks.remove(callback);\n}\n", "public int size ( ) { return key . size ( ) ; }", "public boolean isEdgeTouched ( int edges ) { final int count = mInitialEdgeTouched . length ; for ( int i = NUM_ ; i < count ; i ++ ) { if ( isEdgeTouched ( edges , i ) ) { return BOOL_ ; } } return BOOL_ ; }", "public static String formatAbsBytes ( long bytes ) { return formatBytes ( bytes , BOOL_ ) ; }", "public int edit() throws DBException\n    {\n        if ((this.getRecord().getEditMode() != Constants.EDIT_CURRENT)\n            && (this.getRecord().getEditMode() != Constants.EDIT_IN_PROGRESS))\n            throw new DBException(Constants.INVALID_RECORD);\n ", "public Name replaceUnsafeNameChars ( ) { return Name . of ( value ( ) . trim ( ) . replaceAll ( STR_ , STR_ ) . replaceAll ( STR_ , STR_ ) ) ; }", "public static int counterChars ( String str ) { if ( TextUtils . isEmpty ( str ) ) { return NUM_ ; } int count = NUM_ ; for ( int i = NUM_ ; i < str . length ( ) ; i ++ ) { int tmp = ( int ) str . charAt ( i ) ; if ( tmp > NUM_ && tmp < NUM_ ) { count += ", "@Override\n    public String getFrameworkNodeName() {\n        String name = getLookup().getProperty(\"framework.server.name\");\n        if (null!=name) {\n            return name.trim();\n        } else {\n            return name;\n        }\n    }", "ZoneOffsetTransition(long epochSecond,ZoneOffset offsetBefore,ZoneOffset offsetAfter){\n  this.transition=LocalDateTime.ofEpochSecond(epochSecond,0,offsetBefore);\n  this.offsetBefore=offsetBefore;\n  this.offsetAfter=offsetAfter;\n}\n", "  public void moveToPreviousRow() {\n    moveToRow(currentRowIndex - 1, false, true);\n  }\n", "public static List<String> getProperties(String prefix) {\n        List<String> res = new ArrayList<>();\n        prefix += \".\";\n        for (int i = 1; ; i++) {\n            String prop = p(prefix + i);\n            if (prop == null)\n                return res;\n            res.add(prop);\n        }\n    }", "private void parsePublicUserIdentity(Node node){\n  String publicUserIdentity=null;\n  if (node == null) {\n    return;\n  }\n  Node childnode=node.getFirstChild();\n  if (childnode != null) {\n    do {\n      if (publicUserIdentity == null) {\n        if ((publicUserIdentity=getValueByParamName(\"Public_User_Identity\",childnode,TYPE_TXT)) != null) {\n          String username=extractUserNamePart(publicUserIdentity.trim());\n          PhoneNumber number=ContactUtil.getValidPhoneNumberFromUri(username);\n          if (number == null) {\n            if (sLogger.isActivated()) {\n              sLogger.error(\"Invalid public user identity '\" + username + \"'\");\n            }\n            mRcsSettings.setUserProfileImsUserName(null);\n          }\n else {\n            ContactId contact=ContactUtil.createContactIdFromValidatedData(number);\n            mRcsSettings.setUserProfileImsUserName(contact);\n          }\n        }\n      }\n    }\n while ((childnode=childnode.getNextSibling()) != null);\n  }\n}\n", "public void removeScanListener(Listener l){\n  listeners.remove(l);\n}\n", "    public MenuManager getContextMenu(final IAction[] items) {\n        menuMgr.addMenuListener(new IMenuListener() {\n            public void menuAboutToShow(IMenuManager manager) {\n                if (null != selectedInstance)\n                    selectedInstance.menuAboutToShow(manager);\n                else\n                    for (int i = 0; i < items.length; i++) {\n                        manager.add(items[i]);\n                        manager.add(new Separator(\n                                IWorkbenchActionConstants.MB_ADDITIONS));\n                    }\n            }\n        });\n\n        Menu menu = menuMgr.createContextMenu(panel);\n        panel.setMenu(menu);\n        return menuMgr;\n    }\n", "public Section(Location location,Location location2){\n  this.minX=Math.min(location.getBlockX(),location2.getBlockX());\n  this.minY=Math.min(location.getBlockY(),location2.getBlockY());\n  this.minZ=Math.min(location.getBlockZ(),location2.getBlockZ());\n  this.maxX=Math.max(location.getBlockX(),location2.getBlockX());\n  this.maxY=Math.max(location.getBlockY(),location2.getBlockY());\n  this.maxZ=Math.max(location.getBlockZ(),location2.getBlockZ());\n  this.world=location.getWorld();\n}\n", "public void registerInstallation(){\n  try {\n    File timestampFile=new File(getExtractDir(),\".cargo\");\n    BufferedWriter bw=new BufferedWriter(new FileWriter(timestampFile));\n    bw.write(\"Do not remove this file\");\n    bw.close();\n  }\n catch (  Exception e) {\n  }\n}\n", "public static <S> AreaSizeD toAreaSizeD(final PAreaSizeD<S> a)\n  {\n    Objects.requireNonNull(a, \"area size\");\n    return AreaSizeD.of(a.sizeX(), a.sizeY());\n  }", "    public void gameTick() {\n        // very basic state machine, makes a good foundation for a more complex\n        // game.\n        switch (mCurState) {\n        case GAME_INIT:\n            // prepare a new game for the user.\n            initNewGame();\n            switchGameState(GAME_RUNNING);\n\n        case GAME_RUNNING:\n            // update our marble.\n            if (!mWarning)\n                updateMarble();\n            break;\n        }\n\n        // redraw the screen once our tick function is complete.\n        invalidate();\n    }\n", "void openEditDialog(String typeName) {\n\n        try {\n            Window window = CmsBasicDialog.prepareWindow(DialogWidth.max);\n\n            window.setContent(\n                new CmsEditResourceTypeDialog(window, m_app, OpenCms.getResourceManager().getResourceType(typeName)));\n            window.setCaption(CmsVaadinUtils.getMessageText(Messages.GUI_RESOURCETYPE_EDIT_WINDOW_CAPTION_0));\n            A_CmsUI.get().addWindow(window);\n        } catch (CmsLoaderException e) {\n            LOG.error(\"Unable to read resource type by name\", e);\n        }\n    }", "public static void addBookmark ( final CCodeBookmarkManager manager , final INaviModule module , final IAddress address ) { manager . addBookmark ( new CCodeBookmark ( module , address , STR_ ) ) ; }", "public static sdx_backup_restore[] factory_default(nitro_service client, sdx_backup_restore[] resources) throws Exception\r\n\t{\r\n\t\tif(resources == null)\r\n\t\t\tthrow new Exception(\"Null resource array\");\r\n\t\t\r\n\t\t\r\n\t\tif(resources.length == 1)\r\n\t\t\treturn ((sdx_backup_restore[]) resources[0].perform_operation(client, \"factory_default\"));\r\n\t\t\r\n\t\treturn ((sdx_backup_restore[]) perform_operation_bulk_request(client, resources, \"factory_default\"));\r\n\t}", "public DERObject toASN1Object()\n    {\n        ASN1EncodableVector v = new ASN1EncodableVector();\n\n        v.add(policyIdentifier);\n\n        if (policyQualifiers != null)\n        {\n            v.add(policyQualifiers);\n        }\n\n        return new DERSequence(v);\n    }", "public List<Statement> wikibaseStyleShuffled(){\n  List<Statement> wikibaseStyle=wikibaseStyle();\n  Collections.shuffle(wikibaseStyle,random);\n  return wikibaseStyle;\n}\n", "public void removeAttributeDelegate ( Closure attrDelegate ) { getProxyBuilder ( ) . attributeDelegates . remove ( attrDelegate ) ; }", "public static String asciiToHexString(final String asciiString){\n  final StringBuffer sb=new StringBuffer();\n  for (  final byte b : asciiString.getBytes()) {\n    sb.append(byteToHexString(b));\n  }\n  return sb.toString();\n}\n", "public static <T> List<T> fill(Class<T> entityClass, int count) {\r\n        if (N.isEntity(entityClass) == false) {\r\n            throw new IllegalArgumentException(entityClass.getCanonicalName() + \" is not a valid entity class with property getter/setter method\");\r\n        }\r\n\r\n        final List<T> resultList = new ArrayList<>(count);\r\n\r\n        for (int i = 0; i < count; i++) {\r\n            final T entity = N.newInstance(entityClass);\r\n            fill(entity);\r\n            resultList.add(entity);\r\n        }\r\n\r\n        return resultList;\r\n    }", "    public Form getWelcomeForm() {\n        if (welcomeForm == null) {//GEN-END:|25-getter|0|25-preInit\n            // write pre-init user code here\n            welcomeForm = new Form(\"Tron\");//GEN-BEGIN:|25-getter|1|25-postInit\n            welcomeForm.addCommand(getPlayCommand());\n            welcomeForm.addCommand(getMultiCommand());\n            welcomeForm.addCommand(getQuitCommand());\n            welcomeForm.setCommandListener(this);//GEN-END:|25-getter|1|25-postInit\n// write post-init user code here\n        }//GEN-BEGIN:|25-getter|2|\n        return welcomeForm;\n    }\n", "    private JDialog getDialog(JPanel panel){\n        if(DEBUG)\n            logger.debug(\"entering getDialog(), \"+panel);\n        JPanel p = new JPanel(new BorderLayout());\n        p.add(panel,BorderLayout.CENTER);\n        JPanel b = new JPanel(new FlowLayout(FlowLayout.CENTER,0,5));\n        JButton[] btns = createButtons(Configuration.getLocale());\n        for(int i=0,c=btns.length;i<c;i++){\n            b.add(btns[i]);\n        }\n        p.add(b,BorderLayout.SOUTH);\n        if(DEBUG)\n            logger.debug(\"exiting getDialog()\");\n        return DialogFactory.createDialog(frame,title,true,p);\n    }\n", "    public void init(FormSectionEvent e) {\n        FormData data = e.getFormData();\n        PageState state = e.getPageState();\n        BigDecimal id;\n\n        try {\n            if (m_id.getValue(state) == null) {\n                id = Sequences.getNextValue();\n                m_id.setValue(state, id);\n            }\n        } catch (SQLException s) {\n            s_log.error(\"Error generating sequence ID\" + s);\n            data.addError(\"Could not generate Sequence ID \" + s.getMessage());\n        }\n    }\n", "public void reverse ( ) { for ( int i = NUM_ , size = mTransitionControls . size ( ) ; i < size ; i ++ ) { mTransitionControls . get ( i ) . reverse ( ) ; } }", "private void _processValue (@Nonnull final CValuePropertyInfo aProperty, final ClassOutline aClassOutline)\n  {\n    final String sPropertyName = aProperty.getName (false);\n\n    final XSComponent aDefinition = aProperty.getSchemaComponent ();\n    if (aDefinition instanceof RestrictionSimpleTypeImpl)\n    {\n      final RestrictionSimpleTypeImpl aParticle = (RestrictionSimpleTypeImpl) aDefinition;\n      final XSSimpleType aSimpleType = aParticle.asSimpleType ();\n      final JFieldVar aFieldVar = aClassOutline.implClass.fields ().get (sPropertyName);\n\n      // if (particle.isRequired()) {\n      // if (!hasAnnotation(var, NotNull.class)) {\n      // if (notNullAnnotations) {\n      // var.annotate(NotNull.class);\n      // }\n      // }\n      // }\n\n      _processType (aSimpleType, aFieldVar);\n    }\n  }", "public JsonElement remove(int index){\n  return elements.remove(index);\n}\n", "private void finishKbMode(boolean updateDisplays){\n  mInKbMode=false;\n  if (!mTypedTimes.isEmpty()) {\n    int values[]=getEnteredTime(null);\n    if (tabHost.getCurrentTab() == 0) {\n      mTimePicker.setTime(values[0],values[1]);\n      if (!mIs24HourMode) {\n        mTimePicker.setAmOrPm(values[2]);\n      }\n    }\n else {\n      mTimePickerEnd.setTime(values[0],values[1]);\n      if (!mIs24HourMode) {\n        mTimePickerEnd.setAmOrPm(values[2]);\n      }\n    }\n    mTypedTimes.clear();\n  }\n  if (updateDisplays) {\n    updateDisplay(false);\n    if (tabHost.getCurrentTab() == 0) {\n      mTimePicker.trySettingInputEnabled(true);\n    }\n else {\n      mTimePickerEnd.trySettingInputEnabled(true);\n    }\n  }\n}\n", "public static GroupMatcher < JobKey > jobGroupContains ( String compareTo ) { return GroupMatcher . groupContains ( compareTo ) ; }", "public PulsarAdmin(URL serviceUrl,Authentication auth) throws PulsarClientException {\n  this(serviceUrl,new ClientConfiguration(){\n    private static final long serialVersionUID=1L;\n{\n      setAuthentication(auth);\n    }\n  }\n);\n}\n", "private void initializeCache() throws IOException {\n\t\tInputStream inputStream = ServerTypeRegistryCache.class.getResourceAsStream(SERVERTYPES_PROPERTIES);\n\t\tloadCache(inputStream);\n\t}", "public static void write(OMPoint point,Link link,LinkProperties props) throws IOException {\n  props.setProperty(LinkPoint.LPC_POINT_OVAL,point.isOval() ? \"true\" : \"false\");\nswitch (point.getRenderType()) {\ncase OMPoint.RENDERTYPE_LATLON:\n    LinkPoint.wri", "    public Object createNodeInstance() {\n        MNodeInstance modelElement =\n            MFactory.getDefaultFactory().createNodeInstance();\n        super.initialize(modelElement);\n        return modelElement;\n    }\n", "public static byte[] generateMac(byte[] byteCipherText,SecretKey integrityKey) throws NoSuchAlgorithmException, InvalidKeyException {\n  Mac sha256_HMAC=Mac.getInstance(HMAC_ALGORITHM);\n  sha256_HMAC.init(integrityKey);\n  return sha256_HMAC.doFinal(byteCipherText);\n}\n", "private int parseExternalGameId(StringMultiMap p){\n  String sExternalId=p.getString(PARAM_GAME_EXTERNAL_ID);\n  int ExternalGameId=0;\n  if (sExternalId != null) {\n    ExternalGameId=Integer.parseInt(sExternalId);\n  }\n  return ExternalGameId;\n}\n", "private long getTimeout(long lastTimeout, boolean reschedule)\n    {\n        Calendar cal = createCalendar(lastTimeout);\n\n        // If this expression is being rescheduled, then add a second to make\n        // progress towards the next timeout.\n        if (reschedule)\n        {\n            cal.add(Calendar.SECOND, 1);\n        }\n        // d666295 - Otherwise, if this method is called from getFirstTimeout,\n        // we're using the current time rather than the start time, and the\n        // current time is mid-second, then we also want to advance to the next\n        // second.  Note that the parser has already guaranteed that the start\n        // time has been rounded.\n        else if (lastTimeout != start && lastTimeout % 1000 != 0) // d666295\n        {\n            cal.set(Calendar.MILLISECOND, 0);\n            cal.add(Calendar.SECOND, 1);\n        }\n\n        if (!advance(cal))\n        {\n            return -1;\n        }\n\n        return cal.getTimeInMillis();\n    }", "public void addTask ( JoinTask task ) { synchronized ( JoinManager . this ) { if ( bTerminated ) return ; } synchronized ( taskList ) { if ( bTerminated ) { return ; } taskList . add ( task ) ; if ( this . proxyRegTask == null ) { this . proxyRegTask = ne", "\tpublic void save(String in_FileName) {\n\t\tm_Grammar.save(in_FileName);\n\t}\n", "  public void parseSortables(String restKey) {\n    getQuery().setSortables(extractSortables(restKey));\n  }\n", "\tpublic void setLine(int index, String s) {\n\t\tif (index<0 || index>=iRowCount)\n\t\t\tthrow new IllegalArgumentException(\"index out of range: \"+index);\n\t\tvData.setElementAt(s.toCharArray(), index);\t\n\t\ttc.repaint();\n\t}\n", "   public Object clone() {\n      return (new ArrowCursorTapSelInterp(this));\n   } // of clone\n", "public void registerJSQueryHandler ( IJSQueryHandler iqh ) ;", "protected Instance convertInstance(Instance instance) throws Exception {\n  Instance result;\n  double[] newVals;\n  Instance tempInst;\n  double cumulative;\n  int i;\n  int j;\n  double tempval;\n  int numAttsLowerBound;\n  newVals=new double[m_OutputNumAtts];\n  tempInst=(Instance)instance.copy();\n  m_ReplaceMissingFilter.input(tempInst);\n  m_ReplaceMissingFilter.batchFinished();\n  tempInst=m_ReplaceMissingFilter.output();\n  m_NominalToBinaryFilter.input(tempInst);\n  m_NominalToBinaryFilter.batchFinished();\n  tempInst=m_NominalToBinaryFilter.output();\n  if (m_AttributeFilter != null) {\n    m_AttributeFilter.input(tempInst);\n    m_AttributeFilter.batchFinished();\n    tempInst=m_AttributeFilter.output();\n  }\n  if (!m_center) {\n    m_standardizeFilter.input(tempInst);\n    m_standardizeFilter.batchFinished();\n    tempInst=m_standardizeFilter.output();\n  }\n else {\n    m_centerFilter.input(tempInst);\n    m_centerFilter.batchFinished();\n    tempInst=m_centerFilter.output();\n  }\n  if (m_HasClass) {\n    newVals[m_OutputNumAtts - 1]=instance.value(instance.classIndex());\n  }\n  if (m_MaxAttributes > 0) {\n    numAttsLowerBound=m_NumAttribs - m_MaxAttributes;\n  }\n else {\n    numAttsLowerBound=0;\n  }\n  if (numAttsLowerBound < 0) {\n    numAttsLowerBound=0;\n  }\n  cumulative=0;\n  for (i=m_NumAttribs - 1; i >= numAttsLowerBound; i--) {\n    tempval=0.0;\n    for (j=0; j < m_NumAttribs; j++) {\n      tempval+=m_Eigenvectors[j][m_SortedEigens[i]] * tempInst.value(j);\n    }\n    newVals[m_NumAttribs - i - 1]=tempval;\n    cumulative+=m_Eigenvalues[m_SortedEigens[i]];\n    if ((cumulative / m_SumOfEigenValues) >= m_CoverVariance) {\n      break;\n    }\n  }\n  if (instance instanceof SparseInstance) {\n    result=new SparseInstance(instance.weight(),newVals);\n  }\n else {\n    result=new DenseInstance(instance.weight(),newVals);\n  }\n  return result;\n}\n", "void loadedPlugins ( ) ;", "\tprivate Object getInstanceOfXML(String xmlString, Ontology ontology) {\n\t\t\n\t\tXMLCodec codec = new XMLCodec();\n\t\tObject objectInstance = null;\n\t\t\n\t\ttry {\n\t\t\tobjectInstance = codec.decodeObject(ontology, xmlString);\n\t\t} catch (CodecException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (OntologyException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\t\n\t\treturn objectInstance;\n\t}\n", "\tpublic BindingList () {\n\t\tsuper(new LinkedList());\n\t}\n", "public synchronized void setDefaultSSLContext() throws Exception {\n\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            Tr.entry(tc, \"setDefaultSSLContext\");\n\n        if (FrameworkState.isStopping()) {\n            return;\n        }\n\n        SSLConfig defaultSSLConfig = getDefaultSSLConfig();\n\n        if (defaultSSLConfig != null)\n            JSSEProviderFactory.getInstance(null).setServerDefaultSSLContext(defaultSSLConfig);\n        else {\n            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n                Tr.debug(tc, \"There is no default SSLConfig.\");\n        }\n\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            Tr.exit(tc, \"setDefaultSSLContext\");\n\n    }", "public static String formatMillis(double theMillis) {\n\t\tStringBuilder buf = new StringBuilder(20);\n\t\tif (theMillis > 0.0 && theMillis < 1.0) {\n\t\t\tbuf.append(getSubMillisecondMillisFormat().format(theMillis));\n\t\t\tbuf.append(\"ms\");\n\t\t} else if (theMillis < (10 * DateUtils.MILLIS_PER_SECOND)) {\n\t\t\tbuf.append((int) theMillis);\n\t\t\tbuf.append(\"ms\");\n\t\t} else if (theMillis >= DateUtils.MILLIS_PER_DAY) {\n\t\t\tdouble days = theMillis / DateUtils.MILLIS_PER_DAY;\n\t\t\tif (days >= 10) {\n\t\t\t\tbuf.append(getTenDayFormat().format(days));\n\t\t\t\tbuf.append(\" days\");\n\t\t\t} else if (days != 1.0f) {\n\t\t\t\tbuf.append(getDayFormat().format(days));\n\t\t\t\tbuf.append(\" days\");\n\t\t\t} else {\n\t\t\t\tbuf.append(getDayFormat().format(days));\n\t\t\t\tbuf.append(\" day\");\n\t\t\t}\n\t\t} else {\n\t\t\tlong millisAsLong = (long) theMillis;\n\t\t\tappend(buf, \"\", 2, ((millisAsLong % DateUtils.MILLIS_PER_DAY) / DateUtils.MILLIS_PER_HOUR));\n\t\t\tappend(buf, \":\", 2, ((millisAsLong % DateUtils.MILLIS_PER_HOUR) / DateUtils.MILLIS_PER_MINUTE));\n\t\t\tappend(buf, \":\", 2, ((millisAsLong % DateUtils.MILLIS_PER_MINUTE) / DateUtils.MILLIS_PER_SECOND));\n\t\t\tif (theMillis <= DateUtils.MILLIS_PER_MINUTE) {\n\t\t\t\tappend(buf, \".\", 3, (millisAsLong % DateUtils.MILLIS_PER_SECOND));\n\t\t\t}\n\t\t}\n\t\treturn buf.toString();\n\t}", "    public void updateLaunchApplicationFileDescription(LaunchApplication la, long fileId, String description){\n        if(!validateClass(la)) throw new ARISException(\"Invalid Launch Application\");        \n        List<LaunchFile> files = la.getFiles();\n        int position = findPosition(files, fileId);\n        \n        LaunchFile file = la.getFiles().get(position);\n        file.setDescription(description);\n        getHibernateTemplate().update(file);            \n    }\n", "public final void drain() {\n    do {\n      if (!drainingThread.compareAndSet(null, Thread.currentThread())) {\n        return;\n      }\n      try {\n        Runnable runnable;\n        while ((runnable = queue.poll()) != null) {\n          try {\n            runnable.run();\n          } catch (Throwable t) {\n            uncaughtExceptionHandler.uncaughtException(Thread.currentThread(), t);\n          }\n        }\n      } finally {\n        drainingThread.set(null);\n      }\n      // must check queue again here to catch any added prior to clearing drainingThread\n    } while (!queue.isEmpty());\n  }", "public void marshall(ContinuousParameterRange continuousParameterRange, ProtocolMarshaller protocolMarshaller) {\n\n        if (continuousParameterRange == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(continuousParameterRange.getName(), NAME_BINDING);\n            protocolMarshaller.marshall(continuousParameterRange.getMinValue(), MINVALUE_BINDING);\n            protocolMarshaller.marshall(continuousParameterRange.getMaxValue(), MAXVALUE_BINDING);\n            protocolMarshaller.marshall(continuousParameterRange.getScalingType(), SCALINGTYPE_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void setTransitGateways(java.util.Collection<TransitGateway> transitGateways) {\n        if (transitGateways == null) {\n            this.transitGateways = null;\n            return;\n        }\n\n        this.transitGateways = new com.amazonaws.internal", "public static <T> PermutationChromosome<T> of(\n\t\tfinal ISeq<? extends T> alleles,\n\t\tfinal int length\n\t) {\n\t\trequire.positive(length);\n\t\tif (length > alleles.size()) {\n\t\t\tthrow new IllegalArgumentException(format(\n\t\t\t\t\"The sub-set size must be be greater then the base-set: %d > %d\",\n\t\t\t\tlength, alleles.size()\n\t\t\t));\n\t\t}\n\n\t\tfinal int[] subset = array.shuffle(comb.subset(alleles.size(), length));\n\t\tfinal ISeq<EnumGene<T>> genes = IntStream.of(subset)\n\t\t\t.mapToObj(i -> EnumGene.<T>of(i, alleles))\n\t\t\t.collect(ISeq.toISeq());\n\n\t\treturn new PermutationChromosome<>(genes, true);\n\t}", "public void addRelation ( String fieldName , PersistentResource newRelation ) { checkSharePermission ( Collections . singleton ( newRelation ) ) ; Object relation = this . getValueUnchecked ( fieldName ) ; if ( relation instanceof Collection ) { if ( addT", "public String mutateLangModel(final String input){\n  if (input.length() == 0) {\n    return input;\n  }\n  int startPoint=(int)(Randomness.nextDouble() * (input.length()));\n  int remainingLength=(int)Math.round(Randomness.nextDouble() * (input.length() - startPoint));\n  if (remainingLength == 0) {\n    return input;\n  }\n  String output=input.substring(0,startPoint);\n  String replacementChunk=generateRandomStringFromModelWithExactLength(remainingLength,\"\" + input.charAt(startPoint));\n  output+=replacementChunk;\n  output+=input.substring(startPoint + remainingLength,input.length());\n  return output;\n}\n", "private void fill() throws IOException {\n  int i=in.read(buf,0,buf.length);\n  if (i > 0) {\n    pos=0;\n    count=i;\n  }\n}\n", "\tpublic String toString () {\n\t\tif (!label.equals (\"\")) return label;\n\t\telse return \"(\" + getX () + \",\" + getY () + \")\";\n\t}\n", "    public void add(SearchResult line) {\n        Assert.that(line!=null,\"Attempting to add null line\");\n        Integer key=new Integer(line.getSize());\n        List lines=(List)map.get(key);\n        if (lines==null) {\n            lines=new LinkedList();\n            map.put(key, lines);\n        }\n        \n        lines.add(line);        \n    }\n", "public static String checkNotEmpty ( String value , String name , Location location ) throws EvalException { if ( value . isEmpty ( ) ) { throw new EvalException ( location , String . format ( STR_ , name ) ) ; } return value ; }", "public BroadcastTriggerListener ( String name , List < TriggerListener > listeners ) { this ( name ) ; this . listeners . addAll ( listeners ) ; }", "void clear() {\n        offset = intLen = 0;\n        for (int index=0, n=value.length; index < n; index++)\n            value[index] = 0;\n    }", "    public boolean equalByName(@Nonnull final SymbolLiteral symbol) {\n        if(this.fType == symbol.fType) {\n            if(getNormalizedName().equals(symbol.getNormalizedName())) {\n                return true;\n            }\n        }\n        return false;\n    }\n", "public void applyToAncestorsUpTo( Type stopType,\n                                      Operation operation ) {\n        PlanNode ancestor = getParent();\n        while (ancestor != null) {\n            if (ancestor.getType() == stopType) return;\n            operation.apply(ancestor);\n            ancestor = ancestor.getParent();\n        }\n    }", "\tpublic boolean hasHighPriority() {\n\t\treturn resolutionSelector.hasHighPriority();\n\t}\n", "public byte[] handleRequest(String request) throws IOException, MapRequestFormatException {\n  Properties requestProperties=convertRequestToProps(request);\n  String requestType=requestProperties.getProperty(REQUEST);\n  if (requestType != null) {\n    if (requestType.equalsIgnoreCase(MAP)) {\n      Debug.message(\"imageserver\",\"MRH: Map request...\");\n      return handleMapRequest(requestProperties);\n    }\n else {\n      throw new MapRequestFormatException(\"Request type not handled: \" + requestType);\n    }\n  }\n else {\n    throw new MapRequestFormatException(\"Request not understood: \" + request);\n  }\n}\n", "private long doUnwrap(ByteBuffer[] userBuffers, int off, int len) throws IOException {\n        if(anyAreSet(state, FLAG_CLOSED)) {\n            throw new ClosedChannelException();\n        }\n        if(outstandingTasks > 0) {\n            return 0;\n        }\n        if(anyAreSet(state, FLAG_READ_REQUIRES_WRITE)) {\n            doWrap(null, 0, 0);\n            if(allAreClear(state, FLAG_WRITE_REQUIRES_READ)) { //unless a wrap is immediately required we just return\n                return 0;\n            }\n        }\n        boolean bytesProduced = false;\n        PooledByteBuffer unwrappedData = this.unwrappedData;\n        //copy any exiting data\n        if(unwrappedData != null) {\n            if(userBuffers != null) {\n                long copied = Buffers.copy(userBuffers, off, len, unwrappedData.getBuffer());\n                if (!unwrappedData.getBuffer().hasRemaining()) {\n                    unwrappedData.close();\n                    this.unwrappedData = null;\n                }\n                if(copied > 0) {\n                    readListenerInvocationCount = 0;\n                }\n                return copied;\n            }\n        }\n        try {\n            //we need to store how much data is in the unwrap buffer. If no progress can be made then we unset\n            //the data to unwrap flag\n            int dataToUnwrapLength;\n            //try and read some data if we don't already have some\n            if (allAreClear(state, FLAG_DATA_TO_UNWRAP)) {\n                if (dataToUnwrap == null) {\n                    dataToUnwrap = bufferPool.allocate();\n                }\n                int res;\n                try {\n                    res = source.read(dataToUnwrap.getBuffer());\n                } catch (IOException | RuntimeException | Error e) {\n                    dataToUnwrap.close();\n                    dataToUnwrap = null;\n                    throw e;\n                }\n                dataToUnwrap.getBuffer().flip();\n                if (res == -1) {\n                    dataToUnwrap.close();\n                    dataToUnwrap = null;\n                    notifyReadClosed();\n                    return -1;\n                } else if (res == 0 && engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.FINISHED) {\n                    //its possible there was some data in the buffer from a previous unwrap that had a buffer underflow\n                    //if not we just close the buffer so it does not hang around\n                    if(!dataToUnwrap.getBuffer().hasRemaining()) {\n                        dataToUnwrap.close();\n                        dataToUnwrap = null;\n                    }\n                    return 0;\n                }\n            }\n            dataToUnwrapLength = dataToUnwrap.getBuffer().remaining();\n\n            long original = 0;\n            if (userBuffers != null) {\n                original = Buffers.remaining(userBuffers);\n            }\n            //perform the actual unwrap operation\n            //if possible this is done into the the user buffers, however\n            //if none are supplied or this results in a buffer overflow then we allocate our own\n            SSLEngineResult result;\n            boolean unwrapBufferUsed = false;\n            try {\n                if (userBuffers != null) {\n                    result = engine.unwrap(this.dataToUnwrap.getBuffer(), userBuffers, off, len);\n                    if (result.getStatus() == SSLEngineResult.Status.BUFFER_OVERFLOW) {\n                        //not enough space in the user buffers\n                        //we use our own\n                        unwrappedData = bufferPool.allocate();\n                        ByteBuffer[] d = new ByteBuffer[len + 1];\n                        System.arraycopy(userBuffers, off, d, 0, len);\n                        d[len] = unwrappedData.getBuffer();\n                        result = engine.unwrap(this.dataToUnwrap.getBuffer(), d);\n                        unwrapBufferUsed = true;\n                    }\n                    bytesProduced = result.bytesProduced() > 0;\n                } else {\n                    unwrapBufferUsed = true;\n                    if (unwrappedData == null) {\n                        unwrappedData = bufferPool.allocate();\n                    } else {\n                        unwrappedData.getBuffer().compact();\n                    }\n                    result = engine.unwrap(this.dataToUnwrap.getBuffer(), unwrappedData.getBuffer());\n                    bytesProduced = result.bytesProduced() > 0;\n                }\n            } finally {\n                if (unwrapBufferUsed) {\n                    unwrappedData.getBuffer().flip();\n                    if (!unwrappedData.getBuffer().hasRemaining()) {\n                        unwrappedData.close();\n                        unwrappedData = null;\n                    }\n                }\n                this.unwrappedData = unwrappedData;\n            }\n\n            if (result.getStatus() == SSLEngineResult.Status.CLOSED) {\n                if(dataToUnwrap != null) {\n                    dataToUnwrap.close();\n                    dataToUnwrap = null;\n                }\n                notifyReadClosed();\n                return -1;\n            }\n            if (!handleHandshakeResult(result)) {\n                if (this.dataToUnwrap.getBuffer().hasRemaining()\n                        && result.getStatus() != SSLEngineResult.Status.BUFFER_UNDERFLOW\n                        && dataToUnwrap.getBuffer().remaining() != dataToUnwrapLength) {\n                    state |= FLAG_DATA_TO_UNWRAP;\n                } else {\n                    state &= ~FLAG_DATA_TO_UNWRAP;\n                }\n                return 0;\n            }\n            if (result.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW) {\n                state &= ~FLAG_DATA_TO_UNWRAP;\n            } else if (result.getStatus() == SSLEngineResult.Status.BUFFER_OVERFLOW) {\n                UndertowLogger.REQUEST_LOGGER.sslBufferOverflow(this);\n                IoUtils.safeClose(delegate);\n            } else if (this.dataToUnwrap.getBuffer().hasRemaining() && dataToUnwrap.getBuffer().remaining() != dataToUnwrapLength) {\n                state |= FLAG_DATA_TO_UNWRAP;\n            } else {\n                state &= ~FLAG_DATA_TO_UNWRAP;\n            }\n            if (userBuffers == null) {\n                return 0;\n            } else {\n                long res = original - Buffers.remaining(userBuffers);\n                if(res > 0) {\n                    //if data has been successfully returned this is not a read loop\n                    readListenerInvocationCount = 0;\n                }\n                return res;\n            }\n        } catch (SSLException e) {\n            try {\n                try {\n                    //we make an effort to write out the final record\n                    //this is best effort, there are no guarantees\n                    clearWriteRequiresRead();\n                    doWrap(null, 0, 0);\n                    flush();\n                } catch (Exception e2) {\n                    UndertowLogger.REQUEST_LOGGER.debug(\"Failed to write out final SSL record\", e2);\n                }\n                close();\n            } catch (Throwable ex) {\n                //we ignore this\n                UndertowLogger.REQUEST_LOGGER.debug(\"Exception closing SSLConduit after exception in doUnwrap\", ex);\n            }\n            throw e;\n        } catch (RuntimeException|IOException|Error e) {\n            try {\n                close();\n            } catch (Throwable ex) {\n                //we ignore this\n                UndertowLogger.REQUEST_LOGGER.debug(\"Exception closing SSLConduit after exception in doUnwrap\", ex);\n            }\n            throw e;\n        } finally {\n            boolean requiresListenerInvocation = false; //if there is data in the buffer and reads are resumed we should re-run the listener\n            //we always need to re-invoke if bytes have been produced, as the engine may have buffered some data\n            if (bytesProduced || (unwrappedData != null && unwrappedData.isOpen() && unwrappedData.getBuffer().hasRemaining())) {\n                requiresListenerInvocation = true;\n            }\n            if (dataToUnwrap != null) {\n                //if there is no data in the buffer we just free it\n                if (!dataToUnwrap.getBuffer().hasRemaining()) {\n                    dataToUnwrap.close();\n                    dataToUnwrap = null;\n                    state &= ~FLAG_DATA_TO_UNWRAP;\n                } else if (allAreClear(state, FLAG_DATA_TO_UNWRAP)) {\n                    //if there is not enough data in the buffer we compact it to make room for more\n                    dataToUnwrap.getBuffer().compact();\n                } else {\n                    //there is more data, make sure we trigger a read listener invocation\n                    requiresListenerInvocation = true;\n                }\n            }\n            //if we are in the read listener handshake we don't need to invoke\n            //as it is about to be invoked anyway\n            if (requiresListenerInvocation && (anyAreSet(state, FLAG_READS_RESUMED) || allAreSet(state, FLAG_WRITE_REQUIRES_READ | FLAG_WRITES_RESUMED)) && !invokingReadListenerHandshake) {\n                runReadListener(false);\n            }\n        }\n    }", "    public void sendNickInUse(Client client, String nick) {\n        client.send(\"NICKINUSE \" + nick);\n    }\n", "public void onStarted ( ) { }", "public static NeuralNetwork readFrom(String filename) throws IOException, ClassNotFoundException {\n  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(filename));\n  NeuralNetwork net=(NeuralNetwork)ois.readObject();\n  ois.close();\n  return net;\n}\n", "public Future<AuthenticationResult> acquireTokenByAuthorizationCode(\r\n            final String authorizationCode, final URI redirectUri,\r\n            final AsymmetricKeyCredential credential,\r\n            final AuthenticationCallback callback)\r\n            throws AuthenticationException {\r\n        return this.acquireTokenByAuthorizationCode(authorizationCode,\r\n                redirectUri, credential, null, callback);\r\n    }", "public ThreadRegisterValues ( final ThreadRegisters values ) { m_tid = values . getTid ( ) ; for ( final RegisterValue value : values . getRegisters ( ) ) { m_values . add ( new Register ( value ) ) ; } }", "public Vector2 abs ( ) { x = Math . abs ( x ) ; z = Math . abs ( z ) ; return this ; }", "public void destroySubcontext(String name) throws NamingException {\n  destroySubcontext(nameParser.parse(name));\n}\n", "public void cleanup() throws ResourceException {\n\n        if (TraceComponent.isAnyTracingEnabled() && TRACE.isEntryEnabled()) {\n            SibTr.entry(this, TRACE, \"cleanup\");\n        }\n\n        // Invalidate any currently associated connections\n        ", "public TransferEntropyCalculatorMultiVariateKraskov ( String calculatorName ) throws InstantiationException , IllegalAccessException , ClassNotFoundException { super ( calculatorName ) ; if ( calculatorName . equalsIgnoreCase ( COND_MI_CALCULATOR_KRASKOV1", "private void grow(){\n  if (keys == null || nkeys >= keys.length) {\n    String[] nk=new String[nkeys + 4];\n    String[] nv=new String[nkeys + 4];\n    if (keys != null)     System.arraycopy(keys,0,nk,0,nkeys);\n    if (values != null)     System.arraycopy(values,0,nv,0,nkeys);\n    keys=nk;\n    values=nv;\n  }\n}\n", "\tpublic List removeTopItems(int a, int b) {\n\t\treturn removeChildren(a, b);\n\t}\n", "static Object find(String factoryId, String fallbackClassName)\n        throws SOAPException\n    {\n\n        Object obj = find(factoryId);\n        if (obj != null)\n            return obj;\n\n        ClassLoader classLoader;\n        try {\n            classLoader = Thread.currentThread().getContextClassLoader();\n        } catch (Exception x) {\n            throw new SOAPException(x.toString(), x);\n        }\n\n        if (fallbackClassName == null) {\n            throw new SOAPException(\n                \"Provider for \" + factoryId + \" cannot be found\", null);\n        }\n\n        return newInstance(fallbackClassName, classLoader);\n    }", "  public GrammarToken getGrammarToken(String string) {\n    GrammarToken result = DGTF.getSpecialGrammarToken(string);\n    if (result == null) {\n      result = new ExtendedGrammarToken(categoryFactory, string);\n    }\n    return result;\n  }\n", "public PidfParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {\n  try {\n    SAXParserFactory factory=SAXParserFactory.newInstance();\n    SAXParser parser=factory.newSAXParser();\n    parser.parse(mInputSource,this);\n    return this;\n  }\n catch (  IOException e) {\n    throw new ParseFailureException(\"Failed to parse input source!\",e);\n  }\n}\n", "\tpublic String join(String separator) throws JSONException {\n\t\tint len = length();\n\t\tStringBuffer sb = new StringBuffer();\n\n\t\tfor (int i = 0; i < len; i += 1) {\n\t\t\tif (i > 0) {\n\t\t\t\tsb.append(separator);\n\t\t\t}\n\t\t\tsb.append(JSONObject.valueToString(myArrayList.elementAt(i)));\n\t\t}\n\t\treturn sb.toString();\n\t}\n", "public static < T > T newBean ( BeanManager bm , Class < T > clazz ) { Set < Bean < ? > > beans = bm . getBeans ( clazz ) ; final Bean < T > bean = ( Bean < T > ) bm . resolve ( beans ) ; final CreationalContext < T > ctx = bm . createCreationalContext ( bean ) ; return ( T ) bm . getReference ( bean , clazz , ctx ) ; }", "\tpublic Integer nrOfErrorJobs(){\n\t\t\n\n\t\tInteger nr = 0;\n\t\tfor ( int i = 0; i < Nods.size(); i++ )\n\t\t{\n\t\t\tif(taskStatus.get(Nods.get(i).index)==0)\n\t\t\t\tnr++;\n\t\t}\n\t\treturn nr;\n\t}\n", "  public SubscriptionEntry updateEntry(SubscriptionEntry updatedEntry) {\n    if (updatedEntry == null) {\n      System.out.println(moduleName + \"The updatedEntry is NULL!\");\n      return null;\n    }\n    \n    String identifier = updatedEntry.getIdentifier();\n    //subscriptions.remove(identifier);\n    Object entry = subscriptions.put(identifier, updatedEntry);\n    \n    if (entry != null) {\n      System.out.println(moduleName + \"Updated the subscriptionEntry\");\n      return (SubscriptionEntry) entry;\n    }\n    \n    return null;\n  }\n", "public static boolean bookmarkNodeExists(Context context,long nodeId){\n  Boolean result=chromeBrowserProviderCall(Boolean.class,ChromeBrowserProvider.CLIENT_API_BOOKMARK_NODE_EXISTS,context,argsToBundle(nodeId));\n  return result != null ? result.booleanValue() : false;\n}\n", "public void setParameters(java.util.Collection<ParameterMetadata> parameters) {\n        if (parameters == null) {\n            this.parameters = null;\n            return;\n        }\n\n        this.parameters = new com.amazonaws.internal.SdkInternalList<ParameterMetadata>(parameters);\n    }", "protected String describeOperation ( MBeanOperationInfo operation ) { StringBuilder buf = new StringBuilder ( ) ; buf . append ( operation . getReturnType ( ) ) . append ( STR_ ) . append ( operation . getName ( ) ) . append ( STR_ ) ; MBeanParameterInfo ", "public static boolean startCheckPrint(int C_Payment_ID,boolean IsDirectPrint){\n  int HR_PaySelectionCheck_ID=getHRPaySelectionCheckById(Env.getCtx(),C_Payment_ID,null);\n  if (HR_PaySelectionCheck_ID > 0) {\n    return startDocumentPrint(ReportEngine.HR_CHECK,HR_PaySelectionCheck_ID,null,-1,IsDirectPrint);\n  }\n  boolean ok=MPaySelectionCheck.deleteGeneratedDraft(Env.getCtx(),C_Payment_ID,null);\n  int C_PaySelectionCheck_ID=0;\n  MPaySelectionCheck psc=MPaySelectionCheck.getOfPayment(Env.getCtx(),C_Payment_ID,null);\n  if (psc != null)   C_PaySelectionCheck_ID=psc.getC_PaySelectionCheck_ID();\n else {\n    psc=MPaySelectionCheck.createForPayment(Env.getCtx(),C_Payment_ID,null);\n    if (psc != null)     C_PaySelectionCheck_ID=psc.getC_PaySelectionCheck_ID();\n  }\n  return startDocumentPrint(ReportEngine.CHECK,C_PaySelectionCheck_ID,null,-1,IsDirectPrint);\n}\n", "@SuppressWarnings({\"unchecked\"}) public FinalizableReferenceQueue(){\n  ReferenceQueue<Object> queue;\n  boolean threadStarted=false;\n  try {\n    queue=(ReferenceQueue<Object>)startFinalizer.invoke(null,FinalizableReference.class,this);\n    threadStarted=true;\n  }\n catch (  IllegalAccessException e) {\n    throw new AssertionError(e);\n  }\ncatch (  Throwable t) {\n    logger.log(Level.INFO,\"Failed to start reference finalizer thread.\" + \" Reference cleanup will only occur when new references are\" + \" created.\",t);\n    queue=new ReferenceQueue<Object>();\n  }\n  this.queue=queue;\n  this.threadStarted=threadStarted;\n}\n", "String matchPredicateOperand ( String alias ) ;", "public static String join(final String[] strings,final String separator) throws IllegalArgumentException {\n  if (strings == null) {\n    throw new IllegalArgumentException(\"Input array 'strings' can't be null\");\n  }\n  if (separator == null) {\n    throw new IllegalArgumentException(\"separator can't be null\");\n  }\n  StringJoiner joiner=new StringJoiner(separator);\n  for (  String el : strings) {\n    joiner.add(el);\n  }\n  return joiner.toString();\n}\n", "public ModifierAdjustment withMethodModifiers(ElementMatcher<? super MethodDescription> matcher,\n                                                  List<? extends ModifierContributor.ForMethod> modifierContributors) {\n        return withInvokableModifiers(isMethod().and(matcher), modifierContributors);\n    }", "public IsComposingParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {\n  try {\n    SAXParserFactory factory=SAXParserFactory.newInstance();\n    SAXParser parser=factory.newSAXParser();\n    parser.parse(mInputSource,this);\n    return this;\n  }\n catch (  IOException e) {\n    throw new ParseFailureException(\"Failed to parse input source!\",e);\n  }\n}\n", "public T delayRotationY ( float end ) { getDelayedProcessor ( ) . addProcess ( ROTATION_Y , end ) ; return self ( ) ; }", "public void convertToSparse() {\n        switch ( mat.getType() ) {\n            case DDRM: {\n                DMatrixSparseCSC m = new DMatrixSparseCSC(mat.getNumRows(), mat.getNumCols());\n                ConvertDMatrixStruct.convert((DMatrixRMaj) mat, m,0);\n                setMatrix(m);\n            } break;\n            case FDRM: {\n                FMatrixSparseCSC m = new FMatrixSparseCSC(mat.getNumRows(), mat.getNumCols());\n                ConvertFMatrixStruct.convert((FMatrixRMaj) mat, m,0);\n                setMatrix(m);\n            } break;\n\n            case DSCC:\n            case FSCC:\n                break;\n            default:\n                throw new RuntimeException(\"Conversion not supported!\");\n        }\n    }", "    public OperationType getOperationTypeAt(int index) {\n        Object o = getItemAt(index);\n        if (o != null) {\n            return ((ComboItem) o).type;\n        }\n        return null;\n    }\n", "    protected void firePageChanged() {\n        // Guaranteed to return a non-null array\n        Object[] list = listeners.getListenerList();\n        \n        // Process the listeners last to first, notifying\n        // those that are interested in this event\n        for ( int i = list.length-2; i >= 0; i -= 2) {\n            ((WizardPageListener)list[i+1]).pageChanged(new WizardPageEvent(this));\n        }\n    }\n", "public CViewSaverOperation ( final String description ) { CGlobalProgressManager . instance ( ) . add ( this ) ; m_progressPanel . setText ( description ) ; m_progressPanel . start ( ) ; }", "public static String stripNonValidXMLCharacters(String in)\n    {\n        StringBuffer out = new StringBuffer(); // Used to hold the output.\n        char current; // Used to reference the current character.\n\n        if(in == null || (\"\".equals(in))) return \"\"; // vacancy test.\n        for(int i = 0; i < in.length(); i++)\n        {\n            current = in.charAt(i); // NOTE: No IndexOutOfBoundsException caught here; it should not happen.\n            if ((current == 0x9)\n                || (current == 0xA)\n                || (current == 0xD)\n                || ((current >= 0x20) && (current <= 0xD7FF))\n                || ((current >= 0xE000) && (current <= 0xFFFD))\n                || ((current >= 0x10000) && (current <= 0x10FFFF)))\n                out.append(current);\n        }\n        return out.toString();\n    }", "boolean isCancelled ( ) ;", "public static long[] join(long[] arrayA,long... arrayB){\n  if ((arrayB == null) || (arrayB.length == 0)) {\n    return arrayA;\n  }\n  if ((arrayA == null) || (arrayA.length == 0)) {\n    return arrayB;\n  }\n  long[] array=new long[arrayA.length + arrayB.length];\n  System.arraycopy(arrayA,0,array,0,arrayA.length);\n  System.arraycopy(arrayB,0,array,arrayA.length,arrayB.length);\n  return array;\n}\n", "boolean isTagged ( CTag tag ) ;", "public ConditionalTransferEntropyCalculatorViaCondMutualInfo ( ConditionalMutualInfoCalculatorMultiVariate condMiCalc ) throws Exception { if ( condMiCalc == null ) { throw new Exception ( STR_ + STR_ ) ; } construct ( condMiCalc ) ; }"], "comment": ["add an inter - pass detector ordering constraint .", "initialize a type descriptor builder using the specified type name and super type descriptor .", "creates gene archive and peptide archive entries for changed and deleted items", "move the access to another address", "remove a role from group", "cf method matches from virtualevent", "answers an integer indicating the relative positions of the receiver and the argument in the natural order of elements of the receivers class", "returns a population that represents the intersection disjunction of the two selectionalgorithms specified in the constructor", "returns a formatter that can be use by the current thread if needed to convert date objects to the internal representation .", "a factory for back to state states", "returns whether the encoding verification mode is enabled .", "creates a new thread information panel .", "set a typequalifierannotation on a method return value", "generate a new lease id", "proxy an interface so each message called is written to a file for replay .", "used internally to report that a reference count has changed .", "construct a plotter with the default plot name", "retrieves a specified object from a resource", "calculates the sum of all y - values", "add 2 arrays", "returns if there currently is an active filtering thread", "create an iterator which starts directly iterating over the buffer , thus skipping the external storage .", "create a new thresholdvalues", "send message to session , check right before", "initialise the cipher and , possibly , the initialisation vector ( iv ) .", "utility for security checks", "compares to issue by their key ordering .", "bit - sets - for each repeating pp , for each of its repeating terms , the term ordinal values is set", "adds a filetype dot extension to filter against", "process a version string to determine the major and minor versions of the file .", "marshall the given parameter object .", "returns the empty string if the given string is equal to the given test , the string if not .", "retrieves the value of the fixedsize property", "private method that actually parses the input to read a chemfile object .", "creates the initial layout of the jfirewelcomeperspective", "determines whether a chunk of memory is present in the simulated target process memory .", "shows the dialog", "generate multi mcf class code", "extend a set of groundings with the alternative values for the variable", "returns a string that has been decoded .", "reads the requested resource from the opencms vfs , and in case a directory name is requested , the default files of the directory will be looked up and the first match is returned .", "unwraps class wrapped by guice injector .", "invoked by gerrit before the assignee of a change is modified .", "returns the minimum and maximum values for the dataset ' s range ( y - values ) , assuming that the series in one category are stacked .", "marshall the given parameter object .", "marshall the given parameter object .", "get an element at a certain position", "add tooltips to the crops", "construct event to notify views navigation will move forward .", "check all online servers are health & remove dead online servers", "removes the activitymonitor", "soften a checkedbipredicate that can throw checked exceptions to a standard bipredicate that can also throw checked exceptions ( without declaring them )", "return the list of galleries created by a user .", "get all interface or annotation classes found during the scan .", "convinience method for parsing the param value according to the correct semantics and applying the default of \" lower \"", "creates a hashmap that can be used to query the soundcloud api for tracks .", "response information to client", "prepare the revoke of a persistent id .", "store the four column values for the given column index into the vector store", "wrap type in class lt gt if usingclass true", "creates loads resizes and validates memory storage for vector of given size .", "exception handler if we are unable to parse a json value into a java representation", "produces a string representation of the unsigned short s in base radix .", "walk through the expression and build a token queue , and a map of the top - level elements .", "returns true if name matches against template .", "compress data to other type through sub value for example : 1 .", "the object returned by this method will be written to the space .", "parses a json formatted string into raw tokens for streaming or tree iteration", "if just a single image was processed it will process it again .", "sets the ooaugp property", "creates a new triggergroupwrapper from a jsonvalue object", "removes all added listeners .", "rembtn actionperformed", "returns the database with the given name , or null if it doesn ' t exist .", "visits a type instruction .", "return the tests included in this test suite .", "overwrite the default progressview to represent loading progress state", "getter for property postconstructcalled .", "mails the forgot password link .", "send an opening handshake request to the websocket server .", "get the null string value .", "checks if the given interval lies within the maximum borders .", "fetches all subclass relationships ( p279 ) using the sparql endpoint , and uses them to compute direct and indirect superclasses of each class .", "use this api to fetch transformpolicy _ binding resource of given name .", "put a string in the buffer .", "revokes role from user", "checks whether this blip references contains any matches or not", "pending ( ) perhaps reactivate this if the eg wants event loop detection .", "sets the other value for radio or checkbox type custom field with map", "creates an operation expression on the specified target object .", "create a new manifestentryverifier object .", "the tags you want to add to the project .", "construct a nar class loader with the specific parent .", "cast to identifieduser if possible .", "a method called when replaying of some configuration starts", "execute the translation from cobol to xml schema .", "adds a long to the constant pool of the class being build .", "main method which assigns mmff94 partial charges", "only removes the davsession object from the given request object", "read a locally available filmlist .", "determines the font style based on the uml model", "serialize an object into a postgresql string .", "edits a global function comment .", "closes all gates and closes all pooled outgoing connections", "notification that this widget has been added to a specified container", "creates a new instance with the given code interpreted as a string message and metadata .", "checks if the given input is a valid encrypted string .", "fully - resolved values passed into the step before execution .", "use with caution this will unmarshall a complete mzml object and will likely cause an outofmemoryerror for very large files", "returns a bson version document representing a new version with a new instance id , and version counter of zero .", "sets the attributes to its initial values", "test read and write empty clusterpolicy object", "list data listener interval removed method .", "remove xml tags from the given string", "perform import for each file .", "fetches log entries and writes them until receiving a poison task .", "called when page is scrolled .", "converts a float value to a byte binary float value .", "create a bounding box filter from the bounds coordinates .", "removes a connection matching the client id specified .", "put or replace a boolean value in the jsonarray .", "returns the iso8601 string of a given date - time instance with timezone information , trying to be as closed as possible to what the joda date - time library would return .", "method for adding a task instance", "use the method to set up the activity which residemenu need to show", "if containers contains target source container", "this method decodes an url with encoded query string", "adds one more cabinet to the equipment of this department", "removes a path segment .", "this function validates the process output for errors .", "checks consistency of create - - > open - - > append - - > open operations with different buffer sizes .", "creates an stringprep object after reading the input stream .", "clear any existing session .", "return the tag that matches the given class", "recursively creates the directory specified by the provided path .", "removes all the agents goals", "sets the messagedetail of the event .", "gets the wspd value for this weatherparameterstype", "gets the value of the texturecoorddimensions6 property", "swap two elements of a char array at the specified positions", "validate namespace of id @ domain", "default edit elment will pop the base edit tab dialog", "clean up after boosting .", "restore the object to the initial state .", "register to receive notification of repository creation and disposal", "creates a record id for the record having the specified id in the specified block .", "reads a single character from this reader and returns it as an integer with the two higher - order bytes set to 0 .", "determines on which side of the given line the point is .", "add a public enum to the types of this compilation unit", "reads one packet from given bytebuffer", "scale the frequencies to a new total .", "resets the input and output file before writing to the output again", "classify an observation .", "copy data from the given recorder into the given buffer , and append to the complete recording .", "an array of the names of all existing databases .", "adds a value to the list of values of the given key", "converts from the progress along the curve to a scale .", "marshall the given parameter object .", "deserialises an object from a byte array to an object of a specified type .", "visits a non standard attribute of the field .", "this method runs in a separate thread", "a new pattern has begun .", "creates an instance from an iso date .", "provides classes to be tested .", "try to open a stream as gzip , if it starts with the gzip magic .", "expprimaria valor leftexpression this expressao", "allows subclasses to provide their own visitor .", "overwrites and / or appends the cache from a byte array .", "tries to obtain a user name .", "generates the header for the extended report view .", "check whether the value is already assigned", "alter this object properties", "escapes any xml entities in the text .", "checks request url against this filter rule .", "add a gl20node with a gl20resourceshape resource to the scene", "returns the csv - escaped label for the given entity based on the terms in the given document .", "marks this viewtreeobserver as not alive", "use this method if you only with to connect to a single server", "sends a binding request to the specified server address with only change port flag set to true and change ip flag to false .", "get the absolute value", "adjusts this components preferredsize attribute to the diagrams size", "marshal from an array of source types to an array of dest types .", "returns whether it is allowed to perform a delete operation on the given element .", "display warning with warning icon", "stream response to given output stream", "visits the enclosing class of the class", "this method terminates the client", "checks emm policy on the device .", "extracts a last name of full name string", "get the methoddescriptor that hopefully uniqely names this method", "utility method to normalize the value of datastream location depending on the translation context .", "delete by table name", "this method takes a string and sets this acls name", "this function generates the coefficients of all polynomials in this layer at random using random generator .", "updates the cp definition specification option value in the database or adds it if it does not yet exist .", "returns the colorcontrasts value of this deepskyfindingoc", "this runs the checkindex tool on the reader .", "puts a shared element to transitions and names .", "construct a method type object", "gets the first recognized compiler from the compilation targets .", "create a groupmatcher that matches trigger groups starting with the given string .", "set a listener to get notification of completion of animation", "returns a reference to a type parameter bound of a generic class or method .", "iterate through all classes and construct documentation for them .", "returns the globally valid instance of the tutorial dialog .", "resume all jobs whose group is anything", "list available manager commands", "determines whether another task is available or not .", "method for executing the action", "computes and returns the value of svuid .", "adds a ( binary ) string annotation for an event .", "compute the new evaluation . . .", "from the result of the fft ( in the frequency domain ) , compute the absolute value for each positive frequency , i . e . the norm of each complex number in the lower half of the array", "returns character and moves bufferoffset backward", "set the number of the display functions", "convert a version in the form \" x . y . z \" ( any length ) into an array of integers \" [ x , y , z ] \" .", "this classloader never has classes of it ' s own , so only search the child classloaders and the parent classloader if one is provided", "limit leaseduration by limit , and check for negative value .", "saves a set of property changes .", "refresh the given object in the viewer", "determines if the specified coordinate is in the target touch zone for a horizontal bar handle .", "a debugging method that prints the whole invoice to system out", "removes the bomb sprite and starts the explosion", "invokes a closure passing it a new sql instance created from the given jdbc connection url and properties .", "puts the value on the target object attribute .", "for calling native methods taking one pointer to a byte array and returning an int", "zooms to the first occurrence of an address in a graph .", "combines a set of small txcommitmessages that belong to one transaction into a txcommitmessage that represents an entire transaction .", "sorts the mutablemultivalue instance by the usual order of its labels", "post reset request to server", "this is where we send the information from the", "build the summaries for the methods that belong to the given class .", "returns the offset of a certain year", "hashcode depends on columns", "create upload article with inline false", "pushes a messages onto the queue .", "draws a kind of compass , showing the world axis", "removes a listener that was previously notified about changes in the tree .", "start a reactive dataflow from a stream .", "create a selector of the form $ elementname [ $ attributename = $ attributevalue ]", "performs the processing of the abstract syntax tree", "checks if the candidate is annotated by the specified annotation or meta - annotation .", "writes text with out escaping .", "extend current variable definitions with a variable", "checks if the given path is a file", "places & geo resources", "check the proxy tasks states and proceed them", "returns the account with the given id .", "build search link to metadata that has had a change of status", "calculates flat ad rating considering distance to the point selected by user", "make sure the update has already executed before reset it .", "inserts the string representation of the boolean argument into this string buffer .", "adds the parameterizedtransformation", "switch the last remembered type to match the type of the given object .", "creates a new mousebuttonlistener object .", "creates a new local variable of the given type .", "assert that a field equals one of the provided values .", "construct with a known value of the object .", "creates a dataset for testing", "obtain the state that the last transition ( the transition with the ' highest ' character value ) points to .", "decode and sample down a bitmap from resources to the requested width and height .", "sends a complete binary message , invoking the callback when complete", "return true if a game should be loaded", "you are not supposed to instantiate this class .", "performs decryption of sequence number using derived key .", "check if query cq1 is contained in cq2 , syntactically .", "copy method that can be interrupted by a dj", "computes the decomposition of the provided matrix .", "this method is specifically designed for use during ejscontainer postinvoke processing .", "just calls patchingchain insertbefore internal pointers in code list are not altered", "hashes the given double array with the given hash function .", "applies normalization to a h = 3xn matrix", "creates expected version of the specified event number idempotence is guaranteed .", "defines the action to be performed on the stored object .", "returns true if the passed password equals the current password", "checkes if the modelid given in param is valid jsf calls it with every request because of rendered field check getmodelid and deletemodel after changing", "returns the largest power of 2 that is less than or equal to the the specified positive value .", "tokenizes a text file and writes the result to a writer .", "does not respect linebreaks !", "checks if a description is just a primitive .", "adds an url used for account linking .", "get a string property or null if it is not there . . .", "getarray method comment", "this method retrieves only the root actions", "sets the current value of this stringoption", "skips fields if their names are on the blacklist .", "read all remaining bytes from the stream", "import the transferable", "a subscribe action was unsuccessful notify user and update client history", "sets this texture to the data of the specified image", "returns the timers delay", "put bytes at the specified byte array position .", "this method causes burp to save all of its current configuration as a map of name value strings .", "reads secret property from the secret file .", "set the accept encoding header to gzip", "prints a character to standard output and flushes standard output .", "set the download location link", "removes an account from the system", "adds all items from the iterator to the collection .", "constructs a list iterator over the given hibernate query string .", "sets the ibpusl property", "create a transferable to use as the source for a data transfer .", "goes to the next paragraph", "returns the number of rows matching the dynamic query .", "add a point on the curve", "gets a specific stop .", "removes the element at the specified position in this list optional operation", "creates a dateformat appropriate to this calendar .", "returns the queue item if the owner is scheduled for execution in the queue , in reverse order", "convert integer array to int array", "updates the border text of the component .", "return true if the text position is within the line height boundaries .", "get the field set channel agent for the specified magnet power supply", "set a singleton of a particular interface in the context", "returns whether this cell includes any numeric commands", "two islands are competitors if there is a horizontal or vertical line which goes through both islands", "navigation link font awesome icon , can be one of the font awesome icon names .", "adds the specified window listener removing the default window listener behaviour", "retrieve the calendar used internally for timephased baseline calculation .", "handle a read line that is probably a seed .", "return whether the given field matches .", "returns true if chart x axis is by distance , false if by time .", "sets the name of the script .", "helper method that encapsulates the minimum logic for adding a job to a queue .", "reads a signed bit integer byte swapping if necessary .", "assigns an anomaly score to each data point , indicating how likely it is to be an anomaly relative to other points and seasonality factors .", "gets input method requests for the current client irrespective of input style", "release references so the gc can clean up dialog state .", "returns graph describing the tree .", "parses a given list of options", "called when the shape of the underlying data model is modified rows or columns inserted or removed", "creates a new , empty sort specification .", "load a text format embeddings file .", "loads the given build file", "convenience method to execute a command that is given as a single string .", "encode ' % ' if it is not an encoding sequence", "cancels a pending transfer for the specified certificate .", "stores user specific oauth token information in datastore", "get the end pc of the protected block", "return if the poller starts by sweeping the controlled directories or going immediatly to sleep", "executes a collection of pending commands", "this class cannot be instantiated .", "reports that the pack action processing has finished", "skips output so that position % align = = 0", "recursively find all in - lists , subquery , row comparisons found in the xml and munge them into the simpler thing we want to pass to the abstractparsedstmt .", "begin a group descriptor element", "creates a new save text field object .", "executes a statement that does not return a result .", "check if user is administrator and show field to change owner", "get the search range", "returns a new color with the saturation cut to one third the original , and the brightness moved one third closer to white .", "delete the ip lease documents .", "use this to disable a component if the runmode \" publish \" is not active .", "find the date on or before which objects expire based on the given date and the retention age specified in this object .", "initialization of the servlet .", "print out as a string the subpart of a sentence covered by this constituent", "adds the final boundary to the multipart message and closes streams .", "writes the send to the journal .", "creates a new typereference .", "adds modifiers to the given declaration and corresponding modifiers tree .", "rollback transactions stored in the log .", "get the subscriptions currently associated with this node as owner .", "replies the property for the second rectangle axis .", "returns true if the mime type is a standard image mime type", "test the match of this charset with the input text data which is obtained via the charsetdetector object .", "creates a new exception object .", "returns whether the raw module is complete .", "given the readable value , return the term value that will match it .", "if not already created , a new decorators element with the given value will be created .", "check if this folder is closed", "creates a new database in this instance .", "resets the control points of the edges that are connected to the given cells if not both ends of the edge are in the given cells array .", "method to catch velocity log messages .", "checks whether a given rule exists or not for a given subscription .", "get the reference to the ecore class definition", "cumulative density , static version", "get character races ( asynchronously ) get a list of character races - - -", "takes a uri and returns an id .", "called when a notification is updated .", "converts a list of bytes into a byte array .", "removes comments from the input stream", "returns an initiliazed instance of lessonfinishedform component", "determines the path extension , if any .", "returns true iff either node symbol or node is an opdefnode or thmorassumpdefnode whose source equals symbol .", "runs the action used to edit tag names", "get thing for given class and thing name .", "skips over the next object and all its children .", "below method will be used to add the scan result", "provide the root of the tre for the prttree method", "convert the sampa dialect used in mary into the sampa version used in this voice .", "adds an object that is notified about changes in the module .", "re centers the map to have the current address location be at the center of the map accounting for the map s width and height .", "indicates if the mime type belongs to the text xml family .", "it finds the setter method by the field .", "setter for quotations sets", "for a pair which is not a leaf", "retrieves the list of targethttpsproxy resources available to the specified project .", "sets the rotation matrix", "write the management protocol header .", "returns the request tag used by the componentviewpanel to request", "return an expression representing the given condition .", "computes loglikelihood given class values and estimated probablities .", "utility method to check through reflection if the class appears to be a junit . . x test suite i . e .", "resets the memory image source and byte backing array when the dft point size has changed", "add all members of other streamequivalenceclass to this one .", "adds the archivedescriptions contained in the configuration .", "returns the current status of the ccow common context .", "create logout confirmation view .", "copy all the files in a manifest from input to output .", "create an instance of photopickerhelper", "scan all the indices and related data object records , to find out the index record is existing but the related data object records is missing .", "called on load finished .", "get the root key of a tree of plugins .", "remove friend relationship between user and friend", "a reference to a convention", "returns true if the font property of this object should be used", "get view text of type name of compare object", "constructs a new point at the location of the given point .", "adds all elements in pparticipantslist to association participants", "get the timestamp created", "create a new generator that uses the specified number of bits for the counter portion of the keys .", "prints a disassembled view of the given attribute .", "create the instance", "pauses the trackdatahub .", "opens the camera driver and initializes the hardware parameters .", "returns the previous item in queue navigates towards the oldest added item or null if bottom already reached", "create a new property by parsing the given string .", "updates the originallength property", "gets the position of the connectionanchor of an faulthandler", "convert infix to postfix", "returns the content of a file as a string .", "locates a given method anywhere in the class inheritance hierarchy .", "returns a string representation of the current date", "getting namecomponent for path", "performs the closure ( containing batch operations ) within a batch .", "execute the command that s defined by the subclass following the command pattern .", "performs an assert to ensure that the setdocumentlocator method was invoked", "adds a listener to detect class loader changes .", "disables socket no delay option nagle s algorithm will be used .", "read and return a possibly null string", "get allcity list in swddistrict", "invoked after a new module was added to the database .", "sort the field array using a quicksort", "server query response to cash in a treasure train", "find the next clear bit .", "returns the first date value found for this tag", "returns the next element in the list iterator", "load all glyphs from the font definition", "reset all delta tokens", "this method is written to remove the duplicate elements in the compfeatureentityvector", "asserts that the error trace loops back to the state with the given number .", "generates a key with special length for des", "why", "checks for a valid html block .", "tests if object is a wddx object", "generates one example of the dataset .", "creates an empty mediaformat", "get text at the specified location from array", "helper method to remove the receiver from the argument array by producing a new array .", "called when a connection is terminated", "validates the loader .", "removal of all registered registry dependencies in the reversed order in which they where added .", "initializes the local comment of an instruction .", "inserts direct edit for empty collector lists .", "clears the table", "switches to the specified state", "sends an fcm message to the given set of stitch users with the given request payload .", "instantiates a sqlstatementparser and loads the map .", "invoke this method after you ve changed how node is to be represented in the tree .", "creates a proxy for the given interface .", "write byte array to request body", "add a file directory to the archive", "checks if is period active .", "retrieves the named object following links except for the terminal atomic component of the name", "create the mbeans for the specified service and its nested components", "create a new instance of itemfragment", "moves the cursor a relative number of results either positive or negative", "implements all queuing methods .", "discards a serviceregistrar through the discovery manager .", "perform am uri query parameter ( name or value ) escape operation on a reader input , writing results to a writer .", "confirm that the local values average correctly back to the average value", "scroll out contentview and finish the activity", "creates a new exception object .", "sets attribute rn", "updates the tick labels layout", "mark the start of a batch change", "if the query failed call this .", "throws an illegalstateexception if the current instance of the servicediscoverymanager has been terminated .", "creates a new settings object backed by graph settings from the configuration file .", "set the highlight color", "clear the cache for the view specify", "checks for source editing", "positions to next row and returns true if there are data to be read .", "sets permissions on a given file .", "using previously computed results it efficiently finds the disparity in the remaining rows .", "compares with other version", "invoke the setters for the given variables on the given instance .", "start a put request to the given url along with the query params", "returns an array containing all of the instructions in this list .", "reschedule a task", "called when a user loads a game will set up the trees and all relevant members and finally notify observers", "easing equation function for an exponential t easing out in deceleration until halfway then acceleration .", "get the directions url", "this method is intended for internal use only .", "visit an edge connecting two basicblocks in the path being visited .", "add a polygon to the map", "this method decodes the byte array in base 64 encoding into a char array base 64 encoding has to be according to the specification given by the rfc 1521 ( 5 . 2 ) .", "find the instance of a given class type that is closest to a given instance .", "tests various methods of this class .", "returns a based depth within the object graph of the current object being serialized .", "checks if the path given exists .", "will re initialize the horizontallistview to remove all child views rendered and reset to initial configuration .", "get the checksum for this font .", "sets dhowdate property", "returns getname if possibleliteral startswith getname or null otherwise", "creates a union wrapping a value of the third type", "update the model", "files in order of precedence", "simple api entry point .", "perform an initial save of a previously unsaved cometacognitivevariable entity", "handles a line from a tailer .", "convert tag value to an int bit .", "renders the label including halo to the submitted", "creates the txt new name", "create a gaussian kernel for the transformation .", "copies the specified range of the specified array into a new array .", "populate list of levels .", "creates a name from a sequence of upper - underscore strings .", "this is used by the shapefile class to get convert the current data contained in this object into a bytebuffer than can then be written to disc .", "handles the case where rendering throws an exception .", "determines whether the node is visible or not .", "add a custom transformation to be applied to the image .", "casts the specified value to float data type .", "close this config and all the related resources", "this method return operation id for given op name / type pair .", "writes the cart to the given dataout in wagon format", "creates a new empty learning objet with name name", "long clicks bottom and right corner of the ui element", "transceives the byte [ ] command to the isocard .", "replaces the specified characters in this text with the specified replacement sequence", "overloads the leftshift operator to add objects to an objectoutputstream .", "returns the first output signal output1", "bind one implementation as the item using a unique annotation .", "unselects the idrawable after setting it to modified then redraws the canvas", "register and handlet linked to a method", "parse a json data structure from content from a reader", "returns all datacollectors that are used in the resultfile .", "send request to sony badge content provider to set badge in sony home launcher .", "access everything on all processinstance objects which is not in the default fetch group from hibernate but needs to be accesible from the client", "check whether or not touch based scrolling is disabled", "add a configuration to the delayed pool", "creates a hostcandidate for the specified transport address .", "computes the l2 norm ( euclidean length ) of the given tuple", "reshapes the given single dimensional array into a d array of the given size", "generates javascript source code for an ast , doesn ' t generate source map info .", "get record id columnname", "removes a tag from the view .", "initializes this facade .", "checks if any element in the set contains the term .", "colours name text field greenish", "fired when the request is started override to handle in your own code", "executes an asynchronous put request on the configured uri ( asynchronous alias to ` put ( consumer ) ` ) , with additional configuration provided by the configuration function .", "solves for x in the following equation :", "go to the serviceauctioninfo scene", "construct a new instance of this test case .", "expands the table if possible .", "creates the cascading prefix properties .", "gets the name of this friend .", "creates and initializes the scroll bar that is used to scroll through the data .", "add a detail formatter", "cancels the missed calls notification .", "returns the minimum number for the specific type the number helper handles .", "end the schema fragment for a feature type", "sets column index target area width and height", "destruction of the servlet .", "returns an enumeration of all the keys in this property list , including distinct keys in the default property list if a key of the same name has not already been found from the main properties list .", "write this value to a buffer .", "creates a new socket", "turns a current sax locator into a usable user message", "compute the local entropy values for the previously provided observations for the given variable using those previous observations to compute the pdfs .", "sets the application name", "sets the shadow matrix for the spot light from the input model / view matrix and the shadow camera projection matrix .", "protected void setfunctiondirectory ( resource functiondirectory ) { this . functionmapping = new", "creates the buffers we use to store information about the 3d world .", "remove selected vertex or selected edge from current editing graph", "returns the amount of free memory in the system .", "reads one or more wkt geometries from a string .", "this method is intended for internal use only .", "cycle code for raster line 0 reached", "read the snapshot from a stream .", "get the location of the id range offset for a segment .", "returns the vector of mappingobjects containing the begintlatoken and endtlatoken that are put in the mappingvector by a call of addonelineoftla .", "determines if the cy5laserpower has been modified", "adds a group of fields that can uniquely identify array elements for object arrays", "pre processes the pattern", "a list of values that are permitted for a parameter .", "creates an icecontrolledattribute object with the specified tie breaker value", "returns pull request url .", "creates a new view node .", "get the http method of this request", "this method checks the current position of the playableactor for collisions with blocks on the bottom side of the actor", "runs the report once all initialization is complete .", "calculates an 8 - bit checksum value from a string which uses sequential pairs of ascii characters to encode the hexadecimal values of a sequence of bytes .", "get the hash code", "gets the ui object associated with the mapper", "allows this input stream to be used within the closure , ensuring that it is flushed and closed before this method returns .", "adds the given string to the list of custom ticklabels", "this method updates the experiment including the roulette wheel the record table and the random variable graph and table", "puts the annotations of this annotation writer list into the given byte vector .", "always throws methodnotsupportedexception because the pop3 protocol doesnt support multiple folders", "get a number of cryptographically secure pseudo random bytes .", "writes default serializable fields to stream .", "this is a wrapper that calls for functions to parse the table name", "unpacks the compressed character translation table .", "based on the header name .", "converts value into float or returns null when conversion is not possible .", "loads the ini file", "parses the specified schedule expression and returns the result .", "adds several entries to the class path", "returns a list with all members of e ' s nova network , including e .", "process the attributes , which means to write out the currently collected attributes to the writer .", "if not already created , a new resource - env - ref element will be created and returned .", "constructs a new proxyreader .", "checks the already downloaded languages if they are the correct ones if not downloaded it will download them", "create a context identifier .", "reissue an existing certificate order .", "you are not supposed to instantiate this class .", "exits the application with the specified error code", "fires onafterputevent", "makes the given class visitor visit this method .", "set a native look feel for the application if possible check for the one currently in use then try gtk", "handling message which sent from wechat p this message will be sent from wechat by clicking the app icon at the bottom of the chatting page", "prints a formatted string to this output stream , using the specified format string and arguments , and then flushes this output stream .", "append an empty eascaparea object and return a reference to it", "output a zero bit .", "create a predicate to check that a type has a given name .", "slides the given element into view executing the callback afterwards .", "crush the diff into an encoded string which describes the operations required to transform text1 into text2 .", "get cardinality of inactive jobs .", "returns the string position to which the line - mapping defined by mappingpair vec maps the column col .", "solrzkclient does not guarantee that a watch object will only be triggered once for a given notification if we does not wrap the watcher - see solr - 6621 .", "parse a json data structure from content from a char array .", "draw the progress spinner", "shuffle the rows of the dataset .", "responds to memory pressure by simply ' discarding ' the local byte array if it is not used at the moment .", "this method is equivalent to std : lower _ bound function returns an index pointing to the first element in the ordered collection is equal or greater than passed value", "remove a training set listener", "called when the alpha value is changed .", "expand lhs for a construction", "sends a message to this player", "walk the list of registered endpointresolvers so as to mint a new abstract epr for a given service name", "put focus into password field and make okbutton default", "marshall the given parameter object .", "get the only field in the class with the given type", "writes the bytes from the array .", "returns the decoded path parts for the given encoded path .", "returns the position in the group of the specified child view", "metadata settings that are supplied to this version to enable beta runtime features .", "add a factory link to configured jenkins job", "get an attribute by index integer", "remove channelsftp and disconnect if necessary", "imports the functions table .", "writes the type of the edge .", "generates sax events for the given cdata", "returns if regitration confirmation was successful", "append a value length with all values until a given value", "verify that the last call always returns the last backup we added .", "checks to see whether the provided varname is valid for referring to tracepoints , constructed variables , or aggregations .", "this returns connectorend gif", "returns a histogram that , for each field , approximates the value distribution of products from the specified histograms .", "returns the age in minutes and seconds", "framework method do not call directly", "loads the non native mixed graph views of a project .", "determine if the task executed successfully in a prior attempt by checkitn the task state store for the success marker .", "use this method to add new choices to the list", "replaces sequences of whitespaces with tabs .", "append the cause if any", "deletes a module from the database .", "generate ant build . xml", "call to check whether the google play store is installed on this device .", "this method is called by the operator for enums .", "get the classes for all the fields", "invoked when the debugger detached from the target process .", "deletes the specified log stream and permanently deletes all the archived log events associated with the log stream .", "returns an enumeration describing the available options .", "converts between physical and logical coordinates", "returns the index of the last occurrence of the specified element in this list , or - 1 if this list does not contain the element .", "set disque host .", "make an index revealing the position of each vm in a collection of disjoint instances", "closes the connection to the database .", "create an ambient sound area .", "returns a duplicate of this context .", "prints a single character", "run storage system vpool matcher if ports allocation qualification changed", "execute a runnable asynchronously in a thread taken from the thread pool", "set a filter to be used as the template", "asynchronously lists all table ids in the instance .", "returns all table - generator elements", "region > alltodos ( action )", "invoked after a container was loaded .", "the cdf , static version .", "get the query identified by the key .", "removes all but the most recent backup files", "sets the working form using the following methods in order", "frees entries , if the cache is near full .", "set up the cache stream if available", "attempts to decode base64 data and deserialize a java", "installs any xmlfilter objects required to allow the sax event stream to be filtered and preprocessed before it gets to dom4j .", "send http post request to a connection with given data in request body", "add a training set listener", "the restaurant in autocomplete suggestions was clicked .", "creates a new instance in order to edit an existing type .", "returns true if this field has a valid jstype annotation .", "returns the member data for the given user in the given organization .", "returns a string representation of this method", "get the platform id for the given name record .", "get the input user security name mapping for the userregistry .", "invoked after the debugger of the address space changed .", "applies simple sharpening to the row data to improve performance of the 1d readers .", "sets the percentage done", "creates an instant , input format is \" yyyy - mm - dd hh : mm : ss [ . sss ] \" , given timezone is used .", "get the highest value belonging to the instance", "functions to find subexpressions by class .", "disconnects client from server .", "update buddy properties of user", "turns first character to lower case", "called after the websocket connection has been closed .", "a more accurate and faster implementation of the cdf ( taken from function pnorm in the r statistical language ) this implementation has discrepancies depending on the programming language and system architecture in java , returned values become zero once z reaches - 37 . 5193 exactly on the machine tested in the other implementation , the returned value 0 at about z = - 8 in c , this 0 value is reached approximately z = - 37 . 51938 will later need to be optimised for beast", "writes the edges of a view to the database .", "since userregistry throws customregistryexception in case of secname not found modify code to handle customregistryexception similar to entrynotfoundexception .", "sends a clusterevent to the other nodes in the cluster .", "clears the ui selection in a table", "creates an instance with the specified name .", "clears all text fields", "copies a statistic value and adds it to another statistic .", "returns the hash code for this dit structure rule .", "nulls the relationship or attribute and checks update permissions .", "the closure if any defined for render response event handling", "creates a new group node object .", "remove all unreferenced variables", "broadcasts the channel event", "add a service to our state .", "comparable argument less than or equal the given value details .", "queries database for a user", "takes a string and an object to store as the pair key", "load idm data from test resource", "a list of security groups referenced by ids to attach to the input .", "returns true if the given sequence element is a member of this fragment .", "update the game state according to move / command string from a player .", "write the entire contents of the supplied string to the given stream .", "retrieve a hybrid connection in use in an app service plan .", "walking down the path just extends the path .", "waits up to waitinseconds until one element is clickable .", "amends the config so that the we generate the appropriate openid connect and oauth modules .", "in this game each player receives 5 cards", "restore the list of dynamic actions and replay them .", "finds all children of a given node that pass the check by a given node filter .", "apply this tuple as arguments to a function .", "add all the nodes into the list which lie along the line defined by a and b .", "indicates whether a serialversionuid has been specified", "get the singleton instance of pushnotificationsmanager .", "removes the mapping with the specified key from this map .", "create a new chunk annotation with basic chunk information", "adds a mitre join connecting the two reflex offset segments .", "returns the estimated frequency of records whose values fall within this instance s range .", "adds the given item to a collection property .", "creates new instance of immutable container for results of delete operation .", "retrieves an attribute value by local name and namespace uri", "checks that the heatsink assignment is legal .", "retrieves the entity object that is associated with the specified value object from the object store", "adds any non partial specifications to resources", "set the active center for this molecule .", "this method handles the situation if a sound effect is going to be played and a previous one is not finished", "constructs a new lazy loading sctipt .", "serialize this blockpos into an int value", "create a shared secret error response .", "extract the type , variation and facing attributes of a blockstate and return them in a new drawblock object .", "encodes the given boolean object into exactly 1 byte for descending order .", "construct an maybewt from an anym that wraps a monad containing maybews", "asserts that an mdx member valued depends upon a given list of dimensions", "creates a group node that contains all selected nodes of a graph .", "deletes an existing vpclink of a specified identifier .", "returns a sub list of the list", "a value representing the list offering results .", "get data storage without cache", "returns any text found in the image for the language specified .", "return an instance of the method builder for the given class .", "notification that the server has been stopped", "sets the encoding for this request", "apply the configured sync mappings", "prints the source code for this jstructure to the destination directory", "gets the current source file .", "wraps the itunes preferences options within a styled border", "checks whether the template can be found within the string .", "returns the list of servlet definition , which must be initialize", "add more time series for the computation of the pdf .", "create a bar chart with sample data in the range - 3 to + 3 .", "the acceptqualificationrequest operation approves a worker ' s request for a qualification .", "stop the timer and submit the event , along with the additional metadata specified .", "asserts that the array of ints has a given length", "groups by vertex and computes a groupreduce transformation over the neighbors ( both edges and vertices ) of each vertex .", "loads the type id list .", "adds a participant object representing a value set for svs exports", "test whether sample binary arrays are correctly decoded .", "associate the given treenode to the given object", "returns true if names of the attributes are the same .", "reloads the strings", "get the rule denoted by the given name", "store current properties to file .", "gets an array of trust managers for a given store + password .", "return true if the jar attributes declare it should load local dependency classes first .", "throw all exceptions to http server", "retrieve a flag value .", "get a random timestamp value .", "remove a propertychangelistener from the listener list", "returns the number of elements in this array .", "sums over all the values , taking into account the keys as weights .", "check if the capabilities are valid based on msgcapvalidity paramter", "handles check xtn state in tm .", "constructs a integercomponentraster with the given samplemodel and databuffer .", "creates a new type instance reference object .", "gets a graphics2d to write on .", "creates a new state object .", "move the reading head at the specified record index .", "transforms a lefthandsideexpression into a lefthandsidepattern if possible .", "constructs a copy of the given item .", "normalize a string to a desired length by repeatedly appending itself and / or truncating .", "rename the device on server", "removes given key and its value from h2 .", "sums all the items from an array of items .", "creates a new state event object when the edge is exited .", "checks if the id is null ( or matches the null _ uri ) .", "creates a new text menu .", "a convenience routine to create a standalone sourceunit on a string with defaults for almost everything that is configurable .", "only called reflectively .", "cancels the transaction .", "this takes an array holding the values of the pdf", "obtains the width of the navigation from the activity ' s theme .", "compares some bytes with the text we ' re expecting", "this method will be invoked when the current page is scrolled either as part of a programmatically initiated smooth scroll or a user initiated touch scroll .", "override to validate the object being added to ensure it matches the predicate", "remove the given property from the super properties of this property", "setter for cantpalabras sets", "connect to irc server that was specified in the constructor", "checking if it s angle or lt after block", "invoke the given callback on all private fields in the target class going up the class hierarchy to get all declared fields .", "jcypher test for containment in a list of elements", "gets callsets for a given variantsetid using the genomics api .", "reports the general identifier element type name of a start tag .", "get the value of the element at the given location", "sets a new selected chapter with the given index", "parses mysql set type definition statement .", "adjusts the given value according to boundaries ( 0 and getmaxvalue ( ) ) .", "assert a logged event with a given string .", "src / main / resources / org / drools / compiler / semantics / java / parser / java . g : 276 : 1 : packagedeclaration : ' package ' qualifiedname ' ; ' ;", "sets the content panel of the supplied internal dialog .", "returns the value associated with the specified key", "invoked when the description of the trace list changed .", "visits a field instruction .", "add verbatim as a sibling of component in component in the parent ' s child list .", "overloads the leftshift operator to provide an append mechanism to add bytes to a stream .", "if true do not open windows or browsers", "updates the designated column with a double value", "marks the buffered input stream with the current location", "logical implication of two boolean operators", "remove an erroroccuredlistener to the object", "get the context", "simple wrapper to block for actions that either open or close a window .", "select a sepcific data unit in the drop down menu", "the engine may draw the board as it likes", "remove property change listener .", "get the next character in the source string .", "if user is black change the vector direction", "sort sort the condition set in ascending order by sample names", "sets no default user credentials for operations .", "parse a json data structure from content from a byte array .", "attempts to multicast the given packets on each of the configured network interfaces .", "verify that we can set up the pipeline to go offline at a particular sequence id .", "creates a new action object .", "flushes a bufferedspans array .", "check if has enough space for record", "returns true when view layers draw their contents .", "scans a package in the classpath ( of a particular classloader ) for annotated components .", "write the text to the path without writing a bom using the specified encoding .", "transforms integer representing java . sql . types value into to human readable string .", "deletes a prebuilt entity extractor from the application .", "stores the specified preference of the active user to logout on closing android studio .", "gets a category object according to its id", "set the port for this uri .", "verify that we can set up the pipeline to go offline at a particular sequence id .", "verifies that the bigdecimal return value is automatically created", "the scattered write cache supports compaction .", "saves properties to the attributes file handle , with given objname in the file header .", "draws from term vector queue , with replacement", "this is the number of comment delimiter characters deleted from the string .", "needed aws actions :", "returns a rank 0 ( scalar ) variable for the size of the specified dimension .", "handles a selection of a category", "notifies the container listener about new views .", "unmarshals a property ' s value from an xml document ( xcal ) .", "buffers the elements into continuous , non - overlapping lists where the boundary is determined by a predicate receiving each item , before being buffered , and returns true to indicate a new buffer should start .", "this method doesn ' t use fields that aren ' t initialized yet .", "returns true if the user has typed a key ( that has not yet been processed ) .", "finds the local network address from which this machine can connect to the target address .", "verifies that the supplied private key and signed certificate match by signing verifying some test data .", "addd days to current date .", "lookup the git settings for this task via a project reference", "simply return the cert for the private key", "generate a new jwk with the specified parameters", "the escaping modes for the print command with the given id in the order in which they should be applied .", "enqueues a new element .", "add a set of preconditions to this edge", "set error to the job .", "read a span .", "calculates the utility for the given number of examples , positive examples and hypothesis", "creates new form addupdaterowdialog", "send contact changes and get global ids for new contacts that are users .", "set the culture id", "only does work if we are not currently using the default classpath", "get led2 status", "returns only if log file is in read or write mode .", "build the tag to be printed", "invokes a method on the specified object .", "returns the music of this tune in a raw form", "provides serialization support", "inserts the given usage object into the collection", "create hfcaclient from a networkconfig . cainfo using default crypto suite .", "the genaccess method generates source code for one table access expression .", "prints the error with one parameter", "action done when the mouse button is clicked", "this method determines whether a particular destination instance refers to a temporary destination .", "request a listing corresponding to a uri with hash values of items in the listing", "initialize the shader program .", "set current to the first element of the list", "removes the next element from the event queue returning null if it cannot be found within the timeout .", "just write some reporting to the log - file .", "render the raster on the java . awt . graphics .", "check whether overrides all methods from super", "adds an url to the classpath of this classloader", "converts morphia key list to k , i . e . \" _ id \" , list .", "cast the object to comparable otherwise throws an illegalargumentexception exception", "construct a string based password", "returns the resources that were visited by a user set in the filter .", "implementation of propertychangelistener that listens to the property changes of the controller", "this method will add the cert chains at the new location if its not already present by comparing their fingerprints .", "makes sure two physically different message are equivalent : they have identical jms fields and body .", "add group to display", "register an interest in the current batch .", "adds the ui component to the field panel .", "sets the dcds01 property", "creates days of week mapping .", "delete workflow only from workflow list", "returns if a request should be retried based on the retry count , current response , and the current strategy .", "a list of the supported db engine modes .", "returns the subsite path for the currently requested uri .", "re - alias due to order of ' nested ' method execution ( the very last nested is executed first and it ' s parent is not re - aliased yet )", "initialize \" host \" parameter from web . xml .", "return this nodes effective parent cast as an fobj", "inserts a row of data into the table .", "adds a sessions to the upload queue", "enables creation of multiple settings per configuration .", "adds next value", "creates a new querysnapshot representing the results of a query with added documents .", "saves any currently changed settings to the application properties file", "called when corresponding fragment s onresume is called", "removes the id and its corresponding data from this fdf .", "create a copy of a worksheet .", "marshall the given parameter object .", "if a value is present , performs the given action with the value , otherwise performs the given empty - based action .", "gets the code exception", "two events are considered deeply equal if they have same key and exactly same parameters lists .", "( phonenum is null return false ) yes return true ; no return false ;", "get user name from facebook , but the code provided .", "returns the class ( es ) of the decsriptor as defined in the descriptor dictionary .", "creates the edges of the native flow graph views .", "updates a load balancer tags .", "extract the raw text from an aci", "checks if an upload is in progress for the given software module", "return true if pathproperties has been applied", "create a stream", "reveal all matched elements by adjusting their height and firing an optional callback after completion", "adds the xml representation of the data part of this property to a", "set the row at the given row index , starting with 0 .", "creates setup with provided context .", "a callout for sub classes to know when the conditionmutex is fully released", "obtain given line starting at 0 as a string", "draw the state by drawing each element .", "get the entity instance underlying the given proxy throwing an exception if the proxy is uninitialized", "merge string using path separator .", "resumes encoding of the stream .", "moving temp output file to final file", "given a generic thrift object ( class generated by the thrift compiler ) , create a thriftenvelopeevent .", "constructs a copy of the given item .", "moves a file to a directory .", "creates an entitlement exception .", "returns true if the string str contains only whitespace", "perform an initial save of a previously unsaved coresponseworde2 entity", "lists deleted sas definitions for the specified vault and storage account .", "get a slice for the disk range from the provided buffers .", "construct a new instance of this test case .", "write the text and append a newline using the platform s line ending .", "normalize a point .", "creates the book . bin file .", "create http connection wrapper", "utility routine to issue commit with appropriate transaction accounting .", "initializes the locations of the splits where we ' d like to be loaded into .", "converts an array of object shorts to primitives .", "get the last time that this access allowed data through", "creates a name from a sequence of lower - camel strings .", "returns a string representation of the bytearray .", "removes all proximity browsing nodes from the graph .", "batch delete model with list", "read a utf text file from the local drive .", "configures the toolbar", "override to allow for colons in the id without urlencoding them .", "selects the tab given by the index", "retrieve all audits specific to a service .", "this includes the calibration offset factor if it has been set", "list environment setting in a given lab .", "adds the given listener to the list of listeners .", "releases the cache and deletes files .", "updates the current wizard page", "confirm that the local values average correctly back to the average value", "change the source node", "set the dissectable areas", "receive a data element", "just a little helper method that safes me from writing to many string . valueof ( ) . .", "display calls this method on its current displayable", "resets the iv to its original value .", "creates a classnode using a given class .", "add a file system observer to this monitor .", "adds the given attribute area to this space", "releases the client connection .", "instantiates a new jk report exception .", "emits a org . apache . zookeeper . version . info interface file with version and revision information constants set to the values passed in as command line parameters .", "turn off notification", "creates a word from the given range of the contents of the internal storage .", "fills all available slots of connectionmanager so that checks for x ultrapeersettings max leaves will always fail", "returns the range of values the renderer requires to display all the items from the specified dataset .", "this will send the provided sendablemessage object to the chat that the chat object represents", "builds a min - heap and a reverseindex into the heap from the given array of values", "tests execution with non prefixed command .", "return the state of this object as a properties object .", "this is executes a sql query and returns the result as a json string .", "suspends encoding of the stream .", "extract a file from the jar to a string variable", "take the a string representing an array of acls and return a map mapping the sql permission name to a list of usernames who have that permission .", "closes this stream , implicitly invoking done ( ) first .", "this method removes the structure from the top of the parents stack", "this function is called when existing breakpoints have changed their conditions .", "trims characters off the start and end of a string", "the last position processed on the subscription .", "used for testing .", "copies template cell to result cell and fills it with banddata data", "the assumption here is : * means 1 or more characters .", "set delays as multiples of short delay", "prototype method create new instance of the class", "writes a stream of chunks such that no chunk is split across a block boundary", "load classes ( interface implementation ) from directory .", "this will close the custom shell that you opened .", "creates an instance of gsxaqueuesessionimpl .", "restarts the current gesture", "test the putlenstring method .", "visible for testing", "creates a referenceentry instead of a hashentry .", "clears the simulated memory .", "reads characters into a portion of an array .", "simulates the results of running a pipeline activity on a message payload .", "gets the first page of data lake store accounts linked to the specified data lake analytics account .", "notifies callback of retrying request", "locates the end of the word at the specified position .", "returns observable to create a conversation .", "creates a new instance of gotoaction from an object", "thread body refresh every 1 second", "makes the current color slightly darker , this is useful for many visual effects", "this method is responsible for attaching event listeners which bind the ui to the widget state i e the widgets model", "unpacks the nar to the specified directory .", "update total size of chosen components in kb", "find difference between two shapes .", "returns the events y coordinate", "has the current safe been modified", "the level of importance assigned to the resources associated with the finding .", "executes the mod function", "union the parameter regular expression with this regular expression .", "reads the contents of a file into a string .", "specifies the spacial transform for a view .", "initializes the specified thread", "converts an interval in simpleinterval format into an htsjdk queryinterval .", "increments the current source offset s startat portion by the specified amount .", "get value from byte using normalized index", "computing the norm as the euclidean norm .", "set the attribute value", "creates a new compilationunit .", "format this object ' s properties using the given separator .", "marshall the given parameter object .", "registers a annotation type .", "draws a frequency label at the x axis position at the bottom of the panel", "this adds a property descriptor for the server url feature", "create the options array to pass to the classifier .", "gets a list of entries belonging to the given calendar defined between the given range of time .", "utility method to create an image of a region of the given component", "parses a normalized javascript variable .", "determines whether the instruction undefines all tracked registers .", "registers a literal id with this manager and determines whether the same id has been seen before", "calls document handler with a single character resulting from built in entity resolution", "notify all listeners about cacheperiod property changed .", "checks if the device is running api greater than", "getter for property value1", "checks whether the metric should be re - usable", "move the files in this directory to the new directory .", "if your implementation subclasses the objects youll want to overload the constructbyclasscode implementation to return your implementations instances instead of the base implementation", "returns the estimated # of bytes per record .", "sorts this vector in reverse order .", "executes an insert statement .", "the on - premises instance tags on which to filter .", "sends a message to connected client", "return the flags vector of the element s type .", "can be filled again .", "creates an iterator yielding values from the source iterator and its index .", "converts an array of status to a string array containing the names of the given status .", "sparse c = sparse op ( a ) * sparse op ( b ) reroutes call to sparse matrix - vector mult if needed", "any member variables are initialized here", "scans package for jax - rs annotations", "get an integer property override value", "all rows , some cols , accumulate histograms", "public void onnonce ( string algorithm , string nonce ) {", "make a deep clone to ensure not shared with other lexers", "fills the reduced results list by skipping more than one search result for any given result object .", "this method is called via reflection from the database .", "replace shortnames to unicode characters .", "set the focus traversal order .", "rotates the model vertices .", "initialize a sketchhex object with a string of intel hex data .", "formats the string array d with the specified separator .", "given a class name and a file name , try to find the absolute file name of the source file on the users machine or null if it cannot be found", "returns the opposite end index of an automaton edge index", "returns a newly created business object data create request .", "creates a new guacamoletunnel which synchronizes access to the guacamole instruction stream associated with the given guacamolesocket .", "remove the given node from the list of mothers .", "this returns interactionconstraint gif", "invoked after a local edge comment has been edited in an edge .", "create lazy query container for ds type .", "returns true for an interface .", "check if mouse location has changed from previous check .", "creates a dom node from a trax source .", "constructor for primary key", "combines hashcode of previous elements sequence and value ' s hashcode .", "associates the specified value with the specified key in this map .", "create the action map for the system menu .", "empties the map", "broadcasts a channel state event to any registered listeners", "calculates the parameters of a bivariate quadratic equation .", "the method validates the space url parameter names", "tries to update this node instance with a new nodechain to it but checks if that improves the node cost first", "test if the number of iteration is below maxiterations", "returns the bessel function of the first kind of order 1 of the argument .", "removes the current region link from this status bar", "use this operation to delete snmp manager .", "setfrustumfar sets the value of the far frustum plane", "creates or updates an integration account partner .", "helper methods for getting an analysis object from the analysis cache .", "marks the last processed exception as committed .", "adds a permission to the filepermissioncollection .", "process the xml file in the given location and schedule all of the jobs defined within it .", "reads gif image from stream", "adds blocking waits yield operations to nullnodes", "returns the current configuration of this encoder .", "removes a customer passport from the revocation list", "read object back from buffer refer to the serialization format in the write method .", "returns the first selected data sources", "creates a new function object if the function could be resolved completely .", "assign the mmff94 atom type to a given atom .", "returns the number of unique items across all sets .", "created data links from source properties", "connect the socket to a http proxy and request forwarding to our remote host .", "compare which has the bigger weight", "create an object input stream for this path using the given class loader .", "performs a binary search on an already sorted range finds the first position where an element can be inserted without violating the ordering .", "a taskid assigned to this coronajobinprogress has reported in successfully .", "was this value propagated on an exception path ?", "register a create command to an attach point .", "consumes the events off the ring buffer", "creates the ntlmv2 hash of the user ' s password .", "creates a copy of the field .", "starting point for building the ordered list of operationdata which when returned contains all data", "slices a list , python style", "constructs an objectid given its 12 - byte binary representation .", "returns all require built from the given statement , or null if it is not a require", "configures the scenes rendering properties", "check whether the skin is exits or legal", "returns the set of sideeffect notations .", "listener can not get notification once after it is removed from listener list", "returns a hashcode for the specified value .", "adds field entry , equivalent of : | tab _ name | field type | label | value |", "create a text response with known length .", "checks if to display the neighbor", "method used to get an image", "send a role request with the given role to the switch .", "thrown when there is an error in the configuration .", "edits a global comment", "add fixed to map", "returns true if speed can be changed at this moment", "compute the offset within the file .", "initialize the scroll pane ui", "change one instrument with another in patterns", "rewrite the aggregator and dimension specs since the push down nested query will return results with dimension and aggregation specs of the original nested query .", "translates the location of this node by the specified coordinates", "creates a new adsservice to be used by the ads component", "adds a given new value for mapping ( )", "once consumed all instance data objects are nullified to prevent subsequent access", "returns a client - side channel initializer capable of securely sending and receiving http requests and responses .", "return a new foreign key with the given name and owner table", "return an iterator over the elements in this tuple .", "modifies the receiver so that it represents a transformation that is equivalent to its previous transformation translated by offsetx offsety", "add primitive type abbreviation to maps of abbreviations .", "extend class globally with category methods .", "the function adds a freeparameter to the list of", "assigns the component to a group", "remove a internalframelisteners from the application", "safely run code synchronously in the event dispatching thread .", "adds a listener of attribute events .", "this method are the overridden implementation of get extended key usage method in x509certificate in the sun provider .", "check the app is exiting", "enables metrics for the server by setting \" opt - out \" to false in the config file and starting the metrics task .", "set status of metadata id and do not reindex metadata id afterwards", "returns all possible splits for a given word .", "true if the system property \" security . debug \" contains the string \" option \" .", "puts the lower numberoflongbytes from l into the array , starting index pos .", "sets http status to response", "query whether a master exists for the given partition , if not try to promote the local data source .", "visits an inner class .", "creates a new node pressed right action object .", "brings up a dialog to rename the current tab", "this adds a property descriptor for the noresize feature", "marks the specified session to end of conversation state", "sets the message resolvers to be used by this template engine .", "constructs a new elcontext associated with the given elresolver .", "performs the operation described by this operator", "getstepindexbyedge", "creates or returns the rpc stub object for the instance ' s task manager .", "show a list of all items for which offers exist .", "gets a list of any comments on this file .", "returns the list of ancestors for the effective ( the one specified in the credentials ) account in a lazy way .", "adds a view to the project .", "checks that this object is in a usable state , with the minimal required properties ( endpoint , optionmap , uri ) set", "the afi ids .", "valid configuration elements .", "returns true if the owner of the field or method designated by this handle is an interface .", "register an object that wishes to be alerted when an item on this menu bar has been selected .", "removes all connections referenced by this handler", "remove new device which never used", "remove any varrays , which context ' s tenant doesn ' t have access to , from inputarrays", "splits the sortedoriginal table into sub - tables , grouping on the columns whose names are given in splitcolumnnames", "decodes parameters in percent encoded uri format e . g .", "creates a new action object .", "check if queryprocessor is available", "process server response :", "delete all tiles from cache for a specific renderer", "retrieves an object", "derive the viewport from the x , y , width and height attributes of an object", "sets start up timeout .", "we will initialize file contents with a sample text .", "validates the value against the required flags on this column .", "determines if each pool is on storage system that is connected to a vplex storage system that has connectivity to the passed varray .", "creates a new action object .", "returns the closest float approximation of the raising \" e \" to the power of the argument .", "returns the calendars title using the month names and years", "unify os names", "can we assign instances of the given type to variables having the type defined by this declaration ?", "converts the given numeric value to the output date format .", "or all filters compose the complete set of prefix key components", "checks if there is a field with the provided name .", "adds a regex at the global level .", "set the activity in ocl", "finds first index of a substring in the given source string with ignored case .", "create a default filter for the receiver", "invoked if a comment was appended to the list of group node comments .", "reads in one letter", "helper method for adding indexed member parameters , e . g . alarmnames . member . n .", "opens the list of word and puts them into the array list", "create a new instance of the set debug event settings message .", "drives the main flow of events for actually retrieving the news", "sets the content length but leaves the rest of the body untouched", "classifies the entity and possibly adds it to a buffer for printing .", "gets the next edittype in the order", "create a new model .", "the format of this native guid is computesystem + computeelement", "add a stringtemplate to this label stringtemplate", "convert a json object to a string object hashmap .", "saves the targetobjectid on the event .", "creates a new promise that will be resolved only if all promises get resolved .", "returns the number of non root elements in the node .", "sets the fixed height of a column", "removes the bookmark at the given index .", "checks sessions assigned to a selector for timeouts .", "invoked when the user wants to gray ungray a line .", "cleanup the classmembers array to free up some ram for particularly large modules .", "process the http post request .", "adds a project to the filterlist", "instantiates a new formfield view .", "returns the normalized parent of the specified path .", "performs the actual spell check query using solr .", "returns whether the requested flavor is supported by this transferable .", "insert to the table according the map ( table ) declaration", "sets the date that the position was discharged as today", "clear the renderer .", "tells if this reference overrides the id of the referenced transition", "links two tree nodes .", "returns a list joined together by the provided delimiter , for example , [ \" a \" , \" b \" , \" c \" ] could be joined into \" a , b , c \"", "confirm behavior when connector . security . use . ssl true and wrong alias is specified", "the routes to be advertised to the aws network in this region .", "a static helper method to create threads", "deletes a directory .", "gets all permissions the caller has for a resource group .", "sets the optional ocsp request extensions .", "this method adds the component at a specific index location in the container", "tell us whether we are running on macos", "creates a page object .", "create an indarray to represent the ( possibly null ) int [ ] dimensions .", "adds logging target ( s ) to the specified device ( s )", "this method looks at the data set and if there is a value that is 20 numbers higher than either the left , it is an outlier .", "remove the index from cache for a given project .", "returns the reader index of needle in haystack , or - 1 if needle is not in haystack .", "this function adds a register to the set of read registers .", "gets the level of the logger of the give name", "gets the contents at the given uri .", "tests if the cache is garbage collectable", "removes the given key from a map property .", "starts a new subreport .", "ensures that the limit is in the allowed range .", "moves the currently selected entity to the specified position ( 0 based index ) .", "encrypt numbers to string", "performs a hard reset and forced checkout .", "format method for the x conversion character and int argument .", "checks that the given string is a valid type descriptor .", "returns the best parse for state \" state \" , potentially starting with a unary rule", "find n before start position", "if a value is not present or present but empty , invoke the runnable .", "create a file with the current process id in it .", "create sha hash of origin string", "sets the repetition information for the alarm .", "if io has changed the current form from the current formautomationset will be redrawn", "describes the risk configuration .", "clears an element and then types .", "prints the error by code and reports the exception message modified by ll on april to produce more sensible ec . general error messages .", "updates with the given value .", "propagate camera direction changes to lookat , distance , and angles .", "using the natures name check whether the current project has findbugs nature .", "called by internal mechanisms do not call yourself .", "initialization of the servlet .", "starts a transaction in the event store on a given stream asynchronously using default user credentials .", "post the statusremote to the remote by internet", "use this api to fetch all the nsratecontrol resources that are configured on netscaler .", "adds changes to be atomically applied to the specified row if the condition does not yields any cells when applied to the row .", "performs remote invocation method", "convenience method for converting a single signature component to human readable form .", "send the element selected event to the registerd listeners", "tests whether the type parameter is upper bounded by bounded generic methods .", "returns the blue saturation of the color", "marshall the given parameter object .", "sorts by value a map in descending order .", "creates a key to use in the memoize cache", "this adds a property descriptor for the library elements feature", "transforms an list of entry into a float array containing the x and y values transformed with all matrices for the barchart .", "creates a new session with preset values .", "notify any listener of a geometry change .", "calculates the length of this vector note this makes use of the sqrt function and is not cached .", "compute the cardinality ( number of set bits )", "compares the specified object with this grid range for equality", "called when the scroll state changes .", "creates a displayable for a given element", "helper that returns an < optimize > string with optional key / val pairs .", "request activation with selection enabled", "uploads configuration to zookeeper .", "the default checker .", "removes all elements from this queue .", "deletes a user ' s secure shell ( ssh ) public key .", "close the underline proxy connection and resources this proxy will no longer be usable .", "stop listening for speech .", "create a match from a domainobjectmatch specified in the context of another query", "compares a to b , returning less than 0 , 0 , or greater than 0 , if a is less than , equal to , or greater than b , respectively , up to their common prefix ( i . e . only min ( a . levels , b . levels ) are compared ) .", "return the device used by the system eth1 eth2", "receive notification of the start of an element", "this constructs a trienode and specifies its predecessor .", "called when we detect a change somewhere down our path .", "test read and write empty clusterpolicy object", "adds a float to the constant pool of the class being build .", "expand this panel", "attempts to return the content stream for a given binary value .", "checks if an update should be fired .", "this method demontrates the mechanism of collecting big trades to a set", "remove any previous uploaded file in temporal directory .", "if the parameter is not a date this is an invalid value", "dump html of current response to a specified stream for debugging purposes", "validate this instance .", "returns some extent over which this", "marshall the given parameter object .", "method to provide a gross level of synchronization with the target monitored jvm .", "we received a websocket callback", "spawns a restore of the database and optionally waits for completion .", "create a new edge", "creates a newly allocated byte array .", "this is called when external resources are loaded or when configuration changed .", "clear the filter unsynchronized", "opens the camera and starts sending preview frames to the underlying detector .", "parse a lt . . . . gt expression", "get the app profile by id .", "get the unique key used to find this record ' s physical table in the hash table .", "add a new job to the queue", "gets atomsubset by elementtype", "invoked if a function node comment has been edited .", "calculates the count of expandable items before a given position", "creates a particle system with the given parameters", "creates a transaction identifier .", "maps an int to a specific mode .", "converts a given state value into its equivalent", "returns constraint restricting this expression to values above and including a given minimum", "returns the intersection of this simplex and p _ other", "checks if the device has a television .", "writes the root block at the given offset .", "finds all attributes matching the given path", "resume all jobs whose group starts with jobgroupprefix", "concatenate the units in the given utterance to the target _ lpc result .", "returns a map of class names to mappedclasses given an engima mapping file .", "returns the width hint for this label", "initialise the estimator before passing any observations in .", "a method to check if a user exists .", "build validator for expirerule , which used in login .", "adds an integer number to the message argument .", "this method can be used to exclude the specified url from the suite wide scope .", "print the lock discovery information associated with a path .", "kill the reader and close all resources without throwing any exceptions .", "the font size is scaled to collapsed / expanded text size if its anywhere close to these values .", "unregisters interest in the input region name and list of keys", "performs the given action for each remaining element until all elements have been processed or the action throws an exception .", "replies the sre installation to be used for the given configuration .", "shortcut method for scan cbuf 0 cbuf length", "generate the key pair for the process with id = and put it on the files config / keys / publickey and config / keys / privatekey", "constructs a string of sql delete statement", "invoked when a mouse button is released on the view", "returns the array of strings as a single string with the obvious line breaks inserted .", "changes the internal calendar representation for each trackpoint in this tracklog to gmt and sets the zone offset for this object to 0 gmt", "triangularly shaped noise source for audio applications", "gets the observance that a date is effected by .", "set the beginning of the next contour relative to the last point on the previous contour .", "constructs a new cluster info with null values on all the fields", "returns true if the specified character is a valid type specifier for a numeric value .", "remove all attached inarc pods", "constructs an instance of this class .", "sets this orders optional delivery notes that describe the delivery packaging or shipment", "returns a user object if the password for the user is correct .", "whether to enforce extra checks on the calculations or not .", "creates a view using the specified type and expression .", "enables or disabled rounded corners on children of this row .", "applies to clusters configured with the instance fleets option .", "tree model expansion notification", "method cardsselected", "check whether the annotation should be visible at runtime .", "returns attribute gs value", "grow path stack , if required .", "creates a groovyclassloader using the given classloader as parent", "get the service string", "takes a hex stream and returns the corresponding byte array .", "create a new scanner .", "method called once a model is deserialized", "create a converter using the facesconverter forclass attribute .", "entry function for encoding diagonal line checksum , slope - 1 , * check _ data [ p + 2 ]", "sets the default directory for the save as option", "decodes the given message assuming that the buffer contains a character per byte and that the message is already a proper mysms query", "displays a frame within a center of the app min window", "convert a set of io files into a set of equivalent virtual files", "returns a position in the first java partition after the last non - empty and non - comment partition .", "map put method .", "overridden to log that the action is being initialized and to register an editor change listener for scanning", "merge two unsigned integer values text id and time stamp to one long value revision to use gnu trove container .", "thread safe way to release a connection", "the constructor will load up the classloader", "closes underlying output stream and writes nulls to all the internal fields .", "returns a short string describing the termination status .", "deserialise an input and cast to a particular type", "returns a bytebuffer that corresponds to the memory that this pointer points to .", "simple property accessor for templates", "removes a listener object from the thread .", "create a jpanel to display the filtering controls .", "sends the closing handshake .", "recognize text operation .", "creates a new api bookmark manager object .", "evaluate the network , with optional metadata", "creates the image hash from a file", "write the extension to the outputstream .", "check if zone count policy is satisfied", "returns the rank of the attack given certain coefficients a higher value corresponds to a higher chance of success and a higher place in the the list of ordered attacks", "returns dialog box text with updated timeout value", "check if the name is inner ( ie : it contains a ' ' ) .", "returns snapshot rest status", "the template must be locked when calling this method .", "you are not supposed to instantiate the class .", "adds a ship to the given inventory of the given ship", "right rotates the bits between start and end and wraps the right most bit around to the start .", "read characters into an array .", "layout the various parts of the font widget", "if request body was json or xml , use \" equaltojson \" or \" equaltoxml \" ( respectively ) in the requestpattern so it ' s easier to read .", "loops through sort keys constructing the key statements .", "returns the number of key value mappings in this map .", "parses the document type declaration subset .", "accept ( case - sensitively , unless at the start of a sentence ) the given phrases even though they are not in the built - in dictionary .", "adds the class specified by the given name to the mapping file", "skip until next start tag or end document", "a utility method to extract the value of field marked by the @ id annotation using its getter / accessor method .", "loads a class from a file or a parent classloader .", "return the moduleconfig for the application module to which this request has been assigned if any", "compares two version strings component wise .", "perform a http delete request .", "add an object to the record", "move forward the specified distance", "returns true if the given produced type is a type parameter or has type arguments which are type parameters .", "gets a handle on the ie object from the session tag", "checks whether this unit object is equal to the specified", "return the port element value or default to 25", "check if two values are equal , and if not throw an exception .", "waits until the expectations are met and throws an assert if not", "only for completeness please use the more specific log trace methods", "called for parsing the ra . xml / wlp - ra . xml dd for the resource adapter .", "constructs a list iterator over the given entity name .", "removes the element at the specified position in this list optional operation", "rhs : = defaultconsequence namedconsequence * ( ~ end ) *", "verify that the filter raises exception if no definitions file is provided .", "before each test", "constructs a new resource that uses an executor with as many threads as there are processors available .", "sets the channel type .", "function creates new charset for non - cid fonts .", "check context to see if profiling is enabled by checking the observer mode in the context .", "flip to the next page", "reset the counter used to apply column styles .", "prints a byte to this output stream and flushes this output stream .", "compare the two files using delegate comparators .", "returns a cached resultset if we already created one", "assign the list of m recs objects", "checks if the port is an exception to the rule such as networktables", "apply an orthographic projection transformation for a left - handed coordinate system to this matrix and store the result in dest .", "convert a reference object into several ldap attributes .", "start lease recovery", "draws all marked widgets im form neu if fullredraw all", "invoked after a list files reply was received from the debug client .", "creates a bindingresponse in a compliant manner assigning the specified values to mandatory headers .", "track a motion scroll", "creates a new list by inserting all of the elements in the given iterable to the elements from this list at the specified index .", "rb class inherited reversed semantics", "perform a http post request and track the android context which initiated the request .", "visits an object typed t and changes the mould to fit to the objects properties annotations and values", "ensures that the necessary amount of prefetched native ads are available .", "ask for a broken hdd replacement", "adds the specified symbol to the symbol table and returns a reference to the unique symbol", "adds menus for the clicked operand .", "marks the given files in the given patch set as reviewed by the given user .", "update diet table", "get response as byte array", "acquires the proper write lock for a given cache key", "normal init level apis", "determine if the given credentials allow access to the bucket", "create an object output stream for this output stream .", "start the active subscription notifications of this trust manager and load the initial state of ssl trust certificates .", "get an iterator that returns the same elements returned by the supplied iterator , but in a completely random order .", "super before subclass alphabetical within a given class", "splits a revision id into its generation number and opaque suffix string", "computes the minimum diffpath that expresses de differences between the original and revised sequences , according to gene myers differencing algorithm .", "update local copy for getting a new file", "stops and deletes the connector listening on the specified local address and remote address .", "this is the main swing application method .", "marshall the given parameter object .", "this method updates the respective poll", "samples from the kernel density function , first picking one of the point , and then deviating from it according to a gaussian centered around it", "check if given text starts with redirect with case ignoring", "makes this entry a transient entry .", "return the number of blocks in the given sector", "transform a single tag", ".", "ungzip the gzip archive from source file to destinated directory .", "cast a boolean value to a boolean object ( reference type )", "delegates any intercepted method to invoke a method on an instance that is returned by a parameterless method of the given name .", "collects http get query string parameters as per oauth core 1 . 0 spec section 9 . 1 . 1", "search for templates that match the specified entry and perform each such template .", "creates a new action object .", "get all relationships involving a genome .", "performs message encoding of a datamatrix message using the algorithm described in annex p of iso iec e .", "to create a binary seed from the mnemonic , we use the pbkdf2 function with a mnemonic sentence ( in utf - 8 nfkd ) used as the password and the string \" mnemonic \" + passphrase ( again in utf - 8 nfkd ) used as the salt .", "add a response message to an existing response .", "converts the text of this gpathresult to a biginteger object .", "replace all occurrences of word by replace in the input .", "create a close frame .", "create a directory at the given path if it does not exist yet .", "saves the * . data file as compressed * . backup .", "wait for green state of a cluster .", "flush the states", "renames the given spec to the given name", "for the given interface , get the stub implementation .", "calculates \" index structures \" for every attribute , i . e . sorts a modifiablearray of every dbid in the database for every dimension and stores them in a list", "return the fingerprint of the identitykey belonging to contactsdevice .", "list supported database products", "compacts logs up to the given index .", "constructs a new bean level bean post processor based on the provided bean level properties .", "initialize the cause field for this wsexception to the specified value .", "prepare the given model of an external child resource for inline create ( along with the definition or update of parent resource ) .", "creates a tagging decorator for the given input stream .", "gets all methods of a class , excluding those from object .", "invoked after a detach reply was received from the debug client .", "clear all accumulated bugs without reporting them", "this method detects a code in a \" pure \" image - - that is , pure monochrome image which contains only an unrotated , unskewed , image of a code , with some white border around it .", "searches for the file in current directory ( toolio . userdirectory ) and in library paths", "loads an application descriptor .", "adds a new result to the result list .", "does the parsing work", "returns true if the file exists", "searches for a layer with given name in project", "returns all the cp definition links matching the uuid and company .", "skips all white spaces or comment beginning at the current position", "initialize the preference page", "moves all files of this torrent to saving directory", "responds to component resized events .", "releases the sql database query", "tests whether the specified range is mergeable with the target range .", "checks whether a given element passes the filter .", "cancel all searches that are currently going on .", "reads a single byte from the specified address", "create a clob object", "append test of two values", "fill the given ticks in a gts with the elements provided .", "destroy must cleanup everything not handled by the garbage collector", "returns the value of the named field parsed as a number", "this method is called when the circle image needs to be recreated due to changes in size etc .", "clear mapping information including strategy", "creates new derrordetail dialog where the parent is a frame .", "sets basic authentication", "creates a paddedcell with the given file and steps .", "updates the internal values after a frequency or sample rate change", "initialise the calculator for re use with the existing or default values of parameters clears any pdfs of previously supplied observations .", "determines if the configuresnmp event is for a specific address", "set the second of five generic holders for extra request information", "creates a new termination timer .", "toggles the visibility of the description panel .", "get the filter representing the target handler ' s filter specification .", "destruction of the servlet .", "calls notimplemented", "method is responsible to give information is this is unique field or not", "constructs a new charset map with default mappers .", "unsubscribe from a topic", "encodes the specified string .", "close down and tidy up", "removes set basic auth credentials", "readdata input the modbus message from din .", "creates a cookie with the given name and value .", "writes out a nicely formatted summary of the syntax error .", "creates a new commerce warehouse with the primary key .", "method used to parsing authentication information user pass", "initializes this line with the specified search result .", "writes the header of accessibility data csv file", "combines package path .", "distributes the terminate message", "return the class with the given name .", "special - purpose version for hashing a single int value .", "compute the same intervalle ( same number of days ) but for previous year", "returns the position within map of the next object after the one with position loc .", "actually performs the reconnect .", "authenticate the entered username and password", "creates a new titlepanemenubuttonwindownotfocusedstate object .", "returns a view of a portion of this list .", "reads specified amount of data from stream or amount left in stream .", "convert a hash to a string of hex digits .", "get a character array chunk in the string - value of a node .", "mark the ending time as the given endtime", "resets the current index to the given index and timestamp .", "determines if all items have been returned to the client .", "getter for property postconstructcalled .", "constructs a string from the underlying input stream", "constructs a bermudanexercise with a list of exercise dates and the default payoff", "invokes the vb script and returns the output .", "marshall the given parameter object .", "declaration of variable 0 does not specify the required type either", "notification that an existing attribute has been removed from the servlet context .", "checks if preparedraw has been called", "extract a list of videodto from current cursor with the given offset and limit .", "constructs a new case sensitive name file filter for a single name .", "reset the jsp factory", "add this field in the record ' s field sequence .", "remove item from list , and notify concrete removal .", "returns the image", "set instances for this bean", "returns the next element in the iteration .", "performs all reasonableness tests .", "find a point", "tests whether the operand has any aggregation levels .", "returns the data vectors after projection .", "generates accessors for imported packages", "unrolls the hierararchy of a specified type .", "returns true if there is another object to read .", "find the _ fields constant that matches fieldid , or null if its not found .", "performs a receive operations in a blocking manner .", "initializes the controller by opening the usb device and claiming the hid interface .", "notification that split brain was resolved current service remains primary .", "decorate the get method to perform the lazy behaviour", "moves a file .", "find the strongly connected components in given graph .", "returns list of response objects created from a string of vertical bar delimited captions .", "static factory method for a text payload .", "returns property value of the page format", "test whether to log ' veryverbose ' .", "the size of the processed stack", "returns true if every principal that matches sub also matches sup .", "updates buttons and actions", "inverse project x , y coordinates into a latlonpoint .", "sends the supplied packet from a client to the server", "notifies this inspector that an error has been reported for an entity", "adds a number of milliseconds to a date returning a new object .", "clear the transportversion field in the message header .", "wait until src / main / resources / r / zeppelin _ sparkr . r is initialized and call onscriptinitialized ( )", "append the given string to the end of this reusablestringbuffer", "this is used to determine if a string is empty .", "decodes a signed long object from exactly 1 or 9 bytes .", "returns an existing session .", "initialize this factory via a set of key - value pairs .", "returns the number of sensor values returned by the given sensor", "sets the textual data to be stored in uncompressed form with this image", "check if deleted in the same transaction .", "writes the byte to all the output streams .", "returns tokenizer for parsing given string .", "classifies a given instance .", "switch to specified lex state .", "returns the element name to the given element .", "recursively generate all the variants of this rule pattern .", "returns true if the value is zero .", "deletes the commerce subscription entry from the database .", "check if the given basename is part of the list .", "removes the item from the internal list , e . g . , if it no longer exists on disk .", "get the priority of a task with id or name", "adds a string with a specified encoding .", "creates a new breakpoint removed reply .", "reduces the elements using provided associative accumulation function .", "clears out the table to start fresh .", "per index shard service that will be automatically closed .", "show the print dialog .", "remove the pending search object if requested disable initial search indicator note should be done when template is locked", "removes a listener on file transfer events", "process trace action and pass trace data back to the callback", "this method is used to remove a previously added tab from the main burp suite window .", "instantiates a new oidc exception .", "creates or updates an app service plan .", "estimate where the top left cell of the dragged item will land if it is dropped .", "node changed - synchronize node", "gets the number of students who attend the class", "rollback a failed attempt to link a target volume to the array snapshot .", "tests another object for equality with this object .", "load a file with the given name .", "overrides enddocument ( ) in org . xml . sax . helpers . defaulthandler , which in turn implements org . xml . sax . contenthandler .", "returns the map of models keyed off their string names", "sets if animation on show slice build rotation is enabled", "specifies a range of magnifications at which the content in this optional content group is best viewed", "sends a packet from the server to all players in a dimension around a location", "creates an alias for the property ' s parent if necessary ( the property is compound )", "get a sha - 256 hash of the input string if the algorithm is available .", "add node to tree .", "the asynchronous version of getchildren .", "fills the centity damage and range brackets , plus the preferred range and the heat for that range .", "sets the currentpage textfield", "read a number of apps from the xml parser", "returns the current filter pattern", "if ttl is less than zero throws illegalargumentexception", "get a token identified by a string and remove it from our map", "join concatenates every string objects found in a string array , separated by the given delimiter", "process the \" delete \" toolbar command .", "remove a download from the download manager .", "delete a mapping on system", "copy chars from a reader to a writer .", "layout during a scroll that results from tracking motion events .", "information about the scaling plans .", "defines the thickness of the needle .", "finalizes the query in the currently used buffer and creates a new one .", "generate a simple runtime configuration with specific services .", "retrieves an aggregated list of node groups .", "builds the resource .", "recursively remove reference to child moduleitem from children arraylist", "encapsulates lookup strategy to find an appropriate", "add all of the specified collection of sensors to this sensor selection model .", "reflect a point ( p ) in a line formed of ' base ' , ' a ' , and ' b ' .", "converts a resolution from a css length to ' dpi ' .", "creates a new builder using the header information and data provided .", "returns a hashcode for the specified value .", "adds a list of classes fully qualified that will stop the traversal of the inheritance tree if encounter in method or complex type generation", "equality test between os identifiers", "sample the total count", "returns the localized issue map from the given base map .", "filter a single event .", "print info log .", "converts a string value to the specified type .", "computes the result for a double input value and a locale string .", "adds an integer to the array .", "called every time the text items or current position changes", "enable / disable notification view .", "sets thread context class loader to the given loader , executes the closure , and then resets thread context class loader to its initial value .", "returns the index of the high bit in value ( assuming le , actually power of 2 > = value ) .", "get a talon srx can instance from the registrar", "invoke cypheraction in batched transactions being feeded from cypheriteration running in main thread", "returns xml document part that contains theme description", "sets the alpha channel to the same as that of the base image", "gets http response status from responses like :", "code executed before the intercepted method .", "removes element listeners from the list of listeners maintained by this filter", "this method is used to remove a context menu factory that has been registered by the extension .", "return true if creating or editing", "performs the processing associated with an event , notifying listeners and the like .", "permits to define a destination factory , this is usefull in case of immutable objects .", "subscribe to forward navigation", "sends a packet from the server to all players in a dimension", "add download request to the download request queue .", "cast an object value to the corresponding boolean value .", "returns the lowest note from the given array of notes .", "all necessary fake calls before instance of singlevalueresultset is about to constructed", "try to reattempt the job .", "updates the header view to reflect the header data for the given position", "add the critical slots necessary for a standard cockpit .", "creates a new settings type by copying the settings of another settings type .", "add a reference element identifying a data type to carry over to the new project", "add frame tags", "this method provide the subject used for the xa resource recovery integration with the xaresourcerecoveryregistry .", "add a database action panel", "load and register the list of all classes that extend pipelineoptions .", "obtain a new version of this cache with the specified node types removed from the new cache .", "this method is a thin wrapper for the jdbc execute .", "reading the docno for the i th document", "creates a new panel object .", "compares the specified object with this list for equality", "gathers the information about an e block .", "return true if all task are cancelled .", "checks that current node is first controlling optional set and get", "remove reference to parent relation does not check for id", "deletes this message from database and the box to which the message belongs", "get the quota metrics for an iot hub .", "mark stream to read up to limit .", "determines if this event is for a change for a single instance or all instances of the class .", "clears the data of all tabs", "gets a list of classes that implement the given type in the given package .", "prints message to the specified error output .", "removes the given extensionfieldvalue from this user", "the number of notes in this scale", "returns an array containing all of the elements in this set .", "detects whether this value represents a boolean value .", "get the next available ordinal for a method id", "constructs an empty array deque with an initial capacity sufficient to hold elements .", "adds the value of the column at the specified row with the specified value", "obtain the bytes that define the given class by looking for the . class resource and loading the binary data .", "install package normal by system intent", "replies the null value given by the user by the corresponding null object .", "find the number of days in the given month , given the year .", "returns a fraction corresponding to the given aspect ratio string .", "return a path for a simple bullet .", "returns a flag that indicates whether the password of this database configuration is stored in the configuration file when binnavi exits .", "get end point", "tags the view with a tag .", "compares channels stored locally to channels from the server , and returns whats new what to delete whats changed", "method updateposition", "retrieves the final processor", "returns true if token should be parsed as a numeric field .", "converts a pixel y coordinate at a certain map size to a latitude coordinate .", "discard a message called when we are certain that an arrived message has reached the application .", "if the size changes than recalculate all", "generates a map with key as pr node and value as the list as a subset of the bucketids hosted by the node .", "returns the first remote uri for the participant which takes the interface role in the interaction pattern identified by name", "add a jarfile to class path", "creates a new proximity node .", "returns the number of bytes uploaded since the last reset", "returns if the comment only contains whitespace", "register an individual provivider item by its provider identifier", "returns the best match between the given preferred locale and the given available locales .", "why", "create a component that will replace the spinner models value with the object returned by spinner getnextvalue", "compute the labelling for each side", "gets the format object for a pattern of a placeholder .", "generates a new weight", "internal method to remove the record of an outstanding ' initialrecoverycomplete ' call from the supplied recoveryagent for the given failure scope .", "post the statusplugs to the plugs by internet", "checks to see when a resource was last modified", "indicates if the type is a simple web bean", "returns the name ( possibly with path ) of the binary used to execute qemu .", "configure the jvm process handler with jdk main class vm params etc", "toggle display of the details", "containerlistener interface method .", "removes a batch - level callback .", "returns the number of columns in the key .", "check if any of the edges specified were initially touched in the currently active gesture .", "the returned format string doesn t contain any sign .", "lock the current record .", "replace disallowed name characters and whitespace with an underscore .", "counter ascii character as one otherwise two", "gets the value of \" framework . server . name \" property", "creates an instance from epoch - second and offsets .", "moves to the previous row", "return all numbered properties with a prefix .", "parse public user identity", "removes a scan listener .", "retrieves the context menu for the purposes of display based on the items supplied", "initializes the data members of this class .", "create timestamp file to register that the installation has been successful .", "convert an area size .", "called every cycle used to process current game state", "opens the edit dialog .", "adds a code bookmark .", "use this operation to restore factory default in bulk .", "policyinformation : : = sequence { policyidentifier certpolicyid , policyqualifiers sequence size ( 1 . . max ) of", "get the results in wikibase style but shuffled .", "remove the most recently added instance of the attribute delegate .", "converts an ascii string into a hex string .", "fill the properties of the entity with random values .", "returns an initiliazed instance of welcomeform component", "creates a dialog and integrates the given panel", "form init listener creates id for new type", "reverses all the transitioncontrollers managed by this transitionmanager", "attribute from parent declaration", "removes the element at the specified position in this array .", "get out of keyboard mode .", "create a groupmatcher that matches job groups containing the given string .", "construct a new pulsar admin client object .", "initializes the server types cache", "write an ompoint to the link .", "create an empty but initialized instance of a uml nodeinstance", "generate the mac based on hmac _ algorithm", "parses out the external game id from the scenario file", "determines the next timeout for the schedule expression .", "convenience method that adds new sub tasks to this class task queue", "saves the actual model as agg file", "parses sort option parameters and sets the query sortables if found", "replaces the contents of the specified line where index must be greater than or equal to zero and less than the value returned by getlinecount", "clones this interpreter", "registers a javascript query handler .", "transform an instance in original ( unormalized ) format .", "invoked after the plugins were reloaded .", "this method translates an xml string to an object instance by the given instance of the current ontology", "constructs an empty bindinglist", "called after all the ssl configuration is processed , set the default sslcontext for the runtime .", "formats a number of milliseconds for display ( e . g .", "update description of the given file", "run all tasks in the queue in the current thread , if no other thread is running this method .", "marshall the given parameter object .", "information about the transit gateways .", "create a new , random chromosome with the given valid alleles and the desired length .", "add relation link from a given parent resource to a child resource .", "produce a new string similar to input .", "fill up our buffer from the underlying input stream .", "returns a string representation of this point", "adds line to this", "checks that a mandatory string field is not empty .", "construct an instance with the given name and list of listeners .", "clear out a mutablebiginteger for reuse .", "compares this symbol to the supplied symbol", "apply the operation to all ancestor nodes below a node of the given type .", "indicates wether this ability is choosen in priority to the others without this tag", "given a general request , parse it and handle it .", "unwrap channel data into the user buffers .", "notify a client that the chosen nick is already in use", "called when the execution of the task starts", "method which reads and returns a network from the given file", "acquires security token from the authority using an authorization code previously received .", "creates a new thread register values object .", "sets the x and y values of this vector to their absolute value .", "destroys subcontext with name name .", "cleans up this managed connection prior to returning it to the free pool .", "creates a new instance of the kraskov grassberger style transfer entropy calculator with the supplied conditional mi calculator name", "grow the key / value arrays as needed", "suppress all elements between a and b", "finds the implementation class object for the given factory name , or if that fails , finds the class object for the given fallback class name .", "create a grammar token from the given string", "parse the pidf input", "make a string from the contents of this jsonarray", "create a new cdi bean given its class and a bean manager .", "this method calculate the number of jobs in error", "updates the entry corresponding to the specified identifier", "verifies if a bookmark node given by its id exists in the bookmark model .", "parameters returned by the request .", "description of the operation .", "start check print .", "constructs a new queue .", "gets the match where predicate operand .", "join concatenates all the elements of the strings array into a single string .", "adjusts a method ' s modifiers if it fulfills the supplied matcher .", "parse the is composing input", "similar to rotationy float but wait until the transition is about to start to perform the evaluation", "switches from a dense to sparse matrix", "retrieves the operationtype at the specified index", "called when information on the page has changed and buttons need to be enabled or disabled accordingly", "creates a new operation object .", "this method ensures that the output string has only valid xml unicode characters as specified by the", "check whether the current registration is cancelled", "joins 2 arrays together , if any array is null or empty then other array will be retuned without coping anything .", "determines whether this view is tagged with parameter tag .", "construct this calculator by passing in a constructed but not initialised underlying conditional mutual information calculator ."], "label": ["what", "what", "why", "what", "what", "what", "how-it-is-done", "property", "property", "property", "property", "what", "what", "what", "why", "why", "what", "what", "what", "what", "property", "why", "what", "what", "what", "why", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "what", "why", "property", "how-it-is-done", "what", "how-to-use", "property", "what", "others", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "property", "what", "how-it-is-done", "why", "what", "what", "why", "what", "what", "property", "what", "what", "property", "what", "property", "why", "what", "what", "what", "what", "others", "property", "what", "property", "what", "why", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "how-to-use", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "property", "what", "what", "what", "what", "what", "what", "how-to-use", "how-it-is-done", "what", "what", "what", "property", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "why", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "property", "what", "how-it-is-done", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "how-it-is-done", "property", "what", "how-to-use", "how-it-is-done", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "property", "what", "what", "what", "what", "what", "what", "property", "how-it-is-done", "property", "what", "what", "what", "why", "property", "what", "what", "how-it-is-done", "property", "what", "how-it-is-done", "why", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "why", "what", "how-it-is-done", "how-it-is-done", "what", "others", "why", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "property", "what", "why", "what", "how-it-is-done", "what", "why", "what", "what", "what", "what", "why", "what", "how-it-is-done", "how-it-is-done", "property", "how-to-use", "what", "what", "how-it-is-done", "what", "why", "how-to-use", "how-it-is-done", "what", "what", "what", "property", "how-it-is-done", "property", "how-it-is-done", "why", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "why", "what", "property", "what", "what", "what", "what", "property", "how-it-is-done", "what", "property", "what", "what", "property", "how-it-is-done", "what", "what", "why", "what", "property", "property", "what", "why", "what", "how-it-is-done", "why", "why", "property", "what", "how-to-use", "what", "what", "what", "what", "what", "why", "what", "what", "property", "what", "others", "what", "why", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "why", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "property", "how-it-is-done", "what", "property", "property", "property", "what", "what", "how-it-is-done", "what", "why", "what", "what", "what", "how-it-is-done", "how-to-use", "how-it-is-done", "what", "property", "what", "property", "what", "why", "what", "what", "why", "how-it-is-done", "what", "how-it-is-done", "what", "what", "why", "what", "what", "what", "what", "property", "property", "how-it-is-done", "what", "how-it-is-done", "what", "what", "property", "what", "what", "what", "how-it-is-done", "how-to-use", "what", "what", "what", "property", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "how-it-is-done", "property", "what", "property", "why", "what", "what", "why", "what", "what", "how-it-is-done", "what", "how-to-use", "how-it-is-done", "what", "what", "property", "property", "what", "what", "why", "what", "why", "why", "why", "what", "what", "what", "what", "how-it-is-done", "how-to-use", "what", "what", "what", "why", "what", "what", "what", "what", "how-to-use", "why", "what", "what", "what", "why", "why", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "how-to-use", "property", "what", "what", "why", "why", "property", "what", "what", "what", "why", "what", "property", "what", "how-to-use", "why", "what", "why", "what", "what", "how-it-is-done", "what", "others", "property", "what", "how-it-is-done", "what", "what", "property", "what", "why", "what", "what", "what", "what", "how-it-is-done", "what", "what", "why", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "how-it-is-done", "why", "what", "what", "what", "how-it-is-done", "what", "why", "property", "how-it-is-done", "what", "what", "what", "property", "what", "why", "what", "how-it-is-done", "what", "what", "how-it-is-done", "why", "what", "what", "what", "what", "what", "how-to-use", "how-it-is-done", "why", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "property", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "others", "what", "what", "property", "what", "how-to-use", "what", "what", "what", "property", "what", "why", "what", "why", "what", "property", "what", "what", "why", "what", "how-it-is-done", "what", "what", "why", "how-it-is-done", "how-it-is-done", "how-it-is-done", "property", "what", "what", "why", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "how-to-use", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "property", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-to-use", "why", "how-it-is-done", "why", "what", "what", "what", "what", "property", "property", "what", "what", "what", "what", "what", "what", "why", "property", "what", "property", "how-it-is-done", "property", "property", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "why", "how-to-use", "why", "how-to-use", "how-it-is-done", "property", "what", "property", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "property", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-to-use", "property", "property", "property", "why", "why", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "property", "how-it-is-done", "why", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "what", "what", "property", "why", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "why", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "property", "what", "what", "property", "what", "what", "property", "property", "what", "why", "what", "what", "what", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "others", "what", "property", "what", "what", "what", "why", "property", "property", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "how-to-use", "how-it-is-done", "what", "why", "what", "what", "how-it-is-done", "why", "how-it-is-done", "others", "what", "what", "what", "how-it-is-done", "what", "others", "what", "property", "how-to-use", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "property", "what", "how-it-is-done", "how-it-is-done", "what", "why", "what", "what", "what", "property", "what", "what", "what", "what", "what", "property", "what", "what", "what", "property", "what", "property", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "property", "what", "why", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "property", "what", "what", "property", "what", "what", "how-it-is-done", "why", "what", "what", "what", "how-it-is-done", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "property", "what", "property", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "property", "property", "property", "what", "what", "property", "what", "how-it-is-done", "what", "what", "what", "what", "how-to-use", "how-it-is-done", "what", "what", "how-it-is-done", "what", "why", "property", "what", "property", "what", "what", "what", "what", "property", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "property", "what", "how-it-is-done", "why", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "why", "property", "what", "what", "what", "property", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-to-use", "what", "what", "why", "how-it-is-done", "what", "what", "what", "why", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "why", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "why", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "property", "others", "what", "what", "how-it-is-done", "what", "why", "what", "others", "others", "what", "how-it-is-done", "how-to-use", "what", "what", "what", "what", "what", "how-it-is-done", "property", "property", "what", "what", "what", "how-to-use", "why", "property", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "what", "property", "what", "what", "what", "what", "why", "what", "how-it-is-done", "how-it-is-done", "what", "what", "property", "what", "why", "property", "what", "what", "property", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "why", "what", "what", "property", "what", "what", "property", "property", "property", "what", "what", "what", "why", "what", "property", "what", "what", "property", "what", "what", "what", "how-it-is-done", "how-it-is-done", "how-to-use", "why", "why", "property", "property", "property", "why", "what", "how-to-use", "how-it-is-done", "what", "what", "property", "what", "why", "what", "how-it-is-done", "property", "property", "property", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "why", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "what", "what", "property", "why", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "property", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "why", "how-it-is-done", "what", "why", "how-it-is-done", "how-it-is-done", "what", "what", "why", "how-it-is-done", "how-it-is-done", "what", "property", "property", "what", "what", "why", "how-to-use", "why", "what", "how-it-is-done", "what", "property", "what", "property", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "property", "what", "what", "what", "what", "why", "property", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "how-to-use", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "why", "what", "how-it-is-done", "property", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "why", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "property", "what", "how-it-is-done", "how-to-use", "others", "how-it-is-done", "what", "why", "what", "what", "what", "how-to-use", "why", "what", "property", "what", "why", "property", "what", "what", "what", "how-to-use", "what", "what", "others", "what", "what", "how-it-is-done", "what", "how-to-use", "what", "what", "what", "what", "how-it-is-done", "property", "property", "what", "what", "what", "what", "what", "property", "why", "how-to-use", "why", "what", "how-it-is-done", "why", "what", "how-it-is-done", "what", "what", "property", "why", "why", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "what", "what", "what", "property", "what", "what", "why", "property", "what", "how-it-is-done", "what", "what", "what", "others", "what", "property", "what", "what", "what", "how-it-is-done", "what", "how-to-use", "what", "why", "why", "how-it-is-done", "what", "how-it-is-done", "property", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "property", "what", "property", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "property", "what", "property", "how-to-use", "others", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "what", "property", "what", "why", "how-it-is-done", "what", "how-it-is-done", "what", "property", "what", "what", "how-it-is-done", "what", "property", "what", "what", "property", "how-it-is-done", "how-it-is-done", "why", "why", "what", "what", "others", "what", "what", "why", "what", "why", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "property", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-to-use", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "why", "how-it-is-done", "why", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "why", "what", "what", "what", "what", "how-it-is-done", "what", "what", "property", "what", "others", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-it-is-done", "why", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "why", "why", "why", "how-it-is-done", "how-to-use", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "property", "what", "property", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "property", "how-to-use", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "property", "why", "what", "property", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "property", "why", "property", "what", "what", "what", "property", "why", "what", "property", "what", "what", "how-it-is-done", "what", "why", "what", "what", "property", "what", "property", "what", "what", "property", "what", "what", "what", "why", "what", "what", "property", "what", "what", "what", "property", "how-it-is-done", "property", "how-it-is-done", "what", "what", "property", "what", "how-it-is-done", "property", "what", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-to-use", "what", "how-it-is-done", "why", "what", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "property", "what", "why", "how-it-is-done", "why", "what", "what", "what", "how-it-is-done", "what", "what", "property", "property", "how-it-is-done", "what", "what", "what", "what", "what", "why", "why", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "how-it-is-done", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "property", "what", "what", "property", "why", "what", "how-to-use", "what", "why", "property", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "property", "how-to-use", "what", "what", "why", "what", "what", "what", "how-it-is-done", "what", "what", "what", "why", "what", "what", "what", "what", "property", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "why", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "property", "property", "property", "what", "what", "how-it-is-done", "what", "what", "property", "how-it-is-done", "how-to-use", "why", "how-it-is-done", "property", "how-it-is-done", "what", "property", "property", "what", "property", "why", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "property", "what", "what", "what", "what", "property", "what", "property", "what", "how-it-is-done", "what", "what", "what", "what", "property", "what", "what", "why", "what", "why", "what", "how-it-is-done", "what", "what", "what", "others", "what", "what", "how-it-is-done", "what", "property", "what", "why", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "why", "what", "what", "how-it-is-done", "what", "what", "what", "how-to-use", "how-it-is-done", "what", "how-to-use", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "property", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-to-use", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what"]}