{"id": [5734, 19748, 1098, 4943, 4322, 19127, 17161, 16020, 18750, 14099, 1284, 1972, 17006, 2184, 10120, 11888, 7790, 930, 19130, 4864, 12678, 625, 4791, 12471, 1934, 7430, 14624, 47, 1087, 8710, 19798, 16463, 6605, 15183, 15908, 18774, 17578, 3061, 5596, 15033, 17610, 19296, 17917, 16772, 15575, 12853, 6656, 2419, 6485, 12755, 1617, 6017, 5279, 6796, 11394, 8410, 12204, 17798, 839, 16202, 4284, 15450, 12715, 5275, 8291, 16669, 2533, 16142, 13320, 3880, 18621, 12828, 12677, 10986, 3988, 4102, 15470, 11121, 15861, 6550, 6525, 11124, 11012, 15699, 11074, 13860, 12048, 3807, 13216, 4758, 5101, 13514, 2545, 14738, 18816, 10366, 10716, 12337, 2073, 2173, 15217, 17808, 733, 3790, 573, 7411, 8942, 1384, 317, 19870, 7305, 7968, 13639, 8855, 14922, 13358, 8159, 11566, 5294, 6958, 4390, 7432, 8900, 10181, 682, 9965, 10465, 15550, 4311, 2731, 4121, 2191, 14420, 17657, 4897, 1881, 10418, 18563, 9128, 8730, 13913, 2737, 15836, 7301, 4816, 13561, 6066, 18522, 12604, 16538, 17943, 5898, 10470, 13979, 12007, 339, 5000, 1956, 9694, 7057, 3599, 4965, 19178, 19920, 5681, 8907, 15604, 4288, 16263, 9076, 1983, 19015, 3257, 14314, 5612, 8928, 6671, 8713, 19273, 12427, 12122, 8015, 7577, 6877, 3298, 11081, 13947, 11801, 16872, 10412, 2263, 8767, 4787, 4633, 18651, 14181, 19676, 6019, 14860, 13732, 15077, 13795, 13243, 15488, 5577, 17243, 12763, 6536, 11075, 11344, 5385, 19166, 3316, 11875, 9720, 9563, 6474, 7531, 18650, 18812, 13350, 19152, 15700, 8889, 18179, 17310, 11930, 3620, 16991, 3033, 3040, 9910, 11398, 18874, 16104, 12497, 1204, 1431, 554, 11622, 14445, 6414, 11437, 19928, 9848, 11342, 12389, 16229, 1391, 19020, 9862, 1130, 7642, 11241, 15970, 9123, 342, 19069, 15717, 5185, 14324, 15985, 15054, 6520, 11116, 19383, 18549, 1804, 719, 4655, 19405, 13435, 10408, 1323, 9077, 3274, 2187, 12405, 3514, 18545, 16430, 11887, 7506, 17218, 8036, 12998, 1678, 11660, 9146, 6341, 8098, 1642, 8152, 13474, 3198, 2746, 14431, 19849, 1445, 9116, 10728, 8751, 9492, 18903, 3206, 16087, 4880, 15341, 3857, 1494, 3856, 4404, 16245, 15211, 14783, 15534, 2906, 19613, 3358, 11881, 7146, 1781, 10493, 17456, 6299, 8660, 8771, 15647, 14646, 10650, 4549, 7382, 16034, 4687, 16831, 4991, 8944, 2508, 8170, 5413, 3313, 7597, 4385, 17181, 13155, 6387, 7942, 16630, 14998, 3355, 2558, 921, 9920, 4323, 16402, 8218, 8144, 3254, 9274, 16213, 10209, 2864, 2595, 14968, 16639, 14970, 7134, 1377, 13538, 2380, 5592, 9521, 7077, 9166, 17475, 10595, 16771, 12977, 1031, 4354, 17334, 4201, 5570, 18610, 18216, 1339, 2219, 11920, 7917, 9729, 11222, 18375, 16975, 13528, 12546, 12439, 16247, 17834, 543, 7239, 17767, 17067, 380, 6701, 2229, 10769, 18950, 3154, 16465, 12219, 6375, 2779, 5431, 17281, 9267, 2113, 11595, 10231, 15989, 13159, 11432, 13692, 18948, 19260, 5635, 10179, 16500, 11606, 5400, 16338, 14550, 15447, 16944, 2296, 10925, 9232, 1024, 15094, 15822, 14182, 19349, 3495, 3296, 2070, 14512, 14521, 15278, 10970, 3558, 11442, 1052, 1505, 5553, 401, 17775, 13776, 8577, 9602, 9184, 6276, 6652, 4389, 1638, 14409, 18291, 17971, 8704, 5597, 17408, 4668, 12198, 5058, 10405, 13974, 19329, 5560, 2410, 10548, 7508, 6665, 16408, 10800, 5148, 18271, 7585, 2232, 17581, 4966, 14542, 11347, 5528, 1744, 13768, 16068, 1882, 15679, 8213, 2079, 15311, 2075, 5963, 14890, 12180, 9234, 8194, 3470, 7053, 169, 15537, 8553, 5647, 5973, 18033, 10686, 8974, 13022, 4530, 9268, 1697, 19636, 19397, 6333, 17423, 18579, 7665, 15960, 631, 3105, 2421, 4379, 7957, 13905, 10713, 7982, 13527, 7850, 15189, 13373, 18463, 9957, 7926, 10740, 15771, 11410, 19959, 13655, 16, 14985, 10979, 10495, 3717, 17757, 10957, 12484, 12097, 15862, 16441, 3215, 13362, 6510, 15070, 864, 12246, 2001, 2225, 7695, 924, 6880, 13213, 198, 11599, 16326, 7091, 12299, 12976, 8240, 11770, 16566, 19287, 9765, 15772, 16841, 19760, 2018, 4237, 14150, 16141, 9663, 8452, 819, 15658, 2947, 18793, 11755, 14565, 3672, 7295, 13526, 18633, 13631, 3588, 17552, 7087, 17132, 5369, 6934, 3605, 9722, 4258, 740, 14713, 17074, 13778, 17885, 7803, 12596, 14285, 2817, 17962, 10061, 184, 16708, 2086, 9789, 9109, 10622, 944, 18861, 267, 6764, 9508, 14628, 14858, 6176, 3909, 8757, 8637, 5683, 10621, 10512, 12937, 15175, 10087, 11938, 5368, 9129, 14322, 448, 8113, 10881, 3642, 12631, 10428, 18669, 15747, 4606, 15823, 10576, 1579, 9823, 10901, 10490, 10636, 7232, 7655, 6116, 15510, 12071, 12018, 18045, 12265, 4493, 19252, 12168, 9454, 186, 4594, 9883, 19315, 9175, 9230, 15952, 19586, 14733, 6302, 3922, 3796, 10448, 4349, 62, 498, 14764, 5668, 11439, 2271, 16985, 7729, 6172, 8847, 14355, 17178, 857, 6278, 6376, 13920, 8017, 18634, 9020, 4483, 4688, 7857, 17228, 10840, 18909, 16288, 2707, 14570, 9249, 10440, 4472, 13807, 1700, 13993, 18269, 18105, 17609, 12593, 8712, 7901, 12481, 9912, 7303, 2249, 13005, 7554, 18694, 5968, 18440, 4644, 10083, 19654, 16907, 17523, 965, 4586, 11448, 6549, 3545, 4103, 10651, 17461, 2374, 16600, 16844, 3607, 8300, 7468, 16307, 6814, 2648, 9539, 11907, 1371, 18885, 15607, 19440, 19145, 7253, 19186, 3147, 12997, 12335, 17465, 8072, 5569, 7812, 16878, 4152, 1633, 18644, 19165, 16981, 6558, 540, 11362, 10645, 19725, 362, 9452, 3667, 4995, 1508, 1006, 11454, 19401, 8107, 10058, 4442, 11701, 19736, 3063, 2389, 13167, 11614, 5159, 17509, 3542, 4642, 1874, 2210, 6482, 19223, 16582, 2619, 12176, 19533, 15425, 12955, 6433, 6725, 19213, 7560, 7050, 8603, 8862, 8623, 639, 12250, 7126, 12572, 14145, 13899, 5477, 814, 12606, 17994, 15529, 18278, 16697, 156, 8633, 11829, 19340, 5248, 13877, 2396, 12350, 19616, 18827, 899, 2695, 551, 4305, 8589, 1295, 6447, 6506, 9406, 431, 10777, 6763, 14405, 12236, 10379, 14434, 12585, 17977, 14299, 7414, 6853, 13907, 2512, 2725, 17976, 2404, 13193, 8682, 3329, 3694, 2504, 18878, 10398, 5323, 512, 2082, 5589, 13516, 12741, 611, 6070, 4632, 12649, 3854, 17950, 441, 3381, 2375, 12396, 2887, 9348, 3873, 7012, 3158, 399, 9125, 3031, 13460, 15954, 17524, 12650, 39, 17793, 17255, 18426, 1378, 16344, 6891, 15714, 7109, 14580, 519, 5741, 7865, 1488, 9938, 1714, 15388, 9158, 16362, 4244, 8526, 19031, 18399, 11959, 11679, 13925, 12495, 1348, 9054, 6963, 15878, 6928, 10954, 5730, 13991, 12506, 785, 7220, 2245, 10601, 10973, 13030, 10441, 9408, 10608, 4053, 1540, 3780, 17160, 7006, 8481, 2146, 8292, 11843, 477, 16973, 17861, 17271, 18015, 12092, 4994, 8100, 11227, 1876, 14381, 16195, 10848, 18872, 19970, 18109, 14575, 2516, 14500, 15887, 12336, 16738, 3249, 16382, 16306, 16454, 6399, 2289, 10655, 19751, 16712, 4740, 7988, 5572, 2948, 2444, 2822, 12825, 5281, 12509, 7009, 6704, 1353, 11392, 5789, 12639, 2964, 14548, 1565, 122, 4614, 19832, 17736, 14876, 8510, 12691, 190, 321, 18176, 2698, 10505, 18490, 1164, 8609, 16990, 15351, 7813, 1454, 12282, 19709, 464, 18028, 8979, 17907, 844, 15107, 4550, 2005, 15258, 7682, 17675, 4987, 9415, 13339, 7117, 15630, 560, 7521, 19074, 14018, 13304, 15435, 2465, 614, 10715, 5912, 11045, 17079, 2303, 14110, 17147, 4268, 11961, 8241, 19478, 2793, 5705, 19924, 15297, 15626, 8096, 7972, 9013, 4229, 3907, 11603, 14996, 5229, 2450, 7759, 10454, 16356, 2435, 2681, 17681, 14557, 982, 4830, 4840, 9546, 11780, 11995, 2678, 12228, 13406, 10122, 10556, 11771, 5992, 4734, 13426, 1267, 7616, 18560, 9084, 13557, 8794, 13657, 5212, 15212, 14946, 16431, 10176, 3506, 869, 8508, 16468, 8176, 3342, 17717, 17379, 1, 11253, 7619, 12505, 17052, 2222, 6657, 9547, 15391, 13461, 17665, 14726, 4600, 7662, 10249, 19871, 13028, 2823, 11304, 15765, 16373, 1475, 7515, 12321, 17940, 13054, 7677, 5397, 16960, 15410, 3632, 5626, 17082, 1051, 15592, 1029, 14372, 14078, 367, 15066, 5392, 4447, 10407, 1994, 18383, 2254, 8788, 16200, 15357, 13702, 3931, 11763, 17655, 9667, 3241, 14132, 1610, 19688, 7294, 19952, 3361, 12433, 6471, 9300, 15618, 8293, 15383, 9313, 14448, 1223, 18584, 1626, 2286, 11356, 2969, 12244, 1135, 17295, 7293, 18466, 16217, 6839, 9329, 191, 19429, 1817, 14340, 13118, 17982, 12681, 980, 9096, 2213, 2930, 3877, 3007, 11424, 6806, 13740, 7643, 9949, 9719, 13079, 17025, 11767, 7747, 1342, 8978, 2781, 1546, 7308, 14739, 2577, 356, 15386, 16449, 7315, 13424, 2745, 11867, 732, 19843, 4993, 13955, 10880, 10177, 19279, 8311, 16458, 18137, 18727, 13135, 4337, 3870, 1217, 19239, 363, 12732, 16094, 2009, 13930, 11321, 14398, 5237, 1550, 14841, 150, 4178, 18836, 14806, 7209, 12159, 17951, 6118, 1611, 16803, 19341, 15384, 2706, 10409, 9654, 1776, 13081, 7287, 15951, 5724, 7550, 18947, 2609, 4753, 10717, 12073, 8996, 16398, 5124, 19011, 12879, 11580, 10922, 19551, 19770, 17466, 7808, 14416, 16225, 6374, 17012, 462, 4051, 3351, 14597, 5640, 16928, 14598, 3166, 5074, 2509, 17879, 9304, 11629, 13382, 6466, 9846, 15293, 19319, 6613, 11848, 9652, 4125, 11468, 5144, 2024, 9296, 1545, 12275, 16555, 10078, 213, 6953, 11352, 18436, 15892, 5913, 19838, 16825, 1868, 14842, 12004, 11339, 8638, 1878, 1268, 8880, 8514, 1623, 4411, 8787, 4001, 14205, 12123, 14986, 10447, 3433, 14599, 16162, 5310, 9085, 16333, 1441, 5286, 12736, 365, 19197, 10180, 6700, 4898, 18733, 18307, 2401, 8590, 2931, 13134, 11893, 8290, 11421, 6202, 11327, 5778, 16541, 3710, 7657, 6241, 6886, 3143, 4950, 19783, 8574, 16588, 12968, 9612, 14835, 7921, 17530, 17890, 2992, 19922, 3098, 2932, 6309, 19875, 12834, 10424, 14678, 4470, 6517, 5091, 17483, 4907, 2917, 19182, 11103, 12865, 12872, 2598, 12548, 8614, 4776, 11932, 8920, 3995, 4082, 10030, 10153, 17114, 3144, 11254, 5851, 449, 13048, 15578, 10264, 1243, 9852, 6836, 828, 15623, 2327, 5728, 13409, 18585, 18340, 4653, 19167, 15267, 4147, 3636, 12663, 16222, 12473, 8715, 1432, 5663, 15270, 1813, 14700, 17941, 7367, 14992, 13222, 6805, 2287, 6832, 5761, 99, 6078, 5842, 11665, 15898, 5554, 4019, 558, 109, 13758, 18618, 13464, 4738, 17967, 18673, 10745, 18041, 5265, 5690, 17555, 7254, 6976, 12005, 13744, 19464, 11155, 5194, 17565, 11682, 11209, 1209, 11957, 19200, 14198, 9078, 13325, 1654, 15681, 13323, 8669, 15113, 11777, 10917, 8643, 9911, 13720, 607, 15991, 14868, 13342, 19350, 11574, 8371, 6789, 7625, 1954, 9433, 9317, 16429, 7181, 11518, 12033, 13642, 3263, 7140, 10043, 1311, 4805, 6203, 6594, 5183, 15471, 5833, 17066, 7810, 14238, 15742, 10268, 10634, 19270, 5008, 2922, 16746, 19801, 14938, 4710, 8436, 676, 18683, 15032, 6465, 17901, 15193, 2804, 13415, 9721, 18169, 15503, 3303, 17612, 8666, 7837, 8625, 5818, 2591, 3852, 7693, 17121, 10125, 2569, 9559, 5791, 19915, 3827, 16052, 14684, 6551, 2109, 8659, 7661, 15185, 2653, 4180, 3996, 1666, 15438, 11212, 10971, 18337, 15288, 18718, 12871, 10159, 2664, 12556, 17875, 5909, 14437, 9993, 10035, 15997, 4967, 11974, 201, 12673, 10046, 10731, 14765, 5717, 10863, 15007, 1690, 18229, 18424, 19173, 1182, 1138, 3170, 18017, 2003, 19199, 9379, 16786, 6184, 15491, 2791, 3784, 5398, 11177, 4218, 14308, 19667, 4097, 10225, 3388, 10911, 3654, 8009, 8954, 5950, 5512, 32, 1986, 12936, 11749, 11986, 2487, 4974, 17569, 2491, 3850, 3392, 7290, 4321, 17823, 19819, 18330, 16891, 8225, 16012, 16210, 7971, 2766, 15779, 15247, 15507, 11136, 10474, 15063, 8677, 14053, 1739, 12787, 4333, 5041, 17207, 15992, 2090, 17478, 5887, 10632, 9099, 7259, 7774, 4578, 2472, 14390, 16959, 469, 8149, 17153, 1965, 10599, 10475, 14671, 14234, 14362, 7380, 18662, 2960, 5514, 7463, 2402, 13541, 15758, 6533, 18813, 12629, 5022, 7702, 10155, 18965, 8754, 6624, 6312, 7410, 15975, 18698, 3138, 19477, 2747, 1722, 12139, 8321, 3477, 5571, 4440, 6158, 18960, 4010, 3347, 15988, 2530, 2231, 13156, 4373, 1835, 5017, 7340, 12496, 2797, 9050, 2301, 3686, 19874, 2548, 2497, 18102, 18241, 8108, 14186, 17848, 2156, 2379, 17685, 10123, 19503, 1253, 16614, 17432, 14555, 8366, 2452, 15723, 7913, 17403, 44, 8772, 1462, 1099, 19992, 6386, 9819, 1564, 16173, 12377, 7188, 8857, 11484, 3651, 5120, 15895, 9503, 2789, 13239, 15625, 14887, 2172, 8320, 9157, 7599, 15342, 12166, 17292, 16013, 2203, 13253, 17135, 1146, 7579, 3410, 445, 5524, 10947, 16250, 11713, 18875, 3692, 19153, 654, 4432, 14748, 112, 16641, 14566, 15631, 11795, 7326, 11429, 11891, 13785, 6612, 926, 3848, 2940, 6470, 250, 10538, 6680, 12744, 6698, 2621, 9680, 6906, 2808, 703, 5273, 12305, 14880, 11431, 19187, 10467, 8870, 3373, 10348, 8032, 17436, 12037, 17893, 14125, 2313, 2541, 10916, 13215, 2234, 13117, 19247, 1025, 17485, 6110, 4052, 8683, 4446, 10687, 1761, 13612, 12124, 15045, 15701, 4538, 2432, 6027, 3486, 1683, 1271, 221, 17460, 19072, 15883, 5165, 3985, 10106, 8336, 6683, 18220, 5591, 12084, 5213, 13638, 1060, 19741, 18911, 2811, 17447, 825, 7163, 17229, 12296, 404, 4208, 19004, 4721, 15145, 15978, 13799, 1399, 16888, 13811, 13611, 1902, 9987, 17784, 11084, 11015, 18759, 3564, 9690, 15622, 2536, 2177, 3396, 2153, 11985, 18852, 7120, 532, 2400, 15174, 5779, 8006, 17661, 5251, 19691, 16389, 14509, 19488, 3099, 12016, 17225, 19014, 1608, 15076, 15238, 10921, 16745, 5605, 2903, 17536, 2273, 8807, 2300, 12704, 452, 7951, 6835, 9344, 16086, 16444, 16156, 13428, 7099, 17769, 8962, 10005, 7111, 14897, 9786, 1212, 4749, 16130, 10372, 1423, 5848, 10404, 5785, 17214, 310, 4717, 14991, 3142, 7894, 4355, 19161, 15922, 8518, 36, 10212, 1434, 8620, 2882, 16204, 2166, 6400, 14651, 7980, 3067, 19111, 10334], "code": ["    public void run() {\n        checkRepository();\n    }\n", "void cancelEventLease ( long eventID , Uuid leaseID ) throws UnknownLeaseException , RemoteException ;", "public static <E>boolean removeElement(List<? extends E> list,Predicate<E> predicate){\n  for (Iterator<? extends E> iter=list.iterator(); iter.hasNext(); ) {\n    E obj=iter.next();\n    if (predicate.test(obj)) {\n      iter.remove();\n      return true;\n    }\n  }\n  return false;\n}\n", "    private BigDecimal setID() throws PersistenceException {\n        if (!isNew()) {\n            return getID();\n        }\n        BigDecimal currentID = getID();\n        if (currentID == null) {\n            currentID = generateID();\n            set(\"id\", currentID);\n        }\n        return currentID;\n    }\n", "public static boolean isRunningInSingleSeqMode(){\n  if (mode.equals(\"singleseq\")) {\n    return true;\n  }\n  return false;\n}\n", "public void flap ( AdvancedModelRenderer box , float speed , float degree , boolean invert , float offset , float weight , float flap , float flapAmount ) { box . flap ( speed , degree , invert , offset , weight , flap , flapAmount ) ; }", "private int startFrame ( final int offset , final int nLocal , final int nStack ) { int n = NUM_ + nLocal + nStack ; if ( frame == null || frame . length < n ) { frame = new int [ n ] ; } frame [ NUM_ ] = offset ; frame [ NUM_ ] = nLocal ; frame [ NUM_ ] ", "void configure ( Json configuration ) ;", "void onEulaAgreedTo ( ) ;", "private PrintStream newStream(String name) throws IOException {\n  if (LOG.isDebuggingFiner()) {\n    LOG.debugFiner(\"Requested stream: \" + name);\n  }\n  if (!basename.exists()) {\n    basename.mkdirs();\n  }\n  String fn=basename.getAbsolutePath() + File.separ", "private static String[] getAttributeValues(final RDNSequence rdnSequence, final AttributeType attribute) {\n        val values = new ArrayList<String>();\n        for (val rdn : rdnSequence.backward()) {\n            for (val attr : rdn.getAttributes()) {\n                if (attr.getType().equals(attribute)) {\n                    values.add(attr.getValue());\n                }\n            }\n        }\n        return values.toArray(ArrayUtils.EMPTY_STRING_ARRAY);\n    }", "  protected void tearDown() {\n    inimigo1 = null;\n\n  }\n", "public void testGetAttribute ( ) { char expectedId1 = NUM_ ; char expectedId2 = NUM_ ; char actualId1 ; char actualId2 ; unknownAttributesAttribute . addAttributeID ( expectedId1 ) ; unknownAttributesAttribute . addAttributeID ( expectedId2 ) ; actualId1 ", "private SwingBackgroundTask<Sudoku> createTask(final String[] puzzle,\n                                                   final int populationSize,\n                                                   final int eliteCount)\n    {\n        return new SwingBackgroundTask<Sudoku>()\n        {\n            @Override\n            protected Sudoku performTask()\n            {\n                Random rng = new MersenneTwisterRNG();\n                List<EvolutionaryOperator<Sudoku>> operators = new ArrayList<EvolutionaryOperator<Sudoku>>(2);\n                // Cross-over rows between parents (so offspring is x rows from parent1 and\n                // y rows from parent2).\n                operators.add(new SudokuVerticalCrossover());\n                // Mutate the order of cells within individual rows.\n                operators.add(new SudokuRowMutation(new PoissonGenerator(2, rng),\n                                                    new DiscreteUniformGenerator(1, 8, rng)));\n\n                EvolutionaryOperator<Sudoku> pipeline = new EvolutionPipeline<Sudoku>(operators);\n\n                EvolutionEngine<Sudoku> engine = new GenerationalEvolutionEngine<Sudoku>(new SudokuFactory(puzzle),\n                                                                                         pipeline,\n                                                                                         new SudokuEvaluator(),\n                                                                                         selectionStrategy,\n                                                                                         rng);\n                engine.addEvolutionObserver(new SwingEvolutionObserver<Sudoku>(new GridViewUpdater(),\n                                                                               100,\n                                                                               TimeUnit.MILLISECONDS));\n                engine.addEvolutionObserver(statusBar);\n                return engine.evolve(populationSize,\n                                     eliteCount,\n                                     new TargetFitness(0, false), // Continue until a perfect solution is found...\n                                     abortControl.getTerminationCondition()); // ...or the user aborts.\n            }\n\n\n            @Override\n            protected void postProcessing(Sudoku result)\n            {\n                puzzleCombo.setEnabled(true);\n                populationSizeSpinner.setEnabled(true);\n                solveButton.setEnabled(true);\n                abortControl.getControl().setEnabled(false);\n            }\n        };\n    }", "@Override public void onDestroy(){\nsynchronized (mThread) {\n    mReady=false;\n    mQuiting=true;\n    mThread.notify();\n  }\n  super.onDestroy();\n}\n", "public Cell<C,T> width (Value<C,T> width) {\r\n\t\tminWidth = width;\r\n\t\tprefWidth = width;\r\n\t\tmaxWidth = width;\r\n\t\treturn this;\r\n\t}", "public int compareTo(ReadablePartial other) {\n        if (this == other) {\n            return 0;\n        }\n        if (size() != other.size()) {\n            throw new ClassCastException(\"ReadablePartial objects must have matching field types\");\n        }\n        for (int i = 0, isize = size(); i < isize; i++) {\n            if (getFieldType(i) != other.getFieldType(i)) {\n                throw new ClassCastException(\"ReadablePartial objects must have matching field types\");\n            }\n        }\n        // fields are ordered largest first\n        for (int i = 0, isize = size(); i < isize; i++) {\n            if (getValue(i) > other.getValue(i)) {\n                return 1;\n            }\n            if (getValue(i) < other.getValue(i)) {\n                return -1;\n            }\n        }\n        return 0;\n    }", "\tpublic void setElement(int index, String value) throws Exception {\n\t\tif (index != 0) {\n\t\t\tthrow new Exception(\"INTERNAL ERROR: invalid index \" + index\n\t\t\t\t\t+ \" sent to AreaMoments:setElement\");\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tint type = Integer.parseInt(value);\n\t\t\t\tsetNumberDimensions(type);\n\t\t\t} catch (NumberFormatException e) {\n\t\t\t\tthrow new Exception(\"Number of Coeffecients must be an integer\");\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n", "public synchronized void stopPolling ( ) { m_scheduler . shutdown ( ) ; }", "public synchronized void stopPolling(){\n  m_scheduler.shutdown();\n}\n", "ArchivedCoupling addCoupling(final Coupling<?> coupling){\n  ArchivedCoupling c=new ArchivedCoupling(this,coupling);\n  archivedCouplings.add(c);\n  return c;\n}\n", "private int compareLabel(JsonObject jsonObj1,JsonObject jsonObj2){\n  String label1=getLabel(jsonObj1);\n  String label2=getLabel(jsonObj2);\n  return label1.compareTo(label2);\n}\n", "    public void updateReadOnlyFileCollections() {\n        mustBeCleanedFiles = fileSelector.getMustBeCleanedFiles();\n        lowUtilizationFiles = fileSelector.getLowUtilizationFiles();\n        nBacklogFiles = fileSelector.getBacklog();\n    }\n", "    public Message read() {\n        SubInputStream sistream = new SubInputStream(in);\n        if (sistream.available() > 0) {\n            return (Message) new XMLDecoder(sistream).readObject();\n        } else {\n            return null;\n        }\n\n\n    }\n", "\tpublic boolean hasChanges() {\n\n\t\treturn hasChanges;\n\t}\n", "public void removeCrossReference(ProteinXref ProteinXref){\n  crossReferences.remove(ProteinXref);\n}\n", "@Override\n    public Object[] getAttributeValues(String key) {\n        if (userAttributes == null) {\n            return null;\n        }\n\n        final List<Object> values = userAttributes.get(key);\n        if (values != null) {\n            return values.t", "private void updateComputeNodeUser(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, Iterable<BatchClientBehavior> additionalBehaviors) throws BatchErrorException, IOException {\n        ComputeNodeUpdateUserOptions options = new ComputeNodeUpdateUserOptions();\n        BehaviorManager bhMgr = new BehaviorManager(this.customBehaviors(), additionalBehaviors);\n        bhMgr.applyRequestBehaviors(options);\n\n        this.parentBatchClient.protocolLayer().computeNodes().updateUser(poolId, nodeId, userName, nodeUpdateUserParameter, options);\n    }", "private void createExtendedObject(String realm,String fedId,String location,String role,Map keys) throws WSFederationMetaException, JAXBException, AMConsoleException {\n  try {\n    ObjectFactory objFactory=new ObjectFactory();\n    WSFederationMetaManager metaManager=getWSFederationMetaManager();\n    FederationElement edes=metaManager.getEntityDescriptor(realm,fedId);\n    if (edes == null) {\n      if (debug.warningEnabled()) {\n        debug.warning(\"WSFedPropertiesModelImpl.createExtendedObject: \" + \"No such entity: \" + fedId);\n      }\n      String[] data={realm,fedId};\n      throw new WSFederationMetaException(\"fedId_invalid\",data);\n    }\n    FederationConfigElement eConfig=metaManager.getEntityConfig(realm,fedId);\n    if (eConfig == null) {\n      BaseConfigType bctype=null;\n      FederationConfigElement ele=objFactory.createFederationConfigElement();\n      ele.setFederationID(fedId);\n      if (location.equals(\"remote\")) {\n        ele.setHosted(false);\n      }\n      List ll=ele.getIDPSSOConfigOrSPSSOConfig();\n      if (isDualRole(edes)) {\n        BaseConfigType bctype_idp=null;\n        BaseConfigType bctype_sp=null;\n        bctype_idp=objFactory.createIDPSSOConfigElement();\n        bctype_idp=createAttributeElement(keys,bctype_idp);\n        bctype_sp=objFactory.createSPSSOConfigElement();\n        bctype_sp=createAttributeElement(keys,bctype_sp);\n        ll.add(bctype_idp);\n        ll.add(bctype_sp);\n      }\n else       if (role.equals(IDENTITY_PROVIDER)) {\n        bctype=objFactory.createIDPSSOConfigElement();\n        bctype=createAttributeElement(keys,bctype);\n        ll.add(bctype);\n      }\n else       if (role.equals(SERVICE_PROVIDER)) {\n        bctype=objFactory.createSPSSOConfigElement();\n        bctype=createAttributeElement(keys,bctype);\n        ll.add(bctype);\n      }\n      metaManager.setEntityConfig(realm,ele);\n    }\n  }\n catch (  JAXBException e) {\n    debug.warning(\"WSFedPropertiesModelImpl.createExtendedObject\",e);\n    throw new AMConsoleException(getErrorString(e));\n  }\ncatch (  WSFederationMetaException e) {\n    debug.warning(\"WSFedPropertiesModelImpl.createExtendedObject\",e);\n    throw new AMConsoleException(getErrorString(e));\n  }\n}\n", "      public void run() {\n         try {\n            String filename = getFilename(node);\n            if (filename != null) {\n               final Object buffer = IDEPlugin.openFile(view, filename);\n               IDEPlugin.setBuffer(view, buffer);\n               int start = IDEPlugin.getLineStartOffset(buffer, node.getLine() - 1);\n               int end = IDEPlugin.getLineStartOffset(buffer, node.getLine());\n               if (start < 0) {\n                  start = 0;\n               }\n               IDEPlugin.setSelection(view, buffer, start, end);\n               IDEPlugin.moveCaretPosition(view, buffer, end);\n            }\n         } catch (Exception ex) {\n            ex.printStackTrace();\n            IDEPlugin.log(IDEInterface.ERROR, \"Navigator\", \"can't open duplicate file! \" + ex.getMessage());\n         }\n      }\n", "public Notifier ( ) { super ( STR_ ) ; setDaemon ( BOOL_ ) ; }", "public DepthFirstIterator ( final ITreeNode < ObjectType > rootNode ) { Preconditions . checkNotNull ( rootNode , STR_ ) ; for ( final ITreeNode < ObjectType > treeNode : rootNode . getChildren ( ) ) { m_path . add ( treeNode ) ; } }", "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return INTEGERLIST;\ndefault :\n  return null;\n}\n}\n", "public static void discoverExtensions ( ) { final ClassLoader systemClassLoader = ClassLoader . getSystemClassLoader ( ) ; ClassLoader currentContextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; loadExtensions ( systemClassLoader ", "private static String translate ( final String s , final Locale locale ) { try { ResourceBundle bundle = ResourceBundle . getBundle ( STR_ , locale ) ; if ( bundle . getLocale ( ) . getLanguage ( ) . equals ( locale . getLanguage ( ) ) ) { return bundle .", "public void assignPersistenceId ( long id ) { persistenceId = id ; }", "public int readInt ( ) throws IOException { return bfdi . readInt ( ) ; }", "\tpublic void addComposite(Role r) {\n\t\tsuper.add(r);\n\t}\n", "@Override\n    public IReaction initiate(IAtomContainerSet atomContainerSet, ArrayList<IAtom> atomList, ArrayList<IBond> bondList)\n            throws CDKException {\n        CDKAtomTypeMatcher atMatcher = CDKAtomTypeMatcher.getInstance(atomContainerSet.getBuilder());\n        if (atomContainerSet.getAtomContainerCount() != 1) {\n            throw new CDKException(\"SharingElectronMechanism only expects one IAtomContainer\");\n        }\n        if (atomList.size() != 2) {\n            throw new CDKException(\"SharingElectronMechanism expects two atoms in the ArrayList\");\n        }\n        if (bondList.size() != 1) {\n            throw new CDKException(\"SharingElectronMechanism only expect one bond in the ArrayList\");\n        }\n        IAtomContainer molecule = atomContainerSet.getAtomContainer(0);\n        IAtomContainer reactantCloned;\n        try {\n            reactantCloned = (IAtomContainer) molecule.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new CDKException(\"Could not clone IAtomContainer!\", e);\n        }\n        IAtom atom1 = atomList.get(0); // Atom containing the lone pair to share\n        IAtom atom1C = reactantCloned.getAtom(molecule.indexOf(atom1));\n        IAtom atom2 = atomList.get(1); // Atom to neutralize the deficiency of charge\n        IAtom atom2C = reactantCloned.getAtom(molecule.indexOf(atom2));\n        IBond bond1 = bondList.get(0);\n        int posBond1 = molecule.indexOf(bond1);\n\n        BondManipulator.increaseBondOrder(reactantCloned.getBond(posBond1));\n\n        List<ILonePair> lonePair = reactantCloned.getConnectedLonePairsList(atom1C);\n        reactantCloned.removeLonePair(lonePair.get(lonePair.size() - 1));\n        int charge = atom1C.getFormalCharge();\n        atom1C.setFormalCharge(charge + 1);\n\n        charge = atom2C.getFormalCharge();\n        atom2C.setFormalCharge(charge - 1);\n\n        atom1C.setHybridization(null);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(reactantCloned);\n\n        IAtomType type = atMatcher.findMatchingAtomType(reactantCloned, atom1C);\n        if (type == null || type.getAtomTypeName().equals(\"X\")) return null;\n\n        atom2C.setHybridization(null);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(reactantCloned);\n        type = atMatcher.findMatchingAtomType(reactantCloned, atom2C);\n        if (type == null || type.getAtomTypeName().equals(\"X\")) return null;\n\n        IReaction reaction = atom2C.getBuilder().newInstance(IReaction.class);\n        reaction.addReactant(molecule);\n\n        /* mapping */\n        for (IAtom atom : molecule.atoms()) {\n            IMapping mapping = atom2C.getBuilder().newInstance(IMapping.class, atom,\n                    reactantCloned.getAtom(molecule.indexOf(atom)));\n            reaction.addMapping(mapping);\n        }\n        reaction.addProduct(reactantCloned);\n\n        return reaction;\n    }", "public static int findName ( String name , int [ ] table ) { for ( int i = NUM_ ; i < table . length ; i ++ ) { if ( name . equals ( getName ( table [ i ] ) ) ) { return i ; } } return - NUM_ ; }", "public void destroyAndUnBindDestination ( String destinationName ) throws JMSException { try { getInitialContext ( ) . unbind ( destinationName ) ; } catch ( NamingException ne ) { } }", "public void testStartStopFilterPipeline ( ) throws Exception { SampleFilter . clearCounters ( ) ; TungstenProperties config = helper . createDoubleQueueWithFilter ( NUM_ , NUM_ , - NUM_ , NUM_ , BOOL_ ) ; ReplicatorRuntime runtime = new ReplicatorRuntime ( config , new MockOpenReplicatorContext ( ) , ReplicatorMonitor . getInstance ( ) ) ; Pipeline pipeline = prepareAndStartPipeline ( config , runtime ) ; assertEquals ( STR_ , NUM_ , SampleFilter . configured ) ; assertEquals ( STR_ , NUM_ , SampleFilter . prepared ) ; assertEquals ( STR_ , NUM_ , SampleFilter . released ) ; pipeline . shutdown ( BOOL_ ) ; pipeline . release ( runtime ) ; assertEquals ( STR_ , NUM_ , SampleFilter . configured ) ; assertEquals ( STR_ , NUM_ , SampleFilter . prepared ) ; assertEquals ( STR_ , NUM_ , SampleFilter . released ) ; }", "public Employee ( int id , String name ) { }", "protected static Vector convertToVector ( final Object [ ] anArray ) { if ( anArray == null ) { return null ; } final Vector v = new Vector ( anArray . length ) ; for ( final Object element : anArray ) { v . addElement ( element ) ; } return v ; }", "public DebuggerTemplate createDebugger ( final String name , final String host , final int port ) throws CouldntSaveDataException { Preconditions . checkNotNull ( name , STR_ ) ; Preconditions . checkNotNull ( host , STR_ ) ; Preconditions . checkArgument", "\tprivate void commonInit() {\n\t\tint i;\n\t\tInteger intObj;\n\n\t\tif (toInit) {\n\t\t\ttoInit = false; // setting here to allow loadData to reset it\n\t\t\t\t\t\t\t// if necessary\n\n\t\t\tloadData();\n\n\t\t\tif (sorted) {\n\t\t\t\tArrays.sort(rows, this);\n\t\t\t}\n\n\t\t\tfor (i = 0; i < rows.length; i++) {\n\t\t\t\tif (rows[i] != null) {\n\t\t\t\t\tintObj = new Integer(i);\n\t\t\t\t\tkeyMap.put(rows[i].getField(keyIdx), intObj);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "\tpublic void deleteAlbum(long rowId) {\n\t\tmDb.delete(\n\t\t\t\tALBUM_DATABASE_TABLE, ALBUM_KEY_ROWID + \"=\" + rowId, null);\n\t\tmDb.delete(\n\t\t\t\tPHOTOALBUM_DATABASE_TABLE, PA_KEY_ALBUMID + \"=\" + rowId, null);\n\t}\n", "    public void process(JJackAudioEvent e) {\n        FloatBuffer buf = e.getInput();\n        for (int i=0; i < buf.capacity(); i++) {\n        \t double a = buf.get(i);\n        \t if (a < 0) {\n        \t \ta = -a;\n        \t }\n        \t if (a > this.value) {\n        \t \tthis.value = a; // collect maximum peak in this.value\n        \t }\n        }\n    }\n", "public void schemaChanged(String serviceName,String version){\n  if (debug.messageEnabled()) {\n    debug.message(\"Global config changed \" + serviceName);\n  }\n  try {\n    AuthD authd=AuthD.getAuth();\n    if (serviceName.equals(ISAuthConstants.AUTH_SERVICE_NAME)) {\n      authd.updateAuthServiceGlobals(schemaManager);\n    }\n else     if (serviceName.equals(ISAuthConstants.AUTHCONFIG_SERVICE_NAME)) {\n      authd.updateAuthConfigGlobals(schemaManager);\n    }\n else     if (serviceName.equals(ISAuthConstants.PLATFORM_SERVICE_NAME)) {\n      authd.updatePlatformServiceGlobals(schemaManager);\n    }\n else     if (serviceName.equals(ISAuthConstants.SESSION_SERVICE_NAME)) {\n      authd.updateSessionServiceDynamics(schemaManager);\n    }\n  }\n catch (  Exception e) {\n    debug.error(\"Error schemaChanged : \" + e.getMessage());\n    if (debug.messageEnabled()) {\n      debug.message(\"Stack trace: \",e);\n    }\n  }\n}\n", "public Image addImageUrlInput(String listId, String contentType, BodyModelModel imageUrl, AddImageUrlInputOptionalParameter addImageUrlInputOptionalParameter) {\n        return addImageUrlInputWithServiceResponseAsync(listId, contentType, imageUrl, addImageUrlInputOptionalParameter).toBlocking().single().body();\n    }", "  final public void info() throws ParseException {\n    jj_consume_token(OPEN_BRACE);\n    jj_consume_token(INFO);\n    ignoredBlock();\n    jj_consume_token(CLOSE_BRACE);\n  }\n", "public String getProperty(String key, String defaultValue) {\n        String val = properties.get(key);\n\n        if (val == null) {\n            val = defaultValue;\n        }\n\n        return val;\n    }", "public void execBackwards(Map<String,INDArray> placeholders){\n        if (getFunction(\"grad\") == null) {\n            createGradFunction();\n        }\n\n        //Collect (unique) list of gradient names...\n        Set<String> varGradNames = new HashSet<>();\n        for(Variable v : variables.values()){\n            if(v.getVariable().getVariableType() == VariableType.VARIABLE){\n                SDVariable g = v.getVariable().gradient();\n                if(g != null) {\n                    //Not all variables can have gradients... for example: suppose graph has 2 independent loss functions,\n                    // optimizing only 1 might not require changing all variables\n                    varGradNames.add(g.getVarName());\n                }\n            }\n        }\n\n        //Edge case: if no variables, no variable gradients to calculate...\n        if(varGradNames.isEmpty()){\n            log.warn(\"Skipping gradient execution (backward pass) - no variables to be calculated (graph does not contain any VARIABLE type SDVariables).\\n\" +\n                    \"If gradients for other variables (such as placeholders) are required, use execBackwards(Map, List) instead\");\n            return;\n        }\n\n        List<String> vargradNamesList = new ArrayList<>(varGradNames);\n        execBackwards(placeholders, vargradNamesList);\n    }", "private void computeMaxLeases(){\n  if (inRecovery)   return;\n  maxServiceLease=Math.max(minMaxServiceLease,minRenewalInterval * (serviceByID.size() + ((eventByID.size() * minMaxServiceLease) / minMaxEventLease)));\n  maxEventLease=Math.max(minMaxEventLease,((maxServiceLease * minMaxEventLease) / minMaxServiceLease));\n}\n", "\tpublic void setParity(String c) {\n\t\tparity=\"None\";\n\t\tif (c!=null)\n\t\t\tswitch (c.charAt(0)) {\n\t\t\t\tcase 'e': case 'E':\n\t\t\t\t\tparity=\"Even\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'm': case 'M':\n\t\t\t\t\tparity=\"Mark\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'o': case 'O':\n\t\t\t\t\tparity=\"Odd\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 's': case 'S':\n\t\t\t\t\tparity=\"Space\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tparity=\"None\";\n\t\t\t}\n\t}\n", "public int deleteCascade(SpatialReferenceSystem srs) throws SQLException {\n\t\tint count = 0;\n\n\t\tif (srs != null) {\n\n\t\t\t// Delete Contents\n\t\t\tForeignCollection<Contents> contentsCollection = srs.getContents();\n\t\t\tif (!contentsCollection.isEmpty()) {\n\t\t\t\tContentsDao dao = getContentsDao();\n\t\t\t\tdao.deleteCascade(contentsCollection);\n\t\t\t}\n\n\t\t\t// Delete Geometry Columns\n\t\t\tGeometryColumnsDao geometryColumnsDao = getGeometryColumnsDao();\n\t\t\tif (geometryColumnsDao.isTableExists()) {\n\t\t\t\tForeignCollection<GeometryColumns> geometryColumnsCollection = srs\n\t\t\t\t\t\t.getGeometryColumns();\n\t\t\t\tif (!geometryColumnsCollection.isEmpty()) {\n\t\t\t\t\tgeometryColumnsDao.delete(geometryColumnsCollection);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Delete Tile Matrix Set\n\t\t\tTileMatrixSetDao tileMatrixSetDao = getTileMatrixSetDao();\n\t\t\tif (tileMatrixSetDao.isTableExists()) {\n\t\t\t\tForeignCollection<TileMatrixSet> tileMatrixSetCollection = srs\n\t\t\t\t\t\t.getTileMatrixSet();\n\t\t\t\tif (!tileMatrixSetCollection.isEmpty()) {\n\t\t\t\t\ttileMatrixSetDao.delete(tileMatrixSetCollection);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Delete\n\t\t\tcount = delete(srs);\n\t\t}\n\t\treturn count;\n\t}", "\tpublic void setLearningExperienceIdentifier(String learningExperienceIdentifier) {\n\t\tif (learningExperienceIdentifier.equals(noValue)) {\n\t\t\tperformance.deleteLearningExperienceIdentifier();\n\t\t}\n\t\telse {\n\t\t\tperformance.setLearningExperienceIdentifier(learningExperienceIdentifier);\n\t\t}\n\t}\n", "private long readFreqFromFile ( String fileName ) { long number = NUM_ ; try { BufferedReader reader = new BufferedReader ( new FileReader ( fileName ) ) ; try { String line = reader . readLine ( ) ; number = parseLong ( line ) ; } finally { reader . clos", "    public void open() {\n\t    dviState=new DVIState();\n \t }\n", "public boolean isSyncEnabled ( ) { return syncEnabled ; }", "public boolean empty(){\n  return text.length() == 0 && links.size() == 0 && templates.size() == 0 && tags.size() == 0 && mathSpans.size() == 0;\n}\n", "private Paint createGraphicDropShadowGradient ( Shape s ) { Rectangle2D b = s . getBounds2D ( ) ; float midX = ( float ) b . getCenterX ( ) ; float y1 = ( float ) b . getMinY ( ) ; float y2 = ( float ) b . getMaxY ( ) ; return createGradient ( midX , y1 ,", "protected synchronized boolean add(Set<String> stackTraceSet,final Throwable throwable){\n  if (this.on) {\n    String trace=convert(throwable);\n    return stackTraceSet.add(trace);\n  }\n  return false;\n}\n", "  public void setZoom(double d) {\n    scene.setZoomFactor(d);\n    scene.validate();\n  }\n", "private void prepareDataSet(){\n  dataSet1=Arrays.asList(new String[]{\"a\",\"b\"});\n  dataSet2=Arrays.asList(new String[]{\"c\",\"d\"});\n  dataSet3=Arrays.asList(new String[]{\"e\",\"f\"});\n}\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public static String encodeArray(String[] array){\n  StringBuilder buffer=new StringBuilder();\n  int nrItems=array.length;\n  for (int i=0; i < nrItems; i++) {\n    String item=array[i];\n    item=StringUtil.gsub(\"_\",\"__\",item);\n    buffer.append(item);\n    if (i < nrItems - 1) {\n      buffer.append(\"_.\");\n    }\n  }\n  return buffer.toString();\n}\n", "void makeCall ( int fromMemberId , int toMemberId ) throws IOException { outgoing ( BOOL_ , fromMemberId , toMemberId ) ; }", "public void checkMsrpTransactionInfo(){\n  if (mTransactionInfoMap != null) {\n    List<MsrpTransactionInfo> msrpTransactionInfos;\nsynchronized (mTransactionMsgIdMapLock) {\n      msrpTransactionInfos=new ArrayList<>(mTransactionInfoMap.values());\n    }\n    for (    MsrpTransactionInfo msrpTransactionInfo : msrpTransactionInfos) {\n      long delta=System.currentTimeMillis() - msrpTransactionInfo.mTimestamp;\n      if ((delta >= TRANSACTION_INFO_EXPIRY_PERIOD) || (delta < 0)) {\n        if (sLogger.isActivated()) {\n          sLogger.debug(\"Transaction info have expired (transactionId: \" + msrpTransactionInfo.mTransactionId + \", msgId: \"+ msrpTransactionInfo.mMsrpMsgId+ \")\");\n        }\n        mTransactionInfoMap.remove(msrpTransactionInfo.mTransactionId);\n        if (mMessageTransactionMap != null) {\n          mMessageTransactionMap.remove(msrpTransactionInfo.mMsrpMsgId);\n        }\n      }\n    }\n  }\n}\n", "private boolean isLeadVdcForGeoUpgrade(){\n  String localId=drUtil.getLocalVdcShortId();\n  String strVdcIds=targetVdcPropInfo.getProperty(VdcConfigUtil.VDC_IDS);\n  String[] vdcIds=strVdcIds.split(\",\");\n  for (  String id : vdcIds) {\n    if (localId.compareToIgnoreCase(id) > 0) {\n      log.info(\"Current VDC {} is greater than {}.\",localId,id);\n      return false;\n    }\n  }\n  log.info(\"Current VDC {} is the lead in current geo {}\",localId,strVdcIds);\n  return true;\n}\n", "public Reference addReference ( final Address address , final ReferenceType type ) throws CouldntSaveDataException { Preconditions . checkNotNull ( address , STR_ ) ; Preconditions . checkNotNull ( type , STR_ ) ; try { final CReference reference = new CReference ( new CAddress ( address . toLong ( ) ) , type . getNative ( ) ) ; m_node . addReference ( reference ) ; return ObjectFinders . getObject ( reference , m_references ) ; } catch ( final com . google . security . zynamics . binnavi . Database . Exceptions . CouldntSaveDataException e ) { throw new CouldntSaveDataException ( e ) ; } }", "    private String getParametersString() {\n        String url = HttpUnitUtils.trimFragment( getDestination() );\n        if (url.trim().length() == 0) url = getBaseURL().toExternalForm();\n        if (HttpUnitUtils.isJavaScriptURL( url )) return \"\";\n        final int questionMarkIndex = url.indexOf(\"?\");\n        if (questionMarkIndex >= 1 && questionMarkIndex < url.length() - 1) {\n            return url.substring( questionMarkIndex + 1 );\n        }\n        return \"\";\n    }\n", "public static Socket createSocket(InetAddress address,int port) throws IOException {\n  Socket socket=null;\n  setKeystore();\n  SSLSocketFactory f=(SSLSocketFactory)SSLSocketFactory.getDefault();\n  SSLSocket secureSocket=(SSLSocket)f.createSocket();\n  secureSocket.connect(new InetSocketAddress(address,port),SysProperties.SOCKET_CONNECT_TIMEOUT);\n  secureSocket.setEnabledProtocols(disableSSL(secureSocket.getEnabledProtocols()));\n  if (SysProperties.ENABLE_ANONYMOUS_TLS) {\n    String[] list=enableAnonymous(secureSocket.getEnabledCipherSuites(),secureSocket.getSupportedCipherSuites());\n    secureSocket.setEnabledCipherSuites(list);\n  }\n  socket=secureSocket;\n  return socket;\n}\n", "protected void initializeTraining(){\n        if(!initializedTraining) {\n            if(trainingConfig == null) {\n                throw new ND4JIllegalStateException(\"Please specify a training config with setTrainingConfig\");\n            }\n            //First: infer the variables to be optimized if required\n            if(trainingConfig.getTrainableParams() == null || trainingConfig.getTrainableParams().size() == 0) {\n                //Variable is trainable if it's not the output of some function\n                //TODO also - should be floating point type\n                List<String> trainVarList = new ArrayList<>();\n                for(Variable var : variables.values()){\n                    SDVariable v = var.getVariable();\n                    String n = v.getVarName();\n                    if(variables.get(n).getOutputOfOp() == null &&       //Is a leaf (not the output of a function)\n                            !isPlaceHolder(n) &&                                //and not a placeholder\n                            !variables.get(n).getVariable().isConstant() &&     //and not a constant\n                            (trainingConfig.getDataSetFeatureMapping() == null || !trainingConfig.getDataSetFeatureMapping().contains(n))   &&  //and not an input (this really should be a placeholder, but we can't guarantee that...)\n                            (trainingConfig.getDataSetLabelMapping() == null || !trainingConfig.getDataSetLabelMapping().contains(n))   &&      //and not a label (this really should be a placeholder, but we can't guarantee that...)\n                            (trainingConfig.getDataSetFeatureMaskMapping() == null || !trainingConfig.getDataSetFeatureMaskMapping().contains(n))   &&  //and not a feature mask (this really should be a placeholder, but we can't guarantee that...)\n                            (trainingConfig.getDataSetLabelMaskMapping() == null || !trainingConfig.getDataSetLabelMaskMapping().contains(n))){  //and not a label input (this really should be a placeholder, but we can't guarantee that...)\n                        trainVarList.add(n);\n                    }\n                }\n\n                trainingConfig.setTrainableParams(trainVarList);\n                log.info(\"Inferred trainable variables: {}\", trainVarList);\n            }\n\n            //Allocate updater state\n            long numTrainableParams = 0;\n            DataType dt = null;             //TODO support mixed precision variables - https://github.com/deeplearning4j/deeplearning4j/issues/6992\n            for(String s : trainingConfig.getTrainableParams()) {\n                SDVariable v = variables.get(s).getVariable();\n                Preconditions.checkState(v != null, \"No variable found for trainable parameter name \\\"%s\\\"\", s);\n\n                INDArray arr = v.getArr();\n                Preconditions.checkState(arr != null, \"No array found for trainable parameter \\\"%s\\\"\", s);\n                numTrainableParams += arr.length();\n                if(dt == null)\n                    dt = arr.dataType();\n            }\n\n            long updaterStateSize = trainingConfig.getUpdater().stateSize(numTrainableParams);\n\n            if(updaterStateSize > 0) {\n                try(MemoryWorkspace ws = Nd4j.getMemoryManager().scopeOutOfWorkspaces()) {\n                    updaterState = Nd4j.createUninitialized(dt, 1, updaterStateSize);\n                }\n            }\n\n            long viewSoFar = 0;\n            updaterViews = new HashMap<>();\n            updaterMap = new HashMap<>();\n            for(String s : trainingConfig.getTrainableParams()) {\n                long thisSize = trainingConfig.getUpdater().stateSize(variables.get(s).getVariable().getArr().length());\n                INDArray view = (updaterStateSize == 0 || thisSize == 0 ? null :\n                        updaterState.get(NDArrayIndex.interval(0, 1), NDArrayIndex.interval(viewSoFar, viewSoFar + thisSize)));\n\n                updaterViews.put(s, view);\n                updaterMap.put(s, trainingConfig.getUpdater().instantiate(view, true));\n                viewSoFar += thisSize;\n            }\n\n            initializedTraining = true;\n        }\n    }", "public static int getDirection (\n        MisoSceneMetrics metrics, int ax, int ay, int bx, int by)\n    {\n        Point afpos = new Point(), bfpos = new Point();\n\n        // convert screen coordinates to full coordinates to get both\n        // tile coordinates and fine coordinates\n        screenToFull(metrics, ax, ay, afpos);\n        screenToFull(metrics, bx, by, bfpos);\n\n        // pull out the tile coordinates for each point\n        int tax = fullToTile(afpos.x);\n        int tay = fullToTile(afpos.y);\n\n        int tbx = fullToTile(bfpos.x);\n        int tby = fullToTile(bfpos.y);\n\n        // compare tile coordinates to determine direction\n        int dir = getIsoDirection(tax, tay, tbx, tby);\n        if (dir != DirectionCodes.NONE) {\n            return dir;\n        }\n\n        // destination point is in the same tile as the\n        // origination point, so consider fine coordinates\n\n        // pull out the fine coordinates for each point\n        int fax = afpos.x - (tax * FULL_TILE_FACTOR);\n        int fay = afpos.y - (tay * FULL_TILE_FACTOR);\n\n        int fbx = bfpos.x - (tbx * FULL_TILE_FACTOR);\n        int fby = bfpos.y - (tby * FULL_TILE_FACTOR);\n\n        // compare fine coordinates to determine direction\n        dir = getIsoDirection(fax, fay, fbx, fby);\n\n        // arbitrarily return southwest if fine coords were also equivalent\n        return (dir == -1) ? SOUTHWEST : dir;\n    }", "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>();\n  newVector.addElement(new Option(\"\\tThe input file\",\"i\",1,\"-i <the input file>\"));\n  newVector.addElement(new Option(\"\\tThe output file\",\"o\",1,\"-o <the output file>\"));\n  return newVector.elements();\n}\n", "public void castToNonPrimitiveIfNecessary ( final ClassNode sourceType , final ClassNode targetType ) { OperandStack os = controller . getOperandStack ( ) ; ClassNode boxedType = os . box ( ) ; if ( WideningCategories . implementsInterfaceOrSubclassOf ( b", "public static void addClipboardListener(final ClipboardListener l){\n  listenerList.add(l);\n}\n", "public void visitLabel ( Label label ) { if ( mv != null ) { mv . visitLabel ( label ) ; } }", "\tprivate boolean isDebug() {\n\t\treturn debug && log.isDebugEnabled();\n\t}\n", "    protected void storeObject(DataObject obj) {\n        things.put(new Integer(obj.getUid()), obj);\n    }\n", "public void fireRequestBlockTwo() throws RemoteServerException, LoginFailedException {\n  fireRequestBlock(new ServerRequest(RequestTypeOuterClass.RequestType.GET_ASSET_DIGEST,CommonRequest.getGetAssetDigestMessageRequest()));\n}\n", "    protected Element makeTree(DocumentFragment f) {\n        NodeList nl = f.getChildNodes();\n        if (nl.getLength() == 1 \n            && nl.item(0).getNodeType() == Node.ELEMENT_NODE\n            && nl.item(0).getNodeName().equals(ROOT)) {\n            return (Element) nl.item(0);\n        } else {\n            Element p = f.getOwnerDocument().createElementNS(MSBUILD_NS,\n\t\t\t\t\t\t\t     ROOT);\n            p.setAttribute(\"DefaultTargets\", TARGET);\n\n            Element t = f.getOwnerDocument().createElementNS(MSBUILD_NS,\n\t\t\t\t\t\t\t     \"Target\");\n            t.setAttribute(\"Name\", TARGET);\n\n            p.appendChild(t);\n            t.appendChild(f);\n            return p;\n        }\n    }\n", "private int match ( final int [ ] list , final int value ) { for ( int i = NUM_ ; i < list . length ; i ++ ) { if ( value == list [ i ] ) return i ; } return - NUM_ ; }", "\tprivate void updatePorts(IFigure fig) {\n\t\tVertex vertex = (Vertex) getModel();\n\t\tVertexFigure figure = (VertexFigure) fig;\n\t\tGraph parent = vertex.getParent();\n\n\t\tfigure.resetPorts();\n\n\t\tfor (Edge edge : parent.incomingEdgesOf(vertex)) {\n\t\t\tString port = (String) edge\n\t\t\t\t\t.getValue(ObjectType.PARAMETER_TARGET_PORT);\n\t\t\tfigure.addInputPort(port);\n\t\t}\n\n\t\tfor (Edge edge : parent.outgoingEdgesOf(vertex)) {\n\t\t\tString port = (String) edge\n\t\t\t\t\t.getValue(ObjectType.PARAMETER_SOURCE_PORT);\n\t\t\tfigure.addOutputPort(port);\n\t\t}\n\n\t\tfigure.adjustSize();\n\t\tvertex.setValue(Vertex.PROPERTY_SIZE, figure.getBounds().getCopy());\n\t}\n", "private SourceStream createStream(StreamSet streamSet,\n                              int priority,\n                              Reliability reliability) throws SIResourceException\n\n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(tc, \"createStream\", new Object[] {streamSet, new Integer(priority), reliability});\n\n    SourceStream stream = null;\n\n    //there is no source stream for express messages\n    if(reliability.compareTo(Reliability.BEST_EFFORT_NONPERSISTENT) > 0)\n    {\n      //Warning - this assumes that ASSURED is always the highest Reliability\n      //and that UNKNOWN is always the lowest (0).\n      stream = new SourceStream(priority, //priority\n                        reliability, //reliability\n                        downControl,\n                        new ArrayList(),\n                        streamSet,\n                        messageProcessor.getAlarmManager(),\n                        destinationHandler);\n    }\n\n    streamSet.setStream(priority, reliability, stream);\n\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.exit(tc, \"createStream\", stream);\n\n    return stream;\n  }", "public Vector<Report> resolveAction(IGame game){\n  Vector<Report> reports=new Vector<Report>();\n  Report r;\n  if (!isPossible(game)) {\n    r=new Report(3445);\n    r.subject=getEntityId();\n    r.newlines=1;\n    reports.addElement(r);\n    return reports;\n  }\n  final Entity attacker=getEntity(game);\n  final Coords apos=attacker.getPosition();\n  final Targetable target=getTarget(game);\n  final Coords tpos=target.getPosition();\n  if (attacker.usedSearchlight()) {\n    r=new Report(3450);\n    r.subject=getEntityId();\n    r.add(attacker.getDisplayName());\n    r.newlines=1;\n    reports.addElement(r);\n    return reports;\n  }\n  attacker.setUsedSearchlight(true);\n  ArrayList<Coords> in=Coords.intervening(apos,tpos);\n  for (  Coords c : in) {\n    for (    Entity en : game.getEntitiesVector(c)) {\n      LosEffects los=LosEffects.calculateLos(game,getEntityId(),en);\n      if (los.canSee()) {\n        en.setIlluminated(true);\n        r=new Report(3455);\n        r.subject=getEntityId();\n        r.newlines=1;\n        r.add(en.getDisplayName());\n        r.add(attacker.getDisplayName());\n        reports.addElement(r);\n      }\n    }\n  }\n  return reports;\n}\n", "  public URL getSrcUrl(String mirror) {\n    try {\n      return new URL (format.format(new String[] {mirror, srcName}));\n    } catch (MalformedURLException mue) {\n      return null;\n    }\n  }\n", "\tprivate void logicSection(final StringBuilder builder) {\n\t\tfinal SetLogicCommand setLogicCommand = new SetLogicCommand(\n\t\t\t\tlogic.getName());\n\t\tsetLogicCommand.toString(builder);\n\t\tbuilder.append(\"\\n\");\n\t}\n", "private TopDocs searchByVersion(String selfLink,IndexSearcher s,Long version) throws IOException {\n  Query tqSelfLink=new TermQuery(new Term(ServiceDocument.FIELD_NAME_SELF_LINK,selfLink));\n  BooleanQuery.Builder builder=new BooleanQuery.Builder();\n  builder.add(tqSelfLink,Occur.MUST);\n  if (version != null) {\n    Query versionQuery=LongPoint.newRangeQuery(ServiceDocument.FIELD_NAME_VERSION,version,version);\n    builder.add(versionQuery,Occur.MUST);\n  }\n  TopDocs hits=s.search(builder.build(),1,this.versionSort,false,false);\n  return hits;\n}\n", "public static String monitorProcessOutput(Process p,String theString){\n  boolean keepReadingLines=true;\n  boolean endOfLine=false;\n  boolean foundIt=false;\n  boolean appRunning=true;\n  String ret=null;\n  int readInt=-1;\n  InputStream is=null;\n  BufferedReader br=null;\n  String line=\"\";\n  try {\n    is=p.getInputStream();\n    br=new BufferedReader(new InputStreamReader(is));\n    while (keepReadingLines) {\n      endOfLine=false;\n      line=\"\";\n      while (!endOfLine) {\n        if (br.ready() && (is.available() > 0)) {\n          readInt=is.read();\n          if (readInt == 13 || readInt == 10) {\n            endOfLine=true;\n          }\n else {\n            line+=(char)readInt;\n          }\n        }\n else {\n          Thread.sleep(100);\n          if (!processRunning(p) && (!br.ready()) && (is.available() <= 0)) {\n            endOfLine=true;\n            keepReadingLines=false;\n          }\n else {\n          }\n        }\n      }\n      if (line.indexOf(theString) > -1) {\n        ret=line;\n        foundIt=true;\n        keepReadingLines=false;\n      }\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  return ret;\n}\n", "@Override\n    public void rebalance() {\n        double target = evenDistribution();\n        final double myLoad = myLoad();\n        if (myLoad > target) {\n            LOG.info(\"Smart Rebalance triggered. Load: %s. Target: %s\", myLoad, target);\n            drainToLoad((long) target);\n        }\n    }", "public Response unLock(Session session, String path, List<String> tokens)\r\n   {\r\n      try\r\n      {\r\n         try\r\n         {\r\n            Node node = (Node)session.getItem(path);\r\n\r\n            if (node.isLocked())\r\n            {\r\n               node.unlock();\r\n               session.save();\r\n            }\r\n\r\n            return Response.status(HTTPStatus.NO_CONTENT).build();\r\n         }\r\n         catch (PathNotFoundException exc)\r\n         {\r\n            if (nullResourceLocks.isLocked(session, path))\r\n            {\r\n               nullResourceLocks.checkLock(session, path, tokens);\r\n               nullResourceLocks.removeLock(session, path);\r\n               return Response.status(HTTPStatus.NO_CONTENT).build();\r\n            }\r\n\r\n            return Response.status(HTTPStatus.NOT_FOUND).entity(exc.getMessage()).build();\r\n         }\r\n\r\n      }\r\n      catch (LockException exc)\r\n      {\r\n         return Response.status(HTTPStatus.LOCKED).entity(exc.getMessage()).build();\r\n      }\r\n      catch (Exception exc)\r\n      {\r\n         log.error(exc.getMessage(), exc);\r\n         return Response.serverError().entity(exc.getMessage()).build();\r\n      }\r\n\r\n   }", "protected Builder(@Nonnull final Builder builder){\n  Check.notNull(builder,\"builder\");\n  family=builder.family;\n  icon=builder.icon;\n  id=builder.id;\n  infoUrl=builder.infoUrl;\n  name=builder.name;\n  patterns.addAll(builder.patterns);\n  producer=builder.p", "public static boolean isBeingProvedObligation ( ObligationStatus status ) { int obState = status . getObligationState ( ) ; String [ ] proverStatuses = ColorPredicate . proverStatuses ( obState ) ; for ( int i = NUM_ ; i < proverStatuses . length ; i ++ ) { if ( proverStatuses [ i ] . equals ( ColorPredicate . PROVING_STATUS ) ) { return BOOL_ ; } } return BOOL_ ; }", "public static File getRequestFile(final PutObjectRequest putObjectRequest) {\n        if (putObjectRequest.getFile() != null) return putObjectRequest.getFile();\n        return null;\n    }", "@Override public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  doGetPost(request,response);\n}\n", "public StateInfo(StateInfo info){\n  this.state=info.state;\n  this.font=info.font;\n  if (info.data != null) {\n    if (data == null) {\n      data=new HashMap();\n    }\n    data.putAll(info.data);\n  }\n  if (info.colors != null) {\n    this.colors=new Color[info.colors.length];\n    System.arraycopy(info.colors,0,colors,0,info.colors.length);\n  }\n}\n", "public void importContext() {\r\n\t\tJFileChooser chooser = new JFileChooser(Constant.getContextsDir());\r\n\t\tFile file = null;\r\n\t    chooser.setFileFilter(new FileFilter() {\r\n\t           @Override\r\n\t           public boolean accept(File file) {\r\n\t                if (file.isDirectory()) {\r\n\t                    return true;\r\n\t                } else if (file.isFile() && file.getName().endsWith(\".context\")) {\r\n\t                    return true;\r\n\t                }\r\n\t                return false;\r\n\t            }\r\n\t           @Override\r\n\t           public String getDescription() {\r\n\t               return Constant.messages.getString(\"file.format.zap.context\");\r\n\t           }\r\n\t    });\r\n\t    \r\n\t    int rc = chooser.showOpenDialog(View.getSingleton().getMainFrame());\r\n\t    if(rc == JFileChooser.APPROVE_OPTION) {\r\n\t\t\ttry {\r\n\t    \t\tfile = chooser.getSelectedFile();\r\n\t    \t\tif (file == null || ! file.exists()) {\r\n\t    \t\t\treturn;\r\n\t    \t\t}\r\n\t    \t\t// Import the context\r\n\t\t\t\tModel.getSingleton().getSession().importContext(file);\r\n\t\t\t\t\r\n\t\t\t\t// Show the dialog\r\n\t\t\t    View.getSingleton().showSessionDialog(\r\n\t\t\t    \t\tModel.getSingleton().getSession(), \r\n\t\t\t    \t\tConstant.messages.getString(\"context.list\"), true);\r\n\t\t\t\t\r\n\t\t\t} catch (IllegalContextNameException e) {\r\n\t\t\t\tString detailError;\r\n\t\t\t\tif (e.getReason() == IllegalContextNameException.Reason.EMPTY_NAME) {\r\n\t\t\t\t\tdetailError = Constant.messages.getString(\"context.error.name.empty\");\r\n\t\t\t\t} else if (e.getReason() == IllegalContextNameException.Reason.DUPLICATED_NAME) {\r\n\t\t\t\t\tdetailError = Constant.messages.getString(\"context.error.name.duplicated\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdetailError = Constant.messages.getString(\"context.error.name.unknown\");\r\n\t\t\t\t}\r\n\t\t\t\tView.getSingleton().showWarningDialog(Constant.messages.getString(\"context.import.error\", detailError));\r\n\t\t\t} catch (Exception e1) {\r\n\t\t\t\tlog.error(e1.getMessage(), e1);\r\n\t\t\t\tView.getSingleton().showWarningDialog(Constant.messages.getString(\"context.import.error\", e1.getMessage()));\r\n\t\t\t}\r\n\t    }\r\n\t}", "    public int doEndTag() throws JspTagException {\n        String val = null;\n\n        JLCPUser user = (JLCPUser) pageContext.getAttribute(\"currentOnlineUser\");\n\n        val = user.getFirstName() + \" \" + user.getLastName();\n        JspWriter out = pageContext.getOut();\n        try {\n            out.write(val);\n\n        } catch (IOException e) {\n            throw new JspTagException(\"Error writing to page\");\n        }\n\n        return EVAL_PAGE;\n    }\n", "void init ( ConnectionConfig config , String tableName ) ;", "public HttpRequest timeOut ( int timeOutMs ) { mTimeOutMs = timeOutMs ; return this ; }", "\tprivate void onLoad() {\n\t\toptionsRenderer.setRandomPicture();\n\t\toptionsRenderer.setVisible(!optionsRenderer.isVisible());\n\t\tstartStopAnimations(!optionsRenderer.isVisible());\n\t\tlayers.validate();\n\t}\n", "public void addLanguage(Long languageId){\n  if (languageId != null) {\n    addLanguage(languageId.toString());\n  }\n else {\n    Logger.warn(this,\"Tried to add languageId Null!\");\n  }\n}\n", "    public void showToolBar() {\n        if (toolBar == null) {\n            toolBar = new ToolBar(this, Preferences.userNodeForPackage(this.getClass()));\n        }\n        toolBar.setVisible(true);\n    }\n", "    public ArtifactId asArtId(int index){\n        return (ArtifactId)(args[index]);\n    }\n", "protected void registerLangHandler(CreateSimpleLexer handler,List<String> fileExtensions) throws Exception {\n  for (int i=fileExtensions.size(); --i >= 0; ) {\n    String ext=fileExtensions.get(i);\n    if (langHandlerRegistry.get(ext) == null) {\n      langHandlerRegistry.put(ext,handler);\n    }\n else {\n      throw new Exception(\"cannot override language handler \" + ext);\n    }\n  }\n}\n", "\tpublic FindUserResponse findUser(FindUser findUser){\n\t\treturn srbService.findUser(findUser);\n\t}\n", "public static <T>T checkNotNull(T reference,Object errorMessage){\n  if (reference == null) {\n    throw new NullPointerException(String.valueOf(errorMessage));\n  }\n  return reference;\n}\n", "public static NameMatcher < JobKey > jobNameContains ( String compareTo ) { return NameMatcher . nameContains ( compareTo ) ; }", "public static String enumToCounter(Enum e){\n  return e.name();\n}\n", "@GwtIncompatible(\"incompatible method\")\n    public static void isAssignableFrom(final Class<?> superType, final Class<?> type, final String message, final Object... values) {\n        // TODO when breaking BC, consider returning type\n        if (!superType.isAssignableFrom(type)) {\n            throw new IllegalArgumentException(StringUtils.simpleFormat(message, values));\n        }\n    }", "  public ContactsList getContacts() throws IOException {\n    return super\n        .executeGet(UrlFactory.getDefaultContactsFeedUrl(), null, false, ContactsList.class);\n  }\n", "\tpublic boolean isValidValue(double value) {\n\t\treturn value >= 0.0;\n\t}\n", "private void handleException(String key, Exception e) {\n        if (e != null) {\n            log.error(key, e.getLocalizedMessage());\n            throw new Abort(e);\n        } else {\n            log.error(key);\n            throw new Abort();\n        }\n   ", "final int resolveNameIndex(CharSequence name)\r\n    {\r\n        int size = 0;\r\n        int index = 0;\r\n        constantReadLock.lock();\r\n        try\r\n        {\r\n            size = getConstantPoolSize();\r\n            index = getNameIndex(name);\r\n        }\r\n        finally\r\n        {\r\n            constantReadLock.unlock();\r\n        }\r\n        if (index != -1)\r\n        {\r\n            return index;\r\n        }\r\n        else\r\n        {\r\n            return addConstantInfo(new Utf8(name), size);\r\n        }\r\n    }", "    public void addAvatarInUseListener(AvatarInUseListener listener) {\n        synchronized (inUseListenerSet) {\n            inUseListenerSet.add(listener);\n        }\n    }\n", "public Scale getNearestScale(\n            final ZoomLevels zoomLevels,\n            final double tolerance,\n            final ZoomLevelSnapStrategy zoomLevelSnapStrategy,\n            final boolean geodetic,\n            final Rectangle paintArea,\n            final double dpi) {\n\n        final Scale scale = getScale(paintArea, dpi);\n        final Scale correctedScale;\n        final double scaleRatio;\n        if (geodetic) {\n            final double currentScaleDenominator = scale.getGeodeticDenominator(\n                    getProjection(), dpi, getCenter());\n            scaleRatio = scale.getDenominator(dpi) / currentScaleDenominator;\n            correctedScale = scale.toResolution(scale.getResolution() / scaleRatio);\n        } else {\n            scaleRatio = 1;\n            correctedScale = scale;\n        }\n\n        DistanceUnit unit = DistanceUnit.fromProjection(getProjection());\n        final ZoomLevelSnapStrategy.SearchResult result = zoomLevelSnapStrategy.search(\n                correctedScale, tolerance, zoomLevels);\n        final Scale newScale;\n\n        if (geodetic) {\n            newScale = new Scale(\n                    result.getScale(unit).getDenominator(PDF_DPI) * scaleRatio,\n                    getProjection(), dpi);\n        } else {\n            newScale = result.getScale(unit);\n        }\n\n        return newScale;\n    }", "    private List invokeAfterDetach(Collection objs, List exceps) {\n        Iterator itr = (_full) ? objs.iterator()\n            : _detached.entrySet().iterator();\n\n        Object orig, detached;\n        Map.Entry entry;\n        while (itr.hasNext()) {\n            if (_full) {\n                orig = itr.next();\n                detached = orig;\n            } else {\n                entry = (Map.Entry) itr.next();\n                orig = entry.getKey();\n                detached = entry.getValue();\n            }\n\n            StateManagerImpl sm = _broker.getStateManagerImpl(orig, true);\n            try {\n                if (sm != null)\n                    _broker.fireLifecycleEvent(detached, orig,\n                        sm.getMetaData(), LifecycleEvent.AFTER_DETACH);\n            } catch (CallbackException ce) {\n                exceps = add(exceps, ce);\n                if (_failFast)\n                    break; // don't continue processing\n            }\n        }\n        return exceps;\n    }\n", "public static void spooky4(final BitVector bv,final long seed,final long[] tuple){\n  long h0, h1, h2, h3;\n  h0=seed;\n  h1=seed;\n  h2=ARBITRARY_BITS;\n  h3=ARBITRARY_BITS;\n  final int length=(int)bv.length();\n  int remaining=length;\n  int pos=0;\n  while (remaining >= Long.SIZE * 4) {\n    h2+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE);\n    h3+=bv.getLong(pos + 1 * Long.SIZE,pos + 2 * Long.SIZE);\n    h2=Long.rotateLeft(h2,50);\n    h2+=h3;\n    h0^=h2;\n    h3=Long.rotateLeft(h3,52);\n    h3+=h0;\n    h1^=h3;\n    h0=Long.rotateLeft(h0,30);\n    h0+=h1;\n    h2^=h0;\n    h1=Long.rotateLeft(h1,41);\n    h1+=h2;\n    h3^=h1;\n    h2=Long.rotateLeft(h2,54);\n    h2+=h3;\n    h0^=h2;\n    h3=Long.rotateLeft(h3,48);\n    h3+=h0;\n    h1^=h3;\n    h0=Long.rotateLeft(h0,38);\n    h0+=h1;\n    h2^=h0;\n    h1=Long.rotateLeft(h1,37);\n    h1+=h2;\n    h3^=h1;\n    h2=Long.rotateLeft(h2,62);\n    h2+=h3;\n    h0^=h2;\n    h3=Long.rotateLeft(h3,34);\n    h3+=h0;\n    h1^=h3;\n    h0=Long.rotateLeft(h0,5);\n    h0+=h1;\n    h2^=h0;\n    h1=Long.rotateLeft(h1,36);\n    h1+=h2;\n    h3^=h1;\n    h0+=bv.getLong(pos + 2 * Long.SIZE,pos + 3 * Long.SIZE);\n    h1+=bv.getLong(pos + 3 * Long.SIZE,pos + 4 * Long.SIZE);\n    remaining-=4 * Long.SIZE;\n    pos+=4 * Long.SIZE;\n  }\n  if (remaining >= Long.SIZE * 2) {\n    h2+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE);\n    h3+=bv.getLong(pos + 1 * Long.SIZE,pos + 2 * Long.SIZE);\n    remaining-=2 * Long.SIZE;\n    pos+=2 * Long.SIZE;\n    h2=Long.rotateLeft(h2,50);\n    h2+=h3;\n    h0^=h2;\n    h3=Long.rotateLeft(h3,52);\n    h3+=h0;\n    h1^=h3;\n    h0=Long.rotateLeft(h0,30);\n    h0+=h1;\n    h2^=h0;\n    h1=Long.rotateLeft(h1,41);\n    h1+=h2;\n    h3^=h1;\n    h2=Long.rotateLeft(h2,54);\n    h2+=h3;\n    h0^=h2;\n    h3=Long.rotateLeft(h3,48);\n    h3+=h0;\n    h1^=h3;\n    h0=Long.rotateLeft(h0,38);\n    h0+=h1;\n    h2^=h0;\n    h1=Long.rotateLeft(h1,37);\n    h1+=h2;\n    h3^=h1;\n    h2=Long.rotateLeft(h2,62);\n    h2+=h3;\n    h0^=h2;\n    h3=Long.rotateLeft(h3,34);\n    h3+=h0;\n    h1^=h3;\n    h0=Long.rotateLeft(h0,5);\n    h0+=h1;\n    h2^=h0;\n    h1=Long.rotateLeft(h1,36);\n    h1+=h2;\n    h3^=h1;\n  }\n  if (remaining > Long.SIZE) {\n    h2+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE);\n    h3+=bv.getLong(pos + 1 * Long.SIZE,length);\n  }\n else   if (remaining > 0) {\n    h2+=bv.getLong(pos,length);\n  }\n else {\n    h2+=ARBITRARY_BITS;\n    h3+=ARBITRARY_BITS;\n  }\n  h0+=length;\n  h3^=h2;\n  h2=Long.rotateLeft(h2,15);\n  h3+=h2;\n  h0^=h3;\n  h3=Long.rotateLeft(h3,52);\n  h0+=h3;\n  h1^=h0;\n  h0=Long.rotateLeft(h0,26);\n  h1+=h0;\n  h2^=h1;\n  h1=Long.rotateLeft(h1,51);\n  h2+=h1;\n  h3^=h2;\n  h2=Long.rotateLeft(h2,28);\n  h3+=h2;\n  h0^=h3;\n  h3=Long.rotateLeft(h3,9);\n  h0+=h3;\n  h1^=h0;\n  h0=Long.rotateLeft(h0,47);\n  h1+=h0;\n  h2^=h1;\n  h1=Long.rotateLeft(h1,54);\n  h2+=h1;\n  h3^=h2;\n  h2=Long.rotateLeft(h2,32);\n  h3+=h2;\n  h0^=h3;\n  h3=Long.rotateLeft(h3,25);\n  h0+=h3;\n  h1^=h0;\n  h0=Long.rotateLeft(h0,63);\n  h1+=h0;\nswitch (tuple.length) {\ncase 4:\n    tuple[3]=h3;\ncase 3:\n  tuple[2]=h2;\ncase 2:\ntuple[1]=h1;\ncase 1:\ntuple[0]=h0;\n}\n}\n", "    protected void removeObjectSet(Set objectKeySet) {\n        if (objectKeySet != null) {\n            for (Iterator i = objectKeySet.iterator(); i.hasNext();) {\n                String objectKey = (String) i.next();\n                ObjectSetOwner objectSetOwner = (ObjectSetOwner) object2owner.get(objectKey);\n\n                if (objectSetOwner != null) {\n                    object2owner.remove(objectKey);\n                    objectSetOwner.getOwnedObjectSet().remove(objectKey);\n                }\n            }\n        }\n    }\n", "    public void renameCategory( Integer key, String category ) {\n        removeCategory( key );\n        addCategory( key, category );\n    }\n", "public static String escape(String string, char escape, boolean isPath)\n   {\n      try\n      {\n         BitSet validChars = isPath ? URISaveEx : URISave;\n         byte[] bytes = string.getBytes(\"utf-8\");\n         StringBuilder out = new StringBuilder(bytes.length);\n         for (int i = 0; i < bytes.length; i++)\n         {\n            int c = bytes[i] & 0xff;\n            if (validChars.get(c) && c != escape)\n            {\n               out.append((char)c);\n            }\n            else\n            {\n               out.append(escape);\n               out.append(hexTable[(c >> 4) & 0x0f]);\n               out.append(hexTable[(c) & 0x0f]);\n            }\n         }\n         return out.toString();\n      }\n      catch (UnsupportedEncodingException e)\n      {\n         throw new InternalError(e.toString());\n      }\n   }", "public static boolean isConversionSupported(AudioFormat targetFormat,AudioFormat sourceFormat){\n  List codecs=getFormatConversionProviders();\n  for (int i=0; i < codecs.size(); i++) {\n    FormatConversionProvider codec=(FormatConversionProvider)codecs.get(i);\n    if (codec.isConversionSupported(targetFormat,sourceFormat)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "\tpublic MenuStructure getThisMenu( ) {\n//\t\tTolvenLogger.info( \"******** [MenuAction] Fetch MenuStructure for account: \" + getAccountId() + \" path: \" + getTargetMenuPath().getPath() + \" element: \" + getElement(), MenuAction.class);\n//\t\tMenuData md = getMenuLocal().findMenuDataItem(getAccountId(), getElement());\n\n\t\tif (ms==null) ms =  getMenuLocal().findMenuStructure( TolvenRequest.getInstance().getAccountUser(), getTargetMenuPath().getPath() );\n\t\treturn ms;\n\t}\n", "public Node newOptionalParameterFromNode(Node n) {\n    Node newParam = newParameterFromNode(n);\n    if (!newParam.isVarArgs() && !newParam.isOptionalArg()) {\n      newParam.setOptionalArg(true);\n    }\n    return newParam;\n  }", "public static Matcher constructorPropertyDeclaration() {\n    return new Matcher() {\n      @Override public boolean matches(Node node, NodeMetadata metadata) {\n        // This will match against code that looks like:\n        // /** @constructor */\n        // function constructor() {\n        //   this.variable = 3;\n        // }\n        if (!node.isAssign()\n            || !node.getFirstChild().isGetProp()\n            || !node.getFirstFirstChild().isThis()) {\n          return false;\n        }\n        while (node != null && !node.isFunction()) {\n          node = node.getParent();\n        }\n        if (node != null && node.isFunction()) {\n          JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(node);\n          if (jsDoc != null) {\n            return jsDoc.isConstructor();\n          }\n        }\n        return false;\n      }\n    };\n  }", "public void initV1From ( PostScriptTable src ) { src . readFontData ( ) . slice ( NUM_ , V1_TABLE_SIZE ) . copyTo ( v1Data ) ; }", "public void setResourcePolicies(java.util.Collection<ResourcePolicy> resourcePolicies) {\n        if (resourcePolicies == null) {\n            this.resourcePolicies = null;\n            return;\n        }\n\n        this.resourcePolicies = new com.amazonaws.internal.SdkInternalList<ResourcePolicy>(resourcePolicies);\n    }", "public short getShort(String key) {\n\t\taddToDefaults(key, null);\n\t\tString value = getRequired(key);\n\t\treturn Short.valueOf(value);\n\t}", "@Nonnull\n\tpublic static <T> LObjBytePredicateBuilder<T> objBytePredicate(Consumer<LObjBytePredicate<T>> consumer) {\n\t\treturn new LObjBytePredicateBuilder(consumer);\n\t}", "    private PersonRoleCourse insertPersonRoleCourse(PersonRoleCourse prc){\n    \treturn humanResourcesController.insertPersonRoleCourse(prc);\n    }\n", "private void initXmlBundle() throws CmsException {\n\n        CmsFile file = m_cms.readFile(m_resource);\n        m_bundleFiles.put(null, m_resource);\n        m_xmlBundle = CmsXmlContentFactory.unmarshal(m_cms, file);\n        initKeySetForXmlBundle();\n\n    }", "public CTracesTableFilterMenu ( final JTextField filterField ) { add ( new CFilterEventsAction ( filterField ) ) ; }", "    public CInteger add(final int value) {\n        return new CInteger(add(this.value, value));\n    }\n", "        public void remove() {\n            if (nextElement_ == null) {\n                throw new IllegalStateException();\n            }\n            final DomNode sibling = nextElement_.getPreviousSibling();\n            if (sibling != null) {\n                sibling.remove();\n            }\n        }\n", "private static Set<Server> toServerSet(List<Map<String,?>> l) throws FabricCommunicationException {\n  Set<Server> servers=new HashSet<Server>();\n  for (  Map<String,?> serverData : l) {\n    servers.add(unmarshallServer(serverData));\n  }\n  return servers;\n}\n", "public void add ( final CCachedExpressionTree tree ) { for ( final CCachedExpressionTree cachedTree : m_trees ) { if ( cachedTree . getFormulaString ( ) . equals ( tree . getFormulaString ( ) ) ) { return ; } } m_trees . add ( tree ) ; while ( m_trees . size ( ) > MAXIMUM_CACHE_SIZE ) { m_trees . remove ( NUM_ ) ; } for ( final ICriteriumCacheListener listener : m_listeners ) { try { listener . changedCriteria ( this ) ; } catch ( final Exception exception ) { CUtilityFunctions . logException ( exception ) ; } } }", "    private int combineDQMasks (List spectra) {\n        int mask = 0;\n        for (int i = 0; i < spectra.size(); i++) {\n            mask |= ((Spectrum)(spectra.get(i))).getDQMask();\n        }\n        return mask;\n    }\n", "    public Object favoritesAddMoblog(int listID, String moblogURL) throws Exception {\n        return favoritesAddMoblog(new Integer(listID), moblogURL);\n    }\n", "    public int getColumnCount() {\n\tif (columnNames == null)\n\t    return 0;\n\treturn columnNames.size();\n    }\n", "public void marshall(DeveloperInfo developerInfo, ProtocolMarshaller protocolMarshaller) {\n\n        if (developerInfo == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(developerInfo.getDeveloperName(), DEVELOPERNAME_BINDING);\n            protocolMarshaller.marshall(developerInfo.getPrivacyPolicy(), PRIVACYPOLICY_BINDING);\n            protocolMarshaller.marshall(developerInfo.getEmail(), EMAIL_BINDING);\n            protocolMarshaller.marshall(developerInfo.getUrl(), URL_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public Observable<ServiceResponse<Page<IdentifierInner>>> listSiteIdentifiersAssignedToHostNameNextWithServiceResponseAsync(final String nextPageLink) {\n        return listSiteIdentifiersAssignedToHostNameNextSinglePageAsync(nextPageLink)\n            .concatMap(new Func1<ServiceResponse<Page<IdentifierInner>>, Observable<ServiceResponse<Page<IdentifierInner>>>>() {\n                @Override\n                public Observable<ServiceResponse<Page<IdentifierInner>>> call(ServiceResponse<Page<IdentifierInner>> page) {\n                    String nextPageLink = page.body().nextPageLink();\n                    if (nextPageLink == null) {\n                        return Observable.just(page);\n                    }\n                    return Observable.just(page).concatWith(listSiteIdentifiersAssignedToHostNameNextWithServiceResponseAsync(nextPageLink));\n                }\n            });\n    }", "public static RecurrenceIterator join(RecurrenceIterator first, RecurrenceIterator... rest) {\n\t\tList<RecurrenceIterator> all = new ArrayList<RecurrenceIterator>();\n\t\tall.add(first);\n\t\tall.addAll(Arrays.asList(rest));\n\t\treturn new CompoundIteratorImpl(all, Collections.<RecurrenceIterator> emptyList());\n\t}", "public Pair<Assertion, WsFederationConfiguration> buildAndVerifyAssertion(final RequestedSecurityToken reqToken, final Collection<WsFederationConfiguration> config) {\n        val securityToken = getSecurityTokenFromRequestedToken(reqToken, config);\n        if (securityToken instanceof Assertion) {\n            LOGGER.debug(\"Security token is an assertion.\");\n            val assertion = Assertion.class.cast(securityToken);\n            LOGGER.debug(\"Extracted assertion successfully: [{}]\", assertion);\n            val cfg = config.stream()\n                .filter(c -> c.getIdentityProviderIdentifier().equals(assertion.getIssuer()))\n                .findFirst()\n                .orElse(null);\n            if (cfg == null) {\n                throw new IllegalArgumentException(\"Could not locate wsfed configuration for security token provided. The assertion issuer \"\n                    + assertion.getIssuer() + \" does not match any of the identity provider identifiers defined in the configuration\");\n            }\n            return Pair.of(assertion, cfg);\n        }\n        throw new IllegalArgumentException(\"Could not extract or decrypt an assertion based on the security token provided\");\n    }", "\tpublic void createPartControl(Composite parent) {\n\t\tviewer = new TableViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);\n\t\tviewer.setContentProvider(new ViewContentProvider());\n\t\tviewer.setLabelProvider(new ViewLabelProvider());\n\t\tviewer.setSorter(new NameSorter());\n//\t\tviewer.setInput(getViewSite());\n\t\tmakeActions();\n\t\thookContextMenu();\n\t\thookDoubleClickAction();\n\t\tcontributeToActionBars();\n\t\t\n\t\t//Register this page as a listener for selections\n\t\t//We want to update information based on selection i e g TreeViewer\n\t\tgetViewSite().getPage().addSelectionListener(this);\n\t\t\n\t}\n", "public boolean equals ( Object to ) { return to == null ; }", "private void sendProgressTypes(Player player){\n  List<String> list=Arrays.asList(\"Open Quests\",\"Completed Quests\",\"Production\");\n  player.addEvent(new ProgressStatusEvent(list));\n  player.notifyWorldAboutChanges();\n}\n", "public Map < String , List < String > > headers ( ) throws HttpRequestException { closeOutputQuietly ( ) ; return getConnection ( ) . getHeaderFields ( ) ; }", "void editLocalEdgeComment ( INaviEdge edge , Integer commentId , Integer userId , String newCommentText ) throws CouldntSaveDataException ;", "public final void setItem(final int index, final int id, @StringRes final int titleId) {\n        Item item = new Item(getContext(), id, titleId);\n        adapter.set(index, item);\n        adaptGridViewHeight();\n    }", "\tprotected void resize() {\n\t\t// remove the hyperlink cursor if any\n\t\tif (currentLink != null) {\n\t\t\tcurrentLink = null;\n\t\t\tsetCursor(null);\n\t\t\tsetToolTipText(null);\n\t\t}\n\t\tupdateScrollbars();\n\t}\n", "    public String getVersion() {\n        if (version == null) {\n            return \"1.0.0\";\n        } else {\n            return version;\n        }\n    }\n", "    public void execute() {\n        while (term.eval() != null)\n            body.execute();\n    }\n", "\tpublic void characters(char buf[], int offset, int len) throws SAXException {\n\t\tString s = new String(buf, offset, len);\n\t\tif (s.trim().equals(\"\")) return;\n\t\tif (charBuffer == null) {\n\t\t    charBuffer = new StringBuffer(s);\n\t\t} else {\n\t\t    charBuffer.append(s);\n\t\t}\n\t}\n", "    public void execute() {\n        result = param.trim();\n    }\n", "    public Hashtable getMessageIds() throws IOException, ProtocolException {\n        String response = executeCommandAndRecMultiResp(\"UIDL\", \"fetching msg IDs\");\n\n        Hashtable id = new Hashtable();\n\n        LineSeparator separator = new LineSeparator(response);\n        String line;\n        int messageNo = 0;\n\n        while (separator.hasMoreLines()) {\n            line = separator.getNextLine();\n\n            int index = line.indexOf(\" \");\n            if (index == -1) {\n                throw new ProtocolException(\"error in server response to UIDL command\", line);\n            }\n\n            messageNo++;\n            String messageId = line.substring(index + 1); // uidl\n            id.put(messageId, new Integer(messageNo));\n        }\n\n        return id;\n    }\n", "private Instance generateInstance(Instances format,Random randomG,double stdDev,double[] center,String cName){\n  Instance example;\n  int numAtts=getNumAttributes();\n  if (getClassFlag()) {\n    numAtts++;\n  }\n  example=new DenseInstance(numAtts);\n  example.setDataset(format);\n  for (int i=0; i < getNumAttributes(); i++) {\n    example.setValue(i,randomG.nextGaussian() * stdDev + center[i]);\n  }\n  if (getClassFlag()) {\n    example.setClassValue(cName);\n  }\n  return example;\n}\n", "public <T>TStream<T> traceStream(TStream<T> stream,Supplier<String> label){\n  if (includeTraceStreamOps(label.get())) {\n    TStream<?> s=stream.filter(traceTuplesFn(label.get()));\n    s.peek(null);\n  }\n  return stream;\n}\n", "    public void addHeader(final HTTPHeader header) {\n        headers.add(header);\n    }\n", "public void addOMGraphics(OMGraphicList list,DrawingAttributes drawingAttributes){\n  if (ii == null) {\n    OMPoint r=new OMPoint((float)y,(float)x);\n    if (drawingAttributes != null) {\n      drawingAttributes.setTo(r);\n    }\n    list.add(r);\n    r.putAttribute(ShapeConstants.SHAPE_INDEX_ATTRIBUTE,new Integer(getRecordNumber()));\n  }\n else {\n    list.add(new OMRaster((float)y,(float)x,-ii.getIconWidth() / 2,-ii.getIconHeight() / 2,ii));\n  }\n}\n", "static void printFieldRefs ( ClassRef [ ] classes ) { out . println ( STR_ ) ; for ( int i = NUM_ ; i < classes . length ; i ++ ) { FieldRef [ ] fields = classes [ i ] . getFieldArray ( ) ; for ( int j = NUM_ ; j < fields . length ; j ++ ) { FieldRef ref = fields [ j ] ; out . println ( descriptorToDot ( ref . getDeclClassName ( ) ) + STR_ + ref . getName ( ) + STR_ + ref . getTypeName ( ) ) ; } } }", "public HttpRequest part ( final String name , final String filename , final File part ) throws HttpRequestException { return part ( name , filename , null , part ) ; }", "public static Node getDeclaringParent(Node targetNode) {\n    Node rootTarget = getRootTarget(targetNode);\n    Node parent = rootTarget.getParent();\n    if (parent.isRest() || parent.isDefaultValue()) {\n      // e.g. `function foo(targetNode1 = default, ...targetNode2) {}`\n      parent = parent.getParent();\n      checkState(parent.isParamList(), parent);\n    } else if (parent.isDestructuringLhs()) {\n      // e.g. `let [a, b] = something;` targetNode is `[a, b]`\n      parent = parent.getParent();\n      checkState(isNameDeclaration(parent), parent);\n    } else if (parent.isClass() || parent.isFunction()) {\n      // e.g. `function targetNode() {}`\n      // e.g. `class targetNode {}`\n      checkState(targetNode == parent.getFirstChild(), targetNode);\n    } else if (parent.isImportSpec()) {\n      // e.g. `import {foo as targetNode} from './foo';\n      checkState(targetNode == parent.getSecondChild(), targetNode);\n      // import -> import_specs -> import_spec\n      // we want import\n      parent = parent.getGrandparent();\n      checkState(parent.isImport(), parent);\n    } else {\n      // e.g. `function foo(targetNode) {};`\n      // e.g. `let targetNode = something;`\n      // e.g. `import targetNode from './foo';\n      // e.g. `} catch (foo) {`\n      checkState(\n          parent.isParamList()\n              || isNameDeclaration(parent)\n              || parent.isImport()\n              || parent.isCatch(),\n          parent);\n    }\n    return parent;\n  }", "public static MmContent createMmContent(Uri uri,String mime,long size,String fileName){\n  if (mime != null) {\n    if (MimeManager.isImageType(mime)) {\n      return new PhotoContent(uri,mime,size,fileName);\n    }\n    if (MimeManager.isVideoType(mime)) {\n      return new VideoContent(uri,mime,size,fileName);\n    }\n    if (MimeManager.isAudioType(mime)) {\n      return new AudioContent(uri,mime,size,fileName);\n    }\n    if (MimeManager.isVCardType(mime)) {\n      return new VisitCardContent(uri,mime,size,fileName);\n    }\n    if (MimeManager.isGeolocType(mime)) {\n      return new GeolocContent(uri,size,fileName);\n    }\n  }\n  return new FileContent(uri,size,fileName);\n}\n", "public CTrackOperandAction ( final CTrackingResultContainer resultsContainer , final INaviInstruction instruction , final String register , final RegisterTrackingOptions options ) { super ( generateName ( options ) ) ; m_resultsContainer = Preconditions .", "public static String getHost(String resourcePath) {\n        String hostSpec;\n        if (resourcePath.contains(\":\")) {\n            hostSpec = resourcePath.split(\":\")[0];\n        } else {\n            hostSpec = resourcePath;\n        }\n\n        if (hostSpec.contains(\"/\")) {\n            hostSpec = hostSpec.substring(0, hostSpec.indexOf('/'));\n        }\n\n        return hostSpec;\n    }", "void changedFileBase ( INaviModule module , IAddress fileBase ) ;", "public static AbstractGraphDatabase getSocialGraphDatabase(\n\t\t\tfinal Configuration config) {\n\t\t// prepare neo4j graph configuration\n\t\tfinal Map<String, String> graphConfig = loadDatabaseConfig(config);\n\n\t\t// load database from path specified\n\t\tAbstractGraphDatabase database;\n\t\tif (config.getReadOnly()) {\n\t\t\tdatabase = new EmbeddedReadOnlyGraphDatabase(\n\t\t\t\t\tconfig.getDatabasePath(), graphConfig);\n\t\t} else {\n\t\t\tdatabase = new EmbeddedGraphDatabase(config.getDatabasePath(),\n\t\t\t\t\tgraphConfig);\n\t\t}\n\n\t\t// load lucene indices\n\t\tDATABASE = database;\n\t\tloadLuceneIndices(database);\n\n\t\treturn database;\n\t}", "public void put(final String key, final Object value) {\n        if (TASK_DIRECTORY_KEY.equals(key) && this.values.keySet().contains(TASK_DIRECTORY_KEY)) {\n            // ensure that no one overwrites the task directory\n            throw new IllegalArgumentException(\"Invalid key: \" + key);\n        }\n\n        if (value == null) {\n            throw new IllegalArgumentException(\n                    \"A null value was attempted to be put into the values object under key: \" + key);\n        }\n        this.values.put(key, value);\n    }", "public static boolean isBigIntCategory ( ClassNode type ) { return type == BigInteger_TYPE || isLongCategory ( type ) ; }", "@Override protected void drawXLabels(List<Double> xLabels,Double[] xTextLabelLocations,Canvas canvas,Paint paint,int left,int top,int bottom,double xPixelsPerUnit,double minX,double maxX){\n  int length=xLabels.size();\n  if (length > 0) {\n    boolean showLabels=mRenderer.isShowLabels();\n    boolean showGridY=mRenderer.isShowGridY();\n    boolean showTickMarks=mRenderer.isShowTickMarks();\n    DateFormat format=getDateFormat(xLabels.get(0),xLabels.get(length - 1));\n    for (int i=0; i < length; i++) {\n      long label=Math.round(xLabels.get(i));\n      float xLabel=(float)(left + xPixelsPerUnit * (label - minX));\n      if (showLabels) {\n        paint.setColor(mRenderer.getXLabelsColor());\n        if (showTickMarks) {\n          canvas.drawLine(xLabel,bottom,xLabel,bottom + mRenderer.getLabelsTextSize() / 3,paint);\n        }\n        drawText(canvas,format.format(new Date(label)),xLabel,bottom + mRenderer.getLabelsTextSize() * 4 / 3 + mRenderer.getXLabelsPadding(),paint,mRenderer.getXLabelsAngle());\n      }\n      if (showGridY) {\n        paint.setColor(mRenderer.getGridColor(0));\n        canvas.drawLine(xLabel,bottom,xLabel,top,paint);\n      }\n    }\n  }\n  drawXTextLabels(xTextLabelLocations,canvas,paint,true,left,top,bottom,xPixelsPerUnit,minX,maxX);\n}\n", "public static void document(ClassDoc c,PrintWriter pw) throws IOException {\n  pw.println(c.qualifiedName());\n{\n    String comment=c.commentText();\n    if (comment != null && !comment.equals(\"\")) {\n      pw.println(\"\");\n      indent(comment,4,pw);\n      pw", "public void removeActiveLineRangeListener(ActiveLineRangeListener l){\n  listenerList.remove(ActiveLineRangeListener.class,l);\n}\n", "public PriorityQueue(int initialCapacity,Comparator<? super E> comparator){\n  if (initialCapacity < 1) {\n    throw new IllegalArgumentException();\n  }\n  elements=newElementArray(initialCapacity);\n  this.comparator=comparator;\n}\n", "    public List queryUsers() throws Exception {\n        List userList = new ArrayList();\n        UserManager manager = lookupUserManager();\n        Iterator iterUsers = manager.getUsers().iterator();\n        String user; \n        StringBuffer sbRoles;\n        while ( iterUsers.hasNext() ) {\n            user = (String) iterUsers.next();\n            userList.add( new DCMUser( user, manager.getRolesOfUser( user ) ) );\n        }\n        return userList;\n    }\n", "public static String buildToString(Object... params){\n  StringBuffer finalMessage=new StringBuffer();\n  int i=0;\n  for (  Object object : params) {\n    if (i++ > 1) {\n      finalMessage.append(FIELD_SEPARATOR);\n    }\n    if (object instanceof List<?>) {\n      finalMessage.append(JKCollectionUtil.toString((List<?>)object));\n    }\n else {\n      finalMessage.append(JKObjectUtil.toString(object,true));\n    }\n  }\n  String fullText=finalMessage.toString();\n  return fullText;\n}\n", "IterationMode next ( ItemType item ) ;", "@Override\n    protected Content getNavLinkNext() {\n        if (next == null) {\n            return getNavLinkNext(null);\n        } else {\n            DocPath path = DocPath.relativePath(packageElement, next);\n            return getNavLinkNext(path.resolve(DocPaths.PACKAGE_TREE));\n        }\n    }", "public void clearCache(){\n  cache.clearAllCache();\n}\n", "protected void findAndInit(Iterator it){\n  while (it.hasNext()) {\n    findAndInit(it.next());\n  }\n}\n", "public static ResourcesPoet create(){\n  init();\n  Document document=sDocumentBuilder.newDocument();\n  Element resources=document.createElement(ELEMENT_RESOURCES);\n  document.appendChild(resources);\n  return create(document,resources);\n}\n", "public static boolean isRunningOnGoogleAppEngine(\n            ServletContext servletContext)\n    {\n        if (runningOnGoogleAppEngine != null)\n        {\n            return runningOnGoogleAppEngine.booleanValue();\n        }\n        else\n        {\n            return isServerGoogleAppEngine(servletContext.getServerInfo());\n        }\n    }", "private LoadOffsetFieldType inferRecordAddressType(String recordString){\n  if (recordString.charAt(0) != LEADING_CHAR_RECORD_MARK) {\n    log.error(\"Cannot infer record addressing type because line \" + lineNum + \" is not a record.\");\n    return LoadOffsetFieldType.ADDRESSFIELDSIZEUNKNOWN;\n  }\n  String r=recordString.substring(CHARS_IN_RECORD_MARK);\n  int len=r.length();\n  if (((len + 1) / 2) != (len / 2)) {\n    log.error(\"Cannot infer record addressing type because line \" + lineNum + \" does not \"+ \"have the correct number of characters.\");\n    return LoadOffsetFieldType.ADDRESSFIELDSIZEUNKNOWN;\n  }\n  int datalen=Integer.parseInt(r.substring(0,2),16);\n  int checksumInRecord=Integer.parseInt(r.substring(len - 2,len),16);\n  int calculatedChecksum=calculate8BitChecksum(recordString.substring(CHARS_IN_RECORD_MARK,recordString.length() - CHARS_IN_CHECKSUM));\n  if (calculatedChecksum != checksumInRecord) {\n    log.error(\"Cannot infer record addressing type because line \" + lineNum + \" does not have the correct checksum (expect 0x\"+ Integer.toHexString(calculatedChecksum)+ \", found CHKSUM = 0x\"+ Integer.toHexString(checksumInRecord)+ \")\");\n    return LoadOffsetFieldType.ADDRESSFIELDSIZEUNKNOWN;\n  }\n  int computedLenIf16Bit=2 + 4 + 2+ (datalen * 2)+ 2;\n  int computedLenIf24Bit=computedLenIf16Bit + 2;\n  if (computedLenIf16Bit == len) {\n    if (isSupportedRecordType(Integer.parseInt(r.substring(6,8),16))) {\n      return LoadOffsetFieldType.ADDRESSFIELDSIZE16BITS;\n    }\n else {\n      log.error(\"Cannot infer record addressing type in line \" + lineNum + \" because record \"+ \"type is an unsupported record type.\");\n      return LoadOffsetFieldType.ADDRESSFIELDSIZEUNKNOWN;\n    }\n  }\n  if (computedLenIf24Bit == len) {\n    if (isSupportedRecordType(Integer.parseInt(r.substring(8,10),16))) {\n      return LoadOffsetFieldType.ADDRESSFIELDSIZE24BITS;\n    }\n else {\n      log.error(\"Cannot infer record addressing type in line \" + lineNum + \" because record type is an unsupported record type.\");\n      return LoadOffsetFieldType.ADDRESSFIELDSIZEUNKNOWN;\n    }\n  }\n  return LoadOffsetFieldType.ADDRESSFIELDSIZEUNKNOWN;\n}\n", "public DiscoverInputSchemaResult withParsedInputRecords(java.util.List<String>... parsedInputRecords) {\n        if (this.parsedInputRecords == null) {\n            setParsedInputRecords(new java.util.ArrayList<java.util.List<String>>(parsedInputRecords.length));\n        }\n        for (java.util.List<String> ele : parsedInputRecords) {\n            this.parsedInputRecords.add(ele);\n        }\n        return this;\n    }", "\tpublic String findIcon() {\n\t\tif (icon != null) {\n\t\t\treturn icon;\n\t\t}\n\t\tif (superType != null) {\n\t\t\treturn superType.findIcon();\n\t\t}\n\t\tthrow new IllegalStateException(\"Base type has no icon: \" + this);\n\t}\n", "    public void setFrequency(Object label, YoshikoderDocument doc, double d) {\n        int row = ((Integer)labelToIndex.get(label)).intValue();\n        int col = ((Integer)docToIndex.get(doc)).intValue();\n        setFrequency(row, col, d);\n    }\n", "public void addSequence ( final Array datum ) { for ( int i = NUM_ ; i < datum . size ( ) ; i ++ ) { add ( datum . get ( i ) ) ; } }", "\tpublic String getLocalizedCategoriesAsString() {\n\t\tif ((mLocalizedCategories != null) && (!mLocalizedCategories.isEmpty())) {\n\t\t\tStringBuffer categories = new StringBuffer();\n\t\t\tIterator<String> iter = mLocalizedCategories.iterator();\n\t\t\twhile (iter.hasNext()) {\n\t\t\t\tcategories.append(iter.next());\n\t\t\t\tcategories.append(' ');\n\t\t\t}\n\t\t\treturn categories.toString();\n\t\t}\n\t\treturn null;\n\t}\n", "    public void execute(Runnable r) {\n        executorService.execute(r);\n    }\n", "    public boolean isIdle() {\n        return idle;\n    }\n", "private void scheduleCacheCleanup(Context context){\n  if (!isAlarmActive(context)) {\n    mAlarmManager.setInexactRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + CLEANUP_SCHEDULER_TIME_INTERVAL,CLEANUP_SCHEDULER_TIME_INTERVAL,CacheCleanupReceiver.makeReceiverPendingIntent(context));\n  }\n}\n", "\tpublic void setOptionsBattleDesiredFps(int optionsBattleDesiredFps) {\n\t\tthis.optionsBattleDesiredFps = optionsBattleDesiredFps;\n\t\tprops.setProperty(OPTIONS_BATTLE_DESIREDFPS, \"\" + optionsBattleDesiredFps);\n\t}\n", "public Code39Reader ( ) { this ( BOOL_ ) ; }", "private Ref notOp() throws PageException {\n\tif (cfml.isValidIndex()) {\n\t    if (cfml.isCurrent('!') && !cfml.isCurrent(\"!=\")) {\n\t\tcfml.next();\n\t\tcfml.removeSpace();\n\t\treturn new Not(decsionOp(), limited);\n\t    }\n\t    else if (cfml.forwardIfCurrentAndNoWor", "public StunClientTransaction ( StunStack stackCallback , Request request , TransportAddress requestDestination , TransportAddress localAddress , ResponseCollector responseCollector , TransactionID transactionID ) { this . stackCallback = stackCallback ; this . request = request ; this . localAddress = localAddress ; this . responseCollector = responseCollector ; this . requestDestination = requestDestination ; initTransactionConfiguration ( ) ; this . transactionID = transactionID ; try { request . setTransactionID ( transactionID . getBytes ( ) ) ; } catch ( StunException ex ) { throw new IllegalArgumentException ( STR_ + STR_ ) ; } }", "public static long count(nitro_service service, String vservername) throws Exception{\n\t\tsslvserver_sslciphersuite_binding obj = new sslvserver_sslciphersuite_binding();\n\t\tobj.set_vservername(vservername);\n\t\toptions option = new options();\n\t\toption.set_count(true);\n\t\tsslvserver_sslciphersuite_binding response[] = (sslvserver_sslciphersuite_binding[]) obj.get_resources(service,option);\n\t\tif (response != null) {\n\t\t\treturn response[0].__count;\n\t\t}\n\t\treturn 0;\n\t}", "public void addEndElement() throws IOException {\n  String tag=tagStack_.pop();\n  writer_.write(\"</\" + tag + \">\\r\\n\");\n}", "  private void deleteAllRecordsFromMainTables(Statement subStatment) throws SQLException,  RepException {\n    for (int i = subRepTables.size() - 1; i >= 0; i--) {\n      RepTable repTable = (RepTable) subRepTables.get(i);\n      subStatment.execute(\"delete from \" + repTable.getSchemaQualifiedName());\n    }\n  }\n", "public boolean hasView ( final INaviView view ) { Preconditions . checkNotNull ( view , STR_ ) ; Preconditions . checkArgument ( view . inSameDatabase ( m_provider ) , STR_ ) ; return ( view == m_nativeCallgraphView ) || m_customViews . contains ( view ) ", "    public RegularTimePeriod previous() {\n        RegularTimePeriod result = null;\n        if (this.millisecond != FIRST_MILLISECOND_IN_SECOND) {\n            result = new Millisecond(this.millisecond - 1, getSecond());\n        }\n        else {\n            Second previous = (Second) getSecond().previous();\n            if (previous != null) {\n                result = new Millisecond(LAST_MILLISECOND_IN_SECOND, previous);\n            }\n        }\n        return result;\n    }\n", "public static ServiceDependencyBuilder serviceDependency(final String url) {\n        return new ServiceDependencyBuilder()\n                .withUrl(url)\n                .withType(ServiceDependency.TYPE_SERVICE)\n                .withSubtype(ServiceDependency.SUBTYPE_OTHER);\n    }", "public CTutorialStep ( final String description , final List < Long > mandatory , final List < Long > allowed , final boolean next ) { Preconditions . checkNotNull ( description , STR_ ) ; Preconditions . checkNotNull ( mandatory , STR_ ) ; Preconditions ", "\tpublic void setMagnitude(float magnitude) throws IllegalArgumentException {\n\t\t\n\t\tif( Float.isNaN(magnitude) ) {\n\t\t\tthrow new IllegalArgumentException(\"Magnitude cannot be Float.NaN.\");\n\t\t}\n\t\t\n\t\tthis.magnitude = magnitude;\n\t\t\n\t}\n", "public boolean isEnabled ( ) { return mEnabled ; }", "void addSitemap(AbstractSiteMap sitemap){\n  sitemaps.add(sitemap);\n}\n", "public OperationStatusResponseInner beginRestart(String resourceGroupName, String vmScaleSetName, List<String> instanceIds) {\n        return beginRestartWithServiceResponseAsync(resourceGroupName, vmScaleSetName, instanceIds).toBlocking().single().body();\n    }", "    public void put(HttpSession session, Object value, Map expandContext) {\n        AttributeAccessor aa = new AttributeAccessor(name, expandContext, this.attributeName, this.fma, this.needsExpand);\n        aa.put(session, value);\n    }\n", "        public void addReference(Object reference) {\n            cache.addReference(this, reference);\n        }\n", "  final public void throwStatementLookahead() throws ParseException {\n    jj_consume_token(THROW);\n    expressionLookahead();\n    jj_consume_token(SEMICOLON);\n  }\n", "public boolean isEmbedded ( ) ;", "public static JTabbedPane createTabbedPane(int tabPlacement){\nswitch (tabPlacement) {\ncase JTabbedPane.LEFT:\ncase JTabbedPane.RIGHT:\n    Object textIconGap=UIManager.get(\"TabbedPane.textIconGap\");\n  Insets tabInsets=UIManager.getInsets(\"TabbedPane.tabInsets\");\nUIManager.put(\"TabbedPane.textIconGap\",1);\nUIManager.put(\"TabbedPane.tabInsets\",new Insets(tabInsets.left,tabInsets.top,tabInsets.right,tabInsets.bottom));\nJTabbedPane tabPane=new JTabbedPane(tabPlacement);\nUIManager.put(\"TabbedPane.textIconGap\",textIconGap);\nUIManager.put(\"TabbedPane.tabInsets\",tabInsets);\nreturn tabPane;\ndefault :\nreturn new JTabbedPane(tabPlacement);\n}\n}\n", "\tpublic Boolean isChecked() {\n\n\t\tBoolean returned = null;\n\n\n\t\tString operation = Operations.IS_CHECKED;\n\n\t\treturned = (Boolean) this.executeOperation(this.objectToGuiObjectRequest(), operation);\n\n\t\treturn returned;\n\n\t}\n", "public OvhTask billingAccount_easyPabx_serviceName_hunting_tones_toneUpload_POST(String billingAccount, String serviceName, String documentId, OvhTonesTypeEnum type, String url) throws IOException {\n\t\tString qPath = \"/telephony/{billingAccount}/easyPabx/{serviceName}/hunting/tones/toneUpload\";\n\t\tStringBuilder sb = path(qPath, billingAccount, serviceName);\n\t\tHashMap<String, Object>o = new HashMap<String, Object>();\n\t\taddBody(o, \"documentId\", documentId);\n\t\taddBody(o, \"type\", type);\n\t\taddBody(o, \"url\", url);\n\t\tString resp = exec(qPath, \"POST\", sb.toString(), o);\n\t\treturn convertTo(resp, OvhTask.class);\n\t}", "\tpublic void clearApplications() {\n\t\tapplicationList = null;\n\t\tapplicationList = new Hashtable<Integer, ApplicationModel>();\n\t}\n", "void addJFXX(JPEGBuffer buffer,JPEGImageReader reader) throws IOException {\n  extSegments.add(new JFIFExtensionMarkerSegment(buffer,reader));\n}\n", "    public double getLength() {\n        double      dblLen;         // total length of sequence\n        Iterator    iterChild;      // child element iterator\n        \n        dblLen      = 0.0;\n        iterChild   = this.getCompList().iterator();\n        \n        while (iterChild.hasNext())  {\n            IComponent comp = (IComponent)iterChild.next();\n            \n            dblLen += comp.getLength();\n        }\n        \n        return dblLen;\n    }\n", "protected boolean compareHistory ( double [ ] series1 , int t1 , double [ ] series2 , int t2 ) { for ( int i = NUM_ ; i <= k ; i ++ ) { if ( Math . abs ( series1 [ t1 - i ] - series2 [ t2 - i ] ) > epsDest ) { return BOOL_ ; } } return BOOL_ ; }", "public void enableFpsMeter ( ) { if ( mFpsMeter == null ) { mFpsMeter = new FpsMeter ( ) ; mFpsMeter . setResolution ( mFrameWidth , mFrameHeight ) ; } }", "  private boolean removeAttribute(Attribute a) {\n    Object old = null;\n    if (a == null) {\n      return false;\n    }\n    else {\n      switch (a.getType()) {\n        case CATEGORY:\n          old = categoricalAttributes.remove(a.getName());\n          scanned.remove(a.getName());\n          break;\n        case NUMBER:\n          old = numericAttributes.remove(a.getName());\n          scanned.remove(a.getName());\n          break;\n        case LABEL:\n          old = labelAttributes.remove(a.getName());\n          if (this.id == a) {\n            this.id = null;\n            dirty = true;\n          }\n          break;\n        case AFFINITY:\n          old = affinityAttributes.remove(a.getName());\n          scanned.remove(a.getName());\n          break;\n        default: // can't happen\n          return false;\n      }\n      if (old == null) {\n        return false;\n      }\n      else {\n        dirty = true;\n        return true;\n      }\n    }\n  }\n", "public ZyGraphLayoutSettings ( final GraphSettingsConfigItem type ) { Preconditions . checkNotNull ( type , STR_ ) ; m_type = type ; m_circularSettings = new ZyGraphCircularSettings ( type ) ; m_hierarchicalSettings = new ZyGraphHierarchicalSettings ( type ) ; m_orthogonalSettings = new ZyGraphOrthogonalSettings ( type ) ; }", "protected abstract boolean isReadyForPullStart ( ) ;", "   public void init() throws FileSystemException {\n      if(tempDir == null)\n         tempDir = new File(\"autodeploy_vfs_cache\").getAbsoluteFile();\n   }\n", "public void handleResponse ( StunMessageEvent evt ) { lock . lock ( ) ; try { TransactionID transactionID = getTransactionID ( ) ; logger . log ( Level . FINE , STR_ + transactionID ) ; if ( ! Boolean . getBoolean ( StackProperties . KEEP_CRANS_AFTER_A_RESPONSE ) ) cancel ( ) ; responseCollector . processResponse ( new StunResponseEvent ( stackCallback , evt . getRawMessage ( ) , ( Response ) evt . getMessage ( ) , request , transactionID ) ) ; } finally { lock . unlock ( ) ; } }", "private Set < SingleModelObserver > createObserverCollection ( Collection < T > models ) { Set < SingleModelObserver > set = new HashSet < > ( ) ; for ( T model : models ) { if ( model != null ) { set . add ( new SingleModelObserver ( model ) ) ; } } retu", "private JMenu createFileMenu(){\n  JMenu fileMenu=new JMenu(\"File\");\n  fileMenu.addMenuListener(menuListener);\n  for (  Action action : actionManager.getOpenSaveWorkspaceActions()) {\n    fileMenu.add(action);\n  }\n  fileMenu.addSeparator();\n  fileMenu.add(actionManager.getClearWorkspaceAction());\n  fileMenu.addSeparator();\n  fileMenu.add(actionManager.getOpenNetworkAction());\n  JMenu worldSubMenu=new JMenu(\"Open World\");\n  for (  Action action : actionManager.getOpenWorldActions()) {\n    worldSubMenu.add(action);\n  }\n  fileMenu.add(worldSubMenu);\n  fileMenu.addSeparator();\n  fileMenu.add(actionManager.getShowUpdaterDialog());\n  fileMenu.add(actionManager.getShowPropertyDialogAction());\n  fileMenu.addSeparator();\n  fileMenu.add(actionManager.getQuitWorkspaceAction());\n  return fileMenu;\n}\n", "public static void setGuaranteedDeliveryProperties(ControlMessage msg,\n                                                     SIBUuid8 sourceMEUuid,\n                                                     SIBUuid8 targetMEUuid,\n                                                     SIBUuid12 streamId,\n                                                     SIBUuid12 gatheringTargetDestUuid,\n                                                     SIBUuid12 targetDestUuid,\n                                                     ProtocolType protocolType,\n                                                     byte protocolVersion)\n  { \n    // Remote to local message properties\n    msg.setGuaranteedSourceMessagingEngineUUID(sourceMEUuid);\n    msg.setGuaranteedTargetMessagingEngineUUID(targetMEUuid); \n    msg.setGuaranteedStreamUUID(streamId);\n    msg.setGuaranteedGatheringTargetUUID(gatheringTargetDestUuid);\n    msg.setGuaranteedTargetDestinationDefinitionUUID(targetDestUuid);\n    if (protocolType != null)\n      msg.setGuaranteedProtocolType(protocolType);\n    msg.setGuaranteedProtocolVersion(protocolVersion);\n  }", "public Object parse ( Map params , URL url ) { return parseURL ( url , params ) ; }", "OperatorSymbol resolveUnary(DiagnosticPosition pos, JCTree.Tag tag, Type op) {\n        return resolve(tag,\n                unaryOperators,\n                unop -> unop.test(op),\n                unop -> unop.resolve(op),\n                () -> reportErrorIfNeeded(pos, tag, op));\n    }", "public Response createErrorResponse(String req, Map<String,String> metaInfo, ServiceException ex) {\n        Request request = new Request(0L);\n        request.setContent(req);\n\n        Response response = new Response();\n        String contentType = metaInfo.get(Listener.METAINFO_CONTENT_TYPE);\n        if (contentType == null && req != null && !req.isEmpty())\n            contentType = req.trim().startsWith(\"{\") ? Listener.CONTENT_TYPE_JSON : Listener.CONTENT_TYPE_XML;\n        if (contentType == null)\n            contentType = Listener.CONTENT_TYPE_XML; // compatibility\n\n        metaInfo.put(Listener.METAINFO_HTTP_STATUS_CODE, String.valueOf(ex.getCode()));\n\n        StatusMessage statusMsg = new StatusMessage();\n        statusMsg.setCode(ex.getCode());\n        statusMsg.setMessage(ex.getMessage());\n        response.setStatusCode(statusMsg.getCode());\n        response.setStatusMessage(statusMsg.getMessage());\n        response.setPath(ServicePaths.getInboundResponsePath(metaInfo));\n        if (contentType.equals(Listener.CONTENT_TYPE_JSON)) {\n            response.setContent(statusMsg.getJsonString());\n        }\n        else {\n            response.setContent(statusMsg.getXml());\n        }\n        return response;\n    }", "private <E> List<E> loadQueryDataGFS(EntityMetadata entityMetadata, BasicDBObject mongoQuery,\n            BasicDBObject orderBy, int maxResult, int firstResult, boolean isCountQuery)\n    {\n        List<GridFSDBFile> gfsDBfiles = getGFSDBFiles(mongoQuery, orderBy, entityMetadata.getTableName(), maxResult,\n                firstResult);\n\n        if (isCountQuery)\n        {\n            return (List<E>) Collections.singletonList(gfsDBfiles.size());\n        }\n\n        List entities = new ArrayList<E>();\n        for (GridFSDBFile file : gfsDBfiles)\n        {\n            populateGFSEntity(entityMetadata, entities, file);\n        }\n        return entities;\n    }", "private List<Volume> createVPlexVolumes(String name,int numberOfVols,URI storageSystem){\n  List<Volume> volumes=new ArrayList<Volume>();\n  for (int i=1; i <= numberOfVols; i++) {\n    Volume vplexVolume=new Volume();\n    URI vplexVolumeUri=URIUtil.createId(Volume.class);\n    vplexVolumeURIs.add(vplexVolumeUri);\n    vplexVolume.setId(vplexVolumeUri);\n    vplexVolume.setLabel(name + i);\n    vplexVolume.setNativeId(\"/clusters/cluster-1/virtual-volumes/device_V000195701573-01E7F_vol\" + i);\n    vplexVolume.setStorageController(storageSystem);\n    StringSet associatedVolumes=new StringSet();\n    associatedVolumes.add(\"associatedVol1\");\n    vplexVolume.setAssociatedVolumes(associatedVolumes);\n    volumes.add(vplexVolume);\n  }\n  return volumes;\n}\n", "public JsonRequestParams ( Object ... keysAndValues ) { int len = keysAndValues . length ; if ( len % NUM_ != NUM_ ) throw new IllegalArgumentException ( STR_ ) ; for ( int i = NUM_ ; i < len ; i += NUM_ ) { if ( ! ( keysAndValues [ i ] instanceof CharSequence ) ) { throw new IllegalArgumentException ( STR_ + keysAndValues [ i ] ) ; } String key = String . valueOf ( keysAndValues [ i ] ) ; put ( key , keysAndValues [ i + NUM_ ] ) ; } }", "Integer appendGlobalEdgeComment ( INaviEdge edge , String commentText , Integer userId ) throws CouldntSaveDataException ;", "    public void close(boolean validate) {\n        if(validate) {\n            try {\n                validateForm();\n                save();\n                setVisible(false);\n                dispose();\n            }\n            catch(ValidationException e) {\n                ch.orcasys.editor.panel.dlog.Message.showError(this, \"Validation failed\", e.getMessage());\n                return;\n            }\n            catch(Exception e) {\n                ch.orcasys.editor.panel.dlog.Message.showError(this, \"Unexpected form error\", e.toString());\n                return;\n            }\n        }\n        else {\n            setVisible(false);\n            dispose();\n        }\n    }\n", "public static int ceilLog(BigInteger a){\n  int result=0;\n  BigInteger p=ONE;\n  while (p.compareTo(a) < 0) {\n    result++;\n    p=p.shiftLeft(1);\n  }\n  return result;\n}\n", "protected boolean isKeyAttribute(AttributeRole attributeRole) throws OperatorException {\n  return false;\n}\n", "@SuppressWarnings(\"unchecked\")\n    protected <D> void evalResponse(Request request, Deferred<D> deferred, Class<D> resolveType,\n                                    Class<?> parametrizedType, RawResponse response) {\n        if (parametrizedType != null) {\n            processor.process(request, response, parametrizedType, (Class<Collection>) resolveType,\n                    (Deferred<Collection>) deferred);\n        } else {\n            processor.process(request, response, resolveType, deferred);\n        }\n    }", "protected MatchType getMatchType(TypeName m) {\n    return match(m)\n        .when(typeOf(ParameterizedTypeName.class)).get(\n            t -> {\n              if (isDecomposableBuilder(t.rawType)) {\n                return MatchType.DECOMPOSE;\n              } else if (t.rawType.equals(MATCH_ANY)) {\n                return MatchType.ANY;\n              } else if (t.rawType.equals(MATCH_EXACT)) {\n                return MatchType.EXACT;\n              } else {\n                return MatchType.EXACT;\n              }\n            })\n        .when(typeOf(TypeVariableName.class)).get(t -> MatchType.EXACT)\n        .orElse(MatchType.ANY)\n        .getMatch();\n  }", "    public void numberOfChoicePoints(int cps) {\n        _number_of_choice_points = cps;\n    }\n", "\tprivate void loadPreferences() {\n\t\tIPreferenceStore store = StrakerPlugin.getDefault()\n\t\t\t\t.getPreferenceStore();\n\t\todnURL = store.getString(ODNSearchHandler.ODN_NETWORK_URL);\n\t\todnAppID = store.getString(ODNSearchHandler.ODN_APPLICATION_ID);\n\t\todnUserID = store.getString(ODNSearchHandler.ODN_USER_ID);\n\t}\n", "private void writeFinalResults(String outputDir,double totalTT,double[] totalRouteTTs,double[] avgRouteTTs,int[] routeUsers,int numberOfStuckedAgents){\n  PrintStream stream;\n  String filename=outputDir + \"FinalResults.txt\";\n  try {\n    stream=new PrintStream(new File(filename));\n  }\n catch (  FileNotFoundException e) {\n    e.printStackTrace();\n    return;\n  }\n  log.info(\"Total travel time: \" + totalTT);\n  String header=\"total tt[s]\";\n  StringBuffer resultLine=new StringBuffer();\n  resultLine.append(totalTT);\n  String latexFormat=\"\" + (int)totalTT;\n  log.info(\"Route Users: (route: #users)\");\n  for (int routeNr=0; routeNr < numberOfRoutes; routeNr++) {\n    log.info(\"\\t\" + routeNr + \": \"+ routeUsers[routeNr]);\n    header+=\"\\t#users \" + routeNr;\n    resultLine.append(\"\\t\" + routeUsers[routeNr]);\n    latexFormat+=\" & \" + routeUsers[routeNr];\n  }\n  log.info(\"Average travel times: (route: avg tt)\");\n  for (int routeNr=0; routeNr < numberOfRoutes; routeNr++) {\n    log.info(\"\\t\" + routeNr + \": \"+ avgRouteTTs[routeNr]);\n    header+=\"\\tavg tt[s] \" + routeNr;\n    resultLine.append(\"\\t\" + avgRouteTTs[routeNr]);\n    latexFormat+=\" & \" + (Double.isNaN(avgRouteTTs[routeNr]) ? \"-\" : (int)avgRouteTTs[routeNr]);\n  }\n  log.info(\"Number of stucked agents: \" + numberOfStuckedAgents);\n  header+=\"\\t#stucked\";\n  resultLine.append(\"\\t\" + numberOfStuckedAgents);\n  latexFormat+=\" \\\\\\\\\";\n  log.info(\"Latex format: \" + latexFormat);\n  stream.println(header);\n  stream.println(resultLine.toString());\n  stream.close();\n  log.info(\"output written to \" + filename);\n}\n", "protected void checkBoundaryCompatibility ( ) { if ( from instanceof String && to instanceof String ) { final String start = from . toString ( ) ; final String end = to . toString ( ) ; if ( start . length ( ) != end . length ( ) ) { throw new IllegalArgumentException ( STR_ ) ; } final int length = start . length ( ) ; int i ; for ( i = NUM_ ; i < length ; i ++ ) { if ( start . charAt ( i ) != end . charAt ( i ) ) { break ; } } if ( i < length - NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } } }", "\tprivate String readQuery() {\n\t\tString exqfile = exqfileText.getText().trim();\n\t\t\n\t\tString query = \"\";\n\t\ttry {\n\t\t\tBufferedReader in = new BufferedReader(new FileReader(Tools.getFullPath(exqfile)));\n\t\t\tString line = in.readLine();\n\t\t\twhile (line != null) {\n\t\t\t\tquery += line + \"\\n\";\n\t\t\t\tline = in.readLine();\n\t\t\t}\n\t\t\tin.close();\n\t\t} catch (Exception e) {}\n\t\t\n\t\treturn query;\n\t}\n", "public static boolean exists(String name){\n  if (cache.contains(name)) {\n    return true;\n  }\n  try {\n    if (Helper.exists(name,Access.class)) {\n      cache.add(name);\n      return true;\n    }\n  }\n catch (  Exception e1) {\n    log.error(e1.getMessage(),e1);\n  }\n  return false;\n}\n", "    public void setShowLineNumbers (boolean showLine) {\n        this.showline = showLine;\n    }\n", "public IMouseState createNodeClickedMiddleState ( final Node n , final MouseEvent event ) { final CNodeClickedMiddleState state = new CNodeClickedMiddleState ( this , m_graph , n ) ; m_factory . createNodeClickedMiddleAction ( ) . execute ( state , event ", "public void deleteObservers(){\n  observers.clear();\n}\n", "void removeMetaClass ( Class theClass ) ;", "  public double getFromDrawX() {\n    double w2 = from.getWidth() / 4 - 4;\n    double x1 = from.drawx;\n    double y1 = from.drawy;\n    double x2 = to.drawx;\n    double y2 = to.drawy;\n\n    final double distance = distance(x1, y1, x2, y2);\n    if (distance > 0) {\n      double shift = (w2 * (x2 - x1)) / distance;\n      x1 += shift;\n    }\n\n    return x1;\n  }\n", "private void initComputeProgram(){\n  glUseProgram(computeProgram);\n  IntBuffer workGroupSize=BufferUtils.createIntBuffer(3);\n  glGetProgramiv(computeProgram,GL_COMPUTE_WORK_GROUP_SIZE,workGroupSize);\n  workGroupSizeX=workGroupSize.get(0);\n  workGroupSizeY=workGroupSize.get(1);\n  eyeUniform=glGetUniformLocation(computeProgram,\"eye\");\n  ray00Uniform=glGetUniformLocation(computeProgram,\"ray00\");\n  ray10Uniform=glGetUniformLocation(computeProgram,\"ray10\");\n  ray01Uniform=glGetUniformLocation(computeProgram,\"ray01\");\n  ray11Uniform=glGetUniformLocation(computeProgram,\"ray11\");\n  sizeUniform=glGetUniformLocation(computeProgram,\"size\");\n  timeUniform=glGetUniformLocation(computeProgram,\"time\");\n  IntBuffer props=BufferUtils.createIntBuffer(1);\n  IntBuffer params=BufferUtils.createIntBuffer(1);\n  props.put(0,GL_BUFFER_BINDING);\n  int boxesResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,\"Boxes\");\n  int outputImageResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,\"OutputImage\");\n  glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,boxesResourceIndex,props,null,params);\n  boxesSsboBinding=params.get(0);\n  glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,outputImageResourceIndex,props,null,params);\n  outputImageBinding=params.get(0);\n  glUseProgram(0);\n}\n", "protected void openEditLoginMessageDialog() {\n\n        Window window = CmsBasicDialog.prepareWindow();\n        CmsBasicDialog dialog = new CmsEditLoginView(window);\n        window.setContent(dialog);\n        window.setCaption(CmsVaadinUtils.getMessageText(Messages.GUI_MESSAGES_LOGINMESSAGE_TOOL_NAME_0));\n        dialog.setWindowMinFullHeight(500);\n        A_CmsUI.get().addWindow(window);\n    }", "public Storage(File directory,String propertiesFile){\n  if (directory == null)   throw new NullPointerException(\"Directory cannot be null\");\n  if (directory.isFile())   throw new IllegalArgumentException(\"Not a valid directory: \" + directory);\n  this.directory=directory;\n  this.propertiesFile=propertiesFile != null ? new File(directory,propertiesFile) : null;\n}\n", "private void export_resolver_vis_map ( ) { if ( writeConstituents ) { writeToFile ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ) ; } if ( writeDependencies ) { writeToFile ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ) ", "public boolean isSelected(int position){\n  return mSelectedPositions.contains(position);\n}\n", "@Override public void onBindViewHolder(BaseViewHolder holder,int position){\n  int itemViewType=getItemViewType(position);\n  if (itemViewType != VIEWTYPE_NONE) {\n    Binder binder=binders.get(itemViewType);\n    binder.onBindCallback(holder,getItem(position),position);\n  }\n}\n", "void onDownMotionEvent ( MotionEvent ev ) ;", "void changedForwardedFunction ( IFunction function ) ;", "public void insert(MyMap myMap){\n  myMaps.add(0,myMap);\n  notifyItemInserted(0);\n}\n", "public String verbalize() {\n\t\tStringBuffer buffi = new StringBuffer();\n\t\tString simpleName = this.get().getClass().getSimpleName();\n\t\tif (simpleName.contains(\"nonymous\")) {\n\t\t\tsimpleName = simpleName += \"(\" + this.get().getName() + \")\";\n\t\t}\n\t\tbuffi.appen", "public synchronized void go ( boolean synchronous ) { gate = null ; execute ( synchronous ) ; }", "protected void onGetImageSuccess ( String cacheKey , BitmapDrawable response ) { mCache . putBitmap ( cacheKey , response ) ; BatchedImageRequest request = mInFlightRequests . remove ( cacheKey ) ; if ( request != null ) { request . mResponseBitmap = resp", "\t\tpublic void mark(boolean isMarked, Color color) {\n\t\t\tmarked = isMarked;\n\t\t\tmarkColor = color;\n\t\t}\n", "\tpublic String saveNote(MsxNote note) throws Exception {\n\t\tEmailMessage serverNote = new EmailMessage(es);\n\t\t\n\t\t//copy values\t\t\n\t\tNoteConvertor c = new NoteConvertor(es);\n\t\tserverNote = c.convertToServerNote(note);\n\t\t\n\t\tserverNote.save(WellKnownFolderName.Notes);\t\n\t\t\n\t\treturn serverNote.getId().getUniqueId();\n\t\t//throw new RuntimeException(\"not implemented yet\");\n\t}\n", "public int size ( ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { return count ; } finally { lock . unlock ( ) ; } }", "private static int addToBin ( LiveExprNode check , Vect bin ) { if ( check == null ) { return - NUM_ ; } int len = bin . size ( ) ; int idx ; for ( idx = NUM_ ; idx < len ; idx ++ ) { LiveExprNode ln = ( LiveExprNode ) bin . elementAt ( idx ) ; if ( check . equals ( ln ) ) { break ; } } if ( idx >= len ) { bin . addElement ( check ) ; } return idx ; }", "public void fail(Throwable ex) {\n        this.done = true;\n        if (this.failureHandler != null) {\n            Callbacks.invokeSafely(this.failureHandler, ex, cex -> log.error(\"Fail Callback invocation failure.\", cex));\n        }\n    }", "public static void checkFieldNotNull(final Object value,final String fieldName){\n  checkField(value != null,fieldName);\n}\n", "protected void addToPortMap(IOFSwitch sw,long mac,short vlan,short portVal){\n  Map<MacVlanPair,Short> swMap=macVlanToSwitchPortMap.get(sw);\n  if (vlan == (short)0xffff) {\n    vlan=0;\n  }\n  if (swMap == null) {\n    swMap=Collections.synchronizedMap(new LRULinkedHashMap<MacVlanPair,Short>(MAX_MACS_PER_SWITCH));\n    macVlanToSwitchPortMap.put(sw,swMap);\n  }\n  swMap.put(new MacVlanPair(mac,vlan),portVal);\n}\n", "public void remove ( final File file ) { if ( m_files . remove ( file ) ) { fireIntervalRemoved ( file , NUM_ , m_files . size ( ) ) ; } }", "static LedgerHandle openRead(long ledgerId, BookKeeper bookKeeper, BookKeeperConfig config) throws DurableDataLogException {\n        try {\n            return Exceptions.handleInterruptedCall(\n                    () -> bookKeeper.openLedgerNoRecovery(ledgerId, LEDGER_DIGEST_TYPE, config.getBKPassword()));\n        } catch (BKException bkEx) {\n            throw new DurableDataLogException(String.format(\"Unable to open-read ledger %d.\", ledgerId), bkEx);\n        }\n    }", "@SuppressWarnings(\"unchecked\")\r\n    public <T> T get(final Class<T> type) {\r\n        T bean = (T) components.get(type);\r\n        if (bean != null) {\r\n            return bean;\r\n        }\r\n        return (T) get(type.getName());\r\n    }", "    public void remove(Section sect) {\n        sections.remove(sect);\n        fireStateChanged(new RREvent(this));\n    }\n", "public void updateAnonymity() throws IOException {\n    ProxyBinResponse response = GhostMeHelper.getMyInformation(this.getJavaNetProxy());\n\n    if (!response.getOrigin().equalsIgnoreCase(this.getIp())) {\n      anonymous = false;\n      return;\n    }\n\n    if (!response.getHeaders().get(\"X-Forwarded-For\").equalsIgnoreCase(this.getIp())) {\n      anonymous = false;\n      return;\n    }\n\n    if (!response.getHeaders().get(\"X-Real-Ip\").equalsIgnoreCase(this.getIp())) {\n      anonymous = false;\n      return;\n    }\n\n    anonymous = true;\n\n  }", "public void marshall(EngineVersion engineVersion, ProtocolMarshaller protocolMarshaller) {\n\n        if (engineVersion == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(engineVersion.getName(), NAME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public static boolean isNameRegistrationSuccess(HttpServletRequest request){\n  String status=request.getParameter(IFSConstants.REGISTRATION_STATUS);\n  if (status != null && status.equalsIgnoreCase(IFSConstants.REGISTRATION_SUCCESS)) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n", "\tprotected void addResPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_OUT_Res_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_OUT_Res_feature\", \"_UI_OUT_type\"),\n\t\t\t\t Context_FmsCPackage.Literals.OUT__RES,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "\tprivate String generateLispFromActionPattern(ActionPattern pattern) {\n\t\tString result;\n\t\tresult = \"(AP \" + pattern.getName() + \" \" + generateLispFromTimeUnit(pattern.getTimeUnit()) + \" (\";\n\t\tIterator iterator = pattern.getElements().iterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tActionElement element = (ActionElement) iterator.next();\n\t\t\tif (element.isEnabled()) {\n\t\t\t\tresult += \"\\n\\t\";\n\t\t\t} else {\n\t\t\t\tresult += \"\\n\\t;\";\n\t\t\t}\n\t\t\t\n\t\t\tresult += generateLispFromActionElement(element) + (iterator.hasNext() ? \" \" : \"\\n\");\n\t\t}\n\n\t\t// Close the list of actions and the AP itself\n\t\tresult += \"))\";\n\t\treturn result;\n\t}\n", "public OkHttpStack ( OkHttpClient okHttpClient ) { this . okHttpClient = okHttpClient ; }", "public ZyGraphProximitySettings ( final ZyGraphProximitySettings settings ) { m_proximityBrowsing = settings . getProximityBrowsing ( ) ; m_proximityBrowsingActivisionThreshold = settings . getProximityBrowsingActivationThreshold ( ) ; m_proximityBrowsing", "public int getY() {\n\treturn posy;\n}\n", "\tpublic void throwDebugInformation(Throwable e) {\n\t\tlogTimed(\"web\", \"internal\", \"throwing debug information\");\n\t\t// print out the source code\n\t\tSystem.out.println(getTester().getPageSource());\n\t\tSystem.out.println(getElementById(\"debug\").getTextContent());\n\t\t// throw out any response text too\n\t\tlogTimed(\"web\", \"internal\", \"throwing debug information complete\");\n\t\tthrow new RuntimeException(\"Response = '\" + getElementById(\"response\").getTextContent() + \"' Debug='\" + getElementById(\"debug\").getTextContent() + \"'\", e);\n\t\t\n\t}\n", "protected void init ( String owner , MethodNode m ) throws AnalyzerException { }", "\tprivate JPanel createButtonCorner(){\n\n\t\t// [SR:14/11/2004: button moved to PEDrawingBoard.GridZoomToolbar]\n\n\t\tJButton b = new JButton();\n\t\tb.setAction(new CenterViewportAction(new DefaultActionDispatcher(canvas), Localizer.currentLocalizer().getActionLocalizer(), this));\n\t\tb.setText(null);\n\n\t\tb.setBorder(BorderFactory.createRaisedBevelBorder());\n\t\tb.setMargin(new Insets(0,2,0,2));\n\n\t\tJPanel buttonCorner = new JPanel();\n\t\tbuttonCorner.setBackground(Color.white);\n\t\tbuttonCorner.add(b);\n\t\treturn buttonCorner;\n\t}\n", "public TreeItem getTopItem () {\n\tcheckWidget ();\n\t//TODO - partial item at the top\n\tNSRect rect = scrollView.documentVisibleRect ();\n\tNSPoint point = new NSPoint ();\n\tpoint.x = rect.x;\n\tpoint.y = rect.y;\n\tNSOutlineView outlineView = (NSOutlineView)view;\n\tint /*long*/ index = outlineView.rowAtPoint (point);\n\tif (index == -1) return null; /* empty */\n\tid item = outlineView.itemAtRow (index);\n\treturn (TreeItem)display.getWidget (item.id);\n}\n", "public List<StorageFileEntity> createStorageFileEntitiesFromStorageFiles(StorageUnitEntity storageUnitEntity,List<StorageFile> storageFiles){\n  List<StorageFileEntity> storageFileEntities=new ArrayList<>();\n  for (  StorageFile storageFile : storageFiles) {\n    StorageFileEntity storageFileEntity=new StorageFileEntity();\n    storageFileEntities.add(storageFileEntity);\n    storageFileEntity.setStorageUnit(storageUnitEntity);\n    storageFileEntity.setPath(storageFile.getFilePath());\n    storageFileEntity.setFileSizeBytes(storageFile.getFileSizeBytes());\n    storageFileEntity.setRowCount(storageFile.getRowCount());\n    storageFileDao.saveAndRefresh(storageFileEntity);\n  }\n  return storageFileEntities;\n}\n", "public Array(T[] array){\n  this(true,array);\n}\n", "    public boolean remove(Object o) {\n        if (!loaded) {\n            load();\n        }\n        return super.remove(o);\n    }\n", "private void readHeader(int imageIndex,boolean reset) throws IOException {\n  gotoImage(imageIndex);\n  readNativeHeader(reset);\n  currentImage=imageIndex;\n}\n", "private void createAndSendMessage(ClientMembershipEvent event,int type){\n  InternalDistributedSystem ds=null;\n  Cache cacheInstance=AbstractCacheServer.this.cache;\n  if (cacheInstance != null && !(cacheInstance instanceof CacheCreation)) {\n    ds=(InternalDistributedSystem)cacheInstance.getDistributedSystem();\n  }\n else {\n    ds=InternalDistributedSystem.getAnyInstance();\n  }\n  if (ds != null && ds.isConnected()) {\n    DM dm=ds.getDistributionManager();\n    Set adminMemberSet=dm.getAdminMemberSet();\n    if (!adminMemberSet.isEmpty()) {\n      DistributedMember member=event.getMember();\n      ClientMembershipMessage msg=new ClientMembershipMessage(event.getMemberId(),member == null ? null : member.getHost(),type);\n      msg.setRecipients(adminMemberSet);\n      dm.putOutgoing(msg);\n    }\n  }\n}\n", "@SuppressWarnings(\"checkstyle:illegalcatch\")\n  public void afterTaskExit() throws TaskStopHandlerFailure {\n    LOG.log(Level.FINEST, \"Sending TaskStop event to the registered event handlers.\");\n    for (final EventHandler<TaskStop> stopHandler : this.taskStopHandlers) {\n      try {\n        stopHandler.onNext(this.taskStop);\n      } catch (final Throwable throwable) {\n        throw new TaskStopHandlerFailure(stopHandler, throwable);\n      }\n    }\n    LOG.log(Level.FINEST, \"Done sending TaskStop event to the registered event handlers.\");\n  }", "private JPanel createControlPanel(){\n  JPanel controlPanel=new JPanel();\n  controlPanel.setLayout(new BorderLayout());\n  Container zoomPanel=new Container();\n  zoomPanel.setLayout(new BorderLayout());\n  JButton plus=new JButton(\"+\");\n  plus.addMouseListener(new CustomMouseListener(new ZoomAction(ZoomDirection.IN)));\n  zoomPanel.add(plus,BorderLayout.NORTH);\n  JButton minus=new JButton(\"-\");\n  minus.addMouseListener(new CustomMouseListener(new ZoomAction(ZoomDirection.OUT)));\n  zoomPanel.add(minus,BorderLayout.SOUTH);\n  controlPanel.add(zoomPanel,BorderLayout.WEST);\n  controlPanel.add(new JSeparator(SwingConstants.VERTICAL),BorderLayout.CENTER);\n  Container translationPanel=new Container();\n  translationPanel.setLayout(new BorderLayout());\n  JButton up=new BasicArrowButton(SwingConstants.NORTH);\n  up.addMouseListener(new CustomMouseListener(new TranslationAction(TranslationDirection.NORTH)));\n  translationPanel.add(up,BorderLayout.NORTH);\n  JButton west=new BasicArrowButton(SwingConstants.WEST);\n  west.addMouseListener(new CustomMouseListener(new TranslationAction(TranslationDirection.WEST)));\n  translationPanel.add(west,BorderLayout.WEST);\n  translationPanel.add(new JLabel(\"        \"),BorderLayout.CENTER);\n  JButton east=new BasicArrowButton(SwingConstants.EAST);\n  east.addMouseListener(new CustomMouseListener(new TranslationAction(TranslationDirection.EAST)));\n  translationPanel.add(east,BorderLayout.EAST);\n  JButton south=new BasicArrowButton(SwingConstants.SOUTH);\n  south.addMouseListener(new CustomMouseListener(new TranslationAction(TranslationDirection.SOUTH)));\n  translationPanel.add(south,BorderLayout.SOUTH);\n  controlPanel.add(translationPanel,BorderLayout.EAST);\n  controlPanel.setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Controls\"),BorderFactory.createEmptyBorder(5,5,10,20)));\n  return controlPanel;\n}\n", "public static org.smpte_ra.schemas.st2067_2_2016.UserTextType buildCPLUserTextType_2016(String value,String language){\n  org.smpte_ra.schemas.st2067_2_2016.UserTextType userTextType=new org.smpte_ra.schemas.st2067_2_2016.UserTextType();\n  userTextType.setValue(value);\n  userTextType.setLanguage(language);\n  return userTextType;\n}\n", "\tpublic MobileNode getRearmostVehicle() {\n\t\ttry {\n\t\t\treturn vehicles.get(0);\n\t\t} catch (Exception e){\n\t\t\treturn null;\n\t\t}\n\t}\n", "private void showToast(@Nullable final String text) {\n        if (toast != null) {\n            toast.cancel();\n        }\n\n        toast = Toast.makeText(getActivity(), text, Toast.LENGTH_SHORT);\n        toast.show();\n    }", "protected void invokeDelegate(\n            RenderFilter delegate, RenderRequest request, RenderResponse response, FilterChain filterChain)\n            throws PortletException, IOException {\n\n        delegate.doFilter(request, response, filterChain);\n    }", "public void pauseDelivery ( boolean pause ) throws Exception { if ( network instanceof RcNetwork ) { ( ( RcNetwork ) network ) . pauseDeliveryTo ( cmember . getMemberId ( ) , pause ) ; } }", "public AnnotatingGraphMousePlugin(RenderContext<V,E> rc,int selectionModifiers,int additionalModifiers){\n  super(selectionModifiers);\n  this.rc=rc;\n  this.basicTransformer=rc.getMultiLayerTransformer();\n  this.additionalModifiers=additionalModifiers;\n  this.lensPaintable=new LensPaintable();\n  this.annotationManager=new AnnotationManager(rc);\n  this.cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);\n}\n", "    public int getCoordinateDimension() {\n        GM_Point sp = null;\n\n        try {\n            sp = getPointAt( 0 );\n        } catch ( Exception ex ) {\n        }\n\n        return sp.getAsArray().length;\n    }\n", "    public void h2(String text) {\n        h2();\n        println(text);\n        h2End();\n    }\n", "    public String toStringName() {\n        String str = String.valueOf(fileId) + \"_\" + String.valueOf(offset);\n        return str;\n    }\n", "@Override public boolean isOutboundDone(){\n  return writer.isOutboundDone();\n}\n", "void monitorConsistencyLevel ( ) throws ConsistencyLevelViolationException ;", "public void onClick(View v){\n  if (v == mPopupView) {\n    switchViews(true);\n  }\n}\n", "private static TxnManager constrainServer ( TxnManager txnMgr , MethodConstraints methodConstraints ) { return ( TxnManager ) ( ( RemoteMethodControl ) txnMgr ) . setConstraints ( methodConstraints ) ; }", "public static boolean evaluateTrigger(Trigger trigger,Double actualValue){\n  requireArgument(trigger != null,\"Trigger cannot be null.\");\n  requireArgument(actualValue != null,\"Trigger cannot be evaulated against null.\");\n  Double lowThreshold, highThreshold;\nswitch (trigger.type) {\ncase GREATER_THAN:\n    return actualValue.compareTo(trigger.getThreshold()) > 0;\ncase GREATER_THAN_OR_EQ:\n  return actualValue.compareTo(trigger.getThreshold()) >= 0;\ncase LESS_THAN:\nreturn actualValue.compareTo(trigger.getThreshold()) < 0;\ncase LESS_THAN_OR_EQ:\nreturn actualValue.compareTo(trigger.getThreshold()) <= 0;\ncase EQUAL:\nreturn actualValue.compareTo(trigger.getThreshold()) == 0;\ncase NOT_EQUAL:\nreturn actualValue.compareTo(trigger.getThreshold()) != 0;\ncase BETWEEN:\nlowThreshold=Math.min(trigger.getThreshold(),trigger.getSecondaryThreshold());\nhighThreshold=Math.max(trigger.getThreshold(),trigger.getSecondaryThreshold());\nreturn (actualValue.compareTo(lowThreshold) >= 0 && actualValue.compareTo(highThreshold) <= 0);\ncase NOT_BETWEEN:\nlowThreshold=Math.min(trigger.getThreshold(),trigger.getSecondaryThreshold());\nhighThreshold=Math.max(trigger.getThreshold(),trigger.getSecondaryThreshold());\nreturn (actualValue.compareTo(lowThreshold) < 0 || actualValue.compareTo(highThreshold) > 0);\ndefault :\nthrow new SystemException(\"Unsupported trigger type \" + trigger.type);\n}\n}\n", "public void paintTabbedPaneTabBorder ( SynthContext context , Graphics g , int x , int y , int w , int h , int tabIndex ) { paintBorder ( context , g , x , y , w , h , null ) ; }", "private List<AnalyzedToken> getSubstantivatedForms(String word, List<String> sentenceTokens, int pos) {\n    if (word.endsWith(\"er\")) {\n      List<TaggedWord> lowerCaseTags = getWordTagger().tag(word.toLowerCase());\n      // do not add tag words whose lower case variant is an adverb (e.g, \"Fr\u00fcher\") to avoid false negatives for DE_CASE\n      if (lowerCaseTags.stream().anyMatch(t -> t.getPosTag().startsWith(\"ADV\"))) {\n        return null;\n      }\n      int idx = sentenceTokens.indexOf(word);\n      // is followed by an uppercase word? If 'yes', the word is probably not substantivated\n      while (++idx < sentenceTokens.size()) {\n        String nextWord = sentenceTokens.get(idx);\n        if (StringUtils.isWhitespace(nextWord)) {\n          continue;\n        }\n        if (nextWord.length() > 0 && (Character.isUpperCase(nextWord.charAt(0)) || \"als\".equals(nextWord))) {\n          return null;\n        }\n        break;\n      }\n      String femaleForm = word.substring(0, word.length()-1);\n      List<TaggedWord> taggedFemaleForm = getWordTagger().tag(femaleForm);\n      boolean isSubstantivatedForm = taggedFemaleForm.stream().anyMatch(t -> t.getPosTag().equals(\"SUB:NOM:SIN:FEM:ADJ\"));\n      if (isSubstantivatedForm) {\n        List<AnalyzedToken> list = new ArrayList<>();\n        list.add(new AnalyzedToken(word, \"SUB:NOM:SIN:MAS:ADJ\", word));\n        list.add(new AnalyzedToken(word, \"SUB:GEN:PLU:MAS:ADJ\", word));\n        //list.add(new AnalyzedToken(word, \"SUB:NOM:SIN:MAS\", word));\n        return list;\n      }\n    }\n    return null;\n  }", "public void addTimeEventListener(TimeEventListener tel){\n  if (!timeEventListeners.contains(tel)) {\n    timeEventListeners.add(tel);\n  }\n}\n", "private boolean isServiceChangedCCCDEnabled() throws DeviceDisconnectedException, DfuException, UploadAbortedException {\n  if (!mConnected)   throw new DeviceDisconnectedException(\"Unable to read Service Changed CCCD: device disconnected\");\n  if (mAborted)   throw new UploadAbortedException();\n  final BluetoothGatt gatt=mGatt;\n  final BluetoothGattService genericAttributeService=gatt.getService(GENERIC_ATTRIBUTE_SERVICE_UUID);\n  if (genericAttributeService == null)   return false;\n  final BluetoothGattCharacteristic serviceChangedCharacteristic=genericAttributeService.getCharacteristic(SERVICE_CHANGED_UUID);\n  if (serviceChangedCharacteristic == null)   return false;\n  final BluetoothGattDescriptor descriptor=serviceChangedCharacteristic.getDescriptor(CLIENT_CHARACTERISTIC_CONFIG);\n  if (descriptor == null)   return false;\n  mRequestCompleted=false;\n  mError=0;\n  logi(\"Reading Service Changed CCCD value...\");\n  mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_VERBOSE,\"Reading Service Changed CCCD value...\");\n  mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_DEBUG,\"gatt.readDescriptor(\" + descriptor.getUuid() + \")\");\n  gatt.readDescriptor(descriptor);\n  try {\nsynchronized (mLock) {\n      while ((!mRequestCompleted && mConnected && mError == 0) || mPaused)       mLock.wait();\n    }\n  }\n catch (  final InterruptedException e) {\n    loge(\"Sleeping interrupted\",e);\n  }\n  if (mError != 0)   throw new DfuException(\"Unable to read Service Changed CCCD\",mError);\n  if (!mConnected)   throw new DeviceDisconnectedException(\"Unable to read Service Changed CCCD: device disconnected\");\n  return descriptor.getValue() != null && descriptor.getValue().length == 2 && descriptor.getValue()[0] == BluetoothGattDescriptor.ENABLE_INDICATION_VALUE[0] && descriptor.getValue()[1] == BluetoothGattDescriptor.ENABLE_INDICATION_VALUE[1];\n}\n", "String readNumber(String source,int ofs,String token,boolean adjacent){\n  if (adjacent) {\n    return source.substring(ofs,ofs + token.length());\n  }\n  int len=source.length();\n  for (int i=ofs; i < len; i++) {\n    char ch=source.charAt(i);\n    if (isNumeric(ch) == false) {\n      if (i == 0) {\n        return null;\n      }\n      return source.substring(ofs,i);\n    }\n  }\n  return source.substring(ofs);\n}\n", "public TunerController ( long minimumFrequency , long maximumFrequency , int middleUnusable , double usableBandwidthPercentage ) { mFrequencyController = new FrequencyController ( this , minimumFrequency , maximumFrequency , NUM_ ) ; mMiddleUnusable = mid", "private void checkOrMarkPrivateAccess ( Expression source , FieldNode fn , boolean lhsOfAssignment ) { if ( fn != null && Modifier . isPrivate ( fn . getModifiers ( ) ) && ( fn . getDeclaringClass ( ) != typeCheckingContext . getEnclosingClassNode ( ) || ", "  public boolean isReferenced() {\n    return (referenceCount != 0);\n  }\n", "public static boolean isDouble ( CharSequence self ) { try { Double . valueOf ( self . toString ( ) . trim ( ) ) ; return BOOL_ ; } catch ( NumberFormatException nfe ) { return BOOL_ ; } }", "public final void mSELECT() throws RecognitionException {\n\t\ttry {\n\t\t\tint _type = SELECT;\n\t\t\tint _channel = DEFAULT_TOKEN_CHANNEL;\n\t\t\t// hql.g:58:8: ( 'select' )\n\t\t\t// hql.g:58:10: 'select'\n\t\t\t{\n\t\t\tmatch(\"select\"); if (state.failed) return;\n\n\t\t\t}\n\n\t\t\tstate.type = _type;\n\t\t\tstate.channel = _channel;\n\t\t}\n\t\tfinally {\n\t\t\t// do for sure before leaving\n\t\t}\n\t}", "public PersistenceException ( String message ) { super ( message ) ; }", "    public void createCookieNamedWithValue(String name, String value) {\n        FitniumCookieAPI.createCookieNamedWithValue(this, name, value);\n    }\n", "public static AffineTransform getWorldToPixel( Envelope worldEnvelope, Rectangle pixelRectangle ) {\n        double width = pixelRectangle.getWidth();\n        double worldWidth = worldEnvelope.getWidth();\n        double height = pixelRectangle.getHeight();\n        double worldHeight = worldEnvelope.getHeight();\n\n        AffineTransform translate = AffineTransform.getTranslateInstance(-worldEnvelope.getMinX(), -worldEnvelope.getMinY());\n        AffineTransform scale = AffineTransform.getScaleInstance(width / worldWidth, height / worldHeight);\n        AffineTransform mirror_y = new AffineTransform(1, 0, 0, -1, 0, pixelRectangle.getHeight());\n        AffineTransform world2pixel = new AffineTransform(mirror_y);\n        world2pixel.concatenate(scale);\n        world2pixel.concatenate(translate);\n        return world2pixel;\n    }", "    public boolean isLeftToRight() {\n        return leftToRight;\n    }\n", "public PoolPatchOptions withOcpDate(DateTime ocpDate) {\n        if (ocpDate == null) {\n            this.ocpDate = null;\n        } else {\n            this.ocpDate = new DateTimeRfc1123(ocpDate);\n        }\n        return this;\n    }", "\tpublic void receiveReplenishment(Demand demand) {\n\t\tif (demand == null)\n\t\t\tthrow new IllegalArgumentException(\"Invalid argument. Demand demand must be non-null.\");\n\t\t\n\t\tif (demand.getInventoryCustomer() != this) \n\t\t\tthrow new IllegalArgumentException(\"Invalid argument. This inventory did not request this replenishment.\");\n\t\t\t\n\t\tint replenishmentQty = demand.getAmountFilled();\n//\t\tSystem.out.println(\"replenishment arrived \" + replenishmentQty);\n//\t\tSystem.out.println(this);\n\t\tdecrementOnOrder(replenishmentQty);\n\t    incrementOnHand(replenishmentQty);\n\t    if (allowsBackLogging())\n\t    \t\tmyBackLogPolicy.fillBackLogs();\n\t    checkInventory();\n\t    Demand.recycle(demand);\n//\t\tSystem.out.println(this);\n\t}\n", "protected static Die abort ( ) { return new Die ( STR_ ) ; }", "private int yearLength() {\n        int year = internalGet(YEAR);\n        if (internalGetEra() == BCE) {\n            year = 1 - year;\n        }\n        return yearLength(year);\n    }", "    public Header getEntriesForKey(String s) {\n        if (s == null) {\n            throw new IllegalArgumentException(\"Key can't be null.\");\n        }\n\n        HeaderEntry he;\n\n        Header h = new Header();\n\n        Iterator iter = iterator();\n\n        while (iter.hasNext()) {\n            he = (HeaderEntry) iter.next();\n\n            if (s.equalsIgnoreCase(he.getKey())) {\n                h.add(he);\n            }\n        }\n\n        return (h);\n    }\n", "protected void handleUDPSrvReg(SrvReg srvReg, InetSocketAddress localAddress, InetSocketAddress remoteAddress)\n    {\n        try\n        {\n            boolean update = srvReg.isUpdating();\n            ServiceInfo service = ServiceInfo.from(srvReg);\n            cacheService(service, update);\n            udpSrvAck.perform(localAddress, remoteAddress, srvReg, SLPError.NO_ERROR);\n        }\n        catch (ServiceLocationException x)\n        {\n            udpSrvAck.perform(localAddress, remoteAddress, srvReg, x.getSLPError());\n        }\n    }", "public void start ( ) { if ( mEgl == null ) { mEgl = ( EGL10 ) EGLContext . getEGL ( ) ; } else { } if ( mEglDisplay == null ) { mEglDisplay = mEgl . eglGetDisplay ( EGL10 . EGL_DEFAULT_DISPLAY ) ; } else { } if ( mEglConfig == null ) { int [ ] version = ", "@SuppressWarnings(\"LockNotBeforeTry\")\n    public void init() {\n        connectionLock.lock();\n        state = State.Initial;\n        failureException = null;\n        smackWrappedExcpetion = null;\n        connectionLock.unlock();\n    }", "private StringBuffer format(double number,StringBuffer result,FieldDelegate delegate){\n  if (Double.isNaN(number) || (Double.isInfinite(number) && multiplier == 0)) {\n    int iFieldStart=result.length();\n    result.append(symbols.getNaN());\n    delegate.formatted(INTEGER_FIELD,Field.INTEGER,Field.INTEGER,iFieldStart,result.length(),result);\n    return result;\n  }\n  boolean isNegative=((number < 0.0) || (number == 0.0 && 1 / number < 0.0)) ^ (multiplier < 0);\n  if (multiplier != 1) {\n    number*=multiplier;\n  }\n  if (Double.isInfinite(number)) {\n    if (isNegative) {\n      append(result,negativePrefix,delegate,getNegativePrefixFieldPositions(),Field.SIGN);\n    }\n else {\n      append(result,positivePrefix,delegate,getPositivePrefixFieldPositions(),Field.SIGN);\n    }\n    int iFieldStart=result.length();\n    result.append(symbols.getInfinity());\n    delegate.formatted(INTEGER_FIELD,Field.INTEGER,Field.INTEGER,iFieldStart,result.length(),result);\n    if (isNegative) {\n      append(result,negativeSuffix,delegate,getNegativeSuffixFieldPositions(),Field.SIGN);\n    }\n else {\n      append(result,positiveSuffix,delegate,getPositiveSuffixFieldPositions(),Field.SIGN);\n    }\n    return result;\n  }\n  if (isNegative) {\n    number=-number;\n  }\n  assert (number >= 0 && !Double.isInfinite(number));\nsynchronized (digitList) {\n    int maxIntDigits=super.getMaximumIntegerDigits();\n    int minIntDigits=super.getMinimumIntegerDigits();\n    int maxFraDigits=super.getMaximumFractionDigits();\n    int minFraDigits=super.getMinimumFractionDigits();\n    digitList.set(isNegative,number,useExponentialNotation ? maxIntDigits + maxFraDigits : maxFraDigits,!useExponentialNotation);\n    return subformat(result,delegate,isNegative,false,maxIntDigits,minIntDigits,maxFraDigits,minFraDigits);\n  }\n}\n", "private Query analyzeMultiPhrase(String field,TokenStream stream,int slop) throws IOException {\n  MultiPhraseQuery.Builder mpqb=newMultiPhraseQueryBuilder();\n  mpqb.setSlop(slop);\n  TermToBytesRefAttribute termAtt=stream.getAttribute(TermToBytesRefAttribute.class);\n  PositionIncrementAttribute posIncrAtt=stream.getAttribute(PositionIncrementAttribute.class);\n  int position=-1;\n  List<Term> multiTerms=new ArrayList<>();\n  stream.reset();\n  while (stream.incrementToken()) {\n    int positionIncrement=posIncrAtt.getPositionIncrement();\n    if (positionIncrement > 0 && multiTerms.size() > 0) {\n      if (enablePositionIncrements) {\n        mpqb.add(multiTerms.toArray(new Term[0]),position);\n      }\n else {\n        mpqb.add(multiTerms.toArray(new Term[0]));\n      }\n      multiTerms.clear();\n    }\n    position+=positionIncrement;\n    multiTerms.add(new Term(field,termAtt.getBytesRef()));\n  }\n  if (enablePositionIncrements) {\n    mpqb.add(multiTerms.toArray(new Term[0]),position);\n  }\n else {\n    mpqb.add(multiTerms.toArray(new Term[0]));\n  }\n  return mpqb.build();\n}\n", "    public IntMatrix elementsInRange(RealRange r) throws EuclidRuntimeException {\n        IntMatrix m = new IntMatrix(rows, cols);\n        for (int irow = 0; irow < rows; irow++) {\n            for (int jcol = 0; jcol < cols; jcol++) {\n                int elem = 0;\n                if (r.includes(elementAt(irow, jcol))) {\n                    elem = 1;\n                }\n                m.setElementAt(irow, jcol, elem);\n            }\n        }\n        return m;\n    }\n", "public static String [ ] split ( CharSequence self ) { StringTokenizer st = new StringTokenizer ( self . toString ( ) ) ; String [ ] strings = new String [ st . countTokens ( ) ] ; for ( int i = NUM_ ; i < strings . length ; i ++ ) { strings [ i ] = st . ", "public ArrayList<Long> serviceName_distribution_software_GET(String serviceName) throws IOException {\n\t\tString qPath = \"/vps/{serviceName}/distribution/software\";\n\t\tStringBuilder sb = path(qPath, serviceName);\n\t\tString resp = exec(qPath, \"GET\", sb.toString(), null);\n\t\treturn convertTo(resp, t4);\n\t}", "public CStepEndAction ( final JFrame parent , final IFrontEndDebuggerProvider debugger , final ZyGraph graph ) { m_parent = Preconditions . checkNotNull ( parent , STR_ ) ; m_debugger = Preconditions . checkNotNull ( debugger , STR_ ) ; m_graph = Precondi", "    public String getCommandToExecute() {\n        if ((argument == null) || (argument.length() == 0)) {\n            return COMMANDS[code];\n        } else {\n            return new StringBuffer(COMMANDS[code]).append(\" \").append(argument)\n                                                   .toString();\n        }\n    }\n", "public Matrix4x3f rotateLocalZ(float ang, Matrix4x3f dest) {\n        float sin = (float) Math.sin(ang);\n        float cos = (float) Math.cosFromSin(sin, ang);\n        float nm00 = cos * m00 - sin * m01;\n        float nm01 = sin * m00 + cos * m01;\n        float nm10 = cos * m10 - sin * m11;\n        float nm11 = sin * m10 + cos * m11;\n        float nm20 = cos * m20 - sin * m21;\n        float nm21 = sin * m20 + cos * m21;\n        float nm30 = cos * m30 - sin * m31;\n        float nm31 = sin * m30 + cos * m31;\n        dest._m00(nm00);\n        dest._m01(nm01);\n        dest._m02(m02);\n        dest._m10(nm10);\n        dest._m11(nm11);\n        dest._m12(m12);\n        dest._m20(nm20);\n        dest._m21(nm21);\n        dest._m22(m22);\n        dest._m30(nm30);\n        dest._m31(nm31);\n        dest._m32(m32);\n        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);\n        return dest;\n    }", "private void processAxisFault(AxisFault fault){\n  Element runtimeException=fault.lookupFaultDetail(Constants.QNAME_FAULTDETAIL_RUNTIMEEXCEPTION);\n  if (runtimeException != null) {\n    exceptionLog.info(Messages.getMessage(\"axisFault00\"),fault);\n    fault.removeFaultDetail(Constants.QNAME_FAULTDETAIL_RUNTIMEEXCEPTION);\n  }\n else   if (exceptionLog.isDebugEnabled()) {\n    exceptionLog.debug(Messages.getMessage(\"axisFault00\"),fault);\n  }\n  fault.removeFaultDetail(Constants.QNAME_FAULTDETAIL_STACKTRACE);\n}\n", "public BulkProcessor buildBulkProcessor(Listener bulkProcessorListener,\n            int bulkActions, long bulkSizeKB, int flushIntervalSeconds) {\n        return buildBulkProcessor(bulkProcessorListener, bulkActions,\n                bulkSizeKB, flushIntervalSeconds, null, null);\n    }", "  public void setBowler(Bowler bowler) {\n    super.setBowler(bowler);\n    uiBowler.setBowler(bowler);\n  }\n", "    public void catchUp( File filename ) {\n        taskQueue.add( firstTask(filename, ExpectedIndifferent.instance()) );\n        // reentrant invocation of processTaskQueue\n        processTaskQueue();\n    }    \n", "public OutstandingRequestToken(Principal user,int requestLimit,Meter requestMeter,Meter rejectMeter){\n  userName=String.valueOf(user == null ? null : user.getName());\n  count=getCount(userName);\n  if (!incrementAndCheckCount(globalCount,requestLimitGlobal)) {\n    rejectRequest(rejectMeter,RateLimitType.GLOBAL);\n    return;\n  }\n  if (!incrementAndCheckCount(count,requestLimit)) {\n    globalCount.decrementAndGet();\n    rejectRequest(rejectMeter,RateLimitType.USER);\n    return;\n  }\n  requestMeter.mark();\n  requestGlobalCounter.inc();\n  isBound=true;\n}\n", "public static Object simpleDeepCopy( Object object ) {\n\n        try {\n            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n            ObjectOutputStream oos = new ObjectOutputStream(bos);\n            oos.writeObject(object);\n            oos.flush();\n            oos.close();\n            bos.close();\n\n            byte [] byteData = bos.toByteArray();\n            ByteArrayInputStream bais = new ByteArrayInputStream(byteData);\n\n            return new ObjectInputStream(bais).readObject();\n        }\n        catch ( IOException ioe ) {\n            throw new RuntimeException( \"DeepCopy IOException\", ioe );\n        }\n        catch ( ClassNotFoundException cnf ) {\n            throw new RuntimeException( \"DeepCopy ClassNotFoundException\", cnf );\n        }\n    }", "public static XField createXField ( String className , Field field ) { String fieldName = field . getName ( ) ; String fieldSig = field . getSignature ( ) ; XField xfield = getExactXField ( className , fieldName , fieldSig , field . isStatic ( ) ) ; asser", "   public JSONObject accumulate( String key, boolean value ) {\n      return _accumulate( key, value ? Boolean.TRUE : Boolean.FALSE );\n   }\n", "\tpublic ColumnReference removeGroupBy(int ind){\n\t\tind--;\n\t\t\n\t\tif (ind < 0 || ind >= lstGroupBy.size())\n\t\t\treturn null;\n\t\t\n\t\treturn lstGroupBy.remove(ind);\n\t}\n", "public void checkJvmClassesVerboseLevel(EnumJvmClassesVerboseLevel x) throws SnmpStatusException {\n  if (JvmClassesVerboseLevelVerbose.equals(x))   return;\n  if (JvmClassesVerboseLevelSilent.equals(x))   return;\n  throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);\n}\n", "public void testWriteReadEmpty ( ) throws Exception { ByteArrayOutputStream out = new ByteArrayOutputStream ( NUM_ ) ; ObjectOutputStream os = new ObjectOutputStream ( out ) ; os . writeObject ( empty ) ; ObjectInputStream is = new ObjectInputStream ( new", "        public void glDraw(GL gl) {\n            gl.glColor3f(r,g,b);\n            \n            gl.glLineWidth(1f);\n            gl.glBegin(GL.GL_LINE_STRIP);\n            int j;\n            for(j=0; j<SIZE; j++)\n                gl.glVertex3f((float) j,data[(", "public static gslbsite_gslbservice_binding[] get_filtered(nitro_service service, String sitename, filtervalue[] filter) throws Exception{\n\t\tgslbsite_gslbservice_binding obj = new gslbsite_gslbservice_binding();\n\t\tobj.set_sitename(sitename);\n\t\toptions option = new options();\n\t\toption.set_filter(filter);\n\t\tgslbsite_gslbservice_binding[] response = (gslbsite_gslbservice_binding[]) obj.getfiltered(service, option);\n\t\treturn response;\n\t}", "@Override public synchronized void enqueueTask(ProcessingTask task){\n  mQueue.add(task);\n  Log.d(TAG,\"Task added. Queue size now: \" + mQueue.size());\n  if (!mServiceRunning && !mHoldProcessing) {\n    startService();\n  }\n}\n", "static private String SHORT_Max(){\n  short tempValue=Short.MAX_VALUE;\n  return String.valueOf(tempValue);\n}\n", "private static TagList getMonitorTags(Object obj) {\n    try {\n      Set<Field> fields = getFieldsAnnotatedBy(obj.getClass(), MonitorTags.class);\n      for (Field field : fields) {\n        field.setAccessible(true);\n        return (TagList) field.get(obj);\n      }\n\n      Set<Method> methods = getMethodsAnnotatedBy(obj.getClass(), MonitorTags.class);\n      for (Method method : methods) {\n        method.setAccessible(true);\n        return (TagList) method.invoke(obj);\n      }\n    } catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n\n    return null;\n  }", "\tpublic Curriculum (java.lang.Long uniqueId) {\n\t\tsuper(uniqueId);\n\t}\n", "public static void maxConnections ( final int maxConnections ) { setProperty ( STR_ , Integer . toString ( maxConnections ) ) ; }", "private void translateHeader(float of){\n  float ofCalculated=of * mScrollMultiplier;\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB && of < mHeaderView.getHeight()) {\n    mHeaderView.setTranslationY(ofCalculated);\n  }\n else   if (of < mHeaderView.getHeight()) {\n    TranslateAnimation anim=new TranslateAnimation(0,0,ofCalculated,ofCalculated);\n    anim.setFillAfter(true);\n    anim.setDuration(0);\n    mHeaderView.startAnimation(anim);\n  }\n  mHeaderView.setClipY(Math.round(ofCalculated));\n  if (mParallaxScrollListener != null) {\n    final RecyclerView.ViewHolder holder=mRecyclerView.findViewHolderForAdapterPosition(0);\n    float left;\n    if (holder != null) {\n      left=Math.min(1,((ofCalculated) / (mHeaderView.getHeight() * mScrollMultiplier)));\n    }\n else {\n      left=1;\n    }\n    mParallaxScrollListener.onParallaxScroll(left,of,mHeaderView);\n  }\n}\n", "    public void setAuthor(final String author) {\n        ContractChecker.mustNotBeNull(author, \"author\");\n        this.author = author;\n    }\n", "\tpublic void clear() {\n\t\tdata.removeAllElements();\n\t\tshapes.removeAllElements();\n\t}\n", "public void marshall(PutScheduledActionRequest putScheduledActionRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (putScheduledActionRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(putScheduledActionRequest.getServiceNamespace(), SERVICENAMESPACE_BINDING);\n            protocolMarshaller.marshall(putScheduledActionRequest.getSchedule(), SCHEDULE_BINDING);\n            protocolMarshaller.marshall(putScheduledActionRequest.getScheduledActionName(), SCHEDULEDACTIONNAME_BINDING);\n            protocolMarshaller.marshall(putScheduledActionRequest.getResourceId(), RESOURCEID_BINDING);\n            protocolMarshaller.marshall(putScheduledActionRequest.getScalableDimension(), SCALABLEDIMENSION_BINDING);\n            protocolMarshaller.marshall(putScheduledActionRequest.getStartTime(), STARTTIME_BINDING);\n            protocolMarshaller.marshall(putScheduledActionRequest.getEndTime(), ENDTIME_BINDING);\n            protocolMarshaller.marshall(putScheduledActionRequest.getScalableTargetAction(), SCALABLETARGETACTION_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public WildcardFileFilter ( String wildcard ) { this ( wildcard , null ) ; }", "static void processArgs(String[] args, final PrintStream out, final PrintStream err) {\n        GroovyCommand groovyCommand = new GroovyCommand();\n        CommandLine parser = new CommandLine(groovyCommand).setUnmatchedArgumentsAllowed(true).setStopAtUnmatched(true);\n        try {\n            List<CommandLine> result = parser.parse(args);\n            if (CommandLine.printHelpIfRequested(result, out, err, Help.Ansi.AUTO)) {\n                return;\n            }\n            // TODO: pass printstream(s) down through process\n            if (!groovyCommand.process(parser)) {\n                // If we fail, then exit with an error so scripting frameworks can catch it.\n                System.exit(1);\n            }\n\n        } catch (ParameterException ex) { // command line arguments could not be parsed\n            err.println(ex.getMessage());\n            ex.getCommandLine().usage(err);\n        } catch (IOException ioe) {\n            err.println(\"error: \" + ioe.getMessage());\n        }\n    }", "public static Element firstChildElement(Element element){\n  if (element == null)   return null;\n  Node node=element.getFirstChild();\n  if (node != null) {\n    do {\n      if (node.getNodeType() == Node.ELEMENT_NODE) {\n        Element childElement=(Element)node;\n        return childElement;\n      }\n    }\n while ((node=node.getNextSibling()) != null);\n  }\n  return null;\n}\n", "public ForeignKey<OneToMany<T>> getOrCreateMapKeyForeignKey()\n   {\n      Node node = childNode.getOrCreate(\"map-key-foreign-key\");\n      ForeignKey<OneToMany<T>> mapKeyForeignKey = new ForeignKeyImpl<OneToMany<T>>(this, \"map-key-foreign-key\", childNode, node);\n      return mapKeyForeignKey;\n   }", "    public void fireValidationFailed(ValidationEvent event) {\n        // Guaranteed to return a non-null array\n        Object[] listeners = mListenerList.getListenerList();\n        // Process the listeners last to first, notifying\n        // those that ar", "public void removeCurrent ( ) { try { cursor . cursor ( ) . delete ( ) ; } catch ( DatabaseException ex ) { throw new HGException ( ex ) ; } }", "    private Locale readLanguageNode(final Node languageNode) {\n        assert languageNode != null : \"languageNode is null\";\n\n        return new Locale(languageNode.getNodeValue());\n    }\n", "static void checkDirectMemCapacity(final int k, final long n, final long memCapBytes) {\n    final int reqBufBytes = getCompactStorageBytes(k, n);\n\n    if (memCapBytes < reqBufBytes) {\n      throw new SketchesArgumentException(\"Possible corruption: Memory capacity too small: \"\n          + memCapBytes + \" < \" + reqBufBytes);\n    }\n  }", "private void _send(SIBusMessage msg, SITransaction tran)\n      throws SISessionUnavailableException, SISessionDroppedException,\n             SIConnectionUnavailableException, SIConnectionDroppedException,\n             SIResourceException, SIConnectionLostException, SILimitExceededException, \n             SIErrorException,\n             SINotAuthorizedException,\n             SIIncorrectCallException,\n             SINotPossibleInCurrentConfigurationException \n   {\n      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(this, tc, \"_send\");\n      \n      boolean sendSuccessful = false;\n      // Get the message priority\n      short jfapPriority = JFapChannelConstants.getJFAPPriority(msg.getPriority());\n      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(this, tc, \"Sending with JFAP priority of \" + jfapPriority);\n            \n      updateLowestPriority(jfapPriority);\n\n      // *** Complex logic to determine if we can get away we need a reply to ***\n      // *** this send operation.                                             ***\n      final boolean requireReply;\n      if (tran != null && !exchangeTransactedSends)\n      {\n         // If there is a transaction, and we haven't been explicitly told to exchange\n         // transacted sends - then a reply is NOT required.\n         requireReply = false;\n      }\n      else if (exchangeExpressSends)\n      {\n         // We have been prohibited from sending (rather than exchanging) low\n         // qualities of service - thus there is no way that we can avoid requiring\n         // a reply.\n         requireReply = true;\n      }\n      else\n      {\n         // We CAN perform the optimization where low qualities of service can be sent\n         // without requiring a reply.  Check the message quality of service.\n         requireReply = (msg.getReliability() != Reliability.BEST_EFFORT_NONPERSISTENT) &&\n                        (msg.getReliability() != Reliability.EXPRESS_NONPERSISTENT);\n      }\n      // *** end of \"is a reply required\" logic ***\n      \n      // If we are at FAP9 or above we can do a 'chunked' send of the message in seperate \n      // slices to make life easier on the Java memory manager\n      final HandshakeProperties props = getConversation().getHandshakeProperties(); \n      if (props.getFapLevel() >= JFapChannelConstants.FAP_VERSION_9)\n      {\n         sendChunkedMessage(tran, msg, requireReply, jfapPriority);\n      }\n      else\n      {\n         sendEntireMessage(tran, msg, null, requireReply, jfapPriority);\n      }\n      \n      sendSuccessful = true;\n\n      if (TraceComponent.isAnyTracingEnabled()) \n        CommsLightTrace.traceMessageId(tc, \"SendMsgTrace\", msg);\n      \n      \n      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc, \"_send\");\n   }", "private static double average(Iterable<? extends Comparable<?>> data,double start,double end){\n  int startFloor=(int)Math.floor(start);\n  int startCeil=(int)Math.ceil(start);\n  int endFloor=(int)Math.floor(end);\n  int endCeil=(int)Math.ceil(end);\n  double sum=0.0;\n  Iterator<? extends Comparable<?>> dataIterator=data.iterator();\n  advance(dataIterator,startFloor);\n  for (int i=startFloor; i < endCeil; i++) {\n    Number number=(Number)dataIterator.next();\n    double val=number.doubleValue();\n    if (i == startFloor && startCeil != start) {\n      sum+=(startCeil - start) * val;\n    }\n else     if (i == endCeil - 1 && endFloor != end) {\n      sum+=(end - endFloor) * val;\n    }\n else {\n      sum+=val;\n    }\n  }\n  return sum / (end - start);\n}\n", "\tpublic NetworkObject findNetworkObject(String name) {\n            Iterator it = networkObjects.iterator();\n            while (it.hasNext()) {\n                NetworkObject no = (NetworkObject) it.next();\n                if (no.getName().equalsIgnoreCase(name)) {\n                        return no;\n                }\n            }\n            return null;\n\t}\n", "public void move(Task what,Task where){\n  Node subNode=myNodeMap.get(what);\n  if (subNode == null) {\n    return;\n  }\n  boolean removedAny=removeImplicitDependencies(subNode);\n  Node superNode=myNodeMap.get(where);\n  if (superNode == null) {\n    if (removedAny) {\n      fireGraphChanged();\n    }\n    return;\n  }\n  for (  DependencyEdge incomingEdge : Lists.newArrayList(superNode.getIncoming())) {\n    if (incomingEdge instanceof ImplicitSubSuperTaskDependency == false) {\n      if (incomingEdge instanceof ImplicitInheritedDependency) {\n        incomingEdge=((ImplicitInheritedDependency)incomingEdge).myExplicitDep;\n      }\n      ImplicitInheritedDependency implicitIncoming=new ImplicitInheritedDependency(incomingEdge,superNode,subNode);\n      addEdge(implicitIncoming);\n      addInheritedDependencies(incomingEdge,subNode);\n    }\n  }\n  addEdge(new ImplicitSubSuperTaskDependency(subNode,superNode));\n  fireGraphChanged();\n}\n", "public void addFactsValidate(String tableName,FactsValidator listener){\n  if (tableName == null || listener == null)   return;\n  String propertyName=m_globalValidators.contains(listener) ? tableName + \"*\" : tableName + listener.getAD_Client_ID();\n  ArrayList<FactsValidator> list=(ArrayList<FactsValidator>)m_factsValidateListeners.get(propertyName);\n  if (list == null) {\n    list=new ArrayList<FactsValidator>();\n    list.add(listener);\n    m_factsValidateListeners.put(propertyName,list);\n  }\n else   list.add(listener);\n}\n", "@Override\n\tpublic long dynamicQueryCount(DynamicQuery dynamicQuery,\n\t\tProjection projection) {\n\t\treturn commerceNotificationTemplatePersistence.countWithDynamicQuery(dynamicQuery,\n\t\t\tprojection);\n\t}", "public ClassSymbol enterClass(Name name, TypeSymbol owner) {\n        Name flatname = TypeSymbol.formFlatName(name, owner);\n        ClassSymbol c = classes.get(flatname);\n        if (c == null) {\n            c = defineClass(name, owner);\n            classes.put(flatname, c);\n        } else if ((c.name != name || c.owner != owner) && owner.kind == TYP && c.owner.kind == PCK) {\n            // reassign fields of classes that might have been loaded with\n            // their flat names.\n            c.owner.members().remove(c);\n            c.name = name;\n            c.owner = owner;\n            c.fullname = ClassSymbol.formFullName(name, owner);\n        }\n        return c;\n    }", "public static boolean checkUtil ( String util ) { return getInternals ( ) . checkUtil ( util ) ; }", "private static byte unescape(String s,int i){\n  return (byte)Integer.parseInt(s.substring(i + 1,i + 3),16);\n}\n", "public static void fail ( String reason ) throws RuntimeException { throw new RuntimeException ( reason ) ; }", "private static LiteralByteString concatenateBytes(ByteString left,ByteString right){\n  int leftSize=left.size();\n  int rightSize=right.size();\n  byte[] bytes=new byte[leftSize + rightSize];\n  left.copyTo(bytes,0,0,leftSize);\n  right.copyTo(bytes,0,leftSize,rightSize);\n  return new LiteralByteString(bytes);\n}\n", "public static void downto(Double self,Number to,@ClosureParams(FirstParam.class) Closure closure){\n  double to1=to.doubleValue();\n  if (self >= to1) {\n    for (double i=self; i >= to1; i--) {\n      closure.call(i);\n    }\n  }\n else   throw new GroovyRuntimeException(\"The argument (\" + to + \") to downto() cannot be greater than the value (\"+ self+ \") it's called on.\");\n}\n", "public static SolrQueryRequest req(String[] params,String... moreParams){\n  String[] allParams=moreParams;\n  if (params.length != 0) {\n    int len=params.length + moreParams.length;\n    allParams=new String[len];\n    System.arraycopy(params,0,allParams,0,params.length);\n    System.arraycopy(moreParams,0,allParams,params.length,moreParams.length);\n  }\n  return lrf.makeRequest(allParams);\n}\n", "public ByteVector put12 ( final int b , final int s ) { int length = this . length ; if ( length + NUM_ > data . length ) { enlarge ( NUM_ ) ; } byte [ ] data = this . data ; data [ length ++ ] = ( byte ) b ; data [ length ++ ] = ( byte ) ( s > > > NUM_ )", "public static <E>boolean addAllJson(Collection<JsonNode> nodes,Function<JsonNode,E> parser,Collection<E> output){\n  boolean success=true;\n  for (  JsonNode node : nodes) {\n    E parsed=parser.apply(node);\n    success&=(parsed != null);\n    if (success) {\n      output.add(parsed);\n    }\n  }\n  return success;\n}\n", "static final String xpath(Element element) {\n        StringBuilder sb = new StringBuilder();\n\n        Node iterator = element;\n        while (iterator.getNodeType() == Node.ELEMENT_NODE) {\n            sb.insert(0, \"]\");\n            sb.insert(0, siblingIndex((Element) iterator) + 1);\n            sb.insert(0, \"[\");\n            sb.insert(0, ((Element) iterator).getTagName());\n            sb.insert(0, \"/\");\n\n            iterator = iterator.getParentNode();\n        }\n\n        return sb.toString();\n    }", "public void writeTo ( Writer writer , String encoding ) { if ( LOGGER . isLoggable ( Level . FINE ) ) { LOGGER . fine ( STR_ + STR_ + encoding ) ; } ByteBuffer bBuff = baos . getByteBuffer ( ) ; CharsetDecoder decoder = Charset . forName ( encoding ) . newDecoder ( ) ; try { CharBuffer cBuff = decoder . decode ( bBuff ) ; writer . write ( cBuff . array ( ) ) ; } catch ( CharacterCodingException cce ) { throw new FacesException ( cce ) ; } catch ( IOException ioe ) { throw new FacesException ( ioe ) ; } }", "Item newMethodItem ( final String owner , final String name , final String desc , final boolean itf ) { int type = itf ? IMETH : METH ; key3 . set ( type , owner , name , desc ) ; Item result = get ( key3 ) ; if ( result == null ) { put122 ( type , newClass ( owner ) , newNameType ( name , desc ) ) ; result = new Item ( index ++ , key3 ) ; put ( result ) ; } return result ; }", "    public DriverDigitalInput (final int inputNo) {\n        this(getDefaultIo(), inputNo);\n    } // DriverDigitalInput()\n", "public Iterable<DContact> queryByFirstName(Object parent, java.lang.String firstName) {\n    return queryByField(parent, DContactMapper.Field.FIRSTNAME.getFieldName(), firstName);\n  }", "  public boolean setEnabled(boolean setTo) {\n    boolean holder = isEnabled;\n    if(destination == NULL_WRITER)\n      isEnabled = false;\n    else\n      isEnabled = setTo;\n    return holder;\n  }\n", "public double nextDouble(double alpha,double beta){\n  double a=alpha;\n  double b=beta;\n  if (a > 1.0) {\n    if (b > 1.0)     return (b1prs(a,b,randomGenerator));\n    if (b < 1.0)     return (1.0 - b01(b,a,randomGenerator));\n    if (b == 1.0) {\n      return (Math.exp(Math.log(randomGenerator.raw()) / a));\n    }\n  }\n  if (a < 1.0) {\n    if (b > 1.0)     return (b01(a,b,randomGenerator));\n    if (b < 1.0)     return (b00(a,b,randomGenerator));\n    if (b == 1.0) {\n      return (Math.exp(Math.log(randomGenerator.raw()) / a));\n    }\n  }\n  if (a == 1.0) {\n    if (b != 1.0)     return (1.0 - Math.exp(Math.log(randomGenerator.raw()) / b));\n    if (b == 1.0)     return (randomGenerator.raw());\n  }\n  return 0.0;\n}\n", "protected String readUTF()\n        throws IOException\n    {\n        int len = (is.read() << 8) + is.read();\n\n        StringBuffer sb = new StringBuffer();\n\n        while (len > 0) {\n            int d1 = is.read();\n\n            if (d1 < 0)\n                return sb.toString();\n            else if (d1 < 0x80) {\n                len--;\n                sb.append((char) d1);\n            }\n            else if ((d1 & 0xe0) == 0xc0) {\n                len -= 2;\n                sb.append(((d1 & 0x1f) << 6) + (is.read() & 0x3f));\n            }\n            else if ((d1 & 0xf0) == 0xe0) {\n                len -= 3;\n                sb.append(((d1 & 0x0f) << 12) +\n                    ((is.read() & 0x3f) << 6) +\n                    (is.read() & 0x3f));\n            }\n            else\n                throw new IOException(\"utf-8 encoding error\");\n        }\n\n        return sb.toString();\n    }", "CipherSuiteList getActiveCipherSuites() {\n        if (activeCipherSuites == null) {\n            if (activeProtocols == null) {\n                activeProtocols = getActiveProtocols();\n            }\n\n            ArrayList<CipherSuite> suites = new ArrayList<>();\n            if (!(activeProtocols.collection().isEmpty()) &&\n                    activeProtocols.min.v != ProtocolVersion.NONE.v) {\n                for (CipherSuite suite : enabledCipherSuites.collection()) {\n                    if (suite.obsoleted > activeProtocols.min.v &&\n                            suite.supported <= activeProtocols.max.v) {\n                        if (algorithmConstraints.permits(\n                                EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),\n                                suite.name, null)) {\n                            suites.add(suite);\n                        }\n                    } else if (debug != null && Debug.isOn(\"verbose\")) {\n                        if (suite.obsoleted <= activeProtocols.min.v) {\n                            System.out.println(\n                                \"Ignoring obsoleted cipher suite: \" + suite);\n                        } else {\n                            System.out.println(\n                                \"Ignoring unsupported cipher suite: \" + suite);\n                        }\n                    }\n                }\n            }\n            activeCipherSuites = new CipherSuiteList(suites);\n        }\n\n        return activeCipherSuites;\n    }", "public Future < ReplDBMSHeader > watchForProcessedEventId ( String eventId , boolean terminate ) throws InterruptedException { Future < ReplDBMSHeader > watch = progressTracker . watchForProcessedEventId ( eventId , terminate ) ; notifyThreads ( ) ; return watch ; }", "public void addToSpriteGroup ( BaseSub sprite ) { l_sprite_group . add ( sprite ) ; }", "\tprivate WizardTabbedPane getTabbedPane() {\n\t\tif (tabbedPane == null) {\n\t\t\ttabbedPane = new WizardTabbedPane(this);\n\t\t\ttabbedPane.insertTab(\"View Options\", null, getViewOptionsTab(), null, 0);\n\t\t\ttabbedPane.setMnemonicAt(0, KeyEvent.VK_V);\n\t\t\ttabbedPane.setDisplayedMnemonicIndexAt(0, 0);\n\t\t\ttabbedPane.insertTab(\"Development Options\", null, getDevelopmentOptionsTab(), null, 1);\n\t\t\ttabbedPane.setMnemonicAt(1, KeyEvent.VK_D);\n\t\t\ttabbedPane.setDisplayedMnemonicIndexAt(1, 0);\n\t\t}\n\t\treturn tabbedPane;\n\t}\n", "    private void handlePolicyOriginChange() {\n        PolicyOriginSelectionType type = selector.getPolicySelectorOriginType();\n\n        if (type != currentOriginSelection) {\n\n            // The selection has changed so process it.\n            currentOriginSelection = type;\n\n            if (PolicyOriginSelectionType.OVERRIDE == type) {\n                handleOverrideSelection();\n            } else if (PolicyOriginSelectionType.FALLBACK == type) {\n                handleFallbackSelection();\n            } else if (PolicyOriginSelectionType.RESTORE == type) {\n                handleRestoreSelection();\n            }\n        }\n    }\n", "    public void invalidate() {\n\tvalid = false;\n        stateDelegate.markDirty();\n    }\n", "void invite ( ) { if ( mGrid . getCheckedItemCount ( ) <= NUM_ ) { return ; } List < String > to = null ; int [ ] keys = SparseArrays . trueKeys ( mGrid . getCheckedItemPositions ( ) ) ; for ( int pos : keys ) { EasyCursor c = ( EasyCursor ) mGrid . getIt", "private static void addCommentLines ( final ZyLabelContent content , final List < IComment > comments , final Color color , final Object object ) { Preconditions . checkNotNull ( content , STR_ ) ; Preconditions . checkNotNull ( comments , STR_ ) ; Precon", "private void append(StringBuffer result, CharacterIterator iterator) {\n        if (iterator.first() != CharacterIterator.DONE) {\n            char aChar;\n\n            result.append(iterator.first());\n            while ((aChar = iterator.next()) != CharacterIterator.DONE) {\n                result.append(aChar);\n            }\n        }\n    }", "public FrontierQuery buildFrontierQuery(BytesRefHash collectorTerms,Integer frontierSize){\n  if (collectorTerms == null || collectorTerms.size() == 0) {\n    return null;\n  }\n else {\n    Query q=null;\n    if (useAutn) {\n      Automaton autn=buildAutomaton(collectorTerms);\n      AutomatonQuery autnQuery=new AutomatonQuery(new Term(fromField),autn);\n      q=autnQuery;\n    }\n else {\n      List<BytesRef> termList=new ArrayList<>(collectorTerms.size());\n      for (int i=0; i < collectorTerms.size(); i++) {\n        BytesRef ref=new BytesRef();\n        collectorTerms.get(i,ref);\n        termList.add(ref);\n      }\n      q=new TermsQuery(fromField,termList);\n    }\n    if (traversalFilter != null) {\n      BooleanQuery.Builder builder=new BooleanQuery.Builder();\n      builder.add(q,Occur.MUST);\n      builder.add(traversalFilter,Occur.MUST);\n      q=builder.build();\n    }\n    FrontierQuery frontier=new FrontierQuery(q,frontierSize);\n    return frontier;\n  }\n}\n", "public void unregisterForRoleChanges ( Consumer < RoleChangeEvent > listener ) { listeners . remove ( listener ) ; }", "public long send ( Object data ) { long seq = NumberSequencer . getNextSequence ( ) ; Notification note = new Notification ( this . getEvent ( ) , this , seq , System . currentTimeMillis ( ) , STR_ + this . getEvent ( ) ) ; note . setUserData ( data ) ; s", "\tprivate void addDOMPath(final String name, final String latestRevision, final String binaryStatus) {\n\t\tcurrentPath = document.createElement(CacheConfiguration.PATH);\n\t\tcurrentPath.setAttribute(CacheConfiguration.NAME, name);\n\t\tcurrentPath.setAttribute(CacheConfiguration.LATEST_REVISION, latestRevision);\n\t\tcurrentPath.setAttribute(CacheConfiguration.BINARY_STATUS, binaryStatus);\n\t\tcache.appendChild(currentPath);\n\t}\n", "public List<String> getChildren(String path, boolean watch)\n            throws KeeperException, InterruptedException {\n        return getChildren(path, watch ? watchManager.defaultWatcher : null);\n    }", "public boolean shouldSelectCell(EventObject e){\n  log.finest(m_mField.getColumnName());\n  return true;\n}\n", "public void removeX509Certificate(X509CertificateEntity x509Certificate){\n  x509Certificates.remove(x509Certificate);\n}\n", "boolean hasOuterCorner ( ) { return getOuterCornerRadius ( ) > NUM_ && ! FloatUtil . floatsEqual ( NUM_ , getOuterCornerRadius ( ) ) ; }", "private T pollInternal(boolean peek) {\n        this.writeLock.lock();\n        try {\n            // Re-check size within the write lock\n            if (this.size == 0) {\n                return null;\n            }\n\n            final K key;\n            if (this.peekedKey != null) {\n                // If there is a peeked key use it\n                key = this.peekedKey;\n                if (!peek) {\n                    // If not a peek consume the peekedKey\n                    this.peekedKey = null;\n                }\n            } else {\n                // Get the next element key\n                key = this.getNextElementKey();\n                if (peek) {\n                    // If a peek store the key\n                    this.peekedKey = key;\n                }\n            }\n\n            // Get the associated Queue and sanitity check the value from getNextElementKey()\n            final Queue<T> queue = this.keyedQueues.get(key);\n            if (queue == null || queue.isEmpty()) {\n                throw new IllegalStateException(\n                        \"getNextElementKey returned key='\"\n                                + key\n                                + \"' but there are no elements available for the key. This violates the contract specified for getNextElementKey\");\n            }\n\n            if (peek) {\n                // If a peek just return a peek from the queue\n                return queue.peek();\n            }\n\n            // Not a peek, decrement the size and poll the queue\n            this.size--;\n            this.notFull.signal();\n            return queue.poll();\n        } finally {\n            this.writeLock.unlock();\n        }\n    }", "private static Vector < MappingPair > cloneMappingPairVector ( Vector < MappingPair > vec ) { Vector < MappingPair > result = new Vector < OldDecomposeProofHandler . MappingPair > ( ) ; for ( int i = NUM_ ; i < vec . size ( ) ; i ++ ) { result . add ( vec", "public static void ensureDirectory(String... filePaths){\n  if (filePaths != null) {\n    File file;\n    for (    String filePath : filePaths) {\n      file=new File(filePath);\n      if (file.exists() && !file.isDirectory()) {\n        throw new IllegalArgumentException(\"Given path is not a directory: \" + file.getAbsolutePath());\n      }\n else       if (!file.exists()) {\n        if (!file.mkdirs()) {\n          throw new IllegalStateException(\"Could not create directory: \" + file.getAbsolutePath());\n        }\n      }\n    }\n  }\n}\n", "    public TickUnit getCeilingTickUnit(TickUnit unit) {\n\n        int index = Collections.binarySearch(this.tickUnits, unit);\n        if (index >= 0) {\n            return (TickUnit) this.tickUnits.get(index);\n        }\n        else {\n            index = -(index + 1);\n            return (TickUnit) this.tickUnits.get(Math.min(index,\n                    this.tickUnits.size() - 1));\n        }\n\n    }\n", "public void redo() {\n\tundo(false);\n}\n", "public void marshall(TrustedAdvisorCheckDescription trustedAdvisorCheckDescription, ProtocolMarshaller protocolMarshaller) {\n\n        if (trustedAdvisorCheckDescription == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(trustedAdvisorCheckDescription.getId(), ID_BINDING);\n            protocolMarshaller.marshall(trustedAdvisorCheckDescription.getName(), NAME_BINDING);\n            protocolMarshaller.marshall(trustedAdvisorCheckDescription.getDescription(), DESCRIPTION_BINDING);\n            protocolMarshaller.marshall(trustedAdvisorCheckDescription.getCategory(), CATEGORY_BINDING);\n            protocolMarshaller.marshall(trustedAdvisorCheckDescription.getMetadata(), METADATA_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public static CacheHeader readHeader ( InputStream is ) throws IOException { CacheHeader entry = new CacheHeader ( ) ; int magic = readInt ( is ) ; if ( magic != CACHE_MAGIC ) { throw new IOException ( ) ; } entry . key = readString ( is ) ; entry . etag ", "private static Cycles _invoke(CycleFinder finder, IAtomContainer container, int length) {\n        try {\n            return finder.find(container, length);\n        } catch (Intractable e) {\n            throw new RuntimeException(\"Cycle computation should not be intractable: \", e);\n        }\n    }", "public AppletServer(String port) throws IOException, NotFoundException, CannotCompileException {\n  this(Integer.parseInt(port));\n}\n", "public FessMessages addSuccessCreateCrawlingConfigAtWizard(String property, String arg0) {\n        assertPropertyNotNull(property);\n        add(property, new UserMessage(SUCCESS_create_crawling_config_at_wizard, arg0));\n        return this;\n    }", "private void buildUI() {\n\t\t// build the configuration options UI.\n\t\tWFieldLayout layout = new WFieldLayout(WFieldLayout.LAYOUT_STACKED);\n\t\tlayout.setMargin(new Margin(null, null, Size.LARGE, null));\n\t\tadd(layout);\n\t\tlayout.addField(\"Autoplay\", cbAutoPlay);\n\t\tlayout.addField(\"Loop\", cbLoop);\n\t\tlayout.addField(\"Disable\", cbDisable);\n\t\tlayout.addField(\"Show only play/pause\", cbControls);\n\t\tlayout.addField((WLabel) null, btnApply);\n\n\t\t// enable disable option only when control PLAY_PAUSE is used.\n\t\tWSubordinateControl control = new WSubordinateControl();\n\t\tadd(control);\n\t\tRule rule = new Rule();\n\t\trule.setCondition(new Equal(cbControls, Boolean.TRUE.toString()));\n\t\trule.addActionOnTrue(new Enable(cbDisable));\n\t\trule.addActionOnFalse(new Disable(cbDisable));\n\t\tcontrol.addRule(rule);\n\n\t\t// allow config to change without reloading the whole page.\n\t\tadd(new WAjaxControl(btnApply, audio));\n\n\t\t// add the audio to the UI\n\t\tadd(audio);\n\t}", "private static < T > void addUnmentionedPlugins ( final IPluginRegistry < com . google . security . zynamics . binnavi . api2 . plugins . IPlugin < T > > registry , final DefaultListModel < PluginItem < T > > model , final List < com . google . security .", "public void dragOver(DropTargetDragEvent e){\n  Point pt=e.getLocation();\n  if (pt.equals(_ptLast)) {\n    return;\n  }\n  int nDeltaLeftRight=pt.x - _ptLast.x;\n  if (((_nLeftRight > 0) && (nDeltaLeftRight < 0)) || ((_nLeftRight < 0) && (nDeltaLeftRight > 0))) {\n    _nLeftRight=0;\n  }\n  _nLeftRight+=nDeltaLeftRight;\n  _ptLast=pt;\n  Graphics2D g2=(Graphics2D)getGraphics();\n  if (!DragSource.isDragImageSupported()) {\n    paintImmediately(_raGhost.getBounds());\n    _raGhost.setRect(pt.x - m_ptOffset.x,pt.y - m_ptOffset.y,m_imgGhost.getWidth(),m_imgGhost.getHeight());\n    g2.drawImage(m_imgGhost,AffineTransform.getTranslateInstance(_raGhost.getX(),_raGhost.getY()),null);\n  }\n else {\n    paintImmediately(_raCueLine.getBounds());\n  }\n  TreePath path=getClosestPathForLocation(pt.x,pt.y);\n  if (!(path == _pathLast)) {\n    _nLeftRight=0;\n    _pathLast=path;\n    _timerHover.restart();\n  }\n  Rectangle raPath=getPathBounds(path);\n  _raCueLine.setRect(0,raPath.y + (int)raPath.getHeight(),getWidth(),2);\n  g2.setColor(_colorCueLine);\n  g2.fill(_raCueLine);\n  if (_nLeftRight > 20) {\n    g2.drawImage(_imgRight,AffineTransform.getTranslateInstance(pt.x - m_ptOffset.x,pt.y - m_ptOffset.y),null);\n    _nShift=+1;\n  }\n else   if (_nLeftRight < -20) {\n    g2.drawImage(_imgLeft,AffineTransform.getTranslateInstance(pt.x - m_ptOffset.x,pt.y - m_ptOffset.y),null);\n    _nShift=-1;\n  }\n else {\n    _nShift=0;\n  }\n  _raGhost=_raGhost.createUnion(_raCueLine);\n  if (path.equals(m_selectedTreePath)) {\n    e.rejectDrag();\n  }\n else {\n    e.acceptDrag(e.getDropAction());\n  }\n}\n", "public static FlickrPhoto matchURL(String url,String text){\n  Matcher m=GROUPING_PATTERN.matcher(url);\n  if (m.matches()) {\n    return new FlickrPhoto(m.group(1),null,m.group(2),m.group(3),text);\n  }\n  m=URL_PATTERN.matcher(url);\n  if (m.matches()) {\n    return new FlickrPhoto(m.group(1),m.group(2),null,null,text);\n  }\n else {\n    return null;\n  }\n}\n", "    public DateItem getDateItem(DateType type, long value) {\n        if (type == DateType.MS) {\n            chosen.type = type;\n            chosen.value = value;\n            chosen.label = df.format(new Date(value));\n            return chosen;\n        }\n        for (int i = 0; i < getItemCount(); i++) {\n            DateItem item = (DateItem)getItemAt(i);\n            if (item.type == type && item.value == value) {\n                return item;\n            }\n        }\n        return null;\n    }\n", "public XmlParser ( Context context , String changeLogFileResourceUrl ) { super ( context ) ; this . mChangeLogFileResourceUrl = changeLogFileResourceUrl ; }", "static public void copyFile ( String fileName , String destFileName ) throws IOException , FileNotFoundException { int ch ; BufferedOutputStream bos ; BufferedInputStream bis ; bis = new BufferedInputStream ( new FileInputStream ( fileName ) ) ; bos = new BufferedOutputStream ( new FileOutputStream ( destFileName ) ) ; while ( ( ch = bis . read ( ) ) != - NUM_ ) bos . write ( ch ) ; bos . flush ( ) ; bos . close ( ) ; bis . close ( ) ; }", "public static void createIndex(Connection conn,String schema,String table,String columnList) throws SQLException {\n  init(conn);\n  PreparedStatement prep=conn.prepareStatement(\"INSERT INTO \" + SCHEMA + \".INDEXES(SCHEMA, TABLE, COLUMNS) VALUES(?, ?, ?)\");\n  prep.setString(1,schema);\n  prep.setString(2,table);\n  prep.setString(3,columnList);\n  prep.execute();\n  createTrigger(conn,schema,table);\n  indexExistingRows(conn,schema,table);\n}\n", "static Map trustedProviderSetToProtocolMap(Set providerSet,String realm){\n  if ((providerSet == null) || providerSet.isEmpty()) {\n    return Collections.EMPTY_MAP;\n  }\n  Map map=new HashMap();\n  Set wsfedSet=new HashSet();\n  Set saml2Set=new HashSet();\n  Set idffSet=new HashSet();\n  Iterator it=providerSet.iterator();\n  while (it.hasNext()) {\n    String val=(String)it.next();\n    if (debug.messageEnabled()) {\n      debug.message(\"COTUtils.setToPrototolMap: check \" + val);\n    }\n    if (val.endsWith(SAML2_DELIM)) {\n      saml2Set.add(val.substring(0,val.length() - SAML2_DELIM.length()));\n    }\n else     if (val.endsWith(IDFF_DELIM)) {\n      idffSet.add(val.substring(0,val.length() - IDFF_DELIM.length()));\n    }\n else     if (val.endsWith(WSFED_DELIM)) {\n      wsfedSet.add(val.substring(0,val.length() - WSFED_DELIM.length()));\n    }\n else {\n      Set protocolSet=findProtocolsForEntity(val,realm);\n      if ((protocolSet != null) && !protocolSet.isEmpty()) {\n        Iterator pIt=protocolSet.iterator();\n        while (pIt.hasNext()) {\n          String proto=(String)pIt.next();\n          if (proto.equals(COTConstants.SAML2)) {\n            saml2Set.add(val);\n          }\n else           if (proto.equals(COTConstants.IDFF)) {\n            idffSet.add(val);\n          }\n else           if (proto.equals(COTConstants.WS_FED)) {\n            wsfedSet.add(val);\n          }\n        }\n      }\n    }\n  }\n  map.put(COTConstants.SAML2,saml2Set);\n  map.put(COTConstants.IDFF,idffSet);\n  map.put(COTConstants.WS_FED,wsfedSet);\n  if (debug.messageEnabled()) {\n    debug.message(\"COTUtils.setToProtocolMap: return \" + map);\n  }\n  return map;\n}\n", "private boolean isDragOk ( final java . io . PrintStream out , final java . awt . dnd . DropTargetDragEvent evt ) { boolean ok = BOOL_ ; java . awt . datatransfer . DataFlavor [ ] flavors = evt . getCurrentDataFlavors ( ) ; int i = NUM_ ; while ( ! ok && ", "    public void addQuery(Query query) {\n        lQueryQueue.addLast(query);\n    }\n", "@Nonnull public BugInstance addClassAndMethod(MethodAnnotation methodAnnotation){\n  addClass(methodAnnotation.getClassName());\n  addMethod(methodAnnotation);\n  return this;\n}\n", "public static Type instance ( ) { return theInstance ; }", "public void setValue(String v) {\n    if (Lemma_Type.featOkTst && ((Lemma_Type)jcasType).casFeat_value == null)\n      jcasType.jcas.throwFeatMissing(\"value\", \"de.julielab.jules.types.Lemma\");\n    jcasType.ll_cas.ll_setStringValue(addr, ((Lemma_Type)jcasTyp", "public synchronized boolean isQuoted ( ) { return quoted ; }", "public void testInputSkipWithBuffering ( ) throws Exception { int size = NUM_ ; File f = this . initFile ( STR_ ) ; writeAscendingIntFile ( f , size ) ; int jumps = size / NUM_ ; int jumpSize = size / jumps ; int jumpOffset = jumpSize * NUM_ ; int bsize =", "\tpublic void clear(){\n\t\twhereExpressions = null;\n\t\torders = null;\n\t\tcontext = null;\n\t}\n", "public DeploymentExtendedInner createOrUpdate(String resourceGroupName, String deploymentName, DeploymentProperties properties) {\n        return createOrUpdateWithServiceResponseAsync(resourceGroupName, deploymentName, properties).toBlocking().last().body();\n    }", "public void fireComparisonPerformed(Comparison comparison,\n                                        ComparisonResult outcome) {\n        fire(comparison, outcome, compListeners);\n        if (outcome == ComparisonResult.EQUAL) {\n            fire(comparison, outcome, matchListeners);\n        } else {\n            fire(comparison, outcome, diffListeners);\n        }\n    }", "   protected void tearDown() {\n      _httpServer.close();\n   }\n", "public void onBorrow ( K key , R resource ) { }", "void swap ( int a , int b ) ;", "public void undoableEditHappened(UndoableEditEvent e) {\n\t\tdocument.getGraphUndoManager().addEdit(e.getEdit());\n\t\t// Update state of undo and redo buttons to reflect whether or not\n\t\t// there are actions in the history to undo/redo\n\t\tdocument.getGraphpad(", "public void afterOperationsBatchSynchronization ( OperationsBatchData batchData ) { }", "protected void print(long v) throws IOException {\n  print(String.valueOf(v));\n}\n", "  public double get_expectedReturnRate() throws DemoException {\n    if( this.expectedReturnRate == Double.NaN )\n      throw new DemoException(\"Variable expectedReturnRate is undefined!\");\n    return(this.expectedReturnRate);\n  }\n", "    public void characters ( char ch[], int start, int length ) throws SAXException {\n        _characters.append( ch, start, length );\n    }\n", "protected void addClassNamePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(new ItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_MessageRe", "    public void setRowCount(int rows) {\n        if (totalRows != rows) {\n            totalRows = rows;\n            repaint();\n        }\n    }\n", "public static int uninstallSilent ( Context context , String packageName ) { return uninstallSilent ( context , packageName , BOOL_ ) ; }", "    public Object clone() {\n        if (this.getClass() != ConcurrentSkipListSet.class) {\n            // can't change m, since it is final\n            throw new UnsupportedOperationException(\"Can't clone subclasses\");\n        }\n        return new ConcurrentSkipListSet(new ConcurrentSkipListMap(this.m));\n    }\n", "public void discardUndo(){\n  for (  Undoable undoable : mUndoActions) {\n    undoable.discard();\n  }\n  mUndoActions.clear();\n  mUndoPopup.dismiss();\n}\n", "    public void removeConnectionEventListener(ConnectionEventListener listener) {\n        listeners.remove(listener);\n    }\n", "private List<AttributeMetaData> seperateSpecialAttributeMetaData(ExampleSetMetaData metaData){\n  ArrayList<AttributeMetaData> specialStuff=new ArrayList<AttributeMetaData>();\n  for (  AttributeMetaData att : metaData.getAllAttributes()) {\n    if (att.isSpecial()) {\n      specialStuff.add(att);\n    }\n  }\n  return specialStuff;\n}\n", "  final public void module_stmt() throws ParseException, UnplacedBlockException {\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case INST:\n    case INSTANCE:\n      inst();\n      break;\n    case NET:\n      net();\n      break;\n    default:\n      jj_la1[10] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n  }\n", "  protected JButton createPreviousPageButton() {\n    JButton tJButton  = createToolBarButton(\"V221ArrowLeft.png\", \"Previous Page (Cursor up or Ctrl K)\");\n    tJButton.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {mOpenPCLViewer.actionPreviousPage();}\n    });\n    return tJButton;\n  }\n", "public void apply(GL2 gl) {\n    // 3D projection\n    gl.glMatrixMode(GL2.GL_PROJECTION);\n    gl.glLoadIdentity();\n    // Perspective.\n    glu.gluPerspective(35, ratio, 1, 1000);\n    glu.gluLookAt(distance * sinZ, distance * -cosZ, height, // pos\n        0, 0, .5, // center\n        0, 0, 1 // up\n    );\n    // Change back to model view matrix.\n    gl.glMatrixMode(GL2.GL_MODELVIEW);\n    gl.glLoadIdentity();\n\n    // Store the matrixes for reference.\n    gl.glGetIntegerv(GL.GL_VIEWPORT, viewp, 0);\n    gl.glGetDoublev(GLMatrixFunc.GL_MODELVIEW_MATRIX, modelview, 0);\n    gl.glGetDoublev(GLMatrixFunc.GL_PROJECTION_MATRIX, projection, 0);\n  }", "public static String convertBytesToHex ( byte [ ] value ) { return convertBytesToHex ( value , value . length ) ; }", "public static String generateRandomString(){\n  final String characters=\"abcdefghijklmnopqrstuvwxyz123456789\";\n  final int length=generateRandomNumber();\n  final char[] text=new char[length];\n  for (int i=0; i < length; i++) {\n    text[i]=characters.charAt(random.nextInt(characters.length()));\n  }\n  return new String(text);\n}\n", "private void updateFolderNode(\n            String nodeId,\n            IUserLayoutFolderDescription newFolderDesc,\n            IUserLayoutFolderDescription oldFolderDesc)\n            throws PortalException {\n        Element ilfNode = (Element) getUserLayoutDOM().getElementById(nodeId);\n        List<ILayoutProcessingAction> pendingActions = new ArrayList<ILayoutProcessingAction>();\n\n        /*\n         * see what structure attributes changed if any and see if allowed.\n         *\n         * CHANNEL ATTRIBUTES that currently can be EDITED in DLM are:\n         * name - in both fragments and regular layouts\n         * dlm:moveAllowed - only on fragments\n         * dlm:editAllowed - only on fragments\n         * dlm:deleteAllowed - only on fragments\n         * dlm:addChildAllowed - only on fragments\n         */\n\n        // ATT: DLM Restrictions\n        if (isFragmentOwner\n                && (newFolderDesc.isDeleteAllowed() != oldFolderDesc.isDeleteAllowed()\n                        || newFolderDesc.isEditAllowed() != oldFolderDesc.isEditAllowed()\n                        || newFolderDesc.isAddChildAllowed() != oldFolderDesc.isAddChildAllowed()\n                        || newFolderDesc.isMoveAllowed() != oldFolderDesc.isMoveAllowed())) {\n            pendingActions.add(\n                    new LPAEditRestriction(\n                            owner,\n                            ilfNode,\n                            newFolderDesc.isMoveAllowed(),\n                            newFolderDesc.isDeleteAllowed(),\n                            newFolderDesc.isEditAllowed(),\n                            newFolderDesc.isAddChildAllowed()));\n        }\n\n        // ATT: Name\n        updateNodeAttribute(\n                ilfNode,\n                nodeId,\n                Constants.ATT_NAME,\n                newFolderDesc.getName(),\n                oldFolderDesc.getName(),\n                pendingActions);\n\n        /*\n         * if we make it to this point then all edits made are allowed so\n         * process the actions to push the edits into the layout\n         */\n        for (Iterator itr = pendingActions.iterator(); itr.hasNext(); ) {\n            ILayoutProcessingAction action = (ILayoutProcessingAction) itr.next();\n            action.perform();\n        }\n    }", "public JdbcConnectionDescriptor addDescriptor(String jcdAlias, String jdbcDriver, String jdbcConnectionUrl, String username, String password)\r\n    {\r\n        JdbcConnectionDescriptor jcd   = new JdbcConnectionDescriptor();\r\n        HashMap                  props = utils.parseConnectionUrl(jdbcConnectionUrl);\r\n\r\n        jcd.setJcdAlias(jcdAlias);\r\n        jcd.setProtocol((String)props.get(JdbcMetadataUtils.PROPERTY_PROTOCOL));\r\n        jcd.setSubProtocol((String)props.get(JdbcMetadataUtils.PROPERTY_SUBPROTOCOL));\r\n        jcd.setDbAlias((String)props.get(JdbcMetadataUtils.PROPERTY_DBALIAS));\r\n\r\n        String platform = utils.findPlatformFor(jcd.getSubProtocol(), jdbcDriver);\r\n\r\n        jcd.setDbms(platform);\r\n        jcd.setJdbcLevel(2.0);\r\n        jcd.setDriver(jdbcDriver);\r\n        if (username != null)\r\n        {\r\n           jcd.setUserName(username);\r\n           jcd.setPassWord(password);\r\n        }\r\n        if (\"default\".equals(jcdAlias))\r\n        {\r\n            jcd.setDefaultConnection(true);\r\n            // arminw: MM will search for the default key\r\n            // MetadataManager.getInstance().setDefaultPBKey(jcd.getPBKey());\r\n        }\r\n\r\n        addDescriptor(jcd);\r\n        return jcd;\r\n    }", "public void removeDesignation(Object entity,Class<?> concept) throws RepositoryException {\n  Resource resource=findResource(entity);\n  URI type=of.getNameOf(concept);\n  if (type == null) {\n    throw new ObjectPersistException(\"Concept is anonymous or is not registered: \" + concept.getSimpleName());\n  }\n  types.removeTypeStatement(resource,type);\n  cachedObjects.remove(resource);\n}\n", "\tprotected void log(String message) {\n\t\tCView.LogConsoleMessage(message);\n\t}\n", "    public WOComponent databaseConsoleAction() {\n        WOComponent result=null;\n        if (canPerformActionWithPasswordKey(\"er.extensions.ERXDatabaseConsolePassword\")) {\n                result=pageWithName(\"ERXDatabaseConsole\");\n                session().setObjectForKey(Boolean.TRUE, \"ERXDatabaseConsole.enabled\");\n        }\n        return result;\n    }\n", "\tpublic void resourceChanged(final IResourceChangeEvent event) {\n\t\tif (event.getType() == IResourceChangeEvent.PRE_CLOSE) {\n\t\t\tDisplay.getDefault().asyncExec(new ResourceChangedEventHandler(event));\n\t\t}\n\t}\n", "    public void setTitle(String title) {\n        if (frameImp != null) {\n            if (frameImp instanceof ViewFrame) {\n                ((ViewFrame) frameImp).setTitle(title);\n            }\n            //Comment out for web\n            else if (frameImp instanceof ViewJFrame) {\n                ((ViewJFrame) frameImp).setTitle(title);\n            } else if (frameImp instanceof ViewJInternalFrame) {\n                ((ViewJInternalFrame) frameImp).setTitle(title);\n            }\n            //Comment out for web\n        }\n    }\n", "    public Counters getInfoCounters() throws MailException {\n        SessionFactory hfactory = null;\n\n        try {\n            hfactory = (SessionFactory) ctx.lookup(hibernateSessionFactory);\n\n            String repositoryName = context.getCallerPrincipa", "void addedModule ( Process process , MemoryModule module ) ;", "public void testWriteReadFull ( ) throws Exception { ByteArrayOutputStream out = new ByteArrayOutputStream ( NUM_ ) ; ObjectOutputStream os = new ObjectOutputStream ( out ) ; os . writeObject ( full ) ; ObjectInputStream is = new ObjectInputStream ( new B", "public static UserList createUserList(final String rawJSON) throws TwitterException {\n  try {\n    final JSONObject json=new JSONObject(rawJSON);\n    return userListConstructor.newInstance(json);\n  }\n catch (  final InstantiationException e) {\n    throw new TwitterException(e);\n  }\ncatch (  final IllegalAccessException e) {\n    throw new AssertionError(e);\n  }\ncatch (  final InvocationTargetException e) {\n    throw new TwitterException(e);\n  }\ncatch (  final JSONException e) {\n    throw new TwitterException(e);\n  }\n}\n", "private static Collection<InetSocketAddress> addresses(String ipStr,String regexDelim,String errMsg) throws IgniteSpiException {\n  String[] tokens=ipStr.split(regexDelim);\n  if (tokens.length == 2) {\n    String addrStr=tokens[0];\n    String portStr=tokens[1];\n    if (portStr.contains(\"..\")) {\n      try {\n        int port1=Integer.parseInt(portStr.substring(0,portStr.indexOf(\"..\")));\n        int port2=Integer.parseInt(portStr.substring(portStr.indexOf(\"..\") + 2,portStr.length()));\n        if (port2 < port1 || port1 == port2 || port1 <= 0 || port2 <= 0)         throw new IgniteSpiException(errMsg);\n        Collection<InetSocketAddress> res=new ArrayList<>(port2 - port1);\n        for (int i=port1; i <= port2; i++)         res.add(new InetSocketAddress(addrStr,i));\n        return res;\n      }\n catch (      IllegalArgumentException e) {\n        throw new IgniteSpiException(errMsg,e);\n      }\n    }\n else {\n      try {\n        int port=Integer.parseInt(portStr);\n        return Collections.singleton(new InetSocketAddress(addrStr,port));\n      }\n catch (      IllegalArgumentException e) {\n        throw new IgniteSpiException(errMsg,e);\n      }\n    }\n  }\n else   throw new IgniteSpiException(errMsg);\n}\n", "private void playPrevious ( ) { if ( mediaType == Config . YOUTUBE_MEDIA_TYPE_VIDEO ) { restartVideo ( ) ; return ; } if ( nextWasCalled ) { iterator . previous ( ) ; nextWasCalled = BOOL_ ; } if ( ! iterator . hasPrevious ( ) ) { iterator = youTubeVideos", "public void replaceAll(JTextComponent target,String replacement){\n  SyntaxDocument sDoc=ActionUtils.getSyntaxDocument(target);\n  if (pattern == null || sDoc == null) {\n    return;\n  }\n  Matcher matcher=sDoc.getMatcher(pattern);\n  String newText=matcher.replaceAll(replacement);\n  target.setText(newText);\n}\n", "@Override public void actionPerformed(ActionEvent event){\n  String command=event.getActionCommand();\n  if (command.equals(\"AngleOffsetValue\")) {\n    validateAngleOffset();\n  }\n else   if (command.equals(\"TickUnitValue\")) {\n    validateTickUnit();\n  }\n}\n", "@Nullable public static NetworkParameters fromPmtProtocolID(String pmtProtocolId){\n  if (pmtProtocolId.equals(PAYMENT_PROTOCOL_ID_MAINNET)) {\n    return MainNetParams.get();\n  }\n else   if (pmtProtocolId.equals(PAYMENT_PROTOCOL_ID_TESTNET)) {\n    return TestNet3Params.get();\n  }\n else   if (pmtProtocolId.equals(PAYMENT_PROTOCOL_ID_UNIT_TESTS)) {\n    return UnitTestParams.get();\n  }\n else   if (pmtProtocolId.equals(PAYMENT_PROTOCOL_ID_REGTEST)) {\n    return RegTestParams.get();\n  }\n else   if (pmtProtocolId.equals(PAYMENT_PROTOCOL_ID_ALPHANET)) {\n    return AlphaNetParams.get();\n  }\n else {\n    return null;\n  }\n}\n", "\tpublic void disconnect() {\n\t\tthis.lastError = null;\n\t\t\n\t\ttry {\n\t\t\tthis.DBConnection.close();\n\t\t\tthis.lastError = null;\n\t\t} catch (SQLException err) {\n/** \\page DBD_MSGS RealeyesDBD Messages\n * <hr>\n * <b>Database:  (<i>thread</i>) Error disconnecting from the database: <i>error reason</i></b>\n * \\par Description (ERR):\n *   The connection to the database could not be cleanly shut down.\n * \\par Response:\n *   Troubleshoot the problem based on the error reason.\n */\n/** \\code (end of doxygen message doc) */\n\t\t\tthis.globals.gDBD_util.logMessage(\"Database:  (\" + this.whoAmI + \") Error disconnecting from the database:\\n\" + err);\n\t\t\tthis.lastError = err.getMessage();\n\t\t}\n/** \\endcode */\n\t} /* end disconnect */\n", "@Override public void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.recents);\n  mRecentsView=(Overview)findViewById(R.id.recents_view);\n  mRecentsView.setCallbacks(this);\n  mRecentsView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);\n  IntentFilter filter=new IntentFilter();\n  filter.addAction(Intent.ACTION_SCREEN_OFF);\n  filter.addAction(SearchManager.INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED);\n  try {\n    Utilities.setShadowProperty(\"ambientRatio\",String.valueOf(1.5f));\n  }\n catch (  IllegalAccessException e) {\n    e.printStackTrace();\n  }\ncatch (  InvocationTargetException e) {\n    e.printStackTrace();\n  }\n}\n", "public static Text createText ( Composite parent , int style , int hspan ) { Text t = new Text ( parent , style ) ; t . setFont ( parent . getFont ( ) ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = hspan ; t . setLayoutData ( gd ) ; return t ; }", "public void removeAt(int position){\n  mUsers.remove(position);\n  notifyItemRemoved(position);\n  notifyItemRangeChanged(position,mUsers.size());\n}\n", "public void setEditingState(String state) {\n\t\tif (\"idle\".equalsIgnoreCase(state)) {\n\t\t\tdelegate.setEditingState(GeometryEditState.IDLE);\n\t\t} else if (\"dragging\".equalsIgnoreCase(state)) {\n\t\t\tdelegate.setEditingState(GeometryEditState.DRAGGING);\n\t\t} else if (\"inserting\".equalsIgnoreCase(state)) {\n\t\t\tdelegate.setEditingState(GeometryEditState.INSERTING);\n\t\t}\n\t}", "public void onRetry(int retryNo){\n  Log.d(LOG_TAG,String.format(\"Request retry no. %d\",retryNo));\n}\n", "    public void setFromClauses(HashMap fromElements) throws Exception {\n        fromClause = new StringBuffer();\n        if (fromElements != null) {\n            for (Iterator it = fromElements.keySet()\n                                           .iterator(); it.hasNext();) {\n                String key = (String) it.next();\n                String val = (String) fromElements.get(key);\n                fromClause.append(\" , \");\n                fromClause.append(key);\n                if (val != null) {\n                    fromClause.append(\" in \");\n                    fromClause.append(\" objs.\");\n                    fromClause.append(val);\n                }\n            }\n        }\n        this.initialize();\n    }\n", "public void prepare(){\n  try {\n    if (state == State.INITIALIZING) {\n      if (rUncompressed) {\n        if ((audioRecorder.getState() == AudioRecord.STATE_INITIALIZED) & (filePath != null)) {\n          randomAccessWriter=new RandomAccessFile(filePath,\"rw\");\n          randomAccessWriter.setLength(0);\n          randomAccessWriter.writeBytes(\"RIFF\");\n          randomAccessWriter.writeInt(0);\n          randomAccessWriter.writeBytes(\"WAVE\");\n          randomAccessWriter.writeBytes(\"fmt \");\n          randomAccessWriter.writeInt(Integer.reverseBytes(16));\n          randomAccessWriter.writeShort(Short.reverseBytes((short)1));\n          randomAccessWriter.writeShort(Short.reverseBytes(nChannels));\n          randomAccessWriter.writeInt(Integer.reverseBytes(sRate));\n          randomAccessWriter.writeInt(Integer.reverseBytes(sRate * bSamples * nChannels / 8));\n          randomAccessWriter.writeShort(Short.reverseBytes((short)(nChannels * bSamples / 8)));\n          randomAccessWriter.writeShort(Short.reverseBytes(bSamples));\n          randomAccessWriter.writeBytes(\"data\");\n          randomAccessWriter.writeInt(0);\n          buffer=new byte[framePeriod * bSamples / 8 * nChannels];\n          state=State.READY;\n        }\n else {\n          state=State.ERROR;\n        }\n      }\n else {\n        mediaRecorder.prepare();\n        state=State.READY;\n      }\n    }\n else {\n      release();\n      state=State.ERROR;\n    }\n  }\n catch (  Exception e) {\n    state=State.ERROR;\n  }\n}\n", "public final native JsArrayString mimes ( ) ;", "public static WGLOffScreenSurfaceData createData(WComponentPeer peer,Image image,int type){\n  if (!peer.isAccelCapable() || !SunToolkit.isContainingTopLevelOpaque((Component)peer.getTarget())) {\n    return null;\n  }\n  WGLGraphicsConfig gc=getGC(peer);\n  Rectangle r=peer.getBounds();\n  if (type == FLIP_BACKBUFFER) {\n    return new WGLOffScreenSurfaceData(peer,gc,r.width,r.height,image,peer.getColorModel(),type);\n  }\n else {\n    return new WGLVSyncOffScreenSurfaceData(peer,gc,r.width,r.height,image,peer.getColorModel(),type);\n  }\n}\n", "boolean doResetCheck() {\n    if(documents.isEmpty() || (documents.size() > 1 && noMultiReset)) {\n      return false;\n    }\n    return documents.get(docNum).doresetCheck();\n  }", "void registersChanged ( TargetProcessThread thread ) ;", "@Override public boolean equals(Object that){\n  try {\n    if (that == null) {\n      return false;\n    }\n    RuleBasedBreakIterator other=(RuleBasedBreakIterator)that;\n    if (checksum != other.checksum) {\n      return false;\n    }\n    if (text == null) {\n      return other.text == null;\n    }\n else {\n      return text.equals(other.text);\n    }\n  }\n catch (  ClassCastException e) {\n    return false;\n  }\n}\n", "public void marshall(RemovePermissionRequest removePermissionRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (removePermissionRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(removePermissionRequest.getStatementId(), STATEMENTID_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "private Object readJSON ( ) throws JSONException { switch ( read ( NUM_ ) ) { case zipObject : return readObject ( ) ; case zipArrayString : return readArray ( BOOL_ ) ; case zipArrayValue : return readArray ( BOOL_ ) ; case zipEmptyObject : return new JS", "public static transformpolicy_lbvserver_binding[] get(nitro_service service, String name) throws Exception{\n\t\ttransformpolicy_lbvserver_binding obj = new transformpolicy_lbvserver_binding();\n\t\tobj.set_name(name);\n\t\ttransformpolicy_lbvserver_binding response[] = (transformpolicy_lbvserver_binding[]) obj.get_resources(service);\n\t\treturn response;\n\t}", "    private String getProximity(final String type, final String name) {\n        final StringBuffer sb = new StringBuffer();\n        sb.append(\"node.\").append(type + \".\").append(name + \".\").append(Constants.PROPERTY_RES_PROX_FIELD);\n        return getProje", "private void updateUiByTrackColorMode(String trackColorMode){\n  boolean isFixedValue=trackColorMode.equals(getString(R.string.settings_map_track_color_mode_fixed_value));\n  boolean isDynamicValue=trackColorMode.equals(getString(R.string.settings_map_track_color_mode_dynamic_value));\n  slowPreference.setEnabled(isFixedValue);\n  mediumPreference.setEnabled(isFixedValue);\n  percentagePreference.setEnabled(isDynamicValue);\n}\n", "protected final void refreshLoadingViewsSize(){\n  final int maximumPullScroll=(int)(getMaximumPullScroll() * 1.2f);\n  int pLeft=getPaddingLeft();\n  int pTop=getPaddingTop();\n  int pRight=getPaddingRight();\n  int pBottom=getPaddingBottom();\nswitch (getPullToRefreshScrollDirection()) {\ncase HORIZONTAL:\n    if (mMode.showHeaderLoadingLayout()) {\n      mHeaderLayout.setWidth(maximumPullScroll);\n      pLeft=-maximumPullScroll;\n    }\n else {\n      pLeft=0;\n    }\n  if (mMode.showFooterLoadingLayout()) {\n    mFooterLayout.setWidth(maximumPullScroll);\n    pRight=-maximumPullScroll;\n  }\n else {\n    pRight=0;\n  }\nbreak;\ncase VERTICAL:\nif (mMode.showHeaderLoadingLayout()) {\nmHeaderLayout.setHeight(maximumPullScroll);\npTop=-maximumPullScroll;\n}\n else {\npTop=0;\n}\nif (mMode.showFooterLoadingLayout()) {\nmFooterLayout.setHeight(maximumPullScroll);\npBottom=-maximumPullScroll;\n}\n else {\npBottom=0;\n}\nbreak;\n}\nif (DEBUG) {\nLog.d(LOG_TAG,String.format(\"Setting Padding. L: %d, T: %d, R: %d, B: %d\",pLeft,pTop,pRight,pBottom));\n}\nsetPadding(pLeft,pTop,pRight,pBottom);\n}\n", "private double pdf(double x,int j){\n  int from=Arrays.binarySearch(X,x - h * k.cutOff());\n  int to=Arrays.binarySearch(X,x + h * k.cutOff());\n  from=from < 0 ? -from - 1 : from;\n  to=to < 0 ? -to - 1 : to;\n  if (weights.length == 0 && k instanceof UniformKF)   return (to - from) * 0.5 / (sumOFWeights * h);\n  double sum=0;\n  for (int i=Math.max(0,from); i < Math.min(X.length,to + 1); i++)   if (i != j)   sum+=k.k((x - X[i]) / h) * getWeight(i);\n  return sum / (sumOFWeights * h);\n}\n", "synchronized void saveAll() {\n\n        Iterator it        = new BaseHashIterator();\n        int      savecount = 0;\n\n        for (; it.hasNext(); ) {\n            CachedObject r = (CachedObject) it.next();\n\n            if (r.hasChanged()) {\n                rowTable[savecount++] = r;\n            }\n        }\n\n        saveRows(savecount);\n        Error.printSystemOut(\n            saveAllTimer.elapsedTimeToMessage(\n                \"Cache.saveRow() total row save time\"));\n        Error.printSystemOut(\"Cache.saveRow() total row save count = \"\n                             + saveRowCount);\n        Error.printSystemOut(\n            makeRowTimer.elapsedTimeToMessage(\n                \"Cache.makeRow() total row load time\"));\n        Error.printSystemOut(\"Cache.makeRow() total row load count = \"\n                             + makeRowCount);\n        Error.printSystemOut(\n            sortTimer.elapsedTimeToMessage(\"Cache.sort() total time\"));\n    }", "public Kue processBlocking ( String type , int n , Handler < Job > handler ) { if ( n <= NUM_ ) { throw new IllegalStateException ( STR_ ) ; } while ( n -- > NUM_ ) { processInternal ( type , handler , BOOL_ ) ; } setupTimers ( ) ; return this ; }", "   protected void addComponents() {\n      super.addComponents();\n      add(_setterLabel);\n      JPanel setterPanel = new JPanel();\n      setterPanel.add(_remoteSetterCheckBox);\n      add(setterPanel);\n      add(_getterLabel);\n      JPanel getterPanel = new JPanel();\n      getterPanel.add(_remoteGetterCheckBox);\n      add(getterPanel);\n   }\n", "private void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject ( ) ; if ( policy == null ) { throw new InvalidObjectException ( STR_ ) ; } if ( classpath == null ) { throw new InvalidObjectException (", "public static void index(final Indexer indexer, final ClassLoader cl, final String className) {\n        final InputStream stream = cl.getResourceAsStream(className.replace('.', '/') + \".class\");\n        try {\n            indexer.index(stream);\n        } catch (final IOException ex) {\n            throw new RuntimeException(ex);\n        }\n    }", "private static void doCopyFile(final File srcFile,final File destFile,final boolean preserveFileDate) throws IOException {\n  if (destFile.exists() && destFile.isDirectory()) {\n    throw new IOException(\"Destination '\" + destFile + \"' exists but is a directory\");\n  }\n  FileInputStream fis=null;\n  FileOutputStream fos=null;\n  FileChannel input=null;\n  FileChannel output=null;\n  try {\n    fis=new FileInputStream(srcFile);\n    fos=new FileOutputStream(destFile);\n    input=fis.getChannel();\n    output=fos.getChannel();\n    final long size=input.size();\n    long pos=0;\n    long count=0;\n    while (pos < size) {\n      final long remain=size - pos;\n      count=remain > FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : remain;\n      final long bytesCopied=output.transferFrom(input,pos,count);\n      if (bytesCopied == 0) {\n        break;\n      }\n      pos+=bytesCopied;\n    }\n  }\n  finally {\n    ParseIOUtils.closeQuietly(output);\n    ParseIOUtils.closeQuietly(fos);\n    ParseIOUtils.closeQuietly(input);\n    ParseIOUtils.closeQuietly(fis);\n  }\n  final long srcLen=srcFile.length();\n  final long dstLen=destFile.length();\n  if (srcLen != dstLen) {\n    throw new IOException(\"Failed to copy full contents from '\" + srcFile + \"' to '\"+ destFile+ \"' Expected length: \"+ srcLen+ \" Actual: \"+ dstLen);\n  }\n  if (preserveFileDate) {\n    destFile.setLastModified(srcFile.lastModified());\n  }\n}\n", "public void write ( int b ) throws IOException { Boolean result = ( Boolean ) callback . call ( consoleId . get ( ) . intValue ( ) , String . valueOf ( ( char ) b ) ) ; if ( result ) { out . write ( b ) ; } }", "\tpublic void removePropertyChangeListener(String propertyName, PropertyChangeListener listener) {\n\t\tpcSupport.removePropertyChangeListener(propertyName, listener);\n\t}\n", "public static byte[] hexStringToByteArray2(final String config){\n  final int offset=4;\n  final int len=config.length() / 2;\n  final byte[] ret=new byte[len + 4];\n  for (int i=offset; i < ret.length; i++) {\n    final char first=config.charAt((i - offset) * 2);\n    final char second=config.charAt((i - offset) * 2 + 1);\n    int value=Integer.parseInt(new String(new byte[]{(byte)first}),16) << 4;\n    value+=second;\n    ret[i]=(byte)Integer.parseInt(new String(new byte[]{(byte)second}),16);\n  }\n  final DataBuffer databuffer=new DataBuffer(ret,0,4);\n  databuffer.writeInt(len);\n  return ret;\n}\n", "  public boolean isBlacklisted(String name) {\n    if (name != null) {\n      name = norm(name);\n      if (NON_NAMES.contains(name)) {\n        return true;\n      }\n    }\n    return false;\n  }\n", "    public void stop() {\n\n        if (queueSession != null) {\n            try {\n                queueSession.close();\n            } catch (JMSException jmse) {\n                jmse.printStackTrace();\n            }\n        }\n\n        if (queueConnection != null) {\n            try {\n                queueConnection.stop();\n                queueConnection.close();\n            } catch (JMSException jmse) {\n                jmse.printStackTrace();\n            }\n        }\n    }\n", "\tpublic void execute(){\n\t\tElement start=null;\n\t\tfor(Element e:elements.values()){\n\t\t\tif(Start.class.equals(e.getClass())){\n\t\t\t\tstart=e;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(start!=null){\n\t\t\ttry {\n\t\t\t\tstart.call();\n\t\t\t\tsequential(start.next());\n\t\t\t} catch (Exception e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n", "protected void __startSection(String name) {\n        if (null == name) throw new NullPointerException(\"section name cannot be null\");\n        if (null != tmpOut) throw new IllegalStateException(\"section cannot be nested\");\n        tmpCaller = __caller;\n        __caller = null;\n        tmpOut = __buffer;\n        __buffer = new StringBuilder();\n        section = name;\n    }", "public static base_responses clear(nitro_service client, rnat6 resources[]) throws Exception {\n\t\tbase_responses result = null;\n\t\tif (resources != null && resources.length > 0) {\n\t\t\trnat6 clearresources[] = new rnat6[resources.length];\n\t\t\tfor (int i=0;i<resources.length;i++){\n\t\t\t\tclearresources[i] = new rnat6();\n\t\t\t\tclearresources[i].name = resources[i].name;\n\t\t\t}\n\t\t\tresult = perform_operation_bulk_request(client, clearresources,\"clear\");\n\t\t}\n\t\treturn result;\n\t}", "    private int getNumROIPixels(final RasterDataNode raster, final ROI roi) {\n        final int w = raster.getSceneRasterWidth();\n        final int h = raster.getSceneRasterHeight();\n        int numROIPixels = 0;\n        for (int y = 0; y < h; y++) {\n            for (int x = 0; x < w; x++) {\n                if (roi.contains(x, y)) {\n                    numROIPixels++;\n                }\n            }\n        }\n        return numROIPixels;\n    }\n", "@SuppressWarnings(\"fallthrough\") static void murmurhash3_x64_128(byte[] key,int offset,int len,int seed,LongPair out){\n  long h1=seed & 0x00000000FFFFFFFFL;\n  long h2=seed & 0x00000000FFFFFFFFL;\n  final long c1=0x87c37b91114253d5L;\n  final long c2=0x4cf5ad432745937fL;\n  int roundedEnd=offset + (len & 0xFFFFFFF0);\n  for (int i=offset; i < roundedEnd; i+=16) {\n    long k1=getLongLittleEndian(key,i);\n    long k2=getLongLittleEndian(key,i + 8);\n    k1*=c1;\n    k1=Long.rotateLeft(k1,31);\n    k1*=c2;\n    h1^=k1;\n    h1=Long.rotateLeft(h1,27);\n    h1+=h2;\n    h1=h1 * 5 + 0x52dce729;\n    k2*=c2;\n    k2=Long.rotateLeft(k2,33);\n    k2*=c1;\n    h2^=k2;\n    h2=Long.rotateLeft(h2,31);\n    h2+=h1;\n    h2=h2 * 5 + 0x38495ab5;\n  }\n  long k1=0;\n  long k2=0;\nswitch (len & 15) {\ncase 15:\n    k2=(key[roundedEnd + 14] & 0xffL) << 48;\ncase 14:\n  k2|=(key[roundedEnd + 13] & 0xffL) << 40;\ncase 13:\nk2|=(key[roundedEnd + 12] & 0xffL) << 32;\ncase 12:\nk2|=(key[roundedEnd + 11] & 0xffL) << 24;\ncase 11:\nk2|=(key[roundedEnd + 10] & 0xffL) << 16;\ncase 10:\nk2|=(key[roundedEnd + 9] & 0xffL) << 8;\ncase 9:\nk2|=(key[roundedEnd + 8] & 0xffL);\nk2*=c2;\nk2=Long.rotateLeft(k2,33);\nk2*=c1;\nh2^=k2;\ncase 8:\nk1=((long)key[roundedEnd + 7]) << 56;\ncase 7:\nk1|=(key[roundedEnd + 6] & 0xffL) << 48;\ncase 6:\nk1|=(key[roundedEnd + 5] & 0xffL) << 40;\ncase 5:\nk1|=(key[roundedEnd + 4] & 0xffL) << 32;\ncase 4:\nk1|=(key[roundedEnd + 3] & 0xffL) << 24;\ncase 3:\nk1|=(key[roundedEnd + 2] & 0xffL) << 16;\ncase 2:\nk1|=(key[roundedEnd + 1] & 0xffL) << 8;\ncase 1:\nk1|=(key[roundedEnd] & 0xffL);\nk1*=c1;\nk1=Long.rotateLeft(k1,31);\nk1*=c2;\nh1^=k1;\n}\nh1^=len;\nh2^=len;\nh1+=h2;\nh2+=h1;\nh1=fmix64(h1);\nh2=fmix64(h2);\nh1+=h2;\nh2+=h1;\nout.val1=h1;\nout.val2=h2;\n}\n", "static boolean eq ( Object x , Object y ) { return x == y || x . equals ( y ) ; }", "public String toTagIndicatorKey() {\n        return (tag == null ? EMPTY_STRING : tag) + KEY_DELIMITER + (indicator == null ? EMPTY_STRING : indicator);\n    }", "\tpublic void visitNewArrayExpression(/* @non_null */JNewArrayExpression self) {\n\t\tself.dims().accept(this);\n\t}\n", "public void runAsync(int startSuccessTimeout) throws MojoExecutionException {\n    runMojo\n        .getLog()\n        .info(\"Waiting \" + startSuccessTimeout + \" seconds for the Dev App Server to start.\");\n    try {\n      runMojo\n          .getAppEngineFactory()\n          .devServerRunAsync(startSuccessTimeout)\n          .run(configBuilder.buildRunConfiguration(processServices(), processProjectId()));\n    } catch (AppEngineException ex) {\n      throw new RuntimeException(ex);\n    }\n    runMojo.getLog().info(\"Dev App Server started.\");\n    runMojo.getLog().info(\"Use the 'mvn appengine:stop' command to stop the server.\");\n  }", "public Parser ( ElementStartNode root , ErrorManager err ) { this . current = root . getLinkedNode ( ) ; this . err = err ; }", "public Composer toY(long animDuration,float y,Ease ease){\n  AnimParameter beforeParam=mTweenParameterList.size() > 0 ? mTweenParameterList.get(mTweenParameterList.size() - 1) : mInitialParam;\n  mTweenParameterList.add(new TweenParameter(beforeParam.x,y,beforeParam.alpha,beforeParam.scaleX,beforeParam.scaleY,beforeParam.rotation,animDuration,ease));\n  return this;\n}\n", "public static <T extends Serializable> T deserializeObject( byte[] bytes, Class<T> clazz )\n\tthrows IOException, ClassNotFoundException {\n\n\t\tByteArrayInputStream is = new ByteArrayInputStream( bytes );\n\t\tObjectInputStream deserializer = new ObjectInputStream( is );\n\t\treturn clazz.cast( deserializer.readObject());\n\t}", "public String toUiString(){\n  StringBuilder sb=new StringBuilder();\n  Calendar dateTime=new GregorianCalendar(GMT);\n  long localTime=value;\n  if (tzShift != null) {\n    localTime+=tzShift.longValue() * 60000;\n  }\n  dateTime.setTimeInMillis(localTime);\n  try {\n    appendInt(sb,dateTime.get(Calendar.YEAR),4);\n    sb.append('-');\n    appendInt(sb,dateTime.get(Calendar.MONTH) + 1,2);\n    sb.append('-');\n    appendInt(sb,dateTime.get(Calendar.DAY_OF_MONTH),2);\n    if (!dateOnly) {\n      sb.append(' ');\n      appendInt(sb,dateTime.get(Calendar.HOUR_OF_DAY),2);\n      sb.append(':');\n      appendInt(sb,dateTime.get(Calendar.MINUTE),2);\n    }\n  }\n catch (  ArrayIndexOutOfBoundsException e) {\n    throw new RuntimeException(e);\n  }\n  return sb.toString();\n}\n", "private synchronized void removeLoader(ClassLoader loader){\n  int i;\n  for (i=_loaders.size() - 1; i >= 0; i--) {\n    WeakReference<ClassLoader> ref=_loaders.get(i);\n    ClassLoader refLoader=ref.get();\n    if (refLoader == null)     _loaders.remove(i);\n else     if (refLoader == loader)     _loaders.remove(i);\n  }\n}\n", "public void removeColumnModelByName(String columnName){\n  if (TextUtils.isEmpty(columnName)) {\n    return;\n  }\n  int indexToRemove=-1;\n  for (int i=0; i < columnModels.size(); i++) {\n    ColumnModel columnModel=columnModels.get(i);\n    if (columnName.equalsIgnoreCase(columnModel.getColumnName())) {\n      indexToRemove=i;\n      break;\n    }\n  }\n  if (indexToRemove != -1) {\n    columnModels.remove(indexToRemove);\n  }\n}\n", "public static void trackIdChange(final ODocument document, final Object pojo) {\n        if (document.getIdentity().isNew()) {\n            ORecordInternal.addIdentityChangeListener(document, new OIdentityChangeListener() {\n                @Override\n                public void onBeforeIdentityChange(final ORecord record) {\n                    // not needed\n                }\n\n                @Override\n                public void onAfterIdentityChange(final ORecord record) {\n                    OObjectSerializerHelper.setObjectID(record.getIdentity(), pojo);\n                    OObjectSerializerHelper.setObjectVersion(record.getVersion(), pojo);\n                }\n            });\n        }\n    }", "public HttpRequest headers ( final Map < String , String > headers ) { if ( ! headers . isEmpty ( ) ) for ( Entry < String , String > header : headers . entrySet ( ) ) header ( header ) ; return this ; }", "public boolean deleteFile ( ) { if ( filterInfo == null ) return BOOL_ ; String fileName = getRootDir ( ) + getUrlPath ( filterInfo . paramURL ) ; File f = new File ( fileName ) ; return f . delete ( ) ; }", "    public ArrayList getViewPlugins() {\n        Iterator pluginItr = getViewPluginNames().iterator();\n        ArrayList plugins = new ArrayList();\n        while (pluginItr.hasNext()) {\n            String pluginName = pluginItr.next().toString();\n            ViewPlugin plugin = (ViewPlugin)m_viewPlugins.get(pluginName);\n            plugins.add(plugin);\n        }\n        return plugins;\n    }//}}}\n    \n    //{{{ getViewPlugin()\n", "Boolean queryAsBool ( String name ) ;", "public WebSocket flush ( ) { synchronized ( mStateManager ) { WebSocketState state = mStateManager . getState ( ) ; if ( state != OPEN && state != CLOSING ) { return this ; } } WritingThread wt = mWritingThread ; if ( wt != null ) { wt . queueFlush ( ) ; } return this ; }", "\tpublic Object getImage(Object object) {\n\t\tif (((UMLBClass)object).isFixed())\n\t\t\treturn overlayImage(object, getResourceLocator().getImage(\"full/obj16/Constant\"));\n\t\t//default if none of the above\n\t\telse return overlayImage(object, getResourceLocator().getImage(\"full/obj16/Variable\"));\n\t}\t\t\n", "private void updateTargetCostEstimate ( ) { if ( target != null ) { h = g + AStarStatic . getDistanceBetweenNodes ( this , target ) * NUM_ ; } else { h = NUM_ ; } }", "public void addExposedNodes(Collection<GraphNode> result,Collection<GraphNode> availNodes){\n  for (  GraphNode candidate : availNodes) {\n    if (false == hiddenNodes.containsKey(candidate)) {\n      result.add(candidate);\n    }\n  }\n}\n", "\tpublic void cueCommand(Command cmd) {\n\t\tif (cmd == null)\n\t\t\treturn;\n\t\t\n\t\t\tcmdThread.sendCommand(cmd);\n\t}\n", "private Set collectUniqueResourcesForChanges(final PendingChange[] changes){\n  Check.notNull(changes,\"changes\");\n  final Set uniqueResources=new HashSet();\n  for (int i=0; i < changes.length; i++) {\n    final PendingChange change=changes[i];\n    final String localPath=change.getLocalItem();\n    if (localPath == null || localPath.length() == 0) {\n      continue;\n    }\n    final IResource resource=getAreaResourceForLocalPath(localPath);\n    if (resource != null) {\n      uniqueResources.add(resource);\n    }\n  }\n  return uniqueResources;\n}\n", "@Action(name = \"Clone Virtual Machine\",\n            outputs = {\n                    @Output(Outputs.RETURN_CODE),\n                    @Output(Outputs.RETURN_RESULT),\n                    @Output(Outputs.EXCEPTION)\n            },\n            responses = {\n                    @Response(text = Outputs.SUCCESS, field = Outputs.RETURN_CODE, value = Outputs.RETURN_CODE_SUCCESS,\n                            matchType = MatchType.COMPARE_EQUAL, responseType = ResponseType.RESOLVED),\n                    @Response(text = Outputs.FAILURE, field = Outputs.RETURN_CODE, value = Outputs.RETURN_CODE_FAILURE,\n                            matchType = MatchType.COMPARE_EQUAL, responseType = ResponseType.ERROR, isOnFail = true)\n            })\n    public Map<String, String> cloneVM(@Param(value = HOST, required = true) String host,\n                                       @Param(value = PORT) String port,\n                                       @Param(value = PROTOCOL) String protocol,\n                                       @Param(value = USERNAME, required = true) String username,\n                                       @Param(value = PASSWORD, encrypted = true) String password,\n                                       @Param(value = TRUST_EVERYONE) String trustEveryone,\n                                       @Param(value = CLOSE_SESSION) String closeSession,\n                                       @Param(value = DATA_CENTER_NAME, required = true) String dataCenterName,\n                                       @Param(value = HOSTNAME, required = true) String hostname,\n                                       @Param(value = VM_NAME, required = true) String virtualMachineName,\n                                       @Param(value = CLONE_NAME, required = true) String cloneName,\n                                       @Param(value = FOLDER_NAME) String folderName,\n                                       @Param(value = CLONE_HOST) String cloneHost,\n                                       @Param(value = CLONE_RESOURCE_POOL) String cloneResourcePool,\n                                       @Param(value = CLONE_DATA_STORE) String cloneDataStore,\n                                       @Param(value = THICK_PROVISION) String thickProvision,\n                                       @Param(value = IS_TEMPLATE) String isTemplate,\n                                       @Param(value = CPU_NUM) String cpuNum,\n                                       @Param(value = CORES_PER_SOCKET) String coresPerSocket,\n                                       @Param(value = MEMORY) String memory,\n                                       @Param(value = CLONE_DESCRIPTION) String cloneDescription,\n                                       @Param(value = VMWARE_GLOBAL_SESSION_OBJECT) GlobalSessionObject<Map<String, Connection>> globalSessionObject) {\n\n\n        try {\n            final HttpInputs httpInputs = new HttpInputs.HttpInputsBuilder()\n                    .withHost(host)\n                    .withPort(port)\n                    .withProtocol(protocol)\n                    .withUsername(username)\n                    .withPassword(password)\n                    .withTrustEveryone(defaultIfEmpty(trustEveryone, FALSE))\n                    .withCloseSession(defaultIfEmpty(closeSession, TRUE))\n                    .withGlobalSessionObject(globalSessionObject)\n                    .build();\n\n            final VmInputs vmInputs = new VmInputs.VmInputsBuilder()\n                    .withDataCenterName(dataCenterName)\n                    .withHostname(hostname)\n                    .withVirtualMachineName(virtualMachineName)\n                    .withCloneName(cloneName)\n                    .withFolderName(folderName)\n                    .withCloneHost(cloneHost)\n                    .withCloneResourcePool(cloneResourcePool)\n                    .withCloneDataStore(cloneDataStore)\n                    .withThickProvision(thickProvision)\n                    .withTemplate(isTemplate)\n                    .withIntNumCPUs(cpuNum)\n                    .withCoresPerSocket(coresPerSocket)\n                    .withLongVmMemorySize(memory)\n                    .withDescription(cloneDescription)\n                    .build();\n\n            return new VmService().cloneVM(httpInputs, vmInputs);\n        } catch (Exception ex) {\n            return OutputUtilities.getFailureResultsMap(ex);\n        }\n    }", "\tprotected void fireModelOperationPerformed(int operation, Object element) {\n\t\tif (modelListenerList != null) {\n\t\t\tfor (int i = 0, count = modelListenerList.size(); i < count; i++)\n\t\t\t\t((ModelListener)modelListenerList.elementAt(i)).modelOperationPerformed(operation, this, element);\n\t\t}\n\t}\n", "public static Collection<Component> getComponentsList() {\n    TransactionLogger instance = getInstance();\n    if (instance == null) {\n      return null;\n    }\n\n    return instance.components.values();\n  }", "@Override\n    public void decodeHeader() {\n        try {\n            // we want a moov and an mdat, anything else will throw the invalid file type error\n            MovieBox moov = isoFile.getBoxes(MovieBox.class).get(0);\n            if (log.isDebugEnabled()) {\n                log.debug(\"moov children: {}\", moov.getBoxes().size());\n                MP4Reader.dumpBox(moov);\n            }\n            // get the movie header\n            MovieHeaderBox mvhd = moov.getMovieHeaderBox();\n            // get the timescale and duration\n            timeScale = mvhd.getTimescale();\n            duration = mvhd.getDuration();\n            log.debug(\"Time scale {} Duration {}\", timeScale, duration);\n            double lengthInSeconds = (double) duration / timeScale;\n            log.debug(\"Seconds {}\", lengthInSeconds);\n            // look at the tracks\n            log.debug(\"Tracks: {}\", moov.getTrackCount());\n            List<TrackBox> tracks = moov.getBoxes(TrackBox.class); // trak\n            for (TrackBox trak : tracks) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"trak children: {}\", trak.getBoxes().size());\n                    MP4Reader.dumpBox(trak);\n                }\n                TrackHeaderBox tkhd = trak.getTrackHeaderBox(); // tkhd\n                log.debug(\"Track id: {}\", tkhd.getTrackId());\n                MediaBox mdia = trak.getMediaBox(); // mdia\n                long scale = 0;\n                if (mdia != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(\"mdia children: {}\", mdia.getBoxes().size());\n                        MP4Reader.dumpBox(mdia);\n                    }\n                    MediaHeaderBox mdhd = mdia.getMediaHeaderBox(); // mdhd\n                    if (mdhd != null) {\n                        log.debug(\"Media data header atom found\");\n                        // this will be for either video or audio depending media info\n                        scale = mdhd.getTimescale();\n                        log.debug(\"Time scale {}\", scale);\n                    }\n                    HandlerBox hdlr = mdia.getHandlerBox(); // hdlr\n                    if (hdlr != null) {\n                        String hdlrType = hdlr.getHandlerType();\n                        if (\"soun\".equals(hdlrType)) {\n                            if (scale > 0) {\n                                audioTimeScale = scale * 1.0;\n                                log.debug(\"Audio time scale: {}\", audioTimeScale);\n                            }\n                        } else {\n                            log.debug(\"Unhandled handler type: {}\", hdlrType);\n                        }\n                    }\n                    MediaInformationBox minf = mdia.getMediaInformationBox();\n                    if (minf != null) {\n                        if (log.isDebugEnabled()) {\n                            log.debug(\"minf children: {}\", minf.getBoxes().size());\n                            MP4Reader.dumpBox(minf);\n                        }\n                        AbstractMediaHeaderBox abs = minf.getMediaHeaderBox();\n                        if (abs instanceof SoundMediaHeaderBox) { // smhd\n                            //SoundMediaHeaderBox smhd = (SoundMediaHeaderBox) abs;\n                            log.debug(\"Sound header atom found\");\n                        } else {\n                            log.debug(\"Unhandled media header box: {}\", abs.getType());\n                        }\n                    }\n                }\n                SampleTableBox stbl = trak.getSampleTableBox(); // mdia/minf/stbl\n                if (stbl != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(\"stbl children: {}\", stbl.getBoxes().size());\n                        MP4Reader.dumpBox(stbl);\n                    }\n                    SampleDescriptionBox stsd = stbl.getSampleDescriptionBox(); // stsd\n                    if (stsd != null) {\n                        //stsd: mp4a, avc1, mp4v\n                        //String type = stsd.getType();\n                        if (log.isDebugEnabled()) {\n                            log.debug(\"stsd children: {}\", stsd.getBoxes().size());\n                            MP4Reader.dumpBox(stsd);\n                        }\n                        SampleEntry entry = stsd.getSampleEntry();\n                        log.debug(\"Sample entry type: {}\", entry.getType());\n                        // determine if audio or video and process from there\n                        if (entry instanceof AudioSampleEntry) {\n                            processAudioBox(stbl, (AudioSampleEntry) entry, scale);\n                        }\n                    }\n                }\n            }\n            //real duration\n            StringBuilder sb = new StringBuilder();\n            double videoTime = ((double) duration / (double) timeScale);\n            log.debug(\"Video time: {}\", videoTime);\n            int minutes = (int) (videoTime / 60);\n            if (minutes > 0) {\n                sb.append(minutes);\n                sb.append('.');\n            }\n            //formatter for seconds / millis\n            NumberFormat df = DecimalFormat.getInstance();\n            df.setMaximumFractionDigits(2);\n            sb.append(df.format((videoTime % 60)));\n            formattedDuration = sb.toString();\n            log.debug(\"Time: {}\", formattedDuration);\n\n            List<MediaDataBox> mdats = isoFile.getBoxes(MediaDataBox.class);\n            if (mdats != null && !mdats.isEmpty()) {\n                log.debug(\"mdat count: {}\", mdats.size());\n            }\n        } catch (Exception e) {\n            log.error(\"Exception decoding header / atoms\", e);\n        }\n    }", "@Override\n    protected void doInitialize() throws ComponentInitializationException {\n        log.debug(\"Initialized {}\", this.getClass().getSimpleName());\n        if (getMessageContext() == null) {\n            throw new ComponentInitializationException(\"Message context cannot be null\");\n        }\n        if (getVelocityEngine() == null) {\n            throw new ComponentInitializationException(\"VelocityEngine must be supplied\");\n        }\n        if (getVelocityTemplateId() == null) {\n            throw new ComponentInitializationException(\"Velocity template id must be supplied\");\n        }\n    }", "@NotNull\n  public <T> T getObject(@NotNull final String hash, @NotNull final StreamHandler<T> handler) throws IOException {\n    return doWork(auth -> {\n      final ObjectRes links = doRequest(auth, new MetaGet(), AuthHelper.join(auth.getHref(), PATH_OBJECTS + \"/\" + hash));\n      if (links == null) {\n        throw new FileNotFoundException();\n      }\n      return getObject(new Meta(hash, -1), links, handler);\n    }, Operation.Download);\n  }", "    public boolean isCancelClicked() {\n        return shouldCancel;\n    }\n", "private boolean isDropDown ( ) { return comboBox . isEditable ( ) || hasScrollBars ( ) ; }", "    public void addObject(WidgetEditor obj) {\n        objects.add(obj);\n    }\n", "public synchronized CefClient createClient ( ) { switch ( getState ( ) ) { case NEW : setState ( CefAppState . INITIALIZING ) ; initialize ( ) ; case INITIALIZING : case INITIALIZED : CefClient client = new CefClient ( ) ; clients_ . add ( client ) ; return client ; default : throw new IllegalStateException ( STR_ + state_ ) ; } }", "@Override\n  public int available() throws IOException\n  {\n    if (_readOffset < _readLength) {\n      return _readLength - _readOffset;\n    }\n\n    StreamImpl source = _source;\n\n    if (source != null) {\n      return source.getAvailable();\n    }\n    else {\n      return -1;\n    }\n  }", "  protected void dropClient(String workerID) {\n    ((KSServerWorker)workers.get(workerID)).terminate();\n    removeResource(workerID);\n  }\n", "public static String findJavaExecutableForEclipse() throws CoreException {\n  String javaHomeProp=System.getProperty(\"java.home\");\n  File javaHomeDir=null;\n  if (javaHomeProp != null) {\n    javaHomeDir=new File(javaHomeProp);\n  }\n  if (javaHomeDir == null || !javaHomeDir.exists()) {\n    throw new CoreException(new Status(Status.ERROR,CorePlugin.PLUGIN_ID,\"Cannot read the java.home property - unable detect the JVM that Eclipse is running on.\"));\n  }\n  File javaExecutable=StandardVMType.findJavaExecutable(javaHomeDir);\n  if (javaExecutable == null || !javaExecutable.exists()) {\n    throw new CoreException(new Status(Status.ERROR,CorePlugin.PLUGIN_ID,\"Unable to find a java executable for the JVM that Eclipse is running on (located at \" + javaHomeDir.getAbsolutePath() + \"). Please verify that this JVM is installed properly.\"));\n  }\n  return javaExecutable.getAbsolutePath();\n}\n", "private void convertEdges ( final Collection < INaviEdge > edges , final Graph2D graph2D , final Map < INaviViewNode , Node > rawNodeToNodeMap , final boolean adjustColors ) { for ( final INaviEdge edge : edges ) { final NaviNode sourceNode = m_ynodeToNod", "private static int numericCompaction(int[] codewords,int codeIndex,StringBuilder result) throws FormatException {\n  int count=0;\n  boolean end=false;\n  int[] numericCodewords=new int[MAX_NUMERIC_CODEWORDS];\n  while (codeIndex < codewords[0] && !end) {\n    int code=codewords[codeIndex++];\n    if (codeIndex == codewords[0]) {\n      end=true;\n    }\n    if (code < TEXT_COMPACTION_MODE_LATCH) {\n      numericCodewords[count]=code;\n      count++;\n    }\n else {\n      if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {\n        codeIndex--;\n        end=true;\n      }\n    }\n    if (count % MAX_NUMERIC_CODEWORDS == 0 || code == NUMERIC_COMPACTION_MODE_LATCH || end) {\n      String s=decodeBase900toBase10(numericCodewords,count);\n      result.append(s);\n      count=0;\n    }\n  }\n  return codeIndex;\n}\n", "public RTL2832TunerController ( Device device , DeviceDescriptor deviceDescriptor , ThreadPoolManager threadPoolManager , long minTunableFrequency , long maxTunableFrequency , int centerUnusableBandwidth , double usableBandwidthPercentage ) throws SourceException { super ( minTunableFrequency , maxTunableFrequency , centerUnusableBandwidth , usableBandwidthPercentage ) ; mThreadPoolManager = threadPoolManager ; mDevice = device ; mDeviceDescriptor = deviceDescriptor ; }", "public static void bitmapToMat(Bitmap bmp,Mat mat,boolean unPremultiplyAlpha){\n  if (bmp == null)   throw new java.lang.IllegalArgumentException(\"bmp == null\");\n  if (mat == null)   throw new java.lang.IllegalArgumentException(\"mat == null\");\n  nBitmapToMat2(bmp,mat.nativeObj,unPremultiplyAlpha);\n}\n", "private AbstractInvocation dequeue() {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(this, tc, \"dequeue\");\n\n    AbstractInvocation invocation;\n\n    synchronized (barrier) {\n      invocation = queue.remove(0);\n    }\n\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc, \"dequeue\", invocation);\n    return invocation;\n  }", "void expireInvite(final String name){\n  JComponent button=invites.get(name);\n  if (button != null) {\n    inviteContainer.remove(button);\n    inviteContainer.revalidate();\n  }\n  invites.remove(name);\n}", "    private void logCRUDEntityInformation(Map entities, String status) {\n        Set keySet = entities.keySet();\n        for (Iterator iterator = keySet.iterator(); iterator.hasNext();) {\n            String entityName = (String) iterator.next();\n            StringBuffer buffer = new StringBuffer();\n            buffer.append(\"Entity <\").append(entityName).append(\"> \");\n            buffer.append(status).append(\" \").append(entities.get(entityName)).append(\" times\");\n            getLog().info(buffer.toString());\n        }\n    }\n", "public JdbcConnection prepareQuery(String preparedQueryString,Collection<String> parameters,SingleParameterResultSetConsumer resultConsumer) throws SQLException {\n  return prepareQuery(preparedQueryString,parameters.stream(),resultConsumer);\n}\n", "public void ignoreAttKeys(String[] attKeys,boolean ignorePathKeys){\n  ignoredAttKeys.clear();\n  for (  String key : attKeys)   ignoredAttKeys.add(key);\n  this.ignorePathKeys=ignorePathKeys;\n}\n", "public String mapMethodName ( String owner , String name , String desc ) { return name ; }", "public ListStackInstancesResult withSummaries(StackInstanceSummary... summaries) {\n        if (this.summaries == null) {\n            setSummaries(new com.amazonaws.internal.SdkInternalList<StackInstanceSummary>(summaries.length));\n        }\n        for (StackInstanceSummary ele : summaries) {\n            this.summaries.add(ele);\n        }\n        return this;\n    }", "    public double calculateOutputResidualError(double desiredOutput, int outputIndex) throws Exception{\n        Neuron outputNeuron = this.outputLayer().getNeuron(outputIndex);\n        double derivative = outputNeuron.calculateDerivative();\n        double outputValue = outputNeuron.currentOutput();\n        double residualError = (outputValue - desiredOutput)*derivative;\n        return residualError;\n    }\n", "protected void saveLanguage(String language){\n  fLanguageScope.push(fDepth);\n  fLanguageStack.push(language);\n}\n", "public void doStop ( ) { ( ( ModelEditor ) getEditor ( ) ) . stop ( ) ; }", "public TopologyEntityParserResult parse ( long timestamp ) throws IOException ;", "@Internal\n    public void setBody(T body) {\n        this.body = () -> Optional.ofNullable(body);\n        this.convertedBodies.clear();\n    }", "public static List<double[]> independentHueSat( List<File> images  ) {\n\t\tList<double[]> points = new ArrayList<>();\n\n\t\t// The number of bins is an important parameter.  Try adjusting it\n\t\tTupleDesc_F64 histogramHue = new TupleDesc_F64(30);\n\t\tTupleDesc_F64 histogramValue = new TupleDesc_F64(30);\n\n\t\tList<TupleDesc_F64> histogramList = new ArrayList<>();\n\t\thistogramList.add(histogramHue); histogramList.add(histogramValue);\n\n\t\tPlanar<GrayF32> rgb = new Planar<>(GrayF32.class,1,1,3);\n\t\tPlanar<GrayF32> hsv = new Planar<>(GrayF32.class,1,1,3);\n\n\t\tfor( File f : images ) {\n\t\t\tBufferedImage buffered = UtilImageIO.loadImage(f.getPath());\n\t\t\tif( buffered == null ) throw new RuntimeException(\"Can't load image!\");\n\n\t\t\trgb.reshape(buffered.getWidth(), buffered.getHeight());\n\t\t\thsv.reshape(buffered.getWidth(), buffered.getHeight());\n\t\t\tConvertBufferedImage.convertFrom(buffered, rgb, true);\n\t\t\tColorHsv.rgbToHsv(rgb, hsv);\n\n\t\t\tGHistogramFeatureOps.histogram(hsv.getBand(0), 0, 2*Math.PI,histogramHue);\n\t\t\tGHistogramFeatureOps.histogram(hsv.getBand(1), 0, 1, histogramValue);\n\n\t\t\t// need to combine them into a single descriptor for processing later on\n\t\t\tTupleDesc_F64 imageHist = UtilFeature.combine(histogramList,null);\n\n\t\t\tUtilFeature.normalizeL2(imageHist); // normalize so that image size doesn't matter\n\n\t\t\tpoints.add(imageHist.value);\n\t\t}\n\n\t\treturn points;\n\t}", "    public void addQuotaModificationMapping(Quota quota, String adminName) {\n        this.quotas.add(new QuotaModificationMapping(quota, adminName));\n    }\n", "public boolean validate ( Problems problems , String compName , T model ) ;", "    public InputStream getFile(String filename) throws IOException {\n        for (int i=0; i < paths.length; i++) {\n\t    if (paths[i] != null && paths[i].exists(filename))\n\t\treturn paths[i].getFile(filename);\n\t}\n\tif (fallback != null)\n\t    return fallback.getFile(filename);\n\tthrow new FileNotFoundException(filename);\n    }\n", "protected final Paint createVerticalGradient(Shape s,Color[] colors){\n  Rectangle2D bounds=s.getBounds2D();\n  float xCenter=(float)bounds.getCenterX();\n  float yMin=(float)bounds.getMinY();\n  float yMax=(float)bounds.getMaxY();\n  return createGradient(xCenter,yMin,xCenter,yMax,new float[]{0f,1f},colors);\n}\n", "  public OrderView setInitialMode( int mode ) {\n    initialMode = mode;\n    return this;\n  }\n", "private void setSizeRatio(double size) {\n        double width = widthHeightRatio * size;\n        double height = size / widthHeightRatio;\n        if (width <= size) {\n            setSize(width, size);\n        } else if (height <= size) {\n            setSize(size, height);\n        } else {\n            setSize(size, size);\n        }\n    }", "private static MigrationStatus processServiceCmdArgs(String[] args){\n  String argument;\n  if (args.length != 2) {\n    throw new IllegalArgumentException(\"Wrong arguments\");\n  }\n  argument=args[1];\n  if (!argument.equalsIgnoreCase(RESET_MIFAIL)) {\n    log.error(\"Invalid command:{} for {}\",argument,Command.RESET);\n    throw new IllegalArgumentException(\"Invalid command: \" + argument);\n  }\n  return MigrationStatus.FAILED;\n}\n", "   public void invalidate(){\n      needResize = true;\n      super.invalidate();\n   }\n", "    public void increment(E key) {\n        increment(key,1);\n    }\n", "\tpublic String getText(Object object) {\n\t\treturn appendLabel(\n\t\t\t\tappendType(appendKeywords(new StringBuffer(), object),\n\t\t\t\t\t\t\"_UI_PrimitiveType_type\"), object).toString(); //$NON-NLS-1$\n\t}\n", "private List<String> queryClusterInitiators(URI hostId){\n  List<String> initiatorNames=new ArrayList<String>();\n  Host host=_dbClient.queryObject(Host.class,hostId);\n  if (host == null) {\n    return initiatorNames;\n  }\n  if (host.getCluster() == null) {\n    return initiatorNames;\n  }\n  List<URI> hostUris=ComputeSystemHelper.getChildrenUris(_dbClient,host.getCluster(),Host.class,\"cluster\");\n  for (  URI hosturi : hostUris) {\n    initiatorNames.addAll(queryHostInitiators(hosturi));\n  }\n  return initiatorNames;\n}\n", "\tpublic void reopen() throws IOException {\n\t\tIndexWriter tempWriter = this.getWriter();\n\t\tthis.release(tempWriter);\n\t\treleaseAllSearchers();\n\t}\n", "private boolean matchesFilter ( Category cat , List < String > filterList ) throws WikiTitleParsingException { String categoryTitle = cat . getTitle ( ) . getPlainTitle ( ) ; for ( String filter : filterList ) { if ( categoryTitle . startsWith ( filter ) ", "private Map<String, ByteBuffer> tupleToKeyMap(Tuple t) throws IOException\n    {\n        Map<String, ByteBuffer> keys = new HashMap<String, ByteBuffer>();\n        for (int i = 0; i < t.size(); i++)\n        {\n            if (t.getType(i) == DataType.TUPLE)\n            {\n                Tuple inner = (Tuple) t.get(i);\n                if (inner.size() == 2)\n                {\n                    Object name = inner.get(0);\n                    if (name != null)\n                    {\n                        keys.put(name.toString(), objToBB(inner.get(1)));\n                    }\n                    else\n                        throw new IOException(\"Key name was empty\");\n                }\n                else\n                    throw new IOException(\"Keys were not in name and value pairs\");\n            }\n            else\n            {\n                throw new IOException(\"keys was not a tuple\");\n            }\n        }\n        return keys;\n    }", "public void attributeAsClassAt(int columnIndex){\n  Reorder reorder;\n  String order;\n  int i;\n  if ((columnIndex > 0) && (columnIndex < getColumnCount())) {\n    addUndoPoint();\n    try {\n      order=\"\";\n      for (i=1; i < m_Data.numAttributes() + 1; i++) {\n        if (i == columnIndex) {\n          continue;\n        }\n        if (!order.equals(\"\")) {\n          order+=\",\";\n        }\n        order+=Integer.toString(i);\n      }\n      if (!order.equals(\"\")) {\n        order+=\",\";\n      }\n      order+=Integer.toString(columnIndex);\n      reorder=new Reorder();\n      reorder.setAttributeIndices(order);\n      reorder.setInputFormat(m_Data);\n      m_Data=Filter.useFilter(m_Data,reorder);\n      m_Data.setClassIndex(m_Data.numAttributes() - 1);\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n      undo();\n    }\n    notifyListener(new TableModelEvent(this,TableModelEvent.HEADER_ROW));\n  }\n}\n", "\tpublic void triggerEvent(Event event) {\n\n\t\ttry {\n\t\t\teventLock.lock();\n\t\t\tlog.debug(\"Event triggered: \" + event.toString());\n\n\t\t\tHashSet<EventConsumer> consumers = eventConsumers.get(event\n\t\t\t\t\t.getClass());\n\n\t\t\tif (consumers != null) {\n\t\t\t\tfor (EventConsumer c : consumers) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tc.receive(event);\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tlog.error(\"Exception while triggering event.\", e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\teventLock.unlock();\n\t\t}\n\t}\n", "public void marshall(UntagResourcesRequest untagResourcesRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (untagResourcesRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(untagResourcesRequest.getResourceARNList(), RESOURCEARNLIST_BINDING);\n            protocolMarshaller.marshall(untagResourcesRequest.getTagKeys(), TAGKEYS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "private void scanRecordsFields(String[] strClassNames)\n    {\n        for (int i = 1; i < strClassNames.length; i++)\n        {\n            this.scanRecordFields(strClassNames, i, markUnusedFields); // Keep unused base fields.\n        }\n//x        this.scanRecordFields(strClassNames[strClassNames.length -1], recClassInfo, recFieldData, true);\n    }", "public CircularStringBuffer ( final int maxLines ) { m_maxSize = maxLines ; }", "private void fillList ( final int dx ) { int edge = NUM_ ; View child = getRightmostChild ( ) ; if ( child != null ) { edge = child . getRight ( ) ; } fillListRight ( edge , dx ) ; edge = NUM_ ; child = getLeftmostChild ( ) ; if ( child != null ) { edge = child . getLeft ( ) ; } fillListLeft ( edge , dx ) ; }", "public GeneratorPropertyIteratorPanel(Experiment exp){\n  this();\n  setExperiment(exp);\n}\n", "private static Map < String , Set < String > > parseSparseFields ( MultivaluedMap < String , String > queryParams ) { Map < String , Set < String > > result = new HashMap < > ( ) ; for ( Map . Entry < String , List < String > > kv : queryParams . entrySet", "void consumePendingOperationsInBatch ( IReplicationInBatchContext context ) throws Exception ;", "void shutdownCounter ( Counter counter ) ;", "public UIOptions(){\n  initComponents();\n  hideAllUnsedComponents();\n  String path=System.getProperty(\"user.home\") + \"/EsPReSSO\";\n  String decoded_path=null;\n  try {\n    if (path != null) {\n      decoded_path=URLDecoder.decode(path,\"UTF-8\");\n      if (decoded_path != null) {\n        File file=new File(decoded_path);\n        if (!file.exists()) {\n          file.mkdir();\n        }\n        path=decoded_path + \"/config.json\";\n        file=new File(path);\n        if (!file.exists()) {\n          file.createNewFile();\n          configText1.setText(path);\n          saveConfig(path);\n        }\n else {\n          configText1.setText(path);\n          loadConfig(path);\n        }\n      }\n    }\n  }\n catch (  UnsupportedEncodingException ex) {\n    JOptionPane.showMessageDialog(this,ex.toString(),\"ERROR 2\",JOptionPane.ERROR_MESSAGE);\n  }\ncatch (  IOException ex) {\n    JOptionPane.showMessageDialog(this,ex.toString(),\"ERROR 2\",JOptionPane.ERROR_MESSAGE);\n  }\n}\n", "    public void addChildComponent(ComponentConfig newComponent) {\n        childComponents.add(newComponent);\n    }\n", "@Override public void put(int msgLevel,String msg,Throwable ex){\n  String exceptionText=null;\n  if (ex != null) {\n    StringWriter sw=new StringWriter();\n    PrintWriter pw=new PrintWriter(sw);\n    ex.printStackTrace(pw);\n    pw.close();\n    try {\n      s", "public T execute ( ) throws Exception { return task . execute ( ) ; }", "\tpublic void changeFromUnkToNamed () {\n\t\tfor (EP ep:this.eps) {\n\t\t\tif (ep.getPred()!=null && ep.getTypeName().equalsIgnoreCase(\"NAMED_UNK_REL\")) {\n\t\t\t\tep.setTypeName(\"NAMED_REL\");\n\t\t\t}\n\t\t}\n\t}\n", "public <T> Iterator<T> reorder( Iterator<T> sequence)\n    {\n    return reorder( IteratorUtils.toList( sequence)).iterator();\n    }", "    public boolean commit() {\n      return false;\n    }\n", "public InvalidMagicMimeEntryException ( ) { super ( STR_ ) ; }", "    public int mkdir(){\n        FileConnection conn = null;\n\n        try {\n            conn = (FileConnection) Connector.open( path, Connector.READ_WRITE );\n            // if the pinkr directory does not exist, create one\n            if(!conn.exists()){\n                conn.mkdir();\n            }\n            conn.close();\n            return 1;\n        }\n        catch( IOException e ){\n            // could not access the URL\n            e.printStackTrace();\n            return -1;\n        }\n        catch( SecurityException e ){\n            // no permission to read the directory\n            e.printStackTrace();\n            return -1;\n        }\n    }\n", "public void testOneWriter ( ) throws Exception { File logDir = prepareLogDir ( STR_ ) ; DiskLog log = openLog ( logDir , BOOL_ ) ; LogConnection conn = log . connect ( BOOL_ ) ; LogConnection conn2 = null ; try { conn2 = log . connect ( BOOL_ ) ; throw new Exception ( STR_ ) ; } catch ( THLException e ) { } conn . release ( ) ; conn2 = log . connect ( BOOL_ ) ; assertNotNull ( STR_ , conn2 ) ; assertFalse ( STR_ , conn2 . isReadonly ( ) ) ; conn2 . release ( ) ; log . release ( ) ; }", "public static Map<String,Set<String>> cloneMap(Map<String,Set<String>> map){\n  Map<String,Set<String>> clone=new HashMap<String,Set<String>>();\n  for (  String key : map.keySet()) {\n    Set<String> set=new HashSet<String>();\n    Set<String> orig=(Set<String>)map.get(key);\n    set.addAll(orig);\n    clone.put(key,set);\n  }\n  return clone;\n}\n", "public boolean equals(Object obj) {\n\t\tif (obj instanceof ErrorMsgLabelPk) {\n\t\t\tErrorMsgLabelPk pk2 = (ErrorMsgLabelPk) obj;\n\t\t\treturn (this.companyCode != null && this.companyCode.equals(pk2.companyCode)\n\t\t\t\t&& this.groupId != null && this.groupId.equals", "public static Coordinate[] createSineStar(double basex,double basey,double size,double armLen,int nArms,int nPts){\n  double armBaseLen=size / 2 - armLen;\n  if (armBaseLen < 0)   armBaseLen=0.5;\n  double angInc=2 * Math.PI / nArms;\n  int nArmPt=nPts / nArms;\n  if (nArmPt < 5)   nArmPt=5;\n  int nPts2=nArmPt * nArms;\n  Coordinate[] pts=new Coordinate[nPts2 + 1];\n  int iPt=0;\n  double starAng=0.0;\n  for (int iArm=0; iArm < nArms; iArm++) {\n    for (int iArmPt=0; iArmPt < nArmPt; iArmPt++) {\n      double ang=iArmPt * (2 * Math.PI / nArmPt);\n      double len=armLen * (1 - Math.cos(ang) / 2) + armBaseLen;\n      double x=len * Math.cos(starAng + iArmPt * angInc / nArmPt) + basex;\n      double y=len * Math.sin(starAng + iArmPt * angInc / nArmPt) + basey;\n      Coordinate pt=new Coordinate(x,y);\n      pts[iPt++]=pt;\n    }\n    starAng+=angInc;\n  }\n  pts[iPt]=pts[0];\n  return pts;\n}\n", "private void doAutoScroll(final JTextArea ta,final boolean scroll){\n  SwingUtilities.invokeLater(null);\n}\n", "\tpublic long solutions() {\n\t\tsolutions=0;\n\t\tsolutions(0);\n\t\t//System.out.println(\"Chromaaaaaaaaa::::\"+chroma);\n\t\treturn solutions;\n\t}\n", "protected String buildCreateTableStatement ( ) throws ReplicatorException { return null ; }", "public void removeCorporateGroupId(final String organizationId, final String corporateGroupId) {\n        final DbOrganization dbOrganization = getOrganization(organizationId);\n\n        if(dbOrganization.getCorporateGroupIdPrefixes().contains(corporateGroupId)){\n            dbOrganization.getCorporateGroupIdPrefixes().remove(corporateGroupId);\n            repositoryHandler.store(dbOrganization);\n        }\n\n        repositoryHandler.removeModulesOrganization(corporateGroupId, dbOrganization);\n    }", "public static IMarker createMarker(String markerID,IResource resource,String message,int severity) throws CoreException {\n  IMarker marker=resource.createMarker(markerID);\n  marker.setAttribute(IMarker.SEVERITY,severity);\n  marker.setAttribute(IMarker.MESSAGE,message);\n  return marker;\n}\n", "public LogEventRotateReader ( LogRecord logRecord , boolean checkCRC ) throws ReplicatorException , IOException { this . logRecord = logRecord ; this . checkCRC = checkCRC ; load ( ) ; }", "public void stopADB() throws Exception {\n  cmd.runCommand(\"adb kill-server\");\n}\n", "boolean isEnabled ( int command_id ) ;", "\tpublic Byte get(int index) {\n\t\trangeCheck(index);\n\t\treturn elements[index];\n\t}\n", "@SuppressWarnings(\"unchecked\") public void addEntry(Entry e){\n  if (e == null)   return;\n  float val=e.getVal();\n  if (mYVals == null) {\n    mYVals=new ArrayList<T>();\n  }\n  if (mYVals.size() == 0) {\n    mYMax=val;\n    mYMin=val;\n  }\n else {\n    if (mYMax < val)     mYMax=val;\n    if (mYMin > val)     mYMin=val;\n  }\n  mYValueSum+=val;\n  mYVals.add((T)e);\n}\n", "private String guessName(Pdu pdu){\n  String villageName=\"anon\";\n  try {\n    Message message=messageFactory.fromPdu(pdu);\nswitch (message.getType()) {\ncase OwnHomeData:\ncase VisitedHomeData:\ncase EnemyHomeData:\n      Message user=message.getMessage(\"user\");\n    villageName=user.getString(\"userName\");\n  break;\ncase WarHomeData:\nWarVillage warVillage=Json.valueOf(message.getString(\"homeVillage\"),WarVillage.class);\nvillageName=warVillage.name;\nbreak;\ncase HomeBattleReplayData:\nReplay replay=Json.valueOf(message.getString(\"replay\"),Replay.class);\nvillageName=replay.defender.name;\nbreak;\n}\n}\n catch (RuntimeException|IOException e) {\nlog.warn(\"Couldn't extract name from pdu {}: {}\",pdu.getId(),e.toString());\n}\nreturn sanitize(villageName);\n}\n", "@Override\n    public DescribeDataSourcesResult describeDataSources(DescribeDataSourcesRequest request) {\n        request = beforeClientExecution(request);\n        return executeDescribeDataSources(request);\n    }", "public void addPostalAddress(final String addressItem){\n  if (postalAddress != null) {\n    postalAddress=new ArrayList<String>();\n  }\n  postalAddress.add(addressItem);\n}\n", "public void flush(){\nsynchronized (mDiskCacheLock) {\n    if (mDiskLruCache != null) {\n      try {\n        mDiskLruCache.flush();\n      }\n catch (      Throwable e) {\n        LogUtils.e(e.getMessage(),e);\n      }\n    }\n  }\n}\n", "@Override\n  public boolean commit() throws LoginException {\n    // if there is already an Alluxio user, it's done.\n    if (!mSubject.getPrincipals(User.class).isEmpty()) {\n      return true;\n    }\n    // add the logged in user into subject\n    if (mUser !", "public static MySQLPacket readPacket ( InputStream in ) { return readPacket ( in , NUM_ ) ; }", "public static <E>boolean isNotEmpty(CharSequence c){\n  return ((c != null) && (c.length() > 0));\n}\n", "int readUnsignedLeb128 ( ) throws IOException { int result = NUM_ ; byte val ; do { val = readByte ( ) ; result = ( result << NUM_ ) | ( val & NUM_ ) ; } while ( val < NUM_ ) ; return result ; }", "    public void setIsNative(boolean value) {\n\t\tif (value) {\n\t\t    if (isAbstract()) {\n\t\t\tthrow new IllegalStateException(\"A abstract method can't be \"+\n\t\t\t\t\t\t\t\"set to native. First \"+\n\t\t\t\t\t\t\t\"unset \"+\n\t\t\t\t\t\t\t\"the abstract flag if \"+\n\t\t\t\t\t\t\t\"desired\");\n\t\t    }\n\t\t    access |= ACC_NATIVE;\n\t\t}\n\t\telse {\n\t\t    //reset flag\n\t\t    access &= ACC_NATIVE_COMP;\n\t\t}\n    }\n", "public String displayHead() {\n\n        StringBuffer result = new StringBuffer(2048);\n\n        int buttonStyle = getSettings().getUserSettings().getWorkplaceButtonStyle();\n\n        // change to online project to allow exporting\n        try {\n            getJsp().getRequestContext().setCurrentProject(m_onlineProject);\n            String resourcePath = getJsp().link(\"/system/modules/\" + MODULE_NAME + \"/resources/\");\n\n            result.append(buildHtmlHelpStart(\"workplace.css\", false));\n            result.append(\"<body class=\\\"buttons-head\\\" unselectable=\\\"on\\\">\\n\");\n            result.append(\"<script type=\\\"text/javascript\\\" src=\\\"\");\n            result.append(getJsp().link(\"/system/modules/org.opencms.workplace.help/resources/search.js\"));\n            result.append(\"\\\"></script>\\n\");\n\n            // store home link in JS variable to use it in body frame\n            result.append(\"<script type=\\\"text/javascript\\\">\\n<!--\\n\");\n            result.append(\"\\tvar homeLink = \\\"\");\n            result.append(CmsEncoder.escapeXml(getParamHomelink()));\n            result.append(\"\\\";\\n\\n\");\n            result.append(\"//-->\\n</script>\\n\");\n\n            // search form with invisible elements\n\n            // search index may be attached to resource /system/modules/org.opencms.workplace.help/elements/search.jsp,\n            // property search.index.\n            String index = getJsp().property(\n                \"search.index\",\n                \"/system/modules/org.opencms.workplace.help/elements/search.jsp\",\n                \"German online help\",\n                false);\n            StringBuffer submitAction = new StringBuffer();\n            submitAction.append(\"parseSearchQuery(document.forms[\\'searchform\\'],\\'\");\n            submitAction.append(\n                Messages.get().getBundle(getLocale()).key(\n                    Messages.GUI_HELP_ERR_SEARCH_WORD_LENGTH_1,\n                    new Integer(3))).append(\"\\');\");\n\n            result.append(\"<form style=\\\"margin: 0;\\\" name=\\\"searchform\\\" method=\\\"post\\\" action=\\\"\");\n            String searchLink = getJsp().link(\n                new StringBuffer(\"/system/modules/org.opencms.workplace.help/elements/search.jsp?\").append(\n                    CmsLocaleManager.PARAMETER_LOCALE).append(\"=\").append(getLocale()).toString());\n            result.append(searchLink);\n            result.append(\"\\\" target=\\\"body\\\"\");\n            result.append(\" onsubmit=\\\"\");\n            result.append(submitAction.toString());\n            result.append(\"\\\">\\n\");\n            result.append(\"  <input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"search\\\" />\\n\");\n            result.append(\"  <input type=\\\"hidden\\\" name=\\\"query\\\" value=\\\"\\\" />\\n\");\n            result.append(\"  <input type=\\\"hidden\\\" name=\\\"index\\\" value=\\\"\" + index + \"\\\" />\\n\");\n            result.append(\"  <input type=\\\"hidden\\\" name=\\\"searchPage\\\" value=\\\"1\\\" />\\n\");\n\n            result.append(\"<table width=\\\"100%\\\" border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"0\\\">\\n\");\n            result.append(\"<tr>\\n\");\n            result.append(\"\\t<td align=\\\"left\\\">\\n\");\n\n            // display navigation buttons\n            result.append(buttonBar(HTML_START));\n            result.append(buttonBarStartTab(0, 5));\n            result.append(button(\n                \"javascript:history.back();\",\n                null,\n                \"back.png\",\n                org.opencms.search.Messages.GUI_HELP_BUTTON_BACK_0,\n                buttonStyle,\n                resourcePath));\n            result.append(button(\n                \"javascript:history.forward();\",\n                null,\n                \"next.png\",\n                org.opencms.search.Messages.GUI_HELP_BUTTON_NEXT_0,\n                buttonStyle,\n                resourcePath));\n\n            result.append(button(\n                \"javascript:top.body.location.href='\" + CmsEncoder.escapeXml(getParamHomelink()) + \"';\",\n                null,\n                \"contents.png\",\n                org.opencms.search.Messages.GUI_HELP_BUTTON_CONTENTS_0,\n                buttonStyle,\n                resourcePath));\n            //search\n            result.append(\"<td style=\\\"vertical-align: top;\\\">\");\n            result.append(\"<input type=\\\"text\\\" name=\\\"query2\\\" class=\\\"onlineform\\\" style=\\\"width: 120px\\\" value=\\\"\");\n            result.append(\"\");\n            result.append(\" \\\">\");\n            result.append(\"</td>\\n\");\n\n            result.append(\n                button(\n                    new StringBuffer(\"javascript:\").append(submitAction.toString()).toString(),\n                    null,\n                    null,\n                    org.opencms.search.Messages.GUI_HELP_BUTTON_SEARCH_0,\n                    2,\n                    null));\n\n            result.append(buttonBar(HTML_END));\n\n            result.append(\"</td>\\n\");\n            result.append(\"\\t<td align=\\\"right\\\" width=\\\"100%\\\">\\n\");\n\n            // display close button\n            result.append(buttonBar(HTML_START));\n            result.append(buttonBarSeparator(5, 0));\n            result.append(button(\n                \"javascript:top.close();\",\n                null,\n                \"close\",\n                org.opencms.search.Messages.GUI_HELP_BUTTON_CLOSE_0,\n                buttonStyle,\n                resourcePath));\n            result.append(buttonBar(HTML_END));\n\n            result.append(\"\\t</td>\\n\");\n            result.append(\"\\t<td>&nbsp;</td>\\n\");\n            result.append(\"<td>\");\n\n            // display logo\n            result.append(\"<span style=\\\"display: block; width: 80px; height: 22px; background-image: url(\\'\");\n            result.append(getSkinUri());\n            result.append(\"commons/workplace.png\");\n            result.append(\"\\'); \\\"></span>\");\n            result.append(\"</td>\");\n            result.append(\"</tr>\\n\");\n            result.append(\"</table>\\n\");\n            result.append(\"</form>\\n\");\n            result.append(buildHtmlHelpEnd());\n\n            return result.toString();\n        } finally {\n            // set back to offline project\n            getJsp().getRequestContext().setCurrentProject(m_offlineProject);\n        }\n    }", "public void removeSetting(final int index) {\n\t\tAssert.isTrue(index >= 0);\n\t\tfSettings.remove(index);\n\t}", "public List<String> getNotificationMessage(Notification notification) {\n        List<String> message = notification.getMessage();\n\n        if (message == null) {\n            message = broker.callRPCList(\"RGCWXQ ALRMSG\", null, notification.getAlertId());\n            notification.setMessage(message);\n        }\n\n        return message;\n    }", "public static Map < String , String > parseKeyAndValueToMap ( String source , boolean ignoreSpace ) { return parseKeyAndValueToMap ( source , DEFAULT_KEY_AND_VALUE_SEPARATOR , DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR , ignoreSpace ) ; }", "\tprivate void loadTranslations() {\n\t\tdictService.getTranslations(getTranslationsCallback);\n\t\t\n\t}\n", "public static String replace(String s,String sub,String with){\n  int c=0;\n  int i=s.indexOf(sub,c);\n  if (i == -1) {\n    return s;\n  }\n  int length=s.length();\n  StringBuilder sb=new StringBuilder(length + with.length());\n  do {\n    sb.append(s.substring(c,i));\n    sb.append(with);\n    c=i + sub.length();\n  }\n while ((i=s.indexOf(sub,c)) != -1);\n  if (c < length) {\n    sb.append(s.substring(c,length));\n  }\n  return sb.toString();\n}\n", "public static ChangeData createForTest ( Project . NameKey project , Change . Id id , int currentPatchSetId ) { ChangeData cd = new ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , proje", "\tprivate void loadDefaults() {\n\t\taddSetting(new Setting(\"Probability\", new Color(null, 200, 200, 200), true));\n\t\taddSetting(new Setting(\"Exception\", new Color(null, 255, 200, 200), false));\n\t}\n", "    public void with(SendCtI snd) {\n        DebugTools.writeDebug(myControler, getWithDebug(snd));\n        super.with(snd);\n    }\n", "@Override public double accuracyLat(){\n  return Math.abs(int2coord(1) - int2coord(2));\n}\n", "public String[] getFamilyNames() {\n    HashSet<String> familyNameSet = new HashSet<String>();\n\n    if (familyNames == null) {\n      for (String columnName : columns(null, this.valueFields)) {\n        int pos = columnName.indexOf(\":\");\n        familyNameSet.add(hbaseColumn(pos > 0 ? columnName.substring(0, pos) : columnName));\n      }\n    } else {\n      for (String familyName : familyNames) {\n        familyNameSet.add(familyName);\n      }\n    }\n    return familyNameSet.toArray(new String[0]);\n  }", "@Override public void populateFrame(Audio a){\n  if (!(a instanceof AudioListener)) {\n    throw new IllegalArgumentException(a.getSystemName() + \" is not an AudioListener object\");\n  }\n  super.populateFrame(a);\n  AudioListener l=(AudioListener)a;\n  position.setValue(l.getPosition());\n  velocity.setValue(l.getVelocity());\n  oriAt.setValue(l.getOrientation(Audio.AT));\n  oriUp.setValue(l.getOrientation(Audio.UP));\n  gain.setValue(l.getGain());\n  metersPerUnit.setValue(l.getMetersPerUnit());\n}\n", "protected void diff_charsToLines ( LinkedList < Diff > diffs , List < String > lineArray ) { StringBuilder text ; for ( Diff diff : diffs ) { text = new StringBuilder ( ) ; for ( int y = NUM_ ; y < diff . text . length ( ) ; y ++ ) { text . append ( lineArray . get ( diff . text . charAt ( y ) ) ) ; } diff . text = text . toString ( ) ; } }", "public static <MESSAGE, KEY> FunctionKeyReader<MESSAGE, KEY> create(\n            final Class<MESSAGE> messageClazz,\n            final ContextKeyExtractFunction<MESSAGE, KEY>  contextReadFunction) {\n        return new FunctionKeyReader<>(messageClazz, contextReadFunction);\n    }", "\tprivate String createText(String name, String value) {\n\t\treturn new String(name + \" = \" + value);\n\t}\n", "void loadItemsIntoSlots(final Player player){\n  final String[] slotsItems={\"bag\",\"rhand\",\"lhand\",\"head\",\"armor\",\"legs\",\"feet\",\"finger\",\"cloak\",\"back\",\"belt\",\"keyring\",\"trade\"};\n  try {\n    for (    final String slotName : slotsItems) {\n      if (!player.hasSlot(slotName)) {\n        continue;\n      }\n      final RPSlot slot=player.getSlot(slotName);\n      final PlayerSlot newSlot;\n      if (slotName.equals(\"keyring\")) {\n        newSlot=new PlayerKeyringSlot(slotName);\n      }\n else       if (slotName.equals(\"trade\")) {\n        newSlot=new PlayerTradeSlot(slotName);\n      }\n else {\n        newSlot=new PlayerSlot(slotName);\n      }\n      loadSlotContent(player,slot,newSlot);\n    }\n    for (    final Banks bank : Banks.values()) {\n      final RPSlot slot=player.getSlot(bank.getSlotName());\n      final PlayerSlot newSlot=new BankSlot(bank);\n      loadSlotContent(player,slot,newSlot);\n    }\n  }\n catch (  final RuntimeException e) {\n    logger.error(\"cannot create player\",e);\n  }\n}\n", "public Set<String> keyNames(String prefix){\n  Set<String> keys=keyNames();\n  HashSet<String> subset=new HashSet<String>();\n  for (  String key : keys) {\n    if (key != null && key.startsWith(prefix))     subset.add(key);\n  }\n  return subset;\n}", "public void undoableEditHappened(UndoableEditEvent event) {\n\t\tthis.addEdit(event.getEdit());\n\t}", "protected <T extends ManagedEntity>List<T> searchManagedEntities(ManagedEntity parent,Class<T> type,boolean recurse) throws VMWareException {\n  String typeName=type.getSimpleName();\n  List<T> results=Lists.newArrayList();\n  for (  ManagedEntity entity : searchManagedEntities(parent,typeName,recurse)) {\n    results.add((T)entity);\n  }\n  return results;\n}\n", "public static BeanInfoIndexedProperty getBeanInfoIndexedProperty\n            (Class pClass,\n             String pIndexedPropertyName,\n             Logger pLogger)\n            throws ELException {\n        return getBeanInfoManager\n                (pClass).getIndexedProperty(pIndexedPropertyName, pLogger);\n    }", "public static long sizeOf(Path path) throws IOException {\n    SizeVisitor visitor = new SizeVisitor();\n    Files.walkFileTree(path, visitor);\n    return visitor.size;\n  }", "public GeoDistanceBuilder addRange(String key,double from,double to){\n  ranges.add(new Range(key,from,to));\n  return this;\n}\n", "    public Rule rule(Fact conclusion) {\n        Vector body = new Vector ();\n        return lfactory.createRule (body, conclusion);\n    }\n", "    public void moveTeachToDeletedByClass(Item classID) {\n        Item studentID = new IntegerItem(USRASSIGNEDID, \"\", false);\n\n        String qs = \"SELECT \" + studentID.getFieldName()\n                        + \" FROM \" + TEACHESTABLE\n                        + \" WHERE \" + classID.getFieldName() + \" = \" + classID.getDBFormattedString(teachesTable) + \";\";\n\n        ArrayList al = teachesTable.performDatabaseQuery(qs, new Item[] {studentID});\n\n        for (int i = 0; i < al.size(); i++) {\n            Hashtable result = (Hashtable) al.get(i);\n            studentID.setValue((String) result.get(studentID.getFieldName()));\n            moveTeachToDeleted(classID, studentID);\n        }\n    }\n", "@Override\n    public GetProjectResult getProject(GetProjectRequest request) {\n        request = beforeClientExecution(request);\n        return executeGetProject(request);\n    }", "    public void setContext(Context context) {\n        log = Log.instance(context);\n        options = Options.instance(context);\n        classLoaderClass = options.get(\"procloader\");\n        locations.update(log, options, Lint.instance(context), FSInfo.instance(context));\n    }\n", "private void saveDescription ( ) { try { m_project . getConfiguration ( ) . setDescription ( m_stdEditPanel . getDescription ( ) ) ; } catch ( final CouldntSaveDataException e ) { CUtilityFunctions . logException ( e ) ; final String innerMessage = STR_ +", "@Override\n    public CreateReplicationTaskResult createReplicationTask(CreateReplicationTaskRequest request) {\n        request = beforeClientExecution(request);\n        return executeCreateReplicationTask(request);\n    }", "public static Observable<String> decode(Observable<byte[]> src, String charsetName) {\n        return decode(src, Charset.forName(charsetName));\n    }", "@OneToMany(targetEntity =  org.openprovenance.prov.sql.Other.class, cascade = {\n        CascadeType.ALL\n    })\n    @JoinColumn(name = \"OTHERS_WASENDEDBY_PK\")\n    public List<Other> getOther() {\n        if (other == null) {\n            other=AttributeList.populateKnownAttributes(this,all, org.openprovenance.prov.model.Other.class);\n        }\n        return this.other;\n    }", "public Process exec(String[] taintedCommand,String[] taintedEnvironment,File workingDirectory,boolean redirectErrorStream) throws IOException {\n  if (taintedCommand == null) {\n    throw new NullPointerException(\"taintedCommand == null\");\n  }\n  if (taintedCommand.length == 0) {\n    throw new IndexOutOfBoundsException(\"taintedCommand.length == 0\");\n  }\n  String[] command=taintedCommand.clone();\n  String[] environment=taintedEnvironment != null ? taintedEnvironment.clone() : null;\n  for (int i=0; i < command.length; i++) {\n    if (command[i] == null) {\n      throw new NullPointerException(\"taintedCommand[\" + i + \"] == null\");\n    }\n  }\n  if (environment != null) {\n    for (int i=0; i < environment.length; i++) {\n      if (environment[i] == null) {\n        throw new NullPointerException(\"taintedEnvironment[\" + i + \"] == null\");\n      }\n    }\n  }\n  FileDescriptor in=new FileDescriptor();\n  FileDescriptor out=new FileDescriptor();\n  FileDescriptor err=new FileDescriptor();\n  String workingPath=(workingDirectory == null) ? null : workingDirectory.getPath();\nsynchronized (processReferences) {\n    int pid;\n    try {\n      pid=exec(command,environment,workingPath,in,out,err,redirectErrorStream);\n    }\n catch (    IOException e) {\n      IOException wrapper=new IOException(\"Error running exec().\" + \" Command: \" + Arrays.toString(command) + \" Working Directory: \"+ workingDirectory+ \" Environment: \"+ Arrays.toString(environment));\n      wrapper.initCause(e);\n      throw wrapper;\n    }\n    ProcessImpl process=new ProcessImpl(pid,in,out,err);\n    ProcessReference processReference=new ProcessReference(process,referenceQueue);\n    processReferences.put(pid,processReference);\n    processReferences.notifyAll();\n    return process;\n  }\n}\n", "public Eventos (java.lang.Integer id) {\n\t\tsuper(id);\n\t}", "private static void validatePackageVersion(List<Package> packages) {\n        final String exceptions = \".*\\\\b(oracle|tibco|demo|hub)\\\\b.*\";\n        String version = ApplicationContext.getMdwVersion();\n        String mdwVersion = version.split(\"\\\\-\")[0];\n\n        List<Package> filteredPackages = packages.stream()\n                .filter(e -> !mdwVersion.equals(e.getVersionString())\n                        && e.getName().startsWith(\"com.centurylink.mdw\")\n                        && !e.getName().startsWith(\"com.centurylink.mdw.central\"))\n                .collect(Collectors.toList());\n        List<Package> obsoletePackages = filteredPackages.stream()\n                .filter(p2 -> !(p2.getName().matches(exceptions)))\n                .collect(Collectors.toList());\n\n        if (!obsoletePackages.isEmpty()){\n            StringBuilder message=new StringBuilder();\n            message.append( \"\\n****************************************\\n\"\n                    + \"** WARNING: These asset packages do not match current build version \" + mdwVersion + \"\\n\");\n            for (Package p1 : obsoletePackages) {\n                message.append(\"**   \"+p1.getLabel()+\"\\n\");\n            }\n            message.append(\"******************************************\\n\");\n            logger.warn(message.toString());\n        }\n    }", "public int read() throws IOException {\nsynchronized (lock) {\n    char[] charArray=new char[1];\n    if (read(charArray,0,1) != -1) {\n      return charArray[0];\n    }\n    return -1;\n  }\n}\n", "public void onChangeTreeState(Set<CmsUUID> openItemIds) {\r\n\r\n        m_controller.saveTreeState(I_CmsGalleryProviderConstants.TREE_SITEMAP, m_siteRoot, openItemIds);\r\n    }", "    public void sendSuspendMessagesComplete() {\n\tcheckRelocateProtocolVersion();\n\tsynchronized (lock) {\n\t    ByteBuffer msg = ByteBuffer.allocate(1);\n\t    msg.put(SimpleSgsProtocol.SUSPEND_MESSAGES_COMPLETE).\n\t\tflip();\n\t    try {\n\t\tconnection.sendBytes(msg.array());\n\t    } catch (IOException e) {\n\t\tthrow new RuntimeException(e);\n\t    }\n\t}\n    }\n", "private boolean canMapRegs(ArrayList<RegisterSpec> specs,int ropReg){\n  for (  RegisterSpec spec : specs) {\n    if (ssaRegsMapped.get(spec.getReg()))     continue;\n    if (!canMapReg(spec,ropReg))     return false;\n  }\n  return true;\n}\n", "    public void importClass(String className) {\n    \tint pos = className.lastIndexOf('.');\n    \tString simpleName = className.substring(pos + 1);\n        try {\n            Class result = getClass(className);\n            importClass(simpleName, result);\n        } catch (Exception e) {};\n    }\n", "public static void submitTopology ( String name , Map < String , Object > stormConfig , StormTopology topology ) throws AlreadyAliveException , InvalidTopologyException { com . twitter . heron . api . Config heronConfig = ConfigUtils . translateConfig ( stormConfig ) ; try { HeronSubmitter . submitTopology ( name , heronConfig , topology . getStormTopology ( ) ) ; } catch ( com . twitter . heron . api . exception . AlreadyAliveException e ) { throw new AlreadyAliveException ( ) ; } catch ( com . twitter . heron . api . exception . InvalidTopologyException e ) { throw new InvalidTopologyException ( ) ; } }", "public TraceLogger ( final Debugger debugger , final Module module ) { Preconditions . checkNotNull ( debugger , STR_ ) ; Preconditions . checkNotNull ( module , STR_ ) ; this . debugger = debugger ; this . module = module ; this . project = null ; }", "\tpublic TextPart () {\n\t\ttext = new TextFragment();\n\t}\n", "public void disconnect ( UniversalConnection connection ) { UniversalDataSource uds = connectionMap . remove ( connection ) ; if ( uds != null ) { uds . releaseConnection ( connection ) ; } }", "public int[][] f2e(){\n  int fDim=srcEndExclusive - srcStartInclusive;\n  int[][] f2e=new int[fDim][];\n  for (int i=srcStartInclusive; i < srcEndExclusive; ++i) {\n    int localIdx=i - srcStartInclusive;\n    int[] f2eI=sentencePair.f2e(i);\n    int tgtAlignDim=f2eI.length;\n    f2e[localIdx]=new int[tgtAlignDim];\n    if (tgtAlignDim > 0) {\n      System.arraycopy(f2eI,0,f2e[localIdx],0,f2e[localIdx].length);\n      for (int j=0; j < f2e[localIdx].length; ++j) {\n        f2e[localIdx][j]-=tgtStartInclusive;\n      }\n    }\n  }\n  return f2e;\n}\n", "public OptionalInt executeIfAbsent(Runnable action){\n  if (!isPresent())   action.run();\n  return this;\n}\n", "\tprotected void setCurrentlySelectedLaunch(ISelection selection) {\n\t\tcurrentlySelectedLaunch = null;\n\t\t\n\t\tif (selection instanceof IStructuredSelection) {\n\t\t\tObject selected = \n\t\t\t\t((IStructuredSelection) selection).getFirstElement();\n\t\t\t\n\t\t\tif (selected instanceof IProcess) {\n\t\t\t\tsetCurrentlySelectedLaunch((IProcess) selected);\n\t\t\t} else if (selected instanceof IDebugElement) {\n\t\t\t\tsetCurrentlySelectedLaunch((IDebugElement) selected);\n\t\t\t} else if (selected instanceof ILaunch) {\n\t\t\t\tsetCurrentlySelectedLaunch((ILaunch) selected);\n\t\t\t}\n\t\t}\n\t}\n", "public byte[] handleMapRequest(Properties requestProperties) throws IOException, MapRequestFormatException {\n  Proj projection=ImageServerUtils.createOMProjection(requestProperties,defaultProjection);\n  Paint bgPaint=ImageServerUtils.getBackground(requestProperties,getBackground());\n  boolean formatFound=false;\n  String format=requestProperties.getProperty(FORMAT);\n  if (format != null) {\n    formatFound=setFormatter(format.toUpperCase());\n    formatFound=true;\n    Debug.message(\"imageserver\",\"Format requested \" + format);\n  }\n  if (Debug.debugging(\"imageserver\")) {\n    if (format == null || formatFound == false) {\n      Debug.output(\"MRH: no formatter defined, using default\");\n    }\n    Debug.output(\"Creating image with projection: \" + projection);\n  }\n  byte[] image;\n  String strLayers=requestProperties.getProperty(LAYERS);\n  if (strLayers != null) {\n    Vector<String> layers=PropUtils.parseMarkers(strLayers,\",\");\n    if (Debug.debugging(\"imageserver\")) {\n      Debug.output(\"MRH.handleMapRequest: requested layers >> \" + layers);\n    }\n    image=createImage(projection,-1,-1,layers,bgPaint);\n  }\n else {\n    if (getUseVisibility()) {\n      if (Debug.debugging(\"imageserver\")) {\n        Debug.output(\"MRH.handleMapRequest: Using visibility to determine layers\");\n      }\n      image=createImage(projection,-1,-1,calculateVisibleLayerMask(),bgPaint);\n    }\n else {\n      Vector<String> layers=PropUtils.parseMarkers(defaultLayers,\" \");\n      if (Debug.debugging(\"imageserver\")) {\n        Debug.output(\"MRH.handleMapRequest: requested layers >> \" + layers + \" out of \"+ getAllLayerNames());\n      }\n      image=createImage(projection,-1,-1,layers,bgPaint);\n    }\n  }\n  return image;\n}\n", "public static TransformMatrix2D rotate(double alpha){\n  final double sin=Math.sin(alpha);\n  final double cos=Math.cos(alpha);\n  return new TransformMatrix2D(cos,sin,-sin,cos,0.0d,0.0d);\n}\n", "    public Filter equals(String attribute, Object value) {\n        return FilterImpl.equals(attribute, value);\n    }\n", "    public Collection records(String tableName, Map bindings) {\n        DataTable table = getTable(tableName);\n        return table.records(bindings);\n    }\n", "protected final List<T> searchSorted(String searchString, String sort) {\n        return this.dataAccess.searchSorted(searchString, sort);\n    }", "public boolean checkKeyUsage(final KeyUsageBit keyUsageBit){\n  Set<KeyUsageBit> keyUsageBits=getKeyUsageBits();\n  return keyUsageBits.contains(keyUsageBit);\n}\n", "public int sp2px ( float spValue ) { final float fontScale = mContext . getResources ( ) . getDisplayMetrics ( ) . scaledDensity ; return ( int ) ( spValue * fontScale + NUM_ ) ; }", "public Collection<Object> undo(){\n  HashSet<Object> modifiedObjects=null;\n  boolean done=false;\n  while ((indexOfNextAdd > 0) && !done) {\n    List<mxUndoableEdit> edits=history.get(--indexOfNextAdd);\n    for (int i=edits.size() - 1; i >= 0; i--) {\n      mxUndoableEdit edit=edits.get(i);\n      edit.undo();\n      modifiedObjects=edit.getAffectedObjects();\n      if (edit.isSignificant()) {\n        fireEvent(new mxEventObject(mxEvent.UNDO,\"edit\",edit));\n        done=true;\n      }\n    }\n  }\n  return modifiedObjects;\n}\n", "     public long getLatency(){\n         throw new UnsupportedOperationException(\"Not yet implemented\");\n         /*boolean b = false;\n         long l = System.currentTimeMillis();\n         if(!occupied)\n             return -1;\n         try{\n             outStream.write(oCprotocol.getDiscard().generatePacket());\n             occupied=b=true;\n         }catch(java.net.SocketException e){\n             occupied=b=false;\n           }catch(IOException e){\n             occupied=b=false;\n             e.printStackTrace();\n         }\n         return b?(System.currentTimeMillis()-l):-1;\n          */\n     }\n", "public void sendPacketToServer ( IPacket packet ) { checkClassAndSync ( packet . getClass ( ) ) ; clientOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . TOSERVER ) ; clientOutboundChannel . writeOutbound ( packet ) ; isCurrentlySendingSemaphor = BOOL_ ; }", "\tprotected void addNamePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_InteractionAttributes_name_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_InteractionAttributes_name_feature\", \"_UI_InteractionAttributes_type\"),\n\t\t\t\t XplPackage.Literals.INTERACTION_ATTRIBUTES__NAME,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "protected <T, A> ActiveOperation<T, A> registerActiveOperation(A attachment) {\n        final ActiveOperation.CompletedCallback<T> callback = getDefaultCallback();\n        return registerActiveOperation(attachment, callback);\n    }", "protected final void clearPositionCache ( ) { if ( fCachedPositions != null ) { fCachedPositions = null ; } }", "\tpublic void enqueue(Object obj) throws IndexOutOfBoundsException {\n\t\tsynchronized (mutex) {\n\t\t\tif ((maxQueueSize > 0) && (size() >= maxQueueSize)) {\n\t\t\t\tthrow new IndexOutOfBoundsException(\"Queue is full. Element not added.\");\n\t\t\t}\n\t\t\tqueueData.add(obj);\n\t\t}\n\t}\n", "public void removeEmptyBlocks() {\n        Block curr = blocklistHead;\n        Block prev = null;\n        int effId = 0;\n        while (curr != null) {\n            if (!curr.isEmpty()) {\n                curr.id = effId++;\n                if (prev != null) {\n                    prev.nextBlock = curr;\n                } else {\n                    blocklistHead = curr;\n                }\n                prev = curr;\n            }\n            curr = curr.nextBlock;\n        }\n        if (prev != null) {\n            prev.nextBlock = null;\n        } else {\n            blocklistHead = null;\n        }\n        numBlocks = effId;\n    }", "public static List<Volume> queryVolumesByIterativeQuery(DbClient dbClient,List<URI> volumeURIs){\n  List<Volume> volumes=new ArrayList<Volume>();\n  @SuppressWarnings(\"unchecked\") Iterator<Volume> volumeIterator=dbClient.queryIterativeObjects(Volume.class,volumeURIs);\n  while (volumeIterator.hasNext()) {\n    volumes.add(volumeIterator.next());\n  }\n  return volumes;\n}\n", "    public void writeMetaData() throws IOException, JAXBException {\n        /* Check to see if the cell is no longer valid */\n        super.checkInvalid();\n        \n        /* Make sure the thread has write permissions */\n        this.wfsRef.get().checkOwnership();\n        \n        if (this.getVersion() != null) {\n            this.getVersion().encode(this.delegate.getWriter(WFSRootDirectory.VERSION));\n        }\n    }\n", "public static AST GetWith(int depth) throws ParseAlgorithmException {\n  return InnerGetWith(depth,null);\n}\n", "public static double [ ] append ( double [ ] v , double [ ] u ) { double [ ] result = new double [ v . length + u . length ] ; System . arraycopy ( v , NUM_ , result , NUM_ , v . length ) ; System . arraycopy ( u , NUM_ , result , v . length , u . length ) ; return result ; }", "\tpublic void setScrollLock(boolean lock) {\n\t\tthis.scrollLock = lock;\n\t\tthis.currentLogEventModel.getPageSet().setMutatorType(this.scrollLock ?\n\t\t\t\tILogEventModelMutator.NON_TAILING_MUTATOR : ILogEventModelMutator.TAILING_MUTATOR);\n\t\tIterator iterator = presentationList.iterator();\n\t\twhile(iterator.hasNext()) {\n\t\t\tPresentation p = (Presentation)iterator.next();\n\t\t\tp.setScrollLock(this.scrollLock);\n\t\t}\n\t}\n", "static void mergeSortNoCopy(final int[] x,final int[] y,final int[] auxX,final int[] auxY,final int toIndex,final int insertionSortIndex){\n  if ((toIndex > x.length) || (toIndex > y.length) || (toIndex > auxX.length)|| (toIndex > auxY.length)) {\n    throw new ArrayIndexOutOfBoundsException(\"bad arguments: toIndex=\" + toIndex);\n  }\n  mergeSort(x,y,x,auxX,y,auxY,insertionSortIndex,toIndex);\n  if ((insertionSortIndex == 0) || (auxX[insertionSortIndex - 1] <= auxX[insertionSortIndex])) {\n    System.arraycopy(auxX,0,x,0,toIndex);\n    System.arraycopy(auxY,0,y,0,toIndex);\n    return;\n  }\n  for (int i=0, p=0, q=insertionSortIndex; i < toIndex; i++) {\n    if ((q >= toIndex) || ((p < insertionSortIndex) && (auxX[p] <= auxX[q]))) {\n      x[i]=auxX[p];\n      y[i]=auxY[p];\n      p++;\n    }\n else {\n      x[i]=auxX[q];\n      y[i]=auxY[q];\n      q++;\n    }\n  }\n}\n", "public abstract void popClient ( TemplateClient client ) ;", "public void scrollToPage ( int page ) ;", "private static boolean verifyMagic(byte[] magic){\n  return Arrays.equals(magic,HeaderItem.DEX_FILE_MAGIC) || Arrays.equals(magic,HeaderItem.DEX_FILE_MAGIC_API_13);\n}", "  public Capabilities getCapabilities() {\n    Capabilities \tresult;\n\n    result = new Capabilities(this);\n    result.setMinimumNumberInstances(0);\n    \n    return result;\n  }\n", "    public Object visit(QualifiedName node) {\n        String var = node.getRepresentation();\n\n        // Set the modifier\n        Class c = (Class)context.get(var);\n        node.setProperty(NodeProperties.TYPE, c);\n\n        node.setProperty(NodeProperties.MODIFIER, context.getModifier(node));\n        return c;\n    }\n", "\tpublic void deleteSelected() {\n\t\tfor(int i = 0; i < toolList.size(); i++) {\n\t\t\tif (toolList.elementAt(i).isSelected()) {\n\t\t\t\ttoolList.elementAt(i).setDeleted(true);\n\t\t\t\t//toolList.remove(i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n", "\tpublic Stroke getStroke() {\n\t\tif (this == DOTTED)\n\t\t\treturn DOTTED_STROKE;\n\t\treturn SOLID_STROKE;\n\t}\n", "public static void close(){\n  flush();\n  try {\n    out.close();\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n", "public String undo(){\n  if (!canUndo()) {\n    return \"\";\n  }\n  UndoAction undoAction=m_undoStack.get(m_nCurrentEditAction);\n  m_bNeedsUndoAction=false;\n  undoAction.undo();\n  m_bNeedsUndoAction=true;\n  m_nCurrentEditAction--;\n  return undoAction.getUndoMsg();\n}\n", "@Action(name = \"Convert XML to Json\",\n            outputs = {\n                    @Output(NAMESPACES_PREFIXES),\n                    @Output(NAMESPACES_URIS),\n                    @Output(RETURN_RESULT),\n                    @Output(RETURN_CODE),\n                    @Output(EXCEPTION)\n            },\n            responses = {\n                    @Response(text = ResponseNames.SUCCESS, field = RETURN_CODE, value = SUCCESS),\n                    @Response(text = ResponseNames.FAILURE, field = RETURN_CODE, value = FAILURE)\n            })\n    public Map<String, String> execute(\n            @Param(value = XML, required = true) String xml,\n            @Param(value = TEXT_ELEMENTS_NAME) String textElementsName,\n            @Param(value = INCLUDE_ROOT) String includeRootElement,\n            @Param(value = INCLUDE_ATTRIBUTES) String includeAttributes,\n            @Param(value = PRETTY_PRINT) String prettyPrint,\n            @Param(value = PARSING_FEATURES) String parsingFeatures) {\n\n        try {\n            includeRootElement = defaultIfEmpty(includeRootElement, TRUE);\n            includeAttributes = defaultIfEmpty(includeAttributes, TRUE);\n            prettyPrint = defaultIfEmpty(prettyPrint, TRUE);\n            ValidateUtils.validateInputs(includeRootElement, includeAttributes, prettyPrint);\n\n            final ConvertXmlToJsonInputs inputs = new ConvertXmlToJsonInputs.ConvertXmlToJsonInputsBuilder()\n                    .withXml(xml)\n                    .withTextElementsName(textElementsName)\n                    .withIncludeRootElement(Boolean.parseBoolean(includeRootElement))\n                    .withIncludeAttributes(Boolean.parseBoolean(includeAttributes))\n                    .withPrettyPrint(Boolean.parseBoolean(prettyPrint))\n                    .withParsingFeatures(parsingFeatures)\n                    .build();\n\n            final ConvertXmlToJsonService converter = new ConvertXmlToJsonService();\n            final String json = converter.convertToJsonString(inputs);\n\n            final Map<String, String> result = getSuccessResultsMap(json);\n            result.put(NAMESPACES_PREFIXES, converter.getNamespacesPrefixes());\n            result.put(NAMESPACES_URIS, converter.getNamespacesUris());\n            return result;\n        } catch (Exception e) {\n            final Map<String, String> result = getFailureResultsMap(e);\n            result.put(NAMESPACES_PREFIXES, EMPTY);\n            result.put(NAMESPACES_URIS, EMPTY);\n            return result;\n        }\n    }", "public java.util.List<DBSecurityGroupMembership> getDBSecurityGroupMemberships() {\n        if (dBSecurityGroupMemberships == null) {\n            dBSecurityGroupMemberships = new com.amazonaws.internal.SdkInternalList<DBSecurityGroupMembership>();\n        ", "public void marshall(Relationship relationship, ProtocolMarshaller protocolMarshaller) {\n\n        if (relationship == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(relationship.getResourceType(), RESOURCETYPE_BINDING);\n            protocolMarshaller.marshall(relationship.getResourceId(), RESOURCEID_BINDING);\n            protocolMarshaller.marshall(relationship.getResourceName(), RESOURCENAME_BINDING);\n            protocolMarshaller.marshall(relationship.getRelationshipName(), RELATIONSHIPNAME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "@SafeVarargs\n\tpublic static <T> Collection<T> apply(Filter<T> filter, T ... elements) {\n\t\tList<T> list = new ArrayList<T>();\n\t\tif(elements != null) {\n\t\t\tfor(T element : elements) {\n\t\t\t\tlist.add(element);\n\t\t\t}\n\t\t}\n\t\treturn apply(filter, list);\n\t}", "protected void tag(String tag,ArrayList names,ArrayList values,int nattr,boolean close){\n  spacing();\n  m_out.print('<');\n  m_out.print(tag);\n  for (int i=0; i < nattr; ++i) {\n    m_out.print(' ');\n    m_out.print((String)names.get(i));\n    m_out.print('=');\n    m_out.print('\\\"');\n    escapeString((String)values.get(i));\n    m_out.print('\\\"');\n  }\n  if (close)   m_out.print('/');\n  m_out.print('>');\n  println();\n  if (!close) {\n    m_tagStack.add(tag);\n  }\n}\n", "public static double round ( double d , int res ) { BigDecimal bd = new BigDecimal ( d ) . setScale ( res , BigDecimal . ROUND_HALF_UP ) ; return bd . doubleValue ( ) ; }", "  public boolean isLogout() {\n    return logout;\n  }\n", "\tpublic void addModel(ConceptualModel model) {\n\t\tConceptualModelDescription descr = new ConceptualModelDescription(this,model);\n\t\tconceptualModels.addDescription(descr);\n\t\tsetModified(true);\n\t}\n", "public SPARQLRepository(String endpointUrl){\n  this(endpointUrl,endpointUrl);\n}\n", "public DVariable(String name,DValue value,int isolateId){\n  m_rawName=name;\n  m_attribs=value.getAttributes();\n  if (name != null) {\n    if (!isAttributeSet(VariableAttribute.PUBLIC_SCOPE)) {\n      int doubleColon=name.lastIndexOf(\"::\");\n      if (doubleC", "public RegexFileFilter ( String pattern , IOCase caseSensitivity ) { if ( pattern == null ) { throw new IllegalArgumentException ( STR_ ) ; } int flags = NUM_ ; if ( caseSensitivity != null && ! caseSensitivity . isCaseSensitive ( ) ) { flags = Pattern . ", "public static ByteBuffer fromString(String str,Charset charset){\n  return ByteBuffer.wrap(str.getBytes(charset));\n}\n", "public static boolean isSnapshotablePersistentTableView(Database db, Table table) {\n        Table materializer = table.getMaterializer();\n        if (materializer == null) {\n            // Return false if it is not a materialized view.\n            return false;\n        }\n        if (CatalogUtil.isTableExportOnly(db, materializer)) {\n            // The view source table should not be a streamed table.\n            return false;\n        }\n        if (! table.getIsreplicated() && table.getPartitioncolumn() == null) {\n            // If the view table is implicitly partitioned (maybe was not in snapshot),\n            // its maintenance is not turned off during the snapshot restore process.\n            // Let it take care of its own data by itself.\n            // Do not attempt to restore data for it.\n            return false;\n        }\n        return true;\n    }", "@Bean public EsSettingsHolder esSettingsHolder(){\n  return new DefaultSettingsHolder();\n}\n", "    private void deletaCategoria() {\n        System.out.print(\"Digite a ID da categoria a ser deletada: \");\n        String categoryId = input.nextLine();\n        try{\n            facade.removeCategory(this.login, categoryId);\n        }catch (Exception e) {\n            System.out.println(separador);\n            System.out.println(e.getMessage());\n            System.out.println(separador);\n            this.getMenuCategoria();\n        }\n        System.out.println(separador);\n        System.out.println(\"Categoria criada com sucesso.\");\n        System.out.println(separador);\n        this.getMenuCategoria();\n\n    }\n", "private void enableDisableSpacingFields(){\n  if (manuallySetNumColumns.isSelected()) {\n    tfNumColumns.setEnabled(true);\n  }\n else {\n    tfNumColumns.setEnabled(false);\n  }\n}\n", "public void addListener ( final ITagTreeManagerListener listener ) { m_listeners . addListener ( listener ) ; }", "public static boolean isSymlink(File file) throws IOException {\r\n        if (file == null) {\r\n            throw new NullPointerException(\"File must not be null\");\r\n        }\r\n        if (File.separatorChar == '\\\\') {\r\n            return false;\r\n        }\r\n        File fileInCanonicalDir;\r\n        if (file.getParent() == null) {\r\n            fileInCanonicalDir = file;\r\n        } else {\r\n            File canonicalDir = file.getParentFile().getCanonicalFile();\r\n            fileInCanonicalDir = new File(canonicalDir, file.getName());\r\n        }\r\n\r\n        return !fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile());\r\n    }", "private RequestTemplate appendQuery(String name,\n                                      Iterable<String> values,\n                                      CollectionFormat collectionFormat) {\n    if (!values.iterator().hasNext()) {\n      /* empty value, clear the existing values */\n      this.queries.remove(name);\n      return this;\n    }\n\n    /* create a new query template out of the information here */\n    this.queries.compute(name, (key, queryTemplate) -> {\n      if (queryTemplate == null) {\n        return QueryTemplate.create(name, values, this.charset, collectionFormat);\n      } else {\n        return QueryTemplate.append(queryTemplate, values, collectionFormat);\n      }\n    });\n    return this;\n  }", "public static void printNode(Node node,Writer pw) throws IOException {\n  printNode(node,new StreamResult(pw));\n  pw.write('\\n');\n  pw.flush();\n}\n", "public void write(PrintWriter writer, Janitor janitor) {\n        write(writer,janitor,warnings,\"warning\");\n        write(writer,janitor,errors,\"error\");\n    }", "public void tick ( String group , String handle ) { this . group ( group ) . tick ( handle ) ; }", "public static double tQuantile(double pp,double n){\n  double sq, p, a, b, c, d, x, y;\n  p=(pp < 0.5) ? 2.0 * pp : 2.0 * (1.0 - pp);\n  if (n <= 3.0) {\n    if (n == 1) {\n      sq=Math.tan(HALF_PI * (1.0 - p));\n    }\n else     if (n == 2.0) {\n      sq=Math.sqrt(2.0 / (p * (2.0 - p)) - 2.0);\n    }\n else {\n      sq=betaQuantile(p,0.5 * n,0.5);\n      if (sq != 0.0) {\n        sq=Math.sqrt(n / sq - n);\n      }\n    }\n  }\n else {\n    a=1.0 / (n - 0.5);\n    b=48.0 / (a * a);\n    c=((20700.0 * a / b - 98.0) * a - 16) * a + 96.36;\n    d=((94.5 / (b + c) - 3.0) / b + 1.0) * Math.sqrt(a * HALF_PI) * n;\n    x=d * p;\n    y=Math.pow(x,2.0 / n);\n    if (y > 0.05 + a) {\n      x=normalQuantile(0.5 * p);\n      y=x * x;\n      if (n < 5) {\n        c=c + 0.3 * (n - 4.5) * (x + 0.6);\n      }\n      c=(((0.05 * d * x - 5.0) * x - 7.0) * x - 2.0) * x + b + c;\n      y=(((((0.4 * y + 6.3) * y + 36.0) * y + 94.5) / c - y - 3.0) / b + 1.0) * x;\n      y=a * y * y;\n      y=(y > .002) ? Math.exp(y) - 1.0 : 0.5 * y * y + y;\n    }\n else {\n      y=((1.0 / (((n + 6.0) / (n * y) - 0.089 * d - 0.822) * (n + 2.0) * 3.0) + 0.5 / (n + 4.0)) * y - 1.0) * (n + 1.0) / (n + 2.0) + 1.0 / y;\n    }\n    sq=Math.sqrt(n * y);\n  }\n  if (pp < 0.5) {\n    sq=-sq;\n  }\n  return sq;\n}\n", "private void updateGraphType ( final IViewNode < ? > node ) { if ( m_graphType == GraphType . MIXED_GRAPH ) { if ( getNodeCount ( ) == NUM_ ) { if ( node instanceof INaviCodeNode ) { setGraphType ( GraphType . FLOWGRAPH ) ; } else if ( node instanceof INaviFunctionNode ) { setGraphType ( GraphType . CALLGRAPH ) ; } } } else if ( m_graphType == GraphType . CALLGRAPH ) { if ( node instanceof INaviCodeNode ) { setGraphType ( GraphType . MIXED_GRAPH ) ; } } else { if ( node instanceof INaviFunctionNode ) { setGraphType ( GraphType . MIXED_GRAPH ) ; } } }", "byte [ ] addParameter ( byte [ ] request , IParameter parameter ) ;", "void addEmotes(int emoteset){\n  String stream=emoteManager.getStreamFromEmoteset(emoteset);\n  if (stream == null) {\n    stream=\"-\";\n  }\n  Set<Emoticon> emotes=emoteManager.getEmoticons(emoteset);\n  List<Emoticon> sorted=new ArrayList<>(emotes);\n  Collections.sort(sorted,new SortEmotesByTypeAndName());\n  addTitle(stream + \" [\" + emoteset+ \"] (\"+ emotes.size()+ \" emotes)\");\n  addEmotesPanel(sorted);\n}\n", "    public boolean evaluateTree() {\n        return root.evaluate();\n    }\n", "\tpublic SIFMessage sendMessage(SIFMessage message) throws Exception {\n\t\t\n\t\ttry {\n\t\t\t// dispatching event\n\t\t\tonBeforeSendMessage.dispatch(this, message);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\t\n\t\tISIFConnection conn = SIFConnectionFactory.getConnection(uri);\n\t\tSIFMessage response = null;\n\t\ttry {\n\n\t\t\tresponse = conn.sendMessage(message);\n\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"error while sending message\", e);\n\t\t\tthrow (e);\n\t\t}\t\t\n\t\t\n\t\ttry {\n\t\t\t// dispatching event\n\t\t\tonAfterSendMessage.dispatch(this, response);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t\n\n\t\treturn (response);\n\t}\n", "public static byte[] toByteArray(InputStream stream) throws IOException {\n\t\treturn org.apache.commons.io.IOUtils.toByteArray(stream);\n\t}", "private boolean passPackageNameFilter(String resourceName){\n  for (  String context : packageWhitelist) {\n    if (resourceName.startsWith(context)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "  public boolean idlGetSetFrozen() {\n    read_if_needed_();\n    return _idl_get_set_frozen;\n  }\n", "public SecretsManager getSecretsManager ( ) {\n\n    mustBeOpen();\n\n    return this.secretsManager;\n}\n", "public static boolean isInternal(String version){\n  return version != null && (version.startsWith(INTERNAL_VERSION_PREFIX) || version.endsWith(INTERNAL_VERSION_SUFFIX));\n}\n", "public void paint ( Graphics2D g ) { g . setRenderingHint ( RenderingHints . KEY_ANTIALIASING , RenderingHints . VALUE_ANTIALIAS_ON ) ; origAlpha = NUM_ ; Composite origComposite = g . getComposite ( ) ; if ( origComposite instanceof AlphaComposite ) { AlphaComposite origAlphaComposite = ( AlphaComposite ) origComposite ; if ( origAlphaComposite . getRule ( ) == AlphaComposite . SRC_OVER ) { origAlpha = origAlphaComposite . getAlpha ( ) ; } } AffineTransform trans_0 = g . getTransform ( ) ; paintRootGraphicsNode_0 ( g ) ; g . setTransform ( trans_0 ) ; }", "private CGlobalSettings ( ) { }", "public static ViewDragHelper create ( ViewGroup forParent , Callback cb ) { return new ViewDragHelper ( forParent . getContext ( ) , forParent , cb ) ; }", "    public void addRecognizedFeatures(String[] featureIds) {\n\n        // add recognized features\n        int featureIdsCount = featureIds != null ? featureIds.length : 0;\n        for (int i = 0; i < featureIdsCount; i++) {\n            String featureId = featureIds[i];\n            if (!fRecognizedFeatures.contains(featureId)) {\n                fRecognizedFeatures.add(featureId);\n            }\n        }\n\n    } // addRecognizedFeatures(String[])\n", "    protected AnnotationIndicatorPanel createAnnotationIndicatorPanel(DICOMImageHeader imgHeader) {\n        return(new TextAnnotationIndicatorPanel(imgHeader));\n    }\n", "protected void generateServiceDescriptor(String className, GeneratedFile generatedFile) throws IOException {\n        CharSequence contents = generatedFile.getTextContent();\n        if (contents != null) {\n            String[] entries = contents.toString().split(\"\\\\n\");\n            if (!Arrays.asList(entries).contains(className)) {\n                try (BufferedWriter w = new BufferedWriter(generatedFile.openWriter())) {\n                    w.newLine();\n                    w.write(className);\n                }\n            }\n        } else {\n            try (BufferedWriter w = new BufferedWriter(generatedFile.openWriter())) {\n                w.write(className);\n            }\n        }\n    }", "\tpublic List getPropertyDescriptors(Object object) {\n\t\tif (itemPropertyDescriptors == null) {\n\t\t\tsuper.getPropertyDescriptors(object);\n\n\t\t\taddDetinp_detPropertyDescriptor(object);\n\t\t\taddDetinp_inpPropertyDescriptor(object);\n\t\t}\n\t\treturn itemPropertyDescriptors;\n\t}\n", "  public int getMinimumValue () {\n    return (count + modifier);\n  }\n", "protected void readImage() throws IOException {\n        ix = readShort();    // (sub)image position & size\n        iy = readShort();\n        iw = readShort();\n        ih = readShort();\n        \n        int packed = in.read();\n        lctFlag = (packed & 0x80) != 0;     // 1 - local color table flag\n        interlace = (packed & 0x40) != 0;   // 2 - interlace flag\n        // 3 - sort flag\n        // 4-5 - reserved\n        lctSize = 2 << (packed & 7);        // 6-8 - local color table size\n        m_bpc = newBpc(m_gbpc);\n        if (lctFlag) {\n            m_curr_table = readColorTable((packed & 7) + 1);   // read table\n            m_bpc = newBpc((packed & 7) + 1);\n        }\n        else {\n            m_curr_table = m_global_table;\n        }\n        if (transparency && transIndex >= m_curr_table.length / 3) {\n            transparency = false;\n        }\n        if (transparency && m_bpc == 1) { \n        \t// Acrobat 5.05 doesn't like this combination\n            byte tp[] = new byte[12];\n            System.arraycopy(m_curr_table, 0, tp, 0, 6);\n            m_curr_table = tp;\n            m_bpc = 2;\n        }\n        boolean skipZero = decodeImageData();   // decode pixel data\n        if (!skipZero)\n            skip();\n        \n        Image img = null;\n        try {\n            img = new ImgRaw(iw, ih, 1, m_bpc, m_out);\n            PdfArray colorspace = new PdfArray();\n            colorspace.add(PdfName.INDEXED);\n            colorspace.add(PdfName.DEVICERGB);\n            int len = m_curr_table.length;\n            colorspace.add(new PdfNumber(len / 3 - 1));\n            colorspace.add(new PdfString(m_curr_table));\n            PdfDictionary ad = new PdfDictionary();\n            ad.put(PdfName.COLORSPACE, colorspace);\n            img.setAdditional(ad);\n            if (transparency) {\n                img.setTransparency(new int[]{transIndex, transIndex});\n            }\n        }\n        catch (Exception e) {\n            throw new ExceptionConverter(e);\n        }\n        img.setOriginalType(Image.ORIGINAL_GIF);\n        img.setOriginalData(fromData);\n        img.setUrl(fromUrl);\n        GifFrame gf = new GifFrame();\n        gf.image = img;\n        gf.ix = ix;\n        gf.iy = iy;\n        frames.add(gf);   // add image to frame list\n        \n        //resetFrame();\n        \n    }", "    public void processEvents(EventFeeder eventFeeder) {\n\ttry {\n\t    String event;\n\t    while ((event = eventFeeder.nextEvent()) != null) {\n\t\tSystem.out.print(event + \":  \");\n\t\tprocessEventMatrix(event);\n\t\tSystem.out.println();\n\t    }\n\t} catch (FeederException e) {\n\t    e.printStackTrace();\n\t    System.exit(1);\t    \n\t} catch (NoSuchFieldException e) {\n\t    e.printStackTrace();\n\t    System.exit(1);\t    \n\t}\t\n    }\n", "@SuppressWarnings({\"unchecked\"}) @Override public byte[] serialize(List list){\n  if (list == null)   return null;\n  final int size=list.size();\n  final int[] valueIDs=new int[size];\n  final byte[][] valueBytes=new byte[size][];\n  int totalSize=4 + size * 8;\n  int i=0;\n  Iterator iter=list.iterator();\n  while (iter.hasNext()) {\n    final Object value=iter.next();\n    Class<?> valueClass=value.getClass();\n    int valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass);\n    if (valueTypeID == -1) {\n      if (value instanceof List) {\n        valueClass=List.class;\n        valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass);\n      }\n else       if (value instanceof Map) {\n        valueClass=Map.class;\n        valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass);\n      }\n else {\n        throw new IllegalArgumentException(\"Unsupported class: \" + valueClass.getName());\n      }\n    }\n    valueIDs[i]=valueTypeID;\n    final EntitySerDeser valueSerDer=EntityDefinitionManager.getSerDeser(valueClass);\n    if (valueSerDer == null) {\n      throw new IllegalArgumentException(\"Unsupported class: \" + valueClass.getName());\n    }\n    valueBytes[i]=valueSerDer.serialize(value);\n    totalSize+=valueBytes[i].length;\n    ++i;\n  }\n  final byte[] result=new byte[totalSize];\n  int offset=0;\n  ByteUtil.intToBytes(size,result,offset);\n  offset+=4;\n  for (i=0; i < size; ++i) {\n    ByteUtil.intToBytes(valueIDs[i],result,offset);\n    offset+=4;\n    ByteUtil.intToBytes(valueBytes[i].length,result,offset);\n    offset+=4;\n    System.arraycopy(valueBytes[i],0,result,offset,valueBytes[i].length);\n    offset+=valueBytes[i].length;\n  }\n  return result;\n}\n", "public void start() throws Exception\n    {\n        Preconditions.checkState(state.compareAndSet(State.LATENT, State.STARTED), \"Cannot be started more than once\");\n\n        client.getConnectionStateListenable().addListener(connectionStateListener);\n        try\n        {\n            client.create().creatingParentContainersIfNeeded().forPath(path, seedValue);\n        }\n        catch ( KeeperException.NodeExistsException ignore )\n        {\n            // ignore\n        }\n\n        readValue();\n    }", "public StringRequest ( String url , Listener < String > listener , ErrorListener errorListener ) { this ( Method . GET , url , listener , errorListener ) ; }", "public Object eval(String statements,NameSpace nameSpace) throws EvalError {\n  String s=(statements.endsWith(\";\") ? statements : statements + \";\");\n  return eval(new StringReader(s),nameSpace,\"inline evaluation of: ``\" + showEvalString(s) + \"''\");\n}\n", "void deleteReference ( COperandTreeNode node , IAddress address , ReferenceType type ) throws CouldntDeleteException ;", "    public Object setProperty(Object bean, String propertyName, Object value) {\n        try {\n            PropertyAccessors accessorMethods = getAccessorMethods(bean, propertyName);\n            return accessorMethods.invokeSetter(bean, value);\n        }\n        catch (Exception e) {\n            log.error(e.toString(), e);\n            return null;\n        }\n    }\n", "    public boolean maxValue(Number value, Number max) {\n        if (isAllowFractions()) {\n            return (value.doubleValue() <= max.doubleValue());\n        } else {\n            return (value.longValue() <= max.longValue());\n        }\n    }\n", "public RemoveHistoryItemAction ( ) { super ( WorkbenchMessages . FilteredItemsSelectionDialog_removeItemsFromHistoryAction ) ; }", "public static boolean isTimesEqaualed ( Date time1 , Date time2 ) { return formatTime ( time1 ) . equals ( formatTime ( time2 ) ) ; }", "public void remove ( int amount ) { int size = stack . size ( ) ; for ( int i = size - NUM_ ; i > size - NUM_ - amount ; i -- ) { popWithMessage ( i ) ; } }", "  public void writeIsValid() throws IOException {\n    out(\"\");\n    out(\"  public boolean isValid() {\");\n    out(\"    return this.valid;\");\n    out(\"  }\");\n  }\n", "@SuppressWarnings(\"unchecked\") protected void rehash(){\n  int oldCapacity=table.length;\n  Entry<?,?>[] oldMap=table;\n  int newCapacity=(oldCapacity << 1) + 1;\n  if (newCapacity - MAX_ARRAY_SIZE > 0) {\n    if (oldCapacity == MAX_ARRAY_SIZE)     return;\n    newCapacity=MAX_ARRAY_SIZE;\n  }\n  Entry<?,?>[] newMap=new Entry<?,?>[newCapacity];\n  modCount++;\n  threshold=(int)Math.min(newCapacity * loadFactor,MAX_ARRAY_SIZE + 1);\n  table=newMap;\n  for (int i=oldCapacity; i-- > 0; ) {\n    for (Entry<K,V> old=(Entry<K,V>)oldMap[i]; old != null; ) {\n      Entry<K,V> e=old;\n      old=old.next;\n      int index=(e.hash & 0x7FFFFFFF) % newCapacity;\n      e.next=(Entry<K,V>)newMap[index];\n      newMap[index]=e;\n    }\n  }\n}\n", "    public AnnotatedProperties evaluateReferences(PropertyEvaluator evaluator, boolean failIfUnreferenced) {\n        expandWildcards(evaluator, failIfUnreferenced);\n\n        AnnotatedProperties replaced = new AnnotatedProperties();\n        List stack = new ArrayList();\n\n        for (Iterator i = entrySet().iterator(); i.hasNext();) {\n            Map.Entry entry = (Map.Entry)i.next();\n            stack.clear();\n            evaluateReference(evaluator, (String)entry.getKey(), replaced, failIfUnreferenced, stack);\n        }\n\n        return replaced;\n    }\n", "@Override\n\tpublic ViewHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {\n\t\t// Create a new view.\n\t\tView v = LayoutInflater.from(viewGroup.getContext())\n\t\t\t\t.inflate(R.layout.rv_card, viewGroup, false);\n\t\tViewHolder viewHolder = new ViewHolder(v);\n\n\t\tv.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tint itemPosition = viewHolder.getAdapterPosition();\n\n\t\t\t\tRecyclerAdapter.this.getJarr();\n\t\t\t\tString id = jarr.get(itemPosition).asJsonObject().getString(\"id\");\n\t\t\t\tLog.d(TAG, \"Element \" + itemPosition + \" clicked. with id : \" + id);\n\t\t\t\tMyJus.intructablesApi().info(id);\n\t\t\t\tFragment prevFragment = ((MainActivity) v.getContext())\n\t\t\t\t\t\t.getSupportFragmentManager().findFragmentById(R.id.container);\n\t\t\t\tFragment fragment = DetailFragment.newInstance();\n\t\t\t\t((MainActivity) v.getContext()).getSupportFragmentManager()\n\t\t\t\t\t\t.beginTransaction()\n\t\t\t\t\t\t.hide(prevFragment).add(R.id.container, fragment).addToBackStack(null)\n\t\t\t\t\t\t.commit();\n\t\t\t}\n\t\t});\n\n\t\treturn viewHolder;\n\t}", "private static int spinsFor(Node pred,boolean haveData){\n  if (MP && pred != null) {\n    if (pred.isData != haveData)     return FRONT_SPINS + CHAINED_SPINS;\n    if (pred.isMatched())     return FRONT_SPINS;\n    if (pred.waiter == null)     return CHAINED_SPINS;\n  }\n  return 0;\n}\n", "\tpublic void deleteStation(int i) {\n\t\tif (stations < 2) {\n\t\t\tthrow new RuntimeException(\"System must have at least one station\");\n\t\t}\n\t\tstations--;\n\t\tstationNames = ArrayUtils.delete(stationNames, i);\n\t\tstationTypes = ArrayUtils.delete(stationTypes, i);\n\t\tstationServers = ArrayUtils.delete(stationServers, i);\n\n\t\tvisits = ArrayUtils.delete2_1(visits, i);\n\t\tserviceTimes = ArrayUtils.delete3_1(serviceTimes, i);\n\n\t\tresize(stations, classes);\n\t\t//DEK (Federico Granata) 3-10-2003\n\t\t//it was considering the results valid when a class is cancelled\n\t\thasResults = false;\n\t\t//END\n\t}\n", "private String toTag(String name, Archive source, Analyzer.Type type) {\n        if (!isJDKArchive(source)) {\n            return source.getName();\n        }\n\n        JDKArchive jdk = (JDKArchive)source;\n        boolean isExported = false;\n        if (type == CLASS || type == VERBOSE) {\n            isExported = jdk.isExported(name);\n        } else {\n            isExported = jdk.isExportedPackage(name);\n        }\n        Profile p = getProfile(name, type);\n        if (isExported) {\n            // exported API\n            return options.showProfile && p != null ? p.profileName() : \"\";\n        } else {\n            return \"JDK internal API (\" + source.getName() + \")\";\n        }\n    }", "public HttpRequest ifNoneMatch ( final String ifNoneMatch ) { return header ( HEADER_IF_NONE_MATCH , ifNoneMatch ) ; }", "public String encodeBuffer(byte aBuffer[]) {\n        ByteArrayOutputStream   outStream = new ByteArrayOutputStream();\n        ByteArrayInputStream    inStream = new ByteArrayInputStream(aBuffer);\n        try {\n            encodeBuffer(inStream, outStream);\n        } catch (Exception IOException) {\n            // This should never happen.\n            throw new Error(\"CharacterEncoder.encodeBuffer internal error\");\n        }\n        return (outStream.toString());\n    }", "protected static < T > T test ( UnsafeCopier copier , T src , T dest ) { return test ( copier , src , NUM_ , dest ) ; }", "boolean doActionDeviceRenameInternet ( String deviceKey , String deviceName ) ;", "private boolean shouldSkipChildren(CCFGNode node,Set<CCFGEdge> handledBackEdges,Set<CCFGNode> children,boolean handleLoops){\n  if (node == null || children == null)   return true;\n  boolean skipChildren=false;\n  if (handleLoops) {\n    for (    CCFGNode child : children) {\n      CCFGEdge currentEdge=ccfg.getEdge(node,child);\n      if (handledBackEdges.contains(currentEdge)) {\n        skipChildren=true;\n        break;\n      }\n    }\n  }\n  return skipChildren;\n}\n", "public <ReturnValue> ReturnValue executeOnEntry(@NotNull Entry entry, @NotNull CacheEntryProcessor<Long, Entry, ReturnValue> entryProcessor) {\n        long key = buildHashCode(entry);\n\n        if (!cache.containsKey(key)) {\n            List<Object> primaryKeys = getPrimaryKeys(entry);\n\n            List<Entry> entries = super.fetch(primaryKeys);\n\n            Optional<Entry> first = entries.stream().findFirst();\n\n            if (first.isPresent()) {\n                cache.putIfAbsent(key, first.get());\n            }\n        }\n\n        return cache.invoke(key, entryProcessor);\n    }", "public String replaceString(String string, String strTarget, String strReplace)\n    {\n        int iIndex = 0;\n        while ((iIndex = string.indexOf(strTarget, iIndex)) != -1)\n        {\n            char chNext = ' ';\n            char chPrev = ' ';\n            if (string.length() > iIndex + strTarget.length())\n                chNext = string.charAt(iIndex + strTarget.length());\n            if (iIndex > 1)\n                chPrev = string.charAt(iIndex - 1);\n            if (COMPARE_ANY_STRING)\n            {   // Compare any string, not just names\n                chNext = '.';\n                chPrev = '.';\n            }\n            if (Character.isLetterOrDigit(chNext))\n            { // Alphanumeric = longer than target.. don't change\n                iIndex = iIndex + strTarget.length();\n            }\n            else if (Character.isLetterOrDigit(chPrev))\n            { // Alphanumeric = longer than target.. don't change\n                iIndex = iIndex + strTarget.length();\n            }\n            else\n            { // space/other = end of char.. change\n                string = string.substring(0, iIndex) + strReplace + string.substring(iIndex + strTarget.length());\n                iIndex = iIndex + strReplace.length();\nSystem.out.println(\"New String \" + string);\n            }\n        }\n        return string;\n    }", "public boolean isSelected ( ) { return m_node . isSelected ( ) ; }", "    public Conduit selectConduit(Message message) {\n        Exchange exchange = message.getExchange();\n        InvocationKey key = new InvocationKey(exchange);\n        InvocationContext invocation = inProgress.get(key);\n        if ((invocation != null) && !invocation.getContext().containsKey(IS_DISTRIBUTED)) {\n            Endpoint target = getDistributionTarget(exchange, invocation);\n            if (target != null) {\n                setEndpoint(target);\n                if (selectedConduit != null) {\n                    selectedConduit.close();\n                    selectedConduit = null;\n                }\n                message.put(Message.ENDPOINT_ADDRESS, target.getEndpointInfo().getAddress());\n                overrideAddressProperty(invocation.getContext());\n                invocation.getContext().put(IS_DISTRIBUTED, null);\n            }\n        }\n        return getSelectedConduit(message);\n    }\n", "String enc(String str){\n  return HTMLEntities.escapeHTML(str,HTMLEntities.HTMLV20);\n}\n", "@Programmatic\n    public SessionLogEntry findBySessionId(final String sessionId) {\n        return repositoryService.firstMatch(\n                new QueryDefault<>(SessionLogEntry.class,\n                        \"findBySessionId\",\n                        \"sessionId\", sessionId));\n    }", "public static String[] splitValues (final String values) {\n        if (values == null) return null;\n        return values.split(TextKeyword.COMMA);\n    }", "    public FidFilter createFidFilter() {\n        return new FidFilterImpl();\n    }\n", "ConcurrentSender parallel ( int parallelNum ) ;", "public int compareTo ( Issue otherIssue ) { return this . getKey ( ) . compareTo ( otherIssue . getKey ( ) ) ; }", "public void start ( Context context ) throws NetworkErrorException { ConnectivityManager connMgr = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo networkInfo = connMgr . getActiveNetworkInfo ( ) ; if ( networkInfo != null && networkInfo . isConnected ( ) ) { new DownloadManager ( ) . execute ( QUOTES_URL ) ; } else { throw new NetworkErrorException ( STR_ ) ; } }", "private int generatePermutationId ( double [ ] data ) { int permutationId = NUM_ ; for ( int c = NUM_ ; c < dimensions ; c ++ ) { permutationId *= dimensions ; permutationId += ( int ) data [ c ] ; } return permutationId ; }", "@Override public void write(int b) throws IOException {\n  fileStream.write(b);\n  outputStream.write(b);\n}\n", "public static TypeDialog createEditTypeDialog ( final JFrame owner , final TypeManager manager , final BaseType baseType ) { return new TypeDialog ( owner , manager , baseType ) ; }", "protected void makeWidgets(){\n  String locText;\n  GridBagLayout gridbag=new GridBagLayout();\n  GridBagConstraints c=new GridBagConstraints();\n  Insets leftInsets=new Insets(0,10,0,10);\n  Insets rightInsets=new Insets(0,0,0,10);\n  setLayout(gridbag);\n  locText=i18n.get(MGRSCoordPanel.class,\"border\",\"MGRS Coordinate\");\n  setBorder(new TitledBorder(new EtchedBorder(),locText));\n  locText=i18n.get(MGRSCoordPanel.class,\"mgrsLabel\",\"MGRS: \");\n  JLabel mgrsLabel=new JLabel(locText);\n  c.gridx=0;\n  c.fill=GridBagConstraints.NONE;\n  c.weightx=0f;\n  c.insets=leftInsets;\n  gridbag.setConstraints(mgrsLabel,c);\n  add(mgrsLabel);\n  mgrs=new JTextField(20);\n  c.gridx=1;\n  c.fill=GridBagConstraints.HORIZONTAL;\n  c.weightx=1.0f;\n  c.insets=rightInsets;\n  gridbag.setConstraints(mgrs,c);\n  add(mgrs);\n}\n", "private void configureButton(JButton button){\n  Font buttonFont=(Font)DefaultLookup.get(optionPane,this,\"OptionPane.buttonFont\");\n  if (buttonFont != null) {\n    button.setFont(buttonFont);\n  }\n}\n", "\tpublic void removeColumn( int index ) {\n\t\tsynchronized (this.paintLock) {\n\t\t\tthis.tableData.removeColumn(index);\n\t\t\trequestInit();\n\t\t}\n\t}\n", "private void checkMatrixBounds ( ) { RectF rect = getMatrixRectF ( ) ; float deltaX = NUM_ , deltaY = NUM_ ; final float viewWidth = getWidth ( ) ; final float viewHeight = getHeight ( ) ; if ( rect . top > NUM_ && isCheckTopAndBottom ) { deltaY = - rect ", "        public Accessible getAccessibleParent() {\n            if (accessibleParent != null) {\n                return accessibleParent;\n            } else {\n                MenuContainer parent = MenuComponent.this.getParent();\n                if (parent instanceof Accessible) {\n                    return (Accessible) parent;\n                }\n            }\n            return null;\n        }\n", "public Observable<Void> beginPublishAsync(String resourceGroupName, String automationAccountName, String runbookName) {\n        return beginPublishWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName).map(new Func1<ServiceResponseWithHeaders<Void, RunbookDraftPublishHeaders>, Void>() {\n            @Override\n            public Void call(ServiceResponseWithHeaders<Void, RunbookDraftPublishHeaders> response) {\n                return response.body();\n            }\n        });\n    }", "public static CmsInlineEntityWidget createWidgetForEntity(\n        Element element,\n        I_CmsInlineFormParent formParent,\n        CmsEntity parentEntity,\n        CmsAttributeHandler attributeHandler,\n        int attributeIndex,\n        I_CmsInlineHtmlUpdateHandler htmlUpdateHandler,\n        I_CmsWidgetService widgetService) {\n\n        CmsInlineEntityWidget widget = new CmsInlineEntityWidget(\n            element,\n            formParent,\n            parentEntity,\n            attributeHandler,\n            attributeIndex,\n            htmlUpdateHandler,\n            widgetService);\n        CmsInlineEditOverlay.getRootOverlay().addButton(widget, getButtonTop(element));\n        attributeHandler.updateButtonVisibilty(widget);\n        return widget;\n    }", "public boolean isModelValue ( ) { return modelValue ; }", "protected void decrementTaskCount(){\n  taskCountLock.lock();\n  try {\n    taskCount--;\n    if (taskCount == 0) {\nsynchronized (threadPool) {\n        threadPool.notify();\n      }\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n finally {\n    taskCountLock.unlock();\n  }\n}\n", "private static boolean isFinalCased(String src,int index,Locale locale){\n  BreakIterator wordBoundary=BreakIterator.getWordInstance(locale);\n  wordBoundary.setText(src);\n  int ch;\n  for (int i=index; (i >= 0) && !wordBoundary.isBoundary(i); i-=Character.charCount(ch)) {\n    ch=src.codePointBefore(i);\n    if (isCased(ch)) {\n      int len=src.length();\n      for (i=index + Character.charCount(src.codePointAt(index)); (i < len) && !wordBoundary.isBoundary(i); i+=Character.charCount(ch)) {\n        ch=src.codePointAt(i);\n        if (isCased(ch)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\n", "public Integer countPagesContainingTemplateNames ( List < String > templateNames ) throws WikiApiException { return countFilteredPages ( templateNames , BOOL_ ) ; }", "public void write ( BufferedRandomAccessFile raf ) throws IOException { int len = this . word . length ; raf . writeNat ( len ) ; for ( int i = NUM_ ; i < len ; i ++ ) { raf . writeLong ( this . word [ i ] ) ; } }", "public static void main ( String argv [ ] ) throws Exception { PingLauncher launcher = new PingLauncher ( ) ; try { launcher . process ( argv ) ; } catch ( Throwable e ) { logger . fatal ( STR_ + e . getMessage ( ) , e ) ; } exitWithSuccess ( ) ; }", "public boolean isNaN(){\n  return Double.isNaN(x.getReal()) || Double.isNaN(y.getReal()) || Double.isNaN(z.getReal());\n}\n", "\tpublic void setTokenActive(Token token, boolean isActive) {\n\t\ttoken.setActive(isActive);\n\t\tif (isActive) {\n\t\t\tfireSetData();\n\t\t} else {\n\t\t\tfireGetData();\n\t\t}\n\t}\n", "public String toHTML(){\n  List<TestCase> failed=getFailedTestCases();\n  List<TestCase> passed=getPassedTestCases();\n  List<TestCase> skipped=getSkippedTestCases();\n  StringBuffer buff=new StringBuffer();\n  for (  TestCase tc : failed) {\n    buff.append(tc.toHTML());\n  }\n  for (  TestCase tc : passed) {\n    buff.append(tc.toHTML());\n  }\n  for (  TestCase tc : skipped) {\n    buff.append(tc.toHTML());\n  }\n  Object[] params={name,buff.toString()};\n  return MessageFormat.format(HTMLConstants.TEST_TABLE,params);\n}\n", "private void initializeLocalhostNI() {\n    InetAddress localhost;\n    try {\n      localhost = InetAddress.getLocalHost();\n      NetworkInterface ni = NetworkInterface.getByInetAddress(localhost);\n\n      if (ni != null)\n        getNIList().add(ni.getName());\n\n    } catch (UnknownHostException | SocketException e) {\n      Console.severe(\"Cannot get the Network Interface for localhost\");\n      Console.severe(e.getMessage());\n    }\n\n  }", "public static < K > PriorityQueue < K > synchronize ( final PriorityQueue < K > q ) { return new SynchronizedPriorityQueue < K > ( q ) ; }", "protected TokenList.Token createOp( TokenList.Token left , TokenList.Token op , TokenList.Token right ,\n                                      TokenList tokens , Sequence sequence )\n    {\n        Operation.Info info = functions.create(op.symbol, left.getVariable(), right.getVariable());\n\n        sequence.addOperation(info.op);\n\n        // replace the symbols with their output\n        TokenList.Token t = new TokenList.Token(info.output);\n        tokens.remove(left);\n        tokens.remove(right);\n        tokens.replace(op,t);\n        return t;\n\n    }", "\t\tpublic void startSubscriber() {\n\t\t\ttry {\n\t\t\t\tSystem.out.println(\"Starting subscriber\");\n\t\t\t\ttopicConnection.stop();\n\t\t\t\ttopicSubscriber = topicSession.createDurableSubscriber(topic,\n\t\t\t\t\t\"MakeItLast\");\n\t\t\t\ttopicListener = new TextListener();\n\t\t\t\ttopicSubscriber.setMessageListener(topicListener);\n\t\t\t\ttopicConnection.start();\n\t\t\t} catch (JMSException e) {\n\t\t\t\tSystem.out.println(\"Exception occurred: \" + e.toString());\n\t\t\t\texitResult = 1;\n\t\t\t}\n\t\t}\n", "@Override public boolean isReadyForRemoval(){\n  return isReadyForRemoval;\n}\n", "public AuthorizationInterceptor setFlags(Collection<AuthorizationFlagsEnum> theFlags) {\n\t\tValidate.notNull(theFlags, \"theFlags must not be null\");\n\t\tmyFlags = new HashSet<>(theFlags);\n\t\treturn this;\n\t}", "public java.util.List<String> getSpotFleetRequestIds() {\n        if (spotFleetRequestIds == null) {\n            spotFleetRequestIds = new com.amazonaws.internal.SdkInternalList<String>();\n        }\n        return spotFleetRequestIds;\n    }", "\tpublic AttributeSet parseDeclaration(String string) {\n\t    try {\n\t\treturn parseDeclaration(new StringReader(string));\n\t    } catch (IOException ioe) {}\n\t    return null;\n\t}\n", "public void move(double x,double y){\n  Move move=new Move(x,y);\n  if (x < minX) {\n    minX=x;\n  }\n  if (y < minY) {\n    minY=y;\n  }\n  if (x > maxX) {\n    maxX=x;\n  }\n  if (y > maxY) {\n    maxY=y;\n  }\n  elements.add(move);\n}\n", "private boolean containsAddress ( final INaviView rawView , final long address ) { for ( final INaviViewNode node : rawView . getGraph ( ) ) { if ( node instanceof INaviFunctionNode ) { final INaviFunctionNode fnode = ( INaviFunctionNode ) node ; if ( fnode . getAddress ( ) . toLong ( ) == address ) { return BOOL_ ; } } else if ( node instanceof INaviCodeNode ) { final INaviCodeNode cnode = ( INaviCodeNode ) node ; for ( final INaviInstruction instruction : cnode . getInstructions ( ) ) { if ( instruction . getAddress ( ) . toLong ( ) == address ) { return BOOL_ ; } } } } return BOOL_ ; }", "@Nonnull\n\tpublic static <T, R> LObjSrtFunction<T, R> objSrtFunctionFrom(Consumer<LObjSrtFunctionBuilder<T, R>> buildingFunction) {\n\t\tLObjSrtFunctionBuilder builder = new LObjSrtFunctionBuilder();\n\t\tbuildingFunction.accept(builder);\n\t\treturn builder.build();\n\t}", "\tpublic String getParameterType(ParameterID parameterId) {\n\t\ttry {\n\t\t\treturn ParameterLocalClient.getService().getType(parameterId);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n", "public static BigDecimal toBigDecimal(Number self){\n  if ((self instanceof Long) || (self instanceof Integer) || (self instanceof Short)|| (self instanceof Byte)) {\n    return BigDecimal.valueOf(self.longValue());\n  }\n  return new BigDecimal(self.toString());\n}\n", "public OvhNewProjectInfo createProjectInfo_GET(String voucher) throws IOException {\n\t\tString qPath = \"/cloud/createProjectInfo\";\n\t\tStringBuilder sb = path(qPath);\n\t\tquery(sb, \"voucher\", voucher);\n\t\tString resp = exec(qPath, \"GET\", sb.toString(), null);\n\t\treturn convertTo(resp, OvhNewProjectInfo.class);\n\t}", "public static void println ( int priority , String tag , String msg , Throwable tr ) { if ( mLogNode != null ) { mLogNode . println ( priority , tag , msg , tr ) ; } }", "public static String generateStringOfLength(int length){\n  StringBuilder sb=new StringBuilder();\n  while (--length >= 0) {\n    sb.append((char)(random.nextInt(52) + 65));\n  }\n  return sb.toString();\n}\n", "public static boolean isCookieDomainValid(String cookieDomain){\n  return StringUtils.isEmpty(cookieDomain) || !cookieDomain.contains(\":\");\n}\n", "protected Cluster<BiclusterModel> defineBicluster(BitSet rows,BitSet cols){\n  ArrayDBIDs rowIDs=rowsBitsetToIDs(rows);\n  int[] colIDs=colsBitsetToIDs(cols);\n  return new Cluster<>(rowIDs,new BiclusterModel(colIDs));\n}\n", "public static Minutes minutes(int minutes) {\n        switch (minutes) {\n            case 0:\n                return ZERO;\n            case 1:\n                return ONE;\n            case 2:\n                return TWO;\n            case 3:\n                return THREE;\n            case Integer.MAX_VALUE:\n                return MAX_VALUE;\n            case Integer.MIN_VALUE:\n                return MIN_VALUE;\n            default:\n                return new Minutes(minutes);\n        }\n    }", "    public void removeDuplicate(Object inValue){\n        myDuplicates.remove(inValue);\n    }\n", "private void buildDefaultValues ( StringBuilder sb , List < VariableDef > params , int indentation ) throws SyntaxException { for ( VariableDef v : params ) { if ( v . getInit ( ) != null ) { buildIndentation ( sb , indentation ) ; sb . append ( v . getNa", "public static void runExample(\n      AdManagerServices adManagerServices, AdManagerSession session, int activityGroupId)\n      throws RemoteException {\n    // Get the ActivityService.\n    ActivityServiceInterface activityService =\n        adManagerServices.get(session, ActivityServiceInterface.class);\n\n    // Create a daily visits activity.\n    Activity dailyVisitsActivity = new Activity();\n    dailyVisitsActivity.setName(\"Activity #\" + new Random().nextInt(Integer.MAX_VALUE));\n    dailyVisitsActivity.setActivityGroupId(activityGroupId);\n    dailyVisitsActivity.setType(ActivityType.DAILY_VISITS);\n\n    // Create a custom activity.\n    Activity customActivity = new Activity();\n    customActivity.setName(\"Activity #\" + new Random().nextInt(Integer.MAX_VALUE));\n    customActivity.setActivityGroupId(activityGroupId);\n    customActivity.setType(ActivityType.CUSTOM);\n\n    // Create the activities on the server.\n    Activity[] activities =\n        activityService.createActivities(new Activity[] {dailyVisitsActivity, customActivity});\n\n    for (Activity createdActivity : activities) {\n      System.out.printf(\n          \"An activity with ID %d, name '%s', and type '%s' was created.%n\",\n          createdActivity.getId(), createdActivity.getName(), createdActivity.getType());\n    }\n  }", "\tpublic Object visit(Statement.Let statement) {\n\t\t// Create new environment for each assignment\n\t\tfor(Assignment assignment: statement.getAssignments()) {\n\t\t\tenvironment = new Environment(environment);\n\t\t\tassignment.accept(this);\n\t\t}\n\t\t\n\t\tif(statement.getStatements().size() > 1 && ! document.hasRootElement()) { \n\t\t\tcreateXHTMLRoot(false);\n\t\t}\n\t\t\n\t\t// Visit sub-statements\n\t\tint depth = this.depth;\n\t\tfor(Statement sub: statement.getStatements()) {\n\t\t\tsub.accept(this);\n\t\t\trestoreCurrent(depth);\n\t\t}\n\t\t\n\t\t// Restore previous state by removing each assignment environment\n\t\tfor(int i = 0; i < statement.getAssignments().size(); i++) {\n\t\t\tenvironment = environment.getParent();\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n", "public GitkitUser getUserByLocalId(String localId)\n      throws GitkitClientException, GitkitServerException {\n    Preconditions.checkNotNull(localId);\n    try {\n      JSONObject result = rpcHelper.getAccountInfoById(localId);\n      return jsonToUser(result.getJSONArray(\"users\").getJSONObject(0));\n    } catch (JSONException e) {\n      throw new GitkitServerException(e);\n    }\n  }", "\t\tpublic void execute() {\n\t\t\tsaveAs();\n        }\n", "    public boolean isDirectoryTarget() {\n        return this.directoryTarget;\n    }\n", "protected void rehash ( int newCapacity ) { int oldCapacity = _set . length ; int oldKeys [ ] = _set ; V oldVals [ ] = _values ; byte oldStates [ ] = _states ; _set = new int [ newCapacity ] ; _values = ( V [ ] ) new Object [ newCapacity ] ; _states = new byte [ newCapacity ] ; for ( int i = oldCapacity ; i -- > NUM_ ; ) { if ( oldStates [ i ] == FULL ) { int o = oldKeys [ i ] ; int index = insertionIndex ( o ) ; _set [ index ] = o ; _values [ index ] = oldVals [ i ] ; _states [ index ] = FULL ; } } }", "public String toString ( ) { return getClass ( ) . getName ( ) + STR_ + lease + STR_ ; }", "private static int partition(float[] floatArray, int start, int end) {\n        float pivot = floatArray[end];\n        int index = start - 1;\n        \n        for(int j = start; j < end; j++) {\n            if(floatArray[j] <= pivot) {\n                index++;\n                TrivialSwap.swap(floatArray, index, j);\n            }\n        }\n        \n        TrivialSwap.swap(floatArray, index + 1, end);\n        \n        return index + 1;\n    }", "@Deprecated\n  private static ArrayList<FrequencyTableEntry> hashToFreqEntries(\n      HashMap<String, ArrayList<Integer>> hash) {\n    ArrayList<FrequencyTableEntry> res = new ArrayList<FrequencyTableEntry>();\n    for (Entry<String, ArrayList<Integer>> e : hash.entrySet()) {\n      char[] payload = e.getKey().toCharArray();\n      int frequency = e.getValue().size();\n      for (Integer i : e.getValue()) {\n        res.add(new FrequencyTableEntry(i, payload.clone(), frequency));\n      }\n    }\n    return res;\n  }", "public static < T > T fromJsonString ( String json , Type typeOfT ) { try { return getGson ( ) . fromJson ( json , typeOfT ) ; } catch ( JsonSyntaxException var3 ) { var3 . printStackTrace ( ) ; return null ; } }", "void changedName ( INaviProject project , String name ) ;", "public void dim(int duration) {\n        if (!mDimEnabled) {\n            return;\n        }\n        if (mDimView == null) {\n            mDimView = makeDimView();\n        }\n        if (!mDimView.isShown()) {\n            mDimView.setVisibility(VISIBLE);\n            mDimView.setBackgroundColor(mDimColor);\n        }\n        mDimView.animate().cancel();\n        mDimView.animate().alpha(mDimAlpha)\n            .setListener(null)\n            .setDuration(duration)\n            .start();\n    }", "\tpublic int knowledge(Fleet planet, FleetKnowledge expected) {\n\t\tFleetKnowledge k = player().fleets.get(planet);\n\t\tif (k == expected) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (k != null && expected == null) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (k == null && expected != null) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn k.ordinal() < expected.ordinal() ? -1 : 1;\n\t}\n", "    public void initialize() {\n    \tosType = OperatingSystemDetector.getOperatingSystem();\n    \tif (osType.isLinux()) {\n    \t\tadapter = context.getBean(LinuxOperatingSystem.class);\n    \t} else if (osType.isMacOsX()) {\n    \t\tadapter = context.getBean(MacOSXOperatingSystem.class);\n    \t} else if (osType.isSolaris()) {\n    \t\tadapter = context.getBean(SolarisOperatingSystem.class);\n    \t} else {\n    \t\tadapter = context.getBean(WindowsOperatingSystem.class);\n    \t}    \t\n\t\tadapter.setSystemType(osType);\n    }\n", "private HtmlSelectOneMenu createOperatorMenu ( ) { HtmlSelectOneMenu field = new HtmlSelectOneMenu ( ) ; List children = field . getChildren ( ) ; children . add ( createSelectItem ( STR_ ) ) ; children . add ( createSelectItem ( STR_ ) ) ; children . add ( createSelectItem ( STR_ ) ) ; children . add ( createSelectItem ( STR_ ) ) ; children . add ( createSelectItem ( STR_ ) ) ; children . add ( createSelectItem ( STR_ ) ) ; return field ; }", "private boolean writeJarBytesToFile(final File file,final byte[] jarBytes){\n  final boolean isDebugEnabled=logger.isDebugEnabled();\n  try {\n    if (file.createNewFile()) {\n      if (isDebugEnabled) {\n        logger.debug(\"Successfully created new JAR file: {}\",file.getAbsolutePath());\n      }\n      final OutputStream outStream=new FileOutputStream(file);\n      outStream.write(jarBytes);\n      outStream.close();\n      return true;\n    }\n    return doesFileMatchBytes(file,jarBytes);\n  }\n catch (  IOException ioex) {\n    if (isDebugEnabled) {\n      logger.debug(\"IOException while trying to write JAR content to file: {}\",ioex);\n    }\n    return false;\n  }\n}\n", "    public void load() {\n        children = new TreeNode[1];\n        children[1] = new SettingNode(this, (PermissionsSettings) classInfo.getSettings(PermissionsSettings.class));\n\n    }\n", "    protected void addDeclaringModulePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_ServicePoint_declaringModule_feature\"), //$NON-NLS-1$\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_ServicePoint_declaringModule_feature\", \"_UI_ServicePoint_type\"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n\t\t\t\t ModelPackage.eINSTANCE.getServicePoint_DeclaringModule(),\n\t\t\t\t true,\n\t\t\t\t null,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "    public boolean isPrintErrors() {\n        return this.printErrors;\n    }\n", "\tpublic String getValue() {\n\t\tStringBuffer result = new StringBuffer();\n\t\tboolean wroteSomething = false;\n\t\tif (org.apache.commons.lang.StringUtils.isNotEmpty(getComponent1())) {\n\t\t\tresult.append(\"/\" + getComponent1());\n\t\t\twroteSomething = true;\n\t\t}\n\t\tif (org.apache.commons.lang.StringUtils.isNotEmpty(getComponent2())) {\n\t\t\tresult.append(\"/\" + getComponent2());\n\t\t\twroteSomething = true;\n\t\t}\n\t\tif (org.apache.commons.lang.StringUtils.isNotEmpty(getComponent3())) {\n\t\t\tif (wroteSomething) {\n\t\t\t\tresult.append(net.sourceforge.wife.swift.writer.FINWriterVisitor.SWIFT_EOL);\t\t\t\t\n\t\t\t}\n\t\t\tresult.append(getComponent3());\n\t\t}\n\t\treturn result.toString();\n\t}\n", "public final void setConstraint(Constraint constraint) {\n        Assert.notNull(constraint);\n        if (!constraint.equals(this.constraint)) {\n            if (this.constraint instanceof Observable) {\n                ((Observable) constraint).deleteObserver(this);\n            }\n            this.constraint = constraint;\n            if (constraint instanceof Observable) {\n                ((Observable) constraint).addObserver(this);\n            }\n            fireContentsChanged(this, -1, -1);\n        }\n    }", "protected void subscribeStop(String nameValue) throws Throwable {\n  URI observerUri=URI.create(observerServiceUriForStop);\n  waitForSubscriptionToAppear(observerUri,EXAMPLES_SUBSCRIPTIONS);\n  verifyNotification(nameValue,observerUri);\n  JsExecutor.executeSynchronously(null);\n  waitForSubscriptionToDisappear(observerUri,EXAMPLES_SUBSCRIPTIONS);\n}\n", "@Override public int generate(){\n  int numVertices=SizableIterable.sizeOf(vertices);\n  final Iterator<Vertex> iter=vertices.iterator();\n  final ArrayList<ArrayList<Vertex>> communities=new ArrayList<>(expectedNumCommunities);\n  final Distribution communityDist=communitySize.initialize(expectedNumCommunities,numVertices);\n  final Map<String,Object> context=new HashMap<>();\n  while (iter.hasNext()) {\n    final int nextSize=communityDist.nextValue(random);\n    context.put(\"communityIndex\",communities.size());\n    final ArrayList<Vertex> community=new ArrayList<>(nextSize);\n    for (int i=0; i < nextSize && iter.hasNext(); i++) {\n      community.add(processVertex(iter.next(),context));\n    }\n    if (!community.isEmpty())     communities.add(community);\n  }\n  final double inCommunityPercentage=1.0 - crossCommunityPercentage;\n  final Distribution degreeDist=edgeDegree.initialize(numVertices,expectedNumEdges);\n  if (crossCommunityPercentage > 0 && communities.size() < 2)   throw new IllegalArgumentException(\"Cannot have cross links with only one community\");\n  int addedEdges=0;\n  for (  ArrayList<Vertex> community : communities) {\n    for (    Vertex v : community) {\n      final int randomDegree=degreeDist.nextValue(random);\n      final int degree=Math.min(randomDegree,(int)Math.ceil((community.size() - 1) / inCommunityPercentage) - 1);\n      final Set<Vertex> inlinks=new HashSet<>();\n      final Set<Vertex> outlinks=new HashSet<>();\n      for (int i=0; i < degree; i++) {\n        Vertex selected=null;\n        if (random.nextDouble() < crossCommunityPercentage || (community.size() - 1 <= inlinks.size())) {\n          int tries=0;\n          ArrayList<Vertex> othercomm=null;\n          while (null == selected && tries < 100) {\n            while (null == othercomm) {\n              othercomm=communities.get(random.nextInt(communities.size()));\n              if (othercomm.equals(community))               othercomm=null;\n            }\n            selected=othercomm.get(random.nextInt(othercomm.size()));\n            if (outlinks.contains(selected))             selected=null;\n            tries++;\n          }\n          if (selected != null)           outlinks.add(selected);\n        }\n else {\n          int tries=0;\n          while (selected == null && tries < 100) {\n            selected=community.get(random.nextInt(community.size()));\n            if (v.equals(selected) || inlinks.contains(selected))             selected=null;\n            tries++;\n          }\n          if (selected != null)           inlinks.add(selected);\n        }\n        if (selected != null) {\n          addEdge(v,selected);\n          addedEdges++;\n        }\n      }\n    }\n  }\n  return addedEdges;\n}\n", "public static String stripQuotes(String string){\n  if (string.startsWith(\"\\\"\\\"\\\"\")) {\n    return string.length() <= 3 ? \"\" : string.substring(3,endTrimIndex(string,'\"',3));\n  }\n  if (string.startsWith(\"'''\")) {\n    return string.length() <= 3 ? \"\" : string.substring(3,endTrimIndex(string,'\\'',3));\n  }\n  if (string.startsWith(\"\\\"\")) {\n    return string.substring(1,endTrimIndex(string,'\"',1));\n  }\n  if (string.startsWith(\"'\")) {\n    return string.substring(1,endTrimIndex(string,'\\'',1));\n  }\n  return string;\n}\n", "public static void initCredentials(Job job) {\n        Configuration configuration = job.getConfiguration();\n        Settings settings = HadoopSettingsManager.loadFrom(configuration);\n        InitializationUtils.setUserProviderIfNotSet(settings, HadoopUser", "public Object remove(Object key) {\n        mCacheMap.remove(key);\n        return mBackingMap.remove(key);\n    }", "@Override\n    public void run() {\n        try {\n            for (Map<String, Object> row : dataDecoder) {\n                dataEncoder.write(applyFilters(row));\n            }\n\n            dataDecoder.close();\n            dataEncoder.close();\n        } catch (IOException ioe) {\n            logger.error(\"Unable to complete conversion.\", ioe);\n        }\n\n    }", "public void createWeightedEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,double dStartWeight,double dNewWeight,double dDataImportance){\n  if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {\n    VertexImpl v=new VertexImpl();\n    v.setLabel(sStartNode);\n    try {\n      gGraph.add(v);\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n  }\n  Vertex vA=gGraph.locateVertex(sStartNode);\n  if (vA == null) {\n    vA=new VertexImpl();\n    vA.setLabel(sStartNode);\n    try {\n      gGraph.add(vA);\n    }\n catch (    Exception e) {\n    }\n  }\n  EdgeCachedLocator ecl;\n  if (eclLocator == null)   ecl=new EdgeCachedLocator(100);\n else   ecl=eclLocator;\n  java.util.Iterator iIter=lOtherNodes.iterator();\n  while (iIter.hasNext()) {\n    VertexImpl vB=new VertexImpl();\n    vB.setLabel(new String((String)iIter.next()));\n    double dOldWeight=0;\n    double dFinalWeight=0;\n    WeightedEdge weCorrectEdge=null;\n    WeightedEdge weEdge=null;\n    boolean bFound=(weEdge=(WeightedEdge)ecl.locateDirectedEdgeInGraph(gGraph,vA,vB)) != null;\n    if (bFound) {\n      dOldWeight=weEdge.getWeight();\n      weCorrectEdge=weEdge;\n      dFinalWeight=dOldWeight + (dNewWeight - dOldWeight) * dDataImportance;\n      weCorrectEdge.setWeight(dFinalWeight);\n    }\n else {\n      dFinalWeight=dStartWeight;\n      try {\n        gGraph.addEdge(vA,vB,dFinalWeight);\n        ecl.resetCache();\n      }\n catch (      Exception e) {\n        e.printStackTrace();\n      }\n    }\n  }\n}\n", "public static void timedRecord(String filename,long millis,AudioFormat audioFormat){\n  File outputFile=new File(filename);\n  timedRecord(outputFile,millis,audioFormat);\n}\n", "void onBufferingUpdate ( MediaPlayer mp , int percent ) ;", "public void paintCheckBoxBackground ( SynthContext context , Graphics g , int x , int y , int w , int h ) { }", "public MahaloPermission ( String name ) { super ( name ) ; }", "public boolean onSetFocus ( CefBrowser browser , FocusSource source ) ;", "\tpublic DecisionTree deepCopy() {\n\t\tDecisionTree result = new DecisionTree();\n\t\tresult.setStopSplitting(stopSplitting);\n\t\tresult.setTarget(target);\n\t\tresult.setDataSet(dataSet);\n\t\tresult.setSelectionCriteria(selectionCriteria);\n\t\tresult.setPruningMethod(pruningMethod);\n\t\tresult.setPruningEnabled(pruningEnabled);\n\t\tresult.setValidationEnabled(validationEnabled);\n\t\tresult.setIdAttribute(idAttribute);\n\t\tresult.setChosenAttributes(chosenAttributes);\n\t\tresult.setLearningInstances(learningInstances);\n\t\tresult.setLearningAttributes(learningAttributes);\n\t\tresult.setRoot(root.deepCopy(result, null));\n\n\t\treturn result;\n\t}\n", "private boolean allConnectionsFromOtherStage(final ExecutionGroupVertex groupVertex, final boolean forward) {\n\n\t\tif (forward) {\n\t\t\tfor (int i = 0; i < groupVertex.getNumberOfBackwardLinks(); i++) {\n\t\t\t\tif (this.stage == groupVertex.getBackwardEdge(i).getSourceVertex().getStageNumber()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (int i = 0; i < groupVertex.getNumberOfForwardLinks(); i++) {\n\t\t\t\tif (this.stage == groupVertex.getForwardEdge(i).getTargetVertex().getStageNumber()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}", "void setTreePath(TreePath treePath) {\n        this.treePath = treePath;\n        documentation = getCommentText(treePath);\n        comment = null;\n    }", "public void changeButtonBackgroundColor ( int resId ) { this . slickButtonBackgroundColor = resId ; slickFormSubmitButton . setBackgroundColor ( slickButtonBackgroundColor ) ; slickFormSubmitButton . invalidate ( ) ; }", "public static String samReadName(String name,boolean isPaired){\n  if (isPaired && name != null && name.length() > 2 && name.charAt(name.length() - 2) == '/' && (name.endsWith(\"/1\") || name.endsWith(\"/2\"))) {\n    return name.substring(0,name.length() - 2);\n  }\n  return name;\n}\n", "@SuppressWarnings(\"incomplete-switch\")\n  private ParseTree parseLeftHandSideExpression() {\n    SourcePosition start = getTreeStartLocation();\n    ParseTree operand = parseNewExpression();\n\n    // this test is equivalent to is member expression\n    if (!(operand instanceof NewExpressionTree)\n        || ((NewExpressionTree) operand).arguments != null) {\n\n      // The Call expression productions\n      while (peekCallSuffix()) {\n        switch (peekType()) {\n          case OPEN_PAREN:\n            ArgumentListTree arguments = parseArguments();\n            operand = new CallExpressionTree(getTreeLocation(start), operand, arguments);\n            break;\n          case OPEN_SQUARE:\n            eat(TokenType.OPEN_SQUARE);\n            ParseTree member = parseExpression();\n            eat(TokenType.CLOSE_SQUARE);\n            operand = new MemberLookupExpressionTree(getTreeLocation(start), operand, member);\n            break;\n          case PERIOD:\n            eat(TokenType.PERIOD);\n            IdentifierToken id = eatIdOrKeywordAsId();\n            operand = new MemberExpressionTree(getTreeLocation(start), operand, id);\n            break;\n          case NO_SUBSTITUTION_TEMPLATE:\n          case TEMPLATE_HEAD:\n            operand = parseTemplateLiteral(operand);\n            break;\n          default:\n            throw new AssertionError(\"unexpected case: \" + peekType());\n        }\n      }\n    }\n    return operand;\n  }", "@Deprecated public boolean isFillBelowLine(){\n  return mFillBelowLine.size() > 0;\n}\n", "public static PollTcpManagerNio create(){\nsynchronized (_nioSelectManager) {\n    if (_nioSelectManager.get() == null) {\n      PollTcpManagerNio selectManager=new PollTcpManagerNio();\n      if (selectManager.start()) {\n        _nioSelectManager.set(selectManager);\n      }\n    }\n    return _nioSelectManager.get();\n  }\n}\n", "public void writeToFile ( String fileName ) throws IOException { write ( new FileOutputStream ( fileName ) ) ; }", "public void enableDebugLogging ( boolean enable , String tag ) { checkNotDisposed ( ) ; mDebugLog = enable ; mDebugTag = tag ; }", "public OvhRule domain_account_accountName_filter_name_rule_id_GET(String domain, String accountName, String name, Long id) throws IOException {\n\t\tString qPath = \"/email/domain/{domain}/account/{accountName}/filter/{name}/rule/{id}\";\n\t\tStringBuilder sb = path(qPath, domain, accountName, name, id);\n\t\tString resp = exec(qPath, \"GET\", sb.toString(), null);\n\t\treturn convertTo(resp, OvhRule.class);\n\t}", "public Futures subRef( Vec vec, Futures fs ) {\n    assert fs != null : \"Future should not be null!\";\n    if ( vec.masterVec() != null ) subRef(vec.masterVec(), fs);\n    int cnt = _refcnt.get(vec)._val-1;\n    if ( cnt > 0 ) {\n      _refcnt.put(vec,new IcedInt(cnt));\n    } else {\n      UKV.remove(vec._key,fs);\n      _refcnt.remove(vec);\n    }\n    return fs;\n  }", "protected void checkApiToken(String apiToken) {\n        if (StringUtils.isBlank(apiToken)) throw new MissingApiTokenException(\"Empty key\");\n        if (apiToken.length() != TOKEN_LENGTH) throw new MissingApiTokenException(\"Wrong length\");\n        if (!apiToken.matches(HEX_PATTERN)) throw new MissingApiTokenException(\"Not a HEX value\");\n    }", "public String pad(String value,int places,String padCharacter){\n  StringBuilder sb=new StringBuilder();\n  sb.append(value);\n  while (sb.length() < places) {\n    sb.append(padCharacter);\n  }\n  return sb.toString();\n}\n", "private void kickOff(Team offense){\n  if (gameTime <= 0)   return;\n else {\n    if (gameTime < 180 && ((gamePoss && (awayScore - homeScore) <= 8 && (awayScore - homeScore) > 0) || (!gamePoss && (homeScore - awayScore) <= 8 && (homeScore - awayScore) > 0))) {\n      if (offense.getK(0).ratKickFum * Math.random() > 60 || Math.random() < 0.1) {\n        gameEventLog+=getEventPrefix() + offense.abbr + \" K \"+ offense.getK(0).name+ \" successfully executes onside kick! \"+ offense.abbr+ \" has possession!\";\n      }\n else {\n        gameEventLog+=getEventPrefix() + offense.abbr + \" K \"+ offense.getK(0).name+ \" failed the onside kick and lost possession.\";\n        gamePoss=!gamePoss;\n      }\n      gameYardLine=50;\n      gameDown=1;\n      gameYardsNeed=10;\n      gameTime-=4 + 5 * Math.random();\n    }\n else {\n      gameYardLine=(int)(100 - (offense.getK(0).ratKickPow + 20 - 40 * Math.random()));\n      if (gameYardLine <= 0)       gameYardLine=25;\n      gameDown=1;\n      gameYardsNeed=10;\n      gamePoss=!gamePoss;\n    }\n    gameTime-=15 * Math.random();\n  }\n}\n", "public void setFpgaImages(java.util.Collection<FpgaImage> fpgaImages) {\n        if (fpgaImages == null) {\n            this.fpgaImages = null;\n            return;\n        }\n\n        this.fpgaImages = new com.amazonaws.internal.SdkInternalList<FpgaImage>(fpgaImages);\n    }", "private void emitGetter(Method method,String methodName,String fieldName,String returnType,StringBuilder builder){\n  builder.append(\"    @Override\\n    public \");\n  builder.append(returnType);\n  builder.append(\" \");\n  builder.append(methodName);\n  builder.append(\"() {\\n\");\n  Class<?> returnTypeClass=method.getReturnType();\n  if (isList(returnTypeClass) || isMap(returnTypeClass)) {\n    builder.append(\"      \");\n    builder.append(getEnsureName(fieldName));\n    builder.append(\"();\\n\");\n  }\n  builder.append(\"      return \");\n  builder.append(fieldName);\n  builder.append(\";\\n    }\\n\\n\");\n}\n", "@Override\n    public UpdateRateBasedRuleResult updateRateBasedRule(UpdateRateBasedRuleRequest request) {\n        request = beforeClientExecution(request);\n        return executeUpdateRateBasedRule(request);\n    }", "public void pushCatch(){\n  push(CATCH);\n}\n", "public static String[] convertStrings(List<String> strings){\n  String[] ret=new String[strings.size()];\n  for (int i=0; i < ret.length; i++) {\n    ret[i]=strings.get(i);\n  }\n  return ret;\n}\n", "public DefaultTicketFactory addTicketFactory(final @NonNull Class<? extends Ticket> ticketClass, final @NonNull TicketFactory factory) {\n        this.factoryMap.put(ticketClass.getCanonicalName(), factory);\n        return this;\n    }", "    public void generateSetterForField(JavacNode fieldNode, DiagnosticPosition pos, AccessLevel level) {\n        for (JavacNode child : fieldNode.down()) {\n            if (child.getKind() == Kind.ANNOTATION) {\n                if (Javac.annotationTypeMatches(Setter.class, child)) {\n                    //The annotation will make it happen, so we can skip it.\n                    return;\n                }\n            }\n        }\n\n        createSetterForField(level, fieldNode, fieldNode, false);\n    }\n", "public static PrivateMethodVerification verifyPrivate(Class<?> clazz, VerificationMode verificationMode) {\n        return verifyPrivate((Object) clazz, verificationMode);\n    }", "public void addOverrideMap(Map<String, String> overrideMap) {\n    if (sealed) {\n      throw new IllegalStateException(\"Instance is sealed.\");\n    }\n    for (Map.Entry<String, String> entry : overrideMap.entrySet()) {\n      try {\n        ParameterOverrideInfo info = new ParameterOverrideInfo(entry.getKey());\n        if (info.isOverrideSystemDefault()) {\n          putMapIfNotExsits(overrideSystemDefaultMap, info.getParameterName(), entry.getValue());\n        }\n        else if (StringUtils.isNotEmpty(info.getConfigurationId()))  {\n          Map<String, String> overrideForceScopeMapEntry = overrideForceScopeMap.get(info.getConfigurationId());\n          if (overrideForceScopeMapEntry == null) {\n            overrideForceScopeMapEntry = new HashMap<>();\n            overrideForceScopeMap.put(info.getConfigurationId(), overrideForceScopeMapEntry);\n          }\n          putMapIfNotExsits(overrideForceScopeMapEntry, info.getParameterName(), entry.getValue());\n          if (info.isLocked()) {\n            Set<String> lockedParameterNamesScopeMapEntry = lockedParameterNamesScopeMap.get(info.getConfigurationId());\n            if (lockedParameterNamesScopeMapEntry == null) {\n              lockedParameterNamesScopeMapEntry = new HashSet<>();\n              lockedParameterNamesScopeMap.put(info.getConfigurationId(), lockedParameterNamesScopeMapEntry);\n            }\n            putSetIfNotExsits(lockedParameterNamesScopeMapEntry, info.getParameterName());\n          }\n        }\n        else {\n          putMapIfNotExsits(overrideForceMap, info.getParameterName(), entry.getValue());\n          if (info.isLocked()) {\n            putSetIfNotExsits(lockedParameterNamesSet, info.getParameterName());\n          }\n        }\n      }\n      catch (IllegalArgumentException ex) {\n        log.warn(\"Ignoring invalid parameter override definition:\\n\" + ex.getMessage());\n      }\n    }\n  }", "public final byte[] toByteArray()\n\t{\n\t\tfinal ByteArrayOutputStream os = new ByteArrayOutputStream(HPAI_SIZE);\n\t\tos.write(length);\n\t\tos.write(hostprot);\n\t\tos.write(address, 0, address.length);\n\t\tos.write(port >> 8);\n\t\tos.write(port);\n\t\treturn os.toByteArray();\n\t}", "public boolean isUnidirectional(){\n  return unidirectional;\n}", "public void encode(OutputStream out) throws IOException {\n  DerOutputStream tmp=new DerOutputStream();\n  if (extensionValue == null) {\n    this.extensionId=PKIXExtensions.InhibitAnyPolicy_Id;\n    critical=true;\n    encodeThis();\n  }\n  super.encode(tmp);\n  out.write(tmp.toByteArray());\n}\n", "private void drawCaretAsciiWindow ( final Graphics g , final int characterWidth , final int characterHeight ) { final int currentRow = getCurrentRow ( ) - m_firstRow ; final int currentColumn = getCurrentColumn ( ) ; final int currentCharacter = currentCo", "@Override\n    public final void onCompleted(String pin) {\n        resetStatus();\n        if (isPinCorrect(pin)) {\n            setResult(SUCCESS);\n            finish();\n        } else {\n            setLabel(getString(R.string.message_invalid_pin));\n       ", "private void synchronizeData(ArrayList<Object> folderAndFiles,OwnCloudClient client){\n  mLocalFolder=mStorageManager.getFileByPath(mLocalFolder.getRemotePath());\n  OCFile remoteFolder=FileStorageUtils.fillOCFile((RemoteFile)folderAndFiles.get(0));\n  remoteFolder.setParentId(mLocalFolder.getParentId());\n  remoteFolder.setFileId(mLocalFolder.getFileId());\n  Log_OC.d(TAG,\"Remote folder \" + mLocalFolder.getRemotePath() + \" changed - starting update of local data \");\n  List<OCFile> updatedFiles=new Vector<OCFile>(folderAndFiles.size() - 1);\n  mFilesToSyncContents.clear();\n  List<OCFile> localFiles=mStorageManager.getFolderContent(mLocalFolder,false);\n  Map<String,OCFile> localFilesMap=new HashMap<String,OCFile>(localFiles.size());\n  for (  OCFile file : localFiles) {\n    localFilesMap.put(file.getRemotePath(),file);\n  }\n  OCFile remoteFile=null, localFile=null, updatedFile=null;\n  RemoteFile r;\n  for (int i=1; i < folderAndFiles.size(); i++) {\n    r=(RemoteFile)folderAndFiles.get(i);\n    remoteFile=FileStorageUtils.fillOCFile(r);\n    updatedFile=FileStorageUtils.fillOCFile(r);\n    updatedFile.setParentId(mLocalFolder.getFileId());\n    localFile=localFilesMap.remove(remoteFile.getRemotePath());\n    updatedFile.setLastSyncDateForProperties(mCurrentSyncTime);\n    if (localFile != null) {\n      updatedFile.setFileId(localFile.getFileId());\n      updatedFile.setFavorite(localFile.isFavorite());\n      updatedFile.setLastSyncDateForData(localFile.getLastSyncDateForData());\n      updatedFile.setModificationTimestampAtLastSyncForData(localFile.getModificationTimestampAtLastSyncForData());\n      updatedFile.setStoragePath(localFile.getStoragePath());\n      updatedFile.setEtag(localFile.getEtag());\n      if (updatedFile.isFolder()) {\n        updatedFile.setFileLength(remoteFile.getFileLength());\n      }\n else       if (mRemoteFolderChanged && remoteFile.isImage() && remoteFile.getModificationTimestamp() != localFile.getModificationTimestamp()) {\n        updatedFile.setNeedsUpdateThumbnail(true);\n        Log.d(TAG,\"Image \" + remoteFile.getFileName() + \" updated on the server\");\n      }\n      updatedFile.setPublicLink(localFile.getPublicLink());\n      updatedFile.setShareViaLink(localFile.isSharedViaLink());\n      updatedFile.setShareWithSharee(localFile.isSharedWithSharee());\n      updatedFile.setEtagInConflict(localFile.getEtagInConflict());\n    }\n else {\n      updatedFile.setEtag(\"\");\n    }\n    FileStorageUtils.searchForLocalFileInDefaultPath(updatedFile,mAccount);\n    if (updatedFile.isFavorite()) {\n      SynchronizeFileOperation operation=new SynchronizeFileOperation(localFile,remoteFile,mAccount,true,mContext);\n      mFilesToSyncContents.add(operation);\n    }\n    updatedFiles.add(updatedFile);\n  }\n  mStorageManager.saveFolder(remoteFolder,updatedFiles,localFilesMap.values());\n  mChildren=updatedFiles;\n}\n", "public AttrSet(Attr[] attrs){\n  int size=attrs.length;\n  _attrs=new ArrayList(size);\n  for (int i=0; i < size; i++) {\n    _attrs.add(attrs[i]);\n  }\n}\n", "private Node addConditionWaiter(){\n  Node t=lastWaiter;\n  if (t != null && t.waitStatus != Node.CONDITION) {\n    unlinkCancelledWaiters();\n    t=lastWaiter;\n  }\n  Node node=new Node(Thread.currentThread(),Node.CONDITION);\n  if (t == null)   firstWaiter=node;\n else   t.nextWaiter=node;\n  lastWaiter=node;\n  return node;\n}\n", "public Observable<ServiceResponse<Page<StorageContainerInner>>> listStorageContainersSinglePageAsync(final String resourceGroupName, final String accountName, final String storageAccountName) {\n        if (this.client.subscriptionId() == null) {\n            throw new IllegalArgumentException(\"Parameter this.client.subscriptionId() is required and cannot be null.\");\n        }\n        if (resourceGroupName == null) {\n            throw new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\");\n        }\n        if (accountName == null) {\n            throw new IllegalArgumentException(\"Parameter accountName is required and cannot be null.\");\n        }\n        if (storageAccountName == null) {\n            throw new IllegalArgumentException(\"Parameter storageAccountName is required and cannot be null.\");\n        }\n        if (this.client.apiVersion() == null) {\n            throw new IllegalArgumentException(\"Parameter this.client.apiVersion() is required and cannot be null.\");\n        }\n        return service.listStorageContainers(this.client.subscriptionId(), resourceGroupName, accountName, storageAccountName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())\n            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StorageContainerInner>>>>() {\n                @Override\n                public Observable<ServiceResponse<Page<StorageContainerInner>>> call(Response<ResponseBody> response) {\n                    try {\n                        ServiceResponse<PageImpl<StorageContainerInner>> result = listStorageContainersDelegate(response);\n                        return Observable.just(new ServiceResponse<Page<StorageContainerInner>>(result.body(), result.response()));\n                    } catch (Throwable t) {\n                        return Observable.error(t);\n                    }\n                }\n            });\n    }", "final byte[] decodeFast(char[] sArr) throws DecodingException {\n\n        // Check special case\n        int sLen = sArr != null ? sArr.length : 0;\n        if (sLen == 0) {\n            return new byte[0];\n        }\n\n        int sIx = 0, eIx = sLen - 1;    // Start and end index after trimming.\n\n        // Trim illegal chars from start\n        while (sIx < eIx && IALPHABET[sArr[sIx]] < 0) {\n            sIx++;\n        }\n\n        // Trim illegal chars from end\n        while (eIx > 0 && IALPHABET[sArr[eIx]] < 0) {\n            eIx--;\n        }\n\n        // get the padding count (=) (0, 1 or 2)\n        int pad = sArr[eIx] == '=' ? (sArr[eIx - 1] == '=' ? 2 : 1) : 0;  // Count '=' at end.\n        int cCnt = eIx - sIx + 1;   // Content count including possible separators\n        int sepCnt = sLen > 76 ? (sArr[76] == '\\r' ? cCnt / 78 : 0) << 1 : 0;\n\n        int len = ((cCnt - sepCnt) * 6 >> 3) - pad; // The number of decoded bytes\n        byte[] dArr = new byte[len];       // Preallocate byte[] of exact length\n\n        // Decode all but the last 0 - 2 bytes.\n        int d = 0;\n        for (int cc = 0, eLen = (len / 3) * 3; d < eLen; ) {\n\n            // Assemble three bytes into an int from four \"valid\" characters.\n            int i = ctoi(sArr[sIx++]) << 18 | ctoi(sArr[sIx++]) << 12 | ctoi(sArr[sIx++]) << 6 | ctoi(sArr[sIx++]);\n\n            // Add the bytes\n            dArr[d++] = (byte) (i >> 16);\n            dArr[d++] = (byte) (i >> 8);\n            dArr[d++] = (byte) i;\n\n            // If line separator, jump over it.\n            if (sepCnt > 0 && ++cc == 19) {\n                sIx += 2;\n                cc = 0;\n            }\n        }\n\n        if (d < len) {\n            // Decode last 1-3 bytes (incl '=') into 1-3 bytes\n            int i = 0;\n            for (int j = 0; sIx <= eIx - pad; j++) {\n                i |= ctoi(sArr[sIx++]) << (18 - j * 6);\n            }\n\n            for (int r = 16; d < len; r -= 8) {\n                dArr[d++] = (byte) (i >> r);\n            }\n        }\n\n        return dArr;\n    }", "protected PostgreSQLModuleViewsLoader ( ) { }", "@Override public int read() throws IOException {\n  int ch=super.read();\n  if (ch != -1) {\n    branch.write(ch);\n  }\n  return ch;\n}\n", "  public void setXAxisRange(double dXAxisMinimum, double dXAxisMaximum)\n  {       \n    final double[] minimalCoveringRange = getMinimalCoveringRange( dXAxisMinimum,\n                                                                   dXAxisMaximum );\n    \n    oDrawSurface.setXAxisRange( minimalCoveringRange[0],\n                                minimalCoveringRange[1] );\n  }\n", "\tpublic boolean isVersion10(){\n\t\tString version = root.getAttributeValue(\"version\");\n\t\treturn (version.equals(\"1.0\"));\n\t}\n", "\tpublic void startUp() {\n\t\ttry {\n\t\t\turl = new URL(webLocation);\n\t\t} catch (MalformedURLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tthis.getFilteredText();\t\t\n\t\textractor.extractWords(filteredText,knownWord,type);\n\t}\n", "static boolean isAccessible(final Member m){\n  return m != null && Modifier.isPublic(m.getModifiers()) && !MemberUtils.isSynthetic(m);\n}\n", "    public Object createObject() {\n        final DecimalFormat format = (DecimalFormat) super.createObject();\n        if (getParameter(\"pattern\") != null) {\n            format.applyPattern((String) getParameter(\"pattern\"));\n        }\n        if (getParameter(\"localizedPattern\") != null) {\n            format.applyLocalizedPattern((String) getParameter(\"localizedPattern\"));\n        }\n        return format;\n    }\n", "private void loadWrapperClasses ( ) { wrapperClasses = new ArrayList < Class < ? > > ( ) ; noWrapperClasses = new ArrayList < Class < ? > > ( ) ; ClassLoader cl = Thread . currentThread ( ) . getContextClassLoader ( ) ; try { URL res = cl . getResource ( STR_ ) ; File javaxFacesPackage = new File ( res . getFile ( ) ) . getParentFile ( ) ; collectWrapperClasses ( cl , JAVAX_FACES_PKG , javaxFacesPackage ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }", "    public void up(float theSpeed) {\n        updateRotationMatrix();\n        _myInternalUpVector.scale(theSpeed);\n        if (!_myInternalUpVector.isNaN()) {\n            position.add(_myInternalUpVector);\n        } else {\n            _myInternalUpVector.set(0, 1, 0);\n        }\n        updateRotationMatrix();\n    }\n", "    public void removeTextListener(java.awt.event.TextListener l) {\n        return; // TODO codavaj!!\n    }\n", "public static void escapeUriPath(final Reader reader, final Writer writer)\n            throws IOException {\n        escapeUriPath(reader, writer, DEFAULT_ENCODING);\n    }", "public static void println(double x){\n  out.println(x);\n}\n", "public String[] grantedPermissions(){\n  List<String> list=new ArrayList();\n  for (int i=0; i < mPerms.size(); i++) {\n    if (mPerms.get(mUserPermission.get(i)) == PackageManager.PERMISSION_GRANTED)     list.add(mUserPermission.get(i));\n  }\n  return list.toArray(new String[list.size()]);\n}\n", "    protected void setUp() throws Exception {\n        super.setUp();\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(2000, 11, 5);\n\n        dateA = calendar.getTime();\n        dateB = new Date(dateA.getTime());\n        sqlDate = new java.sql.Date(dateA.getTime());\n        differentDate = new Date();\n\n        reflectionComparator = createRefectionComparator();\n    }\n", "    private void clearPreviousPopupMenu() {\n        if (null != popupMenu) {\n            popupMenu.setVisible(false);\n            popupMenu = null;\n        }\n    }\n", "public static boolean isPublicMethodFinal(Class clazz, String name,\r\n                                              TypeDesc retType, TypeDesc[] params)\r\n    {\r\n        if (!clazz.isInterface()) {\r\n            Class[] paramClasses;\r\n            if (params == null || params.length == 0) {\r\n                paramClasses =  null;\r\n            } else {\r\n                paramClasses = new Class[params.length];\r\n                for (int i=0; i<params.length; i++) {\r\n                    paramClasses[i] = params[i].toClass();\r\n                }\r\n            }\r\n            try {\r\n                Method existing = clazz.getMethod(name, paramClasses);\r\n                if (Modifier.isFinal(existing.getModifiers())) {\r\n                    if (retType == null) {\r\n                        retType = TypeDesc.forClass(void.class);\r\n                    }\r\n                    if (TypeDesc.forClass(existing.getReturnType()) == retType) {\r\n                        // Method is already implemented and is final.\r\n                        return true;\r\n                    }\r\n                }\r\n            } catch (NoSuchMethodException e) {\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }", "    public String getToken() {\n\n        // Have we already generated a token value?  If so, use it\n        String value = (String) getAttributes().get(TOKEN_ATTRIBUTE_KEY);\n        if (value != null) {\n             return value;\n        }\n\n        // Generate a new token value and cache it for reuse if the\n        // current view is rerendered\n        FacesContext context = FacesContext.getCurrentInstance();\n        TokenProcessor tp = getTokenProcessor(context);\n        String token = tp.generate(context);\n        getAttributes().put(TOKEN_ATTRIBUTE_KEY, token);\n        if (log.isDebugEnabled()) {\n            log.debug(\"Generating token '\" + token + \"'\");\n        }\n        return token;\n\n    }\n", "\tpublic void sortData(final String field, final boolean up) {\n\t\t\n\t\tCollections.sort(data, new Comparator<DemoTask>() {\n\t\t\t/* (non-Javadoc)\n\t\t\t * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)\n\t\t\t */\n\t\t\tpublic int compare(DemoTask t1, DemoTask t2) {\n\t\t\t\tint result = 0;\n\t\t\t\tif (field.equals(\"done\")) {\n\t\t\t\t\tif (t1.done != t2.done) {\n\t\t\t\t\t\tresult = t1.done ? -1 : 1;\n\t\t\t\t\t}\n\t\t\t\t} else if (field.equals(\"title\")) {\n\t\t\t\t\tresult = t1.title.compareTo(t2.title);\n\t\t\t\t} else if (field.equals(\"owner\")) {\n\t\t\t\t\tresult = t1.owner.compareTo(t2.owner);\n\t\t\t\t} else if (field.equals(\"completed\")) {\n\t\t\t\t\tresult = t1.completed - t2.completed;\n\t\t\t\t}\n\t\t\t\treturn up ? result : -result;\n\t\t\t}\n\t\t});\n\t\t\n\t}\n", "protected void startNfcSettingsActivity(){\n  if (android.os.Build.VERSION.SDK_INT >= 16) {\n    startActivity(new Intent(ACTION_NFC_SETTINGS));\n  }\n else {\n    startActivity(new Intent(android.provider.Settings.ACTION_WIRELESS_SETTINGS));\n  }\n}\n", "    public void set_packing_diff_factor( float factor ) {\n        if ( factor != packing_diff_factor ) {\n            packing_diff_factor = factor;\n            reset();\n        }\n    }\n", "public MapEntryInfoKey ( Object value , Object key ) { super ( value ) ; _hashCode = _hashCode ^ key . hashCode ( ) ; _key = key ; }", "private static int countCoordRepeatReverse(Coordinate[] coords) {\n        int repeatCoords = 0;\n\n        final Coordinate firstCoord = coords[0];\n        Coordinate nextCoord;\n\n        for(int i = coords.length - 1; i > 0; --i) {\n            nextCoord = coords[i];\n            if(equalAsInts2d(firstCoord, nextCoord)) {\n                ++repeatCoords;\n            } else {\n                break;\n            }\n        }\n\n        return repeatCoords;\n    }", "public boolean waitForWifiState(int expectedState,long timeout){\n  long startTime=System.currentTimeMillis();\n  while (true) {\n    if ((System.currentTimeMillis() - startTime) > timeout) {\n      if (mWifiState != expectedState) {\n        return false;\n      }\n else {\n        return true;\n      }\n    }\n    Log.v(LOG_TAG,\"Wait for wifi state to be: \" + expectedState);\nsynchronized (mWifiMonitor) {\n      try {\n        mWifiMonitor.wait(SHORT_TIMEOUT);\n      }\n catch (      InterruptedException e) {\n        e.printStackTrace();\n      }\n      if (mWifiState != expectedState) {\n        Log.v(LOG_TAG,\"Wifi state is: \" + mWifiState);\n        continue;\n      }\n      return true;\n    }\n  }\n}\n", "protected JavaFileObject createFile(){\n  JavaFileObject result=null;\n  Filer filer=processingEnvironment.getFiler();\n  try {\n    result=filer.createSourceFile(getModelClassName());\n  }\n catch (  IOException e) {\n    logger.log(Diagnostic.Kind.ERROR,\"create source file failed\");\n    e.printStackTrace();\n  }\n  return result;\n}\n", "private static void checkForSnowball(){\n  try {\n    Class.forName(SNOWBALL_PROGRAM);\n    m_Present=true;\n  }\n catch (  Exception e) {\n    m_Present=false;\n  }\n}\n", "private String pickEncoding(InputSource inputSource){\n  Reader reader=inputSource.getCharacterStream();\n  if (reader != null) {\n    return CHARACTER_ENCODING;\n  }\n  String encoding=inputSource.getEncoding();\n  return encoding == null ? DEFAULT_ENCODING : encoding;\n}\n", "public void switchToAdvanced(Experiment exp){\n  if (exp == null) {\n    exp=m_simplePanel.getExperiment();\n  }\n  if (exp != null) {\n    m_AdvancedSetupRBut.setSelected(true);\n    m_advancedPanel.setExperiment(exp);\n  }\n  remove(m_simplePanel);\n  m_simplePanel.removeNotesFrame();\n  add(m_advancedPanel,BorderLayout.CENTER);\n  validate();\n  repaint();\n}\n", "\tprivate int wrap(int i) {\n\t\tif(choices.size() == 0) return 0;\n\t\t\n\t\tif(i >= choices.size()) return i % choices.size();\n\t\telse if(i < 0) {\n\t\t\twhile(i < 0 || i >= choices.size()) {\n\t\t\t\ti += choices.size();\n\t\t\t}\n\t\t\treturn i;\n\t\t}\n\t\telse return i;\n\t}\n", "public static boolean closer(long v,long prev,long next){\n  return Math.abs(v - prev) <= Math.abs(v - next);\n}\n", "    public void moveActorToTile(Actor theactor, int oldx, int oldy, int x, int y) {\n        //TODO: change this to int, return success or failure\n        if (tileIsInMap(x, y)) {\n            this.tilemap[oldx][oldy].setActorOnTile(null);\n            setActorOnTile(theactor, x, y);\n        }\n    }\n", "public void close(){\n  out.close();\n}\n", "public java.util.List<InventoryAggregator> getAggregators() {\n        if (aggregators == null) {\n            aggregators = new com.amazonaws.internal.SdkInternalList<InventoryAggregator>();\n        }\n        return aggregators;\n    }", "    private boolean isDescendant (TreePath path1, TreePath path2) {\n        Object obj1[] = path1.getPath();\n        Object obj2[] = path2.getPath();\n        for (int i = 0; i < obj2.length; i++) {\n            if (i < obj1.length) {\n                if (obj1[i] != obj2[i]) {\n                    return false;\n                }\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n", "private void addAuditDatastream(Feed feed, DigitalObject obj, ZipOutputStream zout, String encoding) throws ObjectIntegrityException, StreamIOException {\n        if (obj.getAuditRecords().size() == 0) {\n            return;\n        }\n        String dsId = PID.toURI(obj.getPid()) + \"/AUDIT\";\n        String dsvId =\n                dsId\n                        + \"/\"\n                        + DateUtility\n                                .convertDateToString(obj.getCreateDate());\n\n        Entry dsEntry = feed.addEntry();\n        dsEntry.setId(dsId);\n        dsEntry.setTitle(\"AUDIT\");\n        dsEntry.setUpdated(obj.getCreateDate()); // create date?\n\n        dsEntry.addCategory(MODEL.STATE.uri, \"A\", null);\n        dsEntry.addCategory(MODEL.CONTROL_GROUP.uri, \"X\", null);\n        dsEntry.addCategory(MODEL.VERSIONABLE.uri, \"false\", null);\n\n        dsEntry.addLink(dsvId, Link.REL_ALTERNATE);\n\n        Entry dsvEntry = feed.addEntry();\n        dsvEntry.setId(dsvId);\n        dsvEntry.setTitle(\"AUDIT.0\");\n        dsvEntry.setUpdated(obj.getCreateDate());\n        ThreadHelper.addInReplyTo(dsvEntry, PID.toURI(obj.getPid()) + \"/AUDIT\");\n        dsvEntry.addCategory(MODEL.FORMAT_URI.uri, AUDIT1_0.uri, null);\n        dsvEntry\n                .addCategory(MODEL.LABEL.uri, \"Audit Trail for this object\", null);\n        if (m_format.equals(ATOM_ZIP1_1)) {\n            String name = \"AUDIT.0.xml\";\n            try {\n                zout.putNextEntry(new ZipEntry(name));\n                ReadableCharArrayWriter buf =\n                        new ReadableCharArrayWriter(512);\n                PrintWriter pw  = new PrintWriter(buf);\n                DOTranslationUtility.appendAuditTrail(obj, pw);\n                pw.close();\n                IOUtils.copy(buf.toReader(), zout, encoding);\n                zout.closeEntry();\n            } catch(IOException e) {\n                throw new StreamIOException(e.getMessage(), e);\n            }\n            IRI iri = new IRI(name);\n            dsvEntry.setSummary(\"AUDIT.0\");\n            dsvEntry.setContent(iri, \"text/xml\");\n        } else {\n            dsvEntry.setContent(DOTranslationUtility.getAuditTrail(obj),\n                            \"text/xml\");\n        }\n    }", "public Object run ( URI source , String [ ] args ) throws CompilationFailedException , IOException { return run ( new GroovyCodeSource ( source ) , args ) ; }", "public static String toStringUTF8 ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } return toStringUTF8 ( bytes , NUM_ , bytes . length ) ; }", "private DBFactory newDBFactory(){\n  try {\n    return newJniDBFactory();\n  }\n catch (  Exception ex) {\n    try {\n      return newJavaDBFactory();\n    }\n catch (    Exception ex2) {\n      throw new RuntimeException(\"Unable to create a LevelDB DBFactory instance. \" + \"Tried JNI and pure Java. \" + \"The stacktrace is the pure Java attempt.\",ex2);\n    }\n  }\n}\n", "protected FactoryDto updateProjectInFactory(final FactoryDto factory,final String repositoryUrl,final String headBranch,final String headCommitId) throws ServerException {\n  return updateProjectInFactory(factory,repositoryUrl,headBranch,repositoryUrl,headCommitId);\n}\n", "void createTodo ( YokeRequest request ) { request . put ( STR_ , BOOL_ ) ; request . response ( ) . render ( STR_ ) ; }", "public int modelIndex ( final int viewIndex ) { return convertRowIndexToModel ( viewIndex ) ; }", "private void deactivateBreakpoints ( ) { final BreakpointManager manager = debugger . getBreakpointManager ( ) ; final Set < BreakpointAddress > addressesToRemove = new HashSet < > ( ) ; final Set < BreakpointAddress > addressesToDisable = new HashSet < > ( ) ; for ( final Breakpoint breakpoint : manager . getBreakpoints ( BreakpointType . REGULAR ) ) { final BreakpointAddress address = breakpoint . getAddress ( ) ; if ( manager . getBreakpointStatus ( address , BreakpointType . REGULAR ) == BreakpointStatus . BREAKPOINT_DELETING ) { addressesToRemove . add ( address ) ; } else if ( manager . getBreakpointStatus ( address , BreakpointType . REGULAR ) != BreakpointStatus . BREAKPOINT_DISABLED ) { addressesToDisable . add ( address ) ; } } manager . removeBreakpoints ( BreakpointType . REGULAR , addressesToRemove ) ; manager . setBreakpointStatus ( addressesToDisable , BreakpointType . REGULAR , BreakpointStatus . BREAKPOINT_INACTIVE ) ; }", "protected base_resource[] get_nitro_response(nitro_service service, String response) throws Exception {\n\t\tsystem_stats[] resources = new system_stats[1];\n\t\tsystem_response result = (system_response) service.get_payload_formatter().string_to_resource(system_response.class, response);\n\t\tif(result.errorcode != 0) {\n\t\t\tif (result.errorcode == 444) {\n\t\t\t\tservice.clear_session();\n\t\t\t}\n\t\t\tif(result.severity != null)\n\t\t\t{\n\t\t\t\tif (result.severity.equals(\"ERROR\"))\n\t\t\t\t\tthrow new nitro_exception(result.message,result.errorcode);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new nitro_exception(result.message,result.errorcode);\n\t\t\t}\n\t\t}\n\t\tresources[0] = result.system;\n\t\treturn resources;\n\t}", "public static void typeface ( Activity activity , TypefaceCollection typefaceCollection ) { typeface ( activity . findViewById ( android . R . id . content ) , typefaceCollection ) ; }", "  protected String toTime(Calendar calendar) {\n    if (calendar == null)\n      return \"\";\n    int hour = calendar.get(Calendar.HOUR_OF_DAY);\n    int min = calendar.get(Calendar.MINUTE);\n    int sec = calendar.get(Calendar.SECOND);\n    String r = \"\";\n    if (hour < 10) {\n      r += \"0\";\n    }\n    r += hour + \":\";\n    if (min < 10) {\n      r += \"0\";\n    }\n    r += min + \":\";\n    if (sec < 10) {\n      r += \"0\";\n    }\n    r += sec;\n    return r;\n  }\n", "protected static long calculateUplink ( IBandIdentifier iden , int channel ) { long downlink = calculateDownlink ( iden , channel ) ; if ( downlink > NUM_ && iden != null ) { return downlink + iden . getTransmitOffset ( ) ; } return NUM_ ; }", "public String getComment() {\n        synchronized (this) {\n            ensureOpen();\n            byte[] bcomm = getCommentBytes(jzfile);\n            if (bcomm == null)\n                return null;\n            return zc.toString(bcomm, bcomm.length);\n        }\n    }", "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return ERROR_CODE;\ncase 2:\n  return STRUCT_THING;\ndefault :\nreturn null;\n}\n}", "\tpublic UndoableAction execute() throws ActionExecutionException {\n\t\ttry {\n\t\t\tworkflow.addPipe(pipe);\n\t\t} catch (DuplicatedPipeIdException e) {\n\t\t\tthrow new ActionExecutionException(\"Cannot insert pipe\", e);\t\t\t\n\t\t} catch (InvalidDependencyException e) {\n\t\t\tthrow new ActionExecutionException(\"Cannot insert pipe\", e);\n\t\t} catch (DuplicatedPipeException e) {\n\t\t\tthrow new ActionExecutionException(\"Cannot insert pipe\", e);\n\t\t}\n\t\t\n\t\tif(undo == null){\n\t\t\tundo = new RemovePipe(this);\n\t\t}\n\t\treturn undo;\n\t}\n", "\tpublic String getLog4j_Level_ERROR() {\n\t\treturn \"\" + Log4j_Level_ERROR;\n\t}\n", "    public void dotdot() {\n        String s = \"\";\n        Object o = null;\n        if (stack.size() > 0) {\n            while (stack.size() > 0) {\n                o = stack.pop();\n                if (null != o) {\n                    s = o.toString();\n                }\n                else {\n                    s = \"`null`\";\n                }                                                       /* End if*/\n                myInterpreter.output(s + \" \");\n            }                                                      /* End while*/\n        }                                                           /* End if*/\n        else {\n            myInterpreter.output(\"Empty stack. \");\n        }                                                           /* End if*/\n    }                                                           /* dotdot()*/\n", "    public boolean onMyLinkClick() {\n        msg = \"ControlListenerPage#\" + hashCode()\n            + \" object method <tt>onMyLinkClick()</tt> invoked.\";\n\n        return true;\n    }\n", "    public StructuredBlock prependBlock(StructuredBlock block) {\n\t/* For empty blocks: append == prepend modulo jump */\n\tblock = appendBlock(block);\n\tblock.moveJump(this.jump);\n\treturn block;\n    }\n", "public Object readMessage() throws IOException, FormatErrorException {\n  while (true) {\n    fillBuffer(HDRLEN);\n    long pos=position();\n    int s1=buffer.get() & 0xFF;\n    int s2=buffer.get() & 0xFF;\n    int msgSize=s1 + (256 * s2);\n    int msgType=buffer.get() & 0xFF;\n    try {\n      fillBuffer(msgSize);\n    }\n catch (    EOFException e) {\n      errors.add(new FormatErrorException(pos,\"Unexpected end of file\"));\n      throw e;\n    }\n    Object msg;\nswitch (msgType) {\ncase MESSAGE_TYPE_DATA:\n      s1=buffer.get() & 0xFF;\n    s2=buffer.get() & 0xFF;\n  int msgID=s1 + (256 * s2);\nSubscription subscription=null;\nif (msgID < messageSubscriptions.size()) subscription=messageSubscriptions.get(msgID);\nif (subscription == null) {\nposition(pos);\nerrors.add(new FormatErrorException(pos,\"Unknown DATA subscription ID: \" + msgID));\nbuffer.position(buffer.position() + msgSize - 1);\ncontinue;\n}\nmsg=new MessageData(subscription.format,buffer,subscription.multiID);\nbreak;\ncase MESSAGE_TYPE_INFO:\nmsg=new MessageInfo(buffer);\nbreak;\ncase MESSAGE_TYPE_PARAMETER:\nmsg=new MessageParameter(buffer);\nbreak;\ncase MESSAGE_TYPE_FORMAT:\nmsg=new MessageFormat(buffer,msgSize);\nbreak;\ncase MESSAGE_TYPE_ADD_LOGGED_MSG:\nmsg=new MessageAddLogged(buffer,msgSize);\nbreak;\ncase MESSAGE_TYPE_DROPOUT:\nmsg=new MessageDropout(buffer);\nbreak;\ncase MESSAGE_TYPE_LOG:\nmsg=new MessageLog(buffer,msgSize);\nbreak;\ncase MESSAGE_TYPE_REMOVE_LOGGED_MSG:\ncase MESSAGE_TYPE_SYNC:\nbuffer.position(buffer.position() + msgSize);\ncontinue;\ndefault :\nbuffer.position(buffer.position() + msgSize);\nerrors.add(new FormatErrorException(pos,\"Unknown message type: \" + msgType));\ncontinue;\n}\nint sizeParsed=(int)(position() - pos - HDRLEN);\nif (sizeParsed != msgSize) {\nerrors.add(new FormatErrorException(pos,\"Message size mismatch, parsed: \" + sizeParsed + \", msg size: \"+ msgSize));\nbuffer.position(buffer.position() + msgSize - sizeParsed);\n}\nreturn msg;\n}\n}\n", "void onDataOK ( String url , String data ) ;", "    public void addOpenFile(Monitorable file) {\n        openFiles.add(file);\n    }\n", "void addListener ( INaviReplacementListener listener ) ;", "@Get public Representation readOrListResourceSet() throws NotFoundException, ServerException {\n  String resourceSetId=getResourceSetId();\n  if (resourceSetId == null || resourceSetId.isEmpty()) {\n    return listResourceSets();\n  }\n else {\n    return readResourceSet(resourceSetId);\n  }\n}\n", "    protected Object convert(Object obj, Class class1) throws InvalidDataTypeException, UnsupportedTypeException {\n\t\tSystem.out.println(\"StringToPrimitiveByteConverter: emtpy method\");\n\t\treturn null;\n\t}\n", "private static void notifyDrawable ( Drawable drawable , final boolean isDisplayed ) { if ( drawable instanceof RecyclingBitmapDrawable ) { ( ( RecyclingBitmapDrawable ) drawable ) . setIsDisplayed ( isDisplayed ) ; } else if ( drawable instanceof LayerDrawable ) { LayerDrawable layerDrawable = ( LayerDrawable ) drawable ; for ( int i = NUM_ , z = layerDrawable . getNumberOfLayers ( ) ; i < z ; i ++ ) { notifyDrawable ( layerDrawable . getDrawable ( i ) , isDisplayed ) ; } } }", "public static List < Restaurant > syncRestaurants ( List < Restaurant > restaurants ) { if ( AuthToken . isAvailable ( ) ) { try { return API . syncRestaurants ( restaurants ) ; } catch ( RetrofitError e ) { log ( e ) ; } } return null ; }", "public IdsQuery(Class<T> type,Object[] ids){\n  this(type.getName(),ids,null,null,QueryResultType.DEFAULT);\n}\n", "    public void setFooterWidget(int column, Widget widget) {\n        prepareFooterCell(column);\n\n        if (widget != null) {\n            widget.removeFromParent();\n\n            Element td = DOM.getChild(DOM.getFirstChild(getTFootElement()), column);\n            internalClearCell(td, true);\n\n            // Physical attach.\n            DOM.appendChild(td, widget.getElement());\n\n            List<Widget> footerWidgets = getFooterWidgets();\n            if (footerWidgets.size() > column && footerWidgets.get(column) != null)\n                footerWidgets.set(column, widget);\n            else\n                footerWidgets.add(column, widget);\n\n            adopt(widget);\n        }\n    }\n", "public List<CmsListItem> filter(List<CmsListItem> items, String filter) {\n\n        if (CmsStringUtil.isEmptyOrWhitespaceOnly(filter)) {\n            return items;\n        }\n        String filterCriteria = filter;\n        if (m_caseInSensitive) {\n            filterCriteria = filter.toLowerCase();\n        }\n\n        List<CmsListItem> res = new ArrayList<CmsListItem>();\n        Iterator<CmsListItem> itItems = items.iterator();\n        while (itItems.hasNext()) {\n            CmsListItem item = itItems.next();\n            if (res.contains(item)) {\n                continue;\n            }\n            Iterator<CmsListColumnDefinition> itCols = m_columns.iterator();\n            while (itCols.hasNext()) {\n                CmsListColumnDefinition col = itCols.next();\n                if (item.get(col.getId()) == null) {\n                    continue;\n                }\n                String columnValue = item.get(col.getId()).toString();\n                if (m_caseInSensitive) {\n                    columnValue = columnValue.toLowerCase();\n                }\n                if (columnValue.indexOf(filterCriteria) > -1) {\n                    res.add(item);\n                    break;\n                }\n            }\n        }\n        return res;\n    }", "public static SortedBugCollection getBugCollection(IProject project, IProgressMonitor monitor)\n            throws CoreException {\n        SortedBugCollection bugCollection = (SortedBugCollection) project.getSessionProperty(SESSION_PROPERTY_BUG_COLLECTION);\n        if (bugCollection == null) {\n            try {\n                readBugCollectionAndProject(project, monitor);\n                bugCollection = (SortedBugCollection) project.getSessionProperty(SESSION_PROPERTY_BUG_COLLECTION);\n            } catch (IOException e) {\n                FindbugsPlugin.getDefault().logException(e, \"Could not read bug collection for project\");\n                bugCollection = createDefaultEmptyBugCollection(project);\n            } catch (DocumentException e) {\n                FindbugsPlugin.getDefault().logException(e, \"Could not read bug collection for project\");\n                bugCollection = createDefaultEmptyBugCollection(project);\n            }\n        }\n        return bugCollection;\n    }", "public String findCoordTransformName(int code){\n  if ((code < 0) || (code >= coordTransformName.length)) {\n    return (null);\n  }\n  return (coordTransformName[code]);\n}\n", "private String createFileName(String fName){\n  List<String> forbiddenCharsPatterns=new ArrayList<>();\n  forbiddenCharsPatterns.add(\"[:]+\");\n  forbiddenCharsPatterns.add(\"[\\\\*\\\"/\\\\\\\\\\\\[\\\\]\\\\:\\\\;\\\\|\\\\=\\\\,]+\");\n  forbiddenCharsPatterns.add(\"[^\\\\w\\\\d\\\\.]+\");\n  String nameToTest=fName;\n  for (  String pattern : forbiddenCharsPatterns) {\n    nameToTest=nameToTest.replaceAll(pattern,\"_\");\n  }\n  return nameToTest;\n}\n", "\tpublic int intValue() {\n\n\t\treturn (int)byteArrayToNumber();\n\t}\n", "private static boolean hasEmptyAttr ( SvcReg reg , EntryClass eclass ) { EntryRep [ ] sets = reg . item . attributeSets ; for ( int i = sets . length ; -- i >= NUM_ ; ) { if ( eclass . equals ( sets [ i ] . eclass ) ) return BOOL_ ; } return BOOL_ ; }", "    public boolean last() {\n        return m_coll_a.last() || m_coll_b.last();\n    }\n", "private Object parseBean(Map<String, Object> input, Class<?> beanType) throws Exception {\n        String propName = \"\";\n        try {\n            SerDeserializer deser = settings.getDeserializers().findDeserializer(beanType);\n            MetaBean metaBean = deser.findMetaBean(beanType);\n            BeanBuilder<?> builder = deser.createBuilder(beanType, metaBean);\n            for (Entry<String, Object> entry : input.entrySet()) {\n                // property name\n                propName = entry.getKey();\n                MetaProperty<?> metaProp = deser.findMetaProperty(beanType, metaBean, propName);\n                // ignore unknown properties\n                if (metaProp != null && !metaProp.style().isDerived()) {\n                    Object value = parseObject(\n                            entry.getValue(), SerOptional.extractType(metaProp, beanType), metaProp, beanType, null);\n                    deser.setValue(builder, metaProp, SerOptional.wrapValue(metaProp, beanType, value));\n                }\n                propName = \"\";\n            }\n            return deser.build(beanType, builder);\n        } catch (Exception ex) {\n            throw new IllegalArgumentException(\n                    \"Error parsing bean: \" + beanType.getName() + \"::\" + propName + \", \" + ex.getMessage(), ex);\n        }\n    }", "private int size(){\n  if (isLeaf())   return points.size();\n else   return children.size();\n}\n", "public Rest2LdapHttpApplication(final File configDirectory,final Schema schema){\n  this.configDirectory=checkNotNull(configDirectory,\"configDirectory cannot be null\");\n  this.schema=checkNotNull(schema,\"schema cannot be null\");\n}\n", "    public DSet newDSet() {\n        if (org.ozoneDB.core.Env.uglyHack_database != null) {\n            throw new ODMGRuntimeException( \"Method must not be called from inside an ozone database object.\" );\n        } \n        return new OzoneODMGDSet();\n    } \n", "    public Transaction getTransactionObject() throws ValidationException, FrameworkException  {\n        findTransactionObject(false);\n        return m_transactionObject;\n    }\n", "\tprivate void setupBuilder() {\n\t\tmetadata = dom.createElementNS(Constants.XBRLAPINamespace,Constants.XBRLAPIPrefix + \":\" + Constants.FragmentRootElementName);\n\t\tElement container = dom.createElementNS(Constants.XBRLAPINamespace,Constants.XBRLAPIPrefix + \":\" + Constants.FragmentDataContainerElementName);\n\t\tsetInsertionPoint(container);\n\t\tmetadata.appendChild(container);\t\t\n\t}\n", "public boolean containsGroup(String group){\n  return groups.contains(group);\n}\n", "\tprotected void addHandlePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_DSpaceImage_handle_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_DSpaceImage_handle_feature\", \"_UI_DSpaceImage_type\"),\n\t\t\t\t DspaceMetamodelPackage.Literals.DSPACE_IMAGE__HANDLE,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "    private boolean isUnderSourceControl(String name) {\n        if (name == null) {\n            return false;\n        }\n\n        try {\n            FileSettings bundle = FileSettings.getRefactorySettings(\"vss\");\n\n            int index = 1;\n            while (true) {\n                String next = bundle.getString(\"extension.\" + index);\n                System.out.println(\"\\t\\tComparing:  [\" + name + \"] to [\" + next + \"]\");\n                if (name.endsWith(next)) {\n                    System.out.println(\"\\t\\tFound it\");\n                    return true;\n                }\n                index++;\n            }\n        }\n        catch (MissingSettingsException mse) {\n            //  Finished\n        }\n\n        return false;\n    }\n", "protected void writeProperty(String propertyName, String propertyValue) throws CmsException {\n\n        if (CmsStringUtil.isEmpty(propertyValue)) {\n            propertyValue = CmsProperty.DELETE_VALUE;\n        }\n\n        CmsProperty newProp = new CmsProperty();\n        newProp.setName(propertyName);\n        CmsProperty oldProp = getCms().readPropertyObject(getParamResource(), propertyName, false);\n        if (oldProp.isNullProperty()) {\n            // property value was not already set\n            if (OpenCms.getWorkplaceManager().isDefaultPropertiesOnStructure()) {\n                newProp.setStructureValue(propertyValue);\n            } else {\n                newProp.setResourceValue(propertyValue);\n            }\n        } else {\n            if (oldProp.getStructureValue() != null) {\n                newProp.setStructureValue(propertyValue);\n                newProp.setResourceValue(oldProp.getResourceValue());\n            } else {\n                newProp.setResourceValue(propertyValue);\n            }\n        }\n\n        newProp.setAutoCreatePropertyDefinition(true);\n\n        String oldStructureValue = oldProp.getStructureValue();\n        String newStructureValue = newProp.getStructureValue();\n        if (CmsStringUtil.isEmpty(oldStructureValue)) {\n            oldStructureValue = CmsProperty.DELETE_VALUE;\n        }\n        if (CmsStringUtil.isEmpty(newStructureValue)) {\n            newStructureValue = CmsProperty.DELETE_VALUE;\n        }\n\n        String oldResourceValue = oldProp.getResourceValue();\n        String newResourceValue = newProp.getResourceValue();\n        if (CmsStringUtil.isEmpty(oldResourceValue)) {\n            oldResourceValue = CmsProperty.DELETE_VALUE;\n        }\n        if (CmsStringUtil.isEmpty(newResourceValue)) {\n            newResourceValue = CmsProperty.DELETE_VALUE;\n        }\n\n        // change property only if it has been changed\n        if (!oldResourceValue.equals(newResourceValue) || !oldStructureValue.equals(newStructureValue)) {\n            getCms().writePropertyObject(getParamResource(), newProp);\n        }\n    }", "public Observable<Page<DataLakeAnalyticsAccountBasicInner>> listByResourceGroupNextAsync(final String nextPageLink) {\n        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)\n            .map(new Func1<ServiceResponse<Page<DataLakeAnalyticsAccountBasicInner>>, Page<DataLakeAnalyticsAccountBasicInner>>() {\n                @Override\n                public Page<DataLakeAnalyticsAccountBasicInner> call(ServiceResponse<Page<DataLakeAnalyticsAccountBasicInner>> response) {\n                    return response.body();\n                }\n            });\n    }", "public static <R> Observable<R> startCallable(Callable<? extends R> func) {\n        return startCallable(func, Schedulers.computation());\n    }", "public boolean same(MimeType other) {\n\tif (this == other) return true;\n\treturn getTypeNotNull().equals(other.getTypeNotNull()) && getSubtypeNotNull().equals(other.getSubtypeNotNull());\n    }", "\tpublic void removeMessageNode(MessageNode mn){\n\t\tmainList.remove(mn);\n\t}\n", "@Override\n    public LocalDateTime minus(TemporalAmount amountToSubtract) {\n        if (amountToSubtract instanceof Period) {\n            Period periodToSubtract = (Period) amountToSubtract;\n            return with(date.minus(periodToSubtract), time);\n        }\n        Objects.requireNonNull(amountToSubtract, \"amountToSubtract\");\n        return (LocalDateTime) amountToSubtract.subtractFrom(this);\n    }", "protected synchronized void do_send(final OtpOutputStream header,\n            final OtpOutputStream payload) throws IOException {\n        try {\n            if (traceLevel >= sendThreshold) {\n                // Need to decode header and output buffer to show trace\n                // message!\n                // First make OtpInputStream, then decode.\n                try {\n                    final OtpErlangObject h = header.getOtpInputStream(5)\n                            .read_any();\n                    System.out.println(\"-> \" + headerType(h) + \" \" + h);\n\n                    OtpErlangObject o = payload.getOtpInputStream(0).read_any();\n                    System.out.println(\"   \" + o);\n                    o = null;\n                } catch (final OtpErlangDecodeException e) {\n                    System.out.println(\"   \" + \"can't decode output buffer:\"\n                            + e);\n                }\n            }\n\n            // group flush op in favour of possible ssh-tunneled stream\n            OutputStream out = socket.getOutputStream();\n            header.writeTo(out);\n            payload.writeTo(out);\n            out.flush();\n        } catch (final IOException e) {\n            close();\n            throw e;\n        }\n    }", "public static Object [ ] flatten ( Object [ ] array ) { final List < Object > list = new ArrayList < Object > ( ) ; if ( array != null ) { for ( Object o : array ) { if ( o instanceof Object [ ] ) { for ( Object oR : flatten ( ( Object [ ] ) o ) ) { list ", "  public DBOrderClause getObjectsOrderClause( BasicDBO _c) {\n    ContactTypeDBO c = (ContactTypeDBO)_c;\n    DBOrderClause oc = new DBOrderClause();\n    oc.add(c, c.orderby);\n    return oc;\n  }\n", "\tpublic String getName() {\n\t\tlogger.log( Level.DEBUG, \"Method has been called.\" );\n\t\treturn this.name;\n\t}\n", "public static Set<Integer> foreach(BitSet x){\n  Set<Integer> result=new TreeSet<Integer>();\n  for (int i=0; i < x.length(); i++)   if (x.get(i))   result.add(i);\n  return result;\n}\n", "public static String dateToText(Context context,Date date){\n  String textDate;\n  date=truncateHours(date);\n  Calendar c=Calendar.getInstance();\n  c.set(Calendar.HOUR_OF_DAY,0);\n  c.set(Calendar.MINUTE,0);\n  c.set(Calendar.SECOND,0);\n  c.set(Calendar.MILLISECOND,0);\n  Date today=c.getTime();\n  c.add(Calendar.DATE,-1);\n  Date yesterday=c.getTime();\n  if (date.equals(today)) {\n    textDate=context.getString(R.string.today_s);\n  }\n else   if (date.equals(yesterday)) {\n    textDate=context.getString(R.string.yesterday_s);\n  }\n else {\n    textDate=formatDate(date,new SimpleDateFormat(\"dd.MM\"));\n  }\n  return textDate;\n}\n", "public InputFile getNextFile() {\n    for (Iterator<String> iter = queuedNames.iterator(); iter.hasNext(); ) {\n      String name = iter.next();\n      iter.remove();\n      processedNames.add(name);\n      InputFile file = getFileForName(name);\n      if (file != null) {\n        return file;\n      }\n    }\n    return null;\n  }", "@BetaApi\n  public final Operation deleteVpnTunnel(String vpnTunnel) {\n\n    DeleteVpnTunnelHttpRequest request =\n        DeleteVpnTunnelHttpRequest.newBuilder().setVpnTunnel(vpnTunnel).build();\n    return deleteVpnTunnel(request);\n  }", "void release ( ) ;", "public void addPrimer ( String moduleFilename , String extendedModuleName ) { tlaBuffer . append ( ResourceHelper . getExtendingModuleContent ( moduleFilename , extendedModuleName ) ) ; }", "Item newDouble ( final double value ) { key . set ( value ) ; Item result = get ( key ) ; if ( result == null ) { pool . putByte ( DOUBLE ) . putLong ( key . longVal ) ; result = new Item ( index , key ) ; index += NUM_ ; put ( result ) ; } return result ", "public ConditionalMutualInfoCalculatorMultiVariateKraskov ( ) { super ( ) ; }", "  private NodeViewI makeNodeView(NBNode nodeModel,boolean is3D) {\n    float x = random();\n    float y = random();\n    float z = is3D ? random() : 0;\n    NodeViewI nodeView =  new NodeView(nodeModel,x,y,z);\n    // for initial query but doesnt work for expanded, as already made\n    if (nodeView.isQueryNode()) queryNode = nodeView;\n    addNode(nodeView);\n    if (nodeModToVw==null) nodeModToVw = new HashMap<NBNode,NodeViewI>();\n    nodeModToVw.put(nodeModel,nodeView);\n    return nodeView;\n  }\n", "void addRestResourceClasses(Set<Class<?>> resources) {\n\t\tlogger.info(\"Register ocelot resources...\");\n\t\tfor (Object restEndpoint : restEndpoints) {\n\t\t\tClass cls = unProxyClassServices.getRealClass(restEndpoint.getClass());\n\t\t\tlogger.info(\"Register ocelot resource {}\", cls.getName());\n\t\t\tresources.add(cls);\n\t\t}\n\t}", "protected int checkIPHistory(){\n  int retVal=0;\n  String ipHistoryValues=null;\n  String newHistory=clientIP;\n  int historyCount=0;\n  if (IPHistoryAttribute != null) {\n    ipHistoryValues=getIdentityAttributeString(IPHistoryAttribute);\n    if (debug.messageEnabled()) {\n      debug.message(\"{}.checkIPHistory: Client IP = {}, History IP = {}\",ADAPTIVE,clientIP,ipHistoryValues);\n    }\n    if (ipHistoryValues != null) {\n      StringTokenizer st=new StringTokenizer(ipHistoryValues,\"|\");\n      while (st.hasMoreTokens()) {\n        String theIP=st.nextToken();\n        historyCount+=1;\n        if (historyCount < IPHistoryCount) {\n          newHistory+=\"|\" + theIP;\n        }\n        if (clientIP.equals(theIP)) {\n          retVal=IPHistoryScore;\n        }\n      }\n    }\n  }\n  if (IPHistorySave && retVal == 0) {\n    postAuthNMap.put(\"IPSAVE\",newHistory);\n    postAuthNMap.put(\"IPAttr\",IPHistoryAttribute);\n  }\n  if (!IPHistoryInvert) {\n    retVal=IPHistoryScore - retVal;\n  }\n  return retVal;\n}\n", "\tprotected void enqueue(final WorkQueueFrontier frontier, CrawlURI curi) {\n\t\ttry {\n\t\t\tinsert(frontier, curi, false);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\tcount++;\n\t\tenqueueCount++;\n\t}\n", "\tpublic boolean isTerminator() {\n\t\t// TODO Auto-generated method stub\n\t\treturn lo == null || hi == null;\n\t}\n", "public Collection<TypeQualifierValue<?>> getDirectlyRelevantTypeQualifiers(MethodDescriptor m) {\n        Collection<TypeQualifierValue<?>> result = methodToDirectlyRelevantQualifiersMap.get(m);\n        if (result != null) {\n            return result;\n    ", "protected PostgreSQLModuleViewsLoader ( ) { }", "public <R> Stream<R> map(Function<? super T, ? extends R> mapper) {\n        List<R> list = new ArrayList<R>();\n        while (iterator.hasNext()) {\n            list.add(mapper.apply(iterator.next()));\n        }\n        return Stream.of(list);\n    }", "public KdbGroup findGroup ( final UUID uuid ) { GroupFinder groupFinder = new GroupFinder ( uuid ) ; this . visit ( groupFinder ) ; return ( KdbGroup ) groupFinder . foundGroup ; }", "FunctionBlock ( final Function function ) { m_function = Preconditions . checkNotNull ( function , STR_ ) ; }", "public CalendarIntervalScheduleBuilder withIntervalInWeeks ( int intervalInWeeks ) { validateInterval ( intervalInWeeks ) ; this . interval = intervalInWeeks ; this . intervalUnit = IntervalUnit . WEEK ; return this ; }", "    public boolean isBanned(long pid) {\n        return banList.contains(pid);\n    }\n", "protected void addImageToLists(ImageTile imageTile,OMGraphicList ret,URL fileURL){\n  imageTile.generate(getProjection());\n  ret.add(imageTile);\n  addImageTileToList(imageTile);\n  imageTile.putAttribute(FILE_PATH_ATTRIBUTE,fileURL.getPath());\n  imageTile.putAttribute(NAME_ATTRIBUTE,fileURL.getFile());\n  selectedDrawingAttributes.setTo(imageTile);\n  repaint();\n  if (resultsList != null) {\n    resultsList.repaint();\n  }\n}\n", "public void clear() {\n\t\tif (mapPoints != null) {\n\t\t\tmapPoints.clear();\n\t\t}\n\t}", "public URLReaderSource ( URL url , CompilerConfiguration configuration ) { super ( configuration ) ; this . url = url ; }", "\tpublic boolean printUtterance(Utterance u) {\n\t\ttry {\n\t\t\tPrintStream ps;\n\t\t\tif (printFile)\n\t\t\t\tps = new PrintStream(new FileOutputStream(filename));\n\t\t\telse\n\t\t\t\tps = System.out;\n\t\t\treturn printUtterance(u, ps);\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t}\n", "void initParsingContext ( ParsingContext parsingContext ) ;", "public static <ContainingType extends MessageLite,Type>GeneratedExtension<ContainingType,Type> newRepeatedGeneratedExtension(final ContainingType containingTypeDefaultInstance,final MessageLite messageDefaultInstance,final Internal.EnumLiteMap<?> enumTypeMap,final int number,final WireFormat.FieldType type,final boolean isPacked){\n  @SuppressWarnings(\"unchecked\") Type emptyList=(Type)Collections.emptyList();\n  return new GeneratedExtension<ContainingType,Type>(containingTypeDefaultInstance,emptyList,messageDefaultInstance,new ExtensionDescriptor(enumTypeMap,number,type,true,isPacked));\n}\n", "public static long checkSum ( byte [ ] b , int offset , int length ) { long checkSum = NUM_ ; for ( int i = offset ; i < length ; i += NUM_ ) { for ( int j = NUM_ ; j < NUM_ ; j ++ ) { if ( j + i < length ) { checkSum += ( b [ j + i ] & NUM_ ) << ( NUM_ -", "public void hide ( Animation anim ) { hide ( BOOL_ , anim ) ; }", "public static boolean isDoubleCategory ( ClassNode type ) { return type == float_TYPE || type == double_TYPE || isBigDecCategory ( type ) ; }", "public static double angleSparseDense(SparseNumberVector v1,NumberVector v2){\n  final int dim2=v2.getDimensionality();\n  double l1=0., l2=0., cross=0.;\n  int i1=v1.iter(), d2=0;\n  while (v1.iterValid(i1)) {\n    final int d1=v1.iterDim(i1);\n    while (d2 < d1 && d2 < dim2) {\n      final double val=v2.doubleValue(d2);\n      l2+=val;\n    }\n    if (d2 < dim2) {\n      final double val1=v1.iterDoubleValue(i1);\n      final double val2=v2.doubleValue(d2);\n      l1+=val1 * val1;\n      l2+=val2 * val2;\n      cross+=val1 * val2;\n      i1=v1.iterAdvance(i1);\n      ++d2;\n    }\n  }\n  while (v1.iterValid(i1)) {\n    final double val=v1.iterDoubleValue(i1);\n    l1+=val * val;\n    i1=v1.iterAdvance(i1);\n  }\n  while (d2 < dim2) {\n    final double val=v2.doubleValue(d2);\n    l2+=val * val;\n    ++d2;\n  }\n  final double a=(cross == 0.) ? 0. : (l1 == 0. || l2 == 0.) ? 1. : Math.sqrt((cross / l1) * (cross / l2));\n  return (a < 1.) ? a : 1.;\n}\n", "\tpublic void onDialogClose(MAPDialog mapDialog) {\n\t\tthis._field_punch_display.setText(\"Dialog Closed\");\n\t\tthis.onlyKeyPadContent = false;\n\t\tthis.clientDialog = null;\n\t\tthis._keypad_button_break.setEnabled(false);\n\t}\n", "    public Collection getToolbarMethods(View view) {\n\n\tCollection c = new Vector();\n\t\n\t// A way to introduce new entities to the model.\n//\tObject entity_type = model.getFramework().getType(\"Entity\");\n//\tPluginMethod entity_method = new CreateElementMethod(entity_type,\n//\t\t\"Entity\", view);\n\t\n\t/*Object rel_type = model.getFramework().getType(\"Relationship\");\n\tPluginMethod rel_method = new CreateElementMethod(rel_type,\n\t\t\"Relationship\", view);\n\t*/\n//\tObject att_type = model.getFramework().getType(\"Attribute\");\n//\tPluginMethod att_method = new CreateElementMethod(att_type,\n//\t\t\"Attribute\", view);\n\t\n\t\n\treturn c;\n    }\n", "default void postRun ( ) throws Exception { }", "public int size ( ) { return workQueue . size ( ) ; }", "public boolean addElement(Object obj){\nsynchronized (actions) {\n    if (allowToChange) {\n      return actions.add(obj);\n    }\n  }\n  return false;\n}\n", "\tpublic void setFaci(String value) {\n\t\tif (value.length() > 3) {\n\t\t\tvalue = value.substring(0, 3);\n\t\t}\n\t\tsetFieldValue(\"DCFACI\", value);\n\t}\n", "public JsonReader createReader(InputStream input) {\n        try {\n            return createReader(new InputStreamReader(input, \"UTF-8\"));\n        }\n        catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n        }\n    }", "public static boolean write(OutputStream stream,Object o) throws Exception {\n  Class<?> komlClass;\n  Class<?>[] komlClassArgs;\n  Object[] komlArgs;\n  java.lang.reflect.Constructor<?> constructor;\n  Object koml;\n  java.lang.reflect.Method methodAdd;\n  java.lang.reflect.Method methodClose;\n  Class<?>[] addArgsClasses;\n  Class<?>[] closeArgsClasses;\n  Object[] addArgs;\n  Object[] closeArgs;\n  boolean result;\n  result=false;\n  komlClass=Class.forName(\"fr.dyade.koala.xml.koml.KOMLSerializer\");\n  komlClassArgs=new Class[2];\n  komlClassArgs[0]=java.io.OutputStream.class;\n  komlClassArgs[1]=Boolean.TYPE;\n  komlArgs=new Object[2];\n  komlArgs[0]=stream;\n  komlArgs[1]=new Boolean(false);\n  constructor=komlClass.getConstructor(komlClassArgs);\n  koml=constructor.newInstance(komlArgs);\n  addArgsClasses=new Class[1];\n  addArgsClasses[0]=Object.class;\n  methodAdd=komlClass.getMethod(\"addObject\",addArgsClasses);\n  addArgs=new Object[1];\n  addArgs[0]=o;\n  closeArgsClasses=new Class[0];\n  methodClose=komlClass.getMethod(\"close\",closeArgsClasses);\n  closeArgs=new Object[0];\n  try {\n    methodAdd.invoke(koml,addArgs);\n    result=true;\n  }\n catch (  Exception e) {\n    result=false;\n  }\n finally {\n    methodClose.invoke(koml,closeArgs);\n  }\n  return result;\n}\n", "public void addData(ArrayList<ChartSet> data){\n  this.data=data;\n}\n", "public boolean isExpired(){\n  return this.ttl == 0 ? false : this.ttl < System.currentTimeMillis();\n}\n", "public void addRevision(String revremark){\n  addRevision(System.getProperty(\"user.name\"),revremark);\n}\n", "public static Program compete(List<Program> programs, Program current, Program candidate, LGP manager, RandEngine randEngine) {\n      if(manager.getReplacementStrategy() == LGPReplacementStrategy.DirectCompetition) {\n         if (CollectionUtils.isBetterThan(candidate, current)) {\n            int index = programs.indexOf(current);\n            programs.set(index, candidate);\n            return current;\n         }\n         else {\n            return candidate;\n         }\n      } else {\n         if(randEngine.uniform() <= manager.getReplacementProbability()){\n            int index = programs.indexOf(current);\n            programs.set(index, candidate);\n            return current;\n         } else {\n            return candidate;\n         }\n      }\n   }", "private void buildFirstLine(LinePath path,Rect r){\n  int[] range=new int[]{-r.left,-r.top,r.right,r.bottom};\n  int max=-1;\n  int maxId=0;\n  for (int i=0; i < 4; i++) {\n    if (range[i] > max) {\n      max=range[i];\n      maxId=i;\n    }\n  }\nswitch (maxId) {\ncase 0:\n    path.setEndPoint(r.left,Utils.nextInt(r.height()) + r.top);\n  break;\ncase 1:\npath.setEndPoint(Utils.nextInt(r.width()) + r.left,r.top);\nbreak;\ncase 2:\npath.setEndPoint(r.right,Utils.nextInt(r.height()) + r.top);\nbreak;\ncase 3:\npath.setEndPoint(Utils.nextInt(r.width()) + r.left,r.bottom);\nbreak;\n}\npath.lineToEnd();\n}\n", "CssFormatter startBlock( String[] selectors ) {\n        final List<CssOutput> results = state.results;\n        if( blockDeep == 0 ) {\n            output = null;\n            CssOutput nextOutput = null;\n            if( results.size() > 0 && !\"@font-face\".equals( selectors[0] ) ) {\n                CssOutput cssOutput = results.get( results.size() - 1 );\n                if( Arrays.equals( selectors, cssOutput.getSelectors() ) ) {\n                    nextOutput = cssOutput;\n                }\n            }\n            CssFormatter block;\n            if( nextOutput == null ) {\n                block = copy( null );\n                if( selectors[0].startsWith( \"@media\" ) ) {\n                    block.lessExtends = new LessExtendMap( state.lessExtends );\n                    nextOutput = new CssMediaOutput( selectors, block.output, state.isReference, block.lessExtends );\n                } else {\n                    nextOutput = new CssRuleOutput( selectors, block.output, state.isReference );\n                }\n                results.add( nextOutput );\n            } else {\n                block = copy( nextOutput.getOutput() );\n            }\n            block.currentOutput = nextOutput;\n            block.incInsets();\n            block.blockDeep++;\n            return block;\n        } else {\n            if( selectors[0].startsWith( \"@media\" ) ) {\n                CssFormatter block = copy( null );\n                block.lessExtends = new LessExtendMap( state.lessExtends );\n                String[] sel = new String[]{ this.currentOutput.getSelectors()[0] + \" and \" + selectors[0].substring( 6 ).trim() };\n                block.currentOutput = new CssMediaOutput( sel, block.output, state.isReference, block.lessExtends );\n                results.add( block.currentOutput );\n                block.insets.setLength( 2 );\n                block.blockDeep = 1;\n                return block;\n            } else {\n                if( blockDeep == 1 && this.currentOutput.getClass() == CssMediaOutput.class ) {\n                    CssFormatter block = copy( null );\n                    block.incInsets();\n                    block.currentOutput = this.currentOutput;\n                    ((CssMediaOutput)this.currentOutput).startBlock( selectors, block.output );\n                    block.blockDeep++;\n                    return block;\n                } else {\n                    blockDeep++;\n                    startBlockImpl( selectors );\n                    return this;\n                }\n            }\n        }\n    }", "    public void load() {\n        Level theLevel = Storch.theLevel;\n        int[] tntProbs = theLevel.getTNTProbs();\n        for(int i = 0; i < 5; i++) {\n            GUI.setValue(probs[i], int2type(tntProbs[i]));\n        }\n    }\n", "@Override\n    public void addHeader(String name, String value) {\n\n        if (isSuspended()) {\n            return;\n        }\n\n        if (CmsRequestUtil.HEADER_CONTENT_TYPE.equalsIgnoreCase(name)) {\n            setContentType(value);\n            return;\n        }\n\n        if (m_cachingRequired && !m_includeMode) {\n            addHeaderList(m_bufferHeaders, name, value);\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\n                    Messages.get().getBundle().key(\n                        Messages.LOG_FLEXRESPONSE_ADDING_HEADER_TO_ELEMENT_BUFFER_2,\n                        name,\n                        value));\n            }\n        }\n\n        if (m_writeOnlyToBuffer) {\n            addHeaderList(m_headers, name, value);\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\n                    Messages.get().getBundle().key(Messages.LOG_FLEXRESPONSE_ADDING_HEADER_TO_HEADERS_2, name, value));\n            }\n        } else {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\n                    Messages.get().getBundle().key(\n                        Messages.LOG_FLEXRESPONSE_ADDING_HEADER_TO_PARENT_RESPONSE_2,\n                        name,\n                        value));\n            }\n            m_res.addHeader(name, value);\n        }\n    }", "    public Instruction accept(NodeVisitor iVisitor) {\n        return iVisitor.visitXStrNode(this);\n    }\n", "public int moveControlInput(String strSuffix)\n        throws DBException\n    {\n        int iDefaultParamsFound = DBConstants.NO_PARAMS_FOUND;\n        if (!(this.getScreenField() instanceof BasePanel))\n        {   // Regular input field\n            if (this.getScreenField().isInputField())\n            {\n                String strFieldName = this.getScreenField().getSFieldParam(strSuffix);\n                String strParamValue = this.getSFieldProperty(strFieldName);\n\n                if (strParamValue != null)\n                {\n                    int iErrorCode = this.getScreenField().setSFieldValue(strParamValue, DBConstants.DONT_DISPLAY, DBConstants.SCREEN_MOVE);\n                    if (iErrorCode != DBConstants.NORMAL_RETURN)\n                    {\n                        DatabaseException ex = new DatabaseException(iErrorCode);\n                        String strError = ex.getMessage(this.getScreenField().getParentScreen().getTask());\n                        String strFieldDesc = null;\n                        if (this.getScreenField().getConverter() != null)\n                            strFieldDesc = this.getScreenField().getConverter().getFieldDesc();\n                        if ((strFieldDesc == null) || (strFieldDesc.length() == 0))\n                            strFieldDesc = strFieldName;\n                        if (strError != null) // Add the field name to the error\n                            ex = new DatabaseException(strError + \" on \" + strFieldDesc + \" field\");\n                        throw ex;\n                    }\n                    iDefaultParamsFound = DBConstants.NORMAL_RETURN;\n                }\n            }      \n        }\n        else\n        {   \n            int iNumCols = ((BasePanel)this.getScreenField()).getSFieldCount();\n            String strMoveValue = this.getProperty(DBParams.COMMAND);      // Display record\n            if (strMoveValue == null)\n                strMoveValue = Constants.BLANK;\n            if ((strMoveValue != null) && (strMoveValue.length() > 0))    // Only move params on submit\n            {  // Move the input params to the record fields\n                for (int iIndex = 0; iIndex < iNumCols; iIndex++)\n                {\n                    ScreenFieldView vField = ((BasePanel)this.getScreenField()).getSField(iIndex).getScreenFieldView();\n                    if (vField.moveControlInput(strSuffix) == DBConstants.NORMAL_RETURN)\n                        iDefaultParamsFound = DBConstants.NORMAL_RETURN;\n                }\n            }\n        }\n        return iDefaultParamsFound;\n    }", "private void insert(final char[] revB,final DiffBlock curB) throws UnsupportedEncodingException {\n  String text=copy(revB,curB.getRevBStart(),curB.getRevBEnd());\n  DiffPart action=new DiffPart(DiffAction.INSERT);\n  action.setStart(version.length());\n  codecData.checkBlocksizeS(version.length());\n  action.setText(text);\n  codecData.checkBlocksizeL(text.getBytes(WIKIPEDIA_ENCODING).length);\n  diff.add(action);\n  version.append(text);\n}\n", "\tprivate void streamerLoad(byte[] pSrc, int pSrcPos, int pNumberOfBits) {\n\t\tivStreamerBuffer = pSrc;\n\t\tivStreamerBitPos = pSrcPos << 3;\n\t\tivStreamerBitPosEnd = ivStreamerBitPos + pNumberOfBits;\n\t}\n", "private void substituteProbe() {\n\t\t// create a new probe, update here and the one in the AOCDocument\n\t\tEnvelopeProbe probe1 = EnvelopeProbe.newInstance(matching\n\t\t\t\t.getNewProbe());\n\t\tsetProbe(probe1);\n\t\tmyWindow.getDocument().setNewProbe(probe1);\n\t}", "    public Element getConfigurationNode(String elementName,String attributeName,String attributeValue) {\n        NodeList elementList=m_guiConfiguration.getElementsByTagName(elementName);\n        for (int i=0;i<elementList.getLength();i++) {\n            Element element=(Element)elementList.item(i);\n            if (attributeValue.equals(element.getAttribute(attributeName)))\n                return element;\n        }\n        return null;\n    }\n", "@Override protected void sendData(final OutputStream out) throws IOException {\n  LOG.trace(\"enter sendData(OutputStream out)\");\n  if (lengthOfData() == 0) {\n    LOG.debug(\"No data to send.\");\n    return;\n  }\n  final byte[] tmp=new byte[4096];\n  final InputStream instream=source.createInputStream();\n  try {\n    int len;\n    while ((len=instream.read(tmp)) >= 0) {\n      out.write(tmp,0,len);\n    }\n  }\n  finally {\n    instream.close();\n  }\n}\n", "public final Having complexHaving() throws RecognitionException {\n\t\tHaving having = null;\n\n\n\t\tToken o=null;\n\t\tHaving s =null;\n\t\tHaving a =null;\n\t\tHaving b =null;\n\n\t\ttry {\n\t\t\t// druidG.g:378:2: ( (s= simpleHaving ) | (a= simpleHaving WS o= ( AND | OR ) WS b= complexHaving ) )\n\t\t\tint alt182=2;\n\t\t\talt182 = dfa182.predict(input);\n\t\t\tswitch (alt182) {\n\t\t\t\tcase 1 :\n\t\t\t\t\t// druidG.g:378:4: (s= simpleHaving )\n\t\t\t\t\t{\n\t\t\t\t\t// druidG.g:378:4: (s= simpleHaving )\n\t\t\t\t\t// druidG.g:378:5: s= simpleHaving\n\t\t\t\t\t{\n\t\t\t\t\tpushFollow(FOLLOW_simpleHaving_in_complexHaving2695);\n\t\t\t\t\ts=simpleHaving();\n\t\t\t\t\tstate._fsp--;\n\n\t\t\t\t\t}\n\n\t\t\t\t\thaving = s;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2 :\n\t\t\t\t\t// druidG.g:379:4: (a= simpleHaving WS o= ( AND | OR ) WS b= complexHaving )\n\t\t\t\t\t{\n\t\t\t\t\t// druidG.g:379:4: (a= simpleHaving WS o= ( AND | OR ) WS b= complexHaving )\n\t\t\t\t\t// druidG.g:379:5: a= simpleHaving WS o= ( AND | OR ) WS b= complexHaving\n\t\t\t\t\t{\n\t\t\t\t\tpushFollow(FOLLOW_simpleHaving_in_complexHaving2706);\n\t\t\t\t\ta=simpleHaving();\n\t\t\t\t\tstate._fsp--;\n\n\t\t\t\t\tmatch(input,WS,FOLLOW_WS_in_complexHaving2708); \n\t\t\t\t\to=input.LT(1);\n\t\t\t\t\tif ( input.LA(1)==AND||input.LA(1)==OR ) {\n\t\t\t\t\t\tinput.consume();\n\t\t\t\t\t\tstate.errorRecovery=false;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tMismatchedSetException mse = new MismatchedSetException(null,input);\n\t\t\t\t\t\tthrow mse;\n\t\t\t\t\t}\n\t\t\t\t\tmatch(input,WS,FOLLOW_WS_in_complexHaving2718); \n\t\t\t\t\tpushFollow(FOLLOW_complexHaving_in_complexHaving2722);\n\t\t\t\t\tb=complexHaving();\n\t\t\t\t\tstate._fsp--;\n\n\t\t\t\t\t}\n\n\t\t\t\t\thaving = new Having((o!=null?o.getText():null).toLowerCase()); having.havingSpecs = Arrays.asList(a,b);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\treportError(re);\n\t\t\trecover(input,re);\n\t\t}\n\t\tfinally {\n\t\t\t// do for sure before leaving\n\t\t}\n\t\treturn having;\n\t}", "public FunctionType2 ( ) { super ( TYPE_2 ) ; }", "public TextEditor ( boolean tabsAsSpaces , boolean multiLineTab ) { this ( multiLineTab , tabsAsSpaces , BOOL_ ) ; }", "    private void appendTable(char[] table) {\n        for (int i = 0; i < table.length; i++) {\n            charTable.addElement(new Character(table[i]));\n        }\n    }\n", "  private Form createAllLibrariesForm() {\n    Form form = new Form(\"alllibrariesform\") {\n      private static final long serialVersionUID = 1L;\n      \n      @Override\n      protected void onSubmit() {\n        results.clear();\n        for (ILibrary lib : getUser().getLibraryList()) {\n          try {\n            handleResults(lib);\n          }\n          catch (Exception e) {\n            info(e.getMessage());\n            continue;\n          }\n        }\n        filterDays = 0; // reset the filter\n      }\n    };\n    \n    form.add(new TextField(\"filter\", new PropertyModel(this, \"filterDays\")));\n    return form;\n  }\n", "private void bindEntityId(Class<?> cls,String type,AccessibleObject fieldOrMethod){\n  String fieldName=getFieldName(fieldOrMethod);\n  Class<?> fieldType=getFieldType(fieldOrMethod);\n  fieldsToTypes.put(fieldName,fieldType);\n  idField=fieldOrMethod;\n  idType=fieldType;\n  idFieldName=fieldName;\n  fieldsToValues.put(fieldName,fieldOrMethod);\n  if (idField != null && !fieldOrMethod.equals(idField)) {\n    throw new DuplicateMappingException(type + \" \" + cls.getName()+ \":\"+ fieldName);\n  }\n}\n", "private String randomString(String[] values,Object olength){\n  int length=FunctionHandler.getInt(olength);\n  StringBuilder output=new StringBuilder(length);\n  for (int i=0; i < length; i++) {\n    output.append(values[rnd.nextInt(values.length)]);\n  }\n  return output.toString();\n}\n", "public static int[] copyOf(int[] original,int newLength){\n  int[] copy=new int[newLength];\n  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));\n  return copy;\n}\n", "public CopyLogAction ( final JTextArea area ) { super ( STR_ ) ; m_area = area ; }", "   public void saveJSScript(String scriptName, String text) throws Exception {\n      Script script = jsBuilder.getScript(scriptName);\n      File file = script.getFile();\n\n      saveJSScript(scriptName, text, file);\n   }\n", "public static byte[] encodeSHA(byte[] rgbValue)\n        throws NoSuchAlgorithmException\n    {\n        MessageDigest md = MessageDigest.getInstance(\"SHA\");\n    \n        md.update(rgbValue);\n        rgbValue = md.digest();\n        return rgbValue;\n    }", "public ICodeBase openCodeBase ( ) throws IOException , ResourceNotFoundException ;", "    public boolean mouseDown(MouseEvent event) {\n        boolean                wantsEvents;\n\n        if (contentView != null) {\n            wantsEvents = contentView.mouseDown(\n                                convertEventToView(contentView, event));\n\n            if (wantsEvents) {\n                rootView().setMouseView(contentView);\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n", "public void setPublic(java.lang.String _public) {\n        getStateHelper().put(PropertyKeys.publicVal, _public);\n        handleAttribute(\"public\", _public);\n    }", "public void removeUnlocked ( IObjectInfo < T > oi ) { removeNode ( ( ConcurrentSLObjectInfo ) oi , BOOL_ ) ; }", "static State mapIntToValue ( final int stateInt ) { for ( State value : State . values ( ) ) { if ( stateInt == value . getIntValue ( ) ) { return value ; } } return RESET ; }", "public final void mSTAR() throws RecognitionException {\n\t\ttry {\n\t\t\tint _type = STAR;\n\t\t\tint _channel = DEFAULT_TOKEN_CHANNEL;\n\t\t\t// src/main/resources/org/drools/compiler/lang/DRL6Lexer.g:306:6: ( '*' )\n\t\t\t// src/main/resources/org/drools/compiler/lang/DRL6Lexer.g:306:8: '*'\n\t\t\t{\n\t\t\tmatch('*'); if (state.failed) return;\n\t\t\t}\n\n\t\t\tstate.type = _type;\n\t\t\tstate.channel = _channel;\n\t\t}\n\t\tfinally {\n\t\t\t// do for sure before leaving\n\t\t}\n\t}", "    public String write() {\n        return oStream.toString();\n    }\n", "    public void removeKey(String key) {\n\t\n\tDBConnection con = null;\n\tString value = null;\n    \ttry {\n\t    con = DBServiceManager.allocateConnection();\n\n\t    PreparedStatement ps = con.prepareStatement(\"delete from user_UserHashtable where userid = ? and attribute = ?\");\n\t    ps.setString(1, userId);\n\t    ps.setString(2, key);\n\n\t    ps.executeUpdate();\n\n\t}catch(SQLException e){\n\t    throw new HamboFatalException(MSG_SQL_FAILED, e);\n\t} finally {\n\t    if (con != null) {\n\t\ttry {\n\t\t    con.reset();\n\t\t} catch (SQLException e) {}  \n\t\t\n\t\tcon.release();\n\t    }\n\t}             \n    }\n", "public SocketReader ( final Socket socket ) throws IOException { Preconditions . checkNotNull ( socket , STR_ ) ; m_InputStream = new BufferedInputStream ( socket . getInputStream ( ) ) ; }", "public static BinaryFieldAccessor create(Field field,int id){\n  BinaryWriteMode mode=BinaryUtils.mode(field.getType());\nswitch (mode) {\ncase P_BYTE:\n    return new BytePrimitiveAccessor(field,id);\ncase P_BOOLEAN:\n  return new BooleanPrimitiveAccessor(field,id);\ncase P_SHORT:\nreturn new ShortPrimitiveAccessor(field,id);\ncase P_CHAR:\nreturn new CharPrimitiveAccessor(field,id);\ncase P_INT:\nreturn new IntPrimitiveAccessor(field,id);\ncase P_LONG:\nreturn new LongPrimitiveAccessor(field,id);\ncase P_FLOAT:\nreturn new FloatPrimitiveAccessor(field,id);\ncase P_DOUBLE:\nreturn new DoublePrimitiveAccessor(field,id);\ncase BYTE:\ncase BOOLEAN:\ncase SHORT:\ncase CHAR:\ncase INT:\ncase LONG:\ncase FLOAT:\ncase DOUBLE:\ncase DECIMAL:\ncase STRING:\ncase UUID:\ncase DATE:\ncase TIMESTAMP:\ncase BYTE_ARR:\ncase SHORT_ARR:\ncase INT_ARR:\ncase LONG_ARR:\ncase FLOAT_ARR:\ncase DOUBLE_ARR:\ncase CHAR_ARR:\ncase BOOLEAN_ARR:\ncase DECIMAL_ARR:\ncase STRING_ARR:\ncase UUID_ARR:\ncase DATE_ARR:\ncase TIMESTAMP_ARR:\ncase ENUM_ARR:\ncase OBJECT_ARR:\ncase BINARY_OBJ:\ncase BINARY:\nreturn new DefaultFinalClassAccessor(field,id,mode,false);\ndefault :\nreturn new DefaultFinalClassAccessor(field,id,mode,!U.isFinal(field.getType()));\n}\n}\n", "public void addMessageListener ( Listener < Message > listener ) { mMessageListeners . add ( listener ) ; }", "public String nextToken(){\n  String result=null;\nsynchronized (this) {\n    if (isEmpty()) {\n      return null;\n    }\n else {\n      if (isEatingBlocksOfDelimiters) {\n        trimStartingDelimiters();\n      }\n      int nearestDelimeter=-1;\n      for (int i=0; i < delimiters.length(); i++) {\n        int delimiter=source.indexOf(delimiters.charAt(i),currentIndex);\n        if (nearestDelimeter == -1 || delimiter != -1 && delimiter < nearestDelimeter) {\n          nearestDelimeter=delimiter;\n        }\n      }\n      if (nearestDelimeter == -1) {\n        result=source.substring(currentIndex);\n        currentIndex=source.length();\n      }\n else {\n        result=source.substring(currentIndex,nearestDelimeter);\n        currentIndex=nearestDelimeter + 1;\n        if (isEatingBlocksOfDelimiters) {\n          trimStartingDelimiters();\n        }\n      }\n    }\n  }\n  return result;\n}\n", "public void initialise ( int dimensions , int base ) throws Exception ;", "public void add(Permission permission){\n  perms.put(permission,permission);\n}\n", "public ScriptThread ( final ScriptEngine engine , final File selectedFile , final List < Pair < String , Object > > bindings ) { m_engine = engine ; m_selectedFile = selectedFile ; m_pairList = bindings ; }", "\tstatic public long toLong(Object object) throws   com.sun.star.lang.IllegalArgumentException{\n\t\tLong ret= (Long) convertSimple( TypeClass.HYPER, null, object);\n\t\treturn ret.longValue();\n\t}\n", "\tpublic Call isBeingCalled(UserAccount u) {\n\t\tsynchronized (_calls) {\n\t\t\tfor (int i = 0; i < _calls.size(); i++) {\n\t\t\t\tif (_calls.get(i).getCallee().equals( u )) {\n\t\t\t\t\treturn _calls.get(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t\treturn null;\n\t}\n", "public CatchUpSubscriptionSettings build ( ) { if ( maxLiveQueueSize == null ) { maxLiveQueueSize = NUM_ ; } else { checkArgument ( isPositive ( maxLiveQueueSize ) , STR_ ) ; } if ( resolveLinkTos == null ) { resolveLinkTos = BOOL_ ; } if ( readBatchSize ", "protected boolean equalsAndSameParent(IJavaElement e1, IJavaElement e2) {\n\tIJavaElement parent1;\n\treturn e1.equals(e2) && ((parent1 = e1.getParent()) != null) && parent1.equals(e2.getParent());\n}\n", "public final double blackForwardVol ( final Date date1 , final Date date2 , final double strike , final boolean extrapolate ) { QL . require ( date1 . le ( date2 ) , STR_ ) ; final double time1 = timeFromReference ( date1 ) ; final double time2 = timeFrom", "\tprivate void checkKey() {\n\t\tif (keyText.getText().length() > 0) {\n\t\t\tif (!getSelectedAlphabet().contains(keyText.getText().toCharArray()[0])) {\n\t\t\t\tresetFlag = true;\n\t\t\t\tkeyText.setText(\"\");\n\t\t\t\tresetFlag = false;\n\t\t\t\tsetPageComplete(false);\n\t\t\t\tsetErrorMessage(messages.getString(\"Label.KeyNotPartOfAlphabet\"));\n\t\t\t}\n\t\t}\t\t\n\t}\n", "  public EntityInterface constructIndividual() throws BuildException {\n  \treturn indiv_prototype.newInstance(indiv_params,this);\n  }\n", "@Override public void startElement(String uri,String localName,String name,Attributes attributes){\n  fixWhiteSpace();\n  final String ariaLabel=attributes.getValue(\"aria-label\");\n  final String alt=attributes.getValue(\"alt\");\n  final String title=attributes.getValue(\"title\");\n  if (ariaLabel != null) {\n    mOutputBuilder.append(ariaLabel);\n  }\n else   if (alt != null) {\n    mOutputBuilder.append(alt);\n  }\n else   if (title != null) {\n    mOutputBuilder.append(title);\n  }\n  final String role=attributes.getValue(\"role\");\n  final String roleName=mAriaRoleToDesc.get(role);\n  final String type=attributes.getValue(\"type\");\n  final String tagInfo=mTagToDesc.get(name.toLowerCase());\n  if (roleName != null) {\n    mPostorderTextStack.push(roleName);\n  }\n else   if (name.equalsIgnoreCase(\"input\") && (type != null)) {\n    final String typeInfo=mInputTypeToDesc.get(type.toLowerCase());\n    if (typeInfo != null) {\n      mPostorderTextStack.push(typeInfo);\n    }\n else {\n      mPostorderTextStack.push(\"\");\n    }\n  }\n else   if (tagInfo != null) {\n    mPostorderTextStack.push(tagInfo);\n  }\n else {\n    mPostorderTextStack.push(\"\");\n  }\n  final String value=attributes.getValue(\"value\");\n  if (value != null) {\n    String elementType=name;\n    if (name.equalsIgnoreCase(\"input\") && (type != null)) {\n      elementType=type;\n    }\n    if (!elementType.equalsIgnoreCase(\"checkbox\") && !elementType.equalsIgnoreCase(\"radio\")) {\n      fixWhiteSpace();\n      mOutputBuilder.append(value);\n    }\n  }\n}\n", "public double canUse(GadgetType gadget){\n  Object count=gadgetCooldowns.get(gadget);\n  if (count == null || System.currentTimeMillis() > (long)count) {\n    return -1;\n  }\n  double valueMillis=(long)count - System.currentTimeMillis();\n  return valueMillis / 1000d;\n}\n", "public static Long toLong ( CharSequence self ) { return Long . valueOf ( self . toString ( ) . trim ( ) ) ; }", "public Observable<ComponentPurgeResponseInner> purgeAsync(String resourceGroupName, String resourceName, ComponentPurgeBody body) {\n        return purgeWithServiceResponseAsync(resourceGroupName, resourceName, body).map(new Func1<ServiceResponse<ComponentPurgeResponseInner>, ComponentPurgeResponseInner>() {\n            @Override\n            public ComponentPurgeResponseInner call(ServiceResponse<ComponentPurgeResponseInner> response) {\n                return response.body();\n            }\n        });\n    }", "public static boolean isDataUri(final String url){\n  return url.startsWith(DATA_URI_PREFIX);\n}\n", "public boolean isRefreshing ( ) ;", "public org.dom4j.Namespace createNamespace(Namespace ns){\n  return factory.createNamespace(ns.getPrefix(),ns.getNamespaceURI());\n}", "public static int indexAny(String target, String... indexWith) {\n\t\treturn indexAny(target, 0, Arrays.asList(indexWith));\n\t}", "private String [ ] split ( String string , String delim ) { ArrayList < String > result = new ArrayList < String > ( ) ; StringTokenizer stringTokenizer = new StringTokenizer ( string , delim ) ; while ( stringTokenizer . hasMoreTokens ( ) ) { result . ad", "protected JSONObject invokeServiceProcess(String name, Object request, String requestId,\n            Map<String,Object> parameters, Map<String,String> headers) throws ServiceException {\n        JSONObject responseJson;\n        Map<String,String> responseHeaders = new HashMap<>();\n        Object responseObject = ServiceLocator.getWorkflowServices().invokeServiceProcess(name,\n                request, requestId, parameters, headers, responseHeaders);\n        if (responseObject instanceof JSONObject)\n            responseJson = (JSONObject) responseObject;\n        else if (responseObject instanceof Jsonable)\n            responseJson = ((Jsonable) responseObject).getJson();\n        else\n            throw new ServiceException(HTTP_500_INTERNAL_ERROR,\n                    \"Unsupported response type: \" + (responseObject == null ? null : responseObject.getClass()));\n        for (String key : responseHeaders.keySet())\n            headers.put(key, responseHeaders.get(key));\n        return responseJson;\n    }", "void seek(int position) throws IOException {\n  mDexFile.seek(position);\n}\n", "private void wakeIn(){\n  StateInPipe stateOld;\n  StateInPipe stateNew;\n  do {\n    stateOld=_stateInRef.get();\n    if (stateOld.isActive()) {\n      return;\n    }\n    stateNew=stateOld.toWake();\n  }\n while (!_stateInRef.compareAndSet(stateOld,stateNew));\n  if (stateOld == StateInPipe.IDLE) {\n    try (OutboxAmp outbox=OutboxAmp.currentOrCreate(_services)){\n      Objects.requireNonNull(outbox);\n      PipeWakeInMessage<T> msg=new PipeWakeInMessage<>(outbox,_inRef,this);\n      outbox.offer(msg);\n    }\n   }\n}\n", "public static String hashPassword(String password){\n  byte[] randomBytes=new byte[6];\n  rand.setSeed(System.currentTimeMillis());\n  rand.nextBytes(randomBytes);\n  return myCrypt(password,genSalt(randomBytes));\n}\n", "public static nspbr_stats[] get(nitro_service service) throws Exception{\n\t\tnspbr_stats obj = new nspbr_stats();\n\t\tnspbr_stats[] response = (nspbr_stats[])obj.stat_resources(service);\n\t\treturn response;\n\t}", "public void writeElementList ( String tagName , Collection < String > listValues ) { for ( String listValue : listValues ) { openTag ( tagName ) ; writeText ( listValue ) ; closeTag ( tagName ) ; } }", "@Override\n    public ResourceSet<AuthCallsCredentialListMapping> read(final TwilioRestClient client) {\n        return new ResourceSet<>(this, client, firstPage(client));\n    }", "    private String getTableAttrRefOnly(final int row) {\n        final String returnString = getValueTable(row) + \".\" + getValueAttribute(row);\n\n        // remove \" as xyz\"\n        int idx = returnString.toUpperCase().indexOf(\" AS \");\n\n        if (idx == -", "public String remove ( String key ) { String value = get ( key ) ; properties . remove ( key ) ; return value ; }", "public void draw(Drawable drawable,Paint_Delegate paint,boolean compositeOnly,boolean forceSrcMode){\n  if (mLayers.size() == 1) {\n    drawInLayer(mLayers.get(0),drawable,paint,compositeOnly,forceSrcMode);\n  }\n else {\n    int flags;\n    int i=mLayers.size() - 1;\n    do {\n      Layer layer=mLayers.get(i);\n      drawInLayer(layer,drawable,paint,compositeOnly,forceSrcMode);\n      i--;\n      flags=layer.getFlags();\n    }\n while (i >= 0 && (flags & Canvas.CLIP_TO_LAYER_SAVE_FLAG) == 0);\n  }\n}\n", "public final TransferConfig updateTransferConfig(\n      TransferConfig transferConfig, FieldMask updateMask) {\n\n    UpdateTransferConfigRequest request =\n        UpdateTransferConfigRequest.newBuilder()\n            .setTransferConfig(transferConfig)\n            .setUpdateMask(updateMask)\n            .build();\n    return updateTransferConfig(request);\n  }", "private void addTMP9(final Tree tree) {\r\n    // do the head chain under it\r\n    Tree ht = headFinder.determineHead(tree);\r\n    // special fix for possessives! -- make noun before head\r\n    if (ht.value().equals(\"POS\")) {\r\n      int j = tree.indexOf(ht);\r\n      if (j > 0) {\r\n        ht = tree.getChild(j - 1);\r\n      }\r\n    }\r\n    // Note: this next bit changes the tree label, rather\r\n    // than creating a new tree node.  Beware!\r\n    if (ht.isPreTerminal() || ht.value().startsWith(\"NP\") ||\r\n        ht.value().startsWith(\"PP\") || ht.value().startsWith(\"ADVP\")) {\r\n      if (!TmpPattern.matcher(ht.value()).matches()) {\r\n        LabelFactory lf = ht.labelFactory();\r\n        // System.err.println(\"TMP: Changing \" + ht.value() + \" to \" +\r\n        //                   ht.value() + \"-TMP\");\r\n        ht.setLabel(lf.newLabel(ht.value() + \"-TMP\"));\r\n      }\r\n      if (ht.value().startsWith(\"NP\") || ht.value().startsWith(\"PP\") ||\r\n          ht.value().startsWith(\"ADVP\")) {\r\n        addTMP9(ht);\r\n      }\r\n    }\r\n    // do the NPs under it (which may or may not be the head chain\r\n    Tree[] kidlets = tree.children();\r\n    for (int k = 0; k < kidlets.length; k++) {\r\n      ht = kidlets[k];\r\n      LabelFactory lf;\r\n      if (tree.isPrePreTerminal() && !TmpPattern.matcher(ht.value()).matches()) {\r\n        // System.err.println(\"TMP: Changing \" + ht.value() + \" to \" +\r\n        //                   ht.value() + \"-TMP\");\r\n        lf = ht.labelFactory();\r\n        // Note: this next bit changes the tree label, rather\r\n        // than creating a new tree node.  Beware!\r\n        ht.setLabel(lf.newLabel(ht.value() + \"-TMP\"));\r\n      } else if (ht.value().startsWith(\"NP\")) {\r\n        // don't add -TMP twice!\r\n        if (!TmpPattern.matcher(ht.value()).matches()) {\r\n          lf = ht.labelFactory();\r\n          // System.err.println(\"TMP: Changing \" + ht.value() + \" to \" +\r\n          //                   ht.value() + \"-TMP\");\r\n          // Note: this next bit changes the tree label, rather\r\n          // than creating a new tree node.  Beware!\r\n          ht.setLabel(lf.newLabel(ht.value() + \"-TMP\"));\r\n        }\r\n        addTMP9(ht);\r\n      }\r\n    }\r\n  }", "Item newNameTypeItem ( final String name , final String desc ) { key2 . set ( NAME_TYPE , name , desc , null ) ; Item result = get ( key2 ) ; if ( result == null ) { put122 ( NAME_TYPE , newUTF8 ( name ) , newUTF8 ( desc ) ) ; result = new Item ( index ++ , key2 ) ; put ( result ) ; } return result ; }", "public void setVerifyContainNames(String names) {\n                if (!GitTaskUtils.isNullOrBlankString(names)) {\n                        namesToCheck.addAll(Arrays.asList(names.split(\",\")));\n                }\n                else {\n                        throw new BuildException(\"Invalid references names.\");\n                }\n        }", "@SuppressWarnings(\"unchecked\")\n\tprotected void calculateIndirectAmbiguities() {\n\t\tMap<NucleotideCompound, List<NucleotideCompound>> equivalentsMap = new HashMap<NucleotideCompound, List<NucleotideCompound>>();\n\n\t\tList<NucleotideCompound> ambiguousCompounds = new ArrayList<NucleotideCompound>();\n\t\tfor(NucleotideCompound compound: getAllCompounds()) {\n\t\t\tif (!compound.isAmbiguous()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tambiguousCompounds.add(compound);\n\t\t}\n\n\t\tfor(NucleotideCompound sourceCompound: ambiguousCompounds) {\n\t\t\tSet<NucleotideCompound> compoundConstituents = sourceCompound.getConstituents();\n\t\t\tfor(NucleotideCompound targetCompound: ambiguousCompounds) {\n\t\t\t\tSet<NucleotideCompound> targetConstituents = targetCompound.getConstituents();\n\t\t\t\tif(targetConstituents.containsAll(compoundConstituents)) {\n\t\t\t\t\tNucleotideCompound lcSourceCompound = toLowerCase(sourceCompound);\n\t\t\t\t\tNucleotideCompound lcTargetCompound = toLowerCase(targetCompound);\n\n\t\t\t\t//equivalentsMap.put(sourceCompound, targetCompound);\n\t\t\t//      equivalentsMap.put(sourceCompound, lcTargetCompound);\n\n\n\t\t\t\t\tcheckAdd(equivalentsMap, sourceCompound, targetCompound);\n\t\t\t\t\tcheckAdd(equivalentsMap, sourceCompound, lcTargetCompound);\n\n\t\t\t\t\tcheckAdd(equivalentsMap,targetCompound,sourceCompound);\n\t\t\t\t\tcheckAdd(equivalentsMap, lcTargetCompound, sourceCompound);\n\n\t\t\t\t\tcheckAdd(equivalentsMap, lcSourceCompound, targetCompound);\n\t\t\t\t\tcheckAdd(equivalentsMap, lcSourceCompound, lcTargetCompound);\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//And once it's all done start adding them to the equivalents map\n\n\t\tfor ( NucleotideCompound key: equivalentsMap.keySet()){\n\t\t\tList<NucleotideCompound> vals = equivalentsMap.get(key);\n\t\t\tfor (NucleotideCompound value: vals){\n\t\t\t\taddEquivalent((C)key,(C)value);\n\t\t\t\taddEquivalent((C)value,(C)key);\n\t\t\t}\n\t\t}\n\t}", "public boolean isPreDestroyCalled ( ) { return this . preDestroyCalled ; }", "void changedName ( Trace trace , String name ) ;", "static String typeString ( Class type ) { if ( type == null ) { return STR_ ; } else if ( ! type . isArray ( ) ) { return type . getName ( ) ; } else { StringBuffer sb = new StringBuffer ( ) ; Class c ; int dimensions = NUM_ ; for ( c = type ; c . isArray", "public List<MediaSearchResult> searchMovie(String searchTerm,Movie movie,MediaScraper metadataScraper){\n  return searchMovie(searchTerm,movie,metadataScraper,movieSettings.getScraperLanguage());\n}\n", "public static void unescapeJava(Writer out, String str) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (str == null) {\n            return;\n        }\n        int sz = str.length();\n        StringBuilder unicode = new StringBuilder(4);\n        boolean hadSlash = false;\n        boolean inUnicode = false;\n        for (int i = 0; i < sz; i++) {\n            char ch = str.charAt(i);\n            if (inUnicode) {\n                // if in unicode, then we're reading unicode\n                // values in somehow\n                unicode.append(ch);\n                if (unicode.length() == 4) {\n                    // unicode now contains the four hex digits\n                    // which represents our unicode character\n                    try {\n                        int value = Integer.parseInt(unicode.toString(), 16);\n                        out.write((char) value);\n                        unicode.setLength(0);\n                        inUnicode = false;\n                        hadSlash = false;\n                    } catch (NumberFormatException nfe) {\n                        throw new RuntimeException(\"Unable to parse unicode value: \" + unicode, nfe);\n                    }\n                }\n                continue;\n            }\n            if (hadSlash) {\n                // handle an escaped value\n                hadSlash = false;\n                switch (ch) {\n                    case '\\\\':\n                        out.write('\\\\');\n                        break;\n                    case '\\'':\n                        out.write('\\'');\n                        break;\n                    case '\\\"':\n                        out.write('\"');\n                        break;\n                    case 'r':\n                        out.write('\\r');\n                        break;\n                    case 'f':\n                        out.write('\\f');\n                        break;\n                    case 't':\n                        out.write('\\t');\n                        break;\n                    case 'n':\n                        out.write('\\n');\n                        break;\n                    case 'b':\n                        out.write('\\b');\n                        break;\n                    case 'u':\n                        {\n                            // uh-oh, we're in unicode country....\n                            inUnicode = true;\n                            break;\n                        }\n                    default :\n                        out.write(ch);\n                        break;\n                }\n                continue;\n            } else if (ch == '\\\\') {\n                hadSlash = true;\n                continue;\n            }\n            out.write(ch);\n        }\n        if (hadSlash) {\n            // then we're in the weird case of a \\ at the end of the\n            // string, let's output it anyway.\n            out.write('\\\\');\n        }\n    }", "    public Object getSelectedFolder() {\n        if(listbox.getSelected() != ListBox.NO_SELECTION) {\n            return model.getFolder(listbox.getSelected());\n        }\n        return null;\n    }\n", "    public void buildMethodsSummary(XMLNode node, Content memberSummaryTree) {\n        MemberSummaryWriter writer =\n                memberSummaryWriters[VisibleMemberMap.METHODS];\n        VisibleMemberMap visibleMemberMap =\n                visibleMemberMaps[VisibleMemberMap.METHODS];\n        addSummary(writer, visibleMemberMap, true, memberSummaryTree);\n    }\n", "        private boolean characterIsLegal(char c) {\n            switch(c) {\n            case ' ' : return (mFlags & SPACE_OK) != 0;\n            case '\\t': case '\\f': case '\\n': case '\\r': case 11: /* VT */\n              return (mFlags & OTHER_WHITESPACE_OK) != 0;\n            case '\\\"': return (mFlags & DQUOTE_OK) != 0;\n            case '\\'': return (mFlags & SQUOTE_OK) != 0;\n            case '<' : return (mFlags & LT_OK) != 0;\n            case '>' : return (mFlags & GT_OK) != 0;\n            case '&' : return (mFlags & AMP_OK) != 0;\n            case '%' : return (mFlags & PCT_OK) != 0;\n            case '\\0': return (mFlags & NUL_OK) != 0;\n            default  : return (c >= 32 && c < 127) ||\n                ((c >= 128) && ((mFlags & NON_7_BIT_ASCII_OK) != 0));\n            }\n        }\n", "public static String getStyleUri(CmsJspActionElement jsp) {\n\n        if (m_styleUri == null) {\n\n            CmsProject project = jsp.getCmsObject().getRequestContext().getCurrentProject();\n            try {\n                jsp.getCmsObject().getRequestContext().setCurrentProject(\n                    jsp.getCmsObject().readProject(CmsProject.ONLINE_PROJECT_ID));\n                m_styleUri = jsp.link(\"/system/workplace/commons/style/\");\n            } catch (CmsException e) {\n                LOG.error(e.getLocalizedMessage());\n            } finally {\n                jsp.getCmsObject().getRequestContext().setCurrentProject(project);\n            }\n        }\n        return m_styleUri;\n    }", "byte[] unzip(final byte[] data) throws IOException {\n  final InputStream input=new ByteArrayInputStream(data);\n  final byte[] buffer=new byte[1024];\n  final ZipInputStream zip=new ZipInputStream(input);\n  final ByteArrayOutputStream out=new ByteArrayOutpu", "private MutableBigInteger divideLongMagnitude(long ldivisor,MutableBigInteger quotient){\n  MutableBigInteger rem=new MutableBigInteger(new int[intLen + 1]);\n  System.arraycopy(value,offset,rem.value,1,intLen);\n  rem.intLen=intLen;\n  rem.offset=1;\n  int nlen=rem.intLen;\n  int limit=nlen - 2 + 1;\n  if (quotient.value.length < limit) {\n    quotient.value=new int[limit];\n    quotient.offset=0;\n  }\n  quotient.intLen=limit;\n  int[] q=quotient.value;\n  int shift=Long.numberOfLeadingZeros(ldivisor);\n  if (shift > 0) {\n    ldivisor<<=shift;\n    rem.leftShift(shift);\n  }\n  if (rem.intLen == nlen) {\n    rem.offset=0;\n    rem.value[0]=0;\n    rem.intLen++;\n  }\n  int dh=(int)(ldivisor >>> 32);\n  long dhLong=dh & LONG_MASK;\n  int dl=(int)(ldivisor & LONG_MASK);\n  for (int j=0; j < limit; j++) {\n    int qhat=0;\n    int qrem=0;\n    boolean skipCorrection=false;\n    int nh=rem.value[j + rem.offset];\n    int nh2=nh + 0x80000000;\n    int nm=rem.value[j + 1 + rem.offset];\n    if (nh == dh) {\n      qhat=~0;\n      qrem=nh + nm;\n      skipCorrection=qrem + 0x80000000 < nh2;\n    }\n else {\n      long nChunk=(((long)nh) << 32) | (nm & LONG_MASK);\n      if (nChunk >= 0) {\n        qhat=(int)(nChunk / dhLong);\n        qrem=(int)(nChunk - (qhat * dhLong));\n      }\n else {\n        long tmp=divWord(nChunk,dh);\n        qhat=(int)(tmp & LONG_MASK);\n        qrem=(int)(tmp >>> 32);\n      }\n    }\n    if (qhat == 0)     continue;\n    if (!skipCorrection) {\n      long nl=rem.value[j + 2 + rem.offset] & LONG_MASK;\n      long rs=((qrem & LONG_MASK) << 32) | nl;\n      long estProduct=(dl & LONG_MASK) * (qhat & LONG_MASK);\n      if (unsignedLongCompare(estProduct,rs)) {\n        qhat--;\n        qrem=(int)((qrem & LONG_MASK) + dhLong);\n        if ((qrem & LONG_MASK) >= dhLong) {\n          estProduct-=(dl & LONG_MASK);\n          rs=((qrem & LONG_MASK) << 32) | nl;\n          if (unsignedLongCompare(estProduct,rs))           qhat--;\n        }\n      }\n    }\n    rem.value[j + rem.offset]=0;\n    int borrow=mulsubLong(rem.value,dh,dl,qhat,j + rem.offset);\n    if (borrow + 0x80000000 > nh2) {\n      divaddLong(dh,dl,rem.value,j + 1 + rem.offset);\n      qhat--;\n    }\n    q[j]=qhat;\n  }\n  if (shift > 0)   rem.rightShift(shift);\n  quotient.normalize();\n  rem.normalize();\n  return rem;\n}\n", "public boolean validateIp(final String ip){\n  matcher=pattern.matcher(ip);\n  return matcher.matches();\n}\n", "protected static String negify(String pattern) {\n        if (pattern.contains(\";\")) return pattern;\n        else {\n            if (pattern.contains(\"-\"))\n                throw new IllegalStateException(\"Positive pattern contains negative sign\");\n            // the regex matches everything until the first non-quoted number character\n            return pattern + \";\" + pattern.replaceFirst(\"^([^#0,.']*('[^']*')?)*\", \"$0-\");\n        }\n    }", "void unregisterWorkerMax(String name) {\n        synchronized (workers) {\n            Integer val = workers.remove(name);\n            if (val != null) {\n                total -= val;\n            }\n        }\n    }", "public Object invokeMethod ( Class sender , Object object , String methodName , Object [ ] originalArguments , boolean isCallToSuper , boolean fromInsideClass ) { if ( invokeMethodMethod != null ) { MetaClassHelper . unwrap ( originalArguments ) ; return ", "@Override\n    public void log(StopWatch sw)\n    {\n        if( !m_queue.offer( sw.freeze() ) ) m_rejectedStopWatches.getAndIncrement();\n\n        if( m_collectorThread == null )\n        {\n            synchronized(this)\n            {\n                //\n                //  Ensure that there is no race condition starting the thread.\n                //  Note that under the JVM5 memory model this also requires\n                //  that the field is declared as \"volatile\", or else the compiler\n                //  may do something nasty.\n                //\n                if( m_collectorThread == null )\n                {\n                    m_collectorThread = new CollectorThread();\n                    m_collectorThread.setName( \"Speed4J PeriodicalLog Collector Thread\" );\n                    m_collectorThread.setDaemon( true );\n                    m_collectorThread.start();\n                }\n            }\n\n        }\n    }", "protected void appendCopiesAfter(PointableRoaringArray highLowContainer, short beforeStart) {\n\n    int startLocation = highLowContainer.getIndex(beforeStart);\n    if (startLocation >= 0) {\n      startLocation++;\n    } else {\n      startLocation = -startLocation - 1;\n    }\n    extendArray(highLowContainer.size() - startLocation);\n\n    for (int i = startLocation; i < highLowContainer.size(); ++i) {\n      this.keys[this.size] = highLowContainer.getKeyAtIndex(i);\n      this.values[this.size] = highLowContainer.getContainerAtIndex(i).clone();\n      this.size++;\n    }\n  }", "public void write ( ) { try { File prefFile = new File ( SystemProperties . getProperty ( STR_ ) , PREF_FILE_NAME ) ; write ( new FileOutputStream ( prefFile ) ) ; } catch ( IOException e ) { if ( FindBugs . DEBUG ) { e . printStackTrace ( ) ; } } }", "public boolean hasEnoughSpaceOnSdCard(long updateSize){\n  RootTools.log(\"Checking SDcard size and that it is mounted as RW\");\n  String status=Environment.getExternalStorageState();\n  if (!status.equals(Environment.MEDIA_MOUNTED)) {\n    return false;\n  }\n ", "    public BackwardBitStringIterator backwardsIterator(int i) {\n        return new BackwardBitStringIterator(i);\n    }\n", "public static String quoteIdentifier(String identifier, boolean isH2DataBase) {\n        if((isH2DataBase && (Constants.H2_RESERVED_WORDS.contains(identifier.toUpperCase())\n                        || !H2_SPECIAL_NAME_PATTERN.matcher(identifier).find())) ||\n                (!isH2DataBase && (Constants.POSTGIS_RESERVED_WORDS.contains(identifier.toUpperCase())\n                        || !POSTGRE_SPECIAL_NAME_PATTERN.matcher(identifier).find()))) {\n            return quoteIdentifier(identifier);\n        } else {\n            return identifier;\n        }\n    }", "public int showOpenDialog(Component parent) throws HeadlessException {\n  setDialogType(OPEN_DIALOG);\n  return showDialog(parent,null);\n}\n", "public boolean isValid(String value) {\n    if (value == null) {\n      return false;\n    }\n    for (int i = 0; i < patterns.length; i++) {\n      if (patterns[i].matcher(value).matches()) {\n        return true;\n      }\n    }\n    return false;\n  }", "    protected void assertEquals(String message, InputStream i1, InputStream i2) {\n        try {\n            int b1 = 0, b2 = 0;\n            int i = 0;\n            while (b1 != -1 || b2 != -1) {\n                b1 = i1.read();\n                b2 = i2.read();\n                assertEquals(message + \"; byte #\" + i + \" mismatch!\", b2, b1);\n                ++i;\n            }\n        } catch (Exception e) {\n            fail(\"Could not read inputstream! \" + e);\n        }\n    }\n", "public static String sortIgnoreEmpty(String list, String sortType, String sortOrder, String delimiter) throws PageException {\n\treturn _sort(toStringArray(listToArrayRemoveEmpty(list, delimiter)), sortType, sortOrder, delimiter);\n    }", "    public double getCacheEfficiency() {\n\n        int cache_total = cache_misses + cache_hits;\n\n        if ( cache_total == 0 )\n            return 0;\n\n        return ((double)cache_hits / (double)cache_total) * (double)100;\n\n    }\n", "private RMIServer findRMIServerJNDI(String jndiURL,Map<String,?> env,boolean isIiop) throws NamingException {\n  InitialContext ctx=new InitialContext(EnvHelp.mapToHashtable(env));\n  Object objref=ctx.lookup(jndiURL);\n  ctx.close();\n  if (isIiop)   return narrowIIOPServer(objref);\n else   return narrowJRMPServer(objref);\n}\n", "private static void validateAsyncLog() throws IOException {\n  List<String> logFileLines=FileUtils.readLines(new File(AsyncDBTestUtil.getAsyncLogFilePath()),StandardCharsets.UTF_8);\n  int expectedLineCount=3;\n  if (expectedLineCount != logFileLines.size()) {\n    throw new IntegrationTestFailedException(\"Async-log file should have \" + expectedLineCount + \"' lines, but has \"+ logFileLines.size()+ \" lines.\");\n  }\n  int lineIndex=0;\n  for (  String logFileLine : logFileLines) {\n    String[] fields=logFileLine.split(\"\" + AsyncLogWriter.FIELD_SEPARATOR);\n    if (fields.length != AsyncDBTestUtil.LOG_FILE_FIELDS) {\n      throw new IntegrationTestFailedException(\"Log file nr \" + lineIndex + \" has \"+ fields.length+ \" fields, but must have \"+ AsyncDBTestUtil.LOG_FILE_FIELDS);\n    }\n    lineIndex++;\n  }\n}\n", "protected Rectangle2D createAlignBounds(){\n  float[] info=getCharinfo();\n  float al=0f;\n  float at=-cm.ascent;\n  float aw=0f;\n  float ah=cm.ascent + cm.descent;\n  if (charinfo == null || charinfo.length == 0) {\n    return new Rectangle2D.Float(al,at,aw,ah);\n  }\n  boolean lineIsLTR=(source.getLayoutFlags() & 0x8) == 0;\n  int rn=info.length - numvals;\n  if (lineIsLTR) {\n    while (rn > 0 && info[rn + visw] == 0) {\n      rn-=numvals;\n    }\n  }\n  if (rn >= 0) {\n    int ln=0;\n    while (ln < rn && ((info[ln + advx] == 0) || (!lineIsLTR && info[ln + visw] == 0))) {\n      ln+=numvals;\n    }\n    al=Math.max(0f,info[ln + posx]);\n    aw=info[rn + posx] + info[rn + advx] - al;\n  }\n  return new Rectangle2D.Float(al,at,aw,ah);\n}\n", "@NonNull static String toHexString(@Nullable final byte[] src){\n  if (src == null) {\n    return \"null\";\n  }\n  final StringBuilder buffer=new StringBuilder();\n  buffer.append(\"[\");\n  boolean needComma=false;\n  for (  final byte srcByte : src) {\n    if (needComma) {\n      buffer.append(\", \");\n    }\n    buffer.append(String.format(\"%02x\",srcByte & 0xff));\n    needComma=true;\n  }\n  buffer.append(\"]\");\n  return buffer.toString();\n}\n", "public ArrayList<OvhContactAllTypesEnum> serviceName_rules_emailsObfuscation_GET(String serviceName) throws IOException {\n\t\tString qPath = \"/domain/{serviceName}/rules/emailsObfuscation\";\n\t\tStringBuilder sb = path(qPath, serviceName);\n\t\tString resp = exec(qPath, \"GET\", sb.toString(), null);\n\t\treturn convertTo(resp, t6);\n\t}", "protected void createRenderers(CombinedChart chart,ChartAnimator animator,ViewPortHandler viewPortHandler){\n  mRenderers=new ArrayList<DataRenderer>();\n  DrawOrder[] orders=chart.getDrawOrder();\n  for (  DrawOrder order : orders) {\nswitch (order) {\ncase BAR:\n      if (chart.getBarData() != null)       mRenderers.add(new BarChartRenderer(chart,animator,viewPortHandler));\n    break;\ncase LINE:\n  if (chart.getLineData() != null)   mRenderers.add(new LineChartRenderer(chart,animator,viewPortHandler));\nbreak;\ncase CANDLE:\nif (chart.getCandleData() != null) mRenderers.add(new CandleStickChartRenderer(chart,animator,viewPortHandler));\nbreak;\ncase SCATTER:\nif (chart.getScatterData() != null) mRenderers.add(new ScatterChartRenderer(chart,animator,viewPortHandler));\nbreak;\n}\n}\n}\n", "  protected int getOverrideSelection() {\n    return override.getSelection()\n           ? (overrideText.getSelection()\n              ? CopyrightSettings.OVERRIDE_TEXT\n              : CopyrightSettings.OVERRIDE_ALL)\n           : CopyrightSettings.OVERRIDE_NONE;\n  }\n", "private String toHex(int i){\n  String result;\n  result=Integer.toHexString(i);\n  if (result.length() < 2) {\n    result=\"0\" + result;\n  }\n  return result;\n}\n", "protected Graphics createGraphics(ImageFormatter formatter,int width,int height){\n  java.awt.Graphics graphics=null;\n  if (formatter == null) {\n    logger.warning(\"ImageServer.createGraphics: Formatter is null, returning null graphics.\");\n    return null;\n  }\n  graphics=formatter.getGraphics(width,height,getTransparent());\n  if (graphics == null) {\n    logger.warning(\"ImageServer.createGraphics: NOT able to create Graphics!\");\n    return null;\n  }\n  if (logger.isLoggable(Level.FINE)) {\n    logger.fine(\"graphics is cool\");\n  }\n  if (doAntiAliasing && graphics instanceof java.awt.Graphics2D) {\n    java.awt.Graphics2D g2d=(java.awt.Graphics2D)graphics;\n    g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);\n  }\n  return graphics;\n}\n", "public void setRevisions(java.util.Collection<RevisionInfo> revisions) {\n        if (revisions == null) {\n            this.revisions = null;\n            return;\n        }\n\n        this.revisions = new com.amazonaws.internal.SdkInternalList<RevisionInfo>(revisions);\n    }", "public UIGraphicTestCase ( String name ) { super ( name ) ; }", "@Override\n\tpublic com.liferay.commerce.price.list.model.CommercePriceListUserSegmentEntryRel createCommercePriceListUserSegmentEntryRel(\n\t\tlong commercePriceListUserSegmentEntryRelId) {\n\t\treturn _commercePriceListUserSegmentEntryRelLocalService.createCommercePriceListUserSegmentEntryRel(commercePriceListUserSegmentEntryRelId);\n\t}", "public static CmsJspObjectValueWrapper createWrapper(CmsObject cms, Object value) {\n\n        if ((value != null) && (cms != null)) {\n            return new CmsJspObjectValueWrapper(cms, value);\n        }\n        // if no value is available,\n        return NULL_VALUE_WRAPPER;\n    }", "public void loginStart(final String username){\n  if (inactive)   return;\n  logs.add(saveLoginStart(username));\n  activeLogTimer();\n}\n", "public static DMatrixRMaj orthogonal(int numRows , int numCols , Random rand ) {\n        if( numRows < numCols ) {\n            throw new IllegalArgumentException(\"The number of rows must be more than or equal to the number of columns\");\n        }\n\n        DMatrixRMaj u[] = span(numRows,numCols,rand);\n\n        DMatrixRMaj ret = new DMatrixRMaj(numRows,numCols);\n        for( int i = 0; i < numCols; i++ ) {\n            SubmatrixOps_DDRM.setSubMatrix(u[i], ret, 0, 0, 0, i, numRows, 1);\n        }\n\n        return ret;\n    }", "public static boolean isProxyClass(Class<?> cl){\n  if (cl == null) {\n    throw new NullPointerException(\"cl == null\");\n  }\nsynchronized (proxyCache) {\n    return proxyCache.containsKey(cl);\n  }\n}\n", "public Vector2 round ( ) { return new Vector2 ( Math . round ( x ) , Math . round ( z ) ) ; }", "public boolean isSrcClass(String clz){\n  if (Config.v().apk != null) {\n    if (isLibClass(clz))     return false;\n  }\n  return srcClasses.contains(clz);\n}", "public void testParamListLoading ( ) throws Exception { TungstenProperties props = new TungstenProperties ( ) ; props . load ( STR_ , BOOL_ ) ; Assert . assertEquals ( STR_ , STR_ , props . getString ( STR_ ) ) ; Assert . assertEquals ( STR_ , NUM_ , prop", "\tprotected void addTabindexPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Area_tabindex_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_Area_tabindex_feature\", \"_UI_Area_type\"),\n\t\t\t\t DxlPackage.Literals.AREA__TABINDEX,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "protected Address readPeerAddress(Socket client_sock) throws Exception {\n        int timeout=client_sock.getSoTimeout();\n        client_sock.setSoTimeout(server.peerAddressReadTimeout());\n\n        try {\n            // read the cookie first\n            byte[] input_cookie=new byte[cookie.length];\n            in.readFully(input_cookie, 0, input_cookie.length);\n            if(!Arrays.equals(cookie, input_cookie))\n                throw new SocketException(String.format(\"%s: BaseServer.TcpConnection.readPeerAddress(): cookie sent by \" +\n                                                          \"%s:%d does not match own cookie; terminating connection\",\n                                                        server.localAddress(), client_sock.getInetAddress(), client_sock.getPort()));\n            // then read the version\n            short version=in.readShort();\n            if(!Version.isBinaryCompatible(version))\n                throw new IOException(\"packet from \" + client_sock.getInetAddress() + \":\" + client_sock.getPort() +\n                                        \" has different version (\" + Version.print(version) +\n                                        \") from ours (\" + Version.printVersion() + \"); discarding it\");\n            in.readShort(); // address length is only needed by NioConnection\n\n            Address client_peer_addr=new IpAddress();\n            client_peer_addr.readFrom(in);\n            updateLastAccessed();\n            return client_peer_addr;\n        }\n        finally {\n            client_sock.setSoTimeout(timeout);\n        }\n    }", "public static String getResourcePathFor(CharSequence name, Class<?> cls)\n\t{\n\t\tint nameLen;\n\t\tStringBuilder sb;\n\n\t\tif(name==null)\n\t\t\tthrow new NullPointerException(\"name is null\");\n\t\tif(cls==null)\n\t\t\tthrow new NullPointerException(\"cls is null\");\n\t\tnameLen = name.length();\n\t\tsb = new StringBuilder(cls.getName().length() + nameLen + 2);\n\t\tappendResourcePathPrefixFor(sb,cls);\n\t\tcls = null;\n\t\tif(name.charAt(0)!='/')\n\t\t\tsb.append(name, 1, nameLen);\n\t\telse\n\t\t\tsb.append(name);\n\t\tname = null;\n\t\treturn sb.toString();\n\t}", "protected JScrollPane createScroller(){\n  JScrollPane sp=new JScrollPane(null,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);\n  sp.setHorizontalScrollBar(null);\n  sp.setBorder(BorderFactory.createEmptyBorder());\n  return sp;\n}\n", "public void addSystemPropParameter ( String key , String value ) { if ( key == null || value == null ) throw new IllegalArgumentException ( STR_ + key + STR_ + value + STR_ ) ; _systemProp . put ( key , value ) ; }", "@Override public final int hashCode(){\n  long firsthash=Double.doubleToLongBits(first);\n  firsthash=firsthash ^ (firsthash >> 32);\n  return (int)(firsthash * 2654435761L + second);\n}\n", "private static String stripLeadingNonNumeric(String str) {\n        for (int x = 0; x < str.length(); x++) {\n            if (Character.isDigit(str.codePointAt(x))) {\n                return str.substring(x);\n            }\n        }\n        return null;\n    }", "public static RecyclerPaginate . Builder with ( RecyclerView recyclerView , Callbacks callback ) { return new RecyclerPaginate . Builder ( recyclerView , callback ) ; }", "public void addLineJoin ( int joinstyle ) { PDFChangeStrokeCmd sc = new PDFChangeStrokeCmd ( ) ; Join join = Paint . Join . MITER ; switch ( joinstyle ) { case NUM_ : join = Paint . Join . MITER ; break ; case NUM_ : join = Paint . Join . ROUND ; break ; ", "public Builder deleteLocal(){\n  deleteFields.add(\"locale\");\n  return this;\n}\n", "@SuppressWarnings(\"unchecked\")\r\n  public static void main(String[] args) {\r\n\r\n    // System.out.print(\"GrammaticalRelations under DEPENDENT:\");\r\n    // System.out.println(DEPENDENT.toPrettyString());\r\n\r\n    MemoryTreebank tb = new MemoryTreebank(new TreeNormalizer());\r\n    Collection<GrammaticalStructure> gsBank = null;\r\n    Properties props = StringUtils.argsToProperties(args);\r\n\r\n    String encoding = props.getProperty(\"encoding\", \"utf-8\");\r\n    try {\r\n      System.setOut(new PrintStream(System.out, true, encoding));\r\n    } catch (IOException e) {\r\n      throw new RuntimeException(e);\r\n    }\r\n\r\n    String treeFileName = props.getProperty(\"treeFile\");\r\n    String sentFileName = props.getProperty(\"sentFile\");\r\n    String conllXFileName = props.getProperty(\"conllxFile\");\r\n    String altDepPrinterName = props.getProperty(\"altprinter\");\r\n    String altDepReaderName = props.getProperty(\"altreader\");\r\n    String altDepReaderFilename = props.getProperty(\"altreaderfile\");\r\n\r\n    String filter = props.getProperty(\"filter\");\r\n\r\n    boolean makeCopulaHead = props.getProperty(\"makeCopulaHead\") != null;\r\n\r\n    // TODO: if a parser is specified, load this from the parser\r\n    // instead of ever loading it from this way\r\n    String tLPP = props.getProperty(\"tLPP\", \"edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams\");\r\n    TreebankLangParserParams params = ReflectionLoading.loadByReflection(tLPP);\r\n    if (makeCopulaHead) {\r\n      // TODO: generalize and allow for more options\r\n      String[] options = { \"-makeCopulaHead\" };\r\n      params.setOptionFlag(options, 0);\r\n    }\r\n\r\n    if (sentFileName == null && (altDepReaderName == null || altDepReaderFilename == null) && treeFileName == null && conllXFileName == null && filter == null) {\r\n      try {\r\n        System.err.println(\"Usage: java GrammaticalStructure [options]* [-sentFile|-treeFile|-conllxFile file] [-testGraph]\");\r\n        System.err.println(\"  options: -basic, -collapsed, -CCprocessed [the default], -collapsedTree, -parseTree, -test, -parserFile file, -conllx, -keepPunct, -altprinter -altreader -altreaderfile\");\r\n        TreeReader tr = new PennTreeReader(new StringReader(\"((S (NP (NNP Sam)) (VP (VBD died) (NP-TMP (NN today)))))\"));\r\n        tb.add(tr.readTree());\r\n      } catch (Exception e) {\r\n        System.err.println(\"Horrible error: \" + e);\r\n        e.printStackTrace();\r\n      }\r\n    } else if (altDepReaderName != null && altDepReaderFilename != null) {\r\n      DependencyReader altDepReader = loadAlternateDependencyReader(altDepReaderName);\r\n      try {\r\n        gsBank = altDepReader.readDependencies(altDepReaderFilename);\r\n      } catch (IOException e) {\r\n        System.err.println(\"Error reading \" + altDepReaderFilename);\r\n        return;\r\n      }\r\n    } else if (treeFileName != null) {\r\n      tb.loadPath(treeFileName);\r\n    } else if (filter != null) {\r\n      tb.load(new BufferedReader(new InputStreamReader(System.in)));\r\n    } else if (conllXFileName != null) {\r\n      try {\r\n        gsBank = params.readGrammaticalStructureFromFile(conllXFileName);\r\n      } catch (RuntimeIOException e) {\r\n        System.err.println(\"Error reading \" + conllXFileName);\r\n        return;\r\n      }\r\n    } else {\r\n      String parserFile = props.getProperty(\"parserFile\");\r\n      String parserOpts = props.getProperty(\"parserOpts\");\r\n      boolean tokenized = props.getProperty(\"tokenized\") != null;\r\n      Function<Object, Tree> lp = loadParser(parserFile, parserOpts, makeCopulaHead);\r\n      if (!loadTreebankByParsing(tb, sentFileName, encoding, tokenized, lp))\r\n        return;\r\n\r\n      // Instead of getting this directly from the LP, use reflection\r\n      // so that a package which uses GrammaticalStructure doesn't\r\n      // necessarily have to use LexicalizedParser\r\n      try {\r\n        Method method = lp.getClass().getMethod(\"getTLPParams\");\r\n        params = (TreebankLangParserParams) method.invoke(lp);\r\n      } catch (Exception cnfe) {\r\n        throw new RuntimeException(cnfe);\r\n      }\r\n    }\r\n\r\n    // treats the output according to the options passed\r\n    boolean basic = props.getProperty(\"basic\") != null;\r\n    boolean collapsed = props.getProperty(\"collapsed\") != null;\r\n    boolean CCprocessed = props.getProperty(\"CCprocessed\") != null;\r\n    boolean tree = props.getProperty(\"collapsedTree\") != null;\r\n    boolean nonCollapsed = props.getProperty(\"nonCollapsed\") != null;\r\n    boolean extraSep = props.getProperty(\"extraSep\") != null;\r\n    boolean parseTree = props.getProperty(\"parseTree\") != null;\r\n    boolean test = props.getProperty(\"test\") != null;\r\n    boolean keepPunct = props.getProperty(\"keepPunct\") != null;\r\n    boolean conllx = props.getProperty(\"conllx\") != null;\r\n    boolean checkConnected = props.getProperty(\"checkConnected\") != null;\r\n    boolean portray = props.getProperty(\"portray\") != null;\r\n\r\n    // make keepPunct default if conllx is turned on\r\n    if(conllx) {\r\n      keepPunct = true;\r\n    }\r\n\r\n    // If requested load alternative printer\r\n    DependencyPrinter altDepPrinter = null;\r\n    if (altDepPrinterName != null) {\r\n      altDepPrinter = loadAlternateDependencyPrinter(altDepPrinterName);\r\n    }\r\n\r\n    // System.err.println(\"First tree in tb is\");\r\n    // System.err.println(((MemoryTreebank) tb).get(0));\r\n\r\n    Method m = null;\r\n    if (test) {\r\n      // see if we can use SemanticGraph(Factory) to check for being a DAG\r\n      // Do this by reflection to avoid this becoming a dependency when we distribute the parser\r\n      try {\r\n        Class sgf = Class.forName(\"edu.stanford.nlp.trees.semgraph.SemanticGraphFactory\");\r\n        m = sgf.getDeclaredMethod(\"makeFromTree\", GrammaticalStructure.class, boolean.class, boolean.class, boolean.class, boolean.class, boolean.class, boolean.class, Filter.class, String.class, int.class);\r\n      } catch (Exception e) {\r\n        System.err.println(\"Test cannot check for cycles in tree format (classes not available)\");\r\n      }\r\n    }\r\n\r\n    if (gsBank == null) {\r\n      gsBank = new TreeBankGrammaticalStructureWrapper(tb, keepPunct, params);\r\n    }\r\n\r\n    for (GrammaticalStructure gs : gsBank) {\r\n\r\n      Tree t;\r\n      if (gsBank instanceof TreeBankGrammaticalStructureWrapper) {\r\n        // System.err.println(\"Using TreeBankGrammaticalStructureWrapper branch\");\r\n        t = ((TreeBankGrammaticalStructureWrapper) gsBank).getOriginalTree(gs);\r\n        // System.err.println(\"Tree is: \");\r\n        // System.err.println(t);\r\n      } else {\r\n        // System.err.println(\"Using gs.root() branch\");\r\n        t = gs.root(); // recover tree\r\n      }\r\n\r\n      if (test) {// print the grammatical structure, the basic, collapsed and\r\n        // CCprocessed\r\n\r\n        System.out.println(\"============= parse tree =======================\");\r\n        t.pennPrint();\r\n        System.out.println();\r\n\r\n        System.out.println(\"------------- GrammaticalStructure -------------\");\r\n        System.out.println(gs);\r\n\r\n        System.out.println(\"------------- basic dependencies ---------------\");\r\n        System.out.println(StringUtils.join(gs.typedDependencies(false), \"\\n\"));\r\n\r\n        System.out.println(\"------------- non-collapsed dependencies (basic + extra) ---------------\");\r\n        System.out.println(StringUtils.join(gs.typedDependencies(true), \"\\n\"));\r\n\r\n        System.out.println(\"------------- collapsed dependencies -----------\");\r\n        System.out.println(StringUtils.join(gs.typedDependenciesCollapsed(true), \"\\n\"));\r\n\r\n        System.out.println(\"------------- collapsed dependencies tree -----------\");\r\n        System.out.println(StringUtils.join(gs.typedDependenciesCollapsedTree(), \"\\n\"));\r\n\r\n        System.out.println(\"------------- CCprocessed dependencies --------\");\r\n        System.out.println(StringUtils.join(gs.typedDependenciesCCprocessed(true), \"\\n\"));\r\n\r\n        System.out.println(\"-----------------------------------------------\");\r\n        // connectivity test\r\n        boolean connected = GrammaticalStructure.isConnected(gs.typedDependenciesCollapsed(true));\r\n        System.out.println(\"collapsed dependencies form a connected graph: \" + connected);\r\n        if (!connected) {\r\n          System.out.println(\"possible offending nodes: \" + GrammaticalStructure.getRoots(gs.typedDependenciesCollapsed(true)));\r\n        }\r\n\r\n        // test for collapsed dependencies being a tree:\r\n        // make sure at least it doesn't contain cycles (i.e., is a DAG)\r\n        // Do this by reflection so parser doesn't need SemanticGraph and its\r\n        // libraries\r\n        if (m != null) {\r\n          try {\r\n            // the first arg is null because it's a static method....\r\n            Object semGraph = m.invoke(null, gs, false, true, false, false, false, false, null, null, 0);\r\n            Class sg = Class.forName(\"edu.stanford.nlp.trees.semgraph.SemanticGraph\");\r\n            Method mDag = sg.getDeclaredMethod(\"isDag\");\r\n            boolean isDag = (Boolean) mDag.invoke(semGraph);\r\n\r\n            System.out.println(\"tree dependencies form a DAG: \" + isDag);\r\n          } catch (Exception e) {\r\n            e.printStackTrace();\r\n          }\r\n        }\r\n      }// end of \"test\" output\r\n\r\n      else {\r\n        if (parseTree) {\r\n          System.out.println(\"============= parse tree =======================\");\r\n          t.pennPrint();\r\n          System.out.println();\r\n        }\r\n\r\n        if (basic) {\r\n          if (collapsed || CCprocessed || tree || nonCollapsed) {\r\n            System.out.println(\"------------- basic dependencies ---------------\");\r\n          }\r\n          if (altDepPrinter == null) {\r\n            printDependencies(gs, gs.typedDependencies(false), t, conllx, false);\r\n          } else {\r\n            System.out.println(altDepPrinter.dependenciesToString(gs, gs.typedDependencies(false), t));\r\n          }\r\n        }\r\n\r\n        if (nonCollapsed) {\r\n          if (basic || CCprocessed || collapsed || tree) {\r\n            System.out.println(\"----------- non-collapsed dependencies (basic + extra) -----------\");\r\n          }\r\n          printDependencies(gs, gs.allTypedDependencies(), t, conllx, extraSep);\r\n        }\r\n\r\n        if (collapsed) {\r\n          if (basic || CCprocessed || tree || nonCollapsed) {\r\n            System.out.println(\"----------- collapsed dependencies -----------\");\r\n          }\r\n          printDependencies(gs, gs.typedDependenciesCollapsed(true), t, conllx, false);\r\n        }\r\n\r\n        if (CCprocessed) {\r\n          if (basic || collapsed || tree || nonCollapsed) {\r\n            System.out.println(\"---------- CCprocessed dependencies ----------\");\r\n          }\r\n          List<TypedDependency> deps = gs.typedDependenciesCCprocessed(true);\r\n          if (checkConnected) {\r\n            if (!GrammaticalStructure.isConnected(deps)) {\r\n              System.err.println(\"Graph is not connected for:\");\r\n              System.err.println(t);\r\n              System.err.println(\"possible offending nodes: \" + GrammaticalStructure.getRoots(deps));\r\n            }\r\n          }\r\n          printDependencies(gs, deps, t, conllx, false);\r\n        }\r\n\r\n        if (tree) {\r\n          if (basic || CCprocessed || collapsed || nonCollapsed) {\r\n            System.out.println(\"----------- collapsed dependencies tree -----------\");\r\n          }\r\n          printDependencies(gs, gs.typedDependenciesCollapsedTree(), t, conllx, false);\r\n        }\r\n\r\n        // default use: CCprocessed (to parallel what happens within the parser)\r\n        if (!basic && !collapsed && !CCprocessed && !tree && !nonCollapsed) {\r\n          // System.out.println(\"----------- CCprocessed dependencies -----------\");\r\n          printDependencies(gs, gs.typedDependenciesCCprocessed(true), t, conllx, false);\r\n        }\r\n      }\r\n\r\n      if (portray) {\r\n        try {\r\n          // put up a window showing it\r\n          Class sgu = Class.forName(\"edu.stanford.nlp.trees.semgraph.SemanticGraphUtils\");\r\n          Method mRender = sgu.getDeclaredMethod(\"render\", GrammaticalStructure.class, String.class);\r\n          // the first arg is null because it's a static method....\r\n          mRender.invoke(null, gs, \"Collapsed, CC processed deps\");\r\n        } catch (Exception e) {\r\n          throw new RuntimeException(\"Couldn't use swing to portray semantic graph\", e);\r\n        }\r\n      }\r\n\r\n    } // end for\r\n  }", "    public void setInfo( String name, Object data ) {\n        if( name != null)\n            properties.setProperty(name, data.toString());\n    }\n", "private void addLockToJobsNeedingLock(String lock,Job job){\n  ArrayList<Job> jobs=lockToJobsNeedingLock.get(lock);\n  if (jobs == null) {\n    jobs=new ArrayList<>();\n    lockToJobsNeedingLock.put(lock,jobs);\n  }\n  jobs.add(job);\n}\n", "public Builder customProperty ( String name , Number ... values ) { return customProperty ( new Property ( name , values ) ) ; }", "    public boolean isUnified ()\n\t{ return unified; }\n", "    public Number getEndX(int series, int item) {\n        final List bins = getBins(series);\n        final HistogramBin bin = (HistogramBin) bins.get(item);\n        return new Double(bin.getEndBoundary());\n    }\n", "@Override\n    public ImportCertificateResult importCertificate(ImportCertificateRequest request) {\n        request = beforeClientExecution(request);\n        return executeImportCertificate(request);\n    }", "protected String toUpperCase ( String str , int charIndex ) { char [ ] name = str . toCharArray ( ) ; name [ NUM_ ] = Character . toUpperCase ( name [ charIndex ] ) ; return new String ( name ) ; }", "@NotNull @Contract(pure=true) public static String escapeProperty(@NotNull String input,final boolean isKey){\n  final StringBuilder escaped=new StringBuilder(input.length());\n  for (int i=0; i < input.length(); i++) {\n    final char ch=input.charAt(i);\nswitch (ch) {\ncase ' ':\n      if (isKey && i == 0) {\n        escaped.append('\\\\');\n      }\n    escaped.append(' ');\n  break;\ncase '\\t':\nescaped.append(\"\\\\t\");\nbreak;\ncase '\\r':\nescaped.append(\"\\\\r\");\nbreak;\ncase '\\n':\nescaped.append(\"\\\\n\");\nbreak;\ncase '\\f':\nescaped.append(\"\\\\f\");\nbreak;\ncase '\\\\':\ncase '#':\ncase '!':\ncase ':':\ncase '=':\nescaped.append('\\\\');\nescaped.append(ch);\nbreak;\ndefault :\nif (20 < ch && ch < 0x7F) {\nescaped.append(ch);\n}\n else {\nescaped.append(\"\\\\u\");\nescaped.append(Character.forDigit((ch >> 12) & 0xF,16));\nescaped.append(Character.forDigit((ch >> 8) & 0xF,16));\nescaped.append(Character.forDigit((ch >> 4) & 0xF,16));\nescaped.append(Character.forDigit((ch) & 0xF,16));\n}\nbreak;\n}\n}\nreturn escaped.toString();\n}\n", "private void startCountdown ( ) { mTimeoutTV . removeCallbacks ( mTimeoutCounter ) ; mTimeoutCount = NUM_ ; mTimeoutTV . post ( mTimeoutCounter ) ; }", "public void setTrafficPolicies(java.util.Collection<TrafficPolicy> trafficPolicies) {\n        if (trafficPolicies == null) {\n            this.trafficPolicies = null;\n            return;\n        }\n\n        this.trafficPolicies = new com.amazonaws.internal.", "@Override\n    public Collection<AlertCondition> deserialize(JsonElement element, Type type, JsonDeserializationContext context)\n        throws JsonParseException\n    {\n        JsonObject obj = element.getAsJsonObject();\n        JsonArray conditions = obj.getAsJsonArray(\"conditions\");\n        List<AlertCondition> values = new ArrayList<AlertCondition>();\n        if(conditions != null && conditions.isJsonArray())\n        {\n            for(JsonElement condition : conditions)\n            {\n                if(condition.isJsonObject())\n                {\n                    JsonElement conditionType = condition.getAsJsonObject().get(\"type\");\n                    if(conditionType != null)\n                    {\n                        switch(AlertCondition.ConditionType.fromValue(conditionType.getAsString()))\n                        {\n                            case APM_APP:\n                                values.add(gson.fromJson(condition, ApmAppAlertCondition.class));\n                                break;\n                            case APM_KEY_TRANSACTION:\n                                values.add(gson.fromJson(condition, ApmKeyTransactionAlertCondition.class));\n                                break;\n                            case APM_JVM:\n                                values.add(gson.fromJson(condition, ApmJvmAlertCondition.class));\n                                break;\n                            case SERVERS:\n                                values.add(gson.fromJson(condition, ServersAlertCondition.class));\n                                break;\n                            case BROWSER:\n                                values.add(gson.fromJson(condition, BrowserAlertCondition.class));\n                                break;\n                            case MOBILE:\n                                values.add(gson.fromJson(condition, MobileAlertCondition.class));\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        return values;\n    }", "public boolean checkColumnNameEquality(String fromSchema,String specified){\n  if (fromSchema.equals(specified)) {\n    return true;\n  }\n  if (fromSchema.contains(\".\")) {\n    String[] splits=fromSchema.split(\"\\\\.\");\n    String schemaColName=splits[1];\n    return schemaColName.equals(specified);\n  }\n  return false;\n}\n", "   public void setRowHeight(final int height, final int rowIndex) {\n      gridArray_.checkRowIndex(rowIndex);\n\n      if (height < 0) { throw new IllegalArgumentException(\"Negative row heights not permissible.\"); }\n\n      rowHeights_.set(rowIndex, new Integer(height));\n      updateTotalFixedRowHeight();\n      setAllComponentBounds();\n   }\n", "public void onSignalling ( String signalling ) ;", "\tpublic boolean equals(Object obj) {\n\t\tif (obj instanceof Associazione) {\n\t\t\tif (((Associazione)obj).getId() == this.id)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n", "@Override\r\n\tpublic Token getTokenList(Segment text, int initialTokenType, int startOffset) {\n\t\tresetTokenList();\n\t\tthis.offsetShift = -text.offset + startOffset;\n\n\t\t// Start off in the proper state.\n\t\ts = text;\n\t\tyyreset(zzReader);\n\t\tyybegin(YYINITIAL);\n\t\treturn yylex();\n\t}", "public OvhOrder cdn_dedicated_serviceName_quota_duration_GET(String serviceName, String duration, OvhOrderQuotaEnum quota) throws IOException {\n\t\tString qPath = \"/order/cdn/dedicated/{serviceName}/quota/{duration}\";\n\t\tStringBuilder sb = path(qPath, serviceName, duration);\n\t\tquery(sb, \"quota\", quota);\n\t\tString resp = exec(qPath, \"GET\", sb.toString(), null);\n\t\treturn convertTo(resp, OvhOrder.class);\n\t}", "String readSetting ( CModule module , String key ) throws CouldntLoadDataException ;", "public void destroy ( ) { super . destroy ( ) ; }", "public Object readReply(Class expectedClass)\n        throws Throwable\n    {\n        int tag = read();\n\n        if (tag != 'r')\n            error(\"expected hessian reply at \" + codeName(tag));\n\n        int major = read();\n        int minor = read();\n\n        tag = read();\n        if (tag == 'f')\n            throw prepareFault();\n        else {\n            _peek = tag;\n\n            Object value = readObject(expectedClass);\n\n            completeValueReply();\n\n            return value;\n        }\n    }", "public <T> JSONAPIDocument<T> readDocument(byte[] data, Class<T> clazz) {\n\t\treturn readDocument(new ByteArrayInputStream(data), clazz);\n\t}", "public void addRectangle(float x, float y, float width, float height) {\n\tif (isDisposed()) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n\tmoved = false;\n\tCairo.cairo_rectangle(handle, x, y, width, height);\n\tclosed = true;\n}\n", "private static void checkArguments ( final AbstractSQLProvider provider , final CTag tag , final TagType type ) { checkArguments ( provider , tag ) ; Preconditions . checkNotNull ( type , STR_ ) ; Preconditions . checkArgument ( tag . getType ( ) == type ", "\tpublic void visitConditional(Conditional x) {\n\t\tvisitOperator(x);\n\t}\n", "public static CodedInputStream newInstance(ByteBuffer buf){\n  if (buf.hasArray()) {\n    return newInstance(buf.array(),buf.arrayOffset() + buf.position(),buf.remaining());\n  }\n else {\n    ByteBuffer temp=buf.duplicate();\n    byte[] buffer=new byte[temp.remaining()];\n    temp.get(buffer);\n    return newInstance(buffer);\n  }\n}\n", "public S3Location withCannedACL(CannedAccessControlList cannedACL) {\n        setCannedACL(cannedACL == null ? null : cannedACL.toString());\n        return this;\n    }", "public CModuleDragHandler ( final CModulesTable table ) { Preconditions . checkNotNull ( table , STR_ ) ; m_table = table ; }", "public Object decode ( byte [ ] bytes ) throws EncodingException ;", "public static void deleteDirectory(File directory) throws IOException {\n  if (!directory.exists()) {\n    return;\n  }\n  if (!isSymlink(directory)) {\n    cleanDirectory(directory);\n  }\n  Files.delete(directory.toPath());\n}\n", "   public String normalize(String word) {\n      String wordL = word.toLowerCase().trim();\n      StringBuilder sb = new StringBuilder(wordL.length());\n      char c;\n      // TODO: implement properly.. for now just ignore all non-alpha characters\n      for (int i = 0; i < wordL.length(); i++) {\n         c = wordL.charAt(i);\n         if (c >= 'a' || c <= 'z') {\n            sb.append(c);\n         }\n      }\n      return sb.toString();\n   }\n", "public static Method findMethod ( Class < ? > entityClass , String name , Class < ? > ... paramClass ) throws NoSuchMethodException { Method m = entityClass . getMethod ( name , paramClass ) ; int modifiers = m . getModifiers ( ) ; if ( Modifier . isAbstr", "boolean isLiveSync(){\n  return liveSyncActions.contains(this);\n}\n", "Item newField ( final String owner , final String name , final String desc ) { key3 . set ( FIELD , owner , name , desc ) ; Item result = get ( key3 ) ; if ( result == null ) { put122 ( FIELD , newClass ( owner ) . index , newNameType ( name , desc ) . in", "    public void remove(final Object key) {\n        sum -= get(key);\n        map.remove(key);\n    }\n", "  public Region createEmptyRegion(ATLASType type, ATLASElement parent, Id id) {\n    if (type instanceof RegionType) {\n      Region region = parent.getDefiningCorpus().getRegionWithId(id.getAsString());\n      if (region == null) {\n        region = implemen", "    public void init(String args[]) {\n\tsuper.init(args);\n\tconsoleReader = new RPSConsoleEventReader(this, inQueue, outQueue);\n\tconsoleReader.start();\n    }\n", "public static boolean isLocationReachable(InetSocketAddress endpoint,int timeoutMs,int retryCount,int retryIntervalMs){\n  int retryLeft=retryCount;\n  while (retryLeft > 0) {\n    try (Socket s=new Socket()){\n      s.connect(endpoint,timeoutMs);\n      return true;\n    }\n catch (    IOException e) {\n    }\n finally {\n      SysUtils.sleep(retryIntervalMs);\n      retryLeft--;\n    }\n  }\n  LOG.log(Level.FINE,\"Failed to connect to: {0}\",endpoint.toString());\n  return false;\n}\n", "protected void onEntranceTransitionEnd ( ) { }", "public static X509Certificate readX509Certificate(URL url) throws IOException, CertificateException {\n  URLConnection connection=url.openConnection();\n  InputStream is=connection.getInputStream();\n  try {\n    CertificateFactory servercf=CertificateFactory.getInstance(\"X.509\");\n    return (X509Certificate)servercf.generateCertificate(is);\n  }\n  finally {\n    is.close();\n  }\n}\n", "\tpublic JTextPane textPane() {\n\t\treturn this; //_textPane;\n\t}\n", "@Override protected IResourceLocator<?> newResourceLocator(){\n  return fed.getResourceLocator();\n}\n", "private void drawLabels() {\r\n\t\t// Abort if not attached\r\n\t\tif (!isAttached()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Draw the labels\r\n\t\tint lineWidth = lineElement.getOffsetWidth();\r\n\t\tif (numLabels > 0) {\r\n\t\t\t// Create the labels or make them visible\r\n\t\t\tfor (int i = 0; i <= numLabels; i++) {\r\n\t\t\t\tElement label = null;\r\n\t\t\t\tif (i < labelElements.size()) {\r\n\t\t\t\t\tlabel = labelElements.get(i);\r\n\t\t\t\t} else { // Create the new label\r\n\t\t\t\t\tlabel = DOM.createDiv();\r\n\t\t\t\t\tDOM.setStyleAttribute(label, \"position\", \"absolute\");\r\n\t\t\t\t\tDOM.setStyleAttribute(label, \"display\", \"none\");\r\n\t\t\t\t\tif (enabled) {\r\n\t\t\t\t\t\tDOM.setElementProperty(label, \"className\", \"ks-SliderBar-label\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tDOM.setElementProperty(label, \"className\", \"ks-SliderBar-label-disabled\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDOM.appendChild(getElement(), label);\r\n\t\t\t\t\tlabelElements.add(label);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set the label text\r\n\t\t\t\tdouble value = minValue + (getTotalRange() * i / numLabels);\r\n\t\t\t\tDOM.setStyleAttribute(label, \"visibility\", \"hidden\");\r\n\t\t\t\tDOM.setStyleAttribute(label, \"display\", \"\");\r\n\t\t\t\tDOM.setElementProperty(label, \"innerHTML\", formatLabel(value));\r\n\r\n\t\t\t\t// Move to the left so the label width is not clipped by the\r\n\t\t\t\t// shell\r\n\t\t\t\tDOM.setStyleAttribute(label, \"left\", \"0px\");\r\n\r\n\t\t\t\t// Position the label and make it visible\r\n\t\t\t\tint labelWidth = label.getOffsetWidth();\r\n\t\t\t\tint labelLeftOffset = lineLeftOffset + (lineWidth * i / numLabels) - (labelWidth / 2);\r\n//\t\t\t\tlabelLeftOffset = Math.min(labelLeftOffset, lineLeftOffset + lineWidth - labelWidth);\r\n//\t\t\t\tlabelLeftOffset = Math.max(labelLeftOffset, lineLeftOffset);\r\n\t\t\t\tDOM.setStyleAttribute(label, \"left\", labelLeftOffset + \"px\");\r\n\t\t\t\tDOM.setStyleAttribute(label, \"visibility\", \"visible\");\r\n\t\t\t}\r\n\r\n\t\t\t// Hide unused labels\r\n\t\t\tfor (int i = (numLabels + 1); i < labelElements.size(); i++) {\r\n\t\t\t\tDOM.setStyleAttribute(labelElements.get(i), \"display\", \"none\");\r\n\t\t\t}\r\n\t\t} else { // Hide all labels\r\n\t\t\tfor (Element elem : labelElements) {\r\n\t\t\t\tDOM.setStyleAttribute(elem, \"display\", \"none\");\r\n\t\t\t}\r\n\t\t}\r\n\t}", "private static int skipWhiteSpace ( BitArray row ) throws NotFoundException { int width = row . getSize ( ) ; int endStart = row . getNextSet ( NUM_ ) ; if ( endStart == width ) { throw NotFoundException . getNotFoundInstance ( ) ; } return endStart ; }", "  private void writeObject(ObjectOutputStream oos) throws IOException {\n    oos.defaultWriteObject();\n    if(bibPageUrl == null)\n      oos.writeObject(null);\n    else\n      oos.writeObject(bibPageUrl.getURL().toString());\n  } // writeObject(OOS)\n", "public List<CmsCategory> localizeCategories(CmsObject cms, List<CmsCategory> categories, Locale locale) {\n\n        List<CmsCategory> result = Lists.newArrayList();\n        for (CmsCategory category : categories) {\n            result.add(localizeCategory(cms, category, locale));\n        }\n        return result;\n    }", "void stop ( ) ;", "public void onCancelled ( boolean interrupted ) { }", "public static int longestCommonContiguousSubstring(String s, String t) {\r\n    if (s.length() == 0 || t.length() == 0) {\r\n      return 0;\r\n    }\r\n    int M = s.length();\r\n    int N = t.length();\r\n    int[][] d = new int[M + 1][N + 1];\r\n    for (int j = 0; j <= N; j++) {\r\n      d[0][j] = 0;\r\n    }\r\n    for (int i = 0; i <= M; i++) {\r\n      d[i][0] = 0;\r\n    }\r\n\r\n    int max = 0;\r\n    for (int i = 1; i <= M; i++) {\r\n      for (int j = 1; j <= N; j++) {\r\n        if (s.charAt(i - 1) == t.charAt(j - 1)) {\r\n          d[i][j] = d[i - 1][j - 1] + 1;\r\n        } else {\r\n          d[i][j] = 0;\r\n        }\r\n\r\n        if (d[i][j] > max) {\r\n          max = d[i][j];\r\n        }\r\n      }\r\n    }\r\n    // System.err.println(\"LCCS(\" + s + \",\" + t + \") = \" + max);\r\n    return max;\r\n  }", "    public boolean hasMoreElements() {\n        return (prev == null) ? false : prev.hasMoreElements();\n    }\n", "public static boolean hasAnnotationDeep(Class<?> memberDeclaringClass, Class<? extends Annotation> candidate)\n    {\n\n        if (memberDeclaringClass.equals(candidate))\n        {\n            return true;\n        }\n\n        for (Annotation anno : memberDeclaringClass.getAnnotations())\n        {\n            Class<? extends Annotation> annoClass = anno.annotationType();\n            if (!annoClass.getPackage().getName().startsWith(\"java.lang\") && hasAnnotationDeep(annoClass, candidate))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }", "private void procAppear ( int x , int y , int oldx , int oldy ) { String direction = y - oldy > NUM_ ? STR_ : STR_ ; if ( mOrientation == Constants . Orientation . HORIZONTAL ) { direction = x - oldx > NUM_ ? STR_ : STR_ ; } for ( Entry < String , Appeara", "@SuppressWarnings(\"unchecked\") protected int hashFields(int hash,Map<FieldDescriptor,Object> map){\n  for (  Map.Entry<FieldDescriptor,Object> entry : map.entrySet()) {\n    FieldDescriptor field=entry.getKey();\n    Object value=entry.getValue();\n    hash=(37 * hash) + field.getNumber();\n    if (field.getType() != FieldDescriptor.Type.ENUM) {\n      hash=(53 * hash) + value.hashCode();\n    }\n else     if (field.isRepeated()) {\n      List<? extends EnumLite> list=(List<? extends EnumLite>)value;\n      hash=(53 * hash) + hashEnumList(list);\n    }\n else {\n      hash=(53 * hash) + hashEnum((EnumLite)value);\n    }\n  }\n  return hash;\n}\n", "public static int hash32(final String text,int from,int length){\n  return hash32(text.substring(from,from + length));\n}\n", "public int size(){\nsynchronized (eventsList) {\n    return eventsList.size();\n  }\n}", "    public void initGuardianNames() {\n        try {\n            String childSQL = \"select GuardianID, Name from Guardian\";\n            ResultSet rs = dbw.executeQuery(childSQL);\n            while (rs.next())\n                guardianNamesModel.addElement(rs.getInt(\"GuardianID\") + \": \" + rs.getString(\"Name\"));\n        } catch (SQLException sqlex) {\n            System.err.println(sqlex.toString());\n        }\n    }\n", "public static Builder newBuilder ( ) { return new Builder ( ) ; }", "static public JSONObject getSubmittedDocumentFromSubmission(JSONObject submissionDoc) throws Exception {\n\t\tJSONObject submissionInfo = submissionDoc.getJSONObject(\"nunaliit_submission\");\n\t\t\n\t\tJSONObject doc = submissionInfo.getJSONObject(\"submitted_doc\");\n\t\tJSONObject reserved = submissionInfo.optJSONObject(\"submitted_reserved\");\n\t\t\n\t\treturn recreateDocumentFromDocAndReserved(doc, reserved);\n\t}", "E unlinkFirst ( ) { final E f = first ; final E next = f . getNext ( ) ; f . setNext ( null ) ; first = next ; if ( next == null ) { last = null ; } else { next . setPrevious ( null ) ; } return f ; }", "    public Object borrowObject(Object key) {\n        String error;\n\n        if (key == null) {\n            error = \"key was null.\";\n            logger.error(error);\n            throw new RuntimeException(error);\n        }\n\n        if (!(key instanceof String)) {\n            error = \"Invalid key class \" + key.getClass().getName();\n            logger.error(error);\n            throw new RuntimeException(error);\n        }\n\n        try {\n            return super.borrowObject(key);\n\n        } catch (Exception e) {\n            logger.error(e);\n            return null;\n        }\n\n    }\n", "public void setIncompatibleDevices(java.util.Collection<DevicePoolCompatibilityResult> incompatibleDevices) {\n        if (incompatibleDevices == null) {\n            this.incompatibleDevices = null;\n            return;\n        }\n\n        this.incompatibleDevices = new java.util.ArrayList<DevicePoolCompatibilityResult>(incompatibleDevices);\n    }", "private UnconditionalValueDerefSet duplicateFact(UnconditionalValueDerefSet fact){\n  UnconditionalValueDerefSet copyOfFact=createFact();\n  copy(fact,copyOfFact);\n  fact=copyOfFact;\n  return fact;\n}\n", "\tpublic void setScope(Scope scope) {\n\t\tassert scope != null : \"scope must not be null\";\n\t\tthis.scope = scope;\n\t}\n", "public Address ( final BigInteger value ) { m_value = value ; }", "SamlFederationHandler(Map<String,String> attributeMapping,String subjectMapping,String authnContextDelimiter,String authnContext,String sessionIndexMapping,String redirectURI,String logoutURI,String assertionConsumerEndpoint,String sPinitiatedSSOEndpoint,String singleLogoutEndpoint,String singleLogoutEndpointSoap,String sPinitiatedSLOEndpoint){\n  this.attributeMapping=Collections.unmodifiableMap(attributeMapping);\n  this.subjectMapping=subjectMapping;\n  this.authnContextDelimiter=authnContextDelimiter;\n  this.authnContext=authnContext;\n  this.sessionIndexMapping=sessionIndexMapping;\n  this.redirectURI=redirectURI;\n  this.logoutURI=logoutURI;\n  this.assertionConsumerEndpoint=assertionConsumerEndpoint;\n  this.sPinitiatedSSOEndpoint=sPinitiatedSSOEndpoint;\n  this.singleLogoutEndpoint=singleLogoutEndpoint;\n  this.singleLogoutEndpointSoap=singleLogoutEndpointSoap;\n  this.sPinitiatedSLOEndpoint=sPinitiatedSLOEndpoint;\n}\n", "public TLAProofFoldingStructureProvider ( TLAEditor editor ) { canPerformFoldingCommands = BOOL_ ; this . editor = editor ; this . document = editor . getDocumentProvider ( ) . getDocument ( editor . getEditorInput ( ) ) ; foldPositions = new Vector < TLA", "    public void deleteContactos(int entidadeID) {\n        try {\n            Statement stmt = (Statement) con.createStatement();\n\n            String query = \"delete from contactos where entcodind=\" + entidadeID;\n            stmt.executeUpdate(query);\n\n            stmt.close();\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, e.getStackTrace()[0].getMethodName() + \"**\" + lg + \"** \", e);\n        }\n    }\n", "public synchronized void stop(){\n  this.running=false;\n  if (runningThread != null)   runningThread.interrupt();\n}", "public static Study readStudy(final InputStream inputStream) throws IOException {\n        checkNotNull(inputStream);\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {\n            return readStudy(reader);\n        }\n    }", "public boolean hasChildren ( ) { return children . size ( ) > NUM_ ; }", "public AuthenticationHeader(String hdrname,MessageHeader response,HttpCallerInfo hci,boolean dontUseNegotiate){\n  this.hci=hci;\n  this.dontUseNegotiate=dontUseNegotiate;\n  rsp=response;\n  this.hdrname=hdrname;\n  schemes=new HashMap<String,SchemeMapValue>();\n  parse();\n}\n", "private static Set<String> retrieveValues(final String key,final Map<String,Set<String>> keyValueMap){\n  return keyValueMap.containsKey(key) ? keyValueMap.get(key) : Collections.<String>emptySet();\n}\n", "protected base_resource[] get_nitro_bulk_response(nitro_service service, String response) throws Exception\r\n\t{\r\n\t\txen_health_monitor_misc_responses result = (xen_health_monitor_misc_responses) service.get_payload_formatter().string_to_resource(xen_health_monitor_misc_responses.class, response);\r\n\t\tif(result.errorcode != 0)\r\n\t\t{\r\n\t\t\tif (result.errorcode == SESSION_NOT_EXISTS)\r\n\t\t\t\tservice.clear_session();\r\n\t\t\tthrow new nitro_exception(result.message, result.errorcode, (base_response [])result.xen_health_monitor_misc_response_array);\r\n\t\t}\r\n\t\txen_health_monitor_misc[] result_xen_health_monitor_misc = new xen_health_monitor_misc[result.xen_health_monitor_misc_response_array.length];\r\n\t\t\r\n\t\tfor(int i = 0; i < result.xen_health_monitor_misc_response_array.length; i++)\r\n\t\t{\r\n\t\t\tresult_xen_health_monitor_misc[i] = result.xen_health_monitor_misc_response_array[i].xen_health_monitor_misc[0];\r\n\t\t}\r\n\t\t\r\n\t\treturn result_xen_health_monitor_misc;\r\n\t}", "public Set<JsonUser> loadKnownUsers() throws InterruptedException, ExecutionException, RemoteException, OperationApplicationException {\n  Set<JsonUser> users=getUsersFromDb();\n  if (users.isEmpty()) {\n    LOG.i(\"Database contains no user; fetching from server\");\n    users=syncKnownUsers();\n  }\n  LOG.i(String.format(\"Found %d users in db\",users.size()));\n  return users;\n}\n", "public IntegerConstant addInteger(int value){\n  IntegerConstant entry=getIntegerByValue(value);\n  if (entry != null)   return entry;\n  entry=new IntegerConstant(this,_entries.size(),value);\n  addConstant(entry);\n  return entry;\n}\n", "    private List getUnmodifiableListOrNull(List list) {\n        if (list == null) {\n            return null;\n        } else {\n            return Collections.unmodifiableList(list);\n        }\n    }\n", "public Options timezone ( String timezone ) { this . timezone = TimeZone . getTimeZone ( timezone ) ; return this ; }", "    public Document getRequestDoc() throws IOException {\n        if (!documentInit) {\n            documentInit = true;\n            requestDoc = parseRequestContent();\n        }\n\n        return requestDoc;\n    }\n", "static TypeMember createFunctionPrototypeMember ( final int id , final BaseType parentType , final BaseType baseType , final String name , final int argumentIndex ) { return new TypeMember ( id , parentType , baseType , name , Optional . < Integer > absent ( ) , Optional . < Integer > absent ( ) , Optional . of ( argumentIndex ) ) ; }", "private static void addCommentLines ( final ZyLabelContent content , final INaviViewNode node , final List < IComment > localComment , final List < IComment > globalComment ) { Preconditions . checkNotNull ( content , STR_ ) ; final ColorsConfigItem color", "    public void cellLayout(PdfPCell cell, Rectangle position, PdfContentByte[] canvases) {\n        try {\n            PdfAnnotation annotation = PdfAnnotation.createFileAttachment(writer,\n                new Rectangle(position.getLeft() - 20, position.getTop() - 15,\n                    position.getLeft() - 5, position.getTop() - 5),\n                description, fs);\n            annotation.setName(description);\n            writer.addAnnotation(annotation);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n", "public static void CF8(double[] x,double[] f,double[] c,int nx){\n  int count1=0;\n  int count2=0;\n  int count3=0;\n  double sum1=0.0;\n  double sum2=0.0;\n  double sum3=0.0;\n  double yj;\n  double N=2.0;\n  double a=4.0;\n  for (int j=3; j <= nx; j++) {\n    yj=x[j - 1] - 2.0 * x[1] * Math.sin(2.0 * PI * x[0] + j * PI / nx);\n    if (j % 3 == 1) {\n      sum1+=yj * yj;\n      count1++;\n    }\n else     if (j % 3 == 2) {\n      sum2+=yj * yj;\n      count2++;\n    }\n else {\n      sum3+=yj * yj;\n      count3++;\n    }\n  }\n  f[0]=Math.cos(0.5 * PI * x[0]) * Math.cos(0.5 * PI * x[1]) + 2.0 * sum1 / (double)count1;\n  f[1]=Math.cos(0.5 * PI * x[0]) * Math.sin(0.5 * PI * x[1]) + 2.0 * sum2 / (double)count2;\n  f[2]=Math.sin(0.5 * PI * x[0]) + 2.0 * sum3 / (double)count3;\n  c[0]=(f[0] * f[0] + f[1] * f[1]) / (1 - f[2] * f[2]) - a * Math.abs(Math.sin(N * PI * ((f[0] * f[0] - f[1] * f[1]) / (1 - f[2] * f[2]) + 1.0))) - 1.0;\n}\n", "BigInteger copy(){\n  prepareJavaRepresentation();\n  int[] copyDigits=new int[numberLength];\n  System.arraycopy(digits,0,copyDigits,0,numberLength);\n  return new BigInteger(sign,numberLength,copyDigits);\n}\n", "public Metadata ( MetadataType metadataType , String value , Alias alias ) { this ( metadataType , value , alias , BOOL_ ) ; }", "    private void readWidth() {\n        if (table == null)\n            return;\n        if (!(table.getModel() instanceof PrincipalTable))\n            return;\n\n        PrincipalTable pt = (PrincipalTable)table.getModel();\n        \n        TableColumnModel tcm = table.getColumnModel();\n        for (int i = 0; i < tcm.getColumnCount(); i++) {\n            //get its internal name\n            String internalName = pt.getColumnInternalName(i);\n            \n            //and width\n            TableColumn tc = tcm.getColumn(i);\n            int wid = tc.getPreferredWidth();\n            \n            //and searchs it\n            if (names.contains(internalName)) {\n                width.setElementAt(new Integer(wid), names.indexOf(internalName));\n            } else {\n                names.add(internalName);\n                width.add(new Integer(wid));\n            }\n        }\n    }\n", "  protected String toStringHelper(Map<String, SoyData> map) {\n\n    StringBuilder mapStr = new StringBuilder();\n    mapStr.append('{');\n\n    boolean isFirst = true;\n    for (Map.Entry<String, SoyData> entry : map.entrySet()) {\n      if (isFirst) {\n        ", "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=new Vector<Option>();\n  result.addElement(new Option(\"\\tA filter to apply (can be specified multiple times).\",\"F\",1,\"-F <classname [options]>\"));\n  result.addElement(new Option(\"\\tAn attribute range (can be specified multiple times).\\n\" + \"\\tFor each filter a range must be supplied. 'first' and 'last'\\n\" + \"\\tare valid indices. 'inv(...)' around the range denotes an\\n\"+ \"\\tinverted range.\",\"R\",1,\"-R <range>\"));\n  result.addElement(new Option(\"\\tFlag for leaving unused attributes out of the output, by default\\n\" + \"\\tthese are included in the filter output.\",\"U\",0,\"-U\"));\n  result.addAll(Collections.list(super.listOptions()));\n  return result.elements();\n}\n", "public static void releasePlugin ( ReplicatorPlugin plugin , PluginContext context ) { String pluginClassName = plugin . getClass ( ) . getName ( ) ; try { plugin . release ( context ) ; } catch ( Throwable t ) { logger . warn ( STR_ + pluginClassName , t", "public void marshall(StopLoggingRequest stopLoggingRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (stopLoggingRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(stopLoggingRequest.getName(), NAME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void checkInvalidLogins(String userName, String remoteAddress) throws CmsAuthentificationException {\n\n        if (m_maxBadAttempts < 0) {\n            // invalid login storage is disabled\n            return;\n        }\n\n        String key = createStorageKey(userName, remoteAddress);\n        // look up the user in the storage\n        CmsUserData userData = m_storage.get(key);\n        if ((userData != null) && (userData.isDisabled())) {\n            // threshold of invalid logins is reached\n            Set<CmsUserData> data = TEMP_DISABLED_USER.get(userName);\n            if (data == null) {\n                data = new HashSet<CmsUserData>();\n            }\n            data.add(userData);\n            TEMP_DISABLED_USER.put(userName, data);\n            throw new CmsUserDisabledException(\n                Messages.get().container(\n                    Messages.ERR_LOGIN_FAILED_TEMP_DISABLED_4,\n                    new Object[] {\n                        userName,\n                        remoteAddress,\n                        userData.getReleaseDate(),\n                        userData.getInvalidLoginCount()}));\n        }\n        if (TEMP_DISABLED_USER.containsKey(userName) & (userData != null)) {\n            //User war disabled, but time is over -> remove from list\n            if (TEMP_DISABLED_USER.get(userName).contains(userData)) {\n                TEMP_DISABLED_USER.get(userName).remove(userData);\n                if (TEMP_DISABLED_USER.get(userName).isEmpty()) {\n                    TEMP_DISABLED_USER.remove(userName);\n                }\n            }\n        }\n    }", "public void addResultChangedListener(ResultChangedListener l){\n  m_Listeners.add(l);\n}\n", "public boolean isValid(){\n  return wind != null && condition != null && !condition.isEmpty();\n}\n", "   public void terminate ()  {\n      agent.terminate ();\n      agent = null;\n   }\n", "private boolean isBeforeEnd(FastConcurrentSkipListMap.Node<K,V> n){\n  if (n == null)   return false;\n  if (hi == null)   return true;\n  K k=n.key;\n  if (k == null)   return true;\n  int c=m.compare(k,hi);\n  if (c > 0 || (c == 0 && !hiInclusive))   return false;\n  return true;\n}\n", "public static Writer newWriter(final WritableByteChannel ch,\n                                   final CharsetEncoder enc,\n                                   final int minBufferCap)\n    {\n        checkNotNull(ch, \"ch\");\n        return StreamEncoder.forEncoder(ch, enc.reset(), minBufferCap);\n    }", "    public void handlePacket(Player p, int packetId, int packetSize) {\n        if (p == null || p.stream == null) {\n            return;\n        }\n        p.duelFriend = p.stream.readUnsignedWordBigEndianA();\n\tPlayer player = Server.engine.players[p.duelFriend];\n\tif (p == null || player == null) {\n\t\tp.duelFriend = 0;\n\t\treturn;\n\t}\n\tif (p.inDuelArena()) {\n\t\tp.frames.sendMessage(p, \"Sending duel request..\");\n\t\tplayer.frames.sendMessage(player, p.username + \":duelfriend:\");\n\t\tplayer.duelFriend = p.playerId;\n\t}\n    }\n", "public synchronized void clear(){\n  super.clear();\n  mValue.clear();\n  initRange();\n}\n", "    private void replaceAttributes(DefaultGraphCell cell, Map newattributes) {\n        if (attributes.containsKey(cell)) {\n            Map oldattributes = (Map) attributes.get(cell);\n            \n            oldattributes.clear();\n            oldattributes.putAll(newattributes);\n            \n            if (log.isDebugEnabled()) {\n//                log.debug(\"after replacement: \" + oldattributes.toString());\n            }\n        }\n    }\n", "\tprivate void doZoom(Transform3D t3d, double zoomScale) {\n\t\tif (zoomScale <= 0)\treturn;\n\t\t\n\t\t//\tCreate a transform representing the uniform scale.\n\t\tthis.transformX.set(zoomScale);\n\t\t\n\t\t//\tZoom to the new scale.\n\t\tif (this.invert) {\n\t\t\tt3d.mul(t3d, this.transformX);\n\t\t} else {\n\t\t\tt3d.mul(this.transformX, t3d);\n\t\t}\n\t\t\n\t}\n", "    public Instruction accept(NodeVisitor iVisitor) {\n        return iVisitor.visitTrueNode(this);\n    }\n", "    public void learnYourself(Unit me) {\n        super.learnYourself(this);\n        inputVal = null;\n        cValue = null;\n        //System.gc();\n    }\n", "private void computeQualifiedName() {\n    if (parent != null) {\n      qualifiedName = parent.qualifiedName + \".\" + field.getName();\n    } else {\n      qualifiedName = field.getName();\n    }\n  }", "public void testGetDynamicParameters ( ) throws Exception { pm . loadProperties ( ) ; TungstenProperties dynamic = pm . getDynamicProperties ( ) ; TungstenProperties all = pm . getProperties ( ) ; assertTrue ( STR_ , dynamic . size ( ) > NUM_ ) ; for ( St", "public static void run(Reporter reporter) {\n      TCK tck = new TCK(new ObjenesisStd(), new ObjenesisSerializer(), reporter);\n      tck.runTests();\n   }", "@SuppressLint(\"Assert\") void release(){\n  assert (mProcessingThread.getState() == State.TERMINATED);\n  mDetector.release();\n  mDetector=null;\n}\n", "    public String getStandardOutputAndError() {\n        String a=getStandardOutput().trim(), b;\n        synchronized(this) { b=stderr; }\n        b=b.trim();\n        if (a.length()!=0 && b.length()!=0) return a+\"\\n\"+b; else return a+b;\n    }\n", "public Object clone(){\n  try {\n    LiveRef newRef=(LiveRef)super.clone();\n    return newRef;\n  }\n catch (  CloneNotSupportedException e) {\n    throw new InternalError(e.toString(),e);\n  }\n}\n", "\tpublic boolean goOnline () {\n\t\treturn (goOnline (true));\n\t}\n", "\tpublic void stepForward(StepEvent event) {\n\t\tif (isExecutionInProgress()) {\n\t\t\trunningObject.setNextStepAllowed(true);\n\t\t}\n\t}\n", "private void debug(String message){\n  message=\"Webserver: \" + message;\n  LOGGER.info(message);\n}\n", "@Override protected String doInBackground(Void... params){\n  try {\n    String res=launchPing(urlToPing);\n    mTraceRouteResult.append(res);\n    publishProgress(res);\n    TraceRouteContainer trace;\n    if (res.contains(UNREACHABLE_PING) && !res.contains(EX", "default String roleParentName(String type){\n  return String.format(ROLE_PARENT,type);\n}\n", "public void addMacroRecord(MacroRecord record){\n  if (record != null)   macroRecords.add(record);\n}\n", "public void paintMenuBarBackground ( SynthContext context , Graphics g , int x , int y , int w , int h ) { }", "protected void notifyPostTableBuild ( T table ) { }", "    public void randomizeWeights(double minWeight, double maxWeight) {\n        randomizeWeights(new RangeRandomizer(minWeight, maxWeight));\n    }\n", "public static dnssoarec get(nitro_service service, String domain) throws Exception{\n\t\tdnssoarec obj = new dnssoarec();\n\t\tobj.set_domain(domain);\n\t\tdnssoarec response = (dnssoarec) obj.get_resource(service);\n\t\treturn response;\n\t}", "public static CmsResourceFilter ignoreExpirationOffline(CmsObject cms) {\n\n        return cms.getRequestContext().getCurrentProject().isOnlineProject() ? DEFAULT : IGNORE_EXPIRATION;\n    }", "public void eFeature1Init(int y, int yp, Map fmap) {\n\teFeature1Init(y, yp);\n\tstrId2IdxAdd(fmap);\n    }", "    public void initId(){\n        g.clear();\n        int n=(in+out)/2;\n        for(int i=1;i<=n;i++){addEdge(i,2*n+1-i);}\n    }\n", "public boolean isExternalSkin ( ) { return ! isDefaultSkin && mResources != null ; }", "public static boolean[] invert(boolean[] binary)\r\n    {\r\n        Check.notNull(binary);\r\n\r\n        final boolean[] inverted = new boolean[binary.length];\r\n        for (int i = 0; i < inverted.length; i++)\r\n        {\r\n            inverted[i] = !binary[i];\r\n        }\r\n        return inverted;\r\n    }", "@Trivial\n    protected void activate(ComponentContext context) throws Exception {\n        Dictionary<String, ?> props = context.getProperties();\n        final boolean trace = TraceComponent.isAnyTracingEnabled();\n        if (trace && tc.isEntryEnabled())\n            Tr.entry(this, tc, \"activate\", props);\n\n        String sourcePID = (String) props.get(\"ibm.extends.source.pid\"); // com.ibm.ws.jca.jmsQueueConnectionFactory_gen_3f3cb305-4146-41f9-8a57-b231d09013e6\n        configElementName = sourcePID == null ? \"connectionFactory\" : sourcePID.substring(15, sourcePID.indexOf('_', 15));\n\n        cfInterfaceNames = props.get(\"creates.objectClass\");\n        mcfImplClassName = (String) props.get(CONFIG_PROPS_PREFIX + \"managedconnectionfactory-class\");\n        jndiName = (String) props.get(JNDI_NAME);\n        id = (String) props.get(\"config.displayId\");\n\n        componentContext = context;\n        isServerDefined = true; // We don't support app-defined connection factories yet\n\n        //Integer trlevel = props.get(\"transactionSupport\");\n        if (props.get(\"transactionSupport\") != null)\n            connectionFactoryTransactionSupport = TransactionSupportLevel.valueOf((String) props.get(\"transactionSupport\"));\n\n        // filter out actual config properties for the connection factory\n        for (Enumeration<String> keys = props.keys(); keys.hasMoreElements();) {\n            String key = keys.nextElement();\n            if (key.length() > CONFIG_PROPS_PREFIX_LENGTH && key.charAt(CONFIG_PROPS_PREFIX_LENGTH - 1) == '.' && key.startsWith(CONFIG_PROPS_PREFIX)) {\n                String propName = key.substring(CONFIG_PROPS_PREFIX_LENGTH);\n                if (propName.indexOf('.') < 0 && propName.indexOf('-') < 0)\n                    properties.put(propName, props.get(key));\n            }\n        }\n\n        bootstrapContextRef.activate(context);\n\n        if (trace && tc.isEntryEnabled())\n            Tr.exit(this, tc, \"activate\");\n    }", "public static StorageObjectSummary createFromAzureListBlobItem(ListBlobItem listBlobItem)\n  throws StorageProviderException\n  {\n    String location, key, md5;\n    long size;\n\n    // Retrieve the BLOB properties that we need for the Summary\n    // Azure Storage stores metadata inside each BLOB, therefore the listBlobItem\n    // will point us to the underlying BLOB and will get the properties from it\n    // During the process the Storage Client could fail, hence we need to wrap the\n    // get calls in try/catch and handle possible exceptions\n    try\n    {\n      location = listBlobItem.getContainer().getName();\n\n      CloudBlob cloudBlob = (CloudBlob) listBlobItem;\n      key = cloudBlob.getName();\n\n      BlobProperties blobProperties = cloudBlob.getProperties();\n      // the content md5 property is not always the actual md5 of the file. But for here, it's only\n      // used for skipping file on PUT command, hense is ok.\n      md5 = convertBase64ToHex(blobProperties.getContentMD5());\n      size = blobProperties.getLength();\n    }\n    catch (URISyntaxException | StorageException ex)\n    {\n      // This should only happen if somehow we got here with and invalid URI (it should never happen)\n      // ...or there is a Storage service error. Unlike S3, Azure fetches metadata from the BLOB itself,\n      // and its a lazy operation\n      throw new StorageProviderException(ex);\n    }\n    return new StorageObjectSummary(location, key, md5, size);\n\n  }", "public Annotation parseAnnotationV1() {\n    final String json = query.getContent();\n    if (json == null || json.isEmpty()) {\n      throw new BadRequestException(HttpResponseStatus.BAD_REQUEST,\n          \"Missing message content\",\n          \"Supply valid JSON formatted data in the body of your request\");\n    }\n    \n    return JSON.parseToObject(json, Annotation.class);\n  }", "public void calculate ( Context mContext ) { JodaTimeAndroid . init ( mContext ) ; final LocalDateTime currentDateTime = new LocalDateTime ( ) ; setStartDate ( currentDateTime . getYear ( ) , currentDateTime . getMonthOfYear ( ) , currentDateTime . getDayOfMonth ( ) ) ; int weekGap = CalUtil . mDateGap ( currentDateTime . dayOfWeek ( ) . getAsText ( ) . substring ( NUM_ , NUM_ ) . toLowerCase ( ) ) ; if ( weekGap != NUM_ ) { Calendar calendar = Calendar . getInstance ( ) ; calendar . add ( Calendar . DAY_OF_YEAR , - weekGap ) ; Log . i ( STR_ , STR_ + calendar . getTime ( ) . toString ( ) ) ; LocalDateTime ldt = LocalDateTime . fromCalendarFields ( calendar ) ; setStartDate ( ldt . getYear ( ) , ldt . getMonthOfYear ( ) , ldt . getDayOfMonth ( ) ) ; } }", "  private void checkMethod(DetailAST aAST) {\n    if (aAST.getParent().getParent().getType() != TokenTypes.OBJBLOCK) {\n      return;\n    }\n    if (aAST.findFirstToken(TokenTypes.LITERAL_STATIC) != null) {\n      if (checkState(aAST, State.STATIC_METHODS, \"Static method\")) {\n        previousMethodName = null;\n      }\n    } else {\n      if (checkState(aAST, State.INSTANCE_METHODS, \"Instance method\")) {\n        previousMethodName = null;\n      }\n    }\n  }\n", "public QueryDebuggerEventSettingsReply ( final int packetId , final int errorCode ) { super ( packetId , errorCode ) ; }", "public LogSubjects . LogSubject assertThat ( ) { return assertAbout ( LogSubjects . CONSOLE_SUBJECT_FACTORY ) . that ( this ) ; }", "public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { request . getSession ( ) . setAttribute ( STR_ , STR_ ) ; response . sendRedirect ( STR_ ) ; return ; }", "public static boolean shouldRaid(Configuration conf, FileSystem srcFs, \n      FileStatus stat, Codec codec, List<FileStatus> lfs) throws IOException {\n    Path p = stat.getPath();\n    long blockNum = 0L;\n    if (stat.isDir() != codec.isDirRaid) {\n      return false;\n    }\n    \n    if (tooNewForRaid(stat)) {\n      return false;\n    }\n    \n    blockNum = codec.isDirRaid ? \n        DirectoryStripeReader.getBlockNum(lfs) : numBlocks(stat);\n    \n    // if the file/directory has fewer than 2 blocks, then nothing to do\n    if (blockNum <= RaidState.TOO_SMALL_NOT_RAID_NUM_BLOCKS) {\n      return false;\n    }\n    \n    return !raidedByOtherHighPriCodec(conf, stat, codec);\n  }", "    public void setZoomFactor(double zoomFactor) {\n\n        floatingTextAreaFocusLost();\n        if (getSelectedCrosstabEditorPanel() != null)\n        {\n            getSelectedCrosstabEditorPanel().setZoomFactor(zoomFactor);\n        }\n        else\n        {\n            if (this.zoomFactor != zoomFactor) {\n                this.zoomFactor = zoomFactor;\n                this.jPanelReportComponentResized( new java.awt.event.ComponentEvent( jPanelReport,0));\n                isDocDirty = true;\n                this.getReportPanel().repaint();\n                this.jHorizontalRule.repaint();\n                this.jVerticalRule.repaint();\n            }\n        }\n    }\n", "    public String getGenderName() {\n        final GenderType gender = getGender();\n        if (gender == null) {\n            return null;\n        }\n        return gender.getType();\n    }\n", "private boolean markAsDeadCode(XExpression expression) {\n\t\tif (expression instanceof XBlockExpression) {\n\t\t\tfinal XBlockExpression block = (XBlockExpression) expression;\n\t\t\tfinal EList<XExpression> expressions = block.getExpressions();\n\t\t\tif (!expressions.isEmpty()) {\n\t\t\t\tmarkAsDeadCode(expressions.get(0));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tif (expression != null) {\n\t\t\terror(\"Unreachable expression.\", expression, null, IssueCodes.UNREACHABLE_CODE); //$NON-NLS-1$\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "void dumpOids ( ) { for ( int i = NUM_ ; i < objectTypes . size ( ) ; i ++ ) { String typeName = objectTypes . get ( i ) ; if ( typeName != null ) { System . out . printf ( STR_ , typeName ) ; System . out . printf ( STR_ , STR_ + typeName . toUpperCase ( ) . replace ( STR_ , STR_ ) , i ) ; for ( String subTypeName : getSubTypeNames ( typeName ) ) { System . out . printf ( STR_ , subTypeName . toUpperCase ( ) . replace ( STR_ , STR_ ) , this . getTypeId ( typeName , subTypeName ) ) ; } System . out . println ( ) ; } } }", "@Override\n    public boolean isDestroyed() {\n        final boolean isTraceOn = TraceComponent.isAnyTracingEnabled();\n        if (isTraceOn && tc.isEntryEnabled())\n            Tr.entry(tc, \"isDestroyed\");\n        if (state == DESTROYED) {\n            if (isTraceOn && tc.isEntryEnabled())\n                Tr.exit(tc, \"isDestroyed\");\n            return true;\n        }\n\n        if (isTraceOn && tc.isEntryEnabled())\n            Tr.exit(tc, \"isDestroyed\");\n        return false;\n    }", "public FessMessages addErrorsFrontFooter(String property) {\n        assertPropertyNotNull(property);\n        add(property, new UserMessage(ERRORS_front_footer));\n        return this;\n    }", "public void invalidateAuthToken ( String authToken ) ;", "public static List<String> commandLines(List<EvaluationStatistics> stats,boolean sort){\n  List<String> result;\n  result=new ArrayList<>();\n  for (  EvaluationStatistics stat : stats) {\n    if (!result.contains(stat.getCommandLine()))     result.add(stat.getCommandLine());\n  }\n  if (sort)   Collections.sort(result);\n  return result;\n}\n", "public static <T>List<T> toList(T obj1,T obj2,T obj3){\n  List<T> list=new LinkedList<T>();\n  list.add(obj1);\n  list.add(obj2);\n  list.add(obj3);\n  return list;\n}\n", "void addArg(@NonNull String format,@Nullable Object arg,boolean addSeparatorBefore){\n  if (addSeparatorBefore) {\n    builder.append(\", \");\n  }\n  builder.append(format);\n  if (arg != null) {\n    args.add(arg);\n  }\n}\n", "public void serviceName_modem_PUT(String serviceName, OvhModem body) throws IOException {\n\t\tString qPath = \"/xdsl/{serviceName}/modem\";\n\t\tStringBuilder sb = path(qPath, serviceName);\n\t\texec(qPath, \"PUT\", sb.toString(), body);\n\t}", "public void save(FileOutputStream outputStream,@Nullable String header) throws IOException {\n  myProperties.store(outputStream,header);\n}\n", "    public AdministrationTask getAdminTaskbyTitle(String taskTitle) {\n        AdministrationTask task ;\n        ArrayList<AdministrationTask> list = new ArrayList<AdministrationTask>(_tasks.values());\n        Iterator<AdministrationTask> itr = list.iterator();\n\n        if (itr != null) {\n            while (itr.hasNext()) {\n                task = itr.next() ;\n                if (task.getTitle().equalsIgnoreCase(taskTitle))\n                   return task ;\n            }\n        }\n        return null ;\n    }\n", "public Node findNode() {\n\t\tNode result = null;\n\n\t\tSystem.out.print(\"Looking for Node \" + this.nodeString + \" in data source \" + this.dataSource + \"..... \");\n\t\tif (nodeString != null) {       \t\n\t\t\tresult = getShard(this.dataSource).getNode(nodeString);", "public double[][] getCovmat() {\n    // Since we worked only on params with dofit=true, we need to expand the\n    // matrix to cover all parameters.\n    double[][] fullcov = new double[numparams][numparams];\n    for(int i = 0, i2 = 0; i < numparams; i++) {\n      for(int j = 0, j2 = 0; j < numparams; j++) {\n        fullcov[i][j] = (dofit[i] && dofit[j]) ? covmat[i2][j2] : 0;\n        if(dofit[j]) {\n          j2++;\n        }\n      }\n      if(dofit[i]) {\n        i2++;\n      }\n    }\n    return fullcov;\n  }", "public void addTWord(String word,String tag){\n  TWord tword=new TWord(word,tag);\n  sentence.add(tword);\n}\n", "boolean isFifo ( ) ;", "public String startDirectEditDisabled(CmsDirectEditParams params, CmsDirectEditResourceInfo resourceInfo) {\n\n        String editId = getNextDirectEditId();\n        StringBuffer result = new StringBuffer(256);\n\n        result.append(\"<!-- EDIT BLOCK START ", "public void setRulesets(SPARQLRuleset ... rulesets) {\n        if(notNull(rulesets)) {\n            List<SPARQLRuleset> list = new ArrayList<>();\n            for(Object r : rulesets) {\n                if(r != null && rulesets.length > 0) {\n                    list.add((SPARQLRuleset)r);\n                }\n            }\n            this.ruleset = list.toArray(new SPARQLRuleset[list.size()]);\n        }else{\n            this.ruleset = null;\n        }\n    }", "public static vpnglobal_authenticationradiuspolicy_binding[] get(nitro_service service) throws Exception{\n\t\tvpnglobal_authenticationradiuspolicy_binding obj = new vpnglobal_authenticationradiuspolicy_binding();\n\t\tvpnglobal_authenticationradiuspolicy_binding response[] = (vpnglobal_authenticationradiuspolicy_binding[]) obj.get_resources(service);\n\t\treturn response;\n\t}", "private void internalRun ( GranualProgressMonitor monitor ) throws CoreException { try { if ( monitor . isCanceled ( ) ) return ; this . itemsFilter = filter ; if ( filter . getPattern ( ) . length ( ) != NUM_ ) { filterContent ( monitor ) ; } if ( monito", "    public XComponent getXComponent() throws com.sun.star.uno.Exception {\n        XDesktop xDesktop = getXDesktop();\n        XComponent xcomp = xDesktop.getCurrentComponent();\n\n        return xcomp;\n    }\n", "public void fires(double[] input,ArrayList<SimpleRule> ruleCollection){\n  if (m_predicate.evaluate(input) == TreeModel.Predicate.Eval.TRUE) {\n    for (    Rule r : m_childRules) {\n      r.fires(input,ruleCollection);\n    }\n  }\n}\n", "public void initializeLogging ( ) { LogWrapper logWrapper = new LogWrapper ( ) ; Log . setLogNode ( logWrapper ) ; Log . i ( TAG , STR_ ) ; }", "private void doRun ( ) throws IOException , InterruptedException { SocketHelper helper = new SocketHelper ( ) ; while ( shutdownRequested == BOOL_ ) { synchronized ( this ) { String echoValue = helper . echo ( socket . getSocket ( ) , clientName ) ; if ( ! clientName . equals ( echoValue ) ) throw new RuntimeException ( STR_ + clientName + STR_ + echoValue ) ; echoCount ++ ; } Thread . sleep ( sleepMillis ) ; } }", "public static void commandLineCompile ( String [ ] args , boolean lookupUnnamedFiles ) throws Exception { Options options = createCompilationOptions ( ) ; CommandLineParser cliParser = new DefaultParser ( ) ; CommandLine cli ; cli = cliParser . parse ( op", "public OverloadScanner(TranspilationHandler logHandler,JSweetContext context){\n  super(logHandler,context,null);\n  this.types=Types.instance(context);\n}\n", "public AttributesBuilder attribute(String attributeName, Object attributeValue) {\n\t\tthis.attributes.setAttribute(attributeName, attributeValue);\n\t\treturn this;\n\t}", "public final int getOutputSize(int inputLen) {\n\n        if (!initialized && !(this instanceof NullCipher)) {\n            throw new IllegalStateException(\"Cipher not initialized\");\n        }\n        if (inputLen < 0) {\n            throw new IllegalArgumentException(\"Input size must be equal \" +\n                                               \"to or greater than zero\");\n        }\n        updateProviderIfNeeded();\n        return spi.engineGetOutputSize(inputLen);\n    }", "private CompositeTransactionImp createCT(String tid,CoordinatorImp coordinator,Stack<CompositeTransaction> lineage,boolean serial) throws SysException {\n  if (LOGGER.isTraceEnabled())   LOGGER.logTrace(\"Creating composite transaction: \" + tid);\n  CompositeTransactionImp ct=new CompositeTransactionImp(this,lineage,tid,serial,coordinator);\n  setTidToTx(ct.getTid(),ct);\n  return ct;\n}\n", "    public double getMaxProb() {\n            if(maxProb == Double.NEGATIVE_INFINITY && !posTokens.isEmpty()) {\n                    maxProb = posTokens.get(0).getTagProb(posTokens.get(0).getPosTag());\n                    for(int i = 1; i < posTokens.size(); i++) {\n                        maxProb += posTokens.get(i).getTagProb(posTokens.get(i).getPosTag());\n                    }\n            }\n            return maxProb;\n    }\n", "        public void visit(Property entity) throws KAONException {\n            OIModelEntity oimodelEntity=getEntity(entity);\n            ObjectManager.AdditionalEntityInfo info=m_objectManager.getAdditionalEntityInfo(oimodelEntity);\n            if (!info.m_isProperty)\n                throw new KAONException(\"Property is already removed.\");\n            info.m_isProperty=false;\n            m_objectManager.propertyUpdated(oimodelEntity);\n            removeInstanceForEntity(entity);\n        }\n", "public IElementType parseBarewordMinus ( ) { final CharSequence tokenText = yytext ( ) ; if ( Character . isDigit ( tokenText . charAt ( NUM_ ) ) ) { int endOffset = NUM_ ; while ( Character . isDigit ( tokenText . charAt ( endOffset ) ) ) { endOffset ++ ", "private static void deleteDirectory(File file) throws IOException {\n  if (file.isDirectory()) {\n    File[] files=file.listFiles();\n    if (files != null) {\n      for (int i=0; i < files.length; i++) {\n        deleteDirectory(files[i]);\n      }\n    }\n  }\n  file.delete();\n}\n", "public static String encodeQueryString(String value){\n  return encodeValue(value,queryStringEncoding);\n}\n", "public Token ( int type , String text , int startLine , int startColumn ) { this . type = type ; this . meaning = type ; this . text = text ; this . startLine = startLine ; this . startColumn = startColumn ; }", "String validateConditionalReference(String name){\n  Conditional c=null;\n  if (name != null) {\n    if (name.length() > 0) {\n      c=_conditionalManager.getByUserName(name);\n      if (c != null) {\n        return name;\n      }\n    }\n    c=_conditionalManager.getBySystemName(name);\n  }\n  if (c == null) {\n    messageInvalidActionItemName(name,\"Conditional\");\n    return null;\n  }\n  return name;\n}\n", "    public void setPassiveMode(boolean mode) {\n        boolean old;\n        synchronized (getDataLock()) {\n            old = getPassiveMode();\n            setBooleanProperty(PROPERTY_PASSIVE_MODE, mode);\n        }\n        if (mode != old) {\n            firePropertyChange(PROPERTY_PASSIVE_MODE, old, mode);\n        }\n    }\n", "@SuppressWarnings(\"unchecked\")\n    public <T> T[] toArray(T[] a) {\n        fullyLock();\n        try {\n            int size = count.get();\n            if (a.length < size)\n                a = (T[])java.lang.reflect.Array.newInstance\n                    (a.getClass().getComponentType(), size);\n\n            int k = 0;\n            for (Node<E> p = head.next; p != null; p = p.next)\n                a[k++] = (T)p.item;\n            if (a.length > k)\n                a[k] = null;\n            return a;\n        } finally {\n            fullyUnlock();\n        }\n    }", "public static void updatePointOnCircle(PointF pointToUpdate,float radius,double angleDegrees,PointF center){\n  if (radius < 0) {\n    throw new IllegalArgumentException(\"Radius cannot be < 0.\");\n  }\n  double angleRadians=Math.toRadians(angleDegrees);\n  float x=(float)(radius * Math.sin(angleRadians) + center.x);\n  float y=(float)(radius * -Math.cos(angleRadians) + center.y);\n  pointToUpdate.set(x,y);\n}\n", "public boolean tasks(){\n  log.info(\"Starting BluetoothSpeaker tasks.\");\n  log.info(\"mServerSocket:\" + (mServerSocket == null) + \" mBluetoothAdapter:\"+ (mBluetoothAdapter != null)+ \" mConnectionAcceptingThread:\"+ (mBluetoothAdapter != null));\n  if (mServerSocket == null && mBluetoothAdapter != null && mBluetoothAdapter.isEnabled() && (mConnectionAcceptingThread == null || !mConnectionAcceptingThread.isAlive())) {\n    try {\n      log.info(\"No ServerSocket, creating a new one.\");\n      createListeningSocket();\n      spawnConnectionAcceptingThread();\n    }\n catch (    IOException e) {\n      log.error(\"Tasks: failed to create listening BT server socket. \",e);\n      log.error(\"Can't receive incoming connections.\");\n      return false;\n    }\n  }\n  if (mBluetoothAdapter == null || !mBluetoothAdapter.isEnabled()) {\n    log.info(\"bluetooth tasks failed, bluetooth disabled\");\n    return false;\n  }\n  log.info(\"finished BluetoothSpeaker tasks.\");\n  return true;\n}\n", "public void removeListener ( final IView2DListener listener ) { m_listeners . removeListener ( listener ) ; }", "    public double getValue() {\n        // there is no valid ValueSupplier\n        if (_valSuppl == null) {\n            sendWarning(\"Attempt to get a value for a TimeSeries from a non \"\n                    + \"existing ValueSupplier. UNDEFINED will be returned!\",\n                    \"TimeSeries: \" + this.getName() + \" Method: getValue() \",\n                    \"The given ValueSupplier: valSuppl is only a null pointer. So no \"\n                            + \"value can be fetched from it.\",\n                    \"Make sure to pass a valid ValueSupplier when constructing a new \"\n                            + \"TimeSeries object.\");\n\n            return UNDEFINED; // just return\n        }\n\n        // get the value from the ValueSupplier\n        double value = _valSuppl.value();\n\n        // return the rounded value\n        return round(value);\n    }\n", "protected String identifier ( AST node ) { assertNodeType ( IDENT , node ) ; return node . getText ( ) ; }", "@NonNull\n    @Override\n    public MutableDocument setNumber(@NonNull String key, Number value) {\n        return setValue(key, value);\n    }", "public void push(){\n  top++;\n  if (top >= stack.length) {\n    Mapping newstack[]=new Mapping[stack.length * 2];\n    System.arraycopy(stack,0,newstack,0,stack.length);\n    stack=newstack;\n  }\n  stack[top]=null;\n}\n", "public void remove(GenericEntity entity){\n  UtilRedisCacheFactory.clearCache(getCacheName(entity.getEntityName()));\n  ModelEntity model=entity.getModelEntity();\n  if (model != null) {\n    Iterator<String> it=model.getViewConvertorsIterator();\n    while (it.hasNext()) {\n      String targetEntityName=it.next();\n      UtilRedisCacheFactory.clearCache(getCacheName(targetEntityName));\n    }\n  }\n}\n", "public static Timestamp toTimestamp ( Date d ) { return new Timestamp ( d . getTime ( ) ) ; }", "public void paintInternalFrameTitlePaneBorder ( SynthContext context , Graphics g , int x , int y , int w , int h ) { }", "public ReplDBMSEvent eventFromStatement ( long seqno , String defaultSchema , String query , int fragNo , boolean lastFrag ) { Timestamp ts = new Timestamp ( System . currentTimeMillis ( ) ) ; ArrayList < DBMSData > t = new ArrayList < DBMSData > ( ) ; t ", "private void appendClazzColumnForSelect(StringBuffer buf)\r\n    {\r\n        ClassDescriptor cld = getSearchClassDescriptor();\r\n        ClassDescriptor[] clds = getMultiJoinedClassDescriptors(cld);\r\n\r\n        if (clds.length == 0)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        buf.append(\",CASE\");\r\n\r\n        for (int i = clds.length; i > 0; i--)\r\n        {\r\n            buf.append(\" WHEN \");\r\n\r\n            ClassDescriptor subCld = clds[i - 1];\r\n            FieldDescriptor[] fieldDescriptors = subCld.getPkFields();\r\n\r\n            TableAlias alias = getTableAliasForClassDescriptor(subCld);\r\n            for (int j = 0; j < fieldDescriptors.length; j++)\r\n            {\r\n                FieldDescriptor field = fieldDescriptors[j];\r\n                if (j > 0)\r\n                {\r\n                    buf.append(\" AND \");\r\n                }\r\n                appendColumn(alias, field, buf);\r\n                buf.append(\" IS NOT NULL\");\r\n            }\r\n            buf.append(\" THEN '\").append(subCld.getClassNameOfObject()).append(\"'\");\r\n        }\r\n        buf.append(\" ELSE '\").append(cld.getClassNameOfObject()).append(\"'\");\r\n        buf.append(\" END AS \" + SqlHelper.OJB_CLASS_COLUMN);\r\n    }", "protected List<String> translateSarlFormalParametersForSyntheticOperation(JvmExecutable owner, JvmGenericType actionContainer,\n\t\t\tboolean varargs, List<InferredStandardParameter> signature) {\n\t\tfinal List<String> arguments = CollectionLiterals.newArrayLis", "void sendFinishMessage ( ) ;", "public static Object deserializeToObject(String encObj) throws IOException, ClassNotFoundException {\n  Object obj=null;\n  if (encObj != null && encObj.length() > 0) {\n    obj=IOUtils.deserialise(Base64.decode(encObj),false);\n  }\n  return obj;\n}\n", "public double computeAverageLocalOfObservations ( ) { double mi = NUM_ ; double miCont = NUM_ ; max = NUM_ ; min = NUM_ ; for ( int nextVal = NUM_ ; nextVal < base_power_k ; nextVal ++ ) { double p_next = ( double ) nextCount [ nextVal ] / ( double ) obse", "public static Proj createOMProjection(Properties props,Projection defaultProj){\n  float scale=PropUtils.floatFromProperties(props,SCALE,defaultProj.getScale());\n  int height=PropUtils.intFromProperties(props,HEIGHT,defaultProj.getHeight());\n  int width=PropUtils.intFromProperties(props,WIDTH,defaultProj.getWidth());\n  Point2D llp=defaultProj.getCenter();\n  float longitude=PropUtils.floatFromProperties(props,LON,(float)llp.getX());\n  float latitude=PropUtils.floatFromProperties(props,LAT,(float)llp.getY());\n  Class<? extends Projection> projClass=null;\n  String projType=props.getProperty(PROJTYPE);\n  ProjectionFactory projFactory=ProjectionFactory.loadDefaultProjections();\n  if (projType != null) {\n    projClass=projFactory.getProjClassForName(projType);\n  }\n  if (projClass == null) {\n    projClass=defaultProj.getClass();\n  }\n  if (Debug.debugging(\"imageserver\")) {\n    Debug.output(\"ImageServerUtils.createOMProjection: projection \" + projClass.getName() + \", with HEIGHT = \"+ height+ \", WIDTH = \"+ width+ \", lat = \"+ latitude+ \", lon = \"+ longitude+ \", scale = \"+ scale);\n  }\n  Proj proj=(Proj)projFactory.makeProjection(projClass,new Point2D.Float(longitude,latitude),scale,width,height);\n  return (Proj)proj;\n}\n", "\tprivate void makeButton(){\n\t\ttry\n\t\t{\n\t\t\tnew HtmlButton(this,\"register\"){\n\t\t        @Override protected void onClick(){\n\t\t        \tRegisterPage.this.htmlButtonHandler();\n\t\t        }\n\t\t    };\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tthis.navigateToErrorPage(e, null);\n\t\t}\n\t}\n", "private MBeanInfo getMBeanInfo(MBeanServerExecutor pServerManager, ObjectName pObjectName)\n            throws IOException, ReflectionException, MBeanException, AttributeNotFoundException, InstanceNotFoundException {\n        return pServerManager.call(pObjectName, MBEAN_INFO_HANDLER);\n    }", "protected ConversionStatus convertCompatible(String rawString, Class<?> type) {\n        ConversionStatus status = new ConversionStatus();\n        for (PriorityConverter con : converters.getAll()) {\n            Type key = con.getType();\n            if (key", "@Override public Image createAcceleratedImage(Component target,int width,int height){\n  ColorModel model=getColorModel(Transparency.OPAQUE);\n  WritableRaster wr=model.createCompatibleWritableRaster(width,height);\n  return new OffScreenImage(target,model,wr,model.isAlphaPremultiplied());\n}\n", "public void putDefault ( String key , Object value ) { defaults . put ( key , value ) ; reload ( ) ; }", "protected String inlineImageUrls(HttpServletRequest req, String css, IResource res) {\n\t\tif (imageSizeThreshold == 0 && inlinedImageIncludeList.size() == 0) {\n\t\t\t// nothing to do\n\t\t\treturn css;\n\t\t}\n\n\t\t// In-lining of imports can be disabled by reques", "\tprotected void linkActionEventToOp(JComboBox source, String opName){\n\t\tinsertEventToOp(source,\"actionPerformed\",opName);\n\t\tsource.addActionListener(getEventListenerInstance());\n\t}\n", "public ComplexVector generateHermitianRandomVector(int dimension,Random random){\n  ComplexVector randomVector=new ComplexVector(dimension,Mode.HERMITIAN);\n  float[] coordinates=randomVector.getCoordinates();\n  for (int d=0; d < coordinates.length; d++)   coordinates[d]=(float)(random.nextFloat() - 0.5) / (float)coordinates.length;\n  return randomVector;\n}\n", "  public void removePropertyChangeListener(PropertyChangeListener l) {\n    dp.listeners.removePropertyChangeListener(l);\n  }\n", "public void addListener ( final IView2DListener listener ) { m_listeners . addListener ( listener ) ; }", "public void addImage(int id, Media media)\n    {\n        final Integer key = Integer.valueOf(id);\n        surfaces.put(key, Drawable.loadImage(media));\n        if (surfaceId == null)\n        {\n            surfaceId = key;\n        }\n    }", "private String toSQLClause(FieldCriteria c, ClassDescriptor cld)\r\n    {\r\n        String colName = toSqlClause(c.getAttribute(), cld);\r\n        return colName + c.getClause() + c.getValue();\r\n    }", "    private void updateTileInfo() {\n        if (currentTile == null) {\n            return;\n        }\n\n        Properties tileProps = currentTile.getProperties();\n        PropertiesTableModel tilePropertiesModel = new PropertiesTableModel(tileProps);\n        tileProperties.setModel(tilePropertiesModel);\n    }\n", "\tpublic boolean removeParamArray(edu.udo.cs.miningmart.m4.ParameterArray paramArray) {\n\t\treturn entries.values().remove(paramArray);\n\t}\n", "private void readData(long absolutePosition,ByteBuffer target,int length){\n  int remaining=length;\n  while (remaining > 0) {\n    dropFragmentsTo(absolutePosition);\n    int positionInFragment=(int)(absolutePosition - totalBytesDropped);\n    int toCopy=Math.min(remaining,fragmentLength - positionInFragment);\n    target.put(dataQueue.peek(),positionInFragment,toCopy);\n    absolutePosition+=toCopy;\n    remaining-=toCopy;\n  }\n}\n", "public synchronized double forceUpdate ( double delta ) { tokens = Math . min ( tokens + delta , capacity ) ; return tokens ; }", "private void readObjectNoData ( ) throws ObjectStreamException { throw new InvalidObjectException ( STR_ ) ; }", "    protected boolean nowarn = false;\n    public boolean isNowarn() { return nowarn; }\n", "private void extractProtoSources(Set<String> extracted,String protoFile){\n  if (!extracted.add(protoFile)) {\n    return;\n  }\n  String content=copyTestData(protoFile);\n  Matcher matcher=PROTO_IMPORT_PATTERN.matcher(content);\n  while (matcher.find()) {\n    extractProtoSources(extracted,matcher.group(1));\n  }\n}\n", "public Matrix3x2d setView(double left, double right, double bottom, double top) {\n        m00 = 2.0 / (right - left);\n        m01 = 0.0;\n        m10 = 0.0;\n        m11 = 2.0 / (top - bottom);\n        m20 = (left + right) / (left - right);\n        m21 = (bottom + top) / (bottom - top);\n        return this;\n    }", "public Map<String, Object> all(String entityName, String groupId) throws MnoException {\n\t\treturn all(entityName, groupId, null, getAuthenticatedClient());\n\t}", "public final void pushPair(int v1,int v2){\n  if (null == m_map) {\n    m_map=new int[m_blocksize];\n    m_mapSize=m_blocksize;\n  }\n else {\n    if ((m_firstFree + 2) >= m_mapSize) {\n      m_mapSize+=m_blocksize;\n      int newMap[]=new int[m_mapSize];\n      System.arraycopy(m_map,0,newMap,0,m_firstFree);\n      m_map=newMap;\n    }\n  }\n  m_map[m_firstFree]=v1;\n  m_map[m_firstFree + 1]=v2;\n  m_firstFree+=2;\n}\n", "protected double[][] extractFeaturesInternal(BufferedImage image) {\r\n\r\n\t\tdouble[][] descriptions = harder(image);\r\n\t\tif (!perBandNormalization) {\r\n\t\t\t// if perBandNormalization is off then do a final L2 normalization\r\n\t\t\tfor (int i = 0; i < descriptions.length; i++) {\r\n\t\t\t\tNormalization.normalizeL2(descriptions[i]);\r\n\t\t\t\t// SurfDescribeOps.normalizeFeatures(descriptions[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn descriptions;\r\n\t}", "\tprivate void initDisplayOrderPreference() {\n\t\tStringBuffer list = new StringBuffer();\n\t\tfor (Iterator i = metrics.keySet().iterator();i.hasNext();) {\n\t\t\tString id = (String)i.next();\n\t\t\tString desc = ((MetricDescriptor)metrics.get(id)).getName();\n\t\t\tlist.append(id).append(\" - \").append(desc).append(',');\n\t\t}\n\t\tString def = list.substring(0,list.length()-1);\n\t\tgetPluginPreferences().setDefault(\"METRICS.displayOrder\", def);\n\t\t// if metrics were added/removed, reset the value\n\t\tif (getMetricIds().length != metrics.size()) {\n\t\t\tgetPluginPreferences().setToDefault(\"METRICS.displayOrder\");\n\t\t}\n\t}\n", "    public void displayHelpFromEvent(ActionEvent e, Object focus ) {\n        //helper.actionPerformed(e);\n        if ( focus==null ) focus= e.getSource();\n        if ( focus instanceof Component ) {\n            Component c= (Component)focus;\n            c= findRegisteredParent(c);\n            if (c==null ) {\n                Util.openBrowser( \"http://autoplot.org/help\" );\n            } else {\n                String helpId =helpIds.get(c);\n                Util.openBrowser( \"http://autoplot.org/help#\"+helpId );\n            }\n        } else {\n            Util.openBrowser( \"http://autoplot.org/help\" );\n        }\n\n        \n    }\n", "public static boolean setOnce(AtomicReference<Subscription> upstream, Subscription next, Class<?> subscriber) {\n    AutoDisposeUtil.checkNotNull(next, \"next is null\");\n    if (!upstream.compareAndSet(null, next)) {\n      next.cancel();\n      if (upstream.get() != AutoSubscriptionHelper.CANCELLED) {\n        reportDoubleSubscription(subscriber);\n      }\n      return false;\n    }\n    return true;\n  }", "public static DMatrixRMaj createHomography(DMatrixRMaj R, Vector3D_F64 T,\n\t\t\t\t\t\t\t\t\t\t\t   double d, Vector3D_F64 N,\n\t\t\t\t\t\t\t\t\t\t\t   DMatrixRMaj K)\n\t{\n\t\tDMatrixRMaj temp = new DMatrixRMaj(3,3);\n\t\tDMatrixRMaj K_inv = new DMatrixRMaj(3,3);\n\n\t\tDMatrixRMaj H = createHomography(R, T, d, N);\n\n\t\t// apply calibration matrix to R\n\t\tCommonOps_DDRM.mult(K,H,temp);\n\n\t\tCommonOps_DDRM.invert(K,K_inv);\n\t\tCommonOps_DDRM.mult(temp,K_inv,H);\n\n\t\treturn H;\n\t}", "default boolean isParameter ( ) { return BOOL_ ; }", "private static String normalizedURL(String host,int port,String path){\n  if (path == null || path.length() == 0) {\n    path=\"/\";\n  }\n  return \"http://\" + host + \":\"+ port+ path;\n}\n", "@Override\n    public DeleteReplicationTaskResult deleteReplicationTask(DeleteReplicationTaskRequest request) {\n        request = beforeClientExecution(request);\n        return executeDeleteReplicationTask(request);\n    }", "public void setThreadMax(int max)\n  {\n    if (max == _threadMax) {\n      // avoid update() overhead if unchanged\n      return;\n    }\n    \n    if (max <= 0) {\n      max = DEFAULT_THREAD_MAX;\n    }\n    \n    if (max < _idleMin)\n      throw new ConfigException(L.l(\"IdleMin ({0}) must be less than ThreadMax ({1})\", _idleMin, max));\n    \n    if (max < 1)\n      throw new ConfigException(L.l(\"ThreadMax ({0}) must be greater than zero\", \n                                    max));\n\n    _threadMax = max;\n\n    update();\n  }", "protected CmsXmlContent saveInContentObject(\r\n        CmsObject cms,\r\n        CmsXmlContent content,\r\n        Locale locale,\r\n        String name,\r\n        CmsContainerConfiguration configuration) throws CmsException {\r\n\r\n        if (content == null) {\r\n            content = CmsXmlContentFactory.createDocument(\r\n                cms,\r\n                locale,\r\n                (CmsResourceTypeXmlContent)OpenCms.getResourceManager().getResourceType(\r\n                    CmsResourceTypeXmlContainerPage.INHERIT_CONTAINER_CONFIG_TYPE_NAME));\r\n        }\r\n\r\n        if (!content.hasLocale(locale)) {\r\n            content.addLocale(cms, locale);\r\n        }\r\n        Element parentElement = content.getLocaleNode(locale);\r\n        serializeSingleConfiguration(cms, name, configuration, parentElement);\r\n        return content;\r\n    }", "public static boolean deleteDirectory ( String path ) { return deleteDirectory ( new File ( path ) ) ; }", "public boolean supportsUseDefaultSchema ( ) { return BOOL_ ; }", "\tpublic Element getJdxFolder(String pathStr) {\n\t\tElement out = getFolder(getJdxFolderNode(), pathStr);\n\t\treturn out;\n\t}\n", "public ResolvedEvent ( EventStoreClientMessages . ResolvedEvent event ) { this . event = ( event . hasEvent ( ) ) ? new RecordedEvent ( event . getEvent ( ) ) : null ; this . link = ( event . hasLink ( ) ) ? new RecordedEvent ( event . getLink ( ) ) : null ; this . originalPosition = new Position ( event . getCommitPosition ( ) , event . getPreparePosition ( ) ) ; }", "static void appendBytes ( String content , Mode mode , BitArray bits , String encoding ) throws WriterException { switch ( mode ) { case NUMERIC : appendNumericBytes ( content , bits ) ; break ; case ALPHANUMERIC : appendAlphanumericBytes ( content , bits", "protected Map<Cell,Long> detectWriteAlreadyCommittedInternal(TableReference tableRef,Map<Cell,Long> keysToLoad,@Output Set<CellConflict> spanningWrites,@Output Set<CellConflict> dominatingWrites,TransactionService transactionService){\n  Map<Cell,Long> rawResults=keyValueService.getLatestTimestamps(tableRef,keysToLoad);\n  Map<Long,Long> commitTimestamps=getCommitTimestamps(tableRef,rawResults.values(),false);\n  Map<Cell,Long> keysToDelete=Maps.newHashMapWithExpectedSize(0);\n  for (  Map.Entry<Cell,Long> e : rawResults.entrySet()) {\n    Cell key=e.getKey();\n    long theirStartTimestamp=e.getValue();\n    AssertUtils.assertAndLog(theirStartTimestamp != getStartTimestamp(),\"Timestamp reuse is bad:%d\",getStartTimestamp());\n    Long theirCommitTimestamp=commitTimestamps.get(theirStartTimestamp);\n    if (theirCommitTimestamp == null || theirCommitTimestamp == TransactionConstants.FAILED_COMMIT_TS) {\n      keysToDelete.put(key,theirStartTimestamp);\n      continue;\n    }\n    AssertUtils.assertAndLog(theirCommitTimestamp != getStartTimestamp(),\"Timestamp reuse is bad:%d\",getStartTimestamp());\n    if (theirStartTimestamp > getStartTimestamp()) {\n      dominatingWrites.add(Cells.createConflictWithMetadata(keyValueService,tableRef,key,theirStartTimestamp,theirCommitTimestamp));\n    }\n else     if (theirCommitTimestamp > getStartTimestamp()) {\n      spanningWrites.add(Cells.createConflictWithMetadata(keyValueService,tableRef,key,theirStartTimestamp,theirCommitTimestamp));\n    }\n  }\n  if (!keysToDelete.isEmpty()) {\n    if (!rollbackFailedTransactions(tableRef,keysToDelete,commitTimestamps,transactionService)) {\n      return keysToLoad;\n    }\n  }\n  return keysToDelete;\n}\n", "public void collapse(TreePath[] paths){\n  for (  TreePath path : paths) {\n    collapse((NodeBase)path.getLastPathComponent());\n  }\n}", "    public int hashCode() {\n        return remoteID.hashCode();\n    }\n", "\tpublic String getReplacedSessionId() {\n\t\t// TODO: use \"Replaces\" header\n\t\tString content = getDialogPath().getRemoteContent();\n\t\tString result = null;\n\t\tif (content != null) {\n\t\t\tint index1 = content.indexOf(\"Session-Replaces=\");\n\t\t\tif (index1 != -1) {\n\t\t\t\tint index2 = content.indexOf(\"\\\"\", index1);\n\t\t\t\tresult = content.substring(index1+17, index2);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n", "   public void setOutputDirectory(java.io.File outputDirectory) {\n      this.outputDirectory = outputDirectory;\n      if (!outputDirectory.exists() || !outputDirectory.isDirectory()) {\n         throw new RuntimeException(\"Invalid directory \" + outputDirectory);\n      }\n   }\n", "    public boolean isGreaterThan(BigMoneyProvider other) {\n        return iMoney.isGreaterThan(other);\n    }\n", "public void server(final String[] args) throws Exception {\n  final Map<String,Object> options=getStartOptions(args);\n  workingDirectory=IOUtils.tryGetCanonicalFileElseGetAbsoluteFile((File)options.get(DIR));\n  writeStatus(createStatus(this.basename,STARTING,OSProcess.getId()));\n  final Agent agent=createAgent((Properties)options.get(AGENT_PROPS));\n  final Thread thread=createAgentProcessThread(createAgentProcessThreadGroup(),agent);\n  thread.setDaemon(true);\n  thread.start();\n  pollAgentForPendingShutdown(agent);\n}\n", "private void addEntityAttributes(\n        CmsObject cms,\n        CmsXmlContent content,\n        String parentPath,\n        CmsEntity entity,\n        Locale contentLocale,\n        Set<String> fieldsSet) {\n\n        for (CmsEntityAttribute attribute : entity.getAttributes()) {\n            if (!isSettingsAttribute(attribute.getAttributeName())) {\n                if (CmsType.CHOICE_ATTRIBUTE_NAME.equals(attribute.getAttributeName())) {\n                    List<CmsEntity> choiceEntities = attribute.getComplexValues();\n                    for (int i = 0; i < choiceEntities.size(); i++) {\n                        List<CmsEntityAttribute> choiceAttributes = choiceEntities.get(i).getAttributes();\n                        // each choice entity may only have a single attribute with a single value\n                        assert (choiceAttributes.size() == 1)\n                            && choiceAttributes.get(\n                                0).isSingleValue() : \"each choice entity may only have a single attribute with a single value\";\n                        CmsEntityAttribute choiceAttribute = choiceAttributes.get(0);\n                        String elementPath = parentPath + getElementName(choiceAttribute.getAttributeName());\n                        if (choiceAttribute.isSimpleValue()) {\n                            String value = choiceAttribute.getSimpleValue();\n                            I_CmsXmlContentValue field = content.getValue(elementPath, contentLocale, i);\n                            if (field == null) {\n                                field = content.addValue(cms, elementPath, contentLocale, i);\n                            }\n                            field.setStringValue(cms, value);\n                            fieldsSet.add(field.getPath());\n                        } else {\n                            CmsEntity child = choiceAttribute.getComplexValue();\n                            I_CmsXmlContentValue field = content.getValue(elementPath, contentLocale, i);\n                            if (field == null) {\n                                field = content.addValue(cms, elementPath, contentLocale, i);\n                            }\n                            addEntityAttributes(cms, content, field.getPath() + \"/\", child, contentLocale, fieldsSet);\n                        }\n                    }\n                } else {\n                    String elementPath = parentPath + getElementName(attribute.getAttributeName());\n                    if (attribute.isSimpleValue()) {\n                        List<String> values = attribute.getSimpleValues();\n                        for (int i = 0; i < values.size(); i++) {\n                            String value = values.get(i);\n                            I_CmsXmlContentValue field = content.getValue(elementPath, contentLocale, i);\n                            if (field == null) {\n                                field = content.addValue(cms, elementPath, contentLocale, i);\n                            }\n                            field.setStringValue(cms, value);\n                            fieldsSet.add(field.getPath());\n                        }\n                    } else {\n                        List<CmsEntity> entities = attribute.getComplexValues();\n                        for (int i = 0; i < entities.size(); i++) {\n                            CmsEntity child = entities.get(i);\n                            I_CmsXmlContentValue field = content.getValue(elementPath, contentLocale, i);\n                            if (field == null) {\n                                field = content.addValue(cms, elementPath, contentLocale, i);\n                            }\n                            addEntityAttributes(cms, content, field.getPath() + \"/\", child, contentLocale, fieldsSet);\n                        }\n                    }\n                }\n            }\n        }\n    }", "public void doRedirects(){\n  try {\n    if (System.out != psOut) {\n      if (psOldOut == null)       psOldOut=System.out;\n      psOut=new PrintStream(new RedirectorStream(psOldOut,LogIDs.STDOUT,LogEvent.LT_INFORMATION));\n      System.setOut(psOut);\n    }\n    if (System.err != psErr) {\n      if (psOldErr == null)       psOldErr=System.err;\n      psErr=new PrintStream(new RedirectorStream(psOldErr,LogIDs.STDERR,LogEvent.LT_ERROR));\n      System.setErr(psErr);\n    }\n  }\n catch (  Throwable e) {\n    Debug.printStackTrace(e);\n  }\n}\n", "public void marshall(GetShardIteratorRequest getShardIteratorRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (getShardIteratorRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(getShardIteratorRequest.getStreamName(), STREAMNAME_BINDING);\n            protocolMarshaller.marshall(getShardIteratorRequest.getShardId(), SHARDID_BINDING);\n            protocolMarshaller.marshall(getShardIteratorRequest.getShardIteratorType(), SHARDITERATORTYPE_BINDING);\n            protocolMarshaller.marshall(getShardIteratorRequest.getStartingSequenceNumber(), STARTINGSEQUENCENUMBER_BINDING);\n            protocolMarshaller.marshall(getShardIteratorRequest.getTimestamp(), TIMESTAMP_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "    public List getDefaultActionIds() {\n\n        List ids = new ArrayList();\n        Iterator itDefActions = m_defaultActions.iterator();\n        while (itDefActions.hasNext()) {\n            I_CmsListDirectAction action = (I_CmsListDirectAction)itDefActions.next();\n            ids.add(action.getId());\n        }\n        return Collections.unmodifiableList(ids);\n    }\n", "\tpublic float getDotProduct(Vector dotedVector){\n\t\treturn this.x*dotedVector.x+this.y*dotedVector.y+\n\t\t\t\tthis.z*dotedVector.z;\n\t}\n", "@Override\n    public GetMetricDataResult getMetricData(GetMetricDataRequest request) {\n        request = beforeClientExecution(request);\n        return executeGetMetricData(request);\n    }", "public void error(String msg, Object[] args)\n  {\n\n    String themsg = XSLMessages.createMessage(msg, args);\n\n    throw new RuntimeException(XSLMessages.createMessage(\n                                    XSLTErrorResources.ER_ELEMTEMPLATEELEM_ERR,\n        ", "private Index makeTagGroupIndex(byte tagGroupTag,byte[] tagsInGroup){\n  if (indexByTagGroup == null)   indexByTagGroup=new Index[CONSTANT_GroupLimit - CONSTANT_GroupFirst];\n  int which=tagGroupTag - CONSTANT_GroupFirst;\n  assert (indexByTagGroup[which] == null);\n  int fillp=0;\n  Entry[] cpMap=null;\n  for (int pass=1; pass <= 2; pass++) {\n    untypedIndexOf(null);\n    for (    byte tag : tagsInGroup) {\n      Index ix=indexByTag[tag];\n      if (ix == null)       continue;\n      int ixLen=ix.cpMap.length;\n      if (ixLen == 0)       continue;\n      assert (tagGroupTag == CONSTANT_All ? fillp == untypedFirstIndexByTag[tag] : fillp < untypedFirstIndexByTag[tag]);\n      if (cpMap != null) {\n        assert (cpMap[fillp] == null);\n        assert (cpMap[fillp + ixLen - 1] == null);\n        System.arraycopy(ix.cpMap,0,cpMap,fillp,ixLen);\n      }\n      fillp+=ixLen;\n    }\n    if (cpMap == null) {\n      assert (pass == 1);\n      cpMap=new Entry[fillp];\n      fillp=0;\n    }\n  }\n  indexByTagGroup[which]=new Index(tagName(tagGroupTag),cpMap);\n  return indexByTagGroup[which];\n}\n", "public Operations getOperationsForScope(OperationScope... scopes) {\n        final Operations result = new Operations();\n        final List<Operation> r = new ArrayList<Operation>();\n        if (getOperations() != null) {\n            for (Operation op ", "\tprivate Map createMapMarker(int line, int severity, String message, int charStart, int charEnd){\n\t\tMap map = new HashMap();\n\t\tmap.put(ATTRIBUTE_OWNER, QvtparserPlugin.ID);\n\t\tmap.put(IMarker.LINE_NUMBER, new Integer(line));\n\t\tmap.put(IMarker.SEVERITY, new Integer(severity));\n\t\tmap.put(IMarker.MESSAGE, message);\n\t\tmap.put(IMarker.CHAR_START, new Integer(charStart));\n\t\tmap.put(IMarker.CHAR_END, new Integer(charEnd));\n\t\treturn map;\n\t}\n", "public TimeZoneFormat setGMTOffsetPattern(GMTOffsetPatternType type, String pattern) {\n        if (isFrozen()) {\n            throw new UnsupportedOperationException(\"Attempt to modify frozen object\");\n        }\n        if (pattern == null) {\n            throw new NullPointerException(\"Null GMT offset pattern\");\n        }\n\n        Object[] parsedItems = parseOffsetPattern(pattern, type.required());\n\n        _gmtOffsetPatterns[type.ordinal()] = pattern;\n        _gmtOffsetPatternItems[type.ordinal()] = parsedItems;\n        checkAbuttingHoursAndMinutes();\n\n        return this;\n    }", "    public Book getbook(int id) {\n        Session session = HibernateUtil.currentSession() ;\n        Book book = (Book) session.get(Book.class, new Integer(id)) ;\n        //System.out.println(book.getName());\n        HibernateUtil.closeSession();\n        ", "private boolean removeDirectory ( File directory , Map < String , String > progress ) { if ( directory == null ) return BOOL_ ; if ( ! directory . exists ( ) ) return BOOL_ ; if ( ! directory . isDirectory ( ) ) return BOOL_ ; String [ ] list = directory ", "\tpublic void write(byte[] b, int off, int len) throws IOException {\n\t\tsuper.write(b, off, len);\n\t\tdatapos = (datapos + len) % 512;\n\t\tbyteswritten += len;\n\t\tcursize -= len;\n\t\tif(cursize < 0) {\n\t\t\tthrow new IOException(\"too much data written for current file\"); //$NON-NLS-1$\n\t\t}\n\t}\n", "    protected LinkedActivation goUp(int count, LinkedActivation start) {\n        LinkedActivation rt = start;\n        for (int idx=0; idx < count; idx++) {\n            rt = rt.getPrevious();\n        }\n        return rt;\n    }\n", "public void addListener ( final ITagTreeManagerListener listener ) { m_listeners . addListener ( listener ) ; }", "        public int compareTo(Object obj) {\n            return -((PluginWrapper) obj).name.compareTo(this.name);\n        }\n", "public void shutdown(){\n  GridClientUtils.shutdownNow(GridClientTopology.class,exec,log);\n}\n", "\tpublic void close() throws SQLException {\n\t\t_target.close();\n\t}\n", "public static double ulp(final double value){\n  if (USE_JDK_MATH) {\n    return Math.ulp(value);\n  }\n  final int exponent=getExponent(value);\n  if (exponent >= MIN_DOUBLE_NORMAL_EXPONENT + 52) {\n    if (exponent == MAX_DOUBLE_EXPONENT + 1) {\n      return Math.abs(value);\n    }\n    return Double.longBitsToDouble(exponent + (MAX_DOUBLE_EXPONENT - 52L) << 52);\n  }\n else {\n    if (exponent == MIN_DOUBLE_NORMAL_EXPONENT - 1) {\n      return Double.MIN_VALUE;\n    }\n    return Double.longBitsToDouble(1L << exponent - MIN_DOUBLE_NORMAL_EXPONENT);\n  }\n}\n", "protected AnyBreakpointSetReply ( final int packetId , final int errorCode , final List < Pair < RelocatedAddress , Integer > > addresses ) { super ( packetId , errorCode ) ; this . addresses = Preconditions . checkNotNull ( addresses , STR_ ) ; }", "private void sendUpdate(JSONObject obj,boolean keepCallback){\n  sendUpdate(obj,keepCallback,PluginResult.Status.OK);\n}\n", "    public void doExitCriticalCareProcess(Patient patient) {\n        System.out.println(this.getClass() + \": Event \" + this.getEventList().getCurrentSimEvent());\n    }\n", "public void plus(Closure c){\n  if (parent() == null) {\n    throw new UnsupportedOperationException(\"Adding sibling nodes to the root node is not supported\");\n  }\n  appendNodes(c);\n}\n", "public synchronized void onSpaceConnect ( SpaceConnectionEvent event ) { try { _activeSpaces . add ( event . getId ( ) ) ; if ( _currentSpaceState == StartupState . WAITING ) { notify ( ) ; } else { changeState ( StartupState . NOT_LAST ) ; } } catch ( Exception e ) { if ( _logger . isLoggable ( Level . WARNING ) ) { _logger . log ( Level . WARNING , STR_ + _spaceName + STR_ , e ) ; } } }", "RawMessage ( byte [ ] messageBytes , int messageLength , TransportAddress remoteAddress , TransportAddress localAddress ) { this . messageBytes = new byte [ messageLength ] ; System . arraycopy ( messageBytes , NUM_ , this . messageBytes , NUM_ , messageLength ) ; this . messageLength = messageLength ; this . localAddress = localAddress ; this . remoteAddress = remoteAddress ; }", "private void showPopupMenu(final MouseEvent event){\n  final CTraceEventsTableFilterMenu menu=new CTraceEventsTableFilterMenu(getFilterField());\n  menu.show(event.getComponent(),event.getX(),event.getY());\n}\n", "public BlockLocation[] getBlockLocations(String src, long start,\n    long length) throws IOException {\n    LocatedBlocks blocks = callGetBlockLocations(namenode, src, start, length,\n        isMetaInfoSuppoted(namenodeProtocolProxy));\n    return DFSUtil.locatedBlocks2Locations(blocks);\n  }", "\tprotected void unzoomPoint(org.eclipse.draw2d.geometry.Point p) {\n\t\tif (zoomController != null) {\n\t\t\tp.setLocation(zoomController.unzoomCoordinate(p.x), zoomController.unzoomCoordinate(p.y));\n\t\t}\n\t}\n", "@InService(SegmentServiceImpl.class)\n  public\n  Page writePage(Page page,\n                 long oldSequence,\n                 int saveLength,\n                 int saveTail,\n                 int saveSequence,\n                 Result<Integer> result)\n  {\n    if (isClosed()) {\n      return null;\n    }\n    \n    // Type type = page.getType();\n    int pid = page.getId();\n    int nextPid = page.getNextId();\n    \n    WriteStream out = out();\n    \n    int head = (int) out.position();\n    \n    try {\n      int available = getAvailable();\n      \n      if (available < head + page.size()) {\n        return null;\n      }\n      \n      Page newPage = page.writeCheckpoint(_table, this, oldSequence,\n                                          saveLength, saveTail, saveSequence);\n\n      if (newPage == null) {\n        return null;\n      }\n      \n      newPage.setSequence(getSequence());\n      \n      out = out();\n      \n      int tail = (int) out.position();\n\n      if (addIndex(out, page, newPage,\n                   saveSequence, newPage.getLastWriteType(), \n                   pid, nextPid, head, tail - head,\n                   result)) {\n        return newPage;\n      }\n      else {\n        return null;\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      return null;\n    }\n  }", "private Map<String, String[]> createToolParams(CmsWorkplace wp, String url, Map<String, String[]> params) {\n\n        Map<String, String[]> newParams = new HashMap<String, String[]>();\n        // add query parameters to the parameter map if required\n        if (url.indexOf(\"?\") > 0) {\n            String query = url.substring(url.indexOf(\"?\"));\n            Map<String, String[]> reqParameters = CmsRequestUtil.createParameterMap(query);\n            newParams.putAll(reqParameters);\n        }\n        if (params != null) {\n            newParams.putAll(params);\n        }\n\n        // put close link if not set\n        if (!newParams.containsKey(CmsDialog.PARAM_CLOSELINK)) {\n            Map<String, String[]> argMap = resolveAdminTool(\n                getCurrentRoot(wp).getKey(),\n                getCurrentToolPath(wp)).getHandler().getParameters(wp);\n            newParams.put(\n                CmsDialog.PARAM_CLOSELINK,\n                new String[] {linkForToolPath(wp.getJsp(), getCurrentToolPath(wp), argMap)});\n        }\n        return newParams;\n    }", "public static base_responses delete(nitro_service client, String ciphergroupname[]) throws Exception {\n\t\tbase_responses result = null;\n\t\tif (ciphergroupname != null && ciphergroupname.length > 0) {\n\t\t\tsslcipher deleteresources[] = new sslcipher[ciphergroupname.length];\n\t\t\tfor (int i=0;i<ciphergroupname.length;i++){\n\t\t\t\tdeleteresources[i] = new sslcipher();\n\t\t\t\tdeleteresources[i].ciphergroupname = ciphergroupname[i];\n\t\t\t}\n\t\t\tresult = delete_bulk_request(client, deleteresources);\n\t\t}\n\t\treturn result;\n\t}", "\tpublic void run() {\n\t    if (config == null) {\n\t    \tlog.warn(\"No configuration is parsed.\");\n\t    } else if (model == null) {\n\t    \tlog.warn(\"No model is set.\");\n\t    } else if (config.isEmpty()) {\n\t    \tlog.warn(\"No template is set in the configuration.\");\n    \t} else {\n\t    \terrors.clear();\n\t    \tfor (Template t : config) {\n\t    \t\tboolean goodResult = true;\n    \t\t\ttry {\n    \t\t\t\tgoodResult = t.apply(model);\n    \t\t\t} catch (TemplateException e) {\n    \t\t\t\terrors.add(e.getCause());\n    \t\t\t\tgoodResult = false;\n    \t\t\t}\n\t\t\t\tif (!goodResult && t.isUndoable()) {\n\t\t\t\t\tt.undo();\n\t\t\t\t}\n\t    \t}\n\t    }\n\t}\n", "public void marshall(ActionType actionType, ProtocolMarshaller protocolMarshaller) {\n\n        if (actionType == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(actionType.getId(), ID_BINDING);\n            protocolMarshaller.marshall(actionType.getSettings(), SETTINGS_BINDING);\n            protocolMarshaller.marshall(actionType.getActionConfigurationProperties(), ACTIONCONFIGURATIONPROPERTIES_BINDING);\n            protocolMarshaller.marshall(actionType.getInputArtifactDetails(), INPUTARTIFACTDETAILS_BINDING);\n            protocolMarshaller.marshall(actionType.getOutputArtifactDetails(), OUTPUTARTIFACTDETAILS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "protected void onRequestError(final RequestErrorEvent event) {\r\n        LOGGER.log(Level.INFO, \"onRequestError: {0}\", event.getCrawlCandidate().getRequestUrl());\r\n    }", "\tpublic void setCategory (com.vazau.categories.Category category) {\n\t\tthis.category = category;\n\t}\n", "public void removeListener ( final IZyGraphLayoutSettingsListener listener ) { m_listeners . removeListener ( listener ) ; }", "public static SurfaceConfig imports(Configurer configurer)\r\n    {\r\n        Check.notNull(configurer);\r\n\r\n        return imports(configurer.getRoot());\r\n    }", "public static void v(String tag,String s,Object... args){\n  if (LDJSLOG.VERBOSE >= LOGLEVEL)   Log.v(tag,String.format(s,args));\n}\n", "public boolean isDatabaseIntegrityOk(){\n  acquireReference();\n  try {\n    List<Pair<String,String>> attachedDbs=null;\n    try {\n      attachedDbs=getAttachedDbs();\n      if (attachedDbs == null) {\n        throw new IllegalStateException(\"databaselist for: \" + getPath() + \" couldn't \"+ \"be retrieved. probably because the database is closed\");\n      }\n    }\n catch (    SQLiteException e) {\n      attachedDbs=new ArrayList<Pair<String,String>>();\n      attachedDbs.add(new Pair<String,String>(\"main\",getPath()));\n    }\n    for (int i=0; i < attachedDbs.size(); i++) {\n      Pair<String,String> p=attachedDbs.get(i);\n      SQLiteStatement prog=null;\n      try {\n        prog=compileStatement(\"PRAGMA \" + p.first + \".integrity_check(1);\");\n        String rslt=prog.simpleQueryForString();\n        if (!rslt.equalsIgnoreCase(\"ok\")) {\n          Log.e(TAG,\"PRAGMA integrity_check on \" + p.second + \" returned: \"+ rslt);\n          return false;\n        }\n      }\n  finally {\n        if (prog != null)         prog.close();\n      }\n    }\n  }\n  finally {\n    releaseReference();\n  }\n  return true;\n}\n", "private void searchSMS(String message,String contactName){\n  ArrayList<Contact> contacts;\n  send(R.string.chat_sms_search_start);\n  contacts=ContactsManager.getMatchingContacts(sContext,contactName);\n  if (contacts.size() > 0) {\n    send(R.string.chat_sms_search,message,contacts.size());\n    for (    Contact contact : contacts) {\n      ArrayList<Sms> smsList=mSmsManager.getSms(ContactsManager.getPhones(sContext,contact.ids),message);\n      Collections.sort(smsList);\n      if (smsList.size() > 0) {\n        sendSmsListOnXmpp(smsList,contact.name,null);\n      }\n    }\n    send(\"Done\");\n  }\n else {\n    send(R.string.chat_no_match_for,message);\n  }\n}\n", "public final boolean isSupported(String feature,String version){\n  return implementation.hasFeature(feature,version);\n}\n", "@Override\n    public Object set(PageContext pc, Collection.Key propertyName, Object value) throws PageException {\n\tDispatch.put(dispatch, propertyName.getString(), value);\n\treturn value;\n    }", "public static boolean calcDrawSloppyEdges ( final ZyGraph graph ) { Preconditions . checkNotNull ( graph , STR_ ) ; final EdgeHidingMode mode = graph . getSettings ( ) . getEdgeSettings ( ) . getEdgeHidingMode ( ) ; return ( mode == EdgeHidingMode . HIDE_NEVER ) || ( ( mode == EdgeHidingMode . HIDE_ON_THRESHOLD ) && ( graph . getSettings ( ) . getEdgeSettings ( ) . getEdgeHidingThreshold ( ) > graph . getEdgeCount ( ) ) ) ; }", "private void given(CharSequence s, int wanted, int got) {\n        red.append(s);\n        given += got;\n        LOGGER.trace(\"Given: [\" + wanted + \",\" + got + \"]-\" + s);\n    }", "public static TimeOfDay hourMinuteAndSecondOfDay ( int hour , int minute , int second ) { return new TimeOfDay ( hour , minute , second ) ; }", "public Address __and__(final Object rhs){\n  return new Address(m_value.and(getBigInteger(rhs)));\n}\n", "\tprotected void toStringBuffer(int level, Map map) {\n\t\tif (level == -1 || map == null) {\n\t\t\treturn;\n\t\t}\n\t\tStringBuffer tab = new StringBuffer();\n\t\tfor (int i = 0; i < level; i++) {\n\t\t\ttab.append('\\t');\n\t\t}\n\t\tbuffer.append(tab).append(\"#\" + level + \" [\\n\");\n\t\tfor (Iterator iterator = map.keySet().iterator(); iterator.hasNext();) {\n\t\t\tObject key = iterator.next();\n\t\t\tObject value = map.get(key);\n\t\t\tif (value instanceof Map) {\n\t\t\t\tbuffer.append(tab).append(key + \"=\\n\");\n\t\t\t\ttoStringBuffer(level + 1, (Map) value);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbuffer.append(tab).append(key + \"=\" + value + \";\\n\");\n\t\t\t}\n\t\t}\n\t\tbuffer.append(tab).append(\"]\\n\");\n\t}\n", "  public String graph() throws Exception {\n\n    StringBuffer resultBuff = new StringBuffer();\n    m_Tree.toGraph(resultBuff, 0, null);\n    String result = \"digraph Tree {\\n\" + \"edge [style=bold]\\n\" + resultBuff.toString()\n      + \"\\n}\\n\";\n    return resul", "\tprotected String getResourceLocation(String extension) {\n\t\treturn \"/\" + TwilioRestClient.DEFAULT_VERSION + \"/Accounts/\"\n\t\t\t\t+ this.getRequestAccountSid() + \"/Recordings/\" + this.getSid()\n\t\t\t\t+ extension;\n\t}\n", "public void logDebug ( String message , Throwable cause ) { getLog ( ) . log ( new Status ( IStatus . INFO , pluginId , DEBUG_SEVERITY , message , cause ) ) ; }", "public static void insertView ( final INaviView source , final INaviView target ) { Preconditions . checkNotNull ( source , STR_ ) ; Preconditions . checkNotNull ( target , STR_ ) ; Preconditions . checkArgument ( source . isLoaded ( ) , STR_ ) ; Precondi", "public static DecomposableMatchBuilder0<Double> caseDouble(double d) {\n    List<Matcher<Object>> matchers = new ArrayList<>();\n    matchers.add(eq(d));\n\n    return new DecomposableMatchBuilder0<>(matchers, new PrimitiveFieldExtractor<>(Double.class));\n  }", "protected static Class boxVar ( Class c ) { if ( Boolean . TYPE . equals ( c ) ) { return Boolean . class ; } else if ( Character . TYPE . equals ( c ) ) { return Character . class ; } else if ( Byte . TYPE . equals ( c ) ) { return Byte . class ; } else if ( Double . TYPE . equals ( c ) ) { return Double . class ; } else if ( Float . TYPE . equals ( c ) ) { return Float . class ; } else if ( Integer . TYPE . equals ( c ) ) { return Integer . class ; } else if ( Long . TYPE . equals ( c ) ) { return Long . class ; } else if ( Short . TYPE . equals ( c ) ) { return Short . class ; } else { return c ; } }", "    public void actionPerformed(final ActionEvent e) {\n        if (e.getSource() == toggleButton && selectedPlugin >= 0) {\n            final PluginInfoToggle pluginInfo = (PluginInfoToggle) pluginList.getSelectedValue();\n            \n            pluginInfo.toggle();\n            \n            if (pluginInfo.getState()) {\n                toggleButton.setText(\"Disable\");\n            } else {\n                toggleButton.setText(\"Enable\");\n            }\n            \n            pluginList.repaint();\n        } else if (e.getSource() != toggleButton) {\n            URLHandler.getURLHander().launchApp(\"http://addons.dmdirc.com/\");\n        }\n    }\n", "    public void setMap(TransBaseMap map) {\n       setSelectedPoints(null);\n       super.setMap(map);\n    }\n", "@Override default CompletableFuture<Double> sumDouble(final ToDoubleFunction<? super T> fn){\n  return CompletableFuture.supplyAsync(null,getExec());\n}\n", "public static Label createLabel ( Composite parent , String text , Font font , int hspan ) { Label l = new Label ( parent , SWT . NONE ) ; l . setFont ( font ) ; l . setText ( text ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = hspan ; l . setLayoutData ( gd ) ; return l ; }", "private Object extractValue(String line, int lineNumber, ColumnInfo<Object> columnInfo, String columnStr,\n\t\t\tint linePos, Object target, ParseError parseError) {\n\n\t\tConverter<Object, ?> converter = columnInfo.getConverter();\n\t\tif (alwaysTrimInput || columnInfo.isTrimInput() || converter.isAlwaysTrimInput()) {\n\t\t\tcolumnStr = columnStr.trim();\n\t\t}\n\t\tif (columnStr.isEmpty() && columnInfo.getDefaultValue() != null) {\n\t\t\tcolumnStr = columnInfo.getDefaultValue();\n\t\t}\n\t\tif (columnStr.isEmpty() && columnInfo.isMustNotBeBlank()) {\n\t\t\tparseError.setErrorType(ErrorType.MUST_NOT_BE_BLANK);\n\t\t\tparseError.setMessage(\"field '\" + columnInfo.getFieldName() + \"' must not be blank\");\n\t\t\tassignParseErrorFields(parseError, columnInfo, columnStr);\n\t\t\tparseError.setLinePos(linePos);\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\treturn converter.stringToJava(line, lineNumber, linePos, columnInfo, columnStr, parseError);\n\t\t} catch (ParseException e) {\n\t\t\tparseError.setErrorType(ErrorType.INVALID_FORMAT);\n\t\t\tparseError.setMessage(\"field '\" + columnInfo.getFieldName() + \"' parse-error: \" + e.getMessage());\n\t\t\tparseError.setLinePos(linePos);\n\t\t\treturn null;\n\t\t} catch (Exception e) {\n\t\t\tparseError.setErrorType(ErrorType.INTERNAL_ERROR);\n\t\t\tparseError.setMessage(\"field '\" + columnInfo.getFieldName() + \"' error: \" + e.getMessage());\n\t\t\tparseError.setLinePos(linePos);\n\t\t\treturn null;\n\t\t}\n\t}", "    public Object clone(){\n\treturn (new GeneEdgeWithOtherInfo(from,to,weight,otherInfo));\n    }\n", "public void onLowMemory() {\n\t\tmaxCacheSize /= 2;\n\t\tapplyCacheLimit(0);\n\t}", "    private void setCheckedChildren(Item item, boolean state) {\n        createChildren(item);\n        Item[] items = getChildren(item);\n        if (items != null) {\n            for (int i = 0; i < items.length; i++) {\n                Item it = items[i];\n                if (it.getData() != null && (it instanceof TreeItem)) {\n                    TreeItem treeItem = (TreeItem) it;\n                    treeItem.setChecked(state);\n                    setCheckedChildren(treeItem, state);\n                }\n            }\n        }\n    }\n", "@Override public void run(){\n  try {\n    _launcher.onChildIdleBegin();\n    _launcher.onChildThreadLaunchBegin();\n    _pool.addThread(this);\n    runTasks();\n  }\n catch (  Throwable e) {\n    log.log(Level.WARNING,e.toString(),e);\n  }\n finally {\n    _pool.removeThread(this);\n    _launcher.onChildIdleEnd();\n    _launcher.onChildThreadLaunchEnd();\n  }\n}\n", "\tpublic void stopListener(){\n\t\tcontinueExecuting = false;\n\t\tglobalConsoleListener.interrupt();\n\t}\n", "private boolean verifyFocus ( int selectedIndex ) { Component visibleComponent = getVisibleComponent ( ) ; Component selectedComponent = null ; if ( selectedIndex < NUM_ ) { if ( visibleComponent != null ) { setVisibleComponent ( null ) ; } } else { selec", "public AnnounceThread() throws IOException {\n  super(\"discovery announcement\");\n  setDaemon(true);\n  if (multicastInterfaces == null || multicastInterfaces.length > 0) {\n    socket=new MulticastSocket();\n    socket.setTimeToLive(multicastAnnouncementConstraints.getMulticastTimeToLive(Constants.getTtl()));\n  }\n else {\n    socket=null;\n  }\n}\n", "    public boolean act( FOS action ) {\n        String name = action.argAt( 0 ).toString(  );\n        long num = Long.parseLong( action.argAt( 1 ).toString(  ) );\n\n        Timer timer = ( Timer ) getModuleByName( \"timer\" );\n        \n        long currentDocs = 0;\n        if (documentMap.containsKey(name)) {\n            currentDocs = documentMap.get(name);\n        }\n    \n        // Only update if the agent has done something...\n        if (num > currentDocs) {\n            timer.update( (int) (num-currentDocs) );\n            documentMap.put(name, num);\n        }\n        \n\n        return true;\n    }\n", "public void dismissCard ( boolean exitRight ) { if ( onCardChangeListener != null ) { onCardChangeListener . onCardDismissed ( currentItem , exitRight ) ; } populatePending = BOOL_ ; reversePos = exitRight ; setCurrentItemInternal ( currentItem + NUM_ , BOOL_ , BOOL_ ) ; }", "static Class<?> findProxyViewClass(Context context, String name) {\n        try {\n            return loadViewClass(context, String.format(\"%s.probe.ProbeProxy$%s\",\n                    context.getPackageName(), name.replace('.', '_')));\n        } catch (ClassNotFoundException e) {\n            return null;\n        }\n    }", "private static synchronized LinkedList<ControllerPlan> findPlan(RVMMethod method){\n  return table.get(method);\n}\n", "private boolean isOnEdge(final int direction,final Point currentPoint){\n  m_testPoint.setLocation(currentPoint);\n  move(m_testPoint,direction);\n  return m_testPoint.x == 0 || m_testPoint.y == 0 || m_testPoint.y == m_bufferedImage.getHeight(this) || m_testPoint.x == m_bufferedImage.getWidth(this) || isBlack(m_testPoint);\n}\n", "    protected void prepareAction(StringBuffer results) {\n\n    \tHttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\n    \tHttpServletResponse response = (HttpServletResponse) this.pageContext.getResponse();                \n\n        String url = response.encodeURL(RequestUtils.getActionMappingURL(this.action, this.pageContext));\n        \n        dataComposer = HDIVUtil.getDataComposer();        \n        dataComposer.beginRequest(HDIVUtil.getActionMappingName(url));         \t\t\n\t\t\n        String encodedURL = url;\n        \n        int questionIndex = url.indexOf(\"?\");\n        if (questionIndex >= 0) {\n        \tencodedURL = HDIVUtil.composeAction(url, questionIndex, \"UTF-8\");\n        } \n\n        results.append(\" action=\\\"\");                \n        results.append(encodedURL);\n        results.append(\"\\\"\");                \n    }    \n", "public void addChatServiceListener(ChatListener listener){\n  listeners.add(listener);\n}\n", "private void clearProjectLookup(){\n  if (projectLookup != null) {\n    Collection<? extends Project> projects=projectLookup.lookupAll(Project.class);\n    for (    Project project : projects) {\n      content.remove(project);\n    }\n  }\n}\n", "    public short getShort(int columnIndex) throws SQLException {\n        Object value;\n        \n        // sanity check.\n        checkIndex(columnIndex);\n        // make sure the cursor is on a valid row\n        checkCursor();\n        \n        setLastValueNull(false);\n        value = getCurrentRow().getColumnObject(columnIndex);\n        \n        // check for SQL NULL\n        if (value == null) {\n            setLastValueNull(true);\n            return (short)0;\n        }\n        \n        try {\n            return ((new Short(value.toString().trim())).shortValue());\n        } catch (NumberFormatException ex) {\n            throw new SQLException(MessageFormat.format(resBundle.handleGetObject(\"cachedrowsetimpl.shortfail\").toString(),\n                  new Object[] {value.toString().trim(), columnIndex}));\n        }\n    }\n", "\tprotected void addCountPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_DataProcessingListType_count_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_DataProcessingListType_count_feature\", \"_UI_DataProcessingListType_type\"),\n\t\t\t\t MzmlPackage.Literals.DATA_PROCESSING_LIST_TYPE__COUNT,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "    public int hashCode() {\n        return super.hashCode() ^ pixelInCell.hashCode();\n    }\n", "    public void setGain(int value) {\n        if (value < 0)\n            value = 0;\n        if (value > (1 << 15) - 1)\n            value = (1 << 15) - 1;\n        gain = value;\n    }\n", "   private void fillContextMenu(IMenuManager manager) {\n      manager.add(new CopyToClipboardAction());\n      manager.add(new SelectAllAction());\n      manager.add(new Separator());\n      manager.add(this.searchAction);\n      manager.add(new FindNextAction());\n      manager.add(new Separator());\n      manager.add(new EncodingAction());\n   }\n", "public void removeItem(M model){\n  removeItem(mDatas.indexOf(model));\n}\n", "\tpublic void refresh() throws Exception {\n\t\tmodelChangedEventDisabled = true;\n\t\tObject[] servers = getChildren();\n\t\tfor (int i = 0; i < servers.length;  i++) {\n//\t\t\t((ChatAppsServer) servers[i]).refresh();\n\t\t}\n\t\tmodelChangedEventDisabled = false;\n\t\temitModelChangeEvent(this);\n\t}\n", "private static byte [ ] readClass ( final InputStream is ) throws IOException { if ( is == null ) { throw new IOException ( STR_ ) ; } byte [ ] b = new byte [ is . available ( ) ] ; int len = NUM_ ; while ( BOOL_ ) { int n = is . read ( b , len , b . leng", "static int compareTo(final byte[] b1,final int offset1,final int length1,final byte[] b2,final int offset2,final int length2){\n  int count=Math.min(length1,length2);\n  int i=offset1;\n  int j=offset2;\n  while (count-- != 0) {\n    final int firstByte=0xFF & b1[i++];\n    final int secondByte=0xFF & b2[j++];\n    if (firstByte != secondByte) {\n      return firstByte - secondByte;\n    }\n  }\n  return length1 - length2;\n}\n", "\tprotected void addKeyContainerPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_VjcType_keyContainer_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_VjcType_keyContainer_feature\", \"_UI_VjcType_type\"),\n\t\t\t\t MSBPackage.eINSTANCE.getVjcType_KeyContainer(),\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "\tpublic void close() throws SQLException {\n\t\tvalid = false;\n\t\tconnectionManager.close(this);\n\t}\n", "public Period plusYears(long yearsToAdd){\n  if (yearsToAdd == 0) {\n    return this;\n  }\n  return create(Math.toIntExact(Math.addExact(years,yearsToAdd)),months,days);\n}\n", "\tpublic void setPs3Game(List<GameDTO> ps3Game) {\n\t\tthis.ps3Games = ps3Game;\n\t}\n", "private ShadowEntryHolder createShadowEntry ( IEntryCacheInfo pmaster , TypeData pType ) { IEntryHolder master = pmaster . getEntryHolder ( this ) ; int [ ] backrefIndexPos = pType . createIndexBackreferenceArray ( pmaster , master . getEntryData ( ) ) ; ", "@Override\n\tprotected void preparePaintComponent(final Request request) {\n\t\tif (!isInitialised()) {\n\t\t\tMyData data = new MyData(\"Homer\");\n\t\t\tbasic.setData(data);\n\n\t\t\tList<MyData> dataList = new ArrayList<>();\n\t\t\tdataList.add(new MyData(\"Homer\"));\n\t\t\tdataList.add(new MyData(\"Marge\"));\n\t\t\tdataList.add(new MyData(\"Bart\"));\n\t\t\trepeated.setBeanList(dataList);\n\n\t\t\tdataList = new ArrayList<>();\n\t\t\tdataList.add(new MyData(\"Greg\"));\n\t\t\tdataList.add(new MyData(\"Jeff\"));\n\t\t\tdataList.add(new MyData(\"Anthony\"));\n\t\t\tdataList.add(new MyData(\"Murray\"));\n\t\t\trepeatedLink.setData(dataList);\n\n\t\t\tList<List<MyData>> rootList = new ArrayList<>();\n\n\t\t\tList<MyData> subList = new ArrayList<>();\n\t\t\tsubList.add(new MyData(\"Ernie\"));\n\t\t\tsubList.add(new MyData(\"Bert\"));\n\t\t\trootList.add(subList);\n\n\t\t\tsubList = new ArrayList<>();\n\t\t\tsubList.add(new MyData(\"Starsky\"));\n\t\t\tsubList.add(new MyData(\"Hutch\"));\n\t\t\trootList.add(subList);\n\n\t\t\tnestedRepeaterTab.setData(rootList);\n\n\t\t\tsetInitialised(true);\n\t\t}\n\t}", "public static void checkFlagsArgument(final int requestedFlags,final int allowedFlags){\n  if ((requestedFlags & allowedFlags) != requestedFlags) {\n    throw new IllegalArgumentException(\"Requested flags 0x\" + Integer.toHexString(requestedFlags) + \", but only 0x\"+ Integer.toHexString(allowedFlags)+ \" are allowed\");\n  }\n}\n", "private Integer runScanner(String parentPath,String... fileNames){\n  this.mCurrentFolder=parentPath;\n  final Integer resultCount=super.doInBackground(null,fileNames);\n  if (resultCount != null) {\n    this.mCount+=resultCount.intValue();\n  }\n  return resultCount;\n}\n", "public void updateIndex(ChangesHolder changes, ChangesHolder parentChanges)\n   {\n      // pass lists to search manager \n      if (searchManager != null && changes != null)\n      {\n         try\n         {\n            searchManager.apply(changes);\n         }\n         catch (RepositoryException e)\n         {\n            log.error(\"Error indexing changes \" + e, e);\n         }\n         catch (IOException e)\n         {\n            log.error(\"Error indexing changes \" + e, e);\n            try\n            {\n               handler.logErrorChanges(new HashSet<String>(changes.getRemove()), new HashSet<String>(changes\n                  .getAddIds()));\n            }\n            catch (IOException ioe)\n            {\n               log.warn(\"Exception occure when errorLog writed. Error log is not complete. \" + ioe, ioe);\n            }\n         }\n      }\n      // pass lists to parent search manager \n      if (parentSearchManager != null && parentChanges != null)\n      {\n         try\n         {\n            parentSearchManager.apply(parentChanges);\n         }\n         catch (RepositoryException e)\n         {\n            log.error(\"Error indexing changes \" + e, e);\n         }\n         catch (IOException e)\n         {\n            log.error(\"Error indexing changes \" + e, e);\n            try\n            {\n               parentHandler.logErrorChanges(new HashSet<String>(parentChanges.getRemove()), new HashSet<String>(\n                  parentChanges.getAddIds()));\n            }\n            catch (IOException ioe)\n            {\n               log.warn(\"Exception occure when errorLog writed. Error log is not complete. \" + ioe, ioe);\n            }\n         }\n      }\n   }", "\tpublic void fireDataChanged() {\n\n\t\ttaxonSetsPanel.dataChanged();\n\t\t//charactersPanel.dataChanged();\n\t\tstatisticsPanel.dataChanged();\n\t}\n", "public IComment editGlobalComment ( final IComment comment , final String newComment ) { try { m_node . getComments ( ) . editGlobalCodeNodeComment ( comment , newComment ) ; } catch ( final CouldntSaveDataException exception ) { CUtilityFunctions . logEx", "@Deprecated\n\tpublic void overwriteRecordAt(long pointer, T record) throws IOException {\n\t\tlong tmpPointer = this.writeView.getCurrentPointer();\n\t\tthis.writeView.resetTo(pointer);\n\t\tthis.serializer.serialize(record, this.writeView);\n\t\tthis.writeView.resetTo(tmpPointer);\n\t}", "public static InsertIntoClause create(String streamName,String[] columns,StreamSelector streamSelector){\n  if (streamSelector == StreamSelector.RSTREAM_ISTREAM_BOTH) {\n    throw new IllegalArgumentException(\"Insert into only allows istream or rstream selection, not both\");\n  }\n  return new InsertIntoClause(streamName,Arrays.asList(columns),streamSelector);\n}\n", "    public boolean directlyOwnsNode(Node n) {\n        return nodes.containsValue(n);\n    }\n", "public static float length ( Vector2 a ) { return ( float ) Math . sqrt ( lengthSquared ( a ) ) ; }", "public static CommandResult execCommand ( List < String > commands , boolean isRoot ) { return execCommand ( commands == null ? null : commands . toArray ( new String [ ] { } ) , isRoot , BOOL_ ) ; }", "public static SoapMessageImpl toResponse(SoapMessageImpl request) throws Exception {\n  return toResponse(request,null);\n}\n", "public static boolean isStatus ( Throwable err , int status ) { return err instanceof StatusCodeException && ( ( StatusCodeException ) err ) . getStatusCode ( ) == status ; }", "public void retry ( VolleyError error ) throws VolleyError ;", "\tpublic void setComponentVector( Vector vC ){\n\t\tMapInterface myMapInterface = MapInterface.getInstance();\n\t\tmyMapInterface.setComponentVector(vC);\n\t}\n", "public void scrollToClose(){\n  if (currentInnerStatus == InnerStatus.CLOSED) {\n    return;\n  }\n  if (maxOffset == minOffset) {\n    return;\n  }\n  int dy=-getScrollY() - minOffset;\n  if (dy == 0) {\n    return;\n  }\n  currentInnerStatus=InnerStatus.SCROLLING;\n  int duration=MIN_SCROLL_DURATION + Math.abs((MAX_SCROLL_DURATION - MIN_SCROLL_DURATION) * dy / (maxOffset - minOffset));\n  scroller.startScroll(0,getScrollY(),0,dy,duration);\n  invalidate();\n}\n", "public Polygon createArcPolygon(double startAng,double angExtent){\n  Envelope env=dim.getEnvelope();\n  double xRadius=env.getWidth() / 2.0;\n  double yRadius=env.getHeight() / 2.0;\n  double centreX=env.getMinX() + xRadius;\n  double centreY=env.getMinY() + yRadius;\n  double angSize=angExtent;\n  if (angSize <= 0.0 || angSize > 2 * Math.PI)   angSize=2 * Math.PI;\n  double angInc=angSize / (nPts - 1);\n  Coordinate[] pts=new Coordinate[nPts + 2];\n  int iPt=0;\n  pts[iPt++]=coord(centreX,centreY);\n  for (int i=0; i < nPts; i++) {\n    double ang=startAng + angInc * i;\n    double x=xRadius * Math.cos(ang) + centreX;\n    double y=yRadius * Math.sin(ang) + centreY;\n    pts[iPt++]=coord(x,y);\n  }\n  pts[iPt++]=coord(centreX,centreY);\n  LinearRing ring=geomFact.createLinearRing(pts);\n  Polygon poly=geomFact.createPolygon(ring,null);\n  return (Polygon)rotate(poly);\n}\n", "public void onProgress ( int bytesWritten , int totalSize ) { }", "    public void setOctet5aData(int i) {\n        octet5aData = i;\n    }\n", "final public int evalPos(Position pos){\n  int score=pos.wMtrl - pos.bMtrl;\n  wKingAttacks=bKingAttacks=0;\n  wKingZone=BitBoard.kingAttacks[pos.getKingSq(true)];\n  wKingZone|=wKingZone << 8;\n  bKingZone=BitBoard.kingAttacks[pos.getKingSq(false)];\n  bKingZone|=bKingZone >>> 8;\n  wAttacksBB=bAttacksBB=0L;\n  long pawns=pos.pieceTypeBB[Piece.WPAWN];\n  wPawnAttacks=((pawns & BitBoard.maskBToHFiles) << 7) | ((pawns & BitBoard.maskAToGFiles) << 9);\n  pawns=pos.pieceTypeBB[Piece.BPAWN];\n  bPawnAttacks=((pawns & BitBoard.maskBToHFiles) >>> 9) | ((pawns & BitBoard.maskAToGFiles) >>> 7);\n  score+=pieceSquareEval(pos);\n  score+=pawnBonus(pos);\n  score+=tradeBonus(pos);\n  score+=castleBonus(pos);\n  score+=rookBonus(pos);\n  score+=bishopEval(pos,score);\n  score+=threatBonus(pos);\n  score+=kingSafety(pos);\n  score=endGameEval(pos,score);\n  if (!pos.whiteMove)   score=-score;\n  return score;\n}\n", "    public int getAlignIndexForResidueIndex(int raw_idx) {\n    \t    raw_idx--; //resIndex2alignedIndex starts at [0] dummy residue\n        return resIndex2alignedIndex[raw_idx];\n    }\n", "\tsynchronized public void cancel() {\n\t\tif (timer != null) {\n\t\t\ttimer.stop();\n\t\t\tanimationEnding();\n\t\t\ttimer = null;\n\t\t\tpaused = false;\n\t\t\tfireAnimationChangeEvent();\n\t\t}\n\t}\n", "void changedDescription ( ViewType view , String description ) ;", "    private void actionMaxAge() {\n        if (!isGuiFinished)\n            return;\n        String s = maxAgeHours.getText();\n        SWGFrame.getPrefsKeeper().add(\"resourceFilterMaxHours\", s);\n        updateCurrent();\n    }\n", "public boolean seek(final SeekOp op) {\n    if (SHOULD_CHECK) {\n      requireNonNull(op);\n      checkNotClosed();\n      txn.checkReady();\n    }\n\n    final int rc = LIB.mdb_cursor_get(ptrCursor, kv.pointerKey(), kv\n                                      .poi", "protected String logFailedRowChangeSQL ( StringBuffer stmt , OneRowChange oneRowChange ) { try { ArrayList < OneRowChange . ColumnSpec > keys = oneRowChange . getKeySpec ( ) ; ArrayList < OneRowChange . ColumnSpec > columns = oneRowChange . getColumnSpec ", "protected boolean isOutside(MutableCoord P1,MutableCoord P2,MutableCoord P3){\n  double minx=Math.min(P1.getX(),P2.getX()), miny=Math.min(P1.getY(),P2.getY());\n  double maxx=Math.max(P1.getX(),P2.getX()), maxy=Math.max(P1.getY(),P2.getY());\n  double x=P3.getX(), y=P3.getY();\n  if (x >= minx && x <= maxx && y >= miny && y <= maxy)   return false;\n else   return true;\n}\n", "  public void initPopup() {\n    SwingUtilities.invokeLater(new Runnable() {\n      public void run() {\n        closePopup();\n        if(contents.initiatePopup(getText()))\n          createPopup();\n      }\n    });\n  }\n", "    public void debug(Object message, Throwable t) {\n        if (isLevelEnabled(LogLevel.LOG_LEVEL_DEBUG)) {\n            log(LogLevel.LOG_LEVEL_DEBUG, message, t);\n        }\n    }\n", "private long determineFileTimestamp(final Cursor cursor){\n  cursor.moveToPrevious();\n  if (cursor.moveToNext()) {\n    final long timestamp=cursor.getLong(mColReqTimestamp);\n    cursor.moveToPrevious();\n    return timestamp;\n  }\n  return 0;\n}\n", "public void deleteImage(){\n  if (cameraBitmapPath != null) {\n    File image=new File(cameraBitmapPath);\n    if (image.exists()) {\n      image.delete();\n    }\n  }\n}\n", "public static PreparedStatement setInts(int index, PreparedStatement stmt, int... params)\n\t\t\tthrows SQLException {\n\t\treturn set(index, stmt, params, null, null);\n\t}", "public ObjectId(){\n  _time=(int)(System.currentTimeMillis() / 1000);\n  _machine=_genmachine;\n  _inc=_nextInc.getAndIncrement();\n  _new=true;\n}\n", "\tpublic void reset() {\n\n\t\tboolean wasTimerRunning = false;\n\n\t\t// Timer running?\n\t\tif (this.timer != null) {\n\n\t\t\twasTimerRunning = true;\n\n\t\t\t// Stop the timer.\n\t\t\tstop();\n\t\t}\n\n\t\t// Reset remaining timer delay to initial value.\n\t\tthis.remainingDelayMillis = this.delayMillis;\n\n\t\t// Was timer running?\n\t\tif (wasTimerRunning) {\n\n\t\t\t// Restart the timer.\n\t\t\tstart();\n\t\t}\n\t}\n", "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof LegendItemCollection)) {\n            return false;\n        }\n        LegendItemCollection that = (LegendItemCollection) obj;\n        if (!this.items.equals(that.items)) {\n            return false;\n        }\n        return true;\n    }\n", "     public String getLegajoCa83TipSeg(int row) throws DataStoreException {\n          return  getString(row,LEGAJO_CA_83_TIP_SEG);\n     }\n", "public TokenOwnerAuthzModule(String tokenIdParameter,SSOTokenManager ssoTokenManager,String... allowedActions){\n  Reject.ifNull(allowedActions);\n  Reject.ifTrue(StringUtils.isEmpty(tokenIdParameter));\n  this.ssoTokenManager=ssoTokenManager;\n  this.allowedActions=new HashSet<>(Arrays.asList(allowedActions));\n  this.tokenIdParameter=tokenIdParameter;\n}\n", "public static String formatMapOld ( String name , Map < String , String > props , String header , boolean wasModified ) { String indent = STR_ ; StringBuilder builder = new StringBuilder ( ) ; builder . append ( header ) ; builder . append ( String . form", "public void sortFromTo(int from,int to){\n  final int widthThreshold=10000;\n  if (size == 0)   return;\n  checkRangeFromTo(from,to,size);\n  char min=elements[from];\n  char max=elements[from];\n  char[] theElements=elements;\n  for (int i=from + 1; i <= to; ) {\n    char elem=theElements[i++];\n    if (elem > max)     max=elem;\n else     if (elem < min)     min=elem;\n  }\n  double N=(double)to - (double)from + 1.0;\n  double quickSortEstimate=N * Math.log(N) / 0.6931471805599453;\n  double width=(double)max - (double)min + 1.0;\n  double countSortEstimate=Math.max(width,N);\n  if (width < widthThreshold && countSortEstimate < quickSortEstimate) {\n    countSortFromTo(from,to,min,max);\n  }\n else {\n    quickSortFromTo(from,to);\n  }\n}\n", "    public void updateNode(Node node, Object context) {\n        Updatable u = this.m_updateInterface.getUpdatable(node);\n        //System.out.println(\"update: \" + u);\n        u.update(context);\n        this.m_changedSet.remove(node);\n    }\n", "    public boolean lint(String s) {\n        // return true if either the specific option is enabled, or\n        // they are all enabled without the specific one being\n        // disabled\n        return\n            isSet(XLINT_CUSTOM, s) ||\n            (isSet(XLINT) || isSet(XLINT_CUSTOM, \"all\")) &&\n                isUnset(XLINT_CUSTOM, \"-\" + s);\n    }\n", "void append(@NonNull Node<E> first, @NonNull Node<E> last) {\n    for (;;) {\n      Node<E> t = tail;\n      if (casTail(t, last)) {\n        t.lazySetNext(first);\n        if (factory == OPTIMISIC) {\n          return;\n        }\n        for (;;) {\n          first.complete();\n          if (first == last) {\n            return;\n          }\n          Node<E> next = first.getNextRelaxed();\n          if (next.value == null) {\n            first.next = null; // reduce nepotism\n          }\n          first = next;\n        }\n      }\n      Node<E> node = transferOrCombine(first, last);\n      if (node == null) {\n        first.await();\n        return;\n      } else if (node != first) {\n        last = node;\n      }\n    }\n  }", "   public void visit(IterationStatement n) {\n      n.nodeChoice.accept(this);\n   }\n", "private void removeFinishedClients ( ) { ConnectorHandler client = null ; while ( ( client = deadClients . poll ( ) ) != null ) { try { client . release ( context ) ; } catch ( Exception e ) { logger . warn ( STR_ , e ) ; } clients . remove ( client ) ; } }", "public static String updateItemName(String name){\n  if (name != null) {\n    int idx=ITEM_NAMES_OLD.indexOf(name);\n    if (idx != -1) {\n      name=ITEM_NAMES_NEW.get(idx);\n    }\n    name=ItemTools.itemNameToDisplayName(name);\n    idx=ITEM_NAMES_OLD_0_66.indexOf(name);\n    if (idx != -1) {\n      name=ITEM_NAMES_NEW_0_66.get(idx);\n    }\n  }\n  return name;\n}\n", "\tpublic void createNewMember(String userName, String password, String grpName) throws Exception {\n\t\tsecDao.createMember(userName, password);\n\t\tsecDao.addMemberToGroup(userName, grpName);\n\t}\n", "private void cancelEventLeaseDo ( long eventID , Uuid leaseID ) throws UnknownLeaseException { long now = System . currentTimeMillis ( ) ; EventReg reg = ( EventReg ) eventByID . get ( new Long ( eventID ) ) ; if ( reg == null || reg . leaseExpiration <= ", "public boolean hasWhereClause ( ) { if ( _expression == null ) return BOOL_ ; String trimmed = _expression . trim ( ) ; return ! ( trimmed . length ( ) == NUM_ || ORDER . matcher ( trimmed ) . matches ( ) || GROUP . matcher ( trimmed ) . matches ( ) ) ; }", "    public void removeTS(String name) {\n        boolean fireChanged = false;\n\n        synchronized (this) {\n            if (tsHashTable.containsKey(name.toLowerCase())) {\n                tsListModel.removeElement(name);\n                tsHashTable.remove(name.toLowerCase());\n                fireChanged = true;\n            }\n        }\n        // Outside the synchronized region.\n        if (fireChanged)\n            firePropertyChange(TS_REMOVED, name, name);\n    }\n", "public static void error ( final String message ) { if ( JQuantLib . logger != null ) { JQuantLib . logger . error ( message ) ; } else { System . err . printf ( STR_ , message ) ; } }", "public void tick(){\n  final long count=uncounted.getAndSet(0);\n  final double instantRate=count / interval;\n  if (initialized) {\n    rate+=(alpha * (instantRate - rate));\n  }\n else {\n    rate=instantRate;\n    initialized=true;\n  }\n}\n", "public static double logregularizedGammaP(final double a,final double x){\n  if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0)|| (x < 0.0)) {\n    return Double.NaN;\n  }\n  if (x == 0.0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  if (x >= a + 1) {\n    return Math.log(1.0 - regularizedGammaQ(a,x));\n  }\n  double del=1.0 / a;\n  double sum=del;\n  for (int n=1; n < Integer.MAX_VALUE; n++) {\n    del*=x / (a + n);\n    sum=sum + del;\n    if (Math.abs(del / sum) < NUM_PRECISION || sum >= Double.POSITIVE_INFINITY) {\n      break;\n    }\n  }\n  if (Double.isInfinite(sum)) {\n    return 0;\n  }\n  return -x + (a * Math.log(x)) - logGamma(a) + Math.log(sum);\n}\n", "private void initializeListeners ( ) { m_node . addListener ( m_internalViewNodeListener ) ; m_node . addGroupListener ( m_internalGroupNodeListener ) ; final Iterator < CTag > it = m_node . getTagsIterator ( ) ; while ( it . hasNext ( ) ) { it . next ( )", "public WrappedByteBuffer slice(){\n  return WrappedByteBuffer.wrap(_buf.slice());\n}\n", "public R performActionAndWaitForEvent(K eventKey, long timeout, Callback<E> action) throws InterruptedException, E {\n        final Reference<R> reference = new Reference<>();\n        events.put(eventKey, reference);\n        try {\n            synchronized (reference) {\n                action.action();\n                reference.wait(timeout);\n            }\n            return reference.eventResult;\n        }\n        finally {\n            events.remove(eventKey);\n        }\n    }", "private RDBMetadata extractDBMetadata(SQLPPMapping ppMapping, Optional<RDBMetadata> optionalDBMetadata,\n                                          OBDASpecInput specInput)\n            throws DBMetadataExtractionException {\n\n        boolean isDBMetadataProvided = optionalDBMetadata.isPresent();\n\n        /*\n         * Metadata extraction can be disabled when DBMetadata is already provided\n         */\n        if (isDBMetadataProvided && (!settings.isProvidedDBMetadataCompletionEnabled()))\n            return optionalDBMetadata.get();\n\n        try (Connection localConnection = LocalJDBCConnectionUtils.createConnection(settings)) {\n            return isDBMetadataProvided\n                    ? dbMetadataExtractor.extract(ppMapping, localConnection, optionalDBMetadata.get(),\n                    specInput.getConstraintFile())\n                    : dbMetadataExtractor.extract(ppMapping, localConnection, specInput.getConstraintFile());\n        }\n        /*\n         * Problem while creating the connection\n         */\n        catch (SQLException e) {\n            throw new DBMetadataExtractionException(e.getMessage());\n        }\n    }", "public void write(WritableByteChannel channel) throws IOException {\n        logger.debug(\"Writing> {}\", this);\n        for (Field field : fields) {\n            field.write(channel);\n        }\n    }", "private CGlobalSettings ( ) { }", "protected org.javalite.activeweb.FileItem getFile(String fieldName, List<FormItem> formItems){\n        for (FormItem formItem : formItems) {\n            if(formItem instanceof org.javalite.activeweb.FileItem && formItem.getFieldName().equals(fieldName)){\n                return (org.javalite.activeweb.FileItem)formItem;\n            }\n        }\n        return null;\n    }", "@Override\n    public PutReportDefinitionResult putReportDefinition(PutReportDefinitionRequest request) {\n        request = beforeClientExecution(request);\n        return executePutReportDefinition(request);\n    }", "public synchronized void noteUnsettledTxn ( Object tid ) { if ( operationsLogger . isLoggable ( Level . FINER ) ) { operationsLogger . entering ( TxnManagerImpl . class . getName ( ) , STR_ , new Object [ ] { tid } ) ; } unsettledtxns . add ( tid ) ; noti", "public boolean onItemLongClick(final View view, final int viewType, final int position, final T item, final PeasyViewHolder viewHolder) {\n        return true;\n    }", "Boolean isJDK11Target(Class clazz){\n  return (Boolean)jdk11AppletInfo.get(clazz.toString());\n}\n", "@SuppressWarnings(\"unchecked\") private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {\n  ObjectInputStream.GetField gf=s.readFields();\n  readOnly=gf.get(\"readOnly\",false);\n  Set<Principal> inputPrincs=(Set<Principal>)gf.get(\"principals\",null);\n  if (inputPrincs == null) {\n    throw new NullPointerException(ResourcesMgr.getString(\"invalid.null.input.s.\"));\n  }\n  try {\n    principals=Collections.synchronizedSet(new SecureSet<Principal>(this,PRINCIPAL_SET,inputPrincs));\n  }\n catch (  NullPointerException npe) {\n    principals=Collections.synchronizedSet(new SecureSet<Principal>(this,PRINCIPAL_SET));\n  }\n  this.pubCredentials=Collections.synchronizedSet(new SecureSet<Object>(this,PUB_CREDENTIAL_SET));\n  this.privCredentials=Collections.synchronizedSet(new SecureSet<Object>(this,PRIV_CREDENTIAL_SET));\n}\n", "public void replaceAll(List<T> newData){\n  clearAll();\n  if (newData == null) {\n    newData=new ArrayList<>();\n  }\n  mDatas=newData;\n  notifyItemRangeInserted(0,mDatas.size());\n}\n", "void deletedTypeInstanceComment ( TypeInstance instance , IComment comment ) ;", "public long convertIPString(String ip) throws NumberFormatException, \n    IllegalArgumentException {\n\n        StringTokenizer st = new StringTokenizer(ip,\".\");\n        if (st.countTokens() == 4) {\n            long ipLong = (Long.parseLong(st.nextToken()) ", "public static Integer asInteger(String expression, Node node)\n            throws XPathExpressionException {\n        return asInteger(expression, node, xpath());\n    }", "byte[] javacCompile(String packageName,String className,String source){\n  File dir=new File(COMPILE_DIR);\n  if (packageName != null) {\n    dir=new File(dir,packageName.replace('.','/'));\n    FileUtils.createDirectories(dir.getAbsolutePath());\n  }\n  File javaFile=new File(dir,className + \".java\");\n  File classFile=new File(dir,className + \".class\");\n  try {\n    OutputStream f=FileUtils.newOutputStream(javaFile.getAbsolutePath(),false);\n    Writer out=IOUtils.getBufferedWriter(f);\n    classFile.delete();\n    out.write(source);\n    out.close();\n    if (JAVAC_SUN != null) {\n      javacSun(javaFile);\n    }\n else {\n      javacProcess(javaFile);\n    }\n    byte[] data=new byte[(int)classFile.length()];\n    DataInputStream in=new DataInputStream(new FileInputStream(classFile));\n    in.readFully(data);\n    in.close();\n    return data;\n  }\n catch (  Exception e) {\n    throw DbException.convert(e);\n  }\n finally {\n    javaFile.delete();\n    classFile.delete();\n  }\n}\n", "\tpublic void seek(float percent) throws JavaLayerException, IOException {\n\t\tseekToTime(mp3.getLength() * percent / 100.0f);\n\t}\n", "public FindBugsWorker ( IProject project , IProgressMonitor monitor ) throws CoreException { this ( ( IResource ) project , monitor ) ; }", "void updateJournalMetrics() {\n    if (metrics == null) {\n      return;\n    }\n    int failedJournals = 0;\n    for(JournalAndStream jas : journals) {\n      if(jas.isDisabled()) {\n        failedJournals++;\n      }\n    }\n    metrics.journalsFailed.set(failedJournals);\n  }", "private static <T> List<EvolutionEngine<T>> createIslands(int islandCount,\n                                                              CandidateFactory<T> candidateFactory,\n                                                              EvolutionaryOperator<T> evolutionScheme,\n                                                              FitnessEvaluator<? super T> fitnessEvaluator,\n                                                              SelectionStrategy<? super T> selectionStrategy,\n                                                              Random rng)\n    {\n        List<EvolutionEngine<T>> islands = new ArrayList<EvolutionEngine<T>>(islandCount);\n        for (int i = 0; i < islandCount; i++)\n        {\n            GenerationalEvolutionEngine<T> island = new GenerationalEvolutionEngine<T>(candidateFactory,\n                                                                                       evolutionScheme,\n                                                                                       fitnessEvaluator,\n                                                                                       selectionStrategy,\n                                                                                       rng);\n            island.setSingleThreaded(true); // Don't need fine-grained concurrency when each island is on a separate thread.\n            islands.add(island);\n        }\n        return islands;\n    }", "public void stop ( ) { m_module . removeListener ( m_listener ) ; CGlobalProgressManager . instance ( ) . remove ( this ) ; }", "    public String formatCabinetItem(String workflowName, String attachmentId) {\n        String wfUniqueId = workflowName;\n        int pos = wfUniqueId.lastIndexOf('.');\n        if (pos >= 0) {\n            wfUniqueId = wfUniqueId.substring(pos + 1, wfUniqueId.length());\n        }\n        String item = wfUniqueId + \".\" + attachmentId;\n\n        return item;\n    }\n", "public <T>PushableLazyFutureStream<T> futureStream(LazyReact s){\n  Queue<T> q=createQueue();\n  return new PushableLazyFutureStream<T>(q,s.fromStream(q.stream()));\n}\n", "    public void removeAudioListener(AudioListener listener) {\n        listeners.removeElement(listener);\n    }\n", "private void setupTrigger() {\n\t\tString label = drpTriggerType.getSelected() + \" Trigger\";\n\n\t\tWFieldLayout layout = new WFieldLayout();\n\t\tlayout.setLabelWidth(LABEL_WIDTH);\n\n\t\tbuildControlPanel.add(layout);\n\n\t\tswitch ((TriggerType) drpTriggerType.getSelected()) {\n\t\t\tcase RadioButtonGroup:\n\n\t\t\t\ttrigger = new RadioButtonGroup();\n\n\t\t\t\tWFieldSet rbSet = new WFieldSet(\"Select an option\");\n\t\t\t\tRadioButtonGroup group = (RadioButtonGroup) trigger;\n\t\t\t\tWRadioButton rb1 = group.addRadioButton(\"A\");\n\t\t\t\tWRadioButton rb2 = group.addRadioButton(\"B\");\n\t\t\t\tWRadioButton rb3 = group.addRadioButton(\"C\");\n\t\t\t\trbSet.add(group);\n\t\t\t\trbSet.add(rb1);\n\t\t\t\trbSet.add(new WLabel(\"A\", rb1));\n\t\t\t\trbSet.add(new WText(\"\\u00a0\"));\n\t\t\t\trbSet.add(rb2);\n\t\t\t\trbSet.add(new WLabel(\"B\", rb2));\n\t\t\t\trbSet.add(new WText(\"\\u00a0\"));\n\t\t\t\trbSet.add(rb3);\n\t\t\t\trbSet.add(new WLabel(\"C\", rb3));\n\t\t\t\tlayout.addField(label, rbSet);\n\t\t\t\treturn;\n\n\t\t\tcase CheckBox:\n\t\t\t\ttrigger = new WCheckBox();\n\t\t\t\tbreak;\n\n\t\t\tcase CheckBoxSelect:\n\t\t\t\ttrigger = new WCheckBoxSelect(LOOKUP_TABLE_NAME);\n\t\t\t\tbreak;\n\n\t\t\tcase DateField:\n\t\t\t\ttrigger = new WDateField();\n\t\t\t\tbreak;\n\n\t\t\tcase Dropdown:\n\t\t\t\ttrigger = new WDropdown(new TableWithNullOption(LOOKUP_TABLE_NAME));\n\t\t\t\tbreak;\n\n\t\t\tcase EmailField:\n\t\t\t\ttrigger = new WEmailField();\n\t\t\t\tbreak;\n\n\t\t\tcase MultiSelect:\n\t\t\t\ttrigger = new WMultiSelect(LOOKUP_TABLE_NAME);\n\t\t\t\tbreak;\n\n\t\t\tcase MultiSelectPair:\n\t\t\t\ttrigger = new WMultiSelectPair(LOOKUP_TABLE_NAME);\n\t\t\t\tbreak;\n\n\t\t\tcase NumberField:\n\t\t\t\ttrigger = new WNumberField();\n\t\t\t\tbreak;\n\n\t\t\tcase PartialDateField:\n\t\t\t\ttrigger = new WPartialDateField();\n\t\t\t\tbreak;\n\n\t\t\tcase PasswordField:\n\t\t\t\ttrigger = new WPasswordField();\n\t\t\t\tbreak;\n\n\t\t\tcase PhoneNumberField:\n\t\t\t\ttrigger = new WPhoneNumberField();\n\t\t\t\tbreak;\n\n\t\t\tcase RadioButtonSelect:\n\t\t\t\ttrigger = new WRadioButtonSelect(LOOKUP_TABLE_NAME);\n\t\t\t\tbreak;\n\n\t\t\tcase SingleSelect:\n\t\t\t\ttrigger = new WSingleSelect(LOOKUP_TABLE_NAME);\n\t\t\t\tbreak;\n\n\t\t\tcase TextArea:\n\t\t\t\ttrigger = new WTextArea();\n\t\t\t\t((WTextArea) trigger).setMaxLength(1000);\n\t\t\t\tbreak;\n\n\t\t\tcase TextField:\n\t\t\t\ttrigger = new WTextField();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new SystemException(\"Trigger type not valid\");\n\t\t}\n\t\tlayout.addField(label, trigger);\n\t}", "public void removeChangeListener(ChangeListener cl){\n  m_listeners.remove(cl);\n}\n", "    public boolean onScreen(Tile tileToCheck) {\n        if (tileToCheck == null)\n            return false;\n        repositionMapIfNeeded();\n        return tileToCheck.getY() - 2 > topRow\n            && tileToCheck.getY() + 4 < bottomRow\n            && tileToCheck.getX() - 1 > leftColumn\n            && tileToCheck.getX() + 2 < rightColumn;\n    }\n", "public static Filter < ? > convertToRegex ( String expression , boolean allow ) { String toRegex = expression . replace ( STR_ , STR_ ) . replace ( STR_ , STR_ ) ; if ( allow ) { RegexFilter filter = new RegexFilter ( toRegex ) ; return filter ; } NegateR", "public static byte[] compose(Class<?> dataTypeClazz, Object dataValue, Class<?> mapGenericClassses,\n            boolean isCql3Enabled)\n    {\n        if (isCql3Enabled || (!isCql3Enabled && dataValue != null))\n        {\n            switch (getCassandraData", "@Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_page_objects_home);\n    }", "public final void putAll ( final Problems problems ) { if ( problems == this ) { throw new IllegalArgumentException ( STR_ ) ; } this . problems . addAll ( problems . problems ) ; }", "  public void stop() throws JMSException {\n    if (closed)\n      throw \n\tnew javax.jms.IllegalStateException(\"Peforming the stop operation on\" +\n\t\t\t\t\t    \" a closed Connection\");\n    if (stopped) {\n      /* No need to stop any sessions, since they are already stopped */\n      return;\n    }\n    \n    /**** Stop every session that is registered to this connection ****/\n    for (int i=0; i < sessions.size(); i++) {\n      ((JmsSession)sessions.elementAt(i)).stopSession();\n    }\n    stopped = true;\n  }\n", "\tprivate String appendOneConnection(ConnectionReader cr) {\n\t\tStringWriter sw = new StringWriter();\n\t\tappendOneConnection(cr, sw);\n\t\treturn sw.toString();\n\t}\n", "    public void enterInInputField(String text, String loc) {\n        FitniumInputFieldAPI.enterInInputField(this, text, loc);\n    }\n", "private void readResponseHeaders(State state,InnerState innerState,HttpResponse response) throws StopRequest {\n  Header header=response.getFirstHeader(\"Content-Disposition\");\n  if (header != null) {\n    innerState.mHeaderContentDisposition=header.getValue();\n  }\n  header=response.getFirstHeader(\"Content-Location\");\n  if (header != null) {\n    innerState.mHeaderContentLocation=header.getValue();\n  }\n  header=response.getFirstHeader(\"ETag\");\n  if (header != null) {\n    innerState.mHeaderETag=header.getValue();\n  }\n  String headerTransferEncoding=null;\n  header=response.getFirstHeader(\"Transfer-Encoding\");\n  if (header != null) {\n    headerTransferEncoding=header.getValue();\n  }\n  String headerContentType=null;\n  header=response.getFirstHeader(\"Content-Type\");\n  if (header != null) {\n    headerContentType=header.getValue();\n    if (!headerContentType.equals(\"application/vnd.android.obb\")) {\n      throw new StopRequest(DownloaderService.STATUS_FILE_DELIVERED_INCORRECTLY,\"file delivered with incorrect Mime type\");\n    }\n  }\n  if (headerTransferEncoding == null) {\n    header=response.getFirstHeader(\"Content-Length\");\n    if (header != null) {\n      innerState.mHeaderContentLength=header.getValue();\n      long contentLength=Long.parseLong(innerState.mHeaderContentLength);\n      if (contentLength != -1 && contentLength != mInfo.mTotalBytes) {\n        Log.e(Constants.TAG,\"Incorrect file size delivered.\");\n      }\n    }\n  }\n else {\n    if (Constants.LOGVV) {\n      Log.v(Constants.TAG,\"ignoring content-length because of xfer-encoding\");\n    }\n  }\n  if (Constants.LOGVV) {\n    Log.v(Constants.TAG,\"Content-Disposition: \" + innerState.mHeaderContentDisposition);\n    Log.v(Constants.TAG,\"Content-Length: \" + innerState.mHeaderContentLength);\n    Log.v(Constants.TAG,\"Content-Location: \" + innerState.mHeaderContentLocation);\n    Log.v(Constants.TAG,\"ETag: \" + innerState.mHeaderETag);\n    Log.v(Constants.TAG,\"Transfer-Encoding: \" + headerTransferEncoding);\n  }\n  boolean noSizeInfo=innerState.mHeaderContentLength == null && (headerTransferEncoding == null || !headerTransferEncoding.equalsIgnoreCase(\"chunked\"));\n  if (noSizeInfo) {\n    throw new StopRequest(DownloaderService.STATUS_HTTP_DATA_ERROR,\"can't know size of download, giving up\");\n  }\n}\n", "  private PropagateableList traceCircuit(ValuePropagaterList primary_inputs) {\n    return recursiveCircuitTrace(primary_inputs, new PropagateableList());\n  }\n", "private BufferedWriter createWriter(Optional<String> prefixExtension) throws IOException {\n            if (prefix.isPresent()) {\n                String suffix = getSuffix();\n                return Files.newBufferedWriter(\n                        prefixExtension.isPresent() ?\n                                Paths.get(prefix.get(), prefixExtension.get() + suffix) :\n                                Paths.get(prefix.get() + suffix),\n                        Charset.forName(\"UTF-8\")\n                );\n            }\n            return new BufferedWriter(new OutputStreamWriter(System.out, \"UTF-8\"));\n        }", "public void addVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){\n  beanContextChildSupport.addVetoableChangeListener(propertyName,in_vcl);\n}\n", "protected boolean includesRulerLine ( Position position , IDocument document ) { if ( position != null && ruler != null ) { try { int markerLine = document . getLineOfOffset ( position . getOffset ( ) ) ; int line = ruler . getLineOfLastMouseButtonActivit", "void keypointComplete() throws InternalLogException\n    {\n        if (tc.isEntryEnabled())\n            Tr.entry(tc, \"keypointComplete\", this);\n\n        _logFileHeader.keypointComplete();\n        try\n        {\n            writeFileStatus(true);\n        } catch (InternalLogException exc)\n        {\n            FFDCFilter.processException(exc, \"com.ibm.ws.recoverylog.spi.LogFileHandle.keypointComplete\", \"1117\", this);\n            if (tc.isEntryEnabled())\n                Tr.exit(tc, \"keypointComplete\", exc);\n            throw exc;\n        } catch (Throwable exc)\n        {\n            FFDCFilter.processException(exc, \"com.ibm.ws.recoverylog.spi.LogFileHandle.keypointComplete\", \"1123\", this);\n            if (tc.isEntryEnabled())\n                Tr.exit(tc, \"keypointComplete\", \"InternalLogException\");\n            throw new InternalLogException(exc);\n        }\n\n        if (tc.isEntryEnabled())\n            Tr.exit(tc, \"keypointComplete\");\n    }", "public void dispose(){\n  mListeners.clear();\n}\n", "public static boolean read(final File vocab_file) throws IOException {\n  DataInputStream vocab_stream=new DataInputStream(new BufferedInputStream(new FileInputStream(vocab_file)));\n  int size=vocab_stream.readInt();\n  LOG.info(\"Read {} entries from the vocabulary\",size);\n  clear();\n  for (int i=0; i < size; i++) {\n    int id=vocab_stream.readInt();\n    String token=vocab_stream.readUTF();\n    if (id != Math.abs(id(token))) {\n      vocab_stream.close();\n      return false;\n    }\n  }\n  vocab_stream.close();\n  return (size + 1 == idToString.size());\n}\n", "public Map relevantCycles() {\n        Map result = new HashMap();\n        //minimize();\n\n        for (SimpleCycleBasis subgraphBase : subgraphBases) {\n            SimpleCycleBasis cycleBasis = subgraphBase;\n            result.putAll(cycleBasis.relevantCycles());\n        }\n\n        return result;\n    }", "public void addField(String fieldGroup, I_CmsFormField formField, String initialValue) {\n\n        if (initialValue != null) {\n            formField.getWidget().setFormValueAsString(initialValue);\n        }\n        addField(fieldGroup, formField);\n    }", "   private int getIndex(_IndexInformation[] indexInfo,String name) throws DException{\n      for (int i = 0; i < indexInfo.length; i++) {\n         String[] columns = indexInfo[i].getColumns();\n         if(columns[0].equalsIgnoreCase(name))\n            return i;\n      }\n      return -1;\n   }\n", "\tpublic void onModuleLoad() {\n\t\tfinal Button sendButton = new Button(\"Go\");\n\n\t\tsendButton.addStyleName(\"sendButton\");\n\t\t\n\t\t// la zone qui affichera le r\u00e9sultat\n\t\tresultArea = new TextArea();\n\t\tresultArea.setVisibleLines(20);\n\t\tresultArea.setCharacterWidth(80);\n\n\n\t\tRootPanel.get(\"sendButtonContainer\").add(sendButton);\t\t\n\t\tRootPanel.get(\"result\").add(resultArea);\n\n\t\tclass MyHandler implements ClickHandler {\n\t\t\tpublic void onClick(ClickEvent event) {\n\t\t\t\tgo();\n\t\t\t}\n\t\t}\n\n\t\t// Add a handler to send the name to the server\n\t\tMyHandler handler = new MyHandler();\n\t\tsendButton.addClickHandler(handler);\n\t}\n", "    public String digest(String message) throws NoSuchAlgorithmException, EncoderException {\n        MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-256\");\n        messageDigest.update(message.getBytes());\n\n        byte[] raw = messageDigest.digest();\n        byte[] chars = new Base64().encode(raw);\n\n        return new String(chars);\n    }\n", "    protected void localProcess() {\n    \tif((action == null)||(obj1 == null)) return;\n    \t   \t\t\n    \tclassname = obj1.getObjectClassName();\n    \tLog.info(\"CFHtmlImage processing action: \"+ action + \" on class: \"+ classname);\n\n    \t// exit if not a locally processed keyword\n    \tif( (! action.equalsIgnoreCase(CLICK_AREA)) &&\n    \t\t(! action.equalsIgnoreCase(SAVEHTMLIMAGE)) &&\n    \t\t(! action.equalsIgnoreCase(VERIFYHTMLIMAGE))) return;\n\n    \t// only process here those we care about.  \n    \t// Otherwise let the superclass handle it.\n    \t// Html.IMG and Html.MAP will be supported here later as necessary\n    \tif (classname.equalsIgnoreCase(\"HTML.AREA\")) processHtmlArea();\n    \telse if(classname.equalsIgnoreCase(\"Html.IMG\")) processHtmlImage();\n    }\n", "public static String[] sha256md5Hashes(String string) throws NoSuchAlgorithmException {\n  return sha256md5Hashes(string.getBytes(StandardCharsets.UTF_8));\n}\n", "public static String convertStringToHtml(String s){\n  if (s == null) {\n    return null;\n  }\n  if (s.length() == 0) {\n    return s;\n  }\n  StringBuilder buff=new StringBuilder();\n  for (int i=0; i < s.length(); i++) {\n    char ch=s.charAt(i);\n    String token=CODE_MAP.get(ch);\n    if (token == null) {\n      if (ch < 128) {\n        buff.append(ch);\n      }\n else {\n        buff.append('&');\n        buff.append('#');\n        buff.append((int)ch);\n        buff.append(';');\n      }\n    }\n else {\n      buff.append('&');\n      buff.append(token);\n      buff.append(';');\n    }\n  }\n  return buff.toString();\n}\n", "    public boolean isServiceCollectionEnabled(String ipAddr, String svcName) {\n        return m_collectdConfig.isServiceCollectionEnabled(ipAddr, svcName);\n    }\n", "public double computeAverageInfoDistanceOfObservations ( ) { throw new RuntimeException ( STR_ ) ; }", "public String cloneVolume(String volumeName,long capacity,String volumeTypeId,String sourceVolId) throws Exception {\n  return createVolume(volumeName,capacity,volumeTypeId,sourceVolId,null);\n}\n", "public UrlValidator ( String [ ] schemes ) { this ( schemes , NUM_ ) ; }", "\tpublic String getLocalName() throws IllegalStateException {\n\t    if (localName == null) {\n\t\tthrow new IllegalStateException ();\n\t    }\n\t    return localName;\n\t}\n", "public String getLineAsString(int line) {\n\tint index = line - 1;\n\tif (lines.length <= index) return null;\n\tint max = lines[index].intValue();\n\tint min = 0;\n\tif (index != 0) min = lines[index - 1].intValue() + 1;\n\n\tif (min < max && max - 1 < lcText.length)", "public static Matrix constructWithCopy ( double [ ] [ ] A ) { int m = A . length ; int n = A [ NUM_ ] . length ; Matrix X = new Matrix ( m , n ) ; double [ ] [ ] C = X . getArray ( ) ; for ( int i = NUM_ ; i < m ; i ++ ) { if ( A [ i ] . length != n ) { t", "public static BigdataSailRepository open(final Properties props){\n  if (props.getProperty(Journal.Options.FILE) == null) {\n    throw new IllegalArgumentException();\n  }\n  final BigdataSail sail=new BigdataSail(props);\n  final BigdataSailRepository repo=new BigdataSailRepository(sail);\n  Code.wrapThrow(null);\n  return repo;\n}\n", "private void updateSharedPreferencesEntry(int notificationId,boolean remove){\n  Set<String> notificationIds=new HashSet<String>(mSharedPreferences.getStringSet(MEDIA_NOTIFICATION_IDS,new HashSet<String>()));\n  if (remove && !notificationIds.isEmpty() && notificationIds.contains(String.valueOf(notificationId))) {\n    notificationIds.remove(String.valueOf(notificationId));\n  }\n else   if (!remove) {\n    notificationIds.add(String.valueOf(notificationId));\n  }\n  SharedPreferences.Editor sharedPreferenceEditor=mSharedPreferences.edit();\n  sharedPreferenceEditor.putStringSet(MEDIA_NOTIFICATION_IDS,notificationIds);\n  sharedPreferenceEditor.apply();\n}\n", "public static SolidToast make ( Activity activity , CharSequence text , int gravity ) { return make ( activity , text , null , DURATION_SHORT , gravity ) ; }", "protected <T>LocalObjectEntry createLocalObjectEntry(final RemoteReference<T> reference,final T object){\n  final NormalObjectEntry localObject=new NormalObjectEntry();\n  localObject.object=object;\n  localObject.reference=reference;\n  return localObject;\n}\n", "public static double dot(DMatrixD1 a , DMatrixD1 b ) {\n        if( !MatrixFeatures_DDRM.isVector(a) || !MatrixFeatures_DDRM.isVector(b))\n            throw new RuntimeException(\"Both inputs must be vectors\");\n\n        return VectorVectorMult_DDRM.innerProd(a,b);\n    }", "public static < T > T switchNode ( final INaviViewNode node , final INodeTypeCallback < T > callback ) { Preconditions . checkNotNull ( node , STR_ ) ; Preconditions . checkNotNull ( callback , STR_ ) ; if ( node instanceof INaviCodeNode ) { return callba", "static FormatterStep createLazy ( String name , Throwing . Supplier < Throwing . Function < String , String > > formatterSupplier ) { Supplier < Throwing . Function < String , String > > rethrowFormatterSupplier = Errors . rethrow ( ) . wrap ( formatterSupplier ) ; Supplier < Throwing . Function < String , String > > memoized = Suppliers . memoize ( rethrowFormatterSupplier ) ; return new FileIndependent ( name , null ) ; }", "public void configure(String name) throws ReplicatorException, InterruptedException {\n  UniversalDataSource ds=find(name);\n  ds.configure();\n}", "\tpublic void removeProperty(PropertyLineWrapper line) {\n\t\tlist.remove(line);\n\t\tIterator iterator = changeListeners.iterator();\n\t\twhile (iterator.hasNext())\n\t\t\t((IPropertyListViewer) iterator.next()).removeProperty(line);\n\t}\n", "public void analyse(int analysis,String xmlFolder,String input,String output){\n  File folder=new File(xmlFolder);\n  if (!folder.exists() || !folder.canRead() || !folder.isDirectory()) {\n    throw new IllegalArgumentException(\"Cannot read from \" + xmlFolder);\n  }\n  List<File> vehicleFiles=null;\n  if (input == null) {\n    vehicleFiles=FileUtils.sampleFiles(folder,Integer.MAX_VALUE,FileUtils.getFileFilter(\".xml.gz\"));\n  }\n else {\n    File f=new File(input);\n    if (input.equalsIgnoreCase(\"null\") || !f.exists() || !f.isFile()|| !f.canRead()) {\n      vehicleFiles=FileUtils.sampleFiles(folder,Integer.MAX_VALUE,FileUtils.getFileFilter(\".xml.gz\"));\n    }\n else {\n      try {\n        vehicleFiles=DigicoreUtils.readDigicoreVehicleIds(input,xmlFolder);\n      }\n catch (      IOException e) {\n        e.printStackTrace();\n        throw new RuntimeException(\"Could not read vehicle Ids from \" + input);\n      }\n    }\n  }\nswitch (analysis) {\ncase 1:\n    runMinorActivityStartTimeAnalysis(vehicleFiles,output);\n  break;\ncase 2:\nrunActivitiesWithFacilityIdAnalysis(vehicleFiles,output);\nbreak;\ncase 3:\nrunMinorActivityDurationAnalysis(vehicleFiles,output);\nbreak;\ndefault :\nLOG.error(\"Cannot resolve '\" + analysis + \" to a valid analysis.\");\nthrow new IllegalArgumentException(\"Invalid analysis parameter.\");\n}\n}\n", "@Override\n    @SuppressWarnings(\"hiding\")\n    @Trivial\n    <T> CompletableFuture<T> newInstance(CompletableFuture<T> completableFuture, Executor managedExecutor, FutureRefExecutor futureRef) {\n        return new ManagedCompletionStage<T>(completableFuture, managedExecutor, futureRef);\n    }", "List < IComment > appendComment ( String comment ) throws CouldntSaveDataException , CouldntLoadDataException ;", "public boolean isReportingDetector ( ) { return ! isDetectorClassSubtypeOf ( TrainingDetector . class ) && ! isDetectorClassSubtypeOf ( FirstPassDetector . class ) ; }", "public static Instance findInstanceByPath( Instance rootInstance, String instancePath ) {\n\n\t\tApplication tempApplication = new Application( new ApplicationTemplate());\n\t\tif( rootInstance != null )\n\t\t\ttempApplication.getRootInstances().add( rootInstance );\n\n\t\treturn findInstanceByPath( tempApplication, instancePath );\n\t}", "void load ( ) throws CouldntLoadDataException ;", "public static JSONObject HttpPost ( String url , String bssid , JSONObject postJSON , HeaderPair ... headers ) { int port = EspProxyServerImpl . getInstance ( ) . getEspProxyServerPort ( ) ; return executeHttpRequest ( url , port , METHOD_POST , bssid , p", "public static InputStream filterUtf8ResourceStream(InputStream stream, Function<String, String> transformation) {\n\n        try {\n            byte[] streamData = CmsFileUtil.readFully(stream);\n            String dataAsString = new String(streamData, \"UTF-8\");\n            byte[] transformedData = transformation.apply(dataAsString).getBytes(\"UTF-8\");\n            return new ByteArrayInputStream(transformedData);\n        } catch (UnsupportedEncodingException e) {\n            LOG.error(e.getLocalizedMessage(), e);\n            return null;\n        } catch (IOException e) {\n            LOG.error(e.getLocalizedMessage(), e);\n            throw new RuntimeException(e);\n        }\n    }", "public static void remove(ServiceController<?> controller) {\n        try {\n            transition(controller, State.REMOVED);\n        } catch (StartException e) {\n            // This can't happen\n            throw new IllegalStateException(e);\n        }\n    }", "    private void commitText() {\n        if (!mNoInput) {\n            mWnn.onEvent(new OpenWnnEvent(OpenWnnEvent.COMMIT_COMPOSING_TEXT));\n        }\n    }\n", "public void deleteLocalCodeNodeComment ( final IComment comment ) throws CouldntDeleteException { CommentManager . get ( m_provider ) . deleteLocalCodeNodeComment ( m_codeNode , comment ) ; }", "public static Bitmap rotateImage ( Bitmap bitmap , int degree ) { Matrix matrix = new Matrix ( ) ; matrix . postRotate ( degree ) ; bitmap = Bitmap . createBitmap ( bitmap , NUM_ , NUM_ , bitmap . getWidth ( ) , bitmap . getHeight ( ) , matrix , BOOL_ ) ;", "private void resolveDependencies() throws RuntimeWarning {\n        // d684950\n        if (EJSPlatformHelper.isZOSCRA()) {\n            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n                Tr.debug(tc, \"resolveDependencies: skipped in adjunct process\");\n            return;\n        }\n\n        // F743-20281 - If an exception happened during early dependency\n        // resolution, then fail the application.\n        if (ivSingletonDependencyResolutionException != null) {\n            throw ivSingletonDependencyResolutionException;\n        }\n\n        // Beans currently on a dependency list. If A->B->C->A, then used={A}\n        // then used={A,B} then used={A,B,C} then C->A is an error because A\n        // is already in the set.\n        Set<BeanMetaData> used = new HashSet<BeanMetaData>();\n\n        // F7434950.CodRev - Create a copy of the key list since\n        // resolveBeanDependencies will modify ivSingletonDependencies.\n        for (BeanMetaData bmd : new ArrayList<BeanMetaData>(ivSingletonDependencies.keySet())) {\n            used.add(bmd);\n            resolveBeanDependencies(bmd, used);\n            used.remove(bmd);\n        }\n    }", "public SqlOperation parse ( String statement , String dbmsType ) { SqlOperationMatcher matcher = matchers . get ( dbmsType ) ; if ( matcher == null ) matcher = new MySQLOperationMatcher ( ) ; return matcher . match ( statement ) ; }", "public <E extends Exception> boolean noneMatch(Try.IntPredicate<E> filter) throws E {\r\n        return noneMatch(0, size(), filter);\r\n    }", "      public Builder addGroup(UnknownFieldSet value) {\n        if (result.group == null) {\n          result.group = new ArrayList<UnknownFieldSet>();\n        }\n        result.group.add(value);\n        return this;\n      }\n", "private static void safeRecordURL(String externalForm) {\n        try {\n            sLock.lock();\n            sURLs.add(externalForm);\n        } finally {\n            sLock.unlock();\n        }\n    }", "protected void decodeChildren(mxCodec dec,Node node,Object obj){\n  Node child=node.getFirstChild();\n  while (child != null) {\n    if (child.getNodeType() == Node.ELEMENT_NODE && !processInclude(dec,child,obj)) {\n      decodeChild(dec,child,obj);\n    }\n    child=child.getNextSibling();\n  }\n}\n", "private ArrayList getListener()\n    {\n        if (_listeners != null)\n            return _listeners;\n        synchronized (this) {\n            if (_listeners != null)\n                return _listeners;\n            _listeners = new ArrayList();\n        }\n        return _listeners;\n    }", "\tpublic Class getColumnClass(int c) {\n\t\tJLabel l = new JLabel(\"\");\n\t\treturn l.getClass();\n\t}\n", "public void addElementController(ModelPrinter p){\n  mController.addElement(p);\n}\n", "private static void copyFile ( final File directory , final String file ) throws FileNotFoundException , IOException { final InputStream inFile = CMain . class . getResourceAsStream ( STR_ + file ) ; final FileOutputStream outFile = new FileOutputStream (", "private static char[] getIndent(int indentSize, Map<Integer, char[]> indentCache) {\n        char[] indent = indentCache.get(indentSize);\n        if (indent == null) {\n            indent = new char[indentSize];\n            Arrays.fill(indent, SPACE);\n            indentCache.put(indentSize, indent);\n        }\n\n        return indent;\n    }", "Object getMaximumValue() {\n        if (requiredType == PropertyType.DATE || requiredType == PropertyType.DOUBLE || requiredType == PropertyType.LONG\n            || requiredType == PropertyType.DECIMAL) {\n            ConstraintChecker checker = this.checker;\n            if (checker == null || checker.getType() != requiredType) {\n                checker = createChecker(context, requiredType, valueConstraints);\n                this.checker = checker;\n            }\n            assert checker instanceof RangeConstraintChecker;\n            RangeConstraintChecker<?> rangeChecker = (RangeConstraintChecker<?>)checker;\n            return rangeChecker.getMaximum(); // may still be null\n        }\n        return null;\n    }", "@Override public long read(ByteBuffer buffer){\n  long value=buffer.getInt();\n  return value;\n}\n", "private Pair<Integer,Integer> indexToEdgeBijection(long index){\n  long i=(long)Math.ceil((Math.sqrt(1 + 8 * (index + 1)) - 1) / 2);\n  long diff=index + 1 - (i * (i - 1)) / 2;\n  return Pair.of((int)i,(int)diff - 1);\n}\n", "protected void obtainFindBugsMarkers ( ) { markers . clear ( ) ; if ( editor == null || ruler == null ) { return ; } IResource resource = ( IResource ) editor . getEditorInput ( ) . getAdapter ( IFile . class ) ; if ( resource == null ) { return ; } IMarker [ ] allMarkers = MarkerUtil . getMarkers ( resource , IResource . DEPTH_ZERO ) ; if ( allMarkers . length == NUM_ ) { return ; } AbstractMarkerAnnotationModel model = getModel ( ) ; IDocument document = getDocument ( ) ; for ( int i = NUM_ ; i < allMarkers . length ; i ++ ) { if ( includesRulerLine ( model . getMarkerPosition ( allMarkers [ i ] ) , document ) ) { if ( MarkerUtil . isFindBugsMarker ( allMarkers [ i ] ) ) { markers . add ( allMarkers [ i ] ) ; } } } }", "private void euroDate(String theDate) {\n\t// --- Internal variables\n\tbyte [] myBuffer = null;\n\n\t// --- Converting from string to byte array\n\tmyBuffer = theDate.getBytes();\n\n\t// --- Shift day\n\tmyBuffer[0] = myBuffer[6];\n\tmyBuffer[1] = myBuffer[7];\n\n\t// --- Shift year\n\tmyBuffer[6] = myBuffer[2];\n\tmyBuffer[7] = myBuffer[3];\n\n\t// --- Shift month\n\tmyBuffer[3] = myBuffer[4];\n\tmyBuffer[4] = myBuffer[5];\n\tmyBuffer[2] = (byte)('-');\n\tmyBuffer[5] = (byte)('-');\n}\n", "public static IsNullValue nullOnSimplePathValue ( ) { return instanceByFlagsList [ NUM_ ] [ NSP ] ; }", "public Object nextEntity(char ampersand) throws JSONException {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (;;) {\n\t\t\tchar c = next();\n\t\t\tif (Character.isLetterOrDigit(c) || c == '#') {\n\t\t\t\tsb.append(Character.toLowerCase(c));\n\t\t\t} else if (c == ';') ", "\tpublic ParameterType getType(String pathWithSlashes) {\n\t\tif (pathWithSlashes == null) return type;\n\n\t\t// divide the given path into seperate string and merge to an array\n\t\t// code stolen from PVI.createpath()\n\t\tint pos1 = 0, pos2 = 0;\n\t\tVector v = new Vector();\n\n\t\twhile (true) {\n\t\t\tpos2 = pathWithSlashes.indexOf('/', pos1);\n\t\t\tif (pos2 == -1) {\n\t\t\t\tv.addElement(pathWithSlashes.substring(pos1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tv.addElement(pathWithSlashes.substring(pos1, pos2));\n\t\t\tpos1 = pos2 + 1;\n\t\t}\n\t\tString[] path = new String[v.size()];\n\t\tv.copyInto(path);\n\n\t\treturn type.getElementType(path, 0);\n\t}\n", "    public void setLastModified(String file, long time) throws IOException {\n        final FSEntry entry = getEntry(file);\n        if (entry != null) {\n            entry.setLastModified(time);\n        } else {\n            throw new FileNotFoundException(file);\n        }\n    }\n", "    public Array getArray(String columnName) throws SQLException {\n        if(Trace.isDetailed()) Trace.traceQuote(getId(),columnName);\n        throw Factory.getUnsupportedException(); \n    }\n", "void paint(Graphics g){\n  if (vert == null || nvert <= 0) {\n    return;\n  }\n  transform();\n  if (gr == null) {\n    gr=new Color[16];\n    for (int i=0; i < 16; i++) {\n      int grey=(int)(170 * (1 - Math.pow(i / 15.0,2.3)));\n      gr[i]=new Color(grey,grey,grey);\n    }\n  }\n  int lg=0;\n  int lim=ncon;\n  int c[]=con;\n  int v[]=tvert;\n  if (lim <= 0 || nvert <= 0) {\n    return;\n  }\n  for (int i=0; i < lim; i++) {\n    int T=c[i];\n    int p1=((T >> 16) & 0xFFFF) * 3;\n    int p2=(T & 0xFFFF) * 3;\n    int grey=v[p1 + 2] + v[p2 + 2];\n    if (grey < 0) {\n      grey=0;\n    }\n    if (grey > 15) {\n      grey=15;\n    }\n    if (grey != lg) {\n      lg=grey;\n      g.setColor(gr[grey]);\n    }\n    g.drawLine(v[p1],v[p1 + 1],v[p2],v[p2 + 1]);\n  }\n}\n", "public AliasEvent ( Alias alias , Event event ) { mAlias = alias ; mEvent = event ; }", "public final int indexOf(V value){\n  if (GWT.isScript()) {\n    return jsArray.indexOf(value);\n  }\n else {\n    return javaArray.indexOf(value);\n  }\n}\n", "@Override public void clear(){\n  removeAllElements();\n}\n", "public static PostalCodesMapSharedConstants create() {\n    if (postalCodesMapConstants == null) { // NOPMD it's thread save!\n      synchronized (PostalCodesMapConstants.class) {\n        if (postalCodesMapConstants == null) {\n          postalCodesMapConstants = GWT.create(PostalCodesMapConstants.class);\n        }\n      }\n    }\n    return postalCodesMapConstants;\n  }", "    public String print(ReadablePartial partial) {\n        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n        printTo(buf, partial);\n        return buf.toString();\n    }\n", "void selectFile ( DebuggerSelectFileReply reply ) ;", "    public OutputStream getOutputStream() throws IOException {\n        if (isReference()) {\n            return ((Resource) getCheckedRef()).getOutputStream();\n        }\n        throw new UnsupportedOperationException(\n            \"Use the zip task for zip output.\");\n    }\n", "public static String getDetailContainerLocale(CmsObject cms, String contentLocale, CmsResource resource) {\n\n        boolean singleLocale = useSingleLocaleDetailContainers(cms.getRequestContext().getSiteRoot());\n        if (!singleLocale) {\n            try {\n                CmsProperty prop = cms.readPropertyObject(\n                    resource,\n                    CmsPropertyDefinition.PROPERTY_LOCALE_INDEPENDENT_DETAILS,\n                    true);\n                singleLocale = Boolean.parseBoolean(prop.getValue());\n            } catch (Exception e) {\n                LOG.warn(e.getMessage(), e);\n            }\n        }\n        return singleLocale ? LOCALE_ALL : contentLocale;\n    }", "public void stop ( ) { this . run = BOOL_ ; }", "public void paintViewportBorder ( SynthContext context , Graphics g , int x , int y , int w , int h ) { paintBorder ( context , g , x , y , w , h , null ) ; }", "protected void checkSubsetsAreGenerated ( ) { if ( subsetsForEachRegion1 == null ) { subsetsForEachRegion1 = rg . generateNRandomSets ( totalVars1 , jointVars1 , maxNumSubsets ) ; subsetsForEachRegion2 = rg . generateNRandomSets ( totalVars2 , jointVars2 , maxNumSubsets ) ; numOfSets = Math . min ( subsetsForEachRegion1 . length , subsetsForEachRegion2 . length ) ; } }", "public byte[] asn1Encode() throws IOException {\n  DerOutputStream out=new DerOutputStream();\n  out.putUnalignedBitString(bits);\n  return out.toByteArray();\n}\n", "public List<DisasterRecoveryConfigurationInner> list(String resourceGroupName, String serverName) {\n        return listWithServiceResponseAsync(resourceGroupName, serverName).toBlocking().single().body();\n    }", "    private void _init() throws Exception {\n        rubrosBDDefaultOptions.setOptions(new com.sun.webui.jsf.model.Option[]{new com.sun.webui.jsf.model.Option(\"item1\", \"Seleccione... \"), new com.sun.webui.jsf.model.Option(\"item2\", \"Elemento 2\"), new com.sun.webui.jsf.model.Option(\"item3\", \"Elemento 3\")});\n        componenteBDDefaultOptions.setOptions(new com.sun.webui.jsf.model.Option[]{new com.sun.webui.jsf.model.Option(\"item1\", \"Seleccione... \"), new com.sun.webui.jsf.model.Option(\"item2\", \"Elemento 2\"), new com.sun.webui.jsf.model.Option(\"item3\", \"Elemento 3\")});\n    }\n", "    public boolean getPressed(){\n        Object ret = get(PROPERTY_PRESSED);\n        if(ret == null){\n            return false;\n        }\n        else{\n            return (Boolean) ret;\n        }\n    }\n", "void seek ( int position ) throws IOException { mDexFile . seek ( position ) ; }", "public static CachedDateTimeZone forZone(DateTimeZone zone){\n  if (zone instanceof CachedDateTimeZone) {\n    return (CachedDateTimeZone)zone;\n  }\n  return new CachedDateTimeZone(zone);\n}\n", "public TimeStamp(){\n  start=System.currentTimeMillis();\n}", "public void commentPrint(Object line){\n  comment.append(line);\n}\n", "    public Date nextDate(final String immCode) {\n    \treturn nextDate(immCode, true, Date.NULL_DATE);\n    }\n", "private boolean trackMatchesString ( Track track , String string ) { boolean matchesName = track . getName ( ) . toLowerCase ( ) . contains ( string . toLowerCase ( ) ) ; boolean matchesArtist = track . getArtist ( ) . toLowerCase ( ) . contains ( string ", "\tpublic void set_Sch1531Line11(String _Sch1531Line11) {\n\t\tthis._Sch1531Line11 = _Sch1531Line11;\n\t}\n", "public Collection<IGameMove> validMoves(IPlayer ip,IGameState state){\n  Player player=(Player)ip;\n  ArrayList<IGameMove> valids=new ArrayList<IGameMove>();\n  if (state.isWin()) {\n    return valids;\n  }\n  if (state.isDraw()) {\n    return valids;\n  }\n  TicTacToeState gameState=(TicTacToeState)state;\n  TicTacToeBoard board=gameState.board();\n  for (int c=0; c < board.numColumns(); c++) {\n    for (int r=0; r < board.numRows(); r++) {\n      Move move=interpretMove(state,c,r,player);\n      if (move != null) {\n        valids.add(move);\n      }\n    }\n  }\n  return valids;\n}\n", "    public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {\n        \nif (\"ConsultarContaCorrente\".equals(portName)) {\n            setConsultarContaCorrenteEndpointAddress(address);\n        }\n        else \n{ // Unknown Port Name\n            throw new javax.xml.rpc.ServiceException(\" Cannot set Endpoint Address for Unknown Port\" + portName);\n        }\n    }\n", "private static boolean eq(Object x,Object y){\n  return x == y || x.equals(y);\n}\n", "  public void print(PDocument doc) {\n    PrintDialog dialog = new PrintDialog(null, SWT.BORDER);\n    PrinterData data = dialog.open();\n    if (data == null)\n      return;\n    if (data.printToFile) {\n      data.fileName = \"print.out\"; // you probably want to ask the user\n      // for a filename\n    }\n\n    Printer printer = new Printer(data);\n    GC gc = new GC(printer);\n    PBox.setParameters(gc, printer, printer.getDPI(), 100);\n    if (printer.startJob(\"DoSys Druckauftrag\")) {\n      printer.startPage();\n      doc.layout();\n      doc.draw(1);\n      printer.endJob();\n    }\n    gc.dispose();\n\n  }\n", "protected Object getFieldValueByType(String typeName, Object targetNode, Map<String, Object> map,\n                                         boolean isExtracted) throws ODataException {\n        Object fieldValue = null;\n        LOG.debug(\"Type is {}\", typeName);\n        Type type = entityDataModel.getType(typeName);\n        if (type == null) {\n            throw new ODataUnmarshallingException(\"OData type not found: \" + typeName);\n        }\n        switch (type.getMetaType()) {\n            case ENUM:\n            case PRIMITIVE:\n                if (isExtracted) {\n                    fieldValue = getAppropriateFieldValue(type.getJavaType(), String.valueOf(targetNode));\n                } else {\n                    if (map.get(targetNode) != null) {\n                        fieldValue = getAppropriateFieldValue(type.getJavaType(), String.valueOf(map.get(targetNode)));\n                    }\n                }\n                break;\n\n            case ENTITY:\n            case COMPLEX:\n                fieldValue = unmarshallEntityByName(typeName, map, targetNode);\n                break;\n\n            default:\n                LOG.warn(\"Unsupported type {}.\", type.getMetaType().name());\n                throw new UnsupportedOperationException(\"Unsupported type: \" + typeName);\n        }\n        return fieldValue;\n    }", "    public void toBack() {\n        WindowXWindow xwindow = (WindowXWindow) this.xwindow;\n        if (xwindow != null) {\n            xwindow.toBack();\n        }\n    }\n", "private void updateTitle(){\n  if (menuDone != null && menuCamera != null) {\n    if (isDisplayingFolderView()) {\n      actionBar.setTitle(folderTitle);\n      menuDone.setVisible(false);\n    }\n else {\n      if (selectedImages.size() == 0) {\n        actionBar.setTitle(imageTitle);\n        if (menuDone != null)         menuDone.setVisible(false);\n      }\n else {\n        if (mode == ImagePickerActivity.MODE_MULTIPLE) {\n          if (limit == Constants.MAX_LIMIT)           actionBar.setTitle(String.format(getString(R.string.selected),selectedImages.size()));\n else           actionBar.setTitle(String.format(getString(R.string.selected_with_limit),selectedImages.size(),limit));\n        }\n        if (menuDone != null)         menuDone.setVisible(true);\n      }\n    }\n  }\n}\n", "@After public void cleanEnv() throws IOException {\n  try {\n    FileUtils.deleteDirectory(localTempPath.toFile());\n    S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=s3DaoTestHelper.getTestS3FileTransferRequestParamsDto();\n    s3FileTransferRequestParamsDto.setS3KeyPrefix(testS3KeyPrefix);\n    s3Dao.deleteDirectory(s3FileTransferRequestParamsDto);\n  }\n catch (  Exception ex) {\n    LOGGER.warn(\"Unable to cleanup environment.\",ex);\n  }\n}\n", "private Shape decodeEdge ( int width , int height ) { path . reset ( ) ; path . moveTo ( width - NUM_ , NUM_ ) ; path . lineTo ( width - NUM_ , height - NUM_ ) ; path . lineTo ( width - NUM_ , height - NUM_ ) ; path . lineTo ( NUM_ , height - NUM_ ) ; ret", "protected void moveSelectionToLastPosition(){\n  if (selectionTable.getSelectionCount() == 0) {\n    return;\n  }\n  final int numberOfSelectedElements=selectionTable.getSelectionCount();\n  for (  final TableItem tableItem : selectionTable.getSelection()) {\n    final DLItem item=(DLItem)tableItem.getData();\n    selection.remove(item);\n    selection.add(item);\n  }\n  redrawTables();\n  final int numberOfElements=selectionTable.getItemCount();\n  selectionTable.select(numberOfElements - numberOfSelectedElements,numberOfElements - 1);\n  selectionTable.forceFocus();\n}\n", "private static List < byte [ ] > generatePossiblePasswordBytes ( String passwordString ) { final List < byte [ ] > possibilties = new ArrayList < byte [ ] > ( ) ; for ( final PasswordByteGenerator generator : PASSWORD_BYTE_GENERATORS ) { byte [ ] generated = generator . generateBytes ( passwordString ) ; boolean alreadyGenerated = BOOL_ ; for ( int i = NUM_ ; ! alreadyGenerated && i < possibilties . size ( ) ; ++ i ) { if ( Arrays . equals ( possibilties . get ( i ) , generated ) ) { alreadyGenerated = BOOL_ ; } } if ( ! alreadyGenerated ) { possibilties . add ( generated ) ; } } return possibilties ; }", "public static int slotSize ( Schema sch ) { int pos = NUM_ ; for ( String fldname : sch . fields ( ) ) pos += Page . maxSize ( sch . type ( fldname ) ) ; return pos ; }", "public PriorityAttribute ( ) { super ( PRIORITY ) ; }", "static String buildOrigin(URI uri){\n  return String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n}\n", "    public void addTab(String title, Icon icon, Component component) {\n        insertTab(title, icon, component, null, pages.size()); \n    }\n", "public static MozuUrl getOptionUrl(String attributeFQN, Integer productTypeId, String responseFields)\r\n\t{\r\n\t\tUrlFormatter formatter = new UrlFormatter(\"/api/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options/{attributeFQN}?responseFields={responseFields}\");\r\n\t\tformatter.formatUrl(\"attributeFQN\", attributeFQN);\r\n\t\tformatter.formatUrl(\"productTypeId\", productTypeId);\r\n\t\tformatter.formatUrl(\"responseFields\", responseFields);\r\n\t\treturn new MozuUrl(formatter.getResourceUrl(), MozuUrl.UrlLocation.TENANT_POD) ;\r\n\t}", "public CannotNestException ( ) { super ( ) ; }", "\tpublic void addPointcutDesignator(IPointcutDesignator pointcut) {\n\t\tif (pointcuts == null) {\n\t\t\tpointcuts = new ArrayList<IPointcutDesignator>();\n\t\t}\n\t\tpointcuts.add(pointcut);\n\t\taddInner(pointcut);\n\t}\n", "public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { request . getSession ( ) . setAttribute ( STR_ , STR_ ) ; response . sendRedirect ( STR_ ) ; return ; }", "   private void initEndPoints() {\n      Rectangle left = startPanel.getBounds();\n      Rectangle right = endPanel.getBounds();\n      workingSegment.reset(left, right);\n\n      double t0 = workingSegment.intersect(left);\n      double t1 = workingSegment.intersect(right);\n\n      vertices[0] = new Vertex(workingSegment.getPoint(t0));\n      vertices[vertices.length - 1] = new Vertex(workingSegment.getPoint(t1));\n   }\n", "protected void broadcast ( DecoderStateEvent event ) { if ( mDecoderStateListener != null ) { mDecoderStateListener . receive ( event ) ; } }", "public static Vector3 abs(Vector3 o){\n  return new Vector3(Math.abs(o.x),Math.abs(o.y),Math.abs(o.z));\n}\n", "public Composer initialVelocityY ( float velocityY ) { mInitialVelocityY = velocityY ; return this ; }", "public Membership add(Address new_member) {\n        synchronized(members) {\n            if(new_member != null && !members.contains(new_member)) {\n                members.add(new_member);\n            }\n        }\n        return this;\n    }", "public void genDotFile(Path path, String name,\n                           Configuration configuration,\n                           Attributes attributes)\n        throws IOException\n    {\n        // transitive reduction\n        Graph<String> graph = apiOnly\n                ? requiresTransitiveGraph(configuration, Set.of(name))\n                : gengraph(configuration);\n\n        DotGraphBuilder builder = new DotGraphBuilder(name, graph, attributes);\n        builder.subgraph(\"se\", \"java\", attributes.javaSubgraphColor(),\n                         DotGraphBuilder.JAVA_SE_SUBGRAPH)\n               .subgraph(\"jdk\", \"jdk\", attributes.jdkSubgraphColor(),\n                         DotGraphBuilder.JDK_SUBGRAPH)\n               .modules(graph.nodes().stream()\n                                 .map(mn -> configuration.findModule(mn).get()\n                                                .reference().descriptor()));\n        // build dot file\n        builder.build(path);\n    }", "public static void logReadTaskOutOfMemoryError(final Logger logger,\n\t\t\tfinal Task<Diff> task, final OutOfMemoryError e)\n\t{\n\n\t\tif (task != null) {\n\t\t\tlogger.logError(Level.WARN, \"Error while reading a task: \"\n\t\t\t\t\t+ task.toString(), e);\n\t\t}\n\t\telse {\n\t\t\tlogger.logError(Level.WARN,\n\t\t\t\t\t\"Error while reading an unknown task\", e);\n\t\t}\n\t}", "public boolean alphaNum(TextProvider textProvider)\n        \n    {\n        clearLastToken(textProvider);\n        clearLeadingSpaces(textProvider);\n        mark(textProvider);\n        if (m_debug)\n\t\t\tdebug(\"testing\",textProvider);\n        StringBuilder sb = new StringBuilder();\n        while (true)\n        {\n            char c = getNextChar(textProvider);\n\n            if (!Character.isLetterOrDigit(c)) break;\n            remark(textProvider);\n            sb.append(c);\n        }\n        reset(textProvider); // removes last char\n        if (sb.toString().length() == 0) return false;\n        textProvider.setLastToken(sb.toString());\n        debug(textProvider);\n        return true;\n    }", "    public PhasePlaneEllipse getNewPhasePlaneEllipse() {\n        PhasePlaneEllipse phe = new PhasePlaneEllipse( getEmittance(), getAlpha(), getBeta() );\n        phe.calcCurvePoints( this.getNumberCurvePoints() );\n        return phe;\n    }\n", "public NumberFormat getNumberFormat(char field) {\n        Character ovrField;\n        ovrField = Character.valueOf(field);\n        if (overrideMap != null && overrideMap.containsKey(ovrField)) {\n            String nsName = overrideMap.get(ovrField).toStri", "public < T > void removeRequestFinishedListener ( RequestFinishedListener < T > listener ) { synchronized ( mFinishedListeners ) { mFinishedListeners . remove ( listener ) ; } }", "public void setConnectionObjectId(short connectionObjectId)\n    {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.entry(this, tc, \"setConnectionObjectId\", Short.valueOf(connectionObjectId));\n        this.connectionObjectId = connectionObjectId;\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.exit(this, tc, \"setConnectionObjectId\");\n    }", "@Override public InetAddress addressRemote(){\n  if (_remoteAddr == null) {\n    try {\n      _remoteAddr=InetAddress.getByName(getRemoteHost());\n    }\n catch (    Exception e) {\n      log.log(Level.FINE,e.toString(),e);\n    }\n  }\n  return _remoteAddr;\n}\n", "@Override public void cleanup(){\n  page=null;\n  state=null;\n  stack=null;\n  globalDirtyRegion=null;\n  lastShape=null;\n}\n", "public static int getDimension(INDArray arr, boolean defaultRows) {\n        // FIXME: int cast\n\n        //ignore ordering for vectors\n        if (arr.isVector()) {\n            return defaultRows ? (int) arr.rows() : (int) arr.columns();\n        }\n        if (arr.ordering() == NDArrayFactory.C)\n            return defaultRows ? (int) arr.columns() : (int) arr.rows();\n        return defaultRows ? (int) arr.rows() : (int) arr.columns();\n    }", "public int[] checkSumRange(){\nsynchronized (this.checksumLock) {\n    if (this.checksumRange != null && checksumRange.length > 0) {\n      return Arrays.copyOf(this.checksumRange,this.checksumRange.length);\n    }\n    return new int[0];\n  }\n}\n", "public Observable<List<IntentsSuggestionExample>> getIntentSuggestionsAsync(UUID appId, String versionId, UUID intentId, GetIntentSuggestionsOptionalParameter getIntentSuggestionsOptionalParameter) {\n        return getIntentSuggestionsWithServiceResponseAsync(appId, versionId, intentId, getIntentSuggestionsOptionalParameter).map(new Func1<ServiceResponse<List<IntentsSuggestionExample>>, List<IntentsSuggestionExample>>() {\n            @Override\n            public List<IntentsSuggestionExample> call(ServiceResponse<List<IntentsSuggestionExample>> response) {\n                return response.body();\n            }\n        });\n    }", "public static Config fromJSON(InputStream inputStream) throws IOException {\n        ConfigSupport support = new ConfigSupport();\n        return support.fromJSON(inputStream, Config.class);\n    }", "private void writeMetadata(HashMap<String,Long> map,String outputDir,int colID,FileSystem fs,TfUtils agents,boolean fromCP) throws IOException {\n  MVImputeAgent mvagent=agents.getMVImputeAgent();\n  String mode=null;\n  Long count=null;\n  int rcdIndex=0, modeIndex=0;\n  long maxCount=Long.MIN_VALUE;\n  boolean isRecoded=(isApplicable(colID) != -1);\n  boolean isModeImputed=(mvagent.getMethod(colID) == MVMethod.GLOBAL_MODE);\n  Path pt=new Path(outputDir + \"/Recode/\" + agents.getName(colID)+ TfUtils.TXMTD_RCD_MAP_SUFFIX);\n  BufferedWriter br=null;\n  if (isRecoded)   br=new BufferedWriter(new OutputStreamWriter(fs.create(pt,true)));\n  if (agents.getNAStrings() != null)   for (  String naword : agents.getNAStrings())   map.remove(naword);\n  if (fromCP)   map=handleMVConstant(colID,agents,map);\n  if (map.size() == 0)   throw new RuntimeException(\"Can not proceed since \\\"\" + agents.getName(colID) + \"\\\" (id=\"+ colID+ \") contains only the missing values, and not a single valid value -- set imputation method to \\\"constant\\\".\");\n  List<String> newNames=new ArrayList<String>(map.keySet());\n  Collections.sort(newNames);\n  for (  String w : newNames) {\n    count=map.get(w);\n    ++rcdIndex;\n    if (br != null)     br.write(UtilFunctions.quote(w) + TfUtils.TXMTD_SEP + rcdIndex+ TfUtils.TXMTD_SEP+ count+ \"\\n\");\n    if (maxCount < count) {\n      maxCount=count;\n      mode=w;\n      modeIndex=rcdIndex;\n    }\n    map.put(w,(long)rcdIndex);\n  }\n  if (br != null)   br.close();\n  if (mode == null) {\n    mode=\"\";\n    maxCount=0;\n  }\n  if (isRecoded) {\n    pt=new Path(outputDir + \"/Recode/\" + agents.getName(colID)+ TfUtils.MODE_FILE_SUFFIX);\n    br=new BufferedWriter(new OutputStreamWriter(fs.create(pt,true)));\n    br.write(UtilFunctions.quote(mode) + \",\" + modeIndex+ \",\"+ maxCount);\n    br.close();\n    pt=new Path(outputDir + \"/Recode/\" + agents.getName(colID)+ TfUtils.TXMTD_RCD_DISTINCT_SUFFIX);\n    br=new BufferedWriter(new OutputStreamWriter(fs.create(pt,true)));\n    br.write(\"\" + map.size());\n    br.close();\n  }\n  if (isModeImputed) {\n    pt=new Path(outputDir + \"/Impute/\" + agents.getName(colID)+ TfUtils.TXMTD_MV_FILE_SUFFIX);\n    br=new BufferedWriter(new OutputStreamWriter(fs.create(pt,true)));\n    br.write(colID + \",\" + UtilFunctions.quote(mode));\n    br.close();\n  }\n}\n", "\tpublic String getText(Object object) {\n\t\tString label = ((ReadSelfAction) object).getName();\n\t\treturn label == null || label.length() == 0 ? getString(\"_UI_ReadSelfAction_type\") : //$NON-NLS-1$\n\t\t\t\tgetString(\"_UI_ReadSelfAction_type\") + \" \" + label; //$NON-NLS-1$ //$NON-NLS-2$\n\t}\n", "public ASRPDirectory(String path){\n  dir=new File(path);\n  if (dir.exists()) {\n    try {\n      initialize(dir.getPath(),dir.getName(),\"01\");\n    }\n catch (    IOException ioe) {\n      Debug.error(ioe.getMessage());\n      ioe.printStackTrace();\n      return;\n    }\n  }\n else {\n    Debug.error(\"ASRPDirectory (\" + path + \") doesn't exist\");\n  }\n}\n", "public static IfNotExistsFunction<S> if_not_exists(String path,\n            String defaultValue) {\n        return if_not_exists(new PathOperand(path), new LiteralOperand(\n                defaultValue));\n    }", "    public ProxyPlugin getPlugin(String name) {\n        ProxyPlugin plugin = null;\n        Iterator it = _plugins.iterator();\n        while (it.hasNext()) {\n            plugin = (ProxyPlugin) it.next();\n            if (plugin.getPluginName().equals(name))\n                return plugin;\n        }\n        return null;\n    }\n", "private static ValueAnimator loadAnimator(Context context, AttributeSet attrs, ValueAnimator anim)\n            throws NotFoundException {\n\n        TypedArray a =\n                context.obtainStyledAttributes(attrs, /*com.android.internal.R.styleable.*/Animator);\n\n        long duration = a.getInt(/*com.android.internal.R.styleable.*/Animator_duration, 0);\n\n        long startDelay = a.getInt(/*com.android.internal.R.styleable.*/Animator_startOffset, 0);\n\n        int valueType = a.getInt(/*com.android.internal.R.styleable.*/Animator_valueType,\n                VALUE_TYPE_FLOAT);\n\n        if (anim == null) {\n            anim = new ValueAnimator();\n        }\n        //TypeEvaluator evaluator = null;\n\n        int valueFromIndex = /*com.android.internal.R.styleable.*/Animator_valueFrom;\n        int valueToIndex = /*com.android.internal.R.styleable.*/Animator_valueTo;\n\n        boolean getFloats = (valueType == VALUE_TYPE_FLOAT);\n\n        TypedValue tvFrom = a.peekValue(valueFromIndex);\n        boolean hasFrom = (tvFrom != null);\n        int fromType = hasFrom ? tvFrom.type : 0;\n        TypedValue tvTo = a.peekValue(valueToIndex);\n        boolean hasTo = (tvTo != null);\n        int toType = hasTo ? tvTo.type : 0;\n\n        if ((hasFrom && (fromType >= TypedValue.TYPE_FIRST_COLOR_INT) &&\n                (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) ||\n            (hasTo && (toType >= TypedValue.TYPE_FIRST_COLOR_INT) &&\n                (toType <= TypedValue.TYPE_LAST_COLOR_INT))) {\n            // special case for colors: ignore valueType and get ints\n            getFloats = false;\n            anim.setEvaluator(new ArgbEvaluator());\n        }\n\n        if (getFloats) {\n            float valueFrom;\n            float valueTo;\n            if (hasFrom) {\n                if (fromType == TypedValue.TYPE_DIMENSION) {\n                    valueFrom = a.getDimension(valueFromIndex, 0f);\n                } else {\n                    valueFrom = a.getFloat(valueFromIndex, 0f);\n                }\n                if (hasTo) {\n                    if (toType == TypedValue.TYPE_DIMENSION) {\n                        valueTo = a.getDimension(valueToIndex, 0f);\n                    } else {\n                        valueTo = a.getFloat(valueToIndex, 0f);\n                    }\n                    anim.setFloatValues(valueFrom, valueTo);\n                } else {\n                    anim.setFloatValues(valueFrom);\n                }\n            } else {\n                if (toType == TypedValue.TYPE_DIMENSION) {\n                    valueTo = a.getDimension(valueToIndex, 0f);\n                } else {\n                    valueTo = a.getFloat(valueToIndex, 0f);\n                }\n                anim.setFloatValues(valueTo);\n            }\n        } else {\n            int valueFrom;\n            int valueTo;\n            if (hasFrom) {\n                if (fromType == TypedValue.TYPE_DIMENSION) {\n                    valueFrom = (int) a.getDimension(valueFromIndex, 0f);\n                } else if ((fromType >= TypedValue.TYPE_FIRST_COLOR_INT) &&\n                        (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) {\n                    valueFrom = a.getColor(valueFromIndex, 0);\n                } else {\n                    valueFrom = a.getInt(valueFromIndex, 0);\n                }\n                if (hasTo) {\n                    if (toType == TypedValue.TYPE_DIMENSION) {\n                        valueTo = (int) a.getDimension(valueToIndex, 0f);\n                    } else if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) &&\n                            (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {\n                        valueTo = a.getColor(valueToIndex, 0);\n                    } else {\n                        valueTo = a.getInt(valueToIndex, 0);\n                    }\n                    anim.setIntValues(valueFrom, valueTo);\n                } else {\n                    anim.setIntValues(valueFrom);\n                }\n            } else {\n                if (hasTo) {\n                    if (toType == TypedValue.TYPE_DIMENSION) {\n                        valueTo = (int) a.getDimension(valueToIndex, 0f);\n                    } else if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) &&\n                        (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {\n                        valueTo = a.getColor(valueToIndex, 0);\n                    } else {\n                        valueTo = a.getInt(valueToIndex, 0);\n                    }\n                    anim.setIntValues(valueTo);\n                }\n            }\n        }\n\n        anim.setDuration(duration);\n        anim.setStartDelay(startDelay);\n\n        if (a.hasValue(/*com.android.internal.R.styleable.*/Animator_repeatCount)) {\n            anim.setRepeatCount(\n                    a.getInt(/*com.android.internal.R.styleable.*/Animator_repeatCount, 0));\n        }\n        if (a.hasValue(/*com.android.internal.R.styleable.*/Animator_repeatMode)) {\n            anim.setRepeatMode(\n                    a.getInt(/*com.android.internal.R.styleable.*/Animator_repeatMode,\n                            ValueAnimator.RESTART));\n        }\n        //if (evaluator != null) {\n        //    anim.setEvaluator(evaluator);\n        //}\n\n        final int resID =\n                a.getResourceId(/*com.android.internal.R.styleable.*/Animator_interpolator, 0);\n        if (resID > 0) {\n            anim.setInterpolator(AnimationUtils.loadInterpolator(context, resID));\n        }\n        a.recycle();\n\n        return anim;\n    }", "\tpublic void setStaticData(ChannelStaticData sd) {\n\t\tif(sd.getParameter(\"EcoleChoisie\") != null && !sd.getParameter(\"EcoleChoisie\").equals(\"\")){\n\t\t\tthis.ecoleIdLoggued = sd.getParameter(\"EcoleChoisie\");\n\t\t}else{\n\t\t\tif(sd.getParameter(\"EcoleChoisieLdap\")!= null && !sd.getParameter(\"EcoleChoisieLdap\").equals(\"\")){\n\t\t\t\tthis.ecoleIdLoggued = (String) sd.getPerson().getAttribute(sd.getParameter(\"EcoleChoisieLdap\"));\n\t\t\t}else{\n\t\t\t\tthis.ecoleIdLoggued = (String) sd.getPerson().getAttribute(\"l\");\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\tthis.staticData = sd;\n\n\t}\n", "public DeleteRequestBuilder<T,ID> delete(ID... ids)\n    {\n        return new DeleteRequestBuilder<T, ID>(version,type,entityName,ids);\n    }", "public Hit withExprs(java.util.Map<String, String> exprs) {\n        setExprs(exprs);\n        return this;\n    }", "private E unlinkFirst ( ) { Node < E > f = first ; if ( f == null ) return null ; Node < E > n = f . next ; E item = f . item ; f . item = null ; f . next = f ; first = n ; if ( n == null ) last = null ; else n . prev = null ; -- count ; notFull . signal ", "private void adjustNameAndPosition(Node node,int deltaX,int deltaY){\n  String originalName=node.getName();\n  String uniqueName=nextUniqueName(originalName);\n  if (!uniqueName.equals(originalName)) {\n    node.setName(uniqueName);\n    node.setCenterX(node.getCenterX() + deltaX);\n    node.setCenterY(node.getCenterY() + deltaY);\n  }\n}\n", "\tpublic boolean validatePassword(String inputPassword, String password) {\n\t\tif (inputPassword.equals(password))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n", "public static BBox parseTwoPoints(String objectAsString) {\n        String[] splittedObject = objectAsString.split(\",\");\n\n        if (splittedObject.length != 4)\n            throw new IllegalArgumentException(\"BBox should have 4 parts but was \" + objectAsString);\n\n        double minLat = Double.parseDouble(splittedObject[0]);\n        double minLon = Double.parseDouble(splittedObject[1]);\n\n        double maxLat = Double.parseDouble(splittedObject[2]);\n        double maxLon = Double.parseDouble(splittedObject[3]);\n\n        if (minLat > maxLat) {\n            double tmp = minLat;\n            minLat = maxLat;\n            maxLat = tmp;\n        }\n\n        if (minLon > maxLon) {\n            double tmp = minLon;\n            minLon = maxLon;\n            maxLon = tmp;\n        }\n\n        return new BBox(minLon, maxLon, minLat, maxLat);\n    }", "\tprotected T caseOptionDecl(SimpleNode simpleNode, T param) throws Exception {\n\t\treturn caseAll(simpleNode, param);\n\t}\n", "public QueryHits evaluate(final Query query, final Sort sort, final long resultFetchHint) throws IOException\n   {\n      return SecurityHelper.doPrivilegedIOExceptionAction(new PrivilegedExceptionAction<QueryHits>()\n      {\n         public QueryHits run() throws Exception\n         {\n            Query localQuery = query.rewrite(reader);\n            QueryHits hits = null;\n            if (localQuery instanceof JcrQuery)\n            {\n               hits = ((JcrQuery)localQuery).execute(JcrIndexSearcher.this, session, sort);\n            }\n            if (hits == null)\n            {\n               if (sort == null || sort.getSort().length == 0)\n               {\n                  hits = new LuceneQueryHits(reader, JcrIndexSearcher.this, query);\n               }\n               else\n               {\n                  hits = new SortedLuceneQueryHits(reader, JcrIndexSearcher.this, localQuery, sort, resultFetchHint);\n               }\n            }\n            return hits;\n         }\n      });\n   }", "public ProjectTraceProvider ( final INaviProject project ) { this . project = project ; }", "private void captureView ( View view , OutputStream os ) { int w = view . getWidth ( ) ; int h = view . getHeight ( ) ; if ( w <= NUM_ || h <= NUM_ ) { throw new RuntimeException ( STR_ ) ; } Bitmap bitmap = Bitmap . createBitmap ( view . getWidth ( ) , view . getHeight ( ) , Bitmap . Config . ARGB_8888 ) ; Canvas c = new Canvas ( bitmap ) ; view . draw ( c ) ; if ( width != null && height != null && ( width != w || height != h ) ) { bitmap = Bitmap . createScaledBitmap ( bitmap , width , height , BOOL_ ) ; } if ( bitmap == null ) { throw new RuntimeException ( STR_ ) ; } bitmap . compress ( format , ( int ) ( NUM_ * quality ) , os ) ; }", "void removeListener ( IDatabaseListener listener ) ;", "private static final String [ ] collectionToStrings ( Collection c ) { return c == null ? null : ( String [ ] ) c . toArray ( new String [ c . size ( ) ] ) ; }", "public synchronized int setBytes(long pos,\n                                     byte[] bytes) throws SQLException {\n\n        if (!isInLimits(Long.MAX_VALUE, pos - 1, bytes.length)) {\n            throw Util.outOfRangeArgument();\n        }\n\n        try {\n            return blob.setBytes(session, pos - 1, bytes);\n        } catch (HsqlException e) {\n            throw Util.sqlException(e);\n        }\n    }", "void onNavigationDrawerItemSelected ( int position ) ;", "void bindIfNotBound ( String modName , ModulePointer modPointer ) { if ( context . get ( modName ) == null ) context . put ( modName , modPointer ) ; }", "public static List<String> buildList(String... args) {\n        List<String> newList = new ArrayList<String>();\n        Collections.addAll(newList, args);\n        return newList;\n    }", "\tpublic void addPropertyChangeListener(PropertyChangeListener listener) {\n\t\tif (listener == null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (iListeners == null) {\n\t\t\t\tiListeners = new ArrayList();\n\t\t\t}\n\t\t\tiListeners.add(listener);\n\t\t}\n\t}\n", "void putFirst ( E e ) throws InterruptedException ;", "private void scrollToChild ( View child ) { child . getDrawingRect ( mTempRect ) ; offsetDescendantRectToMyCoords ( child , mTempRect ) ; int scrollDelta = computeScrollDeltaToGetChildRectOnScreen ( mTempRect ) ; if ( scrollDelta != NUM_ ) { scrollBy ( NU", "public void cleanStop ( ) { keepAlive = BOOL_ ; interrupt ( ) ; }", "    public boolean updatePerson(Person oldPerson, Person newInfo) {\n\treturn this.updatePerson(\"unknown\",oldPerson.getUsername(),newInfo);\n    }\n", "public void dispose() {\n\t\tfor (int layer = 0; layer < 4; layer++) {\n\t\t\tGraphics2D graphics = layeredGraphics[layer];\n\t\t\tif (graphics != null) {\n\t\t\t\tgraphics.dispose();\n\t\t\t\tlayeredGraphics[layer] = null;\n\t\t\t}\n\t\t\tBufferedImage image = layeredImage[layer];\n\t\t\tif (image != null) {\n\t\t\t\timage.flush();\n\t\t\t\tlayeredImage[layer] = null;\n\t\t\t}\n\t\t}\n\t}", "public PartialLoadException ( final CPartialLoadException exception ) { super ( exception ) ; m_module = exception . getModule ( ) . getConfiguration ( ) . getName ( ) ; }", "@Override\n    public void start() {\n        super.start();\n        // If disabled we do not create a publisher to graphite but error counts are still collected.\n        if(enabled) {\n            metricPublishing.start(new GraphiteConfigImpl(host, port, pollintervalseconds, queuesize, sendasrate));\n        }\n        this.startUpMetric = factory.createStartUpMetric(metricObjects, subsystem, new Timer());\n        startUpMetric.start();\n    }", "public OperationStatus getStatus() {\n    if (status == null) {\n      try {\n        get();\n      } catch (InterruptedException e) {\n        status = new OperationStatus(false, \"Interrupted\", StatusCode.INTERRUPTED);\n      } catch (ExecutionException e) {\n ", "public static Document readXml(InputStream is) throws SAXException, IOException, ParserConfigurationException {\n  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();\n  dbf.setValidating(false);\n  dbf.setIgnoringComments(false);\n  dbf.setIgnoringElementContentWhitespace(true);\n  dbf.setNamespaceAware(true);\n  DocumentBuilder db=null;\n  db=dbf.newDocumentBuilder();\n  db.setEntityResolver(new NullResolver());\n  return db.parse(is);\n}\n", "public void throwException() throws BufferUnderflowException,\n            BufferOverflowException, UnmappableCharacterException,\n            MalformedInputException, CharacterCodingException {\n        switch (this.type) {\n            case TYPE_UNDERFLOW:\n                throw new BufferUnderflowException();\n            case TYPE_OVERFLOW:\n                throw new BufferOverflowException();\n            case TYPE_UNMAPPABLE_CHAR:\n                throw new UnmappableCharacterException(this.length);\n            case TYPE_MALFORMED_INPUT:\n                throw new MalformedInputException(this.length);\n            default:\n                throw new CharacterCodingException();\n        }\n    }", "public WireFeed build(final Document document) throws IllegalArgumentException, FeedException {\n        final WireFeedParser parser = getFeedParsers().getParserFor(document);\n        if (parser == null) {\n            throw new IllegalArgumentException(\"Invalid document\");\n        }\n        return parser.parse(document, validate, locale);\n    }", "\tpublic String get_Sch153Line68() {\n\t\treturn this._Sch153Line68;\n\t}\n", "public String procedure ( String procedureSpec , String command ) throws Exception { return executeExtension ( ResourceType . EXTENSION , procedureSpec , STR_ , command , null ) ; }", "public void patchConfig ( Context context , String resourceName , JsonValue patch ) throws UpdateException { try { PatchRequest request = Requests . newPatchRequest ( resourceName ) ; for ( PatchOperation op : PatchOperation . valueOfList ( patch ) ) { re", "    public void close() {\n        m_section.close();\n    }\n", "public CNativeCallgraphsViewsModel ( final INaviModule module ) { Preconditions . checkNotNull ( module , STR_ ) ; m_module = module ; module . addListener ( m_moduleListener ) ; initListeners ( ) ; }", "\tprotected boolean isStartRowOrAbove() {\n\t\treturn mCurrentRow >= getFilter().getListStart();\n\t}\n", "public Expression generateMsgGroupVariable(MsgFallbackGroupNode node) {\n    String tmpVarName = translationContext.nameGenerator().generateName(\"msg_s\");\n    Expression msg;\n    if (node.numChildren() == 1) {\n      translationContext\n          .soyToJsVariableMappings()\n          .setIsPrimaryMsgInUse(node, Expression.LITERAL_TRUE);\n      msg = generateSingleMsgVariable(node.getChild(0), tmpVarName);\n    } else { // has fallbackmsg children\n      msg = generateMsgGroupVariable(node, tmpVarName);\n    }\n    // handle escaping\n    for (SoyPrintDirective printDirective : node.getEscapingDirectives()) {\n      msg =\n          SoyJsPluginUtils.applyDirective(\n              msg,\n              (SoyJsSrcPrintDirective) printDirective,\n              /* args= */ ImmutableList.of(),\n              node.getSourceLocation(),\n              errorReporter);\n    }\n    return msg;\n  }", "    public void setPatternStroke(final PdfPatternPainter p, final BaseColor color) {\n        if (ExtendedColor.getType(color) == ExtendedColor.TYPE_SEPARATION)\n            setPatternStroke(p, color, ((SpotColor)color).getTint());\n        else\n            setPatternStroke(p, color, 0);\n    }\n", "    public void addColumn(@NotNull Column column) {\n        columns.add(column);\n    }\n", "@Override public void run(){\n  try {\n    LOGGER.log(Level.FINEST,\"Start Mark-And-Sweep with {0} entries\",incomingMessages.size());\n    sweep();\n  }\n catch (  Throwable t) {\n    LOGGER.log(Level.WARNING,\"Exception in Mark-and-Sweep algorithm\",t);\n  }\n finally {\n    try {\n      schedule();\n    }\n catch (    Throwable t) {\n      LOGGER.log(Level.WARNING,\"Exception while scheduling Mark-and-Sweep algorithm\",t);\n    }\n  }\n}\n", "public boolean contains(Object o) {\n    if (o instanceof String) {\n      return set.contains(((String) o).toLowerCase());\n    } else {\n      return set.contains(o);\n    }\n  }", "private Job<T> grabJob(){\n  while (!queue.isEmpty()) {\n    if (!limit.tryAcquire()) {\n      return null;\n    }\n    final Job<T> job=queue.poll();\n    if (job != null) {\n      return job;\n    }\n    limit.release();\n  }\n  return null;\n}\n", "public void addBiomeType(BiomeDictionary.Type type){\n  ArrayList<BiomeGenBase> entryList=new ArrayList<BiomeGenBase>();\n  entryList.addAll(Arrays.asList(BiomeDictionary.getBiomesForType(type)));\n  entryList.remove(BiomeGenBase.hell);\n  entryList.remove(Bi", "void collectIncludedFiles ( Set < VirtualFile > includedVirtualFiles ) ;", "public boolean verifySignature(byte[] signature){\n  contentDigest.doFinal(mDash,mDash.length - hLen - sLen);\n  try {\n    byte[] b=cipher.processBlock(signature,0,signature.length);\n    System.arraycopy(b,0,block,block.length - b.length,b.length);\n  }\n catch (  Exception e) {\n    return false;\n  }\n  if (block[block.length - 1] != trailer) {\n    clearBlock(block);\n    return false;\n  }\n  byte[] dbMask=maskGeneratorFunction1(block,block.length - hLen - 1,hLen,block.length - hLen - 1);\n  for (int i=0; i != dbMask.length; i++) {\n    block[i]^=dbMask[i];\n  }\n  block[0]&=(0xff >> ((block.length * 8) - emBits));\n  for (int i=0; i != block.length - hLen - sLen- 2; i++) {\n    if (block[i] != 0) {\n      clearBlock(block);\n      return false;\n    }\n  }\n  if (block[block.length - hLen - sLen- 2] != 0x01) {\n    clearBlock(block);\n    return false;\n  }\n  System.arraycopy(block,block.length - sLen - hLen- 1,mDash,mDash.length - sLen,sLen);\n  contentDigest.update(mDash,0,mDash.length);\n  contentDigest.doFinal(mDash,mDash.length - hLen);\n  for (int i=block.length - hLen - 1, j=mDash.length - hLen; j != mDash.length; i++, j++) {\n    if ((block[i] ^ mDash[j]) != 0) {\n      clearBlock(mDash);\n      clearBlock(block);\n      return false;\n    }\n  }\n  clearBlock(mDash);\n  clearBlock(block);\n  return true;\n}\n", "private boolean checkIndependence(LineRenderer3D r1,LineRenderer3D r2){\n  boolean b0=r1.equals(r2);\n  r1.setBaseLinesVisible(!r1.getBaseLinesVisible());\n  if (r1.equals(r2)) {\n    return false;\n  }\n  r2.setBaseLinesVisible(r1.getBaseLinesVisible());\n  if (!r1.equals(r2)) {\n    return false;\n  }\n  r1.setSeriesLinesVisible(1,true);\n  if (r1.equals(r2)) {\n    return false;\n  }\n  r2.setSeriesLinesVisible(1,true);\n  if (!r1.equals(r2)) {\n    return false;\n  }\n  r1.setLinesVisible(false);\n  if (r1.equals(r2)) {\n    return false;\n  }\n  r2.setLinesVisible(false);\n  if (!r1.equals(r2)) {\n    return false;\n  }\n  r1.setBaseShapesVisible(!r1.getBaseShapesVisible());\n  if (r1.equals(r2)) {\n    return false;\n  }\n  r2.setBaseShapesVisible(r1.getBaseShapesVisible());\n  if (!r1.equals(r2)) {\n    return false;\n  }\n  r1.setSeriesShapesVisible(1,true);\n  if (r1.equals(r2)) {\n    return false;\n  }\n  r2.setSeriesShapesVisible(1,true);\n  if (!r1.equals(r2)) {\n    return false;\n  }\n  r1.setShapesVisible(false);\n  if (r1.equals(r2)) {\n    return false;\n  }\n  r2.setShapesVisible(false);\n  if (!r1.equals(r2)) {\n    return false;\n  }\n  boolean flag=true;\n  Boolean existing=r1.getShapesFilled();\n  if (existing != null) {\n    flag=!existing.booleanValue();\n  }\n  r1.setShapesFilled(flag);\n  boolean b5=!r1.equals(r2);\n  r2.setShapesFilled(flag);\n  boolean b6=r1.equals(r2);\n  r1.setShapesFilled(false);\n  r2.setShapesFilled(false);\n  r1.setSeriesShapesFilled(0,false);\n  r2.setSeriesShapesFilled(0,true);\n  boolean b7=!r1.equals(r2);\n  r2.setSeriesShapesFilled(0,false);\n  boolean b8=(r1.equals(r2));\n  r1.setBaseShapesFilled(false);\n  r2.setBaseShapesFilled(true);\n  boolean b9=!r1.equals(r2);\n  r2.setBaseShapesFilled(false);\n  boolean b10=(r1.equals(r2));\n  return b0 && b5 && b6&& b7&& b8&& b9&& b10;\n}\n", "public static String parse ( CommandLineParser . Parameter [ ] params ) throws IOException { String name = null ; for ( int i = NUM_ ; i < params . length ; i ++ ) { if ( params [ i ] . getName ( ) . equalsIgnoreCase ( SPACE_NAME_PARAMETER ) ) { for ( int", "public X400Address(DerValue derValue) throws IOException {\n  nameValue=derValue.toByteArray();\n}\n", "public void reset() {\n        totalTargetsLabel.setVisible(false);\n        populateGroupsLegendByTargetCounts(Collections.emptyList());\n        if (groupsLegend.getComponentCount() > MAX_GROUPS_TO_BE_DISPLAYED) {\n            groupsLegend.getComponent(MAX_GROUPS_TO_BE_DISPLAYED).setVisible(false);\n        }\n    }", "private void growIfNeeded(){\n  if (size == values.length) {\n    int[] newv=new int[size * 3 / 2 + 10];\n    System.arraycopy(values,0,newv,0,size);\n    values=newv;\n  }\n}\n", "public boolean contains(String conceptName) {\n\t\tif (indexOf(conceptName) == -1)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn true;\n\t}", "public CompoundPainter(){\n  this((Painter<T>[])null);\n}", "private void loop(){\n  final int frameLength=(int)(1000.0 / stendhal.FPS_LIMIT);\n  int fps=0;\n  long refreshTime=System.currentTimeMillis();\n  long lastFpsTime=refreshTime;\n  while (running) {\n    try {\n      fps++;\n      final long now=System.currentTime", "    public void setTag(String name, String value) {\n        if (tags == null) {\n            tags = new Properties();\n        }\n        tags.setProperty(name, value);\n    }\n", "void onPrepared ( MediaPlayer mp ) ;", "public static ArrayList<Map.Entry<String,String>> split(final String text){\n  ArrayList<Map.Entry<String,String>> a=new ArrayList<>(1 + text.length() / 4);\n  final StringBuilder o=new StringBuilder();\n  final StringBuilder l=new StringBuilder();\n  for (int i=0; i < text.length(); i++) {\n    final char c=text.charAt(i);\n    if (Character.isLetterOrDigit(c)) {\n      o.append(c);\n      l.append(Character.toLowerCase(c));\n      continue;\n    }\n    if (o.length() > 0) {\n      a.add(new AbstractMap.SimpleEntry<String,String>(l.toString(),o.toString()));\n      o.setLength(0);\n      l.setLength(0);\n    }\n  }\n  if (o.length() > 0) {\n    a.add(new AbstractMap.SimpleEntry<String,String>(l.toString(),o.toString()));\n    o.setLength(0);\n    l.setLength(0);\n  }\n  return a;\n}\n", "public Select<T> include(String... columns){\n  Collections.addAll(mIncludedColumns,columns);\n  return this;\n}\n", "protected synchronized void stopLoading(){\n  if (loaderThread != null) {\n    loaderThread.interrupt();\n  }\n else {\n    setLoadAbortRequest();\n  }\n}\n", "@Override public void clear(){\n  if (elementCount > 0) {\n    elementCount=0;\n    Arrays.fill(elementData,null);\n    modCount++;\n  }\n}\n", "    public boolean entityDeclared(String entityName) {\n        return (getEntityDecl(entityName) != null);\n       // if (m_document.getDoctype() != null) {\n       //     //checks the DocumentType instead of the completion info\n       //     //this should be ok.\n       //     NamedNodeMap entities = m_document.getDoctype().getEntities();\n       //     return (entities.getNamedItem(entityName) != null);\n       // } else {\n       //     return false;\n       // }\n    }//}}}\n    \n    //{{{ getElementDecl()\n", "public static int [ ] findBitErrors ( BitSet msg ) { int [ ] retVal = null ; int checksum = getTransmittedChecksum ( msg ) ; checksum ^= NUM_ ; for ( int i = msg . nextSetBit ( NUM_ ) ; i >= NUM_ && i < NUM_ ; i = msg . nextSetBit ( i + NUM_ ) ) { checksu", "@Override\n    public double getBondOrderSum(IAtom atom) {\n        double count = 0;\n        for (int i = 0; i < bondCount; i++) {\n            if (bonds[i].contains(atom)) {\n                if (bonds[i].getOrder() == IBond.Order.SINGLE) {\n                    count += 1;\n                } else if (bonds[i].getOrder() == IBond.Order.DOUBLE) {\n                    count += 2;\n                } else if (bonds[i].getOrder() == IBond.Order.TRIPLE) {\n                    count += 3;\n                } else if (bonds[i].getOrder() == IBond.Order.QUADRUPLE) {\n                    count += 4;\n                }\n            }\n        }\n        return count;\n    }", "public void requestShutdown ( ) { m_Shutdown = BOOL_ ; waitWhileFinish ( ) ; }", "public static void doFakeEntityExplosion(EntityPlayer entityplayer){\n  World world=entityplayer.worldObj;\n  world.spawnParticle(\"hugeexplosion\",entityplayer.posX,entityplayer.posY,entityplayer.posZ,0.0D,0.0D,0.0D);\n  world.playSoundAtEntity(entityplayer,\"random.explode\",1.0F,1.0F);\n}\n", "protected void configurePropertiesFromAction(Action a) {\n\tsuper.configurePropertiesFromAction(a);\n\t\n\tif(a==null)return;\n\tObject value;\n\t\n\tvalue = a.getValue(Action.ACTION_COMMAND_KEY);\n\tif(value!=null){\n\t\tsetName((String)value);\n\t\tsetActionCommand((String)value);\n\t}\n\n//This does not affect view:\n\t//value = a.getValue(ButtonAction.ROLLOVER_SMALL_ICON);\n\t//if(value!=null)\n\t\t//setRolloverIcon((Icon)value);\n}\n", "    private FoldingItemContext createContext() {\n        return new FoldingItemContext();\n    }\n", "    public boolean matches(PathItem[] path, boolean isRelative) {\n        if (pathList == null\n            || path == null\n            || path.length > pathList.length\n            || (!isRelative && path.length != pathList.length)) {\n            return false;\n        } else {\n            for (int i = path.length - 1; i >= 0; i--) {\n                if (!pathList[i].equals(path[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n", "public Iterator < SearchTree < VertexType > > childIterator ( ) { return m_childList . iterator ( ) ; }", "\tpublic byte getPKCS1Support() {\n\t\treturn fPKCS1Support;\n\t}\n", "    public void appendTags(List l, int indent) {\n\n        // if low indentation level, write comment line\n        if (indent <= 2) {\n            XMLUtil.appendCommentLine(l, indent, getName());\n        }\n        // add open-close-tag, a tag that closes in the same line.\n        l.add(getOpenCloseTag(indent));\n    }\n", "protected String cutExtension(String name){\n  int idx=name.lastIndexOf('.');\n  if (idx >= 0) {\n    return name.substring(0,idx);\n  }\n else {\n    return name;\n  }\n}\n", "public FloatColumn logN(){\n  FloatColumn newColumn=FloatColumn.create(name() + \"[logN]\",size());\n  for (  float value : this) {\n    newColumn.add((float)Math.log(value));\n  }\n  return newColumn;\n}\n", "protected int size ( String stream ) { int result = NUM_ ; while ( BOOL_ ) { try { StreamEventsSlice slice = eventstore . readStreamEventsForward ( stream , result , NUM_ , BOOL_ ) . get ( ) ; result += slice . events . size ( ) ; if ( slice . isEndOfStre", "void changedModificationState ( INaviView view , boolean value ) ;", "    protected SComponent createCustomComponent(String key) {\n        throw new UnsupportedOperationException(\"No component for '\" + key + \"'. Override this method if you're using\" +\n                \" custom components.\");\n    }\n", "private void readObject ( ObjectInputStream stream ) throws IOException , ClassNotFoundException { stream . defaultReadObject ( ) ; locators = unmarshalLocators ( stream ) ; }", "  public ICmdAction start() throws ActionStartException {\n    if(isSetupComplete_flag == false) {\n      try {\n        setupJNLPFile();\n      }\n      catch(InvalidAppletException invalid) {\n        invalid.printStackTrace();\n        throw new ActionStartException(invalid.getMessage());\n      }\n    }\n\n    return jnlpCmdAction.start();\n  }\n", "public OnUpdateClause addAssignment(Expression expression){\n  assignments.add(new Assignment(expression));\n  return this;\n}\n", "  public int getContentPanelSize() {\n    Dimension size = edgePanel.getPreferredSize();\n    return direction.isHorizontal() ? size.width : size.height;\n  }\n", "public void buildDeprecatedMethodInfo(XMLNode node, Content methodsContentTree) {\n        methodWriter.addDeprecatedMemberInfo((ExecutableElement)currentMember, methodsContentTree);\n    }", "public void setReuseAddress(boolean on) throws SocketException {\n        if (isClosed())\n            throw new SocketException(\"Socket is closed\");\n        getImpl().setOption(SocketOptions.SO_REUSEADDR, Boolean.valueOf(on));\n    }", "\tprotected void notifyUserJoined(User user) {\n\t\tfor (ChannelListener l : listeners) {\n\t\t\tl.onChannelUserJoined(this, user);\n\t\t}\n\t}\n", "protected ILaunchConfiguration findOrCreateLaunchConfiguration(IResource resource,String startupUrl,boolean isExternal,boolean isGwtSuperDevModeEnabled) throws CoreException, OperationCanceledException {\n  ILaunchConfiguration config=findLaunchConfiguration(resource,startupUrl,isExternal);\n  if (config == null) {\n    config=createNewLaunchConfiguration(resource,startupUrl,isExternal,isGwtSuperDevModeEnabled);\n  }\n else   if (GWTNature.isGWTProject(resource.getProject()) && GWTLaunchConfigurationWorkingCopy.getSuperDevModeEnabled(config) != isGwtSuperDevModeEnabled) {\n    config=turnOnOrOffSuperDevMode(config,isGwtSuperDevModeEnabled);\n  }\n  return config;\n}\n", "public void addNeuronGroup(NeuronGroup group){\n  numMembers+=group.size();\n  neuronGroupList.add(group);\n  group.setParentGroup(this);\n}\n", "boolean requiresOrderedIndex ( ) ;", "private int measureWidth(int measureSpec) {\n        float result;\n        int specMode = MeasureSpec.getMode(measureSpec);\n        int specSize = MeasureSpec.getSize(measureSpec);\n\n        if ((specMode == MeasureSpec.EXACTLY) || (mRecyclerView == null)) {\n            //We were told how big to be\n            result = specSize;\n        } else {\n            //Calculate the width according the views count\n            final int count = mRecyclerView.getAdapter().getItemCount();\n            result = getPaddingLeft() + getPaddingRight() + (count * mLineWidth) + ((count - 1) * mGapWidth);\n            //Respect AT_MOST value if that was what is called for by measureSpec\n            if (specMode == MeasureSpec.AT_MOST) {\n                result = Math.min(result, specSize);\n            }\n        }\n        return (int)Math.ceil(result);\n    }", "public Observable<ServiceResponse<Page<PremierAddOnOfferInner>>> listPremierAddOnOffersNextSinglePageAsync(final String nextPageLink) {\n        if (nextPageLink == null) {\n            throw new IllegalArgumentException(\"Parameter nextPageLink is required and cannot be null.\");\n        }\n        String nextUrl = String.format(\"%s\", nextPageLink);\n        return service.listPremierAddOnOffersNext(nextUrl, this.acceptLanguage(), this.userAgent())\n            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PremierAddOnOfferInner>>>>() {\n                @Override\n                public Observable<ServiceResponse<Page<PremierAddOnOfferInner>>> call(Response<ResponseBody> response) {\n                    try {\n                        ServiceResponse<PageImpl<PremierAddOnOfferInner>> result = listPremierAddOnOffersNextDelegate(response);\n                        return Observable.just(new ServiceResponse<Page<PremierAddOnOfferInner>>(result.body(), result.response()));\n                    } catch (Throwable t) {\n                        return Observable.error(t);\n                    }\n                }\n            });\n    }", "public PluginDescription ( PluginUser user , String canonicalUrl , Path dataDir ) { this . user = user ; this . canonicalUrl = canonicalUrl ; this . dataDir = dataDir ; }", "public void registerShareKey(String shareKey){\n  connectionDirectory.registerShareKey(shareKey);\n}\n", "public static void setPropertyValue(Object pObject, String pProperty, Object pValue)\r\n            throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\r\n\r\n        //\r\n        // TODO: Support set(Object, Object)/put(Object, Object) methods\r\n        //       of Collections!\r\n        //       Handle lists and arrays with [] (index) operator\r\n\r\n        Class paramType = pValue != null ? pValue.getClass() : Object.class;\r\n\r\n        // Preserve references\r\n        Object obj = pObject;\r\n        String property = pProperty;\r\n\r\n        // Recurse and find real parent if property contains a '.'\r\n        int dotIdx = property.indexOf('.');\r\n        if (dotIdx >= 0) {\r\n            // Get real parent\r\n            obj = getPropertyValue(obj, property.substring(0, dotIdx));\r\n            // Get the property of the parent\r\n            property = property.substring(dotIdx + 1);\r\n        }\r\n\r\n        // Find method\r\n        Object[] params = {pValue};\r\n        Method method = getMethodMayModifyParams(obj, \"set\" + StringUtil.capitalize(property),\r\n                                                 new Class[] {paramType}, params);\r\n\r\n        // Invoke it\r\n        method.invoke(obj, params);\r\n    }", "\tpublic int add(Component c) {\n\t\treturn add(c, -1);\n\t}\n", "@Nullable\r\n    public final Folder findTargetFolder(@NotEmpty final String generatorName, @NotEmpty final String artifactName) {\r\n        Contract.requireArgNotEmpty(\"generatorName\", generatorName);\r\n        Contract.requireArgNotEmpty(\"artifactName\", artifactName);\r\n        if (parent == null) {\r\n            throw new IllegalStateException(\"Parent for generators is not set\");\r\n        }\r\n        try {\r\n            return parent.findTargetFolder(generatorName, artifactName);\r\n        } catch (final ProjectNameNotDefinedException ex) {\r\n            throw new RuntimeException(\r\n                    \"Couldn't determine target folder for generator '\" + generatorName + \"' and artifact '\" + artifactName + \"'\", ex);\r\n        } catch (final ArtifactNotFoundException ex) {\r\n            throw new RuntimeException(\r\n                    \"Couldn't determine target folder for generator '\" + generatorName + \"' and artifact '\" + artifactName + \"'\", ex);\r\n        } catch (final FolderNameNotDefinedException ex) {\r\n            throw new RuntimeException(\r\n                    \"Couldn't determine target folder for generator '\" + generatorName + \"' and artifact '\" + artifactName + \"'\", ex);\r\n        } catch (final GeneratorNotFoundException ex) {\r\n            throw new RuntimeException(\r\n                    \"Couldn't determine target folder for generator '\" + generatorName + \"' and artifact '\" + artifactName + \"'\", ex);\r\n        } catch (final ProjectNotFoundException ex) {\r\n            throw new RuntimeException(\r\n                    \"Couldn't determine target folder for generator '\" + generatorName + \"' and artifact '\" + artifactName + \"'\", ex);\r\n        } catch (final FolderNotFoundException ex) {\r\n            throw new RuntimeException(\r\n                    \"Couldn't determine target folder for generator '\" + generatorName + \"' and artifact '\" + artifactName + \"'\", ex);\r\n        }\r\n    }", "private void createResponse() {\n        response = new GenericAnalyticsResponse(\n                queryErrorObservable.onBackpressureBuffer(),\n                queryRowObservable.onBackpressureBuffer(),\n                querySignatureObservable.onBackpressureBuffer(),\n                queryStatusObservable.onBackpressureBuffer(),\n                queryInfoObservable.onBackpressureBuffer(),\n                handle,\n                currentRequest,\n                status,\n                requestID,\n                clientContextID\n        );\n    }", "public static BooleanTemplate booleanTemplate(String template, Object... args) {\n        return booleanTemplate(createTemplate(template), ImmutableList.copyOf(args));\n    }", "public void terminate() throws RemoteException {\n  Hashtable<String,IJSpace> tmpDepot=(Hashtable<String,IJSpace>)_registeredSpaces.clone();\n  for (  String spaceName : tmpDepot.keySet())   unregister(spaceName);\n  if (_logger.isLoggable(Level.FINE))   _logger.fine(\"All spaces unregistered successfully\");\n}\n", "\tpublic void sendMessage(int mailbox, String cargo) throws IOException {\n\t\tbyte [] msg = new byte [cargo.length()+5];\n\t\tmsg[0] = (byte)0x80;\n\t\tmsg[1] = (byte)0x09;\n\t\tmsg[2] = (byte)mailbox;\n\t\tmsg[3] = (byte)(cargo.length()+1);\n\t\tfor (int i=0; i<cargo.length(); i++) {\n\t\t\tmsg[i+4] = (byte)(cargo.charAt(i) & 0xff);\n\t\t}\n\t\tmsg[cargo.length()+4] = 0;\t// null terminator\n\t\tsendMessage(msg);\n\t}\n", "\tpublic static SemesterManager getInstance() {\n\t\tif (instance == null) {\n\t\t\tinstance = new SemesterManager();\n\t\t}\n\t\treturn instance;\n\t}\n", "    public void setPower (int state) {\n        try {\n            sendHeader (PLAYER_MSGTYPE_REQ, PLAYER_ACTARRAY_REQ_POWER, 4);\n            XdrBufferEncodingStream xdr = new XdrBufferEncodingStream (4);\n            xdr.beginEncoding (null, 0);\n            xdr.xdrEncodeByte ((byte)state);\n            xdr.endEncoding ();\n            os.write (xdr.getXdrData (), 0, xdr.getXdrLength ());\n            xdr.close ();\n            os.flush ();\n        } catch (IOException e) {\n            throw new PlayerException\n                (\"[Actarray] : Couldn't request PLAYER_ACTARRAY_REQ_POWER: \" +\n                        e.toString(), e);\n        } catch (OncRpcException e) {\n            throw new PlayerException\n                (\"[Actarray] : Error while XDR-encoding POWER request: \" +\n                        e.toString(), e);\n        }\n    }\n", "public void startApp(Path applicationFile, String applicationClass, String methodName) throws IOException {\n        try {\n            System.out.println(\"Loading : \" + applicationFile.toAbsolutePath().toString());\n            this.defaultClassLoader = Thread.currentThread().getContextClassLoader();\n            this.appClassLoader = URLClassLoader.newInstance(new URL[]{applicationFile.toUri().toURL()}, this.defaultClassLoader);\n            Thread.currentThread().setContextClassLoader(this.appClassLoader);\n            Thread.getAllStackTraces().keySet().stream().forEach((thread) -> {\n                thread.setContextClassLoader(this.appClassLoader);\n            });\n            this.appClazz = this.appClassLoader.loadClass(applicationClass);\n            final Method method = this.appClazz.getMethod(methodName);\n            this.appInstance = this.appClazz.newInstance();\n            method.invoke(this.appInstance);\n        }", "    private void initialise() {\n\n        // Set the default tag name, this is the name of the tag which makes\n        // the most use of this class.\n        setTagName(\"sub\");\n    }\n", "public XMethodParameter ( XMethod m , int p ) { method = m ; parameter = p ; }", "public final synchronized boolean closeWhenPossible() throws IOException {\n  doClose.set(true);\n  if (readingCount.get() == 0) {\n    close();\n  }\n  return closed.get();\n}\n", "    public void mouseEntered(MouseEvent me) {\n        translateMouseEvent(me);\n        Globals.curEditor(this);\n        pushMode((FigModifyingMode) Globals.mode());\n        setUnderMouse(me);\n        if (_canSelectElements) {\n            _modeManager.mouseEntered(me);\n        }\n    }\n", "public static boolean macAddressExist ( String macAddress ) { for ( ArpInfo arpInfo : fetchArpList ( ) ) { if ( arpInfo . getMacAddress ( ) . toLowerCase ( ) . equals ( macAddress . toLowerCase ( ) ) ) return BOOL_ ; } return BOOL_ ; }", "public void stop ( ) throws Exception ;", "public CompletableFuture<MetadataResponse> metadata(MetadataRequest request) {\n    CompletableFuture<MetadataResponse> future = new CompletableFuture<>();\n    if (context.isCurrentContext()) {\n      sendRequest(request, protocol::metadata, future);\n    } else {\n      context.execute(() -> sendRequest(request, protocol::metadata, future));\n    }\n    return future;\n  }", "public static boolean isQuoted(String name){\n  return name != null && name.length() != 0 && ((name.charAt(0) == '`' && name.charAt(name.length() - 1) == '`') || (name.charAt(0) == '\"' && name.charAt(name.length() - 1) == '\"'));\n}", "public List < Product > loadProducts ( List < Supplier > suppliers ) { EntityManager em = emf . createEntityManager ( ) ; TypedQuery < Product > queryProd ; List < Product > resProd = null ; try { em . getTransaction ( ) . begin ( ) ; queryProd = em . cre", "protected void preRedo(){\n  if (cursor >= 0 && cursor < selections.size()) {\n    ISelection selection=selectionProvider.getSelection();\n    selections.set(cursor,selection);\n  }\n else   if (cursor == selections.size()) {\n    ISelection selection=selectionProvider.getSelection();\n    selections.add(cursor,selection);\n  }\n}\n", "public E push(E object){\n  addElement(object);\n  return object;\n}\n", "public void addDocumentType ( DocumentType documentType ) { mDocumentTypes . add ( documentType ) ; }", "@Override public final String toStringMaxDecimalDigits(int afterDecimalPoint){\n  StringBuffer text=new StringBuffer(toStringNoWeight(afterDecimalPoint));\n  if (m_Weight != 1.0) {\n    text.append(\",{\" + Utils.doubleToString(m_Weight,afterDecimalPoint) + \"}\");\n  }\n  return text.toString();\n}\n", "public ZookeeperConfigProvider ( URI uri ) throws Exception { String connectString = uri . getHost ( ) + STR_ + ( uri . getPort ( ) == - NUM_ ? NUM_ : uri . getPort ( ) ) ; String serviceName = uri . getPath ( ) . split ( STR_ , NUM_ ) [ NUM_ ] ; client = CuratorFrameworkFactory . newClient ( connectString , new RetryOneTime ( NUM_ ) ) ; client . start ( ) ; shutdownFunctions . add ( null ) ; initProvider ( client , serviceName ) ; }", "@JsCacheRemove(cls = OcelotServices.class, methodName = \"getLocale\", keys = {}, userScope = true)\r\n\tpublic void setLocale(@JsonUnmarshaller(LocaleMarshaller.class) Locale locale) {\r\n\t\tlogger.debug(\"Receive setLocale call from client. {}\", locale);\r\n\t\tocelotContext.setLocale(locale);\r\n\t}", "private void splitChunk ( final MemoryChunk chunk , final long address ) { final byte [ ] oldData = chunk . getBytes ( ) ; final byte [ ] newData1 = new byte [ ( int ) ( address - chunk . getAddress ( ) ) ] ; final byte [ ] newData2 = new byte [ ( chunk .", "public void diff ( final TLCState other ) { if ( this == other || wasDiffed || other . isStuttering ( ) || other . isBackToState ( ) ) { return ; } wasDiffed = BOOL_ ; final List < TLCVariable > predecessorVariables = this . getVariablesAsList ( ) ; final", "void saveFSImage(SaveNamespaceContext context, ImageManager im, boolean forceUncompressed)\n      throws IOException {\n    \n    long txid = context.getTxId();\n    OutputStream os = im.getCheckpointOutputStream(txid);\n\n    FSImageFormat.Saver saver = new FS", "public int numAlphaLevels(){\n  return impl.numAlphaLevels();\n}\n", "private List<Float> interpolatePositions(PositionInfo left, PositionInfo right, int steps) {\r\n\r\n        if (left.isOutOfBounds()) {\r\n            if (right.isNormal()) {\r\n                return interpolateDownwards(right.getNavPos(), steps);\r\n            } else if (right.isMax() || right.isOutOfBounds()) {\r\n                return interpolateEmpty(steps);\r\n            } else {\r\n                // can't happen\r\n                assert false;\r\n            }\r\n        } else if (left.isNormal()) {\r\n            if (right.isOutOfBounds() || right.isMax()) {\r\n                return interpolateUpwards(left.getNavPos(), steps);\r\n            } else if (right.isNormal()) {\r\n                return interpolateBetween(left.getNavPos(), right.getNavPos(), steps);\r\n            } else {\r\n                // can't happen\r\n                assert false;\r\n            }\r\n        } else {\r\n            // can't happen\r\n            assert false;\r\n        }\r\n        return null;\r\n\r\n    }", "public RollbackRecord ( BasicLogRecord rec ) { this . txNum = ( Long ) rec . nextVal ( BIGINT ) . asJavaVal ( ) ; lsn = rec . getLSN ( ) ; }", "public Object returnInstance(final String instanceKey,final Map<String,Object> keyMap){\n  Object instance=null;\n  if (keyMap.containsKey(instanceKey)) {\n    instance=keyMap.get(instanceKey);\n  }\n else {\n    _logger.error(\"Instance : {} not found\",instanceKey);\n  }\n  return instance;\n}\n", "void newScanIssue ( IScanIssue issue ) ;", "protected void stopWithErrorMessage(String error,Exception ex){\n  stop();\n  if (m_log != null) {\n    m_log.statusMessage(statusMessagePrefix() + error + \" - see log for details\");\n    m_log.logMessage(statusMessagePrefix() + error + (ex != null ? \" \" + ex.getMessage() : \"\"));\n  }\n}\n", "public void marshall(GetDataRetrievalPolicyRequest getDataRetrievalPolicyRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (getDataRetrievalPolicyRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(getDataRetrievalPolicyRequest.getAccountId(), ACCOUNTID_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public DAuthorityInformationAccess(JDialog parent){\n  super(parent);\n  setTitle(res.getString(\"DAuthorityInformationAccess.Title\"));\n  initComponents();\n}\n", "public RunT getBuild(String id) {\n        for (RunT r : _getRuns().values()) {\n            if (r.getId().equals(id))\n                return r;\n        }\n        return null;\n    }", "public Dictionary < String , Object > encrypt ( String pidOrFactory , String instanceAlias , Dictionary < String , Object > config ) throws InvalidException , InternalErrorException , WaitForMetaData { JsonValue parsed = parse ( config , pidOrFactory ) ; return encrypt ( pidOrFactory , instanceAlias , config , parsed ) ; }", "public Expression<String> gte(String value) {\n\t\tString valueString = \"'\" + value + \"'\";\n\t\treturn new Expression<String>(this, Operation.gte, valueString);\n\t}", "public boolean intersectRay(double originX, double originY, double originZ, double dirX, double dirY, double dirZ, Vector2d result) {\n        return Intersectiond.intersectRayAab(originX, originY, originZ, dirX, dirY, dirZ, minX, minY, minZ, maxX, maxY, maxZ, result);\n    }", "\tprotected void queueExec(EditPart ep, Object once, EditPartRunnable runnable) {\n\t\tEditorUtilities.displayExec(ep, once, runnable);\n\t}\n", "private CGlobalSettings ( ) { }", "public static double safeLog10(double x){\n  boolean neg=(x < 0.0);\n  if (neg) {\n    x=-x;\n  }\n  if (x < 10.0) {\n    x+=(10.0 - x) / 10;\n  }\n  x=Math.log(x) / LOG10;\n  return neg ? -x : x;\n}\n", "\tpublic void watchFolder( final File folder ) {\n\t\tjustWatchFolder( folder );\n\t\tMODEL.postModifications();\n\t}\n", "protected void processInitiators(ExportGroup exportGroup,Collection<Initiator> initiators,Collection<String> portNames,Map<String,URI> portNameToInitiatorURI,Collection<URI> hostURIs,ListMultimap<String,String> computeResourceToPortNames){\n  for (  Initiator initiator : initiators) {\n    String normalizedName=Initiator.normalizePort(initiator.getInitiatorPort());\n    portNames.add(normalizedName);\n    portNameToInitiatorURI.put(normalizedName,initiator.getId());\n    if (hostURIs != null) {\n      if (!NullColumnValueGetter.isNullURI(initiator.getHost()) && !hostURIs.contains(initiator.getHost())) {\n        hostURIs.add(initiator.getHost());\n      }\n    }\n    if (computeResourceToPortNames != null) {\n      String computeResourceId;\n      if (exportGroup != null && exportGroup.forCluster()) {\n        computeResourceId=initiator.getClusterName();\n      }\n else {\n        URI hostURI=initiator.getHost();\n        if (hostURI == null) {\n          hostURI=NullColumnValueGetter.getNullURI();\n        }\n        computeResourceId=hostURI.toString();\n      }\n      computeResourceToPortNames.put(computeResourceId,normalizedName);\n    }\n  }\n}\n", "    private void _init() throws Exception {\n        sct0041DataProvider.setCachedRowSet((javax.sql.rowset.CachedRowSet)getValue(\"#{SessionBean1.sct0041RowSet}\"));\n    }\n", "  public void addActor(Actor actor, int xpos, int ypos) {\n    try {\n      grid[ypos][xpos].enter(actor);\n    } catch (InterruptedException e) {\n      throw new InternalError();\n    }\n  }\n", "protected void parseDOMElement(Element element) throws SAML2Exception {\n  AssertionFactory assertionFactory=AssertionFactory.getInstance();\n  ProtocolFactory protoFactory=ProtocolFactory.getInstance();\n  requestId=element.getAttribute(SAML2Constants.ID);\n  validateID(requestId);\n  version=element.getAttribute(SAML2Constants.VERSION);\n  validateVersion(version);\n  String issueInstantStr=element.getAttribute(SAML2Constants.ISSUE_INSTANT);\n  validateIssueInstant(issueInstantStr);\n  destinationURI=element.getAttribute(SAML2Constants.DESTINATION);\n  consent=element.getAttribute(SAML2Constants.CONSENT);\n  NodeList nList=element.getChildNodes();\n  if ((nList != null) && (nList.getLength() > 0)) {\n    for (int i=0; i < nList.getLength(); i++) {\n      Node childNode=nList.item(i);\n      String cName=childNode.getLocalName();\n      if (cName != null) {\n        if (cName.equals(SAML2Constants.ISSUER)) {\n          validateIssuer();\n          nameID=assertionFactory.createIssuer((Element)childNode);\n        }\n else         if (cName.equals(SAML2Constants.SIGNATURE)) {\n          validateSignature();\n          signatureString=XMLUtils.print((Element)childNode);\n          isSigned=true;\n        }\n else         if (cName.equals(SAML2Constants.EXTENSIONS)) {\n          validateExtensions();\n          extensions=protoFactory.createExtensions((Element)childNode);\n        }\n else         if (cName.equals(SAML2Constants.SUBJECT)) {\n          validateSubject();\n          subject=assertionFactory.createSubject((Element)childNode);\n        }\n else         if (cName.equals(SAML2Constants.NAMEIDPOLICY)) {\n          validateNameIDPolicy();\n          nameIDPolicy=protoFactory.createNameIDPolicy((Element)childNode);\n        }\n else         if (cName.equals(SAML2Constants.CONDITIONS)) {\n          validateConditions();\n          conditions=assertionFactory.createConditions((Element)childNode);\n        }\n else         if (cName.equals(SAML2Constants.REQ_AUTHN_CONTEXT)) {\n          validateReqAuthnContext();\n          reqAuthnContext=protoFactory.createRequestedAuthnContext((Element)childNode);\n        }\n else         if (cName.equals(SAML2Constants.SCOPING)) {\n          validateScoping();\n          scoping=protoFactory.createScoping((Element)childNode);\n        }\n      }\n    }\n  }\n  String forceAuthnAttr=element.getAttribute(SAML2Constants.FORCEAUTHN);\n  if ((forceAuthnAttr != null) && (forceAuthnAttr.length() > 0)) {\n    forceAuthn=SAML2SDKUtils.booleanValueOf(forceAuthnAttr);\n  }\n  String isPassiveAttr=element.getAttribute(SAML2Constants.ISPASSIVE);\n  if ((isPassiveAttr != null) && (isPassiveAttr.length() > 0)) {\n    isPassive=SAML2SDKUtils.booleanValueOf(isPassiveAttr);\n  }\n  protocolBinding=element.getAttribute(SAML2Constants.PROTOBINDING);\n  String index=element.getAttribute(SAML2Constants.ASSERTION_CONSUMER_SVC_INDEX);\n  if ((index != null) && (index.length() > 0)) {\n    assertionConsumerSvcIndex=new Integer(index);\n    validateAssertionConsumerServiceIndex(assertionConsumerSvcIndex);\n  }\n  assertionConsumerServiceURL=XMLUtils.unescapeSpecialCharacters(element.getAttribute(SAML2Constants.ASSERTION_CONSUMER_SVC_URL));\n  index=element.getAttribute(SAML2Constants.ATTR_CONSUMING_SVC_INDEX);\n  if ((index != null) && (index.length() > 0)) {\n    attrConsumingSvcIndex=new Integer(index);\n    validateAttributeConsumingServiceIndex(attrConsumingSvcIndex);\n  }\n  providerName=element.getAttribute(SAML2Constants.PROVIDER_NAME);\n}\n", "public void paintProgressBarBorder ( SynthContext context , Graphics g , int x , int y , int w , int h ) { }", "\tprotected void endIt() {\n\t\tthis.setVisible(false);\n\t\tthis.dispose();\n\t\tccc.get().fixVehLoc();    // put vehicles back on roads\n\t}\t\t\t// end endIt()\n", "public static <T> T readVersionAndDeSerialize(SimpleVersionedSerializer<T> serializer, DataInputView in) throws IOException {\n\t\tcheckNotNull(serializer, \"serializer\");\n\t\tcheckNotNull(in, \"in\");\n\n\t\tfinal int version = in.readInt();\n\t\tfinal int length = in.readInt();\n\t\tfinal byte[] data = new byte[length];\n\t\tin.readFully(data);\n\n\t\treturn serializer.deserialize(version, data);\n\t}", "public final void synpred249_Java_fragment() throws RecognitionException {\n\t\t// src/main/resources/org/drools/compiler/semantics/java/parser/Java.g:1219:17: ( '.' Identifier )\n\t\t// src/main/resources/org/drools/compiler/semantics/java/parser/Java.g:1219:17: '.' Identifier\n\t\t{\n\t\tmatch(input,47,FOLLOW_47_in_synpred249_Java5695); if (state.failed) return;\n\t\tmatch(input,Identifier,FOLLOW_Identifier_in_synpred249_Java5697); if (state.failed) return;\n\t\t}\n\n\t}", "public void onEdgeTouched ( int edgeFlags , int pointerId ) { }", "public String cookie(String name) {\n        Cookie[] cookies = servletRequest.getCookies();\n        if (cookies != null) {\n            for (Cookie cookie : cookies) {\n                if (cookie.getName().equals(name)) {\n                    return cookie.g", "    public boolean equals(Object o) {\n        if(o instanceof PluginID){\n        \t//log.debug(toString() + \" equals \" + o.toString());\n            return toString().equals(((PluginID) o).toString());\n        }\n        return false;\n    }\n", "   public void nextLine() {\n      // This should work, but it doesnt, so we fake it\n      //startText();\n      //append(\"T*\");\n      setTextPos(tX,tY-tL);\n   }\n", "@Deprecated public static double[] combine(double[] x,double[] y){\n  int len=0;\n  if (x != null)   len+=x.length;\n  if (y != null)   len+=y.length;\n  double[] z=null;\n  if (len > 0) {\n    z=new double[len];\n    int currentPos=0;\n    if (x != null) {\n      System.arraycopy(x,0,z,currentPos,x.length);\n      currentPos=x.length;\n    }\n    if (y != null)     System.arraycopy(y,0,z,currentPos,y.length);\n  }\n  return z;\n}\n", "    public ItemResolver getItemResolver(ContentSection section) {\n\n        String name = section.getName();\n        ItemResolver ir = (ItemResolver) s_itemResolverCache.get(name);\n\n        if ( ir == null ) {\n            ir = section.getItemResolver();\n            s_itemResolverCache.put(name, ir);\n        }\n\n        if (s_log.isDebugEnabled()) {\n            s_log.debug(\"using ItemResolver \" + ir.getClass().getName());\n        }\n\n        return ir;\n    }\n", "public void deleteProject ( final Project project ) throws CouldntDeleteException { Preconditions . checkNotNull ( project , STR_ ) ; try { m_database . getContent ( ) . delete ( project . getNative ( ) ) ; } catch ( final com . google . security . zynami", "public static WritableRaster createPackedRaster(int dataType,int w,int h,int bands,int bitsPerBand,Point location){\n  DataBuffer d;\n  if (bands <= 0) {\n    throw new IllegalArgumentException(\"Number of bands (\" + bands + \") must be greater than 0\");\n  }\n  if (bitsPerBand <= 0) {\n    throw new IllegalArgumentException(\"Bits per band (\" + bitsPerBand + \") must be greater than 0\");\n  }\n  if (bands != 1) {\n    int[] masks=new int[bands];\n    int mask=(1 << bitsPerBand) - 1;\n    int shift=(bands - 1) * bitsPerBand;\n    if (shift + bitsPerBand > DataBuffer.getDataTypeSize(dataType)) {\n      throw new IllegalArgumentException(\"bitsPerBand(\" + bitsPerBand + \") * bands is \"+ \" greater than data type \"+ \"size.\");\n    }\nswitch (dataType) {\ncase DataBuffer.TYPE_BYTE:\ncase DataBuffer.TYPE_USHORT:\ncase DataBuffer.TYPE_INT:\n      break;\ndefault :\n    throw new IllegalArgumentException(\"Unsupported data type \" + dataType);\n}\nfor (int i=0; i < bands; i++) {\n  masks[i]=mask << shift;\n  shift=shift - bitsPerBand;\n}\nreturn createPackedRaster(dataType,w,h,masks,location);\n}\n else {\ndouble fw=w;\nswitch (dataType) {\ncase DataBuffer.TYPE_BYTE:\n  d=new DataBufferByte((int)(Math.ceil(fw / (8 / bitsPerBand))) * h);\nbreak;\ncase DataBuffer.TYPE_USHORT:\nd=new DataBufferUShort((int)(Math.ceil(fw / (16 / bitsPerBand))) * h);\nbreak;\ncase DataBuffer.TYPE_INT:\nd=new DataBufferInt((int)(Math.ceil(fw / (32 / bitsPerBand))) * h);\nbreak;\ndefault :\nthrow new IllegalArgumentException(\"Unsupported data type \" + dataType);\n}\nreturn createPackedRaster(d,w,h,bitsPerBand,location);\n}\n}\n", "public void removeListener ( final ITagListener listener ) { m_listeners . removeListener ( listener ) ; }", "public static String findPathJar ( final Class clas ) throws IllegalStateException { URL url ; String extURL ; try { url = clas . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) ; } catch ( final SecurityException ex ) { url = clas . getReso", "protected List<Position> asPositionList(LatLon... locations){\n  List<Position> positions=new ArrayList<Position>(locations.length);\n  for (  LatLon loc : locations) {\n    positions.add(new Position(loc,0));\n  }\n  return positions;\n}\n", "public static final <T extends Comparable<? super T>> boolean overlaps(Tuple2<T, T> left, Tuple2<T, T> right) {\n        return left.v1.compareTo(right.v2) <= 0\n            && left.v2.compareTo(right.v1) >= 0;\n    }", "private void clearListenerInViewGroup ( ViewGroup viewGroup ) { if ( null == viewGroup ) { return ; } int count = viewGroup . getChildCount ( ) ; for ( int n = NUM_ ; n < count ; ++ n ) { View childView = viewGroup . getChildAt ( n ) ; if ( childView inst", "static char randomChar(){\n  return (char)TestUtil.nextInt(random(),'a','z');\n}\n", "public void nodeChanged(TreeNode node){\n  if (listenerList != null && node != null) {\n    TreeNode parent=node.getParent();\n    if (parent != null) {\n      int anIndex=parent.getIndex(node);\n      if (anIndex != -1) {\n        int[] cIndexs=new int[1];\n        cIndexs[0]=anIndex;\n        nodesChanged(parent,cIndexs);\n      }\n    }\n else     if (node == getRoot()) {\n      nodesChanged(node,null);\n    }\n  }\n}\n", "    public List findAvailableNeighbors() {\n        return ((Discrete) getScape().getSpace()).findAvailable(neighbors);\n        //return neighborOccupants;\n    }\n", "private void addConfig(final String line){\n  int defaultDelay;\n  StringTokenizer st=new StringTokenizer(line,\" \\t\");\n  if (!st.hasMoreTokens()) {\n    LOGGER.warn(\"Invalid map entry: \" + line);\n    return;\n  }\n  final String name=st.nextToken();\n  if (!st.hasMoreTokens()) {\n    LOGGER.error(\"Invalid map entry: \" + line);\n    return;\n  }\n  String index=st.nextToken();\n  int pos=index.indexOf('@');\n  if (pos != -1) {\n    final String val=index.substring(pos + 1);\n    index=index.substring(0,pos);\n    try {\n      defaultDelay=Integer.parseInt(val);\n    }\n catch (    final NumberFormatException ex) {\n      LOGGER.error(\"Invalid default delay: \" + val);\n      return;\n    }\n  }\n else {\n    defaultDelay=TilesetAnimationMap.DEFAULT_DELAY;\n  }\n  if (!st.hasMoreTokens()) {\n    LOGGER.error(\"Invalid map entry: \" + line);\n    return;\n  }\n  final String frames=st.nextToken();\n  st=new StringTokenizer(frames,\":\");\n  final int[] frameIndexes=new int[st.countTokens()];\n  final int[] frameDelays=new int[frameIndexes.length];\n  for (int i=0; i < frameIndexes.length; i++) {\n    String frameIndex=st.nextToken();\n    pos=frameIndex.indexOf('@');\n    if (pos != -1) {\n      final String val=frameIndex.substring(pos + 1);\n      frameIndex=frameIndex.substring(0,pos);\n      try {\n        frameDelays[i]=Integer.parseInt(val);\n      }\n catch (      final NumberFormatException ex) {\n        LOGGER.error(\"Invalid delay #\" + (i + 1) + \" <\"+ val+ \">: \"+ line);\n        return;\n      }\n    }\n else {\n      frameDelays[i]=defaultDelay;\n    }\n    try {\n      frameIndexes[i]=Integer.parseInt(frameIndex);\n    }\n catch (    final NumberFormatException ex) {\n      LOGGER.error(\"Invalid frame #\" + (i + 1) + \" <\"+ frameIndex+ \">: \"+ line);\n      return;\n    }\n  }\n  if (index.equals(\"*\")) {\n    add(name,frameIndexes,frameDelays);\n  }\n else {\n    try {\n      add(name,Integer.parseInt(index),frameIndexes,frameDelays);\n    }\n catch (    final NumberFormatException ex) {\n      LOGGER.error(\"Invalid tile index: \" + line);\n      return;\n    }\n  }\n}\n", "static ZipInputStream createZipInputStream(InputStream inStream, Charset charset) {\n    if (charset == null)\n      return new ZipInputStream(inStream);\n\n    try {\n      Constructor<ZipInputStream> constructor = ZipInputStream.class.getConstructor(new Class[] { InputStream.class, Charset.class });\n      return (ZipInputStream) constructor.newInstance(new Object[] { inStream, charset });\n    }\n    catch (NoSuchMethodException e) {\n      throw new IllegalStateException(MISSING_METHOD_PLEASE_UPGRADE, e);\n    }\n    catch (InstantiationException e) {\n      throw new IllegalStateException(CONSTRUCTOR_MESSAGE_FOR_INPUT + e.getMessage(), e);\n    }\n    catch (IllegalAccessException e) {\n      throw new IllegalStateException(CONSTRUCTOR_MESSAGE_FOR_INPUT + e.getMessage(), e);\n    }\n    catch (IllegalArgumentException e) {\n      throw new IllegalStateException(CONSTRUCTOR_MESSAGE_FOR_INPUT + e.getMessage(), e);\n    }\n    catch (InvocationTargetException e) {\n      throw new IllegalStateException(CONSTRUCTOR_MESSAGE_FOR_INPUT + e.getMessage(), e);\n    }\n  }", "  public void actionPerformed(ActionEvent e) {\n    String cmd = e.getActionCommand().toUpperCase();\n    if (cmd.equals(\"BACKSPACE\"))\n      performBackspace();\n    else if (cmd.equals(\"ESCAPE\"))\n      performEscape();\n    else if (cmd.equals(\"=\"))\n      resultText.setText(evaluateExpression(expressionText.getText()));\n    else if (cmd.length() > 1 || cmd.equals(\"E\"))\n      insertExpressionFunc(position, cmd);\n    else\n      insertExpressionValue(position, cmd);\n  }\n", "public static Complex fromAngle ( float angle ) { return new Complex ( ( float ) Math . cos ( angle ) , ( float ) Math . sin ( angle ) ) ; }", "public Observable<ImageCreateSummary> createImagesFromFilesAsync(UUID projectId, ImageFileCreateBatch batch) {\n        return createImagesFromFilesWithServiceResponseAsync(projectId, batch).map(new Func1<ServiceResponse<ImageCreateSummary>, ImageCreateSummary>() {\n            @Override\n            public ImageCreateSummary call(ServiceResponse<ImageCreateSummary> response) {\n                return response.body();\n            }\n        });\n    }", "public void clear ( ) { m_reducedResults . clear ( ) ; m_currentSearchIndex = NUM_ ; }", "public void setBaselineFinishText(int baselineNumber, String value)\n   {\n      set(selectField(TaskFieldLists.BASELINE_FINISHES, baselineNumber), value);\n   }", "public void initialize ( ) ;", "public static Path write(Path path,String string,Charset cs,OpenOption... options) throws IOException {\n  try (Writer w=Files.newBufferedWriter(path,cs,options)){\n    w.write(string);\n  }\n   return path;\n}\n", "private void paintShadow(final BufferedImage shadowBg,final Container layeredPane){\n  final int layeredPaneWidth=layeredPane.getWidth();\n  final int layeredPaneHeight=layeredPane.getHeight();\n  if (RECT.x + RECT.width > layeredPaneWidth) {\n    RECT.width=layeredPaneWidth - RECT.x;\n  }\n  if (RECT.y + RECT.height > layeredPaneHeight) {\n    RECT.height=layeredPaneHeight - RECT.y;\n  }\n  if (!RECT.isEmpty()) {\n    final Graphics g=shadowBg.createGraphics();\n    g.translate(-RECT.x,-RECT.y);\n    g.setClip(RECT);\n    if (layeredPane instanceof JComponent) {\n      final JComponent c=(JComponent)layeredPane;\n      final boolean doubleBuffered=c.isDoubleBuffered();\n      c.setDoubleBuffered(false);\n      c.paintAll(g);\n      c.setDoubleBuffered(doubleBuffered);\n    }\n else {\n      layeredPane.paintAll(g);\n    }\n    g.dispose();\n  }\n}\n", "public boolean signatureCoversWholeDocument(String name) {\n        getSignatureNames();\n        name = getTranslatedFieldName(name);\n        if (!sigNames.containsKey(name))\n            return false;\n        return ((int[])sigNames.get(name))[0] == reader", "public static Pattern selection(Pattern pattern1, Pattern pattern2)\n   {\n      if (pattern1 == null || pattern2 == null)\n      {\n         throw new IllegalArgumentException(\"Neither pattern can be null\");\n      }\n      return new SelectPattern(pattern1, pattern2);\n   }", "public void yypushback ( int number ) { if ( number > yylength ( ) ) zzScanError ( ZZ_PUSHBACK_2BIG ) ; zzMarkedPos -= number ; }", "public void set(String name, Value elt) {\n\t\tif (name == null) {\n\t\t\tadd(elt);\n\t\t\treturn;\n\t\t}\n\t\tfor (int i = 0; i < length; ++i)\n\t\t\tif (name.equals(names[i])) {\n\t\t\t\telements[i] = elt;\n\t\t\t\treturn;\n\t\t\t}\n\t\tadd(elt);\n\t\tnames[length - 1] = name;\n\t}", "public UIGraphicTestCase ( String name ) { super ( name ) ; }", "public synchronized void setTransactionIsolation(\n            int level) throws SQLException {\n\n        checkClosed();\n\n        switch (level) {\n\n            case TRANSACTION_READ_UNCOMMITTED :\n            case TRANSACTION_READ_COMMITTED :\n            case TRANSACTION_REPEATABLE_READ :\n            case TRANSACTION_SERIALIZABLE :\n                break;\n            default :\n                throw Util.invalidArgument();\n        }\n\n        try {\n            sessionProxy.setIsolationDefault(level);\n        } catch (HsqlException e) {\n            throw Util.sqlException(e);\n        }\n    }", "public static IndexFor onLabel(String label) {\r\n\t\tIndexFor ret = IFactory.dropOnLabel(label);\r\n\t\tASTNode an = APIObjectAccess.getAstNode(ret);\r\n\t\tan.setClauseType(ClauseType.DROP_INDEX);\r\n\t\treturn ret;\r\n\t}", "    public void unregisterMediaButtonEventReceiver(ComponentName eventReceiver) {\n        IAudioService service = getService();\n        try {\n            service.unregisterMediaButtonEventReceiver(eventReceiver);\n        } catch (RemoteException e) {\n            Log.e(TAG, \"Dead object in unregisterMediaButtonEventReceiver\"+e);\n        }\n    }\n", "@Override public void write(byte[] b,int off,int len){\n  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {\n    throw new IndexOutOfBoundsException();\n  }\n else   if (len == 0) {\n    return;\n  }\nsynchronized (this) {\n    int newcount=count + len;\n    int remaining=len;\n    int inBufferPos=count - filledBufferSum;\n    while (remaining > 0) {\n      int part=Math.min(remaining,currentBuffer.length - inBufferPos);\n      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);\n      remaining-=part;\n      if (remaining > 0) {\n        needNewBuffer(newcount);\n        inBufferPos=0;\n      }\n    }\n    count=newcount;\n  }\n}\n", "public Consist newConsist(String name){\n  Consist consist=getConsistByName(name);\n  if (consist == null) {\n    consist=new Consist(name);\n    Integer oldSize=Integer.valueOf(_consistHashTable.size());\n    _consistHashTable.put(name,consist);\n    setDirtyAndFirePropertyChange(CONSISTLISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_consistHashTable.size()));\n  }\n  return consist;\n}\n", "public String getWorkingDirectory() {\n    final String workingDir = getJobProps().getString(WORKING_DIR, this.jobPath);\n    return Utils.ifNull(workingDir, \"\");\n  }", "void startLogListener(){\n  List<LoggingService> services=getEnabledServicesForType(LoggingService.class);\n  if (services != null && !services.isEmpty()) {\n    if (logListener == null) {\n      logListener=new LogListener(context,services,foamApiKeys.wifiOnly());\n    }\n    if (!logListener.isRunning()) {\n      logListener.start();\n    }\n  }\n}\n", "\tprivate void initialize() {\n\t\t\n\t\t// create the context metnu\n\t\tloggerTreeContextMenu = new LoggerTreeContextMenu(this);\n\t\t\n\t\t// add a listener to the context menu\n\t\tthis.addMouseListener(new LoggerTreeMouseListener(this));\n\t\t\n\t\t// set the cell renderer\n\t\tthis.setCellRenderer(new LoggerTreeCellRenderer());\n\t}\n", "    public void run() {\n        while(true) {\n            monitor();\n            try {\n                Thread.sleep(heartbeat);\n            } catch(InterruptedException ie) {\n                ;\n            }\n        }\n    }\n", "public Response buildErrorResponse(int statusCode, String msg) {\r\n        ResponseBuilder rspBuilder = Response.status(statusCode);\r\n        rspBuilder.type(\"application/xhtml+xml; charset=UTF-8\");\r\n        rspBuilder.entity(createErrorEntityAsString(statusCode, msg));\r\n        return rspBuilder.build();\r\n    }", "    public Location toLocation(ResultSet rs) throws SQLException {\n\tLocation loc = new Location();\n\t\n\tloc.id = rs.getInt(\"fid\");\n\tloc.name = rs.getString(\"name\");\n\tloc.parent = rs.getString(\"parent\");\n\tloc.lo = rs.getDouble(\"lo\");\n\tloc.la = rs.getDouble(\"la\");\n\tloc.translatedname = rs.getString(\"realname\");\n\t\n\treturn loc;\n    }\n", "    public void undoLens(Point2D point) {\n        for (int i=m_lenses.size()-1;i>=0;i--) {\n            Lens lens=(Lens)m_lenses.get(i);\n            lens.undoLens(point);\n        }\n    }\n", "\tprivate JPanel panelControls(){\n\t\tJPanel panelButton=new JPanel();\n\t\tJButton button1 = new JButton(\"Import\");\n\t\tbutton1.setToolTipText(\"Save settings and start ConfigImporter\");\n\t\tpanelButton.add(button1);\n\t\tbutton1.setActionCommand(\"save\");\n\t\tbutton1.addActionListener(this);\n\t\tJButton button2 = new JButton(\"Reset\");\n\t\tbutton2.setToolTipText(\"Reload default settings\");\n\t\tpanelButton.add(button2);\n\t\tbutton2.setActionCommand(\"reset\");\n\t\tbutton2.addActionListener(this);\n\t\tJButton button3 = new JButton(\"Close\");\n\t\tbutton3.setToolTipText(\"Close window\");\n\t\tpanelButton.add(button3);\n\t\tbutton3.setActionCommand(\"close\");\n\t\tbutton3.addActionListener(this);\n\t\treturn panelButton;\n\t}\t\n", "XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject){\n  build(namespace,name,nameAlias,elements,attributes,contentHandler,classObject);\n  if ((null != namespace) && (namespace.equals(Constants.S_XSLNAMESPACEURL) || namespace.equals(Constants.S_BUILTIN_EXTENSIONS_URL) || namespace.equals(Constants.S_BUILTIN_OLD_EXTENSIONS_URL))) {\n    schema.addAvailableElement(new QName(namespace,name));\n    if (null != nameAlias)     schema.addAvailableElement(new QName(namespace,nameAlias));\n  }\n}\n", "public Complex divides(Complex b) {\n        Complex a = this;\n        return a.times(b.reciprocal());\n    }", "    public void bit5On() {\n        f |= F_BIT5;\n    }\n", "@Override public boolean receiveImage(ImageToProcess img,Set<TaskImageContainer> tasks,boolean blockUntilImageRelease,boolean closeOnImageRelease,Optional<Runnable> runnableWhenDone) throws InterruptedException {\n  if (tasks == null || tasks.size() <= 0) {\n    return false;\n  }\n  if (img == null) {\n    throw new RuntimeException(\"ERROR: Initial call must reference valid Image!\");\n  }\n  int countImageRefs=numPropagatedImageReferences(img,tasks);\n  initializeTaskDone(tasks,runnableWhenDone);\n  ImageReleaseProtocol protocol=setSemaphoreReferenceCount(img,countImageRefs,blockUntilImageRelease,closeOnImageRelease);\n  scheduleTasks(tasks);\n  if (protocol.blockUntilRelease) {\n    protocol.block();\n  }\n  return true;\n}\n", "\tpublic void setLineNumbersEnabled(boolean enabled) {\n\t\tgutter.setLineNumbersEnabled(enabled);\n\t\tcheckGutterVisibility();\n\t}\n", "private static char[] zzUnpackCMap(String packed){\n  char[] map=new char[0x10000];\n  int i=0;\n  int j=0;\n  while (i < 80) {\n    int count=packed.charAt(i++);\n    char value=packed.charAt(i++);\n    do     map[j++]=value;\n while (--count > 0);\n  }\n  return map;\n}\n", "public static <T> PermutationChromosome<T>\n\tof(final ISeq<? extends T> alleles) {\n\t\treturn of(alleles, alleles.size());\n\t}", "@Override\n    public ListenableFuture<PaymentIncrementAck> incrementPayment(Coin size, @Nullable ByteString info, @Nullable KeyParameter userKey)\n            throws ValueOutOfRangeException, IllegalStateException, ECKey.KeyIsEncryptedException {\n        lock.lock();\n        try {\n            if (state() == null || !connectionOpen || step != InitStep.CHANNEL_OPEN)\n                throw new IllegalStateException(\"Channel is not fully initialized/has already been closed\");\n            if (increasePaymentFuture != null)\n                throw new IllegalStateException(\"Already incrementing paying, wait for previous payment to complete.\");\n            if (wallet.isEncrypted() && userKey == null)\n                throw new ECKey.KeyIsEncryptedException();\n\n            PaymentChannelV1ClientState.IncrementedPayment payment = state().incrementPaymentBy(size, userKey);\n            Protos.UpdatePayment.Builder updatePaymentBuilder = Protos.UpdatePayment.newBuilder()\n                    .setSignature(ByteString.copyFrom(payment.signature.encodeToBitcoin()))\n                    .setClientChangeValue(state.getValueRefunded().value);\n            if (info != null) updatePaymentBuilder.setInfo(info);\n\n            increasePaymentFuture = SettableFuture.create();\n            increasePaymentFuture.addListener(new Runnable() {\n                @Override\n                public void run() {\n                    lock.lock();\n                    increasePaymentFuture = null;\n                    lock.unlock();\n                }\n            }, MoreExecutors.directExecutor());\n\n            conn.sendToServer(Protos.TwoWayChannelMessage.newBuilder()\n                    .setUpdatePayment(updatePaymentBuilder)\n                    .setType(Protos.TwoWayChannelMessage.MessageType.UPDATE_PAYMENT)\n                    .build());\n            lastPaymentActualAmount = payment.amount;\n            return increasePaymentFuture;\n        } finally {\n            lock.unlock();\n        }\n    }", "\tpublic void delayedAddAll(Collection coll) {\n\t\tthrow new AssertionFailure(\"Collection does not support delayed initialization\");\n\t}\n", "public static ArtifactoryServer getArtifactoryServer(Run build, FilePath ws, StepContext context, String serverId) throws IOException, InterruptedException {\n        String buildNumber = BuildUniqueIdentifierHelper.getBuildNumber(build);\n        BuildData", "  public void initialize() throws IOException {\n    getIndexData().initialize();\n  }\n", "public static Collection flatten ( short [ ] self ) { return flatten ( toList ( self ) , new ArrayList ( ) ) ; }", "  public String getText() {\n    final Tree<XmlLite.Data> xmlTree = asTree();\n    return XmlTreeHelper.getAllText(xmlTree);\n  }\n", "int computeNumSlotsPerMap(long slotSizePerMap) {\n    if ((slotSizePerMap==DISABLED_MEMORY_LIMIT) ||\n        (getMemoryForMapTask()==DISABLED_MEMORY_LIMIT)) {\n      return 1;\n    }\n    return (int)(Math.ceil((float)getMemoryForMapTask() / (float)slotSizePerMap));\n  }", "@Override\n    public ExportSnapshotResult exportSnapshot(ExportSnapshotRequest request) {\n        request = beforeClientExecution(request);\n        return executeExportSnapshot(request);\n    }", "\tprivate int getRowCount(BufferedReader br) {\n\t\tint rows = 0;\n\t\ttry {\n\t\t\tString line = br.readLine();\n\t\t\twhile (line != null) {\n\t\t\t\tline = br.readLine();\n\t\t\t\trows++;\n\t\t\t\t;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn rows;\n\t}\n", "public static AbstractMessage normalize( Message srcMessage ) throws JMSException\n    {\n    \t// Already a native message ?\n        if (srcMessage instanceof AbstractMessage)\n            return (AbstractMessage)srcMessage;\n        \n        return duplicate(srcMessage);\n    }", "protected static void succeed ( ) { System . exit ( NUM_ ) ; }", "public static void writeWordVectors(@NonNull Glove vectors, @NonNull File file) {\n        try (BufferedOutputStream fos = new BufferedOutputStream(new FileOutputStream(file))) {\n            writeWordVectors(vectors, fos);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }", "public void tick ( int from , int to ) { for ( int value = from ; value <= to ; value += NUM_ ) { tick ( value ) ; } }", "protected void doPrintClassification(Classifier classifier,Instance inst,int index) throws Exception {\n  double[] d=classifier.distributionForInstance(inst);\n  doPrintClassification(d,inst,index);\n}", "\tpublic E replace(Position<E> p, E e) {\n\t\tBTNode<E> v = checkPosition(p);\n\t\tE old = v.element();\n\t\tv.setElement(e);\n\t\treturn old;\n\t}\n", "\tpublic void gotoUserLocation() {\n\t\tadd(\"p.gotoUserLocation();\");\n\t}\n", "private void mainLoop(){\n  while (true) {\n    try {\n      TimerTask task;\n      boolean taskFired;\nsynchronized (queue) {\n        while (queue.isEmpty() && newTasksMayBeScheduled)         queue.wait();\n        if (queue.isEmpty())         break;\n        long currentTime, executionTime;\n        task=queue.getMin();\nsynchronized (task.lock) {\n          if (task.state == TimerTask.CANCELLED) {\n            queue.removeMin();\n            continue;\n          }\n          currentTime=System.currentTimeMillis();\n          executionTime=task.nextExecutionTime;\n          if (taskFired=(executionTime <= currentTime)) {\n            if (task.period == 0) {\n              queue.removeMin();\n              task.state=TimerTask.EXECUTED;\n            }\n else {\n              queue.rescheduleMin(task.period < 0 ? currentTime - task.period : executionTime + task.period);\n            }\n          }\n        }\n        if (!taskFired)         queue.wait(executionTime - currentTime);\n      }\n      if (taskFired)       task.run();\n    }\n catch (    InterruptedException e) {\n    }\n  }\n}\n", "public static Number div(Number left,Character right){\n  return NumberNumberDiv.div(left,Integer.valueOf(right));\n}\n", "@Override\n    public final int readElementAsBinary(byte[] resultBuffer, int offset, int maxLength)\n        throws XMLStreamException\n    {\n        return readElementAsBinary(resultBuffer, offset, maxLength, Base64Variants.getDefaultVariant());\n    }", "public void stopProxy(long millissecond){\n  proxy.restart(millissecond);\n}\n", "KeyStore initializeKeyStore ( final KeyStoreDetails keyStoreDetails ) throws GeneralSecurityException ;", "public static BufferedImage concatenateImages(final List<BufferedImage> imgCollection,\n\t\tfinal int width, final int height, final int imageType,\n\t\tfinal Direction concatenationDirection)\n\t{\n\t\tfinal BufferedImage img = new BufferedImage(width, height, imageType);\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tfor (final BufferedImage bi : imgCollection)\n\t\t{\n\t\t\tfinal boolean imageDrawn = img.createGraphics().drawImage(bi, x, y, null);\n\t\t\tif (!imageDrawn)\n\t\t\t{\n\t\t\t\tthrow new RuntimeException(\"BufferedImage could not be drawn:\" + bi.toString());\n\t\t\t}\n\t\t\tif (concatenationDirection.equals(Direction.vertical))\n\t\t\t{\n\t\t\t\ty += bi.getHeight();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx += bi.getWidth();\n\t\t\t}\n\t\t}\n\t\treturn img;\n\t}", "public static DateBuilder newDateInTimeZoneAndLocale ( TimeZone tz , Locale lc ) { return new DateBuilder ( tz , lc ) ; }", "@Override\n    public UpdatePlacementResult updatePlacement(UpdatePlacementRequest request) {\n        request = beforeClientExecution(request);\n        return executeUpdatePlacement(request);\n    }", "public static int rectCrossingsForCubic(int crossings,double rxmin,double rymin,double rxmax,double rymax,double x0,double y0,double xc0,double yc0,double xc1,double yc1,double x1,double y1,int level){\n  if (y0 >= rymax && yc0 >= rymax && yc1 >= rymax && y1 >= rymax) {\n    return crossings;\n  }\n  if (y0 <= rymin && yc0 <= rymin && yc1 <= rymin && y1 <= rymin) {\n    return crossings;\n  }\n  if (x0 <= rxmin && xc0 <= rxmin && xc1 <= rxmin && x1 <= rxmin) {\n    return crossings;\n  }\n  if (x0 >= rxmax && xc0 >= rxmax && xc1 >= rxmax && x1 >= rxmax) {\n    if (y0 < y1) {\n      if (y0 <= rymin && y1 > rymin)       crossings++;\n      if (y0 < rymax && y1 >= rymax)       crossings++;\n    }\n else     if (y1 < y0) {\n      if (y1 <= rymin && y0 > rymin)       crossings--;\n      if (y1 < rymax && y0 >= rymax)       crossings--;\n    }\n    return crossings;\n  }\n  if ((x0 > rxmin && x0 < rxmax && y0 > rymin && y0 < rymax) || (x1 > rxmin && x1 < rxmax && y1 > rymin && y1 < rymax)) {\n    return RECT_INTERSECTS;\n  }\n  if (level > 52) {\n    return rectCrossingsForLine(crossings,rxmin,rymin,rxmax,rymax,x0,y0,x1,y1);\n  }\n  double xmid=(xc0 + xc1) / 2;\n  double ymid=(yc0 + yc1) / 2;\n  xc0=(x0 + xc0) / 2;\n  yc0=(y0 + yc0) / 2;\n  xc1=(xc1 + x1) / 2;\n  yc1=(yc1 + y1) / 2;\n  double xc0m=(xc0 + xmid) / 2;\n  double yc0m=(yc0 + ymid) / 2;\n  double xmc1=(xmid + xc1) / 2;\n  double ymc1=(ymid + yc1) / 2;\n  xmid=(xc0m + xmc1) / 2;\n  ymid=(yc0m + ymc1) / 2;\n  if (Double.isNaN(xmid) || Double.isNaN(ymid)) {\n    return 0;\n  }\n  crossings=rectCrossingsForCubic(crossings,rxmin,rymin,rxmax,rymax,x0,y0,xc0,yc0,xc0m,yc0m,xmid,ymid,level + 1);\n  if (crossings != RECT_INTERSECTS) {\n    crossings=rectCrossingsForCubic(crossings,rxmin,rymin,rxmax,rymax,xmid,ymid,xmc1,ymc1,xc1,yc1,x1,y1,level + 1);\n  }\n  return crossings;\n}\n", "    private void fireFinishedDirectory(BigHash hash) {\n        fire(new GetFileToolEvent(GetFileToolEvent.ACTION_FINISHED, GetFileToolEvent.TYPE_DIRECTORY, hash));\n    }\n", "private int calculateIndex(int index){\n  index=index - (hasHeader() ? 1 : 0);\n  if (index >= items.size()) {\n    throw new IllegalStateException(\"Index has to be defined in range from 0 to items.size() - 1!\");\n  }\n else {\n    return index;\n  }\n}\n", "    public boolean hasExtractingError() {\n        return false;\n    }\n", "public void name(String name){\n  this.name=Objects.requireNonNull(name);\n}\n", "    private void setupXmlBeans() {\n        String channel = \"snashot\";\n        String release = \"Snapshot-20070922_1258\";\n        \n        releaseBean = new ReleaseXmlBean(\"snapshot\", release);\n        \n        releaseBean.addmodule(getCoreModule(release));\n        \n        channelBean = new ChannelXmlBean();\n        channelBean.setName(channel);\n        channelBean.setCurrentRelease(releaseBean);\n    }\n", "@Override public int getItemViewType(int position) {\n    T content = getItem(position);\n    return rendererBuilder.getItemViewType(content);\n  }", "protected HeadTable ( ) { super ( TrueTypeTable . HEAD_TABLE ) ; setVersion ( NUM_ ) ; setFontRevision ( NUM_ ) ; setChecksumAdjustment ( NUM_ ) ; setMagicNumber ( NUM_ ) ; setFlags ( ( short ) NUM_ ) ; setUnitsPerEm ( ( short ) NUM_ ) ; setCreated ( Syst", "public static void makeMatrixFile ( Number matrix [ ] [ ] , String outputFileName ) throws IOException { int rowSize = matrix . length ; int colSize = matrix [ NUM_ ] . length ; createDirectories ( outputFileName ) ; BufferedWriter out = new BufferedWrite", "public static Bitmap drawViewToBitmap(Bitmap dest, View view, int downSampling, Bitmap.Config bitmapConfig) {\n        float scale = 1f / downSampling;\n        int viewWidth = view.getWidth();\n        int viewHeight = view.getHeight();\n        int bmpWidth = Math.round(viewWidth * scale);\n        int bmpHeight = Math.round(viewHeight * scale);\n\n        if (dest == null || dest.getWidth() != bmpWidth || dest.getHeight() != bmpHeight) {\n            dest = Bitmap.createBitmap(bmpWidth, bmpHeight, bitmapConfig);\n        }\n\n        Canvas c = new Canvas(dest);\n        if (downSampling > 1) {\n            c.scale(scale, scale);\n        }\n\n        view.draw(c);\n        return dest;\n    }", "\tpublic void sleep(long time) {\n\t\treport.report(\"Sleep \" + (time / 1000) + \" sec.\");\n\t\ttry {\n\t\t\tThread.sleep(time);\n\t\t} catch (InterruptedException e) {\n\t\t}\n\t}\n", "    protected void repaint(Shape shape) {\n        _layer.repaint(DamageRegion.createDamageRegion(new TransformContext(_layer), shape.getBounds2D()));\n    }\n", "    public boolean isAllowsNull(String fieldName) throws DBException {\n        return allowsNull(fieldName);\n    }\n", "    private boolean less (Stats s) {\n\tif (this.hits<s.getHits())\n\t    return true;\n\telse if (this.hits==s.getHits()) {\n\t    if (this.kills<s.getKills())\n\t\treturn true;\n\t    else if (this.kills==s.kills){\n\t\tif (this.name.toUpperCase().compareTo(s.name.toUpperCase())<0)\n\t\t    return true;\n\t\telse\n\t\t    return false;\n\t    }\n\t    else\n\t\treturn false;\n\t}\n\telse\n\t    return false;\n    }\n", "public Integer getIntObject(String attributeName) {\n        String val = get(attributeName, null);\n        if (val != null) {\n            return Integer.valueOf(val);\n        }\n        return null;\n    }", "private int calculateResistance(){\n  double mean=Math.sqrt(getWidth() * getHeight());\n  double normalized=1 - 1 / Math.max(1.0,mean);\n  return Math.max(MIN_RESISTANCE,(int)(MAX_RESISTANCE * normalized));\n}\n", "public static ValueGetterSpacePredicate < ServerEntry > pathBetween ( String path , Comparable < ? > low , Comparable < ? > high ) { return path ( path , between ( low , high ) ) ; }", "public static Text createText ( Composite parent , int style , int hspan ) { Text t = new Text ( parent , style ) ; t . setFont ( parent . getFont ( ) ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = hspan ; t . setLayoutData ( gd ) ; return t ; }", "public ConnectorReference ( ConnectorKey connectorKey ) { this ( connectorKey , null ) ; }", "public static nstimer_binding get(nitro_service service, String name) throws Exception{\n\t\tnstimer_binding obj = new nstimer_binding();\n\t\tobj.set_name(name);\n\t\tnstimer_binding response = (nstimer_binding) obj.get_resource(service);\n\t\treturn response;\n\t}", "     private void mergeTextNode(AnyNode node1, AnyNode node2) {\n         if (node1.getNodeType() != node2.getNodeType())\n            return;\n        if (node1.getNodeType() != AnyNode.TEXT)\n            return;\n        StringBuffer temp = new StringBuffer(node1.getStringValue());\n        temp.append(node2.getStringValue());\n        node1._value = temp.toString();\n        node2 = null;\n     }\n", "    public Class loadClass(String className) throws ClassNotFoundException {\n        if (m_clazz != null && m_classname.equals(className)) {  // Immutable fields.\n            return defineClass(className, m_clazz, null);\n        }\n        return m_context.getBundle().loadClass(className);\n    }\n", "public static boolean aboveOrEqual(long a,long b){\n  return Long.compareUnsigned(a,b) >= 0;\n}\n", "@Deprecated public static SourceDataTagQuality fromXML(Element domElement){\n  NodeList fields=domElement.getChildNodes();\n  int fieldsCount=fields.getLength();\n  String fieldName;\n  String fieldValueString;\n  Node fieldNode;\n  SourceDataTagQuality result=new SourceDataTagQuality();\n  for (int i=0; i != fieldsCount; i++) {\n    fieldNode=fields.item(i);\n    if (fieldNode.getNodeType() == Node.ELEMENT_NODE) {\n      fieldName=fieldNode.getNodeName();\n      Node fieldValueNode=fieldNode.getFirstChild();\n      if (fieldValueNode != null) {\n        fieldValueString=fieldValueNode.getNodeValue();\n      }\n else {\n        fieldValueString=\"\";\n      }\n      if (fieldName.equals(XML_ELEMENT_QUALITY_CODE)) {\n        short code=Short.parseShort(fieldValueString);\n        result.qualityCode=SourceDataTagQualityCode.getEnum(code);\n      }\n else       if (fieldName.equals(XML_ELEMENT_QUALITY_DESC)) {\n        result.description=fieldValueString;\n      }\n    }\n  }\n  return result;\n}\n", "private static boolean test ( ODatabaseDocumentPool pool , String dbURL , String user , String password , boolean finalTry ) { ODatabaseDocumentTx db = null ; try { logger . info ( STR_ ) ; db = pool . acquire ( dbURL , user , password ) ; Iterator < ODocument > iter = db . browseClass ( STR_ ) ; if ( iter . hasNext ( ) ) { iter . next ( ) ; } } catch ( OException ex ) { if ( finalTry ) { logger . info ( STR_ , ex ) ; } else { logger . debug ( STR_ , ex ) ; } return BOOL_ ; } finally { if ( db != null ) { db . close ( ) ; } } return BOOL_ ; }", "@Override public ServiceBuilderAmp service(Key<?> key,Class<?> api){\n  Objects.requireNonNull(api);\n  return new ServiceBuilderImpl(this,api,key);\n}\n", "\tpublic boolean booleanAuthenticate(String username, String password) {\n\t   boolean allow = false;\n\t   allow = lookupUser(username, password);\n\t   return allow;\n\t}\n", "\tpublic void clearGraph( ) {\n\t\tif ( worker != null ) {\n\t\t\tworker.interrupt();\n\t\t\tworker = null;\n\t\t}\n\t\tTNVStatusBar.getInstance().clearStatus();\n\t\tthis.removeAllChildren();\n\t\tthis.validateFullPaint();\n\t}\n", "public void addPermission(String permissionName){\n  AXmlNode permission=new AXmlNode(\"uses-permission\",null,manifest);\n  AXmlAttribute<String> permissionNameAttr=new AXmlAttribute<String>(\"name\",permissionName,AXmlHandler.ANDROID_NAMESPACE);\n  permission.addAttribute(permissionNameAttr);\n}\n", "public static int colorWithAlpha(int color,float percent){\n  int r=Color.red(color);\n  int g=Color.green(color);\n  int b=Color.blue(color);\n  int alpha=Math.round(percent * 255);\n  return Color.argb(alpha,r,g,b);\n}\n", "public Object invokeMethod ( Object object , String methodName , Object [ ] originalArguments ) { return invokeMethod ( theClass , object , methodName , originalArguments , BOOL_ , BOOL_ ) ; }", "public static void showToast ( Context context , int resourceId ) { Toast . makeText ( context , context . getString ( resourceId ) , Toast . LENGTH_LONG ) . show ( ) ; }", "public static appfwxmlcontenttype[] get_filtered(nitro_service service, String filter) throws Exception{\n\t\tappfwxmlcontenttype obj = new appfwxmlcontenttype();\n\t\toptions option = new options();\n\t\toption.set_filter(filter);\n\t\tappfwxmlcontenttype[] response = (appfwxmlcontenttype[]) obj.getfiltered(service, option);\n\t\treturn response;\n\t}", "public CDatabasePasswordField ( ) { super ( STR_ , NUM_ ) ; }", "public void afterThrowing(Method m, Object[] args, Object target, ConcurrencyFailureException e)\r\n            throws OptimisticLockingException {\r\n        handleOptimisticLockingException(target, e);\r\n    }", "    public void process(Object obj) throws StageException {\n        this.emit(obj);\n    }\n", "public DelegationRelativeTime ( long minStart , long maxStart , long minStop , long maxStop ) { if ( minStart > maxStart || maxStart > minStop || minStop > maxStop || minStop < NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } this . minStart = min", "@Override\n  public int chmod(String path, @mode_t long mode) {\n    AlluxioURI uri = mPathResolverCache.getUnchecked(path);\n\n    SetAttributePOptions options = SetAttributePOptions.newBuilder()\n        .setMode(new alluxio.security.authorization.Mode((short) mode).toProto()).build();\n    try {\n      mFileSystem.setAttribute(uri, options);\n    } catch (Throwable t) {\n      LOG.error(\"Failed to change {} to mode {}\", path, mode, t);\n      return AlluxioFuseUtils.getErrorCode(t);\n    }\n\n    return 0;\n  }", "    public SuggestionData createSearchTheWebSuggestion(String query) {\n        if (TextUtils.isEmpty(query)) {\n            return null;\n        }\n        String suggestion = mContext.getString(R.string.search_the_web, query);\n        int ix = suggestion.indexOf('\\n');\n\n        return new SuggestionData.Builder(BUILTIN_SOURCE_COMPONENT)\n                .title(suggestion.substring(0, ix))\n                .description(suggestion.substring(ix + 1))\n                .icon1(R.drawable.magnifying_glass)\n                .intentAction(Intent.ACTION_WEB_SEARCH)\n                .intentQuery(query)\n                .build();\n    }\n", "public com.google.api.ads.admanager.axis.v201811.CreativeAsset getHtml5Asset() {\n        return html5Asset;\n    }", "private static final ExprNode addSubsts ( ExprNode expr , List subs ) { ExprNode res = expr ; while ( ! subs . isEmpty ( ) ) { SubstInNode sn = ( SubstInNode ) subs . car ( ) ; res = new SubstInNode ( sn . stn , sn . getSubsts ( ) , res , sn . getInstantiatingModule ( ) , sn . getInstantiatedModule ( ) ) ; subs = subs . cdr ( ) ; } return res ; }", "public static void closeQuietly(ResultSet rs){\n  if (rs == null) {\n    return;\n  }\n  try {\n    rs.close();\n  }\n catch (  SQLException ex) {\n  }\n}\n", "private void readParameterAnnotations ( final MethodVisitor mv , final Context context , int v , final boolean visible ) { int i ; int n = b [ v ++ ] & NUM_ ; int synthetics = Type . getArgumentTypes ( context . desc ) . length - n ; AnnotationVisitor av ", "public boolean ping ( HostAddress address , int timeout ) throws HostException { notes = STR_ ; InetAddress inetAddress = address . getInetAddress ( ) ; try { return inetAddress . isReachable ( timeout ) ; } catch ( IOException e ) { throw new HostExcepti", "    public void nuke(Square square) {\n        if (square.getPiece() != null ) {\n            square.setPiece(null);\n            this.setChanged();\n            notifyObservers(BoardEvent.NUKE);\n        }\n    }\n", "\tpublic double getLongitude() {\n\t\ttry {\n\t\t\tdouble longitude = (Double) this.properties.get(\"longitude\");\n\t\t\tif(longitude > 180) {\n\t\t\t\tlongitude -= 360;\n\t\t\t}\n\t\t\treturn longitude;\n\t\t} catch(Exception err) {\n\t\t\tlogger.log(Level.WARNING, \"Unable to obtain longitude.\", err);\n\t\t\treturn Double.NaN;\n\t\t}\t\t\n\t}\n", "private void restartProximityBrowsing ( ) { m_lastShown = new HashSet < > ( ) ; final Collection < NodeType > selectedNodes = SelectedVisibleFilter . filter ( m_graph . getSelectedNodes ( ) ) ; if ( ! selectedNodes . isEmpty ( ) ) { final List < NodeType ", "        public Object getValueAt(int row, int column) {\n            if (row >= table.size()) {\n                // Indicator for the Table Renderer that this is a space holder\n                return new SpaceHolder();\n            } else {\n                XPersonalFeed feed = table.getFeed( row );\n                switch (column) {\n                    case 0: {\n                        return new Boolean( feed.getPoll() );\n                    }\n                    case 1: {\n                        return feed;\n                    }\n                    case 2: {\n                        return new Integer(feed.getMaxDownloads());\n                    }\n                    case 3: {\n                        return new Integer(feed.getQuality());\n                    }\n                    default:\n                        return new Object();\n                }\n            }\n        }\n", "public static DateTime fromString(String rfc3339Timestamp) {\n\t\tif (rfc3339Timestamp == null) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tDateTime dateTime = new DateTime(rfc3339Timestamp, DateTimeZone.UTC);\n\t\treturn dateTime;\n\t}", "public static boolean match(String value,String strPattern){\n  if (isNotEmpty(strPattern)) {\n    if (isBlank(value)) {\n      return strPattern.equals(\"*\");\n    }\n    value=value.toLowerCase();\n    strPattern=strPattern.toLowerCase();\n    StringBuilder buff=new StringBuilder();\n    for (int i=0; i < strPattern.length() - 1; i++) {\n      char c=strPattern.charAt(i);\n      if (c == '*') {\n        buff.append(\".*?\");\n      }\n else {\n        buff.append(c);\n      }\n    }\n    char lastChar=strPattern.charAt(strPattern.length() - 1);\n    if (lastChar == '*') {\n      buff.append(\".*\");\n    }\n else {\n      buff.append(lastChar);\n    }\n    return Pattern.matches(buff.toString(),value);\n  }\n  return true;\n}\n", "public static String truncateBeforeSecondOccurrence(String text,String word){\n  int pos=text.indexOf(word);\n  if (pos == -1)   return text;\n  pos=text.indexOf(word,pos + 1);\n  if (pos == -1)   return text;\n else   return text.substring(0,pos);\n}\n", "private boolean checkDBConnectivity ( boolean createDB , boolean ignoreError ) throws ReplicatorException { Database conn = null ; try { conn = connectionManager . getRawConnection ( createDB ) ; conn . connect ( ) ; return BOOL_ ; } catch ( SQLException ", "public static void writeFileTxt(String fileName,String[] totalFile) throws IOException {\n  try (final Writer writer=Files.newBufferedWriter(Paths.get(fileName),Charset.forName(\"UTF-8\"));PrintWriter pw=new PrintWriter(writer)){\n    for (    String file : totalFile) {\n      pw.println(file);\n    }\n  }\n }\n", "\tpublic DetailsAdapter getDetails() {\n\t\tHashMap<String, String> hm = new HashMap<String, String>();\n\t\thm.put(\"Name\", getName());\n\t\thm.put(\"Type\", getType());\n\t\thm.put(\"URI\", getURI().toString());\n\t\thm.put(\"State\", getStateAsString());\n\t\tif (getState() == STATE_NEW) {\n\t\t\thm.put(\"Info\", \"Refresh for detailed information\");\n\t\t}\n\n\t\tif (getState() == STATE_FAILED && getFailReason() != null) {\n\t\t\thm.put(\"failReason\", getFailReason());\n\t\t}\n\t\treturn new DetailsAdapter(hm);\n\t}\n", "public UIGraphicTestCase ( String name ) { super ( name ) ; }", "private boolean validateNewPassword(RequestAndResponse requestAndResponse,final User editedUser,final boolean currentIsEditedUser,final String newPassword,final String newPassword2) throws IOException {\n  boolean hasErrors=false;\n  if (newPassword == null || newPassword.isEmpty()) {\n    addErrorMessage(requestAndResponse,servletText.errorFirstPasswordMustBeSet(currentIsEditedUser,editedUser.getUserName()));\n    hasErrors=true;\n  }\n  if (newPassword2 == null || newPassword2.isEmpty()) {\n    addErrorMessage(requestAndResponse,servletText.errorSecondPasswordMustBeSet(currentIsEditedUser,editedUser.getUserName()));\n    hasErrors=true;\n  }\n  if (!hasErrors && newPassword != null && newPassword2 != null && !newPassword2.equals(newPassword)) {\n    addErrorMessage(requestAndResponse,servletText.errorPasswordsMustMatch());\n    hasErrors=true;\n  }\n  if (!hasErrors && !AccountAttributeValidator.isPasswordValid(newPassword)) {\n    addErrorMessage(requestAndResponse,servletText.errorPasswordIsNotValid());\n    hasErrors=true;\n  }\n  return hasErrors;\n}\n", "    private Integer parseInteger(Attributes atts, String attribute ){\n    \tString value = atts.getValue( attribute );\n    \tif( value != null && value.length()>0 ){\n    \t\ttry{\n    \t\t\treturn Integer.parseInt( value) ;\n    \t\t}catch( NumberFormatException e){\n    \t\t\t// invalid boolean return null\n    \t\t\treturn null;\n    \t\t}\n    \t}else{\n    \t\t// invalid value , return null\n    \t\treturn null;\n    \t}\n    }\n", "public Builder connectTimeout ( Duration connectTimeout ) { this . connectTimeout = connectTimeout ; return this ; }", "\tprivate void reloadEnumListBoxes(final BaseFilterParser baseFilterParser) {\n\t\tIterator<Entry<String, ListBox>> iter = getEnumListBoxes().iterator();\n\t\twhile (iter.hasNext()) {\n\t\t\tEntry<String, ListBox> entry = iter.next();\n\t\t\treloadSingleListBoxParameters(entry.getValue(), baseFilterParser.getSelectedItems(entry\n\t\t\t\t\t.getKey()), entry.getKey());\n\t\t}\n\t}\n", "public boolean markAsSpam(final SlingHttpServletRequest request,final String id){\n  boolean result=false;\n  try {\n    final ResourceResolver resolver=request.getResourceResolver();\n    final Session session=resolver.adaptTo(Session.class);\n    final Node node=session.getNodeByIdentifier(id);\n    if (node != null) {\n      final Resource resource=resolver.getResource(node.getPath());\n      result=akismetService.submitSpam(resource);\n    }\n  }\n catch (  RepositoryException e) {\n    LOGGER.error(\"Could not submit spam.\",e);\n  }\n  return result;\n}\n", "public final Result get(long timeout, TimeUnit unit) throws InterruptedException,\n            ExecutionException, TimeoutException {\n        return mFuture.get(timeout, unit);\n    }", "protected void fireReferenceRelease(int released) {\n\t\tfinal List<ReferenceListener> list = this.listeners;\n\t\tif (list != null && !list.isEmpty()) {\n\t\t\tfor (final ReferenceListener listener : list) {\n\t\t\t\tlistener.referenceReleased(released);\n\t\t\t}\n\t\t}\n\t}", "\tpublic void setTextColor(Color fg){\n\t\tthis.textColor\t= fg;\n\t\tthis.setData();\n\t}\n", "public boolean isVariable ( ) { return BOOL_ ; }", "public Builder add(String property,Attributes attributes){\n  Map<String,String> map=attributes.getAttributes();\n  StringBuilder stringBuilder=new StringBuilder();\n  stringBuilder.append(property);\n  stringBuilder.append('.');\n  stringBuilder.append(Utils.join(map,'.','(',')'));\n  properties.add(stringBuilder.toString());\n  return this;\n}\n", "\tpublic void setCaseSensitive(String string) {\n\t\tif (string != null && string.equals(CASE_NO)) caseSensitive = CASE_NO;\n\t\telse caseSensitive = CASE_YES; // default\n\t}\n", "\tprotected boolean callChannelNotice(final ChannelInfo cChannel, final ChannelClientInfo cChannelClient, final String sMessage, final String sHost) {\n\t\tfinal CallbackOnChannelNotice cb = (CallbackOnChannelNotice)getCallbackManager().getCallbackType(\"OnChannelNotice\");\n\t\tif (cb != null) { return cb.call(cChannel, cChannelClient, sMessage, sHost); }\n\t\treturn false;\n\t}\n", "public TypeInstance createTypeInstance ( final String name , final String commentString , final BaseType baseType , final Section section , final long sectionOffset ) throws CouldntSaveDataException , CouldntLoadDataException { Preconditions . checkNotNul", "public void addChangeListener(PropertyChangeListener newListener){\n  listener.add(newListener);\n}\n", "<T extends Component> List<T> getFormRowChildren(AbstractComponentContainer container, final Class<T> cls) {\n\n        final List<T> result = Lists.newArrayList();\n        CmsVaadinUtils.visitDescendants(container, new Predicate<Component>() {\n\n            public boolean apply(Component comp) {\n\n                if (cls.isAssignableFrom(comp.getClass())) {\n                    result.add(cls.cast(comp));\n                }\n                return true;\n            }\n        });\n        return result;\n    }", "private void resolveBreakpoints ( ) { if ( debugger . getProcess ( ) . getTargetInformation ( ) == null ) { errorNotAttached ( ) ; step = NUM_ ; return ; } try { debugger . resume ( ) ; } catch ( final DebugException e ) { errorResuming ( e ) ; } step ++ ", "public void togglePause(){\n  mplayer.togglePause();\n  notifyState(getState());\n}\n", "boolean isUnary ( ) ;", "public final boolean growable ( ) { return this . growable ; }", "    protected void loadParameters(IActionConfig actionConfig, String parametersString) {\n\tactionConfig.addParametersFromString(parametersString);\n    }\n", "public byte next ( ) ;", "public void scheduleOrUpdateConsumers(ResultPartitionID partitionId) throws ExecutionGraphException {\n\n\t\tassertRunningInJobMasterMainThread();\n\n\t\tfinal Execution execution = currentExecutions.get(partitionId.getProducerId());\n\n\t\tif (execution == null) {\n\t\t\tthrow new ExecutionGraphException(\"Cannot find execution for execution Id \" +\n\t\t\t\tpartitionId.getPartitionId() + '.');\n\t\t}\n\t\telse if (execution.getVertex() == null){\n\t\t\tthrow new ExecutionGraphException(\"Execution with execution Id \" +\n\t\t\t\tpartitionId.getPartitionId() + \" has no vertex assigned.\");\n\t\t} else {\n\t\t\texecution.getVertex().scheduleOrUpdateConsumers(partitionId);\n\t\t}\n\t}", "protected void doSubLine(byte[] curLine){\n  int sub=(int)Math.ceil((getBitsPerComponent() * getColors()) / 8.0);\n  for (int i=0; i < curLine.length; i++) {\n    int prevIdx=i - sub;\n    if (prevIdx >= 0) {\n      curLine[i]+=curLine[prevIdx];\n    }\n  }\n}\n", "public final boolean success ( ) { return errorCode == NUM_ ; }", "public static ITypedRegion mergePartitions ( ITypedRegion [ ] regions ) { Assert . isNotNull ( regions ) ; if ( regions . length == NUM_ ) { return null ; } String type = null ; int offset = - NUM_ ; int length = NUM_ ; int matcher = - NUM_ ; for ( int i = NUM_ ; i < regions . length ; i ++ ) { if ( type == null ) { type = regions [ i ] . getType ( ) ; } else { if ( ! type . equals ( regions [ i ] . getType ( ) ) ) { return null ; } } if ( offset == - NUM_ ) { offset = regions [ i ] . getOffset ( ) ; } else { if ( regions [ i ] . getOffset ( ) != matcher ) { return null ; } } matcher = regions [ i ] . getOffset ( ) + regions [ i ] . getLength ( ) ; length += regions [ i ] . getLength ( ) ; } return new TypedRegion ( offset , length , type ) ; }", "public static <T> Set<T> toSet(Iterator<? extends T> iterator) {\n\t\treturn Sets.newLinkedHashSet(toIterable(iterator));\n\t}", "AsyncFuture < AddTypeIndexesResult > asyncAddIndex ( String typeName , SpaceIndex index , AsyncFutureListener < AddTypeIndexesResult > listener ) ;", "public List < JCCompilationUnit > parseFiles ( Iterable < JavaFileObject > fileObjects ) { if ( shouldStop ( CompileState . PARSE ) ) return List . nil ( ) ; ListBuffer < JCCompilationUnit > trees = new ListBuffer < > ( ) ; Set < JavaFileObject > filesSoF", "private static PreparedStatement createStatementForUpdate(final Connection connection,\n                                                             final Introspected introspected,\n                                                             final FieldColumnInfo[] fieldColumnInfos,\n                                                             final Set<String> excludedColumns) throws SQLException\n   {\n      final String sql = createSqlForUpdate(introspected, fieldColumnInfos, excludedColumns);\n      return connection.prepareStatement(sql);\n   }", "T interpretElement ( XMLElement elem ) throws UnableToCompleteException ;", "    public boolean isFullPage() {\n\n        return m_fullPage;\n    }\n", "public void updateEmotesets(Set<Integer> emotesets){\n  if (!isVisible() || emotesets == null || emotesets.equals(this.emotesets)) {\n    return;\n  }\n  this.emotesets=new HashSet<>(emotesets);\n  setUpdated(UPDATE_EMOTESET_CHANGED);\n  showEmotes();\n}\n", "public static ReilInstruction createJcc ( final long offset , final OperandSize firstSize , final String firstValue , final OperandSize thirdSize , final String thirdValue , final String ... meta ) { return createBinaryInstruction ( ReilHelpers . OPCODE_J", "public void removeCartItem(int index,LocalDispatcher dispatcher) throws CartItemModifyException {\n  if (isReadOnlyCart()) {\n    throw new CartItemModifyException(\"Cart items cannot be changed\");\n  }\n  if (index < 0)   return;\n  if (cartLines.size() <= index)   return;\n  ShoppingCartItem item=cartLines.remove(index);\n  item.setQuantity(BigDecimal.ZERO,dispatcher,this);\n}\n", "public int y(double lat){\n  return (int)Math.round(dotsPerDeg * (originLat - lat));\n}\n", "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return AA;\ncase 2:\n  return AB;\ndefault :\nreturn null;\n}\n}\n", "public void restoreTable(String tableName, String tempTableName) throws SQLException {\r\n        LOG.debug(\"Restore table {} from {}\", tableName, tempTableName);\r\n        try {\r\n            this.setForeignKeyCheckEnabled(false);\r\n            this.truncateTable(tableName);\r\n            final String sql = \"INSERT INTO \" + tableName + \" SELECT * FROM \" + tempTableName + \";\";\r\n            this.executeUpdate(sql);\r\n        } finally {\r\n            this.setForeignKeyCheckEnabled(true);\r\n        }\r\n    }", "private void replaceInternalHeaderFields(String name,String value){\n  String key=name.toUpperCase();\n  Vector<String> v=getHeaders(key);\n  if (v == null) {\n    v=new Vector<>();\n    mHeaderFields.put(key,v);\n  }\n  if (value != null) {\n    v.clear();\n    v.add(value);\n  }\n else {\n    mHeaderFields.remove(key);\n  }\n}\n", "public void addUsedConverter(IConverter converter, Object sourceObject,\r\n\t\t\tTypeReference<?> destinationType) {\r\n\t\tUsedConverter usedConverter = new UsedConverter(converter,\r\n\t\t\t\tsourceObject == null ? null : sourceObject.getClass(),\r\n\t\t\t\tdestinationType);\r\n\t\tif (!usedConvertersSet.contains(usedConverter)) {\r\n\t\t\tusedConvertersSet.add(usedConverter);\r\n\t\t\tusedConvertersList.add(usedConverter);\r\n\t\t}\r\n\t}", "public final Mono<T> otherwise(Predicate<? super Throwable> predicate,Function<? super Throwable,? extends Mono<? extends T>> fallback){\n  Objects.requireNonNull(predicate,\"predicate\");\n  return otherwise(null);\n}\n", "    private boolean handleSpecialCases(final ImageReadParam param) {\n        if (param instanceof NetcdfReadParam) {\n            final NetcdfReadParam p = (NetcdfReadParam) param;\n            p.setBandDimensionTypes(AxisType.Height, AxisType.Pressure);\n            if (index != 0) {\n                p.setSliceIndice(AxisType.Time, index - 1);\n            }\n            return true;\n        } else if (param instanceof MosaicImageReadParam) {\n            ((MosaicImageReadParam) param).setSubsamplingChangeAllowed(true);\n            return true;\n        }\n        return false;\n    }\n", "public void suspendEncoding ( ) throws java . io . IOException { flushBase64 ( ) ; this . suspendEncoding = BOOL_ ; }", "public static void moveDirectoryToDirectory ( File src , File destDir , boolean createDestDir ) throws IOException { if ( src == null ) { throw new NullPointerException ( STR_ ) ; } if ( destDir == null ) { throw new NullPointerException ( STR_ ) ; } if (", "private CGlobalSettings ( ) { }", "private void configure(Member.Type type, CompletableFuture<Void> future) {\n    // Set a timer to retry the attempt to leave the cluster.\n    configureTimeout = cluster.getContext().getThreadContext().schedule(cluster.getContext().getElectionTimeout(), () -> {\n      configure(type, future);\n    });\n\n    // Attempt to leave the cluster by submitting a LeaveRequest directly to the server state.\n    // Non-leader states should forward the request to the leader if there is one. Leader states\n    // will log, replicate, and commit the reconfiguration.\n    cluster.getContext().getServerState().reconfigure(ReconfigureRequest.builder()\n      .withIndex(cluster.getConfiguration().index())\n      .withTerm(cluster.getConfiguration().term())\n      .withMember(new ServerMember(type, serverAddress(), clientAddress(), updated))\n      .build()).whenComplete((response, error) -> {\n      if (error == null) {\n        if (response.status() == Response.Status.OK) {\n          cancelConfigureTimer();\n          cluster.configure(new Configuration(response.index(), response.term(), response.timestamp(), response.members()));\n          future.complete(null);\n        } else if (response.error() == null || response.error() == CopycatError.Type.NO_LEADER_ERROR) {\n          cancelConfigureTimer();\n          configureTimeout = cluster.getContext().getThreadContext().schedule(cluster.getContext().getElectionTimeout().multipliedBy(2), () -> configure(type, future));\n        } else {\n          cancelConfigureTimer();\n          future.completeExceptionally(response.error().createException());\n        }\n      }\n    });\n  }", "\tprotected void updateEditorTitle() {\n\t\tif (getProcessFlow() != null) {\n\t\t\tIWebFlowGeneratorHelper helper = GeneratorHelperFactory.create(getProcessFlow());\n\t\t\tsetPartName(helper.getClassName());\n\t\t}\n\t}\n", "public void removeComponentResources ( ) { FacesContext context = FacesContext . getCurrentInstance ( ) ; UIViewRoot viewRoot = context . getViewRoot ( ) ; for ( UIComponent componentResource : viewRoot . getComponentResources ( context , STR_ ) ) { viewR", "public static long ipToLong(String address){\n  if (address == null)   return 0L;\n  String[] quads=address.split(\"\\\\.\");\n  long result=0;\n  if (quads.length != 4)   return 0L;\n  try {\n    result+=Integer.parseInt(quads[3]);\n    result+=Long.parseLong(quads[2]) << 8L;\n    result+=Long.parseLong(quads[1]) << 16L;\n    result+=Long.parseLong(quads[0]) << 24L;\n  }\n catch (  Exception ex) {\n    return result;\n  }\n  return result;\n}\n", "public void write(int b) throws IOException {\n  log.info(\"random-write(0x\" + Long.toHexString(getFilePointer()) + \",1)\");\n  _file.write(b);\n}\n", "    public void installConstraintLoader(ConstraintLoader loader) {\n        ConstraintRepository.getInstance().setLoader( loader );\n    }\n", "    public boolean containsProperties(String value) {\n        if (value == null) {\n            return false;\n        }\n        final int len = value.length();\n        for (ParsePosition pos = new ParsePosition(0); pos.getIndex() < len;) {\n            if (", "private void processLocalStore(int seen) {\n        if (stack.getStackDepth() == 0) {\n            return;\n        }\n        OpcodeStack.Item itm = stack.getStackItem(0);\n        String sig = itm.getSignature();\n        if (sig.startsWith(Values.SIG_ARRAY_PREFIX)) {\n            int reg = RegisterUtils.getAStoreReg(this, seen);\n            Integer elReg = (Integer) itm.getUserValue();\n            if (elReg != null) {\n                wrappers.put(Integer.valueOf(reg), new WrapperInfo(elReg.intValue()));\n            }\n        } else {\n            Integer elReg = (Integer) itm.getUserValue();\n            if ((elReg != null) && (elReg.intValue() == RegisterUtils.getAStoreReg(this, seen))) {\n                bugReporter.reportBug(new BugInstance(this, BugType.AWCBR_ARRAY_WRAPPED_CALL_BY_REFERENCE.name(), NORMAL_PRIORITY).addClass(this)\n                        .addMethod(this).addSourceLine(this));\n            }\n        }\n    }", "public void onSurfaceChanged(GL10 glUnused,int width,int height){\n  Log.d(TAG,\"Surface size: \" + width + \"x\"+ height);\n  int video_width=mMediaPlayer.getVideoWidth();\n  int video_height=mMediaPlayer.getVideoHeight();\n  Log.d(TAG,\"Video size: \" + video_width + \"x\"+ video_height);\n  GLES20.glViewport(0,0,video_width,video_height);\n  mWidth=Math.min(VideoDumpConfig.MAX_DUMP_WIDTH,video_width);\n  mHeight=Math.min(VideoDumpConfig.MAX_DUMP_HEIGHT,video_height);\n  mStartX=video_width / mWidth / 2 * mWidth;\n  mStartY=video_height / mHeight / 2 * mHeight;\n  Log.d(TAG,\"dumping block start at (\" + mStartX + \",\"+ mStartY+ \") \"+ \"size \"+ mWidth+ \"x\"+ mHeight);\n  int image_size=mWidth * mHeight * VideoDumpConfig.BYTES_PER_PIXEL;\n  mBuffer=ByteBuffer.allocate(image_size);\n  int bpp[]=new int[3];\n  GLES20.glGetIntegerv(GLES20.GL_RED_BITS,bpp,0);\n  GLES20.glGetIntegerv(GLES20.GL_GREEN_BITS,bpp,1);\n  GLES20.glGetIntegerv(GLES20.GL_BLUE_BITS,bpp,2);\n  Log.d(TAG,\"rgb bits: \" + bpp[0] + \"-\"+ bpp[1]+ \"-\"+ bpp[2]);\n  Properties prop=new Properties();\n  prop.setProperty(\"width\",Integer.toString(mWidth));\n  prop.setProperty(\"height\",Integer.toString(mHeight));\n  prop.setProperty(\"startX\",Integer.toString(mStartX));\n  prop.setProperty(\"startY\",Integer.toString(mStartY));\n  prop.setProperty(\"bytesPerPixel\",Integer.toString(VideoDumpConfig.BYTES_PER_PIXEL));\n  prop.setProperty(\"frameRate\",Integer.toString(VideoDumpConfig.FRAME_RATE));\n  try {\n    prop.storeToXML(new FileOutputStream(VideoDumpConfig.ROOT_DIR + VideoDumpConfig.PROPERTY_FILE),\"\");\n  }\n catch (  java.io.IOException e) {\n    Log.e(TAG,e.getMessage(),e);\n  }\n}\n", "void fillEntryTree(Set<PageLeafEntry> entries,\n                     Row row)\n  {\n    int ptr = _rowHead;\n    \n    byte []buffer = _buffer;\n\n    while (ptr < BLOCK_SIZE) {\n      int code = buffer[ptr] & CODE_MASK;\n      int len = getLength(code, row);\n\n      if (code == INSERT || code == REMOVE) {\n        PageLeafEntry entry = new PageLeafEntry(this, row, ptr, len, code);\n        \n        entries.add(entry);\n      }\n      \n      ptr += len;\n    }\n  }", "private static Map < String , Class < ? > > loadPrimitiveTypes ( ) { Map < String , Class < ? > > types = new HashMap < String , Class < ? > > ( ) ; types . put ( byte . class . getName ( ) , byte . class ) ; types . put ( short . class . getName ( ) , sh", "@SuppressWarnings(\"unchecked\")\n\tpublic <A extends Annotation> A getAnnotation(Class<A> type) {\n\t\tfor (Annotation annotation : this.annotations) {\n\t\t\tif (type.isInstance(annotation)) {\n\t\t\t\treturn (A) annotation;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "    protected Object handleRow(ResultSet rs) throws SQLException {\n        return this.convert.toArray(rs);\n    }\n", "\tpublic PlanPolygon getPolygon () {\n\t\treturn (PlanPolygon)getSource ();\n\t}\n", "public synchronized void build(){\n  if (built)   return;\n  root=itemBoundables.isEmpty() ? createNode(0) : createHigherLevels(itemBoundables,-1);\n  itemBoundables=null;\n  built=true;\n}\n", "protected void addPackageList(Content contentTree) throws IOException {\n        Content caption = getTableCaption(configuration.getResource(\n                \"doclet.ClassUse_Packages.that.use.0\",\n                getLink(new LinkInfoImpl(configuration, LinkInfoImpl.Kind.CLASS_USE_HEADER, classdoc))));\n        Content table = (configuration.isOutputHtml5())\n                ? HtmlTree.TABLE(HtmlStyle.useSummary, caption)\n                : HtmlTree.TABLE(HtmlStyle.useSummary, useTableSummary, caption);\n        table.addContent(getSummaryTableHeader(packageTableHeader, \"col\"));\n        Content tbody = new HtmlTree(HtmlTag.TBODY);\n        Iterator<PackageDoc> it = pkgSet.iterator();\n        for (int i = 0; it.hasNext(); i++) {\n            PackageDoc pkg = it.next();\n            HtmlTree tr = new HtmlTree(HtmlTag.TR);\n            if (i % 2 == 0) {\n                tr.addStyle(HtmlStyle.altColor);\n            } else {\n                tr.addStyle(HtmlStyle.rowColor);\n            }\n            addPackageUse(pkg, tr);\n            tbody.addContent(tr);\n        }\n        table.addContent(tbody);\n        Content li = HtmlTree.LI(HtmlStyle.blockList, table);\n        contentTree.addContent(li);\n    }", "private static JsonNode mergeResponse ( List < Supplier < Pair < Integer , JsonNode > > > results ) { ArrayNode list = JsonNodeFactory . instance . arrayNode ( ) ; for ( Supplier < Pair < Integer , JsonNode > > result : results ) { JsonNode node = result ", "    public void close() throws java.io.IOException {\n        tmpWriter.close();\n        writeRecords();\n        _writer.write(TAPE_FOOTER);\n        _writer.close();\n    }\n", "\tprotected PlugableEvent creatEvent(Object[] params){\n\t\treturn new PlugableEvent(src,params);\n\t}\n", "        public void startDocument() throws SAXException {\n            parsingInProgress = true;\n            qNameStack.removeAllElements();\n            employeeInfos.removeAllElements();\n        }\n", "    protected void addAppObjectsPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Application_appObjects_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_Application_appObjects_feature\", \"_UI_Application_type\"),\n\t\t\t\t ModelPackage.Literals.APPLICATION__APP_OBJECTS,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t null,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public void addKeyword(String keyword){\n  keywordSet.add(keyword);\n}\n", "public static boolean isTerminationCancelled(HttpServletRequest request){\n  String status=request.getParameter(IFSConstants.TERMINATION_STATUS);\n  if (status != null && status.equalsIgnoreCase(IFSConstants.CANCEL)) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n", "protected final void appendBytes ( final byte [ ] data ) { for ( final byte element : data ) { byteData . add ( element ) ; } }", "private static int exitWithStatus ( int status ) { if ( ToolIO . getMode ( ) == ToolIO . SYSTEM ) { System . exit ( status ) ; } return status ; }", "private View fillRight(int pos,int nextLeft){\n  View selectedView=null;\n  int end=(getRight() - getLeft());\n  while (nextLeft < end && pos < mItemCount) {\n    boolean selected=pos == mSelectedPosition;\n    View child=makeAndAddView(pos,nextLeft,true,mListPadding.top,selected);\n    nextLeft=child.getRight() + mDividerWidth;\n    if (selected) {\n      selectedView=child;\n    }\n    pos++;\n  }\n  setVisibleRangeHint(mFirstPosition,mFirstPosition + getChildCount() - 1);\n  return selectedView;\n}\n", "public List<QueryStatisticInner> listByQuery(String resourceGroupName, String serverName, String databaseName, String queryId) {\n        return listByQueryWithServiceResponseAsync(resourceGroupName, serverName, databaseName, queryId).toBlocking().single().body();\n    }", "    public String removePage() {\n\tint selectedIndex = pane.getModel().getSelectedIndex();\n\n\tif (selectedIndex == -1)\n\t    return null;\n\n\tString pageName = pane.getTitleAt(selectedIndex);\n\tpane.removeTabAt(selectedIndex);\n\treturn pageName;\n    }\n", "protected List<Map<String, ?>> generateModifiers(Set<String> modifiers) {\n\t\tfinal List<Map<String, ?>> list = new ArrayList<>();\n\t\tif (!modifiers.isEmpty()) {\n\t\t\tlist.add(pattern(it -> {\n\t\t\t\tit.matches(keywordRegex(modifiers));\n\t\t\t\tit.style(MODIFIER_STYLE);\n\t\t\t\tit.comment(\"Modifiers\"); //$NON-NLS-1$\n\t\t\t}));\n\t\t}\n\t\treturn list;\n\t}", "    private void clearIndexToFirst() {\n        for (;;) {\n            Index<K,V> q = head;\n            for (;;) {\n                Index<K,V> r = q.right;\n                if (r != null && r.indexesDeletedNode() && !q.unlink(r))\n                    break;\n                if ((q = q.down) == null) {\n                    if (head.right == null)\n                        tryReduceLevel();\n                    return;\n                }\n            }\n        }\n    }\n", "private CSVRecord(List<String> record){\n  this.record=Objects.requireNonNull(record);\n}\n", "public void addListener ( final IDebuggerTemplateManagerListener listener ) { m_listeners . addListener ( listener ) ; }", "public static int convertBondStereo(IBond bond) {\n        int value = 0;\n        switch (bond.getStereo()) {\n            case UP:\n                value = 1;\n                break;\n            case UP_INVERTED:\n                value = 1;\n                break;\n            case DOWN:\n                value = 6;\n                break;\n            case DOWN_INVERTED:\n                value = 6;\n                break;\n            case UP_OR_DOWN:\n                value = 4;\n                break;\n            case UP_OR_DOWN_INVERTED:\n                value = 4;\n                break;\n            case E_OR_Z:\n                value = 3;\n                break;\n            default:\n                value = 0;\n        }\n        return value;\n    }", "    public void addInputField(InputField field) {\n        addInputField(field, null, null);\n    }\n", "private void verifyIsRoot(){\n  if (hierarchyElements.size() != 0) {\n    throw new IllegalStateException(\"This is not the root. Can \" + \"only call addCounter() on the root node. Current node: \" + hierarchy);\n  }\n}", "public ApiResponse<TaskStatusesHistoryEnvelope> getStatusesHistoryWithHttpInfo(String tid, String did) throws ApiException {\n        com.squareup.okhttp.Call call = getStatusesHistoryValidateBeforeCall(tid, did, null, null);\n        Type localVarReturnType = new TypeToken<TaskStatusesHistoryEnvelope>(){}.getType();\n        return apiClient.execute(call, localVarReturnType);\n    }", "private void createPartitionRegion(List vmList,int startIndexForRegion,int endIndexForRegion,int localMaxMemory,int redundancy){\n  Iterator nodeIterator=vmList.iterator();\n  while (nodeIterator.hasNext()) {\n    VM vm=(VM)nodeIterator.next();\n    vm.invoke(createMultiplePRWithTotalNumBucketPropSet(prPrefix,startIndexForRegion,endIndexForRegion,redundancy,localMaxMemory,11));\n  }\n}\n", "public abstract void freeSLHolder ( IStoredListIterator < T > slh ) ;", "    public void retrieve(GL gl) {\n        int retrievalFace = face;\n        if (face == GL.GL_FRONT_AND_BACK)\n            retrievalFace = GL.GL_FRONT;\n        \n        FloatBuffer buff = FloatBuffer.allocate(17);\n        \n        gl.glGetMaterialfv(retrievalFace,gl.GL_SPECULAR,buff);\n        buff.get(this.specular);\n        gl.glGetMaterialfv(retrievalFace,gl.GL_EMISSION,buff);\n        buff.get(this.emissive);\n        gl.glGetMaterialfv(retrievalFace,gl.GL_AMBIENT,buff);\n        buff.get(this.ambient);\n        gl.glGetMaterialfv(retrievalFace,gl.GL_DIFFUSE,buff);\n        buff.get(this.diffuse);\n        gl.glGetMaterialfv(retrievalFace,gl.GL_SHININESS,buff);\n        this.shininess = buff.get();\n    }\n"], "comment": ["the action to be performed by this scheduler task", "cancels an event lease .", "removes from given list the first element that matches given predicate .", "sets the value of the id property to com arsdigita db sequences getnextvalue only if the id property is not already set", "return true if running in single seq mode", "rotates this box up and down rotateanglez .", "starts the visit of a stack map frame .", "because implementors can be of any type the configuration is an object no constraints to impose here as there is no common set of configuration properties .", "called when the user has accepted the eula and the dialog closes .", "open a new stream of the given name", "gets the values of the given attribute contained in the dn .", "tears down the text fixture", "tests that getattribute return the correct attribute id preserving entry order .", "helper method to create a background task for running the interactive evolutionary algorithm .", "this is called when the fragment is going away .", "sets the minwidth , prefwidth , and maxwidth to the specified value .", "compares this partial with another returning an integer indicating the order .", "function permitting an unintelligent outside function ie editfeatures frame to set the default values used to popylate the tables entries", "deactivates the scheduler nicely .", "deactivates the scheduler nicely .", "adds a coupling to the archive .", "compares the labels for the two given json objects .", "update the lowutilizationfiles and mustbecleanedfiles fields with new read only collections and update the backlog file count", "read a message from the stream", "if the local message copy has changes", "removes match from sequence", "returns multiple attributes for a key .", "updates the specified user account on the specified compute node .", "creates the extended config object when it does not exist .", "main processing method for the rungotoviolation object", "construct a daemon thread", "creates a new iterator object .", "find the _ fields constant that matches fieldid , or null if its not found .", "loads all flowfileprocessor flowfilecomparator reportingtask class types that can be found on the bootstrap classloader and by creating classloaders for all nars found within the classpath .", "translate a string to a given locale .", "assign a persistence id to this object", "read a byte int from binlog .", "add the given role to the composite roles list of the relationship", "initiates the process for the given mechanism .", "get the encoding value of a glyph given its name and a charset .", "destroys a destination gstopicimpl or gsqueueimpl and then unbinds from the jndi registry .", "verify that if we can start up a pipeline containing filters and release it the filters are correctly configured prepared and released .", "an employee created using an id and a name", "returns a vector that contains the same objects as the array .", "creates a new debugger object .", "perform common initialise functions", "deletes album with id rowid", "process multiple samples from input buffer to output buffer", "this method gets invoked when a service ' s schema has been changed .", "add an image to the list with list id equal to list id passed .", "part which describes the information group inside document area", "gets a property associated to this file .", "create ( if required ) and then calculate the variable gradients ( backward pass ) for this graph .", "compute new maxservicelease and maxeventlease values .", "set parity setting", "delete the spatial reference system , cascading", "sets the learning experience identifier to the given string", "read a single integer value from the named file .", "initializes the codec", "return whether synchronization is enabled for this mapping .", "returns true if there is no content in this contentelement .", "create the gradient for the x drop shadow .", "adds a stack trace to a collection set if it is unique .", "method setzoom", "prepare the dataset required for running test cases", "creates a new action object .", "encodes an array of strings into a single string than can be decoded to the original array using the corresponding decode method .", "initiates a call to the remote member .", "check the transactions info that have expired", "we pick only one vdc assumes the role to rotate ipsec key in post yoda .", "this method can be used to add new code or data references to operand expressions .", "gets all parameters from a url", "create a secure client socket that is connected to the given address and port .", "perform setup for training .", "given two points in screen pixel coordinates , return the compass direction that point b lies in from point a from an isometric perspective .", "returns an enumeration describing the available options .", "this converts sourcetype to a non primitive by using groovy casting .", "add the specified clipboard listener .", "visits a label .", "return if the debug flag got passed in and debug logging is enabled in the logging framework", "used to add an already existing object to the list of topmost things", "second requests block .", "turn the documentfragment into a dom tree suitable as a build file when serialized", "returns the index of the first element equals to a specific value", "update the ports of the given figure", "create a new source stream and store it in the given streamset", "illuminate an entity and all entities that are between us and the hex", "returns the url of the source pack of this plugin", "appends to the stringbuilder the string representation of the logic section", "find the document given a self link and version number .", "given a process and a string , monitors the output of the process for the string .", "performs a \" smart rebalance . \" the target load is set to ( cluster load / node count ) , where \" load \" is determined by the sum of all work unit meters in the cluster .", "webdav unlock method implementation .", "creates a new instance of a builder with the data of the passed builder .", "returns true iff the status represents an obligation that is currently being proved .", "convenience method for getting the file specified in a request .", "handles the http get request .", "creates a new stateinfo that is a copy of the passed in stateinfo .", "prompt the user to export a context", "get the user from the parent tag and print out the users name", "initialize statement for action like create update delete which need table name", "timeout millisecond default is ms", "show the options screen when called from the main menu", "adds a language limit to the query", "creates and shows the toolbar to access all the guitools", "get the value of an argument of the memo supposed to be an identifier of an artifact", "register a language handler for the given file extensions .", "find user profile based on the input provided", "ensures that an object reference passed as a parameter to the calling method is not null .", "create a namematcher that matches job names containing the given string .", "convert an enum to the counter portion of its name .", "validates that the argument can be converted to the specified class , if not throws an exception .", "returns the list of personal contacts of the authenticated account", "returns true if a given value is valid for this quantity and false otherwise", "handle a security exception thrown during initializing the", "returns the constant map index to name", "adds a new listener for changes to the avatar in use", "get the nearest scale .", "invoke postdetach on any detached instances that implement", "spookyhash 4 - word - state ( up to four values produced ) .", "removes an object form the navigation manager", "renames a category in the hashmap", "does an url encoding of the string using the escape character .", "indicates whether an audio input stream of a specified format can be obtained from an audio input stream of another specified format .", "get the object for the requested element", "copies the parameter specification from the given node , but makes sure it ' s optional .", "returns a matcher that matches against properties that are declared in the constructor .", "initialize the scalar values underline position etc to those from the source post table .", "the resource policies that exist in this account .", "returns the short value for the given key .", "one of ways of creating builder .", "private method that assists registeruser inserts a personrolecourse in the personrolecourse repository", "unmarshals the xml content and adds the file to the bundle files .", "creates a new menu object .", "adds the supplied value to this value", "removes the current one", "convert a list of string / string / bool to server objects .", "adds a new expression tree to the cache .", "combine the dq masks of all spectra inot a single mask", "add a moblog to a favorites list", "get the number of column names", "marshall the given parameter object .", "creates a new action object .", "list all apps that are assigned to a hostname .", "generates a recurrence iterator that iterates over the union of the given recurrence iterators .", "converts a token into an assertion .", "this is a callback that will allow us to create the viewer and initialize it", "null is only equal to null", "sends a list of supported progress types", "get all the response headers", "edits a local comment associated with an edge .", "replaces the item at a specific index with another item .", "handles the resize of the canvas", "return the value of the version property", "evaluate this objects term if its not null execute the body", "called to process character data within an element of the xml stream", "returns a copy of the string with leading and trailing whitespace omitted", "fetches the list of message ids", "generate an example of the dataset .", "trace a stream to system . out if the \" label \" has been configured to enable tracing .", "adds the specified http header", "generates points and adds them to the given list .", "prints the list of fields in a simple human readable format .", "write part of a multipart request to the request body", "returns the node that is effectively declaring the given target .", "create a content object", "creates a new register tracking action object .", "extract host name from resource path .", "invoked after the filebase of a module changed .", "open the neo4j graph database", "put a new value in map .", "it is of a biginteger category if the provided type is a long category or a biginteger .", "the graphical representation of the labels on the x axis .", "summarizes the test methods of the given class", "removes an \" active line range \" listener from this text area .", "constructs a priority queue with the specified capacity and comparator .", "get list of users from application server", "builds the to string .", "this function is called by the iterator for each item of a collection .", "get link for the next package tree file .", "flushes the cache which might be essential when adding new elements", "called when the menubar is a part of a beancontext , and it is added to the beancontext , or while other objects are added to the beancontext after that .", "create a new builder", "returns true if running on google app engine ( both production and development environment ) .", "infers addressing type from contents of string containing a record .", "an array of elements , where each element corresponds to a row in a stream record ( a stream record can have more than one row ) .", "find an appropriate icon for this type searching the supertype if needed", "sets the frequency of an element", "adds a sequence of data to the set with default weight", "return the list of localized categories as a string the categories are separated by a space", "runs an asynchronous task in this interpreter internal thread pool", "checks whether were in a static state displaying no progress", "helper method that uses alarmmanager to schedule cache cleanup at regular intervals .", "sets the optionsbattledesiredfps", "creates a reader that assumes all encoded data is data and does not treat the final character as a check digit .", "transfomiert eine not ( not ) operation .", "creates a client transaction .", "use this api to count sslvserver _ sslciphersuite _ binding resources configued on netscaler .", "adds an end tag .", "delete records from all main tables", "determines whether a view belongs to this module .", "returns the millisecond preceding this one", "creates a generic servicedependencybuilder with type = \" service \" and subtype = \" other \" .", "creates a new tutorial step object .", "sets the magnitude of the variable star", "indicates if this filter is enabled or disabled", "add this sitemap to the list of sitemaps ,", "restarts one or more virtual machines in a vm scale set .", "based on name put in httpsession or from list in httpsession", "add a reference to this davsession", "used internally for lookahead", "checks whether proxy is connected to embedded or remote space .", "creates the tabbed pane .", "indicates if the radio button has been selected", "upload new tone file", "clears the applications of this system model", "add an jfxx extension marker segment from the stream wrapped in the jpegbuffer to the list of extension segments .", "return the length of the sequence", "return whether the past k time steps prior to t and t of the two time series series and series match within epsdest at each point", "this method enables label with fps value on the screen", "removes an attribute other than from the master list", "creates a new settings object backed by graph settings from the configuration file .", "implemented by derived class to return whether the view is in a state where the user can pull to refresh by scrolling from the start .", "initialise this component", "dispatches the response then cancels itself and notifies the stunstack for its termination .", "create a set of singlemodelobservers for a collection of models but don t yet update them", "create the workspace file menu .", "set up guaranteed delivery message properties .", "parse a json data structure from content at a given url .", "entry point for resolving a unary operator given an operator tag and an argument type .", "create a default error message .", "load query data gfs .", "convenience method that creates vplex volumes .", "constructs a new requestparams instance and populate it with multiple initial key value string param .", "appends a global comment to an edge .", "closes the dialog", "compute the smallest integer that is greater than or equal to the logarithm to the base 2 of the given biginteger .", "the method iskeyattribute can be overwritten by subclasses which are using key attributes , in order to determine if a specific attribute is used as a join key .", "evaluates the response and resolves the deferred .", "returns the type of match to use for a given type .", "sets the number of choice points", "load stored network details", "create result file for the specific iteration ( finalresults . txt ) and write some results to the console .", "throws illegalargumentexception if to and from are incompatible meaning they e . g .", "reads the query from the input file", "check exists of the name", "sets whether property inheritence is enabled or disabled", "creates a new state object when a node is clicked with the middle mouse button .", "clears the observer list so that this object no longer has any observers .", "removes a cached metaclass from the registry", "decenters to end depending on the angle", "initialize the compute shader .", "opens dialog for login message settings .", "creates new instance of storage .", "write resolver vis map . tab br corpus name ? ? ?", "indicates if the item , at the provided position , is selected .", "matches a bindertype to a viewtype , handles list item binding inside the appropriate binder", "called if the down motion event is intercepted by this layout .", "invoked if the function to which this function resolves to has been changed .", "insert the object to the end of the list", "verbalizes this node", "start this watchable and run until it is finished or stopped .", "handler for when an image was successfully loaded .", "sets a path a marked and color it", "save an email to exchange server", "returns the number of elements in this queue .", "given a list of checks ensures that the checks are in the bin .", "completes the operation with failure .", "validates that the value supplied is not null .", "adds a host to the mac / vlan - > switchport mapping", "removes a file from the list .", "opens a ledger for reading .", "get component or bean by type .", "remove a section from this railroad", "update the anonymous status of the proxy", "marshall the given parameter object .", "returns true if name registration succeeds .", "this adds a property descriptor for the res feature", "convert an actionpattern object into lisp", "create a okhttpstack with a custom okhttpclient", "creates a new settings type by copying the settings of another settings type .", "this method was created by m", "throw a runtimeexception with the various information from the debug box div id debug div for debugging purposes", "initializes this analyzer .", "create a snapon button located in the scrollpane top left corner", "returns the item which is currently at the top of the receiver", "creates storage file entities from the list of storage files .", "creates a new ordered array containing the elements in the specified array .", "removes a single instance of the specified element from this collection if it is present optional operation", "reads header information for the given image , if possible .", "method to create & send the clientmembershipmessage to admin members .", "sends the taskstop event to the handlers for it .", "creates the small control panel below the selection list", "a method to construct a usertexttype compliant with the 2016 schema for imf compositionplaylist documents", "gets the rearmost vehicle on this road", "shows a specific toast and cancels a previous one , if existing .", "actually invoke the delegate renderfilter with the given request and response .", "pauses delivery of messages to this member .", "create an instance with the specified primary and secondary selection mechanisms .", "the operation coordinatedimension shall return the dimension of the coordinates that define this gm object which must be the same as the coordinate dimension of the coordinate reference system for this gm object", "print text with h2 tag", "returns a string representation of the object in the form fileid offset", "returns the outbound application data closure state", "monitors sla state of the replication group", "this is called when the popup window is pressed .", "returns a copy of the server proxy with the specified client constraints and methods mapping .", "evaluates the trigger against actualvalue ( passed as parameter ) .", "paints the border of a tab of a tabbed pane .", "tag substantivated adjectives and participles , which are currently tagged not tagged correctly", "add a timeeventlistener to the clock , so it knows who to update when the time changes .", "reads the value of the service changed client characteristic configuration descriptor ( cccd ) .", "read the number .", "abstract tuner controller class .", "given a field node checks if we are accessing or setting a private field from an inner class .", "returns true if this file is being referenced in the manifest", "determine if a charsequence can be parsed as a double .", "$ antlr start \" select \"", "creates a persistence exception with the given error message", "create a name value pair cookie", "get the affine transform that brings from the world envelope to the rectangle .", "determines if the layoutdirection is left to right", "set the time the request was issued .", "indicate to the inventory to replenish by the amount associated with the demand supplied demand getamountfilled is used to know the amount of the replenishment", "constructs an exception indicating the user aborted the operation .", "returns the length ( in days ) of the year provided by internalget ( year ) .", "returns a header consisting of all headerentries having given key", "handles unicast udp srvreg message arrived to this directory agent .", "initialize egl for a given configuration spec .", "initialize ( or reset ) this synchronization point .", "formats a double to produce a string .", "creates complex phrase query from the cached tokenstream contents", "produce a mask of those elements which fall in a range", "convenience method to split a charsequence with whitespace as delimiter .", "list available softwares for this template id", "creates a new step end action .", "returns the ftp code that has to be printed to the control connection for the server to understand the request", "pre - multiply a rotation around the z axis to this matrix by rotating the given amount of radians about the z axis and store the result in dest .", "routine called whenever an axis fault is caught ; where they are logged and any other business .", "build bulk processor bulk processor .", "set the current bowler to the one supplied", "compiles the named file using the options of the current compilation session up to the same compilation pass as the currently active task in the task queue", "bind outstanding request to token , or fail and set to unbound .", "simple deep copy , that leverages java serialization .", "create an xfield object from a bcel field .", "accumulate values under a key", "removes the specified group by item", "checker for the \" jvmclassesverboselevel \" variable .", "test read and write empty clusterpolicy object", "for efficiency drawing directly performed in this method make sure an appropriate matrix was defined before will draw onto 0 0 size max data", "use this api to fetch filtered set of gslbsite _ gslbservice _ binding resources .", "enqueues a new task .", "get the max value for a short", "get tags from annotation .", "constructor for primary key", "set the http . maxconnections property to the given value .", "translates the adapter in y", "sets the author", "clear all the data elements used to draw the scribble", "marshall the given parameter object .", "construct a new case sensitive wildcard filter for a single wildcard .", "package - level visibility for testing purposes ( just usage / errors at this stage )", "return the first child element returns the first element .", "if not already created , a new map - key - foreign - key element with the given value will be created .", "notifies all listeners that validation failed", "remove current element .", "this method checks the correct syntax of a language node", "checks the validity of the direct memory capacity assuming n , k .", "this method performs the actual send , but does no parameter checking and gets no locks needed to perform the send .", "calculates the arithmetic mean of all values between start and end .", "returns the networkobject matching the given name", "reflects moving tasks in the task hierarchy .", "add accounting facts validation listener", "returns the number of rows matching the dynamic query .", "create a new toplevel or member class symbol with given name and owner and enter in ` classes ' unless already there .", "this will check a given binary determine if it exists and determine that it has either the permissions or .", "un - escape and return the character at position i in string s .", "unconditioned way to throw an exception", "concatenates two strings by copying data values .", "iterates from this number down to the given number , inclusive , decrementing by one each time .", "generates a solrqueryrequest using the localrequestfactory", "puts a byte and a short into this byte vector .", "attempt to parse json from a list , then add all results to an output collection .", "return an xpath expression describing an element", "converts the buffered bytes into chars based on the specified encoding and writes them to the provided writer .", "adds a method reference to the constant pool of the class being build .", "creates a new driverdigitalio object on the default driver station", "query - by method for field firstname", "sets the enabled status of this jhdlprintwriter object", "returns a beta distributed random number ; bypasses the internal state .", "reads a utf - 8 string .", "get the active cipher suites .", "sets a watch for a particular event id to be extracted .", "add basesub to group", "return the tabbedpane", "handler for policy origin selector changes", "sets this surfacedata object to the invalid state", "start an email app to send an invitation to selected contacts .", "creates line content objects for a single comment string .", "convenience method to append all the characters in iterator to the stringbuffer result .", "this return a query that represents the documents that match the next hop in the query .", "this method is ignored if the listener is not in the list of known listeners .", "called to broadcast message on mbeanserver event bus .", "adds a path in the dom", "return the list of the children of the node of the given path .", "the editing cell should be selected or not", "removes the given x509certificate from this user", "tell whether this corner has a rounded outer corner .", "combination peek / poll method that uses a boolean parameter to switch between the two behaviors", "returns a vector the same length as vec whose elements are clones of the elements of vec .", "ensures that the directories exist", "returns the tick unit in the collection that is greater than or equal to in size the specified unit", "redoes the last undone action", "marshall the given parameter object .", "reads the header off of an inputstream and returns a cacheheader object .", "internal method to wrap cycle computations which should be tractable .", "constructs a web server .", "add the created action message for the key ' success . create _ crawling _ config _ at _ wizard ' with parameters .", "build the ui for this example .", "adds all loaded plugins which are not mentioned in the configuration file to the list model .", "this is where the ghost image is drawn", "returns a flickrphoto object if the given url is to a photo or flickr user .", "gets the date item for date item values", "create a new instance for a context and with a custom url .", "coping certain file to destination file .", "create a new full text index for a table and column list .", "converts set of cot trusted providers to map .", "determine if the dragged data is a file list .", "add a query to the end of the queue", "add class and method annotations for given method .", "get the single instance of the top type .", "setter for value - sets the value of lemma , c", "returns true if values will be enclosed by a quote character .", "verify that we can skip forwards using a couple of different buffer sizes .", "clears all stored static information like that intresting orders whereexpressions binded variables e t c", "deploys resources to a resource group .", "propagates the result of a comparision to all registered listeners .", "stop the server", "notifies that a the resource was borrowed .", "swaps the data at the given positions .", "messaged when the document has created an edit the edit is added to graphundomanager an instance of undomanager", "triggered after synchronization batch of operations was completed successfully .", "prints a long to the stream .", "accessor method for private instance variable expectedreturnrate", "appends the given data to string returned by getcharaceters", "this adds a property descriptor for the class name feature", "sets the total row count on the border and calls a repaint if required", "uninstall package and clear data of app silent by root", "returns a shallow copy of this concurrentskiplistset instance", "discard all stored undos and hide the undo popup dialog .", "removes an already registered connection event listener from the", "separates all attributemetadata - objects with a special role", "parses an individual logic or net instance statement within a subdesign", "previous page toolbar button", "apply the camera to a gl context .", "convert a byte array to a hex encoded string .", "generate a random string", "compares the new folder description object with the old folder description object to determine what items were changed and if those changes are allowed .", "creates and adds a new connection descriptor for the given jdbc connection url .", "explicitly removes the concept from the entity .", "empty implementation which allows subclasses to receive the same output that is generated here", "action used for accessing the database console", "closes all project files on project close", "sets the title for this frame to the specified string", "get counter for info to boxes and labels", "invoked after a new module was loaded into the address space of the target process .", "test read and write full clusterpolicy object", "constructs a userlist object from rawjson string .", "creates address from string with port information .", "plays previous video in playlist", "perform a replace all operation on the given component .", "handles actions from within the property panel .", "returns the network parameters for the given string paymentprotocolid or null if not recognized .", "dispose of the currently open connection to the database", "called with the activity is first created .", "creates a new text widget", "removes a user from the list", "change the general editing state of this service ( idle , dragging , inserting , . . . ) .", "fired when a retry occurs , override to handle in your own code", "use fromelements to add elments to the from portion of the query", "prepares the recorder for recording , in case the recorder is not in the initializing state and the file path was not set the recorder is set to the error state , which makes a reconstruction necessary .", "primary and additional mime types that activate this mode .", "creates a surfacedata object representing the back buffer of a double - buffered on - screen window .", "do a reset to check document again", "called after the register values of a thread changed .", "returns true if both breakiterators are of the same class , have the same rules , and iterate over the same text .", "marshall the given parameter object .", "read a json value .", "use this api to fetch transformpolicy _ lbvserver _ binding resources of given name .", "returns the target proximity", "updates the ui by the track color mode .", "re - measure the loading views height , and adjust internal padding as necessary", "computes the leave one out pdf of the estimator", "writes out all modified cached rows .", "process a job that may be blocking .", "describe the method", "reads the default serializable field values for this object .", "indexes a class by it ' s name .", "internal copy file method .", "intercepts output single characters", "remove a listener to a certain property", "hex string to byte array2 .", "check for obvious blacklisted garbage and return true if thats the case", "stops this jmshelper stops and closes the queue session and connection", "use execute for starting the processing", "start a layout section .", "use this api to clear rnat6 resources .", "computes the total number of pixels within the specified roi", "returns the murmurhash3 _ x64 _ 128 hash , placing the result in \" out \" .", "check for equality of non null reference x and possibly null y .", "a marc field can be denoted by a key , independent of values .", "visits the given array allocator expression", "run the dev appserver in async mode .", "init the syntactic processor with element start node", "queues a tween from the current values to the target properties .", "deserializes an object .", "formats the value as a human - readable string .", "removes the specified loader .", "remove a column model by the specified column name .", "when just created object is detached to pure pojo it gets temporary id .", "set all headers found in given map where the keys are the header names and the values are the header values", "deletes the file if exists on the local file system .", "gets all view plugins", "returns a request parameter for a boolean type", "flush frames to the server .", "this returns constant gif if the class is fixed otherwise the default variable gif is returned", "computes the h or heuristic value by estimating the total cost from here to the target node if it exists .", "add any exposed nodes in the available set to the result .", "cues a single command for sending", "gets the resources that correspond to the given changes at the configured area ( file , project , etc . ) and puts them in the given list .", "connects to specified data center and clone an existing virtual machine identified by the inputs provided .", "notifies the listeners about a model operation", "get components list for current instance", "this handles the moov atom being at the beginning or end of the file , so the mdat may also be before or after the moov atom .", "check component attributes .", "download object by hash .", "the iscancelclicked method indicates whether or not the user clicked the", "is the combo box popup a drop down popup or does it overlay the box ?", "method addobject", "creates a new client instance and returns it to the caller .", "returns an estimate of the available bytes .", "terminate communication with a client", "return the path to the java executable for eclipse ' s jvm .", "converts the edges of a view into graph d edges .", "numeric compaction mode ( see 5 . 4 . 4 ) permits efficient encoding of numeric data strings .", "abstract tuner controller device .", "converts android bitmap to opencv mat .", "dequeue an invocation by removing it from the front of the queue", "remove the join button of an invite .", "log crud information for an entity", "execute a sql prepared query .", "advises the manager to ignore attributes with certain keys .", "map method name to the new name .", "a list of stackinstancesummary structures that contain information about the specified stack instances .", "calculates residual error at outputs", "saves the given language on the top of the stack .", "delegate to the editor", "parse hadoop topology and return the topology entity results", "sets the body .", "computes two independent 1d histograms from hue and saturation .", "adds a new quota mapping with modification 0", "validate the passed model .", "searches for a file in the class path", "creates a simple vertical gradient using the shape for bounds and the colors for top and bottom colors .", "set the initial mode", "resize the svg to this size while keeping the width / height ratio", "deal with service configuration cmd args .", "invalidates this component", "increment the value of the specified key by 1", "this returns the label text for the adapted class", "this function is to retrieve the initiators of the given host id ( uri )", "reopen the index by releasing all writers and searchers", "checks whether the category title matches the filter a filter matches a string if the string starts with the filter expression .", "convert key tuple to key map", "sets the attribute at the given col index as the new class attribute , i . e . it moves it to the end of the attributes", "triggers a new event to be dispatched to all event consumers", "marshall the given parameter object .", "go through the fields in this class and add them to the field list .", "creates a new instance of the circular string buffer .", "adds children views to the left and right of the current views until the screen is full", "creates the property iterator panel and sets the experiment .", "parses queryparams and produces sparsefields map .", "called after all the incoming replication events for the current batch passed through the corresponding event handlers .", "shuts down the counter", "creates new form uioptions", "adds a nested componentconfig bean to represent nested components", "logs a message and an exception to the specified log destination .", "simply delegates the execution to the provided delegated task .", "change the type name of unknown words to avoid generation error", "returns an iterator that visits the elements of the given sequence in a random order .", "commit commits the node to the database or other storage system", "instantiates a new invalid magic mime entry exception .", "create the directory under which pinkr will save the file", "confirm that only one writer is permitted per log .", "returns a cloned map of string to set of string .", "properly evaluate the equality of two primary keys by comparing values for each part of the composite key", "creates a star from a \" circular \" sine wave", "method to position caret at end of jtextarea ta when scroll true .", "returns the number of solutions in the current graph with the the current chroma set", "return a statement that will create the table structure null if no create table can be given", "removes a corporate groupid from an organisation", "create a marker with the given markerid on a resource .", "instantiate the reader and load header information .", "this method stop adb server", "returns true if the specified command id is enabled .", "gets an element of this array", "adds an entry to the dataset dynamically .", "try to extract the village name from a pdu .", "returns a list of datasource that match the search criteria in the request .", "adds an address item to the complete address .", "flushes the disk cache associated with this imagecache object .", "commits the authentication ( second phase ) .", "reads a mysql packet from the input stream using a default partial read timeout of seconds .", "check whether charsequence c is not empty .", "reads a variable length unsigned leb value .", "set the native flag", "returns the html for the head frame of the online help .", "removes the setting at the specified index", "returns the message associated with a notification , fetching it from the server if necessary .", "parse key value pairs to map ignore empty key", "gets user translations from server and shows them in a table", "replaces all occurrences of a certain pattern in a string with a replacement string .", "create an instance for testing only .", "loads the default values for this attribute space", "write debug information on this action", "get the implementation - dependent accuracy of the latitude", "method getfamilynames returns the set of familynames of this hbasescheme object .", "method to populate the edit listener frame with current values", "rehydrate the text in a diff from a string of line hashes to real lines of text .", "creates new extractor capable of extracting a saga instance key from a message .", "creates the text for a line in the compartmentfigure", "loads the items into the slots of the player on login .", "returns keys of all properties where the key name matches the provided prefix .", "method from interface undoableeditlistener", "searches from the given parent for managed entities of the given type .", "returns the beaninfoindexedproperty for the specified property in the given class , or null if not found .", "size of file or directory , in bytes .", "add a new range to this aggregation .", "create a rule with no prerequisites", "moves all teaches relationships for a specific class to the deleted table", "gets information about a project .", "set the context for javacpathfilemanager", "saves the project description to the database .", "creates a replication task using the specified parameters .", "decodes a stream of multibyte chunks into a stream of strings that works on infinite streams and where handles when a multibyte character spans two chunks .", "gets the value of the others property .", "executes a process and returns an object representing it .", "constructor for primary key", "method that gets invoked from load ( ) .", "reads a single character from this reader and returns it as an integer with the two higher - order bytes set to 0 .", "this method is called when the tree open state changes .", "sends a suspend messages complete ack to the server", "checks to see if a list of ssa registers can all be mapped into the same rop reg .", "method importclass", "submits a topology to run on the cluster .", "creates a new trace logger .", "creates an empty part", "releases an existing connection by looking it up in the connection map and releasing from the correct data source .", "return the rule - internal source - target alignment grid .", "invokes action function if value is absent .", "set the currently selected ilaunch instance based on the specified selection", "handle a map request , and create and image for it .", "produces a transformation matrix representing a rotation operation around the origin of the coordinate system .", "this creates the appropriate sql for the given attribute and passed in value", "get the records from the table where the bindings map is valid", "finds all elements containing the given searchstring in any text field and sorts them accordingly .", "this method checks if the certificate contains the given key usage bit .", "paint . settextsize float textsize default unit is px .", "undoes the last change .", "identical to isconnected but returns a long latency instead of a boolean alive", "sends the supplied packet from a client to the server", "this adds a property descriptor for the name feature", "register an active operation .", "clears the position cache .", "appends an element to the end of the queue", "removes all blocks which are empty from the block list .", "takes in a list of uris , queries using iterative method and returns list of volume objects .", "writes the wfs meta information e g version to the wfs", "for constructing the tla + to pluscal mapping , the original getwith procedure was given a second argument and was renamed innergetwidth .", "append the vector u to the vector v and return the result", "sets the status of the scroll lock", "modified merge sort : input arrays are in both auxx / auxy ( sorted : 0 to insertionsortindex ) and x / y ( unsorted : insertionsortindex to toindex ) outputs are stored in x / y arrays", "pop the last added templateclient", "scrolls directly to specified page", "verifies the given magic number .", "returns the capabilities of this filter", "visits a qualifiedname", "delete the currently selected object", "gets a stroke with which to draw this line style", "flush and close standard output .", "undo the last edit action performed on the network .", "converts a xml document to a json array or a json object .", "if the option requires access to a port , then this db security group allows access to the port .", "marshall the given parameter object .", "applies the given filter to the input and returns only those elements that match it .", "internal method for printing a tag with attributes .", "round a number d to the specified amount of decimal places res", "gets the logout property", "adds a new conceptual model to the list of conceptual models", "create a new sparqlrepository using the supplied endpoint url for queries and updates .", "create a variable and its value .", "construct a new regular expression filter with the specified flags case sensitivity .", "return a bytebuffer representation of the string per given charset", "test if a table is a persistent table view and should be included in the snapshot .", "exposes the elasticsearch settings holder .", "delete a category", "enable or disable spacing fields depending on whether the layout is in manual columns mode .", "adds an object that is notified about changes in the tag manager .", "determines whether the specified file is a symbolic link rather than an actual file .", "appends the query name and values .", "serializes an xml node to a writer .", "writes error messages to the specified printwriter .", "functions registered to tick should match the parameter list of .", "cacm algorithm 396 , by g .", "updates the graph type after a new node was added to the graph .", "this method adds a new parameter to an http request and if appropriate updates the content length header .", "adds the emotes of the given emoteset .", "evaluates the tree and returns true or false", "sends a sifmessage generic to the sif endpoint", "get the contents of an inputstream as a byte [ ] .", "determine if the named resource is included in any of the whitelisted packages .", "return the if the idl definition is frozen only for getter setter operation", "return a secretsmanager instance for manipulation of the encrypted", "checks whether a given sdk version is internal .", "paints the transcoded svg image on the specified graphics context .", "you are not supposed to instantiate this class .", "factory method to create a new viewdraghelper .", "allows a parser to add parser specific features to be recognized and managed by the parser configuration", "creates new instance of annotation indicator panel", "generates a service discovery for the given class name and file .", "this returns the property descriptors for the adapted class", "retrieve the lowest possible value of the die", "reads next frame image", "process the events", "size + value1 type id + value length + value1 binary content + . . .", "the shared value must be started before it can be used .", "creates a new get request .", "evaluate the string in the specified namespace .", "deletes a reference from an operand expression .", "sets the property in the bean to the specified value", "check if the value is less than or equal to a maximum", "creates a new instance of the class .", "checks if is times eqaualed .", "remove amount elements from the operand stack without using pop .", "exports utility method", "increases the capacity of and internally reorganizes this hashtable , in order to accommodate and access its entries more efficiently .", "returns a new properties object will all references expanded into their full form", "create new views ( invoked by the layout manager )", "returns spin / yield value for a node with given predecessor and data mode .", "deletes a station", "if the given archive is jdk archive , this method returns the profile name only if - profile option is specified ; it accesses a private jdk api and the returned value will have \" jdk internal api \" prefix", "set the if none match request header to the given value", "a ' streamless ' version of encode that simply takes a buffer of bytes and returns a string containing the encoded buffer .", "uses copier to copy from src to dest", "rename the device on server", "when we go back to previously visited nodes we do not have to visit nodes after our current node again .", "execute entry processor on entry cache", "convert this line to the output format .", "determines whether the node is selected or not .", "called when a conduit is actually required", "html encode a string", "region > findbysessionid", "splits a string of ( one or more ) values at the ' , ' signs and returns the values in an array of strings .", "creates a new fid filter with no initial fids", "parallel service client requester", "compares to issue by their key ordering .", "start the generator to download and build the quotes .", "generate the unique permutation id for this permutation .", "writes the specified byte to the specified output stream and copies it to the file .", "create dialog to edit an existing type .", "creates and adds the labels and entry fields for latitude and longitude", "configures any necessary colors / fonts for the specified button used representing the button portion of the optionpane .", "removes the specified column", "when during the move the bounded is checked .", "gets the accessible parent of this object", "publish runbook draft .", "creates the inline edit widget and injects it next to the context element .", "returns if this assignment is to be set to the model value", "decrements the number of running tasks .", "implements the \" final _ cased \" condition specification : within the closest word boundaries containing c , there is a cased letter before c , and there is no cased letter after c .", "returns the number of all pages that contain a template the name of which equals the given string .", "write the bit vector to a file .", "main method to permit external invocation .", "returns true if any coordinate of this vector is nan ; false otherwise", "sets a token active or disabled", "returns html markup for this object .", "sets up the network interface list with at least the localhost ni .", "returns a synchronized priority queue backed by the specified priority queue .", "adds a new operation to the list from the operation and two variables .", "stops connection then creates durable subscriber registers message listener textlistener and starts message delivery listener displays the messages obtained", "if the fireball has collided and resources are freed , and the fireball object is ready to be removed from game - loop .", "this property configures any flags affecting how authorization is applied .", "the ids of the spot fleet requests .", "parses the passed in css declaration into an attributeset", "move the pen without drawing any line", "checks whether a view contains the given address .", "one of ways of creating builder .", "a method to return the type associated with a parameter", "transform a number into a bigdecimal", "get information about a cloud project creation", "instructs the lognode to print the log data provided .", "generate a random string of the specified length .", "validates if cookie domain is syntactically correct .", "defines a bicluster as given by the included rows and columns .", "obtains an instance of minutes that may be cached .", "removes this entry from the list of duplicates", "build statements for default values", "runs the example .", "extend definition with assignments and execute statements remove definitions after completion of the let statement", "gets user info given a user id .", "calls saveas on the editor", "indicates if the target resource is a directory", "rehashes the map to the new capacity .", "returns a string created from the proxy class name and the result of calling tostring on the contained lease .", "routine that arranges the elements in ascending order around a pivot .", "translates the hash table into sortable array of substrings .", "convert json string to the object of the specified type .", "invoked when the name of a project changed .", "start the dim animation .", "compare the current knowledge level of the given fleet by the expected level", "initializes os manager", "creates the menu that allows the user to select an operator", "attempt to write the given bytes to the given file .", "loads the tree nodes with the info in the bean", "this adds a property descriptor for the declaring module feature", "returns the state of error printing", "get the swift format value of the field", "defines the constraint which is applied to the list model elements", "tests that js service can subscribe and receive notifications and that subscription is removed when service is stopped", "generates a synthetic network for provided vertices in the given graph such that the provided expected number of communities are generated with the specified expected number of edges .", "removes the leading and trailing quotes .", "given the settings contained within a job object , retrieve an authentication token from either the currently logged in user or from the elasticsearch cluster and add it to the job ' s credential set .", "removes the key from both the cache and backing map .", "run the converter .", "creates an edge in [ ggraph ] connecting [ sbasenode ] to each node in the [ lothernodes ] list of nodes .", "record a sound file with the recording being limited to a given amount of time", "called to update status in buffering a media stream .", "paints the background of a check box .", "creates an instance with the specified target name .", "called when the browser component is requesting focus .", "this method performs a deep copy of the tree", "checks if for the given group vertex all incoming ( if forward is true ) or outgoing links ( if forward is false ) come from other stages than the one the given vertex is in .", "set the full unprocessed text of the comment and tree path .", "change the submit button s background color to the one provided this will not change the circular progress animation s color .", "prune illumina arm marker .", "also inlines the call expression productions", "returns if the chart should be filled below the line .", "returns a jni select manager .", "write property database to given file .", "enables or disable debug logging through logcat .", "get this object properties", "subtract reference count .", "syntax checks the api token .", "pads spaces onto the end of the value to make it ' places ' long", "kick the ball off , turning the ball over to the other team .", "information about the fpga images .", "emits a method to get a field .", "inserts or deletes predicate objects in a rule and updates the ratelimit in the rule .", "enter a catch block .", "converts the provided string list to a string array .", "add ticket factory .", "generates a setter on the stated field", "verify a private method invocation for a class with a given verification mode .", "adds map containing parameter override definitions .", "returns the byte representation of the whole hpai structure .", "returns true if the stream as unidirectional , for use in unidirectional joins .", "encode this extension value to the output stream .", "draws the caret in the ascii window .", "implementation of basepinactivity method", "synchronizes the data retrieved from the server about the contents of the target folder with the current data in the local database .", "construct attribute set given an array of attributes .", "adds a new waiter to wait queue .", "lists the azure storage containers , if any , associated with the specified data lake analytics and azure storage account combination .", "decodes a base64 encoded char array that is known to be reasonably well formatted .", "do not instantiate this class .", "reads a single byte from the proxied input stream and writes it to the associated output stream .", "this methods sets the xaxisrange", "check if the version is 1 0", "starts the process of text extraction", "check a member for basic accessibility .", "creates an object decimalformat based on this description", "collect the wrapper classes .", "move the camera along its up direction", "removes the specified text event listener so that it no longer receives text events from this text component if l is null no exception is thrown and no action is performed", "perform am uri path escape operation on a reader input using utf - 8 as encoding , writing results to a writer .", "prints a double to standard output and then terminates the line .", "granted permissions string [ ] .", "initializes the test fixture", "hides and clears the reference to any previous jpopupmenu instance found", "returns true if a public final method exists which matches the given specification .", "return the transaction token value to be rendered for this occcurrence of this component", "sort the data", "launch an activity for nfc ( or wireless ) settings , so that the user might enable or disable nfc", "sets the packing density difference factor for the paragraph", "creates a new mapentryinfokey used to find existing key in mapversiontable .", "count number of coordinates starting from the end of the coordinate array backwards that match the first coordinate value .", "wait for a given wifi state to occur within a given timeout .", "create a java source file", "checks whether snowball is present in the classpath .", "picks an encoding for an external entity .", "switches to the advanced setup mode .", "wraps a given index back around the data structure", "return true if v is closer to prev .", "moves an actor from its current location to a new one", "closes the written file .", "nested aggregators to further refine aggregation for an inventory type .", "determines if path1 is a descendant of path2", "audit datastream is rebuilt from the latest in - memory audit trail which is a separate array list in the digitalobject class .", "runs the given script source with command line arguments", "convert a utf byte array into a string .", "tries in order : jni and then pure java leveldb implementations .", "update project matching given predicate in given factory", "renders the to do item creation page .", "converts between the index of visible rows and the index of model rows .", "deactivates all regular breakpoints which are not disabled .", "converts nitro response into object and returns the object array in case of get request .", "apply typefaces to main acitivty view android . r . id . content .", "returns the string representation of a time", "calculates the frequency of the uplink channel using the channel number and the identifierupdate message .", "returns the zip file comment , or null if none .", "find the _ fields constant that matches fieldid , or null if its not found .", "method for executing the action", "gets the nagios return code that is mapped to error within log4j", "display destructively all stack entries", "handle the mylink control click event", "prepends a block to this block", "read next message from log", "get data from server successfully", "adds a new configured open file", "adds a listener that is notified about changes in the replacement .", "reads the requested resource set description or queries all the client ' s ( resource server ' s ) resource sets .", "converts the specified object obj into an object of a class class1", "notifies the drawable that it s displayed state has changed .", "send restaurant changes and get global ids for new restaurants .", "creates an idsquery using the specified type and ids .", "this method sets a widget for the specified footer cell", "returns a sublist of the given items , that match the given filter string .", "get the stored bugcollection for project .", "given the code , find the coordinate transform name", "# 143 # 44 # 42 # 22 : make shure that the filename does not contain illegal chars .", "returns the value of this binarynumber as an int", "test if the service has an entry of the exact given class assumed to have no fields .", "moves the cursor to the last object in the collection", "parse a bean , event after object start passed in", "if this node is a leaf , it returns the number of vectors contained by it .", "creates a new rest2ldap http application using the provided configuration directory .", "create a new dset object", "returns the related foreign transaction object", "set up the data and metadata elements", "checks if a group features on this track", "this adds a property descriptor for the handle feature", "determines if the file is under souce control", "writes a property value for a resource .", "gets the first page of data lake analytics accounts , if any , within a specific resource group .", "invokes the specified function asynchronously and returns an observable that emits the result .", "checks if other is from the same type , just type and subtype are checked , properties ( q , mxb , mxt ) are ignored .", "given a certain messagenode it removes it from the list", "returns a copy of this date - time with the specified amount subtracted .", "used by send and send _ reg ( message types with payload )", "transform a multidimensional array into a one dimensional list .", "return the order clause for getobjects comp", "get the name", "cast a bitset , so to speak , to an iterable set .", "converts a date to the textual representation of dates used by people .", "returns the next java source file to be processed .", "deletes the specified vpntunnel resource .", "release the resource set is as unused", "add file header which consists of the module beginning module . . . line and the extends statement .", "adds a double to the constant pool of the class being build .", "construct an instance of the ksg conditional mi calculator", "constructs nodeviewi with random coords move coords to jnet adds node to node list adds node to modtovw cache for edge iterating used by expansion and new load", "do not modify addrestresourceclasses ( ) method .", "check to see if the ip address being used is in the clients history iphistory is stored in a single attribute , separated by \" | \" if the client ip is new , ( not seen before ) then add it to front of list , and drop from end of list .", "add the given crawluri noting its addition in running count", "there are several ways to detect terminator", "get the directly - relevant type qualifiers applied to given method .", "do not instantiate this class .", "returns a stream consisting of the results of applying the given function to the elements of this stream .", "primarily intended for finding the parent of an entry when deserializing kdb data .", "creates a new function block object backed by an api function object .", "specify an interval in the intervalunit . week that the produced trigger will repeat at .", "returns that this player banned the user in parameter or not", "a method to handle a newly created imagetile object from the loadimage method .", "clear the data map", "creates the readersource from a file descriptor .", "this attempts to print an utterance", "initialize parsing context specific resources which are not thread safe i . e .", "for use by generated code only .", "calculate an opentype checksum from the array .", "make the badge non visible in the ui .", "it is of a double category if the provided type is a bigdecimal a float double .", "compute the angle for a sparse and a dense vector .", "when t close received if t close is the response to t begin ondialogrequest if called first then componentportion is called and finally ondialogclose", "returns a collection of our methods that are to be placed on the ome toolbar", "executed after the site has been initialized", "returns the number of messages in the queue to be processed .", "adds an element to this instantrunnable .", "sets the dcfaci property", "create a jsonreader by providing an inputstream .", "writes the xml - serialized object to a stream", "add full chart data .", "true if the entry is expired .", "add a revision , credited to the current user", "this method returns the pointer to the loser in the competition for survival ;", "line to the the farthest boundary , in case appear a super big piece .", "start a new block with a list of selectors .", "loads the probability data from the current open level", "method overload from the standard httpservletrequest api .", "accept for the visitor pattern", "move the html input to the screen record fields .", "creates an insert operation .", "load bit streamer with data", "substitute probe with newly calculated probe", "returns the element node of the configuration with given element and attribute values", "write the data in \" source \" to the specified stream .", "druidg . g : 377 : 1 : complexhaving returns [ having having ] : ( ( s = simplehaving ) | ( a = simplehaving ws o = ( and | or ) ws b = complexhaving ) ) ;", "creates a new instance of functiontype", "creates a new instance of texteditor", "appends elements to the link chartable", "creates a form for getting the results from all libraries", "bind an id field to an entity .", "get a random , positive whole number", "java5 ' backport ' of arrays . copyof", "creates a new log action object .", "save a javascript script in its associated file", "returns the string run through the sha hash .", "get the codebase object .", "overridden to pass any mouse down event received by the scrollview on to its contentview", "set the value of the public property .", "remove an element described by objectinfo while the sl is unlocked .", "maps an int to a specific state .", "$ antlr start \" star \"", "write the contents of the byte array to a string", "removes a userid attribute post from the database", "creates a new socket reader object .", "create accessor for the field .", "adds a message listener that will be added to all channels to receive any messages .", "returns null if there is nothing left .", "initialise the calculator for use or reuse .", "adds the argument to the collection .", "creates a new thread object .", "converts a number object into a simple long and allows widening conversions", "check to see if a useraccount is being called", "builds a catch up subscription settings .", "returns whether the two java elements are equals and have the same parent", "future a . k . a .", "checks whether the entered key is still valid", "builds a new individual for the population", "depending on the type of element , generate text describing its conceptual value and role and add it to the output .", "checks if a player can use a given gadget type .", "parse a charsequence into a long", "purges data in an application insights component by a set of user - defined filters .", "check if the url is actually a datauri ( base64 encoded value ) .", "returns whether the widget is currently in the refreshing mstate", "constructs a new dom4j namespace from the provided stax namespace event .", "search target string to find the first index of any string in the given string array", "helper method to split the given string by the given delimiter .", "helper method for invoking a service process .", "seeks the dex file to the specified absolute position .", "notify the reader of available data in the pipe .", "hash the password for first time storage .", "use this api to fetch the statistics of all nspbr _ stats resources that are configured on netscaler .", "add a list of strings to document as elements with given tag name to the tree .", "make the request to the twilio api to perform the read .", "gets the table attributes", "removes the property indicated by the key if it exists and returns the value .", "executes the drawable ' s draw method .", "updates a data transfer configuration .", "add - tmp when not present within an np", "adds a name and type to the constant pool of the class being build .", "sets the comma separated list of reference names to check in the list returned by the command", "loops through all known nucleotides and attempts to find which are equivalent to each other .", "getter for property predestroycalled .", "invoked after the name string of the trace changed .", "returns a string describing the type .", "search for a movie with the default settings .", "unescapes any java literals found in the string to a", "get the current selected folder in the list box", "build the method summary", "check whether an individual character is legal", "returns the path to the cascading stylesheets .", "unzips all elements in the file represented by byte [ ] data .", "divide this mutablebiginteger by the divisor represented by positive long value .", "validate ip address with regular expression", "guarantee a formatting pattern has a subpattern for negative values .", "not needed until workers support dynamic removal ( currently reload required )", "overrides default implementation just in case invokemethod has been overridden by expandometaclass", "this method also starts the collector thread lazily .", "append copies of the values after a specified key ( may or may not be present ) to end .", "write persistent global userpreferences to file in user s home directory .", "checks if there is enough space on sdcard", "returns an iterator that iterates through the bits in backward order starting at the given index", "quote identifier only if necessary .", "pops up an \" open file \" file chooser dialog .", "validate a value against the set of regular expressions .", "asserts that two input streams are equal", "sorts a string list", "compute the cache interval for this benchmark", "lookup the rmiserver stub in a directory .", "checks only format correctness , logging more thoroughly tested in respective unit test .", "like createlogicalbounds except ignore leading and logically trailing white space .", "convert the byte array to the hex dumped string", "retrieve emails obfuscation rule", "creates the renderers needed for this combined - renderer in the required order .", "returns the override selection coded as an integer 0 no override of projects copyright settings 1 override header content only", "returns a two hexadecimal representation of i , if shorter than 2 chars then an additional \" 0 \" is put in front", "create a java . awt . graphics to use for an image .", "additional information about the revisions , including the type and location .", "construct a new instance of this test case .", "creates a new commerce price list user segment entry rel with the primary key .", "factory method to create a new xml content value wrapper .", "called when a user attempts a connection .", "creates a random orthogonal or isometric matrix , depending on the number of rows and columns .", "indicates whether or not the specified class is a dynamically generated proxy class .", "rounds the x and y values of this vector to the nearest integer value .", "return true if the class was loaded from the application src / directory .", "ensure that we can emit and load properties using param lists of the form key value key value key value .", "this adds a property descriptor for the tabindex feature", "reads the peer ' s address .", "gets a resource path using cls ' s package name as the prefix .", "creates the scroll pane which houses the scrollable list .", "add system property name and value .", "trivial hashcode implementation mixing the two integers .", "strips leading non - numeric values from the start of the string .", "create pagination functionality upon recyclerview .", "set the line join style", "delete the local value of a existing user", "given sentences or trees , output the typed dependencies .", "sets the value of a some island property", "to keep track of what jobs need what lock , update the internal data structures to indicate that the supplied job needs the specified lock before running .", "sets number array type custom metadata property .", "returns true the default if all methods resolve a given uri in the same way", "returns the end value for a bin", "uploads the specified certificate .", "convert a specified character of string in upper case .", "escape property name or key in property file .", "start count down show info bottom", "a list that contains one trafficpolicy element for each traffic policy version that is associated with the specified traffic policy .", "gson invokes this call - back method during deserialization when it encounters a field of the specified type .", "utility method that checks to see if a column is found in a schema using dot notation .", "set the height of a specific row to the given value", "processes the specified signalling string", "verifies if the 2 associazioni are the same associazione", "returns the first token in the linked list of tokens generated from text .", "get prices and contracts information", "reads a module setting from the database .", "destruction of the servlet .", "reads a reply as an object .", "reads json api spec document and converts it into target type .", "adds to the receiver the rectangle specified by x y width and height", "checks arguments for validity .", "visits the specified conditional operator", "create a new codedinputstream wrapping the given bytebuffer .", "sets the canned acl to apply to the restore results .", "creates a new drag and drop handler for a given views table .", "decode the byte array returning a decrypted object .", "deletes a directory recursively .", "normalize a single word", "find an arbitrary method .", "checks to see if action is live sync", "adds a field reference to the constant pool of the class being build .", "deletes a value from the map", "creates an empty region from the only mandatory information", "call gameclient init and start our consoleeventreader", "tests if a network location is reachable .", "callback when entrance transition is ended .", "load x . 509 certificate from an url", "get the associated text pane jtextpane", "locator resources on the federation not the embedded journal used by the query controller .", "draw the labels along the line .", "skip all whitespace until we get to the first black line .", "allow serialization of the spring urlresource field", "localizes a list of categories by reading locale - specific properties for their title and description , if possible .", "close and stop all resources and services .", "called when the execution of the task is cancelled", "computes the longest common contiguous substring of s and t .", "test whether there are more tokens", "indicates if a class or at least one of its annotations is annotated by a given annotation .", "process event like appear and disappear", "get a hash code for given fields and values , using the given seed .", "generates 32 bit hash from a substring .", "obtains the number of events in this track .", "initialises the guardian names jlist", "creates a new catch up subscription settings builder .", "re - creates the document submitted by the client from the submission document .", "unlinks the non null first element .", "obtain an instance from my pool for the specified key", "information about incompatible devices .", "return a duplicate of given dataflow fact .", "sets the context scope for the statement pattern", "creates a new address object .", "constructs a federation handler according to the specified parameters .", "initializes this folding structure provider for the given editor .", "removes all contacts with relationship to an entity in db", "stop this currently running container runnable .", "read a study from the specified input stream .", "checks if this node has children", "parse a set of authentication headers and choose the preferred scheme that we support for a given host", "helper method to retrieve the set of strings from the passed key / value map .", "converts api response of bulk operation into object and returns the object array in case of get request .", "loads the known users from local store .", "adds a integer constant .", "create an unmodifiable list around the specified list", "sets the time zone that will be used to serialize dates .", "retreives request document if incoming request has any", "factory method to create a function prototype type member .", "adds the local and global comment strings to the label content .", "implementation of the celllayout method", "evaluates the cf8 problem .", "returns a copy of the current instance to achieve immutability", "constucts a non temporal metadata object", "reads the current widths from screen", "protected helper for tostring", "returns an enumeration describing the available options .", "call release method on a plugin class warning on errors .", "marshall the given parameter object .", "checks if the threshold for the invalid logins has been reached for the given user .", "adds the given listener to the list of listeners", "determine the validity of the current weather", "terminate clean up all allocated objects", "returns true if node key is less than upper bound of range", "constructs a writer that encodes characters using the given encoder and writes the resulting bytes to the given channel .", "handles the third player option", "removes all the values from the series .", "replaces attributes for the given graphcell with the given attribute map", "method that modifies the input transform by applying the specified scale factor to the specified transform", "accept for the visitor pattern", "setting up coefficients using gauss jordan method provides parent class coefficients are modified according to the minimalization of the deviation from the learning set", "computes and sets the qualified name of this field .", "prove that we can get the current values of all dynamic parameters .", "run the full test suite using standard objenesis instances", "releases the underlying receiver .", "wait for the process to finish and return its standard output standard error", "return a shallow copy of this ref .", "requests that the client work online note that most likely you want to call the static version of this method in order to make all open dbclient objects work online", "runs forward to the next breakpoint in the runnableobject", "a debug message with \" webserver : \" prepended .", "launches the ping , launches inetaddress to retrieve url if there is one , store trace", "get the name of the role the owner of the given type will play", "adds a macro record to this macro .", "paints the background of a menu bar .", "notification to subclasses that a table was built .", "randomizes connection weights for the whole network within specified value range", "use this api to fetch dnssoarec resource of given name .", "returns the default filter in the online project , and ignore _ expiration otherwise .", "e feature1 init .", "initializes to identity if n n strands", "whether the skin being used is from external . skin file", "invert binary array ( apply a negation to each value ) .", "ds method to activate this component .", "contructs a storageobjectsummary object from azure blob properties", "parses an annotation object", "initial calculation of the week", "check the modifiers of a method for order conflicts", "creates a new instance of a debugger event settings query .", "returns a truth subject that provides fluent methods for assertions on this instance .", "the doget method of the servlet .", "decide whether a file / directory is too small to raid .", "setter for property zoomfactor", "retrieve the gender attribute", "this code is copied from the super type", "dump known oids to stdout for use in constant definitions .", "method to allow container to condition removal of ejb from the ejb cache on whether the beano is in destroyed state ( ejb ' s are not in the cache if there state is destroyed ) .", "add the created action message for the key ' errors . front _ footer ' with parameters .", "invalidates the provided auth token .", "returns all the unique classifiers of all the statistics .", "create a list from passed objx parameters", "add a string format and the corresponding object .", "alter this object properties", "unconditionally save the current store to the given stream .", "retrieves a task by its title", "finds the associated node", "get the final covariance matrix .", "adds the t word .", "if true operations will be done using fifo ordering when multiple match found .", "returns the start html for a disabled direct edit button .", "setter for rulesets , filters out nulls", "use this api to fetch a vpnglobal _ authenticationradiuspolicy _ binding resources .", "main method for the job .", "get component of the active staroffice instance", "collect the rule ( s ) that fire for the supplied incoming instance", "set up targets to receive log data", "implements basic server processing which continues until a call to shutdown or the thread is interrupted .", "same as main args except that exceptions are thrown out instead of causing the vm to exit and the lookup for . groovy files can be controlled", "creates a new overload scanner .", "sets custom or unlisted attribute", "returns the length in bytes that an output buffer would need to be in order to hold the result of the next update or dofinal operation , given the input length inputlen ( in bytes ) .", "creation method for composite transactions .", "get the log probability of the most likely pos tag", "visits a propety", "parses identifier can be string content or identifier", "deletes a directory recursively .", "keep encoded values \" % . . . \" and template parameters intact .", "initializes the token with the specified information .", "checks conditional reference of text .", "sets the passive mode property", "returns an array containing all of the elements in this queue , in proper sequence ; the runtime type of the returned array is that of the specified array .", "given a center point and radius of a circle , update a point on the circle at the given angle .", "called periodically by the background tasks method of the murmur service .", "removes a listener object from the view .", "returns the actual value of the valuesupplier which values are recorded from this timeseries object", "extracts an identifier from the antlr ast", "set a number value for the given key", "create a new frame at the top of the stack .", "removes all condition caches that include the specified entity .", "return a java . sql . timestamp given a java . util . date .", "paints the border of an internal frame title pane .", "creates an event from a query .", "create the ojb _ clazz pseudo column based on case when .", "generate a list of formal parameters with annotations for the default values .", "notifies callback that request was completed and is being removed from thread pool", "deserialize a string back into the original object", "returns the average predictive information from the observed values which have been passed in previously .", "create an openmap projection from the values stored in a properties object .", "create register button", "get the mbeaninfo from one of the provided mbeanservers", "converts from string based on isassignablefrom or instanceof", "creates a new hidden - acceleration image of the given width and height that is associated with the target component .", "put a default key in the configuration .", "replace url ( < relative - path > ) references in the input css with url ( data : < mime - type > ; < base64 - encoded - data > ) .", "link a action event to a specific operation of the artifact", "generates a basic dense vector in cartesian form .", "remove property listeners", "adds an object that is notified about changes in the view .", "add a cursor image .", "answer the sql - clause for a fieldcriteria", "updates the properties table with the properties of the current tile", "if the given object exists as a value in the dictionary then this method removes it", "reads data from the front of the rolling buffer .", "update the number of tokens in the bucket based .", "throws invalidobjectexception since data for this class is required .", "nowarn option generate no warnings", "collect all needed proto files as resources from the classpath and store them in the temporary directory , so protoc can find them .", "set this matrix to define a \" view \" transformation that maps the given ( left , bottom ) and ( right , top ) corners to ( - 1 , - 1 ) and ( 1 , 1 ) respectively .", "return all the entities", "push a pair of nodes into the stack .", "detects key points inside the image and computes descriptions at those points .", "set the default display order", "a component action listener can pass the event here and the help topic corresponding to the event source will be displayed assuming an appropriate call has been made to registerhelpid", "atomically updates the target upstream atomicreference from null to the non - null next subscription , otherwise cancels next and reports a protocolviolationexception if the atomicreference doesn ' t contain the shared cancelled indicator .", "computes a homography matrix from a rotation , translation , plane normal , plane distance , and calibration matrix : x [ 2 ] = h * x [ 1 ] where x [ 1 ] is the point on the first camera and x [ 2 ] the location in the second camera .", "others", "create a url out of the given parameters , translate an empty / null path to ' / '", "deletes the specified replication task .", "sets the maximum number of threads .", "saves a single container configuration in an xml content object , but doesn ' t write it to the vfs .", "removes the given directory and any sub directories .", "returns false by default as only some database types allow schema to change .", "gets the jdx folder", "creates new instance from proto message .", "append bytes in mode mode encoding into bits .", "this will return the set of keys that need to be retried .", "collapse an array of paths", "base implementation of hashcode", "get replaced session id", "setter for property outputdirectory", "checks if this monetary value is greater than another", "starts the gemfire jmx agent \" server \" process with the given command line arguments .", "adds the attribute values of the entity to the given xml content .", "set up stdout / stderr redirects", "marshall the given parameter object .", "returns the default action ids list", "operation to calculate the dot product with another vector object", "the getmetricdata operation retrieves historical metrics data from your amazon connect instance .", "throw a template element runtime error .", "index of all cp entries of all types , in definition order .", "returns an operations object for the given scope", "create a map which contains all attribute values for a marker", "sets the offset pattern for the given offset type .", "get book by id", "utility function to recursively remove a directory hierarchy and all files in it .", "writes data for the current file into the archive", "method will loop for the given count and return the item before it", "adds an object that is notified about changes in the tag manager .", "implemented to achieve automatic sorting within treesets", "shutdowns executor service that performs listener notification .", "releases this statement objects database and jdbc resources immediately instead of waiting for this to happen when it is automatically closed", "the ulp ( unit in the last place ) is the distance to the next value larger in magnitude .", "creates a new breakpoint set reply .", "create a new plugin success result and send it back to javascript", "event method for the event that finalizes this process", "adds sibling nodes ( defined using builder - style notation via a closure ) after the current node .", "called when one of the spaces in cluster connects to this space", "constructs a raw message with the specified field values .", "shows a popup menu depending on a mouse event .", "get block location info about file", "adjust the point for the zoom factor", "writes the page to the segment .", "creates a parameter map from the given url and additional parameters .", "use this api to delete sslcipher resources of given names .", "runs the code generation process", "marshall the given parameter object .", "callback which gets called when a request error occurs .", "set the value related to the column category id", "removes a previously attached listener object .", "create the surface data from configurer .", "verbose log message with printf formatting .", "runs ' pragma integrity _ check ' on the given database ( and all the attached databases ) and returns true if the given database ( and all its attached databases ) pass integrity _ check , false otherwise .", "search for sms mesages and sends them back to the user", "ask whether we support a given dom feature .", "public object set ( pagecontext pc , string propertyname , object value ) { return setel ( pc , propertyname , value ) ; }", "calculates whether edges are drawn in sloppy mode or normal node .", "keep track of what we ' ve given them .", "create a timeofday instance for the given hour minute and second .", "used to support and operations on addresses in python scripts .", "internal method supports the public tostring method", "outputs the decision tree as a graph", "gets the resource location", "writes a string into some debugging place", "inserts the source view into the target view .", "matches a double .", "if c is a primitive class this method returns a boxed version otherwise c is returned .", "invoked when an action occurs", "sets a new map", "perform an asynchronous sum operation", "creates a new label widget", "extract a value from the line and convert it into its java equivalent .", "the clone method provides a deep copy of this object", "reduces memory use by halving the cache size", "sets the checked state for the children of the given item", "the main thread execution method .", "stop the console listener", "verify that the currently focused element exists .", "create a daemon thread .", "update the timer", "dismiss the current card .", "tries to load the view proxy class generated at build time for the given class name .", "looks for a controller plan for the passed method", "java . lang . boolean isonedge ( java . lang . int , java . awt . point ) checks to see if the direction we ' re going is on the edge .", "renders the action attribute", "adds a chatservicelistener to the chat service .", "unconditionally clears the project lookup .", "retrieves the value of the designated column in the current row of this cachedrowsetimpl object as a short value", "this adds a property descriptor for the count feature", "returns a hash value for this image datum", "set the current gain value", "initialize the popup menu for table", "remove data for obj", "refeshes all servers", "reads the bytecode of a class .", "compares two byte array sub - sequences and returns a value that indicates their relative order .", "this adds a property descriptor for the key container feature", "delegates to connectionmanger", "returns a copy of this period with the specified years added .", "sets the ps3 game", "create a shadow entry from a master entry before its update", "override preparepaint to initialise the data the first time through .", "check the requested flags , throwing if any requested flags are outside the allowed set .", "call the original background scanner and update the statistics", "flushes lists of added / removed nodes to searchmanagers , starting indexing .", "this function calls datachanged for each panel", "edit a global code node comment .", "unsafe ! ! overwrites record causes inconsistency or data loss for overwriting everything but records of the exact same size", "creates the insert - into clause .", "tells whether or not this graph directly owns the given node", "returns the length of the provided vector note this makes use of the sqrt function and is not cached .", "execute shell commands default return result msg", "converts a soap request to soap response , by adding \" response \" suffix to the service name in the body .", "true if err is a statuscodeexception with a specific http code .", "prepares for the next retry by applying a backoff to the timeout .", "we hold the current configured components in an vector whereas each element of the vector refers to the component name", "scroll the layout to closed , meaning scroll to minoffset .", "creates an elliptical arc polygon .", "fired when the request progress override to handle in your own code", "sets the octet data of subarea 5a directly", "static evaluation of a position .", "get alignment column number for residue index", "cancels a running animation", "invoked when the description of a view is changed .", "called from document listeners when the user edits code maxagehours", "reposition the key / value buffers based on the passed operation .", "logs prepared statement and it s arguments into error log stream .", "test whether the point p3 is inside the bounding box of the segment formed by points p1 and p2", "this method will initiate the popup", "log an error with debug log level", "gets timestamp from current record", "deletes the saved camera image", "set the statement parameters , starting at the index , in the order of the params .", "create a new object id .", "reset the timer", "tests this collection for equality with an arbitrary object", "retrieve the value of the legajo ca 83 tip seg column for the specified row", "creates an authz module that will verify that a tokenid provided by the user ( via query params ) is the same user ( via universal identifier ) as the user requesting the action .", "does a generic format of a tungstenproperties instance .", "sorts the specified range of the receiver into ascending order .", "updates a specified node", "check for a lint suboption", "adds the linked list of nodes to the queue .", "nodechoice whilestatement dowhilestatement forstatement", "clean up terminated clients marked for removal .", "update old item names to the current naming .", "createnewmember", "the code that does the real work of canceleventlease .", "returns true if the query has a where clause .", "removes a time series from the map and fires a", "this method unconditionally emits a message to the logging system but does not throw any exception .", "mark the passage of time and decay the current rate accordingly .", "returns the regularized gamma function log p ( a , x ) .", "initializes the listeners that are necessary for node updating .", "returns a sliced buffer , setting the position to zero , and decrementing the limit accordingly .", "perform an action and wait for an event .", "makes use of the db connection", "writes the message to the specified channel , for example when creating metadata cache files .", "you are not supposed to instantiate this class .", "convenience method to get file content from multipart / form - data request .", "creates a new report using the description that you provide .", "informs the transaction manager to attempt to settle a given transaction .", "indicate content is clicked with long tap", "determine if applet is targeted for jdk 1 . 1 .", "reads this object from a stream ( i . e . , deserializes it )", "there will be a clear animation effects", "invoked after a type instance comment has been deleted .", "turns a dot delimited ip address string into a long .", "evaluates the specified xpath expression and returns the result as an", "compile the given class .", "seeks to the frame closest to the specified position", "creates a new worker .", "get the number of available journals .", "helper method used by the constructor to create the individual islands if they haven ' t been provided already ( via the other constructor ) .", "stops the initialization operation .", "creates a deliniated string representing cabinet items", "create a pushable lazyfuturestream using the supplied reactpool", "removes an audiolistener from the list of", "setup the trigger for the subordinate control .", "remove a change listener listening to this component .", "checks if the tile units at the given coordinates are displayed on the screen or if the map is already displayed and the focus has been changed whether they will be displayed on the screen the next time itll be redrawn", "convert the wildcard expression into a regex expression since we found that this is a faster implementation even for fully matched strings .", "calls compose function of respective data type of object .", "called when the activity is first created .", "dump all problems in another instance of problems into this one .", "temporarily stops a connections delivery of incoming messages", "return the xml for one connection", "enters the supplied text into the specified field", "read headers from the http response and store them into local state .", "the public entry point to this routine", "we need a direct access to the writer to close it ( cannot be done via the rdfhandler )", "method for beancontextchild interface .", "checks a position in a document to see whether the line of last mouse activity falls within this region .", "informs the logfilehandle instance that a keypoint operation into the file has completed .", "clear listeners to prepare for garbage collection", "reads a vocabulary from file .", "returns the essential cycles of this cycle basis .", "adds a form field to the form and sets its initial value .", "this method is required to retrieve index created on column passed", "this is the entry point method", "provides sha 256 message digestion to encrypt one way a message", "process the testrecorddata", "returns sha - 256 and md5 hashes for given string .", "convert a string to html by encoding all required characters .", "returns true if the specified interface is included by at least one package which has the specified service and that service is enabled set to on", "extra utility method to return the information distance", "clone volume operation ( it is asynchronous operation )", "behavior of validation is modified by passing in several strings options", "returns the local name of the current event", "gibt die angegebene zeile als string zurueck .", "construct a matrix from a copy of a d array .", "open and initialize a bigdatasailrepository using the supplied config properties .", "update shared preferences entry with ids of the visible notifications .", "return a solidtoast with custom text custom gravity default root view and default duration .", "this method must be overridden by the stage to create proper entries for actors and stateless actors", "computes the dot product or inner product between two vectors .", "switches over an inaviviewnode", "creates a formatterstep lazily from the given formattersupplier function .", "configures a data source .", "removes the property", "perform a variety of analysis on digicore vehicle files .", "this method is only for java se 8 .", "appends a comment to the text node .", "return whether or not this detectorfactory produces detectors which report warnings .", "finds an instance by name .", "loads the graph of the function .", "post http post request to target url", "reads the content of an input stream into a string ( using utf - 8 encoding ) , performs a function on the string , and returns the result again as an input stream .", "ensures the specified service is removed .", "commit the pre edit string for committing operation that is not explicit ex", "deletes a local code node comment from the list of local code node comments associated to this code node", "rotate image with degrees", "resolves and verifies the singleton dependency links .", "parse a sql statement .", "returns whether no elements of this list match the provided predicate .", "add an embedded group", "records the given external form of url as a dependency .", "decodec all children of the given node using decodechild .", "this method will return the event listener arraylist when called .", "gets the columnclass attribute of the calendartablemodel object", "add a new printer calling to the controller", "copies a file from the binnavi source directory to the ida pro target directory .", "creates new indent if it not exists in the indent cache .", "return the maximum value allowed by the constraints , or null if no such maximum value is defined by the definition given it ' s required type and constraints .", "reads the int value of id from the buffer and returns it as long .", "maps an index in a hypothetical list of all edges to the actual edge .", "fills markers field with all of the findbugs markers associated with the current line in the text editor s ruler marign .", "this method enables to swap date string from yyyymmdd to dd mm yy", "get the instance representing values that are definitely null on some simple no branches incoming path .", "return the next entity .", "returns the parameter type of this parameter for the given path", "sets the last modification date of the given file", "returns the value of the specified column as a array", "paint this model to a graphics context .", "aliasevent event describing any changes to an alias", "retrieve the position of the given element on this list .", "removes all elements from this vector , leaving it empty .", "instantiates a class via deferred binding .", "prints a readablepartial to a new string", "invoked after a select file reply was received from the debug client .", "get an outputstream for the resource", "returns the detail container resource locale appropriate for the given detail page .", "allows the tailer to complete its current loop and return .", "paints the border of a viewport .", "check that the subsets for each region have been generated", "writes the encoded data .", "lists a server ' s disaster recovery configuration .", "automatically managed component initialization", "gets the toggle state of the button", "seeks the dex file to the specified absolute position .", "returns a new cacheddatetimezone unless given zone is already cached .", "instantiates a new time stamp .", "print an object into the comments section", "returns next main cycle imm date from the given imm code", "determines if a track matches a given string by its name artist label genre or album .", "mutator method for xsch1531line11", "return the valid moves at this board state for the given player .", "set the endpoint address for the specified port name", "checks for equality of non - null reference x and possibly - null y .", "this function would print the document witout the print preview", "gets the field value for the property type .", "sends this window to the back", "update activity title if we ' re displaying folder , set folder title if we ' re displaying images , show number of selected images", "cleans up the local temp directory and s3 test path that we are using .", "create the edge of the button .", "move the selected item to the last position", "generate some possible byte representations of a string password", "returns the number of bytes required to store a record in disk .", "creates a priority attribute .", "builds an identifier for the origin of a cookie .", "adds a component represented by a title and or icon either of which can be null", "get resource url for getoption", "constructs an instance with no detail message .", "adds a pointcut to the operation", "the doget method of the servlet .", "initialize the end points of the segmented line", "broadcasts a channel state event to any registered listeners", "sets the x , y , and z values of the given vector3 to their absolute value .", "set initial velocity of parabolic movement y position in pixels", "adds a new member to this membership .", "generate dotfile of the given path", "logs the occurrence of an outofmemoryerror while reading a task .", "see if there is an alphanumeric", "returns the new instance of the phaseplaneellipse this class with the same parameters emittance alpha and beta", "give the numberformat used for the field like ' y ' ( year ) and ' m ' ( year )", "remove a requestfinishedlistener .", "setconnectionobjectid - sets and stores the connection object id", "returns the remote client ' s inet address .", "called when iteration has stopped", "get the dimension associated with the given ordering .", "gets the ranges that are used for computing the checksum .", "suggests examples that would improve the accuracy of the intent model .", "read config object stored in json format from inputstream", "function to output transformation metadata , including : - recode maps , - number of distinct values , - mode , and - imputation value ( in the case of global _ mode ) the column for which this function is invoked can be one of the following : - just recoded\t\t\t\t\t\t ( write . map , . ndistinct , . mode ) - just mv imputed ( w / global _ mode ) \t ( write . impute ) - both recoded and mv imputed\t\t ( write . map , . ndistinct , . mode , . impute )", "this returns the label text for the adapted class", "create a new asrp directory for the given path .", "returns an ifnotexists object which represents an if _ not _ exists ( path , operand ) function call ; used for building expression .", "gets the plugin", "creates a new animation whose parameters come from the specified context and attributes set .", "receive static channel data from the portal", "create a request builder for a delete operation using the specified ids", "the expressions returned from a document that matches the search request .", "removes and returns first element or null if empty .", "adjusts the name to avoid name conflicts in the new session and , if the name is adjusted , adjusts the position so the user can see the two nodes .", "this method checks to see if passwords match at login time", "this method creates a bbox out of a string in format lat1 , lon1 , lat2 , lon2", "caseoptiondecl", "evaluates the query and returns the hits that match the query .", "creates a new project trace provider object .", "screenshot a view and return the captured bitmap .", "removes a listening object from the list of objects that are notified about events in this database .", "converts a collection to an array of strings .", "writes the given array of bytes to the blob value that this blob object represents , starting at position pos , and returns the number of bytes written .", "called when an item in the navigation drawer is selected .", "bind a module name to a particular modulepointer iff that name is not already bound otherwise no op .", "this method builds a list of string object from a variable argument list as input", "add a change listener to the list currently registered", "inserts the specified element at the front of this deque waiting if necessary for space to become available .", "scrolls the view to the given child .", "set a flag to stop this thread after a run .", "update the fields for a person record in the database", "dispose of the layered graphics and images", "creates a new exception object .", "starts the appender by starting a background thread to poll the error counters and publish them to graphite .", "get the current status of this operation .", "read xml as dom .", "throws an exception corresponding to this coder result .", "builds an wirefeed ( rss or atom ) from an jdom document .", "accessor method for xsch153line68", "executes a command on a service .", "apply a json patch to a config object on the router .", "called when the sectioncontainer ie notebook is being closed", "creates a new native call graph views table model .", "returns true if the current row should be examined", "returns a code chunk representing a translated variable .", "sets the stroke color to an uncolored pattern", "adds a column to this constraint", "this method wraps the method sweep ( ) to catch any exceptions that might be thrown .", "returns true if this set contains the specified string , compared case - insensitively .", "does one of two things : 1 ) return a job and acquire a permit from the semaphore 2 ) return null and does not acquire a permit from the semaphore", "adds all biomes of this type to the list of biomes allowed to generate", "recursively collects virtual files included in current file", "return true if the internal state represents the signature described in the passed in array .", "checks that the two renderers are equal but independent of one another .", "parses space name name parameter", "create the x400address object from the passed encoded der value .", "resets the display of the legend and total targets .", "increases size of array if needed", "returns true if there is a concept with the specified concept name in this rank", "creates a new instance of compoundpainter", "the actual game loop .", "associate a named tag with this element", "called when the media file is ready for playback .", "split the text into word tokens .", "columns to retrieve , if not specified all columns will be retrieved .", "request that the loading of the applet be stopped .", "removes all mappings from this hash map , leaving it empty .", "determines if the entity was declared by the dtd schema", "determines the errant bit positions and returns them in an array of integer bit positions .", "returns the sum of the bond orders for a given atom .", "request shutdown this method will be block depends the waitwhilefinish method implementation .", "creates a fake explosion at the declared player , with only sounds and effects .", "component name is equal to action command", "creates and returns new instance of foldingitemcontext", "checks if the given array of items matches this path", "return collection of children of this search tree .", "returns the pkcs1 support byte", "returns a list containing all tags and child tags of this dataobject", "returns a filename without its extension .", "returns the natural log of the values in this column as a new floatcolumn", "returns the number of events in the specified stream .", "invoked after the modification state of the view changed .", "creates a custom component for the given key", "reads in null terminated list of marshalledinstances from which locators are unmarshalled .", "start the applet", "adds a variable to set to the clause .", "returns the size of the content panel", "build the deprecated method description .", "enable / disable the so _ reuseaddr socket option .", "notifies listeners when another client joins this channel", "given a resource , infer the startup url that the resource points at , then look for an existing launch configuration that points at this url .", "add a neuron group .", "returns true if this index scanner requires an ordered index", "determines the width of this view", "list all premier add - on offers .", "creates a new plugindescription for serverpluginprovider .", "registers a new share key with this sharedusercontext such that the user will have access to the connection associated with that share key .", "sets the property value to an object using reflection .", "adds the specified component at the end of this components children", "returns the appropriate folder for a given artifact .", "helper method to initialize the internal response structure once ready .", "create a new template expression", "unregister all jspace and jspace container from all lookup services .", "sends a message to a mailbox", "accesses the singleton instance of the semestermanager", "request reply power", "start the application", "initialise all the data members", "create a new method parameter reference", "this method is called in lecenindex invalidatereaders or on commit", "invoked when the mouse enters the editor", "checks whether an mac adress exists or not in the arp list", "stops all replication services and exits the process cleanly .", "sends a metadata request to the given node .", "determine if the given string is quoted ( wrapped by ' ` ' characters at beginning and end ) .", "load products to db from products . xml", "snapshots the current selection and push it into the stack if there ' s no selection on the current position before a command is about to be redone .", "pushes the specified object onto the top of the stack .", "add a document type to the document type list .", "returns the description of one instance with any numeric values printed at the supplied maximum number of decimal places .", "instantiates a new zookeeper config provider .", "define locale for current user", "splits a chunk into two chunks .", "set the data structures that cause highlighting of changes in the error trace .", "save the contents of the fs image to the file .", "return the number of alpha levels supported by the implementation .", "generates the new navigation positions for a range of navigation items .", "creates a log record by reading one other value from the log .", "return the instance on which the method needs to get executed .", "this method is invoked when a new issue is added to burp scanner s results .", "stops the step ( and upstream ones ) and then prints an error message and optional exception message", "marshall the given parameter object .", "creates a new dauthorityinformationaccess dialog .", "looks up a build by its id .", "encrypt properties in the configuration if necessary also results in pretty print formatting of the json configuration .", "method to construct the greater than or equals expression for string", "determine whether the given ray with the origin ( originx , originy , originz ) and direction ( dirx , diry , dirz ) intersects this aabb , and return the values of the parameter t in the ray equation p ( t ) = origin + t * dir of the near and far point of intersection .", "queue up the runable will be executed at the end of the next transaction", "you are not supposed to instantiate this class .", "the \" safe \" base 10 logarithm of the input value , handling negative values by simply making them positive and then negating the return value .", "add a new folder to the watch list", "a utility for processing initiators and updating data structures .", "automatically managed component initialization", "this method adds an actor to the cell at the given position", "parses the docuemnt element for this object .", "paints the border of a progress bar .", "closes the cgrow dialog", "deserializes the version and datum from a stream .", "$ antlr start synpred249 _ java", "called when one of the subscribed edges in the parent view has been touched by the user while no child view is currently captured .", "gets cookie by name .", "compares another object with this pluginid", "moves the text cursor to the start of the next line", "returns the vector [ x y ]", "fetches the itemresolver for a content section", "deletes a project from the database .", "creates a raster based on a packed samplemodel with the specified data type , width , height , number of bands , and bits per band .", "removes a listener object from the tag .", "if the provided class has been loaded from a jar file that is on the local file system will find the absolute path to that jar file .", "convert a list of latlon to a list of positions at zero elevation .", "whether two tuples overlap .", "clear listener in switch for specify viewgroup .", "returns random character ( a - z )", "invoke this method after you ' ve changed how node is to be represented in the tree .", "returns all neighboring cells which are available for occupation", "parse and add a configuration line .", "returns a zipinputstream opened with a given charset .", "performs an action from user interface", "creates a new complex sample representing the angle with unit circle magnitude", "add the provided batch of images to the set of training images .", "resets the cursor and clears the current results .", "sets the baseline finish text value .", "performs any potentially long running actions needed to initialize the cache will be called from a worker thread .", "writes a string to a file .", "if needed paint dirty region of the snapshot", "checks is the signature covers the entire document or just part of it .", "a pattern which matches pattern1 followed by pattern2 and returns the longer of the two matches .", "pushes the specified amount of characters back into the input stream .", "sets the value with the specified name", "construct a new instance of this test case .", "connection object to the one given .", "jcypher select a label ( of nodes ) in order to drop an index that was previously created on that label", "unregister the receiver of media button intents", "write the bytes to byte array .", "creates a new consist if needed", "get working directory from job properties when it is presented .", "start foam log listener class .", "initialize the component", "brings this monitor object to life and start its heartbeats", "builds a response message that indicates some kind of error has occurred .", "builds a location object from a resultset", "undoes the lenses", "create the panel with the control buttons", "construct an instance of xsltelementdef .", "return a / b", "sets the bit 5 flag on f bit5", "implements that top - level image single task submission that is defined by the imageconsumer interface .", "toggles whether or not line numbers are visible", "unpacks the compressed character translation table .", "create a new , random chromosome with the given valid alleles .", "increments the total value which we pay the server .", "after reading all existing elements from the database add the queued elements to the underlying collection", "get artifactory server from global server configuration or from previous rtserver { . . . } scope .", "forces initialization of this index actual parsing of index pages", "flatten an array .", "get all of this records text", "compute the number of slots required to run a single map task - attempt of this job .", "exports an amazon lightsail instance or block storage disk snapshot to amazon elastic compute cloud ( amazon ec2 ) .", "gets the number of rows in the file", "convert the message to native type if necessary", "exit with a process success code .", "this method saves glove model to the given output stream .", "increase by the weight associated with a range of values .", "store the prediction made by the classifier as a string .", "replaces the element at the position with the specified element and returns the replaced element", "adds javascript which will go to the current user location", "the main timer loop .", "divide a number by a character .", "typedxmlstreamreader2 implementation , binary data", "stop proxy , and restart it after a certain amount of time .", "loads and initializes the keystore .", "concatenate the given list of bufferedimage objects to one image and returns the concatenated", "create a datebuilder with initial settings for the current date and time in the given timezone and locale .", "updates a placement with the given attributes .", "accumulate the number of times the cubic crosses the shadow extending to the right of the rectangle .", "notifies listeners that a directory download has finished", "calculate the correct item index - we have to subtract the number of headers of index value as the recyclerview doesn ' t distinguish between header rows and item rows .", "returns true if there was an error", "sets the name of the generated ide .", "this will produce the objects that create a release xml document", "indicate to the recyclerview the type of renderer used to one position using a numeric value .", "creates a new instance of headtable makes up reasonable ?", "outputs number to a file", "draws the given view to a canvas with the given scale ( higher = smaller )", "go to sleep", "schedule a repaint of the area given by the given shape", "returns whether the field allows null values or not", "helper method for implementing the comparable interface", "get an integer attribute as object or null if not present .", "calculate walking resistance for the corpse .", "shortcut for path path between low high .", "creates a new text widget", "creates a connectorreference with the supplied connectorkey", "use this api to fetch nstimer _ binding resource of given name .", "adds the text value of a text node to another", "loads a class", "unsigned comparison aboveorequal for two numbers .", "create a sourcedataquality object from its xml representation .", "perform a basic access on the db for a rudimentary test", "newservice ( ) creates a new service from a bean", "authenticate a user", "interrupt any running threads and clear the graph", "adds a new permission to the manifest .", "create a color with alpha ( percent ) + given color", "invokes a method on the given receiver for the specified arguments .", "shows a long toast .", "use this api to fetch filtered set of appfwxmlcontenttype resources .", "creates a new password field object .", "spring exception for optimistic locking .", "the only operation performed by this implementation of process is to feed the specified object to the downstream feeder", "creates a constraint with the specified durations .", "changes the mode of an alluxio file .", "creates a one off suggestion for searching the web with the current query", "gets the html5asset value for this html5creative .", "static method does not change instance state", "helper method to quietly close resultsets .", "reads parameter annotations and makes the given visitor visit them .", "tests a host for reachability .", "removes any piece on the specified square", "gets the station longitude as a value in degrees between 180 and 180", "restarts proximity browsing by setting only the selected nodes visible .", "get a value for a cell", "helper for parsing rfc3339 compliant timestamp from string", "match the value to the regular expression pattern .", "removes all of string from the second occurrence of the given word onward", "checks ability to connect to dbms using jdbc .", "method to get the file name ( or path relative to the directory ) and file to write to in the form of an array of strings where each string represents a line .", "obtain string descriptions of the nodes properties", "construct a new instance of this test case .", "validates the new password fields .", "parse attribute value as integer", "sets connection establishment timeout .", "reloads the values for listboxes into the basefilter", "mark comment as spam , submit it to akismet and delete it by setting it ' s display property to false .", "waits if necessary for at most the given time for the computation to complete , and then retrieves its result .", "fire the reference release event .", "changes color of text in background element", "return true if this value is a variable .", "add property and attribute you need", "sets case sensitiveness of this response", "callback to all objects implementing the channelnotice callback", "creates a new type instance and stores it in the database .", "method to add a listener", "helper method to get the descendants of a container with a specific widget type .", "resumes the target process so that the attached listener can handle breakpoint hits .", "toggle pause the current song", "the operator is an unary operator", "determines whether or not this array is growable or of fixed size .", "load parameters of the action by parameters string", "advances the iterator to the next element in the underlying collection and returns it .", "schedule or updates consumers of the given result partition .", "return the value of the sub algorithm on the line ( compare bytes to the previous byte of the same color on this line ) .", "indicates whether the reply is a success reply or an error reply .", "merges an array of partitions of the same type to one partition of this type", "returns a set that contains all the unique entries of the given iterator in the order of their appearance .", "adds the specified index to the specified type .", "parses a list of files .", "to exclude columns situative .", "given an xmlelement return its filtered value .", "returns if the editor should be used in full page mode", "updates the emotesets that are used to display the correct subemotes and refreshes the subscriber emotes if necessary .", "creates a jcc instruction .", "remove an item from the cart object .", "returns the y _ view of a given latitude value in world coordinates .", "find the _ fields constant that matches fieldid , or null if its not found .", "restores table content .", "replace the header stored in internal hashtable", "add a converter that has been used to convert from sourceobject to destination type ( if it has not already been added )", "subscribe to a returned fallback publisher when an error matching the given type occurs .", "handles special cases for some specific image formats", "suspends encoding of the stream .", "moves a directory to another directory .", "you are not supposed to instantiate this class .", "recursively reconfigures the cluster .", "update the title from the input", "remove the component resources .", "convert a long to an ip address", "write a byte to the file , advancing the pointer .", "installs the desired loader for loading the constraints", "learn whether a string contains replaceable properties", "looks for stores to registers , if that store is an array , builds a wrapper info for it and stores it in the wrappers collection .", "called when the surface changed size .", "fills the entry tree map with entries from the block .", "load a map of primitive type names mapped to their java class .", "return a single associated annotations that could affect binding .", "convert rows columns into an object", "returns the not rasterized polygon", "creates parent nodes , grandparent nodes , and so forth up to the root node , for the data that has been inserted into the tree .", "add the packages list that use the given class .", "merge response documents to create final response .", "writes out closing xmltape element tags and closes the currently initialized writer", "creats the event", "start of document processing", "this adds a property descriptor for the app objects feature", "add a keyword to the query .", "returns true if termination is cancelled .", "appends a byte array to the argument .", "if run in the system mode exits the program in tool mode returns the status", "fills the list from pos down to the end of the list view .", "lists a query ' s statistics .", "removes the currently selected page", "generate the rules for the modifier keywords .", "clears out index nodes associated with deleted first entry", "creates a new csv record with the given data .", "adds an object that is notified about changes in the debugger template manager .", "get stereo value as integer", "adds the specified input field to this panel", "verify that this node is the root", "returns the history of the status changes for a specific task id , or for a specific device id in that task .", "this function createas multiple partition regions on nodes specified in the vmlist", "called by an outside scan that wants to quit the scan and return the slholder to the resource pool .", "sets the settings in this material from the specified opengl contexts state"], "label": ["what", "what", "how-it-is-done", "how-it-is-done", "property", "what", "what", "how-it-is-done", "how-to-use", "what", "what", "what", "others", "why", "how-to-use", "how-it-is-done", "what", "why", "what", "what", "how-it-is-done", "why", "how-it-is-done", "what", "property", "what", "property", "what", "what", "why", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "why", "what", "how-it-is-done", "what", "how-it-is-done", "property", "what", "what", "what", "what", "how-to-use", "how-it-is-done", "what", "what", "why", "what", "what", "what", "what", "what", "what", "property", "property", "why", "how-it-is-done", "others", "why", "what", "how-it-is-done", "what", "what", "what", "why", "what", "why", "why", "how-it-is-done", "property", "how-it-is-done", "what", "what", "property", "what", "what", "how-it-is-done", "property", "what", "how-it-is-done", "how-it-is-done", "property", "what", "what", "how-it-is-done", "what", "what", "what", "property", "why", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "why", "what", "why", "how-it-is-done", "why", "what", "what", "what", "property", "property", "property", "property", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "what", "why", "why", "property", "what", "what", "property", "what", "property", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "how-to-use", "property", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "others", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "how-to-use", "what", "property", "what", "why", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "what", "others", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "why", "what", "what", "what", "what", "what", "how-it-is-done", "property", "property", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-to-use", "how-it-is-done", "property", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "why", "what", "what", "why", "why", "what", "others", "what", "how-it-is-done", "how-to-use", "how-to-use", "what", "what", "what", "why", "what", "what", "property", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "others", "property", "what", "what", "property", "what", "what", "what", "why", "what", "why", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "property", "property", "what", "how-to-use", "property", "what", "what", "what", "why", "what", "what", "what", "what", "property", "what", "others", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "property", "what", "what", "what", "how-it-is-done", "what", "what", "why", "why", "what", "property", "how-it-is-done", "how-to-use", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "why", "others", "how-it-is-done", "why", "what", "what", "what", "why", "what", "what", "what", "why", "what", "why", "why", "property", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "property", "what", "how-it-is-done", "how-it-is-done", "property", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "property", "how-it-is-done", "how-it-is-done", "what", "property", "what", "property", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "why", "property", "how-to-use", "what", "what", "property", "what", "what", "what", "how-it-is-done", "property", "what", "property", "what", "what", "property", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "property", "what", "what", "how-it-is-done", "why", "how-it-is-done", "what", "how-it-is-done", "why", "what", "property", "property", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "how-to-use", "what", "why", "what", "what", "how-it-is-done", "how-it-is-done", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "why", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "how-to-use", "property", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "why", "what", "why", "what", "how-it-is-done", "why", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "how-it-is-done", "what", "what", "property", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "why", "how-it-is-done", "how-it-is-done", "what", "what", "why", "what", "what", "what", "what", "what", "how-it-is-done", "property", "what", "property", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "why", "how-it-is-done", "what", "what", "why", "why", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "why", "property", "what", "what", "what", "what", "property", "property", "what", "what", "property", "property", "what", "what", "what", "what", "property", "what", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "property", "what", "property", "what", "how-it-is-done", "what", "others", "why", "what", "what", "how-it-is-done", "why", "what", "what", "why", "what", "property", "what", "why", "property", "what", "what", "what", "why", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-it-is-done", "how-to-use", "what", "what", "what", "what", "what", "what", "how-it-is-done", "property", "how-to-use", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "why", "what", "what", "what", "why", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "property", "how-it-is-done", "what", "property", "how-it-is-done", "what", "what", "property", "property", "what", "what", "others", "what", "how-it-is-done", "what", "why", "property", "what", "what", "what", "others", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "property", "what", "property", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "how-to-use", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "why", "what", "what", "why", "why", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "property", "how-it-is-done", "what", "property", "what", "property", "what", "property", "how-it-is-done", "how-it-is-done", "how-it-is-done", "property", "what", "how-it-is-done", "what", "what", "what", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "what", "property", "what", "how-it-is-done", "how-it-is-done", "how-to-use", "what", "what", "what", "what", "what", "what", "why", "property", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "property", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "property", "property", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "how-to-use", "how-it-is-done", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "how-it-is-done", "property", "others", "what", "how-it-is-done", "property", "property", "what", "why", "why", "what", "what", "what", "what", "what", "why", "what", "what", "property", "what", "what", "why", "what", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-to-use", "property", "how-it-is-done", "property", "how-it-is-done", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "property", "what", "what", "others", "property", "what", "what", "what", "property", "what", "what", "property", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "what", "property", "how-to-use", "how-it-is-done", "property", "what", "what", "how-it-is-done", "property", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "others", "how-it-is-done", "what", "why", "what", "how-to-use", "property", "why", "what", "what", "property", "why", "what", "what", "what", "what", "why", "what", "what", "what", "why", "how-it-is-done", "property", "how-to-use", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "property", "why", "what", "what", "what", "why", "what", "what", "what", "what", "property", "what", "others", "what", "what", "how-it-is-done", "why", "how-it-is-done", "what", "others", "what", "what", "property", "what", "why", "what", "what", "what", "others", "what", "what", "what", "why", "what", "property", "what", "how-it-is-done", "what", "what", "what", "what", "property", "others", "what", "why", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "why", "what", "what", "why", "what", "how-it-is-done", "why", "what", "property", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "why", "how-to-use", "property", "what", "what", "what", "what", "what", "property", "what", "what", "what", "why", "why", "how-to-use", "what", "what", "what", "what", "property", "what", "what", "what", "property", "what", "why", "what", "what", "property", "how-it-is-done", "what", "why", "property", "property", "why", "what", "what", "what", "what", "how-to-use", "what", "what", "how-it-is-done", "property", "how-it-is-done", "why", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "property", "why", "what", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "how-it-is-done", "what", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-it-is-done", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "property", "why", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "why", "how-it-is-done", "what", "what", "what", "what", "what", "why", "how-it-is-done", "what", "what", "why", "what", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "property", "property", "why", "what", "what", "how-to-use", "what", "how-it-is-done", "what", "what", "why", "what", "property", "what", "why", "what", "what", "what", "what", "what", "what", "why", "what", "property", "what", "what", "why", "what", "what", "why", "property", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "property", "why", "what", "what", "what", "why", "what", "property", "property", "what", "what", "property", "why", "what", "what", "what", "what", "what", "what", "what", "what", "property", "how-it-is-done", "how-to-use", "what", "property", "what", "what", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "property", "what", "how-it-is-done", "how-it-is-done", "property", "what", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "others", "how-it-is-done", "what", "what", "why", "what", "property", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "why", "what", "how-it-is-done", "how-it-is-done", "what", "what", "property", "what", "what", "property", "what", "property", "what", "why", "what", "what", "why", "how-it-is-done", "what", "why", "what", "how-it-is-done", "what", "what", "how-it-is-done", "why", "how-it-is-done", "how-to-use", "what", "what", "what", "why", "how-it-is-done", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "how-it-is-done", "why", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "property", "what", "why", "what", "what", "what", "how-it-is-done", "what", "what", "property", "what", "what", "why", "property", "how-it-is-done", "what", "why", "what", "property", "what", "what", "property", "what", "how-it-is-done", "what", "how-to-use", "how-it-is-done", "what", "what", "what", "what", "what", "why", "what", "what", "how-to-use", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "why", "what", "what", "what", "what", "what", "how-it-is-done", "what", "why", "what", "what", "what", "property", "what", "what", "what", "property", "what", "property", "why", "what", "what", "others", "what", "what", "what", "what", "what", "what", "why", "how-to-use", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "how-it-is-done", "how-to-use", "what", "what", "property", "what", "what", "what", "why", "why", "what", "what", "why", "what", "property", "what", "what", "why", "what", "what", "property", "how-it-is-done", "property", "property", "what", "what", "property", "others", "what", "how-it-is-done", "what", "property", "why", "what", "what", "what", "what", "what", "what", "why", "how-it-is-done", "property", "what", "what", "what", "how-it-is-done", "what", "why", "what", "what", "what", "what", "property", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "what", "property", "why", "what", "property", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "property", "why", "what", "why", "what", "what", "what", "what", "what", "property", "what", "what", "property", "what", "why", "property", "why", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "property", "what", "why", "how-it-is-done", "why", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "property", "others", "what", "what", "property", "how-to-use", "what", "why", "why", "what", "how-it-is-done", "why", "why", "property", "what", "what", "what", "why", "what", "property", "how-it-is-done", "what", "how-it-is-done", "others", "what", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "how-to-use", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "property", "what", "why", "what", "how-to-use", "how-to-use", "what", "property", "property", "what", "what", "why", "property", "how-it-is-done", "how-it-is-done", "what", "property", "how-it-is-done", "what", "what", "what", "what", "property", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "how-it-is-done", "why", "property", "what", "what", "what", "what", "property", "property", "property", "property", "property", "property", "how-to-use", "why", "how-it-is-done", "what", "how-it-is-done", "property", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "why", "what", "what", "property", "why", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "property", "what", "why", "what", "what", "what", "property", "why", "what", "property", "how-to-use", "how-it-is-done", "what", "what", "what", "what", "why", "what", "how-it-is-done", "how-to-use", "how-it-is-done", "what", "how-it-is-done", "what", "what", "why", "what", "what", "what", "others", "how-to-use", "what", "what", "what", "property", "why", "what", "what", "what", "what", "how-it-is-done", "what", "what", "property", "how-to-use", "property", "how-it-is-done", "property", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "why", "how-it-is-done", "what", "how-it-is-done", "property", "what", "what", "what", "how-it-is-done", "what", "why", "what", "others", "how-it-is-done", "what", "property", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "why", "what", "why", "what", "what", "what", "why", "what", "what", "why", "what", "why", "what", "what", "what", "how-it-is-done", "what", "why", "what", "why", "what", "why", "how-it-is-done", "what", "what", "why", "why", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "why", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "why", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "how-it-is-done", "property", "how-it-is-done", "what", "why", "property", "property", "how-it-is-done", "what", "what", "property", "what", "what", "what", "how-it-is-done", "how-it-is-done", "why", "what", "what", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "why", "what", "how-it-is-done", "how-to-use", "what", "what", "property", "how-it-is-done", "property", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "why", "what", "property", "how-it-is-done", "how-to-use", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what"]}