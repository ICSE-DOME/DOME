{"id": [8872, 6253, 2284, 10070, 4141, 1814, 8274, 1694, 139, 14742, 12979, 9837, 19303, 3487, 6168, 1270, 18365, 5835, 10915, 3999, 8038, 3761, 6419, 14921, 17117, 15244, 10932, 16863, 3203, 3259, 10898, 13149, 15149, 3986, 4798, 3847, 14502, 9707, 8473, 6653, 17065, 10799, 3760, 5704, 16656, 8901, 14522, 10310, 3698, 8325, 5926, 1839, 10108, 14156, 17253, 1786, 8283, 9332, 5195, 465, 9449, 19974, 10272, 8832, 16409, 10784, 10346, 2167, 6008, 12835, 14760, 4186, 8540, 10274, 3416, 15721, 5376, 13206, 10269, 13589, 19284, 16966, 419, 12220, 15008, 15599, 17171, 19799, 9513, 9328, 1230, 9709, 11806, 18938, 17076, 10443, 5609, 3666, 11167, 12042, 7279, 18999, 790, 11550, 11404, 1459, 15918, 14874, 13371, 2274, 8375, 12171, 10568, 3131, 1583, 8835, 17186, 17916, 12303, 7960, 15549, 4930, 936, 991, 12191, 35, 1982, 5473, 11058, 14995, 9280, 15374, 17921, 4049, 5708, 19490, 2821, 1783, 2006, 8887, 2933, 19672, 19898, 19604, 4548, 6888, 12922, 6382, 13234, 18000, 19669, 7304, 13331, 18808, 8115, 16502, 16179, 11694, 11143, 4735, 17809, 9334, 10761, 19656, 7450, 13025, 18511, 16610, 14069, 4774, 3038, 13416, 18923, 444, 12421, 3711, 15348, 17554, 7170, 7464, 3876, 3352, 16552, 6538, 19628, 11156, 3789, 15201, 16216, 11229, 9847, 13009, 2760, 18391, 2586, 10806, 1331, 3283, 2139, 3374, 8495, 6861, 11534, 7654, 14650, 3679, 9569, 9763, 12383, 8070, 7007, 10218, 6738, 12907, 4808, 5253, 18284, 12812, 408, 6476, 6986, 603, 479, 19635, 2361, 9853, 3100, 11871, 19555, 18855, 18094, 8424, 18318, 11095, 7537, 19580, 12932, 12711, 19941, 9807, 1304, 1327, 1691, 8688, 13433, 11673, 12885, 11733, 15148, 7794, 11621, 16401, 14685, 4989, 4272, 1185, 1827, 6173, 3894, 16274, 3889, 6879, 9618, 10489, 7252, 10685, 7815, 13577, 3970, 2479, 12101, 9832, 17487, 19743, 16112, 11618, 11463, 9347, 11353, 2854, 10473, 4270, 2207, 6583, 9831, 3181, 158, 19372, 8139, 15718, 16331, 4872, 923, 10335, 12661, 5218, 4979, 6213, 19614, 1466, 4444, 18397, 8645, 19174, 6568, 14981, 7874, 11911, 3519, 14808, 5437, 18552, 12939, 6130, 3385, 18231, 11522, 355, 1356, 9476, 1607, 13329, 17140, 9973, 8746, 8601, 818, 9895, 16330, 17932, 2382, 3503, 16252, 1321, 995, 13878, 176, 14909, 9258, 19946, 2529, 2583, 16686, 3269, 9873, 8849, 13432, 13223, 3571, 5282, 6322, 10574, 13585, 12238, 10050, 11086, 5622, 5657, 17998, 17694, 14134, 17955, 17146, 13356, 564, 15366, 10114, 17252, 7300, 2844, 6250, 11164, 2738, 14813, 2965, 16759, 12560, 6739, 3097, 16918, 5654, 10543, 9162, 3175, 10637, 11828, 1076, 14638, 6790, 6153, 11364, 13029, 14515, 6640, 16534, 11383, 7908, 16369, 19583, 13069, 5775, 8695, 12273, 18515, 1226, 18496, 5095, 14124, 15321, 10611, 5961, 9261, 12753, 1955, 796, 19904, 16631, 12801, 2936, 2037, 14669, 16992, 12901, 284, 5738, 5052, 3663, 728, 3205, 15055, 8398, 11924, 17760, 17938, 12391, 16779, 15285, 8850, 16579, 5762, 13101, 7278, 16525, 8306, 9043, 2490, 1225, 16125, 18010, 1176, 14920, 7844, 2062, 7008, 17278, 9790, 16116, 3623, 16399, 16663, 5150, 3650, 4649, 17728, 19326, 7694, 7425, 14096, 4062, 3776, 11863, 7173, 18536, 1917, 17180, 4486, 6588, 7341, 3440, 7943, 18254, 19494, 14233, 742, 7824, 17120, 17189, 9511, 3969, 16284, 18637, 11067, 19542, 6310, 18956, 12668, 968, 3292, 6144, 17477, 11299, 18695, 1152, 17415, 7649, 7823, 10168, 6965, 3331, 2803, 13617, 12526, 6819, 19979, 8999, 5174, 14837, 4881, 4846, 11144, 10760, 15711, 18921, 6256, 14140, 5541, 219, 13296, 19605, 3044, 8781, 3001, 11704, 5054, 4555, 9887, 1907, 6391, 11311, 9714, 18009, 14731, 19665, 11967, 12035, 1732, 7065, 19938, 11273, 13314, 9636, 15588, 1392, 15480, 428, 1291, 19650, 15466, 15422, 18196, 1233, 5834, 2000, 410, 642, 18140, 19784, 4790, 16212, 762, 10539, 5781, 16869, 11361, 5795, 7258, 18792, 4869, 994, 19331, 16818, 18279, 8095, 10459, 19682, 11087, 14496, 19052, 4873, 5012, 13998, 6217, 3584, 3563, 16557, 15834, 913, 12483, 12206, 15031, 14645, 19059, 941, 8220, 12851, 2126, 5042, 16215, 18613, 15223, 7321, 11385, 18098, 19828, 16512, 2168, 7777, 8243, 6462, 1503, 720, 14722, 10056, 3437, 10169, 18672, 4391, 10781, 1082, 18394, 1502, 13165, 937, 133, 5510, 10931, 6142, 10737, 4978, 1775, 14772, 8088, 967, 15331, 9250, 12847, 7770, 70, 13704, 1480, 5920, 13396, 1828, 1396, 3149, 15344, 16627, 6989, 8718, 5928, 2937, 7467, 16937, 9384, 10051, 18396, 16860, 3035, 5152, 17779, 2036, 1621, 1921, 18928, 1822, 8770, 7322, 2068, 9617, 10481, 264, 6057, 2158, 14163, 6524, 5356, 1721, 9035, 5168, 12542, 18362, 6843, 14744, 3340, 9809, 5115, 17722, 7483, 12307, 893, 7040, 17111, 13303, 19508, 18877, 8156, 11039, 16926, 645, 5328, 15533, 13194, 7405, 16103, 12040, 16893, 9017, 1318, 19846, 7031, 19288, 9644, 3699, 4407, 17167, 4374, 7184, 8926, 10652, 2739, 17370, 13812, 640, 13176, 3305, 19906, 15259, 17595, 15581, 10077, 8782, 6147, 374, 5283, 11450, 17590, 841, 6873, 6754, 3268, 15636, 13430, 1677, 5736, 7975, 12959, 9992, 12312, 14241, 4737, 16514, 11010, 7480, 19765, 1382, 2993, 5318, 295, 3553, 6283, 3706, 17188, 3103, 4074, 19121, 13583, 2572, 15867, 5828, 17658, 9760, 1995, 16363, 13000, 4091, 7255, 14225, 6415, 8547, 14300, 19, 2216, 11690, 37, 4833, 12510, 7710, 14799, 9783, 7083, 10446, 7861, 13485, 11899, 18858, 16856, 3110, 17903, 14170, 17646, 14723, 10796, 2571, 13688, 5062, 3302, 19393, 11520, 17764, 10107, 13306, 17593, 2612, 910, 16396, 2691, 11840, 13008, 18301, 17005, 1657, 5788, 5713, 7284, 5349, 18235, 14724, 16315, 18772, 9926, 19732, 15042, 11108, 9147, 3712, 8441, 13690, 13410, 1916, 19276, 15309, 8885, 1566, 13107, 15018, 13259, 1134, 5366, 18053, 2700, 8608, 7234, 750, 6486, 10724, 3024, 4188, 13126, 7504, 8976, 11869, 3311, 4450, 6404, 9607, 8368, 17544, 3611, 13591, 8022, 13646, 11860, 18114, 4448, 19507, 7925, 15890, 11600, 7749, 1974, 3281, 10575, 5021, 8546, 17096, 9970, 19696, 13902, 13111, 14941, 4071, 10188, 8479, 10793, 8687, 451, 15299, 16480, 6677, 13431, 510, 16243, 3771, 11061, 10029, 2346, 19109, 18902, 19423, 14601, 10293, 18031, 17078, 952, 13092, 11163, 6596, 11658, 13721, 15693, 16721, 13513, 12845, 590, 830, 3436, 447, 15517, 11616, 8037, 19054, 6101, 8315, 13108, 10042, 8222, 978, 13115, 8215, 10463, 7928, 1000, 8618, 17607, 17327, 19850, 11483, 3697, 9469, 7306, 15202, 17303, 3058, 19807, 19782, 14123, 10302, 9287, 10118, 19091, 12589, 2317, 6753, 3375, 4231, 15340, 9321, 16621, 7802, 13210, 14366, 7622, 4671, 9140, 6705, 6424, 11026, 4254, 3443, 4854, 16375, 9600, 7403, 13805, 7150, 19848, 19570, 9496, 6353, 4344, 12887, 8521, 11508, 17615, 9387, 13901, 2364, 13755, 11269, 10427, 18754, 12882, 12247, 120, 7418, 13051, 10022, 12149, 19498, 15254, 8360, 9743, 8053, 11165, 6262, 14438, 6325, 8756, 7175, 16008, 4129, 5298, 1479, 1557, 11380, 12608, 14481, 16593, 8662, 18620, 845, 10771, 11723, 8456, 12286, 14371, 17155, 17680, 7035, 6162, 10294, 4106, 15173, 7570, 1002, 8698, 17095, 12411, 9193, 10301, 13942, 16941, 15724, 11597, 8661, 7784, 17164, 8673, 4154, 4294, 6407, 2280, 5653, 15323, 837, 17330, 7352, 14819, 4812, 16244, 15657, 4463, 6802, 6364, 6759, 11989, 17759, 5464, 12242, 2724, 4190, 19910, 17222, 9149, 5598, 27, 14647, 5146, 9199, 15478, 2230, 6472, 1682, 3577, 11290, 12131, 300, 10819, 3009, 15848, 2021, 6230, 19884, 4731, 562, 4975, 18833, 16117, 14298, 1782, 12837, 15649, 9139, 12833, 18607, 6362, 4087, 19033, 11495, 10227, 17400, 10578, 16705, 7798, 17071, 11291, 19544, 7502, 12628, 13321, 15227, 5752, 6945, 5452, 7732, 9892, 3920, 14531, 8468, 1655, 4236, 236, 3425, 16735, 749, 10929, 9330, 5934, 1885, 976, 18123, 12669, 1455, 14702, 3910, 1932, 5046, 964, 8020, 3791, 17346, 6508, 12112, 13605, 14402, 6674, 2717, 7793, 19132, 4814, 665, 9246, 17564, 6721, 17498, 7428, 9904, 5586, 5313, 10810, 3267, 13867, 11451, 14290, 7233, 14802, 9695, 10886, 11307, 18692, 13673, 18513, 15802, 2381, 208, 19598, 393, 19225, 8667, 13195, 3186, 2684, 14495, 17163, 8631, 10258, 12881, 922, 13532, 6523, 8151, 3253, 1717, 10160, 11756, 6337, 17983, 9797, 11192, 16725, 17437, 8588, 9440, 4394, 16308, 618, 19159, 5870, 16899, 8253, 9673, 2573, 2369, 5876, 4673, 17930, 258, 13242, 19250, 1755, 6461, 3659, 17263, 8085, 10205, 8120, 9062, 14749, 8247, 3279, 2784, 3430, 8090, 13687, 6207, 709, 2635, 12634, 18804, 3376, 10451, 2416, 4145, 8727, 18182, 8214, 4056, 11232, 849, 19071, 1612, 5633, 13060, 3779, 5064, 12058, 2032, 13771, 18686, 15099, 14656, 16605, 14721, 14540, 13401, 15791, 10202, 9289, 19579, 13641, 15458, 15638, 11485, 3935, 736, 5786, 12292, 14862, 8318, 1679, 13298, 14334, 14248, 478, 2285, 8919, 16601, 5760, 14177, 1705, 15794, 1530, 13172, 17133, 17627, 6856, 9599, 19142, 16940, 7407, 18465, 7832, 8843, 19640, 4246, 9382, 2858, 3367, 17094, 13846, 11984, 14927, 2740, 6862, 15956, 17502, 8459, 3647, 15707, 4412, 17159, 7455, 8286, 6403, 8464, 254, 14859, 12803, 8517, 19700, 19214, 5893, 18174, 8586, 341, 17960, 14005, 9685, 8280, 14519, 14660, 16296, 16571, 3081, 17975, 19755, 10013, 10752, 11765, 2034, 10975, 4443, 4358, 16234, 18530, 7477, 5081, 7191, 602, 3210, 15873, 11731, 18166, 15885, 5468, 2439, 4293, 962, 1456, 5576, 19280, 513, 12078, 19787, 1971, 474, 18612, 6911, 5862, 1201, 13906, 8346, 5693, 10141, 14188, 5627, 13463, 3104, 6409, 19791, 1596, 18027, 10088, 15213, 17969, 15937, 7471, 10280, 8629, 2886, 7822, 3496, 11158, 1754, 1869, 4225, 7659, 443, 4851, 3548, 15627, 17331, 10047, 10338, 16021, 17449, 17508, 19238, 7213, 2976, 15690, 16005, 9711, 15387, 2257, 9879, 12807, 1581, 657, 8799, 9698, 14754, 7142, 1745, 11963, 18848, 8856, 14665, 277, 538, 16714, 19442, 307, 2492, 6598, 14781, 1347, 4981, 16877, 18471, 18068, 9558, 8952, 16881, 904, 1504, 7606, 8914, 12158, 1737, 6060, 9881, 16633, 8830, 14056, 2265, 10960, 4176, 7955, 15370, 2561, 84, 7864, 16434, 6129, 2111, 4376, 14025, 15968, 1959, 8719, 12399, 9561, 18389, 3287, 15893, 15979, 2171, 4718, 3982, 4708, 3054, 18256, 11766, 11308, 4568, 12927, 14563, 12962, 8523, 18238, 3823, 14594, 7499, 8154, 19077, 10006, 12775, 13529, 6692, 5996, 12689, 2371, 15124, 18954, 3801, 11418, 5391, 2140, 2923, 13468, 10681, 2622, 7512, 17920, 16537, 4153, 5252, 4724, 3164, 12378, 71, 3730, 12039, 8867, 4340, 18984, 5158, 8042, 3660, 6587, 19914, 7519, 5442, 8131, 4043, 13613, 13742, 3955, 3434, 3395, 15727, 10768, 15019, 797, 8932, 7221, 11946, 12460, 5255, 3260, 4591, 2027, 9906, 12014, 6905, 3046, 13593, 5084, 19007, 3295, 17725, 15200, 3644, 16618, 18498, 18838, 5182, 15971, 7044, 11865, 16958, 5495, 249, 9409, 16325, 19323, 5951, 1105, 9684, 5285, 2370, 13224, 4683, 378, 13637, 7203, 15695, 7769, 6494, 17377, 12290, 15596, 11954, 10003, 10207, 19128, 11319, 12454, 2120, 7756, 12547, 19607, 17004, 19562, 19714, 2563, 16110, 2019, 5906, 5367, 16671, 144, 1570, 14975, 5319, 5639, 12511, 576, 15993, 19917, 954, 13041, 4332, 2534, 11862, 8596, 1437, 11271, 5422, 7670, 3645, 12069, 2398, 756, 12875, 1625, 14965, 8364, 14427, 6719, 17795, 13267, 7800, 15586, 8987, 6703, 17750, 5105, 1591, 11568, 13869, 7851, 9371, 4306, 15260, 17691, 17754, 12464, 7144, 12379, 4386, 18666, 16393, 4405, 4018, 16312, 6686, 142, 19882, 16632, 12188, 9237, 3323, 12406, 12428, 6094, 5246, 16061, 12256, 12351, 5718, 10844, 8610, 4213, 10012, 2215, 11481, 9122, 11708, 17721, 2066, 8814, 11255, 4720, 17501, 5082, 18918, 2626, 2500, 583, 2310, 19817, 19868, 6479, 9285, 5976, 17473, 4760, 1838, 8899, 11500, 7646, 16414, 7771, 1074, 9467, 18583, 13455, 9027, 17594, 9710, 8724, 2087, 8585, 7025, 16453, 14755, 17512, 10484, 14016, 3740, 11903, 17362, 8941, 7189, 10503, 1157, 6735, 3335, 6571, 5359, 15139, 15034, 12272, 14015, 16939, 3748, 19421, 18829, 9953, 12163, 2538, 4350, 9960, 9995, 14446, 11631, 3656, 15910, 1013, 6620, 5675, 5923, 14216, 2041, 12333, 17739, 6005, 13276, 5059, 17131, 6623, 17792, 19552, 14892, 15047, 891, 16487, 5630, 6435, 9674, 15619, 15969, 11654, 11878, 5203, 5156, 357, 2709, 8675, 17599, 9827, 4884, 13736, 4255, 6270, 11021, 17857, 17457, 18258, 7836, 18058, 3230, 3911, 18285, 6384, 11219, 11855, 13508, 7112, 2912, 5613, 16539, 6264, 15743, 12892, 10794, 7466, 11174, 9277, 16615, 19163, 5425, 11857, 6133, 8582, 9427, 9923, 11413, 7373, 3429, 12946, 4327, 7601, 9626, 2455, 13625, 3749, 6292, 14218, 18088, 5375, 6574, 10899, 15011, 9726, 4117, 19184, 17217, 2433, 947, 7342, 6531, 412, 4428, 19150, 18582, 2481, 132, 15538, 6388, 10296, 15437, 12235, 5288, 9178, 11540, 4174, 19480, 4612, 11804, 18700, 9573, 12890, 10498, 1613, 7509, 275, 6638, 8759, 9442, 18797, 14083, 3887, 16418, 7754, 10684, 14347, 10906, 5880, 471, 6845, 8983, 8494, 6437, 1069, 12287, 2836, 8177, 1199, 6350, 10510, 11396, 2412, 17945, 10144, 19304, 7088, 19483, 8209, 10523, 4800, 15545, 19118, 8991, 7903, 2938, 8145, 5453, 422, 6185, 10958, 1525, 9437, 12462, 9648, 4610, 5466, 744, 15316, 18708, 13201, 8636, 9060, 1914, 5161, 5509, 1661, 18543, 9821, 16339, 3787, 2256, 13729, 6766, 3774, 2786, 12366, 2668, 10390, 16064], "code": ["  private String findCharset(Reader localReader) throws IOException {\n    LineNumberReader reader = new LineNumberReader(localReader);\n\n    // read at least 5 lines\n    String line;\n    String encoding = FileType.DEFAULT_ENCODING.toString();\n    int counter = 0;\n    while ((line = reader.readLine()) != null) {\n      if (line.lastIndexOf(\";charset\") > 0)\n        // found line with charset. Format is \"<encoding>\";charset\n        return encoding = line.substring(1, line.indexOf(\";charset\") - 1);\n      counter++;\n      if (counter >= 5) {\n        break;\n      }\n    }\n    return encoding;\n  }\n", "public void addBranchCondition(String className,String methName,int branchIndex,IntegerConstraint c){\n  Constraint<?> normalizedConstraint=normalizeConstraint(c);\n  LinkedList<Constraint<?>> branch_supporting_constraints=new LinkedList<Constraint<?>>(currentSupportingConstraints);\n  BranchCondition new_branch=new BranchCondition(className,methName,branchIndex,normalizedConstraint,branch_supporting_constraints);\n  branchConditions.add(new_branch);\n  currentSupportingConstraints.clear();\n}\n", "public static void matrixMult(MatrixBlock m1,MatrixBlock m2,MatrixBlock ret,int k) throws DMLRuntimeException {\n  if (m1.isEmptyBlock(false) || m2.isEmptyBlock(false)) {\n    ret.examSparsity();\n    return;\n  }\n  if (m1.rlen == 1 && (8L * m2.clen * k > MEM_OVERHEAD_THRESHOLD || !LOW_LEVEL_OPTIMIZATION || m2.clen == 1 || m1.isUltraSparse() || m2.isUltraSparse()) || 2L * m1.rlen * m1.clen* m2.clen < PAR_MINFLOP_THRESHOLD) {\n    matrixMult(m1,m2,ret);\n    return;\n  }\n  boolean tm2=checkPrepMatrixMultRightInput(m1,m2);\n  m2=prepMatrixMultRightInput(m1,m2);\n  ret.sparse=(m1.isUltraSparse() || m2.isUltraSparse());\n  if (!ret.sparse)   ret.allocateDenseBlock();\n else   ret.allocateSparseRowsBlock();\n  if (!ret.isThreadSafe()) {\n    matrixMult(m1,m2,ret);\n    return;\n  }\n  boolean pm2r=checkParMatrixMultRightInputRows(m1,m2,k);\n  boolean pm2c=checkParMatrixMultRightInputCols(m1,m2,k,pm2r);\n  int num=pm2r ? m2.rlen : pm2c ? m2.clen : m1.rlen;\n  try {\n    ExecutorService pool=Executors.newFixedThreadPool(k);\n    ArrayList<MatrixMultTask> tasks=new ArrayList<MatrixMultTask>();\n    int nk=(pm2r || pm2c) ? k : UtilFunctions.roundToNext(Math.min(8 * k,num / 32),k);\n    ArrayList<Integer> blklens=getBalancedBlockSizes(num,nk);\n    for (int i=0, lb=0; i < blklens.size(); lb+=blklens.get(i), i++)     tasks.add(new MatrixMultTask(m1,m2,ret,tm2,pm2r,pm2c,lb,lb + blklens.get(i)));\n    List<Future<Object>> taskret=pool.invokeAll(tasks);\n    pool.shutdown();\n    ret.nonZeros=0;\n    for (    Future<Object> task : taskret) {\n      if (pm2r)       vectAdd((double[])task.get(),ret.denseBlock,0,0,ret.rlen * ret.clen);\n else       ret.nonZeros+=(Long)task.get();\n    }\n    if (pm2r)     ret.recomputeNonZeros();\n  }\n catch (  Exception ex) {\n    throw new DMLRuntimeException(ex);\n  }\n  ret.examSparsity();\n}\n", "\tpublic boolean checkCommodity(Commodity com, int amount) {\n\t\tif (commodityProperty[com.getID()]>=amount) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n", "@Override public int read() throws IOException {\n  return fInputStream.read();\n}\n", "public static Map<String,Object> dayStartCapacityAvailable(GenericValue techDataCalendarWeek,int dayStart){\n  Map<String,Object> result=FastMap.newInstance();\n  int moveDay=0;\n  Double capacity=null;\n  Time startTime=null;\n  while (capacity == null || capacity.doubleValue() == 0) {\nswitch (dayStart) {\ncase Calendar.MONDAY:\n      capacity=techDataCalendarWeek.getDouble(\"mondayCapacity\");\n    startTime=techDataCalendarWeek.getTime(\"mondayStartTime\");\n  break;\ncase Calendar.TUESDAY:\ncapacity=techDataCalendarWeek.getDouble(\"tuesdayCapacity\");\nstartTime=techDataCalendarWeek.getTime(\"tuesdayStartTime\");\nbreak;\ncase Calendar.WEDNESDAY:\ncapacity=techDataCalendarWeek.getDouble(\"wednesdayCapacity\");\nstartTime=techDataCalendarWeek.getTime(\"wednesdayStartTime\");\nbreak;\ncase Calendar.THURSDAY:\ncapacity=techDataCalendarWeek.getDouble(\"thursdayCapacity\");\nstartTime=techDataCalendarWeek.getTime(\"thursdayStartTime\");\nbreak;\ncase Calendar.FRIDAY:\ncapacity=techDataCalendarWeek.getDouble(\"fridayCapacity\");\nstartTime=techDataCalendarWeek.getTime(\"fridayStartTime\");\nbreak;\ncase Calendar.SATURDAY:\ncapacity=techDataCalendarWeek.getDouble(\"saturdayCapacity\");\nstartTime=techDataCalendarWeek.getTime(\"saturdayStartTime\");\nbreak;\ncase Calendar.SUNDAY:\ncapacity=techDataCalendarWeek.getDouble(\"sundayCapacity\");\nstartTime=techDataCalendarWeek.getTime(\"sundayStartTime\");\nbreak;\n}\nif (capacity == null || capacity.doubleValue() == 0) {\nmoveDay+=1;\ndayStart=(dayStart == 7) ? 1 : dayStart + 1;\n}\n}\nresult.put(\"capacity\",capacity);\nresult.put(\"startTime\",startTime);\nresult.put(\"moveDay\",Integer.valueOf(moveDay));\nreturn result;\n}\n", "protected Map<String,RamlQueryParameter> extractQueryParameters(RamlActionType apiAction,Method method,Map<String,String> parameterComments){\n  if (apiAction.equals(RamlActionType.POST) || method.getParameterCount() == 0) {\n    return Collections.emptyMap();\n  }\n  Map<String,RamlQueryParameter> queryParams=new LinkedHashMap<>();\n  for (  Parameter param : method.getParameters()) {\n    if (isQueryParameter(param)) {\n      RamlParamType simpleType=SchemaHelper.mapSimpleType(param.getType());\n      if (simpleType == null) {\n        queryParams.putAll(SchemaHelper.convertClassToQueryParameters(param,javaDocs.getJavaDoc(param.getType())));\n      }\n else {\n        String paramComment=parameterComments.get(param.getName());\n        queryParams.putAll(SchemaHelper.convertParameterToQueryParameter(param,paramComment));\n      }\n    }\n  }\n  return queryParams;\n}\n", "   public boolean isScrollingTextField() {\n\t  return scrollingTextField;\n   }\n", "protected Buffer checkErrorPacket() throws SQLException {\n  return checkErrorPacket(-1);\n}\n", "public PagedList<StampCapacityInner> listCapacities(final String resourceGroupName, final String name) {\n        ServiceResponse<Page<StampCapacityInner>> response = listCapacitiesSinglePageAsync(resourceGroupName, name).toBlocking().single();\n        ret", "public static Bit2Array convertNSequenceToBit2Array(NucleotideSequence seq) {\n        if (seq.containWildcards())\n            throw new IllegalArgumentException(\"Sequences with wildcards are not supported.\");\n        Bit2Array bar = new Bit2Array(seq.size());\n        for (int i = 0; i < seq.size(); i++)\n            bar.set(i, seq.codeAt(i));\n        return bar;\n    }", "private void addToken(final List<String> list, String tok) {\n        if (StringUtils.isEmpty(tok)) {\n            if (isIgnoreEmptyTokens()) {\n                return;\n            }\n            if (isEmptyTokenAsNull()) {\n                tok = null;\n            }\n        }\n        list.add(tok);\n    }", "private float d2x ( float size ) { return TypedValue . applyDimension ( TypedValue . COMPLEX_UNIT_DIP , size , getContext ( ) . getResources ( ) . getDisplayMetrics ( ) ) ; }", "public static int size(float[] array){\n  return Array.getLength(array);\n}\n", "\tprivate void mousError() {\n\t\tUPrint mouserr = new UPrint(this,\n\t\t\t\t\"Nothing Selected\",\n\t\t\t\t\"Move Mouse closer to Something\",\n\t\t\t\t\"Try Again\");\n\t\tmouserr.setVisible(true);\n\n\t}\t\t// end mousError()\n", "public static Cluster connectCluster(String host, int port) {\n\tBuilder clusterBuilder = Cluster.builder();\n\t// Socket Options\n\tSocketOptions socketOptions = new SocketOptions();\n\tsocketOptions.setConnectTimeoutMillis(60000);\n\tsocketOptions.setKeepAlive(true);\n\tsocketOptions.setReadTimeoutMillis(30000);\n\treturn clusterBuilder.addContactPoint(host)\n\t\t.withSocketOptions(socketOptions).withPort(port).build();\n    }", "void modifyNamingAttributes ( Object service , Entry [ ] attrSetTemplates , Entry [ ] attrSets ) throws RemoteException ;", "public Workflow.Method zoneNullRollbackMethod(){\n  return new Workflow.Method(\"zoneNullRollback\");\n}\n", "    public void setText(String text) {\n        textField.setText(text);\n        displayPosInfo();\n    }\n", "public void requestRender(){\n  mRenderHost.requestRender();\n}\n", "public static Map<Option,String> parseOptions(String optionLine){\n  Map<Option,String> options=new HashMap<Option,String>();\n  for (  String s : optionLine.split(\"\\\\s+\")) {\n    if (s.length() > 0) {\n      boolean valid=false;\n      for (      OptionParser h : optionHandlers) {\n        if (h.handle(options,s)) {\n          valid=true;\n          break;\n        }\n      }\n      if (!valid) {\n        throw new Profiler4JError(\"Unknown rule option '\" + s + \"'\");\n      }\n    }\n  }\n  return options;\n}\n", "private void cmd_deleteSelection(){\n  m_frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n  if (ADialog.ask(getWindowNo(),m_frame,\"DeleteSelection\")) {\n    int records=deleteSelection();\n    setStatusLine(Msg.getMsg(Env.getCtx(),\"Deleted\") + records,false);\n  }\n  m_frame.setCursor(Cursor.getDefaultCursor());\n  bDelete.setSelected(false);\n  executeQuery();\n  ;\n}\n", "\tprotected void setDirty(boolean dirty) {\n\t\tif (isDirty != dirty) {\n\t\t\tisDirty = dirty;\n\t\t\tfirePropertyChange(IEditorPart.PROP_DIRTY);\n\t\t}\n\t}\n", "public void printCoordinate(int[] index, long[] data, int offset) {\n        int size = index.length;\n        if (size != data.length)\n            throw new IllegalArgumentException(\n                    \"All arrays must be of the same size\");\n        for (", "private CGlobalSettings ( ) { }", "private void checkArguments ( final BreakpointType type , final BreakpointAddress address ) { Preconditions . checkNotNull ( type , STR_ ) ; Preconditions . checkNotNull ( address , STR_ ) ; }", "public URLLabel(final URI uri,final String display){\n  this(uri.toString(),display);\n}\n", "public FixedRateBond ( final int settlementDays , final double faceAmount , final Schedule schedule , final double [ ] coupons , final DayCounter accrualDayCounter , final BusinessDayConvention paymentConvention , final double redemption ) { this ( settle", "    private void initGUI() {\n        setLayout(new GridLayout(actions.length, 1));\n        setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\n\n        for (int i = 0; i < actions.length; i++) {\n            JButton button = new JButton(actions[i]);\n            add(button);\n        }\n    }\n", "private PDFObject popObject() throws PDFParseException {\n  Object obj=stack.pop();\n  if (!(obj instanceof PDFObject)) {\n    throw new PDFParseException(\"Expected a reference here: \" + obj.toString());\n  }\n  return (PDFObject)obj;\n}\n", "    public void addTreeModelListener(TreeModelListener l) {\n        if (l != null) {\n            treeModelListeners.add(l);\n        }\n    }\n", "public String printDSSP() {\n\n\t\tStringBuffer buf = new StringBuffer();\n\t\tString nl = System.getProperty(\"line.separator\");\n\n\t\t//Header Line\n\t\tbuf.append(\"==== Secondary Structure Definition by BioJava\"\n\t\t\t\t+ \" DSSP implementation, Version October 2015 ====\"+nl);\n\n\t\t//First line with column definition\n\t\tbuf.append(\"  #  RESIDUE AA STRUCTURE BP1 BP2  ACC     \"\n\t\t\t\t+ \"N-H-->O    O-->H-N    N-H-->O    O-->H-N    \"\n\t\t\t\t+ \"TCO  KAPPA ALPHA  PHI    PSI    \"\n\t\t\t\t+ \"X-CA   Y-CA   Z-CA \");\n\n\t\tfor (int i =0 ; i < groups.length ;i++){\n\t\t\tbuf.append(nl);\n\t\t\tSecStrucState ss = getSecStrucState(i);\n\t\t\tbuf.append(ss.printDSSPline(i));\n\t\t}\n\n\t\treturn buf.toString();\n\t}", "void onExpired ( SharedDataIteratorSource < T > sender ) ;", "@Override\n    public boolean isDateAllowed(LocalDate date) {\n        if ((firstAllowedDate != null) && (date.isBefore(firstAllowedDate))) {\n            return false;\n        }\n        if ((lastAllowedDate != null) && (date.isAfter(lastAllowedDate))) {\n            return false;\n        }\n        return true;\n    }", "\tprotected void getAddCommand(List children, Object positionBeforeChild, CommandBuilder cbldr) {\n\t\tEStructuralFeature containmentSF = getContainmentSF(children, positionBeforeChild, ADD_REQ);\n\t\tif (containmentSF == null)\n\t\t\tcbldr.markDead();\t\t\n\t\tcbldr.append(getAddCommand(children, positionBeforeChild, containmentSF));\n\t}\n", "public void mark(int readLimit){\n  markOffset=offset;\n  bufferedInput.mark(readLimit);\n}\n", "public IndexDescriptorDef getIndexDescriptor(String name)\n    {\n        IndexDescriptorDef indexDef = null;\n\n        for (Iterator it = _indexDescriptors.iterator(); it.hasNext(); )\n        {\n            indexDef = (IndexDescriptorDef)it.next();\n  ", "@Override public boolean connectionAllowed(String eventName){\n  return eventName.equals(\"dataSet\") || eventName.equals(\"trainingSet\") || eventName.equals(\"testSet\");\n}\n", "public LongMap(LongMap<? extends V> map){\n  this(map.capacity,map.loadFactor);\n  stashSize=map.stashSize;\n  System.arraycopy(map.keyTable,0,keyTable,0,map.keyTable.length);\n  System.arraycopy(map.valueTable,0,valueTable,0,map.valueTable.length);\n  size=map.size;\n  zeroValue=map.zeroValue;\n  hasZeroValue=map.hasZeroValue;\n}\n", "public void setHandlerConfig(Map config)\n   {\n      configMap.clear();\n      if (config != null)\n         configMap.putAll(config);\n   }", "public static void configCheck ( Config config ) { StringBuilder sb = new StringBuilder ( ) ; for ( String shardId : config . getShardIds ( ) ) { if ( ! config . getAttributesForShard ( shardId ) . containsKey ( STR_ ) ) { sb . append ( STR_ ) . append ( ", "public void downloadVideo(final View view,final int position){\n  downloadVideo(view,position,false);\n}\n", "public static InetSocketAddress createSocketAddr(String target, int defaultPort) {\n\t\tint colonIndex = target.indexOf(':');\n\t\tif (colonIndex < 0 && defaultPort == -1) {\n\t\t\tthrow new RuntimeException(\"Not a host:port pair: \" + target);\n\t\t}\n\t\tString hostname = \"\";\n\t\tint port = -1;\n\t\tif (!target.contains(\"/\")) {\n\t\t\tif (colonIndex == -1) {\n\t\t\t\thostname = target;\n\t\t\t} else {\n\t\t\t\t// must be the old style <host>:<port>\n\t\t\t\thostname = target.substring(0, colonIndex);\n\t\t\t\tport = Integer.parseInt(target.substring(colonIndex + 1));\n\t\t\t}\n\t\t} else {\n\t\t\t// a new uri\n\t\t\ttry {\n\t\t\t\tURI addr = new URI(target);\n\t\t\t\thostname = addr.getHost();\n\t\t\t\tport = addr.getPort();\n\t\t\t} catch (URISyntaxException use) {\n\t\t\t\tLOG.fatal(use);\n\t\t\t}\n\t\t}\n\n\t\tif (port == -1) {\n\t\t\tport = defaultPort;\n\t\t}\n\n\t\tif (getStaticResolution(hostname) != null) {\n\t\t\thostname = getStaticResolution(hostname);\n\t\t}\n\t\treturn new InetSocketAddress(hostname, port);\n\t}", "\tpublic Integer absoluteIndexOf(T item) {\n\t\treturn itemToIndex.get(item);\n\t}\n", "private void checkClassAndSync ( Class < ? extends IPacket > clazz ) { if ( ! registeredClasses . contains ( clazz ) ) { throw new RuntimeException ( STR_ + clazz + STR_ ) ; } while ( isCurrentlySendingSemaphor ) { Thread . yield ( ) ; } isCurrentlySendin", "    public void onPaint( Graphics g ) {\n\tg.setColor(0, 0, 0);\n\tg.drawText(\"WORF Diagnostics Utility\", 0, 0);\n\tg.drawText(\"Copyright (C) 2001-2002, James Caple\", 0, 10);\n\tg.drawText(\"http://worf.sourceforge.net\", 0, 20);\n\n\tg.drawRect(0, 45, 75, 105);\n\tg.drawRect(76, 45, 75, 105);\n    }\n", "    public int indexOfGeometry(Geometry geometry) {\n\n\tif (isLiveOrCompiled())\n\t    if (!this.getCapability(ALLOW_GEOMETRY_READ))\n\t\tthrow new CapabilityNotSetException(J3dI18N.getString(\"Shape3D3\"));\n\treturn ((Shape3DRetained)retained).indexOfGeometry(geom", "\tpublic void setPosition(int position) {\n\t\tif (position < 0) {\n\t\t\tthrow new IllegalArgumentException(\"position index must be >= 0\");\n\t\t}\n\t\tthis.position = position;\n\t}\n", "\tpublic File getFileToLoad(String title) {\n\t\tFileDialog fd = new FileDialog(mainFrame, title, FileDialog.LOAD);\n\t\tfd.setVisible(true);\t// go!\n\n\t\tFile f = null;\n\t\tif(fd.getFile() != null) {\n\t\t\tString fileName = fd.getFile();\n\t\t\tif(fd.getDirectory() != null) {\n\t\t\t\tfileName = fd.getDirectory() + fileName;\n\t\t\t}\n\t\t\tf = new File(fileName);\n\t\t}\n\t\n\t\treturn f;\n\t}\n", "private void copyAppConfigFiles(File appBuildDir,File appConfigDir) throws IOException {\n  File[] files=appConfigDir.listFiles();\n  if (files != null) {\n    appBuildDir.mkdirs();\n    for (    File file : files) {\n      File outFile=new File(appBuildDir,file.getName());\n      if (file.isDirectory()) {\n        copyAppConfigFiles(outFile,file);\n      }\n else {\n        Files.copy(file,outFile);\n      }\n    }\n  }\n}\n", "public void addTagToVmAsync(final String vmId,Tag tag,final FutureCallback<Task> responseCallback) throws IOException {\n  String path=String.format(\"%s/%s/tags\",getBasePath(),vmId);\n  createObjectAsync(path,serializeObjectAsJson(tag),responseCallback);\n}\n", "  public String get_current_save_filename() {\n    return( editorFrame.get_current_save_filename() );\n  }\n", "    public Resolution submit() {\n        final User user = this.getUser();\n\n        this.desiredDateService.saveDesiredDate(this.desiredDate, user);\n\n        this.log.debug(\"desiredDate: \" + this.desiredDate);\n\n        return (new RedirectResolution(ListActionBean.class));\n    }\n", "public void setDocumentSize(int v) {\n    if (SourceDocumentInformation_Type.featOkTst && ((SourceDocumentInformation_Type)jcasType).casFeat_documentSize == null)\n      jcasType.jcas.throwFeatMissing(\"documentSize\", \"org.apache.uima.examples.SourceDocument", "public void log ( Level level , Object msg ) { synchronized ( listeners ) { for ( LogListener listener : listeners ) { listener . onLog ( this , level , msg ) ; } } String format = ( ENABLE_GUI && ! isConsolePresent ( ) ) ? MSGFORMAT : FORMAT ; format = f", "\tpublic COSDictionary cosGetURI() {\n\t\tCOSCatalog catalog = getCatalog();\n\t\tif (catalog == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn catalog.cosGetField(COSCatalog.DK_URI).asDictionary();\n\t}\n", "public void muteButtonPressed(ActionEvent e){\n  JToggleButton b=(JToggleButton)e.getSource();\n  log.debug(\"Mute button pressed. value = \" + b.isSelected());\n  firePropertyChange(PropertyChangeID.MUTE,!b.isSelected(),b.isSelected());\n}\n", "public Alert getAlert(BigInteger alertId) throws IOException, TokenExpiredException {\n        String requestUrl = RESOURCE + \"/\" + alertId.toString();\n        ArgusResponse response = getClient().executeHttpRequest(ArgusHttpClient.RequestType.GET, requestUrl, null);\n\n        assertValidResponse(response, requestUrl);\n        return fromJson(response.getResult(), Alert.class);\n    }", "    public void setOutputCoefficient(int index, double dblVal) throws IndexOutOfBoundsException {\n        this.checkIndex(index);\n        this.arrCoefOut[index] = dblVal;\n    }\n", "public void loadData(boolean readNumbersAsStrings){\n  BufferedReader streamReader=null;\n  Vector<Vector<Object>> records=new Vector<Vector<Object>>();\n  try {\n    Object token=null;\n    boolean header_read=false;\n    if (!headersExist) {\n      header_read=true;\n      headerRecord=new Vector<Object>();\n    }\n    URL csvURL=infoUrl;\n    streamReader=new BufferedReader(new InputStreamReader(csvURL.openStream()));\n    CSVTokenizer csvt=new CSVTokenizer(streamReader,readNumbersAsStrings);\n    int count=0;\n    token=csvt.token();\n    while (!csvt.isEOF(token)) {\n      count++;\n      Vector<Object> rec_line=new Vector<Object>();\n      while (!csvt.isNewline(token)) {\n        rec_line.addElement(token);\n        token=csvt.token();\n        if (csvt.isEOF(token))         break;\n      }\n      if (header_read) {\n        records.addElement(rec_line);\n      }\n else       if (headersExist) {\n        headerRecord=rec_line;\n        header_read=true;\n      }\n      if (Debug.debugging(\"csv\")) {\n        Debug.output(\"CSVFile.read: \" + rec_line);\n      }\n      token=csvt.token();\n    }\n    csvt.close();\n  }\n catch (  java.io.IOException ioe) {\n    throw new com.bbn.openmap.util.HandleError(ioe);\n  }\ncatch (  ArrayIndexOutOfBoundsException aioobe) {\n    throw new com.bbn.openmap.util.HandleError(aioobe);\n  }\ncatch (  ClassCastException cce) {\n    throw new com.bbn.openmap.util.HandleError(cce);\n  }\ncatch (  NullPointerException npe) {\n    Debug.error(\"CSVFile can't open: \" + infoUrl + \", check URL notation.\");\n  }\n  infoRecords=records;\n  if (Debug.debugging(\"csv\")) {\n    Debug.output(\"CSVFile: read in \" + infoRecords.size() + \" records\");\n  }\n}\n", "public Boolean updateStoragePortOperationalStatus(){\n  _logger.info(\"Updating operationalStatus for the StoragePort initiated\");\n  boolean updateStatus=false;\n  StoragePort storagePort=getStoargePortFromDBBasedOnPortName();\n  OperationalStatus operationalStatus=StoragePortProcessor.getPortOperationalStatus(getOperationalStatusCodesArray());\n  newOperationalStatus=operationalStatus.name();\n  storagePort.setOperationalStatus(newOperationalStatus);\n  _dbClient.persistObject(storagePort);\n  updateStatus=true;\n  _logger.info(\"Updating operationalStatus for the StoragePort completed status:{}\",updateStatus);\n  return updateStatus;\n}\n", "public static int convertAlphaFloatToInt ( float alphaFloat ) { if ( alphaFloat > NUM_ ) return Constant . DEFAULT_ALPHA ; if ( alphaFloat < NUM_ ) return NUM_ ; return ( int ) ( alphaFloat * Constant . DEFAULT_ALPHA ) ; }", "    public void write(int b) throws IOException {\n        out.write(b);\n        incCount(1);\n    }\n", "protected void onItemClick(ItemClickEvent event) {\n\n        if (!event.isCtrlKey() && !event.isShiftKey()) {\n\n            Set<String> nameSet = new LinkedHashSet<String>();\n\n            CmsModuleRow moduleRow = (CmsModuleRow)(event.getItemId());\n            select(moduleRow);\n            nameSet.add(moduleRow.getModule().getName());\n            if (event.getButton().equals(MouseButton.RIGHT) || (event.getPropertyId() == null)) {\n                select(moduleRow);\n                m_menu.setEntries(m_app.getMenuEntries(), nameSet);\n                m_menu.openForTable(event, this);\n            } else if (event.getButton().equals(MouseButton.LEFT) && \"name\".equals(event.getPropertyId())) {\n\n                m_app.openModuleInfo(nameSet);\n            }\n\n        }\n    }", "public BreakpointConditionSetReply ( final int packetId , final int errorCode ) { super ( packetId , errorCode ) ; }", "public int[][] getAoMatrix(EnumFacing offset)\n\t{\n\t\tint[][] a = new int[3][3];\n\n\t\tif (offset == EnumFacing.WEST || offset == EnumFacing.EAST)\n\t\t{\n\t\t\ta[0][0] = a[1][0] = a[2][0] = offset.getFrontOffsetX();\n\t\t\ta[1][1] += Math.round(y * 2 - 1); // -1 if 0, 1 if 1;\n\t\t\ta[2][1] += Math.round(y * 2 - 1); // -1 if 0, 1 if 1;\n\t\t\ta[0][2] += Math.round(z * 2 - 1); // -1 if 0, 1 if 1;\n\t\t\ta[1][2] += Math.round(z * 2 - 1); // -1 if 0, 1 if 1;\n\t\t}\n\t\telse if (offset == EnumFacing.UP || offset == EnumFacing.DOWN)\n\t\t{\n\t\t\ta[0][1] = a[1][1] = a[2][1] = offset.getFrontOffsetY();\n\t\t\ta[1][0] += Math.round(x * 2 - 1); // -1 if 0, 1 if 1;\n\t\t\ta[2][0] += Math.round(x * 2 - 1); // -1 if 0, 1 if 1;\n\t\t\ta[0][2] += Math.round(z * 2 - 1); // -1 if 0, 1 if 1;\n\t\t\ta[1][2] += Math.round(z * 2 - 1); // -1 if 0, 1 if 1;\n\t\t}\n\t\telse if (offset == EnumFacing.NORTH || offset == EnumFacing.SOUTH)\n\t\t{\n\t\t\ta[0][2] = a[1][2] = a[2][2] = offset.getFrontOffsetZ();\n\t\t\ta[1][0] += Math.round(x * 2 - 1); // -1 if 0, 1 if 1;\n\t\t\ta[2][0] += Math.round(x * 2 - 1); // -1 if 0, 1 if 1;\n\t\t\ta[0][1] += Math.round(y * 2 - 1); // -1 if 0, 1 if 1;\n\t\t\ta[1][1] += Math.round(y * 2 - 1); // -1 if 0, 1 if 1;\n\t\t}\n\n\t\treturn a;\n\t}", "    public boolean isEnabled() {\n        throw new RuntimeException(\"Not Implemented\");\n    }\n", "void replaceUses(Instruction s,HeapOperand<Object>[] H){\n  if (VM.VerifyAssertions)   VM._assert(s.operator() != PHI);\n  uses.put(s,H);\n  for (  HeapOperand<Object> aH : H) {\n    aH.setInstruction(s);\n  }\n}\n", "public <T>T cast(Object obj,Class<T> clz){\n  if (!clz.isAssignableFrom(obj.getClass())) {\n    return null;\n  }\n  return clz.cast(obj);\n}\n", "private int checkToAddLandmark(final InternalLandmarkData fromNode){\n  if (activeLandmarkIndexes.length == preprocess.getLandmarks().length) {\n    return -1;\n  }\n  double bestTravCostEst=estimateRemainingTravelCost(fromNode);\n  int bestIndex=-1;\n  for (int i=0; i < preprocess.getLandmarks().length; i++) {\n    final double tmpTravTime=estimateRemainingTravelCost(fromNode,i);\n    if (tmpTravTime > bestTravCostEst) {\n      bestIndex=i;\n      bestTravCostEst=tmpTravTime;\n    }\n  }\n  if (bestIndex != -1) {\n    final int[] newActiveLandmarks=new int[this.activeLandmarkIndexes.length + 1];\n    System.arraycopy(this.activeLandmarkIndexes,0,newActiveLandmarks,0,this.activeLandmarkIndexes.length);\n    newActiveLandmarks[this.activeLandmarkIndexes.length]=bestIndex;\n    this.activeLandmarkIndexes=newActiveLandmarks;\n  }\n  return bestIndex;\n}\n", "  public void run() {\n    System.out.println(\"Starting server on port \" + port + \"...\");\n    server.start();\n    System.out.println(\"Server started\");\n  }\n", "\tprotected String getNetbeansString(int portID) {\n\t\t\n\t\tint port = VimPlugin.getDefault().getPreferenceStore().getInt(\n\t\t\t\tPreferenceConstants.P_PORT)+portID;\n\t\tString host = VimPlugin.getDefault().getPreferenceStore().getString(\n\t\t\t\tPreferenceConstants.P_HOST);\n\t\tString pass = VimPlugin.getDefault().getPreferenceStore().getString(\n\t\t\t\tPreferenceConstants.P_PASS);\n\n\t\treturn \"-nb:\" + host + \":\" + port + \":\" + pass;\n\t}\n", "public static synchronized DataUsageExtension instance() {\r\n                if (SINGLETON == null) {\r\n                        SINGLETON = new DataUsageExtension();\r\n                        XFactory factory = XFactoryRegistry.instance().currentDefault();\r\n                        ATTR_DATA = factory.createAttributeLiteral(KEY_DATA, \"\", SINGLETON);\r\n                        SINGLETON.eventAttributes.add((XAttribute) ATTR_DATA.clone());\r\n                        // register mapping aliases\r\n                        for (Map.Entry<String, String> mapping : EXTENSION_DESCRIPTIONS.entrySet()) {\r\n                                XGlobalAttributeNameMap.instance().registerMapping(mapping.getKey(), KEY_DATA, mapping.getValue());\r\n                        }\r\n                }\r\n                return SINGLETON;\r\n        }", "    public void removePropertyChangeListener(String propertyName, PropertyChangeListener listener)\n    {   this.support.removePropertyChangeListener(propertyName, listener); }\n", "    public void writeToBlock(Block b, int offset) {\n      for (int i = 0; i < NR_INDEXES; ++i) {\n        tripleAVLFilePhases[i].writeToBlock(b, offset);\n        offset += TripleAVLFile.Phase.RECORD_SIZE;\n      }\n    }\n", "void reset ( ) { resetFocusedTask ( ) ; int childCount = getChildCount ( ) ; for ( int i = childCount - NUM_ ; i >= NUM_ ; i -- ) { DeckChildView < T > tv = ( DeckChildView ) getChildAt ( i ) ; mViewPool . returnViewToPool ( tv ) ; } if ( mViewPool != nul", "public boolean acceptFilenameIdentical(String fileName){\n  return acceptIdentical(null,fileName);\n}\n", "public HttpSession getSelectedSession() {\r\n\t\tfinal int selectedRow = this.sessionsTable.getSelectedRow();\r\n\t\tif (selectedRow == -1) {\r\n\t\t\t// No row selected\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tfinal int rowIndex = sessionsTable.convertRowIndexToModel(selectedRow);\r\n\t\treturn this.sessionsModel.getHttpSessionAt(rowIndex);\r\n\t}", "public static Document createSvgDocument(int width,int height){\n  Document document=createDocument();\n  Element root=document.createElement(\"svg\");\n  String w=String.valueOf(width);\n  String h=String.valueOf(height);\n  root.setAttribute(\"width\",w);\n  root.setAttribute(\"height\",h);\n  root.setAttribute(\"viewBox\",\"0 0 \" + w + \" \"+ h);\n  root.setAttribute(\"version\",\"1.1\");\n  root.setAttribute(\"xmlns\",mxConstants.NS_SVG);\n  document.appendChild(root);\n  return document;\n}\n", "\tprotected void doBuildNext() {\n\t\tList<GameBuildingPrototype> list = getBuildingList();\n\t\tGameBuildingPrototype bp = gameWorld.player.selectedBuildingPrototype;\n\t\tint idx = Math.min(list.size(), list.indexOf(bp) + 1);\n\t\tif (idx < list.size()) {\n\t\t\tgameWorld.player.selectedBuildingPrototype = list.get(idx);\n\t\t\tif (gameWorld.player.selectedBuildingPrototype.researchTech != null) {\n\t\t\t\tgameWorld.player.selectedTech = gameWorld.player.selectedBuildingPrototype.researchTech;\n\t\t\t}\n\t\t}\n\t\trepaint(buildPanelRect);\n\t\tbuildScroller.setActionCommand(\"SCROLL-DOWN\");\n\t\tif (!buildScroller.isRunning()) {\n\t\t\tbuildScroller.start();\n\t\t}\n\t\tcancelBuildMode();\n\t}\n", "public Future < Long > card ( JobState state ) { Future < Long > future = Future . future ( ) ; jobService . card ( state , future . completer ( ) ) ; return future ; }", "public IdQuery ( Class < T > type , Object id , Object routing , int version ) { this ( type . getName ( ) , id , routing , QueryResultType . DEFAULT , version ) ; }", "public AddAction append(ByteBuffer... values) {\n        return new AddAction(this, new LiteralOperand(\n                new LinkedHashSet<ByteBuffer>(Arrays.asList(values))));\n    }", "    public void setStatus(int status){\n    \tImage img;\n    \tTheme t = Theme.getInstance();\n    \tString res, stat;\n    \t\n    \tthis.Status = status;\n    \tswitch (status){\n    \tcase OFFLINE:\n    \t\tres = \"statusOffline\";\n    \t\tstat = \"Offline\";\n    \t\tbreak;\n    \tcase ONLINE:\n    \tdefault:\n    \t\tres = \"statusOnline\";\n    \t\tstat = \"Online\";\n    \t\tbreak;\n    \t}\n    \timg = t.iconByName(res, myDisplay);\n    \timg.setBackground(lblStatusImage.getBackground());\n    \tthis.lblStatusImage.setImage(img);\n    \tthis.lblStatusFName.setText(FriendlyName + \" (\" + stat + \")\"); \n    }\n", "public boolean equals ( Object obj ) { if ( ! ( obj instanceof UseCandidateAttribute ) ) return BOOL_ ; if ( obj == this ) return BOOL_ ; UseCandidateAttribute useCandidateAtt = ( UseCandidateAttribute ) obj ; if ( useCandidateAtt . getAttributeType ( ) !", "private void defineSeparators ( UIDefaults d ) { String c = PAINTER_PREFIX + STR_ ; d . put ( STR_ , new InsetsUIResource ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ; d . put ( STR_ , new LazyPainter ( c , SeparatorPainter . Which . BACKGROUND_ENABLED ) ) ; }", "public Detector2 [ ] instantiateDetector2sInPass ( BugReporter bugReporter ) { Detector2 [ ] detectorList = new Detector2 [ orderedFactoryList . size ( ) ] ; int count = NUM_ ; for ( Iterator < DetectorFactory > j = iterator ( ) ; j . hasNext ( ) ; ) { de", "static void checkUnsignedShort ( final int value , final String msg ) { if ( value < NUM_ || value > NUM_ ) { throw new IllegalArgumentException ( msg + STR_ + value ) ; } }", "\tpublic boolean logout() throws LoginException {\n\n\t\tsubject.getPrincipals().remove(userPrincipal);\n\t\tsucceeded = false;\n\t\tsucceeded = commitSucceeded;\n\t\tusername = null;\n\t\tif (password != null) {\n\t\t\tfor (int i = 0; i < password.length; i++)\n\t\t\t\tpassword[i] = ' ';\n\t\t\tpassword = null;\n\t\t}\n\t\tuserPrincipal = null;\n\t\treturn true;\n\t}\n", "\tpublic void printOut(final String s) {\n\t\ttry {\n\t\t\tint length = jOutputDoc.getLength();\n\t\t\tif (length > maxDocSize) {\n\t\t\t\tjOutputDoc.remove(0, length - maxDocSize);\n\t\t\t\tlength = jOutputDoc.getLength();\n\t\t\t}\n\t\t\tjOutputDoc.insertString(length, s, outputAtr);\n\t\t\tjOutputPane.setCaretPosition(jOutputDoc.getLength());\n\t\t} catch (final BadLocationException ble) {\n\t\t\tSystem.out.println(\"Couldn't write to Output Pane\");\n\t\t}\n\t}\n", "    public double getHeight() {\n        if ( isEmpty() ) {\n            return 0.0;\n        }\n        return calculateSubtreeHeight( getRoot() );\n    }\n", "   private void init(UdpSocket udp_socket, UdpPacket udp_packet)\n   {  this.udp_socket=udp_socket;\n      if (udp_packet==null)\n      {  byte[] buff={(byte)'\\r',(byte)'\\n'};\n         udp_packet=new UdpPacket(buff,0,buff.length);\n      }\n      if (target!=null)\n      {  udp_packet.setIpAddress(target.getAddress());\n         udp_packet.setPort(target.getPort());\n      }\n      this.udp_packet=udp_packet;\n   }\n", "protected boolean propagateIntervals(int start,long L,long R,int target){\n  if (!dfsScanSubgraph(start,target))   return false;\n  int rep_start=rep_cg[start];\n  int rep_target=rep_cg[target];\n  ContextsCollector targetContexts=contextsForMethods[target];\n  if (rep_start == rep_target) {\n    transferInSCC(start,target,L,R,targetContexts);\n  }\n else {\n    transferInSCC(start,rep_start,L,R,contextsForMethods[rep_start]);\n    topQ.clear();\n    topQ.add(rep_start);\n    while (!topQ.isEmpty()) {\n      int s=topQ.poll();\n      ContextsCollector sContexts=contextsForMethods[s];\n      CgEdge p=call_graph[s];\n      while (p != null) {\n        int t=p.t;\n        int rep_t=rep_cg[t];\n        if (in_degree[rep_t] != 0) {\n          ContextsCollector reptContexts=contextsForMethods[rep_t];\n          long block_size=max_context_size_block[s];\n          for (          SimpleInterval si : sContexts.bars) {\n            long in_block_offset=(si.L - 1) % block_size;\n            long newL=p.map_offset + in_block_offset;\n            long newR=si.R - si.L + newL;\n            if (rep_t == rep_target) {\n              transferInSCC(t,target,newL,newR,targetContexts);\n            }\n else {\n              transferInSCC(t,rep_t,newL,newR,reptContexts);\n            }\n          }\n          if (--in_degree[rep_t] == 0 && rep_t != rep_target) {\n            topQ.add(rep_t);\n          }\n        }\n        p=p.next;\n      }\n      sContexts.clear();\n    }\n  }\n  return true;\n}\n", "public CNameDescriptionFilterExpression ( final String text , final IViewContainer module ) { m_text = Preconditions . checkNotNull ( text , STR_ ) ; m_module = module ; }", "void addStatus ( IEspDevice device , IEspDeviceStatus status , Runnable disconnectedCallback ) ;", "public boolean loading(){\n  return loading.get();\n}\n", "@Override\n    public void visit(NodeVisitor v) {\n        if (v.visit(this)) {\n            condition.visit(v);\n            thenPart.visit(v);\n            if (elsePart != null) {\n                elsePart.visit(v);\n            }\n        }\n    }", "public Response join(String groupId, boolean acceptRules) throws JinxException {\n    JinxUtils.validateParams(groupId);\n    Map<String, String> params = new TreeMap<>();\n    params.put(\"method\", \"flickr.groups.join\");\n    params.put(\"group_id\", groupId);\n    if (acceptRules) {\n      params.put(\"accept_rules\", \"true\");\n    }\n    return jinx.flickrPost(params, Response.class);\n  }", "private String readPropName(ByteBuffer buffer){\n  int nameLength=buffer.getShort();\n  byte[] nameBytes=ByteUtil.getBytes(buffer,nameLength);\n  return ColumnImpl.decodeUncompressedText(nameBytes,_database.getCharset());\n}\n", "private void addSMISProviderIntoActiveProviderCache(String smisProviderURI){\n  if (StringUtils.isNotEmpty(smisProviderURI)) {\n    ACTIVE_SMIS_PROVIDERS_CACHE.add(smisProviderURI);\n  }\n}\n", "    public void expand(TNNode node) {\n        switch (layout) {\n\t        case TREE_LAYOUT:\n\t            treeDiagramm.expand(node);\n\t            break;\n\t        case SEQ_LAYOUT:\n\t            break;\n\t        default:\n\t            treeDiagramm.expand(node);\n\t            break;\n        }\n    }\n", "public static void deleteDirectory ( final File directory ) { final File [ ] filesInTestDir = directory . listFiles ( ) ; if ( filesInTestDir != null ) { for ( final File eachFile : filesInTestDir ) { eachFile . delete ( ) ; } } directory . delete ( ) ; }", "  public void error() {\n    Dazio.dm.pwd = \"\";\n    Dazio.dv.showFormAlert(this);\n  }\n", "public String getMessage(String key, Object arg)\n        throws MissingResourceException {\n        return getMessage(key, new Object[] {arg});\n    }", "\tpublic void run(IAction action) {\n\t\tUpdateManagerDialog d = new UpdateManagerDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());\n\t\td.open();\n\t}\n", "    public Object copy_from(Object src) {\n        \n\n        NamedFloatRangeValueSequence32 typedSrc = (NamedFloatRangeValueSequence32) src;\n        NamedFloatRangeValueSequence32 typedDst = this;\n\n        typedDst.userData.copy_from(typedSrc.userData);\n            \n        return this;\n    }\n", "public ProcessImageImplementation createProcessImageImplementation ( ) { return new SimpleProcessImage ( ) ; }", "public OvhTask service_account_email_fullAccess_POST(String service, String email, Long allowedAccountId) throws IOException {\n\t\tString qPath = \"/email/pro/{service}/account/{email}/fullAccess\";\n\t\tStringBuilder sb = path(qPath, service, email);\n\t\tHashMap<", "public void sendInBackground(final SendCallback callback) {\n    sendInBackground().subscribe(new Observer<JSONObject>() {\n      @Override\n      public void onSubscribe(Disposable disposable) {\n\n      }\n\n      @Override\n      public void onNext(JSONObject jsonObject) {\n        notification = new AVObject(\"_Notification\");\n        notification.resetServerData(jsonObject.getInnerMap());\n        if (null != callback) {\n          callback.internalDone(null);\n        }\n      }\n\n      @Override\n      public void onError(Throwable throwable) {\n        if (null != callback) {\n          callback.internalDone(new AVException(throwable));\n        }\n      }\n\n      @Override\n      public void onComplete() {\n\n      }\n    });\n  }", "public void setCustomKeyStores(java.util.Collection<CustomKeyStoresListEntry> customKeyStores) {\n        if (customKeyStores == null) {\n            this.customKeyStores = null;\n            return;\n        }\n\n        this.customKeyStores = new com.amazonaws.internal.SdkInternalList<CustomKeyStoresListEntry>(customKeyStores);\n    }", "public void applyFromResolveInfo(PackageManager pm,ResolveInfo info,WidgetPreviewLoader loader){\n  mInfo=info;\n  CharSequence label=info.loadLabel(pm);\n  mWidgetName.setText(label);\n  mWidgetDims.setText(String.format(mDimensionsFormatString,1,1));\n  mWidgetPreviewLoader=loader;\n}\n", "public List<Column> columns(String... columnNames){\n  List<Column> columns=new ArrayList<>();\n  for (  String columnName : columnNames) {\n    columns.add(column(columnName));\n  }\n  return columns;\n}\n", "\tpublic void resetHistory() {\n\t\tfor (String key : ((Map<String, String>) interactionHistory).keySet()) {\n\t\t\tinteractionHistory.put(key, \"\");\n\t\t}\n\t}\n", "public void initDctNxM(int cols,int rows) throws IllegalArgumentException {\n  if (cols <= 0 || rows <= 0) {\n    throw new IllegalArgumentException(\"Dimensions out of range\");\n  }\n  int i=0;\n  int j=0;\n  double cx=Math.sqrt(2.0 / cols);\n  double cy=Math.sqrt(2.0 / rows);\n  if (this.nxmCosTableX != null && this.N != cols) {\n    this.nxmCosTableX=null;\n  }\n  if (this.nxmCosTableY != null && this.M != rows) {\n    this.nxmCosTableY=null;\n  }\n  if (this.nxmCosTableX == null) {\n    this.nxmCosTableX=new double[cols][cols];\n  }\n  if (this.nxmCosTableY == null) {\n    this.nxmCosTableY=new double[rows][rows];\n  }\n  this.N=cols;\n  this.M=rows;\n  for (i=0; i < cols; i++) {\n    for (j=0; j < cols; j++) {\n      this.nxmCosTableX[i][j]=cx * Math.cos((Math.PI * ((2 * i + 1) * j)) / (2 * this.N));\n    }\n  }\n  for (i=0; i < rows; i++) {\n    for (j=0; j < rows; j++) {\n      this.nxmCosTableY[i][j]=cy * Math.cos((Math.PI * ((2 * i + 1) * j)) / (2 * this.M));\n    }\n  }\n}\n", "\t\t\tpublic Type getIdentifierType(String persistentClass) throws MappingException {\n\t\t\t\tPersistentClass pc = cfg.getClassMapping( persistentClass );\n\t\t\t\tif (pc==null) throw new MappingException(\"persistent class not known: \" + persistentClass);\n\t\t\t\treturn pc.getIdentifier().getType();\n\t\t\t}\n", "public MessageFormatter removeMessageFormatter(String domain){\n  return (MessageFormatter)fMessageFormatters.remove(domain);\n}\n", "private Object writeReplace ( ) throws ObjectStreamException { Object impl_proxy = impl ; if ( impl instanceof ProxyAccessor ) { impl_proxy = ( ( ProxyAccessor ) impl ) . getProxy ( ) ; logger . log ( Level . FINEST , STR_ , impl_proxy ) ; if ( impl_proxy", "public boolean hasAlphaChangedFrom ( float v ) { return ( Float . compare ( alpha , v ) != NUM_ ) ; }", "private boolean hasCustomReadObject(Method m, ClassContext classContext,List<String> classesToIgnore)\n            throws CFGBuilderException, DataflowAnalysisException {\n        ConstantPoolGen cpg = classContext.getConstantPoolGen();\n        CFG cfg = classContext.getCFG(m);\n        int count = 0;\n        for (Iterator<Location> i = cfg.locationIterator(); i.hasNext(); ) {\n            Location location = i.next();\n            Instruction inst = location.getHandle().getInstruction();\n            //ByteCode.printOpCode(inst,cpg);\n            if(inst instanceof InvokeInstruction) {\n                InvokeInstruction invoke = (InvokeInstruction) inst;\n                if (!READ_DESERIALIZATION_METHODS.contains(invoke.getMethodName(cpg))\n                        && !classesToIgnore.contains(invoke.getClassName(cpg))) {\n                    count +=1;\n                }\n            }\n        }\n        return count > 3;\n    }", "public void addGenerator(Distribution gen) {\n    if(trans != null) {\n      throw new AbortException(\"Generators may no longer be added when transformations have been applied.\");\n    }\n    axes.add(gen);\n    dim++;\n  }", "public Builder startFromBeginning ( ) { return startFrom ( StreamPosition . START ) ; }", "    public StepExecutionResult execute(StepExecutionResult state) throws CdlResolutionException {\n        PropertyList node = state.getNode();\n        NamespaceLookup namespaces=state.getNamespaces();\n        String uri=\"\";\n        if(prefix!=null) {\n            uri = namespaces.resolveNamespaceURI(prefix);\n            if(uri==null) {\n                throw new CdlResolutionException(\"Unknown prefix :\"+prefix,state);\n            }\n        }\n        PropertyList child = node.getChildTemplateMatching(uri, localname);\n        if(child==null) {\n            throw new CdlResolutionException(\"Child element not found  {\" + uri+\"}#\"+localname, state);\n        }\n        return state.next(child);\n    }\n", "public byte []\nreadByteArray(int len) throws WireParseException {\n\trequire(len);\n\tbyte [] out = new byte[len];\n\tSystem.arraycopy(array, pos, out, 0, len);\n\tpos += len;\n\treturn out;\n}", "public synchronized boolean trim() throws IOException {\n        boolean modified = false;\n\n        for (Entry<String,RangeSet> e : new Hashtable<>(usages).entrySet()) {// copy because we mutate\n            Job j = Jenkins.getInstance().getItemByFullName(e.getKey(),Job.class);\n            if(j==null) {// no such job any more. recycle the record\n                modified = true;\n                usages.remove(e.getKey());\n                continue;\n            }\n\n            Run firstBuild = j.getFirstBuild();\n            if(firstBuild==null) {// no builds. recycle the whole record\n                modified = true;\n                usages.remove(e.getKey());\n                continue;\n            }\n\n            RangeSet cur = e.getValue();\n\n            // builds that are around without the keepLog flag on are normally clustered together (in terms of build #)\n            // so our basic strategy is to discard everything up to the first ephemeral build, except those builds\n            // that are marked as kept\n            RangeSet kept = new RangeSet();\n            Run r = firstBuild;\n            while (r!=null && r.isKeepLog()) {\n                kept.add(r.getNumber());\n                r = r.getNextBuild();\n            }\n\n            if (r==null) {\n                // all the build records are permanently kept ones, so we'll just have to keep 'kept' out of whatever currently in 'cur'\n                modified |= cur.retainAll(kept);\n            } else {\n                // otherwise we are ready to discard [0,r.number) except those marked as 'kept'\n                RangeSet discarding =  new RangeSet(new Range(-1,r.getNumber()));\n                discarding.removeAll(kept);\n                modified |= cur.removeAll(discarding);\n            }\n\n            if (cur.isEmpty()) {\n                usages.remove(e.getKey());\n                modified = true;\n            }\n        }\n\n        if (modified) {\n            if (logger.isLoggable(Level.FINE)) {\n                logger.log(Level.FINE, \"Saving trimmed {0}\", getFingerprintFile(md5sum));\n            }\n            save();\n        }\n\n        return modified;\n    }", "protected Expression expression() {\n        Expression left = relationalExpression();\n        if (tokenizer.current().isSymbol(\"&&\")) {\n            tokenizer.consume();\n            Expression right = expression();\n            return reOrder(left, right, BinaryOperation.Op.AND);\n        }\n        if (tokenizer.current().isSymbol(\"||\")) {\n            tokenizer.consume();\n            Expression right = expression();\n            return reOrder(left, right, BinaryOperation.Op.OR);\n        }\n        return left;\n    }", "@SuppressWarnings(\"unchecked\")\n    public static <T> T getRandomSelection(List<T> options) {\n        return (T) getRandomSelection(options.toArray(new Object[options.size()]));\n    }", "public void initialize(Map configParams){\n  String delimiterConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER);\n  if (delimiterConfig != null) {\n    this.delimiter=delimiterConfig;\n  }\n  String caseConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE);\n  if (caseConfig != null) {\n    if (caseConfig.equals(\"true\")) {\n      this.caseSensitive=true;\n    }\n else     if (caseConfig.equals(\"false\")) {\n      this.caseSensitive=false;\n    }\n else {\n      this.caseSensitive=false;\n    }\n  }\n  String wildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD);\n  if (wildcardConfig != null) {\n    this.wildcard=wildcardConfig;\n  }\n  return;\n}\n", "public static void lookupHostname(ErrorReporter errorReporter) {\n        String myHostName = getProperty(PROPERTY_LOGSTASH_GELF_HOSTNAME, \"unknown\");\n        String myFQDNHostName = getProperty(PROPERTY_LOGSTASH_GELF_FQDN_HOSTNAME, \"unknown\");\n        String myAddress = \"\";\n\n        if (!Boolean.parseBoolean(getProperty(PROPERTY_LOGSTASH_GELF_SKIP_HOSTNAME_RESOLUTION, \"false\"))) {\n\n            try {\n\n                String resolutionOrder = getProperty(PROPERTY_LOGSTASH_GELF_HOSTNAME_RESOLUTION_ORDER,\n                        RESOLUTION_ORDER_NETWORK_LOCALHOST_FALLBACK);\n\n                InetAddress inetAddress = null;\n                if (resolutionOrder.equals(RESOLUTION_ORDER_NETWORK_LOCALHOST_FALLBACK)) {\n                    inetAddress = getInetAddressWithHostname();\n                }\n\n                if (resolutionOrder.equals(RESOLUTION_ORDER_LOCALHOST_NETWORK_FALLBACK)) {\n                    if (isQualified(InetAddress.getLocalHost())) {\n                        inetAddress = InetAddress.getLocalHost();\n                    } else {\n                        inetAddress = getInetAddressWithHostname();\n                    }\n                }\n\n                if (inetAddress == null) {\n                    inetAddress = InetAddress.getLocalHost();\n                }\n\n                myHostName = getHostname(inetAddress, false);\n                myFQDNHostName = getHostname(inetAddress, true);\n                myAddress = inetAddress.getHostAddress();\n            } catch (IOException e) {\n                errorReporter.reportError(\"Cannot resolve hostname\", e);\n            }\n        }\n\n        FQDN_HOSTNAME = myFQDNHostName;\n        HOSTNAME = myHostName;\n        ADDRESS = myAddress;\n    }", "protected void updateAnnotations(Annotation existingAnnotation,Position newPos,Map additions,List modifications,List deletions){\n  if (existingAnnotation instanceof FoldingAnnotation) {\n    FoldingAnnotation foldingAnnotation=(FoldingAnnotation)existingAnnotation;\n    if (newPos != null && newPos.length > 0 && projectionAnnotationModel != null) {\n      Position oldPos=projectionAnnotationModel.getPosition(foldingAnnotation);\n      if (!newPos.equals(oldPos)) {\n        oldPos.setOffset(newPos.offset);\n        oldPos.setLength(newPos.length);\n        modifications.add(foldingAnnotation);\n      }\n    }\n else {\n      deletions.add(foldingAnnotation);\n    }\n  }\n}\n", "    public boolean hasResponseBody() {\n        return true;\n    }\n", "    public void run() {\n        if (output.getText().length() == 0) {\n            StringWriter wr = new StringWriter();\n\n            throwable.printStackTrace(new PrintWriter(wr, true));\n            output.setText(wr.toString());\n        }\n        output.getCaret().setDot(0);\n        output.requestFocus();\n    }\n", "public BlockingObservableAssert < T > valuesCountIs ( int count ) { isNotNull ( ) ; assertThat ( getBlockingObservableExecutor ( ) . getValuesEmitted ( ) . size ( ) ) . isEqualTo ( count ) ; return this ; }", "public static Date updated ( Date self , Map < Object , Integer > updates ) { Calendar cal = Calendar . getInstance ( ) ; cal . setTime ( self ) ; set ( cal , updates ) ; return cal . getTime ( ) ; }", "\tpublic void removeFileEventListener(FileEventListener l) {\n\t\tlisteners.remove(l);\n\t}\n", "public Observable<Page<ModuleInner>> listByAutomationAccountAsync(final String resourceGroupName, final String automationAccountName) {\n        return listByAutomationAccountWithServiceResponseAsync(resourceGroupName, automationAccountName)\n            .map(new Func1<ServiceResponse<Page<ModuleInner>>, Page<ModuleInner>>() {\n                @Override\n                public Page<ModuleInner> call(ServiceResponse<Page<ModuleInner>> response) {\n                    return response.body();\n                }\n            });\n    }", "void changedParentGroup ( INaviViewNode node , INaviGroupNode groupNode ) ;", "public static NumberExpression<Double> xmax(JTSGeometryExpression<?> expr) {\n        return Expressions.numberOperation(Double.class, SpatialOps.XMAX, expr);\n    }", "    public void sendOtherDelete(FilePair pair) throws IOException {\n\tDebug.println(Bug.THREE, \"Sending other delete \"+pair);\n\tfor(int i=0; i< otherDirs.length; i++)\n\t    if(otherDirs[i] != null ) {\n\t\tFilePair other = otherDirs[i].otherFile(pair);\n\t\tif( other != null ) otherDirs[i].sendDelete(other);\n\t    }\n    }\n", "  public String variable( String name ) {\n    return variables.get( name );\n  }\n", "public Observable<Page<VirtualNetworkPeeringInner>> listNextAsync(final String nextPageLink) {\n        return listNextWithServiceResponseAsync(nextPageLink)\n            .map(new Func1<ServiceResponse<Page<VirtualNetworkPeeringInner>>, Page<VirtualNetworkPeeringInner>>() {\n                @Override\n                public Page<VirtualNetworkPeeringInner> call(ServiceResponse<Page<VirtualNetworkPeeringInner>> response) {\n                    return response.body();\n                }\n            });\n    }", "\tpublic void disable() {\n\t\tuserList.setEnabled(false);\n\t\tkickButton.setEnabled(false);\n\t}\n", "private static float TotalIndentWithSpace ( Token [ ] [ ] spec , Position pos ) { int posOfFirstSpaceToLeft = NUM_ ; if ( pos . item > NUM_ ) { Token tokToLeft = spec [ pos . line ] [ pos . item - NUM_ ] ; posOfFirstSpaceToLeft = tokToLeft . column + tokToLeft . getWidth ( ) ; } float spaceToLeft = Parameters . LaTeXLeftSpace ( pos . toToken ( spec ) . column - posOfFirstSpaceToLeft - NUM_ ) ; return spaceToLeft + TotalIndent ( spec , pos ) ; }", "public boolean waitForAppliedEvent ( String event , long timeout ) throws Exception { long seqno = new Long ( event ) ; if ( pipeline == null ) throw new ReplicatorException ( STR_ + seqno + STR_ ) ; Future < ReplDBMSHeader > expectedEvent = pipeline . watchForCommittedSequenceNumber ( seqno , BOOL_ ) ; ReplDBMSHeader replEvent = null ; try { if ( timeout <= NUM_ ) replEvent = expectedEvent . get ( ) ; else replEvent = expectedEvent . get ( timeout , TimeUnit . SECONDS ) ; logger . info ( STR_ + seqno + STR_ + replEvent . getSeqno ( ) ) ; } catch ( TimeoutException e ) { return BOOL_ ; } finally { expectedEvent . cancel ( BOOL_ ) ; } return BOOL_ ; }", "Programmer selectByPrimaryKey ( Integer id ) ;", "    public void getDirectMessagesAsync(TwitterListener listener) {\n        getDispatcher().invokeLater(new AsyncTask(DIRECT_MESSAGES, listener,null) {\n            public void invoke(TwitterListener listener,Object[] args) throws TwitterException {\n                listener.gotDirectMessages(getDirectMessages());\n            }\n        });\n    }\n", "\tpublic void setSignalsImmediate( final List<String> signals ) {\n\t\tsynchronized( DATA_LOCK ) {\n\t\t\t_signals = signals;\n\t\t\tif ( _patternPoster != null ) {\n\t\t\t\tsetSignalFilter( new PatternListFilter<String>( _signals, _patternPoster ) );\n\t\t\t\t_filteredSignals = _signalFilter.getFilteredList();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_filteredSignals = signals;\n\t\t\t}\t\t\t\n\t\t}\n\t\t\n\t\tfireTableDataChanged();\n\t}\n", "public static double hz2bark(double freqInHz){\n  double f=freqInHz / 600;\n  return 6 * Math.log(f + Math.sqrt((f * f) + 1));\n}\n", "public void marshall(ImportWorkspaceImageRequest importWorkspaceImageRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (importWorkspaceImageRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(importWorkspaceImageRequest.getEc2ImageId(), EC2IMAGEID_BINDING);\n            protocolMarshaller.marshall(importWorkspaceImageRequest.getIngestionProcess(), INGESTIONPROCESS_BINDING);\n            protocolMarshaller.marshall(importWorkspaceImageRequest.getImageName(), IMAGENAME_BINDING);\n            protocolMarshaller.marshall(importWorkspaceImageRequest.getImageDescription(), IMAGEDESCRIPTION_BINDING);\n            protocolMarshaller.marshall(importWorkspaceImageRequest.getTags(), TAGS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public boolean removeAnimationListener(AnimationListener listener){\n  return mListeners.remove(listener);\n}\n", "public static int min ( int [ ] [ ] matrix , int column ) { int min = matrix [ NUM_ ] [ column ] ; for ( int i = NUM_ ; i < matrix . length ; i ++ ) { if ( matrix [ i ] [ column ] < min ) { min = matrix [ i ] [ column ] ; } } return min ; }", "< R , E extends Exception > R withInputStreamForPath ( Path path , Function < InputStream , R , E > function ) throws E , IOException ;", "\tpublic String getDatabaseType(String classname) {\n\t\tString x = (String) typeMapping.get(classname);\n\t\t\n\t\tif (x == null) {\n\t\t\t// this should never occur, but how to catch ?\n\t\t\treturn classname;\n\t\t}\n\n\t\treturn x;\n\t}\n", "public double[] getDoubles(int rowId, int count) {\n    double[] res = new double[count];\n    for (int i = 0; i < count; i++) {\n      res[i] = getDouble(rowId + i);\n    }\n    return res;\n  }", "boolean matches ( ViewNode node ) ;", "\tpublic void didAccessValueForKey(String key){\n\t\tthrow new RuntimeException(\"Stub\");\n\t}\n", "public static < V > int addDistinctList ( List < V > sourceList , List < V > entryList ) { if ( sourceList == null || isEmpty ( entryList ) ) { return NUM_ ; } int sourceCount = sourceList . size ( ) ; for ( V entry : entryList ) { if ( ! sourceList . con", "public BinaryResult base64 ( ) { base64 = BOOL_ ; return this ; }", "    public void putFingerprintCA1(byte[] iFpr) throws OpenPGPCardException{\n        if(iFpr.length != 20)\n            throw new IllegalArgumentException(\"Fingerprint must be exactly 20 bytes long\");\n        putGenericData(TLV_FPR_CA1[0],TLV_FPR_CA1[1],iFpr,20);\n    }\n", "    public void addOperations(TreeItem treeItem) {\n        addAPILevelOperation(treeItem);\n        addCheckAuthenticationOperation(treeItem);\n        addImageQueryOperation(treeItem);\n    }\n", "    public void setSiteCode(java.lang.String siteCode) {\n        if (siteCode == null || siteCode.length() == 0)\n            this.siteCode = null;\n        else\n            this.siteCode = siteCode;\n    }\n", "public BigFractionFormat ( final NumberFormat numeratorFormat , final NumberFormat denominatorFormat ) { super ( numeratorFormat , denominatorFormat ) ; }", "private void relax(MapNode node){\n  double nodeDist=distances.get(node);\n  for (  MapNode n : node.getNeighbors()) {\n    if (visited.contains(n)) {\n      continue;\n    }\n    if (okMapNodes != null && !n.isType(okMapNodes)) {\n      continue;\n    }\n    double nDist=nodeDist + getDistance(node,n);\n    if (distances.get(n) > nDist) {\n      prevNodes.put(n,node);\n      setDistance(n,nDist);\n    }\n  }\n}\n", "\tpublic String getCharacteristics_Name()\n\t{\t\t\t\n\t\treturn _characteristics_Name;\n\t}\t\t\n", "public Set < String > projectFields ( ) { return projFields ; }", "public static void link(File source, File target) throws IOException {\n        if( UtilJNI.ON_WINDOWS == 1 ) {\n            if( UtilJNI.CreateHardLinkW(target.getCanonicalPath(), source.getCanonicalPath(), 0) == 0) {\n                throw new IOException(\"link failed\");\n            }\n        } else {\n            if( UtilJNI.link(source.getCanonicalPath(), target.getCanonicalPath()) != 0 ) {\n                throw new IOException(\"link failed: \"+strerror());\n            }\n        }\n    }", "public static String toHumanSize(long bytesValue){\n  if (0 == bytesValue) {\n    return \"0B\";\n  }\n  boolean powerOfTwo=false;\n  if ((bytesValue & (bytesValue - 1L)) == 0) {\n    powerOfTwo=true;\n  }\n  long multiple=(long)(bytesValue / 1.5);\n  if ((multiple & (multiple - 1L)) == 0) {\n    powerOfTwo=true;\n  }\n  Unit unit=Unit.B;\n  if (powerOfTwo) {\n    if (bytesValue >= Unit.EiB.value) {\n      unit=Unit.EiB;\n    }\n else     if (bytesValue >= Unit.PiB.value) {\n      unit=Unit.PiB;\n    }\n else     if (bytesValue >= Unit.TiB.value) {\n      unit=Unit.TiB;\n    }\n else     if (bytesValue >= Unit.GiB.value) {\n      unit=Unit.GiB;\n    }\n else     if (bytesValue >= Unit.MiB.value) {\n      unit=Unit.MiB;\n    }\n else     if (bytesValue >= Unit.KiB.value) {\n      unit=Unit.KiB;\n    }\n  }\n else {\n    if (bytesValue >= Unit.EB.value) {\n      unit=Unit.EB;\n    }\n else     if (bytesValue >= Unit.PB.value) {\n      unit=Unit.PB;\n    }\n else     if (bytesValue >= Unit.TB.value) {\n      unit=Unit.TB;\n    }\n else     if (bytesValue >= Unit.GB.value) {\n      unit=Unit.GB;\n    }\n else     if (bytesValue >= Unit.MB.value) {\n      unit=Unit.MB;\n    }\n else     if (bytesValue >= Unit.KB.value) {\n      unit=Unit.KB;\n    }\n  }\n  double val=(bytesValue / unit.getValue());\n  double roundedValue=Math.round(val * 10.0) / 10.0;\n  BigDecimal myDecimal=BigDecimal.valueOf(roundedValue);\n  BigDecimal updated=myDecimal.stripTrailingZeros();\n  return updated.toPlainString() + unit.name();\n}\n", "public float quadratureAbsolute ( ) { return Math . abs ( mRight ) ; }", "public void load ( ) throws CouldntLoadDataException { if ( isLoaded ( ) ) { return ; } try { m_module . load ( ) ; } catch ( com . google . security . zynamics . binnavi . Database . Exceptions . CouldntLoadDataException | LoadCancelledException e ) { th", "public Object add(Object left, Object right, ParserRuleContext errCtx) {\n    if (left == null && right == null) {\n      return 0;\n    }\n\n    // if either are collections... concatenate them\n    if (left instanceof Collection<?> || right instanceof Collect", "private static synchronized Map<String, List<String>> load(Map<String, Object> config, boolean start, boolean restart) {\n        final boolean bTrace = TraceComponent.isAnyTracingEnabled();\n        if (bTrace && tc.isDebugEnabled()) {\n            Tr.debug(tc, \"Loading CHFW config from \" + config);\n        }\n\n        Map<String, Map<String, String[]>> parsed = extractConfig(config);\n\n        // if a restart is set, then stop and remove existing chains\n        // that may be running already\n        if (restart) {\n            unloadChains(parsed.get(\"chains\").keySet().iterator());\n        }\n\n        // handle any factory config first\n        List<String> createdFactories = loadFactories(parsed.get(\"factories\"));\n\n        // load any endpoints\n        List<String> createdEndpoints = loadEndPoints(parsed.get(\"endpoints\"));\n\n        // now load any channels\n        List<String> createdChannels = loadChannels(parsed.get(\"channels\"));\n\n        // now load any chains\n        List<String> createdChains = loadChains(parsed.get(\"chains\"), start, restart);\n\n        // now load the chain group definitions\n        List<String> createdGroups = loadGroups(parsed.get(\"groups\"), start, restart);\n\n        Map<String, List<String>> rc = new HashMap<String, List<String>>();\n        rc.put(\"factory\", createdFactories);\n        rc.put(\"channel\", createdChannels);\n        rc.put(\"chain\", createdChains);\n        rc.put(\"group\", createdGroups);\n        rc.put(\"endpoint\", createdEndpoints);\n        return rc;\n    }", "public Host withInstances(HostInstance... instances) {\n        if (this.instances == null) {\n            setInstances(new com.amazonaws.internal.SdkInternalList<HostInstance>(instances.length));\n        }\n        for (HostInstance ele : instances) {\n            this.instances.add(ele);\n        }\n        return this;\n    }", "    public CapComponent task(Long longCapDatatype) {\n        return new SwingLongEditor();\n    }\n", "public boolean canMoveTo ( String ref , ReviewDb db ) throws OrmException { return getProjectControl ( ) . controlForRef ( ref ) . canUpload ( ) && canAbandon ( db ) ; }", "\tpublic void addSubRelation(IRelation subRelation, IRelation exisingRelation) {\n\t\tsuper.checkClosed();\n\tif (subRelation == null)\n\t\t\tthrow new IllegalArgumentException(\"subRelation was null\");\n\t\tif (exisingRelation == null)\n\t\t\tthrow new IllegalArgumentException(\"exisingRelation was null\");\n\t\tsuper.createStatement(exisingRelation, hasSubRelation, subRelation, IModel.UNKNOWN_AUTHOR, IModel.UNKNOWN_AUTHOR);\n\t}\n", "public void assertGLThread() {\n        if (Thread.currentThread().getId() != mGLThreadID) {\n            RuntimeException e = new RuntimeException(\n                    \"Should not run GL functions from a non-GL thread!\");\n            e.printStackTrace();\n            throw e;\n        }\n    }", "public int encode(OutputStream os) throws IOException {\n  int retVal=1 + mechOidBytes.length;\n  os.write(TOKEN_ID);\n  int length=mechOidBytes.length + mechTokenLength;\n  retVal+=putLength(length,os);\n  os.write(mechOidBytes);\n  return retVal;\n}\n", "public T action ( ReconAction action ) { if ( null != action ) { jsonValue . put ( ACTION , action . name ( ) ) ; } return self ( ) ; }", "public static ConnectionIdAttribute createConnectionIdAttribute ( int connectionIdValue ) { ConnectionIdAttribute attribute = new ConnectionIdAttribute ( ) ; attribute . setConnectionIdValue ( connectionIdValue ) ; return attribute ; }", "@Override\n    public CreatePatchBaselineResult createPatchBaseline(CreatePatchBaselineRequest request) {\n        request = beforeClientExecution(request);\n        return executeCreatePatchBaseline(request);\n    }", "public static boolean isAmbiguousGetterName(String name){\n  int cpl=name.codePointCount(0,name.length());\n  if (cpl < 2)   return false;\n  int f=name.codePointAt(0);\n  if (!Character.isLowerCase(f) && f != '_')   return false;\n  int s=name.codePointAt(1);\n  return Character.isUpperCase(s);\n}\n", "public InternalTenantContext createInternalTenantContext(final UUID objectId, final ObjectType objectType, final TenantContext context) {\n        // The callcontext may come from a user API - for security, check we're not doing cross-tenants operations\n        //final Long tenantRecordIdFromObject = retrieveTenantRecordIdFromObject(objectId, objectType);\n        //final Long tenantRecordIdFromContext = getTenantRecordIdSafe(callcontext);\n        //Preconditions.checkState(tenantRecordIdFromContext.equals(tenantRecordIdFromObject),\n        //                         \"tenant of the pointed object (%s) and the callcontext (%s) don't match!\", tenantRecordIdFromObject, tenantRecordIdFromContext);\n        final Long tenantRecordId = getTenantRecordIdSafe(context);\n        final Long accountRecordId = getAccountRecordIdSafe(objectId, objectType, context);\n        return createInternalTenantContext(tenantRecordId, accountRecordId);\n    }", "public boolean aggregationLevelIsValid(int organisationUnitLevel,int dataValueLevel){\n  if (aggregationLevels.size() == 0) {\n    return true;\n  }\n  final Integer aggregationLevel=getRelevantAggregationLevel(organisationUnitLevel);\n  return aggregationLevel == null || dataValueLevel <= aggregationLevel;\n}\n", "public static AccessibilityNodeInfoCompat searchFromBfs ( Context context , AccessibilityNodeInfoCompat node , NodeFilter filter ) { if ( node == null ) { return null ; } final LinkedList < AccessibilityNodeInfoCompat > queue = new LinkedList < Accessibil", "default B withDefault(String key,long value){\n  return withDefault(key,Long.toString(value));\n}\n", "boolean isOwner ( IComment comment ) ;", "public void smoothScrollContentTo(int targetOffset,float velocity){\n  setCurrentState(STATE_SCROLL);\n  int distance=targetOffset - mCurrentContentOffset;\n  velocity=Math.abs(velocity);\n  int duration=400;\n  if (velocity > 0) {\n    duration=3 * Math.round(1000 * Math.abs(distance / velocity));\n  }\n  duration=Math.min(duration,MAX_DURATION);\n  mScroller.abortAnimation();\n  mScroller.startScroll(mCurrentContentOffset,0,distance,0,duration);\n  invalidate();\n}\n", "public static long parseParametersForAgeLimit(Map<String, String> parameters)\n            throws JournalException {\n        String ageString =\n                ParameterHelper\n                        .getOptionalStringParameter(parameters,\n                                                    PARAMETER_JOURNAL_FILE_AGE_LIMIT,\n                                                    DEFAULT_AGE_LIMIT);\n        Pattern p = Pattern.compile(\"([0-9]+)([DHM]?)\");\n        Matcher m = p.matcher(ageString);\n        if (!m.matches()) {\n            throw new JournalException(\"Parameter '\"\n                    + PARAMETER_JOURNAL_FILE_AGE_LIMIT\n                    + \"' must be an integer number of seconds, optionally \"\n                    + \"followed by 'D'(days), 'H'(hours), or 'M'(minutes), \"\n                    + \"or a 0 to indicate no age limit\");\n        }\n        long age = Long.parseLong(m.group(1)) * 1000;\n        String factor = m.group(2);\n        if (\"D\".equals(factor)) {\n            age *= 24 * 60 * 60;\n        } else if (\"H\".equals(factor)) {\n            age *= 60 * 60;\n        } else if (\"M\".equals(factor)) {\n            age *= 60;\n        }\n        return age;\n    }", "public static void createNewFile ( File file ) throws IOException { if ( file . exists ( ) ) { file . delete ( ) ; } file . getParentFile ( ) . mkdirs ( ) ; file . createNewFile ( ) ; }", "Item newInteger ( final int value ) { key . set ( value ) ; Item result = get ( key ) ; if ( result == null ) { pool . putByte ( INT ) . putInt ( value ) ; result = new Item ( index ++ , key ) ; put ( result ) ; } return result ; }", "  public void keyPressed(KeyEvent e) {\n    keyOrMouseUsed();\n  }\n", "    public void rebuildFlowGraph() {\n        try {\n            _controlFlowGraph = new FlowGraph(_methodGen);\n        } catch (ClassFormatException ex) {\n            System.err.println(ex.getMessage());\n            _context.release(_methodGen.getMethod(), _methodGen.getClassName());\n            _controlFlowGraph = null;\n\n            return;\n        }\n\n        _controlFlowGraph.initialize();\n    }\n", "  public DirectoryOptionComponent (FileOption opt, String text, SwingFrame parent, String desc, DirectoryChooser dc) {\n    this(opt, text, parent, dc);\n    setDescription(desc);\n  }\n", "public SurroundWithLineSelection(){\n  super(org.eclipse.jface.text.templates.GlobalTemplateVariables.LineSelection.NAME,JavaTemplateMessages.CompilationUnitContextType_variable_description_line_selection);\n}\n", "public static void printError ( int errorCode , Throwable cause ) { if ( errorCode == EC . GENERAL ) { printError ( errorCode , STR_ , cause ) ; } else { printError ( errorCode , cause . getMessage ( ) , cause , BOOL_ ) ; } }", "    public ConnectionBean getConnectionBean() {\n        ConnectionBean result=null;\n        try{\n            if(ds!=null){\n                Connection con=ds.getConnection();\n                result=new ConnectionBean(con, mapStatements);\n                totalCBRequests++;\n                lastUse=new Date();\n            }\n            if(log!=null && debugLevel>2)\n                log.println(new Date().toString()+\" - connection request\");\n        } catch(Exception ex){\n            if(log!=null)\n                log.println(new Date().toString() + \" Unable to get DB connection: \"+ex.getMessage());\n        }\n        return result;\n    }\n", "private void processBeginBlockCmd(String parms, int cmdTPosBegin, int cmdTPosEnd)\r\n            throws MiniTemplator.TemplateSyntaxException {\r\n        if (conditionalExclude(cmdTPosBegin, cmdTPosEnd)) {\r\n            return;\r\n        }\r\n        int p0 = skipBlanks(parms, 0);\r\n        if (p0 >= parms.length()) {\r\n            throw new MiniTemplator.TemplateSyntaxException(\r\n                    \"Missing block name in $BeginBlock command in template at offset \" + cmdTPosBegin + \".\");\r\n        }\r\n        int p = skipNonBlanks(parms, p0);\r\n        String blockName = parms.substring(p0, p);\r\n        if (!isRestOfStringBlank(parms, p)) {\r\n            throw new MiniTemplator.TemplateSyntaxException(\r\n                    \"Extra parameter in $BeginBlock command in template at offset \" + cmdTPosBegin + \".\");\r\n        }\r\n        int blockNo = registerBlock(blockName);\r\n        BlockTabRec btr = blockTab[blockNo];\r\n        btr.tPosBegin = cmdTPosBegin;\r\n        btr.tPosContentsBegin = cmdTPosEnd;\r\n        openBlocksTab[currentNestingLevel] = blockNo;\r\n        currentNestingLevel++;\r\n        if (currentNestingLevel > maxNestingLevel) {\r\n            throw new MiniTemplator.TemplateSyntaxException(\"Block nesting overflow for block \\\"\" + blockName\r\n                    + \"\\\" in template at offset \" + cmdTPosBegin + \".\");\r\n        }\r\n    }", "    public Reference getReference() throws NamingException {\n        Reference ref = new Reference(getClass().getName(), DataSourceObjectFactory.class.getName(), null);\n        ref.add(new StringRefAddr(\"dsName\", dsName));\n        ref.add(new StringRefAddr(\"dbDriver\", dbDriver));\n        ref.add(new StringRefAddr(\"dbURL\", dbURL));\n        ref.add(new StringRefAddr(\"user\", user));\n        ref.add(new StringRefAddr(\"password\", password));\n        ref.add(new StringRefAddr(\"initNum\", \"\" + initNum));\n        ref.add(new StringRefAddr(\"maxRest\", \"\" + maxRest));\n        return ref;\n    }\n", "public OffsetDateTime getOffsetDateTime(final String fieldName) {\n    try {\n      if (_jsonObject.isNull(fieldName)) {\n        return null;\n      } else {\n        return OffsetDateTime.parse(_jsonObject.getString(fieldName), DATE_TIME_FORMATTER);\n      }\n    } catch (JSONException ex) {\n      throw new QuandlRuntimeException(\"Cannot find field\", ex);\n    }\n  }", "public void marshall(ListNamespacesRequest listNamespacesRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (listNamespacesRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(listNamespacesRequest.getNextToken(), NEXTTOKEN_BINDING);\n            protocolMarshaller.marshall(listNamespacesRequest.getMaxResults(), MAXRESULTS_BINDING);\n            protocolMarshaller.marshall(listNamespacesRequest.getFilters(), FILTERS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public static void copy(File src,File dst) throws IOException {\n  FileInputStream inStream=new FileInputStream(src);\n  FileOutputStream outStream=new FileOutputStream(dst);\n  FileChannel inChannel=inStream.getChannel();\n  FileChannel outChannel=outStream.getChannel();\n  inChannel.transferTo(0,inChannel.size(),outChannel);\n  inStream.close();\n  outStream.close();\n}\n", "public static Thread newThread(String name, Runnable runnable, boolean daemon) {\n        Thread thread = new Thread(runnable, name);\n        thread.setDaemon(daemon);\n        return thread;\n    }", "private static boolean isSerializable(JavaClass cls) throws ClassNotFoundException {\n        JavaClass[] infs = cls.getAllInterfaces();\n        for (JavaClass inf : infs) {\n            String clsName = inf.getClassName();\n            if (\"java.io.Serializable\".equals(clsName) || \"java.io.Externalizable\".equals(clsName)) {\n                return true;\n            }\n        }\n        return false;\n    }", "\tpublic boolean isShowLabel() {\n\t\treturn showLabel;\n\t}\n", "private static boolean matchesPrototypeInstanceVar(Node node, NodeMetadata metadata,\n      String name) {\n    String[] parts = name.split(\".prototype.\");\n    String className = parts[0];\n    String propertyName = parts[1];\n    JSType providedJsType = getJsType(metadata, className);\n    if (providedJsType == null) {\n      return false;\n    }\n    JSType jsType = null;\n    if (node.hasChildren()) {\n      jsType = node.getFirstChild().getJSType();\n    }\n    if (jsType == null) {\n      return false;\n    }\n    jsType = jsType.restrictByNotNullOrUndefined();\n    if (!jsType.isUnknownType()\n        && !jsType.isAllType()\n        && jsType.isSubtypeOf(providedJsType)) {\n      if (node.isName() && propertyName.equals(node.getString())) {\n        return true;\n      } else if (node.isGetProp()\n          && propertyName.equals(node.getLastChild().getString())) {\n        return true;\n      }\n    }\n    return false;\n  }", "private static long _channelCopy2 (@Nonnull @WillNotClose final ReadableByteChannel aSrc,\n                                     @Nonnull @WillNotClose final WritableByteChannel aDest) throws IOException\n  {\n    long nBytesWritten = 0;\n    final ByteBuffer ", "\tpublic void clearValuesFromAlgorithmData() {\n\t\talgData.getParams().getMap().remove(\"use-alpha-criterion\");\t\t\n\t\talgData.getParams().getMap().remove(\"alpha\");\t\t\n\t\talgData.getParams().getMap().remove(\"use-fdr-graph\");\t\t\n\t\talgData.getParams().getMap().remove(\"fdr\");\t\t\n\t\talgData.getParams().getMap().remove(\"hcl-execution\");\t\n\t\t\n\t\talgData.getParams().getMap().remove(\"fisher-exact-bin-cutoff\");\t\n\t\talgData.getParams().getMap().remove(\"upper-bin-index\");\t\n\n\t\talgData.getParams().getMap().remove(\"swap-groups\");\t\n\t\talgData.getParams().getMap().remove(\"swap-bins\");\t\n\t}\n", "    public void preDeregister() throws java.lang.Exception {\n\n        stopListeningToAll();\n    }\n", "private static int computeMaxFlow(){\n  int sum;\n  for (int i=1; i < n - 1; i++) {\n    sum=0;\n    for (int j=0; j < n; j++) {\n      sum=sum + outgoing[j][i] - outgoing[i][j];\n    }\n    if (sum != 0) {\n      return -1;\n    }\n  }\n  sum=0;\n  for (int j=0; j < n; j++) {\n    sum=sum + outgoing[0][j];\n  }\n  return sum;\n}\n", "public static void drawStringUnderlineCharAt(JComponent c,Graphics g,String text,int underlinedIndex,int x,int y){\n  if (drawStringUnderlineCharAtMethod != null) {\n    try {\n      drawStringUnderlineCharAtMethod.invoke(null,new Object[]{c,g,text,new Integer(underlinedIndex),new Integer(x),new Integer(y)});\n      return;\n    }\n catch (    IllegalArgumentException e) {\n    }\ncatch (    IllegalAccessException e) {\n    }\ncatch (    InvocationTargetException e) {\n    }\n  }\n  Graphics2D g2=(Graphics2D)g;\n  Map oldRenderingHints=installDesktopHints(g2);\n  BasicGraphicsUtils.drawStringUnderlineCharAt(g,text,underlinedIndex,x,y);\n  if (oldRenderingHints != null) {\n    g2.addRenderingHints(oldRenderingHints);\n  }\n}\n", "@Override\n\tpublic Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows IOException {\n\t\tfinal String requestURI = request.getRequestURI();\n\t\tUserAuthentication userAuth = null;\n\t\tString username = request.getParameter(USERNAME);\n\t\tString password = request.getParameter(PASSWORD);\n\t\tString appid = SecurityUtils.getAppidFromAuthRequest(request);\n\n\t\tif (requestURI.endsWith(LDAP_ACTION) && !StringUtils.isBlank(username) && !StringUtils.isBlank(password)) {\n\t\t\ttry\t{\n\t\t\t\tApp app = Para.getDAO().read(App.id(appid == null ? Config.getRootAppIdentifier() : appid));\n\t\t\t\tAuthentication auth = new LDAPAuthentication(username, password).withApp(app);\n\t\t\t\t// set authentication in context to avoid warning message from SpringSecurityAuthenticationSource\n\t\t\t\tSecurityContextHolder.getContext().setAuthentication(new AnonymousAuthenticationToken(\"key\",\n\t\t\t\t\t\t\"anonymous\", AuthorityUtils.createAuthorityList(\"ROLE_ANONYMOUS\")));\n\t\t\t\tAuthentication ldapAuth = getAuthenticationManager().authenticate(auth);\n\t\t\t\tif (ldapAuth != null) {\n\t\t\t\t\t//success!\n\t\t\t\t\tuserAuth = getOrCreateUser(app, ldapAuth);\n\t\t\t\t}\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.info(\"Failed to authenticate '{}' with LDAP server: {}\", username, ex.getMessage());\n\t\t\t\tthrow new AuthenticationServiceException(ex.getMessage(), ex.getCause());\n\t\t\t}\n\t\t}\n\n\t\treturn SecurityUtils.checkIfActive(userAuth, SecurityUtils.getAuthenticatedUser(userAuth), true);\n\t}", "@Override protected void forceDeleteAttributeAt(int position){\n  int index=locateIndex(position);\n  m_NumAttributes--;\n  if ((index >= 0) && (m_Indices[index] == position)) {\n    int[] tempIndices=new int[m_Indices.length - 1];\n    double[] tempValues=new double[m_AttValues.length - 1];\n    System.arraycopy(m_Indices,0,tempIndices,0,index);\n    System.arraycopy(m_AttValues,0,tempValues,0,index);\n    for (int i=index; i < m_Indices.length - 1; i++) {\n      tempIndices[i]=m_Indices[i + 1] - 1;\n      tempValues[i]=m_AttValues[i + 1];\n    }\n    m_Indices=tempIndices;\n    m_AttValues=tempValues;\n  }\n else {\n    int[] tempIndices=new int[m_Indices.length];\n    double[] tempValues=new double[m_AttValues.length];\n    System.arraycopy(m_Indices,0,tempIndices,0,index + 1);\n    System.arraycopy(m_AttValues,0,tempValues,0,index + 1);\n    for (int i=index + 1; i < m_Indices.length; i++) {\n      tempIndices[i]=m_Indices[i] - 1;\n      tempValues[i]=m_AttValues[i];\n    }\n    m_Indices=tempIndices;\n    m_AttValues=tempValues;\n  }\n}\n", "    public void writeLine(String s) {\n       write(s+\"<br/>\");\n    }\n", "public boolean equals(DerValue other){\n  if (this == other) {\n    return true;\n  }\n  if (tag != other.tag) {\n    return false;\n  }\n  if (data == other.data) {\n    return true;\n  }\n  return (System.identityHashCode(this.data) > System.identityHashCode(other.data)) ? doEquals(this,other) : doEquals(other,this);\n}\n", "protected void setup(SuggestOracle suggestions) {\n\n        if (itemBoxKeyDownHandler != null) {\n            itemBoxKeyDownHandler.removeHandler();\n        }\n\n        list.setStyleName(AddinsCssName.MULTIVALUESUGGESTBOX_LIST);\n        this.suggestions = suggestions;\n        final ListItem item = new ListItem();\n\n        item.setStyleName(AddinsCssName.MULTIVALUESUGGESTBOX_INPUT_TOKEN);\n\n        suggestBox = new SuggestBox(suggestions, itemBox);\n        suggestBox.addSelectionHandler(selectionEvent -> {\n            Suggestion selectedItem = selectionEvent.getSelectedItem();\n            itemBox.setValue(\"\");\n            if (addItem(selectedItem)) {\n                ValueChangeEvent.fire(MaterialAutoComplete.this, getValue());\n            }\n            itemBox.setFocus(true);\n        });\n\n        loadHandlers();\n\n        setLimit(this.limit);\n        String autocompleteId = DOM.createUniqueId();\n        itemBox.getElement().setId(autocompleteId);\n\n        item.add(suggestBox);\n        item.add(label);\n        list.add(item);\n\n        panel.add(list);\n        panel.getElement().setAttribute(\"onclick\",\n                \"document.getElementById('\" + autocompleteId + \"').focus()\");\n        panel.add(errorLabel);\n        suggestBox.setFocus(true);\n    }", "public static Throwable getCause(Throwable e) {\n        Throwable cause = null; \n        Throwable result = e;\n        while (null != (cause = result.getCause()) && (result != cause)) {\n            result = cause;\n        }\n        return result;\n    }", "private boolean isValidMessage(BigInteger m,BigInteger p){\n  return m.compareTo(p) < 0;\n}\n", "public static ConfigurateTranslator instance ( ) { return instance ; }", "    public void accept(final RevisionVisitor visitor) {\n        visitor.visit(this);\n        final Iterator iter = deltas.iterator();\n        while (iter.hasNext()) {\n            ((Delta)iter.next()).accept(visitor);\n        }\n    }\n", "public GreaterConstraint(int constraintValue){\n  super(Integer.valueOf(constraintValue));\n}\n", "public XMLGregorianCalendar newXMLGregorianCalendarTime(\n            final int hours,\n            final int minutes,\n            final int seconds,\n            final int milliseconds,\n            final int timezone) {\n\n        // millisecond may be undefined\n        // millisecond must be >= 0 millisecond <= 1000\n        BigDecimal realMilliseconds = null; // undefined value\n        if (milliseconds != DatatypeConstants.FIELD_UNDEFINED) {\n            if (milliseconds < 0 || milliseconds > 1000) {\n                throw new IllegalArgumentException(\n                        \"javax.xml.datatype.DatatypeFactory#newXMLGregorianCalendarTime(\"\n                        + \"int hours, int minutes, int seconds, int milliseconds, int timezone)\"\n                        + \"with invalid milliseconds: \" + milliseconds\n                );\n            }\n            realMilliseconds = BigDecimal.valueOf((long) milliseconds, 3);\n        }\n\n        return newXMLGregorianCalendarTime(\n                hours,\n                minutes,\n                seconds,\n                realMilliseconds,\n                timezone\n        );\n    }", "public static Image createIndexed(int width,int height,int[] palette,byte[] data){\n  IndexedImage i=new IndexedImage(width,height,palette,data);\n  CodenameOneImplementation impl=Display.impl;\n  if (impl.isNativeIndexed()) {\n    return new Image(impl.createNativeIndexed(i));\n  }\n  return i;\n}\n", "public static boolean isPublic(String id){\n  return (Character.isUpperCase(id.charAt(1)));\n}\n", "public void broadcast(INDArray array) {\n        if (array == null)\n            return;\n\n        Nd4j.getExecutioner().commit();\n\n        val config = OpProfiler.getInstance().getConfig();\n        val locality = config.isCheckLocality();\n\n        if (locality)\n            config.setCheckLocality(false);\n\n        int numDevices = Nd4j.getAffinityManager().getNumberOfDevices();\n        for (int i = 0; i < numDevices; i++) {\n            // if current thread equal to this device - we just save it, without duplication\n            if (Nd4j.getAffinityManager().getDeviceForCurrentThread() == i) {\n                set(i, array);\n            } else {\n                set(i, Nd4j.getAffinityManager().replicateToDevice(i, array));\n            }\n\n        }\n\n        config.setCheckLocality(locality);\n    }", "public static long sizeOfFields ( Class clazz ) { return sizeOf ( clazz ) - firstFieldOffset ( clazz ) ; }", "public static void notEmpty(Object[] arr, String name) {\n    notNull(arr, name);\n\n    if (arr.length == 0) {\n      throw new IllegalArgumentException(name + \"must not be empty\");\n    }\n  }", "@Override public void warn(String msg){\n  if (logger.isLoggable(Level.WARNING)) {\n    log(SELF,Level.WARNING,msg,null);\n  }\n}\n", "public static byte[] decodeHex(final char[] data){\n  final int len=data.length;\n  if ((len & 0x01) != 0) {\n    throw new IllegalArgumentException(\"Odd number of characters.\");\n  }\n  final byte[] out=new byte[len >> 1];\n  for (int i=0, j=0; j < len; i++) {\n    int f=toDigit(data[j],j) << 4;\n    j++;\n    f=f | toDigit(data[j],j);\n    j++;\n    out[i]=(byte)(f & 0xFF);\n  }\n  return out;\n}\n", "    public boolean isEnabled() {\n        Object retVal = m_dataCollection.get(\"isEnabled\");\n        return ((Boolean) retVal).booleanValue();\n    }\n", "public synchronized void onDone ( ) { this . done = BOOL_ ; for ( int i = NUM_ ; i < this . listenerHolders . size ( ) ; i ++ ) { ( this . listenerHolders . get ( i ) ) . listener . onDone ( ) ; } }", "public CProjectConfiguration ( final INaviProject project , final ListenerProvider < IProjectListener > listeners , final SQLProvider provider , final int projectId , final String name , final String description , final Date creationDate , final Date modificationDate , final List < DebuggerTemplate > assignedDebuggers ) { m_project = project ; m_listeners = listeners ; m_provider = provider ; m_id = projectId ; m_name = name ; m_description = description ; m_creationDate = new Date ( creationDate . getTime ( ) ) ; m_modificationDate = new Date ( modificationDate . getTime ( ) ) ; m_assignedDebuggers = new ArrayList < DebuggerTemplate > ( assignedDebuggers ) ; }", "void appendedLocalInstructionComment ( CodeNodeType codeNode , InstructionType instruction , CommentType comment ) ;", "public static void hiddenFromEncodedString(ProjectFilterSettings result,String s){\n  if (s.length() > 0) {\n    int bar=s.indexOf(FIELD_DELIMITER);\n    String categories;\n    if (bar >= 0) {\n      categories=s.substring(0,bar);\n    }\n else {\n      categories=s;\n    }\n    StringTokenizer t=new StringTokenizer(categories,LISTITEM_DELIMITER);\n    while (t.hasMoreTokens()) {\n      String category=t.nextToken();\n      result.removeCategory(category);\n    }\n  }\n}\n", "public static Charset toCharset ( String charset ) { return charset == null ? Charset . defaultCharset ( ) : Charset . forName ( charset ) ; }", "public LambdaDslJsonArray or(Object value, MatchingRule... rules) {\n        pactArray.or(value, rules);\n        return this;\n    }", "@Basic\n    @Column(name = \"NAME\", unique = true, nullable = false, length=255)\n\tpublic String getName() \n\t{\n\t\treturn name;\n\t}", "public int headerOffset ( ) { return this . header ( ) . offset ( ) ; }", "@SuppressWarnings(\"unchecked\")\n  void registerConsumer(Inspector<? super OutT> subInspector) {\n    consumers.add((Inspector<OutT>) subInspector);\n  }", "public void setItemIcon(String itemIcon)\n    {\n        String val = setNonEmptyValueAttribute(itemIcon);\n        if (val != null)\n            _iState.setItemIcon(setNonEmptyValueAttribute(val));\n    }", "public int compare ( File file1 , File file2 ) { long size1 = NUM_ ; if ( file1 . isDirectory ( ) ) { size1 = sumDirectoryContents && file1 . exists ( ) ? FileUtils . sizeOfDirectory ( file1 ) : NUM_ ; } else { size1 = file1 . length ( ) ; } long size2 = NUM_ ; if ( file2 . isDirectory ( ) ) { size2 = sumDirectoryContents && file2 . exists ( ) ? FileUtils . sizeOfDirectory ( file2 ) : NUM_ ; } else { size2 = file2 . length ( ) ; } long result = size1 - size2 ; if ( result < NUM_ ) { return - NUM_ ; } else if ( result > NUM_ ) { return NUM_ ; } else { return NUM_ ; } }", "public boolean containsSecteur(Secteur secteur){\n\treturn this.secteur.contains(secteur);\n}\n", "    private JPanel initButtonPanel () {\n        final JPanel master = new JPanel (new BorderLayout(0, 0));\n\n        final JPanel left = new JPanel (new BorderLayout(0, 0));\n        final JPanel right = new JPanel (new BorderLayout(0, 0));\n\n        right.add(prevButton, BorderLayout.WEST);\n        right.add(nextButton, BorderLayout.EAST);\n\n        left.add(GUIFactory.button(\"cancel_btn\",\n\t\t\t\t\t\t\t\t   this,\n\t\t\t\t\t\t\t\t   CMD_DISPOSE,\n\t\t\t\t\t\t\t\t   \"cancel.png\"), \n\t\t\t\t BorderLayout.WEST);\n\n        master.add(left, BorderLayout.WEST);\n        master.add(right, BorderLayout.EAST);\n\n        return master;\n    }\n", "public static String getEscaped(byte... bytes) {\n        final StringBuilder bld = new StringBuilder();\n        for (byte b : bytes) {\n            bld.append(\"\\\\\").append(Hex.get(b));\n        }\n        return bld.toString();\n    }", "\tpublic void includeAttributesAndToOneRelationships() {\n\t\tsetBase(ERXKeyFilter.Base.AttributesAndToOneRelationships);\n\t}\n", "public synchronized void decrementUseCount()\n          throws SIConnectionDroppedException, SIErrorException\n\n   {\n      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(this, tc, \"decrementUseCount\");\n\n      useCount--;\n      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(this, tc, \"Use count is now: \" + useCount);\n\n      // Now check the use count. If it is 0, we should close the order contex so that the server\n      // side code can release the resources held by it.\n      if (useCount == 0)\n      {\n         close();\n         dead = true;\n      }\n\n      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc, \"decrementUseCount\");\n   }", "public void BareMainViewsExists() throws NoMatchingViewException {\n  dumpUi(R.id.btnEffect,R.id.tabBrightness,R.id.tabGrid,R.id.tabSetting,R.id.tabSuffle,R.id.tabTime,R.id.btn1,R.id.btn2,R.id.btn3,R.id.btn4,R.id.btn5,R.id.seekBar,R.id.seekBar2,R.id.seekBar3);\n  TestHelper.checkUiDoNotExist(listUi);\n}\n", "    public double max(DoubleComparator comparator) {\n        return super.max(comparator);\n    }\n", "    @Override protected void startup() {\n        show(new EjemploswgView(this));\n    }\n", "\tpublic boolean hasNullHostInfo() {\n\n\t\tif (host == null || port == -1 || username == null || password == null) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n", "private void moveTo ( long blkNum , int slot ) { moveFrom = currentPage . currentBlk ( ) . number ( ) ; BlockId blk = new BlockId ( currentPage . currentBlk ( ) . fileName ( ) , blkNum ) ; try { ccMgr . readLeafBlock ( blk ) ; } catch ( LockAbortException", "    public boolean moveRestrictionUp(RestrictionType restriction) {\n        if(restriction != null) {\n            int index = _restrictions.indexOf(restriction);\n            if(index > 0) {\n                _restrictions.remove(restriction);\n                _restrictions.add(index - 1, restriction);\n                return true;\n            }\n        }\n        return false;\n    }\n", "private void loadMatrix(final Matrix matrix,final File file) throws IOException {\n  final Iterator<String> lines=Util.readFileLineByLine(file);\n  int row=0;\n  while (lines.hasNext()) {\n    final String line=lines.next();\n    final String[] fields=line.split(\" \");\n    for (int i=0; i < fields.length; i++) {\n      matrix.set(row,i,Double.valueOf(fields[i]));\n    }\n    row++;\n  }\n}\n", "public boolean isEntryFromPartition ( IEntryHolder entryHolder ) { final Object routingValue = entryHolder . getRoutingValue ( ) ; if ( routingValue == null ) return BOOL_ ; if ( ! _clusterInfo . isPartitioned ( ) ) return BOOL_ ; final int partitionId = ", "public Integer toInteger(){\n  return Integer.valueOf(intValue());\n}", "protected AstNode parseCreateProcedure( DdlTokenStream tokens,\n                                            AstNode parentNode ) throws ParsingException {\n        assert tokens != null;\n        assert parentNode != null;\n\n        markStartOfStatement(tokens);\n\n        tokens.consume(CREATE, \"PROCEDURE\");\n\n        String functionName = parseName(tokens);\n\n        AstNode functionNode = nodeFactory().node(functionName, parentNode, TYPE_CREATE_PROCEDURE_STATEMENT);\n\n        parseUntilTerminator(tokens);\n        markEndOfStatement(tokens, functionNode);\n\n        return functionNode;\n    }", "public final int readInt() throws IOException {\n  mPosition+=4;\n  d.readFully(w,0,4);\n  return (w[3]) << 24 | (w[2] & 0xff) << 16 | (w[1] & 0xff) << 8 | (w[0] & 0xff);\n}\n", "@Override public Enumeration<String> enumerateRequests(){\n  Vector<String> newVector=new Vector<String>(0);\n  if (m_filterThread != null) {\n    newVector.addElement(\"Stop\");\n  }\n  return newVector.elements();\n}\n", "public void disconnect() throws SQLException, NoConnectionException {\n  if (connection != null)   connection.close();\n  throw new NoConnectionException();\n}\n", "public Shape createPoint(Point2D point){\n  float x1=(float)(point.getX() - size / 2f);\n  float x2=(float)(point.getX() - size / 4f);\n  float x3=(float)(point.getX() + size / 4f);\n  float x4=(float)(point.getX() + size / 2f);\n  float y1=(float)(point.getY() - size / 2f);\n  float y2=(float)(point.getY() - size / 4f);\n  float y3=(float)(point.getY() + size / 4f);\n  float y4=(float)(point.getY() + size / 2f);\n  GeneralPath path=new GeneralPath();\n  path.moveTo(x2,y1);\n  path.lineTo(x3,y1);\n  path.lineTo(x3,y2);\n  path.lineTo(x4,y2);\n  path.lineTo(x4,y3);\n  path.lineTo(x3,y3);\n  path.lineTo(x3,y4);\n  path.lineTo(x2,y4);\n  path.lineTo(x2,y3);\n  path.lineTo(x1,y3);\n  path.lineTo(x1,y2);\n  path.lineTo(x2,y2);\n  path.lineTo(x2,y1);\n  return path;\n}\n", "    public void applyBone(BoneInfluence inf, Vector3f vstore, Vector3f nstore) {\n    \tif(!optimizeTransform) {\n\t        transform.loadIdentity();\n\t        transform.setRotationQuaternion(worldRotation);\n\t        transform.setTranslation(worldTranslation);\n    \t}\n\n        if(inf.vOffset != null) {\n\t        workVectA.set(inf.vOffset);\n\t        transform.rotateVect(workVectA);\n\t        transform.translateVect(workVectA);\n\t        workVectA.multLocal(inf.weight);\n\t        vstore.addLocal(workVectA);\n        }\n\n        if(inf.nOffset != null) {\n            workVectA.set(inf.nOffset);        \n            transform.rotateVect(workVectA);\n            workVectA.multLocal(inf.weight);\n            nstore.addLocal(workVectA);\n        }\n    }\n", "private void compareBytes ( byte [ ] expectedResult , byte [ ] actualResult ) { if ( expectedResult == null ) { assertNull ( actualResult ) ; return ; } assertNotNull ( actualResult ) ; assertEquals ( STR_ , expectedResult . length , actualResult . length", "public static <T> BooleanSupplier curry(Predicate<T> predicate, T value) {\n        dbc.precondition(predicate != null, \"cannot bind parameter of a null predicate\");\n        return () -> predicate.test(value);\n    }", "public static void addIssue(FhirContext theCtx, IBaseOperationOutcome theOperationOutcome, String theSeverity, String theDetails, String theLocation, String theCode) {\n\t\tIBase issue = createIssue(theCtx, theOperationOutcome);\n\t\tpopulateDetails(theCtx, issue, theSeverity, theDetails, theLocation, theCode);\n\t}", "public void add(LeafAtom atom){\n  leafChildren.add(atom);\n}\n", "public void exportMeasurements(MeasurementsExporter exporter) throws IOException {\n  for (  OneMeasurement measurement : data.values()) {\n    measurement.exportMeasurements(exporter);\n  }\n}\n", "public OutputStream asOutputStream() {\n        if ( tmp != null )\n            throw new RuntimeException(\"can create Input/OutputStream only once\");\n        tmp = new byte[1];\n        return new OutputStream() {\n\n            @Override\n            public void write(int b) throws IOException {\n                tmp[0] = (byte) b;\n                write(tmp, 0, 1);\n            }\n\n            @Override\n            public void write(byte[] b, int off, int len) throws IOException {\n                if ( event == null ) {\n                    event = new AsyncFileIOEvent(0,0, ByteBuffer.allocate(len));\n                }\n                if ( event.getBuffer().capacity() < len ) {\n                    event.buffer = ByteBuffer.allocate(len);\n                }\n                ByteBuffer buffer = event.buffer;\n                event.reset();\n                buffer.put(b,off,len);\n                buffer.flip();\n                event = AsyncFile.this.write(event.getNextPosition(), buffer).await();\n                if ( event.getRead() != len )\n                    throw new RuntimeException(\"unexpected. Pls report\");\n            }\n\n            @Override\n            public void close() throws IOException {\n                AsyncFile.this.close();\n            }\n\n        };\n    }", "protected String convertWord(String word){\n  word=word.toUpperCase();\n  if (ignoreList.contains(word)) {\n    return null;\n  }\n  return word;\n}\n", "public <T> void invokeNodeRequest (\n        final NodeRequest request, final NodeRequestsListener<T> listener)\n    {\n        // if we're not on the dobjmgr thread, get there\n        if (!_omgr.isDispatchThread()) {\n            _omgr.postRunnable(new Runnable() {\n                public void run () {\n                    invokeNodeRequest(request, listener);\n                }\n            });\n            return;\n        }\n\n        // serialize the action to make sure we can\n        byte[] requestBytes = flattenRequest(request);\n\n        // build a set of node names (including the local node) to which to send the request\n        final Set<String> nodes = findApplicableNodes(request);\n        if (nodes.isEmpty()) {\n            listener.requestsProcessed(new NodeRequestsResultImpl<T>());\n            return;\n        }\n\n        final Map<String, T> results = Maps.newHashMap();\n        final Map<String, String> failures = Maps.newHashMap();\n        final AtomicInteger completedNodes = new AtomicInteger();\n        for (final String node : nodes) {\n            invokeNodeRequest(node, requestBytes, new InvocationService.ResultListener() {\n                public void requestProcessed (Object result) {\n                    // check off this node's successful response\n                    @SuppressWarnings(\"unchecked\")\n                    T castResult = (T) result;\n                    results.put(node, castResult);\n                    nodeDone();\n                }\n                public void requestFailed (String cause) {\n                    failures.put(node, cause);\n                    nodeDone();\n                }\n                protected void nodeDone () {\n                    if (completedNodes.incrementAndGet() == nodes.size()) {\n                        // if all nodes have responded, let caller know\n                        listener.requestsProcessed(new NodeRequestsResultImpl<T>(results, failures));\n                    }\n                }\n            });\n        }\n    }", "public void add(String category,String[] titles,double[] values){\n  mCategories.add(category);\n  mTitles.add(titles);\n  mValues.add(values);\n}\n", "    public void setRoundedCorner(int arcWidth, int arcHeight) {\n        if ( (arcWidth == 0 || arcHeight == 0) && \n                !(m_imageBox instanceof Rectangle2D) ) {\n            m_imageBox = new Rectangle2D.Float();\n        } else {\n            if ( !(m_imageBox instanceof RoundRectangle2D) )\n                m_imageBox = new RoundRectangle2D.Float();\n            ((RoundRectangle2D)m_imageBox)\n                .setRoundRect(0,0,10,10,arcWidth,arcHeight);                    \n        }\n    } //\n", "    protected void writeEof() throws IOException {\n        writeStart(\"EOF\");\n    }\n", "public static void gracefullyDisposeOf(final Disposable disposable) {\n        try {\n            if (disposable != null) {\n                disposable.dispose();\n            }\n        } catch (final Throwable exception) {\n            Gdx.app.error(\"WARN\", \"Unable to dispose: \" + disposable + \". Ignored.\", exception);\n        }\n    }", "public void flush() throws IOException {\n  writer.flush();\n}\n", "private String seekSubDocumentRoot ( ) throws XMLStreamException , IOException { String docTag = null ; if ( xmlReader . isStartElement ( ) && xmlReader . getDepth ( ) > NUM_ ) { docTag = xmlReader . getName ( ) . getLocalPart ( ) ; } else { while ( xmlRe", "public void playTogether ( Collection < Animator > items ) { if ( items != null && items . size ( ) > NUM_ ) { mNeedsSort = BOOL_ ; Builder builder = null ; for ( Animator anim : items ) { if ( builder == null ) { builder = play ( anim ) ; } else { builder . with ( anim ) ; } } } }", "public static JSONArray toJSONArray ( JSONTokener x ) throws JSONException { return toJSONArray ( rowToJSONArray ( x ) , x ) ; }", "  public Sound createSound(String mimeType, String url) {\n    return createSound(mimeType, url, false);\n  }\n", "public Formula or(final Collection<? extends Formula> operands) {\n    final LinkedHashSet<Formula> ops = new LinkedHashSet<>(operands);\n    return this.constructOr(ops);\n  }", "\tpublic boolean isImmediate() {\n\t\treturn false;\n\t}\n", "public void addMoreDatas(List<M> datas){\n  if (datas != null) {\n    mDatas.addAll(mDatas.size(),datas);\n    notifyDataSetChanged();\n  }\n}\n", "@Override public boolean equals(Object obj){\n  if (this == obj)   return true;\n  if (obj == null)   return false;\n  if (getClass() != obj.getClass())   return false;\n  NdefMessage other=(NdefMessage)obj;\n  return Arrays.equals(mRecords,other.mRecords);\n}\n", "public MX4JServerSocketFactory(boolean useSSL,boolean needClientAuth,String protocols,String ciphers,Properties gfsecurityProps){\n  if (protocols == null || protocols.length() == 0) {\n    protocols=DistributionConfig.DEFAULT_SSL_PROTOCOLS;\n  }\n  if (ciphers == null || ciphers.length() == 0) {\n    ciphers=DistributionConfig.DEFAULT_SSL_CIPHERS;\n  }\n  this.socketCreator=SocketCreatorFactory.createNonDefaultInstance(useSSL,needClientAuth,protocols,ciphers,gfsecurityProps);\n}\n", "public void addContainerpageEventHandler(I_CmsContainerpageEventHandler handler) {\n\n        CmsCoreProvider.get().getEventBus().addHandler(CmsContainerpageEvent.TYPE, handler);\n    }", "long readTagAndSet(long bucketIndex, int posInBucket, long newTag) {\r\n\t\tlong tagStartIdx = getTagOffset(bucketIndex, posInBucket);\r\n\t\tlong tag = 0;\r\n\t\tlong tagEndIdx = tagStartIdx + bitsPerTag;\r\n\t\tint tagPos = 0;\r\n\t\tfor (long i = tagStartIdx; i < tagEndIdx; i++) {\r\n\t\t\tif ((newTag & (1L << tagPos)) != 0) {\r\n\t\t\t\tif (memBlock.getAndSet(i)) {\r\n\t\t\t\t\ttag |= 1 << tagPos;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (memBlock.getAndClear(i)) {\r\n\t\t\t\t\ttag |= 1 << tagPos;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttagPos++;\r\n\t\t}\r\n\t\treturn tag;\r\n\t}", "protected void notifyLocator(L locator){\nsynchronized (this) {\n    if (!knownLocators.add(locator.getPartitionId())) {\n      throw new IllegalStateException(\"Already located on this DS: \" + locator);\n    }\n  }\n}\n", "\tpublic int read() throws IOException {\n\t\treturn readBits(8);\n\t}\n", "void _copyToUnsafe(MultiVertexGeometryImpl dst) {\n\t\t_verifyAllStreams();\n\t\tdst.m_description = m_description;\n\t\tdst.m_vertexAttributes = null;\n\t\tint nattrib = m_description.getAttributeCount();\n\t\tAttributeStreamBase[] cloneAttributes = null;\n\t\tif (m_vertexAttributes != null) {\n\t\t\tcloneAttributes = new AttributeStreamBase[nattrib];\n\t\t\tfor (int i = 0; i < nattrib; i++) {\n\t\t\t\tif (m_vertexAttributes[i] != null) {\n\t\t\t\t\tint ncomps = VertexDescription\n\t\t\t\t\t\t\t.getComponentCount(m_description\n\t\t\t\t\t\t\t\t\t._getSemanticsImpl(i));\n\t\t\t\t\tcloneAttributes[i] = m_vertexAttributes[i]\n\t\t\t\t\t\t\t.restrictedClone(getPointCount() * ncomps);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (m_envelope != null) {\n\t\t\tdst.m_envelope = (Envelope) m_envelope.createInstance();\n\t\t\tm_envelope.copyTo(dst.m_envelope);\n\t\t\t// dst.m_envelope = (Envelope) m_envelope.clone();\n\t\t} else\n\t\t\tdst.m_envelope = null;\n\n\t\tdst.m_pointCount = m_pointCount;\n\t\tdst.m_flagsMask = m_flagsMask;\n\t\tdst.m_vertexAttributes = cloneAttributes;\n\n\t\ttry {\n\t\t\t_copyToImpl(dst); // copy child props\n\t\t} catch (Exception ex) {\n\t\t\tdst.setEmpty();\n\t\t\tthrow new RuntimeException(ex);\n\t\t}\n\t}", "static void printXml(DexData dexData,boolean justClasses){\n  ClassRef[] externClassRefs=dexData.getExternalReferences();\n  String prevPackage=null;\n  for (int i=0; i < externClassRefs.length; i++) {\n    ClassRef cref=externClassRefs[i];\n    String declClassName=cref.getName();\n    String className=classNameOnly(declClassName);\n    String packageName=packageNameOnly(declClassName);\n    if (!packageName.equals(prevPackage)) {\n      if (prevPackage != null) {\n        out.println(IN1 + \"</package>\");\n      }\n      out.println(IN1 + \"<package name=\\\"\" + packageName+ \"\\\">\");\n      prevPackage=packageName;\n    }\n    out.println(IN2 + \"<class name=\\\"\" + className+ \"\\\">\");\n    if (!justClasses) {\n      printXmlFields(cref);\n      printXmlMethods(cref);\n    }\n    out.println(IN2 + \"</class>\");\n  }\n  if (prevPackage != null)   out.println(IN1 + \"</package>\");\n}\n", "public BackupCapabilities capabilities ( ) ;", "\tprivate String randomWord(int maxLength){\n\t\tString out=\"\";\n\t\tint length=new Double(Math.sqrt(Math.random()*Math.pow((maxLength+1),2)-1)).intValue();\n\t\tfor(int i=0;i<length;i++){\n\t\t\tout+=o.getAlphabet().get(new Double(Math.random()*o.getAlphabet().size()).intValue());\n\t\t}\n\t\treturn out;\n\t}\n", "boolean createWorldConfig ( ) ;", "public static Request createAllocateRequest ( byte protocol , boolean rFlag ) { Request allocateRequest = new Request ( ) ; try { allocateRequest . setMessageType ( Message . ALLOCATE_REQUEST ) ; if ( protocol != NUM_ && protocol != NUM_ ) throw new StunE", "public PagedList<RouteFilterRuleInner> listByRouteFilterNext(final String nextPageLink) {\n        ServiceResponse<Page<RouteFilterRuleInner>> response = listByRouteFilterNextSinglePageAsync(nextPageLink).toBlocking().single();\n        return new PagedList<RouteFilterRuleInner>(response.body()) {\n            @Override\n            public Page<RouteFilterRuleInner> nextPage(String nextPageLink) {\n                return listByRouteFilterNextSinglePageAsync(nextPageLink).toBlocking().single().body();\n            }\n        };\n    }", "    public IAtom getAtom(int position) {\n        if (atoms == null) return null;\n        else return atoms[position];\n    }\n", "\tpublic ArrayType newArrayType(Type componentType) {\n\t\tArrayType result = new ArrayType(this);\n\t\tresult.setComponentType(componentType);\n\t\treturn result;\n\t}\n", "public void merge(RegistrySearchResponse other){\n  AssertUtil.assertNotNull(other,\"other\");\n  if (other.results != null) {\n    numResults+=other.numResults;\n    if (results == null) {\n      results=new ArrayList<Result>();\n    }\n    results.addAll(other.results);\n  }\n}\n", "public int search(Vector<TreeNode> vct,String target){\n  if (vct == null) {\n    return -1;\n  }\n  for (int i=0; i < vct.size(); i++) {\n    if (target.equals(vct.elementAt(i).value)) {\n      return i;\n    }\n  }\n  return -1;\n}\n", "@Override\n\tpublic boolean remove(Object o) {\n\t\tif (o != null && (o instanceof Number)) return removeByValue(((Number)o).intValue());\n\t\treturn false;\n\t}", "  public Iterator keyIterator() {\n    return map.keySet().iterator();\n  }\n", "public CStopTraceAction ( final JFrame parent , final IFrontEndDebuggerProvider debugger ) { m_parent = Preconditions . checkNotNull ( parent , STR_ ) ; m_debugger = Preconditions . checkNotNull ( debugger , STR_ ) ; putValue ( Action . NAME , STR_ ) ; putValue ( Action . SHORT_DESCRIPTION , STR_ ) ; putValue ( Action . SMALL_ICON , new ImageIcon ( STR_ ) ) ; }", "@Override\n    public DeleteVoiceConnectorTerminationResult deleteVoiceConnectorTermination(DeleteVoiceConnectorTerminationRequest request) {\n        request = beforeClientExecution(request);\n        return executeDeleteVoiceConnectorTermination(request);\n    }", "public int size(){\n  return nvPairs.size() >> 1;\n}\n", "public boolean isOptimizedDrawingEnabled ( ) { return BOOL_ ; }", "public void truncate(final long position){\n  final int index=index(position);\n  final int offset=offset(position);\n  final Block block=blocks.get(index);\n  this.index=index;\n  block.limit=offset;\n  current=block;\n}\n", "private int findSlotBefore ( Constant searchKey ) { int startSlot = NUM_ , endSlot = currentPage . getNumRecords ( ) - NUM_ ; int middleSlot = ( startSlot + endSlot ) / NUM_ ; if ( endSlot >= NUM_ ) { while ( middleSlot != startSlot ) { if ( getKey ( currentPage , middleSlot ) . compareTo ( searchKey ) < NUM_ ) startSlot = middleSlot ; else endSlot = middleSlot ; middleSlot = ( startSlot + endSlot ) / NUM_ ; } if ( getKey ( currentPage , endSlot ) . compareTo ( searchKey ) < NUM_ ) return endSlot ; else if ( getKey ( currentPage , startSlot ) . compareTo ( searchKey ) < NUM_ ) return startSlot ; else return startSlot - NUM_ ; } else return - NUM_ ; }", "  public Object getPKCS11ParamsObject() {\n    CK_RC2_CBC_PARAMS params = new CK_RC2_CBC_PARAMS();\n\n    params.ulEffectiveBits = effectiveBits_;\n    params.iv = initializationVector_;\n\n    return params ;\n  }\n", "private Variable defaultVariable() {\n\t\tASTNode copyFor = checkIfCopyNeeded(getNode());\n\t\tif(copyFor != null)\n\t\t\treturn targetVariable(copyFor);\n\n\t\t// unique target variable for this instruction\n\t\treturn createTemp(getNode());\n\t}", "private static void checkJavaPathSpaces(){\n  String javaHome=System.getProperty(\"java.home\");\n  if (javaHome.contains(\" \")) {\n    warn(\"Java installation path contains space characters!\");\n    warn(\"Hadoop client will not be able to start using '\" + javaHome + \"'.\");\n    warn(\"Please install JRE to path which does not contain spaces and point JAVA_HOME to that installation.\");\n  }\n}\n", "public static Writable encodeHex(final Byte[] data){\n  return encodeHex(DefaultTypeTransformation.convertToByteArray(data));\n}\n", "public String time2UtcStr(long time){\n  Date date=new Date(time);\n  return (utcDateFormat.format(date));\n}\n", "public void attachPanel(SpeechInputPanel speechPanel){\n  this.speechPanel=speechPanel;\n}", "    public char skipTo(char to) throws JSONException {\n        char c;\n        try {\n            long startIndex = this.index;\n            long startCharacter = this.character;\n            long startLine = this.line;\n            this.reader.mark(1000000);\n            do {\n                c = this.next();\n                if (c == 0) {\n                    this.reader.reset();\n                    this.index = startIndex;\n                    this.character = startCharacter;\n                    this.line = startLine;\n                    return c;\n                }\n            } while (c != to);\n        } catch (IOException exc) {\n            throw new JSONException(exc);\n        }\n\n        this.back();\n        return c;\n    }\n", "public boolean canContainKey ( Object key ) { return ( key instanceof RegistrarLease && registrarID . equals ( ( ( RegistrarLease ) key ) . getRegistrarID ( ) ) ) ; }", "public void load(ByteArrayBuffer buffer) throws IOException {\nsynchronized (this) {\n    Source classPath=getClassPath();\n    buffer.clear();\n    int retry=3;\n    for (int i=0; i < retry; i++) {\n      long length=-1;\n      try (InputStream is=classPath.inputStream()){\n        length=classPath.length();\n        long lastModified=classPath.getLastModified();\n        if (length < 0)         throw new IOException(\"class loading failed because class file '\" + classPath + \"' does not have a positive length.  Possibly the file has been overwritten\");\n        buffer.setLength((int)length);\n        int results=IoUtil.readAll(is,buffer.getBuffer(),0,(int)length);\n        if (results == length && length == classPath.length() && lastModified == classPath.getLastModified()) {\n          return;\n        }\n        log.warning(L.l(\"{0}: class file length mismatch expected={1} received={2}.  The class file may have been modified concurrently.\",this,length,results));\n      }\n     }\n  }\n}\n", "protected void layoutMajorAxis(int targetSpan,int axis,int[] offsets,int[] spans){\n  long preferred=0;\n  int n=getViewCount();\n  for (int i=0; i < n; i++) {\n    View v=getView(i);\n    spans[i]=(int)v.getPreferredSpan(axis);\n    preferred+=spans[i];\n  }\n  long desiredAdjustment=targetSpan - preferred;\n  float adjustmentFactor=0.0f;\n  int[] diffs=null;\n  if (desiredAdjustment != 0) {\n    long totalSpan=0;\n    diffs=new int[n];\n    for (int i=0; i < n; i++) {\n      View v=getView(i);\n      int tmp;\n      if (desiredAdjustment < 0) {\n        tmp=(int)v.getMinimumSpan(axis);\n        diffs[i]=spans[i] - tmp;\n      }\n else {\n        tmp=(int)v.getMaximumSpan(axis);\n        diffs[i]=tmp - spans[i];\n      }\n      totalSpan+=tmp;\n    }\n    float maximumAdjustment=Math.abs(totalSpan - preferred);\n    adjustmentFactor=desiredAdjustment / maximumAdjustment;\n    adjustmentFactor=Math.min(adjustmentFactor,1.0f);\n    adjustmentFactor=Math.max(adjustmentFactor,-1.0f);\n  }\n  int totalOffset=0;\n  for (int i=0; i < n; i++) {\n    offsets[i]=totalOffset;\n    if (desiredAdjustment != 0) {\n      float adjF=adjustmentFactor * diffs[i];\n      spans[i]+=Math.round(adjF);\n    }\n    totalOffset=(int)Math.min((long)totalOffset + (long)spans[i],Integer.MAX_VALUE);\n  }\n}\n", "public CronDefinitionBuilder and() {\n        cronDefinitionBuilder.register(new FieldDefinition(fieldName, constraints.createConstraintsInstance(), optional));\n        return cronDefinitionBuilder;\n    }", "protected abstract DiscreteCalcAndArguments assignCalcObjectDiscrete ( ) throws Exception ;", "@Memoized\n  Session session() {\n    Session result = sessionFactory().create(this);\n    provisioned = true;\n    return result;\n  }", "\tprivate void loadData() throws Exception {\n\n\t\tUserPK userPK = getKey();\n\t\tUser user = SecurityGate.getUser(userPK);\n\n\t\tloginField.setText(user.getLogin());\n\t\tnameField.setText(user.getName(Main.main.getLanguageHandle()));\n\t\ttitleField.setText(user.getTitle(Main.main.getLanguageHandle()));\n\n\t\tpasswordField.setText(DUMMY_PASSWORD);\n\t\tconfirmField.setText(DUMMY_PASSWORD);\n\n\t\tblockedCheckBox.setSelected(user.getBlocked());\n\t\tchangePasswordCheckBox.setSelected(user.getChangePassword());\n\n\t\tphoneField.setText(user.getPhone());\n\t\temailField.setText(user.getEmail());\n\t}\n", "    public void addAttribute(INumberImage image) {\n        if (attributes.containsKey(image))\n            return;\n        String alias = image.getAlias();\n\n        if (alias == null) {\n            alias = image.getName();\n        }\n        NumberImageViewer viewer = new NumberImageViewer();\n        viewer.setModel(image);\n\n        attributes.put(image, viewer);\n        addTab(alias, new ImageIcon(getClass().getResource(\n                \"/fr/esrf/tangoatk/widget/icons/numberimage.gif\")), viewer,\n                image.getName());\n\n    }\n", "\tpublic void setValue(Blob field) throws SQLException {\n\t\tif (field != null) {\n\t\t\t_ps.setBlob(_ind, field);\n\t\t} else {\n\t\t\t_ps.setNull(_ind, Types.BLOB);\n\t\t}\n\t\t_ind++;\n\t}\n", "public static void registerMBean(Object mbean,Class<?> mbeanInterface,String mbeanName,boolean ignored){\n  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();\n  try {\n    if (logger.isDebugEnabled())     logger.debug(\"Registering mbean: \" + mbean.getClass());\n    ObjectName name=generateMBeanObjectName(mbeanInterface.getName(),mbeanName);\n    if (mbs.isRegistered(name))     mbs.unregisterMBean(name);\n    mbs.registerMBean(mbean,name);\n  }\n catch (  Exception e) {\n    throw new ServerRuntimeException(\"Unable to register mbean: class=\" + mbean.getClass() + \" interface=\"+ mbeanInterface+ \" name=\"+ mbeanName,e);\n  }\n}\n", "@Action(\n            semantics = SemanticsOf.IDEMPOTENT\n    )\n    public PublishedCustomer removeOrder(final Order order) {\n        getOrders().remove(order);\n        repositoryService.remove(order);\n        return this;\n    }", "public static EntropyCalculatorDiscrete newInstance ( int blocksize , int base ) { return new BlockEntropyCalculatorDiscrete ( blocksize , base ) ; }", "private final byte[] zeroExtend(byte[] dataToPad) {\n        assert null != dataToPad;\n\n        final int targetLength = 4;\n\n        if (targetLength <= dataToPad.length)\n            return dataToPad;\n\n        byte padded[] = new byte[targetLength];\n\n        for (int i = 0; i < dataToPad.length; i++)\n            padded[i] = dataToPad[i];\n\n        for (int i = dataToPad.length; i < padded.length; i++)\n            padded[i] = (byte)0;\n\n        return padded;\n    }", "    public void datasetChanged(DatasetChangeEvent event) {\n        fireDatasetChanged(new DatasetChangeInfo());\n        //TODO: fill in real change info\n    }\n", "public void processAckExpected(long stamp)\n  {\n    if (tc.isEntryEnabled())\n      SibTr.entry(tc, \"processAckExpected\", new Object[] { new Long(stamp)});\n\n    synchronized (this)\n    {\n      // Send Ack message for ticks up to iack\n      sendAck();\n\n      // Send Nack message for ticks between iack and stamp\n      if (stamp > iack)\n      {\n        try\n        {\n          upControl.sendNackMessage(\n            null,\n            null,\n            null,\n            iack+1,\n            stamp,\n            priority,\n            reliability,\n            streamID);\n        }\n        catch (SIResourceException e)\n        {\n          // FFDC\n          FFDCFilter.processException(\n            e,\n            \"com.ibm.ws.sib.processor.gd.InternalInputStream.processAckExpected\",\n            \"1:379:1.42\",\n            this);\n\n          SibTr.exception(tc, e);\n          SibTr.error(tc, \"INTERNAL_MESSAGING_ERROR_CWSIP0002\",\n            new Object[] {\n              \"com.ibm.ws.sib.processor.gd.InternalInputStream\",\n              \"1:386:1.42\",\n              e });\n\n          if (tc.isEntryEnabled())\n            SibTr.exit(tc, \"processAckExpected\", e);\n\n          throw new SIErrorException(\n            nls.getFormattedMessage(\n             \"INTERNAL_MESSAGING_ERROR_CWSIP0002\",\n             new Object[] {\n               \"com.ibm.ws.sib.processor.gd.InternalInputStream\",\n               \"1:397:1.42\",\n               e },\n             null),\n            e);\n        }   \n      }\n    }\n\n    if (tc.isEntryEnabled())\n      SibTr.exit(tc, \"processAckExpected\");\n  }", "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>();\n  newVector.addElement(new Option(\"\\tSpecify list of columns to copy. First and last are valid\\n\" + \"\\tindexes. (default first-last)\",\"R\",1,\"-R <index1,index2-index4,...>\"));\n  return newVector.elements();\n}\n", "private void writeObject(ObjectOutputStream out) throws IOException {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(this, tc, \"writeObject\", out);\n    throw new NotSerializableException(\"TemporaryTopic\");\n  }", "private boolean fitsAsSingleLine ( int col ) { return ( col + singleLineWidth ( ) <= PcalTLAGen . wrapColumn ) || ( bodyFormulas . sf == null && ( prcdFormulas == null || prcdFormulas . size ( ) == NUM_ ) ) ; }", "public int peekErrorErrno ( ) { return ( byteBuffer [ ERROR_NUMBER_OFFSET ] & NUM_ ) | ( ( byteBuffer [ ERROR_NUMBER_OFFSET + NUM_ ] & NUM_ ) << NUM_ ) ; }", "public void addEventManager(String clazz) {\n\n        try {\n            m_eventManager = (CmsEventManager)Class.forName(clazz).newInstance();\n            if (CmsLog.INIT.isInfoEnabled()) {\n                CmsLog.INIT.info(\n                    Messages.get().getBundle().key(Messages.INIT_EVENTMANAGER_CLASS_SUCCESS_1, m_eventManager));\n            }\n        } catch (Throwable t) {\n            LOG.error(Messages.get().getBundle().key(Messages.INIT_EVENTMANAGER_CLASS_INVALID_1, clazz), t);\n            return;\n        }\n    }", "private synchronized boolean addProvisionedSlave(DockerSlaveTemplate template) throws Exception {\n  final DockerContainerLifecycle dockerCreateContainer=template.getDockerContainerLifecycle();\n  String dockerImageName=dockerCreateContainer.getImage();\n  int templateCapacity=template.getMaxCapacity();\n  int estimatedTotalSlaves=countCurrentDockerSlaves(null);\n  int estimatedAmiSlaves=countCurrentDockerSlaves(template);\nsynchronized (provisionedImages) {\n    int currentProvisioning=0;\n    if (provisionedImages.containsKey(template)) {\n      currentProvisioning=provisionedImages.get(template);\n    }\n    for (    int amiCount : provisionedImages.values()) {\n      estimatedTotalSlaves+=amiCount;\n    }\n    estimatedAmiSlaves+=currentProvisioning;\n    if (estimatedTotalSlaves >= getContainerCap()) {\n      LOG.info(\"Not Provisioning '{}'; Server '{}' full with '{}' container(s)\",dockerImageName,name,getContainerCap());\n      return false;\n    }\n    if (templateCapacity != 0 && estimatedAmiSlaves >= templateCapacity) {\n      LOG.info(\"Not Provisioning '{}'. Instance limit of '{}' reached on server '{}'\",dockerImageName,templateCapacity,name);\n      return false;\n    }\n    LOG.info(\"Provisioning '{}' number '{}' on '{}'; Total containers: '{}'\",dockerImageName,estimatedAmiSlaves,name,estimatedTotalSlaves);\n    provisionedImages.put(template,currentProvisioning + 1);\n    return true;\n  }\n}\n", "void removeListener ( IFunctionListener < IComment > listener ) ;", "public MainLayoutPanel(Layout initialLayout,boolean revealOption,Window parent){\n  this.revealOption=revealOption;\n  this.parent=parent;\n  layoutParameterReveal=new DropDownTriangle(UpDirection.LEFT,false,\"Settings\",\"Settings\",parent);\n  layoutCb.setSelectedItem(initialLayout.getDescription());\n  layoutPanel=panelMap.get(initialLayout.getDescription());\n  layoutPanel.setNeuronLayout(initialLayout);\n  initializeLayout();\n  addListeners();\n}\n", "private void handleTextBlock(TextCursor cursor,int blockEnd,ArrayList<MDSection> paragraphs){\n  MDText[] spans=handleSpans(cursor,blockEnd);\n  paragraphs.add(new MDSection(spans));\n  cursor.currentOffset=blockEnd;\n}\n", "public synchronized void notifyDisconnected(String title){\n  connectedServerTitles.remove(title);\n  updateNotification(getString(R.string.notification_disconnected,title),null,false,false,false);\n}\n", "    private void checkMagnification(long magnification) throws Exception {\n\n        documentWriterOptions.setMagnification(magnification);\n        documentWriter =\n                new DviDocumentWriter(configuration, documentWriterOptions);\n        ((SingleDocumentStream) documentWriter).setOutputStream(outputStream);\n        FixedCount[] pageNo = null;\n        documentWriter.shipout(new PageImpl(nodeList, pageNo));\n    }\n", "public <E extends Exception> boolean anyMatch(Try.CharPredicate<E> filter) throws E {\n        return anyMatch(0, size(), filter);\n    }", "public void setCacheContainerPage(String key, CmsXmlContainerPage containerPage, boolean online) {\n\n        try {\n            m_lock.writeLock().lock();\n            //System.out.println(\"caching page:\" + containerPage.getFile().getRootPath());\n\n            if (online) {\n                m_containerPagesOnline.put(key, containerPage);\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\n                        Messages.get().getBundle().key(\n                            Messages.LOG_DEBUG_CACHE_SET_ONLINE_2,\n                            new Object[] {key, containerPage}));\n                }\n            } else {\n                m_containerPagesOffline.put(key, containerPage);\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\n                        Messages.get().getBundle().key(\n                            Messages.LOG_DEBUG_CACHE_SET_OFFLINE_2,\n                            new Object[] {key, containerPage}));\n                }\n            }\n        } finally {\n            m_lock.writeLock().unlock();\n        }\n    }", "private boolean isEditable ( ) { return comboBox . isEditable ( ) ; }", "void warning(String key,Locator locator) throws SAXException {\n  if (eh == null)   return;\n  eh.warning(new SAXParseException(localizer.message(key),locator));\n}\n", "protected void writeHeader()\n\t\tthrows ConfigurationException, IOException\n\t{\n\n\t\tif (this.output != null) {\n\t\t\tclose();\n\t\t}\n\n\t\tthis.counter++;\n\n\t\tString filePath = PATH_OUTPUT_SQL_FILES + this.outputName +\"_\"+counter;\n\n\t\tthis.output = OutputFactory.getOutputStream(filePath);\n\n\t\t// System.out.println(filePath);\n\t\tSQLConsumerLogMessages.logFileCreation(logger, filePath);\n\n\t\tthis.sqlArchive = new File(filePath);\n\n\t\tString[] revTable = this.sqlEncoder.getTable();\n\t\tfor (String sTable : revTable) {\n\t\t\tString curLine = sTable + \"\\r\\n\";\n\t\t\tbyte[] bytes = curLine.getBytes(WIKIPEDIA_ENCODING);\n\t\t\tthis.output.write(bytes);\n\t\t}\n\n\t\tthis.output.flush();\n\t}", "public Calculable ( String id , double value ) { setId ( id ) ; setValue ( value ) ; setWhen ( System . currentTimeMillis ( ) ) ; }", "public static boolean isClassfile(final String path) {\n        final int len = path.length();\n        return len > 6 && path.regionMatches(true, len - 6, \".class\", 0, 6);\n    }", "  public void setSelection(int _x1, int _y1, int _x2, int _y2) {\n\n    if (selectionEnabled) {\n\n      x1 = _x1;\n      y1 = _y1;\n      x2 = _x2;\n      y2 = _y2;\n\n      clipSelection();\n      isDragging = false;\n      repaint();\n\n    }\n\n  }\n", "@BetaApi\n  public final Operation expandIpCidrRangeSubnetwork(\n      ProjectRegionSubnetworkName subnetwork,\n      SubnetworksExpandIpCidrRangeRequest subnetworksExpandIpCidrRangeRequestResource) {\n\n    ExpandIpCidrRangeSubnetworkHttpRequest request =\n        ExpandIpCidrRangeSubnetworkHttpRequest.newBuilder()\n            .setSubnetwork(subnetwork == null ? null : subnetwork.toString())\n            .setSubnetworksExpandIpCidrRangeRequestResource(\n                subnetworksExpandIpCidrRangeRequestResource)\n            .build();\n    return expandIpCidrRangeSubnetwork(request);\n  }", "public EffectLayer(int duration){\n  this.duration=duration;\n  timestamp=System.currentTimeMillis();\n}\n", "protected void removeDependency(Service service) {\r\n        assertDuringInitialization();\r\n        LOG.info(\"Service {} is not dependent on {}\", this, service);\r\n        if (!dependsOn.remove(service))\r\n            LOG.warn(\"Service {} asked to remove dependency on {}, but wasn't dependendent on it\", getName(), service.getName());\r\n    }", "    public int unpin() {\n        pin_cnt = (pin_cnt > 0) ? pin_cnt - 1 : 0;\n        return pin_cnt;\n    }\n", "public Crud<T, K> table(Connection connection, String table) throws SQLException {\n        CrudMeta crudMeta = CrudMeta.of(connection, table, jdbcMapperFactory.columnDefinitions());\n        return CrudFactory.<T, K>newInstance(target, keyTarget, crudMeta, jdbcMapperFactory);\n    }", "    private void printProperties() {\n\tprops.list(System.out);\n    }\n", "public List<Page> getPages(List<String> titleList) throws Exception {\n    String rvprop = \"content|ids|timestamp\";\n    List<Page> result = this.getPages(titleList, rvprop);\n    return result;\n  }", "public String[] list() throws IOException {\n  ArrayList<String> list=new ArrayList<String>();\n  String pathname=_pathname;\n  if (pathname.startsWith(\"/\"))   pathname=\".\" + pathname;\n  ArrayList<PathImpl> pathList=((MergePath)_root)._pathList;\n  for (int i=0; i < pathList.size(); i++) {\n    PathImpl path=pathList.get(i);\n    path=path.lookup(pathname);\n    if (path.isDirectory()) {\n      String[] subList=path.list();\n      for (int j=0; subList != null && j < subList.length; j++) {\n        if (!list.contains(subList[j]))         list.add(subList[j]);\n      }\n    }\n  }\n  return (String[])list.toArray(new String[list.size()]);\n}\n", "@Override public void accept(Object source,Throwable t){\n  if (job == null)   throw new IllegalStateException(\"A job has not been instantiated\");\n  if (t != null) {\n    Executable.this.setLastError(t);\n    job.updateHealth(t);\n    cleanup();\n  }\n else   if (job.getCurrentState() == Job.State.RUNNING && (source == userScheduler || source == userThreads) && !hasActiveTasks()) {\n    logger.info(\"No more active user tasks\");\n  }\n  notifyCompleter();\n}\n", "    public void setB1(Object _b1) {\n        b1 = _b1;\n    }\n", "private static int getBlockLength(String text, int offset)\n   {\n      int startIndex = offset;\n      boolean finished = false;\n      char c;\n\n      while (finished == false)\n      {\n         c = text.charAt(offset);\n         switch (c)\n         {\n            case '\\r':\n            case '\\n':\n            case '}':\n            {\n               finished = true;\n               break;\n            }\n\n            default:\n            {\n               ++offset;\n               break;\n            }\n         }\n      }\n\n      int length = offset - startIndex;\n\n      return (length);\n   }", "public Builder sourceIs(Source... source){\n  verifyNotNull(source);\n  expressions.add(new EventFilterExpression.SourceIs(source));\n  return this;\n}\n", "    public void endCDATA() throws SAXException {\n        inCDATA = false;\n    }\n", "public static String capitalize ( String name ) { return MetaClassHelper . capitalize ( name ) ; }", "private CGlobalSettings ( ) { }", "public static WApplication instance(final WComponent base) {\n\t\tWApplication appl = WebUtilities.getClosestOfClass(WApplication.class, base);\n\t\treturn appl;\n\t}", "public static String createFailReasonString ( String target , String message ) { String fail = target == null ? message : format ( STR_ , target , message ) ; return trimToMaxLength ( fail , MAX_REASON_LENGTH ) ; }", "byte [ ] encrypt ( byte [ ] b ) ;", "public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {\n  if ((inOff + blockSize) > in.length) {\n    throw new DataLengthException(\"input buffer too short\");\n  }\n  if ((outOff + blockSize) > out.length) {\n    throw new DataLengthException(\"output buffer too short\");\n  }\n  cipher.processBlock(ofbV,0,ofbOutV,0);\n  for (int i=0; i < blockSize; i++) {\n    out[outOff + i]=(byte)(ofbOutV[i] ^ in[inOff + i]);\n  }\n  System.arraycopy(ofbV,blockSize,ofbV,0,ofbV.length - blockSize);\n  System.arraycopy(ofbOutV,0,ofbV,ofbV.length - blockSize,blockSize);\n  return blockSize;\n}\n", "private Key makeKey(final IBindingSet bset){\n  final IConstant<?>[] vals=new IConstant<?>[keyVars.length];\n  for (int i=0; i < keyVars.length; i++) {\n    final IVariable<?> v=keyVars[i];\n    vals[i]=bset.get(v);\n  }\n  int h=ONE;\n  for (int i=0; i < keyVars.length; i++) {\n    final IVariable<?> v=keyVars[i];\n    final IConstant<?> c=vals[i];\n    if (c == null) {\n      if (!indexSolutionsHavingUnboundJoinVars) {\n        if (log.isDebugEnabled())         log.debug(\"Join variable is not bound: var=\" + v + \", solution=\"+ bset);\n        return null;\n      }\n      continue;\n    }\n    h=31 * h + c.hashCode();\n  }\n  if (log.isTraceEnabled())   log.trace(\"hashCode=\" + h + \", joinVars=\"+ Arrays.toString(keyVars)+ \" : \"+ bset);\n  return new Key(h,vals);\n}\n", "public AuditDetails ( ) { InetAddress localHost = SystemInfo . singleton ( ) . network ( ) . getHost ( ) ; host = localHost . getHostName ( ) + STR_ + localHost . getHostAddress ( ) ; }", "    public boolean isMarkSeen() {\n        return fieldMarkSeen;\n    }\n", "void addListener ( IFunctionListener < IComment > listener ) ;", "private static String joinPath(String path1,String path2){\n  File file1=new File(path1);\n  File file2=new File(file1,path2);\n  return file2.getPath();\n}\n", "    public void onQueryComplete(int token, Object cookie, CallerInfo ci){\n        if (DBG) log(\"callerinfo query complete, updating ui.\");\n\n        ((RemoteViews) cookie).setTextViewText(R.id.text2, \n                PhoneUtils.getCompactNameFromCallerInfo(ci, mContext));\n    }\n", "\tpublic String getMatcherPattern() {\n\t\tString result = wrapInBrackets(RESOURCE_NAME_REGEX); \n\t\treturn result;\n\t}\n", "protected void writeStringLiteral(String value, StringBuilder out) {\n    out.append('\\'').append(escapeOutputString(value)).append('\\'');\n  }", "boolean isAccountValid(AMIdentity amIdentity){\n  boolean userEnabled=true;\n  try {\n    String userActive=amIdentity.isActive() ? USER_ACTIVE : USER_INACTIVE;\n    Map<String,Set<String>> attrs=amIdentity.getAttributes(asSet(LOGIN_STATUS_ATTR,NSACCOUNTLOCK_ATTR));\n    String loginStatus=CollectionHelper.getMapAttr(attrs,LOGIN_STATUS_ATTR);\n    if (loginStatus == null || loginStatus.isEmpty()) {\n      loginStatus=USER_ACTIVE;\n    }\n    String nsAccountVal=CollectionHelper.getMapAttr(attrs,NSACCOUNTLOCK_ATTR);\n    if (nsAccountVal == null || nsAccountVal.isEmpty()) {\n      nsAccountVal=FALSE_VALUE;\n    }\n    if (DEBUG.messageEnabled()) {\n      DEBUG.message(\"inetuserstatus : \" + userActive);\n      DEBUG.message(\"loginStatus : \" + loginStatus);\n      DEBUG.message(\"nsAccountLockVal : \" + nsAccountVal);\n    }\n    userEnabled=userActive.equalsIgnoreCase(USER_ACTIVE) && loginStatus.equalsIgnoreCase(USER_ACTIVE) && nsAccountVal.equalsIgnoreCase(FALSE_VALUE);\n  }\n catch (  Exception e) {\n    if (DEBUG.messageEnabled()) {\n      DEBUG.message(\"isAccountValid:Error :\" + e.toString());\n    }\n  }\n  if (DEBUG.messageEnabled()) {\n    DEBUG.message(\"User enabled...\" + userEnabled);\n  }\n  return userEnabled;\n}\n", "public void sort(DTMIterator v, Vector keys, XPathContext support)\n          throws javax.xml.transform.TransformerException\n  {\n\n    m_keys = keys;\n\n    // QuickSort2(v, 0, v.size() - 1 );\n    int n = v.getLength();\n\n    // %OPT% Change mergesort to just", "public synchronized void addMessage(String line,boolean action){\n  addLine(new TextMessage(System.currentTimeMillis(),line,action));\n  numberOfMessages++;\n  lastMessage=System.currentTimeMillis();\n}\n", "public static CharSequence downloadViaHttp ( String uri , ContentType type ) throws IOException { return downloadViaHttp ( uri , type , Integer . MAX_VALUE ) ; }", "@Override\n    public void setGeneratedColumnInfo(int generate, ResultMetaData meta) {\n\n        // can support INSERT_SELECT also\n        if (type != StatementTypes.INSERT) {\n            return;\n        }\n\n        int colIndex = baseTable.getIdentityColumnIndex();\n\n        if (colIndex == -1) {\n            return;\n        }\n\n        switch (generate) {\n\n            case ResultConstants.RETURN_NO_GENERATED_KEYS :\n                return;\n\n            case ResultConstants.RETURN_GENERATED_KEYS_COL_INDEXES :\n                int[] columnIndexes = meta.getGeneratedColumnIndexes();\n\n                if (columnIndexes.length != 1) {\n                    return;\n                }\n\n                if (columnIndexes[0] != colIndex) {\n                    return;\n                }\n\n            // $FALL-THROUGH$\n            case ResultConstants.RETURN_GENERATED_KEYS :\n                generatedIndexes = new int[]{ colIndex };\n                break;\n\n            case ResultConstants.RETURN_GENERATED_KEYS_COL_NAMES :\n                String[] columnNames = meta.getGeneratedColumnNames();\n\n                if (columnNames.length != 1) {\n                    return;\n                }\n\n                if (baseTable.findColumn(columnNames[0]) != colIndex) {\n                    return;\n                }\n\n                generatedIndexes = new int[]{ colIndex };\n                break;\n        }\n\n        generatedResultMetaData =\n            ResultMetaData.newResultMetaData(generatedIndexes.length);\n\n        for (int i = 0; i < generatedIndexes.length; i++) {\n            ColumnSchema column = baseTable.getColumn(generatedIndexes[i]);\n\n            generatedResultMetaData.columns[i] = column;\n        }\n\n        generatedResultMetaData.prepareData();\n    }", "\tprivate Object readResolve() throws java.io.ObjectStreamException {\n\t\treturn NewsCategory.fromInteger(this.value);\n\t}\n", "@Override\n    public AnnotationVisitor visitAnnotation(String targetMethodName, String annotationClassDescription) {\n        if (tc.isDebugEnabled()) {\n            Tr.debug(tc, MessageFormat.format(\"visitAnnotation [ {0} ] Annotation Class [ {1} ] Description [ 2 ]\",\n                                              getHashText(), targetMethodName, annotationClassDescription));\n        }\n\n        Type annotationType = Type.getType(annotationClassDescription);\n        String annotationClassName = annotationType.getClassName();\n\n        AnnotationInfoImpl newAnnotationInfo = new AnnotationInfoImpl(annotationClassName, infoStore);\n\n        AnnotationValueImpl newAnnotationValue = new AnnotationValueImpl(newAnnotationInfo);\n\n        storeAnnotationValue(targetMethodName, newAnnotationValue);\n\n        return new InfoVisitor_Annotation.AnnotationInfoVisitor(newAnnotationInfo);\n    }", "public static TypeReference newExceptionReference ( int exceptionIndex ) { return new TypeReference ( ( THROWS << NUM_ ) | ( exceptionIndex << NUM_ ) ) ; }", "public static double distance(Point p1,Point p2){\n  return distance(Math.abs(p2.x - p1.x),Math.abs(p2.y - p1.y));\n}\n", "public static MjdbcLogger getLogger(Class clazz) {\n        MjdbcLogger mjdbcLogger = new MjdbcLogger(clazz.getName(), null);\n\n        if (isSLF4jAvailable() == true) {\n            try {\n                mjdbcLogger = new MjdbcLogger(clazz.getName(), null);\n                mjdbcLogger.setSlfLogger(MappingUtils.invokeStaticFunction(Class.forName(\"org.slf4j.LoggerFactory\"), \"getLogger\", new Class[]{Class.class}, new Object[]{clazz}));\n            } catch (MjdbcException e) {\n                setSLF4jAvailable(false);\n            } catch (ClassNotFoundException e) {\n                setSLF4jAvailable(false);\n            }\n        }\n\n        return mjdbcLogger;\n    }", "public static boolean makeDirsIfNeeded(File dir){\n  return dir.exists() || dir.mkdirs();\n}\n", "void refreshFromDataStore() throws PolicyException {\n  Node xmlRootNode=null;\n  try {\n    xmlRootNode=resourceManager.getXMLRootNode(resourceType.getName());\n  }\n catch (  Exception e) {\n    DEBUG.error(\"Error reading resource index from data store \",e);\n    throw new PolicyException(ResBundleUtils.rbName,\"error_reading_resource_index_from_data_store\",null,e);\n  }\n  if (xmlRootNode != null) {\n    Set topIndexEntryNodeSet=XMLUtils.getChildNodes(xmlRootNode,PolicyManager.POLICY_INDEX_REFERENCE_NODE);\n    Iterator topIndexEntryNodes=topIndexEntryNodeSet.iterator();\n    while (topIndexEntryNodes.hasNext()) {\n      Node topIndexEntryNode=(Node)topIndexEntryNodes.next();\n      String resourceName=XMLUtils.getNodeAttributeValue(topIndexEntryNode,PolicyManager.POLICY_INDEX_REFERENCE_NODE_NAME_ATTR);\n      Set policyNames=getPolicyNames(topIndexEntryNode);\n      ResourceIndexEntry rie=new ResourceIndexEntry(resourceName,policyNames);\n      topLevelEntries.add(rie);\n      Set indexEntryNodeSet=XMLUtils.getChildNodes(topIndexEntryNode,PolicyManager.POLICY_INDEX_REFERENCE_NODE);\n      Iterator indexEntryNodes=indexEntryNodeSet.iterator();\n      while (indexEntryNodes.hasNext()) {\n        Node indexEntryNode=(Node)indexEntryNodes.next();\n        processIndexEntryNode(rie,indexEntryNode);\n      }\n    }\n  }\n}\n", "private static final int getUnicodeStringLengthInBytes(byte[] data, int offset)\n   {\n      int result;\n      if (data == null || offset >= data.length)\n      {\n         result = 0;\n      }\n      else\n      {\n         result = data.length - offset;\n\n         for (int loop = offset; loop < (data.length - 1); loop += 2)\n         {\n            if (data[loop] == 0 && data[loop + 1] == 0)\n            {\n               result = loop - offset;\n               break;\n            }\n         }\n      }\n      return result;\n   }", "public JBBPTextWriter Close() throws IOException {\n  for (  final Extra e : extras) {\n    e.onClose(this);\n  }\n  super.close();\n  return this;\n}\n", "public static boolean isClaimable(final NamespaceId namespaceId){\n  NamespaceId current=namespaceId;\n  do {\n    if (NAMESPACE_ID_PARTS.contains(current.getLastPart())) {\n      return false;\n    }\n    current=current.getParent();\n  }\n while (null != current);\n  return true;\n}\n", "    public LongSequence insert(int offset, long value) {\n        if (offset == pos) {\n            add(value);\n            return this;\n        }\n        ensureCapacity(pos + 1);\n        // shift right\n        System.arraycopy(data, offset, data, offset + ", "public List<Jid> getOccupiedRooms(DomainBareJid mucLightService)\n            throws NoResponseException, XMPPErrorException, NotConnectedException, InterruptedException {\n        DiscoverItems result = ServiceDiscoveryManager.getInstanceFor(connection()).discoverItems(mucLightService);\n        List<DiscoverItems.Item> items = result.getItems();\n        List<Jid> answer = new ArrayList<>(items.size());\n\n        for (DiscoverItems.Item item : items) {\n            Jid mucLight = item.getEntityID();\n            answer.add(mucLight);\n        }\n\n        return answer;\n    }", "public static Level forName(final String name, final int intValue) {\n        final Level level = LEVELS.get(name);\n        if (level != null) {\n            return level;\n        }\n        try {\n            return new Level(name, intValue);\n        } catch (final IllegalStateException ex) {\n            // The level was added by something else so just return that one.\n            return LEVELS.get(name);\n        }\n    }", "private void createShareMap(HashSet<UnManagedSMBFileShare> unManagedSMBFileShareHashSet,UnManagedSMBShareMap unManagedSMBShareMap,String addr,String nativeid){\n  UnManagedSMBFileShare newUnManagedSMBFileShare=null;\n  if (unManagedSMBFileShareHashSet != null && !unManagedSMBFileShareHashSet.isEmpty()) {\n    for (    UnManagedSMBFileShare unManagedSMBFileShare : unManagedSMBFileShareHashSet) {\n      String mountPoint=\"\\\\\\\\\" + addr + \"\\\\\"+ unManagedSMBFileShare.getName();\n      newUnManagedSMBFileShare=new UnManagedSMBFileShare(unManagedSMBFileShare.getName(),unManagedSMBFileShare.getDescription(),FileControllerConstants.CIFS_SHARE_PERMISSION_TYPE_ALLOW,FileControllerConstants.CIFS_SHARE_PERMISSION_CHANGE,unManagedSMBFileShare.getMaxUsers(),mountPoint);\n      newUnManagedSMBFileShare.setNativeId(nativeid);\n      newUnManagedSMBFileShare.setPath(nativeid);\n      unManagedSMBShareMap.put(unManagedSMBFileShare.getName(),newUnManagedSMBFileShare);\n      _logger.info(\"New SMB share name: {} has mount point: {}\",unManagedSMBFileShare.getName(),mountPoint);\n    }\n  }\n}\n", "   private String getRelative(char[] text, int off, int len){\n      int size = path.len - len + 1; /* '/' */\n      int pos = path.off + len - 1;\n\n      for(int i = 0; i < len; i++){\n         if(text[off++] != buf[path.off+i]){\n            return null;\n         }\n      }\n      if(pos < 0) { /* ../ */\n         return null;\n      } \n      return new String(buf,pos,size);\n   }\n", "    public void setButtons(boolean visible) {\n        super.setButtons(visible);\n\n        if (_startButton == null) {\n            _startButton = new JButton(\"start\");\n            _startButton.addActionListener(new StartButtonListener());\n            add(_", "\tprotected boolean importResources(List fileSystemObjects) {\n\t\tfor(Object o : fileSystemObjects) {\n\t\t\tif(o instanceof File) {\n\t\t\t\tif(!StringUtilities.isValidResourceName(((File)o).getName())) {\n\t\t    \t\tStudioMessageDialog.openWarning(StudioPlugin.getShell(),\n\t\t    \t\t\t\t\"Import Audio\",\n\t\t    \t\t\t\t\"The file you are trying to import contains non-latin characters. Please rename the file and try again.\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tStudioResourceImportOperation operation = new StudioResourceImportOperation(\n\t\t\tgetContainerFullPath(),\n\t\t\tgetSourceDirectory(),\n\t\t\tAudioFileSystemStructureProvider.INSTANCE,\n\t\t\tthis,\n\t\t\tfileSystemObjects);\n\t\t\t\n\t\toperation.setContext(getShell());\t \n\t\treturn executeImportOperation(operation);\n\t}\t\n", "private BitSet findPreviouslyDeadBlocks ( ) throws DataflowAnalysisException , CFGBuilderException { BitSet deadBlocks = new BitSet ( ) ; ValueNumberDataflow vnaDataflow = classContext . getValueNumberDataflow ( method ) ; for ( Iterator < BasicBlock > i ", "public void terminateJob(String jobId, String terminateReason) throws BatchErrorException, IOException {\n        terminateJob(jobId, terminateReason, null);\n    }", "public void dumpBinary(ByteBuffer bb) throws IOException {\n  bb.putInt(frameData.length);\n  for (int i=0; i < frameData.length; i++) {\n    bb.putShort(frameData[i]);\n  }\n  bb.putInt(residualData.length);\n  bb.put(residualData);\n}\n", "private void updateCheckedListPanel ( ) { m_checkedList . removeListSelectionListener ( m_updateListener ) ; m_checkedListPanel . removeAll ( ) ; m_checkedList = new JCheckedListbox < > ( getDebuggerVector ( ) , BOOL_ ) ; m_checkedList . addListSelectionL", "public CFunctionSelectionPanel ( final IDatabase database , final IActionProvider actionProvider ) { super ( new BorderLayout ( ) ) ; Preconditions . checkNotNull ( database , STR_ ) ; Preconditions . checkNotNull ( actionProvider , STR_ ) ; m_tree = new CFunctionSelectionTree ( database , actionProvider ) ; add ( m_tree ) ; }", "public Set<Map.Entry<K,V>> entrySet()\n  {\n    if (TraceComponent.isAnyTracingEnabled() && _tc.isEntryEnabled()) SibTr.entry(this, _tc, \"entrySet\");\n    \n    UnsupportedOperationException uoe = new UnsupportedOperationException();\n    \n    if (TraceComponent.isAnyTracingEnabled() && _tc.isEntryEnabled()) SibTr.exit(this, _tc, \"entrySet\", uoe);\n    throw uoe;\n  }", "private static String getFixedPathname(final String pathname) {\n        if (pathname == null || m_voltFilePrefix == null) {\n            return pathname;\n        }\n        if (pathname.contains(m_magic)) {\n            if (pathname.contains(m_voltFilePrefix.getAbsolutePath())) {\n                return pathname;\n            }\n\n            int offset = pathname.indexOf(m_magic) + m_magic.length();\n            String relativePath = pathname.substring(offset);\n            // The this is probably a snapshot path and needs to be re-mapped to our snapshot\n            // directory because truncation snapshot requests specify absolute paths\n            return m_voltFilePrefix.getAbsolutePath() + relativePath;\n        }\n\n        return m_voltFilePrefix + File.separator + pathname;\n    }", "public boolean isTopLevelMenu() {\n\t\tMenuContainer container = WebUtilities.getAncestorOfClass(MenuContainer.class, this);\n\t\tif (container instanceof WMenuItemGroup) {\n\t\t\tcontainer = WebUtilities.getAncestorOfClass(MenuContainer.class, container);\n\t\t}\n\t\treturn container instanceof WMenu;\n\t}", "public void reloadRosterFile(){\n  _list.clear();\n  try {\n    _instance.readFile(defaultNceConsistRosterFilename());\n  }\n catch (  Exception e) {\n    log.error(\"Exception during ConsistRoster reading: \" + e);\n  }\n}\n", "public GenericGF ( int primitive , int size , int b ) { this . primitive = primitive ; this . size = size ; this . generatorBase = b ; expTable = new int [ size ] ; logTable = new int [ size ] ; int x = NUM_ ; for ( int i = NUM_ ; i < size ; i ++ ) { expTable [ i ] = x ; x *= NUM_ ; if ( x >= size ) { x ^= primitive ; x &= size - NUM_ ; } } for ( int i = NUM_ ; i < size - NUM_ ; i ++ ) { logTable [ expTable [ i ] ] = i ; } zero = new GenericGFPoly ( this , new int [ ] { NUM_ } ) ; one = new GenericGFPoly ( this , new int [ ] { NUM_ } ) ; }", "public static <T extends java.util.Date> T addWeeks(final T date, final int amount) {\r\n        return roll(date, amount, CalendarUnit.WEEK);\r\n    }", "public static SourceAddressAttribute createSourceAddressAttribute ( TransportAddress address ) { SourceAddressAttribute attribute = new SourceAddressAttribute ( ) ; attribute . setAddress ( address ) ; return attribute ; }", "private Set<StoragePort> reduceStoragePortMap(Map<String,Set<StoragePort>> map){\n  Set<StoragePort> set=new HashSet<StoragePort>();\n  for (  Set<StoragePort> aSet : map.values()) {\n    set.addAll(aSet);\n  }\n  return set;\n}\n", "    @Test public void numFields() {\n        int[] lengths = new int[] { 1, 2, 1000 };\n\n        for (int len : lengths) {\n            TupleDesc td = Utility.getTupleDesc(len);\n            assertEquals(len, td.numFields());\n        }\n    }\n", "public String crop ( String uri ) { if ( ! belongsTo ( uri ) ) { throw new IllegalArgumentException ( String . format ( STR_ , uri , scheme ) ) ; } return uri . substring ( uriPrefix . length ( ) ) ; }", "public void writeMultipleCoils(int unitId, int ref, BitVector coils) throws ModbusException {\n        checkTransaction();\n        if (writeMultipleCoilsRequest == null) {\n            writeMultipleCoilsRequest = new WriteMultipleCoilsRequest();\n        }\n        writeMultipleCoilsRequest.setUnitID(unitId);\n        writeMultipleCoilsRequest.setReference(ref);\n        writeMultipleCoilsRequest.setCoils(coils);\n        transaction.setRequest(writeMultipleCoilsRequest);\n        transaction.execute();\n    }", "\tstatic public boolean warn(String message) {\n\t\treturn warn(message, null);\n\t}\n", "@Override\n    public CreateTypeResult createType(CreateTypeRequest request) {\n        request = beforeClientExecution(request);\n        return executeCreateType(request);\n    }", "@Override public void fromData(DataInput in) throws IOException, ClassNotFoundException {\n  super.fromData(in);\n  refreshInterval=in.readLong();\n  alertDefs=(StatAlertDefinition[])DataSerializer.readObjectArray(in);\n}\n", "    public Vertex getFirst () {\n        return (Vertex) this.list.getFirst();\n    }\n", "private Integer compareDateValues(Long loadValue,Long userValue){\n  return loadValue.compareTo(userValue);\n}\n", "public boolean optimizeScanForSingleObject ( ) { return _supportFifoPerSegment && getNumSegments ( ) == NUM_ && size ( ) <= NUM_ ; }", "void stepBreakpointsRemovedReply ( DebuggerStepBreakpointsRemovedReply reply ) ;", "protected void update(CmsPublishJobInfoBean publishJob) {\n\n        if (OpenCms.getMemoryMonitor().requiresPersistency()) {\n            CmsDbContext dbc = m_publishEngine.getDbContext(null);\n            try {\n                m_publishEngine.getDriverManager().writePublishJob(dbc, publishJob);\n            } catch (CmsException e) {\n                dbc.rollback();\n                if (LOG.isErrorEnabled()) {\n                    LOG.error(e.getLocalizedMessage(), e);\n                }\n            } finally {\n                dbc.clear();\n            }\n        }\n    }", "public void build(String code){\n  try {\n    result.put(resources.getString(R.string.intent_extra_status),resources.getString(R.string.shared_pref_default_status));\n    result.put(resources.getString(R.string.intent_extra_code),code);\n    operationListResult.put(result);\n  }\n catch (  JSONException e) {\n    Log.e(TAG,\"Invalid JSON format.\" + e.toString());\n  }\n}\n", "public void writeToStream(OutputStream os,int len) throws IOException {\n  while (len > 0) {\n    if (_readLength <= _readOffset) {\n      if (!readBuffer())       return;\n    }\n    int sublen=Math.min(len,_readLength - _readOffset);\n    os.write(_readBuffer,_readOffset,sublen);\n    _readOffset+=sublen;\n    len-=sublen;\n  }\n}\n", "public void enqueue(final ExecutableFlow exflow, final ExecutionReference ref)\n      throws ExecutorManagerException {\n    if (hasExecution(exflow.getExecutionId())) {\n      final String errMsg = \"Flow already in queue \" + exflow.getExecutionId();\n      t", "public static Collection flatten ( short [ ] self ) { return flatten ( toList ( self ) , new ArrayList ( ) ) ; }", "    public void startTradableRefresher() {\n        if (refreshTimer != null)\n            return;\n        // Setup timer to refresh list automatically.\n        refreshTimer = new Timer() {\n            @Override\n            public void run() {\n                int n = getRowCount();\n                for (int i = 0; i < n; i++) {\n                    Tradable t = get(i);\n                    if (t != null) {\n                        session.getService().refresh(t, new RefreshTradableCallback());\n                    }\n                }\n            }\n        };\n        refreshTimer.run();\n        refreshTimer.scheduleRepeating(refreshInterval);\n    }\n", "public static RepeatingView createFieldList(String id, List<AttributeDefinition> attributes,\n            Map<String, String> values) {\n        RepeatingView fields = new RepeatingView(id);\n        for (AttributeDefinition a : attributes) {\n            WebMarkupContainer row = new WebMarkupContainer(a.getId());\n            MapModel<String, String> model = new MapModel<String, String>(values, a.getId());\n            row.add(createEditorField(\"row\", model, a));\n            fields.add(row);\n        }\n        return fields;\n    }", "    public void setLsP9X4Min(int value) {\n        this.lsP9X4Min = value;\n    }\n", "protected ORecordInternal<?> retrieveRecord(final ORID iRID) {\r\n    if (!isEnabled() || iRID.getClusterId() == excludedCluster)\r\n      return null;\r\n\r\n    ORecordInternal<?> record;\r\n    underlying.lock(iRID);\r\n    try {\r\n      record = underlying.remove(iRID);\r\n\r\n      if (record == null || record.isDirty()) {\r\n        OProfiler.getInstance().updateCounter(CACHE_MISS, 1);\r\n        return null;\r\n      }\r\n\r\n      if (strategy == STRATEGY.COPY_RECORD) {\r\n        final ORecordInternal<?> resident = OGlobalConfiguration.ENVIRONMENT_CONCURRENT.getValueAsBoolean() ? (ORecordInternal<?>) record\r\n            .flatCopy() : record;\r\n        // PUT BACK A COPY OR ThE ORIGINAL IF NOT MULTI-THREADS (THIS UPDATE ALSO THE LRU)\r\n        underlying.put(resident);\r\n      }\r\n\r\n    } finally {\r\n      underlying.unlock(iRID);\r\n    }\r\n\r\n    OProfiler.getInstance().updateCounter(CACHE_HIT, 1);\r\n    return record;\r\n  }", "protected boolean isEventDisabled(XEvent e){\n  if (enableLog.isLoggable(PlatformLogger.Level.FINEST)) {\n    enableLog.finest(\"Component is {1}, checking for disabled event {0}\",e,(isEnabled() ? \"enabled\" : \"disable\"));\n  }\n  if (!isEnabled()) {\nswitch (e.get_type()) {\ncase XConstants.ButtonPress:\ncase XConstants.ButtonRelease:\ncase XConstants.KeyPress:\ncase XConstants.KeyRelease:\ncase XConstants.EnterNotify:\ncase XConstants.LeaveNotify:\ncase XConstants.MotionNotify:\n      if (enableLog.isLoggable(PlatformLogger.Level.FINER)) {\n        enableLog.finer(\"Event {0} is disable\",e);\n      }\n    return true;\n}\n}\nswitch (e.get_type()) {\ncase XConstants.MapNotify:\ncase XConstants.UnmapNotify:\nreturn true;\n}\nreturn super.isEventDisabled(e);\n}\n", "private void calculatePanningSpeed(){\n  final int dux=dvx / PAN_INERTIA;\n  final int duy=dvy / PAN_INERTIA;\n  final int tspeed=((dux * dux) + (duy * duy)) * PAN_SCALE;\n  if (speed > tspeed) {\n    speed=(2 * speed + tspeed) / 3;\n    if ((dvx != 0) || (dvy != 0)) {\n      speed=Math.max(speed,1);\n    }\n  }\n else   if (speed < tspeed) {\n    speed+=2;\n  }\n}\n", "protected static final void setRSAKey(byte[][] key) {\n        BigInteger[] k = new BigInteger[8];\n        for (int i = 0; i < 8; i++) {\n            if (key[i] != null) {\n                k[i] = new BigInteger(1, key[i]);\n            }\n        }\n\n        if (k[3].compareTo(k[4]) < 0) {\n            BigInteger tmp;\n            tmp = k[3];\n            k[3] = k[4];\n            k[4] = tmp;\n            tmp = k[5];\n            k[5] = k[6];\n            k[6] = tmp;\n            k[7] = null;\n        }\n        if (k[7] == null) {\n            k[7] = k[4].modInverse(k[3]);\n        }\n        if (k[0] == null) {\n            k[0] = k[3].multiply(k[4]);\n        }\n        if (k[1] == null) {\n            k[1] = k[2].modInverse(k[3].subtract(BigInteger.valueOf(1)).multiply(k[4].subtract(BigInteger.valueOf(1))));\n        }\n        if (k[5] == null) {\n            k[5] = k[1].remainder(k[3].subtract(BigInteger.valueOf(1)));\n        }\n        if (k[6] == null) {\n            k[6] = k[1].remainder(k[4].subtract(BigInteger.valueOf(1)));\n        }\n        for (int i = 0; i < 8; i++) {\n            key[i] = k[i].toByteArray();\n        }\n\n    }", "List < Todo > findByCompleted ( boolean completed ) ;", "    public BigDecimal toBigDecimal() {\n        BigDecimal n = new BigDecimal(numer);\n        BigDecimal d = new BigDecimal(denom);\n        MathContext mc = new MathContext((int)Math.min(n.precision() +\n                                                       (long)Math.ceil(10.0*d.precision()/3.0),\n                                                       Integer.MAX_VALUE),\n                                         RoundingMode.HALF_EVEN);\n        return n.divide(d, mc);\n    }\n", "private void copyToBuffer(Buffer bDest){\n  if (reassembledDataFullSize <= MAX_H264_FRAME_SIZE) {\n    byte[] finalData=new byte[reassembledDataFullSize + 1];\n    int finalDataPos=0;\n    finalData[finalDataPos]=reassembledDataNALHeader;\n    finalDataPos+=1;\n    int posCurrent=reassembledDataPosSeqStart;\n    int posSeq=0;\n    while ((posCurrent & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK) != reassembledDataPosSeqEnd) {\n      posSeq=posCurrent & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK;\n      System.arraycopy(reassembledData[posSeq],0,finalData,finalDataPos,reassembledDataSize[posSeq]);\n      finalDataPos+=reassembledDataSize[posSeq];\n      posCurrent++;\n    }\n    System.arraycopy(reassembledData[reassembledDataPosSeqEnd],0,finalData,finalDataPos,reassembledDataSize[reassembledDataPosSeqEnd]);\n    bDest.setData(finalData);\n    bDest.setLength(reassembledDataSize[reassembledDataPosSeqEnd]);\n    bDest.setOffset(0);\n    bDest.setTimestamp(timestamp);\n    bDest.setFormat(format);\n    bDest.setFlags(Buffer.FLAG_RTP_MARKER | Buffer.FLAG_RTP_TIME);\n    bDest.setVideoOrientation(videoOrientation);\n    bDest.setSequenceNumber(seqNumber);\n  }\n  reassembledData=null;\n}\n", "public static Text createText ( Composite parent , int style , int hspan ) { Text t = new Text ( parent , style ) ; t . setFont ( parent . getFont ( ) ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = hspan ; t . setLay", "public static boolean hasStartingSlash ( String path ) { Objects . requireNonNull ( path , STR_ ) ; return ! STR_ . equals ( path ) && path . charAt ( NUM_ ) == STR_ ; }", "\tprotected void addStereotypePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_ExtraModel_stereotype_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_ExtraModel_stereotype_feature\", \"_UI_ExtraModel_type\"),\n\t\t\t\t MethodcontentclassdiagramPackage.Literals.EXTRA_MODEL__STEREOTYPE,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "private CancelAction ( ) { super ( STR_ ) ; }", "public static double createDoubleSetting ( final Map < String , String > rawSettings , final String settingName , final double defaultValue ) { final String settingString = rawSettings . get ( settingName ) ; if ( settingString == null ) { return defaultV", "    private String emit(final String source) throws Exception {\n        CommonTree ast = parse(source);\n        if (_log.isDebugEnabled()) {\n            _log.debug(ast.toStringTree());\n        }\n        TreeNodeStream nodes = new CommonTreeNodeStream(ast);\n        PLIStructureCobolEmitter emitter = new PLIStructureCobolEmitter(nodes);\n        StringTemplateGroup stgGroup = new StringTemplateGroup(\n                new BufferedReader(\n                        new InputStreamReader(\n                                getClass().getResourceAsStream(\n                                \"/pli2cob.stg\"))));\n        emitter.setTemplateLib(stgGroup);\n        PLIStructureCobolEmitter.pl1code_return r = emitter.pl1code();\n        StringTemplate output = (StringTemplate) r.getTemplate();\n        return output.toString();\n    }\n", "protected void prepareSortKeyStatements ( SQLBuilder builder , List < SortKey > sortKeys , Map < String , Object > replacementTokens ) { if ( sortKeys == null ) { return ; } for ( int i = NUM_ ; i < sortKeys . size ( ) ; i ++ ) { final SortKey sortKey = s", "    static synchronized public AudioSystemFactory getInstance() {\n        if (instance == null) {\n            instance = new AudioSystemFactory();\n        }\n        return instance;\n    }\n", "private static String createHusPartialWwn(String wwn){\n  if (wwn.length() < SUFFIX_LENGTH + HUS_PREFIX_LENGTH) {\n    return wwn;\n  }\n  String prefix=wwn.substring(wwn.length() - (SUFFIX_LENGTH + HUS_PREFIX_LENGTH),wwn.length() - SUFFIX_LENGTH);\n  String sufix=wwn.substring(wwn.length() - SUFFIX_LENGTH);\n  return (prefix + \"0000\" + sufix);\n}\n", "    public void clear(boolean labelBased) {\n        this.selected.clear();\n        this.entryJCellMap.clear();\n        this.jCellEntryMap.clear();\n        this.labelEntryMap.clear();\n        this.nodeTypeEntryMap.clear();\n        this.edgeTypeEntryMap.clear();\n        this.typeGraph = null;\n        this.labelBased = labelBased;\n    }\n", "public void dumpVM ( ) throws RemoteException ;", "private void readProductExtFeatureLocations() {\n        if (productExtNameInfoMap != null) {\n            return;\n        }\n\n        productExtNameInfoMap = new HashMap<String, ProductExtensionInfo>();\n        File installDir = Utils.getInstallDir();\n        Iterator<ProductExtensionInfo> productExtensions = ProductExtension.getProductExtensions(installDir).iterator();\n\n        while (productExtensions.hasNext()) {\n            ProductExtensionInfo prodExt = productExtensions.next();\n            String prodName = prodExt.getName();\n            String prodLocation = prodExt.getLocation();\n            productExtNameInfoMap.put(prodName, prodExt);\n\n            if (prodLocation != null && !prodLocation.isEmpty()) {\n                String normalizedPath = PathUtils.normalize(prodLocation);\n\n                if (PathUtils.pathIsAbsolute(normalizedPath) == false) {\n                    File parentfile = installDir.getParentFile();\n                    String parentPath = parentfile.getAbsolutePath();\n                    normalizedPath = parentPath + \"/\" + prodLocation + \"/\";\n                    normalizedPath = PathUtils.normalize(normalizedPath);\n                }\n\n                if (normalizedPath != null) {\n                    File productInstallDir = new File(normalizedPath);\n\n                    if (productInstallDir.exists()) {\n                        BundleRepositoryRegistry.addBundleRepository(normalizedPath, prodName);\n                    }\n                }\n            }\n        }\n    }", "\tpublic void add(ValuedVariable v) {\n\t\tsVarVal.add(v);\n\t}\n", "public int estimateCellHSpan(int width){\n  int availWidth=width - (getPaddingLeft() + getPaddingRight());\n  int n=Math.max(1,(availWidth + mWidthGap) / (mCellWidth + mWidthGap));\n  return n;\n}\n", "public String generateSaveFile(String filename,long filesize) throws GenerateSaveFileError {\n  String path=generateTempSaveFileName(filename);\n  File expPath=new File(path);\n  if (!Helpers.isExternalMediaMounted()) {\n    Log.d(Constants.TAG,\"External media not mounted: \" + path);\n    throw new GenerateSaveFileError(STATUS_DEVICE_NOT_FOUND_ERROR,\"external media is not yet mounted\");\n  }\n  if (expPath.exists()) {\n    Log.d(Constants.TAG,\"File already exists: \" + path);\n    throw new GenerateSaveFileError(STATUS_FILE_ALREADY_EXISTS_ERROR,\"requested destination file already exists\");\n  }\n  if (Helpers.getAvailableBytes(Helpers.getFilesystemRoot(path)) < filesize) {\n    throw new GenerateSaveFileError(STATUS_INSUFFICIENT_SPACE_ERROR,\"insufficient space on external storage\");\n  }\n  return path;\n}\n", "public ExceptionOccurredSynchronizer ( final IDebugger debugger , final ListenerProvider < IDebugEventListener > listeners ) { super ( debugger , listeners ) ; }", "public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { request . getSession ( ) . setAttribute ( STR_ , STR_ ) ; response . sendRedirect ( STR_ ) ; return ; }", "private static int uariminGe(double value,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {\n  int ixMin=1;\n  if (value <= bv[0] || value > bv[bv.length - 1])   return ixMin;\n  int ix=Arrays.binarySearch(bv,value);\n  if (ix < 0)   ix=Math.abs(ix) - 1;\n  ixMin=bvi[ix - 1] + 1;\n  return ixMin;\n}\n", "public void pageRequested(PageEvent event) {\n\t\t// si la p\ufffdgina es requerida por si misma no hago nada\n\t\ttry {\n\t\t\t// if (!isReferredByCurrentPage()) {\n\t\t\t// verifico si tiene par\ufffdmetro\n\t\t\tint param = getIntParameter(\"proyecto_id\");\n\t\t\tif (param != (-1)) {", "public static synchronized void\nsetDefaultCache(Cache cache, int dclass) {\n\tDClass.check(dclass);\n\tdefaultCaches.put(Mnemonic.toInteger(dclass), cache);\n}", "public void removeTestingCallback(OneSheeldTestingCallback testingCallback){\n  if (testingCallback != null && testingCallbacks.contains(testingCallback))   testingCallbacks.remove(testingCallback);\n}\n", "    public void saveParameters(Breakpoint bp) {\n        LineBreakpoint lb = (LineBreakpoint) bp;\n        String l = lineTextField.getText();\n        try {\n            Integer i = Integer.parseInt(l);\n            lb.setLineNumber(i);\n        } catch (NumberFormatException nfe) {\n            // Input should have already been validated.\n            ErrorManager.getDefault().notify(nfe);\n        }\n    }\n", "void saveAll ( Collection < Cookie > cookies ) ;", "\tpublic void setPort7FFD(int pValue) {\n\t\t// Record port value\n\t\tivLastPort7FFD = pValue;\n\t\tupdateMemoryConfiguration();\n\t}\n", "void disconnect ( String invocationContext , String activityToken ) { service . traceDebug ( TAG , STR_ ) ; disconnected = BOOL_ ; final Bundle resultBundle = new Bundle ( ) ; resultBundle . putString ( MqttServiceConstants . CALLBACK_ACTIVITY_TOKEN , act", "    public GenericValue getCurrentStatus() {\n        if (exist()) {\n            if (currentStatus == null) {\n                try {\n                    currentStatus = productionRun.getRelatedOneCache(\"StatusItem\");\n                } catch (GenericEntityException e) {\n                    Debug.logWarning(e.getMessage(), module);\n                }\n            }\n            return currentStatus;\n        }\n        return null;\n    }\n", "public JSONArray ( JSONArray array ) { this ( array , BOOL_ ) ; }", "public boolean isEnableSQLDatabaseOutput ( ) { return enableSQLDatabaseOutput ; }", "public static <L> void bindEventsToMethod(final Object target, final String methodName, final Object eventSource,\n            final Class<L> listenerType, final String... eventTypes) {\n        final L listener = listenerType.cast(Proxy.newProxyInstance(target.getClass().getClassLoader(),\n                new Class[] { listenerType }, new EventBindingInvocationHandler(target, methodName, eventTypes)));\n        addEventListener(eventSource, listenerType, listener);\n    }", "Casting(VarAdmin rolePlayer){\n  this.roleType=Optional.empty();\n  this.rolePlayer=rolePlayer;\n}\n", "    public long putFont(StylesTable styles) {\n        short idx = (short)styles.putFont(this);\n        this._index = idx;\n        return idx;\n    }\n", "private static boolean isVerticallyAdjacent ( final float cur_top , final float prev_top , final float spacing ) { final float verterr = ( float ) ( spacing * NUM_ ) ; final boolean aboveThreshold = ( cur_top < ( prev_top + verterr ) ) ; final boolean bel", "public CsvReader createCsvReader ( Reader reader ) { return createCsvReader ( new BufferedReader ( reader ) ) ; }", "public static boolean isMetroPointVolume(DbClient dbClient,Volume volume){\n  if (volume != null) {\n    VirtualPool vpool=dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());\n    if (vpool != null && VirtualPool.vPoolSpecifiesMetroPoint(vpool)) {\n      _log.info(String.format(\"Volume's vpool [%s](%s) specifies Metropoint\",vpool.getLabel(),vpool.getId()));\n      return true;\n    }\n  }\n  return false;\n}\n", "\tpublic void execute(AbstractParsedCommand parsedCommand) throws ConsoleException{\n\t\tif(parsedCommand != null){\n\t\t\tlong start = System.currentTimeMillis();\n\t\t\tcmdExecutor = getExecutor(parsedCommand);\n\t\n\t\t\tif(cmdExecutor != null){\n\t\t\t\tcmdExecutor.addObserver(this);\n\t\t\t\tcmdExecutor.execute(parsedCommand);\n\t\t\t\tlog.info(\"Command '\"+parsedCommand.getCommand()+\"' executed in \"+TimeUtility.format(System.currentTimeMillis()-start));\n\t\t\t}else{\n\t\t\t\tthrow new ConsoleException(ConsoleException.CMD_LINE_EXECUTOR_NULL, new String[]{\"\"+parsedCommand.getCommand()});\n\t\t\t}\n\t\t}else{\n\t\t\tthrow new ConsoleException(ConsoleException.CMD_LINE_NULL);\n\t\t}\n\t}\t\n", "protected void pruneEmptyDirectories( File directory,\n                                          File removeable ) {\n        assert directory != null;\n        assert removeable != null;\n        if (directory.equals(removeable)) {\n            return;\n      ", "\tprotected void addSystemIncludeFiles() throws IOException {\n\t\tlistSystemInclude.add(\"gtest/gtest.h\");\n\t\tprogress.worked(1);\n\t}\n", "public Set getValueFromModel(Model model)\n\t{\n\t\tSet<? extends BioPAXElement> domains = new HashSet<BioPAXElement>(model.getObjects(this.getDomain()));\n\t\treturn getValueFromBeans(domains);\n\t}", "    public String getLabelForOwlClass(String owlClass) {\n        if (owlClass != null) {\n            return (String) owlClass2ComboLabelMap.get(owlClass);\n        }\n        return null;\n    }\n", "    public void convertPatterns() {\n        if (getSerie() == 0) {\n            // Gets the first pattern to calculate the size of the array\n            Pattern currPE = (Pattern) getInputVector().elementAt(0);\n            int aSize = currPE.getArray().length;\n            for (int i = 0; i < aSize; ++i)\n                convert(i);\n        } else\n            convert(getSerie() - 1);\n        // Recurrent call to other connected plugins\n        if (getNextPlugIn() != null) {\n            getNextPlugIn().setInputVector(getInputVector());\n            getNextPlugIn().convertPatterns();\n        }\n    }\n", "public CoreferenceChain_Type ( JCas jcas , Type casType ) { super ( jcas , casType ) ; casImpl . getFSClassRegistry ( ) . addGeneratorForType ( ( TypeImpl ) this . casType , getFSGenerator ( ) ) ; casFeat_first = jcas . getRequiredFeatureDE ( casType , STR_ , STR_ , featOkTst ) ; casFeatCode_first = ( null == casFeat_first ) ? JCas . INVALID_FEATURE_CODE : ( ( FeatureImpl ) casFeat_first ) . getCode ( ) ; }", "public int getPropertyCount()\n    {\n        int count;\n        if (_superClass == null)\n            count = 0;\n        else\n            count = _superClass.getPropertyCount();\n\n        for (AptPropertySet propertySet : _propertySets) {\n            // if a property set is set to optional and hasSetters is set to false,\n            // there isn't a getter or setter available for that property\n            if (propertySet.hasSetters() || !propertySet.isOptional()) {\n                count += propertySet.getProperties().size();\n            }\n        }\n\n        count += _intfProps.size();\n        return count;\n    }", "private FIRFilterSpecification ( FIRLinearPhaseFilterType type , int order , int gridDensity ) { mRemezFilterType = type ; mOrder = order ; mGridDensity = gridDensity ; }", "public final ArrayList<Object>[] generateRules(double minConfidence,boolean noPrune){\n  ArrayList<Object> premises=new ArrayList<Object>();\n  ArrayList<Object> consequences=new ArrayList<Object>();\n  ArrayList<Object> conf=new ArrayList<Object>();\n  @SuppressWarnings(\"unchecked\") ArrayList<Object>[] rules=new ArrayList[3];\n  ItemSet premise, consequence;\n  premise=new ItemSet(m_totalTransactions);\n  consequence=new ItemSet(m_totalTransactions);\n  int[] premiseItems=new int[m_items.length];\n  int[] consequenceItems=new int[1];\n  System.arraycopy(m_items,0,premiseItems,0,m_items.length);\n  consequence.setItem(consequenceItems);\n  premise.setItem(premiseItems);\n  consequence.setItemAt(m_classLabel,0);\n  consequence.setCounter(this.m_ruleSupCounter);\n  premise.setCounter(this.m_counter);\n  premises.add(premise);\n  consequences.add(consequence);\n  conf.add(new Double((double)this.m_ruleSupCounter / (double)this.m_counter));\n  rules[0]=premises;\n  rules[1]=consequences;\n  rules[2]=conf;\n  if (!noPrune) {\n    pruneRules(rules,minConfidence);\n  }\n  return rules;\n}\n", "@RequestMapping(value={\"/\",\"\"},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute(\"servers\") @Valid Servers server,BindingResult bindingResult,Principal principal){\n  RestWrapper restWrapper=null;\n  if (bindingResult.hasErrors()) {\n    BindingResultError bindingResultError=new BindingResultError();\n    return bindingResultError.errorMessage(bindingResult);\n  }\n  try {\n    com.wipro.ats.bdre.md.dao.jpa.Servers jpaServers=new com.wipro.ats.bdre.md.dao.jpa.Servers();\n    jpaServers.setServerId(server.getServerId());\n    jpaServers.setServerName(server.getServerName());\n    jpaServers.setServerType(server.getServerType());\n    jpaServers.setServerIp(server.getServerIp());\n    jpaServers.setSshPrivateKey(server.getSshPrivateKey());\n    jpaServers.setLoginUser(server.getLoginUser());\n    jpaServers.setLoginPassword(server.getLoginPassword());\n    jpaServers.setServerMetainfo(server.getServerMetaInfo());\n    serversDAO.update(jpaServers);\n    restWrapper=new RestWrapper(server,RestWrapper.OK);\n    LOGGER.info(\"Record with ID:\" + server.getServerId() + \" updated in Servers by User:\"+ principal.getName()+ server);\n  }\n catch (  Exception e) {\n    LOGGER.error(e);\n    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);\n  }\n  return restWrapper;\n}\n", "public static String convertToRGB(int color){\n  String red=Integer.toHexString(Color.red(color));\n  String green=Integer.toHexString(Color.green(color));\n  String blue=Integer.toHexString(Color.blue(color));\n  if (red.length() == 1) {\n    red=\"0\" + red;\n  }\n  if (green.length() == 1) {\n    green=\"0\" + green;\n  }\n  if (blue.length() == 1) {\n    blue=\"0\" + blue;\n  }\n  return \"#\" + red + green+ blue;\n}\n", "public void fillComboBox(boolean restore){\n  if (restore && m_tempData != null) {\n    Object obj=m_selectedObject;\n    p_data.clear();\n    p_data=new ArrayList<Object>(m_tempData.length);\n    for (int i=0; i < m_tempData.length; i++)     p_data.add(m_tempData[i]);\n    m_tempData=null;\n    if (obj == null && p_data.size() > 0)     obj=p_data.get(0);\n    setSelectedItem(obj);\n    fireContentsChanged(this,0,p_data.size());\n    return;\n  }\n  if (p_data != null)   fillComboBox(isMandatory(),true,true,false);\n}\n", "\tpublic boolean forEachPair(final DoubleDoubleProcedure procedure) {\n\t\treturn forEachKey(\n\t\t\tnew DoubleProcedure() {\n\t\t\t\tpublic boolean apply(double key) {\n\t\t\t\t\treturn procedure.apply(key,get(key));\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n", "public RequestHandle delete ( Context context , String url , Header [ ] headers , ResponseHandlerInterface responseHandler ) { final HttpDelete delete = new HttpDelete ( url ) ; if ( headers != null ) delete . setHeaders ( headers ) ; return sendRequest ( httpClient , httpContext , delete , null , responseHandler , context ) ; }", "private void replicateAndfreeCacheContextTxn ( Context context , ServerTransaction transaction ) { try { replicateAndfreeCache ( context ) ; } catch ( RuntimeException ex ) { if ( _logger . isLoggable ( Level . SEVERE ) ) { _logger . log ( Level . SEVERE , STR_ + transaction , ex ) ; } } }", "public void add(Double d) {\n\t\tthis.value += d;\n\t}", "public static Observable<String> getPathFromUriForMediaDocument(final Context context,\n      final Uri mediaUri, final String mediaDocumentId) {\n    return Observable.fromCallable(new Func0<String>() {\n      @Override\n      public String call() {\n        String pathFound = null;\n        Cursor cursor = context.getContentResolver()\n            .query(mediaUri, null, Constants.ID_COLUMN_VALUE + \" =?\",\n                new String[] { mediaDocumentId }, null);\n        if (cursor != null) {\n          if (cursor.moveToFirst()) {\n            pathFound =\n                cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.MediaColumns.DATA));\n          }\n          cursor.close();\n          logDebug(\"Path found:\" + pathFound);\n        }\n        return pathFound;\n      }\n    });\n  }", "    public Element moveElementUp(Object source, Element element, boolean doSelect) {\n        Element parent = element.getParent();\n        if(parent != null) {\n            List children = parent.getChildren();\n            if(children.size() > 1) {\n                int index = children.indexOf(element);\n                if(index > 0) {\n                    removeElement(source, element);\n                    addElementAtIndex(source, parent, element, index - 1, doSelect);\n                }\n            }\n        }\n        return element;\n    }\n", "public boolean isSelected ( ) { return this . mSelected ; }", "public void performClosedEvent ( ) { mOpenInitiated = BOOL_ ; if ( mListener != null ) { mListener . onSpinnerClosed ( ) ; } }", "\tpublic void remove(String id, String attribute) {\n\t\tif (!attributes.containsKey(id))\n\t\t\treturn;\n\n\t\tattributes.get(id).remove(attribute);\n\n\t\tdirty = true;\n\t}\n", "  public void addPublisher(ComponentFile pPublisher) {\n    if (pPublisher != null) {\n      if (mPublishers == null) {\n        mPublishers = new ArrayList<ComponentFile>();\n      }\n      mPublishers.add(pPublisher);\n    }\n  }\n", "public IsNullValue markInformationAsComingFromReturnValueOfMethod ( XMethod methodInvoked ) { FieldDescriptor fieldDescriptor = methodInvoked . getAccessMethodForField ( ) ; if ( fieldDescriptor != null ) { XField f = XFactory . getExactXField ( fieldDesc", "public ZyGraphLayoutSettings ( final GraphSettingsConfigItem type ) { Preconditions . checkNotNull ( type , STR_ ) ; m_type = type ; m_circularSettings = new ZyGraphCircularSettings ( type ) ; m_hierarchicalSettings = new ZyGraphHierarchicalSettings ( type ) ; m_orthogonalSettings = new ZyGraphOrthogonalSettings ( type ) ; }", "public static void histogram( GrayS64 input , long minValue , int histogram[] ) {\n\t\tif( BoofConcurrency.USE_CONCURRENT ) {\n\t\t\tImplImageStatistics_MT.histogram(input,minValue,histogram);\n\t\t} else {\n\t\t\tImplImageStatistics.histogram(input,minValue,histogram);\n\t\t}\n\t}", "List < GenericAuditEntity > findSiteAudit ( String site ) throws Exception ;", "public void deleteSubtreeExcludingRoot(Dn root) throws NoSuchNodeException, MissingParentException {\n        existsCheck(root);\n        try {\n            EntryCursor entryCursor = connection.search(root, \"(objectclass=*)\", SearchScope.ONELEVEL);\n            while (entryCursor.next()) {\n                deleteSubtreeIncludingRoot(entryCursor.get().getDn());\n            }\n        } catch (Exception e) {\n            throw new LdapDaoException(e);\n        }\n    }", "public void testBadValues ( ) throws Exception { try { new Interval ( STR_ ) . longValue ( ) ; throw new Exception ( STR_ ) ; } catch ( NumberFormatException e ) { } try { new Interval ( STR_ ) . longValue ( ) ; throw new Exception ( STR_ ) ; } catch ( NumberFormatException e ) { } try { new Interval ( STR_ ) . longValue ( ) ; throw new Exception ( STR_ ) ; } catch ( NumberFormatException e ) { } try { new Interval ( STR_ ) . longValue ( ) ; throw new Exception ( STR_ ) ; } catch ( NumberFormatException e ) { } }", "private void closeConnection(Session session,GuacamoleStatus guac_status){\n  try {\n    int code=guac_status.getWebSocketCode();\n    String message=Integer.toString(guac_status.getGuacamoleStatusCode());\n    session.close(new CloseStatus(code,message));\n  }\n catch (  IOException e) {\n    logger.debug(\"Unable to close WebSocket connection.\",e);\n  }\n}\n", "public void sortArray(T[] d,Comparator<T> c){\n  this.data=d;\n  this.comp=c;\n  int len=Math.max((int)(100 * Math.log(d.length)),TEMP_SIZE);\n  len=Math.min(d.length,len);\n  @SuppressWarnings(\"unchecked\") T[] t=(T[])new Object[len];\n  this.temp=t;\n  quicksort(0,d.length - 1);\n}\n", "    public void close() {\n\tcleanup();\n    }\n", "public MailAddress(String localPart,String domain) throws AddressException {\n  this(new InternetAddress(localPart + \"@\" + domain));\n}\n", "void editedGlobalCodeNodeComment ( CodeNodeType codeNode , CommentType comment ) ;", "\tpublic String list() {\n\t\tStringBuffer list = new StringBuffer();\n\n\t\tfor (String name : bucket.list()) {\n\t\t\tlist.append(name);\n\t\t\tlist.append(\"\\n\");\n\t\t}\n\n\t\treturn list.toString();\n\t}\n", "private void removeUselessTask ( ProxyReg reg ) { List pendingTasks = cacheTaskMgr . getPending ( ) ; for ( int i = NUM_ ; i < pendingTasks . size ( ) ; i ++ ) { CacheTask t = ( CacheTask ) pendingTasks . get ( i ) ; if ( t . isFromProxy ( reg ) ) cacheTaskMgr . remove ( t ) ; } }", "public String getDirectEditIncludes(CmsDirectEditParams params) {\n\n        CmsMacroResolver resolver = prepareMacroResolverForIncludes(params);\n        return resolver.resolveMacros(m_headerInclude);\n    }", "public Proxy wrap ( Object adaptee ) { setAdaptee ( adaptee ) ; return this ; }", "    public String getDescription() {\n        StringBuffer buf = new StringBuffer(description);\n\n        if (showExtensions) {\n            buf.append(\" (\");\n\n            final int exts = extensions.size();\n\n            for (int i = 0; i < exts; i++) {\n                //period must be added as the extensions do not actually include them \n                buf.append('.');\n                buf.append(extensions.get(i));\n\n                //if not last item add separator\n                if (i != (exts - 1)) {\n                    buf.append(',');\n                }\n            }\n\n            buf.append(')');\n        }\n\n        return buf.toString();\n    }\n", "public void update(String sData){\n  for (int nI=0; nI < sData.length(); nI++)   update((byte)(sData.charAt(nI) & 0x0ff));\n}\n", "protected String getToolName ()\n  {\n    final String name = getClass ().getName ();\n    return name.substring (name.lastIndexOf ('.') + 1);\n  }", "public void setTriggerNames(java.util.Collection<String> triggerNames) {\n        if (triggerNames == null) {\n            this.triggerNames = null;\n            return;\n        }\n\n        this.triggerNames = new java.util.ArrayList<String>(triggerNames);\n    }", "private void clearWaitJobs() {\n        log.debug(\"Clear wait jobs\");\n        if (pullAndPush != null) {\n            subscriberStream.cancelJob(pullAndPush);\n            releasePendingMessage();\n            pullAndPush = null;\n        }\n        if (waitLiveJob != null) {\n            schedulingService.removeScheduledJob(waitLiveJob);\n            waitLiveJob = null;\n        }\n    }", "\tpublic IPropertySheetPage getPropertySheetPage() {\n\t\tif (propertySheetPage == null) {\n\t\t\tpropertySheetPage =\n\t\t\t\tnew ExtendedPropertySheetPage(editingDomain) {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void setSelectionToViewer(List<?> selection) {\n\t\t\t\t\t\tVoidstarEditor.this.setSelectionToViewer(selection);\n\t\t\t\t\t\tVoidstarEditor.this.setFocus();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void setActionBars(IActionBars actionBars) {\n\t\t\t\t\t\tsuper.setActionBars(actionBars);\n\t\t\t\t\t\tgetActionBarContributor().shareGlobalActions(this, actionBars);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tpropertySheetPage.setPropertySourceProvider(new AdapterFactoryContentProvider(adapterFactory));\n\t\t}\n\n\t\treturn propertySheetPage;\n\t}\n", "public static Double stringToDouble(String val){\n  return Double.valueOf(trim(val));\n}\n", "    public int green() {\n        return _color.getGreen();\n    }\n", "public StateMonitorTab(GUIFrame mainFrame){\n  setLayout(new BorderLayout());\n  this.mainFrame=mainFrame;\n  states=new HashMap<String,DialogueState>();\n  JPanel leftPanel=createLeftSide();\n  visualisation=new StateViewer(this);\n  logArea=createLogArea();\n  JScrollPane logScroll=new JScrollPane(logArea);\n  logScroll.setBorder(BorderFactory.createEmptyBorder());\n  JSplitPane topPanel=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,leftPanel,visualisation.wrapWithScrollPane());\n  topPanel.setDividerLocation(200);\n  JSplitPane fullPanel=new JSplitPane(JSplitPane.VERTICAL_SPLIT,topPanel,logScroll);\n  fullPanel.setDividerLocation(600);\n  add(fullPanel);\n  configureKeyInputs();\n  recordState(new DialogueState(),CURRENT);\n  listModel.add(1,\"separator-current\");\n}\n", "public InternalTranslationException ( final String message ) { this . message = message ; }", "    public boolean append(Request si) throws IOException {\n        return this.snapLog.append(si);\n    }\n", "private void sgdTrain(ClassificationDataSet D, MatrixOfVecs W, Vec b, int sign_mul, boolean parallel)\n    {\n        IntList order = new IntList(D.size());\n        ListUtils.addRange(order, 0, D.size(), 1);\n        \n        final double lambda_adj = lambda/(D.size()*epochs);\n        \n        int[] owned = new int[K];//how many points does thsi guy own?\n        int assigned_positive_instances = 0;//how many points in the positive class have been assigned?\n        int[] assignments = new int[D.size()];//who owns each data point\n        Arrays.fill(assignments, -1);//Starts out that no one is assigned! \n        \n        Vec dots = new DenseVector(W.rows());\n        \n        long t = 0;\n        for(int epoch = 0; epoch < epochs; epoch++)\n        {\n            Collections.shuffle(order);\n            for(int i : order)\n            {\n                t++;\n                double eta = 1/(lambda_adj*t);\n                Vec x_i = D.getDataPoint(i).getNumericalValues();\n                int y_i = (D.getDataPointCategory(i)*2-1)*sign_mul;\n                \n                //this sets dots = bias, which we then add to with matrix-vector product\n                //result is the same as dots =  W x_i + b\n                b.copyTo(dots);\n                W.multiply(x_i, 1.0, dots);\n                \n                if(y_i == -1)\n                {\n                    for(int k = 0; k < K; k++)\n                        if(dots.get(k) > -1)\n                        {\n                            W.getRowView(k).mutableSubtract(eta, x_i);\n                            b.increment(k, -eta);\n                        }\n                }\n                else//y_i == 1\n                {\n                    int k_true_max = 0;\n                    for(int k = 1; k < dots.length(); k++)\n                        if(dots.get(k) > dots.get(k_true_max))\n                            k_true_max = k;\n                    \n                    if(dots.get(k_true_max) < 1)\n                    {\n                        int z = ASSIGN(dots, i, k_true_max, owned, assignments, assigned_positive_instances);\n                        W.getRowView(z).mutableAdd(eta, x_i);\n                        b.increment(z, eta);\n                        \n                        //book keeping\n                        if(assignments[i] < 0)//first assignment, inc counter\n                            assigned_positive_instances++;\n                        else//change owner, decrement ownership count\n                            owned[assignments[i]]--;\n                        owned[z]++;\n                        assignments[i] = z;\n                        \n                    }\n                }\n                \n//                W.mutableMultiply(1-eta*lambda);\n                //equivalent form, more stable\n                W.mutableMultiply(1-1.0/t);\n                b.mutableMultiply(1-1.0/t);\n            }\n        }\n    }", "public boolean loadDocumentDetails (FieldProvider [] data,ConnectionProvider conn){\n    DocumentType = AcctServer.DOCTYPE_DPManagement;\n    DateDoc = data[0].getField(\"Dateacct\");\n    loadDocumentType();     //  lines require doc type\n    //  Contained Ob", "public void skip(int length) {\n        int newcount = count + length;\n        if (newcount > buf.length) {\n            buf = Arrays.copyOf(buf, oversize(newcount));\n        }\n        count = newcount;\n    }", "\tpublic Msp addTableInfoToMsp(Msp msp, List<Map<String, Object>> rows, Map<String, Object> keys) {\n\t\t\n\t\tlogger.info(\"PmEthernetStatisticsDetailModel addTableInfoToMsp(): only view..\");\n\t\t\n\t\treturn msp;\n\t}\t\n", "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"setProp\");\n  String label=np.getWordRespectCase();\n  np.matchIgnoreCase(\"=\");\n  String value=np.getWordRespectCase();\n  if (NexusStreamParser.isBoolean(value)) {\n    ProgramProperties.put(label,Boolean.parseBoolean(value));\n  }\n else   if (NexusStreamParser.isInteger(value)) {\n    ProgramProperties.put(label,Integer.parseInt(value));\n  }\n else   if (NexusStreamParser.isFloat(value)) {\n    ProgramProperties.put(label,Float.parseFloat(value));\n  }\n else   ProgramProperties.put(label,value);\n  np.matchIgnoreCase(\";\");\n}\n", "protected void assertExists(File file){\n  assertTrue(\"File '\" + file.getAbsolutePath() + \"' does not exist\",file.exists());\n}\n", "public void logPacket ( byte [ ] sourceAddress , int sourcePort , byte [ ] destinationAddress , int destinationPort , byte [ ] packetContent , boolean sender ) ;", "void addedThread ( TargetProcessThread thread ) ;", "public JsonValue undeploy(String routeId) throws RouterHandlerException {\n  write.lock();\n  try {\n    JsonValue routeConfig=unload(routeId);\n    directoryMonitor.delete(routeId);\n    logger.info(\"Undeployed the route with id '{}'\",routeId);\n    return routeConfig;\n  }\n  finally {\n    write.unlock();\n  }\n}\n", "public static JSONFunction parse( String str ) {\n      if( !JSONUtils.isFunction( str ) ) {\n         throw new JSONException( \"String is not a function. \" + str );\n      } else {\n         String params = JSONUtils.getFunctionParams( str );\n         String", "@SuppressWarnings(\"unchecked\")\n    private Comparable increment(Object value, Number step) {\n        return (Comparable) plus((Number) value, step);\n    }", "protected List<MethodNode> findMethodsWithGenerated(ClassNode receiver,String name){\n  List<MethodNode> methods=receiver.getMethods(name);\n  if (methods.isEmpty() || receiver.isResolved())   return methods;\n  List<MethodNode> result=addGeneratedMethods(receiver,methods);\n  return result;\n}\n", "    public int print(Graphics g, PageFormat pf, int page) throws PrinterException {\n    \tint x = (int)pf.getImageableX();\n        int y = (int)pf.getImageableY();\n        g.translate(x, y);\n        if (page == 0) {\n          paint(g);\n          return Printable.PAGE_EXISTS;\n        } else {\n          return Printable.NO_SUCH_PAGE;\n        }\n    }\n", "public static String shortFormatDayTime ( Date dt ) { return createDateFormatter ( ) . shortFormatDayTime ( dt ) ; }", "\tpublic DJPie3DChartBuilder setShowLegend(boolean showLegend) {\n\t\tthis.chart.getOptions().setShowLegend(new Boolean(showLegend));\n\t\treturn this;\n\t}\n", "public static String arrayToList(String[] array, String delimiter) {\n\tif (ArrayUtil.isEmpty(array)) return \"\";\n\tStringBuilder sb = new StringBuilder(array[0]);\n\n\tif (delimiter.length() == 1) {\n\t    char c = delimiter.charAt(0);\n\t    for (int i = 1; i < array.length; i++) {\n\t\tsb.append(c);\n\t\tsb.append(array[i]);\n\t    }\n\t}\n\telse {\n\t    for (int i = 1; i < array.length; i++) {\n\t\tsb.append(delimiter);\n\t\tsb.append(array[i]);\n\t    }\n\t}\n\n\treturn sb.toString();\n    }", "\tprivate int findCharIndex(char c, byte[] bdata, int start, int length) {\n\t\tfor (int i = start; i < start + length; i++) {\n\t\t\tif (((char) bdata[i]) == c) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n", "\tprivate ImageIcon getIcon(String name) {\n\t\tURL url = Graphical.class.getResource(\"resources/\" + name + \".png\");\n\t\tif (url == null) {\n\t\t\tlogger.warning(\"Couldn't find icon\" + url);\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn new ImageIcon(url);\n\t\t}\n\t}\n", "private void clearUtteranceCompletionActions(boolean execute){\n  if (!execute) {\n    mUtteranceCompleteActions.clear();\n    return;\n  }\n  while (!mUtteranceCompleteActions.isEmpty()) {\n    final UtteranceCompleteRunnable runnable=mUtteranceCompleteActions.poll().runnable;\n    if (runnable != null) {\n      mHandler.post(new CompletionRunner(runnable,STATUS_INTERRUPTED));\n    }\n  }\n}\n", "private double naiveQueryDense(NumberVector obj,WritableDoubleDataStore scores,HashSetModifiableDBIDs cands){\n  double len=0.;\n  for (int dim=0, max=obj.getDimensionality(); dim < max; dim++) {\n    final double val=obj.doubleValue(dim);\n    if (val == 0. || val != val) {\n      continue;\n    }\n    len+=val * val;\n    if (dim >= index.size()) {\n      continue;\n    }\n    ModifiableDoubleDBIDList column=index.get(dim);\n    for (DoubleDBIDListIter n=column.iter(); n.valid(); n.advance()) {\n      scores.increment(n,n.doubleValue() * val);\n      cands.add(n);\n    }\n  }\n  return Math.sqrt(len);\n}\n", "\tpublic TooltipAjaxBehaviour setTip(String tip) {\n\t\tthis.getInner().setTip(tip);\n\t\treturn this;\n\t}\n", "\tpublic int getValueIndex(int row, int column, int valueIdx) {\n\t\tif (groupCellKeyToDomainValueToValueIdxCache == null) {\n\t\t\tupdateValuesCache();\n\t\t}\n\t\tGroupCellKey groupCellKey = valueSourceData.getSeriesDataForAllGroupCells().getGroupCellKeyAndData(row).getKey();\n\t\tMap<Integer, Vector<Integer>> map = groupCellKeyToDomainValueToValueIdxCache.get(groupCellKey);\n\t\tVector<Integer> vector = map.get(column);\n\t\treturn vector.get(valueIdx);\n\t}\n", "private List<Pair<SceneView,SceneView>> imagesWithCommonFeatures(double n,List<SceneView> imgList){\n  List<Pair<SceneView,SceneView>> images=new ArrayList<>();\n  for (int i=0; i < imgList.size(); i++) {\n    SceneView imgI=imgList.get(i);\n    for (int j=0; j < imgList.size(); j++) {\n      if (j > i) {\n        SceneView imgJ=imgList.get(j);\n        Collection<Feature> f=imgJ.getCommonFeatures(imgI);\n        if (f.size() >= n) {\n          images.add(new Pair<>(imgI,imgJ));\n        }\n      }\n    }\n  }\n  return images;\n}\n", "    private void reloadInEDT() {\n        if (SwingUtilities.isEventDispatchThread())\n            symbolTreeModel.reload(parent);\n        else {\n            Runnable runner = new Runnable() {\n\n                public void run() {\n                    symbolTreeModel.reload(parent);\n                }\n            };\n            SwingUtilities.invokeLater(runner);\n        }\n\n    }\n", "private synchronized void initialize() {\n        Iterator types = EntityTypesLocator.getEntityTypes().getAllEntityTypes();\n        String factoryName = null;\n\n        while (types.hasNext()) {\n            Class type = (Class) types.next();\n            if (type != Object.class) {\n                String factoryKey =\n                        \"org.apereo.portal.services.EntityNameFinderService.NameFinderFactory.implementation_\"\n                                + type.getName();\n                try {\n                    factoryName = PropertiesManager.getProperty(factoryKey);\n                } catch (Exception runtime) {\n                    String dMsg =\n                            \"EntityNameFinderService.initialize(): \"\n                                    + \"could not find property for \"\n                                    + type.getName()\n                                    + \" factory.\";\n                    log.debug(dMsg);\n                }\n                if (factoryName != null) {\n                    try {\n                        IEntityNameFinderFactory factory =\n                                (IEntityNameFinderFactory) Class.forName(factoryName).newInstance();\n                        getNameFinders().put(type, factory.newFinder());\n                    } catch (Exception e) {\n                        String eMsg =\n                                \"EntityNameFinderService.initialize(): \"\n                                        + \"Could not instantiate finder for \"\n                                        + type.getName()\n                                        + \": \";\n                        log.error(eMsg, e);\n                    }\n                }\n            }\n        }\n        setInitialized(true);\n    }", "public boolean read ( ) throws FileReadException { boolean notFound = BOOL_ ; try { properties . getProperties ( ) . loadFromXML ( new FileInputStream ( filename ) ) ; } catch ( final FileNotFoundException e ) { notFound = BOOL_ ; } catch ( final IOException e ) { throw new FileReadException ( e ) ; } generalSettings . load ( properties ) ; for ( int i = NUM_ ; i < properties . getInteger ( DATABASES_COUNT , DATABASES_COUNT_DEFAULT ) ; i ++ ) { final DatabaseConfigItem database = new DatabaseConfigItem ( ) ; database . loadWithKeyPrefix ( properties , DATABASES_PREFIX + i + STR_ ) ; databases . add ( database ) ; } callGraphSettings . loadWithKeyPrefix ( properties , STR_ ) ; flowGraphSettings . loadWithKeyPrefix ( properties , STR_ ) ; colors . loadWithKeyPrefix ( properties , STR_ ) ; debuggerColors . loadWithKeyPrefix ( properties , STR_ ) ; if ( notFound ) { flowGraphSettings . setDefaultGraphLayout ( NUM_ ) ; flowGraphSettings . setProximityBrowsingThreshold ( NUM_ ) ; flowGraphSettings . setAutoLayoutDeactivationThreshold ( NUM_ ) ; flowGraphSettings . setLayoutCalculationThreshold ( NUM_ ) ; return BOOL_ ; } return BOOL_ ; }", "public void flip(final int x) {\n    final short hb = BufferUtil.highbits(x);\n    final int i = highLowContainer.getIndex(hb);\n    if (i >= 0) {\n      MappeableContainer c = highLowContainer.getContainerAtIndex(i);\n      c = c.flip(BufferUtil.lowbits(x));", "public static long maxFill ( final long n , final float f ) { return Math . min ( ( long ) Math . ceil ( n * f ) , n - NUM_ ) ; }", "public final void deleteReferenceImage(ReferenceImageName name) {\n\n    DeleteReferenceImageRequest request =\n        DeleteReferenceImageRequest.newBuilder()\n            .setName(name == null ? null : name.toString())\n            .build();\n    deleteReferenceImage(request);\n  }", "public static MultiPolyline addPolylinesToMap(MapView map,\n                                                  List<Polyline> polylines) {\n        MultiPolyline multiPolyline = new MultiPolyline();\n\n        for (Polyline line : polylines) {\n            if (line.getInfoWindow()==null)\n            line.setInfoWindow(new BasicInfoWindow(R.layout.bonuspack_bubble, map));\n            map.getOverlayManager().add(line);\n            multiPolyline.add(line);\n        }\n        return multiPolyline;\n    }", "public ItemRef off(StorageEvent eventType, OnItemSnapshot onItemSnapshot){\n\t\tEvent ev = new Event(eventType, this.table.name, this.primaryKeyValue, this.secondaryKeyValue, false, false, false, onItemSnapshot);\n\t\tcontext.removeEvent(ev);\n\t\treturn this;\n\t}", "\tpublic String printCSV(){\n\t\tfinal char CSV_SEPARATOR= ',';\n\t\treturn this.getCity() + CSV_SEPARATOR +\n\t\t\t    this.getCountry() + CSV_SEPARATOR +\n\t\t\t    this.getWeight() + CSV_SEPARATOR +\n\t\t\t    \"y\" + CSV_SEPARATOR +\n\t\t\t    this.getLatitude() + CSV_SEPARATOR +\n\t\t\t    this.getLongitude();\n\t}\n", "public WebSocket addListener ( WebSocketListener listener ) { mListenerManager . addListener ( listener ) ; return this ; }", "\tpublic int getBestImageWidth(int imageType) {\n\t\tswitch (imageType) {\n\t\tcase LIST_ELEMENT:\n\t\tcase CHOICE_GROUP_ELEMENT:\n\n\t\t\treturn ChoiceGroupSkin.getBestImageWidth();\n\n\t\tcase ALERT:\n\n\t\t\treturn WIDTH; // IMPL NOTE: this is wrong\n\n\t\tdefault:\n\t\t\tthrow new IllegalArgumentException();\n\t\t}\n\t}\n", "public String getToken() throws IOException, GoogleAuthException {\n    if (backOff != null) {\n      backOff.reset();\n    }\n\n    while (true) {\n      try {\n        return GoogleAuthUtil.getToken(context, accountName, scope);\n      } catch (IOException e) {\n        // network or server error, so retry using back-off policy\n        try {\n          if (backOff == null || !BackOffUtils.next(sleeper, backOff)) {\n            throw e;\n          }\n        } catch (InterruptedException e2) {\n          // ignore\n        }\n      }\n    }\n  }", "\tpublic LearningDesignDataModel loadLearningDesignDataModel() {\n\t    LearningDesignDataModel dataModel = new LearningDesignDataModel(this);\n\t    \n\t    try {\n\t        dataModel.load();\n\t    }\n\t    catch(Exception ex) {\n\t        ex.printStackTrace();\n\t    }\n\t    \n\t    return dataModel;\n\t}\n", "public ZyGraphNode ( final Node node , final IZyNodeRealizer realizer , final RawNodeType rawNode ) { m_node = Preconditions . checkNotNull ( node , STR_ ) ; m_realizer = Preconditions . checkNotNull ( realizer , STR_ ) ; m_rawNode = Preconditions . check", "    private void updateLogAnchor(StorageContainer container, ByteBuffer bb) {\n        long checksum = ChecksumCalculator.compute(bb.array(), 0, bb.limit());\n        ByteBuffer bh = ByteBuffer.allocate(TypeSize.INTEGER + TypeSize.LONG);\n        bh.putInt(bb.limit());\n        bh.putLong(checksum);\n        bh.flip();\n        long position = 0;\n        container.write(position, bh.array(), 0, bh.limit());\n        position += bh.limit();\n        container.write(position, bb.array(), 0, bb.limit());\n    }\n", "public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ) ; }", "@Override public V put(K key,V value){\n  poll();\n  int index=0;\n  Entry<K,V> entry;\n  if (key != null) {\n    index=(Collections.secondaryHash(key) & 0x7FFFFFFF) % elementData.length;\n    entry=elementData[index];\n    while (entry != null && !key.equals(entry.get())) {\n      entry=entry.next;\n    }\n  }\n else {\n    entry=elementData[0];\n    while (entry != null && !entry.isNull) {\n      entry=entry.next;\n    }\n  }\n  if (entry == null) {\n    modCount++;\n    if (++elementCount > threshold) {\n      rehash();\n      index=key == null ? 0 : (Collections.secondaryHash(key) & 0x7FFFFFFF) % elementData.length;\n    }\n    entry=new Entry<K,V>(key,value,referenceQueue);\n    entry.next=elementData[index];\n    elementData[index]=entry;\n    return null;\n  }\n  V result=entry.value;\n  entry.value=value;\n  return result;\n}\n", "public static BigDecimal calculateAverageInv(MProduct product,int M_AttributeSetInstance_ID,MAcctSchema as,int AD_Org_ID){\n  String sql=\"SELECT t.MovementQty, mi.Qty, il.QtyInvoiced, il.PriceActual,\" + \" i.C_Currency_ID, i.DateAcct, i.C_ConversionType_ID, i.AD_Client_ID, i.AD_Org_ID, t.M_Transaction_ID \" + \"FROM M_Transaction t\"+ \" INNER JOIN M_MatchInv mi ON (t.M_InOutLine_ID=mi.M_InOutLine_ID)\"+ \" INNER JOIN C_InvoiceLine il ON (mi.C_InvoiceLine_ID=il.C_InvoiceLine_ID)\"+ \" INNER JOIN C_Invoice i ON (il.C_Invoice_ID=i.C_Invoice_ID) \"+ \"WHERE t.M_Product_ID=?\";\n  if (AD_Org_ID != 0)   sql+=\" AND t.AD_Org_ID=?\";\n else   if (M_AttributeSetInstance_ID != 0)   sql+=\" AND t.M_AttributeSetInstance_ID=?\";\n  sql+=\" ORDER BY t.M_Transaction_ID\";\n  PreparedStatement pstmt=null;\n  ResultSet rs=null;\n  BigDecimal newStockQty=Env.ZERO;\n  BigDecimal newAverageAmt=Env.ZERO;\n  int oldTransaction_ID=0;\n  try {\n    pstmt=DB.prepareStatement(sql,null);\n    pstmt.setInt(1,product.getM_Product_ID());\n    if (AD_Org_ID != 0)     pstmt.setInt(2,AD_Org_ID);\n else     if (M_AttributeSetInstance_ID != 0)     pstmt.setInt(2,M_AttributeSetInstance_ID);\n    rs=pstmt.executeQuery();\n    while (rs.next()) {\n      BigDecimal oldStockQty=newStockQty;\n      BigDecimal movementQty=rs.getBigDecimal(1);\n      int M_Transaction_ID=rs.getInt(10);\n      if (M_Transaction_ID != oldTransaction_ID)       newStockQty=oldStockQty.add(movementQty);\n      M_Transaction_ID=oldTransaction_ID;\n      BigDecimal matchQty=rs.getBigDecimal(2);\n      if (matchQty == null) {\n        s_log.finer(\"Movement=\" + movementQty + \", StockQty=\"+ newStockQty);\n        continue;\n      }\n      BigDecimal price=rs.getBigDecimal(4);\n      int C_Currency_ID=rs.getInt(5);\n      Timestamp DateAcct=rs.getTimestamp(6);\n      int C_ConversionType_ID=rs.getInt(7);\n      int Client_ID=rs.getInt(8);\n      int Org_ID=rs.getInt(9);\n      BigDecimal cost=MConversionRate.convert(product.getCtx(),price,C_Currency_ID,as.getC_Currency_ID(),DateAcct,C_ConversionType_ID,Client_ID,Org_ID);\n      BigDecimal oldAverageAmt=newAverageAmt;\n      BigDecimal averageCurrent=oldStockQty.multiply(oldAverageAmt);\n      BigDecimal averageIncrease=matchQty.multiply(cost);\n      BigDecimal newAmt=averageCurrent.add(averageIncrease);\n      newAmt=newAmt.setScale(as.getCostingPrecision(),BigDecimal.ROUND_HALF_UP);\n      newAverageAmt=newAmt.divide(newStockQty,as.getCostingPrecision(),BigDecimal.ROUND_HALF_UP);\n      s_log.finer(\"Movement=\" + movementQty + \", StockQty=\"+ newStockQty+ \", Match=\"+ matchQty+ \", Cost=\"+ cost+ \", NewAvg=\"+ newAverageAmt);\n    }\n  }\n catch (  SQLException e) {\n    throw new DBException(e,sql);\n  }\n finally {\n    DB.close(rs,pstmt);\n    rs=null;\n    pstmt=null;\n  }\n  if (newAverageAmt != null && newAverageAmt.signum() != 0) {\n    s_log.finer(product.getName() + \" = \" + newAverageAmt);\n    return newAverageAmt;\n  }\n  return null;\n}\n", "boolean containsModule ( INaviModule module ) ;", "public void testOrdinaryStrings ( ) throws Exception { String testStrings [ ] = { STR_ , STR_ , STR_ , STR_ } ; MySQLStatementTranslator translator = new MySQLStatementTranslator ( STR_ ) ; for ( String testString : testStrings ) { System . out . println ", "public void createTopic ( String topic ) { createTopic ( topic , NUM_ , NUM_ , new Properties ( ) ) ; }", "void removeGroups ( String ... groups ) throws RestApiException ;", "private static CharHandler parseSimpleCodes(String[] codeStrings){\n  if (codeStrings.length != 1) {\n    throw new IllegalStateException(\"Unexpected code strings \" + Arrays.asList(codeStrings));\n  }\n  return new SimpleCharHandler(codesToBytes(codeStrings[0],true));\n}\n", "public void addInInclusionChain(final URI path, final String pointer)\n            throws XIncludeFatalException\n    {\n        final String xincludePath = path.toASCIIString() + ((null != pointer) ? ('#' + pointer) : \"\");\n        if (this.xincludeDeque.contains(xincludePath))\n        {\n            throw new XIncludeFatalException(\"Inclusion Loop on path: \" + xincludePath);\n        }\n        this.xincludeDeque.addLast(xincludePath);\n    }", "public CloseableReference<Bitmap> createBitmap(\n      int width,\n      int height,\n      @Nullable Object callerContext) {\n    return createBitmap(width, height, Bitmap.Config.ARGB_8888, callerContext);\n  }", "\tpublic void refreshBendpoints() {\n\t\tList bendpoints = ((IGraphicalEdgeInfo) ((IEdge) getModel())\n\t\t\t\t.getGraphicalInfo()).getBendpoints();\n\t\tList figureConstraint = figfac.determineGraphicalBendpoints(bendpoints,\n\t\t\t\tgetConnectionFigure());\n\t\t// the list of bendpoints is added as constraint to the\n\t\t// polyline-connection\n\t\tgetConnectionFigure().setRoutingConstraint(figureConstraint);\n\t}\n", "private void removeAllHotkeys(){\n  removeHotkeys(main.getRootPane());\n  for (  JDialog popout : popouts.keySet()) {\n    removeHotkeys(popout.getRootPane());\n  }\n  removeGlobalHotkeys();\n  removeHotkeysFromActions();\n}\n", "void onIceConnected ( ) ;", "public SeaGlassContext ( ) { super ( fakeComponent , fakeRegion , fakeStyle , NUM_ ) ; }", "@Override public boolean equals(Object obj){\n  if (!(obj instanceof XmlNamespace)) {\n    return false;\n  }\n  XmlNamespace other=(XmlNamespace)obj;\n  if (alias == null) {\n    return (other.alias == null) && uri.equals(other.uri);\n  }\n else {\n    return alias.equals(other.alias) && uri.equals(other.uri);\n  }\n}\n", "public Object apply ( String source , int lineNo , int columnNo , Object funcBody , Vector paramNames , Vector arguments ) throws BSFException { Object object = eval ( source , lineNo , columnNo , funcBody ) ; if ( object instanceof Closure ) { Closure cl", "protected void configureEndpointAccessForStaticResources(final ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry requests) {\n        requests\n            .requestMatchers(PathRequest.toStaticResources().atCommonLocations())\n            .permitAll();\n        requests\n            .antMatchers(\"/resources/**\")\n            .permitAll()\n            .antMatchers(\"/static/**\")\n            .permitAll();\n    }", "\tpublic void digest(final Peptide peptide) {\n\t\t\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"sequence to digest = \" + peptide);\n\t\t}\n\t\t\n\t\t// set the sequence that will be cut\n\t\tsetSequence(peptide);\n\t\t\n\t\t// first digest at all sites of the given sequence\n\t\tmakeTotalDigestion();\n\t\t\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"cleavage sites# = \" + numOfCleavageSites);\n\t\t\tlogger.debug(\"digests# = \" + digests.size());\n\t\t\tlogger.debug(digests);\n\t\t}\n\t\t\n\t\t// make partial digestion if defined\n\t\tif (missedCleavages > 0) {\n\t\t\tmakePartialDigestion();\n\t\t}\n\t\t\n\t\tfilteringDigestByLength();\n\t}\n", "  public boolean isCellEditable(int row, int col) {\n    Sequence s = getSequenceAt(row);\n    switch (col) {\n    \tcase 0: \n    \t\treturn s instanceof Renameable;\n    \tcase 1: \n    \t\treturn s instanceof ChangeableSequence;\n    \tdefault:\n    \t\tthrow new IllegalArgumentException(\"Column does not exist\");\n    }\n  }\n", "public final void close ( ) throws IOException { }", "    protected String formatWKT(final Formatter formatter) {\n        formatter.setInvalidWKT(GeneralParameterDescriptor.class);\n\n        return \"PARAMETER\";\n    }\n", "        private ValueHash valueTable( final String key ) {\n\t\t\treturn VALUE_TABLE.get( key );\t\t\t\t\n        }\n", "\tpublic float getTTS_rate() {\n\t\tProgressLogger.getInstance().debug(\"Enter getTTS_rate()\");\n\t\tProgressLogger.getInstance().debug(\"Exit getTTS_rate()\");\n\t\treturn TTS_rate;\n\t}\n", "public Enumeration < V > elements ( ) { return new ValueIterator ( ) ; }", "private void updateMinMax(Instance instance){\n  for (int j=0; j < instance.numAttributes(); j++) {\n    if (Double.isNaN(m_Min[j])) {\n      m_Min[j]=instance.value(j);\n      m_Max[j]=instance.value(j);\n    }\n else {\n      if (instance.value(j) < m_Min[j]) {\n        m_Min[j]=instance.value(j);\n      }\n else {\n        if (instance.value(j) > m_Max[j]) {\n          m_Max[j]=instance.value(j);\n        }\n      }\n    }\n  }\n}\n", "    public List findAll() {\n        List result = PersistentObjectCache.findAll(this);\n        // not cache all returns null.\n        if (result == null) {\n            this.listRowHandler.clear();\n            findAll(listRowHandler);\n            this.listRowHandler.trim();\n            result = (List) this.listRowHandler.getResult();\n        }\n        return result;\n    }\n", "public void testEncode ( ) { byte [ ] expectedReturn = msgFixture . connectionId ; connectionIdAttribute . setConnectionIdValue ( MsgFixture . CONNECTION_ID ) ; byte [ ] actualReturn = connectionIdAttribute . encode ( ) ; assertTrue ( STR_ + STR_ , Arrays . equals ( expectedReturn , actualReturn ) ) ; }", "public static HttpResponse executeGetRequest ( String serviceEndPoint , boolean secure ) throws IOException { URL url = ( secure ) ? new URL ( SERVICE_ROOT_URI + STR_ + serviceEndPoint ) : new URL ( SERVICE_ROOT_URI + serviceEndPoint ) ; HttpURLConnection", "public void finish ( ) { nextLine ( ) ; out . flush ( ) ; }", "    final public void rotate(NumberValue phiVal) {\n    \tdouble phi = phiVal.getDouble();\n\t\tdouble cos = Math.cos(phi);\n\t\tdouble sin = Math.sin(phi);\n        \n        double x0 = x * cos - y * sin;\n        y = x * sin + y * cos;\n        x = x0;        \n    }\n", "public <T extends Entry>void walk(Entry start,RepositoryVisitor<T> visitor,Class<T> visitedType) throws RepositoryException {\n  boolean continueChildren=true;\n  if (visitedType.isInstance(start)) {\n    continueChildren&=visitor.visit(visitedType.cast(start));\n  }\n  if (continueChildren && start instanceof Folder) {\n    Folder folder=(Folder)start;\n    for (    Entry child : folder.getDataEntries()) {\n      walk(child,visitor,visitedType);\n    }\n    for (    Folder childFolder : folder.getSubfolders()) {\n      walk(childFolder,visitor,visitedType);\n    }\n  }\n}\n", "< T > T fromData ( String input , Type type ) throws DataConverterException ;", "private void validateClosurePrimitive(Node n, JSDocInfo info) {\n    if (info == null || !info.hasClosurePrimitiveId()) {\n      return;\n    }\n\n    if (!isJSDocOnFunctionNode(n, info)) {\n      report(n, MISPLACED_ANNOTATION, \"closurePrimitive\", \"must be on a function node\");\n    }\n  }", "    protected void exportPage() {\n        // TODO Panda: exportPage\n        JFileChooser fc = HGBaseGuiTools.createFileChooser(ImpExpDescription, ImpExpExtension, null);\n        if (fc.showSaveDialog(getMainFrame())==JFileChooser.APPROVE_OPTION) {\n       ", "public void addListener ( final IViewNodeListener listener ) { m_listeners . addListener ( listener ) ; }", "\tpublic void clearLine(int line, int column, int orientation, int length) throws IOException {\n\t\tcursorMoveAbsolut(line, column);\n\t\tif (orientation == TerminalIOInterface.ORIENTATION_VERTIKAL) {\n\t\t\tfor (int i = 0; i < length; i++) {\n\t\t\t\twriteText(\" \", line + i, column);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tStringBuffer sb = new StringBuffer(length);\n\t\t\tfor (int i = 0; i < length; i++) {\n\t\t\t\tsb.append(\" \");\n\t\t\t}\n\t\t\twriteText(sb.toString());\n\t\t}\n\t}\n", "public List<HttpCookie> getHttpCookies() {\r\n        List<HttpCookie> cookies = new LinkedList<>();\r\n        // Use getCookieParams to reduce the places we parse cookies\r\n        TreeSet<HtmlParameter> ts = getCookieParams();\r\n        Iterator<HtmlParameter> it = ts.iterator();\r\n        while (it.hasNext()) {\r\n            HtmlParameter htmlParameter = it.next();\r\n            if (!htmlParameter.getName().isEmpty()) {\r\n                try {\r\n                    cookies.add(new HttpCookie(htmlParameter.getName(), htmlParameter.getValue()));\r\n                \r\n                } catch (IllegalArgumentException e) {\r\n                    // Occurs while scanning ;)\r\n                    log.debug(e.getMessage() + \" \" + htmlParameter.getName());\r\n                }\r\n            }\r\n        }\r\n        \r\n        return cookies;\r\n    }", "    public int getLength() {\n        if (textElements != null) {\n            return this.textElements.getTextLength();\n        } else {\n            return 0;\n        }\n    }\n", "public void writeExpression(Expression oldExp){\n  boolean internal=this.internal;\n  this.internal=true;\n  Object oldValue=getValue(oldExp);\n  if (get(oldValue) == null || (oldValue instanceof String && !internal)) {\n    getValueData(oldValue).exp=oldExp;\n    super.writeExpression(oldExp);\n  }\n  this.internal=internal;\n}\n", "@Override\n    public void start(StartContext startContext) throws StartException {\n        Path loc = location == null ? null : resolveLocation();\n        try {\n            ROOT_LOGGER.tracef(\"starting CredentialStore:  name = %s\", name);\n            credentialStoreAttributes.put(CS_LOCATION_ATTRIBUTE, loc == null ? null : loc.toAbsolutePath().toString());\n            CredentialStore cs = getCredentialStoreInstance();\n            Provider[] otherProvidersArr = otherProviders.getOptionalValue();\n            if (ROOT_LOGGER.isTraceEnabled()) {\n                ROOT_LOGGER.tracef(\n                        \"initializing CredentialStore:  name = %s  type = %s  provider = %s  otherProviders = %s  attributes = %s\",\n                        name, type, provider, Arrays.toString(otherProvidersArr), credentialStoreAttributes\n                );\n            }\n            synchronized (EmptyProvider.getInstance()) {\n                cs.initialize(credentialStoreAttributes, resolveCredentialStoreProtectionParameter(), otherProvidersArr);\n            }\n            if (credentialStoreAttributes.get(ElytronDescriptionConstants.CREATE).equals(\"true\") && loc != null && !loc.toFile().exists()){\n                ROOT_LOGGER.tracef(\"CredentialStore %s does not exist, creating\", name);\n                cs.flush();\n            }\n            credentialStore.set(cs);\n            ROOT_LOGGER.tracef(\"CredentialStore started:  name = %s  credentialStore = %s\", name, cs);\n        } catch (Exception e) {\n            throw ElytronSubsystemMessages.ROOT_LOGGER.unableToStartService(e);\n        }\n    }", "public List queryMultiObject(Collection queryParams, String sqlquery) throws Exception {\r\n\t\tJdbcTemp jdbcTemp = new JdbcTemp(dataSource);\r\n\t\treturn jdbcTemp.queryMultiObject(queryParams, sqlquery);\r\n\t}", "public int readFixed ( ) throws IOException { return this . readLong ( ) ; }", "abstract boolean isFromPool ( ) ;", "public static Object[] assertThreadIdToSequenceIdMapHasEntryIds(){\n  EventID[] evids=new EventID[5];\n  Map map=pool.getThreadIdToSequenceIdMap();\n  assertNotNull(map);\n  evids[0]=putAlleventId1;\n  evids[1]=putAlleventId2;\n  evids[2]=putAlleventId3;\n  evids[3]=putAlleventId4;\n  evids[4]=putAlleventId5;\n  assertNotNull(evids[0]);\n  assertNotNull(evids[1]);\n  assertNotNull(evids[2]);\n  assertNotNull(evids[3]);\n  assertNotNull(evids[4]);\n  return evids;\n}\n", "    public String getUnixCron() {\n        daemonProperties = new DaemonPropertiesHandler();\n        unixCron = daemonProperties.getCronPattern();\n        return unixCron;\n    }\n", "@Override\n    public CreateBillingGroupResult createBillingGroup(CreateBillingGroupRequest request) {\n        request = beforeClientExecution(request);\n        return executeCreateBillingGroup(request);\n    }", "private void restoreDynamicActions ( FacesContext context , StateContext stateContext , Map < String , Object > stateMap ) { if ( LOGGER . isLoggable ( Level . FINEST ) ) { LOGGER . finest ( STR_ ) ; } List < Object > savedActions = ( List < Object > ) st", "    public void remove(Creature creature) {\n        aggroList.remove(creature);\n    }\n", "public ObligationPolicyDatabaseEntry addParameterDeletesObligationDatabaseEntry ( XMethod xmethod , Obligation obligation , ObligationPolicyDatabaseEntryType entryType ) { ObligationPolicyDatabaseEntry entry = new MatchMethodEntry ( xmethod , ObligationPolicyDatabaseActionType . DEL , entryType , obligation ) ; addEntry ( entry ) ; return entry ; }", "private ScanState switchState(ScanState desired,EnumSet<ScanState> allowed){\n  final ScanState old;\n  final long timestamp;\n  final long sequence;\nsynchronized (this) {\n    old=state;\n    if (!allowed.contains(state))     throw new IllegalStateException(state.toString());\n    state=desired;\n    timestamp=System.currentTimeMillis();\n    sequence=getNextSeqNumber();\n  }\n  LOG.fine(\"switched state: \" + old + \" -> \"+ desired);\n  if (old != desired)   queueStateChangedNotification(sequence,timestamp,old,desired);\n  return old;\n}\n", "    public String getSizeString(int fileSize) {\n        String size;\n        if (fileSize >= sizeMb) {\n            size = \"\" + ((float) fileSize / (float) sizeMb);\n\n            return trimToOneDecimalPlace(size) + \" MB\";\n        } else if (fileSize >= sizeKb) {\n            size = \"\" + ((float) fileSize / (float) sizeKb);\n\n            return trimToOneDecimalPlace(size) + \" kb\";\n        } else {\n            return fileSize + \" bytes\";\n        }\n    }\n", "public final CompletableFuture<PartitionReceiver> createReceiver(final String consumerGroupName,final String partitionId,final Instant dateTime) throws ServiceBusException {\n  return PartitionReceiver.create(this.underlyingFactory,this.eventHubName,consumerGroupName,partitionId,null,false,dateTime,PartitionReceiver.NULL_EPOCH,false);\n}\n", "public String obtainFoundationForPeerReflexiveCandidate(){\n  return Integer.toString(lastAssignedRemoteFoundation++);\n}\n", "public PlogReaderThread.IncludePlog parseIncludePlogLCR(PlogReaderThread parent){\n  String filename=null;\n  for (  PlogLCRTag tag : rawTags) {\nswitch (tag.id) {\ncase PlogLCRTag.TAG_PLOG_FILENAME:\n      filename=tag.valueString();\n    break;\ncase PlogLCRTag.TAG_PLOGSEQ:\ncase PlogLCRTag.TAG_RBA:\ncase PlogLCRTag.TAG_APPLY_NAME:\ncase PlogLCRTag.TAG_MINE_UUID:\ncase PlogLCRTag.TAG_SCN:\ncase PlogLCRTag.TAG_PLOGNAME:\ndefault :\n}\n}\nreturn parent.new IncludePlog(filename);\n}\n", "public void onResponse ( T response ) ;", "public static void negateBoolean ( MethodVisitor mv ) { Label endLabel = new Label ( ) ; Label falseLabel = new Label ( ) ; mv . visitJumpInsn ( IFNE , falseLabel ) ; mv . visitInsn ( ICONST_1 ) ; mv . visitJumpInsn ( GOTO , endLabel ) ; mv . visitLabel ( falseLabel ) ; mv . visitInsn ( ICONST_0 ) ; mv . visitLabel ( endLabel ) ; }", "protected int bytesPerLine ( ) { return ( NUM_ ) ; }", "\tpublic void addSelectionListener(ConfigurationSelectionListener listener) {\n\t\tselectionListeners.add(listener);\n\t}\n", "public DGetNewPassword(JFrame parent,Dialog.ModalityType modality,PasswordQualityConfig passwordQualityConfig){\n  super(parent,res.getString(\"DGetNewPassword.Title\"),modality);\n  this.passwordQualityConfig=passwordQualityConfig;\n  initComponents();\n}\n", "protected boolean repeat ( int pointIndex ) { return ( ( getFlag ( pointIndex ) & NUM_ ) != NUM_ ) ; }", "public static boolean supportsWebActions ( AccessibilityNodeInfoCompat node ) { return AccessibilityNodeInfoUtils . supportsAnyAction ( node , AccessibilityNodeInfoCompat . ACTION_NEXT_HTML_ELEMENT , AccessibilityNodeInfoCompat . ACTION_PREVIOUS_HTML_ELEMENT ) ; }", "public double gaussianDownsideDeviation ( ) { return Math . sqrt ( gaussianDownsideVariance ( ) ) ; }", "@NotNull\n    public OptionalDouble filter(@NotNull DoublePredicate predicate) {\n        if (!isPresent()) return this;\n        return predicate.test(value) ? this : OptionalDouble.empty();\n    }", "protected void parseAvps(Document doc) {\r\n    // Format:  <avpdefn name=\"Talk-Burst-Volume\" code=\"1256\" vendor-id=\"TGPP\" mandatory=\"must\" protected=\"may\" may-encrypt=\"true\" vendor-bit=\"must\" >\r\n    //            <type type-name=\"Unsigned32\" />\r\n    //          </avpdefn>\r\n\r\n    NodeList avpDefnNodes = doc.getElementsByTagName(\"avpdefn\");\r\n\r\n    for (int i = 0; i < avpDefnNodes.getLength(); i++) {\r\n      Node avpNode = avpDefnNodes.item(i);\r\n      Element avpDefnElement = (Element) avpNode;\r\n\r\n      String avpName = avpDefnElement.getAttribute(\"name\");\r\n      String avpCode = avpDefnElement.getAttribute(\"code\");\r\n      String avpVendorId = avpDefnElement.getAttribute(\"vendor-id\");\r\n\r\n      String avpMandatory = avpDefnElement.getAttribute(\"mandatory\");\r\n      String avpProtected = avpDefnElement.getAttribute(\"protected\").equals(\"\") ? \"may\" : avpDefnElement.getAttribute(\"protected\");\r\n      String avpMayEncrypt = avpDefnElement.getAttribute(\"may-encrypt\");\r\n      String avpVendorBit = avpDefnElement.getAttribute(\"vendor-bit\");\r\n\r\n      long vendorCode = getVendorCode(avpVendorId);\r\n\r\n      // Let's figure out the type\r\n      // It can be:\r\n      // <type type-name=\"UTF8String\" />\r\n      //  OR\r\n      // <grouped> <avp name=\"PoC-Change-Time\" multiplicity=\"1\" /> ... </grouped>\r\n      //  OR\r\n      // <type type-name=\"Enumerated\"> <enum code=\"0\" name=\"MULTICAST\" /> ... </enumerated>\r\n      String avpOriginalType = UNDEFINED_AVP_TYPE;\r\n      String avpType = avpOriginalType;\r\n      List<AvpRepresentation> groupedAvpChilds = new ArrayList<AvpRepresentation>();\r\n\r\n      NodeList avpDefnChildNodes = avpNode.getChildNodes();\r\n      for (int j = 0; j < avpDefnChildNodes.getLength(); j++) {\r\n        Node avpDefnChildNode = avpDefnChildNodes.item(j);\r\n\r\n        if (avpDefnChildNode.getNodeType() == Node.ELEMENT_NODE) {\r\n          Element avpDefnChildElement = (Element) avpDefnChildNode;\r\n\r\n          if (avpDefnChildElement.getNodeName().equals(\"grouped\")) {\r\n            avpOriginalType = \"Grouped\";\r\n            avpType = avpOriginalType;\r\n\r\n            // Let's fetch the childs\r\n            // Format: <avp name=\"PoC-Change-Time\" multiplicity=\"1\" />\r\n            NodeList groupedAvpMembers = avpDefnChildElement.getChildNodes();\r\n\r\n            for (int gChildIndex = 0; gChildIndex < groupedAvpMembers.getLength(); gChildIndex++) {\r\n              Node groupedAvpChildNode = groupedAvpMembers.item(gChildIndex);\r\n\r\n              if (groupedAvpChildNode.getNodeType() == Node.ELEMENT_NODE) {\r\n                Element groupedAvpChildElement = (Element) groupedAvpChildNode;\r\n\r\n                String childName = null;\r\n                String childMultiplicity = AVP_DEFAULT_MULTIPLICITY;\r\n                String childIndexIndicator = AVP_DEFAULT_INDEX;\r\n\r\n                if (!groupedAvpChildElement.hasAttribute(\"name\")) {\r\n                  if (logger.isDebugEnabled()) {\r\n                    logger.debug(new StringBuffer(\"[ERROR] Grouped child does not have name, grouped avp:  Name[\").append(avpName).append(\"] Description[\")\r\n                        .append(\"\").append(\"] Code[\").append(avpCode).append(\"] May-Encrypt[\").append(avpMayEncrypt).append(\"] Mandatory[\")\r\n                        .append(avpMandatory).append(\"] Protected [\").append(avpProtected).append(\"] Vendor-Bit [\").append(avpVendorBit).append(\"] Vendor-Id [\")\r\n                        .append(avpVendorId).append(\"] Constrained[\").append(\"\").append(\"] Type [\").append(avpType).append(\"]\").toString());\r\n                  }\r\n                  continue;\r\n                }\r\n                else {\r\n                  childName = groupedAvpChildElement.getAttribute(\"name\");\r\n                }\r\n\r\n                childMultiplicity = groupedAvpChildElement.hasAttribute(\"multiplicity\") ?\r\n                    groupedAvpChildElement.getAttribute(\"multiplicity\") : AvpRepresentation._MP_ZERO_OR_MORE;\r\n\r\n                childIndexIndicator = groupedAvpChildElement.hasAttribute(\"index\") ?\r\n                        groupedAvpChildElement.getAttribute(\"index\") : \"-1\";\r\n\r\n                // have we parsed this child definition already?\r\n                AvpRepresentation childRep = this.avpByNameMap.get(childName);\r\n                AvpRepresentationImpl child = null;\r\n                if (childRep != null) {\r\n                  try {\r\n                    child = (AvpRepresentationImpl) childRep.clone();\r\n                  }\r\n                  catch (CloneNotSupportedException cnse) {\r\n                    // It should not happen, but anyway\r\n                    if (logger.isWarnEnabled()) {\r\n                      logger.warn(\"Unable to clone AVP \" + childRep, cnse);\r\n                    }\r\n                  }\r\n                }\r\n                else {\r\n                  child = new AvpRepresentationImpl(childName, vendorCode);\r\n                  child.markWeak(true);\r\n                }\r\n                child.setMultiplicityIndicator(childMultiplicity);\r\n                child.markFixPosition(Integer.valueOf(childIndexIndicator));\r\n\r\n                groupedAvpChilds.add(child);\r\n              }\r\n            }\r\n          }\r\n          else if (avpDefnChildElement.getNodeName().equals(\"type\")) {\r\n            avpOriginalType = avpDefnChildElement.getAttribute(\"type-name\");\r\n            avpType = avpOriginalType;\r\n            //FIXME: baranowb: why this is like that? This changes type of AVP to primitive ONE..? Checks against type dont make sense, ie to check for Address type...\r\n            avpType = typedefMap.get(avpType);\r\n\r\n            if (avpType == null) {\r\n              logger.warn(\"Unknown AVP Type ({}) for AVP with code {} and vendor-id {} \",\r\n                  new Object[] { avpDefnChildElement.getAttribute(\"type-name\"), avpCode, avpVendorId});\r\n            }\r\n          }\r\n          else {\r\n            logger.warn(\"Unknown AVP Definition child element for AVP with code {} and vendor-id {} \", avpCode, avpVendorId);\r\n          }\r\n        }\r\n      }\r\n\r\n      try {\r\n        AvpRepresentationImpl avp = null;\r\n\r\n        avp = new AvpRepresentationImpl(avpName, \"N/A\", Integer.valueOf(avpCode), avpMayEncrypt.equals(\"yes\"), avpMandatory,\r\n            avpProtected, avpVendorBit, vendorCode, avpOriginalType, avpType);\r\n\r\n        if (avp.isGrouped()) {\r\n          avp.setChildren(groupedAvpChilds);\r\n\r\n          // we are not strong enough, children are referenced ONLY by name, so we are\r\n          // weak until all children can be resolved to strong representation\r\n          avp.markWeak(true);\r\n        }\r\n\r\n        resolveWeakLinks(avp);\r\n\r\n        AvpRepresentation existingAvp = null;\r\n        if ((existingAvp = avpMap.get(avp)) != null) {\r\n          logger.warn(\"Duplicated AVP Definition for AVP Code: {}, Vendor-Id: {}. See TRACE logs for definitions.\", avp.getCode(), avp.getVendorId());\r\n          logger.trace(\"Existing AVP:\\r\\n {}\\r\\n New AVP:\\r\\n {}\", existingAvp, avp);\r\n        }\r\n        else {\r\n          avpMap.put(avp, avp);\r\n        }\r\n\r\n        AvpRepresentation oldAvp = avpByNameMap.put(avp.getName(), avp);\r\n\r\n        if (oldAvp != null) {\r\n          logger.debug(\"[WARN] Overwrited definition of AVP with the same name: Old: {}, New: {}\", new Object[] { oldAvp, avp });\r\n        }\r\n      }\r\n      catch (Exception e) {\r\n        if (logger.isDebugEnabled()) {\r\n          logger.debug(new StringBuffer(\"[ERROR] Failed Parsing AVP: Name[\").append(avpName).append(\"] Description[\").append(\"N/A\").\r\n              append(\"] Code[\").append(avpCode).append(\"] May-Encrypt[\").append(avpMayEncrypt).append(\"] Mandatory[\").append(avpMandatory).\r\n              append(\"] Protected [\").append(avpProtected).append(\"] Vendor-Bit [\").append(avpVendorBit).append(\"] Vendor-Id [\").append(avpVendorId).\r\n              append(\"] Constrained[\").append(\"N/A\").append(\"] OriginalType [\").append(avpOriginalType).\r\n              append(\"] Type [\").append(avpType).append(\"]\").toString(), e);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (AvpRepresentation rep : avpMap.values()) {\r\n      markWeaks((AvpRepresentationImpl) rep);\r\n    }\r\n  }", "public Tokenizer(Reader reader,int maxStringLength){\n  this.reader=reader;\n  this.maxStringLength=Math.max(1,maxStringLength);\n}\n", "public boolean removeElement(Node s){\n  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));\n  if (null == m_map)   return false;\n  for (int i=0; i < m_firstFree; i++) {\n    Node node=m_map[i];\n    if ((null != node) && node.equals(s)) {\n      if (i < m_firstFree - 1)       System.arraycopy(m_map,i + 1,m_map,i,m_firstFree - i - 1);\n      m_firstFree--;\n      m_map[m_firstFree]=null;\n      return true;\n    }\n  }\n  return false;\n}\n", "@Override public StringBuffer format(double number,StringBuffer toAppendTo,FieldPosition pos){\n  return toAppendTo.append(getDirectionCode(number));\n}\n", "  public void addPlaces(final Place[] places) {\n    mapDisplay.addPlaces(places);\n  }\n", "public Hash(byte[] hash){\n  if (hash.length != 32) {\n    throw new IllegalArgumentException(\"Digest length must be 32 bytes for Hash\");\n  }\n  this.bytes=new byte[32];\n  System.arraycopy(hash,0,this.bytes,0,32);\n}", "\tpublic void add(int index, ProdutoTecnologico o) {\n\t\tthis.impl.add(index,o);\n\t}\n", "public ServiceFuture<List<SasTokenInformationInner>> listSasTokensNextAsync(final String nextPageLink, final ServiceFuture<List<SasTokenInformationInner>> serviceFuture, final ListOperationCallback<SasTokenInformationInner> serviceCallback) {\n        return AzureServiceFuture.fromPageResponse(\n            listSasTokensNextSinglePageAsync(nextPageLink),\n            new Func1<String, Observable<ServiceResponse<Page<SasTokenInformationInner>>>>() {\n                @Override\n                public Observable<ServiceResponse<Page<SasTokenInformationInner>>> call(String nextPageLink) {\n                    return listSasTokensNextSinglePageAsync(nextPageLink);\n                }\n            },\n            serviceCallback);\n    }", "\tpublic int hashCode() {\n\t\treturn index;\n\t}\n", "private List < String > filterContent ( List < String > contentLines ) { contentLines = contentLines . stream ( ) . filter ( null ) . map ( null ) . collect ( toList ( ) ) ; return contentLines ; }", "    public Vector2f interpolate(Vector2f finalVec, float changeAmnt) {\n        this.x = (1 - changeAmnt) * this.x + changeAmnt * finalVec.x;\n        this.y = (1 - changeAmnt) * this.y + changeAmnt * finalVec.y;\n        return this;\n    }\n", "@Override\n    public AcceptHandshakeResult acceptHandshake(AcceptHandshakeRequest request) {\n        request = beforeClientExecution(request);\n        return executeAcceptHandshake(request);\n    }", "public CreateEventSubscriptionRequest withEventCategories(String... eventCategories) {\n        if (this.eventCategories == null) {\n            setEventCategories(new java.util.ArrayList<String>(eventCategories.length));\n        }\n        for (String ele : eventCategories) {\n            this.eventCategories.add(ele);\n        }\n        return this;\n    }", "public TableScan ( TableInfo ti , Transaction tx ) { rf = ti . open ( tx , BOOL_ ) ; schema = ti . schema ( ) ; }", "boolean isLeaf(treeNode node){\n\n\t\tif(node.lc == null && node.rc == null){\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\n\t}", "public static synchronized void resetUniqueIdCounter(){\n  synch_counter=0;\n}\n", "public IntBuffer put(int[] src,int srcOffset,int intCount){\n  if (isReadOnly()) {\n    throw new ReadOnlyBufferException();\n  }\n  JTranscArrays.checkOffsetAndCount(src.length,srcOffset,intCount);\n  if (intCount > remaining()) {\n    throw new BufferOverflowException();\n  }\n  for (int i=srcOffset; i < srcOffset + intCount; ++i) {\n    put(src[i]);\n  }\n  return this;\n}\n", "private static img createImage(String AD_Language,String name,String js_command,boolean enabled,boolean pressed){\n  StringBuffer imgName=new StringBuffer(name);\n  if (!enabled)   imgName.append(\"D\");\n else   if (pressed)   imgName.append(\"X\");\n  imgName.append(\"16.gif\");\n  img img=new img(WebEnv.getImageDirectory(imgName.toString()),name);\n  if (enabled)   img.setAlt(Msg.getMsg(AD_Language,name));\n  if (!pressed || !enabled)   img.setID(\"imgButton\");\n else   img.setID(\"imgButtonPressed\");\n  img.setHeight(16);\n  img.setWidth(16);\n  img.setBorder(0);\n  img.setTitle(name);\n  return img;\n}\n", "private void rebuildNode(){\n  m_realizer.regenerate();\n  m_graph.updateViews();\n}\n", "public static Status find(final UUID _uuid,\n                              final String _key)\n        throws CacheReloadException\n    {\n        return Status.get(_uuid).get(_key);\n    }", "public NotificationRecord[] readNotificationRecords(InputStream in) throws ConversionException, IOException, ClassNotFoundException {\n        JSONArray json = parseArray(in);\n        int size = json.size();\n        NotificationRecord[] ret = new NotificationRecord[size];\n        for (int i = 0; i < size; i++) {\n            Object o = json.get(i);\n            if (!(o instanceof JSONObject)) {\n                throwConversionException(\"readNotifications() expects a JSONObject.\", o);\n            }\n            JSONObject obj = (JSONObject) o;\n\n            // Fields common to all Notification classes.\n            String className = readStringInternal(obj.get(N_CLASSNAME));\n            String type = readStringInternal(obj.get(N_TYPE));\n            ObjectName source = readObjectName(obj.get(N_SOURCE));\n            long sequenceNumber = readLongInternal(obj.get(N_SEQUENCENUMBER));\n            long timeStamp = readLongInternal(obj.get(N_TIMESTAMP));\n            String message = readStringInternal(obj.get(N_MESSAGE));\n            Object userData = readPOJOInternal(obj.get(N_USERDATA));\n\n            // Read routing information (host name, server name, server user dir) if this is a routed notification.\n            String hostName = readStringInternal(obj.get(N_HOSTNAME));\n            String serverName;\n            String serverUserDir;\n            if (hostName != null) {\n                serverName = readStringInternal(obj.get(N_SERVERNAME));\n                serverUserDir = readStringInternal(obj.get(N_SERVERUSERDIR));\n            } else {\n                serverName = null;\n                serverUserDir = null;\n            }\n\n            Notification n;\n            if (\"javax.management.Notification\".equals(className)) {\n                n = new Notification(type, source, sequenceNumber, timeStamp, message);\n            } else if (\"javax.management.AttributeChangeNotification\".equals(className)) {\n                if (!AttributeChangeNotification.ATTRIBUTE_CHANGE.equals(type)) {\n                    throwConversionException(\"Type for AttributeChangeNotification should be ATTRIBUTE_CHANGE\", o);\n                }\n                String attributeName = readStringInternal(obj.get(N_ATTRIBUTENAME));\n                String attributeType = readStringInternal(obj.get(N_ATTRIBUTETYPE));\n                Object oldValue = readPOJOInternal(obj.get(N_OLDVALUE));\n                Object newValue = readPOJOInternal(obj.get(N_NEWVALUE));\n                n = new AttributeChangeNotification(source, sequenceNumber, timeStamp, message, attributeName, attributeType, oldValue, newValue);\n            } else if (\"javax.management.remote.JMXConnectionNotification\".equals(className)) {\n                String connectionId = readStringInternal(obj.get(N_CONNECTIONID));\n                n = new JMXConnectionNotification(type, source, connectionId, sequenceNumber, message, userData);\n                // Replace the value set by the constructor\n                n.setTimeStamp(timeStamp);\n            } else if (\"javax.management.MBeanServerNotification\".equals(className)) {\n                ObjectName objectName = readObjectName(obj.get(N_MBEANNAME));\n                n = new MBeanServerNotification(type, source, sequenceNumber, objectName);\n                // Replace the value set by the constructor\n                n.setTimeStamp(timeStamp);\n            } else if (\"javax.management.relation.RelationNotification\".equals(className)) {\n                String relationId = readStringInternal(obj.get(N_RELATIONID));\n                String typeName = readStringInternal(obj.get(N_RELATIONTYPENAME));\n                ObjectName objectName = readObjectName(obj.get(N_OBJECTNAME));\n                String roleName = readStringInternal(obj.get(N_ROLENAME));\n                if (roleName == null) {\n                    List<ObjectName> mbeansToUnregister = readObjectNameList(obj.get(N_MBEANSTOUNREGISTER));\n                    n = new RelationNotification(type, source, sequenceNumber, timeStamp, message, relationId, typeName, objectName, mbeansToUnregister);\n                } else {\n                    List<ObjectName> oldValue = readObjectNameList(obj.get(N_OLDROLEVALUE));\n                    List<ObjectName> newValue = readObjectNameList(obj.get(N_NEWROLEVALUE));\n                    n = new RelationNotification(type, source, sequenceNumber, timeStamp, message, relationId, typeName, objectName, roleName, oldValue, newValue);\n                }\n            } else if (\"javax.management.timer.TimerNotification\".equals(className)) {\n                Integer notificationID = readIntInternal(obj.get(N_NOTIFICATIONID));\n                n = new TimerNotification(type, source, sequenceNumber, timeStamp, message, notificationID);\n            } else {\n                Object serialized = readSerialized(obj.get(N_SERIALIZED));\n                if (!(serialized instanceof Notification)) {\n                    throwConversionException(\"readNotifications() expects a Notification.\", o);\n                }\n                n = (Notification) serialized;\n            }\n\n            n.setUserData(userData);\n\n            final NotificationRecord nr;\n            if (hostName != null) {\n                nr = new NotificationRecord(n, source, hostName, serverName, serverUserDir);\n            } else {\n                nr = new NotificationRecord(n, source);\n            }\n            ret[i] = nr;\n        }\n        return ret;\n    }", "protected void customizeRequest(Socket socket,\n                                    HttpRequest request)\n    {\n        try\n        {\n            if (request.getHttpConnection().isThrottled())\n            {\n                socket.setSoTimeout(getMaxIdleTimeMs());\n                request.getHttpConnection().setThrottled(false);\n            }\n        }\n        catch(Exception e)\n        {\n            LogSupport.ignore(log,e);\n        }\n    }", "public Observable<OperationStatus> deleteCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId) {\n        return deleteCompositeEntityWithServiceResponseAsync(appId, versionId, cEntityId).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {\n            @Override\n            public OperationStatus call(ServiceResponse<OperationStatus> response) {\n                return response.body();\n            }\n        });\n    }", "public static void addPropertyIntoObject(FileSystemObjectProperties key,String value,Object instance) throws Exception {\n  if (null != value) {\n    Method method=PropertySetterUtil.getMethod(key.getMethodName(),instance);\n    if (null == method) {\n      return;\n    }\n    Object typeCastedValue=PropertySetterUtil.typeCast(value,method);\n    if (null == typeCastedValue) {\n      return;\n    }\n    Object[] args=new Object[]{typeCastedValue};\n    if (null != method) {\n      method.invoke(instance,args);\n    }\n  }\n}\n", "private void removeThrownExceptionHierarchy(String thrownException) {\n        try {\n            if (Values.DOTTED_JAVA_LANG_EXCEPTION.equals(thrownException) || Values.DOTTED_JAVA_LANG_THROWABLE.equals(thrownException)) {\n                // Exception/Thro", "public void start()\r\n\t{\r\n\t  mThread = new Thread(mom);\r\n\t  mThread.setName(\"MonitorThead for \" + si.getServerConnection().getUrl());\r\n\t  mThread.start();\r\n\t}", "static int convertUnitsOrPercentage(String units,int defaultSuffix){\n  if (units == null) {\n    return -1;\n  }\n  boolean percentage=false;\n  if (units.charAt(units.length() - 1) == '%') {\n    percentage=true;\n    defaultSuffix=LENGTH_SUFFIX_PX;\n    units=units.substring(0,units.length() - 1);\n  }\n  int val=convertUnits(units,defaultSuffix);\n  if (percentage) {\n    val+=VAL_PERCENTAGE;\n  }\n  return val;\n}\n", "public void toggle ( boolean animate ) { toggle ( animate , fadeIn , fadeOut ) ; }", "private void readChunk() throws IOException {\n    if (mDataReader == null) {\n      mDataReader = mDataReaderFactory.create(mPos, mLength - mPos);\n    }\n\n    if (mCurrentChunk != null && mCurrentChunk.readableBytes() == 0) {\n      mCurrentChunk.release();\n      mCurrentChunk = null;\n    }\n    if (mCurrentChunk == null) {\n      mCurrentChunk = mDataReader.readChunk();\n    }\n  }", "public SequenceHandler addBinding(final Handler handler,final Expression<Boolean> postcondition){\n  bindings.add(new Binding(handler,postcondition));\n  return this;\n}\n", "private void pad(long pos) throws IOException {\n  long currIndex=cacheStart + cache.size() - 1;\n  long lastIndex=pos / BUFFER_LENGTH;\n  long numNewBuffers=lastIndex - currIndex;\n  for (long i=0; i < numNewBuffers; i++) {\n    try {\n      cache.add(new byte[BUFFER_LENGTH]);\n    }\n catch (    OutOfMemoryError e) {\n      throw new IOException(\"No memory left for cache!\");\n    }\n  }\n}\n", "public static boolean isFullCopyDetached(Volume volume,DbClient dbClient){\n  boolean result=false;\n  String replicaState=volume.getReplicaState();\n  if (!isVolumeFullCopy(volume,dbClient) && replicaState != null && !replicaState.isEmpty()) {\n    ReplicationState state=ReplicationState.getEnumValue(replicaState);\n    if (state != null && state == ReplicationState.DETACHED) {\n      result=true;\n    }\n  }\n  return result;\n}\n", "public static float Angle(float x, float y) {\r\n        if (y >= 0) {\r\n            if (x >= 0)\r\n                return (float) Math.atan(y / x);\r\n            return (float) (Math.PI - Math.atan(-y / x));\r\n        } else {\r\n            if (x >= 0)\r\n                return (float) (2 * Math.PI - Math.atan(-y / x));\r\n            return (float) (Math.PI + Math.atan(y / x));\r\n        }\r\n    }", "public void collectAndSetProperties(){\n  if (propertyConsumer != null) {\n    String prefix=propertyConsumer.getPropertyPrefix();\n    Properties props=collectProperties();\n    propertyConsumer.setProperties(prefix,props);\n  }\n}\n", "\tprotected void doSetNestedPath(String nestedPath) {\n\t\tif (nestedPath == null) {\n\t\t\tnestedPath = \"\";\n\t\t}\n\t\tif (nestedPath.length() > 0 && !nestedPath.endsWith(NESTED_PATH_SEPARATOR)) {\n\t\t\tnestedPath += NESTED_PATH_SEPARATOR;\n\t\t}\n\t\tthis.nestedPath = nestedPath;\n\t}\n", "public void addUserPresenceListener(UserPresenceListener userPresenceListener){\n  userPresenceListeners.add(userPresenceListener);\n}\n", "\tpublic void setLineColor(Color col) {\n\t\tif (col == null) {\n\t\t\tif (_lineColor == null)\n\t\t\t\treturn;\n\t\t} else {\n\t\t\tif (col.equals(_lineColor))\n\t\t\t\treturn;\n\t\t}\n\t\tif (col != null) {\n\t\t\tfirePropChange(\"lineColor\", _lineColor, col);\n\t\t\t_lineColor = col;\n\t\t} else {\n\t\t\tfirePropChange(\"lineWidth\", _lineWidth, 0);\n\t\t\t_lineWidth = 0;\n\t\t}\n\t\tMutableGraphSupport.enableSaveAction();\n\t}\n", "private Model readModel(final InputStream pomStream) throws MojoExecutionException {\r\n        Reader reader = null;\r\n        try {\r\n            reader = ReaderFactory.newXmlReader(pomStream);\r\n            return new MavenXpp3Reader().read(reader);\r\n        } catch (FileNotFoundException e) {\r\n            throw new MojoExecutionException(\"File not found \" + pomFile, e);\r\n        } catch (IOException e) {\r\n            throw new MojoExecutionException(\"Error reading POM \" + pomFile, e);\r\n        } catch (XmlPullParserException e) {\r\n            throw new MojoExecutionException(\"Error parsing POM \" + pomFile, e);\r\n        } finally {\r\n            IOUtil.close(reader);\r\n        }\r\n    }", "public void checkSubTree(TreePath tp, boolean check) {\n        CheckedNode cn = nodesCheckingState.get(tp);\n        cn.isSelected = check;\n        DefaultMutableTreeNode node = (DefaultMutableTreeNode) tp.getLastPathComponent();\n        for (int i = 0 ; i < node.getChildCount() ; i++) {              \n            checkSubTree(tp.pathByAddingChild(node.getChildAt(i)), check);\n        }\n        cn.allChildrenSelected = check;\n        if (check) {\n            checkedPaths.add(tp);\n        } else {\n            checkedPaths.remove(tp);\n        }\n        updatePredecessorsAllChildrenSelectedState(tp);\n    }", "public void chainWave ( AdvancedModelRenderer [ ] boxes , float speed , float degree , double rootOffset , float swing , float swingAmount ) { float offset = this . calculateChainOffset ( rootOffset , boxes ) ; for ( int index = NUM_ ; index < boxes . len", "void changedValue ( INaviOperandTreeNode operandTreeNode ) ;", "public final void build(GraphIterator<ST, PT> iterator, SubGraphBuildListener<ST, PT> listener) {\n\t\tassert iterator != null;\n\t\tfinal Set<ComparableWeakReference<PT>> reachedPoints = new TreeSet<>();\n\t\tGraphIterationElement<ST, PT> element;\n\t\tST segment;\n\t\tPT point;\n\t\tPT firstPoint = null;\n\n\t\tthis.parentGraph = new WeakReference<>(iterator.getGraph());\n\t\tthis.segments.clear();\n\t\tthis.pointNumber = 0;\n\t\tthis.terminalPoints.clear();\n\n\t\twhile (iterator.hasNext()) {\n\t\t\telement = iterator.nextElement();\n\t\t\tpoint = element.getPoint();\n\t\t\tsegment = element.getSegment();\n\n\t\t\t// First reached segment\n\t\t\tif (this.segments.isEmpty()) {\n\t\t\t\tfirstPoint = point;\n\t\t\t}\n\n\t\t\tthis.segments.add(segment);\n\t\t\tif (listener != null) {\n\t\t\t\tlistener.segmentAdded(this, element);\n\t\t\t}\n\n\t\t\t// Register terminal points\n\t\t\tpoint = segment.getOtherSidePoint(point);\n\t\t\tfinal ComparableWeakReference<PT> ref = new ComparableWeakReference<>(point);\n\t\t\tif (element.isTerminalSegment()) {\n\t\t\t\tif (!reachedPoints.contains(ref)) {\n\t\t\t\t\tthis.terminalPoints.add(ref);\n\t\t\t\t\tif (listener != null) {\n\t\t\t\t\t\tlistener.terminalPointReached(this, point, segment);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.terminalPoints.remove(ref);\n\t\t\t\treachedPoints.add(ref);\n\t\t\t\tif (listener != null) {\n\t\t\t\t\tlistener.nonTerminalPointReached(this, point, segment);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (firstPoint != null) {\n\t\t\tfinal ComparableWeakReference<PT> ref = new ComparableWeakReference<>(firstPoint);\n\t\t\tif (!reachedPoints.contains(ref)) {\n\t\t\t\tthis.terminalPoints.add(ref);\n\t\t\t}\n\t\t}\n\n\t\tthis.pointNumber = this.terminalPoints.size() + reachedPoints.size();\n\n\t\treachedPoints.clear();\n\t}", "public List<StorageFile> createStorageFilesFromEntities(Collection<StorageFileEntity> storageFileEntities){\n  List<StorageFile> storageFiles=new ArrayList<>();\n  for (  StorageFileEntity storageFileEntity : storageFileEntities) {\n    storageFiles.add(createStorageFileFromEntity(storageFileEntity));\n  }\n  return storageFiles;\n}\n", "@Deprecated\n    public static void changeValueCommand(final List<Command> response, final ServerAttribute attribute, final Object value) {\n        if (response == null) {\n            return;\n        }\n        if (attribute == null) {\n            LOG.error(\"Cannot change value on a null attribute to '{}'\", value);\n            return;\n        }\n        forceChangeValue(value, response, attribute);\n    }", "    protected Polygon createPolygon() {\n        Polygon poly = gf.createPolygon(ring(new double[] { 9, 5, 13, 5, 11, 8, 9, 5 }), null);\n        poly.setSRID(-1); // don't have an SRID number\n\n        return poly;\n    }\n", "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=new Vector<Option>(2);\n  result.addElement(new Option(\"\\tThe regular expression to match the attribute names against.\\n\" + \"\\t(default: \" + DEFAULT_EXPRESSION + \")\",\"E\",1,\"-E <regular expression>\"));\n  result.addElement(new Option(\"\\tFlag for inverting the matching sense. If set, attributes are kept\\n\" + \"\\tinstead of deleted.\\n\" + \"\\t(default: off)\",\"V\",0,\"-V\"));\n  result.addAll(Collections.list(super.listOptions()));\n  return result.elements();\n}\n", "public WMSService ( ) { setLayer ( STR_ ) ; setBaseUrl ( STR_ ) ; }", "public void release() {\n\n    parent = null;\n    firstChild = null;\n    prevSibling = null;\n    nextSibling = null;\n    allowChildren = true;\n  }", "public Set<String> getSearchIDs(String problemID){\n        if(!results.containsKey(problemID)){\n            throw new UnknownIDException(\"Unknown problem ID \" + problemID + \".\");\n        }\n        return Collections.unmodifiableSet(results.get(problemID).keySet());\n    }", "public boolean isLastFrag ( ) { return lastFrag ; }", "public void addJavaProperty ( String prop , String val ) { mJavaProperties . put ( prop , val ) ; }", "public void checkModuleSelectionList(List<String> moduleNames, String rfsAbsPath, boolean forDeletion)\n    throws CmsIllegalArgumentException, CmsConfigurationException {\n\n        Map<String, List<String>> moduleDependencies = buildDepsForAllModules(rfsAbsPath, forDeletion);\n        Iterator<String> itMods = moduleNames.iterator();\n        while (itMods.hasNext()) {\n            String moduleName = itMods.next();\n            List<String> dependencies = moduleDependencies.get(moduleName);\n            if (dependencies != null) {\n                List<String> depModules = new ArrayList<String>(dependencies);\n                depModules.removeAll(moduleNames);\n                if (!depModules.isEmpty()) {\n                    throw new CmsIllegalArgumentException(\n                        Messages.get().container(\n                            Messages.ERR_MODULE_SELECTION_INCONSISTENT_2,\n                            moduleName,\n                            depModules.toString()));\n                }\n            }\n        }\n    }", "String messageFormat(String key, Object... args) {\n        String rs = getResourceString(key);\n        return MessageFormat.format(rs, args);\n    }", "public static void logStatus ( final Logger logger , final ArticleReaderInterface articleReader , final long startTime , final long sleepingTime , final long workingTime ) { String message = STR_ + Time . toClock ( System . currentTimeMillis ( ) - startTi", "public Class<?> getClass(int id) throws IOException {\n      if (id < 0 || id > internalIdToClass.length) {\n         throw new IOException(\"Unknown class id \" + id);\n      }\n      Class<?> clazz = internalIdToClass[id];\n      if (clazz == null) {\n         throw new IOException(\"Unknown class id \" + id);\n      }\n      return clazz;\n   }", "public <T> T getInterface(String objectName, Class<T> clazz) {\n    Invocable inv = (Invocable) engine;\n    Object o = engine.get(objectName);\n    if (o == null) {\n      return null;\n    }\n    return inv.getInterface(o, clazz);\n  }", "    public void initSign(int hashID, PGPAlgorithmFactory factory) {\n        try {\n            String h = factory.getHashAlgorithmString(hashID);\n            sig = Signature.getInstance(h + \"withRSA\");\n            sig.initSign(new PGPRSAPrivateCrtKey());\n        } catch (InvalidKeyException ike) {\n            throw new IllegalStateException(\"InvalidKeyException\");\n        } catch(NoSuchAlgorithmException nsae) {\n            throw new RuntimeException(\"ElGamal algorithm not found.\");\n        }\n    }\n", "public static MappedMember findField ( MappedClass owner , String name , String desc ) { for ( MappedMember mm : owner . getFields ( ) ) { if ( matches ( mm , name , desc , BOOL_ ) ) { return mm ; } } return null ; }", "public boolean setFocus () {\n\tcheckWidget();\n\treturn forceFocus ();\n}\n", "  protected long checkForUpdatesInterval() {\n    return CheckForUpdates.ONE_MINUTE;\n  }\n", "\tpublic void getEntries(String query, int startingNumber) {\n\t\tstartWaiting();\n\t\tdictService.searchDictionary(getDictionaryId(),query, startingNumber, rowsPerPage,\n\t\t\t\tnew SearchEntriesCallback(query));\n\t}\n", "\tpublic void unselect() {\n\t\tcurrentlySelected.clear();\n\t\tpictureChanged();\n\t}\n", "\tpublic boolean updateIndex(String source, String target) {\n\n\t\tboolean isSuccessful = false;\n\t\tDocument doc = getLuceneDocument(source, target);\n\n\t\tboolean isDeleted = deleteLuceneDoc(source);\n\t\tif (isDeleted) {\n\t\t\ttry {\n\t\t\t\tisSuccessful = insertLuceneDoc(doc);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\treturn isSuccessful;\n\t}\n", "public MFCC(float sampleRate,int windowSize,int numberCoefficients,boolean useFirstCoefficient,double minFreq,double maxFreq,int numberFilters) throws IllegalArgumentException {\n  if (windowSize < 32) {\n    throw new IllegalArgumentException(\"window size must be at least 32\");\n  }\n else {\n    int i=32;\n    while (i < windowSize && i < Integer.MAX_VALUE)     i=i << 1;\n    if (i != windowSize)     throw new IllegalArgumentException(\"window size must be 2^n\");\n  }\n  sampleRate=Math.round(sampleRate);\n  if (sampleRate < 1)   throw new IllegalArgumentException(\"sample rate must be at least 1\");\n  if (numberFilters < 2 || numberFilters > (windowSize / 2) + 1)   throw new IllegalArgumentException(\"number filters must be at least 2 and smaller than the nyquist frequency\");\n  if (numberCoefficients < 1 || numberCoefficients >= numberFilters)   throw new IllegalArgumentException(\"the number of coefficients must be greater or equal to 1 and samller than the number of filters\");\n  if (minFreq <= 0 || minFreq > maxFreq || maxFreq > 88200.0f)   throw new IllegalArgumentException(\"the min. frequency must be greater 0 smaller than the max. frequency, which must be smaller than 88200.0\");\n  this.sampleRate=sampleRate;\n  this.windowSize=windowSize;\n  this.hopSize=windowSize / 2;\n  this.baseFreq=sampleRate / windowSize;\n  this.numberCoefficients=numberCoefficients;\n  this.useFirstCoefficient=useFirstCoefficient;\n  this.minFreq=minFreq;\n  this.maxFreq=maxFreq;\n  this.numberFilters=numberFilters;\n  inputData=new double[windowSize];\n  buffer=new double[windowSize];\n  melFilterBanks=getMelFilterBanks();\n  dctMatrix=getDCTMatrix();\n  normalizedPowerFFT=new FFT(FFT.FFT_NORMALIZED_POWER,windowSize,FFT.WND_HANNING);\n}\n", "public ModelAdapter<?, Item> move(int fromPosition, int toPosition) {\n        if (mOriginalItems != null) {\n            int preItemCount = mItemAdapter.getFastAdapter().getPreItemCount(fromPosition);\n            int adjustedFrom = getAdapterPosition(mItemAdapter.getAdapterItems().get(fromPosition));\n            int adjustedTo = getAdapterPosition(mItemAdapter.getAdapterItems().get(toPosition));\n            Item item = mOriginalItems.get(adjustedFrom - preItemCount);\n            mOriginalItems.remove(adjustedFrom - preItemCount);\n            mOriginalItems.add(adjustedTo - preItemCount, item);\n            performFiltering(mConstraint);\n            return mItemAdapter;\n        } else {\n            return mItemAdapter.move(fromPosition, toPosition);\n        }\n    }", "static boolean equal(Object v1,Object v2){\n  v1=maybeConvertToString(v1);\n  v2=maybeConvertToString(v2);\n  return Objects.equals(v1,v2);\n}\n", "\tpublic void updateRefreshTimer () {\n\t\tlast_modified = System.currentTimeMillis();\n\t}\n", "private static String typesString(Class[] types){\n  StringBuffer sb=new StringBuffer();\n  sb.append('(');\n  for (int i=0; i < types.length; i++) {\n    if (i != 0) {\n      sb.append(\", \");\n    }\n    sb.append(Utilities.typeString(types[i]));\n  }\n  sb.appen", "public boolean isBoundless(){\n  for (int i=1; i <= max; i++) {\n    if (!Double.isInfinite(region.getLeft(i))) {\n      return false;\n    }\n    if (!Double.isInfinite(region.getRight(i))) {\n      return false;\n    }\n  }\n  return true;\n}\n", "static UtilEvalError castError(Class lhsType,Class rhsType,int operation){\n  return castError(Reflect.normalizeClassName(lhsType),Reflect.normalizeClassName(rhsType),operation);\n}\n", "public TransportConfiguration(){\n  this.params=new HashMap<>();\n}\n", "boolean hasAttribute(String attribute) {\n        if(columnMetadata != null){\n            if(columnMetadata.containsKey(attribute)){\n                return true;\n            }else if(attribute.startsWith(\"\\\"\") && attribute.endsWith(\"\\\"\")){\n                return columnMetadata.containsKey(attribute.substring(1, attribute.length() - 1));\n            }\n        }\n        return false;\n    }", "public Face bindTexture(Texture texture){\n  this.texture=Optional.of(texture);\n  return this;\n}\n", "private void writeFiles(){\n  OperationsXml.save();\n}\n", "private void removeDelimiterKeepNode ( Delimiter delim ) { removeDelimiter ( delim ) ; }", "protected static final String getBookmarkName(String name, Locale locale) {\n\n        StringBuffer result = new StringBuffer(64);\n        result.append('/');\n        result.append(locale.toString());\n        result.append('/');\n        result.append(name);\n        return result.toString();\n    }", "public static final String convertHexChars(final String value){\n  if (value == null) {\n    return value;\n  }\n  final int escapeChar=value.indexOf(hashInt);\n  if (escapeChar == -1) {\n    return value;\n  }\n  final StringBuilder newString=new StringBuilder()", "\tpublic void delete(CoMatrixExercises2 entity) {\n\t\tEntityManagerHelper.log(\"deleting CoMatrixExercises2 instance\", Level.INFO, null);\n\t\ttry {\n\t\t\tentity = getEntityManager().getReference(CoMatrixExercises2.class, entity.getMatrixId());\n\t\t\tgetEntityManager().remove(entity);\n\t\t\tEntityManagerHelper.log(\"delete successful\", Level.INFO, null);\n\t\t} catch (RuntimeException re) {\n\t\t\tEntityManagerHelper.log(\"delete failed\", Level.SEVERE, re);\n\t\t\tthrow re;\n\t\t}\n\t}\n", "    protected void applyCustomization () {\n        setIncluded (MouseEvent.MOUSE_MOVED,\n            customization.getBoolean (\"MouseMotionEventMask.Include.MouseMoved\", false));\n        setIncluded (MouseEvent.MOUSE_DRAGGED,\n            customization.getBoolean (\"MouseMotionEventMask.Include.MouseDragged\", false));\n        setLagTime (customization.getInt (\"MouseMotionEventMask.MinimalLagTime\", DEFAULT_LAG_TIME));\n        fireEventMaskChange (new EventMaskEvent(env, this));\n    }\n", "    private void extractClasspathFromUris() {\n        assert uriClasspathList!=null;\n    }\n", "public Boolean isTriggerNotifyTemplate ( ) { return triggerNotifyTemplate ; }", "public static Properties loadChecksumFile(File csFile) {\n        InputStream csis = null;\n        Properties csprops = new Properties();\n        try {\n            csis = new FileInputStream(csFile);\n            csprops.load(csis);\n        } catch (IOException e) {\n            logger.log(Level.FINEST, \"Failed to load the checksum file: \" + csFile.getAbsolutePath(), e);\n        } finally {\n            InstallUtils.close(csis);\n        }\n        return csprops;\n    }", "    private void createUI() {\n        _content = new JPanel();\n        _content.setOpaque(true);\n        _content.setBackground(Color.black);\n        \n        Box b = Box.createVerticalBox();\n        b.add(Box.createVerticalStrut(10));\n        b.add(Box.createVerticalGlue());\n        \n        Box b2 = Box.createHorizontalBox();\n        b.add(b2);\n        b.add(Box.createVerticalGlue());\n        b.add(Box.createVerticalStrut(10));\n        b2.add(Box.createHorizontalStrut(10));\n        b2.add(Box.createHorizontalGlue());\n        b2.add(_content);\n        b2.add(Box.createHorizontalGlue());\n        b2.add(Box.createHorizontalStrut(10));\n        \n        setLayout(new BorderLayout());\n        add(b, BorderLayout.CENTER);\n    }\n", "public void readFrom(StreamInput in) throws IOException {\n  nodeId=in.readOptionalString();\n  state=State.fromValue(in.readByte());\n  reason=in.readOptionalString();\n}\n", "@Override\n    public boolean isCalendarTimer() {\n\n        final boolean isTraceOn = TraceComponent.isAnyTracingEnabled();\n        if (isTraceOn && tc.isEntryEnabled())\n            Tr.entry(tc, \"isCalendarTimer: \" + this);\n\n        // Determine if the calling bean is in a state that allows timer service\n        // method access - throws IllegalStateException if not allowed.\n        checkTimerAccess();\n\n        PersistentTimerTaskHandler taskHandler = getTimerTaskHandler(ALLOW_CACHED_TIMER_IS_CALENDAR_TIMER);\n        boolean result = taskHandler.getParsedSchedule() != null;\n\n        if (isTraceOn && tc.isEntryEnabled())\n            Tr.exit(tc, \"isCalendarTimer: \" + result);\n        return result;\n    }", "HttpResponseTemp < ? > changePassword ( ChangeUserPassword changeUserPassword ) ;", "    public Integer persist(OcZeitbestaetigung transientInstance) {\n        log.debug(\"persisting OcZeitbestaetigung instance\");\n        try {            \n            Integer ret = (Integer) sessionFactory.getCurrentSession().save(transientInstance); \n            log.debug(\"persist successful\");\n            return ret;\n        } catch (RuntimeException re) {\n            log.error(\"persist failed\", re);\n            Transaction tx = sessionFactory.getCurrentSession().getTransaction();\n            if (tx != null) {\n                log.error(\"executing rollback.\");\n                tx.rollback();\n            }\n            throw re;\n        }\n    }\n", "public ButtonColors ( Color top , Color leftOuter , Color leftInner , Color edge , Color edgeShade , Color shadow , Color interior ) { this . top = top ; this . leftOuter = leftOuter ; this . leftInner = leftInner ; this . edge = edge ; this . edgeShade = edgeShade ; this . shadow = shadow ; this . interior = interior ; }", "public void reset ( ) { m_cachedValuesSemaphore . acquireUninterruptibly ( ) ; m_modules . clear ( ) ; m_cachedValues = null ; m_cachedValuesSemaphore . release ( ) ; fireTableDataChanged ( ) ; }", "  public boolean equalp(SubLObject obj) {\n    if (obj == null) { return false; }\n    if (!obj.isString()) { return false; }\n    final SubLString other = obj.toStr();\n    if (other.size != size) {\n      return false;\n    }\n    for (int i = 0; i < size; i++) {\n      if (Character.toUpperCase(buf[i]) != Character.toUpperCase(other.buf[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n", "        public Reader chain(Reader reader) {\n            return new BaseFilterReader(reader) {\n                /**\n                 * @return the next non delete character\n                 */\n                public int read()\n                    throws IOException {\n                    while (true) {\n                        int c = in.read();\n                        if (c == -1) {\n                            return c;\n                        }\n                        if (!(isDeleteCharacter((char) c))) {\n                            return c;\n                        }\n                    }\n                }\n            };\n        }\n", "public AuthenticatorResult authenticate ( String username , String password , Context context ) throws ResourceException { final ConnectionFactory connectionFactory = connectionFactoryProvider . get ( ) ; if ( connectionFactory == null ) { throw new Inter", "public void setData(final List data) {\n\t\t// Bean properties to render\n\t\tString[] properties = new String[]{\"colour\", \"shape\", \"animal\"};\n\n\t\tsimpleTable.setDataModel(new SimpleBeanListTableDataModel(properties, data));\n\t}", "public GetLicenseConfigurationResult withLicenseRules(String... licenseRules) {\n        if (this.licenseRules == null) {\n            setLicenseRules(new java.util.ArrayList<String>(licenseRules.length));\n        }\n        for (String ele : licenseRules) {\n            this.licenseRules.add(ele);\n        }\n        return this;\n    }", "void inTransaction ( IReplicationInContext context , ITransactionInContext transactionContext ) throws Exception ;", "public static DbArtifact createDbArtifact(final String gavc) {\n        final DbArtifact artifact = new DbArtifact();\n        final String[] artifactInfo = gavc.split(\":\");\n\n        if(artifactInfo.length > 0){\n            artifact.setGroupId(artifactInfo[0]);\n        }\n\n        if(artifactInfo.length > 1){\n            artifact.setArtifactId(artifactInfo[1]);\n        }\n\n        if(artifactInfo.length > 2){\n            artifact.setVersion(artifactInfo[2]);\n        }\n\n        if(artifactInfo.length > 3){\n            artifact.setClassifier(artifactInfo[3]);\n        }\n\n        if(artifactInfo.length > 4){\n            artifact.setExtension(artifactInfo[4]);\n        }\n\n        if(artifactInfo.length > 5){\n            artifact.setOrigin(artifactInfo[5]);\n        }\n\n        return artifact;\n    }", "    public void removeTreeModelListener(TreeModelListener l) {\n        listeners.remove(TreeModelListener.class, l);\n    }\n", "public CAbstractNodeComponent ( final LayoutManager layout ) { super ( layout ) ; }", "private static ObjectIdentifier algOID(String name) throws IOException {\n        // See if algname is in printable OID (\"dot-dot\") notation\n        if (name.indexOf('.') != -1) {\n            if (name.startsWith(\"OID.\")) {\n                return new ObjectIdentifier(name.substring(\"OID.\".length()));\n            } else {\n                return new ObjectIdentifier(name);\n            }\n        }\n\n        // Digesting algorithms\n        if (name.equalsIgnoreCase(\"MD5\")) {\n            return AlgorithmId.MD5_oid;\n        }\n        if (name.equalsIgnoreCase(\"MD2\")) {\n            return AlgorithmId.MD2_oid;\n        }\n        if (name.equalsIgnoreCase(\"SHA\") || name.equalsIgnoreCase(\"SHA1\")\n            || name.equalsIgnoreCase(\"SHA-1\")) {\n            return AlgorithmId.SHA_oid;\n        }\n        if (name.equalsIgnoreCase(\"SHA-256\") ||\n            name.equalsIgnoreCase(\"SHA256\")) {\n            return AlgorithmId.SHA256_oid;\n        }\n        if (name.equalsIgnoreCase(\"SHA-384\") ||\n            name.equalsIgnoreCase(\"SHA384\")) {\n            return AlgorithmId.SHA384_oid;\n        }\n        if (name.equalsIgnoreCase(\"SHA-512\") ||\n            name.equalsIgnoreCase(\"SHA512\")) {\n            return AlgorithmId.SHA512_oid;\n        }\n\n\n        // Various public key algorithms\n        if (name.equalsIgnoreCase(\"RSA\")) {\n            return AlgorithmId.RSAEncryption_oid;\n        }\n        if (name.equalsIgnoreCase(\"Diffie-Hellman\")\n            || name.equalsIgnoreCase(\"DH\")) {\n            return AlgorithmId.DH_oid;\n        }\n        if (name.equalsIgnoreCase(\"DSA\")) {\n            return AlgorithmId.DSA_oid;\n        }\n        if (name.equalsIgnoreCase(\"EC\")) {\n            return EC_oid;\n        }\n\n        // Common signature types\n        if (name.equalsIgnoreCase(\"MD5withRSA\")\n            || name.equalsIgnoreCase(\"MD5/RSA\")) {\n            return AlgorithmId.md5WithRSAEncryption_oid;\n        }\n        if (name.equalsIgnoreCase(\"MD2withRSA\")\n            || name.equalsIgnoreCase(\"MD2/RSA\")) {\n            return AlgorithmId.md2WithRSAEncryption_oid;\n        }\n        if (name.equalsIgnoreCase(\"SHAwithDSA\")\n            || name.equalsIgnoreCase(\"SHA1withDSA\")\n            || name.equalsIgnoreCase(\"SHA/DSA\")\n            || name.equalsIgnoreCase(\"SHA1/DSA\")\n            || name.equalsIgnoreCase(\"DSAWithSHA1\")\n            || name.equalsIgnoreCase(\"DSS\")\n            || name.equalsIgnoreCase(\"SHA-1/DSA\")) {\n            return AlgorithmId.sha1WithDSA_oid;\n        }\n        if (name.equalsIgnoreCase(\"SHA1WithRSA\")\n            || name.equalsIgnoreCase(\"SHA1/RSA\")) {\n            return AlgorithmId.sha1WithRSAEncryption_oid;\n        }\n        if (name.equalsIgnoreCase(\"SHA1withECDSA\")\n                || name.equalsIgnoreCase(\"ECDSA\")) {\n            return AlgorithmId.sha1WithECDSA_oid;\n        }\n        if (name.equalsIgnoreCase(\"SHA224withECDSA\")) {\n            return AlgorithmId.sha224WithECDSA_oid;\n        }\n        if (name.equalsIgnoreCase(\"SHA256withECDSA\")) {\n            return AlgorithmId.sha256WithECDSA_oid;\n        }\n        if (name.equalsIgnoreCase(\"SHA384withECDSA\")) {\n            return AlgorithmId.sha384WithECDSA_oid;\n        }\n        if (name.equalsIgnoreCase(\"SHA512withECDSA\")) {\n            return AlgorithmId.sha512WithECDSA_oid;\n        }\n\n        // See if any of the installed providers supply a mapping from\n        // the given algorithm name to an OID string\n        synchronized (oidTable) {\n            reinitializeMappingTableLocked();\n            return oidTable.get(name.toUpperCase(Locale.ENGLISH));\n        }\n    }", "public void testGetDataLength ( ) { char expectedReturn = ( char ) realmValue . length ( ) ; char actualReturn = realmAttribute . getDataLength ( ) ; assertEquals ( STR_ , expectedReturn , actualReturn ) ; }", "\tprotected void fireContentChanged() {\n\t\tif (fListenerList != null) {\n\t\t\tObject[] listeners= fListenerList.getListeners();\n\t\t\tfor (int i= 0; i < listeners.length; i++)\n\t\t\t\t((IContentChangeListener)listeners[i]).contentChanged(this);\n\t\t}\n\t}\n", "public K firstKey(){\n  Iterator<K> it=keyIterator(null);\n  return it.hasNext() ? it.next() : null;\n}\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "private String processIndexLine(String line) throws IOException {\n        if (line.trim().equals(MDW_ADMIN_CSS)) {\n            // insert custom user stylesheets\n            String indent = line.substring(0, line.indexOf(MDW_ADMIN_CSS));\n            StringBuffer insert = new StringBuffer(line);\n            for (File cssFile : WebAppContext.listOverrideFiles(\"css\")) {\n                insert.append(\"\\n\").append(indent);\n                insert.append(\"<link rel=\\\"stylesheet\\\" href=\\\"css/\");\n                insert.append(cssFile.getName());\n                insert.append(\"\\\">\");\n            }\n            return insert.toString();\n        }\n        else if (line.trim().equals(MDW_ADMIN_JS)) {\n            // insert custom user scripts\n            String indent = line.substring(0, line.indexOf(MDW_ADMIN_JS));\n            StringBuffer insert = new StringBuffer(line);\n            for (File jsFile : WebAppContext.listOverrideFiles(\"js\")) {\n                insert.append(\"\\n\").append(indent);\n                insert.append(\"<script src=\\\"js/\");\n                insert.append(jsFile.getName());\n                insert.append(\"\\\"></script>\");\n            }\n            return insert.toString();\n        }\n        else {\n            return line;\n        }\n    }", "public Vector2 round ( ) { return new Vector2 ( Math . round ( x ) , Math . round ( z ) ) ; }", "public static ZonedDateTimeIterator createDateTimeIterator(\n            String rdata, ZonedDateTime start, ZoneId tzid, boolean strict)\n            throws ParseException {\n        return new RecurrenceIteratorWrapper(\n                RecurrenceIteratorFactory.createRecurrenceIterator(\n                        rdata, zonedDateTimeToDateValue(start.withZoneSameInstant(tzid)),\n                        TimeZoneConverter.toTimeZone(tzid), strict));\n    }", "protected void addLine(PrintWriter file,String string){\n  log.debug(string);\n  if (file != null) {\n    file.println(string);\n  }\n}\n", "  private void prepareStreams(Socket socket) throws IOException {\n\n    m_Input = new DataInputStream(\n        new BufferedInputStream(socket.getInputStream())\n    );\n    m_Output = new DataOutputStream(\n        new BufferedOutputStream(socket.getOutputStream())\n    );\n    m_ByteIn = new BytesInputStream(Modbus.MAX_MESSAGE_LENGTH);\n  }//prepareStreams\n", "void close ( ) throws IOException ;", "protected Object evaluateLeftContainsRight(List elements,String lvalue,String rvalue){\n  List array;\n  if (elements instanceof java.util.Vector) {\n    array=new java.util.Vector();\n  }\n else {\n    array=new ArrayList();\n  }\n  for (Iterator e=elements.iterator(); e.hasNext(); ) {\n    Object o=e.next();\n    if (o instanceof StructuredContent) {\n      if ((o=evaluateLeftContainsRight((StructuredContent)o,lvalue,rvalue)) != null) {\n        array.add(o);\n      }\n    }\n  }\n  if (array.size() == 1) {\n    return (StructuredContent)array.get(0);\n  }\n  return array;\n}\n", "    public void unsetState (int state) {\n        this.state = this.state - (this.state & state);\n    }\n", "public static boolean hasExtension(String extension){\n  if (extension == null || extension.isEmpty()) {\n    return false;\n  }\n  return extensionToMimeTypeMap.containsKey(extension);\n}\n", "public static boolean areAllPermissionsGranted(@NonNull final Context context,\n                                                   @NonNull final String... permissions) {\n        Condition.INSTANCE.ensureNotNull(context, \"The context may not be null\");\n        Condition.INSTANCE.ensureNotNull(permissions, \"The array may not be null\");\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            for (String permission : permissions) {\n                if (!isPermissionGranted(context, permission)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }", "            protected void addBefore(final ChainedEntry<V> existingEntry) {\n                next = existingEntry;\n                prev = existingEntry.prev;\n                if(prev != null) {\n                    prev.next = this;\n                }\n                next.prev = this;\n            }\n", "public String [ ] list ( FilePath path ) ;", "public Shape screenToChartShape(Shape s){\n  GeneralPath p=new GeneralPath();\n  Transform t=Transform.makeIdentity();\n  if (currentTransform != null) {\n    t.concatenate(currentTransform.getInverse());\n  }\n  t.translate(-getAbsoluteX(),-getAbsoluteY());\n  p.append(s.getPathIterator(t),false);\n  return p;\n}\n", "private DoubleConstant parseDoubleConstant(int index) throws IOException {\n  long bits=readLong();\n  double value=Double.longBitsToDouble(bits);\n  return new DoubleConstant(_class.getConstantPool(),index,value);\n}\n", "\tpublic ActionListener createZoomInListener() {\n\t\treturn new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tZoomRequestMessage msg = new ZoomRequestMessage(this,\n\t\t\t\t\t\tZoomType.ZOOM_IN);\n\t\t\t\tmediator.getZoomRequestNotifier().notifyListeners(msg);\n\t\t\t}\n\t\t};\n\t}\n", "    protected SeriesText getLegendSeriesText() {\n        for (int i=0;i<chartArr.size();i++) {\n            BiffRec br = (BiffRec)chartArr.get(i);\n            if (br.getOpcode()==AI) {\n                Ai thisAi = (Ai)br;\n                if (thisAi.getType() == Ai.TYPE_TEXT) {\n                    if (chartArr.size()>i+1) {\n                        try {\n                            SeriesText st = (SeriesText)chartArr.get(i+1);\n                            return st;\n                        }catch(ClassCastException e) {\n                            // couldn't find it!\n                            return null;\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    }\n", "public static boolean isEmpty ( String string ) { if ( null == string ) return BOOL_ ; return string . equals ( EMPTY ) ; }", "public void add ( Complex sample ) { mBuffer [ mBufferPointer ++ ] = sample ; if ( mBufferPointer >= mBuffer . length ) { mBufferPointer = NUM_ ; } }", "public BlockingObservableAssert < T > fails ( ) { isNotNull ( ) ; assertThat ( getBlockingObservableExecutor ( ) . hasFailed ( ) ) . overridingErrorMessage ( STR_ ) . isTrue ( ) ; return this ; }", "public static void connectViewsFunctions ( final CConnection connection , final int moduleId , final int firstViewId ) throws SQLException { Preconditions . checkNotNull ( connection , STR_ ) ; final String query = STR_ ; final CallableStatement call = co", "public HttpContext service(HttpRequest request,HttpResponse response)\n        throws IOException, HttpException\n    {\n        String host=request.getHost();\n\n        if (_requestsPerGC>0 && _gcRequests++>_requestsPerGC)\n        {\n            _gcRequests=0;\n            System.gc();\n        }\n        \n        while (true)\n        {\n            PathMap contextMap=(PathMap)_virtualHostMap.get(host);\n            if (contextMap!=null)\n            {\n                List contextLists =contextMap.getMatches(request.getPath());\n                if(contextLists!=null)\n                {\n                    if(log.isTraceEnabled())log.trace(\"Contexts at \"+request.getPath()+\": \"+contextLists);\n                    \n                    for (int i=0;i<contextLists.size();i++)\n                    {\n                        Map.Entry entry=\n                            (Map.Entry)\n                            contextLists.get(i);\n                        List contextList = (List)entry.getValue();\n                \n                        for (int j=0;j<contextList.size();j++)\n                        {\n                            HttpContext context=\n                                (HttpContext)contextList.get(j);\n                            \n                            if(log.isDebugEnabled())log.debug(\"Try \"+context+\",\"+j);\n\n                            context.handle(request,response);\n                            if (request.isHandled())\n                                return context;\n                        }\n                    }   \n                }\n            }\n            \n            // try no host\n            if (host==null)\n                break;\n            host=null;\n        }\t\n\n        synchronized(this)\n        {\n            if (_notFoundContext==null)\n            {\n                _notFoundContext=new HttpContext();\n                _notFoundContext.setContextPath(\"/\");\n                _notFoundContext.setHttpServer(this);\n\n                try\n                {\n                    _notFoundContext\n                        .addHandler((NotFoundHandler)Class.forName\n                                    (\"org.browsermob.proxy.jetty.http.handler.RootNotFoundHandler\").newInstance());\n                }\n                catch (Exception e)\n                {\n                    _notFoundContext.addHandler(new NotFoundHandler());\n                }\n                \n                addComponent(_notFoundContext);\n                try{_notFoundContext.start();}catch(Exception e){log.warn(LogSupport.EXCEPTION,e);}\n            }\n            \n            _notFoundContext.handle(request,response);\n            if (!request.isHandled())\n                response.sendError(HttpResponse.__404_Not_Found);\n            return _notFoundContext;\n        }\n    }", "public boolean isSet(final OPTION option){\n  return options == null ? false : options.contains(option);\n}\n", "public static InetAddress getLocalAddress() throws UnknownHostException, SocketException {\n        InetAddress addr = InetAddress.getLocalHost();\n        NetworkInterface nif = NetworkInterface.getByInetAddress(addr);\n        if (addr.isLoopbackAddress() || addr instanceof Inet6Address || nif == null) {\n            // Find local address that isn't a loopback address\n            InetAddress lookedUpAddr = findLocalAddressViaNetworkInterface();\n            // If a local, multicast enabled address can be found, use it. Otherwise\n            // we are using the local address, which might not be what you want\n            addr = lookedUpAddr != null ? lookedUpAddr : InetAddress.getByName(\"127.0.0.1\");\n        }\n        return addr;\n    }", "public boolean hasChangesSinceInitialization(){\n  return (lastUpdateSinceInitialization != null);\n}\n", "public void stop(BundleContext context) throws Exception {\n        ClassServiceUtility.log(context, LogService.LOG_INFO, \"Stopping ObrClassFinderImpl\");\n\n        super.stop(context);\n        repositoryAdmin = null;\n        waitingForRepositoryAdmin = false;\n        waitingForClassService = false;\n        ClassFinderActivator.setClassFinder(null);\n    }", "\tpublic boolean isTimerScheduled() {\n\t\treturn this.timerScheduled;\n\t}\n", "private CGlobalSettings ( ) { }", "    private SensorBinding getSensorBinding(Sensor sensor) {\n\tfor (int i = 0 ; i < bindingsList.size() ; i++) {\n\t    SensorBinding sb = (SensorBinding)bindingsList.get(i) ;\n\t    if (sb.sensor == sensor)\n\t\treturn sb ;\n\t}\n\treturn null ;\n    }\n", "public void registerUsedModule(String moduleName){\n  if (!usedModules.contains(moduleName)) {\n    usedModules.add(moduleName);\n  }\n}\n", "public static ConnectionFactory configureConnectionFactory(final JsonValue configuration,final String name,final TrustManager trustManager,final X509KeyManager keyManager,final ClassLoader providerClassLoader){\n  final JsonValue normalizedConfiguration=normalizeConnectionFactory(configuration,name,0);\n  return configureConnectionFactory(normalizedConfiguration,trustManager,keyManager,providerClassLoader);\n}\n", "public Response andHeaders(Map<HttpString, String> headers) {\n        Objects.requireNonNull(headers, Required.HEADERS.toString());\n        this.headers.putAll(headers);\n\n        return this;\n    }", "private static TxnManager constrainServer ( TxnManager server , MethodConstraints constraints ) { RemoteMethodControl constrainedServer = ( ( RemoteMethodControl ) server ) . setConstraints ( constraints ) ; return ( ( TxnManager ) constrainedServer ) ; }", "public boolean checkForAlreadyExistingNodesAndGenerateError(EclipseNode builderType,SingularData data){\n  for (  EclipseNode child : builderType.down()) {\nswitch (child.getKind()) {\ncase FIELD:\n{\n        FieldDeclaration fd=(FieldDeclaration)child.get();\n        char[] name=fd.name;\n        if (name == null)         continue;\n        if (getGeneratedBy(fd) != null)         continue;\n        for (        char[] fieldToBeGenerated : listFieldsToBeGenerated(data,builderType)) {\n          if (!Arrays.equals(name,fieldToBeGenerated))           continue;\n          child.addError(\"Manually adding a field that @Singular @Builder would generate is not supported. If you want to manually manage the builder aspect for this field/parameter, don't use @Singular.\");\n          return true;\n        }\n        break;\n      }\ncase METHOD:\n{\n      AbstractMethodDeclaration method=(AbstractMethodDeclaration)child.get();\n      char[] name=method.selector;\n      if (name == null)       continue;\n      if (getGeneratedBy(method) != null)       continue;\n      for (      char[] methodToBeGenerated : listMethodsToBeGenerated(data,builderType)) {\n        if (!Arrays.equals(name,methodToBeGenerated))         continue;\n        child.addError(\"Manually adding a method that @Singular @Builder would generate is not supported. If you want to manually manage the builder aspect for this field/parameter, don't use @Singular.\");\n        return true;\n      }\n      break;\n    }\n}\n}\nreturn false;\n}\n", "    public int getOwnershipOfItem(int bid){\n        try {\n            //Create a statement, a SQL string and execute the sql string with the statement\n            Statement statement = con.createStatement();\n            String sqlstring = \"Select OWNER from items where bid = '\"+bid+\"'\";\n            ResultSet rs = statement.executeQuery(sqlstring);\n            //Move ResultSet to the first row\n            rs.next();\n            return rs.getInt(1);\n            \n        } catch (SQLException ex) {\n            ex.printStackTrace();\n            return -1;\n        }\n    }\n", "protected static void addStreamsOptions(ContextMenu m,int numStreams){\n  addStreamsOptions(m,numStreams,true);\n}\n", "private boolean isModified(){\n  long uidListModified=uidFile.lastModified();\n  long curModified=curFolder.lastModified();\n  long newModified=newFolder.lastModified();\n  if (curModified >= uidListModified || newModified >= uidListModified) {\n    return true;\n  }\n  return false;\n}\n", "\tpublic ResultSet executeSQLAdvance(String sqlQuery) {\n\t\ttry {\n\t\t\tresults = statement.executeQuery(sqlQuery);\n\t\t\tresults.next();\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tSystem.err.println(\"Problem with executing an SQL statement!\\nSQL: \"+sqlQuery);\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn results;\n\t}\n", "\tpublic FontMetrics getLineReferenceFontMetrics(Graphics2D graphics) {\n\t\tif (lineReferenceFont == null)\n\t\t\tthrow new IllegalStateException(\"Chunk \" + this\n\t\t\t\t\t+ \" no line reference font set!\");\n\t\treturn graphics.getFontMetrics(lineReferenceFont);\n\t}\n", "public OsmAgentApp(){\n  Locale.setDefault(Locale.US);\n}\n", "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return SECONDS_TO_SLEEP;\ndefault :\n  return null;\n}\n}", "protected UserApiKey fetchApiKeyInternal(final ObjectId id) {\n    final StitchAuthRequest.Builder reqBuilder = new StitchAuthRequest.Builder();\n    reqBuilder\n            .withMethod(Method.GET)\n            .withPath(routes.getApiKeyRouteForId(id.toHexString()))\n            .withRefreshToken();\n    return getRequestClient().doAuthenticatedRequest(\n            reqBuilder.build(),\n            new UserApiKeyDecoder()\n    );\n  }", "int adjustIconOffset ( int offset ) { maxIconOffset = Math . max ( maxIconOffset , offset ) ; return maxIconOffset ; }", "  public int getSize() {\n    int size = 5;\n    try {\n      size += (url.getBytes(\"UTF-8\").length + target.getBytes(\"UTF-8\").length);\n    } catch (UnsupportedEncodingException e) {\n      // UTF-8 should be available\n    }\n    return size;\n  }\n", "private void doSelfValidationQuery() throws Throwable {\n  TermQuery tq=new TermQuery(new Term(ServiceDocument.FIELD_NAME_SELF_LINK,getSelfLink()));\n  ServiceDocumentQueryResult rsp=new ServiceDocumentQueryResult();\n  Operation op=Operation.createGet(getUri());\n  EnumSet<QueryOption> options=EnumSet.of(QueryOption.INCLUDE_ALL_VERSIONS);\n  IndexSearcher s=new IndexSearcher(DirectoryReader.open(this.writer,true,true));\n  queryIndex(op,options,s,tq,null,Integer.MAX_VALUE,0,null,rsp,null);\n}\n", "public static void showGroupNodeCommentDialog ( final JFrame parent , final CGroupNode node ) { final DialogEditGroupNodeComment dlg = new DialogEditGroupNodeComment ( parent , node ) ; GuiHelper . centerChildToParent ( parent , dlg , BOOL_ ) ; dlg . setVisible ( BOOL_ ) ; }", "  public void setDate(String name, java.sql.Date value) throws SQLException {\n    \n    for (int i : getVariablePositions(name)) {\n      setDate(i, value);\n    }\n  }\n", "public void setMetadataStructureLevel(int YNum, int cc,\r\n\t    List<TextPiece> wordsOfAPage, DocInfo m_docInfo) {\r\n\tString rowHeading = this.getRowHeadings();\r\n\tint heads = this.getHeadingLineNumber();\r\n\tint footnoteLineIndex = this.getFootnoteBeginRow();\r\n\tint MAXcolumnNum = this.getMaxColumnNumber();\r\n\tfloat[] leftX_tableColumns = this.getLeftX_tableColumns();\r\n\tfloat[] rightX_tableColumns = this.getRightX_tableColumns();\r\n\tString[][] cells = this.getCells();\r\n\tString detailedTableMeta = \"\";\r\n\tdetailedTableMeta = \"<TableColumnHeading>\\n\" + m_columnHeadings\r\n\t\t+ \"</TableColumnHeading>\" + \"\\n\";\r\n\r\n\tdetailedTableMeta = detailedTableMeta + \"<TableContent>\\n\";\r\n\tfor (int tt = (heads + 1); tt < footnoteLineIndex; tt++) {\r\n\t    int cellNumThisRow = cells[tt].length;\r\n\t    String contentThisRow = \"\";\r\n\t    for (int i = 0; i < cellNumThisRow; i++) {\r\n\t\tcontentThisRow = contentThisRow + cells[tt][i] + \";\";\r\n\t    }\r\n\t    contentThisRow = replaceAllSpecialChracters(contentThisRow);\r\n\t    this.m_tablecontent += contentThisRow + \"\\n\"; // for standard XML\r\n\t\t\t\t\t\t\t  // only\r\n\t    detailedTableMeta = detailedTableMeta + contentThisRow + \"\\n\";\r\n\t}\r\n\tdetailedTableMeta = detailedTableMeta + \"</TableContent>\" + \"\\n\";\r\n\trowHeading = replaceAllSpecialChracters(rowHeading);\r\n\tdetailedTableMeta = detailedTableMeta + \"<TableRowHeading>\"\r\n\t\t+ m_rowHeadings + \"</TableRowHeading>\" + \"\\n\";\r\n\r\n\tdetailedTableMeta = detailedTableMeta + \"<TableFootnote>\";\r\n\tint footnote = footnoteLineIndex;\r\n\twhile (footnote < YNum) {\r\n\t    int cellNumThisRow = this.getRows().get(footnote).getCells().size();\r\n\t    String contentThisRow = \"\";\r\n\t    for (int i = 0; i < cellNumThisRow; i++) {\r\n\t\tcontentThisRow = contentThisRow\r\n\t\t\t+ this.getRows().get(footnote).getCells().get(i)\r\n\t\t\t\t.getText() + \"\\t\";\r\n\t    }\r\n\t    contentThisRow = replaceAllSpecialChracters(contentThisRow);\r\n\t    m_footnoteText = m_footnoteText + contentThisRow + \"\\n\";\r\n\t    footnote++;\r\n\t}\r\n\tdetailedTableMeta = detailedTableMeta + m_footnoteText\r\n\t\t+ \"... </TableFootnote>\" + \"\\n\";\r\n\r\n\tif (MAXcolumnNum < cc)\r\n\t    MAXcolumnNum = cc;\r\n\tdetailedTableMeta = detailedTableMeta + \"<ColumnNum>\" + cc\r\n\t\t+ \"</ColumnNum>\" + \"\\n\";\r\n\r\n\tdetailedTableMeta = detailedTableMeta + \"<RowNum>\" + footnoteLineIndex\r\n\t\t+ \"</RowNum>\" + \"\\n\";\r\n\r\n\tString columnCoordinates = \"\";\r\n\tfor (int qq = 0; qq < cc; qq++) {\r\n\t    columnCoordinates = columnCoordinates + \"(\"\r\n\t\t    + leftX_tableColumns[qq] + \",\" + rightX_tableColumns[qq]\r\n\t\t    + \"); \";\r\n\t}\r\n\tcolumnCoordinates = replaceAllSpecialChracters(columnCoordinates);\r\n\tdetailedTableMeta = detailedTableMeta + \"<ColumnCoordinates>\"\r\n\t\t+ columnCoordinates + \"</ColumnCoordinates>\" + \"\\n\";\r\n\r\n\tthis.m_height = wordsOfAPage.get(this.getBodyEndLine()).getEndY()\r\n\t\t- wordsOfAPage.get(this.getBodyStartLine()).getY();\r\n\tdetailedTableMeta = detailedTableMeta + \"<TableHeight>\" + this.m_height\r\n\t\t+ \"</TableHeight>\" + \"\\n\";\r\n\r\n\tthis.m_width = rightX_tableColumns[cc - 1] - leftX_tableColumns[0];\r\n\tdetailedTableMeta = detailedTableMeta + \"<TableWidth>\" + this.m_width\r\n\t\t+ \"</TableWidth>\" + \"\\n\";\r\n\tif (m_WideTable == false) { // fix the wideTableOrNot based on the width\r\n\t    if (rightX_tableColumns[cc - 1] > (m_docInfo.getMiddleX())\r\n\t\t    && leftX_tableColumns[0] < m_docInfo.getMiddleX())\r\n\t\tm_WideTable = true;\r\n\t}\r\n\tdetailedTableMeta = detailedTableMeta + \"<isWideTable>\" + m_WideTable\r\n\t\t+ \"</isWideTable>\\n\";\r\n\tm_referenceText = replaceAllSpecialChracters(m_referenceText);\r\n\tdetailedTableMeta = detailedTableMeta + \"<TableReferenceText>\"\r\n\t\t+ m_referenceText + \"</TableReferenceText>\" + \"\\n\";\r\n\tdetailedTableMeta = detailedTableMeta + \"</Table>\" + \"\\n\";\r\n\r\n\tsetMetadataStructureLevel(detailedTableMeta);\r\n\tint tableNum = m_docInfo.getTableNum();\r\n\tm_docInfo.setTableNum(tableNum + 1);\r\n    }", "  public String getPlotPoints() {\n    StringBuffer buf = new StringBuffer();\n    if (m_plotPoints != null) \n      for (int i=0; i < m_plotPoints.length; i++) {\n\tbuf.append(m_plotPoints[i]);\n\tif (i != (m_plotPoints.length -1)) \n\t  buf.append(\" \");\n      }\n    return buf.toString();\n  }\n", "private String getLabel(int i)\n\t{\n\t\tfor (String label : labelMap.keySet())\n\t\t{\n\t\t\tif (labelMap.get(label) == i) return label;\n\t\t}\n\t\treturn null;\n\t}", "private void stop(final AliveTimer aliveTimer){\n  if (aliveTimer.isActive()) {\n    if (LOGGER.isDebugEnabled()) {\n      StringBuffer str=new StringBuffer(\"stop() : stopping alive for \");\n      str.append(aliveTimer.getAliveTypeDescription() + \" \");\n      str.append(aliveTimer.getRelatedName());\n      str.append(\".\");\n      LOGGER.debug(str.toString());\n    }\n    aliveTimer.setActive(false);\n    aliveTimer.setLastUpdate(System.currentTimeMillis());\n  }\n}\n", "public boolean userHasLock(String username) {\n        Objects.requireNonNull(username, Required.USERNAME.toString());\n        boolean lock = false;\n        \n        Config config = Application.getInstance(Config.class);\n        Cache cache = Application.getInstance(CacheProvider.class).getCache(CacheName.AUTH);\n        AtomicInteger counter = cache.getCounter(username);\n        if (counter != null && counter.get() > config.getAuthenticationLock()) {\n            lock = true;\n        }\n        \n        return lock;\n    }", "private String buildProvisioningAddress(){\n  String mnc=String.format(Locale.US,\"%03d\",mRcsSettings.getMobileNetworkCode());\n  String mcc=String.format(Locale.US,\"%03d\",mRcsSettings.getMobileCountryCode());\n  return \"config.rcs.mnc\" + mnc + \".mcc\"+ mcc+ \".pub.3gppnetwork.org\";\n}\n", "public boolean matchKeyword ( String keyword ) { return tok . ttype == StreamTokenizer . TT_WORD && tok . sval . equals ( keyword ) && keywords . contains ( tok . sval ) ; }", "        public void replyReport(Result result, String report) {\n            sendMessage(new ReportReply(result, report));\n        }\n", "private static void s_uaColSumEqNe(MatrixBlock in,MatrixBlock out,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {\n  int agg0=sumEqNe(0.0,bv,bOp);\n  out.allocateDenseBlock(true);\n  Arrays.fill(out.getDenseBlock(),0,out.getNumColumns(),agg0);\n  if (agg0 != 0.0)   out.setNonZeros(out.getNumColumns());\n  if (in.isEmptyBlock(false))   return;\n  SparseBlock sblock=in.getSparseBlock();\n  for (int j=0; j < sblock.numRows(); j++)   if (!sblock.isEmpty(j)) {\n    int apos=sblock.pos(j);\n    int alen=sblock.size(j);\n    int[] aix=sblock.indexes(j);\n    double[] avals=sblock.values(j);\n    for (int i=apos; i < apos + alen; i++) {\n      int cnt=sumEqNe(avals[i],bv,bOp);\n      out.quickSetValue(0,aix[i],cnt);\n    }\n  }\n}\n", "public HttpRequest part ( final String name , final String filename , final File part ) throws HttpRequestException { return part ( name , filename , null , part ) ; }", "  public void setColors(float x, float y, float z, float a) {\n    int c = parent.color(x, y, z, a);\n    updateAllColors(c);\n  }\n", "public static int strcmp(String str,char[] a,int start){\n  int i;\n  int d;\n  int len=str.length();\n  for (i=0; i < len; i++) {\n    d=(int)str.charAt(i) - a[start + i];\n    if (d != 0) {\n      return d;\n    }\n    if (a[start + i] == 0) {\n      return d;\n    }\n  }\n  if (a[start + i] != 0) {\n    return -a[start + i];\n  }\n  return 0;\n}\n", "private PDFObject readName ( ) throws IOException { StringBuffer sb = new StringBuffer ( ) ; int c ; while ( isRegularCharacter ( c = buf . get ( ) ) ) { if ( c < STR_ && c > STR_ ) { break ; } if ( c == STR_ && ( majorVersion != NUM_ && minorVersion != N", "public static PushNotificationPayload combined(String message, int badge, String sound) {\r\n\t\tif (message == null && badge < 0 && sound == null) throw new IllegalArgumentException(\"Must provide at least one non-null argument\");\r\n\t\tPushNotificationPayload payload = complex();\r\n\t\ttry {\r\n\t\t\tif (message != null) payload.addAlert(message);\r\n\t\t\tif (badge >= 0) payload.addBadge(badge);\r\n\t\t\tif (sound != null) payload.addSound(sound);\r\n\t\t} catch (JSONException e) {\r\n\t\t}\r\n\t\treturn payload;\r\n\t}", "public void init ( ) throws ServletException { }", "\tprivate boolean isNameEquals(SearchConditions sc,CatalogEntry ce) {\n\t\tif ( null != sc.getClassName() ) {\n\t\t\tif ( !sc.getClassName().equals(ce.getClassName()) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n", "public boolean declaresField(Field field){\n  try {\n    type.getDeclaredField(field.getName());\n    return true;\n  }\n catch (  NoSuchFieldException e) {\n    return false;\n  }\n}\n", "public void testRecognizeFullCone_Local_v6_Public_v4 ( ) throws Exception { Response testIResponse1 = MessageFactory . create3489BindingResponse ( mappedClientAddress_v4 , responseServerAddress_v6 , responseServerAddress_v6 ) ; Response testIResponse2 = M", "\tpublic void removeNamespaceDeclaration(final Namespace additionalNamespace) {\n\t\tif (this.additionalNamespaces == null) {\n\t\t\treturn;\n\t\t}\n\t\tthis.additionalNamespaces.remove(additionalNamespace);\n\t}\n", "private TransportChannelHandler createChannelHandler(Channel channel, RpcHandler rpcHandler) {\n    TransportResponseHandler responseHandler = new TransportResponseHandler(channel);\n    TransportClient client = new TransportClient(channel, responseHandler);\n    TransportRequestHandler requestHandler = new TransportRequestHandler(channel, client,\n      rpcHandler, conf.maxChunksBeingTransferred());\n    return new TransportChannelHandler(client, responseHandler, requestHandler,\n      conf.connectionTimeoutMs(), closeIdleConnections, this);\n  }", "\tpublic ScalarModel getPropertyModel(PropertyMemento pm) {\n\t\tScalarModel scalarModel = propertyScalarModels.get(pm);\n\t\tif (scalarModel == null) {\n\t\t\tscalarModel = new ScalarModel(getObjectAdapterMemento(), pm);\n\t\t\tif (isViewMode()) {\n\t\t\t\tscalarModel.toViewMode();\n\t\t\t} else {\n\t\t\t\tscalarModel.toEditMode();\n\t\t\t}\n\t\t\tpropertyScalarModels.put(pm, scalarModel);\n\t\t}\n\t\treturn scalarModel;\n\t\t\n\t}\n", "public boolean toggle(Long key){\n  if (contains(key)) {\n    remove(key);\n    return false;\n  }\n else {\n    add(key);\n    return true;\n  }\n}", "public List<CmsOrganizationalUnit> getOrganizationalUnits(CmsObject cms, String ouFqn, boolean includeChildren)\n    throws CmsException {\n\n        CmsOrganizationalUnit parent = readOrganizationalUnit(cms, ouFqn);\n        return m_securityManager.getOrganizationalUnits(cms.getRequestContext(), parent, includeChildren);\n    }", "\tpublic Object getImage(Object object) {\n\t\treturn overlayImage(object, getResourceLocator().getImage(\n\t\t\t\t\"full/obj16/FinalState\")); //$NON-NLS-1$\n\t}\n", "public String generateToken(TokenOptions tokenOptions) throws OpenTokException {\n        // Token format\n        //\n        // | ------------------------------  tokenStringBuilder ----------------------------- |\n        // | \"T1==\"+Base64Encode(| --------", "private static int writeSize(List<? extends OffsettedItem> items){\n  OffsettedItem first=items.get(0);\n  return (items.size() * first.writeSize()) + getAlignment(items);\n}\n", "  public int getYposWithoutTopMarginAdjustment() {\n    // Convert 100% scale mYpos to zoom factor then return\n    return (int) Math.round(mPclRenderImage.getCurrentZoomFactor() * \n        (double)mYpos);\n  }\n", "\tpublic void run() {\n\t\tFindReplaceDialog dlg = new FindReplaceDialog(shell, doc, viewer);\n\t\tdlg.open();\n\t}\n", "    public boolean isLeaf(Object node) {\n        try {\n            return ((TreeNode) node).isLeaf();\n        }\n        catch (ClassCastException ex) { // not a TreeNode?\n            return getChildCount(node) == 0;\n        }\n    }\n", "public void setTraces(Trace... traces) {\n        this.traces.clear();\n        for (Trace trace : traces) {\n            if (!trace.addReplacements(this.traces)) {\n                this.traces.add(trace);\n            }\n        }\n    }", "    private void acceptFileSlot(String text) {\n        if(! (fileName.getSelectedItem() instanceof File &&\n                ((File) fileName.getSelectedItem()).toString().equals(text)))\n            fileName.setSelectedItem(text);\n        if (fileName.isPopupVisible()) {\n            fileName.setPopupVisible(false);\n            return;\n        }\n        acceptFileSlot();\n    }\n", "public static void registerFieldPrefix(final String prefix){\n  if (prefix != null && prefix.length() > 0) {\n    fieldPrefixes.add(prefix);\n  }\n}\n", "   public void visit(DRenaming n, A argu) {\n      n.nodeChoice.accept(this, argu);\n   }\n", "  protected void checkIndices( int i, int j ) throws BlockException {\n\n    if( i < 0 )\n      throw new BlockFailure( \"Block#checkIndices -- index i is negative\" );\n\n    if( j < 0 )\n      throw new BlockFailure( \"Block#checkIndices -- index j is negative\" );\n\n    if( i >= _noOfRows )\n      throw new BlockFailure( \"Block#checkIndices -- index i is out of bound\" );\n\n    if( j >= _noOfCols )\n      throw new BlockFailure( \"Block#checkIndices -- index j is out of bound\" );\n\n  }\n", "public DSTZone buildTailZone(String id){\n  if (iRules.size() == 2) {\n    Rule startRule=iRules.get(0);\n    Rule endRule=iRules.get(1);\n    if (startRule.getToYear() == Integer.MAX_VALUE && endRule.getToYear() == Integer.MAX_VALUE) {\n      return new DSTZone(id,iStandardOffset,startRule.iRecurrence,endRule.iRecurrence);\n    }\n  }\n  return null;\n}\n", "public static void delete(final String id) throws AppPlatformException, IOException {\n        assert(id != null);\n        final BandwidthClient client = BandwidthClient.getInstance();\n        client.delete(client.getUserResourceInstanceUri(BandwidthConstants.DOMAINS_URI_PATH, id));\n    }", "    private void invokeX10C(Collection<IFile> sources) {\n        X10DTCorePlugin.getInstance().maybeWriteInfoMsg(\"Running X10C on source file set '\" + fileSetToString(sources) + \"'...\");\n        clearMarkersOn(sources);\n        compileAllSources(sources);\n        X10DTCorePlugin.getInstance().maybeWriteInfoMsg(\"X10C completed on source file set.\");\n    }\n", "protected void configureFoursquareClient(final Collection<BaseClient> properties) {\n        val foursquare = pac4jProperties.getFoursquare();\n        if (StringUtils.isNotBlank(foursquare.getId()) && StringUtils.isNotBlank(foursquare.getSecret())) {\n            val client = new FoursquareClient(foursquare.getId(), foursquare.getSecret());\n            configureClient(client, foursquare);\n\n            LOGGER.debug(\"Created client [{}] with identifier [{}]\", client.getName(), client.getKey());\n            properties.add(client);\n        }\n    }", "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=new Vector<Option>();\n  result.addElement(new Option(\"\\tPrints this help.\",\"h\",1,\"-h\"));\n  result.addElement(new Option(\"\\tThe name of the output file, otherwise the generated data is\\n\" + \"\\tprinted to stdout.\",\"o\",1,\"-o <file>\"));\n  result.addElement(new Option(\"\\tThe name of the relation.\",\"r\",1,\"-r <name>\"));\n  result.addElement(new Option(\"\\tWhether to print debug informations.\",\"d\",0,\"-d\"));\n  result.addElement(new Option(\"\\tThe seed for random function (default \" + defaultSeed() + \")\",\"S\",1,\"-S\"));\n  return result.elements();\n}\n", "public int byteSize ( ) { if ( text == null ) { return NUM_ ; } return NUM_ + text . length ( ) ; }", "public DetachReply ( final int packetId , final int errorCode ) { super ( packetId , errorCode ) ; }", "public static boolean belowThan(long a,long b){\n  return Long.compareUnsigned(a,b) < 0;\n}\n", "public static void dropAllTables ( SQLiteDatabase db , boolean ifExists ) { BookDao . dropTable ( db , ifExists ) ; }", "    protected void generateQ(final int q){\n        for (int i = this.cache.size(); i < q; i++){\n            this.cache.add(new Hashtable<String, Hashtable<String, Integer>>(100));\n        }\n    }\n", "public boolean isConnectorUseSSL ( ) { return connectorUseSSL ; }", "public boolean isObfuscated(final Argument argument){\n  return obfuscatedArgs.contains(argument);\n}", "    public void out (Object key, Object value) {\n        out (key, value, -1);\n    }\n", "public CompiledClass(DataInputStream source) throws IOException {\n  int idx;\n  magic=(long)source.readInt();\n  minor_version=source.readUnsignedShort();\n  major_version=source.readUnsignedShort();\n  constant_pool_count=source.readUnsignedShort();\n  constant_pool=new Cp[constant_pool_count];\n  constant_pool[0]=null;\n  for (idx=1; idx < constant_pool_count; idx++) {\n    constant_pool[idx]=Cp.readCp(source);\n    if ((constant_pool[idx] instanceof CpLong) || (constant_pool[idx] instanceof CpDouble))     idx++;\n  }\n  access_flags=source.readUnsignedShort();\n  this_class=source.readUnsignedShort();\n  super_class=source.readUnsignedShort();\n  interfaces_count=source.readUnsignedShort();\n  interfaces=new int[interfaces_count];\n  for (idx=0; idx < interfaces_count; idx++) {\n    interfaces[idx]=source.readUnsignedShort();\n  }\n  fields_count=source.readUnsignedShort();\n  fields=new CompiledField[fields_count];\n  for (idx=0; idx < fields_count; idx++) {\n    fields[idx]=new CompiledField(source,this);\n  }\n  methods_count=source.readUnsignedShort();\n  methods=new CompiledMethod[methods_count];\n  for (idx=0; idx < methods_count; idx++) {\n    methods[idx]=new CompiledMethod(source,this);\n  }\n  attributes_count=source.readUnsignedShort();\n  attributes=new CompiledAttribute[attributes_count];\n  for (idx=0; idx < attributes_count; idx++) {\n    attributes[idx]=new CompiledAttribute(source);\n  }\n}\n", "public void recordTimeout(String trackerName) {\n    synchronized (this) {\n      NodeUsageReport usageReport = getReportUnprotected(trackerName);\n      usageReport.setNumTimeout(usageReport.getNumTimeout() + 1);\n    }\n  }", "static byte[] discardWhitespace(byte[] data){\n  byte groomedData[]=new byte[data.length];\n  int bytesCopied=0;\n  for (int i=0; i < data.length; i++) {\nswitch (data[i]) {\ncase (byte)' ':\ncase (byte)'\\n':\ncase (byte)'\\r':\ncase (byte)'\\t':\n      break;\ndefault :\n    groomedData[bytesCopied++]=data[i];\n}\n}\nbyte packedData[]=new byte[bytesCopied];\nSystem.arraycopy(groomedData,0,packedData,0,bytesCopied);\nreturn packedData;\n}\n", "public static String getDisplayText(OptionalIdentifiedDefinition camelNode) {\n        String id = camelNode.getId();\n        if (!Strings2.isEmpty(id)) {\n            return id;\n        }\n        if (camelNode instanceof FromDefinition) {\n            FromDefinition node = (FromDefinition) camelNode;\n            return getUri(node);\n        } else if (camelNode instanceof ToDefinition) {\n            ToDefinition node = (ToDefinition) camelNode;\n            return getUri(node);\n        } else if (camelNode instanceof BeanDefinition) {\n            BeanDefinition node = (BeanDefinition) camelNode;\n            return \"bean \" + getOrBlank(node.getRef());\n        } else if (camelNode instanceof CatchDefinition) {\n            CatchDefinition node = (CatchDefinition) camelNode;\n            List exceptions = node.getExceptions();\n            if (exceptions != null && exceptions.size() > 0) {\n                return \"catch \" + exceptions;\n            } else {\n                return \"catch \" + Expressions.getExpressionOrElse(node.getHandled());\n            }\n        } else if (camelNode instanceof ChoiceDefinition) {\n            return \"choice\";\n        } else if (camelNode instanceof ConvertBodyDefinition) {\n            ConvertBodyDefinition node = (ConvertBodyDefinition) camelNode;\n            return \"convertBodyTo \" + getOrBlank(node.getType());\n        } else if (camelNode instanceof EnrichDefinition) {\n            EnrichDefinition node = (EnrichDefinition) camelNode;\n            //return \"enrich \" + getOrBlank(node.getResourceUri());\n            return \"enrich \" + Expressions.getExpressionOrElse(node.getExpression());\n        } else if (camelNode instanceof FinallyDefinition) {\n            return \"finally\";\n        } else if (camelNode instanceof InOnlyDefinition) {\n            InOnlyDefinition node = (InOnlyDefinition) camelNode;\n            return \"inOnly \" + getOrBlank(node.getUri());\n        } else if (camelNode instanceof InOutDefinition) {\n            InOutDefinition node = (InOutDefinition) camelNode;\n            return \"inOut \" + getOrBlank(node.getUri());\n        } else if (camelNode instanceof InterceptSendToEndpointDefinition) {\n            InterceptSendToEndpointDefinition node = (InterceptSendToEndpointDefinition) camelNode;\n            return \"intercept \" + getOrBlank(node.getUri());\n        } else if (camelNode instanceof LogDefinition) {\n            LogDefinition node = (LogDefinition) camelNode;\n            return \"log \" + getOrBlank(node.getLogName());\n        } else if (camelNode instanceof MarshalDefinition) {\n            return \"marshal\";\n        } else if (camelNode instanceof OnExceptionDefinition) {\n            OnExceptionDefinition node = (OnExceptionDefinition) camelNode;\n            return \"on exception \" + getOrBlank(node.getExceptions());\n        } else if (camelNode instanceof OtherwiseDefinition) {\n            return \"otherwise\";\n        } else if (camelNode instanceof PollEnrichDefinition) {\n            PollEnrichDefinition node = (PollEnrichDefinition) camelNode;\n            // TODO\n            // return \"poll enrich \" + getOrBlank(node.getResourceUri());\n            return \"poll enrich \" + Expressions.getExpressionOrElse(node.getExpression());\n        } else if (camelNode instanceof RemoveHeaderDefinition) {\n            RemoveHeaderDefinition node = (RemoveHeaderDefinition) camelNode;\n            return \"remove header \" + getOrBlank(node.getHeaderName());\n        } else if (camelNode instanceof RemovePropertyDefinition) {\n            RemovePropertyDefinition node = (RemovePropertyDefinition) camelNode;\n            return \"remove property \" + getOrBlank(node.getPropertyName());\n        } else if (camelNode instanceof RollbackDefinition) {\n            RollbackDefinition node = (RollbackDefinition) camelNode;\n            return \"rollback \" + getOrBlank(node.getMessage());\n        } else if (camelNode instanceof SetExchangePatternDefinition) {\n            SetExchangePatternDefinition node = (SetExchangePatternDefinition) camelNode;\n            ExchangePattern pattern = node.getPattern();\n            if (pattern == null) {\n                return \"setExchangePattern\";\n            } else {\n                return \"set \" + pattern;\n            }\n        } else if (camelNode instanceof SortDefinition) {\n            SortDefinition node = (SortDefinition) camelNode;\n            return \"sort \" + Expressions.getExpressionOrElse(node.getExpression());\n        } else if (camelNode instanceof WhenDefinition) {\n            WhenDefinition node = (WhenDefinition) camelNode;\n            return \"when \" + Expressions.getExpressionOrElse(node.getExpression());\n        } else if (camelNode instanceof UnmarshalDefinition) {\n            return \"unmarshal\";\n        } else if (camelNode instanceof TryDefinition) {\n            return \"try\";\n        } else if (camelNode instanceof LoadBalanceDefinition) {\n            LoadBalanceDefinition load = (LoadBalanceDefinition) camelNode;\n            return load.getShortName();\n/*\n            TODO\n\n   \t\t\tif (load.getRef() != null) {\n   \t\t\t\treturn \"custom \" + getOrBlank(load.getRef());\n   \t\t\t} else if (load.getLoadBalancerType() != null) {\n   \t\t\t\tif (load.getLoadBalancerType().getClass().isAssignableFrom(CustomLoadBalancerDefinition.class)) {\n   \t\t\t\t\tCustomLoadBalancerDefinition custom = (CustomLoadBalancerDefinition) load.getLoadBalancerType();\n   \t\t\t\t\treturn \"custom \" + getOrBlank(custom.getRef());\n   \t\t\t\t} else if (load.getLoadBalancerType().getClass().isAssignableFrom(FailoverLoadBalancerDefinition.class)) {\n   \t\t\t\t\treturn \"failover\";\n   \t\t\t\t} else if (load.getLoadBalancerType().getClass().isAssignableFrom(RandomLoadBalancerDefinition.class)) {\n   \t\t\t\t\treturn \"random\";\n   \t\t\t\t} else if (load.getLoadBalancerType().getClass().isAssignableFrom(RoundRobinLoadBalancerDefinition.class)) {\n   \t\t\t\t\treturn \"round robin\";\n   \t\t\t\t} else if (load.getLoadBalancerType().getClass().isAssignableFrom(StickyLoadBalancerDefinition.class)) {\n   \t\t\t\t\treturn \"sticky\";\n   \t\t\t\t} else if (load.getLoadBalancerType().getClass().isAssignableFrom(TopicLoadBalancerDefinition.class)) {\n   \t\t\t\t\treturn \"topic\";\n   \t\t\t\t} else if (load.getLoadBalancerType().getClass().isAssignableFrom(WeightedLoadBalancerDefinition.class)) {\n   \t\t\t\t\treturn \"weighted\";\n   \t\t\t\t}\n   \t\t\t} else {\n   \t\t\t\treturn \"load balance\";\n   \t\t\t}\n*/\n        }\n\n        String answer = null;\n        try {\n            answer = camelNode.getLabel();\n        } catch (Exception e) {\n            // ignore errors in Camel\n        }\n        if (Strings2.isBlank(answer)) {\n            answer = getPatternName(camelNode);\n        }\n        return answer;\n    }", "private JTextArea createAsmField ( ) { final JTextArea asmField = new JTextArea ( NUM_ , NUM_ ) ; asmField . setFont ( GuiHelper . MONOSPACED_FONT ) ; asmField . setEditable ( BOOL_ ) ; return asmField ; }", "public CreateDevicePoolRequest withRules(Rule... rules) {\n        if (this.rules == null) {\n            setRules(new java.util.ArrayList<Rule>(rules.length));\n        }\n        for (Rule ele : rules) {\n            this.rules.add(ele);\n        }\n        return this;\n    }", "public RequestHandle delete ( Context context , String url , Header [ ] headers , ResponseHandlerInterface responseHandler ) { final HttpDelete delete = new HttpDelete ( url ) ; if ( headers != null ) delete . setHeaders ( headers ) ; return sendRequest (", "\tpublic void onModuleLoaded() {\n\t\tsingleton = this;\n\t    addHistoryInfo( TaskActivityList.init() );\n\t    addHistoryInfo( ApproveActivityList.init() );\n\t    setIncludeOpenId( false );\n\t}\n", "@Override\n  public FlowConfig get(ComplexResourceKey<FlowId, EmptyRecord> key) {\n    String flowGroup = key.getKey().getFlowGroup();\n    String flowName = key.getKey().getFlowName();\n    FlowId flowId = new FlowId().setFlowGroup(flowGroup).setFlowName(flowName);\n    return this.flowConfigsResourceHandler.getFlowConfig(flowId);\n  }", "protected void addInvoker ( Map < Integer , FilterOperationDelegateInvoker > invokerLookup , Method method , int operationCode ) throws IllegalArgumentException { FilterOperationDelegateInvoker invoker = invokerLookup . get ( operationCode ) ; if ( invoke", "    public boolean onCreateOptionsMenu(android.view.Menu menu) {\n        MenuItem item = menu.add(0, 0, 0, \"Nothing Yet\");\n        item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                return true;\n            }\n        });\n        return true;\n    }\n", "public Vec sortedCopy(){\n  double[] arrayCopy=arrayCopy();\n  Arrays.sort(arrayCopy);\n  return new DenseVector(arrayCopy);\n}\n", "private void processLoginHintParameterIfNeeded ( final HttpServletRequest request , final OIDCAuthorizationRequestContext authorizationRequest ) { final Object loginHint = authorizationRequest . getLoginHint ( ) ; if ( loginHint != null ) { OIDCUtils . pu", "@Nullable\n    public Animator createAnimator(@NonNull ViewGroup sceneRoot, @Nullable TransitionValues startValues,\n                                   @Nullable TransitionValues endValues) {\n        return null;\n    }", "protected List<MetricDatum> metricOfRequestOrRetryCount(\n            Field metricType, Request<?> req, Object resp) {\n        AWSRequestMetrics m = req.getAWSRequestMetrics();\n        TimingInfo ti = m.getTimingInfo();\n        // Always retrieve the request count even for retry which is equivalent\n        // to the number of requests minus one.\n        Number counter = ti.getCounter(Field.RequestCount.name());\n        if (counter == null) {\n            // this is possible if one of the request handlers screwed up\n            return Collections.emptyList();\n        }\n        int requestCount = counter.intValue();\n        if (requestCount < 1) {\n            LogFactory.getLog(getClass()).debug(\n                \"request count must be at least one\");\n            return Collections.emptyList();\n        }\n        final double count = metricType == Field.RequestCount\n                           ? requestCount\n                           : requestCount-1 // retryCount = requestCount - 1\n                           ;\n        if (count < 1) {\n            return Collections.emptyList();\n        } else {\n            return Collections.singletonList(new MetricDatum()\n                .withMetricName(req.getServiceName())\n                .withDimensions(new Dimension()\n                    .withName(Dimensions.MetricType.name())\n                    .withValue(metricType.name()))\n                .withUnit(StandardUnit.Count)\n                .withValue(Double.valueOf(count))\n                .withTimestamp(endTimestamp(ti)))\n                ;\n        }\n    }", "   public void resetLocaleToSystemDefault() {\n      XLocale default_locale = XLocaleManager.findLocale(OpSettingsService.getService().getStringValue(this, OpSettings.USER_LOCALE_ID));\n      super.setLocale(default_locale);\n   }\n", "private void pStackCreate ( ) { System . out . println ( ) ; System . out . println ( STR_ ) ; PStack < String > list1 = PStackX . of ( STR_ , STR_ , STR_ ) ; System . out . println ( list1 ) ; PStack < String > list2 = PStackX . fromCollection ( Arrays . asList ( STR_ , STR_ , STR_ ) ) ; System . out . println ( list2 ) ; List < String > empty = PStackX . empty ( ) ; System . out . println ( empty ) ; PStack < String > single = PStackX . singleton ( STR_ ) ; System . out . println ( single ) ; }", "public static String encodeLines ( byte [ ] in , int iOff , int iLen , int lineLen , String lineSeparator ) { final int blockLen = lineLen * NUM_ / NUM_ ; if ( blockLen <= NUM_ ) { throw new IllegalArgumentException ( ) ; } final int lines = ( iLen + bloc", "@SuppressWarnings(\"unchecked\") public static <T>Sequence<T> wrapStartEnd(Sequence<T> sequence,T startToken,T endToken){\n  Object[] arr=new Object[sequence.size() + 2];\n  arr[0]=startToken;\n  System.arraycopy(sequence.elements(),0,arr,1,sequence.size());\n  arr[sequence.size() + 1]=endToken;\n  return new ArraySequence<T>(true,(T[])arr);\n}\n", "\tpublic boolean visit(BreakStatement node) {\n\t\treturn isVisitChildren(node);\n\t}\n", "public static synchronized void setToggling (AbstractButton b)\n    {\n        if (_toggler == null) {\n            _toggler = new ActionListener () {\n                public void actionPerformed (ActionEvent event)\n                {\n                    AbstractButton but = (AbstractButton) event.getSource();\n                    but.setSelected(!but.isSelected());\n                }\n            };\n        }\n\n        b.addActionListener(_toggler);\n    }", "public void setLeafStyle(boolean isLeaf) {\n\n        if (isLeaf) {\n            m_leafStyleVar.setValue(CSS.listTreeItemLeaf());\n        } else {\n            m_leafStyleVar.setValue(CSS.listTreeItemInternal());\n        }\n    }", "@Override\n    public String writeSingle(String spaceId,\n                              String chunkChecksum,\n                              ChunkInputStream chunk,\n                              Map<String, String> properties)\n        throws NotFoundException {\n\n        log.debug(\"writeSingle: \" + spaceId + \", \" + chunk.getChunkId());\n        createSpaceIfNotExist(spaceId);\n\n        addChunk(spaceId, chunkChecksum, chunk, properties, true);\n\n        log.debug(\"written: \" + spaceId + \", \" + chunk.getChunkId());\n        return chunk.getMD5();\n    }", "private Shape createCheckMark ( int x , int y , int size ) { int markSize = ( int ) ( size * SIZE_MULTIPLIER + NUM_ ) ; int markX = x + ( int ) ( size * X_MULTIPLIER + NUM_ ) ; int markY = y + ( int ) ( size * Y_MULTIPLIER + NUM_ ) ; return shapeGenerator . createCheckMark ( markX , markY , markSize , markSize ) ; }", "public static void dispose(){\n  register.dispose();\n  keys.clear();\n}", "void onEndAnimation ( boolean isForwardAnimation , Animator animation ) ;", "protected void ensureTX ( ) throws IllegalStateException { if ( m_acknowledgeMode != Session . SESSION_TRANSACTED ) { throw new IllegalStateException ( STR_ ) ; } }", "private CloseableReference<Bitmap> createBitmap(\n      int width,\n      int height,\n      Bitmap.Config config,\n      boolean hasAlpha,\n      @Nullable Object callerContext) {\n    return createBitmap(null, width, height, config, hasAlpha, callerContext);\n  }", "String applyLineEndings ( String unix , File file ) { String ending = lineEndingPolicy . getEndingFor ( file ) ; if ( ! ending . equals ( LineEnding . UNIX . str ( ) ) ) { return unix . replace ( LineEnding . UNIX . str ( ) , ending ) ; } else { return unix ; } }", "public LogException ( String s ) { super ( s ) ; initCause ( null ) ; }", "public static void assertThrows(Class<?> throwable,CheckedRunnable runnable,Consumer<Throwable> exceptionConsumer){\n  boolean fail=false;\n  try {\n    runnable.run();\n    fail=true;\n  }\n catch (  Throwable t) {\n    if (!throwable.isInstance(t))     throw new AssertionError(\"Bad exception type\",t);\n    exceptionConsumer.accept(t);\n  }\n  if (fail)   Assert.fail(\"No exception was thrown\");\n}\n", "public boolean usesSorting(){\n  return !sort.isEmpty();\n}\n", "\tpublic void initialize(String msg, Throwable e) {\n\t\tsetTitle(I18N.getLocalizedMessage(\"Error\"));\n\t\tTSErrorPanel2 panel = new TSErrorPanel2();\n\t\tpanel.initialize(msg, e);\n\t\tsetPrimaryPanel(panel);\n\t\tshowErrorIcon(I18N.getLocalizedMessage(\"Error\"));\n\t}\n", "\tpublic void removeListDataListener(final ListDataListener l) {\n\t\tlistdatalistener.remove(l);\n\t\ttempListeners = null;\n\t}\n", "private void locateUriRoot(File f){\n  String tUriBase=uriBase;\n  if (tUriBase == null) {\n    tUriBase=\"/\";\n  }\n  try {\n    if (f.exists()) {\n      f=new File(f.getCanonicalPath());\n      while (f != null) {\n        File g=new File(f,\"WEB-INF\");\n        if (g.exists() && g.isDirectory()) {\n          uriRoot=f.getCanonicalPath();\n          uriBase=tUriBase;\n          if (log.isLoggable(Level.INFO)) {\n            log.info(Localizer.getMessage(\"jspc.implicit.uriRoot\",uriRoot));\n          }\n          break;\n        }\n        if (f.exists() && f.isDirectory()) {\n          tUriBase=\"/\" + f.getName() + \"/\"+ tUriBase;\n        }\n        String fParent=f.getParent();\n        if (fParent == null) {\n          break;\n        }\n else {\n          f=new File(fParent);\n        }\n      }\n      if (uriRoot != null) {\n        File froot=new File(uriRoot);\n        uriRoot=froot.getCanonicalPath();\n      }\n    }\n  }\n catch (  IOException ioe) {\n  }\n}\n", "public Relationship interactsWith(Person destination, String description, String technology) {\n        return interactsWith(destination, description, technology, InteractionStyle.Synchronous);\n    }", "public java.util.List<String> getLaunchConfigurationNames() {\n        if (launchConfigurationNames == null) {\n            launchConfigurationNames = new com.amazonaws.internal.SdkInternalList<String>();\n        }\n        return launchConfigurationNames;\n    }", "private void sendAction ( Bundle data ) { IMqttToken token = getMqttToken ( data ) ; simpleAction ( token , data ) ; }", "public static void removeBreakpoints ( final Set < BreakpointAddress > addresses , final BreakpointManager manager ) { Preconditions . checkNotNull ( manager , STR_ ) ; Preconditions . checkNotNull ( addresses , STR_ ) ; final Set < BreakpointAddress > ad", "   public void initializePhrase(String phrase, boolean strictFlag)\n   {  originalUtterance = phrase;\n      utterance = morphologicallyAnalyze(originalUtterance);\n      strict = strictFlag;\n      parser.initialize(utterance, expectedTypes);\n   }\n", "public static String internalStockFishName(){\n  String abi=Build.CPU_ABI;\n  boolean noPIE=Build.VERSION.SDK_INT < 21;\n  if (abi.equals(\"x86\")) {\n  }\n else   if (abi.equals(\"x86_64\")) {\n    noPIE=false;\n  }\n else   if (abi.equals(\"armeabi-v7a\")) {\n  }\n else   if (abi.equals(\"arm64-v8a\")) {\n    noPIE=false;\n  }\n else   if (abi.equals(\"mips\")) {\n  }\n else   if (abi.equals(\"mips64\")) {\n    noPIE=false;\n  }\n else {\n    abi=\"armeabi\";\n  }\n  return \"stockfish-\" + abi + (noPIE ? \"-nopie\" : \"\");\n}\n", "\tpublic void stop(BundleContext context) throws Exception {\n\t\tsuper.stop(context);\n\t\tthis.context = null;\n\t\tplugin = null;\n\t}\n", "public T message ( String message ) { jsonValue . put ( MESSAGE , message ) ; return self ( ) ; }", "private boolean validateNetworkDisconnection(){\n  StringBuffer str=new StringBuffer(\"States: \");\n  str.append(printStates());\n  if (mStateDepository.get(0) != State.CONNECTED) {\n    str.append(String.format(\" Initial state should be CONNECTED, but it is %s.\",mStateDepository.get(0)));\n    mReason=str.toString();\n    return false;\n  }\n  State lastState=mStateDepository.get(mStateDepository.size() - 1);\n  if (lastState != mTransitionTarget) {\n    str.append(String.format(\" Last state should be DISCONNECTED, but it is %s\",lastState));\n    mReason=str.toString();\n    return false;\n  }\n  for (int i=1; i < mStateDepository.size() - 1; i++) {\n    State preState=mStateDepository.get(i - 1);\n    State curState=mStateDepository.get(i);\n    if ((preState == State.CONNECTED) && ((curState == State.DISCONNECTING) || (curState == State.DISCONNECTED))) {\n      continue;\n    }\n else     if ((preState == State.DISCONNECTING) && (curState == State.DISCONNECTED)) {\n      continue;\n    }\n else     if ((preState == State.DISCONNECTED) && (curState == State.DISCONNECTED)) {\n      continue;\n    }\n else {\n      str.append(String.format(\" Transition state from %s to %s is not valid\",preState.toString(),curState.toString()));\n      mReason=str.toString();\n      return false;\n    }\n  }\n  mReason=str.toString();\n  return true;\n}\n", "public java.util.List<ParameterStringFilter> getParameterFilters() {\n        if (parameterFilters == null) {\n            parameterFilters = new com.amazonaws.internal.SdkInternalList<ParameterStringFilter>();\n        }\n        return parameterFilters;\n    }", "public static int calculateItemSizeInBytes(Map<String,AttributeValue> item){\n  int size=0;\n  if (item == null) {\n    return size;\n  }\n  for (  Map.Entry<String,AttributeValue> entry : item.entrySet()) {\n    String name=entry.getKey();\n    AttributeValue value=entry.getValue();\n    size+=name.getBytes(BootstrapConstants.UTF8).length;\n    size+=calculateAttributeSizeInBytes(value);\n  }\n  return size;\n}\n", "public static String makeMetaDir ( String specDir , String fromChkpt ) { if ( fromChkpt != null ) { return fromChkpt ; } String metadir = TLCGlobals . metaDir ; if ( metadir == null ) { metadir = specDir + TLCGlobals . metaRoot + FileUtil . separator ; } SimpleDateFormat sdf ; if ( Boolean . getBoolean ( FileUtil . class . getName ( ) + STR_ ) ) { sdf = new SimpleDateFormat ( STR_ ) ; } else { sdf = new SimpleDateFormat ( STR_ ) ; } metadir += sdf . format ( new Date ( ) ) ; File filedir = new File ( metadir ) ; Assert . check ( ! filedir . exists ( ) , EC . SYSTEM_METADIR_EXISTS , metadir ) ; Assert . check ( filedir . mkdirs ( ) , EC . SYSTEM_METADIR_CREATION_ERROR , metadir ) ; return metadir ; }", "public <R> R forEach(RFunc2<R, T, IteratorInfo<R>> func, int index) {\n                return forEach($(func), index);\n        }", "    public void removeCustomAttribute(String name) {\n        synchronized(customAttributes) {\n            customAttributes.remove(name);\n        }\n    }\n", "public static OffsetGroupSpan create(final Symbol spanType, final OffsetGroupRange range,\n      final Map<String, String> otherAttributes) {\n    return new OffsetGroupSpan(spanType, range, otherAttributes);\n  }", "protected ASN1Sequence(ASN1EncodableVector v){\n  for (int i=0; i != v.size(); i++) {\n    seq.addElement(v.get(i));\n  }\n}\n", "\tpublic void deleteItemmetadata() {\n\t\ttry {\n\t\t\tdeleteObject(resource,QTI_RDFS+\"itemmetadata\",getItemmetadata().getResource(),\"itemmetadata\",\"Item\");\n\t\t}\n\t\tcatch (NoExistingPropertyException e) {}\n\t\tcatch (NoExistingObjectException e) {\n\t\t\tSystem.out.println(\"Error: \"+e.getLocalizedMessage());\n\t\t}\n\t}\n", "public BufferedImage getImage(Photo photo, int size) throws FlickrException {\r\n        try {\r\n            return ImageIO.read(getImageAsStream(photo, size));\r\n        } catch (IOException e) {\r\n            throw new FlickrException(e.getMessage(), e.getCause());\r\n        }\r\n    }", "@NotNull\n    public static String getSku(@NotNull final String appStoreName, @NotNull String storeSku) {\n        return SkuManager.getInstance().getSku(appStoreName, storeSku);\n    }", "private boolean addBusHub(BusHub hub) {\n\t\tif (hub == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.validBusHubs.contains(hub)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (ListUtil.contains(this.invalidBusHubs, INVALID_HUB_COMPARATOR, hub)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfinal boolean isValidPrimitive = hub.isValidPrimitive();\n\n\t\tif (isValidPrimitive) {\n\t\t\tif (!this.validBusHubs.add(hub)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (ListUtil.addIfAbsent(this.invalidBusHubs, INVALID_HUB_COMPARATOR, hub) < 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\thub.setEventFirable(isEventFirable());\n\t\thub.setContainer(this);\n\t\tif (isEventFirable()) {\n\t\t\tfirePrimitiveChanged(new BusChangeEvent(this,\n\t\t\t\t\tBusChangeEventType.HUB_ADDED,\n\t\t\t\t\thub,\n\t\t\t\t\t-1,\n\t\t\t\t\tnull,\n\t\t\t\t\tnull,\n\t\t\t\t\tnull));\n\t\t\thub.checkPrimitiveValidity();\n\t\t\tcheckPrimitiveValidity();\n\t\t}\n\t\treturn true;\n\t}", "@Override\n    public CollationKey getCollationKey(String source) {\n        if (source == null) {\n            return null;\n        }\n        CollationBuffer buffer = null;\n        try {\n            buffer = getCollationBuffer();\n            return getCollationKey(source, buffer);\n        } finally {\n            releaseCollationBuffer(buffer);\n        }\n    }", "public static byte[] hash(byte[] input, int offset, int length) {\n        MessageDigest digest = newDigest();\n        digest.update(input, offset, length);\n        return digest.digest();\n    }", "\tpublic void addMatrix(Matrix matrix){\n\t\tif(matrices == null) matrices = new ArrayList();\n\t\tmatrices.add(matrix);\n\t}\n", "\tpublic void _close(CommandInterpreter intp) throws Exception {\n\t\tintp.println();\n\t\tosgi.close();\n\t\tSystem.exit(0);\n\t}\n", "public static IntTag parseInt(String mojangson) throws MojangsonParseException {\n  try {\n    return new IntTag(Integer.valueOf(mojangson));\n  }\n catch (  NumberFormatException nfe) {\n    throw new MojangsonParseException(\"\\'\" + mojangson + \"\\'\",MojangsonParseException.ParseExceptionReason.INVALID_FORMAT_NUM);\n  }\n}\n", "public static byte[] hash(byte[] input,int offset,int length){\n  MessageDigest digest=newDigest();\n  digest.update(input,offset,length);\n  return digest.digest();\n}\n", "boolean verify(CryptoSuite crypto) {\n        logger.trace(format(\"%s verifying transaction: %s endorsement.\", peer, getTransactionID()));\n\n        if (hasBeenVerified) { // check if this proposalResponse was already verified   by client code\n            logger.trace(format(\"%s transaction: %s was already verified returned %b\", peer, getTransactionID(), isVerified));\n            return this.isVerified;\n        }\n\n        try {\n            if (isInvalid()) {\n                this.isVerified = false;\n                logger.debug(format(\"%s for transaction %s returned invalid. Setting verify to false\", peer, getTransactionID()));\n                return false;\n            }\n\n            FabricProposalResponse.Endorsement endorsement = this.proposalResponse.getEndorsement();\n            ByteString sig = endorsement.getSignature();\n            byte[] endorserCertifcate = null;\n            byte[] signature = null;\n            byte[] data = null;\n\n            try {\n                Identities.SerializedIdentity endorser = Identities.SerializedIdentity\n                        .parseFrom(endorsement.getEndorser());\n                ByteString plainText = proposalResponse.getPayload().concat(endorsement.getEndorser());\n\n                if (config.extraLogLevel(10)) {\n\n                    if (null != diagnosticFileDumper) {\n                        StringBuilder sb = new StringBuilder(10000);\n                        sb.append(\"payload TransactionBuilderbytes in hex: \" + DatatypeConverter.printHexBinary(proposalResponse.getPayload().toByteArray()));\n                        sb.append(\"\\n\");\n                        sb.append(\"endorser bytes in hex: \"\n                                + DatatypeConverter.printHexBinary(endorsement.getEndorser().toByteArray()));\n                        sb.append(\"\\n\");\n                        sb.append(\"plainText bytes in hex: \" + DatatypeConverter.printHexBinary(plainText.toByteArray()));\n\n                        logger.trace(\"payload TransactionBuilderbytes:  \" +\n                                diagnosticFileDumper.createDiagnosticFile(sb.toString()));\n                    }\n\n                }\n\n                if (sig == null || sig.isEmpty()) { // we shouldn't get here ...\n                    logger.warn(format(\"%s %s returned signature is empty verify set to false.\", peer, getTransactionID()));\n                    this.isVerified = false;\n                } else {\n\n                    endorserCertifcate = endorser.getIdBytes().toByteArray();\n                    signature = sig.toByteArray();\n                    data = plainText.toByteArray();\n\n                    this.isVerified = crypto.verify(endorserCertifcate, config.getSignatureAlgorithm(),\n                            signature, data);\n                    if (!this.isVerified) {\n                        logger.warn(format(\"%s transaction: %s verify: Failed to verify. Endorsers certificate: %s, \" +\n                                        \"signature: %s, signing algorithm: %s, signed data: %s.\",\n                                peer, getTransactionID(), toHexString(endorserCertifcate), toHexString(signature),\n                                config.getSignatureAlgorithm(), toHexString(data)\n                        ));\n                    }\n                }\n\n            } catch (InvalidProtocolBufferException | CryptoException e) {\n                logger.error(format(\"%s transaction: %s verify: Failed to verify. Endorsers certificate: %s, \" +\n                                \"signature: %s, signing algorithm: %s, signed data: %s.\",\n                        peer, getTransactionID(), toHexString(endorserCertifcate), toHexString(signature),\n                        config.getSignatureAlgorithm(), toHexString(data)\n                ), e);\n\n                logger.error(format(\"%s transaction: %s verify: Cannot retrieve peer identity from ProposalResponse. Error is: %s\", peer, getTransactionID(), e.getMessage()), e);\n                this.isVerified = false;\n            }\n\n            logger.debug(format(\"%s finished verify for transaction %s returning %b\", peer, getTransactionID(), this.isVerified));\n\n            return this.isVerified;\n        } finally {\n            hasBeenVerified = true;\n        }\n    }", "    private long helper(String filter) {\n        return helper(filter, false);\n    }\n", "public static String toByteString(final byte... data) {\n\t\tfinal StringBuilder out = new StringBuilder();\n\n\t\tif (data.length > 0) {\n\t\t\tfor (int j = 7; j >= 0; --j) {\n\t\t\t\tout.append((data[data.length - 1] >>> j) & 1);\n\t\t\t}\n\t\t}\n\t\tfor (int i = data.length - 2; i >= 0 ;--i) {\n\t\t\tout.append('|');\n\t\t\tfor (int j = 7; j >= 0; --j) {\n\t\t\t\tout.append((data[i] >>> j) & 1);\n\t\t\t}\n\t\t}\n\n\t\treturn out.toString();\n\t}", "void copyActivatedTime ( IEspDevice device ) ;", "\tpublic void commandAction(Command c, Displayable d) {\n\t\tif (c == exitCommand) {\n\t\t\tmidlet.mainMenuScreenShow(null);\n\t\t\treturn;\n\t\t} else if (c == selectCommand) {\n\t\t\tprocessMenu();\n\t\t\treturn;\n\t\t} else {\n\t\t\tprocessMenu();\n\t\t\treturn;\n\t\t}\n\t}\n", "protected void transformDetailBand() {\n        log.debug(\"transforming Detail Band...\");\n\n        JRDesignSection detailSection = (JRDesignSection) design.getDetailSection();\n\n        //TODO: With this new way, we can use template content as it comes, and add a new band for DJ on top or bellow it.\n        JRDesignBand detail;\n        if (detailSection.getBandsList().isEmpty()) {\n            detail = new JRDesignBand();\n            detailSection.getBandsList().add(detail);\n        } else {\n            detail = (JRDesignBand) detailSection.getBandsList().iterator().next();\n        }\n\n        detail.setHeight(report.getOptions().getDetailHeight());\n\n        for (AbstractColumn column : getVisibleColumns()) {\n\n            /*\n              Barcode column\n             */\n            if (column instanceof BarCodeColumn) {\n                BarCodeColumn barcodeColumn = (BarCodeColumn) column;\n                JRDesignImage image = new JRDesignImage(new JRDesignStyle().getDefaultStyleProvider());\n                JRDesignExpression imageExp = new JRDesignExpression();\n//\t\t\t\timageExp.setText(\"ar.com.fdvs.dj.core.BarcodeHelper.getBarcodeImage(\"+barcodeColumn.getBarcodeType() + \", \"+ column.getTextForExpression()+ \", \"+ barcodeColumn.isShowText() + \", \" + barcodeColumn.isCheckSum() + \", \" + barcodeColumn.getApplicationIdentifier() + \",\"+ column.getWidth() +\", \"+ report.getOptions().getDetailHeight().intValue() + \" )\" );\n\n                //Do not pass column height and width mecause barbecue\n                //generates the image with wierd dimensions. Pass 0 in both cases\n                String applicationIdentifier = barcodeColumn.getApplicationIdentifier();\n                if (applicationIdentifier != null && !\"\".equals(applicationIdentifier.trim())) {\n                    applicationIdentifier = \"$F{\" + applicationIdentifier + \"}\";\n                } else {\n                    applicationIdentifier = \"\\\"\\\"\";\n                }\n                imageExp.setText(\"ar.com.fdvs.dj.core.BarcodeHelper.getBarcodeImage(\" + barcodeColumn.getBarcodeType() + \", \" + column.getTextForExpression() + \", \" + barcodeColumn.isShowText() + \", \" + barcodeColumn.isCheckSum() + \", \" + applicationIdentifier + \",0,0 )\");\n\n\n                imageExp.setValueClass(Image.class);\n                image.setExpression(imageExp);\n                image.setHeight(getReport().getOptions().getDetailHeight());\n                image.setWidth(column.getWidth());\n                image.setX(column.getPosX());\n                image.setScaleImage(ScaleImageEnum.getByValue(barcodeColumn.getScaleMode().getValue()));\n\n                image.setOnErrorType(OnErrorTypeEnum.ICON); //FIXME should we provide control of this to the user?\n\n                if (column.getLink() != null) {\n                    String name = \"column_\" + getReport().getColumns().indexOf(column);\n                    HyperLinkUtil.applyHyperLinkToElement((DynamicJasperDesign) getDesign(), column.getLink(), image, name);\n                }\n\n                applyStyleToElement(column.getStyle(), image);\n\n                detail.addElement(image);\n            }\n            /*\n              Image columns\n             */\n            else if (column instanceof ImageColumn) {\n                ImageColumn imageColumn = (ImageColumn) column;\n                JRDesignImage image = new JRDesignImage(new JRDesignStyle().getDefaultStyleProvider());\n                JRDesignExpression imageExp = new JRDesignExpression();\n                imageExp.setText(column.getTextForExpression());\n\n                imageExp.setValueClassName(imageColumn.getValueClassNameForExpression());\n                image.setExpression(imageExp);\n                image.setHeight(getReport().getOptions().getDetailHeight());\n                image.setWidth(column.getWidth());\n                image.setX(column.getPosX());\n                image.setScaleImage(ScaleImageEnum.getByValue(imageColumn.getScaleMode().getValue()));\n\n                applyStyleToElement(column.getStyle(), image);\n\n                if (column.getLink() != null) {\n                    String name = \"column_\" + getReport().getColumns().indexOf(column);\n                    HyperLinkUtil.applyHyperLinkToElement((DynamicJasperDesign) getDesign(), column.getLink(), image, name);\n                }\n\n                detail.addElement(image);\n            }\n            /*\n              Regular Column\n             */\n            else {\n                if (getReport().getOptions().isShowDetailBand()) {\n                    JRDesignTextField textField = generateTextFieldFromColumn(column, getReport().getOptions().getDetailHeight(), null);\n\n                    if (column.getLink() != null) {\n                        String name = getDesign().getName() + \"_column_\" + getReport().getColumns().indexOf(column);\n                        HyperLinkUtil.applyHyperLinkToElement((DynamicJasperDesign) getDesign(), column.getLink(), textField, name);\n                    }\n\n                    transformDetailBandTextField(column, textField);\n\n                    if (textField.getExpression() != null)\n                        detail.addElement(textField);\n                }\n\n            }\n\n        }\n    }", "public static Element addChildElementValue(Element element,String childElementName,String childElementValue,Document document){\n  Element newElement=addChildElement(element,childElementName,document);\n  newElement.appendChild(document.createTextNode(childElementValue));\n  return newElement;\n}\n", "    public void setKnowledgeTypes(String t1, String t2, String t3) {\n\tknowledgeTypes = new ListSet<String>();\n\taddKnowledgeType(t1);\n\taddKnowledgeType(t2);\n\taddKnowledgeType(t3);\n    }\n", "    public void setStringValue2(String stringValue2) {\n        this.stringValue2 = stringValue2;\n    }\n", "long txNumber ( ) ;", "public static boolean deleteDir(File dir){\n  if (dir != null && dir.isDirectory()) {\n    String[] children=dir.list();\n    for (int i=0; i < children.length; i++) {\n      boolean success=deleteDir(new File(dir,children[i]));\n      if (!success) {\n        return false;\n      }\n    }\n  }\n  return dir.delete();\n}\n", "protected View makeControllerView ( ) { return ( ( LayoutInflater ) mContext . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ) . inflate ( getResources ( ) . getIdentifier ( STR_ , STR_ , mContext . getPackageName ( ) ) , this ) ; }", "@Override\n    public AssociateSkillGroupWithRoomResult associateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request) {\n        request = beforeClientExecution(request);\n        return executeAssociateSkillGroupWithRoom(request);\n    }", "public static int compare ( long x , long y ) { if ( x > y ) { return NUM_ ; } if ( x < y ) { return - NUM_ ; } return NUM_ ; }", "boolean attemptSetPropertyValue(String propName,Object value,Interpreter interp) throws UtilEvalError {\n  String accessorName=Reflect.accessorName(\"set\",propName);\n  Class[] classArray=new Class[]{value == null ? null : value.getClass()};\n  BshMethod m=getMethod(accessorName,classArray);\n  if (m != null) {\n    try {\n      invokeMethod(accessorName,new Object[]{value},interp);\n      return true;\n    }\n catch (    EvalError ee) {\n      throw new UtilEvalError(\"'This' property accessor threw exception: \" + ee.getMessage());\n    }\n  }\n  return false;\n}\n", "public static IntBuffer shapeOf(IntBuffer buffer) {\n        Buffer buffer2 = (Buffer) buffer;\n        IntBuffer ret = (IntBuffer) buffer2.position(1);\n        return ret.slice();\n    }", "\tprotected void addNavazaneSpojePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add(createItemPropertyDescriptor(\n\t\t\t\t((ComposeableAdapterFactory) adapterFactory)\n\t\t\t\t\t\t.getRootAdapterFactory(), getResourceLocator(),\n\t\t\t\tgetString(\"_UI_Vyrok_navazaneSpoje_feature\"),\n\t\t\t\tgetString(\"_UI_Vyrok_navazaneSpoje_description\"),\n\t\t\t\tGebzPackage.Literals.VYROK__NAVAZANE_SPOJE, true, false, true,\n\t\t\t\tnull, getString(\"_UI_SpojePropertyCategory\"), null));\n\t}\n", "@GET\n    @Path(\"/{pushAppID}\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response findById(\n            @PathParam(\"pushAppID\") String pushApplicationID,\n            @QueryParam(\"includeDeviceCount\") @DefaultValue(\"false\") boolean includeDeviceCount,\n            @QueryParam(\"includeActivity\")    @DefaultValue(\"false\") boolean includeActivity) {\n\n        PushApplication pushApp = getSearch().findByPushApplicationIDForDeveloper(pushApplicationID);\n\n        if (pushApp != null) {\n            logger.trace(\"Query details for push application {}\", pushApp.getName());\n            ResponseBuilder response = Response.ok(pushApp);\n            if (includeActivity) {\n                logger.trace(\"Include activity header\");\n                putActivityIntoResponseHeaders(pushApp, response);\n            }\n            if (includeDeviceCount) {\n                logger.trace(\"Include device count header\");\n                putDeviceCountIntoResponseHeaders(pushApp, response);\n            }\n            return response.build();\n        }\n\n        return Response.status(Status.NOT_FOUND).entity(\"Could not find requested PushApplicationEntity\").build();\n    }", "public List<UserDto> selectByOrderedLogins(DbSession session, Collection<String> logins) {\n    List<UserDto> unordered = selectByLogins(session, logins);\n    return logins.stream()\n      .map(new LoginToUser(unordered))\n      .filter(Objects::nonNull)\n      .collect(Collectors.toList());\n  }", "\tprivate File newHashfile(StaticHasher hasher) throws IOException {\n\t\tFile h = hasher.getNewHashFile();\n\t\th.createNewFile();\n\t\th.deleteOnExit();\n\t\treturn h;\n\t}\n", "private static Object newInstance(String className,\n                                      ClassLoader classLoader)\n        throws SOAPException\n    {\n        try {\n            Class spiClass;\n            if (classLoader == null) {\n                spiClass = Class.forName(className);\n            } else {\n                spiClass = classLoader.loadClass(className);\n            }\n            return spiClass.newInstance();\n        } catch (ClassNotFoundException x) {\n            throw new SOAPException(\n                \"Provider \" + className + \" not found\", x);\n        } catch (Exception x) {\n            throw new SOAPException(\n                \"Provider \" + className + \" could not be instantiated: \" + x,\n                x);\n        }\n    }", "protected abstract void doReportBug ( BugInstance bugInstance ) ;", "public DistributionPointName(DerValue encoding) throws IOException {\n  if (encoding.isContextSpecific(TAG_FULL_NAME) && encoding.isConstructed()) {\n    encoding.resetTag(DerValue.tag_Sequence);\n    fullName=new GeneralNames(encoding);\n  }\n else   if (encoding.isContextSpecific(TAG_RELATIVE_NAME) && encoding.isConstructed()) {\n    encoding.resetTag(DerValue.tag_Set);\n    relativeName=new RDN(encoding);\n  }\n else {\n    throw new IOException(\"Invalid encoding for DistributionPointName\");\n  }\n}\n", "void appendedGlobalEdgeComment ( INaviView view , INaviEdge edge ) ;", "public void alarm(final Object alarmContext) {\n        final String methodName = \"alarm()\";\n        synchronized (this) {\n            if (!stopping && !this.htod.invalidationBuffer.isDiskClearInProgress()) {\n                this.htod.invalidationBuffer.invokeBackgroundInvalidation(HTODInvalidationBuffer.SCAN);\n            } else if (stopping) {\n                traceDebug(methodName, \"cacheName=\" + this.cacheName + \" abort disk cleanup because of server is stopping.\");\n            } else {\n                if (cleanupFrequency == 0) {\n                    sleepTime = calculateSleepTime();\n                }\n                traceDebug(methodName, \"cacheName=\" + this.cacheName + \" disk clear is in progress - skip disk scan and set alarm sleepTime=\"\n                                       + sleepTime);\n                Scheduler.createNonDeferrable(sleepTime, alarmContext, new Runnable() {\n                    @Override\n                    public void run() {\n                        alarm(alarmContext);\n                    }\n                });\n            }\n        }\n    }", "private String zGetStandardTextFieldDateString(LocalDate date){\n  if (settings == null) {\n    return \"\";\n  }\n  String standardDateString=\"\";\n  if (date == null) {\n    return standardDateString;\n  }\n  if (date.getEra() == IsoEra.CE) {\n    standardDateString=date.format(settings.getFormatForDatesCommonEra());\n  }\n else {\n    standardDateString=date.format(settings.getFormatForDatesBeforeCommonEra());\n  }\n  return standardDateString;\n}\n", "private void delete(Node<K, V> n) {\n        if (root == n) {\n            deleteMin();\n            n.o_c = null;\n            n.y_s = null;\n            n.o_s = null;\n            return;\n        }\n\n        if (n.o_s == null) {\n            throw new IllegalAr", "    public int chooseTargetRecord(Renderer r) {\n        if (useClod) {\n            return super.chooseTargetRecord(r);\n        }\n\n        return 0;\n    }\n", "@Override public void addTableModelListener(TableModelListener l){\n  m_Listeners.add(l);\n}\n", "public static String splitSafe(String string,String separator,int index){\n  if (string == null) {\n    return null;\n  }\n  String[] split=string.split(separator);\n  if (index >= 0 && split.length > index && split[index] != null) {\n    return String.valueOf(split[index]);\n  }\n  return null;\n}\n", "public boolean next()\n\t{\n\t\tif( indexes.length <= 1 || permutation >= total-1 )\n\t\t\treturn false;\n\n\t\tint N = indexes.length-2;\n\t\tint k = N;\n\n\t\tswap(k, counters[k]++);\n\t\twhile( counters[k] == indexes.length ) {\n\t\t\tk -= 1;\n\t\t\tswap(k, counters[k]++);\n\t\t}\n\t\tswap(counters[k], k);  //before\n\t\twhile (k < indexes.length - 1) {\n\t\t\tk++;\n\t\t\tcounters[k] = k;\n\t\t}\n\n\t\tpermutation++;\n\t\treturn true;\n\t}", "BodySIDByteOffsetPair(ByteProvider byteProvider) throws IOException {\n  MXFPropertyPopulator.populateField(byteProvider,this,\"bodySID\");\n  MXFPropertyPopulator.populateField(byteProvider,this,\"byteOffset\");\n}\n", "  public boolean checkMode(MouseEvent e) {\n    //the masks are OR'd again, however finally the result is only\n    //compared (and should be equal to) the onMask \n    int totMask = onMask | offMask;\n    int modex = e.getModifiers();\n    int modMask = modex & totMask; \n    return (modMask == onMask);\n  }\n", "protected ISpaceSynchronizeReplicaState recoverAllFromPrimary ( ) throws Exception { return recoverFromPrimary ( BOOL_ , BOOL_ ) ; }", "private boolean useAggregationApi ( Transaction txn ) { if ( ! useAggregationsApi ) return BOOL_ ; if ( txn != null ) return BOOL_ ; if ( isJoined ( ) ) return BOOL_ ; if ( getGroupColumn ( ) != null ) return BOOL_ ; else if ( getOrderColumns ( ) != null ", "private void readTaskBaselines(Project.Tasks.Task xmlTask, Task mpxjTask, TimeUnit durationFormat)\n   {\n      for (Project.Tasks.Task.Baseline baseline : xmlTask.getBaseline())\n      {\n         int number = NumberHelper.getInt(baseline.getNumber());\n\n         Double cost = DatatypeConverter.parseCurrency(baseline.getCost());\n         Duration duration = DatatypeConverter.parseDuration(m_projectFile, durationFormat, baseline.getDuration());\n         Date finish = baseline.getFinish();\n         Date start = baseline.getStart();\n         Duration work = DatatypeConverter.parseDuration(m_projectFile, TimeUnit.HOURS, baseline.getWork());\n\n         if (number == 0)\n         {\n            mpxjTask.setBaselineCost(cost);\n            mpxjTask.setBaselineDuration(duration);\n            mpxjTask.setBaselineFinish(finish);\n            mpxjTask.setBaselineStart(start);\n            mpxjTask.setBaselineWork(work);\n         }\n         else\n         {\n            mpxjTask.setBaselineCost(number, cost);\n            mpxjTask.setBaselineDuration(number, duration);\n            mpxjTask.setBaselineFinish(number, finish);\n            mpxjTask.setBaselineStart(number, start);\n            mpxjTask.setBaselineWork(number, work);\n         }\n      }\n   }", "\tprivate void addModule(final String moduleName) {\n\t\tif (StringUtils.isBlank(moduleName)) {\n\t\t\tLOG.debug(\"Cannot add a module with no name\");\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tLOG.debug(\"Attempting to install module [{}]\", moduleName);\n\t\t\tfinal Module module = (Module) ClassUtils.getObjectByName(moduleName);\n\t\t\tif (module == null) {\n\t\t\t\tLOG.error(\"Class not found.\", moduleName);\n\t\t\t} else {\n\t\t\t\tinstall(module);\n\t\t\t}\n\t\t} catch (ClassCastException e) {\n\t\t\tLOG.error(\"Cannot cast [{}] to Module.\", moduleName);\n\t\t}\n\t}\n", "\tprivate void sendPRIB(IntervalBroadcastInfo info) {\n\n\t\tPseudoReliableIntervalBroadcastMessage message = new PseudoReliableIntervalBroadcastMessage();\n\t\tmessage.setInfo(info);\n\n\t\tsend(message, myRef, info.getDestination());\n\n\t\t// MessageInfo messageInfo = new MessageInfo(myRef,\n\t\t// info.getDestination(), null,\n\t\t// null, 0);\n\t\t// MarshallMessageEvent marshallMessageEvent = new MarshallMessageEvent(\n\t\t// message, messageInfo);\n\t\t// trigger(marshallMessageEvent);\n\n\t}\n", "private void removeBreakpoints ( final Set < BreakpointAddress > breakpointAddressSet , final BreakpointStorage storage ) { if ( breakpointAddressSet . size ( ) != NUM_ ) { final Set < Breakpoint > breakpoints = storage . getBreakPointsByAddress ( breakpo", "\tpublic boolean respondsToMethod(Method method) {\n\t\tClass c = method.getDeclaringClass();\n\t\treturn c.isAssignableFrom(this.getClass());\n\t}\n", "public boolean matches(InventoryCrafting crafting,World world){\n  final List<ItemStack> recipeList=new ArrayList<ItemStack>(this.recipeItems);\n  for (int i=0; i < 3; ++i) {\n    for (int j=0; j < 3; ++j) {\n      final ItemStack actual=crafting.getStackInRowAndColumn(j,i);\n      if (actual != null) {\n        boolean flag=false;\n        final Iterator<ItemStack> iterator=recipeList.iterator();\n        while (iterator.hasNext()) {\n          final ItemStack expected=iterator.next();\n          if (comparator.equals(expected,actual)) {\n            flag=true;\n            recipeList.remove(expected);\n            break;\n          }\n        }\n        if (!flag) {\n          return false;\n        }\n      }\n    }\n  }\n  return recipeList.isEmpty();\n}\n", "public boolean hasPasswordChanged(){\n  return (persistedPassword.equals(password));\n}\n", "static public List<String> hasIssues(Model.RuntimeModel model) {\n    List<String> issues = new ArrayList<>(ElementChecker.hasIssues(model));\n\n    // Check that individual elements are valid\n    for (Vertex.RuntimeVertex vertex : model.getVertices()) {\n      issues.addAll(VertexChecker.hasIssues(vertex));\n    }\n    for (Edge.RuntimeEdge edge : model.getEdges()) {\n      issues.addAll(EdgeChecker.hasIssues(edge));\n    }\n\n    // Check that ids are unique\n    Set<String> ids = new HashSet<>();\n    for (Element element : model.getElements()) {\n      if (!ids.add(element.getId())) {\n        if (element instanceof Edge.RuntimeEdge) {\n          issues.add(\"Id of the edge is not unique: \" + element.getId());\n        } else {\n          issues.add(\"Id of the vertex is not unique: \" + element.getId());\n        }\n      }\n    }\n\n    // Check for unnamed selfloop edges.\n    for (Edge.RuntimeEdge edge : model.getEdges()) {\n      if (!edge.hasName() &&\n          null != edge.getSourceVertex() &&\n          null != edge.getTargetVertex() &&\n          edge.getSourceVertex().equals(edge.getTargetVertex())) {\n        issues.add(\"Vertex: \" + edge.getSourceVertex() + \", have a unnamed self loop edge.\");\n      }\n    }\n    return issues;\n  }", "public static String [ ] [ ] invert ( final String [ ] [ ] array ) { final String [ ] [ ] newarray = new String [ array . length ] [ NUM_ ] ; for ( int i = NUM_ ; i < array . length ; i ++ ) { newarray [ i ] [ NUM_ ] = array [ i ] [ NUM_ ] ; newarray [ i ] [ NUM_ ] = array [ i ] [ NUM_ ] ; } return newarray ; }", "public Token ( int kind ) { this ( kind , null ) ; }", "void attached ( Process process ) ;", "public void mouseMoved(MouseEvent e) {\n\t\t\ttool().mouseMove(e, e.getX(), e.getY());\n\t\t}", "public static BigDecimal rootFixPrecision(BigDecimal n, BigDecimal x, MathContext mathContext) {\r\n\t\tswitch (x.signum()) {\r\n\t\tcase 0:\r\n\t\t\treturn ZERO;\r\n\t\tcase -1:\r\n\t\t\tthrow new ArithmeticException(\"Illegal root(x) for x < 0: x = \" + x);\r\n\t\t}\r\n\r\n\t\tMathContext mc = new MathContext(mathContext.getPrecision() + 4, mathContext.getRoundingMode());\r\n\t\tBigDecimal acceptableError = ONE.movePointLeft(mathContext.getPrecision() + 1);\r\n\r\n\t\tBigDecimal factor = ONE.divide(n, mc);\r\n\t\tBigDecimal nMinus1 = n.subtract(ONE);\r\n\t\tBigDecimal result = x.divide(TWO, mc);\r\n\t\tBigDecimal step;\r\n\r\n\t\tdo {\r\n\t\t\tstep = factor.multiply(x.divide(BigDecimalMath.pow(result, nMinus1, mc), mc).subtract(result, mc), mc);\r\n\t\t\t\t\t\r\n\t\t\tresult = result.add(step, mc);\r\n\t\t} while (step.abs().compareTo(acceptableError) > 0);\r\n\t\t\r\n\t\treturn result.round(mathContext);\r\n\t}", "public Closure < V > ncurry ( int n , final Object argument ) { return ncurry ( n , new Object [ ] { argument } ) ; }", "public Fraction divide ( final int i ) { return divide ( new Fraction ( i ) ) ; }", "public static Condition startsWithUri(final String uri) {\n        return new Condition(input -> input.getUri().startsWith(uri));\n    }", "private Image createPackedImage8() throws IOException {\n  int size=input.readByte() & 0xff;\n  if (size == 0) {\n    size=256;\n  }\n  int[] palette=new int[size];\n  int plen=palette.length;\n  for (int iter=0; iter < plen; iter++) {\n    palette[iter]=input.readInt();\n  }\n  int width=input.readShort();\n  int height=input.readShort();\n  byte[] data=new byte[width * height];\n  input.readFully(data,0,data.length);\n  return Image.createIndexed(width,height,palette,data);\n}\n", "public static cmppolicylabel get(nitro_service service, String labelname) throws Exception{\n\t\tcmppolicylabel obj = new cmppolicylabel();\n\t\tobj.set_labelname(labelname);\n\t\tcmppolicylabel response = (cmppolicylabel) obj.get_resource(service);\n\t\treturn response;\n\t}", "public static void touch(File file) throws IOException {\n  if (!file.exists()) {\n    OutputStream out=openOutputStream(file);\n    IOUtils.closeQuietly(out);\n  }\n  boolean success=file.setLastModified(System.currentTimeMillis());\n  if (!success) {\n    throw new IOException(\"Unable to set the last modification time for \" + file);\n  }\n}\n", "public LocalDate withFieldAdded(DurationFieldType fieldType, int amount) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n        if (isSupported(fieldType) == false) {\n            throw new IllegalArgumentException(\"Field '\" + fieldType + \"' is not supported\");\n        }\n        if (amount == 0) {\n            return this;\n        }\n        long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);\n        return withLocalMillis(instant);\n    }", "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=new Vector<Option>();\n  result.addElement(new Option(\"\\tSpecify the expression to apply. Eg. pow(A,6)/(MEAN+MAX)\" + \"\\n\\tSupported operators are +, -, *, /, pow, log,\" + \"\\n\\tabs, cos, exp, sqrt, tan, sin, ceil, floor, rint, (, ), \"+ \"\\n\\tMEAN, MAX, MIN, SD, COUNT, SUM, SUMSQUARED, ifelse. The 'A'\"+ \"\\n\\tletter refers to the value of the attribute being processed.\"+ \"\\n\\tOther attribute values (numeric only) can be accessed through\"+ \"\\n\\tthe variables A1, A2, A3, ...\",\"E\",1,\"-E <expression>\"));\n  result.addElement(new Option(\"\\tSpecify list of columns to ignore. First and last are valid\\n\" + \"\\tindexes. (default none)\",\"R\",1,\"-R <index1,index2-index4,...>\"));\n  result.addElement(new Option(\"\\tInvert matching sense (i.e. only modify specified columns)\",\"V\",0,\"-V\"));\n  result.addAll(Collections.list(super.listOptions()));\n  return result.elements();\n}\n", "public FastByteArrayOutputStream ( final byte [ ] a ) { array = a ; }", "public int readLine ( final byte [ ] array , final EnumSet < LineTerminator > terminators ) throws IOException { return readLine ( array , NUM_ , array . length , terminators ) ; }", "public static UIAddress fromSatoshiStyle(String address) throws HyperLedgerException {\n  try {\n    Network network=Network.PRODUCTION;\n    Address.Type type=Address.Type.COMMON;\n    byte[] raw=ByteUtils.fromBase58(address);\n    if ((raw[0] & 0xff) == 0x0) {\n      network=Network.PRODUCTION;\n      type=Address.Type.COMMON;\n    }\n    if ((raw[0] & 0xff) == 5) {\n      network=Network.PRODUCTION;\n      type=Address.Type.P2SH;\n    }\n    if ((raw[0] & 0xff) == 0x6f) {\n      network=Network.TEST;\n      type=Address.Type.COMMON;\n    }\n    if ((raw[0] & 0xff) == 196) {\n      network=Network.TEST;\n      type=Address.Type.P2SH;\n    }\n    byte[] check=Hash.hash(raw,0,raw.length - 4);\n    for (int i=0; i < 4; ++i) {\n      if (check[i] != raw[raw.length - 4 + i]) {\n        throw new HyperLedgerException(\"Address checksum mismatch\");\n      }\n    }\n    byte[] keyDigest=new byte[raw.length - 5];\n    System.arraycopy(raw,1,keyDigest,0,raw.length - 5);\n    return new UIAddress(network,type,keyDigest);\n  }\n catch (  Exception e) {\n    throw new HyperLedgerException(e);\n  }\n}\n", "    protected void fireEvent(BreakpointEvent e) {\n        BreakpointListener bl;\n        synchronized (this) {\n            bl = listeners;\n        }\n        if (bl != null) {\n            e.getType().fireEvent(e, bl);\n        }\n    }\n", "    public int compare(Object obj1, Object obj2) {\n        File file1 = (File)obj1;\n        File file2 = (File)obj2;\n        return caseSensitivity.checkCompareTo(file1.getPath(), file2.getPath());\n    }\n", "private void insertCOMMarkerSegment(COMMarkerSegment newGuy){\n  int lastCOM=findMarkerSegmentPosition(COMMarkerSegment.class,false);\n  boolean hasJFIF=(findMarkerSegment(JFIFMarkerSegment.class,true) != null);\n  int firstAdobe=findMarkerSegmentPosition(AdobeMarkerSegment.class,true);\n  if (lastCOM != -1) {\n    markerSequence.add(lastCOM + 1,newGuy);\n  }\n else   if (hasJFIF) {\n    markerSequence.add(1,newGuy);\n  }\n else   if (firstAdobe != -1) {\n    markerSequence.add(firstAdobe + 1,newGuy);\n  }\n else {\n    markerSequence.add(0,newGuy);\n  }\n}\n", "public synchronized void pvChanged(PvChangeEvent event){\n  Object key;\n  int rowId;\n  try {\n    if (event.isChildEvent()) {\n      key=String.valueOf(event.getValue());\n    }\n else {\n      key=event.getKey();\n    }\n    rowId=key != null ? Arrays.binarySearch(keys,key) : 0;\nswitch (event.getType()) {\ncase PvChangeEvent.PV_CONFIRMED:\ncase PvChangeEvent.PV_MODIFIED:\ncase PvChangeEvent.PV_MANUAL_MOD:\n      fireTableRowsUpdated(rowId,rowId);\n    break;\ncase PvChangeEvent.PV_ADDED:\n  if (pv.size() == 1) {\n    setProcessVar(pv);\n  }\n else {\n    updateKeys(pv);\n    fireTableRowsInserted(rowId,rowId);\n  }\nbreak;\ncase PvChangeEvent.PV_DELETED:\nupdateKeys(pv);\nfireTableRowsDeleted(rowId,rowId);\nbreak;\ncase PvChangeEvent.PV_CLEARED:\nif (keys.length > 0) {\nupdateKeys(pv);\n}\nfireTableStructureChanged();\nbreak;\n}\n}\n catch (Exception ex) {\nex.printStackTrace();\n}\n}\n", "public boolean putLocally(final Integer bucketId,final EntryEventImpl event,boolean ifNew,boolean ifOld,Object expectedOldValue,boolean requireOldValue,final long lastModified) throws PrimaryBucketException, ForceReattemptException {\n  final BucketRegion br=getInitializedBucketForId(event.getKey(),bucketId);\n  return putLocally(br,event,ifNew,ifOld,expectedOldValue,requireOldValue,lastModified);\n}\n", "public void testPutString ( ) { byte [ ] expectedResult = { NUM_ , NUM_ , NUM_ , NUM_ , STR_ , STR_ , STR_ , NUM_ } ; String string = STR_ ; MySQLPacket array = new MySQLPacket ( NUM_ , ( byte ) NUM_ ) ; ByteArrayOutputStream output = new ByteArrayOutputS", "public static String getOffsetCodeFromSchedule(Schedule schedule) {\r\n\r\n\t\tdouble doubleLength = 0;\r\n\t\tfor(int i = 0; i < schedule.getNumberOfPeriods(); i ++) {\r\n\t\t\tdoubleLength += schedule.getPeriodLength(i);\r\n\t\t}\r\n\t\tdoubleLength /= schedule.getNumberOfPeriods();\r\n\r\n\t\tdoubleLength *= 12;\r\n\t\tint periodLength = (int) Math.round(doubleLength);\r\n\r\n\r\n\t\tString offsetCode = periodLength + \"M\";\r\n\t\treturn offsetCode;\r\n\t}", "public void setRange(int start, int end) {\n    if (end < start || start < 0 || end > size) {\n      throw new IllegalArgumentException();\n    }\n    if (end == start) {\n      return;\n    }\n    end--; // will be easier to treat this as the last actually set bit -- inclusive\n    int firstInt = start / 32;\n    int lastInt = end / 32;\n    for (int i = firstInt; i <= lastInt; i++) {\n      int firstBit = i > firstInt ? 0 : start & 0x1F;\n      int lastBit = i < lastInt ? 31 : end & 0x1F;\n      // Ones from firstBit to lastBit, inclusive\n      int mask = (2 << lastBit) - (1 << firstBit);\n      bits[i] |= mask;\n    }\n  }", "public GitlabProjectMember addProjectMember ( Integer projectId , Integer userId , GitlabAccessLevel accessLevel ) throws IOException { Query query = new Query ( ) . appendIf ( STR_ , projectId ) . appendIf ( STR_ , userId ) . appendIf ( STR_ , accessLevel ) ; String tailUrl = GitlabProject . URL + STR_ + projectId + GitlabProjectMember . URL + query . toString ( ) ; return dispatch ( ) . to ( tailUrl , GitlabProjectMember . class ) ; }", "private static Pair<String,String> preIndexedASR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){\n  final String address=environment.getNextVariableString();\n  final String index=environment.getNextVariableString();\n  final String tmpVar=environment.getNextVariableString();\n  long baseOffset=offset;\n  if (immediateNodeValue.equals(\"0\")) {\n    final String isZeroCondition=environment.getNextVariableString();\n    final String tmpVar1=environment.getNextVariableString();\n    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,wd,String.valueOf(-31),dw,tmpVar1));\n    instructions.add(ReilHelpers.createBisz(baseOffset++,dw,tmpVar1,bt,isZeroCondition));\n    instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0x0L),bt,isZeroCondition,dw,index));\n  }\n else {\n    final String tmpVar1=environment.getNextVariableString();\n    final String tmpVar2=environment.getNextVariableString();\n    final String tmpVar3=environment.getNextVariableString();\n    final String tmpVar4=environment.getNextVariableString();\n    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue2,dw,String.valueOf(0x80000000L),dw,tmpVar1));\n    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar1,dw,\"-\" + immediateNodeValue,dw,tmpVar2));\n    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,String.valueOf(0x80000000L),dw,\"-\" + immediateNodeValue,dw,tmpVar3));\n    instructions.add(ReilHelpers.createSub(baseOffset++,dw,tmpVar2,dw,tmpVar3,qw,tmpVar4));\n    instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar4,dw,dWordBitMask,dw,index));\n  }\n  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));\n  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,address));\n  instructions.add(ReilHelpers.createStr(baseOffset++,dw,address,dw,registerNodeValue1));\n  return new Pair<String,String>(address,registerNodeValue1);\n}\n", "public static byte[] hexStringToByteArray(String s){\n  if (s == null || s.length() == 0) {\n    return null;\n  }\n  int len=s.length();\n  if (len % 2 != 0) {\n    throw new IllegalArgumentException();\n  }\n  byte[] data=new byte[len / 2];\n  for (int i=0; i < len; i+=2) {\n    data[i / 2]=(byte)((Character.digit(s.charAt(i),16) << 4) + Character.digit(s.charAt(i + 1),16));\n  }\n  return data;\n}\n", "@Override\n    public void register(IESigType eSigType) throws Exception {\n        if (typeRegistry.get(eSigType.getESigTypeId()) != null) {\n            throw new Exception(\"Duplicate esig type identifier: \" + eSigType.getESigTypeId());\n        }\n\n        typeRegistry.put(eSigType.getESigTypeId(), eSigType);\n        init(eSigType);\n    }", "private void initialize(){\n  if (!cacheDir.exists()) {\n    cacheDir.mkdirs();\n  }\n  File[] files=cacheDir.listFiles();\n  if (files == null) {\n    return;\n  }\n  for (int i=0; i < files.length; i++) {\n    File file=files[i];\n    if (file.length() == 0) {\n      file.delete();\n    }\n else {\n      CacheSpan span=CacheSpan.createCacheEntry(file);\n      if (span == null) {\n        file.delete();\n      }\n else {\n        addSpan(span);\n      }\n    }\n  }\n}\n", "public void removeWhitelistURL(String URL){\n  serviceWhitelist.remove(URL);\n}\n", "public static String toJSON(Map<String, ? extends CacheConfig> config) throws IOException {\n        return new CacheConfigSupport().toJSON(config);\n    }", "public static WorkerChannelUpdater updater(final String pathWorkspaceSid, \n                                               final String pathWorkerSid, \n                                               final String pathSid) {\n        return new WorkerChannelUpdater(pathWorkspaceSid, pathWorkerSid, pathSid);\n    }", "\tpublic void setItemid (java.lang.Long itemid) {\n\t\tthis.itemid = itemid;\n\t}\n", "public static MessageBody fromValueData(Object value)\n    {\n    \tif(value == null)\n    \t{\n    \t\tthrow new IllegalArgumentException(\"Value data is null.\");\n    \t}\n    \t\n    \tMessageBody body = new MessageBody();\n    \tbody.bodyType = MessageBodyType.VALUE;\n    \tbody.valueData = value;\n    \tbody.sequenceData = null;\n    \tbody.binaryData = null;\n    \treturn body;\n    }", "  public void set_isPhpFinal(boolean y) throws RuntimeException {\n    UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIsPhpFinalCmd, (y) ? (byte) 1 : (byte) 0);\n    UmlCom.check();\n  \n    _php_final = y;\n  }\n", "public void marshall(ASN1Subject aSN1Subject, ProtocolMarshaller protocolMarshaller) {\n\n        if (aSN1Subject == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(aSN1Subject.getCountry(), COUNTRY_BINDING);\n            protocolMarshaller.marshall(aSN1Subject.getOrganization(), ORGANIZATION_BINDING);\n            protocolMarshaller.marshall(aSN1Subject.getOrganizationalUnit(), ORGANIZATIONALUNIT_BINDING);\n            protocolMarshaller.marshall(aSN1Subject.getDistinguishedNameQualifier(), DISTINGUISHEDNAMEQUALIFIER_BINDING);\n            protocolMarshaller.marshall(aSN1Subject.getState(), STATE_BINDING);\n            protocolMarshaller.marshall(aSN1Subject.getCommonName(), COMMONNAME_BINDING);\n            protocolMarshaller.marshall(aSN1Subject.getSerialNumber(), SERIALNUMBER_BINDING);\n            protocolMarshaller.marshall(aSN1Subject.getLocality(), LOCALITY_BINDING);\n            protocolMarshaller.marshall(aSN1Subject.getTitle(), TITLE_BINDING);\n            protocolMarshaller.marshall(aSN1Subject.getSurname(), SURNAME_BINDING);\n            protocolMarshaller.marshall(aSN1Subject.getGivenName(), GIVENNAME_BINDING);\n            protocolMarshaller.marshall(aSN1Subject.getInitials(), INITIALS_BINDING);\n            protocolMarshaller.marshall(aSN1Subject.getPseudonym(), PSEUDONYM_BINDING);\n            protocolMarshaller.marshall(aSN1Subject.getGenerationQualifier(), GENERATIONQUALIFIER_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public AxisLabelLayout(String group,int axis,ValuedRangeModel values){\n  this(group,axis,values,null);\n}\n", "BitMatrix encode ( String contents , BarcodeFormat format , int width , int height ) throws WriterException ;", "public boolean isConsistencyFailureStop ( ) ;", "protected CReadsDescription ( ) { super ( new Color ( NUM_ , NUM_ , NUM_ ) , STR_ ) ; }", "public void dumpThreads(int depth,boolean onlyActive){\n  log.info(getThreadDump(depth,onlyActive));\n}\n", "@BetaApi\n  public final Operation insertSecurityPolicy(\n      ProjectName project, SecurityPolicy securityPolicyResource) {\n\n    InsertSecurityPolicyHttpRequest request =\n        InsertSecurityPolicyHttpRequest.newBuilder()\n            .setProject(project == null ? null : project.toString())\n            .setSecurityPolicyResource(securityPolicyResource)\n            .build();\n    return insertSecurityPolicy(request);\n  }", "private byte[] toByteArray(char[] chars, Charset charset) {\n        assert chars != null;\n\n        CharBuffer charBuffer = CharBuffer.wrap(chars);\n        ByteBuffer byteBuffer = charset.encode(charBuffer);\n        byte[] bytes = Arrays.copyOfRange(byteBuffer.array(),\n                byteBuffer.position(), byteBuffer.limit());\n        Arrays.fill(byteBuffer.array(), (byte) 0); // clear sensitive data\n        return bytes;\n    }", "    public void setConvention(String value) throws RuntimeException {\n        StringSTAttribute att = null;\n        if (_att_convention == null) {\n            _att_convention = (StringSTAttribute) attributeFactory.getAttribute(\"convention\", \"band\");\n            if (_att_convention == null) {\n                throw new RuntimeException(\"BUG: cannot process attributeGroupName : convention probably incompatible attributeGroupName and attributeName\");\n            }\n        }\n        att = new StringSTAttribute(_att_convention);\n        super.addRemove(att, value);\n    }\n", "public MinusExpression ( final List < MemoryExpressionElement > children ) { this . children = children ; }", "private static Map < String , String > readFile ( File reutersFile ) throws IOException { BufferedReader reader = new BufferedReader ( new FileReader ( reutersFile ) ) ; String dateline = reader . readLine ( ) ; reader . readLine ( ) ; String title = read", "@Override\n\tpublic void postVisit(PlanNode node) {\n\t\ttry {\n\t\t\t// --------- check special cases for which we handle post visit differently ----------\n\t\t\t\n\t\t\t// skip data source node (they have no inputs)\n\t\t\t// also, do nothing for union nodes, we connect them later when gathering the inputs for a task\n\t\t\t// solution sets have no input. the initial solution set input is connected when the iteration node is in its postVisit\n\t\t\tif (node instanceof SourcePlanNode || node instanceof NAryUnionPlanNode || node instanceof SolutionSetPlanNode) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// check if we have an iteration. in that case, translate the step function now\n\t\t\tif (node instanceof IterationPlanNode) {\n\t\t\t\t// prevent nested iterations\n\t\t\t\tif (node.isOnDynamicPath()) {\n\t\t\t\t\tthrow new CompilerException(\"Nested Iterations are not possible at the moment!\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// if we recursively go into an iteration (because the constant path of one iteration contains\n\t\t\t\t// another one), we push the current one onto the stack\n\t\t\t\tif (this.currentIteration != null) {\n\t\t\t\t\tthis.iterationStack.add(this.currentIteration);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.currentIteration = (IterationPlanNode) node;\n\t\t\t\tthis.currentIteration.acceptForStepFunction(this);\n\t\t\t\t\n\t\t\t\t// pop the current iteration from the stack\n\t\t\t\tif (this.iterationStack.isEmpty()) {\n\t\t\t\t\tthis.currentIteration = null;\n\t\t\t\t} else {\n\t\t\t\t\tthis.currentIteration = this.iterationStack.remove(this.iterationStack.size() - 1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// inputs for initial bulk partial solution or initial workset are already connected to the iteration head in the head's post visit.\n\t\t\t\t// connect the initial solution set now.\n\t\t\t\tif (node instanceof WorksetIterationPlanNode) {\n\t\t\t\t\t// connect the initial solution set\n\t\t\t\t\tWorksetIterationPlanNode wsNode = (WorksetIterationPlanNode) node;\n\t\t\t\t\tJobVertex headVertex = this.iterations.get(wsNode).getHeadTask();\n\t\t\t\t\tTaskConfig headConfig = new TaskConfig(headVertex.getConfiguration());\n\t\t\t\t\tint inputIndex = headConfig.getDriverStrategy().getNumInputs();\n\t\t\t\t\theadConfig.setIterationHeadSolutionSetInputIndex(inputIndex);\n\t\t\t\t\ttranslateChannel(wsNode.getInitialSolutionSetInput(), inputIndex, headVertex, headConfig, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tfinal JobVertex targetVertex = this.vertices.get(node);\n\t\t\t\n\t\t\t\n\t\t\t// --------- Main Path: Translation of channels ----------\n\t\t\t// \n\t\t\t// There are two paths of translation: One for chained tasks (or merged tasks in general),\n\t\t\t// which do not have their own task vertex. The other for tasks that have their own vertex,\n\t\t\t// or are the primary task in a vertex (to which the others are chained).\n\t\t\t\n\t\t\t// check whether this node has its own task, or is merged with another one\n\t\t\tif (targetVertex == null) {\n\t\t\t\t// node's task is merged with another task. it is either chained, of a merged head vertex\n\t\t\t\t// from an iteration\n\t\t\t\tfinal TaskInChain chainedTask;\n\t\t\t\tif ((chainedTask = this.chainedTasks.get(node)) != null) {\n\t\t\t\t\t// Chained Task. Sanity check first...\n\t\t\t\t\tfinal Iterator<Channel> inConns = node.getInputs().iterator();\n\t\t\t\t\tif (!inConns.hasNext()) {\n\t\t\t\t\t\tthrow new CompilerException(\"Bug: Found chained task with no input.\");\n\t\t\t\t\t}\n\t\t\t\t\tfinal Channel inConn = inConns.next();\n\t\t\t\t\t\n\t\t\t\t\tif (inConns.hasNext()) {\n\t\t\t\t\t\tthrow new CompilerException(\"Bug: Found a chained task with more than one input!\");\n\t\t\t\t\t}\n\t\t\t\t\tif (inConn.getLocalStrategy() != null && inConn.getLocalStrategy() != LocalStrategy.NONE) {\n\t\t\t\t\t\tthrow new CompilerException(\"Bug: Found a chained task with an input local strategy.\");\n\t\t\t\t\t}\n\t\t\t\t\tif (inConn.getShipStrategy() != null && inConn.getShipStrategy() != ShipStrategyType.FORWARD) {\n\t\t\t\t\t\tthrow new CompilerException(\"Bug: Found a chained task with an input ship strategy other than FORWARD.\");\n\t\t\t\t\t}\n\t\n\t\t\t\t\tJobVertex container = chainedTask.getContainingVertex();\n\t\t\t\t\t\n\t\t\t\t\tif (container == null) {\n\t\t\t\t\t\tfinal PlanNode sourceNode = inConn.getSource();\n\t\t\t\t\t\tcontainer = this.vertices.get(sourceNode);\n\t\t\t\t\t\tif (container == null) {\n\t\t\t\t\t\t\t// predecessor is itself chained\n\t\t\t\t\t\t\tcontainer = this.chainedTasks.get(sourceNode).getContainingVertex();\n\t\t\t\t\t\t\tif (container == null) {\n\t\t\t\t\t\t\t\tthrow new IllegalStateException(\"Bug: Chained task predecessor has not been assigned its containing vertex.\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// predecessor is a proper task job vertex and this is the first chained task. add a forward connection entry.\n\t\t\t\t\t\t\tnew TaskConfig(container.getConfiguration()).addOutputShipStrategy(ShipStrategyType.FORWARD);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchainedTask.setContainingVertex(container);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// add info about the input serializer type\n\t\t\t\t\tchainedTask.getTaskConfig().setInputSerializer(inConn.getSerializer(), 0);\n\t\t\t\t\t\n\t\t\t\t\t// update name of container task\n\t\t\t\t\tString containerTaskName = container.getName();\n\t\t\t\t\tif (containerTaskName.startsWith(\"CHAIN \")) {\n\t\t\t\t\t\tcontainer.setName(containerTaskName + \" -> \" + chainedTask.getTaskName());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontainer.setName(\"CHAIN \" + containerTaskName + \" -> \" + chainedTask.getTaskName());\n\t\t\t\t\t}\n\n\t\t\t\t\t//update resource of container task\n\t\t\t\t\tcontainer.setResources(container.getMinResources().merge(node.getMinResources()),\n\t\t\t\t\t\t\tcontainer.getPreferredResources().merge(node.getPreferredResources()));\n\t\t\t\t\t\n\t\t\t\t\tthis.chainedTasksInSequence.add(chainedTask);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse if (node instanceof BulkPartialSolutionPlanNode ||\n\t\t\t\t\t\tnode instanceof WorksetPlanNode)\n\t\t\t\t{\n\t\t\t\t\t// merged iteration head task. the task that the head is merged with will take care of it\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new CompilerException(\"Bug: Unrecognized merged task vertex.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// -------- Here, we translate non-chained tasks -------------\n\t\t\t\n\t\t\t\n\t\t\tif (this.currentIteration != null) {\n\t\t\t\tJobVertex head = this.iterations.get(this.currentIteration).getHeadTask();\n\t\t\t\t// Exclude static code paths from the co-location constraint, because otherwise\n\t\t\t\t// their execution determines the deployment slots of the co-location group\n\t\t\t\tif (node.isOnDynamicPath()) {\n\t\t\t\t\ttargetVertex.setStrictlyCoLocatedWith(head);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t// create the config that will contain all the description of the inputs\n\t\t\tfinal TaskConfig targetVertexConfig = new TaskConfig(targetVertex.getConfiguration());\n\t\t\t\t\t\t\n\t\t\t// get the inputs. if this node is the head of an iteration, we obtain the inputs from the\n\t\t\t// enclosing iteration node, because the inputs are the initial inputs to the iteration.\n\t\t\tfinal Iterator<Channel> inConns;\n\t\t\tif (node instanceof BulkPartialSolutionPlanNode) {\n\t\t\t\tinConns = ((BulkPartialSolutionPlanNode) node).getContainingIterationNode().getInputs().iterator();\n\t\t\t\t// because the partial solution has its own vertex, is has only one (logical) input.\n\t\t\t\t// note this in the task configuration\n\t\t\t\ttargetVertexConfig.setIterationHeadPartialSolutionOrWorksetInputIndex(0);\n\t\t\t} else if (node instanceof WorksetPlanNode) {\n\t\t\t\tWorksetPlanNode wspn = (WorksetPlanNode) node;\n\t\t\t\t// input that is the initial workset\n\t\t\t\tinConns = Collections.singleton(wspn.getContainingIterationNode().getInput2()).iterator();\n\t\t\t\t\n\t\t\t\t// because we have a stand-alone (non-merged) workset iteration head, the initial workset will\n\t\t\t\t// be input 0 and the solution set will be input 1\n\t\t\t\ttargetVertexConfig.setIterationHeadPartialSolutionOrWorksetInputIndex(0);\n\t\t\t\ttargetVertexConfig.setIterationHeadSolutionSetInputIndex(1);\n\t\t\t} else {\n\t\t\t\tinConns = node.getInputs().iterator();\n\t\t\t}\n\t\t\tif (!inConns.hasNext()) {\n\t\t\t\tthrow new CompilerException(\"Bug: Found a non-source task with no input.\");\n\t\t\t}\n\t\t\t\n\t\t\tint inputIndex = 0;\n\t\t\twhile (inConns.hasNext()) {\n\t\t\t\tChannel input = inConns.next();\n\t\t\t\tinputIndex += translateChannel(input, inputIndex, targetVertex, targetVertexConfig, false);\n\t\t\t}\n\t\t\t// broadcast variables\n\t\t\tint broadcastInputIndex = 0;\n\t\t\tfor (NamedChannel broadcastInput: node.getBroadcastInputs()) {\n\t\t\t\tint broadcastInputIndexDelta = translateChannel(broadcastInput, broadcastInputIndex, targetVertex, targetVertexConfig, true);\n\t\t\t\ttargetVertexConfig.setBroadcastInputName(broadcastInput.getName(), broadcastInputIndex);\n\t\t\t\ttargetVertexConfig.setBroadcastInputSerializer(broadcastInput.getSerializer(), broadcastInputIndex);\n\t\t\t\tbroadcastInputIndex += broadcastInputIndexDelta;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new CompilerException(\n\t\t\t\t\"An error occurred while translating the optimized plan to a JobGraph: \" + e.getMessage(), e);\n\t\t}\n\t}", "public EventStoreBuilder heartbeatTimeout ( Duration duration ) { settingsBuilder . heartbeatTimeout ( duration ) ; return this ; }", "public double thetaPerDay ( final double spot , final double maturity ) { return theta ( spot , maturity ) / NUM_ ; }", "public void delete(String name) throws IOException {\n  if (name.equalsIgnoreCase(DESCRIPTIONS)) {\n    accessDescriptions=Collections.<AccessDescription>emptyList();\n  }\n else {\n    throw new IOException(\"Attribute name [\" + name + \"] not recognized by \"+ ", "private void run(){\n  try {\n    Thread current=Thread.currentThread();\n    char[] buf=new char[1024];\n    for (int len=in.read(buf); len != -1; len=in.read(buf)) {\n      append(buf,0,len);\n      if (current != thread) {\n        break;\n      }\n    }\n  }\n catch (  IOException e) {\n    logger.error(e.getMessage(),e);\n  }\n  trace(\"Finished\");\n}\n", "public void marshall(ListLogSubscriptionsRequest listLogSubscriptionsRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (listLogSubscriptionsRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(listLogSubscriptionsRequest.getDirectoryId(), DIRECTORYID_BINDING);\n            protocolMarshaller.marshall(listLogSubscriptionsRequest.getNextToken(), NEXTTOKEN_BINDING);\n            protocolMarshaller.marshall(listLogSubscriptionsRequest.getLimit(), LIMIT_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "@Override\n  protected <T> T postConstruct(T object, final Object... args) {\n    object = super.postConstruct(object, args);\n    object = configure(object);\n    object = initialize(object, args);\n\n    return object;\n  }", "public void push ( final float value ) { int bits = Float . floatToIntBits ( value ) ; if ( bits == NUM_ || bits == NUM_ || bits == NUM_ ) { mv . visitInsn ( Opcodes . FCONST_0 + ( int ) value ) ; } else { mv . visitLdcInsn ( value ) ; } }", "public void addTitle(String title) {\n\t\tXmpArray array = new XmpArray(XmpArray.ALTERNATIVE);\n\t\tarray.add(title);\n\t\tsetProperty(TITLE, array);\n\t}", "    private Element getImsTitleTag(final Document document, final LDItems.LDItem item) {\n        Element result = document.createElement(\"title\");\n        \n        if (item.getTitle() != null) {\n            result.appendChild(document.createTextNode(item.getTitle()));\n        } else {\n            result.appendChild(document.createTextNode(\"null\"));\n        }\n        \n        return result;\n    }\n", "public static final void partialUpdateAllWidgets(Context context){\n  updateAllWidgets(context,false);\n}\n", "public static IMultiPoint[] randomPoints(int n,int d){\n  IMultiPoint points[]=new IMultiPoint[n];\n  for (int i=0; i < n; i++) {\n    StringBuilder sb=new StringBuilder();\n    for (int j=0; j < d; j++) {\n      sb.append(rGen.nextDouble());\n      if (j < d - 1) {\n        sb.append(\",\");\n      }\n    }\n    points[i]=new Hyperpoint(sb.toString());\n  }\n  return points;\n}\n", "public static void main(String[] args) throws Throwable {\n  try {\n    execute(args);\n  }\n catch (  CeylonRuntimeException cre) {\n    throw cre;\n  }\ncatch (  Throwable t) {\n    Throwable t2=(t.getCause() != null) ? t.getCause() : t;\n    if (t2 instanceof InvocationTargetException) {\n      t2=(t.getCause() != null) ? t2.getCause() : t2;\n    }\n    throw t2;\n  }\n}\n", "public PubsubFuture < List < ReceivedMessage > > pull ( final String canonicalSubscriptionName , final boolean returnImmediately ) { return pull ( canonicalSubscriptionName , returnImmediately , DEFAULT_PULL_MAX_MESSAGES ) ; }", "  private void processQueue() {\n    WeakValue sv;\n    while ((sv = (WeakValue)queue.poll()) != null) {\n      hash.remove(sv.key); // we can access private data!\n    }\n  }\n", "public T adjacentDifference ( final Ops . BinaryDoubleOp f ) ;", "private boolean hasRemainingComments(){\n  return lastCommentIndex < comments.size() - 1;\n}\n", "private StringVector getNodesByID(XPathContext xctxt, int docContext,\n                                    String refval, StringVector usedrefs,\n                                    NodeSetDTM nodeSet, boolean mayBeMore)\n  {\n\n    if (null != refval)\n    {\n      String ref = null;\n//      DOMHelper dh = xctxt.getDOMHelper();\n      StringTokenizer tokenizer = new StringTokenizer(refval);\n      boolean hasMore = tokenizer.hasMoreTokens();\n      DTM dtm = xctxt.getDTM(docContext);\n\n      while (hasMore)\n      {\n        ref = tokenizer.nextToken();\n        hasMore = tokenizer.hasMoreTokens();\n\n        if ((null != usedrefs) && usedrefs.contains(ref))\n        {\n          ref = null;\n\n          continue;\n        }\n\n        int node = dtm.getElementById(ref);\n\n        if (DTM.NULL != node)\n          nodeSet.addNodeInDocOrder(node, xctxt);\n\n        if ((null != ref) && (hasMore || mayBeMore))\n        {\n          if (null == usedrefs)\n            usedrefs = new StringVector();\n\n          usedrefs.addElement(ref);\n        }\n      }\n    }\n\n    return usedrefs;\n  }", "    public void addParam(String name, String value) {\n        if (name == null) {\n            throw new NullPointerException(\"name\");\n        }\n        if (value == null) {\n            throw new NullPointerException(\"value\");\n        }\n        params.add(", "public HttpServerExchange setStatusCode(final int statusCode) {\n        if (statusCode < 0 || statusCode > 999) {\n            throw new IllegalArgumentException(\"Invalid response code\");\n        }\n        int oldVal = state;\n        if (allAreSet(oldVal, FLAG_RESPONSE_SENT)) {\n            throw UndertowMessages.MESSAGES.responseAlreadyStarted();\n        }\n        if(statusCode >= 500) {\n            if(UndertowLogger.ERROR_RESPONSE.isDebugEnabled()) {\n                UndertowLogger.ERROR_RESPONSE.debugf(new RuntimeException(), \"Setting error code %s for exchange %s\", statusCode, this);\n            }\n        }\n        this.state = oldVal & ~MASK_RESPONSE_CODE | statusCode & MASK_RESPONSE_CODE;\n        return this;\n    }", "    public void addAttributes(Entry[] attrSets, boolean checkSC) {\n        synchronized(this) {\n            if(bTerminated) {\n                throw new IllegalStateException(\"join manager was terminated\");\n            }//endif\n        }//end sync\n\tsynchronized(joinSet) {\n\t    lookupAttr = LookupAttributes.add(lookupAttr, attrSets, checkSC);\n            serviceItem.attributeSets = lookupAttr;\n            for(int i=0;i<joinSet.size();i++) {\n                ProxyReg proxyReg = (ProxyReg)joinSet.get(i);\n                proxyReg.addTask(new AddAttributesTask(proxyReg,attrSets));\n            }//end loop\n\t}//end sync(joinSet)\n    }//end addAttributes\n", "        public T remove() throws FifoQueueException, InterruptedException {\n            if (m_isClosed && size() == 0) {\n                throw new FifoQueueClosedException(\"Queue Closed\");\n            }\n\n            T result = super.remove();\n            adjust();\n            return result;\n        }\n", "public String substituteLink(\n        CmsObject cms,\n        String link,\n        String siteRoot,\n        String targetDetailPage,\n        boolean forceSecure) {\n\n        if (targetDetailPage != null) {\n            return m_linkSubstitutionHandler.getLink(cms, link, siteRoot, targetDetailPage, forceSecure);\n        } else {\n            return m_linkSubstitutionHandler.getLink(cms, link, siteRoot, forceSecure);\n        }\n\n    }", "\tstatic private String uniqueID(String path, SVNRevision oldRevision, SVNRevision newRevision) throws SVNException {\n\t\treturn path + \":\" + revisionNum(path, oldRevision) + \"-\" + revisionNum(path, newRevision);\n\t}\n", "@Override public InetSocketAddress ipRemote(){\n  SocketChannel s=_channel;\n  if (s != null) {\n    try {\n      return (InetSocketAddress)s.getRemoteAddress();\n    }\n catch (    IOException e) {\n      return null;\n    }\n  }\n else {\n    return null;\n  }\n}\n", "public boolean more() throws JSONException {\n        if(this.usePrevious) {\n            return true;\n        }\n        try {\n            this.reader.mark(1);\n        } catch (IOException e) {\n            throw new JSONException(\"Unable to preserve stream position\", e);\n        }\n        try {\n            // -1 is EOF, but next() can not consume the null character '\\0'\n            if(this.reader.read() <= 0) {\n                this.eof = true;\n                return false;\n            }\n            this.reader.reset();\n        } catch (IOException e) {\n            throw new JSONException(\"Unable to read the next character from the stream\", e);\n        }\n        return true;\n    }", "private boolean linkFirst(Node<E> node){\n  if (count >= capacity)   return false;\n  Node<E> f=first;\n  node.next=f;\n  first=node;\n  if (last == null)   last=node;\n else   f.prev=node;\n  ++count;\n  notEmpty.signal();\n  return true;\n}\n", "public void setFieldNames(java.util.Collection<String> fieldNames) {\n        if (fieldNames == null) {\n            this.fieldNames = null;\n            return;\n        }\n\n        this.fieldNames = new com.amazonaws.internal.SdkInternalList<String>(fieldNames);\n    }", "int executeCreateIndex ( CreateIndexData data , Transaction tx ) ;", "@Override public void onSuccess(){\n  if (measuredHeight <= 0)   measuredHeight=itemContainer.getMeasuredHeight();\n  ViewGroup.LayoutParams params=giveawayImage.getLayoutParams();\n  params.height=measuredHeight;\n}\n", "private String getParameter(Map<String, String> parameters, String paramName, boolean abortOnError,\n            String defaultValue) throws TransformationOperationException {\n        String value = parameters.get(paramName);\n        if (value != null) {\n            return value;\n        }\n        if (abortOnError) {\n            String error = String.format(\"There is no parameter with the name %s present. The step will be ignored.\",\n                paramName);\n            throw new TransformationOperationException(error);\n        }\n        logger.debug(\"There is no parameter with the name {} present. The value {} will be taken instead.\", paramName,\n            defaultValue);\n        return defaultValue;\n    }", "public Button createCloseButton() {\n\n        Button button = new Button(CmsVaadinUtils.getMessageText(org.opencms.ui.Messages.GUI_BUTTON_CLOSE_DIALOG_0));\n        button.setWidth(\"150px\");\n        button.addClickListener(new ClickListener() {\n\n            private static final long serialVersionUID = 1L;\n\n            public void buttonClick(ClickEvent event) {\n\n                m_context.finish(Lists.newArrayList(m_context.getResources().get(0).getStructureId()));\n            }\n        });\n        return button;\n    }", "private int visitNodesRec(Node v,EdgeMap<Integer> edgeWeights){\n  int maxValue=0;\n  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n    if (edgeWeights.get(e) == null) {\n      edgeWeights.set(e,visitNodesRec(e.getTarget(),edgeWeights) + (Integer)e.getInfo());\n    }\n    maxValue=Math.max(maxValue,edgeWeights.get(e));\n  }\n  return maxValue;\n}\n", "public InterproceduralCallGraphVertex lookupVertex ( MethodDescriptor methodDesc ) { return methodDescToVertexMap . get ( methodDesc ) ; }", "public void sessionDestroyed ( HttpSessionEvent event ) { activeSessions . remove ( event . getSession ( ) ) ; if ( Util . isCdiAvailable ( servletContext ) ) { FlowCDIContext . sessionDestroyed ( event ) ; } ViewScopeManager manager = ( ViewScopeManager ) servletContext . getAttribute ( ViewScopeManager . VIEW_SCOPE_MANAGER ) ; if ( manager != null ) { manager . sessionDestroyed ( event ) ; } }", "public Object clone(){\n  SimpleAttributeSet attr;\n  try {\n    attr=(SimpleAttributeSet)super.clone();\n    attr.table=(LinkedHashMap)table.clone();\n  }\n catch (  CloneNotSupportedException cnse) {\n    attr=null;\n  }\n  return attr;\n}\n", "private static JCacheJmxSupport findJCacheJmxSupportInstance() {\n    for (CacheLifeCycleListener l : CacheManagerImpl.getCacheLifeCycleListeners()) {\n      if (l instanceof JCacheJmxSupport) {\n        return (JCacheJmxSupport) l;\n      }\n    }\n    throw new LinkageError(\"JCacheJmxSupport not loaded\");\n  }", "\tpublic void servrfbClientInit() throws IOException{\n\t\tbyte shared[] = new byte[1];\n\t\tshared[0] = 1;\n\t\tin.read(shared,0,1);\n\t}\n", "\tpublic void insert(final T c) {\n\t\tassert !contains(c.getId());\n\n\t\tint i = computeHashValue(c.getId());\n\t\twhile (hashtable[i] != null) {\n\t\t\ti = (i + 1) % hashtable.length;\n\t\t}\n\t\thashtable[i] = c;\n\t\tif (size++ >= hashtable.length / 2) {\n\t\t\texpand();\n\t\t}\n\t}\n", "  public void destroyMainWindow() {\n    if (null!=mainWindow) {\n      mainWindow.setVisible(false);\n      mainWindow.dispose();\n    }\n  }\n", "public void clearPalette(){\n  currentPaletteList.removeAllElements();\n}\n", "public Lexer ( String s ) { initKeywords ( ) ; tok = new StreamTokenizer ( new StringReader ( s ) ) ; tok . wordChars ( STR_ , STR_ ) ; tok . ordinaryChar ( STR_ ) ; tok . lowerCaseMode ( BOOL_ ) ; nextToken ( ) ; }", "public static void scale( double alpha , DMatrixD1 a )\n    {\n        // on very small matrices (2 by 2) the call to getNumElements() can slow it down\n        // slightly compared to other libraries since it involves an extra multiplication.\n        final int size = a.getNumElements();\n\n        for( int i = 0; i < size; i++ ) {\n            a.data[i] *= alpha;\n        }\n    }", "\tpublic void writePageDirectoryEntry(PageDirectoryEntry pageDirectoryEntry, int offset) throws ChainException{\n\t\tif(offset >= 0 && offset < _totalEntries){\n\t\t\tbyte[] pageDirectoryEntryData = SerializationUtil.getSerializedForm(pageDirectoryEntry);\n\t\t\t\n\t\t\tSystem.arraycopy(pageDirectoryEntryData, 0, data, offset * _directoryEntrySize, pageDirectoryEntryData.length);\n\t\t}else{\n\t\t\tthrow new ChainException(null, \"Invalid directory offset: \" + offset);\n\t\t}\n\t}\n", "\tpublic void CleanMapInfo(){\n\t\tthis.x_translation=0;\n\t\tthis.y_translation=0;\n\t\tthis.zoom=1;\n\t}\n", "\tpublic void setHeight(Integer height) {\n\t\tif (height != null) {\n\t\t\tValidate.isTrue(height >= 0, \"height must be >= 0\");\n\t\t}\n\t\tthis.height = height;\n\t}\n", "public void copyResource(String source, String destination) throws CmsException, CmsIllegalArgumentException {\n\n        copyResource(source, destination, CmsResource.COPY_PRESERVE_SIBLING);\n    }", "public POSBaseLineFeatureExtractor(String viewName,String json){\n  this.viewName=viewName;\n  this.counter=POSBaseLineCounter.read(json);\n}\n", "public static void importExpressionTypes ( final CConnection connection , final int rawModuleId , final int moduleId ) throws SQLException { final String query = STR_ + CTableNames . EXPRESSION_TYPES_TABLE + STR_ + moduleId + STR_ + STR_ + String . format ( CTableNames . RAW_EXPRESSION_TYPES_TABLE , rawModuleId ) ; connection . executeUpdate ( query , BOOL_ ) ; }", "public static void setRegisteredOnServer(Context context, boolean flag) {\n        final SharedPreferences prefs = getGCMPreferences(context);\n        Editor editor = prefs.edit();\n        editor.putBoolean(PROPERTY_ON_SERVER, flag);\n        // set the flag's expiration date\n        long lifespan = getRegisterOnServerLifespan(context);\n        long expirationTime = System.currentTimeMillis() + lifespan;\n        Log.v(TAG, \"Setting registeredOnServer status as \" + flag + \" until \" +\n                new Timestamp(expirationTime));\n        editor.putLong(PROPERTY_ON_SERVER_EXPIRATION_TIME, expirationTime);\n        editor.commit();\n    }", "public static void showTextAligned(PdfContentByte canvas, int alignment, Phrase phrase, float x, float y, float rotation, int runDirection, int arabicOptions) {\n        if (alignment != Element.ALIGN_LEFT && alignment != Element.ALIGN_CENTER\n            && alignment != Element.ALIGN_RIGHT)\n            alignment = Element.ALIGN_LEFT;\n        canvas.saveState();\n        ColumnText ct = new ColumnText(canvas);\n        float lly = -1;\n        float ury = 2;\n        float llx;\n        float urx;\n        switch (alignment) {\n        \tcase Element.ALIGN_LEFT:\n        \t\tllx = 0;\n        \t\turx = 20000;\n        \t\tbreak;\n        \tcase Element.ALIGN_RIGHT:\n        \t\tllx = -20000;\n        \t\turx = 0;\n        \t\tbreak;\n        \tdefault:\n        \t\tllx = -20000;\n        \t\turx = 20000;\n        \t\tbreak;\n        }\n        if (rotation == 0) {\n        \tllx += x;\n        \tlly += y;\n        \turx += x;\n        \tury += y;\n        }\n        else {\n            double alpha = rotation * Math.PI / 180.0;\n            float cos = (float)Math.cos(alpha);\n            float sin = (float)Math.sin(alpha);\n            canvas.concatCTM(cos, sin, -sin, cos, x, y);\n        }\n        ct.setSimpleColumn(phrase, llx, lly, urx, ury, 2, alignment);\n        if (runDirection == PdfWriter.RUN_DIRECTION_RTL) {\n            if (alignment == Element.ALIGN_LEFT)\n                alignment = Element.ALIGN_RIGHT;\n            else if (alignment == Element.ALIGN_RIGHT)\n                alignment = Element.ALIGN_LEFT;\n        }\n        ct.setAlignment(alignment);\n        ct.setArabicOptions(arabicOptions);\n        ct.setRunDirection(runDirection);\n        try {\n            ct.go();\n        }\n        catch (DocumentException e) {\n            throw new ExceptionConverter(e);\n        }\n        canvas.restoreState();\n    }", "public BinaryDictionary(Context context,ByteBuffer byteBuffer,int dicTypeId){\n  if (byteBuffer != null) {\n    if (byteBuffer.isDirect()) {\n      mNativeDictDirectBuffer=byteBuffer;\n    }\n else {\n      mNativeDictDirectBuffer=ByteBuffer.allocateDirect(byteBuffer.capacity());\n      byteBuffer.rewind();\n      mNativeDictDirectBuffer.put(byteBuffer);\n    }\n    mDictLength=byteBuffer.capacity();\n    mNativeDict=openNative(mNativeDictDirectBuffer,TYPED_LETTER_MULTIPLIER,FULL_WORD_FREQ_MULTIPLIER,mDictLength);\n  }\n  mDicTypeId=dicTypeId;\n}\n", "\tpublic void setTarget(final PointerLocation _target) {\n\t\tif (_target == null) {\n\t\t\tthrow new IllegalArgumentException();\n\t\t}\n\t\tthis.target = _target;\n\n\t}\n", "    public Object getClassifier(Object handle) {\n        if (isAAssociationEnd(handle)) {\n            return ((MAssociationEnd) handle).getType();\n        }\n        return illegalArgumentObject(handle);\n    }\n", "    public New objectType(TypeNode tn) {\n        New_c n = (New_c) copy();\n\tn.tn = tn;\n\treturn n;\n    }\n", "public static LocationInfo parse(String fullInfo){\n  if (fullInfo == null) {\n    return null;\n  }\n  fullInfo=removeLambdas(fullInfo);\n  fullInfo=fullInfo.trim();\n  fullInfo=StringUtils.removeStart(fullInfo,\"at \");\n  int lastClosingBrace=fullInfo.indexOf(')');\n  int lastColon=fullInfo.lastIndexOf(':',lastClosingBrace);\n  int lastOpeningBrace=fullInfo.lastIndexOf('(',lastColon);\n  if (lastOpeningBrace == -1 || lastClosingBrace == -1 || lastColon == -1) {\n    return null;\n  }\n  String packageName;\n  String className;\n  String methodName;\n  String fileName;\n  Optional<Integer> lineNumber;\n  final String lineNumberString=fullInfo.substring(lastColon + 1,lastClosingBrace);\n  lineNumber=Optional.of(Integer.parseInt(lineNumberString));\n  fileName=fullInfo.substring(lastOpeningBrace + 1,lastColon);\n  fullInfo=fullInfo.substring(0,lastOpeningBrace);\n  int lastDot=fullInfo.lastIndexOf('.');\n  if (lastDot == -1) {\n    return null;\n  }\n else {\n    methodName=fullInfo.substring(lastDot + 1);\n    className=fullInfo.substring(0,lastDot);\n    lastDot=className.lastIndexOf(\".\");\n    if (lastDot == -1) {\n      packageName=\"\";\n    }\n else {\n      packageName=className.substring(0,lastDot);\n    }\n  }\n  return new LocationInfo(Optional.of(packageName),Optional.of(className),Optional.of(methodName),Optional.of(fileName),lineNumber,Optional.empty());\n}\n", "public boolean isDone ( ) { for ( Future < T > f : components ) if ( ! f . isDone ( ) ) return BOOL_ ; return BOOL_ ; }", "private static byte [ ] calculateMd5sum ( final File file ) throws IOException { try ( final FileInputStream inputStream = new FileInputStream ( file ) ) { final MessageDigest md5 = MessageDigest . getInstance ( STR_ ) ; final byte [ ] buffer = new byte [", "public void removeObserver(String notificationName,Object notifyContext){\n  List<Observer> observers=observerMap.get(notificationName);\n  if (observers != null) {\n    for (int i=0; i < observers.size(); i++) {\n      BaseObserver observer=(BaseObserver)observers.get(i);\n      if (observer.compareNotifyContext(notifyContext)) {\n        observers.remove(observer);\n      }\n    }\n    if (observers.size() == 0) {\n      observerMap.remove(notificationName);\n    }\n  }\n}\n", "private static PublicKey generatePublicKey(String encodedPublicKey){\n  try {\n    byte[] decodedKey=Base64.decode(encodedPublicKey);\n    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);\n    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));\n  }\n catch (  NoSuchAlgorithmException e) {\n    throw new RuntimeException(e);\n  }\ncatch (  InvalidKeySpecException e) {\n    Log.e(TAG,\"Invalid key specification.\");\n    throw new IllegalArgumentException(e);\n  }\ncatch (  Base64DecoderException e) {\n    Log.e(TAG,\"Base64 decoding failed.\");\n    throw new IllegalArgumentException(e);\n  }\n}\n", "private Object parsePrimitive(Class<?> objectType, final String serializedObject) {\n        Object res = null;\n\n        if (Boolean.class.isAssignableFrom(objectType)) {\n            res = Boolean.valueOf(serializedObject);\n        } else if (String.class.isAssignableFrom(objectType)) {\n            res = serializedObject;\n        } else if (Character.class.isAssignableFrom(objectType)) {\n            res = Character.valueOf(serializedObject.charAt(0));\n        } else if (Byte.class.isAssignableFrom(objectType)) {\n            res = Byte.parseByte(serializedObject);\n        } else if (Short.class.isAssignableFrom(objectType)) {\n            res = Short.parseShort(serializedObject);\n        } else if (Integer.class.isAssignableFrom(objectType)) {\n            res = Integer.parseInt(serializedObject);\n        } else if (Long.class.isAssignableFrom(objectType)) {\n            res = Long.parseLong(serializedObject);\n        } else if (Float.class.isAssignableFrom(objectType)) {\n            res = Float.parseFloat(serializedObject);\n        } else if (Double.class.isAssignableFrom(objectType)) {\n            res = Double.parseDouble(serializedObject);\n        }\n        return res;\n    }", "    public void shutdown() {\n        log.info(\"Stopping \" + nameToServiceMap.size() + \" services\");\n\n        List servicesCopy = new ArrayList(installedServices);\n\n        int serviceCounter = 0;\n        ObjectName name = null;\n\n        ListIterator i = servicesCopy.listIterator(servicesCopy.size());\n        while (i.hasPrevious()) {\n            ServiceContext ctx = (ServiceContext) i.previous();\n            name = ctx.objectName;\n\n            try {\n                remove(name);\n                serviceCounter++;\n            } catch (Throwable e) {\n                log.error(\"Could not remove \" + name, e);\n            }\n        }\n        log.info(\"Stopped \" + serviceCounter + \" services\");\n    }\n", "private void writeListFile(final File inputfile, final String relativeRootFile) {\n        try (Writer bufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(inputfile)))) {\n            bufferedWriter.write(relativeRootFile);\n            bufferedWriter.flush();\n        } catch (final IOException e) {\n            logger.error(e.getMessage(), e) ;\n        }\n    }", "    public void setMax(Point max) throws IllegalArgumentException {\n        if (max == null || !Point.isValidTriple(max)) {\n            throw new IllegalArgumentException(\n                    \"setMax() called with Point that is either null or not valid\");", "public static boolean validateTypeName(final Component parent,final TypeManager typeManager,final JTextField name){\n  if (validateTypeName(typeManager,name)) {\n    return true;\n  }\n else {\n    CMessageBox.showWarning(parent,String.format(\"Unable to create empty or existing type.\"));\n    return false;\n  }\n}\n", "public void write(String text) throws SAXException {\n  if (text != null) {\n    char[] chars=text.toCharArray();\n    contentHandler.characters(chars,0,chars.length);\n  }\n}\n", "public static @NonNull ModuleLayer createLayer(final @NonNull ModuleLayer parent, final @NonNull Set<Path> paths) {\n    final ModuleFinder finder = ModuleFinder.of(paths.toArray(new Path[paths.size()]));\n    final Set<String> modules = finder.findAll().stream().map(reference -> reference.descriptor().name()).collect(Collectors.toSet());\n    final Configuration configuration = parent.configuration().resolve(finder, ModuleFinder.of(), modules);\n    final ClassLoader loader = ClassLoader.getSystemClassLoader();\n    return parent.defineModulesWithOneLoader(configuration, loader);\n  }", "public void removeListener ( Listener < ComplexBuffer > listener ) { mListener = null ; }", "    private void writeSkeleton(String text) {\n        // Write tskeleton file ...\n        if (text != null) {\n            try {\n                skeletonOut.write(text);\n                skeletonOut.flush();    // For debugging\n            }\n            catch(IOException e) {\n                System.err.println(\"Error writing skeleton file.\");\n                System.err.println(e.getMessage());\n            }        \n        }\n    }\n", "protected String getNodePathToRoot(INode node) {\r\n        StringBuilder sb = new StringBuilder();\r\n        INode parent = node;\r\n        while (null != parent) {\r\n            if (parent.getNodeData().getName().contains(\"\\\\\")) {\r\n                log.debug(\"source: replacing \\\\ in: \" + parent.getNodeData().getName());\r\n                sb.insert(0, \"\\\\\" + parent.getNodeData().getName().replaceAll(\"\\\\\\\\\", \"/\"));\r\n            } else {\r\n                sb.insert(0, \"\\\\\" + parent.getNodeData().getName());\r\n            }\r\n            parent = parent.getParent();\r\n        }\r\n        return sb.toString();\r\n    }", "public void addPropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){\n  beanContextChildSupport.addPropertyChangeListener(propertyName,in_pcl);\n}\n", "protected String processTag(String packageName) {\n    final int skipDepth = 6; // skip 6 stackframes to find the location where this was called\n    final Thread thread = Thread.currentThread();\n    final StackTraceElement trace = thread.getStackTrace()[skipDepth];\n    return String.format(TAG_FORMAT, packageName, trace.getFileName(), trace.getLineNumber());\n  }", "public void output(Writer out){\n  output(new PrintWriter(out));\n}\n", "private String stripSeparators(String contact){\n  contact=contact.replaceAll(\"[ -]\",\"\");\n  Matcher matcher=PATTERN_CONTACT.matcher(contact);\n  if (matcher.find()) {\n    return matcher.group();\n  }\n  return null;\n}\n", "private void updateConfiguration(String[] pParams)\n\t{\t\t\n\t\tif (pParams != null)\n\t\t{\n\t\t\tStringTokenizer tok;\n\t\t\t\n\t\t\tfor (int i = 0, anz = pParams.length; i < anz; i++)\n\t\t\t{\n\t\t\t\ttok = new StringTokenizer(pParams[i], \"=\");\n\t\t\t\t\n\t\t\t\tif (tok.countTokens() == 2", "public void close ( ) ;", "public static Number floor(Number a){\n  if (isFloatingPoint(a)) {\n    return Math.floor(a.doubleValue());\n  }\n else {\n    return a.longValue();\n  }\n}\n", "protected void handleListenerException ( Throwable ex ) { if ( ex instanceof Exception ) { invokeExceptionListener ( ( Exception ) ex ) ; } if ( isActive ( ) ) { incrementFailedEvents ( ) ; logger . error ( message ( STR_ ) , ex ) ; } else { logger . debug ( message ( STR_ ) , ex ) ; } }", "@Override\n\tpublic String getValue(java.util.Locale locale) {\n\t\treturn _cpDefinitionSpecificationOptionValue.getValue(locale);\n\t}", "private void injectEventListeners(final ServiceRegistry registry) {\n\n        EventListenerRegistry eventRegistry = registry\n                .getService(EventListenerRegistry.class);\n\n        List<PostInsertEventListener> postInsertEvents = locator\n                .getAllServices(PostInsertEventListener.class);\n        for (PostInsertEventListener piEventListener : postInsertEvents) {\n            logger.trace(\"Registering PostInsert: \" + piEventListener\n                    .getClass().getCanonicalName());\n            eventRegistry.appendListeners(EventType.POST_INSERT,\n                    piEventListener);\n        }\n\n        List<PostUpdateEventListener> postUpdateEvents = locator\n                .getAllServices(PostUpdateEventListener.class);\n        for (PostUpdateEventListener puEventListener : postUpdateEvents) {\n            logger.trace(\"Registering PostUpdate: \" + puEventListener\n                    .getClass().getCanonicalName());\n            eventRegistry.appendListeners(EventType.POST_UPDATE,\n                    puEventListener);\n        }\n\n        List<PostDeleteEventListener> postDeleteEvents = locator\n                .getAllServices(PostDeleteEventListener.class);\n        for (PostDeleteEventListener pdEventListener : postDeleteEvents) {\n            logger.trace(\"Registering PostDelete: \" + pdEventListener\n                    .getClass().getCanonicalName());\n            eventRegistry.appendListeners(EventType.POST_DELETE,\n                    pdEventListener);\n        }\n\n        List<PreInsertEventListener> preInsertEvents = locator\n                .getAllServices(PreInsertEventListener.class);\n        for (PreInsertEventListener piEventListener : preInsertEvents) {\n            logger.trace(\"Registering PreInsert: \" + piEventListener\n                    .getClass().getCanonicalName());\n            eventRegistry.appendListeners(EventType.PRE_INSERT,\n                    piEventListener);\n        }\n\n        List<PreUpdateEventListener> preUpdateEvents = locator\n                .getAllServices(PreUpdateEventListener.class);\n        for (PreUpdateEventListener puEventListener : preUpdateEvents) {\n            logger.trace(\"Registering PreUpdate: \" + puEventListener\n                    .getClass().getCanonicalName());\n            eventRegistry.appendListeners(EventType.PRE_UPDATE,\n                    puEventListener);\n        }\n\n        List<PreDeleteEventListener> preDeleteEvents = locator\n                .getAllServices(PreDeleteEventListener.class);\n        for (PreDeleteEventListener pdEventListener : preDeleteEvents) {\n            logger.trace(\"Registering PreDelete: \" + pdEventListener\n                    .getClass().getCanonicalName());\n            eventRegistry.appendListeners(EventType.PRE_DELETE,\n                    pdEventListener);\n        }\n\n        List<PostCommitInsertEventListener> pciEvents = locator\n                .getAllServices(PostCommitInsertEventListener.class);\n        for (PostCommitInsertEventListener cpiEventListener : pciEvents) {\n            logger.trace(\"Registering PostCommitInsert: \" + cpiEventListener\n                    .getClass().getCanonicalName());\n            eventRegistry.appendListeners(EventType.POST_COMMIT_INSERT,\n                    cpiEventListener);\n        }\n\n        List<PostCommitUpdateEventListener> pcuEvents = locator\n                .getAllServices(PostCommitUpdateEventListener.class);\n        for (PostCommitUpdateEventListener cpuEventListener : pcuEvents) {\n            logger.trace(\"Registering PostCommitUpdate: \" + cpuEventListener\n                    .getClass().getCanonicalName());\n            eventRegistry.appendListeners(EventType.POST_COMMIT_UPDATE,\n                    cpuEventListener);\n        }\n\n        List<PostCommitDeleteEventListener> pcdEvents = locator\n                .getAllServices(PostCommitDeleteEventListener.class);\n        for (PostCommitDeleteEventListener cpdEventListener : pcdEvents) {\n            logger.trace(\"Registering PostCommitDelete: \" + cpdEventListener\n                    .getClass().getCanonicalName());\n            eventRegistry.appendListeners(EventType.POST_COMMIT_DELETE,\n                    cpdEventListener);\n        }\n    }", "public void load(File file) throws IOException {\n        _entryFile = file;\n        Chronos c = new Chronos();\n        ChannelReader in = new ChannelReader(file);\n\n        try {\n            in.open();\n\n            // Read entry head\n            long fileVersion = in.readLong();\n            if (fileVersion != STORAGE_VERSION) {\n                throw new RuntimeException(\"Wrong storage version \" + fileVersion + \" encounted in \" + file.getAbsolutePath() + \". Version \" + STORAGE_VERSION\n                        + \" expected.\");\n            }\n\n            long minScnHead = in.readLong();\n            long maxScnHead = in.readLong();\n            int length = in.readInt();\n\n            // Read entry body\n            loadDataSection(in, length);\n\n            // Read entry tail\n            long minScnTail = in.readLong();\n            long maxScnTail = in.readLong();\n\n            if (minScnHead != minScnTail) {\n                throw new IOException(\"min scns don't match: \" + minScnHead + \" vs \" + minScnTail);\n            }\n            if (maxScnHead != maxScnTail) {\n                throw new IOException(\"max scns don't match:\" + maxScnHead + \" vs \" + maxScnTail);\n            }\n\n            _minScn = minScnHead;\n            _maxScn = maxScnHead;\n\n            if(_log.isInfoEnabled()) {\n                _log.info(\"loaded entry: minScn=\" + _minScn + \" maxScn=\" + _maxScn + \" size=\" + size() + \" file=\" + file.getName() + \" in \" + c.getElapsedTime());\n            }\n        } finally {\n            in.close();\n        }\n    }", "public static Predicate<String> endsWith(final String pattern){\n  Objects.requireNonNull(pattern,\"The pattern must not be null\");\n  return null;\n}\n", "public Vector3d set(Vector2dc v, double z) {\n        return set(v.x(), v.y(), z);\n    }", "    protected void setClassLoader(ClassLoader aLoader) {\n    \tthis.classLoaderReference = new WeakClassLoaderReference(aLoader);\n    \tworld = new ReflectionWorld(this.classLoaderReference.getClassLoader());\n    }\n", "public abstract void paint ( Graphics g , Divider divider ) ;", "public static NameMatcher < JobKey > jobNameEquals ( String compareTo ) { return NameMatcher . nameEquals ( compareTo ) ; }", "@Override\n    public void renderItem(final Comboitem item, final Document doc) {\n        item.setLabel(doc.getTitle());\n    }", "    public Point3 clampMax(double max) {\n        return new Point3(\n            Math.min(x,max),\n            Math.min(y,max),\n            Math.min(z,max)) ;\n    }\n", "private void updateSaveFields(){\n  m_nameTextField.setModified(!m_savedName.equals(m_nameTextField.getText()));\n  m_descriptionField.setModified(!m_savedDescription.equals(m_descriptionField.getText()));\n}\n", "private void updateFirstKey(PageModificationContext context) {\n        BTreePage page = context.getPageWrapper().getPage();\n        assert page.getConfig().isIndexPage() : \"expected index page\";\n        if (page.getCount() > 0) {\n            page.setFirstKey(generateMinKey());\n        }\n    }", "public static boolean isUnaryInstruction ( final String mnemonic ) { return mnemonic . equals ( ReilHelpers . OPCODE_BISZ ) || mnemonic . equals ( ReilHelpers . OPCODE_STR ) ; }", "  public void addEvent(Requirement thisRequirement) {\n    if (thisRequirement != null) {\n      openRequirements.add(thisRequirement);\n    }\n  }\n", "public static <T extends TypeDefinition> ElementMatcher.Junction<T> ofSort(TypeDefinition.Sort sort) {\n        return ofSort(is(sort));\n    }", "public SnapshotThread(){\n  super(\"snapshot thread\");\n  setDaemon(true);\n}\n", "public void push ( T newVal ) { int index = ( int ) ( currentIndex . incrementAndGet ( ) % maxSize ) ; circularArray [ index ] . set ( newVal ) ; }", "\tpublic NodeModel getChild(int index) {\n\t\tif ((index < 0) || (index >= getChildSize()))\n\t\t\treturn null;\n\t\treturn (NodeModel) children.get(index);\n\t}\n", "\tpublic Image currentImage() {\n\t\tImage current = null;\n\t\tif (this.dialImages.size() > 0) {\n\t\t\tcurrent = (Image)this.dialImages.elementAt(this.currentImageIndex);\n \t\t\tthis.imageWidth = current.getWidth(this);\n  \t\t\tthis.imageHeight = current.getHeight(this);\n\t\t}\n\n\t\treturn current;\n\t}\n", "public static double floor(double x){\n  long y;\n  if (Double.isNaN(x)) {\n    return x;\n  }\n  if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {\n    return x;\n  }\n  y=(long)x;\n  if (x < 0 && y != x) {\n    y--;\n  }\n  if (y == 0) {\n    return x * y;\n  }\n  return y;\n}\n", "private String getTargetColumnName(String sourceColumnName, String alias) {\n    String targetColumnName = alias;\n    Schema obj = this.getMetadataColumnMap().get(sourceColumnName.toLowerCase());\n    if (obj == null) {\n      targetColumnName = (targetColumnName == null ? \"unknown\" + this.unknownColumnCounter : targetColumnName);\n      this.unknownColumnCounter++;\n    } else {\n      targetColumnName = (StringUtils.isNotBlank(targetColumnName) ? targetColumnName : sourceColumnName);\n    }\n    targetColumnName = this.toCase(targetColumnName);\n    return Utils.escapeSpecialCharacters(targetColumnName, ConfigurationKeys.ESCAPE_CHARS_IN_COLUMN_NAME, \"_\");\n  }", "public static double [ ] [ ] selectColumns ( double matrix [ ] [ ] , Vector < Integer > columns ) { double [ ] [ ] data = new double [ matrix . length ] [ columns . size ( ) ] ; for ( int r = NUM_ ; r < matrix . length ; r ++ ) { for ( int cIndex = NUM_ ;", "static void checkAccess ( final int access , final int possibleAccess ) { if ( ( access & ~ possibleAccess ) != NUM_ ) { throw new IllegalArgumentException ( STR_ + access ) ; } int pub = ( access & Opcodes . ACC_PUBLIC ) == NUM_ ? NUM_ : NUM_ ; int pri =", "public static String quote(String s){\n  if (s == null)   return null;\n  if (s.length() == 0)   return \"\\\"\\\"\";\n  StringBuffer b=new StringBuffer(s.length() + 8);\n  quote(b,s);\n  return b.toString();\n}\n", "        public boolean events() {\n            boolean result = false;\n\n            Runnable r = null;\n            while ( (r = events.poll()) != null ) {\n                result = true;\n                try {\n                    r.run();\n                    if ( r instanceof PollerEvent ) {\n                        ((PollerEvent)r).reset();\n                        eventCache.offer((PollerEvent)r);\n                    }\n                } catch ( Throwable x ) {\n                    log.error(\"\",x);\n                }\n            }\n\n            return result;\n        }\n", "public void reset(){\n  double zoomOld=getZoom();\n  double zoomNew=1.0;\n  PointND<? extends Number> centerOld=getCenter();\n  List<String> axesNames=getAxes();\n  Double[] centerCoordsOriginal=new Double[centerOld.getDimensions()];\n  int axisIndex=0;\n  for (  String axisName : axesNames) {\n    NavigationInfo info=getInfo(axisName);\n    if (info != null) {\n      double centerCoordOriginal=info.getCenterOriginal();\n      centerCoordsOriginal[axisIndex]=centerCoordOriginal;\n      info.setCenter(centerCoordOriginal);\n      info.setZoom(zoomNew);\n    }\n    axisIndex++;\n  }\n  PointND<Double> centerNew=new PointND<Double>(centerCoordsOriginal);\n  NavigationEvent<PointND<? extends Number>> panEvent=new NavigationEvent<PointND<? extends Number>>(this,centerOld,centerNew);\n  fireCenterChanged(panEvent);\n  NavigationEvent<Double> zoomEvent=new NavigationEvent<Double>(this,zoomOld,1.0);\n  fireZoomChanged(zoomEvent);\n  refresh();\n}\n", "boolean doCommandRemoveDevicefromGroupInternet ( String userKey , long deviceId , long groupId ) ;", "  protected Object getCellValue(javax.swing.JTable aTable, int aRow, int aColumn) throws NumberFormatException{\n    Short lValue = (new Short((String) aTable.getValueAt(aRow, aColumn)));\n    return lValue;\n  }\n", "public SecretKey generateKey() {\n        SecretKey key = null;\n        try {\n            KeyGenerator generator = KeyGenerator.getInstance(\"AES\");\n            generator.init(128);\n            key = generator.generateKey();\n        } catch (NoSuchAlgorithmException e) {\n            logger.error(\"Unable to generate AES key\", e);\n        }\n\n        return key;\n    }", "protected double multiply(double[][] mat,double[] in,double[] out){\n  double l=0.;\n  for (int d1=0; d1 < in.length; d1++) {\n    final double[] row=mat[d1];\n    double t=0.;\n    for (int d2=0; d2 < in.length; d2++) {\n      t+=row[d2] * in[d2];\n    }\n    out[d1]=t;\n    l+=t * t;\n  }\n  return l > 0 ? Math.sqrt(l) : 0.;\n}\n", "private void copySignerToNewLocation(){\n  String tenantLduDn=getLduDn();\n  ILdapMessage credsObjects=null;\n  try {\n    credsObjects=getTenantCredentials(tenantLduDn);\n    int maxIndex=getCurrMaxIndex(TRUSTED_CRED_OBJECT_CLASS,null) + 1;\n    String cn=getTenantCredentialCn(maxIndex);\n    ILdapEntry lastSigner=getLastSigner(credsObjects);\n    List<LdapMod> modValues=createAtts(lastSigner);\n    LdapValue[] values={new LdapValue(cn)};\n    LdapMod mod=new LdapMod(LdapModOperation.ADD,\"cn\",values);\n    modValues.add(mod);\n    String baseDn=String.format(\"CN=%s,CN=Tenants,CN=IdentityManager,CN=Services,%s\",tenantName,this.rootDn);\n    String newDn=\"CN=\" + cn + \",\"+ baseDn;\n    connection.addObject(newDn,modValues.toArray(new LdapMod[]{}));\n  }\n  finally {\n    closeMessage(credsObjects);\n  }\n}\n", "\tpublic Object createService(String pvServiceInterfaceClassName, String pvServiceImplClassName) throws Exception {\n\t\tObject lvObject = Util.createObject(pvServiceImplClassName);\n\t\treturn lvObject;\n\t}\n", "public static String uri(final String xmlBase, \n\t\tString dbName, String idPart, Class<? extends BioPAXElement> type)\n\t{\n\t\tif(type == null || (dbName == null && idPart == null))\n\t\t\tthrow new IllegalArgumentException(\"'Either type' is null, or both dbName and idPart are nulls.\");\n\n\t\tif (idPart != null) idPart = idPart.trim();\n\t\tif (dbName != null) dbName = dbName.trim();\n\n\t\t// try to find a standard URI, if exists, for a publication xref, or at least a standard name:\n\t\tif (dbName != null)\n\t\t{\n\t\t\ttry {\n\t\t\t\t// try to get the preferred/standard name\n\t\t\t\t// for any type, for consistency\n\t\t\t\tdbName = MiriamLink.getName(dbName);\n\t\t\t\t// a shortcut: a standard and resolvable URI exists for some BioPAX types\n\t\t\t\tif ((type.equals(PublicationXref.class) && \"pubmed\".equalsIgnoreCase(dbName))\n\t\t\t\t\t|| type.equals(RelationshipTypeVocabulary.class)\n\t\t\t\t\t|| ProteinReference.class.isAssignableFrom(type)\n\t\t\t\t\t|| SmallMoleculeReference.class.isAssignableFrom(type)\n\t\t\t\t\t|| (type.equals(BioSource.class) && \"taxonomy\".equalsIgnoreCase(dbName)\n\t\t\t\t\t\t&& idPart!=null && idPart.matches(\"^\\\\d+$\"))\n\t\t\t\t)\n\t\t\t\t{\t//get the standard URI and quit (success), or fail and continue making a new URI below...\n\t\t\t\t\treturn MiriamLink.getIdentifiersOrgURI(dbName, idPart);\n\t\t\t\t}\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\tlog.info(String.format(\"uri(for a %s): db:%s, id:%s are not standard; %s)\",\n\t\t\t\t\t\ttype.getSimpleName(), dbName, idPart, e.getMessage()));\n\t\t\t}\n\t\t}\n\n\t\t// If not returned above this point - no standard URI (Identifiers.org) was found -\n\t\t// then let's consistently build a new URI from args, anyway, the other way around:\n\t\t\n\t\tStringBuilder sb = new StringBuilder();\t\t\n\t\tif (dbName != null) //lowercase for consistency\n\t\t\tsb.append(dbName.toLowerCase()); \t\n\t\t\n\t\tif (idPart != null) {\n\t\t\tif (dbName != null) sb.append(\"_\");\n\t\t\tsb.append(idPart);\n\t\t}\n\t\t\n\t\tString localPart = sb.toString();\n\t\tString strategy = System.getProperty(PROPERTY_NORMALIZER_URI_STRATEGY, VALUE_NORMALIZER_URI_STRATEGY_MD5);\n\t\tif(VALUE_NORMALIZER_URI_STRATEGY_SIMPLE.equals(strategy) || Xref.class.isAssignableFrom(type))\n\t\t//i.e., for xrefs, always use the simple URI strategy (makes them human-readable)\n\t\t{\n\t\t\t//simply replace \"unsafe\" symbols with underscore (some uri clashes might be possible but rare...)\n\t\t\tlocalPart = localPart.replaceAll(\"[^-\\\\w]\", \"_\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//replace the local part with its md5 sum string (32-byte)\n\t\t\tlocalPart = ModelUtils.md5hex(localPart);\n\t\t}\n\t\t\n\t\t// create URI using the xml:base and digest of other values:\n\t\treturn ((xmlBase != null) ? xmlBase : \"\") + type.getSimpleName() + \"_\" + localPart;\n\t}", "public T next ( ) { return array . cursorNext ( cursorId ) ; }", "\tpublic void setPropertyFitWindow(Boolean fit) {\n\t\tuseConstantXSpace = fit.booleanValue();\n\n\t\tif (plotterPanel != null) {\n\t\t\tif (useConstantXSpace) {\n\t\t\t\tsetPlotterPanel(new ExpandingPlotterPanel(this));\n\t\t\t} else {\n\t\t\t\tsetPlotterPanel(new AdjustingPlotterPanel(this));\n\t\t\t}\n\t\t}\n\t}\n", "public Object parse ( File file , String charset ) { return parseFile ( file , charset ) ; }", "\tpublic void focusLost(FocusEvent e) {\n\t\tthis.close();\n\t}\n", "    public void trim() {\n        String strResult = new String(toString());\n        setValue(strResult.trim());\n    }\n", "public boolean writeDescriptor(byte[] data,BleDescriptorCallback bleCallback){\n  return writeDescriptor(getDescriptor(),data,bleCallback);\n}\n", "void addSession ( GSSessionImpl childSession ) { synchronized ( this ) { sessions . addElement ( childSession ) ; } }", "public Promise < T > delay ( long delay , TimeUnit unit ) { return new Promise < T > ( observable . delay ( delay , unit ) ) ; }", "public void addFilter(AbstractLogFilter<E> filter) {\n                Validate.notNull(filter);\n                filters.add(filter);\n                uptodate = false;\n                filter.addObserver(this);\n        }", "  public void forceReload() {\n    this.treeModel.reload();\n  }\n", "\tpublic void prepare(int binId, String database) throws BinBaseException {\n\t\ttry {\n\t\t\tBinBasePubchemService service = Configurator.getPubchemService();\n\n\t\t\tif (service.hasPubchemCID(binId, database) == false) {\n\t\t\t\tthrow new NoPubchemIdException(\"this bin has no pubchem id: \"\n\t\t\t\t\t\t+ binId);\n\t\t\t}\n\n\t\t\tresolver.prepare(service.getPubchemCIDForBID(binId, database));\n\t\t} catch (BinBaseException e) {\n\t\t\tthrow e;\n\t\t} catch (Exception e) {\n\t\t\tthrow new BinBaseException(e.getMessage(), e);\n\t\t}\n\t}\n", "@SuppressWarnings(\"deprecation\") private void initTime(){\n  Time time=new Time(System.currentTimeMillis());\n  int hours=time.getHours();\n  mHourSingleDigits=hours % 10;\n  mHourTenDigits=hours / 10;\n  int minutes=time.getMinutes();\n  mMinSingleDigits=minutes % 10;\n  mMinTenDigits=minutes / 10;\n  int seconds=time.getSeconds();\n  mSecSingleDigits=seconds % 10;\n  mSecTenDigits=seconds / 10;\n}\n", "public String getServiceStateClassName(final Object serviceState) throws CouldNotPerformException {\n        // todo: move to dal or any bco component. Jul should be independent from bco architecture.\n        if (serviceState.getClass().getName().startsWith(\"org.openbase.type\")) {\n            return serviceState.getClass().getName();\n        }\n\n        if (serviceState.getClass().isEnum()) {\n            logger.info(serviceState.getClass().getName());\n            return serviceState.getClass().getName();\n        }\n\n        logger.debug(\"Simple class name of attribute to upper case [\" + serviceState.getClass().getSimpleName().toUpperCase() + \"]\");\n        JavaTypeToProto javaToProto;\n        try {\n            javaToProto = JavaTypeToProto.valueOf(serviceState.getClass().getSimpleName().toUpperCase());\n        } catch (IllegalArgumentException ex) {\n            throw new CouldNotPerformException(\"ServiceState is not a supported java primitive nor a supported rst type\", ex);\n        }\n        logger.debug(\"According proto type [\" + javaToProto.getProtoType().name() + \"]\");\n        return javaToProto.getProtoType().name();\n    }", "private File prepareTestDir ( String name ) throws Exception { File testDir = new File ( name ) ; if ( testDir . exists ( ) ) { for ( File child : testDir . listFiles ( ) ) { child . delete ( ) ; } testDir . delete ( ) ; } if ( testDir . exists ( ) ) thro", "    public Term copyForProof(AxiomSource as, Scope scope) {\n        Term[] newTerms = new Term[terms.length];\n\n        for (int i = 0; i < terms.length; i++) {\n            newTerms[i] = terms[i].copyForProof(as, scope);\n        }\n        return new ConsultingNot(new ConsultingStructure(as, functor, newTerms));\n    }\n", "private MultipartFile findByFileName(String filename,Map<String,MultipartFile> files){\n  if (files.containsKey(filename)) {\n    return files.get(filename);\n  }\n  for (  MultipartFile file : files.values()) {\n    if (filename.equals(file.getOriginalFilename())) {\n      return file;\n    }\n  }\n  return null;\n}\n", "\tpublic void warn(final Throwable e) {\n\t\twarn(\"Unexpected Error\", e); //$NON-NLS-1$\n\t}\n", "\tpublic void setColor() {\n\t\tswitch (this.type) {\n\t\tcase EnvironmentElement.HeatSource:\n\t\t\tthis.colorRed = 255;\n\t\t\tthis.colorGreen = 0;\n\t\t\tthis.colorBlue = 0;\n\t\t\tbreak;\n\t\tcase EnvironmentElement.PowerSource:\n\t\t\tthis.colorRed = 0;\n\t\t\tthis.colorGreen = 255;\n\t\t\tthis.colorBlue = 0;\n\t\t\tbreak;\n\t\tcase EnvironmentElement.LightSource:\n\t\t\tthis.colorRed = 255;\n\t\t\tthis.colorGreen = 255;\n\t\t\tthis.colorBlue = 255;\n\t\t\tbreak;\n\t\tcase EnvironmentElement.WaterSource:\n\t\t\tthis.colorRed = 0;\n\t\t\tthis.colorGreen = 0;\n\t\t\tthis.colorBlue = 255;\n\t\t\tbreak;\n\t\t}\n\t}\n", "private StreamWriter newStreamWriter ( String stream , ExpectedVersion version ) { return new StreamWriter ( eventstore , stream , version ) ; }", "void validateIntegrity ( ) throws RedoLogFileCompromisedException ;", "  public int size(){\n    return problem_.getNumberOfVariables();\n  } // size\n", "public void addDiscoveryListener(DiscoveryListener l){\n  if (l == null) {\n    throw new NullPointerException(\"can't add null listener\");\n  }\nsynchronized (this) {\n    if (terminated) {\n      throw new IllegalStateException(\"discovery terminated\");\n    }\n    if (listeners.contains(l))     return;\n    listeners.add(l);\n    if (!discoveredLocators.isEmpty()) {\n      HashMap groupsMap=new HashMap(discoveredLocators.size());\n      Iterator iter=discoveredLocators.iterator();\n      for (int i=0; iter.hasNext(); i++) {\n        LocatorReg reg=(LocatorReg)iter.next();\n        groupsMap.put(reg.proxy,reg.memberGroups);\n      }\n      ArrayList list=new ArrayList(1);\n      list.add(l);\n      addNotify(list,groupsMap,false);\n    }\n  }\n}\n", "public TablePanel remove(Widget widget) {\n\t\tfor (int i = 0; i < content.length; ++i)\n\t\t\tfor (int j = 0; j < content[i].length; ++j)\n\t\t\t\tif (content[i][j] == widget) content[i][j] = null;\n\t\tthis.sendElement();\n\t\treturn this;\n\t}", "SICoreConnection getCoreConnection() {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.entry(this, tc, \"getCoreConnection\");\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            Si", "@Pure\n\t@Inline(value=\"($1 <= $2)\", constantExpression=true)\n\tpublic static boolean operator_lessEqualsThan(long a, double b) {\n\t\treturn a <= b;\n\t}", "public static Document newDocument() throws ParserConfigurationException {\n  DocumentBuilderFactory dbfac=DocumentBuilderFactory.newInstance();\n  DocumentBuilder docBuilder;\n  docBuilder=dbfac.newDocumentBuilder();\n  return docBuilder.newDocument();\n}\n", "public static ColorOwn forString ( String colorString , int transparency ) { boolean error = BOOL_ ; ColorOwn returnColor = null ; if ( colorString == null ) { error = BOOL_ ; } else { for ( Entry < String , ColorOwn > c : COLOR_MAP . entrySet ( ) ) { if ", "public Matrix[] compute(Matrix loghyper,Matrix X,Matrix Xstar){\n  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException(\"Wrong number of hyperparameters, \" + loghyper.getRowDimension() + \" instead of \"+ numParameters());\n  final double s2=Math.exp(2 * loghyper.get(0,0));\n  double[] a=new double[Xstar.getRowDimension()];\n  Arrays.fill(a,s2);\n  Matrix A=new Matrix(a,Xstar.getRowDimension());\n  Matrix B=new Matrix(X.getRowDimension(),Xstar.getRowDimension());\n  return new Matrix[]{A,B};\n}\n", "void unexecuteNSDecls(TransformerImpl transformer) throws TransformerException {\n  unexecuteNSDecls(transformer,null);\n}\n", "public static HttpURLConnection toHttpConnection(RequestBatch requests){\n  for (  Request request : requests) {\n    request.validate();\n  }\n  URL url=null;\n  try {\n    if (requests.size() == 1) {\n      Request request=requests.get(0);\n      url=new URL(request.getUrlForSingleRequest());\n    }\n else {\n      url=new URL(ServerProtocol.getGraphUrlBase());\n    }\n  }\n catch (  MalformedURLException e) {\n    throw new FacebookException(\"could not construct URL for request\",e);\n  }\n  HttpURLConnection connection;\n  try {\n    connection=createConnection(url);\n    serializeToUrlConnection(requests,connection);\n  }\n catch (  IOException e) {\n    throw new FacebookException(\"could not construct request body\",e);\n  }\ncatch (  JSONException e) {\n    throw new FacebookException(\"could not construct request body\",e);\n  }\n  return connection;\n}\n", "    public boolean deletesAreDetected(int type) throws SQLException {\n    dmetaLog( \"dme 42 \" );\n        return false;\n    }\n", "public void fetchMetadata(final String uuid,\n                              final DataSetMetadataCallback listener) throws Exception {\n        final DataSetMetadata metadata = clientDataSetManager.getDataSetMetadata(uuid);\n\n        if (metadata != null) {\n            listener.callback(metadata);\n        } else if (dataSetLookupServices != null) {\n            if (remoteMetadataMap.containsKey(uuid)) {\n                listener.callback(remoteMetadataMap.get(uuid));\n            } else {\n                dataSetLookupServices.call((DataSetMetadata result) -> {\n                                               if (result == null) {\n                                                   listener.notFound();\n                                               } else {\n                                                   remoteMetadataMap.put(uuid,\n                                                                         result);\n                                                   listener.callback(result);\n                                               }\n                                           },\n                                           (message, throwable) -> {\n                                               return listener.onError(new ClientRuntimeError(throwable));\n                                           }).lookupDataSetMetadata(uuid);\n            }\n        } else {\n            listener.notFound();\n        }\n    }", "protected DefaultArtefactInfo getArtefactInfo(String artefactType, boolean create) {\n        DefaultArtefactInfo cache = (DefaultArtefactInfo) artefactInfo.get(artefactType);\n        if (cache == null && create) {\n            cache = new DefaultArtefactInfo();\n            artefactInfo.put(artefactType, cache);\n            cache.updateComplete();\n        }\n        return cache;\n    }", "    public String getAttribute( String name ) {\n        Attr attr = getAttributeNode( name );\n        return attr == null ? \"\" : attr.getValue();\n    }\n", "public String createHash(String password){\n  return createHash(password.toCharArray());\n}\n", "private File createCaptureFile(int encodingType,String fileName){\n  if (fileName.isEmpty()) {\n    fileName=\".Pic\";\n  }\n  if (encodingType == JPEG) {\n    fileName=fileName + \".jpg\";\n  }\n else   if (encodingType == PNG) {\n    fileName=fileName + \".png\";\n  }\n else {\n    throw new IllegalArgumentException(\"Invalid Encoding Type: \" + encodingType);\n  }\n  return new File(getTempDirectoryPath(),fileName);\n}\n", "public String parameter ( final String headerName , final String paramName ) { return getParam ( header ( headerName ) , paramName ) ; }", "@Pure\n\tpublic static BusLayerDrawerType getPreferredLineDrawAlgorithm() {\n\t\tfinal Preferences prefs = Preferences.userNodeForPackage(BusLayerConstants.class);\n\t\tif (prefs != null) {\n\t\t\tfinal String algo = prefs.get(\"DRAWING_ALGORITHM\", null); //$NON-NLS-1$\n\t\t\tif (algo != null && algo.length() > 0) {\n\t\t\t\ttry {\n\t\t\t\t\treturn BusLayerDrawerType.valueOf(algo);\n\t\t\t\t} catch (Throwable exception) {\n\t\t\t\t\t//\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn BusLayerDrawerType.OVERLAP;\n\t}", "@SuppressWarnings(\"deprecation\") public void startHardwareClock(Date now){\n  if (DEBUG_SHOW_PUBLIC_CALLS) {\n    log.debug(\"startHardwareClock: {}\",now);\n  }\n  issueClockTime(now.getHours(),now.getMinutes());\n}\n", "private boolean tryToUpdateExistingHeapNode ( AStarNode parent , AStarNode checkedOne ) { Iterator < AStarNode > iter = queue . iterator ( ) ; AStarNode itNode ; while ( iter . hasNext ( ) ) { itNode = iter . next ( ) ; if ( itNode . equals ( checkedOne ) ) { itNode . updateDistance ( checkedOne . getG ( ) , parent ) ; return BOOL_ ; } } return BOOL_ ; }", "public CmsJspImageBean getSrcSetMaxImage() {\n\n        CmsJspImageBean result = this;\n        if (m_srcSet != null) {\n            result = m_srcSet.lastEntry().getValue();\n        }\n        return result;\n    }", "private static void s_uacmxx(SparseBlock a,double[] c,int m,int n,double init,Builtin builtin,int rl,int ru){\n  Arrays.fill(c,init);\n  int[] cnt=new int[n];\n  if (a.isContiguous()) {\n    int alen=(int)a.size(rl,ru);\n    builtinAgg(a.values(rl),c,a.indexes(rl),a.pos(rl),alen,builtin);\n    countAgg(a.values(rl),cnt,a.indexes(rl),a.pos(rl),alen);\n  }\n else {\n    for (int i=rl; i < ru; i++) {\n      if (!a.isEmpty(i)) {\n        int apos=a.pos(i);\n        int alen=a.size(i);\n        double[] avals=a.values(i);\n        int[] aix=a.indexes(i);\n        builtinAgg(avals,c,aix,apos,alen,builtin);\n        countAgg(avals,cnt,aix,apos,alen);\n      }\n    }\n  }\n  for (int i=0; i < n; i++)   if (cnt[i] < m)   c[i]=builtin.execute2(c[i],0);\n}\n", "private void setTopMargin(final int margin) {\n        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) getLayoutParams();\n        layoutParams.topMargin = margin;\n        setLayoutParams(layoutParams);\n    }", "private static IO < Nothing > doMain ( ) { return Console . printLine ( STR_ ) . flatMap ( null ) . flatMap ( null ) . flatMap ( null ) . map ( null ) . flatMap ( null ) . flatMap ( null ) ; }", "public void sendPacketToAllPlayers ( IPacket packet ) { checkClassAndSync ( packet . getClass ( ) ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . ALL ) ; serverOutboundChannel . wri", "public PooledExecutionServiceConfigurationBuilder defaultPool(String alias, int minSize, int maxSize) {\n    PooledExecutionServiceConfigurationBuilder other = new PooledExecutionServiceConfigurationBuilder(this);\n    other.defaultPool = new Pool(alias, mi", "public static Map<String, String> readValues(String keyName) throws RegistryException {\n        try (Key key = Key.open(keyName, KEY_READ)) {\n            int[] info = invoke(Methods.REG_QUERY_INFO_KEY.get(), key.id);\n            checkError(info[InfoIndex.INFO_ERROR_CODE.get()]);\n            int count = info[InfoIndex.INFO_COUNT_VALUES.get()];\n            int maxLength = info[InfoIndex.INFO_MAX_VALUE_LENGTH.get()] + 1;\n            Map<String, String> values = new HashMap<>();\n            for (int i = 0; i < count; i++) {\n                String valueName = fromByteArray(invoke(Methods.REG_ENUM_VALUE.get(), key.id, i, maxLength));\n                values.put(valueName, readValue(keyName, valueName));\n            }\n            return values;\n        }\n    }", "    public void assertCheckboxPresent(String checkboxName) {\n        assertTrue(\"Did not find form checkbox with name [\"\n                + checkboxName + \"].\", getTestingEngine().hasElementByXPath(\n                \"//input[lower-case(@type)='checkbox' and @name='\" + checkboxName + \"']\"));\n    }\n", "public Closure addPostInstantiateDelegate ( Closure delegate ) { getProxyBuilder ( ) . postInstantiateDelegates . addFirst ( delegate ) ; return delegate ; }", "private synchronized void initialiseBaseLayer(Point maxTileDimensions){\n  scale=Math.min(2F,Math.min(getWidth() / (float)sWidth(),getHeight() / (float)sHeight()));\n  defaultScale=scale;\n  fitToBounds(true);\n  fullImageSampleSize=calculateInSampleSize();\n  if (fullImageSampleSize > 1) {\n    fullImageSampleSize/=2;\n  }\n  initialiseTileMap(maxTileDimensions);\n  List<Tile> baseGrid=tileMap.get(fullImageSampleSize);\n  for (  Tile baseTile : baseGrid) {\n    BitmapTileTask task=new BitmapTileTask(this,decoder,decoderLock,baseTile,this.failListener);\n    task.execute();\n  }\n}\n", "private Instant convertTimestamp(long timestamp) throws FormatParseException {\n  if (timestamp == 0) {\n    return Instant.ofEpochSecond(timestamp);\n  }\n  int digits=(int)(Math.log10(timestamp) + 1);\n  if (digits != 10 && digits != 13) {\n    throw new FormatParseException(\"Expected a timestamp length of 10 or 13, found \" + digits + \" ('\"+ timestamp+ \"')\");\n  }\n  boolean secondResolution=digits == 10;\n  return secondResolution ? Instant.ofEpochSecond(timestamp) : Instant.ofEpochMilli(timestamp);\n}\n", "public static boolean isUpperCase ( Character self ) { return Character . isUpperCase ( self ) ; }", "public ServiceCall<Workspace> getWorkspace(GetWorkspaceOptions getWorkspaceOptions) {\n    Validator.notNull(getWorkspaceOptions, \"getWorkspaceOptions cannot be null\");\n    String[] pathSegments = { \"v1/workspaces\" };\n    String[] pathParameters = { getWorkspaceOptions.workspaceId() };\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments,\n        pathParameters));\n    builder.query(\"version\", versionDate);\n    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders(\"conversation\", \"v1\", \"getWorkspace\");\n    for (Entry<String, String> header : sdkHeaders.entrySet()) {\n      builder.header(header.getKey(), header.getValue());\n    }\n    builder.header(\"Accept\", \"application/json\");\n    if (getWorkspaceOptions.export() != null) {\n      builder.query(\"export\", String.valueOf(getWorkspaceOptions.export()));\n    }\n    if (getWorkspaceOptions.includeAudit() != null) {\n      builder.query(\"include_audit\", String.valueOf(getWorkspaceOptions.includeAudit()));\n    }\n    if (getWorkspaceOptions.sort() != null) {\n      builder.query(\"sort\", getWorkspaceOptions.sort());\n    }\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Workspace.class));\n  }", "private boolean checkIfAllKeysAvailable(UserGroup userGroup){\n  boolean isAllKeysFound=true;\n  StringSet objectAttributeKeySet=getAttributeKeySet();\n  StringSet comparingAttributeKeySet=userGroup.getAttributeKeySet();\n  for (  String objectKey : objectAttributeKeySet) {\n    boolean keyFound=false;\n    for (    String comparingKey : comparingAttributeKeySet) {\n      if (comparingKey.equalsIgnoreCase(objectKey)) {\n        keyFound=true;\n        break;\n      }\n    }\n    if (!keyFound) {\n      isAllKeysFound=false;\n      break;\n    }\n  }\n  return isAllKeysFound;\n}\n", "public void reset ( ) { m_cachedValuesSemaphore . acquireUninterruptibly ( ) ; m_modules . clear ( ) ; m_cachedValues = null ; m_cachedValuesSemaphore . release ( ) ; fireTableDataChanged ( ) ; }", "public void resourceMoved(ISVNRemoteResource resource,ISVNRemoteFolder destinationFolder,String destinationResourceName){\n  Iterator it=listeners.iterator();\n  while (it.hasNext()) {\n    IRepositoryListener listener=(IRepositoryListener)it.next();\n    listener.remoteResourceMoved(resource,destinationFolder,destinationResourceName);\n  }\n}\n", "  protected void receivedCancelInvite() {\n    ivPendingCmd = null;\n\n    send5250Packet((byte)0x00, OPCODE_CANCEL_INVITE, null);\n  }\n", "public SignatureVisitor visitSuperclass ( ) { return this ; }", "protected void paint(SeaGlassContext context, Graphics g) {\n        JTextComponent c = getComponent();\n\n        super.paint(g, c);\n    }", "private Shape decodeMarkInterior ( int width , int height ) { double left = width / NUM_ - NUM_ ; double top = height / NUM_ - NUM_ ; path . reset ( ) ; path . moveTo ( left + NUM_ , top + NUM_ ) ; path . lineTo ( left + NUM_ , top + NUM_ ) ; path . lineT", "private boolean isImage(I_CmsDraggable draggable) {\n\n        return (draggable instanceof CmsResultListItem)\n            && CmsToolbarAllGalleriesMenu.DND_MARKER.equals(((CmsResultListItem)draggable).getData());\n\n    }", "private void parse_oneVarPostOperation ( ) throws SyntaxException { Element opNode = ( Element ) current ; String op = opNode . getContent ( ) ; parsedExpsNotEmpty ( opNode ) ; Expression e = parsedExps . pop ( ) ; OneVariableOperation ovo = new OneVariab", "\tprivate void populateListSites(){\n\t\tSiteSeasonDB d = Program.getLocalSiteDatabase().getSiteSeasonDB();\n\t\torg.penguinuri.siteSeasonDatabase.SiteSeasonDBDocument.SiteSeasonDB.Sites.Site[] sites = d.getSites().getSiteArray();\n\t\tsite = null;\n\t\tdlmSites.clear();\n\t\tfor(int i = 0; i < sites.length; i++){\n\t\t\tdlmSites.add(i, sites[i].getName());\n\t\t}\n\t\tloadNewSite();\n\t}\n", "private void openWifiSettings ( ) { Intent intent = new Intent ( Settings . ACTION_WIFI_SETTINGS ) ; final PackageManager packageManager = getActivity ( ) . getPackageManager ( ) ; if ( packageManager . resolveActivity ( intent , PackageManager . MATCH_DEFAULT_ONLY ) != null ) { startActivity ( intent ) ; return ; } intent = new Intent ( Settings . ACTION_WIRELESS_SETTINGS ) ; if ( packageManager . resolveActivity ( intent , PackageManager . MATCH_DEFAULT_ONLY ) != null ) { startActivity ( intent ) ; } }", "private static String readMapValue(String ref, TypeDef source, Property property) {\n        TypeRef propertyTypeRef = property.getTypeRef();\n        Method getter = getterOf(source, property);\n        if (getter == null) {\n            return \"null\";\n        }\n\n        TypeRef getterTypeRef = getter.getReturnType();\n        if (propertyTypeRef.getDimensions() == getterTypeRef.getDimensions() && propertyTypeRef.isAssignableFrom(getterTypeRef)) {\n            return readObjectValue(ref, source, property);\n        }\n\n        if (property.getTypeRef().getDimensions() > 0) {\n            return readArrayValue(ref, source, property);\n        }\n        if (property.getTypeRef() instanceof ClassRef && ((ClassRef)getterTypeRef).getDefinition().isAnnotation()) {\n            return readAnnotationValue(\"((Map)(\" + ref + \" instanceof Map ? ((Map)\" + ref + \").get(\\\"\" + getterOf(source, property).getName() + \"\\\") : \"+getDefaultValue(property)+\"))\", ((ClassRef) getterTypeRef).getDefinition(), property);\n        }\n        return readObjectValue(ref, source, property);\n    }", "    public AbstractListenerThread () {\n        \n        m_log.debug (\"Instanciated AbstractListenerThread.\");\n        \n    }\n", "public void readMixedExcitationFilters(InputStream mixFiltersStream) throws IOException {\n  String line;\n  Vector<Double> taps=new Vector<Double>();\n  Scanner s=null;\n  int i, j;\n  try {\n    s=new Scanner(new BufferedReader(new InputStreamReader(mixFiltersStream,\"UTF-8\")));\n    s.useLocale(Locale.US);\n    Log.d(Mary.LOG,\"reading mixed excitation filters\");\n    while (s.hasNext(\"#\")) {\n      line=s.nextLine();\n    }\n    while (s.hasNextDouble())     taps.add(s.nextDouble());\n  }\n  finally {\n    if (s != null) {\n      s.close();\n    }\n  }\n  orderFilters=taps.size() / numFilters;\n  mixFilters=new double[numFilters][orderFilters];\n  int k=0;\n  for (i=0; i < numFilters; i++) {\n    for (j=0; j < orderFilters; j++) {\n      mixFilters[i][j]=taps.get(k++);\n    }\n  }\n  Log.d(Mary.LOG,\"initMixedExcitation: loaded filter taps\");\n  Log.d(Mary.LOG,\"initMixedExcitation: numFilters = \" + numFilters + \"  orderFilters = \"+ orderFilters);\n}\n", "public ResponsePacket visit ( SetTransaction request , QuerySession session ) { ResponsePacket response = new ResponsePacket ( ) ; session . setTransaction ( request . getTransaction ( ) ) ; response . setIntResult ( NUM_ ) ; return response ; }", "  public void setMatrix(PMatrix3D source) {\n    // not efficient, but at least handles the inverse stuff.\n    resetMatrix();\n    applyMatrix(source);\n  }\n", "public static void exitMethod(int globalMethodId){\n  final Thread ct=Thread.currentThread();\n  if (ct == Agent.server || Thread.holdsLock(rl) || Thread.holdsLock(globalLock) || ct.getThreadGroup() == systemThreadGroup || ct == Transformer.transformerThread) {\n    return;\n  }\n  if (!enabled) {\n    return;\n  }\nsynchronized (globalLock) {\n    int sessionIdOfMethod=globalMethodId >> 16;\n    if (sessionIdOfMethod != sessionId) {\n      return;\n    }\n    ThreadProfiler ti=null;\nsynchronized (rl) {\n      ti=globalThreadInfos.get(ct);\n    }\n    if (ti != null) {\n      ti.exit0();\n    }\n  }\n}\n", "    public void init() {\n        itemsTable = getApplication().getProperty(\"items-table\");\n        adminRole = getApplication().getProperty(\"admin-role\");\n        formFilePath = ItemUtilities.getPathToConfigFile(getApplication(), Item.FORM_FILE);\n        formXMLExists = FileUtils.configFileExists(formFilePath);\n        usingGroups = \"true\".equals(getApplication().getProperty(\"using-groups\"));\n        if (!formXMLExists) {\n            logger.info(\"You are not using Canyamo Form Service on \" +\n                    \"\" + getName() + \".action. I know it because your application \" +\n                    \"does not have this file: \" + formFilePath);\n        }\n    }\n", "public void fireEvent(SystemHookEvent event) throws GitLabApiException {\r\n\r\n        if (event instanceof ProjectSystemHookEvent) {\r\n            fireProjectEvent((ProjectSystemHookEvent) event);\r\n        } else if (event instanceof TeamMemberSystemHookEvent) {\r\n            fireTeamMemberEvent((TeamMemberSystemHookEvent) event);\r\n        } else if (event instanceof UserSystemHookEvent) {\r\n            fireUserEvent((UserSystemHookEvent) event);\r\n        } else if (event instanceof KeySystemHookEvent) {\r\n            fireKeyEvent((KeySystemHookEvent) event);\r\n        } else if (event instanceof GroupSystemHookEvent) {\r\n            fireGroupEvent((GroupSystemHookEvent) event);\r\n        } else if (event instanceof GroupMemberSystemHookEvent) {\r\n            fireGroupMemberEvent((GroupMemberSystemHookEvent) event);\r\n        } else if (event instanceof PushSystemHookEvent) {\r\n            firePushEvent((PushSystemHookEvent) event);\r\n        } else if (event instanceof TagPushSystemHookEvent) {\r\n            fireTagPushEvent((TagPushSystemHookEvent) event);\r\n        } else if (event instanceof RepositorySystemHookEvent) {\r\n            fireRepositoryEvent((RepositorySystemHookEvent) event);\r\n        } else if (event instanceof MergeRequestSystemHookEvent) {\r\n            fireMergeRequestEvent((MergeRequestSystemHookEvent) event);\r\n        } else {\r\n            String message = \"Unsupported event, event_named=\" + event.getEventName();\r\n            LOGGER.warning(message);\r\n            throw new GitLabApiException(message);\r\n        }\r\n    }", "public GeometryExpression<Geometry> union(Expression<? extends Geometry> geometry) {\n        return GeometryExpressions.geometryOperation(SpatialOps.UNION, mixin, geometry);\n    }", "  private void doTreeAction(File file, AST tree, String[] tokenNames) {\n    if (tree != null) {\n      addToTree(file, tree, tokenNames);\n    }\n  }\n", "    public void clear() {\n        getGraphics().setColor(OFF);\n        getGraphics().fill(lens);\n    }\n", "public static float normalize(float val, float minVal, float maxVal) {\n        if (val < minVal || val > maxVal)\n            throw new IllegalArgumentException(\"Value must be between min and max values. [val, min, max]: [\" + val + \",\" + minVal + \", \" + maxVal + \"]\");\n        return (val - minVal) / (maxVal - minVal);\n    }", "public boolean isSentOK(){\n  return m_sentMsg != null && SENT_OK.equals(m_sentMsg);\n}\n", "  public int getBlocksDimension(int dimension) {\n    int dim = dimension / Block.SIZE;\n    if (dimension % Block.SIZE != 0) {\n      dim++;\n    }\n    return dim;\n  }\n", "    protected void updateState(SearchResult searchResult) {\n        lastSearchResult.updateFrom(searchResult);\n    }\n", "public DateTimeFormatterBuilder appendValueReduced(\n            TemporalField field, int width, int maxWidth, ChronoLocalDate baseDate) {\n        Jdk8Methods.requireNonNull(field, \"field\");\n        Jdk8Methods.requireNonNull(baseDate, \"baseDate\");\n        ReducedPrinterParser pp = new ReducedPrinterParser(field, width, maxWidth, 0, baseDate);\n        appendValue(pp);\n        return this;\n    }", "public WildcardFileFilter ( String wildcard ) { this ( wildcard , null ) ; }", "\tpublic void addAutoCVSNature(IProject project) throws CoreException {\n\t\taddProjectNature(project, AUTO_CVS_NATURE);\n\t}\n", "public AMCertStore(AMLDAPCertStoreParameters param){\n  storeParam=param;\n}\n", "@Override public Instance mergeInstance(Instance inst){\n  int[] indices=new int[numValues() + inst.numValues()];\n  int m=0;\n  for (int j=0; j < numValues(); j++) {\n    indices[m++]=index(j);\n  }\n  for (int j=0; j < inst.numValues(); j++) {\n    if (inst.valueSparse(j) != 0) {\n      indices[m++]=numAttributes() + inst.index(j);\n    }\n  }\n  if (m != indices.length) {\n    int[] newInd=new int[m];\n    System.arraycopy(indices,0,newInd,0,m);\n    indices=newInd;\n  }\n  return new BinarySparseInstance(1.0,indices,numAttributes() + inst.numAttributes());\n}\n", "private void accountForIncludedFile(String name, File file) {\n        processIncluded(name, file, filesIncluded, filesExcluded, filesDeselected);\n    }", "  private boolean isValidToCreate(CreditTransaction credit){\n        if (credit == null)\n            return false;\n        else if (credit.getId() == null)\n            return false;\n      return true;\n   }\n", "@GET\n    @Produces(MediaType.APPLICATION_JSON)\n    @Description(\"Returns namespaces owned by user.\")\n    public List<NamespaceDto> getNamespacesByOwner(@Context HttpServletRequest req) {\n        PrincipalUser remoteUser = validateAndGetOwner(req, null);\n        List<Namespace> namespaces = _namespaceService.findNamespacesByOwner(remoteUser);\n\n        return NamespaceDto.transformToDto(namespaces);\n    }", "RevisionApi revision ( int id ) throws RestApiException ;", "public int expectInt() throws IOException {\n        int b1 = in.read();\n        if (b1 < 0) {\n            throw new IOException(\"Missing byte 1 to expected int\");\n        }\n        int b2 = in.read();\n        if (b2 < 0) {\n            throw new IOException(\"Missing byte 2 to expected int\");\n        }\n        int b3 = in.read();\n        if (b3 < 0) {\n            throw new IOException(\"Missing byte 3 to expected int\");\n        }\n        int b4 = in.read();\n        if (b4 < 0) {\n            throw new IOException(\"Missing byte 4 to expected int\");\n        }\n        return unshift4bytes(b1, b2, b3, b4);\n    }", "static String expandEnvironmentVariables(String value){\n  if (null == value) {\n    return null;\n  }\n  Matcher m=ENV_VAR_PATTERN.matcher(value);\n  StringBuffer sb=new StringBuffer();\n  while (m.find()) {\n    String envVarValue=null;\n    String envVarName=null == m.group(1) ? m.group(2) : m.group(1);\n    if (envVarName.startsWith((\"env.\"))) {\n      envVarValue=System.getenv(envVarName.substring(3));\n    }\n else {\n      envVarValue=System.getProperty(envVarName);\n    }\n    m.appendReplacement(sb,null == envVarValue ? \"\" : Matcher.quoteReplacement(envVarValue));\n  }\n  m.appendTail(sb);\n  return sb.toString();\n}\n", "public boolean isUpperLevelMarker(int row, int column) {\n\t\treturn myCanGoToUpperDir && (myShift == 0) && (row == 0) && (column == 0);\n\t}", "public final Tuple2<Tuple1<T1>, Tuple7<T2, T3, T4, T5, T6, T7, T8>> split1() {\n        return new Tuple2<>(limit1(), skip1());\n    }", "private static synchronized void startup() {\n\t\t\n\t\ttry {\n\t\t\tif (CONFIG == null) {\n\t\t\t\tCONFIG = ApiConfigurations.fromProperties();\n\t\t\t}\n\t\t\t\n\t\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\t\t\n\t\t\tAppIdentityService appIdentityService = new AppIdentityService(CONFIG, objectMapper, true);\n\n\t\t\tMetricMonitorService monitorService = new MetricMonitorService(CONFIG, objectMapper, appIdentityService);\n\t\t\t\n\t\t\tMetricSender sender = new MetricSender(CONFIG, objectMapper, monitorService);\n\t\t\t\n\t\t\tBACKGROUND_SERVICE = new MetricBackgroundService(COLLECTOR, sender);\n\t\t\tBACKGROUND_SERVICE.start();\n\t\t\t\n\t\t} catch (Throwable t) {\n\t\t\tLOGGER.error(\"Exception starting Stackify Metrics API service\", t);\n\t\t}\n\t}", "public void close()\n    {\n    if (_socket!=null) {\n        try {\n        _socket.close();\n        _socket = null;\n        } catch (IOException e) {\n        System.err.println(\"Exception: \" + e);\n        // throw new SoccomException(SoccomException.RECV_ERROR);\n        }\n        _in = null;\n        _out = null;\n    }\n    }", "\tstatic private Preferences getPrefNode() {\n\t\t// hard code to original prefs location for backward compatiblity\n\t\tPreferences root = Preferences.userRoot();\n\t\treturn root.node(\"net/sf/borg/common/util\");\n\t}\n", "public static final String mangleChar(char ch){\n  char[] result=new char[5];\n  result[0]='_';\n  result[1]=Character.forDigit((ch >> 12) & 0xf,16);\n  result[2]=Character.forDigit((ch >> 8) & 0xf,16);\n  result[3]=Character.forDigit((ch >> 4) & 0xf,16);\n  result[4]=Character.forDigit(ch & 0xf,16);\n  return new String(result);\n}\n", "public boolean clip(Line2D.Float line) {\n\n        double p1x = line.getX1();\n        double p1y = line.getY1();\n        double p2x = line.getX2();\n        double p2y = line.getY2();\n\n        double qx = 0d;\n        double qy = 0d;\n\n        boolean vertical = p1x == p2x;\n\n        double slope = vertical \n            ? 0d\n            : (p2y-p1y)/(p2x-p1x);\n\n        int c1 = regionCode(p1x, p1y);\n        int c2 = regionCode(p2x, p2y);\n\n        while (c1 != INSIDE || c2 != INSIDE) {\n\n            if ((c1 & c2) != INSIDE)\n                return false;\n\n            int c = c1 == INSIDE ? c2 : c1;\n\n            if ((c & LEFT) != INSIDE) {\n                qx = xMin;\n                qy = (Utils.feq(qx, p1x) ? 0 : qx-p1x)*slope + p1y;\n            }\n            else if ((c & RIGHT) != INSIDE) {\n                qx = xMax;\n                qy = (Utils.feq(qx, p1x) ? 0 : qx-p1x)*slope + p1y;\n            }\n            else if ((c & BOTTOM) != INSIDE) {\n                qy = yMin;\n                qx = vertical\n                    ? p1x\n                    : (Utils.feq(qy, p1y) ? 0 : qy-p1y)/slope + p1x;\n            }\n            else if ((c & TOP) != INSIDE) {\n                qy = yMax;\n                qx = vertical\n                    ? p1x\n                    : (Utils.feq(qy, p1y) ? 0 : qy-p1y)/slope + p1x;\n            }\n\n            if (c == c1) {\n                p1x = qx;\n                p1y = qy;\n                c1  = regionCode(p1x, p1y);\n            }\n            else {\n                p2x = qx;\n                p2y = qy;\n                c2 = regionCode(p2x, p2y);\n            }\n        }\n        line.setLine(p1x, p1y, p2x, p2y);\n        return true;\n    }", "public boolean isRunning ( ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . KITKAT && valueAnimator . isPaused ( ) ) { return BOOL_ ; } return valueAnimator . isRunning ( ) ; }", "protected void addAllClassesLink(Content ul) {\n        Content linkContent = getHyperLink(DocPaths.ALLCLASSES_FRAME,\n                allclassesLabel, \"\", \"packageFrame\");\n        Content li = HtmlTree.LI(linkContent);\n        ul.addContent(li);\n    }", "  public void genCode(GenerationContext context, int start, int end) {\n    CodeSequence code = context.getCodeSequence();\n\n    setLineNumber(code);\n\n    int\t\tcatchPC;\n\n    catchPC = code.getPC();\n    exception.genStore(context);\n    body.genCode(context);\n\n    code.addExceptionHandler(start,\n\t\t\t     end,\n\t\t\t     catchPC,\n\t\t\t     exception.getType().getCClass().getQualifiedName());\n  }\n", "public void setAvatar(final Link newavatar) {\n        final Link old = getAvatar();\n        if (old != null) {\n            getOtherLinks().remove(old);\n        }\n        newavatar.setRel(\"avatar\");\n        getOtherLinks().add(newavatar);\n    }", "public static double blackFormulaImpliedStdDevApproximation(final Option.Type optionType,@Real double strike,@Real double forward,@Real final double blackPrice,@DiscountFactor final double discount,@Real final double displacement){\n  QL.require(strike >= ", "  public MondrianHierarchy lookupHierarchy(String uniqueName) {\n    return (MondrianHierarchy) hHierarchies.get(uniqueName);\n  }\n", "private void drawWind(Canvas canvas,float y,float xOffset){\n  float cof=(mScreenWidth + xOffset) / (LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT);\n  float time=mLoadingAnimationTime;\n  if (mLastAnimationTime - mLoadingAnimationTime > 0) {\n    mInverseDirection=true;\n    time=(LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT) - mLoadingAnimationTime;\n  }\n else {\n    mNewWindSet=true;\n    mInverseDirection=false;\n  }\n  float x=(mScreenWidth - (time * cof)) + xOffset - mWindLineWidth;\n  float xEnd=x + mWindLineWidth;\n  canvas.drawLine(x,y,xEnd,y,mWindPaint);\n}\n", "  public Object put(V value) {\n    return put(value.getID(), value);\n  }\n", "protected void commitTransaction ( ) throws SQLException { try { conn . commit ( ) ; commitCount ++ ; } catch ( SQLException e ) { logger . error ( STR_ + e ) ; throw e ; } finally { transactionStarted = BOOL_ ; conn . setAutoCommit ( BOOL_ ) ; } }", "  public void setGeoLocation(Double lat, Double lon) {\n    if (lat != null && lon != null) {\n      setExtension(new GeoLat(lat));\n      setExtension(new GeoLong(lon));\n    } else if (lat != null || lon != null) {\n      throw new IllegalArgumentException(\n          \"'lat' and 'lon' must either both be null or non-null.\");\n    } else {\n      removeExtension(GeoLat.class);\n      removeExtension(GeoLong.class);\n    }\n  }\n", "\tpublic int size() {\n\t\tint subSize = 0;\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tAbstractNode subNode = getSubNode(i);\n\t\t\tif (subNode != null) {\n\t\t\t\tsubSize += subNode.size();\n\t\t\t}\n\t\t}\n\t\treturn subSize + (items == null ? 0 : items.size());\n\t}\n", "\tprivate TemplateContext createTemplateContext(ITextViewer viewer, IRegion region) {\n\t\treturn new DocumentTemplateContext(getTemplateContextType(), viewer.getDocument(), region.getOffset(), region.getLength());\n\t}\n", "public ConditionalTransferEntropyCalculatorDiscrete ( int base , int history , int numOtherInfoContributors ) { super ( base ) ; k = history ; this . numOtherInfoContributors = numOtherInfoContributors ; base_power_k = MathsUtils . power ( base , k ) ; ba", "public OperationStatusResponseInner beginCancel(String resourceGroupName, String vmScaleSetName) {\n        return beginCancelWithServiceResponseAsync(resourceGroupName, vmScaleSetName).toBlocking().single().body();\n    }", "public QueryAssert updatedRowsCountIsEqualTo ( int count ) { hasRowsCount ( NUM_ ) ; hasColumnsCount ( NUM_ ) ; hasColumns ( INTEGER ) ; containsExactly ( row ( count ) ) ; return this ; }", "    protected DcObject parse(String filename) {\n        client.addMessage(DcResources.getText(\"msgProcessingFileX\", filename));\n        DcObject dco = importer.parse(filename, client.getDirectoryUsage()); \n            \n        if (client.getStorageMedium() != null) { \n            for (DcField  field : dco.getFields()) {\n                if (field.getSourceModuleIdx() == DcModules._STORAGEMEDIA)\n                    dco.setValue(field.getIndex(), client.getStorageMedium());\n            }\n        }\n\n        if (client.getDcContainer() != null && dco.getField(DcObject._SYS_CONTAINER) != null) {\n            dco.setValue(DcObject._SYS_CONTAINER, client.getDcContainer());\n        }\n        \n        dco.applyTemplate();\n        dco.setIDs();\n        \n        try {\n            sleep(200);\n        } catch (Exception e) {}\n\n        return dco;\n    }\n", "@Override\n    public CreateAliasResult createAlias(CreateAliasRequest request) {\n        request = beforeClientExecution(request);\n        return executeCreateAlias(request);\n    }", "protected TypeMirror binaryPromotedType(TypeMirror left,TypeMirror right){\n  if (TypesUtils.isBoxedPrimitive(left)) {\n    left=types.unboxedType(left);\n  }\n  if (TypesUtils.isBoxedPrimitive(right)) {\n    right=types.unboxedType(right);\n  }\n  TypeKind promotedTypeKind=TypesUtils.widenedNumericType(left,right);\n  return types.getPrimitiveType(promotedTypeKind);\n}\n", "public static void printConcat(Object... messages){\n  if (!isDisabled()) {\n    buffer.setLength(0);\n    for (int i=0; i < messages.length; i++) {\n      buffer.append(String.valueOf(messages[i]));\n    }\n    print(buffer);\n  }\n}\n", "public static Map<String,Object> toObject(Collection<Attribute> attributeCollection) {\n\n        requireNonNull(attributeCollection);\n\n        List<Attribute> attributes = new ArrayList<>(attributeCollection);\n\n        sort(attributes, new FlattenedLevelsComparator());\n\n        ObjectJsonNode root = new ObjectJsonNode();\n        for(Attribute attribute : attributes) {\n            List<String> keys = SPLITTER.splitToList(attribute.getKey());\n\n            Map<Integer, Integer> levelsIndices = levelsToIndices(attribute.getMetadata());\n            String[] adjustedKeys = new String[keys.size() + levelsIndices.size()];\n\n            int count = 0;\n            for(int i = 0; i < adjustedKeys.length; i++) {\n\n                if(levelsIndices.containsKey(i))\n                    adjustedKeys[i] = \"[]\";\n                else {\n                    adjustedKeys[i] = keys.get(count);\n                    count++;\n                }\n            }\n\n            root.visit(adjustedKeys, 0, levelsIndices, new ValueJsonNode(attribute.getValue()));\n        }\n\n        return root.toObject();\n    }", "public OSRef toOSRef(){\n  RefEll airy1830=new RefEll(6377563.396,6356256.909);\n  double OSGB_F0=0.9996012717;\n  double N0=-100000.0;\n  double E0=400000.0;\n  double phi0=Math.toRadians(49.0);\n  double lambda0=Math.toRadians(-2.0);\n  double a=airy1830.getMaj();\n  double b=airy1830.getMin();\n  double eSquared=airy1830.getEcc();\n  double phi=Math.toRadians(getLat());\n  double lambda=Math.toRadians(getLng());\n  double E=0.0;\n  double N=0.0;\n  double n=(a - b) / (a + b);\n  double v=a * OSGB_F0 * Math.pow(1.0 - eSquared * Util.sinSquared(phi),-0.5);\n  double rho=a * OSGB_F0 * (1.0 - eSquared)* Math.pow(1.0 - eSquared * Util.sinSquared(phi),-1.5);\n  double etaSquared=(v / rho) - 1.0;\n  double M=(b * OSGB_F0) * (((1 + n + ((5.0 / 4.0) * n * n)+ ((5.0 / 4.0) * n * n* n)) * (phi - phi0)) - (((3 * n) + (3 * n * n) + ((21.0 / 8.0) * n * n* n)) * Math.sin(phi - phi0) * Math.cos(phi + phi0)) + ((((15.0 / 8.0) * n * n) + ((15.0 / 8.0) * n * n* n)) * Math.sin(2.0 * (phi - phi0)) * Math.cos(2.0 * (phi + phi0))) - (((35.0 / 24.0) * n * n* n) * Math.sin(3.0 * (phi - phi0)) * Math.cos(3.0 * (phi + phi0))));\n  double I=M + N0;\n  double II=(v / 2.0) * Math.sin(phi) * Math.cos(phi);\n  double III=(v / 24.0) * Math.sin(phi) * Math.pow(Math.cos(phi),3.0)* (5.0 - Util.tanSquared(phi) + (9.0 * etaSquared));\n  double IIIA=(v / 720.0) * Math.sin(phi) * Math.pow(Math.cos(phi),5.0)* (61.0 - (58.0 * Util.tanSquared(phi)) + Math.pow(Math.tan(phi),4.0));\n  double IV=v * Math.cos(phi);\n  double V=(v / 6.0) * Math.pow(Math.cos(phi),3.0) * ((v / rho) - Util.tanSquared(phi));\n  double VI=(v / 120.0) * Math.pow(Math.cos(phi),5.0) * (5.0 - (18.0 * Util.tanSquared(phi)) + (Math.pow(Math.tan(phi),4.0)) + (14 * etaSquared) - (58 * Util.tanSquared(phi) * etaSquared));\n  N=I + (II * Math.pow(lambda - lambda0,2.0)) + (III * Math.pow(lambda - lambda0,4.0))+ (IIIA * Math.pow(lambda - lambda0,6.0));\n  E=E0 + (IV * (lambda - lambda0)) + (V * Math.pow(lambda - lambda0,3.0))+ (VI * Math.pow(lambda - lambda0,5.0));\n  return new OSRef(E,N);\n}\n", "\tpublic int eos() {\n\t\treturn (headerBase[header + 5] & 0x04);\n\t}\n", "    public TransformationEditor getEditor(TransformationPage page, InterchangeView view) {\n        checkNotNull(page, \"page\");\n        checkNotNull(view, \"view\");\n        TransformationEditor editor = editors.get(page);\n        if (editor == null) {\n            editor = new TransformationEditor(page, view);\n            editors.put(page, editor);\n            page.addResource(new CachedEditorRemover());\n        }\n        return editor;\n    }\n", "@Override\n    public UpdateUserHierarchyResult updateUserHierarchy(UpdateUserHierarchyRequest request) {\n        request = beforeClientExecution(request);\n        return executeUpdateUserHierarchy(request);\n    }", "private void defineDefaultFont(UIDefaults d){\n  d.put(\"defaultFont\",initializeDefaultFont());\n}\n", "public void check(CollectionDescriptorDef collDef, String checkLevel) throws ConstraintException\n    {\n        ensureElementClassRef(collDef, checkLevel);\n        checkInheritedForeignkey(collDef, checkLevel);\n        ensureCollectionClass(collDef, ch", "public Collection<Integer> keepAuthorizedUsersForRoleAndProject(DbSession dbSession, Collection<Integer> userIds, String role, long projectId) {\n    return executeLargeInputs(\n      userIds,\n      partitionOfIds -> mapper(dbSession).keepAuthorizedUsersForRoleAndProject(role, projectId, partitionOfIds),\n      partitionSize -> partitionSize / 3);\n  }", "  private void expect(String type) {\n    if (!match(type)) {\n      throw notify(type + \" expected\");\n    }\n  }\n", "public ServerMember getRemoteMember(int id) {\n    MemberState member = membersMap.get(id);\n    return member != null ? member.getMember() : null;\n  }", "public UIGraphicTestCase ( String name ) { super ( name ) ; }", "static ChronoZonedDateTimeImpl<?> ofInstant(Chronology chrono,Instant instant,ZoneId zone){\n  ZoneRules rules=zone.getRules();\n  ZoneOffset offset=rules.getOffset(instant);\n  Objects.requireNonNull(offset,\"offset\");\n  LocalDateTime ldt=LocalDateTime.ofEpochSecond(instant.getEpochSecond(),instant.getNano(),offset);\n  ChronoLocalDateTimeImpl<?> cldt=(ChronoLocalDateTimeImpl<?>)chrono.localDateTime(ldt);\n  return new ChronoZonedDateTimeImpl<>(cldt,offset,zone);\n}\n", "public boolean has ( String key ) { return this . map . containsKey ( key ) ; }", "void issueAlert ( String message ) ;", "  public Edge getEdgeToParent (Vertex v) throws InvalidQueryException {\n    try {\n      return (Edge)v.get(EDGE_TO_PARENT);\n    }\n    catch (InvalidAttributeException iae) {\n      String s = (v == source_)\n\t? \" is the source vertex\" : \" has not been reached yet\";\n      throw new InvalidQueryException(v+s);\n    }\n  }\n", "public static void close(Statement stmt) {\n        if (stmt != null) {\n            try {\n                stmt.close();\n            } catch (SQLException ex) {\n                logger.error(\"\", ex);\n            }\n        }\n    }", "boolean isOwner ( IComment comment ) ;", "private CmsObject initCmsObject(\n        HttpServletRequest req,\n        HttpServletResponse res,\n        String user,\n        String password,\n        String ouFqn)\n    throws CmsException {\n\n        String siteroot = null;\n        // gather information from request if provided\n        if (req != null) {\n            siteroot = OpenCms.getSiteManager().matchRequest(req).getSiteRoot();\n        }\n        // initialize the user\n        if (user == null) {\n            user = getDefaultUsers().getUserGuest();\n        }\n        if (siteroot == null) {\n            siteroot = \"/\";\n        }\n        CmsObject cms = initCmsObject(\n            req,\n            m_securityManager.readUser(null, user),\n            siteroot,\n            CmsProject.ONLINE_PROJECT_ID,\n            ouFqn);\n        // login the user if different from Guest and password was provided\n        if ((password != null) && !getDefaultUsers().isUserGuest(user)) {\n            cms.loginUser(user, password, CmsContextInfo.LOCALHOST);\n        }\n        return cms;\n    }", "public double [ ] computeLocal ( int states [ ] [ ] [ ] , int sourceRowIndex , int sourceColumnIndex , int destRowIndex , int destColumnIndex ) { initialise ( ) ; addObservations ( states , sourceRowIndex , sourceColumnIndex , destRowIndex , destColumnIndex ) ; return computeLocalFromPreviousObservations ( states , sourceRowIndex , sourceColumnIndex , destRowIndex , destColumnIndex ) ; }", "public void start() throws ConfigurationException {\n\t\tif (connectionFactory == null) {\n\t\t\tthrow new ConfigurationException(\"can not start without client socket factory\");\n\t\t}\n\t\ttry {\n\t\t\tserver = new ServerSocket(port);\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(new LogEntry(e.getMessage(), e));\n\t\t\tthrow new ConfigurationException(\"Cannot start server at port \" + port, e);\n\t\t}\n\t\tSystem.out.println(new LogEntry(\"starting socket server at port \" + port));\n\t\tserverThread = new Thread(this);\n\t\tserverThread.start();\n\t}", "public void addMembers(String universalId,Set names) throws AMConsoleException {\n  if ((names == null) || names.isEmpty()) {\n    throw new AMConsoleException(\"entities.members.add.no.selection.message\");\n  }\n  SSOToken ssoToken=getUserSSOToken();\n  String currentId=\"\";\n  try {\n    AMIdentity amid=IdUtils.getIdentity(ssoToken,universalId);\n    String[] params=new String[2];\n    params[0]=universalId;\n    for (Iterator iter=names.iterator(); iter.hasNext(); ) {\n      String id=(String)iter.next();\n      AMIdentity amidentity=IdUtils.getIdentity(ssoToken,id);\n      currentId=id;\n      params[1]=id;\n      logEvent(\"ATTEMPT_ADD_IDENTITY_MEMBER\",params);\n      amid.addMember(amidentity);\n      logEvent(\"SUCCEED_ADD_IDENTITY_MEMBER\",params);\n    }\n  }\n catch (  SSOException e) {\n    String[] paramsEx={universalId,currentId,getErrorString(e)};\n    logEvent(\"SSO_EXCEPTION_ADD_IDENTITY_MEMBER\",paramsEx);\n    debug.warning(\"EntitiesModelImpl.addMembers\",e);\n    throw new AMConsoleException(getErrorString(e));\n  }\ncatch (  IdRepoException e) {\n    String[] paramsEx={universalId,currentId,getErrorString(e)};\n    logEvent(\"IDM_EXCEPTION_ADD_IDENTITY_MEMBER\",paramsEx);\n    debug.warning(\"EntitiesModelImpl.addMembers\",e);\n    throw new AMConsoleException(getErrorString(e));\n  }\n}\n", "private void invalidSurrogate(int uuuuu) throws UTFDataFormatException {\n        \n        String msg = JspCoreException.getMsg(\"jsp.error.xml.invalidHighSurrogate\", new Object[] {Integer.toHexString(uuuuu)});\n        throw new UTFDataFormatException(msg);\n    }", "public static KeeperException create(Code code) {\n        switch (code) {\n        case SYSTEMERROR:\n            return new SystemErrorException();\n        case RUNTIMEINCONSISTENCY:\n            return new RuntimeInconsistencyException();\n        case DATAINCONSISTENCY:\n            return new DataInconsistencyException();\n        case CONNECTIONLOSS:\n            return new ConnectionLossException();\n        case MARSHALLINGERROR:\n            return new MarshallingErrorException();\n        case UNIMPLEMENTED:\n            return new UnimplementedException();\n        case OPERATIONTIMEOUT:\n            return new OperationTimeoutException();\n        case BADARGUMENTS:\n            return new BadArgumentsException();\n        case APIERROR:\n            return new APIErrorException();\n        case NONODE:\n            return new NoNodeException();\n        case NOAUTH:\n            return new NoAuthException();\n        case BADVERSION:\n            return new BadVersionException();\n        case NOCHILDRENFOREPHEMERALS:\n            return new NoChildrenForEphemeralsException();\n        case NODEEXISTS:\n            return new NodeExistsException();\n        case INVALIDACL:\n            return new InvalidACLException();\n        case AUTHFAILED:\n            return new AuthFailedException();\n        case NOTEMPTY:\n            return new NotEmptyException();\n        case SESSIONEXPIRED:\n            return new SessionExpiredException();\n        case INVALIDCALLBACK:\n            return new InvalidCallbackException();\n        case SESSIONMOVED:\n            return new SessionMovedException();\n\n        case OK:\n        default:\n            throw new IllegalArgumentException(\"Invalid exception code\");\n        }\n    }", "    public Externalizer getExternalizer(String mimeType) {\n        Externalizer externalizer = null;\n        if (mimeType != null && mimeType.length() > 0) {\n            externalizer = (Externalizer) externalizerByMimeType.get(mimeType);\n            if (e", "public CSaveFormattedField ( final DefaultFormatterFactory factory ) { super ( factory ) ; }", "protected void getAndRemoveIbmAlpnChoice(SSLEngine engine, SSLConnectionLink link) {\n        if (this.isIbmAlpnActive()) {\n            try {\n                // invoke ALPNJSSEExt.get(engine)\n                String[] alpnResult = (String[]) ibmAlpnGet.invoke(null, engine);\n\n                // invoke ALPNJSSEExt.delete(engine)\n                ibmAlpnDelete.invoke(null, engine);\n\n                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                    StringBuilder sb = new StringBuilder();\n                    sb.append(\"getAndRemoveIbmAlpnChoice\");\n                    if (alpnResult != null && alpnResult.length > 0) {\n                        sb.append(\" results:\");\n                        for (String s : alpnResult) {\n                            sb.append(\" \" + s);\n                        }\n                        sb.append(\" \" + engine);\n                    } else {\n                        sb.append(\": ALPN not used for \" + engine);\n                    }\n                    Tr.debug(tc, sb.toString());\n                }\n\n                if (alpnResult != null && alpnResult.length == 1 && h2.equals(alpnResult[0])) {\n                    if (link.getAlpnProtocol() == null) {\n                        link.setAlpnProtocol(h2);\n                    }\n                }\n            } catch (InvocationTargetException ie) {\n                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                    Tr.debug(tc, \"getAndRemoveIbmAlpnChoice exception: \" + ie.getTargetException());\n                }\n            } catch (Exception e) {\n\n                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                    Tr.debug(tc, \"getAndRemoveIbmAlpnChoice exception: \" + e);\n                }\n            }\n        }\n    }", "public boolean retainAll(Collection<?> c) {\n        if (!(c instanceof JumboEnumSet))\n            return super.retainAll(c);\n\n        JumboEnumSet<?> es = (JumboEnumSet<?>)c;\n        if (es.elementType != elementType) {\n            boolean changed = (size != 0);\n            clear();\n            return changed;\n        }\n\n        for (int i = 0; i < elements.length; i++)\n            elements[i] &= es.elements[i];\n        return recalculateSize();\n    }", "    public Hashtable toHash() {\n        Hashtable hash = new Hashtable();\n        if (drvbind_key != null)\n            hash.put(HKEY_DRVBIND_KEY  , drvbind_key.toHash());\n        hash.put(HKEY_DEV_MASTER_ID, new Integer(dev_master_id));\n        hash.put(HKEY_DEV_SLAVE_ID , new Integer(dev_slave_id));\n        return hash;\n    }\n", "public DArray newDArray()\r\n    {\r\n        if ((getCurrentDatabase() == null))\r\n        {\r\n            throw new DatabaseClosedException(\"Database is NULL, cannot create a DArray with a null database.\");\r\n        }\r\n        return (DArray) DArrayFactory.singleton.createCollectionOrMap(getCurrentPBKey());\r\n    }", "public void retrievePin(\n            @NonNull String cardId,\n            @NonNull String verificationId,\n            @NonNull String userOneTimeCode,\n            @NonNull IssuingCardPinRetrievalListener listener\n    ) {\n\n        Map<String, Object> arguments = new HashMap<>();\n        arguments.put(ARGUMENT_CARD_ID, cardId);\n        arguments.put(ARGUMENT_VERIFICATION_ID, verificationId);\n        arguments.put(ARGUMENT_ONE_TIME_CODE, userOneTimeCode);\n\n        final String operationId = UUID.randomUUID().toString();\n        mRetrievalListeners.put(operationId, listener);\n        mEphemeralKeyManager.retrieveEphemeralKey(operationId, PIN_RETRIEVE, arguments);\n    }", "public int readUI8() throws IOException {\n  synchBits();\n  int ui8=in.read();\n  if (ui8 < 0) {\n    throw new IOException(\"Unexpected end of input\");\n  }\n  bytesRead++;\n  return ui8;\n}\n", "public DefaultOAuth2AccessToken retrieveToken(String grantType, String accept, String authorization, String clientId, String password, String refreshToken, String scope, String username) throws ApiException {\n        ApiResponse<DefaultOAuth2AccessToken> resp = retrieveTokenWithHttpInfo(grantType, accept, authorization, clientId, password, refreshToken, scope, username);\n        return resp.getData();\n    }", "public void marshall(ValidationError validationError, ProtocolMarshaller protocolMarshaller) {\n\n        if (validationError == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(validationError.getElementPath(), ELEMENTPATH_BINDING);\n            protocolMarshaller.marshall(validationError.getErrorMessage(), ERRORMESSAGE_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "    public void addDBObject(int objectType, DBObject object) {\n        if (objectType < 0 || objectType >= DBObjects.NUMBEROFOBJECTS)\n            return;\n        ((List) m_Objects.get(objectType)).add(object);\n    }\n", "public String zookeeperConnect(){\n  return effectiveConfig.getProperty(\"zookeeper.connect\",DEFAULT_ZK_CONNECT);\n}\n", "\tprotected List getCurrentPoints() {\n\t\tEditPartViewer viewer = getHost().getRoot().getViewer();\n\t\tVisualInfo vi = VisualInfoPolicy.getVisualInfo(getHost().getModel(), viewer);\n\t\tObject bendpointsKV = vi != null ? vi.getKeyedValues().get(ModelConstants.VISUAL_BENDPOINTS_KEY) : null;\n\t\tList oldPoints = bendpointsKV instanceof List ? (List) bendpointsKV : null;\n\t\treturn oldPoints;\n\t}\n", "public static byte[] encodeDataList(Object... args) {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        for (Object arg : args) {\n            byte[] val = encodeValFor32Bits(arg);\n            try {\n                baos.write(val);\n            } catch (IOException e) {\n                throw new Error(\"Happen something that should never happen \", e);\n            }\n        }\n        return baos.toByteArray();\n    }", "private void initializeListeners ( ) { m_bookmarkManager . addListener ( m_listener ) ; for ( final CCodeBookmark bookmark : m_bookmarkManager ) { bookmark . addListener ( m_listener ) ; } }", "StringBuilder getOutput() {\n        if( output == null ) {\n            CssFormatter block = copy( null );\n            state.results.add( new CssPlainOutput( block.output ) );\n            output = block.output;\n        }\n        return output;\n    }", "public static Response get(URI uri) throws URISyntaxException, HttpException {\n        return send(new HttpGet(uri), null, null);\n    }", "public void removeListener ( final FileAlterationListener listener ) { if ( listener != null ) { while ( listeners . remove ( listener ) ) { } } }", "public String [ ] consumeStringArrayAttribute ( String name ) throws UnableToCompleteException { AttributeParser parser = attributeParsers . getParser ( getStringType ( ) ) ; String [ ] strings = consumeRawArrayAttribute ( name ) ; for ( int i = NUM_ ; i ", "    protected void setActive(boolean activeFlag) {\n\tboolean oldValue = false;\n\tsynchronized(this) {\n\t    oldValue = this.activeFlag;\n\t    this.activeFlag = activeFlag;\n\t}\n\t// property change\n\ttry {\n\t    // fire!\n\t    mPropertyChange.firePropertyChange(\"active\",\n\t\t\t\t\t       oldValue,\n\t\t\t\t\t       activeFlag);\n\t} catch (Exception e) {\n\t    System.err.println(\"ERROR firing active change: \"+e);\n\t    e.printStackTrace(System.err);\n\t}\n    }\n", "private int[] findNearestArea(int cellX,int cellY,int spanX,int spanY,int[] direction,boolean[][] occupied,boolean blockOccupied[][],int[] result){\n  final int[] bestXY=result != null ? result : new int[2];\n  float bestDistance=Float.MAX_VALUE;\n  int bestDirectionScore=Integer.MIN_VALUE;\n  final int countX=mCountX;\n  final int countY=mCountY;\n  for (int y=0; y < countY - (spanY - 1); y++) {\n    inner:     for (int x=0; x < countX - (spanX - 1); x++) {\n      for (int i=0; i < spanX; i++) {\n        for (int j=0; j < spanY; j++) {\n          if (occupied[x + i][y + j] && (blockOccupied == null || blockOccupied[i][j])) {\n            continue inner;\n          }\n        }\n      }\n      float distance=(float)Math.hypot(x - cellX,y - cellY);\n      int[] curDirection=mTmpPoint;\n      computeDirectionVector(x - cellX,y - cellY,curDirection);\n      int curDirectionScore=direction[0] * curDirection[0] + direction[1] * curDirection[1];\n      boolean exactDirectionOnly=false;\n      boolean directionMatches=direction[0] == curDirection[0] && direction[0] == curDirection[0];\n      if ((directionMatches || !exactDirectionOnly) && Float.compare(distance,bestDistance) < 0 || (Float.compare(distance,bestDistance) == 0 && curDirectionScore > bestDirectionScore)) {\n        bestDistance=distance;\n        bestDirectionScore=curDirectionScore;\n        bestXY[0]=x;\n        bestXY[1]=y;\n      }\n    }\n  }\n  if (bestDistance == Float.MAX_VALUE) {\n    bestXY[0]=-1;\n    bestXY[1]=-1;\n  }\n  return bestXY;\n}\n", "    public void publish(Object message, String topicName) throws NamingException, JMSException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Publishing object [\" + message + \"] on topic [\" + topicName + \"]\");\n        }\n\tTopic topic = (Topic)jndi.lookup(topicName);\n        publish(new ObjectMessageCreator(message), topic);\n    }\n", "protected void storeKeyPair ( String alias , KeyPair keyPair ) throws ResourceException { try { JsonValue keyPairValue = new JsonValue ( new HashMap < String , Object > ( ) ) ; keyPairValue . put ( STR_ , KeyRepresentation . toPem ( keyPair ) ) ; JsonValu", "public ActionInsertFact getRHSBoundFact(final String var) {\n        if (this.rhs == null) {\n            return null;\n        }\n        for (int i = 0; i < this.rhs.length; i++) {\n            if (this.rhs[i] instanceof ActionInsertFact) {\n                final ActionInsertFact p = (ActionInsertFact) this.rhs[i];\n                if (p.getBoundName() != null && var.equals(p.getBoundName())) {\n                    return p;\n                }\n            }\n        }\n        return null;\n    }", "void deleteView ( INaviView view ) throws CouldntDeleteException ;", "    private void fireUpdatedCell(int row, int column) {\n        for (TableModelListener l : listeners) {\n            l.tableChanged(new TableModelEvent(this, row, row, column));\n        }\n    }\n", "public static ValueGetterSpacePredicate < ServerEntry > pathAnd ( String path , ISpacePredicate leftPredicate , ISpacePredicate rightPredicate ) { return path ( path , and ( leftPredicate , rightPredicate ) ) ; }", "\tpublic int compare(Object o1, Object o2) {\n\t\tif (!(o1 instanceof IRubyElement) || !(o2 instanceof IRubyElement))\n\t\t\tthrow new ClassCastException();\n\t\treturn getIdForRubyElement((IRubyElement)o1) - getIdForRubyElement((IRubyElement)o2);\n\t}\n", "public static boolean isXML11Space(int c){\n  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_SPACE) != 0);\n}\n", "public void add(ComposableRecordReader<K,? extends V> rr) throws IOException {\n    kids[rr.id()] = rr;\n    if (null == q) {\n      cmp = WritableComparator.get(rr.createKey().getClass());\n      q = new PriorityQueue<ComposableRecordReader<K,?>>(3,\n          new Comparator<ComposableRecordReader<K,?>>() {\n            public int compare(ComposableRecordReader<K,?> o1,\n                               ComposableRecordReader<K,?> o2) {\n              return cmp.compare(o1.key(), o2.key());\n            }\n          });\n    }\n    if (rr.hasNext()) {\n      q.add(rr);\n    }\n  }", "  public void requestConcurrentCollection() {\n    concurrentCollection = true;\n  }\n", "    public void modelChanged(ModelEvent ev) {\n        rescanFiles = true;\n        if (ev instanceof ConfigurationEvent && autoUpdate) {\n            Util.log(\"Configuration changed -  updating \" + this);\n            rebuildConfiguration();\n            fireItemChanged();\n        } else {\n            Util.log(\"Configuration changed (auto update is disabled, so manual refresh needed)\");\n        }\n    }\n", "    public Object clone() {\n\n        return new CmsPermissionSetCustom(m_allowed, m_denied);\n    }\n", "void windowOpened ( CWindowManager windowManager , IGraphContainerWindow window ) ;", "public Buffer create(int level){\n  if (!canCreate()) {\n    return null;\n  }\n  Buffer buffer=new Buffer(bufferSize,level,randomGenerator);\n  List<Buffer> bufferList=bufferMap.get(level);\n  if (bufferList == null) {\n    bufferList=new ArrayList<Buffer>();\n    bufferMap.put(level,bufferList);\n  }\n  bufferList.add(buffer);\n  count++;\n  if (level > maxLevel) {\n    maxLevel=level;\n  }\n  return buffer;\n}\n", "    public boolean isInfo() {\n\n        return Level.INFO.value <= level.value;\n    }\n", "public static DataInputStream newDataInputStream ( Path self ) throws IOException { return new DataInputStream ( Files . newInputStream ( self ) ) ; }", "        public void removeActionListener (ActionListener l) {\n                eventListenerList.remove(ActionListener.class, l);\n        }\n", "public short getShort(String property) {\n    return getProperty(property, value -> {\n      try {\n        return Short.valueOf(value);\n      } catch (NumberFormatException e) {\n        throw new ConfigurationException(\"malformed property value: \" + property + \" must be a short\");\n      }\n    });\n  }", "public static Class<Object> loadValidInputTypes(String javaType, String type) {\n        // we have generics in the javatype, if so remove it so its loadable from a classloader\n        int idx = javaType.indexOf('<');\n        if (idx > 0) {\n            javaType = javaType.substring(0, idx);\n        }\n\n        try {\n            Class<Object> clazz = getPrimitiveWrapperClassType(type);\n            if (clazz == null) {\n                clazz = loadPrimitiveWrapperType(javaType);\n            }\n            if (clazz == null) {\n                clazz = loadStringSupportedType(javaType);\n            }\n            if (clazz == null) {\n                try {\n                    clazz = (Class<Object>) Class.forName(javaType);\n                } catch (Throwable e) {\n                    // its a custom java type so use String as the input type, so you can refer to it using # lookup\n                    if (\"object\".equals(type)) {\n                        clazz = loadPrimitiveWrapperType(\"java.lang.String\");\n                    }\n                }\n            }\n\n            // favor specialized UI for these types\n            if (clazz != null && (clazz.equals(String.class) || clazz.equals(Date.class) || clazz.equals(Boolean.class)\n                    || clazz.isPrimitive() || Number.class.isAssignableFrom(clazz))) {\n                return clazz;\n            }\n\n            // its a custom java type so use String as the input type, so you can refer to it using # lookup\n            if (\"object\".equals(type)) {\n                clazz = loadPrimitiveWrapperType(\"java.lang.String\");\n                return clazz;\n            }\n\n        } catch (Throwable e) {\n            // ignore errors\n        }\n        return null;\n    }", "public void dump ( Logger logger , String msg ) ;", "    public boolean includes(String value) {\n      boolean result = false;\n      try {\n        result = includes(Double.parseDouble(value));\n      }\n      catch (NumberFormatException e) {\n        // non-numeric isn't in range. result is already false.\n      }\n      return result;\n    }\n", "private void loadAuthenticationMethodTypes(ExtensionHook hook) {\n\t\tthis.authenticationMethodTypes = new ArrayList<>();\n\t\tthis.authenticationMethodTypes.add(new FormBasedAuthenticationMethodType());\n\t\tthis.authenticationMethodTypes.add(new HttpAuthenticationMethodType());\n\t\tthis.authenticationMethodTypes.add(new ManualAuthenticationMethodType());\n\t\tthis.authenticationMethodTypes.add(new ScriptBasedAuthenticationMethodType());\n\t\tthis.authenticationMethodTypes.add(new JsonBasedAuthenticationMethodType());\n\n\t\tfor (AuthenticationMethodType a : authenticationMethodTypes) {\n\t\t\ta.hook(hook);\n\t\t}\n\n\t\tif (log.isInfoEnabled()) {\n\t\t\tlog.info(\"Loaded authentication method types: \" + authenticationMethodTypes);\n\t\t}\n\t}", "\tprotected void populateComponentHtmlId(Form form) {\n\t\tString tryId;\n\t\tif (id != null) {\n\t\t\t// this check is needed for backwards compatibility with 2.1.x\n\t\t\ttryId = findStringIfAltSyntax(id);\n\t\t} else {\n\t\t\ttryId = \"pager_\" + (sequence++);\n\t\t}\n\t\taddParameter(\"id\", tryId);\n\t}\n", "\tprotected void propertyChanged(String property){\n\t\tif (!validProps.contains(property))\n\t\t\treturn;\n\n\t\tif (property.equals(RESPONSE)){\n\t\t\ttry {\n\t\t\tresponse.setValue(Integer.parseInt((String)properties.get(property)));\n\t\t\t} catch (JSpinner.InvalidRangeException ire){\n\t\t\t\tSystem.out.println(\"got invalid range on new response timeout\");\n\t\t\t\tire.printStackTrace();\n\t\t\t}\n\t\t}\n        if (property.equals(SERVER)){\n    \t    server.setText((String)properties.get(property));\n        }\n        if (property.equals(PORT)){\n            port.setText((String)properties.get(property));\n        }\n        if (property.equals(USERNAME)){\n            username.setText((String)properties.get(property));\n        }\n        if (property.equals(PASSWORD)){\n            password.setText((String)properties.get(property));\n        }\n\t}\n", "public Sentence parse(final ConversationContext ctx){\n  if (context.equals(ctx)) {\n    return this;\n  }\n else {\n    return ConversationParser.parse(originalText,ctx);\n  }\n}", "@Override public void removePropertyChangeListener(String name,PropertyChangeListener pcl){\n  m_bcSupport.removePropertyChangeListener(name,pcl);\n}\n", "public Observable<SummarizeResultsInner> summarizeForPolicyDefinitionAsync(String subscriptionId, String policyDefinitionName, QueryOptions queryOptions) {\n        return summarizeForPolicyDefinitionWithServiceResponseAsync(subscriptionId, policyDefinitionName, queryOptions).map(new Func1<ServiceResponse<SummarizeResultsInner>, SummarizeResultsInner>() {\n            @Override\n            public SummarizeResultsInner call(ServiceResponse<SummarizeResultsInner> response) {\n                return response.body();\n            }\n        });\n    }", "public static List<DiscoveryIncomingMessage> sendQueryAndCollectAnswers(DiscoveryOutgoingMessage pOutMsg,\n                                                                            int pTimeout,\n                                                                            LogHandler pLogHandler) throws IOException {\n        final List<Future<List<DiscoveryIncomingMessage>>> futures = sendDiscoveryRequests(pOutMsg, pTimeout, pLogHandler);\n        return collectIncomingMessages(pTimeout, futures, pLogHandler);\n    }", "private void validateTenantUpdate(TenantDefinition oldTenantDef,\n                                      TenantDefinition newTenantDef) {\n        Utils.require(oldTenantDef.getName().equals(newTenantDef.getName()),\n                      \"Tenant name cannot be changed: %s\", newTenantDef.getName());\n        Map<String, Object> oldDBServiceOpts = oldTenantDef.getOptionMap(\"DBService\");\n        String oldDBService = oldDBServiceOpts == null ? null : (String)oldDBServiceOpts.get(\"dbservice\");\n        Map<String, Object> newDBServiceOpts = newTenantDef.getOptionMap(\"DBService\");\n        String newDBService = newDBServiceOpts == null ? null : (String)newDBServiceOpts.get(\"dbservice\");\n        Utils.require((oldDBService == null && newDBService == null) || oldDBService.equals(newDBService),\n                      \"'DBService.dbservice' parameter cannot be changed: tenant=%s, previous=%s, new=%s\",\n                      newTenantDef.getName(), oldDBService, newDBService);\n    }", "\tpublic int getAvailableSocketCount(int index) throws InterruptedException{\n\t\tupdateSize();\n\t\t\n\t\tSocketStatus status = (SocketStatus) socketStatusList.get(index);\n\t\t\n\t\treturn status.getAvaialbleSockets();\n\t}\n", "public Class<?> getClassForName(String className) {\n        if (!StringUtils.hasText(className)) {\n            return null;\n        }\n\n        for (Class<?> c : allClasses) {\n            if (c.getName().equals(className)) {\n                return c;\n            }\n        }\n        return null;\n    }", "public static void writeExtensionMedia(OutputStream theOs,String theStr) throws IOException {\n  theOs.write(theStr.getBytes(StandardCharsets.UTF_8));\n  theOs.write((byte)0x00);\n}\n", "public final String evaluate(final Map<String, Object> pReqVars,\n    final IRequestData pData) throws Exception {\n    SeSeller seSeller = this.findSeSeller.find(pReqVars, pData.getUserName());\n    if (seSeller == null) {\n      throw new ExceptionWithCode(ExceptionWithCode.SOMETHING_WRONG,\n        \"It's not S.E.Seller - \" + pData.getUserName());\n    }\n    String nmEnt = pData.getParameter(\"nmEnt\");\n    boolean isSe = false;\n    for (Class<?> cl : this.seEntities) {\n      if (cl.getSimpleName().equals(nmEnt)) {\n        isSe = true;\n        break;\n      }\n    }\n    if (isSe) {\n      //simple-hummer implementation:\n      String wheSe;\n      if (nmEnt.startsWith(\"I18n\")) {\n        wheSe = \"HASNAME.SELLER=\";\n      } else if (nmEnt.endsWith(\"Price\") || nmEnt.endsWith(\"Place\")\n        || nmEnt.endsWith(\"Specifics\")) {\n        wheSe = \"ITEM.SELLER=\";\n      } else if (nmEnt.equals(\"CuOrSe\")) {\n        wheSe = \"CUORSE.SEL=\";\n      } else { //good/service/paymd\n        wheSe = nmEnt.toUpperCase() + \".SELLER=\";\n      }\n      return wheSe + seSeller.getItsId().getItsId();\n    } else {\n      return null;\n    }\n  }", "public static ResettableInputStream newResettableInputStream(\n            FileInputStream fis, String errmsg) {\n        try {\n            return new ResettableInputStream(fis);\n        } catch (IOException e) {\n            throw new SdkClientException(errmsg, e);\n        }\n    }", "public void buildLegs(ArrayList<GeoPoint> waypoints){\n  mLegs=new ArrayList<RoadLeg>();\n  int firstNodeIndex=0;\n  int w=waypoints.size();\n  int n=mNodes.size();\n  for (int i=1; i < w - 1; i++) {\n    GeoPoint waypoint=waypoints.get(i);\n    double distanceMin=-1.0;\n    int nodeIndexMin=-1;\n    for (int j=firstNodeIndex; j < n; j++) {\n      GeoPoint roadPoint=mNodes.get(j).mLocation;\n      double dSquared=distanceLLSquared(roadPoint,waypoint);\n      if (nodeIndexMin == -1 || dSquared < distanceMin) {\n        distanceMin=dSquared;\n        nodeIndexMin=j;\n      }\n    }\n    RoadLeg leg=new RoadLeg(firstNodeIndex,nodeIndexMin,mNodes);\n    mLegs.add(leg);\n    firstNodeIndex=nodeIndexMin + 1;\n  }\n  RoadLeg lastLeg=new RoadLeg(firstNodeIndex,n - 1,mNodes);\n  mLegs.add(lastLeg);\n}\n", "private void displayPopupMenu ( final MouseEvent event ) { final int selectedIndex = getSelectionIndex ( event ) ; if ( selectedIndex != - NUM_ ) { final TargetProcessThread thread = m_table . getModel ( ) . getThreads ( ) . get ( selectedIndex ) ; final IDebugger debugger = m_debugPerspectiveModel . getCurrentSelectedDebugger ( ) ; final CThreadInformationTableMenu popupMenu = new CThreadInformationTableMenu ( SwingUtilities . getWindowAncestor ( CThreadInformationPanel . this ) , debugger , thread ) ; popupMenu . show ( m_table , event . getX ( ) , event . getY ( ) ) ; } }", "private void fetchChunk(BulkIdParam input,ResourceFilter<T> filter,List<T> results){\n  List<T> items=getBulkResources(input);\n  for (  T item : items) {\n    if (accept(item,filter)) {\n      results.add(item);\n    }\n  }\n}\n", "public static boolean isEmpty(final String s){\n  return (s == null || s.length() == 0);\n}\n", "    public void write(DataOutputStream dos) throws IOException {\n        dos.writeByte(_type);\n        dos.writeFloat(_floatValue);\n    }\n", "\tpublic Rules add(PropertyConstraint constraint) {\n\t\tCompoundPropertyConstraint and = (CompoundPropertyConstraint)propertiesConstraints.get(constraint\n\t\t\t\t.getPropertyName());\n\t\tif (and == null) {\n\t\t\tputPropertyConstraint(constraint);\n\t\t}\n\t\telse {\n\t\t\tand.add(constraint);\n\t\t}\n\t\treturn this;\n\t}\n", "public static String getNameForNew(Element element) {\n\t\tif (element.getKind() != ElementKind.CLASS) {\n\t\t\tthrow new IllegalStateException();\n\t\t}\n\t\treturn getNameForNew(\"\", element);\n\t}", "public static ContentValues values ( Sync < ? extends Synced > sync ) { ContentValues vals = new ContentValues ( NUM_ ) ; vals . put ( GLOBAL_ID , sync . globalId ) ; vals . put ( TYPE_ID , type ( sync ) . id ) ; vals . put ( OBJECT_ID , sync . object . localId ) ; vals . put ( ACTION_ID , sync . action . id ) ; vals . put ( ACTION_ON , sync . actionOn ) ; if ( ! Prefs . getStringSet ( context ( ) , SHOW_NOTIFICATIONS ) . contains ( context ( ) . getString ( R . string . friend_notifications_value ) ) ) { vals . put ( STATUS_ID , INACTIVE . id ) ; } return vals ; }", "protected void startActivityForResult(Intent intent, int code) {\n    if (fragment == null) {\n      activity.startActivityForResult(intent, code);\n    } else {\n      fragment.startActivityForResult(intent, code);\n    }\n  }", "private void limitKnownPeers(int limit){\n  if (peerList.size() < limit)   return;\n  int knownPeers=0;\n  Peer oldestPeer=null;\n  long oldestDate=System.currentTimeMillis();\n  for (  Peer peer : peerList) {\n    if (peer.hasReceivedData()) {\n      knownPeers++;\n      if (peer.getCreationTime() < oldestDate) {\n        oldestDate=peer.getCreationTime();\n        oldestPeer=peer;\n      }\n    }\n  }\n  if (knownPeers > limit) {\n    peerList.remove(oldestPeer);\n  }\n  if (knownPeers - 1 > limit) {\n    limitKnownPeers(limit);\n  }\n}\n", "private static long sum(long n){\n  return n * (n + 1) / 2l;\n}\n", "private static boolean isToplevelClass(String fileName){\n  return fileName.indexOf('$') < 0;\n}\n", "boolean validateLabel ( String label ) ;", "protected void commonInit(){\n  hardcodedProps=new Properties();\n  runtimeProps=new Properties(hardcodedProps);\n  defaults=runtimeProps;\n  initHardCodedProperties(hardcodedProps);\n  initRuntimeProperties(runtimeProps);\n}\n", "static void rollToNextWeekStart(DTBuilder builder, Weekday wkst) {\n        DateValue bd = builder.toDate();\n        builder.day += (7 - ((7 + (Weekday.valueOf(bd).javaDayNum\n                - wkst.javaDayNum))\n                % 7)) % 7;\n        builder.normalize();\n    }", "XSLTElementProcessor popProcessor(){\n  return (XSLTElementProcessor)m_processors.pop();\n}\n", "public int tty_nr(){\n  return Integer.parseInt(fields[6]);\n}\n", "public void marshall(CancelTimerFailedEventAttributes cancelTimerFailedEventAttributes, ProtocolMarshaller protocolMarshaller) {\n\n        if (cancelTimerFailedEventAttributes == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(cancelTimerFailedEventAttributes.getTimerId(), TIMERID_BINDING);\n            protocolMarshaller.marshall(cancelTimerFailedEventAttributes.getCause(), CAUSE_BINDING);\n            protocolMarshaller.marshall(cancelTimerFailedEventAttributes.getDecisionTaskCompletedEventId(), DECISIONTASKCOMPLETEDEVENTID_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "    public boolean isReadOnly(ELContext context, Object base, Object property) {\n\n        if (base == null) {\n            context.setPropertyResolved(true);\n            return false;\n        }\n        return false;\n\n    }\n", "  protected void updateFolderOpenStatus(boolean isNowOpen) {\n    if (isNowOpen) {\n      setStatus(CONNECTED);\n    } else {\n      setStatus(CLOSED);\n    }\n  }\n", "private void setDatesInternal(SortedSet<Date> dates) {\n\n        if (!m_dates.equals(dates)) {\n            m_dates = new TreeSet<>(dates);\n            fireValueChange();\n        }\n    }", "protected abstract int createNativeFlowgraphViews ( int moduleId ) throws SQLException ;", "public void clearListener ( ) { mListener = null ; }", "public void receive(boolean bit1,boolean bit2){\n  mBits=Long.rotateLeft(mBits,1);\n  mBits&=mMask;\n  if (bit1) {\n    mBits+=1;\n  }\n  mBits=Long.rotateLeft(mBits,1);\n  mBits&=mMask;\n  if (bit2) {\n    mBits+=1;\n  }\n  for (  ISyncProcessor processor : mSyncPr", "public final double NPV ( ) { calculate ( ) ; QL . require ( ! Double . isNaN ( this . NPV ) , STR_ ) ; return NPV ; }", "private static String buildLogMessage(String methodName,long loadingTimeDuration){\n  StringBuilder message=new StringBuilder();\n  message.append(\"Chronometro ----> \");\n  message.append(methodName);\n  message.append(\" in \");\n  message.append(\"[\");\n  messag", "@Nullable\n    public static Class<?> findClass(ScriptModule module, String className) {\n        Set<Class<?>> classes = module.getLoadedClasses();\n        Class<?> targetClass = null;\n        for (Class<?> clazz : classes) {\n            if (clazz.getName(", "private CmsObject initCms(CmsObject cms) {\n\n        try {\n            cms = OpenCms.initCmsObject(cms);\n        } catch (CmsException e) {\n            LOG.error(\"Unable to init CmsObject\");\n        }\n        cms.getRequestContext().setSiteRoot(\"\");\n        return cms;\n    }", "protected static ValueTrackerElement transformRegisters ( final ReilInstruction instruction , final ValueTrackerElement incomingState , final IElementGenerator generator ) { final ReilOperand firstOperand = instruction . getFirstOperand ( ) ; final ReilOp", "private Collection<Var> migrateColumns(SQLTable table,ResultSet row,Var instance) throws SQLException {\n  String tableType=table.getEntityType();\n  Map<String,ResourceType.DataType> columns=table.getColumns();\n  Map<String,String> foreign=table.getForeignKeyColumns();\n  ResultSetMetaData metadata=row.getMetaData();\n  List<Var> vars=new ArrayList<>();\n  for (int i=1; i <= metadata.getColumnCount(); i++) {\n    String columnName=metadata.getColumnName(i);\n    Object columnValue=row.getObject(columnName);\n    ResourceType.DataType dataType=columns.get(columnName);\n    String foreignKey=foreign.get(columnName);\n    if (foreignKey != null) {\n      vars.addAll(migrateColumnValueAsRelation(instance,columnName,foreignKey,columnValue));\n    }\n else {\n      vars.addAll(migrateColumnValueAsResource(instance,columnName,cast(dataType,columnName,row),tableType));\n    }\n  }\n  return vars;\n}\n", "public static List<String> parse(String expr) {\n        \n        List<String> expressions = new ArrayList<>();\n        \n        int parenthesis = 0; // '(' and ')'\n        int brackets = 0; // '{' and '}'\n        int brackets2 = 0; // '[' and ']'\n\n        String[] lines = expr.split(\"\\n\");\n        StringBuilder sb = new StringBuilder();\n        for(String line : lines) {\n            line = line.trim();\n            if(line.startsWith(\"#\")) {\n                // Ignore commented lines\n            } else {\n                char currentChar=0;\n                for (int i = 0; i < line.length(); i++) {\n                    currentChar = line.charAt(i);\n                    if (currentChar == '#') {// Ignore rest of line\n                        line = line.substring(0,i);\n                        break; \n                    } else if (currentChar == '(') {\n                        parenthesis++;\n                    } else if (currentChar == ')') {\n                        parenthesis--;\n                    } else if (currentChar == '{') {\n                        brackets++;\n                    } else if (currentChar == '}') {\n                        brackets--;\n                    } else if (currentChar == '[') {\n                        brackets2++;\n                    } else if (currentChar == ']') {\n                        brackets2--;\n                    } else if (parenthesis == 0 && brackets == 0 && brackets2 == 0) {\n                        if(currentChar == ';') {\n                            String firstLine = line.substring(0, i+1);\n                            sb.append(firstLine);                            \n                            expressions.add(sb.toString());\n                            sb = new StringBuilder();\n                                                        \n                            String remainder = line.substring(i+1);\n                            line = remainder.trim()+\"\\n\";\n                            i=0;\n                        }\n                    }\n                }\n                if(line.trim().length()>0) {\n                    sb.append(line);\n                    if(parenthesis == 0 && brackets == 0 && brackets2 == 0) {\n                        expressions.add(sb.toString());\n                        sb = new StringBuilder();\n                    } else {\n                        if (currentChar!=',' && currentChar!='+' && currentChar!='-' && currentChar!='*' &&currentChar!='/' &&currentChar!='=')\n                        sb.append(\";\\n\");\n                    }\n                }\n            }\n        }\n        \n        return expressions;\n    }", "public static void w ( String tag , String msg , Throwable tr ) { println ( WARN , tag , msg , tr ) ; }", "protected void removeReferencingFromCache(Set<String> references) {\n\n        if (m_jspLoader != null) {\n            m_jspLoader.removeFromCache(references, false);\n        }\n    }", "public static Response createBindingErrorResponse ( char errorCode , String reasonPhrase , char [ ] unknownAttributes ) throws IllegalArgumentException { Response bindingErrorResponse = new Response ( ) ; bindingErrorResponse . setMessageType ( Message . ", "public void print ( ) { System . out . printf ( STR_ , m_address ) ; for ( final byte element : m_data ) { System . out . printf ( STR_ , element ) ; } System . out . println ( ) ; }", "@SuppressWarnings(\"rawtypes\")\n    static String validateProductMatches(String feature, String dependency, List productMatchers, File installDir, boolean installingAsset) {\n        wlp.lib.extract.ReturnCode validInstallRC = SelfExtractor.validateProductMatches(installDir, productMatchers);\n        String errMsg = \"\";\n        if (validInstallRC != wlp.lib.extract.ReturnCode.OK) {\n            String productName = InstallConstants.PRODUCTNAME;\n            Object[] params = validInstallRC.getParameters();\n            if (validInstallRC.getMessageKey().equals(\"invalidVersion\") || validInstallRC.getMessageKey().equals(\"invalidEdition\")) {\n                int productVersion = 0;\n                int matchVersion = 1;\n                int productEdition = 2;\n                int matchEdition = 3;\n\n                if (validInstallRC.getMessageKey().equals(\"invalidEdition\")) {\n                    productVersion = 2;\n                    matchVersion = 3;\n                    productEdition = 0;\n                    matchEdition = 1;\n                }\n                String version = (String) params[productVersion];\n                String appliesToVersion = (String) params[matchVersion];\n                if (appliesToVersion == null || version.equals(appliesToVersion))\n                    appliesToVersion = \"\";\n\n                @SuppressWarnings(\"unchecked\")\n                List<String> editions = (List<String>) params[matchEdition];\n                String edition = InstallUtils.getEditionName(installDir, (String) params[productEdition]);\n                StringBuilder applicableProducts = new StringBuilder();\n                applicableProducts.append(InstallUtils.NEWLINE);\n\n                //no editions requirement\n                if (editions == null || editions.size() == 0) {\n                    editions = InstallUtils.ALL_EDITIONS;\n                }\n\n                if (((String) params[productEdition]).equalsIgnoreCase(\"Liberty Early Access\")) {\n                    editions = new ArrayList<String>();\n                    editions.add(\"Early Access\");\n                }\n\n                Collections.sort(editions);\n                Map<String, String> productMap = new HashMap<String, String>();\n                applicableProducts.append(InstallUtils.NEWLINE);\n                for (String e : editions) {\n                    String editionName = \"\";\n                    editionName = InstallUtils.getEditionName(e);\n                    if (!productMap.containsKey(editionName)) {\n                        String product = \"- \" + productName + (editionName.isEmpty() ? \"\" : \" \") + editionName + \" \" + appliesToVersion;\n                        productMap.put(editionName, product);\n                        applicableProducts.append(product);\n                        applicableProducts.append(InstallUtils.NEWLINE);\n                    }\n                }\n                applicableProducts.append(InstallUtils.NEWLINE);\n                //installing asset has invalid product version and/or edition\n                if (dependency == null || dependency.isEmpty()) {\n                    if (appliesToVersion.equals(\"\")) { //installing asset has invalid product edition only\n\n                        if (((String) params[productEdition]).equalsIgnoreCase(\"Open_Web\") && productName.equalsIgnoreCase(\"IBM WebSphere Application Server Liberty\")) {\n                            errMsg = Messages.INSTALL_KERNEL_MESSAGES.getLogMessage(installingAsset ? \"ERROR_ASSET_INVALID_PRODUCT_EDITION\" : \"ERROR_INVALID_PRODUCT_EDITION_FOR_OPEN_LIBERTY_FEATURE\",\n                                                                                    new Object[] { feature });\n                        } else {\n\n                            errMsg = Messages.INSTALL_KERNEL_MESSAGES.getLogMessage(installingAsset ? \"ERROR_ASSET_INVALID_PRODUCT_EDITION\" : \"ERROR_INVALID_PRODUCT_EDITION\",\n                                                                                    new Object[] { feature, productName, edition, applicableProducts.toString(), productName,\n                                                                                                   edition });\n                        }\n\n                    } else {\n                        errMsg = Messages.INSTALL_KERNEL_MESSAGES.getLogMessage(installingAsset ? \"ERROR_ASSET_INVALID_PRODUCT_EDITION_VERSION\" : \"ERROR_INVALID_PRODUCT_EDITION_VERSION\",\n                                                                                new Object[] { feature, productName, edition, version, applicableProducts.toString() });\n                    }\n                } else\n                    errMsg = Messages.INSTALL_KERNEL_MESSAGES.getLogMessage(installingAsset ? \"ERROR_ASSET_DEPENDENT_INVALID_VERSION_EDITION\" : \"ERROR_DEPENDENT_INVALID_VERSION_EDITION\",\n                                                                            new Object[] { feature, dependency, productName, edition, version,\n                                                                                           applicableProducts.toString() });\n\n            } else if (validInstallRC.getMessageKey().equals(\"invalidInstallType\")) {\n                errMsg = Messages.INSTALL_KERNEL_MESSAGES.getLogMessage(installingAsset ? \"ERROR_ASSET_INVALID_PRODUCT_INSTALLTYPE\" : \"ERROR_INVALID_PRODUCT_INSTALLTYPE\",\n                                                                        new Object[] { feature, params[0], params[1] });\n            }\n\n            if (errMsg.isEmpty()) {\n                errMsg = Messages.INSTALL_KERNEL_MESSAGES.getLogMessage(installingAsset ? \"ERROR_ASSET_NOT_APPLICABLE\" : \"ERROR_FEATURE_NOT_APPLICABLE\", feature,\n                                                                        installDir.getAbsolutePath(),\n                                                                        validInstallRC.getErrorMessage());\n            }\n        }\n        return errMsg;\n    }", "    public void close() {\n        m_graphRDB.close();\n    }\n", "public static ExecutionResult failure(String message) {\n        ExecutionResult executionResult = new ExecutionResult();\n        executionResult.withErrorMessages(message);\n        return executionResult;\n    }", "    public double clean(final double d) {\n        return Math.abs(d) <= delta ? 0 : d;\n    }\n", "public EntityInstanceWrapper getSelected() throws PMException {\n        final EntityContainer container = getEntityContainer(true);\n        if (container == null) {\n            return null;\n        }\n        return container.getSelected();\n    }", "private PropertyConverter getConverterForType(Class pType) {\n        Object converter;\n        Class cl = pType;\n\n        // Loop until we find a suitable converter\n        do {\n            // Have a match, return converter\n            if ((convert", "    public void setExpansionState(TreePath[] pathArray) {\n        for (int i = 0; i < pathArray.length; i++) {\n            TreePath path = pathArray[i];\n            this.outlineTreeView.expandPath(path);\n        }\n    }\n", "    public Class getColumnClass(int column) {\n        switch (getColumnID(column)) {\n            case TASK_REGULAR:\n                return Boolean.class;\n            case TASK_PRIVATE:\n                return Boolean.class;\n            default:\n                return String.class;\n        }\n    }\n", "public static ChainingMode getChainMode(String chainMode) {\n\tif (chainMode==null) {\n\t\treturn null;\n\t}\n\tswitch (chainMode) {\n\t\tcase \"cbc\": return ChainingMode.cbc;\n\t\tcase \"cfb\": return ChainingMode.cfb;\n\t\tcase \"ecb\": return ChainingMode.ecb;\n\t\tdefault:\n\t\t\tLOG.error(\"Uknown chainmode: \\\"\"+chainMode+\"\\\"\");\n\t\t\tbreak;\n\n\t}\n\treturn null;\n}", "private boolean isValidGateway(String gateway){\n  return (gatewayList != null) && ((gatewayList.isEmpty()) || (gatewayList.contains(gateway)));\n}", "   public void windowIconified(WindowEvent e) {\n      minimizeWindows();\n   }\n", "    public void setLinkToContext(String context) {\n        for (CMLLink link : getLinkElements()) {\n            link.setToContext(context);\n        }\n    }\n", "\tpublic String translate(String phrase) {\n\t\tif (!translations.containsKey(phrase)) {\n\t\t\t// Don't panic if there is no translation - just return untranslated\n\t\t\t// phrase\n\t\t\tLogger.warn(\"Translation for phrase \\\"\" + phrase + \"\\\" not found.\");\n\t\t\treturn phrase;\n\t\t}\n\t\treturn translations.get(phrase);\n\t}\n", "\tpublic List listActivitiesByPerson(Actor person) {\n        return null;\n\t}\n", "ShowDialog ( JFrame frame ) { innerFrame = frame ; }", "public int numLeafKeysIssued(){\n  lock.lock();\n  try {\n    return issuedExternalKeys + issuedInternalKeys;\n  }\n  finally {\n    lock.unlock();\n  }\n}\n", "    public void tableInheritedHeaderStart(String color) {\n        trBgcolorStyle(color, \"TableSubHeadingColor\");\n        thAlign(\"left\");\n    }\n", "@Override\n\tpublic CommerceAddress remove(Serializable primaryKey)\n\t\tthrows NoSuchAddressException {\n\t\tSession session = null;\n\n\t\ttry {\n\t\t\tsession = openSession();\n\n\t\t\tCommerceAddress commerceAddress = (CommerceAddress)session.get(CommerceAddressImpl.class,\n\t\t\t\t\tprimaryKey);\n\n\t\t\tif (commerceAddress == null) {\n\t\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t\t_log.debug(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);\n\t\t\t\t}\n\n\t\t\t\tthrow new NoSuchAddressException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +\n\t\t\t\t\tprimaryKey);\n\t\t\t}\n\n\t\t\treturn remove(commerceAddress);\n\t\t}\n\t\tcatch (NoSuchAddressException nsee) {\n\t\t\tthrow nsee;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow processException(e);\n\t\t}\n\t\tfinally {\n\t\t\tcloseSession(session);\n\t\t}\n\t}", "public static Thread start ( Thread thread , long timeout ) { Thread monitor = null ; if ( timeout > NUM_ ) { ThreadMonitor timout = new ThreadMonitor ( thread , timeout ) ; monitor = new Thread ( timout , ThreadMonitor . class . getSimpleName ( ) ) ; mon", "public void insert(ForceItem item){\n  try {\n    insert(item,root,xMin,yMin,xMax,yMax);\n  }\n catch (  StackOverflowError e) {\n    e.printStackTrace();\n  }\n}\n", "public final B addMapping(String column, int index, final Object... properties) {\n        return addMapping(key(column, index), properties);\n    }", "public ChangedAddressAttribute ( ) { super ( CHANGED_ADDRESS ) ; }", "public boolean isSubscribedToAll ( ) { return isNullOrEmpty ( streamId ) ; }", "\tpublic void add(Timer t){\n\t\ttimers.add(t);\n\t\tmodCount++;\n\t}\n", "public String getTextualRepresentation() {\n    if (ConceptMention_Type.featOkTst && ((ConceptMention_Type)jcasType).casFeat_textualRepresentation == null)\n      jcasType.jcas.throwFeatMissing(\"textualRepresentation\", \"de.julielab.jules.types.ConceptMention\");\n    return jcasType.ll_cas.ll_getStringValue(addr, ((ConceptMention_Type)jcasType).casFeatCode_textualRepresentation);}", "public CEventTable ( final CEventTableModel model ) { super ( model , new CEventTableHelp ( ) ) ; m_model = model ; }", "public boolean isUpdate ( ) { return oneRowChange . getAction ( ) == RowChangeData . ActionType . UPDATE ; }", "void processLoop() throws IOException {\n\n        // need to read off 4 bytes at least to get the handshake\n        // message type and length.\n        while (input.available() >= 4) {\n            byte messageType;\n            int messageLen;\n\n            /*\n             * See if we can read the handshake message header, and\n             * then the entire handshake message.  If not, wait till\n             * we can read and process an entire message.\n             */\n            input.mark(4);\n\n            messageType = (byte)input.getInt8();\n            messageLen = input.getInt24();\n\n            if (input.available() < messageLen) {\n                input.reset();\n                return;\n            }\n\n            /*\n             * Process the messsage.  We require\n             * that processMessage() consumes the entire message.  In\n             * lieu of explicit error checks (how?!) we assume that the\n             * data will look like garbage on encoding/processing errors,\n             * and that other protocol code will detect such errors.\n             *\n             * Note that digesting is normally deferred till after the\n             * message has been processed, though to process at least the\n             * client's Finished message (i.e. send the server's) we need\n             * to acccelerate that digesting.\n             *\n             * Also, note that hello request messages are never hashed;\n             * that includes the hello request header, too.\n             */\n            if (messageType == HandshakeMessage.ht_hello_request) {\n                input.reset();\n                processMessage(messageType, messageLen);\n                input.ignore(4 + messageLen);\n            } else {\n                input.mark(messageLen);\n                processMessage(messageType, messageLen);\n                input.digestNow();\n            }\n        }\n    }", "public void next ( int frames , boolean broadcast ) throws IOException { if ( mInputStream != null ) { byte [ ] buffer = new byte [ mBytesPerFrame * frames ] ; int samplesRead = mInputStream . read ( buffer ) ; mFrameCounter += samplesRead ; broadcast ( mFrameCounter ) ; if ( broadcast && mListener != null ) { if ( samplesRead < buffer . length ) { buffer = Arrays . copyOf ( buffer , samplesRead ) ; } float [ ] samples = ConversionUtils . convertFromSigned16BitSamples ( buffer ) ; mListener . receive ( new ComplexBuffer ( samples ) ) ; } } }", "static void saveException(Exception ex){\n  StringWriter sw=new StringWriter();\n  ex.printStackTrace(new PrintWriter(sw));\n  initSecondaryError=sw.toString();\n}\n", "    public ChoiceGroup getOptSonido() {\n        if (optSonido == null) {//GEN-END:|51-getter|0|51-preInit\n            // write pre-init user code here\n            optSonido = new ChoiceGroup(\"Sonido:\", Choice.MULTIPLE);//GEN-BEGIN:|51-getter|1|51-postInit\n            optSonido.append(\"Activado\", null);\n            optSonido.setSelectedFlags(new boolean[] { true });//GEN-END:|51-getter|1|51-postInit\n            // write post-init user code here\n        }//GEN-BEGIN:|51-getter|2|\n        return optSonido;\n    }\n", "public static void check ( boolean condition , int errorCode , String [ ] parameters ) throws RuntimeException { if ( ! condition ) { throw new RuntimeException ( MP . getMessage ( errorCode , parameters ) ) ; } }", "\tprotected Connection createConnectionFigure() {\n\t\treturn new AndTermAndLeftTermFigure();\n\t}\n", "    public boolean isCellProperty() {\n        return cell && ordinal <= VALUE_ORDINAL;\n    }\n", "public final boolean parentOf(ThreadGroup g){\n  for (; g != null; g=g.parent) {\n    if (g == this) {\n      return true;\n    }\n  }\n  return false;\n}\n", "public double distance(double x,double y,double z){\n  double xd=this.x - x;\n  double yd=this.y - y;\n  double zd=this.z - z;\n  return Math.sqrt(xd * xd + yd * yd + zd * zd);\n}\n", "public UrlValidator ( ) { this ( null ) ; }", "public static String stripFilenameExtension(String path){\n  if (path == null) {\n    return null;\n  }\n  int extIndex=path.lastIndexOf(EXTENSION_SEPARATOR);\n  if (extIndex == -1) {\n    return path;\n  }\n  int folderIndex=path.lastIndexOf(FOLDER_SEPARATOR);\n  if (folderIndex > extIndex) {\n    return path;\n  }\n  return path.substring(0,extIndex);\n}\n", "public static byte[] hash(byte[] input){\n  if (input != null) {\n    final MessageDigest digest;\n    try {\n      digest=MessageDigest.getInstance(\"SHA-256\");\n      byte[] hashedBytes=input;\n      digest.update(hashedBytes,0,hashedBytes.length);\n      return hashedBytes;\n    }\n catch (    NoSuchAlgorithmException e) {\n      Log.e(TAG,\"problem hashing \\\"\" + input + \"\\\" \"+ e.getMessage(),e);\n    }\n  }\n else {\n    Log.w(TAG,\"hash called with null input byte[]\");\n  }\n  return null;\n}\n", "    protected Dictionary getHeaderFields(URL targetURL) {\n        Hashtable result = (Hashtable) _headers.clone();\n        result.put(\"User-Agent\", getClientProperties().getUserAgent());\n        if (getClientProperties().isAcceptGzip())\n            result", "public boolean isRepost(long itemId){\n  return Arrays.binarySearch(repostCache.get(),itemId) >= 0;\n}\n", "    private void setKernelContext() {\n        InitialRequestContext irc = new InitialRequestContext\n            (m_req, new DummyServletContext());\n\n        UserContext uc = null;\n        try {\n            uc = new UserContext(m_req, m_res);\n        } catch (RedirectException re) {\n            System.out.println(re.getMessage());\n            re.printStackTrace();\n        }\n        SessionContext sc = uc.getSessionContext();\n\n        KernelRequestContext krc =\n            new KernelRequestContext(irc, sc, uc);\n        DispatcherHelper.setRequestContext(m_req, krc);\n    }\n", "public SelectFileSynchronizer ( final IDebugger debugger , final ListenerProvider < IDebugEventListener > listeners ) { super ( debugger , listeners ) ; }", "public Builder rotate ( float degrees , float pivotX , float pivotY ) { rotationDegrees = degrees ; rotationPivotX = pivotX ; rotationPivotY = pivotY ; hasRotationPivot = BOOL_ ; return this ; }", "public void registerJsonBeanProcessor( Class target, JsonBeanProcessor jsonBeanProcessor ) {\n      if( target != null && jsonBeanProcessor != null ) {\n         beanProcessorMap.put( target, jsonBeanProcessor );\n      }\n   }", "private void tryOptimizeConditionalAfterAssign(Node n) {\n    Node next = n.getNext();\n\n    // Look for patterns like the following and replace the if-condition with\n    // a constant value so it can later be folded:\n    //   var a = /a/;\n    //   if (a) {foo(a)}\n    // or\n    //   a = 0;\n    //   a ? foo(a) : c;\n    // or\n    //   a = 0;\n    //   a || foo(a);\n    // or\n    //   a = 0;\n    //   a && foo(a)\n    //\n    // TODO(johnlenz): This would be better handled by control-flow sensitive\n    // constant propagation. As the other case that I want to handle is:\n    //   i=0; for(;i<0;i++){}\n    // as right now nothing facilitates removing a loop like that.\n    // This is here simply to remove the cruft left behind goog.userAgent and\n    // similar cases.\n\n    if (isSimpleAssignment(n) && isConditionalStatement(next)) {\n      Node lhsAssign = getSimpleAssignmentName(n);\n\n      Node condition = getConditionalStatementCondition(next);\n      if (lhsAssign.isName() && condition.isName()\n          && lhsAssign.getString().equals(condition.getString())) {\n        Node rhsAssign = getSimpleAssignmentValue(n);\n        TernaryValue value = NodeUtil.getImpureBooleanValue(rhsAssign);\n        if (value != TernaryValue.UNKNOWN) {\n          Node replacementConditionNode =\n              NodeUtil.booleanNode(value.toBoolean(true));\n          condition.replaceWith(replacementConditionNode);\n          reportChangeToEnclosingScope(replacementConditionNode);\n        }\n      }\n    }\n  }", "private void addCurrentName ( FormalParamNode node , String name , Renaming rename ) { int i = NUM_ ; while ( ( i < rename . identifiers . size ( ) ) && ( rename . identifiers . elementAt ( i ) != node ) ) { i ++ ; } if ( i < rename . identifiers . size (", "\tpublic Object getObject(String in_Object) throws Exception {\n\t\tif (m_Objects.containsKey(in_Object)) {\n\t\t\treturn (Object) m_Objects.get(in_Object);\n\t\t}\n\n\t\tthrow new Exception(\"Object not in object diagram.\");\n\t}\n", "int count ( Object template ) throws DataAccessException ;", "public INDArray[] output(boolean train, MemoryWorkspace outputWorkspace, INDArray... input) {\n        return output(train, input, inputMaskArrays, labelMaskArrays, outputWorkspace);\n    }", "    public void _readLong() {\n        try {\n            oStream.writeLong(writeLong);\n        } catch (com.sun.star.io.IOException e) {\n            e.printStackTrace(log);\n            throw new StatusException(\"Can't write data to the stream\", e);\n        }\n        boolean res = true ;\n        int readElem;\n        try {\n            readElem = oObj.readLong() ;\n            res = (readElem == writeLong);\n\n            if (!res)\n                log.println(\"Must be read \" +\n                    writeLong +\n                    \" but was read \" + readElem) ;\n        } catch( com.sun.star.io.IOException e ) {\n            log.println(\"Couldn't read Long from stream\");\n            e.printStackTrace(log);\n            res = false;\n        }\n        tRes.tested(\"readLong()\", res);\n    }\n", "private void tryConnect(InetSocketAddress dest,int timeout) throws IOException {\n  if (isConnected()) {\n    disconnect();\n  }\n  server=doConnect(dest,timeout);\n  try {\n    out=new PrintStream(new BufferedOutputStream(server.getOutputStream()),true,encoding);\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new InternalError(encoding + \"encoding not found\",e);\n  }\n  in=new BufferedInputStream(server.getInputStream());\n}\n", "public IndexResponse sendDataWithObjectMapper(Object sourceObject,\n            String index, String type, String id) {\n        return sendData(\n                JMElasticsearchUtil.buildSourceByJsonMapper(sourceObject),\n                index, type, id);\n    }", "    public ChoiceElement leastFrequentElement(Collection col) {\n        if (null == col) {\n            throw new IllegalArgumentException(\"Collection is null\");\n        }\n\n        if (col.isEmpty()) {\n            return null;\n        }\n        long[] amounts = frequency(col);\n        long min = amounts[0];\n        int position = 0;\n        for (int i = 0; i < amounts.length; i++) {\n            if (amounts[i] < min) {\n                min = amounts[i];\n            }\n        }\n        for (int i = 0; i < amounts.length; i++) {\n            if (amounts[i] == min) {\n                position = i;\n                break;\n            }\n        }\n        NonCardinalQuestion question = (NonCardinalQuestion) ( (MultiAnswer) col.iterator().next()).\n            getQuestion();\n        return (ChoiceElement) (question.getChoices().toArray())[position];\n    }\n", "    public String toSaveGameString() {\n        if (STARTING_YEAR + turn - 1 < SEASON_YEAR) {\n            return Integer.toString(STARTING_YEAR + turn - 1);\n        }\n\n        int c = turn - (SEASON_YEAR - STARTING_YEAR - 1);\n        String result = Intege", "public final synchronized void queueAnalyzeRequest(SearchRequest sr){\n  killOldEngine(sr.engine);\n  stopSearch();\n  ArrayList<Move> moves=movesToSearch(sr);\n  if (moves.size() == 0)   return;\n  searchRequest=sr;\n  handleQueue();\n}\n", "public static String dump(final DeviceDescriptor descriptor,final String manufacturer,final String product,final String serial){\n  return String.format(\"Device Descriptor:%n\" + \"  bLength %18d%n\" + \"  bDescriptorType %10d%n\"+ \"  bcdUSB %19s%n\"+ \"  bDeviceClass %13d %s%n\"+ \"  bDeviceSubClass %10d%n\"+ \"  bDeviceProtocol %10d%n\"+ \"  bMaxPacketSize0 %10d%n\"+ \"  idVendor %17s%n\"+ \"  idProduct %16s%n\"+ \"  bcdDevice %16s%n\"+ \"  iManufacturer %12d%s%n\"+ \"  iProduct %17d%s%n\"+ \"  iSerial %18d%s%n\"+ \"  bNumConfigurations %7d%n\",descriptor.bLength(),descriptor.bDescriptorType(),decodeBCD(descriptor.bcdUSB()),descriptor.bDeviceClass() & 0xff,getUSBClassName(descriptor.bDeviceClass()),descriptor.bDeviceSubClass() & 0xff,descriptor.bDeviceProtocol() & 0xff,descriptor.bMaxPacketSize0() & 0xff,String.format(\"0x%04x\",descriptor.idVendor() & 0xffff),String.format(\"0x%04x\",descriptor.idProduct() & 0xffff),decodeBCD(descriptor.bcdDevice()),descriptor.iManufacturer() & 0xff,(manufacturer == null) ? \"\" : (\" \" + manufacturer),descriptor.iProduct() & 0xff,(product == null) ? \"\" : (\" \" + product),descriptor.iSerialNumber() & 0xff,(serial == null) ? \"\" : (\" \" + serial),descriptor.bNumConfigurations() & 0xff);\n}\n", "public void sendPacketToAllInDimension ( IPacket packet , int dimension ) { checkClassAndSync ( packet . getClass ( ) ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . DIMENSION ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGETARGS ) . set ( dimension ) ; serverOutboundChannel . writeOutbound ( packet ) ; isCurrentlySendingSemaphor = BOOL_ ; }", "public void paintMenuBorder ( SynthContext context , Graphics g , int x , int y , int w , int h ) { paintBorder ( context , g , x , y , w , h , null ) ; }", "    public Object getBean() {\n        if (isPrimitive || isString)\n            if (bean==null)\n                return null;\n            else {\n                if (getActualClass().getName().equals(\"boolean\"))\n                    return PropertyItem.getStringAsPropertyValue((String)bool.getSelectedValue(), getActualClass());\n                else\n                    return PropertyItem.getStringAsPropertyValue(text.getText(), getActualClass());\n            }\n        else if (Enum.class.isAssignableFrom(getActualClass()))\n            return enumPicker.getSelectedFieldValue();\n        else if (java.awt.Color.class.isAssignableFrom(getActualClass()))\n            return color.getColor();\n        else if (propertyEditor != null)\n            return propertyEditor.getValue();\n        else\n            return bean;\n    }\n", "Item newNameTypeItem ( final String name , final String desc ) { key2 . set ( NAME_TYPE , name , desc , null ) ; Item result = get ( key2 ) ; if ( result == null ) { put122 ( NAME_TYPE , newUTF8 ( name ) , newUTF8 ( desc ) ) ; result = new Item ( index ++ , key2 ) ; put ( result ) ; } return result ; }", "\tprotected void decFile() {\n\t\t_fileCount--;\n\t\tif (_fileCount < 0) {\n\t\t\tJOptionPane.showMessageDialog(this, \"Moving to end of this file.\");\n\t\t\t_fileCount = _files.size() - 1;\n\t\t}\n\n\t\t_TUs = selectTU((Node)_files.get(_fileCount));\n\t\tsetFileInfo((Element)_files.get(_fileCount));\n\t\tsetLangInfo((Element)_files.get(_fileCount));\n\t}\n", "public double angleTo(Vector2D op2){\n  final double result=Math.atan2(op2.getY(),op2.getX()) - Math.atan2(this.y,this.x);\n  return result < 0 ? result + 2 * Math.PI : result;\n}\n", "public final void notifyHeaderItemChanged ( int position ) { if ( position < NUM_ || position >= headerItemCount ) { throw new IndexOutOfBoundsException ( STR_ + position + STR_ + ( headerItemCount - NUM_ ) + STR_ ) ; } notifyItemChanged ( position ) ; }", "public boolean refreshObjectState(boolean keepOldState){\n  boolean changeDetected=false;\n  Object[] args=null;\n  if (keepOldState) {\n    oldObjectState.putAll(objectState);\n  }\n  for (  Map.Entry<String,Method> gettorMethodEntry : getterMethodMap.entrySet", "public synchronized final void setResponse(RiakMessage rawResponse)\n    {\n        stateCheck(State.CREATED, State.WRITTEN, State.RETRY);\n        U decodedMessage = decode(rawResponse);\n\n        processMessage(decodedMessage);\n\n        exception = null;\n        if (done(decodedMessage))\n        {\n            logger.debug(\"Setting to Cleanup Wait State\");\n            remainingTries--;\n            if (retrier != null)\n            {\n                retrier.operationComplete(this, remainingTries);\n            }\n            state = State.CLEANUP_WAIT;\n        }\n    }", "protected void doUpdateUser(User user) throws UsersRepositoryException {\n  Connection conn=null;\n  PreparedStatement updateUserStatement=null;\n  try {\n    conn=openConnection();\n    updateUserStatement=conn.prepareStatement(m_updateUserSql);\n    setUserForUpdateStatement(user,updateUserStatement);\n    updateUserStatement.execute();\n  }\n catch (  SQLException sqlExc) {\n    sqlExc.printStackTrace();\n    throw new UsersRepositoryException(\"Error accessing database\",sqlExc);\n  }\n finally {\n    theJDBCUtil.closeJDBCStatement(updateUserStatement);\n    theJDBCUtil.closeJDBCConnection(conn);\n  }\n}\n", "public static String writeInputStreamToString(InputStream is){\n  ByteArrayOutputStream result=new ByteArrayOutputStream();\n  byte[] buffer=new byte[1024];\n  int length;\n  try {\n    while ((length=is.read(buffer)) != -1) {\n      result.write(buffer,0,lengt", "public static ChromPos getChromosomePosForCDScoordinate(int cdsNucleotidePosition, GeneChromosomePosition chromPos) {\n\n\t\tlogger.debug(\" ? Checking chromosome position for CDS position \" + cdsNucleotidePosition);\n\n\t\tList<Integer> exonStarts = chromPos.getE", "private DiffTool ( ) { }", "protected int makePressColor ( ) { int r = ( this . backgroundColor > > NUM_ ) & NUM_ ; int g = ( this . backgroundColor > > NUM_ ) & NUM_ ; int b = ( this . backgroundColor > > NUM_ ) & NUM_ ; return Color . argb ( NUM_ , r , g , b ) ; }", "public void removeHex(Coords coords){\n  coordinates.remove(coords);\n  currentCF.remove(coords);\n  phaseCF.remove(coords);\n  collapsedHexes++;\n}\n", "private void unselectNodes ( final List < NaviNode > toUnselect ) { m_graph . removeListener ( m_graphSelectionListener ) ; m_graph . selectNodes ( toUnselect , BOOL_ ) ; m_graph . addListener ( m_graphSelectionListener ) ; }", "public static TimeOfDay hourAndMinuteFromDate ( Date dateTime , TimeZone tz ) { if ( dateTime == null ) return null ; Calendar cal = Calendar . getInstance ( ) ; cal . setTime ( dateTime ) ; if ( tz != null ) cal . setTimeZone ( tz ) ; return new TimeOfDay ( cal . get ( Calendar . HOUR_OF_DAY ) , cal . get ( Calendar . MINUTE ) ) ; }", "public Chunk<Step<T>> getOrCreateChunk()\n   {\n      Node node = childNode.getOrCreate(\"chunk\");\n      Chunk<Step<T>> chunk = new ChunkImpl<Step<T>>(this, \"chunk\", childNode, node);\n      return chunk;\n   }", "public DescribePlayerSessionsResult withPlayerSessions(PlayerSession... playerSessions) {\n        if (this.playerSessions == null) {\n            setPlayerSessions(new java.util.ArrayList<PlayerSession>(playerSessions.length));\n        }\n        for (PlayerSession ele : playerSessions) {\n            this.playerSessions.add(ele);\n        }\n        return this;\n    }", "\tpublic void load(ResourceLocator rl, String language) {\n\t\tGFXLoader.loadResources(this, rl, language);\n\t}\n", "public boolean hasNext(){\n  try {\nswitch (modus) {\ncase INIT:\n      return queryArticle();\ncase ITERATE_WITH_MAPPING:\n    if (chronoIterator.hasNext()) {\n      return true;\n    }\n  reset();\nif (resultArticles.next()) {\n  this.currentArticleID=resultArticles.getInt(1);\n  return (this.lastArticleID == -1) || (this.currentArticleID <= this.lastArticleID);\n}\nresultArticles.close();\nreturn queryArticle();\ncase ITERATE_WITHOUT_MAPPING:\nif (revisionIterator.hasNext()) {\nreturn true;\n}\nreset();\nif (resultArticles.next()) {\nthis.currentArticleID=resultArticles.getInt(1);\nreturn (this.lastArticleID == -1) || (this.currentArticleID <= this.lastArticleID);\n}\nresultArticles.close();\nreturn queryArticle();\ndefault :\nthrow new RuntimeException(\"Illegal mode\");\n}\n}\n catch (SQLException e) {\nthrow new RuntimeException(e);\n}\n}\n", "public Resource toResource(Config config, Element el, String attributeName) {\n\tString attributeValue = el.getAttribute(attributeName);\n\tif (attributeValue == null || attributeValue.trim().length() == 0) return null;\n\treturn config.getResource(attributeValue);\n    }", "    public void setAxisService(AxisService axisService) throws AxisFault {\n\n        if (axisService == null) {\n            // AxisFault?\n            throw new IllegalArgumentException(\"AxisService is null\");\n        }\n\n        synchronized(this.axisConfig) {\n            axisConfig.removeService(this.axisService.getName());\n            this.axisService = axisService;\n\n            axisService.setClientSide(true);\n            axisConfig.addService(axisService);\n        }\n        AxisServiceGroup axisServiceGroup = axisService.getAxisServiceGroup();\n        ServiceGroupContext serviceGroupContext =\n                configContext.createServiceGroupContext(axisServiceGroup);\n        this.serviceContext = serviceGroupContext.getServiceContext(axisService);\n    }\n", "private Set<AnnotationMirror> findSmallestTypes(Set<AnnotationMirror> inset){\n  Set<AnnotationMirror> outset=AnnotationUtils.createAnnotationSet();\n  outset.addAll(inset);\n  for (  AnnotationMirror a1 : inset) {\n    Iterator<AnnotationMirror> outit=outset.iterator();\n    while (outit.hasNext()) {\n      AnnotationMirror a2=outit.next();\n      if (a1 != a2 && isSubtype(a1,a2)) {\n        outit.remove();\n      }\n    }\n  }\n  return outset;\n}\n", "public MindMapPrinter ( PrintStream out , String [ ] tokenNames ) { this . tokenNames = tokenNames ; this . out = out ; }", "public boolean isExpired ( ) { return this . ttl < System . currentTimeMillis ( ) ; }", "public void requestSecondsUntilPasswordExpirationWarning(){\n  operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_PASSWORD_EXPIRATION_WARNING);\n}\n", "    public Date getEnd(Date ed) {\n\tif (to != null && ed != null) {\n\t    if (ed.after(to))\n\t\treturn to;\n\t}\n\tif (ed != null)\n\t    return ed;\n\treturn to;\n\n\t// if(to == null && ed == null)\n\t// return null;\n\t// if(to != null && ed != null && ed.after(to))\n\t// return to;\n\t// else if(ed != null)\n\t// return ed;\n\t// else\n\t// return to;\n    }\n", "\tpublic boolean exists() {\n\t\tboolean result = false;\n\t\tTerm[] args = new Term[2];\n\t\targs[0] = new Atom(getClassName());\n\t\targs[1] = new Atom(getInstanceID());\n\n\t\t// asseble query\n\t\tQuery query = new Query(\"concept\", args);\n\t\t// elements carrying given class/Id combination exists within the KB\n\t\t// already\n\t\tif (query.hasSolution()) {\n\t\t\tresult = true;\n\t\t\t// no such combination is known yet\n\t\t}\n\t\treturn result;\n\t}\n", "protected void drawValue(Canvas c,String value,float xPos,float yPos){\n  c.drawText(value,xPos,yPos,mValuePaint);\n}\n", "public synchronized boolean remove(Integer i){\n  if (value.remove(i)) {\n    setValue(value);\n    return true;\n  }\n else {\n    return false;\n  }\n}\n", "public void entity ( char [ ] buff , int offset , int length ) throws SAXException ;", "void updateMnemonicBinding(AbstractButton b){\n  int m=b.getMnemonic();\n  if (m != 0) {\n    InputMap map=SwingUtilities.getUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW);\n    if (map == null) {\n      map=new ComponentInputMapUIResource(b);\n      SwingUtilities.replaceUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW,map);\n    }\n    map.clear();\n    map.put(KeyStroke.getKeyStroke(m,BasicLookAndFeel.getFocusAcceleratorKeyMask(),false),\"pressed\");\n    map.put(KeyStroke.getKeyStroke(m,BasicLookAndFeel.getFocusAcceleratorKeyMask(),true),\"released\");\n    map.put(KeyStroke.getKeyStroke(m,0,true),\"released\");\n  }\n else {\n    InputMap map=SwingUtilities.getUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW);\n    if (map != null) {\n      map.clear();\n    }\n  }\n}\n", "public static int pow ( final int k , int e ) throws IllegalArgumentException { if ( e < NUM_ ) { throw MathRuntimeException . createIllegalArgumentException ( STR_ , k , e ) ; } int result = NUM_ ; int k2p = k ; while ( e != NUM_ ) { if ( ( e & NUM_ ) != NUM_ ) { result *= k2p ; } k2p *= k2p ; e = e > > NUM_ ; } return result ; }", "public boolean equals ( Object obj ) { if ( ! ( obj instanceof StunDiscoveryReport ) ) return BOOL_ ; if ( obj == this ) return BOOL_ ; StunDiscoveryReport target = ( StunDiscoveryReport ) obj ; return ( target . getNatType ( ) == getNatType ( ) && ( getP", "\tprotected void write(final Object... content) throws IOException {\n\t\t// convert object array to strings and write them\n\t\tfinal String[] strarr = new String[content.length];\n\t\tint i = 0;\n\t\tfor( final Object o : content ) {\n\t\t\tif( o == null ) {\n\t\t\t\tthrow new NullInputException(\"Object at position \" + i + \" is null\",\n\t\t\t\t\tnew CSVContext(getLineNumber(), i), (Throwable) null);\n\t\t\t}\n\t\t\tstrarr[i++] = o.toString();\n\t\t}\n\t\twrite(strarr);\n\t}\n", "\t\tpublic void lightLED(boolean home, boolean spot, boolean checkRobot, boolean debris, int cleanOrPowerColor, int cleanOrPowerIntensity) {\n\t\t\tif (mode == RoombaMode.UNKNOWN) {\n\t\t\t\tstart();\n\t\t\t\tcontrol();\n\t\t\t} else if (mode.equals(RoombaMode.PASSIVE)) {\n\t\t\t\tsafe();\n\t\t\t}\n\t\t\tgetConnector().write(R_MOTORS);\n\t\t\tgetConnector().write((byte) (\n\t\t\t\t\t(checkRobot?\t8:0) +\n\t\t\t\t\t(home?\t\t\t4:0) +\n\t\t\t\t\t(spot?\t \t\t2:0) +\n\t\t\t\t\t(debris?\t\t1:0)));\n\t\t\tgetConnector().write(cleanOrPowerColor);\n\t\t\tgetConnector().write(cleanOrPowerIntensity);\n\t\t\twait(20);\n\t\t}\n", "public static boolean byteArrayToFile(final byte[] array,final File targetFile,final boolean doAppend){\n  if (array == null || array.length == 0 || !isWritable(targetFile,true)) {\n    Log.e(FileUtils.class,\"byteArrayToFile(): Null parameter or can't make path dirs\");\n    return false;\n  }\n  if (targetFile.exists() && !targetFile.delete())   return false;\n  boolean isSucceed=false;\n  OutputStream outputStream=null;\n  try {\n    outputStream=new FileOutputStream(targetFile,doAppend);\n    outputStream.write(array);\n    isSucceed=true;\n    outputStream.flush();\n  }\n catch (  FileNotFoundException e) {\n    e.printStackTrace();\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n  }\n finally {\n    if (outputStream != null)     try {\n      sync(outputStream);\n      outputStream.close();\n    }\n catch (    IOException e) {\n    }\n  }\n  return isSucceed;\n}\n", "public Object invoke(ObjectName name,String operationName,Object params[],String signature[]) throws InstanceNotFoundException, MBeanException, ReflectionException {\n  return mbsInterceptor.invoke(cloneObjectName(name),operationName,params,signature);\n}\n", "    static public FlobView getView(ZZCell app) {\n\tZZCell vc = ZZDefaultSpace.findInheritableParam(app.s(\"d.1\"), \"View\");\n\tif(vc != null) vc = vc.s(\"d.1\");\n\tif(vc == null)\n\t    throw new ZZError(\"No view found for applitude \"+app);\n\tZOb zob = ZZDefaultSpace.readZOb(vc);\n\tif(zob != null && zob instanceof FlobView) {\n\t    return (FlobView)zob;\n\t} else {\n\t    ZZLogger.log(\"ApplitudeMgr.getView: invalid type: \"+zob);\n\t    return new NullView();\n\t}\n    }\n", "public static MeanVariance[] newArray(int dimensionality) {\n    MeanVariance[] arr = new MeanVariance[dimensionality];\n    for(int i = 0; i < dimensionality; i++) {\n      arr[i] = new MeanVariance();\n    }\n    return arr;\n  }", "public CBookmark ( final IAddress address , final String description ) { m_address = Preconditions . checkNotNull ( address , STR_ ) ; m_description = Preconditions . checkNotNull ( description , STR_ ) ; }", "public static String consistentToString(BigDecimal decimal){\n  if (decimal == null) {\n    return null;\n  }\n  if (toPlainStringMethod != null) {\n    try {\n      return (String)toPlainStringMethod.invoke(decimal,(Object[])null);\n    }\n catch (    InvocationTargetException invokeEx) {\n    }\ncatch (    IllegalAccessException accessEx) {\n    }\n  }\n  return decimal.toString();\n}\n", "public String getSubSiteRoot(CmsObject cms, String rootPath) {\n\n        CmsADEConfigData configData = lookupConfiguration(cms, rootPath);\n        String basePath = configData.getBasePath();\n        String siteRoot = OpenCms.getSiteManager().getSiteRoot(rootPath);\n        if (siteRoot == null) {\n            siteRoot = \"\";\n        }\n        if ((basePath == null) || !basePath.startsWith(siteRoot)) {\n            // the subsite root should always be below the site root\n            return siteRoot;\n        } else {\n            return basePath;\n        }\n    }", "MutableDirectedGraph < INaviViewNode , INaviEdge > loadView ( INaviView view ) throws CouldntLoadDataException , CPartialLoadException ;", "public void addSubTree(int index,List<Node> children){\n  List<NodeDescriptor> nodeDescriptors=convertTreeNodesHelper(children);\n  roots.addChildren(index,nodeDescriptors);\n  List<Node> nodes=new ArrayList<>();\n  for (  NodeDescriptor child : nodeDescriptors) {\n    nodes.add(child.getNode());\n  }\n  if (!nodes.isEmpty()) {\n    fireEvent(new StoreAddEvent(index,nodes));\n  }\n}\n", "@SuppressWarnings(\"unchecked\")\n\tpublic static <T extends Levenshtein> T of(String baseTarget, String compareTarget) {\n\t\treturn (T) new LevenshteinEditDistance(baseTarget).update(compareTarget);\n\t}", "public static PreviewFragment newInstance ( String serialized ) { PreviewFragment fragment = new PreviewFragment ( ) ; Bundle args = new Bundle ( ) ; args . putString ( SERIALIZED , serialized ) ; fragment . setArguments ( args ) ; return fragment ; }", "@Override public boolean equals(Object obj){\n  if (obj == this) {\n    return true;\n  }\n  if (!(obj instanceof LineNeedle)) {\n    return false;\n  }\n  return super.equals(obj);\n}\n", "public static Pattern modifierConv()\n\t{\n\t\tPattern p = new Pattern(EntityReference.class, \"ER\");\n\t\tp.add(erToPE(), \"ER\", \"SPE\");\n\t\tp.add(linkToComplex(), \"SPE\", \"PE\");\n\t\tp.add(participatesInConv(), \"PE\", \"Conversion\");\n\t\treturn p;\n\t}", "    public boolean isModuleVisible(String ID) {\n        ModuleTreeItem item = modulesById.get(ID);\n        if (item != null) {\n            return item.isVisible();\n        } else {\n            return false;\n        }\n    }\n", "public static BlazeGraphEmbedded open(final File file){\n  final String journal=file.getAbsolutePath();\n  final BigdataSailRepository repo=BasicRepositoryProvider.open(journal);\n  final BlazeGraphEmbedded graph=BlazeGraphEmbedded.open(repo);\n  return graph;\n}\n", "\tprotected void addRecurrenceSettingsPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Task_recurrenceSettings_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_Task_recurrenceSettings_feature\", \"_UI_Task_type\"),\n\t\t\t\t TassooPackage.Literals.TASK__RECURRENCE_SETTINGS,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t true,\n\t\t\t\t null,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public void rollback(){\n  checkCommitRollback();\n  currentTransactionName=null;\n  boolean needCommit=false;\n  if (undoLog.size() > 0) {\n    rollbackTo(null,false);\n    needCommit=true;\n  }\n  if (transaction != null) {\n    rollbackTo(null,false);\n    needCommit=true;\n    transaction.commit();\n    transaction=null;\n  }\n  if (locks.size() > 0 || needCommit) {\n    database.commit(this);\n  }\n  cleanTempTables(false);\n  if (autoCommitAtTransactionEnd) {\n    autoCommit=true;\n    autoCommitAtTransactionEnd=false;\n  }\n  endTransaction();\n}\n", "public static byte[] convertJWSConcatenatedToDEREncodedSignature(final byte[] concatenatedSignatureValue) throws IOException {\n  final byte[] r=new byte[33];\n  final byte[] s=new byte[33];\n  System.arraycopy(concatenatedSignatureValue,0,r,1,32);\n  System.arraycopy(concatenatedSignatureValue,32,s,1,32);\n  final BigInteger rBigInteger=new BigInteger(r);\n  final BigInteger sBigInteger=new BigInteger(s);\n  final ByteArrayOutputStream bos=new ByteArrayOutputStream();\n  final DERSequenceGenerator seqGen=new DERSequenceGenerator(bos);\n  seqGen.addObject(new ASN1Integer(rBigInteger.toByteArray()));\n  seqGen.addObject(new ASN1Integer(sBigInteger.toByteArray()));\n  seqGen.close();\n  bos.close();\n  final byte[] derEncodedSignatureValue=bos.toByteArray();\n  return derEncodedSignatureValue;\n}\n", "public static Cookie newCookie(String name,String value){\n  return newCookie(name,value,defAge,null,null);\n}", "    public boolean jsxGet_collapsed() {\n        return (startContainer_ == endContainer_ && startOffset_ == endOffset_);\n    }\n", "    public void removeAllBranches() {\n        this.stages.clear();\n    }\n", "public base_response reboot(boolean warm) throws Exception\n\t{\n\t\treboot resource = new reboot();\n\t\tresource.set_warm(warm);\n\t\tbase_response result = resource.perform_operation(this);\n\t\treturn result;\n\t}", "public final EObject ruleJvmTypeReference() throws RecognitionException {\n        EObject current = null;\n\n        EObject this_JvmParameterizedTypeReference_0 = null;\n\n        EObject this_XFunctionTypeRef_3 = null;\n\n\n\n        \tenterRule();\n\n        try {\n            // InternalXtype.g:81:2: ( ( (this_JvmParameterizedTypeReference_0= ruleJvmParameterizedTypeReference ( ( ( () ruleArrayBrackets ) )=> ( () ruleArrayBrackets ) )* ) | this_XFunctionTypeRef_3= ruleXFunctionTypeRef ) )\n            // InternalXtype.g:82:2: ( (this_JvmParameterizedTypeReference_0= ruleJvmParameterizedTypeReference ( ( ( () ruleArrayBrackets ) )=> ( () ruleArrayBrackets ) )* ) | this_XFunctionTypeRef_3= ruleXFunctionTypeRef )\n            {\n            // InternalXtype.g:82:2: ( (this_JvmParameterizedTypeReference_0= ruleJvmParameterizedTypeReference ( ( ( () ruleArrayBrackets ) )=> ( () ruleArrayBrackets ) )* ) | this_XFunctionTypeRef_3= ruleXFunctionTypeRef )\n            int alt2=2;\n            int LA2_0 = input.LA(1);\n\n            if ( (LA2_0==RULE_ID) ) {\n                alt2=1;\n            }\n            else if ( (LA2_0==12||LA2_0==15) ) {\n                alt2=2;\n            }\n            else {\n                if (state.backtracking>0) {state.failed=true; return current;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 2, 0, input);\n\n                throw nvae;\n            }\n            switch (alt2) {\n                case 1 :\n                    // InternalXtype.g:83:3: (this_JvmParameterizedTypeReference_0= ruleJvmParameterizedTypeReference ( ( ( () ruleArrayBrackets ) )=> ( () ruleArrayBrackets ) )* )\n                    {\n                    // InternalXtype.g:83:3: (this_JvmParameterizedTypeReference_0= ruleJvmParameterizedTypeReference ( ( ( () ruleArrayBrackets ) )=> ( () ruleArrayBrackets ) )* )\n                    // InternalXtype.g:84:4: this_JvmParameterizedTypeReference_0= ruleJvmParameterizedTypeReference ( ( ( () ruleArrayBrackets ) )=> ( () ruleArrayBrackets ) )*\n                    {\n                    if ( state.backtracking==0 ) {\n\n                      \t\t\t\tnewCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getJvmParameterizedTypeReferenceParserRuleCall_0_0());\n                      \t\t\t\n                    }\n                    pushFollow(FOLLOW_3);\n                    this_JvmParameterizedTypeReference_0=ruleJvmParameterizedTypeReference();\n\n                    state._fsp--;\n                    if (state.failed) return current;\n                    if ( state.backtracking==0 ) {\n\n                      \t\t\t\tcurrent = this_JvmParameterizedTypeReference_0;\n                      \t\t\t\tafterParserOrEnumRuleCall();\n                      \t\t\t\n                    }\n                    // InternalXtype.g:92:4: ( ( ( () ruleArrayBrackets ) )=> ( () ruleArrayBrackets ) )*\n                    loop1:\n                    do {\n                        int alt1=2;\n                        int LA1_0 = input.LA(1);\n\n                        if ( (LA1_0==10) && (synpred1_InternalXtype())) {\n                            alt1=1;\n                        }\n\n\n                        switch (alt1) {\n                    \tcase 1 :\n                    \t    // InternalXtype.g:93:5: ( ( () ruleArrayBrackets ) )=> ( () ruleArrayBrackets )\n                    \t    {\n                    \t    // InternalXtype.g:99:5: ( () ruleArrayBrackets )\n                    \t    // InternalXtype.g:100:6: () ruleArrayBrackets\n                    \t    {\n                    \t    // InternalXtype.g:100:6: ()\n                    \t    // InternalXtype.g:101:7: \n                    \t    {\n                    \t    if ( state.backtracking==0 ) {\n\n                    \t      \t\t\t\t\t\t\tcurrent = forceCreateModelElementAndSet(\n                    \t      \t\t\t\t\t\t\t\tgrammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0(),\n                    \t      \t\t\t\t\t\t\t\tcurrent);\n                    \t      \t\t\t\t\t\t\n                    \t    }\n\n                    \t    }\n\n                    \t    if ( state.backtracking==0 ) {\n\n                    \t      \t\t\t\t\t\tnewCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getArrayBracketsParserRuleCall_0_1_0_1());\n                    \t      \t\t\t\t\t\n                    \t    }\n                    \t    pushFollow(FOLLOW_3);\n                    \t    ruleArrayBrackets();\n\n                    \t    state._fsp--;\n                    \t    if (state.failed) return current;\n                    \t    if ( state.backtracking==0 ) {\n\n                    \t      \t\t\t\t\t\tafterParserOrEnumRuleCall();\n                    \t      \t\t\t\t\t\n                    \t    }\n\n                    \t    }\n\n\n                    \t    }\n                    \t    break;\n\n                    \tdefault :\n                    \t    break loop1;\n                        }\n                    } while (true);\n\n\n                    }\n\n\n                    }\n                    break;\n                case 2 :\n                    // InternalXtype.g:118:3: this_XFunctionTypeRef_3= ruleXFunctionTypeRef\n                    {\n                    if ( state.backtracking==0 ) {\n\n                      \t\t\tnewCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getXFunctionTypeRefParserRuleCall_1());\n                      \t\t\n                    }\n                    pushFollow(FOLLOW_2);\n                    this_XFunctionTypeRef_3=ruleXFunctionTypeRef();\n\n                    state._fsp--;\n                    if (state.failed) return current;\n                    if ( state.backtracking==0 ) {\n\n                      \t\t\tcurrent = this_XFunctionTypeRef_3;\n                      \t\t\tafterParserOrEnumRuleCall();\n                      \t\t\n                    }\n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n            if ( state.backtracking==0 ) {\n\n              \tleaveRule();\n\n            }\n        }\n\n            catch (RecognitionException re) {\n                recover(input,re);\n                appendSkippedTokens();\n            }\n        finally {\n        }\n        return current;\n    }", "public void stopPreview ( ) { if ( camera != null && previewing ) { if ( ! useOneShotPreviewCallback ) { camera . setPreviewCallback ( null ) ; } camera . stopPreview ( ) ; previewCallback . setHandler ( null , NUM_ ) ; autoFocusCallback . setHandler ( null , NUM_ ) ; previewing = BOOL_ ; } }", "public List<CharacterIndustryJobsResponse> getCharactersCharacterIdIndustryJobs(Integer characterId,\n            String datasource, String ifNoneMatch, Boolean includeCompleted, String token) throws ApiException {\n        ApiResponse<List<CharacterIndustryJobsResponse>> resp = getCharactersCharacterIdIndustryJobsWithHttpInfo(\n                characterId, datasource, ifNoneMatch, includeCompleted, token);\n        return resp.getData();\n    }", "void continued ( Consumer < First > continuationFirst , Consumer < Second > continuationSecond ) ;", "public static final String getResourceEncoding(CmsObject cms, CmsResource res) {\n\n        String encoding = null;\n        // get the encoding\n        try {\n            encoding = cms.readPropertyObject(res, CmsPropertyDefinition.PROPERTY_CONTENT_ENCODING, true).getValue();\n            if (encoding != null) {\n                encoding = CmsEncoder.lookupEncoding(encoding.trim(), encoding);\n            }\n        } catch (CmsException e) {\n            if (LOG.isInfoEnabled()) {\n                LOG.info(Messages.get().getBundle().key(Messages.ERR_READ_ENCODING_PROP_1, res.getRootPath()), e);\n            }\n        }\n        if (encoding == null) {\n            encoding = OpenCms.getSystemInfo().getDefaultEncoding();\n        }\n        return encoding;\n    }", "public static void dispose ( ) { disposeColors ( ) ; disposeImages ( ) ; disposeFonts ( ) ; disposeCursors ( ) ; }", "public boolean isCached ( String requestUrl , int maxWidth , int maxHeight ) { throwIfNotOnMainThread ( ) ; String cacheKey = getCacheKey ( requestUrl , maxWidth , maxHeight ) ; return mCache . getBitmap ( cacheKey ) != null ; }", "public static void createAllTables ( SQLiteDatabase db , boolean ifNotExists ) { HideImageDao . createTable ( db , ifNotExists ) ; }", "    private void center(Graphics2D g2d, String message, float startY) {\n        float width, msgWidth;\n\n        width = (float) g2d.getClipBounds().getWidth();\n        msgWidth = (float) font.getStringBounds(message,\n                                                g2d.getFontRenderContext()).\n                   getWidth();\n\n        if (width > msgWidth) {\n            g2d.drawString(message, (width - msgWidth) / 2.0f, startY);\n        } else {\n            g2d.drawString(message, 0, startY);\n        }\n    }\n", "private void initComponents() {\n        // JFormDesigner - Component initialization - DO NOT MODIFY  //GEN-BEGIN:initComponents\n        dateTextField = new JTextField();\n        toggleCalendarButton = new JButton();\n\n        //======== this ========\n        setLayout(new FormLayout(\n                \"pref:grow, [3px,pref], [26px,pref]\",\n                \"fill:pref:grow\"));\n\n        //---- dateTextField ----\n        dateTextField.setMargin(new Insets(1, 3, 2, 2));\n        dateTextField.setBorder(new CompoundBorder(\n                new MatteBorder(1, 1, 1, 1, new Color(122, 138, 153)),\n                new EmptyBorder(1, 3, 2, 2)));\n        dateTextField.addFocusListener(new FocusAdapter() {\n            @Override\n            public void focusLost(FocusEvent e) {\n                setTextFieldToValidStateIfNeeded();\n            }\n        });\n        add(dateTextField, CC.xy(1, 1));\n\n        //---- toggleCalendarButton ----\n        toggleCalendarButton.setText(\"...\");\n        toggleCalendarButton.setFocusPainted(false);\n        toggleCalendarButton.setFocusable(false);\n        toggleCalendarButton.addMouseListener(new MouseAdapter() {\n            @Override\n            public void mousePressed(MouseEvent e) {\n                zEventToggleCalendarButtonMousePressed(e);\n            }\n        });\n        add(toggleCalendarButton, CC.xy(3, 1));\n        // JFormDesigner - End of component initialization  //GEN-END:initComponents\n    }", "  public String getLabelText() {\n    if (labelControl != null && !labelControl.isDisposed()) {\n      return labelControl.getText();\n    }\n    return labelText;\n  }\n", "private void noSubObjects(String id) throws ForbiddenException {\n  if (id != null && id.indexOf('/') >= 0) {\n    throw new ForbiddenException(\"Sub-objects are not supported\");\n  }\n}\n", "\tprotected void addForceOutputPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_CodeAnalysisType_forceOutput_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_CodeAnalysisType_forceOutput_feature\", \"_UI_CodeAnalysisType_type\"),\n\t\t\t\t MSBPackage.eINSTANCE.getCodeAnalysisType_ForceOutput(),\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "\tpublic void updateIndex(Repository repository, PersonalFile personalFile) throws LocationAlreadyExistsException, IOException {\n\t\tdeleteFileFromIndex(personalFile.getOwner(), personalFile.getId());\n\t\taddToIndex(repository, personalFile);\n\t}\n", "public SymbolAxis(String label,String[] sv){\n  super(label);\n  this.symbols=Arrays.asList(sv);\n  this.gridBandsVisible=true;\n  this.gridBandPaint=DEFAULT_GRID_BAND_PAINT;\n  this.gridBandAlternatePaint=DEFAULT_GRID_BAND_ALTERNATE_PAINT;\n  setAutoTickUnitSelection(false,false);\n  setAutoRangeStickyZero(false);\n}\n", "public CacheManagerTask downloadAreaAsync(Context ctx, ArrayList<GeoPoint> geoPoints, final int zoomMin, final int zoomMax, final CacheManagerCallback callback) {\n        final CacheManagerTask task = new CacheManagerTask(this, getDownloadingAction(), geoPoints, zoomMin, zoomMax);\n        task.addCallback(callback);\n        task.addCallback(getDownloadingDialog(ctx, task));\n        return execute(task);\n    }", "public static boolean isBlank(String value){\n  return value == null || value.isEmpty();\n}\n", "private void processSkipEntries(){\n  for (Iterator<SkipEntry> i=skipRecords.iterator(); i.hasNext(); ) {\n    SkipEntry skipRecord=i.next();\n    int labelOffset=actionOffsets[skipRecord.skipTarget - startCount];\n    skipRecord.action.skipTarget=getLabel(labelOffset);\n  }\n}\n", "private List<String> updateStatus(List<String> unsentRegIds,Map<String,Result> allResults,MulticastResult multicastResult){\n  List<Result> results=multicastResult.getResults();\n  if (results.size() != unsentRegIds.size()) {\n    throw new RuntimeException(\"Internal error: sizes do not match. \" + \"currentResults: \" + results + \"; unsentRegIds: \"+ unsentRegIds);\n  }\n  List<String> newUnsentRegIds=new ArrayList<String>();\n  for (int i=0; i < unsentRegIds.size(); i++) {\n    String regId=unsentRegIds.get(i);\n    Result result=results.get(i);\n    allResults.put(regId,result);\n    String error=result.getErrorCodeName();\n    if (error != null && (error.equals(Constants.ERROR_UNAVAILABLE) || error.equals(Constants.ERROR_INTERNAL_SERVER_ERROR))) {\n      newUnsentRegIds.add(regId);\n    }\n  }\n  return newUnsentRegIds;\n}\n", "\tpublic Element createElementInDocument(String key) {\n\t\tElement res= null;\n\t\tif (xmlDocument != null){\n\t\t\tres = xmlDocument.createElement(key);\n\t\t}\n\t\treturn res;\n\t}\n", "\tpublic void setSendDate (java.util.Date sendDate) {\n\t\tthis.sendDate = sendDate;\n\t}\n", "public MonetaryFormat codeSeparator(char codeSeparator) {\n        checkArgument(!Character.isDigit(codeSeparator));\n        checkArgument(codeSeparator > 0);\n        if (codeSeparator == this.codeSeparator)\n            return this;\n        else\n            return new MonetaryFormat(negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups,\n                    shift, roundingMode, codes, codeSeparator, codePrefixed);\n    }", "public static < V > boolean isEmpty ( V [ ] sourceArray ) { return ( sourceArray == null || sourceArray . length == NUM_ ) ; }", "void sendSuccessMessage ( int statusCode , Header [ ] headers , byte [ ] responseBody ) ;", "@Override\n    public UnsubscribeFromEventResult unsubscribeFromEvent(UnsubscribeFromEventRequest request) {\n        request = beforeClientExecution(request);\n        return executeUnsubscribeFromEvent(request);\n    }", "public void marshall(S3Resource s3Resource, ProtocolMarshaller protocolMarshaller) {\n\n        if (s3Resource == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(s3Resource.getBucketArn(), BUCKETARN_BINDING);\n            protocolMarshaller.marshall(s3Resource.getKeyRange(), KEYRANGE_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void onRefresh ( final PullToRefreshBase < V > refreshView ) ;", "public ListProcessesParser ( final ClientReader clientReader ) { super ( clientReader , DebugCommandType . RESP_LIST_PROCESSES_SUCCESS ) ; }", "public boolean isIdentity ( ) ;", "public boolean isSp ( ) { return isStackPointer ; }", "    public String getElementTextByXPath(String xpath){\n        assertElementPresentByXPath(xpath);\n    \treturn getTestingEngine().getElementTextByXPath(xpath);\n    }\n", "public GroupList listGroups(final int offset, final int limit) throws UnauthorizedException, GeneralException {\n        return messageBirdService.requestList(GROUPPATH, offset, limit, GroupList.class);\n    }", "public boolean emitTrainingOutput ( ) ;", "public SurefireScalaSensor ( Settings settings , FileSystem fileSystem , SurefireScalaConfiguration configuration , PathResolver pathResolver ) { this . settings = settings ; this . fileSystem = fileSystem ; this . configuration = configuration ; this . p", "public void serviceName_snapshot_PUT(String serviceName, OvhSnapshot body) throws IOException {\n\t\tString qPath = \"/vps/{serviceName}/snapshot\";\n\t\tStringBuilder sb = path(qPath, serviceName);\n\t\texec(qPath, \"PUT\", sb.toString(), body);\n\t}", "public void zoomOut ( ) { m_view . setZoom ( m_view . getZoom ( ) * STANDARD_ZOOM_FACTOR ) ; ZoomHelpers . keepZoomValid ( m_view ) ; m_graph . updateViews ( ) ; }", "public static gslbdomain_stats[] get(nitro_service service) throws Exception{\n\t\tgslbdomain_stats obj = new gslbdomain_stats();\n\t\tgslbdomain_stats[] response = (gslbdomain_stats[])obj.stat_resources(service);\n\t\treturn response;\n\t}", "public lalr_item find(lalr_item itm){\n  return (lalr_item)_all.get(itm);\n}\n", "public Vector3 scale(double d)\n{ return new Vector3(d*v0,d*v1,d*v2); }\n", "    public boolean isChecksumText() {\n        return checksumText;\n    }\n", "public Object[] alignCells(String align,Object[] cells,Object param){\n  if (cells == null) {\n    cells=getSelectionCells();\n  }\n  if (cells != null && cells.length > 1) {\n    if (param == null) {\n      for (int i=0; i < cells.length; i++) {\n        mxGeometry geo=getCellGeometry(cells[i]);\n        if (geo != null && !model.isEdge(cells[i])) {\n          if (param == null) {\n            if (align == null || align.equals(mxConstants.ALIGN_LEFT)) {\n              param=geo.getX();\n            }\n else             if (align.equals(mxConstants.ALIGN_CENTER)) {\n              param=geo.getX() + geo.getWidth() / 2;\n              break;\n            }\n else             if (align.equals(mxConstants.ALIGN_RIGHT)) {\n              param=geo.getX() + geo.getWidth();\n            }\n else             if (align.equals(mxConstants.ALIGN_TOP)) {\n              param=geo.getY();\n            }\n else             if (align.equals(mxConstants.ALIGN_MIDDLE)) {\n              param=geo.getY() + geo.getHeight() / 2;\n              break;\n            }\n else             if (align.equals(mxConstants.ALIGN_BOTTOM)) {\n              param=geo.getY() + geo.getHeight();\n            }\n          }\n else {\n            double tmp=Double.parseDouble(String.valueOf(param));\n            if (align == null || align.equals(mxConstants.ALIGN_LEFT)) {\n              param=Math.min(tmp,geo.getX());\n            }\n else             if (align.equals(mxConstants.ALIGN_RIGHT)) {\n              param=Math.max(tmp,geo.getX() + geo.getWidth());\n            }\n else             if (align.equals(mxConstants.ALIGN_TOP)) {\n              param=Math.min(tmp,geo.getY());\n            }\n else             if (align.equals(mxConstants.ALIGN_BOTTOM)) {\n              param=Math.max(tmp,geo.getY() + geo.getHeight());\n            }\n          }\n        }\n      }\n    }\n    model.beginUpdate();\n    try {\n      double tmp=Double.parseDouble(String.valueOf(param));\n      for (int i=0; i < cells.length; i++) {\n        mxGeometry geo=getCellGeometry(cells[i]);\n        if (geo != null && !model.isEdge(cells[i])) {\n          geo=(mxGeometry)geo.clone();\n          if (align == null || align.equals(mxConstants.ALIGN_LEFT)) {\n            geo.setX(tmp);\n          }\n else           if (align.equals(mxConstants.ALIGN_CENTER)) {\n            geo.setX(tmp - geo.getWidth() / 2);\n          }\n else           if (align.equals(mxConstants.ALIGN_RIGHT)) {\n            geo.setX(tmp - geo.getWidth());\n          }\n else           if (align.equals(mxConstants.ALIGN_TOP)) {\n            geo.setY(tmp);\n          }\n else           if (align.equals(mxConstants.ALIGN_MIDDLE)) {\n            geo.setY(tmp - geo.getHeight() / 2);\n          }\n else           if (align.equals(mxConstants.ALIGN_BOTTOM)) {\n            geo.setY(tmp - geo.getHeight());\n          }\n          model.setGeometry(cells[i],geo);\n          if (isResetEdgesOnMove()) {\n            resetEdges(new Object[]{cells[i]});\n          }\n        }\n      }\n      fireEvent(new mxEventObject(mxEvent.ALIGN_CELLS,\"cells\",cells,\"align\",align));\n    }\n  finally {\n      model.endUpdate();\n    }\n  }\n  return cells;\n}\n", "public void makePickable(GVRSceneObject sceneObject) {\n        try {\n            GVRMeshCollider collider = new GVRMeshCollider(sceneObject.getGVRContext(), false);\n            sceneObject.attachComponent(collider);\n        } catch (Exception e) {\n            // Possible that some objects (X3D panel nodes) are without mesh\n            Log.e(Log.SUBSYSTEM.INPUT, TAG, \"makePickable(): possible that some objects (X3D panel nodes) are without mesh!\");\n        }\n    }", "public void intersection(Set x){\n  Enumeration elements=elements();\n  Object a;\n  while (elements.hasMoreElements()) {\n    a=elements.nextElement();\n    if (!x.in(a))     remove(a);\n  }\n}\n", "public void toData(DataOutput out) throws IOException {\n  DataSerializer.writeString(this.regionPath,out);\n  DataSerializer.writeObject(this.callbackArgument,out);\n  out.writeByte(this.op.ordinal);\n  out.writeBoolean(this.originRemote);\n  InternalDataSeri", "    public void addArgument(String argument) {\n        createArgument().setValue(argument);\n    }\n", "public Map<String, DesignDocument.View> generateViewsFromPersistentType(\n\t\t\tfinal Class<?> persistentType) {\n\t\tAssert.notNull(persistentType, \"persistentType may not be null\");\n\t\tfinal Map<String, DesignDocument.View> views = new HashMap<String, DesignDocument.View>();\n\n\t\tcreateDeclaredViews(views, persistentType);\n\n\t\teachField(persistentType, new Predicate<Field>() {\n\t\t\tpublic boolean apply(Field input) {\n\t\t\t\tif (hasAnnotation(input, DocumentReferences.class)) {\n\t\t\t\t\tgenerateView(views, input);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t\treturn views;\n\t}", "private void cmd_matchTo(){\n  String selection=(String)matchTo.getSelectedItem();\n  xMatchedToBorder.setTitle(selection);\n  xMatchedToScrollPane.repaint();\n  xMatchedToTable.setRowCount(0);\n}\n", "private static void drainStream ( InputStream is ) throws IOException { BufferedInputStream reader = new BufferedInputStream ( is ) ; while ( reader . read ( ) != - NUM_ ) { } }", "public static <T> Multimap<T,IEObjectDescription> index(Iterable<IEObjectDescription> descriptions, Function<IEObjectDescription,T> indexer) {\n\t\tArrayList<IEObjectDescription> list = Lists.newArrayList(descriptions);\n\t\tLinkedHashMultimap<T, IEObjectDescription> multimap = LinkedHashMultimap.create(list.size(),1);\n\t\tfor (IEObjectDescription desc : list) {\n\t\t\tmultimap.put(indexer.apply(desc), desc);\n\t\t}\n\t\treturn multimap;\n\t}", "    protected Composite createComposite(final Composite parentComp, final int numColumns) {\n        final Composite childComp = new Composite(parentComp, 0);\n        final GridLayout childGlyt = new GridLayout();\n        childGlyt.numColumns = numColumns;", "  public int getSelectedFontStyle () throws NoFontStyleSelectedException {\n    return fontStyleList_.getSelectedStyle();\n  }\n", "public static void setSessionTicketKeys(long ctx, SessionTicketKey[] keys) {\n        if (keys == null || keys.length == 0) {\n            throw new IllegalArgumentException(\"Length of the keys should be longer than 0.\");\n        }\n        byte[] binaryKeys = new byte[keys.length * SessionTicketKey.TICKET_KEY_SIZE];\n        for (int i = 0; i < keys.length; i++) {\n            SessionTicketKey key = keys[i];\n            int dstCurPos = SessionTicketKey.TICKET_KEY_SIZE * i;\n            System.arraycopy(key.name, 0, binaryKeys, dstCurPos, SessionTicketKey.NAME_SIZE);\n            dstCurPos += SessionTicketKey.NAME_SIZE;\n            System.arraycopy(key.hmacKey, 0, binaryKeys, dstCurPos, SessionTicketKey.HMAC_KEY_SIZE);\n            dstCurPos += SessionTicketKey.HMAC_KEY_SIZE;\n            System.arraycopy(key.aesKey, 0, binaryKeys, dstCurPos, SessionTicketKey.AES_KEY_SIZE);\n        }\n        setSessionTicketKeys0(ctx, binaryKeys);\n    }", "public CSVReader ( Reader reader , char separator , char quotechar , char escape , int line , boolean strictQuotes , boolean ignoreLeadingWhiteSpace , boolean keepCR ) { this ( reader , line , new CSVParser ( separator , quotechar , escape , strictQuotes ", "protected int makePressColor ( int alpha ) { int r = ( backgroundColor > > NUM_ ) & NUM_ ; int g = ( backgroundColor > > NUM_ ) & NUM_ ; int b = ( backgroundColor > > NUM_ ) & NUM_ ; r = ( r - NUM_ < NUM_ ) ? NUM_ : r - NUM_ ; g = ( g - NUM_ < NUM_ ) ? NUM_ : g - NUM_ ; b = ( b - NUM_ < NUM_ ) ? NUM_ : b - NUM_ ; return Color . argb ( alpha , r , g , b ) ; }", "\tpublic String read() {\n\t\treturn \"BAD READ ATTEMPT!\";\n\t}\n", "\tpublic void paint(OutputStream output, Object object) throws IOException {\n\t\tif (fileByteContents != null) {\n\t\t\toutput.write(fileByteContents);\n\t\t}\n\t}\n", "    private String makeAbsolute(String sysid) {\n\tURL local = null;\n\n\tsysid = fixSlashes(sysid);\n\n\ttry {\n\t    local = new URL(base, sysid);\n\t} catch (MalformedURLException e) {\n\t    debug(1, \"Malformed URL on system identifier\", sysid);\n\t}\n\n\tif (local != null) {\n\t    return local.toString();\n\t} else {\n\t    return sysid;\n\t}\n    }\n", "@VisibleForTesting boolean checkSessionUpgrade(SSOToken ssoToken,AuthIndexType indexType,String indexValue) throws AuthLoginException, SSOException {\n  String value;\n  boolean upgrade=false;\n  if (ssoToken == null) {\n    return true;\n  }\nswitch (indexType", "public Categories(boolean fixed,String defaultScheme,Category... categories){\n  this.fixed=fixed;\n  this.defaultScheme=defaultScheme;\n  if (categories.length != 0) {\n    this.categories=Arrays.asList(categories);\n  }\n}\n", "public void changeState(String jobName) throws MangooSchedulerException {\n        Objects.requireNonNull(this.quartzScheduler, Required.SCHEDULER.toString());\n        \n        try {\n            for (JobKey jobKey : getAllJobKeys()) {\n                if (jobKey.getName().equalsIgnoreCase(jobName)) {\n                    TriggerState triggerState = getTriggerState(jobKey);\n                    if (TriggerState.NORMAL == triggerState) {\n                        this.quartzScheduler.pauseJob(jobKey);                        \n                    } else {\n                        this.quartzScheduler.resumeJob(jobKey);\n                    }\n                }\n            }            \n        } catch (SchedulerException | MangooSchedulerException e) {\n            throw new MangooSchedulerException(e);\n        }\n    }", "void deletedLocalEdgeComment ( INaviEdge edge , IComment comment ) ;", "public static boolean isConsolePresent ( ) { return System . console ( ) != null ; }", "public PDFPassword ( byte [ ] passwordBytes ) { this . passwordBytes = passwordBytes != null ? passwordBytes : new byte [ NUM_ ] ; }", "    public HeadingControl (AbstractPositionDevice pd, int minC, int maxC) {\n        super (1, 0, 0);\n        this.minCommand = minC;\n        this.maxCommand = maxC;\n        this.device     = pd;\n    }\n", "\tpublic InputStream loadDocument(WVTDocumentInfo d) throws Exception {\n\t\tString body = EmailCache.getInstance().getEmailBody(Integer.parseInt(d.getSourceName()));\n\t\treturn new ByteArrayInputStream(body.getBytes());\n\t}\n", "MarshalledWrapper lookup ( Template tmpl ) throws RemoteException ;", "   public WfActivityInternal getAny(WMSessionHandle shandle,String procId, String actId) throws Exception {\n      WfActivityInternal act = get(actId);\n      if (act == null && !allLoaded) {\n         loadAny(shandle,procId, actId);\n         act = get(actId);\n      }\n      return act;\n   }\n", "public void writeLELong(long l) throws IOException {\n  out.write((int)l & 0xFF);\n  out.write((int)(l >>> 8) & 0xFF);\n  out.write((int)(l >>> 16) & 0xFF);\n  out.write((int)(l >>> 24) & 0xFF);\n  out.write((int)(l >>> 32) & 0xFF);\n  out.write((int)(l >>> 40) & 0xFF);\n  out.write((int)(l >>> 48) & 0xFF);\n  out.write((int)(l >>> 56) & 0xFF);\n  written+=8;\n}\n", "protected void addDependency(DependencyKind dk,Node depToAdd){\n  Set<Node> depsByKind=deps.get(dk);\n  if (depsByKind == null) {\n    depsByKind=new LinkedHashSet<Node>();\n    deps.put(dk,depsByKind);\n  }\n  depsByKind.add(depToAdd);\n}\n", "static AdaptationRegistry create(Schema schema,ElementTransform transform){\n  return new AdaptationRegistry(transform.getAdaptations(),unionAttributes(schema,transform),unionElements(schema,transform));\n}\n", "private void createExtendedObject(String realm,String entityName,String location,String role) throws SAML2MetaException, JAXBException, AMConsoleException {\n  SAML2MetaManager samlManager=getSAML2MetaManager();\n  EntityDescriptorElement entityDescriptor=samlManager.getEntityDescriptor(realm,entityName);\n  ObjectFactory objFactory=new ObjectFactory();\n  EntityConfigElement entityConfigElement=objFactory.createEntityConfigElement();\n  entityConfigElement.setEntityID(entityName);\n  if (location.equals(\"remote\")) {\n    entityConfigElement.setHosted(false);\n  }\n else {\n    entityConfigElement.setHosted(true);\n  }\n  List configList=entityConfigElement.getIDPSSOConfigOrSPSSOConfigOrAuthnAuthorityConfig();\n  BaseConfigType baseConfigIDP=null;\n  BaseConfigType baseConfigSP=null;\n  BaseConfigType baseConfigAuth=null;\n  AttributeAuthorityDescriptorElement attrauthDescriptor=samlManager.getAttributeAuthorityDescriptor(realm,entityName);\n  AuthnAuthorityDescriptorElement authnauthDescriptor=samlManager.getAuthnAuthorityDescriptor(realm,entityName);\n  AttributeQueryDescriptorElement attrQueryDescriptor=samlManager.getAttributeQueryDescriptor(realm,entityName);\n  IDPSSODescriptorElement idpssoDesc=samlManager.getIDPSSODescriptor(realm,entityName);\n  SPSSODescriptorElement spssoDesc=samlManager.getSPSSODescriptor(realm,entityName);\n  XACMLAuthzDecisionQueryDescriptorElement xacmlAuthzDescriptor=samlManager.getPolicyEnforcementPointDescriptor(realm,entityName);\n  XACMLPDPDescriptorElement xacmlPDPDescriptor=samlManager.getPolicyDecisionPointDescriptor(realm,entityName);\n  if (isDualRole(entityDescriptor)) {\n    baseConfigIDP=objFactory.createIDPSSOConfigElement();\n    baseConfigSP=objFactory.createSPSSOConfigElement();\n    baseConfigIDP=addAttributeType(extendedMetaIdpMap,baseConfigIDP);\n    baseConfigSP=addAttributeType(extendedMetaSpMap,baseConfigSP);\n    configList.add(baseConfigIDP);\n    configList.add(baseConfigSP);\n  }\n else   if (role.equals(EntityModel.IDENTITY_PROVIDER) || (idpssoDesc != null)) {\n    baseConfigIDP=objFactory.createIDPSSOConfigElement();\n    baseConfigIDP=addAttributeType(extendedMetaIdpMap,baseConfigIDP);\n    configList.add(baseConfigIDP);\n  }\n else   if (role.equals(EntityModel.SERVICE_PROVIDER) || (spssoDesc != null)) {\n    baseConfigSP=objFactory.createSPSSOConfigElement();\n    baseConfigSP=addAttributeType(extendedMetaSpMap,baseConfigSP);\n    configList.add(baseConfigSP);\n  }\n  if (role.equals(EntityModel.SAML_ATTRAUTHORITY) || (attrauthDescriptor != null)) {\n    baseConfigAuth=objFactory.createAttributeAuthorityConfigElement();\n    baseConfigAuth=addAttributeType(extAttrAuthMap,baseConfigAuth);\n    configList.add(baseConfigAuth);\n  }\n  if (role.equals(EntityModel.SAML_AUTHNAUTHORITY) || (authnauthDescriptor != null)) {\n    baseConfigAuth=objFactory.createAuthnAuthorityConfigElement();\n    baseConfigAuth=addAttributeType(extAuthnAuthMap,baseConfigAuth);\n    configList.add(baseConfigAuth);\n  }\n  if (role.equals(EntityModel.SAML_ATTRQUERY) || (attrQueryDescriptor != null)) {\n    baseConfigAuth=objFactory.createAttributeQueryConfigElement();\n    baseConfigAuth=addAttributeType(extattrQueryMap,baseConfigAuth);\n    configList.add(baseConfigAuth);\n  }\n  if (role.equals(EntityModel.POLICY_DECISION_POINT_DESCRIPTOR) || (xacmlPDPDescriptor != null)) {\n    baseConfigAuth=objFactory.createXACMLPDPConfigElement();\n    baseConfigAuth=addAttributeType(xacmlPDPExtendedMeta,baseConfigAuth);\n    configList.add(baseConfigAuth);\n  }\n  if (role.equals(EntityModel.POLICY_ENFORCEMENT_POINT_DESCRIPTOR) || (xacmlAuthzDescriptor != null)) {\n    baseConfigAuth=objFactory.createXACMLAuthzDecisionQueryConfigElement();\n    baseConfigAuth=addAttributeType(xacmlPEPExtendedMeta,baseConfigAuth);\n    configList.add(baseConfigAuth);\n  }\n  samlManager.setEntityConfig(realm,entityConfigElement);\n}\n", "public final void reset()\n    {\n        for (int i = 0; i < permutationIndices.length; i++)\n        {\n            permutationIndices[i] = i;\n        }\n        remainingPermutations = totalPermutations;\n    }", "protected void checkRegisteredDataUsingReservedWord(ActionRuntime runtime, WebContext context, String varKey) {\n        if (isSuppressRegisteredDataUsingReservedWordCheck()) {\n            return;\n        }\n        if (context.getVariableNames().contains(varKey)) {\n            throwThymeleafRegisteredDataUsingReservedWordException(runtime, context, varKey);\n        }\n    }", "    public boolean copyFromDb(Sqlrs res, int iColumn){\n        try {\n            iValue = res.rs.getInt(iColumn);\n            bAvail = true;\n        } catch (Exception e) {\n            reset();\n        }\n        return avail();\n    }\n", "private void addOptionalSecurityLibs ( StringBuilder classpath ) { addLibs ( classpath , Locator . getLibOptionalSecurity ( ) ) ; }", "@Pure\n\tpublic void toPath2D(Path2d path) {\n\t\t// loop on parts and build the path to draw\n\t\tfor (final BusItinerary iti : busItineraries()) {\n\t\t\titi.toPath2D(path);\n\t\t}\n\t}", "public Filter addAttribute(String attribute,Object entity){\n  put(attribute,entity);\n  return (this);\n}", "private Path<?> shorten(Path<?> path, boolean outer) {\n        if (aliases.containsKey(path)) {\n            return aliases.get(path);\n        } else if (path.getMetadata().isRoot()) {\n            return path;\n        } else if (path.getMetadata().getParent().getMetadata().isRoot() && outer) {\n            return path;\n        } else {\n            Class<?> type = JPAQueryMixin.getElementTypeOrType(path);\n            Path<?> parent = shorten(path.getMetadata().getParent(), false);\n            Path oldPath = ExpressionUtils.path(path.getType(),\n                    new PathMetadata(parent, path.getMetadata().getElement(), path.getMetadata().getPathType()));\n            if (oldPath.getMetadata().getParent().getMetadata().isRoot() && outer) {\n                return oldPath;\n            } else {\n                Path newPath = ExpressionUtils.path(type, ExpressionUtils.createRootVariable(oldPath));\n                aliases.put(path, newPath);\n                metadata.addJoin(JoinType.LEFTJOIN, ExpressionUtils.as(oldPath, newPath));\n                return newPath;\n            }\n        }\n    }", "@GET\n\t@Path(\"/{keyspace}/{columnFamily}/{key}\")\n\tpublic JSONObject getRow(@PathParam(\"keyspace\") String keyspace, @PathParam(\"columnFamily\") String columnFamily,\n\t\t\t@PathParam(\"key\") String key, @HeaderParam(CONSISTENCY_LEVEL_HEADER) String consistencyLevel)\n\t\t\tthrows Exception {\n\t\tif (logger.isDebugEnabled())\n\t\t\tlogger.debug(\"Getting row [\" + keyspace + \"]:[\" + columnFamily + \"]:[\" + key + \"]\");\n\n\t\treturn getCassandraStorage().getSlice(keyspace, columnFamily, key,\n\t\t\t\tconfig.getConsistencyLevel(consistencyLevel));\n\t}", "    public boolean isActionRootRemove() {\n        return actionRootRemove;\n    }\n", "    public RoundedBox clone() {\n        return new RoundedBox(getName() + \"_clone\", (Vector3f) extent.clone(),\n                (Vector3f) border.clone(), (Vector3f) slope.clone());\n    }\n", "public GroovyTypeCheckingExtensionSupport ( final StaticTypeCheckingVisitor typeCheckingVisitor , final String scriptPath , final CompilationUnit compilationUnit ) { super ( typeCheckingVisitor ) ; this . scriptPath = scriptPath ; this . compilationUnit =", "\tpublic String getName() {\n\t\tif ( myName != null ) return myName;\t\t\n\t\tif ( thing() != null ) return thing().id();\n\t\treturn null;\n\t}\n", "public JsStatement setDate(DateOption dateOption)\n\t{\n\t\treturn new JsQuery(this).$().chain(\"datepicker\", \"'setDate'\",\n\t\t\tdateOption != null ? dateOption.getJavascriptOption() : null);\n\t}", "    public String runQueryGetDBDate(){\n        try{\n            String dbdate   = \"\";\n            ResultSet rs    = runSelectQuerie( \"select now()\" );\n            while(rs.next()){\n                dbdate  =  rs.getString( 1 );\n            }\n            return dbdate;\n        } catch( Exception e ) {\n            syslog.log(this.getClass().toString() + \"::\" + Thread.currentThread().getStackTrace()[1].getMethodName() + \"(line \" + Thread.currentThread().getStackTrace()[1].getLineNumber() + \") Exception\", \"error\");\n            syslog.log( e.getMessage(), \"error\" );\n            //System.out.println(\"Exception: \" + e.getMessage() );\n            //e.printStackTrace();\n            return \"\";\n        }\n    }\n", "private void createKeyValueAssignment ( String line , int lineNr ) { String [ ] split = line . split ( STR_ ) ; if ( split . length == NUM_ ) { split = new String [ ] { split [ NUM_ ] , STR_ } ; } if ( split [ NUM_ ] . matches ( PlotConstants . KEY_INT_GR", "    public void create(String name) throws IOException, BlitzException {\n        BlitzServerResponse response;\n        \n        socket.println(\"FDEF \" + name);\n        response = socket.readLine();\n        \n        switch (response.getCode()) {\n            case 0:\n                if (folders == null) {\n                    synchronize();\n                } else {\n                    folders.put(new Integer(Integer.parseInt(response.getData())), name);\t// Add folder to our local cache.\n                }\n                    \n                return;\n                \n            default:\n                throw new BlitzException(response.getCode(), response.getData());\n        }\n    }\n", "public void time(Runnable event) {\n        long startTime = this.clock.getTick();\n        try {\n            event.run();\n        } finally {\n            update(this.clock.getTick() - startTime);\n        }\n    }", "public static PactDslRootValue booleanType(Boolean example) {\n    PactDslRootValue value = new PactDslRootValue();\n    value.setValue(example);\n    value.setMatcher(TypeMatcher.INSTANCE);\n    return value;\n  }", "protected void createApacheRewriteConfigFile(String cdnDestDirPath,\n\t\t\tString appRootDir, String jsServletMapping,\n\t\t\tString cssServletMapping, String imgServletMapping)\n\t\t\tthrows IOException {\n\n\t\tBufferedReader templateFileReader = null;\n\t\tFileWriter fil", "public abstract void snapshot ( OutputStream out ) throws Exception ;", "@SuppressWarnings(\"unchecked\") protected static <T>T invoke(Method method,Object object,Object... parameters) throws IOException, RuntimeException {\n  try {\n    return (T)method.invoke(object,parameters);\n  }\n catch (  IllegalArgumentException e) {\n    throw new RuntimeException(e);\n  }\ncatch (  IllegalAccessException e) {\n    throw new RuntimeException(e);\n  }\ncatch (  InvocationTargetException e) {\n    if (e.getTargetException() instanceof IOException) {\n      throw (IOException)e.getTargetException();\n    }\n else {\n      throw new RuntimeException(e);\n    }\n  }\n}\n", "private void callBindOrRebind(NameComponent[] pth,Name name,java.lang.Object obj,boolean rebind) throws NamingException {\n  if (_nc == null)   throw new ConfigurationException(\"Context does not have a corresponding NamingContext\");\n  try {\n    obj=NamingManager.getStateToBind(obj,name,this,_env);\n    if (obj instanceof CNCtx) {\n      obj=((CNCtx)obj)._nc;\n    }\n    if (obj instanceof org.omg.CosNaming.NamingContext) {\n      NamingContext nobj=NamingContextHelper.narrow((org.omg.CORBA.Object)obj);\n      if (rebind)       _nc.rebind_context(pth,nobj);\n else       _nc.bind_context(pth,nobj);\n    }\n else     if (obj instanceof org.omg.CORBA.Object) {\n      if (rebind)       _nc.rebind(pth,(org.omg.CORBA.Object)obj);\n else       _nc.bind(pth,(org.omg.CORBA.Object)obj);\n    }\n else     throw new IllegalArgumentException(\"Only instances of org.omg.CORBA.Object can be bound\");\n  }\n catch (  BAD_PARAM e) {\n    NamingException ne=new NotContextException(name.toString());\n    ne.setRootCause(e);\n    throw ne;\n  }\ncatch (  Exception e) {\n    throw ExceptionMapper.mapException(e,this,pth);\n  }\n}\n", "    protected void increase(int cur_pos) {\n        while ((cur_pos > 1) &&\n                (keys[cur_pos - 1].compareTo(keys[(cur_pos / 2) - 1]) < 0)) {\n            String tmp1 = keys[(cur_pos / 2) - 1];\n            keys[(cur_pos / 2) - 1] = keys[cur_pos - 1];\n            keys[cur_pos - 1] = tmp1;\n            cur_pos /= 2;\n        }\n    }\n", "private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n  in.defaultReadObject();\n  final Calendar definingCalendar=Calendar.getInstance(timeZone,locale);\n  init(definingCalendar);\n}\n", "private Object [ ] popArray ( ) throws PDFParseException { Object obj = stack . pop ( ) ; if ( ! ( obj instanceof Object [ ] ) ) { throw new PDFParseException ( STR_ + obj . toString ( ) ) ; } return ( Object [ ] ) obj ; }", "    public boolean containsWord(String word, Dictionary d) {\n        if (d == null) {\n            LOGGER.error(\"d == null\");\n            throw new IllegalArgumentException(\"d == null\");\n        }\n\n        try {\n            PreparedStatement ps = dbConnection.prepareStatement(\"SELECT * from \" + DictionaryEntry.TABLE_NAME + \" WHERE word = ? and dictionary_id = ?\");\n\n            ps.setString(1, word);\n            ps.setLong(2, d.getId());\n\n            ResultSet rs = ps.executeQuery();\n\n            if (rs.next()) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n\n            return false;\n        }\n    }\n", "public void copyFrom ( ParameterProperty other ) { this . bits = other . bits ; }", "public static void resume ( final JFrame parent , final IDebugger debugger ) { checkArguments ( parent , debugger ) ; if ( ! debugger . isConnected ( ) ) { return ; } try { debugger . getProcessManager ( ) . setActiveThread ( null ) ; debugger . resume ( ", "public FilterCellFastStr findNextCellWithLength(int hashcode, int length) {\n        if (nextCell == null) {\n            return null;\n        }\n\n        FilterCellFastStr x = (FilterCellFastStr) nextCell.get(hashcode);\n\n        if (x != null) {\n            if (x.getHashLength() != length) {\n                return null;\n            }\n        }\n\n        return x;\n    }", "public PackageDescr parse(boolean isEditor,\n                              final String source,\n                              final Reader dsl) throws DroolsParserException {\n        DefaultExpanderResolver resolver = getDefaultResolver(dsl);\n\n        final Expander expander = resolver.get( \"*\", null );\n        final String expanded = expander.expand( source );\n        if ( expander.hasErrors() ) {\n            this.results.addAll( expander.getErrors() );\n        }\n        return this.parse(isEditor, expanded);\n    }", "\tpublic void display(Component parent, Throwable t, String message) {\n\t\tif (t!=null) {\n\t\t\tStringWriter writer = new StringWriter();\n\t\t\tt.printStackTrace(new PrintWriter(writer));\n\t\t\tString trace = writer.getBuffer().toString();\n\t\t\tt.printStackTrace();\n\t\t\tmessage = message + \"\\n\\n\" + trace; //$NON-NLS-1$\n\t\t}\n\t\tJOptionPane.showMessageDialog(parent, message, LocalizationData.get(\"ErrorManager.title\"), JOptionPane.WARNING_MESSAGE); //$NON-NLS-1$\n\t}\n", "private void computeTabOffsetHelper(RectF stackRect){\n  final boolean portrait=mCurrentMode == Orientation.PORTRAIT;\n  final float parentWidth=stackRect.width();\n  final float parentHeight=stackRect.height();\n  final float overscrollPercent=computeOverscrollPercent();\n  final float scrollOffset=MathUtils.clamp(mScrollOffset,getMinScroll(false),getMaxScroll(false));\n  final float stackScale=getStackScale(stackRect);\n  int stackedCount=0;\n  float minStackedPosition=0.0f;\n  for (int i=0; i < mStackTabs.length; ++i) {\n    assert mStackTabs[i] != null;\n    StackTab stackTab=mStackTabs[i];\n    LayoutTab layoutTab=stackTab.getLayoutTab();\n    final float stackScrollOffset=stackTab.isDying() ? mScrollOffsetForDyingTabs : scrollOffset;\n    float screenScrollOffset=approxScreen(stackTab,stackScrollOffset);\n    screenScrollOffset=Math.max(minStackedPosition,screenScrollOffset);\n    if (stackedCount < MAX_NUMBER_OF_STACKED_TABS_TOP) {\n      final float tiltXcos=(float)Math.cos(Math.toRadians(layoutTab.getTiltX()));\n      final float tiltYcos=(float)Math.cos(Math.toRadians(layoutTab.getTiltY()));\n      float collapse=Math.min(Math.abs(tiltXcos),Math.abs(tiltYcos));\n      collapse*=layoutTab.getAlpha();\n      minStackedPosition+=StackTab.sStackedTabVisibleSize * collapse;\n    }\n    stackedCount+=stackTab.isDying() ? 0 : 1;\n    if (overscrollPercent < 0) {\n      screenScrollOffset+=(overscrollPercent / OVERSCROLL_TOP_SLIDE_PCTG) * screenScrollOffset;\n      screenScrollOffset=Math.max(0,screenScrollOffset);\n    }\n    float xIn=(parentWidth - layoutTab.getScaledContentWidth()) / 2.0f;\n    float yIn=(parentHeight - layoutTab.getScaledContentHeight()) / 2.0f;\n    final float horizontalPadding=(parentWidth - layoutTab.getOriginalContentWidth() * StackAnimation.SCALE_AMOUNT * stackScale) / 2.0f;\n    final float verticalPadding=(parentHeight - layoutTab.getOriginalContentHeight() * StackAnimation.SCALE_AMOUNT * stackScale) / 2.0f;\n    if (portrait) {\n      yIn+=STACK_PORTRAIT_Y_OFFSET_PROPORTION * verticalPadding;\n      yIn+=screenScrollOffset;\n    }\n else {\n      if (LocalizationUtils.isLayoutRtl()) {\n        xIn-=STACK_LANDSCAPE_START_OFFSET_PROPORTION * horizontalPadding;\n        xIn-=screenScrollOffset;\n      }\n else {\n        xIn+=STACK_LANDSCAPE_START_OFFSET_PROPORTION * horizontalPadding;\n        xIn+=screenScrollOffset;\n      }\n      yIn+=STACK_LANDSCAPE_Y_OFFSET_PROPORTION * verticalPadding;\n    }\n    layoutTab.setX(xIn);\n    layoutTab.setY(yIn);\n  }\n  stackedCount=0;\n  float maxStackedPosition=portrait ? mLayout.getHeightMinusTopControls() : mLayout.getWidth();\n  for (int i=mStackTabs.length - 1; i >= 0; i--) {\n    assert mStackTabs[i] != null;\n    StackTab stackTab=mStackTabs[i];\n    LayoutTab layoutTab=stackTab.getLayoutTab();\n    if (stackTab.isDying())     continue;\n    float pos;\n    if (portrait) {\n      pos=layoutTab.getY();\n      layoutTab.setY(Math.min(pos,maxStackedPosition));\n    }\n else     if (LocalizationUtils.isLayoutRtl()) {\n      float posOffset=mLayout.getWidth() - layoutTab.getOriginalContentWidth() * StackAnimation.SCALE_AMOUNT * stackScale;\n      pos=-layoutTab.getX() + posOffset;\n      layoutTab.setX(-Math.min(pos,maxStackedPosition) + posOffset);\n    }\n else {\n      pos=layoutTab.getX();\n      layoutTab.setX(Math.min(pos,maxStackedPosition));\n    }\n    if (pos >= maxStackedPosition && stackedCount < MAX_NUMBER_OF_STACKED_TABS_BOTTOM) {\n      maxStackedPosition-=StackTab.sStackedTabVisibleSize;\n      stackedCount++;\n    }\n  }\n  final float discardRange=getDiscardRange();\n  for (int i=0; i < mStackTabs.length; ++i) {\n    assert mStackTabs[i] != null;\n    StackTab stackTab=mStackTabs[i];\n    LayoutTab layoutTab=stackTab.getLayoutTab();\n    final float xIn=layoutTab.getX() + stackTab.getXInStackOffset();\n    final float yIn=layoutTab.getY() + stackTab.getYInStackOffset();\n    final float xOut=stackTab.getXOutOfStack();\n    final float yOut=stackTab.getYOutOfStack();\n    float x=MathUtils.interpolate(xOut,xIn,stackTab.getXInStackInfluence());\n    float y=MathUtils.interpolate(yOut,yIn,stackTab.getYInStackInfluence());\n    if (stackTab.getDiscardAmount() != 0) {\n      float discard=stackTab.getDiscardAmount();\n      boolean fromClick=stackTab.getDiscardFromClick();\n      float scale=computeDiscardScale(discard,discardRange,fromClick);\n      float deltaX=stackTab.getDiscardOriginX() - stackTab.getLayoutTab().getOriginalContentWidth() / 2.f;\n      float deltaY=stackTab.getDiscardOriginY() - stackTab.getLayoutTab().getOriginalContentHeight() / 2.f;\n      float discardOffset=fromClick ? 0.f : discard;\n      if (portrait) {\n        x+=discardOffset + deltaX * (1.f - scale);\n        y+=deltaY * (1.f - scale);\n      }\n else {\n        x+=deltaX * (1.f - scale);\n        y+=discardOffset + deltaY * (1.f - scale);\n      }\n    }\n    layoutTab.setX(stackRect.left + x);\n    layoutTab.setY(stackRect.top + y);\n  }\n}\n", "   private void updateContainedJustification() {\n      Iterator iterator = contained.iterator();\n      while (iterator.hasNext()) {\n         GraphNodeDimensions gnd = (GraphNodeDimensions)iterator.next();\n         switch (justify) {\n            case CENTER:\n               _log.debug(getName() + \".updateContainedJustification() justify = CENTER\");\n               gnd.centerInContainer(this);\n               break;\n            default:\n               _log.debug(getName() + \".updateContainedJustification() justify != CENTER\");\n               break;\n         }\n      }\n   }\n", "IStateAction < CBackgroundDraggedLeftState > createBackgroundDraggedLeftAction ( ) ;", "public static Object applyMethod(Object pObject, String pMethod, Object ... pArgs) {\n        Class<?> clazz = pObject.getClass();\n        try {\n            Method method = extractMethod(pMethod, clazz, pArgs);\n            return method.invoke(pObject,pArgs);\n        } catch (NoSuchMethodException e) {\n            throw new IllegalArgumentException(\"Cannot call method \" + pMethod + \" on \" + pObject + \": \" + e,e);\n        } catch (InvocationTargetException e) {\n            throw new IllegalArgumentException(\"Cannot call method \" + pMethod + \" on \" + pObject + \": \" + e,e);\n        } catch (IllegalAccessException e) {\n            throw new IllegalArgumentException(\"Cannot call method \" + pMethod + \" on \" + pObject + \": \" + e,e);\n        }\n    }", "public Rejected acquirePermits(long number, long nanoTime) {\n        for (int i = 0; i < backPressureList.size(); ++i) {\n            BackPressure<Rejected> bp = backPressureList.get(i);\n            Rejected rejected = bp.acquirePermit(number, nanoTime);\n            if (rejected != null) {\n                rejectedCounts.write(rejected, number, nanoTime);\n\n                for (int j = 0; j < i; ++j) {\n                    backPressureList.get(j).releasePermit(number, nanoTime);\n                }\n                return rejected;\n            }\n        }\n        return null;\n    }", "\t\tpublic void updateLog(DocumentEvent e, String action) {\n\t\t\tDocument doc = (Document)e.getDocument();\n\t\t\tint changeLength = e.getLength();\n\n\t\t\tSystem.out.println(\n\t\t\t\t\tchangeLength + \" character\"\n\t\t\t\t\t+ ((changeLength == 1) ? \" \" : \"s \")\n\t\t\t\t\t+ action + \" \" + doc.getProperty(\"name\") + \".\"\n\t\t\t\t\t+ newline\n\t\t\t\t\t+ \"  Text length = \" + doc.getLength() + newline);            \n\t\t}\n", "private static Result parse(String input,boolean requireToNormalize){\n  String root=\"\";\n  WindowsPathType type=null;\n  int len=input.length();\n  int off=0;\n  if (len > 1) {\n    char c0=input.charAt(0);\n    char c1=input.charAt(1);\n    char c=0;\n    int next=2;\n    if (isSlash(c0) && isSlash(c1)) {\n      type=WindowsPathType.UNC;\n      off=nextNonSlash(input,next,len);\n      next=nextSlash(input,off,len);\n      if (off == next)       throw new InvalidPathException(input,\"UNC path is missing hostname\");\n      String host=input.substring(off,next);\n      off=nextNonSlash(input,next,len);\n      next=nextSlash(input,off,len);\n      if (off == next)       throw new InvalidPathException(input,\"UNC path is missing sharename\");\n      root=\"\\\\\\\\\" + host + \"\\\\\"+ input.substring(off,next)+ \"\\\\\";\n      off=next;\n    }\n else {\n      if (isLetter(c0) && c1 == ':') {\n        char c2;\n        if (len > 2 && isSlash(c2=input.charAt(2))) {\n          if (c2 == '\\\\') {\n            root=input.substring(0,3);\n          }\n else {\n            root=input.substring(0,2) + '\\\\';\n          }\n          off=3;\n          type=WindowsPathType.ABSOLUTE;\n        }\n else {\n          root=input.substring(0,2);\n          off=2;\n          type=WindowsPathType.DRIVE_RELATIVE;\n        }\n      }\n    }\n  }\n  if (off == 0) {\n    if (len > 0 && isSlash(input.charAt(0))) {\n      type=WindowsPathType.DIRECTORY_RELATIVE;\n      root=\"\\\\\";\n    }\n else {\n      type=WindowsPathType.RELATIVE;\n    }\n  }\n  if (requireToNormalize) {\n    StringBuilder sb=new StringBuilder(input.length());\n    sb.append(root);\n    return new Result(type,root,normalize(sb,input,off));\n  }\n else {\n    return new Result(type,root,input);\n  }\n}\n", "public Observable<DscNodeInner> updateAsync(String resourceGroupName, String automationAccountName, String nodeId, DscNodeUpdateParameters parameters) {\n        return updateWithServiceResponseAsync(resourceGroupName, automationAccountName, nodeId, parame", "public void deselectAll() {\n\tcheckWidget();\n\tOS.gtk_signal_handler_block_by_data (handle, SWT.Selection);\n\tif ((style & SWT.SINGLE) != 0) {\n\t\tint selection = OS.GTK_CLIST_SELECTION (handle);\n\t\tif (selection != 0 && OS.g_list_length (selection) > 0) {\n\t\t\tint index = OS.GTK_CLIST_FOCUS_ROW (handle);\n\t\t\tif (index == -1) index = 0;\n\t\t\tOS.gtk_clist_select_row (handle, index, 0);\n\t\t\tOS.gtk_clist_unselect_row (handle, index, 0);\n\t\t}\n\t} else {\n\t\tOS.gtk_ctree_unselect_recursive (handle, 0);\n\t}\n\tOS.gtk_signal_handler_unblock_by_data (handle, SWT.Selection);\n}\n", "protected String[] removeBlacklist(String[] options){\n  Hashtable<String,Option> pool;\n  Option option;\n  Enumeration<Option> enm=listOptions();\n  pool=new Hashtable<String,Option>();\n  while (enm.hasMoreElements()) {\n    option=enm.nextElement();\n    if (isOnBlacklist(option.name())) {\n      pool.put(option.name(),option);\n    }\n  }\n  Enumeration<String> enm2=pool.keys();\n  while (enm2.hasMoreElements()) {\n    option=pool.get(enm2.nextElement());\n    try {\n      if (option.numArguments() == 0) {\n        Utils.getFlag(option.name(),options);\n      }\n else {\n        Utils.getOption(option.name(),options);\n      }\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n  }\n  return options;\n}\n", "public void postResponse ( Request < ? > request , Response < ? > response , Runnable runnable ) ;", "private void onTtsReady(){\n  Locale locale=Locale.getDefault();\n  int languageAvailability=tts.isLanguageAvailable(locale);\n  if (languageAvailability == TextToSpeech.LANG_MISSING_DATA || languageAvailability == TextToSpeech.LANG_NOT_SUPPORTED) {\n    Log.w(TAG,\"Default locale not available, use English.\");\n    locale=Locale.ENGLISH;\n  }\n  tts.setLanguage(locale);\n  tts.setSpeechRate(TTS_SPEECH_RATE);\n  tts.setOnUtteranceCompletedListener(utteranceListener);\n}\n", "protected Range findDomainBounds(XYDataset dataset,boolean includeInterval){\n  if (dataset == null) {\n    return null;\n  }\n  if (getDataBoundsIncludesVisibleSeriesOnly()) {\n    List visibleSeriesKeys=new ArrayList();\n    int seriesCount=dataset.getSeriesC", "private static HttpEntity toHttpEntity(Object value,String mimetype,String charset) throws IOException {\n  if (value instanceof HttpEntity)   return (HttpEntity)value;\n  ContentType ct=HTTPEngine.toContentType(mimetype,charset);\n  try {\n    if (value instanceof TemporaryStream) {\n      if (ct != null)       return new TemporaryStreamHttpEntity((TemporaryStream)value,ct);\n      return new TemporaryStreamHttpEntity((TemporaryStream)value,null);\n    }\n else     if (value instanceof InputStream) {\n      if (ct != null)       return new ByteArrayEntity(IOUtil.toBytes((InputStream)value),ct);\n      return new ByteArrayEntity(IOUtil.toBytes((InputStream)value));\n    }\n else     if (Decision.isCastableToBinary(value,false)) {\n      if (ct != null)       return new ByteArrayEntity(Caster.toBinary(value),ct);\n      return new ByteArrayEntity(Caster.toBinary(value));\n    }\n else {\n      boolean wasNull=false;\n      if (ct == null) {\n        wasNull=true;\n        ct=ContentType.APPLICATION_OCTET_STREAM;\n      }\n      String str=Caster.toString(value);\n      if (str.equals(\"<empty>\")) {\n        return new EmptyHttpEntity(ct);\n      }\n      if (wasNull && !StringUtil.isEmpty(charset,true))       return new StringEntity(str,charset.trim());\n else       return new StringEntity(str,ct);\n    }\n  }\n catch (  Exception e) {\n    throw ExceptionUtil.toIOException(e);\n  }\n}\n", "private static void checkIsBlockCompressed(File input) throws IOException {\n  if (!isBlockCompressed(input)) {\n    throw new IllegalArgumentException(\"File: \" + input.getPath() + \" is not in block compressed gzip format\");\n  }\n}\n", "public JsonHttpResponseHandler ( ) { super ( DEFAULT_CHARSET ) ; }", "\tpublic void setJoinNumber (java.lang.Integer _joinNumber) {\n\t\tthis._joinNumber = _joinNumber;\n\t}\n", "\tpublic boolean isNegative() {\n\t\treturn(negate);\n\t}\n", "public Statement notIn(Statement stmt){\n  statement.append(\" NOT\");\n  return in(stmt);\n}\n", "    public void setResult(String result){\n        //set result into database\n        try{\n            //System.out.println(\"update request set result='\"+result+\"' where id=\"+requestId+\";\");\n            DBAdapter.query(\"update request set result='\"+result+\"', status=3 where id=\"+requestId+\";\");\n        }\n        catch(Exception e){\n        }\n        \n        resManager.getResource().getResourcePropertySet().get(RJxplQNames.RP_RESULT_INFO).add(new Integer(requestId));\n    }\n", "\tpublic String toString () {\n\t\t/*return (\n\t\t\t\"curShapeNum: \" + curShapeNum + \" nextShapeNum: \" + nextShapeNum + \n\t\t\t\" curShapeX: \" + curShapeX + \" curShapeY: \" + curShapeY +  \n\t\t\t\" curPos: \" + curPos\n\t\t\t);*/\n\t    StringBuffer str = new StringBuffer ();\n\t    for (int y = 0; y < NUM_OF_ROWS; y++) {\n\t        for (int x = 0; x < NUM_OF_COLS; x++) {\n\t            str.append (gameData[x][y] + \"\\t\");\n\t        }\n\t        str.append (\"\\n\");\n\t    }\n\t    return str.toString();\n\t}\n", "public GreaterConstraint(double constraintValue){\n  super(Double.valueOf(constraintValue));\n}\n", "  private String getScript() throws PipelineException {\n    String script = this.getOptions(SCRIPT_CODE);\n    String scriptFile = this.getOptions(SCRIPT_FILE);\n\n    if ((script == null) || (scriptFile != null)) {\n      if (scriptFile != null) {\n        try {\n          script = VariableProcessor.expandFile(scriptFile);\n        } catch (IOException e) {\n          throw new PipelineException(I18n.get(\"100294\"), e);\n        }\n      } else {\n        throw new com.babeldoc.core.pipeline.PipelineException(I18n.get(\n            \"100294\"));\n      }\n    }\n\t\t\n\t\tif(LogService.getInstance().isDebugEnabled()) {\n\t    LogService.getInstance().logDebug(\"Script to process =\");\n\t    LogService.getInstance().logDebug(script);\n\t\t}\n\t\t\n    return script;\n  }\n", "private void readObject ( ) { }", "void initFromCameraParameters ( Camera camera ) { Camera . Parameters parameters = camera . getParameters ( ) ; WindowManager manager = ( WindowManager ) context . getSystemService ( Context . WINDOW_SERVICE ) ; Display display = manager . getDefaultDisplay ( ) ; int width = display . getWidth ( ) ; int height = display . getHeight ( ) ; screenResolution = new Point ( width , height ) ; Log . i ( TAG , STR_ + screenResolution ) ; cameraResolution = findBestPreviewSizeValue ( parameters , screenResolution ) ; Log . i ( TAG , STR_ + cameraResolution ) ; }", "    public int addContact(Contact c) {\n        Iterator i = contacts.iterator();\n        int index = 0;\n        while (i.hasNext() && ((Contact)(i.next())).compareTo(c) < 0) {\n            index++;\n        }\n        contacts.add(index, c);\n        return index + subGroups.size();\n    }\n", "public static boolean staticSetDSR(String port, boolean flag)\n            throws UnsupportedCommOperationException {\n\n        logger.fine(\"RXTXPort:staticSetDSR( \" + port\n                + \" \" + flag);\n        return (nativeStaticSetDSR(port, flag));\n    }", "Control[] convertControls(Vector<Control> ctls) throws NamingException {\n  int count=ctls.size();\n  if (count == 0) {\n    return null;\n  }\n  Control[] controls=new Control[count];\n  for (int i=0; i < count; i++) {\n    controls[i]=myResponseControlFactory.getControlInstance(ctls.elementAt(i));\n    if (controls[i] == null) {\n      controls[i]=ControlFactory.getControlInstance(ctls.elementAt(i),this,envprops);\n    }\n  }\n  return controls;\n}\n", "    public void setCoordinates(FloatPoint coords) {\n        Object old = this.coords;\n        this.coords = coords;\n        firePropertyChange(\"coordinates\", old, coords);\n\tif (coords != null) {\n\t    adapter.put(X_COORD_ID, Float.toString(coords.x));\n\t    adapter.put(Y_COORD_ID, Float.toString(coords.y));\n\t}\n    }\n", "public ServiceFuture<Void> deleteEventHubConsumerGroupAsync(String resourceGroupName, String resourceName, String eventHubEndpointName, String name, final ServiceCallback<Void> serviceCallback) {\n        return ServiceFuture.fromResponse(deleteEventHubConsumerGroupWithServiceResponseAsync(resourceGroupName, resourceName, eventHubEndpointName, name), serviceCallback);\n    }", "    public Object clone() throws CloneNotSupportedException {\n        PlotRenderingInfo clone = (PlotRenderingInfo) super.clone();\n        if (this.plotArea != null) {\n            clone.plotArea = (Rectangle2D) this.plotArea.clone();\n        }\n        if (this.dataArea != null) {\n            clone.dataArea = (Rectangle2D) this.dataArea.clone();\n        }\n        clone.subplotInfo = new java.util.ArrayList(this.subplotInfo.size());\n        for (int i = 0; i < this.subplotInfo.size(); i++) {\n            PlotRenderingInfo info\n                    = (PlotRenderingInfo) this.subplotInfo.get(i);\n            clone.subplotInfo.add(info.clone());\n        }\n        return clone;\n    }\n", "public synchronized Morphia map(final Set<Class> entityClasses) {\n        if (entityClasses != null && !entityClasses.isEmpty()) {\n            for (final Class entityClass : entityClasses) {\n                if (!mapper.isMapped(entityClass)) {\n                    mapper.addMappedClass(entityClass);\n                }\n            }\n        }\n        return this;\n    }", "  private void constructors() {\n    if (allParameters.size() != 0) {\n      declareArgConstructor();\n      sblock();\n      line(\"super();\");\n      for (int i = 0; i < allParameters.size(); i++) {\n        Parameter p = (Parameter)allParameters.get(i);\n        line(\"this.\" + getName(p) + \" = \" + getName(p) + \";\");\n      }\n      eblock();\n    }\n  }\n", "private double[] probs(double[] Fs){\n  double maxF=-Double.MAX_VALUE;\n  for (int i=0; i < Fs.length; i++) {\n    if (Fs[i] > maxF) {\n      maxF=Fs[i];\n    }\n  }\n  double sum=0;\n  double[] probs=new double[Fs.length];\n  for (int i=0; i < Fs.length; i++) {\n    probs[i]=Math.exp(Fs[i] - maxF);\n    sum+=probs[i];\n  }\n  Utils.normalize(probs,sum);\n  return probs;\n}\n", "public void clear ( ) { LinkedListNode node = getLast ( ) ; while ( node != null ) { node . remove ( ) ; node = getLast ( ) ; } head . next = head . previous = head ; }", "private static Object [ ] toObjectArray ( Object primitiveArray ) { if ( primitiveArray == null ) { throw new NullPointerException ( ) ; } if ( primitiveArray instanceof Object [ ] ) { return ( Object [ ] ) primitiveArray ; } if ( primitiveArray instanceo", "public void stopLogging(){\n  active=false;\n}\n", "public static double cdf(double val, int v) {\n    double x = v / (val * val + v);\n    return 1 - (0.5 * BetaDistribution.regularizedIncBeta(x, v * .5, 0.5));\n  }", "public static ByteBufferInputStream map( final FileChannel fileChannel, final MapMode mapMode ) throws IOException {\n\t\tfinal long size = fileChannel.size();\n\t\tfinal int chunks = (int)( ( size + ( CHUNK_SIZE - 1 ) ) / CHUNK_SIZE );\n\t\tfinal ByteBuffer[] byteBuffer = new ByteBuffer[ chunks ];\n\t\tfor( int i = 0; i < chunks; i++ ) byteBuffer[ i ] = fileChannel.map( mapMode, i * CHUNK_SIZE, Math.min( CHUNK_SIZE, size - i * CHUNK_SIZE ) );\n\t\tbyteBuffer[ 0 ].position( 0 );\n\t\tfinal boolean[] readyToUse = new boolean[ chunks ];\n\t\t//BooleanArrays.fill( readyToUse, true );\n\t\tfor (int i = 0; i < readyToUse.length; i++) {\n\t\t\treadyToUse[i] = true;\n\t\t}\n\t\treturn new ByteBufferInputStream( byteBuffer, size, 0, readyToUse );\n\t}", "    public boolean isIncludingXMLDeclaration() {\n        return includingXMLDeclaration;\n    }\n", "private void generateMTFValues() {\n        final int lastShadow = this.last;\n        final Data dataShadow = this.data;\n        final boolean[] inUse = dataShadow.inUse;\n        final byte[] block = dataShadow.block;\n        final int[] fmap = dataShadow.fmap;\n        final char[] sfmap = dataShadow.sfmap;\n        final int[] mtfFreq = dataShadow.mtfFreq;\n        final byte[] unseqToSeq = dataShadow.unseqToSeq;\n        final byte[] yy = dataShadow.generateMTFValues_yy;\n\n        // make maps\n        int nInUseShadow = 0;\n        for (int i = 0; i < 256; i++) {\n            if (inUse[i]) {\n                unseqToSeq[i] = (byte) nInUseShadow;\n                nInUseShadow++;\n            }\n        }\n        this.nInUse = nInUseShadow;\n\n        final int eob = nInUseShadow + 1;\n\n        for (int i = eob; i >= 0; i--) {\n            mtfFreq[i] = 0;\n        }\n\n        for (int i = nInUseShadow; --i >= 0;) {\n            yy[i] = (byte) i;\n        }\n\n        int wr = 0;\n        int zPend = 0;\n\n        for (int i = 0; i <= lastShadow; i++) {\n            final byte ll_i = unseqToSeq[block[fmap[i]] & 0xff];\n            byte tmp = yy[0];\n            int j = 0;\n\n            while (ll_i != tmp) {\n                j++;\n                byte tmp2 = tmp;\n                tmp = yy[j];\n                yy[j] = tmp2;\n            }\n            yy[0] = tmp;\n\n            if (j == 0) {\n                zPend++;\n            } else {\n                if (zPend > 0) {\n                    zPend--;\n                    while (true) {\n                        if ((zPend & 1) == 0) {\n                            sfmap[wr] = RUNA;\n                            wr++;\n                            mtfFreq[RUNA]++;\n                        } else {\n                            sfmap[wr] = RUNB;\n                            wr++;\n                            mtfFreq[RUNB]++;\n                        }\n\n                        if (zPend >= 2) {\n                            zPend = (zPend - 2) >> 1;\n                        } else {\n                            break;\n                        }\n                    }\n                    zPend = 0;\n                }\n                sfmap[wr] = (char) (j + 1);\n                wr++;\n                mtfFreq[j + 1]++;\n            }\n        }\n\n        if (zPend > 0) {\n            zPend--;\n            while (true) {\n                if ((zPend & 1) == 0) {\n                    sfmap[wr] = RUNA;\n                    wr++;\n                    mtfFreq[RUNA]++;\n                } else {\n                    sfmap[wr] = RUNB;\n                    wr++;\n                    mtfFreq[RUNB]++;\n                }\n\n                if (zPend >= 2) {\n                    zPend = (zPend - 2) >> 1;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        sfmap[wr] = (char) eob;\n        mtfFreq[eob]++;\n        this.nMTF = wr + 1;\n    }", "public static final String decode(String s,String enc) throws MalformedURLException, UnsupportedEncodingException {\n  try {\n    return URLDecoder.decode(s,enc);\n  }\n catch (  IllegalArgumentException iae) {\n    MalformedURLException mue=new MalformedURLException(\"Invalid URI encoding: \" + s);\n    mue.initCause(iae);\n    throw mue;\n  }\n}\n", "    private void decPictureLossIndic() {\n        if(this.rtpSession.rtcpAVPFIntf != null) {\n            this.rtpSession.rtcpAVPFIntf.PSFBPktPictureLossReceived(\n                    super.ssrc);\n        }\n    }\n", "\tprotected void fireProjectInsertStarted() {\n\t\tfor (InsertListener insertListener : insertListeners) {\n\t\t\tinsertListener.projectInsertStarted(project);\n\t\t}\n\t}\n", "\tprivate void _retransmitBcastRequest(long seqID) {\n\t\t// *** Get a shared lock\n\t\ttry { stateLock.readLock(); try {\n\n\t\tTrace.println(\"TOTAL\", Trace.INFO, \"Retransmit BCAST_REQ[\" +\n\t\t\tseqID + \"]\");\n\t\t_transmitBcastRequest(seqID);\n\n\t\t// ** Revoke the shared lock\n\t\t} finally { stateLock.readUnlock(); }\n\t\t} catch(RWLock.IntException ex) {\n\t\tTrace.println(\"TOTAL\", Trace.ERROR, ex.getMessage());\n\t\t}\n\t}\n", "public GammaInvFitnessFunction(int genomeLength,double alpha,double beta,double pInv,int stateSize,boolean randomFittest){\n  GammaDistribution gamma=new GammaDistribution(beta,alpha);\n  fitness=new double[genomeLength][stateSize];\n  fittest=new byte[genomeLength];\n  int fitpos=0;\n  for (int i=0; i < genomeLength; i++) {\n    if (randomFittest) {\n      fitpos=MathUtils.nextInt(stateSize);\n    }\n    fitness[i][fitpos]=1.0;\n    fittest[i]=(byte)fitpos;\n    for (int j=0; j < stateSize; j++) {\n      if (j != fitpos) {\n        if (MathUtils.nextDouble() > pInv) {\n          double prob=Math.round(MathUtils.nextDouble() * 1000.0) / 1000.0;\n          while ((prob <= 0.0) || (prob >= 1.0)) {\n            prob=Math.round(MathUtils.nextDouble() * 1000.0) / 1000.0;\n          }\n          fitness[i][j]=Math.max(0.0,1.0 - gamma.quantile(prob));\n        }\n else {\n          fitness[i][j]=0.0;\n        }\n      }\n    }\n  }\n}\n", "public IsNullValue toExceptionValue ( ) { if ( getBaseKind ( ) == NO_KABOOM_NN ) { return new IsNullValue ( kind | EXCEPTION , locationOfKaBoom ) ; } return instanceByFlagsList [ ( getFlags ( ) | EXCEPTION ) > > FLAG_SHIFT ] [ getBaseKind ( ) ] ; }", "private static void putNew(Map<Element,AnnotatedTypeMirror> m,Element key,AnnotatedTypeMirror value){\n  if (key == null) {\n    ErrorReporter.errorAbort(\"StubParser: key is null!\");\n    return;\n  }\n  if (m.containsKey(key)) {\n    AnnotatedTypeMirror value2=m.get(key);\n    AnnotatedTypeMerger.merge(value,value2);\n    m.put(key,value2);\n  }\n else {\n    m.put(key,value);\n  }\n}\n", "public void setComplex_atIndex(int index, double real, double imag){\n\t\tthis.real[index] = real;\n\t\tthis.imag[index] = imag;\n\t\tif(synchronizePowerSpectrum){\n\t\t\tcomputePower(index);\n\t\t}\n\t}", "    protected void setRangeZ(Number s, Number e) throws PropagationFailureException {\n        if (z != null) {\n            z.setRange(s,e);\n        }\n        else if (gz != null){\n            for (int i=0; i<gz.getNodeCount(); i++) {\n                ((NumNode) gz.getNode(i)).setRange(s,e);\n            }\n        }\n    }\n", "\tpublic void trace(String msg) {\n\t\tlogger.log(TRACE, msg);\n\t}\n", "public static File searchForGroovyScriptFile ( String input ) { String scriptFileName = input . trim ( ) ; File scriptFile = new File ( scriptFileName ) ; String [ ] standardExtensions = { STR_ , STR_ , STR_ , STR_ } ; int i = NUM_ ; while ( i < standardExtensions . length && ! scriptFile . exists ( ) ) { scriptFile = new File ( scriptFileName + standardExtensions [ i ] ) ; i ++ ; } if ( ! scriptFile . exists ( ) ) { scriptFile = new File ( scriptFileName ) ; } return scriptFile ; }", "\tpublic void setFirstMoved(int firstMove) {\n\t\tif (this.firstMove == -1 || firstMove == -1) {\n\t\t\tthis.firstMove = firstMove;\n\t\t}\n\t}\n", "private final PublicKey constructPublicKey(byte[] encodedKey,String encodedKeyAlgorithm) throws InvalidKeyException, NoSuchAlgorithmException {\n  PublicKey key=null;\n  try {\n    KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm,SunJCE.getInstance());\n    X509EncodedKeySpec keySpec=new X509EncodedKeySpec(encodedKey);\n    key=keyFactory.generatePublic(keySpec);\n  }\n catch (  NoSuchAlgorithmException nsae) {\n    try {\n      KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm);\n      X509EncodedKeySpec keySpec=new X509EncodedKeySpec(encodedKey);\n      key=keyFactory.generatePublic(keySpec);\n    }\n catch (    NoSuchAlgorithmException nsae2) {\n      throw new NoSuchAlgorithmException(\"No installed providers \" + \"can create keys for the \" + encodedKeyAlgorithm + \"algorithm\");\n    }\ncatch (    InvalidKeySpecException ikse2) {\n    }\n  }\ncatch (  InvalidKeySpecException ikse) {\n  }\n  return key;\n}\n", "default FeatureToggle<T> toFeatureToggle(){\n  final Optional<T> opt=toOptional();\n  return opt.isPresent() ? FeatureToggle.enable(opt.get()) : FeatureToggle.disable(null);\n}\n", "public void visit(Visitor v) throws JasperException {\n  Iterator<Node> iter=list.iterator();\n  while (iter.hasNext()) {\n    Node n=iter.next();\n    n.accept(v);\n  }\n}\n", "@Override\n    public StateContract getStateFromName(String countryAlternateCode, String stateName) {\n        CountryContract country = getCountryFromCode(countryAlternateCode);\n\n        return getKcStateService().getState(country.getCode(), stateName);\n    }", "void removeUnusableIndexConditions(){\n  for (int i=0; i < indexConditions.size(); i++) {\n    IndexCondition cond=indexConditions.get(i);\n    if (!cond.isEvaluatable()) {\n      indexConditions.remove(i--);\n    }\n  }\n}\n", "\tpublic void show(){\n\t\tthis.setVisible(false);\n\t\tsuper.show();\n\t\tEffect.appear(this);\n\t\tint left = 50;\n\t\tint top = 50;\n\t\tthis.setPopupPosition(left,top);\n\t}\n", "public void removeNonExistingModule(final MemoryModule module){\n  Preconditions.checkNotNull(module,\"IE02256: E00084: Module argument can not be null\");\n  for (  final ProcessManagerListener listener : listeners) {\n    try {\n      listener.removedNonExistingModule(module);\n    }\n catch (    final Exception exception) {\n      CUtilityFunctions.logException(exception);\n    }\n  }\n}\n", "private boolean processRedirectResponse(final HttpMethod method)\n     throws RedirectException {\n\t\t//get the location header to find out where to redirect to\n\t\tHeader locationHeader = method.getResponseHeader(\"location\");\n\t\tif (locationHeader == null) {\n\t\t\t// got a redirect response, but no location header\n\t\t\tLOG.error(\"Received redirect response \" + method.getStatusCode()\n\t\t\t\t\t+ \" but no location header\");\n\t\t\treturn false;\n\t\t}\n\t\tString location = locationHeader.getValue();\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"Redirect requested to location '\" + location + \"'\");\n\t\t}\n        \n\t\t//rfc2616 demands the location value be a complete URI\n\t\t//Location       = \"Location\" \":\" absoluteURI\n\t\tURI redirectUri = null;\n\t\tURI currentUri = null;\n\n\t\ttry {\n\t\t\tcurrentUri = new URI(\n\t\t\t\tthis.conn.getProtocol().getScheme(),\n\t\t\t\tnull,\n                this.conn.getHost(), \n                this.conn.getPort(), \n\t\t\t\tmethod.getPath()\n\t\t\t);\n\t\t\t\n            String charset = method.getParams().getUriCharset();\n            redirectUri = new URI(location, true, charset);\n\t\t\t\n            if (redirectUri.isRelativeURI()) {\n\t\t\t\tif (this.params.isParameterTrue(HttpClientParams.REJECT_RELATIVE_REDIRECT)) {\n\t\t\t\t\tLOG.warn(\"Relative redirect location '\" + location + \"' not allowed\");\n\t\t\t\t\treturn false;\n\t\t\t\t} else { \n\t\t\t\t\t//location is incomplete, use current values for defaults\n\t\t\t\t\tLOG.debug(\"Redirect URI is not absolute - parsing as relative\");\n\t\t\t\t\tredirectUri = new URI(currentUri, redirectUri);\n\t\t\t\t}\n\t\t\t} else {\n                // Reset the default params\n                method.getParams().setDefaults(this.params);\n            }\n            method.setURI(redirectUri);\n            hostConfiguration.setHost(redirectUri);\n\t\t} catch (URIException ex) {\n            throw new InvalidRedirectLocationException(\n                    \"Invalid redirect location: \" + location, location, ex);\n\t\t}\n\n        if (this.params.isParameterFalse(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS)) {\n            if (this.redirectLocations == null) {\n                this.redirectLocations = new HashSet<URI>();\n            }\n            this.redirectLocations.add(currentUri);\n            try {\n                if(redirectUri.hasQuery()) {\n                    redirectUri.setQuery(null);\n                }\n            } catch (URIException e) {\n                // Should never happen\n                return false;\n            }\n\n            if (this.redirectLocations.contains(redirectUri)) {\n                throw new CircularRedirectException(\"Circular redirect to '\" +\n                    redirectUri + \"'\");\n            }\n        }\n\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"Redirecting from '\" + currentUri.getEscapedURI()\n\t\t\t\t+ \"' to '\" + redirectUri.getEscapedURI());\n\t\t}\n        //And finally invalidate the actual authentication scheme\n                method.getHostAuthState().invalidate(); \n                method.getProxyAuthState().invalidate(); \n\t\treturn true;\n\t}", "public void stop ( ) { if ( operationsLogger . isLoggable ( Level . FINER ) ) { operationsLogger . entering ( JoinStateManager . class . getName ( ) , STR_ ) ; } if ( mgr != null ) mgr . terminate ( ) ; if ( dm != null ) dm . terminate ( ) ; if ( operatio", "private Token createJavaHomeToken(){\n  String javaHome=getPropertyValue(GeneralPropertySet.JAVA_HOME);\n  ReplaceTokens.Token tokenJavaHome=new ReplaceTokens.Token();\n  tokenJavaHome.setKey(\"jrun.java.home\");\n  tokenJavaHome.setValue(javaHome.replace('\\\\','/'));\n  return tokenJavaHome;\n}\n", "public void moveChild ( boolean up , IRJRClasspathEntry child ) ;", "public TableDescription createTable(ProvisionedThroughput throughput) {\n        final CreateTableRequest request = mapper.generateCreateTableRequest(model.targetType());\n        request.setProvisionedThroughput(throughput);\n        if (request.getGlobalSecondaryIndexes() != null) {\n            for (final GlobalSecondaryIndex gsi : request.getGlobalSecondaryIndexes()) {\n                gsi.setProvisionedThroughput(throughput);\n            }\n        }\n        return db.createTable(request).getTableDescription();\n    }", "public CostEstimate costSortWithLimit(long size,long limit,int nfields){\n  return new CostEstimate(Math.min(size,limit),model.sortWithLimit((int)size,nfields));\n}\n", "private static String generateAntiparallel(PolymerNotation polymer)\r\n\t\t\tthrows HELM2HandledException, RNAUtilsException, ChemistryException {\r\n\t\treturn generateComplement(polymer).reverse().toString();\r\n\t}", "public DescribeServiceErrorsRequest withServiceErrorIds(String... serviceErrorIds) {\n        if (this.serviceErrorIds == null) {\n            setServiceErrorIds(new com.amazonaws.internal.SdkInternalList<String>(serviceErrorIds.length));\n        }\n        for (String ele : serviceErrorIds) {\n            this.serviceErrorIds.add(ele);\n        }\n        return this;\n    }", "private TaskAttemptInfo getReduceTaskAttemptInfo(TaskTracker taskTracker,\n      TaskAttemptID taskAttemptID) {\n    assert (!taskAttemptID.isMap());\n    TaskID taskId = taskAttemptID.getTaskID();\n    TaskType taskType;\n    if (taskAttemptID.isMap()) {\n      taskType = TaskType.MAP;\n    } else {\n      taskType = TaskType.REDUCE;\n    }\n\n    TaskAttemptInfo taskAttemptInfo = jobStory.getTaskAttemptInfo(taskType,\n        taskId.getId(), taskAttemptID.getId());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"get an attempt: \"\n          + taskAttemptID.toString()\n          + \", state=\"\n          + taskAttemptInfo.getRunState()\n          + \", runtime=\"\n          + ((taskAttemptID.isMap()) ? taskAttemptInfo.getRuntime()\n              : ((ReduceTaskAttemptInfo) taskAttemptInfo).getReduceRuntime()));\n    }\n    return taskAttemptInfo;\n  }", "public ApiResponse<List<CorporationAssetsResponse>> getCorporationsCorporationIdAssetsWithHttpInfo(\n            Integer corporationId, String datasource, String ifNoneMatch, Integer page, String token)\n            throws ApiException {\n        com.squareup.okhttp.Call call = getCorporationsCorporationIdAssetsValidateBeforeCall(corporationId, datasource,\n                ifNoneMatch, page, token, null);\n        Type localVarReturnType = new TypeToken<List<CorporationAssetsResponse>>() {\n        }.getType();\n        return apiClient.execute(call, localVarReturnType);\n    }", "public String reportError(XMLLocator location,String domain,String key,Object[] arguments,short severity,Exception exception) throws XNIException {\n  MessageFormatter messageFormatter=getMessageFormatter(domain);\n  String message;\n  if (messageFormatter != null) {\n    message=messageFormatter.formatMessage(fLocale,key,arguments);\n  }\n else {\n    StringBuffer str=new StringBuffer();\n    str.append(domain);\n    str.append('#');\n    str.append(key);\n    int argCount=arguments != null ? arguments.length : 0;\n    if (argCount > 0) {\n      str.append('?');\n      for (int i=0; i < argCount; i++) {\n        str.append(arguments[i]);\n        if (i < argCount - 1) {\n          str.append('&');\n        }\n      }\n    }\n    message=str.toString();\n  }\n  XMLParseException parseException=(exception != null) ? new XMLParseException(location,message,exception) : new XMLParseException(location,message);\n  XMLErrorHandler errorHandler=fErrorHandler;\n  if (errorHandler == null) {\n    if (fDefaultErrorHandler == null) {\n      fDefaultErrorHandler=new DefaultErrorHandler();\n    }\n    errorHandler=fDefaultErrorHandler;\n  }\nswitch (severity) {\ncase SEVERITY_WARNING:\n{\n      errorHandler.warning(domain,key,parseException);\n      break;\n    }\ncase SEVERITY_ERROR:\n{\n    errorHandler.error(domain,key,parseException);\n    break;\n  }\ncase SEVERITY_FATAL_ERROR:\n{\n  errorHandler.fatalError(domain,key,parseException);\n  if (!fContinueAfterFatalError) {\n    throw parseException;\n  }\n  break;\n}\n}\nreturn message;\n}\n", "protected String findBestNameForUrlNameMapping(\n        CmsDbContext dbc,\n        Iterator<String> nameSeq,\n        CmsUUID structureId,\n        String locale)\n    throws CmsDataAccessException {\n\n        String newName;\n        boolean alreadyInUse;\n        do {\n            newName = nameSeq.next();\n            alreadyInUse = false;\n            CmsUrlNameMappingFilter filter = CmsUrlNameMappingFilter.ALL.filterName(newName);\n            List<CmsUrlNameMappingEntry> entriesWithSameName = getVfsDriver(dbc).readUrlNameMappingEntries(\n                dbc,\n                false,\n                filter);\n            for (CmsUrlNameMappingEntry entry : entriesWithSameName) {\n                boolean sameId = entry.getStructureId().equals(structureId);\n                if (!sameId) {\n                    // name already used for other resource, or for different locale of the same resource\n                    alreadyInUse = true;\n                    break;\n                }\n            }\n        } while (alreadyInUse);\n        return newName;\n    }", "public static <T> T read(String key, Class<T> classOfT) throws Exception {\n\n        String json = cache.getString(key).getString();\n        T value = new Gson().fromJson(json, classOfT);\n        if (value == null) {\n            throw new NullPointerException();\n        }\n        return value;\n    }", "    public Menu getMenu(java.awt.Component component, boolean recursive) {\n        synchronized(menuTable) {\n            MenuInfo mi = (MenuInfo)menuTable.get(component);\n            if (mi != null && mi.recursive == recursive)\n                return mi.menu;\n            else\n                return null;\n        }\n    }\n", "private void deleteChildren(Element container){\n  while (container.hasChildNodes()) {\n    container.removeChild(container.getLastChild());\n  }\n}\n", "\t\tprivate void handleUnknownBean( XMPPBean inBean ) {\n\t\t\tgetAgent().getConnection().sendPacket(\n\t\t\t\t\tnew BeanIQAdapter( BeanHelper.CreateErrorBean( inBean, \"wait\",\n\t\t\t\t\t\t\t\"unexpected-request\", \"This request is not supported\" ) ) );\n\t\t}\n", "private static DataTable2D bivariateMatrix(Dataframe dataSet, BivariateType type) {\n        DataTable2D bivariateMatrix = new DataTable2D();\n        \n        //extract values of first variable\n        Map<Object, TypeInference.DataType> columnTypes = dataSet.getXDataTypes();\n        Object[] allVariables = columnTypes.keySet().toArray();\n        int numberOfVariables = allVariables.length;\n        \n        TransposeDataList transposeDataList;\n        for(int i=0;i<numberOfVariables;++i) {\n            Object variable0 = allVariables[i];\n            if(columnTypes.get(variable0)==TypeInference.DataType.CATEGORICAL) {\n                continue;\n            }\n            \n            transposeDataList = new TransposeDataList();\n            \n            //extract values of first variable\n            transposeDataList.put(0, dataSet.getXColumn(variable0));\n            \n            for(int j=i;j<numberOfVariables;++j) {\n                Object variable1 = allVariables[j];\n                if(columnTypes.get(variable1)==TypeInference.DataType.CATEGORICAL) {\n                    continue;\n                }\n            \n                transposeDataList.put(1, dataSet.getXColumn(variable1));\n                \n                double value = 0.0;\n                if(type==BivariateType.COVARIANCE) {\n                    value = Descriptives.covariance(transposeDataList, true);\n                }\n                else if(type==BivariateType.PEARSONCORRELATION) {\n                    if(variable0.equals(variable1)) {\n                        value=1.0;\n                    }\n                    else {\n                        value = PearsonCorrelation.calculateCorrelation(transposeDataList);\n                    }\n                }\n                else if(type==BivariateType.SPEARMANCORRELATION) {\n                    if(variable0.equals(variable1)) {\n                        value=1.0;\n                    }\n                    else {\n                        value = SpearmanCorrelation.calculateCorrelation(transposeDataList);\n                    }\n                }\n                else if(type==BivariateType.KENDALLTAUCORRELATION) {\n                    if(variable0.equals(variable1)) {\n                        value=1.0;\n                    }\n                    else {\n                        value = KendallTauCorrelation.calculateCorrelation(transposeDataList);\n                    }\n                }\n                \n                //bivariateMatrix.internalData.get(variable0).internalData.put(variable1, value);\n                bivariateMatrix.put2d(variable0, variable1, value);\n                \n                if(!variable0.equals(variable1)) {\n                    /*\n                    if(!bivariateMatrix.internalData.containsKey(variable1)) {\n                        bivariateMatrix.internalData.put(variable1, new AssociativeArray());\n                    }\n                    bivariateMatrix.internalData.get(variable1).internalData.put(variable0, value);\n                    */\n                    bivariateMatrix.put2d(variable1, variable0, value);\n                }\n            }\n            //transposeDataList = null;\n        }\n        \n        return bivariateMatrix;\n    }", "        public void setMass(float mass) {\n            if (mass < 0)\n                throw new IllegalArgumentException(\"Negative mass provided!\");\n            this.mass = mass;\n        }\n", "    public boolean isEmailConfirmationEnabled() {\n        return emailConfirmationEnabled;\n    }\n", "public static void addNewDatabase ( final JTree projectTree ) { final CDatabase newDatabase = new CDatabase ( STR_ , CJdbcDriverNames . jdbcPostgreSQLDriverName , STR_ , STR_ , STR_ , STR_ , STR_ , BOOL_ , BOOL_ ) ; CDatabaseManager . instance ( ) . addDatabase ( newDatabase ) ; CNodeExpander . setSelectionPath ( projectTree , newDatabase ) ; }", "private static boolean isTextSplitable(String text,int index){\n  char c0=text.charAt(index);\n  char c1=text.charAt(index + 1);\n  if (isLetter(c0) && isLetter(c1)) {\n    return false;\n  }\n else   return !(NumberExpander.isDigit(c0) && NumberExpander.isDigit(c1));\n}\n", "default boolean hasAnnotation ( String qualifiedName ) { if ( hasDirectlyAnnotation ( qualifiedName ) ) { return BOOL_ ; } return getAllAncestors ( ) . stream ( ) . anyMatch ( null ) ; }", "default CompletableFuture < StreamEventsSlice > readStreamEventsBackward ( String stream , int start , int count , boolean resolveLinkTos ) { return readStreamEventsBackward ( stream , start , count , resolveLinkTos , null ) ; }", "    public void resetBuffer() {\n        servletResponse.resetBuffer();\n    }\n", "public boolean canBatch ( Lease lease ) { if ( ! ( super . canBatch ( lease ) && lease instanceof RemoteMethodControl ) ) { return BOOL_ ; } return ConstrainableProxyUtil . equivalentConstraints ( ( ( RemoteMethodControl ) lease ) . getConstraints ( ) , C", "private static String buildToolTip ( final ZyLabelContent content ) { return HtmlGenerator . getHtml ( content , MONOSPACE_FONT , BOOL_ ) ; }", "public UIGraphicTestCase ( String name ) { super ( name ) ; }", "\tprivate void _parseImports() throws DocumentationException {\n\t\t// suche alle Attribute im Klassen-Text;\n\t\tSourceHolder sh = getSourceHolder(); \n\t\tMatcher m = null;\n\t\t\n\t\tm = PAT_IMPORT.matcher(sh.getSourceBuffer());\n\t\twhile (m.find()) {\n\t\t\tif (sh.isCode(m.start(1))) {\n\t\t\t\tString allImports = m.group(2).trim(); \n\t\t\t\tString[] imps = allImports.split(\"[\\\\s]+([\\\\s]*\\\\/\\\\*.*?\\\\*\\\\/[\\\\s]*)*\");\n\t\t\t\tfor (int n=0; n<imps.length; n++) {\n\t\t\t\t\t_imports.put(imps[n], imps[n]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "public abstract V ternaryOperation ( AbstractInsnNode insn , V value1 , V value2 , V value3 ) throws AnalyzerException ;", "public static void onRestoreState(Context context, Bundle bundle) {\r\n        // The Bundle will be null sometimes\r\n        if (bundle == null)  return;\r\n\r\n        // Get the List created in onSaveState()\r\n        final ArrayList<Style> styleList = bundle.getParcelableArrayList(BUNDLE_KEY);\r\n\r\n        if (styleList == null) {\r\n            Log.e(SuperActivityToast.class.getName(), \"Cannot recreate \" +\r\n                    \"SuperActivityToasts onRestoreState(). Was onSaveState() called?\");\r\n            return;\r\n        }\r\n\r\n        // Create a flag that knows if the SuperActivityToast is first in the List or not\r\n        boolean firstInList = true;\r\n        for (Style style : styleList) {\r\n            if (!style.isSuperActivityToast) new SuperToast(context, style).show();\r\n            else {\r\n                // This SuperActivityToast was most likely showing before the orientation change so ignore the show animation\r\n                if (firstInList)\r\n                    new SuperActivityToast(context, style).fromOrientationChange().show();\r\n                else new SuperActivityToast(context, style).show();\r\n            }\r\n            firstInList = false;\r\n        }\r\n    }", "    public void addEdge(Name vname1, Name vname2) {\n        Vertex vertex1 = vertices.get(vname1);\n        Vertex vertex2 = vertices.get(vname2);\n\n        //create vertex1<----vertex2 edge\n        Edge e = new Edge(/*to*/ vertex1, /*from*/ vertex2);\n        vertex1.addEdge(e);\n        vertex2.addEdge(e);\n    }\n", "public ReilMemory ( final Endianness endianness ) { this . endianness = Preconditions . checkNotNull ( endianness , STR_ ) ; }", "public void dispatchEvent(Event event){\nsynchronized (mEventsStagingLock) {\n    mEventStaging.add(event);\n  }\n}\n", "public JsonResponse scheduleBlastFromTemplate(String template, String list, Date scheduleTime, Blast blast) throws IOException {\n        blast.setCopyTemplate(template);\n        blast.setList(list);\n        blast.setScheduleTime(scheduleTime);\n        return apiPost(blast);\n    }", "public FastCharBuffer append(String string){\n  int len=string.length();\n  if (len == 0) {\n    return this;\n  }\n  int end=offset + len;\n  int newSize=size + len;\n  int remaining=len;\n  int start=0;\n  if (currentBuffer != null) {\n    int part=Math.min(remaining,currentBuffer.length - offset);\n    string.getChars(0,part,currentBuffer,offset);\n    remaining-=part;\n    offset+=part;\n    size+=part;\n    start+=part;\n  }\n  if (remaining > 0) {\n    needNewBuffer(newSize);\n    int part=Math.min(remaining,currentBuffer.length - offset);\n    string.getChars(start,start + part,currentBuffer,offset);\n    offset+=part;\n    size+=part;\n  }\n  return this;\n}\n", "public static byte [ ] encode ( byte [ ] input , int offset , int len , int flags ) { Encoder encoder = new Encoder ( flags , null ) ; int output_len = len / NUM_ * NUM_ ; if ( encoder . do_padding ) { if ( len % NUM_ > NUM_ ) { output_len += NUM_ ; } } e", "public static byte [ ] serializeToByteArray ( Object value ) { try { ByteArrayOutputStream buffer = new ByteArrayOutputStream ( ) ; try ( ObjectOutputStream oos = new ObjectOutputStream ( buffer ) ) { oos . writeObject ( value ) ; } return buffer . toByteArray ( ) ; } catch ( IOException exn ) { throw new IllegalArgumentException ( STR_ + value , exn ) ; } }", "protected void simpleClear(){\n  _numResults=0;\n  HIDDEN.clear();\n  super.simpleClear();\n}\n", "public void onBecomingCoordinator(){\n  crdSinceTs.compareAndSet(0,U.currentTimeMillis());\n}\n", "void sleep(long millis){\n  try {\n    Thread.sleep(millis);\n  }\n catch (  InterruptedException ie) {\n    AssertionFailedError afe=new AssertionFailedError(\"Unexpected InterruptedException\");\n    afe.initCause(ie);\n    throw afe;\n  }\n}\n", "    protected void rehash(int newCapacity) {\n        int oldCapacity = _set.length;\n        K oldKeys[] = (K[]) _set;\n        long oldVals[] = _values;\n\n        _set = new Object[newCapacity];\n        Arrays.fill(_set, FREE);\n        _values = new long[newCapacity];\n\n        for (int i = oldCapacity; i-- > 0;) {\n          if(oldKeys[i] != FREE && oldKeys[i] != REMOVED) {\n                K o = oldKeys[i];\n                int index = insertionIndex(o);\n                if (index < 0) {\n                    throwObjectContractViolation(_set[(-index -1)], o);\n                }\n                _set[index] = o;\n                _values[index] = oldVals[i];\n            }\n        }\n    }\n", "    public void removeFromSuperlayer(){\n        throw new RuntimeException(\"Stub\");\n    }\n", "    public void updateRoot() {\n        updateRoot(getRootItem(), false);\n    }\n", "public void marshall(DescribeObjectRequest describeObjectRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (describeObjectRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(describeObjectRequest.getPath(), PATH_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void remove(int index){\n  m_List.remove(index);\n}\n", "    protected void cleanupAfterFailure() {\n        if (isTypeInit()) {\n            getInitProcessorSafe().cleanUp();\n        } else if (isTypeUpdate()) {\n            getUpdateProcessorSafe().cleanUp();\n        } else if (isTypeFinalize()) {\n            getFinalProcessorSafe().cleanUp();\n        }\n    }\n", "\tpublic String getOwnedOperationsAuxText(Object object, AdapterFactory adapterFactory) {\n\t\tif (object == null) {\n\t\t\treturn INodeTextProvider.NULL_TEXT;\n\t\t}\n\t\tList<AtcFunctionalOp> ownedOperations = ((AtcTransformation)object).getOwnedOperations();\n\t\tif (ownedOperations == null || ownedOperations.isEmpty()) {\n\t\t\treturn INodeTextProvider.NULL_TEXT;\n\t\t}\n\t\treturn doGetOwnedOperationsAuxText(ownedOperations, adapterFactory);\n\t}\n", "public void add ( Signature sig , Type [ ] exceptions ) { signatures . put ( sig , exceptions ) ; }", "static int indexOfHetro(int[] cycle, int[] contribution) {\n        int index = -1;\n        for (int i = 0; i < cycle.length - 1; i++) {\n            if (contribution[cycle[i]] == 2) index = index == -1 ? i : -2;\n        }\n        return index;\n    }", "public static final Function<Long,Boolean> isNull() {\r\n        return (Function<Long,Boolean>)((Function)FnObject.isNull());\r\n    }", "public void removeListener ( final INaviGraphListener listener ) { super . removeListener ( listener ) ; m_listeners . removeListener ( listener ) ; m_synchronizer . removeListener ( listener ) ; }", "public void setExpandedSectionsEnabled(final boolean EXPANDED_SECTIONS_ENABLED) {\n        expandedSectionsEnabled = EXPANDED_SECTIONS_ENABLED;\n        init(getInnerBounds().width, getInnerBounds().height);\n        repaint(getInnerBounds());\n    }", "public void flush ( ) throws IOException { this . flushBuffer ( ) ; }", "public static AuditEntryBean policiesReordered(ClientVersionBean cvb, PolicyType policyType,\n            ISecurityContext securityContext) {\n        AuditEntryBean entry = newEntry(cvb.getClient().getOrganization().getId(), AuditEntityType.Client, securityContext);\n        entry.setEntityId(cvb.getClient().getId());\n        entry.setEntityVersion(cvb.getVersion());\n        entry.setWhat(AuditEntryType.ReorderPolicies);\n        return entry;\n    }", "public CFunctionSelectionTree(final IDatabase database,final IActionProvider actionProvider){\n  Preconditions.checkNotNull(database,\"IE01575: Database argument can not be null\");\n  Preconditions.checkNotNull(actionProvider,\"IE01576: Action provider argument can not be null\");\n  final DefaultTreeModel model=new DefaultTreeModel(null);\n  setModel(model);\n  setRootVisible(false);\n  model.setRoot(new CRootNode(database,model,actionProvider));\n  setCellRenderer(new IconNodeRenderer());\n  addMouseListener(new InternalMouseListener());\n}\n", "public static Image findImageByIdOrByTag( String name, DockerClient dockerClient ) {\n\n\t\tImage image = null;\n\t\tif( ! Utils.isEmptyOrWhitespaces( name )) {\n\t\t\tLogger logger = Logger.getLogger( DockerUtils.class.getName());\n\n\t\t\tList<Image> images = dockerClient.listImagesCmd().exec();\n\t\t\tif(( image = DockerUtils.findImageById( name, images )) != null )\n\t\t\t\tlogger.fine( \"Found a Docker image with ID \" + name );\n\t\t\telse if(( image = DockerUtils.findImageByTag( name, images )) != null )\n\t\t\t\tlogger.fine( \"Found a Docker image with tag \" + name );\n\t\t}\n\n\t\treturn image;\n\t}", "public void paintEditorPaneBorder ( SynthContext context , Graphics g , int x , int y , int w , int h ) { paintBorder ( context , g , x , y , w , h , null ) ; }", "\tpublic boolean equals(Object object) {\n\t\tif (!(object instanceof DCCoord)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tDCCoord coord = (DCCoord) object;\n\t\t\tif (coord.getBoard() == board \n\t\t\t\t\t&& coord.getFile() == file\n\t\t\t\t\t&& coord.getRank() == rank) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n", "private void fillFieldValues(){\n  dotSizeField.setText(Integer.toString(model.getDotSize()));\n  autoRange.setSelected(model.isAutoRange());\n  autoDomain.setSelected(model.isAutoRange());\n  showHistory.setSelected(model.isShowHistory());\n  maxRangeField.setText(Double.toString(model.getUpperRangeBoundary()));\n  minRangeField.setText(Double.toString(model.getLowerRangeBoundary()));\n  maxDomainField.setText(Double.toString(model.getUpperDomainBoundary()));\n  minDomainField.setText(Double.toString(model.getLowerDomainBoundary()));\n  setIndicatorColor();\n}\n", "protected synchronized void addAllDataSeries(){\n  for (  IndexedProcessVar pv : (Iterable<IndexedProcessVar>)pvs.values()) {\n    XYSeries series=(XYSeries)pv.get(FID_DATA_SERIES);\n    if (series == null) {\n      series=new XYSeries(String.valueOf(pv.get(EcuDataPv.FID_DESCRIPT)));\n      pv.put(FID_DATA_SERIES,series);\n      pv.addPvChangeListener(this,PvChangeEvent.PV_MODIFIED);\n    }\n  }\n}\n", "\tprotected void addLabelPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_PhaseTaskUseRelation_label_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_PhaseTaskUseRelation_label_feature\", \"_UI_PhaseTaskUseRelation_type\"),\n\t\t\t\t ProcessclassdiagramPackage.Literals.PHASE_TASK_USE_RELATION__LABEL,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "private void checkEglError(String msg) {\n        int error;\n        if ((error = EGL14.eglGetError()) != EGL14.EGL_SUCCESS) {\n            throw new RuntimeException(msg + \": EGL error: 0x\" + Integer.toHexString(error));\n        }\n    }", "public abstract boolean isGlobal ( ) ;", "public SASJavaExec ( String execCommand , String script ) { this ( execCommand , script , null ) ; }", "private Bitmap processBitmap ( int resId ) { if ( BuildConfig . DEBUG ) { Log . d ( TAG , STR_ + resId ) ; } return decodeSampledBitmapFromResource ( mResources , resId , mImageWidth , mImageHeight , getImageCache ( ) ) ; }", "List < RawTypeInstanceReference > loadTypeInstanceReferences ( INaviModule module ) throws CouldntLoadDataException ;", "public void addOutput(TOutput output){\n  outputs.add(output);\n}\n", "public int nrOfTables ( ) { return superSection . nrOfTables ( ) ; }", "public void put (int key, int value)\n    {\n        _modCount++;\n\n        // check to see if we've passed our load factor, if so: resize\n        ensureCapacity(_size + 1);\n\n        int index = Math.abs(key)%_buckets.length;\n        Record rec = _buckets[index];\n\n        // either we start a new chain\n        if (rec == null) {\n            _buckets[index] = new Record(key, value);\n            _size++; // we're bigger\n            return;\n        }\n\n        // or we replace an element in an existing chain\n        Record prev = rec;\n        for (; rec != null; rec = rec.next) {\n            if (rec.key == key) {\n                rec.value = value; // we're not bigger\n                return;\n            }\n            prev = rec;\n        }\n\n        // or we append it to this chain\n        prev.next = new Record(key, value);\n        _size++; // we're bigger\n    }", "public synchronized Map<String,Map<String,TungstenProperties>> loadClusterDataSourceMap() throws ConfigurationException {\n  return loadClusterConfiguration(ResourceType.DATASOURCE);\n}\n", "public static XNodeSet executeFilterExpr(int context, XPathContext xctxt, \n  \t\t\t\t\t\t\t\t\t\t\t\tPrefixResolver prefixResolver,\n  \t\t\t\t\t\t\t\t\t\t\t\tboolean isTopLevel,\n  \t\t\t\t\t\t\t\t\t\t\t\tint stackFrame,\n  \t\t\t\t\t\t\t\t\t\t\t\tExpression expr )\n    throws org.apache.xml.utils.WrappedRuntimeException\n  {\n    PrefixResolver savedResolver = xctxt.getNamespaceContext();\n    XNodeSet result = null;\n\n    try\n    {\n      xctxt.pushCurrentNode(context);\n      xctxt.setNamespaceContext(prefixResolver);\n\n      // The setRoot operation can take place with a reset operation, \n      // and so we may not be in the context of LocPathIterator#nextNode, \n      // so we have to set up the variable context, execute the expression, \n      // and then restore the variable context.\n\n      if (isTopLevel)\n      {\n        // System.out.println(\"calling m_expr.execute(getXPathContext())\");\n        VariableStack vars = xctxt.getVarStack();\n\n        // These three statements need to be combined into one operation.\n        int savedStart = vars.getStackFrame();\n        vars.setStackFrame(stackFrame);\n\n        result = (org.apache.xpath.objects.XNodeSet) expr.execute(xctxt);\n        result.setShouldCacheNodes(true);\n\n        // These two statements need to be combined into one operation.\n        vars.setStackFrame(savedStart);\n      }\n      else\n          result = (org.apache.xpath.objects.XNodeSet) expr.execute(xctxt);\n\n    }\n    catch (javax.xml.transform.TransformerException se)\n    {\n\n      // TODO: Fix...\n      throw new org.apache.xml.utils.WrappedRuntimeException(se);\n    }\n    finally\n    {\n      xctxt.popCurrentNode();\n      xctxt.setNamespaceContext(savedResolver);\n    }\n    return result;\n  }", "public void tickSyncScheduler ( ) { this . syncScheduler . tick ( ) ; }", "\tpublic Result evaluate( HttpResponseData httpResponse, Variables variables, long ruleId, java.util.Date scanStartTime ) throws DefinitionEvaluationException, SQLException{\n\t\tConnection connection = null;\n\t\t\n\t\ttry{\n\t\t\tconnection = Application.getApplication().getDatabaseConnection(Application.DatabaseAccessType.SCANNER);\n\t\t\treturn evaluate( httpResponse, variables, ruleId, connection, scanStartTime );\n\t\t}\n\t\tcatch(NoDatabaseConnectionException e){\n\t\t\tthrow new DefinitionEvaluationException(\"Database connection could not be established\", e);\n\t\t}\n\t\tfinally{\n\t\t\tif( connection != null ){\n\t\t\t\tconnection.close();\n\t\t\t}\n\t\t}\n\t\t\n\t}\n", "protected void validate(String operationType) throws Exception\r\n\t{\r\n\t\tsuper.validate(operationType);\r\n\r\n\t\tMPSInt cpu_socket_validator = new MPSInt();\r\n\t\tcpu_socket_validator.validate(operationType, cpu_socket, \"\\\"cpu_socket\\\"\");\r\n\t\t\r\n\t\tMPSIPAddress host_ip_address_validator = new MPSIPAddress();\r\n\t\thost_ip_address_validator.validate(operationType, host_ip_address, \"\\\"host_ip_address\\\"\");\r\n\t\t\r\n\t\tMPSInt vf_total_validator = new MPSInt();\r\n\t\tvf_total_validator.validate(operationType, vf_total, \"\\\"vf_total\\\"\");\r\n\t\t\r\n\t\tMPSInt vf_assigned_validator = new MPSInt();\r\n\t\tvf_assigned_validator.validate(operationType, vf_assigned, \"\\\"vf_assigned\\\"\");\r\n\t\t\r\n\t}", "@Override\n    public String getDescription() {\n        StringBuilder builder = new StringBuilder(\"class path resource [\");\n\n        if (clazz != null) {\n            builder.append(ResourceUtils.classPackageAsResourcePath(clazz));\n            builder.appen", "@Override\n    public java.util.concurrent.Future<DescribeStreamResult> describeStreamAsync(String streamName, Integer limit, String exclusiveStartShardId,\n            com.amazonaws.handlers.AsyncHandler<DescribeStreamRequest, DescribeStreamResult> asyncHandler) {\n\n        return describeStreamAsync(new DescribeStreamRequest().withStreamName(streamName).withLimit(limit).withExclusiveStartShardId(exclusiveStartShardId),\n                asyncHandler);\n    }", "    public double getRotation() {\n        if (transform == null) {\n            return 0;\n        }\n        return transform.getRotation();\n    }\n", "private void init(int max) {\n        if ((max != INTERNAL) && (max != PROVIDER) && (max != PRIVILEGED))\n            throw new IllegalArgumentException(\"invalid action\");\n\n        if (max == NONE)\n            throw new IllegalArgumentException(\"missing action\");\n\n        if (getName() == null)\n            throw new NullPointerException(\"action can't be null\");\n\n        this.max = max;\n    }", "public static StackType determineIpVersionFromAddresses(Collection<InetAddress> addrs) throws Exception {\n    \tSet<InetAddress> ipv4_addrs= new HashSet<>() ;\n    \tSet<InetAddress> ipv6_addrs= new HashSet<>() ;\n\n        for(InetAddress address: addrs) {\n            if (address instanceof Inet4Address)\n                ipv4_addrs.add(address) ;\n            else\n                ipv6_addrs.add(address) ;\n        }\n\n        log.trace(\"all addrs=\" + addrs + \", IPv4 addrs=\" + ipv4_addrs + \", IPv6 addrs=\" + ipv6_addrs);\n\n\t\t// the user supplied 1 or more IP address inputs. Check if we have a consistent set\n        if (!addrs.isEmpty()) {\n            if (!ipv4_addrs.isEmpty() && !ipv6_addrs.isEmpty()) {\n                throw new RuntimeException(\"all addresses have to be either IPv4 or IPv6: IPv4 addresses=\" +\n                        ipv4_addrs + \", IPv6 addresses=\" + ipv6_addrs);\n            }\n            return !ipv6_addrs.isEmpty()? StackType.IPv6 : StackType.IPv4;\n        }\n        return StackType.Unknown;\n    }", "boolean isReadOnlyTask ( ) ;", "public static boolean usesFirstOperand ( final Integer mnemonic ) { return ! mnemonic . equals ( _OPCODE_NOP ) ; }", "private boolean isValidGeometryPath(String path){\n  return path.equals(\"\") || path.equals(\"geometry\") || path.equals(\"features.[].geometry\");\n}\n", "public byte[] encodeVariantLong(long read){\n  long value=(read << 1) ^ (read >> 63);\n  ByteArrayOutputStream bytes=new ByteArrayOutputStream();\n  while (true) {\n    if ((value & ~0x7FL) == 0) {\n      bytes.write((int)value);\n      break;\n    }\n else {\n      bytes.write(((int)value & 0x7F) | 0x80);\n      value>>>=7;\n    }\n  }\n  return bytes.toByteArray();\n}\n", "\t\tpublic void invalidate(String name) {\n\t\t\tgetTokenValues().remove(name);\n\t\t}\n", "private static void updateProperties(CmsObject cms, CmsResource resource, CmsMacroResolver macroResolver)\n    throws CmsException {\n\n        Iterator<CmsProperty> it = cms.readPropertyObjects(resource, false).iterator();\n        while (it.hasNext()) {\n            CmsProperty property = it.next();\n            String resValue = null;\n            if (property.getResourceValue() != null) {\n                resValue = macroResolver.resolveMacros(property.getResourceValue());\n            }\n            String strValue = null;\n            if (property.getStructureValue() != null) {\n                strValue = macroResolver.resolveMacros(property.getStructureValue());\n            }\n            CmsProperty newProperty = new CmsProperty(property.getName(), strValue, resValue);\n            cms.writePropertyObject(cms.getSitePath(resource), newProperty);\n        }\n    }", "        private void quickSort(String arr[], int left, int right) { \n            int index = partition(arr, left, right); \n            if (left < index - 1) {\n                PSortTask task = new PSortTask(execService, taskCounter, semaphore, arr, left, index - 1);\n                execService.submit(task);\n            }\n            if (index < right)\n                quickSort(arr, index, right);\n        }\n", "private static void extract(String s, int start, ExtractFloatResult result) {\n        // Now looking for ' ', ',', '.' or '-' from the start.\n        int currentIndex = start;\n        boolean foundSeparator = false;\n        result.mEndWithNegOrDot = false;\n        boolean secondDot = false;\n        boolean isExponential = false;\n        for (; currentIndex < s.length(); currentIndex++) {\n            boolean isPrevExponential = isExponential;\n            isExponential = false;\n            char currentChar = s.charAt(currentIndex);\n            switch (currentChar) {\n                case ' ':\n                case ',':\n                    foundSeparator = true;\n                    break;\n                case '-':\n                    // The negative sign following a 'e' or 'E' is not a separator.\n                    if (currentIndex != start && !isPrevExponential) {\n                        foundSeparator = true;\n                        result.mEndWithNegOrDot = true;\n                    }\n                    break;\n                case '.':\n                    if (!secondDot) {\n                        secondDot = true;\n                    } else {\n                        // This is the second dot, and it is considered as a separator.\n                        foundSeparator = true;\n                        result.mEndWithNegOrDot = true;\n                    }\n                    break;\n                case 'e':\n                case 'E':\n                    isExponential = true;\n                    break;\n            }\n            if (foundSeparator) {\n                break;\n            }\n        }\n        // When there is nothing found, then we put the end position to the end\n        // of the string.\n        result.mEndPosition = currentIndex;\n    }", "@Override\n  public void validate () throws SchedulerException\n  {\n    super.validate ();\n\n    if (m_eRepeatIntervalUnit == null ||\n        !(m_eRepeatIntervalUnit.equals (EIntervalUnit.SECOND) ||\n          m_eRepeatIntervalUnit.equals (EIntervalUnit.MINUTE) ||\n          m_eRepeatIntervalUnit.equals (EIntervalUnit.HOUR)))\n      throw new SchedulerException (\"Invalid repeat IntervalUnit (must be SECOND, MINUTE or HOUR).\");\n    if (m_nRepeatInterval < 1)\n    {\n      throw new SchedulerException (\"Repeat Interval cannot be zero.\");\n    }\n\n    // Ensure interval does not exceed 24 hours\n    final long secondsInHour = 24 * 60 * 60L;\n    if (m_eRepeatIntervalUnit == EIntervalUnit.SECOND && m_nRepeatInterval > secondsInHour)\n    {\n      throw new SchedulerException (\"repeatInterval can not exceed 24 hours (\" +\n                                    secondsInHour +\n                                    \" seconds). Given \" +\n                                    m_nRepeatInterval);\n    }\n    if (m_eRepeatIntervalUnit == EIntervalUnit.MINUTE && m_nRepeatInterval > secondsInHour / 60L)\n    {\n      throw new SchedulerException (\"repeatInterval can not exceed 24 hours (\" +\n                                    secondsInHour / 60L +\n                                    \" minutes). Given \" +\n                                    m_nRepeatInterval);\n    }\n    if (m_eRepeatIntervalUnit == EIntervalUnit.HOUR && m_nRepeatInterval > 24)\n    {\n      throw new SchedulerException (\"repeatInterval can not exceed 24 hours. Given \" + m_nRepeatInterval + \" hours.\");\n    }\n\n    // Ensure timeOfDay is in order.\n    if (getEndTimeOfDay () != null && !getStartTimeOfDay ().before (getEndTimeOfDay ()))\n    {\n      throw new SchedulerException (\"StartTimeOfDay \" +\n                                    m_aStartTimeOfDay +\n                                    \" should not come after endTimeOfDay \" +\n                                    m_aEndTimeOfDay);\n    }\n  }", "@Override\n  public final SalesReturnLine process(\n    final Map<String, Object> pAddParam,\n      final SalesReturnLine pEntityPb,\n        final IRequestData pRequestData) throws Exception {\n    SalesReturnLine entity = this.prcAccEntityPbCopy\n      .process(pAddParam, pEntityPb, pRequestData);\n    entity.setItsQuantity(BigDecimal.ZERO);\n    entity.setItsCost(BigDecimal.ZERO);\n    entity.setItsTotal(BigDecimal.ZERO);\n    entity.setTotalTaxes(BigDecimal.ZERO);\n    entity.setSubtotal(BigDecimal.ZERO);\n    entity.setTaxesDescription(null);\n    return entity;\n  }", "    public void setVerticalAlignment(int verticalAlignment) {\n        checkVerticalKey(verticalAlignment);\n        this.verticalAlignment = verticalAlignment;\n    }\n", "private boolean allowedForFallback(String key){\n  return KEY_UNLOCK_BACKUP_INFO.equals(key) || KEY_UNLOCK_SET_PATTERN.equals(key) || KEY_UNLOCK_SET_PIN.equals(key);\n}\n", "    public void setFont(final Font value) {\n        assert value != null : \"value is null\";\n\n        font = value;\n        updateGraphics(getGraphics(), getBounds());\n    }\n", "public static String userName() {\n        return fixNonWord(StringUtils.left(JDefaultName.firstName(), 1).toLowerCase() + JDefaultName.lastName().toLowerCase() + JDefaultNumber.randomNumberString(2));\n    }", "@Override\n    public InputType getOutputType(InputType... inputType) throws InvalidKerasConfigurationException {\n        if (inputType.length > 1)\n            throw new InvalidKerasConfigurationException(\n                    \"Keras Convolution layer accepts only one input (received \" + inputType.length + \")\");\n        InputType.InputTypeConvolutional convType = (InputType.InputTypeConvolutional) inputType[0];\n\n        // Override input/output shape and input channels dynamically. This works since getOutputType will always\n        // be called when initializing the model.\n        ((LocallyConnected2D) this.layer).setInputSize(new int[] {(int) convType.getHeight(),(int) convType.getWidth()});\n        ((LocallyConnected2D) this.layer).setNIn(convType.getChannels());\n        ((LocallyConnected2D) this.layer).computeOutputSize();\n\n        InputPreProcessor preprocessor = getInputPreprocessor(inputType[0]);\n        if (preprocessor != null) {\n            return this.getLocallyConnected2DLayer().getOutputType(-1, preprocessor.getOutputType(inputType[0]));\n        }\n        return this.getLocallyConnected2DLayer().getOutputType(-1, inputType[0]);\n    }", "public boolean dominates(RegionVersionVector<T> other){\n  return !other.isNewerThanOrCanFillExceptionsFor(this);\n}\n", "public void read(InputStream is) throws FitsException {\n  if (is instanceof ArrayDataInput) {\n    this.dataStr=(ArrayDataInput)is;\n  }\n else {\n    this.dataStr=new BufferedDataInputStream(is);\n  }\n  read();\n}\n", "    public void setfeatureNoise(boolean d) {\n\tm_featureNoise = d;\n\tif (d == false)\n\t    {\n\t    setfeatureNoiseTest(false);\n\t    }\n    }\n", "   public void deleteMailMessages() {\n      // TODO change checked for selected\n      deleteMailMessages(getSelectedMailMessageIds());\n   }\n", "protected void insertDeltaTree(IJavaElement element, JavaElementDelta delta) {\n\tJavaElementDelta childDelta= createDeltaTree(element, delta);\n\tif (!this.equalsAndSameParent(element, getElement())) { // handle case of two jars that can be equals but not in the same project\n\t\taddAffectedChild(childDelta);\n\t}\n}\n", "public void show(long downloadID,DownloadStatusListener downloadStatusListener){\n  this.downloadID=downloadID;\n  listeners.add(downloadStatusListener);\n  showDownloadProgress();\n}", "    private void set(int x, int y, byte value) {\n        array[index(x, y)] = value;\n    }\n", "public synchronized void shutdown ( boolean immediate ) { logger . info ( STR_ + name ) ; for ( Stage stage : stages ) stage . shutdown ( immediate ) ; shutdownTaskExec . shutdownNow ( ) ; }", "public int getPitch(int number) {\n        switch (number) {\n            case 1: return pitch;\n            case 2: return (int)Util.bytesToNumber(packetBytes, 153, 3);\n            case 3: return (int)Util.bytesToNumber(packetBytes, 193, 3);\n            case 4: return (int)Util.bytesToNumber(packetBytes, 197, 3);\n            default: throw new IllegalArgumentException(\"Pitch number must be between 1 and 4\");\n        }\n    }", "private void rememberUserInputForPokemonNameIfNewNickname(Pokemon pokemon){\n  if (!pokemonName.equals(pokemon.name) && pokeInfoCalculator.get(pokemonName) == null) {\n    putCorrection(pokemonName,pokemon.name);\n  }\n}\n", "public static String unescape ( String in ) { StringBuilder out = new StringBuilder ( ) ; char last = NUM_ ; for ( char c : in . toCharArray ( ) ) { if ( c == ESC ) { if ( last != NUM_ && last == ESC ) out . append ( c ) ; } else out . append ( c ) ; last", "private static boolean compareLevenshtein(final String str1,final String str2,final int limit){\n  if (str1.equalsIgnoreCase(str2)) {\n    return true;\n  }\n else   if (limit < 1) {\n    return false;\n  }\n else {\n    final int dist=limitedLevenshtein(str1.toLowerCase(),str2.toLowerCase(),0,0,limit);\n    return dist <= limit;\n  }\n}\n", "public synchronized Identifier resolve(Environment env,Identifier nm) throws ClassNotFound {\n  if (tracing)   env.dtEnter(\"Imports.resolve: \" + nm);\n  if (nm.hasAmbigPrefix()) {\n    nm=nm.removeAmbigPrefix();\n  }\n  if (nm.isQualified()) {\n    if (tracing)     env.dtExit(\"Imports.resolve: QUALIFIED \" + nm);\n    return nm;\n  }\n  if (checked <= 0) {\n    checked=0;\n    resolve(env);\n  }\n  Identifier className=(Identifier)classes.get(nm);\n  if (className != null) {\n    if (tracing)     env.dtExit(\"Imports.resolve: PREVIOUSLY IMPORTED \" + nm);\n    return className;\n  }\n  Identifier id=Identifier.lookup(currentPackage,nm);\n  if (importable(id,env)) {\n    className=id;\n  }\n else {\n    Enumeration e=packages.elements();\n    while (e.hasMoreElements()) {\n      IdentifierToken t=(IdentifierToken)e.nextElement();\n      id=Identifier.lookup(t.getName(),nm);\n      if (importable(id,env)) {\n        if (className == null) {\n          className=id;\n        }\n else {\n          if (tracing)           env.dtExit(\"Imports.resolve: AMBIGUOUS \" + nm);\n          throw new AmbiguousClass(className,id);\n        }\n      }\n    }\n  }\n  if (className == null) {\n    if (tracing)     env.dtExit(\"Imports.resolve: NOT FOUND \" + nm);\n    throw new ClassNotFound(nm);\n  }\n  classes.put(nm,className);\n  if (tracing)   env.dtExit(\"Imports.resolve: FIRST IMPORT \" + nm);\n  return className;\n}\n", "private boolean parseOpenBracket ( ) { int startIndex = index ; index ++ ; Text node = appendText ( STR_ ) ; addBracket ( Bracket . link ( node , startIndex , lastBracket , lastDelimiter ) ) ; return BOOL_ ; }", "public static final SimpleMutableDateTime now(ZoneId zoneId)\r\n    {\r\n        ZonedDateTime zdt = ZonedDateTime.now(zoneId);\r\n        SimpleMutableDateTime smt = SimpleMutableDateTime.from(zdt);\r\n        return smt;\r\n    }", "public static boolean endsWithIgnoreCase(String src,String subS){\n  String sub=subS.toLowerCase();\n  int sublen=sub.length();\n  int j=0;\n  int i=src.length() - sublen;\n  if (i < 0) {\n    return false;\n  }\n  while (j < sublen) {\n    char source=Character.toLowerCase(src.charAt(i));\n    if (sub.charAt(j) != source) {\n      return false;\n    }\n    j++;\n    i++;\n  }\n  return true;\n}\n", "public final void redirectOuts(BasicBlock b,BasicBlock bCopy,IR ir){\n  BranchOperand copyTarget=bCopy.makeJumpTarget();\n  BranchOperand bTarget=b.makeJumpTarget();\n  for (Enumeration<Instruction> ie=enumerateBranchInstructions(); ie.hasMoreElements(); ) {\n    Instruction s=ie.nextElement();\n    s.replaceSimilarOperands(bTarget,copyTarget);\n  }\n  if (getFallThroughBlock() == b) {\n    Instruction g=Goto.create(GOTO,copyTarget);\n    appendInstruction(g);\n  }\n  recomputeNormalOut(ir);\n}\n", "  public boolean forward(int numSegments) {\n    return forward(numSegments, true);\n  }\n", "\tprivate void createEmptyPropsFile() {\n\t\tFile f = new File(RunningProperties.TEST_PARAMETERS_EMPTY_FILE);\n\t\ttry {\n\t\t\tf.createNewFile();\n\t\t} catch (Exception e) {\n\t\t\tlog.warning(\"Failed creating empty properties file for tests parameters\" + e.getMessage());\n\t\t}\n\t}\n", "    public boolean containsBuddy(Buddy buddy) {\n    \treturn this.buddies.containsValue(buddy);\n    }\n", "public final boolean isUnified(AnalyzedToken matchToken,\n      Map<String, List<String>> uFeatures, boolean lastReading, boolean isMatched) {\n    if (inUnification) {\n      if (isMatched) {\n        uniMatched |= isSatisfied(matchToken, uFeatures);\n      }\n      uniAllMatched = uniMatched;\n\n      if (lastReading) {\n        startNextToken();\n        uniMatched = false;\n      }\n      return uniAllMatched && getFinalUnificationValue(uFeatures);\n    } else {\n      if (isMatched) {\n        isSatisfied(matchToken, uFeatures);\n      }\n    }\n    if (lastReading) {\n      inUnification = true;\n      uniMatched = false;\n      startUnify();\n    }\n    return true;\n  }", "public void visit ( String name , Object value ) { if ( av != null ) { av . visit ( name , value ) ; } }", "public int hashCode ( ) { return lease . getReferentUuid ( ) . hashCode ( ) ; }", "public native void refresh ( ) ;", "synchronized void writeAddInfo(ByteArrayOutputStream os)\r\n\t{\r\n\t\tos.write(getAddInfoLength());\r\n\t\tfor (int i = 0; i < addInfo.length; i++)\r\n\t\t\tif (addInfo[i] != null) {\r\n\t\t\t\tos.write(i);\r\n\t\t\t\tos.write(addInfo[i].length);\r\n\t\t\t\tos.write(addInfo[i], 0, addInfo[i].length);\r\n\t\t\t}\r\n\t}", "protected void add(Edge edge){\n  edges.add(edge);\n  add(edge.getDirEdge(0));\n  add(edge.getDirEdge(1));\n}\n", "    public void write(String tag, boolean value) {\n\n        element(tag, Boolean.toString(value));\n    }\n", "public void processBytes(byte[] in,int inOff,int len){\n  if (len == 0) {\n    return;\n  }\n  if (len < 0) {\n    throw new IllegalArgumentException(\"Can't have a negative input length!\");\n  }\n  if (bufOff + len > buf.length) {\n    throw new DataLengthException(\"attempt to process message too long for cipher\");\n  }\n  System.arraycopy(in,inOff,buf,bufOff,len);\n  bufOff+=len;\n}\n", "public static void writeBinaryFile ( final File file , final byte [ ] data ) throws IOException { try ( FileOutputStream fos = new FileOutputStream ( file ) ) { fos . write ( data ) ; } }", "protected abstract String produce ( S3ObjectSummary s3Object , String offset , int maxBatchSize , BatchMaker batchMaker ) throws StageException , BadSpoolObjectException ;", "\tpublic void save() throws IOException {\n\t\t// TODO re-enable history\n\t\t// history.record(s, SketchHistory.SAVE);\n\n\t\tBase.saveFile(program, file);\n\t\tmodified = false;\n\t}\n", "\tpublic void stopRecording() {\n\t\tSwingUtilities.invokeLater(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\taudioDevice.finish();\n\t\t\t\tisRecording = false;\n\t\t\t\tisListening = false;\n\t\t\t}\n\t\t});\n\t}\n", "public void show ( Animation anim ) { show ( BOOL_ , anim ) ; }", "private void readAssignments(Project plannerProject)\n   {\n      Allocations allocations = plannerProject.getAllocations();\n      List<Allocation> allocationList = allocations.getAllocation();\n      Set<Task> tasksWithAssignments = new HashSet<Task>();\n\n      for (Allocation allocation : allocationList)\n      {\n         Integer taskID = getInteger(allocation.getTaskId());\n         Integer resourceID = getInteger(allocation.getResourceId());\n         Integer units = getInteger(allocation.getUnits());\n\n         Task task = m_projectFile.getTaskByUniqueID(taskID);\n         Resource resource = m_projectFile.getResourceByUniqueID(resourceID);\n\n         if (task != null && resource != null)\n         {\n            Duration work = task.getWork();\n            int percentComplete = NumberHelper.getInt(task.getPercentageComplete());\n\n            ResourceAssignment assignment = task.addResourceAssignment(resource);\n            assignment.setUnits(units);\n            assignment.setWork(work);\n\n            if (percentComplete != 0)\n            {\n               Duration actualWork = Duration.getInstance((work.getDuration() * percentComplete) / 100, work.getUnits());\n               assignment.setActualWork(actualWork);\n               assignment.setRemainingWork(Duration.getInstance(work.getDuration() - actualWork.getDuration(), work.getUnits()));\n            }\n            else\n            {\n               assignment.setRemainingWork(work);\n            }\n\n            assignment.setStart(task.getStart());\n            assignment.setFinish(task.getFinish());\n\n            tasksWithAssignments.add(task);\n\n            m_eventManager.fireAssignmentReadEvent(assignment);\n         }\n      }\n\n      //\n      // Adjust work per assignment for tasks with multiple assignments\n      //\n      for (Task task : tasksWithAssignments)\n      {\n         List<ResourceAssignment> assignments = task.getResourceAssignments();\n         if (assignments.size() > 1)\n         {\n            double maxUnits = 0;\n            for (ResourceAssignment assignment : assignments)\n            {\n               maxUnits += assignment.getUnits().doubleValue();\n            }\n\n            for (ResourceAssignment assignment : assignments)\n            {\n               Duration work = assignment.getWork();\n               double factor = assignment.getUnits().doubleValue() / maxUnits;\n\n               work = Duration.getInstance(work.getDuration() * factor, work.getUnits());\n               assignment.setWork(work);\n               Duration actualWork = assignment.getActualWork();\n               if (actualWork != null)\n               {\n                  actualWork = Duration.getInstance(actualWork.getDuration() * factor, actualWork.getUnits());\n                  assignment.setActualWork(actualWork);\n               }\n\n               Duration remainingWork = assignment.getRemainingWork();\n               if (remainingWork != null)\n               {\n                  remainingWork = Duration.getInstance(remainingWork.getDuration() * factor, remainingWork.getUnits());\n                  assignment.setRemainingWork(remainingWork);\n               }\n            }\n         }\n      }\n   }", "   protected void setCheckmate (boolean t) {\n      checkmate = t;\n      if (result == null)\n         result = new ChessResult((board.isBlackMove()) \n\t             ? ChessResult.BLACK_WIN\n\t             : ChessResult.WHITE_WIN);\n   }\n", "public void downgradeOnControlSplit ( ) { final int numSlots = getNumSlots ( ) ; for ( int i = NUM_ ; i < numSlots ; ++ i ) { IsNullValue value = getValue ( i ) ; value = value . downgradeOnControlSplit ( ) ; setValue ( i , value ) ; } if ( knownValueMap != null ) { for ( Map . Entry < ValueNumber , IsNullValue > entry : knownValueMap . entrySet ( ) ) { entry . setValue ( entry . getValue ( ) . downgradeOnControlSplit ( ) ) ; } } }", "public void mountSnapShot ( ) throws BackupException { logger . debug ( STR_ + this . snapshotName ) ; processHelper . exec ( STR_ , mountCmd ) ; validateStorage ( STR_ , snapshotDataDirSpec ) ; }", "public static boolean isEmpty(String str){\n  return isNull(str) || str.length() <= 0;\n}\n", "\t\tprivate Image getImageForMethod(final IMethod method) throws Exception {\n\t\t\tString imageName = null;\n\t\t\tif (isJunitTest(method.getDeclaringType())) {\n\t\t\t\timageName = isNegativeJunit(method) ? \"junit-negative-small.gif\" : \"junit-positive-small.gif\";\n\t\t\t} else {\n\t\t\t\tif (isPrivate(method.getFlags())) {\n\t\t\t\t\timageName = \"methpri_obj.gif\";\n\t\t\t\t} else if (isProtected(method.getFlags())) {\n\t\t\t\t\timageName = \"methpro_obj.gif\";\n\t\t\t\t} else if (isPublic(method.getFlags())) {\n\t\t\t\t\timageName = \"methpub_obj.gif\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.getImage(imageName);\n\t\t}\n", "public void writeString(char[] buffer, int offset, int length)\n        throws IOException\n    {\n        if (buffer == null) {\n            os.write('N');\n        }\n        else {\n            while (length > 0x8000) {\n                int sublen = 0x8000;\n\n                // chunk can't end in high surrogate\n                char tail = buffer[offset + sublen - 1];\n\n                if (0xd800 <= tail && tail <= 0xdbff)\n                    sublen--;\n\n                os.write('s');\n                os.write(sublen >> 8);\n                os.write(sublen);\n\n                printString(buffer, offset, sublen);\n\n                length -= sublen;\n                offset += sublen;\n            }\n\n            os.write('S');\n            os.write(length >> 8);\n            os.write(length);\n\n            printString(buffer, offset, length);\n        }\n    }", "@Export\n\tpublic JsHandlerRegistration addDispatchStoppedHandler(final DispatchStoppedHandler handler) {\n\t\tHandlerRegistration registration = GwtCommandDispatcher.getInstance().addDispatchStoppedHandler(\n\t\t\t\tnew org.geomajas.gwt.client.command.event.DispatchStoppedHandler() {\n\n\t\t\t\t\tpublic void onDispatchStopped(DispatchStoppedEvent event) {\n\t\t\t\t\t\thandler.onDispatchStopped(new org.geomajas.plugin.jsapi.client.event.DispatchStoppedEvent());\n\t\t\t\t\t}\n\t\t\t\t});\n\t\treturn new JsHandlerRegistration(new HandlerRegistration[] { registration });\n\t}", "    public void setTotalOutflowActual(double newValue) {\n        double oldValue = totalOutflowActual;\n        this.totalOutflowActual = newValue;\n        totalOutflowActualChangeSupport.firePropertyChange(\n            \"prop\",\n            new Double(oldValue),\n            new Double(newValue));\n    }\n", "\tpublic void collapseAll(){\n\t\tfor(int i = tree.getRowCount(); i >=0 ; i--){\n\t\t\ttree.collapseRow(i);\n\t\t}\n\t}\n", "public static ADNode makeADTree(Instances instances){\n  ArrayList<Integer> nRecords=new ArrayList<Integer>(instances.numInstances());\n  for (int iRecord=0; iRecord < instances.numInstances(); iRecord++) {\n    nRecords.add(new Integer(iRecord));\n  }\n  return makeADTree(0,nRecords,instances);\n}\n", "public Builder customProperty ( String name , Boolean ... values ) { return customProperty ( new Property ( name , values ) ) ; }", "private void putObject(String bucketName, String objectName, Long size, Object data,\n      Map<String, String> headerMap, ServerSideEncryption sse)\n    throws InvalidBucketNameException, NoSuchAlgorithmException, IOException,\n           InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException,\n           InternalException,\n           InvalidArgumentException, InsufficientDataException {\n    boolean unknownSize = false;\n\n    // Add content type if not already set\n    if (headerMap.get(\"Content-Type\") == null) {\n      headerMap.put(\"Content-Type\", \"application/octet-stream\");\n    }\n\n    if (size == null) {\n      unknownSize = true;\n      size = MAX_OBJECT_SIZE;\n    }\n\n    if (size <= MIN_MULTIPART_SIZE) {\n      // Single put object.\n      if (sse != null) {\n        sse.marshal(headerMap);\n      }\n      putObject(bucketName, objectName, size.intValue(), data, null, 0, headerMap);\n      return;\n    }\n\n    /* Multipart upload */\n    int[] rv = calculateMultipartSize(size);\n    int partSize = rv[0];\n    int partCount = rv[1];\n    int lastPartSize = rv[2];\n    Part[] totalParts = new Part[partCount];\n\n    // if sse is requested set the necessary headers before we begin the multipart session.\n    if (sse != null) {\n      sse.marshal(headerMap);\n    }\n\n    // initiate new multipart upload.\n    String uploadId = initMultipartUpload(bucketName, objectName, headerMap);\n\n    try {\n      int expectedReadSize = partSize;\n      for (int partNumber = 1; partNumber <= partCount; partNumber++) {\n        if (partNumber == partCount) {\n          expectedReadSize = lastPartSize;\n        }\n\n        // For unknown sized stream, check available size.\n        int availableSize = 0;\n        if (unknownSize) {\n          // Check whether data is available one byte more than expectedReadSize.\n          availableSize = getAvailableSize(data, expectedReadSize + 1);\n          // If availableSize is less or equal to expectedReadSize, then we reached last part.\n          if (availableSize <= expectedReadSize) {\n            // If it is first part, do single put object.\n            if (partNumber == 1) {\n              putObject(bucketName, objectName, availableSize, data, null, 0, headerMap);\n              return;\n            }\n            expectedReadSize = availableSize;\n            partCount = partNumber;\n          }\n        }\n\n        // In multi-part uploads, Set encryption headers in the case of SSE-C.\n        Map<String, String> encryptionHeaders = new HashMap<>();\n        if (sse != null && sse.getType() == ServerSideEncryption.Type.SSE_C) {\n          sse.marshal(encryptionHeaders);\n        }\n\n        String etag = putObject(bucketName, objectName, expectedReadSize, data,\n                                uploadId, partNumber, encryptionHeaders);\n        totalParts[partNumber - 1] = new Part(partNumber, etag);\n      }\n      // All parts have been uploaded, complete the multipart upload.\n      completeMultipart(bucketName, objectName, uploadId, totalParts);\n    } catch (RuntimeException e) {\n      throw e;\n    } catch (Exception e) {\n      abortMultipartUpload(bucketName, objectName, uploadId);\n      throw e;\n    }\n  }", "boolean isProcessTreeOverLimit(String tId, \n                                  long currentMemUsage, \n                                  long curMemUsageOfAgedProcesses, \n                                  long limit) {\n    boolean isOverLimit = false;\n    \n    if (currentMemUsage > (2*limit)) {\n      LOG.warn(\"Process tree for task: \" + tId + \" running over twice \" +\n                \"the configured limit. Limit=\" + limit + \n                \", current usage = \" + currentMemUsage);\n      isOverLimit = true;\n    } else if (curMemUsageOfAgedProcesses > limit) {\n      LOG.warn(\"Process tree for task: \" + tId + \" has processes older than 1 \" +\n          \"iteration running over the configured limit. Limit=\" + limit + \n          \", current usage = \" + curMemUsageOfAgedProcesses);\n      isOverLimit = true;\n    }\n\n    return isOverLimit; \n  }", "private static void sleepImpl(long millis,Closure closure){\n  long start=System.currentTimeMillis();\n  long rest=millis;\n  long current;\n  while (rest > 0) {\n    try {\n      Thread.sleep(rest);\n      rest=0;\n    }\n catch (    InterruptedException e) {\n      if (closure != null) {\n        if (DefaultTypeTransformation.castToBoolean(closure.call(e))) {\n          return;\n        }\n      }\n      current=System.currentTimeMillis();\n      rest=millis + start - current;\n    }\n  }\n}\n", "public static String dropWhile(GString self, @ClosureParams(value=SimpleType.class, options=\"char\") Closure condition) {\n        return dropWhile(self.toString(), condition).toString();\n    }", "  public MutableFileProperty(String name, File initialFile, String help) {\n    super(name,new Thunk<File>() { public File value() { return null; } }, help);\n    // cannot access _fileValue before super constructor has been called, so assign it again after the call\n    _getFile = new Thunk<File>() { public File value() { return _fileValue; } };\n    _fileValue = initialFile;\n    _value = \"\";\n    resetAttributes();\n  }\n", "    public long largest() {\n        return largest;\n    }\n", "\tpublic boolean isPrimaryNewsPicture() {\n\t\treturn primaryNewsPicture;\n\t}\n", "  public void createPartControl(Composite frame) {\n    imageCanvas = new SWTImageCanvas(frame);\n    imageCanvas.setImageData(new ImageData(new ByteArrayInputStream(mContent)));\n  }\n", "public void encode(OutputStream out) throws IOException {\n  DerOutputStream tmp=new DerOutputStream();\n  algId.encode(tmp);\n  out.write(tmp.toByteArray());\n}\n", "@SuppressWarnings(\"unchecked\") public boolean equalsIgnoreCase(ForeignKey otherFk){\n  boolean checkName=isCheckName(otherFk);\n  if ((!checkName || name.equalsIgnoreCase(otherFk.name)) && foreignTableName.equalsIgnoreCase(otherFk.foreignTableName)) {\n    HashSet<Reference> otherRefs=new HashSet<Reference>();\n    otherRefs.addAll(otherFk.references);\n    for (Iterator<?> it=references.iterator(); it.hasNext(); ) {\n      Reference curLocalRef=(Reference)it.next();\n      boolean found=false;\n      for (Iterator<?> otherIt=otherRefs.iterator(); otherIt.hasNext(); ) {\n        Reference curOtherRef=(Reference)otherIt.next();\n        if (curLocalRef.equalsIgnoreCase(curOtherRef)) {\n          otherIt.remove();\n          found=true;\n          break;\n        }\n      }\n      if (!found) {\n        return false;\n      }\n    }\n    return otherRefs.isEmpty();\n  }\n else {\n    return false;\n  }\n}\n", "@SuppressWarnings(\"all\")\n    public static <K, V> Maybe<Map<K, V>> getAll(CacheConfigBean cacheConfigBean, String key, Class<K> kClazz, Class<V> vClazz) {\n        return SingleRxXian\n                .call(CacheService.CACHE_SERVICE, \"cacheMapGetAll\", new JSONObject() {{\n                    put(\"cacheConfig\", cacheConfigBean);\n                    put(\"key\", key);\n                }})\n                .flatMapMaybe(unitResponse -> {\n                    unitResponse.throwExceptionIfNotSuccess();\n                    if (unitResponse.getData() == null)\n                        return Maybe.empty();\n                    else {\n                        JSONObject map = unitResponse.dataToJson();\n                        if (map == null || map.isEmpty())\n                            return Maybe.just(new HashMap<>());\n                        Map<K, V> maps = new HashMap<>();\n                        map.forEach((_key, _value) -> maps.put(Reflection.toType(_key, kClazz), Reflection.toType(_value, vClazz)));\n                        return Maybe.just(maps);\n                    }\n                });\n    }", "boolean addSeparator ( ) ;", "public void getOrder(KiteConnect kiteConnect) throws KiteException, IOException {\n        List<Order> orders = kiteConnect.getOrderHistory(\"180111000561605\");\n        for(int i = 0; i< orders.size(); i++){\n            System.out.println(orders.get(i).orderId+\" \"+orders.get(i).status);\n        }\n        System.out.println(\"list size is \"+orders.size());\n    }", "public void enterInitState(Event event) {\n\t\tlogger.debug(String.format(\"Entered state %s\", fsm.current()));\n\t\tChaincodeMessage message = messageHelper(event);\n\t\tlogger.debug(String.format(\"[%s]Received %s, initializing chaincode\",\n\t\t\t\tshortID(message), message.getType().toString()));\n\t\tif (message.getType() == INIT) {\n\t\t\t// Call the chaincode's Run function to initialize\n            try {\n                handleInit(message);\n            } catch (InvalidTransactionException e) {\n                e.printStackTrace();\n            }\n        }\n\t}", "public synchronized String getSignature() {\n        if (signature == null) {\n            CachedClass [] parameters = getParameterTypes();\n            final String name = getName();\n            StringBuilder buf = new StringBuilder(name.length()+parameters.length*10);\n            buf.append(getReturnType().getName());\n            \n            buf.append(' ');\n            buf.append(name);\n            buf.append('(');\n            for (int i = 0; i < parameters.length; i++) {\n                if (i > 0) {\n                    buf.append(\", \");\n                }\n                buf.append(parameters[i].getName());\n            }\n            buf.append(')');\n            signature = buf.toString();\n        }\n        return signature;\n    }", "public static <T, V extends Comparable<? super V>> T maxBy(Iterable<T> iterable, Function<? super T, ? extends V> function)\n    {\n        if (iterable instanceof RichIterable)\n        {\n            return ((RichIterable<T>) iterable).maxBy(function);\n        }\n        if (iterable instanceof RandomAccess)\n        {\n            return RandomAccessListIterate.maxBy((List<T>) iterable, function);\n        }\n        if (iterable != null)\n        {\n            return IterableIterate.maxBy(iterable, function);\n        }\n        throw new IllegalArgumentException(\"Cannot perform a maxBy on null\");\n    }", "public Address __xor__ ( final Object rhs ) { return new Address ( m_value . xor ( getBigInteger ( rhs ) ) ) ; }", "public void run(){\n  byte[] buf=new byte[256];\n  int count;\n  try {\n    while ((count=in.read(buf)) != -1) {\n      write(buf,0,count);\n    }\n    String lastInBuffer=bufOut.toString();\n    bufOut.reset();\n    if (lastInBuffer.length() > 0) {\n      out.println(createAnnotation() + lastInBuffer);\n      out.flush();\n    }\n  }\n catch (  IOException e) {\n  }\n}\n", "private Object invokeLRMIProxy ( final IMethod method , Object [ ] args ) throws Exception { return method . invoke ( this , args ) ; }", "public ListAssessmentTemplatesResult withAssessmentTemplateArns(String... assessmentTemplateArns) {\n        if (this.assessmentTemplateArns == null) {\n            setAssessmentTemplateArns(new java.util.ArrayList<String>(assessmentTemplateArns.length));\n        }\n        for (String ele : assessmentTemplateArns) {\n            this.assessmentTemplateArns.add(ele);\n        }\n        return this;\n    }", "    public void dqdt(Vector3 angularVelocity, Quaternion passback){\n        mulScale(angularVelocity, .5f, passback);\n    }\n", "public Response(String status,String mimeType,String txt){\n  this.status=status;\n  this.mimeType=mimeType;\n  this.data=new ByteArrayInputStream(txt.getBytes());\n}\n", "@Override public void finish() throws IOException {\n  if (out == null) {\n    throw new IOException(\"Stream is closed\");\n  }\n  if (cDir == null) {\n    return;\n  }\n  if (entries.isEmpty()) {\n    throw new ZipException(\"No entries\");\n  }\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int cdirSize=cDir.size();\n  writeLong(cDir,ENDSIG);\n  writeShort(cDir,0);\n  writeShort(cDir,0);\n  writeShort(cDir,entries.size());\n  writeShort(cDir,entries.size());\n  writeLong(cDir,cdirSize);\n  writeLong(cDir,offset);\n  writeShort(cDir,commentBytes.length);\n  if (commentBytes.length > 0) {\n    cDir.write(commentBytes);\n  }\n  cDir.writeTo(out);\n  cDir=null;\n}\n", "public TerminateSynchronizer ( final IDebugger debugger , final ListenerProvider < IDebugEventListener > listeners ) { super ( debugger , listeners ) ; }", "public static String tagToString ( final TagType type ) { if ( type == TagType . VIEW_TAG ) { return STR_ ; } else if ( type == TagType . NODE_TAG ) { return STR_ ; } throw new IllegalArgumentException ( STR_ ) ; }", "public long getApproxSubmitTime(Result value)\n      throws MissingColumnInResultException {\n    if (value == null) {\n      throw new IllegalArgumentException(\n          \"Cannot get last modification time from \" + \"a null hbase result\");\n    }\n\n    Cell cell = value.getColumnLatestCell(Constants.INFO_FAM_BYTES,\n        Constants.JOBHISTORY_LAST_MODIFIED_COL_BYTES);\n\n    if (cell == null) {\n      throw new MissingColumnInResultException(Constants.INFO_FAM_BYTES,\n          Constants.JOBHISTORY_LAST_MODIFIED_COL_BYTES);\n    }\n\n    byte[] lastModTimeBytes = CellUtil.cloneValue(cell);\n    // we try to approximately set the job submit time based on when the job\n    // history file\n    // was last modified and an average job duration\n    long lastModTime = Bytes.toLong(lastModTimeBytes);\n    long jobSubmitTimeMillis = lastModTime - Constants.AVERGAE_JOB_DURATION;\n    LOG.debug(\"Approximate job submit time is \" + jobSubmitTimeMillis\n        + \" based on \" + lastModTime);\n    return jobSubmitTimeMillis;\n  }", "public final ValueWithPos<String> formatDin5008WithPos(final ValueWithPos<String> pphoneNumber,\n      final String pcountryCode) {\n    return valueWithPosDefaults(this.formatDin5008WithPos(\n        this.parsePhoneNumber(pphoneNumber, pcountryCode), CreatePhoneCountryConstantsClass.create()\n            .countryMap().get(StringUtils.defaultString(pcountryCode))),\n        pphoneNumber);\n  }", "public synchronized void save() throws IOException {\n  try (KeyTabOutputStream kos=new KeyTabOutputStream(new FileOutputStream(tabName))){\n    kos.writeVersion(kt_vno);\n    for (int i=0; i < entries.size(); i++) {\n      kos.writeEntry(entries.elementAt(i));\n    }\n  }\n }\n", "public void startIteration ( ) ;", "private <X, Y extends AmazonWebServiceRequest> Response<X> doInvoke(Request<Y> request, HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,\n            ExecutionContext executionContext, URI discoveredEndpoint, URI uriFromEndpointTrait) {\n\n        if (discoveredEndpoint != null) {\n            request.setEndpoint(discoveredEndpoint);\n            request.getOriginalRequest().getRequestClientOptions().appendUserAgent(\"endpoint-discovery\");\n        } else if (uriFromEndpointTrait != null) {\n            request.setEndpoint(uriFromEndpointTrait);\n        } else {\n            request.setEndpoint(endpoint);\n        }\n\n        request.setTimeOffset(timeOffset);\n\n        HttpResponseHandler<AmazonServiceException> errorResponseHandler = protocolFactory.createErrorResponseHandler(new JsonErrorResponseMetadata()\n                .withCustomErrorCodeFieldName(\"code\"));\n\n        return client.execute(request, responseHandler, errorResponseHandler, executionContext);\n    }", "\tprivate String getInsertSQLStatement(){\n\t\tList<String> fields = model.selectedFields();\n\t\tStringBuilder sql = new StringBuilder();\n\t\t\tsql.append(\"select \"); //$NON-NLS-1$\n\t\tif (fields.isEmpty()){\n\t\t\tsql.append(\" * \"); //$NON-NLS-1$\n\t\t}\n\t\tfor (int i = 0; i < fields.size(); i++) {\n\t\t\tsql.append(fields.get(i));\n\t\t\tif (i==fields.size()-1){\n\t\t\t\tsql.append(\" \"); //$NON-NLS-1$\n\t\t\t} else {\n\t\t\t\tsql.append(\", \"); //$NON-NLS-1$\n\t\t\t}\n\t\t}\n\t\tsql.append(\"from \"+model.getTableName()); //$NON-NLS-1$\n\t\tif (model.hasWhereClause()){\n\t\t\tsql.append(\" where \"+model.getWhereClause()); //$NON-NLS-1$\n\t\t}\n\t\treturn sql.toString();\n\t}\n", "    private void open() throws KeyRingException {\n\n\ttry {\n\t    InputStream fileInput = getClass().\n\t\tgetResourceAsStream(keystoreName);\n\n\t    if(fileInput == null) {\n\t\tthrow new KeyRingException(\"Can't open keystore: \"+keystoreName);\n\t    } else {\n\t\tkeystore.load(fileInput, storePass.toCharArray());\n\n\t\tisOpen = true;\n\t    }\n\n\t} catch (Exception e) {\n\t    e.printStackTrace();\n\t    throw new KeyRingException();\n\t}\n\n    }//end open()\n", "@Override public int onStartCommand(Intent intent,int flags,int startId){\n  Log_OC.d(TAG,\"Starting command with id \" + startId);\n  if (!intent.hasExtra(EXTRA_ACCOUNT) || !intent.hasExtra(EXTRA_FILE)) {\n    Log_OC.e(TAG,\"Not enough information provided in intent\");\n    return START_NOT_STICKY;\n  }\n else {\n    final Account account=intent.getParcelableExtra(EXTRA_ACCOUNT);\n    final OCFile file=intent.getParcelableExtra(EXTRA_FILE);\n    AbstractList<String> requestedDownloads=new Vector<String>();\n    try {\n      DownloadFileOperation newDownload=new DownloadFileOperation(account,file);\n      newDownload.addDatatransferProgressListener(this);\n      newDownload.addDatatransferProgressListener((FileDownloaderBinder)mBinder);\n      Pair<String,String> putResult=mPendingDownloads.putIfAbsent(account.name,file.getRemotePath(),newDownload);\n      if (putResult != null) {\n        String downloadKey=putResult.first;\n        requestedDownloads.add(downloadKey);\n        sendBroadcastNewDownload(newDownload,putResult.second);\n      }\n    }\n catch (    IllegalArgumentException e) {\n      Log_OC.e(TAG,\"Not enough information provided in intent: \" + e.getMessage());\n      return START_NOT_STICKY;\n    }\n    if (requestedDownloads.size() > 0) {\n      Message msg=mServiceHandler.obtainMessage();\n      msg.arg1=startId;\n      msg.obj=requestedDownloads;\n      mServiceHandler.sendMessage(msg);\n    }\n  }\n  return START_NOT_STICKY;\n}\n", "\tpublic boolean isClickBindingInUse(Scene.Button button) {\n\t\treturn clickActions.isShortcutInUse(new ClickBinding(button));\n\t}\n", "public SpaceTypeDescriptorBuilder idProperty ( String idPropertyName , boolean autoGenerateId , SpaceIndexType indexType ) { if ( idPropertyName == null ) throw new IllegalArgumentException ( STR_ ) ; if ( indexType == null ) throw new IllegalArgumentExce", "@Override\n    public DescribeMaintenanceWindowTargetsResult describeMaintenanceWindowTargets(DescribeMaintenanceWindowTargetsRequest request) {\n        request = beforeClientExecution(request);\n        return executeDescribeMaintenanceWindowTargets(request);\n    }", "\tprotected void createPackageControls(Composite composite, int nColumns) {\n\t\tfPackageDialogField.doFillIntoGrid(composite, nColumns);\n\t\tText text = fPackageDialogField.getTextControl(null);\n\t\tLayoutUtil.setWidthHint(text, getMaxFieldWidth());\n\t\tLayoutUtil.setHorizontalGrabbing(text);\n\t\tControlContentAssistHelper.createTextContentAssistant(text,\n\t\t\t\tfCurrPackageCompletionProcessor);\n\t\tTextFieldNavigationHandler.install(text);\n\t}\n", "@Override public boolean select(Viewer viewer,Object parentElement,Object element){\n  return element instanceof RisikoMassnahmenUmsetzung;\n}\n", "public static void serialize ( String xmlString , Writer w ) { serialize ( asStreamSource ( xmlString ) , w ) ; }", "synchronized public void addClusterChangeListener(ClusterEventListener l) {\n    if (listeners == null)\n      listeners = new Vector();\n    listeners.addElement(l);\n  }", "public static List<String> getExtensionsRunningIssues(AddOn.AddOnRunRequirements requirements) {\n        if (!requirements.hasExtensionsWithRunningIssues()) {\n            return new ArrayList<>(0);\n        }\n\n        List<String> issues = new ArrayList<>(10);\n        for (AddOn.ExtensionRunRequirements extReqs : requirements.getExtensionRequirements()) {\n            issues.addAll(getRunningIssues(extReqs));\n        }\n        return issues;\n    }", "public Blade routeConf ( String basePackage , String conf ) { try { Assert . notBlank ( basePackage ) ; Assert . notBlank ( conf ) ; InputStream ins = Blade . class . getResourceAsStream ( STR_ + conf ) ; ClassPathRouteLoader routesLoader = new ClassPathR", "  public boolean equals(final Object o) {\n    if (! (o instanceof Stack))\n      return false ;\n    return super.equals(o) ;\n  }\n", "static public double log10(double inValue){\n  return Math.log(inValue) / Math.log(10.0);\n}\n", "public void editButtonActionPerformed(){\n  String nodeAddress=readNodeAddress();\n  if (nodeAddress.equals(\"\")) {\n    return;\n  }\n  curNode=(IEEE802154Node)itc.getNodeFromAddress(nodeAddress);\n  if (curNode == null) {\n    statusText1.setText(Bundle.getMessage(\"Error4\"));\n    statusText1.setVisible(true);\n    errorInStatus1=true;\n    resetNotes2();\n    return;\n  }\n  jmri.util.JmriJFrame editFrame=new EditNodeFrame(itc,curNode);\n  try {\n    editFrame.initComponents();\n  }\n catch (  Exception ex) {\n    log.error(\"Exception initializing Frame: {}\",ex.toString());\n    return;\n  }\n  editFrame.setVisible(true);\n}\n", "    public boolean isGroupExpanded(int groupPosition) {\n        GroupMetadata groupMetadata;\n        for (int i = mExpGroupMetadataList.size() - 1; i >= 0; i--) {\n            groupMetadata = mExpGroupMetadataList.get(i);\n            \n            if (groupMetadata.gPos == groupPosition) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n", "\tpublic void setObjectY(int idf, int ido, int y) {\n\t\tIDSPFObject o = getObject(idf, ido);\n\t\tif (o == null)\n\t\t\treturn;\n\t\to.setY(y);\n\t}\n", "public Value mapKey ( Value key , Value val ) { throw new RuntimeException ( STR_ ) ; }", "public String[] parseConfiguration(URL xmlURL) throws IOException, SAXException {\n  InputStream is=xmlURL.openStream();\n  Document document=null;\n  try {\n    document=builder.parse(is);\n  }\n  finally {\n    is.close();\n  }\n  return (parseConfiguration(docu", "public synchronized void close ( ) { if ( space == null ) { return ; } if ( isRegisterForSpaceModeNotifications ( ) ) { IJSpace clusterMemberSpace = SpaceUtils . getClusterMemberSpace ( space ) ; try { ( ( IInternalRemoteJSpaceAdmin ) clusterMemberSpace .", "private static byte[] convertToBytes(int i) {\n        int size = (int)Math.floor(Math.log(i) / Math.log(10));\n        if (i % 100 != 0) {\n            size += 2;\n        }\n        if (i % 10 != 0) {\n            size++;\n        }\n        if (i < 100) {\n            size++;\n            if (i < 10) {\n                size++;\n            }\n        }\n        size--;\n        byte[] cache = new byte[size];\n        size --;\n        if (i < 100) {\n            cache[0] = (byte)'0';\n        }\n        if (i % 10 != 0) {\n            cache[size--] = bytes[i % 10];\n        }\n        if (i % 100 != 0) {\n            cache[size--] = bytes[(i / 10) % 10];\n            cache[size--] = (byte)'.';\n        }\n        size = (int)Math.floor(Math.log(i) / Math.log(10)) - 1;\n        int add = 0;\n        while (add < size) {\n            cache[add] = bytes[(i / (int)Math.pow(10, size - add + 1)) % 10];\n            add++;\n        }\n        return cache;\n    }", "Vertex(final Vector2D location){\n  this.location=location;\n  this.incoming=null;\n  this.outgoing=null;\n  this.lines=new ArrayList<Line>();\n}", "public void marshall(SetTimeBasedAutoScalingRequest setTimeBasedAutoScalingRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (setTimeBasedAutoScalingRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(setTimeBasedAutoScalingRequest.getInstanceId(), INSTANCEID_BINDING);\n            protocolMarshaller.marshall(setTimeBasedAutoScalingRequest.getAutoScalingSchedule(), AUTOSCALINGSCHEDULE_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "\tpublic void geraHTMLDataInicioIett() {\n\t\ttry {\n\t\t\tcriaInputTextData(codEstrutura + \"_dataInicioIett\", atributo\n\t\t\t\t\t.iGetLabel(), atributo.iGetValor(getItemEstrutura()),\n\t\t\t\t\tatributo.iGetDica());\n\t\t\t\n\t\t} catch (ECARException e) {\n\t\t\tLogger logger = Logger.getLogger(this.getClass());\n\t\t\tlogger.error(e);\n\t\t}\n\t}\n", "public static boolean needsRelocation ( final INaviOperandTreeNode treeNode , final INaviModule module ) { final List < IReference > references = treeNode . getReferences ( ) ; for ( final IReference reference : references ) { if ( needsRelocation ( refer", "    public void visit(Property property) throws RepositoryException {\n        if ( this.walkProperties && this.includePredicate.evaluate(property) ) {\n            entering(property, currentLevel);\n            leaving(property, currentLevel);\n        }\n    }\n", "protected void close(){\n  inUseMsgIds.clear();\n  pendingMessages.clear();\n  pendingFlows.clear();\n  outboundQoS2.clear();\n  outboundQoS1.clear();\n  outboundQoS0.clear();\n  inboundQoS2.clear();\n  tokenStore.clear();\n  inUseMsgIds=null;\n  pendingMessages=null;\n  pendingFlows=null;\n  outboundQoS2=null;\n  outboundQoS1=null;\n  outboundQoS0=null;\n  inboundQoS2=null;\n  tokenStore=null;\n  callback=null;\n  clientComms=null;\n  persistence=null;\n  pingCommand=null;\n}\n", "  public void moveClusterUp(int index){\n      if(index > 1){\n          Cluster tmp = clusters.get(index);\n          clusters.remove(index);\n          clusters.insertElementAt(tmp, index -1);\n      }\n  }\n", "Color nextColor(){\n  int red=Math.min(255,((measurementColor >> 2) & 0x1) * 255 / 1);\n  int green=Math.min(255,((measurementColor >> 1) & 0x1) * 255 / 1);\n  int blue=Math.min(255,((measurementColor >> 0) & 0x1) * 255 / 1);\n  measurementColor++;\n  return new Color(red,green,blue);\n}\n", "public static void validateInputParameters(ImfUtilityInputParameters inputParameters) throws ArgumentValidationException {\n  File impDirectory=inputParameters.getImpDirectoryFile();\n  if (impDirectory == null) {\n    throw new ArgumentValidationException(\"IMP directory must be specified either as a command line argument or in config.xml\");\n  }\n  if (!impDirectory.isDirectory()) {\n    throw new ArgumentValidationException(String.format(\"IMP directory '%s' must be an existing folder\",impDirectory.getAbsolutePath()));\n  }\n  File cplFile=inputParameters.getCplFile();\n  if (cplFile == null) {\n    throw new ArgumentValidationException(\"CPL file must be specified either as a command line argument or in config.xml\");\n  }\n  if (!cplFile.isFile()) {\n    throw new ArgumentValidationException(String.format(\"CPL file '%s' must be an existing file\",cplFile.getAbsolutePath()));\n  }\n  File workingDir=inputParameters.getWorkingDirFile();\n  if (workingDir == null) {\n    throw new ArgumentValidationException(\"Working directory must be specified either as a command line argument or in config.xml\");\n  }\n}\n", "private String randomHash(final String folder) throws Exception {\n  try {\n    MessageDigest algorithm=MessageDigest.getInstance(\"MD5\");\n    algorithm.reset();\n    try {\n      algorithm.update(folder.getBytes(\"UTF8\"));\n    }\n catch (    UnsupportedEncodingException e) {\n      if (configuration.isDebugMode()) {\n        throw e;\n      }\n      algorithm.update(folder.getBytes());\n    }\n    byte[] messageDigest=algorithm.digest();\n    StringBuffer hexString=new StringBuffer();\n    for (int i=0; i < messageDigest.length; i++) {\n      hexString.append(Integer.toHexString(HASH & messageDigest[i]));\n    }\n    return hexString.toString();\n  }\n catch (  NoSuchAlgorithmException e) {\n    if (configuration.isDebugMode()) {\n      throw e;\n    }\n    return \"\";\n  }\n}\n", "public static List<SubstringLabelerMatchRule> matchRulesFromInternal(String matchDetails,Instances inputStructure,String statusMessagePrefix,Logger log,Environment env){\n  List<SubstringLabelerMatchRule> matchRules=new ArrayList<SubstringLabelerMatchRule>();\n  String[] matchParts=matchDetails.split(MATCH_RULE_SEPARATOR);\n  for (  String p : matchParts) {\n    SubstringLabelerMatchRule m=new SubstringLabelerMatchRule(p.trim());\n    m.m_statusMessagePrefix=statusMessagePrefix == null ? \"\" : statusMessagePrefix;\n    m.m_logger=log;\n    m.init(env,inputStructure);\n    matchRules.add(m);\n  }\n  return matchRules;\n}\n", "public void putOneDataPoint(double value){\n  try {\n    queue.put(value);\n  }\n catch (  InterruptedException e) {\n    throw new RuntimeException(\"Unexpected interruption\",e);\n  }\n}\n", "public void cancelAll ( ) { cancel ( ) ; refreshJob . cancel ( ) ; }", "private static void marshalLocators ( LookupLocator [ ] locators , ObjectOutputStream out ) throws IOException { for ( int i = NUM_ ; i < locators . length ; i ++ ) { out . writeObject ( new MarshalledInstance ( locators [ i ] ) ) ; } out . writeObject ( ", "public static <T> T min(Iterator<T> self, @ClosureParams(value=FromString.class, options={\"T\",\"T,T\"}) Closure closure) {\n        return min((Iterable<T>)toList(self), closure);\n    }", "    public void rotate(int orientation) {\n        this.rotate(orientation, true);\n    }\n", "public int hashCode ( ) { int retval = NUM_ ; for ( int i = NUM_ ; i < octetString . length ; i ++ ) retval += octetString [ i ] * i ; return retval ; }", "private void drawCircleEndpoint(Point from,Point to,Graphics g){\n  int diameter=12 + (int)getStrokeWidth();\n  double a=to.x - from.x;\n  double b=from.y - to.y;\n  double theta=Math.atan2(b,a);\n  int xminus=(int)(Math.cos(theta) * diameter / 2);\n  int yplus=(int)(Math.sin(theta) * diameter / 2);\n  g.fillOval(to.x - xminus - diameter / 2,to.y + yplus - diameter / 2,diameter,diameter);\n  Color c=g.getColor();\n  g.setColor(Color.white);\n  g.fillOval(to.x - xminus - diameter / 4 - 1,to.y + yplus - diameter / 4 - 1,(int)(diameter / 1.4),(int)(diameter / 1.4));\n  g.setColor(c);\n}\n", "public DragView ( Context context , Bitmap bitmap , int registrationX , int registrationY , int left , int top , int width , int height ) { super ( context ) ; mWindowManager = ( WindowManager ) context . getSystemService ( Context . WINDOW_SERVICE ) ; mRegistrationX = registrationX + ( PADDING_TO_SCALE / NUM_ ) ; mRegistrationY = registrationY + ( PADDING_TO_SCALE / NUM_ ) ; final float scaleFactor = ( ( float ) width + PADDING_TO_SCALE ) / ( float ) width ; final Matrix scale = new Matrix ( ) ; scale . setScale ( scaleFactor , scaleFactor ) ; mBitmap = Bitmap . createBitmap ( bitmap , left , top , width , height , scale , BOOL_ ) ; }", "private ItemIter matchingItems ( Template tmpl ) { if ( tmpl . serviceID != null ) return new IDItemIter ( tmpl ) ; if ( ! isEmpty ( tmpl . serviceTypes ) ) return new SvcIterator ( tmpl ) ; EntryRep [ ] sets = tmpl . attributeSetTemplates ; if ( isEmpty ( sets ) ) return new AllItemIter ( ) ; for ( int i = sets . length ; -- i >= NUM_ ; ) { Object [ ] fields = sets [ i ] . fields ; if ( fields . length == NUM_ ) { EntryClass eclass = getEmptyEntryClass ( sets [ i ] . eclass ) ; if ( eclass != null ) return new EmptyAttrItemIter ( tmpl , eclass ) ; } else { for ( int j = fields . length ; -- j >= NUM_ ; ) { if ( fields [ j ] != null ) return new AttrItemIter ( tmpl , i , j ) ; } } } return new ClassItemIter ( tmpl ) ; }", "private void releaseSession(PooledSession session) {\n    Preconditions.checkNotNull(session);\n    synchronized (lock) {\n      if (closureFuture != null) {\n        return;\n      }\n      if (readWaiters.size() == 0 && numSessionsBeingPrepared >= readWriteWaiters.size()) {\n        // No pending waiters\n        if (shouldPrepareSession()) {\n          prepareSession(session);\n        } else {\n          readSessions.add(session);\n        }\n      } else if (shouldUnblockReader()) {\n        readWaiters.poll().put(session);\n      } else {\n        prepareSession(session);\n      }\n    }\n  }", "public static boolean isValidSQLText(Textbox f){\n  if (f != null && f.getText() != null)   return isValidSQLText(f.getText());\n  return false;\n}\n", "public LDAPAuthenticatedUser authenticateUser(Credentials credentials)\n            throws GuacamoleException {\n\n        // Attempt bind\n        LDAPConnection ldapConnection;\n        try {\n            ldapConnection = bindAs(credentials);\n        }\n        catch (GuacamoleException e) {\n            logger.error(\"Cannot bind with LDAP server: {}\", e.getMessage());\n            logger.debug(\"Error binding with LDAP server.\", e);\n            ldapConnection = null;\n        }\n\n        // If bind fails, permission to login is denied\n        if (ldapConnection == null)\n            throw new GuacamoleInvalidCredentialsException(\"Permission denied.\", CredentialsInfo.USERNAME_PASSWORD);\n\n        try {\n\n            // Retrieve group membership of the user that just authenticated\n            Set<String> effectiveGroups =\n                    userGroupService.getParentUserGroupIdentifiers(ldapConnection,\n                            ldapConnection.getAuthenticationDN());\n\n            // Return AuthenticatedUser if bind succeeds\n            LDAPAuthenticatedUser authenticatedUser = authenticatedUserProvider.get();\n            authenticatedUser.init(credentials, getAttributeTokens(ldapConnection, credentials.getUsername()), effectiveGroups);\n            return authenticatedUser;\n\n        }\n        // Always disconnect\n        finally {\n            ldapService.disconnect(ldapConnection);\n        }\n\n    }", "public AtomicLongConfig findAtomicLongConfig(String name) {\n        name = getBaseName(name);\n        AtomicLongConfig config = lookupByPattern(configPatternMatcher, atomicLongConfigs, name);\n        if (config != null) {\n            return config.getAsReadOnly();\n        }\n        return getAtomicLongConfig(\"default\").getAsReadOnly();\n    }", "private void searchEdge(final NaviEdge edge,final String searchString){\n  m_results.addAll(CEdgeSearcher.search(edge,searchString,m_settings.isRegEx(),m_settings.isCaseSensitive()));\n  if (!m_results.isEmpty()) {\n    m_cursor.reset();\n  }\n}\n", "public <T> DataSet<T> groupReduceOnNeighbors(NeighborsFunctionWithVertexValue<K, VV, EV, T> neighborsFunction,\n\t\t\tEdgeDirection direction) throws IllegalArgumentException {\n\t\tswitch (direction) {\n\t\tcase IN:\n\t\t\t// create <edge-sourceVertex> pairs\n\t\t\tDataSet<Tuple2<Edge<K, EV>, Vertex<K, VV>>> edgesWithSources = edges\n\t\t\t\t\t.join(this.vertices).where(0).equalTo(0).name(\"Edge with source vertex\");\n\t\t\treturn vertices.coGroup(edgesWithSources)\n\t\t\t\t\t.where(0).equalTo(\"f0.f1\")\n\t\t\t\t\t.with(new ApplyNeighborCoGroupFunction<>(neighborsFunction)).name(\"Neighbors function\");\n\t\tcase OUT:\n\t\t\t// create <edge-targetVertex> pairs\n\t\t\tDataSet<Tuple2<Edge<K, EV>, Vertex<K, VV>>> edgesWithTargets = edges\n\t\t\t\t\t.join(this.vertices).where(1).equalTo(0).name(\"Edge with target vertex\");\n\t\t\treturn vertices.coGroup(edgesWithTargets)\n\t\t\t\t\t.where(0).equalTo(\"f0.f0\")\n\t\t\t\t\t.with(new ApplyNeighborCoGroupFunction<>(neighborsFunction)).name(\"Neighbors function\");\n\t\tcase ALL:\n\t\t\t// create <edge-sourceOrTargetVertex> pairs\n\t\t\tDataSet<Tuple3<K, Edge<K, EV>, Vertex<K, VV>>> edgesWithNeighbors = edges\n\t\t\t\t\t.flatMap(new EmitOneEdgeWithNeighborPerNode<>()).name(\"Forward and reverse edges\")\n\t\t\t\t\t.join(this.vertices).where(1).equalTo(0)\n\t\t\t\t\t.with(new ProjectEdgeWithNeighbor<>()).name(\"Edge with vertex\");\n\n\t\t\treturn vertices.coGroup(edgesWithNeighbors)\n\t\t\t\t\t.where(0).equalTo(0)\n\t\t\t\t\t.with(new ApplyCoGroupFunctionOnAllNeighbors<>(neighborsFunction)).name(\"Neighbors function\");\n\t\tdefault:\n\t\t\tthrow new IllegalArgumentException(\"Illegal edge direction\");\n\t\t}\n\t}", "void rightShift(int n) {\n        if (intLen == 0)\n            return;\n        int nInts = n >>> 5;\n        int nBits = n & 0x1F;\n        this.intLen -= nInts;\n        if (nBits == 0)\n            return;\n        int bitsInHighWord = BigInteger.bitLengthFor", "\tprotected void addImportedPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Javaproject_imported_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_Javaproject_imported_feature\", \"_UI_Javaproject_type\"),\n\t\t\t\t DxlPackage.Literals.JAVAPROJECT__IMPORTED,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "    public Key allocateId(ModelMeta<?> modelMeta) throws NullPointerException {\n        if (modelMeta == null) {\n            throw new NullPointerException(\"The modelMeta parameter is null.\");\n        }\n        return allocateId(modelMeta.getKind());\n    }\n", "public void addSocket ( IceSocketWrapper sock , TransportAddress remoteAddress ) { netAccessManager . addSocket ( sock , remoteAddress ) ; }", "public static Short toShort(Object o,Short defaultValue){\n  if (o instanceof Short)   return (Short)o;\n  if (defaultValue != null)   return Short.valueOf(toShortValue(o,defaultValue.shortValue()));\n  short res=toShortValue(o,Short.MIN_VALUE);\n  if (res == Short.MIN_VALUE)   return defaultValue;\n  return Short.valueOf(res);\n}\n", "@ReactMethod public void logEvent(String eventName,double valueToSum,ReadableMap parameters){\n  mAppEventLogger.logEvent(eventName,valueToSum,Arguments.toBundle(parameters));\n}\n", "public String toXML(final XStream xstream,final Object obj) throws ObjectStreamException {\n  final Writer writer=new StringWriter();\n  try {\n    toXML(xstream,obj,writer);\n  }\n catch (  final ObjectStreamException e) {\n    throw e;\n  }\ncatch (  final IOException e) {\n    throw new StreamException(\"Unexpected IO error from a StringWriter\",e);\n  }\n  return writer.toString();\n}\n", "SideEffectAnnotation methodSideEffectAnnotation(Element element,boolean issueErrorIfMoreThanOnePresent){\n  if (element != null) {\n    List<SideEffectAnnotation> sideEffectAnnotationPresent=new ArrayList<>();\n    for (    SideEffectAnnotation sea : SideEffectAnnotation.values()) {\n      if (getDeclAnnotationNoAliases(element,sea.getAnnotationClass()) != null) {\n        sideEffectAnnotationPresent.add(sea);\n      }\n    }\n    int count=sideEffectAnnotationPresent.size();\n    if (count == 0) {\n      return defaults.applyUncheckedCodeDefaults(element) ? SideEffectAnnotation.MAYRELEASELOCKS : SideEffectAnnotation.RELEASESNOLOCKS;\n    }\n    if (count > 1 && issueErrorIfMoreThanOnePresent) {\n    }\n    SideEffectAnnotation weakest=sideEffectAnnotationPresent.get(0);\n    for (    SideEffectAnnotation sea : sideEffectAnnotationPresent) {\n      if (sea.isWeakerThan(weakest)) {\n        weakest=sea;\n      }\n    }\n    return weakest;\n  }\n  return SideEffectAnnotation.weakest();\n}\n", "public void serviceInactive(ReceivableService receivableService) {\n\t\tfor (ReceivableEvent receivableEvent : receivableService.getReceivableEvents()) {\n\t\t\tSet<ServiceID> servicesReceivingEvent = eventID2serviceIDs.get(receivableEvent.getEventType());\n\t\t\tif", "public void resetState(RaftLog log) {\n    snapshotIndex = 0;\n    nextSnapshotIndex = 0;\n    nextSnapshotOffset = 0;\n    matchIndex = 0;\n    heartbeatTime = 0;\n    responseTime = 0;\n    appending = 0;\n    timeStats.clear();\n    configuring = false;\n    installing = false;\n    appendSucceeded = false;\n    failures = 0;\n    failureTime = 0;\n\n    switch (member.getType()) {\n      case PASSIVE:\n        reader = log.openReader(log.writer().getLastIndex() + 1, RaftLogReader.Mode.COMMITS);\n        break;\n      case PROMOTABLE:\n      case ACTIVE:\n        reader = log.openReader(log.writer().getLastIndex() + 1, RaftLogReader.Mode.ALL);\n        break;\n    }\n  }", "    public HttpSession getSession(boolean b) {\n        if( b )\n            this.session = new HttpSessionSimulator();\n        return this.session;\n    }\n", "public CSVParserBuilder withEscapeChar ( final char escapeChar ) { this . escapeChar = escapeChar ; return this ; }", "    private void enterMember(ClassSymbol c, Symbol sym) {\n        if ((sym.flags_field & (SYNTHETIC|BRIDGE)) != SYNTHETIC)\n            c.members_field.enter(sym);\n    }\n", "        public ScriptBindConfig script(String script) {\n            return new ScriptBindConfig(this, script);\n        }\n", "    public AppSearch getSearcher(String contextName) throws UnknownSearchNameException {\n        if (this.searchers.get(contextName) != null ) {\n            return (AppSearch) this.searchers.get(contextName);\n        } else {\n            throw new UnknownSearchNameException(contextName);\n        }\n    }\n", "private static void initWatchdog ( ) { if ( _shutdown ) return ; if ( null == _config ) _config = ServiceConfigLoader . getTransportConfiguration ( ) ; int timeoutResolution = Integer . parseInt ( System . getProperty ( SystemProperties . WATCHDOG_TIMEOUT", "private boolean isForceBlocked(String permissionName){\n  List<PermissionRule> access=access(permissionName);\n  List<PermissionRule> overridden=relevant.getOverridden(permissionName);\n  Set<ProjectRef> allows=new HashSet<>();\n  Set<ProjectRef> blocks=new HashSet<>();\n  for (  PermissionRule rule : access) {\n    if (rule.isBlock()) {\n      blocks.add(relevant.getRuleProps(rule));\n    }\n else     if (rule.getForce()) {\n      allows.add(relevant.getRuleProps(rule));\n    }\n  }\n  for (  PermissionRule rule : overridden) {\n    if (rule.getForce()) {\n      blocks.remove(relevant.getRuleProps(rule));\n    }\n  }\n  blocks.removeAll(allows);\n  return !blocks.isEmpty();\n}\n", "private void closeStartIfNecessary ( ) throws IOException { if ( closeStart ) { writer . write ( STR_ ) ; closeStart = BOOL_ ; } }", "public LabeledStmt ( ) { }", "public Stream<E> stream(){\n  return events.stream();\n}", "protected long parseThreadId ( ) throws IOException { return DebugProtocolHelper . readThreadId ( workerInputStream ) ; }", "@Override\n\tpublic void setIntHeader(final String name, final int value) {\n\t\theaders.put(name, String.valueOf(value));\n\t}", "protected boolean eq ( Object x , Object y ) { return x == y || x . equals ( y ) ; }", "public void assignRoleInDb(final JAASSystem _jaasSystem,\n                               final Role _role)\n        throws EFapsException\n    {\n        assignToUserObjectInDb(CIAdminUser.Person2Role.getType(), _jaasSystem, _role);\n    }", "public boolean rebuildOnFailedScrub(Throwable failure){\n  if (!isIndex())   return false;\n  SecondaryIndex index=null;\n  if (metadata.cfName.contains(Directories.SECONDARY_INDEX_NAME_SEPARATOR)) {\n    String[] parts=metadata.cfName.split(\"\\\\\" + Directories.SECONDARY_INDEX_NAME_SEPARATOR,2);\n    ColumnFamilyStore parentCfs=keyspace.getColumnFamilyStore(parts[0]);\n    index=parentCfs.indexManager.getIndexByName(metadata.cfName);\n    assert index != null;\n  }\n  if (index == null)   return false;\n  truncateBlocking();\n  logger.warn(\"Rebuilding index for {} because of <{}>\",name,failure.getMessage());\n  index.getBaseCfs().rebuildSecondaryIndex(index.getIndexName());\n  return true;\n}\n", "private void updateRegistrations(){\nsynchronized (updateLock) {\n    int j=0;\n    while (j < updateCount) {\n      int fd=updateDescriptors[j];\n      short events=getUpdateEvents(fd);\n      boolean isRegistered=registered.get(fd);\n      int opcode=0;\n      if (events != KILLED) {\n        if (isRegistered) {\n          opcode=(events != 0) ? EPOLL_CTL_MOD : EPOLL_CTL_DEL;\n        }\n else {\n          opcode=(events != 0) ? EPOLL_CTL_ADD : 0;\n        }\n        if (opcode != 0) {\n          epollCtl(epfd,opcode,fd,events);\n          if (opcode == EPOLL_CTL_ADD) {\n            registered.set(fd);\n          }\n else           if (opcode == EPOLL_CTL_DEL) {\n            registered.clear(fd);\n          }\n        }\n      }\n      j++;\n    }\n    updateCount=0;\n  }\n}\n", "private Class parseClass ( final GroovyCodeSource codeSource ) throws CompilationFailedException { return loader . parseClass ( codeSource , BOOL_ ) ; }", "void assertElementIsNotClickableAfter ( By by , int timeoutInSeconds ) ;", "    public void executionSuspended(RunnableQueue rq) {\n        if (suspendCalled) {\n            running = false;\n            fireManagerSuspendedEvent();\n        }\n    }\n", "\tpublic void save(ExternalUserAccount externalUserAccount) {\n\t\texternalUserAccountDAO.makePersistent(externalUserAccount);\n\t}\n", "    public void visit(RemovePropertyRange event) throws KAONException {\n        loadProperty(event.getProperty());\n        loadConcept(event.getConcept());\n    }\n", "\tpublic String getText(Object element) {\n\t\tMemberPart part = (MemberPart) element;\n\t\tMemberModel model = (MemberModel) part.getModel();\n\t\treturn model.getDisplayName();\n\t}\n", "@Override public boolean equals(Object obj){\n  if (obj == null) {\n    return false;\n  }\n  if (getClass() != obj.getClass()) {\n    return false;\n  }\n  final Favorite other=(Favorite)obj;\n  if (!Objects.equals(this.code,other.code)) {\n    return false;\n  }\n  if (this.emoteset != other.emoteset) {\n    return false;\n  }\n  return true;\n}\n", "public static void ensureServiceAccessIsAllowed(final RegisteredService registeredService) {\n        ensureServiceAccessIsAllowed(registeredService != null ? registeredService.getName() : StringUtils.EMPTY, registeredService);\n    }", "    public String getContent() throws java.io.IOException, MessagingException {\n        if (hasMimeType(\"text/plain\"))\n            return (String)part.getContent();\n        else\n            return \"\";\n    }\n", "public boolean supportsNativeSlaveSync ( ) ;", "public AbstractCpeBuilder(String name,File yamlFile) throws BaleenException {\n  this.name=name;\n  try {\n    yamlString=Files.toString(yamlFile,StandardCharsets.UTF_8);\n  }\n catch (  IOException e) {\n    throw new BaleenException(e);\n  }\n}\n", "private long renewEventLeaseDo(long eventID,Uuid leaseID,long renewDuration) throws UnknownLeaseException {\n  long now=System.currentTimeMillis();\n  long renewExpiration=renewEventLeaseInt(eventID,leaseID,renewDuration,now);\n  addLogRecord(new EventLeaseRenewedLogObj(eventID,leaseID,renewExpiration));\n  return renewExpiration - now;\n}\n", "int findSyncPosition(){\n  int count=mItemCount;\n  if (count == 0) {\n    return INVALID_POSITION;\n  }\n  long idToMatch=mSyncRowId;\n  int seed=mSyncPosition;\n  if (idToMatch == INVALID_ROW_ID) {\n    return INVALID_POSITION;\n  }\n  seed=Math.max(0,seed);\n  seed=Math.min(count - 1,seed);\n  long endTime=SystemClock.uptimeMillis() + SYNC_MAX_DURATION_MILLIS;\n  long rowId;\n  int first=seed;\n  int last=seed;\n  boolean next=false;\n  boolean hitFirst;\n  boolean hitLast;\n  T adapter=getAdapter();\n  if (adapter == null) {\n    return INVALID_POSITION;\n  }\n  while (SystemClock.uptimeMillis() <= endTime) {\n    rowId=adapter.getItemId(seed);\n    if (rowId == idToMatch) {\n      return seed;\n    }\n    hitLast=last == count - 1;\n    hitFirst=first == 0;\n    if (hitLast && hitFirst) {\n      break;\n    }\n    if (hitFirst || (next && !hitLast)) {\n      last++;\n      seed=last;\n      next=false;\n    }\n else     if (hitLast) {\n      first--;\n      seed=first;\n      next=true;\n    }\n  }\n  return INVALID_POSITION;\n}\n", "  public JClassType getType(String name) throws NotFoundException {\n    JClassType type = findType(name);\n    if (type == null) {\n      throw new NotFoundException(name);\n    }\n    return type;\n  }\n", "\tpublic double get(double in, String unit1, String unit2) {\n\n\t\treturn in;\n\t}\n", "@CliObjectOption(description = \"Sets the period for which articles should be pulled in ISO time format (e.g. P2D, PT1H)\")\n  public EmbeddedWikipediaExample lookback(String isoLookback) {\n    this.setConfiguration(WikipediaExtractor.BOOTSTRAP_PERIOD, isoLookback);\n    return this;\n  }", "protected boolean evaluate ( final long dynamicValue ) { switch ( m_relation ) { case EQUAL_TO : return dynamicValue == m_value ; case GREATER_EQUAL_THAN : return dynamicValue >= m_value ; case GREATER_THAN : return dynamicValue > m_value ; case LESS_EQUA", "public SpaceDocument ( ) { this ( _defaultTypeName , null ) ; }", "public static < T > Observable . Transformer < T , T > applyComputationSchedulers ( ) { return ( Observable . Transformer < T , T > ) computationTransformer ; }", "public static void uninstall(){\n  final PopupFactory factory=PopupFactory.getSharedInstance();\n  if (!(factory instanceof ShadowPopupFactory)) {\n    return;\n  }\n  final PopupFactory stored=((ShadowPopupFactory)factory).storedFactory;\n  PopupFactory.setSharedInstance(stored);\n}\n", "public void testIdempotency ( ) throws Exception { File lockFile = new File ( STR_ ) ; WriteLock wl = new WriteLock ( lockFile ) ; for ( int i = NUM_ ; i < NUM_ ; i ++ ) { boolean locked = wl . acquire ( ) ; assertTrue ( STR_ , locked ) ; assertTrue ( STR_ , wl . isLocked ( ) ) ; } for ( int i = NUM_ ; i < NUM_ ; i ++ ) { wl . release ( ) ; assertFalse ( STR_ , wl . isLocked ( ) ) ; } }", "public JHyperlink(){\n  super();\n  normalForeground=UIManager.getColor(\"Hyperlink.foreground\");\n  activeForeground=UIManager.getColor(\"Hyperlink.activeForeground\");\n  visitedForeground=UIManager.getColor(\"Hyperlink.visitedForeground\");\n  setBorderPainted(false);\n  setContentAreaFilled(false);\n  setForeground(normalForeground);\n  setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n  setMargin(new Insets(0,0,0,0));\n  setAction(defaultBrowseAction);\n}\n", "public static int indexOfDomainMatch(String userName) {\n    if (userName == null) {\n      return -1;\n    }\n\n    int idx = userName.indexOf('/');\n    int idx2 = userName.indexOf('@');\n    int endIdx = Math.min(idx, idx2); // Use the earlier match.\n    // Unless at least one of '/' or '@' was not found, in\n    // which case, user the latter match.\n    if (endIdx == -1) {\n      endIdx = Math.max(idx, idx2);\n    }\n    return endIdx;\n  }", "public AgeFileFilter ( File cutoffReference , boolean acceptOlder ) { this ( cutoffReference . lastModified ( ) , acceptOlder ) ; }", "public Map<Integer,Table.Builder<? extends Table>> tableBuilderMap(){\n  return Collections.unmodifiableMap(this.tableBuilders);\n}\n", "public void editProperties() {\n        try {\n            PropertyGrid.create(this, null);\n        } catch (Exception e) {\n            DialogUtil.showError(\"Displaying property grid: \\r\\n\" + e.toString());\n        }\n    }", "public Map<URI,List<URI>> addSourceVolumeFullCopies(){\n  List<URI> fullCopies=Lists.newArrayList();\n  Map<URI,List<URI>> fullCopiesMap=new HashMap<>();\n  for (  URI volumeId : uris(volumeIds)) {\n    List<URI> volumeFullCopies=getFullCopies(volumeId);\n    fullCopies.addAll(volumeFullCopies);\n    fullCopiesMap.put(volumeId,volumeFullCopies);\n  }\n  if (!fullCopies.isEmpty()) {\n    BlockStorageUtils.addVolumesToConsistencyGroup(consistencyGroup,fullCopies);\n  }\n  return fullCopiesMap;\n}\n", "int traverseConsistencyCheck(TextEditProcessor processor,Document document,List<List<TextEdit>> sourceEdits){\n  int result=0;\n  if (fChildren != null) {\n    for (int i=fChildren.size() - 1; i >= 0; i--) {\n      TextEdit child=(TextEdit)fChildren.get(i);\n      result=Math.max(result,child.traverseConsistencyCheck(processor,document,sourceEdits));\n    }\n  }\n  if (processor.considerEdit(this)) {\n    performConsistencyCheck(processor,document);\n  }\n  return result;\n}\n", "protected static ExpressionFactory loadExpressionFactory(String expressionFactoryClassName)\n    {\n        try\n        {\n            Class<?> expressionFactoryClass = Class.forName(expressionFactoryClassName);\n            return (ExpressionFactory) expressionFactoryClass.newInstance();\n        }\n        catch (Exception ex)\n        {\n            if (log.isLoggable(Level.FINE))\n            {\n                log.log(Level.FINE, \"An error occured while instantiating a new ExpressionFactory. \"\n                        + \"Attempted to load class '\" + expressionFactoryClassName + \"'.\", ex);\n            }\n        }\n\n        return null;\n    }", "public Waiter<DescribeClustersRequest> clusterDeleted() {\n\n        return new WaiterBuilder<DescribeClustersRequest, DescribeClustersResult>().withSdkFunction(new DescribeClustersFunction(client))\n                .withAcceptors(new ClusterDeleted.IsClusterNotFoundMatcher(), new ClusterDeleted.IsCreatingMatcher(), new ClusterDeleted.IsModifyingMatcher())\n                .withDefaultPollingStrategy(new PollingStrategy(new MaxAttemptsRetryStrategy(30), new FixedDelayStrategy(60)))\n                .withExecutorService(executorService).build();\n    }", "    public void setAttribute(final String keyName, final Object attributeValue) {\n        Map threadAttrs = (Map) attributes.get();\n        if (threadAttrs == null) {\n            threadAttrs = new HashMap();\n            attributes.set(threadAttrs);\n        }\n        threadAttrs.put(keyName, attributeValue);\n    }\n", "public void selectNodes ( final Collection < NodeType > nodes , final boolean selected ) { Preconditions . checkNotNull ( nodes , STR_ ) ; m_graph . firePreEvent ( ) ; for ( final NodeType node : nodes ) { Preconditions . checkNotNull ( node , STR_ ) ; ( ", "@Override\n  public boolean handleBack() {\n    Screen currentScreen = currentScreen();\n    if (currentScreen.handleBack()) {\n      return true;\n    } else {\n      if (!atRoot()) {\n        goBack();\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }", "boolean doActionDeviceConfigureLocal ( boolean discoverRequired , InetAddress inetAddress , String apSsid , String apPassword , String randomToken , String deviceBssid ) ;", "  public LineBuilder append(boolean value) {\n    if (fieldNum > 0) line.append('|');\n    line.append(value);\n    ++fieldNum;\n    return this;\n  }\n", "    protected DirContext open() throws NamingException {\n\n        // Do nothing if there is a directory server connection already open\n        if (context != null)\n            return (context);\n\n        try {\n\n            // Ensure that we have a directory context available\n            context = new InitialDirContext(getDirectoryContextEnvironment());\n\n        } catch (Exception e) {\n\n            connectionAttempt = 1;\n\n            // log the first exception.\n            containerLog.warn(sm.getString(\"jndiRealm.exception\"), e);\n\n            // Try connecting to the alternate url.\n            context = new InitialDirContext(getDirectoryContextEnvironment());\n\n        } finally {\n\n            // reset it in case the connection times out.\n            // the primary may come back.\n            connectionAttempt = 0;\n\n        }\n\n        return (context);\n\n    }\n", "        public void actionPerformed( ActionEvent action ) {\n\n            Object button = action.getSource();\n            if (button == yes) {\n                answer = YES;\n            } else if (button == no) {\n                answer = NO;\n            }\n            hide();\n        }\n", "    protected void onSelectRequest(int row, int col) {\n        // if click is on currently-selected row, unselect it\n        if (_table.getSelectedRow() != null && _table.getSelectedRow().getRowIndex() == row)\n            _table.unSelectRow(row);\n        else\n            _table.selectRow(row);\n    }\n", "\tpublic void addModelChangeListener(ModelChangeListener l) {\n\t\tsynchronized(m_listeners) {\n\t\t\tm_listeners.add(l);\n\t\t}\n\t}\n", "public List < LocalCandidate > createUPNPCandidate ( IceSocketWrapper socket , String externalIP , int port , Component cmp , GatewayDevice device ) throws Exception { List < LocalCandidate > ret = new ArrayList < > ( ) ; TransportAddress addr = new Trans", "public boolean isPaused ( ) { return paused ; }", "public ClasspathBuilder addAll(FilePath base, String glob) throws IOException, InterruptedException {\n        for(FilePath item : base.list(glob))\n            add(item);\n        return this;\n    }\n\n    /**\n     * Returns the string representation of the classpath.\n     */\n    @Override\n    public String toString() {\n        return Util.join(args,File.pathSeparator);\n    }\n}", "private void setupKey(OneKey key) throws CoseException {\n        CBORObject cn2;\n        CBORObject cn;\n        \n        cnKey = key;\n\n        if (rgbSignature != null) return;\n        \n        cn = key.get(KeyKeys.Algorithm);\n        if (cn != null) {\n            cn2 = findAttribute(HeaderKeys.Algorithm);\n            if (cn2 == null) addAttribute(HeaderKeys.Algorithm, cn, Attribute.PROTECTED);\n        }\n        \n        cn = key.get(KeyKeys.KeyId);\n        if (cn != null) {\n            cn2 = findAttribute(HeaderKeys.KID);\n            if (cn2 == null) addAttribute(HeaderKeys.KID, cn, Attribute.UNPROTECTED);\n        }\n    }", "private void doGetHelper(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  logger.log(Level.INFO,\"request: \" + request.getRequestURI());\n  final RequestAndResponse requestAndResponse=new RequestAndResponse(request,response);\n  standardResponseStuff(requestAndResponse);\n  final String fullUri=request.getRequestURI();\n  requestAndResponse.setOverrideUri(fullUri);\n  if (fullUri.equals(\"/\")) {\n    handleHtmlIndexPage(requestAndResponse);\n    return;\n  }\n  if (fullUri.equals(\"/robots.txt\")) {\n    handleRobotsTxt(requestAndResponse);\n    return;\n  }\n  final ArrayList<String> uris=splitUris(fullUri);\n  if (uris == null) {\n    returnHtml404(requestAndResponse);\n    return;\n  }\n  requestAndResponse.moreThanOneUri=uris.size() > 1;\n  if (uris.size() > 1) {\n    requestAndResponse.justGetTitle=true;\n    for (int i=0; i < uris.size(); ++i) {\n      final String uri=uris.get(i);\n      requestAndResponse.setOverrideUri(uri);\n      routeSingleGetRequest(requestAndResponse,uri);\n    }\n    requestAndResponse.justGetTitle=false;\n    requestAndResponse.titleAlreadyFormed=true;\n  }\n  for (int i=0; i < uris.size(); ++i) {\n    final String uri=uris.get(i);\n    requestAndResponse.setOverrideUri(uri);\n    if (uris.size() > 1) {\n      if (i == 0) {\n        requestAndResponse.skipFooter=true;\n      }\n else       if (i == uris.size() - 1) {\n        requestAndResponse.skipHeader=true;\n        requestAndResponse.skipFooter=false;\n      }\n else {\n        requestAndResponse.skipHeader=true;\n      }\n    }\n    routeSingleGetRequest(requestAndResponse,uri);\n  }\n}\n", "\tpublic void setProjectionPolicy(int policy) {\n\t\tthis.view.setProjectionPolicy(policy);\n\t\tgenericEvent.setType(VcObjectEvent.VCVIEW_CHANGED);\n\t\tcurrentEvent = genericEvent;\n\t\tnotifyChangeListeners();\n\t}\n", "    public void setRolloff(float rolloff) {\n        if (isLiveOrCompiled())\n            if (!this.getCapability(ALLOW_ROLLOFF_WRITE)) \n                throw new CapabilityNotSetException(J3dI18N.getString(\"AuralAttributes2\")); \n        ((AuralAttributesRetained)this.retained).setRolloff(rolloff);\n    }\n", "\tpublic void removeFromfeatures (org.unitime.timetable.model.RoomFeature roomFeature) {\n\t\tif (null == getFeatures()) \n\t\t\tsetFeatures(new java.util.HashSet());\n\t\tgetFeatures().remove(roomFeature);\n\t}\n", "  protected Object evaluateParen(final AbstractExpressionEvaluator pExpressionEvaluator, final UnaryExprToken pToken, final SymbolContext pSymbolContext) throws EvaluationException {\n    try {\n      return pExpressionEvaluator.evaluate(pToken.getSubToken(), pSymbolContext);\n    } catch (final ClassCastException e) {\n      throw new EvaluationException(\"The \\\"not\\\" method is not defined for \"\n        + pToken.getSubToken().getClass().getName(), e, pToken);\n    }\n  }\n", "private void showContextMenu(final MouseEvent event){\n  if (producers.getSelectedIndex() > -1) {\n    JPopupMenu contextMenu=new JPopupMenu();\n  }\n}\n", "    public void setInput(final String input) {\n        if (input == null) {\n            throw (new IllegalArgumentException(\n                    \"You must provide a COBOL source folder or file\"));\n        }\n        File file = new File(input);\n        if (file.exists()) {\n            if (file.isDirectory() && file.list().length == 0) {\n                throw new IllegalArgumentException(\"Folder \" + input\n                        + \" is empty\");\n            }\n        } else {\n            throw new IllegalArgumentException(\"Input file or folder \" + input\n                    + \" not found\");\n        }\n        _input = file;\n    }\n", "    private void logError(TransformerException e, String type) {\n        if (logger == null) {\n            return;\n        }\n\n        String systemid = null;\n        Integer lineNumber = null;\n        Integer columnNumber = null;\n        SourceLocator locator = e.getLocator();\n        if (locator != null) {\n            systemid = locator.getSystemId();\n            if (locator.getLineNumber() != -1)\n            {\n                lineNumber = new Integer( locator.getLineNumber() );\n                if (locator.getColumnNumber() != -1)\n                {\n                    columnNumber = new Integer( locator.getColumnNumber() );\n                }\n            }\n        }\n        logError( systemid, lineNumber, columnNumber, type, e.getMessage(), e.getCause() );\n    }\n", "private void addScrollGapPath(int x,int y,int w,int h,boolean isAtLeft){\n  final double hHalf=h / 2.0;\n  final double wFull=isAtLeft ? w : 0;\n  final double wHalfOff=isAtLeft ? w - hHalf : hHalf;\n  path.quadTo(x + wHalfOff,y + h,x + wHalfOff,y + hHalf);\n  path.quadTo(x + wHalfOff,y,x + wFull,y);\n}\n", "public static Console create(boolean interactive) throws IOException {\n  consoleInstance.set(new Console(interactive));\n  return consoleInstance.get();\n}\n", "public Map<String,String> parse(final String str,char[] separators){\n  if (separators == null || separators.length == 0) {\n    return new HashMap<String,String>();\n  }\n  char separator=separators[0];\n  if (str != null) {\n    int idx=str.length();\n    for (int i=0; i < separators.length; i++) {\n      int tmp=str.indexOf(separators[i]);\n      if (tmp != -1) {\n        if (tmp < idx) {\n          idx=tmp;\n          separator=separators[i];\n        }\n      }\n    }\n  }\n  return parse(str,separator);\n}\n", "public String concatQueryString(Map<String, String> parameters)\n        throws UnsupportedEncodingException {\n        if (null == parameters) {\n            return null;\n        }\n\n        StringBuilder urlBuilder = new StringBuilder(\"\");\n        for (Map.Entry<String, String> entry : parameters.entrySet()) {\n            String key = entry.getKey();\n            String val = entry.getValue();\n            urlBuilder.append(encode(key));\n            if (val != null) {\n                urlBuilder.append(\"=\").append(encode(val));\n            }\n            urlBuilder.append(\"&\");\n        }\n\n        int strIndex = urlBuilder.length();\n        if (parameters.size() > 0) {\n            urlBuilder.deleteCharAt(strIndex - 1);\n        }\n\n        return urlBuilder.toString();\n    }", "public static int getCDSLengthForward(List<Integer> exonStarts, List<Integer> exonEnds, int cdsStart, int cdsEnd) {\n\n\t\tint codingLength = 0;\n\n\t\tfor (int i = 0; i < exonStarts.size(); i++) {\n\n\t\t\tint start = exonStarts.get(i)+base;\n\t\t\tint end = exonEnds.get(i);\n\n\t\t\tif ( (start < cdsStart+base && end < cdsStart) || (start > cdsEnd && end > cdsEnd) )\n\t\t\t\tcontinue;\n\n\t\t\tif (start < cdsStart+base)\n\t\t\t\tstart = cdsStart+base;\n\n\t\t\tif (end > cdsEnd)\n\t\t\t\tend = cdsEnd;\n\n\t\t\tcodingLength += (end - start + 1);\n\t\t}\n\t\treturn codingLength-3 ;\n\t}", "    protected void loadWord() {\n        int start = index;\n        boolean withinQuotes = false;\n\n        while (true) {\n            if (index == last)\n                return;\n\n            char c = value.charAt(index);\n\n            if (!withinQuotes && c == '=') {\n                if (index == start) {\n                    buffer.append(c);\n                    index++;\n                }\n                return;\n            }\n            if (!withinQuotes && Character.isWhitespace(c))\n                return;\n            if (c == '\\\"')\n                withinQuotes = !withinQuotes;\n\n            buffer.append(c);\n            index++;\n        }\n    }\n", "    public void addJavaScriptText(String code) {\n        Document document = getDocument();\n        Element headElement = (Element) document.getElementsByTagName(\"head\").item(0);\n        Element scriptElement = document.createElement(\"script\");\n        Text textNode = document.createTextNode(code);\n        scriptElement.appendChild(textNode);\n        scriptElement.setAttribute(\"type\", \"text/javascript\");\n        headElement.appendChild(scriptElement);\n    }\n", "public void processStreamInfo(StreamInfo info) {\n        synchronized (pcmProcessors) {\n            Iterator<PCMProcessor> it = pcmProcessors.iterator();\n            while (it.hasNext()) {\n                PCMProcessor processor = (PCMProcessor)it.next();", "public void paintPopupMenuBackground ( SynthContext context , Graphics g , int x , int y , int w , int h ) { }", "public boolean shouldInterceptTouchEvent(MotionEvent ev){\n  final int action=MotionEventCompat.getActionMasked(ev);\n  final int actionIndex=MotionEventCompat.getActionIndex(ev);\n  if (action == MotionEvent.ACTION_DOWN) {\n    cancel();\n  }\n  if (mVelocityTracker == null) {\n    mVelocityTracker=VelocityTracker.obtain();\n  }\n  mVelocityTracker.addMovement(ev);\nswitch (action) {\ncase MotionEvent.ACTION_DOWN:\n{\n      final float x=ev.getX();\n      final float y=ev.getY();\n      final int pointerId=MotionEventCompat.getPointerId(ev,0);\n      saveInitialMotion(x,y,pointerId);\n      final View toCapture=findTopChildUnder((int)x,(int)y);\n      if (toCapture == mCapturedView && mDragState == STATE_SETTLING) {\n        tryCaptureViewForDrag(toCapture,pointerId);\n      }\n      final int edgesTouched=mInitialEdgeTouched[pointerId];\n      if ((edgesTouched & mTrackingEdges) != 0) {\n        mCallback.onEdgeTouched(edgesTouched & mTrackingEdges,pointerId);\n      }\n      break;\n    }\ncase MotionEventCompat.ACTION_POINTER_DOWN:\n{\n    final int pointerId=MotionEventCompat.getPointerId(ev,actionIndex);\n    final float x=MotionEventCompat.getX(ev,actionIndex);\n    final float y=MotionEventCompat.getY(ev,actionIndex);\n    saveInitialMotion(x,y,pointerId);\n    if (mDragState == STATE_IDLE) {\n      final int edgesTouched=mInitialEdgeTouched[pointerId];\n      if ((edgesTouched & mTrackingEdges) != 0) {\n        mCallback.onEdgeTouched(edgesTouched & mTrackingEdges,pointerId);\n      }\n    }\n else     if (mDragState == STATE_SETTLING) {\n      final View toCapture=findTopChildUnder((int)x,(int)y);\n      if (toCapture == mCapturedView) {\n        tryCaptureViewForDrag(toCapture,pointerId);\n      }\n    }\n    break;\n  }\ncase MotionEvent.ACTION_MOVE:\n{\n  final int pointerCount=MotionEventCompat.getPointerCount(ev);\n  for (int i=0; i < pointerCount; i++) {\n    final int pointerId=MotionEventCompat.getPointerId(ev,i);\n    final float x=MotionEventCompat.getX(ev,i);\n    final float y=MotionEventCompat.getY(ev,i);\n    final float dx=x - mInitialMotionX[pointerId];\n    final float dy=y - mInitialMotionY[pointerId];\n    if (dx < 0 || Math.abs(dx) <= Math.abs(dy))     break;\n    reportNewEdgeDrags(dx,dy,pointerId);\n    if (mDragState == STATE_DRAGGING) {\n      break;\n    }\n    final View toCapture=findTopChildUnder((int)x,(int)y);\n    if (toCapture != null && checkTouchSlop(toCapture,dx,dy) && tryCaptureViewForDrag(toCapture,pointerId)) {\n      break;\n    }\n  }\n  saveLastMotion(ev);\n  break;\n}\ncase MotionEventCompat.ACTION_POINTER_UP:\n{\nfinal int pointerId=MotionEventCompat.getPointerId(ev,actionIndex);\nclearMotionHistory(pointerId);\nbreak;\n}\ncase MotionEvent.ACTION_UP:\ncase MotionEvent.ACTION_CANCEL:\n{\ncancel();\nbreak;\n}\n}\nreturn mDragState == STATE_DRAGGING;\n}\n", "public void rearrangeTriangles(int[] indices) {\n        assert indices.length % 3 == 0;\n        // Step 1: Make sure that the first index of each triangle is the smallest\n        // one (rotate triangle nodes if necessary)\n        for (int off = 0; off < indices.length; off += 3) {\n            if ((indices[off + 1] < indices[off]) && (indices[off + 1] < indices[off + 2])) {\n                int tmp = indices[off];\n                indices[off] = indices[off + 1];\n                indices[off + 1] = indices[off + 2];\n                indices[off + 2] = tmp;\n            } else if ((indices[off + 2] < indices[off]) && (indices[off + 2] < indices[off + 1])) {\n                int tmp = indices[off];\n                indices[off] = indices[off + 2];\n                indices[off + 2] = indices[off + 1];\n                indices[off + 1] = tmp;\n            }\n        }\n\n        // Step 2: Sort the triangles based on the first triangle index\n        Triangle[] tris = new Triangle[indices.length / 3];\n        for (int i = 0; i < tris.length; i++) {\n            int off = i * 3;\n            tris[i] = new Triangle(indices, off);\n        }\n\n        Arrays.sort(tris);\n\n        for (int i = 0; i < tris.length; i++) {\n            int off = i * 3;\n            tris[i].copyBack(indices, off);\n        }\n    }", "public void setCodeDeliveryDetailsList(java.util.Collection<CodeDeliveryDetailsType> codeDeliveryDetailsList) {\n        if (codeDeliveryDetailsList == null) {\n            this.codeDeliveryDetailsList = null;\n            return;\n        }\n\n        this.codeDeliveryDetailsList = new java.util.ArrayList<CodeDeliveryDetailsType>(codeDeliveryDetailsList);\n    }", "public Iterator < EscapeTarget > escapeTargetIterator ( BasicBlock sourceBlock ) { List < EscapeTarget > escapeTargetList = escapeTargetListMap . get ( sourceBlock ) ; if ( escapeTargetList == null ) { escapeTargetList = Collections . emptyList ( ) ; } re", "@NotNull\n    protected <A, R> Optional<R> soapExceptionBarrier(\n            Command<A, R> command,\n            Mode mode,\n            @Nullable A param\n    ) throws SoapWebServiceException {\n        try {\n            return executor.execute(command, mode, param);\n        } catch (Exception | AssertionError e) {\n            if (e instanceof ServiceException) {\n                //convert\n                throw new SoapWebServiceException(((ServiceException) e).getFaultInfo());\n\n                //keep these\n            } else if (e instanceof SoapWebServiceException) {\n                throw (SoapWebServiceException)e;\n\n            } else {\n                //should never arrive here. nothing we can do.\n                String msg = \"Unexpected late exception translation for: \"+e.getMessage();\n                logger.error(msg);\n                throw new SoapWebServiceException(\n                        FaultInfoBuilders.Server.internalServerError()\n                        .applicationErrorCode(\"\"+ErrorCodes.Server.INTERNAL_SERVER_ERROR.getCode())\n                        .message(msg)\n                        .retrySameLocation(null)\n                        .retryOtherLocations(null)\n                        .incidentId(null),\n                        e\n                );\n            }\n        }\n    }", "    public void setEnabledOfChild(Control control, boolean enable) {\n        logger.log(Level.INFO, \"Set enabled state of \" + control + \" to \" + enable);\n        if (!Arrays.asList(getChildren()).contains(control))         \n            throw new IllegalArgumentException(\"Control is not a child of this composite.\");\n        final boolean isCompositeEnabled = this.getEnabled();\n        if (isCompositeEnabled) {\n            control.setEnabled(enable);\n        } else if (enable) {\n            disabledControls.remove(control);\n        } else if (!enable) {\n            disabledControls.add(control);\n        }\n    }\n", "public ReplicationFilterException ( String message ) { super ( message ) ; }", "protected void writeCharSequence ( CharSequence seq , CharBuf buffer ) { if ( seq . length ( ) > NUM_ ) { buffer . addJsonEscapedString ( seq . toString ( ) , disableUnicodeEscaping ) ; } else { buffer . addChars ( EMPTY_STRING_CHARS ) ; } }", "private static void assertSupported(){\n  Assert.state(delegate != null,\"Neither Java 8 nor Apache Commons Codec found - Base64 encoding not supported\");\n}\n", "  public void readFields(DataInput in) throws IOException {\n    String aclString = Text.readString(in);\n    buildACL(aclString);\n  }\n", "public void marshall(UpdateSecurityProfileRequest updateSecurityProfileRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (updateSecurityProfileRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(updateSecurityProfileRequest.getSecurityProfileName(), SECURITYPROFILENAME_BINDING);\n            protocolMarshaller.marshall(updateSecurityProfileRequest.getSecurityProfileDescription(), SECURITYPROFILEDESCRIPTION_BINDING);\n            protocolMarshaller.marshall(updateSecurityProfileRequest.getBehaviors(), BEHAVIORS_BINDING);\n            protocolMarshaller.marshall(updateSecurityProfileRequest.getAlertTargets(), ALERTTARGETS_BINDING);\n            protocolMarshaller.marshall(updateSecurityProfileRequest.getAdditionalMetricsToRetain(), ADDITIONALMETRICSTORETAIN_BINDING);\n            protocolMarshaller.marshall(updateSecurityProfileRequest.getDeleteBehaviors(), DELETEBEHAVIORS_BINDING);\n            protocolMarshaller.marshall(updateSecurityProfileRequest.getDeleteAlertTargets(), DELETEALERTTARGETS_BINDING);\n            protocolMarshaller.marshall(updateSecurityProfileRequest.getDeleteAdditionalMetricsToRetain(), DELETEADDITIONALMETRICSTORETAIN_BINDING);\n            protocolMarshaller.marshall(updateSecurityProfileRequest.getExpectedVersion(), EXPECTEDVERSION_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public static Type getArrayComponentType(Type type) {\n\t\tif (type instanceof Class) {\n\t\t\tClass<?> clazz = (Class<?>)type;\n\t\t\treturn clazz.getComponentType();\n\t\t} else if (type instanceof GenericArrayType) {\n\t\t\tGenericArrayType aType = (GenericArrayType) type;\n\t\t\treturn aType.getGenericComponentType();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}", "private void createRadioButtons() {\n    node.getChildren().clear();\n    radioButtons.clear();\n\n    for (int i = 0; i < field.getItems().size(); i++) {\n      RadioButton rb = new RadioButton();\n\n      rb.setText(field.getItems().get(i).toString());\n      rb.setToggleGroup(toggleGroup);\n\n      radioButtons.add(rb);\n    }\n\n    if (field.getSelection() != null) {\n      radioButtons.get(field.getItems().indexOf(field.getSelection())).setSelected(true);\n    }\n\n    node.getChildren().addAll(radioButtons);\n  }", "public <V>Object[] allMeta(){\n  Object[] cp;\nsynchronized (this) {\n    cp=Arrays.copyOf(data,data.length);\n  }\n  return cp;\n}\n", "final void searchMap ( String address ) { launchIntent ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( STR_ + Uri . encode ( address ) ) ) ) ; }", "void onTick ( ) ;", "private static void appendSystemPropertiesToCommandLine(AbstractWisdomMojo mojo, CommandLine cmd) {\n        Properties userProperties = mojo.session.getUserProperties();\n        if (userProperties != null) {\n            //noinspection unchecked\n            Enumeration<String> names = (Enumeration<String>) userProperties.propertyNames();\n            while (names.hasMoreElements()) {\n                String name = names.nextElement();\n                cmd.addArgument(\"-D\" + name + \"=\" + userProperties.getProperty(name));\n            }\n        }\n    }", "public Token match(int tok) throws ParseException {\n  if (Debug.parserDebug) {\n    Debug.println(\"match \" + tok);\n  }\n  if (tok > START && tok < END) {\n    if (tok == ID) {\n      if (!startsId())       throw new ParseException(buffer + \"\\nID expected\",ptr);\n      String id=getNextId();\n      this.currentMatch=new Token();\n      this.currentMatch.tokenValue=id;\n      this.currentMatch.tokenType=ID;\n    }\n else     if (tok == SAFE) {\n      if (!startsSafeToken())       throw new ParseException(buffer + \"\\nID expected\",ptr);\n      String id=ttokenSafe();\n      this.currentMatch=new Token();\n      this.currentMatch.tokenValue=id;\n      this.currentMatch.tokenType=SAFE;\n    }\n else     if (tok == ID_NO_WHITESPACE) {\n      if (!startsIdNoWhiteSpace())       throw new ParseException(buffer + \"\\nID no white space expected\",ptr);\n      String id=getNextIdNoWhiteSpace();\n      this.currentMatch=new Token();\n      this.currentMatch.tokenValue=id;\n      this.currentMatch.tokenType=ID_NO_WHITESPACE;\n    }\n else {\n      String nexttok=getNextId();\n      Integer cur=currentLexer.get(Utils.toUpperCase(nexttok));\n      if (cur == null || cur.intValue() != tok)       throw new ParseException(buffer + \"\\nUnexpected Token : \" + nexttok,ptr);\n      this.currentMatch=new Token();\n      this.currentMatch.tokenValue=nexttok;\n      this.currentMatch.tokenType=tok;\n    }\n  }\n else   if (tok > END) {\n    char next=lookAhead(0);\n    if (tok == DIGIT) {\n      if (!isDigit(next))       throw new ParseException(buffer + \"\\nExpecting DIGIT\",ptr);\n      this.currentMatch=new Token();\n      this.currentMatch.tokenValue=String.valueOf(next);\n      this.currentMatch.tokenType=tok;\n      consume(1);\n    }\n else     if (tok == ALPHA) {\n      if (!isAlpha(next))       throw new ParseException(buffer + \"\\nExpecting ALPHA\",ptr);\n      this.currentMatch=new Token();\n      this.currentMatch.tokenValue=String.valueOf(next);\n      this.currentMatch.tokenType=tok;\n      consume(1);\n    }\n  }\n else {\n    char ch=(char)tok;\n    char next=lookAhead(0);\n    if (next == ch) {\n      consume(1);\n    }\n else     throw new ParseException(buffer + \"\\nExpecting  >>>\" + ch+ \"<<< got >>>\"+ next+ \"<<<\",ptr);\n  }\n  return this.currentMatch;\n}\n", "public < T extends PluginCanvas > void create ( CommandSender owner , String name , PluginCanvasRegistry < T > registry ) throws NamingException ;", "public static void saveHq(Bitmap src, String fileName) throws ImageSaveException {\n        saveJpeg(src, fileName, JPEG_QUALITY_HQ);\n    }", "\tpublic void setUpdateCount(int updateCount) {\n\t\tthis.updateCount = updateCount;\n\t\tsetModified(\"updateCount\");\n\t}\n", "public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { request . getSession ( ) . setAttribute ( STR_ , STR_ ) ; response . sendRedirect ( STR_ ) ; return ; }", "public void computeLayer(){\n  doPrepare();\n}\n", "public static LinkedBuffer allocate(int size, LinkedBuffer previous)\r\n    {\r\n        if (size < MIN_BUFFER_SIZE)\r\n            throw new IllegalArgumentException(MIN_BUFFER_SIZE + \" is the minimum buffer size.\");\r\n\r\n        return new LinkedBuffer(size, previous);\r\n    }", "@BeforeClass public static void verifyEnv(){\n  assertNotNull(address);\n  assertNotNull(appId);\n  assertNotNull(userId);\n  assertNotNull(password);\n  assertNotNull(rootToken);\n}\n", "private void clearMemberData()\n   {\n      m_reader = null;\n      m_root = null;\n      m_eventManager = null;\n      m_file = null;\n      m_calendarMap = null;\n      m_projectDir = null;\n      m_viewDir = null;\n   }", "\tprotected void _newobj() {\n\t\tthis.n++;\n\t\tthis.offsets.put(Integer.valueOf(this.n), Integer.valueOf(this\n\t\t\t\t._length(this.buffer)));\n\t\tthis._out(this.n + \" 0 obj\"); //$NON-NLS-1$\n\t}\n", "private CGlobalSettings ( ) { }", "public String getIndependentParentLink(String style)\n\t\t\tthrows ParserConfigurationException, IOException, SAXException {\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\tInputSource src = new InputSource(new StringReader(style));\n\t\tDocument doc = builder.parse(src);\n\t\tNodeList links = doc.getElementsByTagName(\"link\");\n\t\tfor (int i = 0; i < links.getLength(); ++i) {\n\t\t\tNode n = links.item(i);\n\t\t\tNode relAttr = n.getAttributes().getNamedItem(\"rel\");\n\t\t\tif (relAttr != null) {\n\t\t\t\tif (\"independent-parent\".equals(relAttr.getTextContent())) {\n\t\t\t\t\tNode hrefAttr = n.getAttributes().getNamedItem(\"href\");\n\t\t\t\t\tif (hrefAttr != null) {\n\t\t\t\t\t\treturn hrefAttr.getTextContent();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "void registerNotificationListener(ObjectName source) throws InstanceNotFoundException {\n  mBeanServer.addNotificationListener(source,this,null,source);\n}\n", "public synchronized Future < ReplDBMSHeader > watchForProcessedTimestamp ( Timestamp timestamp , boolean cancel ) throws InterruptedException { SourceTimestampWatchPredicate predicate = new SourceTimestampWatchPredicate ( timestamp ) ; return waitForProcessedEvent ( predicate , cancel ) ; }", "    private Index compPivot()    {\n\n        double      cplVal;         // current coupling value\n        double      cplMax;         // maximum coupling value\n        Index    posMax;         // position of maximum value\n        \n        posMax = Index.XY;\n        cplVal = compCoupling(posMax);\n        cplMax = cplVal;\n        for (Index pos : Index.getUpperTriangle()) {\n            cplVal = compCoupling(pos);\n            \n            if (cplVal > cplMax)    {\n                cplMax = cplVal;\n                posMax = pos;\n            }\n        }\n        \n        return posMax;\n    }\n", "public void addSegmentsFromPath(MultiPath src, int srcPathIndex,\n\t\t\tint srcSegmentFrom, int srcSegmentCount, boolean bStartNewPath) {\n\t\tm_impl.addSegmentsFromPath((MultiPathImpl) src._getImpl(),\n\t\t\t\tsrcPathIndex, srcSegmentFrom, srcSegmentCount, bStartNewPath);\n\t}", "public void updateSitePath(String sitePath) {\n\n        String oldPath = getSitePath();\n        getListItemWidget().setSubtitleLabel(sitePath);\n        for (Widget child : getChildren()) {\n            ((CmsGalleryTreeItem)child).updateParentPath(sitePath, oldPath);\n        }\n    }", "public void load(InputStream is,boolean doSubstitutions) throws IOException {\n  Properties props=new Properties();\n  props.load(is);\n  if (doSubstitutions)   substituteSystemValues(props);\n  load(props);\n  props=null;\n}\n", "    public SDEventStream (DataStream d, EndOfSentenceScanner s) {\n        this(d,s,new SDContextGenerator());\n    }\n", "public static IPackageFragmentRoot addSourceContainer(IJavaProject jproject,String containerName,IPath[] inclusionFilters,IPath[] exclusionFilters,String outputLocation) throws CoreException {\n  IProject project=jproject.getProject();\n  IContainer container=null;\n  if (containerName == null || containerName.length() == 0) {\n    container=project;\n  }\n else {\n    IFolder folder=project.getFolder(containerName);\n    if (!folder.exists()) {\n      CoreUtility.createFolder(folder,false,true,null);\n    }\n    container=folder;\n  }\n  IPackageFragmentRoot root=jproject.getPackageFragmentRoot(container);\n  IPath outputPath=null;\n  if (outputLocation != null) {\n    IFolder folder=project.getFolder(outputLocation);\n    if (!folder.exists()) {\n      CoreUtility.createFolder(folder,false,true,null);\n    }\n    outputPath=folder.getFullPath();\n  }\n  IClasspathEntry cpe=JavaCore.newSourceEntry(root.getPath(),inclusionFilters,exclusionFilters,outputPath);\n  addToClasspath(jproject,cpe);\n  return root;\n}\n", "public void setTargetLocations(java.util.Collection<TargetLocation> targetLocations) {\n        if (targetLocations == null) {\n            this.targetLocations = null;\n            return;\n        }\n\n        this.targetLocations = new com.amazonaws.internal.SdkInternalList<TargetLocation>(targetLocations);\n    }", "@Override public Object filter(final Object target){\n  if (target == null) {\n    return null;\n  }\n  if (target instanceof Closure) {\n    return target;\n  }\n  Class<?> clazz=target instanceof Class ? (Class<?>)target : target.getClass();\n  if (clazz.isArray()) {\n    clazz=clazz.getComponentType();\n  }\n  final String className=clazz.getName();\n  if (classShutter.visibleToScripts(className)) {\n    return target;\n  }\n else {\n    throw new SecurityException(String.format(ERROR_MESSAGE,className));\n  }\n}\n", "public IAtomContainer proposeStructure() {\n        logger.debug(\"RandomGenerator->proposeStructure() Start\");\n        do {\n            try {\n                trial = molecule.clone();\n            } catch (CloneNotSupportedException e) {\n                throw new IllegalStateException(\"Could not clone IAtomContainer!\" + e.getMessage());\n            }\n            mutate(trial);\n            if (logger.isDebugEnabled()) {\n                String s = \"BondCounts:    \";\n                for (int f = 0; f < trial.getAtomCount(); f++) {\n                    s += trial.getConnectedBondsCount(trial.getAtom(f)) + \" \";\n                }\n                logger.debug(s);\n                s = \"BondOrderSums: \";\n                for (int f = 0; f < trial.getAtomCount(); f++) {\n                    s += trial.getBondOrderSum(trial.getAtom(f)) + \" \";\n                }\n                logger.debug(s);\n            }\n        } while (trial == null || !ConnectivityChecker.isConnected(trial));\n        proposedStructure = trial;\n\n        return proposedStructure;\n    }", "void onReadingThreadStarted ( ) { boolean bothStarted = BOOL_ ; synchronized ( mThreadsLock ) { mReadingThreadStarted = BOOL_ ; if ( mWritingThreadStarted ) { bothStarted = BOOL_ ; } } callOnConnectedIfNotYet ( ) ; if ( bothStarted ) { onThreadsStarted ( ) ; } }", "@Override public int hashCode(){\n  int result;\n  result=(address != null ? address.hashCode() : 0);\n  result=29 * result + (city != null ? city.hashCode() : 0);\n  result=29 * result + (province != null ? province.hashCode() : 0);\n  result=29 * result + (c", "protected static <T> T getTracer(Class<T> intf, InterfaceTracer tracer, T ob)\n    {\n        tracer.setAppendable(System.err);\n        tracer.setObj(ob);\n        return (T) Proxy.newProxyInstance(\n                intf.getClassLoader(), \n                new Class<?>[] {intf}, \n                tracer);\n    }", "protected boolean isDeviceCompatibility ( ) { return mDeviceCompatibility ; }", "public void moveToTail(){\n  if (isTail() || isUnlinked()) {\n    return;\n  }\n  lock.lock();\n  try {\n    if (isTail() || isUnlinked()) {\n      return;\n    }\n    prev.next=next;\n    next.prev=prev;\n    next=sentinel;\n    prev=sentinel.prev;\n    sentinel.prev=this;\n    prev.next=this;\n  }\n  finally {\n    lock.unlock();\n  }\n}\n", "    private Categories createCategories(int pCount, String pPrefix, String pSuffix){\n        Categories categories = new Categories();\n        \n        for (int i = 0; i < pCount; i++){\n            Category category = new Category();\n            category.setName(pPrefix + \" \" + (pCount + 1) + \" \" + pSuffix);\n            categories.add(category);\n        }\n        \n        return categories;\n    }\n", "protected synchronized void rememberLastThing(UndoEvent event){\n  if (undoStack.size() >= stackSize) {\n    undoStack.removeElementAt(0);\n  }\n  if (logger.isLoggable(Level.FINE)) {\n    logger.fine(\"remembering (\" + event.getDescription() + \")\");\n  }\n  undo", "\tpublic void insert(Persistent entity) {\n\t\tupdate(entity);\n\t}\n", "private void sendFirstFragResponse()\n    {\n        if (ELASTICLOG.isDebugEnabled()) {\n            ELASTICLOG.debug(\"P\" + m_partitionId + \" sending first fragment response to coordinator \" +\n                    CoreUtils.hsIdToString(m_coordinatorHsId));\n        }\n        RejoinMessage msg = new RejoinMessage(m_mailbox.getHSId(),\n                RejoinMessage.Type.FIRST_FRAGMENT_RECEIVED);\n        m_mailbox.send(m_coordinatorHsId, msg);\n        m_firstFragResponseSent = true;\n    }", "public int submitSingle(T item) {\n        if (Objects.isNull(item))\n            return 0;\n        synchronized (this.dataList) {\n            this.dataList.add(item);\n            setLastDataTimestamp();\n            if (this.dataList.size() >= this.bulkSize)\n                flush();\n            return 1;\n        }\n    }", "public OVector(int c){\n  vector=new Object[Math.max(defaultCapacity,c)];\n}\n", "    public WebClient createWebClient() {\n        \n        Service service = new JAXRSServiceImpl(getAddress(), getServiceName());\n        getServiceFactory().setService(service);\n        \n        try {\n            Endpoint ep = createEndpoint();\n            ClientState actualState = getActualState();\n            WebClient client = actualState == null ? new WebClient(getAddress())\n                : new WebClient(actualState);\n            initClient(client, ep, actualState == null);\n    \n            this.getServiceFactory().sendEvent(FactoryBeanListener.Event.CLIENT_CREATED, client, ep);\n            \n            return client;\n        } catch (Exception ex) {\n            LOG.severe(ex.getClass().getName() + \" : \" + ex.getLocalizedMessage());\n            throw new RuntimeException(ex);\n        }\n    }\n", "\tpublic void set(long bitIndex, boolean value) throws IOException {\n\t\tif (value)\n\t\t\tset(bitIndex);\n\t\telse\n\t\t\tclear(bitIndex);\n\t}\n", "    public TRACInteger add(TRACInteger sum) {\n\t// Check that you don't actually want to be subtracting\n\tif (this.positive()) {\n\t    if (!sum.positive())\n\t\treturn subtract(new TRACInteger(true,sum.getDigits()));\n\t}\n\telse if (sum.positive())\n\t    return sum.subtract(new TRACInteger(true,this.getDigits()));\n\tbyte [] result = TRACInteger.add(this.getDigits(),sum.getDigits());\n\treturn new TRACInteger(this.positive(),result);\n    }\n", "    public int moveToTop(int index) {\n        Player p = list.remove(index);\n        list.add(0, p);\n        System.out.println(\"Moving \" + p.getName() + \" to top\");\n        return 0;\n    }\n", "public void findAndInit(Iterator<?> it){\n  while (it.hasNext()) {\n    findAndInit(it.next());\n  }\n}\n", "  public void resetLocalSystem() {\n    AtlasMapper am = (AtlasMapper) this.get_plugin().get_localImp();\n    am.reset();\n  }\n", "\tpublic String firstLetterToUpper(String string) {\n\t\treturn toUpperCase(string, 0);\n\t}\n", "    public void disposeView(){\n        pm.close();\n    }\n", "public void beginImportImage(String resourceGroupName, String registryName, ImportImageParameters parameters) {\n        beginImportImageWithServiceResponseAsync(resourceGroupName, registryName, parameters).toBlocking().single().body();\n    }", "public String toStringForTimeZone(T dateTime, String newZoneID) {\n    return toDateTime(dateTime)\n        .withZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone(newZoneID)))\n        .toString(ISODateTimeFormat.dateHourMinuteSecond());\n  }", "  public void setParentProject(Project parent, ProjectGroup group) {\n    TreePath tp = new TreePath\n      (Utilities.getInstance().createPathTo(parent, group).toArray());\n\n    getParentTree().setSelectionPath(tp);\n    getParentTree().scrollPathToVisible(tp);\n  }\n", "public String toXmlErrorMessage(boolean includeDebugInfo){\n  StringBuilder sb=new StringBuilder();\n  sb.append(\"<errors xmlns='http://schemas.google.com/g/2005'>\\n\");\n  for (  ServiceException sibling : siblings) {\n    addXmlError(sibling,sb,includeDebugInfo);\n  }\n  sb.append(\"</errors>\\n\");\n  return sb.toString();\n}\n", "public JsonHttpResponseHandler ( ) { super ( DEFAULT_CHARSET ) ; }", "public FieldAction(String name){\n  super(I18n.tr(name));\n}\n", "public void onLastItemVisible ( ) ;", "public void sendMessage(SIPMessage sipMessage,InetAddress receiverAddress,int receiverPort) throws IOException {\n  long time=System.currentTimeMillis();\n  sendMessage(sipMessage,receiverAddress,receiverPort,sipMessage instanceof SIPRequest);\n  logMessage(sipMessage,receiverAddress,receiverPort,time);\n}\n", "private static void saveNonNativeGraph ( final JFrame parent , final ZyGraph graph ) { final CSaveProgress progress = CGraphSaver . save ( parent , graph ) ; while ( ! progress . isDone ( ) ) { try { Thread . sleep ( NUM_ ) ; } catch ( final InterruptedException e ) { Thread . currentThread ( ) . interrupt ( ) ; } } }", "private void fatal(String message, String textFound, String textExpected)\n            throws SAXException {\n        // smart quotes -- 2005-08-20 hsivonen\n        if (textFound != null) {\n            message = message + \" (found \\u201C\" + textFound + \"\\u201D)\";\n        }\n        if (textExpected != null) {\n            message = message + \" (expected \\u201C\" + textExpected + \"\\u201D)\";\n        }\n        handler.fatal(message);\n\n        // \"can't happen\"\n        throw new FatalSAXException(message);\n    }", "public static int[] getMinIndexes (int[] values)\n    {\n        int min = Integer.MAX_VALUE;\n        int num = 0;\n        int vcount = (values == null) ? 0 : values.length;\n\n        for (int ii=0; ii < vcount; ii++) {\n            int value = values[ii];\n\n            if (value > min) {\n                // common case- stop checking things..\n                continue;\n\n            } else if (value < min) {\n                // new min\n                min = value;\n                num = 1;\n\n            } else {\n                // another sighting of min\n                num++;\n            }\n        }\n\n        // now find the indexes that have min\n        int[] mins = new int[num];\n        for (int ii=0, pos=0; pos < num; ii++) {\n            if (values[ii] == min) {\n                mins[pos++] = ii;\n            }\n        }\n\n        return mins;\n    }", "@CheckReturnValue\n  public String replaceFrom(CharSequence sequence, char replacement) {\n    String string = sequence.toString();\n    int pos = indexIn(string);\n    if (pos == -1) {\n      return string;\n    }\n    char[] chars = string.toCharArray();\n    chars[pos] = replacement;\n    for (int i = pos + 1; i < chars.length; i++) {\n      if (matches(chars[i])) {\n        chars[i] = replacement;\n      }\n    }\n    return new String(chars);\n  }", "public void visitLookupSwitchInsn ( Label dflt , int [ ] keys , Label [ ] labels ) { if ( mv != null ) { mv . visitLookupSwitchInsn ( dflt , keys , labels ) ; } }", "private static long globalIdForId ( Uri uri , long id ) { uri = ContentUris . withAppendedId ( uri , id ) ; String [ ] proj = { GLOBAL_ID } ; return Cursors . firstLong ( cr ( ) . query ( uri , proj , null , null , null ) ) ; }", "void afterWrite(Runnable task){\n  writeBuffer.add(task);\n  drainStatus.lazySet(REQUIRED);\n  tryToDrainBuffers();\n  notifyListener();\n}\n", "private Request createRequest(long started) {\n    int id = nextId.getAndIncrement();\n\n    Request request = data.build();\n    request.id = id;\n    request.started = started;\n\n    boolean loggingEnabled = picasso.loggingEnabled;\n    if (loggingEnabled) {\n      log(OWNER_MAIN, VERB_CREATED, request.plainId(), request.toString());\n    }\n\n    Request transformed = picasso.transformRequest(request);\n    if (transformed != request) {\n      // If the request was changed, copy over the id and timestamp from the original.\n      transformed.id = id;\n      transformed.started = started;\n\n      if (loggingEnabled) {\n        log(OWNER_MAIN, VERB_CHANGED, transformed.logId(), \"into \" + transformed);\n      }\n    }\n\n    return transformed;\n  }", "public java.util.List<InstanceMonitoring> getInstanceMonitorings() {\n        if (instanceMonitorings == null) {\n            instanceMonitorings = new com.amazonaws.internal.SdkInternalList<InstanceMonitoring>();\n        }\n        return instanceMonitorings;\n    }", "public static <E> List<E> findElements(Class<E> clazz, By by, SearchContext searchContext) {\n\t\tList<WebElement> webElements = searchContext.findElements(by);\n\t\tif (webElements.isEmpty()) return Lists.newArrayList();\n\t\t\n\t\tWiseDecorator decorator = new WiseDecorator(new DefaultElementLocatorFactory(searchContext));\n\t\treturn decorator.decorate(clazz, webElements);\n\t}", "        private void handleExceptions(WCS config) {\n            start(\"Exception\");\n\n            final String[] formats = config.getExceptionFormats();\n            final int length = formats.length;\n\n            for (int i = 0; i < length; i++) {\n                element(\"Format\", formats[i]);\n            }\n\n            end(\"Exception\");\n        }\n", "    public void setImageFile(File  v) {\n\tODMGXAWrapper txw = new ODMGXAWrapper();\n\ttxw.lock( this, Transaction.WRITE );\n\tthis.imageFile = v;\n\tfname = volume.mapFileToVolumeRelativeName( v );\n\ttxw.commit();\n    }\n", "\tpublic void run() throws Exception {\n\t\tif(getTestAction().getRole().equals(\"\") && getTestAction().getId().equals(\"\") && \n\t\t\t\tgetTestAction().getContainer().equals(\"\") || getTestAction().getContainerRole().equals(\"\") && \n\t\t\t\tgetTestAction().getAction().equals(\"\"))\n\t\t\treturn;\n\t\tif(!getTestAction().getRole().equals(\"\") || !getTestAction().getId().equals(\"\") || Util.isWhitespace(getTestAction().getId()))\n\t\t\texecUICmd();\n\t\telse {\n\t\t\tif ((getTestAction().getAction().trim()).equals(\"START\") || \n\t\t\t\t\t(getTestAction().getAction().trim()).equals(\"STOP\"))\n\t\t\t\tnew BootstrapAction().run(getTestAction());\n\t\t\telse\t\n\t\t\t\texecCustomCmd();\n\t\t}\n\t}\n", "public final void info(Object pObject)\r\n\t{\r\n\t\tgetLogger().log(FQCN, Level.INFO, pObject, null);\r\n\t}", "public static String getBase64EncodedImage(String imgSrc, BinaryResourcesHandler binaryRsHandler,\n\t\t\tHttpServletRequest request) {\n\n\t\tString encodedResult = null;\n\t\tif (null == binaryRsHandler) {\n\t\t\tthrow new JawrLinkRenderingException(\n\t\t\t\t\t\"You are using a Jawr image tag while the Jawr Image servlet has not been initialized. Initialization of Jawr Image servlet either failed or never occurred.\");\n\t\t}\n\n\t\timgSrc = getFullImagePath(imgSrc, binaryRsHandler, request);\n\n\t\tencodedResult = binaryRsHandler.getCacheUrl(BASE64_KEY_PREFIX + imgSrc);\n\t\tif (encodedResult == null) {\n\t\t\ttry {\n\t\t\t\tString fileExtension = FileNameUtils.getExtension(imgSrc);\n\t\t\t\tString fileMimeType = (String) MIMETypesSupport.getSupportedProperties(ImageTagUtils.class)\n\t\t\t\t\t\t.get(fileExtension);\n\n\t\t\t\tInputStream is = binaryRsHandler.getRsReaderHandler().getResourceAsStream(imgSrc);\n\n\t\t\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n\t\t\t\tIOUtils.copy(is, out, true);\n\t\t\t\tbyte[] data = out.toByteArray();\n\t\t\t\tencodedResult = new String(Base64Encoder.encode(data));\n\t\t\t\tencodedResult = DATA_PREFIX + fileMimeType + \";base64,\" + encodedResult;\n\t\t\t\tbinaryRsHandler.addMapping(BASE64_KEY_PREFIX + imgSrc, encodedResult);\n\t\t\t} catch (ResourceNotFoundException e) {\n\t\t\t\tLOGGER.warn(\"Unable to find the image '\" + imgSrc + \"' while generating image tag.\");\n\t\t\t} catch (IOException e) {\n\t\t\t\tLOGGER.warn(\"Unable to copy the image '\" + imgSrc + \"' while generating image tag.\");\n\t\t\t}\n\t\t}\n\n\t\treturn encodedResult;\n\t}", "public void add(int objectToAdd,long[][] hashFunctions){\n  for (  long[] h : hashFunctions) {\n    int i=hash(h,(long)objectToAdd);\n    bitSet.set(i);\n  }\n}\n", "public void loadProject(String arg) throws IOException {\n        Project newProject = Project.readProject(arg);\n        newProject.setConfiguration(project.getConfiguration());\n        project = newProject;\n        projectLoadedFromFile = true;\n    }", "public OpDescriptor getOpDescriptorForOnnx(String name) {\n        if(!onnxOpDescriptors.containsKey(name)) {\n            throw new ND4JIllegalStateException(\"No op found with name \" + name);\n        }\n\n        return onnxOpDescriptors.get(name);\n    }", "@Override public CompletableFuture<String> join(){\n  return CompletableFuture.supplyAsync(null,exec);\n}\n", "\tpublic Object getElementAt(int index) {\n\t\tif (index >= 0 && index < comboMap.size())\n\t\t\treturn comboMap.get(index);\n\t\treturn null;\n\t}\n", "private void queryAndCompareUIF(Object... params) throws Exception {\n  final QueryResponse expect=query(params);\n  final Object[] newParams=Arrays.copyOf(params,params.length + 2);\n  newParams[newParams.length - 2]=\"facet.method\";\n  newParams[newParams.length - 1]=\"uif\";\n  final QueryResponse uifResult=query(newParams);\n  compareResponses(expect,uifResult);\n}\n", "private static void addAll ( final List < Byte > list , final byte [ ] data ) { for ( final byte b : data ) { list . add ( b ) ; } }", "public static Test suite ( ) { return ( new TestSuite ( SelectManyCollectionITCase . class ) ) ; }", "public WebResourceCollectionType<T> httpMethodOmission(String ... values)\n   {\n      if (values != null)\n      {\n         for(String name: values)\n         {\n            childNode.createChild(\"http-method-omission\").text(name);\n         }\n      }\n      return this;\n   }", "@Override public Client register(Object o){\n  providerComponents.add(o);\n  return this;\n}\n", "public VariableReference addFieldAssignment(TestCase test,GenericField field,int position,int recursionDepth) throws ConstructionFailedException {\n  logger.debug(\"Recursion depth: \" + recursionDepth);\n  if (recursionDepth > Properties.MAX_RECURSION) {\n    logger.debug(\"Max recursion depth reached\");\n    throw new ConstructionFailedException(\"Max recursion depth reached\");\n  }\n  logger.debug(\"Adding field \" + field);\n  int length=test.size();\n  VariableReference callee=null;\n  if (!field.isStatic()) {\n    callee=createOrReuseVariable(test,field.getOwnerType(),position,recursionDepth,null,false,false,false);\n    position+=test.size() - length;\n    length=test.size();\n    if (!TestUsageChecker.canUse(field.getField(),callee.getVariableClass())) {\n      logger.debug(\"Cannot call field \" + field + \" with callee of type \"+ callee.getClassName());\n      throw new ConstructionFailedException(\"Cannot apply field to this callee\");\n    }\n  }\n  VariableReference var=createOrReuseVariable(test,field.getFieldType(),position,recursionDepth,callee,true,false,false);\n  int newLength=test.size();\n  position+=(newLength - length);\n  FieldReference f=new FieldReference(test,field,callee);\n  if (f.equals(var))   throw new ConstructionFailedException(\"Self assignment\");\n  Statement st=new AssignmentStatement(test,f,var);\n  VariableReference ret=test.addStatement(st,position);\n  assert (test.isValid());\n  return ret;\n}\n", "\tpublic void add(final double x, final double y, final String seriesName) {\n\t\tadd(new Double(x), new Double(y), seriesName, true);\n\t}\n", "public static boolean dropIndex (Connection conn, String table, String cname, String iname)\n        throws SQLException\n    {\n        if (!tableContainsIndex(conn, table, cname, iname)) {\n            return false;\n        }\n\n        String update = \"ALTER TABLE \" + table + \" DROP INDEX \" + iname;\n        PreparedStatement stmt = null;\n        try {\n            stmt = conn.prepareStatement(update);\n            if (stmt.executeUpdate() == 1) {\n                log.info(\"Database index '\" + iname + \"' removed from table '\" + table + \"'.\");\n            }\n        } finally {\n            close(stmt);\n        }\n        return true;\n    }", "@Override public UUID createTransportNode(){\n  UUID uuid=UUID.randomUUID();\n  graphServer.addVertex(uuid);\n  return uuid;\n}\n", "protected static int toDigit(char ch,int index) throws DecoderException {\n  int digit=Character.digit(ch,16);\n  if (digit == -1) {\n    throw new DecoderException(\"Illegal hexadecimal charcter \" + ch + \" at index \"+ index);\n  }\n  return digit;\n}\n", "static TypeMember createUnionMember ( final int id , final BaseType parentType , final BaseType baseType , final String name ) { return new TypeMember ( id , parentType , baseType , name , Optional . of ( NUM_ ) , Optional . < Integer > absent ( ) , Optional . < Integer > absent ( ) ) ; }", "  public MtEntry rewind(MtEntryPtr ptr) {\n    MtEntry current = this.entries;\n    /* not buffered */\n    ptr.current = current;\n    ptr.index = 0;\n    this.lap++;\n\n    return current;\n  }\n", "private CGlobalSettings ( ) { }", "protected Component getComponentByName(String name) throws QTasteException {\n        mFoundComponent = null;\n        mFindWithEqual = false;\n        LOGGER.debug(\"try to find a component with the name : \" + name);\n        // TODO: Think about several component having the same names!\n        for (Window window : getDisplayableWindows()) {\n            if (mFindWithEqual) {\n                break;\n            }\n            if (!checkName(name, window) || !mFindWithEqual) {\n                LOGGER.debug(\"parse window\");\n                lookForComponent(name, window.getComponents());\n            }\n        }\n        if (mFoundComponent != null) {\n            try {\n                SwingUtilities.invokeAndWait(() -> {\n                    mFoundComponent.requestFocus();\n                    Component parent = mFoundComponent.getParent();\n                    //active the parent\n                    while (parent != null && !(parent instanceof Window)) {\n                        parent = parent.getParent();\n                    }\n                    if (parent != null) {\n                        ((Window) parent).toFront();\n                    }\n                });\n            } catch (InterruptedException | InvocationTargetException e) {\n                // ignore\n            }\n\n            return mFoundComponent;\n        }\n        throw new QTasteTestFailException(\"The component \\\"\" + name + \"\\\" is not found.\");\n    }", "public static void appendConnections(Vector<BeanConnection> connections,int tab){\n  if (tab < TABBED_CONNECTIONS.size()) {\n    Vector<BeanConnection> cons=TABBED_CONNECTIONS.get(tab);\n    for (int i=0; i < connections.size(); i++) {\n      cons.add(connections.get(i));\n    }\n  }\n}\n", "protected HashMap<Integer,AtomicInteger> internalCountJournalLivingRecords(Configuration config,boolean messageJournal) throws Exception {\n  final HashMap<Integer,AtomicInteger> recordsType=new HashMap<>();\n  SequentialFileFactory ff;\n  JournalImpl journal;\n  if (messageJournal) {\n    ff=new NIOSequentialFileFactory(config.getJournalLocation(),null,1);\n    journal=new JournalImpl(config.getJournalFileSize(),config.getJournalMinFiles(),config.getJournalPoolFiles(),0,0,ff,\"activemq-data\",\"amq\",1);\n  }\n else {\n    ff=new NIOSequentialFileFactory(config.getBindingsLocation(),null,1);\n    journal=new JournalImpl(1024 * 1024,2,config.getJournalCompactMinFiles(),config.getJournalPoolFiles(),config.getJournalCompactPercentage(),ff,\"activemq-bindings\",\"bindings\",1);\n  }\n  journal.start();\n  final List<RecordInfo> committedRecords=new LinkedList<>();\n  final List<PreparedTransactionInfo> preparedTransactions=new LinkedList<>();\n  journal.load(committedRecords,preparedTransactions,null,false);\n  for (  RecordInfo info : committedRecords) {\n    Integer ikey=new Integer(info.getUserRecordType());\n    AtomicInteger value=recordsType.get(ikey);\n    if (value == null) {\n      value=new AtomicInteger();\n      recordsType.put(ikey,value);\n    }\n    value.incrementAndGet();\n  }\n  journal.stop();\n  return recordsType;\n}\n", "public ListEventSubscriptionsResult withSubscriptions(Subscription... subscriptions) {\n        if (this.subscriptions == null) {\n            setSubscriptions(new java.util.ArrayList<Subscription>(subscriptions.length));\n        }\n        for (Subscription ele : subscriptions) {\n            this.subscriptions.add(ele);\n        }\n        return this;\n    }", "private void transferToSpecificBuilderAndReset(){\n  if (currentTag == Tag.VERSION) {\n    dataBuilder.setVersion(buffer.toString());\n  }\n  addToRobotBuilder();\n  addToBrowserBuilder();\n  addToOperatingSystemBuilder();\n  addToBrowserPatternBuilder();\n  addToBrowserTypeBuilder();\n  addToBrowserOsMappingBuilder();\n  addToOperatingSystemPatternBuilder();\n  addToDeviceBuilder();\n  addToDevicePatternBuilder();\n  buffer=new StringBuilder();\n}\n", "public void output(Resource resource) throws IOException {\n\t\tOutputStream nullo = ByteStreams.nullOutputStream();\n\t\tCountingOutputStream co = new CountingOutputStream(nullo);\n\t\ttry {\n\t\t\tStreamCopy.copy(resource.getInputStream(), co);\n\t\t} catch(GZIPFormatException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn;\n\t\t}\n\t\tlong bytes = co.getCount();\n\t\tif(bytes > 0) {\n\t\t\tLOG.info(bytes + \" unconsumed bytes in Resource InputStream.\");\n\t\t}\n\t\ttry {\n\t\t\tMetaData m = resource.getMetaData().getTopMetaData();\n\t\t\t// URL DATE OURL MIME HTTP-CODE SHA1 META REDIR OFFSET LENGTH FILE\n\n\t\t\tString filename = getContainerFilename(m);\n\t\t\tString offset = getContainerOffset(m);\n\t\t\tString gzLen = getGZLength(m);\n\t\t\tString format = getEnvelopeFormat(m);\n\t\t\tString origUrl = \"TBD\";\n\t\t\tString date = \"TBD\";\n\t\t\tString canUrl = \"TBD\";\n\n\t\t\tString mime = \"TBD\";\n\t\t\tString httpCode = \"TBD\";\n\t\t\tString digest = \"TBD\";\n\t\t\tString meta = \"TBD\";\n\t\t\tString redir = \"TBD\";\n\t\t\t\n\t\t\tif(format.startsWith(\"WARC\")) {\n\t\t\t\torigUrl = getWARCURL(m);\n\t\t\t\tdate = getWARCDate(m);\n\t\t\t\tString type = getWARCType(m);\n\t\t\t\tif(type.equals(\"response\")) {\n\t\t\t\t\t// is it http or DNS:\n\t\t\t\t\tString recType = getWARCContentType(m);\n\t\t\t\t\tif(recType.equals(\"text/dns\")) {\n\t\t\t\t\t\t// hrmm..\n\t\t\t\t\t\tredir = \"-\";\n\t\t\t\t\t\tmeta = \"-\";\n\t\t\t\t\t\thttpCode = \"-\";\n\t\t\t\t\t\tmime = recType;\n\t\t\t\t\t\tdigest = getEnvelopeBlockDigest(m);\n\n\t\t\t\t\t} else if(recType.equals(\"application/http; msgtype=response\")) {\n\t\t\t\t\t\thttpCode = getHTTPStatus(m);\n\t\t\t\t\t\tdigest = getHTTPEntityDigest(m);\n\t\t\t\t\t\tJSONObject headers = JSONUtils.extractObject(m, \"Envelope.Payload-Metadata.HTTP-Response-Metadata.Headers\");\n\t\t\t\t\t\tmime = normalizeHTTPMime(scanHeadersLC(headers, \"content-type\", \"unk\"));\n\t\t\t\t\t\tredir = scanHeadersLC(headers, \"location\", \"-\");\n\t\t\t\t\t\tmeta = scanHeadersLC(headers, X_ROBOTS_HTTP_HEADER, null);\n\t\t\t\t\t\tif(meta != null) {\n\t\t\t\t\t\t\tmeta = parseRobotInstructions(meta);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmeta = \"-\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(mime.toLowerCase().contains(\"html\")) {\n\t\t\t\t\t\t\tif(redir.equals(\"-\")) {\n\t\t\t\t\t\t\t\t// maybe an obvious meta-refresh?\n\t\t\t\t\t\t\t\tredir = extractHTMLMetaRefresh(origUrl,m);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(meta.equals(\"-\")) {\n\t\t\t\t\t\t\t\t// see if there are HTML robot instructions:\n\t\t\t\t\t\t\t\tmeta = extractHTMLRobots(m);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if(type.equals(\"warcinfo\")) {\n\t\t\t\t\torigUrl = \"warcinfo:/\" + filename + \"/\" + IAUtils.COMMONS_VERSION.replaceAll(\" \", \"_\");\n\t\t\t\t\tredir = \"-\";\n\t\t\t\t\tmeta = \"-\";\n\t\t\t\t\thttpCode = \"-\";\n\t\t\t\t\tmime = \"warc-info\";\n\t\t\t\t\tdigest = getEnvelopeBlockDigest(m);\n\t\t\t\t\n\t\t\t\t} else if(type.equals(\"request\")) {\n\t\t\t\t\tmime = \"warc/request\";\n\t\t\t\t\tredir = \"-\";\n\t\t\t\t\tmeta = \"-\";\n\t\t\t\t\thttpCode = \"-\";\n\t\t\t\t\tdigest = getEnvelopeBlockDigest(m);\n\t\t\t\t} else if(type.equals(\"metadata\")) {\n\t\t\t\t\t// interesting...?\n\t\t\t\t\tmime = \"warc/metadata\";\n\t\t\t\t\tredir = \"-\";\n\t\t\t\t\tmeta = \"-\";\n\t\t\t\t\thttpCode = \"-\";\n\t\t\t\t\tdigest = getEnvelopeBlockDigest(m);\n\t\t\t\t} else if(type.equals(\"revisit\")) {\n\t\t\t\t\tmime = \"warc/revisit\";\n\t\t\t\t\tredir = \"-\";\n\t\t\t\t\tmeta = \"-\";\n\t\t\t\t\thttpCode = \"-\";\n\t\t\t\t\tdigest = getWARCPayloadDigest(m);\n\t\t\t\t}\n\t\t\t} else if(format.equals(\"ARC\")) {\n\t\t\t\torigUrl = getARCURL(m);\n\t\t\t\tdate = getARCDate(m);\n\t\t\t\tif(origUrl.startsWith(\"filedesc:\")) {\n\t\t\t\t\t// ARC header record:\n\t\t\t\t\torigUrl = \"filedesc:/\" +filename + \"/\" + IAUtils.COMMONS_VERSION.replaceAll(\" \", \"_\");\n\t\t\t\t\tmime = \"arc-filedesc\";\n\t\t\t\t\tredir = \"-\";\n\t\t\t\t\tmeta = \"-\";\n\t\t\t\t\thttpCode = \"-\";\n\t\t\t\t\tdigest = getEnvelopeBlockDigest(m);\n\t\t\t\t} else {\n\t\t\t\t\t// either an alexa/dat, or an HTTP response (we hope):\n\t\t\t\t\tmime = getARCContentType(m);\n\t\t\t\t\tif(mime.equals(\"alexa/dat\")) {\n\t\t\t\t\t\tredir = \"-\";\n\t\t\t\t\t\tmeta = \"-\";\n\t\t\t\t\t\thttpCode = \"-\";\n\t\t\t\t\t\tdigest = getEnvelopeBlockDigest(m);\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\thttpCode = getHTTPStatus(m);\n\t\t\t\t\t\tdigest = getHTTPEntityDigest(m);\n\t\t\t\t\t\tJSONObject headers = JSONUtils.extractObject(m, \"Envelope.Payload-Metadata.HTTP-Response-Metadata.Headers\");\n\t\t\t\t\t\tmime = normalizeHTTPMime(scanHeadersLC(headers, \"content-type\", \"unk\"));\n\t\t\t\t\t\tredir = scanHeadersLC(headers, \"location\", \"-\");\n\t\t\t\t\t\tmeta = scanHeadersLC(headers, X_ROBOTS_HTTP_HEADER, null);\n\t\t\t\t\t\tif(meta != null) {\n\t\t\t\t\t\t\tmeta = parseRobotInstructions(meta);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmeta = \"-\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(mime.toLowerCase().contains(\"html\")) {\n\t\t\t\t\t\t\tif(redir.equals(\"-\")) {\n\t\t\t\t\t\t\t\t// maybe an obvious meta-refresh?\n\t\t\t\t\t\t\t\tredir = extractHTMLMetaRefresh(origUrl,m);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(meta.equals(\"-\")) {\n\t\t\t\t\t\t\t\t// see if there are HTML robot instructions:\n\t\t\t\t\t\t\t\tmeta = extractHTMLRobots(m);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!redir.equals(\"-\")) {\n\t\t\t\tredir = resolve(origUrl, redir);\n\t\t\t}\n\t\t\tcanUrl = keyMaker.makeKey(origUrl);\n\t\t\t// URL DATE OURL MIME HTTP-CODE SHA1 META REDIR OFFSET LENGTH FILE\n\t\t\tif(dumpJSON) {\n\t\t\t\tout.format(\"%s %s %s %s %s %s %s %s %s %s %s %s\\n\", \n\t\t\t\t\t\tcanUrl, \n\t\t\t\t\t\tdate, \n\t\t\t\t\t\torigUrl,\n\t\t\t\t\t\tmime,\n\t\t\t\t\t\thttpCode,\n\t\t\t\t\t\tdigest,\n\t\t\t\t\t\tredir,\n\t\t\t\t\t\tmeta,\n\t\t\t\t\t\tgzLen, \n\t\t\t\t\t\toffset, \n\t\t\t\t\t\tfilename, \n\t\t\t\t\t\tm.toString(1));\n\t\t\t} else {\n\t\t\t\tout.format(\"%s %s %s %s %s %s %s %s %s %s %s\\n\", \n\t\t\t\t\t\tcanUrl, \n\t\t\t\t\t\tdate, \n\t\t\t\t\t\torigUrl,\n\t\t\t\t\t\tmime,\n\t\t\t\t\t\thttpCode,\n\t\t\t\t\t\tdigest,\n\t\t\t\t\t\tredir,\n\t\t\t\t\t\tmeta,\n\t\t\t\t\t\tgzLen, \n\t\t\t\t\t\toffset, \n\t\t\t\t\t\tfilename);\n\n\t\t\t}\n//\t\t\tout.println(filename + \" \"+resource.getMetaData().getTopMetaData().toString(1));\n\t\t} catch (JSONException e) {\n\t\t\tthrow new IOException(e);\n\t\t} catch (URISyntaxException e) {\n\t\t\tthrow new IOException(e);\n\t\t}\n\t\tout.flush();\n\t}", "private String getRowKeyRegex() {\n    final StringBuilder tagv_buffer = new StringBuilder();\n    // remember, tagks are sorted in the row key so we need to supply a sorted\n    // regex or matching will fail.\n    Collections.sort(pairs);\n    \n    final short name_width = TSDB.tagk_width();\n    final short value_width = TSDB.tagv_width();\n    final short tagsize = (short) (name_width + value_width);\n    \n    int index = 0;\n    final StringBuilder buf = new StringBuilder(\n        22  // \"^.{N}\" + \"(?:.{M})*\" + \"$\" + wiggle\n        + ((13 + tagsize) // \"(?:.{M})*\\\\Q\" + tagsize bytes + \"\\\\E\"\n           * (pairs.size())));\n    buf.append(\"(?s)^.{\").append(query.useMeta() ? TSDB.metrics_width() : \n      TSDB.metrics_width() + Const.SALT_WIDTH())\n      .append(\"}\");\n    if (!query.useMeta()) {\n      buf.append(\"(?:.{\").append(Const.TIMESTAMP_BYTES).append(\"})*\");\n    }\n    buf.append(\"(?:.{\").append(tagsize).append(\"})*\");\n    \n    // at the top of the list will be the null=tagv pairs. We want to compile\n    // a separate regex for them.\n    for (; index < pairs.size(); index++) {\n      if (pairs.get(index).getKey() != null) {\n        break;\n      }\n      \n      if (index > 0) {\n        buf.append(\"|\");\n      }\n      buf.append(\"(?:.{\").append(name_width).append(\"})\");\n      buf.append(\"\\\\Q\");\n      QueryUtil.addId(buf, pairs.get(index).getValue(), true);\n    }\n    buf.append(\"(?:.{\").append(tagsize).append(\"})*\")\n       .append(\"$\");\n    \n    if (index > 0 && index < pairs.size()) {\n      // we had one or more tagvs to lookup AND we have tagk or tag pairs to\n      // filter on, so we dump the previous regex into the tagv_filter and\n      // continue on with a row key\n      tagv_buffer.append(buf.toString());\n      LOG.debug(\"Setting tagv filter: \" + QueryUtil.byteRegexToString(buf.toString()));\n    } else if (index >= pairs.size()) {\n      // in this case we don't have any tagks to deal with so we can just\n      // pass the previously compiled regex to the rowkey filter of the \n      // scanner\n      LOG.debug(\"Setting scanner row key filter with tagvs only: \" + \n          QueryUtil.byteRegexToString(buf.toString()));\n      if (tagv_buffer.length() > 0) {\n        tagv_filter = tagv_buffer.toString();\n      }\n      return buf.toString();\n    }\n    \n    // catch any left over tagk/tag pairs\n    if (index < pairs.size()){ // This condition is true whenever the first tagk in the pairs has a null value.\n      buf.setLength(0);\n      buf.append(\"(?s)^.{\").append(query.useMeta() ? TSDB.metrics_width() : \n        TSDB.metrics_width() + Const.SALT_WIDTH())\n         .append(\"}\");\n      if (!query.useMeta()) {\n\tbuf.append(\"(?:.{\").append(Const.TIMESTAMP_BYTES).append(\"})\");\n      }\n      \n      ByteArrayPair last_pair = null;\n      for (; index < pairs.size(); index++) {\n        if (last_pair != null && last_pair.getValue() == null &&\n            Bytes.memcmp(last_pair.getKey(), pairs.get(index).getKey()) == 0) {\n          // tagk=null is a wildcard so we don't need to bother adding \n          // tagk=tagv pairs with the same tagk.\n          LOG.debug(\"Skipping pair due to wildcard: \" + pairs.get(index));\n        } else if (last_pair != null && \n            Bytes.memcmp(last_pair.getKey(), pairs.get(index).getKey()) == 0) {\n          // in this case we're ORing e.g. \"host=web01|host=web02\"\n          buf.append(\"|\\\\Q\");\n          QueryUtil.addId(buf, pairs.get(index).getKey(), false);\n          QueryUtil.addId(buf, pairs.get(index).getValue(), true);\n        } else {\n          if (last_pair != null) {\n            buf.append(\")\");\n          }\n          // moving on to the next tagk set\n\t  buf.append(\"(?:.{\").append(tagsize).append(\"})*\"); // catch tag pairs in between\n          buf.append(\"(?:\");\n          if (pairs.get(index).getKey() != null && \n              pairs.get(index).getValue() != null) {\n            buf.append(\"\\\\Q\");\n            QueryUtil.addId(buf, pairs.get(index).getKey(), false);\n            QueryUtil.addId(buf, pairs.get(index).getValue(), true);\n          } else {\n            buf.append(\"\\\\Q\");\n            QueryUtil.addId(buf, pairs.get(index).getKey(), true);\n\t    buf.append(\"(?:.{\").append(value_width).append(\"})\");\n          }\n        }\n        last_pair = pairs.get(index);\n      }\n      buf.append(\")(?:.{\").append(tagsize).append(\"})*\").append(\"$\");\n    }\n    if (tagv_buffer.length() > 0) {\n      tagv_filter = tagv_buffer.toString();\n    }\n    return buf.toString();\n  }", "public boolean equals(Object other){\n  if (!(other instanceof PolicyInformation))   return false;\n  PolicyInformation piOther=(PolicyInformation)other;\n  if (!policyIdentifier.equals(piOther.getPolicyIdentifier()))   return false;\n  return policyQualifiers.equals(piOther.getPolicyQualifiers());\n}\n", "    private boolean connectByURL(final String url) throws IOException {\n        this.connectionThreadFinished = false;\n        this.connectionURL = url;\n\n        new Thread(new Runnable() {\n\n            /**\n             * (non-Javadoc)\n             * @see java.lang.Runnable#run()\n             */\n            public void run() {\n                try {\n                    connection = (StreamConnection) Connector.open(connectionURL, Connector.READ_WRITE, true);\n                    input = connection.openInputStream();\n                    output = connection.openOutputStream();\n                } catch (final IOException ex) {\n//                    throw new NullPointerException(ex.getMessage());\n                    disconnect();\n                }\n\n                connectionThreadFinished = true;\n                synchronized (agent) {\n                    agent.notifyAll();\n                }\n            }\n\n        }).start();\n\n        synchronized (agent) {\n            while (!this.connectionThreadFinished) {\n                try {\n                    this.agent.wait();\n                } catch (final InterruptedException ex) {\n                    // Ignore\n                }\n            }\n        }\n\n        return isConnected();\n    }\n", "private boolean processRemovedNode ( final INaviViewNode node ) { if ( node instanceof INaviCodeNode ) { final INaviCodeNode cnode = ( INaviCodeNode ) node ; try { final INaviFunction targetFunction = cnode . getParentFunction ( ) ; if ( m_nodeCounter . c"], "comment": ["look for and evaluate the charset tag", "add a new constraint to a branch condition", "performs a multi - threaded matrix multiplication and stores the result in the output matrix .", "liefert true wenn von dem commodity mindestens int menge im lager sind", "read a single character .", "used to find the fisrt day in the techdatacalendarweek where capacity ! = 0 , beginning at daystart , daystart included .", "extracts parameters from a method call and attaches these with the comments extracted from the javadoc", "get the value of scrollingtextfield", "checks for errors in the reply packet , and if none , returns the reply packet , ready for reading", "get the used , available , and total worker capacity an app service environment .", "used to write legacy file formats .", "adds a token to a list , paying attention to the parameters we ' ve set .", "convert dip to pixels param size the size to be converted", "allows arrays to behave similar to collections .", "convenience method for mouse selection errors", "connects to the specified host and port .", "modify the current attribute sets for desired service .", "returns a workflow . method for zonenullrollback in networkdevicecontroller", "set the text for editing", "request that the renderer render a frame ( after the current frame ) .", "parses a list of options represented as strings", "show a list to select one or more items to delete .", "sets the dirty state of this editor", "prints the coordinate format to the underlying stream .", "you are not supposed to instantiate this class .", "checks the validity of the passed arguments .", "constructs a new clickable label .", "c tor with default issuedate new date", "sets up all of the components and layout", "pop a pdfobject off the stack .", "adds a listener for the treemodelevent posted after the tree changes", "generate a dssp file format ouput string of this ss prediction .", "triggered when the iterator source is expired", "isdateallowed , this implements the datevetopolicy interface .", "add the children and put the commands into the command builder", "mark stream to read up to limit .", "returns the index descriptor definition of the given name if it exists .", "returns true if , at this time , the object will accept a connection via the named event", "creates a new map identical to the specified map .", "sets the handler configuration as java . util . map", "a compatibility checking tool for routing module .", "download the video file .", "util method to build socket addr from either :", "returns the index of the given item", "since the crash that happens if we dont do this is complete garbage", "draw about strings", "retrieves the index of the specified geometry component in this shape3d nodes list of geometry components", "sets the position of this operation", "helper function retrieves a file name from the user and displays it", "copies any local configuration files into the app directory", "add the specified tag to the specified vm .", "get the current filename for saving", "processes the form submit by saving the desireddate", "setter for documentsize - sets size of original document in bytes before processing by cas initializer .", "will log a message with given log level", "the uri dictionary of the document", "handle a mute button press event", "returns the alert for the given id .", "sets an output signal coefficient", "read the data in from the file , with the option of reading the numbers in the files as strings .", "updates port ' s operational status based on the indication received from smi - s provider .", "the alpha transparency from as a percentage of to as a percentage of .", "writes the specified byte the low eight bits of the argument b to the underlying output stream", "handles the table item clicks .", "creates a new breakpoint condition set reply .", "calculates aomatrix for a vertex based on the vertex position and the face it belongs .", "determine if the a midlet from this suite can be run", "register that an instruction now uses the set of heap operands", "this method casts the supplied object to the nominated class .", "checks whether there is a landmark in the set of the non - active landmarks that yields a better estimation than the best active landmark .", "start the server", "gives the vim argument with the port depending on the portid", "provides access to the singleton instance of this extension .", "remove a new propertychangelistener", "writes this persistablemetaroot to the specified block", "resets this taskstackview for reuse .", "returns true if the buffer name is identical to the file name glob .", "gets the selected http session .", "creates a new svg document for the given width and height .", "perform action on the building next button click", "get cardinality by job state .", "creates an idquery using the specified type id and routing .", "returns an addaction for build expression that would append the specified values to this binary set ; or if the attribute does not already exist , add the new attribute and the value ( s ) to the item .", "set the client status icon", "compares two stun attributes .", "initialize the separator settings .", "instantiate all of the detector s in this pass and return them in a correctly ordered array .", "checks that the given value is an unsigned short .", "logout the user", "print text to output pane", "this calculates the height for rooted tree shaped phylogenies", "inits the keepaliveudp", "compute the mapping from interval [ l , r ) of method start to the intervals of method target .", "creates a new filter expression .", "add the status to be sent", "check if the image in this tile is still loading", "visits this node , the condition , the then - part , and if supplied , the else - part .", "join a public group as a member .", "reads a property name from the given data block", "adds given smis provider ' s uri in to active _ smis _ providers _ cache", "expands a given node", "deletes directory s content and then deletes directory itself .", "error function called if password verification has failed", "gets a formatted message from resource bundle", "the action has been activated", "this is the implementation of the copyable interface", "returns a new simpleprocessimage instance .", "allow full access to a user", "sends this push notification in a background thread .", "contains metadata about each custom key store .", "apply the resolve info to the view .", "returns only the columns whose names are given in the input array", "resets the history for when a new goal is chosen", "initialize dct mechanism for n x m matrix", "returns the identifier type of a mapped class", "removes the message formatter for the specified domain and returns the removed message formatter .", "return a reference to service being wrapped in place of this object .", "convenience functions to compare against current property values", "check if the readobject is doing multiple external call beyond the basic readbyte , readboolean , etc . .", "add a new generator to the cluster .", "sets that the subscription should start from the beginning of the stream .", "this is the operation that steps need to do to execute a step", "reads a byte array of a specified length from the stream .", "trim off references to non - existent builds and jobs , thereby making the fingerprint smaller .", "parser rule for parsing an expression .", "randomly chooses and returns one of the provided options .", "initializes the resource name with configuration information , usally set by the administrators .", "triggers the hostname lookup .", "this is the default behavior for updating a dirtied indexedregion .", "return true if the methods response is expected to have a body", "shows the exception stacktrace in the output text area moving the focus to the text area itself and placing its cursor at start position", "verifies that the number of values received onnext is equal to expected one", "legacy alias for copywith .", "remove a listener from this manager", "retrieve a list of modules .", "invoked after the parent group of a node changed .", "returns x maxima of a bounding box 2d or 3d or a geometry .", "this is used for three way transfers", "returns the value of a user variable", "gets all virtual network peerings in a virtual network .", "disable control of the list", "equals totalindent spec pos plus the extra space added because of spaces to the left of the token at pos", "wait for a particular event to be applied on the slave .", "this method was generated by mybatis generator .", "returns a list of the direct messages sent to the authenticating user", "set the list of signals to be filtered for display", "since there is no asinh in math , here it is used its definition : asinh ( x ) = ln ( x + sqrt ( x ^ 2 + 1 ) ) this function is used in fft2barkmx ( )", "marshall the given parameter object .", "removes an animation listener", "works out the minimum value in the matrix in a given column", "get an inputstream for a path within the archive and process it according to the provided function .", "converts a java type into a sql type", "gets double type values from [ rowid , rowid + count ) .", "evaluates whether the criterium matches the given node .", "void didaccessvalueforkey nsstring key", "add all distinct entry to list from list", "wrap the binary data in base encoding .", "stores the ca1 fingerprint 20 bytes on the card for ultimately trusted keys", "adds an operation to the operations node of the navigatortree object", "setter for property sitecode", "create an improper formatting instance with a custom number format for the numerator and a custom number format for the denominator .", "relaxes the neighbors of a node ( updates the shortest distances ) .", "get a pretty label name for cross reference characteristics to characteristic id", "returns the fields mentioned in the select clause .", "creates a hard link from source to target .", "convert a value in bytes to value readable by humans", "absolute value of quadrature component", "loads the module data from the database .", "add two values together .", "load and possibly start the provided configuration information .", "the ids and instance type that are currently running on the dedicated host .", "returns new swinglongeditor", "can this user change the destination branch of this change to the new ref ?", "states that subrelation is a sub relation of existingrelation in other words exisingrelation hassubrelation subrelation", "throws an exception if the current thread is not a gl thread .", "encodes this gssheader instance onto the provided outputstream .", "sets the action of the event create update link etc .", "creates a new connectionidattribute of the specified connectionidvalue", "creates a patch baseline .", "urldecoder is ambiguous because we generate the geturldecoder getter which gets decoded to urldecoder , so for those we have to remember the exact name .", "crate an internal tenant callcontext from a tenant callcontext , and retrieving the account _ record _ id from another table", "tests whether the hierarchy level of the organisationunit associated with the relevant datavalue is equal to or higher than the relevant aggregation level .", "returns the result of applying a filter using breadth first traversal .", "if there is no field with the specified key , then associate the given value with the specified key .", "checks if the current active user is the owner of the comment in question .", "perform a smooth slide of content , the offset of content will limited to menu width", "get the age limit parameter ( or let it default ) , and convert it to milliseconds .", "creates a new file including deleting an already existing file with the same path and name and creating any needed directories .", "adds an integer to the constant pool of the class being build .", "invoked when a key has been pressed", "rebuild the control flow graph", "constructor that allows for a tooltip description", "creates a new line selection variable", "prints the error by code and reports the exception message .", "this is the main function that all connectionbeanprovider objects must implement", "processes the $ beginblock command .", "method that inherited from referenceable", "get a localdate field ( converted from a string internally ) .", "marshall the given parameter object .", "copy file ( only use for files smaller than 2gb )", "create a new thread", "returns if the class implements serializable or externalizable", "get whether or not the tiers label should be displayed", "checks to see if the node represents an access of an instance variable on an object given a prototype declaration of an object .", "channel copy method 2 .", "iwizardparameterpanel method to clear parameters", "before deregistration make sure to to stop listening to all", "return - 1 if some flow constraint not met ; otherwise return the max flow .", "draws the string at the specified location underlining the specified character .", "handles an authentication request .", "deletes an attribute at the given position ( 0 to numattributes ( ) - 1 ) .", "writes a new line to the output box", "bitwise equality comparison .", "generate and build the list items to be set on auto complete box .", "find the root cause of an exception , for nested beansexception case", "just checking whether the message m is actually less than the group order p", "get the instance of this translator .", "accepts a visitor", "creates a greater - than - number parameter constraint .", "create a java instance of xml schema builtin datatype time .", "creates an indexed image with byte data this method may return a native indexed image rather than an instance of the indexedimage class", "public chunk : second letter is uppercase", "this method duplicates array , and stores it to all devices", "size of all the fields", "checks that a given array is not null and not empty .", "log a message object at the warning level .", "converts an array of characters representing hexadecimal values into an array of bytes of those same values .", "determines the current state of the category", "inform the listeners about completion", "creates a new configuration object .", "notification that a new local instruction comment has been appended within this code node .", "set the hidden bug categories on the specifed projectfiltersettings from an encoded string", "returns a charset for the named charset .", "combine all the matchers using or", "getter for the field name .", "get the offset for the table from the record header .", "inspector is contravariant in its type", "sets the default icon for treeelements for a blank area of the tree .", "compare the length of two files .", "returns true if this collection contains the specified element", "inits the button control panel", "gets escaped hex string corresponding to the given bytes .", "sets the base rule to attribtuesandtoonerelationships", "this method will decrement the use count on this order context .", "checking main ui buttons without dismissing alert dialog box", "returns the maximum element or double max value if empty", "at startup create and show the main frame of the application", "returns whether or not the host port username or password are null if so it will return true otherwise false", "opens the page for the specified block and moves the current slot to the specified position .", "move the restrictiontype up one place in the list", "loads the neural network weight matrix .", "return true if entry belongs to the partition of the space false if entry is not from space partition", "gets this mutable as an instance of integer .", "parses ddl create procedure statement", "like datainputstream . readint except little endian .", "return an enumeration of user requests", "disconnects the administrator from the database", "creates a shape representing a point .", "applybone affects a given vertex by its current world position", "compare two byte arrays .", "partial application of the parameter to a predicate .", "add an issue to an operationoutcome", "adds a child leaf to this container .", "export the current measurements to a suitable format .", "return a pseudo - blocking output stream .", "convert a word to uppercase .", "invokes the supplied request on all servers in parallel .", "adds a new value to the series .", "rounds the corners of the bounding rectangle in which the text string is rendered", "writes the end of file group", "performs null check and disposes of an asset .", "flushes the underlying writer", "seek to the root element of the next sub document and return its local name .", "sets up this animatorset to play all of the supplied animations at the same time .", "produce a jsonarray of jsonobjects from a comma delimited text string using the first row as a source of names .", "create a new sound object using the provided mime type and url", "creates a new disjunction from a collection of formulas .", "custom component is by default in the non immediate mode", "insert data to datas footer ( example weibo loadmore same newly data )", "returns true if the specified ndef message contains identical ndef records .", "constructs new instance of mx4jserversocketfactory .", "adds a handler for container page events .", "reads a tag and sets the bits to a new tag at same time for max speedification", "notify the data service that an index partition is now located on that data service .", "required by classes extending inputstream returns the next byte from this stream as an int value", "does not check geometry type .", "prints the output in xml format .", "returns capabilities of this backup agent .", "returns a random word over the alphabet", "creates the world config .", "create an allocate request to allocate an even port .", "gets all routefilterrules in a route filter .", "returns an atom from this bond", "creates and returns a new unparented array type node with the given component type which may be another array type", "add results from another response into this one", "helper function to search for the given target string in a given vector in which the elements ' value may hopefully is equal to the target .", "removes a single instance of the specified element from this list , if it is present ( optional operation ) .", "an iterator over all keys of this map", "creates a new start trace action .", "deletes the termination settings for the specified amazon chime voice connector .", "the total number of name / value pairs", "overrides jcomponent method to return false since we have overlapping panels with the spectrum and channel panels", "resets the write buffer to a particular point .", "calculates the slot right before the one having the specified search key .", "get this parameters object as ck rc2 cbc params object", "determines the result variable for the node represented by this instruction using default variable resolution", "checks that java _ home does not contain space characters .", "produces a writable that writes the hex encoding of the byte [ ] .", "convert unix time to the utc format recognized by spice .", "attaches the speech panel to the module", "skip characters until the next character is the requested character", "any registrarlease from the same server can be in the map", "loads the contents of the class file into the buffer .", "performs layout for the major axis of the box ( i . e . the axis that it represents ) .", "registers cronfield in parserdefinitionbuilder and returns its instance .", "method to assign and initialise our discrete calculator class", "lazy initializes or returns the session in use by this storage component .", "loads the data from the server", "adds an attribute to this tabbed pane", "set the next binding variable of the currently active prepared statement", "server helper method to register a jmx mbean .", "region > removeorder ( action , not published )", "user was formerly forced to create new instances through this factory method .", "if the parameter is shorter than 4 bytes , then create and return a new 4 byte array with the input array ' s bytes followed by zero bytes .", "receives a change event from the underlying dataset and responds by firing a change event for this dataset", "this method will send an ack up to the current aggregated ack prefix and send a nack for any ticks after this", "returns an enumeration describing the available options .", "the writeobject method for serialization .", "returns true iff format col should return a single line version of the formula .", "returns the mysql error number from the mysql error packet without modifying the packet", "adds the event manager class .", "check not too many already running .", "removes a listener from the function object .", "creates the main layout panel .", "processing text blocks between code blocks", "notify the service of disconnection from a server ( updates the status bar notification )", "check the specified magnification", "returns whether any elements of this list match the provided predicate .", "caches the given container page under the given key and for the given project .", "is the combo box editable ?", "report a no argument warning with location .", "creates a new output file and writes the header information .", "create a new calculable that records the time", "check if the path ends with a \" . class \" extension , ignoring case .", "sets the current selection", "expands the ip cidr range of the subnetwork to a specified value .", "create an effectlayer for specified effect duration .", "removes a dependency .", "decrements the pin count of a frame when the page is unpinned", "create a crud against the specified table validating it against the specified connection .", "describe printproperties method here", "get a list of pages for the given titles see", "list the merged directories .", "handler invoked by userthreads , userscheduler , and controlscheduler , upon handling an uncaught exception from a user task or when they have completed all the tasks .", "this will set the b1 coordinate for this value", "calculates the length of the next block of rtf data .", "add a filter for all source sections that reference one of the given sources .", "report the end of a cdata section", "capitalizes the start of the given bean property name", "you are not supposed to instantiate this class .", "returns the closest wapplication instance ( ancestor component ) from the given base component .", "create a fail workflow reason by combining a target name and message .", "encrypt a byte .", "process one block of input from the array in and write it to the out array .", "return an array of constants corresponding to the as - bound values of the join variables for the given solution .", "constructs the session details done at proxy side .", "returns the markseen", "adds a listener to the function object .", "io combining two paths", "implemented for callerinfoasyncquery onquerycompletelistener interface", "returns the matcher patten", "appends a string literal with the given value onto the given buffer .", "checks if the account is active .", "given a vector of nodes , sort each node according to the criteria in the keys .", "adds a single chatmessage with the current time .", "downloads the entire resource instead of part .", "for the creation of the statement", "this method allows the deserialization of an instance of this enumeration type to return the actual instance that will be the singleton for the jvm in which the current thread is running", "visit an annotation child value .", "returns a reference to the type of an exception in a throws clause of a method .", "get the distance between two points", "creates new mjdbclogger instance", "create a new directory if not exists .", "refreshes this resource index reading from data store", "determine the length of a nul terminated utf16le string in bytes .", "close the wrapped writer .", "gets a value indicating whether or not the given namespace id is claimable .", "inserts value into the list at offset", "returns a list of the rooms the user occupies .", "retrieves an existing level or creates on if it didn ' t previously exist .", "add unmanaged smb share to fs object", "this will return the path as it is relative to the issued path", "if the argument is true make a start stop and fill button visible at the upper right", "import the resources with extensions as specified by the user", "find set of blocks which were known to be dead before doing the null pointer analysis .", "terminates the specified job , marking it as completed .", "dumps the samples to the given bytebuffer", "because the checked list box can not yet deal with growing or shrinking models the checked list box is recreated by this function if necessary .", "creates a new function selection panel .", "this method is not supported and always throws unsupportedoperationexception", "given the requested pathname , come up with the altered one based on the value of m _ voltfileprefix", "indicates whether this is a top - level menu ( ie . attached to a menu bar ) .", "update the in - memory roster to be consistent with the current roster file .", "create a representation of gf size using the given primitive polynomial .", "adds a number of weeks to a date returning a new object .", "creates a sourcefromaddressattribute of the specified type and with the specified address and port", "reduces a map containing sets of storageports to a single set of storage ports by including the ports in all the values of the map .", "unit test for tupledesc numfields", "removed scheme part scheme from incoming uri .", "writes a given number of coil states to the slave .", "show a warning with only an ok button", "creates a type object .", "a callback used by gemfire data serialization mechanism to read from a stream .", "returns the first element from this list", "compares two given date strings", "return true if we can save iterator creation and get a single entry", "invoked after a step breakpoint set reply was received from the debug client .", "updates the given job in the list .", "add operation results to the array to be returned .", "writes len bytes to the output stream from this stream .", "helper method to have a single point of insertion in the queued flows", "flatten an array .", "starts to run a period update of the tradables from the server", "creates a repeatingview providing a suitable editor field for every attribute in the list .", "sets the value of the lsp9x4min property", "retrieve the record if any following the supported strategies : 0 = if found remove it ( pop ) : the client ( database instances ) will push it back when finished or on close .", "returns true if this event is disabled and shouldn ' t be processed by window currently if target component is disabled the following event will be disabled on window : buttonpress , buttonrelease , keypress , keyrelease , enternotify , leavenotify , motionnotify", "calculate the target speed for moving the view position .", "set the key for rsa algorithms .", "finds the to do items based on its completion status .", "convert this rational number to a bigdecimal", "assumes that complete ( ) has been called and returns true .", "creates a new text widget", "determines of path starts with a slash .", "this adds a property descriptor for the stereotype feature", "creates a new action handler for the cancel button .", "turns a settings string value into a double value .", "starting from a pl i source fragment translates to cobol", "loops through sort keys constructing the inner join and key statements .", "returns the single instance creating one if its the first time this method is called", "create vipr compatible 12 char wwn", "clears the entire filter and resets it to label or type based", "creates a dump of the process jvm .", "retrieves and saves the product extension locations defined in the etc / extensions .", "add a valuedvariable to the set", "estimates the number of cells that the specified width would take up .", "creates a filename ( where the file should be saved ) from info about a download .", "creates a new exception occurred synchronizer .", "the doget method of the servlet .", "find out rowindexmin for greaterthanequal operator .", "process the page requested event", "sets the cache to be used as the default for the specified class by future", "remove a testing callback .", "saves the values from the fields of this editor to the given breakpoint", "persist all cookies existing cookies will be overwritten .", "set value of port 7ffd updates memory configuration", "disconnect from the server", "get the genericvalue currentstatus", "creates a new jsonarray with the contents of the specified json array .", "returns whether the database output mode is enabled .", "binds an event listener to a specific method on a specific object .", "a casting without a role type specified", "register ourselfs in the style table", "tests if two objects are vertically adjacent or if they are so far away from each other that they have to be considered different blocks .", "instantiate a new csvreader with input from provided reader .", "determines if a volume is part of a metropoint configuration .", "executes the input parsed command", "remove any empty directories above removeable but below directory", "add the system include files need to compile the test files", "this method runs the path query on all the elements within the model .", "get label for owl class", "applies the preprocessing on the patterns contained in the inputvector", "initialize variables to correspond with cas type and features", "returns the total number of properties for this control interface", "constructs a remez filter specification .", "generates rules out of item sets", "this method calls proc updateservers and updates the values of the instance passed .", "method currently used by ongetdefaultvalue method to convert hex string provided in android : defaultvalue to color integer .", "fill combobox with old saved data ( if exists ) or all data available", "applies a procedure to each key value pair of the receiver if any", "perform a http delete request .", "replicate and free the cache context and log on error .", "adds a double to the pricevalue", "get path from uri , for a mediadocument .", "move an element up one place", "check if item is mselected", "propagate the closed spinner event to the listener from outside .", "removes the attribute from the model element", "adds a new publisher to the current test case", "convert to a value known because it was returned from a method in a method property database .", "creates a new settings object backed by graph settings from the configuration file .", "computes the histogram of intensity values for the image .", "retrieve all audits of site definition for the given site .", "deletes the entire subtree of root but not root itself .", "ensure that bad intervals generate exceptions .", "sends the given status on the given websocket connection and closes the connection .", "sort an array using the given comparator .", "closes the media player", "constructs a mailaddress with the provided local part and domain .", "notification that a global code node comment has been edited .", "get a directory of queue names", "removes from the cache s task manager all pending tasks associated with the given proxyreg .", "returns the direct edit include html to insert in the page beginning .", "this method is for convenience .", "returns a human readable description of the given filter", "adds an ascii string to the digest", "gets the name of the tool .", "a list of trigger names , which may be the names returned from the listtriggers operation .", "clear all scheduled waiting jobs", "this accesses a cached version of the property sheet", "converts string to double .", "returns the colors green component in the range 0 255", "creates a new gui component for displaying and controlling the dialogue state ' s bayesian network .", "creates a new internaltranslationexception object .", "append to the underlying transaction log", "training procedure that can be applied to each version of the cpm sub - problem .", "load specific document details", "skip a number of bytes .", "construct mo tree request netconf audit command", "parses the given command and executes it", "asserts that a given file exists .", "logs a incoming or outgoing packet .", "called after a new thread was added to the thread manager .", "undeploy a route , meaning that it unloads it but also deletes the associated file .", "constructs a jsonfunction from a text representation", "increments by given step", "this method returns the list of methods named against the supplied parameter that are defined on the specified receiver , but it will also add \" non existing \" methods that will be generated afterwards by the compiler , for example if a method is using default values and that the specified class node isn ' t compiled yet .", "implements the printable print interface", "format a date using a really short format .", "sets the legend visibility", "convert a string array to string list", "find a specific character in range of data", "get image icon from resources", "clears ( and optionally posts ) all pending completion actions .", "query the most similar objects , dense version .", "a jquery selector for a single tooltip element", "this function maps from dataset index to valuesource index", "returns list of pairs of images with common features", "reloads model to inform listeners synched with swing", "gets all the entity types and tries to instantiate and cache a finder for each one .", "reads the configuration file from disk .", "add the value if it is not already present , otherwise remove it .", "returns the maximum number of entries that can be filled before rehashing .", "permanently deletes a reference image .", "add a list of polylines to the map", "remove an event listener", "returns a comma separated values csv representation of the values of the object", "add a listener to receive events on this websocket .", "returns the best image width for a given image type", "returns an oauth 2 . 0 access token .", "load the ld datamodel", "creates a new mapping between raw node and yfiles node .", "write a log control block to permanent storage", "the dopost method of the servlet .", "maps the specified key to the specified value .", "calculate average invoice from trx", "tests whether the view container contains a given module .", "verify that normal sql statements with back tics quote and double quotes do not confuse parsing .", "create a kafka topic with partition and a replication factor of .", "remove included groups from this one .", "returns a simplecharhandler parsed from the given index code strings .", "add in inclusion chain .", "creates a bitmap of the specified width and height .", "this method updates the bendpoints associated with the iedge using this", "removes all hotkeys that have to be registered ( regular and global ) .", "callback fired once connection is established iceconnectionstate is connected .", "creates a new seaglasscontext object .", "returns true if the target object is a namespace instance that has a matching namespace uri and prefix ( if specified ) .", "allow an anonymous function to be declared and invoked", "configure endpoint access for static resources .", "digest the sequence", "returns true for a cell if the corresponding sequence is a", "a logoutputstream cannot be closed so this does nothing .", "format the inner part of a", "get the value table corresponding to the specified primary key", "used to get current rate", "returns an enumeration of the values in this table .", "updates the minimum and maximum values for all the attributes based on a new instance .", "returns a list of all data for the given domain in the database", "test whether attributes are properly encoded .", "run a http get request", "finishes the output by flushing the current line and takes care of any other cleanup action .", "rotate this line by angle phi around 0 0", "visitor pattern for repositories .", "given a input string and a target type coerce the string to it", "checks that a @ closureprimitive { id } is on a function", "export a page or folder with all subfolders and pages", "adds a listener object that is notified about changes in the view node .", "clears a line", "gets a list of the http cookies from this request header .", "returns the length of the data", "records the expression so that the encoder will produce the actual output when the stream is flushed .", "service lifecycle related methods", "query multi object from database delgate to jdbcquerytemp ' s querymultiobject method", "read a fixed value .", "an indication if this resource originated from the pool or was allocated on the fly .", "function to assert that the threadidtosequence id map is not null and has only one entry", "get the cron daemon pattern", "creates a billing group .", "restore the list of dynamic actions and replay them .", "remove completely creature from aggro list", "add an appropriate policy database entry for parameters marked with the willclose annotation .", "checks that the current state is one of the allowed states , and if so , switch its value to the new desired state .", "to get a string describing the size of a file", "create the eventhub receiver with given partition id and start receiving from the specified starting offset .", "returns an ( as far as you care ) random foundation that could be assigned to a learned peer - reflexive candidate .", "parse information about include plog = load", "called when a response is received .", "negate a boolean on stack .", "this class encodes bytes per line .", "adds a configurationselectionlistener to this object", "creates new dgetnewpassword dialog where the parent is a frame .", "determine whether this flag repeats", "determines whether or not the given node contains web content .", "returns the downside deviation defined as the square root of the downside variance .", "performs filtering on inner value if it is present .", "parses the attributes from a dictionary xml document", "creates a hutn tokenizer with the given maximum string length .", "removes the first occurrence of the argument from this vector .", "formats a number into the specified string buffer .", "add many places to map", "create a hash from a digest", "inserts the specified element at the specified position in this list optional operation", "gets the sas token associated with the specified data lake analytics and azure storage account and container combination .", "return entity reference hashcode", "remove all comments properties section and empty lines from content body", "sets this vector to the interpolation by changeamnt from this to the finalvec this 1 changeamnt this changeamnt finalvec", "sends a response to the originator of a handshake agreeing to the action proposed by the handshake request .", "a list of event categories for a source type that you want to subscribe to .", "creates a new table scan and opens its corresponding record file .", "tests if a node is a leaf", "resets the unique id counter .", "writes ints from the given int array , starting from the specified offset , to the current position and increases the position by the number of ints written .", "create image with name , id of button _ name and set p _ command onclick", "regenerates the content of the node and updates the graph view .", "method to get a status from the cache .", "decode a json document to retrieve an array of notificationrecord instances .", "customize request from socket .", "deletes a composite entity extractor from the application .", "filesystemobjectproperties , an enum , associating key with its methodname e . g . invoke filesystem . setallocatedcapacity ( allocatedcapacity ) .", "removes this thrown exception the list of declared thrown exceptions , including all exceptions in this exception ' s hierarchy .", "start the caching service .", "converts the given css length / percentage string to pixels", "toggle the badge visibility in the ui .", "reads a new chunk from the channel if all of the current chunk is read .", "binds sequenced handlers with sequence processing postconditions .", "ensure that there is space to write a byte at the given position .", "check if the full copy is detached .", "gets the angle formed by the vector [ x , y ] .", "tells the inspector to collect the properties from the editors and set them on its propertyconsumer .", "actually set the nested path", "adds a user presence listener .", "sets the color to be used if the linewidth is 0", "parses a pom .", "recursively checks / unchecks a subtree", "waves rotates on the x axis the given model parts in a chain like manner .", "invoked after the operand changed its value .", "build a subgraph from the specified graph .", "creates a list of storage files from the collection of storage file entities .", "convenience method to change an attribute value on the server side .", "construct a polygon of a triangle", "gets an enumeration describing the available options .", "creates a new instance of wmsservice todo not working remove", "resets all the attributes to their default state .", "get the ids of the different searches that have been applied to solve the problem with the given id ( unmodifiable view ) .", "returns whether last event read was the end of a transaction .", "add a java runtime property to the properties hashtable .", "checks the module selection list for consistency , that means that if a module is selected , all its dependencies are also selected .", "format using resource bundle look - up using messageformat", "logs the status of the article consumer .", "this method throws ioexception because it is assumed that we got the id from network .", "gets an object created in the scripting environment and converts it to a java interface .", "initializes for signing", "returns the method in the given class with the name and description .", "causes the receiver to have the keyboard focus such that all keyboard events will be delivered to it", "derived classes can override to lengthen ping delay", "shows the entries whose source word starts with the given string", "unselects all the shapes", "lucene does not provide any api to update the existing index", "creates a new mfcc object .", "moves an item within the list from a position to a position", "determines equality between two values , converting docs to strings as needed .", "resets the last modified for this bucket", "returns a string describing the types in an argument list .", "determine if node has a boundless region associated with it .", "return a utilevalerror or utiltargeterror wrapping a classcastexception describing an illegal assignment or illegal cast , respectively .", "creates a default transportconfiguration with no configured transport .", "returns true if this attribute is present in this meta model .", "binds a specific texture to this artist .", "need to also write the location and train files if a road name was deleted .", "remove the delimiter but keep the corresponding node as text .", "creates the bookmark name for a localized element to be used in the bookmark lookup table .", "turn any hex values ( ie # e4 ) into chars", "delete a persistent comatrixexercises2 entity", "applies the customization", "given that the uris have been built now extract the uris", "should notify template be triggered on replication event .", "loads the checksum file into a properties object", "creates the user interface for panel", "reads restore status from stream input", "query whether this timer is a calendar - based timer .", "a normal user use this to change password", "persist a object and return the generated id", "creates a new buttoncolors object .", "resets the table model .", "two strings are equalp iff they are case insensitively equal", "factory method to provide a reader that removes the characters from a reader as part of a filter chain", "performs the pass through authentication to an external system endpoint such as an openicf provisioner at system ad account .", "sets the table data .", "list of flexible text strings designating license rules .", "handles one phase commit transaction single participant", "generates an artifact starting from gavc", "removes a listener previously added with addtreemodellistener", "creates a new component object .", "translates from some common algorithm names to the", "tests extracting data length", "notifies all registered icontentchangelisteners of a content change", "get the first key .", "creates a new action object .", "inserts custom css and js files .", "rounds the x and y values of this vector to the nearest integer value .", "given a block of rrule , exrule , rdate , and exdate content lines , parse them into a single date time iterator .", "writes string to file .", "prepares the input and output streams of this", "closes the repository freeing any resources", "override this element to handle testing a predicate expression where lvalue % rvalue .", "disables the given state", "returns true if the given extension has a registered mime type .", "returns , whether all permissions , which are contained by a specific array , are granted , or not .", "inserts this entry before the specified existing entry in the list", "return a list of the names of children of this path .", "converts a chart coordinate spaced shape to the same shape in the screen coordinate space", "parses a double constant pool entry .", "returns the action listener to be invoked for view zoom in", "return the seriestext object related to the legend", "check if the given string is empty or null", "adds the sample to the buffer and removes the oldest sample", "verifies that the observable emits an error", "fills the table that connects the views of a module with the functions of a module .", "service a request .", "whether the passed in option is currently set .", "get a local , ip4 address , preferable a non - loopback address which is bound to an interface .", "returns true if this resource has been changed since initialization .", "bundle shutting down .", "indicates if the retry timer is currently scheduled", "you are not supposed to instantiate this class .", "look up the sensor listeners bound to the given sensor", "register a module that is used by the transpiled program .", "creates a new connection factory using the named configuration in the provided json list of factory configurations .", "adds an additional header map to the response .", "returns a copy of the given server proxy having the client method constraints that result after the specified method mapping is applied to the given client method constraints .", "checks if any of the to - be - generated nodes ( fields , methods ) already exist .", "returns the owner of a particular item", "adds menu items to the given contextmenu that provide ways to do stream related stuff .", "checks whether the folder ' s contents have been changed after the uidfile has been created .", "execute and advance the resultset", "gets the font metrics for the line reference font for the given graphics shortcut for graphics getfontmetrics getlinereferencefont", "sets the default language ( for file choosers etc . ) to us .", "find the _ fields constant that matches fieldid , or null if its not found .", "fetches a user api key associated with the current user .", "adjusts the icon offset needed to align icons horizontally", "returns the size of this action record in bytes", "issues a query to verify index is healthy", "shows a dialog where the comment of a group node can be edited .", "sets a date variable identified by name", "sets the table metadata with the detailed structure decomposition information", "get the value of plotpoints", "gets the label for the element at the specified index .", "deactivate this alive timer if activated .", "checks if a username is locked because of to many failed login attempts", "build the provisioning address with operator information", "returns true if the current token is the specified keyword .", "called after requesting a report using ialarmsubject requestreport", "uagg colsums sparse matrix for equal and notequal operator", "write part of a multipart request to the request body", "paints all vertices with the specified color components and alpha component", "compares a string with null terminated char array", "read a name .", "create a pre - defined payload with a simple alert message , a badge and a sound .", "initialization of the servlet .", "return class names are whether or not equals between search condition object and catalogentry object", "determines whether t declares a field .", "performs a test where no responces are given the stun client so that it concludes it is behind a full cone .", "removes an additional namespace declarations from this element", "creates the server - and client - side handler which is used to handle both requestmessages and", "lazily populates with the current value of each property", "return true if included ; false if excluded", "returns all child organizational units of the given parent organizational unit including hierarchical deeper organization units if needed .", "this returns finalstate gif", "creates a token for connecting to an opentok session .", "calculates the write size for the given list .", "get y position without top margin adjustment", "runs the action", "returns true if the specified node is a leaf node false otherwise", "set the traces for this client", "select a file and hides the dialog", "if your fields are prefixed with some pre - defined string register them here .", "nodechoice attributerenaming prefixrenaming suffixrenaming", "checks for the indices being not out of bound", "returns null if none can be built .", "permanently deletes the domain .", "run the x10 compiler on the given collection of source ifiles", "configure foursquare client .", "returns an enumeration describing the available options .", "returns the estimated number of bytes used to encode the contained information .", "creates a new detach reply object .", "unsigned comparison belowthan for two numbers .", "drops underlying database table using daos .", "generate a new l2 cache page for profiles with spezified q", "returns the connectorusessl value .", "tells whether the provided argument ' s values must be obfuscated or not .", "write a new entry into the space", "read a classfile structure from the given input source ( usually a file )", "increment the number of timeouts ( expired launch ) on a tracker .", "discards any whitespace from a base - 64 encoded block .", "returns the summary label of a node for visualisation purposes", "creates a text field that can be used to display assembler code .", "the device pool ' s rules .", "perform a http delete request .", "this is the entry point method", "retrieve the flow configuration with the given key", "helper method for basclasses that add an invoker to the lookup map .", "the options menu", "returns a copy of this array with the values moved around so that they are in sorted order", "process login hint parameter if needed .", "this method creates an animation that will be run for this transition given the information in the startvalues and endvalues structures captured earlier for the start and end scenes .", "returns a list with a single metric datum for the specified retry or request count predefined metric ; or an empty list if there is none .", "resets the session locale to the system default locale", "pstacks are persistent equivalents of jdk linkedlists .", "encodes a byte array into base format and breaks the output into lines .", "append a start symbol to the beginning of a sequence and an end symbol to the end of a sequence .", "visits the given type specific ast node", "set the specified button such that it alternates between being selected and not whenever it is pushed .", "sets the tree item style to leaf , hiding the list opener .", "this method writes a single chunk to the datastore .", "create the check mark shape .", "disposes all images and clear all image keys .", "call when animation ends", "verifies that the session is under tx", "creates a bitmap with the specified width and height .", "applies the appropriate line endings to the given unix content .", "for exceptions that occur during a logging operation create a wrapper exception with the specified description string .", "assert a throwable type and implement more assertions in a consumer", "returns if this search uses field sorting .", "initializes the dialog with the exception", "removes a listener from the list thats notified each time a change to the data model occurs", "find the web - inf dir by looking up in the directory tree .", "adds an interaction between this person and another .", "the launch configuration names .", "process notification of a publish send operation", "removes a breakpoint from a breakpoint manager .", "initializes a given phrase to be parsed using either a strict or a relaxed version of the grammar", "return file name of the internal stockfish executable .", "this method is called when the plug in is stopped", "sets the message of the event .", "verify the network state to disconnection", "filters to limit the request results .", "calculate dynamodb item size .", "the metadir is fromchkpt if it is not null .", "define a function to deal with each element in the list with given start index", "removes a named custom attribute for this configurable", "private static final symbol region _ span = symbol . from ( \" regionspan \" ) ;", "create a sequence containing a vector of objects .", "deletes the itemmetadata property if one exists", "request an image from the flickr - servers .", "returns a mapped application internal sku using the store name and a store sku .", "add the given bus hub in the network .", "get a collation key for the argument string source from this rulebasedcollator .", "calculates the sha - 256 hash of the given byte range .", "adds a matrix to the subsection that is identified by the given memberproxy", "handle the close command", "parses an integer value from a mojangson string as an nbt inttag", "calculates the sha - 256 hash of the given byte range .", "verifies that a proposal response is properly signed .", "returns the of matches to the query", "convert a binary representation of the given byte array to a string .", "copy the device activated time on server from another device", "handles commands selection select or exit", "for each column , puts the elements in the detail band", "creates a child element with the given name and appends it to the element child node list .", "reset all knowledgetypes and add the given ones", "set the stringvalue2", "returns the transaction id stored with the log record .", "elimina un directorio de manera recursiva", "create the view that holds the widgets that control playback .", "associates a skill group with a given room .", "return sign of x y", "if a writable property exists for the given name , set it and return true , otherwise do nothing and return false .", "get the shape from the given int buffer", "this adds a property descriptor for the navazane spoje feature", "get push application .", "gets a list users by their logins .", "create a new hashfile that matches current content of supplied writer", "creates an instance of the specified class using the specified", "subclasses must override this .", "creates a distribution point name from its der - encoded form .", "invoked after a global comment has been appended to an edge .", "call this method when the alarm is triggered .", "zgetstandardtextfielddatestring , this returns a string for the supplied date ( or null ) , in the standard format which could be used for displaying that date in the text field .", "delete a node", "choosetargetrecord determines which level of detail to use", "adds a listener to the list that is notified each time a change to data model occurs .", "gets the string at the given index of the array produced by splitting the given string on the given separator .", "this will permute the list once", "instantiates a new body sid byte offset pair .", "the function checkmode checks if a mouse event obeys the given inclusion and exclusion restrictions set by the setonmask and setoffmask beforehand", "recover all the data from primary space", "aggregation api can be disabled by setting com . gigaspaces . query . useaggregationsapi false", "reads baseline values for the current task .", "adds a guice module by class name", "forwards the responsibility of a sub interval to another node", "remove the given set of breakpoints .", "returns true if the receiver implements or inherits a method that can respond to methodname messages false otherwise", "used to check if a recipe matches current crafting inventory", "checks whether the password is going to change .", "checks the model for problems or any possible errors .", "used to invert an escape array into an unescape array", "constructs a new token for the specified image .", "invoked after the debugger attached to the target process .", "handles mouse move events", "variations on root ( )", "support for closure currying at a given index .", "divide the fraction by an integer .", "uri starts with", "creates a packed image from the input stream for an 8 bit packed image", "use this api to fetch cmppolicylabel resource of given name .", "implements the same behaviour as the \" touch \" utility on unix .", "returns a copy of this date with the value of the specified field increased .", "returns an enumeration describing the available options .", "creates a new array output stream wrapping a given byte array .", "reads a line into the given byte array .", "convert a human readable address string to an address object this conversion supports common and p2sh address types only .", "let the breakpoint listeners know of an event in this breakpoint", "compare the paths of two files the specified case sensitivity", "insert a new com marker segment into an appropriate place in the marker sequence , as follows : if there already exist com marker segments , the new one is inserted after the last one .", "handle a process variable change", "puts the object with the given key locally .", "test the putstring method .", "determines the offset code of a forward contract from a schedule .", "sets a range of bits .", "add a project member .", "[ , + / - , asr # ] ! 0b10 / asr / if shift _ imm = = 0 then / asr # 32 / if rm [ 31 ] = = 1 then index = 0xffffffff else index = 0 else index = rm arithmetic _ shift _ right shift _ imm if u = = 1 then address = rn + index else / u = = 0 / address = rn - index if conditionpassed ( cond ) then rn = address", "decode hex string to a byte array", "registers a new esig type .", "ensures that the cache ' s in - memory representation has been initialized .", "remove url to service whitelist", "convert current configuration to json format", "create a workerchannelupdater to execute update .", "set the value related to the column itemid", "creates message body of amqpvalue type .", "set if the class is final", "marshall the given parameter object .", "create a new axislabellayout layout .", "encode a barcode using the default settings .", "true if the replicator should stop on checksum failure .", "creates a new description object .", "log threads to com . caucho . v5 . util . threaddump at info level .", "creates a new policy in the specified project using the data included in the request .", "converts the given char array to a utf - 8 encoded byte array .", "a reference to a convention", "creates a new expression object .", "read a reuters text file into a map", "this method implements the post - visit during the depth - first traversal .", "sets the interval after which an unacknowledged heartbeat will cause the connection to be considered faulted and disconnect .", "sensitivity to time to maturity per day assuming day per year .", "delete the attribute value .", "consumes the character stream until it runs out or is interrupted .", "marshall the given parameter object .", "overridden postconstruct method to perform post constructor ( instantiation ) configuration and initialization actions on the newly constructed object .", "generates the instruction to push the given value on the stack .", "adds a title .", "utility function for the toxml routine", "updates all visible widgets partially .", "generate array of n d - dimensional points whose coordinates are values in the range 0 . .", "ceylon runtime main entry point .", "pull a batch of messages .", "here we go through the referencequeue and remove garbage collected softvalue objects from the hashmap by looking them up using the softvalue key data member", "return differences between adjacent values .", "returns if there are comments in the input that we have not looked at yet", "fill in a list with nodes that match a space delimited list if id", "adds a parameter with the specified name and value to this encoder", "change the status code for this response .", "associates a new set of attributes with the service in addition to the services current set of attributes", "removes the oldest element from the queue", "returns a link from the uri stored in the provided opencms user context to the vfs resource indicated by the given link and siteroot , for use on web pages , using the configured link substitution handler .", "gets a unique id for the diff relating to the passed parameters", "returns the server inet address that accepted the request .", "determine if the source string still contains characters that next ( ) can consume .", "links node as first element , or returns false if full .", "the names of the fields that are currently being indexed .", "executes the specified create index statement and returns the number of affected records .", "we manually set the height of this image to fit the container .", "get a parameter from the parameter map .", "creates a close button for child dialogs .", "recursively visit all nodes and set edge weights the weight of an edge e is the maximum sum of overlaps on any outgoing path from e", "look up vertex corresponding to given method .", "notification that a session is about to be invalidated .", "clones a set of attributes .", "the jmx support is already created via the serviceloader", "client init process from the server", "inserts an identifiable into the hashtable", "destroy main window", "sets the number of elements in the current palette widget list to zero .", "creates a new lexical analyzer for the specified sql statement .", "performs an in - place element by element scalar multiplication .", "write page directory entry at offset", "this method cleans translations and zoom", "sets the page height", "copies a resource .", "construct the feature extractor given a trained counter in json format .", "imports the expression type substitutions .", "sets whether the device was successfully registered in the server side .", "shows a line of text .", "create a dictionary from a byte buffer .", "set the target endpoint for the connection", "get the classifier of an association end", "set the type we are instantiating", "build a locationinfo instance from one line of a stacktrace", "an aggregate is done iff all of its components are done .", "calculates an md sum of the specified file .", "remove the observer for a given notifycontext from an observer list for a given notification name .", "generates a publickey instance from a string containing the base64 - encoded public key .", "parse primitive serialized object .", "describe shutdown method here", "write list file .", "set the max value of the bounding box", "determines whether the given text field represents a valid type name and that the corresponding does not already exist .", "generates sax events for the given text", "creates a new module layer from a parent layer and a set of paths .", "unregisters the listener from receiving sample buffers", "write a string to the temporary intermediate skeleton file", "gets the path of a node from root for hash mapping .", "method for beancontextchild interface .", "provide a tag for logging .", "writer version of this method .", "removes blank and minus characters from contact", "updates the configuration parameters with additional parameters", "this method should be called when done using the code base .", "returns the largest integer value less than or equal to the given number .", "handles exception that occurs during the event listening process .", "returns the localized value of this cp definition specification option value in the language .", "this method automatically adds discovered hibernate event listeners into the hibernate service registry .", "loads an entry from a given file .", "create a new predicate returning true when the input string ends with the given pattern .", "set the first two components from the given v and the z component from the given z", "set the classloader that this parser should use for type resolution", "paint a single divider .", "create a namematcher that matches job names equaling the given string .", "render the combo item for the specified document .", "clamps all components to be at most max", "updates the save field backgrounds .", "handles a special case for index nodes .", "checks whether the instructions with the given mnemonic use only their first and third operands .", "adds a feature to the event attribute of the projecteventlist object", "matches generic type descriptions of the given sort .", "create a daemon thread", "adds a new item", "get the child of an specific index", "returns the current image", "get the largest whole number smaller than x .", "get target column name if column is not found in metadata , then name it as unknown column if alias is not found , target column is nothing but source column", "extract the required columns from the matrix", "checks that the given access flags do not contain invalid flags .", "quote a string .", "processes events in the event queue of the poller", "sets the object ' s position and zoom level to the default state .", "remove device from group", "returns the value from the table at the given position", "generates a key for the aes encryption", "compute out = a * in , and return the ( signed ! ) length of the output vector .", "copy the tenant credentials / signers at new location under services .", "with reflection class forname and newinstance create a new service instance", "consistently generates a new biopax element uri using given uri namespace ( xml : base ) , biopax class , and two different identifiers ( at least one is required ) .", "fetches the next object .", "decides if all points are to be fit into the current window in x direction", "parse a json data structure from content within a given file .", "closes the popup when it looses the focus", "trim the value", "write data to descriptor", "adding a child session into the current connection .", "returns a promise that mirrors the source promise but is fulfilled shifted forward in time by a specified delay .", "adds a new filter to the view .", "allows external classes to force the treemodel to reload to work around a problem with the children of the root node not displaying properly", "connects to the database and retrieves the pubchem id to build the resolver", "to get the exact time now and to assign the values .", "get the string representation for a given servicestate which can be a proto message , enumeration or a java primitive .", "create test directory removing any previous directory .", "create a consultingnot counterpart that can prove itself", "tries to find request part or file with specified name in multipart files map .", "log an exception into the eclipse log file", "set the colour of the element depending on its type", "creates sequential stream writer .", "validates the integrity of the storage", "returns the number of decision variables", "add a discoverylistener to the listener set .", "removes all elements that are instance of specified element", "returns the coreconnection for this connection", "the binary lessequalsthan operator .", "creates a new document used for saving xml files .", "converts colorstring into a color which is available in the colormap or if not tries to decode the colorstring", "compute compute test set covariances", "send endprefixmapping events to the result tree handler for all declared prefix mappings in the stylesheet .", "serializes one or more requests but does not execute them .", "retrieves whether or not a visible row delete can be detected by calling the method resultset rowdeleted", "fetch the metadata instance for the specified data set .", "get or create the cache of classes for the specified artefact type .", "get the attribute with the given name", "returns a salted pbkdf2 hash of the password .", "create a file in the applications temporary directory based upon the supplied encoding .", "get parameter with given name from header value in response", "replies if the bus network should be drawn with the algorithm .", "set mrc clock and start clock", "searches the heap for an existing equal node and updates it s distance and parent node fields if it finds one .", "returns the largest image from the generated source set .", "colmin / colmax , opcode : uacmin / uacmax , sparse input .", "set the top margin of the view .", "producing a single io monad using no imperative code only by composing other io monads .", "sends a packet from the server to all currently connected players", "adds a default pool configuration to the returned builder .", "returns a map of all the name - value pairs in the given key .", "assert that a form checkbox with a given name is present", "add a postinstantiate delegate so it can intercept nodes after they are created .", "called on first draw when the view has dimensions .", "converts the timestamp to an instant .", "determine if a character is uppercase .", "get information about a workspace .", "checks if the keys of object ' s all the _ attributes is available in the usergroup ' s attributes or not .", "resets the table model .", "a resource has been moved", "answers to cancel invite request", "visits the type of the super class .", "paints the interface .", "create the mark interior shape .", "checks if the given draggable item is an image .", "parse one variable post operations", "populate the list of sites from the local xml file", "try to open wifi settings activity .", "returns the string representation of the code that given a reference of the specified type , reads the specified property .", "creates new abstractlistenerthread", "initialisation for mixed excitation : it loads the filter taps , they are read from mixfilterfile specified in the configuration file .", "handle set transaction lease time", "set the current transformation to the contents of the specified source", "records a method ' s exit .", "initialites this action", "fire the event to the registered listeners .", "returns a geometric object that represents the point set union of this geometric object with anothergeometry .", "processes a tree to be modified", "clears the current lens", "normalize value between minimum and maximum .", "was sending the msg ok", "count number of blocks given line size", "update inner searchable state based on provided search result", "appends the reduced value of a date - time field to the formatter .", "construct a new case sensitive wildcard filter for a single wildcard .", "add the autocvs nature to given project", "class amcertstore is special cased certificate store for ldap .", "merges this instance with the given instance and returns the result .", "process included file .", "verifies if the given credittransaction object is in the correct state to be created", "returns namespaces owned by the user .", "look up a revision of a change by number .", "read an int from the input stream .", "return the string value , expanding any environment variables found in the expression .", "checks if cell with row and column coordinates is an upper level marker", "split this tuple into two tuples of degree 1 and 7 .", "start up the background thread that is processing metrics", "close the connection .", "get the java util prefs preferences node where borg stores preferences", "mangle the specified character to create a legal java class name .", "clips a given line against the clip rectangle .", "check current state of animation .", "adds \" all classes \" link for the top of the left - hand frame page to the documentation tree .", "generates bytecode for the exception handler", "set the value of avatar", "approximated black 1976 implied standard deviation , i . e . volatility * sqrt ( timetomaturity ) .", "find the hierarchy in the dimensions", "draw wind on loading animation", "associates value with value getid in this map", "committransaction commits the current transaction .", "sets the geo location based on the passed in lat and lon values", "returns the number of items the node contains", "creats the template context", "construct a new instance", "cancels the current virtual machine scale set rolling upgrade .", "verifies number of rows updated inserted by last update query", "parse a single file", "creates an alias for a directory and assigns the alias to the directory .", "compute the type to which two numeric types must be promoted before performing a binary numeric operation on them .", "prints the concatenated text representation of the arguments .", "re - expands a nested attribute representation from a collection of attributes back into a nested java object representation ( objects become map , arrays become lists , and non - containers stay the same ) .", "convert this latitude and longitude into an osgb ( ordnance survey of great britain ) grid reference .", "returns the end of stream flag", "returns the editor for a given transformationpage", "assigns the specified hierarchy group to the user .", "initialize the base font .", "checks the given collection descriptor .", "keep only authorized user that have the given permission on a given project .", "raises an error if the current token is not of the given type", "returns a member by id .", "construct a new instance of this test case .", "obtains an instance from an instant using the specified time - zone .", "determine if the jsonobject contains a specific key .", "this method can be used to display a specified message in the burp suite alerts tab .", "can be overridden to supply a way of storing and retrieving one edge per vertex", "safely closes resources and logs errors .", "checks if the current active user is the owner of the comment in question .", "returns an initialized cmsobject with the given users permissions .", "standalone routine to computes local transfer for the given single source destination pair of the d multi agent system .", "starts the service .", "adds an entities to a membership .", "throws an exception for invalid surrogate bits .", "all non - specific keeper exceptions should be constructed via this factory method in order to guarantee consistency in error codes and such .", "returns an object externalizer for a mime type", "creates a new formatted field object .", "ask the jsse alpn provider for the protocol selected for the given sslengine , then delete the engine from the alpn provider ' s map .", "retains only the elements in this set that are contained in the specified collection .", "store the object as a hash suitable for transport over an xml rpc connection or similar", "create a new darray object .", "retrieves a pin for a given card", "read an unsigned 8 bit value", "retrieve access token", "marshall the given parameter object .", "add a dbobject instance to list", "the zookeeper connection string aka ` zookeeper . connect ` .", "get the current list", "encode the values and concatenate together", "sets up the listeners that are necessary for keeping the data shown in the table synchronized with the bookmarks managed by the bookmark manager .", "get the current output of the formatter .", "performs an http get on the given uri .", "remove a file system listener .", "consumes the named attribute and parses it to an array of string expressions .", "internal active setter", "find a vacant area that will fit the given bounds nearest the requested cell location , and will also weigh in a suggested direction vector of the desired location .", "publish an object on a topic", "stores a keypair associated with a csr request on the specified alias in the repository .", "this will return the actioninsertfact that a variable is bound to .", "deletes a view from the database .", "inform all listeners that something has changed", "shortcut for path path and leftpredicate rightpredicate .", "compares two ruby element types", "returns true if the specified character is a space character as amdended in the xml 1 . 1 specification .", "add a recordreader to this collection .", "request that concurrent collection is performed after this stop the world increment", "called if configuration changed", "returns a clone of this objects instance", "invoked after a graph window was opened .", "tries to create a buffer with the given level .", "return true if the value for this logger is", "create a data input stream for this file", "removes an actionlistener from the button", "reads a short property .", "converts a java type as a string to a valid input type and returns the class or null if its not supported", "dump list content used for debug .", "determine whether the value is in this numeric range", "loads the authentication method types and hooks them up .", "override uibeans implementation such that component html id is determined in the following order", "called after the properties map has been changed", "parse the sentence again , using the given conversation context .", "remove a property change listener from this bean", "summarizes policy states for the subscription level policy definition .", "sent out a message to jolokia ' s multicast group over all network interfaces supporting multicasts", "validate that the given modifications are allowed ; throw any transgressions found .", "get the total available socket count on the specified runserver", "retrieves a class from the grailsapplication for the given name .", "writes an \" extension media \" in pdu format to the given output stream .", "evaluates s . e . seller filter or throws \" something _ wrong \" if not found .", "convenient factory method to construct a new resettable input stream for the given file input stream , converting any ioexception into", "as mapquest and osrm doesn ' t provide legs information , we have to rebuild it , using the waypoints and the road nodes .", "displays a popup menu when the user right clicks on a thread in the table .", "fetches a chunk and filters ( if required ) .", "determines if the string is empty .", "write this constant pool object into the stream including the type byte", "adds the provided bean property expression constraint to the list of constraints for the constrained property", "returns unqualified class name ( e . g . string , if java . lang . string )", "get values from the sync .", "start an activity .", "limit the amount of known peers by deleting the oldest peers .", "returns the sum of the number from 1 . .", "checks if a given file name represents a toplevel class .", "checks the given label can be added removed to from a vertex .", "adds runtime , user , and base properties to the environment .", "advances builder to the earliest day on or after builder that falls on wkst .", "pop the current xsltelementprocessor from the top of the stack .", "the controlling terminal of the process .", "marshall the given parameter object .", "return true if the specified property is read only", "actually records that the folder has been opened or closed", "updates the internal list of dates and fires a value change if necessary .", "creates the native flow graph views .", "removes if exists a registered filtered sample listener", "processes two bits before checking sync processors for a match .", "returns the net present value of the instrument .", "create a log message .", "find a class in the module that matches the given classname", "clones given cmsobject and switches to root site .", "transforms mnem r r r to r combine r r", "loop through each of the columns in the row , migrating each as a resource or relation .", "parse an expression containing multiple lines , functions or sub - expressions in a list of inline sub - expressions .", "prints a message at warn priority .", "removes the referencing resources from the cache .", "creates a binding error response according to the specified error code and unknown attributes .", "prints the content of the memory chunk to stdout .", "creates an error message if the feature is invalid", "close the model and free up resources held", "mark the result as ' failure ' .", "cleans the specified number using the delta value", "return the selected item of the container", "gets the registered converter for the given type .", "expand the tree according to the treepath array passed as a parameter", "returns class that should be used to render all values in given column", "returns the chainmode object matching the string .", "check if gateway is trusted .", "invoked when a window is iconified", "set the direction to context for all links", "translates given phrase from english to current language", "lists all activities for given project", "defining the dialog s owner jframe is highly recommended .", "returns number of leaf keys used including both internal and external paths .", "print table header for the inherited members summary tables", "removes the commerce address with the primary key from the database .", "start monitoring the specified thread .", "inserts an item into the quadtree .", "add a new mapping to the specified property with the specified index , specified property definition and an undefined type .", "creates a changed address attribute", "determines whether or not this subscription is to all stream or to a specific stream .", "this method adds a timer into the collection", "getter for textualrepresentation - gets this feature provides the text of the annotated concept mention ( e . g . , entity mention ) .", "creates a new event list table .", "returns true if this is an update .", "on input , we hash messages one at a time since servers may need to access an intermediate hash to validate a certificateverify message .", "reads the number of frames and optionally sends the buffer to the listener", "helper function to handle associated exceptions during initialization of properties using external properties file in a single war deployment .", "returns an initiliazed instance of optsonido component", "checks whether the condition is true .", "creates figure for this edit part", "returns whether this property is a standard member property", "tests if this thread group is either the thread group argument or one of its ancestor thread groups .", "returns the distance from this point to the given point .", "create a urlvalidator with default properties .", "strip the filename extension from the given path , e . g . \" mypath / myfile . txt \" - > \" mypath / myfile \" .", "created sha256 of input", "returns the value of all current header fields", "checks if the given item is a repost or not .", "sets the kernelcontext in the request", "creates a new select file synchronizer .", "rotate the image by the specified degrees around a pivot point .", "registers a jsonbeanprocessor .", "attempt to replace the condition of if or hook immediately that is a reference to a name that is assigned immediately before .", "modifies the renaming object rename to indicate that the current name of node is name .", "returns the object by name", "count any matching entry from the space .", "return an array of network outputs ( predictions ) , given the specified network inputs", "first writes a value to outstream then reads it from input", "connects to the specified destination .", "send data with object mapper index response .", "finds the least frequent choeceelement", "returns a string representation of this turn suitable for savegame files", "start analyzing a position .", "dumps the specified usb device descriptor into a string and returns it .", "sends a packet from the server to all players in a dimension", "paints the border of a menu .", "get the bean managed by this sheet", "adds a name and type to the constant pool of the class being build .", "declement file count and set file information", "calculates the angle between two vectors in radians .", "notifies that a header item is changed .", "this method will get called from management thread .", "exposed for testing .", "updates a user record to match the supplied user .", "write input stream to output stream .", "maps the position of a cds nucleotide back to the genome", "no object utility class", "make a dark color to ripple effect", "remove one building hex from the building", "changes the selection state of the graph by unselecting the given nodes .", "create a timeofday from the given date at the zero second in the system default timezone .", "if not already created , a new chunk element with the given value will be created .", "collection of objects containing properties for each player session that matches the request .", "load the resources from the given locator and language", "returns whether another revision is available or not .", "public file tofile ( element el , string attributename ) { string attributevalue = el . getattribute ( attributename ) ; if ( attributevalue = = null | | attributevalue . trim ( ) . length ( ) = = 0 ) return null ; return new file ( attributevalue ) ; }", "configure the serviceclient to interact with the web service described by the specified axisservice object", "remove all supertypes of elements contained in the set .", "a visitor that prints a format suitable for viewing in http freemind . sourceforge . net", "true if the entry is expired .", "returns the seconds until password expiration warning .", "gets the earliest before finish of to and supplied date", "returns if the instance class relation stored within the classset exists within the kb", "draws a value at the specified x and y position .", "mutator for this setting .", "reports an entity reference or character reference .", "resets the binding for the mnemonic in the when _ in _ focused _ window ui inputmap .", "raise an int to an int power .", "compares this object with obj .", "writes one or more objects", "this command controls the leds common to all models of roomba 500", "writes a byte array to a file .", "invokes an operation on an mbean .", "get the flob view associated with an applitude", "create and initialize a new array of meanvariance", "creates a new bookmark object .", "takes care of the fact that sun changed the output of bigdecimal . tostring ( ) between jdk - 1 . 4 and jdk 5", "tries to get the subsite root for a given resource root path .", "loads the graph of a view from the database .", "imports a list of subtrees at the given position in the root of the tree .", "returns a new levenshtein edit distance instance with compare target string", "use this factory method to create a new instance of this fragment using the provided parameters .", "tests another object for equality with this object .", "pattern for finding conversions that an entityreference is participating .", "convenience method for checking visibility of a module tree item", "open a blazegraph instance backed by the supplied journal file .", "this adds a property descriptor for the recurrence settings feature", "fully roll back the current transaction .", "helper method to convert concatenated signature values ( as used by the jws - standard ) to der - encoded signature values ( e . g . used by java )", "constructs a cookie with a specified name and value .", "indicates if the range is collapsed", "removes all the branch stages from this parallel", "use this api to reboot netscaler .", "internalxtype . g : 75 : 1 : rulejvmtypereference returns [ eobject current = null ] : ( ( this _ jvmparameterizedtypereference _ 0 = rulejvmparameterizedtypereference ( ( ( ( ) rulearraybrackets ) ) = > ( ( ) rulearraybrackets ) ) * ) | this _ xfunctiontyperef _ 3 = rulexfunctiontyperef ) ;", "tells the camera to stop drawing preview frames .", "list character industry jobs list industry jobs placed by a character - - -", "executes one of the continuations depending on the element type", "returns the content encoding set for the given resource .", "dispose of cached objects and their underlying os resources .", "checks if the item is available in the cache .", "creates underlying database table using daos .", "center a message on a graphics context", "initcomponents , this initializes the components of the jformdesigner panel .", "gets the labeltext", "forbid the use of sub objects", "this adds a property descriptor for the force output feature", "update the index with the personal file", "constructs a symbol axis , using default attribute values where necessary .", "download in background all tiles covered by the gepoints list in osmdroid cache .", "return true if the string is null or empty", "postprocess skip records now that we now the offset of each encoded action", "updates the status of the messages sent to devices and the list of devices that should be retried .", "create an element based on the key", "set the value related to the column senddate", "separator between currency code and formatted value .", "is null or its length is", "notifies callback that request was handled successfully", "disables the process of sending amazon simple notification service ( sns ) notifications about a specified event to a specified sns topic .", "marshall the given parameter object .", "onrefresh will be called for both a pull from start and pull from end", "creates a new list processes reply parser .", "is this an identity method", "returns whether the register is the stack pointer register or not .", "get text of the given element", "gets a contact listing with specified pagination options .", "return whether or not training output should be emitted after analysis completes .", "use of ioc to get settings and filesystem", "alter this object properties", "zooms the graph out by the standard zoom factor .", "use this api to fetch the statistics of all gslbdomain _ stats resources that are configured on netscaler .", "return the item in the set matching a particular item ( or null if not found )", "returns a vector3 scaled by d", "gets the property to show the generated checksum in the the text", "aligns the given cells vertically or horizontally according to the given alignment using the optional parameter as the coordinate .", "makes the scene object pickable by eyes .", "destructively modify this so that it becomes the intersection of itself with x .", "writes the contents of this message to the given output .", "adds an argument to the command line", "generates views based on annotations found in a persistent class .", "match to changed - set title", "reads and discards all data from a given input stream .", "indexes the ieobject description using the given", "creates a composite for the given parent with gridlayout", "returns the currently selected font style", "set tls session ticket keys .", "constructs csvreader with all data entered .", "make a dark color to press effect", "generic routine that throws an error because you cannot do input on anything but a jbfinput subclass of this type", "paint the picture", "construct an absolute uri from a relative one using the current base uri", "checks to see if the authentication method , used to retrieve the user ' s current sso token id , meets the required authentication requirements .", "constructs a categories instance with in - line category descriptions .", "changes the state of a normally running job from pause to resume or resume to pause", "invoked after a local comment of an edge has been edited .", "will return whether the program has a console present or was launched without", "construct a byte based password", "constructor for headingcontrol", "overwrites method loaddocument", "returns the service object i . e . just serviceitem . service from an item matching the template or null if there is no match .", "returns the activity for the given id", "writes a number of type long in little endian", "adds dependency with given kind .", "constructs a new adaptation registry from the given transform .", "creates the extended config object when it does not exist .", "resets the generator state .", "thymeleaf ' s reserved words are already checked in thymeleaf process so no check them here", "copies field value from result set", "add all jars under lib optional security", "replies the path representation of this itinerary .", "put a filter somewhere we can get to it .", "shorten the parent path to a length of max 2 elements", "fetches a row", "gets the value of the actionrootremove property", "creates a deep copy of this rounded box", "builds a type checking extension relying on a groovy script type checking dsl .", "gets the display name value", "method to set the date of the datepicker", "sql query to retrieve the database date and time stamp", "adds a key gt value assignment to the values hashmap", "creates a new folder with specified name", "times and records the duration of an event .", "value that must be a boolean", "create the apache rewrite configuration file", "writes the snapshot to a stream .", "invoke a method on an object and return whatever it returns .", "performs bind or rebind in the context depending on whether the flag rebind is set .", "lift an element in the heap structure", "create the object after serialization .", "pop an array off the stack", "checks whether a dictionary contains a word", "make this object the same as the given one .", "resumes the target process .", "find the next cell , for a given string hashcode , which may come after this cell in the address tree .", "parse and build a rule package from a drl source with a domain specific language .", "displays a dialog to signal an error", "computetabposition pass 3 : compute the position of the tabs .", "describe what the method does", "creates a new background dragged action object .", "apply a method to a given object with optional arguments .", "acquire permits for task execution .", "a debug method for the documentlistener", "parses the given input as a windows path .", "update the dsc node .", "deselects all selected items in the receiver", "removes all the options from the options array that are blacklisted", "parses a response from the network or cache and delivers it .", "called when tts is ready .", "returns the lower and upper bounds ( range ) of the x - values in the specified dataset .", "convert input to http entity", "confirm given file is block compressed", "creates new jsonhttpresponsehandler with json string encoding utf", "set the value related to the column joinnumber", "true if the value is negative", "appending the not in operator clause by a single sub - query .", "set the result for the request", "to string useful for debugging", "creates a greater - than - number parameter constraint .", "either load the script or getchild the included script", "! begin user doc write your own initialization here ! end user doc", "reads one time values from the camera that are needed by the app .", "adds a contact to the contact list sorted by the contact screenname", "extension to commapi this is an extension to commapi .", "narrow controls using own default factory and controlfactory .", "sets the coordinates for this thing at its current location", "delete a consumer group from an event hub - compatible endpoint in an iot hub .", "returns a clone of this object", "maps a set of classes", "generates constructors for exception class", "computes probabilities from f scores", "erases all elements in the list and re initializes it .", "convert an array of primitives to an array of boxed objects .", "method to for asynchronous termination of sampling loops", "static version of the cdf of the t - distribution for t > 0", "creates a new byte - buffer input stream by mapping a given file channel .", "gets whether to include an xml declaration on the resulting output", "performs move - to - front on the burrows - wheeler transformed buffer , storing the mtfed data in data . sfmap in runa / runb run - length - encoded form .", "decode a uri string ( according to rfc 2396 ) .", "decode picture loss indication", "notifies all listeners that the project insert has started", "resend the bcast request with the given localseqid", "selection coefficients are gamma distributed with parameters alpha and beta", "convert to an exception path value .", "just like map . put , but does not throw an error if the key with the same value is already in the map .", "sets real part and imaginary part of the complex number at specified index .", "sets the domain range for the current z", "messages at about the level of high order function calls", "search for the script file doesn t bother if it is named precisely .", "sets when a piece is first moved", "construct a public key from its encoding .", "returns a enabled featuretoggle in case there is an optional in this object , otherwise returns a disabled featuretoogle", "visit the nodes in the list with the supplied visitor", "this method is to get a state object from the state name", "remove all index conditions that are not used by the current index .", "overide parent show to integrate effects", "handles the special case where the debugger reports the removal of an unknown module from the debuggee ' s address space .", "process the redirect response .", "make a good faith attempt to terminate discovery and cancel any lookup registrations .", "creates the java . home token used in the jvm . config file .", "move this entries child entry in the direction indicated .", "creates the table with the specified throughput ; also populates the same throughput for all global secondary indexes .", "estimate the cost of a sort of the given size and limit .", "method to generate the antiparallel sequence for a rna / dna polymer", "an array of service error ids .", "given the reduce taskattemptid , returns the taskattemptinfo .", "get corporation assets return a list of the corporation assets - - - this route is cached for up to 3600 seconds - - - requires one of the following", "reports an error at a specific location .", "tries to find the best name for an url name mapping for the given structure id .", "get an object from reservoir with the given key .", "returns the registered menu for a given component", "delete the children of the element .", "handle error bean", "calculates bivariatematrix for a given statistic", "sets the current mass value", "either if the email typing confirmation is enabled or not", "adds a new database with default information to the list of known databases .", "determines if the character at the given position of the given input text is splittable .", "has the type at least one annotation declared or inherited having the specified qualified name ?", "reads count events from a stream backwards e . g .", "clears the content of the underlying buffer in the response without clearing properties set", "two leases can be batched if they are both registrarleases share the same server and have compatible constraints .", "builds the tooltip text of a table row from the content of a node .", "construct a new instance of this test case .", "suche alle imports in einer klassendefinition", "interprets a bytecode instruction with three arguments .", "restores the state of all supertoasts that were showing and / or pending .", "adds an i j edge to the graph", "creates a new simulated reil memory object with the given endianness .", "sends the given event to js , coalescing eligible events if js is backed up .", "schedule a mass mail from a template", "appends string content to buffer .", "base encode the given data and return a newly allocated byte with the result .", "serializes the argument into an array of bytes and returns it .", "intercepts to clear the hidden map .", "initializes coordinator since date ( if needed ) .", "sleeps until the given time has elapsed .", "rehashes the map to the new capacity", "void removefromsuperlayer", "create a new list of all the children for the current root", "marshall the given parameter object .", "removes an element at the specified index from the list .", "performs cleanup when a crash happened during processing", "this returns the ownedoperations aux label text for the adapted class", "add a method signature to the interface .", "find the index of a hetroatom in a cycle .", "determines whether the target object is null or not .", "removes a listener that was previously notified about changes in the graph .", "enables / disables the use of wider sections", "flush any bytes in the file s buffer that have not yet been written to disk .", "called when the user reorders the policies in an client .", "creates a new function selection tree .", "finds an image by id or by tag .", "paints the border of an editor pane .", "returns whether this dccoord is equal to the specified dccoord", "fills the fields with current values .", "add data series to all process variables", "this adds a property descriptor for the label feature", "checks for egl errors .", "returns true if this object is the global context .", "constructs a sasjavaexec object with no command line arguments to stdin .", "the main processing method .", "loads all type instance references for the given module from the database .", "adds an already created toutput to a step .", "returns the number of tables .", "adds the supplied key / value mapping .", "loads data cluster configurations from disk .", "execute the expression .", "ticks the synchronous scheduler .", "this method evaluates the given data with this definition", "performs generic data validation for the operation to be performed", "this implementation returns a description that includes the class path location .", "simplified method form for invoking the describestream operation with an asynchandler .", "returns the rotation applied by this nodes transform in radians", "initialize a webspheresecuritypermission object .", "this method takes a set of inetaddresses , represented by an inetaddressmap , and : - if the resulting set is non - empty , goes through to see if all inetaddress - related user settings have a consistent ip version : v4 or v6 , and throws an exception if not - if the resulting set is empty , sets the default ip version based on available stacks and if a dual stack , stack preferences - sets the ip version to be used in the jgroups session", "just read response forbid sending request", "checks whether an instruction with the given mnemonic uses its first operand .", "returns true if the object path is a valid location to see a multi / polygon geometry", "encode a long number as variable length encoded byte array 1 .", "invalidates removes a token", "updates all properties of the given resource with the given macro resolver .", "quick sort algorithm", "calculate the position of the next comma or space or negative sign", "validates whether the properties of the jobdetail are valid for submission into a scheduler .", "process entity request .", "sets the vertical alignment of the icon", "check whether the key is allowed for fallback ( e . g . bio sensor ) .", "sets the value of font", "generates a random username in the format of firstname intial + lastname + random 2 digit ie tjones67", "get layer output type .", "return true if this vector has seen all version changes that the other vector has seen", "read a fits file from an inputstream object .", "set to true if noise is to be added to features", "deletes user selected mail messages", "creates the delta tree for the given element and delta and then inserts the tree as an affected child of this node", "this method initialize and shows the downloadprogressview .", "set the value of the location", "stop pipeline operation .", "get a specific copy of the device pitch information at the time of the update .", "adds the pokemon nickname to the ocr auto correction if the nickname does not match the pokemon name & does not match an existing pokemon .", "unescaped a escaped string .", "calculate the number of differing characters between to non - null strings .", "lookup a class , given the current set of imports , ambiguousclass exception is thrown if the name can be resolved in more than one way .", "add open bracket to delimiter stack and add a text node to block s children .", "creates simplemutabledatetime and initializes it to given zoneid .", "tests if this string ends with the specified suffix .", "change all branches from this to b to branches that go to bcopy instead .", "go forward from the current segment the given number of segments or until hitting the end of the sequence", "creates an empty test parameters properties file", "checks if the buddy is in the buddylist", "tests if the token sequence is unified .", "visits a primitive value of the annotation .", "returns the registration uuid s hash code .", "refresh the current ui .", "writes all additional information to os .", "adds the edge and its directededges with this planargraph .", "writes a boolean element", "add len bytes to the buffer for processing .", "writes a byte array to a binary file .", "concrete classes must implement this method and perfom production of records based on an s object .", "save this piece of code regardless of whether the modified flag is set or not", "visible to javascript stops listening recording", "make the badge visible in the ui .", "this method extracts assignment data from a planner file .", "sets teh checkmate flag and also sets the result field to a new chessresult if and only if result was null", "downgrade all nsp values in frame .", "mounts a snapshot and validates that the storage is readable .", "returns true if the str is empty , false otherwise .", "gets the image for method", "writes a string value to the stream using utf - 8 encoding .", "add a handler that is called whenever the client stops communicating with the back - end .", "method set total outflow actual", "callpase all node of tree", "create ad tree from set of instances", "sets boolean array type custom metadata property .", "executes put object .", "check whether a task ' s process tree ' s current memory usage is over limit .", "this method is used by both sleep ( ) methods to implement sleeping for the given time even if interrupted", "a gstring variant of the equivalent charsequence method .", "create an eager file property", "returns the largest value that this codec can represent", "set to true if the picture to be deleted is the primary picture", "create the gui", "encode the algorithm identifier in der form to the stream .", "compares this foreign key to the given one while ignoring the case of identifiers .", "retrival the cached map", "add a separator to the menu .", "get order details", "enterinitstate will initialize the chaincode if entering init from established .", "returns the signature of this method", "returns the maximum element out of the iterable based on the natural order of the attribute returned by the function .", "used to support xor operations on addresses in python scripts .", "create a thread to listen and read from input stream , in .", "perform special handling of ilrmiproxy method", "a list of arns that specifies the assessment templates returned by the action .", "change in quaternion values wrt time for a given angular velocity dq dt 5 0 w q", "convenience method that makes an inputstream out of given text .", "indicates that all entries have been written to the stream .", "creates a new terminate synchronizer .", "turns a tag type object into a string that can be written to the database .", "attempts to approximately set the job submit time based on the last modification time of the job history file", "format phone number in din 5008 format with cursor position handling .", "saves the file at the directory .", "called before beginning an iteration of analysis .", "invoke the request using the http client .", "retrieve a select statement from the model", "initializes the keyring for operations", "entry point to add one or several files to the queue of downloads .", "returns true if the given binding binds a click action", "sets the id property .", "lists the targets registered with the maintenance window .", "creates the controls for the package name field", "returns true , if the given element is a self - defined massnahme .", "write a pretty version of the given xml string to the writer .", "add a listener", "returns the textual representation of the issues that prevent the extensions of the add - on from being run , if any .", "registration of a configuration file e . g com . xxx . route route . conf", "test something against ourself for equality", "a static method that uses the natural log to obtain log to base10 .", "method to handle edit button", "whether the given group is currently expanded", "sets the vertical position of the given dspf object", "return the map key of the given value", "parse an xml configuration from a file an url location .", "destroys the space and unregisters the internal space mode listener if registered .", "converts an double ( multiplied by 100 and cast to an int ) into an array of bytes .", "build a non - processed vertex not owned by any node yet .", "marshall the given parameter object .", "gera html data inicio iett", "determines whether the value of a given integer tree node needs relocation .", "called when the visitor is passed to a property", "tidy up - ensure that tokens are released as they are maintained over a disconnect / connect cycle .", "move the cluster at index one place higher in the list cluster drawn sooner", "pick a color for the next set of measurement lines to draw", "checks whether all input parameters needed for conversion are specified ( such as cpl , imp ) are specified .", "gets hash for folders in xml response to avoid cached responses .", "get a list of match rules from an internally encoded match specification", "the producing thread tries to put ont data item into the queue .", "stops the job and all sub jobs .", "writes locators to the given stream as a null terminated list of marshalledinstances .", "selects the minimum value found from the iterator using the closure to determine the correct ordering .", "rotate and align the piece", "returns a hash code value for this object .", "draws a circle endpoint at the ' to ' point angled as if coming from the ' from ' point .", "construct the drag view .", "return an appropriate iterator for items matching the template .", "releases a session back to the pool .", "test sql where parameter for validity", "returns an authenticateduser representing the user authenticated by the given credentials .", "returns a read - only atomiclong configuration for the given name .", "searches through an edge .", "groups by vertex and computes a groupreduce transformation over the neighbors ( both edges and vertices ) of each vertex .", "right shift this mutablebiginteger n bits .", "this adds a property descriptor for the imported feature", "allocates a key within a namespace defined by the kind of the model", "creates and starts a network access point connector based on the specified socket and the specified remote address .", "cast a object to a byte object ( reference type )", "log an app event with the specified name .", "serialize an object including the xstream to a pretty - printed xml string .", "indicates which side effect annotation is present on the given method .", "informs the filter that a receivable service is now inactive .", "resets the member state .", "returns the javax servlet http httpsession object associated with this request", "sets the character to use for escaping a separator or quote .", "add member to class unless it is synthetic", "starts a subpart of this fluent api for configuring scripts", "return the context", "initializes the watchdog from system properties", "true if for this permission force is blocked for the user .", "this method automatically closes a previous element if not already closed .", "an optional while prepended to a labelseq .", "get a stream of the events .", "parses a thread id argument value from the byte stream of the message .", "sets an integer header .", "check for equality of non null references x and y .", "for this person , a role is assigned for the given jaas system .", "cassandra - 5174 : for an index cfs we may be able to discard everything and just rebuild the index when a scrub fails .", "update the pending registrations .", "parses the groovy code contained in codesource and returns a java class .", "asserts that an element is not clickable .", "called when the execution of the queue has been suspended", "save the external user account", "visits an event for removing a range from the property", "returns the text description of the elemet", "a favorite is considered equal when both the emote code and emoteset are equal .", "ensure service access is allowed .", "returns the attachments content if it is plain text", "returns true if this implementation supports synchronization of native slave replication with tungsten position .", "initiate a cpebuilder with a yaml configuration file .", "the code that does the real work of reneweventlease .", "searches the adapter for a position matching msyncrowid .", "finds a type given its fully qualified name", "change the unit1 of response time according to unit2", "set bootstrap lookback , i . e . oldest revision to pull .", "evaluates a single predicate .", "creates a space document of type java . lang . object .", "don t break the chain use rxjava s compose operator", "uninstalls the shadowpopupfactory and restores the original popup factory as the new shared popup factory .", "confirm that acquire and release operations are idempotent .", "creates a new instance of jhyperlink", "get the index separating the user name from domain name ( the user ' s name up to the first ' / ' or ' @ ' ) .", "constructs a new age file filter for files on any one side of a certain file whose last modification time will be used as reference .", "get a map of the table builders in this font builder accessed by table tag .", "invokes the property grid with this element as its target .", "adds all source volumes ' full copies to the consistency group", "traverses the edit tree to perform the consistency check .", "loads and instantiates the given expressionfactory implementation .", "builds a clusterdeleted waiter by using custom parameters waiterparameters and other parameters defined in the waiters specification , and then polls until it determines whether the resource entered the desired state or not , where polling criteria is bound by either default polling strategy or custom polling strategy .", "allow an object to be persisted instead of just a string", "selects or unselects a list of nodes .", "handles back button press by user .", "configure the device to an ap accessible to internet and make the device activate on server", "append the given boolean", "open if necessary and return a connection to the configured directory server for this realm", "checks if the user clicked on ok", "selects the given row", "this method adds a model change listener", "create a upnp candidate .", "returns true if the group is in the paused state false otherwise .", "adds all the files that matches the given glob in the directory .", "set the key on the object , if there is not a signature on this object then set the algorithm and the key id from the key if they exist on the key and do not exist in the message .", "does the real work of doget ( ) .", "sets projection policy notifychangelisteners is called after execution", "set attribute gain rolloff", "remove feature from room", "evaluate a parenthesis", "show the consumer context menu if a consumer is selected .", "check the input parameter and keep it only if it is valid", "format and log transformer exception using type as the level", "adds a hemispherical section to the current path .", "factory method to initialize console with appropriate mode .", "extracts a map of name / value pairs from the given string .", "concate query string parameters ( e . g . name = foo )", "get the length of the coding sequence", "loads a particular word", "adds inline javascript code to the document", "process the streaminfo block .", "paints the background of a popup menu .", "check if this event as provided to the parent view ' s onintercepttouchevent should cause the parent to intercept the touch event stream .", "re - arrange all triangles for optimal compression .", "the code delivery details list from the server for the request to update user attributes .", "get an iterator over the escapetargets of given basic block .", "removes the \" throws exception \" from the api .", "method to set the enabled state of a child control", "constructs an replicationfilterexception with the specified detail message .", "serializes any char sequence and writes it into specified buffer .", "assert that byte64 encoding is actually supported .", "deserializes the accesscontrollist object", "marshall the given parameter object .", "if type is an array type , returns the type of the component of the array .", "this method creates radio buttons and adds them to radiobuttons and is used when the itemsproperty on the field changes .", "gets all metadata in this entry .", "do a geo search using the address as the query .", "this method will called every second when the clock tick .", "appends the properties from the maven session ( user properties ) to the command line .", "match the given token or throw an exception if no such token can be matched.", "bind the generated plugin canvas registry to the name mapid is picked from pool or auto generated if there s no redundant one .", "saving image in jpeg to file with better quality 90", "number of times this record has been updated", "the doget method of the servlet .", "use doprepare ( ) method instead .", "allocates a new buffer with the specified size and appends it to the previous buffer .", "every test method will need to retrieve vault credentials from environment variables , but we might as well null - check them once rather than do so redundantly in every method .", "clear transient member data .", "begin a new object", "you are not supposed to instantiate this class .", "parse a string representing a dependent parent style and get link to its independent parent style", "registers itself as a notificationlistener for notifications sent from mbean with the objectname given as source .", "sets a watch for a particular source timestamp to be extracted .", "compute the pivot position for the iteration", "adds segments from a source multipath to this multipath .", "updates the site path info .", "loads values from java properties file format .", "class constructor which uses the endofsentencescanner to locate sentence endings", "adds a source container to a ijavaproject .", "the combination of aws regions and / or aws accounts where you want to run the automation .", "filters all objects according to the configured classshutter .", "proposes a structure which can be accepted or rejected by an external entity .", "called by the reading thread as its first step .", "overridden hashcode method - compares on address , city , province , country and postal code .", "creates a tracer for intf .", "the device is compatibility or not", "moves the node to the tail .", "creates a collection of categories with an indexed adjustible name", "put a new undoevent on the backstack , to remember for later in case we need to back up .", "there is no difference between insert and update in this implementation", "notify the coordinator that this site has received the first fragment message", "submit single int .", "constructs a new vector with the specified capacity .", "creates a webclient instance", "sets the bit at the specified index to the specified value", "add by adding the ascii representations", "move player at index to the first index of the list 0", "called when the openmapframe is added to a beancontext , and when other objects are added to the beancontext .", "reset atlasmapper to its initial state", "converts first letter to upper case", "closes the view if it is open", "copies an image to this container registry from the specified container registry .", "returns string representation of this date time with a different time zone , preserving the millisecond instant .", "sets the parent selection", "converts the exception into a well - formated xml error message suitable for external uses .", "creates new jsonhttpresponsehandler with json string encoding utf", "constructs a new fieldaction looking up the name from the messagesbundles .", "called when the user has scrolled to the end of the list", "send a message given sip message .", "saves a non native graph .", "report an error .", "returns an array of the indexes in the given array of values that have the minimum value in the array , or a zero - length array if the supplied array of values is null or zero - length .", "returns a string copy of the input character sequence , with each character that matches this matcher replaced by a given replacement character .", "visits a lookupswitch instruction .", "get the global id of the object with the id .", "performs the post - processing work required after a write .", "create the request optionally passing it through the request transformer .", "the monitoring information .", "finds all elements within the search context using the given mechanism .", "handles the printing of the exceptions information prints the formats that geoserver can return exceptions in", "set the value of imagefile", "executes the test action", "generate a message for loglevel info", "returns the base64 image of the image path given in parameter", "adds an item ( represented by an integer ) to the bloom filter .", "load given project file .", "get the op definition of a given onnx op", "perform an asynchronous join operation", "returns the element with the given index from this combo viewer", "comparing results with facet . method = uif", "appends a byte array to a byte list .", "return the tests included in this test suite .", "creates for all string objects representing http - method - omission elements , a new http - method - omission element", "register an instance of a provider class that is supported by the runtime .", "add method at given position if max recursion depth has not been reached", "adds a data item to this data set", "removes a named index from the specified table .", "creates routing node no limit on how may nodes this node can connect to", "converts a hexadecimal character to an integer .", "factory method to create an union type member .", "rewinds entries go to the first entry in entries list", "you are not supposed to instantiate this class .", "retrieve the gui component base on its name .", "append the supplied connections to the list for the given tab index", "this method will load a journal and count the living records", "details of the returned event subscriptions .", "transfers all characters of a specific tag to the corresponding builder and resets the string buffer .", "simplejsonpathspec gzheaderlengthspec = new simplejsonpathspec ( \" container . gzip - metadata . header - length \" ) ;", "constructs a row key regular expression to pass to hbase if the user gave some tags in the query", "compare this policyinformation with another object for equality", "helper method to connect by url string", "processes a removed node and updates the references list accordingly ."], "label": ["how-it-is-done", "what", "how-it-is-done", "what", "what", "why", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "what", "why", "what", "what", "property", "why", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "property", "property", "what", "what", "why", "what", "what", "property", "how-to-use", "what", "what", "what", "what", "what", "what", "why", "how-it-is-done", "what", "what", "property", "what", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "property", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "how-to-use", "what", "what", "what", "property", "what", "what", "what", "what", "property", "how-to-use", "what", "property", "property", "property", "why", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "how-to-use", "what", "why", "property", "how-it-is-done", "what", "what", "what", "what", "how-to-use", "property", "why", "property", "what", "what", "why", "property", "property", "property", "why", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "others", "how-it-is-done", "what", "why", "how-it-is-done", "why", "how-it-is-done", "what", "what", "property", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "others", "what", "property", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "why", "what", "what", "how-it-is-done", "what", "what", "why", "what", "how-it-is-done", "how-to-use", "what", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "how-to-use", "property", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "why", "what", "what", "what", "what", "what", "what", "why", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "property", "what", "why", "why", "what", "why", "what", "property", "what", "how-it-is-done", "what", "what", "what", "property", "how-it-is-done", "property", "how-it-is-done", "what", "what", "property", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "property", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "property", "why", "how-it-is-done", "what", "what", "how-it-is-done", "why", "property", "what", "why", "why", "what", "how-it-is-done", "what", "what", "property", "property", "what", "what", "what", "property", "what", "how-it-is-done", "why", "how-it-is-done", "what", "what", "why", "what", "why", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "why", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "why", "others", "how-to-use", "how-it-is-done", "how-it-is-done", "how-it-is-done", "property", "what", "property", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "why", "others", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "what", "why", "what", "what", "how-to-use", "property", "what", "what", "what", "property", "what", "property", "how-it-is-done", "what", "why", "property", "what", "what", "how-it-is-done", "what", "what", "why", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "property", "how-it-is-done", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "property", "how-it-is-done", "what", "what", "what", "property", "what", "how-it-is-done", "why", "what", "what", "what", "what", "how-it-is-done", "property", "what", "property", "how-to-use", "what", "what", "what", "what", "what", "why", "why", "what", "how-it-is-done", "property", "why", "why", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "property", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "why", "what", "why", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "others", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-it-is-done", "why", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "why", "how-it-is-done", "how-it-is-done", "what", "what", "what", "why", "what", "property", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "property", "why", "what", "what", "what", "what", "what", "what", "how-it-is-done", "property", "what", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "why", "property", "what", "how-it-is-done", "what", "property", "why", "property", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "property", "how-it-is-done", "why", "what", "property", "how-to-use", "what", "what", "what", "property", "why", "property", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "why", "what", "what", "what", "what", "property", "what", "what", "what", "what", "why", "how-it-is-done", "what", "what", "property", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "property", "how-it-is-done", "how-it-is-done", "how-it-is-done", "property", "what", "why", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "property", "property", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "why", "property", "how-it-is-done", "why", "what", "what", "property", "how-it-is-done", "why", "property", "what", "what", "what", "what", "why", "what", "what", "what", "why", "property", "what", "property", "what", "property", "what", "how-it-is-done", "what", "how-to-use", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "others", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "property", "property", "what", "property", "how-it-is-done", "what", "property", "property", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "how-to-use", "what", "what", "what", "how-it-is-done", "property", "what", "property", "why", "what", "how-it-is-done", "why", "what", "how-it-is-done", "what", "what", "property", "what", "what", "how-it-is-done", "what", "what", "why", "what", "what", "what", "property", "how-to-use", "why", "what", "what", "what", "what", "what", "what", "property", "what", "why", "what", "what", "what", "property", "property", "property", "what", "why", "what", "what", "property", "why", "how-it-is-done", "what", "what", "what", "property", "what", "what", "what", "property", "property", "what", "why", "how-it-is-done", "why", "property", "what", "what", "what", "what", "what", "property", "what", "what", "what", "why", "what", "how-it-is-done", "what", "property", "what", "how-it-is-done", "property", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "how-to-use", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "property", "what", "what", "how-it-is-done", "what", "property", "what", "what", "how-it-is-done", "property", "how-to-use", "what", "what", "why", "what", "what", "why", "why", "others", "what", "what", "what", "property", "what", "why", "what", "how-it-is-done", "what", "what", "what", "what", "property", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "property", "what", "what", "what", "property", "how-it-is-done", "what", "why", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "how-to-use", "how-to-use", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "what", "how-to-use", "why", "what", "what", "what", "property", "what", "what", "why", "what", "why", "how-to-use", "what", "what", "why", "what", "others", "what", "what", "what", "property", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "others", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "property", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "property", "what", "why", "how-it-is-done", "what", "why", "what", "what", "what", "what", "how-it-is-done", "property", "property", "what", "how-it-is-done", "why", "how-it-is-done", "what", "property", "why", "property", "what", "how-it-is-done", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "why", "why", "why", "what", "what", "what", "how-to-use", "property", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "why", "what", "what", "why", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "property", "why", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "property", "what", "how-it-is-done", "what", "why", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "property", "what", "why", "how-it-is-done", "what", "why", "property", "how-it-is-done", "what", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "property", "what", "what", "how-it-is-done", "what", "how-it-is-done", "property", "property", "why", "how-to-use", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "why", "how-it-is-done", "why", "how-it-is-done", "what", "what", "property", "what", "what", "property", "what", "what", "what", "what", "property", "how-it-is-done", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "property", "property", "what", "what", "what", "what", "property", "property", "what", "how-it-is-done", "what", "why", "what", "what", "what", "property", "what", "what", "what", "property", "why", "property", "what", "how-it-is-done", "why", "what", "what", "why", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "property", "what", "what", "what", "what", "property", "how-it-is-done", "what", "how-to-use", "property", "how-to-use", "what", "property", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "why", "how-to-use", "how-it-is-done", "what", "why", "what", "what", "what", "what", "what", "how-it-is-done", "how-to-use", "how-it-is-done", "what", "what", "what", "what", "why", "property", "what", "what", "how-it-is-done", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "what", "property", "what", "what", "what", "others", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "property", "property", "what", "how-to-use", "what", "what", "why", "what", "property", "why", "what", "what", "what", "what", "what", "what", "what", "why", "what", "property", "how-it-is-done", "how-it-is-done", "how-it-is-done", "property", "what", "why", "property", "how-it-is-done", "property", "what", "what", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "property", "what", "property", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "why", "what", "property", "others", "how-it-is-done", "what", "what", "property", "property", "what", "property", "what", "why", "others", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "property", "how-it-is-done", "why", "why", "why", "what", "why", "what", "how-it-is-done", "how-it-is-done", "what", "what", "why", "others", "what", "how-it-is-done", "what", "property", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "why", "what", "how-it-is-done", "how-it-is-done", "property", "what", "what", "how-it-is-done", "what", "what", "what", "how-to-use", "why", "what", "why", "what", "what", "property", "what", "what", "property", "what", "what", "what", "why", "property", "property", "why", "how-it-is-done", "what", "why", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "property", "what", "what", "how-it-is-done", "why", "what", "what", "what", "what", "how-it-is-done", "how-to-use", "property", "how-it-is-done", "what", "what", "property", "property", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "how-it-is-done", "what", "why", "what", "what", "what", "what", "how-it-is-done", "how-to-use", "property", "what", "what", "what", "what", "what", "what", "why", "why", "what", "what", "others", "what", "how-it-is-done", "what", "what", "why", "what", "property", "what", "why", "what", "what", "how-it-is-done", "why", "others", "what", "what", "how-it-is-done", "how-it-is-done", "what", "why", "what", "what", "how-it-is-done", "how-it-is-done", "what", "why", "what", "how-to-use", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "why", "what", "property", "how-it-is-done", "what", "why", "what", "property", "what", "what", "why", "what", "what", "how-it-is-done", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "property", "how-it-is-done", "what", "what", "property", "what", "others", "what", "what", "what", "how-to-use", "why", "how-it-is-done", "what", "what", "what", "what", "what", "how-to-use", "what", "how-it-is-done", "what", "property", "what", "how-it-is-done", "why", "what", "property", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "why", "property", "why", "property", "what", "how-it-is-done", "what", "what", "property", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "why", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "property", "what", "what", "property", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-to-use", "property", "property", "what", "what", "what", "what", "others", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "why", "why", "property", "what", "what", "why", "property", "what", "what", "property", "property", "what", "what", "why", "what", "what", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-to-use", "how-it-is-done", "what", "why", "what", "why", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "property", "what", "why", "property", "property", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "property", "what", "why", "how-it-is-done", "how-to-use", "what", "what", "what", "what", "why", "how-it-is-done", "what", "property", "what", "how-to-use", "what", "why", "property", "how-it-is-done", "what", "property", "property", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "how-to-use", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "why", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "how-to-use", "what", "property", "how-it-is-done", "what", "what", "what", "why", "how-it-is-done", "why", "what", "what", "others", "how-it-is-done", "why", "why", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-to-use", "how-it-is-done", "why", "what", "what", "what", "why", "why", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "how-to-use", "what", "how-it-is-done", "what", "what", "property", "what", "why", "what", "how-it-is-done", "how-to-use", "what", "what", "what", "property", "property", "what", "what", "why", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "property", "what", "how-it-is-done", "property", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "why", "what", "how-to-use", "what", "why", "how-it-is-done", "what", "how-it-is-done", "others", "why", "why", "how-it-is-done", "what"]}