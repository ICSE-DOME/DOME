{"id": [14051, 9272, 2730, 7310, 10765, 16365, 18215, 12385, 9262, 4452, 7764, 16219, 16989, 10700, 3073, 18688, 17201, 13343, 15151, 8993, 14945, 14028, 7362, 15380, 7345, 15977, 3419, 9453, 9165, 19747, 11069, 8668, 1598, 3628, 126, 10259, 7663, 6448, 4488, 12088, 2702, 19345, 915, 11263, 16214, 9057, 6504, 18592, 13309, 10066, 14923, 4640, 19443, 19961, 19757, 6402, 0, 11028, 4706, 16508, 16651, 6920, 14335, 18104, 10499, 7847, 6339, 18322, 7166, 722, 11336, 19164, 8379, 11917, 13189, 17443, 18611, 18508, 9509, 2072, 18132, 7164, 6211, 5135, 5991, 8029, 14084, 10861, 15825, 4313, 5303, 18762, 6051, 15237, 16006, 6599, 12470, 4678, 4757, 18308, 17405, 11659, 15881, 16694, 1589, 14059, 18930, 3729, 13010, 5543, 1946, 6919, 630, 17582, 2165, 7101, 13967, 4461, 17790, 3237, 18595, 13297, 10487, 17206, 11525, 11337, 13875, 4024, 8748, 15232, 9896, 17589, 7473, 3246, 15432, 14951, 2611, 12480, 12190, 4161, 11105, 19120, 5112, 2587, 9136, 15043, 4397, 7236, 6238, 8764, 17896, 7891, 2183, 7271, 1792, 8356, 16289, 12194, 1017, 2242, 19492, 8192, 17925, 15813, 10098, 1107, 3000, 1706, 9058, 18677, 6080, 6897, 1698, 3065, 17540, 19866, 16530, 11474, 8931, 8457, 5958, 13073, 6478, 19135, 10974, 17459, 16359, 18660, 13182, 4843, 3509, 13668, 804, 17347, 6709, 11509, 1766, 15830, 13024, 16148, 3782, 7977, 10675, 13271, 2319, 14220, 16486, 14708, 16081, 14673, 7970, 13307, 11452, 13229, 11041, 12800, 17196, 11493, 15514, 3675, 14076, 15776, 4826, 19317, 8621, 4696, 13178, 6072, 18181, 8805, 5225, 244, 1333, 12181, 15264, 578, 446, 3566, 14073, 12412, 10039, 19589, 10823, 4952, 15377, 16003, 8628, 3809, 3949, 15373, 5901, 19889, 4182, 7054, 16590, 11858, 6493, 7139, 13840, 8955, 11906, 6777, 18851, 2966, 7567, 17571, 10814, 16867, 3814, 5435, 12384, 10875, 7110, 2459, 11051, 8552, 1028, 3772, 8327, 18689, 7186, 204, 16410, 6539, 1879, 986, 6373, 11851, 19400, 9900, 11814, 1081, 17519, 8516, 8694, 172, 15071, 17172, 9506, 12013, 15750, 575, 6307, 15795, 7658, 619, 15166, 7269, 17409, 9008, 15307, 6889, 13282, 17367, 19681, 9248, 14683, 1275, 12972, 989, 4863, 16673, 4546, 7212, 19611, 5333, 766, 7895, 1449, 16713, 13956, 16637, 2567, 12329, 15049, 16379, 3741, 3884, 866, 14750, 2750, 17831, 6405, 52, 10672, 6055, 16342, 329, 5498, 16450, 9568, 14251, 435, 7048, 908, 18551, 13080, 13238, 10074, 14898, 7178, 1285, 7460, 13653, 6728, 12776, 13669, 6667, 2711, 13452, 16151, 11169, 2276, 5110, 14789, 12540, 16562, 7097, 3946, 8859, 16249, 18398, 102, 18092, 12716, 4464, 15905, 7171, 9565, 4535, 7358, 2049, 9934, 5289, 548, 288, 4144, 6952, 10057, 10889, 12217, 10586, 14617, 6702, 15263, 17320, 5966, 5015, 14549, 919, 15551, 3404, 12703, 6984, 12594, 19953, 5559, 1244, 17810, 10642, 19404, 1010, 4360, 7947, 15999, 4762, 5160, 2810, 11935, 8956, 9908, 8551, 18765, 4027, 11037, 18630, 3428, 15490, 9101, 18438, 16328, 18404, 17444, 9945, 15052, 18376, 15600, 17338, 15058, 19170, 15486, 11992, 14452, 1166, 10721, 16685, 18756, 12754, 5649, 2350, 239, 11335, 7092, 17833, 6208, 6410, 15013, 10386, 3002, 14661, 5620, 13177, 18101, 7435, 7547, 14320, 7226, 8091, 6408, 15228, 17807, 10255, 17230, 15683, 1968, 12978, 10234, 1699, 5804, 5162, 12810, 12615, 9947, 2556, 6893, 19774, 18663, 10433, 9432, 13200, 15902, 10283, 15682, 11892, 12539, 18270, 16049, 8334, 11294, 18341, 3688, 2665, 14605, 14223, 13397, 616, 19138, 916, 13277, 6421, 5551, 15869, 15284, 15936, 5780, 7266, 8921, 13814, 166, 11191, 7912, 10415, 4235, 6942, 19802, 8571, 18628, 13562, 6637, 2477, 6654, 5702, 3326, 1634, 193, 7440, 19671, 4788, 17326, 19278, 18354, 8271, 2283, 174, 13664, 12659, 226, 9411, 15187, 10425, 5238, 2722, 12435, 455, 3320, 7708, 11503, 12624, 6319, 1096, 14796, 13689, 10080, 19251, 9448, 8949, 1340, 17550, 5297, 19298, 8808, 8418, 12006, 15828, 9931, 9070, 10519, 8529, 16221, 10257, 19590, 13403, 5259, 10785, 5932, 4230, 12908, 17520, 5357, 15224, 10626, 9044, 734, 19300, 4041, 16093, 7534, 6659, 7013, 12734, 6811, 6779, 1935, 13336, 18479, 19063, 11602, 16908, 2608, 8470, 1572, 6233, 19408, 3348, 7314, 5846, 11838, 10185, 2712, 15582, 18889, 1143, 8106, 9383, 17490, 16159, 7796, 18868, 19524, 13440, 12765, 15002, 8101, 11913, 12561, 16952, 4098, 8573, 12488, 14937, 18150, 16376, 9446, 5680, 16474, 1896, 17026, 14814, 18281, 9609, 11839, 3383, 1200, 12644, 12268, 7872, 667, 963, 9389, 18796, 19497, 2174, 15762, 11997, 18763, 3196, 14980, 8649, 4012, 18050, 6559, 8316, 13675, 4634, 13783, 8707, 6792, 4279, 13112, 18972, 10736, 4457, 1489, 17880, 10956, 18687, 18894, 16211, 3978, 14568, 15842, 10976, 15521, 13923, 14717, 3300, 15009, 19637, 10133, 14508, 5037, 8401, 10402, 14751, 5772, 1460, 18467, 19905, 3677, 3881, 632, 5423, 8010, 4047, 13820, 6949, 7331, 11615, 5388, 835, 9891, 5882, 813, 9838, 4521, 7743, 11248, 7383, 3310, 18346, 15159, 2007, 16271, 14853, 7231, 7406, 5455, 6859, 8492, 10649, 3817, 6104, 8043, 14088, 9172, 5629, 8205, 3858, 18943, 6563, 6816, 19972, 8004, 18742, 11070, 19256, 15233, 18262, 10217, 16949, 2235, 541, 14487, 1245, 5270, 33, 17630, 17391, 11215, 460, 14881, 17197, 9963, 6749, 7371, 7422, 5614, 4779, 13324, 1101, 14456, 10972, 8538, 13161, 6752, 7751, 7420, 11259, 7400, 698, 3945, 11729, 17924, 8784, 17543, 15843, 3778, 3481, 1395, 19981, 11536, 24, 13992, 6808, 4545, 42, 19886, 15401, 13731, 56, 18735, 10905, 3929, 19597, 18113, 9264, 8155, 4780, 4795, 8890, 7066, 18248, 9361, 7195, 5619, 9233, 15826, 19082, 11551, 3515, 3471, 14729, 7523, 641, 3853, 1388, 2314, 4524, 19518, 3937, 11789, 17611, 2835, 8110, 6052, 12601, 15945, 15229, 16761, 6581, 13040, 4030, 262, 12002, 16270, 11816, 6418, 6804, 7214, 18225, 16819, 13596, 3793, 13724, 8202, 7114, 18935, 783, 11320, 3600, 5314, 5421, 1273, 18969, 15468, 16997, 3168, 10628, 988, 6323, 4367, 10095, 5104, 1884, 9457, 11576, 15767, 2768, 17723, 15576, 15621, 17770, 8761, 17215, 5783, 10604, 17605, 9253, 9664, 9948, 344, 12653, 7374, 12676, 15677, 6939, 16741, 6237, 759, 11637, 12618, 5163, 11655, 12733, 11402, 11414, 19149, 2514, 16531, 13592, 13522, 18577, 11239, 2107, 18292, 612, 10659, 10633, 3226, 11374, 5475, 2820, 9132, 16479, 14354, 5039, 13569, 5261, 15712, 17318, 714, 12266, 182, 17247, 15010, 18949, 15169, 12970, 3927, 10130, 17250, 10733, 9869, 19009, 6522, 9368, 1963, 13647, 18815, 3808, 18731, 8891, 8402, 16787, 15016, 9643, 8262, 17635, 9742, 17085, 7607, 15245, 15026, 15617, 18967, 12814, 16875, 12074, 2055, 3172, 12784, 9106, 7169, 10190, 17366, 9110, 555, 792, 2010, 17613, 3934, 9490, 3445, 10825, 10476, 1765, 16175, 7419, 370, 9071, 10488, 16758, 2016, 4429, 9061, 4065, 4806, 13400, 12940, 18315, 19626, 483, 14658, 12849, 5338, 10316, 17043, 19956, 6708, 13896, 14116, 271, 16784, 901, 2192, 10758, 6507, 11823, 18165, 3043, 9631, 8351, 16692, 14847, 16427, 16183, 9766, 5706, 19412, 18766, 6396, 8937, 14547, 1312, 2675, 6847, 16797, 14262, 18873, 16100, 18189, 16358, 6126, 13855, 12117, 19024, 4317, 2884, 3897, 1476, 4156, 17850, 7675, 18460, 9381, 671, 13395, 3479, 2526, 18381, 18744, 12308, 1728, 19181, 16085, 5689, 15147, 1231, 5803, 18029, 1499, 326, 9844, 14388, 3454, 18559, 4295, 9486, 17372, 820, 17545, 4631, 11638, 14667, 19105, 7193, 2448, 12603, 17618, 9572, 11002, 13861, 4287, 1650, 379, 7190, 12707, 8389, 18082, 4455, 17209, 1433, 2843, 12856, 13349, 9878, 3610, 2368, 19529, 7481, 3488, 13843, 8581, 5072, 2002, 905, 753, 13978, 18096, 6809, 17773, 388, 6932, 5006, 5024, 14214, 11747, 6768, 12747, 15560, 2963, 2805, 9038, 9007, 13718, 13378, 7746, 9978, 957, 8584, 2244, 13520, 10015, 19699, 5671, 7517, 15926, 8838, 5474, 9688, 620, 9095, 17864, 13338, 4666, 15782, 7389, 19189, 13649, 11488, 4857, 7344, 16586, 14129, 2974, 9133, 1358, 2921, 3148, 3156, 700, 13571, 5191, 19116, 19067, 6996, 68, 17407, 8016, 13759, 16851, 10877, 7377, 14505, 13423, 17175, 11256, 19523, 8244, 14272, 13819, 1248, 9877, 12552, 17290, 12279, 19420, 10025, 12060, 18090, 9933, 12886, 10069, 15051, 14310, 11341, 1250, 10275, 1875, 10606, 535, 8806, 9398, 10939, 12781, 13453, 9840, 8600, 7023, 10243, 19102, 7216, 6937, 8651, 5817, 5100, 19295, 16343, 12664, 8506, 5503, 2106, 17341, 19468, 3834, 8335, 9653, 4034, 1861, 11300, 12225, 5948, 1303, 19148, 2756, 3338, 4310, 18361, 2863, 11846, 14966, 9886, 8795, 19599, 17806, 11561, 2456, 8543, 19842, 12423, 9493, 15564, 2787, 13525, 13994, 15335, 17158, 10657, 4299, 16194, 19370, 7897, 4726, 8077, 2652, 17622, 2205, 894, 5641, 15004, 10669, 10862, 15806, 3282, 14315, 10037, 5861, 5336, 4771, 5494, 10635, 13379, 3819, 7807, 2091, 1695, 16850, 3743, 18720, 9519, 11094, 16256, 13676, 8519, 19391, 1276, 6127, 15498, 14011, 6123, 9179, 354, 11905, 15396, 10161, 495, 13228, 14525, 17350, 9072, 655, 16477, 10127, 3851, 5714, 8049, 10688, 683, 17451, 11011, 16572, 440, 13442, 17016, 5566, 8163, 4968, 10276, 19964, 19766, 5878, 2110, 10200, 7093, 7011, 17380, 15030, 19001, 11005, 8304, 3285, 553, 11190, 14370, 7010, 8082, 1442, 4020, 9798, 7536, 316, 10008, 10385, 16114, 9800, 14953, 3261, 8030, 18770, 7249, 3174, 892, 17030, 5815, 10779, 14931, 1383, 12490, 5520, 4164, 17150, 16368, 6825, 9985, 16564, 13241, 2228, 8970, 15123, 14082, 18208, 17091, 16174, 10694, 11029, 559, 11751, 15587, 13398, 5822, 10277, 1628, 5979, 725, 1007, 504, 15859, 10742, 10732, 7237, 18402, 19632, 10550, 8533, 9603, 13192, 19347, 4691, 7052, 12613, 19084, 9018, 14592, 3532, 5290, 4416, 11008, 16091, 6121, 1287, 8894, 183, 883, 7108, 12579, 3265, 43, 10102, 7049, 6001, 8967, 18071, 2083, 14428, 3384, 13261, 10851, 10023, 19346, 8726, 14603, 8816, 5574, 14779, 1854, 8587, 5447, 5981, 11652, 14674, 281, 4104, 11937, 14158, 11099, 12999, 18432, 6775, 11754, 13837, 6828, 16290, 13501, 15557, 1283, 2560, 7438, 14792, 7922, 10926, 8844, 2159, 18655, 11004, 1400, 6732, 7863, 10464, 3746, 6254, 13190, 6117, 7591, 118, 11653, 13988, 3965, 187, 13052, 15441, 6084, 18777, 11988, 19053, 17653, 12925, 3908, 5547, 6746, 14743, 16337, 9254, 116, 8534, 569, 13622, 14147, 6235, 4999, 19606, 1208, 392, 15155, 798, 15165, 429, 13044, 4162, 14189, 5985, 13257, 2138, 15101, 2599, 18556, 13328, 8640, 11742, 13651, 19721, 17703, 2201, 19844, 3959, 13097, 17918, 9791, 2585, 11792, 10071, 11003, 6181, 19509, 12721, 4698, 19925, 11060, 18514, 10394, 1748, 2537, 1491, 13394, 5534, 7243, 269, 6826, 6885, 1205, 10494, 9799, 18154, 11635, 9515, 5038, 1136, 13937, 14803, 10019, 15814, 6528, 13588, 8575, 18509, 4240, 2764, 7098, 1050, 816, 7475, 17440, 10393, 15982, 9555, 4590, 427, 10469, 2147, 9794, 12731, 5060, 2114, 3512, 16058, 18746, 735, 6315, 8414, 4937, 15424, 5033, 7316, 15868, 2990, 19101, 15062, 4647, 8180, 1282, 19487, 777, 9560, 3845, 10513, 17546, 19999, 2373, 4214, 11815, 17488, 7592, 17780, 2897, 6918, 15290, 15591, 4372, 6032, 14377, 9997, 11630, 15744, 13446, 11931, 19694, 6935, 18504, 18474, 2445, 17446, 12121, 6636, 6831, 3924, 9758, 5458, 5069, 6740, 13262, 4947, 2696, 19836, 6981, 4303, 15336, 13725, 4617, 7671, 19933, 16807, 492, 19840, 5134, 3200, 18682, 17752, 18303, 19353, 18213, 8419, 14333, 5837, 333, 12087, 17427, 16580, 7580, 13865, 13133, 10480, 5087, 3319, 9562, 13352, 19262, 6977, 5711, 10554, 3576, 15513, 17522, 17118, 18452, 499, 1843, 8903, 3821, 7423, 8804, 10241, 13392, 14026, 9778, 13932, 10110, 13007, 15710, 10592, 14827, 821, 7136, 8680, 12574, 4015, 14408, 8200, 16529, 2270, 3745, 14761, 11546, 4384, 6098, 19143, 5329, 7816, 1987, 19151, 1790, 661, 19248, 10853, 14245, 18828, 10836, 17484, 4667, 5125, 13300, 141, 9552, 17742, 16404, 18163, 12633, 12789, 15748, 4489, 1057, 19582, 13707, 81, 10924, 8114, 659, 13941, 17821, 7542, 1467, 8429, 34, 19690, 13737, 4892, 11278, 14033, 13838, 14950, 16360, 1023, 5384, 11950, 15562, 871, 11129, 2040, 12553, 7415, 3064, 4608, 2631, 17056, 11761, 19301, 2988, 16567, 17712, 14780, 3767, 8340, 1021, 3027, 17954, 458, 18400, 6214, 5486, 14910, 3178, 7882, 19361, 1022, 6356, 1313, 4890, 19883, 3707, 1059, 4319, 14785, 3112, 14889, 12478, 9100, 898, 15606, 12588, 17647, 19630, 19697, 17050, 10445, 16754, 5701, 19205, 14864, 7566, 14905, 7069, 1255, 7397, 7282, 6360, 7561, 4132, 7256, 13427, 13780, 5709, 17119, 9924, 19810, 2814, 933, 16232, 3465, 19660, 16208, 72, 14845, 1073, 8273, 6187, 4179, 12864, 18619, 18351, 13919, 13831, 5939, 2144, 15406, 13876, 16224, 14774, 10984, 3680, 10631, 2457, 9998, 12102, 14670, 19716, 9762, 19619, 11650, 6109, 10154, 5184, 15355, 7814, 10325, 10791, 16150, 4423, 2145, 5542, 1930, 15134, 19384, 12237, 15153, 5871, 19853, 10594, 5396, 13802, 974, 1167, 19327, 13459, 10361, 12223, 12300, 7883, 15186, 11151, 18268, 4083, 4380, 14212, 19299, 19268, 15524, 11711, 3608, 3800, 11762, 11464, 7014, 4113, 7280, 1361, 17240, 7086, 502, 9988, 3116, 7396, 11908, 13754, 15616, 19382, 14022, 11910, 1265, 10879, 4363, 17282, 10254, 19057, 2790, 19235, 9871, 9907, 1429, 5304, 14703, 4220, 8166, 7835, 16384, 14425, 11195, 5321, 351, 11001, 10182, 19066, 12504, 11492, 15962], "code": ["  private void markAsSkipped(long songid) {\n    _lastplayed.markLastSongAsSkipped();\n    getMusiController().saveSongEvent(songid, Event.skipped, _user.getId());\n    _songselector.addBandSkip(_currentSong.getBand().getId());\n    for (Keyword kw : _current", "    public void binary() throws IOException {\n        // possible responses 200, 500, 501, 504, 421 and 530\n        type(FtpConstants.BINARY);\n    }\n", "protected synchronized long popFirstAvailableHole(final int iRecordSize) throws IOException {\r\n    if (maxHoleSize > -1 && iRecordSize + ODataLocal.RECORD_FIX_SIZE + 50 > maxHoleSize)\r\n      // DON'T BROWSE: NO ONE HOLE WITH THIS SIZE IS AVAILABLE\r\n      return -1;\r\n\r\n    final long timer = OProfiler.getInstance().startChrono();\r\n\r\n    if (!availableHolesBySize.isEmpty()) {\r\n      cursor.size = iRecordSize;\r\n\r\n      // SEARCH THE HOLE WITH THE SAME SIZE\r\n      ODataHoleInfo hole = availableHolesBySize.get(cursor);\r\n      if (hole != null && hole.size == iRecordSize) {\r\n        // PERFECT MATCH: DELETE THE HOLE\r\n        OProfiler.getInstance().stopChrono(PROFILER_DATA_RECYCLED_COMPLETE, timer);\r\n        final long pos = hole.dataOffset;\r\n        deleteHole(hole.holeOffset);\r\n        return pos;\r\n      }\r\n\r\n      // TRY WITH THE BIGGEST HOLE\r\n      hole = availableHolesBySize.lastKey();\r\n      if (hole.size > iRecordSize + ODataLocal.RECORD_FIX_SIZE + 50) {\r\n        // GOOD MATCH SINCE THE HOLE IS BIG ENOUGH ALSO FOR ANOTHER RECORD: UPDATE THE HOLE WITH THE DIFFERENCE\r\n        final long pos = hole.dataOffset;\r\n        OProfiler.getInstance().stopChrono(PROFILER_DATA_RECYCLED_PARTIAL, timer);\r\n        updateHole(hole, hole.dataOffset + iRecordSize, hole.size - iRecordSize);\r\n        return pos;\r\n      }\r\n    }\r\n\r\n    OProfiler.getInstance().stopChrono(PROFILER_DATA_RECYCLED_NOTFOUND, timer);\r\n\r\n    return -1;\r\n  }", "public void marshall(DescribeEnvironmentStatusRequest describeEnvironmentStatusRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (describeEnvironmentStatusRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(describeEnvironmentStatusRequest.getEnvironmentId(), ENVIRONMENTID_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "    final public void put(final byte[] b, final int off, final int len) {\n\n        put(this.pos/*pos*/, b, off, len);\n        \n        this.pos += len;\n        \n        this.limit = this.pos;\n        \n    }\n", "public static String parseResourceAsSQLFile ( final InputStream resource ) throws IOException { return parseSQLFile ( new BufferedReader ( new InputStreamReader ( resource ) ) ) ; }", "public ChannelEvent ( Channel channel , Event event ) { mChannel = channel ; mEvent = event ; }", "public static boolean getBoolean(@NonNull final Context context,\n                                     @StyleRes final int themeResourceId,\n                                     @AttrRes final int resourceId) {\n        TypedArray typedArray = null;\n\n        try {\n            typedArray = obtainStyledAttributes(context, themeResourceId, resourceId);\n            return typedArray.getBoolean(0, false);\n        } finally {\n            if (typedArray != null) {\n                typedArray.recycle();\n            }\n        }\n    }", "@Override public Explanation explain(LeafReaderContext context,int doc) throws IOException {\n  boolean match=false;\n  float max=Float.NEGATIVE_INFINITY, sum=0.0f;\n  List<Explanation> subs=new ArrayList<>();\n  for (  Weight wt : weights) {\n    Explanation e=wt.explain(context,doc);\n    if (e.isMatch()) {\n      match=true;\n      subs.add(e);\n      sum+=e.getValue();\n      max=Math.max(max,e.getValue());\n    }\n  }\n  if (match) {\n    final float score=max + (sum - max) * tieBreakerMultiplier;\n    final String desc=tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\";\n    return Explanation.match(score,desc,subs);\n  }\n else {\n    return Explanation.noMatch(\"No matching clause\");\n  }\n}\n", "public IConceptMap<IConceptSet> getNewSubsumptions() {\n        IConceptMap<IConceptSet> res = new DenseConceptMap<IConceptSet>(\n                newContexts.size());\n        // Collect subsumptions from new contexts\n        for (Context ctx : newContexts) {\n            res.put(ctx.getConcept(), ctx.getS());\n        }\n        return res;\n    }", "    public Document translatePattern( TriplePattern pattern, DIGAdapter da ) {\n        DIGConnection dc = da.getConnection();\n        Document query = dc.createDigVerb( DIGProfile.ASKS, da.getProfile() );\n        \n        Element instances = da.createQueryElement( query, DIGProfile.INSTANCES );\n        da.addClassDescription( instances, pattern.getObject() );\n        \n        return query;\n    }\n", "public static boolean isClassAvilableInClassPath ( String string ) { try { Class . forName ( string ) ; return BOOL_ ; } catch ( ClassNotFoundException e ) { return BOOL_ ; } }", "public static IPackageFragmentRoot addSourceContainer ( IJavaProject jproject , String containerName , IPath [ ] inclusionFilters , IPath [ ] exclusionFilters ) throws CoreException { return addSourceContainer ( jproject , containerName , inclusionFilters", "public SwaptionDataLattice append(SwaptionDataLattice other, AnalyticModel model) {\r\n\r\n\t\tSwaptionDataLattice combined = new SwaptionDataLattice(referenceDate, quotingConvention, displacement,\r\n\t\t\t\tforwardCurveName, discountCurveName, floatMetaSchedule, fixMetaSchedule);\r\n\t\tcombined.entryMap.putAll(entryMap);\r\n\r\n\t\tif(quotingConvention == other.quotingConvention && displacement == other.displacement) {\r\n\t\t\tcombined.entryMap.putAll(other.entryMap);\r\n\t\t} else {\r\n\t\t\tSwaptionDataLattice converted = other.convertLattice(quotingConvention, displacement, model);\r\n\t\t\tcombined.entryMap.putAll(converted.entryMap);\r\n\t\t}\r\n\r\n\t\treturn combined;\r\n\t}", "public static Optional<String> trimEnd(final String input) {\n        return Optional.ofNullable(input).filter(v -> !v.isEmpty()).map(Strman::rightTrim);\n    }", "public void removeListener ( final IGraphSearchFieldListener listener ) { m_listenerProvider . removeListener ( listener ) ; }", "public NotAuthenticatedException ( String message ) { super ( message ) ; }", "    public boolean containsAll(short[] array) {\n      for (int i = array.length; i-- > 0;) {\n            if (! contains(array[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "public static SpaceIndex createCompoundIndex ( String [ ] paths , SpaceIndexType indexType , String indexName , boolean unique ) { return createCompoundIndex_Impl ( paths , indexType , indexName , unique ) ; }", "\tpublic int compare(Object o1, Object o2) {\n\t\tint retVal = 0;\n\t\tSkill s1 = (Skill) ((Map) o1).get(skillTypeID);\n\t\tSkill s2 = (Skill) ((Map) o2).get(skillTypeID);\n\n\t\tif((s1 == null) && (s2 != null)) {\n\t\t\tretVal = Integer.MIN_VALUE;\n\t\t} else if((s1 != null) && (s2 == null)) {\n\t\t\tretVal = Integer.MAX_VALUE;\n\t\t} else if((s1 == null) && (s2 == null)) {\n\t\t\tif(subCmp != null) {\n\t\t\t\tretVal = subCmp.compare(o1, o2);\n\t\t\t}\n\t\t} else {\n\t\t\tretVal = skillCmp.compare(s1, s2);\n\n\t\t\tif((retVal == 0) && (subCmp != null)) {\n\t\t\t\tretVal = subCmp.compare(o1, o2);\n\t\t\t}\n\t\t}\n\n\t\treturn retVal;\n\t}\n", "public static boolean[] insertAt(boolean[] dest,boolean[] src,int offset){\n  boolean[] temp=new boolean[dest.length + src.length - 1];\n  System.arraycopy(dest,0,temp,0,offset);\n  System.arraycopy(src,0,temp,offset,src.length);\n  System.arraycopy(dest,offs", "public int getNameIndex(CharSequence name)\n    {\n        for (ConstantInfo ci : listConstantInfo(Utf8.class))\n        {\n            Utf8 utf8 = (Utf8) ci;\n            String str = utf8.getString();\n            if (str.contentEquals(name))\n            {\n  ", "public FaunusPipeline _() {\n        this.state.assertNotLocked();\n        this.compiler.addMap(IdentityMap.Map.class,\n                NullWritable.class,\n                FaunusVertex.class,\n                IdentityMap.createConfiguration());\n        makeMapReduceString(IdentityMap.class);\n        return this;\n    }", "boolean hasData ( BigInteger offset , int size ) ;", "protected void processPackage(Engine engine, Dependency dependency, JsonArray jsonArray, String depType) {\n        final JsonObjectBuilder builder = Json.createObjectBuilder();\n        jsonArray.getValuesAs(JsonString.class).forEach((str) -> {\n            builder.add(str.toString(), \"\");\n        }", "public void quickSort ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , hi - NUM_ ) ; }", "public static base_responses update(nitro_service client, vrid resources[]) throws Exception {\n\t\tbase_responses result = null;\n\t\tif (resources != null && resources.length > 0) {\n\t\t\tvrid updateresources[] = new vrid[resources.length];\n\t\t\tfor (int i=0;i<resources.length;i++){\n\t\t\t\tupdateresources[i] = new vrid();\n\t\t\t\tupdateresources[i].id = resources[i].id;\n\t\t\t\tupdateresources[i].priority = resources[i].priority;\n\t\t\t\tupdateresources[i].preemption = resources[i].preemption;\n\t\t\t\tupdateresources[i].sharing = resources[i].sharing;\n\t\t\t\tupdateresources[i].tracking = resources[i].tracking;\n\t\t\t}\n\t\t\tresult = update_bulk_request(client, updateresources);\n\t\t}\n\t\treturn result;\n\t}", "  public void createTab(Dockable base, Dockable dockable, int order){\n    createTab(base, dockable, order, false);\n  }\n", "public ServerSocket createServerSocket(int port) throws IOException {\n  return initialFactory.createServerSocket(port);\n}\n", "public boolean greaterOrEquals ( PlatformLogicalVersion otherVersion ) { return ! lessThan ( otherVersion ) ; }", "private TagList createTagList(ObjectName name) {\n    Map<String, String> props = name.getKeyPropertyList();\n    SmallTagMap.Builder tagsBuilder = SmallTagMap.builder();\n    for (Map.Entry<String, String> e : props.entrySet()) {\n      String key = PROP_KEY_PREFIX + \".\" + e.getKey();\n      tagsBuilder.add(Tags.newTag(key, e.getValue()));\n    }\n    tagsBuilder.add(Tags.newTag(DOMAIN_KEY, name.getDomain()));\n    tagsBuilder.add(CLASS_TAG);\n    if (defaultTags != null) {\n      defaultTags.forEach(tagsBuilder::add);\n    }\n    return new BasicTagList(tagsBuilder.result());\n  }", "public static void main(String... args) throws Exception {\n  Class.forName(\"org.h2.Driver\");\n  DeleteDbFiles.execute(\"~\",\"test\",true);\n  String url=\"jdbc:h2:~/test\";\n  initialInsert(url,200000);\n  for (int i=0; i < 3; i++) {\n    createAsSelect(url,true);\n    createAsSelect(url,false);\n  }\n}\n", "    public boolean isOnBorder(PointDouble values) {\n      return isOnBorder(getLocation(values));\n    }\n", "public boolean isDefault(SqlLineProperty property) {\n    final String defaultValue = String.valueOf(property.defaultValue());\n    final String currentValue = get(property);\n    return String.valueOf((Object) null).equals(currentValue)\n        || Objects.equals(currentValue, defaultValue);\n  }", "@Override\n    public ReaderT<W,T,R> peek(final Consumer<? super R> peek) {\n        return of(run.peek(reader -> reader.mapFn(a -> {\n            peek.accept(a);\n            return a;\n        })));\n    }", "private void parseApplication(Node node){\n  String appId=null;\n  String name=null;\n  String appRef=null;\n  Node childnode=node.getFirstChild();\n  if (childnode != null) {\n    do {\n      if (appId == null) {\n        if ((appId=getValueByParamName(\"AppID\",childnode,TYPE_TXT)) != null) {\n          continue;\n        }\n      }\n      if (name == null) {\n        if ((name=getValueByParamName(\"Name\",childnode,TYPE_TXT)) != null) {\n          continue;\n        }\n      }\n      if (appRef == null) {\n        if ((appRef=getValueByParamName(\"AppRef\",childnode,TYPE_TXT)) != null) {\n        }\n      }\n    }\n while ((childnode=childnode.getNextSibling()) != null);\n  }\n  if (appRef != null && (appRef.equalsIgnoreCase(\"IMS-Settings\") || appRef.equalsIgnoreCase(\"ims-rcse\"))) {\n    parseIMS(node);\n  }\n  if (appRef != null && appRef.equalsIgnoreCase(\"RCSe-Settings\")) {\n    parseRCSe(node);\n  }\n}\n", "@Override\n  public <T, C> List<T> retrieveBeans(String name, C criteria, T result) throws CpoException {\n    return processSelectGroup(name, criteria, result, null, null, null, false);\n  }", "public MessageBuilder append(String message){\n  strBuilder.append(message);\n  return this;\n}\n", "public void addGetFieldIntercept(String owner, String name) {\n\n    if (isLog(4)) {\n      log(\"change getfield \" + owner + \" name:\" + name);\n    }\n    typeQueryUser = true;\n  }", "protected Rectangle paintCloseButton(Graphics g,SynthContext tabContext,int tabIndex){\n  Rectangle tabRect=new Rectangle(rects[tabIndex]);\n  Rectangle bounds=getCloseButtonBounds(tabIndex);\n  int offset=bounds.width + textIconGap;\n  boolean onLeft=isCloseButtonOnLeft();\n  if (onLeft) {\n    tabRect.x+=offset;\n    tabRect.width-=offset;\n  }\n else {\n    tabRect.width-=offset;\n  }\n  SeaGlassContext subcontext=getContext(tabPane,SeaGlassRegion.TABBED_PANE_TAB_CLOSE_BUTTON,getCloseButtonState(tabPane,tabIndex,(tabContext.getComponentState() & MOUSE_OVER) != 0));\n  SeaGlassLookAndFeel.updateSubregion(subcontext,g,bounds);\n  SeaGlassSynthPainterImpl painter=(SeaGlassSynthPainterImpl)subcontext.getPainter();\n  painter.paintSearchButtonForeground(subcontext,g,bounds.x,bounds.y,bounds.width,bounds.height);\n  subcontext.dispose();\n  return tabRect;\n}\n", "\tpublic void currentSettingChanged( final Knob knob, final double value ) {\n\t\tresync( false );\n\t\tfinal double lowerLimit = knob.getLowerLimit();\n\t\tfinal double range = knob.getUpperLimit() - lowerLimit;\n\t\tif ( range > 0.0 ) {\n\t\t\tfinal int sliderPosition = (int) ( ( value - lowerLimit ) * 100.0 / range );\n\t\t\t_knobSlider.setValue( sliderPosition );\n\t\t}\n\t\telse {\n\t\t\t_knobSlider.setValue( 50 );\n\t\t}\n\t}\n", "public long logSize ( ) { return logBytes ; }", "    private void applyStyle(Graphics g) {\n        g.setColor(currentStyle.getStyleAsColor(XStyle.COLOR_FORE));\n\n        try {\n            font = XProjectManager.getStyleManager().getFont(currentStyle);\n        } catch (Exception ex) {\n            font = new Font(\"Arial\", 0, 12);\n        }\n        if (font != null)\n            g.setFont(font);\n        fontMetrics = g.getFontMetrics();\n        fontHeight = fontMetrics.getHeight();\n    }\n", "    protected DOMException createDOMException() {\n        Object[] p = new Object[] { new Integer(getCssValueType()) };\n        String s = Messages.formatMessage(\"invalid.value.access\", p);\n        return new DOMException(DOMException.INVALID_ACCESS_ERR, s);\n    }\n", "public Context start ( F1 field1 ) { return new Context ( this , field1 ) ; }", "public void addNeighbor(Individual neighbor){\n  neighbors.add(neighbor);\n}\n", "\tpublic boolean sendMessage(Socket socket, AbstractNetworkMessage msg) {\n\t\ttry {\n\t\t\tObjectOutputStream oos = new ObjectOutputStream(socket\n\t\t\t\t\t.getOutputStream());\n\t\t\toos.writeObject(msg);\n\t\t\toos.flush();\n\t\t\toos.close();\n\t\t\tsocket.getOutputStream().flush();\n\t\t} catch (Exception e) {\n\t\t\tLogger.printERROR(this.getClass().getName(),\n\t\t\t\t\t\"Couldn't send message to socket (\"\n\t\t\t\t\t\t\t+ socket.getInetAddress().getHostAddress() + \":\"\n\t\t\t\t\t\t\t+ socket.getPort() + \"): \" + e);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n", "public TungstenProperties status ( ) ;", "public Integer call(){\n  try {\n    EfficientTerminalSet sourceItemLookaheads=lookaheads.get(currentItem);\n    CPGoToLink gotoLink=goToLinks.get(currentItem);\n    if (gotoLink != null) {\n      LALR1CPState targetState=gotoLink.getTargetState();\n      LALR1CPItem targetItem=targetState.getItemWithLookaheadByLR0Item(gotoLink.getTargetItem());\nsynchronized (lookaheads) {\n        EfficientTerminalSet before=lookaheads.get(targetItem);\n        EfficientTerminalSet after=before.plusAll(sourceItemLookaheads);\n        if (!before.equals(after)) {\n          lookaheads.put(targetItem,after);\n          threadPool.submit(new WorkerTaskCPLinks(targetItem,threadPool,taskCountLock));\n        }\n      }\n    }\n    for (    LR0Item closureLink : currentItem.getClosureLinks()) {\n      LALR1CPState targetState=itemStates.get(currentItem);\n      LALR1CPItem targetItem=targetState.getItemWithLookaheadByLR0Item(closureLink);\nsynchronized (lookaheads) {\n        EfficientTerminalSet before=lookaheads.get(targetItem);\n        EfficientTerminalSet after=before.plusAll(sourceItemLookaheads);\n        after=after.plusAll(targetItem.getLookaheads());\n        if (!before.equals(after)) {\n          lookaheads.put(targetItem,after);\n          threadPool.submit(new WorkerTaskCPLinks(targetItem,threadPool,taskCountLock));\n        }\n      }\n    }\n  }\n catch (  Throwable e) {\n    e.printStackTrace();\n  }\n  decrementTaskCount();\n  return 0;\n}\n", "    public ChangeSet delete(Collection<LineSegment> line) {\n        ChangeSet changes = new ChangeSet(this);\n        for (LineSegment ls : line) {\n            if (!lineSegments.isHard(ls)) {\n                removeSegment(ls, changes);\n            }\n        }\n        this.changes.add(changes);\n        return changes;\n    }\n", "    public XSSFPicture createPicture(XSSFClientAnchor anchor, int pictureIndex) {\n        PackageRelationship rel = getDrawing().addPictureReference(pictureIndex);\n\n        CTPicture ctShape = ctGroup.addNewPic();\n        ctShape.set(XSSFPicture.prototype", "public Scan<BeansDescriptor> getOrCreateScan()\n   {\n      List<Node> nodeList = model.get(\"scan\");\n      if (nodeList != null && nodeList.size() > 0)\n      {\n         return new ScanImpl<BeansDescriptor>(this, \"scan\", model, nodeList.get(0));\n      }\n      return createScan();\n   }", "public void sendPacketToAllAroundPoint ( IPacket packet , TargetPoint tp ) { checkClassAndSync ( packet . getClass ( ) ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . ALLAROUNDPOINT ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGETARGS ) . set ( tp ) ; serverOutboundChannel . writeOutbound ( packet ) ; isCurrentlySendingSemaphor = BOOL_ ; }", "public void configure ( ) throws CoreException { if ( DEBUG ) { System . out . println ( STR_ ) ; } addToBuildSpec ( FindbugsPlugin . BUILDER_ID ) ; }", "public < T > Iterable < T > loadObjects ( final Class < T > loadClass , final Criteria criteria , final Optional < Set < Order > > sortingRules , final Optional < Pagination > pagination ) { if ( sortingRules . isPresent ( ) ) { sortingRules . get ( ) . forEach ( null ) ; } if ( pagination . isPresent ( ) ) { final Pagination paginationData = pagination . get ( ) ; paginationData . evaluate ( loadClass ) ; criteria . setFirstResult ( paginationData . getOffset ( ) ) ; criteria . setMaxResults ( paginationData . getLimit ( ) ) ; } if ( isScrollEnabled ) { return new ScrollableIterator ( criteria . scroll ( scrollMode ) ) ; } return criteria . list ( ) ; }", "    public void removeFilter(String filter) {\n\tfilters.remove(filter);\n\tfilterSGs();\n\tfireTreeStructureChanged(this, new Object[] { getRoot() }, null, null);\n    }\n", "public UnsafeSequence(final long initialValue){\n  UNSAFE.putOrderedLong(this,VALUE_OFFSET,initialValue);\n}\n", "  private Entry getEntry(int index) {\n    Entry entry = (Entry) indexToEntry.get(index);\n    return entry;\n  }\n", "public static INDArray reshapeCnnMaskToTimeSeriesMask(INDArray timeSeriesMaskAsCnnMask, int minibatchSize) {\n        Preconditions.checkArgument(timeSeriesMaskAsCnnMask.rank() == 4 || timeSeriesMaskAsCnnMask.size(1) != 1 ||\n                timeSeriesMaskAsCnnMask.size(2) != 1 || timeSeriesMaskAsCnnMask.size(3) != 1,\n                \"Expected rank 4 mask with shape [mb*seqLength, 1, 1, 1]. Got rank %s mask array with shape %s\",\n                timeSeriesMaskAsCnnMask.rank(), timeSeriesMaskAsCnnMask.shape());\n\n        val timeSeriesLength = timeSeriesMaskAsCnnMask.length() / minibatchSize;\n\n        return timeSeriesMaskAsCnnMask.reshape('f', minibatchSize, timeSeriesLength);\n    }", "public void advance ( ) { if ( ! isEmpty ( ) ) pos ++ ; }", "public void run ( ) throws Exception { Logger log = LoggerFactory . getLogger ( RemoteServerExample . class ) ; SchedulerFactory sf = new StdSchedulerFactory ( ) ; Scheduler sched = sf . getScheduler ( ) ; log . info ( STR_ ) ; log . info ( STR_ ) ; log .", "    public void setWaitBeepEnabled(boolean waitBeepEnable) {\n\t\tboolean oldValue = this.waitBeepEnabled;\n        this.waitBeepEnabled = waitBeepEnable;\n\t\tfirePropertyChange(\"waitBeepEnable\", oldValue, waitBeepEnable);\n    }\n", "  private String quoteString(String str) {\n    return \"'\" + str + \"'\";\n  }\n", "public static < T > Response < T > error ( VolleyError error ) { return new Response < T > ( error ) ; }", "    public boolean isSecondNormalDistrbution() {\n        KolmogorovTest kt = new KolmogorovTest(this.b, new Normal());\n        //System.out.println(\"normal b \"+kt.getTestStatistic());\n        //System.out.println(\"normal b \"+kt.getSP());\n        return kt.getSP() >= 0.05;\n    }\n", "private void measureFloater() {\n        int specWidth = View.MeasureSpec.makeMeasureSpec(screenSize.x, View.MeasureSpec.EXACTLY);\n        int specHeight = View.MeasureSpec.makeMeasureSpec(screenSize.y, View.MeasureSpec.AT_MOST);\n        mPopupView.measure(specWidth, specHeight);\n    }", "public static void releaseCache(URI cache, Configuration conf, long timeStamp)\n    throws IOException {\n    String cacheId = getKey(cache, conf, timeStamp);\n\n    synchronized (cachedArchives) {\n      CacheStatus lcacheStatus = cachedArchives.get(cacheId);\n      if (lcacheStatus == null) {\n        LOG.warn(\"Cannot find localized cache: \" + cache +\n                 \" (key: \" + cacheId + \") in releaseCache!\");\n        return;\n      }\n      lcacheStatus.refcount--;\n    }\n  }", "public PDFPage ( int pageNumber , RectF bbox , int rotation , Cache cache ) { this . pageNumber = pageNumber ; this . cache = cache ; if ( bbox == null ) { bbox = new RectF ( NUM_ , NUM_ , NUM_ , NUM_ ) ; } if ( rotation < NUM_ ) { rotation += NUM_ ; } this . rotation = rotation ; if ( rotation == NUM_ || rotation == NUM_ ) { bbox = new RectF ( bbox . left , bbox . top , bbox . left + bbox . height ( ) , bbox . top + bbox . width ( ) ) ; } this . bbox = bbox ; }", "public void hostdoc() throws DirectorException {\n    addMasterChapter( text_hosts, text_hosts_sub, \"hostsintro.phtml\" );\n\n    Enumeration search = DBConnection.unwrap( Setup.hostsdir.search( \"cn=*\" ) );\n    Vector hosts = new Vector();\n    while( search.hasMoreElements() ) \n\thosts.addElement( search.nextElement() );\n    Tools.sort( hosts, new MyComparator() {\n\tpublic int compare( Object host1, Object host2 ) {\n\t    return( ((DBObject)host1).getEValue( \"cn\" ).compareTo( ((DBObject)host2).getEValue( \"cn\" ) ) );\n\t}\n    } );\n    Enumeration hostwalker = hosts.elements();\n    int testHosts = 20;\n    while( hostwalker.hasMoreElements() ) {\n\thostdoc( Setup.hostsdir.getConfig( (DBObject)hostwalker.nextElement() ) );\n\tif( testMode() && --testHosts<1 ) break;\n    }\n}\n", "    public void popupMenuWillBecomeVisible(PopupMenuEvent arg0) {\n        String s = this.uploadPolicy.getLastResponseBody();\n        this.jMenuItemViewLastResponseBody.setEnabled(s != null\n                && !s.equals(\"\"));\n    }\n", "private void emitDataFrame(boolean outFinished) throws IOException {\n  long toWrite;\nsynchronized (FramedStream.this) {\n    writeTimeout.enter();\n    try {\n      while (bytesLeftInWriteWindow <= 0 && !finished && !closed && errorCode == null) {\n        waitForIo();\n      }\n    }\n  finally {\n      writeTimeout.exitAndThrowIfTimedOut();\n    }\n    checkOutNotClosed();\n    toWrite=Math.min(bytesLeftInWriteWindow,sendBuffer.size());\n    bytesLeftInWriteWindow-=toWrite;\n  }\n  writeTimeout.enter();\n  try {\n    connection.writeData(id,outFinished && toWrite == sendBuffer.size(),sendBuffer,toWrite);\n  }\n  finally {\n    writeTimeout.exitAndThrowIfTimedOut();\n  }\n}\n", "public void pause ( ) { setPaused ( BOOL_ ) ; }", "\tpublic void addLine(ArrayList<String> lines) {\n\t\tfor (String line: lines)\n\t\t\tthis.lines.add(line);\n\t}\n", "public void addIm(ImEntity im){\n  ims.add(im);\n}\n", "private void outputCampaigns(Properties ctx,PrintWriter out,int campaignID,boolean includeAny){\n  out.println(\"<campaigns>\");\n  if (includeAny) {\n    out.println(\"<campaign id='-1'\");\n    if (campaignID == 0)     out.println(\" selected='selected'\");\n    out.println(\">ANY</campaign>\");\n  }\n  out.println(\"<campaign id='1'>Rose Festival</campaign>\");\n  out.println(\"</campaigns>\");\n}\n", "public BandPassBuilder passFrequencyBegin ( int passFrequency ) { mPassFrequencyBegin = passFrequency ; return this ; }", "boolean isElementClickable ( By by ) ;", "public static List < String [ ] > createListContent ( List < Formula > formulaList , String labelingScheme ) { Vector < String [ ] > resultContent = new Vector < String [ ] > ( formulaList . size ( ) ) ; String [ ] content ; String label ; for ( int i = NUM_ ; i < formulaList . size ( ) ; i ++ ) { label = getValidIdentifier ( labelingScheme ) ; content = new String [ ] { label , label + DEFINES_CR + formulaList . get ( i ) . getFormula ( ) } ; resultContent . add ( content ) ; } return resultContent ; }", "  public String format(Object value) {\n    return Localizer.formatTime((Date) value);\n  }\n", "public long getAsLongWithDefault(String key, long defaultValue) {\n\t\tObject value = getAsObject(key);\n\t\treturn LongConverter.toLongWithDefault(value, defaultValue);\n\t}", "public boolean isCancelled ( ) { for ( Future < T > f : components ) if ( f . isCancelled ( ) ) return BOOL_ ; return BOOL_ ; }", "public static boolean isDataUri(@Nullable Uri uri){\n  return DATA_SCHEME.equals(getSchemeOrNull(uri));\n}\n", "@Nonnull\n  @OverrideOnDemand\n  protected String getMenuItemExternalLabel (@Nonnull final IMenuItemExternal aMenuItem,\n                                             final boolean bHasChildren,\n                                             final boolean bIsSelected,\n                                             final boolean bIsExpanded)\n  {\n    return aMenuItem.getDisplayText (getContentLocale ());\n  }", "    public void init(ServletConfig config) throws ServletException {\n        super.init(config);\n\n        try {\n            String xslSystemId = config.getServletContext().getResource(\"/\").toString();\n            LOG.info(\"SystemId: \" + xslSystemId);\n            AbstractXSLPage.setSystemID(xslSystemId);\n        } catch (Exception e) {\n            throw new ServletException(\"Error initializing SystemID \", e);\n        }\n    }\n", "public static DataHash hash(HashAlgorithm hashAlgorithm, byte[] left, byte[] right, long level) throws HashException {\n        DataHasher hasher = new DataHasher(hashAlgorithm);\n        hasher.addData(left).addData(right);\n        hasher.addData(com.guardtime.ksi.util.Util.encodeUnsignedLong(level));\n        return hasher.getHash();\n    }", "protected String format(ChannelHandlerContext ctx, String eventName, Object arg) {\n        if (arg instanceof ByteBuf) {\n            return formatByteBuf(ctx, eventName, (ByteBuf) arg);\n        } else if (arg instanceof ByteBufHolder) {\n            return formatByteBufHolder(ctx, eventName, (ByteBufHolder) arg);\n        } else {\n            return formatSimple(ctx, eventName, arg);\n        }\n    }", "public String addListener(ServiceListener listener){\n  return (orgConfigImpl.addListener(listener));\n}", "    public void setResult (ArrayList result) {\n        this.result = result;\n    }\n", "Integer appendSectionComment ( int moduleId , int sectionId , String commentText , Integer userId ) throws CouldntSaveDataException ;", "\tpublic byte unlock(){\n\t\tthrow new RuntimeException(\"Stub\");\n\t}\n", "public static void optimizeGraphicsQuality(Graphics2D g)\r\n    {\r\n        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n        g.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\r\n        g.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);\r\n        g.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);\r\n        g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);\r\n        g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\r\n        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);\r\n        g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\r\n    }", "public abstract void iterate ( final Blackhole bh ) ;", "public boolean equals(Object o){\n  if (o == this)   return true;\n  if (!(o instanceof MBeanNotificationInfo))   return false;\n  MBeanNotificationInfo p=(MBeanNotificationInfo)o;\n  return (Objects.equals(p.getName(),getName()) && Objects.equals(p.getDescription(),getDescription()) && Objects.equals(p.getDescriptor(),getDescriptor())&& Arrays.equals(p.fastGetNotifTypes(),fastGetNotifTypes()));\n}\n", "public DirectSpaceFactoryBean ( IJSpace space ) { this . space = space ; }", "void onChannelClose ( ) ;", "\tpublic void addEdgebyLabelV(String from, String to, String rawEdge, String delim) {\n\tfrom = from.trim();\n\tto = to.trim();\n\tNode fromNode = findNodebyLabelV(from,true);\n\t// loops are not added\n\tif (!from.equals(to)){\n\t\tNode toNode = findNodebyLabelV(to,true);\n\t\tEdge e = new Edge(fromNode,toNode,rawEdge,delim);\n\t\tfromNode.adjEdges.add(e);\n\t\ttoNode.adjEdges.add(e);\n\t\tedgesV.add(e);\n\t}\n\t}\n", "private void commitCommentNote(String reviewCommitHash,ReviewComment comment){\n  try (GitNoteWriter<ReviewComment> writer=GitNoteWriter.createNoteWriter(reviewCommitHash,repo,author,COMMENTS_REF)){\n    comment.setTimestamp(System.currentTimeMillis() / 1000);\n    comment.setAuthor(author.getEmailAddress());\n    List<ReviewComment> comments=new ArrayList<ReviewComment>();\n    comments.add(comment);\n    writer.create(\"Writing comment for \" + reviewCommitHash,comments);\n  }\n }\n", "    public void ParameterTextChanged() {\n        if(valueedit!=null) { \n            this.setStringValue(valueedit.getText());\n            this.valueedit.setText(this.StringValue);\n            boolean oldsend=this.sendChanges;\n            this.sendChanges=false;\n            if(valueslider!=null) this.valueslider.setValue((int)(this.FloatValue*100));\n            this.sendChanges=oldsend;\n        }\n    }\n", "public static Class toClass(ClassFile cf,ClassLoader loader,ProtectionDomain domain) throws CannotCompileException {\n  try {\n    byte[] b=toBytecode(cf);\n    Method method;\n    Object[] args;\n    if (domain == null) {\n      method=defineClass1;\n      args=new Object[]{cf.getName(),b,new Integer(0),new Integer(b.length)};\n    }\n else {\n      method=defineClass2;\n      args=new Object[]{cf.getName(),b,new Integer(0),new Integer(b.length),domain};\n    }\n    return toClass2(method,loader,args);\n  }\n catch (  RuntimeException e) {\n    throw e;\n  }\ncatch (  java.lang.reflect.InvocationTargetException e) {\n    throw new CannotCompileException(e.getTargetException());\n  }\ncatch (  Exception e) {\n    throw new CannotCompileException(e);\n  }\n}\n", "public static < T > boolean contains ( Iterator < T > iterator , T element ) { if ( iterator != null ) { while ( iterator . hasNext ( ) ) { T candidate = iterator . next ( ) ; if ( ObjectUtils . nullSafeEquals ( candidate , element ) ) return BOOL_ ; } } return BOOL_ ; }", "public void release ( ) { if ( openCursors != null ) { List < Long > cursorIds = new ArrayList < Long > ( openCursors . size ( ) ) ; for ( long id : openCursors . keySet ( ) ) { cursorIds . add ( id ) ; } for ( long id : cursorIds ) { cursorDeallocate ( i", "private JcError checkLockingError(List<JcQueryResult> results, boolean hasCreateQuery, List<ElemId2Query> elemIds2Query) {\n\t\tJcError error = null;\n\t\tif (this.lockingStrategy == Locking.OPTIMISTIC) {\n\t\t\tJcNumber lockV = new JcNumber(\"lockV\");\n\t\t\tJcNumber nSum = new JcNumber(\"sum\");\n\t\t\tint to = hasCreateQuery ? results.size() - 1 : results.size(); // don't check the result of the create query\n\t\t\tfor (int i = 0; i < to; i++) {\n\t\t\t\tElemId2Query elemId2Query = elemIds2Query.get(i);\n\t\t\t\tif (elemId2Query.versionSum >= 0 && elemId2Query.elemId < 0) { // delete query\n\t\t\t\t\tList<BigDecimal> ires = results.get(i).resultOf(nSum);\n\t\t\t\t\tif (ires.size() > 0) {\n\t\t\t\t\t\tif (((Number)ires.get(0)).intValue() != elemId2Query.versionSum) {\n\t\t\t\t\t\t\terror = new JcError(\"JCypher.Locking\", \"Optimistic locking failed (an element was changed by another client)\",\n\t\t\t\t\t\t\t\t\tnull);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else { // an element has been deleted\n\t\t\t\t\t\terror = new JcError(\"JCypher.Locking\", \"Optimistic locking failed (an element was deleted by another client)\",\n\t\t\t\t\t\t\t\tnull);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else { // change query\n\t\t\t\t\tList<BigDecimal> ires = results.get(i).resultOf(lockV);\n\t\t\t\t\tif (ires.size() > 0) {\n\t\t\t\t\t\tint res = ires.get(0).intValue();\n\t\t\t\t\t\tif (res == -2) {\n\t\t\t\t\t\t\terror = new JcError(\"JCypher.Locking\", \"Optimistic locking failed (an element was changed by another client)\",\n\t\t\t\t\t\t\t\t\t\"element id: \" + elemId2Query.elemId);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else { // an element has been deleted\n\t\t\t\t\t\terror = new JcError(\"JCypher.Locking\", \"Optimistic locking failed (an element was deleted by another client)\",\n\t\t\t\t\t\t\t\t\"element id: \" + elemId2Query.elemId);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn error;\n\t}", "public IndentPrinter ( Writer out , String indent , boolean addNewlines , boolean autoIndent ) { this . addNewlines = addNewlines ; if ( out == null ) { throw new IllegalArgumentException ( STR_ ) ; } this . out = out ; this . indent = indent ; this . aut", "Void handleUninterruptible ( boolean isStateMachine ) ;", "\tpublic boolean isDisplayBoundingBox(){\n\t\treturn boundingBox.isVisible();\n\t}\n", "public static void logError(final Logger logger, final Error e)\n\t{\n\t\tlogger.logError(Level.ERROR, \"Unexpected Error\", e);\n\t}", "public void discard ( Object serviceReference ) ;", "public ReferenceField getReferringField()\n    {\n    \tClearFieldReferenceOnCloseHandler listener = (ClearFieldReferenceOnCloseHandler)this.getListener(ClearFieldReferenceOnCloseHandler.class, true);\n    \twhile (listener != null)\n    \t{\n    \tBaseField field = listener.getField();\n    \tif (field instanceof ReferenceField)\n    \t\tif (((ReferenceField)field).getReferenceRecord(null, false) == this)\n    \t\t\treturn (ReferenceField)field;\n    \t}\n    \treturn null;\n    }", "public void clearCommands(){\nsynchronized (commands) {\n    commands.clear();\n  }\n  updateImages();\n}\n", "\tpublic int size() {\n\t\treturn pointsX.size();\n\t}\n", "public void addFragment(FeedbackFragment fragment){\n  mFragments.add(fragment);\n}\n", "  public String outputClassificationTipText() {\n    return \"Whether to add an attribute with the actual classification.\";\n  }\n", "public static int getApproxRequiredArity(Node fun) {\n    checkArgument(fun.isFunction());\n    checkArgument(getBestJSDocInfo(fun) == null, \"Expected unannotated function, found: %s\", fun);\n    int result = 0;\n    for (Node param : fun.getSecondChild().children()) {\n      if (param.isOptionalArg() || param.isVarArgs()) {\n        break;\n      }\n      result++;\n    }\n    return result;\n  }", "public EventExpireThread ( ) { super ( STR_ ) ; setDaemon ( BOOL_ ) ; }", "public static String fmt(double x){\n  return FMT.format(x);\n}\n", "private double[] determineMinMaxDistance(Relation<ParameterizationFunction> relation,int dimensionality){\n  double[] min=new double[dimensionality - 1];\n  double[] max=new double[dimensionality - 1];\n  Arrays.fill(max,Math.PI);\n  HyperBoundingBox box=new HyperBoundingBox(min,max);\n  double d_min=Double.POSITIVE_INFINITY;\n  double d_max=Double.NEGATIVE_INFINITY;\n  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {\n    ParameterizationFunction f=relation.get(iditer);\n    HyperBoundingBox minMax=f.determineAlphaMinMax(box);\n    double f_min=f.function(SpatialUtil.getMin(minMax));\n    double f_max=f.function(SpatialUtil.getMax(minMax));\n    d_min=Math.min(d_min,f_min);\n    d_max=Math.max(d_max,f_max);\n  }\n  return new double[]{d_min,d_max};\n}\n", "    public void addEvent (ERCalendarEvent event) {\n\tevents.addObject (event);\n    }\n", "private byte[] encryptInternal(SecretKeySpec key, String toEncrypt) {\n        try {\n            Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM + ENCRYPTION_ALGORITHM_MODIFIER);\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            return cipher.doFinal(toEncrypt.getBytes(ENCODING));\n        } catch (GeneralSecurityException e) {\n            throw new RuntimeException(\"Exception during decryptInternal: \" + e, e);\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(\"Exception during encryptInternal: \" + e, e);\n        }\n    }", "protected void finalize ( ) throws IOException { close ( ) ; }", "public Coref newCoref(List<Span<Term>> mentions) {\n\tString newId = idManager.getNextId(AnnotationType.COREF);\n\tCoref newCoref = new Coref(newId, mentions);\n\tannotationContainer.add(newCoref, Layer.COREFERENCES, AnnotationType.COREF);\n\treturn newCoref;\n    }", "void onAddMedia ( RTMedia media ) { mAddedMedia . add ( media ) ; }", "@Override public void run(){\n  TOP:   while (!shutDown) {\n    SystemFailure.checkFailure();\n    try {\n      connected=false;\n      initialized=false;\n      if (!shutDown) {\n        connectToDS();\n        if (isListening()) {\n          Assert.assertTrue(system != null);\n        }\n        return;\n      }\n    }\n catch (    IncompatibleSystemException ise) {\n      logger.fatal(ise.getMessage(),ise);\n      callAlertListener(new VersionMismatchAlert(RemoteGfManagerAgent.this,ise.getMessage()));\n    }\ncatch (    Exception e) {\n      for (Throwable cause=e; cause != null; cause=cause.getCause()) {\n        if (cause instanceof InterruptedException) {\n          if (shutDown) {\n            break TOP;\n          }\n        }\n        if (cause instanceof AuthenticationFailedException) {\n          shutDown=true;\n          securityLogWriter.warning(LocalizedStrings.RemoteGFManagerAgent_AN_AUTHENTICATIONFAILEDEXCEPTION_WAS_CAUGHT_WHILE_CONNECTING_TO_DS,e);\n          break TOP;\n        }\n      }\n      logger.debug(\"[RemoteGfManagerAgent] While connecting to DS\",e);\n    }\n    try {\n      sleep(1000);\n    }\n catch (    InterruptedException ignore) {\n    }\n  }\n  connected=false;\n  initialized=false;\n}\n", "public static String toStringMode(int octalMode){\n  String str=Integer.toString(octalMode,8);\n  while (str.length() < 3)   str=\"0\" + str;\n  return str;\n}\n", "private void dispatch ( PartitionedEvent partitionedEvent ) { boolean handled = BOOL_ ; for ( Map . Entry < String , CompositePolicyHandler > policyStreamHandler : policyStreamHandlerMap . entrySet ( ) ) { if ( isAcceptedByPolicy ( partitionedEvent , poli", "    public void addURL(String url,int priority) {\n        pusher.addURL(url,priority);\n    }\n", "private void addRepository(String repositoryId, RepositoryWrapper repositoryHolder) {\n        repositories.put(repositoryId, repositoryHolder);\n        try {\n            numRepos = getNumberOfRepositories();\n        } catch (WIMException e) {\n            // okay\n        }\n    }", "public mxTemporaryCellStates(mxGraphView view,double scale,Object[] cells){\n  this.view=view;\n  oldBounds=view.getGraphBounds();\n  oldStates=view.getStates();\n  oldScale=view.getScale();\n  view.setStates(new Hashtable<Object,mxCellState>());\n  view.setScale(scale);\n  if (cells != null) {\n    mxCellState state=view.createState(new mxCell());\n    for (int i=0; i < cells.length; i++) {\n      view.validateBounds(state,cells[i]);\n    }\n    double minX=0;\n    double minY=0;\n    double maxX=0;\n    double maxY=0;\n    for (int i=0; i < cells.length; i++) {\n      mxRectangle bounds=view.validatePoints(state,cells[i]);\n      minX=Math.min(minX,bounds.getX());\n      minY=Math.min(minY,bounds.getY());\n      maxX=Math.max(maxX,bounds.getX() + bounds.getWidth());\n      maxY=Math.max(maxY,bounds.getY() + bounds.getHeight());\n    }\n    view.setGraphBounds(new mxRectangle(minX,minY,maxX - minX,maxY - minY));\n  }\n}\n", "@SuppressWarnings(\"unchecked\") @Override public boolean containsKey(Object key){\n  if (comparator == null && NumberComparator.isNumber(key)) {\n    comparator=NumberComparator.createComparator(key.getClass());\n  }\n  java.lang.Comparable<K> object=comparator == null ? toComparable((K)key) : null;\n  K keyK=(K)key;\n  Node<K,V> node=root;\n  while (node != null) {\n    K[] keys=node.keys;\n    int left_idx=node.left_idx;\n    int result=object != null ? object.compareTo(keys[left_idx]) : -comparator.compare(keys[left_idx],keyK);\n    if (result < 0) {\n      node=node.left;\n    }\n else     if (result == 0) {\n      return true;\n    }\n else {\n      int right_idx=node.right_idx;\n      if (left_idx != right_idx) {\n        result=cmp(object,keyK,keys[right_idx]);\n      }\n      if (result > 0) {\n        node=node.right;\n      }\n else       if (result == 0) {\n        return true;\n      }\n else {\n        int low=left_idx + 1, mid=0, high=right_idx - 1;\n        while (low <= high) {\n          mid=(low + high) >>> 1;\n          result=cmp(object,keyK,keys[mid]);\n          if (result > 0) {\n            low=mid + 1;\n          }\n else           if (result == 0) {\n            return true;\n          }\n else {\n            high=mid - 1;\n          }\n        }\n        return false;\n      }\n    }\n  }\n  return false;\n}\n", "   public void handleMulticastMessage( String msg ) {\n      if( msg.trim().equals( AnalyticNetMonitorServer.MONITOR_TRIGGER ) ) {\n         //send NetMonitorAgent data\n         try { \n            this.sendData();\n         } catch ( Exception e ) {\n            e.printStackTrace();\n         }\n      } else {\n         System.out.println( \"Mutlicast msg not for me: \" + msg );\n      }\n   }\n", "public View2D showInWindow ( final GraphWindow window , final View view ) { Preconditions . checkNotNull ( view , STR_ ) ; final ViewContainer container = view . getContainer ( ) ; if ( container instanceof Module ) { final Module module = ( Module ) cont", "public PageFormat validatePage(PageFormat page){\n  PageFormat newPage=(PageFormat)page.clone();\n  Paper newPaper=new Paper();\n  validatePaper(newPage.getPaper(),newPaper);\n  newPage.setPaper(newPaper);\n  return newPage;\n}\n", "public BaseNode ( final List < ConditionNode > children ) { this . children = new ArrayList < > ( children ) ; }", "public String getValue() {\n        if (paramValue == null) {\n            if (paramNameEnd == paramEnd) {\n                return null;\n            }\n            try {\n                paramValue = URLDecoder.decode(queryString.substring(paramNameEnd + 1, paramEnd), \"UTF-8\");\n            } catch (UnsupportedEncodingException ex) {\n                throw new Error(ex);\n            }\n        }\n        return paramValue;\n    }", "public static Object[] resizeIfNeeded(Object[] arr,int minSize,boolean doPowerOf2){\n  if (arr.length >= minSize)   return arr;\n  if (doPowerOf2)   minSize=MathUtil.nextPowerOf2(minSize);\n  Object[] result=new Object[minSize];\n  System.arraycopy(arr,0,result,0,arr.length);\n  return result;\n}\n", "public SetBreakpointCommand ( final int packetId , final Set < RelocatedAddress > addresses , final BreakpointType type ) { super ( getCommandForType ( type ) , packetId ) ; Preconditions . checkNotNull ( addresses , STR_ ) ; Preconditions . checkNotNull ", "public List<String> localText(){\n  final List<String> result=new ArrayList<String>();\n  for (  Object child : this.children) {\n    if (!(child instanceof Node)) {\n      result.add(child.toString());\n    }\n  }\n  return result;\n}", "    public void addPredecessor(Object handle, Object predecessor) {\n        if (handle != null\n            && handle instanceof MMessage\n            && predecessor != null\n            && predecessor instanceof MMessage) {\n            ((MMessage) handle).addPredecessor((MMessage) predecessor);\n            return;\n        }\n\n        throw new IllegalArgumentException(\n                \"handle: \" + handle\n                + \" or predecessor: \" + predecessor);\n    }\n", "public void writeTo(WritableByteChannel channel) throws IOException {\n        for (ByteBuffer buffer : toDirectByteBuffers()) {\n            channel.write(buffer);\n        }\n    }", "public TomcatServiceBuilder baseDir(String baseDir){\n  return baseDir(Paths.get(requireNonNull(baseDir,\"baseDir\")));\n}\n", "\tpublic void show() {\n\t\tif (hidden) {\n\t\t\thidden = false;\n\t\t\trequireRedraw();\n\t\t}\n\t}\n", "public static int countLines(InputStream is) throws IOException {\n        try {\n            byte[] c = new byte[1024];\n            int count = 0;\n            int readChars = 0;\n            boolean empty = true;\n            while ((readChars = is.read(c)) != -1) {\n                empty = false;\n                for (int i = 0; i < readChars; ++i) {\n                    if (c[i] == '\\n') {\n                        ++count;\n                    }\n                }\n            }\n            return (count == 0 && !empty) ? 1 : count;\n        } finally {\n            is.close();\n        }\n\n\n    }", "public TraceRegister ( final String name , final IAddress value , final byte [ ] memory ) { registerName = Preconditions . checkNotNull ( name , STR_ ) ; registerValue = Preconditions . checkNotNull ( value , STR_ ) ; memoryPointedToByRegister = Preconditions . checkNotNull ( memory . clone ( ) , STR_ ) ; }", "public T removeAcl(List<AclEntry> entries) {\n    for (AclEntry entry : entries) {\n      if (entry.isDefault()) {\n        AccessControlList defaultAcl = getDefaultACL();\n        defaultAcl.removeEntry(entry);\n      } else {\n        mAcl.removeEntry(entry);\n      }\n    }\n    updateMask(entries);\n    return getThis();\n  }", "public static void filterInnerPoints(DenseMatrix64F points, DenseMatrix64F center, int minLeft, double percent)\r\n    {\r\n        assert points.numCols == 2;\r\n        assert center.numCols == 1;\r\n        assert center.numRows == 2;\r\n        if (percent <= 0 || percent >= 1)\r\n        {\r\n            throw new IllegalArgumentException(\"percent \"+percent+\" is not between 0 & 1\");\r\n        }\r\n        DistComp dc = new DistComp(center.data[0], center.data[1]);\r\n        Matrices.sort(points, dc);\r\n        int rows = points.numRows;\r\n        double[] d = points.data;\r\n        double limit = dc.distance(d[0], d[1])*percent;\r\n        for (int r=minLeft;r<rows;r++)\r\n        {\r\n            double distance = dc.distance(d[2*r], d[2*r+1]);\r\n            if (distance < limit)\r\n            {\r\n                points.reshape(r/2, 2, true);\r\n                break;\r\n            }\r\n        }\r\n    }", "protected void addHighlightingAndBar() {\n\n        timer = null;\n        highlightElement();\n        getElement().addClassName(org.opencms.gwt.client.ui.css.I_CmsLayoutBundle.INSTANCE.stateCss().cmsHovering());\n    }", "public void clear ( ) { exceptionSet . clear ( ) ; explicitSet . clear ( ) ; universalHandler = BOOL_ ; commonSupertype = null ; size = NUM_ ; }", "public String amt(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){\n  String colName=mField.getColumnName();\n  if (value == null || isCalloutActive())   return \"\";\n  int C_AcctSchema_ID=Env.getContextAsInt(ctx,WindowNo,\"C_AcctSchema_ID\");\n  MAcctSchema as=MAcctSchema.get(ctx,C_AcctSchema_ID);\n  int Precision=as.getStdPrecision();\n  BigDecimal CurrencyRate=(BigDecimal)mTab.getValue(\"CurrencyRate\");\n  if (CurrencyRate == null) {\n    CurrencyRate=Env.ONE;\n    mTab.setValue(\"CurrencyRate\",CurrencyRate);\n  }\n  BigDecimal AmtSourceDr=(BigDecimal)mTab.getValue(\"AmtSourceDr\");\n  if (AmtSourceDr == null)   AmtSourceDr=Env.ZERO;\n  BigDecimal AmtSourceCr=(BigDecimal)mTab.getValue(\"AmtSourceCr\");\n  if (AmtSourceCr == null)   AmtSourceCr=Env.ZERO;\n  BigDecimal AmtAcctDr=AmtSourceDr.multiply(CurrencyRate);\n  AmtAcctDr=AmtAcctDr.setScale(Precision,BigDecimal.ROUND_HALF_UP);\n  mTab.setValue(\"AmtAcctDr\",AmtAcctDr);\n  BigDecimal AmtAcctCr=AmtSourceCr.multiply(CurrencyRate);\n  AmtAcctCr=AmtAcctCr.setScale(Precision,BigDecimal.ROUND_HALF_UP);\n  mTab.setValue(\"AmtAcctCr\",AmtAcctCr);\n  return \"\";\n}\n", "private void buildDomTree(){\n  int szNodes=nodes.size();\n  for (int i=0; i < szNodes; i++) {\n    DomInfo info=domInfos[i];\n    if (info.idom == -1)     continue;\n    SsaBasicBlock domParent=nodes.get(info.idom);\n    domParent.addDomChild(nodes.get(i));\n  }\n}\n", "public void fillDefaultValues(){\n  cbPlasticityType.setSelectedIndex(ShortTermPlasticityRule.DEFAULT_PLASTICITY_TYPE);\n  tfBaseLineStrength.setText(Double.toString(ShortTermPlasticityRule.DEFAULT_BASE_LINE_STRENGTH));\n  tfFiringThreshold.setText(Double.toString(ShortTermPlasticityRule.DEFAULT_FIRING_THRESHOLD));\n  tfBumpRate.setText(Double.toString(ShortTermPlasticityRule.DEFAULT_BUMP_RATE));\n  tfDecayRate.setText(Double.toString(ShortTermPlasticityRule.DEFAULT_DECAY_RATE));\n}\n", "\tpublic Object execute(ExecutionEvent event) throws ExecutionException {\n\t\tIWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);\n\t\tRequestBag.getInstance().load();\n\t\tthis.setBaseEnabled(false);\n\t\treturn null;\n\t}\n", "public void revealFromMenuItem ( int id , Activity activity ) { setVisibility ( View . VISIBLE ) ; View menuButton = activity . findViewById ( id ) ; if ( menuButton != null ) { FrameLayout layout = ( FrameLayout ) activity . getWindow ( ) . getDecorView ", "public void setLcdVisible(final boolean LCD_VISIBLE) {\n        getModel().setLcdVisible(LCD_VISIBLE);\n        init(getInnerBounds().width, getInnerBounds().height);\n        repaint(getInnerBounds());\n    }", "public void handleTouchEvent(MotionEvent ev){\n        if(ev.getAction() == MotionEvent.ACTION_MOVE){\n            // A finger is dragging about\n            if(mTexHeight != 0 && mTexWidth != 0){\n                mSummedTouchPosition[0] += (2 * (ev.getX() - mLastTouchPosition[0])) / mTexWidth;\n                mSummedTouchPosition[1] += (2 * (ev.getY() - mLastTouchPosition[1])) / -mTexHeight;\n                mLastTouchPosition[0] = ev.getX();\n                mLastTouchPosition[1] = ev.getY();\n            }\n        }else if(ev.getAction() == MotionEvent.ACTION_DOWN){\n            // The primary finger has landed\n            mLastTouchPosition[0] = ev.getX();\n            mLastTouchPosition[1] = ev.getY();\n        }\n    }", "public static boolean isValidXmlIdentifier(String s){\n  if (s != null) {\n    int len=s.length();\n    if (len == 0) {\n      return false;\n    }\n    for (int i=0; i < len; i++) {\n      char ch=s.charAt(i);\n      if ((i == 0 && !Character.isUnicodeIdentifierStart(ch)) || (!Character.isUnicodeIdentifierStart(ch) && !Character.isDigit(ch) && !Utils.isIdentifierHelperChar(ch))) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n", "protected synchronized void replaceInFileBuffered(File sourceFile, File targetFile, ReplacementType replacementType,\n\t\t\tFile[] classpath, boolean detectEncoding) throws MojoExecutionException {\n\t\tif (this.replacementTreatedFiles.contains(targetFile)\n\t\t\t\t&& targetFile.exists()) {\n\t\t\tgetLog().debug(\"Skiping \" + targetFile //$NON-NLS-1$\n\t\t\t\t\t+ \" because is was already treated for replacements\"); //$NON-NLS-1$\n\t\t\treturn;\n\t\t}\n\t\treplaceInFile(sourceFile, targetFile, replacementType, classpath, detectEncoding);\n\t}", "public boolean compatibleWithTable(VoltTable table) {\n            String candidateName = getTableName(table);\n            // table can't have the same name as the view\n            if (candidateName.equals(viewName)) {\n                return false;\n            }\n            // view is for a different table\n            if (candidateName.equals(srcTableName) == false) {\n                return false;\n            }\n\n            try {\n                // ignore ret value here - just looking to not throw\n                int groupColIndex = table.getColumnIndex(groupColName);\n                VoltType groupColType = table.getColumnType(groupColIndex);\n                if (groupColType == VoltType.DECIMAL) {\n                    // no longer a good type to group\n                    return false;\n                }\n\n                // check the sum col is still value\n                int sumColIndex = table.getColumnIndex(sumColName);\n                VoltType sumColType = table.getColumnType(sumColIndex);\n                if ((sumColType == VoltType.TINYINT) ||\n                        (sumColType == VoltType.SMALLINT) ||\n                        (sumColType == VoltType.INTEGER)) {\n                    return true;\n                }\n                else {\n                    // no longer a good type to sum\n                    return false;\n                }\n            }\n            catch (IllegalArgumentException e) {\n                // column index is bad\n                return false;\n            }\n        }", "HttpResponseTemp < ? > updateServer ( Server server ) ;", "public static void sort(Object[] array,int start,int end){\n  ComparableTimSort.sort(array,start,end);\n}\n", "public synchronized void updateEntityPositionLookup(Entity e,HashSet<Coords> oldPositions){\n  HashSet<Coords> newPositions=e.getOccupiedCoords();\n  if (newPositions.equals(oldPositions)) {\n    return;\n  }\n  if (oldPositions != null) {\n    for (    Coords pos : oldPositions) {\n      HashSet<Integer> posEntities=entityPosLookup.get(pos);\n      if (posEntities != null) {\n        posEntities.remove(e.getId());\n      }\n    }\n  }\n  for (  Coords pos : newPositions) {\n    HashSet<Integer> posEntities=entityPosLookup.get(pos);\n    if (posEntities == null) {\n      posEntities=new HashSet<Integer>();\n      posEntities.add(e.getId());\n      entityPosLookup.put(pos,posEntities);\n    }\n else {\n      posEntities.add(e.getId());\n    }\n  }\n}\n", "public DViewAsn1Dump(JDialog parent,X509Certificate cert) throws Asn1Exception, IOException {\n  super(res.getString(\"DViewAsn1Dump.Certificate.Title\"));\n  this.certificate=cert;\n  initComponents();\n}\n", "public AesEncrypter ( SecretKey key ) { byte [ ] iv = new byte [ ] { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ; AlgorithmParameterSpec paramSpec = new IvParameterSpec ( iv ) ; try { ecipher = Cipher . getInstance ( STR_ ) ; dcipher = Cipher . getInstance ( STR_ ) ; ecipher . init ( Cipher . ENCRYPT_MODE , key , paramSpec ) ; dcipher . init ( Cipher . DECRYPT_MODE , key , paramSpec ) ; } catch ( Exception e ) { throw new EncodingException ( STR_ , e ) ; } }", "@Nullable\n    public static XMethod getXMethod(final XClass xClass, final String methodName, final String methodSig) {\n        if (xClass == null) {\n            return null;\n        }\n\n        XMethod xMethod = xClass.findMethod(methodName, methodSig, false);\n        if (xMethod == null) {\n            ClassDescriptor descriptor = xClass.getSuperclassDescriptor();\n            if (descriptor != null) {\n                final XClass superClass = getXClass(descriptor);\n                xMethod = getXMethod(superClass, methodName, methodSig);\n            }\n        }\n        return xMethod;\n    }", "public CDebuggerListener ( final CRemoteFileBrowser browser , final ILoaderThread thread ) { m_browser = browser ; m_thread = thread ; }", "public void orderBy ( IQueryResultSet < IEntryPacket > entries , List < OrderColumn > orderColumns ) throws SQLException { Collections . sort ( ( List < IEntryPacket > ) entries , getOrderByComparator ( entries , orderColumns ) ) ; }", "public void put(NumberVector val) {\n    assert (val.getDimensionality() == elements.length);\n    wsum += 1.0;\n    for(int i = 0; i < elements.length; i++) {\n      final double delta = val.doubleValue(i) - elements[i];\n      elements[i] += delta / wsum;\n    }\n  }", "@NotNull private static File identifyBranchHeadFile(@NotNull HgVersion version,@NotNull File parentCacheFile){\n  if (version.hasBranch2()) {\n    File file=new File(parentCacheFile,\"branch2-served\");\n    return file.exists() ? file : new File(parentCacheFile,\"branch2-base\");\n  }\n  if (version.hasBranchHeadsBaseServed()) {\n    File file=new File(parentCacheFile,\"branchheads-served\");\n    return file.exists() ? file : new File(parentCacheFile,\"branchheads-base\");\n  }\n  return new File(parentCacheFile,\"branchheads\");\n}\n", "    public void removeWorkflowTemplate(WorkflowTemplate template) {\n        template.removeFromAssociation(getWorkflowTemplatesAssociation());\n    }\n", "public static void remove(){\n  DATA.remove();\n  clearLogListener();\n}\n", "private static String unescapeString(String value) {\n\n        Matcher matcher = PATTERN_UNESCAPE.matcher(value);\n        return matcher.replaceAll(\"\\\\\\\\\\\\\\\\$1\");\n    }", "public Builder rotate ( float degrees , float pivotX , float pivotY ) { rotationDegrees = degrees ; rotationPivotX = pivotX ; rotationPivotY = pivotY ; hasRotationPivot = BOOL_ ; return this ; }", "\tpublic Iterator iterator() {\n\t\treturn m_cols.iterator();\n\t}\n", "public void setChart(Chart chart) {\n\t\tthis.chart = chart;\n        if (this.chart.getReport().getQuery() != null) {\n            this.chart.getReport().getQuery().setDialect(dialect);\n        }       \n    }", "public static boolean isFileUploadAvailable(final boolean needsCorrectMimeType){\n  if (Build.VERSION.SDK_INT == 19) {\n    final String platformVersion=(Build.VERSION.RELEASE == null) ? \"\" : Build.VERSION.RELEASE;\n    return !needsCorrectMimeType && (platformVersion.startsWith(\"4.4.3\") || platformVersion.startsWith(\"4.4.4\"));\n  }\n else {\n    return true;\n  }\n}\n", "\tpublic Throwable getRootCause() {\n\t\tThrowable root = this;\n\t\twhile (!(root.getClass().getName().startsWith(\"java.\") || root\n\t\t\t\t.getClass().getName().startsWith(\"javax.\"))\n\t\t\t\t&& root.getCause() != null)\n\t\t\troot = root.getCause();\n\t\treturn root;\n\t}\n", "boolean hasFixedPropertiesArray ( ) ;", "public boolean removeByObject ( T obj ) { if ( getNumSegments ( ) > NUM_ ) throw new RuntimeException ( STR_ ) ; if ( _segments [ NUM_ ] . removeByObject ( obj ) ) { sizeUpdater . decrementAndGet ( this ) ; return BOOL_ ; } return BOOL_ ; }", "public static PluginInterface instance ( ) { Preconditions . checkNotNull ( instance , STR_ ) ; return instance ; }", "public static DisqueURI create(URI uri) {\n\n        DisqueURI.Builder builder;\n        builder = configureDisque(uri);\n\n        if (URI_SCHEME_DISQUE_SECURE.equals(uri.getScheme())) {\n            builder.withSsl(true);\n        }\n\n        String userInfo = uri.getUserInfo();\n\n        if (isEmpty(userInfo) && isNotEmpty(uri.getAuthority()) && uri.getAuthority().indexOf('@') > 0) {\n            userInfo = uri.getAuthority().substring(0, uri.getAuthority().indexOf('@'));\n        }\n\n        if (isNotEmpty(userInfo)) {\n            String password = userInfo;\n            if (password.startsWith(\":\")) {\n                password = password.substring(1);\n            }\n            builder.withPassword(password);\n        }\n\n        return builder.build();\n    }", "@Override\n    public List<DecisionService> getDecisionService() {\n        return drgElement.stream().filter(DecisionService.class::isInstance).map(DecisionService.class::cast).collect(Collectors.toList());\n    }", "  public void setOptions(String[] options) throws Exception {\n    String        tmpStr;\n    String[]      tmpOptions;\n\n    tmpStr = Utils.getOption('F', options);\n    if (tmpStr.length() != 0) {\n      tmpOptions    = Utils.splitOptions(tmpStr);\n      tmpStr        = tmpOptions[0];\n      tmpOptions[0] = \"\";\n      setFilter( \n          (Filter) Utils.forName(Filter.class, tmpStr, tmpOptions));\n    }\n    else {\n      setFilter(new ReplaceMissingValues());\n    }\n    \n    super.setOptions(options);\n  }\n", "public final XAException traceXAException(XAException xae, Class<?> callerClass) { \n\n        String detailedMessage = ivManagedConnection.mcf.helper.getXAExceptionContents(xae); \n        Tr.error(tc, \"DISPLAY_XAEX_CONTENT\", detailedMessage);\n\n        Tr.error(tc, \"THROW_XAEXCEPTION\", new Object[]\n        { AdapterUtil.getXAExceptionCodeString(xae.errorCode), xae.getMessage() });\n\n        return xae;\n    }", "@Override public boolean equals(Object o){\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n  final ScalarReading that=(ScalarReading)o;\n  if (mTimestampMillis != that.mTimestampMillis) {\n    return false;\n  }\n  return Double.compare(that.mValue,mValue) == 0;\n}\n", "public static String getXSIType(Object obj) {\r\n        Class<?> type = obj.getClass();\r\n\r\n        for (int i = 0; i < clazzes.length; i++) {\r\n            if (type == clazzes[i]) {\r\n                return xsdStrs[i];\r\n            }\r\n        }\r\n\r\n        if (obj instanceof java.util.Calendar) {\r\n            return \"xsd:dateTime\";\r\n        }\r\n\r\n        throw new RuntimeException(\"Unknown data type during serialization:\" + type);\r\n    }", "public static void registerLocalTimeMBean ( String containerName ) { MBeanServer mBeanServer = getMBeanServer ( containerName ) ; if ( mBeanServer == null ) return ; LocalTimeMBean localTimeMBean = new LocalTime ( ) ; ObjectName objName = LocalTimeConstants . MBEAN_NAME ; if ( ! mBeanServer . isRegistered ( objName ) ) { try { mBeanServer . registerMBean ( localTimeMBean , objName ) ; } catch ( InstanceAlreadyExistsException e ) { } catch ( NotCompliantMBeanException e ) { if ( _logger . isLoggable ( Level . WARNING ) ) { _logger . log ( Level . SEVERE , failedLocalTimeMBeanRegistrationMessagePrefix + containerName + STR_ , e ) ; } } catch ( MBeanRegistrationException e ) { if ( _logger . isLoggable ( Level . SEVERE ) ) { _logger . log ( Level . SEVERE , failedLocalTimeMBeanRegistrationMessagePrefix + containerName + STR_ , e ) ; } } if ( _logger . isLoggable ( Level . CONFIG ) ) { _logger . config ( successfulTransportMBeanRegistrationMessage + containerName + STR_ ) ; } } }", "private static boolean isAssignableFrom(Type from,ParameterizedType to,Map<String,Type> typeVarMap){\n  if (from == null) {\n    return false;\n  }\n  if (to.equals(from)) {\n    return true;\n  }\n  Class<?> clazz=$Gson$Types.getRawType(from);\n  ParameterizedType ptype=null;\n  if (from instanceof ParameterizedType) {\n    ptype=(ParameterizedType)from;\n  }\n  if (ptype != null) {\n    Type[] tArgs=ptype.getActualTypeArguments();\n    TypeVariable<?>[] tParams=clazz.getTypeParameters();\n    for (int i=0; i < tArgs.length; i++) {\n      Type arg=tArgs[i];\n      TypeVariable<?> var=tParams[i];\n      while (arg instanceof TypeVariable<?>) {\n        TypeVariable<?> v=(TypeVariable<?>)arg;\n        arg=typeVarMap.get(v.getName());\n      }\n      typeVarMap.put(var.getName(),arg);\n    }\n    if (typeEquals(ptype,to,typeVarMap)) {\n      return true;\n    }\n  }\n  for (  Type itype : clazz.getGenericInterfaces()) {\n    if (isAssignableFrom(itype,to,new HashMap<String,Type>(typeVarMap))) {\n      return true;\n    }\n  }\n  Type sType=clazz.getGenericSuperclass();\n  return isAssignableFrom(sType,to,new HashMap<String,Type>(typeVarMap));\n}\n", "public static boolean [ ] [ ] extractSelectedTimePointsReusingArrays ( boolean [ ] [ ] data , int [ ] timePoints ) { boolean [ ] [ ] extracted = new boolean [ timePoints . length ] [ ] ; for ( int t = NUM_ ; t < timePoints . length ; t ++ ) { extracted [ ", "private Constants ( ) { }", "public PartialLoadException ( final CPartialLoadException exception ) { super ( exception ) ; m_module = exception . getModule ( ) . getConfiguration ( ) . getName ( ) ; }", "@Override public void onNewFrame(HeadTransform headTransform){\n  Matrix.rotateM(modelCube,0,TIME_DELTA,0.5f,0.5f,1.0f);\n  Matrix.setLookAtM(camera,0,0.0f,0.0f,CAMERA_Z,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f);\n  headTransform.getHeadView(headView,0);\n  headTransform.getQuaternion(headRotation,0);\n  checkGLError(\"onReadyToDraw\");\n}\n", "private void free(){\n  OffHeapStoredObject chunk=chunks.remove(random.nextInt(chunks.size()));\n  totalAllocation-=chunk.getSize();\n  chunk.release();\n}\n", "public Document create(@NonNull String content, @NonNull Language language, @NonNull Map<AttributeType, ?> attributeMap) {\n      return create(\"\", content, language, attributeMap);\n   }", "protected final CnvTfsEnum\n    createCnvTfsEnum(final String pBeanName,\n      final Class pClass) throws Exception {\n    CnvTfsEnum convrt = new CnvTfsEnum();\n    convrt.setEnumClass(pClass);\n    this.convertersMap.put(pBeanName, convrt);\n    return convrt;\n  }", "public static String STOREtoString() {\n    int[] cnts = new int[1];\n    Object[] kvs = H2O.STORE.raw_array();\n    // Start the walk at slot 2, because slots 0,1 hold meta-data\n    for( int i=2; i<kvs.length; i += 2 ) {\n      // In the raw backing array, Keys and Values alternate in slots\n      Object ov = kvs[i+1];\n      if( !(ov instanceof Value) ) continue; // Ignore tombstones and Primes and null's\n      Value val = (Value)ov;\n      if( val.isNull() ) { Value.STORE_get(val._key); continue; } // Another variant of NULL\n      int t = val.type();\n      while( t >= cnts.length ) cnts = Arrays.copyOf(cnts,cnts.length<<1);\n      cnts[t]++;\n    }\n    StringBuilder sb = new StringBuilder();\n    for( int t=0; t<cnts.length; t++ )\n      if( cnts[t] != 0 )\n        sb.append(String.format(\"-%30s %5d\\n\",TypeMap.CLAZZES[t],cnts[t]));\n    return sb.toString();\n  }", "public void previous ( ) { if ( current ( ) == null ) { return ; } m_currentSearchIndex -- ; m_isBeforeFirst = BOOL_ ; m_isAfterLast = BOOL_ ; if ( m_currentSearchIndex < NUM_ ) { m_currentSearchIndex = m_reducedResults . size ( ) - NUM_ ; m_isBeforeFirst", "@Deprecated\n    public String registerDeviceWithId(String deviceId, String deviceName)\n        throws ApiException, IOException {\n        final Device d = new Device.Builder(projectId).id(deviceId).name(deviceName).build();\n        return registerDevice(d);\n    }", "private static void setField(final Object instance, final Field field, final Object value)\n   {\n      final boolean accessability = field.isAccessible();\n\n      try\n      {\n         field.setAccessible(true);\n         field.set(instance, value);\n      }\n      catch (Exception e)\n      {\n         InjectionException.rethrow(e);\n      }\n      finally\n      {\n         field.setAccessible(accessability);\n      }\n   }", "public List<DetailParam> getParameterFromMethodWithAnnotation(Class<?> parentClass, Method method, Class<?> annotationClass) {\n        List<DetailParam> params = new ArrayList<>();\n        if (method.getParameterCount() < 1) {\n            return params;\n        }\n\n        for (Parameter param : method.getParameters()) {\n\n            Annotation[] annotations = param.getAnnotations();\n\n            for (Annotation annotation : annotations) {\n                if (annotation.annotationType().equals(annotationClass)) {\n                    params.add(new DetailParam(param.getType(), method, parentClass));\n                    break;\n                }\n            }\n        }\n        return params;\n    }", "public static double [ ] constantArray ( int length , double value ) { double [ ] array = new double [ length ] ; Arrays . fill ( array , value ) ; return array ; }", "public void compactFile(long maxCompactTime){\n  store.setRetentionTime(0);\n  long start=System.currentTimeMillis();\n  while (store.compact(95,16 * 1024 * 1024)) {\n    store.sync();\n    store.compactMoveChunks(95,16 * 1024 * 1024);\n    long time=System.currentTimeMillis() - start;\n    if (time > maxCompactTime) {\n      break;\n    }\n  }\n}\n", "public static float [ ] convertFromSigned16BitSamples ( ByteBuffer buffer ) { ShortBuffer byteBuffer = buffer . order ( ByteOrder . LITTLE_ENDIAN ) . asShortBuffer ( ) ; float [ ] samples = new float [ buffer . limit ( ) / NUM_ ] ; for ( int x = NUM_ ; x ", "    public double amount() {\n        return transBank().amount();\n    }\n", "public SearchSourceBuilder aggregation(AbstractAggregationBuilder aggregation){\n  if (aggregations == null) {\n    aggregations=new ArrayList<>();\n  }\n  aggregations.add(aggregation);\n  return this;\n}\n", "    public InputStream getInputStream() {\n        return new InputStream() {\n            private boolean endReached = false;\n\n            @Override\n            public int read() throws IOException {\n                try {\n                    if (this.endReached) {\n                        return -1;\n                    }\n\n                    final Integer value = queue.poll(QUEUE_TIMEOUT,\n                            TimeUnit.SECONDS);\n                    if (value == null) {\n                        throw new IOException(\n                                \"Timeout while reading from the queue-based input stream\");\n                    }\n\n                    this.endReached = (value.intValue() == -1);\n                    return value;\n                } catch (InterruptedException ie) {\n                    throw new IOException(\n                            \"Interruption occurred while writing in the queue\");\n                }\n            }\n        };\n    }\n", "    public boolean isTypeofanalysisidInitialized() {\n        return typeofanalysisid_is_initialized; \n    }\n", "@NotNull private static String defaultDirectoryName(@NotNull final String url,@NotNull final String vcsDirName){\n  String nonSystemName;\n  if (url.endsWith(\"/\" + vcsDirName) || url.endsWith(File.separator + vcsDirName)) {\n    nonSystemName=url.substring(0,url.length() - vcsDirName.length() - 1);\n  }\n else {\n    if (url.endsWith(vcsDirName)) {\n      nonSystemName=url.substring(0,url.length() - vcsDirName.length());\n    }\n else {\n      nonSystemName=url;\n    }\n  }\n  int i=nonSystemName.lastIndexOf('/');\n  if (i == -1 && File.separatorChar != '/') {\n    i=nonSystemName.lastIndexOf(File.separatorChar);\n  }\n  return i >= 0 ? nonSystemName.substring(i + 1) : \"\";\n}\n", "public static void fixAsyncStackTrace(Throwable asyncCause, StackTraceElement[] localSideStackTrace,\n                                          String localExceptionMessage) {\n        Throwable throwable = asyncCause;\n        if (asyncCause instanceof Exec", "protected abstract ByteBuffer convert ( AudioPacket packet ) ;", "public EditableRegistration addContact(URI contact){\n  editContacts.add(contact);\n  return this;\n}", "public GroovySocketServer ( GroovyShell groovy , boolean isScriptFile , String scriptFilenameOrText , boolean autoOutput , int port ) { this ( groovy , getCodeSource ( isScriptFile , scriptFilenameOrText ) , autoOutput , port ) ; }", "protected String createContextXml(WAR war){\n  StringBuilder buffer=new StringBuilder();\n  buffer.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");\n  buffer.append(\"<!DOCTYPE Configure PUBLIC \\\"-//Mort Bay Consulting//DTD Configure//EN\\\" \" + \"\\\"http:", "protected void readBitmap(){\n  currentFrame.ix=readShort();\n  currentFrame.iy=readShort();\n  currentFrame.iw=readShort();\n  currentFrame.ih=readShort();\n  final int packed=read();\n  lctFlag=(packed & 0x80) != 0;\n  lctSize=(int)Math.pow(2,(packed & 0x07) + 1);\n  currentFrame.interlace=(packed & 0x40) != 0;\n  if (lctFlag) {\n    currentFrame.lct=readColorTable(lctSize);\n  }\n else {\n    currentFrame.lct=null;\n  }\n  currentFrame.bufferFrameStart=rawData.position();\n  skipBitmapData();\n  if (err()) {\n    return;\n  }\n  frameCount++;\n  frames.add(currentFrame);\n}\n", "@Override\n    public void processXML() throws InjectionException {\n\n        @SuppressWarnings(\"unchecked\")\n        List<ServiceRef> serviceRefs = (List<ServiceRef>) ivNameSpaceConfig.getWebServiceRefs();\n\n        // no need to do any work if there are no service refs in the XML\n        if (serviceRefs == null || serviceRefs.isEmpty()) {\n            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                Tr.debug(tc, \"No service-refs in XML for module: \" + ivNameSpaceConfig.getModuleName());\n            }\n            return;\n        }\n\n        ClassLoader moduleClassLoader = ivNameSpaceConfig.getClassLoader();\n\n        if (moduleClassLoader == null) {\n            throw new InjectionException(\"Internal Error: The classloader of module \" + ivNameSpaceConfig.getModuleName() + \" is null.\");\n        }\n\n        // get all JAX-WS service refs from deployment descriptor\n        List<ServiceRef> jaxwsServiceRefs = InjectionHelper.normalizeJaxWsServiceRefs(serviceRefs, moduleClassLoader);\n\n        if (jaxwsServiceRefs.isEmpty()) {\n            return;\n        }\n\n        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n            Tr.debug(tc, \"Found JAX-WS service refs in XML for module: \" + ivNameSpaceConfig.getModuleName());\n        }\n\n        // build up the metadata and create WebServiceRefBinding instances that will be used by the injection engine, \n        // then we will be saving off this metadata in the module or component metadata slot for later use by our ServiceRefObjectFactory\n        List<InjectionBinding<WebServiceRef>> bindingList = WebServiceRefBindingBuilder.buildJaxWsWebServiceRefBindings(jaxwsServiceRefs, ivNameSpaceConfig);\n\n        // now add all the bindings that were created\n        if (bindingList != null && !bindingList.isEmpty()) {\n            for (InjectionBinding<WebServiceRef> binding : bindingList) {\n                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                    Tr.debug(tc, \"Adding binding for JAX-WS service-ref: \" + binding.getJndiName());\n                }\n                addInjectionBinding(binding);\n            }\n        }\n\n    }", "private void parseDateHeaderRange(Map<Object, Object> props) {\n        // @313642\n        Object value = props.get(HttpConfigConstants.PROPNAME_DATE_HEADER_RANGE);\n        if (null != value) {\n            try {\n                this.lDateHeaderRange = minLimit(convertLong(value), 0L);\n                if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {\n                    Tr.event(tc, \"Config: date header range is \" + value);\n                }\n            } catch (NumberFormatException nfe) {\n                FFDCFilter.processException(nfe, getClass().getName() + \".parseDateHeaderRange\", \"1\");\n                if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {\n                    Tr.event(tc, \"Config: Invalid date header range; \" + value);\n                }\n            }\n        }\n    }", "  public double evaluate(IChromosome a_chromosome) {\n    int numGenes = a_chromosome.size();\n    if (numGenes != 3) {\n      throw new IllegalArgumentException(\"Chromosome for \" +\n                                         \"MaximizingFunction must have \"\n                                         + \"exactly 3 genes.\");\n    }\n    Integer aVal = (Integer) a_chromosome.getGene(0).getAllele();\n    Integer bVal = (Integer) a_chromosome.getGene(1).getAllele();\n    Integer cVal = (Integer) a_chromosome.getGene(2).getAllele();\n    return (aVal.intValue() - bVal.intValue() + cVal.intValue());\n  }\n", "public static String lrs(String text){\n  int n=text.length();\n  SuffixArray sa=new SuffixArray(text);\n  String lrs=\"\";\n  for (int i=1; i < n; i++) {\n    int length=sa.lcp(i);\n    if (length > lrs.length()) {\n      lrs=text.substring(sa.index(i),sa.index(i) + length);\n    }\n  }\n  return lrs;\n}\n", "public String message() throws HttpRequestException {\n  try {\n    closeOutput();\n    return connection.getResponseMessage();\n  }\n catch (  IOException e) {\n    throw new HttpRequestException(e);\n  }\n}\n", "public Predicate pred ( ) { return pred ; }", "protected void onPageScrolled(int position,float offset,int offsetPixels){\n  if (mDecorChildCount > 0) {\n    final int scrollX=getScrollX();\n    int paddingLeft=getPaddingLeft();\n    int paddingRight=getPaddingRight();\n    final int width=getWidth();\n    final int childCount=getChildCount();\n    for (int i=0; i < childCount; i++) {\n      final View child=getChildAt(i);\n      final LayoutParams lp=(LayoutParams)child.getLayoutParams();\n      if (!lp.isDecor)       continue;\n      final int hgrav=lp.gravity & Gravity.HORIZONTAL_GRAVITY_MASK;\n      int childLeft=0;\nswitch (hgrav) {\ndefault :\n        childLeft=paddingLeft;\n      break;\ncase Gravity.LEFT:\n    childLeft=paddingLeft;\n  paddingLeft+=child.getWidth();\nbreak;\ncase Gravity.CENTER_HORIZONTAL:\nchildLeft=Math.max((width - child.getMeasuredWidth()) / 2,paddingLeft);\nbreak;\ncase Gravity.RIGHT:\nchildLeft=width - paddingRight - child.getMeasuredWidth();\npaddingRight+=child.getMeasuredWidth();\nbreak;\n}\nchildLeft+=scrollX;\nfinal int childOffset=childLeft - child.getLeft();\nif (childOffset != 0) {\nchild.offsetLeftAndRight(childOffset);\n}\n}\n}\nif (mOnPageChangeListener != null) {\nmOnPageChangeListener.onPageScrolled(position,offset,offsetPixels);\n}\nif (mInternalPageChangeListener != null) {\nmInternalPageChangeListener.onPageScrolled(position,offset,offsetPixels);\n}\ntransformPages();\nmCalledSuper=true;\n}\n", "public static void removeResolvedFunction ( final Window parent , final INaviFunction function ) { try { function . removeForwardedFunction ( ) ; } catch ( final CouldntSaveDataException e ) { CUtilityFunctions . logException ( e ) ; final String innerMes", "protected Map<String,String> parseOAuthResponseParameters(String responseParameters){\n  if (responseParameters == null) {\n    throw new MCApiRuntimeException(NULL_RESPONSE_PARAMETERS_ERROR);\n  }\n  Map<String,String> result=new HashMap<String,String>();\n  String[] parameters=responseParameters.split(AMP);\n  for (  String parameter : parameters) {\n    String[] keyValue=parameter.split(EQUALS);\n    if (keyValue.length == 2) {\n      result.put(keyValue[0],keyValue[1]);\n    }\n  }\n  return result;\n}\n", "@Override\n  public final FctBcFctSimpleEntities\n    lazyGetFctBcFctSimpleEntities() throws Exception {\n    String beanName = this.factoryAppBeans.getFctBcFctSimpleEntitiesName();\n    FctBcFctSimpleEntities fctBcFctSimpleEntities =\n      (FctBcFctSimpleEnt", "public void testComputeSignificanceDoesntAlterAverage ( ConditionalTransferEntropyCalculator teCalc , int timeSteps , int k ) throws Exception { teCalc . initialise ( k , NUM_ , NUM_ ) ; RandomGenerator rg = new RandomGenerator ( ) ; double [ ] sourceData", "    private void closeDown (RequestHandler rh) {\n\tif (rh.wc != null) {\n\t    proxy.releaseWebConnection (rh.wc);\n\t    rh.wc = null;\n\t} else if (rh.entry != null) {\n\t    try {\n\t\tFileChannel fc = rh.contentStream.getFileChannel ();\n\t\tif (fc != null) {\n\t\t    fc.close ();\n\t\t}\n\t\trh.contentStream.close ();\n\t    } catch (IOException e) {\n\t\tproxy.logError (Logger.WARN, \"Error closing stream:\" + e);\n\t\tsetKeepalive (false);\t\t\t\n\t    }\n\t    rh.entry = null;\n\t}\n    }\n", "void mouseReleased ( MouseEvent event ) ;", "    public void setNewSource(CompNode newSource) {\n        setLabel(Messages.getString(\"CompConnectionReconnectionCommand.source\")); //$NON-NLS-1$\n        this.newTarget = null;\n        this.newSource = newSource;\n    }\n", "    public void mouseWheelMoved(MouseWheelEvent e) {\n        for (int i = 0; i < amountMouseListeners; i++) {\n            ((Canvas3DMouseListener) continuousMouseListeners.elementAt(i))\n                .mouseWheelMoved(e);\n        }\n\n        if (currentMouseListener != null) {\n            currentMouseListener.mouseWheelMoved(e);\n        }\n    }\n", "    public void acceptAnnouncement(MauMauPlayerAnnouncement an, long moveToken) throws MauMauTableException {\n\n        guardToken(moveToken);\n\n        LOGGER.info(getName() + \".acceptAnnouncement(\" + an + \", \" + moveToken + \") - bound to \" + getMovingPlayer() + \" (\" + getMovingPlayer().usedToken(moveToken) + ')');\n\n        // check rules and their violation and raise an exception, success will be reported later on with #cardPut(long)\n        move.acceptAnnouncement(an, new Long(moveToken));\n\n        LOGGER.info(getName() + \".acceptAnnouncement(\" + an + \", \" + moveToken + \") - accepted \" + an);\n    }\n", "\tprivate void initListProject() {\n\t\tString [] projects = getProjects();\n\t\tproject.removeAll();\n\t\tfor (int i = 0 ; i < projects.length; i++)\n\t\t{\n\t\t\tproject.add(projects[i]);\n\t\t}\n\t\tproject.select(0);\n\t}\n", "public void paintFileChooserBackground ( SynthContext context , Graphics g , int x , int y , int w , int h ) { }", "  public Object getElementAt (int nIdx) {\n    return m_spModel.getCustomers().get (nIdx);\n  }\n", "@SuppressWarnings(\"unchecked\")\n    @Override\n    public void apply(FaceletContext ctx, UIComponent parent) throws IOException\n    {\n        // make sure our parent is not null\n        if (parent == null)\n        {\n            throw new TagException(_delegate.getTag(), \"Parent UIComponent was null\");\n        }\n        \n        FacesContext facesContext = ctx.getFacesContext();\n\n        // possible facet scoped\n        String facetName = this.getFacetName(ctx, parent);\n\n        // our id\n        String id = ctx.generateUniqueId(_delegate.getTagId());\n\n        // Cast to use UniqueIdVendor stuff\n        FaceletCompositionContext mctx = (FaceletCompositionContext) FaceletCompositionContext.getCurrentInstance(ctx);\n                \n        // grab our component\n        UIComponent c = null;\n        //boolean componentFoundInserted = false;\n\n        //Used to preserve the original parent. Note when the view is being refreshed, the real parent could be\n        //another component.\n        UIComponent oldParent = parent;\n        \n        if (mctx.isRefreshingSection())\n        {\n            if (_relocatableResourceHandler != null)\n            {\n                c = _relocatableResourceHandler.findChildByTagId(ctx, parent, id);\n            }\n            else\n            {\n                if (facetName != null)\n                {\n                    c = ComponentSupport.findChildInFacetByTagId(parent, id, facetName);\n                }\n                else\n                {\n                    c = ComponentSupport.findChildInChildrenByTagId(parent, id);\n                }\n            }\n        }\n        boolean componentFound = false;\n        if (c != null)\n        {\n            componentFound = true;\n            // Check if the binding needs dynamic refresh and if that so, invoke the refresh from this location, to\n            // preserve the same context\n            if (_delegate.getBinding() != null &&\n                c.getAttributes().containsKey(\n                    FaceletDynamicComponentRefreshTransientBuildEvent.DYNAMIC_COMPONENT_BINDING_NEEDS_REFRESH))\n            {\n                VisitContext visitContext = (VisitContext) mctx.getVisitContextFactory().\n                    getVisitContext(facesContext, null, VISIT_HINTS_DYN_REFRESH);\n                c.visitTree(visitContext, new PublishFaceletDynamicComponentRefreshTransientBuildCallback());\n            }\n            \n            mctx.incrementUniqueComponentId();\n            \n            // mark all children for cleaning\n            if (log.isLoggable(Level.FINE))\n            {\n                log.fine(_delegate.getTag() + \" Component[\" + id + \"] Found, marking children for cleanup\");\n            }\n\n            // The call for mctx.markForDeletion(c) is always necessary, because\n            // component resource relocation occur as an effect of PostAddToViewEvent,\n            // so at this point it is unknown if the component was relocated or not.\n            mctx.markForDeletion(c);\n\n            if (_relocatableResourceHandler != null)\n            {\n                mctx.markRelocatableResourceForDeletion(c);\n            }\n        }\n        else\n        {\n            c = this.createComponent(ctx);\n            if (log.isLoggable(Level.FINE))\n            {\n                log.fine(_delegate.getTag() + \" Component[\" + id + \"] Created: \" + c.getClass().getName());\n            }\n            \n            _delegate.setAttributes(ctx, c);\n\n            // mark it owned by a facelet instance\n            c.getAttributes().put(ComponentSupport.MARK_CREATED, id);\n\n            if (facesContext.isProjectStage(ProjectStage.Development))\n            {\n                c.getAttributes().put(UIComponent.VIEW_LOCATION_KEY,\n                        _delegate.getTag().getLocation());\n            }\n\n            // assign our unique id\n            if (this._id != null)\n            {\n                mctx.incrementUniqueComponentId();\n                c.setId(this._id.getValue(ctx));\n            }\n            else\n            {\n                String componentId = mctx.generateUniqueComponentId();\n                UniqueIdVendor uniqueIdVendor = mctx.getUniqueIdVendorFromStack();\n                if (uniqueIdVendor == null)\n                {\n                    uniqueIdVendor = facesContext.getViewRoot();\n                    \n                    if (uniqueIdVendor == null)\n                    {\n                        // facesContext.getViewRoot() returns null here if we are in\n                        // phase restore view, so we have to try to get the view root\n                        // via the method in ComponentSupport and our parent\n                        uniqueIdVendor = ComponentSupport.getViewRoot(ctx, parent);\n                    }\n                }\n                if (uniqueIdVendor != null)\n                {\n                    // UIViewRoot implements UniqueIdVendor, so there is no need to cast to UIViewRoot\n                    // and call createUniqueId()\n                    String uid = uniqueIdVendor.createUniqueId(facesContext, componentId);\n                    c.setId(uid);\n                }\n            }\n\n            if (this._rendererType != null)\n            {\n                c.setRendererType(this._rendererType);\n            }\n\n            // hook method\n            _delegate.onComponentCreated(ctx, c, parent);\n            \n            if (_relocatableResourceHandler != null && \n                _relocatableResourceHandler instanceof ComponentRelocatableResourceHandler)\n            {\n                UIComponent parentCompositeComponent\n                        = mctx.getCompositeComponentFromStack();\n                if (parentCompositeComponent != null)\n                {\n                    c.getAttributes().put(CompositeComponentELUtils.LOCATION_KEY,\n                            parentCompositeComponent.getAttributes().get(CompositeComponentELUtils.LOCATION_KEY));\n                }\n            }\n            \n            if (mctx.isRefreshingTransientBuild() && _relocatableResourceHandler != null)\n            {\n                mctx.markRelocatableResourceForDeletion(c);\n            }\n        }\n        c.pushComponentToEL(facesContext, c);\n\n        if (c instanceof UniqueIdVendor)\n        {\n            mctx.pushUniqueIdVendorToStack((UniqueIdVendor)c);\n        }\n        \n        if (mctx.isDynamicComponentTopLevel())\n        {\n            mctx.setDynamicComponentTopLevel(false);\n            _delegate.applyNextHandler(ctx, c);\n            mctx.setDynamicComponentTopLevel(true);\n        }\n        else\n        {\n            // first allow c to get populated\n            _delegate.applyNextHandler(ctx, c);\n        }\n        \n        boolean oldProcessingEvents = facesContext.isProcessingEvents();\n        // finish cleaning up orphaned children\n        if (componentFound && !mctx.isDynamicComponentTopLevel())\n        {\n            mctx.finalizeForDeletion(c);\n\n            //if (!componentFoundInserted)\n            //{\n                if (mctx.isRefreshingSection())\n                {\n                    facesContext.setProcessingEvents(false);\n                    if (_relocatableResourceHandler != null &&\n                        parent != null && !parent.equals(c.getParent()))\n                    {\n                        // Replace parent with the relocated parent.\n                        parent = c.getParent();\n                        // Since we changed the parent, the facetName becomes invalid, because it points\n                        // to the component before relocation. We need to find the right facetName (if any) so we can\n                        // refresh the component properly.\n                        UIComponent c1 = ComponentSupport.findChildInChildrenByTagId(parent, id);\n                        if (c1 == null)\n                        {\n                            facetName = ComponentSupport.findChildInFacetsByTagId(parent, id);\n                        }\n                        else\n                        {\n                            facetName = null;\n                        }\n                    }\n                    ComponentSupport.setCachedFacesContext(c, facesContext);\n                }\n                if (facetName == null)\n                {\n                    parent.getChildren().remove(c);\n                }\n                else\n                {\n                    ComponentSupport.removeFacet(ctx, parent, c, facetName);\n                }\n                if (mctx.isRefreshingSection())\n                {\n                    ComponentSupport.setCachedFacesContext(c, null);\n                    facesContext.setProcessingEvents(oldProcessingEvents);\n                }\n            //}\n        }\n\n\n        if (!componentFound)\n        {\n            if (c instanceof ClientBehaviorHolder && !UIComponent.isCompositeComponent(c))\n            {\n                Iterator<AjaxHandler> it = ((AbstractFaceletContext) ctx).getAjaxHandlers();\n                if (it != null)\n                {\n                    while(it.hasNext())\n                    {\n                        it.next().applyAttachedObject(facesContext, c);\n                    }\n                }\n            }\n            \n            if (c instanceof EditableValueHolder)\n            {\n                // add default validators here, because this feature \n                // is only available in facelets (see MYFACES-2362 for details)\n                addEnclosingAndDefaultValidators(ctx, mctx, facesContext, (EditableValueHolder) c);\n            }\n        }\n        \n        _delegate.onComponentPopulated(ctx, c, oldParent);\n\n        if (!mctx.isDynamicComponentTopLevel() || !componentFound)\n        {\n            if (componentFound && mctx.isRefreshingSection())\n            {\n                facesContext.setProcessingEvents(false);\n                ComponentSupport.setCachedFacesContext(c, facesContext);\n            }\n            if (facetName == null)\n            {\n                parent.getChildren().add(c);\n            }\n            else\n            {\n                ComponentSupport.addFacet(ctx, parent, c, facetName);\n            }\n            if (componentFound && mctx.isRefreshingSection())\n            {\n                ComponentSupport.setCachedFacesContext(c, null);\n                facesContext.setProcessingEvents(oldProcessingEvents);\n            }\n        }\n\n        if (c instanceof UniqueIdVendor)\n        {\n            mctx.popUniqueIdVendorToStack();\n        }\n\n        c.popComponentFromEL(facesContext);\n        \n        if (mctx.isMarkInitialState())\n        {\n            //Call it only if we are using partial state saving\n            c.markInitialState();\n        }\n    }", "public void mergeVertexDescription(VertexDescription src) {\n\t\t_touch();\n\t\tif (src == m_description)\n\t\t\treturn;\n\n\t\t// check if we need to do anything (if the src has same attributes)\n\t\tVertexDescription newdescription = VertexDescriptionDesignerImpl.getMergedVertexDescription(m_description, src);\n\t\tif (newdescription == m_description)\n\t\t\treturn;\n\t\t\n\t\t_assignVertexDescriptionImpl(newdescription);\n\t}", "private CountingThreadPoolExecutor createExecutor(int numThreads){\n  return new CountingThreadPoolExecutor(maxThreadNum == -1 ? numThreads : Math.min(maxThreadNum,numThreads),Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());\n}\n", "public void addField(final String name, final Object value) {\n        if (value == null) {\n            this.fields.add(new Field(name, null, null));\n        } else {\n            this.fields.add(new Field(name, value.toString(), value.getClass().getName()));\n        }\n    }", "public void onWebsocketMessage ( WebSocket conn , String message ) ;", "public boolean checkIfScanIsNotPresentForUser(final String userId,final String scanId) throws UnsupportedEncodingException, ParserConfigurationException, IOException, SAXException, DASTProxyException, XPathExpressionException {\n  LOGGER.debug(\"Inside checkIfScanIsNotPresentForUser...1\");\n  boolean retValue=true;\n  try {\n    final XPathFactory factory=XPathFactory.newInstance();\n    final XPath xpath=factory.newXPath();\n    LOGGER.debug(\"Inside checkIfScanIsNotPresentForUser...2\");\n    xpath.setNamespaceContext(_nsContext);\n    Document response=sendRESTRequestToASE(AppScanConstants.APPSCAN_BASE_URL + \"folders/\" + userId+ \"/folderitems\",\"\");\n    LOGGER.debug(\"Inside checkIfScanIsNotPresentForUser...3...response...=\" + response);\n    LOGGER.debug(\"Check if scan exists in the system. \");\n    checkForError(response,null);\n    final XPathExpression expr=xpath.compile(\"//ase:folder-items/ase:content-scan-job[contains(ase:id,'\" + scanId + \"')]/ase:id/text()\");\n    LOGGER.debug(\"Inside checkIfScanIsNotPresentForUser...4....expr=\" + expr);\n    final String id=(String)expr.evaluate(response,XPathConstants.STRING);\n    LOGGER.debug(\"Inside checkIfScanIsNotPresentForUser...5....id=\" + id);\n    if (id != null && !id.isEmpty()) {\n      LOGGER.debug(\"Inside checkIfScanIsNotPresentForUser...6\");\n      retValue=false;\n    }\n  }\n catch (  ConnectException ce) {\n    LOGGER.error(\"Failed in checking if the scan is present for user...userId=\" + userId + \" scanId=\"+ scanId);\n    LOGGER.error(ce);\n  }\n  return retValue;\n}\n", "  public CacheableIdentity append(CacheableIdentity old) {\n    // make a copy of old, and add new attributes from this to id\n    CacheableIdentity id = old.copy();\n\n    for (int i = 0; i < pairSize(); ++i) {\n      int j = 0;\n      for ( ; j < old.pairSize(); ++j) {\n\tif (getType(i) == old.getType(j)) {\n\t  if(!getName(i).equals(old.getName(j)))\n\t     Carp.die(\"problem with type: \" + getType(i));\n\t  break;\n\t}\n      }\n      if (j == old.pairSize()) { //could not find it, so append it\n\tid.addPair(getType(i), getName(i));\n      }\n    }\n    return id;\n  }\n", "public static BufferedWriter newWriter(Path self,String charset) throws IOException {\n  return newWriter(self,charset,false);\n}\n", "@SuppressWarnings(\"ReferenceEquality\")\n  final boolean isImplicitPrototype(ObjectType prototype) {\n    for (ObjectType current = this; current != null; current = current.getImplicitPrototype()) {\n      if (current.isTemplatizedType()) {\n        current = ", "public ScreenFieldView setupScreenFieldView(boolean bEditableControl)\n    {\n        String screenClass = null;\n        String strDatatype = this.getProperty(DBParams.DATATYPE);\n        if (DBParams.TABLE_PARAM.equalsIgnoreCase(strDatatype))\n            screenClass = \"DTableAccessScreen\";\n        else if (DBParams.WEBSTART_PARAM.equalsIgnoreCase(strDatatype))\n            screenClass = \"DJnlpAccessScreen\";\n        else if (DBParams.WEBSTART_APPLET_PARAM.equalsIgnoreCase(strDatatype))\n            screenClass = \"DJnlpAccessScreen\";\n        else if (DBParams.WSDL_PARAM.equalsIgnoreCase(strDatatype))\n            screenClass = \"org.jbundle.main.msg.wsdl.DWsdlAccessScreen\";\n        else //if (DBParams.IMAGE_PATH.equalsIgnoreCase(strDatatype))\n            screenClass = \"DObjectAccessScreen\";\n\n        if ((screenClass != null) && (screenClass.indexOf('.') == -1))\n            screenClass = ScreenFieldViewAdapter.class.getPackage().getName() + \".data.\" + screenClass;\n        ScreenFieldView dataScreen = (ScreenFieldView)ClassServiceUtility.getClassService().makeObjectFromClassName(screenClass);    // Ignore class not found\n\n        dataScreen.init(this, bEditableControl);\n        return dataScreen;\n    }", "\tpublic Object lessThan(final Object arg0, final Object arg1) {\n\n\t\tOperation op = new LT();\n\t\top.setLeftOperand((Expression) arg0);\n\t\top.setRightOperand((Expression) arg1);\n\n\t\treturn op;\n\t}\n", "public abstract JsonValue sync ( ) throws SynchronizationException ;", "public void parse(UNode aliasNode) {\r\n        assert aliasNode != null;\r\n        \r\n        // Ensure the alias name is valid and save it.\r\n        setName(aliasNode.getName());\r\n        \r\n        // The only child element we expect is \"expression\".\r\n        for (String childName : aliasNode.getMemberNames()) {\r\n            // All child nodes must be values.\r\n            UNode childNode = aliasNode.getMember(childName);\r\n            Utils.require(childNode.isValue(),\r\n                          \"Value of alias attribute must be a string: \" + childNode);\r\n            Utils.require(childName.equals(\"expression\"),\r\n                          \"'expression' expected: \" + childName);\r\n            Utils.require(m_expression == null,\r\n                          \"'expression' can only be specified once\");\r\n            setExpression(childNode.getValue());\r\n        }\r\n\r\n        // Ensure expression was specified.\r\n        Utils.require(m_expression != null, \"Alias definition missing 'expression': \" + aliasNode);\r\n    }", "@Override protected void calculateBarWidth(CategoryPlot plot,Rectangle2D dataArea,int rendererIndex,CategoryItemRendererState state){\n  CategoryAxis domainAxis=getDomainAxis(plot,rendererIndex);\n  CategoryDataset dataset=plot.getDataset(rendererIndex);\n  if (dataset != null) {\n    int columns=dataset.getColumnCount();\n    int rows=dataset.getRowCount();\n    double space=0.0;\n    PlotOrientation orientation=plot.getOrientation();\n    if (orientation == PlotOrientation.HORIZONTAL) {\n      space=dataArea.getHeight();\n    }\n else     if (orientation == PlotOrientation.VERTICAL) {\n      space=dataArea.getWidth();\n    }\n    double maxWidth=space * getMaximumBarWidth();\n    double categoryMargin=0.0;\n    if (columns > 1) {\n      categoryMargin=domainAxis.getCategoryMargin();\n    }\n    double used=space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin()- categoryMargin);\n    if ((rows * columns) > 0) {\n      state.setBarWidth(Math.min(used / (dataset.getColumnCount()),maxWidth));\n    }\n else {\n      state.setBarWidth(Math.min(used,maxWidth));\n    }\n  }\n}\n", "public static Id parse ( final String str ) { final Id r = new Id ( ) ; r . fromString ( str ) ; return r ; }", "public void clearCache ( ) { clearMemoryCache ( ) ; clearDiskCache ( ) ; }", "  public void hasBeenHit() {\n    wasHit = true;\n  }\n", "public void update(long value,long timestamp){\n  rescaleIfNeeded();\n  lockForRegularUsage();\n  try {\n    final double priority=weight(timestamp - startTime) / random.nextDouble();\n    final long newCount=count.incrementAndGet();\n    if (newCount <= reservoirSize) {\n      values.put(priority,value);\n    }\n else {\n      Double first=values.firstKey();\n      if (first < priority) {\n        if (values.putIfAbsent(priority,value) == null) {\n          while (values.remove(first) == null) {\n            first=values.firstKey();\n          }\n        }\n      }\n    }\n  }\n  finally {\n    unlockForRegularUsage();\n  }\n}\n", "public CreateTableResponse createTable(CreateTableRequest request) {\n        checkNotNull(request, \"request should not be null.\");\n        InternalRequest httpRequest = createRequestUnderInstance(HttpMethodName.POST,\n                MolaDbConstants.URI_TABLE);\n        fillInHeadAndBody(request, httpRequest);\n        CreateTableResponse ret = this.invokeHttpClient(httpRequest, CreateTableResponse.class);\n        return ret;\n    }", "public Properties toProperties ( ) { Properties props = new Properties ( ) ; flatten ( props ) ; props = convertValuesToString ( props ) ; return props ; }", "    public void reloadList() {\n      loadSyns();\n    }\n", "public Object clone ( ) { try { EntryRep entry = ( EntryRep ) super . clone ( ) ; entry . fields = entry . fields . clone ( ) ; return entry ; } catch ( CloneNotSupportedException e ) { throw new InternalError ( ) ; } }", "\tprotected void addIsRootPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_EveEvolutionaryAgent_isRoot_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_EveEvolutionaryAgent_isRoot_feature\", \"_UI_EveEvolutionaryAgent_type\"),\n\t\t\t\t SocialNetworkAnalysisPackage.Literals.EVE_EVOLUTIONARY_AGENT__IS_ROOT,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "    public Node renameNode(Node n, String namespaceURI, String qualifiedName) throws DOMException {\n        if (!(n instanceof NodeImpl) || n.getOwnerDocument() != this) {\n            throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, \"Node was created from a different document\");\n        }\n\n        int idx = qualifiedName.indexOf(':');\n        String prefix = idx >= 0 ? qualifiedName.substring(0, idx) : null;\n\n        if (prefix != null && (\"\".equals(prefix) || namespaceURI == null || \"\".equals(namespaceURI))) {\n            throw new DOMException(DOMException.NAMESPACE_ERR, \"Malformed qualified name '\" + qualifiedName + \"'.\");\n        }\n\n        return ((NodeImpl) n).renameNode(namespaceURI, qualifiedName, prefix);\n    }\n", "public SpaceEntryPropertyGetter ( String name ) { this . _propertyName = name ; this . _propertyIndex = - NUM_ ; }", "@SuppressWarnings(\"unchecked\")\n\tpublic UserAuthentication getOrCreateUser(App app, String accessToken) throws IOException {\n\t\tUserAuthentication userAuth = null;\n\t\tUser user = new User();\n\t\tif (accessToken != null) {\n\t\t\tString ctype = null;\n\t\t\tHttpEntity respEntity = null;\n\t\t\tCloseableHttpResponse resp2 = null;\n\t\t\ttry {\n\t\t\t\tHttpGet profileGet = new HttpGet(PROFILE_URL + accessToken);\n\t\t\t\tresp2 = httpclient.execute(profileGet);\n\t\t\t\trespEntity = resp2.getEntity();\n\t\t\t\tctype = resp2.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue();\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.warn(\"Facebook auth request failed: GET \" + PROFILE_URL + accessToken, e);\n\t\t\t}\n\n\t\t\tif (respEntity != null && Utils.isJsonType(ctype)) {\n\t\t\t\tMap<String, Object> profile = jreader.readValue(respEntity.getContent());\n\n\t\t\t\tif (profile != null && profile.containsKey(\"id\")) {\n\t\t\t\t\tString fbId = (String) profile.get(\"id\");\n\t\t\t\t\tString email = (String) profile.get(\"email\");\n\t\t\t\t\tString name = (String) profile.get(\"name\");\n\n\t\t\t\t\tuser.setAppid(getAppid(app));\n\t\t\t\t\tuser.setIdentifier(Config.FB_PREFIX.concat(fbId));\n\t\t\t\t\tuser.setEmail(email);\n\t\t\t\t\tuser = User.readUserForIdentifier(user);\n\t\t\t\t\tif (user == null) {\n\t\t\t\t\t\t//user is new\n\t\t\t\t\t\tuser = new User();\n\t\t\t\t\t\tuser.setActive(true);\n\t\t\t\t\t\tuser.setAppid(getAppid(app));\n\t\t\t\t\t\tuser.setEmail(StringUtils.isBlank(email) ? fbId + \"@facebook.com\" : email);\n\t\t\t\t\t\tuser.setName(StringUtils.isBlank(name) ? \"No Name\" : name);\n\t\t\t\t\t\tuser.setPassword(Utils.generateSecurityToken());\n\t\t\t\t\t\tuser.setPicture(getPicture(fbId));\n\t\t\t\t\t\tuser.setIdentifier(Config.FB_PREFIX.concat(fbId));\n\t\t\t\t\t\tString id = user.create();\n\t\t\t\t\t\tif (id == null) {\n\t\t\t\t\t\t\tthrow new AuthenticationServiceException(\"Authentication failed: cannot create new user.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tString picture = getPicture(fbId);\n\t\t\t\t\t\tboolean update = false;\n\t\t\t\t\t\tif (!StringUtils.equals(user.getPicture(), picture)) {\n\t\t\t\t\t\t\tuser.setPicture(picture);\n\t\t\t\t\t\t\tupdate = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!StringUtils.isBlank(email) && !StringUtils.equals(user.getEmail(), email)) {\n\t\t\t\t\t\t\tuser.setEmail(email);\n\t\t\t\t\t\t\tupdate = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (update) {\n\t\t\t\t\t\t\tuser.update();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tuserAuth = new UserAuthentication(new AuthenticatedUserDetails(user));\n\t\t\t\t}\n\t\t\t\tEntityUtils.consumeQuietly(respEntity);\n\t\t\t}\n\t\t}\n\t\treturn SecurityUtils.checkIfActive(userAuth, user, false);\n\t}", "private void growBondArray() {\n        growArraySize = (bonds.length < growArraySize) ? growArraySize : bonds.length;\n        IBond[] newBonds = new IBond[bonds.length + growArraySize];\n        System.arraycopy(bonds, 0, newBonds, 0, bonds.length);\n        bonds = newBonds;\n    }", "@ReplacedBy(\"com.google.common.primitives.Ints#toArray()\")\n    public static int[] toIntArray (Collection<Integer> col)\n    {\n        Iterator<Integer> iter = col.iterator();\n        int[] array = new int[col.size()];\n        for (int i = 0; iter.hasNext(); i++) {\n            array[i] = iter.next().intValue();\n        }\n        return array;\n    }", "public static boolean isValidAction(final String action){\n  if (action == null) {\n    return false;\n  }\n else {\n    return ACTIONS.contains(action);\n  }\n}\n", "public PublicationsFile create(InputStream input) throws KSIException {\n        InMemoryPublicationsFile publicationsFile = new InMemoryPublicationsFile(input);\n\n        CMSSignature signature = publicationsFile.getSignature();\n        CMSSignatureVerifier verifier = new CMSSignatureVerifier(trustStore);\n        verifier.verify(signature);\n        return publicationsFile;\n    }", "public void write(File file) throws IOException {\n  outList.add(file);\n  if (watcher != null) {\n    watcher.watch(file);\n  }\n}\n", "    public void useGUI() {\n        myThread = new Thread(this);\n        myThread.run();\n    }\n", "public Iterator < InstructionHandle > instructionReverseIterator ( ) { return new InstructionReverseIterator ( lastInstruction , firstInstruction ) ; }", "public static ReactiveSeq<Integer> range(final int start,final int end){\n  final ReversingRangeIntSpliterator range=new ReversingRangeIntSpliterator(start,end,false);\n  return StreamUtils.reactiveSeq(StreamSupport.stream(range,false),Optional.ofNullable(range));\n}\n", "public boolean offer(E o){\n  if (null == o) {\n    throw new NullPointerException();\n  }\n  growToSize(size + 1);\n  elements[size]=o;\n  siftUp(size++);\n  return true;\n}\n", "public void sendPacketToAllInDimension ( IPacket packet , int dimension ) { checkClassAndSync ( packet . getClass ( ) ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . DIMENSION ) ; s", "private static void createNotifTimerThread(){\n  setLastNotifTime(0);\n  notifTimeoutThread=new Thread(new NotifTimeoutHandler());\n  try {\n    notifTimeoutThread.setName(\"Notifications Timeout\");\n  }\n catch (  SecurityException e) {\n    Logger.Error(\"Access denied attempting to set the name of the notifications thread. This is not fatal.\");\n  }\n  notifTimeoutThread.setDaemon(true);\n  notifTimeoutThread.start();\n}\n", "public static JSONObject JsonNonResponsePost ( String url , String bssid , JSONObject postJSON ) { return JsonNonResponsePost ( url , bssid , SERIAL_NORMAL_TASK , postJSON ) ; }", "@Override public String graph() throws Exception {\n  if (m_Tree == null) {\n    throw new Exception(\"REPTree: No model built yet.\");\n  }\n  StringBuffer resultBuff=new StringBuffer();\n  m_Tree.toGraph(resultBuff,0,null);\n  String result=\"digraph Tree {\\n\" + \"edge [style=bold]\\n\" + resultBuff.toString() + \"\\n}\\n\";\n  return result;\n}\n", "public static String toHex(ModbusMessage msg) {\n        BytesOutputStream byteOutputStream = new BytesOutputStream(Modbus.MAX_MESSAGE_LENGTH);\n        String ret = \"-1\";\n        try {\n            msg.writeTo(byteOutputStream);\n            ret = toHex(byteOutputStream.getBuffer(), 0, byteOutputStream.size());\n        }\n        catch (IOException ex) {\n            logger.debug(\"Hex conversion error {}\", ex);\n        }\n        return ret;\n    }", "public static boolean strictlyBetween(Date baseDate,Date startDate,Date endDate){\n  if (startDate.equals(endDate) || endDate.before(startDate)) {\n    return false;\n  }\n  if (startDate.before(baseDate) && endDate.after(baseDate)) {\n    return true;\n  }\n  return false;\n}\n", "private void add(SessionID sessionID){\n  remoteSessionSet.add(sessionID);\n}\n", "protected void checkGETPUTSupport()\n        throws ServerException, IOException\n    {\n        if (!isFeatureSupported(FeatureList.GETPUT)) {\n            throw new ServerException(ServerException.UNSUPPORTED_FEATURE);\n        }\n\n        if (controlChannel.isIPv6()) {\n            throw new ServerException(ServerException.UNSUPPORTED_FEATURE,\n                                      \"Cannot use GridFTP2 with IP 6\");\n        }\n    }", "\tpublic boolean isCompilation() {\n\t\treturn tagState == TagEnum.ALL_DIFF_TAGS || tagState == TagEnum.SOME_DIFF_TAGS;\n\t}\n", "Type fold(int opcode, List<Type> argtypes) {\n        int argCount = argtypes.length();\n        if (argCount == 1)\n            return fold1(opcode, argtypes.head);\n        else if (argCount == 2)\n            return fold2(opcode, argtypes.head, argtypes.tail.head);\n        else\n            throw new AssertionError();\n    }", "public Set<String> mutexJobTypesFor(final String jobType) {\n        final Set<String> result = new HashSet<>();\n        this.mutexGroups\n                .stream()\n                .map(JobMutexGroup::getJobTypes)\n                .filter(g -> g.contains(jobType))\n                .forEach(result::addAll);\n        result.remove(jobType);\n        return result;\n    }", "private void readPICTHeader(final ImageInputStream pStream) throws IOException {\n        pStream.seek(0l);\n\n        try {\n            readPICTHeader0(pStream);\n        }\n        catch (IIOException e) {\n            // Rest and try again\n            pStream.seek(0l);\n\n            // Skip first 512 bytes\n            PICTImageReaderSpi.skipNullHeader(pStream);\n            readPICTHeader0(pStream);\n        }\n    }", "public void addAdditionalSymbolClass(FXGSymbolClass symbolClass){\n  if (additionalSymbolClasses == null)   additionalSymbolClasses=new ArrayList<FXGSymbolClass>();\n  additionalSymbolClasses.add(symbolClass);\n}\n", "private static boolean isValuelessAttribute(String attribName) {\n    boolean valueless = VALUELESS_ATTRIB_NAMES.contains(\n        Strings.toLowerCase(attribName));\n    return valueless;\n  }", "public final TBPar impliedSuccessors ( ) { TBPar successors = new TBPar ( this . size ( ) ) ; for ( int i = NUM_ ; i < this . size ( ) ; i ++ ) { LiveExprNode ln = this . exprAt ( i ) ; if ( ln instanceof LNNext ) { successors . addElement ( ( ( LNNext ) ln ) . getBody ( ) ) ; } } return successors ; }", "private static void addCommonPermissions(Permissions permissions){\n  permissions.add(new AudioPermission(\"play\"));\n  permissions.add(new AWTPermission(\"listenToAllAWTEvents\"));\n  permissions.add(new AWTPermission(\"setWindowAlwaysOnTop\"));\n  permissions.add(new AWTPermission(\"watchMousePointer\"));\n  permissions.add(new LoggingPermission(\"control\",\"\"));\n  permissions.add(new SocketPermission(\"*\",\"connect, listen, accept, resolve\"));\n  permissions.add(new URLPermission(\"http://-\",\"*:*\"));\n  permissions.add(new URLPermission(\"https://-\",\"*:*\"));\n  permissions.add(new RuntimePermission(\"accessClassInPackage.sun.*\"));\n  permissions.add(new RuntimePermission(\"accessDeclaredMembers\"));\n  permissions.add(new RuntimePermission(\"getenv.*\"));\n  permissions.add(new RuntimePermission(\"getFileSystemAttributes\"));\n  permissions.add(new RuntimePermission(\"readFileDescriptor\"));\n  permissions.add(new RuntimePermission(\"writeFileDescriptor\"));\n  permissions.add(new RuntimePermission(\"queuePrintJob\"));\n}\n", "public void train(String sUpdateText,boolean bResetExisting){\n  if (!bResetExisting)   FullTextDataString=FullTextDataString + sUpdateText;\n else   FullTextDataString=sUpdateText;\n  for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {\n    DistributionDocument dCur=DistroDocs.get(iCnt);\n    if (dCur != null)     if (!bResetExisting)     dCur.setDataString(sUpdateText,iCnt,bResetExisting);\n else     dCur.setDataString(FullTextDataString,iCnt,bResetExisting);\n  }\n  for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {\n    DistributionWordDocument dWordCur=DistroWordDocs.get(iCnt);\n    if (dWordCur != null)     if (!bResetExisting)     dWordCur.setDataString(sUpdateText,iCnt,bResetExisting);\n else     dWordCur.setDataString(FullTextDataString,iCnt,bResetExisting);\n  }\n}\n", "public static boolean containsUUID ( UUID uuid ) { checkNotNull ( uuid ) ; if ( ! loaded ) { load ( ) ; } return map . containsKey ( uuid ) ; }", "    protected I_CmsXmlContentValue removeBookmark(String path, Locale locale) {\n\n        // remove mapping of element name to locale\n        Object o;\n        o = m_elementLocales.get(path);\n        if (o != null) {\n            ((Set)o).remove(locale);\n        }\n        // remove mapping of locale to element name\n        o = m_elementNames.get(locale);\n        if (o != null) {\n            ((Set)o).remove(path);\n        }\n        // remove the bookmark and return the removed element\n        return (I_CmsXmlContentValue)m_bookmarks.remove(getBookmarkName(path, locale));\n    }\n", "    private void clearAttacks() {\n        // We may not have an entity selected yet (race condition).\n        if (ce() == null) {\n            return;\n        }\n\n        // remove attacks, set weapons available again\n        Enumeration<AbstractEntityAction> i = attacks.elements();\n        while (i.hasMoreElements()) {\n            Object o = i.nextElement();\n            if (o instanceof WeaponAttackAction) {\n                WeaponAttackAction waa = (WeaponAttackAction) o;\n                ce().getEquipment(waa.getWeaponId()).setUsedThisRound(false);\n            }\n        }\n        attacks.removeAllElements();\n\n        // remove temporary attacks from game & board\n        removeTempAttacks();\n\n        // restore any other movement to default\n        ce().setSecondaryFacing(ce().getFacing());\n        ce().setArmsFlipped(false);\n    }\n", "private void splitCurrentLabel(Label alternateSuccessor,List<Label> catchLabels){\n  Label newLabel=new Label();\n  adopt(newLabel);\n  currentLabel.primarySuccessor=newLabel;\n  currentLabel.alternateSuccessor=alternateSuccessor;\n  currentLabel.catchLabels=catchLabels;\n  currentLabel=newLabel;\n  currentLabel.marked=true;\n}\n", "public boolean collides(final double x,final double y,final double w,final double h){\n  if ((x < 0) || (x + w > width)) {\n    return true;\n  }\n  if ((y < 0) || (y + h > height)) {\n    return true;\n  }\n  int iHeight=(int)Math.ceil(Math.ceil(y + h) - y);\n  int iWidth=(int)Math.ceil(Math.ceil(x + w) - x);\n  return map.collides((int)x,(int)y,iWidth,iHeight);\n}\n", "public void marshall(RotationRulesType rotationRulesType, ProtocolMarshaller protocolMarshaller) {\n\n        if (rotationRulesType == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(rotationRulesType.getAutomaticallyAfterDays(), AUTOMATICALLYAFTERDAYS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void testBeanPropertyApplication ( ) throws Exception { SampleContainingObject sco = new SampleContainingObject ( ) ; sco . setMyString ( STR_ ) ; SampleObject so1 = new SampleObject ( ) ; so1 . setString ( STR_ ) ; so1 . setMyLong ( NUM_ ) ; sco . setMyObject1 ( so1 ) ; TungstenProperties tp = new TungstenProperties ( ) ; tp . setBeanSupportEnabled ( BOOL_ ) ; tp . extractProperties ( sco , BOOL_ ) ; SampleContainingObject sco2 = new SampleContainingObject ( ) ; tp . applyProperties ( sco2 ) ; Assert . assertEquals ( STR_ , sco2 . getMyString ( ) ) ; Assert . assertNotNull ( STR_ , sco2 . getMyObject1 ( ) ) ; Assert . assertNull ( STR_ , sco2 . getMyObject2 ( ) ) ; Assert . assertEquals ( STR_ , sco , sco2 ) ; }", "public static void main(String[] args) throws Exception {\n  System.exit(compile(args));\n}\n", "  public boolean isIdle() {\n    return (currentState == idleState);\n  }\n", "DataInputStream computeMetadata(Configuration conf, InputStream dataStream)\n  throws IOException {\n    ByteArrayOutputStream mdOutBase = new ByteArrayOutputStream(1024*1024);\n    DataOutputStream mdOut = new DataOutputStream(mdOutBase);\n\n    // First, write out the version.\n    mdOut.writeShort(FSDataset.FORMAT_VERSION_NON_INLINECHECKSUM);\n\n    // Create a summer and write out its header.\n    int bytesPerChecksum = conf.getInt(\"io.bytes.per.checksum\", 512);\n    DataChecksum sum =\n      DataChecksum.newDataChecksum(DataChecksum.CHECKSUM_CRC32,\n          bytesPerChecksum);\n    sum.writeHeader(mdOut);\n\n    // Buffer to read in a chunk of data.\n    byte[] buf = new byte[bytesPerChecksum];\n    // Buffer to store the checksum bytes.\n    byte[] chk = new byte[sum.getChecksumSize()];\n\n    // Read data till we reach the end of the input stream.\n    int bytesSinceFlush = 0;\n    while (true) {\n      // Read some bytes.\n      int bytesRead = dataStream.read(buf, bytesSinceFlush, \n          bytesPerChecksum - bytesSinceFlush);\n      if (bytesRead == -1) {\n        if (bytesSinceFlush > 0) {\n          boolean reset = true;\n          sum.writeValue(chk, 0, reset); // This also resets the sum.\n          // Write the checksum to the stream.\n          mdOut.write(chk, 0, chk.length);\n          bytesSinceFlush = 0;\n        }\n        break;\n      }\n      // Update the checksum.\n      sum.update(buf, bytesSinceFlush, bytesRead);\n      bytesSinceFlush += bytesRead;\n\n      // Flush the checksum if necessary.\n      if (bytesSinceFlush == bytesPerChecksum) {\n        boolean reset = true;\n        sum.writeValue(chk, 0, reset); // This also resets the sum.\n        // Write the checksum to the stream.\n        mdOut.write(chk, 0, chk.length);\n        bytesSinceFlush = 0;\n      }\n    }\n\n    byte[] mdBytes = mdOutBase.toByteArray();\n    return new DataInputStream(new ByteArrayInputStream(mdBytes));\n  }", "public static void addIncludedGroup ( AccountGroup . UUID group , String include , AsyncCallback < GroupInfo > cb ) { groups ( group ) . id ( include ) . put ( cb ) ; }", "private static Object[] makeTitle(final String titleString){\n  return new Object[]{new CLeftTitle(titleString.substring(0,titleString.length() / 2)),new CRightTitle(titleString.substring(titleString.length() / 2))};\n}\n", "public PartialConverter getPartialConverter(Object object) {\n        PartialConverter converter =\n            (PartialConverter)iPartialConverters.select(object == null ? null : object.getClass());\n        if (converter != null) {\n            return converter;\n        }\n        throw new IllegalArgumentException(\"No partial converter found for type: \" +\n            (object == null ? \"null\" : object.getClass().getName()));\n    }", "    public void populateAllTables() throws Exception {\n        if (threadCount == 1)\n            super.populateAllTables();\n        else\n            threadPopulate();\n    }\n", "private void removeItem ( ExpandItem item ) { fontListener . removeControl ( ( ( SourceViewer ) viewers . get ( item ) ) . getControl ( ) ) ; final Object data = item . getData ( KEY ) ; items . remove ( Integer . parseInt ( data . toString ( ) ) ) ; item", "public Tag createTag ( TagCreateRequest tagCreateRequest ) ;", "private Event filter(Event event){\n  if (tags.isEmpty() && ttl == 0) {\n    return event;\n  }\n  final String host=event.getHost() != null ? event.getHost() : this.host;\n  final Map<String,String> mergedTags=Maps.newHashMap(tags);\n  mergedTags.putAll(event.getTags());\n  final Set<String> mergedRiemannTags=Sets.newHashSet(riemannTags);\n  mergedRiemannTags.addAll(event.getRiemannTags());\n  final Date time=event.getTime() != null ? event.getTime() : new Date();\n  final Long ttl=event.getTtl() != 0 ? event.getTtl() : this.ttl;\n  return new Event(event.getKey(),event.getValue(),time,ttl,event.getState(),event.getDescription(),host,mergedRiemannTags,mergedTags);\n}\n", "    public UrlBuilder addParameter(String name, Object value) {\n        if ((name == null) || (value == null)) {\n            return this;\n        }\n\n        String valueStr = normalizeParameter(value);\n\n        if (queryPart.length() > 0) {\n            queryPart.append('&');\n        }\n        queryPart.append(name);\n        queryPart.append(\"=\");\n        try {\n            queryPart.append(URLEncoder.encode(valueStr, \"UTF-8\"));\n        } catch (UnsupportedEncodingException e) {\n        }\n\n        return this;\n    }\n", "public static Bitmap decodeSampledBitmapFromDescriptor ( FileDescriptor fileDescriptor , int reqWidth , int reqHeight , ImageCache cache ) { final BitmapFactory . Options options = new BitmapFactory . Options ( ) ; options . inJustDecodeBounds = BOOL_ ; B", "private static void d_ucumkp(double[] a,double[] agg,double[] c,int m,int n,KahanObject kbuff,KahanPlus kplus,int rl,int ru){\n  double[] csums=new double[2 * n];\n  if (agg != null)   System.arraycopy(agg,0,csums,0,n);\n  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n) {\n    sumAgg(a,csums,aix,0,n,kbuff,kplus);\n    System.arraycopy(csums,0,c,aix,n);\n  }\n}\n", "\tpublic void contributeToToolBar(IToolBarManager toolBarManager) {\n        toolBarManager.add(new Separator(\"data-settings\"));\n        toolBarManager.add(new Separator(\"data-additions\"));\n    }\n", "private System ( ) { }", "public void performPreread(final List<File> files) throws IOException {\n  final SequencesWriter writer;\n  formattingMessage(mInputFormat.isPairedSam());\n  final SequenceDataSource ds;\n  if (mProtein) {\n    if (mInputFormat != InputFormat.FASTA) {\n      throw new BadFormatCombinationException(\"Incompatible sequence type and file format. format=\" + mInputFormat + \" protein=\"+ mProtein);\n    }\n    ds=new FastaSequenceDataSource(files,new ProteinFastaSymbolTable(),true,null);\n    ds.setDusting(mDusting);\n    writer=new SequencesWriter(ds,mOutDir,Constants.MAX_FILE_SIZE,mNamesToExclude,IndexFile.typeFromFormat(mInputFormat),mCompressed,mReadTrimQualityThreshold);\n  }\n else {\n    ds=getDnaDataSource(files,mInputFormat,null,mMappedSam,false,mSamReadGroup,mDedupSecondary);\n    ds.setDusting(mDusting);\n    if (mInputFormat.isPairedSam()) {\n      writer=new AlternatingSequencesWriter(ds,mOutDir,Constants.MAX_FILE_SIZE,mNamesToExclude,IndexFile.typeFromFormat(mInputFormat),mCompressed,mReadTrimQualityThreshold);\n    }\n else {\n      writer=new SequencesWriter(ds,mOutDir,Constants.MAX_FILE_SIZE,mNamesToExclude,IndexFile.typeFromFormat(mInputFormat),mCompressed,mReadTrimQualityThreshold);\n    }\n  }\n  writer.setReadGroup(mReadGroupRecord == null ? null : mReadGroupRecord.toString());\n  writer.processSequences(mIncludeQuality,mIncludeNames);\n  final Counts inputCounts=new Counts(writer.getNumberOfSequences() + writer.getNumberOfExcludedSequences(),writer.getTotalLength() + writer.getExcludedResidueCount(),ds.getMaxLength(),ds.getMinLength());\n  final Counts outputCounts=new Counts(writer.getNumberOfSequences(),writer.getTotalLength(),writer.getMaxLength(),writer.getMinLength());\n  mNumSequences=mInputFormat.isPairedSam() ? writer.getNumberOfSequences() / 2 : writer.getNumberOfSequences();\n  writeStats(files.toArray(new File[files.size()]),mInputFormat.isPairedSam(),inputCounts,outputCounts,writer.getSdfId(),ds.getDusted());\n  checkAndInstallReferenceDescription();\n}\n", "    public void clearCurrentValue() {\n        this.currentValue = null;\n    }\n", "private void createTree ( final ITreeNode < CTag > tag ) { tree . put ( tag , new CTagFilterNode ( tag ) ) ; for ( final ITreeNode < CTag > child : tag . getChildren ( ) ) { createTree ( child ) ; } }", "  public void reward( double reward ) {\n    updatePropensities(lastAction, reward);\n    updateProbabilities();\n  }\n", "public static < K , V > Map < K , V > collectEntries ( Iterable < ? > self , Map < K , V > collector ) { return collectEntries ( self . iterator ( ) , collector ) ; }", "    private void runPostProcessors() {\n        Object[] postProcessors = postProcessorTracker.getServices();\n        if(postProcessors != null) {\n            for (Object object : postProcessors) {\n                PostProcessor post = (PostProcessor) object;\n                boolean result = post.process();\n                if (!result) {\n                    int selection = JOptionPane.showConfirmDialog(Main.getGUI(), I18N.translate(\"error.postprocessor\", post.getName()),\n                            I18N.translate(\"error\"), JOptionPane.YES_NO_OPTION);\n                    if (selection != JOptionPane.YES_OPTION) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n", "public static List < String > readLines ( Reader reader ) throws IOException { IteratorClosureAdapter < String > closure = new IteratorClosureAdapter < String > ( reader ) ; eachLine ( reader , closure ) ; return closure . asList ( ) ; }", "@Override\n    public void setContext(Context context) {\n        super.setContext(context);\n\n        fsInfo = FSInfo.instance(context);\n\n        symbolFileEnabled = !options.isSet(\"ignore.symbol.file\");\n\n        String sf = options.get(\"sortFiles\");\n        if (sf != null) {\n            sortFiles = (sf.equals(\"reverse\") ? SortFiles.REVERSE : SortFiles.FORWARD);\n        }\n    }", "@BetaApi\n  public final BackendServiceGroupHealth getHealthRegionBackendService(\n      ProjectRegionBackendServiceName backendService,\n      ResourceGroupReference resourceGroupReferenceResource) {\n\n    GetHealthRegionBackendServiceHttpRequest request =\n        GetHealthRegionBackendServiceHttpRequest.newBuilder()\n            .setBackendService(backendService == null ? null : backendService.toString())\n            .setResourceGroupReferenceResource(resourceGroupReferenceResource)\n            .build();\n    return getHealthRegionBackendService(request);\n  }", "private void interpreterNewLine ( final boolean additionalInput ) { final int position = getInputPane ( ) . getCaretPosition ( ) ; int currentPosition ; if ( position == NUM_ ) { currentPosition = NUM_ ; } else { getDocument ( ) . insertChar ( position , ", "public void onError ( DiagnosticListener < JavaFileObject > callback ) { errorsDelegate = callback ; }", "private void processSync() throws ReplicatorException, IOException, InterruptedException {\n  Collection<LogFile> logFiles=logFileMap.values();\n  for (  LogFile logFile : logFiles) {\n    logFile.flush();\n  }\n}\n", "public static Expression attributeValue(Data data, TagLibTag tag, String type, boolean parseExpression, boolean isNonName, Expression noExpression) throws TemplateException {\n\tExpression expr;\n\ttry {\n\t    ExprTransformer transfomer = null;\n\t    if (parseE", "public void interrupt(){\n  if (action != null) {\n    action.run();\n  }\n  vmThread.interrupt();\n}\n", "    protected void restoreData(T t) throws ErrorHandler {\n\tif (t == null)\n\t    return;\n\tT cache = loaded.get(t.getId());\n\tif (cache == null)\n\t    return;\n\tT aux = load(t.getId());\n\tif (aux != null) {\n\t    cache.fill(aux);\n\t    t.fill(aux);\n\t}\n    }\n", "\tpublic void cancel() {\n\t\tclearValidationMessages();\n\t\tgetEventDispatcher().dispatchEvent(new ClosePanelEvent(this));\n\t}\n", "  public boolean isIdle() {\n    return this.state != null && this.state.isIdle();\n  }\n", "public void onWebsocketCloseInitiated ( WebSocket ws , int code , String reason ) ;", "    public Object clone() throws CloneNotSupportedException {\n        SOAEventParam obj = (SOAEventParam) super.clone();\n        obj.m_sOAEventObject = null;\n        return obj;\n    }\n", "private boolean hasAuthenticatedMolgenisToken() {\n    boolean hasAuthenticatedMolgenisToken = false;\n    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n    if (authentication instanceof RestAuthenticationToken) {\n      hasAuthenticatedMolgenisToken = authentication.isAuthenticated();\n    }\n    return hasAuthenticatedMolgenisToken;\n  }", "public static String reverse ( CharSequence self ) { return new StringBuilder ( self ) . reverse ( ) . toString ( ) ; }", "private Connection<CL> waitForConnection(int timeout) throws ConnectionException {\n        Connection<CL> connection = null;\n        long startTime = System.currentTimeMillis();\n        try {\n            blockedThreads.incrementAndGet();\n            connection = availableConnections.poll(timeout, TimeUnit.MILLISECONDS);\n            if (connection != null)\n                return connection;\n            \n            throw new PoolTimeoutException(\"Timed out waiting for connection\")\n                .setHost(getHost())\n                .setLatency(System.currentTimeMillis() - startTime);\n        }\n        catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new InterruptedOperationException(\"Thread interrupted waiting for connection\")\n                .setHost(getHost())\n                .setLatency(System.currentTimeMillis() - startTime);\n        }\n        finally {\n            blockedThreads.decrementAndGet();\n        }\n    }", "public static <U extends Key <U>> NameMatcher <U> nameStartsWith (final String compareTo)\n  {\n    return new NameMatcher <> (compareTo, StringOperatorName.STARTS_WITH);\n  }", "    public boolean isVerified() {\n        return this.verified;\n    }\n", "public boolean addConditional(String systemName,int order){\n  _conditionalSystemNames.add(systemName);\n  return (true);\n}\n", "public static void expand ( JsonValue json ) { Iterator < String > iter = json . keys ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String key = iter . next ( ) ; String expanded = parse ( json . get ( key ) ) ; if ( expanded != null ) { json . put ", "protected WebMarkupContainer newCloseLink(final String linkId, final int index)\n\t{\n\t\treturn new AjaxFallbackLink<Void>(linkId)\n\t\t{\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target)\n\t\t\t{\n\t\t\t\tif (target != null)\n\t\t\t\t{\n\t\t\t\t\tonRemoveTab(target, index);\n\t\t\t\t}\n\t\t\t\tonAjaxUpdate(target);\n\t\t\t}\n\t\t};\n\t}", "protected List < GroovyRowResult > asList ( String sql , ResultSet rs , Closure metaClosure ) throws SQLException { return asList ( sql , rs , NUM_ , NUM_ , metaClosure ) ; }", "public static int sendBatchAggregateSemiColon(final PacketOutputStream writer, String firstQuery,\n      List<String> queries, int currentIndex) throws IOException {\n    writer.startPacket(0);\n    writer.write(Packet.COM_QUERY);\n    //index is already set to 1 for first one\n    writer.write(firstQuery.getBytes(\"UTF-8\"));\n\n    int index = currentIndex;\n\n    //add query with \";\"\n    while (index < queries.size()) {\n      byte[] sqlByte = queries.get(index).getBytes(\"UTF-8\");\n      if (!writer.checkRemainingSize(sqlByte.length + 1)) {\n        break;\n      }\n      writer.write(';');\n      writer.write(sqlByte);\n      index++;\n    }\n\n    writer.flush();\n    return index;\n  }", "    public void setErrorForeground(Color fg) {\n        this.errorColorSet = true;\n        look.errorForeground = fg;\n        lookUpdated();\n    }\n", "public double [ ] computeLocalUsingPreviousObservations ( double [ ] newSourceObservations , double [ ] newDestObservations , double [ ] [ ] newCondObservations ) throws Exception ;", "private void runInStunKeepAliveThread ( ) { long consentFreshnessInterval = Long . getLong ( StackProperties . CONSENT_FRESHNESS_INTERVAL , DEFAULT_CONSENT_FRESHNESS_INTERVAL ) ; int originalConsentFreshnessWaitInterval = Integer . getInteger ( StackPrope", "public static <T> Level0SetOperator<Set<T>,T> onSetOf(final Type<T> type) {\r\n        return new Level0SetOperator<Set<T>,T>(ExecutionTarget.forFn(Normalisation.SET));\r\n    }", "public synchronized boolean delete(final Job job) {\n        // if already shutdown in the process of shutdown, there is no\n        // need to remove Jobs as they will never be executed.\n        if (shutdown) {\n            return false;\n        }\n        int i = findIndex(job);\n        if (i != -1) {\n            ScheduledJobEntry se = (ScheduledJobEntry) jobList.remove(i);\n            if (se.job != job) { // this should never happen\n                new IllegalStateException(\"Internal programming error\");\n            }\n            // if the job is the first on the list,\n            // then notify the scheduler thread to schedule a new job\n            if (i == 0) {\n                this.notifyAll();\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }", "    private void saveProject() {\n        if ( getAssemblyProject() != null ) {\n            updateAssemblyProject();\n            updateDisplay();\n        }\n    }\n", "    public void setFocusedView() {\n        if( _editing == false && isEditable() )\n            _startEditing(true); /* Will call setFocusedView with _editing set to true*/\n        else\n            super.setFocusedView();\n    }\n", "public ObjectId(byte[] b){\n  if (b.length != 12)   throw new IllegalArgumentException(\"need 12 bytes\");\n  ByteBuffer bb=ByteBuffer.wrap(b);\n  _time=bb.getInt();\n  _machine=bb.getInt();\n  _inc=bb.getInt();\n  _new=false;\n}\n", "void inTransactionCommit ( IReplicationInContext context , ITransactionInContext transactionContext ) throws Exception ;", "private void tred2()\n    {\n        for(int j = 0; j < n; j++)\n            d[j] = V.get(n-1, j);\n\n        // Householder reduction to tridiagonal form.\n\n        for (int i = n - 1; i > 0; i--)\n        {\n\n            // Scale to avoid under/overflow.\n\n            double scale = 0.0;\n            double h = 0.0;\n            for (int k = 0; k < i; k++)\n            {\n                scale = scale + abs(d[k]);\n            }\n            if (scale == 0.0)\n            {\n                e[i] = d[i - 1];\n                for (int j = 0; j < i; j++)\n                {\n                    d[j] = V.get(i-1, j);\n                    V.set(i, j, 0.0);\n                    V.set(j, i, 0.0);\n                }\n            }\n            else\n            {\n\n                // Generate Householder vector.\n\n                for (int k = 0; k < i; k++)\n                {\n                    d[k] /= scale;\n                    h += d[k] * d[k];\n                }\n                double f = d[i - 1];\n                double g = sqrt(h);\n                if (f > 0)\n                    g = -g;\n                e[i] = scale * g;\n                h -= f * g;\n                d[i - 1] = f - g;\n                Arrays.fill(e, 0, i, 0.0);\n\n                // Apply similarity transformation to remaining columns.\n\n                for (int j = 0; j < i; j++)\n                {\n                    f = d[j];\n                    V.set(j, i, f);\n                    g = e[j] + V.get(j, j) * f;\n                    for (int k = j + 1; k <= i - 1; k++)\n                    {\n                        g += V.get(k,j) * d[k];\n                        e[k] += V.get(k, j) * f;\n                    }\n                    e[j] = g;\n                }\n                f = 0.0;\n                for (int j = 0; j < i; j++)\n                {\n                    e[j] /= h;\n                    f += e[j] * d[j];\n                }\n                double hh = f / (h + h);\n                for (int j = 0; j < i; j++)\n                {\n                    e[j] -= hh * d[j];\n                }\n                for (int j = 0; j < i; j++)\n                {\n                    f = d[j];\n                    g = e[j];\n                    \n                    for (int k = j; k <= i - 1; k++)\n                    {\n                        V.increment(k, j, -(f * e[k] + g * d[k]));\n                    }\n                    d[j] = V.get(i-1, j);\n                    V.set(i, j, 0.0);\n                }\n            }\n            d[i] = h;\n        }\n\n\n        // Accumulate transformations.\n\n        for (int i = 0; i < n - 1; i++)\n        {\n            V.set(n-1, i, V.get(i, i));\n            V.set(i, i, 1.0);\n            double h = d[i + 1];\n            if (h != 0.0)\n            {\n                for (int k = 0; k <= i; k++)\n                {\n                    d[k] = V.get(k, i+1) / h;\n                }\n                for (int j = 0; j <= i; j++)\n                {\n                    double g = 0.0;\n                    for (int k = 0; k <= i; k++)\n                    {\n                        g += V.get(k, i+1) * V.get(k, j);\n                    }\n                    \n                    RowColumnOps.addMultCol(V, j, 0, i+1, -g, d);\n                }\n            }\n\n            RowColumnOps.fillCol(V, i+1, 0, i+1, 0.0);\n            \n        }\n        for (int j = 0; j < n; j++)\n        {\n            d[j] = V.get(n-1, j);\n            V.set(n-1, j, 0.0);\n        }\n        V.set(n-1, n-1, 1.0);\n        e[0] = 0.0;\n    }", "\tpublic List getNamespaces() {\n\t\tList ns = new LinkedList();\n\t\tns.add(name);\n\t\tif (attributes != EmptyStructures.EMPTY_MAP) {\n\t\t\tIterator it = attributes.values().iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tParameterAttribute pa = (ParameterAttribute) it.next();\n\t\t\t\tns.add(pa.getName());\n\t\t\t}\n\t\t}\n\t\treturn ns;\n\t}\n", "public static String escapeStr(final String str,EscapeInfoProvider p){\n  if (str == null)   return null;\n  int finalCount=calcFinalEscapedStringCount(str,p);\n  if (str.length() == finalCount)   return str;\n  char[] resultChars=new char[finalCount];\n  int resultPos=0;\n  for (int i=0; i < str.length(); i++) {\n    char c=str.charAt(i);\n    final char escaped=p.escape(c);\n    if (escaped != 0) {\n      resultChars[resultPos++]=p.escapeCharacter();\n      resultChars[resultPos++]=escaped;\n    }\n else {\n      resultChars[resultPos++]=c;\n    }\n  }\n  if (resultPos != finalCount) {\n    throw new RuntimeException(\"Incorrect escaping for '\" + str + \"'\");\n  }\n  return new String(resultChars);\n}\n", "    public void setCreateUser(Long newVal) {\n        if ((newVal != null && this.createUser != null && (newVal.compareTo(this.createUser) == 0)) ||\n            (newVal == null && this.createUser == null && createUser_is_initialized)) {\n            return;\n        }\n        this.createUser = newVal;\n        createUser_is_modified = true;\n        createUser_is_initialized = true;\n    }\n", "public double blackVariance ( final Period optionTenor , final double strike ) { return blackVariance ( optionTenor , strike , BOOL_ ) ; }", "public String getQueryStringParam(final String paramname) {\n    final List<String> params = getQueryString().get(paramname);\n    return params == null ? null : params.get(params.size() - 1);\n  }", "  public Effects slideUp(int millisecs, Function... f) {\n    return animate(\"height: 'hide'\", millisecs, f);\n  }\n", "void readMemory ( DebuggerReadMemoryReply reply ) ;", "@Override\n    public JsMessage getMessage()\n    {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.entry(this, tc, \"getMessage\");\n\n        JsMessage localMsg = getJSMessage(true);\n\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.exit(this, tc, \"getMessage\", localMsg);\n\n        return localMsg;\n    }", "int intersect(Segment other, Point2D[] intersectionPoints,\n\t\t\tdouble[] paramThis, double[] paramOther, double tolerance) {\n\t\treturn _intersect(other, intersectionPoints, paramThis, paramOther,\n\t\t\t\ttolerance);\n\t}", "public static boolean isNumeric(String datatypeURI){\n  return numericDatatypeURIs.contains(datatypeURI);\n}\n", "\tprivate void initGUI() {\n\t\tsetLayout ( new FlowLayout ( FlowLayout.LEFT ) );\n\t\tsetPreferredSize ( new java.awt.Dimension( 320, 60 ) );\n\n\t\tdefineComponents();\n\t\tadd ( labelLabel );\n\t\tadd ( labelTextField );\n\t\tadd ( compulsoryHoursLabel );\n\t\tadd ( compulsoryHoursTextField );\n\t\tadd ( hoursLabel );\n\t}\n", "    protected void checkWritePermission() throws SecurityException {\n        if (mode == PIM.READ_ONLY) {\n            throw new SecurityException(\"List cannot be written\");\n        }\n    }\n", "private CGlobalSettings ( ) { }", "    public boolean removePersistenceLoggingPlugin(IPersistenceLoggingPlugin persistenceLoggingPlugin) {\n        return m_engine.removePersistenceLoggingPlugin(persistenceLoggingPlugin);\n    }\n", "    public String getfield1() {\n        return field1;\n    }\n", "public <ResultT>List<ResultT> toList(Converter<ResultT> converter){\n  try {\n    if (isEmpty(cursor)) {\n      return Collections.emptyList();\n    }\n    return populate(converter,new ArrayList<ResultT>(cursor.getCount()));\n  }\n  finally {\n    close();\n  }\n}\n", "public int invoke_I(int arg0, int arg1, int arg2) throws Exception {\n\t\tcheckState();\n\t\treturn Extension.InvokeIII_I(arg0, arg1, arg2, fPoint);\n\t}", "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof MultipleXYSeriesLabelGenerator)) {\n            return false;\n        }\n        MultipleXYSeriesLabelGenerator that\n                = (MultipleXYSeriesLabelGenerator) obj;\n        if (!this.formatPattern.equals(that.formatPattern)) {\n            return false;\n        }\n        if (!this.additionalFormatPattern.equals(\n                that.additionalFormatPattern)) {\n            return false;\n        }\n        if (!this.seriesLabelLists.equals(that.seriesLabelLists)) {\n            return false;\n        }\n        return true;\n    }\n", "public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int[] bandList){\n  if (x < this.minX) {\n    throw new RasterFormatException(\"x lies outside the raster\");\n  }\n  if (y < this.minY) {\n    throw new RasterFormatException(\"y lies outside the raster\");\n  }\n  if ((x + width < x) || (x + width > this.minX + this.width)) {\n    throw new RasterFormatException(\"(x + width) is outside of Raster\");\n  }\n  if ((y + height < y) || (y + height > this.minY + this.height)) {\n    throw new RasterFormatException(\"(y + height) is outside of Raster\");\n  }\n  SampleModel sm;\n  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList);\n else   sm=sampleModel;\n  int deltaX=x0 - x;\n  int deltaY=y0 - y;\n  return new ShortInterleavedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);\n}\n", "public static void doWithMethods(Class targetClass,MethodCallback mc) throws IllegalArgumentException {\n  doWithMethods(targetClass,mc,null);\n}\n", "public void warnf(Throwable t, String format, Object... params) {\n        doLogf(Level.WARN, FQCN, format, params, t);\n    }", "public static <T>T wrapThrow(Callable<T> callable){\n  try {\n    return callable.call();\n  }\n catch (  RuntimeException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n", "    public void fireEntityDelete(Coordinator sim,Entity entity) {\n    \tif (listeners.size()>0) {\n\t    \tEntityEvent simEvt = new EntityEvent(sim,EntityEvent.REMOVED,entity);\n\t        for (EntityListener listener:listeners) listener.entityChanged(simEvt);\n    \t}\n    }\n", "public void setEntity_attributes(FSArray v) {\n    if (Entity_Type.featOkTst && ((Entity_Type)jcasType).casFeat_entity_attributes == null)\n      jcasType.jcas.throwFeatMissing(\"entity_attributes\", \"de.julielab.jules.types.ace.Entity\");\n    jcasType.ll_cas.ll_setRefValue(addr, ((Entity_Type)jcasType).casFeatCode_entity_attributes, jcasType.ll_cas.ll_getFSRef(v));}", "    public DoubleMatrix1D backwardSolve(final DoubleMatrix2D U, final DoubleMatrix1D b) {\n        final int rows = U.rows();\n        final DoubleMatrix1D x = b.like();\n        x.setQuick(rows - 1, b.getQuick(rows - 1) / U.getQuick(rows - 1, rows - 1));\n        double sum;\n        for (int r = rows - 2; r >= 0; r--) {\n            sum = U.viewRow(r).zDotProduct(x);\n            x.setQuick(r, (b.getQuick(r) - sum) / U.getQuick(r, r));\n        }\n        return x;\n    }\n", "Source popImportSource(){\n  return (Source)m_importSourceStack.pop();\n}\n", "private static void generateRegisterPush(final ITranslationEnvironment environment,final long baseOffset,final String register,final OperandSize size,final List<ReilInstruction> instructions){\n  long offset=baseOffset;\n  final String pValue;\n  if (size == OperandSize.DWORD) {\n    pValue=register;\n  }\n else {\n    pValue=environment.getNextVariableString();\n    instructions.add(ReilHelpers.createAnd(offset,OperandSize.DWORD,register,size,\"65535\",size,pValue));\n    offset++;\n  }\n  generatePush(environment,offset,pValue,size,instructions);\n}\n", "public static CStateChange changeEdgeLabel ( final CStateFactory < ? , ? > m_factory , final MouseEvent event , final HitInfo hitInfo , final EdgeLabel oldLabel ) { final EdgeLabel label = hitInfo . getHitEdgeLabel ( ) ; if ( label == oldLabel ) { return ", "  public void read(DataInput dataInput) throws IOException {\n    this.inputString = DataHelper.readString(dataInput);\n    this.inputIsXml = dataInput.readBoolean();\n    this.inputIsHtml = dataInput.readBoolean();\n    this.inputIsFile = dataInput.readBoolean();\n    this.diffString = DataHelper.readString(dataInput);\n    this.url = DataHelper.readString(dataInput);\n    this.diffUrl = DataHelper.readString(dataInput);\n  }\n", "private void loadStorageForFetch(CodeBuilder b, TypeDesc type) {\r\n        b.loadThis();\r\n        b.loadField(SUPPORT_FIELD_NAME, mSupportType);\r\n        TypeDesc storageType = TypeDesc.forClass(Storage.class);\r\n\r\n        TypeDesc repositoryType = TypeDesc.forClass(Repository.class);\r\n        b.invokeInterface\r\n            (mSupportType, \"getRootRepository\", repositoryType, null);\r\n        b.loadConstant(type);\r\n\r\n        // This may throw a RepositoryException.\r\n        Label tryStart = b.createLabel().setLocation();\r\n        b.invokeInterface(repositoryType, STORAGE_FOR_METHOD_NAME, storageType,\r\n                          new TypeDesc[]{TypeDesc.forClass(Class.class)});\r\n        Label tryEnd = b.createLabel().setLocation();\r\n        Label noException = b.createLabel();\r\n        b.branch(noException);\r\n\r\n        b.exceptionHandler(tryStart, tryEnd,\r\n                           RepositoryException.class.getName());\r\n        b.invokeVirtual\r\n            (RepositoryException.class.getName(), \"toFetchException\",\r\n             TypeDesc.forClass(FetchException.class), null);\r\n        b.throwObject();\r\n\r\n        noException.setLocation();\r\n    }", "protected List<String> createOption(final String option, final boolean value) {\n        if (value){\n            return Arrays.asList(option);\n        }\n        return new ArrayList<String>();\n    }", "static final byte[] resizeBuffer(final byte[] buf, final int newsize) {\n\t\tif (buf.length == newsize)\n\t\t\treturn buf;\n\t\tfinal byte[] newbuf = new byte[newsize];\n\t\tSystem.arraycopy(buf, 0, newbuf, 0, Math.min(buf.length, newbuf.length));\n\t\treturn newbuf;\n\t}", "private static URL getClassPathURL(String resourceName, URL resourceURL) {\n    try {\n      if (\"file\".equals(resourceURL.getProtocol())) {\n        String path = resourceURL.getFile();\n        // Compute the directory container the class.\n        int endIdx = path.length() - resourceName.length();\n        if (endIdx > 1) {\n          // If it is not the root directory, return the end index to remove the trailing '/'.\n          endIdx--;\n        }\n        return new URL(\"file\", \"\", -1, path.substring(0, endIdx));\n      }\n      if (\"jar\".equals(resourceURL.getProtocol())) {\n        String path = resourceURL.getFile();\n        return URI.create(path.substring(0, path.indexOf(\"!/\"))).toURL();\n      }\n    } catch (MalformedURLException e) {\n      throw Throwables.propagate(e);\n    }\n    throw new IllegalStateException(\"Unsupported class URL: \" + resourceURL);\n  }", "private void notifySelectionListeners ( ) { for ( final IZyGraphSelectionListener listener : m_selectionListeners ) { try { listener . selectionChanged ( ) ; } catch ( final Exception exception ) { exception . printStackTrace ( ) ; } } }", "public static void checkOperationalPattern1ACompliance(List<PartitionPack> partitionPacks){\n  IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();\n  for (  PartitionPack partitionPack : partitionPacks) {\n    byte[] bytes=partitionPack.getOperationalPattern();\n    for (int i=0; i < bytes.length; i++) {\n      if ((MXFOperationalPattern1A.OPERATIONAL_PATTERN1A_KEY_MASK[i] != 0) && (MXFOperationalPattern1A.OPERATIONAL_PATTERN1A_KEY[i] != bytes[i])) {\n        imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + String.format(\"Operational Pattern field in preface = 0x%x at position (zero-indexed) = %d, is different from expected value = 0x%x\",bytes[i],i,MXFOperationalPattern1A.OPERATIONAL_PATTERN1A_KEY[i]));\n      }\n    }\n    if (partitionPack.getNumberOfEssenceContainerULs() < 1) {\n      imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + String.format(\"Number of EssenceContainer ULs in partition pack = %d, at least 1 is expected\",partitionPack.getNumberOfEssenceContainerULs()));\n    }\n  }\n  if (imfErrorLogger.hasFatalErrors()) {\n    throw new MXFException(String.format(\"Found fatal errors in the IMFTrackFile that violate IMF OP1A compliance\"),imfErrorLogger);\n  }\n}\n", "@RabbitListener(queues = \"${hawkbit.dmf.rabbitmq.receiverQueue:dmf_receiver}\", containerFactory = \"listenerContainerFactory\")\n    public Message onMessage(final Message message,\n            @Header(name = MessageHeaderKey.TYPE, required = false) final String type,\n            @Header(name = MessageHeaderKey.TENANT, required = false) final String tenant) {\n        return onMessage(message, type, tenant, getRabbitTemplate().getConnectionFactory().getVirtualHost());\n    }", "public static Character toCharacter(Object o,Character defaultValue){\n  if (o instanceof Character)   return (Character)o;\n  if (defaultValue != null)   return new Character(toCharValue(o,defaultValue.charValue()));\n  char res=toCharValue(o,Character.MIN_VALUE);\n  if (res == Character.MIN_VALUE)   return defaultValue;\n  return new Character(res);\n}\n", "public CInstructionUpdater ( final ZyGraph graph ) { m_graph = graph ; }", "void editedGroupNodeComment ( INaviGroupNode groupNode , IComment comment ) ;", "public static long[] preprocessSpooky4(final BitVector bv,final long seed){\n  final long length=bv.length();\n  if (length < Long.SIZE * 2)   return null;\n  final long[] state=new long[4 * (int)(length + Long.SIZE * 2) / (4 * Long.SIZE)];\n  long h0, h1, h2, h3;\n  h0=seed;\n  h1=seed;\n  h2=ARBITRARY_BITS;\n  h3=ARBITRARY_BITS;\n  long remaining=length;\n  long pos=0;\n  int p=0;\n  for (; ; ) {\n    h2+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE);\n    h3+=bv.getLong(pos + 1 * Long.SIZE,pos + 2 * Long.SIZE);\n    h2=Long.rotateLeft(h2,50);\n    h2+=h3;\n    h0^=h2;\n    h3=Long.rotateLeft(h3,52);\n    h3+=h0;\n    h1^=h3;\n    h0=Long.rotateLeft(h0,30);\n    h0+=h1;\n    h2^=h0;\n    h1=Long.rotateLeft(h1,41);\n    h1+=h2;\n    h3^=h1;\n    h2=Long.rotateLeft(h2,54);\n    h2+=h3;\n    h0^=h2;\n    h3=Long.rotateLeft(h3,48);\n    h3+=h0;\n    h1^=h3;\n    h0=Long.rotateLeft(h0,38);\n    h0+=h1;\n    h2^=h0;\n    h1=Long.rotateLeft(h1,37);\n    h1+=h2;\n    h3^=h1;\n    h2=Long.rotateLeft(h2,62);\n    h2+=h3;\n    h0^=h2;\n    h3=Long.rotateLeft(h3,34);\n    h3+=h0;\n    h1^=h3;\n    h0=Long.rotateLeft(h0,5);\n    h0+=h1;\n    h2^=h0;\n    h1=Long.rotateLeft(h1,36);\n    h1+=h2;\n    h3^=h1;\n    state[p + 0]=h0;\n    state[p + 1]=h1;\n    state[p + 2]=h2;\n    state[p + 3]=h3;\n    p+=4;\n    if (remaining >= Long.SIZE * 6) {\n      h0+=bv.getLong(pos + 2 * Long.SIZE,pos + 3 * Long.SIZE);\n      h1+=bv.getLong(pos + 3 * Long.SIZE,pos + 4 * Long.SIZE);\n      remaining-=4 * Long.SIZE;\n      pos+=4 * Long.SIZE;\n    }\n else     return state;\n  }\n}\n", "public void write ( PrintWriter output , Janitor janitor ) { String description = STR_ + owner . getPhaseDescription ( ) + STR_ ; String message = cause . getMessage ( ) ; if ( message != null ) { output . println ( description + message ) ; } else { output . println ( description + cause ) ; } output . println ( ) ; cause . printStackTrace ( output ) ; }", "public static String convertToXML(Object object) {\r\n\t\ttry {\r\n\t\t\tif (!JAXB_CONTEXT_MAP.containsKey(object.getClass())) {\r\n\t\t\t\tJAXB_CONTEXT_MAP.put(object.getClass(), JAXBContext.newInstance(object.getClass()));\r\n\t\t\t}\r\n\t\t\tMarshaller marshaller = JAXB_CONTEXT_MAP.get(object.getClass()).createMarshaller();\r\n\t\t\tmarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\r\n\t\t\t// \u8bbe\u7f6eCDATA\u8f93\u51fa\u5b57\u7b26\r\n\t\t\tmarshaller.setProperty(CharacterEscapeHandler.class.getName(), new CharacterEscapeHandler() {\r\n\t\t\t\tpublic void escape(char[] ac, int i, int j, boolean flag, Writer writer) throws IOException {\r\n\t\t\t\t\twriter.write(ac, i, j);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tStringWriter stringWriter = new StringWriter();\r\n\t\t\tmarshaller.marshal(object, stringWriter);\r\n\t\t\treturn stringWriter.getBuffer().toString();\r\n\t\t} catch (Exception e) {\r\n\t\t\tlogger.error(\"\", e);\r\n\t\t}\r\n\t\treturn null;\r\n\t}", "public static void translate(double dx,double dy,Coordinate[] coords){\n  int last=coords.length - 1;\n  for (int i=0; i < last; i++) {\n    coords[i].x+=dx;\n    coords[i].y+=dy;\n  }\n  if (coords[0] != coords[last]) {\n    coords[last].x+=dx;\n    coords[last].y+=dy;\n  }\n}\n", "public native void showError ( String message ) ;", "protected void addReferenceProperties(DeserializationConfig config,BasicBeanDescription beanDesc,BeanDeserializerBuilder builder) throws JsonMappingException {\n  Map<String,AnnotatedMember> refs=beanDesc.findBackReferenceProperties();\n  if (refs != null) {\n    for (    Map.Entry<String,AnnotatedMember> en : refs.entrySet()) {\n      String name=en.getKey();\n      AnnotatedMember m=en.getValue();\n      if (m instanceof AnnotatedMethod) {\n        builder.addBackReferenceProperty(name,constructSettableProperty(config,beanDesc,m.getName(),(AnnotatedMethod)m));\n      }\n else {\n        builder.addBackReferenceProperty(name,constructSettableProperty(config,beanDesc,m.getName(),(AnnotatedField)m));\n      }\n    }\n  }\n}\n", "@Override public void restoreEntity(BackupDataInputStream data){\n  if (!restoreSuccessful) {\n    return;\n  }\n  if (mDeviceProfileData == null) {\n    mIdp=new InvariantDeviceProfile(mContext);\n    mDeviceProfileData=initDeviceProfileData(mIdp);\n    mIconCache=new IconCache(mContext,mIdp);\n  }\n  int dataSize=data.size();\n  if (mBuffer.length < dataSize) {\n    mBuffer=new byte[dataSize];\n  }\n  try {\n    int bytesRead=data.read(mBuffer,0,dataSize);\n    if (DEBUG)     Log.d(TAG,\"read \" + bytesRead + \" of \"+ dataSize+ \" available\");\n    String backupKey=data.getKey();\n    if (JOURNAL_KEY.equals(backupKey)) {\n      if (VERBOSE)       Log.v(TAG,\"Journal entry restored\");\n      if (!mKeys.isEmpty()) {\n        Log.wtf(TAG,keyToBackupKey(mKeys.get(0)) + \" received after \" + JOURNAL_KEY);\n        restoreSuccessful=false;\n        return;\n      }\n      BackupProtos.Journal journal=new BackupProtos.Journal();\n      MessageNano.mergeFrom(journal,readCheckedBytes(mBuffer,dataSize));\n      applyJournal(journal);\n      restoreSuccessful=isBackupCompatible(journal);\n      return;\n    }\n    if (!mExistingKeys.isEmpty() && !mExistingKeys.contains(backupKey)) {\n      if (DEBUG)       Log.e(TAG,\"Ignoring key not present in the backup state \" + backupKey);\n      return;\n    }\n    BackupProtos.Key key=backupKeyToKey(backupKey);\n    mKeys.add(key);\nswitch (key.type) {\ncase BackupProtos.Key.FAVORITE:\n      restoreFavorite(key,mBuffer,dataSize);\n    break;\ncase BackupProtos.Key.SCREEN:\n  restoreScreen(key,mBuffer,dataSize);\nbreak;\ncase BackupProtos.Key.ICON:\nrestoreIcon(key,mBuffer,dataSize);\nbreak;\ncase BackupProtos.Key.WIDGET:\nrestoreWidget(key,mBuffer,dataSize);\nbreak;\ndefault :\nLog.w(TAG,\"unknown restore entity type: \" + key.type);\nmKeys.remove(key);\nbreak;\n}\n}\n catch (IOException e) {\nLog.w(TAG,\"ignoring unparsable backup entry\",e);\n}\n}\n", "public static float[] join(float[] arrayA,float... arrayB){\n  if ((arrayB == null) || (arrayB.length == 0)) {\n    return arrayA;\n  }\n  if ((arrayA == null) || (arrayA.length == 0)) {\n    return arrayB;\n  }\n  float[] array=new float[arrayA.length + arrayB.length];\n  System.arraycopy(arrayA,0,array,0,arrayA.length);\n  System.arraycopy(arrayB,0,array,arrayA.length,arrayB.length);\n  return array;\n}\n", "  public String getHTMLModel(String modelFileName) throws Throwable {\n    String retStr;\n    try{\n      FileInputStream fis = new FileInputStream(new File(modelFileName));\n      byte[] data = new byte[fis.available()];\n      fis.read(data, 0, data.length);\n      fis.close();\n      retStr = new String(data);\n    } catch(Throwable e) {\n      throw e;\n    }\n    return retStr;\n  }\n", "\tpublic void valueForPathChanged(TreePath path, Object newValue) {\n\t\tObject node = path.getLastPathComponent();\n\n\n\t\tString errorMessage = QSystem.project.setNodeName(node, (String)newValue);\n\n\t    if (errorMessage.length() > 0) {\n\t\t\tQSystem.event.errorMessage(\"Naming Error\", errorMessage);\n\t    }\n\n\n\t\tint len = treeModelListeners.size();\n\t\tTreeModelEvent e = new TreeModelEvent(this, path);\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\t((TreeModelListener)treeModelListeners.elementAt(i)).treeNodesChanged(e);\n\t\t}\n\t}\n", "private boolean balance(int tier,Map<Integer,Queue<Integer>> pendingParts,FullAssignmentMap fullMap,Collection<ClusterNode> topSnapshot,boolean allowNeighbors){\n  int idealPartCnt=parts / topSnapshot.size();\n  Map<UUID,PartitionSet> mapping=fullMap.tierMapping(tier);\n  PrioritizedPartitionMap underloadedNodes=filterNodes(mapping,idealPartCnt,false);\n  PrioritizedPartitionMap overloadedNodes=filterNodes(mapping,idealPartCnt,true);\n  do {\n    boolean retry=false;\n    for (    PartitionSet overloaded : overloadedNodes.assignments()) {\n      for (      Integer part : overloaded.partitions()) {\n        boolean assigned=false;\n        for (        PartitionSet underloaded : underloadedNodes.assignments()) {\n          if (fullMap.assign(part,tier,underloaded.node(),pendingParts,false,allowNeighbors)) {\n            if (overloaded.size() <= idealPartCnt)             overloadedNodes.remove(overloaded.nodeId());\n else             overloadedNodes.update();\n            if (underloaded.size() >= idealPartCnt)             underloadedNodes.remove(underloaded.nodeId());\n else             underloadedNodes.update();\n            assigned=true;\n            retry=true;\n            break;\n          }\n        }\n        if (!assigned) {\n          for (          PartitionSet underloaded : underloadedNodes.assignments()) {\n            if (fullMap.assign(part,tier,underloaded.node(),pendingParts,true,allowNeighbors)) {\n              if (overloaded.size() <= idealPartCnt)               overloadedNodes.remove(overloaded.nodeId());\n else               overloadedNodes.update();\n              if (underloaded.size() >= idealPartCnt)               underloadedNodes.remove(underloaded.nodeId());\n else               underloadedNodes.update();\n              retry=true;\n              break;\n            }\n          }\n        }\n        if (retry)         break;\n      }\n      if (retry)       break;\n    }\n    if (!retry)     break;\n  }\n while (true);\n  return underloadedNodes.isEmpty();\n}\n", "    public void removeLocalAudio(DataSource dataSource) {\n        int index = audioDataSources.indexOf(dataSource);\n        System.err.println(\"Here\");\n        if (index != -1) {\n            System.err.println(\"Removing datasource\");\n            audioDataSources.remove(index);\n            JPanel panel = audioPanels.get(index);\n            if (panel != null) {\n                System.err.println(\"Removing panel\");\n                volumePanel.remove(panel);\n            }\n            audioPanels.remove(index);\n            Player player = audioPlayers.get(index);\n            if (player != null) {\n                player.stop();\n            }\n            audioPlayers.remove(index);\n            volumeControls.remove(index);\n            playerGainControls.remove(index);\n            audioSliders.remove(index);\n            audioMutes.remove(index);\n        }\n        validate();\n    }\n", "public void serialize(T object, OutputStream os) throws IOException {\n        JsonGenerator jsonGenerator = LoganSquare.JSON_FACTORY.createGenerator(os);\n        serialize(object, jsonGenerator, true);\n        jsonGenerator.close();\n    }", "public Authentication doAuthenticate(final TenantSecurityToken secruityToken){\n  resolveTenant(secruityToken);\n  PreAuthenticatedAuthenticationToken authentication=new PreAuthenticatedAuthenticationToken(null,null);\n  for (  final PreAuthentificationFilter filter : filterChain) {\n    final PreAuthenticatedAuthenticationToken authenticationRest=createAuthentication(filter,secruityToken);\n    if (authenticationRest != null) {\n      authentication=authenticationRest;\n      authentication.setDetails(new TenantAwareAuthenticationDetails(secruityToken.getTenant(),true));\n      break;\n    }\n  }\n  return preAuthenticatedAuthenticationProvider.authenticate(authentication);\n}\n", "    protected void addInputFieldPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Label_inputField_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_Label_inputField_feature\", \"_UI_Label_type\"),\n\t\t\t\t ModelPackage.Literals.LABEL__INPUT_FIELD,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t null,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public void config (String msg) {\n\t\tStackTraceElement caller = StackTraceUtils.getCallerStackTraceElement ();\n\t\tif (caller != null) {\n\t\t\tlogger.logp (Level.CONFIG, caller.getClassName (), caller.getMethodName () + \"():\" + caller.getLineNumber (), msg);\n\t\t} else {\n\t\t\tlogger.logp (Level.CONFIG, \"(UnknownSourceClass)\", \"(unknownSourceMethod)\", msg);\n\t\t}\n\t}", "private void addNewDistribution(){\n  editDistribution=Boolean.FALSE;\n  final String name=HawkbitCommonUtil.trimAndNullIfEmpty(distNameTextField.getValue());\n  final String version=HawkbitCommonUtil.trimAndNullIfEmpty(distVersionTextField.getValue());\n  final String distSetTypeName=HawkbitCommonUtil.trimAndNullIfEmpty((String)distsetTypeNameComboBox.getValue());\n  final String desc=HawkbitCommonUtil.trimAndNullIfEmpty(descTextArea.getValue());\n  final boolean isMigStepReq=reqMigStepCheckbox.getValue();\n  DistributionSet newDist=entityFactory.generateDistributionSet();\n  setDistributionValues(newDist,name,version,distSetTypeName,desc,isMigStepReq);\n  newDist=distributionSetManagement.createDistributionSet(newDist);\n  notificationMessage.displaySuccess(i18n.get(\"message.new.dist.save.success\",new Object[]{newDist.getName(),newDist.getVersion()}));\n  final Set<DistributionSetIdName> s=new HashSet<>();\n  s.add(new DistributionSetIdName(newDist.getId(),newDist.getName(),newDist.getVersion()));\n  final DistributionSetTable distributionSetTable=SpringContextHelper.getBean(DistributionSetTable.class);\n  distributionSetTable.setValue(s);\n}\n", "public void unsubscribeAllDeletedResources(CmsDbContext dbc, String poolName, long deletedTo) throws CmsException {\n\n        getSubscriptionDriver().unsubscribeAllDeletedResources(dbc, poolName, deletedTo);\n    }", "\tpublic GalleryItem getItem(Point coords) {\n\t\tcheckWidget();\n\n\t\tif (DEBUG)\n\t\t\tSystem.out.println(\"getitem \" + coords.x + \" \" + coords.y); //$NON-NLS-1$ //$NON-NLS-2$\n\n\t\tint pos = vertical ? (coords.y + translate) : (coords.x + translate);\n\n\t\tGalleryItem group = this._getGroup(coords);\n\t\tif (group != null)\n\t\t\treturn groupRenderer.getItem(group, new Point(vertical ? coords.x\n\t\t\t\t\t: pos, vertical ? pos : coords.y));\n\n\t\treturn null;\n\t}\n", "    public Date getDate(String key) throws ConfigException {\n        String ret = getString(key);\n        try {\n            return DATE_FORMAT.parse(ret);\n        } catch (ParseException pe) {\n              throw new ConfigException(source,key,\n                      \"Date must be \" + DATE_FORMAT.toPattern() +\n                      \"not: \" + ret, pe);                  \n        }\n    }\n", "public void put(int key,float value){\n  int i=binarySearch(mKeys,0,mSize,key);\n  if (i >= 0) {\n    mValues[i]=value;\n  }\n else {\n    i=~i;\n    if (mSize >= mKeys.length) {\n      int n=ArrayUtils.idealIntArraySize(mSize + 1);\n      int[] nkeys=new int[n];", "    public void clearValidationListeners() {\n        clear(\"listeners\");\n    }\n", "public void increaseTimer ( ) { if ( timer < duration ) { timer ++ ; timerChange = NUM_ ; } }", "public abstract Counter0 newCounter ( String name , Description desc ) ;", "    public void activateAll() {\n        if(! activated) {\n            for (ActiveEntity entity : getActiveEntities()) {\n                entity.activate();\n            }\n            activated = true;\n        }\n    }\n", "    public int compareTo(Boolean that) {\n        if (that == null) {\n            throw new NullPointerException();\n        }\n\n        if (this.value == that.value) {\n            return 0;\n        }\n\n        return this.value ? 1 : -1;\n    }\n", "public static RuntimeEnvironmentBuilder getDefault(String groupId, String artifactId, String version, String kbaseName, String ksessionName) {\n    \tKieServices ks = KieServices.Factory.get();\n    \treturn getDefault(ks.newReleaseId(groupId, artifactId, ver", "private double phi(long timestampMillis) {\n        long timeDiffMillis;\n        double meanMillis;\n        double stdDeviationMillis;\n\n        synchronized (heartbeatHistory) {\n            long lastTimestampMillis = lastHeartbeatMillis;\n            if (lastTimestampMillis == NO_HEARTBEAT_TIMESTAMP) {\n                return 0.0;\n            }\n\n            timeDiffMillis = timestampMillis - lastTimestampMillis;\n            meanMillis = heartbeatHistory.mean();\n            stdDeviationMillis = ensureValidStdDeviation(heartbeatHistory.stdDeviation());\n        }\n\n        return phi(timeDiffMillis, meanMillis + acceptableHeartbeatPauseMillis, stdDeviationMillis);\n    }", "public SQLQuery ( String typeName , String sqlExpression , QueryResultType queryResultType ) { this ( sqlExpression , typeName , null , queryResultType , null ) ; }", "@Override public ShapeTileOctagon bounding_octagon(){\n  if (precalc_bounding_octagon != null)   return precalc_bounding_octagon;\n  double lx=Integer.MAX_VALUE;\n  double ly=Integer.MAX_VALUE;\n  double rx=Integer.MIN_VALUE;\n  double uy=Integer.MIN_VALUE;\n  double ulx=Integer.MAX_VALUE;\n  double lrx=Integer.MIN_VALUE;\n  double llx=Integer.MAX_VALUE;\n  double urx=Integer.MIN_VALUE;\n  for (int index=0; index < lines_size(); ++index) {\n    PlaPointFloat curr=corner_approx(index);\n    lx=Math.min(lx,curr.v_x);\n    ly=Math.min(ly,curr.v_y);\n    rx=Math.max(rx,curr.v_x);\n    uy=Math.max(uy,curr.v_y);\n    double tmp=curr.v_x - curr.v_y;\n    ulx=Math.min(ulx,tmp);\n    lrx=Math.max(lrx,tmp);\n    tmp=curr.v_x + curr.v_y;\n    llx=Math.min(llx,tmp);\n    urx=Math.max(urx,tmp);\n  }\n  precalc_bounding_octagon=new ShapeTileOctagon(Math.floor(lx),Math.floor(ly),Math.ceil(rx),Math.ceil(uy),Math.floor(ulx),Math.ceil(lrx),Math.floor(llx),Math.ceil(urx));\n  return precalc_bounding_octagon;\n}\n", "public void applyTo(String[] arr)\n    {\n        for(int i = 0; i < arr.length; i++)\n            arr[i] = stem(arr[i]);\n    }", "public int read(InputStream is){\n  init();\n  if (is != null) {\n    if (!(is instanceof BufferedInputStream))     is=new BufferedInputStream(is);\n    in=(BufferedInputStream)is;\n    readHeader();\n    if (!err()) {\n      readContents();\n      if (frameCount < 0) {\n        status=STATUS_FORMAT_ERROR;\n      }\n    }\n  }\n else {\n    status=STATUS_OPEN_ERROR;\n  }\n  try {\n    is.close();\n  }\n catch (  IOException e) {\n  }\n  return status;\n}\n", "public static void writeCmd(final int statementId, final ParameterHolder[] parameters,\n      final int parameterCount,\n      ColumnType[] parameterTypeHeader, final PacketOutputStream pos,\n      final byte cursorFlag) throws IOException {\n    pos.write(Packet.COM_STMT_EXECUTE);\n    pos.writeInt(statementId);\n    pos.write(cursorFlag);\n    pos.writeInt(1); //Iteration pos\n\n    //create null bitmap\n    if (parameterCount > 0) {\n      int nullCount = (parameterCount + 7) / 8;\n\n      byte[] nullBitsBuffer = new byte[nullCount];\n      for (int i = 0; i < parameterCount; i++) {\n        if (parameters[i].isNullData()) {\n          nullBitsBuffer[i / 8] |= (1 << (i % 8));\n        }\n      }\n      pos.write(nullBitsBuffer, 0, nullCount);\n\n      //check if parameters type (using setXXX) have change since previous request, and resend new header type if so\n      boolean mustSendHeaderType = false;\n      if (parameterTypeHeader[0] == null) {\n        mustSendHeaderType = true;\n      } else {\n        for (int i = 0; i < parameterCount; i++) {\n          if (!parameterTypeHeader[i].equals(parameters[i].getColumnType())) {\n            mustSendHeaderType = true;\n            break;\n          }\n        }\n      }\n\n      if (mustSendHeaderType) {\n        pos.write((byte) 0x01);\n        //Store types of parameters in first in first package that is sent to the server.\n        for (int i = 0; i < parameterCount; i++) {\n          parameterTypeHeader[i] = parameters[i].getColumnType();\n          pos.writeShort(parameterTypeHeader[i].getType());\n        }\n      } else {\n        pos.write((byte) 0x00);\n      }\n    }\n\n    for (int i = 0; i < parameterCount; i++) {\n      ParameterHolder holder = parameters[i];\n      if (!holder.isNullData() && !holder.isLongData()) {\n        holder.writeBinary(pos);\n      }\n    }\n  }", "public void increment ( ) { if ( mCount == NUM_ && ! mFirstIncRunnables . isEmpty ( ) ) { int numRunnables = mFirstIncRunnables . size ( ) ; for ( int i = NUM_ ; i < numRunnables ; i ++ ) { mFirstIncRunnables . get ( i ) . run ( ) ; } } mCount ++ ; }", "    private String fontWrap(String text, String fontName, double fontSize) {\n\tif(fontName == null && fontSize == -1)\n\t    return text;\n\telse if(fontName == null)\n\t    return \"<font point-size=\\\"\" + fontSize + \"\\\">\" + text + \"</font>\";\n\telse if(fontSize <= 0)\n\t    return \"<font face=\\\"\" + fontName + \"\\\">\" + text + \"</font>\";\n\telse\n\t    return \"<font face=\\\"\" + fontName + \"\\\" point-size=\\\"\" + fontSize + \"\\\">\" + text + \"</font>\";\n    }\n", "public long copyUsingLengthPrefix(BytesRef bytes){\n  if (bytes.length >= 32768) {\n    throw new IllegalArgumentException(\"max length is 32767 (got \" + bytes.length + \")\");\n  }\n  if (upto + bytes.length + 2 > blockSize) {\n    if (bytes.length + 2 > blockSize) {\n      throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \"+ bytes.length+ \" bytes\");\n    }\n    if (currentBlock != null) {\n      addBlock(currentBlock);\n    }\n    currentBlock=new byte[blockSize];\n    upto=0;\n  }\n  final long pointer=getPointer();\n  if (bytes.length < 128) {\n    currentBlock[upto++]=(byte)bytes.length;\n  }\n else {\n    currentBlock[upto++]=(byte)(0x80 | (bytes.length >> 8));\n    currentBlock[upto++]=(byte)(bytes.length & 0xff);\n  }\n  System.arraycopy(bytes.bytes,bytes.offset,currentBlock,upto,bytes.length);\n  upto+=bytes.length;\n  return pointer;\n}\n", "public static Pair < Type , List < ArrayBracketPair > > unwrapArrayTypes ( Type type ) { final List < ArrayBracketPair > arrayBracketPairs = new ArrayList < > ( ) ; while ( type instanceof ArrayType ) { ArrayType arrayType = ( ArrayType ) type ; arrayBrac", "public void setCategoriesAdapterFromMenu(@MenuRes int menuRes) {\n        Menu menu = new MenuBuilder(getContext());\n        new MenuInflater(getContext()).inflate(menuRes, menu);\n        setCategoriesAdapterFromMenu(menu);\n    }", "public Vector2 pow ( double power ) { return Vector2 . pow ( this , power ) ; }", "\tprivate void init(File pCabinetDir) {\n\t\tLogger.getLogger(getClass().getCanonicalName());\n\t\tmCabinetKey = new MachineKey().getKey();\n\t\tmCabinetDir = pCabinetDir;\n\t\tread();\n\t}\n", "synchronized void changed(){\n  changeCount.incrementAndGet();\n  segmentInfos.changed();\n}\n", "public static Validator<Object> notNull(@NonNull final Context context) {\n        return new NotNullValidator(context, R.string.default_error_message);\n    }", "public ScriptThread ( final ScriptEngine engine , final File selectedFile , final List < Pair < String , Object > > bindings ) { m_engine = engine ; m_selectedFile = selectedFile ; m_pairList = bindings ; }", "public void restart(){\n  thread.resume();\n}\n", "public static void load(String imageUrl, ImageLoaderHandler handler) {\n        load(imageUrl, handler.getImageView(), handler, null, null);\n    }", "    public Vector3D invertLocal() {\n            x *= -1;\n            y *= -1;\n            z *= -1;\n            return this;\n    }\n", "@Override\n    public void link(NGScope isolateScope, final JQElement element, JSON attrs) {\n        Object o = isolateScope.get(getName());\n        if (o == null) {\n            String text = element.text();\n            append(element, text);\n        } else if (o instanceof String) {\n            String filename = (String) o;\n            http.get(filename).then(new Done<Response> () {\n\n                @Override\n                public void call(Response value) {\n                    append(element, value.getText());\n                }\n            });\n        } else if (o instanceof TextResource) {\n            TextResource resource = (TextResource) o;\n            String text = resource.getText();\n            append(element, text);\n        } else {\n            LOG.warning(getName() + \" did not recognize the type of value passed to it.\");\n        }\n    }", "public static Long asLong(Object obj){\n  if (obj == null) {\n    return null;\n  }\n  if (obj instanceof Integer) {\n    return Long.valueOf((Integer)obj);\n  }\n  if (obj instanceof Long) {\n    return (Long)obj;\n  }\n  throw new ClassCastException(\"Expected value of type Long or Integer\");\n}\n", "public static String encryptValueAsJwtDirectAes128Sha256(final Key key, final Serializable value) {\n        return encryptValueAsJwt(key, value, KeyManagementAlgorithmIdentifiers.DIRECT,\n            CipherExecutor.DEFAULT_CONTENT_ENCRYPTION_ALGORITHM);\n    }", "public CurrencyDateCalculatorBuilder<Date> getDefaultCurrencyDateCalculatorBuilder(final String ccy1, final String ccy2, final SpotLag spotLag) {\r\n        final CurrencyDateCalculatorBuilder<Date> builder = new CurrencyDateCalculatorBuilder<Date>().currencyPair(ccy1, ccy2, spotLag);\r\n\r\n        return configureCurrencyCalculatorBuilder(builder).tenorHolidayHandler(new DateModifiedFollowingHandler());\r\n    }", "public void onJump ( EntityLivingBase entityLiving ) { if ( nextMod != null ) { nextMod . onJump ( entityLiving ) ; } }", "private void checkStatus(HadoopJobId jobId,boolean complete) throws Exception {\n  for (int i=0; i < gridCount(); i++) {\n    IgniteKernal kernal=(IgniteKernal)grid(i);\n    Hadoop hadoop=kernal.hadoop();\n    HadoopJobStatus stat=hadoop.status(jobId);\n    assert stat != null;\n    IgniteInternalFuture<?> fut=hadoop.finishFuture(jobId);\n    if (!complete)     assertFalse(fut.isDone());\n else {\n      info(\"Waiting for status future completion on node [idx=\" + i + \", nodeId=\"+ kernal.getLocalNodeId()+ ']');\n      fut.get();\n    }\n  }\n}\n", "public static JobOperator getJobOperator() {\n        JobOperator jobOperator = null;\n        if (System.getSecurityManager() == null) {\n            for(JobOperator op : ServiceLoader.load(JobOperator.class)) {\n                jobOperator = op;\n                break;\n            }\n        } else {\n            jobOperator = AccessController.doPrivileged(new PrivilegedAction<JobOperator>() {\n                public JobOperator run() {\n                    for (JobOperator op : ServiceLoader.load(JobOperator.class)) {\n                        return op;\n                    }\n                    return null;\n                }\n            });\n        }\n\n        if (jobOperator == null) {\n            throw new BatchRuntimeException(\"The ServiceLoader was unable to find an implemenation for JobOperator. Check classpath for META-INF/services/javax.batch.operations.JobOperator file.\");\n        }\n        return jobOperator;\n    }", "public static < T > Set < T > minus ( Set < T > self , Object removeMe ) { Comparator comparator = ( self instanceof SortedSet ) ? ( ( SortedSet ) self ) . comparator ( ) : null ; final Set < T > ansSet = createSimilarSet ( self ) ; for ( T t : self ) { boolean areEqual = ( comparator != null ) ? ( comparator . compare ( t , removeMe ) == NUM_ ) : coercedEquals ( t , removeMe ) ; if ( ! areEqual ) ansSet . add ( t ) ; } return ansSet ; }", "@Override\n\tpublic List<CommerceAddress> findAll(int start, int end) {\n\t\treturn findAll(start, end, null);\n\t}", "public static String random40 ( ) { return randomString ( NUM_ ) ; }", "public SearchResultsObjectPool getSearchResultsObjectPool() {\n        if (TraceComponent.isAnyTracingEnabled()\n            && tc.isEntryEnabled()) {\n            SibTr.entry(tc, \"getSearchResultsObjectPool\");\n            SibTr.exit(tc, \"getSearchResultsObjectPool\", _connectionToMP);\n        }\n        return _searchResultsPool;\n    }", "public Tag addTag ( final Tag parent , final String name ) throws CouldntSaveDataException { try { if ( parent == null ) { return ObjectFinders . getObject ( m_manager . addTag ( m_root . getNative ( ) , name ) , m_allTags . values ( ) ) ; } else { return ObjectFinders . getObject ( m_manager . addTag ( parent . getNative ( ) , name ) , m_allTags . values ( ) ) ; } } catch ( final com . google . security . zynamics . binnavi . Database . Exceptions . CouldntSaveDataException exception ) { throw new CouldntSaveDataException ( exception ) ; } }", "public HttpProcessor ( HttpProcessorConfig conf ) { this . conf = conf ; }", "public static HttpRequest put ( final CharSequence url ) throws HttpRequestException { return new HttpRequest ( url , METHOD_PUT ) ; }", "public static void removeAllView ( final JFrame parent , final BackEndDebuggerProvider debuggerProvider , final INaviView view ) { Preconditions . checkNotNull ( parent , STR_ ) ; Preconditions . checkNotNull ( debuggerProvider , STR_ ) ; Preconditions . ", "public boolean isEmpty(){\n  return mChartSeries == null || mChartSeries.isEmpty();\n}\n", "public static void printWarning ( int errorCode , String parameters , Throwable e ) { recorder . record ( errorCode , parameters , e ) ; DebugPrinter . print ( STR_ + errorCode ) ; if ( TLCGlobals . warn ) { String message = getMessage ( WARNING , errorCo", "private void paintCloseHover ( Graphics2D g , JComponent c , int width , int height ) { paintClose ( g , c , width , height , hover ) ; }", "public PointF mapViewToImage ( PointF viewPoint ) { float [ ] points = mTempValues ; points [ NUM_ ] = viewPoint . x ; points [ NUM_ ] = viewPoint . y ; mActiveTransform . invert ( mActiveTransformInverse ) ; mActiveTransformInverse . mapPoints ( points ,", "public Bitmap decodeFileDescriptor ( FileDescriptor fd , BitmapFactory . Options options ) { if ( options . mCancel ) { return null ; } Thread thread = Thread . currentThread ( ) ; if ( ! canThreadDecoding ( thread ) ) { return null ; } setDecodingOptions", "public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { request . getSession ( ) . setAttribute ( STR_ , STR_ ) ; response . sendRedirect ( STR_ ) ; return ; }", "public ClearModifiers add ( ClearModifiers modifiers ) { return createIfNeeded ( super . add ( modifiers ) ) ; }", "public static String shortFormatDayTime ( Date dt ) { return createDateFormatter ( ) . shortFormatDayTime ( dt ) ; }", "\tpublic Object clone() {\n\t\t// begin-user-code\n\t\t// TODO Auto-generated method stub\n\t\t// Create a new instance, copy contents, and return it\n\n\t\t// create a new instance of entry and copy contents\n\t\tEntry entry = new Entry();\n\t\tentry.copy(this);\n\n\t\t// return\n\t\treturn entry;\n\n\t\t// end-user-code\n\t}\n", "public static String encodeAsXMLName(String s) {\n\n\t\tStringBuilder sb = new StringBuilder(\"_\");\n\t\tfor (byte b : s.getBytes(Charset.forName(\"UTF-8\"))) {\n\t\t\tsb.append(Integer.toHexString((b >>> 4) & 0xF));\n\t\t\tsb.append(Integer.toHexString(b & 0xF));\n\t\t}\n\n\t\tr", "    public PeriodFormatter toFormatter() {\n        PeriodFormatter formatter = toFormatter(iElementPairs, iNotPrinter, iNotParser);\n        //iFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();\n        iFieldFormatters = new FieldFormatter[iFieldFormatters.length];\n        Arrays.copy(iFieldFormatters, iFieldFormatters);\n        return formatter;\n    }\n", "void recalcAlerts() {\r\n        if (!View.isInitialised()) {\r\n            return;\r\n    \t}\r\n    \t// Must only be called when View is initialised\r\n    \tint totalInfo = 0;\r\n    \tint totalLow = 0;\r\n    \tint totalMedium = 0;\r\n    \tint totalHigh = 0;\r\n\r\n    \tAlertNode parent = (AlertNode) getAlertPanel().getTreeAlert().getModel().getRoot();\r\n    \tif (parent != null) {\r\n            for (int i=0; i<parent.getChildCount(); i++) {\r\n                AlertNode child = parent.getChildAt(i);\r\n            \tswitch (child.getRisk()) {\r\n            \tcase Alert.RISK_INFO:\ttotalInfo++;\tbreak;\r\n            \tcase Alert.RISK_LOW:\ttotalLow++;\t\tbreak;\r\n            \tcase Alert.RISK_MEDIUM:\ttotalMedium++;\tbreak;\r\n            \tcase Alert.RISK_HIGH:\ttotalHigh++;\tbreak;\r\n            \t}\r\n            }\r\n    \t}\r\n    \tMainFooterPanel footer = View.getSingleton().getMainFrame().getMainFooterPanel();\r\n        footer.setAlertInfo(totalInfo);\r\n        footer.setAlertLow(totalLow);\r\n        footer.setAlertMedium(totalMedium);\r\n        footer.setAlertHigh(totalHigh);\r\n    }", "void changedPort ( DebuggerTemplate template , int port ) ;", "public void zero ( ) throws IOException ;", "public void writeString(String s,Encoding encoding) throws IOException {\n  if (encoding != null) {\n    byte[] buffer=encoding.encodeToCharset(s);\n    writeBuffer(buffer);\n  }\n else {\n    writeBuffer(s.getBytes());\n  }\n}\n", "static DoublesUnionImpl heapifyInstance(final Memory srcMem) {\n    final HeapUpdateDoublesSketch sketch = HeapUpdateDoublesSketch.heapifyInstance(srcMem);\n    final DoublesUnionImpl union = new DoublesUnionImpl(sketch.getK());\n    union.gadget_ = sketch;\n    return union;\n  }", "public Cursor<DataPoint> readDataPoints(Series series, Interval interval, DateTimeZone timezone, Rollup rollup, Interpolation interpolation) {\n    checkNotNull(series);\n    checkNotNull(interval);\n    checkNotNull(timezone);\n\n    URI uri = null;\n    try {\n      URIBuilder builder = new URIBuilder(String.format(\"/%s/series/key/%s/segment/\", API_VERSION, urlencode(series.getKey())));\n      addInterpolationToURI(builder, interpolation);\n      addIntervalToURI(builder, interval);\n      addRollupToURI(builder, rollup);\n      addTimeZoneToURI(builder, timezone);\n      uri = builder.build();\n    } catch (URISyntaxException e) {\n      String message = String.format(\"Could not build URI with inputs: key: %s, interval: %s, rollup: %s, timezone: %s\", series.getKey(), interval, rollup, timezone);\n      throw new IllegalArgumentException(message, e);\n    }\n\n    Cursor<DataPoint> cursor = new DataPointCursor(uri, this);\n    return cursor;\n  }", "\tprotected JavaFileObject compileSource(final String name, final String code, final ClassLoader parentLoader) throws InMemoryCompileException  {\n\t\tMap<String, JavaFileObject> result= compileSources(Collections.singleton(new SourceFile(name, code)), parentLoader);\n\n\t\treturn (result.get(name));\n\t}\n", "    public void put(T value, int... keys) {\n        // 'value' must be first due to java varargs\n        assert keys.length >= 1;\n        ExtendableList m = map;\n        for(int i=0; i<keys.length-1; i++) {\n            ExtendableList m2 = (ExtendableList) m.get(keys[i]);\n            if(m2 == null) {\n                m2 = new ExtendableList();\n                m.set(keys[i], m2);\n            }\n            m = m2;\n        }\n        \n        m.set(keys[keys.length-1], value);\n    }\n", "\tpublic void put(String prop, Vector2f value) {\n\t\tDictEntry entry = new DictEntry();\n\t\tentry.vec2Value = value;\n\t\t\n\t\tprop = prop.toLowerCase();\n\t\tthis.vocab.put(prop, entry);\n\t}\n", "public boolean canMapMemory ( ) { return targetInformation . getDebuggerOptions ( ) . canMemmap ( ) ; }", "protected void peerAcquiringLock (PeerNode peer, NodeObject.Lock lock)\n    {\n        // refuse to ratify if we believe someone else owns the lock\n        String owner = queryLock(lock);\n        if (owner != null) {\n            log.warning(\"Refusing to ratify lock acquisition.\", \"lock\", lock,\n                \"node\", peer.getNodeName(), \"owner\", owner);\n            return;\n        }\n\n        // check for an existing handler\n        LockHandler handler = _locks.get(lock);\n        if (handler == null) {\n            createLockHandler(peer, lock, true);\n            return;\n        }\n\n        // if the existing node has priority, we're done\n        if (hasPriority(handler.getNodeName(), peer.getNodeName())) {\n            return;\n        }\n\n        // the new node has priority, so cancel the existing handler and take over\n        // its listeners\n        ResultListenerList<String> olisteners = handler.listeners;\n        handler.cancel();\n        handler = createLockHandler(peer, lock, true);\n        handler.listeners = olisteners;\n    }", "public String build() {\n        StringBuilder scriptBuilder = new StringBuilder();\n        StringBuilder scriptBody = new StringBuilder();\n        String importStmt = \"import \";\n        \n        try {\n            if (scriptCode.contains(importStmt)) {\n                BufferedReader reader = new BufferedReader(new StringReader(scriptCode));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    if (line.trim().startsWith(importStmt)) {\n                        scriptBuilder.append(line);\n                        scriptBuilder.append(\"\\n\");\n                    } else {\n                        scriptBody.append((scriptBody.length() == 0 ? \"\" : \"\\n\"));\n                        scriptBody.append(line);\n                    }\n                }\n            } else {\n                scriptBody.append(scriptCode);\n            }\n        } catch (IOException e) {\n            throw new CitrusRuntimeException(\"Failed to construct script from template\", e);\n        }\n        \n        scriptBuilder.append(scriptHead);\n        scriptBuilder.append(scriptBody.toString());\n        scriptBuilder.append(scriptTail);\n        \n        return scriptBuilder.toString();\n    }", "public static void tagNode ( final JFrame parent , final NaviNode node , final CTag tag ) { try { node . getRawNode ( ) . tagNode ( tag ) ; } catch ( final CouldntSaveDataException e ) { CUtilityFunctions . logException ( e ) ; final String innerMessage =", "private static int findChoiceSubMessage(MessagePattern pattern, int partIndex, double number) {\n        int count=pattern.countParts();\n        int msgStart;\n        // Iterate over (ARG_INT|DOUBLE, ARG_SELECTOR, message) tuples\n        // until ARG_LIMIT or end of choice-only pattern.\n        // Ignore the first number and selector and start the loop on the first message.\n        partIndex+=2;\n        for(;;) {\n            // Skip but remember the current sub-message.\n            msgStart=partIndex;\n            partIndex=pattern.getLimitPartIndex(partIndex);\n            if(++partIndex>=count) {\n                // Reached the end of the choice-only pattern.\n                // Return with the last sub-message.\n                break;\n            }\n            Part part=pattern.getPart(partIndex++);\n            Part.Type type=part.getType();\n            if(type==Part.Type.ARG_LIMIT) {\n                // Reached the end of the ChoiceFormat style.\n                // Return with the last sub-message.\n                break;\n            }\n            // part is an ARG_INT or ARG_DOUBLE\n            assert type.hasNumericValue();\n            double boundary=pattern.getNumericValue(part);\n            // Fetch the ARG_SELECTOR character.\n            int selectorIndex=pattern.getPatternIndex(partIndex++);\n            char boundaryChar=pattern.getPatternString().charAt(selectorIndex);\n            if(boundaryChar=='<' ? !(number>boundary) : !(number>=boundary)) {\n                // The number is in the interval between the previous boundary and the current one.\n                // Return with the sub-message between them.\n                // The !(a>b) and !(a>=b) comparisons are equivalent to\n                // (a<=b) and (a<b) except they \"catch\" NaN.\n                break;\n            }\n        }\n        return msgStart;\n    }", "   public void setMinutes( int value ) {\n      setMaxwait( value );\n      setMaxWaitUnit( TimeUnit.MINUTE_UNIT );\n   }\n", "protected List createParentBoundables( List childBoundables, int newLevel ) {\n        Assert.isTrue(!childBoundables.isEmpty());\n        int minLeafCount = (int) Math.ceil((childBoundables.size() / (double) getNodeCapacity()));\n        ArrayList sortedChi", "    static public BpmFilter minAmpFilter(final double minAmp) {\n        return new BpmFilter() {\n            public boolean accept(Object record) {\n                return ((Correlation)record).numRecords() >= 3;\n            }\n            \n            public RecordFilter filterForHandle(String handle) {\n                if ( handle.equals(BPM.AMP_AVG_HANDLE) ) {\n                    return RecordFilterFactory.minDoubleFilter(minAmp);\n                }\n                return null;\n            }\n        };\n    }\n", "private void invalidByte(int position,int count,int c) throws UTFDataFormatException {\n  throw new UTFDataFormatException(Localizer.getMessage(\"jsp.error.xml.invalidByte\",Integer.toString(position),Integer.toString(count)));\n}\n", "private Locale toLocale ( String str ) { if ( str == null ) return null ; String [ ] split = str . split ( STR_ ) ; if ( split . length == NUM_ ) return new Locale ( STR_ ) ; else if ( split . length == NUM_ ) return new Locale ( split [ NUM_ ] ) ; else if ( split . length == NUM_ ) return new Locale ( split [ NUM_ ] , split [ NUM_ ] ) ; else return new Locale ( split [ NUM_ ] , split [ NUM_ ] , split [ NUM_ ] ) ; }", "    public PhoneObjectTopLevelNode getCiscoParent() {\n    \tif(this.getTypeName().startsWith(\"CiscoIP\"))\n    \t\treturn (PhoneObjectTopLevelNode)this;\n    \telse if(this.getParent() == null)\n    \t\treturn null;\n\t\telse\n    \t\treturn (PhoneObjectTopLevelNode) ((PhoneObjectNode)this.getParent()).getCiscoParent();\n    }\n", "@SuppressWarnings(\"unchecked\")\n\tpublic static <T, I> List<T> asList(I... target) {\n\t\treturn (List<T>) Arrays.asList(asArray(target));\n\t}", "public static int count(String string,String mark){\n  if (!TextUtils.isEmpty(string) && !TextUtils.isEmpty(mark)) {\n    int count=0;\n    int index=string.indexOf(mark);\n    while (index != -1) {\n      count++;\n      string=string.substring(index + mark.le", "public Set<String> addContent(Assignment assign){\n  if (!paused) {\n    curState.addToState(assign);\n    return update();\n  }\n else {\n    log.info(\"system is paused, ignoring content \" + assign);\n    return Collections.emptySet();\n  }\n}\n", "\tpublic void add(String filename, String name) {\n\t\tparts.put(filename, name);\n\t}\n", "public static void putCharLE(byte[] arr,long off,char val){\n  if (UNALIGNED)   UNSAFE.putChar(arr,off,Character.reverseBytes(val));\n else   putCharByByte(arr,off,val,false);\n}\n", "public static boolean isRoot ( ) { String binPath = STR_ ; String xBinPath = STR_ ; if ( new File ( binPath ) . exists ( ) && isExecutable ( binPath ) ) return BOOL_ ; if ( new File ( xBinPath ) . exists ( ) && isExecutable ( xBinPath ) ) return BOOL_ ; r", "public static boolean isHigher8BitRegister ( final String register ) { return register . equals ( STR_ ) || register . equals ( STR_ ) || register . equals ( STR_ ) || register . equals ( STR_ ) ; }", "\tprivate String filterAlphaCode(String code, Integer length) {\n\t\tString filteredCode = null;\n\t\tthis.log.trace(\"BEGIN\");\n\t\tfilteredCode = this.filterAlphaCode(code);\n\t\tif (filteredCode.length() > length) {\n\t\t\tfilteredCode = filteredCode.substring(0, length);\n\t\t}\n\t\tthis.log.trace(\"RETURN\");\n\t\treturn filteredCode;\n\t}\n", "boolean sameAs ( ReturnPathType other ) { return this . type == other . type ; }", "private static int hash ( Object x ) { int h = x . hashCode ( ) ; return ( ( h << NUM_ ) - h + ( h > > > NUM_ ) + ( h > > > NUM_ ) ) ; }", "public static Type newType(AST ast,VariableDeclaration declaration){\n  return newType(ast,declaration,null,null);\n}\n", "public GitlabMilestone createMilestone(\n            Serializable projectId,\n            GitlabMilestone milestone) throws IOException {\n        String title = milestone.getTitle();\n        String description = milestone.getDescription();\n        Date dateDue = milestone.getDueDate();\n        Date dateStart = milestone.getStartDate();\n        return createMilestone(projectId, title, description, dateDue, dateStart);\n    }", "public static void setCurrentOperationDetails(final AjaxOperation operation, final ComponentWithContext trigger) {\n\t\tif (operation == null) {\n\t\t\tTHREAD_LOCAL_OPERATION.remove();\n\t\t} else {\n\t\t\tTHREAD_LOCAL_OPERATION.set(operation);\n\t\t}\n\n\t\tif (trigger == null) {\n\t\t\tTHREAD_LOCAL_COMPONENT_WITH_CONTEXT.remove();\n\t\t} else {\n\t\t\tTHREAD_LOCAL_COMPONENT_WITH_CONTEXT.set(trigger);\n\t\t}\n\t}", "@Override\n\tpublic List<CPDefinitionLink> findAll(int start, int end) {\n\t\treturn findAll(start, end, null);\n\t}", "public boolean equals(Object o){\n  if (o == null) {\n    return false;\n  }\n  if (getClass() != o.getClass()) {\n    return false;\n  }\n  final CoverageIntVdt civ=(CoverageIntVdt)o;\n  return ((table == civ.table) && (attribute == civ.attribute) && (value == civ.value));\n}\n", "\tpublic IS1BamBLSecGroupFormObj newInstance() {\n\t\tfinal String S_ProcName=\"S1BamSecGroupFormObj.newInstance() \";\n\t\tthrow new RuntimeException( S_ProcName + \"Implementation must be overridden\" );\n\t}\n", "\t\tpublic void graphChanged(GraphModelEvent e) {\n\t\t\tupdateStatusBar();\n\t\t}\n", "public void startElement(\n          StylesheetHandler handler, String uri, String localName, String rawName, Attributes attributes)\n            throws org.xml.sax.SAXException\n  {\n\n\t\tsuper.startElement(handler, uri, localName, rawName, attributes);\n    try\n    {\n      int stylesheetType = handler.getStylesheetType();\n      Stylesheet stylesheet;\n\n      if (stylesheetType == StylesheetHandler.STYPE_ROOT)\n      {\n        try\n        {\n          stylesheet = getStylesheetRoot(handler);\n        }\n        catch(TransformerConfigurationException tfe)\n        {\n          throw new TransformerException(tfe);\n        }\n      }\n      else\n      {\n        Stylesheet parent = handler.getStylesheet();\n\n        if (stylesheetType == StylesheetHandler.STYPE_IMPORT)\n        {\n          StylesheetComposed sc = new StylesheetComposed(parent);\n\n          parent.setImport(sc);\n\n          stylesheet = sc;\n        }\n        else\n        {\n          stylesheet = new Stylesheet(parent);\n\n          parent.setInclude(stylesheet);\n        }\n      }\n\n      stylesheet.setDOMBackPointer(handler.getOriginatingNode());\n      stylesheet.setLocaterInfo(handler.getLocator());\n\n      stylesheet.setPrefixes(handler.getNamespaceSupport());\n      handler.pushStylesheet(stylesheet);\n      setPropertiesFromAttributes(handler, rawName, attributes,\n                                  handler.getStylesheet());\n      handler.pushElemTemplateElement(handler.getStylesheet());\n    }\n    catch(TransformerException te)\n    {\n      throw new org.xml.sax.SAXException(te);\n    }\n  }", "\tpublic ConnectionAnchor getSourceConnectionAnchor(ConnectionEditPart connEditPart) {\n\t\tAssert.isNotNull(connEditPart);\n\t\tAssert.isLegal(connEditPart.getModel() instanceof Wire);\n\t\t//TODO Wire\n\t\tWire wire = (Wire) connEditPart.getModel();\n\t\treturn getNodeFigure().getConnectionAnchor(wire.getSourceTerminal());\n\t}\n", "private void processFields() {\n    List<Field> children = IntrospectionUtils.getPersistableFields(clazz);\n    for (Field child : children) {\n      if (child.isAnnotationPresent(Embedded.class)) {\n        processEmbeddedField(child);\n      } else {\n        processSimpleField(child);\n      }\n    }\n  }", "@SuppressWarnings ({ \"rawtypes\", \"unchecked\" })\n    private final void processQueue () {\n\n        SoftValue<V> softValue;\n        while ((softValue = (SoftValue) queue.poll()) != null) {\n            internalMap.remove(softValue.key);\n        }\n    }", "public static boolean isCompatibleWithThrowsClause ( Throwable ex , Class [ ] declaredExceptions ) { if ( ! isCheckedException ( ex ) ) { return BOOL_ ; } if ( declaredExceptions != null ) { for ( int i = NUM_ ; i < declaredExceptions . length ; i ++ ) { if ( declaredExceptions [ i ] . isAssignableFrom ( ex . getClass ( ) ) ) { return BOOL_ ; } } } return BOOL_ ; }", "public RhythmOverlay ( ) { super ( ) ; }", "private String getBaseSymbol() {\n    String ncNotation = getNotation();\n    if (!ncNotation.contains(\"(\")) {\n      return null;\n    }\n    int start = ncNotation.indexOf(\"(\");\n    int end = ncNotation.indexOf(\")\");\n\n    String baseSymbol = ncNotation.substring(start + 1, end);\n    baseSymbol = baseSymbol.replaceAll(\"\\\\[|\\\\]\", \"\");\n    return baseSymbol;\n  }", "    public String toCSS(){\n        return new StringBuilder()\n                .append(\"font-style:\")\n                .append(this.toString())\n                .append(\";\").toString();\n    }\n", "    public void doSaveAsCommand() {\n        if (seFileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {\n            save(seFileChooser.getSelectedFile());\n        }\n    }\n", "private void verifyReservedBit1 ( WebSocketFrame frame ) throws WebSocketException { if ( mPMCE != null ) { boolean verified = verifyReservedBit1ForPMCE ( frame ) ; if ( verified ) { return ; } } if ( frame . getRsv1 ( ) == BOOL_ ) { return ; } throw new ", "    private void humanButtonPressed() {\n        parent.voiceProgression(progression);\n        this.setButtonsEnabled(false);\n    }\n", "public void readData ( DataInput din ) throws IOException { }", "\tprotected Complex gauss(Complex z)  {\n\t\t// return lrp*(z^2 - 1)\n\t\t// return new Complex(ONE_C);  // for viewing the domain\n\t\tComplex w = z.times(z);\n\t\t        w.re = LRP*(w.re - 1);\n\t\t        w.im = LRP*w.im;\n\t\treturn w;\n\t}\n", "private List<Achievement> checkAchievements(Player player,List<Achievement> toCheck){\n  List<Achievement> reached=new ArrayList<Achievement>();\n  if (!player.arePlayerAchievementsLoaded()) {\n    return reached;\n  }\n  for (  Achievement achievement : toCheck) {\n    if (achievement.isFulfilled(player) && !player.hasReachedAchievement(achievement.getIdentifier())) {\n      logReachingOfAnAchievement(player,achievement);\n      if (achievement.isActive()) {\n        reached.add(achievement);\n      }\n    }\n  }\n  return reached;\n}\n", "public void testClone ( ) throws Exception { RelayLogPosition rlp = new RelayLogPosition ( ) ; File f = new File ( STR_ ) ; rlp . setPosition ( f , NUM_ ) ; RelayLogPosition rlp2 = rlp . clone ( ) ; assertEquals ( STR_ , f , rlp2 . getFile ( ) ) ; assertEquals ( STR_ , NUM_ , rlp2 . getOffset ( ) ) ; assertTrue ( STR_ , rlp2 . hasReached ( STR_ , NUM_ ) ) ; }", "private void updateDebugger ( final DebuggerTemplate template ) { if ( m_addressSpace . isLoaded ( ) && ( ( m_debugger == null ) || ! m_debugger . isConnected ( ) ) ) { if ( template == null ) { m_debugger = null ; } else { m_debugger = new TcpDebugger ( ", "\tprotected void sendMessage(Message m) {\n\n\t\tif (m == null) {\n\t\t\tsendWarning(\"Can't send Message!\",\n\t\t\t\t\t\"ResourceDB Method: SendMessage(Message m)\",\n\t\t\t\t\t\"The Message given as parameter is a null reference.\",\n\t\t\t\t\t\"Be sure to have a valid Message reference.\");\n\t\t\treturn; // no proper parameter\n\t\t}\n\n\t\tif (_owner != null) { // is ResourceDB connected to Experiment?\n\t\t\t_owner.getMessageManager().receive(m);\n\t\t\treturn;\n\t\t}\n\n\t\t// if not connected to messaging system, write to standard out\n\t\tSystem.out.println(m);\n\n\t}\n", "    public DigitalIn isForward () {\n        // Conversion factor must be set\n        if (distancePerPulse == 0.0)\n            throw new IllegalStateException(\"Encoder conversion factor must\" +\n                    \" be set before use\");\n\n        if (isForward == null)\n            isForward = new IsForward();\n        return isForward;\n    } // isForward()\n", "public View create ( Element elem ) { return new PasswordView ( elem ) ; }", "Rule VoiceName() {\r\n\t\treturn SequenceS(\r\n\t\t\t\tFirstOfS(IgnoreCase(\"name=\"), IgnoreCase(\"nm=\")),\r\n\t\t\t\tString(\"\\\"\"),\r\n\t\t\t\tZeroOrMore(NonQuote()).label(VoiceName).suppressSubnodes(),\r\n\t\t\t\tString(\"\\\"\"));\r\n\t}", "public boolean isOnMap(Projection proj){\n  Point2D p1=proj.forward(lat,lon);\n  Point2D p2=proj.forward(lat2,lon2);\n  int h=(int)Math.abs(p2.getY() - p1.getY());\n  int w=(int)Math.abs(p2.getX() - p1.getX());\n  Rectangle imageRect=new Rectangle((int)p1.getX(),(int)p1.getY(),w,h);\n  proj.forward(proj.getUpperLeft(),p1);\n  proj.forward(proj.getLowerRight(),p2);\n  h=(int)Math.abs(p2.getY() - p1.getY());\n  w=(int)Math.abs(p2.getX() - p1.getX());\n  Rectangle mapRect=new Rectangle((int)p1.getX(),(int)p1.getY(),w,h);\n  return mapRect.intersects(imageRect);\n}\n", "    public boolean isValid() {\n        return cmd_id > 0 && drvbind_key != null && drvbind_key.isValid();\n    }\n", "public void changeStatus(PlayerStatus newStatus) {\n\t\tlastStatus = status;\n\t\tstatus = newStatus;\n\t\tif (status == PlayerStatus.LOGGED_OUT)\n\t\t\tclearUserCampaignData();\n\t\trefreshGUI(REFRESH_STATUS);\n\t\trefreshGUI(REFRESH_MEKDISPLAY);\n\t\trefreshGUI(REFRESH_HQPA", "public static void free(short global){\n  INTERNAL_FREE.accept(global);\n}\n", "public JsStatement simpleDialog(String title, String message)\n\t{\n\t\tJsStatement statement = new JsStatement();\n\t\tstatement.append(\"$.ui.dialog.wiquery.simpleDialog(\");\n\t\tstatement.append(\"\" + Session.get().nextSequenceValue() + \", \");\n\t\tstatement.append(DialogUtilsLanguages.getDialogUtilsLiteral(DialogUtilsLanguages\n\t\t\t.getDialogUtilsLanguages(getLocale())) + \", \");\n\t\tstatement.append(JsUtils.quotes(title, true) + \", \");\n\t\tstatement.append(JsUtils.doubleQuotes(message, true) + \")\");\n\n\t\treturn statement;\n\t}", "public String toString ( ) { return STR_ + System . identityHashCode ( this ) ; }", "    public void setNewCameraGuy(Instructor ins, EnumTypes.Work cam){\n        //System.out.println(this.size);\n        this.stu.setCamera(cam);\n        oldSize = size;\n        if(video == null)\n            this.size++;\n        if(ins == null)\n            this.size--;\n        this.video = ins;\n        if(video != null)\n            video.setPrice(p);\n        if(oldSize != size)\n            addNewPanel();\n        else{\n            this.video = ins;\n            panel.setNewCam();\n        }\n        //System.out.println(this.size);\n    }\n", "    public boolean isVisitArchiveMembers() {\n      return isVisitArchiveMembers;\n    }\n", "public static OpPredicate nameEquals(final String name){\n        return new OpPredicate() {\n            @Override\n            public boolean matches(SameDiff sameDiff, DifferentialFunction function) {\n                return function.getOwnName().equals(name);\n            }\n        };\n    }", "\tpublic boolean supportsReceive() {\n\t\treturn atHandler.supportsReceive();\n\t}\n", "public void initialise ( int k , int k_tau , int l , int l_tau , int delay ) throws Exception { if ( delay < NUM_ ) { throw new Exception ( STR_ ) ; } this . k = k ; this . k_tau = k_tau ; this . l = l ; this . l_tau = l_tau ; this . delay = delay ; setSt", "public IComment editGlobalComment ( final IComment comment , final String newComment ) throws com . google . security . zynamics . binnavi . API . disassembly . CouldntSaveDataException { try { return m_edge . editGlobalComment ( comment , newComment ) ; ", "private AnnotationNode visitAnnotation ( AnnotationNode unvisited ) { ErrorCollector errorCollector = new ErrorCollector ( this . source . getConfiguration ( ) ) ; AnnotationVisitor visitor = new AnnotationVisitor ( this . source , errorCollector ) ; Anno", "public void marshall(RoutingProfileSummary routingProfileSummary, ProtocolMarshaller protocolMarshaller) {\n\n        if (routingProfileSummary == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(routingProfileSummary.getId(), ID_BINDING);\n            protocolMarshaller.marshall(routingProfileSummary.getArn(), ARN_BINDING);\n            protocolMarshaller.marshall(routingProfileSummary.getName(), NAME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void update(byte input){\n  engineUpdate(input);\n  state=IN_PROGRESS;\n}\n", "  public double norm() {\n   \n    if (m_Elements != null) {\n      int n = m_Elements.length;\n      double sum = 0.0;\n      \n      for(int i = 0; i < n; i++) {\n\tsum += m_Elements[i] * m_Elements[i];\n      }\n    return Math.pow(sum, 0.5);\n    }\n    else return 0.0;\n  }\n", "private static void writeSetting(final CConnection connection,final int containerId,final String key,final String value,final String table) throws CouldntSaveDataException {\n  String id_column=\"\";\n  if (table.equalsIgnoreCase(CTableNames.MODULE_SETTINGS_TABLE)) {\n    id_column=\"module_id\";\n  }\n else {\n    id_column=\"project_id\";\n  }\n  final String deleteQuery=\"DELETE FROM \" + table + \" WHERE \"+ id_column+ \" = \"+ containerId+ \" AND \\\"name\\\" = \\'\"+ key+ \"\\'\";\n  final String insertQuery=\"INSERT INTO \" + table + \" VALUES(\\'\"+ containerId+ \"\\',\\'\"+ key+ \"\\',\"+ value+ \")\";\n  try {\n    PostgreSQLHelpers.beginTransaction(connection);\n    connection.executeUpdate(deleteQuery,true);\n    connection.executeUpdate(insertQuery,true);\n    PostgreSQLHelpers.endTransaction(connection);\n  }\n catch (  final SQLException exception) {\n    throw new CouldntSaveDataException(\"E00058: Could not update setting on \" + table);\n  }\n}\n", "public static FeatureExtractor<IString,String> factory(String featurizerName,boolean withGaps,String... featurizerSpecs){\n  return factory(featurizerName,withGaps,null,featurizerSpecs);\n}\n", "    public void SetPollRate(long pollRate) {\n        PollRate = pollRate;\n    }\n", "public static List<CommerceShipment> toModels(\n\t\tCommerceShipmentSoap[] soapModels) {\n\t\tif (soapModels == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tList<CommerceShipment> models = new ArrayList<CommerceShipment>(soapModels.length);\n\n\t\tfor (CommerceShipmentSoap soapModel : soapModels) {\n\t\t\tmodels.add(toModel(soapModel));\n\t\t}\n\n\t\treturn models;\n\t}", "private static void checkValidRules(Set<String> enabledRules,Set<String> specifiedRules) throws CLIArgumentParserException {\n  if (!enabledRules.containsAll(specifiedRules)) {\n    specifiedRules.removeAll(enabledRules);\n    throw new CLIArgumentParserException(\"The following rules were not recognized: \" + specifiedRules);\n  }\n}\n", "\tpublic void addConfiguredRemove(final AnnotationRemoveSelector ars) {\n\t\tif (ars.getMatcher() == null) {\n\t\t\tthrow new BuildException(\n\t\t\t\t\t\"missing argument for remove, either name or regexp has to be set\"); //$NON-NLS-1$\n\t\t}\n\t\t// don't check target: it may be null (indicates \"all\")\n\t\tthis.selectors.add(ars);\n\t}\n", "@Nullable public static byte[] decode(String s){\n  byte[] bytes;\n  try {\n    bytes=s.getBytes(PREFERRED_ENCODING);\n  }\n catch (  java.io.UnsupportedEncodingException uee) {\n    bytes=s.getBytes();\n  }\n  bytes=decode(bytes,0,bytes.length);\n  if (bytes != null && bytes.length >= 4) {\n    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n      java.io.ByteArrayInputStream bais=null;\n      java.util.zip.GZIPInputStream gzis=null;\n      java.io.ByteArrayOutputStream baos=null;\n      byte[] buffer=new byte[2048];\n      int length=0;\n      try {\n        baos=new java.io.ByteArrayOutputStream();\n        bais=new java.io.ByteArrayInputStream(bytes);\n        gzis=new java.util.zip.GZIPInputStream(bais);\n        while ((length=gzis.read(buffer)) >= 0) {\n          baos.write(buffer,0,length);\n        }\n        bytes=baos.toByteArray();\n      }\n catch (      java.io.IOException e) {\n      }\n finally {\n        try {\n          baos.close();\n        }\n catch (        Exception e) {\n        }\n        try {\n          gzis.close();\n        }\n catch (        Exception e) {\n        }\n        try {\n          bais.close();\n        }\n catch (        Exception e) {\n        }\n      }\n    }\n  }\n  return bytes;\n}\n", "public RegisterValue ( final String name , final BigInteger value , final byte [ ] memory , final boolean isPc , final boolean isSp ) { this . name = Preconditions . checkNotNull ( name , STR_ ) ; this . value = Preconditions . checkNotNull ( value , STR_ ) ; Preconditions . checkArgument ( ! ( isPc && isSp ) , STR_ ) ; memoryPointedTo = memory . clone ( ) ; isProgramCounter = isPc ; isStackPointer = isSp ; }", "int read(byte[] buffer,int offset,int length) throws IOException {\n  int readLength=0;\n  while (length > 0) {\n    while (_chunkLength <= 0) {\n      if (_isLastChunk)       return readLength == 0 ? -1 : readLength;\n      int code=read();\nswitch (code) {\ncase BC_BINARY_CHUNK:\n        _isLastChunk=false;\n      _chunkLength=(read() << 8) + read();\n    break;\ncase BC_BINARY:\n  _isLastChunk=true;\n_chunkLength=(read() << 8) + read();\nbreak;\ncase 0x20:\ncase 0x21:\ncase 0x22:\ncase 0x23:\ncase 0x24:\ncase 0x25:\ncase 0x26:\ncase 0x27:\ncase 0x28:\ncase 0x29:\ncase 0x2a:\ncase 0x2b:\ncase 0x2c:\ncase 0x2d:\ncase 0x2e:\ncase 0x2f:\n_isLastChunk=true;\n_chunkLength=code - 0x20;\nbreak;\ncase 0x34:\ncase 0x35:\ncase 0x36:\ncase 0x37:\n_isLastChunk=true;\n_chunkLength=(code - 0x34) * 256 + read();\nbreak;\ndefault :\nthrow expect(\"byte[]\",code);\n}\n}\nint sublen=_chunkLength;\nif (length < sublen) sublen=length;\nif (_length <= _offset && !readBuffer()) return -1;\nif (_length - _offset < sublen) sublen=_length - _offset;\nSystem.arraycopy(_buffer,_offset,buffer,offset,sublen);\n_offset+=sublen;\noffset+=sublen;\nreadLength+=sublen;\nlength-=sublen;\n_chunkLength-=sublen;\n}\nreturn readLength;\n}\n", "public static void main ( String [ ] args ) throws Throwable { String localAddressStr = STR_ ; String publicAddressStr = STR_ ; TransportAddress localAddress ; TransportAddress publicAddress ; try { localAddress = new TransportAddress ( localAddressStr , NUM_ , Transport . UDP ) ; publicAddress = new TransportAddress ( publicAddressStr , NUM_ , Transport . UDP ) ; logger . info ( STR_ + localAddress + STR_ + publicAddress ) ; } catch ( Exception exc ) { logger . info ( STR_ + STR_ + localAddressStr + STR_ + publicAddressStr ) ; return ; } MappingCandidateHarvester natHarvester = new MappingCandidateHarvester ( publicAddress , localAddress ) ; List < CandidateHarvester > harvesters = new ArrayList < > ( ) ; harvesters . add ( natHarvester ) ; Agent localAgent = createAgent ( NUM_ , BOOL_ , harvesters ) ; localAgent . setNominationStrategy ( NominationStrategy . NOMINATE_HIGHEST_PRIO ) ; String localSDP = SdpUtils . createSDPDescription ( localAgent ) ; Thread . sleep ( NUM_ ) ; logger . info ( STR_ + STR_ ) ; logger . info ( STR_ + localSDP ) ; logger . info ( STR_ + STR_ ) ; }", "protected Workflow.Method createCGMethod(URI vplexURI,URI cgURI,List<URI> vplexVolumeURIs){\n  return new Workflow.Method(CREATE_CG_METHOD_NAME,vplexURI,cgURI,vplexVolumeURIs);\n}\n", "private void saveChanges() {\n\tif ((listener != null) && (getCurrentObject() != null)) {\n\t\tobjects.set(currentIndex, listener.saveChanges(getCurrentObject()));\n\t}\n}\n", "@BetaApi\n  public final Operation deleteTargetTcpProxy(String targetTcpProxy) {\n\n    DeleteTargetTcpProxyHttpRequest request =\n        DeleteTargetTcpProxyHttpRequest.newBuilder().setTargetTcpProxy(targetTcpProxy).build();\n    return deleteTargetTcpProxy(request);\n  }", "public static sslpolicylabel[] get_filtered(nitro_service service, String filter) throws Exception{\n\t\tsslpolicylabel obj = new sslpolicylabel();\n\t\toptions option = new options();\n\t\toption.set_filter(filter);\n\t\tsslpolicylabel[] response = (sslpolicylabel[]) obj.getfiltered(service, option);\n\t\treturn response;\n\t}", "\tpublic void addObservable(IObservable observable) {\n\t\tmanagedObservables.add(observable);\n\t}\n", "    public Integer getSpinState(Identifier id) throws RemoteException {\n        Integer val;\n\n        if( contains(Molecule.SPINSTATE) ) {\n            val = (Integer)get(Molecule.SPINSTATE);\n            return val;\n        }\n        try {\n            Molecule ref;\n\n            ref = (Molecule)getEntity();\n            val = ref.getSpinState(id);\n        }\n        catch( RemoteException e ) {\n            Molecule ref;\n            reconnect();\n            ref = (Molecule)getEntity();\n            val = ref.getSpinState(id);\n        }\n        put(Molecule.SPINSTATE, val);\n        return val;\n    }\n", "public boolean add(final T item){\n  final AdapterTransaction addTransaction=new AddTransaction<>(this,item);\n  final boolean success=addTransaction.perform();\n  mTransactions.offer(addTransaction);\n  return success;\n}\n", "public void endElement() throws SAXException {\n  writePendingText();\n  String uri=getCurrentElementUri();\n  String local=getCurrentElementLocal();\n  String prefix=nsContext.getPrefix(uri);\n  _assert(prefix != null);\n  String qname;\n  if (prefix.length() != 0)   qname=prefix + ':' + local;\n else   qname=local;\n  writer.endElement(uri,local,qname);\n  nsContext.iterateDeclaredPrefixes(endPrefixCallback);\n  popElement();\n  textBuf.setLength(0);\n  nsContext.endElement();\n}\n", "    private boolean isTextButton() {\n        return StringUtils.hasValue(mainButton.getText());\n    }\n", "public JSONArray put ( long value ) { this . put ( new Long ( value ) ) ; return this ; }", "public void paintTabbedPaneTabBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex,int orientation){\n  if (orientation == JTabbedPane.LEFT) {\n    AffineTransform transform=new AffineTransform();\n    transform.scale(-1,1);\n    transform.rotate(Math.toRadians(90));\n    paintBackground(context,g,y,x,h,w,transform);\n  }\n else   if (orientation == JTabbedPane.RIGHT) {\n    AffineTransform transform=new AffineTransform();\n    transform.rotate(Math.toRadians(90));\n    transform.translate(0,-(x + w));\n    paintBackground(context,g,y,0,h,w,transform);\n  }\n else   if (orientation == JTabbedPane.BOTTOM) {\n    AffineTransform transform=new AffineTransform();\n    transform.translate(x,y);\n    transform.scale(1,-1);\n    transform.translate(0,-h);\n    paintBackground(context,g,0,0,w,h,transform);\n  }\n else {\n    paintBackground(context,g,x,y,w,h,null);\n  }\n}\n", "private static String removeTemplateMarker ( String str ) { return str . replaceAll ( STR_ , STR_ ) ; }", "public String pad ( String value , int places , String padCharacter ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( value ) ; while ( sb . length ( ) < places ) { sb . append ( padCharacter ) ; } return sb . toString ( ) ; }", "public void onDataReceived ( IJsonObject probeConfig , IJsonObject data ) ;", "\tpublic void close() throws IOException {\n\t\tsuper.close();\n\t\tm_OutputStream.close();\n\t}\n", "public static void cleanUp(Context context) {\n    File path = getScreenshotFolder(context);\n    if (!path.exists()) {\n      return;\n    }\n\n    delete(path);\n  }", "    public void linkAfter(final L before) {\n        followedBy(before, asL());\n    }\n", "public void removeActionListener(ActionListener al){\n  if (backButton != null && forwardButton != null) {\n    backButton.removeActionListener(al);\n    forwardButton.removeActionListener(al);\n  }\n else   if (listeners != null) {\n    listeners.remove(al);\n  }\n}\n", "public static List<PythonInstallationDirectory> whereArePythonInterpreters(){\n  final List<PythonInstallationDirectory> paths=new ArrayList<>();\n  for (  final SuiteExecutor interpreter : EnumSet.allOf(SuiteExecutor.class)) {\n    paths.addAll(whereIsPythonInterpreter(interpreter));\n  }\n  return paths;\n}\n", "private void offer(BlockingQueue<Task> queue,Task task) throws QueueTimeoutException {\n  try {\n    debug(\"Queuing Task {0}\",task.toString());\n    if (!queue.offer(wrap(task),configuration.getQueueTimeout(),TimeUnit.SECONDS)) {\n      throw new QueueTimeoutException(task);\n    }\n  }\n catch (  InterruptedException e) {\n    throw new QueueTimeoutException(task,e);\n  }\n}\n", "\tprivate String buildupPath(String[] tokens, int count) {\n\t\tStringBuilder sb = new StringBuilder();\n\n\t\tif (count == 0) {\n\t\t\tfor (int i = 0; i < tokens.length; i++) {\n\t\t\t\tsb.append(\"/\");\n\t\t\t\tsb.append(tokens[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tsb.append(\"..\");\n\n\t\t\tfor (int i = count; i < tokens.length; i++) {\n\t\t\t\tsb.append(\"/\");\n\t\t\t\tsb.append(tokens[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn sb.toString();\n\t}\n", "public < A extends Annotation > Expressions buildAnyFieldExpressions ( final PersistentResource resource , final Class < A > annotationClass , final ChangeSpec changeSpec ) { Class < ? > resourceClass = resource . getResourceClass ( ) ; if ( ! entityDicti", "@Override public void close() throws IOException {\n  running.set(false);\n  service.shutdown();\n  try {\n    if (!service.awaitTermination(SHUTDOWN_TIMEOUT,TimeUnit.SECONDS)) {\n      LOG.error(\"Was not able to process all remaining spans upon closing in: \" + SHUTDOWN_TIMEOUT + \" \"+ TimeUnit.SECONDS+ \". Left Spans could be dropped.\");\n    }\n  }\n catch (  InterruptedException e1) {\n    LOG.warn(\"Thread interrupted when terminating executor.\",e1);\n  }\n}\n", "public XMLParser(final String namespace,final String[] schemas) throws XMLException {\n  try {\n    JAXBContext jc=JAXBContext.newInstance(namespace);\n    marshaller=jc.createMarshaller();\n    marshaller.setSchema(XMLSchemaUtils.createSchema(schemas));\n    unmarshaller=jc.createUnmarshaller();\n    unmarshaller.setSchema(XMLSchemaUtils.createSchema(schemas));\n  }\n catch (  JAXBException e) {\n    throw new XMLException(\"Cannot instantiate marshaller/unmarshaller for \" + namespace,e);\n  }\n}\n", "public PurgeResponse purge(String url) {\n        return purge(new PurgeRequest().addTask(new PurgeTask().withUrl(url)));\n    }", "@Override\n\tpublic CPDefinitionOptionRel remove(Serializable primaryKey)\n\t\tthrows NoSuchCPDefinitionOptionRelException {\n\t\tSession session = null;\n\n\t\ttry {\n\t\t\tsession = openSession();\n\n\t\t\tCPDefinitionOptionRel cpDefinitionOptionRel = (CPDefinitionOptionRel)session.get(CPDefinitionOptionRelImpl.class,\n\t\t\t\t\tprimaryKey);\n\n\t\t\tif (cpDefinitionOptionRel == null) {\n\t\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t\t_log.debug(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);\n\t\t\t\t}\n\n\t\t\t\tthrow new NoSuchCPDefinitionOptionRelException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +\n\t\t\t\t\tprimaryKey);\n\t\t\t}\n\n\t\t\treturn remove(cpDefinitionOptionRel);\n\t\t}\n\t\tcatch (NoSuchCPDefinitionOptionRelException nsee) {\n\t\t\tthrow nsee;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow processException(e);\n\t\t}\n\t\tfinally {\n\t\t\tcloseSession(session);\n\t\t}\n\t}", "  public Factory getFactory( Class<?> template ) {\n\n\t  for( Factory f : tags.values() ) {\n\t      if (f.getTemplate().equals( template )) {\n\t    \t  return f;\n\t      }\n\t  }\n\t  return null;\n   \n  }\n", "public static int[] values(Integer[] array){\n  int[] dest=new int[array.length];\n  for (int i=0; i < array.length; i++) {\n    Integer v=array[i];\n    if (v != null) {\n      dest[i]=v.intValue();\n    }\n  }\n  return dest;\n}\n", "@RequestMapping(value = \"api/edit/server/{id}\", method = RequestMethod.DELETE)\n    public\n    @ResponseBody\n    List<ServerRedirect> deleteRedirectUrl(Model model, @PathVariable int id) throws Exception {\n        // get the profile id from this redirect so we can return the remaining\n        // data\n        ServerRedirect redir = ServerRedirectService.getInstance().getRedirect(id);\n        int profileId = redir.getProfileId();\n        ServerRedirectService.getInstance().deleteRedirect(id);\n        return ServerRedirectService.getInstance().tableServers(profileId);\n    }", "public final String toPGN(PGNOptions options){\n  PgnText pgnText=new PgnText();\n  options.exp.pgnPromotions=true;\n  options.exp.pieceType=PGNOptions.PT_ENGLISH;\n  pgnTreeWalker(options,pgnText);\n  return pgnText.getPgnString();\n}\n", "public final void elementValuePairs() throws RecognitionException {\n\t\tint elementValuePairs_StartIndex = input.index();\n\n\t\ttry {\n\t\t\tif ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return; }\n\n\t\t\t// src/main/resources/org/drools/compiler/semantics/java/parser/Java.g:621:5: ( elementValuePair ( ',' elementValuePair )* )\n\t\t\t// src/main/resources/org/drools/compiler/semantics/java/parser/Java.g:621:7: elementValuePair ( ',' elementValuePair )*\n\t\t\t{\n\t\t\tpushFollow(FOLLOW_elementValuePair_in_elementValuePairs2358);\n\t\t\telementValuePair();\n\t\t\tstate._fsp--;\n\t\t\tif (state.failed) return;\n\t\t\t// src/main/resources/org/drools/compiler/semantics/java/parser/Java.g:621:24: ( ',' elementValuePair )*\n\t\t\tloop89:\n\t\t\twhile (true) {\n\t\t\t\tint alt89=2;\n\t\t\t\tint LA89_0 = input.LA(1);\n\t\t\t\tif ( (LA89_0==43) ) {\n\t\t\t\t\talt89=1;\n\t\t\t\t}\n\n\t\t\t\tswitch (alt89) {\n\t\t\t\tcase 1 :\n\t\t\t\t\t// src/main/resources/org/drools/compiler/semantics/java/parser/Java.g:621:25: ',' elementValuePair\n\t\t\t\t\t{\n\t\t\t\t\tmatch(input,43,FOLLOW_43_in_elementValuePairs2361); if (state.failed) return;\n\t\t\t\t\tpushFollow(FOLLOW_elementValuePair_in_elementValuePairs2363);\n\t\t\t\t\telementValuePair();\n\t\t\t\t\tstate._fsp--;\n\t\t\t\t\tif (state.failed) return;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault :\n\t\t\t\t\tbreak loop89;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\treportError(re);\n\t\t\trecover(input,re);\n\t\t}\n\t\tfinally {\n\t\t\t// do for sure before leaving\n\t\t\tif ( state.backtracking>0 ) { memoize(input, 67, elementValuePairs_StartIndex); }\n\n\t\t}\n\t}", "    public void setWorkingDir(File workingDir) {\n        env.getCustomization()\n           .put(\"CleverPHL.WorkingDir\", workingDir.getAbsolutePath());\n    }\n", "public <T>void addEntry(Class<T> resource,RegistryEntry<? extends T> registryEntry){\n  resources.put(resource,registryEntry);\n  logger.debug(\"Added resource {} to ResourceRegistry\",resource.getName());\n}\n", "public void draw(PlaPointFloat[] p_points,double p_half_width,Color p_color,Graphics p_g,double p_translucency_factor){\n  if (p_color == null)   return;\n  Graphics2D g2=(Graphics2D)p_g;\n  Rectangle clip_shape=(Rectangle)p_g.getClip();\n  ShapeTileBox clip_", "private ChildTaskContainer getParentTask(Activity activity)\n   {\n      //\n      // Make a map of activity codes and their values for this activity\n      //\n      Map<UUID, UUID> map = getActivityCodes(activity);\n\n      //\n      // Work through the activity codes in sequence\n      //\n      ChildTaskContainer parent = m_projectFile;\n      StringBuilder uniqueIdentifier = new StringBuilder();\n      for (UUID activityCode : m_codeSequence)\n      {\n         UUID activityCodeValue = map.get(activityCode);\n         String activityCodeText = m_activityCodeValues.get(activityCodeValue);\n         if (activityCodeText != null)\n         {\n            if (uniqueIdentifier.length() != 0)\n            {\n               uniqueIdentifier.append('>');\n            }\n            uniqueIdentifier.append(activityCodeValue.toString());\n            UUID uuid = UUID.nameUUIDFromBytes(uniqueIdentifier.toString().getBytes());\n            Task newParent = findChildTaskByUUID(parent, uuid);\n            if (newParent == null)\n            {\n               newParent = parent.addTask();\n               newParent.setGUID(uuid);\n               newParent.setName(activityCodeText);\n            }\n            parent = newParent;\n         }\n      }\n      return parent;\n   }", "public static Document parse(Reader reader,boolean validating,boolean namespaceAware,boolean allowDocTypeDeclaration) throws SAXException, IOException, ParserConfigurationException {\n  DocumentBuilderFactory factory=FactorySupport.createDocumentBuilderFactory();\n  factory.setNamespaceAware(namespaceAware);\n  factory.setValidating(validating);\n  setQuietly(factory,XMLConstants.FEATURE_SECURE_PROCESSING,true);\n  setQuietly(factory,\"http://apache.org/xml/features/disallow-doctype-decl\",!allowDocTypeDeclaration);\n  DocumentBuilder documentBuilder=factory.newDocumentBuilder();\n  return documentBuilder.parse(new InputSource(reader));\n}\n", "boolean doCommandMeshDeviceConfigureLocal ( String deviceBssid , InetAddress inetAddress , String randomToken ) ;", "\tpublic boolean canSupport(Properties properties) {\n\n\t\tif (!requireAuthentication(properties))\n\t\t\treturn false;\n\n\t\t//\n\t\t// We check 2 System/Database properties:\n\t\t//\n\t\t//\n\t\t// - if derby.authentication.provider is set to 'BUILTIN'.\n\t\t//\n\t\t// and in that case we are the authentication service that should\n\t\t// be run.\n\t\t//\n\n\t\tString authenticationProvider = PropertyUtil.getPropertyFromSet(\n\t\t\t\t\tproperties,\n\t\t\t\t\torg.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_PARAMETER);\n\n\t\tif ( (authenticationProvider != null) &&\n\t\t\t (authenticationProvider.length() != 0) &&\n\t\t\t (!(StringUtil.SQLEqualsIgnoreCase(authenticationProvider,\n\t\t\t\t  org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_BUILTIN))))\n\t\t\treturn false;\n\t\telse\n\t\t\treturn true;\t// Yep, we're on!\n\t}\n", "@Override\n    public Object mapSequence(Object sequence) {\n        List<?> values = (List<?>) sequence;\n        List<List<Integer>> ret = new ArrayList<>();\n        for (Object obj : values) {\n            ret.add((List<Integer>) map(obj));\n        }\n        return ret;\n    }", "protected final MapDelta<K, V> genUpdates(final K key,\n            final Function<? super V, ? extends V> mutate) {\n        return new Update<>(key, mutate);\n    }", "public UIGraphicTestCase ( String name ) { super ( name ) ; }", "public @CheckForNull\n    SourceLineRange getMethodLine(String className, String methodName, String methodSignature) {\n        return methodLineMap.get(new MethodDescriptor(className, methodName, methodSignature));\n    }", "public void load_args ( ) { load_args ( NUM_ , state . argumentTypes . length ) ; }", "\t\tpublic void atObject(GameObject obj, String name) {\n\t\t\tif (obj != null) {\n\t\t\t\tRectangle bounds = obj.getBounds();\n\t\t\t\tPoint screenPoint = calculations.tileToScreen(obj.getLocation());\n\t\t\t\tif(bounds.width != 0 && bounds.height != 0) {\n\t\t\t\t\tscreenPoint = calculations.tileToScreen(bounds.x, bounds.y, ((double)bounds.width)/2, ((double)bounds.height)/2,0);\n\t\t\t\t}\n\t\t\t\tinput.moveMouse(screenPoint.x, screenPoint.y);\n\t\t\t\tif (screenPoint.x > 2 && screenPoint.y > 2) {\n\t\t\t\t\t//input.clickMouse(false);\n\t\t\t\t\tmenu.atMenu(name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n", "public static List<String> readToList(File f) throws IOException {\n  try (final Reader reader=asReaderUTF8Lenient(new FileInputStream(f))){\n    return readToList(reader);\n  }\n catch (  IOException ioe) {\n    throw new IllegalStateException(String.format(\"Failed to read %s: %s\",f.getAbsolutePath(),ioe),ioe);\n  }\n}\n", "public static String hexDump(String label, byte[] bytes) {\n        final int modulo = 16;\n        final int brk = modulo / 2;\n        int indent = (label == null) ? 0 : label.length();\n\n        StringBuffer sb = new StringBuffer(indent + 1);\n\n        while (indent > 0) {\n            sb.append(\" \");\n            indent--;\n        }\n\n        String ind = sb.toString();\n\n        if (bytes == null) {\n            return null;\n        }\n\n        sb = new StringBuffer(bytes.length * 4);\n\n        StringBuffer cb = new StringBuffer(16);\n        boolean nl = true;\n        int i = 0;\n\n        for (i = 1; i <= bytes.length; i++) {\n            // start of line?\n            if (nl) {\n                nl = false;\n\n                if (i > 1) {\n                    sb.append(ind);\n                } else if (label != null) {\n                    sb.append(label);\n                }\n\n                String ha = Integer.toHexString(i - 1);\n\n                for (int j = ha.length(); j <= 8; j++) {\n                    sb.append(\"0\");\n                }\n\n                sb.append(ha).append(\" \");\n            }\n\n            sb.append(\" \");\n\n            int c = (bytes[i - 1] & 0xFF);\n            String hx = Integer.toHexString(c).toUpperCase();\n\n            if (hx.length() == 1) {\n                sb.append(\"0\");\n            }\n\n            sb.append(hx);\n            cb.append((c < 0x21 || c > 0x7e) ? '.' : (char) (c));\n\n            if ((i % brk) == 0) {\n                sb.append(\" \");\n            }\n\n            if ((i % modulo) == 0) {\n                sb.append(\"|\").append(cb).append(\"|\\n\");\n                nl = true;\n                cb = new StringBuffer(16);\n            }\n        }\n\n        int mod = i % modulo;\n\n        if (mod != 1) {\n            // Fill the rest of the line\n            while (mod <= modulo) {\n                sb.append(\"   \");\n\n                if ((mod % brk) == 0) {\n                    sb.append(\" \");\n                }\n\n                mod++;\n            }\n\n            sb.append(\"|\").append(cb).append(\"|\\n\");\n        }\n\n        return sb.toString();\n    }", "public void rollback ( ) throws SQLException { if ( logger . isDebugEnabled ( ) ) logger . debug ( STR_ ) ; connection . rollback ( ) ; }", "private static void sort(final int[] array, final int start, final int end, final TransactionIterator it1,\n\t\t\tfinal TransactionIterator it2, int prefixEnd) {\n\t\tif (start >= end - 1) {\n\t\t\t// size 0 or 1\n\t\t\treturn;\n\t\t} else if (end - start == 2) {\n\t\t\tit1.setTransaction(array[start]);\n\t\t\tit2.setTransaction(array[start + 1]);\n\t\t\tmerge(it1, it2, prefixEnd);\n\t\t} else {\n\t\t\t// pick pivot at the middle and put it at the end\n\t\t\tint pivotPos = start + ((end - start) / 2);\n\t\t\tint pivotVal = array[pivotPos];\n\t\t\tarray[pivotPos] = array[end - 1];\n\t\t\tarray[end - 1] = pivotVal;\n\t\t\tint insertInf = start;\n\t\t\tint insertSup = end - 2;\n\t\t\tfor (int i = start; i <= insertSup;) {\n\t\t\t\tit1.setTransaction(pivotVal);\n\t\t\t\tit2.setTransaction(array[i]);\n\t\t\t\tint comp = merge(it1, it2, prefixEnd);\n\t\t\t\tif (comp < 0) {\n\t\t\t\t\tint valI = array[i];\n\t\t\t\t\tarray[insertInf] = valI;\n\t\t\t\t\tinsertInf++;\n\t\t\t\t\ti++;\n\t\t\t\t} else if (comp > 0) {\n\t\t\t\t\tint valI = array[i];\n\t\t\t\t\tarray[i] = array[insertSup];\n\t\t\t\t\tarray[insertSup] = valI;\n\t\t\t\t\tinsertSup--;\n\t\t\t\t} else {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tarray[end - 1] = array[insertSup + 1];\n\t\t\t// Arrays.fill(array, insertInf, insertSup + 2, -1);\n\t\t\tarray[insertSup + 1] = pivotVal;\n\t\t\tsort(array, start, insertInf, it1, it2, prefixEnd);\n\t\t\tsort(array, insertSup + 2, end, it1, it2, prefixEnd);\n\t\t}\n\t}", "public void setAccelerometerRange(AccelerometerRange range) {\n        Buffer buffer = new Buffer();\n        buffer.writeByte(range.getRawValue());\n        sendMessage(BeanMessageID.CC_ACCEL_SET_RANGE, buffer);\n    }", "public void updateButtonActionPerformed(){\n  if (!checkConsistency()) {\n    return;\n  }\n  setNodeParameters();\n  changedNode=true;\n  editMode=false;\n  curNode=null;\n  addButton.setVisible(true);\n  editButton.setVisible(true);\n  deleteButton.setVisible(true);\n  doneButton.setVisible(true);\n  updateButton.setVisible(false);\n  cancelButton.setVisible(false);\n  statusText2.setText(stdStatus2);\n  statusText3.setText(stdStatus3);\n  try {\n    statusText1.setText(Bundle.getMessage(\"FeedBackUpdate\") + \" \" + readNodeAddress());\n  }\n catch (  IllegalArgumentException iae) {\n  }\n  errorInStatus1=true;\n}\n", "public void removeClassLoader(ClassLoader classLoader){\n  if (_logger.isLoggable(Level.FINE))   _logger.fine(\"removing class loader from cache [\" + ClassLoaderHelper.getClassLoaderLogName(classLoader) + \"]\");\n  Long removedClassLoadedId=_classLoaderToIdMap.remove(classLoader);\n  if (removedClassLoadedId != null) {\n    ClassLoaderContext removedContext=_classLoaders.put(removedClassLoadedId,new ClassLoaderContext(null,Represent.REMOVED_EXPLICIT));\n    if (removedContext.getRepresents() == Represent.REMOVED_EXPLICIT || removedContext.getRepresents() == Represent.REMOVED_IMPLICIT)     return;\n    dispatchClassLoaderRemovedEvent(removedClassLoadedId,removedContext,true);\n  }\n else {\n    _logger.fine(\"class loader [\" + ClassLoaderHelper.getClassLoaderLogName(classLoader) + \"] is not present in cache\");\n  }\n}\n", "public void sendPacketToAllInDimension ( IPacket packet , int dimension ) { checkClassAndSync ( packet . getClass ( ) ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . DIMENSION ) ; s", "public void selectAllFiles(boolean select){\n  AbsListView listView=(AbsListView)getListView();\n  for (int position=0; position < listView.getCount(); position++) {\n    File file=(File)mAdapter.getItem(position);\n    if (file.isFile()) {\n      listView.setItemChecked(position,select);\n    }\n  }\n}\n", "void changeUserInfo ( long id , String email , String key , String name ) ;", "public boolean loadDocumentDetails(FieldProvider [] data,ConnectionProvider conn){\n    C_Currency_ID = NO_CURRENCY;\n    log4jDocInOut.debug(\"loadDocumentDetails - C_Currency_ID : \" + C_Currency_ID);\n    DateDoc = data[0].getField(\"MovementDate\");\n    C_BPartner_Location_ID = data[0].getField(\"C_BPartner_Location_ID\");\n\n\n    loadDocumentType();     //  lines require doc type\n    //  Contained Objects\n    p_lines = loadLines(conn);\n    log4jDocInOut.debug(\"Lines=\" + p_lines.length);\n    return true;\n}   //  loadDocumentDetails\n", "    public void scaleVector(float scaler) {\n        // Point3f vector = new Point3f();\n\n        x *= scaler;\n        y *= scaler;\n        z *= scaler;\n\n    }\n", "\tprotected void _Line(final Coordinate end) {\n\t\tthis._out(String.format(Locale.ENGLISH, \"%.2f %.2f l\", //$NON-NLS-1$\n\t\t\t\tend.getX() * this.k, (this.h - end.getY()) * this.k));\n\t}\n", "    public void setFontName(String fontName) {\n        this.modified = this.modified | MODIFIED_FONT_NAME;\n        super.setFontName(fontName);\n    }\n", "public String printableUniqueKey(org.apache.lucene.document.Document doc){\n  IndexableField f=doc.getField(uniqueKeyFieldName);\n  return f == null ? null : uniqueKeyFieldType.toExternal(f);\n}\n", "public void calcMinTick(){\n  if (minData == 0.0)   minTick=0;\n else   minTick=Math.floor(minData / majorTick) * majorTick;\n}\n", "public void warning ( String msg ) { print ( STR_ + msg , out . warn ) ; }", "private static double ppnd(double p){\n  double q=p - 0.5;\n  double r;\n  if (Math.abs(q) <= SPLIT1) {\n    r=CONST1 - q * q;\n    return q * (((AP3 * r + AP2) * r + AP1) * r + AP0) / (((BP3 * r + BP2) * r + BP1) * r + 1.0);\n  }\n else {\n    if (q < 0.0) {\n      r=p;\n    }\n else {\n      r=1.0 - p;\n    }\n    if (r <= 0.0) {\n      return 0.0;\n    }\n    r=Math.sqrt(-Math.log(r));\n    double normalDev;\n    if (r <= SPLIT2) {\n      r-=CONST2;\n      normalDev=(((CP3 * r + CP2) * r + CP1) * r + CP0) / ((DP2 * r + DP1) * r + 1.0);\n    }\n else {\n      r-=SPLIT2;\n      normalDev=(((EP3 * r + EP2) * r + EP1) * r + EP0) / ((FP2 * r + FP1) * r + 1.0);\n    }\n    if (q < 0.0) {\n      normalDev=-normalDev;\n    }\n    return normalDev;\n  }\n}\n", "private Item newString ( final String value ) { key2 . set ( STR , value , null , null ) ; Item result = get ( key2 ) ; if ( result == null ) { pool . put12 ( STR , newUTF8 ( value ) ) ; result = new Item ( index ++ , key2 ) ; put ( result ) ; } return re", "\tpublic Object parse(String value, Class type) throws Exception {\n\t\tif (type == Money.class) {\n\t\t\treturn Money.parse(value);\n\t\t} else {\n\t\t\treturn super.parse(value, type);\n\t\t}\n\t}\n", "private int run(){\n  if (cur == -1) {\n    return -1;\n  }\n  boolean leaf=false;\n  while (true) {\n    while (cur != 0) {\n      if (sc[cur] == 0xFFFF) {\n        leaf=true;\n        break;\n      }\n      ns.push(new Item((char)cur,'\\u0000'));\n      if (sc[cur] == 0) {\n        leaf=true;\n        break;\n      }\n      cur=lo[cur];\n    }\n    if (leaf) {\n      break;\n    }\n    cur=up();\n    if (cur == -1) {\n      return -1;\n    }\n  }\n  StringBuilder buf=new StringBuilder(ks.toString());\n  if (sc[cur] == 0xFFFF) {\n    int p=lo[cur];\n    while (kv.get(p) != 0) {\n      buf.append(kv.get(p++));\n    }\n  }\n  curkey=buf.toString();\n  return 0;\n}\n", "public void clipRect(int x,int y,int width,int height){\n  mGraphics.clipRect(x,y,width,height);\n}\n", "public static WebSocketFrame createPongFrame ( ) { return new WebSocketFrame ( ) . setFin ( BOOL_ ) . setOpcode ( PONG ) ; }", "    public void reachLevel(int level) {\n        for( int i=0; i <= level; i++ )\n            gainLevel();\n    }\n", "private Singletons ( ) { }", "   private void checkLength(char keyCode) {\n      if (this.getText().length() >= this.maxLength) {\n         GWTHelper.log(\"length exceeded: \" + keyCode);\n         if ((keyCode != 8) && (keyCode != 46) && ((keyCode < 37) || (keyCode > 40))) {\n            cancelKey();\n         }\n      }\n   }\n", "private boolean havePreviousDigestAuthorizationAndShouldAbort(Request request,String nonce,boolean isStale){\n  final String previousAuthorizationHeader=request.header(\"Authorization\");\n  if (previousAuthorizationHeader != null && previousAuthorizationHeader.startsWith(\"Digest\")) {\n    return !isStale;\n  }\n  return false;\n}\n", "@Pure\n\t@Inline(value = \"2.*Math.sin(($1)/2.)\", imported = {Math.class})\n\tpublic static double crd(double angle) {\n\t\treturn 2. * Math.sin(angle / 2.);\n\t}", "public void debug(String message, Object... args) {\n    if (isDebugEnabled()) {\n      debug(String.format(message, args), getThrowable(args));\n    }\n  }", "public static Version fromString(String version){\n  if (!Strings.hasLength(version)) {\n    return Version.CURRENT;\n  }\n  final boolean snapshot;\n  if (snapshot=version.endsWith(\"-SNAPSHOT\")) {\n    version=version.substring(0,version.length() - 9);\n  }\n  String[] parts=version.split(\"\\\\.|\\\\-\");\n  if (parts.length < 3 || parts.length > 4) {\n    throw new IllegalArgumentException(\"the version needs to contain major, minor and revision, and optionally the build: \" + version);\n  }\n  try {\n    final int major=Integer.parseInt(parts[0]) * 1000000;\n    final int minor=Integer.parseInt(parts[1]) * 10000;\n    final int revision=Integer.parseInt(parts[2]) * 100;\n    int build=99;\n    if (parts.length == 4) {\n      String buildStr=parts[3];\n      if (buildStr.startsWith(\"Beta\") || buildStr.startsWith(\"beta\")) {\n        build=Integer.parseInt(buildStr.substring(4));\n      }\n      if (buildStr.startsWith(\"RC\") || buildStr.startsWith(\"rc\")) {\n        build=Integer.parseInt(buildStr.substring(2)) + 50;\n      }\n    }\n    final Version versionFromId=fromId(major + minor + revision+ build);\n    if (snapshot != versionFromId.snapshot()) {\n      return new Version(versionFromId.id,snapshot,versionFromId.luceneVersion);\n    }\n    return versionFromId;\n  }\n catch (  NumberFormatException e) {\n    throw new IllegalArgumentException(\"unable to parse version \" + version,e);\n  }\n}\n", "\tprivate void updateMainWindowBehaviour(boolean sticky) {\n\t\tmainWindowbehaviour.setEnabled(!sticky, entryTable);\n\t\tif (sticky) {\n\t\t\tmainWindowbehaviour.loadDefault();\n\t\t} else {\n\t\t\tmainWindowbehaviour.load();\n\t\t}\n\t}\n", "public void triangulate(PointSet ps){\n  _triangulations.clear();\n  _triangulations.add(ps);\n  start();\n}\n", "    protected void displayItemModelType(IItemModelType itemModel) {\n        List<IItemType> items = itemModel.getItemTypes();\n        if(items.isEmpty()) {\n            fBrowser.setText(Messages.AbstractActivityPreview_2);\n        }\n        else {\n            PreviewFactory.displayBrowserItem(items.get(0), fBrowser);\n        }\n    }\n", "public ResolvedFunction ( final Address address ) { this . address = address ; this . function = null ; this . memoryModule = null ; }", "public static Button createPushButton ( Composite parent , String label , Image image ) { Button button = new Button ( parent , SWT . PUSH ) ; button . setFont ( parent . getFont ( ) ) ; if ( image != null ) { button . setImage ( image ) ; } if ( label != null ) { button . setText ( label ) ; } GridData gd = new GridData ( ) ; button . setLayoutData ( gd ) ; SWTFactory . setButtonDimensionHint ( button ) ; return button ; }", "   protected void printLog(String str, int level)\n   {  if (log!=null) log.println(\"InviteDialog#\"+dialog_sqn+\": \"+str,level+SipStack.LOG_LEVEL_DIALOG);\n   }\n", "public boolean matchId ( ) { return tok . ttype == StreamTokenizer . TT_WORD && ! keywords . contains ( tok . sval ) ; }", "private static boolean isNumericToken(String token){\n  int tokenLen=token.length();\n  if (tokenLen > 0) {\n    char c=token.charAt(0);\nswitch (c) {\ncase 'c':\ncase 'C':\ncase 'x':\ncase 'y':\ncase 'Y':\ncase 'd':\ncase 'h':\ncase 'H':\ncase 'm':\ncase 's':\ncase 'S':\ncase 'e':\ncase 'D':\ncase 'F':\ncase 'w':\ncase 'W':\ncase 'k':\ncase 'K':\n      return true;\ncase 'M':\n    if (tokenLen <= 2) {\n      return true;\n    }\n}\n}\nreturn false;\n}\n", "public static double deviation(Iterator tuples,String field){\n  return deviation(tuples,field,DataLib.mean(tuples,field));\n}\n", "public static long lowerHexToUnsignedLong(String lowerHex) {\n    int length = lowerHex.length();\n    if (length < 1 || length > 32) throw isntLowerHexLong(lowerHex);\n\n    // trim off any high bits\n    int beginIndex = length > 16 ? length - 16 : 0;\n\n    return lowerHexToUnsignedLong(lowerHex, beginIndex);\n  }", "private boolean isIFixFileListValid(IFixInfo iFixInfo, File wlpInstallationDirectory) throws ParseException {\n        // First get the list of files to check\n        Updates updates = iFixInfo.getUpdates();\n        if (updates == null) {\n            return true;\n        }\n        Set<UpdatedFile> files = updates.getFiles();\n\n        // For each file work out if it is a feature JAR or not. Can do this based on the name as it will be in the format:\n        // <pathAndName>_1.0.0.v20120424-1111.jar\n        Pattern featureJarPattern = Pattern.compile(\".*_([0-9]*\\\\.){3}v[0-9]{8}-[0-9]{4}\\\\.jar\");\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\n        for (UpdatedFile file : files) {\n            String fileId = file.getId();\n            boolean isFeatureJar = featureJarPattern.matcher(fileId).matches();\n\n            if (isFeatureJar) {\n                // If it's a feature JAR we just need to see if it is present\n                File jarFile = new File(wlpInstallationDirectory, fileId);\n                if (!jarFile.exists()) {\n                    return false;\n                }\n            } else {\n                // If its not a feature JAR then it means you don't get a unique JAR per iFix so see if the file that is there is the one for this iFix or newer\n                File fileOnDisk = new File(wlpInstallationDirectory, fileId);\n                String fileDate = file.getDate();\n                long metaDataDate = dateFormat.parse(fileDate).getTime();\n                if (metaDataDate > fileOnDisk.lastModified()) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }", "public void add ( long index , K element ) ;", "private void reduce_trace_shapes_at_tie_pins(Collection<BrdItem> p_item_list,int p_own_net_no,AwtreeShapeSearch p_autoroute_tree){\n  for (  BrdItem curr_item : p_item_list) {\n    if (!(curr_item instanceof BrdAbitPin))     continue;\n    BrdAbitPin curr_tie_pin=(BrdAbitPin)curr_item;\n    if (curr_tie_pin.net_count() <= 1)     continue;\n    Collection<BrdItem> pin_contacts=curr_item.get_normal_contacts();\n    for (    BrdItem curr_contact : pin_contacts) {\n      if (!(curr_contact instanceof BrdTracep))       continue;\n      if (curr_contact.contains_net(p_own_net_no))       continue;\n      p_autoroute_tree.reduce_trace_shape_at_tie_pin(curr_tie_pin,(BrdTracep)curr_contact);\n    }\n  }\n}\n", "public static String parseVdcIdFromURI(URI id){\n  return (id != null) ? parseVdcIdFromURI(id.toString()) : null;\n}\n", "\tpublic Color getColor() {\n\t\tif (!checkValidCachedFlag(VALID_CACHED_FLAG_COLOR)) {\n\t\t\tObject colorValue = getStylePropertyValue(KuixConstants.COLOR_STYLE_PROPERTY, true);\n\t\t\tif (colorValue != null) {\n\t\t\t\tcachedColor = (Color) colorValue;\n\t\t\t} else {\n\t\t\t\tcachedColor = null;\n\t\t\t}\n\t\t\tvalidCachedFlags |= VALID_CACHED_FLAG_COLOR;\n\t\t}\n\t\treturn cachedColor;\n\t}\n", "private Node.JspBody findJspBody(Node parent) throws JasperException {\n  Node.JspBody result=null;\n  Node.Nodes subelements=parent.getBody();\n  for (int i=0; (subelements != null) && (i < subelements.size()); i++) {\n    Node n=subelements.getNode(i);\n    if (n instanceof Node.JspBody) {\n      result=(Node.JspBody)n;\n      break;\n    }\n  }\n  return result;\n}\n", "public JingleContent getSoleContentOrThrow() {\n        if (contents.isEmpty()) {\n            return null;\n        }\n\n        if (contents.size() > 1) {\n            throw new IllegalStateException();\n        }\n\n        return contents.get(0);\n    }", "@Nonnull\n  @OverrideOnDemand\n  protected <T> T executeRequest (@Nonnull final HttpRequestBase aRequest,\n                                  @Nonnull final ResponseHandler <T> aHandler) throws IOException\n  {\n    // Contextual attributes set the local context level will take\n    // precedence over those set at the client level.\n    final HttpContext aContext = HttpClientHelper.createHttpContext (m_aProxy, m_aProxyCredentials);\n    return m_aHttpClientMgr.execute (aRequest, aContext, aHandler);\n  }", "public DefaultAddressConverter ( final IAddress membase , final IAddress filebase ) { sectionMemoryStartAddress = Preconditions . checkNotNull ( membase , STR_ ) ; fileMemoryStartAddress = Preconditions . checkNotNull ( filebase , STR_ ) ; }", "private JMenu createBinNaviMenu ( ) { final JMenu menu = new JMenu ( STR_ ) ; menu . setMnemonic ( STR_ ) ; menu . add ( CActionProxy . proxy ( new CAddDatabaseAction ( m_projectTree ) ) ) ; menu . addSeparator ( ) ; menu . add ( CActionProxy . proxy ( new CActionExit ( getParent ( ) ) ) ) ; return menu ; }", "    public boolean empty() {\n\n        return (list.size() == 0);\n\n    }\n", "    public void ensureRowCount(int rowCount) {\n        columns.ensureRowCount(rowCount);\n    }\n", "        public void actionPerformed(ActionEvent event) {\n          ValidationManager.getInstance().revalidateAndReportInputFile(lastSelectedFile.getPath(), ValidationManager.VALIDATE_WITH_DTD);\n        } // End method: actionPerformed\n", "public final void yybegin ( int newState ) { zzLexicalState = newState ; }", "public boolean isConnected ( String clientHandle ) { MqttConnection client = getConnection ( clientHandle ) ; return client . isConnected ( ) ; }", "public static Set<Path> getDirectoriesFromJar(Path pathToJarFile) throws IOException {\n        Set<Path> result = new HashSet<Path>();\n        ZipFile jarfile = new ZipFile(pathToJarFile.toFile());\n        try {\n            final Enumeration<? extends ZipEntry> entries = jarfile.entries();\n            while (entries.hasMoreElements()) {\n                ZipEntry entry = entries.nextElement();\n                if (entry.isDirectory()) {\n                    result.add(Paths.get(entry.getName()));\n                }\n            }\n            jarfile.close();\n        } finally {\n            IOUtils.closeQuietly(jarfile);\n        }\n        return result;\n    }", "public HttpRequest send ( final byte [ ] input ) throws HttpRequestException { return send ( new ByteArrayInputStream ( input ) ) ; }", "private void initBackupComponents ( ) throws SpaceComponentsInitializeException { for ( Iterator < ISpaceComponentsHandler > iterator = _componentsHandlers . iterator ( ) ; iterator . hasNext ( ) ; ) { ISpaceComponentsHandler handler = iterator . next ( ) ; if ( ! handler . isRecoverySupported ( ) ) handler . initComponents ( BOOL_ ) ; } }", "private ReplaceTokens createHostnameToken(){\n  ReplaceTokens.Token tokenHostname=new ReplaceTokens.Token();\n  tokenHostname.setKey(GeneralPropertySet.HOSTNAME);\n  String hostname=getPropertyValue(GeneralPropertySet.HOSTNAME);\n  if (hostname == null) {\n    hostname=DEFAULT_HOSTNAME;\n  }\n  tokenHostname.setValue(hostname);\n  ReplaceTokens replaceHostname=new ReplaceTokens();\n  replaceHostname.addConfiguredToken(tokenHostname);\n  return replaceHostname;\n}\n", "public static MarkerOptions createMarkerOptions(GeoPackage geoPackage, FeatureRow featureRow, float density, IconCache iconCache) {\n\n        MarkerOptions markerOptions = new MarkerOptions();\n        setFeatureStyle(markerOptions, geoPackage, featureRow, density, iconCache);\n\n        return markerOptions;\n    }", "DigitalOut createDigitalOut ( boolean b ) ;", "public AlgorithmException(Algorithm algorithm,Throwable cause){\n  this(algorithm,cause.getMessage(),cause);\n}\n", "\tprotected void setProperties(Element element, EObject eObject, String propertyName) {\n\t\tString propertyAttribute = element.getAttribute(propertyName);\n\t\t\n\t\t// added by Grid.Qian\n\t\t// we should permit user add a correlation without properties\n\t\tif(propertyAttribute == null){\n\t\t\treturn;\n\t\t}\n\t\tStringTokenizer st = new StringTokenizer(propertyAttribute);\n\n\t\twhile (st.hasMoreTokens()) {\n\t\t\tQName qName = BPELUtils.createQName(element, st.nextToken());\n\t\t\tProperty property = new PropertyProxy(getResource().getURI(), qName);\n\t\t\tif (eObject instanceof CorrelationSet) {\n\t\t\t\t((CorrelationSet)eObject).getProperties().add(property);\n\t\t\t} else if (eObject instanceof To) {\n\t\t\t\t((To)eObject).setProperty(property);\n\t\t\t}\n\t\t}\n\t}\n", "\tpublic String next() {\n\n\t\tString next = null;\n\t\ttry {\n\t\t\tnext = _queue.take();\n\t\t} catch (InterruptedException e) {\n\t\t\t// do nothing\n\t\t}\n\t\treturn next;\n\t}\n", "private static byte [ ] toByteArray ( String str ) { int length = str . length ( ) ; byte [ ] result = new byte [ length + NUM_ ] ; for ( int i = NUM_ ; i < length ; i ++ ) result [ i ] = ( byte ) str . charAt ( i ) ; result [ length ] = NUM_ ; return res", "    public void openSwitchboardSession(Contact c) {\n        boolean found = false;\n        ListIterator i = switchboardSessions.listIterator(0);\n        while (i.hasNext()) {\n            SwitchboardSession sbs = (SwitchboardSession) i.next();\n            if (sbs.contains(c)) {\n                found = true;\n                break;\n            }\n        }\n        if (found) {\n            // TODO: hmm, now what?\n            log.append(\"Found active switchboard session for contact \" + c);\n        } else {\n            RedirectPacket p = new RedirectPacket();\n            addPacketListener(p.getTransactionID(), \n                    new SwitchboardRedirector(c));\n            sendMessage(p);\n        }\n    }\n", "@Override\n    public Iterator<Map.Entry<String, PrefabValueFactory<?>>> iterator() {\n        return cache.entrySet().iterator();\n    }", "    public List findNeighboringOccupants() {\n        return Discrete.findOccupants(neighbors);\n        //return availableNeighbors;\n    }\n", "protected String defaultClassifierString(){\n  return \"weka.classifiers.rules.ZeroR\";\n}", "public CRemoveGroupAction ( final INaviView view , final CGroupNode node ) { super ( STR_ ) ; m_graph = view ; m_node = node ; }", "protected void encodeBufferPrefix ( OutputStream aStream ) throws IOException { pStream = new PrintStream ( aStream ) ; }", "    protected void cmd_getStudentList(StringTokenizer instructorQuiz) {\n        String instructor = instructorQuiz.nextToken().trim();\n        String quiz;\n        Vector studentList;\n        \n        if (instructorQuiz.hasMoreTokens())\n            quiz = instructorQuiz.nextToken().trim();\n        else\n            quiz = new String();\n        \n        try {\n            studentList = instDB.getStudentList(instructor, quiz);\n            sendtoClient(\"700\");\n            sendtoClient(studentList);\n        } catch (InvalidDBRequestException e) {\n            sendtoClient(\"701 \"+e.getMessage());\n            return;\n        }\n    }\n", "private static IProject createBaseProject(String projectName, URI location)\n\t{\n\t\t// it is acceptable to use the ResourcesPlugin class\n\t\tIProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);\n\n\t\tif (!newProject.exists())\n\t\t{\n\t\t\tURI projectLocation = location;\n\t\t\tIProjectDescription desc = newProject.getWorkspace().newProjectDescription(newProject.getName());\n\n\t\t\tif (location != null\n\t\t\t\t\t|| ResourcesPlugin.getWorkspace().getRoot().getLocationURI().equals(location))\n\t\t\t{\n\t\t\t\tprojectLocation = null;\n\t\t\t}\n\n\t\t\tdesc.setLocationURI(projectLocation);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tnewProject.create(desc, null);\n\t\t\t\tif (!newProject.isOpen())\n\t\t\t\t{\n\t\t\t\t\tnewProject.open(null);\n\t\t\t\t}\n\t\t\t} catch (CoreException e)\n\t\t\t{\n\t\t\t\tVdmCore.log(\"VdmModelManager createBaseProject\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn newProject;\n\t}", "protected boolean isDeviceCompatibility ( ) { return mDeviceCompatibility ; }", "  public Predicate trust(Predicate p) {\n    restore();\n    trail.unwind(orStack.getTR());\n    orStack.delete();\n    return p;\n  }\n", "void debuggerHalt ( DebuggerHaltReply reply ) ;", "public IImageSharingSession initiateImageSharing(String contact, String file) throws ClientApiException {\n    \tif (coreApi != null) {\n\t\t\ttry {\n\t\t    \treturn coreApi.initiateImageSharing(contact, file);\n\t\t\t} catch(Exception e) {\n\t\t\t\tthrow new ClientApiExc", "public abstract boolean isSelectionOnly ( ) ;", "public Len rdbLoadLen() throws IOException {\n        boolean isencoded = false;\n        int rawByte = in.read();\n        int type = (rawByte & 0xC0) >> 6;\n        long value;\n        if (type == RDB_ENCVAL) {\n            isencoded = true;\n            value = rawByte & 0x3F;\n        } else if (type == RDB_6BITLEN) {\n            value = rawByte & 0x3F;\n        } else if (type == RDB_14BITLEN) {\n            value = ((rawByte & 0x3F) << 8) | in.read();\n        } else if (rawByte == RDB_32BITLEN) {\n            value = in.readInt(4, false);\n        } else if (rawByte == RDB_64BITLEN) {\n            value = in.readLong(8, false);\n        } else {\n            throw new AssertionError(\"unexpected len-type:\" + type);\n        }\n        return new Len(value, isencoded);\n    }", "    public ResourceOwner release() {\n        resourceOwner.release();\n        return resourceOwner;\n    }\n", "public void associate(Node node){\n  if (this.node == null) {\n    this.node=node;\n  }\n}\n", "\tpublic int compareTo(final IExpr obj) {\n\t\tif (obj instanceof Num) {\n\t\t\treturn Double.compare(fDouble, ((Num) obj).fDouble);\n\t\t}\n\t\treturn (hierarchy() - (obj).hierarchy());\n\t}\n", "public LiveNodeTrasher(String id,int numNodesToAdd){\n  this.id=id;\n  this.numNodesToAdd=numNodesToAdd;\n  this.client=newSolrZkClient();\n}\n", "@Override\n    public void processWorkUnit(\n            final DocWorkUnit workUnit,\n            final List<Map<String, String>> featureMaps,\n            final List<Map<String, String>> groupMaps) {\n\n        CommandLineArgumentParser clp = null;\n        List<? extends CommandLinePluginDescriptor<?>> pluginDescriptors = new ArrayList<>();\n\n        // Not all DocumentedFeature targets are CommandLinePrograms, and thus not all can be instantiated via\n        // a no-arg constructor. But we do want to generate a doc page for them. Any arguments associated with\n        // such a feature will show up in the doc page for any referencing CommandLinePrograms, instead of in\n        // the standalone feature page.\n        //\n        // Ex: We may want to document an input or output file format by adding @DocumentedFeature\n        // to the format's reader/writer class (i.e. TableReader), and then reference that feature\n        // in the extraDocs attribute in a CommandLineProgram that reads/writes that format.\n        try {\n            final Object argumentContainer = workUnit.getClazz().newInstance();\n            if (argumentContainer instanceof CommandLinePluginProvider) {\n                pluginDescriptors = ((CommandLinePluginProvider) argumentContainer).getPluginDescriptors();\n                clp = new CommandLineArgumentParser(\n                        argumentContainer, pluginDescriptors, Collections.emptySet()\n                );\n            } else {\n                clp = new CommandLineArgumentParser(argumentContainer);\n            }\n        } catch (IllegalAccessException | InstantiationException e) {\n            // DocumentedFeature does not assume a no-arg constructor unless it is also annotated with CommandLineProgramProperties\n            if (workUnit.getCommandLineProperties() != null) {\n                throw new RuntimeException(workUnit.getClazz() + \" requires a non-arg constructor, because it is annotated with CommandLineProgramProperties \", e);\n            }\n        }\n\n        workUnit.setProperty(\"groups\", groupMaps);\n        workUnit.setProperty(\"data\", featureMaps);\n\n        addHighLevelBindings(workUnit);\n        addCommandLineArgumentBindings(workUnit, clp);\n        addDefaultPlugins(workUnit, pluginDescriptors);\n        addExtraDocsBindings(workUnit);\n        addCustomBindings(workUnit);\n    }", "public static void storeLogs(String sourceLogFileName, String destLogFileName) throws Exception {\n        // assumes eventmanager is running\n        // store logs\n        String tmpdir = System.getProperty(\"java.io.tmpdir\");\n        if (tmpdir == null || tmpdir == \"null\") {\n            tmpdir = \"/tmp\";\n        }\n    \tFile tmpLogFile = new File(tmpdir + File.separator + sourceLogFileName);\n    \tFile destFile = new File(current_log_dir + File.separator + destLogFileName);\n    \t\n        Files.copy(tmpLogFile, destFile);\n    }", "\tpublic Attribute AddAttribute(String attrName, Object[] nominal_values) {\n\t\tif (myAttributes == null)\n\t\t{\n\t\t\tmyAttributes = new FastVector();\n\t\t}\n\t\tFastVector temp_nominal_values = new FastVector(nominal_values.length);\n\t\tfor (int i = 0; i < nominal_values.length; i++) {\n\t\t\ttemp_nominal_values.addElement(nominal_values[i].toString());\n\t\t}\n\t\tAttribute tempAttr = new Attribute(attrName,  temp_nominal_values);\n\t\tmyAttributes.addElement(tempAttr);\n\t\treturn tempAttr;\n\t}\n", "public static DataSource getDataSource(Environment env) {\n\t\tString dbUrl = (env.getProperty(Utils.DB_URL) != null)?env.getProperty(Utils.DB_URL).toLowerCase():\"\";\n\t\tString herokuDbUrl = env.getProperty(Utils.HEROKU_DATABASE_URL);\n\t\t\n\t\tif(herokuDbUrl != null) {\n\t\t\t// url will come as: postgres://user:pass@host:5432/dbname\n\t\t\tString fromUserName = herokuDbUrl.substring(herokuDbUrl.indexOf(\"//\") + 2);\n\t\t\tString userName = fromUserName.substring(0, fromUserName.indexOf(\":\"));\n\t\t\tString pass = fromUserName.substring(fromUserName.indexOf(\":\") +1, fromUserName.indexOf(\"@\"));\n\t\t\tString fromHost = fromUserName.substring(fromUserName.indexOf(\"@\")+1);\n\t\t\tString schemaName = env.getProperty(Utils.SCHEMA_NAME);\n\t\t\t\n\t\t\t//build this url: jdbc:postgresql://host:5432/dbName?user=username&password=pass&currentSchema='\n\t\t\tdbUrl = \"jdbc:postgresql://\" + fromHost + \"?user=\" + userName + \"&password=\" + pass + \"&sslmode=require\";\n\t\t\tif(schemaName != null) {\n\t\t\t\tdbUrl += \"&currentSchema=\" + schemaName; \n\t\t\t}\n\t\t\tlogger.info(\"------DB Url: \" + dbUrl);\n\t\t}\n\t\tBasicDataSource dataSource = new BasicDataSource();\n\t\ttry {\n\t\t\tif(dbUrl.indexOf(\"mysql\") > -1 ) {\n\t\t\t\tdataSource.setDriver(new com.mysql.jdbc.Driver());\n\t\t\t} else if(dbUrl.indexOf(\"postgres\") > -1) {\n\t\t\t\tdataSource.setDriver(new org.postgresql.Driver()); \n\t\t\t} else if(dbUrl.indexOf(\"derby\") > -1) {\n\t\t\t\tdataSource.setDriver(new org.apache.derby.jdbc.EmbeddedDriver());\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\tlogger.error(\"----FhiServerConfigCommon: getDataSource: setting driver error: \" + e.getMessage());\n\t\t}\n\t\tdataSource.setUrl(dbUrl);\n\t\treturn dataSource;\n\t}", "public void shutdown() {\n    this.shouldRun = false;\n    this.namespaceSliceDUMap.clear();\n    if(this.refreshUsed != null) {\n      this.refreshUsed.interrupt();\n      try {\n        this.refreshUsed.join();\n        this.refreshUsed = null;\n      } catch (InterruptedException ie) {\n      }\n    }\n  }", "private CGlobalSettings ( ) { }", "protected void tagHandlerPrefix ( ) throws Exception { writeCopyright ( ) ; writer . write ( STR_ ) ; writePackage ( ) ; writer . write ( STR_ ) ; writeImports ( ) ; writer . write ( STR_ ) ; writer . writeBlockComment ( STR_ ) ; writer . write ( STR_ ) ; writeClassDocumentation ( ) ; writeClassDeclaration ( ) ; writer . write ( STR_ ) ; writer . indent ( ) ; }", "    protected boolean isLocal() {\n        return NetworkUtils.isLocalAddress(_socket.getInetAddress());\n    }\n", "public void init ( ) throws ServletException { }", "public void storeKeys(Iterator<K> iterator) {\n        long startedNanos = System.nanoTime();\n        FileOutputStream fos = null;\n        try {\n            buf = allocate(BUFFER_SIZE);\n            lastWrittenBytes = 0;\n            lastKeyCount = 0;\n\n            fos = new FileOutputStream(tmpStoreFile, false);\n\n            // write header and keys\n            writeInt(fos, MAGIC_BYTES);\n            writeInt(fos, FileFormat.INTERLEAVED_LENGTH_FIELD.ordinal());\n            writeKeySet(fos, fos.getChannel(), iterator);\n\n            // cleanup if no keys have been written\n            if (lastKeyCount == 0) {\n                deleteQuietly(storeFile);\n                updatePersistenceStats(startedNanos);\n                return;\n            }\n\n            fos.flush();\n            closeResource(fos);\n            rename(tmpStoreFile, storeFile);\n\n            updatePersistenceStats(startedNanos);\n        } catch (Exception e) {\n            logger.warning(format(\"Could not store keys of Near Cache %s (%s)\", nearCacheName, storeFile.getAbsolutePath()), e);\n\n            nearCacheStats.addPersistenceFailure(e);\n        } finally {\n            closeResource(fos);\n            deleteQuietly(tmpStoreFile);\n        }\n    }", "public void visitSource ( String source , String debug ) { if ( cv != null ) { cv . visitSource ( source , debug ) ; } }", "public static String getTextFromComment(Comment comment) {\n    switch (comment.getStyle()) {\n      case BLOCK:\n        return comment.getText().replaceAll(\"^\\\\s*/\\\\*\\\\s*(.*?)\\\\s*\\\\*/\\\\s*\", \"$1\");\n      case LINE:\n        return comment.getText().replaceAll(\"^\\\\s*//\\\\s*\", \"\");\n      default:\n        return comment.getText();\n    }\n  }", "public Model(){\n  listenerList=new EventListenerList();\n}", "public static void printPassInfo(boolean pass) {\n    if (pass) {\n      System.out.println(Constants.ANSI_GREEN + \"Passed the test!\" + Constants.ANSI_RESET);\n    } else {\n      System.out.println(Constants.ANSI_RED + \"Failed the test!\" + Constants.ANSI_RESET);\n    }\n  }", "    public CtClass getCtClass(String classname) throws NotFoundException {\n        if (classname.charAt(0) == '[')\n            return Descriptor.toCtClass(classname, this);\n        else\n            return get(classname);\n    }\n", "public NumberNode ( final long value ) { this . value = value ; }", "public Observable<ServiceResponse<Void>> beginCompleteRestoreWithServiceResponseAsync(String locationName, UUID operationId, String lastBackupName) {\n        if (locationName == null) {\n            throw new IllegalArgumentException(\"Parameter locationName is required and cannot be null.\");\n        }\n        if (operationId == null) {\n            throw new IllegalArgumentException(\"Parameter operationId is required and cannot be null.\");\n        }\n        if (this.client.subscriptionId() == null) {\n            throw new IllegalArgumentException(\"Parameter this.client.subscriptionId() is required and cannot be null.\");\n        }\n        if (this.client.apiVersion() == null) {\n            throw new IllegalArgumentException(\"Parameter this.client.apiVersion() is required and cannot be null.\");\n        }\n        if (lastBackupName == null) {\n            throw new IllegalArgumentException(\"Parameter lastBackupName is required and cannot be null.\");\n        }\n        CompleteDatabaseRestoreDefinition parameters = new CompleteDatabaseRestoreDefinition();\n        parameters.withLastBackupName(lastBackupName);\n        return service.beginCompleteRestore(locationName, operationId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())\n            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {\n                @Override\n                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {\n                    try {\n                        ServiceResponse<Void> clientResponse = beginCompleteRestoreDelegate(response);\n                        return Observable.just(clientResponse);\n                    } catch (Throwable t) {\n                        return Observable.error(t);\n                    }\n                }\n            });\n    }", "protected void sendVerificationMail(final U user){\n  try {\n    log.debug(\"Sending verification mail to: \" + user);\n    String verifyLink=properties.getApplicationUrl() + \"/users/\" + user.getVerificationCode()+ \"/verify\";\n    mailSender.send(user.getEmail(),LemonUtil.getMessage(\"com.naturalprogrammer.spring.verifySubject\"),LemonUtil.getMessage(\"com.naturalprogrammer.spring.verifyEmail\",verifyLink));\n    log.debug(\"Verification mail to \" + user.getEmail() + \" queued.\");\n  }\n catch (  MessagingException e) {\n    log.error(ExceptionUtils.getStackTrace(e));\n  }\n}\n", "    private DoubleMatrix1D getStationaryDistribution() {\n        DoubleMatrix1D piVector = new DenseDoubleMatrix1D(getVertices().size());\n        PageRank pageRank = new PageRank((DirectedGraph) getGraph(), 0, getEdgeWeightKeyName());\n        pageRank.evaluate();\n        List rankings = pageRank.getRankings();\n\n        for (Iterator r_iter = rankings.iterator(); r_iter.hasNext();) {\n            NodeRanking rank = (NodeRanking) r_iter.next();\n            piVector.set(mIndexer.getIndex(rank.vertex), rank.rankScore);\n        }\n        return piVector;\n    }\n", "public synchronized void deleteObserver(Observer observer){\n  observers.remove(observer);\n}\n", "    public void destroy() {\n\titeratorLogger.entering(\"OutriggerServerImpl\", \"destroy\");\n\n\tserverGate.rejectCalls(\n\t    new NoSuchObjectException(\"Service is destroyed\"));\n\t(new DestroyThread()).start();\n\tlifecycleLogger.log(Level.INFO, \n\t    \"Outrigger server destroy thread started: {0}\", this);\n    }\n", "  public void setCloseRequest(boolean closeRequest) {\n    //we use the method to calculate connection time etc.\n    setDownTimeMillis(System.currentTimeMillis());\n    this.closeRequest = closeRequest;\n  }\n", "public void addCssResource(final ApplicationResource resource) {\n\t\tWApplicationModel model = getOrCreateComponentModel();\n\t\tif (model.cssResources == null) {\n\t\t\tmodel.cssResources = new ArrayList<>();\n\t\t} else if (model.cssResources.contains(resource)) {\n\t\t\treturn;\n\t\t}\n\t\tmodel.cssResources.add(resource);\n\t\tMemoryUtil.checkSize(model.cssResources.size(), this.getClass().getSimpleName());\n\t}", "@SuppressWarnings(\"unchecked\") public static void register(String algorithmURI,String implementingClass) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException, XMLSignatureException {\n  JavaUtils.checkRegisterPermission();\n  if (log.isLoggable(java.util.logging.Level.FINE)) {\n    log.log(java.util.logging.Level.FINE,\"Try to register \" + algorithmURI + \" \"+ implementingClass);\n  }\n  Class<? extends SignatureAlgorithmSpi> registeredClass=algorithmHash.get(algorithmURI);\n  if (registeredClass != null) {\n    Object exArgs[]={algorithmURI,registeredClass};\n    throw new AlgorithmAlreadyRegisteredException(\"algorithm.alreadyRegistered\",exArgs);\n  }\n  try {\n    Class<? extends SignatureAlgorithmSpi> clazz=(Class<? extends SignatureAlgorithmSpi>)ClassLoaderUtils.loadClass(implementingClass,SignatureAlgorithm.class);\n    algorithmHash.put(algorithmURI,clazz);\n  }\n catch (  NullPointerException ex) {\n    Object exArgs[]={algorithmURI,ex.getMessage()};\n    throw new XMLSignatureException(\"algorithms.NoSuchAlgorithm\",exArgs,ex);\n  }\n}\n", "private static float saturate(float f){\n  return Math.max(0,Math.min(1,f));\n}\n", "T parseArgument ( MinecraftServer server , ICommandSender sender , String argument ) throws CommandException ;", "\tprivate boolean waitUntilThreadTerminates( WorkerThread thread, int timeLimitSeconds ){\n\t\t\n\t\t// 1 -- Loop until the thread terminates\n\t\tint secondsAlive = 0;\n\t\twhile( thread != null && thread.getStatus() != State.STOPPED && (secondsAlive < timeLimitSeconds)){\n\t\t\t\n\t\t\ttry{\n\t\t\t\tThread.sleep(1000);\n\t\t\t\tsecondsAlive += 1;\n\t\t\t}\n\t\t\tcatch(InterruptedException e){\n\t\t\t\t//Ignore, we don't care if the thread is awoken.\n\t\t\t}\n\t\t}\n\t\t\n\t\t// 2 -- Determine if the thread was successfully terminated\n\t\treturn thread != null && thread.getStatus() != State.STOPPED;\n\t}\n", "    public boolean isMaxnumofspotsModified() {\n        return maxnumofspots_is_modified; \n    }\n", "public void addDhtKey(KeyCacheObject key,boolean invalidateEntry,GridCacheContext ctx) throws IgniteCheckedException {\n  invalidateEntries.set(idx,invalidateEntry);\n  addKeyBytes(key,false,ctx);\n}\n", "public synchronized IComment editGroupNodeComment ( final INaviGroupNode node , final IComment oldComment , final String commentText ) throws CouldntSaveDataException { Preconditions . checkNotNull ( node , STR_ ) ; return editComment ( new GroupNodeComme", "public Set<String> postProcessingFields() {\n        Set<String> fields = new LinkedHashSet<>();\n        query.forEach(condition -> fields.addAll(condition.postProcessingFields()));\n        sort.forEach(condition -> fields.addAll(condition.postProcessingFields()));\n        return fields;\n    }", "public void resetRotation ( ) { this . rotationX = NUM_ ; this . rotationY = NUM_ ; this . rotationZ = NUM_ ; }", "public static ValueGetterSpacePredicate < ServerEntry > path ( String path , ISpacePredicate predicate ) { return new ValueGetterSpacePredicate < ServerEntry > ( new SpaceEntryPathGetter ( path ) , predicate ) ; }", "T tapCustomAfter ( By by , int offsetX , int offsetY , int pressInMilliSeconds , int fingers , int waitTimeInSeconds ) ;", "\tpublic Base appendChild(Node... children){\n\t\tfor(int i = 0; i < children.length; i++){\n\t\t\tappendChild(children[i]);\n\t\t}\n\t\treturn this;\n\t}\n", "public static Result parseResults(Command cmd, InputStream input, ResultType type) throws SparqlException {\n    try {\n      return createResults(cmd, input, type);\n    } catch (Throwable t) {\n      logger.debug(\"Error parsing results from stream, cleaning", "public boolean matches ( Type t ) ;", "    public void uncaughtException(final Throwable e) {\n        LOG.debug(\"uncaughtException\", e);\n        ExceptionListener listener = null;\n        for (int i = 0; i < listeners.size(); i++) {\n            listener = (ExceptionListener) listeners.get(i);\n            listener.uncaughtException(e);\n        }\n    }\n", "public DebuggerTemplate ( final com . google . security . zynamics . binnavi . debug . debugger . DebuggerTemplate template ) { m_template = template ; m_template . addListener ( m_internalListener ) ; }", "protected boolean sendProcessedTemplate(\n            Request.In event, IOSubchannel channel, Template tpl) {\n        // Prepare response\n        HttpResponse response = event.httpRequest().response().get();\n        MediaType mediaType = contentType(\n            ResponseCreationSupport.uriFromPath(tpl.getSourceName()));\n        response.setContentType(mediaType);\n\n        // Send response\n        response.setStatus(HttpStatus.OK);\n        response.setField(HttpField.LAST_MODIFIED, Instant.now());\n        if (maxAgeCalculator == null) {\n            ResponseCreationSupport.setMaxAge(response, 0);\n        } else {\n            ResponseCreationSupport.setMaxAge(response,\n                maxAgeCalculator.maxAge(event.httpRequest(), mediaType));\n        }\n        channel.respond(new Response(response));\n\n        // Send content\n        try (ByteBufferOutputStream bbos = new ByteBufferOutputStream(\n            channel, channel.responsePipeline());\n                Writer out = new OutputStreamWriter(\n                    bbos.suppressClose(), \"utf-8\")) {\n            Map<String, Object> model = fmSessionModel(\n                event.associated(Session.class));\n            tpl.setLocale((Locale) model.get(\"locale\"));\n            tpl.process(model, out);\n            return true;\n        } catch (IOException | TemplateException e) {\n            // Too late to do anything about this (header was sent).\n            fire(new Error(event, e), channel);\n        }\n        return false;\n    }", "public boolean abortPendingOffers() throws InterruptedException {\n        this.lock.lockInterruptibly();\n        try {\n            if (this.pendingOffers.get() > 0) {\n                this.pendingOffersAborted.set(true);\n                this.completedCondi", "public static boolean isUDP(final Buffer t) {\n        try {\n            return t.capacity() == 3 && t.getByte(0) == 'U' && t.getByte(1) == 'D' && t.getByte(2) == 'P';\n        } catch (final IOException e) {\n            return false;\n        }\n    }", "void prepareTaskTransformForFilterTaskHidden ( DeckChildViewTransform toTransform ) { toTransform . alpha = NUM_ ; toTransform . translationY += NUM_ ; toTransform . translationZ = NUM_ ; }", "void beforeSet ( Object object , String property , Object newValue ) ;", "public void setStructureValueList(List<String> valueList) {\n\n        checkFrozen();\n        if (valueList != null) {\n            m_structureValueList = new ArrayList<String>(valueList);\n            m_structureValueList = Collections.unmodifiableList(m_structureValueList);\n            m_structureValue = createValueFromList(m_structureValueList);\n        } else {\n            m_structureValueList = null;\n            m_structureValue = null;\n        }\n    }", "  public HTMLTableRow legend() {\n    HTMLTableData imgCell = new HTMLTableData(toRelativeHTMLImg());\n    imgCell.setVALIGN(HTMLTableData.TOP);\n    HTMLTableData helpCell = new HTMLTableData(new HTMLSmall(helpInfo));\n    HTMLTableRow row = new HTMLTableRow", "public static void putLongLE(byte[] arr,long off,long val){\n  if (UNALIGNED)   UNSAFE.putLong(arr,off,Long.reverseBytes(val));\n else   putLongByByte(arr,off,val,false);\n}\n", "protected List<Image> stageIcons() {\n        // TODO to be rewritten with ImageSet Resource when available\n        return StageParameters.APPLICATION_ICONS.get()\n                                                .stream()\n                                                .map(p -> Resources.create(p).get())\n                                                .collect(Collectors.toList());\n    }", "@Nullable\n  public static URL getResource (@Nonnull final Class <?> aClass, @Nonnull @Nonempty final String sPath)\n  {\n    ValueEnforcer.notNull (aClass, \"Class\");\n    ValueEnforcer.notEmpty (sPath, \"Path\");\n\n    // Ensure the path does start with a \"/\"\n    final String sPathWithSlash = _getPathWithLeadingSlash (sPath);\n\n    // returns null if not found\n    return aClass.getResource (sPathWithSlash);\n  }", "private void mergePlugins() {\n        final Element root = pluginsDoc.createElement(ELEM_PLUGINS);\n        pluginsDoc.appendChild(root);\n        if (!descSet.isEmpty()) {\n            final URI b = new File(ditaDir, CONFIG_DIR + File.separator + \"plugins.x", "public boolean init(){\n  if (MODE == MODE_HORIZONTAL) {\n    centerPanel.setLayout(new ALayout());\n  }\n  if (MODE == MODE_VERTICAL) {\n    gbc.anchor=GridBagConstraints.NORTHWEST;\n    gbc.weightx=0;\n    gbc.weighty=0;\n    gbc.gridy=m_line++;\n    gbc.gridx=0;\n    gbc.gridwidth=1;\n    gbc.insets=nullInset;\n    gbc.fill=GridBagConstraints.HORIZONTAL;\n    centerPanel.add(Box.createVerticalStrut(10),gbc);\n  }\n  log.config(\"\");\n  MClient client=MClient.get(Env.getCtx());\n  String ASPFilter=\"\";\n  if (client.isUseASP())   ASPFilter=\"   AND (   p.AD_Process_Para_ID IN ( \" + \"              SELECT pp.AD_Process_Para_ID \" + \"                FROM ASP_Process_Para pp, ASP_Process p, ASP_Level l, ASP_ClientLevel cl \"+ \"               WHERE p.ASP_Level_ID = l.ASP_Level_ID \"+ \"                 AND cl.AD_Client_ID = \" + client.getAD_Client_ID() + \"                 AND cl.ASP_Level_ID = l.ASP_Level_ID \"+ \"                 AND pp.ASP_Process_ID = p.ASP_Process_ID \"+ \"                 AND pp.IsActive = 'Y' \"+ \"                 AND p.IsActive = 'Y' \"+ \"                 AND l.IsActive = 'Y' \"+ \"                 AND cl.IsActive = 'Y' \"+ \"                 AND pp.ASP_Status = 'S') \"+ \"        OR p.AD_Process_Para_ID IN ( \"+ \"              SELECT AD_Process_Para_ID \"+ \"                FROM ASP_ClientException ce \"+ \"               WHERE ce.AD_Client_ID = \"+ client.getAD_Client_ID()+ \"                 AND ce.IsActive = 'Y' \"+ \"                 AND ce.AD_Process_Para_ID IS NOT NULL \"+ \"                 AND ce.AD_Tab_ID IS NULL \"+ \"                 AND ce.AD_Field_ID IS NULL \"+ \"                 AND ce.ASP_Status = 'S') \"+ \"       ) \"+ \"   AND p.AD_Process_Para_ID NOT IN ( \"+ \"          SELECT AD_Process_Para_ID \"+ \"            FROM ASP_ClientException ce \"+ \"           WHERE ce.AD_Client_ID = \"+ client.getAD_Client_ID()+ \"             AND ce.IsActive = 'Y' \"+ \"             AND ce.AD_Process_Para_ID IS NOT NULL \"+ \"             AND ce.AD_Tab_ID IS NULL \"+ \"             AND ce.AD_Field_ID IS NULL \"+ \"             AND ce.ASP_Status = 'H')\";\n  String sql=null;\n  if (Env.isBaseLanguage(Env.getCtx(),\"AD_Process_Para\"))   sql=\"SELECT p.Name, p.Description, p.Help, \" + \"p.AD_Reference_ID, p.AD_Process_Para_ID, \" + \"p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, \"+ \"p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, \"+ \"p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode, p.ReadOnlyLogic, p.DisplayLogic \"+ \"FROM AD_Process_Para p\"+ \" LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) \"+ \"WHERE p.AD_Process_ID=?\"+ \" AND p.IsActive='Y' \" + ASPFilter + \" ORDER BY SeqNo\";\n else   sql=\"SELECT t.Name, t.Description, t.Help, \" + \"p.AD_Reference_ID, p.AD_Process_Para_ID, \" + \"p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, \"+ \"p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, \"+ \"p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode, p.ReadOnlyLogic, p.DisplayLogic \"+ \"FROM AD_Process_Para p\"+ \" INNER JOIN AD_Process_Para_Trl t ON (p.AD_Process_Para_ID=t.AD_Process_Para_ID)\"+ \" LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) \"+ \"WHERE p.AD_Process_ID=?\"+ \" AND t.AD_Language='\" + Env.getAD_Language(Env.getCtx()) + \"'\"+ \" AND p.IsActive='Y' \"+ ASPFilter+ \" ORDER BY SeqNo\";\n  int cols=0;\n  int col=2;\n  int row=0;\n  boolean hasFields=false;\n  PreparedStatement pstmt=null;\n  ResultSet rs=null;\n  try {\n    pstmt=DB.prepareStatement(sql,null);\n    pstmt.setInt(1,m_processInfo.getAD_Process_ID());\n    rs=pstmt.executeQuery();\n    while (rs.next()) {\n      hasFields=true;\n      if (MODE == MODE_HORIZONTAL) {\n        createField(rs,row,cols);\n        cols=cols + col;\n        if (cols >= 4) {\n          cols=0;\n          row++;\n        }\n      }\n      if (MODE == MODE_VERTICAL) {\n        createField(rs);\n      }\n    }\n  }\n catch (  SQLException e) {\n    throw new DBException(e,sql);\n  }\n finally {\n    DB.close(rs,pstmt);\n    rs=null;\n    pstmt=null;\n  }\n  if (m_mFields.size() != m_mFields2.size() || m_mFields.size() != m_vEditors.size() || m_mFields2.size() != m_vEditors2.size())   log.log(Level.SEVERE,\"View & Model vector size is different\");\n  if (hasFields) {\n    if (MODE == MODE_VERTICAL) {\n      gbc.gridy=m_line++;\n      centerPanel.add(Box.createVerticalStrut(10),gbc);\n      gbc.gridx=3;\n      centerPanel.add(Box.createHorizontalStrut(12),gbc);\n    }\n    dynamicDisplay();\n  }\n else   dispose();\n  return hasFields;\n}\n", "public static Smartsheet createDefaultGovAccountClient(String accessToken) {\n        SmartsheetImpl smartsheet = new SmartsheetImpl(GOV_BASE_URI, accessToken);\n        return smartsheet;\n    }", "public static IOFileFilter magicNumberFileFilter ( String magicNumber , long offset ) { return new MagicNumberFileFilter ( magicNumber , offset ) ; }", "boolean isAfterLast ( ) throws ParserException ;", "public void querySchema() {\n\n    ResultSet results =\n        session.execute(\n            \"SELECT * FROM simplex.playlists \"\n                + \"WHERE id = 2cc9ccb7-6221-4ccb-8387-f22b6a1b354d;\");\n\n    System.out.printf(\"%-30s\\t%-20s\\t%-20s%n\", \"title\", \"album\", \"artist\");\n    System.out.println(\n        \"-------------------------------+-----------------------+--------------------\");\n\n    for (Row row : results) {\n\n      System.out.printf(\n          \"%-30s\\t%-20s\\t%-20s%n\",\n          row.getString(\"title\"), row.getString(\"album\"), row.getString(\"artist\"));\n    }\n  }", "public static boolean[] convertStringToBooleanArr(String noDictionaryColMapping){\n  String[] splittedValue=null != noDictionaryColMapping ? noDictionaryColMapping.split(CarbonCommonConstants.COMA_SPC_CHARACTER) : new String[0];\n  boolean[] noDictionaryMapping=new boolean[splittedValue.length];\n  int index=0;\n  for (  String str : splittedValue) {\n    noDictionaryMapping[index++]=Boolean.parseBoolean(str);\n  }\n  return noDictionaryMapping;\n}\n", "public RenameTypeParameterProcessor(ITypeParameter parameter){\n  fTypeParameter=parameter;\n  if (parameter != null)   setNewElementName(parameter.getElementName());\n}\n", "\t\tpublic void itemStateChanged(ItemEvent e) {\n\t\t\tupdatePreviewBorder();\n\t\t}\n", "\tprivate void registerBundles(String... entityClasses) {\n\t\tfor (String className : entityClasses) {\n\t\t\tClass<?> clazz;\n\t\t\ttry {\n\t\t\t\tclazz = Class.forName(className);\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tlog.error(e, \"error.core.plugin.class_not_found\", className);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tPlugin plug = clazz.getAnnotation(Plugin.class);\n\t\t\tPluginType type = plug.type();\n\t\t\t\n//\t\t\tSet<String> val = this.pluginTypeMap.get(type);\n//\t\t\tif (null != val) {\n//\t\t\t\t\n//\t\t\t}\n\t\t\tthis.pluginTypeMap.put(type, className);\n\t\t\t\n//\t\t\tStringTokenizer st = new StringTokenizer(bundles, \"|\");\n//\t\t     while (st.hasMoreTokens()) {\n//\t\t    \t registerBundle(st.nextToken());\n//\t\t     }\n\t\t}\n\t}\n", "\tfinal private String formatNF(double x) {\n\t\t// \"<=\" catches -0.0000000000000005\n\t\t// should be rounded to -0.000000000000001 (15 d.p.)\n\t\t// but nf.format(x) returns \"-0\" \n\t\tif (-PRINT_PRECISION / 2 <= x && x < PRINT_PRECISION / 2) {\n\t\t\t// avoid output of \"-0\" for eg -0.0004\n\t\t\treturn \"0\";\n\t\t} else {\n\t\t\t// standard case\n\t\t\treturn nf.format(x);\n\t\t}\n\t}\n", "\tpublic void apply() {\n//\t\tSystem.out.println(\"apply\");\n\t\tGL gl = sgGlobals.gl;\n\t\t\n\t\tgl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_AMBIENT, m_ambient, 0);\n\t\tgl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_DIFFUSE, m_diffuse, 0);\n\t\tgl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_SPECULAR, m_specular, 0);\n\t\tgl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_EMISSION, m_emission, 0);\n\t\tgl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_SHININESS, m_shininess, 0);\n\t\t\n\t}\n", "@Override public int[] executeBatch() throws SQLException {\n  try {\n    int id=getNextId(TraceObject.PREPARED_STATEMENT);\n    debugCodeCall(\"executeBatch\");\n    if (batchParameters == null) {\n      batchParameters=New.arrayList();\n    }\n    batchIdentities=New.arrayList();\n    int size=batchParameters.size();\n    int[] result=new int[size];\n    boolean error=false;\n    SQLException next=null;\n    checkClosedForWrite();\n    try {\n      for (int i=0; i < size; i++) {\n        Value[] set=batchParameters.get(i);\n        ArrayList<? extends ParameterInterface> parameters=command.getParameters();\n        for (int j=0; j < set.length; j++) {\n          Value value=set[j];\n          ParameterInterface param=parameters.get(j);\n          param.setValue(value,false);\n        }\n        try {\n          result[i]=executeUpdateInternal();\n          ResultSet rs=conn.getGeneratedKeys(this,id);\n          while (rs.next()) {\n            batchIdentities.add(rs.getObject(1));\n          }\n        }\n catch (        Exception re) {\n          SQLException e=logAndConvert(re);\n          if (next == null) {\n            next=e;\n          }\n else {\n            e.setNextException(next);\n            next=e;\n          }\n          result[i]=Statement.EXECUTE_FAILED;\n          error=true;\n        }\n      }\n      batchParameters=null;\n      if (error) {\n        JdbcBatchUpdateException e=new JdbcBatchUpdateException(next,result);\n        throw e;\n      }\n      return result;\n    }\n  finally {\n      afterWriting();\n    }\n  }\n catch (  Exception e) {\n    throw logAndConvert(e);\n  }\n}\n", "public static void copy(\n      InputStream inputStream, OutputStream outputStream, boolean closeInputStream)\n      throws IOException {\n    try {\n      ByteStreams.copy(inputStream, outputStream);\n    } finally {\n      if (closeInputStream) {\n        inputStream.close();\n      }\n    }\n  }", "\tprivate void registerMessageTypes() {\n\t\t// register\n\t\tIMessageProcessor msgProc = commFacade.getMessageProcessor();\n\t\tmsgProc.registerMessageHandler(ChatMessage.class, this);\n\t\tmsgProc.registerMessageHandler(KnownHostsMessage.class, this);\n\t\tmsgProc.registerMessageHandler(UDPPing.class, this);\n\t\tmsgProc.registerMessageHandler(UDPPong.class, this);\n\t\tmsgProc.registerMessageHandler(StayAliveMessage.class, this);\n\t\t\n\t\t// set ping and pong to high priority\n\t\tmsgProc.setHighPriorityMessageType(UDPPing.class);\n\t\tmsgProc.setHighPriorityMessageType(UDPPong.class);\n\t}\n", "public boolean isSelfReference(){\n  return _scheme == null && _authority == null && _query == null && _path.length() == 0;\n}\n", "@Override\n    public UpdateRoleDescriptionResult updateRoleDescription(UpdateRoleDescriptionRequest request) {\n        request = beforeClientExecution(request);\n        return executeUpdateRoleDescription(request);\n    }", "public PlaDirection(double p_angle_rad){\n  this((long)(Math.cos(p_angle_rad) * 10000),(long)(Math.sin(p_angle_rad) * 10000),false);\n}\n", "    public String getAdapterVersion() {\n        log.trace(\"ENTER: getAdapterVersion()\");\n        checkSetup();\n        log.trace(\"EXIT: getAdapterVersion\");\n\n        return adapterVersion;\n    }\n", "    public Properties getProperties(File propertyFile) throws BuildException {\n        Properties properties = new Properties();\n\n        try {\n            properties.load(new FileInputStream(propertyFile));\n        } catch (FileNotFoundException e) {\n            String message = \"Property file (\" + propertyFile.getPath()\n                + \") not found.\";\n            throw new BuildException(message);\n        } catch (IOException e) {\n            String message = \"Property file (\" + propertyFile.getPath()\n                + \") cannot be loaded.\";\n            throw new BuildException(message);\n        }\n\n        return properties;\n    }\n", "    public int addFillStyle( FillStyle fillStyle ) {\n        return getShapeStyles().addFillStyle(fillStyle);\n    }\n", "public void removePropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){\n  pcSupport.removePropertyChangeListener(propertyName,in_pcl);\n}\n", "public static SwitchDateTimeDialogFragment newInstance(String label,String positiveButton,String negativeButton){\n  SwitchDateTimeDialogFragment switchDateTimeDialogFragment=new SwitchDateTimeDialogFragment();\n  Bundle args=new Bundle();\n  args.putString(TAG_LABEL,label);\n  args.putString(TAG_POSITIVE_BUTTON,positiveButton);\n  args.putString(TAG_NEGATIVE_BUTTON,negativeButton);\n  switchDateTimeDialogFragment.setArguments(args);\n  return switchDateTimeDialogFragment;\n}\n", "public org.tensorflow.framework.TensorSliceProto.ExtentOrBuilder getExtentOrBuilder(\n      int index) {\n    return extent_.get(index);\n  }", "  public void stateChanged(final boolean bConnected) {\n    Runnable runner = new java.lang.Runnable() {\n      public void run() {\n        jButtonDialHangup.setEnabled(bConnected);\n        jButtonConnect.setText(bConnected ? \"Disconnect\" : \"Connect\");\n        if (!bConnected) {\n          jComboBoxConnections.removeAllItems();\n          jComboBoxConnections.setEnabled(false);\n          jButtonDialHangup.setText(\"Dial\");\n        }\n      }\n    };\n    SwingUtilities.invokeLater(runner);\n    if (bConnected) {\n      m_masqclient.send(MasqClient.LIST);\n    }\n  }\n", "    private void checkTreeItemsValid(DefaultMutableTreeNode node) {\n\n        for (Enumeration childEnum = node.children(); childEnum\n                .hasMoreElements();) {\n            Object child = childEnum.nextElement();\n            if (child instanceof DefaultMutableTreeNode) {\n                DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) child;\n                Object item = childNode.getUserObject();\n                if (item instanceof JHTreeItem) {\n                    JHTreeItem jhItem = (JHTreeItem) item;\n                    jhItem.checkTargetValid();\n                    if (fieldImageTargetAllowed)\n                        jhItem.checkImageValid();\n                    if (!childNode.isLeaf())\n                        checkTreeItemsValid(childNode);\n                }\n            }\n\n        }\n\n        return;\n\n    }\n", "public void clip ( Path s ) { g . clipPath ( s ) ; }", "public static double [ ] [ ] convertMatrix ( int [ ] [ ] input ) { double [ ] [ ] outputArray = new double [ input . length ] [ ] ; for ( int i = NUM_ ; i < input . length ; i ++ ) { outputArray [ i ] = new double [ input [ i ] . length ] ; for ( int j = ", "public static Phrase from(Resources r, @StringRes int patternResourceId) {\n    return from(r.getText(patternResourceId));\n  }", "public static void traverse ( final File directory , final IDirectoryTraversalCallback callback ) { traverse ( directory , callback , BOOL_ ) ; }", "public int findRowIndex(String value,String columnName){\n  return findRowIndex(value,getColumnIndex(columnName));\n}", "protected void validateNoFilesOnLargeDir() throws Exception {\n  validateNoFilesOnLargeDir(getLargeMessagesDir(),0);\n}\n", "\tstatic public void assertNull(String message, Object object) {\n\t\tassert(message, object == null); \n\t}\n", "\t public String createId(SubnodeConfiguration strategyConfig) {\n\t\t // The basic form of ID is made of class + desc\n\t\t String className = strategyConfig.getString(\"/@class\");\n\t\t String desc = strategyConfig.getString(\"/@desc\");\n\t\t // Enabled not used because a strategy should not change identity when disabled\n\t\t // String enabled = strategyConfig.getString(\"/@enabled\");\n\t\t return new StringBuffer(className).append(\"#\").append(desc).toString();\n\t }\n", "public TopologicalNode(int nodeID){\n  this.nodeID=nodeID;\n  nodeName=String.valueOf(nodeID);\n}\n", "private static void sort(int[] intArray, int start, int end, boolean descending) {\n        if(start >= end) {\n            return ;\n        }\n\n        int pivot = 0;\n        \n        if(descending) {\n            pivot = Quicksort.partitionDescending(intArray, start, end);\n        }\n        else {\n            pivot = Quicksort.partition(intArray, start, end);\n        }\n        \n        Quicksort.sort(intArray, start, pivot - 1, descending);\n        Quicksort.sort(intArray, pivot + 1, end, descending);   \n    }", "public static String validateAgainstXSD(final StreamSource streamSource){\n  try {\n    if (schema == null) {\n      schema=getSchema();\n    }\n    final Validator validator=schema.newValidator();\n    validator.validate(streamSource);\n    return StringUtils.EMPTY;\n  }\n catch (  Exception e) {\n    LOG.warn(\"Error during the XML schema validation!\",e);\n    return e.getMessage();\n  }\n}\n", "public static void\nsignMessage(Message message, KEYRecord key, PrivateKey privkey,\n\t    SIGRecord previous) throws DNSSEC.DNSSECException\n{\n\t\n\tint validity = Options.intValue(\"sig0validity\");\n\tif (validity < 0)\n\t\tvalidity = VALIDITY;\n\n\tlong now = System.currentTimeMillis();\n\tDate timeSigned = new Date(now);\n\tDate timeExpires = new Date(now + validity * 1000);\n\n\tSIGRecord sig =  DNSSEC.signMessage(message, previous, key, privkey,\n\t\t\t\t\t    timeSigned, timeExpires);\n\t\n\tmessage.addRecord(sig, Section.ADDITIONAL);\n}", "public void addAnchoredRule(AnchoredRule rule){\n  inputRules.add(rule);\n}\n", "\tpublic void refreshModel(List<TodoItem> list) {\n\t\tFilterableListModel model = ftodolist.getContents();\n\t\tmodel.clear();\n\n\t\tfor (TodoItem item : list) {\n\t\t\tmodel.addElement(item);\n\t\t}\n\t}\n", "public void deleteStorageAccount(String resourceGroupName, String accountName, String storageAccountName) {\n        deleteStorageAccountWithServiceResponseAsync(resourceGroupName, accountName, storageAccountName).toBlocking().single().body();\n    }", "\tpublic BookmarkList getSubListByPath(String path, String delimiter, boolean create) {\n\t\tStringTokenizer st = new StringTokenizer(path, delimiter);\n\t\tBookmarkList current_list = this;\n\t\twhile (current_list != null && st.hasMoreElements()) {\n\t\t\tString name = st.nextToken();\n\t\t\tcurrent_list = current_list.getSubListByName(name, create);\n\t\t}\n\t\treturn current_list;\n\t}\n", "private boolean crossCheckDiagonal(int startI,int centerJ,int maxCount,int originalStateCountTotal){\n  int[] stateCount=getCrossCheckStateCount();\n  int i=0;\n  while (startI >= i && centerJ >= i && image.get(centerJ - i,startI - i)) {\n    stateCount[2]++;\n    i++;\n  }\n  if (startI < i || centerJ < i) {\n    return false;\n  }\n  while (startI >= i && centerJ >= i && !image.get(centerJ - i,startI - i) && stateCount[1] <= maxCount) {\n    stateCount[1]++;\n    i++;\n  }\n  if (startI < i || centerJ < i || stateCount[1] > maxCount) {\n    return false;\n  }\n  while (startI >= i && centerJ >= i && image.get(centerJ - i,startI - i) && stateCount[0] <= maxCount) {\n    stateCount[0]++;\n    i++;\n  }\n  if (stateCount[0] > maxCount) {\n    return false;\n  }\n  int maxI=image.getHeight();\n  int maxJ=image.getWidth();\n  i=1;\n  while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i,startI + i)) {\n    stateCount[2]++;\n    i++;\n  }\n  if (startI + i >= maxI || centerJ + i >= maxJ) {\n    return false;\n  }\n  while (startI + i < maxI && centerJ + i < maxJ && !image.get(centerJ + i,startI + i) && stateCount[3] < maxCount) {\n    stateCount[3]++;\n    i++;\n  }\n  if (startI + i >= maxI || centerJ + i >= maxJ || stateCount[3] >= maxCount) {\n    return false;\n  }\n  while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i,startI + i) && stateCount[4] < maxCount) {\n    stateCount[4]++;\n    i++;\n  }\n  if (stateCount[4] >= maxCount) {\n    return false;\n  }\n  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];\n  return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal && foundPatternCross(stateCount);\n}\n", "public static void removePropertyChangeListener(Object bean, String propertyName, PropertyChangeListener listener) {\n        Assert.notNull(propertyName, \"The property name must not be null.\");\n        Assert.notNull(listener, \"The listener must not be null.\");\n        if (bean instanceof PropertyChangePublisher) {\n            ((PropertyChangePublisher)bean).removePropertyChangeListener(propertyName, listener);\n        }\n        else {\n            Class beanClass = bean.getClass();\n            Method namedPCLRemover = getNamedPCLRemover(beanClass);\n            if (namedPCLRemover == null)\n                throw new FatalBeanException(\"Could not find the bean method\"\n                        + \"/npublic void removePropertyChangeListener(String, PropertyChangeListener);/nin bean '\"\n                        + bean + \"'\");\n            try {\n                namedPCLRemover.invoke(bean, new Object[] {propertyName, listener});\n            }\n            catch (InvocationTargetException e) {\n                throw new FatalBeanException(\"Due to an InvocationTargetException we failed to remove \"\n                        + \"a named PropertyChangeListener from bean '\" + bean + \"'\", e);\n            }\n            catch (IllegalAccessException e) {\n                throw new FatalBeanException(\"Due to an IllegalAccessException we failed to remove \"\n                        + \"a named PropertyChangeListener from bean '\" + bean + \"'\", e);\n            }\n        }\n    }", "public Type cvarUpperBound(Type t) {\n        if (t.hasTag(TYPEVAR)) {\n            TypeVar v = (TypeVar) t;\n            return v.isCaptured() ? cvarUpperBound(v.bound) : v;\n        }\n        else return t;\n    }", "public void resume ( ) { setPaused ( BOOL_ ) ; }", "public static CredentialListMappingDeleter deleter(final String pathAccountSid, \n                                                       final String pathDomainSid, \n                                                       final String pathSid) {\n        return new CredentialListMappingDeleter(pathAccountSid, pathDomainSid, pathSid);\n    }", "@Override\n    public GetJobResult getJob(GetJobRequest request) {\n        request = beforeClientExecution(request);\n        return executeGetJob(request);\n    }", "public boolean insertIntoNextEmptySlot ( ) { boolean found = searchFor ( EMPTY ) ; if ( found ) { Constant flag = INUSE_CONST ; setVal ( currentPos ( ) , flag ) ; } return found ; }", "    public boolean equals(Object object) {\n        if(!(object instanceof Time))\n            return false;\n        else\n            return(this.compareTo((Time)object) == 0 ? true : false);\n    }\n", "public StatelessChunkListDataIterator ( String hQuery , SessionFactory sessionFactory , int fetchSize , int chunkSize ) { super ( hQuery , sessionFactory , fetchSize , chunkSize ) ; }", "protected void buildAbsoluteStats(String name,long value) throws InterruptedException {\n  buildAbsoluteStats(name,value,System.currentTimeMillis());\n}\n", "public void removeFile ( int num ) { analysisTargets . remove ( num ) ; isModified = BOOL_ ; }", "public static void enableAllView ( final BackEndDebuggerProvider debuggerProvider , final INaviView view ) { checkArguments ( debuggerProvider , view ) ; for ( final IDebugger debugger : debuggerProvider ) { enableAllView ( debugger . getBreakpointManager", "private PDFObject readNumber ( char start ) throws IOException { boolean neg = start == STR_ ; boolean sawdot = start == STR_ ; double dotmult = sawdot ? NUM_ : NUM_ ; double value = ( start >= STR_ && start <= STR_ ) ? start - STR_ : NUM_ ; while ( BOOL_ ) { int c = buf . get ( ) ; if ( c == STR_ ) { if ( sawdot ) { throw new PDFParseException ( STR_ ) ; } sawdot = BOOL_ ; dotmult = NUM_ ; } else if ( c >= STR_ && c <= STR_ ) { int val = c - STR_ ; if ( sawdot ) { value += val * dotmult ; dotmult *= NUM_ ; } else { value = value * NUM_ + val ; } } else { buf . position ( buf . position ( ) - NUM_ ) ; break ; } } if ( neg ) { value = - value ; } return new PDFObject ( this , PDFObject . NUMBER , new Double ( value ) ) ; }", "    public int dayLength(){\n        return dayLength;\n    }\n", "public void loadConfig ( final String path ) { try { ConfigurationReader reader = new ConfigurationReader ( path ) ; ConfigSettings settings = reader . read ( ) ; clear ( ) ; this . type = settings . type ; this . parameterMap = settings . parameterMap ; ", "@SuppressWarnings(\"unchecked\")\n    public void updateContentTree(List<CmsCategoryTreeEntry> treeEntries, List<String> selectedCategories) {\n\n        clearList();\n        if (m_categories == null) {\n            m_categories = new HashMap<String, CmsCategoryBean>();\n        }\n        if ((treeEntries != null) && !treeEntries.isEmpty()) {\n            // add the first level and children\n            for (CmsCategoryTreeEntry category : treeEntries) {\n                // set the category tree item and add to list\n                CmsTreeItem treeItem = buildTreeItem(category, selectedCategories);\n                treeItem.setTree((CmsTree<CmsTreeItem>)m_scrollList);\n                addChildren(treeItem, category.getChildren(), selectedCategories);\n                addWidgetToList(treeItem);\n                treeItem.setOpen(true, false);\n            }\n        } else {\n            showIsEmptyLabel();\n        }\n    }", "public void syntaxError(String state, String event, List<String> legalEvents, String uri, Integer line) {\n        formatter.syntaxError(state, event, legalEvents, uri, line);\n    }", "public void removeCohort(Cohort cohort, String studyId) {\n        // Sanity check\n        if (cohort == null) {\n            logger.error(\"Cohort is null.\");\n            return;\n        }\n        removeCohort(cohort.getId(), studyId);\n    }", "private static Class<?> loadFinalizer(FinalizerLoader... loaders){\n  for (  FinalizerLoader loader : loaders) {\n    Class<?> finalizer=loader.loadFinalizer();\n    if (finalizer != null) {\n      return finalizer;\n    }\n  }\n  throw new AssertionError();\n}\n", "\tpublic void addDocument(String filename) {\n\t\taddDocument(filename, null, null);\n\t}\n", "public static Rectangle scaleRectangle(Rectangle rect,float scaleFactor){\n  return new Rectangle(Math.round(rect.x * scaleFactor),Math.round(rect.y * scaleFactor),Math.round(rect.width * scaleFactor),Math.round(rect.height * scaleFactor));\n}\n", "public WriteMemoryParser ( final ClientReader clientReader ) { super ( clientReader , DebugCommandType . RESP_WRITE_MEMORY_SUCC ) ; }", "public int errorCount ( ) { if ( delegateCompiler != null && delegateCompiler != this ) return delegateCompiler . errorCount ( ) ; else { if ( werror && log . nerrors == NUM_ && log . nwarnings > NUM_ ) { log . error ( STR_ ) ; } } return log . nerrors ; ", "private CompletableFuture<MetadataResponse> metadata(MetadataRequest request) {\n    return CompletableFuture.completedFuture(MetadataResponse.ok(services.entrySet().stream()\n        .filter(entry -> Futures.get(entry.getValue()).serviceType().name().equals(request.primitiveType()))\n        .map(entry -> entry.getKey())\n        .collect(Collectors.toSet())));\n  }", "public static <T extends Comparable> WindowOver<T> min(Expression<T> expr) {\n        return new WindowOver<T>(expr.getType(), Ops.AggOps.MIN_AGG, expr);\n    }", "    public void setType(int type) {\n        if ((type == 0) ||\n                (type != (type &\n                (ACTIVE_SERVICE_RECORD | INACTIVE_SERVICE_RECORD)))) {\n            throw new IllegalArgumentException(\"bad type\");\n        }\n\n        this.type", "public CDefaultMemoryExpressionBinding ( final TargetProcessThread thread , final Memory memory ) { m_thread = thread ; m_memory = memory ; }", "    public Graph createUnconnectedClone() {\n        return createUnconnectedClone(null);\n    }\n", "  public void leaveGame() {\n    if (this.game != null) {\n      try {\n        this.game.removeGameListener(listener);\n \n        while (!KosiRMI.unexportObject(listener, false)) {\n          Thread.yield();\n        }\n      } catch (Exception e) {\n        CUtilities.handleException(e);\n      }\n    }\n  }\n", "    public void set (byte ena, int period) {\n        try {\n            sendHeader (PLAYER_MSGTYPE_CMD, 3);         /* 3 bytes payload */\n            os.writeByte (ena);                         /* enable/disable */\n            os.writeShort (period);                     /* flash period in ms */\n            os.flush ();\n        } catch (Exception e) {\n            System.err.println (\"[Blinkenlight] : Couldn't send set command request: \" + \n                    e.toString ());\n        }\n    }\n", "void invokeReadObject(Object obj,ObjectInputStream in) throws ClassNotFoundException, IOException, UnsupportedOperationException {\n  requireInitialized();\n  if (readObjectMethod != null) {\n    try {\n      readObjectMethod.invoke(obj,new Object[]{in});\n    }\n catch (    InvocationTargetException ex) {\n      Throwable th=ex.getTargetException();\n      if (th instanceof ClassNotFoundException) {\n        throw (ClassNotFoundException)th;\n      }\n else       if (th instanceof IOException) {\n        throw (IOException)th;\n      }\n else {\n        throwMiscException(th);\n      }\n    }\ncatch (    IllegalAccessException ex) {\n      throw new InternalError(ex);\n    }\n  }\n else {\n    throw new UnsupportedOperationException();\n  }\n}\n", "public static <T> List<T> asImmutable(List<T> self) {\n        return asUnmodifiable(new ArrayList<T>(self));\n    }", "public Expression<Integer> neq(int value) {\n\t\tString valueString = \"'\" + value + \"'\";\n\t\treturn new Expression<Integer>(this, Operation.neq, valueString);\n\t}", "    public boolean equals(final Object object) {\n        if (super.equals(object)) {\n            final WarpTransform2D that = (WarpTransform2D) object;\n\n            return Utilities.equals(this.warp, that.warp);\n        }\n\n        return false;\n    }\n", "    public void instantMessageReceived(final String msg, final String from) {\n        boolean isCreated = false;\n        for (int i = 0; i < imList.size(); i++) {\n            InstantMessageFrame aux = imList.get(i);\n            if (aux.getTo().equalsIgnoreCase(from)) {\n                isCreated = true;\n                aux.addResponse(msg);\n            }\n        }\n        if (!isCreated) {\n            InstantMessageFrame aux = new InstantMessageFrame(me,\n                    from, this);\n            aux.setVisible(true);\n            aux.setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);\n            imList.add(aux);\n            aux.addResponse(msg);\n        }\n    }\n", "public static double log10(double x){\n  return Math.log(x) / LOG10;\n}", "public void addRegion(InfinispanBaseRegion region) {\n\t\tallRegions.put(ByteString.fromString(region.getCache().getName()), region);\n\t}", "private static void findLayerOrder(final Object /* ModuleLayer */ layer,\n            final Set<Object> /* Set<ModuleLayer> */ layerVisited,\n            final Set<Object> /* Set<ModuleLayer> */ parentLayers,\n            final Deque<Object> /* Deque<ModuleLayer> */ layerOrderOut) {\n        if (layerVisited.add(layer)) {\n            @SuppressWarnings(\"unchecked\")\n            final List<Object> /* List<ModuleLayer> */ parents = (List<Object>) ReflectionUtils.invokeMethod(layer,\n                    \"parents\", /* throwException = */ true);\n            if (parents != null) {\n                parentLayers.addAll(parents);\n                for (final Object parent : parents) {\n                    findLayerOrder(parent, layerVisited, parentLayers, layerOrderOut);\n                }\n            }\n            layerOrderOut.push(layer);\n        }\n    }", "    public boolean isWord() {\n        return ttype == TT_WORD;\n    }\n", "\tpublic void logDebuggingData (String data) {\n\t\tif (debugLogger != null && this.isGenerateDebuggingLog() && data != null) {\n\t\t\tdebugLogger.logp(Level.INFO, \"\", \"\", data);\n\t\t\t\n\t\t\tif (logToConsole)\n\t\t\t\tSystem.out.println(data);\n\t\t}\t\n\t}\n", "@Override public void show(){\n  displayWindow.setVisible(true);\n}\n", "    private void removeTailChange() {\n        int s = changeList.size();\n        TreeChange tc = changeList.get(s - 1);\n        if (DEBUG) {\n            Debug.log(\"SUPPRESSING \" + tc);\n        }\n        root2change.remove(tc.getChangeRoot());\n        changeList.remove(s - 1);\n        if (s == 1) {\n            needsUpdate = false;\n        }\n    }\n", "\tpublic void setForkBlock(Object key, Integer value) {\n\t\tStationData sd;\n\t\tif (stationDataHM.containsKey(key)) {\n\t\t\tsd = (StationData) stationDataHM.get(key);\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t\tif (!sd.forkBlock.equals(value)) {\n\t\t\tsave = true;\n\t\t}\n\t\tsd.forkBlock = value;\n\t}\n", "private void doOutsideScores(){\n  grammar.logarithmMode();\n  lexicon.logarithmMode();\n  for (int diff=length; diff >= 1; diff--) {\n    for (int start=0; start + diff <= length; start++) {\n      int end=start + diff;\n      for (int s=0; s < numStates; s++) {\n        double oS=oScore[start][end][s];\n        if (Double.isInfinite(oS)) {\n          continue;\n        }\n        UnaryRule[] rules=grammar.getClosedViterbiUnaryRulesByParent(s);\n        for (int r=0; r < rules.length; r++) {\n          UnaryRule ur=rules[r];\n          double pS=ur.getScore(0,0);\n          double tot=oS + pS;\n          touchedRules++;\n          if (tot > oScore[start][end][ur.childState] && iScore[start][end][ur.childState] > Double.NEGATIVE_INFINITY) {\n            oScore[start][end][ur.childState]=tot;\n          }\n        }\n      }\n      for (int s=0; s < numStates; s++) {\n        BinaryRule[] rules=grammar.splitRulesWithP(s);\n        for (int r=0; r < rules.length; r++) {\n          BinaryRule br=rules[r];\n          double oS=oScore[start][end][br.parentState];\n          if (Double.isInfinite(oS)) {\n            continue;\n          }\n          int min1=narrowRExtent[start][br.leftChildState];\n          if (end < min1) {\n            continue;\n          }\n          int max1=narrowLExtent[end][br.rightChildState];\n          if (max1 < min1) {\n            continue;\n          }\n          int min=min1;\n          int max=max1;\n          if (max - min > 2) {\n            int min2=wideLExtent[end][br.rightChildState];\n            min=(min1 > min2 ? min1 : min2);\n            if (max1 < min) {\n              continue;\n            }\n            int max2=wideRExtent[start][br.leftChildState];\n            max=(max1 < max2 ? max1 : max2);\n            if (max < min) {\n              continue;\n            }\n          }\n          double pS=br.getScore(0,0,0);\n          for (int split=min; split <= max; split++) {\n            double lS=iScore[start][split][br.leftChildState];\n            if (Double.isInfinite(lS)) {\n              continue;\n            }\n            double rS=iScore[split][end][br.rightChildState];\n            if (Double.isInfinite(rS)) {\n              continue;\n            }\n            double totL=pS + rS + oS;\n            touchedRules++;\n            if (totL > oScore[start][split][br.leftChildState]) {\n              oScore[start][split][br.leftChildState]=totL;\n            }\n            double totR=pS + lS + oS;\n            if (totR > oScore[split][end][br.rightChildState]) {\n              oScore[split][end][br.rightChildState]=totR;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n", "public void marshall(PutFunctionConcurrencyRequest putFunctionConcurrencyRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (putFunctionConcurrencyRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(putFunctionConcurrencyRequest.getFunctionName(), FUNCTIONNAME_BINDING);\n            protocolMarshaller.marshall(putFunctionConcurrencyRequest.getReservedConcurrentExecutions(), RESERVEDCONCURRENTEXECUTIONS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "\tpublic Alternation getAlternation() {\n\t\tif (eContainerFeatureID() != IotaPackage.CLAUSE__ALTERNATION) return null;\n\t\treturn (Alternation)eContainer();\n\t}\n", "public void goUpDir() throws IOException, ServerException {\n        try {\n            controlChannel.execute(Command.CDUP);\n            // alternative: changeDir(\"..\");\n        } catch (FTPReplyParseException rpe) {\n            throw ServerException.embedFTPReplyParseException(rpe);\n        } catch (UnexpectedReplyCodeException urce) {\n            throw ServerException.embedUnexpectedReplyCodeException(\n                                urce,\n                                \"Server refused changing current directory\");\n        }\n    }", "void changedRegisters ( Thread thread ) ;", "  public void setInfoText( String text, int column ) {\n    InfoTopicViewer.watchInfoTopic( this );\n    data.setInfoText( text, column );\n  }\n", "public Address toImagebase ( final Module module , final Address address ) { Preconditions . checkNotNull ( module , STR_ ) ; Preconditions . checkNotNull ( address , STR_ ) ; return new Address ( m_debugger . fileToMemory ( module . getNative ( ) , new U", "void resumeNow ( ) ;", "@Override public void customizePopupMenu(ResultHistoryList history,int index,JPopupMenu menu){\n  menu.addSeparator();\n  AbstractClassifyResultHistoryPlugin.populateMenu(ClassifyTab.this,history,index,menu);\n}\n", "    private String addMultiLineStringProperty( GMLMultiLineString mline ) {\n        Debug.debugMethodBegin( this, \"addMultiLineStringProperty\" );\n\n        Debug.debugMethodEnd();\n        return null;\n    }\n", "public void cancel(String tag){\n  List<NotificationEntry> entries=mCenter.getEntries(ID,tag);\n  if (entries != null && !entries.isEmpty()) {\n    for (    NotificationEntry entry : entries) {\n      cancel(entry);\n    }\n  }\n}\n", "private final boolean checkByte ( byte in , Condition condition ) { String value = condition . getValue ( ) ; byte v ; try { v = Byte . parseByte ( value ) ; } catch ( NumberFormatException e ) { return BOOL_ ; } switch ( condition . getConditionType ( ) ) { case EQUALS : { return ( in == v ) ; } case NOT_EQUALS : { return ( in != v ) ; } case GREATER : { return ( in > v ) ; } case GREATER_EQ : { return ( in >= v ) ; } case LESS : { return ( in < v ) ; } case LESS_EQ : { return ( in <= v ) ; } default : { return BOOL_ ; } } }", "  public String numberLiteralsTipText() {\n    \n    return \"Maximum number of literals in a rule.\";\n  }\n", "public Matrix4x3d identity() {\n        if ((properties & PROPERTY_IDENTITY) != 0)\n            return this;\n        m00 = 1.0;\n        m01 = 0.0;\n        m02 = 0.0;\n        m10 = 0.0;\n        m11 = 1.0;\n        m12 = 0.0;\n        m20 = 0.0;\n        m21 = 0.0;\n        m22 = 1.0;\n        m30 = 0.0;\n        m31 = 0.0;\n        m32 = 0.0;\n        properties = PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL;\n        return this;\n    }", "public static JasperDesign getJasperDesign(final Instance _instance)\n        throws EFapsException\n    {\n        final Checkout checkout = new Checkout(_instance);\n        final InputStream source = checkout.execute();\n        JasperDesign jasperDesign = null;\n        try {\n            JasperUtil.LOG.debug(\"Loading JasperDesign for :{}\", _instance);\n            final DefaultJasperReportsContext reportContext = DefaultJasperReportsContext.getInstance();\n            final JRXmlLoader loader = new JRXmlLoader(reportContext,\n                            JRXmlDigesterFactory.createDigester(reportContext));\n            jasperDesign = loader.loadXML(source);\n        } catch (final ParserConfigurationException e) {\n            throw new EFapsException(JasperUtil.class, \"getJasperDesign\", e);\n        } catch (final SAXException e) {\n            throw new EFapsException(JasperUtil.class, \"getJasperDesign\", e);\n        } catch (final JRException e) {\n            throw new EFapsException(JasperUtil.class, \"getJasperDesign\", e);\n        }\n        return jasperDesign;\n    }", "public RowBuilder int32(String name)\n  {\n    ColumnInt32 column = new ColumnInt32(_columns.size(), name, _offset);\n    \n    _offset += column.length();\n    _columns.add(column);\n    \n    return this;\n  }", "\tprivate void initAccounts() {\n\t\taccounts = new HashMap<String, Account>();\n\t\t\n\t\tString[] accountResponse = Connection.getInstance().readArray(UserConnectionThread.ACCOUNT_GET_ALL+\"\");\n\t\t\n\t\tfor (String a : accountResponse) {\n\t\t\tStringTokenizer strTok = new StringTokenizer(a, ConnectionThread.SPLIT);\n\t\t\tString sym = strTok.nextToken();\n\t\t\tfloat amount = new Float(strTok.nextToken());\n\t\t\tlong time = new Long(strTok.nextToken());\n\t\t\taccounts.put(sym, new Account(sym, amount, time));\n\t\t}\n\t}\n", "protected void loadGrams(DataInputStream input) throws IOException {\n    gramSet = new HashSet();\n    try {\n      while(true) {\n        int gramLength=input.readInt();\n      \n        int[] words = new int[gramLength];\n        for (int wi=0;wi<gramLength;wi++) {\n          words[wi]=input.readInt();\n        }\n        gramSet.add(new NGram(words));\n      }\n    }\n    catch(EOFException e) {\n      \n    }\n  }", "private static boolean trustGetContextClassLoader ( Thread t ) { Class cl = t . getClass ( ) ; if ( cl == Thread . class ) { return BOOL_ ; } Boolean b ; synchronized ( trustGetCCL ) { b = ( Boolean ) trustGetCCL . get ( cl ) ; } if ( b == null ) { b = trustGetContextClassLoader0 ( cl ) ; synchronized ( trustGetCCL ) { trustGetCCL . put ( cl , b ) ; } } return b . booleanValue ( ) ; }", "public MethodNode addSyntheticMethod ( String name , int modifiers , ClassNode returnType , Parameter [ ] parameters , ClassNode [ ] exceptions , Statement code ) { MethodNode answer = addMethod ( name , modifiers | ACC_SYNTHETIC , returnType , parameters", "private void putFieldsToDefaultValue(DataSupport baseObj,ContentValues values){\n  String fieldName=null;\n  try {\n    DataSupport emptyModel=getEmptyModel(baseObj);\n    Class<?> emptyModelClass=emptyModel.getClass();\n    for (    String name : baseObj.getFieldsToSetToDefault()) {\n      if (!isIdColumn(name)) {\n        fieldName=name;\n        Field field=emptyModelClass.getDeclaredField(fieldName);\n        putContentValues(emptyModel,field,values);\n      }\n    }\n  }\n catch (  NoSuchFieldException e) {\n    throw new DataSupportException(DataSupportException.noSuchFieldExceptioin(baseObj.getClassName(),fieldName));\n  }\ncatch (  Exception e) {\n    throw new DataSupportException(e.getMessage());\n  }\n}\n", "public static File createTempFile(final String ext) {\r\n\t\ttry {\r\n\t\t\tFile file;\r\n\t\t\tfile = File.createTempFile(\"jk-\", \".\" + ext);\r\n\t\t\treturn file;\r\n\t\t} catch (IOException e) {\r\n\t\t\tJK.throww(e);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}", "public void visitTypeVariable ( String name ) { }", "@BetaApi\n  public final ListLicensesPagedResponse listLicenses(ProjectName project) {\n    ListLicensesHttpRequest request =\n        ListLicensesHttpRequest.newBuilder()\n            .setProject(project == null ? null : project.toString())\n            .build();\n    return listLicenses(request);\n  }", "public Map<String,List<String>> pageParametesAsMultiMap(final PageParameters pageParameters){\n  final Map<String,List<String>> map=new LinkedHashMap<String,List<String>>();\n  if (pageParameters != null) {\n    for (    String key : pageParameters.getNamedKeys()) {\n      if (!commandConfig.isInternalCommandKey(key)) {\n        final List<String> vals=new ArrayList<String>();\n        for (        final StringValue value : pageParameters.getValues(key)) {\n          vals.add(value.toString());\n        }\n        map.put(key,vals);\n      }\n    }\n  }\n  return map;\n}\n", "public void fatalError ( String msg ) { Logger . e ( STR_ + msg ) ; System . exit ( NUM_ ) ; }", "public static JsonValue newEmptyRequirements ( ) { return emptyJson ( ) ; }", "void disconnectSubTask(SubProgressionModel subTask, double value, boolean overwriteComment) {\n\t\tif (this.child == subTask) {\n\t\t\tif (overwriteComment) {\n\t\t\t\tfinal String cmt = subTask.getComment();\n\t\t\t\tif (cmt != null) {\n\t\t\t\t\tthis.comment = cmt;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.child = null;\n\t\t\tsetProperties(value, this.min, this.max, this.isAdjusting, this.comment, overwriteComment, true, false, null);\n\t\t}\n\t}", "public static double guessDate(String s){\n  int i=s.length();\n  char c;\n  do {\n    i--;\n    c=s.charAt(i);\n  }\n while (i >= 0 && (Character.isDigit(c) || c == '.'));\n  if (i == s.length()) {\n    return 0.0;\n  }\n  return Double.parseDouble(s.substring(i + 1));\n}\n", "void dispose(){\n  if (popup != null) {\n    popup.removeAll();\n  }\n  popup=null;\n  removeLinkedPoint();\n}\n", "public boolean addBusItinerary(BusItinerary busItinerary) {\n\t\tif (busItinerary == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.itineraries.indexOf(busItinerary) != -1) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.itineraries.add(busItinerary)) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal boolean isValidItinerary = busItinerary.isValidPrimitive();\n\t\tbusItinerary.setEventFirable(isEventFirable());\n\t\tbusItinerary.setContainer(this);\n\t\tif (isEventFirable()) {\n\t\t\tfireShapeChanged(new BusChangeEvent(this,\n\t\t\t\t\tBusChangeEventType.ITINERARY_ADDED,\n\t\t\t\t\tbusItinerary,\n\t\t\t\t\tthis.itineraries.size() - 1,\n\t\t\t\t\t\"shape\", //$NON-NLS-1$\n\t\t\t\t\tnull,\n\t\t\t\t\tnull));\n\t\t\tif (!isValidItinerary) {\n\t\t\t\trevalidate();\n\t\t\t} else {\n\t\t\t\tcheckPrimitiveValidity();\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}", "private static int extractNonMatchingFields(Tuple<Type.Field> lhsFields, Tuple<Type.Field> rhsFields,\n\t\t\tType.Field[] result, int index) {\n\t\touter: for (int i = 0; i != lhsFields.size(); ++i) {\n\t\t\tfor (int j = 0; j != rhsFields.size(); ++j) {\n\t\t\t\tType.Field lhsField = lhsFields.get(i);\n\t\t\t\tType.Field rhsField = rhsFields.get(j);\n\t\t\t\tIdentifier lhsFieldName = lhsField.getName();\n\t\t\t\tIdentifier rhsFieldName = rhsField.getName();\n\t\t\t\tif (lhsFieldName.equals(rhsFieldName)) {\n\t\t\t\t\t// This is a matching field. Therefore, continue on to the\n\t\t\t\t\t// next lhs field\n\t\t\t\t\tcontinue outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult[index++] = lhsFields.get(i);\n\t\t}\n\t\treturn index;\n\t}", "\tpublic boolean hasSuperclass(ITypeBinding binding, String superClass) {\n\t\tif (binding.getSuperclass() == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (binding.getSuperclass().getQualifiedName().equals(superClass)) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn hasSuperclass(binding.getSuperclass(), superClass);\n\t}\n", "void destroy ( ) ;", "    private void signalFileChange(String location, int lineNumber, char flag) {\n        buf.append(\"# \").append(lineNumber).append(' ').append(location).append(' ').append(flag).append(LF);\n    }\n", "public static String toUpperCaseFirstOne(String s) {\n\t\tif (Character.isUpperCase(s.charAt(0)))\n\t\t\treturn s;\n\t\telse\n\t\t\treturn (new StringBuilder()).append(Character.toUpperCase(s.charAt(0))).append(s.substring(1)).toString();\n\t}", "\tprivate String wordWrapOneLine(String input, int width) {\n\t    input = input.trim();\n\t    if (input.length() <= width) {\n\t        return input;\n\t    } else {\n\t        int lastSpaceIndex = input.lastIndexOf(\" \", width);\n\t        if (lastSpaceIndex == -1)\n\t            lastSpaceIndex = width;\n\t        \n\t        String output1 = input.substring(0, lastSpaceIndex).trim() + \"\\n\";\n\t        String output2 = input.substring(lastSpaceIndex).trim();\n\t        input = null;\n\t        return output1 + wordWrapOneLine(output2, width);\n\t    }\n\t}\n", "\tpublic ParserConfig getParserFromID(String id){\n\t\tfor (ParserConfig config : parserConfigs) {\n\t\t\tif(config.getId().equals(id))\n\t\t\t\treturn config;\n\t\t}\n\t\treturn null;\n\t}\n", "public static File lookingFileFromPath ( IPath path ) { if ( path == null ) { throw new IllegalStateException ( STR_ ) ; } if ( path . toFile ( ) . exists ( ) ) { return path . toFile ( ) ; } IWorkspaceRoot root = ResourcesPlugin . getWorkspace ( ) . getR", "protected synchronized void execute ( boolean synchronous ) { if ( thread != null ) { synchronized ( statusLock ) { statusLock . notifyAll ( ) ; } return ; } else if ( isFinished ( ) ) { return ; } if ( synchronous ) { thread = Thread . currentThread ( ) ; run ( ) ; } else { thread = new Thread ( this ) ; thread . setName ( getClass ( ) . getName ( ) ) ; thread . start ( ) ; } }", "public UUID toUuid() {\n        if (mValue.length != 16) {\n            throw new UnsupportedOperationException(\"Only Identifiers backed by a byte array with length of exactly 16 can be UUIDs.\");\n        }\n        LongBuffer buf = ByteBuffer.wrap(mValue).asLongBuffer();\n        return new UUID(buf.get(), buf.get());\n    }", "LWComponentPeer<?,?> findPeerAt(final int x,final int y){\n  final Rectangle r=getBounds();\n  final Region sh=getRegion();\n  final boolean found=isVisible() && sh.contains(x - r.x,y - r.y);\n  return found ? this : null;\n}\n", "    public void mapToBean(LeadVO leadVO, LeadDetailForm leadDetailForm) {\n        mapper.mapToBean(leadVO, leadDetailForm);\n    }\n", "@Override public int compareTo(Edge other){\n  int cmp=super.compareTo(other);\n  if (cmp != 0) {\n    return cmp;\n  }\n  return type - other.type;\n}", "    public void assertTextNotPresent(String text) {\n        if (dialog.isTextInResponse(text))\n            Assert.fail(\"Text found in response when not expected: [\" + text + \"]\");\n    }\n", "public static boolean verify(String host, String username, String password, int port) throws SMTPException {\n\ttry {\n\t    return _verify(host, username, password, port);\n\t}\n\tcatch (MessagingException e) {\n\n\t    // check user\n\t    if (!StringUtil.isEmpty(username)) {\n\t\ttry {\n\t\t    _verify(host, null, null, port);\n\t\t    throw new SMTPExceptionImpl(\"can't connect to mail server, authentication settings are invalid\");\n\t\t}\n\t\tcatch (MessagingException e1) {\n\n\t\t}\n\t    }\n\t    // check port\n\t    if (port > 0 && port != 25) {\n\t\ttry {\n\t\t    _verify(host, null, null, 25);\n\t\t    throw new SMTPExceptionImpl(\"can't connect to mail server, port definition is invalid\");\n\t\t}\n\t\tcatch (MessagingException e1) {}\n\t    }\n\n\t    throw new SMTPExceptionImpl(\"can't connect to mail server\");\n\t}\n    }", "public byte[] read(long record) throws IOException {\n        // (+ recordSize) allows skipping metadata record\n        long pos = record * recordSize + recordSize;\n        if (pos >= size) {\n            final String fmt = \"bad seek to position: %d (size is %d)\";\n            final String msg = format(fmt, pos, size);\n            throw new InvalidArgument(msg);\n        }\n\n        raf.seek(pos);\n        byte[] ret = new byte[recordSize];\n        int read = raf.read(ret);\n\n        if (read != recordSize) {\n            final String fmt = \"read %d bytes, but expected %d\";\n            final String msg = format(fmt, read, recordSize);\n            throw new InvalidArgument(msg);\n        }\n        return ret;\n    }", "public List<String> getExtraFieldNames()\n    {\n        List<String> result = new ArrayList<String>();\n\n        for (Method method : getExtraFieldMethods())\n        {\n            ExtraField extraField = method.getAnnotation( ExtraField.class );\n            result.add( extraField.value() );\n        }\n\n        return result;\n    }", "    public Vector getAllFeed(int channel) throws HomeException {\n        SessionFactory hfactory = null;\n\n        try {\n            hfactory = (SessionFactory) ctx.lookup(hibernateSessionFactory);\n\n            String repositoryName = context.getCallerPrincipal().getName();\n\n            return manager.getAllFeed(hfactory.openSession(), repositoryName,\n                channel);\n        } catch (NamingException e) {\n            throw new HomeException(e);\n        } catch (Exception e) {\n            if (e instanceof HomeException) {\n                throw (HomeException) e;\n            }\n\n            throw new HomeException(e);\n        } finally {\n        }\n    }\n", "public static org.opcfoundation.ua.transport.security.KeyPair renewApplicationInstanceCertificate(String commonName,String organisation,String applicationUri,int validityTime,org.opcfoundation.ua.transport.security.KeyPair oldKeys,String... hostNames) throws IOException, IllegalStateException, GeneralSecurityException {\n  return renewApplicationInstanceCertificate(commonName,organisation,applicationUri,validityTime,oldKeys,null,hostNames);\n}\n", "public Category ( Wikipedia wiki , String pName ) throws WikiApiException { if ( pName == null || pName . length ( ) == NUM_ ) { throw new WikiPageNotFoundException ( ) ; } this . wiki = wiki ; catDAO = new CategoryDAO ( wiki ) ; Title catTitle = new Title ( pName ) ; createCategory ( catTitle ) ; }", "protected long initRankEnd(BaseRow row) throws Exception {\n\t\tif (isConstantRankEnd) {\n\t\t\treturn rankEnd;\n\t\t} else {\n\t\t\tLong rankEndValue = rankEndState.value();\n\t\t\tlong curRankEnd = rankEndFetcher.apply(row);\n\t\t\tif (rankEndValue == null) {\n\t\t\t\trankEnd = curRankEnd;\n\t\t\t\trankEndState.update(rankEnd);\n\t\t\t\treturn rankEnd;\n\t\t\t} else {\n\t\t\t\trankEnd = rankEndValue;\n\t\t\t\tif (rankEnd != curRankEnd) {\n\t\t\t\t\t// increment the invalid counter when the current rank end not equal to previous rank end\n\t\t\t\t\tinvalidCounter.inc();\n\t\t\t\t}\n\t\t\t\treturn rankEnd;\n\t\t\t}\n\t\t}\n\t}", "public static linkset_binding get(nitro_service service, String id) throws Exception{\n\t\tlinkset_binding obj = new linkset_binding();\n\t\tobj.set_id(id);\n\t\tlinkset_binding response = (linkset_binding) obj.get_resource(service);\n\t\treturn response;\n\t}", "public static CDatabaseManager instance ( ) { return m_instance ; }", "public void addFilterCode(String name,String code){\n  this.filterCode=new SourceCode(name,code);\n  newSourceCode(name,code);\n}\n", "    public Process submitAsynchJob(IProcessData processData, String submissionKey) throws SubmitJobException {\n        //logger.debug(getClass().getSimpleName() + \" Process Data : \" + processData);\n        try {\n            init(processData);\n            return submitAsynchronousJob(submissionKey);\n        }\n        catch (Exception e) {\n            throw new SubmitJobException(e);\n        }\n    }\n", "    public double calculateCost(Session session) {\n        double cost = 1;\n        boolean invalidPlan = false;\n        int level = 1;\n        for (TableFilter tableFilter : allFilters) {\n            PlanItem item = tableFilter.getBestPlanItem(session, level++);\n            planItems.put(tableFilter, item);\n            cost += cost * item.cost;\n            setEvaluatable(tableFilter, true);\n            Expression on = tableFilter.getJoinCondition();\n            if (on != null) {\n                if (!on.isEverything(ExpressionVisitor.EVALUATABLE_VISITOR)) {\n                    invalidPlan = true;\n                    break;\n                }\n            }\n        }\n        if (invalidPlan) {\n            cost = Double.POSITIVE_INFINITY;\n        }\n        for (TableFilter f : allFilters) {\n            setEvaluatable(f, false);\n        }\n        return cost;\n    }\n", "private static int calcMaxPageEntrySize(JetFormat format){\n  int pageDataSize=(format.PAGE_SIZE - (format.OFFSET_INDEX_ENTRY_MASK + format.SIZE_INDEX_ENTRY_MASK));\n  int entryMaskSize=(format.SIZE_INDEX_ENTRY_MASK * 8);\n  return Math.min(pageDataSize,entryMaskSize);\n}\n", "public int size ( ) { return map . size ( ) ; }", "public void store ( Table metadata ) { String key = generateKey ( metadata . getSchema ( ) , metadata . getName ( ) ) ; cache . put ( key , metadata ) ; }", "public void update ( DataServer ds ) { synchronized ( this ) { this . setName ( ds . getName ( ) ) ; this . setVendor ( ds . getVendor ( ) ) ; this . setClusterName ( ds . getClusterName ( ) ) ; this . notifyAll ( ) ; } }", "@Override\n    public synchronized boolean delete(T dto) throws Exception {\n        int confirm = db.delete(transformer.getTableName(), transformer.getWhereClause(dto), null);\n        return confirm!=0;\n    }", "\tpublic void partAdded(PartAddedEvent event) {\n\t\tadd(event);\n\t}\n", "    public void shutdown() {\n        processorPoolManager.shutdown();\n    }\n", "\tprivate Panel getButtonPanel(final String labelText, final Button button) {\n\t\tPanel panel = new PortraitPagePanel();\n\t\tpanel.setBorder(Factory.getInstance().getSNESBorder());\n\t\tPanel top = new LandscapePagePanel();\n\t\tLabel label = new Label(Factory.getInstance().getFontH2(),\n\t\t\t\tlabelText);\n\t\ttop.addChild(label);\n\t\ttop.addChild(Factory.getInstance().getBuffer(\n\t\t\t\tbutton.getPreferredSize().width, 1));\n\t\tpanel.addChild(top);\n\n\t\tPanel bottom = new LandscapePagePanel();\n\t\tbottom.addChild(Factory.getInstance().getBuffer(\n\t\t\t\tlabel.getPreferredSize().width, 1));\n\t\tbottom.addChild(button);\n\t\tpanel.addChild(bottom);\n\t\treturn panel;\n\t}\n", "public void autoCommitIfCluster(){\n  if (autoCommit && cluster) {\n    for (int i=0, count=0; i < transferList.size(); i++) {\n      Transfer transfer=transferList.get(i);\n      try {\n        traceOperation(\"COMMAND_COMMIT\",0);\n        transfer.writeInt(SessionRemote.COMMAND_COMMIT);\n        done(transfer);\n      }\n catch (      IOException e) {\n        removeServer(e,i--,++count);\n      }\n    }\n  }\n}\n", "public AddReviewerResult ( String input ) { this . input = input ; }", "    public void updateIndicators() {\n        long date = quoteHistory.getLastPriceBar().getDate();\n\n        // calculate fast and slow EMAs\n        EMA fastEMAInd = new EMA(date, quoteHistory, maFastLength);\n        EMA slowEMAInd = new EMA(date, quoteHistory, maSlowLength);\n        fastEMA = fastEMAInd.calculate();\n        slowEMA = slowEMAInd.calculate();\n\n        fastEMAHistory.addIndicator(fastEMAInd);\n        slowEMAHistory.addIndicator(slowEMAInd);\n    }\n", "protected void onFinish(){\n  mErrorListener=null;\n}\n", "    public void save( Enumeration entries, String fileName ) throws Exception\n    { regPopulator.save( entries, fileName ); }\n", "public static boolean isSunday(int column, int firstDayOfWeek) {\n        return (firstDayOfWeek == Time.SUNDAY && column == 0)\n                || (firstDayOfWeek == Time.MONDAY && column == 6)\n                || (firstDayOfWeek == Time.SATURDAY && column == 1);\n    }", "public boolean canUndo ( ) { return m_undoIndex >= NUM_ ; }", "public static MessageInputStream toMessageInputStream ( InputStream in ) { return in instanceof MessageInputStream ? ( MessageInputStream ) in : new MessageInputStream ( in ) ; }", "boolean supportsLanguage(String language){\n  return languages.contains(language);\n}\n", "public static Boolean isAppFavorite(String apk,Set<String> appFavorites){\n  Boolean res=false;\n  if (appFavorites.contains(apk)) {\n    res=true;\n  }\n  return res;\n}\n", "public OrderedThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit){\n  this(corePoolSize,maximumPoolSize,keepAliveTime,unit,Executors.defaultThreadFactory(),null);\n}\n", "public void pressKey(final Keys keys) {\n        if (keys == null) return;\n\n        runWithRetries(() -> {\n            elementImpl.locateElement().sendKeys(keys);\n        });\n    }", "public static void openShareDialog(Context context,String title,@SuppressWarnings(\"SameParameterValue\") String uri,String shareText,String shareSubject){\n  Intent share=new Intent(Intent.ACTION_SEND);\n  share.setType(\"text/plain\");\n  share.putExtra(Intent.EXTRA_TEXT,shareText);\n  share.putExtra(Intent.EXTRA_SUBJECT,shareSubject);\n  if (!TextUtils.isEmpty(uri)) {\n    share.setType(\"image/*\");\n    share.putExtra(Intent.EXTRA_STREAM,Uri.parse(uri));\n  }\n  context.startActivity(Intent.createChooser(share,title));\n}\n", "public UIGraphicTestCase ( String name ) { super ( name ) ; }", "public CostMatrix(Reader reader) throws Exception {\n  LineNumberReader lnr=new LineNumberReader(reader);\n  String line;\n  int currentRow=-1;\n  while ((line=lnr.readLine()) != null) {\n    if (line.startsWith(\"%\")) {\n      continue;\n    }\n    StringTokenizer st=new StringTokenizer(line);\n    if (!st.hasMoreTokens()) {\n      continue;\n    }\n    if (currentRow < 0) {\n      int rows=Integer.parseInt(st.nextToken());\n      if (!st.hasMoreTokens()) {\n        throw new Exception(\"Line \" + lnr.getLineNumber() + \": expected number of columns\");\n      }\n      int cols=Integer.parseInt(st.nextToken());\n      if (rows != cols) {\n        throw new Exception(\"Trying to create a non-square cost \" + \"matrix\");\n      }\n      m_size=rows;\n      initialize();\n      currentRow++;\n      continue;\n    }\n else {\n      if (currentRow == m_size) {\n        throw new Exception(\"Line \" + lnr.getLineNumber() + \": too many rows provided\");\n      }\n      for (int i=0; i < m_size; i++) {\n        if (!st.hasMoreTokens()) {\n          throw new Exception(\"Line \" + lnr.getLineNumber() + \": too few matrix elements provided\");\n        }\n        String nextTok=st.nextToken();\n        Double val=null;\n        try {\n          val=new Double(nextTok);\n        }\n catch (        Exception ex) {\n          val=null;\n        }\n        if (val == null) {\n          setCell(currentRow,i,nextTok);\n        }\n else {\n          setCell(currentRow,i,val);\n        }\n      }\n      currentRow++;\n    }\n  }\n  if (currentRow == -1) {\n    throw new Exception(\"Line \" + lnr.getLineNumber() + \": expected number of rows\");\n  }\n else   if (currentRow != m_size) {\n    throw new Exception(\"Line \" + lnr.getLineNumber() + \": too few rows provided\");\n  }\n}\n", "public static java.lang.String valueOf(double value){\n  return Double.toString(value);\n}\n", "public static HTTPResponse delete(URL url,String username,String password,long timeout,boolean redirect,String charset,String useragent,ProxyData proxy,lucee.commons.net.http.Header[] headers) throws IOException {\n  HttpDelete delete=new HttpDelete(url.toExternalForm());\n  return _invoke(url,delete,username,password,timeout,redirect,charset,useragent,proxy,headers,null);\n}\n", "protected StringBuffer translatedReplacements (String key, StringBuffer buf)\n    {\n        MessageBundle bundle = _ctx.getMessageManager().getBundle(_bundle);\n        if (!bundle.exists(key)) {\n            return buf;\n        }\n        StringTokenizer st = new StringTokenizer(bundle.get(key), \"#\");\n        // apply the replacements to each mogrification that matches\n        while (st.hasMoreTokens()) {\n            String pattern = st.nextToken();\n            String replace = st.nextToken();\n            Matcher m = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE).matcher(buf);\n            if (m.find()) {\n                buf = new StringBuffer();\n                m.appendReplacement(buf, replace);\n                // they may match more than once\n                while (m.find()) {\n                    m.appendReplacement(buf, replace);\n                }\n                m.appendTail(buf);\n            }\n        }\n        return buf;\n    }", "private static boolean hasTies(double[] x,double[] y){\n  final HashSet<Double> values=new HashSet<Double>();\n  for (int i=0; i < x.length; i++) {\n    if (!values.add(x[i])) {\n      return true;\n    }\n  }\n  for (int i=0; i < y.length; i++) {\n    if (!values.add(y[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n", "\tprotected EObject createInitialModel() {\n\t\tEClass eClass = (EClass)msPackage.getEClassifier(initialObjectCreationPage.getInitialObjectName());\n\t\tEObject rootObject = msFactory.create(eClass);\n\t\treturn rootObject;\n\t}\n", "void removedBookmark ( BookmarkManager manager , Bookmark bookmark ) ;", "void visit ( final CGraphModel model , final IGraphPanelExtender extender ) ;", "public static Label createLabel ( Composite parent , String text , Font font , int hspan ) { Label l = new Label ( parent , SWT . NONE ) ; l . setFont ( font ) ; l . setText ( text ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horiz", "private void fillFilterData(Filter presetFilter){\n  filterName.setText(presetFilter.getName());\n  regEx.setText(presetFilter.getFilterExpression());\n  filterRule.setSelectedIndex(presetFilter.getFilterRule());\n  isExclusionFilter.setSelected(presetFilter.isExclusionFilter());\n  isEnabled.setSelected(presetFilter.isEnabled());\n}\n", "public Iterator<EscapeTarget> escapeTargetIterator(BasicBlock sourceBlock){\n  List<EscapeTarget> escapeTargetList=escapeTargetListMap.get(sourceBlock);\n  if (escapeTargetList == null) {\n    escapeTargetList=Collections.emptyList();\n  }\n  return escapeTargetList.iterator();\n}\n", "\tpublic int hashCode() {\n\t\treturn (this.companyCode + this.userCode + this.fieldDtlId + this.fieldNodeId).hashCode();\n\t}\n", "public boolean isAccessTokenUsed (@Nullable final String sTokenString)\n  {\n    if (StringHelper.hasNoText (sTokenString))\n      return false;\n\n    return containsAny (x -> x.findFirstAccessToken (y -> y.getTokenString ().equals (sTokenString)) != null);\n  }", "public char read(){\n  if (pos >= length) {\n    throw new StringIndexOutOfBoundsException();\n  }\n  return source.charAt(pos++);\n}\n", "public static KeyPairGenerator getInstance(String algorithm,\n            String provider)\n            throws NoSuchAlgorithmException, NoSuchProviderException {\n        Instance instance = GetInstance.getInstance(\"KeyPairGenerator\",\n                KeyPairGeneratorSpi.class, algorithm, provider);\n        return getInstance(instance, algorithm);\n    }", "public String[] classNames() {\n      if (_domains == null || _domains.length == 0 || !isSupervised()) return null;\n      return _domains[_domains.length - 1];\n    }", "    public boolean isStale() {\n        if (isTransient) {\n            return status == STATUS_STALE_MODIFIED\n                    || status == STATUS_STALE_DESTROYED;\n        } else {\n            return overlayedState != null\n                    && modCount != overlayedState.getModCount();\n        }\n    }\n", "  public boolean maxExclusive(String restrictionValue) throws RestrictionViolationException {\n    try {\n      double upperBound = Double.parseDouble(restrictionValue);\n\n      if (getValue().doubleValue() < upperBound) {\n        return true;\n      }\n      throw new RestrictionViolationException(\"Real value \" + toString() + \" should be less than \" + restrictionValue);\n    } catch (NumberFormatException ex) {\n      throw new RestrictionViolationException(restrictionValue + \" cannot not be used as lower bound for an Integer\");\n    }\n  }\n", "private Cuboid(String worldName,int x1,int y1,int z1,int x2,int y2,int z2){\n  this.worldName=worldName;\n  this.x1=Math.min(x1,x2);\n  this.x2=Math.max(x1,x2);\n  this.y1=Math.min(y1,y2);\n  this.y2=Math.max(y1,y2);\n  this.z1=Math.min(z1,z2);\n  this.z2=Math.max(z1,z2);\n}\n", "public Arguments newArgumentList ( Value ... values ) { throw new RuntimeException ( STR_ ) ; }", "private void writeUser(User user, Node node) throws Exception\n   {\n      node.setProperty(UserProperties.JOS_EMAIL, user.getEmail());\n      node.setProperty(UserProperties.JOS_FIRST_NAME, user.getFirstName());\n      node.setProperty(UserProperties.JOS_LAST_NAME, user.getLastName());\n      node.setProperty(UserProperties.JOS_PASSWORD, user.getPassword());\n      node.setProperty(UserProperties.JOS_DISPLAY_NAME, user.getDisplayName());\n      node.setProperty(UserProperties.JOS_USER_NAME, node.getName());\n\n      Calendar calendar = Calendar.getInstance();\n      calendar.setTime(user.getCreatedDate());\n      node.setProperty(UserProperties.JOS_CREATED_DATE, calendar);\n   }", "public Compiler add ( URL url ) { config . classpath . add ( url ) ; return this ; }", "public CCriteriaFactory ( final ZyGraph graph , final View2D view2D , final ITagManager tagManager ) { m_graph = Preconditions . checkNotNull ( graph , STR_ ) ; m_view2D = view2D ; m_tagManager = tagManager ; }", "public void select_import_class_interface_fun_object ( Statement stmt , List < Import > imports , List < ClassDef > classDefs , List < InterfaceDef > interfaceDefs , List < FunDef > funDefs , List < ObjectDef > objectDefs ) throws UnexpectedTokenException", "boolean isInitialized ( ) throws CouldntLoadDataException , InvalidDatabaseException ;", "public static int numberOfTrailingZeros(long[] v){\n  for (int p=0; ; p++) {\n    if (p == v.length) {\n      return p * Long.SIZE;\n    }\n    if (v[p] != 0) {\n      return Long.numberOfTrailingZeros(v[p]) + p * Long.SIZE;\n    }\n  }\n}\n", "private boolean requiresLOUpdate ( TunerChannel channel ) throws SourceException { return ! ( getMinTunedFrequency ( ) <= channel . getMinFrequency ( ) && channel . getMaxFrequency ( ) <= getMaxTunedFrequency ( ) && ( ( mMiddleUnusable == NUM_ ) || ( ! ch", "\tprivate void linkZones(Board board) {\n\t\tIterator it=board.getZones().iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tZone zone=(Zone)it.next();\n\t\t\tzone.setId(getZoneId(board.getId(), zone.getCode()));\n\t\t}\n\t}\n", "public void sortAndRetain(){\n  Collections.sort(counterList,this.descending ? DESC_COMPARATOR : ASC_COMPARATOR);\n  retain(capacity);\n  ordered=true;\n}\n", "public void testErf ( ) { double [ ] octaveResults = { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_", "private void fillConfMap(Map<PropertyKey, Map<Optional<String>, List<String>>> targetMap,\n      Map<Address, List<ConfigRecord>> recordMap) {\n    for (Map.Entry<Address, List<ConfigRecord>> record : recordMap.entrySet()) {\n      Address address = record.getKey();\n      String addressStr = String.format(\"%s:%s\", address.getHost(), address.getRpcPort());\n      for (ConfigRecord conf : record.getValue()) {\n        PropertyKey key = conf.getKey();\n        if (key.getConsistencyLevel() == ConsistencyCheckLevel.IGNORE) {\n          continue;\n        }\n        Optional<String> value = conf.getValue();\n        targetMap.putIfAbsent(key, new HashMap<>());\n        Map<Optional<String>, List<String>> values = targetMap.get(key);\n        values.putIfAbsent(value, new ArrayList<>());\n        values.get(value).add(addressStr);\n      }\n    }\n  }", "public void actionChangeElementLanguage() {\n\n        // save eventually changed content of the editor\n        Locale oldLocale = CmsLocaleManager.getLocale(getParamOldelementlanguage());\n        Locale newLocale = getElementLocale();\n        try {\n            setEditorValues(oldLocale);\n            if (!m_content.validate(getCms()).hasErrors(oldLocale)) {\n                // no errors found in content\n                if (!m_content.hasLocale(newLocale)) {\n                    // check if we should copy the content from a default locale\n                    boolean addNew = true;\n                    List<Locale> locales = OpenCms.getLocaleManager().getDefaultLocales(getCms(), getParamResource());\n                    if (locales.size() > 1) {\n                        // default locales have been set, try to find a match\n                        try {\n                            m_content.copyLocale(locales, newLocale);\n                            addNew = false;\n                        } catch (CmsXmlException e) {\n                            // no matching default locale was available, we will create a new one later\n                        }\n                    }\n                    if (addNew) {\n                        // create new element if selected language element is not present\n                        try {\n                            m_content.addLocale(getCms(), newLocale);\n                        } catch (CmsXmlException e) {\n                            if (LOG.isErrorEnabled()) {\n                                LOG.error(e.getLocalizedMessage(), e);\n                            }\n                        }\n                    }\n                }\n                //save to temporary file\n                writeContent();\n                // set default action to suppress error messages\n                setAction(ACTION_DEFAULT);\n            } else {\n                // errors found, switch back to old language to show errors\n                setParamElementlanguage(getParamOldelementlanguage());\n                // set stored locale to null to reinitialize it\n                m_elementLocale = null;\n            }\n        } catch (Exception e) {\n            // should usually never happen\n            if (LOG.isInfoEnabled()) {\n                LOG.info(e.getLocalizedMessage(), e);\n            }\n        }\n    }", "@Override\n    public ResultSet getUDTs(String catalog, String schemaPattern, String typeNamePattern, int[] types) throws SQLException\n    {\n        checkClosed();\n        throw SQLError.noSupport();\n    }", "public boolean removeSatallite(SatelliteBase satallite){\n  if (satallite.canTick())   tickingSatallites.remove(satallite);\n  return satallites.remove(satallite);\n}\n", "    public int numMtxEntries() {\n        if (this.metrics == null) {\n            return 0;\n        }\n        return this.metrics.length;\n    }\n", "    private MservResponse trackLocation(Track track) {\n        String fileName = track.getUri().getPath();\n        return new MservResponse(245, String.format(\"Location for track %d/%d:\\n\\r%s\",\n                MservToolkit.getAlbumId(track.getAlbum()),\n                MservToolkit.getTrackId(track),\n                fileName));\n    }\n", "public NamePath append(String head){\n  pathPieces.add(head);\n  return this;\n}\n", "void initInputFrame ( final ClassWriter cw , final int access , final Type [ ] args , final int maxLocals ) { inputLocals = new int [ maxLocals ] ; inputStack = new int [ NUM_ ] ; int i = NUM_ ; if ( ( access & Opcodes . ACC_STATIC ) == NUM_ ) { if ( ( ac", "  public void revertToOriginal() {\n    if(formulaElementsOrig != null) {\n      formulaElements.clear();\n      cellReferences.clear();\n      formulaElements.addAll(formulaElementsOrig);\n      cellReferences.addAll(cellReferencesOrig);\n    }\n  }\n", "Programmer selectByPrimaryKey ( Integer id ) ;", "public static String parseCoverageTimestamp(String outputMessage){\n  return outputMessage.substring(outputMessage.lastIndexOf(AT) + AT.length());\n}\n", "public static List<Statement> randomStatementsAbout(String s,int count){\n  List<Statement> statements=new ArrayList<>();\n  for (int i=0; i < count; i++) {\n    String p=\"P\" + randomInt();\n    LiteralImpl o=randomDate();\n    statements.add(statement(s,p,o));\n  }\n  return statements;\n}\n", "    public InOptionalOut createInOptionalOutExchange() throws MessagingException {\n        checkNotClosed();\n        InOptionalOutImpl result = new InOptionalOutImpl(getExchangeId());\n        setDefaults(result);\n        return result;\n    }\n", "\tpublic void notifyGameStarted(Game game) {\n\t\tif (m_mode == MODE_LOCAL)\n\t\t\tm_joinlistener.close(); //terminate incomming connections listener\n\t}\n", "@Nonnull\n  public TriggerKey scheduleJobNowOnce (@Nonnull final String sJobName,\n                                        @Nonnull final Class <? extends IJob> aJobClass,\n                                        @Nullable final Map <String, ? extends Object> aJobData)\n  {\n    return scheduleJob (sJobName,\n                        JDK8TriggerBuilder.newTrigger ()\n                                          .startNow ()\n                                          .withSchedule (SimpleScheduleBuilder.simpleSchedule ()\n                                                                              .withIntervalInMinutes (1)\n                                                                              .withRepeatCount (0)),\n                        aJobClass,\n                        aJobData);\n  }", "  protected void setUp() {\n    super.setUp();\n    bind = (MElementLS)repository.create(MElementLS.class);\n    clsExist = (MElementLS)repository.create(MElementLS.class);\n    Collection col = new HashSet();\n    col.add( bind );\n    clsExist.getSetRole().addAll( col );\n\n    ((MDFObject)bind).addMDFFeatureListener( listenerBind );\n  }\n", "public void serviceName_vrack_network_vrackNetworkId_PUT(String serviceName, Long vrackNetworkId, OvhVrackNetwork body) throws IOException {\n\t\tString qPath = \"/ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}\";\n\t\tStringBuilder sb = path(qPath, serviceName, vrackNetworkId);\n\t\texec(qPath, \"PUT\", sb.toString(), body);\n\t}", "private static String hexify(byte bytes[]){\n  char[] hexDigits={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};\n  StringBuffer buf=new StringBuffer(bytes.length * 2);\n  for (int i=0; i < bytes.length; ++i) {\n    if (i != 0) {\n      buf.append(\":\");\n    }\n    buf.append(hexDigits[(bytes[i] & 0xf0) >> 4]);\n    buf.append(hexDigits[bytes[i] & 0x0f]);\n  }\n  return buf.toString();\n}\n", "\tpublic double toFreq() {\n\t\treturn toFreq(intValue());\n\t}\n", "public boolean isHidden ( ) { return getProject ( ) . getState ( ) . equals ( com . google . gerrit . extensions . client . ProjectState . HIDDEN ) ; }", "public Parameter<T> build() {\n    if (this.name == null) {\n      throw new IllegalArgumentException(\"Name is missing.\");\n    }\n    if (this.type == null) {\n      throw new IllegalArgumentException(\"Type is missing.\");\n    }\n    return new Parameter<T>(\n        this.name,\n        this.type,\n        this.applicationId,\n        this.defaultOsgiConfigProperty,\n        this.defaultValue,\n        new ValueMapDecorator(ImmutableMap.<String, Object>copyOf(this.properties)));\n  }", "public AndroidAuthenticator ( Context context , Account account , String authTokenType , boolean notifyAuthFailure ) { this ( AccountManager . get ( context ) , account , authTokenType , notifyAuthFailure ) ; }", "    public StrBuilder append(long value) {\n        return append(String.valueOf(value));\n    }\n", "public Member getMember(String name) {\n        if (null == keyValStore) throw new RuntimeException(\"No key value store was found.  You must first call Chain.setKeyValStore\");\n        if (null == memberServices) throw new RuntimeException(\"No member services was found.  You must first call Chain.setMemberServices or Chain.setMemberServicesUrl\");\n\n        // Try to get the member state from the cache\n        Member member = (Member) members.get(name);\n        if (null != member) return member;\n\n        // Create the member and try to restore it's state from the key value store (if found).\n        member = new Member(name, this);\n        member.restoreState();\n        return member;\n\n    }", "protected boolean canScroll ( View v , boolean checkV , int dx , int x , int y ) { if ( v instanceof ViewGroup ) { final ViewGroup group = ( ViewGroup ) v ; final int scrollX = v . getScrollX ( ) ; final int scrollY = v . getScrollY ( ) ; final int count = group . getChildCount ( ) ; for ( int i = count - NUM_ ; i >= NUM_ ; i -- ) { final View child = group . getChildAt ( i ) ; if ( x + scrollX >= child . getLeft ( ) && x + scrollX < child . getRight ( ) && y + scrollY >= child . getTop ( ) && y + scrollY < child . getBottom ( ) && canScroll ( child , BOOL_ , dx , x + scrollX - child . getLeft ( ) , y + scrollY - child . getTop ( ) ) ) { return BOOL_ ; } } } return checkV && ViewCompat . canScrollHorizontally ( v , - dx ) ; }", "public Change[] clear(){\n  Change[] result=(Change[])fChanges.toArray(new Change[fChanges.size()]);\n  fChanges.clear();\n  return result;\n}\n", "private void draw(final ExecutionUnit process,final Graphics2D g2,final ProcessRendererModel rendererModel,final boolean printing){\n  if (!visualizer.isActive()) {\n    return;\n  }\n  WorkflowAnnotations annotations=rendererModel.getProcessAnnotations(process);\n  if (annotations != null) {\n    for (    WorkflowAnnotation anno : annotations.getAnnotationsDrawOrder()) {\n      if (anno.equals(model.getSelected())) {\n        continue;\n      }\n      Graphics2D g2P=(Graphics2D)g2.create();\n      drawer.drawAnnotation(anno,g2P,printing);\n      g2P.dispose();\n    }\n  }\n}\n", "public synchronized void cancelAll ( ) { for ( TaskProgress progress : taskInfo ) progress . setCancelled ( BOOL_ ) ; }", "public String equationsToString(NumberFormat nf){\n  return equationsToString(\"\",nf);\n}\n", "public void generateJobTable(JspWriter out, String label, List<JobInProgress> jobs)\n      throws IOException {\n    if (jobs.size() > 0) {\n      for (JobInProgress job : jobs) {\n        JobProfile profile = job.getProfile();\n        JobStatus status = job.getStatus();\n        JobID jobid = profile.getJobID();\n\n        int desiredMaps = job.desiredMaps();\n        int desiredReduces = job.desiredReduces();\n        int completedMaps = job.finishedMaps();\n        int completedReduces = job.finishedReduces();\n        String name = profile.getJobName();\n\n        out.print(\"<\" + label + \"_job jobid=\\\"\" + jobid + \"\\\">\\n\");\n        out.print(\"  <jobid>\" + jobid + \"</jobid>\\n\");\n        out.print(\"  <user>\" + profile.getUser() + \"</user>\\n\");\n        out.print(\"  <name>\" + (\"\".equals(name) ? \"&nbsp;\" : name) + \"</name>\\n\");\n        out.print(\"  <map_complete>\" + StringUtils.formatPercent(status.mapProgress(), 2) + \"</map_complete>\\n\");\n        out.print(\"  <map_total>\" + desiredMaps + \"</map_total>\\n\");\n        out.print(\"  <maps_completed>\" + completedMaps + \"</maps_completed>\\n\");\n        out.print(\"  <reduce_complete>\" + StringUtils.formatPercent(status.reduceProgress(), 2) + \"</reduce_complete>\\n\");\n        out.print(\"  <reduce_total>\" + desiredReduces + \"</reduce_total>\\n\");\n        out.print(\"  <reduces_completed>\" + completedReduces + \"</reduces_completed>\\n\");\n        out.print(\"</\" + label + \"_job>\\n\");\n      }\n    }\n  }", "protected void logMessage(String logMessage, String message, boolean incoming) {\n        if (messageListener != null) {\n            log.debug(logMessage);\n\n            if (incoming) {\n                messageListener.onInboundMessage(new RawMessage(message), null);\n            } else {\n                messageListener.onOutboundMessage(new RawMessage(message), null);\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(logMessage + \":\" + System.getProperty(\"line.separator\") + message);\n            }\n        }\n    }", "\tpublic Subdivision read(@NotNull Stub<Subdivision> stub) {\n\t\treturn subdivisionDao.readFull(stub.getId());\n\t}\n", "public static inat_stats get(nitro_service service, String name) throws Exception{\n\t\tinat_stats obj = new inat_stats();\n\t\tobj.set_name(name);\n\t\tinat_stats response = (inat_stats) obj.stat_resource(service);\n\t\treturn response;\n\t}", "   public void pre_Address(String address) {\n      assert address != null;\n      assert (address.indexOf(\"@\") > 0) &&\n         (address.indexOf(\"@\") < (address.length() - 1));\n   }   // end pre_Address()\n", "private Connection tableSetup(String insertEntryQuery) throws Throwable {\n  Connection connection=null;\n  Statement statement=null;\n  try {\n    connection=getNewConnection(true);\n    statement=connection.createStatement();\n    statement.executeQuery(\"DROP TABLE IF EXISTS replica_host_status\");\n    statement.executeQuery(\"CREATE TABLE replica_host_status (SERVER_ID VARCHAR(255), SESSION_ID VARCHAR(255), \" + \"LAST_UPDATE_TIMESTAMP TIMESTAMP DEFAULT NOW())\");\n    ResultSet resultSet=statement.executeQuery(\"SELECT SERVER_ID, SESSION_ID, LAST_UPDATE_TIMESTAMP \" + \"FROM information_schema.replica_host_status \" + \"WHERE LAST_UPDATE_TIMESTAMP = (\"+ \"SELECT MAX(LAST_UPDATE_TIMESTAMP) \"+ \"FROM information_schema.replica_host_status)\");\n    while (resultSet.next()) {\n      String values=\"\";\n      for (int i=1; i < 4; i++) {\n        values+=(i == 1) ? \"'localhost'\" : \",'\" + resultSet.getString(i) + \"'\";\n      }\n      statement.executeQuery(\"INSERT INTO replica_host_status (SERVER_ID, SESSION_ID, LAST_UPDATE_TIMESTAMP) \" + \"VALUES (\" + values + \")\");\n    }\n    if (insertEntryQuery != null) {\n      statement.executeQuery(insertEntryQuery);\n    }\n    try {\n      setDbName(connection,\"testj\");\n    }\n catch (    Throwable t) {\n      fail(\"Unable to set database for testing\");\n    }\n    int serverId=getServerId(connection);\n    stopProxy(serverId,1);\n    statement=connection.createStatement();\n    statement.executeQuery(\"select 1\");\n  }\n catch (  SQLException se) {\n    fail(\"Unable to execute queries to set up table: \" + se);\n  }\n finally {\n    if (statement != null) {\n      statement.close();\n    }\n  }\n  return connection;\n}\n", "private static DroidModel findOne(DroidModel model) throws DroidModelException {\n  return null;\n}\n", "public static void w ( String tag , String msg ) { if ( sLevel > LEVEL_WARNING ) { return ; } Log . w ( tag , msg ) ; }", "public void setImageRequest(ImageRequest request) {\n    AbstractDraweeControllerBuilder controllerBuilder = mControllerBuilder;\n    DraweeController controller =\n        controllerBuilder.setImageRequest(request).setOldController(getController()).build();", "\tpublic MP3File getCurrentMP3File() {\n\t\treturn currentMP3File;\n\t}\n", "public void onFolderClick(FolderClickEvent event) {\n\t\ttry {\n\n\t\t\tif (isIconTargetClicked()) {\n\t\t\t\tonIconClick(event.getFolder());\n\t\t\t} else {\n\t\t\t\tif (event.getFolder() instanceof LayerTreeTreeNode) {\n\t\t\t\t\tmapModel.selectLayer(((LayerTreeTreeNode) event.getFolder()).getLayer());\n\t\t\t\t} else {\n\t\t\t\t\tmapModel.selectLayer(null);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) { // NOSONAR\n\t\t\tLog.logError(e.getMessage());\n\t\t\t// some other unusable element\n\t\t}\n\t}", "    private String getSubPath(CmsObject cms, CmsResource xmlPage, String resourcename) {\n\n        if (xmlPage != null) {\n            String rootPath = cms.getRequestContext().addSiteRoot(resourcename);\n            String path = rootPath.substring(xmlPage.getRootPath().length());\n\n            if (path.startsWith(\"/\")) {\n                path = path.substring(1);\n            }\n\n            if (path.endsWith(\"/\")) {\n                path = path.substring(0, path.length() - 1);\n            }\n\n            return path;\n        }\n\n        return null;\n    }\n", "void show ( ) ;", "private final void reapReachedMarkers ( ) { if ( ! _cacheManager . requiresEvictionReplicationProtection ( ) ) return ; int reapCount = NUM_ ; try { long currentTime = SystemTime . timeMillis ( ) ; long expirationTime = currentTime - LM_CHECK_TIME_MARKERS", "\tpublic void setBurn(FiniteBurn b) {\n\t\tdouble thrust = b.accel;\n\t\tVectorN unit = b.unitVector;\n\t\tthis.fburn = unit.times(thrust);\t\t\n\t}\n", "private void copyResources( List fileSets )\n        throws MojoExecutionException\n    {\n        final String[] emptyStrArray = {};\n        \n        for ( Iterator it = fileSets.iterator(); it.hasNext(); )\n        {\n            FileSet fileSet = (FileSet) it.next();\n\n            File resourceDirectory = new File( fileSet.getDirectory() );\n            if ( !resourceDirectory.isAbsolute() )\n            {\n                resourceDirectory = new File( project.getBasedir(), resourceDirectory.getPath() );\n            }\n\n            if ( !resourceDirectory.exists() )\n            {\n                getLog().info( \"Additional resource directory does not exist: \" + resourceDirectory );\n                continue;\n            }\n\n            DirectoryScanner scanner = new DirectoryScanner();\n\n            scanner.setBasedir( resourceDirectory );\n            if ( fileSet.getIncludes() != null && !fileSet.getIncludes().isEmpty() )\n            {\n                scanner.setIncludes( (String[]) fileSet.getIncludes().toArray( emptyStrArray ) );\n            }\n            else\n            {\n                scanner.setIncludes( DEFAULT_INCLUDES );\n            }\n\n            if ( fileSet.getExcludes() != null && !fileSet.getExcludes().isEmpty() )\n            {\n                scanner.setExcludes( (String[]) fileSet.getExcludes().toArray( emptyStrArray ) );\n            }\n\n            if (fileSet.isUseDefaultExcludes())\n            {\n                scanner.addDefaultExcludes();\n            }\n\n            scanner.scan();\n\n            List includedFiles = Arrays.asList( scanner.getIncludedFiles() );\n\n            getLog().info( \"Copying \" + includedFiles.size() + \" additional resource\"\n                           + ( includedFiles.size() > 1 ? \"s\" : \"\" ) );\n\n            for ( Iterator j = includedFiles.iterator(); j.hasNext(); )\n            {\n                String destination = (String) j.next();\n                File source = new File( resourceDirectory, destination );\n                File destinationFile = new File( buildDirectory, destination );\n\n                if ( !destinationFile.getParentFile().exists() )\n                {\n                    destinationFile.getParentFile().mkdirs();\n                }\n\n                try\n                {\n                    FileUtils.copyFile(source, destinationFile);\n                }\n                catch ( IOException e )\n                {\n                    throw new MojoExecutionException( \"Error copying additional resource \" + source, e );\n                }\n            }\n        }\n    }", "\t\tprivate void handleChange(JTextField field) {\n\t\t\t// get privous values\n\t\t\tif (field != value) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// get old value\n\t\t\tint time = currentNode.getValue();\n\n\t\t\t// get new value\n\t\t\ttry {\n\t\t\t\tint newValue = Integer.parseInt(field.getText());\n\t\t\t\t// value must be positive\n\t\t\t\tif (newValue < 0) {\n\t\t\t\t\tthrow new NumberFormatException(\"dimension is negativ\");\n\t\t\t\t}\n\t\t\t\ttime = newValue;\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tSwingClient.getInstance().showMessage(\"Value \" + field.getText() + \" not valid\", \"Illegal value\",\n\t\t\t\t        JOptionPane.ERROR_MESSAGE);\n\t\t\t}\n\n\t\t\t// set new value\n\t\t\tfield.setText(Integer.toString(time));\n\t\t\tcurrentNode.setValue(time);\n\t\t}\n", "public COrthogonalPanel ( final ZyGraphViewSettings settings ) { super ( new GridLayout ( NUM_ , NUM_ ) ) ; Preconditions . checkNotNull ( settings , STR_ ) ; setBorder ( new TitledBorder ( STR_ ) ) ; CSettingsPanelBuilder . addComboBox ( this , m_cbOrtho", "public void updateContext ( Context newContext ) { context = newContext ; }", "public void release ( ) { if ( db != null ) { db . close ( ) ; db = null ; } }", "public void push ( final float value ) { int bits = Float . floatToIntBits ( value ) ; if ( bits == NUM_ || bits == NUM_ || bits == NUM_ ) { mv . visitInsn ( Opcodes . FCONST_0 + ( int ) value ) ; } else { mv . visitLdcInsn ( value ) ; } }", "public List<VarDef> getCombinedVars( FunctionInputDef inputDef)\n    {\n    assertApplicable( inputDef);\n\n    List<VarDef> combinedVars = new ArrayList<VarDef>();\n    for( VarDefIterator varDefs = new VarDefIterator( inputDef); varDefs.hasNext(); )\n      {\n      VarDef varDef = varDefs.next();\n      if( isEligible( varDef))\n        {\n        combinedVars.add( varDef);\n        }\n      }\n\n    if( combinedVars.size() < getTupleSize())\n      {\n      throw\n        new IllegalStateException\n        ( \"Can't return \" + getTupleSize() + \"-tuples for \" + inputDef\n          + \": only \" + combinedVars.size() + \" variables eligible for combination\");\n      }\n\n    return combinedVars;\n    }", "private PassiveConnectTask createPassiveConnectTask(DataSource source,\n                                                        TransferContext context) {\n        return new PassiveConnectTask(serverSocket,\n                                      source,\n                                      localControlChannel,\n                                      session,\n                                      dataChannelFactory,\n                                      context);\n    }", "    public int getCharSet() {\n        CTIntProperty charset = _ctFont.sizeOfCharsetArray() == 0 ? null : _ctFont.getCharsetArray(0);\n        int val = charset == null ? FontCharset.ANSI.getValue() : FontCharset.valueOf(charset.getVal()).getValue();\n        return val;\n    }\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "private void pack(String data) {\n        byte[] bytes = data.getBytes(Constants.UTF8);\n        buffer.put(getLengthDescriptor(bytes.length));\n        buffer.put(bytes);\n    }", "@Override\n    public DescribeThingTypeResult describeThingType(DescribeThingTypeRequest request) {\n        request = beforeClientExecution(request);\n        return executeDescribeThingType(request);\n    }", "public void onRefresh ( final PullToRefreshBase < V > refreshView ) ;", "    private void deleteCellTextHelper(XAccessibleContext child, int startIndex, int endIndex) {\n        try {\n            XCell xcell = getSelectedCell(child);\n\n            if (xcell != null) {\n                deleteTextfromCell(xcell, startIndex, endIndex);\n            }\n        } catch (java.lang.Exception ex) {\n        }\n    }\n", "\tprotected void addKonczyny_dolnePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_BadanieOkresowe_konczyny_dolne_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_BadanieOkresowe_konczyny_dolne_feature\", \"_UI_BadanieOkresowe_type\"),\n\t\t\t\t PrzychodniaPackage.Literals.BADANIE_OKRESOWE__KONCZYNY_DOLNE,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "    public void selectionChanged(SelectionChangeEvent e) {\n        boolean enabled = false;\n        PhotoInfo[] photos = null;\n        if ( selectionView.getSelectedCount() > 0 ) {\n            enabled = true;\n            Collection selection = selectionView.getSelection();\n            photos = new PhotoInfo[selection.size()];\n            Iterator iter = selection.iterator();\n            int n = 0;\n            while ( iter.hasNext() && n < photos.length ) {\n                photos[n] = (PhotoInfo) iter.next();\n                n++;\n            }\n            \n        }\n        setEnabled( enabled );\n        if ( colorDlg != null && colorDlg.isVisible() ) {\n                colorDlg.setPhotos( photos );\n        }\n    }\n", "\tprotected void addFilterTypePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_PartWithCommon_filterType_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_PartWithCommon_filterType_feature\", \"_UI_PartWithCommon_type\"),\n\t\t\t\t EsxPackage.Literals.PART_WITH_COMMON__FILTER_TYPE,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public static void deleteTypeSubstitution ( final Connection connection , final INaviModule module , final TypeSubstitution typeSubstitution ) throws CouldntDeleteException { try { final PreparedStatement statement = connection . prepareStatement ( STR_ + CTableNames . EXPRESSION_TYPES_TABLE + STR_ ) ; try { statement . setInt ( NUM_ , module . getConfiguration ( ) . getId ( ) ) ; statement . setLong ( NUM_ , typeSubstitution . getAddress ( ) . toLong ( ) ) ; statement . setInt ( NUM_ , typeSubstitution . getPosition ( ) ) ; statement . setInt ( NUM_ , typeSubstitution . getExpressionId ( ) ) ; statement . executeUpdate ( ) ; } finally { statement . close ( ) ; } } catch ( final SQLException exception ) { throw new CouldntDeleteException ( exception ) ; } }", "public static String parseExperimentName(String name){\n  Scanner scanner=new Scanner(name);\n  StringBuilder csvName=new StringBuilder();\n  scanner.useDelimiter(\"_\");\n  for (int i=0; i < 4; i++) {\n    if (scanner.hasNext()) {\n      csvName.append(scanner.next() + \",\");\n    }\n else {\n      csvName.append(\",\");\n    }\n  }\n  scanner.close();\n  return csvName.toString();\n}\n", "public void applyConfig ( final ConfigSettings config ) { map . get ( PanelKeys . PANEL_VALUES ) . applyConfig ( config ) ; map . get ( PanelKeys . PANEL_EXTERNALS ) . applyConfig ( config ) ; map . get ( PanelKeys . PANEL_INPUT ) . applyConfig ( config ) ; map . get ( PanelKeys . PANEL_OUTPUT ) . applyConfig ( config ) ; map . get ( PanelKeys . PANEL_SQL ) . applyConfig ( config ) ; map . get ( PanelKeys . PANEL_CACHE ) . applyConfig ( config ) ; map . get ( PanelKeys . PANEL_LOGGING ) . applyConfig ( config ) ; map . get ( PanelKeys . PANEL_DEBUG ) . applyConfig ( config ) ; map . get ( PanelKeys . PANEL_FILTER ) . applyConfig ( config ) ; }", "\tprotected void pageD(){\n\t\tmMapImage = Bitmap.createBitmap(Tile.sWidth * 2, Tile.sHeight * 2, BITMAP_CONFIG);\n\t\tCanvas canvas = new Canvas(mMapImage);\n\n\t\tint num = 0;\n\t\tfor (int row = 0; row < 2; row++){\n\t\t\tfor (int col = 0; col < 2; col++){\n\t\t\t\tBitmap bitmap = BitmapFactory.decodeFile( getTileName(num) );\n\t\t\t\tcanvas.drawBitmap(bitmap, col*Tile.sWidth, row*Tile.sHeight, null);\n\t\t\t\tnum++;\n\t\t\t}\n\t\t}\n\t}\n", "private static void addPrintable(StringBuffer retval, char ch) {\n\t\tswitch (ch) {\n\t\tcase '\\b':\n\t\t\tretval.append(\"\\\\b\");\n\t\t\tbreak;\n\t\tcase '\\t':\n\t\t\tretval.append(\"\\\\t\");\n\t\t\tbreak;\n\t\tcase '\\n':\n\t\t\tretval.append(\"\\\\n\");\n\t\t\tbreak;\n\t\tcase '\\f':\n\t\t\tretval.append(\"\\\\f\");\n\t\t\tbreak;\n\t\tcase '\\r':\n\t\t\tretval.append(\"\\\\r\");\n\t\t\tbreak;\n\t\tcase '\\\"':\n\t\t\tretval.append(\"\\\\\\\"\");\n\t\t\tbreak;\n\t\tcase '\\'':\n\t\t\tretval.append(\"\\\\\\'\");\n\t\t\tbreak;\n\t\tcase '\\\\':\n\t\t\tretval.append(\"\\\\\\\\\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (ch < 0x20 || ch > 0x7e) {\n\t\t\t\tfinal String ss = \"0000\" + Integer.toString(ch, 16);\n\t\t\t\tretval.append(\"\\\\u\" + ss.substring(ss.length() - 4, ss.length()));\n\t\t\t} else {\n\t\t\t\tretval.append(ch);\n\t\t\t}\n\t\t}\n\t}", "public static GroupMatcher < JobKey > jobGroupEquals ( String compareTo ) { return GroupMatcher . groupEquals ( compareTo ) ; }", "public void onPackageInstall ( final int operation , InstallCallbackInterface callback ) ;", "@Action(value=\"/reports/chequeCollectionReport-report\") public String report(){\n  final ReportRequest reportInput=new ReportRequest(CHEQUE_COLLETION_TEMPLATE,critParams,ReportDataSourceType.SQL);\n  final ReportOutput reportOutput=reportService.createReport(reportInput);\n  reportId=reportViewerUtil.addReportToTempCache(reportOutput);\n  return REPORT;\n}\n", "public Seconds plus(int seconds) {\n        if (seconds == 0) {\n            return this;\n        }\n        return Seconds.seconds(FieldUtils.safeAdd(getValue(), seconds));\n    }", "public double dirtyPrice ( final double yield , final DayCounter dc , final Compounding comp , final Frequency freq , Date settlementDate ) { if ( settlementDate . isNull ( ) ) { settlementDate = settlementDate ( ) ; } return dirtyPriceFromYield ( notiona", "public void resetGUI(){\n  String interString;\n  if (lineColorItem == null) {\n    interString=i18n.get(DrawingAttributes.class,\"lineColorItem\",\"Change Edge Color\");\n    lineColorItem=new JMenuItem(interString);\n    lineColorItem.setActionCommand(LineColorCommand);\n    lineColorItem.addActionListener(this);\n    interString=i18n.get(DrawingAttributes.class,\"lineColorItem\",I18n.TOOLTIP,\"Change edge color for rendering.\");\n    lineColorItem.setToolTipText(interString);\n  }\n  if (fillColorItem == null) {\n    interString=i18n.get(DrawingAttributes.class,\"fillColorItem\",\"Change Fill Color\");\n    fillColorItem=new JMenuItem(interString);\n    fillColorItem.setActionCommand(FillColorCommand);\n    fillColorItem.addActionListener(this);\n    interString=i18n.get(DrawingAttributes.class,\"fillColorItem\",I18n.TOOLTIP,\"Change fill color for rendering.\");\n    fillColorItem.setToolTipText(interString);\n  }\n  if (selectColorItem == null) {\n    interString=i18n.get(DrawingAttributes.class,\"selectColorItem\",\"Change Highlight Edge Color\");\n    selectColorItem=new JMenuItem(interString);\n    selectColorItem.setActionCommand(SelectColorCommand);\n    selectColorItem.addActionListener(this);\n    interString=i18n.get(DrawingAttributes.class,\"selectColorItem\",I18n.TOOLTIP,\"Change highlight edge color rendered during selection.\");\n    selectColorItem.setToolTipText(interString);\n  }\n  if (mattingColorItem == null) {\n    interString=i18n.get(DrawingAttributes.class,\"mattingColorItem\",\"Change Matted Edge Color\");\n    mattingColorItem=new JMenuItem(interString);\n    mattingColorItem.setActionCommand(MattingColorCommand);\n    mattingColorItem.addActionListener(this);\n    interString=i18n.get(DrawingAttributes.class,\"mattingColorItem\",I18n.TOOLTIP,\"Change the color of the border around the edge.\");\n    mattingColorItem.setToolTipText(interString);\n  }\n  if (mattedCheckBox == null) {\n    interString=i18n.get(DrawingAttributes.class,\"mattedEnableItem\",\"Enable Matting on Edge\");\n    mattedEnabledItem=new JCheckBoxMenuItem(interString,matted);\n    mattedEnabledItem.setActionCommand(MattedCommand);\n    mattedEnabledItem.addActionListener(this);\n    interString=i18n.get(DrawingAttributes.class,\"mattedEnableItem\",I18n.TOOLTIP,\"Enable/Disable matting on edge.\");\n    mattedEnabledItem.setToolTipText(interString);\n  }\n  if (stroke instanceof BasicStroke) {\n    BasicStrokeEditorMenu tmpbse=getBasicStrokeEditor();\n    if (tmpbse != null) {\n      tmpbse.setBasicStroke((BasicStroke)stroke);\n    }\n  }\n}\n", "protected ForkProcessException newForkProcessException ( Throwable t ) { return new ForkProcessException ( STR_ + getProcessArgs ( ) + STR_ , t ) ; }", "public static void modifyFixedEnder(NFA nfa)\r\n    {\r\n        List<NFAState> list = new ArrayList<>();\r\n        NFAState end = nfa.getLast();\r\n        if (end.hasTransitions())\r\n        {\r\n            throw new IllegalArgumentException(\"FIXED_ENDER for not fixed end expression. E.g ab*\");\r\n        }\r\n        NFAState prev = end;\r\n        Set<Transition<NFAState>> firstOfFixedEnder = null;\r\n        NFAState current = prev.prev();\r\n        while (current != null)\r\n        {\r\n            if (current.hasTransitionTo(null, prev) && prev.hasTransitionTo(null, current))\r\n            {\r\n                break;\r\n            }\r\n            Set<Transition<NFAState>> transitionSet = current.getSingleTransitionTo(prev);\r\n            if (transitionSet != null)\r\n            {\r\n                if (!NFAState.isSingleEpsilonOnly(transitionSet))\r\n                {\r\n                    list.add(current);\r\n                    firstOfFixedEnder = transitionSet;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (current.hasTransitionTo(null, prev))\r\n                {\r\n                    prev = current;\r\n                    current = prev.prev();\r\n                }\r\n                else\r\n                {\r\n                    throw new IllegalArgumentException(\"FIXED_ENDER expression problem\");\r\n                }\r\n                break;\r\n            }\r\n            prev = current;\r\n            current = prev.prev();\r\n        }\r\n        if (list.isEmpty())\r\n        {\r\n            throw new IllegalArgumentException(\"FIXED_ENDER too short. E.g, a*a\");\r\n        }\r\n        if (!current.hasTransitionTo(null, prev) || !prev.hasTransitionTo(null, current))\r\n        {\r\n            throw new IllegalArgumentException(\"FIXED_ENDER expression doesn't have repetition E.g a*. (1)\");\r\n        }\r\n        RangeSet rs = current.getNonEpsilonConditionsTo(prev);\r\n        if (rs.isEmpty())\r\n        {\r\n            throw new IllegalArgumentException(\"FIXED_ENDER expression doesn't have repetition E.g a*.(2)\");\r\n        }\r\n        for (NFAState s : list)\r\n        {\r\n            RangeSet rs2 = new RangeSet(rs);\r\n            RangeSet rs3 = s.getNonEpsilonConditions();\r\n            rs2.remove(rs3);\r\n            s.addTransition(rs2, current);\r\n        }\r\n        current.removeAllNonEpsilonConditionsTo(prev);\r\n        RangeSet rs4 = new RangeSet();\r\n        for (Transition<NFAState> tr : firstOfFixedEnder)\r\n        {\r\n            rs4.add(tr.getCondition());\r\n        }\r\n        rs.remove(rs4);\r\n        current.addTransition(rs, prev);\r\n        end.setFixedEndLength(list.size());\r\n    }", "public Builder executor ( Executor executor ) { this . executor = executor ; return this ; }", "public void putUnsignedInt32 ( long i ) { ensureCapacity ( NUM_ ) ; byte [ ] b = this . byteBuffer ; b [ this . position ++ ] = ( byte ) ( i & NUM_ ) ; b [ this . position ++ ] = ( byte ) ( i > > > NUM_ ) ; b [ this . position ++ ] = ( byte ) ( i > > > NU", "public void sendPacketToServer ( IPacket packet ) { checkClassAndSync ( packet . getClass ( ) ) ; clientOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . TOSERVER ) ; clientOutboundChannel . wr", "private JsonToken readingConstant ( JsonTokenType type , JsonToken token ) { try { int numCharsToRead = ( ( String ) type . getValidator ( ) ) . length ( ) ; char [ ] chars = new char [ numCharsToRead ] ; reader . read ( chars ) ; String stringRead = new String ( chars ) ; if ( stringRead . equals ( type . getValidator ( ) ) ) { token . setEndColumn ( token . getStartColumn ( ) + numCharsToRead ) ; token . setText ( stringRead ) ; return token ; } else { throwJsonException ( stringRead , type ) ; } } catch ( IOException ioe ) { throw new JsonException ( STR_ , ioe ) ; } return null ; }", "protected Cooccurrence filterCooccurence(JCas jCas, Annotation enclosingAnnot,\n            Annotation annot1, Annotation annot2, String[] ids1, String[] ids2) {\n\n        if (annot1.getAddress() < annot2.getAddress()) {\n            return super.filterCooccurence(jCas, enclosingAnnot, annot1, annot2, ids1,\n                    ids2);\n        } else {\n            return null;\n        }\n    }", "public void addFormField ( String name , String value ) { mWriter . append ( STR_ + mBoundary ) . append ( LINE_FEED ) ; mWriter . append ( STR_ + name + STR_ ) . append ( LINE_FEED ) ; mWriter . append ( STR_ + mCharset ) . append ( LINE_FEED ) ; mWriter", "@SuppressWarnings(\"null\")\n\tpublic static void assertEquals(final Object one, final Object two, final StatusType status) {\n\t\tif ((one == null) && (two == null)) {\n\t\t\treturn;\n\t\t}\n\t\tRESTAssert.assertNotNull(one, status);\n\t\tRESTAssert.assertTrue(one.equals(two), status);\n\t}", "static void addSpecialKey(String specialKeyName,int specialKeyCode){\n  if (specialKeys == null) {\n    specialKeys=new Hashtable();\n  }\n  specialKeys.put(specialKeyName,new Integer(specialKeyCode));\n}\n", "public boolean cancelSignatureRequest(String id) throws HelloSignException {\n        String url = BASE_URI + SIGNATURE_REQUEST_CANCEL_URI + \"/\" + id;\n        return HttpURLConnection.HTTP_OK == httpClient.withAuth(auth).post(url).asHttpCode();\n    }", "private static List<String> crossCatenate(List<List<String>> allWordsList){\n  List<String> crossList=new ArrayList<String>(allWordsList.get(0));\n  for (  List<String> wordList : allWordsList.subList(1,allWordsList.size())) {\n    int priorCrossListLength=crossList.size();\n    crossList=replicate(crossList,wordList.size());\n    for (int i=0; i < wordList.size(); i++) {\n      for (int j=0; j < priorCrossListLength; j++) {\n        int index=i * priorCrossListLength + j;\n        crossList.set(index,crossList.get(index) + \" \" + wordList.get(i));\n      }\n    }\n  }\n  return crossList;\n}\n", "    public boolean isEmpty() {\n        return start == null;\n    }\n", "  public boolean _equals_helper(TraderMoniker c) {\n    if (c==null) return false;\n    if (!super._equals_helper(c)) return false;\n    if (trader!=c.trader && (trader==null || !trader.equals(c.trader))) return false;\n    if(classname!=c.classname && (classname==null || c.classname == null || !classname.equals(c.classname))) return false;\n    if(name!=c.name && (name==null || c.name == null || !name.equals(c.name))) return false;\n    return true;\n  }\n", "public static <T>List<T> last(List<T> elements,int limit){\n  ArrayList<T> res=new ArrayList<T>();\n  for (int i=0; i < elements.size(); i++) {\n    if (res.size() >= limit) {\n      break;\n    }\n    res.add(elements.get(elements.size() - 1 - i));\n  }\n  return res;\n}\n", "protected Object create ( ) throws ResourceUnavailableException { PoolableThread thread = new PoolableThread ( this ) ; thread . setDaemon ( BOOL_ ) ; thread . start ( ) ; try { Thread . sleep ( NUM_ ) ; } catch ( InterruptedException e ) { logger . log (", "public PhoneDurationsImpl(URL url) throws IOException {\n  BufferedReader reader;\n  String line;\n  phoneDurations=new HashMap();\n  reader=new BufferedReader(new InputStreamReader(url.openStream()));\n  line=reader.readLine();\n  while (line != null) {\n    if (!line.startsWith(\"***\")) {\n      parseAndAdd(line);\n    }\n    line=reader.readLine();\n  }\n  reader.close();\n}\n", "protected UserApiKey createApiKeyInternal(final String name) {\n    final StitchAuthDocRequest.Builder reqBuilder = new StitchAuthDocRequest.Builder();\n    reqBuilder\n            .withMethod(Method.POST)\n            .withPath(this.getBaseRoute())\n            .withDocument(new Document(ApiKeyFields.NAME, name))\n            .withRefreshToken();\n    return getRequestClient().doAuthenticatedRequest(\n            reqBuilder.build(),\n            new UserApiKeyDecoder()\n    );\n  }", "   private void add(Query query) {\n      Set<String> keySet = query.keySet();\n      \n      for(String key : keySet) {\n         List<String> list = query.getAll(key);\n         String first = query.get(key);\n         \n         if(first != null) {\n            all.put(key, list);\n            map.put(key, first);\n         }\n      }                 \n   }\n", "\tprotected Sprite getIdeaSprite() {\n\t\tString idea = pet.getIdea();\n\n\t\tif(idea == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// TODO: Remove 'stop' idea on server side if not needed\n\t\tif(idea.equals(\"stop\")) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn SpriteStore.get().getSprite(\"data/sprites/ideas/\" + idea + \".png\");\n\t}\n", "public void onTimedText ( String text ) ;", "public List<Concept> getPathFromRoot() {\n        LinkedList<Concept> path = new LinkedList<>();\n\n        Concept node = this;\n        while (node != null) {\n            path.addFirst(node);\n            node = node.parent;\n        }\n\n        return path;\n    }", "@VisibleForTesting\n  List<Long> prepareRowBaseTimes() {\n    final ArrayList<Long> row_base_time_list = new ArrayList<Long>(\n        (int) ((end_row_time - start_row_time) / Const.MAX_TIMESPAN));\n    // NOTE: inclusive end here\n    long ts = (start_row_time - (start_row_time % Const.MAX_TIMESPAN));\n    while (ts <= end_row_time) {\n      row_base_time_list.add(ts);\n      ts += Const.MAX_TIMESPAN;\n    }\n    return row_base_time_list;\n  }", "  public JSONObject queryForObject (String query) {\n    if (query == null) {\n      throw new IllegalArgumentException();\n    }\n\n    JSONArray arr = query(query);\n    if (arr.size() == 0) {\n      return null;\n    } else if (arr.size() == 1) {\n      return arr.getJSONObject(0);\n    } else {\n      throw new TooManyResultsException(\"Expected 1 results, instead there were \" + arr.size());\n    }\n  }\n", "private void checkAlterInstantConverters() throws SecurityException {\n  SecurityManager sm=System.getSecurityManager();\n  if (sm != null) {\n    sm.checkPermission(new JodaTimePermission(\"ConverterManager.alterInstantConverters\"));\n  }\n}\n", "private float limitedScale(float targetScale){\n  targetScale=Math.max(minScale(),targetScale);\n  targetScale=Math.min(maxScale,targetScale);\n  return targetScale;\n}\n", "public void removeEventSourceListener(EventSourceListener listener){\n  LOG.entering(CLASS_NAME,\"removeEventSourceListener\",listener);\n  if (listener == null) {\n    throw new NullPointerException(\"listener\");\n  }\n  listeners.remove(listener);\n}\n", "public static double [ ] computeMinEuclideanDistancesNaive ( double [ ] [ ] observations ) { int numObservations = observations . length ; int dimensions = observations [ NUM_ ] . length ; double [ ] distances = new double [ numObservations ] ; for ( int ", "public void addFeature(int[] fIdxArray,float[] fValueArray){\n  idxList.addAll(Ints.asList(fIdxArray));\n  valList.addAll(Floats.asList(fValueArray));\n}\n", "@Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  String pathInfo=request.getPathInfo();\n  if (pathInfo == null) {\n    printError(response,\"Unsupported operation\");\n    return;\n  }\n  URL url=null;\n  try {\n    url=new URL(destinationUrl + pathInfo);\n  }\n catch (  MalformedURLException e) {\n    printError(response,\"Unable to build a URL for HTTP POST request\");\n    return;\n  }\n  HttpURLConnection connection=null;\n  try {\n    connection=openConnection(url);\n  }\n catch (  IOException e) {\n    printError(response,e.getMessage());\n    return;\n  }\n  try {\n    forwardPost(connection,request,response);\n  }\n catch (  IOException e) {\n    printError(response,e.getMessage());\n    return;\n  }\n finally {\n    closeConnection(connection);\n  }\n}\n", "\tprotected void notifyTreeListeners(GalleryItem item, boolean state) {\n\n\t\tEvent e = new Event();\n\t\te.widget = this;\n\t\te.item = item;\n\t\tif (item != null) {\n\t\t\te.data = item.getData();\n\t\t}\n\t\t// TODO: report index\n\t\t// e.index = index;\n\t\ttry {\n\t\t\tnotifyListeners(SWT.Expand, e);\n\t\t} catch (RuntimeException ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n", "@Override public double conf(double totalWeight,double totalPositiveWeight,Hypothesis hypo,double delta){\n  double g=hypo.getCoveredWeight() / totalWeight;\n  double p=hypo.getPositiveWeight() / hypo.getCoveredWeight();\n  double sg=variance(g,totalWeight);\n  double sp=variance(p,hypo.getCoveredWeight());\n  double inverseNormal=inverseNormal(1 - delta / 4);\n  return Math.sqrt(sg * inverseNormal) + sp * inverseNormal + Math.sqrt(sg * inverseNormal) * sp * inverseNormal;\n}\n", "private void onEvent ( NavigationManager . Event . OnLocationForward event ) { updateToolbar ( event . getCurrentValue ( ) ) ; }", "\tprivate void closeStmnt(Statement stmnt) {\n\t\tif (stmnt != null) {\n\t\t\ttry {\n\t\t\t\tstmnt.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// swallow exception. Since we're closing it we'll let it be dead.\n\t\t\t}\n\t\t}\n\t}\n", "private static String getServicePassCredential(String clazz, ITestContext context) {\n        if (System.getenv(\"SERVICES_PASS\") != null) {\n            return System.getenv(\"SERVICES_PASS\");\n        }\n        if (context.getAttribute(clazz + SERVICES_PASS) != null) {\n            return (String) context.getAttribute(clazz + SERVICES_PASS);\n        } else {\n            return \"\";\n        }\n    }", "private void tred2(){\n  for (int j=0; j < n; j++)   d[j]=V.get(n - 1,j);\n  for (int i=n - 1; i > 0; i--) {\n    double scale=0.0;\n    double h=0.0;\n    for (int k=0; k < i; k++) {\n      scale=scale + abs(d[k]);\n    }\n    if (scale == 0.0) {\n      e[i]=d[i - 1];\n      for (int j=0; j < i; j++) {\n        d[j]=V.get(i - 1,j);\n        V.set(i,j,0.0);\n        V.set(j,i,0.0);\n      }\n    }\n else {\n      for (int k=0; k < i; k++) {\n        d[k]/=scale;\n        h+=d[k] * d[k];\n      }\n      double f=d[i - 1];\n      double g=sqrt(h);\n      if (f > 0)       g=-g;\n      e[i]=scale * g;\n      h-=f * g;\n      d[i - 1]=f - g;\n      Arrays.fill(e,0,i,0.0);\n      for (int j=0; j < i; j++) {\n        f=d[j];\n        V.set(j,i,f);\n        g=e[j] + V.get(j,j) * f;\n        for (int k=j + 1; k <= i - 1; k++) {\n          g+=V.get(k,j) * d[k];\n          e[k]+=V.get(k,j) * f;\n        }\n        e[j]=g;\n      }\n      f=0.0;\n      for (int j=0; j < i; j++) {\n        e[j]/=h;\n        f+=e[j] * d[j];\n      }\n      double hh=f / (h + h);\n      for (int j=0; j < i; j++) {\n        e[j]-=hh * d[j];\n      }\n      for (int j=0; j < i; j++) {\n        f=d[j];\n        g=e[j];\n        for (int k=j; k <= i - 1; k++) {\n          V.increment(k,j,-(f * e[k] + g * d[k]));\n        }\n        d[j]=V.get(i - 1,j);\n        V.set(i,j,0.0);\n      }\n    }\n    d[i]=h;\n  }\n  for (int i=0; i < n - 1; i++) {\n    V.set(n - 1,i,V.get(i,i));\n    V.set(i,i,1.0);\n    double h=d[i + 1];\n    if (h != 0.0) {\n      for (int k=0; k <= i; k++) {\n        d[k]=V.get(k,i + 1) / h;\n      }\n      for (int j=0; j <= i; j++) {\n        double g=0.0;\n        for (int k=0; k <= i; k++) {\n          g+=V.get(k,i + 1) * V.get(k,j);\n        }\n        RowColumnOps.addMultCol(V,j,0,i + 1,-g,d);\n      }\n    }\n    RowColumnOps.fillCol(V,i + 1,0,i + 1,0.0);\n  }\n  for (int j=0; j < n; j++) {\n    d[j]=V.get(n - 1,j);\n    V.set(n - 1,j,0.0);\n  }\n  V.set(n - 1,n - 1,1.0);\n  e[0]=0.0;\n}\n", "public static Double evaluateToDouble(String expression,Map<String,Object> vars){\n  Object result=evaluate(expression,vars);\n  if (result == null) {\n    throw new IllegalStateException(\"Result must be not null\");\n  }\n  if (!isNumeric(String.valueOf(result))) {\n    throw new IllegalStateException(\"Result must be numeric: \" + result + \", \"+ result.getClass());\n  }\n  return Double.valueOf(String.valueOf(result));\n}\n", "private void checkPathParameterConditions(Method method,FieldSelector selector){\n  TypeRef type=selector.getType();\n  WellKnownType wkt=type.getWellKnownType();\n  if (type.isMap()) {\n    error(method,\"map field not allowed: reached via '%s' on message '%s'.\",selector.toString(),getInputMessageName(method));\n  }\n else   if (type.isRepeated()) {\n    error(method,\"repeated field not allowed: reached via '%s' on message '%s'.\",selector,getInputMessageName(method));\n  }\n else   if (type.isMessage() && !wkt.allowedAsPathParameter()) {\n    error(method,\"message field not allowed: reached via '%s' on message '%s'.\",selector,getInputMessageName(method));\n  }\n}\n", "public Location withS3(CodeGenNodeArg... s3) {\n        if (this.s3 == null) {\n            setS3(new java.util.ArrayList<CodeGenNodeArg>(s3.length));\n        }\n        for (CodeGenNodeArg ele : s3) {\n            this.s3.add(ele);\n        }\n        return this;\n    }", "public void addAll(final Collection<? extends T> collection){\nsynchronized (mLock) {\n    mList.addAll(collection);\n  }\n  notifyDataSetChanged();\n}\n", "IComment editComment ( final IComment comment , String newCommentText ) throws CouldntSaveDataException ;", "public boolean removeEntryFromCache ( IEntryHolder entryHolder ) { return removeEntryFromCache ( entryHolder , BOOL_ , BOOL_ , null , RecentDeleteCodes . NONE ) ; }", "\tpublic void saveViewerData() {\n\t\tint n = getNumPamProcesses();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tgetPamProcess(i).saveViewerData();\n\t\t}\n\t}\n", "  public String unrefThis(String nm, String o) {\n    return o + \".\" + unref(nm, \"this\") + \";\";\n  }\n", "static AttributeName nameByBuffer(@NoLength char[] buf,int offset,int length,boolean checkNcName){\n  int hash=AttributeName.bufToHash(buf,length);\n  int index=Arrays.binarySearch(AttributeName.ATTRIBUTE_HASHES,hash);\n  if (index < 0) {\n    return AttributeName.createAttributeName(Portability.newLocalNameFromBuffer(buf,offset,length),checkNcName);\n  }\n else {\n    AttributeName rv=AttributeName.ATTRIBUTE_NAMES[index];\n    @Local String name=rv.getLocal(AttributeName.HTML);\n    if (!Portability.localEqualsBuffer(name,buf,offset,length)) {\n      return AttributeName.createAttributeName(Portability.newLocalNameFromBuffer(buf,offset,length),checkNcName);\n    }\n    return rv;\n  }\n}\n", "private <T>T[] concat(T[] first,T[] second,Class<?> cls){\n  Collection<T> res=new ArrayList<>();\n  res.addAll(Arrays.asList(first));\n  res.addAll(Arrays.asList(second));\n  return res.toArray((T[])Array.newInstance(cls,res.size()));\n}\n", "public static <T,K,L extends List<T>>BiFunction<Partition<T,K,L>,T,Boolean> alwaysInsert(){\n  return null;\n}\n", "public static Test suite ( ) { return ( new TestSuite ( SelectManyCollectionITCase . class ) ) ; }", "public boolean deleteView ( final View view ) throws CouldntDeleteException { Preconditions . checkNotNull ( view , STR_ ) ; try { return m_project . getContent ( ) . deleteView ( view . getNative ( ) ) ; } catch ( final com . google . security . zynamics . binnavi . Database . Exceptions . CouldntDeleteException e ) { throw new CouldntDeleteException ( e ) ; } }", "public void trigger(String vaultName, String resourceGroupName, String fabricName, String containerName, String protectedItemName, BackupRequestResource parameters) {\n        triggerWithServiceResponseAsync(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, parameters).toBlocking().single().body();\n    }", "public final char getChar(int index) {\n\t\tif (index >= 0 && index < this.size - 1) {\n\t\t\treturn (char) ( ((this.memory[this.offset + index + 0] & 0xff) << 8) | \n\t\t\t\t\t\t\t(this.memory[this.offset + index + 1] & 0xff) );\n\t\t} else {\n\t\t\tthrow new IndexOutOfBoundsException();\n\t\t}\n\t}", "@Override\n    public void addConnectionListener(SICoreConnectionListener listener)\n                    throws SIConnectionDroppedException,\n                    SIConnectionUnavailableException {\n\n        checkValid();\n\n        _delegateConnection.addConne", "public void build(final String... args) {\n        if (args != null) {\n            final CmdLineParser parser = new CmdLineParser(this, ParserProperties.defaults().withUsageWidth(80));\n\n            try {\n                parser.parseArgument(args);\n            } catch (final CmdLineException e) {\n                throw new ClusterRunnerException(\"Failed to parse args: \" + Strings.arrayToDelimitedString(args, \" \"));\n            }\n        }\n\n        if (basePath == null) {\n            try {\n                basePath = Files.createTempDirectory(\"es-cluster\").toAbsolutePath().toString();\n            } catch (final IOException e) {\n                throw new ClusterRunnerException(\"Could not create $ES_HOME.\", e);\n            }\n        }\n\n        final Path esBasePath = Paths.get(basePath);\n        createDir(esBasePath);\n\n        final String[] types = moduleTypes == null ? MODULE_TYPES : moduleTypes.split(\",\");\n        for (final String moduleType : types) {\n            Class<? extends Plugin> clazz;\n            try {\n                clazz = Class.forName(moduleType).asSubclass(Plugin.class);\n                pluginList.add(clazz);\n            } catch (final ClassNotFoundException e) {\n                logger.debug(moduleType + \" is not found.\", e);\n            }\n        }\n        if (pluginTypes != null) {\n            for (final String value : pluginTypes.split(\",\")) {\n                final String pluginType = value.trim();\n                if (pluginType.length() > 0) {\n                    Class<? extends Plugin> clazz;\n                    try {\n                        clazz = Class.forName(pluginType).asSubclass(Plugin.class);\n                        pluginList.add(clazz);\n                    } catch (final ClassNotFoundException e) {\n                        throw new ClusterRunnerException(pluginType + \" is not found.\", e);\n                    }\n                }\n            }\n        }\n\n        print(\"Cluster Name: \" + clusterName);\n        print(\"Base Path:    \" + basePath);\n        print(\"Num Of Node:  \" + numOfNode);\n\n        for (int i = 0; i < numOfNode; i++) {\n            execute(i + 1);\n        }\n    }", "void save ( CView view ) throws CouldntSaveDataException ;", "    public void onCallModifying( Call call, String sdp, Message invite ) {\n\n    \tlog.debug( \"onCallModifying\", \"Init...\" );\n        \n        if ( call != this.call ) {\n        \tlog.debug( \"onCallModifying\", \"NOT the current call.\" );\n            return;\n        }\n        \n        log.debug( \"onCallModifying\", \"RE-INVITE/MODIFY.\" );\n        \n        // to be implemented.\n        // currently it simply accepts the session changes (see method\n        // onCallModifying() in CallListenerAdapter)\n        super.onCallModifying( call, sdp, invite );\n    }\n", "public <T> void set(ElementDescriptor<T> property, T value)\n\t{\n\t\tif (mSet == null)\n\t\t{\n\t\t\tmSet = new HashMap<ElementDescriptor<?>, Object>(16);\n\t\t}\n\t\tmSet.put(property, value);\n\n\t\tif (mRemove != null)\n\t\t{\n\t\t\tmRemove.remove(property);\n\t\t}\n\t}", "private void removeSleeper(final long identifier) throws InvalidIdentifierException {\n    final ComplexCondition call = sleeperMap.remove(identifier);\n    if (null == call) {\n      throw new InvalidIdentifierException(identifier);\n    }\n  }", "private void printJVMStats(final TSDB tsdb, final HttpQuery query) {\n    final Map<String, Map<String, Object>> map = \n        new HashMap<String, Map<String, Object>>();\n    \n    final RuntimeMXBean runtime_bean = ManagementFactory.getRuntimeMXBean();\n    final Map<String, Object> runtime = new HashMap<String, Object>();\n    map.put(\"runtime\", runtime);\n    \n    runtime.put(\"startTime\", runtime_bean.getStartTime());\n    runtime.put(\"uptime\", runtime_bean.getUptime());\n    runtime.put(\"vmName\", runtime_bean.getVmName());\n    runtime.put(\"vmVendor\", runtime_bean.getVmVendor());\n    runtime.put(\"vmVersion\", runtime_bean.getVmVersion());\n    \n    final MemoryMXBean mem_bean = ManagementFactory.getMemoryMXBean();\n    final Map<String, Object> memory = new HashMap<String, Object>();\n    map.put(\"memory\", memory);\n    \n    memory.put(\"heapMemoryUsage\", mem_bean.getHeapMemoryUsage());\n    memory.put(\"nonHeapMemoryUsage\", mem_bean.getNonHeapMemoryUsage());\n    memory.put(\"objectsPendingFinalization\",\n        mem_bean.getObjectPendingFinalizationCount());\n    \n    final List<GarbageCollectorMXBean> gc_beans = \n        ManagementFactory.getGarbageCollectorMXBeans();\n    final Map<String, Object> gc = new HashMap<String, Object>();\n    map.put(\"gc\", gc);\n    \n    for (final GarbageCollectorMXBean gc_bean : gc_beans) {\n      final Map<String, Object> stats = new HashMap<String, Object>();\n      final String name = formatStatName(gc_bean.getName());\n      if (name == null) {\n        LOG.warn(\"Null name for bean: \" + gc_bean);\n        continue;\n      }\n      \n      gc.put(name, stats);\n      stats.put(\"collectionCount\", gc_bean.getCollectionCount());\n      stats.put(\"collectionTime\", gc_bean.getCollectionTime());\n    }    \n    \n    final List<MemoryPoolMXBean> pool_beans = \n        ManagementFactory.getMemoryPoolMXBeans();\n    final Map<String, Object> pools = new HashMap<String, Object>();\n    map.put(\"pools\", pools);\n    \n    for (final MemoryPoolMXBean pool_bean : pool_beans) {\n      final Map<String, Object> stats = new HashMap<String, Object>();\n      final String name = formatStatName(pool_bean.getName());\n      if (name == null) {\n        LOG.warn(\"Null name for bean: \" + pool_bean);\n        continue;\n      }\n      pools.put(name, stats);\n      \n      stats.put(\"collectionUsage\", pool_bean.getCollectionUsage());\n      stats.put(\"usage\", pool_bean.getUsage());\n      stats.put(\"peakUsage\", pool_bean.getPeakUsage());\n      stats.put(\"type\", pool_bean.getType());\n    }\n    \n    final OperatingSystemMXBean os_bean = \n        ManagementFactory.getOperatingSystemMXBean();\n    final Map<String, Object> os = new HashMap<String, Object>();\n    map.put(\"os\", os);\n    \n    os.put(\"systemLoadAverage\", os_bean.getSystemLoadAverage());\n    \n    query.sendReply(query.serializer().formatJVMStatsV1(map));\n  }", "public static String markdownToHtml(String markdownString) {\n\t\tif (StringUtils.isBlank(markdownString)) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn HTML_RENDERER.render(MD_PARSER.parse(markdownString));\n\t}", "public List < Integer > generateLocaList ( ) { List < Integer > locas = new ArrayList < Integer > ( this . getGlyphBuilders ( ) . size ( ) ) ; locas . add ( NUM_ ) ; if ( this . getGlyphBuilders ( ) . size ( ) == NUM_ ) { locas . add ( NUM_ ) ; } else { int total = NUM_ ; for ( Glyph . Builder < ? extends Glyph > b : this . getGlyphBuilders ( ) ) { int size = b . subDataSizeToSerialize ( ) ; locas . add ( total + size ) ; total += size ; } } return locas ; }", "public static boolean seekToBeginning(KafkaConsumer<?, ?> consumer, String topic) {\n        boolean result = false;\n        synchronized (consumer) {\n            Set<TopicPartition> topicParts = consumer.assignment();\n            if (topicParts != null) {\n                for (TopicPartition tp : topicParts) {\n                    if (StringUtils.equals(topic, tp.topic())) {\n                        consumer.seekToBeginning(Arrays.asList(tp));\n                        // we want to seek as soon as possible\n                        // since seekToEnd evaluates lazily, invoke position()\n                        // so\n                        // that seeking will be committed.\n                        consumer.position(tp);\n                        result = true;\n                    }\n                }\n                if (result) {\n                    consumer.commitSync();\n                }\n            }\n        }\n        return result;\n    }", "@Override public byte[] read(int length) throws IOException {\n  if (length > available()) {\n    throw new EndOfBufferException();\n  }\n  byte[] res=new byte[length];\n  System.arraycopy(buffer,read_pos,res,0,length);\n  read_pos=read_pos + length;\n  return res;\n}\n", "\tpublic void flags_PSH(final boolean value) {\n\t\tsetFlag(value, FLAG_PSH);\n\t}\n", "public void writeEndWiki ( ) throws IOException { super . writeEndWiki ( ) ; if ( revisions % interval != NUM_ ) showProgress ( ) ; }", "    public AClassNameTypePoolInfo interfaceMethodCase(InterfaceMethodPoolInfo host, Object o) {\n        return host;\n    }\n", "public LinkingMorphemes ( BufferedReader aReader ) throws IOException { morphemes = new ArrayList < String > ( ) ; String line ; while ( ( line = aReader . readLine ( ) ) != null ) { if ( line . length ( ) > NUM_ && line . charAt ( NUM_ ) != STR_ ) { morp", "public boolean containsKey ( Object key ) { int h = hash ( key . hashCode ( ) ) ; return segFor ( h ) . containsKey ( key , h ) ; }", "\tpublic InputStream get(String path) {\n\t\tXMLObject request, response;\n\n\t\t// create and\n                // process request\n\n                request = XMLFactory.createRequest(\"DB\", \"GET\", getDriverContext(), new XMLObject[]{\n\t\t\tXMLFactory.createData(\"OBJECT\", path)\n\t\t});\n\n                response = this.process(request);\n                //System.out.println(\"RESPONSE FROM OBJECTDB: \" + response.toString() );\n\n                // check for error\n\n                if (XMLFactory.isError(response.getChild(0))) {\n\t\t\tthis.setLastError(response.getChild(0));\n\t\t\treturn null;\n\t\t} else\n\t\t\t// return data stream\n\t\t\treturn this.getData(0);\n\t}\n", "public int setState(boolean state, boolean bDisplayOption, int iMoveMode)\n    {\n        String tempString = \"N\";\n        if (state)\n            tempString = \"Y\";\n        return this.setString(tempString, bDisplayOption, iMoveMode); // Move value to this field\n    }", "public static Test suite ( ) { return ( new TestSuite ( SelectManyCollectionITCase . class ) ) ; }", "public static void makeBooleanMatrixFile ( boolean matrix [ ] [ ] , String outputFileName ) throws IOException { int rowSize = matrix . length ; int colSize = matrix [ NUM_ ] . length ; createDirectories ( outputFileName ) ; BufferedWriter out = new BufferedWriter ( new FileWriter ( outputFileName ) ) ; for ( int i = NUM_ ; i < rowSize ; i ++ ) { for ( int j = NUM_ ; j < colSize ; j ++ ) { if ( matrix [ i ] [ j ] == BOOL_ ) { out . write ( STR_ ) ; } else { out . write ( STR_ ) ; } if ( j == colSize - NUM_ ) { out . write ( STR_ ) ; } } } out . close ( ) ; }", "\tpublic void addCellDoubleClickListener(ICellDoubleClickListener listener) {\n\t\tcheckWidget();\n\n\t\tcellDoubleClickListeners.add(listener);\n\t}\n", "public static LdapName newLdapName(String distinguishedName) {\n        Assert.notNull(distinguishedName, \"distinguishedName must not be null\");\n\n        try {\n            return new LdapName(distinguishedName);\n        } catch (InvalidNameException e) {\n            throw convertLdapException(e);\n        }\n    }", "    public E next() {\n        if (hasNext() == false) {\n            throw new NoSuchElementException();\n        }\n        return array[index++]; \n    }\n", "private static boolean requiredByOtherFeature(ContentBasedLocalBundleRepository br, Map<String, ProvisioningFeatureDefinition> features, File b) {\n        for (ProvisioningFeatureDefinition fd : features.values()) {\n            if (requiredByJar(br, fd, b))\n                return true;\n        }\n        return false;\n    }", "\tprivate void suspect() {\n\n\t\tSuspectEvent commPeerSuspectedEvent = new SuspectEvent(monitoredNode);\n\t\tfailureDetectorComponent.trigger(commPeerSuspectedEvent);\n\n\t}\n", "public static long calculateDelta(long reportedHandledCount, long lastKnownHandledCount) {\n        if (lastKnownHandledCount > reportedHandledCount) {\n            throw new IllegalStateException(\"Illegal Stream Management State: Last known handled count (\" + lastKnownHandledCount + \") is greater than reported handled count (\" + reportedHandledCount + ')');\n        }\n        return (reportedHandledCount - lastKnownHandledCount) & MASK_32_BIT;\n    }", "public void eraseViewIfNeeded ( ViewGroup view ) { if ( view . getChildCount ( ) > NUM_ ) { view . removeAllViews ( ) ; } }", "public Object clone() {\n\t\tStyle clone = null;\n\t\ttry {\n\t\t\tclone = (Style)super.clone();\n\t\t} catch (CloneNotSupportedException cnse) { // Never happens\n\t\t\tcnse.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t\tclone.foreground = foreground;\n\t\tclone.background = bac", "public String formatAppendableComment ( SqlOperation sqlOperation , String comment ) ;", "void onTargetNotification ( Observable < Message > oMessage ) ;", "private float calcRank ( DecompoundedWord aSplit ) { float result = NUM_ ; for ( Fragment elem : aSplit . getSplits ( ) ) { result += - NUM_ * Math . log ( freq ( elem ) . doubleValue ( ) / getFinder ( ) . getUnigramCount ( ) . doubleValue ( ) ) ; } return result ; }", "IEspStatusRemote doCommandRemoteGetStatusInternet ( String deviceKey ) ;", "void addLabel(Component label){\n  if (labels == null) {\n    labels=new Vector();\n  }\n  labels.addElement(label);\n}\n", "public MatchResult match(){\n  if (!matchSuccessful) {\n    throw new IllegalStateException();\n  }\n  return matcher.toMatchResult();\n}\n", "    public void setNext(@NonNull Problem next) throws IllegalStateException {\n        if (this.next != null) {\n            throw new IllegalStateException(\"Cannot change \\\"next\\\" property of Problem.\"); //NOI18N\n        }\n        this.next = next;\n    }\n", "boolean onQueryTextChange ( String newText ) ;", "@Override public void validate(){\n  super.validate();\nswitch (barrierType) {\ncase DownIn:\ncase UpIn:\ncase DownOut:\ncase UpOut:\n    break;\ndefault :\n  throw new LibraryException(UNKNOWN_TYPE);\n}\nQL.require(!Double.isNaN(barrier),\"no barrier given\");\nQL.require(!Double.isNaN(rebate),\"no rebate given\");\n}\n", "public void actionKillUserSessions() throws Exception {\r\n\r\n        CmsUUID userId = new CmsUUID(m_paramUserId);\r\n        CmsObject cms = getCms();\r\n        CmsUser user = cms.readUser(userId);\r\n        OpenCms.getSessionManager().killSession(cms, user);\r\n        actionCloseDialog();\r\n    }", "public List<T> lruValues(){\n  ArrayList<T> lruValues=new ArrayList<T>(pmap.size());\n  CacheNode<T> next=lruFirst;\n  while (next != null) {\n    lruValues.add(next.get());\n    next=next.getAfter();\n  }\n  return lruValues;\n}\n", "private static void readDataFromBinlog(ReplicatorRuntime runtime,BinlogReader binlog,byte[] data,int offset,int length,int timeout) throws IOException, ReplicatorException, InterruptedException {\n  boolean alreadyLogged=false;\n  int spentTime=0;\n  int timeoutInMs=timeout * 1000;\n  long available;\n  while ((available=binlog.available()) < (long)length) {\n    if (!alreadyLogged) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Trying to read more bytes (\" + length + \") than available in the file (\"+ available+ \" in \"+ binlog.getFileName()+ \")... waiting for data to be available\");\n      }\n      alreadyLogged=true;\n    }\n    try {\n      if (spentTime < timeoutInMs) {\n        Thread.sleep(1);\n        spentTime++;\n      }\n else       throw new MySQLExtractException(\"Timeout while waiting for data : spent more than \" + timeout + \" seconds while waiting for \"+ length+ \" bytes to be available\");\n    }\n catch (    InterruptedException e) {\n    }\n  }\n  binlog.read(data,offset,length);\n}\n", "public static int aspectRatioDenominator(Size size){\n  BigInteger width=BigInteger.valueOf(size.width());\n  BigInteger height=BigInteger.valueOf(size.height());\n  BigInteger gcd=width.gcd(height);\n  int denominator=Math.min(width.intValue(),height.intValue()) / gcd.intValue();\n  return denominator;\n}\n", "public void deleteObservers ( ) ;", "     public void setOverrideCursor(int cursorIdent) {\n        if (cursorIdent < DEFAULT_CURSOR || cursorIdent > MOVE_CURSOR) {\n            throw new InconsistencyException(\"Unknown cursor type: \" +\n                                             cursorIdent);\n        }\n\n        if (_overrideCursor != cursorIdent) {\n            _overrideCursor = cursorIdent;\n            flushCursor();\n        }\n    }\n", "public static void showNodes ( final Window parent , final ZyGraph graph , final Collection < NaviNode > nodes , final boolean visible ) { Preconditions . checkNotNull ( parent , STR_ ) ; Preconditions . checkNotNull ( graph , STR_ ) ; Preconditions . checkNotNull ( nodes , STR_ ) ; if ( visible ) { final ZyGraphViewSettings settings = graph . getSettings ( ) ; final Set < NaviNode > neighbours = ProximityRangeCalculator . getNeighbors ( graph , nodes , settings . getProximitySettings ( ) . getProximityBrowsingChildren ( ) , settings . getProximitySettings ( ) . getProximityBrowsingParents ( ) ) ; neighbours . addAll ( nodes ) ; final int invisibleNodes = countInvisibleNodes ( neighbours ) ; if ( userCancelsMakingVisible ( parent , graph , invisibleNodes ) ) { return ; } } graph . showNodes ( nodes , visible ) ; }", "public void process(List<T> objects) {\n        for (T message : objects) {\n            // If this batcher has been shutdown, do not accept any more\n            // messages\n            if (isShutDown) {\n                return;\n            }\n            process(message);\n        }\n    }", "  public String getAuthority()\n  {              \n    parse();\n    return auth;\n  }                   \n", "public void close() throws IOException\n    {\n        if (tc.isEntryEnabled()) Tr.entry(tc, \"close\", new Object[]{this, _file});\n       \n    // By locking on the class rather than the object, and removing\n    // the inner lock on the class, this seems to resolve the problems\n    // reported in d347231 that file handles were not being released properly\n    //    synchronized(this) \n\t\tsynchronized(RLSAccessFile.class)\n        { \n            _useCount--;\n            if (tc.isDebugEnabled()) Tr.debug(tc, \"remaining file use count\", new Integer(_useCount));\n\n            // Check for 0 usage and close the actual file.  \n            // One needs to be aware that close() can be called both directly by the user on\n            // file.close(), and also indirectly by the JVM.  The JVM will call close() on a\n            // filechannel.close() and also recursively call filechanel.close() and hence close()\n            // on a file.close().   For this reason, filechannel.close() has been removed from\n            // LogFileHandle calls - but it is still in CoordinationLock just in case the behaviour\n            // of the JVM changes wrt lock releases.   This behaviour can make interesting trace\n            // reading because one can get the use count dropping to -1 either because of two\n            // serial calls (filechannel.close() + file.close()) or two recursive calls (ie\n            // file.close() calling filechannel.close() calling file.close()).\n\n            // Trace an innocious exception to help debug any recursion problems.\n            if (tc.isDebugEnabled() && (_useCount <= 0))\n            {\n                Tr.debug(tc, \"call stack\", new Exception(\"Dummy traceback\"));\n            }\n            if (_useCount == 0)\n            {\n                 super.close();\n       // Outer lock is now on class, so no need to lock here (d347231)\n       //          synchronized(RLSAccessFile.class)  \n       //          { \n                     _accessFiles.remove(_file);\n       //          }\n            }\n        }\n\n        if (tc.isEntryEnabled()) Tr.exit(tc, \"close\");\n    }", "public static base_response add(nitro_service client, policydataset resource) throws Exception {\n\t\tpolicydataset addresource = new policydataset();\n\t\taddresource.name = resource.name;\n\t\taddresource.type = resource.type;\n\t\taddresource.indextype = resource.indextype;\n\t\treturn addresource.add_resource(client);\n\t}", "private static Class registerTypeMapping(RPCServer server,Class clazz){\n  java.lang.reflect.Method[] methods=clazz.getMethods();\n  java.lang.reflect.Method method;\n  Class[] params;\n  for (int i=0; i < methods.length; i++) {\n    method=methods[i];\n    if (method.getDeclaringClass() == clazz) {\n      _registerTypeMapping(server,method.getReturnType());\n      params=method.getParameterTypes();\n      for (int y=0; y < params.length; y++) {\n        _registerTypeMapping(server,params[y]);\n      }\n    }\n  }\n  return clazz;\n}\n", "public MultiBufferProductScan ( Scan lhsScan , TableInfo ti , Transaction tx ) { this . lhsScan = lhsScan ; this . ti = ti ; this . tx = tx ; fileSize = ti . open ( tx , BOOL_ ) . fileSize ( ) ; chunkSize = BufferNeeds . bestFactor ( fileSize , tx ) ; beforeFirst ( ) ; }", "public TransferEntropyCalculatorKernelPlainIterators ( ) { super ( ) ; }", "protected base_resource[] get_nitro_bulk_response(nitro_service service, String response) throws Exception\r\n\t{\r\n\t\tns_ns_runningconfig_responses result = (ns_ns_runningconfig_responses) service.get_payload_formatter().string_to_resource(ns_ns_runningconfig_responses.class, response);\r\n\t\tif(result.errorcode != 0)\r\n\t\t{\r\n\t\t\tif (result.errorcode == SESSION_NOT_EXISTS)\r\n\t\t\t\tservice.clear_session();\r\n\t\t\tthrow new nitro_exception(result.message, result.errorcode, (base_response [])result.ns_ns_runningconfig_response_array);\r\n\t\t}\r\n\t\tns_ns_runningconfig[] result_ns_ns_runningconfig = new ns_ns_runningconfig[result.ns_ns_runningconfig_response_array.length];\r\n\t\t\r\n\t\tfor(int i = 0; i < result.ns_ns_runningconfig_response_array.length; i++)\r\n\t\t{\r\n\t\t\tresult_ns_ns_runningconfig[i] = result.ns_ns_runningconfig_response_array[i].ns_ns_runningconfig[0];\r\n\t\t}\r\n\t\t\r\n\t\treturn result_ns_ns_runningconfig;\r\n\t}", "public void unschedule(final org.easybatch.core.job.Job job) throws JobSchedulerException {\n        String jobName = job.getName();\n        LOGGER.info(\"Unscheduling job ''{}'' \", jobName);\n        try {\n            scheduler.unscheduleJob(TriggerKey.triggerKey(TRIGGER_NAME_PREFIX + jobName));\n        } catch (SchedulerException e) {\n            throw new JobSchedulerException(format(\"Unable to unschedule job '%s'\", jobName), e);\n        }\n    }", "private void rebuildNode ( ) { m_realizer . regenerate ( ) ; m_graph . updateViews ( ) ; }", "private PluggablePublisher createPublisher ( ) { if ( PublisherType . DISRUPTOR . equals ( publisherType ) ) { logger . debug ( STR_ + stringifiedName + STR_ ) ; return DisruptorReferringPublisher . getInstance ( ) ; } else { logger . debug ( STR_ + strin", "\tprotected void addValueTypePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Value_valueType_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_Value_valueType_feature\", \"_UI_Value_type\"),\n\t\t\t\t TestpackagePackage.Literals.VALUE__VALUE_TYPE,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public static String classNameOnly ( String typeName ) { String dotted = descriptorToDot ( typeName ) ; int start = dotted . lastIndexOf ( STR_ ) ; if ( start < NUM_ ) { return dotted ; } else { return dotted . substring ( start + NUM_ ) ; } }", "@Override public final int whichSubset(Instance instance) throws Exception {\n  return m_c45S.whichSubset(instance);\n}\n", "private static String aliasAsUrlPattern(final String alias) {\n\t\tString urlPattern = alias;\n\t\tif (urlPattern != null && !urlPattern.equals(\"/\")\n\t\t\t\t&& !urlPattern.contains(\"*\")) {\n\t\t\tif (urlPattern.endsWith(\"/\")) {\n\t\t\t\turlPattern = urlPattern + \"*\";\n\t\t\t} else {\n\t\t\t\turlPattern = urlPattern + \"/*\";\n\t\t\t}\n\t\t}\n\t\treturn urlPattern;\n\t}", "public static boolean asBoolean ( Character character ) { return character != NUM_ ; }", "public ActionFuture<IndexResponse> sendDataAsync(\n            String jsonSource, String index, String type, String id) {\n        return indexQueryAsync(buildIndexRequest(jsonSource, index, type, id));\n    }", "    protected void init() {\n        JScrollPane scrollPane = new JScrollPane(tree);\n        setLayout(new GridLayout(1, 0));\n        add(scrollPane);\n    }\n", "private void initParameterRemovalLists(){\n  parameter_to_remove_for_all_request=new ArrayList<>();\n  parameter_to_remove_after_initial_request=new ArrayList<>();\n  parameter_to_remove_for_all_request.add(EXPAND_PARAM);\n  parameter_to_remove_after_initial_request.addAll(parameter_to_remove_for_all_request);\n  parameter_to_remove_after_initial_request.add(\"limit\");\n  parameter_to_remove_after_initial_request.add(\"offset\");\n}\n", "public static void checkAttributes(String typeOfTag,Node n,ValidAttribute[] validAttributes,ErrorDispatcher err) throws JasperException {\n  Attributes attrs=n.getAttributes();\n  Mark start=n.getStart();\n  boolean valid=true;\n  int tempLength=(attrs == nul", "public void finish(){\n  if (readyToUse == false) {\n    readyToUse=true;\n    outList.clear();\n    if (tableView.size() == 0)     return;\n    for (    Map.Entry<Node,List<VarType>> entry : tableView.entrySet()) {\n      List<VarType> resList=entry.getValue();\n      outList.addAll(resList);\n    }\n  }\n}\n", "public void remove ( IObjectInfo < T > oi ) { lock . lock ( ) ; try { remove_impl ( ( ObjectInfo < T > ) oi ) ; } finally { lock . unlock ( ) ; } }", "public void output(PrintWriter out){\n  if (doctype != null) {\n    doctype.output(out);\n    try {\n      out.write('\\n');\n    }\n catch (    Exception e) {\n    }\n  }\n  html.output(out);\n}\n", "public static List<CommerceTaxFixedRateAddressRel> toModels(\n\t\tCommerceTaxFixedRateAddressRelSoap[] soapModels) {\n\t\tif (soapModels == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tList<CommerceTaxFixedRateAddressRel> models = new ArrayList<CommerceTaxFixedRateAddressRel>(soapModels.length);\n\n\t\tfor (CommerceTaxFixedRateAddressRelSoap soapModel : soapModels) {\n\t\t\tmodels.add(toModel(soapModel));\n\t\t}\n\n\t\treturn models;\n\t}", "public Builder deleteRoles ( List < String > deleteRoles ) { this . deleteRoles = deleteRoles ; return this ; }", "public int hashCode(){\n  if (hashcode == 0) {\n    int result=17;\n    result=37 * result + issuer.hashCode();\n    result=37 * result + serial.hashCode();\n    hashcode=result;\n  }\n  return hashcode;\n}\n", "private static int findClosest ( int desiredFactor , Set < Integer > factors ) { int bestFactor = NUM_ ; int bestDelta = desiredFactor ; for ( Integer factor : factors ) { int testDelta = Math . abs ( desiredFactor - factor ) ; if ( testDelta < bestDelta ", "\tpublic void ontPortDisabled() {\n\t\tfor (int i = 0; i < 32; i++) {\n\t\t\tjbnPort[i].setEnabled(false);\n\t\t}\n\t\tjbnPort[32].setEnabled(false);\n\t\tjbnPort[33].setEnabled(false);\n\t\tjbnPort[34].setEnabled(false);\n\t\tjbnOnt[32].setEnabled(false);\n\t}\n", "\tpublic boolean isTypeSupported(ModelObject obj) {\n\t\treturn(obj instanceof LanguageModel ||\n\t\t\t\tobj instanceof ConversationModel);\n\t}\n", "    public Boolean isCodemakerHuman() {\n        return ((GameDomainController)gdc).isCodemakerHuman();\n    }\n", "public SafeArray ( ) { this ( NUM_ ) ; }", "public static String implode(Collection<String> items,String delimiter){\n  Parameters.notNull(\"items\",items);\n  Parameters.notNull(\"delimiter\",delimiter);\n  if (items.isEmpty()) {\n    return \"\";\n  }\n  StringBuilder buffer=new StringBuilder(200);\n  boolean first=true;\n  for (  String s : items) {\n    if (!first) {\n      buffer.append(delimiter);\n    }\n    buffer.append(s);\n    first=false;\n  }\n  return buffer.toString();\n}\n", "  private void writeAttribute(Writer out, String name, int type, boolean required) throws IOException {\n    String useType = null;\n    if (required) {\n      useType = \"required\";\n    } else {\n      useType = \"optional\";\n    }\n    out.write(\"\\t\\t\\t<xsd:attribute name=\\\"\" + name + \"\\\" type=\\\"\" + attributeTypeToSchemaType(type) + \"\\\" use=\\\"\" + useType + \"\\\"/>\\n\");\n  }\n", "public static P<String> fullTextMatch(String configuration, boolean plain, final List<String> columns, final String value){\n\t\tStringBuilder query=new StringBuilder(); \n\t\tint count=1;\n\t\tfor (String column : columns) {\n\t\t\tquery.append(\"\\\"\"+column+\"\\\"\");\n            if (count++ < columns.size()) {\n            \tquery.append(\" || ' ' || \");\n            }\n        }\n\t\treturn new P<>(new FullText(configuration,query.toString(),plain),value);\n\t}", "public void testModeratelyComplexTemplating ( ) throws Exception { HtmlPage page = getPage ( STR_ ) ; String text = page . asText ( ) ; assertTrue ( text . contains ( STR_ ) ) ; }", "@Override\n    public String parameters() {\n        StringBuilder result = new StringBuilder();\n        Iterator<Pair> it = xy.iterator();\n        while (it.hasNext()) {\n            Pair pair = it.next();\n            result.append(String.format(\"%s %s\",\n                    Op.str(pair.getX()), Op.str(pair.getY())));\n            if (it.hasNext()) {\n                result.append(\" \");\n            }\n        }\n        if (!Op.isEq(height, 1.0)) {\n            result.append(String.format(\" %s\", Op.str(height)));\n        }\n        return result.toString();\n    }", "public void unregisterTaskDef(String taskType) {\n        Preconditions.checkArgument(StringUtils.isNotBlank(taskType), \"Task type cannot be blank\");\n        delete(\"metadata/taskdefs/{tasktype}\", taskType);\n    }", "public static String getAtonType(BigInteger ts) {\n\t\tif (ts == null)\n\t\t\treturn null;\n\t\telse\n\t\t\treturn getAtonType(ts.intValue());\n\t}", "public int call(String method, Object[] params,\n            DDPListener resultListener) {\n        return getDDP().call(method, params, resultListener);\n    }", "    public void texture(PImage image) {\n        if (recorder != null)\n            recorder.texture(image);\n        g.texture(image);\n    }\n", "public void put(E e){\n  offer(e);\n}\n", "    public String getRegexEquivalent() {\n        if (strings.size() == 0) {\n            return toString();\n        }\n        StringBuffer result = new StringBuffer(\"(?:\");\n        _generatePattern(result, true, false);\n        for (String s : strings) {\n            result.append('|');\n            _appendToPat(result, s, true);\n        }\n        return result.append(\")\").toString();\n    }\n", "public static File downloadFileFrom(Release release) throws IOException {\n  File file=new File(NamingUtils.buildNameFrom(release));\n  if (!file.exists()) {\n    obtainNewJarFrom(release,file);\n  }\n  return file;\n}\n", "@SuppressWarnings(\"unchecked\") public static void register(String algorithmURI,String implementingClass) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException, InvalidTransformException {\n  JavaUtils.checkRegisterPermission();\n  Class<? extends TransformSpi> transformSpi=transformSpiHash.get(algorithmURI);\n  if (transformSpi != null) {\n    Object exArgs[]={algorithmURI,transformSpi};\n    throw new AlgorithmAlreadyRegisteredException(\"algorithm.alreadyRegistered\",exArgs);\n  }\n  Class<? extends TransformSpi> transformSpiClass=(Class<? extends TransformSpi>)ClassLoaderUtils.loadClass(implementingClass,Transform.class);\n  transformSpiHash.put(algorithmURI,transformSpiClass);\n}\n", "public boolean retainEntries ( TDoubleLongProcedure procedure ) { boolean modified = BOOL_ ; byte [ ] states = _states ; double [ ] keys = _set ; long [ ] values = _values ; for ( int i = keys . length ; i -- > NUM_ ; ) { if ( states [ i ] == FULL && ! procedure . execute ( keys [ i ] , values [ i ] ) ) { removeAt ( i ) ; modified = BOOL_ ; } } return modified ; }", "public static Integer getPartCount(GetObjectRequest getObjectRequest, AmazonS3 s3) {\n        ValidationUtils.assertNotNull(s3, \"S3 client\");\n        ValidationUtils.assertNotNull(getObjectRequest, \"GetObjectRequest\");\n\n        GetObjectMetadataRequest getObjectMetadataRequest = RequestCopyUtils.createGetObjectMetadataRequestFrom(getObjectRequest)\n                .withPartNumber(1);\n\n        return s3.getObjectMetadata(getObjectMetadataRequest).getPartCount();\n    }", "public static PublicKey generatePublicKey ( String encodedPublicKey ) { try { byte [ ] decodedKey = Base64 . decode ( encodedPublicKey ) ; KeyFactory keyFactory = KeyFactory . getInstance ( KEY_FACTORY_ALGORITHM ) ; return keyFactory . generatePublic ( ne", "  public void setActive(Boolean active) {\n    throwExceptionIfImmutable();\n    this.active = active;\n  }\n", "public void setDesiredShardLevelMetrics(java.util.Collection<String> desiredShardLevelMetrics) {\n        if (desiredShardLevelMetrics == null) {\n            this.desiredShardLevelMetrics = null;\n            return;\n        }\n\n        this.desiredShardLevelMetrics = new com.amazonaws.internal.SdkInternalList<String>(desiredShardLevelMetrics);\n    }", "private void addGroupText(FormEntryCaption[] groups){\n  StringBuilder s=new StringBuilder(\"\");\n  String t=\"\";\n  int i;\n  for (  FormEntryCaption g : groups) {\n    i=g.getMultiplicity() + 1;\n    t=g.getLongText();\n    if (t != null) {\n      s.append(t);\n      if (g.repeats() && i > 0) {\n        s.append(\" (\" + i + \")\");\n      }\n      s.append(\" > \");\n    }\n  }\n  if (s.length() > 0) {\n    TextView tv=new TextView(getContext());\n    tv.setText(s.substring(0,s.length() - 3));\n    int questionFontsize=Collect.getQuestionFontsize();\n    tv.setTextSize(TypedValue.COMPLEX_UNIT_DIP,questionFontsize - 4);\n    tv.setPadding(0,0,0,5);\n    mView.addView(tv,mLayout);\n  }\n}\n", "public static void loadFromSystemProperty(String propertyFileSystemProperty, String defaultPropertyFilePath) {\n        String path = System.getProperty(propertyFileSystemProperty);\n\n        if (path == null) {\n            path = defaultPropertyFilePath;\n            System.setProperty(propertyFileSystemProperty, path);\n            log.info(\"Using default \" + propertyFileSystemProperty + \" value: \"\n                     + path + \".  To override default specify java commandline param -D\"\n                     + propertyFileSystemProperty + \"=/your/prop/file/path/here\");\n        } else {\n            log.info(\"Using user-defined \" + propertyFileSystemProperty + \" property: \" + path);\n        }\n\n        if (!new File(path).exists()) {\n            log.error(path + \" does not exist. It is required to run this application. Exiting...\");\n            System.exit(1);\n        } else {\n            try {\n                SystemPropertyLoader.load(path);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }", "public static void walkFileTree(File directory,FileTreeVisitor visitor){\n  visitor.preVisitDirectory(directory);\n  File[] files=directory.listFiles();\n  if (files != null) {\n    for (    File file : files) {\n      if (file.isDirectory()) {\n        walkFileTree(file,visitor);\n      }\n else {\n        visitor.visitFile(file);\n      }\n    }\n  }\n  visitor.postVisitDirectory(directory);\n}\n", "private boolean sendMessageToDefaultCallback(final PluginResult message){\n  if (jsDefaultCallback == null) {\n    defaultCallbackStoredResults.add(message);\n    return false;\n  }\n  message.setKeepCallback(true);\n  jsDefaultCallback.sendPluginResult(message);\n  return true;\n}\n", "    public void dispose() {\n        this.backGround = null;\n        this.fontStyle = null;\n        this.foreGround = null;\n        this.syntaxName = null;\n    }\n", "void addClassToScope ( Node n ) { Preconditions . checkState ( n . isClass ( ) ) ; String className = NodeUtil . getName ( n ) ; if ( className == null ) { return ; } addTypeToScope ( n , className ) ; }", "\tpublic void closeNodeScope(Node n, int num) {\n\t\tmk = ((Integer) marks.pop()).intValue();\n\t\twhile (num-- > 0) {\n\t\t\tNode c = popNode();\n\t\t\tc.jjtSetParent(n);\n\t\t\tn.jjtAddChild(c, num);\n\t\t}\n\t\tn.jjtClose();\n\t\tpushNode(n);\n\t\tnode_created = true;\n\t}\n", "@Override\n    protected void boot(final BootContext context) throws ConfigurationPersistenceException {\n\n        final ServiceTarget serviceTarget = context.getServiceTarget();\n        boolean ok = false;\n        boolean reachedServers = false;\n\n        try {\n            // Install server inventory callback\n            ServerInventoryCallbackService.install(serviceTarget);\n\n            // handler for domain server auth.\n            DomainManagedServerCallbackHandler.install(serviceTarget);\n            // Parse the host.xml and invoke all the ops. The ops should rollback on any Stage.RUNTIME failure\n            List<ModelNode> hostBootOps = hostControllerConfigurationPersister.load();\n            if (hostBootOps.isEmpty()) { // booting with empty config\n                ok = bootEmptyConfig(context);\n                return;\n            }\n\n            // We run the first op (\"/host=foo:add()\") separately to let it set up the host ManagementResourceRegistration\n            ModelNode addHostOp = hostBootOps.remove(0);\n            HostControllerLogger.ROOT_LOGGER.debug(\"Invoking the initial host=foo:add() op\");\n            //Disable model validation here since it will will fail\n            ok = boot(Collections.singletonList(addHostOp), true, true);\n\n            // Add the controller initialization operation\n            hostBootOps.add(registerModelControllerServiceInitializationBootStep(context));\n\n            //Pass in a custom mutable root resource registration provider for the remaining host model ops boot\n            //This will be used to make sure that any extensions added in parallel get registered in the host model\n            if (ok) {\n                HostControllerLogger.ROOT_LOGGER.debug(\"Invoking remaining host.xml ops\");\n                ok = boot(hostBootOps, true, true, new MutableRootResourceRegistrationProvider() {\n                    public ManagementResourceRegistration getRootResourceRegistrationForUpdate(OperationContext context) {\n                        return hostModelRegistration;\n                    }\n                });\n            }\n\n            final RunningMode currentRunningMode = runningModeControl.getRunningMode();\n\n            if (ok) {\n                // Now we know our management interface configuration. Install the server inventory\n                Future<ServerInventory> inventoryFuture = installServerInventory(serviceTarget);\n\n                // Now we know our discovery configuration.\n                List<DiscoveryOption> discoveryOptions = hostControllerInfo.getRemoteDomainControllerDiscoveryOptions();\n                if (hostControllerInfo.isMasterDomainController() && (discoveryOptions != null)) {\n                    // Install the discovery service\n                    installDiscoveryService(serviceTarget, discoveryOptions);\n                }\n\n                boolean useLocalDomainXml = hostControllerInfo.isMasterDomainController();\n                boolean isCachedDc = environment.isUseCachedDc();\n\n                if (!useLocalDomainXml) {\n                    // Block for the ServerInventory\n                    establishServerInventory(inventoryFuture);\n\n                    boolean discoveryConfigured = (discoveryOptions != null) && !discoveryOptions.isEmpty();\n                    if (currentRunningMode != RunningMode.ADMIN_ONLY) {\n                        if (discoveryConfigured) {\n                            // Try and connect.\n                            // If can't connect && !environment.isUseCachedDc(), abort\n                            // Otherwise if can't connect, use local domain.xml and start trying to reconnect later\n                            DomainConnectResult connectResult = connectToDomainMaster(serviceTarget, currentRunningMode, isCachedDc, false);\n                            if (connectResult == DomainConnectResult.ABORT) {\n                                ok = false;\n                            } else if (connectResult == DomainConnectResult.FAILED) {\n                                useLocalDomainXml = true;\n                            }\n                        } else {\n                            // Invalid configuration; no way to get the domain config\n                            ROOT_LOGGER.noDomainControllerConfigurationProvided(currentRunningMode,\n                                    CommandLineConstants.ADMIN_ONLY, RunningMode.ADMIN_ONLY);\n                            SystemExiter.abort(ExitCodes.HOST_CONTROLLER_ABORT_EXIT_CODE);\n                        }\n                    } else {\n                        // We're in admin-only mode. See how we handle access control config\n                        // if cached-dc is specified, we try and use the last configuration we have before failing.\n                        if (isCachedDc) {\n                            useLocalDomainXml = true;\n                        }\n                        switch (hostControllerInfo.getAdminOnlyDomainConfigPolicy()) {\n                            case ALLOW_NO_CONFIG:\n                                // our current setup is good, if we're using --cached-dc, we'll try and load the config below\n                                // if not, we'll start empty.\n                                break;\n                            case FETCH_FROM_MASTER:\n                                if (discoveryConfigured) {\n                                    // Try and connect.\n                                    // If can't connect && !environment.isUseCachedDc(), abort\n                                    // Otherwise if can't connect, use local domain.xml but DON'T start trying to reconnect later\n                                    DomainConnectResult connectResult = connectToDomainMaster(serviceTarget, currentRunningMode, isCachedDc, true);\n                                    ok = connectResult != DomainConnectResult.ABORT;\n                                } else {\n                                    // try and use a local cached version below before failing\n                                    if (isCachedDc) {\n                                        break;\n                                    }\n                                    // otherwise, this is an invalid configuration; no way to get the domain config\n                                    ROOT_LOGGER.noDomainControllerConfigurationProvidedForAdminOnly(\n                                            ModelDescriptionConstants.ADMIN_ONLY_POLICY,\n                                            AdminOnlyDomainConfigPolicy.REQUIRE_LOCAL_CONFIG,\n                                            CommandLineConstants.CACHED_DC, RunningMode.ADMIN_ONLY);\n                                    SystemExiter.abort(ExitCodes.HOST_CONTROLLER_ABORT_EXIT_CODE);\n                                    break;\n                                }\n                                break;\n                            case REQUIRE_LOCAL_CONFIG:\n                                // if we have a cached copy, and --cached-dc we can try to use that below\n                                if (isCachedDc) {\n                                    break;\n                                }\n\n                                // otherwise, this is an invalid configuration; no way to get the domain config\n                                ROOT_LOGGER.noAccessControlConfigurationAvailable(currentRunningMode,\n                                        ModelDescriptionConstants.ADMIN_ONLY_POLICY,\n                                        AdminOnlyDomainConfigPolicy.REQUIRE_LOCAL_CONFIG,\n                                        CommandLineConstants.CACHED_DC, currentRunningMode);\n                                SystemExiter.abort(ExitCodes.HOST_CONTROLLER_ABORT_EXIT_CODE);\n                                break;\n                            default:\n                                throw new IllegalStateException(hostControllerInfo.getAdminOnlyDomainConfigPolicy().toString());\n                        }\n                    }\n\n                }\n\n                if (useLocalDomainXml) {\n                    if (!hostControllerInfo.isMasterDomainController() && isCachedDc) {\n                        ROOT_LOGGER.usingCachedDC(CommandLineConstants.CACHED_DC, ConfigurationPersisterFactory.CACHED_DOMAIN_XML);\n                    }\n\n                    // parse the domain.xml and load the steps\n                    // TODO look at having LocalDomainControllerAdd do this, using Stage.IMMEDIATE for the steps\n                    ConfigurationPersister domainPersister = hostControllerConfigurationPersister.getDomainPersister();\n\n                    // if we're using --cached-dc, we have to have had a persisted copy of the domain config for this to work\n                    // otherwise we fail and can't continue.\n                    List<ModelNode> domainBootOps = domainPersister.load();\n\n                    HostControllerLogger.ROOT_LOGGER.debug(\"Invoking domain.xml ops\");\n                    // https://issues.jboss.org/browse/WFCORE-3897\n                    domainConfigAvailable.set(true);\n                    ok = boot(domainBootOps, false);\n                    domainConfigAvailable.set(ok);\n\n                    if (!ok && runningModeControl.getRunningMode().equals(RunningMode.ADMIN_ONLY)) {\n                        ROOT_LOGGER.reportAdminOnlyDomainXmlFailure();\n                        ok = true;\n                    }\n\n                    if (ok && processType != ProcessType.EMBEDDED_HOST_CONTROLLER) {\n                        InternalExecutor executor = new InternalExecutor();\n                        ManagementRemotingServices.installManagementChannelServices(serviceTarget, ManagementRemotingServices.MANAGEMENT_ENDPOINT,\n                                new MasterDomainControllerOperationHandlerService(this, executor, executor, environment.getDomainTempDir(), this, domainHostExcludeRegistry),\n                                DomainModelControllerService.SERVICE_NAME, ManagementRemotingServices.DOMAIN_CHANNEL,\n                                HC_EXECUTOR_SERVICE_NAME, HC_SCHEDULED_EXECUTOR_SERVICE_NAME);\n\n                        // Block for the ServerInventory\n                        establishServerInventory(inventoryFuture);\n                    }\n\n                    // register local host controller\n                    final String hostName = hostControllerInfo.getLocalHostName();\n                    slaveHostRegistrations.registerHost(hostName, null, \"local\");\n                }\n            }\n\n            if (ok && hostControllerInfo.getAdminOnlyDomainConfigPolicy() != AdminOnlyDomainConfigPolicy.ALLOW_NO_CONFIG) {\n                final ModelNode validate = new ModelNode();\n                validate.get(OP).set(\"validate\");\n                validate.get(OP_ADDR).setEmptyList();\n                final ModelNode result = internalExecute(OperationBuilder.create(validate).build(), OperationMessageHandler.DISCARD, OperationTransactionControl.COMMIT, new OperationStepHandler() {\n                    @Override\n                    public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                        DomainModelIncludesValidator.validateAtBoot(context, operation);\n                    }\n                }).getResponseNode();\n\n                if (!SUCCESS.equals(result.get(OUTCOME).asString())) {\n                    throw HostControllerLogger.ROOT_LOGGER.bootConfigValidationFailed(result.get(FAILURE_DESCRIPTION));\n                }\n\n            }\n\n            if (ok && processType != ProcessType.EMBEDDED_HOST_CONTROLLER) {\n                // Install the server > host operation handler\n                ServerToHostOperationHandlerFactoryService.install(serviceTarget, ServerInventoryService.SERVICE_NAME,\n                        getExecutorServiceInjector().getValue(), new InternalExecutor(), this, expressionResolver, environment.getDomainTempDir());\n\n                // demand native mgmt services\n                final ServiceBuilder nativeSB = serviceTarget.addService(ServiceName.JBOSS.append(\"native-mgmt-startup\"), Service.NULL);\n                nativeSB.requires(ManagementRemotingServices.channelServiceName(ManagementRemotingServices.MANAGEMENT_ENDPOINT, ManagementRemotingServices.SERVER_CHANNEL));\n                nativeSB.install();\n\n                // demand http mgmt services\n                if (capabilityRegistry.hasCapability(UndertowHttpManagementService.EXTENSIBLE_HTTP_MANAGEMENT_CAPABILITY.getName(), CapabilityScope.GLOBAL)) {\n                    final ServiceBuilder httpSB = serviceTarget.addService(ServiceName.JBOSS.append(\"http-mgmt-startup\"), Service.NULL);\n                    httpSB.requires(UndertowHttpManagementService.SERVICE_NAME);\n                    httpSB.install();\n                }\n\n                reachedServers = true;\n                if (currentRunningMode == RunningMode.NORMAL) {\n                    startServers();\n                }\n            }\n\n        } catch (Exception e) {\n            ROOT_LOGGER.caughtExceptionDuringBoot(e);\n            if (!reachedServers) {\n                ok = false;\n            }\n        } finally {\n            if (ok) {\n                try {\n                    finishBoot();\n                } finally {\n                    // Trigger the started message\n                    Notification notification = new Notification(ModelDescriptionConstants.BOOT_COMPLETE_NOTIFICATION, PathAddress.pathAddress(PathElement.pathElement(CORE_SERVICE, MANAGEMENT),\n                            PathElement.pathElement(SERVICE, MANAGEMENT_OPERATIONS)), ControllerLogger.MGMT_OP_LOGGER.bootComplete());\n                    getNotificationSupport().emit(notification);\n                    bootstrapListener.printBootStatistics();\n                }\n            } else {\n                // Die!\n                String failed = ROOT_LOGGER.unsuccessfulBoot();\n                ROOT_LOGGER.fatal(failed);\n                bootstrapListener.bootFailure(failed);\n\n                // don't exit if we're embedded\n                if (processType != ProcessType.EMBEDDED_HOST_CONTROLLER) {\n                    SystemExiter.abort(ExitCodes.HOST_CONTROLLER_ABORT_EXIT_CODE);\n                }\n            }\n        }\n    }", "public void sessionCreated(final HttpSessionEvent event) {\n\t\tcounter++;\n\t\tfinal HttpSession session = event.getSession();\n\t\tfinal String id = session.getId();\n\t\tSESSIONS.put(id, session);\n\t}", "\tprivate String getRectCoords(Rectangle2D rectangle, double zoom) {\n\t\tif (rectangle == null) {\n\t\t\tthrow new IllegalArgumentException(\"Null 'rectangle' argument.\");\n\t\t}\n\t\tint x1 = (int) (rectangle.getX()* zoom);\n\t\tint y1 = (int) (rectangle.getY()* zoom);\n\t\tint x2 = (int) (rectangle.getWidth()* zoom);\n\t\tint y2 = (int) (rectangle.getHeight()* zoom);\n\t\t\n\t\tif (x2 == x1) {\n\t\t\tx2++;\n\t\t}\n\t\tif (y2 == y1) {\n\t\t\ty2++;\n\t\t}\n\t\t\n\t\treturn x1 + \",\" + y1 + \",\" + x2 + \",\" + y2;\n\t}\n", "public boolean contains(DetectorFactory factory){\n  return memberSet.contains(factory);\n}\n", "public void calculateSelection(){\n  dataStatus.setText(calculateSelection(miniTable));\n  bGenerate.setEnabled(m_noSelected != 0);\n}\n", "    public int beginBroadcast() {\n        synchronized (mCallbacks) {\n            final int N = mCallbacks.size();\n            if (N <= 0) {\n                return 0;\n            }\n            IInterface[] active = mActiveBroadcast;\n            if (active == null || active.length < N) {\n                mActiveBroadcast = active = new IInterface[N];\n            }\n            int i=0;\n            for (Callback cb : mCallbacks.values()) {\n                active[i++] = cb.mCallback;\n            }\n            return i;\n        }\n    }\n", "  public void setUnit(String unit) {\n    if (unit == null) {\n     this.unit = \"\";\n   } else {\n     this.unit = unit;\n   }\n  }\n", "public static <E> Set<E> newSetFromMap(Map<E, Boolean> map) {\n        return new SetFromMap<>(map);\n    }", "public AnnotationVisitor visitAnnotation ( String desc , boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( desc , visible ) ; } return null ; }", "private boolean processOneRequest(InputStream in,OutputStream out,Socket socket) throws IOException, InterruptedException {\n  RecordedRequest request=readRequest(in,sequenceNumber);\n  if (request == null) {\n    return false;\n  }\n  MockResponse response=dispatch(request);\n  writeResponse(out,response);\n  if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AT_END) {\n    in.close();\n    out.close();\n  }\n else   if (response.getSocketPolicy() == SocketPolicy.SHUTDOWN_INPUT_AT_END) {\n    socket.shutdownInput();\n  }\n else   if (response.getSocketPolicy() == SocketPolicy.SHUTDOWN_OUTPUT_AT_END) {\n    socket.shutdownOutput();\n  }\n  sequenceNumber++;\n  return true;\n}\n", "private boolean isExceptionEdge ( Edge edge ) { boolean isExceptionEdge = edge . isExceptionEdge ( ) ; if ( isExceptionEdge ) { if ( DEBUG ) { System . out . println ( STR_ + edge ) ; } return BOOL_ ; } if ( edge . getType ( ) != EdgeTypes . FALL_THROUGH_", "public static Map ordinalMap(Iterator tuples,String field,Comparator cmp){\n  Object[] o=ordinalArray(tuples,field,cmp);\n  HashMap map=new HashMap();\n  for (int i=0; i < o.length; ++i)   map.put(o[i],new Integer(i));\n  return map;\n}\n", "public VirtualFile resolve(String relativeStr){\n  File relativeFile=null;\n  if (FileUtils.isDirectory(f)) {\n    relativeFile=FileUtil.openFile(f,relativeStr);\n  }\n else   if (FileUtils.isFile(f)) {\n    relativeFile=FileUtil.openFile(f.getParentFile(),relativeStr);\n  }\n  VirtualFile result=null;\n  if (relativeFile != null && FileUtils.exists(relativeFile)) {\n    result=new LocalFile(relativeFile);\n  }\n  if ((result != null) && Trace.pathResolver) {\n    Trace.trace(\"LocalFile.resolve: resolved \" + relativeStr + \" to \"+ result.getName());\n  }\n  return result;\n}\n", "public Class<?> loadClass(String name) throws ClassNotFoundException {\n  return initClassLoader.loadClass(name);\n}\n", "\tpublic void refresh() {\n\t\tupdateInfoPanel(getTree().getSelectionPath());\n\t}\n", "public static Pattern compile(String pattern) throws IllegalArgumentException {\n        if (pattern == null) {\n            throw new IllegalArgumentException(\"Pattern can not be null\");\n        }\n\n        if (pattern.startsWith(\"/\") && pattern.endsWith(\"/", "    public void decrypt(@NotNull final byte[] ciphertext, @NotNull final byte[] plaintext) {\n        if (ciphertext.length != 8) {\n            throw new IllegalArgumentException();\n        }\n        if (plaintext.length != 8) {\n            throw new IllegalArgumentException();\n        }\n        int v0 = getInt(ciphertext, 0);\n        int v1 = getInt(ciphertext, 4);\n        //noinspection NumericOverflow\n        int sum = DELTA * NUM_ROUNDS;\n        for (int i = 0; i < NUM_ROUNDS; i++) {\n            v1 -= (((v0 << 4) ^ (v0 >>> 5)) + v0) ^ (sum + k[(sum >>> 11) & 3]);\n            sum -= DELTA;\n            v0 -= (((v1 << 4) ^ (v1 >>> 5)) + v1) ^ (sum + k[sum & 3]);\n        }\n        putInt(v0, plaintext, 0);\n        putInt(v1, plaintext, 4);\n    }\n", "@Override public CompletableFuture<Object[]> toArray(){\n  return CompletableFuture.supplyAsync(null,exec);\n}\n", "public ProjectDTO toDTO(Project project){\n  return toDTO(project,1);\n}\n", "public boolean isFinalFragment ( ) { return mMessage . get ( FINAL_FRAGMENT_FLAG ) ; }", "\tprotected AffineTransform getArrowTrans(final Point2D p1, final Point2D p2, final double width) {\n\t\tarrowTrans.setToTranslation(p2.getX(), p2.getY());\n\t\tarrowTrans.rotate(-HALF_PI + Math.atan2(p2.getY() - p1.getY(), p2.getX() - p1.getX()));\n\t\tif (width > 1) {\n\t\t\tfinal double scalar = width / 4;\n\t\t\tarrowTrans.scale(scalar, scalar);\n\t\t}\n\t\treturn arrowTrans;\n\t}\n", "public static void register(PageSource ps){\n  local.set(ps);\n}\n", "public boolean isAccessLoggable(Level level){\n  return accessLogger.isLoggable(level);\n}\n", "\tprivate void appendDiagnostics(IStatus status, DiagnosticChain diagnostics) {\n\t\tif (status.isMultiStatus()) {\n\t\t\tIStatus[] children = status.getChildren();\n\t\t\t\n\t\t\tfor (IStatus element : children) {\n\t\t\t\tappendDiagnostics(element, diagnostics);\n\t\t\t}\n\t\t} else if (status instanceof IConstraintStatus) {\n\t\t\tdiagnostics.add(new BasicDiagnostic(\n\t\t\t\tstatus.getSeverity(),\n\t\t\t\tstatus.getPlugin(),\n\t\t\t\tstatus.getCode(),\n\t\t\t\tstatus.getMessage(),\n\t\t\t\t((IConstraintStatus) status).getResultLocus().toArray()));\n\t\t}\n\t}\n", "public String[] list(String path) throws IOException {\n  if (path.startsWith(\"/\")) {\n    path=path.substring(1);\n  }\n  if (!path.endsWith(\"/\")) {\n    path=path + \"/\";\n  }\n  ArrayList<String> names=new ArrayList<>();\n  ZipFile zipFile=getZipFile();\n  try {\n    Enumeration<? extends ZipEntry> e=zipFile.entries();\n    while (e.hasMoreElements()) {\n      ZipEntry entry=e.nextElement();\n      String name=entry.getName();\n      if (name.startsWith(path)) {\n        String tail=name.substring(path.length());\n        int p=tail.indexOf('/');\n        if (p >= 0) {\n          tail=tail.substring(0,p);\n        }\n        if (!tail.equals(\"\") && !names.contains(tail)) {\n          names.add(tail);\n        }\n      }\n    }\n  }\n  finally {\n    closeZipFile(zipFile);\n  }\n  String[] list=new String[names.size()];\n  names.toArray(list);\n  return list;\n}\n", "private void registerChildInternal(IgnoreDomainResourceTypeResource child) {\n        child.setParent(this);\n        children.put(child.getName(), child);\n    }", "void close() {\n        try {\n            performTeardownExchange();\n        } catch (IOException e) {\n            logger.warn(\"Problem reporting our intention to close the dbserver connection\", e);\n        }\n        try {\n            channel.close();\n        } catch (IOException e) {\n            logger.warn(\"Problem closing dbserver client output channel\", e);\n        }\n        try {\n            os.close();\n        } catch (IOException e) {\n            logger.warn(\"Problem closing dbserver client output stream\", e);\n        }\n        try {\n            is.close();\n        } catch (IOException e) {\n            logger.warn(\"Problem closing dbserver client input stream\", e);\n        }\n        try {\n            socket.close();\n        } catch (IOException e) {\n            logger.warn(\"Problem closing dbserver client socket\", e);\n        }\n    }", "protected void flagToRemoveFromQuarantineQueue(NodePortTuple npt){\n  if (toRemoveFromQuarantineQueue.contains(npt) == false) {\n    toRemoveFromQuarantineQueue.add(npt);\n  }\n}\n", "public static String DNtoName(String dn){\n  return DNtoName(dn,true);\n}\n", "\tpublic void visit(CDLVisitor visitor) {\n\n\t\tvisitor.noAction(this);\n\t\t\n\t\tsuper.visit(visitor);\n\t}\n", "@Step(\"Asserting element {1} is present after {2} seconds\") public static void assertElementIsPresentAfter(AugmentedFunctions driver,By by,int timeoutInSeconds){\n  Preconditions.checkNotNull(driver);\n  Preconditions.checkNotNull(by);\n  try {\n    driver.findElementPresentAfter(by,timeoutInSeconds);\n  }\n catch (  TimeoutException e) {\n    throw new AssertionError(String.format(\"Element %s is not present after %s seconds\",by,timeoutInSeconds),e);\n  }\n}\n", "private static boolean accepts(final String acceptHeader,final String toAccept){\n  final String[] acceptValues=acceptHeader.split(\"\\\\s*(,|;)\\\\s*\");\n  Arrays.sort(acceptValues);\n  return Arrays.binarySearch(acceptValues,toAccept) > -1 || Arrays.binarySearch(acceptValues,toAccept.replaceAll(\"/.*$\",\"/*\")) > -1 || Arrays.binarySearch(acceptValues,\"*/*\") > -1;\n}\n", "   public void add ( ArgArray newStuff ) {\n      for ( Enumeration e = newStuff.contents.keys( ) ; e.hasMoreElements( ) ; ) {\n         Object key = e.nextElement( );\n         put( key , newStuff.contents.get( key ) );\n      }\n   }\n", "public NotEqualsSpacePredicate ( Object expectedValue ) { super ( expectedValue , null ) ; }", "public static double[] pairwiseMultiply(double[] a, double[] b) {\r\n    if (a.length != b.length) {\r\n      throw new RuntimeException(\"Can't pairwise multiple different lengths: a.length=\" + a.length + \" b.length=\" + b.length);\r\n    }\r\n    double[] result = new double[a.length];\r\n    for (int i = 0; i < result.length; i++) {\r\n      result[i] = a[i] * b[i];\r\n    }\r\n    return result;\r\n  }", "public static JMFType parse(String filename) {\n    try {\n      return parse(new FileReader(filename));\n    } catch(IOException e) {\n      // No FFDC needed\n          IllegalArgumentException ee = new IllegalArgumentException(e.getMessage());\n          ee.initCause(e);\n          throw ee;\n    }\n  }", "public boolean sendKeepAlive ( ) ;", "    public OBJT getPanelObject() {\n    \tObject selection = cboExistingList.getSelectedItem();\n    \t\n    \tif(selection == null)\n    \t\tthrow new IllegalStateException(\"GetPanelObject() has no object?\");\n    \t\n    \tif(!selection.getClass().equals(contentClass)) {\n    \t\tthrow new IllegalStateException(\"GetPanelObject() not content class, instead it's \" + selection.getClass().toString());\n    \t}\n    \t\n    \treturn (OBJT) selection;\n    }\n", "public static <T> void sortByPriority(List<T> someClasses, ToIntFunction<T> priorityExtractor) {\n        someClasses.sort(Collections.reverseOrder(Comparator.comparingInt(priorityExtractor)));\n    }", "private static boolean isOnlyASCII(String input) {\n        if (input == null) {\n            return true;\n        }\n        for(int i=0; i < input.length(); i++) {\n            if (input.charAt(i) > 0x7F) { // CHECKSTYLE IGNORE MagicNumber\n                return false;\n            }\n        }\n        return true;\n    }", "public Frame outputFrame(Key<Frame> key, String [] names, String [][] domains){\n    Futures fs = new Futures();\n    Frame res = closeFrame(key, names, domains, fs);\n    if( key != null ) DKV.put(res,fs);\n    fs.blockForPending();\n    return res;\n  }", "protected String readResponseLine() throws IOException {\n  String line=readLine();\n  if (line != null) {\n    int n=line.indexOf(' ');\n    if (n != -1) {\n      line=\"HTTP/1.0\" + line.substring(n);\n    }\n  }\n  return line;\n}\n", "void init ( Object key , int xstate ) { this . key = key . toString ( ) ; this . xstate = xstate ; }", "public UrlResourceReference[] getExternalCssResourceReferences() {\n        final List<UrlResourceReference> resources = new ArrayList<UrlResourceReference>();\n\n        for (final String resource : cssResources) {\n            // Provide resources with FQL URLs\n            if (resource.startsWith(\"//\") || resource.startsWith(\"http\")) {\n                resources.add(new UrlResourceReference(Url.parse(resource)));\n            }\n        }\n        return resources.toArray(new UrlResourceReference[resources.size()]);\n    }", "public static byte[] set(\n\t\tfinal byte[] data,\n\t\tfinal int index,\n\t\tfinal boolean value\n\t) {\n\t\treturn value ? set(data, index) : unset(data, index);\n\t}", "public StringSet clone ( ) { StringSet result = new StringSet ( ) ; for ( int i = NUM_ ; i < contents . size ( ) ; i ++ ) { result . add ( contents . elementAt ( i ) ) ; } return result ; }", "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) private static Method findApplyMethod(){\n  try {\n    Class clz=SharedPreferences.Editor.class;\n    return clz.getMethod(\"apply\");\n  }\n catch (  NoSuchMethodException e) {\n  }\n  return null;\n}\n", "private String replaceIllegalCharacters ( String filename ) { for ( String illegalCharacter : mIllegalCharacters ) { filename = filename . replace ( illegalCharacter , STR_ ) ; } return filename ; }", "protected void delay(long delayMs,String desc){\n  try {\n    Thread.sleep(delayMs);\n  }\n catch (  InterruptedException intExc) {\n    LOG.warn(\"sleep interrupted: \" + desc,intExc);\n  }\n}\n", "private void setInnerPredicate(Predicate<K, V> predicate) {\n        if (predicate instanceof PagingPredicate) {\n            throw new IllegalArgumentException(\"Nested PagingPredicate is not supported!\");\n        }\n        this.predicate = predicate;\n    }", "public void markKeyForPreload(int idx){\n  if (preloadKeys == null)   preloadKeys=new BitSet();\n  preloadKeys.set(idx,true);\n}\n", "protected DateTimeData parse(String str) throws SchemaDateTimeException {\n  DateTimeData date=new DateTimeData(str,this);\n  int len=str.length();\n  int start=0;\n  if (str.charAt(0) == '-') {\n    start=1;\n  }\n  int sign=findUTCSign(str,start,len);\n  final int length=((sign == -1) ? len : sign) - start;\n  if (length < 4) {\n    throw new RuntimeException(\"Year must have 'CCYY' format\");\n  }\n else   if (length > 4 && str.charAt(start) == '0') {\n    throw new RuntimeException(\"Leading zeros are required if the year value would otherwise have fewer than four digits; otherwise they are forbidden\");\n  }\n  if (sign == -1) {\n    date.year=parseIntYear(str,len);\n  }\n else {\n    date.year=parseIntYear(str,sign);\n    getTimeZone(str,date,sign,len);\n  }\n  date.month=MONTH;\n  date.day=1;\n  validateDateTime(date);\n  saveUnnormalized(date);\n  if (date.utc != 0 && date.utc != 'Z') {\n    normalize(date);\n  }\n  date.position=0;\n  return date;\n}\n", "public static void zoomNode ( final ZyGraph graph , final List < NaviNode > nodes ) { checkArguments ( graph ) ; ZoomFunctions . zoomToNodes ( graph , nodes ) ; }", "public static String generateArgline(final String scriptpath, final String[] args, final Boolean unsafe) {\n        return generateArgline(scriptpath, args, \" \", unsafe);\n    }", "\tprotected String convertKey(String key) {\n\t\treturn key.toLowerCase(this.locale);\n\t}\n", "protected WeldBeanDeploymentArchive createAdditionalBeanDeploymentArchive() {\n        WeldBeanDeploymentArchive additionalBda = new WeldBeanDeploymentArchive(ADDITIONAL_BDA_ID, Collections.synchronizedSet(new HashSet<String>()), null);\n        additionalBda.getServices().addAll(getServices().entrySet());\n        beanDeploymentArchives.add(additionalBda);\n        setBeanDeploymentArchivesAccessibility();\n        return additionalBda;\n    }", "protected PluginRelease findReleaseForPlugin(String id, String version) throws PluginException {\n        PluginInfo pluginInfo = getPluginsMap().get(id);\n        if (pluginInfo == null) {\n            log.info(\"Plugin with id {} does not exist in any repository\", id);\n            throw new PluginException(\"Plugin with id {} not found in any repository\", id);\n        }\n\n        if (version == null) {\n            return getLastPluginRelease(id);\n        }\n\n        for (PluginRelease release : pluginInfo.releases) {\n            if (versionManager.compareVersions(version, release.version) == 0 && release.url != null) {\n                return release;\n            }\n        }\n\n        throw new PluginException(\"Plugin {} with version @{} does not exist in the repository\", id, version);\n    }", "private <T> T withWhiteboardDtoService(Function<WhiteboardDtoService, T> function) {\n\t\tfinal BundleContext bundleContext = serviceBundle.getBundleContext();\n\t\tServiceReference<WhiteboardDtoService> ref = bundleContext.getServiceReference(WhiteboardDtoService.class);\n\t\tif (ref != null) {\n\t\t\tWhiteboardDtoService service = bundleContext.getService(ref);\n\t\t\tif (service != null) {\n\t\t\t\ttry {\n\t\t\t\t\treturn function.apply(service);\n\t\t\t\t} finally {\n\t\t\t\t\tbundleContext.ungetService(ref);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalStateException(String.format(\"Service '%s' could not be retrieved!\", WhiteboardDtoService.class.getName()));\n\t}", "    public DomainObject getSelectedObject(PageState state) {\n\n        BigDecimal id = convertToBigDecimal(getSelectedKey(state));\n        if (id == null) {\n            return null;\n        }\n\n        if (! isInitialized(state)) {\n            // Attempt to load the object\n\n            m_loaded.set(state, Boolean.TRUE);\n\n            if (!isSelected(state)) {\n                return null;\n            }\n\n            ACSObject item = loadACSObject(state, id);\n            if (item == null) {\n                return null;\n            }\n            ACSObjectCache.set(state.getRequest(), item);\n            return item;\n\n        }\n        return ACSObjectCache.get(state.getRequest(), id);\n    }\n", "  public boolean hasParent(Category category) {\n    Category parent = getParent();\n    while (parent != null) {\n      if (parent.equals(category)) {\n        return true;\n      } else {\n        parent = parent.getParent();\n      }\n    }\n\n    return false;\n  }\n", "public void updateAttribute(String name,String value){\n  updateAttribute(name,value,true);\n}\n", "\tpublic Account getSelectedAccount() {\n\t\tAccount account = null;\n\t\tint index = accountCombo.getSelectionIndex();\n\t\tif (index > -1 && accounts != null && accounts.size() > index) {\n\t\t\taccount = accounts.get(index);\n\t\t}\n\t\treturn account;\n\t}\n", "    public void reportException(Exception e) {\n        String msg = translator.getString(\"Exception.Occured\");\n        setStatus(msg);\n        JOptionPane.showMessageDialog(\n            getContentPane(),\n            \"<html><b>\" + msg + \":</b><br>\"\n                + e.getClass().getName() + \"<br>\"\n                + e.getMessage() + \"</html>\",\n            translator.getString(\"Exception.Error\"),\n            JOptionPane.ERROR_MESSAGE\n        );\n    }\n", "protected static long calculateDownlink ( IBandIdentifier iden , int channel ) { if ( iden != null ) { return iden . getBaseFrequency ( ) + ( channel * iden . getChannelSpacing ( ) ) ; } return NUM_ ; }", "private void selectSeverity ( int severity ) { int index = severity - NUM_ ; for ( int i = NUM_ ; i < severityItemList . length ; ++ i ) { MenuItem menuItem = severityItemList [ i ] ; menuItem . setEnabled ( BOOL_ ) ; menuItem . setSelection ( i == index ) ; } }", "public static boolean areElementEquals(Element element1, Element element2) {\r\n\t\tfor (Mask mask1 : element1.getMask()) {\r\n\t\t\tif (!areBooleanEquals(element1.isNegated(), element2.isNegated())) {\r\n\t\t\t\t// Negated.\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tfor (Mask mask2 : element2.getMask()) {\r\n\t\t\t\tif (!areStringEquals(mask1.getLexemeMask(), mask2.getLexemeMask())) {\r\n\t\t\t\t\t// LexemeMask.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else if (!areStringEquals(mask1.getPrimitiveMask(), mask2.getPrimitiveMask())) {\r\n\t\t\t\t\t// PrimitiveMask.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else if (!areTagMaskEquals(mask1.getTagMask(), mask2.getTagMask())) {\r\n\t\t\t\t\t// TagMask.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}", "public static AccessibilityNodeInfoCompat searchFocus(TraversalStrategy traversal,AccessibilityNodeInfoCompat currentFocus,int direction,NodeFilter filter){\n  if (traversal == null || currentFocus == null) {\n    return null;\n  }\n  if (filter == null) {\n    filter=DEFAULT_FILTER;\n  }\n  AccessibilityNodeInfoCompat targetNode=AccessibilityNodeInfoCompat.obtain(currentFocus);\n  Set<AccessibilityNodeInfoCompat> seenNodes=new HashSet<>();\n  try {\n    do {\n      seenNodes.add(targetNode);\n      targetNode=traversal.findFocus(targetNode,direction);\n      if (seenNodes.contains(targetNode)) {\n        LogUtils.log(AccessibilityNodeInfoUtils.class,Log.ERROR,\"Found duplicate during traversal: %s\",targetNode.getInfo());\n        return null;\n      }\n    }\n while (targetNode != null && !filter.accept(targetNode));\n  }\n  finally {\n    AccessibilityNodeInfoUtils.recycleNodes(seenNodes);\n  }\n  return targetNode;\n}\n", "public void visitIntInsn ( int opcode , int operand ) { if ( mv != null ) { mv . visitIntInsn ( opcode , operand ) ; } }", "public static CompressionCodec getGzipCodec(Configuration conf) {\n        try {\n            return (CompressionCodec) ReflectionUtils.newInstance(\n                conf.getClassByName(\"org.apache.hadoop.io.compress.GzipCodec\").asSubclass(CompressionCodec.class),\n                conf);\n        } catch (ClassNotFoundException e) {\n            logger.warn(\"GzipCodec could not be instantiated\", e);\n            return null;\n        }\n    }", "private void addToken(List list,String tok){\n  if (tok == null || tok.length() == 0) {\n    if (isIgnoreEmptyTokens()) {\n      return;\n    }\n    if (isEmptyTokenAsNull()) {\n      tok=null;\n    }\n  }\n  list.add(tok);\n}\n", "public boolean equals ( Object o ) { if ( ! ( o instanceof LogRecord ) ) return BOOL_ ; LogRecord that = ( LogRecord ) o ; if ( offset != that . getOffset ( ) ) return BOOL_ ; if ( data == null ) { if ( that . getData ( ) != null ) return BOOL_ ; } else {", "void andNot(LongBitSet other) {\n\t\tint pos = Math.min(numWords, other.numWords);\n\t\twhile (--pos >= 0) {\n\t\t\tbits[pos] &= ~other.bits[pos];\n\t\t}\n\t}", "public static String underscore(String camel) {\n\n        StringBuilder bob = new StringBuilder(camel); // standard adds 16 extra slots for underscores\n        \n        // lowercase the first letter\n        if (camel.charAt(0) >= 'A' && camel.charAt(0) <= 'Z')\n            bob.setCharAt(0, Character.toLowerCase(camel.charAt(0)));\n        \n        int extra = 0;\n        // i = 1, because we already lowered it\n        for (int i = 1; i < camel.length(); i++) {\n            char b = camel.charAt(i);\n            if (b >= 'A' && b <= 'Z') { // within range\n                // lower it\n                bob.setCharAt(i + extra, Character.toLowerCase(b));\n                // add underscore\n                bob.insert(i + extra++, '_');\n            }\n        }\n\n        return bob.toString();\n    }", "public void onSizeChanged(int width,int height){\n  mWidth=width;\n  mHeight=height;\n  mViewRadius=(float)Math.sqrt(mWidth * mWidth / 4 + mHeight * mHeight / 4);\n}", "@Override\n   public <C> CompletionStage<Void> addListenerAsync(Object listener, CacheEventFilter<? super K, ? super V> filter,\n                               CacheEventConverter<? super K, ? super V, C> converter, ClassLoader classLoader) {\n      return addListenerInternal(listener, DataConversion.IDENTITY_KEY, DataConversion.IDENTITY_VALUE, filter, converter, classLoader, false);\n   }", "public static EntropyCalculatorDiscrete newInstance ( int blocksize , int base ) { return new BlockEntropyCalculatorDiscrete ( blocksize , base ) ; }", "void addMarkers(Token tok){\n  SyntaxDocument sDoc=(SyntaxDocument)pane.getDocument();\n  sDoc.readLock();\n  String text=tok.getText(sDoc);\n  Iterator<Token> it=sDoc.getTokens(0,sDoc.getLength());\n  while (it.hasNext()) {\n    Token nextToken=it.next();\n    if (nextToken.length == tok.length && text.equals(nextToken.getText(sDoc))) {\n      Markers.markToken(pane,nextToken,marker);\n    }\n  }\n  sDoc.readUnlock();\n}\n", "public static ArrayList < ImageReference > collectAllImageRefs ( ICompilationUnit cu ) throws JavaModelException { ArrayList < ImageReference > refs = new ArrayList < ImageReference > ( ) ; List < ISourceRange > javadocRanges = UmletPluginUtils . collectJavadocRanges ( cu ) ; String source = cu . getBuffer ( ) . getContents ( ) ; for ( ISourceRange javadocRange : javadocRanges ) { collectImgRefsImpl ( refs , source , javadocRange ) ; } return refs ; }", "public <T> void remove(ElementDescriptor<T> property)\n\t{\n\t\tif (mRemove == null)\n\t\t{\n\t\t\tmRemove = new HashMap<ElementDescriptor<?>, Object>(16);\n\t\t}\n\t\tmRemove.put(property, null);\n\n\t\tif (mSet != null)\n\t\t{\n\t\t\tmSet.remove(property);\n\t\t}\n\t}", "public static Method getMethod (String name, Object target, Map<String, Method> cache)\n    {\n        Class<?> tclass = target.getClass();\n        String key = tclass.getName() + \":\" + name;\n        Method method = cache.get(key);\n\n        if (method == nu", "public void fillFieldValues(final ArrayList<Randomizer> randomizers){\n  Randomizer rand=(Randomizer)randomizers.get(0);\n  ParameterGetter<Randomizer,Double> p1Getter=null;\n  if (NetworkUtils.isConsistent(randomizers,p1Getter)) {\n    tfParam1.setText(Double.toString(rand.getParam1()));\n  }\n else {\n    tfParam1.setText(SimbrainConstants.NULL_STRING);\n  }\n  ParameterGetter<Randomizer,Double> p2Getter=null;\n  if (NetworkUtils.isConsistent(randomizers,p2Getter)) {\n    tfParam2.setText(Double.toString(rand.getParam2()));\n  }\n else {\n    tfParam2.setText(SimbrainConstants.NULL_STRING);\n  }\n  if (!pdf.equals(ProbDistribution.UNIFORM)) {\n    ParameterGetter<Randomizer,Double> lbGetter=null;\n    if (NetworkUtils.isConsistent(randomizers,lbGetter)) {\n      tfLowBound.setText(Double.toString(rand.getLowerBound()));\n    }\n else {\n      tfLowBound.setText(SimbrainConstants.NULL_STRING);\n    }\n    ParameterGetter<Randomizer,Double> ubGetter=null;\n    if (NetworkUtils.isConsistent(randomizers,ubGetter)) {\n      tfUpBound.setText(Double.toString(rand.getUpperBound()));\n    }\n else {\n      tfUpBound.setText(SimbrainConstants.NULL_STRING);\n    }\n    ParameterGetter<Randomizer,Boolean> clippingGetter=null;\n    if (NetworkUtils.isConsistent(randomizers,clippingGetter)) {\n      tsClipping.setSelected(rand.getClipping());\n    }\n else {\n      tsClipping.setNull();\n    }\n  }\n}\n", "private void addFacilityToHashMap(ActivityFacilityImpl facility){\n  Id<Link> facilityLink=getClosestLink(facility);\n  assureHashMapInitializedForLink(facilityLink);\n  ArrayList<ActivityFacilityImpl> list=linkFacilityMapping.get(facilityLink);\n  list.add(facility);\n}\n", "public void compile() {\n        if (compiledSize == 0) {\n            ByteBuffer bb = m_container.b();\n            compiledSize = bb.position();\n            bb.flip();\n            m_allocator.track(compiledSize);\n        }\n\n        if (log.isTraceEnabled()) {\n            StringBuilder sb = new StringBuilder(\"Compiling buffer:   \");\n            ByteBuffer dup = m_container.bDR();\n            while (dup.hasRemaining()) {\n                sb.append(\" \").append(dup.get());\n            }\n            log.trace(sb.toString());\n        }\n    }", "    public String getPeriod(long time, Locale locale){\n        Period period = new Period(time, System.currentTimeMillis());\n        return StringUtils.substringBefore(standard(locale).print(period), \"$\");\n    }\n", "public static void println ( Object self ) { if ( self instanceof Writer ) { PrintWriter pw = new GroovyPrintWriter ( ( Writer ) self ) ; pw . println ( ) ; } else { System . out . println ( ) ; } }", "public DateIterator() throws AdeException {\n  m_curPeriodStart=new Date(m_firstPeriodStart.getTime());\n}\n", "public synchronized boolean isOwner ( final IComment comment ) { return backend . isOwner ( comment ) ; }", "@Override\n    public void clearBody() throws javax.jms.JMSException {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.entry(this, tc, \"clearBody\");\n\n        // Set the message into write-only mode, handle generic actions\n        super.clearBody();\n\n        // Clear the locally stored reference to body of the message, and ensure the\n        // 'read' stream is set to null\n        dataBuffer = null;\n        dataStart = 0; // @P2A\n        readStream = null;\n\n        // remove the encoding and character set properties as these pertain to the\n        // body which is being cleared.\n        // SIB0121: also clear the underlying MFP payload\n        if (jsBytesMsg != null) {\n            jsBytesMsg.setBytes(null);\n            jsBytesMsg.setObjectProperty(ApiJmsConstants.ENCODING_PROPERTY, null);\n            jsBytesMsg.setObjectProperty(ApiJmsConstants.CHARSET_PROPERTY, null);\n        }\n\n        integerEncoding = ApiJmsConstants.ENC_INTEGER_NORMAL; // reset to standard Java encoding\n        floatEncoding = ApiJmsConstants.ENC_FLOAT_IEEE_NORMAL; // reset to standard Java encoding\n\n        // Invalidate the cached toString object.\n        cachedBytesToString = null;\n\n        // This class has different behaviour depending on the whether the\n        // producer might modify the payload after it's been set or not\n        if (!producerWontModifyPayloadAfterSet) {\n            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n                SibTr.debug(this, tc, \"Producer might modify the payload after set - encoding is required, so reinitialise encoding relating variables\");\n\n            // Prepare a new stream for the client to write to\n            _writeBytes = new ByteArrayOutputStream();\n            writeStream = new DataOutputStream(_writeBytes);\n\n            // Initialise the arrays used to record the position of numeric items\n            integer_count = 0;\n            // number of integer items recorded in the current arrays\n            integer_offsets = new int[ARRAY_SIZE];\n            // offset of start of each numeric item\n            integer_sizes = new int[ARRAY_SIZE];\n            // length in byte of the item in question\n            if (integers != null)\n                integers.removeAllElements();\n            // arrays which we filled up are stored in this vector - remove them all\n\n            if (float_offsets != null)\n                float_offsets.removeAllElements();\n            if (float_values != null)\n                float_values.removeAllElements();\n\n            // Ensure that the new data gets exported when the time comes.\n            bodySetInJsMsg = false;\n        }\n\n        else {\n            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n                SibTr.debug(this, tc, \"Producer has promised not to modify payload - ensure write streams used for encoding are null\");\n\n            // Ensure the write stream variables are null - they are never used when the\n            // producer has promised not to modify the payload after it's been set\n            _writeBytes = null;\n            writeStream = null;\n\n            // Ensure the producer promise flag is checked correctly in the writeBytes method\n            writeByteArrayCalled = false;\n        }\n\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.exit(this, tc, \"clearBody\");\n    }", "private void validateBlockletSize(){\n  String blockletSizeStr=carbonProperties.getProperty(CarbonCommonConstants.BLOCKLET_SIZE,CarbonCommonConstants.BLOCKLET_SIZE_DEFAULT_VAL);\n  try {\n    int blockletSize=Integer.parseInt(blockletSizeStr);\n    if (blockletSize < CarbonCommonConstants.BLOCKLET_SIZE_MIN_VAL || blockletSize > CarbonCommonConstants.BLOCKLET_SIZE_MAX_VAL) {\n      LOGGER.info(\"The blocklet size value \\\"\" + blockletSizeStr + \"\\\" is invalid. Using the default value \\\"\"+ CarbonCommonConstants.BLOCKLET_SIZE_DEFAULT_VAL);\n      carbonProperties.setProperty(CarbonCommonConstants.BLOCKLET_SIZE,CarbonCommonConstants.BLOCKLET_SIZE_DEFAULT_VAL);\n    }\n  }\n catch (  NumberFormatException e) {\n    LOGGER.info(\"The blocklet size value \\\"\" + blockletSizeStr + \"\\\" is invalid. Using the default value \\\"\"+ CarbonCommonConstants.BLOCKLET_SIZE_DEFAULT_VAL);\n    carbonProperties.setProperty(CarbonCommonConstants.BLOCKLET_SIZE,CarbonCommonConstants.BLOCKLET_SIZE_DEFAULT_VAL);\n  }\n}\n", "public static HttpRequest head ( final CharSequence url ) throws HttpRequestException { return new HttpRequest ( url , METHOD_HEAD ) ; }", "@Override\n    protected void prepareActions() throws QTasteTestFailException {\n        mSelectState = Boolean.parseBoolean(mData[0].toString());\n        if (!(component instanceof AbstractButton)) {\n            throw new QTasteTestFailException(\"Unsupported component.\");\n        }\n    }", "private void onScrollPositionChanged(int oldScrollPosition, int newScrollPosition) {\n\t\tint newScrollDirection;\n\n\t\tif (newScrollPosition < oldScrollPosition) {\n\t\t\tnewScrollDirection = SCROLL_TO_TOP;\n\t\t} else {\n\t\t\tnewScrollDirection = SCROLL_TO_BOTTOM;\n\t\t}\n\n\t\tif (directionHasChanged(newScrollDirection)) {\n\t\t\ttranslateYAnimatedView(newScrollDirection);\n\t\t}\n\t}", "\t\tprotected IMenuManager createWindowMenu(IWorkbenchWindow window) {\n\t\t\tIMenuManager menu = new MenuManager(getString(\"_UI_Menu_Window_label\"),\n\t\t\tIWorkbenchActionConstants.M_WINDOW);\n\t\n\t\t\taddToMenuAndRegister(menu, ActionFactory.OPEN_NEW_WINDOW.create(window));\n\t\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));\n\t\t\tmenu.add(ContributionItemFactory.OPEN_WINDOWS.create(window));\n\t\t\tMenuManager viewMenu = new MenuManager(\"Show View\");\n\t\t\tIContributionItem viewList = ContributionItemFactory.VIEWS_SHORTLIST.create(window);\n\t\t\tviewMenu.add(viewList);\n\t\t\tmenu.add(viewMenu);\n\t\t\treturn menu;\n\t\t}\n", "public Builder maxOperationRetries ( int maxOperationRetries ) { this . maxOperationRetries = maxOperationRetries ; return this ; }", "public Interval gap(ReadableInterval interval){\n  interval=DateTimeUtils.getReadableInterval(interval);\n  long otherStart=interval.getStartMillis();\n  long otherEnd=interval.getEndMillis();\n  long thisStart=getStartMillis();\n  long thisEnd=getEndMillis();", "void registerFont(String path){\n  registerFont(path,null);\n}\n", "public User getUserById(Integer userId) throws RedmineException {\n        return transport.getObject(User.class, userId, new BasicNameValuePair(\n                \"include\", \"memberships,groups\"));\n    }", "public void purgeQueue(){\n  fDirtyRegions.clear();\n}\n", "public String toStringAtomic(){\n  lock.lock();\n  try {\n    return toString();\n  }\n  finally {\n    lock.unlock();\n  }\n}\n", "private static String sanitizeString(String s){\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < s.length(); i++) {\n    char ch=s.charAt(i);\n    if (((ch >= 'A') && (ch <= 'Z')) || ((ch >= 'a') && (ch <= 'z')) || ((ch >= '0') && (ch <= '9')))     sb.append(ch);\n else     sb.append('_');\n  }\n  return sb.toString();\n}\n", "@SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane2 = new javax.swing.JScrollPane();\n        rules = new javax.swing.JTable();\n        jLabel2 = new javax.swing.JLabel();\n        jLabel6 = new javax.swing.JLabel();\n        urlTextField = new javax.swing.JTextField();\n        loadBtn = new javax.swing.JButton();\n        jLabel7 = new javax.swing.JLabel();\n        addBtn = new javax.swing.JButton();\n        removeBtn = new javax.swing.JButton();\n        resetButton = new javax.swing.JButton();\n\n        rules.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n                \"Regex\", \"Group\", \"Type\", \"Severity\", \"Confidence\"\n            }\n        ) {\n            Class[] types = new Class [] {\n                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class\n            };\n\n            public Class getColumnClass(int columnIndex) {\n                return types [columnIndex];\n            }\n        });\n        TableColumn severityColumn = rules.getColumnModel().getColumn(3);\n        severityColumn.setCellEditor(new DefaultCellEditor(ScanIssueSeverity.getComboBox()));\n\n        TableColumn confidenceColumn = rules.getColumnModel().getColumn(4);\n        confidenceColumn.setCellEditor(new DefaultCellEditor(ScanIssueConfidence.getComboBox()));\n        jScrollPane2.setViewportView(rules);\n\n        jLabel2.setFont(new java.awt.Font(\"Tahoma\", 1, 13)); // NOI18N\n        jLabel2.setForeground(new java.awt.Color(229, 137, 0));\n        jLabel2.setText(\"Match Rules\");\n\n        jLabel6.setText(\"Match rules use regular epressions to flag software version numbers in server responses\");\n\n        urlTextField.setText(DEFAULT_URL);\n        urlTextField.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                urlTextFieldActionPerformed(evt);\n            }\n        });\n\n        loadBtn.setText(\"Load\");\n        loadBtn.setIgnoreRepaint(true);\n        loadBtn.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                loadBtnActionPerformed(evt);\n            }\n        });\n\n        jLabel7.setText(\"Load rules from URL: \");\n\n        addBtn.setText(\"Add\");\n        addBtn.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                addBtnActionPerformed(evt);\n            }\n        });\n\n        removeBtn.setText(\"Remove\");\n        removeBtn.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                removeBtnActionPerformed(evt);\n            }\n        });\n\n        resetButton.setText(\"Reset\");\n        resetButton.setToolTipText(\"Reload default match rules from GitHub\");\n        resetButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                resetButtonActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jScrollPane2)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabel2)\n                            .addComponent(jLabel6)\n                            .addGroup(layout.createSequentialGroup()\n                                .addComponent(addBtn)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                .addComponent(removeBtn)))\n                        .addGap(0, 0, Short.MAX_VALUE))\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(jLabel7)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(urlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addComponent(loadBtn)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(resetButton)))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jLabel6)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(urlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jLabel7)\n                    .addComponent(loadBtn)\n                    .addComponent(resetButton))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(addBtn)\n                    .addComponent(removeBtn))\n                .addContainerGap(12, Short.MAX_VALUE))\n        );\n    }", "public ManagedUser updateManagedUser(final ManagedUser transientUser) {\n        final ManagedUser user = getObjectById(ManagedUser.class, transientUser.getId());\n        pm.currentTransaction().begin();\n        user.setFullname(transientUser.getFullname());\n        user.setEmail(transientUser.getEmail());\n        user.setForcePasswordChange(transientUser.isForcePasswordChange());\n        user.setNonExpiryPassword(transientUser.isNonExpiryPassword());\n        user.setSuspended(transientUser.isSuspended());\n        if (transientUser.getPassword() != null) {\n            if (!user.getPassword().equals(transientUser.getPassword())) {\n                user.setLastPasswordChange(new Date());\n            }\n            user.setPassword(transientUser.getPassword());\n        }\n        pm.currentTransaction().commit();\n        return pm.getObjectById(ManagedUser.class, user.getId());\n    }", "public void clearPeekedIDs(){\n  peekedEventsContext.set(null);\n}\n", "public PathImpl lookup(String userPath,Map<String,Object> newAttributes){\n  if (newAttributes != null) {\n    return lookupImpl(userPath,newAttributes,true);\n  }\n else   if (userPath == null) {\n    return this;\n  }\n  PathImpl path=getCache(userPath);\n  if (path != null) {\n    return path;\n  }\n  path=lookupImpl(userPath,null,true);\n  if (_startTime == 0) {\n    _startTime=System.currentTimeMillis();\n    putCache(userPath,path);\n  }\n  return path;\n}\n", "private void extractConfigSettings(Artifact artifact) throws MojoExecutionException {// NOSONAR\n        try (JarFile configSettings = new JarFile(artifact.getFile())) {\n            Enumeration<JarEntry> entries = configSettings.entries();\n            while (entries.hasMoreElements()) {\n                JarEntry jarFileEntry = entries.nextElement();\n                // Only interested in files in the /bin directory that are not properties files\n                if (!jarFileEntry.isDirectory() && jarFileEntry.getName().startsWith(\"bin\")\n                        && !jarFileEntry.getName().endsWith(\".properties\")) {\n                    File fileToCreate = new File(jmeterDirectory, jarFileEntry.getName());\n                    copyInputStreamToFile(configSettings.getInputStream(jarFileEntry), fileToCreate);\n                }\n            }\n        } catch (IOException e) {\n            throw new MojoExecutionException(e.getMessage(), e);\n        }\n    }", "    public void _getSystemPathFromFileURL() {\n        String baseURL = util.utils.getOfficeTemp((XMultiServiceFactory)tParam.getMSF());\n        log.println(\"Using (Base): \"+baseURL);\n        String sysURL = util.utils.getOfficeTempDirSys((XMultiServiceFactory)tParam.getMSF());\n        log.println(\"Using (System): \"+sysURL);\n        String get = oObj.getSystemPathFromFileURL(baseURL);\n        log.println(\"Getting: \"+get);\n        //sysURL = sysURL.substring(0,sysURL.length()-1);\n        tRes.tested(\"getSystemPathFromFileURL()\",get.equals(sysURL));\n    }\n", "\tpublic void setDescription(String aDescription) {\n\t\titsDescription = aDescription;\n\t\tif (aDescription == null)\n\t\t\titsDescription = \"\";\n\t}\n", "\tpublic LinguisticTerm getLinguisticTerm(String termName) {\n\t\tLinguisticTerm lt = (LinguisticTerm) linguisticTerms.get(termName);\n\t\tif( lt == null ) throw new RuntimeException(\"No such linguistic term: '\" + termName + \"'\");\n\t\treturn lt;\n\t}\n", "public byte[] analyzeWavData(InputStream i){\n  try {\n    int headSize=44, metaDataSize=48;\n    byte[] data=IOUtils.toByteArray(i);\n    if (data.length < headSize) {\n      throw new IOException(\"Wrong Wav header\");\n    }\n    if (this.sampleRate == 0 && data.length > 28) {\n      this.sampleRate=readInt(data,24);\n    }\n    int destPos=headSize + metaDataSize;\n    int rawLength=data.length - destPos;\n    byte[] d=new byte[rawLength];\n    System.arraycopy(data,destPos,d,0,rawLength);\n    return d;\n  }\n catch (  IOException e) {\n    Log.e(TAG,\"Error while formatting header\");\n  }\n  return new byte[0];\n}\n", "    public String add() {\n\n        try {\n\n            date = dateFormat.parse(dateNote);\n            note.setDatetime(date);\n\n        } catch (ParseException error) {\n            error.printStackTrace();\n        }\n\n        note.setSystemUser(getAuthenticatedUser());\n        noteRemote.add(note);\n\n        return list();\n    }\n", "public int code ( ) throws HttpRequestException { try { closeOutput ( ) ; return getConnection ( ) . getResponseCode ( ) ; } catch ( IOException e ) { throw new HttpRequestException ( e ) ; } }", "public void setAssociationIds(java.util.Collection<String> associationIds) {\n        if (associationIds == null) {\n            this.associationIds = null;\n            return;\n        }\n\n        this.associationIds = new com.amazonaws.internal.SdkInternalList<String>(associationIds);\n    }", "public void initListeners() {\n        instanceStateChangedListener.watch(ChangedType.UPDATED);\n        dataSourceStateChangedListener.watch(ChangedType.UPDATED, ChangedType.DELETED);\n    }", "@Override\n\tpublic void setCenter(double cx, double cy, double cz) {\n\t\tthis.center.set(cx, cy, cz);\n\t}", "public static double uncenteredCorrelation(double[] x,double[] y){\n  final int xdim=x.length, ydim=y.length;\n  if (xdim != ydim) {\n    throw new IllegalArgumentException(\"Invalid arguments: number vectors differ in dimensionality.\");\n  }\n  double sumXX=0., sumYY=0., sumXY=0.;\n  for (int i=0; i < xdim; i++) {\n    final double xv=x[i], yv=y[i];\n    sumXX+=xv * xv;\n    sumYY+=yv * yv;\n    sumXY+=xv * yv;\n  }\n  if (!(sumXX > 0. && sumYY > 0.)) {\n    return (sumXX == sumYY) ? 1. : 0.;\n  }\n  return sumXY / Math.sqrt(sumXX * sumYY);\n}\n", "protected WSDisplay createDisplay(Frame owner){\n  WSDisplay wsd;\n  if (persistentDisplayType == null && Environment.getBoolean(Environment.UseInternalFrames)) {\n    wsd=new IntrnlFrm(title);\n  }\n else {\n    Class wTypeClass=persistentDisplayType == null ? getDefaultWindowSupportDisplayType() : persistentDisplayType;\n    if (wTypeClass == Dlg.class) {\n      wsd=new Dlg(owner,title);\n    }\n else     if (wTypeClass == IntrnlFrm.class) {\n      wsd=new IntrnlFrm(title);\n    }\n else {\n      wsd=new Frm(title);\n    }\n  }\n  setFavIcon(wsd);\n  setDisplay(wsd);\n  return wsd;\n}\n", "public boolean hasBOM ( ) throws IOException { return getBOM ( ) != null ; }", "public void rollback ( ServerTransaction xtn , boolean anyUpdates ) throws SAException { }", "\tprivate void cleanup() {\n\t\trenderer.cleanup();\n\n\t\tIntBuffer int_buffer = BufferUtils.createIntBuffer(2);\n\t\tint_buffer.put(0, buffer_id);\n\t\tint_buffer.put(1, indices_buffer_id);\n\n\t\tglDeleteBuffers(int_buffer);\n\n\t\tDisplay.destroy();\n\t}\n", "private void createImageDescriptor(String id){\n  imageDescriptors.put(id,imageDescriptorFromPlugin(PLUGIN_ID,\"icons/\" + id));\n}\n", "    public void reinit() {\n        cmd = null;\n        params = null;\n        orders = null;\n        filter = null;\n        qParser = null;\n        resultNode = null;\n        groupingNode = null;\n        candidateSelectExp = null;\n    }\n", "      private void init() {\n        setBorder(LineBorder.createGrayLineBorder());\n        setMargin(new Insets(0, 0, 0, 0));\n        setHorizontalAlignment(SwingConstants.CENTER);\n        setVerticalAlignment(SwingConstants.CENTER);\n        this.setBackground(StatFrameHtml.this.getBackground());\n        this.setRequestFocusEnabled(false);\n\n      }\n", "public long sub ( final Date another ) { return serialNumber - another . serialNumber ; }", "public void changeConnectionStatus ( ConnectionStatus connectionStatus ) { status = connectionStatus ; notifyListeners ( ( new PropertyChangeEvent ( this , Constants . ConnectionStatusProperty , null , null ) ) ) ; }", "  public boolean isRunning() {\n    return jobStartRequestCommand != null || jobRunner != null;\n  }\n", "public void addData(T data){\n  mData.add(data);\n  notifyItemInserted(mData.size());\n}\n", "public Class<?> findImplementation(Class<?> interfase) throws IOException, ClassNotFoundException {\n  String className=findString(interfase.getName());\n  Class<?> impl=_classLoader.loadClass(className);\n  if (!interfase.isAssignableFrom(impl)) {\n    throw new ClassCastException(\"Class not of type: \" + interfase.getName());\n  }\n  return impl;\n}\n", "private float multilinearInterpolate(float[] encoded,int od){\n  float[] dists=new float[encoded.length];\n  for (int i=0; i < dists.length; i++) {\n    dists[i]=(float)(encoded[i] - Math.floor(encoded[i]));\n  }\n  int map=0;\n  float val=getSample(encoded,map,od);\n  float prev=val;\n  for (int i=0; i < dists.length; i++) {\n    int idx=0;\n    float largest=-1;\n    for (int c=0; c < dists.length; c++) {\n      if (dists[c] > largest) {\n        largest=dists[c];\n        idx=c;\n      }\n    }\n    map|=(0x1 << idx);\n    float cur=getSample(encoded,map,od);\n    val+=dists[idx] * (cur - prev);\n    prev=val;\n    dists[idx]=-1;\n  }\n  return val;\n}\n", "public static char charFromProperties(Properties p,String propName,char defaultValue){\n  char ret=defaultValue;\n  String charString=p.getProperty(propName);\n  if (charString != null && charString.length() > 0) {\n    return charString.charAt(0);\n  }\n  return ret;\n}\n", "public static String transform(final String inputString) {\n        final StringWriter outputWriter = new StringWriter();\n\n        // Transform using the default stylesheet.\n        final Source xsltSource = new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(DEFAULT_XSLT_SHEET));\n        XmlUtils.transform(new StreamSource(new StringReader(inputString)), xsltSource, new StreamResult(outputWriter));\n\n        return outputWriter.toString();\n    }", "protected synchronized long currentchunkpointer() throws IOException {\n  long fp=backingRandomAccessFile.getFilePointer();\n  if (fp < fHeader.headerSize()) {\n    return -1;\n  }\n else {\n    fp-=fHeader.headerSize();\n    return (fp / CHUNK_ENC_SIZE);\n  }\n}\n", "@Override\n    public CrossoverResult crossover() {\n        double[][] parents = parentSelection.selectParents();\n\n        double[] offspringValues = new double[parents[0].length];\n\n        if (rng.nextDouble() < crossoverRate) {\n            for (int i = 0; i < offspringValues.length; ++i) {\n                double t = rng.nextDouble();\n                offspringValues[i] = t * parents[0][i] + (1.0 - t) * parents[1][i];\n            }\n            return new CrossoverResult(true, offspringValues);\n        }\n\n        return new CrossoverResult(false, parents[0]);\n    }", "\t\tpublic boolean equals(Object o) {\n\t\t\tIdentifiable d = (Identifiable) o;\n\t\t\treturn this.type == d.type && this.id == d.id;\n\t\t}\n", "public static HttpRequest post ( final CharSequence url ) throws HttpRequestException { return new HttpRequest ( url , METHOD_POST ) ; }", "private boolean isErrorResponse(final SoapMessage msg){\n  final Map<String,List<String>> headers=(Map<String,List<String>>)msg.get(Message.PROTOCOL_HEADERS);\n  final List<String> strings=headers.get(\"X-Backside-Transport\");\n  for (  final String header : strings) {\n    final List<String> split=Arrays.asList(header.split(\" \"));\n    if (split.contains(\"FAIL\")) {\n      return true;\n    }\n  }\n  return false;\n}\n", "public static void sort(short[] a){\n  doSort(a,0,a.length - 1);\n}\n", "static Collection<PyElement> moveAssignmentsImpl(@NotNull final PyClass from,@NotNull final Collection<PyAssignmentStatement> statements,@NotNull final PyClass... to){\n  final Collection<PyElement> result=new ArrayList<PyElement>();\n  for (  final PyClass destClass : to) {\n    result.addAll(PyClassRefactoringUtil.copyFieldDeclarationToStatement(statements,destClass.getStatementList(),destClass));\n  }\n  deleteElements(statements);\n  return result;\n}\n", "public synchronized void allowThreadDecoding ( ThreadSet threads ) { for ( Thread t : threads ) { allowThreadDecoding ( t ) ; } }", "public IContext loadContext(String function) throws ContextLoaderException {\r\n        IContext result = new Context();\r\n        parse(function, result, null);\r\n        createIds(result);\r\n        log.info(\"Parsed nodes: \" + nodesParsed);\r\n        return result;\r\n    }", "  public void setCategoryForEntry(long id, String s) {\n    PreparedStatement ps = getStatement(\"setCategoryForEntry.check\",\"SELECT * FROM categoryMap WHERE entry = ? and category = ?\");\n\n    try\n    {\n      ps.setLong(1,id);\n      ps.setString(2,s);\n\n      ResultSet rs = ps.executeQuery();\n\n      if ( rs.next() ) // already in this category, we're done\n        return;\n\n    } catch (SQLException e) {\n      throw new RuntimeException(e);\n    }\n\n    ps = getStatement(\"setCategoryForEntry\",\"INSERT INTO categoryMap VALUES (?,?)\");\n\n    try\n    {\n      ps.setLong(1,id);\n      ps.setString(2,s);\n\n      ps.executeUpdate();\n    } catch (SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n", "public long allocate(int length){\n  int blocks=getBlockCount(length);\n  for (int i=0; ; ) {\n    int start=set.nextClearBit(i);\n    int end=set.nextSetBit(start + 1);\n    if (end < 0 || end - start >= blocks) {\n      set.set(start,start + blocks);\n      re", "public void clear() {\n        if (stateStack.size()>1) {\n            int size = stateStack.size()-1;\n            throw new GroovyBugError(\"the compile stack contains \"+size+\" more push instruction\"+(size==1?\"\":\"s\")+\" than pops.\");\n        }\n        if (lhsStack.size()>1) {\n            int size = lhsStack.size()-1;\n            throw new GroovyBugError(\"lhs stack is supposed to be empty, but has \" +\n                                     size + \" elements left.\");\n        }\n        if (implicitThisStack.size()>1) {\n            int size = implicitThisStack.size()-1;\n            throw new GroovyBugError(\"implicit 'this' stack is supposed to be empty, but has \" +\n                                     size + \" elements left.\");\n        }\n        clear = true;\n        MethodVisitor mv = controller.getMethodVisitor();\n        // br experiment with local var table so debuggers can retrieve variable names\n        if (true) {//AsmClassGenerator.CREATE_DEBUG_INFO) {\n            if (thisEndLabel==null) setEndLabels();\n\n            if (!scope.isInStaticContext()) {\n                // write \"this\"\n                mv.visitLocalVariable(\"this\", className, null, thisStartLabel, thisEndLabel, 0);\n            }\n\n            for (Iterator iterator = usedVariables.iterator(); iterator.hasNext();) {\n                BytecodeVariable v = (BytecodeVariable) iterator.next();\n                ClassNode t = v.getType();\n                if (v.isHolder()) t = ClassHelper.REFERENCE_TYPE;\n                String type = BytecodeHelper.getTypeDescription(t);\n                Label start = v.getStartLabel();\n                Label end = v.getEndLabel();\n                mv.visitLocalVariable(v.getName(), type, null, start, end, v.getIndex());\n            }\n        }\n\n        //exception table writing\n        for (ExceptionTableEntry ep : typedExceptions) {\n            mv.visitTryCatchBlock(ep.start, ep.end, ep.goal, ep.sig);\n        }\n        //exception table writing\n        for (ExceptionTableEntry ep : untypedExceptions) {\n            mv.visitTryCatchBlock(ep.start, ep.end, ep.goal, ep.sig);\n        }\n\n\n        pop();\n        typedExceptions.clear();\n        untypedExceptions.clear();\n        stackVariables.clear();\n        usedVariables.clear();\n        scope = null;\n        finallyBlocks.clear();\n        resetVariableIndex(false);\n        superBlockNamedLabels.clear();\n        currentBlockNamedLabels.clear();\n        namedLoopBreakLabel.clear();\n        namedLoopContinueLabel.clear();\n        continueLabel=null;\n        breakLabel=null;\n        thisStartLabel=null;\n        thisEndLabel=null;\n        mv = null;\n    }", "public void write(int c) throws java.io.IOException {\nsynchronized (lock) {\n    char oneCharArray[]=new char[1];\n    oneCharArray[0]=(char)c;\n    write(oneCharArray);\n  }\n}\n", "public static ValueGetterSpacePredicate < ServerEntry > propertyGreaterEqual ( String propertyName , Comparable < ? > value ) { return property ( propertyName , greaterEqual ( value ) ) ; }", "private List < Statement > parseElemStart ( ElementStartNode startNode , boolean addUsedNames , Set < String > names , boolean parseMap ) throws SyntaxException { Parser parser = new Parser ( startNode , err ) ; if ( addUsedNames ) { parser . addUsedVarNa", "private Signer computeSignerByURI(URI uri, String signerRegionOverride,\n            boolean isRegionIdAsSignerParam) {\n        if (uri == null) {\n            throw new IllegalArgumentException(\n                    \"Endpoint is not set. Use setEndpoint to set an endpoint before performing any request.\");\n        }\n        String service = getServiceNameIntern();\n        String region = AwsHostNameUtils.parseRegionName(uri.getHost(), service);\n\n        return computeSignerByServiceRegion(\n                service, region, signerRegionOverride, isRegionIdAsSignerParam);\n    }", "@Deprecated\n    public <T> MutateInBuilder arrayAppend(String path, T value, boolean createPath) {\n        asyncBuilder.arrayAppend(path, value, new SubdocOptionsBuilder().createPath(createPath));\n        return this;\n    }", "private static AnalysisResult checkAllAppearances(Register reg,IR ir){\n  return new AnalysisResult(!checkIfUseEscapesThread(reg,ir,null),!checkIfUseEscapesMethod(reg,ir,null));\n}\n", "public void cancelThumbnailDownload ( ) { if ( mGetThumbnailTask != null && mGetThumbnailTask . getStatus ( ) != AsyncTask . Status . FINISHED ) { mGetThumbnailTask . cancel ( BOOL_ ) ; } }", "public void getWorkspaceFile(String accountId, String workspaceId, String folderId, String fileId, WorkspacesApi.GetWorkspaceFileOptions options) throws ApiException {\n    Object localVarPostBody = \"{}\";\n    \n      // verify the required parameter 'accountId' is set\n      if (accountId == null) {\n      throw new ApiException(400, \"Missing the required parameter 'accountId' when calling getWorkspaceFile\");\n      }\n    \n      // verify the required parameter 'workspaceId' is set\n      if (workspaceId == null) {\n      throw new ApiException(400, \"Missing the required parameter 'workspaceId' when calling getWorkspaceFile\");\n      }\n    \n      // verify the required parameter 'folderId' is set\n      if (folderId == null) {\n      throw new ApiException(400, \"Missing the required parameter 'folderId' when calling getWorkspaceFile\");\n      }\n    \n      // verify the required parameter 'fileId' is set\n      if (fileId == null) {\n      throw new ApiException(400, \"Missing the required parameter 'fileId' when calling getWorkspaceFile\");\n      }\n    \n    // create path and map variables\n    String localVarPath = \"/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files/{fileId}\".replaceAll(\"\\\\{format\\\\}\",\"json\")\n      .replaceAll(\"\\\\{\" + \"accountId\" + \"\\\\}\", apiClient.escapeString(accountId.toString()))\n      .replaceAll(\"\\\\{\" + \"workspaceId\" + \"\\\\}\", apiClient.escapeString(workspaceId.toString()))\n      .replaceAll(\"\\\\{\" + \"folderId\" + \"\\\\}\", apiClient.escapeString(folderId.toString()))\n      .replaceAll(\"\\\\{\" + \"fileId\" + \"\\\\}\", apiClient.escapeString(fileId.toString()));\n\n    // query params\n    java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();\n    java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();\n    java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();\n\n    if (options != null) {\n       localVarQueryParams.addAll(apiClient.parameterToPairs(\"\", \"is_download\", options.isDownload));\n       localVarQueryParams.addAll(apiClient.parameterToPairs(\"\", \"pdf_version\", options.pdfVersion));\n    }\n    \n    \n      final String[] localVarAccepts = {\n    \"application/json\"\n      };\n      final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n\n      final String[] localVarContentTypes = {\n    \n      };\n      final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n\n      String[] localVarAuthNames = new String[] { \"docusignAccessCode\" }; //{  };\n\n\n      apiClient.invokeAPI(localVarPath, \"GET\", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);\n      }", "public void marshall(CloudwatchMetricAction cloudwatchMetricAction, ProtocolMarshaller protocolMarshaller) {\n\n        if (cloudwatchMetricAction == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(cloudwatchMetricAction.getRoleArn(), ROLEARN_BINDING);\n            protocolMarshaller.marshall(cloudwatchMetricAction.getMetricNamespace(), METRICNAMESPACE_BINDING);\n            protocolMarshaller.marshall(cloudwatchMetricAction.getMetricName(), METRICNAME_BINDING);\n            protocolMarshaller.marshall(cloudwatchMetricAction.getMetricValue(), METRICVALUE_BINDING);\n            protocolMarshaller.marshall(cloudwatchMetricAction.getMetricUnit(), METRICUNIT_BINDING);\n            protocolMarshaller.marshall(cloudwatchMetricAction.getMetricTimestamp(), METRICTIMESTAMP_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public CDatabaseContent ( final SQLProvider provider , final IDatabase database , final ListenerProvider < IDatabaseListener > listeners , final List < INaviProject > projects , final List < INaviModule > modules , final List < INaviRawModule > rawModules", "  public MetadataCreatorImpl setVirtualValue(VirtualValue virtualValue) {\n    synchronized (registry) {\n      this.virtualValue = virtualValue;\n      registry.dirty();\n    }\n    return this;\n  }\n", "public void onPatchServiceResult(boolean isUpgradePatch){\n  if (!isRetryEnable) {\n    TinkerLog.w(TAG,\"onPatchServiceResult retry disabled, just return\");\n    return;\n  }\n  if (!isUpgradePatch) {\n    TinkerLog.w(TAG,\"onPatchServiceResult is not upgrade patch, just return\");\n    return;\n  }\n  if (retryInfoFile.exists()) {\n    SharePatchFileUtil.safeDeleteFile(retryInfoFile);\n  }\n  if (tempPatchFile.exists()) {\n    SharePatchFileUtil.safeDeleteFile(tempPatchFile);\n  }\n}\n", "private ClassLoader createRarClassLoader() throws UnableToAdaptException, MalformedURLException {\n        final boolean trace = TraceComponent.isAnyTracingEnabled();\n\n        // Get the files needed to convert the rar file artifact containers into adaptable containers\n        // Using the ID and the rar file modification date as a unique name for the cache files\n\n        File bundleWorkareaRoot = bundle.getDataFile(\"\");\n        if (trace && tc.isDebugEnabled()) {\n            Tr.debug(this, tc, \"bundleWorkareaRoot \" + bundleWorkareaRoot);\n        }\n\n        // Get list of files in the bundle's data cache\n        final Bundle theBundle = bundle;\n        File[] cacheFiles = AccessController.doPrivileged(new PrivilegedAction<File[]>() {\n            @Override\n            public File[] run() {\n                return theBundle.getDataFile(\"\").listFiles();\n            }\n        });\n\n        // Create unique cache suffix for this rar file\n        String cacheSuffix = \"-.-.\" + id + \"--.-\";\n        String cacheSuffixMod = cacheSuffix + Long.valueOf(FileUtils.fileLastModified(new File(rarFilePath))).toString();\n        if (trace && tc.isDebugEnabled()) {\n            Tr.debug(this, tc, \"cacheSuffixMod \" + cacheSuffixMod);\n        }\n\n        // Clean out cache directories that are for a different version of the rar file than the current one.\n        // ONLY clean out cache directories for this ID, there may be other rar files specified for this server\n        for (File f : cacheFiles) {\n            if (trace && tc.isDebugEnabled()) {\n                Tr.debug(this, tc, \"bundle file path: \" + f.getPath());\n            }\n            if (f.getPath().contains(cacheSuffixMod)) {\n                // keep it\n                if (trace && tc.isDebugEnabled()) {\n                    Tr.debug(this, tc, \"This is a good cache dir for the rar file, keep it\");\n                }\n            } else {\n                // if the directory does not have the correct suffix but does have the id then it\n                // must be a version different from the current rar file, delete it\n                if (f.getPath().contains(cacheSuffix)) {\n                    if (trace && tc.isDebugEnabled()) {\n                        Tr.debug(this, tc, \"This is a cache dir for \" + cacheSuffix + \" but the modification date is not a match, delete it\");\n                    }\n                    if (!deleteBundleCacheDir(f)) {\n                        if (trace && tc.isDebugEnabled()) {\n                            Tr.debug(this, tc, \"Delete failed for \", f, \" check previous debug messages\");\n                        }\n                    }\n                } else {\n                    if (trace && tc.isDebugEnabled()) {\n                        Tr.debug(this, tc, \"This is NOT a cache dir for \" + cacheSuffix + \" leave it alone\");\n                    }\n                }\n            }\n        }\n\n        // getDataFile will return reference to existing file or create it if it does not exist\n        File rarCacheDir = bundle.getDataFile(\"rarCache\" + cacheSuffixMod);\n        if (trace && tc.isDebugEnabled()) {\n            Tr.debug(this, tc, \"getDataFile rarCacheDir \" + rarCacheDir);\n        }\n        if (!FileUtils.ensureDirExists(rarCacheDir)) {\n            // TODO This should really be Tr.error(tc, \"jca.msg.id\", bundle, ctx);\n            if (trace && tc.isDebugEnabled()) {\n                Tr.debug(this, tc, \"Cache failed!!!\");\n            }\n        }\n        File rarOverlayDirectory = bundle.getDataFile(\"rarOverlayDirectory\" + cacheSuffixMod);\n        if (trace && tc.isDebugEnabled()) {\n            Tr.debug(this, tc, \"getDataFile rarOverlayDirectory \" + rarOverlayDirectory);\n        }\n        if (!FileUtils.ensureDirExists(rarOverlayDirectory)) {\n            // TODO This should really be Tr.error(tc, \"jca.msg.id\", bundle, ctx);\n            if (trace && tc.isDebugEnabled()) {\n                Tr.debug(this, tc, \"Overlay failed!!!\");\n            }\n        }\n        File rarCacheDirForOverlayContent = bundle.getDataFile(\"rarCacheDirForOverlayContent\" + cacheSuffixMod);\n        if (trace && tc.isDebugEnabled()) {\n            Tr.debug(this, tc, \"getDataFile rarCacheDirForOverlayContent \" + rarCacheDirForOverlayContent);\n        }\n        if (!FileUtils.ensureDirExists(rarCacheDirForOverlayContent)) {\n            // TODO This should really be Tr.error(tc, \"jca.msg.id\", bundle, ctx);\n            if (trace && tc.isDebugEnabled()) {\n                Tr.debug(this, tc, \"Cache for overlay failed!!!\");\n            }\n        }\n\n        // Get artifact containers for the rar file classes and for the jars in the rar file\n        ArtifactContainer c = null;\n\n        List<ArtifactContainer> rarContainers = new ArrayList<ArtifactContainer>();\n\n        c = _acf.getContainer(rarCacheDir, new File(rarFilePath));\n        rarContainers.add(c);\n        Iterator<ArtifactEntry> i = c.iterator();\n        // TODO this is only working for jars that are in the root, i.e. there is no path in front of the jar\n        while (i.hasNext()) {\n            ArtifactEntry ae = i.next();\n            if (ae.getPath().toLowerCase().endsWith(\".jar\")) {\n                if (trace && tc.isDebugEnabled()) {\n                    Tr.debug(this, tc, \"Artifact entry [ \" + ae.getPath() + \" ]\");\n                }\n                ArtifactContainer jarEntry = ae.convertToContainer();\n                rarContainers.add(jarEntry);\n                if (trace && tc.isDebugEnabled()) {\n                    Tr.debug(this, tc, \"Jar entry [ \" + jarEntry.getPath() + \" ]\");\n                }\n            }\n        }\n\n        // Convert artifact containers to adaptable containers\n        List<Container> classLoaderContainers = new ArrayList<Container>();\n\n        for (ArtifactContainer ac : rarContainers) {\n            classLoaderContainers.add(_amf.getContainer(rarOverlayDirectory, rarCacheDirForOverlayContent, ac));\n        }\n\n        // Create the class loader\n        GatewayConfiguration gwCfg = classloadingSvc.createGatewayConfiguration().setApiTypeVisibility(ApiType.SPEC, ApiType.API, ApiType.IBMAPI,\n                                                                                                       ApiType.THIRDPARTY,\n                                                                                                       ApiType.STABLE).setDynamicImportPackage(\"*\").setDelegateToSystem(true);\n\n        rarClassLoaderId = classloadingSvc.createIdentity(DeferredService.RESOURCE_ADAPTER_DOMAIN, id);\n        if (trace && tc.isDebugEnabled()) {\n            Tr.debug(this, tc, \"Resource adapter [ \" + rarFilePath + \" ]: Class loader ID [ \" + rarClassLoaderId + \" ]\");\n        }\n\n        Container rarContainer = _amf.getContainer(rarOverlayDirectory, rarCacheDirForOverlayContent, c);\n        ProtectionDomain protectionDomain = getProtectionDomain(rarContainer);\n\n        ClassLoaderConfiguration clCfg = classloadingSvc.createClassLoaderConfiguration().setId(rarClassLoaderId).setProtectionDomain(protectionDomain);\n\n        ClassLoader rarClassLoader = classloadingSvc.createTopLevelClassLoader(classLoaderContainers, gwCfg, clCfg);\n\n        if (trace && tc.isDebugEnabled()) {\n            Tr.debug(this, tc, \"Resource adapter [ \" + rarFilePath + \" ]: Class loader [ \" + rarClassLoader + \" ]\");\n        }\n\n        return rarClassLoader;\n    }", "protected Map < String , Object > filterItemValue ( String entityName , Map < String , Object > itemValues ) { ClassMetadata classMetadata = getSessionFactory ( ) . getClassMetadata ( entityName ) ; String [ ] propertyNames = classMetadata . getPropertyNa", "public static String hashKeyForDisk ( String key ) { String cacheKey ; try { final MessageDigest mDigest = MessageDigest . getInstance ( STR_ ) ; mDigest . update ( key . getBytes ( ) ) ; cacheKey = bytesToHexString ( mDigest . digest ( ) ) ; } catch ( No", "public static byte[] toByteArray(InputStream input) throws IOException {\n  ByteArrayOutputStream output=new ByteArrayOutputStream();\n  stream(input,output);\n  return output.toByteArray();\n}\n", "public int compareTo(Rule that){\n  int answer=compareInt(this.importPrecedence,that.importPrecedence);\n  if (answer == 0) {\n    answer=Double.compare(this.priority,that.priority);\n    if (answer == 0) {\n      answer=compareInt(this.appearenceCount,that.appearenceCount);\n    }\n  }\n  return answer;\n}\n", "public static String parseCharset ( Map < String , String > headers , String defaultCharset ) { String contentType = headers . get ( HTTP . CONTENT_TYPE ) ; if ( contentType != null ) { String [ ] params = contentType . split ( STR_ ) ; for ( int i = NUM_", "public void attributeRemoved ( ServletRequestAttributeEvent srae ) ;", "\tprivate void saveBet(BetItem item) {\n\t\titem.setStatus(BetItem.STATUS_OK);\n\t\tlong betId = this.getBetDao().add(item);\n\t\titem.setId(betId);\n\t}\n", "\tpublic boolean removeObjectModel(ObjectModel om) {\n\t\tlog.debug(\"Removing an object model.\"); //$NON-NLS-1$\n\t\tif (om == null) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn objectModels.remove(om);\n\t\t}\n\t}\n", "public static byte[] getSaltBytes(final int bucket) {\n    final byte[] bytes = new byte[Const.SALT_WIDTH()];\n    int shift = 0;\n    for (int i = 1;i <= Const.SALT_WIDTH(); i++) {\n      bytes[Const.SALT_WIDTH() - i] = (byte) (bucket >>> shift);\n      shift += 8;\n    }\n    return bytes;\n  }", "\tprivate void clearResultTables(boolean removeTabs) {\n\t\ttableToSQLMap.clear();\n    \tfor (JTable table : resultJTables) {\n    \t\tfor (int i = tableListeners.size() - 1; i >= 0; i--) {\n    \t\t\ttableListeners.get(i).tableRemoved(new TableChangeEvent(this, table));\n    \t\t}\n    \t}\n    \t\n    \tif (removeTabs) {\n    \t    resultJTables.clear();\n    \t    resultJTableScrollPanes.clear();\n    \t    if(resultTabPane.getComponentCount() > 1) {\n    \t        for(int i = resultTabPane.getComponentCount()-1; i >= 1; i--){\n    \t            resultTabPane.remove(i);\n    \t        }\n    \t    }\n    \t}\n\t}\n", "public void testSubListFromGreaterThanTo ( ) { try { final Range range = createRange ( NUM_ , NUM_ ) ; range . subList ( NUM_ , NUM_ ) ; fail ( STR_ ) ; } catch ( IllegalArgumentException e ) { assertTrue ( STR_ , BOOL_ ) ; } }", "public void stopTimer() {\n\t\tif(this.WRITE_CACHE_ENABLED) {\n\t\t\tif(timerWriteCache != null) {\n\t\t\t\ttimerWriteCache.cancel();\n\t\t\t}\n\t\t\tif(writeTimer != null){\n\t\t\t\twriteTimer.cancel();\n\t\t\t}\n\t\t\tif(timerDeleteCache != null) {\n\t\t\t\ttimerDeleteCache.cancel();\n\t\t\t}\n\t\t\tif(deleteTimer != null){\n\t\t\t\tdeleteTimer.cancel();\n\t\t\t}\n\t\t}\n\t}", "protected HttpServerProvider(){\n  SecurityManager sm=System.getSecurityManager();\n  if (sm != null)   sm.checkPermission(new RuntimePermission(\"httpServerProvider\"));\n}\n", "\tpublic boolean equals(Object obj) {\n\t\tif (obj instanceof Hand) {\n\t\t\tHand cmp=(Hand)obj;\n\t\t\tif (getHand()!=cmp.getHand() &&\n\t\t\t\t\t(getHand()==null || !getHand().equals(cmp.getHand()))\n\t\t\t) return false;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n", "public MemoryModule ( final com . google . security . zynamics . binnavi . debug . models . processmanager . MemoryModule module ) { this . module = Preconditions . checkNotNull ( module , STR_ ) ; }", "    public boolean isTableExist(String tabName) {\n        if(conn == null || stmt == null) {\n            MyDebug.printFileLine(JDBC_NOT_CONNECT);\n            return false;\n        }\n        \n        if(tabName == null || tabName.isEmpty()) {\n            MyDebug.printFileLine(INVALID_TABLE_NAME);\n            return false;\n        }\n        \n        tabName = normalize(tabName);\n        \n        try {\n            DatabaseMetaData meta = conn.getMetaData();\n            ResultSet res = meta.getTables(null, null, tabName, new String[] {\"table\"});\n            if (res.next()) {\n                return true;\n            }\n            res.close();\n        } catch (SQLException e) {\n            return false;\n        }\n        \n        return false;\n    }\n", "protected String handleBigDecimal(BigDecimal decimal){\n  return decimal == null ? \"\" : decimal.toString();\n}\n", "public ImageLoadOption maxHeight ( int maxHeight ) { this . maxHeight = maxHeight ; return this ; }", "protected String getMessage(CmsMessageContainer container) {\n\n        CmsObject cms = getCmsObject();\n        String result;\n        if ((cms == null) || (cms.getRequestContext().getLocale() == null)) {\n            result = container.key();\n        } else {\n            result = container.key(cms.getRequestContext().getLocale());\n        }\n        return result;\n    }", "public FessMessages addErrorsDesignFileIsUnsupportedType(String property) {\n        assertPropertyNotNull(property);\n        add(property, new UserMessage(ERRORS_design_file_is_unsupported_type));\n        return this;\n    }", "public Element drawLine(List<mxPoint> pts,Map<String,Object> style){\n  String strokeColor=mxUtils.getString(style,mxConstants.STYLE_STROKECOLOR);\n  float strokeWidth=(float)(mxUtils.getFloat(style,mxConstants.STYLE_STROKEWIDTH,1) * scale);\n  Element elem=document.createElement(\"v:shape\");\n  if (strokeColor != null && strokeWidth > 0) {\n    mxPoint pt=pts.get(0);\n    Rectangle r=new Rectangle(pt.getPoint());\n    String d=\"m \" + Math.round(pt.getX()) + \" \"+ Math.round(pt.getY());\n    for (int i=1; i < pts.size(); i++) {\n      pt=pts.get(i);\n      d+=\" l \" + Math.round(pt.getX()) + \" \"+ Math.round(pt.getY());\n      r=r.union(new Rectangle(pt.getPoint()));\n    }\n    elem.setAttribute(\"path\",d);\n    elem.setAttribute(\"filled\",\"false\");\n    elem.setAttribute(\"strokecolor\",strokeColor);\n    elem.setAttribute(\"strokeweight\",String.valueOf(strokeWidth) + \"pt\");\n    String s=\"position:absolute;\" + \"left:\" + String.valueOf(r.x) + \"px;\"+ \"top:\"+ String.valueOf(r.y)+ \"px;\"+ \"width:\"+ String.valueOf(r.width)+ \"px;\"+ \"height:\"+ String.valueOf(r.height)+ \"px;\";\n    elem.setAttribute(\"style\",s);\n    elem.setAttribute(\"coordorigin\",String.valueOf(r.x) + \" \" + String.valueOf(r.y));\n    elem.setAttribute(\"coordsize\",String.valueOf(r.width) + \" \" + String.valueOf(r.height));\n  }\n  appendVmlElement(elem);\n  return elem;\n}\n", "protected void processUpdates(Queue<DeviceUpdate> updates){\n  if (updates == null)   return;\n  DeviceUpdate update=null;\n  while (null != (update=updates.poll())) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Dispatching device update: {}\",update);\n    }\n    if (update.change == DeviceUpdate.Change.DELETE) {\n      deviceSyncManager.removeDevice(update.device);\n    }\n else {\n      deviceSyncManager.storeDevice(update.device);\n    }\n    List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();\n    notifyListeners(listeners,update);\n  }\n}\n", "private boolean readPort(){\n  _currentUrlMarker.setIndex(UrlPart.PORT,_buffer.length());\n  int portLen=0;\n  while (!_reader.eof()) {\n    char curr=_reader.read();\n    portLen++;\n    if (curr == '/') {\n      _buffer.append(curr);\n      return readPath();\n    }\n else     if (curr == '?') {\n      _buffer.append(curr);\n      return readQueryString();\n    }\n else     if (curr == '#') {\n      _buffer.append(curr);\n      return readFragment();\n    }\n else     if (checkMatchingCharacter(curr) == CharacterMatch.CharacterMatchStop || !CharUtils.isNumeric(curr)) {\n      _reader.goBack();\n      if (portLen == 1) {\n        _buffer.delete(_buffer.length() - 1,_buffer.length());\n      }\n      _currentUrlMarker.unsetIndex(UrlPart.PORT);\n      return readEnd(ReadEndState.ValidUrl);\n    }\n else {\n      _buffer.append(curr);\n    }\n  }\n  return readEnd(ReadEndState.ValidUrl);\n}\n", "\tpublic JComponent add(JComponent c) {\n\t\t// Redefine this, in case someone uses it.\n\t\taddComponent(c);\n\t\treturn c;\n\t}\n", "private void addContext(\n      final EvaluatorRuntimeProtocol.AddContextProto addContextProto)\n      throws ContextClientCodeException {\n\n    synchronized (this.contextStack) {\n      try {\n\n        final ContextRuntime currentTopContext = this.contextStack.peek();\n\n        if (!currentTopContext.getIdentifier().equals(addContextProto.getParentContextId())) {\n          throw new IllegalStateException(\"Trying to instantiate a child context on context with id `\" +\n              addContextProto.getParentContextId() + \"` while the current top context id is `\" +\n              currentTopContext.getIdentifier() + \"`\");\n        }\n\n        final Configuration contextConfiguration =\n            this.configurationSerializer.fromString(addContextProto.getContextConfiguration());\n\n        final ContextRuntime newTopContext;\n        if (addContextProto.hasServiceConfiguration()) {\n          newTopContext = currentTopContext.spawnChildContext(contextConfiguration,\n              this.configurationSerializer.fromString(addContextProto.getServiceConfiguration()));\n        } else {\n          newTopContext = currentTopContext.spawnChildContext(contextConfiguration);\n        }\n\n        this.contextStack.push(newTopContext);\n\n      } catch (final IOException | BindException e) {\n        throw new RuntimeException(\"Unable to read configuration.\", e);\n      }\n\n    }\n  }", "public void defaultConfiguration(){\n  config.defaultConfiguration();\n  applyConfig();\n}\n", "private boolean enqueueLocked(Reference<? extends T> r) {\n        // Verify the reference has not already been enqueued.\n        if (r.queueNext != null) {\n            return false;\n        }\n\n        /* J2ObjC removed.\n        if (r instanceof Cleaner) {\n            // If this reference is a Cleaner, then simply invoke the clean method instead\n            // of enqueueing it in the queue. Cleaners are associated with dummy queues that\n            // are never polled and objects are never enqueued on them.\n            Cleaner cl = (sun.misc.Cleaner) r;\n            cl.clean();\n\n            // Update queueNext to indicate that the reference has been\n            // enqueued, but is now removed from the queue.\n            r.queueNext = sQueueNextUnenqueued;\n            return true;\n        }\n        */\n\n        if (tail == null) {\n            head = r;\n        } else {\n            tail.queueNext = r;\n        }\n        tail = r;\n        tail.queueNext = SENTINEL;\n        return true;\n    }", "\t\t\tpublic boolean isLazyText ( int offset, String text ) {\n\t\t\t\t\n\t\t\t\tchar c = text.charAt ( 0 );\n\t\t\t\tboolean isLazy = isLazyChar ( c, offset );\n\t\t\t\tif ( isLazy && offset > 0 ) {\n\t\t\t\t\tc = getDocumentText ().charAt ( offset - 1 );\n\t\t\t\t\tisLazy = isLazyChar ( c, offset - 1 );\n\t\t\t\t}\n\t\t\t\treturn isLazy;\n\t\t\t}\n", "@Override public ObjectIterator iterator(){\n  return new StructIterator(fieldValuesIterator());\n}\n", "      private boolean isAllCaps(String name) {\n         for (int ndx = 0; ndx < name.length(); ndx++) {\n            char ch = name.charAt(ndx);\n            if (ch == '_') {\n               //  OK\n            } else if (Character.isUpperCase(ch)) {\n               //  OK\n            } else {\n               return false;\n            }\n         }\n\n         return true;\n      }\n", "private int read() throws IOException {\n  this.bytePosition++;\n  return input.read();\n}\n", "private static List < String [ ] > readSentence ( BufferedReader aReader ) throws IOException { List < String [ ] > words = new ArrayList < String [ ] > ( ) ; String line ; while ( ( line = aReader . readLine ( ) ) != null ) { if ( StringUtils . isBlank (", "public static int readVarInt(ByteBuffer buff){\n  int b=buff.get();\n  if (b >= 0) {\n    return b;\n  }\n  return readVarIntRest(buff,b);\n}\n", "private void onEvent ( CounterManager . Event2C . OnCounterUpdated event ) { getModel ( ) . count = String . valueOf ( event . getCount ( ) ) ; if ( view != null ) { view . update ( ) ; } }", "\tpublic void showErrorIcon(String msg) {\n\t\tif (m_error_label == null) {\n\t\t\tm_error_label = new JLabel(msg);\n\t\t\tm_error_label.setIcon(javax.swing.UIManager\n\t\t\t\t\t.getIcon(\"OptionPane.errorIcon\"));\n\t\t\tm_error_label.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0,\n\t\t\t\t\t10, 0));\n\t\t\tadd(m_error_label, BorderLayout.NORTH);\n\t\t} else {\n\t\t\tm_error_label.setText(msg);\n\t\t}\n\t}\n", "@SneakyThrows(ConditionalTableUpdateException.class)\n    private void validateConditionalUpdate(List<TableKeyBatch.Item> items, Map<UUID, Long> bucketOffsets, String segmentName) {\n        val badKeyVersions = new HashMap<TableKey, Long>(); // Key = Key that failed, Value = Key's bucket offset.\n        for (val item : items) {\n            // Validate compareVersion.\n            TableKey key = item.getKey();\n            Long bucketOffset = bucketOffsets.get(item.getHash());\n            assert key.hasVersion() : \"validateConditionalUpdate for TableKey with no compare version\";\n            if (bucketOffset == TableKey.NOT_EXISTS) {\n                if (key.getVersion() != TableKey.NOT_EXISTS) {\n                    // Key does not exist, but the conditional update provided a specific version.\n                    throw new KeyNotExistsException(segmentName, key.getKey());\n                }\n            } else if (bucketOffset != key.getVersion()) {\n                // Key does exist, but has the wrong version.\n                badKeyVersions.put(key, bucketOffset);\n            }\n        }\n\n        if (!badKeyVersions.isEmpty()) {\n            // Throw the bad key version in bulk - helps speed verification.\n            throw new BadKeyVersionException(segmentName, badKeyVersions);\n        }\n\n        // All validations for all items passed.\n    }", "public static void writeFileList ( XMLOutput xmlOutput , String tagName , Iterable < File > listValues ) throws IOException { if ( listValues != null ) { writeFileList ( xmlOutput , tagName , listValues . iterator ( ) ) ; } }", "    private int convertModelToRow(int index) {\n        int size = getModel().getSize();\n\n        if ((index < 0) || (index >= size)) {\n            return -1;\n        }\n\n        if (getLayoutOrientation() != JList.VERTICAL && columnCount > 1 &&\n                rowsPerColumn > 0) {\n            if (getLayoutOrientation() == JList.VERTICAL_WRAP) {\n                return index % rowsPerColumn;\n            }\n            return index / columnCount;\n        }\n        return index;\n    }\n", "private synchronized void cleanupFutures(){\n  if (schedulerFuture != null) {\n    schedulerFuture.cancel(false);\n    schedulerFuture=null;\n  }\n  if (monitorFuture != null) {\n    monitorFuture.cancel(false);\n    monitorFuture=null;\n  }\n}\n", "public void unregister ( ILeasedEntryCacheInfo leaseCacheInfo , long expiration ) { boolean unregister ; if ( leaseCacheInfo . isOffHeapEntry ( ) ) unregister = expiration != Long . MAX_VALUE && ! _alwaysDisableEntriesLeases ; else unregister = leaseCacheInfo . isConnectedToLeaseManager ( ) ; if ( unregister ) { if ( ! leaseCacheInfo . isOffHeapEntry ( ) ) { leaseCacheInfo . getLeaseManagerListRef ( ) . remove ( leaseCacheInfo . getLeaseManagerPosition ( ) ) ; } else { Long expirationTime = ( ( expiration / _expirationTimeInterval + NUM_ ) * _expirationTimeInterval ) ; Cell cell = _expirationList . get ( expirationTime ) ; if ( cell != null ) cell . unregisterByPos ( leaseCacheInfo . getLeaseManagerPosition ( ) , BOOL_ ) ; } leaseCacheInfo . setLeaseManagerListRefAndPosition ( null , null ) ; } }", "@Override\n    public StartInstancesResult startInstances(StartInstancesRequest request) {\n        request = beforeClientExecution(request);\n        return executeStartInstances(request);\n    }", "    public String getHost() throws URIException {\n        if (_host != null) {\n            return decode(_host, getProtocolCharset());\n        }\n        return null;\n    }\n", "public void testConnectorSecuritySettingsSSL_false ( ) { resetSecuritySystemProperties ( ) ; AuthenticationInfo authInfo = null ; try { authInfo = SecurityHelper . loadAuthenticationInformation ( STR_ , BOOL_ , TUNGSTEN_APPLICATION_NAME . CONNECTOR ) ; } ", "public Transformation2D copy() {\n\t\tTransformation2D result = new Transformation2D();\n\t\tresult.xx = xx;\n\t\tresult.xy = xy;\n\t\tresult.xd = xd;\n\t\tresult.yx = yx;\n\t\tresult.yy = yy;\n\t\tresult.yd = yd;\n\t\treturn result;\n\t}", "private void internalGetNext() throws QueryEvaluationException {\n  isInitialized=true;\n  nextStatement=null;\n  Statement statement=null;\n  while (i.hasNext()) {\n    final Entry<Key,Value> entry=i.next();\n    final Value v=entry.getValue();\n    try {\n      final String dataString=Text.decode(v.get(),0,v.getSize());\n      statement=StatementSerializer.readStatement(dataString);\n    }\n catch (    final CharacterCodingException e) {\n      logger.error(\"Error decoding value=\" + Arrays.toString(v.get()),e);\n      throw new QueryEvaluationException(e);\n    }\ncatch (    final IOException e) {\n      logger.error(\"Error de-serializing statement, string=\" + v.get(),e);\n      throw new QueryEvaluationException(e);\n    }\n    if (allowedBy(statement)) {\n      nextStatement=statement;\n      return;\n    }\n  }\n}\n", "public void replaceData(int offset,int count,String data) throws DOMException {\n  CoreDocumentImpl ownerDocument=ownerDocument();\n  if (ownerDocument.errorChecking && isReadOnly()) {\n    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,\"NO_MODIFICATION_ALLOWED_ERR\",null);\n    throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);\n  }\n  if (needsSyncData()) {\n    synchronizeData();\n  }\n  ownerDocument.replacingData(this);\n  String oldvalue=this.data;\n  internalDeleteData(offset,count,true);\n  internalInsertData(offset,data,true);\n  ownerDocument.replacedCharacterData(this,oldvalue,this.data);\n}\n", "protected Date parseNonNullDate(String str, ParsePosition pos)\n   {\n      Date result = null;\n      for (int index = 0; index < m_formats.length; index++)\n      {\n         result = m_formats[index].parse(str, pos);\n         if (pos.getIndex() != 0)\n         {\n            break;\n         }\n         result = null;\n      }\n      return result;\n   }", "public boolean tryAcquire(){\n  return (Counter.tryAcquire(1));\n}\n", "long popLong ( ) ;", "public static String toJSONString(Map map){\n  final StringWriter writer=new StringWriter();\n  try {\n    writeJSONString(map,writer);\n    return writer.toString();\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}\n", "protected Optional<Response> executePostRequest(URI uri, Object obj)\n    {    \n        return executePostRequest(uri, obj, (Map<String, Object>)null);\n    }", "    public String getAlt() {\n        if (alt != null) {\n            return alt;\n        }\n        ValueBinding vb = getValueBinding(\"alt\");\n        return vb != null ? (String) vb.getValue(getFacesContext()) : null;\n    }\n", "protected boolean isExpanded(Component node){\n  Object e=node.getClientProperty(KEY_EXPANDED);\n  return e != null && e.equals(\"true\");\n}", "public Renaming clone ( ) { Renaming result = new Renaming ( ) ; result . identifiers = ( Vector < FormalParamNode > ) this . identifiers . clone ( ) ; result . newNames = ( Vector < String > ) this . newNames ; return result ; }", "private boolean sample(){\n  Sampler[] samplers=curSamplers;\n  for (  Sampler sampler : samplers) {\n    if (sampler.next()) {\n      return true;\n    }\n  }\n  return false;\n}\n", "public int size(){\n  return sortedSet.size();\n}\n", "public static XMethod createXMethod ( JavaClass javaClass , Method method ) { if ( method == null ) { throw new NullPointerException ( STR_ ) ; } XMethod xmethod = createXMethod ( javaClass . getClassName ( ) , method ) ; assert xmethod . isResolved ( ) ;", "@Override\n    public ResourceSet<FieldValue> read(final TwilioRestClient client) {\n        return new ResourceSet<>(this, client, firstPage(client));\n    }", "public boolean created(URI storageSystemUri){\n  if (storageSystemUri != null && systemConsistencyGroups != null && !systemConsistencyGroups.isEmpty()) {\n    StringSet cgNames=systemConsistencyGroups.get(storageSystemUri.toString());\n    if (cgNames != null && !cgNames.isEmpty()) {\n      return true;\n    }\n  }\n  return false;\n}\n", "\tpublic void modificationCleared(AutoModEvent event) {\n\t\tfor (IAutoModificationListener listener : _modListeners) {\n\t\t\tlistener.modificationCleared(event);\n\t\t}\n\t}\n", "public static DecryptionTool get(Key<DecryptionTool> key) {\n    if (key == null)\n      return new NullDecryptionTool();\n    DecryptionTool decrypt = DKV.getGet(key);\n    return decrypt == null ? new NullDecryptionTool() : decrypt;\n  }", "public void marshall(DeleteLogStreamRequest deleteLogStreamRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (deleteLogStreamRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(deleteLogStreamRequest.getLogGroupName(), LOGGROUPNAME_BINDING);\n            protocolMarshaller.marshall(deleteLogStreamRequest.getLogStreamName(), LOGSTREAMNAME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "    protected void setColumnsFromWorker( final List columns) {\n        try {\n\n            Runnable r = new Runnable() {\n                public void run() {\n                    getReportQueryDialog().setColumns( columns );\n                    getReportQueryDialog().getSQLExpressionArea().requestFocusInWindow();\n                }\n            };\n\n            if (SwingUtilities.isEventDispatchThread()) { r.run(); }\n            else { SwingUtilities.invokeAndWait( r ); }\n\n        } catch(Exception e) {\n            // oh well we got interrupted.\n        }\n    }\n", "public void apply ( DBMSEvent event , ReplDBMSHeader header , boolean doCommit , boolean doRollback ) throws ReplicatorException , ConsistencyException , InterruptedException ;", "private static boolean equal(Object o1,Object o2){\n  return ((o1 == null || o2 == null) ? (o1 == o2) : o1.equals(o2));\n}\n", "public void removePreInstantiateDelegate ( Closure delegate ) { getProxyBuilder ( ) . preInstantiateDelegates . remove ( delegate ) ; }", "public CmsAlias readAliasByPath(CmsRequestContext context, String siteRoot, String path) throws CmsException {\n\n        CmsDbContext dbc = m_dbContextFactory.getDbContext(context);\n        try {\n            CmsAlias alias = m_driverManager.readAliasByPath(dbc, context.getCurrentProject(), siteRoot, path);\n            return alias;\n        } catch (Exception e) {\n            dbc.report(null, Messages.get().container(Messages.ERR_DB_OPERATION_0), e);\n            return null; // will never be executed\n        } finally {\n            dbc.clear();\n        }\n    }", "    public boolean isReleased() {\n\t// A synchronized block is not necessary: only a read access, and what\n\t// is the value of the information on return?\n\t    return this.released;\n    }\n", "public AnnotationVisitor visitParameterAnnotation ( int parameter , String desc , boolean visible ) { if ( mv != null ) { return mv . visitParameterAnnotation ( parameter , desc , visible ) ; } return null ; }", "public void setReference(final String propertyName, final BeanId value) {\n        Preconditions.checkNotNull(propertyName);\n        if (value == null) {\n            references.put(propertyName, null);\n            return;\n        }\n        checkCircularReference(value);\n        List<BeanId> values = new ArrayList<>();\n        values.add(value);\n        references.put(propertyName, values);\n    }", "\tprivate String getWorkbenchMessageVersion() {\n\t\tProperties properties = new Properties();\n\t\tString version=\"\";\n\t\tString filename=\"i2b2workbench.properties\";\n\t\ttry {\n\t\t\tproperties.load(new FileInputStream(filename));\n\t\t\tversion=properties.getProperty(\"messageversion\");\n\t\t} catch (IOException e) {\n\t\t\tlog.error(e.getMessage());\n\t\t}\n\t\tlog.info(\"workbench message version=\"+version);\n\t\treturn version;\n\t}\n", "\tpublic boolean isValid(Object value) {\n\t\treturn value != null;\n\t}\n", "public static ESVersion fromString(String version) {\n        String lVersion = version;\n        final boolean snapshot = lVersion.endsWith(\"-SNAPSHOT\");\n        if (snapshot) {\n            lVersion = lVersion.substring(0, lVersion.length() - 9);\n        }\n        String[] parts = lVersion.split(\"[.-]\");\n        if (parts.length < 3 || parts.length > 4) {\n            throw new IllegalArgumentException(\n                    \"the lVersion needs to contain major, minor, and revision, and optionally the build: \" + lVersion);\n        }\n\n        try {\n            final int rawMajor = Integer.parseInt(parts[0]);\n            if (rawMajor >= 5 && snapshot) { // we don't support snapshot as part of the lVersion here anymore\n                throw new IllegalArgumentException(\"illegal lVersion format - snapshots are only supported until lVersion 2.x\");\n            }\n            final int betaOffset = rawMajor < 5 ? 0 : 25;\n            //we reverse the lVersion id calculation based on some assumption as we can't reliably reverse the modulo\n            final int major = rawMajor * 1000000;\n            final int minor = Integer.parseInt(parts[1]) * 10000;\n            final int revision = Integer.parseInt(parts[2]) * 100;\n\n\n            int build = 99;\n            if (parts.length == 4) {\n                String buildStr = parts[3];\n                if (buildStr.startsWith(\"alpha\")) {\n                    assert rawMajor >= 5 : \"major must be >= 5 but was \" + major;\n                    build = Integer.parseInt(buildStr.substring(5));\n                    assert build < 25 : \"expected a beta build but \" + build + \" >= 25\";\n                } else if (buildStr.startsWith(\"Beta\") || buildStr.startsWith(\"beta\")) {\n                    build = betaOffset + Integer.parseInt(buildStr.substring(4));\n                    assert build < 50 : \"expected a beta build but \" + build + \" >= 50\";\n                } else if (buildStr.startsWith(\"RC\") || buildStr.startsWith(\"rc\")) {\n                    build = Integer.parseInt(buildStr.substring(2)) + 50;\n                } else {\n                    throw new IllegalArgumentException(\"unable to parse lVersion \" + lVersion);\n                }\n            }\n\n            return new ESVersion(major + minor + revision + build);\n\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"unable to parse lVersion \" + lVersion, e);\n        }\n    }", "public static void main ( String [ ] args ) { IJSpace space = null ; try { space = ( IJSpace ) SpaceFinder . find ( args [ NUM_ ] ) ; } catch ( FinderException e ) { if ( _logger . isLoggable ( Level . SEVERE ) ) { _logger . log ( Level . SEVERE , e . toString ( ) , e ) ; } } new JMSDurableSubService ( space ) ; }", "public boolean deleteTriggerInternet ( IEspDevice device , long triggerId ) ;", "public int decryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {\n  if ((inOff + blockSize) > in.length) {\n    throw new DataLengthException(\"input buffer too short\");\n  }\n  if ((outOff + blockSize) > out.length) {\n    throw new DataLengthException(\"output buffer too short\");\n  }\n  cipher.processBlock(cfbV,0,cfbOutV,0);\n  System.arraycopy(cfbV,blockSize,cfbV,0,cfbV.length - blockSize);\n  System.arraycopy(in,inOff,cfbV,cfbV.length - blockSize,blockSize);\n  for (int i=0; i < blockSize; i++) {\n    out[outOff + i]=(byte)(cfbOutV[i] ^ in[inOff + i]);\n  }\n  return blockSize;\n}\n", "public Set<String> addContent(MultivariateDistribution distrib){\n  if (!paused) {\n    curState.addToState(distrib);\n    return update();\n  }\n else {\n    log.info(\"system is paused, ignoring content \" + distrib);\n    return Collections.emptySet();\n  }\n}\n", "    public void windowIconified(WindowEvent e) {\n        receiveEvent(e);\n    }\n", "public Parser<RECORD> addParseTarget(final String setterMethodName,\n                               final SetterPolicy setterPolicy,\n                               final String fieldValue) throws NoSuchMethodException {\n        Method method;\n\n        try {\n            method = recordClass.getMethod(setterMethodName, String.class);\n        } catch (NoSuchMethodException a) {\n            try {\n                method = recordClass.getMethod(setterMethodName, String.class, String.class);\n            } catch (NoSuchMethodException b) {\n                try {\n                    method = recordClass.getMethod(setterMethodName, String.class, Long.class);\n                } catch (NoSuchMethodException c) {\n                    try {\n                        method = recordClass.getMethod(setterMethodName, String.class, Double.class);\n                    } catch (NoSuchMethodException d) {\n                        try {\n                            method = recordClass.getMethod(setterMethodName, Long.class);\n                        } catch (NoSuchMethodException e) {\n                            try {\n                                method = recordClass.getMethod(setterMethodName, Double.class);\n                            } catch (NoSuchMethodException f) {\n                                throw new NoSuchMethodException(\n                                    \"Unable to find any valid form of the method \" + setterMethodName +\n                                        \" in the class \" + recordClass.getCanonicalName());\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        addParseTarget(method, setterPolicy, Collections.singletonList(fieldValue));\n        return this;\n    }", "private boolean initSnappable(int x,int y){\n  if ((Math.abs(mOldParam[0] - x) > mSensitivity) || (Math.abs(mOldParam[1] - y) > mSensitivity)) {\n    mOldParam[0]=x;\n    mOldParam[1]=y;\n    discardTimeout();\n    return false;\n  }\n  mOldParam[0]=x;\n  mOldParam[1]=y;\n  int newSnapGravity=0;\n  if (x < mRange)   newSnapGravity=newSnapGravity | Gravity.LEFT;\n  if (x > (mScreenWidth - mRange))   newSnapGravity=newSnapGravity | Gravity.RIGHT;\n  if (y < mRange)   newSnapGravity=newSnapGravity | Gravity.TOP;\n  if (y > (mScreenHeight - mRange))   newSnapGravity=newSnapGravity | Gravity.BOTTOM;\n  mSnapWindowHolder.updateSnap(newSnapGravity);\n  return mSnapWindowHolder.isSnapped;\n}\n", "void deleteSectionComment ( int moduleId , int sectionId , Integer commentId , Integer userId ) throws CouldntDeleteException ;", "public CAddressSpace ( final int addressSpaceId , final String name , final String description , final Date creationDate , final Date modificationDate , final Map < INaviModule , IAddress > imageBases , final DebuggerTemplate debuggerTemplate , final SQLP", "void changedX ( ViewNode node , double xpos ) ;", "  private void putTime(double timestamp) {\n    if (timestamp == lastTimestamp) {\n      return;\n    }\n    \n    cmap.PutTime(timestamp, 0);\n    \n    lastTimestamp = timestamp;\n  }\n", "private static void compressTBZ2(Resource[] sources,Resource target,int mode) throws IOException {\n  ByteArrayOutputStream baos=new ByteArrayOutputStream();\n  compressTar(sources,baos,mode);\n  _compressBZip2(new ByteArrayInputStream(baos.toByteArray()),target.getOutputStream());\n}\n", "    public TextObjectGroup buildSentence(String text, int x, int y, int lineLength) {\n    \treturn buildSentence(text, new PVector(x, y), lineLength);\n    }\n", "public static void handleTypeMismatchError(XMLSerializer serializer,Object parentObject,String fieldName,Object childObject) throws AbortSerializationException {\n  ValidationEvent ve=new ValidationEventImpl(ValidationEvent.ERROR,Messages.format(Messages.ERR_TYPE_MISMATCH,getUserFriendlyTypeName(parentObject),fieldName,getUserFriendlyTypeName(childObject)),new ValidationEventLocatorExImpl(parentObject,fieldName));\n  serializer.reportError(ve);\n}\n", "public void toSrt(Path srtFile) {\n        try (FileOutputStream fos = new FileOutputStream(srtFile.toFile());\n             OutputStreamWriter osw = new OutputStreamWriter(fos, Charset.forName(\"UTF-8\"));\n             PrintWriter writer = new PrintWriter(osw)) {\n            long counter = 1;\n            for (Subtitle title : subtitleList) {\n                writer.println(counter);\n                writer.println(srtFormat.format(title.begin) + \" --> \" + srtFormat.format(title.end));\n                for (StyledString entry : title.listOfStrings) {\n                    if (!entry.color.isEmpty()) {\n                        writer.print(\"<font color=\\\"\" + entry.color + \"\\\">\");\n                    }\n                    writer.print(entry.text);\n                    if (!entry.color.isEmpty()) {\n                        writer.print(\"</font>\");\n                    }\n                    writer.println();\n                }\n                writer.println(\"\");\n                counter++;\n            }\n        } catch (Exception ex) {\n            Log.errorLog(201036470, ex, \"File: \" + srtFile);\n        }\n    }", "public void silentClear(){\n  mSelectedWidgets.clear();\n  mModifiedWidgets.clear();\n}", "private void createLocalFiles(String baseDirectory,long size) throws IOException {\n  for (  String file : LOCAL_FILES) {\n    createLocalFile(baseDirectory,file,size);\n  }\n}\n", "public void setPolicies(java.util.Collection<Policy> policies) {\n        if (policies == null) {\n            this.policies = null;\n            return;\n        }\n\n        this.policies = new java.util.ArrayList<Policy>(policies);\n    }", "public static String toDot(String ns,String n){\n  return ns.length() > 0 ? ns + '.' + n : n;\n}\n", "public void connectionClosed(ConnectionEvent event){\n  if (isActive) {\n    ManagedConnection conn=(ManagedConnection)event.getSource();\n    XAResource xar=null;\n    if (xaResourcesMap.get(conn) != null)     xar=(XAResource)xaResourcesMap.get(conn);\n    xaResourcesMap.remove(conn);\n    try {\n      Transaction txn=transManager.getTransaction();\n      if (txn != null && xar != null) {\n        txn.delistResource(xar,XAResource.TMSUCCESS);\n      }\n    }\n catch (    Exception se) {\n      String exception=\"JCAConnectionManagerImpl::connectionClosed: Exception occured due to \" + se;\n      if (logger.isDebugEnabled()) {\n        logger.debug(exception,se);\n      }\n    }\n    mannPoolCache.returnPooledConnectionToPool(conn);\n  }\n}\n", "public void displayInfo (String bundle, String message)\n    {\n        displaySystem(bundle, message, SystemMessage.INFO, PLACE_CHAT_TYPE);\n    }", "public void readFrom(DataInput in) throws IOException {\n  typeId=in.readInt();\n  typeName=U.readString(in);\n  int fieldsSize=in.readInt();\n  if (fieldsSize == -1)   fields=null;\n else {\n    fields=new HashMap<>();\n    for (int i=0; i < fieldsSize; i++) {\n      String fieldName=U.readString(in);\n      int fieldId=in.readInt();\n      fields.put(fieldName,fieldId);\n    }\n  }\n  affKeyFieldName=U.readString(in);\n  int schemasSize=in.readInt();\n  if (schemasSize == -1)   schemas=null;\n else {\n    schemas=new ArrayList<>();\n    for (int i=0; i < schemasSize; i++) {\n      BinarySchema schema=new BinarySchema();\n      schema.readFrom(in);\n      schemas.add(schema);\n    }\n  }\n  isEnum=in.readBoolean();\n}\n", "public ServiceFuture<List<ResourceMetricDefinitionInner>> listMetricDefintionsAsync(final String resourceGroupName, final String name, final ListOperationCallback<ResourceMetricDefinitionInner> serviceCallback) {\n        return AzureServiceFuture.fromPageResponse(\n            listMetricDefintionsSinglePageAsync(resourceGroupName, name),\n            new Func1<String, Observable<ServiceResponse<Page<ResourceMetricDefinitionInner>>>>() {\n                @Override\n                public Observable<ServiceResponse<Page<ResourceMetricDefinitionInner>>> call(String nextPageLink) {\n                    return listMetricDefintionsNextSinglePageAsync(nextPageLink);\n                }\n            },\n            serviceCallback);\n    }", "private static void updateMenus(Set<Report> toolResults,Set<String> catSet){\n  StringBuffer sb=new StringBuffer();\n  for (  Report toolReport : toolResults) {\n    if (!(showAveOnlyMode && toolReport.isCommercial())) {\n      sb.append(\"<li><a href=\\\"\");\n      sb.append(toolReport.getFilename());\n      sb.append(\".html\\\">\");\n      sb.append(toolReport.getToolNameAndVersion());\n      sb.append(\"</a></li>\");\n      sb.append(System.lineSeparator());\n    }\n  }\n  if (commercialAveScorecardFilename != null) {\n    sb.append(\"<li><a href=\\\"\");\n    sb.append(commercialAveScorecardFilename);\n    sb.append(\".html\\\">\");\n    sb.append(\"Commercial Average\");\n    sb.append(\"</a></li>\");\n    sb.append(System.lineSeparator());\n  }\n  String toolmenu=sb.toString();\n  sb=new StringBuffer();\n  for (  String cat : catSet) {\n    String filename=\"Benchmark_v\" + benchmarkVersion + \"_Scorecard_for_\"+ cat.replace(' ','_');\n    sb.append(\"            <li><a href=\\\"\");\n    sb.append(filename);\n    sb.append(\".html\\\">\");\n    sb.append(cat);\n    sb.append(\"</a></li>\");\n    sb.append(System.lineSeparator());\n  }\n  String vulnmenu=sb.toString();\n  updateMenuTemplates(toolmenu,vulnmenu);\n}\n", "protected void createLocals(GeneratorAdapter mv,List<Type> args){\n  mv.push(args.size());\n  mv.newArray(Type.getType(Object.class));\n}\n", "void readFromNbt ( NBTTagCompound compound ) ;", "\tpublic void readConfigFiles() {\n\t\tconfigFileReader.readFiles();\n\t}\n", "protected ClassMap createClassMap(Class c){\n  ClassMap classMap=new ClassMap(c);\n  classMethodMaps.put(c,classMap);\n  cachedClassNames.add(c.getName());\n  return classMap;\n}", "    public Range findRangeBounds(XYDataset dataset) {\n        if (dataset != null) {\n            if (this.renderAsPercentages) {\n                return new Range(0.0, 1.0);\n            }\n            else {\n                return DatasetUtilities.findStackedRangeBounds(\n                        (TableXYDataset) dataset);\n            }\n        }\n        else {\n            return null;\n        }\n    }\n", "public static nsrunningconfig get(nitro_service service) throws Exception{\n\t\tnsrunningconfig obj = new nsrunningconfig();\n\t\tnsrunningconfig[] response = (nsrunningconfig[])obj.get_resources(service);\n\t\treturn response[0];\n\t}", "public SplitStringValidator ( final String regexp , final Validator < String > other ) { this . regexp = regexp ; this . other = other ; }", "private int invokeUrl(TestContext context) {\n        URL contextUrl = getUrl(context);\n        if (log.isDebugEnabled()) {\n            log.debug(String.format(\"Probing Http request url '%s'\", contextUrl.toExternalForm()));\n        }\n\n        int responseCode = -1;\n\n        HttpURLConnection httpURLConnection = null;\n        try {\n            httpURLConnection = openConnection(contextUrl);\n            httpURLConnection.setConnectTimeout(getTimeout(context));\n            httpURLConnection.setRequestMethod(context.resolveDynamicValue(method));\n\n            responseCode = httpURLConnection.getResponseCode();\n        } catch (IOException e) {\n            log.warn(String.format(\"Could not access Http url '%s' - %s\", contextUrl.toExternalForm(), e.getMessage()));\n        } finally {\n            if (httpURLConnection != null) {\n                httpURLConnection.disconnect();\n            }\n        }\n\n        return responseCode;\n    }", "  protected void toXmlBody(PrintWriter result) {\n    if (isVisible != null) {\n      result.write(\"<isvisible visible-since=\\\"\" + visibleSince.getTimeInMillis() + \"\\\">\" + isVisible()\n          + \"</isvisible>\");\n    }\n    if (firstAccess != null) {\n      result.write(\"<first-access>\" + firstAccess.getTimeInMillis() + \"</first-access>\");\n    }\n\n    if (lastAccess != null) {\n      result.write(\"<last-access>\" + lastAccess.getTimeInMillis() + \"</last-access>\");\n    }\n    result.write(\"<access-count>\" + accessCount + \"</access-count>\");\n\n    // write the visibility of the items\n    Iterator iter = items.keySet().iterator();\n    while (iter.hasNext()) {\n      String itemId = (String) iter.next();\n      result.write(\"<item identifier=\\\"\" + itemId + \"\\\" isvisible=\\\"\" + (String) items.get(itemId) + \"\\\"/>\");\n    }\n  }\n", "    public XmlAxiomRegistryResponse getRegistryResponse(OMElement message) {\n    \tif(!message.getLocalName().equals(\"RegistryResponse\"))\n    \t\treturn null;\n    \telse\n    \t\treturn new XmlAxiomRegistryResponse(message);\n    \t\n    }\n", "public static HttpRequest options ( final URL url ) throws HttpRequestException { return new HttpRequest ( url , METHOD_OPTIONS ) ; }", "    public PNode removeChild(final int index) {\n        if (children == null) {\n            return null;\n        }\n        final PNode child = (PNode) children.remove(index);\n\n        if (children.size() == 0) {\n            children = null;\n        }\n\n        child.repaint();\n        child.setParent(null);\n        invalidateFullBounds();\n\n        firePropertyChange(PROPERTY_CODE_CHILDREN, PROPERTY_CHILDREN, null, children);\n\n        return child;\n    }\n", "  public void paintComponent(Graphics g1){\n\n    if ( currentPosition != null && currentPosition.x != 0 && currentPosition.y != 0){\n      Graphics2D g = (Graphics2D)g1;\n      g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n                         RenderingHints.VALUE_ANTIALIAS_ON);\n      g.setColor(Color.red);\n      //System.out.println(\"paint \"+ getX(lon) + \" \" + getY(lat) + \" \" + lowerRightLat);\n      g.fill(new Ellipse2D.Double(currentPosition.x,\n                                  currentPosition.y,\n                                  10, 10));\n    }\n  }\n", "    protected void exit() throws GOAExitException\n    {               \n        m_manager.exit();\n\t\tm_commlayer.exit();\n        m_manager=null;\n        m_commlayer=null;\n    }\n", "public void logout( String token ) {\n\t\tif( token != null ) {\n\t\t\tthis.tokenToLoginTime.remove( token );\n\t\t\tthis.tokenToUsername.remove( token );\n\t\t}\n\t}", "\tpublic void addInterface( Field f ) {\n\t    if ( protoInterface == null ) {\n\t        protoInterface = new Vector();\n\t    }\n\t    protoInterface.addElement( f );\n\t}\n", "int writeQueueSize(){\n  return queueSize.get();\n}\n", "public static byte[] getBytes(ByteBuffer bytes) {\r\n        byte[] result = new byte[bytes.remaining()];    // bytes between position and limit\r\n        bytes.get(result);\r\n        return result;\r\n    }", "public void testGetDataLength ( ) { char expectedReturn = ( char ) realmValue . length ( ) ; char actualReturn = realmAttribute . getDataLength ( ) ; assertEquals ( STR_ , expectedReturn , actualReturn ) ; }", "public XtnEntry attachToXtn ( ServerTransaction txn , boolean fromReplication ) throws TransactionException , RemoteException { return _transactionHandler . attachToXtnGranular ( txn , fromReplication ) ; }", "public static String getProperty(Object bean, String name)\n\t\t\tthrows NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n\n\t\tString value = null;\n\n\t\t// Retrieve the property getter method for the specified property\n\t\tPropertyDescriptor descriptor = getPropertyDescriptor(bean, name);\n\n\t\tif (descriptor == null) {\n\t\t\tthrow new NoSuchMethodException(\"Unknown property '\" + name + \"'\");\n\t\t}\n\n\t\tMethod readMethod = descriptor.getReadMethod();\n\t\tif (readMethod == null) {\n\t\t\tthrow new NoSuchMethodException(\"Property '\" + name + \"' has no getter method\");\n\t\t}\n\n\t\t// Call the property getter and return the value\n\t\tObject result = (Object) invokeMethod(readMethod, bean, new Object[0]);\n\t\tif (result != null) {\n\t\t\tvalue = result.toString();\n\t\t}\n\n\t\treturn value;\n\t}", "protected Workflow.Method createAddVolumesToCGMethod(URI vplexURI,URI cgURI,List<URI> vplexVolumeURIs){\n  return new Workflow.Method(ADD_VOLUMES_TO_CG_METHOD_NAME,vplexURI,cgURI,vplexVolumeURIs);\n}\n", "public ImageLoader ( RequestQueue queue , ImageCache imageCache ) { mRequestQueue = queue ; mCache = imageCache ; }", "    public void removeParameter(String parameterName) {\n        parameterMap.remove(parameterName);\n    }\n", "private PacScriptMethods buildParser(){\n  PacScriptMethods result=new PacScriptMethods();\n  Calendar cal=Calendar.getInstance();\n  cal.set(Calendar.YEAR,1994);\n  cal.set(Calendar.MONTH,Calendar.DECEMBER);\n  cal.set(Calendar.DAY_OF_MONTH,15);\n  cal.set(Calendar.HOUR_OF_DAY,12);\n  cal.set(Calendar.MINUTE,00);\n  cal.set(Calendar.SECOND,00);\n  cal.set(Calendar.MILLISECOND,00);\n  result.setCurrentTime(cal);\n  return result;\n}\n", "public VsanUpgradeSystemPreflightCheckResult performVsanUpgradePreflightCheck(ClusterComputeResource cluster, Boolean downgradeFormat) throws RuntimeFault, VsanFault, RemoteException {\n        return getVimService().performVsanUpgradePreflightCheck(getMOR(), cluster.getMOR(), downgradeFormat);\n    }", "private void handleDoubleClick ( final MouseEvent event ) { final IViewSelectionTreeNode selectedNode = ( IViewSelectionTreeNode ) TreeHelpers . getNodeAt ( this , event . getX ( ) , event . getY ( ) ) ; if ( selectedNode == null ) { return ; } selectedNo", "    public int hashCode() {\n        return getGuid().hashCode();\n    }\n", "public Object parse ( File file , String charset ) { return parseFile ( file , charset ) ; }", "public InputStream allocateStream ( String key ) { RawByteAllocator alloc = findRawByteAllocator ( key ) ; InputStream input = new RawByteInputStream ( alloc ) ; return input ; }", "public void hideNavigationPane ( ) { if ( contentBorderLayout . getChildren ( ) . contains ( navigationPaneVBox ) ) { contentBorderLayout . getChildren ( ) . remove ( navigationPaneVBox ) ; showingNavigationPaneProperty . set ( BOOL_ ) ; LOG . debug ( STR", "public CommandLineProgramGroup getCommandLineProgramGroup() {\n        if (commandLineProperties != null) {\n            try {\n                return commandLineProperties.programGroup().newInstance();\n            } catch (IllegalAccessException | InstantiationException e) {\n                logger.warn(\n                        String.format(\"Can't instantiate program group class to retrieve summary for group %s for class %s\",\n                                commandLineProperties.programGroup().getName(),\n                                clazz.getName()));\n            }\n        }\n        return null;\n    }", "public Info createInfo(String value){\n  InformationField infoImpl=new InformationField();\n  try {\n    infoImpl.setValue(value);\n  }\n catch (  SdpException s) {\n    s.printStackTrace();\n  }\n  return infoImpl;\n}\n", "public static String alphaStrToHexStr(String msgStr){\n  StringBuffer result=new StringBuffer();\n  for (int ofs=0; ofs < msgStr.length(); ofs++) {\n    result.append(String.format(\"%02x\",msgStr.charAt(ofs)));\n  }\n  return (result.toString());\n}\n", "    protected Object searchFormatObject(char c) {\n        int i = m_searchString.indexOf(c);\n\n        // did we found something ?\n        if (i >= 0) {\n            return ((Format) m_formatObjects.get(i)).getActiveFormat();\n        }\n\n        // if not\n        return null;\n    }\n", "public Iterator < VertexType > predecessorIterator ( VertexType target ) ;", "public void removeSuggested(String parameter){\n  parameters.remove(parameter);\n}\n", "\tpublic IOpenLayersMap removeControl(Control control) {\n\t\tcontrols.remove(control);\n\t\tif (AjaxRequestTarget.get() != null) {\n\t\t\tAjaxRequestTarget.get().appendJavascript(control.getJSremove(this));\n\t\t}\n\t\treturn this;\n\t}\n", "public Response onCommand(SMTPSession session,Request request){\n  if (session.isStartTLSSupported()) {\n    if (session.isTLSStarted()) {\n      return TLS_ALREADY_ACTIVE;\n    }\n else {\n      String parameters=request.getArgument();\n      if ((parameters == null) || (parameters.length() == 0)) {\n        return READY_FOR_STARTTLS;\n      }\n else {\n        return SYNTAX_ERROR;\n      }\n    }\n  }\n else {\n    return NOT_SUPPORTED;\n  }\n}\n", "public final Iterator<AuthorityEntry> authoritiesIterator(){\n  return mDataAuthorities != null ? mDataAuthorities.iterator() : null;\n}\n", "\tpublic boolean resourceExists(final String resource) {\n\t\tfinal ZipEntry zipEntry = zipFile.getEntry(resource);\n\t\t\n\t\tif (zipEntry == null || zipEntry.isDirectory()) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n", "  public boolean hasHTranslationMapper() {\n    return hTranslationMapper!=null;\n  }\n", "public MutableString(final char[] a,final int offset,final int len){\n  makeCompactMutableString(len);\n  System.arraycopy(a,offset,array,0,len);\n}\n", "private int parentHeight(){\n  Container parent=getParent();\n  if (parent != null) {\n    return parent.getHeight();\n  }\n  return getHeight();\n}\n", "private CGlobalSettings ( ) { }", "public void waitForCompletion() throws Exception {\n    LOG.info(\"Waiting for the Job Driver to complete.\");\n    try {\n      synchronized (this) {\n        this.wait();\n      }\n    } catch (final InterruptedException ex) {\n      LOG.log(Level.WARNING, \"Waiting for result interrupted.\", ex);\n    }\n    this.reef.close();\n    this.controlListener.close();\n  }", "public void delete(String name) throws IOException {\n  if (name.equalsIgnoreCase(SKIP_CERTS))   throw new IOException(\"Attribute \" + SKIP_CERTS + \" may not be deleted.\");\n else   throw new IOException(\"Attribute name not recognized by \" + \"CertAttrSet:InhibitAnyPolicy.\");\n}\n", "private static synchronized void initLogDirLocation(){\n  if (null == logDirLocation) {\n    File agentJar=SpringAgent.getInspectitJarFile();\n    logDirLocation=agentJar.getParent() + File.separator + \"logs\"+ File.separator+ \"startup\";\n  }\n}\n", "final public List < V > valuesInSelection ( RTEditText editor ) { List < V > result = new ArrayList < V > ( ) ; Selection selection = getSelection ( editor ) ; List < RTSpan < V > > spans = getSpans ( editor . getText ( ) , selection , SpanCollectMode . SPAN_FLAGS ) ; for ( RTSpan < V > span : spans ) { result . add ( span . getValue ( ) ) ; } return result ; }", "public static ComponentUI createUI ( JComponent c ) { return new SeaGlassTabbedPaneUI ( ) ; }", "public static Condition XOR(Condition first, Condition second) {\n        return new BooleanCondition(Type.XOR, first, second);\n    }", "private String replaceVariablesWithPatterns(String pattern) {\n        int group = 0;\n        Matcher findVariablesMatcher = variablePattern.matcher(pattern);\n        while(findVariablesMatcher.find()) {\n            String variable = findVariablesMatcher.group(0);\n            pattern = pattern.replaceFirst(variable, \"(.+)\");\n            variableToGroupNumber.put(variable, ++group);\n        }\n        return pattern;\n    }", "public void clear(){\n  changeReports.clear();\n}\n", "    public boolean requiresDirectPublishPermission() {\n\n        return 0 < (m_allowed & CmsPermissionSet.PERMISSION_DIRECT_PUBLISH);\n    }\n", "public void cancelSelectAllDevice ( ) { mEditCheckedDevices . clear ( ) ; notifyDataSetChanged ( ) ; }", "    public void addGene(Gene gene) {\n        this.genome.add(gene);\n    }\n", "public static Process runCommand(String command,Consumer<String> stdoutConsumer,Runnable errorHandler,String... args){\n  return runCommand(command,null,false,stdoutConsumer,null,errorHandler,args);\n}\n", "\tpublic List commands() {\n\t\treturn fCommands;\n\t}\n", "static int applyMaskPenaltyRule1 ( ByteMatrix matrix ) { return applyMaskPenaltyRule1Internal ( matrix , BOOL_ ) + applyMaskPenaltyRule1Internal ( matrix , BOOL_ ) ; }", "public CreateWindowClause addView(String namespace,String name,Expression... parameters){\n  views.add(View.create(namespace,name,parameters));\n  return this;\n}\n", "    public void linkAfter(L2ListElem elem) { \n        modify();\n        next.modify();\n        elem.modify();\n        elem.next = next;\n        elem.prev = this;\n        next.prev = elem;\n        next = elem;\n    }\n", "public int compare(Object o1,Object o2){\n  String s1=o1.toString();\n  if (s1 == null)   s1=\"\";\n  String s2=o2.toString();\n  if (s2 == null)   s2=\"\";\n  return s1.compareTo(s2);\n}\n", "    public void displayHeaders(String [] fields,PrintWriter out){\n      out.println(\"<headers>\");\n      for (int i=0; i < fields.length; i++) {\n\tString hidden=dataProps.getField(fields[i]+\".hidden\",\"N\");\n\tString readonly=dataProps.getField(fields[i]+\".readonly\",\"N\");\n\tString label=dataProps.getField(fields[i]+\".label\",\"\");\n\tout.println(\"<header hidden=\\\"\"+hidden+\"\\\" readonly=\\\"\"\n\t  + readonly+\"\\\" label=\\\"\"+label+\"\\\" name=\\\"\" +fields[i]+\"\\\"/>\");\n      }\n      out.println(\"</headers>\");\n    }\n", "private void connect(final String databaseUrl,final Properties properties) throws SQLException {\n  if (m_connection != null) {\n    closeConnection();\n  }\n  try {\n    m_connection=DriverManager.getConnection(databaseUrl,properties);\n  }\n catch (  final SQLException exception) {\n    NaviLogger.severe(\"Error: Connection to the database server could not be established: %s\",exception);\n    throw exception;\n  }\n}\n", "protected String urlDecode(String token) {\n    try {\n      return URLDecoder.decode(token, \"utf-8\");\n    }\n    catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    }\n  }", "public BroadcastTriggerListener ( String name , List < TriggerListener > listeners ) { this ( name ) ; this . listeners . addAll ( listeners ) ; }", "public static void putHeaders(MimeHeaders headers,HttpServletResponse response){\n  if (debug.messageEnabled()) {\n    debug.message(\"SAML2Util.putHeaders: Header=\" + headers.toString());\n  }\n  Iterator it=headers.getAllHeaders();\n  while (it.hasNext()) {\n    MimeHeader header=(MimeHeader)it.next();\n    String[] values=headers.getHeader(header.getName());\n    if (debug.messageEnabled()) {\n      debug.message(\"SAML2Util.putHeaders: Header name=\" + header.getName() + \", value=\"+ Arrays.toString(values));\n    }\n    if (values.length == 1) {\n      response.setHeader(header.getName(),header.getValue());\n    }\n else {\n      StringBuilder concatenatedHeaderValues=new StringBuilder();\n      for (int i=0; i < values.length; i++) {\n        if (i != 0) {\n          concatenatedHeaderValues.append(',');\n        }\n        concatenatedHeaderValues.append(values[i]);\n      }\n      response.setHeader(header.getName(),concatenatedHeaderValues.toString());\n    }\n  }\n}\n", "    public void setDisplayText(String menuDisplayText) {\n        this.displayText = menuDisplayText;\n        setText(getDisplayText());\n    }\n", "    public boolean add(Type o) {\n        if (o == null) {\n\t    return false;\n\t}\n\n        Type type = o;\n\n        Context context = ts.emptyContext();\n        \n        if (ts.isSubtype(type, topType, context)) {\n            boolean haveToAdd = true;\n\n            for (Iterator<Type> i = v.iterator(); i.hasNext(); ) {\n                Type t = i.next();\n\n                if (! ts.typeEquals(t, type, context) && ts.isSubtype(t, type, context)) {\n                    i.remove();\n                }\n\n                if (ts.isSubtype(type, t, context)) {\n                    haveToAdd = false;\n                    break;\n                }\n            }\n\n            if (haveToAdd) {\n                v.add(type);\n            }\n\n            return haveToAdd;\n        }\n        \n        return false;\n    }\n", "public static boolean intersectSphereSphere(\n            float aX, float aY, float aZ, float radiusSquaredA,\n            float bX, float bY, float bZ, float radiusSquaredB,\n            Vector4f centerAndRadiusOfIntersectionCircle) {\n        float dX = bX - aX, dY = bY - aY, dZ = bZ - aZ;\n        float distSquared = dX * dX + dY * dY + dZ * dZ;\n        float h = 0.5f + (radiusSquaredA - radiusSquaredB) / distSquared;\n        float r_i = radiusSquaredA - h * h * distSquared;\n        if (r_i >= 0.0f) {\n            centerAndRadiusOfIntersectionCircle.x = aX + h * dX;\n            centerAndRadiusOfIntersectionCircle.y = aY + h * dY;\n            centerAndRadiusOfIntersectionCircle.z = aZ + h * dZ;\n            centerAndRadiusOfIntersectionCircle.w = (float) Math.sqrt(r_i);\n            return true;\n        }\n        return false;\n    }", "    public void modifyIncomeBeforeTaxes(GoodsType goodsType, int amount) {\n        MarketData data = getMarket().getMarketData(goodsType);\n        if (data == null) {\n            data = new MarketData(goodsType);\n            getMarket().putMarketData(goodsType, data);\n        }\n        int oldAmount = data.getIncomeBeforeTaxes();\n        data.setIncomeBeforeTaxes(oldAmount += amount);\n    }\n", "public X509Name(Vector oids,Vector values){\n  this(oids,values,new X509DefaultEntryConverter());\n}\n", "\tpublic void clearPath(){\n\t\tpath_branchgroup.removeAllChildren();\n\t\tif(path != null && path.getOnScreenObjects() != null){\n\t\t\tviewer.getCanvas().removeOnScreenObjectGroup(path.getOnScreenObjects());\n\t\t}\n\n\t\texitPathAnimation();\n\t\t//viewer.removeBranchGroup(route_branchgroup);\n\t\tviewer.removeUserObject(path_branchgroup);\n\t}\n", "public void putComponent(String serviceClass,\n      String serviceName,\n      String componentName,\n      ServiceRecord record) throws IOException {\n    String path = RegistryUtils.componentPath(\n        user, serviceClass, serviceName, componentName);\n    registryOperations.mknode(RegistryPathUtils.parentOf(path), true);\n    registryOperations.bind(path, record, BindFlags.OVERWRITE);\n  }", "private ContentElement parseContentElement(SpanManager sm,ContentElementParsingParameters cepp,Span lineSpan,ContentElement result){\n  LinkedList<Span> lineSpans=new LinkedList<Span>();\n  lineSpans.add(lineSpan);\n  return parseContentElement(sm,cepp,lineSpans,result);\n}\n", "public static void assertArrayEqual(byte[] expected,byte[] actual){\n  if (verbose) {\n    log(\"assertArrayEqual(\" + arrayToString(expected) + \", \"+ arrayToString(actual)+ \")\");\n  }\n  if (expected.length != actual.length) {\n    TestUtils.assertBool(false);\n  }\n  for (int index=0; index < expected.length; ++index) {\n    assertEqual(expected[index],actual[index]);\n  }\n}\n", "private void removeFromWebContainer() {\n        if (!Thread.holdsLock(terminated)) {\n            throw new IllegalStateException();\n        }\n        synchronized (addRemoveLock) {\n            //we'll either succeed or fail at the removal, but either\n            //way we want to guarantee the tracker is closed.\n            closeTracker();\n            if (getDeployedModuleInfo() != null) {\n                //uninstall can only fail if the webcontainer has gone away..\n                //so we do not need to check if it returns true/false\n                //as in both cases, we wish to unregister, and declare we are\n                //undeployed.\n                installer.uninstallFromWebContainer(this);\n                unregister();\n                setState(State.UNDEPLOYED);\n            }\n        }\n    }", "    public void ejbCreate() {\n        accessManager = new AccessManager();\n    }\n", "public void insert(E obj){\n  int i;\n  i=++_n;\n  E p;\n  while (i > 1) {\n    int pIdx=i / 2;\n    p=_elements[pIdx];\n    if (comparator.compare(obj,p) > 0) {\n      break;\n    }\n    _elements[i]=p;\n    i=pIdx;\n  }\n  _elements[i]=obj;\n}\n", "void detachAllChildren ( ) ;", "private void process(String tebase) {\n\t\tdeleteConfigFile(tebase);\n\t\tdocMain = builder.newDocument();\n\t\tconfig = docMain.createElement(\"config\");\n\t\tdocMain.appendChild(config);\n\t\tscripts = docMain.createElement(\"scripts\");\n\t\tconfig.appendChild(scripts);\n\t\tString scriptsDir = tebase + \"scripts\";\n\t\tLOGR.info(\"Scripts directory found at \" + scriptsDir);\n\n\t\tFile[] testScriptsDir = new File(scriptsDir).listFiles();\n\t\tif (testScriptsDir != null) {\n\t\t\t// if no tests are found under scripts, listFiles will return null,\n\t\t\t// if not iterated over the scripts directories\n\t\t\tfor (File dir : testScriptsDir) {\n\t\t\t\tprocessDir(dir);\n\t\t\t}\n\t\t}\n\t\tString mainconfig = tebase + \"config.xml\";\n\t\tsaveConfigFile(docMain, mainconfig);\n\t}", "  private void zoomIn(Point zoomCenter) {\n    if (zoomCenter == null) {\n      zoomCenter = getPanelCenter();\n    }\n    \n    int power = floorlog2(scale);\n    double newScale = Math.pow(2, power+1);\n    \n    smoothScale(newScale, zoomCenter);\n  }\n", "public HttpClient delete(String url) throws HelloSignException {\n        request = new HttpDeleteRequest(url, auth);\n        request.execute();\n        return this;\n    }", "public void addClassesToCheck(File... files) throws IOException {\n  addClassesToCheck(Arrays.asList(files));\n}\n", "  public void train() {\n    if (flags.trainFiles != null) {\n      train(flags.baseTrainDir, flags.trainFiles);\n    } else if (flags.trainFileList != null) {\n      String[] files = flags.trainFileList.split(\",\");\n      train(files);\n    } else {\n      train(flags.trainFile);\n    }\n  }\n", "public ScriptListTable scriptList(){\n  if (scriptListTable.get() == null) {\n    scriptListTable.compareAndSet(null,gsub.createScriptList());\n  }\n  return scriptListTable.get();\n}\n", "private void checkConstantTag ( Constant constant , int expectedTag ) throws InvalidClassFileFormatException { if ( constant . tag != expectedTag ) { throw new InvalidClassFileFormatException ( expectedClassDescriptor , codeBaseEntry ) ; } }", "    protected Object clone() {\n        GenericURI clone = new GenericURI();\n\n        clone.setScheme(getScheme()); // immutable singleton\n        clone.setPort(getPort());\n        clone.setAddressPart(new String(getAddressPart()));\n        clone.setUriParams(getUriParams() == null ? null : new String(\n                getUriParams()));\n\n        return clone;\n    }\n", "public static base_responses update(nitro_service client, appfwlearningsettings resources[]) throws Exception {\n\t\tbase_responses result = null;\n\t\tif (resources != null && resources.length > 0) {\n\t\t\tappfwlearningsettings updateresources[] = new appfwlearni", "public static short[] ensureCapacity(short[] elements, int size) {\n        if (size > elements.length) {\n            short[] tmp = new short[size*2];\n            System.arraycopy(elements, 0, tmp, 0, elements.length);\n            elements = tmp;\n        }\n        return elements;\n    }", "\tpublic int nextInt(int begin, int end) {\n\t\tif (begin > end) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Begin must be equal or greater than end. Begin: \" + begin\n\t\t\t\t\t\t\t+ \" End: \" + end + \".\");\n\t\t}\n\t\t\n\t\tint difference = end - begin; // difference between begin and end\n\t\tint ret = super.nextInt(difference); // returned value\t\t\n\t\tret += begin;\n\t\treturn (ret);\n\t}\n", "public static boolean loadTexture(int glId,int file){\n  InputStream is=Resource.getResInputStream(file);\n  BufferedImage bitmap=loadARGBImage(is);\n  return loadTexture(glId,bitmap);\n}", "  private void computeFrameBounds(JFrame frame) {\n    frame.setLocationByPlatform(true);\n    Dimension screenSize = getToolkit().getScreenSize();\n    Insets screenInsets = getToolkit().getScreenInsets(getGraphicsConfiguration());\n    screenSize.width -= screenInsets.left + screenInsets.right;\n    screenSize.height -= screenInsets.top + screenInsets.bottom;\n    frame.setSize(Math.min(2 * screenSize.width / 3, 800), screenSize.height * 4 / 5);\n  }\n", "private String cleanup(String col){\n  int idx=col.indexOf(\" \");\n  if (idx > 0)   return col.substring(0,idx);\n else   return col;\n}\n", "private Set<URI> listEntitesWithModelReference(URI entityType, URI modelReference) {\n        Set<URI> entities = ImmutableSet.of();\n        // Deal with services\n        if (entityType.toASCIIString().equals(MSM.Service.getURI())) {\n            entities = this.serviceManager.listServicesWithModelReference(modelReference);\n        } else if (entityType.toASCIIString().equals(MSM.Operation.getURI())) {\n            entities = this.serviceManager.listOperationsWithModelReference(modelReference);\n        }\n        return entities;\n    }", "public int parseOffsetLocalizedGMT(String text, ParsePosition pos) {\n        return parseOffsetLocalizedGMT(text, pos, false, null);\n    }", "private void compute(final List<Integer> variables) {\n        final Stack<Integer> candidates = createInitialCandidates(variables);\n        while (candidates.size() > 0) {\n            final int lit = candidates.pop();\n            if (solve(lit)) {\n                refineUpperBound();\n            } else {\n                addBackboneLiteral(lit);\n            }\n        }\n    }", "@Pure\n\tpublic static Point2d L3_L93(double x, double y) {\n\t\tfinal Point2d ntfLambdaPhi = NTFLambert_NTFLambdaPhi(x, y,\n\t\t\t\tLAMBERT_3_N,\n\t\t\t\tLAMBERT_3_C,\n\t\t\t\tLAMBERT_3_XS,\n\t\t\t\tLAMBERT_3_YS);\n\t\treturn NTFLambdaPhi_NTFLambert(\n\t\t\t\tntfLambdaPhi.getX(), ntfLam", "private List<String> resolveAttributes(MBeanServerExecutor pServers, ObjectName pMBeanName, List<String> pAttributeNames)\n            throws IOException, ReflectionException, MBeanException, AttributeNotFoundException, InstanceNotFoundException {\n        List<String> attributes = pAttributeNames;\n        if (shouldAllAttributesBeFetched(pAttributeNames)) {\n            // All attributes are requested, we look them up now\n            attributes = getAllAttributesNames(pServers,pMBeanName);\n        }\n        return attributes;\n    }", "\tpublic void writeDocument (T document) {\n\t\ttry {\n\t\t\tnew XMLDocumentSerializer().serialize(XMLDocument.getInstance(document), this.getOutputStream());\n\t\t} catch (IOException e) {\n\t\t\tthrow ThrowableManagerRegistry.caught(e);\n\t\t}\n\t}\n", "public float convert(){\n  return Float.intBitsToFloat((int)bytes);\n}\n", "public void marshall(FunctionCodeLocation functionCodeLocation, ProtocolMarshaller protocolMarshaller) {\n\n        if (functionCodeLocation == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        ", "public static int indexOfIgnoreCase(String src,String subS,int startIndex){\n  return indexOfIgnoreCase(src,subS,startIndex,src.length());\n}\n", "public GoToPopup(String caption,List<GoToItem> items){\n  this.caption=caption;\n  this.items=items;\n  initComponents();\n  jList1.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n  addFocusListener(this);\n  init();\n}\n", "public SegmentedButtonPainter ( Which state , PaintContext ctx ) { super ( state , ctx ) ; type = getButtonType ( state ) ; }", "\tpublic void fill(int col, int faces){\n\t\tint fn = 0;\n\t\tif(faces > 0){\n\t\t\twhile(faces > 0){\n\t\t\t\tif(faces % 2 == 1)\n\t\t\t\t\tfColor[fn] = col;\n\t\t\t\tfaces /= 2;\n\t\t\t\tfn++;\n\t\t\t}\n\t\t}\n\t}\n", "    protected void runStep(StepRunner runner) throws Throwable {\n        Iterator iter;\n        synchronized(sequence) {\n            iter = ((ArrayList)sequence.clone()).iterator();\n        }\n        if (runner != null) {\n            while (iter.hasNext() && !runner.stopped()) {\n                runner.runStep((Step)iter.next());\n            }\n        }\n        else {\n            while (iter.hasNext()) {\n                ((Step)iter.next()).run();\n            }\n        }\n    }\n", "public boolean isSuperUser(String uuid){\n  boolean isSuperUser=false;\n  try {\n    AMIdentity adminUserId=null;\n    String adminUser=SystemProperties.get(Constants.AUTHENTICATION_SUPER_USER);\n    if (adminUser != null) {\n      adminUserId=new AMIdentity(dsameAdminTokenProvider.getAdminToken(),adminUser,IdType.USER,\"/\",null);\n    }\n    AMIdentity user=IdUtils.getIdentity(dsameAdminTokenProvider.getAdminToken(),uuid);\n    isSuperUser=adminUserId.equals(user);\n  }\n catch (  SSOException ssoe) {\n    sessionDebug.error(\"SessionService.isSuperUser: Cannot get the admin token for this operation.\");\n  }\ncatch (  IdRepoException idme) {\n    sessionDebug.error(\"SessionService.isSuperUser: Cannot get the user identity.\");\n  }\n  if (sessionDebug.messageEnabled()) {\n    sessionDebug.message(\"SessionService.isSuperUser: \" + isSuperUser);\n  }\n  return isSuperUser;\n}\n", "List<Integer> glyphMappingTable(){\n  return this.newToOldGlyphs;\n}\n", "public static DirectedGraph < Integer , DefaultEdge > loadGraph ( File file ) throws IOException , ClassNotFoundException { SerializableDirectedGraph serialGraph = null ; FileInputStream fin = null ; ObjectInputStream in = null ; fin = new FileInputStream", "public void updateScrollbars(){\n  Point preferredSize=getTableSize();\n  Rectangle clientArea=getClientArea();\n  for (int doublePass=1; doublePass <= 2; doublePass++) {\n    if (preferredSize.y > clientArea.height) {\n      vScroll.setVisible(true);\n    }\n else {\n      vScroll.setVisible(false);\n      vScroll.setValues(0,0,1,1,1,1);\n    }\n    if (preferredSize.x > clientArea.width) {\n      hScroll.setVisible(true);\n    }\n else {\n      hScroll.setVisible(false);\n      hScroll.setValues(0,0,1,1,1,1);\n    }\n    clientArea=getClientArea();\n  }\n  if (vScroll.getVisible()) {\n    int max=getItemCount();\n    int thumb=(getVisibleGridHeight() + 1) / (getItemHeight() + 1);\n    int selection=Math.min(vScroll.getSelection(),max);\n    vScroll.setValues(selection,0,max,thumb,1,thumb);\n  }\n  if (hScroll.getVisible()) {\n    if (!columnScrolling) {\n      int hiddenArea=preferredSize.x - clientArea.width + 1;\n      int selection=Math.min(hScroll.getSelection(),hiddenArea - 1);\n      hScroll.setValues(selection,0,hiddenArea + clientArea.width - 1,clientArea.width,HORZ_SCROLL_INCREMENT,clientArea.width);\n    }\n else {\n      int hiddenArea=preferredSize.x - clientArea.width + 1;\n      int max=0;\n      int i=0;\n      while (hiddenArea > 0 && i < getColumnCount()) {\n        GridColumn col=columns.get(i);\n        i++;\n        hiddenArea-=col.getWidth();\n        max++;\n      }\n      max++;\n      int visCols=columns.size();\n      max=Math.min(visCols,max);\n      int selection=Math.min(hScroll.getSelection(),max);\n      hScroll.setValues(selection,0,max,1,1,1);\n    }\n  }\n}\n", "public static void removeAll ( final CCriteriumTree tree ) { disposeTree ( tree . getRoot ( ) ) ; tree . clear ( ) ; }", "default Optional<DocumentEntity> singleResult(DocumentQuery query) throws NonUniqueResultException {\n  List<DocumentEntity> entities=find(query);\n  if (entities.isEmpty()) {\n    return Optional.empty();\n  }\n  if (entities.size() == 1) {\n    return Optional.of(entities.get(0));\n  }\n  throw new NonUniqueResultException(\"The query returns more than one entity, query: \" + query);\n}\n", "static void processDoubleQuotedString(StringBuilder sb,\n            SourceRange sourceRange) throws ParseException {\n\n        // Sanity checking. Make sure input string has at least two characters\n        // and that the first and last are double quotes.\n        assert (sb.length() >= 2);\n        assert (sb.charAt(0) == '\"' && sb.charAt(sb.length() - 1) == '\"');\n\n        // Remove the starting and ending quotes.\n        sb.deleteCharAt(sb.length() - 1);\n        sb.deleteCharAt(0);\n\n        // Scan through the string looking for backslashes.\n        int i = sb.indexOf(\"\\\\\", 0);\n        while (i >= 0) {\n\n            if (i + 1 >= sb.length()) {\n                ParseException pe = new ParseException(\n                        \"double-quoted string contains incomplete escape sequence\");\n                pe.sourceRange = sourceRange;\n                throw pe;\n            }\n\n            switch (sb.charAt(i + 1)) {\n            case 'n':\n                sb.replace(i, i + 2, \"\\n\");\n                break;\n            case 't':\n                sb.replace(i, i + 2, \"\\t\");\n                break;\n            case 'r':\n                sb.replace(i, i + 2, \"\\r\");\n                break;\n            case '\\\\':\n                sb.replace(i, i + 2, \"\\\\\");\n                break;\n            case '\"':\n                sb.replace(i, i + 2, \"\\\"\");\n                break;\n            case 'b':\n                sb.replace(i, i + 2, \"\\b\");\n                break;\n            case 'f':\n                sb.replace(i, i + 2, \"\\f\");\n                break;\n            case 'x':\n                try {\n                    int codepoint = Integer.parseInt(\n                            sb.substring(i + 2, i + 4), 16);\n                    char[] chars = Character.toChars(codepoint);\n                    sb.replace(i, i + 4, Character.toString(chars[0]));\n                } catch (StringIndexOutOfBoundsException se) {\n                    ParseException pe = new ParseException(\n                            \"double-quoted string contains incomplete hex escape sequence\");\n                    pe.sourceRange = sourceRange;\n                    throw pe;\n                } catch (NumberFormatException e) {\n                    ParseException pe = new ParseException(\n                            \"double-quoted string contains illegal hex replacement (\"\n                                    + sb.substring(i + 2, i + 4) + \")\");\n                    pe.sourceRange = sourceRange;\n                    throw pe;\n                }\n                break;\n            case '\\r':\n                // Fall through.\n            case '\\n':\n                int count = ((i + 2 < sb.length()) && \"\\r\\n\".equals(sb\n                        .substring(i + 1, i + 3))) ? 3 : 2;\n                sb.delete(i, i + count);\n\n                // Because this replaces the entire sequence with nothing, the\n                // counter must decremented. If it isn't, then the first\n                // character after the replacement will never be checked for a\n                // escape sequence. (See SF bug #2533401.)\n                i--;\n\n                break;\n            default:\n                ParseException pe = new ParseException(\n                        \"double-quoted string contains an illegal escape sequence (\\\\\"\n                                + sb.charAt(i + 1) + \")\");\n                pe.sourceRange = sourceRange;\n                throw pe;\n            }\n\n            i++;\n            i = sb.indexOf(\"\\\\\", i);\n        }\n    }", "  public int getMaximumHealth () {\n    return (maximumHealth);\n  }\n", "private int decodeSpectrum(float[] output){\n  int subbandVlcIndex[]=new int[32];\n  int sfIndex[]=new int[32];\n  int mantissas[]=new int[128];\n  int numSubbands=br.read(5);\n  int codingMode=br.read(1);\n  for (int i=0; i <= numSubbands; i++) {\n    subbandVl", "public static Object convertNumberToWrapper(Number num, Class<?> wrapper) {\r\n        //XXX Paul: Using valueOf will reduce object creation\r\n        if (wrapper.equals(String.class)) {\r\n            return num.toString();\r\n        } else if (wrapper.equals(Boolean.class)) {\r\n            return Boolean.valueOf(num.intValue() == 1);\r\n        } else if (wrapper.equals(Double.class)) {\r\n            return Double.valueOf(num.doubleValue());\r\n        } else if (wrapper.equals(Long.class)) {\r\n            return Long.valueOf(num.longValue());\r\n        } else if (wrapper.equals(Float.class)) {\r\n            return Float.valueOf(num.floatValue());\r\n        } else if (wrapper.equals(Integer.class)) {\r\n            return Integer.valueOf(num.intValue());\r\n        } else if (wrapper.equals(Short.class)) {\r\n            return Short.valueOf(num.shortValue());\r\n        } else if (wrapper.equals(Byte.class)) {\r\n            return Byte.valueOf(num.byteValue());\r\n        }\r\n        throw new ConversionException(String.format(\"Unable to convert number to: %s\", wrapper));\r\n    }", "void handleSelection(String file){\n  int index=file.lastIndexOf(java.io.File.separatorChar);\n  if (index == -1) {\n    savedDir=this.dir;\n    savedFile=file;\n  }\n else {\n    savedDir=file.substring(0,index + 1);\n    savedFile=file.substring(index + 1);\n  }\n  String[] fileNames=fileList.getSelectedItems();\n  int filesNumber=(fileNames != null) ? fileNames.length : 0;\n  File[] files=new File[filesNumber];\n  for (int i=0; i < filesNumber; i++) {\n    files[i]=new File(savedDir,fileNames[i]);\n  }\n  AWTAccessor.FileDialogAccessor fileDialogAccessor=AWTAccessor.getFileDialogAccessor();\n  fileDialogAccessor.setDirectory(target,savedDir);\n  fileDialogAccessor.setFile(target,savedFile);\n  fileDialogAccessor.setFiles(target,files);\n}\n", "protected void reset(){\n  eventClasses=new HashMap<String,String>();\n  mapNames=new HashMap<String,Properties>();\n  nestableMapNames=new HashMap<String,Map<String,Object>>();\n  nestableObjectArrayNames=new HashMap<String,Map<String,Object>>();\n  eventTypesXMLDOM=new HashMap<String,ConfigurationEventTypeXMLDOM>();\n  eventTypesLegacy=new HashMap<String,ConfigurationEventTypeLegacy>();\n  databaseReferences=new HashMap<String,ConfigurationDBRef>();\n  imports=new ArrayList<String>();\n  annotationImports=new ArrayList<String>(2);\n  addDefaultImports();\n  plugInViews=new ArrayList<ConfigurationPlugInView>();\n  plugInVirtualDataWindows=new ArrayList<ConfigurationPlugInVirtualDataWindow>();\n  pluginLoaders=new ArrayList<ConfigurationPluginLoader>();\n  plugInAggregationFunctions=new ArrayList<ConfigurationPlugInAggregationFunction>();\n  plugInAggregationMultiFunctions=new ArrayList<ConfigurationPlugInAggregationMultiFunction>();\n  plugInSingleRowFunctions=new ArrayList<ConfigurationPlugInSingleRowFunction>();\n  plugInPatternObjects=new ArrayList<ConfigurationPlugInPatternObject>();\n  engineDefaults=new ConfigurationEngineDefaults();\n  eventTypeAutoNamePackages=new LinkedHashSet<String>();\n  variables=new HashMap<String,ConfigurationVariable>();\n  methodInvocationReferences=new HashMap<String,ConfigurationMethodRef>();\n  plugInEventRepresentation=new HashMap<URI,ConfigurationPlugInEventRepresentation>();\n  plugInEventTypes=new HashMap<String,ConfigurationPlugInEventType>();\n  revisionEventTypes=new HashMap<String,ConfigurationRevisionEventType>();\n  variantStreams=new HashMap<String,ConfigurationVariantStream>();\n  mapTypeConfigurations=new HashMap<String,ConfigurationEventTypeMap>();\n  objectArrayTypeConfigurations=new HashMap<String,ConfigurationEventTypeObjectArray>();\n}\n", "  protected void renderChart(boolean asynchronously_p, final boolean updateData_p) {\n    if (null != _canvas && !_canvas.isDisposed()) {\n      Runnable runnable = new Runnable() {\n        @Override\n        public void run() {\n          if (updateData_p) {\n            updateChartData();\n          }\n          doRenderChart();\n        }\n      };\n      if (asynchronously_p) {\n        // Force rendering the chart in another UI thread switch, to let a chance to pile up multiple rendering requests due to multiple\n        // data changes.\n        _canvas.getDisplay().asyncExec(runnable);\n      } else {\n        runnable.run();\n      }\n    }\n  }\n", "public static < K , V > Map < K , V > asSynchronized ( Map < K , V > self ) { return Collections . synchronizedMap ( self ) ; }", "public static String[] lsFiles(String directory,FilenameFilter filter) throws IOException {\n  File dir=new File(directory);\n  ArrayList<String> files=new ArrayList<>();\n  for (  File filepath : dir.listFiles(filter)) {\n    if (isFile(filepath.getAbsolutePath()))     files.add(filepath.getAbsolutePath());\n  }\n  return files.toArray(new String[files.size()]);\n}\n", "\tprivate int calculateNumberOfMoves(IBoardState boardState, Player player) {\n\t\treturn calculateNumberOfMovesOwned(boardState, player) - \n\t\t\tcalculateNumberOfMovesOwned(boardState, opposingPlayer(player));\n\t}\n", "public ResponseOnSingeRequest executeAndGenResponse(ChannelExec channel){\n  ResponseOnSingeRequest sshResponse=new ResponseOnSingeRequest();\n  InputStream in=null;\n  OutputStream outputStreamStdErr=new ByteArrayOutputStream();\n  StringBuilder sbStdOut=new StringBuilder();\n  try {\n    in=channel.getInputStream();\n    channel.setErrStream(outputStreamStdErr);\n    byte[] tmp=new byte[ParallecGlobalConfig.sshBufferSize];\n    while (true) {\n      while (in.available() > 0) {\n        int i=in.read(tmp,0,ParallecGlobalConfig.sshBufferSize);\n        if (i < 0)         break;\n        sbStdOut.append(new String(tmp,0,i));\n      }\n      if (channel.isClosed()) {\n        if (in.available() > 0)         continue;\n        sshResponse.setFailObtainResponse(false);\n        int exitStatus=channel.getExitStatus();\n        sshResponse.setStatusCodeInt(exitStatus);\n        sshResponse.setStatusCode(Integer.toString(exitStatus));\n        break;\n      }\n      Thread.sleep(ParallecGlobalConfig.sshSleepMIllisBtwReadBuffer);\n    }\n    sshResponse.setResponseBody(sbStdOut.toString());\n    sshResponse.setErrorMessage(outputStreamStdErr.toString());\n    sshResponse.setReceiveTimeNow();\n  }\n catch (  Exception t) {\n    throw new RuntimeException(t);\n  }\n  return sshResponse;\n}\n", "    public String getCountInformation() {\n\treturn (nodeCountInformation + \",  links = \" + \n\t\tlinkManagement.getLinkCount());\n    }\n", "    public boolean isEndEntry(){\n        return false;\n    }\n", "public StrBuilder insert(final int index,String str){\n  validateIndex(index);\n  if (str == null) {\n    str=nullText;\n  }\n  if (str != null) {\n    final int strLen=str.length();\n    if (strLen > 0) {\n      final int newSize=size + strLen;\n      ensureCapacity(newSize);\n      System.arraycopy(buffer,index,buffer,index + strLen,size - index);\n      size=newSize;\n      str.getChars(0,strLen,buffer,index);\n    }\n  }\n  return this;\n}\n", "private boolean isRecursiveDeleteSafe(@Nullable AlluxioURI alluxioUri) {\n    if (alluxioUri == null || !alluxioUri.toString().startsWith(mRootPath.toString())) {\n      // Path is not part of sub-tree being deleted\n      return false;\n    }\n    if (mUfsSyncChecker == null) {\n      // Delete is unchecked\n      return true;\n    }\n    return mUfsSyncChecker.isDirectoryInSync(alluxioUri);\n  }", "\tprotected SimpleBasePk getPkForSelectByCriteria(ResultSet rs) throws SQLException {\n\n\t\tDeptHdrPk pk = new DeptHdrPk(rs.getString(\"COMPANY_CODE\"), rs.getString(\"DEPT_CODE\"));\n\t\treturn pk;\n\t}\n", "public static void main(String[] args) {\n    final PrintWriter out = new PrintWriter(System.out);\n    final PrintWriter err = new PrintWriter(System.err);\n    final int code = Launcher.main2(out, err, Arrays.asList(args));\n    System.exit(code);\n  }", "public void removeLL() {\n    if (head[0] == this)\n      head[0] = nextTag;\n    if (prevTag != null) {\n      prevTag.nextTag = nextTag;\n    }\n    if (nextTag != null) {\n      nextTag.prevTag = prevTag;\n    }\n  }", "  private void storeDefaultBeans() {\n    //the session bean\n    m_WebSession.setAttribute(\"jwma.session\", this);\n    //the HtmlHelper bean\n    m_WebSession.setAttribute(\"jwma.htmlhelper\", m_HtmlHelper);\n    //a reference to the i18n classloader\n    m_WebSession.setAttribute(\"jwma.resourceloader\", JwmaKernel.getReference().getResourceClassLoader());\n  }//storeDefaultBeans\n", "  public boolean isEmpty() {\n\n    JInternalFrame frames[] = getAllFrames();\n    if (frames.length == 0) {\n      return true;\n    }\n    return false;\n  }\n", "@SuppressWarnings(\"deprecation\")\n    public static ByteBuf writeShortBE(ByteBuf buf, int shortValue) {\n        return buf.order() == ByteOrder.BIG_ENDIAN? buf.writeShort(shortValue) : buf.writeShortLE(shortValue);\n    }", "public static List<Long> createTimestampList(final long startUnixTimestamp,\n                                                 final long endUnixTimestamp) {\n        if (startUnixTimestamp > endUnixTimestamp) {\n            return Collections.emptyList();\n        }\n\n        // normalize the start and end (next day's start)\n        final long normStart = TimeModifier.START_OF_DAY.applyModifier(startUnixTimestamp);\n        final long normEnd = TimeModifier.moveDays(endUnixTimestamp, true, 1);\n\n        // determine which times we have to query for\n        final List<Long> times = new ArrayList<>();\n        for (long time = normStart; time < normEnd; time += 24 * 60 * 60) {\n            times.add(time);\n        }\n\n        return times;\n    }", "private void updateImageViews(){\n  if (mImages == null)   return;\n  for (int i=0; i < VIEW_COUNT; i++) {\n    if (mAccountSelected && i != getCenterPosition())     continue;\n    ImageView image=mViews[i];\n    updateBitmap(i);\n    final float position=mPosition + POSITION_OFFSETS[i];\n    image.setTranslationX(-mTranslationFactor * ((float)Math.sin(position * Math.PI / 2f)));\n    final float scale=(float)Math.cos(position * Math.PI / 2f) / 3f + 2f / 3f;\n    image.setScaleY(scale);\n    image.setScaleX(scale);\n    final float alpha=(float)Math.pow(Math.cos(position * Math.PI / 4f),2);\n    image.setAlpha(alpha);\n  }\n}\n", "    public int read(InputStream is) throws IOException {\n        makeSpace(1024);\n        int res = is.read(buff, end, buff.length - end);\n        if (res > 0) {\n            end += res;\n        }\n        return res;\n    }\n", "public static ImmutableBlockVolume newWithoutArrayClone ( BlockPalette palette , Vector3i start , Vector3i size , byte [ ] blocks ) { return new ArrayImmutableBlockBuffer ( palette , new ByteBackingData ( blocks ) , start , size ) ; }", "\tpublic IFont getCachedFont(String fontAbsoultePath, int fontSize, MTColor fillColor, MTColor strokeColor, boolean antiAliased){\n\t\tfor (IFont font : fonts){\n\t\t\tif (fontsAreEqual(font, fontAbsoultePath, fontSize,\tfillColor,\tstrokeColor, antiAliased)\n\t\t\t){\n\t\t\t\tSystem.out.println(\"Using cached font: \" + fontAbsoultePath + \" Fontsize: \" + Math.round(fontSize) +\n\t\t\t\t\t\t\" FillColor: \" + fillColor +\n\t\t\t\t\t\t\" StrokeColor: \" + strokeColor);\n\t\t\t\treturn font;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n", "public void clearResults ( ) { for ( final SearchResult result : m_results ) { if ( result . getObject ( ) instanceof NaviNode ) { ( ( NaviNode ) result . getObject ( ) ) . setBackgroundColor ( result . getLine ( ) , result . getPosition ( ) , result . getLength ( ) , null ) ; } else if ( result . getObject ( ) instanceof NaviEdge ) { final NaviEdge edge = ( NaviEdge ) result . getObject ( ) ; final ZyLabelContent content = edge . getLabelContent ( ) ; content . getLineContent ( result . getLine ( ) ) . setBackgroundColor ( result . getPosition ( ) , result . getLength ( ) , null ) ; } } m_results . clear ( ) ; m_cursor . clear ( ) ; m_changed = BOOL_ ; }", "public Observable<SubscriptionMediaServiceInner> getBySubscriptionAsync(String accountName) {\n        return getBySubscriptionWithServiceResponseAsync(accountName).map(new Func1<ServiceResponse<SubscriptionMediaServiceInner>, SubscriptionMediaServiceInner>() {\n            @Override\n            public SubscriptionMediaServiceInner call(ServiceResponse<SubscriptionMediaServiceInner> response) {\n                return response.body();\n            }\n        });\n    }", "void delete ( INaviRawModule rawModule ) throws CouldntDeleteException ;", "public void focusLost ( FocusEvent e ) { comboBox . repaint ( ) ; }", "protected static String read(Reader file) throws IOException {\r\n\t\tfinal StringBuilder content = new StringBuilder();\r\n\t\ttry (BufferedReader reader = new BufferedReader(file)) {\r\n\t\t\tString line = reader.readLine();\r\n\t\t\tboolean first = true;\r\n\t\t\twhile (line != null) {\r\n\t\t\t\tif (first) {\r\n\t\t\t\t\tfirst = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcontent.append(\"\\n\"); //$NON-NLS-1$\r\n\t\t\t\t}\r\n\t\t\t\tcontent.append(line);\r\n\t\t\t\tline = reader.readLine();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn content.toString();\r\n\t}", "  private void syncCommit(ExpenseProxy record, String message) {\n    final Object key = items.getKey(record);\n    if (message != null) {\n      final ApprovalViewData avd = approvalCell.getViewData(key);\n      if (avd != null) {\n        avd.reject(message);\n      }\n    }\n\n    // Redraw the table so the changes are applied.\n    table.redraw();\n  }\n", "    public long totalMemory() {\n        return bufferSet.b() * bufferSet.k();\n    }\n", "public void add(T graphic){\nsynchronized (mLock) {\n    mGraphics.add(graphic);\n  }\n  postInvalidate();\n}\n", "@Override\n\tpublic long dynamicQueryCount(DynamicQuery dynamicQuery,\n\t\tProjection projection) {\n\t\treturn commerceDiscountPersistence.countWithDynamicQuery(dynamicQuery,\n\t\t\tprojection);\n\t}", "public boolean isValid ( ) { return mCRC [ NUM_ ] == CRC . PASSED || mCRC [ NUM_ ] == CRC . CORRECTED ; }", "protected void initSettingsObject() {\n\n        Object o;\n\n        if (CmsStringUtil.isEmpty(getParamAction())) {\n            o = new CmsVfsImportExportHandler();\n        } else {\n            // this is not the initial call, get the job object from session\n            o = getDialogObject();\n        }\n\n        if (!(o instanceof CmsElementChangeLocaleSettings)) {\n            // create a new export handler object\n            m_settings = new CmsElementChangeLocaleSettings();\n        } else {\n            // reuse export handler object stored in session\n            m_settings = (CmsElementChangeLocaleSettings)o;\n        }\n\n    }", "public static int[] copyOfRange(int[] original,int start,int end){\n  if (start <= end) {\n    if (original.length >= start && 0 <= start) {\n      int length=end - start;\n      int copyLength=Math.min(length,original.length - start);\n      int[] copy=new int[length];\n      System.arraycopy(original,start,copy,0,copyLength);\n      return copy;\n    }\n    throw new ArrayIndexOutOfBoundsException();\n  }\n  throw new IllegalArgumentException();\n}\n", "public long getMoonTime(double desired, boolean next)\n    {\n        return timeOfAngle( new AngleFunc() {\n                            @Override\n                            public double eval() { return getMoonAge(); } },\n                            desired,\n                            SYNODIC_MONTH,\n                            MINUTE_MS,\n                            next);\n    }", "boolean equivalent(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        WlpInformation other = (WlpInformation) obj;\n\n        if (appliesTo == null) {\n            if (other.appliesTo != null)\n                return false;\n        } else if (!appliesTo.equals(other.appliesTo))\n            return false;\n\n        if (date == null) {\n            if (other.date != null)\n                return false;\n        } else if (!date.equals(other.date))\n            return false;\n\n        if (links == null) {\n            if (other.links != null)\n                return false;\n        } else if (!links.equals(other.links))\n            return false;\n\n        if (shortName == null) {\n            if (other.shortName != null)\n                return false;\n        } else if (!shortName.equals(other.shortName))\n            return false;\n\n        if (lowerCaseShortName == null) {\n            if (other.lowerCaseShortName != null)\n                return false;\n        } else if (!lowerCaseShortName.equals(other.lowerCaseShortName))\n            return false;\n\n        if (productEdition == null) {\n            if (other.productEdition != null)\n                return false;\n        } else if (!productEdition.equals(other.productEdition))\n            return false;\n\n        if (productId == null) {\n            if (other.productId != null)\n                return false;\n        } else if (!productId.equals(other.productId))\n            return false;\n\n        if (productInstallType == null) {\n            if (other.productInstallType != null)\n                return false;\n        } else if (!productInstallType.equals(other.productInstallType))\n            return false;\n\n        if (productVersion == null) {\n            if (other.productVersion != null)\n                return false;\n        } else if (!productVersion.equals(other.productVersion))\n            return false;\n\n        if (provideFeature == null) {\n            if (other.provideFeature != null)\n                return false;\n        } else {\n            if (other.provideFeature != null) {\n                if (other.provideFeature.size() != provideFeature.size()) {\n                    return false;\n                }\n                for (String s : other.provideFeature) {\n                    if (!provideFeature.contains(s)) {\n                        return false;\n                    }\n                }\n            } else {\n                return false;\n            }\n        }\n\n        if (links == null) {\n            if (other.links != null)\n                return false;\n        } else if (!links.equals(other.links))\n            return false;\n\n        if (provideFix == null) {\n            if (other.provideFix != null)\n                return false;\n        } else if (!provideFix.equals(other.provideFix))\n            return false;\n\n        if (requireFeature == null) {\n            if (other.requireFeature != null)\n                return false;\n        } else {\n            if (other.requireFeature != null) {\n                if (other.requireFeature.size() != requireFeature.size()) {\n                    return false;\n                }\n                for (String s : other.requireFeature) {\n                    if (!requireFeature.contains(s)) {\n                        return false;\n                    }\n                }\n            } else {\n                return false;\n            }\n        }\n\n        if (requireFix == null) {\n            if (other.requireFix != null)\n                return false;\n        } else {\n            if (other.requireFix != null) {\n                if (other.requireFix.size() != requireFix.size()) {\n                    return false;\n                }\n                for (String s : other.requireFix) {\n                    if (!requireFix.contains(s)) {\n                        return false;\n                    }\n                }\n            } else {\n                return false;\n            }\n        }\n\n        if (typeLabel == null) {\n            if (other.typeLabel != null)\n                return false;\n        } else if (!typeLabel.equals(other.typeLabel))\n            return false;\n\n        if (visibility == null) {\n            if (other.visibility != null)\n                return false;\n        } else if (!visibility.equals(other.visibility))\n            return false;\n\n        if (scriptLanguage == null) {\n            if (other.scriptLanguage != null)\n                return false;\n        } else if (!scriptLanguage.equals(other.scriptLanguage))\n            return false;\n\n        if (downloadPolicy == null) {\n            if (other.downloadPolicy != null)\n                return false;\n        } else if (!downloadPolicy.equals(other.downloadPolicy))\n            return false;\n\n        if (provisionCapability == null) {\n            if (other.provisionCapability != null)\n                return false;\n        } else if (!provisionCapability.equals(other.provisionCapability))\n            return false;\n\n        if (installPolicy == null) {\n            if (other.installPolicy != null)\n                return false;\n        } else if (!installPolicy.equals(other.installPolicy))\n            return false;\n\n        if (displayPolicy == null) {\n            if (other.displayPolicy != null)\n                return false;\n        } else if (!displayPolicy.equals(other.displayPolicy))\n            return false;\n\n        if (webDisplayPolicy == null) {\n            if (other.webDisplayPolicy != null)\n                return false;\n        } else if (!webDisplayPolicy.equals(other.webDisplayPolicy))\n            return false;\n\n        if (vanityRelativeURL == null) {\n            if (other.vanityRelativeURL != null)\n                return false;\n        } else if (!vanityRelativeURL.equals(other.vanityRelativeURL))\n            return false;\n\n        if (featuredWeight == null) {\n            if (other.featuredWeight != null)\n                return false;\n        } else if (!featuredWeight.equals(other.featuredWeight))\n            return false;\n\n        if (wlpInformationVersion == null) {\n            if (other.wlpInformationVersion != null)\n                return false;\n        } else if (!wlpInformationVersion.equals(other.wlpInformationVersion))\n            return false;\n\n        if (mainAttachmentSize != other.mainAttachmentSize)\n            return false;\n\n        if (supersededBy == null) {\n            if (other.supersededBy != null) {\n                return false;\n            }\n        } else if (!supersededBy.equals(other.supersededBy)) {\n            return false;\n        }\n\n        if (supersededByOptional == null) {\n            if (other.supersededByOptional != null) {\n                return false;\n            }\n        } else if (!supersededByOptional.equals(other.supersededByOptional)) {\n            return false;\n        }\n\n        if (javaSEVersionRequirements == null) {\n            if (other.javaSEVersionRequirements != null) {\n                return false;\n            }\n        } else if (!javaSEVersionRequirements.equals(other.javaSEVersionRequirements)) {\n            return false;\n        }\n\n        if (mainAttachmentSHA256 == null) {\n            if (other.mainAttachmentSHA256 != null) {\n                return false;\n            }\n        } else if (!mainAttachmentSHA256.equals(other.mainAttachmentSHA256)) {\n            return false;\n        }\n\n        if (genericRequirements == null) {\n            if (other.genericRequirements != null) {\n                return false;\n            }\n        } else if (!genericRequirements.equals(other.genericRequirements)) {\n            return false;\n        }\n\n        if (packagedJava == null) {\n            if (other.packagedJava != null) {\n                return false;\n            }\n        } else if (!packagedJava.equals(other.packagedJava)) {\n            return false;\n        }\n\n        if (requireFeatureWithTolerates == null) {\n            if (other.requireFeatureWithTolerates != null) {\n                return false;\n            }\n        } else if (!requireFeatureWithTolerates.equals(other.requireFeatureWithTolerates)) {\n            return false;\n        }\n\n        if (mavenCoordinates == null) {\n            if (other.mavenCoordinates != null) {\n                return false;\n            }\n        } else if (!mavenCoordinates.equals(other.mavenCoordinates)) {\n            return false;\n        }\n\n        if (singleton == null) {\n            if (other.singleton != null)\n                return false;\n        } else if (!singleton.equals(other.singleton))\n            return false;\n\n        if (ibmInstallTo == null) {\n            if (other.ibmInstallTo != null)\n                return false;\n        } else if (!ibmInstallTo.equals(other.ibmInstallTo))\n            return false;\n\n        return true;\n    }", "protected static Tuple<String,String> createTuple(String one,boolean two){\n  return MatsimXmlWriter.createTuple(one,Boolean.toString(two));\n}\n", "private void closeAttachedEvent(long ov){\n  long hEvent=UNSAFE.getAddress(ov + OFFSETOF_HEVENT);\n  if (hEvent != 0 && hEvent != INVALID_HANDLE_VALUE)   CloseHandle(hEvent);\n}", "private void removePool(IThriftPool pool)\r\n    {\r\n        Pelops.removePool(PelopsUtils.getPoolName(pool));\r\n        Node[] nodes = ((CommonsBackedPool) pool).getCluster().getNodes();\r\n        logger.warn(\"{} :{}  host appears to be down, trying for next \", nodes, ((CommonsBackedPool) pool).getCluster()\r\n                .getConnectionConfig().getThriftPort());\r\n        CassandraHost cassandraHost = ((CassandraHostConfiguration) configuration).getCassandraHost(\r\n                nodes[0].getAddress(), ((CommonsBackedPool) pool).getCluster().getConnectionConfig().getThriftPort());\r\n        hostPools.remove(cassandraHost);\r\n    }", "@Override\n    public void postCrawling(CrawlSession session, ExitStatus exitStatus) {\n        LOG.debug(\"postCrawling\");\n        StateFlowGraph sfg = session.getStateFlowGraph();\n        checkSFG(sfg);\n        // TODO: call state abstraction function to get distance matrix and run rscript on it to\n        // create clusters\n        String[][] clusters = null;\n        // generateClusters(session);\n\n        result = outModelCache.close(session, exitStatus, clusters);\n\n        outputBuilder.write(result, session.getConfig(), clusters);\n        StateWriter writer =\n                new StateWriter(outputBuilder, sfg, ImmutableMap.copyOf(visitedStates));\n        for (State state : result.getStates().values()) {\n            try {\n                writer.writeHtmlForState(state);\n            } catch (Exception Ex) {\n                LOG.info(\"couldn't write state :\" + state.getName());\n            }\n        }\n        LOG.info(\"Crawl overview plugin has finished\");\n    }", "public ReplDBMSEvent createEvent ( long seqno , short fragNo , boolean lastFrag , String shardId , Timestamp timestamp ) { return createEvent ( seqno , fragNo , lastFrag , shardId , timestamp , NUM_ ) ; }", "    public int getColumns() {\n        if (getLayout() instanceof Layout) {\n            return ((Layout) getLayout()).getColumns();\n        }\n        return -1;\n    }\n", "    public VMidiEvent getNextMidiEvent() {\n        if (this.eventListener != null) {\n            return this.eventListener[currTrack].nextMidiEvent;\n        } else {\n            return this.nextMidievent;\n        }\n    }\n", "public boolean confirmEnoughOffsetOthers ( int [ ] othersOffsets , int j , boolean removeDest ) { if ( countOfOffsetOthers ( othersOffsets , j , removeDest ) != numOtherInfoContributors ) { throw new RuntimeException ( STR_ ) ; } return BOOL_ ; }", "private Map<String, ProtocolInfo> readProtocols() {\n\n        // Map of all available protocols\n        Map<String, ProtocolInfo> protocols = new HashMap<String, ProtocolInfo>();\n\n        // Get protcols directory\n        File protocol_directory = new File(getGuacamoleHome(), \"protocols\");\n\n        // Read protocols from directory if it exists\n        if (protocol_directory.isDirectory()) {\n\n            // Get all JSON files\n            File[] files = protocol_directory.listFiles(\n                new FilenameFilter() {\n\n                    @Override\n                    public boolean accept(File file, String string) {\n                        return string.endsWith(\".json\");\n                    }\n\n                }\n            );\n\n            // Warn if directory contents are not available\n            if (files == null) {\n                logger.error(\"Unable to read contents of \\\"{}\\\".\", protocol_directory.getAbsolutePath());\n                files = new File[0];\n            }\n            \n            // Load each protocol from each file\n            for (File file : files) {\n\n                try {\n\n                    // Parse protocol\n                    FileInputStream stream = new FileInputStream(file);\n                    ProtocolInfo protocol = readProtocol(stream);\n                    stream.close();\n\n                    // Store protocol\n                    protocols.put(protocol.getName(), protocol);\n\n                }\n                catch (IOException e) {\n                    logger.error(\"Unable to read connection parameter information from \\\"{}\\\": {}\", file.getAbsolutePath(), e.getMessage());\n                    logger.debug(\"Error reading protocol JSON.\", e);\n                }\n\n            }\n\n        }\n\n        // If known protocols are not already defined, read from classpath\n        for (String protocol : KNOWN_PROTOCOLS) {\n\n            // If protocol not defined yet, attempt to load from classpath\n            if (!protocols.containsKey(protocol)) {\n\n                InputStream stream = LocalEnvironment.class.getResourceAsStream(\n                        \"/org/apache/guacamole/protocols/\"\n                        + protocol + \".json\");\n\n                // Parse JSON if available\n                if (stream != null) {\n                    try {\n                        protocols.put(protocol, readProtocol(stream));\n                    }\n                    catch (IOException e) {\n                        logger.error(\"Unable to read pre-defined connection parameter information for protocol \\\"{}\\\": {}\", protocol, e.getMessage());\n                        logger.debug(\"Error reading pre-defined protocol JSON.\", e);\n                    }\n                }\n\n            }\n\n        }\n\n        // Protocols map now fully populated\n        return protocols;\n\n    }", "public Builder persistentSubscriptionAutoAckEnabled ( boolean persistentSubscriptionAutoAckEnabled ) { this . persistentSubscriptionAutoAckEnabled = persistentSubscriptionAutoAckEnabled ; return this ; }", "void scroll(int x,int y,int flag,int type){\n  checkSecurity();\n  ScrollPane sp=(ScrollPane)target;\n  Component c=getScrollChild();\n  if (c == null) {\n    return;\n  }\n  int sx, sy;\n  Color colors[]=getGUIcolors();\n  if (sp.getScrollbarDisplayPolicy() == ScrollPane.SCROLLBARS_NEVER) {\n    sx=-x;\n    sy=-y;\n  }\n else {\n    Point p=c.location();\n    sx=p.x;\n    sy=p.y;\n    if ((flag & HORIZONTAL) != 0) {\n      hsb.setValue(Math.min(x,hsb.getMaximum() - hsb.getVisibleAmount()));\n      ScrollPaneAdjustable hadj=(ScrollPaneAdjustable)sp.getHAdjustable();\n      setAdjustableValue(hadj,hsb.getValue(),type);\n      sx=-(hsb.getValue());\n      Graphics g=getGraphics();\n      if (g != null) {\n        try {\n          paintHorScrollbar(g,colors,true);\n        }\n  finally {\n          g.dispose();\n        }\n      }\n    }\n    if ((flag & VERTICAL) != 0) {\n      vsb.setValue(Math.min(y,vsb.getMaximum() - vsb.getVisibleAmount()));\n      ScrollPaneAdjustable vadj=(ScrollPaneAdjustable)sp.getVAdjustable();\n      setAdjustableValue(vadj,vsb.getValue(),type);\n      sy=-(vsb.getValue());\n      Graphics g=getGraphics();\n      if (g != null) {\n        try {\n          paintVerScrollbar(g,colors,true);\n        }\n  finally {\n          g.dispose();\n        }\n      }\n    }\n  }\n  c.move(sx,sy);\n}\n", "public static MozuUrl addSoftAllocationsUrl()\r\n\t{\r\n\t\tUrlFormatter formatter = new UrlFormatter(\"/api/commerce/catalog/admin/softallocations/\");\r\n\t\treturn new MozuUrl(formatter.getResourceUrl(), MozuUrl.UrlLocation.TENANT_POD) ;\r\n\t}", "\tprivate byte xor8(byte value1, byte value2) {\n\t\tshort result16 = \n\t\t\t(short)(Unsigned.unsignedByte(value1) ^ Unsigned.unsignedByte(value2));\n\t\tbyte result8 = (byte)result16;\t\n\t\tupdateFlags8(result16);\n\t\treturn result8;\n\t}\n", "public void callback(final long status_id,final String twitlonger_message_id) throws Exception {\n  final ArrayList<NameValuePair> args=new ArrayList<>(2);\n  args.add(new BasicNameValuePair(\"application\",app_name));\n  args.add(new BasicNameValuePair(\"api_k", "public TimeDuration(final Date date,final long milliseconds){\n  this(date.getTime(),milliseconds);\n}\n", "public static <T>FutureW<T> ofSupplier(final Supplier<T> s,final Executor ex){\n  return FutureW.of(CompletableFuture.supplyAsync(s,ex));\n}\n", "    public double getImaginary(int i) {\n        if (i >= _dimension)\n            throw new ArrayIndexOutOfBoundsException();\n        return _imags[i];\n    }\n", "public boolean olderThan ( Version o ) { return compareTo ( o ) == - NUM_ ; }", "public void marshall(CreateDatasetRequest createDatasetRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (createDatasetRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(createDatasetRequest.getDatasetName(), DATASETNAME_BINDING);\n            protocolMarshaller.marshall(createDatasetRequest.getActions(), ACTIONS_BINDING);\n            protocolMarshaller.marshall(createDatasetRequest.getTriggers(), TRIGGERS_BINDING);\n            protocolMarshaller.marshall(createDatasetRequest.getContentDeliveryRules(), CONTENTDELIVERYRULES_BINDING);\n            protocolMarshaller.marshall(createDatasetRequest.getRetentionPeriod(), RETENTIONPERIOD_BINDING);\n            protocolMarshaller.marshall(createDatasetRequest.getVersioningConfiguration(), VERSIONINGCONFIGURATION_BINDING);\n            protocolMarshaller.marshall(createDatasetRequest.getTags(), TAGS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public synchronized void readUnlock ( ) { activeReaders -- ; if ( activeReaders == NUM_ ) notifyAll ( ) ; }", "\tprotected void addEgIntensityPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_PartWithCommon_egIntensity_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_PartWithCommon_egIntensity_feature\", \"_UI_PartWithCommon_type\"),\n\t\t\t\t EsxPackage.Literals.PART_WITH_COMMON__EG_INTENSITY,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public void sendRegistrationId() throws AndroidAgentException {\n  DeviceInfo deviceInfo=new DeviceInfo(getContext());\n  DeviceInfoPayload deviceInfoPayload=new DeviceInfoPayload(getContext());\n  deviceInfoPayload.build();\n  String replyPayload=deviceInfoPayload.getDeviceInfoPayload();\n  String ipSaved=Constants.DEFAULT_HOST;\n  String prefIP=Preference.getString(getContext(),Constants.PreferenceFlag.IP);\n  if (prefIP != null) {\n    ipSaved=prefIP;\n  }\n  if (ipSaved != null && !ipSaved.isEmpty()) {\n    ServerConfig utils=new ServerConfig();\n    utils.setServerIP(ipSaved);\n    String url=utils.getAPIServerURL(getContext()) + Constants.DEVICE_ENDPOINT + deviceInfo.getDeviceId();\n    CommonUtils.callSecuredAPI(getContext(),url,org.wso2.emm.agent.proxy.utils.Constants.HTTP_METHODS.PUT,replyPayload,GCMRegistrationManager.this,Constants.GCM_REGISTRATION_ID_SEND_CODE);\n  }\n else {\n    Log.e(TAG,\"There is no valid IP to contact the server\");\n  }\n}\n", "private void invalidateFileHandle(){\n  if (file != null) {\n    file=null;\n  }\n}\n", "public static void copy(final JTextArea area){\n  final String selectedText=area.getSelectedText();\n  if (selectedText == null) {\n    ClipboardHelpers.copyToClipboard(area.getText());\n  }\n else {\n    ClipboardHelpers.copyToClipboard(selectedText);\n  }\n}\n", "public static byte [ ] longToRegisters ( long v ) { byte [ ] registers = new byte [ NUM_ ] ; registers [ NUM_ ] = ( byte ) ( NUM_ & ( v > > NUM_ ) ) ; registers [ NUM_ ] = ( byte ) ( NUM_ & ( v > > NUM_ ) ) ; registers [ NUM_ ] = ( byte ) ( NUM_ & ( v > > NUM_ ) ) ; registers [ NUM_ ] = ( byte ) ( NUM_ & ( v > > NUM_ ) ) ; registers [ NUM_ ] = ( byte ) ( NUM_ & ( v > > NUM_ ) ) ; registers [ NUM_ ] = ( byte ) ( NUM_ & ( v > > NUM_ ) ) ; registers [ NUM_ ] = ( byte ) ( NUM_ & ( v > > NUM_ ) ) ; registers [ NUM_ ] = ( byte ) ( NUM_ & v ) ; return registers ; }", "public static boolean isRequestType ( char type ) { return ( ( type & NUM_ ) == STUN_REQUEST ) ; }", "protected ObjectPermissionSet getRelevantPermissionSet(ModeledUser user,\n            ModeledPermissions<? extends EntityModel> targetEntity)\n            throws GuacamoleException {\n\n        if (targetEntity.isUser())\n            return user.getUserPermissions();\n\n        if (targetEntity.isUserGroup())\n            return user.getUserGroupPermissions();\n\n        // Entities should be only users or groups\n        throw new UnsupportedOperationException(\"Unexpected entity type.\");\n        \n    }", "private static void importIdbFileInternal ( final String idaDirectory , final String idbFile , final IDatabase database , final CBaseExporter exporter ) throws ImportFailedException { try { exporter . importModule ( idbFile , idaDirectory , database ) ; } catch ( final ConfigFileException exception ) { throw new ImportFailedException ( String . format ( STR_ + STR_ + STR_ ) ) ; } catch ( final IdaException exception ) { throw new ImportFailedException ( String . format ( STR_ + STR_ + STR_ ) ) ; } catch ( final ExporterException exception ) { throw new ImportFailedException ( exception . getLocalizedMessage ( ) ) ; } }", "   public String getPassword() {\n      final JPasswordField jpf = this.getPasswordField();\n      final StringBuffer sb = new StringBuffer(); \n      Runnable runnable = new Runnable() {\n         public void run() {\n            char[] chars = jpf.getPassword();\n            sb.append(chars);\n            }\n         };\n\n      try {\n         Utilities.invokeOnEventThread(runnable);\n         }\n      catch (Exception e) {\n// EXCEPTION\n         }\n\n      String password = sb.toString();\n      return password;\n      }\n", "public void marshall(DescribeInstancesRequest describeInstancesRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (describeInstancesRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(describeInstancesRequest.getStackId(), STACKID_BINDING);\n            protocolMarshaller.marshall(describeInstancesRequest.getLayerId(), LAYERID_BINDING);\n            protocolMarshaller.marshall(describeInstancesRequest.getInstanceIds(), INSTANCEIDS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void makeDynamic ( PropertyExpression pexp , ClassNode returnType ) { context . getEnclosingMethod ( ) . putNodeMetaData ( StaticTypesMarker . DYNAMIC_RESOLUTION , Boolean . TRUE ) ; pexp . putNodeMetaData ( StaticTypesMarker . DYNAMIC_RESOLUTION ,", "private void checkInvariants(){\n  assert (wordsInUse == 0 || words[wordsInUse - 1] != 0);\n  assert (wordsInUse >= 0 && wordsInUse <= words.length);\n  assert (wordsInUse == words.length || words[wordsInUse] == 0);\n}\n", "@Override public void clear(){\n  while (queue.poll() != null)   ;\n  modCount++;\n  Arrays.fill(table,null);\n  size=0;\n  while (queue.poll() != null)   ;\n}\n", "public CalibratedCurves getCloneShifted(String symbol, double shift) throws SolverException, CloneNotSupportedException {\n\t\t// Clone calibration specs, shifting the desired symbol\n\t\tList<CalibrationSpec> calibrationSpecsShifted = new ArrayList<>();\n\t\tfor(CalibrationSpec calibrationSpec : calibrationSpecs) {\n\t\t\tif(calibrationSpec.symbol.equals(symbol)) {\n\t\t\t\tcalibrationSpecsShifted.add(calibrationSpec.getCloneShifted(shift));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcalibrationSpecsShifted.add(calibrationSpec);\n\t\t\t}\n\t\t}\n\n\t\treturn new CalibratedCurves(calibrationSpecsShifted, model, evaluationTime, calibrationAccuracy);\n\t}", "private boolean performDefineOperation() throws CmsException {\n\n        boolean useTempfileProject = Boolean.valueOf(getParamUsetempfileproject()).booleanValue();\n        try {\n            if (useTempfileProject) {\n                switchToTempProject();\n            }\n            String newProperty = getParamNewproperty();\n            if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(newProperty)) {\n                getCms().createPropertyDefinition(newProperty);\n                return true;\n            } else {\n                throw new CmsException(Messages.get().container(Messages.ERR_INVALID_PROP_0));\n            }\n        } finally {\n            if (useTempfileProject) {\n                switchToCurrentProject();\n            }\n        }\n    }", "public static void writeConfigFile(File configFile, Class<?>[] classes, boolean sortClasses)\n\t\t\tthrows SQLException, IOException {\n\t\tSystem.out.println(\"Writing configurations to \" + configFile.getAbsolutePath());\n\t\twriteConfigFile(new FileOutputStream(configFile), classes, sortClasses);\n\t}", "private void onPasswordFocusChanged(boolean hasFocus){\n  if (hasFocus) {\n    showViewPasswordButton();\n  }\n else {\n    hidePassword();\n    hidePasswordButton();\n  }\n}\n", "public static IRemoteSpace findJiniSpace ( SpaceURL url , Properties customProperties , long timeout , LookupType lookupType ) throws FinderException { return ( IRemoteSpace ) findJiniSpace ( url , customProperties , timeout , lookupType , BOOL_ ) ; }", "private void saveExtraFiles(List<String> extraFiles,String handleId,StartRequest request){\n  int i=0;\n  if (extraFiles == null || extraFiles.size() == 0) {\n    return;\n  }\n  for (  String filename : extraFiles) {\n    InputStream inputStream=request.getFile(\"extraFileData_\" + i,true);\n    fileManager.saveFile(handleId,filename,inputStream);\n    i++;\n  }\n}\n", "private void processNode(CAS cas,Node node,StringBuilder documentText){\n  if (node.hasChildNodes()) {\n    if (docIdTag != null) {\n      ensureIdValidity(node);\n    }\n    NodeList docFields=node.getChildNodes();\n    for (int i=0; i < docFields.getLength(); i++) {\n      Node field=docFields.item(i);\n      int begin=documentText.length();\n      String nodeTag=field.getLocalName();\n      if (nodeTag != null && isIncluded(nodeTag)) {\n        String nodeText=field.getTextContent();\n        documentText=documentText.append(nodeText);\n        int end=documentText.length();\n        documentText=documentText.append(\"\\n\");\n        if (useSubstitution && substitution.containsKey(nodeTag)) {\n          nodeTag=substitution.get(nodeTag);\n        }\n        createFieldAnnotation(cas,nodeTag,begin,end);\n      }\n    }\n  }\n}\n", "public void addBitmapToCache ( String data , BitmapDrawable value ) { if ( data == null || value == null ) { return ; } if ( mMemoryCache != null ) { if ( RecyclingBitmapDrawable . class . isInstance ( value ) ) { ( ( RecyclingBitmapDrawable ) value ) . setIsCached ( BOOL_ ) ; } mMemoryCache . put ( data , value ) ; } }", "    public void focusGained() {\n\thud.getEventManager().setHUDExclusiveMode(true);\n    }\n", "private int nameOffset ( int index ) { return this . data . readUShort ( Offset . nameRecordStringOffset . offset + this . offsetForNameRecord ( index ) ) + this . stringOffset ( ) ; }", "public static List<double[]> toDoubles(Shape s){\n  List<double[]> coordLists=new ArrayList<double[]>();\n  PathIterator pi2=s.getPathIterator(null);\n  FlatteningPathIterator pi=new FlatteningPathIterator(pi2,.25);\n  double[] coords=new double[6];\n  double lastMovedToPntX=Double.NaN;\n  double lastMovedToPntY=Double.NaN;\n  List<Double> curCoord=null;\n  while (!pi.isDone()) {\n    int type=pi.currentSegment(coords);\n    if (type == PathIterator.SEG_LINETO) {\n      curCoord=assertList(curCoord);\n      curCoord.add(coords[1]);\n      curCoord.add(coords[0]);\n    }\n else     if (type == PathIterator.SEG_MOVETO) {\n      if (curCoord != null && !curCoord.isEmpty()) {\n        coordLists.add(toArray(curCoord));\n        curCoord=null;\n      }\n      lastMovedToPntX=coords[0];\n      lastMovedToPntY=coords[1];\n      curCoord=assertList(curCoord);\n      curCoord.add(lastMovedToPntY);\n      curCoord.add(lastMovedToPntX);\n    }\n else     if (type == PathIterator.SEG_CLOSE) {\n      final double x=coords[0];\n      final double y=coords[1];\n      if (x != lastMovedToPntX && y != lastMovedToPntY) {\n        curCoord=assertList(curCoord);\n        curCoord.add(y);\n        curCoord.add(x);\n      }\n      if (curCoord != null && !curCoord.isEmpty()) {\n        coordLists.add(toArray(curCoord));\n        curCoord=null;\n      }\n    }\n    pi.next();\n  }\n  if (curCoord != null && !curCoord.isEmpty()) {\n    coordLists.add(toArray(curCoord));\n  }\n  return coordLists;\n}\n", "public void XtestWildCardSubscriptionPreservedOnRestart() throws Exception {\n  ActiveMQDestination dest1=new ActiveMQTopic(\"TEST.A\");\n  ActiveMQDestination dest2=new ActiveMQTopic(\"TEST.B\");\n  ActiveMQDestination dest3=new ActiveMQTopic(\"TEST.C\");\n  ActiveMQDestination wildDest=new ActiveMQTopic(\"TEST.>\");\n  ArrayList<MessageId> sentBeforeRestart=new ArrayList<>();\n  ArrayList<MessageId> sentBeforeCreateConsumer=new ArrayList<>();\n  ArrayList<MessageId> sentAfterCreateConsumer=new ArrayList<>();\n{\n    StubConnection connection1=createConnection();\n    ConnectionInfo connectionInfo1=createConnectionInfo();\n    connectionInfo1.setClientId(\"A\");\n    SessionInfo sessionInfo1=createSessionInfo(connectionInfo1);\n    ProducerInfo producerInfo1=createProducerInfo(sessionInfo1);\n    connection1.send(connectionInfo1);\n    connection1.send(sessionInfo1);\n    connection1.send(producerInfo1);\n    ConsumerInfo consumerInfo1=createConsumerInfo(sessionInfo1,wildDest);\n    consumerInfo1.setSubscriptionName(\"test\");\n    consumerInfo1.setPrefetchSize(100);\n    connection1.send(consumerInfo1);\n    connection1.send(closeConsumerInfo(consumerInfo1));\n    for (int i=0; i < 4; i++) {\n      Message m=createMessage(producerInfo1,dest1,DeliveryMode.PERSISTENT);\n      connection1.send(m);\n      sentBeforeRestart.add(m.getMessageId());\n    }\n    connection1.request(closeConnectionInfo(connectionInfo1));\n    connection1.stop();\n  }\n  restartBroker();\n{\n    StubConnection connection2=createConnection();\n    ConnectionInfo connectionInfo2=createConnectionInfo();\n    connectionInfo2.setClientId(\"A\");\n    SessionInfo sessionInfo2=createSessionInfo(connectionInfo2);\n    connection2.send(connectionInfo2);\n    connection2.send(sessionInfo2);\n    ProducerInfo producerInfo2=createProducerInfo(sessionInfo2);\n    connection2.send(producerInfo2);\n    for (int i=0; i < 4; i++) {\n      Message m=createMessage(producerInfo2,dest2,DeliveryMode.PERSISTENT);\n      connection2.send(m);\n      sentBeforeCreateConsumer.add(m.getMessageId());\n    }\n    ConsumerInfo consumerInfo2=createConsumerInfo(sessionInfo2,wildDest);\n    consumerInfo2.setSubscriptionName(\"test\");\n    consumerInfo2.setPrefetchSize(100);\n    connection2.send(consumerInfo2);\n    for (int i=0; i < 4; i++) {\n      Message m=createMessage(producerInfo2,dest3,DeliveryMode.PERSISTENT);\n      connection2.send(m);\n      sentAfterCreateConsumer.add(m.getMessageId());\n    }\n    for (int i=0; i < 4; i++) {\n      Message m2=receiveMessage(connection2);\n      assertNotNull(\"Recovered message missing: \" + i,m2);\n      assertEquals(sentBeforeRestart.get(i),m2.getMessageId());\n    }\n    for (int i=0; i < 4; i++) {\n      Message m2=receiveMessage(connection2);\n      assertNotNull(\"Before activated message missing: \" + i,m2);\n      assertEquals(sentBeforeCreateConsumer.get(i),m2.getMessageId());\n    }\n    for (int i=0; i < 4; i++) {\n      Message m2=receiveMessage(connection2);\n      assertNotNull(\"After activated message missing: \" + i,m2);\n      assertEquals(\"\" + i,sentAfterCreateConsumer.get(i),m2.getMessageId());\n    }\n    assertNoMessagesLeft(connection2);\n  }\n}\n", "\tpublic void setName(String to) {\n\t\tthis.name=to;\n\t\tsetModified(true);\n\t}\n", "public Object newInstance(Class javaContentInterface) throws JAXBException {\n  if (javaContentInterface == null) {\n    throw new JAXBException(Messages.format(Messages.CI_NOT_NULL));\n  }\n  try {\n    Class c=gi.getDefaultImplementation(javaContentInterface);\n    if (c == null)     throw new JAXBException(Messages.format(Messages.MISSING_INTERFACE,javaContentInterface));\n    return c.newInstance();\n  }\n catch (  Exception e) {\n    throw new JAXBException(e);\n  }\n}\n", "private void addInfo(JPanel panel,String key,String value){\n  lgbc.gridx=0;\n  lgbc.anchor=GridBagConstraints.WEST;\n  panel.add(new JLabel(key),lgbc);\n  lgbc.gridx=1;\n  lgbc.anchor=GridBagConstraints.EAST;\n  panel.add(new JLabel(StringUtil.shortenTo(value,35,20)),lgbc);\n  lgbc.gridy++;\n}\n", "public boolean containsMimeTypeForExtension (@Nonnull final String sExtension)\n  {\n    ValueEnforcer.notNull (sExtension, \"Extension\");\n\n    final ICommonsList <MimeTypeInfo> aInfos = getAllInfosOfExtension (sExtension);\n    return CollectionHelper.isNotEmpty (aInfos);\n  }", "    public double difference(Angle other) {\n        Angle newAngle = new Angle(degrees - other.getDegrees(), false);\n        if (newAngle.getDegrees() > 180.0) {\n            return 360 - newAngle.getDegrees(); \n        } else {\n            return newAngle.getDegrees();\n        }        \n    }\n", "public PriorityQueue(Collection<? extends E> c){\n  if (c instanceof PriorityQueue) {\n    getFromPriorityQueue((PriorityQueue<? extends E>)c);\n  }\n else   if (c instanceof SortedSet) {\n    getFromSortedSet((SortedSet<? extends E>)c);\n  }\n else {\n    initSize(c);\n    addAll(c);\n  }\n}\n", "\tpublic Pattern select(int index, Data data) {\n\t\treturn data.get(index % data.count());\n\t}\n", "    private Boolean addEpcList(final Document document, final Element root, final String epcList) {\n        if (!epcList.equals(\"\")) {\n            Element element;\n            element = document.createElement(\"epcList\");\n            Element epcNode = null;\n            StringTokenizer st = new StringTokenizer(epcList);\n            while (st.hasMoreTokens()) {\n                epcNode = document.createElement(\"epc\");\n                epcNode.appendChild(document.createTextNode(st.nextToken()));\n                element.appendChild(epcNode);\n            }\n            root.appendChild(element);\n            return true;\n        } else {\n            return false;\n        }\n    }\n", "    protected int intValue() {\n\treturn dispatchValue.getBooleanLiteral().booleanValue() ? 1 : 0;\n    }\n", "public String createContainingBase64Value(String basename, String key) {\n        String file;\n        Object value = value(key);\n        if (value == null) {\n            throw new SlimFixtureException(false, \"No value for key: \" + key);\n        } else if (value instanceof String) {\n            file = createFileFromBase64(basename, (String) value);\n        } else {\n            throw new SlimFixtureException(false, \"Value for key: \" + key + \" is not a String, but: \" + value);\n        }\n        return file;\n    }", "public Set<String> getFullKeyList() throws IOException {\n    if (dataCollector.getCollectorType()\n        .equals(DataCollector.COLLECTOR_TYPE_LIST)) {\n      return dataCollector.getKeyList();\n    } else {\n      throw new IOException(\n          \"only allowed for \" + DataCollector.COLLECTOR_TYPE_LIST);\n    }\n  }", "public boolean equals ( Object obj ) { if ( obj == null ) return BOOL_ ; if ( this == obj ) return BOOL_ ; if ( ! ( obj instanceof SharedActivationPolicyPermission ) ) return BOOL_ ; SharedActivationPolicyPermission other = ( SharedActivationPolicyPermission ) obj ; boolean answer = policyPermission . equals ( other . policyPermission ) ; if ( DEBUG ) { System . out . println ( STR_ + STR_ + policyPermission + STR_ + other . policyPermission + STR_ + answer ) ; } return answer ; }", "public void replaceWith(final ThriftEnvelope thriftEnvelope)\n    {\n        this.typeName = thriftEnvelope.typeName;\n        this.name = thriftEnvelope.name;\n        this.payload.clear();\n        this.payload.addAll(thriftEnvelope.payload);\n    }", "public DescribeStackResourceDriftsRequest withStackResourceDriftStatusFilters(String... stackResourceDriftStatusFilters) {\n        if (this.stackResourceDriftStatusFilters == null) {\n            setStackResourceDriftStatusFilters(new com.amazonaws.internal.SdkInternalList<String>(stackResourceDriftStatusFilters.length));\n        }\n        for (String ele : stackResourceDriftStatusFilters) {\n            this.stackResourceDriftStatusFilters.add(ele);\n        }\n        return this;\n    }", "\t\tpublic void put(K k, V v) {\n\t\t\tthis.map.put(k, v);\n\t\t}\n", "private IConstant<?>[] _accept(final IBindingSet bset){\n  final IConstant<?>[] r=new IConstant<?>[vars.length];\n  for (int i=0; i < vars.length; i++) {\n    r[i]=bset.get(vars[i]);\n  }\n  final Solution s=new Solution(r);\n  if (log.isTraceEnabled())   log.trace(\"considering: \" + Arrays.toString(r));\n  final boolean distinct=map.putIfAbsent(s,s) == null;\n  if (distinct && log.isDebugEnabled())   log.debug(\"accepted: \" + Arrays.toString(r));\n  return distinct ? r : null;\n}\n", "public void assertAtLeastOneDefined(final String param1, final String... moreParams) {\n    if (!isPresent(param1)) {\n      for (final String moreParam : moreParams) {\n        if (isPresent(moreParam)) {\n          return;\n        }\n      }\n      final List<String> paramsForError = Lists.newArrayList();\n      paramsForError.add(param1);\n      paramsForError.addAll(Arrays.asList(moreParams));\n      throw new ParameterException(\n          String.format(\"At least one of %s must be defined.\",\n              StringUtils.CommaSpaceJoiner.join(paramsForError)));\n    }\n  }", "private String stripQuotes(String s){\n  StringBuffer sb=new StringBuffer(s.length());\n  for (int i=0; i < s.length(); i++) {\n    char c=s.charAt(i);\n    if (c != '\\'') {\n      sb.append(c);\n    }\n  }\n  return sb.toString();\n}", "private void changeRole(PrimaryTerm term) {\n    threadContext.execute(() -> {\n      if (term.term() >= currentTerm) {\n        log.debug(\"{} - Term changed: {}\", memberId, term);\n        currentTerm = term.term();\n        leader = term.primary() != null ? term.primary().memberId() : null;\n        followers = term.backups(replicationFactor - 1)\n            .stream()\n            .map(GroupMember::memberId)\n            .collect(Collectors.toList());\n\n        if (Objects.equals(leader, clusterMembershipService.getLocalMember().id())) {\n          if (this.role == null) {\n            this.role = new LeaderRole(this);\n            log.debug(\"{} transitioning to {}\", clusterMembershipService.getLocalMember().id(), Role.LEADER);\n          } else if (this.role.role() != Role.LEADER) {\n            this.role.close();\n            this.role = new LeaderRole(this);\n            log.debug(\"{} transitioning to {}\", clusterMembershipService.getLocalMember().id(), Role.LEADER);\n          }\n        } else if (followers.contains(clusterMembershipService.getLocalMember().id())) {\n          if (this.role == null) {\n            this.role = new FollowerRole(this);\n            log.debug(\"{} transitioning to {}\", clusterMembershipService.getLocalMember().id(), Role.FOLLOWER);\n          } else if (this.role.role() != Role.FOLLOWER) {\n            this.role.close();\n            this.role = new FollowerRole(this);\n            log.debug(\"{} transitioning to {}\", clusterMembershipService.getLocalMember().id(), Role.FOLLOWER);\n          }\n        } else {\n          if (this.role == null) {\n            this.role = new NoneRole(this);\n            log.debug(\"{} transitioning to {}\", clusterMembershipService.getLocalMember().id(), Role.NONE);\n          } else if (this.role.role() != Role.NONE) {\n            this.role.close();\n            this.role = new NoneRole(this);\n            log.debug(\"{} transitioning to {}\", clusterMembershipService.getLocalMember().id(), Role.NONE);\n          }\n        }\n      }\n    });\n  }", "public static void removeLightSource ( IDynamicLightSource lightToRemove ) { if ( lightToRemove != null && lightToRemove . getAttachmentEntity ( ) != null ) { World world = lightToRemove . getAttachmentEntity ( ) . worldObj ; if ( world != null ) { Dynami", "public void rotateWay(final Way way,final float angle,final int direction,final float pivotX,final float pivotY,int w,int h,BoundingBox v){\n  if (way.getNodes() == null) {\n    Log.d(\"StorageDelegator\",\"rotateWay way \" + way.getOsmId() + \" has no nodes!\");\n    return;\n  }\n  dirty=true;\n  try {\n    HashSet<Node> nodes=new HashSet<Node>(way.getNodes());\n    for (    Node nd : nodes) {\n      undo.save(nd);\n      apiStorage.insertElementSafe(nd);\n      float nodeX=GeoMath.lonE7ToX(w,v,nd.getLon());\n      float nodeY=GeoMath.latE7ToY(h,w,v,nd.getLat());\n      float newX=pivotX + (nodeX - pivotX) * (float)Math.cos(angle) - direction * (nodeY - pivotY) * (float)Math.sin(angle);\n      float newY=pivotY + direction * (nodeX - pivotX) * (float)Math.sin(angle) + (nodeY - pivotY) * (float)Math.cos(angle);\n      int lat=GeoMath.yToLatE7(h,w,v,newY);\n      int lon=GeoMath.xToLonE7(w,v,newX);\n      nd.setLat(lat);\n      nd.setLon(lon);\n      nd.updateState(OsmElement.STATE_MODIFIED);\n    }\n    recordImagery();\n  }\n catch (  StorageException e) {\n    e.printStackTrace();\n  }\n}\n", "public static SshPublicKeyFile create(SshPublicKey key, String comment,\n\t\t\tint format) throws IOException {\n\t\tswitch (format) {\n\t\tcase OPENSSH_FORMAT:\n\t\t\treturn new OpenSSHPublicKeyFile(key, comment);\n\t\tcase SECSH_FORMAT:\n\t\t\treturn new SECSHPublicKeyFile(key, comment);\n\t\tdefault:\n\t\t\tthrow new IOException(\"Invalid format type specified!\");\n\t\t}\n\t}", "public static <V> V runWithMock(EbeanServer mock, Callable<V> test) throws Exception {\n\n    return start(mock).run(test);\n  }", "public abstract List < Double > mandatoryTimes ( ) ;", "public int available() throws IOException {\n        int bytesLeft = fLength - fOffset;\n\n        if (bytesLeft == 0) {\n            // Again, the same thing as in `read()`. Do we need to throw\n            // an exception if fOffset > fEndOffset???\n            if (fOffset == fEndOffset) {\n                return -1;\n            }\n\n            /*\n             * In a manner of speaking, when this class isn't permitting more\n             * than one byte at a time to be read, it is \"blocking\".  The\n             * available() method should indicate how much can be read without\n             * blocking, so while we're in this mode, it should only indicate\n             * that bytes in its buffer are available; otherwise, the result of\n             * available() on the underlying InputStream is appropriate.\n             */\n            return fMayReadChunks ? fInputStream.available() : 0;\n        }\n\n        return bytesLeft;\n    }", "private ValueSubPanel createValuePanel(boolean addValueField){\n  ValueSubPanel valuePanel=new ValueSubPanel(addValueField);\n  outerPanel.add(valuePanel,ValueSubPanel.getPanelName());\n  return valuePanel;\n}\n", "\tpublic void connect() {\n\t\tif (connection != null)\n\t\t\tthrow new RuntimeException(\"Already connected\");\n\t\t\n\t\ttry {\n\t\t\tlogger.debug(\"Looking the class for driver \"+driver);\n\t\t\tClass.forName(driver);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tthrow new RuntimeException(\"Unable to load JDBC driver\",e);\n\t\t}\n\t\ttry {\n\t\t\tlogger.debug(\"connecting to URL \"+url);\n\t\t\tconnection = DriverManager.getConnection(url,user,pwd);\n\t\t\tstatement = connection.createStatement();\n\t\t\tlogger.debug(\"database connected.\");\n\t\t} catch (SQLException e) {\n\t\t\tthrow new RuntimeException(\"error while connecting to the database\",e);\n\t\t} \n\t}\n", "public static Set<Emoticon> parseEmoteSet(JSONObject setData,String streamRestriction,Emoticon.SubType subType){\n  try {\n    JSONArray emoticons=(JSONArray)setData.get(\"emoticons\");\n    String title=JSONUtil.getString(setData,\"title\");\n    return parseEmoticons(emoticons,streamRestriction,title,subType);\n  }\n catch (  ClassCastException|NullPointerException ex) {\n    LOGGER.warning(\"Error parsing FFZ emote set: \" + ex);\n  }\n  return new HashSet<>();\n}\n", "public BearerTokenResponse refreshToken(String refreshToken) throws OAuthException {\n        \n        logger.debug(\"Enter OAuth2PlatformClient::refreshToken\");\n        try {\n            HttpRequestClient client = new HttpRequestClient(oauth2Config.getProxyConfig());\n            Request request = new Request.RequestBuilder(MethodType.POST, oauth2Config.getIntuitBearerTokenEndpoint())\n                                        .requiresAuthentication(true)\n                                        .authString(getAuthHeader())\n                                        .postParams(getUrlParameters(\"refresh\", refreshToken, null))\n                                        .build();\n            Response response = client.makeRequest(request);\n\n            logger.debug(\"Response Code : \"+ response.getStatusCode());\n            if (response.getStatusCode() != 200) {\n                logger.debug(\"failed getting access token\");\n                throw new OAuthException(\"failed getting access token\", response.getStatusCode() + \"\");\n            }\n \n            ObjectReader reader = mapper.readerFor(BearerTokenResponse.class);\n            BearerTokenResponse bearerTokenResponse = reader.readValue(response.getContent());\n            return bearerTokenResponse;\n        }\n        catch (Exception ex) {\n            logger.error(\"Exception while calling refreshToken \", ex);\n            throw new OAuthException(ex.getMessage(), ex);\n        } \n    }", "public Date modifyObject(Context context,\n                             String pid,\n                             String state,\n                             String label,\n                             String ownerId,\n                             String logMessage,\n                             Date lastModifiedDate) throws ServerException {\n        try {\n            CreatorJournalEntry cje =\n                    new CreatorJournalEntry(METHOD_MODIFY_OBJECT, context);\n            cje.addArgument(ARGUMENT_NAME_PID, pid);\n            cje.addArgument(ARGUMENT_NAME_STATE, state);\n            cje.addArgument(ARGUMENT_NAME_LABEL, label);\n            cje.addArgument(ARGUMENT_NAME_OWNERID, ownerId);\n            cje.addArgument(ARGUMENT_NAME_LOG_MESSAGE, logMessage);\n            cje.addArgument(ARGUMENT_NAME_LAST_MODIFIED_DATE, lastModifiedDate);\n            return (Date) cje.invokeAndClose(delegate, writer);\n        } catch (JournalException e) {\n            throw new GeneralException(\"Problem creating the Journal\", e);\n        }\n    }", "public abstract void visitPlugins ( CefWebPluginInfoVisitor visitor ) ;", "    public void setY2(double[] value) throws RuntimeException {\n        if (value == null) {\n            throw new RuntimeException(\"null y2\");\n        }\n        List<CMLAtom> atomList = this.getAtoms(value.length, \"y2\");\n        int i = 0;\n        for (CMLAtom atom : atomList) {\n            atom.setY2(value[i++]);\n        }\n    }\n", "public CallResolver ( final ICallResolverTarget target , final JFrame parent ) { assert target != null ; this . parent = parent ; this . target = target ; debugger = target . getDebugger ( ) ; target . addListener ( internalTargetListener ) ; }", "public static boolean sendAdbCmd(InputStream is,OutputStream os,String cmd) throws IOException {\n  byte[] buf=new byte[ADB_RESPONSE_SIZE];\n  cmd=String.format(\"%04X\",cmd.length()) + cmd;\n  os.write(cmd.getBytes());\n  int read=is.read(buf);\n  if (read != ADB_RESPONSE_SIZE || !ADB_OK.equals(new String(buf))) {\n    Log.w(LOGTAG,\"adb cmd faild.\");\n    return false;\n  }\n  return true;\n}\n", "protected void populatePointsAndSegments(Route bestRoute,List newPoints,List segments){\n  Projection proj=getProjection();\n  Intersection origin=bestRoute.getOriginIntersection();\n  if (logger.isLoggable(Level.INFO))   logger.info(\"adding \" + bestRoute.roads.length + \" new roads.\");\n  Road road=null;\n  Intersection from=origin, to=null;\n  Set loopSet=new HashSet();\n  if (doLoopCheck)   loopSet.add(origin);\n  Set ptSet=new HashSet();\n  for (int i=0; i < bestRoute.roads.length; i++) {\n    road=bestRoute.roads[i];\n    if (!from.equals(road.getFirstIntersection()) && !from.equals(road.getSecondIntersection())) {\n      logger.severe(\"huh? \" + from + \" is not an intersection on road \"+ road);\n    }\n    Point pt=createPoint((Point)proj.forward(from.getLocation(),new Point()));\n    if (doLoopCheck) {\n      if (ptSet.contains(pt)) {\n        logger.warning(\"pt set has duplicate at \" + pt);\n      }\n      ptSet.add(pt);\n    }\n    newPoints.add(pt);\n    to=road.getOtherIntersection(from);\n    if (doLoopCheck) {\n      if (loopSet.contains(to)) {\n        logger.warning(\"road has a cycle at \" + to);\n      }\n      loopSet.add(to);\n    }\n    boolean reverse=from.equals(road.getSecondIntersection());\n    Segment path=getPathSegment(proj,road,reverse);\n    if (logger.isLoggable(Level.INFO))     logger.info(\"created path \" + path);\n    segments.add(path);\n    from=to;\n  }\n  if (to != null) {\n    Point pt=createPoint((Point)proj.forward(to.getLocation(),new Point()));\n    if (ptSet.contains(pt)) {\n      logger.warning(\"pt set has duplicate at \" + pt);\n    }\n    newPoints.add(pt);\n    if (logger.isLoggable(Level.INFO))     logger.info(\" now \" + newPoints.size() + \" points and \"+ segments.size()+ \" segments.\");\n  }\n}\n", "public final void mulInverse(Quaternion q1) {  \n\t\tQuaternion  tempQuat = q1.clone();\n\n\t\ttempQuat.inverse();\n\t\tthis.mul(tempQuat);\n\t}", "\tpublic Position (java.lang.Integer id) {\n\t\tsuper(id);\n\t}\n", "public void commit(boolean force) {\n        if (checkSession()) {\n            return;\n        }\n\n        if (log.isDebugEnabled()) {\n            ToStringBuilder tsb = new ToStringBuilder(String.format(\"Committing transactional %s@%x\",\n                    sqlSession.getClass().getSimpleName(),sqlSession.hashCode()));\n            tsb.append(\"force\", force);\n            log.debug(tsb.toString());\n        }\n\n        sqlSession.commit(force);\n    }", "    public void setAllComponentsEnabled(Color color, boolean enabled) {\n        setAllComponentsEnabled(enabled);\n        driverPropTable.setBackground(color);\n    }\n", "private void submitFailureSlaEvent(Dataset dataset, String eventName) {\n    try {\n      CompactionSlaEventHelper.getEventSubmitterBuilder(dataset, Optional.<Job> absent(), this.fs)\n      .eventSubmitter(this.eventSubmitter).eventName(eventName).build().submit();\n    } catch (Throwable t) {\n      LOG.warn(\"Failed to submit failure sla event:\" + t, t);\n    }\n  }", "protected void prepareImportTable() throws SQLException {\n  ResultSet columnList=null;\n  OneRowChange specOrc=new OneRowChange();\n  columnDefinitions=new ArrayList<ColumnSpec>();\n  try {\n    columnList=metadata.getColumns(importTables.getString(\"TABLE_CAT\"),importTables.getString(\"TABLE_SCHEM\"),importTables.getString(\"TABLE_NAME\"),null);\n    while (columnList.next()) {\n      ColumnSpec cSpec=specOrc.new ColumnSpec();\n      cSpec.setName(columnList.getString(\"COLUMN_NAME\"));\n      cSpec.setType(extractColumnType(columnList));\n      cSpec.setLength(columnList.getInt(\"COLUMN_SIZE\"));\n      columnDefinitions.add(cSpec);\n      logger.debug(\"Import column \" + columnList.getString(\"TABLE_SCHEM\") + \":\"+ columnList.getString(\"TABLE_NAME\")+ \":\"+ columnList.getString(\"COLUMN_NAME\")+ \":\"+ columnList.getString(\"DATA_TYPE\")+ \":\"+ columnList.getString(\"TYPE_NAME\")+ \":\"+ columnList.getInt(\"COLUMN_SIZE\"));\n    }\n  }\n  finally {\n    if (columnList != null) {\n      columnList.close();\n    }\n  }\n}\n", "public ElemTemplateElement appendChild(ElemTemplateElement newChild)\n  {\n\n    int type = ((ElemTemplateElement) newChild).getXSLToken();\n\n    switch (type)\n    {\n    case Constants.ELEMNAME_TEXTLITERALRESULT :\n      break;\n    default :\n      error(XSLTErrorResources.ER_CANNOT_ADD,\n            new Object[]{ newChild.getNodeName(),\n                          this.getNodeName() });  //\"Can not add \" +((ElemTemplateElement)newChild).m_elemName +\n\n    //\" to \" + this.m_elemName);\n    }\n\n    return super.appendChild(newChild);\n  }", "    public void mouseDragged(MouseEvent e) {\n        if (!edit) return;\n        mx = e.getX();\n        my = e.getY();\n        if (mVertex != null) {\n            mVertex.setPos(e.getX(),e.getY());\n            dragged = true;\n        }\n        repaint();\n    }\n", "public LogConnection connect ( boolean readonly ) throws ReplicatorException { LogConnection client = new LogConnection ( this , readonly ) ; if ( logger . isDebugEnabled ( ) ) logger . debug ( STR_ + client . toString ( ) ) ; connectionManager . store ( ", "public synchronized void connect ( BluetoothDevice device ) { Log . d ( TAG , STR_ + device ) ; EventBus . getDefault ( ) . post ( new PrintMsgEvent ( PrinterMsgType . MESSAGE_TOAST , STR_ ) ) ; if ( mState == STATE_CONNECTING ) { if ( mConnectThread != null ) { mConnectThread . cancel ( ) ; mConnectThread = null ; } } if ( mConnectedThread != null ) { mConnectedThread . cancel ( ) ; mConnectedThread = null ; } mConnectThread = new ConnectThread ( device ) ; mConnectThread . start ( ) ; setState ( STATE_CONNECTING ) ; }", "private void rdp_decoding_rd(char[][] g_data,int disks,int stripe_unit_size,int w,int x,int y){\n  int packet_size=stripe_unit_size / w;\n  int ccount, count, rcount;\n  char[] rdata, xdata, ydata, row_data, diag_data;\n  int g, gx, gy, coffset, i, j, k, c;\n  int row_disk, diag_disk;\n  rcount=stripe_unit_size;\n  rdata=g_data[0];\n  xdata=g_data[x];\n  ydata=g_data[y];\n  gx=(x >= 3 ? x - 3 : pnumRdp - 1);\n  gy=(y >= 3 ? y - 3 : pnumRdp - 1);\n  row_disk=x;\n  diag_disk=y;\n  row_data=xdata;\n  diag_data=ydata;\n  g=gx;\n  while (true) {\n    if (g == pnumRdp - 1) {\n      if (gx == (row_disk >= 3 ? row_disk - 3 : row_disk + pnumRdp - 3)) {\n        row_disk=y;\n        diag_disk=x;\n        row_data=ydata;\n        diag_data=xdata;\n        g=gy;\n        continue;\n      }\n else       break;\n    }\n else {\n      int row_index;\n      char[] cdata;\n      int diag_count;\n      int row_count;\n      diag_count=stripe_unit_size;\n      row_count=stripe_unit_size;\n      row_index=(g - diag_disk + pnumRdp + 2) % pnumRdp;\n      coffset=(row_index + diag_disk - 2 + pnumRdp) % pnumRdp * packet_size;\n      cdata=g_data[1];\n      for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && k < packet_size; i++, j++, k++) {\n        diag_data[i]=cdata[j];\n      }\n      for (c=2; c < (disks + 2); c++) {\n        if (c == diag_disk)         continue;\n        ccount=stripe_unit_size;\n        cdata=g_data[c];\n        coffset=(row_index + diag_disk - c + pnumRdp) % pnumRdp * packet_size;\n        for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && j < ccount && k < packet_size; i++, j++, k++) {\n          diag_data[i]^=cdata[j];\n        }\n      }\n      ccount=rcount;\n      cdata=rdata;\n      coffset=(row_index + diag_disk - 1 + pnumRdp) % pnumRdp * packet_size;\n      for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && j < ccount && k < packet_size; i++, j++, k++) {\n        diag_data[i]^=cdata[j];\n      }\n      coffset=row_index * packet_size;\n      for (c=2; c < (disks + 2); c++) {\n        if (c == row_disk)         continue;\n        ccount=stripe_unit_size;\n        cdata=g_data[c];\n        coffset=row_index * packet_size;\n        for (i=coffset, k=0; i < ccount && k < packet_size; i++, k++) {\n          row_data[i]^=cdata[i];\n        }\n      }\n      cdata=rdata;\n      coffset=row_index * packet_size;\n      count=row_count;\n      for (i=coffset, k=0; i < count && k < packet_size; i++, k++) {\n        row_data[i]^=cdata[i];\n      }\n      g=(row_index + row_disk - 2) % pnumRdp;\n    }\n  }\n}\n", "public void add(LongArrayList values) {\n        ensureCapacity(size + values.size);\n        for (int i=0; i<values.size; i++) {\n            this.add(values.elements[i]);\n        }\n    }", "public boolean isDownloadable(){\n  if (!isActive())   return false;\n  Timestamp guarantee=getGuaranteeDate();\n  if (guarantee == null)   return false;\n  guarantee=TimeUtil.getDay(guarantee);\n  Timestamp now=TimeUtil.getDay(System.currentTimeMillis());\n  if (!now.after(guarantee)) {\n    getProduct();\n    return m_product != null && m_product.hasDownloads();\n  }\n  return false;\n}\n", "public void unloadClass(String className) {\n\t\tif(logger.isLoggable(Level.FINEST)) {\n\t\t\tlogger.finest(\"Unloading class \" + className);\n\t\t}\n\n\t\tif(classes.containsKey(className)) {\n\t\t\tif(logger.isLoggable(Level.FINEST)) {\n\t\t\t\tlogger.finest(\"Removing loaded class \" + className);\n\t\t\t}\n\t\t\tclasses.remove(className);\n\t\t\ttry {\n\t\t\t\tclasspathResources.unload(formatClassName(className));\n\t\t\t} catch(ResourceNotFoundException e) {\n\t\t\t\tthrow new JclException(\"Something is very wrong!!!\"\n\t\t\t\t\t\t+ \"The locally loaded classes must be in synch with ClasspathResources\", e);\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tclasspathResources.unload(formatClassName(className));\n\t\t\t} catch(ResourceNotFoundException e) {\n\t\t\t\tthrow new JclException(\"Class could not be unloaded \"\n\t\t\t\t\t\t+ \"[Possible reason: Class belongs to the system]\", e);\n\t\t\t}\n\t\t}\n\t}", "public static Indication createDataIndication ( TransportAddress peerAddress , byte [ ] data , byte [ ] tranID ) { Indication dataIndication = new Indication ( ) ; try { dataIndication . setMessageType ( Message . DATA_INDICATION ) ; XorPeerAddressAttribu", "\tpublic int computeAllScores(double[] scores, int... t) {\n\t\tif ( isAllelic() )\n\t\t\treturn ultraFastComputeAllelicPearsonScores(scores, t);\n\t\telse if ( isGenotypic() )\n\t\t\treturn ultraFastComputeGenotypicPearsonScores(scores, t);\n\t\tScoreVisitor visitor = new ScoreVisitor(getScoreFunction(), scores);\n\t\treturn enumerateAllCompatibleTables(visitor, t);\n\t}\n", "public static boolean verifyLuhn (String key)\n    {\n        // If there is a non digit, or it is all zeros.\n        if (StringUtil.isBlank(key) || key.matches(\".*\\\\D.*\") ||\n            key.matches(\"^[0]+$\")) {\n            return false;\n        }\n\n        return (getLuhnRemainder(key) == 0);\n    }", "public void disable ( ) { }", "public static <T> T withClasspathOrFilePath(\n            String resourceClasspathOrFilePath,\n            TypeReference<T> typeReference) {\n        return withJsonString(JMResources.getStringWithClasspathOrFilePath(\n                resourceClasspathOrFilePath), typeReference);\n    }", "public int nrOfSubSections ( ) { return sections . size ( ) ; }", "public static LexerFrame groovyScriptFactory ( String scriptText ) { return new LexerFrame ( GroovyLexer . class , GroovyTokenTypes . class , new StringReader ( scriptText ) ) ; }", "  public void closeNode() {\n    name = (ASTIdent)children[0];\n    body = (ASTExpr)children[children.length - 1];\n\n    argv = new ASTIdent[children.length - 2]; // May be 0-size array\n    for(int i = 1; i < children.length - 1; i++)\n      argv[i - 1] = (ASTIdent)children[i];\n\n    children=null; // Throw away old reference\n  }\n", "public static byte[] getLMv2Response ( String domain, String user, String password, byte[] challenge, byte[] clientChallenge )\n            throws GeneralSecurityException {\n        byte[] response = new byte[24];\n        // The next 2-1/2 lines of this should be placed with nTOWFv1 in place of password\n        MessageDigest md4 = Crypto.getMD4();\n        md4.update(Strings.getUNIBytes(password));\n        MessageDigest hmac = Crypto.getHMACT64(md4.digest());\n        hmac.update(Strings.getUNIBytes(user.toUpperCase()));\n        hmac.update(Strings.getUNIBytes(domain.toUpperCase()));\n        hmac = Crypto.getHMACT64(hmac.digest());\n        hmac.update(challenge);\n        hmac.update(clientChallenge);\n        hmac.digest(response, 0, 16);\n        System.arraycopy(clientChallenge, 0, response, 16, 8);\n        return response;\n    }", "    private void paintPiecesForSelection(Piece[] pieceList, CuatroState state, Graphics g) {\n        int[] selection = state.getSelection();\n        if (selection!=null) {\n\t        for (int i = 0; i < selection.length; i++) {\n\t            if (selection[i] == CuatroBasic.TRUE) {\n\t                Point pos = getPositionOfSelection(i);\n\t                drawPart(pos.x, pos.y, pieceList[i], g);\n\t            }\n\t        }\n        }\n    }\n", "public void removePostInstantiateDelegate ( Closure delegate ) { getProxyBuilder ( ) . postInstantiateDelegates . remove ( delegate ) ; }", "public AttributeDataset parse(String name, InputStream stream) throws IOException, ParseException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(stream));\n\n        String line = reader.readLine();\n        if (line == null) {\n            throw new IOException(\"Empty data source.\");\n        }\n\n        String[] tokens = line.split(\"\\t\", -1);\n        int p = (tokens.length - 2) / 2;\n\n        line = reader.readLine();\n        if (line == null) {\n            throw new IOException(\"Premature end of file.\");\n        }\n\n        String[] samples = line.split(\"\\t\", -1);\n        if (samples.length != tokens.length-1) {\n            throw new IOException(\"Invalid sample description header.\");\n        }\n        \n        Attribute[] attributes = new Attribute[p];\n        for (int i = 0; i < p; i++) {\n            attributes[i] = new NumericAttribute(tokens[2*i+2], samples[2*i+1]);\n        }\n        \n        line = reader.readLine();\n        if (line == null) {\n            throw new IOException(\"Premature end of file.\");\n        }\n\n        int n = Integer.parseInt(line);\n        if (n <= 0) {\n            throw new IOException(\"Invalid number of rows: \" + n);            \n        }\n        \n        AttributeDataset data = new AttributeDataset(name, attributes);\n        \n        for (int i = 0; i < n; i++) {\n            line = reader.readLine();\n            if (line == null) {\n                throw new IOException(\"Premature end of file.\");\n            }\n            \n            tokens = line.split(\"\\t\", -1);\n            if (tokens.length != samples.length+1) {\n                throw new IOException(String.format(\"Invalid number of elements of line %d: %d\", i+4, tokens.length));\n            }\n\n            double[] x = new double[p];\n            for (int j = 0; j < p; j++) {\n                x[j] = Double.valueOf(tokens[2*j+2]);\n            }\n\n            AttributeDataset.Row datum = data.add(x);\n            datum.name = tokens[1];\n            datum.description = tokens[0];\n        }\n        \n        reader.close();\n        return data;\n    }", "public void showSelection () {\n\tcheckWidget ();\n  ((CList)handle).showSelection();\n}\n", "public void writeShort(short v) throws IOException {\n  dataOutput.writeShort(v);\n  offset+=2;\n}\n", "private List<byte[]> convertStringListToByteArray(List<String> valueList){\n  List<byte[]> byteArrayList=new ArrayList<>(valueList.size());\n  for (  String value : valueList) {\n    byteArrayList.add(value.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));\n  }\n  return byteArrayList;\n}\n", "private void createFieldAnnotation ( CAS cas , String nodeTag , int begin , int end ) { JCas jcas = null ; try { jcas = cas . getJCas ( ) ; } catch ( CASException e ) { throw new RuntimeException ( e ) ; } Field field = new Field ( jcas , begin , end ) ; ", "private Map processEvent ( MatchResult result ) { Map map = new HashMap ( ) ; for ( int i = NUM_ ; i < result . groupCount ( ) + NUM_ ; i ++ ) { Object key = matchingKeywords . get ( i - NUM_ ) ; Object value = result . group ( i ) ; map . put ( key , value ) ; } return map ; }", "public String nextSearch() {\n\t\tif(!triedExact) {\n\t\t\ttriedExact = true;\n\t\t\treturn remainder + EXACT_SUFFIX;\n\t\t}\n\t\tif(!triedFull) {\n\t\t\ttriedFull = true;\n\t\t\tif(remainder.endsWith(\")/\")) {\n\t\t\t\tchoppedPath = true;\n\t\t\t}\n\t\t\treturn remainder;\n\t\t}\n\t\tif(!choppedArgs) {\n\t\t\tchoppedArgs = true;\n\t\t\tint argStart = remainder.indexOf('?');\n\t\t\tif(argStart != -1) {\n\t\t\t\tremainder = remainder.substring(0,argStart);\n\t\t\t\treturn remainder;\n\t\t\t}\n\t\t}\n\t\t// we have already returned remainder as-is, so we have slightly\n\t\t// special handling here to make sure we continue to make progress:\n\t\t// (com,foo,www,)/         => (com,foo,www,\n\t\t// (com,foo,www,)/bar      => (com,foo,www,)/\n\t\t// (com,foo,www,)/bar/     => (com,foo,www,)/bar\n\t\t// (com,foo,www,)/bar/foo  => (com,foo,www,)/bar\n\t\t// (com,foo,www,)/bar/foo/ => (com,foo,www,)/bar/foo\n\t\tif(!choppedPath) {\n\t\t\tint lastSlash = remainder.lastIndexOf('/');\n\t\t\tif(lastSlash != -1) {\n\t\t\t\tif(lastSlash == (remainder.length()-1)) {\n\t\t\t\t\tif(remainder.endsWith(\")/\")) {\n\t\t\t\t\t\tString tmp = remainder;\n\t\t\t\t\t\tremainder = remainder.substring(0,lastSlash-1);\n\t\t\t\t\t\tchoppedPath = true;\n\t\t\t\t\t\treturn tmp;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tremainder = remainder.substring(0,lastSlash);\n\t\t\t\t\t\treturn remainder;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif((lastSlash > 0) && remainder.charAt(lastSlash-1) == ')') {\n\t\t\t\t\tString tmp = remainder.substring(0,lastSlash+1);\n\t\t\t\t\tremainder = remainder.substring(0,lastSlash-1);\n\t\t\t\t\treturn tmp;\n\t\t\t\t} else {\n\t\t\t\t\tremainder = remainder.substring(0,lastSlash);\n\t\t\t\t\treturn remainder;\n\t\t\t\t}\n\t\t\t}\n\t\t\tchoppedPath = true;\n\t\t}\n\t\tif(!choppedLogin) {\n\t\t\tchoppedLogin = true;\n\t\t\tint lastAt = remainder.lastIndexOf('@');\n\t\t\tif(lastAt != -1) {\n\t\t\t\tString tmp = remainder;\n\t\t\t\tremainder = remainder.substring(0,lastAt);\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t}\n\t\tif(!choppedPort) {\n\t\t\tchoppedPort = true;\n\t\t\tint lastColon = remainder.lastIndexOf(':');\n\t\t\tif(lastColon != -1) {\n\t\t\t\treturn remainder;\n\t\t\t}\n\t\t}\n\t\t// now just remove ','s\n\t\tint lastComma = remainder.lastIndexOf(',');\n\t\tif(lastComma == -1) {\n\t\t\treturn null;\n\t\t}\n\t\tremainder = remainder.substring(0,lastComma);\n\t\treturn remainder;\n\t}", "public void reset()\n   {\n      unusedEdges.addAll(usedEdges);\n      unusedNodes.addAll(usedNodes);\n\n      usedEdges.clear();\n      usedNodes.clear();\n   }", "\tpublic void expandAllFrom(TimeLine t) {\n\t\tSet alreadyExpanded = expandeds;\n\t\texpandeds = new HashSet();\n\t\tif (helpExpandAll(t)) {\n\t\t\texpandeds.removeAll(alreadyExpanded);\n\t\t\tif (!expandeds.isEmpty()) {\n\t\t\t\tresetLines();\n\t\t\t\tfireFocusChange(null);\n\t\t\t}\n\t\t}\n\t}\n", "public void updateEdgeDrawingState ( ) { if ( m_graph . getSettings ( ) . getEdgeSettings ( ) . getEdgeHidingMode ( ) == EdgeHidingMode . HIDE_ON_THRESHOLD ) { final boolean drawEdges = CEdgeDrawingFunctions . calcDrawSloppyEdges ( m_graph ) ; if ( m_areE", "    public void bindFromPhoneNumber(String number) {\n        mQueryHandler.startQuery(TOKEN_PHONE_LOOKUP, number,\n                Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI, Uri.encode(number)),\n                PHONE_LOOKUP_PROJECTION, null, null, null);\n    }\n", "public AccountAttribute asAccountAttribute ( Account account ) { if ( account == null ) { return null ; } AccountAttribute who = new AccountAttribute ( ) ; who . name = account . getFullName ( ) ; who . email = account . getPreferredEmail ( ) ; who . user", "static Object castArray(\n        Class<?> toType, Class<?> fromType, Object fromValue )\n        throws UtilEvalError\n    {\n        // Collection type cast from array\n        if ( Types.isJavaAssignable(Collection.class, toType) )\n            if ( Types.isJavaAssignable(List.class, toType) || Queue.class == toType ) {\n                if ( Types.isJavaAssignable(toType, ArrayList.class) )\n                    // List type is implemented as a mutable ArrayList\n                    return new ArrayList<>(Arrays.asList((Object[])\n                        Types.castObject(fromValue, Object.class, Types.CAST)));\n                else if ( Types.isJavaAssignable(toType, LinkedList.class) )\n                    // Queue type is implemented as a mutable LinkedList\n                    return new LinkedList<>(Arrays.asList((Object[])\n                        Types.castObject(fromValue, Object.class, Types.CAST)));\n            } else if ( Types.isJavaAssignable(toType, ArrayDeque.class) )\n                // Deque type is implemented as a mutable ArrayDeque\n                return new ArrayDeque<>(Arrays.asList((Object[])\n                    Types.castObject(fromValue, Object.class, Types.CAST)));\n            else if ( Types.isJavaAssignable(toType, LinkedHashSet.class) )\n                // Set type is implemented as a mutable LinkedHashSet\n                return new LinkedHashSet<>(Arrays.asList((Object[])\n                    Types.castObject(fromValue, Object.class, Types.CAST)));\n\n        Class<?> baseType = Types.arrayElementType(fromType);\n\n        // Map type gets converted to a mutable LinkedHashMap\n        if ( Types.isJavaAssignable(Map.class, toType) ) {\n            if ( Types.isJavaAssignable(Entry.class, baseType) )\n                return mapOfEntries((Entry[]) fromValue);\n            if ( Types.isJavaAssignable(toType, LinkedHashMap.class) ) {\n                int length = Array.getLength(fromValue);\n                Map<Object, Object> map = new LinkedHashMap<>(\n                        (int) Math.ceil((0.0 + length) / 2));\n                for ( int i = 0; i < length; i++ )\n                    map.put(Array.get(fromValue, i),\n                        ++i < length ? Array.get(fromValue, i) : null);\n                return map;\n            }\n        }\n\n        int[] dims = dimensions(fromValue);\n        int length = dims[0];\n        if (length == 0)\n            return Array.newInstance(toType, dims);\n        // if we have an Object[] try and find a more specific type\n        baseType = commonType(baseType, fromValue, () -> length);\n\n        // Entry type gets converted to LHS.MapEntry\n        if ( Types.isJavaAssignable(Entry.class, toType) ) {\n            if ( Types.isJavaAssignable(Entry.class, baseType) ) {\n                if ( MapEntry.class != baseType )\n                    return fromValue;\n                // Cast to Map.Entry so as not to confuse it with maps\n                Entry<?, ?>[] toArray = new Entry[Array.getLength(fromValue)];\n                copy(Entry.class, (Object) toArray, fromValue);\n                return toArray;\n            }\n            if ( length == 1 )\n                return new MapEntry(Array.get(fromValue, 0), null);\n            if ( length == 2 )\n                return new MapEntry(Array.get(fromValue, 0), Array.get(fromValue, 1));\n            int size = (int) Math.ceil((0.0 + length) / 2);\n            // Using Map.Entry array so as not to confuse it with maps\n            Entry<?, ?>[] toArray = new Entry[size];\n            for ( int i = 0, j = 0; i < length; i++ )\n                toArray[j++] = new MapEntry(Array.get(fromValue, i),\n                    ++i < length ? Array.get(fromValue, i) : null);\n            return toArray;\n        }\n\n        // cast array to element type of toType\n        toType = Types.arrayElementType(toType);\n        Object toArray = Array.newInstance(toType, dims);\n        BshArray.copy(toType, toArray, fromValue);\n        return toArray;\n    }", "protected void add(Number[] rowData){\n  Double[] doubleData=new Double[rowData.length];\n  int i=0;\n  for (  Number value : rowData) {\n    doubleData[i++]=value.doubleValue();\n  }\n  rows.add(doubleData);\n}\n", "long previousIndex ( ) ;", "public static void deleteDebugger ( final AbstractSQLProvider provider , final DebuggerTemplate debugger ) throws CouldntDeleteException { Preconditions . checkNotNull ( debugger , STR_ ) ; Preconditions . checkArgument ( debugger . inSameDatabase ( provi", "public void free()\n    {\n        try   {\n            if (m_tableRemote != null)\n                m_tableRemote.freeRemoteSession();\n        } catch (RemoteException ex) {\n            ex.printStackTrace();\n        }\n        m_tableRemote = null;\n        super.free();\n    }", "private boolean isTrue(String value) {\n\n        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(value)) {\n            if (Boolean.valueOf(value.toLowerCase()).booleanValue()\n                || value.toLowerCase().equals(\"on\")\n                || value.toLowerCase().equals(\"yes\")\n                || value.toLowerCase().equals(\"checked\")\n                || value.toLowerCase().equals(\"selected\")) {\n                return true;\n            }\n        }\n        return false;\n    }", "@AfterClass public static void teardownClass(){\n  System.clearProperty(\"http.proxyHost\");\n  System.clearProperty(\"http.proxyPort\");\n  System.clearProperty(\"http.nonProxyHosts\");\n  System.clearProperty(\"https.proxyHost\");\n  System.clearProperty(\"https.prox", "public void saveRecording(Context context,String newName){\n  Log.d(TAG,\">> saveRecording(\" + newName + \")\");\n  if (null == mRecordFile) {\n    Log.e(TAG,\"<< saveRecording: recording file is null!\");\n    return;\n  }\n  File parentFile=mRecordFile.getParentFile();\n  if (null == parentFile) {\n    Log.e(TAG,\"<< saveRecording: parent recording file is null!\");\n    return;\n  }\n  if (null != newName && !newName.equals(getRecordingName())) {\n    File sdFile=new File(parentFile.getPath(),newName + RECORDING_FILE_EXTENSION);\n    if (sdFile.exists()) {\n      Log.w(TAG,\"A file with the same new name will be deleted: \" + sdFile.getAbsolutePath());\n      if (!sdFile.delete()) {\n        Log.e(TAG,\"can't delete the file already exits\");\n      }\n    }\n    if (null != parentFile) {\n      if (!mRecordFile.renameTo(new File(parentFile.getPath(),newName + RECORDING_FILE_EXTENSION))) {\n        Log.e(TAG,\"can't rename file, use default name to save\");\n        newName=getRecordingName();\n      }\n      mRecordFile=new File(parentFile.getPath(),newName + RECORDING_FILE_EXTENSION);\n    }\n  }\n  mIsRecordingFileSaved=true;\n  addCurrentRecordingToDb(context);\n  Log.d(TAG,\"<< saveRecording(\" + newName + \")\");\n}\n", "\tpublic float getDurationMillisF(boolean doMarkInterval) {\n\n\t\tif (doMarkInterval == true) {\n\t\t\tthis.markInterval();\n\t\t}\n\n\t\treturn durationMillisF;\n\n\t}\n", "void init ( Properties properties ) throws SecurityException ;", "    public boolean isDecodingResponse() {\n        return isDecodeResponse();\n    }\n", "public static appfwfieldtype get(nitro_service service, String name) throws Exception{\n\t\tappfwfieldtype obj = new appfwfieldtype();\n\t\tobj.set_name(name);\n\t\tappfwfieldtype response = (appfwfieldtype) obj.get_resource(service);\n\t\treturn response;\n\t}", "public boolean runAfter ( List tasks , int size ) { for ( int i = size ; -- i >= NUM_ ; ) { Object obj = tasks . get ( i ) ; if ( obj instanceof SendEventsTask && reg . listener . equals ( ( ( SendEventsTask ) obj ) . reg . listener ) ) return BOOL_ ; } return BOOL_ ; }", "private void readSMS(String namePattern){\n  namePattern=mAliasHelper.convertAliasToNumber(namePattern);\n  ArrayList<Contact> contacts=ContactsManager.getMatchingContacts(sContext,namePattern);\n  if (contacts.size() > 0) {\n    XmppMsg noSms=new XmppMsg();\n    boolean hasMatch=false;\n    for (    Contact contact : contacts) {\n      ArrayList<Sms> smsList=mSmsManager.getSms(ContactsManager.getPhones(sContext,contact.ids));\n      Collections.sort(smsList);\n      if (smsList.size() > 0) {\n        hasMatch=true;\n        sendSmsListOnXmpp(smsList,contact.name,smsList.size() < sSettingsMgr.smsNumber ? getString(R.string.chat_only_got_n_sms,smsList.size()) : null);\n      }\n else {\n        noSms.appendBold(contact.name);\n        noSms.append(\" - \");\n        noSms.appendLine(getString(R.string.chat_no_sms));\n      }\n    }\n    if (!hasMatch) {\n      send(noSms);\n    }\n  }\n else {\n    send(R.string.chat_no_match_for,namePattern);\n  }\n}\n", "public PipelineFactory ( Context context ) { this ( context , BasicPipeline . class ) ; }", "public static void configureBugCollection ( IFindBugsEngine findBugs ) { BugCollection bugs = findBugs . getBugReporter ( ) . getBugCollection ( ) ; if ( bugs != null ) { bugs . setReleaseName ( findBugs . getReleaseName ( ) ) ; Project project = findBugs . getProject ( ) ; String projectName = project . getProjectName ( ) ; if ( projectName == null ) { projectName = findBugs . getProjectName ( ) ; project . setProjectName ( projectName ) ; } long timestamp = project . getTimestamp ( ) ; if ( FindBugs . validTimestamp ( timestamp ) ) { bugs . setTimestamp ( timestamp ) ; bugs . getProjectStats ( ) . setTimestamp ( timestamp ) ; } } }", "public final void populateProperties(InternalSession oldSession,InternalSession newSession,boolean forceAuth){\n  Enumeration<String> allProperties=oldSession.getPropertyNames();\n  while (allProperties.hasMoreElements()) {\n    String key=allProperties.nextElement();\n    String value=(String)oldSession.getProperty(key);\n    if (shouldCopy(key)) {\n      if (!forceAuth) {\n        updateProperty(newSession,key,value);\n      }\n else {\n        updateProperty(oldSession,key,value);\n      }\n    }\n  }\n}\n", "public static GroupMatcher < TriggerKey > triggerGroupEquals ( String compareTo ) { return GroupMatcher . groupEquals ( compareTo ) ; }", "\tprivate CalendarManager getMockCalendarManager() {\n\t\treturn new CalendarManager() {\n\t\t\tpublic void storeCalendar(Calendar calendar) throws WebicalException { /* NOTHING TO DO */ }\n\t\t\tpublic void removeCalendar(Calendar calendar) throws WebicalException { /* NOTHING TO DO */ }\n\t\t\tpublic List<Calendar> getCalendars(User user) throws WebicalException { return new ArrayList<Calendar>(); }\n\t\t\tpublic Set<String> getAvailableCalendarTypes() throws WebicalException { return null; }\n\t\t\tpublic Calendar getCalendarForEvent(Event event) { return null; }\n\t\t\tpublic void storeCalendar(Calendar calendar, List<Event> events) throws WebicalException { /* NOTHING TO DO */\t}\n\t\t\tpublic Calendar getCalendarById(String id) throws WebicalException { return null; }\n\t\t};\n\t}\n", "    public boolean hasRoles(String usecaseId) {\n        return this.usecaseToRoles.containsKey(usecaseId);\n    }\n", "@Override\n    public UntagProjectResult untagProject(UntagProjectRequest request) {\n        request = beforeClientExecution(request);\n        return executeUntagProject(request);\n    }", "\tpublic void setScrollArea(ScrollArea scrollArea) throws GUIException {\n\t\tm_scrollArea.setFocusHandler(null);\n\t\tm_scrollArea.setParent(null);\n\t\tm_scrollArea = scrollArea;\n\t\tm_scrollArea.setFocusHandler(m_focusHandler);\n\t\tm_scrollArea.setContent(m_listBox);\n\t\t//m_scrollArea.setParent(this);\n\t\tadjustHeight();\n\t}\n", "protected Boolean _hasSideEffects(XFeatureCall expression, ISideEffectContext context) {\n\t\treturn internalHasOperationSideEffects(expression, context, false);\n\t}", "public UUID subjectIdPerCall(@Nullable UUID subjId){\n  if (subjId != null)   return subjId;\n  return subjectIdPerCall(subjId,operationContextPerCall());\n}\n", "private String safeDoubleToString(Double number){\n  if (number.isNaN()) {\n    return \"NULL\";\n  }\n  String orig=number.toString();\n  int pos=orig.indexOf('E');\n  if ((pos == -1) || (orig.charAt(pos + 1) == '-')) {\n    return orig;\n  }\n else {\n    StringBuffer buff=new StringBuffer(orig);\n    buff.insert(pos + 1,'+');\n    return new String(buff);\n  }\n}\n", "\tpublic boolean remove(Object o) {\n\t\tif(o instanceof OrientacoesConcluidasParaDoutorado){\n\t\t\treturn this.remove((OrientacoesConcluidasParaDoutorado) o);\n\t\t}\n\t\treturn false;\n\t}\n", "private List<HBaseCell> getRelationCell(EntityMetadata m, Object rowId, List<RelationHolder> relations)\n            throws IOException\n    {\n        List<HBaseCell> relationCells = new ArrayList<HBaseCell>();\n        for (RelationHolder relation : relations)\n        {\n            HBaseCell hBaseCell = new HBaseCell(m.getTableName(), relation.getRelationName(),\n                    relation.getRelationValue());\n            relationCells.add(hBaseCell);\n        }\n        return relationCells;\n    }", "public boolean isComplete(){\n  return !(Double.isNaN(getXmin()) || Double.isNaN(getXmax()));\n}\n", "  public void removeItem(MenuItem item) {\n    // Unselect if the item is currently selected\n    if (selectedItem == item) {\n      selectItem(null);\n    }\n\n    if (removeItemElement(item)) {\n      setItemColSpan(item, 1);\n      items.remove(item);\n      item.setParentMenu(null);\n    }\n  }\n", "< E extends TaggedLogAPIEntity > ModifyResult < I > delete ( List < E > entities , EntityDefinition entityDefinition ) throws IOException ;", "public void mouseReleased(MouseEvent e){\n  if (e.isPopupTrigger()) {\n    handlePopup(e);\n    e.consume();\n  }\n}\n", "public synchronized void addPropertyChangeListener(PropertyChangeListener l){\n  m_propertyChangeListeners.addPropertyChangeListener(l);\n}\n", "public float min ( ) { if ( size ( ) == NUM_ ) { throw new IllegalStateException ( STR_ ) ; } float min = _data [ _pos - NUM_ ] ; for ( int i = _pos - NUM_ ; i -- > NUM_ ; ) { min = Math . min ( min , _data [ _pos ] ) ; } return min ; }", "public void setBackground(Color color) {\r\n\t\tpredraw();\r\n\t\tGL.glClearColor(color.r, color.g, color.b, color.a);\r\n\t\tpostdraw();\r\n\t}", "    public Event getEvent(String name) {\n        List objects = getHibernateTemplate().findByNamedQueryAndNamedParam(\"event.getByName\",\"name\",name);\n        if(objects==null || objects.size()==0)throw new ARISException(\"Event with name '\" + name + \"' does not exist\");\n        return (Event)objects.get(0);\n    }\n", "public static int scalarProduct(final long[] x,final long[] y){\n  int sum=0;\n  for (int i=y.length; i-- != 0; ) {\n    final long high=x[i] & 0xAAAAAAAAAAAAAAAAL;\n    final long low=x[i] & 0x5555555555555555L;\n    final long highShift=high >>> 1;\n    final long t=(y[i] ^ (high | highShift)) & (x[i] | highShift | low << 1);\n    sum+=Long.bitCount(t & 0xAAAAAAAAAAAAAAAAL) * 2 + Long.bitCount(t & 0x5555555555555555L);\n  }\n  return sum;\n}\n", "public void visitJumpInsn ( int opcode , Label label ) { if ( mv != null ) { mv . visitJumpInsn ( opcode , label ) ; } }", "public void init ( ) throws ServletException { }", "public void resendEmail(String resourceGroupName, String certificateOrderName) {\n        resendEmailWithServiceResponseAsync(resourceGroupName, certificateOrderName).toBlocking().single().body();\n    }", "private boolean requestContainsSensitiveInfo ( ) { boolean sensitive = BOOL_ ; for ( Map . Entry < String , String > header : conf . headers . entrySet ( ) ) { if ( header . getKey ( ) . contains ( VAULT_EL_PREFIX ) || header . getValue ( ) . contains ( VAULT_EL_PREFIX ) ) { sensitive = BOOL_ ; break ; } } if ( conf . requestBody != null && conf . requestBody . contains ( VAULT_EL_PREFIX ) ) { sensitive = BOOL_ ; } return sensitive ; }", "public Chatlog(String link,String user,Date creation){\n  this.link=link;\n  this.user=user;\n  this.creation=creation;\n}\n", "static Entity incrementVersion(Entity nativeEntity, PropertyMetadata versionMetadata) {\n    String versionPropertyName = versionMetadata.getMappedName();\n    long version = nativeEntity.getLong(versionPropertyName);\n    return Entity.newBuilder(nativeEntity).set(versionPropertyName, ++version).build();\n  }", "public void init ( IJSpace proxy , String workerName , String arg ) throws Exception ;", "protected boolean isImageWrapCropBounds ( float [ ] imageCorners ) { mTempMatrix . reset ( ) ; mTempMatrix . setRotate ( - getCurrentAngle ( ) ) ; float [ ] unrotatedImageCorners = Arrays . copyOf ( imageCorners , imageCorners . length ) ; mTempMatrix . m", "public void handleUnderXtnUpdate ( Context context , ServerTransaction xtn , IEntryHolder eh , boolean isCommitting , XtnData pXtn ) { IEntryCacheInfo pEntry = getPEntryByUid ( eh . getUID ( ) ) ; if ( pEntry == null ) { throw new RuntimeException ( STR_ + eh . getUID ( ) ) ; } if ( isCommitting ) insertToRecentUpdatesIfNeeded ( eh , requiresEvictionReplicationProtection ( ) ? Long . MAX_VALUE : NUM_ , context . getCommittingXtn ( ) ) ; TypeData typeData = _typeDataMap . get ( eh . getServerTypeDesc ( ) ) ; consolidateWithShadowEntry ( typeData , pEntry , ! isCommitting , BOOL_ ) ; }", "public boolean isPerLogicalSubjectLockObject ( boolean isEvictable ) { if ( isEvictable ) throw new RuntimeException ( STR_ ) ; return BOOL_ ; }", "public boolean useRecentDeletes ( ) { return isEvictableCachePolicy ( ) && ! _isMemorySA && ( ! _readOnlySA || _engine . hasMirror ( ) ) ; }", "public void DELETE(String partialUrl, Map<String, Object> headers, \n        List<String> queryParams)\n    {\n        URI uri = buildUri(partialUrl);\n        executeDeleteRequest(uri, headers, queryParams);\n    }", "public void addPage(LexiconPage page){\n  pages.add(page);\n}", "    public  boolean nullPlusNonNullIsNull() throws SQLException {\n        return true;//I didn't check (rrokytskyy: checked, true for FB 1.0 RC2)\n    }\n", "private void pop() throws SAXException {\n        if (current == null) {\n            throw new IllegalStateException(\"Bug!\");\n        }\n        current.end();\n        if (stack.isEmpty()) {\n            current = null;\n        } else {\n            current = stack.removeLast();\n        }\n    }", "private void sort(FastQueue<BrightFeature> input ,\n\t\t\t\t\t  FastQueue<Helper> pos , FastQueue<Helper> neg ) {\n\t\tpos.reset();\n\t\tneg.reset();\n\n\t\tfor( int i = 0; i < input.size; i++ ) {\n\t\t\tBrightFeature f = input.get(i);\n\t\t\tif( f.white) {\n\t\t\t\tpos.grow().wrap(f,i);\n\t\t\t} else {\n\t\t\t\tneg.grow().wrap(f,i);\n\t\t\t}\n\t\t}\n\t}", "public boolean isCompositeService ( ) { boolean isComposite = BOOL_ ; if ( this . listDataServiceDefinition != null && this . listDataServiceDefinition . size ( ) > NUM_ ) isComposite = BOOL_ ; else isComposite = BOOL_ ; return isComposite ; }", "private ExchangeRateManager ( ) { if ( System . getProperty ( STR_ ) == null ) throw new UnsupportedOperationException ( STR_ ) ; addKnownRates ( ) ; }", "public static String decodeUtf8UriParam(final String value){\n  if (value != null) {\n    if (value.indexOf('%') == -1) {\n      return value;\n    }\n    final String uri=value.replace(\"+\",\"%2B\");\n    try {\n      return URLDecoder.decode(uri,\"UTF-8\");\n    }\n catch (    UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    }\n  }\n  return null;\n}\n", "    public Object getChild(Object parent, int index) {\n\tNode node = (Node) parent;\n\tNodeList list = node.getChildNodes();\n\treturn list.item(index);\n    }\n", "private final boolean validateClientPacket(ByteBuffer buf){\n  return buf.getShort(0) == ~buf.getShort(3) && buf.get(2) == staticClientPacketCode;\n}\n", "    public void addFacility(ModuleEntry entry) {\n        mathModules.put(entry.getSymbol(), entry);\n        progModules.put(entry.getSymbol(), entry);\n    }\n", "public SerDeInfo withParameters(java.util.Map<String, String> parameters) {\n        setParameters(parameters);\n        return this;\n    }", "void gatherMessageData(int maxPos) throws IOException {\r\n        try {\r\n            while(this.bufferPosition < maxPos) {\r\n                int possible = maxPos - this.bufferPosition;\r\n                int want = msgData.length - msgDataPosition;\r\n\r\n                // Grab all we can, until we get to the CR/LF\r\n                if (want > 0 && want <= possible) {\r\n                    System.arraycopy(this.buffer, this.bufferPosition, this.msgData, this.msgDataPosition, want);\r\n                    msgDataPosition += want;\r\n                    this.bufferPosition += want;\r\n                    continue;\r\n                } else if (want > 0) {\r\n                    System.arraycopy(this.buffer, this.bufferPosition, this.msgData, this.msgDataPosition, possible);\r\n                    msgDataPosition += possible;\r\n                    this.bufferPosition += possible;\r\n                    continue;\r\n                }\r\n\r\n                byte b = this.buffer[this.bufferPosition];\r\n                this.bufferPosition++;\r\n\r\n                if (gotCR) {\r\n                    if (b == NatsConnection.LF) {\r\n                        incoming.setData(msgData);\r\n                        this.connection.deliverMessage(incoming);\r\n                        msgData = null;\r\n                        msgDataPosition = 0;\r\n                        incoming = null;\r\n                        gotCR = false;\r\n                        this.op = UNKNOWN_OP;\r\n                        this.mode = Mode.GATHER_OP;\r\n                        break;\r\n                    } else {\r\n                        throw new IllegalStateException(\"Bad socket data, no LF after CR\");\r\n                    }\r\n                } else if (b == NatsConnection.CR) {\r\n                    gotCR = true;\r\n                } else {\r\n                    throw new IllegalStateException(\"Bad socket data, no CRLF after data\");\r\n                }\r\n            }\r\n        } catch (IllegalStateException | NullPointerException ex) {\r\n            this.encounteredProtocolError(ex);\r\n        }\r\n    }", "\tpublic int getTimeStep(Date date) {\n\t\tlong time = date.getTime();\n\t\tDate[] dates = ((CoordinateAxis1DTime) axis).getTimeDates();\n\t\tfor (int i = 0; i < dates.length; i++) {\n\t\t\tDate axisDate = dates[i];\n\t\t\tif (axisDate.getTime() == time) return i;\n\t\t}\n\t\treturn ExtendAxes.TIME_STEP_NOT_FOUND;\n\t}\n", "@Override\n    public void visit(final Person person) {\n        for (final GedObject gob : person.getAttributes()) {\n            gob.accept(this);\n        }\n        final PersonNavigator navigator = new PersonNavigator(person);\n        for (final Family family : navigator.getFamilies()) {\n            family.accept(this);\n        }\n    }", "private void sendNotification ( String message ) { Intent intent = new Intent ( this , ChatActivity . class ) ; intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP ) ; PendingIntent pendingIntent = PendingIntent . getActivity ( this , NUM_ , intent , PendingIntent . FLAG_ONE_SHOT ) ; Uri defaultSoundUri = RingtoneManager . getDefaultUri ( RingtoneManager . TYPE_NOTIFICATION ) ; NotificationCompat . Builder notificationBuilder = new NotificationCompat . Builder ( this ) . setSmallIcon ( R . drawable . send ) . setContentTitle ( STR_ ) . setContentText ( message ) . setAutoCancel ( BOOL_ ) . setSound ( defaultSoundUri ) . setContentIntent ( pendingIntent ) ; NotificationManager notificationManager = ( NotificationManager ) getSystemService ( Context . NOTIFICATION_SERVICE ) ; notificationManager . notify ( NUM_ , notificationBuilder . build ( ) ) ; }", "public static String newName(Mail mail) throws MessagingException {\n  String oldName=mail.getName();\n  if (oldName.length() > 76) {\n    int count=0;\n    int index=0;\n    while ((index=oldName.indexOf('!',index + 1)) >= 0) {\n      count++;\n    }\n    if (count > 7) {\n      throw new MessagingException(\"Unable to create a new message name: too long.\" + \" Possible loop in config.xml.\");\n    }\n else {\n      oldName=oldName.substring(0,76);\n    }\n  }\n  return oldName + \"-!\" + random.nextInt(1048576);\n}\n", "\tpublic void appendNode(Point pt, CSMoveStyle move, int waitTime) {\n\t\tCSNode last = nodes.get(nodes.size()-1);\n\t\t// Getting the new time (depending on the movestyle of\n\t\t// the previous node) :\n\t\tdouble newTime =\n\t\t\tlast.getTime()+last.getWaitTime()+GUIParameters.scale*pt.distance(last)/CSConstants.getSpeed(last.getMoveStyle()); \n\n\t\t// Lines :\n\t\t// 1st - point\n\t\t// 2nd - new time\n\t\t// 3rd - wait time\n\t\t// 4rd - move style\n\t\tnodes.add(new CSNode(pt.x, pt.y,\n\t\t\t\tnewTime,\n\t\t\t\twaitTime,\n\t\t\t\tmove));\n\t\tif (nodes.size()>1)\n\t\t\tupdateNodes(nodes.size()-2);\n\t}\n", "public static String generateSecureRandomId() {\n        val generator = getNativeInstance();\n        val charMappings = new char[]{\n            'a', 'b', 'c', 'd', 'e', 'f', 'g',\n            'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n            'p'};\n\n        val bytes = new byte[SECURE_ID_BYTES_LENGTH];\n        generator.nextBytes(bytes);\n\n        val chars = new char[SECURE_ID_CHARS_LENGTH];\n        IntStream.range(0, bytes.length).forEach(i -> {\n            val left = bytes[i] >> SECURE_ID_SHIFT_LENGTH & HEX_HIGH_BITS_BITWISE_FLAG;\n            val right = bytes[i] & HEX_HIGH_BITS_BITWISE_FLAG;\n            chars[i * 2] = charMappings[left];\n            chars[i * 2 + 1] = charMappings[right];\n        });\n        return String.valueOf(chars);\n    }", "    public boolean hasPendingTransfers() {\n        return transmissionManager.hasPendingTransfers();\n    }\n", "public static int convert ( final ExpressionType type ) { switch ( type ) { case EXPRESSION_LIST : return IOperandTree . NODE_TYPE_SYMBOL_ID ; case IMMEDIATE_FLOAT : return IOperandTree . NODE_TYPE_IMMEDIATE_FLOAT_ID ; case IMMEDIATE_INTEGER : return IOpe", "public void show ( ) { show ( sDefaultTimeout ) ; }", "void changedDisplayStyle ( COperandTreeNode operandTreeNode , OperandDisplayStyle style ) ;", "public void addAction ( int icon , CharSequence title , Action . OnActionListener listener , ComponentName activity , ComponentName service , String broadcast , Bundle extra ) { addAction ( new Action ( icon , title , listener , activity , service , broadcast , extra ) ) ; }", "private static String _join(String[] tokens, boolean excludeLast)\n    {\n        StringBuilder join = new StringBuilder();\n        int length = tokens.length - (excludeLast ? 1 : 0);\n        for (int i = 0; i < length; i++)\n        {\n            join.append(tokens[i]).append(\"/\");\n        }\n\n        return join.toString();\n    }", "private UnManagedVolume createUnManagedVolume(String unManagedVolumeNativeGuid,LogicalUnit logicalUnit,StorageSystem system,StoragePool pool,DbClient dbClient){\n  UnManagedVolume newUnManagedVolume=new UnManagedVolume();\n  newUnManagedVolume.setId(URIUtil.createId(UnManagedVolume.class));\n  newUnManagedVolume.setNativeGuid(unManagedVolumeNativeGuid);\n  newUnManagedVolume.setStorageSystemUri(system.getId());\n  newUnManagedVolume.setStoragePoolUri(pool.getId());\n  updateUnManagedVolumeInfo(logicalUnit,system,pool,newUnManagedVolume,dbClient);\n  return newUnManagedVolume;\n}\n", "    public void terminate() {\n        /* Stop all FaultDetectionHandler instances */\n        ArrayList list = Collections.list(fdhTable.elements());\n        for(Iterator it=list.iterator(); it.hasNext();) {\n            FaultDetectionHandler fdh = (FaultDetectionHandler)it.next();\n            fdh.terminate();\n            ServiceFaultListener sfl = (ServiceFaultListener)fdhTable.remove(fdh);\n            if(sfl!=null)\n                sfl.terminate();\n        }\n        /* If this utility created a ServiceDiscoveryManager terminate it */\n        if(sdm!=null) {\n            try {\n                sdm.terminate();\n            } catch (Throwable t) {\n                logger.log(Level.WARNING, \"Terminating SDM\", t);\n            }            \n        } \n        super.terminate();\n    }\n", "public static PeriodType minutes() {\n        PeriodType type = cMinutes;\n        if (type == null) {\n            type = new PeriodType(\n                \"Minutes\",\n                new DurationFieldType[] { DurationFieldType.minutes() },\n                new int[] { -1, -1, -1, -1, -1, 0, -1, -1, }\n            );\n            cMinutes = type;\n        }\n        return type;\n    }", "public static SourceLineAnnotation forEntireMethod(@DottedClassName String className, String sourceFile, LineNumberTable lineNumberTable,\n            int codeSize) {\n        LineNumber[] table = lineNumberTable.getLineNumberTable();\n        if (table != null && table.length > 0) {\n            LineNumber first = table[0];\n            LineNumber last = table[table.length - 1];\n            return new SourceLineAnnotation(className, sourceFile, first.getLineNumber(), last.getLineNumber(), 0, codeSize - 1);\n        } else {\n            return createUnknown(className, sourceFile, 0, codeSize - 1);\n        }\n    }", "private void addResult(ValidationResult result) {\n\t\tif (result == null || result.count() == 0) {\n\t\t\treturn;\n\t\t}\n\t\tthis.results.add(result);\n\t}", "public static Type getLastTypeGenericArgument(Type type)\n    {\n        if (type instanceof ParameterizedType) {\n            ParameterizedType pType = (ParameterizedType) type;\n            Type[] types = pType.getActualTypeArguments();\n            if (types.length > 0) {\n                return types[types.length - 1];\n            }\n        }\n\n        return null;\n    }", "private void checkProtocolAlreadyExists(Set<String> protocols,String protocolType){\n  if (!protocols.contains(protocolType)) {\n    protocols.add(protocolType);\n  }\n}\n", "private boolean isChildOfCheck(final String bestSuperFamModelId,final String parentFamModelId){\n  if (bestSuperFamModelId != null && parentFamModelId != null) {\n    if (bestSuperFamModelId.equals(parentFamModelId)) {\n      return true;\n    }\n  }\n  return ", "public void sortFromTo(int from,int to){\n  final int widthThreshold=10000;\n  if (size == 0)   return;\n  checkRangeFromTo(from,to,size);\n  int min=elements[from];\n  int max=elements[from];\n  int[] theElements=elements;\n  for (int i=from + 1; i <= to; ) {\n    int elem=theElements[i++];\n    if (elem > max)     max=elem;\n else     if (elem < min)     min=elem;\n  }\n  double N=(double)to - (double)from + 1.0;\n  double quickSortEstimate=N * Math.log(N) / 0.6931471805599453;\n  double width=(double)max - (double)min + 1.0;\n  double countSortEstimate=Math.max(width,N);\n  if (width < widthThreshold && countSortEstimate < quickSortEstimate) {\n    countSortFromTo(from,to,min,max);\n  }\n else {\n    quickSortFromTo(from,to);\n  }\n}\n", "public int getSentenceId() {\n    if (Sentence_Type.featOkTst && ((Sentence_Type)jcasType).casFeat_sentenceId == null)\n      jcasType.jcas.throwFeatMissing(\"sentenceId\", \"de.unihd.dbs.uima.types.heideltime.Sentence\");\n    return jcasType.ll_cas.ll_getIntValue(addr, ((Sentence_Type)jcasType).casFeatCode_sentenceId);}", "public void invDctNxN(double[][] dcts,int[][] pixels){\n  int u=0;\n  int v=0;\n  double two_over_sqrtncolsnrows=2.0 / Math.sqrt((double)this.N * this.M);\n  double[][] tmp=null;\n  tmp=new double[this.N][this.N];\n  for (u=0; u < this.N; u++) {\n    for (v=0; v < this.M; v++) {\n      tmp[u][v]=dcts[u][v];\n    }\n  }\n  for (u=0; u <= this.M - 1; u++) {\n    invFctNoScale(tmp[u]);\n  }\n  for (v=0; v <= this.N - 1; v++) {\n    for (u=0; u <= this.M - 1; u++) {\n      this.nxnTmp[u]=tmp[u][v];\n    }\n    invFctNoScale(this.nxnTmp);\n    for (u=0; u <= this.M - 1; u++) {\n      tmp[u][v]=this.nxnTmp[u] * two_over_sqrtncolsnrows;\n    }\n  }\n  for (u=0; u < this.N; u++) {\n    for (v=0; v < this.M; v++) {\n      pixels[u][v]=ImageUtil.pixelRange((int)(tmp[u][v] + 128.5));\n    }\n  }\n  tmp=null;\n}\n", "public ServiceFuture<UserInner> updateAsync(String resourceGroupName, String labAccountName, String labName, String userName, UserFragment user, final ServiceCallback<UserInner> serviceCallback) {\n        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, labAccountName, labName, userName, user), serviceCallback);\n    }", "public CModulesCheckBoxPanel ( final CModulesTableModel modulesTableModel ) { super ( new BorderLayout ( ) ) ; final JCheckBox checkBox = new JCheckBox ( STR_ ) ; checkBox . addItemListener ( new InternalCheckboxListener ( ) ) ; add ( checkBox ) ; m_modul", "public static Value parseValue(String nTriplesValue,ValueFactory valueFactory) throws IllegalArgumentException {\n  if (nTriplesValue.startsWith(\"<\")) {\n    return parseURI(nTriplesValue,valueFactory);\n  }\n else   if (nTriplesValue.startsWith(\"_:\")) {\n    return parseBNode(nTriplesValue,valueFactory);\n  }\n else   if (nTriplesValue.startsWith(\"\\\"\")) {\n    return parseLiteral(nTriplesValue,valueFactory);\n  }\n else {\n    throw new IllegalArgumentException(\"Not a legal N-Triples value: \" + nTriplesValue);\n  }\n}\n", "private CmsSpellcheckingRequest parseJsonRequest(JSONObject jsonRequest) {\n\n        final String id = jsonRequest.optString(JSON_ID);\n\n        final JSONObject params = jsonRequest.optJSONObject(JSON_PARAMS);\n\n        if (null == params) {\n            LOG", "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(2);\n  newVector.addElement(new Option(\"\\tIf set, filter is run in debug mode and\\n\" + \"\\tmay output additional info to the console\",\"output-debug-info\",0,\"-output-debug-info\"));\n  newVector.addElement(new Option(\"\\tIf set, filter capabilities are not checked before filter is built\\n\" + \"\\t(use with caution).\",\"-do-not-check-capabilities\",0,\"-do-not-check-capabilities\"));\n  return newVector.elements();\n}\n", "public int skipWhitespaces(){\n  int skipped=0;\n  while (pos < length && source.charAt(pos) == ' ') {\n    skipped++;\n    pos++;\n  }\n  return skipped;\n}\n", "public PlaPointInt round_to_grid(int p_horizontal_grid,int p_vertical_grid){\n  double rounded_x;\n  if (p_horizontal_grid > 0) {\n    rounded_x=Math.rint(v_x / p_horizontal_grid) * p_horizontal_grid;\n  }\n else {\n    rounded_x=v_x;\n  }\n  double rounded_y;\n  if (p_vertical_grid > 0) {\n    rounded_y=Math.rint(v_y / p_vertical_grid) * p_vertical_grid;\n  }\n else {\n    rounded_y=v_y;\n  }\n  return new PlaPointInt(rounded_x,rounded_y);\n}\n", "  public boolean dumpAfter() {\n    return ir.options.dumpAfter;\n  }\n", "public DoubleStreamEx prepend(DoubleStream other){\n  return new DoubleStreamEx(DoubleStream.concat(other,stream()),context.combine(other));\n}\n", "public int getWidth () {\n\tcheckWidget ();\n\treturn (int) OS.FrameworkElement_ActualWidth (topHandle ());\n}", "public static final Color blend (Color c1, Color c2, float firstperc)\n    {\n        float p2 = 1.0f - firstperc;\n        return new Color((int) (c1.getRed() * firstperc + c2.getRed() * p2),\n                 (int) (c1.getGreen() * firstperc + c2.getGreen() * p2),\n                 (int) (c1.getBlue() * firstperc + c2.getBlue() * p2));\n    }", "String base64Encode ( byte [ ] data ) ;", "private void writeOutputData(byte[] data,int offset,int len) throws IOException {\n  cbLock.lock();\n  try {\n    ios.write(data,offset,len);\n  }\n  finally {\n    cbLock.unlock();\n  }\n}\n", "public void put(String key,Object value){\n  map.put(key,value);\n  unwrappedMap=null;\n}\n", "public HomeInternal getHome(J2EEName name) //197121\n    {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            Tr.entry(tc, \"getHome : \" + name);\n\n        HomeInternal result = null;\n\n        // Name is the HomeOfHomes spec", "private Throwable loadFromStream(String _fileNameWithPath, InputStream _libAsStream) {\n        String fileExt = getFileExtension(_fileNameWithPath);\n        String prefix = _fileNameWithPath.replace(new File(_fileNameWithPath).getParent(), \"\").replace(\".\" + fileExt, \"\");\n\n        // extract the library\n        try {\n            File tmpFile = extractToTemp(_libAsStream, prefix, fileExt);\n            Throwable loadLibErr = loadLib(tmpFile.getAbsolutePath());\n            if (loadLibErr != null) {\n                return loadLibErr;\n            }\n        } catch (Exception _ex) {\n            return _ex;\n        }\n\n        return null;\n    }", "public void setExecutionInfos(java.util.Collection<WorkflowExecutionInfo> executionInfos) {\n        if (executionInfos == null) {\n            this.executionInfos = null;\n            return;\n        }\n\n        this.executionInfos = new java.util.ArrayList<WorkflowExecutionInfo>(executionInfos);\n    }", "public Socket createSocket(InetAddress address,int port,InetAddress myAddress,int myPort) throws IOException {\n  if (myAddress != null) {\n    Socket sock=new Socket();\n    sock.bind(new InetSocketAddress(myAddress,0));\n    try {\n      sock.connect(new InetSocketAddress(address,port),8000);\n    }\n catch (    SocketTimeoutException e) {\n      throw new ConnectException(\"Socket timeout error (8sec)\" + address + \":\"+ port);\n    }\n    return sock;\n  }\n else {\n    Socket sock=new Socket();\n    if (myPort != 0) {\n      sock.bind(new InetSocketAddress(port));\n    }\n    try {\n      sock.connect(new InetSocketAddress(address,port),8000);\n    }\n catch (    SocketTimeoutException e) {\n      throw new ConnectException(\"Socket timeout error (8sec)\" + address + \":\"+ port);\n    }\n    return sock;\n  }\n}\n", "public void onPanelSlide ( Toolbar toolbar , View panelView , float slideOffset ) ;", "public WorkItemHandler build(ProcessRuntime processRuntime, RuntimeManager runtimeManager) {\n        WorkItemHandler workItemHandler = construct(processRuntime, runtimeManager);\n        if (workItemHandler instanceof SwitchYardServiceTaskHandler) {\n            SwitchYardServiceTaskHandler systh = (SwitchYardServiceTaskHandler)workItemHandler;\n            systh.setComponentName(_componentName);\n            systh.setInvoker(new SwitchYardServiceInvoker(getServiceDomain(), _targetNamespace));\n            systh.setProcessRuntime(processRuntime);\n        }\n        return workItemHandler;\n    }", "  public int getCoordinateIndex(int index) {\n    if (isLiveOrCompiled())\n        if(!this.getCapability(ALLOW_COORDINATE_INDEX_READ))\n      \t   throw new CapabilityNotSetException(J3dI18N.getString(\"IndexedGeometryArray9\"));\n\n    //NVaidya\n    int format = ((IndexedGeometryArrayRetained)this.retained).vertexFormat;\n    if ((format & BY_REFERENCE_INDICES) != 0)\n      throw new IllegalStateException(J3dI18N.getString(\"IndexedGeometryArray31\"));\n  \n    return ((IndexedGeometryArrayRetained)this.retained).getCoordinateIndex(index);\n  }\n", "public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(3);\n  newVector.addElement(new Option(\"\\tThe nearest neighbour search \" + \"algorithm to use \" + \"(default: weka.core.neighboursearch.LinearNNSearch).\\n\",\"A\",0,\"-A\"));\n  newVector.addElement(new Option(\"\\tSet the number of neighbours used to set\" + \" the kernel bandwidth.\\n\" + \"\\t(default all)\",\"K\",1,\"-K <number of neighbours>\"));\n  newVector.addElement(new Option(\"\\tSet the weighting kernel shape to use.\" + \" 0=Linear, 1=Epanechnikov,\\n\" + \"\\t2=Tricube, 3=Inverse, 4=Gaussian.\\n\"+ \"\\t(default 0 = Linear)\",\"U\",1,\"-U <number of weighting method>\"));\n  newVector.addAll(Collections.list(super.listOptions()));\n  return newVector.elements();\n}\n", "Union6 < First , Second , Third , Fourth , Fifth , Sixth > first ( First value ) ;", "    public void characters(char[] ch, int start, int length) {\n        if (this.currentText != null) {\n            this.currentText.append(String.copyValueOf(ch, start, length));\n        }\n    }\n", "\tprivate void addNearestNodeToJobClusterArray(NetworkImpl network) {\n\t\t\n\t\tlog.info(\"Determining nearest Nodes ...\");\n\t\tfor(int i = 0; i < this.jobClusterArray.length; i++){\n\t\t\t\n\t\t\tassert ( jobClusterArray[ i ].getCoordinate() != null );\n\t\t\tNode nearestNode = network.getNearestNode( jobClusterArray[ i ].getCoordinate() );\n\t\t\tassert ( nearestNode != null );\n\t\t\t// add nearest node to job object\n\t\t\tjobClusterArray[ i ].setNearestNode( nearestNode );\n\t\t}\n\t\tlog.info(\"... done!\");\n\t}\n", "public UnicastThread ( InetAddress host , int port ) throws IOException { super ( STR_ ) ; setDaemon ( BOOL_ ) ; int backlog = Integer . getInteger ( SystemProperties . LRMI_ACCEPT_BACKLOG , SystemProperties . LRMI_ACCEPT_BACKLOG_DEFUALT ) ; this . host = host ; if ( port == NUM_ ) { try { listen = new ServerSocket ( Constants . getDiscoveryPort ( ) , backlog , host ) ; } catch ( IOException e ) { logger . log ( Levels . HANDLED , STR_ , e ) ; } } if ( listen == null ) { listen = new ServerSocket ( port , backlog , host ) ; } this . port = listen . getLocalPort ( ) ; }", "public static void addCrashHandler(Activity activity){\n  Thread.setDefaultUncaughtExceptionHandler(new CrashHandler(activity));\n}\n", "public <T extends AmazonWebServiceRequest> T withSdkRequestTimeout(int sdkRequestTimeout) {\n        setSdkRequestTimeout(sdkRequestTimeout);\n        @SuppressWarnings(\"unchecked\")\n        T t = (T) this;\n        return t;\n    }", "public synchronized boolean startReindexer ( String name , boolean force ) throws ReindexerAlreadyRunningException { OnlineReindexer < ? , ? , ? > reindexer = reindexers . get ( name ) ; validateReindexerNotRunning ( reindexer ) ; if ( force || ! isCurrentIndexVersionLatest ( name , reindexer ) ) { reindexer . start ( ) ; return BOOL_ ; } return BOOL_ ; }", "protected RootContextIdentifierType getSelectedContextIdentifierType() {\n\t\tif (this.randomContextIdentifierButton.getSelection()) {\n\t\t\treturn RootContextIdentifierType.RANDOM_CONTEXT_ID;\n\t\t}\n\t\tif (this.bootContextIdentifierButton.getSelection()) {\n\t\t\treturn RootContextIdentifierType.BOOT_AGENT_CONTEXT_ID;\n\t\t}\n\t\treturn RootContextIdentifierType.DEFAULT_CONTEXT_ID;\n\t}", "public void init ( ) throws ServletException { }", "    public RegisteredUser demoteModerator(Moderator moderator, Forum forum) {\n        forum.removeModerator(moderator);\n        RegisteredUser tRegUser = new RegisteredUser(moderator);\n        return tRegUser;\n    }\n", "public Message decodeProtobufMessage(String topic, byte[] payload){\n        Method parseMethod = allTopics ? messageParseMethodForAll : messageParseMethodByTopic.get(topic);\n        try {\n            return (Message) parseMethod.invoke(null, payload);\n        } catch (IllegalArgumentException e) {\n            throw new RuntimeException(\"Can't parse protobuf message, since parseMethod() is not callable. \"\n                    + \"Please check your protobuf version (this code works with protobuf >= 2.6.1)\", e);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"Can't parse protobuf message, since parseMethod() is not accessible. \"\n                    + \"Please check your protobuf version (this code works with protobuf >= 2.6.1)\", e);\n        } catch (InvocationTargetException e) {\n            throw new RuntimeException(\"Error parsing protobuf message\", e);\n        }\n    }", "public void delete() throws IOException {\n  close();\n  IoUtils.deleteContents(directory);\n}\n", "    public void setChildren(List<PartitionRule> rules) {\n        if (!rules.isEmpty()) {\n            innerRules.addAll(rules);\n        }\n    }\n", "private static BitSet validCookieValueOctets() {\n        BitSet bits = new BitSet(8);\n        for (int i = 35; i < 127; i++) {\n            // US-ASCII characters excluding CTLs (%x00-1F / %x7F)\n            bits.set(i);\n        }\n        bits.set('\"', false);  // exclude DQUOTE = %x22\n        bits.set(',', false);  // exclude comma = %x2C\n        bits.set(';', false);  // exclude semicolon = %x3B\n        bits.set('\\\\', false); // exclude backslash = %x5C\n        return bits;\n    }", "public static boolean isWhiteSpace ( int c ) { switch ( c ) { case NUL_CHAR : case STR_ : case STR_ : case FF_CHAR : case STR_ : case STR_ : return BOOL_ ; default : return BOOL_ ; } }", "public boolean shouldSplitAgain ( ) { return splitAgain ; }", "void closem ( FileInputStream fis , FileOutputStream fos ) { try { somethingDangerous ( ) ; } catch ( Exception exc ) { if ( fis != null ) try { fis . close ( ) ; } catch ( Exception e2 ) { } if ( fos != null ) try { fos . close ( ) ; } catch ( Exception e2 ) { } throw new RuntimeException ( exc ) ; } }", "private void writeEventTypes(int[] types,BinaryRawWriterEx writer){\n  if (types == null) {\n    writer.writeIntArray(null);\n    return;\n  }\n  int[] resultTypes=new int[types.length];\n  int idx=0;\n  for (  int t : types)   if (platformCtx.isEventTypeSupported(t))   resultTypes[idx++]=t;\n  writer.writeIntArray(Arrays.copyOf(resultTypes,idx));\n}\n", "  public ConfigOption getOption(String optionName) {\n    if (options == null) {\n//      System.out.println(\"Making the options\");\n      getOptions();\n    }\n\n    return (ConfigOption) options.get(optionName);\n  }\n", "int count ( ITemplateHolder template , String [ ] subClasses ) throws SAException ;", "    public void setXRange(float offset, float length) {\n        for (int i = 0; i < getClipModel().getNumberOfElements(); i++) {\n            getClipModel().getLayer(i).getLayerPlotter().setXRange(offset, length);\n        }\n    }\n", "    public void write(DataOutput out) throws IOException {\n\n\tout.writeInt(MessageType.JoinAsRole);\n\n\tout.writeUTF(role);\n    }\n", "void deleteComment ( final IComment comment ) throws CouldntDeleteException ;", "public void reallocate(boolean allMsgs) throws SIResourceException\n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n          SibTr.entry(tc, \"reallocate\");\n\n    // There will not be a reallocator if this streamSet is used for PubSub\n    if( pointTopoint )\n    {\n      // Force the reallocator to delete mesages from the ItemStream\n      // when it finishes if it has removed them from the stream\n      reallocator.reallocateMsgs(this.destinationHandler, allMsgs, true);\n    }\n\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.exit(tc, \"reallocate\");\n  }", "static private byte[] classToBytes(Class c){\n  return classNameToBytes(c.getName());\n}\n", "public CharSequence readSource(JavaFileObject filename){\n  try {\n    inputFiles.add(filename);\n    return filename.getCharContent(false);\n  }\n catch (  IOException e) {\n    log.error(\"error.reading.file\",filename,JavacFileManager.getMessage(e));\n    return null;\n  }\n}\n", "public void marshall(UpdateRequestValidatorRequest updateRequestValidatorRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (updateRequestValidatorRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(updateRequestValidatorRequest.getRestApiId(), RESTAPIID_BINDING);\n            protocolMarshaller.marshall(updateRequestValidatorRequest.getRequestValidatorId(), REQUESTVALIDATORID_BINDING);\n            protocolMarshaller.marshall(updateRequestValidatorRequest.getPatchOperations(), PATCHOPERATIONS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void orWith(OrCondition other){\n  children.addAll(other.getAndTerms());\n}\n", "void saveState(Bundle outState){\n  final int numTabs=getTabCount();\n  if (numTabs == 0) {\n    return;\n  }\n  long[] ids=new long[numTabs];\n  int i=0;\n  for (  Tab tab : mTabs) {\n    Bundle tabState=tab.saveState();\n    if (tabState != null && tab.isPrivateBrowsingEnabled() == false) {\n      ids[i++]=tab.getId();\n      String key=Long.toString(tab.getId());\n      if (outState.containsKey(key)) {\n        for (        Tab dt : mTabs) {\n          Log.e(LOGTAG,dt.toString());\n        }\n        throw new IllegalStateException(\"Error saving state, duplicate tab ids!\");\n      }\n      outState.putBundle(key,tabState);\n    }\n else {\n      ids[i++]=-1;\n      tab.deleteThumbnail();\n    }\n  }\n  if (!outState.isEmpty()) {\n    outState.putLongArray(POSITIONS,ids);\n    Tab current=getCurrentTab();\n    long cid=-1;\n    if (current != null) {\n      cid=current.getId();\n    }\n    outState.putLong(CURRENT,cid);\n  }\n}\n", "private void paintCloseHover ( Graphics2D g , JComponent c , int width , int height ) { paintClose ( g , c , width , height , hover ) ; }", "public void writeMapBegin(String type)\n        throws IOException\n    {\n        os.write('M');\n        os.write('t');\n        printLenString(type);\n    }", "static public void removeComments(Node node){\n  NodeList children=node.getChildNodes();\n  int i=0;\n  int len=children.getLength();\n  while (i < len) {\n    Node child=children.item(i);\n    if (child.hasChildNodes()) {\n      removeComments(child);\n      i++;\n    }\n else {\n      if (child.getNodeType() == Node.COMMENT_NODE) {\n        node.removeChild(child);\n        len--;\n      }\n else {\n        i++;\n      }\n    }\n  }\n}\n", "public StartRestoreJobRequest withMetadata(java.util.Map<String, String> metadata) {\n        setMetadata(metadata);\n        return this;\n    }", "\tpublic void setValid(boolean bValid) {\n\t\tif(!bValid) {\n\t\t\tthis.m_comboBox.setBorder(BorderFactory.createLineBorder(Color.RED));\n\t\t\tthis.m_errorLabel.setIcon(IconManager.getInstance().getIcon(\"16-message-error.gif\"));\n\t\t} else {\n\t\t\tthis.m_comboBox.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n\t\t\tthis.m_errorLabel.setIcon(IconManager.getInstance().getIcon(\"16-message-confirm.gif\"));\n\t\t}\n\t\tthis.revalidate();\n\t\tthis.repaint();\n\t}\n", "public CGraphBuilderReporter ( final ListenerProvider < IGraphBuilderListener > listeners ) { m_listeners = listeners ; }", "private static void sort1(float[] x,int off,int len){\n  if (len < 7) {\n    for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);\n    return;\n  }\n  int m=off + (len >> 1);\n  if (len > 7) {\n    int l=off;\n    int n=off + len - 1;\n    if (len > 40) {\n      int s=len / 8;\n      l=med3(x,l,l + s,l + 2 * s);\n      m=med3(x,m - s,m,m + s);\n      n=med3(x,n - 2 * s,n - s,n);\n    }\n    m=med3(x,l,m,n);\n  }\n  float v=x[m];\n  int a=off, b=a, c=off + len - 1, d=c;\n  while (true) {\n    while (b <= c && x[b] <= v) {\n      if (x[b] == v)       swap(x,a++,b);\n      b++;\n    }\n    while (c >= b && x[c] >= v) {\n      if (x[c] == v)       swap(x,c,d--);\n      c--;\n    }\n    if (b > c)     break;\n    swap(x,b++,c--);\n  }\n  int s, n=off + len;\n  s=Math.min(a - off,b - a);\n  vecswap(x,off,b - s,s);\n  s=Math.min(d - c,n - d - 1);\n  vecswap(x,b,n - s,s);\n  if ((s=b - a) > 1)   sort1(x,off,s);\n  if ((s=d - c) > 1)   sort1(x,n - s,s);\n}\n", "public void send(final byte[] frame, final boolean blocking)\n\t\tthrows KNXAckTimeoutException, KNXPortClosedException, InterruptedException\n\t{\n\t\tboolean ack = false;\n\t\ttry {\n\t\t\tfor (int i = 0; i <= REPEAT_LIMIT; ++i) {\n\t\t\t\tlogger.trace(\"sending FT1.2 frame, {}blocking, attempt {}\", (blocking ? \"\" : \"non-\"), (i + 1));\n\t\t\t\tsendData(frame);\n\t\t\t\tif (!blocking || waitForAck()) {\n\t\t\t\t\tack = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsendFrameCount ^= FRAMECOUNT_BIT;\n\t\t\tif (state == ACK_PENDING)\n\t\t\t\tstate = OK;\n\t\t\tif (!ack)\n\t\t\t\tthrow new KNXAckTimeoutException(\"no acknowledge reply received\");\n\t\t}\n\t\tcatch (final InterruptedIOException e) {\n\t\t\tthrow new InterruptedException(e.getMessage());\n\t\t}\n\t\tcatch (final IOException e) {\n\t\t\tclose(false, e.getMessage());\n\t\t\tthrow new KNXPortClosedException(e.getMessage(), port, e);\n\t\t}\n\t}", "void put(int fieldNumber,FieldData data){\n  int i=binarySearch(fieldNumber);\n  if (i >= 0) {\n    mData[i]=data;\n  }\n else {\n    i=~i;\n    if (i < mSize && mData[i] == DELETED) {\n      mFieldNumbers[i]=fieldNumber;\n      mData[i]=data;\n      return;\n    }\n    if (mGarbage && mSize >= mFieldNumbers.length) {\n      gc();\n      i=~binarySearch(fieldNumber);\n    }\n    if (mSize >= mFieldNumbers.length) {\n      int n=idealIntArraySize(mSize + 1);\n      int[] nkeys=new int[n];\n      FieldData[] nvalues=new FieldData[n];\n      System.arraycopy(mFieldNumbers,0,nkeys,0,mFieldNumbers.length);\n      System.arraycopy(mData,0,nvalues,0,mData.length);\n      mFieldNumbers=nkeys;\n      mData=nvalues;\n    }\n    if (mSize - i != 0) {\n      System.arraycopy(mFieldNumbers,i,mFieldNumbers,i + 1,mSize - i);\n      System.arraycopy(mData,i,mData,i + 1,mSize - i);\n    }\n    mFieldNumbers[i]=fieldNumber;\n    mData[i]=data;\n    mSize++;\n  }\n}\n", "public void initialize()\n\t{ \n\t\tthis.musicQueue.setRepeatType(RepeatType.NONE);\n\t\tthis.musicQueue.setCrossfadeinTime(.1f);\n\t\tthis.musicQueue.setCrossfadeoutTime(0f);\n\t\tthis.musicQueue.addCurrentSongChangeListener(new BGLoopListener(this));\n\t    try\n\t    {", "@Override\n    public boolean isAtomServiceURI(final AtomRequest areq) {\n        final String[] pathInfo = StringUtils.split(areq.getPathInfo(), \"/\");\n        if (pathInfo.length == 0) {\n            return true;\n        }\n        return false;\n    }", "public static int readUnsignedShortBigEndian(InputStream io) throws IOException {\n\t\tint value = io.read();\n\t\tif (value < 0) throw new EOFException();\n\t\tvalue <<= 8;\n\t\tint i = io.read();\n\t\tif (i < 0) throw new EOFException();\n\t\treturn value | i;\n\t}", "public static void removeStatusFromModule ( IResource module ) { try { module . deleteMarkers ( STEP_STATUS_MARKER , BOOL_ , IResource . DEPTH_ZERO ) ; } catch ( CoreException e ) { ProverUIActivator . getDefault ( ) . logError ( STR_ + module , e ) ; } }", "private String dumpZipEntry(final ZipEntry ze){\n  final StringBuffer sb=new StringBuffer();\n  if (ze.isDirectory()) {\n    sb.append(\"d \");\n  }\n else {\n    sb.append(\"f \");\n  }\n  if (ze.getMethod() == ZipEntry.STORED) {\n    sb.append(\"stored   \");\n  }\n else {\n    sb.append(\"defalted \");\n  }\n  sb.append(ze.getName());\n  sb.append(\"\\t\");\n  sb.append(\"\" + ze.getSize());\n  if (ze.getMethod() == ZipEntry.DEFLATED) {\n    sb.append(\"/\" + ze.getCompressedSize());\n  }\n  return sb.toString();\n}\n", "public void waitForExit() throws IOException {\n  Thread thread=Thread.currentThread();\n  ClassLoader oldLoader=thread.getContextClassLoader();\n  try {\n    thread.setContextClassLoader(_systemManager.getClassLoader());\n    _waitForExitService=new WaitForExitService(this,_systemManager);\n    _waitForExitService.waitForExit();\n  }\n  finally {\n    thread.setContextClassLoader(oldLoader);\n  }\n}\n", "\tpublic BufferedImage get(long mid) throws iTrustException, IOException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM ProfilePhotos WHERE MID = ?\");\n\t\t\tps.setLong(1, mid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\tBlob blob = rs.getBlob(\"Photo\");\n\t\t\t\tBufferedImage bi = ImageIO.read(new MemoryCacheImageInputStream(blob.getBinaryStream()));\n\t\t\t\treturn bi;\n\t\t\t} else\n\t\t\t\treturn DEFAULT_PROFILE_PHOTO;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n", "Union4 < First , Second , Third , Fourth > second ( Second value ) ;", "\tpublic Length getPageWidth() {\n\t\tswitch (orientation) {\n\t\t\tcase REVERSED:\n\t\t\t\treturn pageHeight;\n\t\t\tcase DEFAULT: default:\n\t\t\t\treturn pageWidth;\n\t\t}\n\t}\n", "    public void undeploy(String fileName) throws DeploymentException {\n        // Undeploy\n        super.undeploy(fileName);\n    }\n", "public void removeAll () {\n\tcheckWidget ();\n\tOS.SendMessage (handle, OS.CB_RESETCONTENT, 0, 0);\n\tsendEvent (SWT.Modify);\n\tif (isDisposed ()) return;\n\tif ((style & SWT.H_SCROLL) != 0) setScrollWidth (0);\n}\n", "@SuppressWarnings(\"unused\")\n    void finish(String hash) {\n        TokenInfo info = new TokenInfo();\n        String error = null;\n        String errorDesc = \"\";\n        String errorUri = \"\";\n\n        // Iterate over keys and values in the string hash value to find relevant\n        // information like the access token or an error message. The string will be\n        // in the form of: #key1=val1&key2=val2&key3=val3 (etc.)\n        int idx = 1;\n        while (idx < hash.length() - 1) {\n            // Grab the next key (between start and '=')\n            int nextEq = hash.indexOf('=', idx);\n            if (nextEq < 0) {\n                break;\n            }\n            String key = hash.substring(idx, nextEq);\n\n            // Grab the next value (between '=' and '&')\n            int nextAmp = hash.indexOf('&', nextEq);\n            nextAmp = nextAmp < 0 ? hash.length() : nextAmp;\n            String val = hash.substring(nextEq + 1, nextAmp);\n\n            // Start looking from here from now on.\n            idx = nextAmp + 1;\n\n            // Store relevant values to be used later.\n            if (key.equals(\"access_token\")) {\n                info.setAccessToken(val);\n            } else if (key.equals(\"token_type\")) {\n                info.setTokenType(val);\n            } else if (key.equals(\"expires_in\")) {\n                // expires_in is seconds, convert to milliseconds and add to now\n                Double expiresIn = Double.valueOf(val) * 1000;\n                info.setExpires(String.valueOf(clock.now() + expiresIn));\n            } else if (key.equals(\"error\")) {\n                error = val;\n            } else if (key.equals(\"error_description\")) {\n                errorDesc = \" (\" + val + \")\";\n            } else if (key.equals(\"error_uri\")) {\n                errorUri = \"; see: \" + val;\n            }\n        }\n\n        if (error != null) {\n            lastCallback.onFailure(\n                    new RuntimeException(\"Error from provider: \" + error + errorDesc + errorUri));\n        } else if (info.getAccessToken() == null) {\n            lastCallback.onFailure(new RuntimeException(\"Could not find access_token in hash \" + hash));\n        } else {\n            setToken(lastRequest, info);\n            lastCallback.onSuccess(info);\n        }\n    }", "        public Object invoke(HttpSession session, DataInput input) throws Exception {\n\n            br.com.java.hypers.colossus.denuncias_sugestoes.dto.DtoProblema instance = (br.com.java.hypers.colossus.denuncias_sugestoes.dto.DtoProblema)session .getAttribute(\"br.com.java.hypers.colossus.denuncias_sugestoes.dto.DtoProblema\");\n            if (instance == null) {\n                instance = (br.com.java.hypers.colossus.denuncias_sugestoes.dto.DtoProblema) Class.forName(\"br.com.java.hypers.colossus.denuncias_sugestoes.dto.DtoProblema\").newInstance();\n                session.setAttribute(\"br.com.java.hypers.colossus.denuncias_sugestoes.dto.DtoProblema\", instance);\n            }\n            return instance.getPrioridade();\n        }\n", "\tpublic boolean deleteOrder(int orderID) throws OrderPersistenceException {\n\t\ttry {\n\t\t\treturn psf.deleteOrder(orderID);\n\t\t} catch (RemoteException exp) {\n\t\t\tthrow new OrderPersistenceException(exp);\n\t\t}\n\t}\n", "\tpublic int getNameState(String name, boolean isClass) throws IOException {\n\t\tInteger state = null;\n\n\t\tif (isClass) {\n\t\t\tstate = getClassNameState(name);\n\t\t} else {\n\t\t\tstate = (Integer) completeNamePrefs.get(name);\n\t\t}\n\t\tif (state != null) {\n\t\t\treturn state.intValue();\n\t\t}\n\t\treturn NAME_NO_PREFERENCE;\n\t}\n", "protected void beginUpdate(IEventListener listener){\n  source=listener;\n  updateCounter.incrementAndGet();\n}\n", "public void onSuccess ( int statusCode , Header [ ] headers , JSONArray response ) { AsyncHttpClient . log . w ( LOG_TAG , STR_ ) ; }", "private boolean isXMLString(String string){\n  return string.contains(\"</\") || string.contains(\"/>\");\n}\n", "public static Enum castToEnum ( Object object , Class < ? extends Enum > type ) { if ( object == null ) return null ; if ( type . isInstance ( object ) ) return ( Enum ) object ; if ( object instanceof String || object instanceof GString ) { return Enum . valueOf ( type , object . toString ( ) ) ; } throw new GroovyCastException ( object , type ) ; }", "private void deleteStorageHWIDs(StorageSystem storage,List<Initiator> initiators){\n  if (initiators == null || initiators.isEmpty()) {\n    _log.debug(\"No initiators ...\");\n    return;\n  }\n  CIMObjectPath hwIdManagementSvc=_cimPath.getStorageHardwareIDManagementService(storage);\n  for (  Initiator initiator : initiators) {\n    try {\n      CIMArgument[] createHwIdIn=_helper.getDeleteStorageHardwareIDArgs(storage,initiator);\n      CIMArgument[] createHwIdOut=new CIMArgument[5];\n      _helper.invokeMethod(storage,hwIdManagementSvc,SmisConstants.DELETE_STORAGE_HARDWARE_ID,createHwIdIn,createHwIdOut);\n    }\n catch (    WBEMException e) {\n      _log.error(\"deleteStorageHWIDs -- WBEMException: \" + e.getMessage());\n    }\ncatch (    Exception e) {\n      _log.error(\"deleteStorageHWIDs -- Exception: \" + e.getMessage());\n    }\n  }\n}\n", "public CTagFilterNode ( final ITreeNode < CTag > tag ) { m_tag = tag ; }", "protected Set < Future < Void > > send ( String channelId , Object message ) { Collection < Session > sessions = ( channelId != null ) ? socketSessions . get ( channelId ) : null ; if ( sessions != null && ! sessions . isEmpty ( ) ) { Set < Future < Void ", "public static String replace(final Object source, final Properties valueProperties) {\n        if (valueProperties == null) {\n            return source.toString();\n        }\n        final Map<String,String> valueMap = new HashMap<>();\n        final Enumera", "public void run(){\n  _setRunning(true);\n  while (_keepRunning()) {\n    if (_activityCount() > 0) {\n      long currentTime=System.currentTimeMillis();\n      long t=-1;\nsynchronized (this) {\n        for (int i=0; i < m_activities.size(); i++) {\n          Activity a=(Activity)m_activities.get(i);\n          m_tmp.add(a);\n          if (currentTime >= a.getStopTime()) {\n            m_activities.remove(i--);\n            a.setScheduled(false);\n          }\n        }\n        if (m_activities.size() == 0) {\n          m_nextTime=Long.MAX_VALUE;\n        }\n      }\n      for (int i=0; i < m_tmp.size(); i++) {\n        Activity a=(Activity)m_tmp.get(i);\n        long s=a.runActivity(currentTime);\n        t=(s < 0 ? t : t < 0 ? s : Math.min(t,s));\n      }\n      m_tmp.clear();\n      if (t == -1)       continue;\n      try {\nsynchronized (this) {\n          wait(t);\n        }\n      }\n catch (      InterruptedException e) {\n      }\n    }\n else {\n      try {\nsynchronized (this) {\n          wait();\n        }\n      }\n catch (      InterruptedException e) {\n      }\n    }\n  }\n}\n", "    public boolean isLabel(int index) {\n        return index == 3;\n    }\n", "private boolean moveToFollowingNode(final INodeReadTrx paramRtx, final ERevision paramRevision)\n        throws TTIOException {\n        boolean moved = false;\n        while (!((ITreeStructData)paramRtx.getNode()).hasRightSibling()\n            && ((ITreeStructData)paramRtx.getNode()).hasParent() && paramRtx.getNode().getDataKey() != mRootKey) {\n            moved = paramRtx.moveTo(paramRtx.getNode().getParentKey());\n            if (moved) {\n                switch (paramRevision) {\n                case NEW:\n                    mDepth.decrementNewDepth();\n                    break;\n                case OLD:\n                    mDepth.decrementOldDepth();\n                    break;\n                }\n            }\n        }\n\n        if (paramRtx.getNode().getDataKey() == mRootKey) {\n            paramRtx.moveTo(ROOT_NODE);\n        }\n\n        moved = paramRtx.moveTo(((ITreeStructData)paramRtx.getNode()).getRightSiblingKey());\n        return moved;\n    }", "public static Set<Bean> getBeanToValidate(Set<BeanId> ids) {\r\n        List<JpaRef> targetPredecessors = JpaRef.getDirectPredecessors(ids);\r\n        Set<BeanId> beansToValidate = new HashSet<>();\r\n        for (JpaRef ref : targetPredecessors) {\r\n            beansToValidate.add(ref.getSource());\r\n        }\r\n        beansToValidate.addAll(ids);\r\n        JpaBeanQueryAssembler query = new JpaBeanQueryAssembler(beansToValidate);\r\n        collectRefs(beansToValidate, query, 2);\r\n        List<JpaProperty> allProperties = JpaProperty.findProperties(query.getIds());\r\n        query.addProperties(allProperties);\r\n\r\n        return new HashSet<>(query.assembleBeans());\r\n    }", "public void testBackupRestore ( ) throws Exception { backupRestore ( STR_ , STR_ , STR_ ) ; }", "public int[] toIntegerArray(){\n  int[] values=new int[mSize];\n  for (int i=nextSetBit(0); i >= 0 && i < mSize; i=nextSetBit(i + 1)) {\n    values[i]=1;\n  }\n  return values;\n}\n", "public int compareTo ( Object obj ) { if ( obj == null ) { return - NUM_ ; } SvcReg reg = ( SvcReg ) obj ; if ( this == reg ) return NUM_ ; int i = compare ( leaseExpiration , reg . leaseExpiration ) ; if ( i != NUM_ ) { return i ; } i = compare ( leaseID . getMostSignificantBits ( ) , reg . leaseID . getMostSignificantBits ( ) ) ; if ( i != NUM_ ) { return i ; } return compare ( leaseID . getLeastSignificantBits ( ) , reg . leaseID . getLeastSignificantBits ( ) ) ; }", "public Optional<OPFItem> getItemByPath(String path)\n  {\n    return Optional.fromNullable(itemsByPath.get(path));\n  }", "public static void playSoundBuffer(byte[] wavData){\n  float sampleRate=11200.0f;\n  int sampleSizeInBits=8;\n  int channels=1;\n  boolean signed=(sampleSizeInBits > 8);\n  boolean bigEndian=true;\n  AudioFormat format=new AudioFormat(sampleRate,sampleSizeInBits,channels,signed,bigEndian);\n  SourceDataLine line;\n  DataLine.Info info=new DataLine.Info(SourceDataLine.class,format);\n  if (!AudioSystem.isLineSupported(info)) {\n    log.warn(\"line not supported: \" + info);\n    return;\n  }\n  try {\n    line=(SourceDataLine)AudioSystem.getLine(info);\n    line.open(format);\n  }\n catch (  LineUnavailableException ex) {\n    log.error(\"error opening line: \" + ex);\n    return;\n  }\n  line.start();\n  line.write(wavData,0,wavData.length);\n}\n", "private void viewCommands(IRCEvent myEvent) {\n\t\tPlayerIRC playerIRC;\n\t\tif ((playerIRC = retrievePlayer(myEvent.getUser())) != null) {\n\t\t\tPlayer player = playerIRC.getPlayer();\n\t\t\tHouse house = player.getCurrentHouse();\n\t\t\t\n\t\t\t//\tPut here the code about a", "    public void produceBillButtonActionPerformed1(ActionEvent e) {\n        closing = true;\n        PrintUtilities.printComponent(jTextPane1);\n        settleBillButton.setEnabled(true);\n        closing = false;\n    }\n", "public IPoint next(){\n  if (stack.empty()) {\n    throw new java.util.NoSuchElementException(\"TwoDNode Traversal Iterator has no more elements\");\n  }\n  Moment m=stack.peek();\n  advance();\n  return m.node.point;\n}\n", "public static void dropTable ( Database db , boolean ifExists ) { String sql = STR_ + ( ifExists ? STR_ : STR_ ) + STR_ ; db . execSQL ( sql ) ; }", "static public String formatMillis(long millis){\n  boolean isMinutes=false;\n  double instTime=millis;\n  String suffix=\"milliseconds\";\n  if (instTime > (60 * 1000)) {\n    suffix=\"minutes\";\n    instTime=instTime / (60 * 1000);\n    isMinutes=true;\n  }\n else   if (instTime > 1000) {\n    suffix=\"seconds\";\n    instTime=instTime / 1000;\n  }\n  if (!isMinutes) {\n    NumberFormat nf=NumberFormat.getInstance();\n    nf.setMaximumFractionDigits(2);\n    return nf.format(instTime) + \" \" + suffix;\n  }\n  int minutes=(int)instTime;\n  double seconds=(instTime - minutes) * 60;\n  NumberFormat nf=NumberFormat.getInstance();\n  nf.setMaximumFractionDigits(2);\n  nf.setMinimumIntegerDigits(2);\n  return minutes + \":\" + nf.format(seconds)+ \" \"+ suffix;\n}\n", "  private int getPossibilitiesCountSum() {\n    int possibilitiesCountSum = 0;\n    for (int i = 0; i < 9; i++) {\n      for (int j = 0; j < 9; j++) {\n\tpossibilitiesCountSum += _puzzle[i][j].getPossibilitiesCount();\n      }\n    }\n    return possibilitiesCountSum;\n  }\n", "public boolean hasKey(ECKey key){\n  lock.lock();\n  try {\n    return keychain.contains(key);\n  }\n  finally {\n    lock.unlock();\n  }\n}\n", "\tpublic void addUnit(Unit unit) throws WatchListException {\n\t\tif (contains(unit.getId())) {\n\t\t\tlog.warning(\"The unit: \" + unit.getId() + \" is in the list\");\n\t\t\tthrow new WatchListException(\"The unit is already on your watch list.\");\n\t\t}\n\n\t\tlog.info(\"About to add the unit: \" + unit.getId());\n\t\tfUnits.add(unit);\n\t}\n", "public String toString ( ) { StringBuilder s = new StringBuilder ( ) ; boolean appended = BOOL_ ; if ( this . weeks != NUM_ || appended ) { appended = BOOL_ ; s . append ( this . weeks + STR_ ) ; } if ( this . days != NUM_ || appended ) { appended = BOOL_ ; s . append ( this . days + STR_ ) ; } if ( this . hours != NUM_ || appended ) { appended = BOOL_ ; s . append ( this . hours + STR_ ) ; } if ( this . minutes != NUM_ || appended ) { appended = BOOL_ ; s . append ( this . minutes + STR_ ) ; } if ( this . seconds != NUM_ || appended ) { appended = BOOL_ ; s . append ( this . seconds + STR_ ) ; } if ( this . milliseconds != NUM_ || appended ) { appended = BOOL_ ; s . append ( this . milliseconds + STR_ ) ; } return s . toString ( ) ; }", "public void swipe(PointF startPoint1, PointF startPoint2, PointF endPoint1, PointF endPoint2)\n\t{\n\t\tif(config.commandLogging){\n\t\t\tLog.d(config.commandLoggingTag, \"swipe(\"+startPoint1+\", \"+startPoint2+\", \"+endPoint1+\", \"+endPoint2+\")\");\n\t\t}\n\t\t\n\t\tif (android.os.Build.VERSION.SDK_INT < 14){\n\t\t\tthrow new RuntimeException(\"swipe() requires API level >= 14\");\n\t\t}\n\t\tswiper.generateSwipeGesture(startPoint1, startPoint2, endPoint1,\n\t\t\t\tendPoint2);\n\t}", "public final void removeElementAt(int i){\n  if (i > m_firstFree)   System.arraycopy(m_map,i + 1,m_map,i,m_firstFree);\n else   m_map[i]=java.lang.Integer.MIN_VALUE;\n  m_firstFree--;\n}\n", "    public ConnectionAnchor getSourceConnectionAnchor(ConnectionEditPart connEditPart) {\n        //LogFactory.getLog().debug(\"DEBUG -- Source connection anchor edit part:\" + connEditPart.getClass().getName());\n        if (this.getFigure() != null) {\n            Link l = (Link) connEditPart.getModel();\n            \n            String sourceTerminal = l.getSourceTerminal();\n            ConnectionAnchor anchor = (ConnectionAnchor)this.outputAnchors.get(sourceTerminal);\n            if(anchor == null) {\n                anchor = new ChopboxAnchor(this.getFigure());\n                this.outputAnchors.put(sourceTerminal, anchor);\n            }\n            return anchor;\n        }\n        //LogFactory.getLog().warn(\"WARN -- getSourceConnectionAnchor(ConnectionEditPart) returns null\");\n        return null;\n    }\n", "    private void makeRandomID(StringWriter id) {\n        id.append(\"randomID_\").append(Long.toString(utg.next()));\n    }\n", "@Override\n  protected void visitMsgNode(MsgNode node) {\n    MsgPartsAndIds msgPartsAndIds = MsgUtils.buildMsgPartsAndComputeMsgIdForDualFormat(node);\n    SoyMsg.Builder builder = SoyMsg.builder().setId(msgPartsAndIds.id);\n    if (node.getMeaning() != null) {\n      builder.setMeaning(node.getMeaning());\n    }\n    SoyMsg msg =\n        builder\n            .setDesc(node.getDesc())\n            .setIsHidden(node.isHidden())\n            .setContentType(node.getContentType())\n            .addSourceLocation(node.getSourceLocation())\n            .setIsPlrselMsg(node.isPlrselMsg())\n            .setParts(msgPartsAndIds.parts)\n            .build();\n    msgs.add(msg);\n  }", "public void sendAffiliationConfirmationEmail(IrUser user, Affiliation affiliation) {\n\n\t\tSimpleMailMessage message = new SimpleMailMessage(userAffiliationMessage);\n\t\tmessage.setTo(user.getDefaultEmail().getEmail());\n\t\tString text = message.getText();\n\t\tte", "public int setValue(double value, boolean bDisplayOption, int iMoveMode)\n    {\n        if (this.getNextConverter() != null)\n            return this.getNextConverter().setValue(value, bDisplayOption, iMoveMode);\n        else\n            return super.setValue(value, bDisplayOption, iMoveMode);\n    }", "  public void contextDestroyed( ServletContextEvent event ) {\n    context = event.getServletContext();\n  }\n", "private void generateCodePath(String scopeName,ConditionalBlock block,List<Fingerprint.Payload> payloads){\n  if (payloads.isEmpty()) {\n    return;\n  }\n  Fingerprint.Payload payload=payloads.remove(0);\n  if (hasAlwaysBlock(payload)) {\n    generateAlwaysBlock(payload,block,payload.getAlways());\n  }\n  List<Object> operationList=payload.getOperation();\n  List<Object> nextOperations=new ArrayList<>();\n  while (!operationList.isEmpty()) {\n    operationList.forEach(null);\n    operationList.clear();\n    operationList.addAll(nextOperations);\n    nextOperations.clear();\n  }\n}\n", "public EmbeddedSpaceConfigurer attributeStore ( AttributeStore attributeStore ) { validate ( ) ; factoryBean . attributeStore ( attributeStore ) ; return this ; }", "public static double[] concatenate(double[][] vectors){\n  int numVectors=vectors.length;\n  int length=vectors[0].length;\n  double[] concat=new double[numVectors * length];\n  for (int i=0; i < vectors.length; i++) {\n    System.arraycopy(vectors[i],0,concat,i * length,length);\n  }\n  return concat;\n}\n", "public ScriptMethodRequest ( String method , Object argument ) { this . method = method ; this . argument = argument ; }", "boolean doActionGetDeviceStatus ( final IEspDevice device ) ;", "public void init ( ) throws ServletException { }", "private static int compare ( long l1 , long l2 ) { return ( l1 < l2 ) ? - NUM_ : ( ( l1 > l2 ) ? NUM_ : NUM_ ) ; }", "public static String extract(String s, String language) {\n        if (s == null || s.trim().isEmpty()) {\n            return null;\n        }\n\n        String[] langNames = s.split(\"\\r\");\n        if (language == null || language.trim().isEmpty()) {\n            return langNames[0];\n        }\n\n        String fallback = null;\n        for (int i = 1; i < langNames.length; i++) {\n            String[] langName = langNames[i].split(\"\\b\");\n            if (langName.length != 2) {\n                continue;\n            }\n\n            // Perfect match\n            if (langName[0].equalsIgnoreCase(language)) {\n                return langName[1];\n            }\n\n            // Fall back to base, e.g. zh-min-lan -> zh\n            if (fallback == null && !langName[0].contains(\"-\") && (language.contains(\"-\") || language.contains(\"_\"))\n                    && language.toLowerCase(Locale.ENGLISH).startsWith(langName[0].toLowerCase(Locale.ENGLISH))) {\n                fallback = langName[1];\n            }\n        }\n        return (fallback != null) ? fallback : langNames[0];\n    }", "private byte [ ] checkUserPassword ( byte [ ] userPassword , byte [ ] firstDocIdValue , int keyBitLength , int revision , byte [ ] oValue , byte [ ] uValue , int pValue , boolean encryptMetadata ) throws GeneralSecurityException , EncryptionUnsupportedByP", "private void printPoolRecommendations(List<Recommendation> poolRecommendations){\n  StringBuffer buf=new StringBuffer();\n  buf.append(String.format(\"%n Recommended Pools: %n\"));\n  for (  Recommendation poolRec : poolRecommendations) {\n    StoragePool pool=dbClient.queryObject(StoragePool.class,poolRec.getSourceStoragePool());\n    buf.append(String.format(\"Storage Pool : [%s] - Free Capacity : [%s] KB %n\",pool.getLabel(),pool.getFreeCapacity()));\n  }\n  buf.append(String.format(\"---------------------------------------- %n\"));\n  _log.info(buf.toString());\n}\n", "public static boolean isDirtyRead ( int mod ) { return Modifiers . contains ( mod , DIRTY_READ ) ; }", "public static String generateNativeGuid(DbClient dbClient,StoragePort port){\n  StorageSystem device=dbClient.queryObject(StorageSystem.class,port.getStorageDevice());\n  return String.format(\"%s+%s+\" + PORT + \"+%s\",_deviceTypeMap.get(device.getSystemType()", "\tpublic boolean removeCategory(Category category) {\n\t\treturn this.category.remove(category);\n\t}\n", "    protected boolean isShowingChildren() {\n        return true;\n    }\n", "@Override\n    public void visitClassContext(ClassContext classContext) {\n        try {\n            JavaClass cls = classContext.getJavaClass();\n            if ((serializableClass != null) && (cls.implementationOf(serializableClass))) {\n                Field[] fields = cls.getFields();\n                setupVisitorForClass(cls);\n                for (Field f : fields) {\n                    if (!f.isStatic() && f.isFinal() && f.isTransient()) {\n                        bugReporter.reportBug(new BugInstance(this, BugType.NFF_NON_FUNCTIONAL_FIELD.name(), Priorities.NORMAL_PRIORITY).addClass(this)\n                                .addField(cls.getClassName(), f.getName(), f.getSignature(), f.getAccessFlags()));\n                    }\n                }\n            }\n        } catch (ClassNotFoundException cnfe) {\n            bugReporter.reportMissingClass(cnfe);\n        }\n    }", "    public int count(String line) {\n\n\t// Notice that we are creating a string tokenizer each time we count\n        // the words in a line.\n    \tStringTokenizer tok = new StringTokenizer(line);\n\treturn tok.countTokens();\n        }\n", "private boolean isNamedParam(String arg){\n  return arg.startsWith(\"--\") && (arg.indexOf('=') > 2 && validFirstChar(arg.charAt(2)));\n}\n", "    public void run() {\n        id = DBComm.buildID();\n        run = true;\n        boolean started = false;\n        long start = 0, stop = 0;\n        while (run) {\n            try {\n                DBComm.updateID();\n                gui.Client.jbtID.setText(\"Position in queue: \" + position);\n                if (position == 1) {\n                    gui.Client.jbtID.setForeground(Color.green);\n                    //starts a timer\n                    if (!started) {\n                        start = System.currentTimeMillis();\n                        started = true;\n                    }\n                    stop = System.currentTimeMillis();\n                    //15 minute time limit on position 1\n                    if ((stop - start) > 900000) {\n                        //puts user back into queue\n                        id = DBComm.buildID();\n                        started = false;\n                    }\n                } else {\n                    gui.Client.jbtID.setForeground(Color.red);\n                }\n                Thread.sleep(2000);\n            } catch (InterruptedException ex) {\n            }\n        }\n    }\n", "public DenseVector(List<Double> list){\n  this.array=new double[list.size()];\n  for (int i=0; i < list.size(); i++)   this.array[i]=list.get(i);\n  startIndex=0;\n  endIndex=this.array.length;\n}\n", "public Month(int month,int year){\n  if ((month < 1) || (month > 12)) {\n    throw new IllegalArgumentException(\"Month outside valid range.\");\n  }\n  this.month=month;\n  this.year=year;\n  peg(Calendar.getInstance());\n}\n", "private boolean possiblyPause() throws InterruptedException\n  {\n    pauseLock.lockInterruptibly();\n    try {\n      if (pauseRequested) {\n        status = Status.PAUSED;\n        hasPaused.signalAll();\n\n        while (pauseRequested) {\n          log.info(\"Pausing ingestion until resumed\");\n          shouldResume.await();\n        }\n\n        status = Status.READING;\n        shouldResume.signalAll();\n        log.info(\"Ingestion loop resumed\");\n        return true;\n      }\n    }\n    finally {\n      pauseLock.unlock();\n    }\n\n    return false;\n  }", "private void mergeLo(int base1,int len1,int base2,int len2){\n  T[] a=this.a;\n  T[] tmp=ensureCapacity(len1);\n  int cursor1=tmpBase;\n  int cursor2=base2;\n  int dest=base1;\n  System.arraycopy(a,base1,tmp,cursor1,len1);\n  a[dest++]=a[cursor2++];\n  if (--len2 == 0) {\n    System.arraycopy(tmp,cursor1,a,dest,len1);\n    return;\n  }\n  if (len1 == 1) {\n    System.arraycopy(a,cursor2,a,dest,len2);\n    a[dest + len2]=tmp[cursor1];\n    return;\n  }\n  Comparator<? super T> c=this.c;\n  int minGallop=this.minGallop;\n  outer:   while (true) {\n    int count1=0;\n    int count2=0;\n    do {\n      if (c.compare(a[cursor2],tmp[cursor1]) < 0) {\n        a[dest++]=a[cursor2++];\n        count2++;\n        count1=0;\n        if (--len2 == 0)         break outer;\n      }\n else {\n        a[dest++]=tmp[cursor1++];\n        count1++;\n        count2=0;\n        if (--len1 == 1)         break outer;\n      }\n    }\n while ((count1 | count2) < minGallop);\n    do {\n      count1=gallopRight(a[cursor2],tmp,cursor1,len1,0,c);\n      if (count1 != 0) {\n        System.arraycopy(tmp,cursor1,a,dest,count1);\n        dest+=count1;\n        cursor1+=count1;\n        len1-=count1;\n        if (len1 <= 1)         break outer;\n      }\n      a[dest++]=a[cursor2++];\n      if (--len2 == 0)       break outer;\n      count2=gallopLeft(tmp[cursor1],a,cursor2,len2,0,c);\n      if (count2 != 0) {\n        System.arraycopy(a,cursor2,a,dest,count2);\n        dest+=count2;\n        cursor2+=count2;\n        len2-=count2;\n        if (len2 == 0)         break outer;\n      }\n      a[dest++]=tmp[cursor1++];\n      if (--len1 == 1)       break outer;\n      minGallop--;\n    }\n while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);\n    if (minGallop < 0)     minGallop=0;\n    minGallop+=2;\n  }\n  this.minGallop=minGallop < 1 ? 1 : minGallop;\n  if (len1 == 1) {\n    System.arraycopy(a,cursor2,a,dest,len2);\n    a[dest + len2]=tmp[cursor1];\n  }\n else   if (len1 == 0) {\n    throw new IllegalArgumentException(\"Comparison method violates its general contract!\");\n  }\n else {\n    System.arraycopy(tmp,cursor1,a,dest,len1);\n  }\n}\n", "\tpublic long getOrbitPeriod(int distance) {\n\t\tlong\t\tseconds = 0;\n\t\tdouble\t\tmass = spectralType.getMass();\t\t// Relative to the mass of our sun.\n\t\tdouble\t\ta = Math.pow(distance/AU, 3);\n\t\tdouble\t\tyears = 0;\n\t\t\n\t\tyears = Math.sqrt(a / mass);\n\t\tseconds = (long)(years * 365.25 * 86400);\n\t\t\n\t\treturn seconds;\n\t}\n", "static private String BYTE_Max_Plus(){\n  long tempValue=Byte.MAX_VALUE + 1;\n  return String.valueOf(tempValue);\n}\n", "public void marshall(Lag lag, ProtocolMarshaller protocolMarshaller) {\n\n        if (lag == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(lag.getConnectionsBandwidth(), CONNECTIONSBANDWIDTH_BINDING);\n            protocolMarshaller.marshall(lag.getNumberOfConnections(), NUMBEROFCONNECTIONS_BINDING);\n            protocolMarshaller.marshall(lag.getLagId(), LAGID_BINDING);\n            protocolMarshaller.marshall(lag.getOwnerAccount(), OWNERACCOUNT_BINDING);\n            protocolMarshaller.marshall(lag.getLagName(), LAGNAME_BINDING);\n            protocolMarshaller.marshall(lag.getLagState(), LAGSTATE_BINDING);\n            protocolMarshaller.marshall(lag.getLocation(), LOCATION_BINDING);\n            protocolMarshaller.marshall(lag.getRegion(), REGION_BINDING);\n            protocolMarshaller.marshall(lag.getMinimumLinks(), MINIMUMLINKS_BINDING);\n            protocolMarshaller.marshall(lag.getAwsDevice(), AWSDEVICE_BINDING);\n            protocolMarshaller.marshall(lag.getAwsDeviceV2(), AWSDEVICEV2_BINDING);\n            protocolMarshaller.marshall(lag.getConnections(), CONNECTIONS_BINDING);\n            protocolMarshaller.marshall(lag.getAllowsHostedConnections(), ALLOWSHOSTEDCONNECTIONS_BINDING);\n            protocolMarshaller.marshall(lag.getJumboFrameCapable(), JUMBOFRAMECAPABLE_BINDING);\n            protocolMarshaller.marshall(lag.getHasLogicalRedundancy(), HASLOGICALREDUNDANCY_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public JKValidationException ( Problems problems ) { this . problems = problems ; }", "\tpublic void onEventFired() {\n\n\t\tgetCategories();\n\t\ttry{\n\t\t\tEditableListBox.winModal.destroy();\n\t\t}\n\t\tcatch(Exception e){\n\t\t\t\n\t\t}\n\t}\n", "void addTypeOnlyImports ( Node script ) { if ( ! script . isScript ( ) || ! importsNeeded . containsKey ( script . getSourceFileName ( ) ) ) { return ; } Node body = script . getFirstChild ( ) . isModuleBody ( ) ? script . getFirstChild ( ) : script ; for ( Node n : body . children ( ) ) { if ( n . isImport ( ) ) { for ( Node newImport : importsNeeded . get ( script . getSourceFileName ( ) ) ) { body . addChildBefore ( newImport , n ) ; } return ; } } for ( Node newImport : importsNeeded . get ( script . getSourceFileName ( ) ) ) { script . addChildToFront ( newImport ) ; } }", "public Alarm saveAlarm(int month,int date,int hour,int minute){\n  Alarm alarm=new Alarm();\n  alarm.id=SECURE_RANDOM.nextInt();\n  alarm.month=month;\n  alarm.date=date;\n  alarm.hour=hour;\n  alarm.minute=minute;\n  SharedPreferences.Editor editor=mSharedPreferences.edit();\n  editor.putString(String.valueOf(alarm.id),alarm.toJson());\n  editor.apply();\n  return alarm;\n}\n", "public static void closeSession() throws HibernateException {\n  Session session=(Session)threadLocal.get();\n  threadLocal.set(null);\n  if (session != null) {\n    session.close();\n  }\n}\n", "private void findSeparator ( ) { pos = MultipartReader . this . findSeparator ( ) ; if ( pos == - NUM_ ) { if ( tail - head > keepRegion ) { pad = keepRegion ; } else { pad = tail - head ; } } }", "@Override\n    public ListFileSharesResult listFileShares(ListFileSharesRequest request) {\n        request = beforeClientExecution(request);\n        return executeListFileShares(request);\n    }", "protected String handleLong ( ResultSet rs , int columnIndex ) throws SQLException { long lv = rs . getLong ( columnIndex ) ; return rs . wasNull ( ) ? STR_ : Long . toString ( lv ) ; }", "public Set < String > keyNames ( ) { return properties . keySet ( ) ; }", "  public void setNumFolds(int numFolds) {\n\n    if (numFolds < 0) {\n      throw new IllegalArgumentException(\"Number of folds has to be positive or zero.\");\n    }\n    m_NumFolds = numFolds;\n  }\n", "public ListTagOptionsResult withTagOptionDetails(TagOptionDetail... tagOptionDetails) {\n        if (this.tagOptionDetails == null) {\n            setTagOptionDetails(new java.util.ArrayList<TagOptionDetail>(tagOptionDetails.length));\n        }\n        for ", "public boolean signal()\n    {\n        if (!hasWaiters())\n            return false;\n        while (true)\n        {\n            RegisteredSignal s = queue.poll();\n            if (s == null || s.signal() != null)\n                return s != null;\n        }\n    }", "private int element(IAtom atom) {\n        Integer element = atom.getAtomicNumber();\n        if (element != null) return element;\n        if (atom instanceof IPseudoAtom) return 0;\n        throw new IllegalArgumentException(\"Aromaiticty model requires atomic numbers to be set\");\n    }", "public boolean isWithinDistance(Location loc){\n  double dx=Math.abs(location.getX() - loc.getX());\n  double dz=Math.abs(location.getZ() - loc.getZ());\n  return loc.getWorld() == getWorld() && dx <= server.getViewDistance() * GlowChunk.WIDTH && dz <= server.getViewDistance() * GlowChunk.HEIGHT;\n}\n", "public MultiMatchQueryBuilder field(String field,float boost){\n  fields.add(field);\n  if (fieldsBoosts == null) {\n    fieldsBoosts=new ObjectFloatHashMap<>();\n  }\n  fieldsBoosts.put(field,boost);\n  return this;\n}\n", "    public void add(final K key, final V value) {\n\n        // find any existing inner list\n        List<V> innerList = super.get(key);\n\n        // create new inner list if one doesn't exist yet\n        if (innerList == null) {\n            innerList = new ArrayList<V>();\n            super.put(key, innerList);\n        }\n\n        // add to the inner list\n        innerList.add(value);\n    }\n", "public Builder cacheInMemory ( boolean cacheInMemory ) { this . cacheInMemory = cacheInMemory ; return this ; }", "public CPreviousDirectoriesBox ( final List < String > previousDirectories ) { for ( final String directory : previousDirectories ) { addItem ( directory ) ; } }", "public void addTexture(int unit, Texture texture) {\n        if (texture == null) {\n            throw new IllegalStateException(\"Texture cannot be null\");\n        }\n        texture.checkCreated();\n        if (textures == null) {\n            textures = new TIntObjectHashMap<>();\n        }\n        textures.put(unit, texture);\n    }", "        public Object invoke(HttpSession session, DataInput input) throws Exception {\n\n            br.com.java.hypers.colossus.denuncias_sugestoes.dto.DtoAndamento instance = (br.com.java.hypers.colossus.denuncias_sugestoes.dto.DtoAndamento)session .getAttribute(\"br.com.java.hypers.colossus.denuncias_sugestoes.dto.DtoAndamento\");\n            if (instance == null) {\n                instance = (br.com.java.hypers.colossus.denuncias_sugestoes.dto.DtoAndamento) Class.forName(\"br.com.java.hypers.colossus.denuncias_sugestoes.dto.DtoAndamento\").newInstance();\n                session.setAttribute(\"br.com.java.hypers.colossus.denuncias_sugestoes.dto.DtoAndamento\", instance);\n            }\n            return instance.getNo_Andamento();\n        }\n", "  public void addMonster(Monster pc) {\n    getAllMobiles().put(pc);\n    mobileNameMap.put(pc.getMobileName(), pc.getID());\n  }\n", "    public AccessibleContext getAccessibleContext() {\n        if (accessibleContext == null) {\n            accessibleContext = new AccessibleAWTTextArea();\n        }\n        return accessibleContext;\n    }\n", "public CEdgeLabelEnterState ( final CStateFactory < NodeType , EdgeType > factory , final AbstractZyGraph < NodeType , EdgeType > graph , final EdgeLabel label ) { m_factory = Preconditions . checkNotNull ( factory , STR_ ) ; m_graph = Preconditions . che", "public static void showMaximized(Frame frame){\n  frame.pack();\n  frame.setExtendedState(Frame.MAXIMIZED_BOTH);\n  frame.setVisible(true);\n  frame.toFront();\n}\n", "private void installTitlePane ( ) { installDefaults ( ) ; installListeners ( ) ; createActions ( ) ; enableActions ( ) ; createActionMap ( ) ; setLayout ( createLayout ( ) ) ; assembleSystemMenu ( ) ; createButtons ( ) ; addSubComponents ( ) ; }", "public void CreateCoordinationContextOperation(CreateCoordinationContext context) {\n\t\tthis.manager.createCoordinationContext(context, this.getRequest());\n\t}", "@Deprecated\n    public void marshalMarshall(Object o, OutputStream out) {\n        try {\n            XStream xStream = newXStream();\n            out.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\".getBytes());\n            OutputStreamWriter ows = new OutputStreamWriter(out, \"UTF-8\");\n            xStream.toXML(o, ows);\n        } catch ( Exception e ) {\n            e.printStackTrace();\n        }\n    }", "    public DateTimeField secondOfMinute() {\n        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());\n    }\n", "public void add(String fieldName,String value){\n  if (fieldName == null)   throw new IllegalArgumentException(\"fieldname == null\");\n  if (value == null)   throw new IllegalArgumentException(\"value == null\");\n  if (fieldName.length() == 0 || fieldName.indexOf('\\0') != -1 || value.indexOf('\\0') != -1) {\n    throw new IllegalArgumentException(\"Unexpected header: \" + fieldName + \": \"+ value);\n  }\n  addLenient(fieldName,value);\n}\n", "public static void setDefaultFormatter (@Nonnull final BiConsumer <String, BootstrapSystemMessage> aFormatter)\n  {\n    ValueEnforcer.notNull (aFormatter, \"Formatter\");\n    s_aRWLock.writeLocked ( () -> s_aFormatter = aFormatter);\n  }", "public <T, K> JacksonDBCollection<T, K> getReferenceCollection(JacksonCollectionKey collectionKey) {\n        JacksonDBCollection<T, K> collection = referencedCollectionCache.get(collectionKey);\n        if (collection == null) {\n            collection = new JacksonDBCollection<T, K>(getDB().getCollection(collectionKey.getName()),\n                    collectionKey.getType(), collectionKey.getKeyType(), objectMapper, features);\n            referencedCollectionCache.put(collectionKey, collection);\n        }\n        return collection;\n    }", "public static boolean containsAny(CharSequence cs,char... searchChars){\n  if (isEmpty(cs) || isEmpty(searchChars)) {\n    return false;\n  }\n  int csLength=cs.length();\n  int searchLength=searchChars.length;\n  int csLast=csLength - 1;\n  int searchLast=searchLength - 1;\n  for (int i=0; i < csLength; i++) {\n    char ch=cs.charAt(i);\n    for (int j=0; j < searchLength; j++) {\n      if (searchChars[j] == ch) {\n        if (Character.isHighSurrogate(ch)) {\n          if (j == searchLast) {\n            return true;\n          }\n          if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n            return true;\n          }\n        }\n else {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n", "public static boolean exists(File file) {\n        try {\n            boolean fileExists = file.exists();\n            if(!forceCaseSensitive || !fileExists) {\n                return fileExists;\n            }\n\n            String absPath = canonicalize(file.g", "public void closeContext ( ) { try { if ( context != null ) { context . close ( ) ; } } catch ( Throwable t ) { getLog ( ) . warn ( STR_ , t ) ; } context = null ; }", "void openConnection() throws SQLException {\n  conn=openNewConnection();\n  stat=conn.createStatement();\n}\n", "boolean isGenOp ( SyntaxTreeNode tn ) { int kind = tn . getKind ( ) ; if ( kind == N_GenPrefixOp || kind == N_GenNonExpPrefixOp || kind == N_GenInfixOp || kind == N_GenPostfixOp || kind == N_FcnAppl ) return BOOL_ ; else return BOOL_ ; }", "        public void clearLayoutData() {\n            for (CColumnData d:columnData.values()) d.clearLayoutData();\n        }\n", "\tpublic void removeFileOptionModelMap(String path) {\n\t\tthis.filePathToOptionModelMap.remove(path);\n\t}\n", "public void marshall(TargetTrackingConfiguration targetTrackingConfiguration, ProtocolMarshaller protocolMarshaller) {\n\n        if (targetTrackingConfiguration == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(targetTrackingConfiguration.getPredefinedScalingMetricSpecification(), PREDEFINEDSCALINGMETRICSPECIFICATION_BINDING);\n            protocolMarshaller.marshall(targetTrackingConfiguration.getCustomizedScalingMetricSpecification(), CUSTOMIZEDSCALINGMETRICSPECIFICATION_BINDING);\n            protocolMarshaller.marshall(targetTrackingConfiguration.getTargetValue(), TARGETVALUE_BINDING);\n            protocolMarshaller.marshall(targetTrackingConfiguration.getDisableScaleIn(), DISABLESCALEIN_BINDING);\n            protocolMarshaller.marshall(targetTrackingConfiguration.getScaleOutCooldown(), SCALEOUTCOOLDOWN_BINDING);\n            protocolMarshaller.marshall(targetTrackingConfiguration.getScaleInCooldown(), SCALEINCOOLDOWN_BINDING);\n            protocolMarshaller.marshall(targetTrackingConfiguration.getEstimatedInstanceWarmup(), ESTIMATEDINSTANCEWARMUP_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "@Override public void writeEmptyElement(String prefix,String localName,String namespaceURI) throws XMLStreamException {\n  log.log(Level.FINE,\"writeEmptyElement({0}, {1}, {2})\",new Object[]{prefix,localName,namespaceURI});\n  calculateAndNextTag();\n}\n", "public void sleep ( long delayMs ) throws InterruptedException ;", "protected String getAttributeValue(MBeanServerExecutor pMBeanServerExecutor, final ObjectName pMBean, final String pAttribute) {\n        try {\n            return pMBeanServerExecutor.call(pMBean, GET_ATTRIBUTE_HANDLER, pAttribute);\n        } catch (IOException e) {\n            return null;\n        } catch (ReflectionException e) {\n            return null;\n        } catch (JMException e) {\n            return null;\n        }\n    }", "void analyze(final MethodResult methodResult) {\n        lock.lock();\n        try {\n            buildPackagePrefix(methodResult.getParentResource().getOriginalClass());\n\n            determineReturnTypes(methodResult).stream()\n                    // FEATURE handle several sub-resource impl's\n                    .reduce((l, r) -> JavaUtils.determineMostSpecificType(l, r))\n                    .ifPresent(t -> registerSubResourceJob(t, methodResult.getSubResource()));\n        } finally {\n            lock.unlock();\n        }\n    }", "public static String createVltFilePath(Shell shell,String text,int style,String defaultFileName){\n  return createFilePath(shell,text,PreferenceConstants.DEFAULT_FOLDER_VLT,vltExtensions,style,defaultFileName);\n}\n", "void inform ( final CommentManager manager ) throws CouldntLoadDataException ;", "    public boolean equals(OrderedReversePath o) {\n\tif (o == null)\n\t    return false;\n\telse\n\t    return compareTo(o) == 0;\n    }\n", "\tpublic void saveHistory() {\n\t\tfinal IDialogSettings settings= fWizard.getDialogSettings();\n\t\tif (settings != null) {\n\t\t\tfinal LinkedList locations= new LinkedList();\n\t\t\tfinal String[] items= fCombo.getItems();\n\t\t\tfor (int index= 0; index < items.length; index++)\n\t\t\t\tlocations.add(items[index]);\n\t\t\tfinal String text= fCombo.getText().trim();\n\t\t\tif (!\"\".equals(text)) { //$NON-NLS-1$\n\t\t\t\tlocations.remove(text);\n\t\t\t\tlocations.addFirst(text);\n\t\t\t}\n\t\t\tfinal int size= locations.size();\n\t\t\tfor (int index= 0; index < size - MAX_HISTORY_SIZE; index++)\n\t\t\t\tlocations.removeLast();\n\t\t\tsettings.put(fKey, (String[]) locations.toArray(new String[locations.size()]));\n\t\t}\n\t}\n", "private void saveIntegerSettings(){\n  for (  String settingName : longSettings.keySet()) {\n    LongSetting setting=longSettings.get(settingName);\n    Long value=setting.getSettingValue();\n    if (value != null) {\n      if (settings.setLong(settingName,setting.getSettingValue()) == Setting.CHANGED) {\n        changed(settingName);\n      }\n    }\n else {\n      LOGGER.warning(\"Invalid number format for setting \" + settingName);\n    }\n  }\n}\n", "public java.util.List<BGPPeer> getBgpPeers() {\n        if (bgpPeers == null) {\n            bgpPeers = new com.amazonaws.internal.SdkInternalList<BGPPeer>();\n        }\n        return bgpPeers;\n    }", "void copyDeviceRssi ( IEspDevice device ) ;", "public static boolean processDefinedGlobalScalarNames ( Project project , Processor < String > processor ) { return PerlStubIndex . getInstance ( ) . processAllKeys ( PerlVariablesStubIndex . KEY_SCALAR , project , processor ) ; }", "public void marshall(PhysicalConnectionRequirements physicalConnectionRequirements, ProtocolMarshaller protocolMarshaller) {\n\n        if (physicalConnectionRequirements == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(physicalConnectionRequirements.getSubnetId(), SUBNETID_BINDING);\n            protocolMarshaller.marshall(physicalConnectionRequirements.getSecurityGroupIdList(), SECURITYGROUPIDLIST_BINDING);\n            protocolMarshaller.marshall(physicalConnectionRequirements.getAvailabilityZone(), AVAILABILITYZONE_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void onSetAttackTarget ( EntityLivingBase target ) { attackTarget = target ; if ( nextMod != null ) { nextMod . onSetAttackTarget ( target ) ; } }", "public void addTotals(Info_Column[] layout){\n  addTotals((ColumnInfo[])layout);\n}\n", "protected boolean readBoolSetting ( final String key ) throws CouldntLoadDataException { return Boolean . parseBoolean ( readSetting ( key ) ) ; }", "  public double getMeanFrameDuration(){\n    int count = video.getEndFrameNumber() - video.getStartFrameNumber();\n    if (count != 0) {\n      double ti = video.getFrameTime(video.getStartFrameNumber());\n      double tf = video.getFrameTime(video.getEndFrameNumber());\n      return timeStretch * (tf - ti) / count;\n    }\n    return timeStretch * video.getDuration()/video.getFrameCount();\n  }\n", "    public boolean canBeFired() {\n        Iterator<Arc> iter=impl.getIncomingArcsIterator();\n        while(iter.hasNext()) {\n            if (! iter.next().canBeFired())\n                return false;\n        }\n        return true;\n    }\n", "    public BasicDTO doLoad(IPersistenceObject persistenceObject, BasicDTO dtoArg) throws BasicException {\n    \tBasicDTO dto = null;\n        try{\n    \t\tString filter = this.beforeLoad(persistenceObject,  dtoArg);\n    \t\tdto = (BasicDTO)persistenceObject.load(dtoArg, filter);\n    \t\tif (dto != null){\n    \t\t\tdto.setLocale(dtoArg.getLocale());\n    \t\t\tdto.setSecurityAuth(dtoArg.getSecurityAuth());\n    \t\t}\n    \t\tdto = this.afterLoad(persistenceObject,  dto);\n    \t}catch(BasicException e){\n    \t\tthrow e;    \t\t    \t\t\n    \t}catch(Exception e){\n    \t\tthrow BasicException.basicErrorHandling(\"Error loading object\", \"errorBOLoadingObject\", e, log);\n    \t}\n    \t\t\n        return dto;\n    }\n", "    public void simpeShow() {\n    \tthis.dialog.setVisible(true);\n    }\n", "public static IBond.Order getMinimumBondOrder(Iterator<IBond> bonds) {\n        IBond.Order minOrder = IBond.Order.SEXTUPLE;\n        while (bonds.hasNext()) {\n            IBond bond = bonds.next();\n            if (isLowerOrder(bond.getOrder(), minOrder)) minOrder = bond.getOrder();\n        }\n        return minOrder;\n    }", "public static void write ( File file , CharSequence data ) throws IOException { write ( file , data , Charset . defaultCharset ( ) , BOOL_ ) ; }", "private Part lastPart(){\n  return parts.get(parts.size() - 1);\n}\n", "@SuppressWarnings(\"unchecked\")\r\n    protected void flushText() throws IOException {\r\n        ArrayList<TextPiece> wordsOfThisPage = new ArrayList<TextPiece>();\r\n\r\n        for (int i = 0; i < charactersByArticle.size(); i++) {\r\n            ArrayList<TextPosition> textList = (ArrayList<TextPosition>) charactersByArticle\r\n                    .get(i);\r\n            for (TextPosition t : textList) {\r\n\r\n                // copy information\r\n\r\n                TextPiece w = new TextPiece();\r\n                w.setX(t.getX());\r\n                w.setY(t.getY());\r\n\r\n                /*\r\n                 * 100: a simple step to fix the font size to the normal range,\r\n                 * for those documents in unknown codes that PDFBox can not\r\n                 * process now\r\n                 */\r\n                if (t.getFontSize() < 0.3 && t.getYScale() <= 1.0) {\r\n                    w.setFontSize(t.getFontSize() * 100);\r\n                    w.setHeight(Math.max(t.getYScale(), t.getFontSize()) * 100);\r\n                    w.setXScale(t.getXScale());\r\n                    w.setYScale(t.getYScale());\r\n                } else {\r\n                    if (t.getYScale() < 0.3 && t.getFontSize() <= 1.0) {\r\n                        w.setYScale(t.getYScale() * 100);\r\n                        w.setXScale(t.getXScale() * 100);\r\n                        w.setHeight(Math.max(t.getYScale() * 100,\r\n                                t.getFontSize()));\r\n                    } else {\r\n                        w.setFontSize(t.getFontSize());\r\n                        w.setHeight(Math.max(t.getYScale(), t.getFontSize()));\r\n                        w.setXScale(t.getXScale());\r\n                        w.setYScale(t.getYScale());\r\n                    }\r\n                }\r\n\r\n                // Width might be negative according to the PDF text extractors\r\n                w.setWidth(Math.abs(t.getWidth()));\r\n                w.setEndX(w.getX() + w.getWidth());\r\n\r\n                // w.setHeight(Math.max(t.getYScale(), t.getFontSize()));\r\n                w.setEndY(w.getY() + w.getHeight());\r\n\r\n                w.setWidthOfSpace(t.getWidthOfSpace());\r\n                w.setWordSpacing(t.getWordSpacing());\r\n\r\n                w.setText(t.getCharacter());\r\n                wordsOfThisPage.add(w);\r\n            }\r\n        }\r\n\r\n        m_wordsByPage.add(wordsOfThisPage);\r\n    }", "public Version getVersion() throws GitLabApiException {\n\n        class VersionApi extends AbstractApi {\n            VersionApi(GitLabApi gitlabApi) {\n                super(gitlabApi);\n            }\n        }\n\n        Response response = new VersionApi(this).get(Response.Status.OK, null, \"version\");\n        return (response.readEntity(Version.class));\n    }", "public void connect(int timeout,String host,int tcpPort,int udpPort) throws IOException {\n  connect(timeout,InetAddress.getByName(host),tcpPort,udpPort);\n}\n", "    public String getText() {\n        //return (String) getValue();\n        Object value = getValue();\n        if (value == null) {\n            return null;\n        } else {\n            return value.toString();\n        }\n    }\n", "public boolean isInactive ( ) { return ( mAudioOutput . getLastActivityTimestamp ( ) + AUDIO_TIMEOUT ) < System . currentTimeMillis ( ) ; }", "static Executor screenExecutor(Executor e) {\n        if (!USE_COMMON_POOL && e == ForkJoinPool.commonPool())\n            return ASYNC_POOL;\n        if (e == null) throw new NullPointerException();\n        return e;\n    }", "public Vec2D relativeTo ( Vec2D otherVector ) { return subtract ( otherVector ) ; }", "    public void recordFrame() {\n        super.recordFrame();\n        recordFrameNum++;\n        try {\n            qid.redraw(null);\n            CompressedFrameInfo info = seq.compressFrame(gw,\n                rect,\n                codecFlagUpdatePrevious,\n                compressedImage);\n            boolean isKeyFrame = info.getSimilarity() == 0;\n            vidMedia.addSample(imageHandle,\n                0, // dataOffset,\n                info.getDataSize(),\n                1, //60, // frameDuration, 60/600 = 1/10 of a second, desired time per viewFrame\n                desc,\n                1, // one sample\n                (isKeyFrame ? 0 : mediaSampleNotSync)); // no flags\n        } catch (Exception e) {\n            e.printStackTrace();\n            QTSession.close();\n        }\n    }\n", "\tpublic Object addTimeInterval(double seconds){\n\t\tthrow new RuntimeException(\"Stub\");\n\t}\n", "public static void registerBlockedThreadHandler(BlockedThreadHandler handler, Thread thread) {\n\t\tsynchronized (blockedHandlers) {\n\t\t\tblockedHandlers.put(thread, handler);\n\t\t}\n\t}", "public synchronized void editInstructionComment ( final INaviInstruction instruction , final INaviCodeNode node , final IComment comment , final IComment newComment , final CommentScope scope ) { Preconditions . checkNotNull ( instruction , STR_ ) ; editCommentInternal ( new InstructionCommentingStrategy ( instruction , node , scope ) , comment , newComment ) ; }", "private void endArguments ( ) { if ( argumentStack % NUM_ != NUM_ ) { buf . append ( STR_ ) ; } argumentStack /= NUM_ ; }", "void startVisit ( Group group ) ;", "void sendRequest(MultiplexConnectionInfo info,int len) throws IOException {\nsynchronized (dataOut) {\n    if (alive && !info.closed)     try {\n      dataOut.writeByte(REQUEST);\n      dataOut.writeShort(info.id);\n      dataOut.writeInt(len);\n      dataOut.flush();\n    }\n catch (    IOException e) {\n      multiplexLog.log(Log.BRIEF,\"exception: \",e);\n      shutDown();\n      throw e;\n    }\n  }\n}\n", "public Object next(){\n  return enm.nextElement();\n}\n", "public CreateIndexRequest mapping(String type,Object... source){\n  mapping(type,PutMappingRequest.buildFromSimplifiedDef(type,source));\n  return this;\n}\n", "    public void setLocalHost(String host) {\n        dcmQR.setLocalHost(host);\n        dcmRcv.setHostname(host);\n        dcmSnd.setLocalHost(host);\n    }\n", "\tpublic boolean willAcceptChildOfClass(Class aNewClass) {\n\t\tNSArray myArray = acceptableClassesOfChildren();\n\t\tEnumeration myEnum = myArray.objectEnumerator();\n\t\tClass myClass;\n\n\t\twhile (myEnum.hasMoreElements()) {\n\t\t\tmyClass = (Class) myEnum.nextElement();\n\n\t\t\twhile (myClass != Object.class) {\n\t\t\t\tif (myClass == aNewClass)\n\t\t\t\t\treturn true;\n\t\t\t\tmyClass = myClass.getSuperclass();\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n", "@Override public MultivariateTable queryProb(Query.ProbQuery query){\n  BNetwork network=query.getNetwork();\n  Set<String> queryVars=new HashSet<String>(query.getQueryVars());\n  Assignment evidence=query.getEvidence();\n  Map<Assignment,Double> fullJoint=getFullJoint(network,false);\n  SortedMap<String,Set<Value>> queryValues=new TreeMap<String,Set<Value>>();\n  for (  ChanceNode n : network.getChanceNodes()) {\n    if (queryVars.contains(n.getId())) {\n      queryValues.put(n.getId(),n.getValues());\n    }\n  }\n  Set<Assignment> queryAssigns=InferenceUtils.getAllCombinations(queryValues);\n  MultivariateTable.Builder queryResult=new MultivariateTable.Builder();\n  for (  Assignment queryA : queryAssigns) {\n    double sum=0.0f;\n    for (    Assignment a : fullJoint.keySet()) {\n      if (a.contains(queryA) && a.contains(evidence)) {\n        sum+=fullJoint.get(a);\n      }\n    }\n    queryResult.addRow(queryA,sum);\n  }\n  queryResult.normalise();\n  return queryResult.build();\n}\n", "private void extractCurrPtInfo(){\n  mCurrPtX=mCurrPt.getX();\n  mCurrPtY=mCurrPt.getY();\n  mCurrPtDiam=Math.max(MIN_MULTITOUCH_SEPARATION * .71f,!mCurrXform.updateScale ? 0.0f : mCurrPt.getMultiTouchDiameter());\n  mCurrPtWidth=Math.max(MIN_MULTITOUCH_SEPARATION,!mCurrXform.updateScaleXY ? 0.0f : mCurrPt.getMultiTouchWidth());\n  mCurrPtHeight=Math.max(MIN_MULTITOUCH_SEPARATION,!mCurrXform.updateScaleXY ? 0.0f : mCurrPt.getMultiTouchHeight());\n  mCurrPtAng=!mCurrXform.updateAngle ? 0.0f : mCurrPt.getMultiTouchAngle();\n}\n", "public static void handleStaleStatement(WSJdbcWrapper jdbcWrapper) {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled())\n            Tr.event(tc, \"Encountered a Stale Statement: \" + jdbcWrapper);\n\n        if (jdbcWrapper instanceof WSJdbcObject)\n            try {\n                WSJdbcConnection connWrapper =\n                                (WSJdbcConnection) ((WSJdbcObject) jdbcWrapper).getConnectionWrapper(); \n\n                WSRdbManagedConnectionImpl mc = connWrapper.managedConn;\n\n                // Instead of closing the statements, mark them as\n                // not poolable so that they are prevented from being cached again when closed.\n                connWrapper.markStmtsAsNotPoolable(); \n\n                // Clear out the cache.\n                if (mc != null)\n                    mc.clearStatementCache();\n            } catch (NullPointerException nullX) {\n                // No FFDC code needed; probably closed by another thread.\n                if (!((WSJdbcObject) jdbcWrapper).isClosed())\n                    throw nullX; \n            }\n    }", "  public ProcessInstance newProcessInstanceForUpdate(String processDefinitionName) {\n    ProcessDefinition processDefinition = getGraphSession().findLatestProcessDefinition(processDefinitionName);\n    ProcessInstance processInstance = new ProcessInstance(processDefinition);\n    addAutoSaveProcessInstance(processInstance);\n    return processInstance;\n  }\n", "void createTypeSubstitution ( int treeNodeId , final int baseTypeId , final List < Integer > memberPath , final int position , final int offset , final IAddress address , final INaviModule module ) throws CouldntSaveDataException ;", "public void putDialog(SIPDialog dialog){\n  String dialogId=dialog.getDialogId();\n  if (dialogTable.containsKey(dialogId)) {\n    if (isLoggingEnabled()) {\n      stackLogger.logDebug(\"putDialog: dialog already exists\" + dialogId + \" in table = \"+ dialogTable.get(dialogId));\n    }\n    return;\n  }\n  if (isLoggingEnabled()) {\n    stackLogger.logDebug(\"putDialog dialogId=\" + dialogId + \" dialog = \"+ dialog);\n  }\n  dialog.setStack(this);\n  if (isLoggingEnabled())   stackLogger.logStackTrace();\n  dialogTable.put(dialogId,dialog);\n}\n", "@Override public void onTearDown() throws Exception {\n  super.onTearDown();\n  solRSynchroniser.deleteAll();\n}\n", "\tpublic String readLine() throws IOException {\n\t\teraser = new PasswordEraserThread(\"Enter project password (will not be echoed): \");\n\t\teraser.start();\n\t\tpassword = br.readLine();\n\t\teraser.stopMasking();\n\t\teraser = null;\n\t\treturn password;\n\t}\n", "public void setConsumerActive(boolean active)\n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(tc, \"setConsumerActive\", active);\n    if(active)\n    {\n      consumerThreadID = Thread.currentThread().getId();\n    }\n    else\n    {\n      consumerThreadID = 0;\n    }\n    consumerThreadActive = active;\n\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.exit(tc, \"setConsumerActive\", consumerThreadID);\n  }", "public void reverse(){\n  final ArrayList<Animator> animators=mAnimatedVectorState.mAnimators;\n  final int size=animators.size();\n  for (int i=0; i < size; i++) {\n    final Animator animator=animators.get(i);\n    if (canReverse(animator)) {\n      reverse(animator);\n    }\n else {\n      Log.w(LOG_TAG,\"AnimatedVectorDrawable can't reverse()\");\n    }\n  }\n}\n", "    public boolean isSubdomain() {\n        return isSubdomain;\n    }\n", "public static String capitalize(String s)\n    {\n        if (s == null || s.length() == 0)\n        {\n            return s;\n        }\n        char chars[] = s.toCharArray();\n        chars[0] = Character.toUpperCase(chars[0]);\n        return new String(chars);\n    }", "void initializeComment ( final List < IComment > comments ) ;", "public synchronized void validate ( ) throws RuntimeException { if ( head == null ) { if ( tail != null ) bug ( STR_ ) ; else if ( array . size ( ) != NUM_ ) bug ( STR_ ) ; } else { if ( tail == null ) bug ( STR_ ) ; else if ( head . before != null ) bug ( STR_ + head . after ) ; else if ( tail . after != null ) bug ( STR_ + tail . after ) ; else { ThreadPosition tp = head ; int linkedSize ; for ( linkedSize = NUM_ ; linkedSize < array . size ( ) ; linkedSize ++ ) { if ( tp . after == null ) break ; else tp = tp . after ; } if ( linkedSize != array . size ( ) ) bug ( STR_ + linkedSize + STR_ + array . size ( ) ) ; if ( tp != tail ) bug ( STR_ + tp + STR_ + tail + STR_ ) ; } } }", "@Override\n    public void setClientInformationArray(String[] clientInfoArray, WSRdbManagedConnectionImpl mc, boolean explicitCall) throws SQLException {\n        final boolean isTraceOn = TraceComponent.isAnyTracingEnabled(); \n\n        if (isTraceOn && tc.", "public void marshall(DeleteApiMappingRequest deleteApiMappingRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (deleteApiMappingRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(deleteApiMappingRequest.getApiMappingId(), APIMAPPINGID_BINDING);\n            protocolMarshaller.marshall(deleteApiMappingRequest.getDomainName(), DOMAINNAME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "\tprivate void completeArgFromAttributes(Attributes attr) {\n\t\tString name = attr.getValue(NAME);\n\t\tString value = attr.getValue(VALUE);\n\t\tString def = name;\n\t\tif (value!=null){\n\t\t\tdef += \" = \"+value;\n\t\t}\n\t\targ=def;\n\t}\n", "public int doEndTag() throws JspException\n    {\n        Tag parent = getParent();\n        if (parent instanceof CheckBoxGroup)\n            registerTagError(Bundle.getString(\"Tags_CheckBoxGroupChildError\"), null);\n\n        Object val = evaluateDataSource();\n        if (hasErrors())\n            return reportAndExit(EVAL_PAGE);\n\n        ByRef ref = new ByRef();\n        nameHtmlControl(_state, ref);\n\n        String hiddenParamName = _state.name + OLDVALUE_SUFFIX;\n        ServletRequest req = pageContext.getRequest();\n\n        if (val instanceof String) {\n            if (val != null && Boolean.valueOf(val.toString()).booleanValue())\n                _state.checked = true;\n            else\n                _state.checked = false;\n        }\n        else if (val instanceof Boolean) {\n            _state.checked = ((Boolean) val).booleanValue();\n        }\n        else {\n            String oldCheckBoxValue = req.getParameter(hiddenParamName);\n            if (oldCheckBoxValue != null) {\n                _state.checked = new Boolean(oldCheckBoxValue).booleanValue();\n            }\n            else {\n                _state.checked = evaluateDefaultValue();\n            }\n        }\n        _state.disabled = isDisabled();\n\n        //Create a hidden field to store the CheckBox oldValue\n        String oldValue = req.getParameter(_state.name);\n        WriteRenderAppender writer = new WriteRenderAppender(pageContext);\n\n        // if the checkbox is disabled we need to not write out the hidden\n        // field because it can cause the default state to change from\n        // true to false.  Disabled check boxes do not postback.\n        if (!_state.disabled) {\n            _hiddenState.name = hiddenParamName;\n            if (oldValue == null) {\n                _hiddenState.value = \"false\";\n            }\n            else {\n                _hiddenState.value = oldValue;\n            }\n            TagRenderingBase hiddenTag = TagRenderingBase.Factory.getRendering(TagRenderingBase.INPUT_HIDDEN_TAG, req);\n            hiddenTag.doStartTag(writer, _hiddenState);\n            hiddenTag.doEndTag(writer);\n        }\n\n        _state.type = INPUT_CHECKBOX;\n\n        TagRenderingBase br = TagRenderingBase.Factory.getRendering(TagRenderingBase.INPUT_BOOLEAN_TAG, req);\n        br.doStartTag(writer, _state);\n\n        if (!ref.isNull())\n            write((String) ref.getRef());\n\n        // Continue processing this page\n        localRelease();\n        return EVAL_PAGE;\n    }", "    public LabyPosition getFrontalPosition() {\n        int x = getPosition().getX();\n        int y = getPosition().getY();\n        World.Direction dir = getDirection();\n        if(dir == World.Direction.NORTH) {\n            y = y - 1;\n        } else if (dir == World.Direction.SOUTH) {\n            y = y + 1;\n        } else if (dir == World.Direction.EAST) {\n            x = x + 1;\n        } else if (dir == World.Direction.WEST) {\n            x = x - 1;\n        }\n        return new LabyPosition(x, y, getPosition().getZ());\n    }\n", "public static void terminate ( ) { final ToolboxLifecycleParticipant [ ] participants = getRegisteredTools ( ) ; Assert . isNotNull ( participants ) ; for ( int i = NUM_ ; i < participants . length ; i ++ ) { participants [ i ] . terminate ( ) ; } }", "  public void closeAndKeep () throws Exception {\n    try {\n      log.debug (\"Closing turbine \" + serverName + \" with cache and archive.\");\n      this.source.Detach();\n    } catch (Exception e) {\n      log.error (\"Error closing turbine: \" + e);\n      throw e;\n    }\n  } // close ()\n", "public void centerNextSearchHit ( final boolean cycleBackwards , final boolean zoomToResult ) { final String text = getText ( ) ; if ( STR_ . equals ( text ) ) { m_searcher . clearResults ( ) ; m_graph . updateGraphViews ( ) ; notifyListeners ( ) ; return ; } searchFor ( text , cycleBackwards , zoomToResult ) ; }", "public static List<String> readLinesInList(final File input, final boolean trim)\n\t\tthrows FileNotFoundException, IOException\n\t{\n\t\treturn readLinesInList(new FileInputStream(input), trim);\n\t}", "public SpaceTypeDescriptorBuilder addFixedProperty ( String propertyName , String propertyTypeName ) { return addFixedProperty ( propertyName , propertyTypeName , SpaceDocumentSupport . DEFAULT , StorageType . DEFAULT ) ; }", "public void marshall(DescribeConfigurationRecorderStatusRequest describeConfigurationRecorderStatusRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (describeConfigurationRecorderStatusRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(describeConfigurationRecorderStatusRequest.getConfigurationRecorderNames(), CONFIGURATIONRECORDERNAMES_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void setTimePicker(TimePicker timePicker, int hour, int minute) {\n\t\tif(config.commandLogging){\n\t\t\tLog.d(config.commandLoggingTag, \"setTimePicker(\"+timePicker+\", \"+hour+\", \"+minute+\")\");\n\t\t}\n\t\t\n\t\ttimePicker = (TimePicker) waiter.waitForView(timePicker, Timeout.getSmallTimeout());\n\t\tsetter.setTimePicker(timePicker, hour, minute);\n\t}", "public void showBadgeAtIndex(int itemIndex,int badgeText,@ColorInt int badgeColor){\n  if (itemIndex < 0 || itemIndex > spaceItems.size()) {\n    throwArrayIndexOutOfBoundsException(itemIndex);\n  }\n else {\n    RelativeLayout badgeView=badgeList.get(itemIndex);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n      badgeView.setBackground(BadgeHelper.makeShapeDrawable(badgeColor));\n    }\n else {\n      badgeView.setBackgroundDrawable(BadgeHelper.makeShapeDrawable(badgeColor));\n    }\n    BadgeItem badgeItem=new BadgeItem(itemIndex,badgeText,badgeColor);\n    BadgeHelper.showBadge(badgeView,badgeItem,shouldShowBadgeWithNinePlus);\n    badgeSaveInstanceHashMap.put(itemIndex,badgeItem);\n  }\n}\n", "    public int getOptionsAlign () {\n        getterCalled ();\n        return optionsAlign;\n    }\n", "public ConnectionFactoryBuilder setProtocol(Protocol prot) {\n    switch (prot) {\n    case TEXT:\n      opFact = new AsciiOperationFactory();\n      break;\n    case BINARY:\n      opFact = new BinaryOperationFactory();\n      break;\n    default:\n      assert f", "    public String extract(int start, int end) {\n\n        if ((start < 0) || (start >= end) || (end > length))\n            return (\"\");\n        else\n            return (string.substring(start, end));\n\n    }\n", "@Override\n\tpublic void doRender(final WComponent component, final WebXmlRenderContext renderContext) {\n\t\tWRadioButton button = (WRadioButton) component;\n\n\t\tXmlStringBuilder xml = renderContext.getWriter();\n\t\tboolean readOnly = button.isReadOnly();\n\t\tString value = button.getValue();\n\n\t\txml.appendTagOpen(\"ui:radiobutton\");\n\t\txml.appendAttribute(\"id\", component.getId());\n\t\txml.appendOptionalAttribute(\"class\", component.getHtmlClass());\n\t\txml.appendOptionalAttribute(\"track\", component.isTracking(), \"true\");\n\t\txml.appendOptionalAttribute(\"hidden\", button.isHidden(), \"true\");\n\t\txml.appendAttribute(\"groupName\", button.getGroupName());\n\t\txml.appendAttribute(\"value\", WebUtilities.encode(value));\n\t\tif (readOnly) {\n\t\t\txml.appendAttribute(\"readOnly\", \"true\");\n\t\t} else {\n\t\t\txml.appendOptionalAttribute(\"disabled\", button.isDisabled(), \"true\");\n\t\t\txml.appendOptionalAttribute(\"required\", button.isMandatory(), \"true\");\n\t\t\txml.appendOptionalAttribute(\"submitOnChange\", button.isSubmitOnChange(), \"true\");\n\t\t\txml.appendOptionalAttribute(\"toolTip\", button.getToolTip());\n\t\t\txml.appendOptionalAttribute(\"accessibleText\", button.getAccessibleText());\n\t\t\t// Check for null option (ie null or empty). Match isEmpty() logic.\n\t\t\tboolean isNull = value == null ? true : (value.length() == 0);\n\t\t\txml.appendOptionalAttribute(\"isNull\", isNull, \"true\");\n\t\t}\n\t\txml.appendOptionalAttribute(\"selected\", button.isSelected(), \"true\");\n\t\txml.appendEnd();\n\t}", "public static String createHtmlDocument(Map<String,Object> style,String text,double scale){\n  StringBuffer css=new StringBuffer();\n  css.append(\"font-family:\" + getString(style,mxConstants.STYLE_FONTFAMILY,mxConstants.DEFAULT_FONTFAMILIES) + \";\");\n  css.append(\"font-size:\" + (int)(getInt(style,mxConstants.STYLE_FONTSIZE,mxConstants.DEFAULT_FONTSIZE) * scale) + \" pt;\");\n  String color=mxUtils.getString(style,mxConstants.STYLE_FONTCOLOR);\n  if (color != null) {\n    css.append(\"color:\" + color + \";\");\n  }\n  int fontStyle=mxUtils.getInt(style,mxConstants.STYLE_FONTSTYLE);\n  if ((fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD) {\n    css.append(\"font-weight:bold;\");\n  }\n  if ((fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC) {\n    css.append(\"font-style:italic;\");\n  }\n  if ((fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE) {\n    css.append(\"text-decoration:underline;\");\n  }\n  String align=getString(style,mxConstants.STYLE_ALIGN,mxConstants.ALIGN_LEFT);\n  if (align.equals(mxConstants.ALIGN_CENTER)) {\n    css.append(\"text-align:center;\");\n  }\n else   if (align.equals(mxConstants.ALIGN_RIGHT)) {\n    css.append(\"text-align:right;\");\n  }\n  return \"<html><body style=\\\"\" + css.toString() + \"\\\">\"+ text+ \"</body></html>\";\n}\n", "public void testRemoveInTheFuture ( ) { AnnualCalendar annualCalendar = new AnnualCalendar ( ) ; Calendar day = Calendar . getInstance ( ) ; day . set ( Calendar . MONTH , Calendar . JUNE ) ; day . set ( Calendar . YEAR , NUM_ ) ; day . set ( Calendar . D", "private void findAllTVEs(\n            AbstractExpression expr, List<TupleValueExpression> tveList) {\n        if (!isNewtoColumnList(m_aggResultColumns, expr)) {\n            return;\n        }\n\n        if (expr instanceof TupleValueExpression) {\n           ", "\tpublic void addComponent(String iComponentName, Class<C> iComponentClass) throws InstantiationException, IllegalAccessException {\n\t\t// REGISTER THE COMPONENT INSTANCE WITH ITS NAME (GIVEN FROM toString()\n\t\t// METHOD)\n\t\tcomponents.put(iComponentName, iComponentClass);\n\t}\n", "private void increaseScoreLevel(){\n  mMatchScore+=(500 * (Math.pow(1.1,mLevelNumber - 1)));\n  if (mLevelNumber > 2 && mWrongAnswers == 0) {\n    mViewBonusSnowman.startAnimation(mAnimationSnowman);\n  }\n  mScoreText.setText(String.valueOf(mMatchScore));\n  mTextPlayAgainScore.setText(String.valueOf(mMatchScore));\n}\n", "public FieldRefConstant addFieldRef(String className,String name,String type){\n  FieldRefConstant entry=getFieldRef(className,name,type);\n  if (entry != null)   return entry;\n  ClassConstant classEntry=addClass(className);\n  NameAndTypeConstant typeEntry=addNameAndType(name,type);\n  entry=new FieldRefConstant(this,_entries.size(),classEntry.getIndex(),typeEntry.getIndex());\n  addConstant(entry);\n  return entry;\n}\n", "public List<Bucket> getBuckets() {\n        List<Bucket> result = Lists.newArrayList();\n        for (File file : getBaseDir().listFiles()) {\n            if (file.isDirectory()) {\n                result.add(new Bucket(file));\n            }\n        }\n\n        return result;\n    }", "private void sendInputStringToProcess(Process process){\n  if (inputString != null) {\n    try (PrintStream ps=new PrintStream(process.getOutputStream())){\n      ps.print(inputString);\n      ps.print('\\n');\n    }\n   }\n}\n", "public static Test suite ( ) { return ( new TestSuite ( SelectManyCollectionITCase . class ) ) ; }", "    public double getScheduledActualTime(Date when) {\n        double result = 0;\n        long time = when.getTime();\n        Period p;\n        for (int i = 1;   i < periods.size();   i++) {\n            p = get(i);\n            if (p != null && p.getEndDate().getTime() < time)\n                result += p.actualDirectTime;\n            else break;\n        }\n        return result;\n    }\n", "public void deleteResource( ITransaction transaction,\n                                String path,\n                                Hashtable<String, Integer> errorList,\n                                HttpServletRequest req,\n                                HttpServletResponse resp ) throws IOException, WebdavException {\n\n        resp.setStatus(WebdavStatus.SC_NO_CONTENT);\n\n        if (!readOnly) {\n            StoredObject so = store.getStoredObject(transaction, path);\n            if (so != null) {\n                if (so.isResource()) {\n                    store.removeObject(transaction, path);\n                } else {\n                    if (so.isFolder()) {\n                        deleteFolder(transaction, path, errorList);\n                        store.removeObject(transaction, path);\n                    } else {\n                        resp.sendError(WebdavStatus.SC_NOT_FOUND);\n                    }\n                }\n            } else {\n                resp.sendError(WebdavStatus.SC_NOT_FOUND);\n            }\n        } else {\n            resp.sendError(WebdavStatus.SC_FORBIDDEN);\n        }\n    }", "public void decrement ( ) { int counterVal = counter . decrementAndGet ( ) ; if ( counterVal == NUM_ ) { if ( null != resourceCallback ) { resourceCallback . onTransitionToIdle ( ) ; } } if ( counterVal < NUM_ ) { throw new IllegalArgumentException ( STR_"], "comment": ["marks a song as skipped", "tell server we want binary data connections", "returns the first available hole ( at least irecordsize length ) to be reused .", "marshall the given parameter object .", "relative put method for writing a byte on the buffer", "parses a resource as sql file and returns the contents in a string .", "channelevent event describing any changes to channels", "obtains the boolean value , which corresponds to a specific resource id , from a specific theme .", "explain the score we computed for doc", "returns the subsumptions for the new concepts added in an incremental classification .", "answer a query that will list the instances of a concept", "checks if is class avilable in class path .", "adds a source container to a ijavaproject .", "append the data of another lattice to this lattice .", "removes trailing whitespace from string .", "removes a listener object that was previously notified about completed searches .", "creates a new instance with the specified error message .", "tests the set to determine if all of the elements in array are present", "creates a space compound index from the specified paths with the specified index type .", "compares its two arguments for order according to their skills", "inserts one array into another by replacing specified offset .", "returns the constant map index to name", "the identity step does not alter the graph in anyway .", "checks whether memory data is available .", "processes a part of package . json ( as defined by jsonarray ) and update the specified dependency with relevant info .", "sort the arrays using the quicksort algorithm .", "use this api to update vrid resources .", "adds a view in a tab or create it if it doesnt exist", "create a new server socket .", "returns true if this logical version is greater or equals to the other", "creates a tag list from an object name .", "this method is called when executing this sample application from the command line .", "checks whether the given values are on the border of the grid", "returns whether the property is its default value .", "peek at the current value of the future", "parse the application infos", "retrieves the bean from the datasource .", "appends the given message to the text ( without decorations ) .", "note that a getfield call has been replaced to method call .", "paint the close button for a tab .", "event indicating that the knobs current value setting has changed", "returns the current size of the incremental update log file in bytes", "applies the current style to the graphics context", "creates an invalid access err exception", "begin a timer for the current block value will be recorded when closed .", "adds a neighboring individual to the neighborhood of this individual .", "to send a message to the server", "returns status information as a set of named properties .", "handles one state ; creates new tasks by following context propagation links .", "delete a line and add the changes to the undo queue", "creates a picture", "if not already created , a new scan element will be created and returned .", "sends a packet from the server to all players in a dimension around a location", "adds the findbugs builder to the project .", "generates the hibernate scrollableiterator for hibernate query .", "removes the filter", "create a sequence with a specified initial value .", "get entry by index exception if none", "reshape cnn - style 4d mask array of shape [ seqlength * minibatch , 1 , 1 , 1 ] to time series mask [ mb , seqlength ]", "drops the next character off the queue .", "this example will spawn a large number of jobs to run", "setter for property waitbeepenabled", "surrounds a string with single quotes", "returns a failed response containing the given error code and an optional localized message displayed to the user .", "test data if is normal distribution", "we want the floater to be full - width because the contents will be moved from side to side .", "this is the opposite of getlocalcache .", "create a pdfpage with dimensions in bbox and rotation .", "build the documentation for all hosts", "set the view last response body menu enabled or disabled", "emit a single data frame to the connection .", "sets the jobwrapper in the paused state .", "add several lines to the macro", "adds a new im to this user", "output xml list of campaigns", "specifies the pass band beginning frequency", "checks if an element is clickable .", "converts formula list to a string representation", "format the conversion type as a string", "converts map element into a long or returns default value if conversion is not possible .", "an aggregate is canceled iff at least one of its components is canceled .", "check if the uri is a data uri", "get the label to display .", "initialise the xsl systemid relative to the web archive", "calculates a data hash using the following formula : h ( left | | right | | util . encodeunsignedlong ( level ) ) where", "formats an event and returns the formatted message .", "registers for changes to organization ' s configuration .", "sets the pins representing procedure results", "appends a comment to the given section in the given module .", "boolean scpreferencesunlock scpreferencesref prefs", "enable all graphics improvement .", "iterates through the test list .", "compare this mbeannotificationinfo to another .", "constucts a new direct space factory using the provided space .", "callback fired once channel is closed .", "add an edge to the graph", "helper method that commits a new comment to the git notes .", "sets a new parameter value based on the edit field", "loads a class file by a given class loader .", "check whether the given iterator contains the given element .", "deallocates the array resources .", "in case of error return the element ' s id , or if not available return - 2 in case of change or - 3 in case of delete , in case of ok return - 1", "create an indentprinter to the given printwriter", "when iuser start handle it can t be interruptible", "return true if the bb is computed automatically on the fly", "logs an error .", "deletes a service reference from the cache and causes a notification to be sent to all registered listeners indicating that the service has been discarded .", "get the field that references this record ( from another record ) .", "clear all commands off the current page", "returns the number of anchor points in this polygon", "adds a fragment to the end of the list of fragments for this item .", "returns the tip text for this property", "counts the parameters of a function that are not marked optional or varargs .", "create a daemon thread", "format a double according to the svg specs .", "determines the minimum and maximum function value of all parameterization functions stored in the specified database .", "adds an event to the calendar", "internal encryption method .", "closes the stream when garbage is collected .", "creates a new coreference .", "needs to be called if a media is added to the editor .", "keep trying to connect to the distributed system .", "translate a octal mode value ( 73 ) to a string representation ( \" 111 \" )", "fixme make selection of policystreamhandler to be more efficient .", "adds a url to be scheduled for reload", "pair adding to the repositories map and resetting the numrepos int .", "constructs a new temporary cell states instance .", "returns whether this map contains the specified key .", "called when we get a multicast msg", "shows a view in a given window .", "the passed in pageformat is cloned and altered to be usable on the printerjob ' s current printer .", "creates a new base node object with the given children .", "get the value of the current parameter .", "this method returns the original array if its length is equal or greater than the minsize , or create a new array and copies the data from the original array into the new one .", "creates a new set breakpoint command .", "returns the list of any direct string nodes of this node .", "adds a predecessor to a message", "writes the buffer contents to the given byte channel .", "sets the base directory of an embedded tomcat .", "show the popup", "count number of lines in a file", "creates a new trace register object .", "removes acl entries .", "filters points which are closes to the last estimated tempcenter .", "adds the highlighting and option bar .", "remove all exceptions from the set .", "journalline - amt .", "the dominators algorithm leaves us knowing who the immediate dominator is for each node .", "fill field values to default values for this synapse type .", "the command has been executed so extract extract the needed information from the application context", "reveal the searchbox from a menu item .", "enables or disables the visibility of the lcd display", "configures the effect offset", "checks whether specified string can be valid tag name or attribute name in xml .", "replace the javadoc tags in the given file only if the file was never treated before .", "check if the view could apply to the provided table unchanged .", "update server info in database by id", "sorts the specified range in the array in ascending natural order .", "updates the map that maps a position to the list of entity ' s in that position .", "creates a new dviewasn1dump dialog .", "constructs an aes encrypter instance with the provided secret key .", "looks for the method up the class hierarchy .", "creates a new debugger listener object .", "order the results according to the order by clause", "add a single value with weight 1 . 0 .", "identify file with branches and heads information depends on hg version ;", "unregister a workflow template from the content section", "clears the current processlaunchercontext for the calling thread .", "unescapes the value of a property in a property file to be saved correctly in opencms .", "rotate the image by the specified degrees around a pivot point .", "returns an iterator which will iterate through the columndefinitions of this table", "set next chart object", "returns whether file uploads can be used on the current device ( generally all platform versions except for 4 . 4 ) on android 4 . 4 . 3 / 4 . 4 . 4 , file uploads may be possible but will come with a wrong mime type", "get the root cause", "true if the entry packet has an array of fixed properties", "given an object scan the list find it and remove it returns true if found", "returns the only valid instance of the plugininterface class .", "create a disque uri from an uri string .", "implementing support for internal model", "parses a given list of options", "method to translate the xaresource stuff , including the error code .", "only use this for testing .", "only for the basic data types as shown above", "create management bean for jspace container .", "private recursive helper function to actually do the type - safe checking of assignability .", "extracts the boolean vectors at each of the selected time points .", "this class cannot be instantiated .", "creates a new exception object .", "prepares opengl es before we draw a frame .", "frees a random chunk from the chunk list .", "creates a document with the given content written in the given language having the given set of attributes .", "create cnvtfsenum ( [ enum class ] ) .", "nice local - store only debugging summary", "moves search result iteration to the previous search result .", "registers a device with the provided device id and device name .", "sets field on object with specified value .", "gets parameter from method with annotation .", "return an array with the given value at every index", "compact the database file , that is , compact blocks that have a low fill rate , and move chunks next to each other .", "converts the byte buffer containing bit samples into a float array", "amount for this line", "add an get to perform as part of the search .", "returns a new input stream that can read from the pipe", "determines if the typeofanalysisid has been initialized", "get default name for checked out directory", "this method changes the given async cause , and it adds the also given local stacktrace separated by the supplied exception message .", "converts the audio packet data into a byte buffer format appropriate for the underlying source data line .", "adds a new contact to the registration .", "this creates and starts the socket server on a new thread .", "creates the contents of the context file .", "reads next frame image", "this method will process any service - ref elements in the client ' s deployment descriptor .", "parse the date header range value from the input properties .", "determine the fitness of the given chromosome instance", "returns the longest repeated substring of the specified string .", "get status message of the response", "returns the predicate that describes which records should be in the output table .", "this method will be invoked when the current page is scrolled , either as part of a programmatically initiated smooth scroll or a user initiated touch scroll .", "removes resolving information from a given function .", "method parse the response returned from the readresponse method .", "get fctbcfctsimpleentities in lazy mode .", "confirm that significance testing doesn t alter the average that would be returned .", "close cache streams and return web connections", "invoked after the mouse was released on the filter field .", "sets the newsource", "called when the mouse wheel is moved", "accepts an players announcement", "initialize or refresh the list of the owl project", "paints the background of a file chooser .", "get the customer that queues at the specified position", "method handles uicomponent tree creation in accordance with the jsf 1 . 2 spec .", "merges the new vertexdescription by adding missing attributes from the src .", "creates a new executor object for spawning worker threads", "adds the field .", "called when an entire text frame has been received .", "check if the scan is not present in the user folder", "append any differences from this to a copy of old", "creates a buffered writer for this file without writing a bom , writing data using the given encoding .", "checks that the prototype is an implicit prototype of this object .", "set up the physical control ( that implements component ) .", "create new lt operation", "performs the sync operation .", "parse the alias definition rooted at the given unode , copying its properties into this object .", "calculates the bar width and stores it in the renderer state .", "parse a change . id out of a string representation .", "clears both the memory and disk cache associated with this imagecache object .", "sets the condition that the asteroid was hit", "adds an old value with a fixed timestamp to the sample .", "create a table in moladb", "converts this configobject into a the java . util . properties format flattening the tree structure beforehand", "reload the list which will be filtered by the specified pattern", "deep clone which just means cloning the fields array too .", "this adds a property descriptor for the is root feature", "rename an existing node of type element node or attribute node", "creates a property value getter using the specified property name .", "calls the facebook api to get the user profile using a given access token .", "grows the bond array by a given size .", "if a collection contains only integer objects , it can be passed to this function and converted into an int array .", "checks if a given string represents a valid action .", "this method is used to read publications file from input stream .", "in dev mode , it monitors file and update zeppelinserver", "open the default user i o control panel", "get an iterator over the instructions in the basic block in reverse order .", "create an efficiently reversable sequence that produces the integers between start and end", "inserts the element to the priority queue .", "sends a packet from the server to all players in a dimension", "creates the notification timeout thread for closing the non - native notification after a few seconds", "just post json to target url no http headers .", "outputs the decision tree as a graph", "converts a modbusmessage instance into a hex encoded string representation .", "tests if the given base date is strictly between the given start date and end date .", "add a remote session to track .", "throws serverexception if gfd . 47 getput is not supported or cannot be used .", "checks if this album is a compilation", "fold binary or unary operation , returning constant type reflecting the operations result .", "returns the set of mutually exclusive job types for a given type .", "read the pict header .", "an fxg node may have child nodes that also require a symbol class mapping that will be included along with the parent symbol for the compilation unit .", "can the attribute appear in html without a value .", "this method returns a list of implied successors of a given particle .", "adds a couple of common permissions for both unsigned extensions as well as groovy scripts .", "performs the training of the distribution model .", "check if the cache contains the given player s username", "removes the bookmark for an element with the given name and locale", "removes all current fire", "closes the current label and starts a new one .", "check if a rectangle overlaps colliding areas .", "marshall the given parameter object .", "test extracting and rereading properties from classes with embedded java beans .", "main entry point for the launcher .", "check if phone is idle", "reads data from the data stream provided and computes metadata .", "include a group into a group .", "splits a title string into two cells .", "gets the best converter for the object specified .", "populate the database", "removes the item from the view performing necessary cleanup .", "creates a new tag .", "filter the provided event and complete fields .", "adds a parameter to the url", "decode and sample down a bitmap from a file input stream to the requested width and height .", "cumsum , opcode : ucumk + , dense input .", "this adds separators for editor additions to the tool bar", "don t let anyone instantiate this class", "performs prereads on a list of input files", "clears the current value in other words sets its value to null", "fills the tree map .", "reward the last action taken by the learner according to some payoff", "a variant of collectentries for iterables using the identity closure as the transform and a supplied map as the destination of transformed entries .", "runs the post processors", "reads the reader into a list of strings with one entry for each line .", "set the context for javacfilemanager .", "gets the most recent health check results for this regional backendservice .", "add a new empty interpreter line with the corresponding prompt .", "send all errors to callback replacing any existing callback", "issue a synchronization call .", "liest den wert eines attribut , mithilfe des innerhalb der tag - lib definierten expression", "posts an interrupt request to the receiver .", "load data from cache", "this method doesnt need to be updated", "see if the state machine is idle", "send when this peer sends a close handshake", "returns a clone of the object", "check on authenticated restauthenticationtoken", "creates a string which is the reverse backwards of this charsequence", "internal method to wait for a connection from the available connection pool .", "create a namematcher that matches names starting with the given string .", "getter for property verified", "add a conditional to this logix returns true if conditional was successfully added , returns false if the maximum number of conditionals has been exceeded .", "expands any interpolation contained within the jsonvalue object in place .", "factory method for links used to close the selected tab .", "hook to allow derived classes to override list of result collection behavior .", "statement . executebatch ( ) rewritten multiple ( concatenate with \" ; \" ) according to max _ allowed _ packet )", "sets the foreground color used by the parsing text editors when there are errors on the filter expressions", "compute local conditional transfer entropy values for the observations in the given time series using the pdfs computed from the previously supplied method calls .", "schedule stun checks for selected pair .", "creates a function expression for building a function operating on a target object of type set < t > , being type < t > a type specified as a parameter .", "delete the given job .", "this writes the assembly project to the database", "override this method to start an editing session if necessary", "constructs an objectid given its 12 - byte binary representation .", "handle commit stage of two phase committed transaction", "symmetric householder reduction to tridiagonal form .", "returns the namespaces used by this parameter value", "escapes characters specified by provider with ' \\ ' and specified character .", "setter method for createuser", "returns the black variance for a given option tenor and strike rate", "returns the value of the given query string parameter .", "hide all matched elements by adjusting their height and firing an optional callback after completion", "invoked after a read memory reply was received from the debug client .", "get the underlying message object", "calculates intersections of this segment with another segment .", "checks if a given uri is a numeric datatype uri .", "initiates the yosform with all its components created and placed", "verifies write permission", "you are not supposed to instantiate this class .", "removes a persistenceloggingplugin", "gets the value of the field1 property", "transforms all rows from the cursor and put them in a read - only list .", "for calling native methods taking two int args and returning an int", "tests this object for equality with an arbitrary object", "creates a writable subraster given a region of the raster .", "perform the given callback operation on all matching methods of the given class and superclasses .", "issue a formatted log message with a level of warn .", "execute the callable wrapping checked exceptions inside a runtimeexception .", "fires an entity delete event", "setter for entity _ attributes - sets", "solves the upper triangular system u x b", "pop a source from a user provided uriresolver , corresponding to the url popped from the m _ importstack .", "pushes a register onto the stack", "changes the state of the edge label depending on the current hitinfo .", "read this messages contents from the datainput stream that was written by this write dataoutput", "generates code that loads a storage instance on the stack , throwing a", "creates a list for the given option , an empty list if the option ' s value is null", "resize input buffer to newsize", "find the classpath that contains the given resource .", "notifies all listeners about selection changes .", "checks the compliance of partition packs found in an mxf file with st378 : 2004 .", "method to handle all incoming dmf amqp messages .", "cast a object to a character object ( reference type )", "creates a new updater object .", "invoked after a group node comment has been edited .", "preprocesses a bit vector so that spookyhash 4 - word - state can be computed in constant time on all prefixes .", "writes out a nicely formatted summary of the exception .", "object to xml", "translates all coordinates in the array by dx , dy", "show message in gerrit s errordialog .", "method that will find if bean has any managed - or back - reference properties , and if so add them to bean , to be linked during resolution phase .", "restore launcher configuration from the restored data stream .", "joins 2 arrays together , if any array is null or empty then other array will be retuned without coping anything .", "this method gets the hmtl model", "messaged when the user has altered the value for the item identified by path to newvalue", "tries to balance assignments between existing nodes in topology .", "removes the local audio playback", "serialize an object to an outputstream .", "performs authentication with the security token .", "this adds a property descriptor for the input field feature", "log a config message , specifying source class and method , with no arguments .", "add new distribution set .", "unsubscribes all deleted resources that were deleted before the specified time stamp .", "get item at pixel position", "return the value as a date", "adds a mapping from the specified key to the specified value , replacing the previous mapping from the specified key if there was one .", "removes all validation listeners associated with this widget", "increases the timer by .", "metric whose value increments during the life of the process .", "activates all activeentity instances that are to be managed by this", "compares this object to the specified boolean object to determine their relative order", "provides default configuration of runtimeenvironmentbuilder that is based on :", "the suspicion level of the accrual failure detector .", "creates a sqlquery using the specified type expression and result type .", "calculates a bounding octagon of the simplex .", "replaces each value in the array with the stemmed version of the word", "reads gif image from stream", "write com _ stmt _ execute sub - command to output buffer .", "increments the ref count", "wraps the text with the appropriate font tags when the font name and size are not void", "copy bytes in , writing the length as a 1 or 2 byte vint prefix .", "takes a type that may be an arraytype .", "initiate loopbar with menu", "raises the x and y values of this vector to the given power .", "initialize this instance with the cabinet file in the given directory", "called internally if any index state has changed .", "creates and returns a validator , which allows to ensure , that values are not null .", "creates a new thread object .", "restart getting sensors data", "triggers the image loader for the given image and handler .", "scales vector uniformly by factor 1 v v overrides coordinates with result", "replaces the element body with the textresource passed via gwt - prettify attribute .", "converts a json - parsed number ( sometimes integer , sometimes long ) to a nullable long .", "encrypt value as jwt with direct algorithm and encryption content alg aes - 128 - sha - 256 .", "return a builder using the registered calendars / working weeks and a modified forward holiday handler for the currency pair ; this does not copy the calendars or currency config .", "passes the jump event to the modifier list", "checks job execution status .", "the getjoboperator factory method returns an instance of the joboperator interface .", "create a set composed of the elements of the first set minus the given element .", "returns a range of all the commerce addresses .", "random places token the value range is and a z", "gets the searchresultsobjectpool instance", "adds a new tag as the child tag of a given parent tag .", "creates a new httpprocessor configured using the provided config instance .", "start a put request to the given url", "removes all breakpoints that are part of a given view .", "determines if any arcs have been added to the view", "prints a warning if the global switch is enabled and it is not a duplicate warning", "paint the background mouse over state .", "maps point from the view s to the image s relative coordinate system .", "the real place to delegate bitmap decoding to bitmapfactory .", "the doget method of the servlet .", "creates a new modifiers instance which is a union of the specified modifiers and this instance .", "format a date using a really short format .", "this operation provides a deep copy of the entry", "this will encode the given string as a valid xml name .", "constructs a periodformatter using all the appended elements", "recalculates the total number of alerts by alert ' s risk contained in the \" alerts \" tree and updates the alert ' s risks footer status labels with the new values .", "invoked after the port of a debugger template changed .", "write a bit .", "write content of the specified string using the specified encoding .", "returns a heap doublesunion object that has been initialized with the data from the given", "returns a cursor of datapoints specified by series .", "compiles a single source file and loads the class", "store a value", "place a new property", "checks whether the debugger can determine the memory layout of the target process .", "called when a peer announces its intention to acquire a lock .", "builds the final script .", "tags a node with a given tag .", "finds the choiceformat sub - message for the given number .", "set a minute wait value", "creates the parent level for the given child level .", "this filter requires the bpm correlation to have all three signals and it allows the user to specify the amplitude threshold above which bpm signals can be trusted", "throws an exception for invalid byte .", "convert string representation to locale object", "returns the parent node starting with ciscoipphone", "returns an list containing all of the given elements", "count how many marks existed in string .", "adds the content ( expressed as a certain assignment over variables ) to the current dialogue state , and subsequently updates the dialogue state .", "add a new attachment reference", "stores char value into byte array assuming that value should be stored in little - endian byte order and native byte order is big - endian .", "check weather the phone is root or not without a root bypass popup dialog", "determines whether a passed register is either ah bh ch or dh .", "filters alpha codes", "determine whether this dataflow fact is identical to another one .", "return hash code for object x .", "returns the new type node corresponding to the type of the given declaration including the extra dimensions .", "creates a new project milestone .", "sets the current ajax operation details .", "returns a range of all the cp definition links .", "override the equals method .", "if your implementation subclasses the objects youll want to overload the constructbyclasscode implementation to return your implementations instances instead of the base implementation", "graph model change event", "receive notification of the start of an strip - space element .", "returns the connection anchor for the given", "processes each field in this embedded object and updates the metadata .", "remove garbage collected soft values with the help of the reference queue .", "check whether the given exception is compatible with the exceptions declared in a throws clause .", "create a new overlay", "find the base symbol , if it is a modified monomer , the \" [ \" and \" ] \" will be removed", "converts the enum value to a css string", "this method is excecuted when the option save as is called", "verify the rsv bit of a frame .", "voices the user specified progression", "readdata dummy function .", "the following two functions are the weierstrass data that define this surface", "checks for each achievement if the player has reached it .", "verify that we correctly clone values .", "takes a debugger template and updates the debugger object of the address space accordingly if possible .", "sends a message to the messagedistributor handled by the experiment", "returns whether encoders last rotation was forward positive direction", "creates a view passwordview for an element .", "\\ n in name = linefeed", "test to see if projected image is on map .", "return true if the key is internally sound", "changes the duty to a new status", "frees a global map id .", "method creating a simple dialog", "returns a string representation of this label .", "sets the new camera man can be null", "return true if should descend into archive files", "return true if the operation own ( user specified ) name equals the specified name", "checks if this service supports sms receipt", "initialise the calculator for re use with new observations .", "edit a local edge comment .", "resolve metadata and details of the annotation .", "marshall the given parameter object .", "updates the digest using the specified byte .", "returns the norm of the vector", "writes a view container setting to the database .", "get a feature extractor .", "set the readers pollrate", "converts the soap model instances into normal model instances .", "checks if rules specified in command line option is valid .", "adds a configuration to the task", "decodes data from base64 notation , automatically detecting gzip - compressed data and decompressing it .", "creates a new register value object .", "reads bytes from the underlying stream .", "runs a test application that creates an agent attaches an aws harvester as well as a few allocates streams generates an sdp and dumps it on stdout", "a method the creates the method to create a new vplex consistency group .", "allow listener to save any changes", "deletes the specified targettcpproxy resource .", "use this api to fetch filtered set of sslpolicylabel resources .", "adds the given observable to this manager", "delegates to getspinstate in the associated entity", "adds item to the adapter .", "ends marshalling of an element .", "return true if this button is displaying text false if it is displaying an icon", "append an long value .", "paints the background of a tab of a tabbed pane .", "removes template markers from a string assumes the standard prefix and suffix", "pads spaces onto the end of the value to make it places long", "called when the probe emits data .", "closes this output stream and releases any system resources associated with this stream", "delete the screenshot folder for this app .", "links this after before", "remove an actionlistener that receives events that trigger events to shift the projection stack .", "locates directories in which python interpreters pointed in environment path are located .", "assign the task to the queue with a known timeout .", "buildup complete path out of a string tokens", "build an expression that checks any field on a bean .", "close the receiver and shut down the thread pool .", "creates the xmlparser with the namespace and schema files for validation .", "post purge request", "removes the cp definition option rel with the primary key from the database .", "returns the factory that is currently registered for the given tag name", "converts to primitive array .", "deletes an api server mapping", "export game tree in pgn format .", "src / main / resources / org / drools / compiler / semantics / java / parser / java . g : 620 : 1 : elementvaluepairs : elementvaluepair ( ' , ' elementvaluepair ) * ;", "sets the working directory", "adds a new resource definition to a registry .", "draws a polygon with corners p _ points", "retrieves the parent task for a phoenix activity .", "creates a documentbuilder and uses it to parse the xml text read from the given reader , allowing parser validation , namespace awareness and permission of doctype declarations to be controlled .", "make the mesh device activate on server", "check if we should activate this authentication service", "transform a sequence", "create a delta consisting of a single update .", "construct a new instance of this test case .", "look up the line number range for a method .", "pushes all of the arguments of the current method onto the stack .", "performs specified action on specified object", "read the file line for line and return the result in a list", "construct a string containing a hex - dump of a byte array", "rolls back a dbms transaction .", "this is not a standard quicksort .", "set the accelerometer range .", "method to handle update button", "remove the specified class loader", "sends a packet from the server to all players in a dimension", "de - / select all elements in the local file list .", "change the user info in local db", "load document details", "get a vector by scaling", "draws a line from last draw point", "sets the font name of this rtfparagraphstyle", "the printable value of the unique key field for the specified document", "calculate the optimum minimum tick .", "print a warning to printstream", "algorithm as 241 appl .", "adds a string to the constant pool of the class being build .", "required by fit for specific types", "traverse the tree to find next key", "intersects the current clip with the specified rectangle .", "create a pong frame .", "this class should manage the creation of a level x npc with all its hp and features", "private ctor to prevent instantiation", "checks if max length of text is reached", "checks if the previous request had a digest authorization and its nonce matches to the current server nonce .", "replies the chord of the specified angle .", "log a formatted message at debug level .", "returns the version given its string representation , current version if the argument is null or empty", "sets the value and availability of the main window behaviour option according to the value of the sticky option", "triangulate a pointset with eventual constraints", "display the item model type in a browser", "creates a new function object if only the address of the resolved function could be determined .", "creates and returns a new push button with the given label and or image .", "adds a new string to the default log", "returns true if the current token is a legal identifier .", "returns true if token should be parsed as a numeric field .", "get the standard deviation of a tuple data value .", "parses a 1 to 32 character lower - hex string with no prefix into an unsigned long , tossing any bits higher than 64 .", "returns true if the list of files in the ifixinfo are present ( for non - platform jars ) or more recent than those listed ( for platform jars or static files ) .", "inserts the specified element at the specified position in this big list optional operation .", "looks for pins with more than 1 nets and reduces shapes of traces of foreign nets , which are already connected to such a pin , so that the pin center is not blocked for connection .", "get the vdc id embedded in the uri string , or null if none", "returns the color value", "finds the subelement of the given parent node .", "get the only jingle content if one exists , or null .", "the main execution routine .", "creates a new default address converted .", "creates the binnavi menu .", "return true if this stack is currently empty", "ensurerowcount", "this method is called when user asks to validate a file", "enters a new lexical state", "get the status of a specific client", "get all of the directory paths in a zip / jar file", "write byte array to request body", "initialize backup component that can t be run during recovery .", "creates tokens for the ( virtual ) hostname .", "create new marker options populated with the feature row style ( icon or style )", "returns a new digitalout instance with the given state .", "constructs an algorithm exception originating from the specified algorithm with the given cause .", "find a property name in element in the named attribute and set it into the given eobject", "returns the string at the front of the queue", "returns a null terminated byte representation of the string .", "opens a switchboard session in order to message a specific contact", "provides an iterator over all available factories .", "returns all occupants of neighboring cells", "string describing default classifier .", "create a new action object .", "encode the prefix for the entire buffer .", "create a list of students for the instructor", "just do the basics : create a basic project .", "the device is compatibility or not", "resets all necessary information from the current choice point frame discard it and then returns p", "invoked after a halt reply was received from the debug client .", "initiate an image sharing session", "returns true if only the selection will be printed .", "read bytes 1 or 2 or 5", "release the resourceowner that the object wraps and return a reference to it", "associate this exception with the given node if this exception is not already associated with a node .", "compares this expression with the specified expression for order", "id should ideally be unique amongst any other instances", "create the freemarker template map , with the following top - level structure :", "stores the specified log for this test", "adds a nominal attribute to the attributes set nominal attributes are ones with defined set of countable values", "the following bean configures the database connection .", "shut down the refreshing thread .", "you are not supposed to instantiate this class .", "generate copyright package declaration import statements class declaration .", "returns whether or not this connection represents a local address", "initialization of the servlet .", "stores the near cache keys from the supplied iterator .", "visits the source of the class .", "extract the text body from a comment .", "create a new model .", "prints information of the test result .", "returns a ctclass object with the given name", "creates a new number node object .", "completes the restore operation on a managed database .", "sends verification mail to a unverified user .", "loads the stationary distribution into a vector if it was passed in or calculates it if not", "removes the specified observer from the list of observers .", "destroy this space exiting when finished", "set a close requested", "add a custom css resource that will be loaded and used by this application .", "registers implementing class of the signaturealgorithm with algorithmuri", "saturate a float value , clamping values below 0 to 0 and above 1 to 1", "parse the string argument into an object .", "this method loops until the given worker thread completes", "determines if the maxnumofspots has been modified", "adds a dht key .", "edits a group node comment .", "returns the names of the involved fields when post processing .", "reset the rotation of this transformation", "creates a predicate to get a property value and test it with another predicate .", "taps on an offset from an element for a desired amount of time and with an amount of fingers .", "appends the given children in the order given", "parses an xmlresults object based on the contents of the given stream .", "determine whether given type matches this predicate .", "indicates an uncaught exception in a job", "creates a new debugger template .", "render a response using the given template .", "aborts all current callers / threads waiting for a pending offer to be accepted by the window .", "check whether the buffer is exactly three bytes long and has the bytes \" udp \" in it .", "when we are un filtering this method will set up the transform that we are animating to in order to hide the task .", "intercepts a setxxx call", "sets the value of this property attached to the structure record from the given list of strings .", "returns a htmltablerow explaining the details of a given button", "stores long value into byte array assuming that value should be stored in little - endian byte order and native byte order is big - endian .", "return the application stage icon .", "get the url of the passed resource using the class loader of the specified class only .", "merge plugin configuration files .", "read fields to display", "creates a smartsheet client with default parameters using the smartsheetgov uri .", "returns a filter that accepts files that contains the provided magic number at a specified offset within the file .", "determines whether the code node provider is done providing data .", "queries and displays data .", "this will convert string to boolean [ ] .", "creates a new rename type parameter processor .", "updates the preview label", "registers all bundles of plugin annotated classes", "uses current numberformat nf to format a number", "function for applying the current material properties in opengl", "executes the batch .", "writes the content provided by the given source input stream into the given destination output stream , optionally closing the input stream .", "here all message types for the chatmodel are registered", "checks whether this uri is a relative uri that references itself ( i . e . it only contains an anchor ) .", "use updaterole instead .", "creates a direction whose angle with the x - axis is nearly equal to p _ angle this can never be a nan", "gets this adapters version", "helper method to load a properties file and throw a build exception if it cannot be loaded", "adds specified fill style to the array of shape styles", "method for beancontextchild interface .", "create a new instance of switchdatetimedialogfragment", "extent of the slice in all tensor dimensions .", "called if connection state has changed", "this is a recursive method that checks whether the tree items are valid", "add the path to the current clip .", "converts an int array to a double array", "entry point into this api .", "recursively traverses through a directory .", "return the row that contains the first string that matches .", "deleting a file on largedire is an asynchronous process .", "asserts that an object is null", "returns a string that uniquely represents the strategy instance with values taken from the configuration", "constructs an new node .", "sort routine that recursively calls itself after the partition algorithm sorted the elements in order .", "this method allows to validate an xml against the xades xsd schema .", "sign a message with sig ( 0 ) .", "adds an incoming anchored rule to the output distribution .", "refresh data model of todo list", "updates the specified data lake analytics account to remove an azure storage account .", "finds or creates a sublist with a given path", "after a vertical and horizontal scan finds a potential finder pattern , this method \" cross - cross - cross - checks \" by scanning down diagonally through the center of the possible finder pattern to see if the same proportion is detected .", "removes a named property change listener to the given javabean .", "get a capture variable ' s upper bound , returning other types unchanged .", "resumes the triggergroupwrapper form the paused state .", "create a credentiallistmappingdeleter to execute delete .", "get a job for a branch , part of an amplify app .", "inserts a new blank record somewhere in the page .", "returns true if and only if object is instanceof time and this time is equal to object", "constructs a list iterator over the given hibernate query string .", "builds the absolute stats .", "remove file at the given index in the list of project files", "enables all breakpoints that are part of a given view .", "read a number .", "length of day", "loads the configuration settings from a file .", "updates the content of th categories tree .", "not part of the api .", "remove a cohort of a given variant study metadata ( from study id ) .", "iterates through the given loaders until it finds one that can load finalizer .", "opens a new document and loads the specified file", "scales the given rectangle by the given scale factor .", "creates a new write memory reply parser .", "the number of errors reported so far .", "handles a metadata request .", "start a window function expression", "set the type of this record to be either", "creates a new default binding object .", "creates a copy of this graph recursively including its subgraphs containing its nodes but not its edges", "removes the game listener from the game and unexports it", "set the blinkenlight state and period", "invokes the readobject method of the represented serializable class .", "a convenience method for creating an immutable list .", "method to construct the not equals expression for int", "compares this transform with the specified object for equality", "method to receive instantmessages", "the base 10 logarithm of the input value", "add region so that commands can be cleared on shutdown .", "recursively find the topological sort order of ancestral layers .", "returns true if this token is a word", "this methods logs debugging data that was passed to it if debug logging is activated", "show , this shows the visible component of the popup window .", "removes the last change from the update queue", "sets if a fork is blocking", "calculate outside scores using internal arrays .", "marshall the given parameter object .", "returns the value of the alternation container reference", "changes remote current working directory to the higher level .", "invoked after the register values of the thread changed .", "sets the info text for one column", "converts a file address to the same address in the relocated module .", "resume the life cycle of the handler if it is in suspended mode the next execution will start immediately .", "allows to customize the popup menu for the result history .", "adds a multilinestring to the insert statement", "cancel notifications by its tag .", "check the given byte value for the specified condition", "returns the tip text for this property", "reset this matrix to the identity .", "get a jasperdesign for an instance .", "creates a 32 - bit integer valued column", "private method for initializing accounts", "loads the contents of the specified input stream into this dictionary .", "returns true if the given thread does not override thread . getcontextclassloader false otherwise .", "adds a synthetic method as part of the compilation process", "iterate all the fields that need to set to default value .", "creates the temp file .", "visits a signature corresponding to a type variable .", "retrieves the list of licenses available in the specified project .", "transform wicket 1 . 5 page parameter to more traditional map .", "shortcut method to duplicate existing android methods", "creates an empty requirements json object .", "set the parent value and disconnect this subtask from its parent .", "returns - 1 if there is no number suffix", "clean up when this object is no longer needed .", "add a bus itinerary inside the bus line .", "extract fields from lhs which do not match any field in the rhs .", "returns whether the given typebinding has the given superclass directly or indirectly", "method that control the lifecycle of the view .", "creates gnu standard preprocessor flag for signalling a file change", "first letter change to capitalised", "word wraps a single lined string to the given max width", "returns the parser configuration with the given id", "looking resource from path which might be absolute path and workspace relative path", "start executing this watchable", "gives you the identifier as a uuid if possible .", "finds a top - most visible component for the given point .", "mapping of campaignvo entities to campaigndetailform entities", "compare with other edge .", "assert that supplied text is not present", "verify mail server", "reads a record from this record file .", "this method returns a list of the field names for @ extrafield methods in this object .", "get cookies database", "renew a certificate keypair .", "creates a category object .", "initialize rank end .", "use this api to fetch linkset _ binding resource of given name .", "returns the only valid instance of the database manager .", "called when the filter code is to be set .", "this method is invoked from gridsubmitandwaitmdb", "calculate the cost of this query plan", "returns the maximum amount of entry data which can be encoded on any index page .", "returns the number of elements in this set its cardinality .", "store metadata for a table .", "update a given datastore with values from a different datastore", "convenience method for deleting rows in the database .", "called when a new model is added", "this mehtod will shut down this object", "initializes the panels containing the add and remove buttons", "calls commit if the session is in cluster mode .", "constructs a partially initialized result for the given reviewer .", "called from the super class", "clear listeners when finished", "tell the populator to save the current entries in the file specified", "determine whether the column position is sunday or not .", "determines whether an undo operation is possible .", "wrap or cast an inputstream to a messageinputstream .", "check if this language is supported / translated .", "retrieve if an app has been marked as favorite", "creates a default threadpool , with default values : - a default threadfactory - all events are accepted", "only sends the given keystroke", "opens android share dialog pass one of uri or sharetext", "construct a new instance of this test case .", "reads a matrix from a reader .", "returns the string representation of the double argument .", "does a http delete request", "do all the replacements ( mogrifications ) specified in the translation string specified by the key .", "returns true iff there are ties in the combined sample formed from x and y .", "create a new model", "invoked after an existing bookmark was removed from the bookmark manager .", "in this function graph panel extensions are supposed to extend the graph panel .", "creates a new label widget", "fill the dialog with the preset filter data .", "get an iterator over the escapetargets of given basic block .", "return a unique number representing the hash code for the primary key instance", "check if the passed token string was already used in this application .", "attempts to read a character from the current position .", "returns a keypairgenerator object that generates public / private key pairs for the specified algorithm .", "names of levels for a categorical response column .", "determines whether this item state has become stale", "returns true if the passed integer is less or equal to the passed upperbound or if the passed value is null", "construct a cuboid in the given world name and xyz co - ordinates .", "return a function argument list consisting of the given values any of which may itself be an argument list .", "write user properties from the node to the storage .", "add a jarfile to class path", "creates a new factory object .", "get import classdef interfacedef fundef from statement object", "determines whether the database is in a known good state .", "find the number of trailing zeros .", "indicates if the tuner s lo frequency must be updated in order to accomodate the tuner channel", "link all zones of this board with their persistent id", "sort and keep the expected size ;", "confirm that our erf function is correct to dp", "fills the configuration map .", "performs the change element language action of the editor .", "retrieves a description of the user - defined types ( udts ) defined in a particular schema .", "removes a satellite orbiting this body", "returns the number of metric records in this table", "return the location for a single track", "append the given head after the last piece of the path .", "initializes the input frame of the first basic block from the method descriptor .", "reverts the model to the state before replacing cell references", "this method was generated by mybatis generator .", "parses coverage timestamp from the string", "construct a bunch of random statements about the given subject .", "create inoptionalout exchange", "notify about a game that has started", "schedule a new job that should be executed now and only once .", "the junit setup method", "alter this object properties", "hexify a byte array", "convert a note object to a frequency in hertz", "returns whether the project is hidden .", "builds the parameter definition .", "creates a new authenticator .", "appends a long value to the string builder using string valueof", "get the member with a given name", "tests scrollability within child views of v given a delta of dx .", "removes all changes from this composite change .", "draws the background annoations .", "signal that all tasks have been cancelled .", "returns a string representation of this equation system .", "returns an xml - formatted table of the jobs in the list .", "performs the final logger call with dynamic message .", "read full subdivision info", "use this api to fetch statistics of inat _ stats resource of given name .", "the address parameter is not check for nullity and it is assumed that there is an symbol in it", "creates a mock replica _ host _ status table to imitate the database used to retrieve information about the endpoints .", "return one model based on given model", "send a warning log message", "sets the image request", "gets the current mp3 file playing in the audio player", "when the user clicks on a folder nothing gets selected .", "returns the path inside a xml page", "brings the graph window to the foreground .", "clean reached markers if markers repository is activated", "set the next finite burn", "copies given resources to the build directory .", "handle a value change", "creates a new orthogonal settings panel .", "for internal use only .", "disconnect from the thl database .", "generates the instruction to push the given value on the stack .", "returns the set of input variables to be combined .", "use these methods to create tasks", "get character set to use", "creates a new action object .", "pack an argument and place in buffer .", "gets information about the specified thing type .", "onrefresh will be called for both a pull from start and pull from end", "delete text helper", "this adds a property descriptor for the konczyny dolne feature", "called when the selection the view that controls this action is changed", "this adds a property descriptor for the filter type feature", "deletes the given type substitution from the database .", "parses the experiment name .", "reads the configuration parameters described in the panel from the configsettings and and sets the contained values .", "page in the d configuration 11 11", "adds the printable .", "create a groupmatcher that matches job groups equaling the given string .", "callback method called in case the package installation is needed .", "action method that creates the report", "returns a new instance with the specified number of seconds added .", "dirty price given a yield and settlement date the default bond settlement is used if no date is given .", "updates the color and line stroke control buttons to match the current settings .", "builds a fork process exception", "precondition is that the nfa is , e . g , for [ a - z ] + end like", "sets the executor to execute client internal tasks such as establish connection start operation and run subscriptions .", "put an unsigned integer mysql long in the buffer .", "sends the supplied packet from a client to the server", "when a constant token type is expected check that the expected constant is read and update the content of the token accordingly .", "only add 1 / 2 the co - occurences , otherwise they would be counted 2 times .", "adds a form field to the request", "assert that objects are equal .", "adds support for a special key to be used as an accesskey .", "cancels an existing signature request .", "function to perform a cross product concatenation of separate rewritten term lists for example if there are k lists : , , , . . . , function creates a combined list containing all possible k - combinations where each combination contains an entry from each of the k lists combinations maintain order in which terms were parsed", "test for empty list", "internal idl generated equality test helper", "getting last elements of list in reverse order", "method for creating a specific resource in the sub class", "creates a new phonedurationsimpl by reading from the given url .", "creates a user api key that can be used to authenticate as the current user .", "this method is used to insert a collection of tokens into the parsers map", "get the appropriate idea sprite", "called to indicate that a text timed text need to display", "returns the path from root to the given node .", "generates a list of unix epoch timestamps for the row key base times given the start and end times of the query .", "sends the specified fql query and returns a singular result", "checks whether the user has permission ' convertermanager . alterinstantconverters ' .", "adjust a requested scale to be within the allowed limits .", "removes the given eventsource listener from the listener list .", "naive method for computing minimum distance slower but needs less memory .", "add features by arrays", "handles client ' s http post requests", "send an expand event for a galleryitem", "calculate confidence intervall for a specific rule .", "subscribe to forward navigation", "close the statement can handle null statements", "obtains the web services password provided for the current test suite being executed .", "symmetric householder reduction to tridiagonal form .", "evaluates the given expression .", "checks context conditions for selectors bound to the http path .", "an amazon s3 location .", "adds the specified collection at the end of the array .", "edits a comment in the list of comments associated .", "removes the specified entry from cache .", "save data to binary files and to database in viewer mode", "utility variant of unref method", "returns an attribute name by buffer .", "returns a new array that contains the concatenated contents of two arrays .", "returns an insertion policy that indicates the tuple is to be inserted into the partition .", "return the tests included in this test suite .", "permanently deletes a view from the project .", "triggers backup for specified backed up item .", "reads two memory at the given position , composing them into a char value according to the current byte order .", "adds a connection listener .", "create and start elasticsearch cluster with arguments .", "saves a view to the database .", "callback function called when arriving a new re invite method re inviting call modify", "add a new property with a specific value to the resource .", "remove the specified call from the sleeper map .", "yield ( chiefly memory - related ) stats about this opentsdb instance ' s jvm .", "converts markdown to html .", "generate a loca table list from the current state of the glyph table builder .", "seeks the consumer ' s cursor to the beginning of a topic .", "reads vector of opaque values", "sets new value for the bit flag", "if we didn t just show a progress report on the last revision show the final results .", "case for interface method info", "create a linking morphemes object from a reader object .", "tests if the specified object is a key in this table .", "gets a file from the object database", "for binary fields , set the current state .", "return the tests included in this test suite .", "outputs boolean to a file", "adds a listener that is notified when a cell is doubleclicked", "construct a new ldapname instance from the supplied distinguished name string .", "returns the next element in the array", "determine there is another feature requires this resource", "issues a suspicion event for the peer associated with this instance of the failure detector", "calculates the delta of the last known stanza handled count and the new reported stanza handled count while considering that the new value may be wrapped after 2 ^ 32 - 1 .", "removes the view if needed prevent some exceptions .", "returns a deep copy of this object", "formats an appendable comment if this works .", "called when activity or fragment matches with the desired target specified in the bundle notification .", "calculates the weight for a split", "get the statusremote to the remote by internet", "adds a label which has the same url , useful for duplicate images in the same page", "returns the result of the last matching operation .", "sets the following problem", "called when the query text is changed by the user .", "this method performs additional validation of needed to conform to the barrier type .", "unlocks the user .", "returns values in lru order .", "readdatafrombinlog waits for data to be fully written in the binlog file and then reads it .", "given a size return the numerator of its aspect ratio", "detaches all previously attached observer to the observable .", "forces the rootviews currently displayed cursor to the cursor identified by cursorident regardless of the cursor requested by the view currently under the mouse", "shows or hides nodes of a graph in one step .", "processes the messages sent to the batcher .", "get the authority http host port or null if relative", "the logic in close needs to account for recursive calls .", "use this api to add policydataset .", "search in methods of a class for complex types", "creates the scan class for the product of the lhs scan and a table .", "creates a new instance of the kernel estimate style transfer entropy calculator", "converts api response of bulk operation into object and returns the object array in case of get request .", "unschedule the given job .", "regenerates the content of the node and updates the graph view .", "factory method could eventually be moved out", "this adds a property descriptor for the value type feature", "extracts the class name from a type descriptor .", "returns index of subset instance is assigned to .", "transforms an alias into a url pattern .", "coerce a character to a boolean value .", "send data async action future .", "initialize the tree and gui layout", "initialize the lists which defines , when which parameter is removed ( if any ) .", "checks if all mandatory attributes are present and if all attributes present have valid names .", "called after each round of collection .", "remove an element described by objectinfo", "write the container to the printewriter", "converts the soap model instances into normal model instances .", "sets roles and users permitted to delete the stream .", "returns a hash code value for this x509issuerserial .", "finds the factor that is closest to the desired factor from an ordered list of factors .", "disables the button for ont port", "this method determines whether the comparison rule is associated with the supplied type", "this method indicates if in the current round the codemaker is human", "constructs an empty safe array with an initial capacity of ten .", "implode collection of strings to one string using delimiter .", "writes a single attribute to the xml schema", "build full text matching predicate ( use in where ( . . . ) )", "added for issue .", "returns the parameters of the term as ` x1 y1 xn yn [ height ] `", "removes the task definition of a task type from the conductor server .", "returns the aton type for given integer .", "calls a meteor method", "pass through method to underlying pgraphics object", "inserts the specified element into this delay queue .", "get the regex equivalent for this unicodeset", "this method will download the new version if and only if it has not been downloaded already .", "registers implementing class of the transform algorithm with algorithmuri", "retains only those entries in the map for which the procedure returns a true value .", "returns the part count of the object represented by the getobjectrequest .", "generates a publickey instance from a string containing the base encoded public key .", "sets the whether the goal is currently active", "represents the list of all the metrics that would be in the enhanced state after the operation .", "add a textview containing the hierarchy of groups to which the question belongs .", "ensures that a specified system property is set with a valid file path .", "iterates over the file tree of a directory .", "send message to default plugin callback .", "cleans up this style object", "adds a class node to the top level scope .", "close node scope", "bit of stuff", "fires whenever a new session is created .", "returns a string containing the coordinates x1 y1 x2 y2 for a given rectangle", "return whether or not this pass contains the given detectorfactory .", "calculate selected rows .", "prepare to start making calls to the currently registered callbacks", "sets the unit that this statistic is in", "returns a set backed by the specified map .", "visits an annotation of the field .", "reads a request and writes its response .", "determine whether dataflow should be propagated on given edge .", "get map mapping from column values ( as object instances ) to their ordinal index in a sorted array .", "return an instance of this interface which represents the specified relative path .", "return the class with the given name .", "refresh the view", "compiles pattern string into regular expression pattern object .", "decrypts a data block", "asyncrhonously generate an array", "converts the passed project to a dto .", "indicates that this packet fragment is the final fragment", "returns an affine transformation that maps the arrowhead shape to the position and orientation specified by the provided line segment end points", "register a config for he current thread", "checks if an access message of the given level would actually be logged by this logger .", "converts a status result from the emf validation service to diagnostics", "lists all the files in this directory .", "call with lock on ' children ' held", "closes the connection to the dbserver .", "remove a switch port from the quarantine queue .", "converts a dn string to the token value of the naming attribute .", "this method implements the visitor pattern for the", "asserts that a by is present .", "returns true if the given accept header accepts the given value .", "add the top level contents of the specified argarray", "creates a scalar predicate using the specified expected value", "assumes that both arrays have same length .", "parse a file , returning a jmftype tree , or null on error .", "send keep alive request to server", "get the selected object in this panel", "sort classes by descending order of their priority , meaning the class with the higher priority will be the first element of the sorted list .", "check if input contains only ascii", "get the resulting frame from this invoked mrtask .", "reads the first response line .", "initialize the cachekey object with its values .", "get a list of fql url external resources to include on the default page .", "set the bit in the given byte array at the bit position ( not the index within the byte array ) to the specified value .", "returns a shallow copy of the set which for strings is equivalent to a deep copy .", "check apply mthod by reflect", "replaces any illegal filename characters in the proposed filename", "pause for the given length of time , in milliseconds , logging an interruption if one occurs .", "sets an inner predicate .", "marks last added key for preloading .", "parses , validates and computes normalized version of gyear object", "zooms to a list of nodes .", "create an appropriately quoted argline to use given the command ( script path ) and argument strings .", "convert the given key to a case insensitive key", "additional bean deployment archives are used for extentions , synthetic annotated types and beans which do not come from a bean archive .", "resolves release from id and version .", "whiteboarddtoservice is registered as ds component .", "return the object which was selected and loaded from the database using the values supplied in the page state", "determines whether this category has the specified parent", "updates the value of the an attribute identified by the given name .", "get the currently selected account", "opens standard swing error dialog box and reports given exception details", "calculates the frequency of the downlink channel using the channel number and the identifierupdate message .", "set the menu to given severity level .", "checks if two elements are equals .", "search focus that satisfied specified node filter from currentfocus to specified direction according to ordertraversal strategy", "visits an instruction with a single int operand .", "instantiates a hadoop codec for compressing and decompressing gzip files .", "adds a token to a list , paying attention to the parameters we ' ve set .", "return true if two records are equal which means that offset byte array and crc all match .", "this = this and not other", "converts a camelcase string to underscores : \" aliceinwonderland \" becomes : \" alice _ in _ wonderland \"", "called when view size changed .", "adds the listener using the provided filter converter and class loader .", "user was formerly forced to create new instances through this factory method .", "add highlights for the given pattern", "collect all image references even those without . uxf diagrams", "remove a property from the resource .", "locates and returns the first method in the supplied class whose name is equal to the specified name .", "populates the fields with current values .", "put the facility into the arraylist for the appropriate link .", "generate the byte array in preparation of moving over a message bus .", "return the period passed between the actual time and the given time", "print a linebreak to the standard output stream .", "create a new date iterator starting with the beginning of the first period .", "returns whether the currently active user is the owner of the given comment .", "clear out the message body .", "this method validates the blocklet size", "start a head request to the given url", "takes from the data the selection state .", "perform the \" translatey \" animation using the new scroll position and the old scroll position to show or hide the animated view .", "creates the window menu", "sets the maximum number of operation retry attempts .", "gets the gap between this interval and another interval .", "register a font file , either . ttf or . otf , . afm or a font from truetype collection .", "this does not require admin privileges by default redmine installation ( tested with redmine 2 . 0 . 3 ) .", "throws away all entries in the queue .", "return a human readable representation of an atomic snapshot of the local copy of the distributed quorum state .", "remove characters from s that are not safe to use in a filename .", "this method is called from within the constructor to initialize the form .", "updates the specified manageduser .", "use caution while using it !", "returns a new path relative to the current one .", "extract the configuration settings ( not properties files ) from the configuration artifact and load them into the / bin directory", "tries to convert url of soffice temp directory to system dependent path", "label text placed below headline in the framearea", "get termname linguistic term", "analyze sample rate and return the pcm data", "add a new note try to parse a date to the correct format and gets the user authenticated", "get the status code of the response", "the association ids that you want to run immediately and only one time .", "initialize all state changed listeners .", "set the center .", "compute the uncentered correlation of two vectors .", "called when a component hasn ' t specified what kind of window they want .", "indicates whether the stream contains one of the specified boms .", "performs rollback to transaction rewrite taken entries remove new entries .", "cleans up the test", "creates an image and places it in the image registry .", "get this compiler ready to compile more queries", "initialize this button", "difference in days between dates", "changes the connection status of the client", "return true if we have a running job", "add one new data", "assumes the class specified points to a file in the classpath that contains the name of a class that implements or is a subclass of the specfied class .", "perform a piecewise multilinear interpolation .", "return the first letter of the property specified by propname .", "api call to transform a jpdl definition ( currently version 3 . 2 ) to a bpmn2 definition .", "indicates to which chunk the file pointer currently points ; the first chunk has the index 0", "has a probability crossoverrate of performing the crossover where each gene is a linear combination of : t * parenta + ( 1 - t ) * parentb , where t is [ 0 , 1 ] and different for each gene .", "checks if this identifiable is equal to another one", "start a post request to the given url", "check , whether the response contains error headers .", "sorts the specified array into ascending numerical order .", "moves assignments from one class to anothers", "the following two methods are used to allow cancel a set of threads for bitmap decoding .", "converts the string with a function into a tree .", "adds the named category as one of the categories to which the specified entry belongs", "allocate a number of blocks and mark them as used .", "clears the state of the class .", "write a single character .", "shortcut for property propertyname greaterequal value .", "create a new syntactic processor and parse the given node", "returns the signer for the given uri and the current client configuration .", "append to an existing array , pushing the value to the back / last position in the array .", "checks all appearances of a register , to see if any instruction in this method causes the object pointed to by the register to escape this thread and / or method .", "stops attempting to download this thumbnail", "get workspace file", "marshall the given parameter object .", "creates a new content object .", "set the metadata to visible or hidden", "if we receive any result , we can delete the temp retry info file", "returns the class loader for the resource adapter file", "filter from the input map the unmapped field of this entity", "a hashing method that changes a string like a url into a hash suitable for using as a disk filename .", "read the given input stream into a byte array .", "compares two rules in xslt processing model order assuming that the modes are equal .", "retrieve a charset from headers", "notification that an existing attribute has been removed from the servlet request .", "save bet item to database", "removes an object model", "returns the byte array for the given salt id", "removes all of the result tables that have been created by this class", "tests creating a sub list with from grater than to .", "stop timer task ( write cache )", "initializes a new instance of this class .", "test the equality of this hand and an object obj", "creates a new api memory module object .", "check whether table exist", "changes a bigdecimal to string .", "set image max height .", "internally localizes the given cmsmessagecontainer to a string .", "add the created action message for the key ' errors . design _ file _ is _ unsupported _ type ' with parameters .", "draws the given lines as segments between all points of the given list of mxpoints .", "send update notifications to listeners", "try to read the port of the url .", "redefine this method from the jcomponent class to make it a synonym for addcomponent c", "add a context to the stack .", "applies the default parameter to the currently loaded config", "enqueue the given reference onto this queue .", "check whether or not the currently edited character and the preceding character are candidates for lazy scanning", "returns an iterator over the structs in this set", "gets the allcaps attribute of the hungariannamer object", "reads a single byte", "read a single sentence .", "read a variable size int .", "event subscriber notified by countermanager", "shows an error message title with an error icon at top of panel", "validates a list of updatebatchitems against their actual table bucket offsets .", "write a list of strings to document as elements with given tag name .", "returns the row that the model index index will be displayed in", "cleanup the scheduler and monitor tasks futures .", "unregister from lease manager based on direct backrefs note entry template must be locked", "starts an amazon ebs - backed instance that you ' ve previously stopped .", "get the host", "confirm behavior when connector . security . use . ssl false", "returns a copy of the transformation2d object .", "gets the next statement meeting constraints and stores in nextstatement .", "replace a series of characters at the specified ( zero - based ) offset with a new string , not necessarily of the same length .", "we have a non - null date , try each format in turn to see if it can be parsed .", "non - blockingly try to acquire the semaphore .", "pop the long integer from the top of the stack .", "convert a map to json text .", "execute a post request .", "return the value of the alt property", "this method returns true if the given node is expanded .", "returns a new renaming object whose fields are clones of this object s fields meaning that they are new vector objects containing the same elements .", "return true if we should create a new top - level span .", "returns the size of this event queue .", "create an xmethod object from a bcel method .", "make the request to the twilio api to perform the read .", "check to see if the consistency group has been created for the given storage system .", "cleares the automation modification", "retrieves a decryption tool from dkv using a given key .", "marshall the given parameter object .", "set the columns in the reportquerydialog", "apply the proffered event to the replication target .", "check two objects , each possibly null , are either both null or are equal .", "remove the most recently added instance of the preinstantiate delegate .", "reads the alias with a given path in a given site .", "returns the released state of this barrier", "visits an annotation of a parameter this method .", "overwrite / replace the current references with a provided reference .", "method to get the message version of the workbench", "returns if the value is not null", "returns the version given its string representation , current version if the argument is null or empty", "main for standalone service tests", "delete trigger on server", "do the appropriate processing for cfb mode decryption .", "adds the content ( expressed as a multivariate distribution over variables ) to the current dialogue state , and subsequently updates the dialogue state .", "an event handler method", "when there is a need to add a target callback manually use this method .", "checks the range of the touch coordinates and set the respective side .", "deletes a section comment .", "creates a new address space object .", "invoked after the x position of the node changed .", "sets the timestamp for the subsequent data added", "compress a source file / directory to a tar / bzip2 file", "builds a tree of textobjects from the given sentence at the specified location", "reports that the type of an object in a property is unexpected .", "convert internal representation into subrip text format and save to file .", "clear the selection without warning listeners", "creates test files of the specified size relative to the base directory .", "a list of policies that allowed the authentication .", "convert pair of strings to single string delimited by ' . '", "callback for connection closed .", "display a system info message as if it had come from the server .", "the object implements the readfrom method to restore its contents by calling the methods of datainput for primitive types and strings or calling readexternal for other objects .", "get metrics that can be queried for an app service plan , and their definitions .", "this method updates the menus of all the scorecards previously generated so people can navigate between all the tool results .", "creates and pushes to the stack the array to hold all the parameters to redirect , and optionally this .", "read extra data spongedata from the entity s nbt tag .", "read config files", "creates a class map for specific class and registers it in the cache .", "returns the range of values the renderer requires to display all the items from the specified dataset", "use this api to fetch all the nsrunningconfig resources that are configured on netscaler .", "instantiates a new split string validator .", "invokes http request url and returns response code .", "add specific content for this component to the passed stream in xml format", "get a new xmlregistryresponse object initialized with the xml", "start an options request to the given url", "remove the child at the specified position of this group nodes children", "paints the red dot on the given position", "application exit method", "invalidates a session .", "add interface declaration to proto externproto interface list", "gets number of write requests in a queue that have not been processed yet .", "extract the bytes in the given bytebuffer and return it as a byte [ ] .", "tests extracting data length", "join the specified transaction if not already joined .", "return the value of the specified simple property of the specified bean , with string conversions .", "a method that creates the workflow method for adding vplex volumes to a consistency group .", "constructs a new imageloader .", "removes a parameter from the decision", "get a methods implementation with a calendar for date and time base tests set to a hardcoded data .", "perform an upgrade pre - flight check on a cluster .", "passes double click events to the nodes to handle them .", "provides the hash code appropriate for the cycconstant", "parse a json data structure from content within a given file .", "returns an input stream to read the vector starting from the first byte .", "hides the left navigation pane", "get the commandlineprogramgroup object from the commandlineprogramproperties of this work unit .", "returns info object with the specified value .", "return hex - dump from string", "returns format object related the given character", "get an iterator over the predecessors of this vertex i . e . the sources of the vertex s incoming edges .", "remove a suggested parameter from the event .", "remove a control", "handler method called upon receipt of a starttls command .", "return an iterator over the filter ' s data authorities .", "checks if a resource exists", "determines whether this object has a value program for horizontal translation", "creates a new compact mutable string copying a part of a given character array .", "return the height of the parent ( which is presumably a jviewport ) .", "you are not supposed to instantiate this class .", "wait for the job to complete .", "delete the attribute value .", "initializes log directory location .", "returns the value s of this effect in the currently selected text of the active rtedittext .", "create the ui delegate .", "and of all the given conditions", "find and replace any variables in the form", "shortcut method to remove all change reports from this object .", "returns true if direct publish permissions d are required by this permission set", "clear all devices checked state", "adds a gene to the organism", "runs the given command .", "returns a list of executed commands", "apply mask penalty rule and return the penalty .", "adds a parameterized view to the named window .", "link specified element in the list after this element", "compare based on name", "method to display the a record via the specified template", "connect to a database .", "url - decode a token .", "construct an instance with the given name and list of listeners .", "sets mime headers in http servlet response .", "sets the text to be displayed in the menu", "add an element of type polyglot types type to the set only if it has no supertypes already in the set", "test whether the one sphere with center ( ax , ay , az ) and square radius radiussquareda intersects the other sphere with center ( bx , by , bz ) and square radius radiussquaredb , and store the center of the circle of intersection in the ( x , y , z ) components of the supplied vector and the radius of that circle in the w component .", "modifies the current incomebeforetaxes", "takes two vectors one of the oids and the other of the values .", "clears the path branchgroup and the on screen objects", "add a component", "building a contentelement from a single line .", "asserts that the given byte arrays are equal", "only invoke while holding the terminated lock", "see section 7 10 3 of the ejb 2 0 specification", "insert the object into the binaryheap", "detach all of its children", "process the the tests under the tebase folder , and creates an integrated config . xml .", "zooms in by the zoom factor use the specified point as the center", "initializes a delete request to the given url .", "parses and adds a multiple class files .", "train the classifier based on values in flags", "return information about the script tables in this gsub table .", "check that a constant has the expected tag .", "creates and returns a copy of this uri", "use this api to update appfwlearningsettings resources .", "ensure that the array has space to contain the specified number of elements .", "returns a random int between begin and end", "loads one texture file", "computes frame size and location to fit into screen", "removes trailing spaces and comments from a column .", "generic implementation for finding all the services or operations that have one specific model reference .", "returns offset from gmt ( utc ) in milliseconds for the given localized gmt offset format string .", "computes the backbone for the given variables .", "this function convert france lambert iii coordinate to", "resolve attributes and look up attribute names if all attributes need to be fetched .", "write a new document to replace this files representation of the document", "converts the internal representation to an actual float .", "marshall the given parameter object .", "finds first index of a substring in the given source string with ignored case .", "creates new form gotopopup", "create a segmented button painter .", "set the color for one or more faces using boolean flags", "process each event in our list using the given runner", "returns true if the user is super user", "get the permutation table of the old glyph id to the new glyph id .", "deserializes a serializabledirectedgraph object that is stored in the given br location .", "manages the state of the scrollbars when new items are added or the bounds are changed .", "removes all nodes from a criterium tree .", "returns a single entity from query", "this method takes a double - quoted string as identified by the parser and creates a standard java string from it .", "determine the maximum health of this entity", "restore the quantized band spectrum coefficients", "convert number to primitive wrapper like boolean or float", "handle the selection event", "reset to an empty configuration .", "render the chart and mark the data as not dirty", "a convenience method for creating a synchronized map .", "filters the files contained in a directory .", "calculates the number of moves one player has over another", "seems there are bad naming in the library the sysout is in channel . getinputstream ( ) ; the syserr is in ( ( channelexec ) channel ) . seterrstream ( os ) ;", "returns count information consisting of node counts and link count", "checks if is end entry", "inserts the string into this builder .", "check if recursively deleting from the ufs is \" safe \" .", "returns the constructed primary key from a result set", "entry point from the operating system command line .", "removes this tag from the chain , connecting prevtag and nexttag .", "stores the default beans of any session", "check if the desktop has now windows", "writes a big - endian 16 - bit short integer to the buffer .", "creates a list of days between the specified start ( inclusive ) and end ( inclusive ) .", "updates the position , scale , alpha and image shown for all four imageviews used by the imagecarousel .", "read a chunk from is", "this method doesn t clone the array passed into it .", "gets the cached font", "clears the results list .", "get a media services account .", "removes a raw module from the database .", "invoked when a component loses the keyboard focus .", "read the content of a file .", "update the state of a pending approval change", "returns the number of elements currently needed to store all contained elements", "adds a graphic to the overlay .", "returns the number of rows matching the dynamic query .", "indicates if the message passed the golay and reed solomon parity checks or was corrected .", "initializes the settings object to work with depending on the dialog state and request parameters .", "copies elements in original array to a new array , from index start ( inclusive ) to end ( exclusive ) .", "find the next or previous time at which the moon ' s ecliptic longitude will have the desired value .", "define what must be equals for us to consider a wlpinformation to be essentially the same .", "convenience method to create xml attributes written by starttag ( )", "closes the event attached to the given overlapped structure .", "removes downed host pool from pool map .", "generated the report .", "returns a well formed repldbmsevent fragment with a specified shard id .", "gets the number of columns to group the radio buttons in", "returns the next midi event", "check that the supplied array of offsets as other info contributors is long enough compared to our expectation", "reads through all pre - defined protocols and any protocols within the \" protocols \" subdirectory of guacamole _ home , returning a map containing each of these protocols .", "sets whether or not the subscription should automatically acknowledge messages processed .", "scroll the contents to position x , y", "get resource url for addsoftallocations", "xors two 8bit values updates the flags and returns the result", "performs the twitlonger callback , should be done after successfully using the ' post ' method .", "create a new timeduration using the absolute difference as the time period between the two supplied timestamps", "create a futurew object that asyncrhonously populates using the provided executor and supplier", "returns the imaginary value of a complex number from this vector fast", "returns true if this version is older than o", "marshall the given parameter object .", "release a read lock .", "this adds a property descriptor for the eg intensity feature", "this is used to send the registration id to mdm server so that the server can use it as a reference to identify the device when sending messages to google server .", "if name / path changes , invalidate the file handle ( if not null ) .", "copies the text of the output log to the clipboard .", "converts a long value to a byte .", "determines whether type could be the type of a stun request as opposed to stun response .", "returns the objectpermissionset related to the type of the given entity .", "imports an idb file while showing a progress dialog .", "gets the password", "marshall the given parameter object .", "instructs the type checker that a property access is dynamic .", "every public method must preserve these invariants .", "removes all of the mappings from this map .", "returns the set curves calibrated to \" shifted \" market data , that is , the market date of this object , modified by the shifts provided to this methods .", "performs the definition of a new property .", "write a configuration file with the configuration for classes .", "handles changes in focus on the text input for the password ( basic authorization ) .", "returns either lrmispaceimpl or spaceproxyimpl .", "save extra classpath files to the workspace .", "add the text in current node to document text buffer , create and add to index a field annotation out of the text .", "adds a bitmap to both memory and disk cache .", "notification that focus has been gained", "get the offset of the string data for the given name record .", "convert a shape object into a list of double [ ] .", "used to verify that after a broker restart durable subscriptions that use wild cards are still wild card subscription after broker restart .", "set the name of this gallery", "create an instance of the specified java content interface .", "adds a info line with separated key and value .", "check if any mime type is associated with the passed extension", "returns the difference in degrees between this", "constructs a priority queue that contains the elements of a collection .", "returns the pattern from the specified data set indexed by the specified index", "adds all the epcs to the xml file", "returns an integer representation of the specializers value for use in computing its hashcode", "saves content of a key ' s value as file in the files section .", "gets the full key list .", "two instances are equal if they have the same name .", "hack method to allow hadoop to re - use this object", "the resource drift status values to use as filters for the resource drift results returned .", "associates the specified value with the specified key in this bucket", "if the bindings are distinct for the configured variables then return those bindings .", "throws a parameterexception if none of the supplied parameters are defined .", "strips quotes from the given string .", "changes the roles .", "exposed method to remove active dynamic light sources with .", "rotate all nodes in a way , since the nodes keep their ids , the way itself doesn ' t change and doesn ' t need to be saved apply translation only once to the first node if way is closed .", "create a file representation from an existing public key .", "run the test runnable using the mock ebeanserver and restoring the original ebeanserver afterward .", "this method returns the times at which the numerical method should stop while rolling back the asset .", "returns the number of bytes that can be read ( or skipped over ) from this input stream without blocking by the next caller of a method for this input stream .", "creates the value panel .", "loads the relevant class for diver use then connects to the database opens one connection and one statement", "parses a single emote set .", "method to renew oauth2 tokens by passing the refreshtoken", "create a journal entry , add the arguments , and invoke the method .", "visit web plugin information .", "array of y2 coordinate", "creates a new call resolver target .", "send an adb command using existing socket connection the streams provided must be from a socket connected to adbd already", "iterates over route , populating points and segments lists .", "multiplies this quaternion by the inverse of quaternion q1 and places the value into this quaternion .", "constructor for primary key", "flushes batch statements and commits database connection .", "sets the background color and enable status for the controls", "submit a failure sla event", "parse column definitions for the current table", "add a child to the child list .", "invoked when a mouse button is pressed on a component and then dragged", "creates a new log connection .", "start the connectthread to initiate a connection to a remote device .", "rdp decoding according r and d checkouts .", "adds all the elements in the given array list to the array list .", "can we download .", "attempts to unload class , it only unloads the locally loaded classes by", "create a data indication .", "compute the scores of all genotypic compatible tables using the instance score function or optimized versions", "verify the key with the luhn check .", "disables the breakpoint if it is enabled .", "with classpath or file path t .", "returns the number of subsection of this section .", "creates a groovy language lexerframe for the given script text", "overrides simplenode closenode", "creates the lmv2 response for the supplied information .", "paint the pieces that remain for selection", "remove the most recently added instance of the postinstantiate delegate .", "parse a res dataset from an input stream .", "shows the selection", "writes a single short .", "this method will convert list of string to list of byte array", "create and add to index a field annotation with the given data", "convert the match into a map .", "update internal state and return the next smaller search string for the url", "takes all the used nodes and makes them unused .", "expands all the children down the tree from this node", "updates the visibility state of all edges in the graph .", "convenience method for binding all available data from an existing contact", "create an authorattribute for the given account suitable for serialization to json .", "cast an array to the specified element type .", "adds the specified row data to this filter2d .", "returns the index of the element that would be returned by a subsequent call to previous .", "deletes a debugger template from the database .", "i ' m done with the model , free the resources .", "returns true if form input is selected , checked , on or yes .", "setup before the tests .", "save recording with the given name , and save recording file info to database", "gets the current interval duration in milliseconds", "initializes this security manager instance with implementation specific properties and any resource creation access needed .", "indicates if the response entity should be decoded", "use this api to fetch appfwfieldtype resource of given name .", "keep events going to the same listener ordered .", "reads ( count ) sms from all contacts matching pattern", "use the base class as the default class .", "configure the bugcollection if the bugreporter being used is constructing one .", "entry point for loginstate .", "create a groupmatcher that matches trigger groups equaling the given string .", "creates a calendarmanager", "checks if a usecase has roles", "removes tags from a project .", "sets the scrollarea to be used", "test if the given expression has side effects .", "gets subject id per call .", "inserts a + if the double is in scientific notation .", "removes the first occurrence in this list of the specified element optional operation", "gets the relation cell .", "determine if interval is fully specified", "removes the specified menu item from the bar", "execute delete operation by entities", "if this is the popup trigger , process here , otherwise defer to the superclass", "add property change listener", "finds the minimum value in the list .", "set the background colour of the graphics context .", "gets the event with the given name", "returns the modulo - 3 scalar product of the two provided bit vectors .", "visits a jump instruction .", "initialization of the servlet .", "resend certificate email .", "returns true if the presence of an vault el function is detected .", "constructs a new chatlog with all required information", "increments the version property of the given entity by one .", "this method will be called on space initialization .", "this methods checks whether a rectangle that is represented as corner points floats fills the crop bounds rectangle .", "xtn terminating handle under xtn updates .", "do we use subject for locking itself ?", "returns true if recentdeletes hash in engine need to be used .", "execute a delete call against the partial url .", "adds a page to the list of pages .", "retrieves whether concatenations between null and non null values equal null", "ends the current table , discards it and pops the top of the stack to be the new current table .", "splits the set of input features into positive and negative laplacian lists .", "multi site composite data service .", "constructs a new exchangeratemanager and initialises the most used rates .", "ensure that encoded uri parameters are properly decoded .", "retrieve nodes child node by index", "check if packet was correctly decoded , also check if packet was correctly coded by aion client", "adds the specified facility declaration to the module scope", "these key - value pairs define initialization parameters for the serde .", "given to the message object", "gets the timestep that corresponds to the specified date", "visit a person .", "create and show a simple notification containing the received gcm message .", "create a unique new primary key name for the given mailobject .", "this method appends a point to the players path", "generate secure random id string .", "checks to see if there are pending transfers", "converts an expression type enumeration value to a numeric value .", "show the controller on screen .", "invoked after the display style of an operand tree node was changed .", "add a action to this notification .", "join tokens , exlude last if param equals true .", "creates a new unmanagedvolume with the given arguments .", "override parents terminate method to terminate the", "gets a type that defines just the minutes field .", "create a sourcelineannotation covering an entire method .", "adds a validationresult to the results - if there are any messages", "extract the last generic type from the passed type .", "verify whether protocoltype already exists or not .", "checks if parent model id is the same as best super family model id .", "sorts the specified range of the receiver into ascending order .", "getter for sentenceid - gets", "perform inverse dct on the n x n matrix", "modify properties of users .", "creates the checkbox panel to control if full paths should be shown in the modules table .", "parses an n - triples value , creates an object for it using the supplied valuefactory and returns this object .", "parse json parameters from this request .", "returns an enumeration describing the available options .", "skips the whitespace characters and advances the reader to the next non whitespace character .", "round this point so the x coordinate of the result will be a multiple of p _ horizontal _ grid and the y coordinate a multiple of p _ vertical _ grid .", "returns true if the phase wants the ir dumped after its run based on the ir options passed into the constructor", "creates a lazily concatenated stream whose elements are all the elements of the other stream followed by all the elements of this stream .", "gets the width of the receiver", "blends the two supplied colors , using the supplied percentage as the amount of the first color to use .", "this method can be used to base encode the specified data .", "this method is called from native code in order to write encoder output to the destination .", "adds a key - value entry to this hash .", "return the home associated with the j2eename .", "loads a library from the given stream , using the given filename ( including path ) .", "the list of workflow information structures .", "creates a new socket , binds it to myaddress : myport and connects it to address : port .", "called when a panel s position changes .", "builds a workitemhandler .", "retrieves the coordinate index associated with the vertex at the specified index for this object", "returns an enumeration describing the available options .", "creates a union wrapping a value of the first type", "receives some or all of the text in the current element", "this runs through the jobclusterarray and determines and assigns the nearest node for each aggregated job", "create a daemon thread .", "addes a crash handler to the app context", "sets the amount of time to wait ( in milliseconds ) for the request to complete before giving up and timing out .", "start the online reindexer if the current index is not already the latest .", "replies the type of context identifier selected by the user .", "initialization of the servlet .", "demotes a moderator to a regular user", "decodes protobuf message", "closes the cache and deletes all of its stored values .", "adds the given rules to the list of known sub partition rules", "us - ascii characters excluding ctls , whitespace , dquote , comma , semicolon , and backslash", "is the argument a white space character according to the pdf spec ? .", "checks if this split element should be split again by the algorithm .", "bug but i am unable to reproduce", "reads event types array .", "returns option with the give name", "returns the number of entries that match the template .", "set the sample range", "this method writes the message to the given", "deletes a comment from a text node .", "put a message back into the appropriate source stream .", "returns the bytes used to represent a class in an oplog .", "try to open input stream with given name .", "marshall the given parameter object .", "updates this orcondition in place so that it matches vertices that satisfy the current orcondition or that satisfy the provided orcondition .", "save the tab state : current position position sorted array of tab ids for each tab id , save the tab state", "paint the background mouse over state .", "writes the map header to the stream .", "recursively removes all comment nodes from the subtree .", "a set of metadata key - value pairs .", "sets whether this components value is valid", "creates a new reporter object .", "sorts the specified sub - array of floats into ascending order .", "sends an emi frame to the bcu2 connected with this endpoint .", "adds a mapping from the specified fieldnumber to the specified data , replacing the previous mapping if there was one .", "load all music and sound effect files", "return true if specified pathinfo represents uri of service doc .", "big - endian or motorola format .", "removes all status markers from the module .", "dumps a zip entry into a string .", "thread to wait until baratine should be stopped .", "return a profile photo for the given mid", "creates a union wrapping a value of the second type", "gets the paper width", "remove a given file from the configuration", "removes all of the items from the receivers list and clear the contents of receivers text field", "this method is called via a global method defined in authimpl . register ( )", "this method performs the actual invocation of server functionality", "methodname deleteorder", "searches the preference maps to determine the preference state of the named resource", "begin update of this shared object and setting listener", "returns when request succeeds", "check whether a string containing at least one ' / ' or ' \\ ' character is likely to be a fragment of xml .", "this class requires that the supplied enum is not fitting a collection case for casting", "method invokes the smi - s operation to remove the initiator hardware id from the array .", "creates a new node object .", "encode the given message object as json and send it to all open web socket sessions associated with given web socket channel identifier .", "replaces all the occurrences of variables in the given source object with their matching values from the properties .", "main scheduling thread loop .", "returns true if the given index is the index of the last handle", "move to next following node .", "will return the target bean and its direct predecessors for validation", "tests that we can run a backup followed by a restore using explicit names .", "returns this bitset as an array of integer ones and zeros", "primary sort by leaseexpiration secondary by leaseid .", "search the item with the given path .", "play a sound from a buffer", "method viewcommands", "allows the customer bill to be printed", "returns the next point in the traversal .", "drops the underlying database table .", "format ms interval to min / sec / ms", "calculate and return the sum of getpossibilitiescount for all blanks", "returns true if the given key is in the wallet , false otherwise .", "add a unit to the watch list", "returns the textual description of the time value .", "swipes with two fingers in a linear path determined by starting and ending points .", "deletes the component at the specified index .", "returns the connection anchor for the given", "created a semi random id guaranteed to be unique within the current", "implementations for specific nodes .", "sends affiliation confirmation email to user", "for numeric fields , set the current value .", "notification that the servlet context is about to be shut down", "generates the body of fingerprint - source - code .", "sets an attribute store", "concatenates the vectors rows [ i ] , i = 0 . . . rows . length , into a single vector .", "creates a new method invocation request .", "get the current status of device via local or internet if local it will use local first", "initialization of the servlet .", "compares long values returning or if l is less than equal to or greater than l respectively .", "extracts substring of preferred language from multilingual string .", "check to see whether a provided user password is correct with respect to an encrypt dict configuration .", "display storage pool information from recommendation", "checks if the dirty read bit was set for this modifier .", "generates the native guid format as storagesystem + serialnumber + port + wwn for storgeport objects", "removes a single instance of the specified element from this collection if it is present optional operation", "indicates if this container is actually showing its children", "checks to see if the class is serializable , then looks for fields that are both final and transient", "actually counts some words", "returns true if the specified string is a named parameter of the form : - - name = value", "creates a unique id and inserts that id into the database along with a time stamp", "creates a new vector of the length of the given list , and values copied over in order .", "constructs a new month instance .", "checks if the pauserequested flag was set and if so blocks : a ) if pausemillis = = pause _ forever , until pauserequested is cleared b ) if pausemillis ! = pause _ forever , until pausemillis elapses - or - pauserequested is cleared", "merges two adjacent runs in place , in a stable fashion .", "get the orbital period of a given orbit", "get the max value plus one for a byte", "marshall the given parameter object .", "instantiates a new jk validation exception .", "if a new categorie is added the event is fired update the list", "adds nodes for new imports required to resolve type declarations .", "stores an alarm in the sharedpreferences .", "close the single hibernate session instance .", "called for finding the separator .", "gets a list of the file shares for a specific file gateway , or the list of file shares that belong to the calling user account .", "retrieves the string representation of an long value from the result set .", "returns keys of all properties currently stored in this instance .", "sets the number of folds the dataset is split into", "information about the tagoptions .", "signal one waiting thread", "get the atomic number as an non - null integer value .", "checks if this entity is within the visible radius of a location .", "adds a field to run the multi match against with a specific boost .", "add a value to the current list of values for the supplied key", "sets whether loaded image will be cached in memory", "creates a new combo box object .", "adds a texture to the material .", "this method performs the actual invocation of server functionality", "add a nonplayercharacter to the list of currently playing characters", "returns the accessiblecontext associated with this textarea", "creates a new state object .", "show frame as maximized .", "install actions buttons and listeners on title pane .", "requests a new coordination context from the coordinator", "unnecessary as was a tentative utf - 8 preamble output but still not working .", "get the second of minute field for this chronology", "add a field with the specified value .", "set the default text formatter to be used .", "get a collection for loading a reference of the given type", "checks if the charsequence contains any character in the given set of characters .", "in case the file system is not case sensitive we compare the canonical path with the absolute path of the file after normalized .", "close the initialcontext that was used to lookup create the underlying usertransaction .", "open the database connection .", "this seems to equal the last prefix infix postfix or nonexpprefix op that was parsed .", "clear all data storing information on the current pages layout used after the page layout is completed", "this method is called from the fileselector", "marshall the given parameter object .", "writes an empty element tag to the output .", "delays the caller by delayms milliseconds .", "get the string representation of an attribute", "analyzes the sub - resource locator method as a class result ( which will be the content of a method result ) .", "creating a filepath for vlt files", "informs the given notified object about the performed comment changes in the database .", "lexicographically compare paths", "saves the history of this control", "saves all settings of type integer .", "the bgp peers configured on this virtual interface .", "copy the device rssi", "processes all global scalars names with specific processor", "marshall the given parameter object .", "passes the setattacktarget event to the modifier list", "adding a new row with the totals", "read a string and return its boolean representation .", "gets the mean frame duration in milliseconds", "returns true if transition can be fired", "performs a load of a dto from database", "just set dialog visible", "returns the minimum bond order for a list of bonds , given an iterator to the list .", "writes a charsequence to a file creating the file if it does not exist using the default encoding for the vm .", "returns the last part in the list .", "this overrides pdftextstripper ' s flushtext method : instead of writing to output stream , we save the information in our own data structure", "get the version info for the gitlab server using the gitlab version api .", "opens a tcp and udp client .", "render a textual textfield", "indicates if audio output is current inactive meaning that the audio output hasn t recently processed any audio packets .", "null - checks user executor argument , and translates uses of commonpool to async _ pool in case parallelism disabled .", "calculate this vector relative to another vector", "records one frame of the recording at the specified frames per second", "id addtimeinterval nstimeinterval seconds", "rregister the given thread .", "edits an instruction comment depending .", "ends the type arguments of a class or inner class type .", "called on entry to a group visit", "send request for more data on connection to remote endpoint .", "move to next element in the array .", "a specialized simplified mapping source method , takes the form of simple properties definition : ( \" field1 \" , \" type = string , store = true \" ) .", "set this movers host name", "reports whether or not the receiver will accept children of the given class", "queries the probability distribution encoded in the bayesian network , given a set of query variables , and some evidence .", "extract fields from mcurrpt , respecting the update * fields of mcurrpt .", "performs special handling for stale statements , such as clearing the statement cache and marking existing statements non - poolable .", "creates a new process instance for the latest version of the process definition with the given name and registers it for auto save", "writes a new type substitution to the database that associates an operand tree node with the nth member of a given base type .", "put a dialog into the dialog table .", "shuts down the test harness , and makes the best attempt possible to delete datadir , unless the system property \" solr . test . leavedatadir \" is set .", "reads the password from the console replacing all characters with asterisks", "we only want to remember the result of a filter match if it is called as a result of a consumer asking for a message .", "reverses ongoing animations or starts pending animations in reverse .", "returns true if the leading character in the hostname is a and therefore represents a matching subdomain or false otherwise", "small helper method to capitalize the first character of the given string .", "initializes the comments of a text node without any database access .", "ensures that the array is consistent by checking various safety conditions .", "order of array is : 0 - clientid , 1 - workstationid , 2 - applicationname , 3 - accouninfo", "marshall the given parameter object .", "complete the method arguments from the attributes", "render the checkbox .", "returns the position of the field in front of this object", "distributes the terminate message", "close the data turbine caching and archiving data submitted from this connection", "centers the next search result .", "reads every line from the file and puts them to the list .", "adds a property to the fixed properties set .", "marshall the given parameter object .", "sets the time in the specified timepicker .", "show badge at index", "get current option alignment", "convenience method to specify the protocol to use .", "extract and return a substring that starts at the specified position and ends at the character before the specified position", "paints the given wradiobutton .", "returns a new , empty dom document .", "part of the tests of quartz", "find all tves except inside of aggregationexpression", "register a single manageable", "increases the current score when advancing to the next level .", "adds a field ref constant .", "enumerates all known buckets .", "if an input string was specified , stream it to the process standard input .", "return the tests included in this test suite .", "return the total amount of actual time for periods ending before the given date", "deletes the recources at \" path \"", "decrements the count of in flight transactions to the resource being monitored ."], "label": ["what", "what", "property", "what", "what", "property", "what", "what", "what", "property", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "why", "how-it-is-done", "property", "what", "what", "how-it-is-done", "how-it-is-done", "why", "how-it-is-done", "what", "property", "what", "how-to-use", "what", "property", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "why", "how-it-is-done", "why", "property", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "why", "what", "what", "property", "how-it-is-done", "what", "how-it-is-done", "why", "what", "property", "what", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "how-it-is-done", "property", "why", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "how-to-use", "property", "what", "how-it-is-done", "what", "what", "property", "why", "property", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "how-to-use", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "property", "how-to-use", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "others", "why", "why", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "why", "why", "what", "property", "what", "property", "what", "property", "how-it-is-done", "property", "what", "why", "what", "what", "why", "others", "why", "why", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "how-it-is-done", "how-it-is-done", "why", "what", "property", "what", "why", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "what", "property", "how-to-use", "what", "what", "what", "what", "what", "how-to-use", "what", "how-to-use", "what", "what", "what", "what", "what", "how-it-is-done", "why", "what", "how-to-use", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "why", "what", "how-it-is-done", "why", "what", "how-it-is-done", "what", "why", "how-it-is-done", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "how-it-is-done", "property", "what", "how-it-is-done", "property", "what", "how-it-is-done", "others", "property", "why", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "why", "what", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "others", "why", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "why", "why", "what", "what", "what", "how-it-is-done", "what", "what", "property", "what", "what", "property", "what", "what", "why", "what", "why", "how-it-is-done", "what", "why", "what", "others", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "what", "property", "how-it-is-done", "why", "property", "property", "how-it-is-done", "how-to-use", "what", "what", "what", "what", "what", "others", "what", "what", "how-it-is-done", "property", "why", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-to-use", "why", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "why", "what", "what", "what", "what", "why", "what", "what", "what", "what", "property", "how-it-is-done", "what", "others", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "how-it-is-done", "how-to-use", "what", "what", "what", "why", "how-it-is-done", "what", "how-it-is-done", "what", "property", "how-it-is-done", "what", "property", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "how-to-use", "what", "how-it-is-done", "property", "property", "how-it-is-done", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "how-it-is-done", "property", "how-it-is-done", "property", "property", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "property", "property", "what", "what", "property", "what", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "how-to-use", "what", "what", "what", "why", "what", "what", "what", "what", "property", "what", "others", "why", "property", "how-it-is-done", "what", "what", "property", "what", "property", "property", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "how-to-use", "how-it-is-done", "why", "what", "what", "what", "what", "what", "what", "how-it-is-done", "why", "what", "what", "property", "what", "what", "what", "others", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "why", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "why", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "property", "property", "what", "how-it-is-done", "property", "what", "how-it-is-done", "how-it-is-done", "property", "what", "what", "what", "what", "what", "property", "what", "how-to-use", "what", "what", "what", "how-it-is-done", "what", "what", "what", "property", "how-it-is-done", "how-it-is-done", "property", "property", "why", "what", "property", "what", "what", "what", "why", "what", "what", "property", "how-to-use", "what", "property", "what", "how-it-is-done", "how-it-is-done", "why", "why", "what", "why", "how-it-is-done", "what", "what", "others", "what", "property", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "property", "what", "how-it-is-done", "why", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "why", "what", "what", "property", "how-it-is-done", "property", "how-it-is-done", "what", "what", "how-it-is-done", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "why", "what", "how-it-is-done", "why", "what", "why", "how-it-is-done", "what", "property", "how-it-is-done", "why", "what", "what", "how-to-use", "what", "what", "how-it-is-done", "what", "what", "property", "what", "what", "property", "what", "how-to-use", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "why", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "others", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "why", "what", "what", "property", "why", "what", "property", "what", "what", "what", "what", "what", "what", "property", "what", "how-to-use", "why", "how-it-is-done", "what", "why", "how-it-is-done", "how-it-is-done", "why", "property", "what", "what", "what", "why", "what", "property", "what", "what", "what", "what", "what", "what", "why", "what", "how-it-is-done", "property", "what", "what", "what", "property", "what", "why", "what", "what", "property", "how-it-is-done", "what", "what", "why", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "property", "how-to-use", "how-it-is-done", "what", "property", "property", "what", "what", "why", "how-to-use", "what", "what", "what", "why", "how-to-use", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "property", "what", "how-to-use", "what", "what", "what", "what", "property", "what", "what", "property", "why", "what", "property", "what", "property", "what", "how-it-is-done", "what", "what", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "property", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "property", "what", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "why", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "how-to-use", "what", "why", "how-to-use", "why", "what", "what", "how-it-is-done", "what", "what", "what", "how-to-use", "what", "property", "what", "why", "what", "property", "what", "what", "what", "how-it-is-done", "why", "how-it-is-done", "property", "why", "what", "how-it-is-done", "why", "what", "what", "what", "what", "why", "why", "what", "what", "property", "why", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "why", "what", "what", "what", "why", "what", "what", "why", "what", "what", "what", "what", "how-it-is-done", "property", "property", "property", "property", "property", "what", "why", "how-it-is-done", "what", "how-it-is-done", "what", "how-to-use", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "why", "what", "what", "what", "what", "what", "why", "property", "what", "what", "what", "property", "what", "why", "how-it-is-done", "what", "property", "what", "how-to-use", "why", "what", "what", "property", "what", "how-to-use", "what", "what", "property", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "why", "why", "why", "what", "how-it-is-done", "what", "how-it-is-done", "how-to-use", "why", "what", "property", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "how-it-is-done", "what", "property", "what", "why", "what", "what", "what", "what", "what", "what", "what", "property", "what", "property", "what", "why", "what", "why", "how-it-is-done", "what", "why", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "property", "property", "what", "why", "what", "property", "what", "what", "what", "what", "property", "property", "what", "what", "what", "what", "how-it-is-done", "what", "property", "why", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "why", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "property", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "why", "what", "property", "others", "how-it-is-done", "how-to-use", "what", "how-to-use", "what", "what", "what", "property", "what", "why", "what", "property", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "property", "property", "property", "what", "how-to-use", "what", "how-it-is-done", "property", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "why", "how-it-is-done", "how-it-is-done", "what", "what", "what", "why", "what", "property", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "why", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "property", "how-it-is-done", "what", "what", "what", "what", "property", "what", "what", "why", "why", "what", "how-it-is-done", "what", "property", "property", "property", "property", "property", "what", "why", "why", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "what", "property", "what", "what", "what", "property", "property", "why", "what", "why", "how-it-is-done", "why", "how-to-use", "what", "what", "what", "how-to-use", "what", "how-it-is-done", "what", "why", "how-it-is-done", "what", "what", "why", "how-it-is-done", "why", "what", "how-it-is-done", "why", "why", "how-it-is-done", "what", "what", "why", "property", "how-to-use", "what", "what", "why", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "others", "what", "property", "why", "what", "what", "why", "what", "what", "why", "what", "property", "what", "what", "property", "property", "property", "what", "what", "what", "how-to-use", "property", "what", "why", "what", "property", "how-to-use", "what", "what", "what", "property", "what", "what", "how-it-is-done", "why", "property", "what", "what", "what", "property", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "why", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "property", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "property", "what", "what", "how-it-is-done", "why", "property", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "others", "what", "what", "what", "why", "how-it-is-done", "property", "what", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "property", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "how-to-use", "what", "what", "property", "what", "property", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "property", "what", "property", "what", "how-it-is-done", "what", "what", "why", "how-it-is-done", "how-to-use", "what", "what", "property", "property", "what", "what", "what", "why", "why", "how-it-is-done", "how-it-is-done", "what", "property", "what", "what", "what", "property", "why", "what", "property", "what", "what", "why", "property", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "why", "what", "what", "what", "what", "property", "what", "property", "what", "property", "what", "what", "what", "why", "why", "what", "property", "property", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "property", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "why", "how-it-is-done", "how-it-is-done", "what", "why", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "property", "what", "what", "why", "why", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "what", "why", "why", "what", "what", "property", "what", "others", "property", "how-to-use", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "what", "others", "property", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "why", "what", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "what", "how-to-use", "how-it-is-done", "how-it-is-done", "what", "why", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "how-it-is-done", "property", "what", "what", "how-it-is-done", "why", "how-to-use", "what", "property", "how-it-is-done", "what", "how-it-is-done", "how-to-use", "what", "why", "property", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "others", "what", "property", "property", "what", "why", "what", "how-it-is-done", "how-to-use", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "others", "what", "how-it-is-done", "what", "property", "what", "what", "what", "how-it-is-done", "how-to-use", "what", "what", "why", "what", "property", "what", "property", "why", "what", "how-it-is-done", "what", "what", "property", "what", "why", "how-it-is-done", "property", "what", "what", "what", "what", "what", "property", "what", "what", "why", "property", "what", "property", "how-it-is-done", "how-it-is-done", "property", "what", "why", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "why", "what", "what", "what", "why", "what", "property", "what", "what", "why", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "property", "what", "what", "what", "what", "why", "why", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "property", "how-it-is-done", "property", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-to-use", "why", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "how-it-is-done", "why", "how-it-is-done", "what", "how-it-is-done", "what", "why", "what", "property", "what", "what", "how-it-is-done", "property", "what", "what", "what", "property", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "why", "how-it-is-done", "what", "property", "others", "what", "what", "what", "what", "what", "what", "property", "property", "what", "what"]}