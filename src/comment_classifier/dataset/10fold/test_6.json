{"id": [17433, 17192, 11868, 8367, 345, 10009, 7424, 727, 18886, 17419, 1443, 13354, 17666, 11909, 823, 11783, 5186, 5969, 9155, 19824, 7338, 14271, 16749, 5971, 13871, 14655, 2308, 6626, 4151, 3467, 17801, 17787, 19655, 3442, 2693, 4133, 17507, 11343, 3866, 10824, 11240, 1999, 7020, 9781, 2407, 11287, 8485, 8035, 13848, 18130, 4148, 18425, 4046, 1620, 11199, 18158, 16497, 8717, 8254, 10919, 17836, 15731, 2279, 15583, 10625, 15871, 1821, 6425, 74, 15850, 7247, 18157, 18910, 3448, 15131, 884, 18091, 14903, 17388, 7795, 3012, 400, 1733, 5748, 12636, 2258, 9512, 10940, 9295, 12873, 12281, 3420, 19061, 3216, 542, 7487, 15673, 4480, 3353, 138, 7219, 13191, 15350, 1446, 8684, 15812, 19559, 13471, 18546, 5849, 13711, 14342, 15184, 1173, 13619, 8208, 16134, 168, 6776, 19847, 19409, 9557, 3091, 5925, 3127, 18849, 8927, 3088, 16283, 19899, 2754, 5564, 9753, 18532, 5028, 15067, 3242, 7610, 16095, 8647, 3455, 5954, 5957, 13623, 10496, 8064, 16413, 983, 14653, 18321, 6071, 19808, 12288, 4187, 6678, 16604, 12322, 12757, 12398, 17336, 8817, 10552, 13708, 19731, 11528, 19023, 11062, 9029, 2498, 10821, 6145, 5407, 1826, 7500, 6765, 6131, 13975, 784, 11462, 16279, 14265, 5169, 5756, 14573, 5011, 19281, 1538, 9353, 880, 9665, 11675, 16810, 14745, 13727, 11524, 14831, 12263, 86, 16520, 12339, 4819, 13445, 11570, 18775, 13789, 3839, 7124, 2720, 15863, 433, 13225, 3627, 1451, 17902, 12695, 5083, 18264, 972, 9215, 1492, 13487, 572, 7877, 19987, 19222, 1328, 2133, 13160, 9374, 19229, 12210, 1602, 5460, 9683, 19371, 8430, 8960, 3307, 17139, 4559, 2193, 8563, 16546, 3637, 14523, 14118, 2628, 3462, 17309, 4796, 13691, 8377, 6473, 2354, 5034, 8, 6926, 8061, 8296, 1555, 15315, 17720, 9647, 12752, 3860, 9858, 10990, 16277, 11880, 16045, 19768, 4278, 19515, 9958, 7725, 12407, 13717, 3145, 18309, 6794, 19815, 14470, 5602, 15261, 6985, 13918, 5306, 14579, 19950, 95, 3409, 18887, 13723, 5813, 1141, 16903, 65, 11803, 11826, 690, 18638, 5539, 12818, 1458, 18310, 5206, 6430, 12748, 2833, 18963, 14341, 14631, 6442, 12522, 6259, 7476, 7073, 12889, 5891, 9940, 12229, 5247, 6543, 18164, 13521, 19090, 5471, 16646, 15912, 13512, 15680, 6807, 1659, 4918, 567, 15788, 13094, 15400, 5378, 9865, 5113, 7618, 1644, 14219, 18586, 9501, 7309, 8555, 13467, 8487, 14979, 19902, 16026, 934, 7753, 9114, 9438, 17956, 16491, 12569, 8374, 11057, 3664, 17783, 1723, 19450, 14828, 12697, 5436, 2050, 7030, 8925, 16545, 18802, 8472, 19485, 4059, 16953, 19675, 6679, 8407, 8322, 1018, 16965, 10167, 6119, 12701, 10387, 18667, 5485, 18640, 6456, 19362, 2471, 18867, 3078, 13050, 1058, 6036, 3106, 10374, 9650, 7692, 12173, 5200, 243, 11267, 9311, 4264, 6443, 16044, 10696, 16815, 12110, 6518, 7363, 17373, 18932, 13341, 14027, 16768, 12557, 1103, 17755, 6026, 5395, 4081, 18470, 19877, 3904, 8532, 15691, 10282, 2726, 1996, 10596, 10532, 13517, 1752, 16473, 19209, 15572, 19639, 12461, 10723, 9326, 3728, 10468, 9527, 17583, 15207, 5053, 3160, 9826, 10395, 16662, 1261, 17489, 19609, 3441, 7589, 9845, 15231, 11025, 11389, 4588, 3345, 6505, 7773, 2362, 6913, 8186, 4635, 18368, 8560, 9614, 18823, 12491, 19513, 1100, 11465, 6159, 18054, 10426, 11623, 6170, 2688, 19495, 6150, 11956, 1264, 12953, 14185, 19701, 17182, 7089, 12416, 14232, 9011, 8267, 6010, 15875, 15605, 9553, 1520, 1757, 11810, 1676, 5896, 14154, 11370, 348, 13618, 17386, 5749, 10305, 1417, 7902, 10216, 19963, 14553, 8052, 4159, 15328, 19000, 18639, 14008, 1211, 12271, 9677, 4689, 14574, 3157, 8083, 14412, 3859, 6212, 1684, 7045, 1218, 16733, 6488, 13738, 5751, 19504, 17420, 9705, 9107, 7588, 4656, 1165, 16602, 14694, 11833, 6204, 7788, 6762, 2312, 18657, 2014, 8789, 3208, 11100, 13220, 8190, 19086, 6990, 17000, 14763, 18919, 14556, 5873, 5856, 430, 14031, 17421, 19240, 9703, 17492, 12797, 8344, 15629, 4482, 5446, 10206, 3413, 8833, 3418, 14990, 860, 14482, 18442, 10163, 11466, 9350, 2603, 9279, 18185, 8819, 18769, 14378, 5393, 8798, 9525, 7650, 19991, 4736, 18989, 6108, 12558, 19657, 17743, 2520, 8003, 12725, 19502, 16748, 4402, 4775, 5499, 12920, 7061, 17687, 10896, 9362, 10002, 19965, 4357, 8338, 18347, 16350, 4308, 13951, 18565, 9126, 2267, 8933, 12768, 12567, 6481, 19425, 19947, 11760, 17305, 11014, 1855, 6227, 19670, 13393, 5754, 8737, 5806, 6870, 4504, 1015, 7187, 10867, 4848, 15403, 10802, 19816, 14098, 3415, 2098, 7490, 2742, 8431, 17248, 12699, 4143, 11097, 11176, 686, 3557, 13847, 8515, 11976, 14510, 12675, 6272, 14513, 763, 9668, 13504, 12415, 566, 13185, 7201, 17947, 2978, 889, 10619, 3902, 6903, 10297, 1778, 6028, 6712, 9792, 18553, 2735, 13351, 1715, 6295, 11274, 13935, 5650, 2297, 13120, 15756, 7311, 13788, 2190, 17678, 151, 3942, 4990, 3238, 7541, 15974, 1988, 11866, 2237, 14602, 12413, 7612, 13678, 2855, 11140, 4048, 7698, 17439, 17221, 9335, 13026, 13070, 15659, 10317, 5716, 16317, 2065, 5173, 2959, 12252, 18194, 6530, 14040, 9220, 15048, 4206, 7202, 9575, 14383, 6999, 15411, 13648, 1036, 15460, 12565, 11457, 15268, 11434, 12950, 14086, 9190, 692, 2778, 13480, 19520, 16830, 19307, 4747, 3530, 19117, 2981, 1816, 16948, 14209, 14795, 10540, 3464, 4935, 13404, 7360, 15277, 19514, 17028, 8912, 2015, 13685, 8522, 14407, 760, 518, 12839, 5241, 3371, 2195, 9606, 7388, 8828, 2682, 16109, 8896, 16255, 16440, 12429, 10323, 7595, 7715, 2449, 11563, 19624, 9471, 7325, 10607, 4953, 7758, 6199, 2339, 8948, 3209, 15080, 3795, 4940, 13384, 977, 13236, 3278, 9610, 861, 6925, 17768, 19919, 5879, 11444, 5765, 6974, 11036, 9131, 723, 2363, 2885, 15886, 8440, 2127, 9097, 19740, 6296, 4755, 14492, 16715, 13462, 4781, 16164, 17328, 18038, 7543, 18124, 9536, 9510, 5330, 2523, 13959, 261, 9991, 7744, 3482, 16083, 5812, 16548, 17626, 3360, 6332, 4624, 4328, 4879, 17493, 11841, 6464, 14501, 8530, 349, 8750, 6969, 3372, 1865, 15603, 19237, 19969, 308, 1929, 5179, 18856, 7553, 11393, 16595, 1497, 8503, 11324, 12089, 8509, 11593, 8753, 3489, 10076, 4827, 3290, 10598, 10910, 3878, 13772, 9036, 8537, 12499, 12692, 7572, 10115, 15670, 15271, 3458, 10328, 13767, 8237, 1680, 12485, 1131, 6318, 3832, 13531, 12151, 5071, 4763, 16962, 11371, 5147, 17081, 1702, 19997, 17987, 2602, 8567, 5190, 19271, 19335, 10529, 3685, 2318, 12626, 6284, 4331, 549, 4227, 17863, 9872, 31, 18970, 18219, 17001, 13256, 8918, 15308, 5386, 5739, 11821, 6056, 13894, 9403, 18988, 12216, 11115, 11827, 13773, 10477, 8711, 19395, 4441, 2765, 1106, 15100, 7920, 7726, 9757, 17442, 4238, 12919, 19643, 13218, 15532, 817, 17963, 9689, 1647, 9170, 6827, 16161, 10838, 9484, 6210, 17344, 1651, 3648, 2521, 9776, 2596, 4131, 2154, 11647, 15452, 6706, 7434, 10841, 2581, 18870, 13027, 17668, 18247, 11979, 754, 18880, 13961, 14957, 12359, 14236, 12280, 8792, 9256, 8841, 5830, 18883, 6560, 11022, 5003, 12530, 1568, 15907, 1354, 11194, 5274, 11718, 13125, 19767, 7575, 2299, 2347, 9657, 136, 11333, 10504, 12767, 16258, 8434, 17698, 12352, 4075, 5540, 713, 19753, 7779, 11265, 6556, 17411, 1519, 10583, 7544, 13904, 9355, 17130, 8381, 9310, 9176, 5703, 6279, 5755, 17267, 2226, 13757, 6152, 19693, 12436, 17200, 13383, 10612, 6960, 17511, 9375, 14506, 6308, 2017, 9828, 3356, 15092, 4733, 17264, 1685, 11302, 13933, 1501, 2763, 5769, 1198, 11553, 15409, 223, 3220, 16257, 5415, 7154, 7529, 10959, 7442, 17619, 3734, 14389, 4084, 6675, 16128, 16805, 14261, 13699, 5941, 11113, 10584, 16143, 14908, 19780, 11541, 13032, 17364, 13969, 2554, 19989, 7604, 9299, 5959, 15298, 16400, 17649, 15915, 17741, 2164, 12452, 12671, 2241, 11978, 13784, 1947, 13958, 14850, 10944, 185, 10560, 6884, 11504, 15973, 7881, 12902, 8681, 4834, 11769, 247, 599, 2096, 2217, 6967, 467, 6359, 6907, 1450, 12175, 7666, 4623, 12846, 7630, 19932, 13835, 18, 3725, 15330, 8294, 18159, 11072, 16461, 12918, 14558, 7846, 10981, 15540, 14848, 15931, 17149, 10859, 18824, 4022, 2894, 18642, 14526, 5889, 1239, 11898, 14587, 1801, 19258, 12138, 7485, 6892, 1425, 18134, 13849, 8455, 11114, 18844, 15511, 16054, 14877, 15394, 18332, 1543, 7307, 17035, 12449, 13158, 1195, 11068, 11590, 9754, 2208, 13800, 11542, 15158, 12068, 3476, 3923, 13498, 18410, 2580, 9420, 259, 13761, 9955, 18664, 6914, 769, 5956, 3008, 372, 13013, 4116, 7349, 14988, 3948, 19313, 9803, 245, 11939, 12811, 11741, 381, 10256, 9583, 11596, 691, 5618, 18046, 3431, 13844, 7919, 1309, 14712, 11674, 623, 19540, 13381, 7197, 16834, 315, 6177, 11309, 3751, 3865, 6979, 12393, 12698, 11619, 18025, 2620, 19003, 12196, 4396, 17639, 9586, 3521, 3055, 19444, 19241, 10872, 3390, 19717, 4425, 17126, 10938, 18589, 17365, 2752, 18358, 7564, 11196, 17660, 346, 14152, 14676, 13652, 17306, 1393, 5145, 6389, 253, 16920, 4066, 15346, 10753, 10150, 8005, 13608, 9808, 17826, 5153, 14348, 9773, 4040, 9637, 3944, 15392, 18129, 16209, 5857, 13502, 459, 19851, 11399, 3811, 12056, 6617, 6015, 13020, 3592, 11055, 6423, 17964, 16760, 9093, 2794, 15161, 2716, 15333, 14475, 4338, 16859, 13632, 8934, 8391, 7976, 18768, 18355, 18286, 14543, 16254, 19623, 6955, 16298, 10673, 6882, 10808, 13505, 18615, 9120, 9202, 7, 6622, 8592, 6128, 8134, 5335, 2662, 15685, 5374, 2980, 800, 12643, 15672, 1795, 14302, 5093, 5023, 12640, 2341, 14762, 10982, 18019, 1169, 9834, 6358, 9587, 18937, 3185, 17656, 8971, 13084, 8913, 18624, 14913, 6537, 7084, 9902, 13810, 12108, 16736, 18801, 10090, 216, 5625, 7123, 11874, 579, 18539, 5561, 1640, 4996, 14784, 13695, 18083, 11705, 4473, 7730, 12514, 7719, 11139, 9164, 4829, 16310, 17040, 16071, 13157, 2348, 3984, 1404, 18274, 3453, 338, 7700, 14127, 3597, 45, 17036, 4531, 1075, 11079, 9435, 10371, 3838, 10429, 6453, 1526, 9616, 18865, 9004, 2815, 7133, 9747, 19095, 1727, 4652, 16622, 12815, 12760, 3021, 1950, 12722, 16775, 10508, 15570, 19596, 531, 530, 10565, 2985, 19430, 13888, 1016, 17789, 16679, 6755, 19659, 6460, 8238, 12933, 14797, 3689, 13775, 17835, 6555, 14734, 4160, 15078, 8288, 9972, 5894, 4070, 9860, 14393, 19526, 16587, 5664, 15459, 3670, 1032, 8765, 545, 4215, 3763, 16767, 7522, 5511, 17337, 16726, 6081, 6450, 10668, 2624, 8722, 5268, 134, 17304, 7735, 10151, 14891, 12874, 8593, 5004, 16293, 11601, 18429, 2588, 3917, 6602, 4252, 12859, 16390, 1844, 13564, 5465, 8493, 4241, 4, 17241, 5019, 15300, 2773, 15431, 18743, 791, 7787, 7492, 2377, 6411, 11559, 18846, 17398, 16126, 19471, 5580, 14484, 16319, 15253, 13289, 14561, 7620, 3218, 2240, 12905, 13809, 10998, 17745, 17829, 14256, 7706, 75, 18843, 14247, 18456, 8535, 11171, 3315, 11185, 9859, 13971, 19649, 10951, 19769, 14386, 1486, 13311, 1877, 12422, 3505, 14944, 2262, 8416, 11879, 9982, 15163, 18186, 1186, 15294, 15584, 2697, 10646, 19921, 8490, 14657, 7000, 6484, 985, 13483, 15877, 12764, 16070, 15178, 10795, 7940, 19830, 10322, 7549, 5360, 17261, 8127, 4923, 2221, 15429, 14228, 12876, 7160, 15044, 14696, 5864, 9659, 417, 11897, 624, 1473, 10389, 4383, 11608, 16259, 13739, 4124, 18106, 14707, 4752, 19221, 11032, 12682, 4556, 12809, 15736, 528, 15304, 17098, 3569, 7989, 8489, 1116, 10500, 7429, 15039, 17898, 19593, 4481, 5345, 13572, 5482, 18387, 14769, 15528, 18964, 14777, 19201, 16936, 9343, 11936, 5121, 11544, 10569, 17527, 7681, 17435, 3386, 9986, 14385, 14260, 17506, 11720, 7019, 6630, 2186, 16016, 10263, 375, 5853, 15375, 4392, 7283, 2853, 7930, 13310, 582, 6569, 1124, 14068, 10449, 19577, 16285, 10585, 19854, 9083, 16782, 16809, 17881, 12862, 6672, 4695, 10792, 19742, 4619, 2915, 658, 7251, 9500, 16789, 17644, 10384, 1174, 15484, 939, 14801, 6676, 11467, 11406, 1296, 17048, 19472, 12762, 18576, 12233, 2306, 699, 16205, 5732, 8803, 17072, 14312, 5723, 17533, 3735, 11529, 17463, 19711, 12418, 18450, 11034, 516, 7705, 2194, 6851, 5922, 17193, 11667, 17663, 1510, 19137, 4707, 2919, 13568, 3665, 5886, 2924, 98, 10064, 772, 8566, 13629, 13874, 9919, 4369, 3247, 12243, 5412, 12276, 11634, 5768, 9259, 15775, 3783, 7431, 17257, 12466, 8146, 14632, 232, 8692, 17697, 5763, 3841, 11516, 4418, 3655, 6916, 15474, 9203, 17856, 18558, 1350, 16056, 10750, 3492, 9005, 14101, 7935, 16670, 11297, 8785, 16447, 6562, 10766, 13550, 17505, 14692, 11952, 1978, 7094, 19064, 14971, 13288, 16668, 19312, 13249, 14747, 17128, 4902, 1938, 16575, 16168, 4061, 13327, 13, 16645, 13318, 8998, 2453, 6093, 11234, 11691, 5946, 9866, 17339, 11160, 8865, 16354, 16246, 3940, 11947, 10928, 6345, 15455, 12105, 17958, 432, 1279, 879, 6864, 19855, 16346, 1977, 17830, 2646, 17392, 19804, 12895, 1229, 14709, 696, 2026, 10229, 1272, 17445, 5943, 11633, 8450, 14240, 7437, 19493, 10422, 10749, 6392, 6247, 12884, 12430, 10638, 1567, 1575, 9338, 14511, 12981, 6156, 4276, 3493, 15865, 15959, 7372, 18146, 3232, 18503, 19677, 11521, 11972, 17886, 18758, 3579, 5177, 4573, 14725, 18115, 3803, 4823, 15746, 17846, 2658, 4171, 18531, 19506, 9882, 9646, 17682, 6275, 13693, 5587, 4029, 5611, 12150, 8183, 5300, 15792, 5263, 10292, 6951, 18499, 11726, 4977, 12860, 6890, 11922, 7792, 4818, 18333, 11387, 4076, 5399, 13315, 13621, 16607, 19441, 12820, 12408, 19796, 13402, 13595, 319, 4054, 6221, 3989, 9173, 2550, 14009, 405, 19674, 6316, 3256, 1724, 3485, 18039, 16995, 9744], "code": ["public final void appendDot ( ) { compoundIDUS = UniqueString . uniqueStringOf ( compoundIDUS . toString ( ) + STR_ ) ; }", "void onParentNodeOpening ( View view , Node < ? > node ) ;", "public static void removeLocalTID(int localTID)\n    {\n        if (tc.isEntryEnabled()) Tr.entry(tc, \"removeLocalTID\", localTID);\n\n        localTIDMap.remove(localTID);\n\n        if (tc.isEntryEnabled()) Tr.exit(tc, \"removeLocalTID\");\n    }", "private void updateDistanceText(InstructionModel model) {\n    if (newDistanceText(model)) {\n      distanceText(model);\n    } else if (upcomingDistanceText.getText().toString().isEmpty()) {\n      distanceText(model);\n    }\n  }", "public static boolean checkMD5(final String md5Hash,final File file){\n  if (TextUtils.isEmpty(md5Hash) || file == null || !FileUtils.isReadable(file)) {\n    Log.e(\"Given String is empty or File is NULL or File is not readable\");\n    return false;\n  }\n  final String hash=getMD5(file);\n  if (hash == null) {\n    Log.e(\"calculated hash is NULL\");\n    return false;\n  }\n  return hash.equalsIgnoreCase(md5Hash);\n}\n", "    protected void fireBoardModelChanged() {\n        BoardModelEvent ev = new BoardModelEvent(this);\n        Object[] ll = listeners.getListenerList();\n        for (int i = ll.length - 2; i >= 0; i -= 2) {\n            if (ll[i] == BoardModelListener.class) {\n                ((BoardModelListener) ll[i + 1]).modelChanged(ev);\n            }\n        }\n    }\n", "public static void write(Context c,String msg){\n  String logFile=PrefStore.getLogFile(c);\n  BufferedWriter writer=null;\n  try {\n    writer=new BufferedWriter(new FileWriter(logFile,true));\n    writer.write(msg);\n  }\n catch (  IOException e) {\n  }\n finally {\n    close(writer);\n  }\n}\n", "    public String generateParameter(Object parameter) {\n        StringBuffer s = new StringBuffer();\n        s.append(generateKind(Model.getFacade().getKind(parameter)));\n        if (s.length() > 0) {\n            s.append(\" \");\n        }\n        s.append(Model.getFacade().getName(parameter));\n        String classRef =\n            generateClassifierRef(Model.getFacade().getType(parameter));\n        if (classRef.length() > 0) {\n            s.append(\" : \");\n            s.append(classRef);\n        }\n        String defaultValue =\n            generateExpression(Model.getFacade().getDefaultValue(parameter));\n        if (defaultValue.length() > 0) {\n            s.append(\" = \");\n            s.append(defaultValue);\n        }\n        return s.toString();\n    }\n", "public JCriteriumTreeModel ( final JTree jtree , final CCriteriumTree criteriumTree , final List < ICriteriumCreator > criteria ) { super ( new JCriteriumTreeNode ( criteriumTree , criteriumTree . getRoot ( ) . getCriterium ( ) , criteria ) ) ; m_jtree = jtree ; m_criteriumTree = criteriumTree ; m_criteria = criteria ; m_criteriumTree . addListener ( m_internalTreeListener ) ; }", "private void slideUp ( int position ) { this . position = position ; mPickerUIBlurHelper . render ( ) ; }", "public void read(ByteBuffer buffer){\n  buffer.get(_mask);\n}\n", "public java.lang.String getOperation() {\n    java.lang.Object ref = operation_;\n    if (ref instanceof java.lang.String) {\n      return (java.lang.String) ref;\n    } else {\n      com.google.protobuf.ByteString bs = \n          (com.google.protobuf.ByteString) ref;\n      java.lang.String s = bs.toStringUtf8();\n      operation_ = s;\n      return s;\n    }\n  }", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "\tpublic Index xpathGetIndex(String xpath) throws ParseException {\n\t\ttry {\n\n\t\t\tIndex index = indices_.get(xpath);\n\t\t\t// TODO: cacnonicalize key (use XPath object as key)\n\t\t\tif (index == null) {\n\t\t\t\tXPath xp = XPath.get(xpath);\n\t\t\t\tindex = new Index(xp);\n\t\t\t\tindices_.put(xpath, index);\n\t\t\t}\n\t\t\treturn index;\n\n\t\t} catch (XPathException e) {\n\t\t\tthrow new XPathParseException(e);\n\t\t}\n\t}\n", "public void addExtension(String ext){\nsynchronized (exts) {\n    ext=ext.toLowerCase();\n    exts.add(ext);\n  }\n}\n", "\tpublic boolean isModifiedDepth() {\n\t\treturn modifiedDepth;\n\t}\n", "public SubRoutineStatement subroutine() {\n\tif (this.associatedNode instanceof SubRoutineStatement) {\n\t\t// exception handler context may be child of InsideSubRoutineFlowContext, which maps to same handler\n\t\tif (this.parent.subroutine() == this.associatedNode)\n\t\t\treturn null;\n\t\treturn (SubRoutineStatement) this.associatedNode;\n\t}\n\treturn null;\n}\n", "    public void doGetProperty(SVNURL url, String propName, SVNRevision pegRevision, SVNRevision revision, boolean recursive, ISVNPropertyHandler handler) throws SVNException {\n        if (propName != null && propName.startsWith(SVNProperty.SVN_WC_PREFIX)) {\n            SVNErrorMessage err = SVNErrorMessage.create(SVNErrorCode.CLIENT_PROPERTY_NAME, \"''{0}'' is a wcprop , thus not accessible to clients\", propName);\n            SVNErrorManager.error(err);\n        }\n        if (revision == null || !revision.isValid()) {\n            revision = SVNRevision.HEAD;\n        }\n        SVNRepository repos = createRepository(url, null, pegRevision, revision);\n        doGetRemoteProperty(url, \"\", repos, propName, revision, recursive, handler);\n    }\n", "@Override public void addColumn(Column... cols){\n  for (  Column c : cols) {\n    validateColumn(c);\n    columnList.add(c);\n  }\n}\n", "public Expression isEmpty ( Value target ) { throw new RuntimeException ( STR_ ) ; }", "@Bind(aggregate = true)\n    public void bindFactory(Factory factory) {\n\n        // Only support primitive component\n        if (!(factory instanceof ComponentFactory)) {\n            return;\n        }\n\n        String cn = factory.getClassName();\n        if (cn == null) {\n            return;\n        }\n\n        // Has the factory the annotation\n        try {\n            Class clazz = ((ComponentFactory) factory).loadClass(cn);\n            InstantiatedBy annotation = (InstantiatedBy) clazz.getAnnotation(InstantiatedBy.class);\n\n            if (annotation != null) {\n                // Match !\n                LOGGER.info(\"Factory annotated with `@InstantiatedBy` found : {}, configuration : {}\",\n                        factory.getName(),\n                        annotation.value());\n\n                addInstanceDeclaration(factory, annotation.value());\n            }\n        } catch (ClassNotFoundException e) {\n            LOGGER.error(\"Cannot load the component class {}\", cn, e);\n        }\n    }", "public float[] getEstimates() throws InsufficientSamplesException {\n        if(!isInitializing) {\n            for (int i = 1; i <= m; i++) {\n                e[i-1] = q[2*i+1];\n            }\n            return e;\n        } else {\n            throw new Insu", "protected Map < String , Object > filterItemValue ( String entityName , Map < String , Object > itemValues ) { ClassMetadata classMetadata = getSessionFactory ( ) . getClassMetadata ( entityName ) ; String [ ] propertyNames = classMetadata . getPropertyNa", "private void validate7ZipSettings()\n\t{\n\t\tboolean flag = controller.is7ZipEnabled();\n\n\t\tsevenZipEnableBox.setSelected(flag);\n\t\tsevenZipLabel.setEnabled(flag);\n\t\tsevenZipPathField.setEnabled(flag);\n\t\tsevenZipSearchButton.setEnabled(flag);\n\t}", "    public void setConnectionRouter(ConnectionRouter cr) {\n        if (cr == null)\n            cr = ConnectionRouter.NULL;\n        if (connectionRouter != cr) {\n            connectionRouter.remove(this);\n            Object old = connectionRouter;\n            connectionRouter = cr;\n            firePropertyChange(Connection.PROPERTY_CONNECTION_ROUTER, old, cr);\n            revalidate();\n        }\n    }\n", "public void submit(CmsUser user, CmsObject cms, Runnable afterWrite) {\n\n        submit(user, cms, afterWrite, false);\n    }", "    public boolean isCreateMethod(Method m) {\n        return m.getName().startsWith(CREATE_METHOD);\n    }\n", "protected boolean flow(DiGraphNode<N, Branch> node) {\n    FlowState<L> state = node.getAnnotation();\n    if (isForward()) {\n      L outBefore = state.out;\n      state.out = flowThrough(node.getValue(), state.in);\n      return !outBefore.equals(state.out);\n    } else {\n      L inBefore = state.in;\n      state.in = flowThrough(node.getValue(), state.out);\n      return !inBefore.equals(state.in);\n    }\n  }", "\tprotected PhaseMatrix getTransferMatrix( final TransferMapTrajectory trajectory, final AcceleratorNode fromNode, final AcceleratorNode toNode ) {\n\t\tfinal PhaseMatrix fromMatrix = ((TransferMapState)trajectory.stateForElement( fromNode.getId() )).getTransferMap().getFirstOrder();\n\t\tfinal PhaseMatrix toMatrix = ((TransferMapState)trajectory.stateForElement( toNode.getId() )).getTransferMap().getFirstOrder();\n\t\treturn getTransferMatrix( fromMatrix, toMatrix );\n\t}\n", "public static synchronized void logStart(){\n  IProduct product=Platform.getProduct();\n  String aboutText=product.getProperty(\"aboutText\");\n  String application=\"verinice\";\n  if (aboutText != null) {\n    String lines[]=aboutText.split(\"\\\\r?\\\\n\");\n    if (lines != null && lines.length > 0) {\n      application=lines[0];\n    }\n  }\n  LOG.info(\"Starting \" + application + \", \"+ DF.format(System.currentTimeMillis()));\n}\n", "public boolean isUnique ( ) { switch ( this . type ) { case IllegalType : case NonUnique : return BOOL_ ; case Primary : case Unique : return BOOL_ ; default : return BOOL_ ; } }", "Date scheduleJob ( String jobName , String jobGroup , String triggerName , String triggerGroup ) throws Exception ;", "public static String separatorsToSystem ( String path ) { if ( path == null ) { return null ; } if ( isSystemWindows ( ) ) { return separatorsToWindows ( path ) ; } else { return separatorsToUnix ( path ) ; } }", "  public void setSpaceU(Rectangle2D.Double rectU) {\n    checkRectU(rectU);\n    if (null == this.rectU) {\n      this.rectU = new Rectangle2D.Double();\n    }\n    Transformer.copyRectU(rectU, this.rectU);\n  }\n", "    protected void tearDown() throws Exception {\n        super.tearDown();\n        impTest = null;\n        impBaseline = null;\n    }\n", "public boolean matches(String seq){\n  return queue.regionMatches(true,pos,seq,0,seq.length());\n}\n", "void addMembers ( String ... members ) throws RestApiException ;", "public static byte[] readFile(File file){\n  RandomAccessFile ra=null;\n  try {\n    ra=new RandomAccessFile(file,\"r\");\n    long len=ra.length();\n    if (len >= Integer.MAX_VALUE) {\n      throw new RuntimeException(\"File \" + file.getPath() + \" is too large\");\n    }\n    byte[] buffer=new byte[(int)len];\n    ra.readFully(buffer);\n    ra.close();\n    return buffer;\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Error reading from file \" + file,e);\n  }\n finally {\n    if (ra != null) {\n      try {\n        ra.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\n}\n", "public static String extractAddressFromUrl(String url){\n  String urlToProcess=null;\n  int protocolEndIndex=url.indexOf(\"://\");\n  if (protocolEndIndex > 0) {\n    urlToProcess=url.substring(protocolEndIndex + 3);\n  }\n else {\n    urlToProcess=url;\n  }\n  int pos=urlToProcess.indexOf(':');\n  if (pos >= 0) {\n    urlToProcess=urlToProcess.substring(0,pos);\n  }\n  pos=urlToProcess.indexOf('/');\n  if (pos >= 0) {\n    urlToProcess=urlToProcess.substring(0,pos);\n  }\n  pos=urlToProcess.indexOf('?');\n  if (pos >= 0) {\n    urlToProcess=urlToProcess.substring(0,pos);\n  }\n  return urlToProcess;\n}\n", "    public int compareTo(Object obj) {\n        int i1 = this.priority;\n        int i2 = ((PageList)obj).getPriority();\n        return (i2 < i1 ? -1 : (i2 == i1 ? 0 : 1));\n    }\n", "static String convertColumnToFieldName(String columnName){\n  String lower=columnName.toLowerCase();\n  if (KEYWORDS.contains(lower)) {\n    lower+=\"Value\";\n  }\n  return lower;\n}\n", "protected Image getTemplateImage(PdfTemplate template) throws BadElementException {\n      if (templateImage == null) {\n         templateImage = Image.getInstance(template);\n         templateImage.setAbsolutePosition(0, 0);\n      }\n      \n      return templateImage;\n   }", "    protected void broadcast(GameAction action) {\n        // Broadcast to all players\n        for (NetworkPlayer player : getPlayers()) {\n            player.getCommunicator().post(action.toString());\n        }\n\n    }\n", "private void fillCookie(ArrayList<WebCookie> cookies,CharSegment rawCookie){\n  char[] buf=rawCookie.buffer();\n  int j=rawCookie.offset();\n  int end=j + rawCookie.length();\n  int version=0;\n  WebCookie cookie=null;\n  while (j < end) {\n    char ch=0;\n    CharBuffer cbName=_cbName;\n    CharBuffer cbValue=_cbValue;\n    cbName.clear();\n    cbValue.clear();\n    for (; j < end && ((ch=buf[j]) == ' ' || ch == ';' || ch == ','); j++) {\n    }\n    if (end <= j)     break;\n    boolean isSpecial=false;\n    if (buf[j] == '$') {\n      isSpecial=true;\n      j++;\n    }\n    for (; j < end; j++) {\n      ch=buf[j];\n      if (ch < 128 && TOKEN[ch])       cbName.append(ch);\n else       break;\n    }\n    for (; j < end && (ch=buf[j]) == ' '; j++) {\n    }\n    if (end <= j)     break;\n else     if (ch == ';' || ch == ',') {\n      try {\n        cookie=new WebCookie(cbName.toString(),\"\");\n        cookie.setVersion(version);\n        _cookies.add(cookie);\n      }\n catch (      Exception e) {\n        log.log(Level.FINE,e.toString(),e);\n      }\n      continue;\n    }\n else     if (ch != '=') {\n      for (; j < end && (ch=buf[j]) != ';'; j++) {\n      }\n      continue;\n    }\n    j++;\n    for (; j < end && (ch=buf[j]) == ' '; j++) {\n    }\n    if (ch == '\"') {\n      for (j++; j < end; j++) {\n        ch=buf[j];\n        if (ch == '\"')         break;\n        cbValue.append(ch);\n      }\n      j++;\n    }\n else {\n      int head=j;\n      int tail=j;\n      for (; j < end; j++) {\n        ch=buf[j];\n        if (ch < 128 && VALUE[ch]) {\n          cbValue.append(ch);\n          tail=j + 1;\n        }\n else         if (ch == ' ') {\n          cbValue.append(ch);\n        }\n else {\n          break;\n        }\n      }\n      cbValue.length(tail - head);\n    }\n    if (!isSpecial) {\n      if (cbName.length() == 0)       log.warning(\"bad cookie: \" + rawCookie);\n else {\n        cookie=new WebCookie(toName(cbName),cbValue.toString());\n        cookie.setVersion(version);\n        _cookies.add(cookie);\n      }\n    }\n else     if (cookie == null) {\n      if (cbName.matchesIgnoreCase(\"Version\"))       version=cbValue.charAt(0) - '0';\n    }\n else     if (cbName.matchesIgnoreCase(\"Version\"))     cookie.setVersion(cbValue.charAt(0) - '0');\n else     if (cbName.matchesIgnoreCase(\"Domain\"))     cookie.setDomain(cbValue.toString());\n else     if (cbName.matchesIgnoreCase(\"Path\"))     cookie.setPath(cbValue.toString());\n  }\n}\n", "public static double xnormi(double p){\n  double arg, t, t2, t3, xnum, xden, qinvp, x, pc;\n  final double c[]={2.515517,.802853,.010328};\n  final double d[]={1.432788,.189269,.001308};\n  if (p <= .5) {\n    arg=-2.0 * Math.log(p);\n    t=Math.sqrt(arg);\n    t2=t * t;\n    t3=t2 * t;\n    xnum=c[0] + c[1] * t + c[2] * t2;\n    xden=1.0 + d[0] * t + d[1] * t2 + d[2] * t3;\n    qinvp=t - xnum / xden;\n    x=-qinvp;\n    return x;\n  }\n else {\n    pc=1.0 - p;\n    arg=-2.0 * Math.log(pc);\n    t=Math.sqrt(arg);\n    t2=t * t;\n    t3=t2 * t;\n    xnum=c[0] + c[1] * t + c[2] * t2;\n    xden=1.0 + d[0] * t + d[1] * t2 + d[2] * t3;\n    x=t - xnum / xden;\n    return x;\n  }\n}\n", "boolean descendsFrom(ClassFile cf){\n  return descendsFrom(cf.toString());\n}\n", "public Rectangle shift(Rectangle screenBounds, Rectangle diagramBounds) {\n        int screenMaxX = screenBounds.x + screenBounds.width;\n        int screenMaxY = screenBounds.y + screenBounds.height;\n        int diagramMaxX = diagramBounds.x + diagramBounds.width;\n        int diagramMaxY = diagramBounds.y + diagramBounds.height;\n\n        int leftOverlap = screenBounds.x - diagramBounds.x;\n        int rightOverlap = diagramMaxX - screenMaxX;\n        int topOverlap = screenBounds.y - diagramBounds.y;\n        int bottomOverlap = diagramMaxY - screenMaxY;\n\n        int dx = 0;\n        int dy = 0;\n        int width = screenBounds.width;\n        int height = screenBounds.height;\n\n        if (leftOverlap > 0) {\n            dx = leftOverlap;\n        }\n\n        if (rightOverlap > 0) {\n            width += rightOverlap;\n        }\n\n        if (topOverlap > 0) {\n            dy = topOverlap;\n        }\n\n        if (bottomOverlap > 0) {\n            height += bottomOverlap;\n        }\n\n        if (dx != 0 || dy != 0) {\n            this.shiftDrawCenter(dx, dy);\n        }\n\n        return new Rectangle(dx, dy, width, height);\n    }", "public BoxFile.Info restoreFile(String fileID, String newName, String newParentID) {\n        JsonObject requestJSON = new JsonObject();\n\n        if (newName != null) {\n            requestJSON.add(\"name\", newName);\n        }\n\n        if (newParentID != null) {\n            JsonObject parent = new JsonObject();\n            parent.add(\"id\", newParentID);\n            requestJSON.add(\"parent\", parent);\n        }\n\n        URL url = RESTORE_FILE_URL_TEMPLATE.build(this.api.getBaseURL(), fileID);\n        BoxJSONRequest request = new BoxJSONRequest(this.api, url, \"POST\");\n        request.setBody(requestJSON.toString());\n        BoxJSONResponse response = (BoxJSONResponse) request.send();\n        JsonObject responseJSON = JsonObject.readFrom(response.getJSON());\n\n        BoxFile restoredFile = new BoxFile(this.api, responseJSON.get(\"id\").asString());\n        return restoredFile.new Info(responseJSON);\n    }", "public void addFirst(PropertySource<?> propertySource) {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Adding PropertySource '\" + propertySource.getName() + \"' with highest search precedence\");\n        }\n        removeIfPresent(propertySource);\n        this.propertySourceList.add(0, propertySource);\n    }", "private void log ( String message , String level , String levelColor , PrintStream ps ) { StringBuilder builder = new StringBuilder ( ) ; if ( ! level . equals ( STR_ ) ) builder . append ( getPrefix ( level , levelColor ) ) ; builder . append ( message ) ; String ts = builder . toString ( ) ; ps . println ( ts ) ; for ( LogHandler hand : handlers ) hand . onLog ( level , message , ts , this ) ; }", "    public void dumpValue(StringBuffer buffer, String prefix) {\n        buffer.append(prefix).append(\"Reason Code: [ \");\n        switch (code) {\n            case UNSPECIFIED:\n                buffer.append(\"unspecified\");\n                break;\n            case KEY_COMPROMISE:\n                buffer.append(\"keyCompromise\");\n                break;\n            case CA_COMPROMISE:\n                buffer.append(\"cACompromise\");\n                break;\n            case AFFILIATION_CHANGED:\n                buffer.append(\"affiliationChanged\");\n                break;\n            case SUPERSEDED:\n                buffer.append(\"superseded\");\n                break;\n            case CESSATION_OF_OPERATION:\n                buffer.append(\"cessationOfOperation\");\n                break;\n            case CERTIFICATE_HOLD:\n                buffer.append(\"certificateHold\");\n                break;\n            case REMOVE_FROM_CRL:\n                buffer.append(\"removeFromCRL\");\n                break;\n            case PRIVILEGE_WITHDRAWN:\n                buffer.append(\"privilegeWithdrawn\");\n                break;\n            case AA_COMPROMISE:\n                buffer.append(\"aACompromise\");\n                break;\n        }\n        buffer.append(\" ]\\n\");\n    }\n", "public boolean isExternalSkin ( ) { return ! isDefaultSkin && mResources != null ; }", "public void marshall(MetricQuery metricQuery, ProtocolMarshaller protocolMarshaller) {\n\n        if (metricQuery == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(metricQuery.getMetric(), METRIC_BINDING);\n            protocolMarshaller.marshall(metricQuery.getGroupBy(), GROUPBY_BINDING);\n            protocolMarshaller.marshall(metricQuery.getFilter(), FILTER_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "    protected void returnException(Exception e, QueryData qData) {\n    \tif (!qData.isAnswered()) {\n    \t\tqData.setAnswered(true);\n            // Stop the timer!\n            cancelTimer(qData);\n//          System.out.println(\"Exception for \" +qData.getQuery().getHeader().getID());\n            returnException(qData.getListener(), qData.getResponseQueue(), e, qData.getId());\n    \t}\n    }\n", "public ThumbnailParameterBuilder scale(double widthScalingFactor,double heightScalingFactor){\n  if (widthScalingFactor <= 0.0 || heightScalingFactor <= 0.0) {\n    throw new IllegalArgumentException(\"Scaling factor is less than or equal to 0.\");\n  }\n else   if (Double.isNaN(widthScalingFactor) || Double.isInfinite(widthScalingFactor)) {\n    throw new IllegalArgumentException(\"Scaling factor must be a rational number.\");\n  }\n else   if (Double.isNaN(heightScalingFactor) || Double.isInfinite(heightScalingFactor)) {\n    throw new IllegalArgumentException(\"Scaling factor must be a rational number.\");\n  }\n  this.widthScalingFactor=widthScalingFactor;\n  this.heightScalingFactor=heightScalingFactor;\n  return this;\n}\n", "public final void notifyHeaderItemRangeChanged ( int positionStart , int itemCount ) { if ( positionStart < NUM_ || itemCount < NUM_ || positionStart + itemCount >= headerItemCount ) { throw new IndexOutOfBoundsException ( STR_ + positionStart + STR_ + ( positionStart + itemCount - NUM_ ) + STR_ + ( headerItemCount - NUM_ ) + STR_ ) ; } notifyItemRangeChanged ( positionStart , itemCount ) ; }", "public void onBeforeDownload ( CefBrowser browser , CefDownloadItem downloadItem , String suggestedName , CefBeforeDownloadCallback callback ) ;", "public void close() {\n    reactor.stopAsync();\n    if (runner != null) {\n      runner.stopAsync();\n    }\n    metrics.supervisorClosed();\n    monitor.close();\n  }", "public String getDelegateName()\n    {\n        javax.swing.text.Element data = getElement();\n        if (data instanceof DelegateElement) { return ((DelegateElement) data)\n                .getDelegateName(); }\n        return null;\n    }", "private void waitForAll(CountDownLatch latch){\n  try {\n    latch.await();\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n  }\n}\n", "public void pause ( boolean pause ) { mAnimator . pause ( pause ) ; }", "private void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject ( ) ; ConstrainableProxyUtil . verifyConsistentConstraints ( constraints , server , methodMappings ) ; }", "public void marshall(StopBulkDeploymentRequest stopBulkDeploymentRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (stopBulkDeploymentRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(stopBulkDeploymentRequest.getBulkDeploymentId(), BULKDEPLOYMENTID_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void testLocalsAverageCorrectly ( ) throws Exception { TransferEntropyCalculatorMultiVariateKernel teCalc = new TransferEntropyCalculatorMultiVariateKernel ( ) ; String kernelWidth = STR_ ; teCalc . setProperty ( TransferEntropyCalculatorMultiVaria", "\tpublic StringBuffer portrayOtherEventProperties(MachineMonitorEvent event, String[] props) {\n\t\tStringBuffer img = new StringBuffer();\n\t\tfor (int i = 0; i < props.length; i++)\n\t\t\tif( !SipMessageEvent.SIP_MESSAGE_CONTENTS.equals(props[i]) )\n\t\t\t\timg.append(props[i]).append(\": \").append(event.properties.getProperty(props[i])).append(LINESEP);\n\t\t\n\t\tif( EChartsSipServlet.logFullSipMessages ) {\n\t\t\tString sipMessageContents = event.properties.getProperty(SipMessageEvent.SIP_MESSAGE_CONTENTS);\n\t\t\tif( sipMessageContents != null && sipMessageContents.length() > 0 )\n\t\t\t\timg.append(LINESEP).append(\"Equivalent SIP message:\").append(LINESEP).append(sipMessageContents);\n\t\t}\n\t\t\n\t\treturn img;\n\t}\n", "public synchronized TypeMember appendMember ( final BaseType containingType , final BaseType memberType , final String memberName ) throws CouldntSaveDataException { Preconditions . checkNotNull ( containingType , STR_ ) ; Preconditions . checkNotNull ( m", "    public void scapeRemoved(ScapeEvent scapeEvent) {\n        if (this.scape == null) {\n            throw new RuntimeException(\"Tried to remove a scape from a delegate with no scape.\");\n        }\n        if (scapeEvent == null) {\n            throw new RuntimeException(\"Tried to remove a null scape.\");\n        }\n        listeningToScape = false;\n    }\n", "protected String getConsumerDestName() throws JMSException {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.entry(this, tc, \"getConsumerDestName\");\n\n        String cDestName = getDestName();\n\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.exit(this, tc, \"getConsumerDestName\", cDestName);\n        return cDestName;\n    }", "private void doWarmStartIfNotNull(Object warmSolution) throws FailedToFitException\n    {\n        if(warmSolution != null )\n        {\n            if(warmSolution instanceof SimpleWeightVectorModel)\n            {\n                SimpleWeightVectorModel warm = (SimpleWeightVectorModel) warmSolution;\n                if(warm.numWeightsVecs() != ws.length)\n                    throw new FailedToFitException(\"Warm solution has \" + warm.numWeightsVecs() + \" weight vectors instead of \" + ws.length);\n                for(int i = 0; i < ws.length; i++)\n                {\n                    warm.getRawWeight(i).copyTo(ws[i]);\n                    if(useBiasTerm)\n                        bs[i] = warm.getBias(i);\n                }\n            }\n            else\n                throw new FailedToFitException(\"Can not warm warm from \" + warmSolution.getClass().getCanonicalName());\n        }\n    }", "void onRemoteIceCandidate ( final IceCandidate candidate ) ;", "public static <E> void spElement(E[] buffer, long offset, E e) {\n    UNSAFE.putObject(buffer, offset, e);\n  }", "public static Vector2 abs ( Vector2 o ) { return new Vector2 ( Math . abs ( o . x ) , Math . abs ( o . z ) ) ; }", "private static void readJson ( ) throws IOException { String str = STR_ ; InputStream in = new ByteArrayInputStream ( str . getBytes ( Charset . forName ( STR_ ) ) ) ; JsonReader reader = new JsonReader ( new InputStreamReader ( in , STR_ ) ) ; while ( reader . hasNext ( ) ) { JsonToken jsonToken = reader . peek ( ) ; if ( jsonToken == JsonToken . BEGIN_OBJECT ) { reader . beginObject ( ) ; } else if ( jsonToken == JsonToken . END_OBJECT ) { reader . endObject ( ) ; } if ( jsonToken == JsonToken . STRING ) { System . out . print ( reader . nextString ( ) + STR_ ) ; } else { reader . skipValue ( ) ; } } reader . close ( ) ; }", "\tpublic void writeFillBox(double x1, double y1, double width, double height, Colour c) throws IOException {\n\t\tif (closed) {\n\t\t\tthrow new WriterClosedException();\n\t\t}\n\n\t\tcurrentPage.writeFillBox(xtransform.transform(x1), ytransform.transform(y1), xtransform.transform(x1 + width), ytransform.transform(y1 + height), c);\n\t}\n", "public abstract int size ( ) ;", "public void generateSummaryTable(JspWriter out,\n                                   JobTracker tracker) throws IOException {\n    ClusterStatus status = tracker.getClusterStatus();\n    int maxMapTasks = status.getMaxMapTasks();\n    int maxReduceTasks = status.getMaxReduceTasks();\n    int numTaskTrackers = status.getTaskTrackers();\n    String tasksPerNodeStr;\n    if (numTaskTrackers > 0) {\n      double tasksPerNodePct = (double) (maxMapTasks + maxReduceTasks) / (double) numTaskTrackers;\n      tasksPerNodeStr = percentFormat.format(tasksPerNodePct);\n    } else {\n      tasksPerNodeStr = \"-\";\n    }\n    out.print(\"<maps>\" + status.getMapTasks() + \"</maps>\\n\" +\n            \"<reduces>\" + status.getReduceTasks() + \"</reduces>\\n\" +\n            \"<total_submissions>\" + tracker.getTotalSubmissions() + \"</total_submissions>\\n\" +\n            \"<nodes>\" + status.getTaskTrackers() + \"</nodes>\\n\" +\n            \"<map_task_capacity>\" + status.getMaxMapTasks() + \"</map_task_capacity>\\n\" +\n            \"<reduce_task_capacity>\" + status.getMaxReduceTasks() + \"</reduce_task_capacity>\\n\" +\n            \"<avg_tasks_per_node>\" + tasksPerNodeStr + \"</avg_tasks_per_node>\\n\");\n  }", "public void initialise ( ) { average = NUM_ ; max = NUM_ ; min = NUM_ ; observations = NUM_ ; MatrixUtils . fill ( jointCount , NUM_ ) ; MatrixUtils . fill ( prevCount , NUM_ ) ; MatrixUtils . fill ( nextCount , NUM_ ) ; }", "    public void update(GameContainer gc, StateBasedGame sb, int delta) {\n        for (int i = 0; i < activeComponents.size(); i++) {\n            activeComponents.get(i).update(gc, sb, delta);\n        }\n    }\n", "public static void preinit ( ProfilerSection profiler ) { log = new Logger ( STR_ , Logger . ATTR_DEFAULT ) ; if ( search ) loadDevEnvironment ( profiler ) ; isCorePhase = BOOL_ ; loadCandidates ( profiler . section ( STR_ ) ) ; parseCoreEntries ( profile", "public void addComponentListener(final ComponentUpdateListener listener){\n  componentListeners.add(listener);\n}\n", "\tpublic void setCatType (short catType) {\n\t\tthis.catType = catType;\n\t}\n", "public static String getTimeToCrackFormatted(final Result result, final String guess_type)\n    {\n        ResourceBundle mainResource = result.getConfiguration().getMainResource();\n        BigDecimal seconds = getTimeToCrack(result, guess_type);\n        BigDecimal minutes = new BigDecimal(60);\n        BigDecimal hours = minutes.multiply(new BigDecimal(60));\n        BigDecimal days = hours.multiply(new BigDecimal(24));\n        BigDecimal months = days.multiply(new BigDecimal(30));\n        BigDecimal years = months.multiply(new BigDecimal(12));\n        BigDecimal centuries = years.multiply(new BigDecimal(100));\n        BigDecimal infinite = centuries.multiply(new BigDecimal(100000));\n\n        if (seconds.divide(infinite, 0, BigDecimal.ROUND_FLOOR).compareTo(BigDecimal.ONE) >= 0)\n        {\n            return mainResource.getString(\"main.estimate.greaterCenturies\");\n        }\n        else if (seconds.divide(centuries, 0, BigDecimal.ROUND_FLOOR).compareTo(BigDecimal.ONE) >= 0)\n        {\n            return seconds.divide(centuries, 0, BigDecimal.ROUND_FLOOR) + \" \" + mainResource.getString(\"main.estimate.centuries\");\n        }\n        else if (seconds.divide(years, 0, BigDecimal.ROUND_FLOOR).compareTo(BigDecimal.ONE) >= 0)\n        {\n            return seconds.divide(years, 0, BigDecimal.ROUND_FLOOR) + \" \" + mainResource.getString(\"main.estimate.years\");\n        }\n        else if (seconds.divide(months, 0, BigDecimal.ROUND_FLOOR).compareTo(BigDecimal.ONE) >= 0)\n        {\n            return seconds.divide(months, 0, BigDecimal.ROUND_FLOOR) + \" \" + mainResource.getString(\"main.estimate.months\");\n        }\n        else if (seconds.divide(days, 0, BigDecimal.ROUND_FLOOR).compareTo(BigDecimal.ONE) >= 0)\n        {\n            return seconds.divide(days, 0, BigDecimal.ROUND_FLOOR) + \" \" + mainResource.getString(\"main.estimate.days\");\n        }\n        else if (seconds.divide(hours, 0, BigDecimal.ROUND_FLOOR).compareTo(BigDecimal.ONE) >= 0)\n        {\n            return seconds.divide(hours, 0, BigDecimal.ROUND_FLOOR) + \" \" + mainResource.getString(\"main.estimate.hours\");\n        }\n        else if (seconds.divide(minutes, 0, BigDecimal.ROUND_FLOOR).compareTo(BigDecimal.ONE) >= 0)\n        {\n            return seconds.divide(minutes, 0, BigDecimal.ROUND_FLOOR) + \" \" + mainResource.getString(\"main.estimate.minutes\");\n        }\n        else if (seconds.compareTo(BigDecimal.ONE) >= 0)\n        {\n            return seconds + \" \" + mainResource.getString(\"main.estimate.seconds\");\n        }\n        else\n        {\n            return mainResource.getString(\"main.estimate.instant\");\n        }\n    }", "    public String getExportSource() {\n    Vector nodes=new Vector();\n    Node n1=document.getFirstChild();\n\n    if (n1.getNodeType()==Node.DOCUMENT_TYPE_NODE) {\n        n1=n1.getNextSibling();\n    }\n    while (n1!=null) {\n        NamedNodeMap nm=n1.getAttributes();\n        if (nm!=null) {\n            Node n2=nm.getNamedItem(\"exportsource\");\n            return(n2.getNodeValue());\n        }\n    }\n    return(null);\n    }\n", "  protected int secondChoiceHeuristic(int i2) {\n    // randomly select an index i1 (not equal to i2) with non?zero and non?C alpha, if any\n    for (int i = 0; i < 59; i++) {\n      int i1 = m_random.nextInt(m_nInstances);\n      if ((i1 != i2) && (m_alpha[i1] > 0 && m_alpha[i1] < m_C) || (m_alphaStar[i1] > 0 && m_alphaStar[i1] < m_C)) {\n\treturn i1;\n      }\n    }\n    return -1;\n  }\n", "public Matrix4f rotationX(float ang) {\n        float sin, cos;\n        sin = (float) Math.sin(ang);\n        cos = (float) Math.cosFromSin(sin, ang);\n        if ((properties & PROPERTY_IDENTITY) == 0)\n            MemUtil.INSTANCE.identity(this);\n        this._m11(cos);\n        this._m12(sin);\n        this._m21(-sin);\n        this._m22(cos);\n        _properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);\n        return this;\n    }", "public static TLVElement create(int type, byte[] value) throws TLVParserException {\n        TLVElement element = create(type);\n        element.setContent(value);\n        return element;\n    }", "public void sendAudio(final String url,final String accessToken,@NotNull DataRequestBody requestBody,final AsyncCallback<AvsResponse,Exception> callback) throws IOException {\n  this.requestBody=requestBody;\n  if (callback != null) {\n    callback.start();\n  }\n  Log.i(TAG,\"Starting SpeechSendAudio procedure\");\n  start=System.currentTimeMillis();\n  try {\n    prepareConnection(url,accessToken);\n    final AvsResponse response=completePost();\n    if (response != null && response.isEmpty()) {\n      if (callback != null) {\n        callback.failure(new AvsAudioException(\"Nothing came back\"));\n      }\n      return;\n    }\n    if (callback != null) {\n      if (response != null) {\n        callback.success(response);\n      }\n      callback.complete();\n    }\n    Log.i(TAG,\"Audio sent\");\n    Log.i(TAG,\"Audio sending process took: \" + (System.currentTimeMillis() - start));\n  }\n catch (  IOException|AvsException e) {\n    onError(callback,e);\n  }\n}\n", "public <T, K> List<T> getAll(ColumnFamily<K, String> columnFamily,\n            Class<T> itemClass) throws Exception {\n        Mapping<T> mapping = getMapping(itemClass);\n        Rows<K, String> result = keyspace.prepareQuery(columnFamily)\n                .getAllRows().execute().getResult();\n        return mapping.getAll(result);\n    }", "public static String jsonNameVal(final String indent, \n                                   final String name, \n                                   final String val) {\n    StringBuilder sb = new StringBuilder();\n\n    sb.append(indent);\n    sb.append(\"\\\"\");\n    sb.append(name);\n    sb.append(\"\\\": \");\n\n    if (val != null) {\n      sb.append(jsonEncode(val));\n    }\n\n    return sb.toString();\n  }", "public void add(E item){\n  q.add(item);\n}\n", "public void delete(String name) throws IOException {\n        if (name.equalsIgnoreCase(POLICIES)) {\n            certPolicies = null;\n        } else {\n          throw new IOException(\"Attribute name [\" + name +\n                                \"] not recognized by \" +\n                                \"CertAttrSet:CertificatePoliciesExtension.\");\n        }\n        encodeThis();\n    }", "public void hrule(double value,Paint color,String legend,BasicStroke stroke){\n  LegendText legendText=new LegendText(color,legend);\n  comments.add(legendText);\n  plotElements.add(new HRule(value,color,legendText,stroke));\n}\n", "public DimensionedScalar ( String fieldValue ) throws IllegalArgumentException { super ( STR_ , STR_ ) ; Matcher matcher = PATTERN . matcher ( fieldValue ) ; if ( matcher . find ( ) ) { String name = matcher . group ( NUM_ ) ; String dimensions = matcher . group ( NUM_ ) ; String value = matcher . group ( NUM_ ) ; setName ( name ) ; setValue ( value ) ; this . dimensions = new Dimensions ( dimensions ) ; } else { throw new DictionaryException ( STR_ + fieldValue + STR_ ) ; } }", "public final <T> void addOption(String name, String description, String exclusiveGroup, T defValue)\r\n    {\r\n        Option opt = new Option(name, description, exclusiveGroup, defValue);\r\n        Option old = map.put(name, opt);\r\n        if (old != null)\r\n        {\r\n            throw new IllegalArgumentException(name+\" was already added\");\r\n        }\r\n        if (exclusiveGroup != null)\r\n        {\r\n            groups.add(exclusiveGroup, opt);\r\n        }\r\n    }", "@Override public void run(){\n  mExecutor.execute(mListener);\n}\n", "public void setIncrement (int value) {\n\tcheckWidget ();\n\tif (value < 1) return;\n\tGtkAdjustment adjustment = new GtkAdjustment ();\n\tOS.memmove (adjustment, adjustmentHandle);\n\tadjustment.step_increment = (float) value;\n\tOS.memmove (adjustmentHandle, adjustment);\n\tOS.g_signal_handlers_block_matched (adjustmentHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, VALUE_CHANGED);\n\tOS.gtk_adjustment_changed (adjustmentHandle);\n\tOS.g_signal_handlers_unblock_matched (adjustmentHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, VALUE_CHANGED);\n}\n", "void addedDatabase ( IDatabaseManager databaseManager , IDatabase database ) ;", "@Override\n  public IdType setValue(String theValue) {\n    // TODO: add validation\n    super.setValue(theValue);\n    myHaveComponentParts = false;\n\n    if (StringUtils.isBlank(theValue)) {\n      myBaseUrl = null;\n      super.setValue(null);\n      myUnqualifiedId = null;\n      myUnqualifiedVersionId = null;\n      myResourceType = null;\n    } else if (theValue.charAt(0) == '#' && theValue.length() > 1) {\n      super.setValue(theValue);\n      myBaseUrl = null;\n      myUnqualifiedId = theValue;\n      myUnqualifiedVersionId = null;\n      myResourceType = null;\n      myHaveComponentParts = true;\n    } else if (theValue.startsWith(URN_PREFIX)) {\n      myBaseUrl = null;\n      myUnqualifiedId = theValue;\n      myUnqualifiedVersionId = null;\n      myResourceType = null;\n      myHaveComponentParts = true;\n    } else {\n      int vidIndex = theValue.indexOf(\"/_history/\");\n      int idIndex;\n      if (vidIndex != -1) {\n        myUnqualifiedVersionId = theValue.substring(vidIndex + \"/_history/\".length());\n        idIndex = theValue.lastIndexOf('/', vidIndex - 1);\n        myUnqualifiedId = theValue.substring(idIndex + 1, vidIndex);\n      } else {\n        idIndex = theValue.lastIndexOf('/');\n        myUnqualifiedId = theValue.substring(idIndex + 1);\n        myUnqualifiedVersionId = null;\n      }\n\n      myBaseUrl = null;\n      if (idIndex <= 0) {\n        myResourceType = null;\n      } else {\n        int typeIndex = theValue.lastIndexOf('/', idIndex - 1);\n        if (typeIndex == -1) {\n          myResourceType = theValue.substring(0, idIndex);\n        } else {\n          if (typeIndex > 0 && '/' == theValue.charAt(typeIndex - 1)) {\n            typeIndex = theValue.indexOf('/', typeIndex + 1);\n          }\n          if (typeIndex >= idIndex) {\n            // e.g. http://example.org/foo\n            // 'foo' was the id but we're making that the resource type. Nullify the id part because we don't have an id.\n            // Also set null value to the super.setValue() and enable myHaveComponentParts so it forces getValue() to properly\n            // recreate the url\n            myResourceType = myUnqualifiedId;\n            myUnqualifiedId = null;\n            super.setValue(null);\n            myHaveComponentParts = true;\n          } else {\n            myResourceType = theValue.substring(typeIndex + 1, idIndex);\n          }\n\n          if (typeIndex > 4) {\n            myBaseUrl = theValue.substring(0, typeIndex);\n          }\n\n        }\n      }\n\n    }\n    return this;\n  }", "public final void mNOT() throws RecognitionException {\n        try {\n            int _type = NOT;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // C:\\\\Project\\\\Obdalib\\\\obdalib-parent\\\\obdalib-core\\\\src\\\\main\\\\java\\\\it\\\\unibz\\\\inf\\\\obda\\\\gui\\\\swing\\\\utils\\\\MappingFilter.g:112:4: ( ( 'N' | 'n' ) ( 'O' | 'o' ) ( 'T' | 't' ) )\n            // C:\\\\Project\\\\Obdalib\\\\obdalib-parent\\\\obdalib-core\\\\src\\\\main\\\\java\\\\it\\\\unibz\\\\inf\\\\obda\\\\gui\\\\swing\\\\utils\\\\MappingFilter.g:112:6: ( 'N' | 'n' ) ( 'O' | 'o' ) ( 'T' | 't' )\n            {\n            if ( input.LA(1)=='N'||input.LA(1)=='n' ) {\n                input.consume();\n            }\n            else {\n                MismatchedSetException mse = new MismatchedSetException(null,input);\n                recover(mse);\n                throw mse;\n            }\n\n\n            if ( input.LA(1)=='O'||input.LA(1)=='o' ) {\n                input.consume();\n            }\n            else {\n                MismatchedSetException mse = new MismatchedSetException(null,input);\n                recover(mse);\n                throw mse;\n            }\n\n\n            if ( input.LA(1)=='T'||input.LA(1)=='t' ) {\n                input.consume();\n            }\n            else {\n                MismatchedSetException mse = new MismatchedSetException(null,input);\n                recover(mse);\n                throw mse;\n            }\n\n\n            }\n\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        \t// do for sure before leaving\n        }\n    }", "    public void setLongValue(long value) throws XMLConfigurationException {\n        if (type == null) {\n            throw new XMLConfigurationException(\n                    \"The type has not been initialized\");\n        } else if (XMLConfigurationType.LONG_VALUE == type.getType()) {\n            longValue = value;\n        } else {\n            throw new XMLConfigurationException(\n                    \"The value is not of type [long].\");\n        }\n    }\n", "@Override\n    public StartReplicationTaskAssessmentResult startReplicationTaskAssessment(StartReplicationTaskAssessmentRequest request) {\n        request = beforeClientExecution(request);\n        return executeStartReplicationTaskAssessment(request);\n    }", "public static void sendSLORequestsToOtherParticipants(String tenant,LogoutState logoutState) throws IOException {\n  log.info(\"Sending SAML logout response to other participants.\");\n  Locale locale=logoutState.getLocale();\n  HttpServletResponse response=logoutState.getResponse();\n  Validate.notNull(response);\n  Collection<String> samlRequestUrls=logoutState.generateRequestUrlsForTenant(tenant,logoutState.getMessageSource(),locale);\n  if (samlRequestUrls == null)   return;\n  for (  String requestUrl : samlRequestUrls) {\n    log.info(\"SAML Redirect URL is \" + requestUrl);\n    if (requestUrl != null) {\n      Throwable exception=null;\n      try {\n        sendSLORequestToOtherParticipant(requestUrl);\n      }\n catch (      URISyntaxException e) {\n        exception=e;\n      }\ncatch (      IOException e) {\n        exception=e;\n      }\ncatch (      KeyManagementException e) {\n        exception=e;\n      }\ncatch (      NoSuchAlgorithmException e) {\n        exception=e;\n      }\ncatch (      KeyStoreException e) {\n        exception=e;\n      }\n      if (exception != null) {\n        log.error(\"exception in sending out single log out request to participent. Request string: \" + requestUrl,exception);\n      }\n    }\n else {\n      SamlServiceImpl.sendLogoutError(locale,response,logoutState,logoutState.getMessageSource());\n    }\n  }\n}\n", "Union1 < First > none ( ) ;", "@Override public final void endElement(final String ns,final String lName,final String qName) throws SAXException {\n  String name=lName == null || lName.length() == 0 ? qName : lName;\n  Rule r=(Rule)RULES.match(match);\n  if (r != null) {\n    r.end(name);\n  }\n  int slash=match.lastIndexOf('/');\n  if (slash >= 0) {\n    match=match.substring(0,slash);\n  }\n else {\n    match=\"\";\n  }\n}\n", "private static int uariminGt(double value,double[] bv,int bvi[],BinaryOperator bOp) throws DMLRuntimeException {\n  int ixMin=1;\n  if (value <= bv[0] || value > bv[bv.length - 1])   return ixMin;\n  int ix=Arrays.binarySearch(bv,value);\n  ix=Math.abs(ix) - 1;\n  ixMin=bvi[ix] + 1;\n  return ixMin;\n}\n", "public JKTimeObject ( ) { }", "void decrement ( ) ;", "  public String getSelectedTeam () {\n    return this.selectedTeam;\n  }\n", "public CMapId cmapId ( int index ) { return CMapId . getInstance ( platformId ( index ) , encodingId ( index ) ) ; }", "    public double cumulativeProbability(double x) {\n        double ret;\n\n        if (x <= 0.0) {\n            ret = 0.0;\n        } else {\n            ret = 1.0 - Math.exp(-x / getMean());\n        }\n\n        return ret;\n    }\n", "public static boolean isDrawableImage(String imagePath){\n  return imagePath.startsWith(\"@drawable/\");\n}\n", "@SuppressWarnings(\"unchecked\")\n  public E get()\n  {\n    Thread thread = Thread.currentThread();\n    ClassLoader loader = thread.getContextClassLoader();\n\n    Object value = null;\n\n    for (; loader != null; loader = loader.getParent()) {\n      if (loader ", "public boolean isLoaded ( ) { return naviView . isLoaded ( ) ; }", "@Override\n    public void createDocuments(String filename, String outputbase, List<RenderedFormat> formats) throws TesseractException {\n        createDocuments(new String[]{filename}, new String[]{outputbase}, formats);\n    }", "    private void checkPortNames(String[] portnames) {\n        for (int i=0; i<portnames.length; i++)\n            if (!Util.isLegalJHDLIdentifier(portnames[i]))\n                throw new BuildException(\"Portname: \" + portnames[i] + \" is not a legal JHDL identifier in Cell: \" + this + \".\");\n        for (int i=0; i<portnames.length-1; i++)\n            for (int j=i+1; j<portnames.length; j++)\n                if (portnames[i].equals(portnames[j]))\n                    throw new BuildException(\"Portname: \" + portnames[i] + \" is not unique in Cell: \" + this + \".\");\n    }\n", "    public void setSampleCount(final int count) {\n        if (count < 1) {\n            throw new IllegalArgumentRangeException(1,\n                    Integer.MAX_VALUE, count);\n        }\n        sampleCount = count;\n    }\n", "public void testRecognizeSymmetricNat_Local_v6_Public_v4 ( ) throws Exception { Response testIResponse1 = MessageFactory . create3489BindingResponse ( mappedClientAddress_v4 , responseServerAddress_v6 , responseServerAddress_v6 ) ; Response testIResponse2", "public void merge(Register r1,Register r2){\n  Iterator<LiveIntervalElement> i=iterateLiveIntervals(r2);\n  while (i.hasNext()) {\n    LiveIntervalElement interval=i.next();\n    interval.setRegister(r1);\n    addToRegisterMap(r1,interval);\n    i.remove();\n  }\n}\n", "public ShapeTileOctagon(PlaPointFloat a_point){\n  PlaPointFloat fp=a_point;\n  int lx=(int)Math.floor(fp.v_x);\n  int ly=(int)Math.floor(fp.v_y);\n  int rx=(int)Math.ceil(fp.v_x);\n  int uy=(int)Math.ceil(fp.v_y);\n  double tmp=fp.v_x - fp.v_y;\n  int ulx=(int)Math.floor(tmp);\n  int lrx=(int)Math.ceil(tmp);\n  tmp=fp.v_x + fp.v_y;\n  int llx=(int)Math.floor(tmp);\n  int urx=(int)Math.ceil(tmp);\n  oct_lx=lx;\n  oct_ly=ly;\n  oct_rx=rx;\n  oct_uy=uy;\n  oct_ulx=ulx;\n  oct_lrx=lrx;\n  oct_llx=llx;\n  oct_urx=urx;\n}\n", "public PdfBitmap ( Bitmap image , int width , int height , int pdfX , int pdfY , int page , Type type ) { this . image = image ; this . height = height ; this . width = width ; this . pdfX = pdfX ; this . pdfY = pdfY ; this . pageNumber = page ; this . type = type ; this . isRemovable = BOOL_ ; this . metadata = new HashMap < > ( ) ; }", "private void deleteInstance ( EntryClass eclass ) { int idx = entryClasses . indexOf ( eclass ) ; eclass = ( EntryClass ) entryClasses . get ( idx ) ; int num = eclass . getNumInstances ( ) - NUM_ ; if ( num == NUM_ ) entryClasses . remove ( idx ) ; eclass . setNumInstances ( num ) ; }", "public CommandManager(Map env) throws CLIException {\n  init(env);\n}\n", "public String putProperty(String key,\n                              String value) {\n        return this.getProperties().put(key,\n                                        value);\n    }", "protected List<Command> decodeInput(Codec codec,String input){\n  return codec.decode(input);\n}\n", "    private void jbInit() throws Exception {\n\n        //setIconImage(Toolkit.getDefaultToolkit().createImage(ClientFrame.class.getResource(\"[Your Icon]\")));\n\n        terminal = new SshTerminalPanel(null);\n\n        // Create the application menu\n        this.setJMenuBar(terminal.createMenu());\n\n        // Set up the frame\n        Container contentPane = getContentPane();\n        contentPane.setLayout(new BorderLayout());\n\n        this.setSize(new Dimension(800, 600));\n        this.setTitle(\"SSHTerm\");\n        this.setResizable(true);\n\n        contentPane.add(terminal, BorderLayout.CENTER);\n    }\n", "void removeBreakpoints ( Set < BreakpointAddress > breakpoints , BreakpointType type ) throws DebugExceptionWrapper ;", "\tpublic String getText(Object object) {\n\t\tString label = ((Textproperty)object).getLanguage();\n\t\treturn label == null || label.length() == 0 ?\n\t\t\tgetString(\"_UI_Textproperty_type\") :\n\t\t\tgetString(\"_UI_Textproperty_type\") + \" \" + label;\n\t}\n", "public void generate_snapshot(){\n  disable_redo();\n  Collection<UndoObjectNode> curr_deleted_objects_list=new LinkedList<UndoObjectNode>();\n  deleted_objects_stack.add(curr_deleted_objects_list);\n  ++stack_level;\n}\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "private ELFlash ( ExternalContext extContext ) { flashInnerMap = new ConcurrentHashMap < > ( ) ; WebConfiguration config = WebConfiguration . getInstance ( extContext ) ; String value ; try { value = config . getOptionValue ( WebContextInitParameter . NumberOfConcurrentFlashUsers ) ; numberOfConcurentFlashUsers = Integer . parseInt ( value ) ; } catch ( NumberFormatException nfe ) { if ( LOGGER . isLoggable ( Level . WARNING ) ) { LOGGER . log ( Level . WARNING , STR_ , numberOfConcurentFlashUsers ) ; } } try { value = config . getOptionValue ( WebContextInitParameter . NumberOfFlashesBetweenFlashReapings ) ; numberOfFlashesBetweenFlashReapings = Long . parseLong ( value ) ; } catch ( NumberFormatException nfe ) { if ( LOGGER . isLoggable ( Level . WARNING ) ) { LOGGER . log ( Level . WARNING , STR_ , numberOfFlashesBetweenFlashReapings ) ; } } distributable = config . isOptionEnabled ( EnableDistributable ) ; guard = new ByteArrayGuardAESCTR ( ) ; }", "private static synchronized Tree getCollocationProcessedTree(Tree tree,\r\n                                                               HeadFinder hf) {\r\n    if (wnc == null) {\r\n      try {\r\n        Class<?> cl = Class.forName(\"edu.stanford.nlp.trees.WordNetInstance\");\r\n        wnc = (WordNetConnection) cl.newInstance();\r\n      } catch (Exception e) {\r\n        System.err.println(\"Couldn't open WordNet Connection.  Aborting collocation detection.\");\r\n        e.printStackTrace();\r\n        wnc = null;\r\n      }\r\n    }\r\n    if (wnc != null) {\r\n      CollocationFinder cf = new CollocationFinder(tree, wnc, hf);\r\n      tree = cf.getMangledTree();\r\n    } else {\r\n      System.err.println(\"ERROR: WordNetConnection unavailable for collocations.\");\r\n    }\r\n    return tree;\r\n  }", "\tprotected void createContents() {\n\t\tsetLayout(new GridLayout(1, true));\n\t\t\n\t\ttreeViewer = new TreeViewer(this, SWT.BORDER);\n\t\ttree = treeViewer.getTree();\n\t\ttree.setLayoutData(new GridData(SWT.FILL, SWT.FILL, false, true, 1, 1));\n\t\t\n\t\ttext = new Text(this, SWT.BORDER);\n\t\ttext.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));\n\t\t\n\t\tautoComplete = new HierarchyDataAutoCompleteField(text);\n//\t\tchar delimiter = getDelimiter();\n//\t\tautoComplete.setDelimiter(delimiter);\n\n\t\t\n\t\ttreeViewer.setContentProvider(createContentProvider());\n\t\ttreeViewer.setLabelProvider(createLabelProvider());\n\t\taddListeners();\n\t}\n", "public static Map<String,Object> performFindList(DispatchContext dctx,Map<String,Object> context){\n  Integer viewSize=(Integer)context.get(\"viewSize\");\n  if (viewSize == null)   viewSize=Integer.valueOf(20);\n  context.put(\"viewSize\",viewSize);\n  Integer viewIndex=(Integer)context.get(\"viewIndex\");\n  if (viewIndex == null)   viewIndex=Integer.valueOf(0);\n  context.put(\"viewIndex\",viewIndex);\n  Map<String,Object> result=performFind(dctx,context);\n  int start=viewIndex.intValue() * viewSize.intValue();\n  List<GenericValue> list=null;\n  Integer listSize=null;\n  try {\n    EntityListIterator it=(EntityListIterator)result.get(\"listIt\");\n    list=it.getPartialList(start + 1,viewSize);\n    listSize=it.getResultsSizeAfterPartialList();\n    it.close();\n  }\n catch (  Exception e) {\n    Debug.logInfo(\"Problem getting partial list\" + e,module);\n  }\n  result.put(\"listSize\",listSize);\n  result.put(\"list\",list);\n  result.remove(\"listIt\");\n  return result;\n}\n", "public void shutdownNow ( ) { pool . shutdownNow ( ) ; }", "public Date getUTCTime() throws IOException {\n        if (buffer.read() != DerValue.tag_UtcTime)\n            throw new IOException(\"DER input, UTCtime tag invalid \");\n        return buffer.getUTCTime(getLength(buffer));\n    }", "public ParseResult parseModule ( IResource parseResource , IProgressMonitor monitor , boolean installMarkers , boolean updateStorage ) { IProject project = parseResource . getProject ( ) ; ToolIO . setUserDir ( ResourceHelper . getParentDirName ( parseRes", "public void setAttributes(Map<String, ?> attributes) {\n        if (attributes == null) {\n            attributes = new HashMap<>();\n        }\n\n        this.attributes.clear();\n        this.attributes.putAll(attributes);\n    }", "private boolean hasOtherQueuedParentNode(Lop tmpNode,ArrayList<Lop> queuedNodes,Lop node){\n  if (queuedNodes.isEmpty())   return false;\n  boolean[] nodeMarked=node.get_reachable();\n  boolean[] tmpMarked=tmpNode.get_reachable();\n  long nodeid=IDMap.get(node.getID());\n  long tmpid=IDMap.get(tmpNode.getID());\n  for (  Lop qnode : queuedNodes) {\n    int id=IDMap.get(qnode.getID());\n    if ((id != nodeid && nodeMarked[id]) && (id != tmpid && tmpMarked[id]))     return true;\n  }\n  return false;\n}\n", "public void addHistoryElement ( Object item ) { if ( this . selectionHistory != null ) this . selectionHistory . accessed ( item ) ; if ( filter == null || ! filter . matchItem ( item ) ) { this . items . remove ( item ) ; this . duplicates . remove ( ite", "private void unclaimTask(ClaimedTask claimedTask, boolean releaseTask) {\n        _claimedTasks.remove(claimedTask.getTaskId());\n        claimedTask.setComplete(true);\n\n        if (releaseTask) {\n            try {\n                _scanWorkflow.releaseScanRangeTask(claimedTask.getTask());\n                _log.info(\"Released scan range task: {}\", claimedTask.getTask());\n            } catch (Exception e) {\n                _log.error(\"Failed to release scan range\", e);\n            }\n        }\n    }", "public static long readLong(final JSONObject jsonObject,final String key,final boolean required,final boolean notNull) throws JSONException {\n  if (required) {\n    return jsonObject.getLong(key);\n  }\n  if (notNull && jsonObject.isNull(key)) {\n    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_OBJECT,key));\n  }\n  long value=0l;\n  if (!jsonObject.isNull(key)) {\n    value=jsonObject.getLong(key);\n  }\n  return value;\n}\n", "private void attemptTtsFailover(String failedEngine){\n  LogUtils.log(SpeechController.class,Log.ERROR,\"Attempting TTS failover from %s\",failedEngine);\n  mTtsFailures++;\n  if ((mInstalledTtsEngines.size() <= 1) || (mTtsFailures < MAX_TTS_FAILURES)) {\n    setTtsEngine(failedEngine,false);\n    return;\n  }\n  if (failedEngine != null) {\n    mInstalledTtsEngines.remove(failedEngine);\n    mInstalledTtsEngines.addLast(failedEngine);\n  }\n  final String nextEngine=mInstalledTtsEngines.getFirst();\n  setTtsEngine(nextEngine,true);\n}\n", "    public void setGlobalCalibration(Calibration global) {\n\t\t//IJ.log(\"setGlobalCalibration (\"+getTitle()+\"): \"+global);\n\t\tif (global==null)\n\t\t\tImagePlus.globalCalibration = null;\n\t\telse\n\t\t\tImagePlus.globalCalibration = global.copy();\n    }\n", "public WikiPage updatePage(Object projectIdOrPath, String slug, String title, String content) throws GitLabApiException {\n\n        GitLabApiForm formData = new GitLabApiForm()\n                .withParam(\"title\", title)\n                .withParam(\"slug\", slug, true)\n                .withParam(\"content\", content);\n\n        Response response = put(Response.Status.OK, formData.asMap(), \"projects\", getProjectIdOrPath(projectIdOrPath), \"wikis\", slug);\n        return (response.readEntity(WikiPage.class));\n    }", "public void initSwfVerification(String swfFilePath) {\r\n        log.info(\"Initializing swf verification for: {}\", swfFilePath);\r\n        byte[] bytes = null;\r\n        if (swfFilePath != null) {\r\n            File localSwfFile = new File(swfFilePath);\r\n            if (localSwfFile.exists() && localSwfFile.canRead()) {\r\n                log.info(\"Swf file path: {}\", localSwfFile.getAbsolutePath());\r\n                bytes = FileUtil.readAsByteArray(localSwfFile);\r\n            } else {\r\n                bytes = \"Red5 is awesome for handling non-accessable swf file\".getBytes();\r\n            }\r\n        } else {\r\n            bytes = new byte[42];\r\n        }\r\n        calculateHMAC_SHA256(bytes, 0, bytes.length, GENUINE_FP_KEY, 30, swfHash, 0);\r\n        swfSize = bytes.length;\r\n        log.info(\"Verification - size: {}, hash: {}\", swfSize, Hex.encodeHexString(swfHash));\r\n    }", "   public boolean hasAuthroities(){\n\t   \n\t   return getProperty(\"webtracks.hostapp.authority\") != null  ? true : false;\n   }\n", "public HttpRequest headers ( final Map < String , String > headers ) { if ( ! headers . isEmpty ( ) ) for ( Entry < String , String > header : headers . entrySet ( ) ) header ( header ) ; return this ; }", "@Bean public Controller controller(){\n  if (useQtInterface) {\n    return new ControllerQtImplementation();\n  }\n else {\n    return new ControllerJavaFXImplementation();\n  }\n}\n", "public CommandImpl(String name,String commandLine,String type){\n  this(name,commandLine,type,Collections.<String,String>emptyMap());\n}", "public boolean loadService ( String name ) throws Exception ;", "  public void message(String strMsg) {\n    JOptionPane.showMessageDialog(null, strMsg);\n  }\n", "private static TopicPartition registerConsumerToSpecificPartition ( KafkaConsumer < String , String > consumer , String topic , int partition ) { TopicPartition topicPartition = new TopicPartition ( topic , partition ) ; List < TopicPartition > partitions = Arrays . asList ( topicPartition ) ; consumer . assign ( partitions ) ; return topicPartition ; }", "public void addDataSetColors(ArrayList<Integer> colors){\n  mDataSetColors.add(colors);\n  mColorCount+=colors.size();\n}\n", "@SuppressWarnings(\"checkstyle:all\")\n\tprotected StringConcatenationClient generateFieldsAndMethods(boolean forInterface, boolean forAppender) {\n\t\tTypeReference scriptInterface = getCodeElementExtractor().getLanguageScriptInterface();\n\t\treturn new StringConcatenationClient() {\n\t\t\t@Override\n\t\t\tprotected void appendTo(TargetStringConcatenation it) {\n\t\t\t\t// Fields\n\t\t\t\tif (!forInterface && !forAppender) {\n\t\t\t\t\tit.append(\"\\tprivate \"); //$NON-NLS-1$\n\t\t\t\t\tit.append(scriptInterface);\n\t\t\t\t\tit.append(\" script;\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\tprivate boolean isFinalized;\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\t\tit.newLine();\n\t\t\t\t} else if (forAppender) {\n\t\t\t\t\tit.append(\"\\tprivate \"); //$NON-NLS-1$\n\t\t\t\t\tit.append(getScriptBuilderInterface());\n\t\t\t\t\tit.append(\" builder;\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\t\tit.newLine();\n\t\t\t\t}\n\t\t\t\tif (forInterface || forAppender) {\n\t\t\t\t\tit.append(\"\\t/** Find the reference to the type with the given name.\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t * @param typeName the fully qualified name of the type\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t * @return the type reference.\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t */\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t\"); //$NON-NLS-1$\n\t\t\t\t\tif (!forInterface) {\n\t\t\t\t\t\tit.append(\"public \"); //$NON-NLS-1$\n\t\t\t\t\t}\n\t\t\t\t\tit.append(JvmParameterizedTypeReference.class);\n\t\t\t\t\tit.append(\" newTypeRef(String typeName)\"); //$NON-NLS-1$\n\t\t\t\t\tif (forInterface) {\n\t\t\t\t\t\tit.append(\";\"); //$NON-NLS-1$\n\t\t\t\t\t} else {\n\t\t\t\t\t\tit.append(\" {\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\treturn this.builder.newTypeRef(typeName);\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t}\"); //$NON-NLS-1$\n\t\t\t\t\t}\n\t\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t/** Find the reference to the type with the given name.\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t * @param context the context for the type reference use\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t * @param typeName the fully qualified name of the type\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t * @return the type reference.\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t */\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t\"); //$NON-NLS-1$\n\t\t\t\t\tif (!forInterface) {\n\t\t\t\t\t\tit.append(\"public \"); //$NON-NLS-1$\n\t\t\t\t\t}\n\t\t\t\t\tit.append(JvmParameterizedTypeReference.class);\n\t\t\t\t\tit.append(\" newTypeRef(\"); //$NON-NLS-1$\n\t\t\t\t\tit.append(Notifier.class);\n\t\t\t\t\tit.append(\" context, String typeName)\"); //$NON-NLS-1$\n\t\t\t\t\tif (forInterface) {\n\t\t\t\t\t\tit.append(\";\"); //$NON-NLS-1$\n\t\t\t\t\t} else {\n\t\t\t\t\t\tit.append(\" {\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\treturn this.builder.newTypeRef(context, typeName);\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t}\"); //$NON-NLS-1$\n\t\t\t\t\t}\n\t\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\t\tit.newLine();\n\t\t\t\t}\n\t\t\t\tif (forInterface) {\n\t\t\t\t\tit.append(\"\\t/** Replies the context for type resolution.\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t * @return the context or <code>null</code> if the Ecore object is the context.\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t */\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t\"); //$NON-NLS-1$\n\t\t\t\t\tit.append(IJvmTypeProvider.class);\n\t\t\t\t\tit.append(\" getTypeResolutionContext();\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\t\tit.newLine();\n\t\t\t\t} else if (forAppender) {\n\t\t\t\t\tit.append(\"\\tpublic \"); //$NON-NLS-1$\n\t\t\t\t\tit.append(IJvmTypeProvider.class);\n\t\t\t\t\tit.append(\" getTypeResolutionContext() {\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t\\treturn this.builder.getTypeResolutionContext();\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t}\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\t\tit.newLine();\n\t\t\t\t}\n\t\t\t\tif (forAppender) {\n\t\t\t\t\tit.append(\"\\tpublic \"); //$NON-NLS-1$\n\t\t\t\t\tit.append(getScriptAppender().getSimpleName());\n\t\t\t\t\tit.append(\"(\"); //$NON-NLS-1$\n\t\t\t\t\tit.append(getScriptBuilderInterface());\n\t\t\t\t\tit.append(\" builder) {\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t\\tthis.builder = builder;\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t}\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\tpublic void build(\"); //$NON-NLS-1$\n\t\t\t\t\tit.append(ISourceAppender.class);\n\t\t\t\t\tit.append(\" appender) throws \"); //$NON-NLS-1$\n\t\t\t\t\tit.append(IOException.class);\n\t\t\t\t\tit.append(\" {\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t\\tif (!isFinalized()) {\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t\\t\\tfinalizeScript();\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t\\t}\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t\\tbuild(this.builder.getScript(), appender);\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t}\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\t\tit.newLine();\n\t\t\t\t}\n\t\t\t\tit.append(\"\\t/** Create the internal \" + getLanguageName() + \" script.\"); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t */\"); //$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\"); //$NON-NLS-1$\n\t\t\t\tif (!forInterface) {\n\t\t\t\t\tit.append(\"public \"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t\tit.append(\"void eInit(\"); //$NON-NLS-1$\n\t\t\t\tit.append(Resource.class);\n\t\t\t\tit.append(\" resource, String packageName, \"); //$NON-NLS-1$\n\t\t\t\tit.append(IJvmTypeProvider.class);\n\t\t\t\tit.append(\" context)\"); //$NON-NLS-1$\n\t\t\t\tif (forInterface) {\n\t\t\t\t\tit.append(\";\"); //$NON-NLS-1$\n\t\t\t\t} else {\n\t\t\t\t\tit.append(\" {\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tif (forAppender) {\n\t\t\t\t\t\tit.append(\"\\t\\tthis.builder.eInit(resource, packageName, context);\"); //$NON-NLS-1$\n\t\t\t\t\t} else {\n\t\t\t\t\t\tit.append(\"\\t\\tsetTypeResolutionContext(context);\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\tif (this.script == null) {\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\tthis.script = \"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(getXFactoryFor(scriptInterface));\n\t\t\t\t\t\tit.append(\".eINSTANCE.create\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(Strings.toFirstUpper(scriptInterface.getSimpleName()));\n\t\t\t\t\t\tit.append(\"();\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\t\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(EList.class);\n\t\t\t\t\t\tit.append(\"<\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(EObject.class);\n\t\t\t\t\t\tit.append(\"> content = resource.getContents();\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\tif (!content.isEmpty()) {\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\t\\tcontent.clear();\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\t}\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\tcontent.add(this.script);\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\tif (!\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(Strings.class);\n\t\t\t\t\t\tit.append(\".isEmpty(packageName)) {\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\t\\tscript.setPackage(packageName);\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\t}\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t}\"); //$NON-NLS-1$\n\t\t\t\t\t}\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t}\"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t/** Replies the \" + getLanguageName() + \" script.\"); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t */\"); //$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t@\"); //$NON-NLS-1$\n\t\t\t\tit.append(Pure.class);\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\"); //$NON-NLS-1$\n\t\t\t\tif (!forInterface) {\n\t\t\t\t\tit.append(\"public \"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t\tit.append(scriptInterface);\n\t\t\t\tit.append(\" getScript()\"); //$NON-NLS-1$\n\t\t\t\tif (forInterface) {\n\t\t\t\t\tit.append(\";\"); //$NON-NLS-1$\n\t\t\t\t} else {\n\t\t\t\t\tit.append(\" {\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tif (forAppender) {\n\t\t\t\t\t\tit.append(\"\\t\\treturn this.builder.getScript();\"); //$NON-NLS-1$\n\t\t\t\t\t} else {\n\t\t\t\t\t\tit.append(\"\\t\\treturn this.script;\"); //$NON-NLS-1$\n\t\t\t\t\t}\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t}\"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t/** Replies the resource to which the script is attached.\"); //$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t */\"); //$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t@\"); //$NON-NLS-1$\n\t\t\t\tit.append(Pure.class);\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\"); //$NON-NLS-1$\n\t\t\t\tif (!forInterface) {\n\t\t\t\t\tit.append(\"public \"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t\tit.append(Resource.class);\n\t\t\t\tit.append(\" eResource()\"); //$NON-NLS-1$\n\t\t\t\tif (forInterface) {\n\t\t\t\t\tit.append(\";\"); //$NON-NLS-1$\n\t\t\t\t} else {\n\t\t\t\t\tit.append(\" {\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t\\treturn getScript().eResource();\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t}\"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t/** Finalize the script.\"); //$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t *\"); //$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t * <p>The finalization includes: <ul>\"); //$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t * <li>The import section is created.</li>\"); //$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t * </ul>\"); //$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t */\"); //$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\"); //$NON-NLS-1$\n\t\t\t\tif (!forInterface) {\n\t\t\t\t\tit.append(\"public \"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t\tit.append(\"void finalizeScript()\"); //$NON-NLS-1$\n\t\t\t\tif (forInterface) {\n\t\t\t\t\tit.append(\";\"); //$NON-NLS-1$\n\t\t\t\t} else {\n\t\t\t\t\tit.append(\" {\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tif (forAppender) {\n\t\t\t\t\t\tit.append(\"\\t\\tthis.builder.finalizeScript();\"); //$NON-NLS-1$\n\t\t\t\t\t} else {\n\t\t\t\t\t\tit.append(\"\\t\\tif (this.isFinalized) {\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\tthrow new \"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(IllegalStateException.class);\n\t\t\t\t\t\tit.append(\"(\\\"already finalized\\\");\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t}\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\tthis.isFinalized = true;\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(ImportManager.class);\n\t\t\t\t\t\tit.append(\" concreteImports = new \"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(ImportManager.class);\n\t\t\t\t\t\tit.append(\"(true);\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(XImportSection.class);\n\t\t\t\t\t\tit.append(\" importSection = getScript().getImportSection();\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\tif (importSection != null) {\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\tfor (\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(XImportDeclaration.class);\n\t\t\t\t\t\tit.append(\" decl : importSection.getImportDeclarations()) {\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\t\\tconcreteImports.addImportFor(decl.getImportedType());\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\t}\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t}\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\tfor (String importName : getImportManager().getImports()) {\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\t\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(JvmType.class);\n\t\t\t\t\t\tit.append(\" type = findType(getScript(), importName).getType();\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\tif (concreteImports.addImportFor(type) && type instanceof \"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(JvmDeclaredType.class);\n\t\t\t\t\t\tit.append(\") {\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\t\\t\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(XImportDeclaration.class);\n\t\t\t\t\t\tit.append(\" declaration = \"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(XtypeFactory.class);\n\t\t\t\t\t\tit.append(\".eINSTANCE.createXImportDeclaration();\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\t\\tdeclaration.setImportedType((\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(JvmDeclaredType.class);\n\t\t\t\t\t\tit.append(\") type);\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\t\\tif (importSection == null) {\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\t\\t\\timportSection = \"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(XtypeFactory.class);\n\t\t\t\t\t\tit.append(\".eINSTANCE.createXImportSection();\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\t\\t\\tgetScript().setImportSection(importSection);\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\t\\t}\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\t\\timportSection.getImportDeclarations().add(declaration);\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\t}\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t}\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(Resource.class);\n\t\t\t\t\t\tit.append(\" resource = getScript().eResource();\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\tif (resource instanceof \"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(DerivedStateAwareResource.class);\n\t\t\t\t\t\tit.append(\") {\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t\\t((\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.append(DerivedStateAwareResource.class);\n\t\t\t\t\t\tit.append(\") resource).discardDerivedState();\"); //$NON-NLS-1$\n\t\t\t\t\t\tit.newLine();\n\t\t\t\t\t\tit.append(\"\\t\\t}\"); //$NON-NLS-1$\n\t\t\t\t\t}\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t}\"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t/** Replies if the script was finalized.\"); //$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t */\"); //$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\"); //$NON-NLS-1$\n\t\t\t\tif (!forInterface) {\n\t\t\t\t\tit.append(\"public \"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t\tit.append(\"boolean isFinalized()\"); //$NON-NLS-1$\n\t\t\t\tif (forInterface) {\n\t\t\t\t\tit.append(\";\"); //$NON-NLS-1$\n\t\t\t\t} else {\n\t\t\t\t\tit.append(\" {\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tif (forAppender) {\n\t\t\t\t\t\tit.append(\"\\t\\treturn this.builder.isFinalized();\"); //$NON-NLS-1$\n\t\t\t\t\t} else {\n\t\t\t\t\t\tit.append(\"\\t\\treturn this.isFinalized;\"); //$NON-NLS-1$\n\t\t\t\t\t}\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t}\"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tif (!forInterface) {\n\t\t\t\t\tit.append(\"\\t@\"); //$NON-NLS-1$\n\t\t\t\t\tit.append(Override.class);\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t@\"); //$NON-NLS-1$\n\t\t\t\t\tit.append(Pure.class);\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\tpublic \"); //$NON-NLS-1$\n\t\t\t\t\tit.append(String.class);\n\t\t\t\t\tit.append(\" toString() {\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t\\treturn \"); //$NON-NLS-1$\n\t\t\t\t\tif (forAppender) {\n\t\t\t\t\t\tit.append(\"this.builder.toString();\"); //$NON-NLS-1$\n\t\t\t\t\t} else {\n\t\t\t\t\t\tit.append(EmfFormatter.class);\n\t\t\t\t\t\tit.append(\".objToStr(this.script);\"); //$NON-NLS-1$\n\t\t\t\t\t}\n\t\t\t\t\tit.newLine();\n\t\t\t\t\tit.append(\"\\t}\"); //$NON-NLS-1$\n\t\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\t\tit.newLine();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}", "public static void checkState(boolean expression,@Nullable Object errorMessage){\n  if (!expression) {\n    throw new IllegalStateException(String.valueOf(errorMessage));\n  }\n}\n", "public JSONArray put ( int index , double value ) throws JSONException { this . put ( index , new Double ( value ) ) ; return this ; }", "\tpublic Instruction passInstruction() {\n\t\tif (stalled) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn instr;\n\t\t}\n\t}\n", "public MultiLayerNetwork getMultiLayerNetwork(boolean importWeights)\n            throws InvalidKerasConfigurationException, UnsupportedKerasConfigurationException {\n        MultiLayerNetwork model = new MultiLayerNetwork(getMultiLayerConfiguration());\n        model.init();\n        if (importWeights)\n            model = (MultiLayerNetwork) KerasModelUtils.copyWeightsToModel(model, this.layers);\n        return model;\n    }", "public String getAPIAccessMode() {\n\t\tString apiAccessMode = (String) getScenarioGlobals().getAttribute(API_ACCESS_MODE_KEY);\n\t\treturn apiAccessMode == null ? HTTP_API_ACCESS_MODE : apiAccessMode;\n\t}", "public void appendText ( String text ) ;", "public void updateField(String strFieldName, Object objData)\n    {\n        try   {\n            FieldInfo fieldInfo = m_table.getRecord().getField(strFieldName);\n            if (fieldInfo != null)\n            {\n                m_table.edit();\n                fieldInfo.setData(objData);\n                m_table.set(m_table.getRecord());\n                m_table.seek(null);   // Read this record\n            }\n        } catch (Exception ex)  {\n            ex.printStackTrace();\n        }\n    }", "    public void retrieveAll(java.lang.Object[] pcs) {\n\tretrieveAll(pcs, false);\n    }\n", "private void writeFullBuffer(ByteBuffer buffer) throws IOException {\n        int iterationsCount = MAX_WRITE_ITERATIONS;\n        int writeCount;\n        \n        while(buffer.remaining() > 0 && iterationsCount > 0) {\n            writeCount = _channel.write(buffer);\n            if(writeCount == 0) {\n                // we decrement iterations count only when we could not write anything\n                --iterationsCount;\n            } else {\n                // as long as we can write, we reset iterationsCount\n                iterationsCount = MAX_WRITE_ITERATIONS;\n            }\n        }\n        \n        if(buffer.remaining() > 0)\n            throw new IOException(\"couldn't write the buffer after \" + MAX_WRITE_ITERATIONS + \" tries\");\n    }", "public boolean canMultithread ( ) { return canMultithread ; }", "public Trigger perform(TableStatement... statements){\n  Collections.addAll(this.statements,statements);\n  return this;\n}\n", "public DemoService ( Gondola gondola , String shardId ) { super ( gondola , shardId ) ; registerEventHandler ( listener ) ; }", "public Utf8Constant(ConstantPool pool,int index,String value){\n  super(pool,index);\n  _value=value;\n}\n", "\tpublic double getInverseMass() {\n\t\tif (this.type == Mass.Type.INFINITE || this.type == Mass.Type.FIXED_LINEAR_VELOCITY) {\n\t\t\treturn 0.0;\n\t\t} else {\n\t\t\treturn invMass;\n\t\t}\n\t}\n", "\tpublic LogFrameGroupDTO addGroup(String label, LogFrameGroupType type) {\n\n\t\t// Creates the groups.\n\t\tfinal LogFrameGroupDTO group = new LogFrameGroupDTO();\n\t\tgroup.setLabel(label);\n\t\tgroup.setType(type);\n\t\tgroup.setParentLogFrame(this);\n\n\t\t// Adds it.\n\t\tgetGroups().add(group);\n\t\t\n\t\treturn group;\n\t}\n", "private static List<String> generateGetMethodNames(final Field field){\n  final List<String> prefix=new LinkedList<String>();\n  prefix.add(\"get\" + AttributeHelper.getAttributeName(field));\n  if (field.getType() == boolean.class || field.getType() == Boolean.class) {\n    prefix.add(\"is\" + AttributeHelper.getAttributeName(field));\n    String fieldName=field.getName();\n    if (fieldName.length() > 2 && fieldName.startsWith(\"is\") && Character.isUpperCase(fieldName.charAt(2)))     prefix.add(fieldName);\n  }\n  return prefix;\n}\n", "\tpublic boolean onCreateOptionsMenu(Menu menu){\n        MenuInflater inflater = getMenuInflater();\n        inflater.inflate(R.menu.map, menu);\n        \n\t\treturn true;\t\t\n\t}\n", "    protected DataOutputStream outOpenIndex() throws IOException {\n        File indexFile = new File(this.cachedir, \"packages.idx\");\n\n        return new DataOutputStream(new BufferedOutputStream(\n                new FileOutputStream(indexFile)));\n    }\n", "    public Course getuCourse() {\n        return uCourse;\n    }\n", "private FileLogAccessor resolveStdoutLogDestination(String fileName){\n  File stdout=new File(System.getProperty(\"catalina.base\"),\"logs/\" + fileName);\n  if (stdout.exists()) {\n    FileLogAccessor fla=new FileLogAccessor();\n    fla.setName(fileName);\n    fla.setFile(stdout);\n    return fla;\n  }\n  return null;\n}\n", "private static boolean isEmpty(String val){\n  return val == null || val.isEmpty();\n}\n", "synchronized HttpRequest startRequest(HttpRequest request) {\n\t\tif (request == null) {\n\t\t\tthrow new IllegalArgumentException(\"Request is null\");\n\t\t}\n\n\t\tif (requestInjector != null) {\n\t\t\trequest.setInjector(requestInjector);\n\t\t}\n\n\t\tregisterRequest(request);\n\t\tdispatchRequest(request);\n\t\tnotifyRequestStarted(request);\n\n\t\treturn request;\n\t}", "private void decodeNormal(Context ctx,IoSession session,IoBuffer in,ProtocolDecoderOutput out) throws CharacterCodingException, ProtocolDecoderException {\n  int matchCount=ctx.getMatchCount();\n  int oldPos=in.position();\n  int oldLimit=in.limit();\n  while (in.hasRemaining()) {\n    byte b=in.get();\n    if (delimBuf.get(matchCount) == b) {\n      matchCount++;\n      if (matchCount == delimBuf.limit()) {\n        int pos=in.position();\n        in.limit(pos);\n        in.position(oldPos);\n        ctx.append(in);\n        in.limit(oldLimit);\n        in.position(pos);\n        if (ctx.getOverflowPosition() == 0) {\n          IoBuffer buf=ctx.getBuffer();\n          buf.flip();\n          buf.limit(buf.limit() - matchCount);\n          try {\n            writeText(session,buf.getString(ctx.getDecoder()),out);\n          }\n  finally {\n            buf.clear();\n          }\n        }\n else {\n          int overflowPosition=ctx.getOverflowPosition();\n          ctx.reset();\n          throw new RecoverableProtocolDecoderException(\"Line is too long: \" + overflowPosition);\n        }\n        oldPos=pos;\n        matchCount=0;\n      }\n    }\n else {\n      in.position(Math.max(0,in.position() - matchCount));\n      matchCount=0;\n    }\n  }\n  in.position(oldPos);\n  ctx.append(in);\n  ctx.setMatchCount(matchCount);\n}\n", "ServerHeartbeat createServer(String serverId)\n  {\n    int p = serverId.indexOf(':');\n    \n    String address = serverId.substring(0, p);\n    int port = Integer.parseInt(serverId.substring(p + 1));\n    \n    boolean isSSL = false;\n\n    return _heartbeatService.createServer(address, port, isSSL);\n  }", "    private void validateParameters(double[] parameters) throws ZeroException {\n        if (parameters == null) {\n            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n        }\n        if (parameters.length != 4) {\n            throw new DimensionMismatchException(4, parameters.length);\n        }\n        if (parameters[3] == 0.0) {\n            throw new ZeroException();\n        }\n    }\n", "void added ( IProgressOperation operation ) ;", "    public boolean isOpened() {\n        return opened;\n    }\n", "\tpublic boolean collidesWith(Section section) {\n\t\t\n\t\tTimeRange timeRange1 = getTimeRange();\n\t\tTimeRange timeRange2 = section.getTimeRange();\n\t\t\n\t\t// First we check if the times conflict\n\t\tif(TimeRange.collides(timeRange1, timeRange2)) {\n\t\t\t\n\t\t\t// Next we check if there are any conflicting days\n\t\t\tLinkedList<Day> days2 = new LinkedList<Day>(Arrays.asList(section.getDays()));\n\t\t\t\n\t\t\tif(Collections.disjoint(days, days2)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n", "public static String canonicalizeUrl(String url,String refer){\n  URL base;\n  try {\n    try {\n      base=new URL(refer);\n    }\n catch (    MalformedURLException e) {\n      URL abs=new URL(refer);\n      return abs.toExternalForm();\n    }\n    if (url.startsWith(\"?\"))     url=base.getPath() + url;\n    URL abs=new URL(base,url);\n    return encodeIllegalCharacterInUrl(abs.toExternalForm());\n  }\n catch (  MalformedURLException e) {\n    return \"\";\n  }\n}\n", "public static void writeMatrix(double[][] matrix,String fileName,String headerLine){\n  ArrayList<String> list=new ArrayList<String>();\n  if (headerLine != null) {\n    list.add(headerLine);\n  }\n  for (int i=0; i < matrix.length; i++) {\n    String line=\"\";", "public static int stringToActionData(String str){\n  if (str.equals(rbx.getString(\"TurnoutClosed\"))) {\n    return Turnout.CLOSED;\n  }\n else   if (str.equals(rbx.getString(\"TurnoutThrown\"))) {\n    return Turnout.THROWN;\n  }\n else   if (str.equals(Bundle.getMessage(\"SensorStateActive\"))) {\n    return Sensor.ACTIVE;\n  }\n else   if (str.equals(Bundle.getMessage(\"SensorStateInactive\"))) {\n    return Sensor.INACTIVE;\n  }\n else   if (str.equals(rbx.getString(\"LightOn\"))) {\n    return Light.ON;\n  }\n else   if (str.equals(rbx.getString(\"LightOff\"))) {\n    return Light.OFF;\n  }\n else   if (str.equals(rbx.getString(\"TurnoutUnlock\"))) {\n    return Turnout.UNLOCKED;\n  }\n else   if (str.equals(rbx.getString(\"TurnoutLock\"))) {\n    return Turnout.LOCKED;\n  }\n else   if (str.equals(Bundle.getMessage(\"SignalHeadStateRed\"))) {\n    return SignalHead.RED;\n  }\n else   if (str.equals(Bundle.getMessage(\"SignalHeadStateYellow\"))) {\n    return SignalHead.YELLOW;\n  }\n else   if (str.equals(Bundle.getMessage(\"SignalHeadStateGreen\"))) {\n    return SignalHead.GREEN;\n  }\n else   if (str.equals(Bundle.getMessage(\"SignalHeadStateDark\"))) {\n    return SignalHead.DARK;\n  }\n else   if (str.equals(Bundle.getMessage(\"SignalHeadStateFlashingRed\"))) {\n    return SignalHead.FLASHRED;\n  }\n else   if (str.equals(Bundle.getMessage(\"SignalHeadStateFlashingYellow\"))) {\n    return SignalHead.FLASHYELLOW;\n  }\n else   if (str.equals(Bundle.getMessage(\"SignalHeadStateFlashingGreen\"))) {\n    return SignalHead.FLASHGREEN;\n  }\n else   if (str.equals(Bundle.getMessage(\"SignalHeadStateLunar\"))) {\n    return SignalHead.LUNAR;\n  }\n else   if (str.equals(Bundle.getMessage(\"SignalHeadStateFlashingLunar\"))) {\n    return SignalHead.FLASHLUNAR;\n  }\n else   if (str.equals(rbx.getString(\"AudioSourcePlay\"))) {\n    return Audio.CMD_PLAY;\n  }\n else   if (str.equals(rbx.getString(\"AudioSourceStop\"))) {\n    return Audio.CMD_STOP;\n  }\n else   if (str.equals(rbx.getString(\"AudioSourcePlayToggle\"))) {\n    return Audio.CMD_PLAY_TOGGLE;\n  }\n else   if (str.equals(rbx.getString(\"AudioSourcePause\"))) {\n    return Audio.CMD_PAUSE;\n  }\n else   if (str.equals(rbx.getString(\"AudioSourceResume\"))) {\n    return Audio.CMD_RESUME;\n  }\n else   if (str.equals(rbx.getString(\"AudioSourcePauseToggle\"))) {\n    return Audio.CMD_PAUSE_TOGGLE;\n  }\n else   if (str.equals(rbx.getString(\"AudioSourceRewind\"))) {\n    return Audio.CMD_REWIND;\n  }\n else   if (str.equals(rbx.getString(\"AudioSourceFadeIn\"))) {\n    return Audio.CMD_FADE_IN;\n  }\n else   if (str.equals(rbx.getString(\"AudioSourceFadeOut\"))) {\n    return Audio.CMD_FADE_OUT;\n  }\n else   if (str.equals(rbx.getString(\"AudioResetPosition\"))) {\n    return Audio.CMD_RESET_POSITION;\n  }\n  if (str.length() > 0) {\n    log.warn(\"Unexpected parameter to stringToActionData(\" + str + \")\");\n  }\n  return -1;\n}\n", "public PoolingByteArrayOutputStream ( ByteArrayPool pool ) { this ( pool , DEFAULT_SIZE ) ; }", "    public NumberTransformer removeTransformer(Class<?> key) {\n        return map.remove(key);\n    }\n", "public void delete(String dn) throws NamingException {\n  DirContext ctx=new InitialDirContext(env);\n  ctx.destroySubcontext(dn);\n  ctx.close();\n}\n", "\t\tprotected void closeTransaction() throws SQLException{\n\t\t\n\t\t\tif(connection!=null && !connection.isClosed()) {\n\t\t\t\tconnection.close();\n\t\t\t\tconnection=null;\n\t\t\t}else{\n\t\t\t\tconnection=null;\n\t\t\t}\n\t\t}\n", "public static Sha256Hash extractWitnessCommitmentHash(Script script) {\n        return Sha256Hash.wrap(Arrays.copyOfRange(script.chunks.get(1).data, 4, 36));\n    }", "public Message getMessageById(String id) throws IOException {\n        String url = \"queues/\" + name + \"/messages/\" + id;\n        IronReader reader = client.get(url);\n        MessageContainer container = gson.fromJson(reader.reader, MessageContainer.class);\n        reader.close();\n        return container.getMessage();\n    }", "public static boolean isFunctionCall ( final ReilInstruction instruction ) { Preconditions . checkNotNull ( instruction , STR_ ) ; return com . google . security . zynamics . reil . ReilHelpers . isFunctionCall ( instruction . getNative ( ) ) ; }", "public void statistics(CharSequence message, Throwable e) {\n    log(Level.STATISTICS, message, e);\n  }", "public static IRing getMostComplexRing(IRingSet ringSet) {\n        int[] neighbors = new int[ringSet.getAtomContainerCount()];\n        IRing ring1, ring2;\n        IAtom atom1, atom2;\n        int mostComplex = 0, mostComplexPosition = 0;\n        /* for all rings in this RingSet */\n        for (int i = 0; i < ringSet.getAtomContainerCount(); i++) {\n            /* Take each ring */\n            ring1 = (IRing) ringSet.getAtomContainer(i);\n            /*\n             * look at each Atom in this ring whether it is part of any other\n             * ring\n             */\n            for (int j = 0; j < ring1.getAtomCount(); j++) {\n                atom1 = ring1.getAtom(j);\n                /* Look at each of the other rings in the ringset */\n                for (int k = i + 1; k < ringSet.getAtomContainerCount(); k++) {\n                    ring2 = (IRing) ringSet.getAtomContainer(k);\n                    if (ring1 != ring2) {\n                        for (int l = 0; l < ring2.getAtomCount(); l++) {\n                            atom2 = ring2.getAtom(l);\n                            if (atom1.equals(atom2)) {\n                                neighbors[i]++;\n                                neighbors[k]++;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < neighbors.length; i++) {\n            if (neighbors[i] >= mostComplex) {\n                mostComplex = neighbors[i];\n                mostComplexPosition = i;\n            }\n        }\n        return (IRing) ringSet.getAtomContainer(mostComplexPosition);\n    }", "public void marshall(DeleteResourceDefinitionRequest deleteResourceDefinitionRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (deleteResourceDefinitionRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(deleteResourceDefinitionRequest.getResourceDefinitionId(), RESOURCEDEFINITIONID_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void setY(final int val) {\n\t\ty = val;\n\t}", "\tprivate void accept(SelectionKey key) throws IOException {\n\t\tServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();\n\t\tSocketChannel socketChannel = serverSocketChannel.accept();\n\t\tsocketChannel.configureBlocking(false);\n\t\ttry {\n\t\t\t((TcpAcceptor) key.attachment()).accept(socketChannel);\n\t\t} catch (Exception ex) {\n\t\t\tlogger.error(\"Problem accepting connection\", ex);\n\t\t}\n\t}\n", "public RecursiveZipHandler(List<String> subResourceNames,String collectionName,DeltaHandler<ResourceNode> parentHandler){\n  this.parentHandler=parentHandler;\n  this.collectionName=collectionName;\n  processCount=new AtomicInteger(subResourceNames.size());\n  nodes=new ArrayList<>();\n  xDeltaResponseNumber=new AtomicInteger(0);\n}\n", "public GotoSectionMenu ( final List < Section > sections , final long address , final INaviModule module ) { setText ( STR_ ) ; for ( final Section section : sections ) { add ( new GotoSectionAction ( section , address , module ) ) ; } }", "public static void addErrors(List<String> targetList,Map<String,Object> targetMap,Map<String,? extends Object> callResult){\n  List<String> newList;\n  Map<String,Object> errorMsgMap;\n  if (callResult.containsKey(ModelService.ERROR_MESSAGE)) {\n    targetList.add((String)callResult.get(ModelService.ERROR_MESSAGE));\n  }\n  if (callResult.containsKey(ModelService.ERROR_MESSAGE_LIST)) {\n    newList=UtilGenerics.checkList(callResult.get(ModelService.ERROR_MESSAGE_LIST));\n    targetList.addAll(newList);\n  }\n  if (callResult.containsKey(ModelService.ERROR_MESSAGE_MAP)) {\n    errorMsgMap=UtilGenerics.checkMap(callResult.get(ModelService.ERROR_MESSAGE_MAP));\n    targetMap.putAll(errorMsgMap);\n  }\n}\n", "\tpublic void add(AbstractButton button) {\n\t\tbuttons.add(button);\n\t\tsuper.add(button);\n\t\tif (getSelectedButton() != null)\n\t\t{\n\t\t\tgetSelectedButton().setSelected(false);\n\t\t}\n\t\tbutton.setSelected(true);\n\t\tresizeButtons();\n\n\t}\n", "private static String unescapePathComponent(String name){\n  return name.replaceAll(\"\\\\\\\\(.)\",\"$1\");\n}\n", "public static AnchorPane loadAnchorPane(final FXMLLoader loader){\n  try {\n    return (AnchorPane)loader.load();\n  }\n catch (  IOException e) {\n    throw new CriticalException(\"Cannot load FXML\",e);\n  }\n}\n", "public HttpRequest header ( final String name , final String value ) { connection . setRequestProperty ( name , value ) ; return this ; }", "public static int netmaskIntToPrefixLength(int netmask){\n  return Integer.bitCount(netmask);\n}\n", "public List<Post> likedPosts(Map<String, ?> options) {\n        return client.blogLikes(this.name, options);\n    }", "public void removeReferenceListener(ReferenceListener listener) {\n\t\tfinal List<ReferenceListener> list = this.listeners;\n\t\tif (list != null) {\n\t\t\tsynchronized (list) {\n\t\t\t\tlist.remove(listener);\n\t\t\t\tif (list.isEmpty()) {\n\t\t\t\t\tthis.listeners = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "private PlanString buildPlanString(final IncompatiblePlansIdentifier incompatiblePlans,final ForbidenPlanStrings forbidenCombinations,final List<PersonRecord> personsStillToAllocate,final Set<Id> allocatedIncompatibilityGroups,final PlanString str,final double minimalWeightToObtain){\n  final FeasibilityChanger feasibilityChanger=new FeasibilityChanger();\n  final List<PersonRecord> remainingPersons=new ArrayList<PersonRecord>(personsStillToAllocate);\n  final PersonRecord currentPerson=remainingPersons.remove(0);\n  tagLinkedPlansOfPersonAsInfeasible(currentPerson,feasibilityChanger);\n  assert str == null || !str.containsPerson(currentPerson.person.getId());\n  final List<PlanRecord> records=new ArrayList<PlanRecord>(currentPerson.plans);\n  PlanString constructedString=null;\n  final KnownBranches knownBranches=new KnownBranches(true);\n  final FeasibilityChanger localFeasibilityChanger=new FeasibilityChanger();\n  double lastWeight=Double.POSITIVE_INFINITY;\n  for (  PlanRecord r : records) {\n    assert lastWeight >= r.avgJointPlanWeight;\n    lastWeight=r.avgJointPlanWeight;\n    if (!r.isStillFeasible) {\n      assert intersect(r.jointPlan.getIndividualPlans().keySet(),str);\n      continue;\n    }\n    final Set<Id> incomp=incompatiblePlans.identifyIncompatibilityGroups(r.plan);\n    if (!Collections.disjoint(allocatedIncompatibilityGroups,incomp)) {\n      continue;\n    }\n    final Set<Id<Person>> cotravelers=r.jointPlan == null ? Collections.<Id<Person>>emptySet() : r.jointPlan.getIndividualPlans().keySet();\n    if (knownBranches.isExplored(cotravelers,incomp))     continue;\n    knownBranches.tagAsExplored(cotravelers,incomp);\n    PlanString tail=str;\n    List<PersonRecord> actuallyRemainingPersons=remainingPersons;\n    if (r.jointPlan != null) {\n      assert !intersect(r.jointPlan.getIndividualPlans().keySet(),str);\n      tail=getOtherPlansAsString(r,tail);\n      actuallyRemainingPersons=filter(remainingPersons,r.jointPlan);\n      tagLinkedPlansOfPartnersAsInfeasible(r,localFeasibilityChanger);\n    }\n    PlanString newString;\n    if (!actuallyRemainingPersons.isEmpty()) {\n      final Set<Id> newIncomp=new HashSet<Id>(allocatedIncompatibilityGroups);\n      newIncomp.addAll(incomp);\n      newString=buildPlanString(incompatiblePlans,forbidenCombinations,actuallyRemainingPersons,newIncomp,new PlanString(r,tail),Math.max(minimalWeightToObtain,constructedString != null ? constructedString.getWeight() - EPSILON : Double.NEGATIVE_INFINITY));\n    }\n else {\n      newString=new PlanString(r,tail);\n      if (forbidBlockingCombinations && forbidenCombinations.isForbidden(newString)) {\n        newString=null;\n      }\n    }\n    localFeasibilityChanger.resetFeasibilities();\n    if (newString == null)     continue;\n    if (constructedString == null || newString.getWeight() > constructedString.getWeight()) {\n      constructedString=newString;\n    }\n  }\n  feasibilityChanger.resetFeasibilities();\n  return constructedString;\n}\n", "private static String promptForIdaDirectory ( final JFrame parent ) throws FileNotFoundException { CMessageBox . showError ( parent , STR_ ) ; final CIdaSelectionDialog fileChooser = CIdaSelectionDialog . show ( parent , ConfigManager . instance ( ) . get", "public SoftCache(final Cloner<V> cloner){\n  this.cloner=cloner;\n  final Thread t=new Thread(cleaner,this + \"_queueCleaner\");\n  t.setDaemon(true);\n  t.start();\n}\n", "public List<LinearConstraint> normalizeConstraints(Collection<LinearConstraint> originalConstraints){\n  List<LinearConstraint> normalized=new ArrayList<LinearConstraint>(originalConstraints.size());\n  for (  LinearConstraint constraint : originalConstraints) {\n    normalized.add(normalize(constraint));\n  }\n  return normalized;\n}\n", "@SuppressWarnings(\"unchecked\")\n    public <T> T read(Object jsonObject, Configuration configuration) {\n        boolean optAsPathList = configuration.containsOption(AS_PATH_LIST);\n        boolean optAlwaysReturnList = configuration.containsOption(Option.ALWAYS_RETURN_LIST);\n        boolean optSuppressExceptions = configuration.containsOption(Option.SUPPRESS_EXCEPTIONS);\n\n        try {\n            if (path.isFunctionPath()) {\n                if (optAsPathList || optAlwaysReturnList) {\n                    throw new JsonPathException(\"Options \" + AS_PATH_LIST + \" and \" + ALWAYS_RETURN_LIST + \" are not allowed when using path functions!\");\n                }\n                return path.evaluate(jsonObject, jsonObject, configuration).getValue(true);\n\n            } else if (optAsPathList) {\n                return (T) path.evaluate(jsonObject, jsonObject, configuration).getPath();\n\n            } else {\n                Object res = path.evaluate(jsonObject, jsonObject, configuration).getValue(false);\n                if (optAlwaysReturnList && path.isDefinite()) {\n                    Object array = configuration.jsonProvider().createArray();\n                    configuration.jsonProvider().setArrayIndex(array, 0, res);\n                    return (T) array;\n                } else {\n                    return (T) res;\n                }\n            }\n        } catch (RuntimeException e) {\n            if (!optSuppressExceptions) {\n                throw e;\n            } else {\n                if (optAsPathList) {\n                    return (T) configuration.jsonProvider().createArray();\n                } else {\n                    if (optAlwaysReturnList) {\n                        return (T) configuration.jsonProvider().createArray();\n                    } else {\n                        return (T) (path.isDefinite() ? null : configuration.jsonProvider().createArray());\n                    }\n                }\n            }\n        }\n    }", "\tpublic void check() {\n\t\tDirEntry DE = getDirectoryEntry();\n\t\t\n\t\t// Radius must be greater than 0.0\n\t\tdouble rad1 = Constants.dist(x1,y1,x2,y2);\n\t\tdouble rad2 = Constants.dist(x1,y1,x3,y3);\n\t\tif ((abs(rad1) < Constants.Grain) || (abs(rad2) < Constants.Grain)) {\n\t\t\tString msg = RESOURCES.getString(\"zeroRadiusArc\");\n\t\t\taddErrorMessage(getWarningString(msg));\n\t\t}\n\n\t\t// Length must be greater than 0.0\n\t\tif (abs(angle2-angle1) < Constants.Grain) {\n\t\t\tString msg = RESOURCES.getString(\"zerLengthArc\");\n\t\t\taddErrorMessage(getWarningString(msg));\n\t\t}\n\t}\n", "void addLocation ( String location ) { if ( fLocationList . contains ( location ) ) { return ; } fLocationList . add ( location ) ; fTableViewer . refresh ( ) ; fTableViewer . setChecked ( location , BOOL_ ) ; fTableViewer . setSelection ( new StructuredS", "    private void setVariableSet() {\n        positionInd = 0;\n        nPoints = 1;\n        if (step != 0.) {\n            nPoints = (int) ((uppLim - lowLim) / step);\n            if (lowLim + nPoints * step < uppLim) {\n                nPoints++;\n            }\n            nPoints++;\n        }\n\n        if (variableSet.length < nPoints) {\n            variableSet = new double[nPoints];\n        }\n\n        for (int i = 0; i < nPoints; i++) {\n            variableSet[i] = lowLim + i * step;\n        }\n        if (variableSet[nPoints - 1] > uppLim) {\n            variableSet[nPoints - 1] = uppLim;\n        }\n    }\n", "@Deprecated \r\n\tprivate String idSuffix(String name, DomainObject to) {\r\n\t\tif (useIdSuffixInForeignKey()) {\r\n\t\t\tAttribute idAttribute = getIdAttribute(to);\r\n\t\t\tif (idAttribute != null) {\r\n\t\t\t\tString idName = idAttribute.getDatabaseColumn().toUpperCase();\r\n\t\t\t\tString convertedName = convertDatabaseName(name);\r\n\t\t\t\tif (idName.equals(convertedName) && idName.startsWith(to.getDatabaseTable())) {\r\n\t\t\t\t\tidName = idName.substring(to.getDatabaseTable().length());\r\n\t\t\t\t} else if (idName.startsWith(convertedName)) {\r\n\t\t\t\t\tidName = idName.substring(convertedName.length());\r\n\t\t\t\t}\r\n\t\t\t\tif (idName.startsWith(\"_\")) {\r\n\t\t\t\t\treturn idName;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn (\"_\" + idName);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn \"\";\r\n\t}", "public HttpRequest acceptCharset ( final String value ) { return header ( HEADER_ACCEPT_CHARSET , value ) ; }", "     public String next(int n) throws JSONException {\n         if (n == 0) {\n             return \"\"; //$NON-NLS-1$\n         }\n\n         char[] buffer = new char[n];\n         int pos = 0;\n\n         if (this.useLastChar) {\n        \t this.useLastChar = false;\n             buffer[0] = this.lastChar;\n             pos = 1;\n         }\n\n         try {\n             int len;\n             while ((pos < n) && ((len = reader.read(buffer, pos, n - pos)) != -1)) {\n                 pos += len;\n             }\n         } catch (IOException exc) {\n             throw new JSONException(exc);\n         }\n         this.index += pos;\n\n         if (pos < n) {\n             throw syntaxError(\"Substring bounds error\"); //$NON-NLS-1$\n         }\n\n         this.lastChar = buffer[n - 1];\n         return new String(buffer);\n     }\n", "protected Map<URI,Boolean> flagInitiatorsThatArePartOfAFullList(ExportGroup exportGroup,List<URI> initiatorURIs){\n  Map<URI,Boolean> initiatorFlagMap=new HashMap<URI,Boolean>();\n  if (exportGroup.forCluster() || exportGroup.forHost()) {\n    Map<String,List<URI>> computeResourceMapForRequest=mapInitiatorsToComputeResource(exportGroup,initiatorURIs);\n    Collection<URI> egInitiators=Collections2.transform(exportGroup.getInitiators(),CommonTransformerFunctions.FCTN_STRING_TO_URI);\n    Map<String,List<URI>> computeResourcesMapForExport=mapInitiatorsToComputeResource(exportGroup,egInitiators);\n    for (    Map.Entry<String,List<URI>> computeResource : computeResourcesMapForExport.entrySet()) {\n      List<URI> initiatorsForComputeResource=computeResource.getValue();\n      List<URI> initiatorsInRequest=computeResourceMapForRequest.get(computeResource.getKey());\n      if (initiatorsInRequest != null) {\n        initiatorsForComputeResource.removeAll(initiatorsInRequest);\n        Boolean isFullList=(initiatorsForComputeResource.isEmpty());\n        for (        URI uri : initiatorsInRequest) {\n          initiatorFlagMap.put(uri,isFullList);\n        }\n      }\n    }\n  }\n  for (  URI uri : initiatorURIs) {\n    if (!initiatorFlagMap.containsKey(uri)) {\n      initiatorFlagMap.put(uri,Boolean.FALSE);\n    }\n  }\n  return initiatorFlagMap;\n}\n", "CompoundInterval copy(Register r,BasicInterval stop){\n  CompoundInterval result=new CompoundInterval(r);\n  for (Iterator<BasicInterval> i=iterator(); i.hasNext(); ) {\n    BasicInterval b=i.next();\n    result.add(b);\n    if (b.sameRange(stop))     return result;\n  }\n  return result;\n}\n", "public String getDateStringOrSuppliedString(String emptyDateString) {\n        LocalDate date = getDate();\n        return (date == null) ? emptyDateString : date.toString();\n    }", "@Pure\n\tpublic Collection<Object> getAllUserData() {\n\t\tif (this.userData == null) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\treturn Collections.unmodifiableCollection(this.userData);\n\t}", "public boolean wasBroadcastBy(PeerAddress address){\n  return broadcastBy.contains(address);\n}\n", "public static Bitmap makeBitmap ( int minSideLength , int maxNumOfPixels , Uri uri , ContentResolver cr , boolean useNative ) { ParcelFileDescriptor input = null ; try { input = cr . openFileDescriptor ( uri , STR_ ) ; BitmapFactory . Options options = null ; if ( useNative ) { options = createNativeAllocOptions ( ) ; } return makeBitmap ( minSideLength , maxNumOfPixels , uri , cr , input , options ) ; } catch ( IOException ex ) { return null ; } finally { closeSilently ( input ) ; } }", "private static void attemptRetryOnException ( String logPrefix , Request < ? > request , VolleyError exception ) throws VolleyError { RetryPolicy retryPolicy = request . getRetryPolicy ( ) ; int oldTimeout = request . getTimeoutMs ( ) ; try { retryPolicy . retry ( exception ) ; } catch ( VolleyError e ) { request . addMarker ( String . format ( STR_ , logPrefix , oldTimeout ) ) ; throw e ; } request . addMarker ( String . format ( STR_ , logPrefix , oldTimeout ) ) ; }", "\tprotected void addSchemaPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(new ItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_DocumentRoot_schema_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_DocumentRoot_schema_feature\", \"_UI_DocumentRoot_type\"),\n\t\t\t\t ImscpRootv1p1p2Package.eINSTANCE.getDocumentRoot_Schema(),\n\t\t\t\t true,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE));\n\t}\n", "\tpublic String getDescription() {\n\t\tassert (exts!=null);\n\t\treturn exts[0];\n\t}\n", "\tpublic boolean isValid(ValuesType valueType, Object value){\n\t\tif (valueType == getValueType()){\n\t\t\treturn isValid((Double)value);\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n", "public static void setKryoFactory(FluoConfiguration config,\n      Class<? extends KryoFactory> factoryType) {\n    config.getAppConfiguration().setProperty(KRYO_FACTORY_PROP, factoryType.getName());\n  }", "public static NameMatcher < TriggerKey > triggerNameEndsWith ( String compareTo ) { return NameMatcher . nameEndsWith ( compareTo ) ; }", "public void verify(List<OCSPResp> ocspResponses,Date atDate){\n  if (ocspResponses == null || ocspResponses.isEmpty()) {\n    throw new IllegalArgumentException(\"List of OCSP responses cannot be null or empty\");\n  }\n  verifyImpl(ocspResponses,atDate);\n}\n", "public StringBuffer _generatePattern(StringBuffer result,boolean escapeUnprintable,boolean includeStrings){\n  result.append('[');\n  int count=getRangeCount();\n  if (count > 1 && getRangeStart(0) == MIN_VALUE && getRangeEnd(count - 1) == MAX_VALUE) {\n    result.append('^');\n    for (int i=1; i < count; ++i) {\n      int start=getRangeEnd(i - 1) + 1;\n      int end=getRangeStart(i) - 1;\n      _appendToPat(result,start,escapeUnprintable);\n      if (start != end) {\n        if ((start + 1) != end) {\n          result.append('-');\n        }\n        _appendToPat(result,end,escapeUnprintable);\n      }\n    }\n  }\n else {\n    for (int i=0; i < count; ++i) {\n      int start=getRangeStart(i);\n      int end=getRangeEnd(i);\n      _appendToPat(result,start,escapeUnprintable);\n      if (start != end) {\n        if ((start + 1) != end) {\n          result.append('-');\n        }\n        _appendToPat(result,end,escapeUnprintable);\n      }\n    }\n  }\n  if (includeStrings && strings.size() > 0) {\n    Iterator<String> it=strings.iterator();\n    while (it.hasNext()) {\n      result.append('{');\n      _appendToPat(result,it.next(),escapeUnprintable);\n      result.append('}');\n    }\n  }\n  return result.append(']');\n}\n", "public FailureResponse sendAndWaitFailure(Operation op){\n  FailureResponse response=new FailureResponse();\n  String msg=String.format(\"Expected operation failure but was successful. uri=%s \",op.getUri());\n  Exception callerStack=new RuntimeException(msg);\n  TestContext waitContext=new TestContext(1,this.timeout);\n  op.appendCompletion(null);\n  sendRequest(op);\n  waitContext.await();\n  return response;\n}\n", "public DataBounds calculateProjectedImageBounds(Projection p){\n  DataBounds db=null;\n  if (sourceImageBounds != null) {\n    int pw=p.getWidth();\n    int ph=p.getHeight();\n    Point2D min=sourceImageBounds.getMin();\n    Point2D max=sourceImageBounds.getMax();\n    double x1=Math.floor(min.getX());\n    double y1=Math.floor(min.getY());\n    double x2=Math.ceil(max.getX());\n    double y2=Math.ceil(max.getY());\n    double width=sourceImageBounds.getWidth();\n    double height=sourceImageBounds.getHeight();\n    LatLonPoint tmpG=new LatLonPoint.Double();\n    Point2D tmpP=new Point2D.Double();\n    db=new DataBounds();\n    db.setHardLimits(new DataBounds(0,0,pw,ph));\n    db.add(p.forward(geoTrans.inverse(x1,y1,tmpG),tmpP));\n    db.add(p.forward(geoTrans.inverse(x1,y2,tmpG),tmpP));\n    db.add(p.forward(geoTrans.inverse(x2,y1,tmpG),tmpP));\n    db.add(p.forward(geoTrans.inverse(x2,y2,tmpG),tmpP));\n    double numSplits=4;\n    double xSpacer=width / numSplits;\n    double ySpacer=height / numSplits;\n    for (int i=1; i < numSplits; i++) {\n      db.add(p.forward(geoTrans.inverse(Math.ceil(x1 + xSpacer * i),y1,tmpG),tmpP));\n      db.add(p.forward(geoTrans.inverse(x1,Math.ceil(y1 + ySpacer * i),tmpG),tmpP));\n      db.add(p.forward(geoTrans.inverse(Math.ceil(x1 + xSpacer * i),y2,tmpG),tmpP));\n      db.add(p.forward(geoTrans.inverse(x2,Math.ceil(y1 + ySpacer * i),tmpG),tmpP));\n    }\n    if (db.getWidth() <= 0 || db.getHeight() <= 0) {\n      logger.fine(\"dimensions of data bounds bad, returning null \" + db);\n      return null;\n    }\n  }\n  return db;\n}\n", "protected void startTask ( final ScheduledTask task ) { this . executeTaskRunnable ( null ) ; }", "private void compilePattern(String patternString){\n  try {\n    pattern=Pattern.compile(patternString);\n  }\n catch (  PatternSyntaxException ex) {\n    LOGGER.warning(\"Invalid regex: \" + ex.getLocalizedMessage());\n  }\n}\n", "public void chmod(int permissions, String path) throws SftpStatusException,\n\t\t\tSshException {\n\t\tString actual = resolveRemotePath(path);\n\t\tsftp.changePermissions(actual, permissions);\n\t}", "protected void shutdownClient() {\n\t\tif (serviceClient != null) {\n\t\t\ttry {\n\t\t\t\tserviceClient.close();\n\t\t\t\tserviceClient = null;\n\t\t\t} catch (Exception ex) {\n\t\t\t\tlogger.warn(\"Couldn't close Azure IoT service client: {}\", ex.getMessage());\n\t\t\t}\n\t\t}\n\t}", "public CEventListTableModel ( final ITraceListProvider traceProvider ) { Preconditions . checkNotNull ( traceProvider , STR_ ) ; m_traceProvider = traceProvider ; m_traceProvider . addListener ( m_listener ) ; if ( traceProvider . isLoaded ( ) ) { for ( f", "static void appendDot(Node n, ControlFlowGraph<Node> inCFG,\n      Appendable builder) throws IOException {\n    new DotFormatter(n, inCFG, builder, false);\n  }", "public static <A, B, C, R> Stream<R> zip(final Iterator<? extends A> a, final Iterator<? extends B> b, final Iterator<? extends C> c,\r\n            final TriFunction<? super A, ? super B, ? super C, R> zipFunction) {\r\n        return new IteratorStream<>(new ObjIteratorEx<R>() {\r\n            @Override\r\n            public boolean hasNext() {\r\n                return a.hasNext() && b.hasNext() && c.hasNext();\r\n            }\r\n\r\n            @Override\r\n            public R next() {\r\n                return zipFunction.apply(a.next(), b.next(), c.next());\r\n            }\r\n        });\r\n    }", "  public void removeProperty(Object bean, Object value) {\n    assert ((bean != null) && (value != null));\n    Class[] types = { value.getClass() };\n    Object[] params = { value };\n    ReflectUtilities.execute(bean, removeMethodName, types, params);\n  }\n", "private void drawAxisLine ( ) { if ( axisConfig . drawXAxis ( ) ) { final int x1 = canvas . getInnerLeftPos ( ) ; final int x2 = canvas . getInnerRightPos ( ) ; final int y = axisConfig . getxAxisPos ( ) ; base . drawLine ( x1 , y , x2 , y ) ; } if ( axis", "    public boolean equals(Matrix4d m1)  {\n\treturn  m1 != null\n\t        && m00 == m1.m00\n\t\t&& m01 == m1.m01\n\t\t&& m02 == m1.m02 \n\t\t&& m03 == m1.m03\n\t\t&& m10 == m1.m10\n\t\t&& m11 == m1.m11\n\t\t&& m12 == m1.m12\n\t\t&& m13 == m1.m13\n\t\t&& m20 == m1.m20\n\t\t&& m21 == m1.m21\n\t\t&& m22 == m1.m22\n\t\t&& m23 == m1.m23\n\t\t&& m30 == m1.m30\n\t\t&& m31 == m1.m31\n\t\t&& m32 == m1.m32\n\t\t&& m33 == m1.m33;\n    }\n", "private void build(Map<String, D6ModelClassFieldInfo> refFieldMap) {\n\n        refFieldMap.clear();\n\n        final Field[] fields = mModelClazz.getFields();\n\n        for (int i = 0; i < fields.length; i++) {\n\n            final Field field = fields[", "  public void setRemoved(Removed removed) {\n    if (removed == null) {\n      removeExtension(Removed.class);\n    } else {\n      setExtension(removed);\n    }\n  }\n", "private DateBuilder(Locale lc){\n  Calendar cal=Calendar.getInstance(lc);\n  this.lc=lc;\n  month=cal.get(Calendar.MONTH) + 1;\n  day=cal.get(Calendar.DAY_OF_MONTH);\n  year=cal.get(Calendar.YEAR);\n  hour=cal.get(Calendar.HOUR_OF_DAY);\n  minute=cal.get(Calendar.MINUTE);\n  second=cal.get(Calendar.SECOND);\n}\n", "  public boolean equals(Object other)\n  { if(other==null) return(false);\n    if(!(other instanceof Location)) return(false);\n    if(((Location)other).longitude!=longitude) return(false);\n    if(((Location)other).latitude!=latitude)   return(false);\n    return(true);\n  }\n", "public synchronized boolean isLoaded ( ) { return loaded ; }", "public static int getTypeNumber(TypeKind kind)\n    {\n        switch (kind)\n        {\n            case BOOLEAN:\n            case BYTE:\n            case CHAR:\n            case SHORT:\n            case INT:\n            case LONG:\n            case FLOAT:\n            case DOUBLE:\n            case VOID:\n                return kind.ordinal();\n            case DECLARED:\n            case TYPEVAR:\n            case ARRAY:\n                return TypeKind.DECLARED.ordinal();\n            default:\n                throw new IllegalArgumentException(kind+\" not valid\");\n        }\n    }", "protected void localRelease()\n    {\n        super.localRelease();\n\n        _state.clear();\n        _linkName = null;\n        _clientAction = null;\n\n        _action = null;\n        _href = null;\n        _targetScope = null;\n        _location = null;\n        _params = null;\n        _form = null;\n        _formSubmit = false;\n        _popupSupport = null;\n        _disableSecondClick = false;\n    }", "private int appendNextCharacterAndAdvanceLoop(String line,StringBuilder sb,int i){\n  sb.append(line.charAt(i + 1));\n  i++;\n  return i;\n}\n", "public ByteBuffer mmap(int length, MMAPProt prot, MMAPFlags flags, int offset) throws IOException {\n        long pointer = mmap(getFileDescriptor(), length, prot.flag, flags.flag, offset);\n\n        if(pointer == -1)\n            throw new LinuxFileException();\n\n        return newMappedByteBuffer(length, pointer, () -> {\n            munmapDirect(pointer, length);\n        });\n    }", "public BitArray resize(long size) {\n    bytes.resize(Math.max(size / 8 + 8, 8));\n    this.size = size;\n    return this;\n  }", "void resize(int newCapacity){\n  Entry[] oldTable=table;\n  int oldCapacity=oldTable.length;\n  if (oldCapacity == MAXIMUM_CAPACITY) {\n    threshold=Integer.MAX_VALUE;\n    return;\n  }\n  Entry[] newTable=new Entry[newCapacity];\n  transfer(newTable);\n  table=newTable;\n  threshold=(int)(newCapacity * loadFactor);\n}\n", "private int readUTFChar(StringBuilder sbuf,long utflen) throws IOException {\n  int b1, b2, b3;\n  b1=readByte() & 0xFF;\nswitch (b1 >> 4) {\ncase 0:\ncase 1:\ncase 2:\ncase 3:\ncase 4:\ncase 5:\ncase 6:\ncase 7:\n    sbuf.append((char)b1);\n  return 1;\ncase 12:\ncase 13:\nif (utflen < 2) {\n  throw new UTFDataFormatException();\n}\nb2=readByte();\nif ((b2 & 0xC0) != 0x80) {\nthrow new UTFDataFormatException();\n}\nsbuf.append((char)(((b1 & 0x1F) << 6) | ((b2 & 0x3F) << 0)));\nreturn 2;\ncase 14:\nif (utflen < 3) {\nif (utflen == 2) {\nreadByte();\n}\nthrow new UTFDataFormatException();\n}\nb2=readByte();\nb3=readByte();\nif ((b2 & 0xC0) != 0x80 || (b3 & 0xC0) != 0x80) {\nthrow new UTFDataFormatException();\n}\nsbuf.append((char)(((b1 & 0x0F) << 12) | ((b2 & 0x3F) << 6) | ((b3 & 0x3F) << 0)));\nreturn 3;\ndefault :\nthrow new UTFDataFormatException();\n}\n}\n", "\tpublic ResultStatus getResultStatus() {\n\t\tCoreUtils.assertNonNullState(_resultStatus, this,\n\t\t\"Must first call open().\");\n\t\t\n\t\treturn _resultStatus;\n\t}\n", "@Override\n    public AdminListDevicesResult adminListDevices(AdminListDevicesRequest request) {\n        request = beforeClientExecution(request);\n        return executeAdminListDevices(request);\n    }", "\tpublic void read(String fileName) throws FileNotFoundException {\n\t\tsetFileName(fileName);\n\t\tread();\n\t}\n", "public static void releaseLock(EntityManager em,long type,String key){\n  EntityTransaction tx=null;\n  try {\n    tx=em.getTransaction();\n    tx.begin();\n    GlobalInterlock lock=_findAndRefreshLock(em,type);\n    if (lock == null) {\n      throw new GlobalInterlockException(\"No lock of type \" + type + \" exists for key \"+ key+ \".\");\n    }\n    String ref=Long.toHexString(lock.lockTime);\n    if (ref.equalsIgnoreCase(key)) {\n      em.remove(lock);\n      em.flush();\n      tx.commit();\n    }\n else {\n      throw new GlobalInterlockException(\"This process doesn't own the type \" + type + \" lock having key \"+ key+ \".\");\n    }\n  }\n  finally {\n    if (tx != null && tx.isActive()) {\n      tx.rollback();\n    }\n  }\n}\n", "private void initializeValues ( ) { mnSize = Math . min ( getMeasuredHeight ( ) , getMeasuredWidth ( ) ) ; mnRingRadius = ( int ) ( mnSize - mnRingWidth ) / NUM_ ; mnInnerCircleRadius = ( int ) ( mnSize - ( mnRingWidth * NUM_ ) ) / NUM_ ; mnViewCenter = m", "public void configureIndicator ( int indicatorWidth , int indicatorHeight , int indicatorMargin ) { configureIndicator ( indicatorWidth , indicatorHeight , indicatorMargin , R . animator . scale_with_alpha , NUM_ , R . drawable . white_radius , R . drawab", "    private ILaunchConfiguration createNewConfiguration() {\n        try {\n            ILaunchManager lm = DebugPlugin.getDefault().getLaunchManager();\n            ILaunchConfigurationType type = lm.getLaunchConfigurationType(BDE_LAUNCH_CONFIG_TYPE);\n            String name = lm.generateUniqueLaunchConfigurationNameFrom(type.getName());\n            ILaunchConfigurationWorkingCopy wc = type.newInstance(null, name);\n            // TODO: initializeConfiguration(wc);\n            return wc.doSave();\n        } catch (CoreException ce) {\n        }\n        return null;\n    }\n", "public void addDiscoveredEventListener(Executor executor, PeerDiscoveredEventListener listener) {\n        peerDiscoveredEventListeners.add(new ListenerRegistration<>(checkNotNull(listener), executor));\n    }", "public double localScore(int i,int... parents){\n  ConditionalGaussianLikelihood.Ret ret=likelihood.getLikelihoodRatio(i,parents);\n  int N=dataSet.getNumRows();\n  double lik=ret.getLik();\n  int k=ret.getDof();\n  double prior=getStructurePrior(parents);\n  return 2.0 * lik - k * Math.log(N) + prior;\n}\n", "    private void init() {\n        //Better load from user's options.\n        UploadManager.getInstance().setManagementMode(UploadManager.MODE_SIMPLE);\n\n        goodInit = true;\n    }\n", "    public void doArrival() {\n        int oldValue = numberArrivals;\n        numberArrivals++;\n        firePropertyChange(\"numberArrivals\", oldValue, getNumberArrivals());\n        waitDelay(\"Arrival\", interarrivalTime.generate());\n    }\n", "public AbstractFelixCommandsService ( Object service ) { this . service = service ; }", "public JavaMailBuilder charset(String... charsets) {\n\t\tfor (String c : charsets) {\n\t\t\tif (c != null) {\n\t\t\t\tthis.charsets.add(c);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}", "private static boolean loadView ( final JFrame parent , final IViewContainer viewContainer , final INaviView view ) { CViewLoader . load ( parent , viewContainer , view ) ; return view . isLoaded ( ) ; }", "DigitalOut createDigitalOut ( boolean b ) ;", "public static Number multiply(Character left,Number right){\n  return NumberNumberMultiply.multiply(Integer.valueOf(left),right);\n}\n", "public void run ( ) { this . delegate . run ( ) ; }", "private long setCalendar(Calendar cal, int part, long value, long div) {\n        cal.set(part, (int) (value % div));\n        return value / div;\n    }", "    protected boolean isSecondaryObsData(String code) {\n        return false;\n    }\n", "public IElementType capturePodBlock(){\n  CharSequence buffer=getBuffer();\n  int tokenStart=getTokenEnd();\n  setTokenStart(tokenStart);\n  int bufferEnd=getBufferEnd();\n  int currentPosition=tokenStart;\n  int linePos=currentPosition;\n  int linesNumber=0;\n  while (true) {\n    while (linePos < bufferEnd && buffer.charAt(linePos) != '\\n') {\n      linePos++;\n    }\n    if (linePos < bufferEnd && buffer.charAt(linePos) == '\\n') {\n      linePos++;\n    }\n    CharSequence line=buffer.subSequence(currentPosition,linePos);\n    currentPosition=linePos;\n    if (linePos == bufferEnd || StringUtil.startsWith(line,\"=cut\") && linesNumber > 0) {\n      if (linePos < bufferEnd) {\n        linePos--;\n      }\n      setTokenEnd(linePos);\n      break;\n    }\n    linesNumber++;\n  }\n  return POD;\n}\n", "  public boolean respondToError(String message, Throwable ex) {\n    handleError(message,ex);\n    return abort;\n  }\n", "private int decodeScalefactors(float sf[],int globalGain,IndividualChannelStream ics,int bandType[],int bandTypeRunEnd[]){\n  int idx=0;\n  int offset[]={globalGain,globalGain - 90,0};\n  boolean noiseFlag=true;\n  for (int g=0; g < ics.numWindowGroups; g++) {\n    for (int i=0; i < ics.maxSfb; ) {\n      int runEnd=bandTypeRunEnd[idx];\n      if (bandType[idx] == ZERO_BT) {\n        for (; i < runEnd; i++, idx++) {\n          sf[idx]=0f;\n        }\n      }\n else       if (bandType[idx] == INTENSITY_BT || bandType[idx] == INTENSITY_BT2) {\n        for (; i < runEnd; i++, idx++) {\n          offset[2]+=vlc_scalefactors.getVLC2(br,3) - 60;\n          int clippedOffset=Utilities.clip(offset[2],-155,100);\n          if (offset[2] != clippedOffset) {\n            log.warn(String.format(\"Clipped intensity stereo position (%d -> %d)\",offset[2],clippedOffset));\n          }\n          sf[idx]=ff_aac_pow2sf_tab[-clippedOffset + POW_SF2_ZERO];\n        }\n      }\n else       if (bandType[idx] == NOISE_BT) {\n        for (; i < runEnd; i++, idx++) {\n          if (noiseFlag) {\n            offset[1]+=br.read(9) - 256;\n            noiseFlag=false;\n          }\n else {\n            offset[1]+=vlc_scalefactors.getVLC2(br,3) - 60;\n          }\n          int clippedOffset=Utilities.clip(offset[1],-100,155);\n          if (offset[1] != clippedOffset) {\n            log.warn(String.format(\"Clipped intensity stereo position (%d -> %d)\",offset[1],clippedOffset));\n          }\n          sf[idx]=-ff_aac_pow2sf_tab[clippedOffset + POW_SF2_ZERO];\n        }\n      }\n else {\n        for (; i < runEnd; i++, idx++) {\n          offset[0]+=vlc_scalefactors.getVLC2(br,3) - 60;\n          if (offset[0] > 255) {\n            log.error(String.format(\"Scalefactor (%d) out of range\",offset[0]));\n            return AAC_ERROR;\n          }\n          sf[idx]=-ff_aac_pow2sf_tab[offset[0] - 100 + POW_SF2_ZERO];\n        }\n      }\n    }\n  }\n  return 0;\n}\n", "public static IsNullValue parameterMarkedAsNonnull ( XMethodParameter mp ) { return instanceByFlagsList [ PARAM > > FLAG_SHIFT ] [ NN ] ; }", "    public BeanDescriptor getBeanDescriptor(){\n    \tdescriptor = new BeanDescriptor(FitzHughNagumoModel_1961.class);\n    \tdescriptor.setDisplayName(\"The FitzHugh-Nagumo Simplified Cardiac Action Potential Model, 1961\");\n        descriptor.setShortDescription(\n        \"The FitzHugh-Nagumo Simplified Cardiac Action Potential Model, 1961 <p>\" +\n        \"Biophys J 1961;1:445-466  <br>\" +\n        \"Chaos, Solitons and Fractals 1996;7:293-301.\");\n\n        descriptor.setValue(\"version\", \"1.4\");\n    \treturn descriptor ;\n    }\n", "public void testTwoStages ( ) throws Exception { TungstenProperties config = helper . createRuntimeWithStore ( NUM_ ) ; ReplicatorRuntime runtime = new ReplicatorRuntime ( config , new MockOpenReplicatorContext ( ) , ReplicatorMonitor . getInstance ( ) ) ; runtime . configure ( ) ; runtime . prepare ( ) ; Pipeline pipeline = runtime . getPipeline ( ) ; pipeline . start ( new MockEventDispatcher ( ) ) ; Future < ReplDBMSHeader > future = pipeline . watchForCommittedSequenceNumber ( NUM_ , BOOL_ ) ; ReplDBMSHeader matchingEvent = future . get ( NUM_ , TimeUnit . SECONDS ) ; assertEquals ( STR_ , NUM_ , matchingEvent . getSeqno ( ) ) ; pipeline . shutdown ( BOOL_ ) ; pipeline . release ( runtime ) ; }", "private static LookupResult findByClassLoading(String name, CompilationUnit compilationUnit, GroovyClassLoader loader) {\n        Class cls;\n        try {\n            // NOTE: it's important to do no lookup against script files\n            // here since th", "private static void packInt(int[] inputArray, int bitSize, int startPosIn,\n      int start, int skip, int countA, byte[] dest) {\n    if(DEBUG_LEV > 30)\n      System.err.println(\"EncodedElement::packInt : Begin\");\n    for(int valI = 0; valI < countA; valI++) {\n      //int input = inputArray[valI];\n      int input = inputArray[valI*(skip+1)+start];\n      int count = bitSize;\n      int startPos = startPosIn+valI*bitSize;\n      int currentByte = startPos/8;\n      int currentOffset = startPos%8;\n      int bitRoom;//how many bits can be placed in current byte\n      int upMask;//to clear upper bits(lower bits auto-cleared by L-shift\n      int downShift;//bits to shift down, isolating top bits of input\n      int upShift;//bits to shift up, packing byte from top.\n      while(count > 0) {\n        //find how many bits can be placed in current byte\n        bitRoom = 8-currentOffset;\n        //get those bits\n        //i.e, take upper 'bitsNeeded' of input, put to lower part of byte.\n        downShift = count-bitRoom;\n        //upMask = uRSHFT(255 ,currentOffset);\n        upMask = (currentOffset >= 32) ? 0: 255>>>currentOffset;\n        upShift = 0;\n        if(downShift < 0) {\n          //upMask = 255 >>> bitRoom-count;\n          upShift = bitRoom - count;\n          //upMask = uRSHFT(255,(currentOffset+upShift));\n          upMask = ((currentOffset+upShift) >= 32) ? 0:255>>>(currentOffset+upShift);\n          downShift = 0;\n        }\n        if(DEBUG_LEV > 30) {\n          System.err.println(\"count:offset:bitRoom:downShift:upShift:\" +\n              count+\":\"+currentOffset+\":\"+bitRoom+\":\"+downShift+\":\"+upShift);\n        }\n        //int currentBits = uRSHFT(input, downShift) & (upMask);\n        int currentBits = (downShift >= 32) ? 0:(input>>>downShift)&upMask;\n        //shift bits back up to match offset\n        //currentBits = lSHFT(currentBits, upShift);\n        currentBits = (upShift >= 32) ? 0:currentBits << upShift;\n\n        //upMask = lSHFT((byte)upMask, upShift);\n        upMask = (upShift >= 32) ? 0:((byte)upMask)<<upShift;\n\n        dest[currentByte] = (byte)(dest[currentByte] & (~upMask));\n        //merge bytes~\n        dest[currentByte] = (byte)(dest[currentByte] | currentBits);\n        //System.out.println(\"new currentByte: \" + dest[currentByte]);\n        count -= bitRoom;\n        currentOffset = 0;\n        currentByte++;\n      }\n    }\n    if(DEBUG_LEV > 30)\n      System.err.println(\"EncodedElement::packInt: End\");\n  }", "public PacketSender ( DatagramSocket socket ) { running = BOOL_ ; this . socket = socket ; }", "public void unregisterSensorManager(boolean resetTranslation) {\n        if (mSensorManager == null || mSensorInterpreter == null) return;\n\n        mSensorManager.unregisterListener(this);\n        mSensorManager = null;\n        mSensorInterpreter.reset();\n\n        if (resetTranslation) {\n            setTranslate(0, 0);\n        }\n    }", "private static String limitErrorMessage(@NotNull String message){\n  int offset=StringUtil.lineColToOffset(message,30,0);\n  if (offset < 0) {\n    offset=message.length();\n  }\n  return message.substring(0,Math.min(offset,1024));\n}\n", "    public boolean performAction(ProcessMobileObjectStateEvent evt) {\n        MobilObject node = (MobilObject) evt.getObjectWithStates();\n        //we want to turn differently depending on which direction we are traveling in.\n        if(node.getLinealVelocity()< 0) {\n            incr.fromAngleNormalAxis(-node.getRotationVelocity() * evt.getTime(), upAxis);\n        } else {\n            incr.fromAngleNormalAxis(node.getRotationVelocity() * evt.getTime(), upAxis);\n        }\n        node.getLocalRotation().fromRotationMatrix(\n                incr.mult(node.getLocalRotation().toRotationMatrix(tempMa),\n                        tempMb));\n        node.getLocalRotation().normalize();\n\n        return true;\n    }\n", "  public void removeNotify(){\n    super.removeNotify();        \n/*    KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(\n        focusHighlighter);  2005/11/10: now it's shared between title bars*/\n    if (target != null){", "public UIComponent createComponent ( ) { UIComponent component = null ; try { Class clazz = Util . loadClass ( className , this ) ; component = ( ( UIComponent ) clazz . newInstance ( ) ) ; } catch ( Exception e ) { Object params [ ] = { className } ; throw new FacesException ( MessageUtils . getExceptionMessageString ( MessageUtils . MISSING_CLASS_ERROR_MESSAGE_ID , params ) ) ; } assert ( component != null ) ; component . setId ( id ) ; return component ; }", "        public void show() {\n            refresh();\n            mujmail.getDisplay().setCurrent( this);\n        }\n", "public Observable<ImageDescription> describeImageAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter) {\n        return describeImageWithServiceResponseAsync(url, describeImageOptionalParameter).map(new Func1<ServiceResponse<ImageDescription>, ImageDescription>() {\n            @Override\n            public ImageDescription call(ServiceResponse<ImageDescription> response) {\n                return response.body();\n            }\n        });\n    }", "protected Elide ( AuditLogger auditLogger , DataStore dataStore , EntityDictionary dictionary , JsonApiMapper mapper , Function < RequestScope , PermissionExecutor > permissionExecutor ) { this ( auditLogger , dataStore , dictionary , mapper , null , Collections . singletonList ( new DefaultFilterDialect ( dictionary ) ) , Collections . singletonList ( new DefaultFilterDialect ( dictionary ) ) , BOOL_ ) ; }", "public boolean isSealed(URL url){\n  if (jar != null) {\n    init();\n  }\n  return url.equals(sealBase);\n}\n", "public static Option[] parseCLArgs(String[] args, Option[] templates) {\n        int i = 0;\n        List<Option> options = new ArrayList<Option>(args.length);\n\n        try {\n            while (i < args.length) {\n                String name = args[i++];\n                Option template = findTemplate(name, templates);\n                StringBuilder values = new StringBuilder();\n\n                if (!Type.LIST.equals(template.getType())) {\n                    for (int j = 0; j < template.getLen(); j++) {\n                        values.append(args[i++]).append(\" \");\n                    }\n                } else if (hasMoreFlags(args, --i, templates)) {\n                    throw new IllegalArgumentException();\n                } else {\n                    for (String arg : Arrays.copyOfRange(args, i, args.length)) {\n                        values.append(arg).append(\" \");\n                    }\n                    template.setValue(values.toString().trim());\n\n                    Option[] result = new Option[options.size() + 1];\n\n                    result = options.toArray(result);\n                    result[result.length - 1] = template;\n                    return result;\n                }\n                template.setValue(values.toString().trim());\n                options.add(template);\n            } // end while\n            return options.toArray(new Option[options.size()]);\n        } catch (Exception e) {\n            throw new IllegalArgumentException(e);\n        }\n    }", "public JList getSectionList (int index)\n    {\n        @SuppressWarnings(\"unchecked\") JList list = (JList)getComponent(index*2+1);\n        return list;\n    }", "public Boolean deleteCustomerReview ( EntityManager em , String customerReviewId ) { Boolean status = BOOL_ ; CustomerReview customerReview = null ; try { if ( ! em . getTransaction ( ) . isActive ( ) ) { em . getTransaction ( ) . begin ( ) ; } customerRe", "public static String getVMStatus(String hostIpPort, String id) throws TargetException {\n\n\t\tif(id.startsWith(\"urn:uuid:\")) id = id.substring(9);\n\t\tString status = null;\n\t\tURL url = null;\n\t\ttry {\n\t\t\tCookieHandler.setDefault(new CookieManager(null, CookiePolicy.ACCEPT_ALL));\n\t\t\turl = new URL(\"http://\" + hostIpPort + \"/compute/\" + id);\n\t\t} catch (MalformedURLException e) {\n\t\t\tthrow new TargetException(e);\n\t\t}\n\n\t\tHttpURLConnection httpURLConnection = null;\n\t\tDataInputStream in = null;\n\t\ttry {\n\t\t\thttpURLConnection = (HttpURLConnection) url.openConnection();\n\t\t\thttpURLConnection.setRequestMethod(\"GET\");\n\t\t\thttpURLConnection.setRequestProperty(\"Accept\", \"application/json\");\n\n\t\t\tin = new DataInputStream(httpURLConnection.getInputStream());\n\t\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n\t\t\tUtils.copyStreamSafely(in, out);\n\n\t\t\t// Parse JSON response to extract VM status\n\t\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\t\tJsonResponse rsp = objectMapper.readValue(out.toString( \"UTF-8\" ), JsonResponse.class);\n\t\t\tstatus = rsp.getState();\n\n\t\t} catch (IOException e) {\n\t\t\tthrow new TargetException(e);\n\n\t\t}  finally {\n\t\t\tUtils.closeQuietly(in);\n\t\t\tif (httpURLConnection != null) {\n\t\t\t\thttpURLConnection.disconnect();\n\t\t\t}\n\t\t}\n\n\t\treturn status;\n\t}", "public Function lookup(Class<?> functionClass,String name,Class<?>... paramTypes){\n  List<Method> functionMethods=new ArrayList<Method>();\n  addFunctionMethods(functionClass,functionMethods);\n  Collections.sort(functionMethods,new PolymorphicComparator());\n  for (  Method fMethod : functionMethods) {\n    FunctionMethod fAnno=fMethod.getAnnotation(FunctionMethod.class);\n    if ((name.equals(fMethod.getName())) || name.equals(fAnno.value())) {\n      if (isCallable(paramTypes,fMethod.getParameterTypes())) {\n        return createFunction(functionClass,fMethod);\n      }\n    }\n  }\n  return null;\n}\n", "\tpublic Object peek() {\n\t\tsynchronized (topLock) {\n\t\t\treturn top == null ? null : top.getObject();\n\t\t}\n\t}\n", "public Matrix3(Matrix3 matrix){\n  if (matrix == null) {\n    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,\"Matrix3\",\"constructor\",\"missingMatrix\"));\n  }\n  System.arraycopy(matrix.m,0,this.m,0,9);\n}\n", "public void println ( String str ) { synchronized ( ToolPrintStream . class ) { String thisMessage = ToolIO . nextMessage + str ; ToolIO . nextMessage = STR_ ; if ( ToolIO . messages . length == ToolIO . length ) { String [ ] newMessages = new String [ NUM_ * ToolIO . messages . length ] ; System . arraycopy ( ToolIO . messages , NUM_ , newMessages , NUM_ , ToolIO . messages . length ) ; ToolIO . messages = newMessages ; } ToolIO . messages [ ToolIO . length ] = thisMessage ; ToolIO . length ++ ; ToolPrintStream . class . notifyAll ( ) ; } }", "private String createString(String f)\r\n    {\r\n        return\r\n            \"srcXInBytes=\"+srcXInBytes+f+\r\n            \"srcY=\"+srcY+f+\r\n            \"srcZ=\"+srcZ+f+\r\n            \"srcLOD=\"+srcLOD+f+\r\n            \"srcMemoryType=\"+CUmemorytype.stringFor(srcMemoryType)+f+\r\n            \"srcHost=\"+srcHost+f+\r\n            \"srcDevice=\"+srcDevice+f+\r\n            \"srcArray=\"+srcArray+f+\r\n            \"srcContext=\"+srcContext+f+\r\n            \"srcPitch=\"+srcPitch+f+\r\n            \"srcHeight=\"+srcHeight+f+\r\n            \"dstXInBytes=\"+dstXInBytes+f+\r\n            \"dstY=\"+dstY+f+\r\n            \"dstZ=\"+dstZ+f+\r\n            \"dstLOD=\"+dstLOD+f+\r\n            \"dstMemoryType=\"+CUmemorytype.stringFor(dstMemoryType)+f+\r\n            \"dstHost=\"+dstHost+f+\r\n            \"dstDevice=\"+dstDevice+f+\r\n            \"dstArray=\"+dstArray+f+\r\n            \"dstContext=\"+dstContext+f+\r\n            \"dstPitch=\"+dstPitch+f+\r\n            \"dstHeight=\"+dstHeight+f+\r\n            \"WidthInBytes=\"+WidthInBytes+f+\r\n            \"Height=\"+Height+f+\r\n            \"Depth=\"+Depth;\r\n    }", "private Set<CCFGNode> handleMethodCallNode(CCFGNode node,Stack<MethodCall> callStack,Set<CCFGNode> handled){\n  CCFGMethodCallNode callNode=(CCFGMethodCallNode)node;\n  updateCallStackForCallNode(callStack,callNode);\n  return filterHandledMapForMethodCallNode(callNode,handled);\n}\n", "    public boolean getRasterOpEnable() {\n\tif (isLiveOrCompiled())\n\t    if (!this.getCapability(ALLOW_RASTER_OP_READ))\n\t\tthrow new CapabilityNotSetException(J3dI18N.getString(\"RenderingAttributes11\"));\n\n\n\treturn ((RenderingAttributesRetained)this.retained).getRasterOpEnable();\n    }\n", "default FieldDeclaration addPrivateField ( String type , String name ) { return addField ( type , name , Modifier . PRIVATE ) ; }", "    public boolean willAcceptSubFeature(Feature newSubFeature) {\n        if (!super.willAcceptSubFeature(newSubFeature)) {\n            return false;\n        }\n\n        // Must be some kind of Exon...\n        return ((newSubFeature instanceof CuratedExon) || \n               (newSubFeature instanceof CuratedCodon));\n    }\n", "private BusinessObjectFormatEntity createBusinessObjectFormatEntity(BusinessObjectFormatCreateRequest request,BusinessObjectDefinitionEntity businessObjectDefinitionEntity,FileTypeEntity fileTypeEntity,Integer businessObjectFormatVersion){\n  BusinessObjectFormatEntity businessObjectFormatEntity=new BusinessObjectFormatEntity();\n  businessObjectFormatEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);\n  businessObjectFormatEntity.setUsage(request.getBusinessObjectFormatUsage());\n  businessObjectFormatEntity.setFileType(fileTypeEntity);\n  businessObjectFormatEntity.setBusinessObjectFormatVersion(businessObjectFormatVersion);\n  businessObjectFormatEntity.setLatestVersion(Boolean.TRUE);\n  businessObjectFormatEntity.setPartitionKey(request.getPartitionKey());\n  businessObjectFormatEntity.setDescription(request.getDescription());\n  if (!CollectionUtils.isEmpty(request.getAttributes())) {\n    List<BusinessObjectFormatAttributeEntity> attributeEntities=new ArrayList<>();\n    businessObjectFormatEntity.setAttributes(attributeEntities);\n    for (    Attribute attribute : request.getAttributes()) {\n      BusinessObjectFormatAttributeEntity attributeEntity=new BusinessObjectFormatAttributeEntity();\n      attributeEntities.add(attributeEntity);\n      attributeEntity.setBusinessObjectFormat(businessObjectFormatEntity);\n      attributeEntity.setName(attribute.getName());\n      attributeEntity.setValue(attribute.getValue());\n    }\n  }\n  businessObjectFormatEntity.setAttributeDefinitions(createAttributeDefinitionEntities(request.getAttributeDefinitions(),businessObjectFormatEntity));\n  populateBusinessObjectFormatSchema(businessObjectFormatEntity,request.getSchema());\n  return businessObjectFormatDao.saveAndRefresh(businessObjectFormatEntity);\n}\n", "private void processJWKRequest(HttpServletResponse response, JwtConfig jwtConfig) throws IOException {\n\n\t\t/*\n\t\t * if (!jwtConfig.isJwkEnabled()) { String errorMsg =\n\t\t * Tr.formatMessage(tc, \"JWK_ENDPOINT_JWK_NOT_ENABLED\", new Object[] {\n\t\t * jwtConfig.getId() }); Tr.error(tc, errorMsg);\n\t\t * response.sendError(HttpServletResponse.SC_BAD_REQUEST, errorMsg);\n\t\t * return; }\n\t\t */\n\n\t\tString signatureAlg = jwtConfig.getSignatureAlgorithm();\n\t\tif (!Constants.SIGNATURE_ALG_RS256.equals(signatureAlg)) {\n\t\t\tString errorMsg = Tr.formatMessage(tc, \"JWK_ENDPOINT_WRONG_ALGORITHM\",\n\t\t\t\t\tnew Object[] { jwtConfig.getId(), signatureAlg, Constants.SIGNATURE_ALG_RS256 });\n\t\t\tTr.error(tc, errorMsg);\n\t\t\tresponse.sendError(HttpServletResponse.SC_BAD_REQUEST, errorMsg);\n\t\t\treturn;\n\t\t}\n\n\t\tString jwkString = jwtConfig.getJwkJsonString();\n\n\t\taddNoCacheHeaders(response);\n\t\tresponse.setStatus(200);\n\n\t\tif (jwkString == null) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tPrintWriter pw = response.getWriter();\n\t\t\tresponse.setHeader(WebConstants.HTTP_HEADER_CONTENT_TYPE, WebConstants.HTTP_CONTENT_TYPE_JSON);\n\t\t\tpw.write(jwkString);\n\t\t\tpw.flush();\n\t\t\tpw.close();\n\t\t} catch (IOException e) {\n\t\t\tif (tc.isDebugEnabled()) {\n\t\t\t\tTr.debug(tc, \"Caught an exception attempting to get the response writer: \" + e.getLocalizedMessage());\n\t\t\t}\n\t\t}\n\t}", "public static int[] randPermuteWithExclusion(int floor,int ceil,int excluded){\n  int[] permute=new int[ceil - floor - 1];\n  Random randi=new Random();\n  int k=floor - 1;\n  for (int i=floor; i < ceil; i++) {\n    if (i == excluded) {\n      continue;\n    }\n else {\n      k++;\n    }\n    int j=randi.nextInt(k - floor + 1);\n    if (j != k - floor) {\n      permute[k - floor]=permute[j];\n    }\n    permute[j]=i;\n  }\n  return permute;\n}\n", "public HTTPTokener ( String string ) { super ( string ) ; }", "public String getTableNames(boolean bAddQuotes)\n    {\n        String strTableNames = super.getTableNames(bAddQuotes);\n        if (strTableNames == null)\n            strTableNames = Constants.BLANK;\n        return strTableNames;\n    }", "public <T, V extends Comparable<T>> V exclusiveBetween(final T start, final T end, final V value) {\n        if (value.compareTo(start) <= 0 || value.compareTo(end) >= 0) {\n            fail(String.format(DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE, value, start, ", "public static void init(@NonNull Application app, @NonNull CoreConfiguration config, boolean checkReportsOnApplicationStart) {\n\n        final boolean senderServiceProcess = isACRASenderServiceProcess();\n        if (senderServiceProcess) {\n            if (ACRA.DEV_LOGGING)\n                log.d(LOG_TAG, \"Not initialising ACRA to listen for uncaught Exceptions as this is the SendWorker process and we only send reports, we don't capture them to avoid infinite loops\");\n        }\n\n        final boolean supportedAndroidVersion = Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH;\n        if (!supportedAndroidVersion) {\n            // NB We keep initialising so that everything is configured. But ACRA is never enabled below.\n            log.w(LOG_TAG, \"ACRA 5.1.0+ requires ICS or greater. ACRA is disabled and will NOT catch crashes or send messages.\");\n        }\n\n        if (isInitialised()) {\n            log.w(LOG_TAG, \"ACRA#init called more than once. This might have unexpected side effects. Doing this outside of tests is discouraged.\");\n            if(DEV_LOGGING) log.d(LOG_TAG, \"Removing old ACRA config...\");\n            ((ErrorReporterImpl) errorReporterSingleton).unregister();\n            errorReporterSingleton = StubCreator.createErrorReporterStub();\n        }\n\n        //noinspection ConstantConditions\n        if (config == null) {\n            log.e(LOG_TAG, \"ACRA#init called but no CoreConfiguration provided\");\n            return;\n        }\n\n        final SharedPreferences prefs = new SharedPreferencesFactory(app, config).create();\n\n        new LegacyFileHandler(app, prefs).updateToCurrentVersionIfNecessary();\n        if (!senderServiceProcess) {\n            // Initialize ErrorReporter with all required data\n            final boolean enableAcra = supportedAndroidVersion && SharedPreferencesFactory.shouldEnableACRA(prefs);\n            // Indicate that ACRA is or is not listening for crashes.\n            log.i(LOG_TAG, \"ACRA is \" + (enableAcra ? \"enabled\" : \"disabled\") + \" for \" + app.getPackageName() + \", initializing...\");\n            ErrorReporterImpl reporter = new ErrorReporterImpl(app, config, enableAcra, supportedAndroidVersion, checkReportsOnApplicationStart);\n            errorReporterSingleton = reporter;\n\n            // register after initAcra is called to avoid a\n            // NPE in ErrorReporter.disable() because\n            // the context could be null at this moment.\n            prefs.registerOnSharedPreferenceChangeListener(reporter);\n        }\n    }", "public static Link filterLinkParams(final Link link, final boolean filter) {\n        // from and until parameters can cause problems with downstream applications because they contain commas. This\n        // method makes it possible to filter out those params, if desired. By default, they are not filtered out.\n        if (filter) {\n            if (TIMEMAP.equals(link.getRel())) {\n                return Link.fromUri(link.getUri()).rel(TIMEMAP).type(APPLICATION_LINK_FORMAT).build();\n            } else if (MEMENTO.equals(link.getRel())) {\n                return Link.fromUri(link.getUri()).rel(MEMENTO).build();\n            }\n        }\n        return link;\n    }", "    private String trimStr(String str, String toTrim) {\n        if (StringUtils.isBlank(toTrim)) {\n            return str;\n        }\n        if (str.startsWith(toTrim)) {\n            str = str.substring(toTrim.length());\n        }\n        if (str.endsWith(toTrim)) {\n            str = str.substring(0, str.indexOf(toTrim));\n        }\n        return str;\n    }\n", "static String createJsniBlock(IJavaProject project,String body,int indentationUnits){\n  StringBuilder sb=new StringBuilder();\n  sb.append(\"/*-{\\n\");\n  sb.append(CodeFormatterUtil.createIndentString(indentationUnits + 1,project));\n  if (body != null) {\n    sb.append(body);\n  }\n  sb.append(\"\\n\");\n  sb.append(CodeFormatterUtil.createIndentString(indentationUnits,project));\n  sb.append(\"}-*/;\\n\");\n  return sb.toString();\n}\n", "protected Expression parseNewInstanceExpression(long p,Expression outerArg,Expression type) throws SyntaxError, IOException {\n  int i=argIndex;\n  expect(LPAREN);\n  if (token != RPAREN) {\n    addArgument(parseExpression());\n    while (token == COMMA) {\n      scan();\n      addArgument(parseExpression());\n    }\n  }\n  expect(RPAREN);\n  ClassDefinition body=null;\n  if (token == LBRACE && !(type instanceof TypeExpression)) {\n    long tp=pos;\n    Identifier superName=FieldExpression.toIdentifier(type);\n    if (superName == null) {\n      env.error(type.getWhere(),\"type.expected\");\n    }\n    Vector ext=new Vector(1);\n    Vector impl=new Vector(0);\n    ext.addElement(new IdentifierToken(idNull));\n    if (token == IMPLEMENTS || token == EXTENDS) {\n      env.error(pos,\"anonymous.extends\");\n      parseInheritance(ext,impl);\n    }\n    body=parseClassBody(new IdentifierToken(tp,idNull),M_ANONYMOUS | M_LOCAL,EXPR,null,ext,impl,type.getWhere());\n  }\n  if (outerArg == null && body == null) {\n    return new NewInstanceExpression(p,type,exprArgs(i));\n  }\n  return new NewInstanceExpression(p,type,exprArgs(i),outerArg,body);\n}\n", "    public State getTheState(FiniteStateAutomaton automaton, State s1, State s2) {\n        State[] states = automaton.getStates();\n        for (State state : states) {\n            if (state.getName().equals(mergeNames(s1.getName(), s2.getName()))) return state;\n        }\n        State newState = automaton.createState(new Point(50, 50), chooseColor(s1, s2));\n        newState.setColor(chooseColor(s1, s2));\n        newState.setName(mergeNames(s1.getName(), s2.getName()));\n        return newState;\n    }\n", "public void autoArrange(final ExecutionUnit process){\n  List<ExecutionUnit> list=new ArrayList<>(1);\n  list.add(0,process);\n  autoArrange(list);\n}\n", "public boolean checkError(){\n  try {\n    out.flush();\n  }\n catch (  IOException e) {\n    hadError=true;\n  }\n  return hadError;\n}\n", "    private void fireLoggingListener(LoggingEvent event) {\n        if(event.cause != null) {\n            event.cause.printStackTrace();\n        }\n        for(Enumeration<LoggingListener> e=loggingListeners.elements(); e.hasMoreElements(); ) {\n            LoggingListener l = e.nextElement();\n            l.loggingPerformed(event);\n        }\n    }\n", "public boolean isContentSettingEnabled(int contentSettingsType){\n  return nativeIsContentSettingEnabled(contentSettingsType);\n}\n", "private boolean same(double d1,double d2,double tolerance){\n  return (Math.abs(d1 - d2) < tolerance);\n}\n", "private static boolean hasAlpha ( Image image ) { if ( image instanceof BufferedImage ) { BufferedImage bimage = ( BufferedImage ) image ; return bimage . getColorModel ( ) . hasAlpha ( ) ; } PixelGrabber pg = new PixelGrabber ( image , NUM_ , NUM_ , NUM_ , NUM_ , BOOL_ ) ; try { pg . grabPixels ( ) ; } catch ( InterruptedException e ) { } ColorModel cm = pg . getColorModel ( ) ; return cm . hasAlpha ( ) ; }", "private byte[] padPlaintext(byte[] plaintext){\n  int plaintextLength=plaintext.length;\n  int numOfZerosToAppend=(8 - (plaintextLength % 8)) % 8;\n  byte[] paddedPlaintext=new byte[plaintextLength + numOfZerosToAppend];\n  System.arraycopy(plaintext,0,paddedPlaintext,0,plaintextLength);\n  if (numOfZerosToAppend != 0) {\n    byte[] zeros=new byte[numOfZerosToAppend];\n    System.arraycopy(zeros,0,paddedPlaintext,plaintextLength,numOfZerosToAppend);\n  }\n  return paddedPlaintext;\n}\n", "boolean canDismiss ( int position ) ;", "    public boolean isColorized() {\n        return(isColorized);\n    }\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "void onMatrixChanged ( RectF rect ) ;", "\tpublic boolean isPersonType() {\n\t\treturn this.personal;\n\t}\n", "public HashMap < String , String > hashMap ( ) { HashMap < String , String > retMap = new HashMap < String , String > ( ) ; for ( String key : properties . keySet ( ) ) { Object value = properties . get ( key ) ; if ( value != null ) { retMap . put ( key ", "@Override synchronized void doClose(){\n  closeAllConnections();\n}\n", "public static Uri formatContactIdToUri(ContactId contactId){\n  if (contactId == null) {\n    throw new IllegalArgumentException(\"ContactId is null\");\n  }\n  if (sRcsSettings.isTelUriFormatUsed()) {\n    return Uri.parse(TEL_URI_HEADER.concat(contactId.toString()));\n  }\n  return Uri.parse(SIP_URI_HEADER + contactId + \"@\"+ sRcsSettings.getUserProfileImsDomain()+ \";user=phone\");\n}\n", "public List<Product> searchFor(final Optional<String> searchTerm) {\n        if (searchTerm.isPresent()) {\n            return products\n                    .stream()\n                    .filter(matchingProductsFor(searchTerm.get()))\n                    .collect(toList());\n        } else {\n            return products;\n        }\n\n    }", "@Override\n\tpublic CommerceSubscriptionEntry fetchByPrimaryKey(Serializable primaryKey) {\n\t\tSerializable serializable = entityCache.getResult(CommerceSubscriptionEntryModelImpl.ENTITY_CACHE_ENABLED,\n\t\t\t\tCommerceSubscriptionEntryImpl.class, primaryKey);\n\n\t\tif (serializable == nullModel) {\n\t\t\treturn null;\n\t\t}\n\n\t\tCommerceSubscriptionEntry commerceSubscriptionEntry = (CommerceSubscriptionEntry)serializable;\n\n\t\tif (commerceSubscriptionEntry == null) {\n\t\t\tSession session = null;\n\n\t\t\ttry {\n\t\t\t\tsession = openSession();\n\n\t\t\t\tcommerceSubscriptionEntry = (CommerceSubscriptionEntry)session.get(CommerceSubscriptionEntryImpl.class,\n\t\t\t\t\t\tprimaryKey);\n\n\t\t\t\tif (commerceSubscriptionEntry != null) {\n\t\t\t\t\tcacheResult(commerceSubscriptionEntry);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tentityCache.putResult(CommerceSubscriptionEntryModelImpl.ENTITY_CACHE_ENABLED,\n\t\t\t\t\t\tCommerceSubscriptionEntryImpl.class, primaryKey,\n\t\t\t\t\t\tnullModel);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tentityCache.removeResult(CommerceSubscriptionEntryModelImpl.ENTITY_CACHE_ENABLED,\n\t\t\t\t\tCommerceSubscriptionEntryImpl.class, primaryKey);\n\n\t\t\t\tthrow processException(e);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tcloseSession(session);\n\t\t\t}\n\t\t}\n\n\t\treturn commerceSubscriptionEntry;\n\t}", "public UIGraphicTestCase ( String name ) { super ( name ) ; }", "public static void sortByValueStable(int start,int end,double[] values,int[] indexes){\n  sortByValue(start,end,values,indexes);\n  for (int i=0; i < values.length - 1; i++) {\n    double tmp=values[i];\n    int len=0;\n    while (i + len + 1 < values.length && tmp == values[i + len + 1])     len++;\n    if (len > 0) {\n      Arrays.sort(indexes,i,i + len + 1);\n      i+=len;\n    }\n  }\n}\n", "public Matrix arrayTimesEquals ( Matrix B ) { checkMatrixDimensions ( B ) ; for ( int i = NUM_ ; i < m ; i ++ ) { for ( int j = NUM_ ; j < n ; j ++ ) { A [ i ] [ j ] = A [ i ] [ j ] * B . A [ i ] [ j ] ; } } return this ; }", "    public void importRtfDocumentIntoElement(Element elem, FileInputStream documentSource) throws IOException, DocumentException {\n    \timportRtfDocumentIntoElement(elem, documentSource, null);\n    }\n", "    public DesktopWindow getWindowOnActiveWS(ProcessID pid, String name) {\n\t\tWorkspace w = wsMgr.getActiveWorkspace();\n\t\tDesktopWindow newWin = new DesktopWindow(null, pid, name);\n        w.addWindow(newWin);\n\t\treturn newWin;\n    }\n", "    public void resetSMJoint() {\n        if (m_targetNode instanceof SkinnedMeshJoint) {\n            ((SkinnedMeshJoint)m_targetNode).reset();\n        }\n    }\n", "public Address toAddress(NetworkParameters params){\n  byte[] hash160=Utils.sha256hash160(pub);\n  return new Address(params,hash160);\n}\n", "public void writeRawBytes(final byte[] value,int offset,int length) throws IOException {\n  if (limit - position >= length) {\n    System.arraycopy(value,offset,buffer,position,length);\n    position+=length;\n    totalBytesWritten+=length;\n  }\n else {\n    final int bytesWritten=limit - position;\n    System.arraycopy(value,offset,buffer,position,bytesWritten);\n    offset+=bytesWritten;\n    length-=bytesWritten;\n    position=limit;\n    totalBytesWritten+=bytesWritten;\n    refreshBuffer();\n    if (length <= limit) {\n      System.arraycopy(value,offset,buffer,0,length);\n      position=length;\n    }\n else {\n      output.write(value,offset,length);\n    }\n    totalBytesWritten+=length;\n  }\n}\n", "private void applyHue(int[] pixels) {\n\t\tfor (int i = 0; i < pixels.length; i++) {\n\t\t\tint argb = pixels[i];\n\n\t\t\tint r = (argb >> 16) & 0xFF;\n\t\t\tint g = (argb >> 8) & 0XFF;\n\t\t\tint b = (argb) & 0XFF;\n\n\t\t\t// using a distance because the calculation of the 32", "public JKAuditType ( final int id , final String name ) { this . auditTypeId = id ; setAuditTypeName ( name ) ; }", "public static byte[] packHeader(byte cmd,long pkg_len,byte errno) throws UnsupportedEncodingException {\n  byte[] header;\n  byte[] hex_len;\n  header=new byte[FDFS_PROTO_PKG_LEN_SIZE + 2];\n  Arrays.fill(header,(byte)0);\n  hex_len=ProtoCommon.long2buff(pkg_len);\n  System.arraycopy(hex_len,0,header,0,hex_len.length);\n  header[PROTO_HEADER_CMD_INDEX]=cmd;\n  header[PROTO_HEADER_STATUS_INDEX]=errno;\n  return header;\n}\n", "\tpublic Status updateStatus(String statusText) throws TwitterException {\n\t\tif (statusText.length() > 160)\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Status text must be 160 characters or less: \"\n\t\t\t\t\t+ statusText.length());\n\t\tMap<String, String> vars = asMap(\"status\", statusText);\n\t\tif (sourceApp != null)\n\t\t\tvars.put(\"source\", sourceApp);\n\t\tString result = post(\"http://twitter.com/statuses/update.json\", vars,\n\t\t\t\ttrue);\n\t\ttry {\n\t\t\treturn new Status(new JSONObject(result), null);\n\t\t} catch (JSONException e) {\n\t\t\tthrow new TwitterException(e);\n\t\t}\n\t}\n", "public static Rollbar init(Context context, ConfigProvider provider) {\n    if (isInit()) {\n      Log.w(TAG, \"Rollbar.init() called when it was already initialized.\");\n    } else {\n      notifier = new Rollbar(context, null, null, true, false, provider);\n    }\n    return notifier;\n  }", "public static String pojoClassToString(final PojoClass pojoClass,final Object instance){\n  return String.format(POJOCLASS_TOSTRING_FORMAT,pojoClass.getName(),Integer.toHexString(System.identityHashCode(instance)),PojoFieldsToString(pojoClass.getPojoFields(),instance));\n}\n", "private void mergeModComps(List<ModifiedCompound> modComps) {\n\t\tTreeSet<Integer> remove = new TreeSet<Integer>();\n\t\tint n = modComps.size();\n\t\tfor (int icurr=1; icurr<n; icurr++) {\n\t\t\tModifiedCompound curr = modComps.get(icurr);\n\n\t\t\tString id = curr.getModification().getId();\n\t\t\tif (ProteinModificationRegistry.getById(id).getCategory()\n\t\t\t\t\t!=ModificationCategory.UNDEFINED)\n\t\t\t\tcontinue;\n\n\t\t\t// find linked compounds that before curr\n\t\t\t//List<Integer> merging = new ArrayList<Integer>();\n\t\t\tint ipre = 0;\n\t\t\tfor (; ipre<icurr; ipre++) {\n\t\t\t\tif (remove.contains(ipre))\tcontinue;\n\t\t\t\tModifiedCompound pre = modComps.get(ipre);\n\t\t\t\tif (!Collections.disjoint(pre.getGroups(false),\n\t\t\t\t\t\tcurr.getGroups(false))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ipre<icurr) {\n\t\t\t\tModifiedCompound mcKeep = modComps.get(ipre);\n\n\t\t\t\t// merge modifications of the same type\n\t\t\t\tif (mcKeep.getModification().getId().equals(id)) {\n\t\t\t\t\t// merging the current one to the previous one\n\t\t\t\t\tmcKeep.addAtomLinkages(curr.getAtomLinkages());\n\t\t\t\t\tremove.add(icurr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tIterator<Integer> it = remove.descendingIterator();\n\t\twhile (it.hasNext()) {\n\t\t\tmodComps.remove(it.next().intValue());\n\t\t}\n\t}", "    public KeySyncCache getKeySyncCache(Object identifier) throws CacheException {\n        checkStatus();\n        synchronized (keySyncCaches) {\n            if (!keySyncCaches.containsKey(identifier)) {\n                keySyncCaches.put(identifier,new Key", "private void validateCorrectProduct ( JsonValue updateConfig , File updateFile ) throws InvalidArchiveUpdateException { if ( ! PRODUCT_NAME . equals ( updateConfig . get ( ORIGIN_PRODUCT ) . asString ( ) ) ) { throw new InvalidArchiveUpdateException ( updateFile . getName ( ) , STR_ + updateFile . getName ( ) + STR_ + updateConfig . get ( ORIGIN_PRODUCT ) . asString ( ) + STR_ + PRODUCT_NAME ) ; } }", "void changedModificationDate ( INaviProject project , Date date ) ;", "\tprivate void setEnableControls(boolean enable) {\n\t\tfor (Field f : getClass().getDeclaredFields()) {\n\t\t\tDisableOnFind a = f.getAnnotation(DisableOnFind.class);\n\t\t\tif (a != null) {\n\t\t\t\ttry {\n\t\t\t\t\tObject o = f.get(this);\n\t\t\t\t\tif (o instanceof Component) {\n\t\t\t\t\t\t((Component)o).setEnabled(enable);\n\t\t\t\t\t}\n\t\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "public boolean hasCreatePermission(@Nonnull Authentication a, @Nonnull ViewGroup c,\n                                       @Nonnull ViewDescriptor d) {\n        return true;\n    }", "final protected void common_addAlias(Object key, Object[] aliasArray) {\n        ValidateUtility.objectNotNull(key, \"key\", aliasArray, \"aliasArray\");\n        cache.addAlias(\n                       key,\n                       aliasArray,\n                       cache.shouldPull(this.sharingPolicy, key),\n                       true);\n    }", "public static String createContainerPresentName(String hostName,String containerName){\n  if (hostName == null)   hostName=\"\";\n else   hostName+=\":\";\n  return hostName + containerName;\n}\n", "private static void writeJson ( ) throws IOException { JsonObject rootObject = new JsonObject ( ) ; rootObject . addProperty ( STR_ , STR_ ) ; JsonObject childObject = new JsonObject ( ) ; childObject . addProperty ( STR_ , STR_ ) ; rootObject . add ( STR", "boolean onError ( MediaPlayer mp , int what , int extra ) ;", "public void addC3Link(Entity e){\n  if (e.getPosition() == null) {\n    return;\n  }\n  if (e.hasC3i()) {\n    for (    Entity fe : game.getEntitiesVector()) {\n      if (fe.getPosition() == null) {\n        return;\n      }\n      if (e.onSameC3NetworkAs(fe) && !fe.equals(e) && !ComputeECM.isAffectedByECM(e,e.getPosition(),fe.getPosition())) {\n        c3Sprites.add(new C3Sprite(this,e,fe));\n      }\n    }\n  }\n else   if (e.hasActiveNovaCEWS()) {\n    for (    Entity fe : game.getEntitiesVector()) {\n      if (fe.getPosition() == null) {\n        return;\n      }\n      ECMInfo ecmInfo=ComputeECM.getECMEffects(e,e.getPosition(),fe.getPosition(),true,null);\n      if (e.onSameC3NetworkAs(fe) && !fe.equals(e) && (ecmInfo != null)&& !ecmInfo.isNovaECM()) {\n        c3Sprites.add(new C3Sprite(this,e,fe));\n      }\n    }\n  }\n else   if (e.getC3Master() != null) {\n    Entity eMaster=e.getC3Master();\n    if (eMaster.getPosition() == null) {\n      return;\n    }\n    boolean blocked=false;\n    if (e.hasBoostedC3() && eMaster.hasBoostedC3()) {\n      blocked=ComputeECM.isAffectedByAngelECM(e,e.getPosition(),eMaster.getPosition()) || ComputeECM.isAffectedByAngelECM(eMaster,eMaster.getPosition(),eMaster.getPosition());\n    }\n else {\n      blocked=ComputeECM.isAffectedByECM(e,e.getPosition(),eMaster.getPosition()) || ComputeECM.isAffectedByECM(eMaster,eMaster.getPosition(),eMaster.getPosition());\n    }\n    if (!blocked) {\n      c3Sprites.add(new C3Sprite(this,e,e.getC3Master()));\n    }\n  }\n}\n", "Job startJobMonitorApp() throws InterruptedException, ExecutionException {\n  Topology topology=dp.newTopology(\"JobMonitorApp\");\n  TStream<JsonObject> jobEvents=JobEvents.source(topology,null);\n  jobEvents.sink(null);\n  Future<Job> f=dp.submit(topology);\n  return f.get();\n}\n", "public Assignment fullModel(final BDD bdd) {\n    final int modelBDD = this.kernel.fullSatOne(bdd.index());\n    return createAssignment(modelBDD);\n  }", "\tpublic void replaceDs(List<Map<String, Object>> dsList) {\n\t\tdefaultValues = new HashMap<String,Double>(0);\n\t\tdsMap = new HashMap<String, DsDesc>(dsList.size());\n\t\tfor(Map<String, Object> dsinfo: dsList) {\n\t\t\tadd(dsinfo);\n\t\t}\n\t}\n", "boolean allowsEdit ( AccountFieldName field ) ;", "    protected void updateUnPublish(UnPublishRecord upr) {\n        return;\n        /*\n        GDNUnPublishRecord gupr;\n        try {\n            gupr = (GDNUnPublishRecord) upr;\n        } catch (ClassCastException e) {\n            throw new IllegalArgumentException(\"pr must be a \"+\n                                               \"GDNUnPublishRecord\");\n        }\n        OperationID opid = gupr.opid;\n        UnPublisher up = gupr.up;\n\n        // other info from up\n\n        // update info in the LAD\n        // callback\n        opMan.getCallback().statusChanged(opid);    \n        */\n    }\n", "void deletedTag ( ITagTreeManager manager , ITreeNode < CTag > parent , ITreeNode < CTag > tag ) ;", "  public void blackMouseClicked (java.awt.event.MouseEvent evt) {\n      setActiveColors(evt, black);\n      currentColor =  black;\n      //center.setColor(black.getBackground());\n  }\n", "protected void createSuperColumnDocument(EntityMetadata metadata, Object object, Document currentDoc,\n        Object embeddedObject, EmbeddableType superColumn, MetamodelImpl metamodel) {\n\n        // Add all super column fields into document\n        Set<Attribute> attributes = superColumn.getAttributes();\n        Iterator<Attribute> iter = attributes.iterator();\n        while (iter.hasNext()) {\n            Attribute attr = iter.next();\n            java.lang.reflect.Field field = (java.lang.reflect.Field) attr.getJavaMember();\n            String colName = field.getName();\n            String indexName = metadata.getIndexName();\n            addFieldToDocument(embeddedObject, currentDoc, field, colName, indexName);\n        }\n\n        // Add all entity fields to document\n        addEntityFieldsToDocument(metadata, object, currentDoc, metamodel);\n\n    }", "    public void visit() throws VisitorException {\n        mCurrentWalker.walk(this);\n    }\n", "private void divide(DBIDArrayIter it,double[] data,ArrayList<DBIDs> idx,int start,int end,int depth,Mean mean){\n  final int count=end - start;\n  if (depth == 0) {\n    if (count > 0) {\n      ModifiableDBIDs out=DBIDUtil.newHashSet(count);\n      it.seek(start);\n      for (int i=count; i > 0; i--, it.advance()) {\n        out.add(it);\n      }\n      idx.add(out);\n    }\n else {\n      idx.add(DBIDUtil.EMPTYDBIDS);\n    }\n    return;\n  }\n else {\n    if (count > 0) {\n      mean.reset();\n      for (int i=start; i < end; i++) {\n        mean.put(data[i]);\n      }\n      final double m=mean.getMean();\n      int pos=Arrays.binarySearch(data,start,end,m);\n      if (pos >= 0) {\n        int opt=(start + end) >> 1;\n        while (Double.compare(data[pos],m) == 0) {\n          if (pos < opt) {\n            pos++;\n          }\n else           if (pos > opt) {\n            pos--;\n          }\n else {\n            break;\n          }\n        }\n      }\n else {\n        pos=(-pos - 1);\n      }\n      divide(it,data,idx,start,pos,depth - 1,mean);\n      divide(it,data,idx,pos,end,depth - 1,mean);\n    }\n else {\n      divide(it,data,idx,start,end,depth - 1,mean);\n      divide(it,data,idx,start,end,depth - 1,mean);\n    }\n  }\n}\n", "public void addNode (int x, int y, int dir)\n    {\n        _nodes.add(new PathNode(x, y, dir));\n    }", "public static ClickHouseException specify(String clickHouseMessage,Throwable cause,String host,int port){\n  if (StringUtils.isEmpty(clickHouseMessage) && cause != null) {\n    if (cause instanceof SocketTimeoutException)     return new ClickHouseException(ClickHouseErrorCode.TIMEOUT_EXCEEDED.code,cause,host,port);\n else     if (cause instanceof ConnectTimeoutException || cause instanceof ConnectException)     return new ClickHouseException(ClickHouseErrorCode.NETWORK_ERROR.code,cause,host,port);\n else     return new ClickHouseUnknownException(cause,host,port);\n  }\n  try {\n    int code;\n    if (clickHouseMessage.startsWith(\"Poco::Exception. Code: 1000, \")) {\n      code=1000;\n    }\n else {\n      code=Integer.parseInt(clickHouseMessage.substring(clickHouseMessage.indexOf(' ') + 1,clickHouseMessage.indexOf(',')));\n    }\n    Throwable messageHolder=cause != null ? cause : new Throwable(clickHouseMessage);\n    return new ClickHouseException(code,messageHolder,host,port);\n  }\n catch (  Exception e) {\n    log.error(\"Unsupported ClickHouse error format, please fix ClickHouseExceptionSpecifier, message: \" + clickHouseMessage + \", error: \"+ e.getMessage());\n    return new ClickHouseUnknownException(clickHouseMessage,cause,host,port);\n  }\n}\n", "public RelayLogClient ( ) { }", "public static byte initializeEntityActivationType ( Entity entity ) { Chunk chunk = null ; if ( entity instanceof EntityMob || entity instanceof EntitySlime || entity . isCreatureType ( EnumCreatureType . monster , BOOL_ ) ) { return NUM_ ; } else if ( entity instanceof EntityCreature || entity instanceof EntityAmbientCreature || entity . isCreatureType ( EnumCreatureType . creature , BOOL_ ) || entity . isCreatureType ( EnumCreatureType . waterCreature , BOOL_ ) || entity . isCreatureType ( EnumCreatureType . ambient , BOOL_ ) ) { return NUM_ ; } else { return NUM_ ; } }", "public synchronized void waitOn() throws InterruptedException\n   {\n      if (tc.isEntryEnabled()) SibTr.entry(tc, \"waitOn\", \"\"+count);\n\n      ++count;\n      if (count > 0)\n      {\n         try\n         {\n            wait();\n         }\n         catch(InterruptedException e)\n         {\n            // No FFDC code needed\n            --count;\n            throw e;\n         }\n      }\n\n    if (tc.isEntryEnabled()) SibTr.exit(tc, \"waitOn\");\n   }", "public synchronized boolean skip ( ReplDBMSEvent event ) throws InterruptedException { return stage . getProgressTracker ( ) . skip ( event ) ; }", "  public void setToolTip(String title, String text) {\n    if (text == null && toolTip == null) {\n      return;\n    }\n    toolTipTitle = title;\n    toolTipText = text;\n    if (rendered) {\n      if (toolTip == null) {\n        toolTip = new ToolTip(this);\n      }\n      toolTip.setText(title, text);\n    }\n\n  }\n", "public void disposeWhenFinished ( ) { synchronized ( mAsyncInProgressLock ) { if ( mAsyncInProgress ) { logDebug ( STR_ ) ; mDisposeAfterAsync = BOOL_ ; } else { try { dispose ( ) ; } catch ( IabAsyncInProgressException e ) { } } } }", "public static ZyLabelContent buildContent ( final INaviTextNode node ) { Preconditions . checkNotNull ( node , STR_ ) ; final ZyLabelContent content = new ZyLabelContent ( null ) ; buildContent ( content , node ) ; return content ; }", "public void tellAll(String[] percepts){\n  for (int i=0; i < percepts.length; i++) {\n    tell(percepts[i]);\n  }\n}\n", "public static boolean wildCardMatch(String text, String pattern, char multiCharacterWildCardChar, boolean caseInsensitive)\n    {\n        if (caseInsensitive)\n        {\n            text = text.toLowerCase();\n            pattern = pattern.toLowerCase();\n        }\n\n        String wildCardString = \"\" + multiCharacterWildCardChar;\n        if (!Character.isLetter(multiCharacterWildCardChar))\n        {\n            wildCardString = \"\\\\\" + wildCardString;\n        }\n        // Create the cards by splitting using a RegEx. If more speed\n        // is desired, a simpler character based splitting can be done.\n        String [] cards = pattern.split(wildCardString);\n\n        // Don't allow anything before the pattern begin unless the pattern begins with '%' - \"abcd\" should not match \"cdef\", but should match \"%cdef\"\n        if ( cards.length != 0 && (pattern.charAt(0) != multiCharacterWildCardChar && text.indexOf(cards[0]) != 0))\n            return false;\n\n        // Iterate over the cards.\n        for (String card : cards)\n        {\n            int idx = text.indexOf(card);\n\n            // Card not detected in the text.\n            if(idx == -1)\n            {\n                return false;\n            }\n\n            // Move ahead, towards the right of the text.\n            text = text.substring(idx + card.length());\n        }\n\n        // Don't allow anything beyond the pattern end unless the pattern and with '%'\n        return !(pattern.charAt(pattern.length() - 1) != multiCharacterWildCardChar && text.length() != 0);\n\n    }", "public SearchSourceBuilder sort(SortBuilder sort){\n  if (sorts == null) {\n    sorts=new ArrayList<>();\n  }\n  sorts.add(sort);\n  return this;\n}\n", "private void computePositionOfEvents(List<EventRect> eventRects){\n  List<List<EventRect>> collisionGroups=new ArrayList<List<EventRect>>();\n  for (  EventRect eventRect : eventRects) {\n    boolean isPlaced=false;\n    outerLoop:     for (    List<EventRect> collisionGroup : collisionGroups) {\n      for (      EventRect groupEvent : collisionGroup) {\n        if (isEventsCollide(groupEvent.event,eventRect.event)) {\n          collisionGroup.add(eventRect);\n          isPlaced=true;\n          break outerLoop;\n        }\n      }\n    }\n    if (!isPlaced) {\n      List<EventRect> newGroup=new ArrayList<EventRect>();\n      newGroup.add(eventRect);\n      collisionGroups.add(newGroup);\n    }\n  }\n  for (  List<EventRect> collisionGroup : collisionGroups) {\n    expandEventsToMaxWidth(collisionGroup);\n  }\n}\n", "public int update ( Database database , Shard shard ) throws SQLException { ArrayList < Column > whereClause = new ArrayList < Column > ( ) ; ArrayList < Column > values = new ArrayList < Column > ( ) ; shardName . setValue ( shard . getShardId ( ) ) ; wh", "\tprivate OutlookMainView getOutlookMainView() {\n\t\tif (_mainview == null) {\n\t\t\t_mainview = OutlookMainView.getInstance(\"Vigil - Olyscript\");\n\t\t}\n\t\treturn _mainview;\n\t}\n", "public void setSteps(java.util.Collection<StepConfig> steps) {\n        if (steps == null) {\n            this.steps = null;\n            return;\n        }\n\n        this.steps = new com.amazonaws.internal.SdkInternalList<StepConfig>(steps);\n    }", "    public void renderGL(GL2 gl) {\n        gl.glCallList(list);\n    }\n", "   protected void addReplacementPatternPropertyDescriptor(Object object) {\n      itemPropertyDescriptors.add\n         (new ItemPropertyDescriptor\n            (((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n             getResourceLocator(),\n             getString(\"_UI_Artefact_replacementPattern_feature\"),\n             getString(\"_UI_PropertyDescriptor_description\", \"_UI_Artefact_replacementPattern_feature\", \"_UI_Artefact_type\"),\n             UmpPackage.eINSTANCE.getArtefact_ReplacementPattern(),\n             true,\n             ItemPropertyDescriptor.GENERIC_VALUE_IMAGE));\n   }\n", "public boolean isReWrittenEntry ( String uid ) { return _reWrittenEntries != null && _reWrittenEntries . containsKey ( uid ) ; }", "public CharSegment getHeaderBuffer(char []testBuf, int length)\n  {\n    char []keyBuf = _headerBuffer;\n    CharSegment []headerKeys = _headerKeys;\n    \n    char []toLowerAscii = _toLowerAscii;\n\n    for (int i = _headerSize - 1; i >= 0; i--) {\n      CharSegment key = headerKeys[i];\n\n      if (key.length() != length)\n        continue;\n\n      int offset = key.offset();\n      int j;\n      \n      for (j = length - 1; j >= 0; j--) {\n        char a = testBuf[j];\n        char b = keyBuf[offset + j];\n        \n        if (a == b) {\n          continue;\n        }\n        else if (toLowerAscii[a] != toLowerAscii[b]) {\n          break;\n        }\n      }\n\n      if (j < 0) {\n        return _headerValues[i];\n      }\n    }\n\n    return null;\n  }", "private static void attemptRetryOnException ( String logPrefix , Request < ? > request , VolleyError exception ) throws VolleyError { RetryPolicy retryPolicy = request . getRetryPolicy ( ) ; int oldTimeout = request . getTimeoutMs ( ) ; try { retryPolicy . retry ( exception ) ; } catch ( VolleyError e ) { request . addMarker ( String . format ( STR_ , logPrefix , oldTimeout ) ) ; throw e ; } request . addMarker ( String . format ( STR_ , logPrefix , oldTimeout ) ) ; }", "\tpublic OkapiFileNotFoundException (Throwable cause) {\n\t\tsuper(cause);\n\t}\n", "public CharSequence format ( ) { if ( pieces . isEmpty ( ) ) { return input ; } String target ; for ( Piece piece : pieces ) { target = BRACE_START + piece . getKey ( ) + BRACE_END ; input = input . replace ( target , String . valueOf ( piece . getValue ( ) ) ) ; } return input ; }", "\tpublic int getMaxEpochNumber() {\n\t\tsynchronized (dataLock) {\n\t\t\treturn epoch2aggregateMap.lastKey();\n\t\t}\n\t}\n", "public boolean mkdirs ( FilePath path ) ;", "private void synchronizeData(ArrayList<Object> folderAndFiles,OwnCloudClient client) throws OperationCancelledException {\n  FileDataStorageManager storageManager=getStorageManager();\n  OCFile remoteFolder=FileStorageUtils.fillOCFile((RemoteFile)folderAndFiles.get(0));\n  remoteFolder.setParentId(mLocalFolder.getParentId());\n  remoteFolder.setFileId(mLocalFolder.getFileId());\n  Log_OC.d(TAG,\"Remote folder \" + mLocalFolder.getRemotePath() + \" changed - starting update of local data \");\n  List<OCFile> updatedFiles=new Vector<OCFile>(folderAndFiles.size() - 1);\n  mFilesForDirectDownload.clear();\n  mFilesToSyncContents.clear();\n  if (mCancellationRequested.get()) {\n    throw new OperationCancelledException();\n  }\n  List<OCFile> localFiles=storageManager.getFolderContent(mLocalFolder,false);\n  Map<String,OCFile> localFilesMap=new HashMap<String,OCFile>(localFiles.size());\n  for (  OCFile file : localFiles) {\n    localFilesMap.put(file.getRemotePath(),file);\n  }\n  OCFile remoteFile=null, localFile=null, updatedFile=null;\n  RemoteFile r;\n  for (int i=1; i < folderAndFiles.size(); i++) {\n    r=(RemoteFile)folderAndFiles.get(i);\n    remoteFile=FileStorageUtils.fillOCFile(r);\n    updatedFile=FileStorageUtils.fillOCFile(r);\n    updatedFile.setParentId(mLocalFolder.getFileId());\n    localFile=localFilesMap.remove(remoteFile.getRemotePath());\n    updatedFile.setLastSyncDateForProperties(mCurrentSyncTime);\n    if (localFile != null) {\n      updatedFile.setFileId(localFile.getFileId());\n      updatedFile.setFavorite(localFile.isFavorite());\n      updatedFile.setLastSyncDateForData(localFile.getLastSyncDateForData());\n      updatedFile.setModificationTimestampAtLastSyncForData(localFile.getModificationTimestampAtLastSyncForData());\n      updatedFile.setStoragePath(localFile.getStoragePath());\n      updatedFile.setEtag(localFile.getEtag());\n      if (updatedFile.isFolder()) {\n        updatedFile.setFileLength(localFile.getFileLength());\n      }\n else       if (mRemoteFolderChanged && remoteFile.isImage() && remoteFile.getModificationTimestamp() != localFile.getModificationTimestamp()) {\n        updatedFile.setNeedsUpdateThumbnail(true);\n        Log.d(TAG,\"Image \" + remoteFile.getFileName() + \" updated on the server\");\n      }\n      updatedFile.setPublicLink(localFile.getPublicLink());\n      updatedFile.setShareViaLink(localFile.isSharedViaLink());\n      updatedFile.setShareWithSharee(localFile.isSharedWithSharee());\n      updatedFile.setEtagInConflict(localFile.getEtagInConflict());\n    }\n else {\n      updatedFile.setEtag(\"\");\n    }\n    searchForLocalFileInDefaultPath(updatedFile);\n    if (remoteFile.isFolder()) {\nsynchronized (mCancellationRequested) {\n        if (mCancellationRequested.get()) {\n          throw new OperationCancelledException();\n        }\n        startSyncFolderOperation(remoteFile.getRemotePath());\n      }\n    }\n else {\n      SynchronizeFileOperation operation=new SynchronizeFileOperation(localFile,remoteFile,mAccount,true,mContext);\n      mFilesToSyncContents.add(operation);\n    }\n    updatedFiles.add(updatedFile);\n  }\n  storageManager.saveFolder(remoteFolder,updatedFiles,localFilesMap.values());\n}\n", "\tpublic String pipeLineString() {\n\t\tString s = new String();\n\t\ts += \"IF:\\t\" + pipe.get(PipeStatus.IF) + \"\\n\";\n\t\ts += \"ID:\\t\" + pipe.get(PipeStatus.ID) + \"\\n\";\n\t\ts += \"EX:\\t\" + pipe.get(PipeStatus.EX) + \"\\n\";\n\t\ts += \"MEM:\\t\" + pipe.get(PipeStatus.MEM) + \"\\n\";\n\t\ts += \"WB:\\t\" + pipe.get(PipeStatus.WB) + \"\\n\";\n\n\t\treturn s;\n\t}\n", "private static void fill(DTSweepContext tcx,AdvancingFrontNode node){\n  DelaunayTriangle triangle=new DelaunayTriangle(node.prev.point,node.point,node.next.point);\n  triangle.markNeighbor(node.prev.triangle);\n  triangle.markNeighbor(node.triangle);\n  tcx.addToList(triangle);\n  node.prev.next=node.next;\n  node.next.prev=node.prev;\n  tcx.removeNode(node);\n  if (!legalize(tcx,triangle)) {\n    tcx.mapTriangleToNodes(triangle);\n  }\n}\n", "\tprivate IProducerEntity getEntityFixture() {\n\t\ttry {\n\t\t\treturn (new Service(Publisher.getName(DDMSVersion.getCurrentVersion()),\n\t\t\t\tUtil.getXsListAsList(\"https://metadata.dod.mil/ebxmlquery/soap\"), Util.getXsListAsList(\"703-882-1000\"),\n\t\t\t\tUtil.getXsListAsList(\"ddms@fgm.com\")));\n\t\t} catch (InvalidDDMSException e) {\n\t\t\tfail(\"Failed to create fixture: \" + e.getMessage());\n\t\t}\n\t\treturn (null);\n\t}\n", "    protected void notifyListeners() {\n        for (int i = 0; i < listeners.size(); i++) {\n            synchronized (this) {\n                ((AreaListener)(listeners.get(i))).setDimensions(content);\n            }\n        }\n    }\n", "public static Vector<String> split(String string, String regex) {\n\t\tVector<String> strings = new Vector<String>();\n\t\tfor (String value : string.split(new String(regex))) {\n\t\t\tvalue = value.trim();\n\t\t\tif (!value.equals(\"\")) {\n\t\t\t\tstrings.add(shrink(value));\n\t\t\t}\n\t\t}\n\t\treturn strings;\n\t}", "public void removePhaseListener(PhaseListener phaseListener)\n    {\n        if (phaseListener == null)\n        {\n            return;\n        }\n\n        getStateHelper().remove(PropertyKeys.phaseListeners, phaseListener);\n    }", "public Observable<Page<ProbeInner>> listAsync(final String resourceGroupName, final String loadBalancerName) {\n        return listWithServiceResponseAsync(resourceGroupName, loadBalancerName)\n            .map(new Func1<ServiceResponse<Page<ProbeInner>>, Page<ProbeInner>>() {\n                @Override\n                public Page<ProbeInner> call(ServiceResponse<Page<ProbeInner>> response) {\n                    return response.body();\n                }\n            });\n    }", "public void updateStreamRecording(UpdateStreamRecordingRequest request) {\n        checkNotNull(request, \"The parameter request should NOT be null.\");\n\n        checkStringNotEmpty(request.getDomain(), \"Domain should NOT be empty.\");\n        checkStringNotEmpty(request.getApp(), \"App should NOT be empty\");\n        checkStringNotEmpty(request.getStream(), \"Stream should NOT be empty.\");\n        // recording can be null for letting stream to use domain's recording,\n        // so no need to check if recording is null\n\n        InternalRequest internalRequest = createRequest(HttpMethodName.PUT, request,\n                LIVE_DOMAIN, request.getDomain(), LIVE_APP, request.getApp(),\n                LIVE_STREAM, request.getStream());\n        internalRequest.addParameter(\"recording\", request.getRecording());\n        invokeHttpClient(internalRequest, AbstractBceResponse.class);\n    }", "@Pure\n\t@SuppressWarnings({\"checkstyle:returncount\", \"npathcomplexity\"})\n\tpublic static Class<?> getOutboxingType(Class<?> type) {\n\t\tif (void.class.equals(type)) {\n\t\t\treturn Void.class;\n\t\t}\n\t\tif (boolean.class.equals(type)) {\n\t\t\treturn Boolean.class;\n\t\t}\n\t\tif (byte.class.equals(type)) {\n\t\t\treturn Byte.class;\n\t\t}\n\t\tif (char.class.equals(type)) {\n\t\t\treturn Character.class;\n\t\t}\n\t\tif (double.class.equals(type)) {\n\t\t\treturn Double.class;\n\t\t}\n\t\tif (float.class.equals(type)) {\n\t\t\treturn Float.class;\n\t\t}\n\t\tif (int.class.equals(type)) {\n\t\t\treturn Integer.class;\n\t\t}\n\t\tif (long.class.equals(type)) {\n\t\t\treturn Long.class;\n\t\t}\n\t\tif (short.class.equals(type)) {\n\t\t\treturn Short.class;\n\t\t}\n\t\treturn type;\n\t}", "public long next(long fromTime){\n  if (getCurrentCount() == 0 || fromTime == 0 || fromTime == startDate.getTime()) {\n    return first();\n  }\n  if (Debug.verboseOn()) {\n    Debug.logVerbose(\"Date List Size: \" + (rDateList == null ? 0 : rDateList.size()),module);\n    Debug.logVerbose(\"Rule List Size: \" + (rRulesList == null ? 0 : rRulesList.size()),module);\n  }\n  if (rDateList == null && rRulesList == null) {\n    return 0;\n  }\n  long nextRuleTime=fromTime;\n  boolean hasNext=true;\n  Iterator<RecurrenceRule> rulesIterator=getRecurrenceRuleIterator();\n  while (rulesIterator.hasNext()) {\n    RecurrenceRule rule=rulesIterator.next();\n    while (hasNext) {\n      nextRuleTime=getNextTime(rule,nextRuleTime);\n      if (nextRuleTime == 0 || isValid(nextRuleTime)) {\n        hasNext=false;\n      }\n    }\n  }\n  return nextRuleTime;\n}\n", "    public void changeXML(final MapDNDTreeHandler tree) {\n        final String methodName = \"changeXML\"; //$NON-NLS-1$\n        final XMLGetter getter = new XMLGetter(parent.getShell(), null, tree, true);\n        final int status = getter.open();\n\n        if (status == Window.OK) {\n            try {\n                final MapTreeNode returned = getter.makeChanges();\n\n                if (!getter.isError()) {\n                    tree.setRoot(returned);\n                    tree.refreshTree();\n                    tree.expandTree(2);\n                }\n            }\n            catch (final Throwable ex) {\n                final String msg = lf.printStackTrace(ex);\n                lf.severe(msg, className, methodName);\n                ControlFactory.showInfoDialog(\"Error changing XML.\", msg); //$NON-NLS-1$\n            }\n        }\n    }\n", "\tpublic void save(ToAssistance entity) {\n\t\tEntityManagerHelper.log(\"saving ToAssistance instance\", Level.INFO, null);\n\t\ttry {\n\t\t\tgetEntityManager().persist(entity);\n\t\t\tEntityManagerHelper.log(\"save successful\", Level.INFO, null);\n\t\t} catch (RuntimeException re) {\n\t\t\tEntityManagerHelper.log(\"save failed\", Level.SEVERE, re);\n\t\t\tthrow re;\n\t\t}\n\t}\n", "@Override public synchronized void close() throws SQLException {\n  if (conn != null) {\n    try {\n      conn.close();\n    }\n  finally {\n      conn=null;\n    }\n  }\n}\n", "protected void writeEntityMetawidget(final Map<Object, Object> context, final int entityMetawidgetIndent,\n            final Map<String, String> existingNamespaces)\n   {\n      StringWriter stringWriter = new StringWriter();\n      this.entityMetawidget.write(stringWriter, entityMetawidgetIndent);\n      context.put(\"metawidget\", stringWriter.toString().trim());\n\n      Map<String, String> namespaces = this.entityMetawidget.getNamespaces();\n      namespaces.keySet().removeAll(existingNamespaces.keySet());\n      context.put(\"metawidgetNamespaces\", namespacesToString(namespaces));\n   }", "public VerticalOverScrollBounceEffectDecorator ( IOverScrollDecoratorAdapter viewAdapter , float touchDragRatioFwd , float touchDragRatioBck , float decelerateFactor ) { super ( viewAdapter , decelerateFactor , touchDragRatioFwd , touchDragRatioBck ) ; }", "@Pure\n\t@Inline(value=\"($1 ^ $2)\", constantExpression=true)\n\tpublic static int bitwiseXor(int a, int b) {\n\t\treturn a ^ b;\n\t}", "void cleanup ( ) ;", "\tpublic void changeSequencer(int pid,int seq, int newsequencer){\n\t\tListIterator<MessageNode> li= mainList.listIterator(0);\n\t\t\n\t\twhile(li.hasNext()){\n\t\t\tTotalHybridHeader header=li.next().getHeader();\n\t\t\tif(header.getSource()==pid && header.getSequence()==seq)\n\t\t\t\theader.setSequencer(newsequencer);\n\t\t}\n\t}\n", "protected void setClosed()\n   {\n      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(this, tc, \"setClosed\");\n      closed = true;\n      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc, \"setClosed\");\n   }", "private IdSearchResults searchIdentity(IdType idType,String userTokenID,boolean populate) throws IdRepoException, SSOException {\n  if (DEBUG.messageEnabled()) {\n    DEBUG.message(\"In searchAutehnticatedUser: idType \" + idType);\n    DEBUG.message(\"In getUserProfile : Search for user \" + userTokenID);\n  }\n  IdSearchResults searchResults=null;\n  Set returnSet=mergeSet(aliasAttrNames,USER_ATTRIBUTES);\n  int maxResults=2;\n  int maxTime=0;\n  String pattern;\n  Map avPairs;\n  boolean isRecursive=true;\n  IdSearchControl idsc=new IdSearchControl();\n  idsc.setRecursive(isRecursive);\n  idsc.setTimeOut(maxTime);\n  if (populate) {\n    idsc.setAllReturnAttributes(true);\n  }\n else {\n    idsc.setReturnAttributes(returnSet);\n  }\n  if (DEBUG.messageEnabled()) {\n    DEBUG.message(\"alias attr=\" + aliasAttrNames + \", attr=\"+ USER_ATTRIBUTES+ \",merge=\"+ returnSet);\n  }\n  if (DEBUG.messageEnabled()) {\n    DEBUG.message(\"Search for Identity \" + userTokenID);\n  }\n  Set result=Collections.EMPTY_SET;\n  try {\n    idsc.setMaxResults(0);\n    searchResults=amIdRepo.searchIdentities(idType,userTokenID,idsc);\n    if (searchResults != null) {\n      result=searchResults.getSearchResults();\n    }\n  }\n catch (  SSOException sso) {\n    if (DEBUG.messageEnabled()) {\n      DEBUG.message(\"SSOException Error searching Identity \" + \" with username \" + sso.getMessage());\n    }\n  }\ncatch (  IdRepoException e) {\n    if (DEBUG.messageEnabled()) {\n      DEBUG.message(\"IdRepoException : Error searching \" + \" Identities with username : \" + e.getMessage());\n    }\n  }\n  if (result.isEmpty() && (aliasAttrNames != null) && (!aliasAttrNames.isEmpty())) {\n    if (DEBUG.messageEnabled()) {\n      DEBUG.message(\"No identity found, try Alias attrname.\");\n    }\n    pattern=\"*\";\n    avPairs=toAvPairMap(aliasAttrNames,userTokenID);\n    if (DEBUG.messageEnabled()) {\n      DEBUG.message(\"Search for Filter (avPairs) :\" + avPairs);\n      DEBUG.message(\"userTokenID : \" + userTokenID);\n      DEBUG.message(\"userDN : \" + userDN);\n      DEBUG.message(\"idType :\" + idType);\n      DEBUG.message(\"pattern :\" + pattern);\n      DEBUG.message(\"isRecursive :\" + isRecursive);\n      DEBUG.message(\"maxResults :\" + maxResults);\n      DEBUG.message(\"maxTime :\" + maxTime);\n      DEBUG.message(\"returnSet :\" + returnSet);\n    }\n    Set resultAlias=Collections.EMPTY_SET;\n    try {\n      idsc.setMaxResults(maxResults);\n      idsc.setSearchModifiers(IdSearchOpModifier.OR,avPairs);\n      searchResults=amIdRepo.searchIdentities(idType,pattern,idsc);\n      if (searchResults != null) {\n        resultAlias=searchResults.getSearchResults();\n      }\n      if ((resultAlias.isEmpty()) && (userDN != null) && (!userDN.equalsIgnoreCase(userTokenID))) {\n        avPairs=toAvPairMap(aliasAttrNames,userDN);\n        if (DEBUG.messageEnabled()) {\n          DEBUG.message(\"Search for Filter (avPairs) \" + \"with userDN : \" + avPairs);\n        }\n        idsc.setMaxResults(maxResults);\n        idsc.setSearchModifiers(IdSearchOpModifier.OR,avPairs);\n        searchResults=amIdRepo.searchIdentities(idType,pattern,idsc);\n      }\n    }\n catch (    SSOException sso) {\n      if (DEBUG.messageEnabled()) {\n        DEBUG.message(\"SSOException : Error searching \" + \"Identities with aliasattrname : \" + sso.getMessage());\n      }\n    }\ncatch (    IdRepoException e) {\n      if (DEBUG.messageEnabled()) {\n        DEBUG.message(\"IdRepoException : Error searching \" + \"Identities : \" + e.getMessage());\n      }\n    }\n  }\n  return searchResults;\n}\n", "private void openLogFile ( ) throws IOException { try { close ( ) ; } catch ( IOException e ) { } logName = versionName ( logfilePrefix ) ; log = new RandomAccessFile ( logName , STR_ ) ; logFD = log . getFD ( ) ; if ( logBytes == NUM_ ) { format = FORMAT", "public StunException ( Throwable cause ) { super ( cause ) ; }", "private void deliverOnAirUpdate(Set<Integer> audibleChannels) {\n        for (final OnAirListener listener : getOnAirListeners()) {\n            try {\n                listener.channelsOnAir(audibleChannels);\n            } catch (Throwable t) {\n                logger.warn(\"Problem delivering channels on-air update to listener\", t);\n            }\n        }\n    }", "public void changeCurrentItem(int indexToChange){\n  if (indexToChange < 0 || indexToChange > spaceItems.size())   throw new ArrayIndexOutOfBoundsException(\"Please be more careful, we do't have such item : \" + indexToChange);\n else {\n    updateSpaceItems(i", "public SelectSameAction ( DrawingEditor editor ) { super ( editor ) ; ResourceBundleUtil labels = ResourceBundleUtil . getBundle ( STR_ ) ; labels . configureAction ( this , ID ) ; updateEnabledState ( ) ; }", "    public String getRelativePath() {\n        if (sf == null) {\n            return \"\";\n        }\n        return sf.getRelativePath();\n    }\n", "    public void selectMainEditor() {\n        if (multiviewTC == null) {\n            //open the component first, if necessary\n            multiviewTC = (CloneableTopComponent) createPane(false);\n        }\n        MultiViewHandler handler = MultiViews.findMultiViewHandler(multiviewTC);\n        if (handler != null && handler.getSelectedPerspective() != handler.getPerspectives()[MAPPING_ELEMENT_INDEX]) {\n            handler.requestActive(handler.getPerspectives()[MAPPING_ELEMENT_INDEX]);\n        }\n    }\n", "boolean insertRadioItemAt ( int index , int command_id , String label , int group_id ) ;", "@HLEFunction(nid=0x4B1B5E82,version=150) public int sceRtcCheckValid(ScePspDateTime time){\n  Calendar cal=new GregorianCalendar(time.year,time.month - 1,time.day,time.hour,time.minute,time.second);\n  int result=0;\n  if (time.year < 1582 || time.year > 3000) {\n    result=PSP_TIME_INVALID_YEAR;\n  }\n else   if (time.month < 1 || time.month > 12) {\n    result=PSP_TIME_INVALID_MONTH;\n  }\n else   if (time.day < 1 || time.day > 31) {\n    result=PSP_TIME_INVALID_DAY;\n  }\n else   if (time.hour < 0 || time.hour > 23) {\n    result=PSP_TIME_INVALID_HOUR;\n  }\n else   if (time.minute < 0 || time.minute > 59) {\n    result=PSP_TIME_INVALID_MINUTES;\n  }\n else   if (time.second < 0 || time.second > 59) {\n    result=PSP_TIME_INVALID_SECONDS;\n  }\n else   if (time.microsecond < 0 || time.microsecond >= 1000000) {\n    result=PSP_TIME_INVALID_MICROSECONDS;\n  }\n else   if (cal.get(Calendar.DAY_OF_MONTH) != time.day) {\n    result=PSP_TIME_INVALID_DAY;\n  }\n  if (log.isDebugEnabled()) {\n    log.debug(String.format(\"sceRtcCheckValid time=%s, cal=%s, returning 0x%08X\",time,cal,result));\n  }\n  return result;\n}\n", "public static ManagedObjectReference[] createMORs(ManagedObject[] mos) {\n        if (mos == null) {\n            throw new IllegalArgumentException();\n        }\n        ManagedObjectReference[] mors = new ManagedObjectReference[mos.length];\n        for (int i = 0; i < mos.length; i++) {\n            mors[i] = mos[i].getMOR();\n        }\n        return mors;\n    }", "public static List<String> stringIds(Collection<? extends DataObjectRestRep> values){\n  List<String> ids=new ArrayList<String>();\n  if (values != null) {\n    for (    DataObjectRestRep value : values) {\n      ids.add(stringId(value));\n    }\n  }\n  return ids;\n}\n", "public boolean isStatic ( ) { return static_ ; }", "void deleteDeployKeys ( int projectId ) ;", "public static void writeInt(int num, DataOutput out) throws IOException {\n        if(num == 0) {\n            out.write(0);\n            return;\n        }\n        final byte bytes_needed=bytesRequiredFor(num);\n        out.write(bytes_needed);\n        for(int i=0; i < bytes_needed; i++)\n            out.write(getByteAt(num, i));\n    }", "@Override\n    public void supplierChanged(SupplierEvent supplierEvent) {\n        SupplierEvent.Type type = supplierEvent.type();\n        @SuppressWarnings(\"unchecked\")\n        Supplier<T> supplier = (Supplier<T>) supplierEvent.supplier();\n        switch (type) {\n            case ADD:\n                if (supplierReference.compareAndSet(null, supplier)) {\n                    supplierFutureRef.get().complete(supplier);\n                }\n                break;\n            case REMOVE:\n                if (supplierReference.compareAndSet(supplier, null)) {\n                    supplierFutureRef.set(new CompletableFuture<>());\n                }\n                break;\n            default:\n                throw new IllegalStateException(\"Unknown supplier event: \" + supplierEvent);\n        }\n    }", "public static void toggleAutomaticLayouting ( final ZyGraph graph ) { Preconditions . checkNotNull ( graph , STR_ ) ; graph . getSettings ( ) . getLayoutSettings ( ) . setAutomaticLayouting ( ! graph . getSettings ( ) . getLayoutSettings ( ) . getAutomati", "public void init(boolean encrypting,CipherParameters params) throws IllegalArgumentException {\n  boolean oldEncrypting=this.encrypting;\n  this.encrypting=encrypting;\n  if (params instanceof ParametersWithIV) {\n    ParametersWithIV ivParam=(ParametersWithIV)params;\n    byte[] iv=ivParam.getIV();\n    if (iv.length != blockSize) {\n      throw new IllegalArgumentException(\"initialisation vector must be the same length as block size\");\n    }\n    System.arraycopy(iv,0,IV,0,iv.length);\n    reset();\n    if (ivParam.getParameters() != null) {\n      cipher.init(encrypting,ivParam.getParameters());\n    }\n else     if (oldEncrypting != encrypting) {\n      throw new IllegalArgumentException(\"cannot change encrypting state without providing key.\");\n    }\n  }\n else {\n    reset();\n    if (params != null) {\n      cipher.init(encrypting,params);\n    }\n else     if (oldEncrypting != encrypting) {\n      throw new IllegalArgumentException(\"cannot change encrypting state without providing key.\");\n    }\n  }\n}\n", "   public R visit(RectifiedIntegerTerm n) {\n      R _ret=null;\n      n.rectifiedIntegerFactor.accept(this);\n      n.nodeListOptional.accept(this);\n      return _ret;\n   }\n", "public final SgClass get(final String className) {\r\n        if (className == null) {\r\n            throw new IllegalArgumentException(\"The argument 'className' cannot be null!\");\r\n        }\r\n        return cache.get(className);\r\n    }", "\tprivate void initParams() {\n\t\t// Set the background color\n\t\tglContext.clearColor(0.2f, 0.2f, 0.2f, 1.0f);\n\t\t// Set the clear depth (everything is cleared)\n\t\tglContext.clearDepth(1.0f);\n\n\t\t// Activate depth test and set the depth function\n\t\tglContext.enable(WebGLRenderingContext.DEPTH_TEST);\n\t\tglContext.depthFunc(WebGLRenderingContext.LEQUAL);\n\t}\n", "    public void updateInsideTransaction(Role instance, Session openSession) {\n        log.debug(\"update Role instance\");\n        try {\n            openSession.update(instance);\n            log.error(\"save or update successfull\");\n        } catch (RuntimeException re) {\n            log.error(\"save or update failed\");\n            throw re;\n        }\n    }\n", "private PDFObject findResource(String name,String inDict) throws IOException {\n  if (inDict != null) {\n    PDFObject in=resources.get(inDict);\n    if (in == null || in.getType() != PDFObject.DICTIONARY) {\n      throw new PDFParseException(\"No dictionary called \" + inDict + \" found in the resources\");\n    }\n    return in.getDictRef(name);\n  }\n else {\n    return resources.get(name);\n  }\n}\n", "private static void removeMarginTopOfContentChild(View mContentChild,int statusBarHeight){\n  if (mContentChild == null) {\n    return;\n  }\n  if (TAG_MARGIN_ADDED.equals(mContentChild.getTag())) {\n    FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mContentChild.getLayoutParams();\n    lp.topMargin-=statusBarHeight;\n    mContentChild.setLayoutParams(lp);\n    mContentChild.setTag(null);\n  }\n}\n", "public void newProject ( ) { getProjectUIFacade ( ) . createProject ( getProject ( ) ) ; fireProjectCreated ( ) ; }", "private void synchronizeDebugger ( final IDebugger oldDebugger , final IDebugger newDebugger ) { if ( oldDebugger != null ) { oldDebugger . getProcessManager ( ) . removeListener ( m_internalProcessListener ) ; } if ( newDebugger != null ) { final TargetInformation targetInformation = newDebugger . getProcessManager ( ) . getTargetInformation ( ) ; if ( targetInformation != null ) { updateGuiFromOptions ( targetInformation . getDebuggerOptions ( ) ) ; } newDebugger . getProcessManager ( ) . addListener ( m_internalProcessListener ) ; } updateGui ( ) ; }", "void deletedModule ( Database database , Module module ) ;", "public static < A , S > List < A > unfold_ ( S z , Function < S , Result < Tuple < A , S > > > f ) { return f . apply ( z ) . map ( null ) . getOrElse ( list ( ) ) ; }", "public RemoveBreakpointsCommand(final int packetId,final Set<RelocatedAddress> addresses,final BreakpointType type){\n  super(getCommandForType(type),packetId);\n  Preconditions.checkNotNull(addresses,\"IE00824: Address argument can not be null\");\n  addArgument(new DebugMessageIntegerArgument(addresses.size()));\n  for (  final RelocatedAddress address : addresses) {\n    addArgument(new DebugMessageAddressArgument(address.getAddress()));\n  }\n}\n", "protected void writeNewLine(int indentation) throws XMLStreamException {\n        final int newLineLength = getNewLine().length();\n        final int prefixLength = newLineLength + (getIndent().length() * indentation);\n        if (prefixLength > 0) {\n            if (linePrefix == null) {\n                linePrefix = (getNewLine() + getIndent()).toCharArray();\n            }\n            while (prefixLength > linePrefix.length) {\n                // make linePrefix longer:\n                char[] newPrefix = new char[newLineLength\n                        + ((linePrefix.length - newLineLength) * 2)];\n                System.arraycopy(linePrefix, 0, newPrefix, 0, linePrefix.length);\n                System.arraycopy(linePrefix, newLineLength, newPrefix, linePrefix.length,\n                        linePrefix.length - newLineLength);\n                linePrefix = newPrefix;\n            }\n            out.writeCharacters(linePrefix, 0, prefixLength);\n        }\n    }", "public Observable<ServiceResponse<Page<RemoteLoginInformationInner>>> listRemoteLoginInformationNextWithServiceResponseAsync(final String nextPageLink) {\n        return listRemoteLoginInformationNextSinglePageAsync(nextPageLink)\n            .concatMap(new Func1<ServiceResponse<Page<RemoteLoginInformationInner>>, Observable<ServiceResponse<Page<RemoteLoginInformationInner>>>>() {\n                @Override\n                public Observable<ServiceResponse<Page<RemoteLoginInformationInner>>> call(ServiceResponse<Page<RemoteLoginInformationInner>> page) {\n                    String nextPageLink = page.body().nextPageLink();\n                    if (nextPageLink == null) {\n                        return Observable.just(page);\n                    }\n                    return Observable.just(page).concatWith(listRemoteLoginInformationNextWithServiceResponseAsync(nextPageLink));\n                }\n            });\n    }", "@Override public void close() throws IOException {\n  if (!closed) {\n    inf.end();\n    closed=true;\n    eof=true;\n    super.close();\n  }\n}\n", "    protected void cleanUp() throws IOException {\n        addedDirs.clear();\n        addedFiles.removeAllElements();\n        entries.clear();\n        addingNewFiles = false;\n        doUpdate = false;\n\n    }\n", "\tpublic void updateZDepth() {\n\t\tMatrix4f transformation = Camera.getTransformation();\n\t\ttransformation.translate(getPosition());\n\n\t\tzDepth = transformation.m32;\n\t}\n", "public static double dotProduct ( double [ ] v , double [ ] u ) throws Exception { if ( v . length != u . length ) { throw new Exception ( STR_ + v . length + STR_ + u . length ) ; } double result = NUM_ ; for ( int r = NUM_ ; r < v . length ; r ++ ) { re", "public boolean hits ( Span s ) { return start < s . getEnd ( ) && s . getStart ( ) < end ; }", "\t\t\t\t\t\tpublic void run(){\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tlistenerDispatcher = new ListenerStore(RiftApplet.this.propGrid);\n\t\t\t\t\t\t\t\t\tlistenerDispatcher.build(RiftApplet.this,confApplet);\n\t\t\t\t\t\t\t\t} catch (RiftException e) {\n\t\t\t\t\t\t\t\t\tLog.error(\"Fail to load the listener , \"+ e.getMessage(),e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tshowStatus(\"Applet loaded\");\n\t\t\t\t\t\t}\n", "@SuppressWarnings(\"unchecked\") public static <R>R callStaticMethod(Class<?> clazz,String methodName,ClassParameter<?>... classParameters){\n  try {\n    Class<?>[] classes=ClassParameter.getClasses(classParameters);\n    Object[] values=ClassParameter.getValues(classParameters);\n    Method method=clazz.getDeclaredMethod(methodName,classes);\n    method.setAccessible(true);\n    return (R)method.invoke(null,values);\n  }\n catch (  InvocationTargetException e) {\n    if (e.getTargetException() instanceof RuntimeException) {\n      throw (RuntimeException)e.getTargetException();\n    }\n    if (e.getTargetException() instanceof Error) {\n      throw (Error)e.getTargetException();\n    }\n    throw new RuntimeException(e.getTargetException());\n  }\ncatch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n", "    public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {\n\nif (\"SecurityServices\".equals(portName)) {\n            setSecurityServicesEndpointAddress(address);\n        }\n        else\n{ // Unknown Port Name\n            throw new javax.xml.rpc.ServiceException(\" Cannot set Endpoint Address for Unknown Port\" + portName);\n        }\n    }\n", "public Future<UpdateTableResult> updateTableAsync(final UpdateTableRequest updateTableRequest) \n            throws AmazonServiceException, AmazonClientException {\n        return executorService.submit(new Callable<UpdateTableResult>() {\n            public UpdateTableResult call() throws Exception {\n                return updateTable(updateTableRequest);\n\t\t    }\n\t\t});\n    }", "boolean isTerminated ( ) ;", "public static double computeTauAndDivideCol( final int blockLength ,\n                                                 final DSubmatrixD1 Y ,\n                                                 final int col , final double max ) {\n        final int width = Math.min(blockLength,Y.col1-Y.col0);\n\n        final double dataY[] = Y.original.data;\n\n        double top=0;\n        double norm2 = 0;\n\n        for( int i = Y.row0; i < Y.row1; i += blockLength ) {\n            int height = Math.min( blockLength , Y.row1 - i );\n\n            int index = i*Y.original.numCols + height*Y.col0 + col;\n\n            if( i == Y.row0 ) {\n                index += width*col;\n                // save this value so that the sign can be determined later on\n                top = dataY[index] /= max;\n                norm2 += top*top;\n                index += width;\n\n                for( int k = col+1; k < height; k++ , index += width ) {\n                    double val = dataY[index] /= max;\n                    norm2 += val*val;\n                }\n            } else {\n                for( int k = 0; k < height; k++ , index += width ) {\n                    double val = dataY[index] /= max;\n                    norm2 += val*val;\n                }\n            }\n        }\n\n        norm2 = Math.sqrt(norm2);\n\n        if( top < 0 )\n            norm2 = -norm2;\n\n        return norm2;\n    }", "public void testIterate ( ) { Iterator iter = range . iterator ( ) ; assertEquals ( FROM , iter . next ( ) ) ; for ( char expected = ( char ) ( FROM . charValue ( ) + NUM_ ) ; expected <= TO . charValue ( ) ; expected ++ ) { assertEquals ( expected , ( ( ", "public static FieldAnnotation convertFieldAnnotation ( ClassNameRewriter classNameRewriter , FieldAnnotation annotation ) { if ( classNameRewriter != IdentityClassNameRewriter . instance ( ) ) { annotation = new FieldAnnotation ( classNameRewriter . rewriteClassName ( annotation . getClassName ( ) ) , annotation . getFieldName ( ) , rewriteSignature ( classNameRewriter , annotation . getFieldSignature ( ) ) , annotation . isStatic ( ) ) ; } return annotation ; }", "    protected View createSnapshotView(View raw) throws BuildException {\n\n        int labelID = getLabelID(raw);\n\n        // if a label has been supplied and it is a view label, use it\n        // to configure the view\n        if (this.isUsingViewLabel()) {\n            return new View(raw, ViewConfiguration.createFromLabel(labelID));\n        }\n        // if a label has been supplied and it is a revision label, use the raw\n        // the view as the snapshot\n        else if (this.isUsingRevisionLabel()) {\n            return raw;\n        }\n        // otherwise, use this view configured as the tip.\n        else {\n            return new View(raw, ViewConfiguration.createTip());\n        }\n    }\n", "  public Point getXY(Point2D point) {\n    double x1 = point.getX() + cellSize / 2;\n    int x = (int)Math.floor(x1 / cellSize);\n    double y1 = point.getY() + cellSize / 2;\n    int y = (int)Math.floor(y1 / cellSize);\n    if (x < 0 || x > cols - 1) return null;\n    if (y < 0 || y > rows - 1) return null;\n    return new Point(x, y);\n  }\n", "\tpublic void addColumn(String column){\n\t\tcolumns += \", \" + column;\n\t\tcolumnCount++;\n\t} //}}}\n\n\t//{{{ getDirection()\n", "public static String formatMillis ( int millis ) { String result = STR_ ; int hr = millis / NUM_ ; millis %= NUM_ ; int min = millis / NUM_ ; millis %= NUM_ ; int sec = millis / NUM_ ; if ( hr > NUM_ ) { result += hr + STR_ ; } if ( min >= NUM_ ) { if ( m", "public static void main(String[] args) {\n\t\tBasicConfigurator.configure(new ConsoleAppender(\n\t\t\tnew PatternLayout(\"%d [%-25t] %-5p: %m%n\")));\n\n\t\tCmdLineParser parser = new CmdLineParser();\n\t\tCmdLineParser.Option help = parser.addBooleanOption('h', \"help\");\n\t\tCmdLineParser.Option port = parser.addIntegerOption('p', \"port\");\n\n\t\ttry {\n\t\t\tparser.parse(args);\n\t\t} catch (CmdLineParser.OptionException oe) {\n\t\t\tSystem.err.println(oe.getMessage());\n\t\t\tusage(System.err);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\t// Display help and exit if requested\n\t\tif (Boolean.TRUE.equals((Boolean)parser.getOptionValue(help))) {\n\t\t\tusage(System.out);\n\t\t\tSystem.exit(0);\n\t\t}\n\n\t\tInteger portValue = (Integer)parser.getOptionValue(port,\n\t\t\tInteger.valueOf(Tracker.DEFAULT_TRACKER_PORT));\n\n\t\tString[] otherArgs = parser.getRemainingArgs();\n\n\t\tif (otherArgs.length > 1) {\n\t\t\tusage(System.err);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\t// Get directory from command-line argument or default to current\n\t\t// directory\n\t\tString directory = otherArgs.length > 0\n\t\t\t? otherArgs[0]\n\t\t\t: \".\";\n\n\t\tFilenameFilter filter = new FilenameFilter() {\n\t\t\t@Override\n\t\t\tpublic boolean accept(File dir, String name) {\n\t\t\t\treturn name.endsWith(\".torrent\");\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\tTracker t = new Tracker(portValue);\n\n\t\t\tFile parent = new File(directory);\n\t\t\tfor (File f : parent.listFiles(filter)) {\n\t\t\t\tlogger.info(\"Loading torrent from \" + f.getName());\n\t\t\t\tt.announce(TrackedTorrent.load(f));\n\t\t\t}\n\n\t\t\tlogger.info(\"Starting tracker with {} announced torrents...\",\n\t\t\t\tt.getTrackedTorrents().size());\n\t\t\tt.start(true);\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"{}\", e.getMessage(), e);\n\t\t\tSystem.exit(2);\n\t\t}\n\t}", "public static MPEGFrameHeader parseMPEGHeader(ByteBuffer bb) throws InvalidAudioFrameException {\n  int position=bb.position();\n  bb.get(header,0,HEADER_SIZE);\n  bb.position(position);\n  MPEGFrameHeader frameHeader=new MPEGFrameHeader(header);\n  return frameHeader;\n}\n", "public static String simpleName (Type type)\n    {\n        if (type instanceof GenericArrayType) {\n            return simpleName(((GenericArrayType)type).getGenericComponentType()) + \"[]\";\n        } else if (type instanceof Class<?>) {\n            Class<?> clazz = (Class<?>)type;\n            if (clazz.isArray()) {\n                return simpleName(clazz.getComponentType()) + \"[]\";\n            } else {\n                Package pkg = clazz.getPackage();\n                int offset = (pkg == null) ? 0 : pkg.getName().length()+1;\n                return clazz.getName().substring(offset).replace('$', '.');\n            }\n\n        } else if (type instanceof ParameterizedType) {\n            ParameterizedType pt = (ParameterizedType)type;\n            StringBuilder buf = new StringBuilder();\n            for (Type arg : pt.getActualTypeArguments()) {\n                if (buf.length() > 0) {\n                    buf.append(\", \");\n                }\n                buf.append(simpleName(arg));\n            }\n            return simpleName(pt.getRawType()) + \"<\" + buf + \">\";\n\n        } else if (type instanceof WildcardType) {\n            WildcardType wt = (WildcardType)type;\n            if (wt.getLowerBounds().length > 0) {\n                String errmsg = \"Generation of simple name for wildcard type with lower bounds \" +\n                    \"not implemented [type=\" + type +\n                    \", lbounds=\" + StringUtil.toString(wt.getLowerBounds()) + \"]\";\n                throw new IllegalArgumentException(errmsg);\n            }\n            if (wt.getUpperBounds().length > 1) {\n                String errmsg = \"Generation of simple name for wildcard type with multiple upper \" +\n                    \"bounds not implemented [type=\" + type +\n                    \", ubounds=\" + StringUtil.toString(wt.getUpperBounds()) + \"]\";\n                throw new IllegalArgumentException(errmsg);\n            }\n            StringBuilder buf = new StringBuilder(\"?\");\n            if (!Object.class.equals(wt.getUpperBounds()[0])) {\n                buf.append(\" extends \").append(simpleName(wt.getUpperBounds()[0]));\n            }\n            return buf.toString();\n\n        } else if (type instanceof TypeVariable) {\n            return ((TypeVariable<?>)type).getName();\n\n        } else {\n            throw new IllegalArgumentException(\"Can't generate simple name [type=\" + type +\n                                               \", tclass=\" + StringUtil.shortClassName(type) + \"]\");\n        }\n    }", "private void handleHideNavigationIntent(@NonNull final Bundle extras) {\n        if (extras.containsKey(EXTRA_HIDE_NAVIGATION)) {\n            hideNavigation(extras.getBoolean(EXTRA_HIDE_NAVIGATION));\n        }\n    }", "private static boolean checkCompatible(MetadataKey<?> first,MetadataKey<?> second){\n  boolean compatible=true;\n  Class<?> firstType=first.getDatatype();\n  Class<?> secondType=second.getDatatype();\n  if (firstType != secondType) {\n    logger.warning(\"Incompatible datatypes.  First(\" + first + \"): \"+ firstType+ \" but Second(\"+ second+ \"): \"+ secondType);\n    compatible=false;\n  }\n  return compatible;\n}\n", "@Override public boolean recognizedFile(IFile file){\n  if (checkFolderType(file)) {\n    final String ext=file.getFileExtension();\n    if (RECOGNIZED_EXTENSIONS.contains(ext)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "    public Integer getNumberOfChildren() {\n        Integer i = ParserUtils.searchForIntegerInMap(header, \"number-of-children\");\n        if (i != null) {\n            return i;\n        }\n        return new Integer(-1);\n    }\n", "private Page findIndexPage(final SecurityContext securityContext, List<Page> pages, final EditMode edit) throws FrameworkException {\n\n\t\tfinal PropertyKey<Integer> positionKey = StructrApp.key(Page.class, \"position\");\n\n\t\tif (pages == null) {\n\n\t\t\tpages = StructrApp.getInstance(securityContext).nodeQuery(Page.class).getAsList();\n\t\t\tCollections.sort(pages, new GraphObjectComparator(positionKey, GraphObjectComparator.ASCENDING));\n\t\t}\n\n\t\tfor (Page page : pages) {\n\n\t\t\tif (securityContext.isVisible(page) && page.getProperty(positionKey) != null && ((EditMode.CONTENT.equals(edit) || isVisibleForSite(securityContext.getRequest(), page)) || (page.getEnableBasicAuth() && page.isVisibleToAuthenticatedUsers()))) {\n\n\t\t\t\treturn page;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}", "\tpublic void sendNotice(final String message) {\n\t\tthis.irc.getOutput().send(\"NOTICE \" + this.getName() + \" :\" + message);\n\t}\n", "public String valueString(){\n  byte[] barr=new byte[rawData.length * 4];\n  ByteBuffer b=ByteBuffer.wrap(barr,0,barr.length);\n  b.order(java.nio.ByteOrder.LITTLE_ENDIAN);\n  IntBuffer i=b.asIntBuffer();\n  i.put(rawData);\n  try {\n    String str=new String(barr,\"US-ASCII\");\n    str=str.substring(0,str.indexOf(\"\\0\"));\n    return str;\n  }\n catch (  java.io.UnsupportedEncodingException e) {\n  }\n  return null;\n}\n", "public FastByteArrayOutputStream ( byte [ ] buffer , int bumpSize ) { buf = buffer ; bumpLen = bumpSize ; }", "void ensurePrestart(){\n  int wc=workerCountOf(ctl.get());\n  if (wc < corePoolSize)   addWorker(null,true);\n else   if (wc == 0)   addWorker(null,false);\n}\n", "protected String doGetText(EObject source){\n  String keyword=getKeywordLabel(source);\n  QualifiedName containerName=qualifiedNameProvider.getFullyQualifiedName(source);\n  while (containerName == null) {\n    source=source.eContainer();\n    if (source != null) {\n      containerName=qualifiedNameProvider.getFullyQualifiedName(source);\n    }\n else {\n      break;\n    }\n  }\n  if (keyword != null && keyword.length() > 0) {\n    return keyword + ' ' + containerName;\n  }\n  return String.valueOf(containerName);\n}\n", "public T waitForResult ( ) throws InterruptedException { try { return waitForResult ( - NUM_ , TimeUnit . MILLISECONDS ) ; } catch ( TimeoutException e ) { throw new RuntimeException ( STR_ ) ; } }", "public int search(byte[] text,int start){\n  int M=pattern.length;\n  int N=text.length;\n  int skip;\n  for (int i=start; i <= N - M; i+=skip) {\n    skip=0;\n    for (int j=M - 1; j >= 0; j--) {\n      if (pattern[j] != text[i + j]) {\n        skip=Math.max(1,j - right[text[i + j]]);\n        break;\n      }\n    }\n    if (skip == 0)     return i;\n  }\n  return N;\n}\n", "private static List < INaviInstruction > collectInstructions ( final INaviCodeNode codenode , final INaviInstruction instruction ) { final List < INaviInstruction > naviinstrlist = new ArrayList < INaviInstruction > ( ) ; for ( final IInstruction instr : codenode . getInstructions ( ) ) { if ( instr instanceof INaviInstruction ) { final INaviInstruction naviinstr = ( INaviInstruction ) instr ; if ( instruction . getAddress ( ) . equals ( naviinstr . getAddress ( ) ) && ! naviinstrlist . contains ( naviinstr ) ) { if ( naviinstr != instruction ) { naviinstrlist . add ( naviinstr ) ; } } } } return naviinstrlist ; }", "protected void load(int ID,String trxName){\n  log.finest(\"ID=\" + ID);\n  if (ID > 0) {\n    setKeyInfo();\n    m_IDs=new Object[]{new Integer(ID)};\n    load(trxName);\n  }\n else {\n    loadDefaults();\n    m_createNew=true;\n    setKeyInfo();\n    loadComplete(true);\n  }\n}\n", "    public int autoCorrelationFunctionCount() {\n        return this.autoCorrelations.size();\n    }\n", "protected void newAddChildTo(ModelRenderer child,ModelRenderer parent){\n  float distance=(float)Math.sqrt(Math.pow((child.rotationPointZ - parent.rotationPointZ),2) + Math.pow((child.rotationPointY - parent.rotationPointY),2));\n  float angle=(float)Math.atan2(child.rotationPointY - parent.rotationPointY,child.rotationPointZ - parent.rotationPointZ);\n  float newRotationPointZ=(float)(distance * (Math.cos(angle)));\n  float newRotationPointY=(float)(distance * (Math.sin(angle)));\n  parent.addChild(child);\n  child.rotateAngleX-=parent.rotateAngleX;\n  child.rotateAngleY-=parent.rotateAngleY;\n  child.rotateAngleZ-=parent.rotateAngleZ;\n}\n", "public TypeMember createUnionMember ( final BaseType containingType , final BaseType memberType , final String memberName , int memberOffset ) throws CouldntSaveDataException ;", "    public boolean subsumes(TriplePattern arg) {\n        return (subject.isVariable()  || subject.equals(arg.subject))\n            && (predicate.isVariable() || predicate.equals(arg.predicate))\n            && (object.isVariable() || object.equals(arg.object));\n    }\n", "public CoinbaseAccountChanges getCoinbaseAccountChanges(Integer page) throws IOException {\n\n    final CoinbaseAccountChanges accountChanges =\n        coinbase.getAccountChanges(\n            page,\n            exchange.getExchangeSpecification().getApiKey(),\n            signatureCreator,\n            exchange.getNonceFactory());\n    return accountChanges;\n  }", "  public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException {\n    if (flavor.equals(HOME_FLAVOR)) {\n      return deepCopy(this.transferedItems);\n    } else {\n      throw new UnsupportedFlavorException(flavor);\n    }\n  }\n", "public void registerTableNodes(SnmpMib mib,MBeanServer server){\n  tableJvmThreadInstanceTable=createJvmThreadInstanceTableMetaNode(\"JvmThreadInstanceTable\",\"JvmThreading\",mib,server);\n  if (tableJvmThreadInstanceTable != null) {\n    tableJvmThreadInstanceTable.registerEntryNode(mib,server);\n    mib.registerTableMeta(\"JvmThreadInstanceTable\",tableJvmThreadInstanceTable);\n  }\n}\n", "public static ValueGetterSpacePredicate < ServerEntry > propertyBetween ( String propertyName , Comparable < ? > low , Comparable < ? > high ) { return property ( propertyName , between ( low , high ) ) ; }", "public void registerWork(Work work, Xid xid, long timeout) throws WorkCompletedException\n   {\n      delegator.registerWork(work, xid, timeout);\n   }", "public boolean addToErrorList(DownloadInfoRunnable downloadInfoRunnable){\n  return mErrorList.add(downloadInfoRunnable);\n}\n", "    protected void initClassDefaults(UIDefaults table) {\n        super.initClassDefaults(table);\n\n        final String uiClassnamePrefix   = \"com.jgoodies.looks.plastic.PlasticXP\";\n        Object[] uiDefaults = {\n            // Uses a smooth icon\n            \"CheckBoxUI\",      uiClassnamePrefix + \"CheckBoxUI\",\n\n            // Uses a smooth icon\n            \"RadioButtonUI\",   uiClassnamePrefix + \"RadioButtonUI\",\n\n            // Changed buttons\n            \"SpinnerUI\",       uiClassnamePrefix + \"SpinnerUI\",\n\n            // Uses rounded rollover borders\n            \"ToolBarUI\",       uiClassnamePrefix + \"ToolBarUI\"\n        };\n        table.putDefaults(uiDefaults);\n    }\n", "  private void ihmInit() {\n    panelLeagueStandings = new PanelLeagueStandings();\n    this.getContentPane().add(panelLeagueStandings, BorderLayout.CENTER);\n  }\n", "public COptionsPanel(final List<ITypeDescription> descriptions){\n  super(new BorderLayout());\n  Preconditions.checkNotNull(descriptions,\"IE00667: Descriptions argument can not be null\");\n  final JPanel mainPanel=new JPanel(new BorderLayout());\n  final JPa", "public double computeAverageLocalOfObservations ( int variableToReorder , int [ ] newOrdering ) throws Exception ;", "public void play ( int musicID ) { if ( musicMap . containsValue ( musicID ) ) { soundPool . play ( musicID , UIdefaultData . defaultMusicVolume , UIdefaultData . defaultMusicVolume , NUM_ , NUM_ , NUM_ ) ; } }", "    public Node addChild(Node child) throws NodeExistsException {\n        child.setParent(parent);\n        children.add(child);\n        return this;\n    }\n", "    protected Map getRealMap(boolean create) {\n        final HttpServletRequest req = this.requestContextProvider.getCurrentRequestContext().getRequest();\n        final HttpSession session = req.getSession(create);\n        if ( session != null ) {\n            Map map = (Map)session.getAttribute(this.attrName);\n            if ( map != null ) {\n                return map;\n            } else if ( create ) {\n                map = new HashMap();\n                session.setAttribute(this.attrName, map);\n            }\n        }\n        return Collections.EMPTY_MAP;\n    }\n", "public static <E> Iterator<E> takeWhile(Iterable<E> iterable, Predicate<E> predicate) {\n        dbc.precondition(iterable != null, \"cannot takeWhile from a null iterable\");\n        return new TakeWhileIterator<E>(iterable.iterator(), predicate);\n    }", "    public String getEncodedString(String fieldName, String encoding) {\n        try {\n            return URLEncoder.encode((String) attributes.get(fieldName),\n                    encoding);\n\n        } catch (UnsupportedEncodingException e) {\n            return (String) attributes.get(fieldName);\n        }\n    }\n", "public static long daysBetween(Date startDate,Date endDate){\n  Calendar sDate=getDatePart(startDate);\n  Calendar eDate=getDatePart(endDate);\n  long daysBetween=0;\n  while (sDate.before(eDate)) {\n    sDate.add(Calendar.DAY_OF_MONTH,1);\n    daysBetween++;\n  }\n  return daysBetween;\n}\n", "\tpublic void clearNearbyAvatars() {\n\t\t// If we're not in the UI thread...\n\t\tif(!SwingUtilities.isEventDispatchThread()) {\n\t\t\ttry {\n\t\t\t\tSwingUtilities.invokeAndWait(new Runnable() {\n\t\t\t\t\t/**\n\t\t\t\t\t * Called when the thread is executed.\n\t\t\t\t\t */\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tclearNearbyAvatars();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (Exception ex) {\n\t\t\t\tif(Whisper.isDebugging()) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\t// If we are in the UI thread...\n\t\telse {\n\t\t\t// Critical region, so lock.\n\t\t\tsynchronized(nearbyAvatars) {\n\t\t\t\t// Clear the list.\n\t\t\t\tnearbyAvatars.clear();\n\t\t\t}\n\t\t\t// Pass through to the main window.\n\t\t\tmainWindow.clearNearbyAvatars();\t\n\t\t}\n\t}\n", "public ShibbolethSystemScopeRepository ( final Set < SystemScope > scs ) { this . scopes = scs ; }", "public void removeListener ( final ITagManagerListener listener ) { m_listeners . removeListener ( listener ) ; }", "\tpublic void setPreferredVerticalOffset(int preferredVerticalOffset) {\n\t\tthis.preferredVerticalOffset = preferredVerticalOffset;\n\t\tthis.minimumHorizontalOffset = 2 * preferredVerticalOffset;\n\t\tballoonTip.getStyle().setVerticalOffset(preferredVerticalOffset);\n\t}\n", "public static void closeStreams(Closeable... streams){\n  if (null != streams) {\n    for (    Closeable stream : streams) {\n      if (null != stream) {\n        try {\n          stream.close();\n        }\n catch (        IOException e) {\n          LOGGER.error(\"Error while closing stream\" + stream);\n        }\n      }\n    }\n  }\n}\n", "protected void writeNonHTMLAttributes(AttributeSet attr) throws IOException {\n  String style=\"\";\n  String separator=\"; \";\n  if (inFontTag() && fontAttributes.isEqual(attr)) {\n    return;\n  }\n  boolean first=true;\n  Color color=(Color)attr.getAttribute(StyleConstants.Foreground);\n  if (color != null) {\n    style+=\"color: \" + css.styleConstantsValueToCSSValue((StyleConstants)StyleConstants.Foreground,color);\n    first=false;\n  }\n  Integer size=(Integer)attr.getAttribute(StyleConstants.FontSize);\n  if (size != null) {\n    if (!first) {\n      style+=separator;\n    }\n    style+=\"font-size: \" + size.intValue() + \"pt\";\n    first=false;\n  }\n  String family=(String)attr.getAttribute(StyleConstants.FontFamily);\n  if (family != null) {\n    if (!first) {\n      style+=separator;\n    }\n    style+=\"font-family: \" + family;\n    first=false;\n  }\n  if (style.length() > 0) {\n    if (fontMask != 0) {\n      writeEndMask(fontMask);\n      fontMask=0;\n    }\n    startSpanTag(style);\n    fontAttributes=attr;\n  }\n else   if (fontAttributes != null) {\n    writeEndMask(fontMask);\n    fontMask=0;\n    endSpanTag();\n  }\n}\n", "protected WritableDoubleDataStore computeCoreDists(DBIDs ids, KNNQuery<O> knnQ, int minPts) {\n    final Logging LOG = getLogger();\n    final WritableDoubleDataStore coredists = DataStoreUtil.makeDoubleStorage(ids, DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_DB);\n    FiniteProgress cprog = LOG.isVerbose() ? new FiniteProgress(\"Computing core sizes\", ids.size(), LOG) : null;\n    for(DBIDIter iter = ids.iter(); iter.valid(); iter.advance()) {\n      coredists.put(iter, knnQ.getKNNForDBID(iter, minPts).getKNNDistance());\n      LOG.incrementProcessed(cprog);\n    }\n    LOG.ensureCompleted(cprog);\n    return coredists;\n  }", "@Override public void addVetoableChangeListener(String name,VetoableChangeListener vcl){\n  m_bcSupport.addVetoableChangeListener(name,vcl);\n}\n", "    public Dimension getPreferredSize() {\n        // Note.  super synchronizes on getTreeLock().  Shouldn't matter,\n        // since we only mess with this on the event thread?\n        Dimension size = textfield.getPreferredSize();\n        int columns = (textfield.getColumns() > 22)\n                ? 22 : textfield.getColumns();\n        if (columns != 0) {\n            size.width = 6 + (columns) * getColumnWidth();\n        }\n        return size;\n    }\n", "    public void stop() {\n        if (m_usesMOSGi) {\n            if (m_serviceRegistration != null) {\n                m_serviceRegistration.unregister();\n            }\n        } else {\n            if (m_objectName != null) {\n                try {\n         ", "  private void reportStatus(String msg) {\n    if ( (errStr = msg) != null) {\n      System.out.println(errStr);\n      samplingGraph.repaint();\n    }\n  }\n", "    private void swap(int a, int b) {\n        // INV: assertExpr(a > 0);\n        // INV: assertExpr(a <= size);\n        // INV: assertExpr(b > 0);\n        // INV: assertExpr(b <= size);\n        // INV: assertExpr(q[a] != null);\n        // INV: assertExpr(q[b] != null);\n        // INV: assertExpr(q[a].index == a);\n        // INV: assertExpr(q[b].index == b);\n        TimeoutImpl temp = q[a];\n        q[a] = q[b];\n        q[a].index = a;\n        q[b] = temp;\n        q[b].index = b;\n    }\n", "\tpublic void rotate(int angle) {\n\t\tif ((S > 0) && (V > 0)) {\n\t\t\tdouble newHue = (H + angle) % 360.0;\n\t\t\tsetHSV(newHue, S, V);// S * S1 / S2, V * V1 / V2 );\n\t\t}\n\t}\n", "protected List < String > validateConfig ( Config config ) { if ( config . getMigrations ( ) . isEmpty ( ) ) { return ImmutableList . of ( STR_ ) ; } return ImmutableList . of ( ) ; }", "public void writeObject(final ZooPC objectInput, ZooClassDef clsDef) {\r\n        long oid = objectInput.jdoZooGetOid();\r\n        out.startObject(oid, clsDef.getSchemaVersion());\r\n\r\n    \tout.writeLong(oid);\r\n        serializeFields1(objectInput, clsDef);\r\n        serializeFields2();\r\n        scos.clear();\r\n\r\n        // Write special classes\r\n        if (objectInput instanceof DBCollection) {\r\n        \tserializeSpecial(objectInput, objectInput.getClass());\r\n        }\r\n        \r\n        scos.clear();\r\n        usedClasses.clear();\r\n        \r\n        out.finishObject();\r\n    }", "\tprotected void setUpPlot() throws SQLException {\n\t\tplot = new HistogramsPlot(collID);\n\t\tplot.setTitle(\"Spectrum histogram for collection #\" + collID);\n\t\tzPlot = new ZoomableChart(plot);\n\n\t\tzPlot.setCScrollMin(defMin);\n\t\tzPlot.setCScrollMax(defMax);\n\t\t\n\t\tplotPanel.add(zPlot);\n\t\t\n\t\t// this is a little silly: zoomablechart registers itself as a listener\n\t\t// of the plot, but we only want it sometimes, so we unregister it\n\t\t// and register it on the MouseRedirector, below.\n\t\tplot.removeMouseListener(zPlot);\n\t\tplot.removeMouseMotionListener(zPlot);\n\t}\n", "public void loadPackage() {\r\n\t\tif (isLoaded)\r\n\t\t\treturn;\r\n\t\tisLoaded = true;\r\n\r\n\t\tURL url = getClass().getResource(packageFilename);\r\n\t\tif (url == null) {\r\n\t\t\tthrow new RuntimeException(\"Missing serialized package: \" + packageFilename);\r\n\t\t}\r\n\t\tURI uri = URI.createURI(url.toString());\r\n\t\tResource resource = new EcoreResourceFactoryImpl().createResource(uri);\r\n\t\ttry {\r\n\t\t\tresource.load(null);\r\n\t\t} catch (IOException exception) {\r\n\t\t\tthrow new WrappedException(exception);\r\n\t\t}\r\n\t\tinitializeFromLoadedEPackage(this, (EPackage) resource.getContents().get(0));\r\n\t\tcreateResource(eNS_URI);\r\n\t}", "\tpublic void term(StringTokenizer objStrTok,SessionThread objThread) throws Exception {\n\t\t// parse the statement\n\t\tif (objStrTok.hasMoreElements()) {\n\t\t\tthrow new ExcListToLong();\n\t\t}\n\n\t\t// build instruction object to pass the data to the processor\n\t\tgetProcessor();\n\t\tOperand objOperand = new Operand(strBusNr,Declare.strDevFB,\"1\",\"\",\"\",\"\",objSRCPDaemon.getTimestamp());\n\t\tobjOperand.setTerm();\n\t\tif ( !objProcessor.isAvailable(objOperand) ) {\n\t\t\t\tthrow new ExcUnsupportedDevice();\n\t\t}\n\t\tobjProcessor.term(objOperand);\n\t\tobjThread.writeAck();\n\t}\n", "public static boolean isFilePath(String path){\n  if (TextUtils.isEmpty(path)) {\n    return false;\n  }\n  if (path.startsWith(File.separator)) {\n    return true;\n  }\n  return false;\n}\n", "public void add ( Map values ) throws SQLException { getResultSet ( ) . moveToInsertRow ( ) ; for ( Iterator iter = values . entrySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iter . next ( ) ; getResultSet ( ) . updateObject ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } getResultSet ( ) . insertRow ( ) ; }", "public boolean process(@NotNull Editor editor,@NotNull PsiFile psiFile){\n  final CaretModel caretModel=editor.getCaretModel();\n  final Pair<JavadocHelper.JavadocParameterInfo,List<JavadocHelper.JavadocParameterInfo>> pair=myHelper.parse(psiFile,editor,car", "OtpCookedConnection getConnection(final String anode) {\n        OtpPeer peer = null;\n        OtpCookedConnection conn = null;\n\n        synchronized (connections) {\n            // first just try looking up the name as-is\n            conn = connections.get(anode);\n\n            if (conn == null) {\n                // in case node had no '@' add localhost info and try again\n                peer = new OtpPeer(anode);\n                conn = connections.get(peer.node());\n\n                if (conn == null) {\n                    try {\n                        conn = new OtpCookedConnection(this, peer);\n                        conn.setFlags(connFlags);\n                        addConnection(conn);\n                    } catch (final Exception e) {\n                        /* false = outgoing */\n                        connAttempt(peer.node(), false, e);\n                    }\n                }\n            }\n            return conn;\n        }\n    }", "public static boolean isDrmMimeType(Context context,String mimetype){\n  boolean result=false;\n  if (context != null) {\n    try {\n      DrmManagerClient drmClient=new DrmManagerClient(context);\n      if (drmClient != null && mimetype != null && mimetype.length() > 0) {\n        result=drmClient.canHandle(\"\",mimetype);\n      }\n    }\n catch (    IllegalArgumentException e) {\n      Log.w(TAG,\"DrmManagerClient instance could not be created, context is Illegal.\");\n    }\ncatch (    IllegalStateException e) {\n      Log.w(TAG,\"DrmManagerClient didn't initialize properly.\");\n    }\n  }\n  return result;\n}\n", "void start ( ) { this . running = BOOL_ ; runningThread = new Thread ( this , STR_ ) ; runningThread . setDaemon ( BOOL_ ) ; runningThread . start ( ) ; }", "public void visitEnd ( ) { }", "public void removeListener ( final IGraphBuilderListener listener ) { m_listeners . removeListener ( listener ) ; }", "public boolean isPassive(ObjectGroupManagerImpl group) {\n\t\tMap p = getProperties(group);\n\t\tif (p == null)\n\t\t\treturn false;\n\t\tint rs = Integer.parseInt((String) p.get(Main.RS));\n\n\t\treturn (rs == COLD_PASSIVE.value) || (rs == WARM_PASSIVE.value);\n\t}", "public void formListDownloadingComplete(HashMap<String,FormDetails> result){\n  dismissDialog(PROGRESS_DIALOG);\n  mDownloadFormListTask.setDownloaderListener(null);\n  mDownloadFormListTask=null;\n  if (result == null) {\n    Log.e(t,\"Formlist Downloading returned null.  That shouldn't happen\");\n    createAlertDialog(getString(R.string.load_remote_form_error),getString(R.string.error_occured),EXIT);\n    return;\n  }\n  if (result.containsKey(DownloadFormListTask.DL_AUTH_REQUIRED)) {\n    showDialog(AUTH_DIALOG);\n  }\n else   if (result.containsKey(DownloadFormListTask.DL_ERROR_MSG)) {\n    String dialogMessage=getString(R.string.list_failed_with_error,result.get(DownloadFormListTask.DL_ERROR_MSG).errorStr);\n    String dialogTitle=getString(R.string.load_remote_form_error);\n    createAlertDialog(dialogTitle,dialogMessage,DO_NOT_EXIT);\n  }\n else {\n    mFormNamesAndURLs=result;\n    mFormList.clear();\n    ArrayList<String> ids=new ArrayList<String>(mFormNamesAndURLs.keySet());\n    for (int i=0; i < result.size(); i++) {\n      String formDetailsKey=ids.get(i);\n      FormDetails details=mFormNamesAndURLs.get(formDetailsKey);\n      HashMap<String,String> item=new HashMap<String,String>();\n      item.put(FORMNAME,details.formName);\n      item.put(FORMID_DISPLAY,((details.formVersion == null) ? \"\" : (getString(R.string.version) + \" \" + details.formVersion+ \" \")) + \"ID: \" + details.formID);\n      item.put(FORMDETAIL_KEY,formDetailsKey);\n      item.put(FORM_ID_KEY,details.formID);\n      item.put(FORM_VERSION_KEY,details.formVersion);\n      if (mFormList.size() == 0) {\n        mFormList.add(item);\n      }\n else {\n        int j;\n        for (j=0; j < mFormList.size(); j++) {\n          HashMap<String,String> compareMe=mFormList.get(j);\n          String name=compareMe.get(FORMNAME);\n          if (name.compareTo(mFormNamesAndURLs.get(ids.get(i)).formName) > 0) {\n            break;\n          }\n        }\n        mFormList.add(j,item);\n      }\n    }\n    selectSupersededForms();\n    mFormListAdapter.notifyDataSetChanged();\n    mDownloadButton.setEnabled(!(selectedItemCount() == 0));\n  }\n}\n", "public int getSimpleComment(char[] array, int currentIndex, StringBuffer velocityBlock,\n        VelocityParserContext context)\n    {\n        int i = currentIndex + 2;\n\n        while (i < array.length && array[i - 1] != '\\n') {\n            ++i;\n        }\n\n        if (velocityBlock != null) {\n            velocityBlock.append(array, currentIndex, i - currentIndex);\n        }\n\n        context.setType(VelocityBlock.VelocityType.COMMENT);\n\n        return i;\n    }", "    public void removeDirtinessChangeListener(IDirtinessChangeListener listener) {\n      \n            this.dirtinessListeners.remove(listener);\n        \n    }\n", "\tpublic JToggleButton addToggleButton(AbstractJMTAction action, int group) {\n\t\treturn this.addToggleButton(action, null, group);\n\t}\n", "private void movePerms(AuthzTrans trans, NsDAO.Data parent,\n\t\t\tStringBuilder sb, Result<List<PermDAO.Data>> rpdc) {\n\n\t\tResult<Void> rv;\n\t\tResult<PermDAO.Data> pd;\n\n\t\tif (rpdc.isOKhasData()) {\n\t\t\tfor (PermDAO.Data pdd : rpdc.value) {\n\t\t\t\tString delP2 = pdd", "\tpublic void removeActiveNode(JivesActiveNode activeNode) {\n\t\tactiveNodes.remove(activeNode);\n\t\tactiveNode.setCurrentScene(null);\n\t\tonActiveNodeRemove(activeNode);\n\t}\n", "public static String extractResponse(IDiagnosticsLogger log,StringWriter sw){\n  String samlResponseField=\"<input type=\\\"hidden\\\" name=\\\"SAMLResponse\\\" value=\\\"\";\n  String responseAsString=sw.toString();\n  log.debug(\"Received response \" + responseAsString);\n  int index=responseAsString.indexOf(samlResponseField);\n  assertTrue(index >= 0);\n  int startIndex=index + samlResponseField.length();\n  int endIndex=responseAsString.indexOf('\\\"',startIndex);\n  assertTrue(endIndex >= 0);\n  String encodedSamlResponse=responseAsString.substring(startIndex,endIndex);\n  String decodedSamlResponse=new String(Base64.decode(encodedSamlResponse));\n  return decodedSamlResponse;\n}\n", "private void scheduleRetryFuture() {\n        Log.v(Log.TAG_SYNC, \"%s: Failed to xfer; will retry in %d sec\", this, RETRY_DELAY_SECONDS);\n        synchronized (executor) {\n            if (!executor.isShutdown()) {\n                this.retryFuture = executo", "public int put(Iterable<? extends Widget> widgets, int startIndex) throws IndexOutOfBoundsException {\n\t\tint index = startIndex;\n\t\tfor (Widget widget : widgets) {\n\t\t\tput(widget, index);\n\t\t\t++index;\n\t\t}\n\t\treturn index;\n\t}", "public void drawFlash(float x,float y,float width,float height, Color col) {\r\n\t\tinit();\r\n\t\t\r\n\t\tcol.bind();\r\n\t\ttexture.bind();\r\n\r\n\t\tif (GL.canSecondaryColor()) {\r\n\t\t\tGL.glEnable(SGL.GL_COLOR_SUM_EXT);\r\n\t\t\tGL.glSecondaryColor3ubEXT((byte)(col.r * 255), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t (byte)(col.g * 255), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t (byte)(col.b * 255));\r\n\t\t}\r\n\t\t\r\n\t\tGL.glTexEnvi(SGL.GL_TEXTURE_ENV, SGL.GL_TEXTURE_ENV_MODE, SGL.GL_MODULATE);\r\n\r\n        GL.glTranslatef(x, y, 0);\r\n        if (angle != 0) {\r\n\t        GL.glTranslatef(centerX, centerY, 0.0f); \r\n\t        GL.glRotatef(angle, 0.0f, 0.0f, 1.0f); \r\n\t        GL.glTranslatef(-centerX, -centerY, 0.0f); \r\n        }\r\n        \r\n\t\tGL.glBegin(SGL.GL_QUADS);\r\n\t\t\tdrawEmbedded(0,0,width,height);\r\n\t\tGL.glEnd();\r\n\r\n        if (angle != 0) {\r\n\t        GL.glTranslatef(centerX, centerY, 0.0f); \r\n\t        GL.glRotatef(-angle, 0.0f, 0.0f, 1.0f); \r\n\t        GL.glTranslatef(-centerX, -centerY, 0.0f); \r\n        }\r\n        GL.glTranslatef(-x, -y, 0);\r\n        \r\n\t\tif (GL.canSecondaryColor()) {\r\n\t\t\tGL.glDisable(SGL.GL_COLOR_SUM_EXT);\r\n\t\t}\r\n\t}", "public static String uuid() {\n\t\tchar[] uuid = new char[36];\n\t\tuuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n\t\tfor (int i = 0; i < 36; i++) {\n\t\t\tif (uuid[i] == 0) {\n\t\t\t\tuuid[i] = UUID.CHARS[UUID.randomInt(16)];\n\t\t\t}\n\t\t}\n\t\treturn new String(uuid);\n\t}", "  public Object deleteObjects(Object obj,Integer userId){\n    this.userId = userId;\n    this.persistenObject = obj;\n    System.out.println(\"Deleting: \" + obj + \" pkId: \" + ((org.opentapas.commons.rim.Any)obj).getPkId());\n    return this.execute();\n  }\n", "    public void framerate(int theFramesPerSecond) {\n        _myRenderLoop.framerate(theFramesPerSecond);\n    }\n", "public CMemoryRefreshButtonSynchronizer ( final CMemoryRefreshButton refreshButton , final CDebugPerspectiveModel debugPerspectiveModel , final Action defaultAction , final Action askAction ) { Preconditions . checkNotNull ( refreshButton , STR_ ) ; Preco", "public static List<Character> parserCharacterList(JsonPullParser parser) throws IOException,\n\t\t\tJsonFormatException {\n\n\t\tState eventType = parser.getEventType();\n\t\tif (eventType == State.VALUE_NULL) {\n\t\t\treturn null;\n\t\t}\n\t\tif (eventType != State.START_ARRAY) {\n\t\t\tthrow new IllegalStateException(\"not started brace!\");\n\t\t}\n\t\tList<Character> list = new ArrayList<Character>();\n\t\twhile (parser.lookAhead() != State.END_ARRAY) {\n\t\t\teventType = parser.getEventType();\n\t\t\tif (eventType == State.VALUE_NULL) {\n\t\t\t\tlist.add(null);\n\t\t\t} else if (eventType == State.VALUE_STRING) {\n\t\t\t\tString str = parser.getValueString();\n\t\t\t\tif (str.length() != 1) {\n\t\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\t\"unexpected value. expecte string size is 1. but get=\" + str);\n\t\t\t\t}\n\t\t\t\tlist.add(str.charAt(0));\n\t\t\t} else {\n\t\t\t\tthrow new IllegalStateException(\"unexpected state. expected=VALUE_STRING, but get=\"\n\t\t\t\t\t\t+ eventType.toString());\n\t\t\t}\n\t\t}\n\t\tparser.getEventType();\n\t\treturn list;\n\t}", "public void addBranch(Long startPosition, String flowUuid, Map<String, Serializable> context) {\n        Map<String, Long> runningPlansIds = getFromMap(RUNNING_PLANS_MAP);\n        Long runningPlanId = runningPlansIds.get(flowUuid);\n        addBranch(startPosition, runningPlanId, context, new ExecutionRuntimeServices(this));\n    }", "public synchronized String[] childrenValues(){\n  if (m_Current.children == null) {\n    return null;\n  }\n else {\n    Vector<TreeNode> kids=m_Current.children;\n    String[] values=new String[kids.size()];\n    for (int i=0; i < kids.size(); i++) {\n      values[i]=kids.elementAt(i).value;\n    }\n    return values;\n  }\n}\n", "public synchronized void remove ( ComponentName componentName , UserHandleCompat user ) { mCache . remove ( new ComponentKey ( componentName , user ) ) ; }", "public static List < String > executeCommandAndGetLines ( List < String > cmdArray ) throws IOException , InterruptedException { ProcessBuilder builder = new ProcessBuilder ( cmdArray ) ; builder . redirectErrorStream ( BOOL_ ) ; Process process = builder", "private static void appendJSONPair(StringBuilder json,String key,String value) throws UnsupportedEncodingException {\n  boolean isValueNumeric=false;\n  try {\n    if (value.equals(\"0\") || !value.endsWith(\"0\")) {\n      Double.parseDouble(value);\n      isValueNumeric=true;\n    }\n  }\n catch (  NumberFormatException e) {\n    isValueNumeric=false;\n  }\n  if (json.charAt(json.length() - 1) != '{') {\n    json.append(',');\n  }\n  json.append(escapeJSON(key));\n  json.append(':');\n  if (isValueNumeric) {\n    json.append(value);\n  }\n else {\n    json.append(escapeJSON(value));\n  }\n}\n", "void injectAll(final Errors errors){\n  for (  InjectableReference<?> reference : new ArrayList<>(pendingInjection.values())) {\n    try {\n      reference.get(errors);\n    }\n catch (    ErrorsException e) {\n      errors.merge(e.getErrors());\n    }\n  }\n  if (!pendingInjection.isEmpty()) {\n    throw new AssertionError(\"Failed to satisfy \" + pendingInjection);\n  }\n  ready.countDown();\n}\n", "public void addAttributeValidationModeUsage(ModeUsage modeUsage){\n  int ap=modeUsage.getAttributeProcessing();\n  if (ap != Mode.ATTRIBUTE_PROCESSING_NONE) {\n    attributeValidationModeUsages.addElement(modeUsage);\n    attributeProcessing=Math.max(ap,attributeProcessing);\n    if (modeUsage.isContextDependent())     contextDependent=true;\n  }\n}\n", "public RequestLimitRule matchingKeys(String... keys) {\n        Set<String> keySet = keys.length > 0 ? new HashSet<>(Arrays.asList(keys)) : null;\n        return matchingKeys(keySet);\n    }", "@SuppressWarnings(\"unchecked\")\n    private static <T> T getCachedReference(Project project, String key, Supplier<T> supplier) {\n        if (project == null) {\n            throw new IllegalArgumentException(\"Gradle project reference cannot be null.\");\n        }\n\n        Project rootProject = project.getRootProject();\n        ExtraPropertiesExtension ext = rootProject.getExtensions().getExtraProperties();\n        T value;\n        if (ext.has(key)) {\n            value = (T) ext.get(key);\n        } else {\n            value = supplier.get();\n            ext.set(key, value);\n        }\n        return value;\n    }", "public CDebugPerspectiveModel ( final IGraphModel model ) { m_model = Preconditions . checkNotNull ( model , STR_ ) ; }", "public List<HELM2Notation> decompose(HELM2Notation helm2notation) {\n    List<HELM2Notation> list = new ArrayList<HELM2Notation>();\n    List<ConnectionNotation> allselfConnections = getAllSelfCycleConnections(helm2notation.getListOfConnections());\n    f", "    public void initialCheckListItem(Object element) {\n        Object parent = treeContentProvider.getParent(element);\n        currentTreeSelection = parent;\n        //As this is not done from the UI then set the box for updating from the selection to false \n        listItemChecked(element, true, false);\n        updateHierarchy(parent);\n    }\n", "public RoleAssignmentInner get(String scope, String roleAssignmentName) {\n        return getWithServiceResponseAsync(scope, roleAssignmentName).toBlocking().single().body();\n    }", "public void clearAllEarcons(){\n  mEarcons.clear();\n}\n", "public Cursor getAnimatedCursor(String ref,int x,int y, int width, int height, int[] cursorDelays) throws IOException, LWJGLException {\r\n\t\tIntBuffer cursorDelaysBuffer = ByteBuffer.allocateDirect(cursorDelays.length*4).order(ByteOrder.nativeOrder()).asIntBuffer();\r\n\t\tfor (int i=0;i<cursorDelays.length;i++) {\r\n\t\t\tcursorDelaysBuffer.put(cursorDelays[i]);\r\n\t\t}\r\n\t\tcursorDelaysBuffer.flip();\r\n\r\n\t\tLoadableImageData imageData = new TGAImageData();\r\n\t\tByteBuffer buf = imageData.loadImage(ResourceLoader.getResourceAsStream(ref), false, null);\r\n\t\t\t\t\t\r\n\t\treturn new Cursor(width, height, x, y, cursorDelays.length, buf.asIntBuffer(), cursorDelaysBuffer);\r\n\t}", "String getClassName(String name) {\n        char[] s = new char[name.length()+1];\n        char c;\n        int j = 0;\n\n        if (!Character.isJavaIdentifierStart(name.charAt(0))) {\n            s[j++] = '_';\n        }\n        for (int i=0; i < name.length(); i++, j++) {\n            c = name.charAt(i);\n            if ( Character.isJavaIdentifierPart(c) ) {\n                s[j] = c;\n            } else {\n                s[j] = '_';\n            }\n        }\n        return (new String(s)).trim();\n     }", "public ByteOrderMark ( String charsetName , int ... bytes ) { if ( charsetName == null || charsetName . length ( ) == NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } if ( bytes == null || bytes . length == NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } this . charsetName = charsetName ; this . bytes = new int [ bytes . length ] ; System . arraycopy ( bytes , NUM_ , this . bytes , NUM_ , bytes . length ) ; }", "\tpublic String getLockingHint(LockHintType lockHintType) {\n\t\tswitch( lockHintType ) {\n\n\t\tcase NONE :\n\t\t\treturn \"\";\n\n\t\tcase SELECT :\n\t\t\treturn \" WITH (nolock) \";\n\n\t\tcase INSERT :\n\t\tcase UPDATE :\n\t\t\treturn \" WITH (updlock) \";\n\n\t\tcase DELETE :\n\t\t\treturn \" WITH (updlock) \";\n\n\t\t}\n\n\t\treturn \"\";\n\t}\n", "public String buildRevision(final char[] previousRevision)\n\t{\n\t\tString prevRev = null;\n\t\tif (previousRevision != null) {\n\t\t\tprevRev = String.valueOf(previousRevision);\n\t\t}\n\n\t\treturn buildRevision(prevRev);\n\t}", "public void fit(@NonNull MultiDataSetIterator iterator) {\n        List<S.Builder> featureNormBuilders = new ArrayList<>();\n        List<S.Builder> labelNormBuilders = new ArrayList<>();\n\n        iterator.reset();\n        while (iterator.hasNext()) {\n            MultiDataSet next = iterator.next();\n            fitPartial(next, featureNormBuilders, labelNormBuilders);\n        }\n\n        featureStats = buildList(featureNormBuilders);\n        if (isFitLabel()) {\n            labelStats = buildList(labelNormBuilders);\n        }\n    }", "@Override public DPState computeFinal(HGNode tailNode,int i,int j,SourcePath sourcePath,Sentence sentence,Accumulator acc){\n  return new KenLMState();\n}\n", "@Override\n    public void write(Iterable<QueryResult> results) {\n        logger.debug(\"Export to '{}' results {}\", graphiteServerHostAndPort, results);\n        SocketOutputStream socketOutputStream = null;\n        try {\n            socketOutputStream = socketOutputStreamPool.borrowObject(graphiteServerHostAndPort);\n            PyList list = new PyList();\n\n            for (QueryResult result : results) {\n                String metricName = metricPathPrefix + result.getName();\n                int time = (int) result.getEpoch(TimeUnit.SECONDS);\n                PyObject pyValue;\n                if (result.getValue() instanceof Integer) {\n                    pyValue = new PyInteger((Integer) result.getValue());\n                } else if (result.getValue() instanceof Long) {\n                    pyValue = new PyLong((Long) result.getValue());\n                } else if (result.getValue() instanceof Float) {\n                    pyValue = new PyFloat((Float) result.getValue());\n                } else if (result.getValue() instanceof Double) {\n                    pyValue = new PyFloat((Double) result.getValue());\n                } else if (result.getValue() instanceof Date) {\n                    pyValue = new PyLong(TimeUnit.SECONDS.convert(((Date) result.getValue()).getTime(), TimeUnit.MILLISECONDS));\n                } else {\n                    pyValue = new PyString(result.getValue().toString());\n                }\n                list.add(new PyTuple(new PyString(metricName), new PyTuple(new PyInteger(time), pyValue)));\n\n                logger.debug(\"Export '{}': \", metricName, result);\n            }\n\n            PyString payload = cPickle.dumps(list);\n\n            byte[] header = ByteBuffer.allocate(4).putInt(payload.__len__()).array();\n\n            socketOutputStream.write(header);\n            socketOutputStream.write(payload.toBytes());\n\n            socketOutputStream.flush();\n            socketOutputStreamPool.returnObject(graphiteServerHostAndPort, socketOutputStream);\n        } catch (Exception e) {\n            logger.warn(\"Failure to send result to graphite server '{}' with {}\", graphiteServerHostAndPort, socketOutputStream, e);\n            if (socketOutputStream != null) {\n                try {\n                    socketOutputStreamPool.invalidateObject(graphiteServerHostAndPort, socketOutputStream);\n                } catch (Exception e2) {\n                    logger.warn(\"Exception invalidating socketWriter connected to graphite server '{}': {}\", graphiteServerHostAndPort, socketOutputStream, e2);\n                }\n            }\n        }\n    }", "    public String getClusterID(int clusterIndex){\n        if(isInRange(clusterIndex))\n            return ((Cluster)this.elementAt(clusterIndex)).getClusterID();\n        return null;\n    }\n", "boolean isValidBoolean ( boolean value ) ;", "private ValFrame colwiseWhichVal(Frame fr, final boolean na_rm) {\n        Frame res = new Frame();\n\n        Vec vec1 = Vec.makeCon(null, 0);\n        assert vec1.length() == 1;\n\n        for (int i = 0; i < fr.numCols(); i++) {\n            Vec v = fr.vec(i);\n            double searchValue = op(v);\n            boolean valid = (v.isNumeric() || v.isTime() || v.isBinary()) && v.length() > 0 && (na_rm || v.naCnt() == 0);\n            FindIndexCol findIndexCol = new FindIndexCol(searchValue).doAll(new byte[]{Vec.T_NUM}, v);\n            Vec newvec = vec1.makeCon(valid ? findIndexCol._valIndex : Double.NaN, v.isTime()? Vec.T_TIME : Vec.T_NUM);\n            res.add(fr.name(i), newvec);\n        }\n\n        vec1.remove();\n        return new ValFrame(res);\n    }", "public static void serialize ( Element element , OutputStream os ) { Source source = new DOMSource ( element ) ; serialize ( source , os ) ; }", "private void moveToContent() {\n\t\tif (widgets == null || widgets.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized(content) {\n\t\t\tfor (int i = nwidgets; i >= 0; i--) {\n\t\t\t\tWidget  w = widgets[i];\n\t\t\t\tif (w != content) {\n\t\t\t\t\tremove(w);\n\t\t\t\t\tcontent.add(0, w);", "private static ConfigSettings readConfiguration ( final String path ) throws IOException , SAXException , ParserConfigurationException { ConfigurationReader reader = new ConfigurationReader ( path ) ; return reader . read ( ) ; }", "@Pure\n\tpublic Rectangle2d toBounds2D() {\n\t\tint startIndex = this.id.indexOf('#');\n\t\tif (startIndex <= 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tint endIndex = this.id.indexOf(';', startIndex);\n\t\t\tif (endIndex <= startIndex) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tfinal lon", "public CloseableIterator<T> mergeSort(Iterator<T> values) throws IOException {\n        ChunkSizeIterator<T> csi = new ChunkSizeIterator<T>(values, config.chunkSize);\n        if (csi.isMultipleChunks()) {\n            List<File> sortedChunks = writeSortedChunks(csi);\n            return mergeSortedChunks(sortedChunks);\n        } else {\n            if (config.distinct) {\n                SortedSet<T> list = new TreeSet<T>(comparator);\n                while (csi.hasNext()) {\n                    list.add(csi.next());\n                }\n                return new DelegatingMergeIterator<T>(list.iterator());\n            } else {\n                List<T> list = new ArrayList<T>(csi.getHeadSize());\n                while (csi.hasNext()) {\n                    list.add(csi.next());\n                }\n                Collections.sort(list, comparator);\n                return new DelegatingMergeIterator<T>(list.iterator());\n            }\n        }\n    }", "Injector(final Map<Class<?>,Object> map){\n  notNull(map);\n  this.map=map;\n}\n", "\tpublic Identifiable get(Key id) {\n\t\treturn (Identifiable) data.get(id);\n\t}\n", "@Nullable\n    TransitionValues getMatchedTransitionValues(@NonNull View view, boolean viewInStart) {\n        if (mParent != null) {\n            return mParent.getMatchedTransitionValues(view, viewInStart);\n        }\n        ArrayList<TransitionValues> loo", "private void addBatExperience ( int xp ) { if ( ! worldObj . isRemote ) { setBatExperience ( Integer . valueOf ( getBatExperience ( ) + xp ) ) ; } }", "boolean isLoaded ( ) ;", "private void checkLog(String... lines) throws Exception {\n  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(LOG_FILE)));\n  List<String> logLines=new ArrayList<>(lines.length);\n  String nextLogLine;\n  while ((nextLogLine=br.readLine()) != null)   logLines.add(nextLogLine);\n  U.closeQuiet(br);\n  assertEquals(lines.length + 1,logLines.size());\n  assertEquals(logLines.get(0),HDR);\n  for (int i=0; i < lines.length; i++) {\n    String logLine=logLines.get(i + 1);\n    logLine=logLine.substring(logLine.indexOf(DELIM_FIELD,logLine.indexOf(DELIM_FIELD) + 1) + 1);\n    assertEquals(lines[i],logLine);\n  }\n}\n", "public void testGetDataLength ( ) { char expectedReturn = ( char ) realmValue . length ( ) ; char actualReturn = realmAttribute . getDataLength ( ) ; assertEquals ( STR_ , expectedReturn , actualReturn ) ; }", "public CertificateBundle mergeCertificate(String vaultBaseUrl, String certificateName, List<byte[]> x509Certificates, CertificateAttributes certificateAttributes, Map<String, String> tags) {\n        return mergeCertificateWithServiceResponseAsync(vaultBaseUrl, certificateName, x509Certificates, certificateAttributes, tags).toBlocking().single().body();\n    }", "public Feature(){\n  id=random.nextLong();\n}\n", "public FinderException ( String message , Throwable cause ) { super ( message , cause ) ; }", "public static <T> void assertThat(String reason, T actual,\n            Matcher<? super T> matcher) {\n        MatcherLazyAssert.assertThat(reason, actual, matcher);\n    }", "public void actionPerformed(ActionEvent e){\n  SwingUtilities.invokeLater(m_tickPB);\n}\n", "static public void assertEquals(String message,float expected,float actual,float delta){\n  if (Float.isInfinite(expected)) {\n    if (!(expected == actual))     failNotEquals(message,new Float(expected),new Float(actual));\n  }\n else   if (!(Math.abs(expected - actual) <= delta))   failNotEquals(message,new Float(expected),new Float(actual));\n}\n", "public static <T> Root<T> findRoot(CriteriaQuery<T> query) {\n        return findRoot(query, query.getResultType());\n    }", "@Bean public BuildInformation buildInformation(){\n  BuildInformation buildInformation=new BuildInformation();\n  buildInformation.setBuildDate(environment.getProperty(\"build.date\"));\n  buildInformation.setBuildNumber(environment.getProperty(\"build.number\"));\n  buildInformation.setBuildOs(environment.getProperty(\"build.os\"));\n  buildInformation.setBuildUser(environment.getProperty(\"build.user\"));\n  LOGGER.info(String.format(\"Build Information: {buildNumber=%s, buildDate=%s, buildUser=%s, buildOs=%s}\",buildInformation.getBuildNumber(),buildInformation.getBuildDate(),buildInformation.getBuildUser(),buildInformation.getBuildOs()));\n  LOGGER.info(\"System Properties: \" + getSystemPropertyMap(\"java.version\",\"java.runtime.version\",\"java.vm.version\",\"java.vm.name\",\"java.vendor\",\"java.vendor.url\",\"java.home\",\"java.class.path\",\"os.name\",\"os.version\",\"os.arch\",\"user.name\",\"user.dir\",\"user.home\",\"file.separator\",\"path.separator\"));\n  return buildInformation;\n}\n", "public FileShareExport(List<String> clients,String securityType,String permissions,String rootUserMapping,String protocol,String storagePortName,String storagePort){\n  _clients=clients;\n  for (  String secType : securityType.split(SEC_SEPARATOR)) {\n    if (_securityType == null) {\n      _securityType=new HashSet<SecurityTypes>();\n    }\n    _securityType.add(Enum.valueOf(SecurityTypes.class,secType.trim()));\n  }\n  _permissions=Enum.valueOf(Permissions.class,permissions);\n  _rootUserMapping=rootUserMapping;\n  _storagePortName=storagePortName;\n  _protocol=Enum.valueOf(StorageProtocol.File.class,protocol);\n  _storagePort=storagePort;\n}\n", "public ChallanInfo(final ReceiptHeader receiptHeader,final EgovCommon egovCommon,final ReceiptHeader receiptHeaderRefObj,final ChartOfAccountsHibernateDAO chartOfAccountsHibernateDAO,final PersistenceService persistenceService){\n  this.receiptHeader=recei", "private boolean isCacheValid(){\n  long now=CurrentTime.currentTime();\n  if ((now - _lastTime < 100) && !CurrentTime.isTest())   return true;\n  long oldLastModified=_lastModified;\n  long oldLength=_length;\n  long newLastModified=_backing.getLastModified();\n  long newLength=_backing.length();\n  _lastTime=now;\n  if (newLastModified == oldLastModified && newLength == oldLength) {\n    _lastTime=now;\n    return true;\n  }\n else {\n    _changeSequence.incrementAndGet();\n    clearCache();\n    _depend=null;\n    _isSigned=null;\n    _zipEntryCache.clear();\n    _lastModified=newLastModified;\n    _length=newLength;\n    _lastTime=now;\n    return false;\n  }\n}\n", "protected final void cacheClear() {\n\n        int i = sysTables.length;\n\n        while (i-- > 0) {\n            Table t = sysTables[i];\n\n            if (t != null) {\n                t.clearAllData(session);\n            }\n\n            sysTableSessions[i] = n", "public double evaluate ( double x , double epsilon ) throws ConvergenceException { return evaluate ( x , epsilon , Integer . MAX_VALUE ) ; }", "public DViewCsr(JFrame parent,String title,PKCS10CertificationRequest pkcs10Csr) throws CryptoException {\n  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);\n  this.pkcs10Csr=pkcs10Csr;\n  initComponents();\n}\n", "public static Deferred<Branch> fetchBranchOnly(final TSDB tsdb, \n      final byte[] branch_id) {\n    \n    final GetRequest get = new GetRequest(tsdb.treeTable(), branch_id);\n    get.family(Tree.TREE_FAMILY());\n    get.qualifier(BRANCH_QUALIFIER);\n    \n    /**\n     * Called after the get returns with or without data. If we have data, we'll\n     * parse the branch and return it.\n     */\n    final class GetCB implements Callback<Deferred<Branch>, ArrayList<KeyValue>> {\n\n      @Override\n      public Deferred<Branch> call(ArrayList<KeyValue> row) throws Exception {\n        if (row == null || row.isEmpty()) {\n          return Deferred.fromResult(null);\n        }\n        \n        final Branch branch = JSON.parseToObject(row.get(0).value(), \n            Branch.class);\n        \n        // WARNING: Since the json doesn't store the tree ID, to cut down on\n        // space, we have to load it from the row key.\n        branch.tree_id = Tree.bytesToId(row.get(0).key());\n        return Deferred.fromResult(branch);\n      }\n      \n    }\n    \n    return tsdb.getClient().get(get).addCallbackDeferring(new GetCB());\n  }", "\tpublic void setCount(int c) {\n\t\tif (c != 0 && count == 0 && until != null) {\n      throw new IllegalArgumentException(\"Cannot set both count and until\");\n\t\t}\n\t\tif (c != 0 || count != 0) {\n\t\t\tuntil = null;\n\t\t}\n\t\tcount = c;\n\t}\n", "public static boolean validateXML(String dialSpecs,String schemaFile){\n  log.fine(\"Checking the validation of file \" + dialSpecs + \" against XML schema \"+ schemaFile+ \"...\");\n  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();\n  try {\n    SchemaFactory schema=SchemaFactory.newInstance(\"http://www.w3.org/2001/XMLSchema\");\n    factory.setSchema(schema.newSchema(new Source[]{new StreamSource(schemaFile)}));\n    DocumentBuilder builder=factory.newDocumentBuilder();\n    try {\n      builder.setErrorHandler(new XMLErrorHandler());\n      Document doc=builder.parse(new InputSource(dialSpecs));\n      log.fine(\"XML parsing of file: \" + dialSpecs + \" successful!\");\n      String rootpath=dialSpecs.substring(0,dialSpecs.lastIndexOf(\"//\") + 1);\n      Vector<String> includedFiles=extractIncludedFiles(doc);\n      for (      String file : includedFiles) {\n        boolean validation=validateXML(rootpath + file,schemaFile);\n        if (!validation) {\n          return false;\n        }\n      }\n    }\n catch (    Exception e) {\n      throw new RuntimeException(e.getMessage());\n    }\n    return true;\n  }\n catch (  SAXException e) {\n    log.warning(\"Validation aborted: \\n\" + e.getMessage());\n    return false;\n  }\ncatch (  ParserConfigurationException e) {\n    log.warning(e.getMessage());\n    return false;\n  }\n}\n", "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  if (graph == null) {\n    throw new NullPointerException();\n  }\n}\n", "public static void gotoMarker ( IMarker problem , boolean jumpToPcal ) { if ( problem . getResource ( ) instanceof IFile ) { IFile module = ( IFile ) problem . getResource ( ) ; IEditorPart part = UIHelper . openEditor ( OpenSpecHandler . TLA_EDITOR , new FileEditorInput ( module ) ) ; IGotoMarker gotoMarker = null ; if ( part instanceof IGotoMarker ) { gotoMarker = ( IGotoMarker ) part ; } else { gotoMarker = ( IGotoMarker ) part . getAdapter ( IGotoMarker . class ) ; } if ( gotoMarker != null ) { if ( jumpToPcal ) { final String moduleName = module . getName ( ) ; final TLAtoPCalMapping mapping = ToolboxHandle . getCurrentSpec ( ) . getTpMapping ( moduleName ) ; if ( mapping != null ) { problem = new TLAtoPCalMarker ( problem , mapping ) ; } else { UIHelper . setStatusLineMessage ( STR_ ) ; return ; } } gotoMarker . gotoMarker ( problem ) ; } } else { } }", "  public void pennPrint(PrintStream ps) {\n    pennPrint(new PrintWriter(new OutputStreamWriter(ps), true));\n  }\n", "public void removeEntry ( Remote object ) { Entry entry = _objMap . remove ( object ) ; _objIdMap . remove ( entry . m_ObjectId ) ; }", "    protected StringBuffer logoff(FacesContext context) {\n\n        return (action(context, \"/logoff\"));\n\n    }\n", "@Override\n    protected <T> CompletableFuture<T> doExecute(Command<T> command) throws Exception {\n        final CompletableFuture<T> future = new CompletableFuture<>();\n        executor.execute(() -> {\n            try {\n                future.complete(blockingExecute(command));\n            } catch (Throwable t) {\n                future.completeExceptionally(t);\n            }\n        });\n        return future;\n    }", "private JniServerSocketImpl(String host,int port) throws IOException {\n  _fd=bindPort(host,port);\n  _id=host + \":\" + port;\n  _host=host;\n  if (_fd != 0) {\n  }\n else   if (port < 1000) {\n    throw new IOException(L.l(\"Socket bind failed for {0}:{1} while running as {2}.  Check for for permissions (root on unix) and for other processes listening to the port.\",host,port,System.getProperty(\"user.name\")));\n  }\n else {\n    throw new IOException(L.l(\"Socket bind failed for {0}:{1} while running as {2}.  Check for other processes listening to the port.\",host,port,System.getProperty(\"user.name\")));\n  }\n}\n", "private Group readGroup(Node groupNode) throws Exception\n   {\n      String groupName = groupNode.getName();\n      String desc = utils.readString(groupNode, GroupProperties.JOS_DESCRIPTION);\n      String label = utils.readString(groupNode, GroupProperties.JOS_LABEL);\n      String parentId = utils.getGroupIds(groupNode).parentId;\n\n      GroupImpl group = new GroupImpl(groupName, parentId);\n      group.setInternalId(groupNode.getUUID());\n      group.setDescription(desc);\n      group.setLabel(label);\n\n      return group;\n   }", "public ChannelBuffer formatFilterConfigV1(\n      final Map<String, Map<String, String>> config) {\n    return serializeJSON(config);\n  }", "protected int makePressColor ( ) { int r = ( this . backgroundColor > > NUM_ ) & NUM_ ; int g = ( this . backgroundColor > > NUM_ ) & NUM_ ; int b = ( this . backgroundColor > > NUM_ ) & NUM_ ; return Color . argb ( NUM_ , r , g , b ) ; }", "public void marshall(ApplySchemaRequest applySchemaRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (applySchemaRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(applySchemaRequest.getPublishedSchemaArn(), PUBLISHEDSCHEMAARN_BINDING);\n            protocolMarshaller.marshall(applySchemaRequest.getDirectoryArn(), DIRECTORYARN_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public HashMap < String , DataService_Definition > addDataService ( DataService_Definition dataServiceDefinition ) { this . listDataServiceDefinition . put ( dataServiceDefinition . getName ( ) , dataServiceDefinition ) ; return this . listDataServiceDefinition ; }", "private String toPathname(final String... pathElements){\n  if (pathElements != null) {\n    final StringBuilder buffer=new StringBuilder();\n    for (    String pathElement : pathElements) {\n      buffer.append(File.separator);\n      buffer.append(pathElement);\n    }\n    return buffer.toString();\n  }\n  return null;\n}\n", "private Set<HiCSSubspace> calculateSubspaces(Relation<? extends NumberVector> relation,ArrayList<ArrayDBIDs> subspaceIndex,Random random){\n  final int dbdim=RelationUtil.dimensionality(relation);\n  FiniteProgress dprog=LOG.isVerbose() ? new FiniteProgress(\"Subspace dimensionality\",dbdim,LOG) : null;\n  if (dprog != null) {\n    dprog.setProcessed(2,LOG);\n  }\n  TreeSet<HiCSSubspace> subspaceList=new TreeSet<>(HiCSSubspace.SORT_BY_SUBSPACE);\n  TopBoundedHeap<HiCSSubspace> dDimensionalList=new TopBoundedHeap<>(cutoff,HiCSSubspace.SORT_BY_CONTRAST_ASC);\n  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress(\"Generating two-element subsets\",(dbdim * (dbdim - 1)) >> 1,LOG) : null;\n  for (int i=0; i < dbdim; i++) {\n    for (int j=i + 1; j < dbdim; j++) {\n      HiCSSubspace ts=new HiCSSubspace();\n      ts.set(i);\n      ts.set(j);\n      calculateContrast(relation,ts,subspaceIndex,random);\n      dDimensionalList.add(ts);\n      LOG.incrementProcessed(prog);\n    }\n  }\n  LOG.ensureCompleted(prog);\n  IndefiniteProgress qprog=LOG.isVerbose() ? new IndefiniteProgress(\"Testing subspace candidates\",LOG) : null;\n  for (int d=3; !dDimensionalList.isEmpty(); d++) {\n    if (dprog != null) {\n      dprog.setProcessed(d,LOG);\n    }\n    ArrayList<HiCSSubspace> candidateList=new ArrayList<>(dDimensionalList.size());\n    for (Heap<HiCSSubspace>.UnorderedIter it=dDimensionalList.unorderedIter(); it.valid(); it.advance()) {\n      subspaceList.add(it.get());\n      candidateList.add(it.get());\n    }\n    dDimensionalList.clear();\n    Collections.sort(candidateList,HiCSSubspace.SORT_BY_SUBSPACE);\n    for (int i=0; i < candidateList.size() - 1; i++) {\n      for (int j=i + 1; j < candidateList.size(); j++) {\n        HiCSSubspace set1=candidateList.get(i);\n        HiCSSubspace set2=candidateList.get(j);\n        HiCSSubspace joinedSet=new HiCSSubspace();\n        joinedSet.or(set1);\n        joinedSet.or(set2);\n        if (joinedSet.cardinality() != d) {\n          continue;\n        }\n        calculateContrast(relation,joinedSet,subspaceIndex,random);\n        dDimensionalList.add(joinedSet);\n        LOG.incrementProcessed(qprog);\n      }\n    }\n    for (    HiCSSubspace cand : candidateList) {\n      for (Heap<HiCSSubspace>.UnorderedIter it=dDimensionalList.unorderedIter(); it.valid(); it.advance()) {\n        if (it.get().contrast > cand.contrast) {\n          subspaceList.remove(cand);\n          break;\n        }\n      }\n    }\n  }\n  LOG.setCompleted(qprog);\n  if (dprog != null) {\n    dprog.setProcessed(dbdim,LOG);\n    dprog.ensureCompleted(LOG);\n  }\n  return subspaceList;\n}\n", "public static URI toURI ( CharSequence self ) throws URISyntaxException { return new URI ( self . toString ( ) ) ; }", "public static ReilInstruction createXor ( final Address address , final ReilOperand firstOperand , final ReilOperand secondOperand , final ReilOperand thirdOperand ) { return new ReilInstruction ( address , ReilMnemonics . XOR , firstOperand , secondOpera", "\tprotected void doRepaints() {\n\t\tif (frame == null)\n\t\t\treturn;\n\t\trepaint((int) x-1, (int) y-1, cursorWidth + 3, cursorHeight + 3);\n\t}\n", "    public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {\n        \nif (\"HPE_Location_Server\".equals(portName)) {\n            setHPE_Location_ServerEndpointAddress(address);\n        }\n        else \n{ // Unknown Port Name\n            throw new javax.xml.rpc.ServiceException(\" Cannot set Endpoint Address for Unknown Port\" + portName);\n        }\n    }\n", "public int getTotalLockCount() {\n      int count = 0;\n      for (ReentrantReadWriteLock lock : sharedLocks) {\n         count += lock.getReadLockCount();\n         count += lock.isWriteLocked() ? 1 : 0;\n      }\n      return count;\n   }", "public void removeClient ( ConnectorHandler client ) { deadClients . offer ( client ) ; }", "private static void populateLevels ( ) { levelList = new LinkedList < > ( ) ; levelList . add ( Level . SEVERE . toString ( ) ) ; levelList . add ( Level . WARNING . toString ( ) ) ; levelList . add ( Level . INFO . toString ( ) ) ; levelList . add ( Leve", "    public Number getNextLower(Number n) {\n        nextLower.setDoubleValue(domain.getNextLower(n.doubleValue()));\n        return nextLower;\n    }\n", "@Beta\n  public ImmutableSetMultimap<K, V> asMultimap() {\n    ImmutableSetMultimap<K, V> result = multimapView;\n    return (result == null)\n        ? (multimapView = new ImmutableSetMultimap<K, V>(\n            new MapViewOfValuesAsSingletonSets(), size(), null))\n        : result;\n  }", "private static JFreeChart createChart(){\n  XYSeries series1=new XYSeries(\"Series 1\");\n  series1.add(1.0,1.0);\n  series1.add(2.0,2.0);\n  series1.add(3.0,3.0);\n  XYDataset dataset=new XYSeriesCollection(series1);\n  return ChartFactory.createXYStepAreaChart(\"Step Chart\",\"Domain\",\"Range\",dataset);\n}\n", "public AwsSecurityFindingFilters withResourceRegion(StringFilter... resourceRegion) {\n        if (this.resourceRegion == null) {\n            setResourceRegion(new java.util.ArrayList<StringFilter>(resourceRegion.length));\n        }\n        for (StringFilter ele : resourceRegion) {\n            this.resourceRegion.add(ele);\n        }\n        return this;\n    }", "private Invoker exceptionMetered(Invoker invoker, List<Method> meteredMethods) {\n\n        ImmutableMap.Builder<String, InstrumentedInvokers.ExceptionMeter> meters =\n                new ImmutableMap.Builder<>();\n\n        for (Method m : meteredMethods) {\n\n            ExceptionMetered annotation = m.getAnnotation(ExceptionMetered.class);\n            final String name = chooseName(\n                    annotation.name(),\n                    annotation.absolute(),\n                    m,\n                    ExceptionMetered.DEFAULT_NAME_SUFFIX);\n            Meter meter = metricRegistry.meter(name);\n            meters.put(m.getName(), new InstrumentedInvokers.ExceptionMeter(meter, annotation.cause()));\n        }\n\n        return new InstrumentedInvokers.ExceptionMeteredInvoker(invoker, meters.build());\n    }", "public void startPreview ( ) { if ( camera != null && ! previewing ) { camera . startPreview ( ) ; previewing = BOOL_ ; } }", "public static Credential basic(String userName,String password){\n  try {\n    String usernameAndPassword=userName + \":\" + password;\n    byte[] bytes=usernameAndPassword.getBytes(\"ISO-8859-1\");\n    String encoded=Base64.encode(bytes);\n    return new Credential(\"Basic \" + encoded);\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new AssertionError();\n  }\n}\n", "public static boolean isLegalFileNameChar(char c){\n  return ILLEGAL_FILE_NAME_CHARS.indexOf(c) == -1;\n}\n", "public void onSplashScreenCreated(GVRSceneObject splashScreen) {\n        GVRTransform transform = splashScreen.getTransform();\n        transform.setPosition(0, 0, DEFAULT_SPLASH_Z);\n    }", "public JLabel createLabel ( String text , int x , int y , int width , int fontSize , Color color ) { JLabel label = new JLabel ( text ) ; label . setForeground ( color ) ; label . setBounds ( x , y , width , NUM_ ) ; label . setFont ( new Font ( STR_ , NUM_ , fontSize ) ) ; this . add ( label ) ; return label ; }", "    public int depth() {\n        return getName().depth();\n    }\n", "protected List<String> params(String name, List<FormItem> formItems){\n        List<String> vals = new ArrayList<String>();\n        for (FormItem formItem : formItems) {\n            if(!formItem.isFile() && name.equals(formItem.getFieldName())){\n                vals.add(formItem.getStreamAsString());\n            }\n        }\n        return vals;\n    }", "public void readFrom ( DataInput din ) throws IOException { if ( ! isHeadless ( ) ) { setTransactionID ( din . readUnsignedShort ( ) ) ; setProtocolID ( din . readUnsignedShort ( ) ) ; dataLength = din . readUnsignedShort ( ) ; } setUnitID ( din . readUnsignedByte ( ) ) ; setFunctionCode ( din . readUnsignedByte ( ) ) ; readData ( din ) ; }", "public void clearHeaderCache ( ) { mHeaderCache . clear ( ) ; }", "public long length(byte[] id){\n  ByteBuffer idBuffer=ByteBuffer.wrap(id);\n  long length=0;\n  while (idBuffer.hasRemaining()) {\nswitch (idBuffer.get()) {\ncase 0:\n      int len=DataUtils.readVarInt(idBuffer);\n    idBuffer.position(idBuffer.position() + len);\n  length+=len;\nbreak;\ncase 1:\nlength+=DataUtils.readVarInt(idBuffer);\nDataUtils.readVarLong(idBuffer);\nbreak;\ncase 2:\nlength+=DataUtils.readVarLong(idBuffer);\nDataUtils.readVarLong(idBuffer);\nbreak;\ndefault :\nthrow DataUtils.newIllegalArgumentException(\"Unsupported id {0}\",Arrays.toString(id));\n}\n}\nreturn length;\n}\n", "public void removeAllTrackingIcons(){\n  if (trackingIcons != null && trackingIcons.size() > 0) {\n    trackingIcons.clear();\n    repaint();\n  }\n}\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "    protected void createFieldEditors() {\n        addField(new KeyValueListFieldEditor(TexlipseProperties.BUILD_ENV_SETTINGS, TexlipsePlugin.getResourceString(\"preferenceBuilderEnvLabel\"), getFieldEditorParent()));\n    }\n", "@Override\n  public void deliver(WriteStream os, OutHttp2 outHttp)\n    throws IOException\n  {\n    OutHeader outHeader = outHttp.getOutHeader();\n    \n    int streamId = streamId(outHttp);\n    \n    outHeader.openHeaders(streamId,\n                          getPad(),\n                          getPriorityDependency(), \n                          getPriorityWeight(),\n                          isPriorityExclusive(),\n                          getFlagsHttp());\n    \n    writeHeaders(outHeader);\n    \n    outHeader.closeHeaders();\n  }", "protected static String coerceToString(Value value, ExecutionContext context) {\n\t\tif (value == null)\n\t\t\treturn null;\n\t\tif (!(value instanceof StringValue))\n\t\t\tthrow new CommandExecutionException(\"Value \" + value + \", class \"\n\t\t\t\t\t+ value.getClass().getCanonicalName() + \" is not a string\");\n\t\tString str = value.toString();\n\t\tif (str.indexOf(\"$\") == -1 || context == null)\n\t\t\treturn str;\n\t\treturn (String) Utils.groovyEvaluate(context, \"\\\"\" + str + \"\\\"\");\n\t}", "synchronized void openConnection(final ModelController controller, final ActiveOperation.CompletedCallback<ModelNode> callback) throws Exception {\n        boolean ok = false;\n        final Connection connection = connectionManager.connect();\n        try {\n            channelHandler.executeRequest(new ServerRegisterRequest(), null, callback);\n            // HC is the same version, so it will support sending the subject\n            channelHandler.getAttachments().attach(TransactionalProtocolClient.SEND_IDENTITY, Boolean.TRUE);\n            channelHandler.getAttachments().attach(TransactionalProtocolClient.SEND_IN_VM, Boolean.TRUE);\n            channelHandler.addHandlerFactory(new TransactionalProtocolOperationHandler(controller, channelHandler, responseAttachmentSupport));\n            ok = true;\n        } finally {\n            if(!ok) {\n                connection.close();\n            }\n        }\n    }", "    public boolean containsClass(Class type) {\n        return (type == null) ? false : containsClass(type.getName());\n    }\n", "public synchronized List<TickRange> getAllMessageItemsOnStream(boolean includeUncommitted)\n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(this, tc, \"getAllMessageItemsOnStream\", Boolean.valueOf(includeUncommitted));\n   \n    List<TickRange> msgs = new LinkedList<TickRange>();\n    oststream.setCursor(0);\n    // Get the first TickRange\n    TickRange tr = oststream.getNext();\n    while (tr.endstamp < RangeList.INFINITY)\n    {\n      if (tr.type == TickRange.Value)\n      {\n        //get this msg from the downstream control\n        msgs.add((TickRange)tr.clone());\n      }\n      else if (tr.type == TickRange.Uncommitted && includeUncommitted)\n      {\n        //get this msg directly\n        if(tr.value!=null)\n          msgs.add((TickRange)tr.clone());\n      }\n      tr = oststream.getNext();\n    } // end while\n       \n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.exit(tc, \"getAllMessageItemsOnStream\", msgs);\n    return Collections.unmodifiableList(msgs);\n  }", "public static void writeStringToFile ( File file , String data , String encoding , boolean append ) throws IOException { writeStringToFile ( file , data , Charsets . toCharset ( encoding ) , append ) ; }", "public MatchObject ( List < String > subclasses , Map < Integer , List > grant , RuntimeException fault ) { this . setSubclasses ( subclasses ) ; this . setFault ( fault ) ; int size = grant . size ( ) ; setValue ( new List [ size ] ) ; setIndex ( new int [ size ] ) ; int i = NUM_ ; for ( Map . Entry < Integer , List > entry : grant . entrySet ( ) ) { getIndex ( ) [ i ] = entry . getKey ( ) . intValue ( ) ; getValue ( ) [ i ++ ] = entry . getValue ( ) ; } }", "\tpublic boolean hasLength() {\n\t\treturn (_length > 0);\n\t}\n", "public void addColumn ( final String content ) { if ( ! firstColumn ) { out . print ( columnSeparator ) ; } out . print ( StringUtil . escapeString ( content ) ) ; firstColumn = BOOL_ ; }", "public static Object toWrapperArray(Object array) {\r\n    if (!array.getClass().isArray()) {\r\n      throw new IllegalArgumentException(\"Must give array object.\");\r\n    }\r\n    if (isPrimitiveArray(array.getClass())) {\r\n      int length = Array.getLength(array);\r\n      Object newArray = Array.newInstance(toWrapper(array.getClass().getComponentType()), length);\r\n      for (int i = 0; i < length; i++) {\r\n        Array.set(newArray, i, toWrapper(Array.get(array, i)));\r\n      }\r\n      return newArray;\r\n    } else if (array.getClass().getComponentType().isArray()) {\r\n      int length = Array.getLength(array);\r\n      Object newArray = Array.newInstance(toWrapperArray(array.getClass().getComponentType()), length);\r\n      for (int i = 0; i < length; i++) {\r\n        Array.set(newArray, i, toWrapperArray(Array.get(array, i)));\r\n      }\r\n      return newArray;\r\n    }\r\n    return array;\r\n  }", "public SceneBlock getBlock (int tx, int ty)\n    {\n        int bx = MathUtil.floorDiv(tx, _metrics.blockwid);\n        int by = MathUtil.floorDiv(ty, _metrics.blockhei);\n        return _blocks.get(compose(bx, by));\n    }", "\tpublic int transferStateAndDataFrom(JBuffer buffer) {\n\t\tfinal int len = buffer.size();\n\t\tMalloced b = getMemoryBuffer(len);\n\n\t\tb.transferFrom(buffer);\n\n\t\treturn peerStateAndData(b, 0);\n\t}\n", "public static void releasePlugin ( ReplicatorPlugin plugin , PluginContext context ) { String pluginClassName = plugin . getClass ( ) . getName ( ) ; try { plugin . release ( context ) ; } catch ( Throwable t ) { logger . warn ( STR_ + pluginClassName , t ) ; } if ( logger . isDebugEnabled ( ) ) logger . debug ( STR_ + pluginClassName ) ; }", "public void marshall(GrokClassifier grokClassifier, ProtocolMarshaller protocolMarshaller) {\n\n        if (grokClassifier == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(grokClassifier.getName(), NAME_BINDING);\n            protocolMarshaller.marshall(grokClassifier.getClassification(), CLASSIFICATION_BINDING);\n            protocolMarshaller.marshall(grokClassifier.getCreationTime(), CREATIONTIME_BINDING);\n            protocolMarshaller.marshall(grokClassifier.getLastUpdated(), LASTUPDATED_BINDING);\n            protocolMarshaller.marshall(grokClassifier.getVersion(), VERSION_BINDING);\n            protocolMarshaller.marshall(grokClassifier.getGrokPattern(), GROKPATTERN_BINDING);\n            protocolMarshaller.marshall(grokClassifier.getCustomPatterns(), CUSTOMPATTERNS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public static JCalendarPopup createCalendarPopup(String strDateParam, Date dateTarget, Component button)\n    {\n        return JCalendarPopup.createCalendarPopup(null, dateTarget, button, null);\n    }", "private void internalRemove(final Object[] elements){\n  Object input=getInput();\n  for (int i=0; i < elements.length; ++i) {\n    if (equals(elements[i],input)) {\n      setInput(null);\n      return;\n    }\n    int ix=getElementIndex(elements[i]);\n    if (ix >= 0) {\n      CheckItem item=listRemove(ix);\n      listMap.remove(ix);\n      unmapElement(elements[i],item.getControl());\n    }\n  }\n}\n", "public static List<String> readListResource(String path)\n    {\n        Class<?> callerClass = resolveCaller();\n        if (callerClass == null)\n        {\n            return null;\n        }\n\n        return readListResource(resolveCaller(), path);\n    }", "public void postDeserialize() throws MalformedJsonException {\n  observableDelegate=FXCollections.observableArrayList(delegate);\n  delegate.clear();\n  try {\n    createUnderlying();\n  }\n catch (  NullPointerException npe) {\n    throw new MalformedJsonException(npe.getMessage());\n  }\n}\n", "private List<CmsResource> getVirtualLogResources(CmsObject cms) throws CmsException {\n\n        List<CmsResource> virtualResources = Lists.newArrayList();\n        for (CmsModule module : OpenCms.getModuleManager().getAllInstalledModules()) {\n            String path = CmsStringUtil.joinPaths(LOG_PATH, module.getName() + \".log\");\n            CmsResource res = createFakeBinaryFile(path);\n            virtualResources.add(res);\n        }\n        return virtualResources;\n    }", "public static void keyPresent(final String key, final Map<String, ?> map) {\n    if (!map.containsKey(key)) {\n      throw new IllegalStateException(\n          String.format(\"expected %s to be present\", key));\n    }\n  }", "    public boolean performOk() {\n        return pathVariablesGroup.performOk();\n    }\n", "  public boolean setFlags(final Properties properties) {\n    reset();\n    boolean success = true;\n    final Collection pendingRequired = getRequired();\n    final Enumeration keys = properties.propertyNames();\n    while (keys.hasMoreElements()) {\n      final String name = (String) keys.nextElement();\n      if (!mLongNames.containsKey(name)) {\n        success = false;\n        break;\n      }\n      try {\n        final Flag flag = getFlag(name);\n        pendingRequired.remove(flag);\n        setFlag(flag, properties.getProperty(name));\n      } catch (RuntimeException e) {\n        return false;\n      }\n    }\n    if (success && !pendingRequired.isEmpty()) {\n      setPendingParseMessage(pendingRequired);\n      success = false;\n    }\n    return success;\n  }\n", "@Deprecated public static String megastrip(String str,boolean left,boolean right,String what){\n  if (str == null) {\n    return null;\n  }\n  int limitLeft=0;\n  int limitRight=str.length() - 1;\n  while (left && limitLeft <= limitRight && what.indexOf(str.charAt(limitLeft)) >= 0) {\n    limitLeft++;\n  }\n  while (right && limitRight >= limitLeft && what.indexOf(str.charAt(limitRight)) >= 0) {\n    limitRight--;\n  }\n  return str.substring(limitLeft,limitRight + 1);\n}\n", "public CLimitedInputField ( final String text ) { super ( new JTextFieldLimit ( NUM_ ) , text , NUM_ ) ; }", "public GuacamoleHTTPTunnel get(String uuid) {\n\n        // Update the last access time\n        GuacamoleHTTPTunnel tunnel = tunnelMap.get(uuid);\n        if (tunnel != null)\n            tunnel.access();\n\n        // Return tunnel, if any\n        return tunnel;\n\n    }", "void initialize ( T entity ) ;", "private Widget createWidget(JSONObject elem,View view) throws ScreenConfigException {\n  if (!elem.has(\"id\")) {\n    throw new CruxGeneratorException(\"The id attribute is required for CRUX Widgets. \" + \"On view [\" + view.getId() + \"], there is an widget of ", "public void startDocument() throws SAXException\n  {\n\n    if (DEBUG)\n      System.out.println(\"TransformerHandlerImpl#startDocument\");\n      \n    m_insideParse = true;\n\n   // Thread listener = new Thread(m_transformer);\n\n    if (m_contentHandler != null)\n    {\n      //m_transformer.setTransformThread(listener);\n      if(m_incremental)\n      {\n        m_transformer.setSourceTreeDocForThread(m_dtm.getDocument());\n            \n        int cpriority = Thread.currentThread().getPriority();\n    \n        // runTransformThread is equivalent with the 2.0.1 code,\n        // except that the Thread may come from a pool.\n        m_transformer.runTransformThread( cpriority );\n      }\n\n      // This is now done _last_, because IncrementalSAXSource_Filter\n      // will immediately go into a \"wait until events are requested\"\n      // pause. I believe that will close our timing window.\n      // %REVIEW%\n      m_contentHandler.startDocument();\n   }\n        \n   //listener.setDaemon(false);\n   //listener.start();\n\n  }", "public void importClass(String name){\n  if (importedClasses == null)   importedClasses=new Hashtable();\n  importedClasses.put(Name.suffix(name,1),name);\n  nameSpaceChanged();\n}\n", "public void removeElementAt(int i){\n  if (null == m_map)   return;\n  if (i >= m_firstFree)   throw new ArrayIndexOutOfBoundsException(i + \" >= \" + m_firstFree);\n else   if (i < 0)   throw new ArrayIndexOutOfBoundsException(i);\n  if (i < m_firstFree - 1)   System.arraycopy(m_map,i + 1,m_map,i,m_firstFree - i - 1);\n  m_firstFree--;\n  m_map[m_firstFree]=null;\n}\n", "private long parseLong(String value,String setting){\n  long number;\n  int multiplier=getMultiplier(value);\n  if (multiplier > 1) {\n    value=value.replaceAll(\"[^\\\\d.]\",\"\");\n  }\n  try {\n    number=Long.parseLong(value) * multiplier;\n  }\n catch (  NumberFormatException e) {\n    throw new SettingsError(\"Invalid numeric setting '\" + value + \"' for '\"+ setting+ \"'\\n\"+ e.getMessage());\n  }\n  return number;\n}\n", "private static TreeElement recursiveFindSelected(TreeElement elem)\n    {\n        assert(elem != null);\n\n        if (elem.isSelected())\n            return elem;\n\n        TreeElement children[] = elem.getChildren();\n        assert(children != null);\n        for (int i = 0; i < children.length; i++) {\n            TreeElement e = recursiveFindSelected(children[i]);\n            if (e != null)\n                return e;\n        }\n        return null;\n    }", "void putLast ( E e ) throws InterruptedException ;", "public ContentsId get(String tableName) {\n\t\tContentsId contentsId = null;\n\t\ttry {\n\t\t\tif (contentsIdDao.isTableExists()) {\n\t\t\t\tcontentsId = contentsIdDao.queryForTableName(tableName);\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\tthrow new GeoPackageException(\n\t\t\t\t\t\"Failed to query contents id for GeoPackage: \"\n\t\t\t\t\t\t\t+ geoPackage.getName() + \", Table Name: \"\n\t\t\t\t\t\t\t+ tableName, e);\n\t\t}\n\t\treturn contentsId;\n\t}", "@Override public Connection connect(String url,Properties info) throws SQLException {\n  try {\n    if (info == null) {\n      info=new Properties();\n    }\n    if (!acceptsURL(url)) {\n      return null;\n    }\n    if (url.equals(DEFAULT_URL)) {\n      return DEFAULT_CONNECTION.get();\n    }\n    Connection c=DbUpgrade.connectOrUpgrade(url,info);\n    if (c != null) {\n      return c;\n    }\n    return new JdbcConnection(url,info);\n  }\n catch (  Exception e) {\n    throw DbException.toSQLException(e);\n  }\n}\n", "@SuppressWarnings( \"unchecked\" )\n    protected List<ImportMetadata> createImportMetadata( CompilationUnit unit ) {\n        List<ImportMetadata> metadata = new ArrayList<ImportMetadata>();\n        List<ImportDeclaration> imports = unit.imports();\n        if (!imports.isEmpty()) {\n            for (ImportDeclaration importDeclaration : imports) {\n                if (importDeclaration.isOnDemand()) {\n                    // typeImportOnDemand and staticImportOnDemand\n                    metadata.add(ImportMetadata.onDemand(JavaMetadataUtil.getName(importDeclaration.getName())));\n                } else {\n                    // singleTypeImport and singleStaticImport\n                    metadata.add(ImportMetadata.single(JavaMetadataUtil.getName(importDeclaration.getName())));\n                }\n            }\n        }\n        return metadata;\n    }", "\tpublic int getSampleRate(){\n        try {\n            if(this.getInitialised() == false) {\n                this.createChain();\n                this.setInitialised(true);\n            }\n        } catch (AOException e) {\n            e.printStackTrace();\n        }\n        return ((AudioObject)primaryAO.firstElement()).getSampleRate();\n\t}\n", "static void reset() {\n        WarpContext context = reference.get();\n        Validate.notNull(context, \"WarpContext in store can't be null when resetting\");\n        reference.compareAndSet(context, null);\n    }", "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>();\n  newVector.add(new Option(\"\\tSet the loss function to minimize.\\n\\t0 = \" + \"hinge loss (SVM), 1 = log loss (logistic regression),\\n\\t\" + \"2 = squared loss (regression), 3 = epsilon insensitive loss (regression),\"+ \"\\n\\t4 = Huber loss (regression).\\n\\t(default = 0)\",\"F\",1,\"-F\"));\n  newVector.add(new Option(\"\\tThe learning rate. If normalization is\\n\" + \"\\tturned off (as it is automatically for streaming data), then the\\n\\t\" + \"default learning rate will need to be reduced \"+ \"(try 0.0001).\\n\\t(default = 0.01).\",\"L\",1,\"-L\"));\n  newVector.add(new Option(\"\\tThe lambda regularization constant \" + \"(default = 0.0001)\",\"R\",1,\"-R <double>\"));\n  newVector.add(new Option(\"\\tThe number of epochs to perform (\" + \"batch learning only, default = 500)\",\"E\",1,\"-E <integer>\"));\n  newVector.add(new Option(\"\\tThe epsilon threshold (\" + \"epsilon-insenstive and Huber loss only, default = 1e-3)\",\"C\",1,\"-C <double>\"));\n  newVector.add(new Option(\"\\tDon't normalize the data\",\"N\",0,\"-N\"));\n  newVector.add(new Option(\"\\tDon't replace missing values\",\"M\",0,\"-M\"));\n  newVector.addAll(Collections.list(super.listOptions()));\n  return newVector.elements();\n}\n", "public CCMenuItem selectedItem(){\n  return subItems_.get(selectedIndex_);\n}\n", "public static void unescapeJava(final String text, final Writer writer)\n            throws IOException {\n\n        if (writer == null) {\n            throw new IllegalArgumentException(\"Argument 'writer' cannot be null\");\n        }\n        if (text == null) {\n            return;\n        }\n        if (text.indexOf('\\\\') < 0) {\n            // Fail fast, avoid more complex (and less JIT-table) method to execute if not needed\n            writer.write(text);\n            return;\n        }\n\n        JavaEscapeUtil.unescape(new InternalStringReader(text), writer);\n\n    }", "public void initialize(URI name, Configuration conf) throws IOException {\n    // if an underlying fs has not already been specified,\n    // create and initialize one\n    if (this.fs == null) {\n      Class<?> clazz = conf.getClass(\"fs.apitrace.underlyingfs.impl\",\n                                     DistributedFileSystem.class);\n      if (clazz == null) {\n        throw new IOException(\"No FileSystem for fs.apitrace.underlyingfs.impl.\");\n      }\n\n      this.fs = (FileSystem)ReflectionUtils.newInstance(clazz, null);\n      super.initialize(name, conf);\n    }\n\n    // trace conf options\n    for (String opt : traceConfOpts) {\n      APITrace.CallEvent ce = new APITrace.CallEvent();\n      ce.logCall(APITrace.COMMENT_msg, null,\n                 new Object[] {opt, conf.get(opt, \"\")});\n    }\n  }", "private void initEditVC() {\n\t\teditVC = new VelocityContainer(\"edit\", VELOCITY_ROOT + \"/edit.html\", trans, this);\n\t\teditVC.put(\"tabbedpane\", tabbedPane);\n\t\teditVC.contextPut(\"title\", trans.translate(\"area.edit.title\", new String[] { Formatter.esc(this.are", "public void put(int b) throws IOException {\n  buffer.write(b);\n}\n", "Node tryOptimizeBlock(Node n) {\n    // Remove any useless children\n    for (Node c = n.getFirstChild(); c != null; ) {\n      Node next = c.getNext();  // save c.next, since 'c' may be removed\n      if (!isUnremovableNode(c) && !mayHaveSideEffects(c)) {\n        checkNormalization(!NodeUtil.isFunctionDeclaration(n), \"function declaration\");\n        // TODO(johnlenz): determine what this is actually removing. Candidates\n        //    include: EMPTY nodes, control structures without children\n        //    (removing infinite loops), empty try blocks.  What else?\n        n.removeChild(c);\n        reportChangeToEnclosingScope(n);\n        markFunctionsDeleted(c);\n      } else {\n        tryOptimizeConditionalAfterAssign(c);\n      }\n      c = next;\n    }\n\n    if (n.isSyntheticBlock() || n.isScript() || n.getParent() == null) {\n      return n;\n    }\n\n    // Try to remove the block.\n    Node parent = n.getParent();\n    if (NodeUtil.tryMergeBlock(n, false)) {\n      reportChangeToEnclosingScope(parent);\n      return null;\n    }\n\n    return n;\n  }", "public  void treeExpand(){\n\t\tlog.trace(\"TreeRefresh\");\n\t\tsynchronized (TreeModel)\n\t\t{\n\t\ttreeRefresh();\n\t\t//TreeModel.reload();\n\n//\t\tjTreeContacts.expandRow(0); // expand root node\n\n\t\tif (expandContacts || expandAllNodes){\n\t\t\tfor (int row=jTreeContacts.ge", "public SIXAResource createXAResource(boolean useSingleResource)\n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(tc, \"createXAResource\", new Boolean(useSingleResource));\n\n    SIXAResource resource = null;\n\n      //get the message store resource\n    resource = transactionFactory.createXAResource();\n    \n      \n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.exit(tc, \"createXAResource\", resource);\n\n    return resource;\n  }", "public boolean contains(){\n  int next=0;\n  final int size=fValues.size();\n  LOOP:   for (int i=0; i < size; i=next) {\n    next=i + fFieldCount;\n    for (int j=0; j < fFieldCount; j++) {\n      Object value1=fLocalValues[j];\n      Object value2=fValues.elementAt(i);\n      short valueType1=fLocalValueTypes[j];\n      short valueType2=getValueTypeAt(i);\n      if (value1 == null || value2 == null || valueType1 != valueType2 || !(value1.equals(value2))) {\n        continue LOOP;\n      }\n else       if (valueType1 == XSConstants.LIST_DT || valueType1 == XSConstants.LISTOFUNION_DT) {\n        ShortList list1=fLocalItemValueTypes[j];\n        ShortList list2=getItemValueTypeAt(i);\n        if (list1 == null || list2 == null || !list1.equals(list2))         continue LOOP;\n      }\n      i++;\n    }\n    return true;\n  }\n  return false;\n}\n", "  public boolean isStatementExpression() {\n    return true;\n  }\n", "\tprotected AbstractArrayRow ( Class[] type, String[] name, byte[] id ) {\n\t\tif ( null == type || null == name || type.length != name.length )\n\t\t\tthrow new IllegalArgumentException( \"Type and name must be given and lengths must match.\" );\n\t\t_name = name;\n\t\t_type = type;\n\t\t_columns = _name.length;\n\t\t_data = new Object[_columns];\n\t\t_id = id;\n\t\t_next = null;\n\t}\n", "public <T> DynamicType.Builder<T> redefine(Class<T> type) {\n        return redefine(type, ClassFileLocator.ForClassLoader.of(type.getClassLoader()));\n    }", "protected BufferedImage rotate(double angle) {\n        BufferedImage target = new BufferedImage(height, width, awt.getType());\n        Graphics2D g2 = (Graphics2D) target.getGraphics();\n        final int offsetx, offsety;\n        if (angle < 0) {\n            offsetx = 0;\n            offsety = width;\n        } else if (angle > 0) {\n            offsetx = height;\n            offsety = 0;\n        } else {\n            offsetx = 0;\n            offsety = 0;\n        }\n        g2.translate(offsetx, offsety);\n        g2.rotate(angle);\n        g2.drawImage(awt, 0, 0, null);\n        g2.dispose();\n        return target;\n    }", "public static License read(final String license){\n  final String trimmedLicense=license.trim();\n  if (sLicenses.containsKey(trimmedLicense)) {\n    return sLicenses.get(trimmedLicense);\n  }\n else {\n    throw new IllegalStateException(String.format(\"no such license available: %s, did you forget to register it?\",trimmedLicense));\n  }\n}\n", "public static String Indent ( String str ) { curIndent [ indentDepth + NUM_ ] = curIndent [ indentDepth ] + str . length ( ) ; indentDepth = indentDepth + NUM_ ; return str ; }", "public void clear(){\n  cartItemMap.clear();\n  totalPrice=BigDecimal.ZERO;\n  totalQuantity=0;\n}\n", "public static int jacobi(BigInteger A,BigInteger B){\n  BigInteger a, b, v;\n  long k=1;\n  k=1;\n  if (B.equals(ZERO)) {\n    a=A.abs();\n    return a.equals(ONE) ? 1 : 0;\n  }\n  if (!A.testBit(0) && !B.testBit(0)) {\n    return 0;\n  }\n  a=A;\n  b=B;\n  if (b.signum() == -1) {\n    b=b.negate();\n    if (a.signum() == -1) {\n      k=-1;\n    }\n  }\n  v=ZERO;\n  while (!b.testBit(0)) {\n    v=v.add(ONE);\n    b=b.divide(TWO);\n  }\n  if (v.testBit(0)) {\n    k=k * jacobiTable[a.intValue() & 7];\n  }\n  if (a.signum() < 0) {\n    if (b.testBit(1)) {\n      k=-k;\n    }\n    a=a.negate();\n  }\n  while (a.signum() != 0) {\n    v=ZERO;\n    while (!a.testBit(0)) {\n      v=v.add(ONE);\n      a=a.divide(TWO);\n    }\n    if (v.testBit(0)) {\n      k=k * jacobiTable[b.intValue() & 7];\n    }\n    if (a.compareTo(b) < 0) {\n      BigInteger x=a;\n      a=b;\n      b=x;\n      if (a.testBit(1) && b.testBit(1)) {\n        k=-k;\n      }\n    }\n    a=a.subtract(b);\n  }\n  return b.equals(ONE) ? (int)k : 0;\n}\n", "public static MediaTable create(String tableName,\n\t\t\tList<UserCustomColumn> additionalColumns) {\n\t\treturn create(tableName, null, additionalColumns);\n\t}", "public UpdateRequest add(final SolrInputDocument doc){\n  Objects.requireNonNull(doc,\"Cannot add a null SolrInputDocument\");\n  if (documents == null) {\n    documents=new LinkedHashMap<>();\n  }\n  documents.put(doc,null);\n  return this;\n}\n", "public RequestOutputStream write(final String value) throws IOException {\n  final ByteBuffer bytes=encoder.encode(CharBuffer.wrap(value));\n  super.write(bytes.array(),0,bytes.limit());\n  return this;\n}\n", "private static boolean usable(Method m,Class c,Class base){\n  int mods=m.getModifiers();\n  return (m.getReturnType() == ProxyTrustIterator.class && m.getExceptionTypes().length == 0 && (mods & Modifier.STATIC) == 0 && ((mods & (Modifier.PUBLIC | Modifier.PROTECTED)) != 0 || ((mods & Modifier.PRIVATE) != 0 ? c == base : samePackage(c,base))));\n}\n", "public byte[] getFrameData(String id)\n\t{\n\t\tif (frames.containsKey(id))\n\t\t{\n\t\t\treturn ((ID3v2Frame) frames.get(id)).getFrameData();\n\t\t}\n\n\t\treturn null;\n\t}", "private boolean isTreeSymbolEffectivelyFinalOrUnmodifiable(Tree tree){\n  Element elem=InternalUtils.symbol(tree);\n  ElementKind ek=elem.getKind();\n  return ek == ElementKind.PACKAGE || ek == ElementKind.CLASS || ek == ElementKind.METHOD || ElementUtils.isEffectivelyFinal(elem);\n}\n", "public void deactivate(){\n  stop();\n  destroy();\n  if (!runManaged) {\n    System.exit(0);\n  }\n}\n", "public void read(Reader policy) throws ParsingException, IOException {\n  if (!(policy instanceof BufferedReader)) {\n    policy=new BufferedReader(policy);\n  }\n  st=new StreamTokenizer(policy);\n  st.resetSyntax();\n  st.wordChars('a','z');\n  st.wordChars('A','Z');\n  st.wordChars('.','.');\n  st.wordChars('0','9');\n  st.wordChars('_','_');\n  st.wordChars('$','$');\n  st.wordChars(128 + 32,255);\n  st.whitespaceChars(0,' ');\n  st.commentChar('/');\n  st.quoteChar('\\'');\n  st.quoteChar('\"');\n  st.lowerCaseMode(false);\n  st.ordinaryChar('/');\n  st.slashSlashComments(true);\n  st.slashStarComments(true);\n  lookahead=st.nextToken();\n  GrantEntry ge=null;\n  while (lookahead != StreamTokenizer.TT_EOF) {\n    if (peek(\"grant\")) {\n      ge=parseGrantEntry();\n      if (ge != null)       add(ge);\n    }\n else     if (peek(\"keystore\") && keyStoreUrlString == null) {\n      parseKeyStoreEntry();\n    }\n else     if (peek(\"keystorePasswordURL\") && storePassURL == null) {\n      parseStorePassURL();\n    }\n else     if (ge == null && keyStoreUrlString == null && storePassURL == null && peek(\"domain\")) {\n      if (domainEntries == null) {\n        domainEntries=new TreeMap<>();\n      }\n      DomainEntry de=parseDomainEntry();\n      if (de != null) {\n        String domainName=de.getName();\n        if (!domainEntries.containsKey(domainName)) {\n          domainEntries.put(domainName,de);\n        }\n else {\n          MessageFormat form=new MessageFormat(ResourcesMgr.getString(\"duplicate.keystore.domain.name\"));\n          Object[] source={domainName};\n          throw new ParsingException(form.format(source));\n        }\n      }\n    }\n else {\n    }\n    match(\";\");\n  }\n  if (keyStoreUrlString == null && storePassURL != null) {\n    throw new ParsingException(ResourcesMgr.getString(\"keystorePasswordURL.can.not.be.specified.without.also.specifying.keystore\"));\n  }\n}\n", "public boolean contains ( T obj ) { lock . lock ( ) ; try { if ( _objectsMap != null ) { return _objectsMap . containsKey ( obj ) ; } return contains_impl ( obj ) ; } finally { lock . unlock ( ) ; } }", "   public HL7Segment newInstance( HL7SegmentContainer parent ) {\n      return new FT1Segment( parent );\n   }\n", "    public void setMinCols(int minCols) {\n        checkValidColumnCount(minCols);\n        this.minCols = minCols;\n    }\n", "    public void resolve() {\n        final Validator validator = createValidator();\n        resolve(validator); // resolve self and children\n        // Create a dummy result so we can use its evaluator\n        final Evaluator evaluator = RolapUtil.createEvaluator(this);\n        ExpCompiler compiler = createCompiler(evaluator, validator, Collections.singletonList(resultStyle));\n        compile(compiler);\n    }\n", "    public State ( String id ) {\n        this(id, false);\n    }\n", "public static void write(float latPoint,float lonPoint,float radius,LinkProperties properties,DataOutputStream dos) throws IOException {\n  LinkCircle.write(latPoint,lonPoint,radius,-1,-1,properties,dos);\n}\n", "private String removeParameters(String targetUri){\n  int parameterIndex=targetUri.lastIndexOf('?');\n  if (parameterIndex != NO_PARAMETER_FOUND) {\n    return targetUri.substring(START_INDEX,parameterIndex);\n  }\n  return targetUri;\n}\n", "TreeBin(TreeNode<K,V> b){\n  super(TREEBIN,null,null,null);\n  this.first=b;\n  TreeNode<K,V> r=null;\n  for (TreeNode<K,V> x=b, next; x != null; x=next) {\n    next=(TreeNode<K,V>)x.next;\n    x.left=x.right=null;\n    if (r == null) {\n      x.parent=null;\n      x.red=false;\n      r=x;\n    }\n else {\n      K k=x.key;\n      int h=x.hash;\n      Class<?> kc=null;\n      for (TreeNode<K,V> p=r; ; ) {\n        int dir, ph;\n        K pk=p.key;\n        if ((ph=p.hash) > h)         dir=-1;\n else         if (ph < h)         dir=1;\n else         if ((kc == null && (kc=comparableClassFor(k)) == null) || (dir=compareComparables(kc,k,pk)) == 0)         dir=tieBreakOrder(k,pk);\n        TreeNode<K,V> xp=p;\n        if ((p=(dir <= 0) ? p.left : p.right) == null) {\n          x.parent=xp;\n          if (dir <= 0)           xp.left=x;\n else           xp.right=x;\n          r=balanceInsertion(r,x);\n          break;\n        }\n      }\n    }\n  }\n  this.root=r;\n  assert checkInvariants(root);\n}\n", "private void fillXMLAttributes(StartElement event){\n  fAttributes.removeAllAttributes();\n  final Iterator attrs=event.getAttributes();\n  while (attrs.hasNext()) {\n    Attribute attr=(Attribute)attrs.next();\n    fillQName(fAttributeQName,attr.getName());\n    String type=attr.getDTDType();\n    int idx=fAttributes.getLength();\n    fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,attr.getValue());\n    fAttributes.setSpecified(idx,attr.isSpecified());\n  }\n}\n", "public ValueType popValue() throws DataflowAnalysisException {\n  if (!isValid()) {\n    throw new DataflowAnalysisException(\"accessing top or bottom frame\");\n  }\n  if (slotList.size() == numLocals) {\n    throw new DataflowAnalysisException(\"operand stack empty\");\n  }\n  return slotList.remove(slotList.size() - 1);\n}\n", "public void testgetPasswordForUser ( ) throws ConfigurationException { PasswordManager pwd = null ; String goodPassword = null ; try { pwd = new PasswordManager ( STR_ ) ; } catch ( ConfigurationException e ) { assertTrue ( BOOL_ ) ; } goodPassword = pwd ", "    public void writeBoolean(boolean b) {\n        if (b) {\n            stream.print(1);\n        } else {\n            stream.print(0);\n        }\n        space();\n    }\n", "\tprotected void removedVariable(String name, Variable<C, PM> variable, boolean isExplicit) {\n\t\tgetResource().getContents().remove(variable);\n\t}\n", "    public PicoContainer getGlobalContainer() {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"getGlobalContainer() - start\");\n        }\n\n        assert (globalContainer != null);\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"getGlobalContainer() - end - return value = \"\n                    + globalContainer);\n        }\n        return globalContainer;\n    }\n", "public boolean canBreakOnModuleUnload ( ) { return canBreakOnModuleUnload ; }", "public static int rectCrossingsForQuad(int crossings,double rxmin,double rymin,double rxmax,double rymax,double x0,double y0,double xc,double yc,double x1,double y1,int level){\n  if (y0 >= rymax && yc >= rymax && y1 >= rymax)   return crossings;\n  if (y0 <= rymin && yc <= rymin && y1 <= rymin)   return crossings;\n  if (x0 <= rxmin && xc <= rxmin && x1 <= rxmin)   return crossings;\n  if (x0 >= rxmax && xc >= rxmax && x1 >= rxmax) {\n    if (y0 < y1) {\n      if (y0 <= rymin && y1 > rymin)       crossings++;\n      if (y0 < rymax && y1 >= rymax)       crossings++;\n    }\n else     if (y1 < y0) {\n      if (y1 <= rymin && y0 > rymin)       crossings--;\n      if (y1 < rymax && y0 >= rymax)       crossings--;\n    }\n    return crossings;\n  }\n  if ((x0 < rxmax && x0 > rxmin && y0 < rymax && y0 > rymin) || (x1 < rxmax && x1 > rxmin && y1 < rymax && y1 > rymin)) {\n    return RECT_INTERSECTS;\n  }\n  if (level > 52) {\n    return rectCrossingsForLine(crossings,rxmin,rymin,rxmax,rymax,x0,y0,x1,y1);\n  }\n  double x0c=(x0 + xc) / 2;\n  double y0c=(y0 + yc) / 2;\n  double xc1=(xc + x1) / 2;\n  double yc1=(yc + y1) / 2;\n  xc=(x0c + xc1) / 2;\n  yc=(y0c + yc1) / 2;\n  if (Double.isNaN(xc) || Double.isNaN(yc)) {\n    return 0;\n  }\n  crossings=rectCrossingsForQuad(crossings,rxmin,rymin,rxmax,rymax,x0,y0,x0c,y0c,xc,yc,level + 1);\n  if (crossings != RECT_INTERSECTS) {\n    crossings=rectCrossingsForQuad(crossings,rxmin,rymin,rxmax,rymax,xc,yc,xc1,yc1,x1,y1,level + 1);\n  }\n  return crossings;\n}\n", "\tprivate String T(String englishPhrase) {\n\t\treturn clientFrame.T(englishPhrase);\n\t}\n", "public void removeTextSearchParameter(String key) {\n\n        try {\n            ParamType type = ParamType.valueOf(key);\n            switch (type) {\n                case language:\n                    m_searchObject.setLocale(getStartLocale());\n                    break;\n                case text:\n                    m_searchObject.setQuery(null);\n                    break;\n                case expired:\n                    m_searchObject.setIncludeExpired(false);\n                    break;\n                case creation:\n                    m_searchObject.setDateCreatedEnd(-1L);\n                    m_searchObject.setDateCreatedStart(-1L);\n                    break;\n                case modification:\n                    m_searchObject.setDateModifiedEnd(-1L);\n                    m_searchObject.setDateModifiedStart(-1L);\n                    break;\n                default:\n            }\n            m_handler.onRemoveSearchParam(type);\n            updateResultsTab(false);\n            ValueChangeEvent.fire(this, m_searchObject);\n        } catch (IllegalArgumentException e) {\n            // should not happen\n        }\n    }", "public T mapRow(ResultSet rs) throws SQLException {\n    Map<String, Object> map = new HashMap<String, Object>();\n    ResultSetMetaData metadata = rs.getMetaData();\n\n    for (int i = 1; i <= metadata.getColumnCount(); ++i) {\n      String label = metadata.getColumnLabel(i);\n\n      final Object value;\n      // calling getObject on a BLOB/CLOB produces weird results\n      switch (metadata.getColumnType(i)) {\n        case Types.BLOB:\n          value = rs.getBytes(i);\n          break;\n        case Types.CLOB:\n          value = rs.getString(i);\n          break;\n        default:\n          value = rs.getObject(i);\n      }\n\n      // don't use table name extractor because we don't want aliased table name\n      boolean overwrite = this.tableName != null && this.tableName.equals(metadata.getTableName(i));\n      String tableName = TABLE_NAME_EXTRACTOR.getTableName(metadata, i);\n      if (tableName != null && !tableName.isEmpty()) {\n        String qualifiedName = tableName + \".\" + metadata.getColumnName(i);\n        add(map, qualifiedName, value, overwrite);\n      }\n\n      add(map, label, value, overwrite);\n    }\n\n    return objectMapper.convertValue(map, type);\n  }", "    public Element toXml(Document doc) {\n        Element elem = doc.createElement(\"graph\");\n        elem.setAttribute(\"name\", name);\n        StringBuffer edgeBuf = new StringBuffer();\n        for (String clsName : edgeClasses) {\n            if (edgeBuf.length() > 0) {\n                edgeBuf.append(' ');\n            }\n            edgeBuf.append(clsName);\n        }\n        StringBuffer nodeBuf = new StringBuffer();\n        for (String clsName : nodeClasses) {\n            if (nodeBuf.length() > 0) {\n                nodeBuf.append(' ');\n            }\n            nodeBuf.append(clsName);\n        }\n        elem.setAttribute(\"nodeClass\", nodeBuf.toString());\n        elem.setAttribute(\"edgeClass\", edgeBuf.toString());\n        elem.setAttribute(\"directed\", Boolean.toString(directed));\n        return elem;\n    }\n", "public MemoryMap ( final List < MemorySection > sections ) { Preconditions . checkNotNull ( sections , STR_ ) ; for ( final MemorySection section : sections ) { Preconditions . checkNotNull ( section , STR_ ) ; } memorySections = new ArrayList < > ( secti", "\tpublic boolean checkRegEmailExist(String email){\n\t\treturn this.swdUserDao.checkRegEmailExist(email);\n\t}\n", "    protected OIModelEntity getRoot() throws SQLException {\n        if (m_root==null)\n            m_root=m_objectManager.getOIModelEntity(m_rootModelID,KAONVocabularyAdaptor.INSTANCE.getRoot());\n        return m_root;\n    }\n", "public JSONObject delete(String path) throws APIError {\n        return request(Verb.DELETE, path, null);\n    }", "public void removeHeader(Object header){\n  if (mHeaders.contains(header)) {\n    int position=mHeaders.indexOf(header);\n    mHeaders.remove(position);\n    notifyItemRemoved(position);\n  }\n}", "\tpublic void textCaretMoved (int index) {\n\t\tcheckWidget ();\n\t\tif (accessibleObject != null) {\n\t\t\taccessibleObject.textCaretMoved (index);\n\t\t}\n\t}\n", "    public Enumeration listenerNames() {\n        return myListeners.keys();\n    }\n", "    public Shape createOpenRectangle(final int x, final int y, final int w, final int h) {\n        path.reset();\n        path.moveTo(x + w, y);\n        path.lineTo(x, y);\n        path.lineTo(x, y + h);\n        path.lineTo(x + w, y + h);\n\n        return path;\n    }\n", "    public void addNode(BootStrapNode node) {\n        removeElement(node);\n        insertElementAt(node,0);\n    }\n", "  public void selectMessageDisplay() {\n    messageDisplay.requestFocusInWindow();\n  }\n", "private Class getMapType()\n  {\n    Class mapType = Map.class;\n    IParsedElement parent = getParsedElement().getParent();\n    if( parent instanceof NewExpression )\n    {\n      IType newType = ((NewExpression)parent).getType();\n      IJavaClassInfo classInfo = IRTypeResolver.getJavaBackedClass(newType);\n      Class javaBackedClass = classInfo != null ? classInfo.getBackingClass() : null;\n      if( classInfo != null && javaBackedClass != null )\n      {\n        mapType = javaBackedClass;\n      }\n      else if( JavaTypes.getJreType(AbstractMap.class).isAssignableFrom( newType ) )\n      {\n        mapType = AbstractMap.class;\n      }\n    }\n    return mapType;\n  }", "public static void writeInt(DataOutputStream dis,boolean isBigEndian,int val) throws IOException {\n  if (!isBigEndian) {\n    writeLittleEndianInt(dis,val);\n  }\n else {\n    dis.writeInt(val);\n  }\n}\n", "protected PostgreSQLModuleViewsLoader ( ) { }", "public void killLoadsOfField ( XField field ) { if ( ! REDUNDANT_LOAD_ELIMINATION ) { return ; } HashSet < AvailableLoad > killMe = new HashSet < AvailableLoad > ( ) ; for ( AvailableLoad availableLoad : getAvailableLoadMap ( ) . keySet ( ) ) { if ( avail", "\tpublic void writeARFFData() {\n\t\t// Filter the categories\n\t\tthis.setDataFilter(new CategoryDataFilter(this.categoryEncoder\n\t\t\t\t.getCategories()));\n\t\tthis.setTermsFilter(new TermsFilter(this.termsEncoder));\t\t\n\t\tsuper.writeARFFData();\n\t}\n", "public static byte[] int2buff(int n){\n  byte[] bs;\n  bs=new byte[4];\n  bs[0]=(byte)((n >> 24) & 0xFF);\n  bs[1]=(byte)((n >> 16) & 0xFF);\n  bs[2]=(byte)((n >> 8) & 0xFF);\n  bs[3]=(byte)(n & 0xFF);\n  return bs;\n}\n", "\tpublic void setTaFontColor(Color textColor) {\n\t\tlocalTa.setForeground(textColor);\n\t\tremoteTa.setForeground(textColor);\n\t\tif (realtimepv) {\n\t\t\tlogTa.setForeground(textColor);\n\t\t}\n\t}\n", "Schema schema ( ) ;", "public boolean hasVaryAll(){\n  return varyFields.contains(\"*\");\n}\n", "public void calculateDerived(){\n  xStats.calculateDerived();\n  yStats.calculateDerived();\n  differencesStats.calculateDerived();\n  correlation=Double.NaN;\n  if (!Double.isNaN(xStats.stdDev) && !Double.isNaN(yStats.stdDev) && !Utils.eq(xStats.stdDev,0)) {\n    double slope=(xySum - xStats.sum * yStats.sum / count) / (xStats.sumSq - xStats.sum * xStats.mean);\n    if (!Utils.eq(yStats.stdDev,0)) {\n      correlation=slope * xStats.stdDev / yStats.stdDev;\n    }\n else {\n      correlation=1.0;\n    }\n  }\n  if (Utils.gr(differencesStats.stdDev,0)) {\n    double tval=differencesStats.mean / Math.sqrt((1 / count + m_testTrainRatio) * differencesStats.stdDev * differencesStats.stdDev);\n    if (count > 1) {\n      differencesProbability=Statistics.FProbability(tval * tval,1,(int)count - 1);\n    }\n else     differencesProbability=1;\n  }\n else {\n    if (differencesStats.sumSq == 0) {\n      differencesProbability=1.0;\n    }\n else {\n      differencesProbability=0.0;\n    }\n  }\n  differencesSignificance=0;\n  if (differencesProbability <= sigLevel) {\n    if (xStats.mean > yStats.mean) {\n      differencesSignificance=1;\n    }\n else {\n      differencesSignificance=-1;\n    }\n  }\n}\n", "private static ViewContainer findContainer ( final IDatabase database , final IViewContainer container , final List < Database > databases ) { final Database apiDatabase = ObjectFinders . getObject ( database , databases ) ; if ( container . getAddressSpa", "    public boolean hasDocumenation() {\n        // @BEGINPROTECT _11_6_1d8404b6_1196176883217_366139_921\n        return this.getDocumentation() != null;\n        // @ENDPROTECT\n    }\n", "\tprivate boolean isPageCompleted() {\n\t\tif(isUcModelChosen() && !isActivityDiagramChosen()) {\n\t\t\treturn true;\n\t\t}\n\t\telse if(isActivityDiagramChosen() && compositionsFileName.toLowerCase().endsWith(compositionsExtensionFilter.toLowerCase())) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n", "public void marshall(UpdateCertificateOptionsRequest updateCertificateOptionsRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (updateCertificateOptionsRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(updateCertificateOptionsRequest.getCertificateArn(), CERTIFICATEARN_BINDING);\n            protocolMarshaller.marshall(updateCertificateOptionsRequest.getOptions(), OPTIONS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "    public boolean canEdit () {\n        return false;\n    }\n", "public void flush ( ) throws IOException { pw . flush ( ) ; }", "  public boolean equals(Object obj) {\n    List<Operator> thisList = this.operatorList;\n    List<Operator> thatList = ( (Operator) obj).operatorList;\n    if (thisList.size() != thatList.size()) {\n      return false;\n    }\n    int size = thisList.size();\n    for (int x = 0; x < size; x++) {\n      Operator o0 = thisList.get(x);\n      Operator o1 = thatList.get(x);\n      if (false == o0.equals(o1)) {\n        return false;\n      }\n    }\n    return true;\n  }\n", "protected synchronized void receive(int b) throws IOException {\n  checkStateForReceive();\n  writeSide=Thread.currentThread();\n  if (in == out)   awaitSpace();\n  if (in < 0) {\n    in=0;\n    out=0;\n  }\n  buffer[in++]=(byte)(b & 0xFF);\n  if (in >= buffer.len", "protected <T extends Controller> /*HttpBuilder*/void redirect(Class<T> controllerClass, Map<String, String> params){\n        String controllerPath = RouterHelper.getReverseRouteFast(controllerClass);\n        String contextPath = context.contextPath();\n        String action = params.get(\"action\") != null? params.get(\"action\") : null;\n        String id = params.get(\"id\") != null? params.get(\"id\") : null;\n        params.remove(\"action\");\n        params.remove(\"id\");//TODO make a damn class to hold \"action\", \"id\", etc so we can have some type safety\n        \n        //MTD\n//        String lang = language() != null ? \"/\" + language() : \"\";\n        String anchor = params.get(\"#\") != null ? \"#\" + params.get(\"#\") : \"\";\n        params.remove(\"#\");\n\n        String uri = contextPath +/*injector\n            .getInstance(DeploymentInfo.class)\n            .translateIntoContextPath(*//*+ lang + */RouterHelper.generate(controllerPath, action, id, params) + anchor/*)*/;\n        redirect(uri);\n    }", "public void defaultConfiguration ( ) { config . defaultConfiguration ( ) ; applyConfig ( ) ; }", "public static DocumentPermissionFetcher fetcher(final String pathServiceSid, \n                                                    final String pathDocumentSid, \n                                                    final String pathIdentity) {\n        return new DocumentPermissionFetcher(pathServiceSid, pathDocumentSid, pathIdentity);\n    }", "    public boolean isFocusCycleRoot(Container container) {\n        Container rootAncestor = getFocusCycleRootAncestor();\n        return (rootAncestor == container);\n    }\n", "\tpublic void mSum(Matrix second, Matrix dest) {\n\t\tif ((sizeX != second.sizeX) || (sizeY != second.sizeY)) {\n\t\t\tthrow new Error(\"Invalid argument\");\n\t\t}\n\t\tdest.resize(sizeX, sizeY);\n\t\tfor (int i = sizeX - 1; i >= 0; i--)\n\t\t\tfor (int j = sizeY - 1; j >= 0; j--)\n\t\t\t\tdest.setItem(i, j, getItem(i, j) + second.getItem(i, j));\n\t}\n", "private Item lookupDo(Template tmpl){\n  if (isEmpty(tmpl.serviceTypes) || tmpl.serviceID != null) {\n    ItemIter iter=matchingItems(tmpl);\n    if (iter.hasNext())     return iter.next();\n    return null;\n  }\n  List services=matchingServices(tmpl.serviceTy", "public final static String toHex(byte [] b) {\n\tchar[] buf = new char[b.length * 2];\n\tint i, j, k;\n\n\ti = j = 0;\n\tfor (; i < b.length; i++) {\n\t    k = b[i];\n\t    buf[j++] = hex[(k >>> 4) & 0x0F];\n\t    buf[j++] = hex[ k & 0x0F];\n\t}\n\treturn new String(buf);\n    }", "private void updateSalesOrderHeader ( String reportPath , List < SalesOrderItem > soiList , EntityManager em ) { if ( soiList != null && ! soiList . isEmpty ( ) ) { EntityTransaction transaction = em . getTransaction ( ) ; try { transaction . begin ( ) ; ", "    public Boolean isIsExpanded() {\n        return isExpanded;\n    }\n", "public static boolean isJdk(Class<?> cls){\n  if (cls.isPrimitive())   return true;\n  String s=cls.getName();\n  return s.startsWith(\"java.\") || s.startsWith(\"javax.\");\n}\n", "public boolean sameAs ( LockSet other ) { return this . identicalSubset ( other ) && other . identicalSubset ( this ) ; }", "private void handleIncomingInlineQuery(InlineQuery inlineQuery){\n  String query=inlineQuery.getQuery();\n  BotLogger.debug(LOGTAG,\"Searching: \" + query);\n  try {\n    if (!query.isEmpty()) {\n      List<RaeService.RaeResult> results=raeService.getResults(query);\n      answerInlineQuery(converteResultsToResponse(inlineQuery,results));\n    }\n else {\n      answerInlineQuery(converteResultsToResponse(inlineQuery,new ArrayList<>()));\n    }\n  }\n catch (  TelegramApiException e) {\n    BotLogger.error(LOGTAG,e);\n  }\n}\n", "private boolean toNextState(LifecycleState newState){\n  LifecycleState state;\nsynchronized (this) {\n    state=_state;\n    if (newState.ordinal() <= state.ordinal()) {\n      return false;\n    }\n    _state=newState;\n    _lastChangeTime=CurrentTime.currentTime();\n  }\n  if (_log != null && _log.isLoggable(_lowLevel)) {\n    _log.log(_lowLevel,newState + \" \" + _name);\n  }\n  notifyListeners(state,newState);\n  return true;\n}\n", "public static void writeSwappedInteger ( byte [ ] data , int offset , int value ) { data [ offset + NUM_ ] = ( byte ) ( ( value > > NUM_ ) & NUM_ ) ; data [ offset + NUM_ ] = ( byte ) ( ( value > > NUM_ ) & NUM_ ) ; data [ offset + NUM_ ] = ( byte ) ( ( v", "public static Set<Integer> differences(BitSet s, BitSet t) {\n        BitSet u = (BitSet) s.clone();\n        u.xor(t);\n\n        Set<Integer> differences = new TreeSet<Integer>();\n\n        for (int i = u.nextSetBit(0); i >= 0; i = u.nextSetBit(i + 1)) {\n            differences.add(i);\n        }\n\n        return differences;\n    }", "public final int last_common_layer(BrdItem p_other){\n  int max_first_layer=Math.max(first_layer(),p_other.first_layer());\n  int min_last_layer=Math.min(last_layer(),p_other.last_layer());\n  if (max_first_layer > min_last_layer)   return -1;\n  return min_last_layer;\n}\n", "public ArrayList<ShortcutInfo> bindItems(ArrayList<ShortcutInfo> items){\n  ArrayList<View> icons=new ArrayList<View>();\n  ArrayList<ShortcutInfo> extra=new ArrayList<ShortcutInfo>();\n  for (  ShortcutInfo item : items) {\n    if (!ALLOW_FOLDER_SCROLL && ic", "    public int getColumnNumber ()\n\t{ return (locator == null) ? -1 : locator.getColumnNumber (); }\n", "private static boolean hasModification(MonomerNotation monomerNotation) throws NotationException {\r\n\r\n\t\tif (monomerNotation instanceof MonomerNotationUnitRNA) {\r\n\t\t\tif (hasModification((MonomerNotationUnitRNA) monomerNotation)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} else if (monomerNotation instanceof MonomerNotationGroup) {\r\n\t\t\tfor (MonomerNotationGroupElement element : ((MonomerNotationGroup) monomerNotation).getListOfElements()) {\r\n\t\t\t\tif (hasModification(element.getMonomerNotation())) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (monomerNotation instanceof MonomerNotationList) {\r\n\t\t\tfor (MonomerNotation element : ((MonomerNotationList) monomerNotation).getListofMonomerUnits()) {\r\n\t\t\t\tif (hasModification(element)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new NotationException(\"Unknown MonomerNotation Type \" + monomerNotation.getClass());\r\n\t\t}\r\n\t\treturn false;\r\n\t}", "public void exceptionShift() {\n        numExceptional++;\n        double mag = 0.05 * numExceptional;\n        if (mag > 1.0) mag = 1.0;\n\n        double angle = 2.0 * UtilEjml.PI * (rand.nextDouble() - 0.5) * mag;\n        performImplicitSingleStep(0, angle, true);\n\n        // allow more convergence time\n        nextExceptional = steps + exceptionalThresh;  // (numExceptional+1)*\n    }", "static boolean usesStandardPort(URI uri) {\n        int portNumber = uri.getPort();\n        if (portNumber == -1) {\n            return true;\n        }\n        String schema = uri.getScheme();\n        int standardPort = schema.equals(\"https\") ? 443 : 80;\n        return portNumber == standardPort;\n    }", "public static void writeCollection ( XMLOutput xmlOutput , Collection < ? extends XMLWriteable > collection ) throws IOException { for ( XMLWriteable obj : collection ) { obj . writeXML ( xmlOutput ) ; } }", "public void sort ( ) { DefaultListModel < String > listModel = ( DefaultListModel < String > ) list . getModel ( ) ; List < String > list = Collections . list ( listModel . elements ( ) ) ; Collections . sort ( list ) ; listModel . clear ( ) ; for ( Strin", "T onCreateHeaderViewHolder ( ViewGroup parent ) ;", "      public String toSimplifiedEquation() {\n        String s = \" \";\n        int j;\n        for (int i = 0; i < coef - 1; i++) {\n            s += (a[i] >= 0 ? (i > 0 ? \"+\" : \"\") : \"\") + Utils.convertDouble(a[i]);\n            for (j = 0; j < inputs; j++) {\n                if (parentsIndex[i][j] < inputs) {\n                    s += \"*(\" + f[parentsIndex[i][j]].toSimplifiedEquation() + \")\";\n                }\n            }\n        }\n        s += (a[coef - 1] >= 0 ? \"+\" : \"\") + Utils.convertDouble(a[coef - 1]);\n          Grammar eq = new Grammar(s);\n          return eq.simplify();\n      }\n", "    private void normalizeAndPrint(char c) {\n\n        switch (c) {\n            case '<': {\n                fOut.print(\"&lt;\");\n                break;\n            }\n            case '>': {\n                fOut.print(\"&gt;\");\n                break;\n            }\n            case '&': {\n                fOut.print(\"&amp;\");\n                break;\n            }\n            case '\"': {\n                fOut.print(\"&quot;\");\n                break;\n            }\n            case '\\r':\n            case '\\n': {\n                /*\n                if (fCanonical) {\n                    fOut.print(\"&#\");\n                    fOut.print(Integer.toString(c));\n                    fOut.print(';');\n                    break;\n                }\n                */\n                // else, default print char\n            }\n            default: {\n                fOut.print(c);\n            }\n        }\n\n    } // normalizeAndPrint(char)\n", "public static String binarySetMapToString ( String [ ] setDefs , long currentValue ) { StringBuilder list = new StringBuilder ( ) ; String binary = Long . toBinaryString ( currentValue ) ; for ( int i = NUM_ ; i < binary . length ( ) ; i ++ ) { if ( binary . charAt ( binary . length ( ) - i - NUM_ ) == STR_ ) { String option = setDefs [ i ] ; if ( list . length ( ) > NUM_ ) list . append ( STR_ ) ; list . append ( option ) ; if ( logger . isDebugEnabled ( ) ) logger . debug ( STR_ + i + STR_ + option ) ; } } return list . toString ( ) ; }", "\tpublic Object getDisplayValue(XObject value, Locale locale) {\n\n\t\tif (value instanceof Undef || value == null) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\treturn value.toString();\n\t}\n", "\tprivate void initModels() {\n\t\ttodoTM = new TODOTableModel(\"deadlineDatum\");\n\t}\n", "public static < T > String joinAnd ( final String delimiter , final String lastDelimiter , final Collection < T > objs ) { if ( objs == null || objs . isEmpty ( ) ) return STR_ ; final Iterator < T > iter = objs . iterator ( ) ; final StringBuilder buffer", "    public void setType(Topic type) throws PropertyVetoException {\n        Topic oldType = m_type;\n        fireVetoableChange(\"type\", m_type, type);\n        m_type = type;\n        firePropertyChange(\"type\", oldType, m_type);\n    }\n", "public void attachToModel(ScuflModel theModel) {\n\t\tthis.workflow = theModel;\n\t\ttheModel.addListener(this);\n\t\tgetRootNode().setUserObject(theModel);\n\t\tgenerateInitialModel();\n\t}", "public FessMessages addSuccessUploadElevateWord(String property) {\n        assertPropertyNotNull(property);\n        add(property, new UserMessage(SUCCESS_upload_elevate_word));\n        return this;\n    }", "private void resetTopicAlarmState(String rootContext){\n  try {\n    if (rootContext != null) {\n      AtomicBoolean alarmState=m_alarmState.get(rootContext);\n      if (alarmState != null)       alarmState.set(false);\n    }\n  }\n catch (  Exception e) {\n  }\n}\n", "public final void addElements(int value,int numberOfElements){\n  if ((m_firstFree + numberOfElements) >= m_mapSize) {\n    m_mapSize+=(m_blocksize + numberOfElements);\n    int newMap[]=new int[m_mapSize];\n    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);\n    m_map=newMap;\n  }\n  for (int i=0; i < numberOfElements; i++) {\n    m_map[m_firstFree]=value;\n    m_firstFree++;\n  }\n}\n", "public String getApplicationName() {\n        if (this.applicationName != null)\n            return this.applicationName;\n        else if (webApp != null)\n            return this.webApp.getApplicationName();\n        else\n            return null;\n\n    }", "public Type asSuper(Type t, Symbol sym) {\n        /* Some examples:\n         *\n         * (Enum<E>, Comparable) => Comparable<E>\n         * (c.s.s.d.AttributeTree.ValueKind, Enum) => Enum<c.s.s.d.AttributeTree.ValueKind>\n         * (c.s.s.t.ExpressionTree, c.s.s.t.Tree) => c.s.s.t.Tree\n         * (j.u.List<capture#160 of ? extends c.s.s.d.DocTree>, Iterable) =>\n         *     Iterable<capture#160 of ? extends c.s.s.d.DocTree>\n         */\n        if (sym.type == syms.objectType) { //optimization\n            return syms.objectType;\n        }\n        return asSuper.visit(t, sym);\n    }", "public void visitLineNumber ( int line , Label start ) { if ( mv != null ) { mv . visitLineNumber ( line , start ) ; } }", "public void removeListener ( final IDebuggerChooserPanelListener listener ) { m_listeners . removeListener ( listener ) ; }", "public void writeData ( DataOutput dout ) throws IOException { dout . write ( getMessage ( ) ) ; }", "public int getRelationFlags(Interval<E> other)\r\n  {\r\n    if (other == null) return 0;\r\n    int flags = 0;\r\n    int comp11 = this.first.compareTo(other.first());   // 3 choices\r\n    flags |= toRelFlags(comp11, REL_FLAGS_SS_SHIFT);\r\n    int comp22 = this.second.compareTo(other.second());   // 3 choices\r\n    flags |= toRelFlags(comp22, REL_FLAGS_EE_SHIFT);\r\n    int comp12 = this.first.compareTo(other.second());   // 3 choices\r\n    flags |= toRelFlags(comp12, REL_FLAGS_SE_SHIFT);\r\n    int comp21 = this.second.compareTo(other.first());   // 3 choices\r\n    flags |= toRelFlags(comp21, REL_FLAGS_ES_SHIFT);\r\n    flags = addIntervalRelationFlags(flags, false);\r\n    return flags;\r\n  }", "public static byte[] convertASN1toXMLDSIG(byte asn1Bytes[]) throws IOException {\n  if (asn1Bytes.length < 8 || asn1Bytes[0] != 48) {\n    throw new IOException(\"Invalid ASN.1 format of ECDSA signature\");\n  }\n  int offset;\n  if (asn1Bytes[1] > 0) {\n    offset=2;\n  }\n else   if (asn1Bytes[1] == (byte)0x81) {\n    offset=3;\n  }\n else {\n    throw new IOException(\"Invalid ASN.1 format of ECDSA signature\");\n  }\n  byte rLength=asn1Bytes[offset + 1];\n  int i;\n  for (i=rLength; (i > 0) && (asn1Bytes[(offset + 2 + rLength) - i] == 0); i--)   ;\n  byte sLength=asn1Bytes[offset + 2 + rLength+ 1];\n  int j;\n  for (j=sLength; (j > 0) && (asn1Bytes[(offset + 2 + rLength+ 2+ sLength) - j] == 0); j--)   ;\n  int rawLen=Math.max(i,j);\n  if ((asn1Bytes[offset - 1] & 0xff) != asn1Bytes.length - offset || (asn1Bytes[offset - 1] & 0xff) != 2 + rLength + 2+ sLength || asn1Bytes[offset] != 2 || asn1Bytes[offset + 2 + rLength] != 2) {\n    throw new IOException(\"Invalid ASN.1 format of ECDSA signature\");\n  }\n  byte xmldsigBytes[]=new byte[2 * rawLen];\n  System.arraycopy(asn1Bytes,(offset + 2 + rLength) - i,xmldsigBytes,rawLen - i,i);\n  System.arraycopy(asn1Bytes,(offset + 2 + rLength+ 2+ sLength) - j,xmldsigBytes,2 * rawLen - j,j);\n  return xmldsigBytes;\n}\n", "public int size(){\n  return serialQueue.size();\n}\n", "public void verifyProcessDefinitionsDoNotShareKeys(Collection<ProcessDefinitionEntity> processDefinitions){\n  Set<String> keySet=new LinkedHashSet<String>();\n  for (  ProcessDefinitionEntity processDefinition : processDefinitions) {\n    if (keySet.contains(processDefinition.getKey())) {\n      throw new ActivitiException(\"The deployment contains process definitions with the same key (process id attribute), this is not allowed\");\n    }\n    keySet.add(processDefinition.getKey());\n  }\n}\n", "protected String parseScope(ProgramElementDoc doc) {\n\t\tif (doc.isPrivate()) {\n\t\t\treturn \"private\";\n\t\t} else if (doc.isProtected()) {\n\t\t\treturn \"protected\";\n\t\t} else if (doc.isPublic()) {\n\t\t\treturn \"public\";\n\t\t}\n\t\treturn \"\";\n\t}", "public final String getDestName()\n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(tc, \"getDestName\");\n\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.exit(tc, \"getDestName\", destName);\n\n    return destName;\n  }", "private void login(XMLRPCCallback callback){\n  try {\n    XMLRPCClient client=new XMLRPCClient(new URL(mApiUrl.replace(\"http://\",\"https://\")),mUserAgent);\n    client.callAsync(callback,\"LogIn\",\"\",\"\",\"en\",mUserAgent);\n  }\n catch (  MalformedURLException e) {\n    e.printStackTrace();\n  }\n}\n", "protected void refreshCapacity(double newCap){\n  maxCap=Math.max(maxCap,newCap);\n  minCap=Math.min(minCap,newCap);\n  updateCapacityLabels();\n}\n", "public ResourceList getResourcesWithPath(final String resourcePath) {\n        if (closed.get()) {\n            throw new IllegalArgumentException(\"Cannot use a ScanResult after it has been closed\");\n        }\n        final ResourceList allWhitelistedResources = getAllResources();\n        if (allWhitelistedResources.isEmpty()) {\n            return ResourceList.EMPTY_LIST;\n        } else {\n            final String path = FileUtils.sanitizeEntryPath(resourcePath, /* removeInitialSlash = */ true);\n            final ResourceList resourceList = getAllResourcesAsMap().get(path);\n            return (resourceList == null ? new ResourceList(1) : resourceList);\n        }\n    }", "public void disallowOut(int x,int y,int width,int height){\n  Rectangle r=new Rectangle(x,y,width,height);\n  leavingBarriers.add(r);\n}\n", "    public WidgetCache getWidgetCache(String key){\n        WidgetCache wc = (WidgetCache) m_widgetCache.get(key);\n        if (wc == null) {\n            wc = new WidgetCache();\n            m_widgetCache.put(key, wc);\n        }\n        return wc;\n    }\n", "private void initLocales() {\n\n        if (!m_localeCache.isEmpty()) {\n            return;\n        }\n        readLocale(m_primaryResource);\n        for (CmsResource resource : m_secondaryResources) {\n            readLocale(resource);\n        }\n        for (Map.Entry<CmsResource, Locale> entry : m_localeCache.entrySet()) {\n            CmsResource key = entry.getKey();\n            Locale value = entry.getValue();\n            m_resourcesByLocale.put(value, key);\n        }\n        try {\n            CmsProperty noTranslationProp = m_cms.readPropertyObject(\n                m_primaryResource,\n                CmsPropertyDefinition.PROPERTY_LOCALE_NOTRANSLATION,\n                false);\n            m_noTranslation = noTranslationProp.getValue();\n        } catch (CmsException e) {\n            LOG.error(e.getLocalizedMessage(), e);\n\n        }\n    }", "public static String[] addStringToArray(String[] array, String str) {\n        if (isEmpty(array)) {\n            return new String[]{str};\n        }\n        String[] newArr = new String[array.length + 1];\n        System.arraycopy(array, 0, newArr, 0, array.length);\n        newArr[array.length] = str;\n        return newArr;\n    }", "public void expectServerProxyFailed(MessageInfo messageInfo){\n  expectedApiCalls.add(new ApiCall(SERVER_PROXY_FAILED,new Object[]{messageInfo.getOrigin(),messageInfo.getClient(),messageInfo.getService()}));\n}\n", "public static ParameterType makeFileParameterType(ParameterHandler parameterHandler,String parameterName,String description,PortProvider portProvider,String... fileExtensions){\n  return makeFileParameterType(parameterHandler,parameterName,description,portProvider,false,fileExtensions);\n}\n", "void clearSessionCookie ( HttpServletRequest req , HttpServletResponse resp ) ;", "@VisibleForTesting int exactBinarySearch(long searchX,int startSearchIndex){\n  return approximateBinarySearch(searchX,startSearchIndex,mData.size() - 1,true,0);\n}\n", "public static String encodeToString ( byte [ ] input , int offset , int len , int flags ) { try { return new String ( encode ( input , offset , len , flags ) , STR_ ) ; } catch ( UnsupportedEncodingException e ) { throw new AssertionError ( e ) ; } }", "< T > SpaceIterator < T > iterator ( ISpaceQuery < T > template , int batchSize , ReadModifiers modifiers ) ;", "private boolean stage7(final ProtoNetwork pn, final Document doc) {\n        beginStage(PHASE1_STAGE7_HDR, \"7\", NUM_PHASES);\n        final StringBuilder bldr = new StringBuilder();\n\n        bldr.append(\"Saving proto-network for \");\n        bldr.append(doc.getName());\n        stageOutput(bldr.toString());\n\n        long t1 = currentTimeMillis();\n        String dir = artifactPath.getAbsolutePath();\n        final String path = asPath(dir, nextUniqueFolderName());\n        File pnpathname = new File(path);\n\n        boolean success = true;\n        try {\n            p1.stage7Saving(pn, pnpathname);\n\n            if (withDebug()) {\n                TextProtoNetworkExternalizer textExternalizer =\n                        new TextProtoNetworkExternalizer();\n                textExternalizer.writeProtoNetwork(pn,\n                        pnpathname.getAbsolutePath());\n            }\n        } catch (ProtoNetworkError e) {\n            success = false;\n            error(\"failed to save proto-network\");\n            e.printStackTrace();\n        }\n        long t2 = currentTimeMillis();\n\n        bldr.setLength(0);\n        markTime(bldr, t1, t2);\n        markEndStage(bldr);\n        stageOutput(bldr.toString());\n\n        return success;\n    }", "public BlockchainInfo queryBlockchainInfo(User userContext) throws ProposalException, InvalidArgumentException {\n\n        return queryBlockchainInfo(getShuffledPeers(EnumSet.of(PeerRole.LEDGER_QUERY)), userContext);\n    }", "public Object readList(AbstractHessianInput in, int length)\n        throws IOException\n    {\n        if (length >= 0) {\n            Object[] data = createArray(length);\n\n            in.addRef(data);\n\n            if (_componentType != null) {\n                for (int i = 0; i < data.length; i++)\n                    data[i] = in.readObject(_componentType);\n            }\n            else {\n                for (int i = 0; i < data.length; i++)\n                    data[i] = in.readObject();\n            }\n\n            in.readListEnd();\n\n            return data;\n        }\n        else {\n            ArrayList list = new ArrayList();\n\n            in.addRef(list);\n\n            if (_componentType != null) {\n                while (!in.isEnd())\n                    list.add(in.readObject(_componentType));\n            }\n            else {\n                while (!in.isEnd())\n                    list.add(in.readObject());\n            }\n\n            in.readListEnd();\n\n            Object[] data = createArray(list.size());\n            for (int i = 0; i < data.length; i++)\n                data[i] = list.get(i);\n\n            return data;\n        }\n    }", "private static String getBundlePostProcessorsName(ChainedResourceBundlePostProcessor processor) {\n\n\t\tString bundlePostProcessor = \"\";\n\t\tif (processor != null) {\n\t\t\tbundlePostProcessor = processor.getId();\n\t\t}\n\n\t\treturn bundlePostProcessor;\n\t}", "public static boolean parseBoolean(FXGNode node,String value,String name){\n  if (value.equals(\"true\"))   return true;\n else   if (value.equals(\"false\"))   return false;\n  throw new FXGException(node.getStartLine(),node.getStartColumn(),\"InvalidBooleanValue\",name,value);\n}\n", "private void updateComplex(String string)\n   {\n      if (string != null && StringUtils.getExpressionKey(string) != null\n            && !string.equals(StringUtils.getExpressionKey(string)))\n      {\n         complex = true;\n      }\n   }", "public boolean update ( ) { return update ; }", "\tprivate void removeCurrentRun() {\n\t\tif(currentRunPack != null){\n\t\t\tint index = getRunIndex();\n\t\t\tlistRunPack.remove(currentRunPack);\n\t\t\trunDlm.removeElementAt(index);\n\t\t\tif(index > 0) {\n\t\t\t\tsetCurrentRunPack(index - 1);\n\t\t\t}\n\t\t\telse if(index == 0 && !listRunPack.isEmpty()) {\n\t\t\t\tsetCurrentRunPack(index);\n\t\t\t}\n\t\t}\n\t\trefreshListRun();\n\t\tsetSelectedIndex();\n\t}\n", "\tpublic void run() {\n\t\tGUI gui = (GUI) registeredObject;\n\t\tGPane pane = gui.getTopPane();\n\t\tpane.setMode(GPane.DISTANCE_MODE);\n\t\tsuper.setSelected(true);\n\t\tgui.getNotifier().firePaneEvent(this);\n\t\tgui.getProgressMeter().getPanel().repaint();\n\t}\n", "static UUID getNextHash(UUID hash) {\n        if (hash == null) {\n            // No hash given. By definition, the first hash is the \"next\" one\".\n            hash = MIN_HASH;\n        } else if (hash.compareTo(MAX_HASH) >= 0) {\n            // Given hash already equals or exceeds the max value. There is no successor.\n            return null;\n        }\n\n        long msb = hash.getMostSignificantBits();\n        long lsb = hash.getLeastSignificantBits();\n        if (lsb == Long.MAX_VALUE) {\n            msb++; // This won't overflow since we've checked that state is not end (i.e., id != MAX).\n            lsb = Long.MIN_VALUE;\n        } else {\n            lsb++;\n        }\n\n        return new UUID(msb, lsb);\n    }", "private static int collectHighlights(@NotNull final CallArgumentsMapping argumentsMapping,@NotNull final List<PyParameter> parameterList,@NotNull final Map<PyNamedParameter,Integer> parameterToIndex,@NotNull final Map<Integer,EnumSet<ParameterInfoUIContextEx.Flag>> hintFlags,@NotNull final List<PyExpression> flatArgs,int currentParamOffset){\n  final PyMarkedCallee callee=argumentsMapping.getMarkedCallee();\n  assert callee != null;\n  int lastParamIndex=callee.getImplicitOffset();\n  for (  PyExpression arg : flatArgs) {\n    final boolean mustHighlight=arg.getTextRange().contains(currentParamOffset);\n    PsiElement seeker=arg;\n    while (!(seeker instanceof PyArgumentList) && seeker instanceof PyExpression && !argumentsMapping.getPlainMappedParams().containsKey(seeker)) {\n      seeker=seeker.getParent();\n    }\n    if (seeker instanceof PyExpression) {\n      final PyNamedParameter parameter=argumentsMapping.getPlainMappedParams().get((PyExpression)seeker);\n      lastParamIndex=Math.max(lastParamIndex,parameterList.indexOf(parameter));\n      if (parameter != null) {\n        highlightParameter(parameter,parameterToIndex,hintFlags,mustHighlight);\n      }\n    }\n else     if (arg == argumentsMapping.getTupleArg()) {\n      for (      PyNamedParameter parameter : argumentsMapping.getTupleMappedParams()) {\n        lastParamIndex=Math.max(lastParamIndex,parameterList.indexOf(parameter));\n        highlightParameter(parameter,parameterToIndex,hintFlags,mustHighlight);\n      }\n    }\n else     if (arg == argumentsMapping.getKwdArg()) {\n      for (      PyNamedParameter parameter : argumentsMapping.getKwdMappedParams()) {\n        lastParamIndex=Math.max(lastParamIndex,parameterList.indexOf(parameter));\n        highlightParameter(parameter,parameterToIndex,hintFlags,mustHighlight);\n      }\n    }\n else {\n      final List<PyNamedParameter> namedParameters=argumentsMapping.getNestedMappedParams().get(arg);\n      if (namedParameters != null) {\n        for (        PyNamedParameter parameter : namedParameters) {\n          lastParamIndex=Math.max(lastParamIndex,parameterList.indexOf(parameter));\n          highlightParameter(parameter,parameterToIndex,hintFlags,mustHighlight);\n        }\n      }\n    }\n  }\n  return lastParamIndex;\n}\n", "public void unregisterEndpoint(String arg0, String arg1) {\n        String endpointURL = null;\n        QName serviceName = null;\n        try {\n            serviceName = QName.valueOf(URLDecoder.decode(arg0, \"UTF-8\"));\n            endpointURL = URLDecoder.decode(arg1, \"UTF-8\");\n        } catch (UnsupportedEncodingException e1) {\n            throw new WebApplicationException(Response\n                    .status(Status.INTERNAL_SERVER_ERROR)\n                    .entity(e1.getMessage()).build());\n        }\n        if (LOG.isLoggable(Level.FINE)) {\n            LOG.fine(\"Unregistering endpoint \" + endpointURL + \" for service \"\n                    + serviceName + \"...\");\n        }\n        try {\n            initLocator();\n            locatorClient.unregister(serviceName, endpointURL);\n        } catch (ServiceLocatorException e) {\n            throw new WebApplicationException(Response\n                    .status(Status.INTERNAL_SERVER_ERROR)\n                    .entity(e.getMessage()).build());\n        } catch (InterruptedException e) {\n            throw new WebApplicationException(Response\n                    .status(Status.INTERNAL_SERVER_ERROR)\n                    .entity(e.getMessage()).build());\n        }\n    }", "public final SalesInvoice retrieveEntity(final Map<String, Object> pReqVars,\n    final SalesInvoice pInvoice, final String pLang,\n      final boolean pIsOverseas) throws Exception {\n    SalesInvoice inv = this.srvOrm.retrieveEntity(pReqVars, pInvoice);\n    if (pIsOverseas) {\n      Set<String> ndFlSil = new HashSet<String>();\n      ndFlSil.add(\"itsId\");\n      ndFlSil.add(\"subtotal\");\n      ndFlSil.add(\"totalTaxes\");\n      ndFlSil.add(\"taxesDescription\");\n      ndFlSil.add(\"invItem\");\n      ndFlSil.add(\"unitOfMeasure\");\n      ndFlSil.add(\"itsQuantity\");\n      ndFlSil.add(\"itsPrice\");\n      ndFlSil.add(\"itsTotal\");\n      ndFlSil.add(\"foreignPrice\");\n      ndFlSil.add(\"foreignSubtotal\");\n      ndFlSil.add(\"foreignTotalTaxes\");\n      ndFlSil.add(\"foreignTotal\");\n      pReqVars.put(\"SalesInvoiceLineneededFields\", ndFlSil);\n      Set<String> ndFlItUm = new HashSet<String>();\n      ndFlItUm.add(\"itsId\");\n      ndFlItUm.add(\"itsName\");\n      pReqVars.put(\"InvItemneededFields\", ndFlItUm);\n      pReqVars.put(\"UnitOfMeasureneededFields\", ndFlItUm);\n      inv.setItsLines(getSrvOrm().retrieveListByQuery(pReqVars,\n        SalesInvoiceLine.class,\n          evalSalesInvOverseaseLinesSql(inv.getItsId().toString(), pLang)));\n      pReqVars.remove(\"SalesInvoiceLineneededFields\");\n      pReqVars.remove(\"InvItemneededFields\");\n      pReqVars.remove(\"UnitOfMeasureneededFields\");\n    } else {\n      pReqVars.put(\"SalesInvoiceLineitsOwnerdeepLevel\", 1); //only ID\n      inv.setItsLines(getSrvOrm().\n        retrieveListWithConditions(pReqVars, SalesInvoiceLine.class,\n          \"where REVERSEDID is null and ITSOWNER=\" + inv.getItsId()));\n      pReqVars.remove(\"SalesInvoiceLineitsOwnerdeepLevel\");\n    }\n    //overseas sales usually free from sales taxes\n    SalesInvoiceTaxLine sitl = new SalesInvoiceTaxLine();\n    sitl.setItsOwner(inv);\n    pReqVars.put(\"SalesInvoiceTaxLineitsOwnerdeepLevel\", 1); //only ID\n    inv.setTaxesLines(getSrvOrm().\n      retrieveListForField(pReqVars, sitl, \"itsOwner\"));\n    pReqVars.remove(\"SalesInvoiceTaxLineitsOwnerdeepLevel\");\n    if (pIsOverseas) {\n      Set<String> ndFlSil = new HashSet<String>();\n      ndFlSil.add(\"itsId\");\n      ndFlSil.add(\"subtotal\");\n      ndFlSil.add(\"totalTaxes\");\n      ndFlSil.add(\"taxesDescription\");\n      ndFlSil.add(\"unitOfMeasure\");\n      ndFlSil.add(\"itsQuantity\");\n      ndFlSil.add(\"service\");\n      ndFlSil.add(\"itsPrice\");\n      ndFlSil.add(\"itsTotal\");\n      ndFlSil.add(\"foreignPrice\");\n      ndFlSil.add(\"foreignSubtotal\");\n      ndFlSil.add(\"foreignTotalTaxes\");\n      ndFlSil.add(\"foreignTotal\");\n      pReqVars.put(\"SalesInvoiceServiceLineneededFields\", ndFlSil);\n      Set<String> ndFlItUm = new HashSet<String>();\n      ndFlItUm.add(\"itsId\");\n      ndFlItUm.add(\"itsName\");\n      pReqVars.put(\"ServiceToSaleneededFields\", ndFlItUm);\n      pReqVars.put(\"UnitOfMeasureneededFields\", ndFlItUm);\n      inv.setServices(getSrvOrm().retrieveListByQuery(pReqVars,\n    SalesInvoiceServiceLine.class, evalSalesInvOverseaseServiceLinesSql(\n  inv.getItsId().toString(), pLang)));\n      pReqVars.remove(\"SalesInvoiceServiceLineneededFields\");\n      pReqVars.remove(\"ServiceToSaleneededFields\");\n      pReqVars.remove(\"UnitOfMeasureneededFields\");\n    } else {\n      SalesInvoiceServiceLine sisl = new SalesInvoiceServiceLine();\n      sisl.setItsOwner(inv);\n      pReqVars.put(\"SalesInvoiceServiceLineitsOwnerdeepLevel\", 1); //only ID\n      inv.setServices(getSrvOrm().\n        retrieveListForField(pReqVars, sisl, \"itsOwner\"));\n    }\n    pReqVars.remove(\"SalesInvoiceServiceLineitsOwnerdeepLevel\");\n    return inv;\n  }", "public void addClosureOf(IRule rule){\n  if (rule == null)   throw new IllegalArgumentException();\n  addClosureOf(new IRule[]{rule});\n}\n", "\tpublic void addNewConfig(ConfigCMPData data) throws EJBException {\n\t\ttry {\n\t\t\tConfigCMPLocal configLocal = getConfigCMPLocalHome().create(data);\n\t\t} catch (CreateException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n", "@Override\n    public String toCSV() {\n        int nbManagedVMs = -1;\n        long core = 0;\n        long spe = 0;\n        long d = 0;\n        int solutions = 0;\n        if (!stages.isEmpty()) {\n            solutions = stages.get(stages.size() - 1).getSolutions().size();\n        }\n        boolean completed = true;\n        for (SolvingStatistics sol : stages) {\n            nbManagedVMs = Math.max(nbManagedVMs, sol.getNbManagedVMs());\n            core += sol.getCoreBuildDuration();\n            spe += sol.getSpecializationDuration();\n            d += sol.getMetrics().timeCount();\n            completed &= sol.completed();\n            if (sol.getSolutions().isEmpty()) {\n                solutions = 0;\n            }\n        }\n\n        return String.format(\"%d;%d;%d;%d;%d;%d\", nbManagedVMs,\n                core,\n                spe,\n                d,\n                solutions,\n                completed ? 1 : 0);\n\n    }", "public Value max ( Value num ) { return new AggregationFunction ( num , AggregationType . MAXIMUM ) ; }", "public boolean isSealed(URL url){\n  return sealBase != null && sealBase.sameFile(url);\n}\n", "private int allocate(int size)\n    {\n        while (true)\n        {\n            int prev = allocatePosition.get();\n            int next = prev + size;\n            if (next >= buffer.capacity())\n                return -1;\n            if (allocatePosition.compareAndSet(prev, next))\n                return prev;\n        }\n    }", "public boolean remove(AccessibleRelation relation){\n  if (relations == null) {\n    return false;\n  }\n else {\n    return relations.removeElement(relation);\n  }\n}\n", "public FollowerInfo(Follower.Type type,String stream,List<Follower> followers,int total){\n  this.type=type;\n  this.followers=followers;\n  this.total=total;\n  this.time=System.currentTimeMillis();\n  this.stream=stream;\n  this.requestError=false;\n  this.requestErrorDescription=null;\n}\n", "public void write(CharSequence csq) throws IOException {\n  if (_byteBuffer == null)   throw new IOException(\"Writer closed\");\n  final int length=csq.length();\n  for (int i=0; i < length; ) {\n    char c=csq.charAt(i++);\n    if (c < 0x80) {\n      _byteBuffer.put((byte)c);\n    }\n else {\n      write(c);\n    }\n  }\n}\n", "public java.util.List<DataSource> getDataSources() {\n        if (dataSources == null) {\n            dataSources = new com.amazonaws.internal.SdkInternalList<DataSource>();\n        }\n        return dataSources;\n    }", "\tpublic double getInstrumentBestBid(String ticker){\n\t\tInstrument instrument = findInstrument(ticker);\n\t\tif(instrument == null)\n\t\t\tthrow new IllegalArgumentException(\"Invalid ticker symbol: \"+ ticker);\n\t\t\n\t\tlogger.info(\"Best bid for \" + instrument.getTicker() + \" is requested\");\n\t\treturn instrument.getBestBid();\n\t}\n", "@Override protected Instance process(Instance instance) throws Exception {\n  Instance result;\n  double[] values;\n  int i;\n  values=new double[m_Indices.length];\n  for (i=0; i < m_Indices.length; i++) {\n    values[i]=instance.value(m_Indices[i]);\n  }\n  result=new DenseInstance(instance.weight(),values);\n  result.setDataset(getOutputFormat());\n  copyValues(result,false,instance.dataset(),getOutputFormat());\n  result.setDataset(getOutputFormat());\n  return result;\n}\n", "void activateStatusAttribute(String attributeName){\n  RPEntity entity=entityRef.get();\n  if (entity == null) {\n    return;\n  }\n  if (!entity.has(attributeName)) {\n    entity.put(attributeName,0);\n    entity.notifyWorldAboutChanges();\n  }\n}\n", "public static void offerSuperUser ( Activity activity ) { getInternals ( ) . offerSuperUser ( activity ) ; }", "private Constants ( ) { }", "public void flush() throws IOException {\n  other.write(buf,0,bufOff);\n  bufOff=0;\n  Arrays.fill(buf,(byte)0);\n}\n", "public void addListListener(ActionListener a){\n  listeners.add(a);\n}\n", "@JsTopic\r\n\t@WsDataService\r\n\tpublic Integer unsubscribe(@JsTopicName(prefix = Constants.Topic.SUBSCRIBERS) String topic, Session session) {\r\n\t\treturn topicManager.unregisterTopicSession(topic, session);\r\n\t}", "  public Class getClassFromBytes(byte[] bytes) {\n    Class dstClass = defineClass(null,bytes,0,bytes.length);\n    resolveClass(dstClass);\n    return dstClass;\n  }\n", "\tpublic void solve(boolean intermediate) {\n\t\t//tests if all the stations are load independent\n\t\tboolean loadIndep = true;\n\t\tfor (int i = 0; i < stations && loadIndep; i++) {\n\t\t\tif (type[i] == Solver.LD) {\n\t\t\t\tloadIndep = false;\n\t\t\t}\n\t\t}\n\n\t\t//this var is used by \"toString\" method: if true, also intermediate\n\t\t//results will be written\n\t\tintermediate_results = intermediate;\n\n\t\tif (loadIndep) {\n\t\t\tsolveSingleLI(intermediate);\n\t\t} else {\n\t\t\t//TODO: aggiungere caso intermediate=true per LD (dopo averlo implementato!!)\n\n\t\t\t//TODO: debug\n\t\t\tsolveSingleLD(intermediate);\n\t\t\t//solveSingleLDErrCtrFaster(intermediate);\n\t\t}\n\n\t\treorder();\n\n\t}\n", "public IntStream ones() {\n\t\treturn IntStream.range(0, length())\n\t\t\t.filter(index -> bit.get(_genes, index));\n\t}", "@Override\n  public final SalesReturnLine process(\n    final Map<String, Object> pAddParam,\n      final SalesReturnLine pEntityPb,\n        final IRequestData pRequestData) throws Exception {\n    SalesReturnLine entity = this.prcAccEntityPbCopy\n      .process(pAddParam, pEntityPb, pRequestData);\n    if (entity.getReversedId() != null) {\n      throw new ExceptionWithCode(ExceptionWithCode.FORBIDDEN,\n        \"attempt_to_reverse_reversed\");\n    }\n    entity.setReversedId(pEntityPb.getItsId());\n    entity.setItsQuantity(entity.getItsQuantity().negate());\n    entity.setSubtotal(entity.getSubtotal().negate());\n    entity.setTotalTaxes(entity.getTotalTaxes().negate());\n    entity.setItsTotal(entity.getItsTotal().negate());\n    return entity;\n  }", "public void clear(){\n  size=0;\n  items.clear();\n}\n", "    public void close() {\n        applet.destroy();\n        opener.eval( WINDOW_NAME +\".close()\" );\n        opener.eval( \"delete \" + WINDOW_NAME );\n    }\n", "public CNodeClickHandler ( final CGraphModel model ) { m_model = Preconditions . checkNotNull ( model , STR_ ) ; }", "    public void updateHeartbeat() {\n        final long now = SystemClock.elapsedRealtime();\n        if (now < mLastHeartbeatSendTime + HEARTBEAT_SEND_INTERVAL_IN_MS) return;\n        try {\n            mLastHeartbeatSendTime = now;\n            mSyncContext.sendHeartbeat();\n        } catch (RemoteException e) {\n            // this should never happen\n        }\n    }\n", "public static String trim(String list,String delimiter,int[] removeInfo,boolean multiCharacterDelimiter){\n  if (list.length() == 0)   return \"\";\n  if (multiCharacterDelimiter && delimiter.length() > 1) {\n    int from=0;\n    while (list.length() >= from + delimiter.length()) {\n      if (list.indexOf(delimiter,from) == from) {\n        from+=delimiter.length();\n        removeInfo[0]++;\n        continue;\n      }\n      break;\n    }\n    if (from > 0)     list=list.substring(from);\n    while (list.length() >= delimiter.length()) {\n      if (list.lastIndexOf(delimiter) == list.length() - delimiter.length()) {\n        removeInfo[1]++;\n        list=list.substring(0,list.length() - delimiter.length());\n        continue;\n      }\n      break;\n    }\n    return list;\n  }\n  if (list.length() == 0)   return \"\";\n  int from=0;\n  int to=list.length();\n  char[] del=delimiter.toCharArray();\n  char c;\n  outer:   while (list.length() > from) {\n    c=list.charAt(from);\n    for (int i=0; i < del.length; i++) {\n      if (c == del[i]) {\n        from++;\n        removeInfo[0]++;\n        continue outer;\n      }\n    }\n    break;\n  }\n  outer:   while (to > from) {\n    c=list.charAt(to - 1);\n    for (int i=0; i < del.length; i++) {\n      if (c == del[i]) {\n        to--;\n        removeInfo[1]++;\n        continue outer;\n      }\n    }\n    break;\n  }\n  int newLen=to - from;\n  if (newLen < list.length()) {\n    return list.substring(from,to);\n  }\n  return list;\n}\n", "    public void removeBuddy(final String theBuddyName) {\n\ttry {\n\t    if (isContained(_myBuddies, theBuddyName)) {\n\t\tIMBuddy myBuddy = ((IMBuddy) _myBuddies.get(theBuddyName));\n\t\tif (myBuddy.group() != null) {\n\t\t    myBuddy.group().removeBuddy(myBuddy);\n\t\t}\n\t\t_myBuddies.remove(theBuddyName);\n\t\tdeliver(DATA, \"toc2_remove_buddy \" + normalize(theBuddyName)\n\t\t\t+ \" \\\"\" + myBuddy.group().name() + \"\\\"\");\n\t    }\n\t} catch (NullPointerException e) {\n\t    System.out.println(\"ERROR @ AIMChat.removeBuddy. \" + e);\n\t}\n    }\n", "private ByteBuffer wrap ( GSByteArrayOutputStream bos ) { ByteBuffer byteBuffer = ByteBuffer . wrap ( bos . getBuffer ( ) ) ; byteBuffer . order ( ByteOrder . BIG_ENDIAN ) ; return byteBuffer ; }", "private String trimToFile(String warLocation) {\n    if (warLocation.startsWith(JAR_FILE_PREFIX)) {\n      warLocation = warLocation.substring(JAR_FILE_PREFIX.length());\n      int warBangPos = warLocation.indexOf(WAR_BANG_SUFFIX);\n      warLocation = warLocation.substring(0, warBangPos + 4);\n    }\n    return warLocation;\n  }", "    public PersistentForm getItemForm() throws DataObjectNotFoundException {\n\n        DataObject pForm = (DataObject) get(ITEM_FORM);\n        if (pForm == null) {\n            return null;\n        } else {\n            return new PersistentForm(pForm);\n        }\n\n    }\n", "    public boolean equals(Object format) {\n\tif (format instanceof H261Format) {\n\t    return super.equals(format) &&\n\t\tstillImageTransmission == ((H261Format)format).stillImageTransmission;\n\t}\n\treturn false;\n    }\n", "public void addChildrenOf ( CSTNode of ) { for ( int i = NUM_ ; i < of . size ( ) ; i ++ ) { add ( of . get ( i ) ) ; } }", "public void onRangeChanged(){\n  mAdapter.setRange(mMinDate,mMaxDate);\n  setDate(mSelectedDay.getTimeInMillis(),false,false);\n  updateButtonVisibility(mViewPager.getCurrentItem());\n}\n", "public void writeOperationsEngineFile(){\n  makeBackupFile(defaultOperationsFilename());\n  try {\n    if (!checkFile(defaultOperationsFilename())) {\n      java.io.File file=new java.io.File(defaultOperationsFilename());\n      java.io.File parentDir=file.getParentFile();\n      if (!parentDir.exists()) {\n        if (!parentDir.mkdir()) {\n          log.error(\"Directory wasn't created\");\n        }\n      }\n      if (file.createNewFile()) {\n        log.debug(\"File created\");\n      }\n    }\n    writeFile(defaultOperationsFilename());\n  }\n catch (  Exception e) {\n    log.error(\"Exception while writing the new CSV operations file, may not be complete: \" + e);\n  }\n}\n", "public synchronized void release ( Object obj ) { if ( obj == null ) { throw new NullPointerException ( STR_ + STR_ ) ; } if ( alloced . remove ( obj ) == BOOL_ ) { throw new IllegalArgumentException ( STR_ + obj ) ; } freeResource ( obj ) ; notifyAll ( )", "public static boolean parseBracedCastContent ( PsiBuilder b , int l ) { assert b instanceof PerlBuilder ; boolean oldInterpolatedState = ( ( PerlBuilder ) b ) . setIsInterpolated ( BOOL_ ) ; boolean oldRegexState = ( ( PerlBuilder ) b ) . setIsRegex ( BOO", "public final String levelDataToString ( ) { return STR_ + getLevel ( ) + STR_ + STR_ + getLevelParams ( ) + STR_ + STR_ + getLevelConstraints ( ) + STR_ + STR_ + getArgLevelConstraints ( ) + STR_ + STR_ + getArgLevelParams ( ) + STR_ ; }", "public XMLParser(final Class classToBeBound,final String schema) throws XMLException {\n  try {\n    JAXBContext jc=JAXBContext.newInstance(classToBeBound);\n    marshaller=jc.createMarshaller();\n    marshaller.setSchema(XMLSchemaUtils.createSchema(schema));\n    unmarshaller=jc.createUnmarshaller();\n    unmarshaller.setSchema(XMLSchemaUtils.createSchema(schema));\n  }\n catch (  JAXBException e) {\n    throw new XMLException(\"Cannot instantiate marshaller/unmarshaller for \" + classToBeBound,e);\n  }\n}\n", "public void paintToolBarBorder ( SynthContext context , Graphics g , int x , int y , int w , int h , int orientation ) { paintBorder ( context , g , x , y , w , h , orientation ) ; }", "   public void produce(ByteBuffer buffer, int off, int len) throws IOException {\n      int size = Math.min(len, limit - count);          \n      \n      try {\n         if(monitor.isClosed()) {\n            throw new ProducerException(\"Response content complete\");\n         }\n         sender.send(buffer, off, size);\n         \n         if(count + size == limit) {\n            monitor.ready(sender);\n         }        \n      } catch(Exception cause) {\n         if(sender != null) {\n            monitor.error(sender);\n         }\n         throw new ProducerException(\"Error sending response\", cause);\n      }\n      count += size;\n   }\n", "    static public void sortTable(Table table, TableColumn[] columns, List<String[]> tableValues) {\n        TableColumn column = table.getSortColumn();\n        int dir = table.getSortDirection();\n        if (column != null && dir != SWT.NONE) {\n            int i = 0;\n            while (column != columns[i]) {\n                i++;\n            }\n            Collections.sort(tableValues, new TableComparator(i, dir));\n        }\n    }\n", "\tpublic void removeOntology(Ontology ontology) {\n\t\tontologies.remove(ontology.getName());\n\t}\n", "public void start(){\n  try {\n    serviceDiscovery.start();\n    cache.start();\n    updateState();\n  }\n catch (  Exception e) {\n    LOG.error(e.getMessage(),e);\n    throw new IllegalStateException(\"Unable to start\",e);\n  }\n}\n", "  public float getIntersection(Line2D.Float line) {\n    // The intersection point I, of two vectors, A1->A2 and\n    // B1->B2, is:\n    // I = A1 + Ua * (A2 - A1)\n    // I = B1 + Ub * (B2 - B1)\n    //\n    // Solving for Ua gives us the following formula.\n    // Ua is returned.\n    float denominator = (line.y2 - line.y1) * (x2 - x1) - (line.x2 - line.x1) * (y2 - y1);\n\n    // check if the two lines are parallel\n    if (denominator == 0) {\n      return -1;\n    }\n\n    float numerator = (line.x2 - line.x1) * (y1 - line.y1) - (line.y2 - line.y1) * (x1 - line.x1);\n\n    return numerator / denominator;\n  }\n", "public void clean(){\n  addArg(\"clean\");\n}\n", "private static ArrayList<String> readAllFiles(File[] files) throws FileNotFoundException {\n  ArrayList<String> strings=new ArrayList<String>();\n  for (  File file : files) {\n    strings.add(readString(file));\n  }\n  return strings;\n}\n", "private void fastadd(int wo, int off) {\n\t\tthis.buffer.add(off - this.sizeinwords);\n\t\tthis.buffer.add(wo);\n\t\tthis.sizeinwords = off + 1;\n\t}", "    public Reference removeHeritedField(String identifier) {\n        return (Reference)heritedReferencedField.remove(identifier);\n    }\n", "public void begin ( Attributes attributes ) throws Exception { UIComponent uic = ( UIComponent ) digester . peek ( ) ; AttributesImpl attrs = new AttributesImpl ( attributes ) ; for ( int i = NUM_ ; i < attrs . getLength ( ) ; i ++ ) { String qName = attr", "@Help(\n    help =\n        \"Get the VirtualNetworkFunctionRecord Dependency of a NetworkServiceRecord with specific id\"\n  )\n  public VNFRecordDependency getVNFDependency(final String idNsr, final String idVnfrDep)\n      throws SDKException {\n    String url = idNsr + \"/vnfdependencies\" + \"/\" + idVnfrDep;\n    return (VNFRecordDependency) requestGet(url, VNFRecordDependency.class);\n  }", "public IteratorBuilder ( GigaSpace gigaSpace ) { this . gigaSpace = gigaSpace ; }", "public AccessTokensBuilder connectionRequestTimeout ( final int connectionRequestTimeout ) { checkLock ( ) ; this . httpConfig . setConnectionRequestTimeout ( connectionRequestTimeout ) ; return this ; }", "public void marshall(Core core, ProtocolMarshaller protocolMarshaller) {\n\n        if (core == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(core.getCertificateArn(), CERTIFICATEARN_BINDING);\n            protocolMarshaller.marshall(core.getId(), ID_BINDING);\n            protocolMarshaller.marshall(core.getSyncShadow(), SYNCSHADOW_BINDING);\n            protocolMarshaller.marshall(core.getThingArn(), THINGARN_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public static Observable<String> from(final String host, final int port, long quietTimeoutMs,\n            long reconnectDelayMs, Charset charset, Scheduler scheduler) {\n        // delay connect by delayMs so that if server closes\n        // stream on every connect we won't be in a mad loop of\n        // failing connections\n        return from(socketCreator(host, port, (int) quietTimeoutMs), quietTimeoutMs,\n                reconnectDelayMs, charset, scheduler); //\n    }", "public void writeUI32(long value) throws IOException {\n  flushBits();\n  out.write((int)(value & 0xff));\n  out.write((int)(value >> 8));\n  out.write((int)(value >> 16));\n  out.write((int)(value >> 24));\n  bytesWritten+=4;\n}\n", "Rule BElem() {\r\n\t\treturn FirstOf(\r\n\t\t\tWSP(), ChordOrText(), Gracing(), GraceNotes(), SlurBegin(), SlurEnd()\r\n\t\t).label(BElem);\r\n\t}", "public BaseSliderView image(String url){\n        if(mFile != null || mRes != 0){\n            throw new IllegalStateException(\"Call multi image function,\" +\n                    \"you only have permission to call it once\");\n        }\n        mUrl = url;\n        return this;\n    }", "private void pendingEvent ( EventReg reg , ServiceID sid , Item item , int transition , boolean copyItem ) { if ( item != null && copyItem ) item = copyItem ( item ) ; newNotifies . add ( new EventTask ( reg , sid , item , transition ) ) ; }", "public java.util.List<String> getPartitions() {\n        if (partitions == null) {\n            partitions = new com.amazonaws.internal.SdkInternalList<String>();\n        }\n        return partitions;\n    }", "    public int getHealthMod(){\n        int retval = 250;\n        \n        try{\n            retval = Integer.parseInt(txtHealthMod.getText());\n            if(retval <= -200 || retval >= 200){\n                JOptionPane.showMessageDialog(this, \"You have created a dangerous situation. Health modifications should be less than 200.\");\n                retval = 250;\n            }\n        }catch(Exception e){\n            JOptionPane.showMessageDialog(this, \"The change in health should be a whole number.\");\n            retval = 250;\n        }\n        \n        return retval;\n    }\n", "public void setValues(BGContext context) {\n\t\tString contextName = DefaultContextTranslationHelper.translateIfDefaultContextName(context, getTranslator());\n\t\tif (defaultContext != null) {\n\t\t\tdefaultContext.setChecked(context.isDefaultContext());\n\t\t}\n\t\tnam", "public void set_logging_level (DevVarLongStringArray dvlsa) throws DevFailed {\n    //- Check input\n    if (dvlsa.svalue.length != dvlsa.svalue.length) {\n      String desc = \"Imcompatible command argument type, long and string arrays must have the same length\";\n      Except.throw_exception(\"API_IncompatibleCmdArgumentType\", desc, \"Logging::set_logging_level\");\n    }\n    //- For each entry in dvlsa.svalue\n    for (int i = 0; i < dvlsa.svalue.length; i++) {\n      //- Check/get logging level (may throw DevFailed)\n      Level level = tango_to_log4j_level(dvlsa.lvalue[i]);\n      //- Get ith wilcard\n      String pattern = dvlsa.svalue[i].toLowerCase();\n      //- Get devices which name matches the pattern pattern\n      Vector dl = Util.instance().get_device_list(pattern);\n      //- For each device in dl\n      Iterator it = dl.iterator();\n      while (it.hasNext()) {\n        Logger logger = ((DeviceImpl)it.next()).get_logger();\n        if (logger == null) {\n          String desc = \"Internal error. Got invalid logger for device \" + logger.getName();\n          Except.throw_exception(\"API_InternalError\", desc, \"Logging::set_logging_level\");\n        }\n        // set logger's level\n        logger.setLevel(level);\n        Util.out4.println(\"Logging level set to \" + level.toString() + \" for device \" + logger.getName());\n      } //  while it.hasNext\n    } // for i\n\t}", "public void alarm(Object thandle)\n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(tc, \"alarm\", new Object[] {this, mp.getMessagingEngineUuid()});\n\n    synchronized (this)\n    {\n      if (!closed)\n      {\n        if ((executeSinceExpiry) || executing)\n        { // has committed recently\n          executeSinceExpiry = false;\n        }\n        else\n        { // has not committed recently\n          try\n          {\n            if (enqueuedUnits.size() > 0)\n              startExecutingUpdates();\n          }\n          catch (ClosedException e)\n          {\n            // No FFDC code needed\n            // do nothing as error already logged by startExecutingUpdates\n          }\n        }\n      }\n    } // end synchronized (this)\n\n    if (maxCommitInterval > 0)\n    {\n      mp.getAlarmManager().create(maxCommitInterval, this);\n    }\n\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.exit(tc, \"alarm\");\n  }", "\tpublic Object getHeaderValue(String name){\n\t\tString header = (String)getHeader(name);\n\t\tif(header != null)\n\t\t\treturn header.substring(header.indexOf(':') + 1, header.length()).trim();\n\t\treturn \"\";\n\t}\n", "private Optional(T value){\n  this.value=Objects.requireNonNull(value);\n}\n", "\t\tpublic Settings setPickedLessons(List<Lesson> pickedLessons) {\n\t\t\tthis.pickedLessons = new ArrayList<Lesson>( pickedLessons);\n\t\t\treturn this;\n\t\t}\n", "   public void setTextPos(double x,double y) {\n      startText();\n      append(x-tX).append(y-tY).append(\"Td\");\n      tX=x;\n      tY=y;\n   }\n", "public EventDescriptor ( Class eventClass , Long eventID ) { this . eventClass = eventClass ; this . eventID = eventID ; }", "private void actorStream ( List < Movie > movies ) { Stream < List < Actor > > actorStream = movies . stream ( ) . map ( null ) ; actorStream . forEach ( null ) ; }", "public void testTransitions ( ) throws Exception { startReplicatorManager ( ) ; try { TungstenProperties conf = new TungstenProperties ( ) ; conf . setString ( ReplicatorConf . APPLIER , applierPlugin ) ; conf . setString ( ReplicatorConf . EXTRACTOR , extractorPlugin ) ; conf . setString ( ReplicatorConf . THL_STORAGE , thlStoragePlugin ) ; conf . setString ( ReplicatorConf . THL_URI , STR_ ) ; conf . setString ( ReplicatorConf . MASTER_CONNECT_URI , STR_ ) ; conf . setString ( ReplicatorConf . METADATA_SCHEMA , STR_ ) ; waitStatus ( STR_ ) ; rmb . configure ( conf . map ( ) ) ; rmb . online ( ) ; waitStatus ( STR_ ) ; rmb . offline ( ) ; waitStatus ( STR_ ) ; rmb . online ( ) ; waitStatus ( STR_ ) ; rmb . offline ( ) ; waitStatus ( STR_ ) ; rmb . online ( ) ; waitStatus ( STR_ ) ; rmb . offline ( ) ; waitStatus ( STR_ ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( e . getMessage ( ) ) ; } stopReplicatorManager ( ) ; }", "private double[] multiScore(MultiStringWrapper ms,MultiStringWrapper mt) \n\t{\n\t\tif (ms.size() != mt.size()) {\n\t\t\tthrow new IllegalArgumentException(\"inputs have different numbers of fields\");\n\t\t}\n\t\tint n = ms.size();\n\t\tdouble scores[] = new double[n];\n\t\tfor (int i=0; i<n; i++) {\n\t\t\tscores[i] = getDistance(i).score(ms.get(i), mt.get(i));\n\t\t}\n\t\treturn scores;\n\t}", "private void constructPropertiesString(String propertyName, Object property) throws IOException {\n        getWriter().write(propertyName + String.valueOf(property) + \"\\n\");\n    }", "public boolean hasNextEvent() throws IOException {\n        /* In Fasterxml parser, hasNextEvent will consume next token. So do not call it multiple times. */\n        JsonToken nextToken = jsonParser.nextToken();\n        return nextToken == JsonToken.START_OBJECT || nextToken == JsonToken.START_ARRAY;\n    }", "public StunMessageEvent ( StunStack stunStack , RawMessage rawMessage , Message parsedMessage ) { super ( stunStack , rawMessage . getLocalAddress ( ) , parsedMessage ) ; this . rawMessage = rawMessage ; }", "@Override public boolean storesUpperCaseQuotedIdentifiers() throws SQLException {\n  debugCodeCall(\"storesUpperCaseQuotedIdentifiers\");\n  String m=conn.getMode();\n  if (m.equals(\"MySQL\")) {\n    return true;\n  }\n  return false;\n}\n", "    public String getText(Object node) {\n        String text = \"\"; //$NON-NLS-1$\n        if (node instanceof File) {\n            text = ((File) node).getName();\n        }\n        return text;\n    }\n", "public void paint ( Graphics2D g ) { g . setRenderingHint ( RenderingHints . KEY_ANTIALIASING , RenderingHints . VALUE_ANTIALIAS_ON ) ; origAlpha = NUM_ ; Composite origComposite = g . getComposite ( ) ; if ( origComposite instanceof AlphaComposite ) { Al", "  public void dispose() {\n    // don't forget this call.  It not only disposes of the frame, it\n    // also dispatches a WINDOW_CLOSED event to registered WindowListeners\n    super.dispose();\n\n    --_numFramesOpen;\n\n    if ( 0 == _numFramesOpen && systemExitWhenAllViewerInternalFramesClosed )\n      System.exit( 0 );\n  }\n", "public ClassDependency(Class<?> cl){\n  _cl=cl;\n  _className=cl.getName();\n}\n", "List<Field> ownFields(){\n  return ownFields;\n}\n", "\tprivate String getPrimaryKey (Etl etl) {\n\t\t\n\t\tString primaryKey = \"\";\n\n\t\tfor (ExtendedField field : etl.getTargetLayout()) {\n\t\t\tif (field.getPrimaryKey()) {\n\t\t\t\treturn field.getName();\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn primaryKey; \n\t}\n", "void fireModifyListeners(){\n  for (  final ModifyListener listener : this.modifyListeners) {\n    final Event e=new Event();\n    e.widget=this;\n    final ModifyEvent modifyEvent=new ModifyEvent(e);\n    listener.modifyText(modifyEvent);\n  }\n}\n", "public final void annotatePOSToKAF(final KAFDocument kaf) {\n    final List<List<WF>> sentences = kaf.getSentences();\n    for (final List<WF> wfs : sentences) {\n\n      final List<ixa.kaflib.Span<WF>> tokenSpans = new ArrayList<ixa.kaflib.Span<WF>>();\n      List<Morpheme> morphemes = null;\n      final String[] tokens = new String[wfs.size()];\n      for (int i = 0; i < wfs.size(); i++) {\n        tokens[i] = wfs.get(i).getForm();\n        final List<WF> wfTarget = new ArrayList<WF>();\n        wfTarget.add(wfs.get(i));\n        tokenSpans.add(KAFDocument.newWFSpan(wfTarget));\n      }\n      if (this.multiwords) {\n        final String[] multiWordTokens = this.multiWordMatcher\n            .getTokensWithMultiWords(tokens);\n        List<String> posTags = this.posTagger.posAnnotate(multiWordTokens);\n        String[] posTagsArray = new String[posTags.size()];\n        posTagsArray = posTags.toArray(posTagsArray);\n        morphemes = this.lemmatizer.getMorphemes(multiWordTokens, posTagsArray);\n        getMultiWordSpans(tokens, wfs, tokenSpans);\n      } else {\n        List<String> posTags = this.posTagger.posAnnotate(tokens);\n        String[] posTagsArray = new String[posTags.size()];\n        posTagsArray = posTags.toArray(posTagsArray);\n        morphemes = this.lemmatizer.getMorphemes(tokens, posTagsArray);\n      }\n      for (int i = 0; i < morphemes.size(); i++) {\n        final Term term = kaf.newTerm(tokenSpans.get(i));\n        if (this.dictag || multiwords) {\n          final String dictPosTag = this.dictMorphoTagger.tag(morphemes.get(i)\n              .getWord(), morphemes.get(i).getTag());\n          morphemes.get(i).setTag(dictPosTag);\n        }\n        final String posId = Resources.getKafTagSet(morphemes.get(i).getTag(), lang);\n        final String type = Resources.setTermType(posId);\n        // dictionary lemmatizer overwrites probabilistic predictions if\n        // lemma is not equal to \"O\"\n        if (this.dictLemmatizer != null) {\n          final String lemma = this.dictLemmatizer.apply(morphemes.get(i)\n              .getWord(), morphemes.get(i).getTag());\n          if (!lemma.equalsIgnoreCase(\"O\")) {\n            morphemes.get(i).setLemma(lemma);\n          }\n        }\n        term.setType(type);\n        term.setLemma(morphemes.get(i).getLemma());\n        term.setPos(posId);\n        term.setMorphofeat(morphemes.get(i).getTag());\n      }\n    }\n  }", "public void splitQuery(I invocation,String rawURI) throws IOException {\n  int p=rawURI.indexOf('?');\n  if (p > 0) {\n    invocation.setQueryString(rawURI.substring(p + 1));\n    rawURI=rawURI.substring(0,p);\n  }\n  invocation.setRawURI(rawURI);\n  String uri=normalizeUri(rawURI);\n  invocation.setURI(uri);\n}\n", "public Vector shuffle() {\n        Vector result = copy();\n\n        // Conduct Fisher-Yates shuffle\n        Random random = new Random();\n\n        for (int i = 0; i < length; i++) {\n            int j = random.nextInt(length - i) + i;\n            swapElements(i, j);\n        }\n\n        return result;\n    }", "public static <S,K>Collector<S,?,LinkedHashMap<K,S>> toLinkedDictionary(Function<? super S,? extends K> keyMapper){\n  return Collectors.toMap(keyMapper,Function.identity(),StreamUtils.throwingMerger(),null);\n}\n", "public static DataInputStream newDataInputStream(Path self) throws IOException {\n  return new DataInputStream(Files.newInputStream(self));\n}\n", "public static void track(JTextComponent text){\n  new TextListener(text);\n}\n", "public boolean tryPublishEvent(EventTranslator<E> translator) {\n        try {\n            final long sequence = sequencer.tryNext();\n            translateAndPublish(translator, sequence);\n            return true;\n        } catch (InsufficientCapacityException e) {\n            return false;\n        }\n    }", "public void cleanPage(){\n  while (!(mDrawableList.isEmpty())) {\n    mDrawableList.remove(0);\n  }\n  invalidate();\n}\n", "@Override\n    public TitanVertex addVertex(Object... keyValues) {\n        ElementHelper.legalPropertyKeyValueArray(keyValues);\n        if (ElementHelper.getIdValue(keyValues).isPresent()) throw Vertex.Exceptions.userSuppliedIdsNotSupported();\n        Object labelValue = null;\n        for (int i = 0; i < keyValues.length; i = i + 2) {\n            if (keyValues[i].equals(T.label)) {\n                labelValue = keyValues[i+1];\n                Preconditions.checkArgument(labelValue instanceof VertexLabel || labelValue instanceof String,\n                        \"Expected a string or VertexLabel as the vertex label argument, but got: %s\",labelValue);\n                if (labelValue instanceof String) ElementHelper.validateLabel((String) labelValue);\n            }\n        }\n        VertexLabel label = BaseVertexLabel.DEFAULT_VERTEXLABEL;\n        if (labelValue!=null) {\n            label = (labelValue instanceof VertexLabel)?(VertexLabel)labelValue:getOrCreateVertexLabel((String) labelValue);\n        }\n\n        final TitanVertex vertex = addVertex(null,label);\n//        for (int i = 0; i < keyValues.length; i = i + 2) {\n//            if (!keyValues[i].equals(T.id) && !keyValues[i].equals(T.label))\n//                ((StandardTitanTx)this).addPropertyInternal(vertex,getOrCreatePropertyKey((String) keyValues[i]),keyValues[i+1]);\n//        }\n        com.thinkaurelius.titan.graphdb.util.ElementHelper.attachProperties(vertex, keyValues);\n        return vertex;\n    }", "public static Class<?>[] buildArgumentClasses( Object... arguments ) {\n        if (arguments == null || arguments.length == 0) return EMPTY_CLASS_ARRAY;\n        Class<?>[] result = new Class<?>[arguments.length];\n        int i = 0;\n        for (Object argument : arguments) {\n            if (argument != null) {\n                result[i] = argument.getClass();\n            } else {\n                result[i] = null;\n            }\n        }\n        return result;\n    }", "public RDFXMLWriter(OutputStream out){\n  this(new OutputStreamWriter(out,Charset.forName(\"UTF-8\")));\n}\n", "    public String getChildElementXML() {\n\n        Element terminateVmElement = new Element(LinkedProcess.TERMINATE_VM_TAG, LinkedProcess.LOP_FARM_NAMESPACE);\n\n        if (this.vmId != null) {\n            terminateVmElement.setAttribute(LinkedProcess.VM_ID_ATTRIBUTE, this.vmId);\n        }\n\n        return LinkedProcess.xmlOut.outputString(terminateVmElement);\n    }\n", "  public FeatureMap showDialog() {\n    pack();\n    userCancelled = true;\n    setModal(true);\n    super.setVisible(true);\n    return userCancelled ? null : tempFMHolder.getFeatures();\n  }\n", "static public boolean isEqual(float a,float b){\n  return Math.abs(a - b) <= FLOAT_ROUNDING_ERROR;\n}\n", "public void updateSize(){\n  int viewWidth=getWidth();\n  int viewHeight=getHeight();\n  if (viewWidth == 0 || viewHeight == 0 || mTermSession == null)   return;\n  int newColumns=Math.max(4,(int)(viewWidth / mRenderer.mFontWidth));\n  int newRows=Math.max(4,(viewHeight - mRenderer.mFontLineSpacingAndAscent) / mRenderer.mFontLineSpacing);\n  if (mEmulator == null || (newColumns != mEmulator.mColumns || newRows != mEmulator.mRows)) {\n    mTermSession.updateSize(newColumns,newRows);\n    mEmulator=mTermSession.getEmulator();\n    mTopRow=0;\n    scrollTo(0,0);\n    invalidate();\n  }\n}\n", "    public void notifyStateDestroyed(ItemState destroyed) {\n        for (Reference<ItemStateListener> ref : listeners) {\n            ItemStateListener l = ref.get();\n            if (l != null) {\n                l.stateDestroyed(destroyed);\n            }\n        }\n    }\n", "private Tag clone ( final ITreeNode < CTag > currentNode , final Tag parentExpression ) { final Tag childExpression = new Tag ( currentNode ) ; m_allTags . put ( currentNode , childExpression ) ; if ( parentExpression != null ) { Tag . link ( parentExpres", "public void handleReadRequest ( ChannelEntry channelEntry , Reader . Context ctx , ReadSelectorThread handler ) { MarshalInputStream stream = channelEntry . readRequest ( ctx ) ; if ( ( ctx . phase != Reader . Context . Phase . FINISH ) || ( stream == nul", "public void addIncrement(String text) throws BadLocationException {\n  if (text == null || text.length() == 0 || text.equals(\"\\n\")) {\n    return;\n  }\n else   if (text.charAt(text.length() - 1) != 10) {\n    throw new BadLocationException(\"Input does not end with newline\");\n  }\n  document.replace(document.getLength(),0,text);\n}\n", "void bootstrapPlugin(IProducerRegistry producerRegistry) throws PHPPluginBootstrapException {\n\n        config.setConfigChangedNotifier(new ConfigChangedNotifierImpl());\n        MappersRegistry mappersRegistry = new MappersRegistry();\n        listener = new OnProducerDataReceivedListenerImpl(mappersRegistry, producerRegistry);\n\n        for (MapperConfig mapperConfig : config.getMappers()) {\n\n            try {\n\n                mappersRegistry.registerMapper(\n                        mapperConfig.getMapperId(),\n                        ((Mapper) createInstance(mapperConfig.getMapperClass()))\n                );\n\n            } catch (ClassNotFoundException e) {\n                throw new PHPPluginBootstrapException(\n                        \"Mapper class \" + mapperConfig.getMapperClass() + \" not found\", e\n                );\n            } catch (NoSuchMethodException | IllegalAccessException e) {\n                throw new PHPPluginBootstrapException(\n                        \"Mapper class must have default public constructor\", e\n                );\n            } catch (InvocationTargetException e) {\n                throw new PHPPluginBootstrapException(\n                        \"Mapper constructor throws exception\", e\n                );\n            } catch (InstantiationException e) {\n                throw new PHPPluginBootstrapException(\n                        \"Failed to instance mapper of class \" + mapperConfig.getMapperClass(), e\n                );\n            } catch (ClassCastException e) {\n                throw new PHPPluginBootstrapException(\n                        \"Class \" + mapperConfig.getMapperClass() +\n                                \" is not instance of \" + Mapper.class.getCanonicalName(), e\n                );\n            }\n\n        }\n\n        boolean enableConnectorsInitOnStartup\n                = PROPERTY_TRUE_VALUE.equals(startupProperties.getProperty(PROPERTY_CONNECTORS_FORCE_ENABLED));\n\n       configureConnectors(enableConnectorsInitOnStartup);\n\n    }", "\tpublic MethodEntry getEntryPoint() {\n\t\tif (methodEntry == null) {\n\t\t\tthrow new IllegalStateException(\"call resolve(...) first\");\n\t\t}\n\t\treturn methodEntry;\n\t}\n", "    public void itemsUpdated(Collection<InternalVersionItem> items) {\n        VersioningLock.ReadLock lock = acquireReadLock();\n        try {\n            synchronized (versionItems) {\n                for (InternalVersionItem item : items) {\n                    InternalVersionItem cached = versionItems.remove(item.getId());\n                    if (cached != null) {\n                        if (cached instanceof InternalVersionHistoryImpl) {\n                            InternalVersionHistoryImpl vh = (InternalVersionHistoryImpl) cached;\n                            try {\n                                vh.reload();\n                                versionItems.put(vh.getId(), vh);\n                            } catch (RepositoryException e) {\n                                log.warn(\"Unable to update version history: \" + e.toString());\n                            }\n                        }\n                    }\n                }\n            }\n        } finally {\n            lock.release();\n        }\n    }\n", "    public void targetFinished(BuildEvent event) {\n        if (Project.MSG_INFO <= msgOutputLevel) {\n            String msg = \" </pre>\" + StringUtils.LINE_SEP + \"</div>\";\n            printMessage(msg, out, event.getPriority());\n            log(msg);\n        }\n    }\n", "public void setReleaseTagsAfterEnd(String configValue) {\n\n        OpenCms.getSystemInfo().getServletContainerSettings().setReleaseTagsAfterEnd(\n            Boolean.valueOf(configValue).booleanValue());\n    }", "protected void rollbackFromWithinCallback(boolean indoubt,boolean heuristic) throws HeurCommitException, HeurMixedException, SysException, HeurHazardException, java.lang.IllegalStateException {\n  CoordinatorStateHandler nextStateHandler=null;\n  try {\n    coordinator_.setState(TxState.ABORTING);\n    committed_=new Boolean(false);\n    Vector<Participant> participants=coordinator_.getParticipants();\n    int count=(participants.size() - readOnlyTable_.size());\n    TerminationResult rollbackresult=new TerminationResult(count);\n    Enumeration<Participant> enumm=participants.elements();\n    while (enumm.hasMoreElements()) {\n      Participant p=enumm.nextElement();\n      if (!readOnlyTable_.contains(p)) {\n        RollbackMessage rm=new RollbackMessage(p,rollbackresult,indoubt);\n        propagator_.submitPropagationMessage(rm);\n      }\n    }\n    rollbackresult.waitForReplies();\n    int res=rollbackresult.getResult();\n    if (indoubt && res != TerminationResult.ALL_OK) {\n      if (res == TerminationResult.HEUR_MIXED) {\n        Set<Participant> hazards=rollbackresult.getPossiblyIndoubts();\n        nextStateHandler=new HeurMixedStateHandler(this,hazards);\n        coordinator_.setStateHandler(nextStateHandler);\n        throw new HeurMixedException();\n      }\n else       if (res == TerminationResult.HEUR_COMMIT) {\n        nextStateHandler=new HeurCommittedStateHandler(this);\n        coordinator_.setStateHandler(nextStateHandler);\n        throw new HeurCommitException();\n      }\n else       if (res == TerminationResult.HEUR_HAZARD) {\n        Set<Participant> hazards=rollbackresult.getPossiblyIndoubts();\n        nextStateHandler=new HeurHazardStateHandler(this,hazards);\n        coordinator_.setStateHandler(nextStateHandler);\n        throw new HeurHazardException();\n      }\n    }\n else {\n      if (heuristic) {\n        nextStateHandler=new HeurAbortedStateHandler(this);\n      }\n else       nextStateHandler=new TerminatedStateHandler(this);\n      coordinator_.setStateHandler(nextStateHandler);\n    }\n  }\n catch (  RuntimeException runerr) {\n    throw new SysException(\"Error in rollback: \" + runerr.getMessage(),runerr);\n  }\ncatch (  InterruptedException e) {\n    InterruptedExceptionHelper.handleInterruptedException(e);\n    throw new SysException(\"Error in rollback: \" + e.getMessage(),e);\n  }\n}\n", "    public void setHeaderFilename(String s) {\n\n        if (s.endsWith(NI1_EXT))\n            setToNii();\n        else\n            setToNi1();\n\n        ds_hdrname = s;\n        if (ds_is_nii) {\n            if (!ds_hdrname.endsWith(NI1_EXT))\n                ds_hdrname = ds_hdrname + NI1_EXT;\n        } else {\n            if (!ds_hdrname.endsWith(ANZ_HDR_EXT))\n                ds_hdrname = ds_hdrname + ANZ_HDR_EXT;\n        }\n        return;\n    }\n", "@Override public void modifyVariableId(String oldId,String newId){\n  if (variable.equals(oldId)) {\n    variable=newId;\n  }\n}\n", "public void changeMagnification(double val){\n  camera.magnify(val);\n  updateGeometricState(0);\n  changed.set(true);\n  updateStatus();\n}\n", "public static String toBinaryString(long value){\n  return Long.toString(value,2);\n}\n", "public Graph<CV,CE> collapseVertexPartitions(VertexPartition<V,E> partitioning){\n  Graph<V,E> original=partitioning.getGraph();\n  Graph<CV,CE> collapsed=graph_factory.get();\n  for (  Set<V> set : partitioning.getVertexPartitions()) {\n    CV cv=vertex_factory.get();\n    collapsed.addVertex(vertex_factory.get());\n    set_collapsedv.put(set,cv);\n  }\n  for (  E e : original.getEdges()) {\n    Collection<V> incident=original.getIncidentVertices(e);\n    Collection<CV> collapsed_vertices=new HashSet<CV>();\n    Map<V,Set<V>> vertex_partitions=partitioning.getVertexToPartitionMap();\n    for (    V v : incident)     collapsed_vertices.add(set_collapsedv.get(vertex_partitions.get(v)));\n    if (collapsed_vertices.size() > 1) {\n      CE ce=edge_factory.get();\n      collapsed.addEdge(ce,collapsed_vertices);\n    }\n  }\n  return collapsed;\n}\n", "    private void nullAll() throws IOException {\n        vertexList.clear();\n        textureList.clear();\n        normalList.clear();\n        genNormalList.clear();\n        curGroup = null;\n        materialSets.clear();\n        materialNames.clear();\n        inFile.close();\n        inFile = null;\n        defaultMaterialGroup = null;\n    }\n", "void extendIncomingRegistersMenu ( JMenu menu , INaviCodeNode node , INaviInstruction instruction , String register ) ;", "    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {\n        validateConnection();\n\n        try {\n            return new PreparedStatementProxy(this, (JtdsPreparedStatement) _connection.prepareStatement(sql, resultSetType, resultSetConcurrency));\n        } catch (SQLException sqlException) {\n            processSQLException(sqlException);\n        }\n\n        return null;\n    }\n", "@Deprecated\n\tpublic static ScheduleInterface createScheduleFromConventions(\n\t\t\tLocalDate referenceDate,\n\t\t\tLocalDate startDate,\n\t\t\tString frequency,\n\t\t\tdouble maturity,\n\t\t\tString daycountConvention,\n\t\t\tString shortPeriodConvention\n\t\t\t)\n\t{\n\t\treturn createScheduleFromConventions(\n\t\t\t\treferenceDate,\n\t\t\t\tstartDate,\n\t\t\t\tfrequency,\n\t\t\t\tmaturity,\n\t\t\t\tdaycountConvention,\n\t\t\t\tshortPeriodConvention,\n\t\t\t\t\"UNADJUSTED\",\n\t\t\t\tnew BusinessdayCalendarAny(),\n\t\t\t\t0, 0);\n\t}", "public abstract T x ( float end ) ;", "public static List<DataflowPackage> stageClasspathElements(Collection<String> classpathElements,String stagingPath){\n  return stageClasspathElements(classpathElements,stagingPath,Sleeper.DEFAULT);\n}\n", "protected void broadcastFrequencyChange ( ) throws SourceException { broadcastFrequencyChangeEvent ( new FrequencyChangeEvent ( Event . NOTIFICATION_FREQUENCY_CHANGE , mFrequency ) ) ; }", "public static Type instance ( ) { return theInstance ; }", "public static <T extends DataObject>List<T> iteratorToList(Iterator<T> itr){\n  List<T> objs=new ArrayList<T>();\n  while (itr.hasNext()) {\n    objs.add(itr.next());\n  }\n  return objs;\n}\n", "public static Argument merge(int symbol, List<Argument> arguments) {\n        AgBuffer buffer;\n        List<AgBuffer> argBuffers;\n        int i;\n        int max;\n        Attribute start;\n        Argument arg;\n        Type mergedType;\n        int card;\n        List<Definition> resultingSources;\n\n        max = arguments.size();\n        if (max == 0) {\n            throw new IllegalArgumentException();\n        }\n        argBuffers = new ArrayList<>();\n        mergedType = null;\n        resultingSources = new ArrayList<>();\n        for (i = 0; i < max; i++) {\n            arg = arguments.get(i);\n            resultingSources.addAll(arg.sources);\n            if (arg == null) {\n                throw new IllegalStateException();\n            }\n            argBuffers.add(arg.copyBuffer);\n            if (mergedType == null) {\n                mergedType = arg.attr.type;\n            } else {\n                mergedType = mergedType.alternate(arg.attr.type);\n            }\n        }\n        if (mergedType == null) {\n            throw new IllegalStateException();\n        }\n        // compute with card SEQUENCE. TODO: very expensive\n        buffer = new AgBuffer((Attribute) null);\n        start = buffer.merge(argBuffers, symbol, new Type(mergedType.type, Type.SEQUENCE));\n        card = buffer.calcCard(start);\n        buffer = new AgBuffer((Attribute) null);\n        // TODO: duplicate computation ...\n        start = buffer.merge(argBuffers, symbol, new Type(mergedType.type, card));\n        buffer.setStart(start);\n        return new Argument(Path.ISOLATED, buffer, resultingSources);\n    }", "\tpublic void convertAST(final Writer buf, final IAST function) throws IOException {\n\t\tconvert(buf, function.head());\n\t\tif (fRelaxedSyntax) {\n\t\t\tbuf.write(\"(\");\n\t\t} else {\n\t\t\tbuf.write(\"[\");\n\t\t}\n\t\tif (function.size() > 1) {\n\t\t\tconvert(buf, function.get(1));\n\t\t}\n\t\tfor (int i = 2; i < function.size(); i++) {\n\t\t\tbuf.write(\",\");\n\t\t\tconvert(buf, function.get(i));\n\t\t}\n\t\tif (fRelaxedSyntax) {\n\t\t\tbuf.write(\")\");\n\t\t} else {\n\t\t\tbuf.write(\"]\");\n\t\t}\n\t}\n", "public synchronized RelayLogPosition clone ( ) { RelayLogPosition clone = new RelayLogPosition ( ) ; clone . setPosition ( curFile , curOffset ) ; return clone ; }", "public int enableApnType ( java . lang . String type ) throws android . os . RemoteException ;", "   public void setExternalReference () {\n//      choosen=(ExternalReference)getChoices().get(3);\n//      clearOtherChoices();\n      setChoosen((ExternalReference)getChoices().get(3));\n   }\n", "    public String getCommonName() throws IOException {\n\tDerValue attr = findAttribute(commonName_oid);\n\n\treturn getString(attr);\n    }\n", "public void writeToSdfDir(File sdfDir) throws IOException {\n  if (ReaderUtils.isSDF(sdfDir)) {\n    writeToFile(new File(sdfDir,ReferenceGenome.REFERENCE_FILE));\n  }\n else {\n    throw new IOException(String.format(\"%s is not an SDF\",sdfDir.getPath()));\n  }\n}\n", "public void close(Duration duration) throws InterruptedException, TimeoutException {\n    closed = true;\n    long deadlineMs = System.currentTimeMillis() + duration.toMillis();\n\n    synchronized (lock) {\n      while (numOutstanding.get() > 0) {\n        long waitMs = deadlineMs - System.currentTimeMillis();\n        if (waitMs <= 0) {\n          throw new TimeoutException(\"Timed out waiting outstanding mutations to finish\");\n        }\n        lock.wait(waitMs);\n      }\n\n      // numFailures can only be checked after numOutstanding is zero.\n      if (numFailures > 0) {\n        throw new BulkMutationFailure(numFailures);\n      }\n    }\n  }", "public Map<String, String> readAtomTypeMappings() {\n        Map<String, String> mappings = null;\n        try {\n            parser.setFeature(\"http://xml.org/sax/features/validation\", false);\n            logger.info(\"Deactivated validation\");\n        } catch (SAXException exception) {\n            logger.warn(\"Cannot deactivate validation: \", exception.getMessage());\n            logger.debug(exception);\n        }\n        OWLAtomTypeMappingHandler handler = new OWLAtomTypeMappingHandler();\n        parser.setContentHandler(handler);\n        try {\n            parser.parse(new InputSource(input));\n            mappings = handler.getAtomTypeMappings();\n        } catch (IOException exception) {\n            logger.error(\"IOException: \", exception.getMessage());\n            logger.debug(exception);\n        } catch (SAXException saxe) {\n            logger.error(\"SAXException: \", saxe.getMessage());\n            logger.debug(saxe);\n        }\n        return mappings == null ? new HashMap<String, String>() : mappings;\n    }", "public void delete(RandomAccessFile raf,RandomAccessFile tempRaf) throws IOException, CannotWriteException {\n  FlacTag emptyTag=new FlacTag(null,new ArrayList<MetadataBlockDataPicture>());\n  raf.seek(0);\n  tempRaf.seek(0);\n  write(emptyTag,raf,tempRaf);\n}\n", "public static responderparam get(nitro_service service) throws Exception{\n\t\tresponderparam obj = new responderparam();\n\t\tresponderparam[] response = (responderparam[])obj.get_resources(service);\n\t\treturn response[0];\n\t}", "protected TextAccessor accessor(\n        AttributeQuery attributes,\n        OutputContext outputContext,\n        boolean leap\n    ) {\n\n        Locale lang = attributes.get(Attributes.LANGUAGE, Locale.ROOT);\n        TextWidth textWidth = attributes.get(Attributes.TEXT_WIDTH, TextWidth.WIDE);\n        CalendarText cnames = CalendarText.getInstance(this.getCalendarType(attributes), lang);\n\n        if (this.isMonthElement()) {\n            if (leap) {\n                return cnames.getLeapMonths(textWidth, outputContext);\n            } else {\n                return cnames.getStdMonths(textWidth, outputContext);\n            }\n        } else if (this.isWeekdayElement()) {\n            return cnames.getWeekdays(textWidth, outputContext);\n        } else if (this.isEraElement()) {\n            return cnames.getEras(textWidth);\n        } else {\n            return cnames.getTextForms(this.name(), this.type);\n        }\n\n    }", "public long lastModified ( ) { return dateHeader ( HEADER_LAST_MODIFIED ) ; }", "protected void startProcessor(){\n  thread=Thread.currentThread();\n  pool=Executors.newFixedThreadPool(threadCount);\n  for (int i=0; i < threadCount; i++) {\n    pool.execute(new OrderProcessor());\n  }\n}\n", "private Tree<Row> findEndIf( Tree<Row> pointer ){\n        while( !Type.END_IF.equals( pointer.getContent().getType() ) ){\n            pointer = pointer.getNext();\n        }\n        return pointer;\n    }", "void editedLocalFunctionNodeComment ( INaviView view , INaviFunctionNode node , IComment comment ) ;", "public void receive ( boolean bit1 , boolean bit2 ) { mBits = Long . rotateLeft ( mBits , NUM_ ) ; mBits &= mMask ; if ( bit1 ) { mBits += NUM_ ; } mBits = Long . rotateLeft ( mBits , NUM_ ) ; mBits &= mMask ; if ( bit2 ) { mBits += NUM_ ; } for ( ISyncProcessor processor : mSyncProcessors ) { processor . checkSync ( mBits ) ; } }", "void clear ( ) ;", "@Override\n  public GallicWeight divide(GallicWeight a, GallicWeight b) {\n    if (isZero(a)) return zero;\n    Preconditions.checkArgument(isNotZero(b), \"cant divide by zero\");\n    IntArrayList newOutputLabels = new IntArrayList();\n    for (int i = b.getLabels().size(); i < a.getLabels().size(); i++) {\n      newOutputLabels.add(a.getLabels().get(i));\n    }\n    double newWeight = this.weightSemiring.divide(a.getWeight(), b.getWeight());\n    return GallicWeight.create(newOutputLabels, newWeight);\n  }", "public String resultToReplayUrl(CaptureSearchResult result) {\n\t\tif(uriConverter == null) {\n\t\t\treturn null;\n\t\t}\n\t\tString url = result.getOriginalUrl();\n\t\tString captureDate = result.getCaptureTimestamp();\n\t\treturn uriConverter.makeReplayURI(captureDate,url);\n\t}", "private final boolean eq ( Object o1 , Object o2 ) { return o1 == o2 || ( ( o1 != null ) && o1 . equals ( o2 ) ) ; }", "\tprivate void addExistingDatasources() {\n\t\tif (g_manager == null || tv.isDisposed()) {\n\t\t\treturn;\n\t\t}\n\n\t\tArrayList sources = new ArrayList();\n\t\tIterator itr = g_manager.getDownloadManagers().iterator();\n\t\twhile (itr.hasNext()) {\n\t\t\tObject[] peers = ((DownloadManager)itr.next()).getCurrentPeers();\n\t\t\tif (peers != null) {\n\t\t\t\tsources.addAll(Arrays.asList(peers));\n\t\t\t}\n\t\t}\n\t\tif (sources.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\ttv.addDataSources(sources.toArray());\n\t\ttv.processDataSourceQueue();\n\t}\n", "public ISPO[] nextChunk(){\n  if (!hasNext()) {\n    throw new NoSuchElementException();\n  }\n  final ISPO[] ret;\n  if (i == 0 && numStmts == stmts.length) {\n    ret=stmts;\n  }\n else {\n    final int remaining=numStmts - i;\n    ret=new ISPO[remaining];\n    System.arraycopy(stmts,i,ret,0,remaining);\n  }\n  i=numStmts;\n  return ret;\n}\n", "private static void incremExpt(RatTermVec vec,int degree){\n  for (int i=0, size=vec.size(); i < size; i++) {\n    vec.set(new RatTerm(vec.get(i).coeff,vec.get(i).expt + degree),i);\n  }\n}\n", "private String generateScreenOnOrOffUtternace(int feedbackIndex){\n  int resourceId=(feedbackIndex == INDEX_SCREEN_ON) ? R.string.template_screen_on : R.string.template_screen_off;\n  String template=mContext.getString(resourceId);\n  int currentRingerVolume=mAudioManager.getStreamVolume(AudioManager.STREAM_RING);\n  int maxRingerVolume=mAudioManager.getStreamMaxVolume(AudioManager.STREAM_RING);\n  int volumePercent=(100 / maxRingerVolume) * currentRingerVolume;\n  int adjustment=volumePercent % 10;\n  if (adjustment < 5) {\n    volumePercent-=adjustment;\n  }\n else   if (adjustment > 5) {\n    volumePercent+=(10 - adjustment);\n  }\n  return String.format(template,volumePercent);\n}\n", "public TextOutputCallback(int messageType,String message){\n  if ((messageType != INFORMATION && messageType != WARNING && messageType != ERROR) || message == null || message.length() == 0)   throw new IllegalArgumentException();\n  this.messageType=messageType;\n  this.message=message;\n}\n", "    private void setDefaultModule(Element appElement) throws WebItemNotAvailableException, InvalidXMLElementException {\n        String defaultModuleName;\n        defaultModuleName = super.getAttribute(appElement, ATT_DEFAULT_MODULE, true);\n        this.defaultModule = (WebModule) this.getModule(defaultModuleName);\n    }\n", "public static CronScheduleBuilder cronSchedule ( CronExpression cronExpression ) { return new CronScheduleBuilder ( cronExpression ) ; }", "public User createUser(HsqlName name,\n                           String password) {\n\n        // This will throw an appropriate exception if grantee already exists,\n        // regardless of whether the name is in any User, Role, etc. list.\n        User user = granteeManager.addUser(name);\n\n        user.setPassword(password);\n\n        boolean success = userList.add(name.name, user);\n\n        if (!success) {\n            throw Error.error(ErrorCode.X_28503, name.statementName);\n        }\n\n        return user;\n    }", "protected I_CmsUploadServiceAsync getUploadService() {\r\n\r\n        if (m_uploadService == null) {\r\n            m_uploadService = GWT.create(I_CmsUploadService.class);\r\n            String serviceUrl = CmsCoreProvider.get().link(\"org.opencms.ade.upload.CmsUploadService.gwt\");\r\n            ((ServiceDefTarget)m_uploadService).setServiceEntryPoint(serviceUrl);\r\n        }\r\n        return m_uploadService;\r\n    }", "public static boolean areMappedObjects(Class<?> dClass,Class<?> sClass,XML xml){\n  return isMapped(dClass,xml) || isMapped(sClass,xml);\n}\n", "    public void removeAll() {\n        panel.removeAll();\n        rowHeader.removeAll();\n        columnHeader.removeAll();\n        corner.removeAll();\n    }\n", "public void run(){\n  String currLine=null;\n  try {\n    rdr=new BufferedReader(new InputStreamReader(url.openStream()));\n    while ((currLine=rdr.readLine()) != null) {\n      notifyTelegram(currLine.toCharArray());\n    }\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n", "public final static char[][] splitTypeLevelsSignature(String typeSignature){\n  char[] source=Signature.removeCapture(typeSignature.toCharArray());\n  CharOperation.replace(source,'$','.');\n  char[][] signatures=new char[10][];\n  int signaturesCount=0;\n  int paramOpening=0;\n  for (int idx=0, ln=source.length; idx < ln; idx++) {\nswitch (source[idx]) {\ncase '>':\n      paramOpening--;\n    if (paramOpening == 0) {\n      if (signaturesCount == signatures.length) {\n        System.arraycopy(signatures,0,signatures=new char[signaturesCount + 10][],0,signaturesCount);\n      }\n    }\n  break;\ncase '<':\nparamOpening++;\nbreak;\ncase '.':\nif (paramOpening == 0) {\nif (signaturesCount == signatures.length) {\nSystem.arraycopy(signatures,0,signatures=new char[signaturesCount + 10][],0,signaturesCount);\n}\nsignatures[signaturesCount]=new char[idx + 1];\nSystem.arraycopy(source,0,signatures[signaturesCount],0,idx);\nsignatures[signaturesCount][idx]=Signature.C_SEMICOLON;\nsignaturesCount++;\n}\nbreak;\ncase '/':\nsource[idx]='.';\nbreak;\n}\n}\nchar[][] typeSignatures=new char[signaturesCount + 1][];\ntypeSignatures[0]=source;\nfor (int i=1, j=signaturesCount - 1; i <= signaturesCount; i++, j--) {\ntypeSignatures[i]=signatures[j];\n}\nreturn typeSignatures;\n}\n", "public void addListener ( final IThreadListener listener ) { m_listeners . addListener ( listener ) ; }", "public int mapDcdColumnID(int colID){\n  for (int i=0; i < _dcdColumnMap.length; i++) {\n    int st=(i == 0 ? 1 : _dcdColumnMap[i - 1] + 1 + 1);\n    int end=_dcdColumnMap[i] + 1;\n    if (colID >= st && colID <= end)     return i + 1;\n  }\n  return -1;\n}\n", "public FileEntry createFile(String name,byte[] content,String mediaType) throws ForbiddenException, ConflictException, ServerException {\n  if (isRoot(getVirtualFile())) {\n    throw new ForbiddenException(\"Can't create file in root folder.\");\n  }\n  return createFile(name,content == null ? null : new ByteArrayInputStream(content),mediaType);\n}\n", "public ArchiveRecord get(long offset) throws IOException {\n        cleanupCurrentRecord();\n        long posn = positionForRecord(in); \n        if(offset>=posn) {\n            in.skip(offset-posn); \n        } else {\n            throw new UnsupportedOperationException(\"no reverse seeking: at \"+posn+\" requested \"+offset); \n        }\n        return createArchiveRecord(this.in, offset);\n    }", "public CLocalNodeCommentWrapper ( final INaviViewNode node ) { m_node = node ; }", "\tprivate void resetSpecies() {\n\t\t// Reset species\n\t\tIterator<MetaNEATSpecies> iter = species.iterator();\n\t\twhile(iter.hasNext()) {\n\t\t\tMetaNEATSpecies aspecies = iter.next();\n\t\t\taspecies.reset();\n\t\t}\n\t}\n", "    public void sendConfiguration(Biasgen biasgen) throws HardwareInterfaceException {\n        open();\n        if (biasgen.getPotArray() == null) {\n            log.warning(\"BiasgenUSBInterface.send(): potArray=null\");\n            return; // may not have been constructed yet.\n\n        }\n\n        byte[] toSend=formatConfigurationBytes(biasgen);\n        //sendBiasBytes(toSend);\n        vendorRequest(VENDOR_REQUEST_SEND_BIAS_BYTES, (short) 0, (short) 0, toSend);\n        HardwareInterfaceException.clearException();\n\n    }\n", "public static void constantPlusExpressionAttributes(SimpleMethod method,Element element,String... attributeNames) throws ValidationException {\n  for (  String name : attributeNames) {\n    String attributeValue=element.getAttribute(name);\n    if (!MiniLangUtil.isConstantPlusExpressionAttribute(attributeValue)) {\n      handleError(\"Constant+expr attribute \\\"\" + name + \"\\\" is missing a constant value (expression-only constants are not allowed).\",method,element);\n    }\n    if (MiniLangUtil.containsScript(attributeValue)) {\n      handleError(\"Constant+expr attribute \\\"\" + name + \"\\\" cannot contain a script (remove script).\",method,element);\n    }\n  }\n}\n", "public void populateQualifierValues ( TaggedLogAPIEntity entity , Map < String , byte [ ] > qualifierValues ) ;", "private void configureScriptClassNode() {\n        ClassNode scriptClassNode = moduleNode.getScriptClassDummy();\n\n        if (!asBoolean(scriptClassNode)) {\n            return;\n        }\n\n        List<Statement> statements = moduleNode.getStatementBlock().getStatements();\n        if (!statements.isEmpty()) {\n            Statement firstStatement = statements.get(0);\n            Statement lastStatement = statements.get(statements.size() - 1);\n\n            scriptClassNode.setSourcePosition(firstStatement);\n            scriptClassNode.setLastColumnNumber(lastStatement.getLastColumnNumber());\n            scriptClassNode.setLastLineNumber(lastStatement.getLastLineNumber());\n        }\n\n    }", "public String[] queryVsanObjectUuidsByFilter(String[] uuids, int limit, int version) throws VsanFault, RemoteException, RuntimeFault {\r\n        return getVimService().queryVsanObjectUuidsByFilter(getMOR(), uuids, limit, version);\r\n    }", "public void applyProperties ( Object o ) { this . props . applyProperties ( o ) ; }", "private int getPriority(final ExecutableFlow exflow) {\n    final ExecutionOptions options = exflow.getExecutionOptions();\n    int priority = ExecutionOptions.DEFAULT_FLOW_PRIORITY;\n    if (options != null\n        && options.getFlowParameters() != null\n        && options.getFlowParameters()\n        .containsKey(ExecutionOptions.FLOW_PRIORITY)) {\n      try {\n        priority =\n            Integer.valueOf(options.getFlowParameters().get(\n                ExecutionOptions.FLOW_PRIORITY));\n      } catch (final NumberFormatException ex) {\n        priority = ExecutionOptions.DEFAULT_FLOW_PRIORITY;\n        logger.error(\n            \"Failed to parse flow priority for exec_id = \"\n                + exflow.getExecutionId(), ex);\n      }\n    }\n    return priority;\n  }", "public final TLCState randomState ( StateVec states ) throws EvalException { int len = states . size ( ) ; if ( len > NUM_ ) { int index = ( int ) Math . floor ( this . rng . nextDouble ( ) * len ) ; return states . elementAt ( index ) ; } return null ; }", "public JRakLibClient(Logger logger,String serverIP,int serverPort){\n  if (serverPort < 1 || serverPort > 65536) {\n    throw new IllegalArgumentException(\"Invalid port range.\");\n  }\n  this.logger=logger;\n  this.serverEndpoint=new InetSocketAddress(serverIP,serverPort);\n  externalQueue=new LinkedList<>();\n  internalQueue=new LinkedList<>();\n  start();\n}\n", "public void startConnectivityEstablishment ( ) { synchronized ( startLock ) { logger . info ( STR_ + getLocalUfrag ( ) ) ; shutdown = BOOL_ ; pruneNonMatchedStreams ( ) ; try { initCheckLists ( ) ; } catch ( ArithmeticException e ) { setState ( IceProcess", "@VisibleForTesting protected Extension loadFromFile(File localFile) throws InvalidConfigException {\n  Preconditions.checkNotNull(localFile);\n  Preconditions.checkState(localFile.exists());\n  Closer closer=Closer.create();\n  try {\n    InputStream fileIn=closer.register(new FileInputStream(localFile));\n    Extension extension=factory.build(fileIn);\n    extension.setRowType(normalizeRowType(extension.getRowType()));\n    log.info(\"Successfully loaded extension \" + extension.getRowType());\n    return extension;\n  }\n catch (  IOException e) {\n    log.error(\"Can't access local extension file (\" + localFile.getAbsolutePath() + \")\",e);\n    throw new InvalidConfigException(TYPE.INVALID_EXTENSION,\"Can't access local extension file\");\n  }\ncatch (  SAXException e) {\n    log.error(\"Can't parse local extension file (\" + localFile.getAbsolutePath() + \")\",e);\n    throw new InvalidConfigException(TYPE.INVALID_EXTENSION,\"Can't parse local extension file: \" + e.getMessage());\n  }\ncatch (  ParserConfigurationException e) {\n    log.error(\"Can't create sax parser\",e);\n    throw new InvalidConfigException(TYPE.INVALID_EXTENSION,\"Can't create sax parser\");\n  }\n finally {\n    try {\n      closer.close();\n    }\n catch (    IOException e) {\n      log.debug(\"Failed to close input stream on extension file\",e);\n    }\n  }\n}\n", "public void mouseDoubleClick(MouseEvent e, EditPartViewer viewer) {\n\tsuper.mouseDoubleClick(e, viewer);\n\tif (getDragTracker() != null)\n\t\tgetDragTracker().mouseDoubleClick(e, viewer);\n}\n", "public String popAndEncodeAsJs(){\nsynchronized (this) {\n    int length=queue.size();\n    if (length == 0) {\n      return null;\n    }\n    int totalPayloadLen=0;\n    int numMessagesToSend=0;\n    for (    JsMessage message : queue) {\n      int messageSize=message.calculateEncodedLength() + 50;\n      if (numMessagesToSend > 0 && totalPayloadLen + messageSize > MAX_PAYLOAD_SIZE && MAX_PAYLOAD_SIZE > 0) {\n        break;\n      }\n      totalPayloadLen+=messageSize;\n      numMessagesToSend+=1;\n    }\n    boolean willSendAllMessages=numMessagesToSend == queue.size();\n    StringBuilder sb=new StringBuilder(totalPayloadLen + (willSendAllMessages ? 0 : 100));\n    for (int i=0; i < numMessagesToSend; ++i) {\n      JsMessage message=queue.removeFirst();\n      if (willSendAllMessages && (i + 1 == numMessagesToSend)) {\n        message.encodeAsJsMessage(sb);\n      }\n else {\n        sb.append(\"try{\");\n        message.encodeAsJsMessage(sb);\n        sb.append(\"}finally{\");\n      }\n    }\n    if (!willSendAllMessages) {\n      sb.append(\"window.setTimeout(function(){cordova.require('cordova/plugin/android/polling').pollOnce();},0);\");\n    }\n    for (int i=willSendAllMessages ? 1 : 0; i < numMessagesToSend; ++i) {\n      sb.append('}');\n    }\n    String ret=sb.toString();\n    return ret;\n  }\n}\n", "public String submitExtra (String name, String text, String extra)\n    {\n        return fixedInput(\"submit\", name, text, extra);\n    }", "public static boolean isLetterOrDigit ( Character self ) { return Character . isLetterOrDigit ( self ) ; }", "    public void appendRowData(RealMatrix m) throws EuclidRuntimeException {\n        if (rows == 0) {\n            cols = m.getCols();\n        }\n        insertRowData(rows - 1, m);\n    }\n", "  public void Launch(NObNode aNOb, String lc) {\n\t  langCode = lc;\n      createDisplay();\n      mTheNOb = aNOb;   // Passed in NOb may contain text to be edited\n      if(mTheNOb != null) {\n        // FIXME - use standard data mechanism\n        String data = (String)aNOb.get(\"existinguri\");\n        if (data != null) {\n\t       mTextField.setText(data);\n        }\n      }\n\n      // Set the frame to visible\n      setVisible(true);\n  }\n", "public static void removeLogAdministrator(LogAdministrator admin){\n  logAdministrators_.remove(admin);\n  if (service_ != null) {\n    admin.deregisterLogControl(service_.getLogControl());\n  }\n}\n", "protected void writeTldDescription ( ) throws IOException { writer . startElement ( STR_ ) ; writer . writeComment ( STR_ ) ; writer . startElement ( STR_ ) ; writer . writeText ( JSF_TLIB_VERSION ) ; writer . closeElement ( ) ; writer . startElement ( ST", "    private boolean hasCCLicense(String license, String type) {\n        return (type != null && type.equals(CCConstants.CC_URI_PREFIX)) ||\n               (license != null && license.indexOf(CCConstants.CC_URI_PREFIX) != -1\n                                && license.indexOf(CCConstants.URL_INDICATOR) != -1)\n               ;\n    }\n", "@Override\n    public Object map(Object input) {\n        Number n = (Number) input;\n        return n.doubleValue() - mean;\n    }", "\tpublic Information getInformationFor(String id, int document) {\n\t\tif(MASTER == document)\n\t\t\treturn getInformationFor(id, getMaster());\n\t\t\n\t\treturn getInformationFor(id, getDerived());\n\t}\n", "List<Method> getSortedCandidateMethods(String methodName, Method[] methods) {\r\n\t\tList<Method> candidates = new ArrayList<>();\r\n\t\tfor (Method method : methods) {\r\n\t\t\tif (method.getName().equals(methodName)) {\r\n\t\t\t\tcandidates.add(method);\r\n\t\t\t}\r\n\t\t}\r\n\t\tCollections.sort(candidates, comparator);\r\n\t\treturn candidates;\r\n\t}", "public void addConstraint(Constraint c) {\n\n        int index = c.getConstraintType() == Constraint.PRIMARY_KEY ? 0\n                                                                    : constraintList\n                                                                        .length;\n\n        constraintList =\n            (Constraint[]) ArrayUtil.toAdjustedArray(constraintList, c, index,\n                1);\n\n        updateConstraintLists();\n    }", "public float getImageRotation() {\n\t\tdouble d = 2.0 * Math.PI;\n\t\tfloat rot = (float) ((rotationRadians - initialRotation) % d);\n\t\tif (rot < 0) {\n\t\t\trot += d;\n\t\t}\n        return rot;\n    }", "private static List<Agent> prepareContributorsFromEmlAgents(List<Agent> contacts,List<Agent> metadataProviders,List<Agent> associatedParties){\n  List<Agent> ls=Lists.newArrayList();\n  for (  Agent contact : contacts) {\n    contact.setRole(CONTACT_ROLE);\n  }\n  ls.addAll(contacts);\n  for (  Agent metadataProvider : metadataProviders) {\n    metadataProvider.setRole(METADATA_PROVIDER_ROLE);\n  }\n  ls.addAll(metadataProviders);\n  ls.addAll(associatedParties);\n  return ls;\n}\n", "public static String createTinyMceToolbarStringFromGenericToolbarItems(List<String> barItems) {\n\n        List<List<String>> blocks = new ArrayList<List<String>>();\n        blocks.add(new ArrayList<String>());\n        String lastItem = null;\n        List<String> processedItems = new ArrayList<String>();\n\n        // translate buttons and eliminate adjacent separators\n        for (String barItem : barItems) {\n            String translated = CmsTinyMceToolbarHelper.translateButton(barItem);\n            if (translated != null) {\n                barItem = translated;\n            }\n            if (barItem.equals(\"[\") || barItem.equals(\"]\") || barItem.equals(\"-\")) {\n                barItem = \"|\";\n                if (\"|\".equals(lastItem)) {\n                    continue;\n                }\n            }\n            if (barItem.indexOf(\",\") > -1) {\n                for (String subItem : barItem.split(\",\")) {\n                    processedItems.add(subItem);\n                }\n            } else {\n                processedItems.add(barItem);\n            }\n            lastItem = barItem;\n        }\n\n        // remove leading or trailing '|'\n        if ((processedItems.size() > 0) && processedItems.get(0).equals(\"|\")) {\n            processedItems.remove(0);\n        }\n\n        if ((processedItems.size() > 0) && processedItems.get(processedItems.size() - 1).equals(\"|\")) {\n            processedItems.remove(processedItems.size() - 1);\n        }\n        Set<String> writtenItems = new HashSet<String>();\n\n        // transform flat list into list of groups\n        for (String processedItem : processedItems) {\n            if (!writtenItems.contains(processedItem)) {\n                blocks.get(blocks.size() - 1).add(processedItem);\n            }\n            if (\"|\".equals(processedItem)) {\n                blocks.add(new ArrayList<String>());\n            } else {\n                writtenItems.add(processedItem);\n            }\n        }\n\n        // produce the TinyMCE toolbar options from the groups\n        // we use TinyMCE's button rows as groups instead of rows and fix the layout using CSS.\n        // This is because we want the button bars to wrap automatically when there is not enough space.\n        // Using this method, the wraps can only occur between different blocks/rows.\n        String toolbar = \"\";\n        for (List<String> block : blocks) {\n            toolbar += CmsStringUtil.listAsString(block, \" \") + \" \";\n        }\n        return toolbar;\n    }", "private int center ( Component c , Insets insets , int x , boolean trailing ) { Dimension pref = c . getPreferredSize ( ) ; int width = pref . width ; if ( c instanceof JButton && ( ( JButton ) c ) . getIcon ( ) != null ) { width = ( ( JButton ) c ) . get", "\tpublic void setScpUrl (java.lang.String scpUrl) {\n\t\tthis.scpUrl = scpUrl;\n\t}\n", "public BeanQuery<Map<String,Object>> nested(){\n    if(!(this.selector instanceof KeyValueMapSelector)){\n      throw new IllegalStateException(\"This is only for BeanQueries which has a KeyValueMapSelector selector. The current selector is a \"+this.selector);\n    }\n    BeanQuery<Map<String,Object>> result= new BeanQuery<Map<String,Object>>(new NestedKeyValueMapSelector((KeyValueMapSelector)this.selector));\n    result.from=this.from;\n    result.predicate=this.predicate;\n    result.comparator=this.comparator;\n    result.descSorting=this.descSorting;\n    return result;\n  }", "    public void put_pixel (int x, int y, float z, int c[]) {\n//\tput_pixel (x, y, z, 0xff000000 | c[0] << 16 | c[1] << 8 | c[2]);\n\tput_pixel (x, y, z, gl_util.RGBtoI(c[0], c[1], c[2]));\n    }\n", "public CmsFolder readAncestor(CmsRequestContext context, CmsResource resource, CmsResourceFilter filter)\n    throws CmsException {\n\n        // get the full folder path of the resource to start from\n        String path = CmsResource.getFolderPath(resource.getRootPath());\n        do {\n            // check if the current folder matches the given filter\n            if (existsResource(context, path, filter)) {\n                // folder matches, return it\n                return readFolder(context, path, filter);\n            } else {\n                // folder does not match filter criteria, go up one folder\n                path = CmsResource.getParentFolder(path);\n            }\n\n            if (CmsStringUtil.isEmpty(path) || !path.startsWith(context.getSiteRoot())) {\n                // site root or root folder reached and no matching folder found\n                return null;\n            }\n        } while (true);\n    }", "public static int size ( char [ ] array ) { return Array . getLength ( array ) ; }", "void copyTo(IntSet target) {\n        if (target.elements.length < size) {\n            target.elements = Arrays.copyOf(elements, elements.length);\n        } else {\n            System.arraycopy(elements, 0, target.elements, 0, size);\n        }\n        target.size = size;\n    }", "protected abstract ChannelCalculatorCommon assignCalcObjectContinuous ( String selectedCalcType ) throws Exception ;", "public void resetZoom ( ) { normalizedScale = NUM_ ; fitImageToView ( ) ; }", "    public boolean saveToFile() {\n        try {\n            FileOutputStream fos = new FileOutputStream(file);\n            fos.write(getText().getBytes());\n            fos.close();\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n", "private void readDownloadApps(XmlPullParser parser,Set<DownloadAppInfo> apps) throws XmlPullParserException, IOException {\n  while (parser.next() != XmlPullParser.END_TAG) {\n    if (parser.getEventType() != XmlPullParser.START_TAG) {\n      continue;\n    }\n    String name=parser.getName();\n    if (TAG_APP.equals(name)) {\n      String packageName=parser.getAttributeValue(null,ATTRIBUTE_PACKAGE_NAME);\n      String downloadLocation=parser.getAttributeValue(null,ATTRIBUTE_DOWNLOAD_LOCATION);\n      if (packageName != null && downloadLocation != null) {\n        apps.add(new DownloadAppInfo(packageName,downloadLocation));\n      }\n      skipCurrentTag(parser);\n    }\n  }\n}\n", "public OutputStream bindStream ( OutputStream output ) { OutputStream stream = m_streams . get ( ) ; m_streams . set ( output ) ; return stream ; }", "public ServiceFuture<IntegrationAccountInner> createOrUpdateAsync(String resourceGroupName, String integrationAccountName, IntegrationAccountInner integrationAccount, final ServiceCallback<IntegrationAccountInner> serviceCallback) {\n        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, integrationAccountName, integrationAccount), serviceCallback);\n    }", "public long getMoonRiseSet(boolean rise)\n    {\n        return riseOrSet(new CoordFunc() {\n                            @Override\n                            public Equatorial eval() { return getMoonPosition(); }\n                         },\n                ", "public static Element createElementNS(String ns, String tag) {\n\t\tif (ns.equals(Dom.NS_HTML)) {\n\t\t\treturn Dom.createElement(tag);\n\t\t} else {\n\t\t\tif (Dom.isIE()) {\n\t\t\t\treturn Dom.createElement(ns + \":\" + tag);\n\t\t\t} else {\n\t\t\t\treturn createNameSpaceElement(ns, tag);\n\t\t\t}\n\t\t}\n\t}", "        public void setNewInfo(int p, int r, long ct) {\n            period = p;\n            retries = r;\n            lastCurrentTime = ct;\n            // Calculate timeout estimating Internet averaget delay 100 ms\n            if (retries == 0) {\n         ", "\tprivate void checkServiceLocatorExists() {\n\t\tif (serviceLocator == null) {\n\t\t\tthrow new TiiraException(\"TiiraServiceLocator is not set. Use fetchService (Class interfaceClass, String url) instead.\");\n\t\t}\n\t}\n", "public String threadDump(){\n  StringBuilder dump=new StringBuilder();\n  int retries=0;\n  while (retries < CONNECT_RETRIES) {\n    try {\n      if (canDumpLocks) {\n        if (tmbean.isObjectMonitorUsageSupported() && tmbean.isSynchronizerUsageSupported()) {\n          dumpThreadInfoWithLocks(dump);\n        }\n      }\n else {\n        dumpThreadInfo(dump);\n      }\n      retries=CONNECT_RETRIES;\n    }\n catch (    NullPointerException npe) {\n      if (retries >= CONNECT_RETRIES) {\n        JOptionPane.showMessageDialog(null,\"Error requesting dump using the JMX Connection. Remote VM returned nothing.\\n\" + \"You can try to reconnect or just simply try to request a dump again.\",\"Error during requesting Dump\",JOptionPane.ERROR_MESSAGE);\n        return (\"\");\n      }\n      try {\n        Thread.sleep(1000);\n      }\n catch (      InterruptedException ex) {\n        ex.printStackTrace();\n      }\n      retries++;\n    }\n  }\n  dump.append(\"\\n<EndOfDump>\\n\\n\");\n  return (dump.toString());\n}\n", "public static String displaySet(String setName,Set<String> set){\n  StringBuilder sb=new StringBuilder();\n  sb.append(setName);\n  sb.append(\":\\n\");\n  if (set.isEmpty()) {\n    sb.append(\"None\\n\");\n  }\n else {\n    int count=0;\n    for (    String value : set) {\n      sb.append(\"  [\");\n      sb.append(++count);\n      sb.append(\"] \");\n      sb.append(value);\n      sb.append(\"\\n\");\n    }\n  }\n  return sb.toString();\n}\n", "protected void initCheckList(){\nsynchronized (checkList) {\n    checkList.clear();\n    createCheckList(checkList);\n    orderCheckList();\n    pruneCheckList(checkList);\n    logger.finest(\"Checklist initialized.\");\n  }\n}\n", "private View moveSelection(int delta,int childrenLeft,int childrenRight){\n  if (DEBUG)   Log.i(TAG,\"moveSelection() delta: \" + delta + \" childrenLeft: \"+ childrenLeft+ CHILDREN_RIGHT+ childrenRight+ M_FIRST_POSITION+ mFirstPosition);\n  final int fadingEdgeLength=getHorizontalFadingEdgeLength();\n  final int selectedPosition=mSelectedPosition;\n  final int numRows=mNumRows;\n  final int horizontalSpacing=mHorizontalSpacing;\n  int oldColumnStart;\n  int columnStart;\n  int columnEnd=-1;\n  if (!mStackFromBottom) {\n    oldColumnStart=(selectedPosition - delta) - ((selectedPosition - delta) % numRows);\n    columnStart=selectedPosition - (selectedPosition % numRows);\n  }\n else {\n    int invertedSelection=mItemCount - 1 - selectedPosition;\n    columnEnd=mItemCount - 1 - (invertedSelection - (invertedSelection % numRows));\n    columnStart=Math.max(0,columnEnd - numRows + 1);\n    invertedSelection=mItemCount - 1 - (selectedPosition - delta);\n    oldColumnStart=mItemCount - 1 - (invertedSelection - (invertedSelection % numRows));\n    oldColumnStart=Math.max(0,oldColumnStart - numRows + 1);\n  }\n  final int rowDelta=columnStart - oldColumnStart;\n  final int leftSelectionPixel=getLeftSelectionPixel(childrenLeft,fadingEdgeLength,columnStart);\n  final int rightSelectionPixel=getRightSelectionPixel(childrenRight,fadingEdgeLength,numRows,columnStart);\n  mFirstPosition=columnStart;\n  View sel;\n  View referenceView;\n  if (rowDelta > 0) {\n    final int oldRight=mReferenceViewInSelectedRow == null ? 0 : mReferenceViewInSelectedRow.getRight();\n    sel=makeColumn(mStackFromBottom ? columnEnd : columnStart,oldRight + horizontalSpacing,true);\n    referenceView=mReferenceView;\n    adjustForRightFadingEdge(referenceView,leftSelectionPixel,rightSelectionPixel);\n  }\n else   if (rowDelta < 0) {\n    final int oldTop=mReferenceViewInSelectedRow == null ? 0 : mReferenceViewInSelectedRow.getLeft();\n    sel=makeColumn(mStackFromBottom ? columnEnd : columnStart,oldTop - horizontalSpacing,false);\n    referenceView=mReferenceView;\n    adjustForLeftFadingEdge(referenceView,leftSelectionPixel,rightSelectionPixel);\n  }\n else {\n    final int oldTop=mReferenceViewInSelectedRow == null ? 0 : mReferenceViewInSelectedRow.getLeft();\n    sel=makeColumn(mStackFromBottom ? columnEnd : columnStart,oldTop,true);\n    referenceView=mReferenceView;\n  }\n  if (!mStackFromBottom) {\n    fillLeft(columnStart - numRows,referenceView.getLeft() - horizontalSpacing);\n    adjustViewsLeftOrRight();\n    fillRight(columnStart + numRows,referenceView.getRight() + horizontalSpacing);\n  }\n else {\n    fillRight(columnStart + numRows,referenceView.getRight() + horizontalSpacing);\n    adjustViewsLeftOrRight();\n    fillLeft(columnStart - 1,referenceView.getLeft() - horizontalSpacing);\n  }\n  return sel;\n}\n", "private void loadSpecificFields ( OpenJPAStateManager sm , BitSet fields , final SpaceTypeInfo typeInfo ) { for ( FieldMetaData fmd : sm . getMetaData ( ) . getFields ( ) ) { if ( fields . get ( fmd . getIndex ( ) ) ) { Object instance = sm . getManagedInstance ( ) ; ( ( PersistenceCapable ) instance ) . pcReplaceStateManager ( null ) ; Object value = typeInfo . getProperty ( fmd . getName ( ) ) . getValue ( sm . getManagedInstance ( ) ) ; ( ( PersistenceCapable ) instance ) . pcReplaceStateManager ( sm ) ; if ( fmd . getAssociationType ( ) == FieldMetaData . ONE_TO_MANY ) { loadOneToManyObjects ( fmd , sm , value ) ; } else if ( fmd . getAssociationType ( ) == FieldMetaData . ONE_TO_ONE ) { loadOneToOneObject ( fmd , sm , value ) ; } else if ( fmd . isEmbeddedPC ( ) ) { loadEmbeddedObject ( fmd , sm , value ) ; } } } }", "private void accept(String action, String expected, String popup) {\n        try {\n            Alert alert = driver.switchTo().alert();\n            alert.accept();\n        } catch (Exception e) {\n            reporter.fail(action, expected, \"Unable to click 'OK' on the \" + popup + \". \" + e.getMessage());\n            log.warn(e);\n            return;\n        }\n        reporter.pass(action, expected, \"Clicked 'OK' on the \" + popup);\n    }", "public Trie lookup(char ch){\n  int i=Arrays.binarySearch(childMap,ch);\n  return i >= 0 ? children[i] : null;\n}\n", "void put(RowCursor cursor){\n  boolean isValid;\n  do {\n    isValid=true;\n    try (JournalOutputStream os=openItem()){\n      os.write(CODE_PUT);\n      cursor.writeJournal(os);\n      isValid=os.complete();\n    }\n catch (    IOException e) {\n      log.log(Level.FINER,e.toString(),e);\n    }\n  }\n while (!isValid);\n}\n", "private void addChildComments(List<? extends IEndlessAdaptable> loadedItems,Comment comment,List<IEndlessAdaptable> displayedComments){\n  for (int j=loadedItems.indexOf(comment) + 1; j < loadedItems.size(); ++j) {\n    Comment child=(Comment)loadedItems.get(j);\n    if (child.getDepth() <= comment.getDepth())     break;\n    displayedComments.add(child);\n  }\n}\n", "public String getIconPathProjectState() {\n\n        String iconPath;\n        if (getProjectState() == STATE_MODIFIED_IN_CURRENT_PROJECT) {\n            iconPath = \"this.png\";\n        } else if (getProjectState() == STATE_MODIFIED_IN_OTHER_PROJECT) {\n            iconPath = \"other.png\";\n        } else if (getProjectState() == STATE_LOCKED_FOR_PUBLISHING) {\n            iconPath = \"publish.png\";\n        } else {\n            // STATE_UNLOCKED\n            iconPath = \"none.gif\";\n        }\n        return \"explorer/project_\" + iconPath;\n    }", "public void destroy ( ) { super . destroy ( ) ; }", "public CliCommandBuilder setTimeout(final int timeout) {\n        if (timeout > 0) {\n            addCliArgument(CliArgument.TIMEOUT, Integer.toString(timeout));\n        } else {\n            addCliArgument(CliArgument.TIMEOUT, null);\n        }\n        return this;\n    }", "String decompile(int indent,int flags){\n  StringBuffer sb=new StringBuffer();\n  boolean justbody=(0 != (flags & Decompiler.ONLY_BODY_FLAG));\n  if (!justbody) {\n    sb.append(\"function \");\n    sb.append(getFunctionName());\n    sb.append(\"() {\\n\\t\");\n  }\n  sb.append(\"[native code, arity=\");\n  sb.append(getArity());\n  sb.append(\"]\\n\");\n  if (!justbody) {\n    sb.append(\"}\\n\");\n  }\n  return sb.toString();\n}\n", "public static Object dotGetUnsafe(final Map map, final String pathString) {\n        return dotGetUnsafe(map, Object.class, pathString);\n    }", "public Object handleRequest(MBeanServerExecutor pServerManager, R request)\n            throws ReflectionException, InstanceNotFoundException, MBeanException, AttributeNotFoundException, IOException, NotChangedException {\n        checkForRestriction(request);\n        checkHttpMethod(request);\n        return doHandleRequest(pServerManager,request);\n    }", "        public Collection allItems() {\n            synchronized (this) {\n                if (items != null) {\n                    return items;\n                }\n            }\n\n            Collection res = new ArrayList(allItems.size());\n\n            for (Iterator i = allItems.iterator(); i.hasNext();) {\n                Object o = i.next();\n\n                if (o instanceof AbstractLookup.Pair) {\n                    if (matches(template, (AbstractLookup.Pair) o)) {\n                        res.add(o);\n                    }\n                }\n            }\n\n            synchronized (this) {\n                items = Collections.unmodifiableCollection(res);\n            }\n\n            return items;\n        }\n", "public static BinaryMessage correctCCITT80 ( BinaryMessage message , int messageStart , int crcStart ) { int calculated = NUM_ ; for ( int i = message . nextSetBit ( messageStart ) ; i >= messageStart && i < crcStart ; i = message . nextSetBit ( i + NUM_ ) ) { calculated ^= CCITT_80_CHECKSUMS [ i - messageStart ] ; } int checksum = getIntChecksum ( message , crcStart , NUM_ ) ; int residual = calculated ^ checksum ; if ( residual == NUM_ || residual == NUM_ ) { message . setCRC ( CRC . PASSED ) ; return message ; } else { int errorLocation = getBitError ( residual , CCITT_80_CHECKSUMS ) ; if ( errorLocation >= NUM_ ) { message . flip ( errorLocation + messageStart ) ; message . setCRC ( CRC . CORRECTED ) ; return message ; } } message . setCRC ( CRC . FAILED_CRC ) ; return message ; }", "public Dimension minimumLayoutSize(Container target) {\n\tint nMembers = target.getComponentCount();\n\tDimension min = new Dimension(0,0);\n\tfor (int i = 0; i < nMembers; i++) {\n\t\tComponent m = target.getComponent(i);\n\t\tif (m.isVisible()) {\n\t\t\tDimension d = m.getPreferredSize();\n\t\t\tmin.height += Math.max(min.height, d.height);\n\t\t\tmin.width += Math.max(min.width, d.width);\n\t\t}\n\t}\n\t\n\tInsets insets = target.getInsets();\n\tmin.width += insets.left + insets.right;\n\tmin.height += insets.top + insets.bottom;\n\treturn min;\n}\n", "public boolean isLibClass(String clz){\n  if (Config.v().apk != null) {\n    for (    String libPkgPrefix : Config.v().libraryPackagePrefixes) {\n      if (clz.startsWith(libPkgPrefix))       return true;\n    }\n  }\n  return libClasses.contains(clz);\n}\n", "public boolean removeConnection(String endpointId, int connectionId) {\n        boolean removed = this.entries.remove(endpointId, connectionId);\n        if (removed && log.isDebugEnabled()) {\n            int left = this.entries.get(endpointId).size();\n            log.debug(\"Call \" + getCallIdHex() + \" unregistered connection \" + Integer.toHexString(connectionId) + \" from endpoint \" + endpointId + \". Connection count: \" + left);\n        }\n        return removed;\n    }", "@Override\n  public ClassLoader getClassLoader() {\n\n    // To follow the same behavior of Class.forName(...) I had to play\n    // dirty (Supported by Sun, IBM & BEA JVMs)\n    try {\n      // Get a reference to this class' class-loader\n      ClassLoader cl = this.getClass().getClassLoader();\n      // Create a method instance representing the protected\n      // getCallerClassLoader method of class ClassLoader\n      Method mthd = ClassLoader.class.getDeclaredMethod(\"getCallerClassLoader\", new Class[0]);\n      // Make the method accessible.\n      AccessibleObject.setAccessible(new AccessibleObject[] {mthd}, true);\n      // Try to get the caller's class-loader\n      return (ClassLoader) mthd.invoke(cl, new Object[0]);\n    } catch (Exception all) {\n      // Use this class' class-loader\n      return this.getClass().getClassLoader();\n    }\n  }", "public static LongStream zipfian(int items, double constant, int events) {\n    return generate(new ZipfianGenerator(items, constant), events);\n  }", "protected Connection tryMessagesToConnections(List<Message> messages,List<Connection> connections){\n  for (int i=0, n=connections.size(); i < n; i++) {\n    Connection con=connections.get(i);\n    Message started=tryAllMessages(con,messages);\n    if (started != null) {\n      return con;\n    }\n  }\n  return null;\n}\n", "public static void readFully(InputStream in, byte[] dst, int offset, int byteCount) throws IOException {\n        if (byteCount == 0) {\n            return;\n        }\n        if (in == null) {\n            throw new NullPointerException(\"in == null\");\n        }\n        if (dst == null) {\n            throw new NullPointerException(\"dst == null\");\n        }\n        Arrays.checkOffsetAndCount(dst.length, offset, byteCount);\n        while (byteCount > 0) {\n            int bytesRead = in.read(dst, offset, byteCount);\n            if (bytesRead < 0) {\n                throw new EOFException();\n            }\n            offset += bytesRead;\n            byteCount -= bytesRead;\n        }\n    }", "public SeleniumAssert isEqualTo(boolean value) {\n        Booleans.instance().assertEqual(info, (Boolean) actual, value);\n        return this;\n    }", "void put ( final ByteVector out ) { int n = NUM_ ; int size = NUM_ ; AnnotationWriter aw = this ; AnnotationWriter last = null ; while ( aw != null ) { ++ n ; size += aw . bv . length ; aw . visitEnd ( ) ; aw . prev = last ; last = aw ; aw = aw . next ; }", "@Override\n    protected void i_addRow(Connection conn,\n                            String table,\n                            String[] columns,\n                            String[] values,\n                            boolean[] numeric) throws SQLException {\n\n        // prepare insert statement\n        StringBuilder sql = new StringBuilder(128);\n        sql.append(\"INSERT INTO \").append(table).append(\" (\");\n        for (int i = 0; i < columns.length; i++) {\n            if (i > 0) {\n                sql.append(\", \");\n            }\n            sql.append(columns[i]);\n        }\n        sql.append(\") VALUES (\");\n        for (int i = 0; i < columns.length; i++) {\n            if (i > 0) {\n                sql.append(\", \");\n            }\n            if (values[i] == null) {\n                sql.append(\"NULL\");\n            } else {\n                sql.append('?');\n            }\n        }\n        sql.append(')');\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"About to execute: {}\", sql.toString());\n        }\n        PreparedStatement stmt = conn.prepareStatement(sql.toString());\n\n        try {\n            // populate values\n            int varIndex = 0;\n            for (int i = 0; i < values.length; i++) {\n                if (values[i] != null) {\n                    varIndex++;\n                    if (numeric != null && numeric[i]) {\n                        setNumeric(stmt, varIndex, columns[i], values[i]);\n                    } else {\n                        stmt.setString(varIndex, values[i]);\n                    }\n                }\n            }\n\n            // execute\n            stmt.executeUpdate();\n\n        } finally {\n            closeStatement(stmt);\n        }\n\n    }", "public PrivilegedTask ( Task < T > task ) { super ( task ) ; }", "public static boolean isValidEmail(String email){\n  Matcher matcher=validEmailPattern.matcher(email);\n  return matcher.find();\n}\n", "    public double getFocalLength() {\n        ODMGXAWrapper txw = new ODMGXAWrapper();\n        txw.lock( this, Transaction.READ );\n        txw.commit();\n        return focalLength;\n    }\n", "private boolean isCompatibleClass(Class checkClass)\n    {\n        //\n        // If the check class is equal to or a super-interface of the map class, then\n        // they are compatible.\n        //\n        if (_mapClass.isAssignableFrom(checkClass))\n            return true;\n\n        //\n        // If the check class is a property set declared by the map class or a super interface\n        // of the map class, then they are compatible.\n        //\n        if (checkClass.isAnnotationPresent(PropertySet.class))\n        {\n            Class declaringClass = checkClass.getDeclaringClass();\n\n            // External property sets are always compatible.\n            // TODO: Could do a more extensive check..\n            if (declaringClass == null)\n                return true;\n\n            if (declaringClass.isAssignableFrom(_mapClass))\n                return true;\n        }\n\n        //\n        // If the map class is a property set declared by the check class or a super interface\n        // of the check class, then they are compatible.  This is the inverse of the last check,\n        // and happens e.g. when a programatically instantiated control w/ an initial property\n        // map needs to delegate to the control interface's property map.\n        //\n        if (_mapClass.isAnnotationPresent(PropertySet.class))\n        {\n            Class declaringClass = _mapClass.getDeclaringClass();\n            if (declaringClass != null &&\n                declaringClass.isAssignableFrom(checkClass))\n                return true;\n\n            // External property sets have no declaring class\n            if (declaringClass == null)\n            {\n                ExternalPropertySets eps = (ExternalPropertySets) checkClass.getAnnotation(ExternalPropertySets.class);\n                if (eps != null)\n                {\n                    Class[] propSets = eps.value();\n                    if (propSets != null)\n                    {\n                        for (Class ps : propSets)\n                        {\n                            if (_mapClass.equals(ps))\n                                return true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }", "\tprivate String escapeSingleQuote(String string) {\n\t\tStringBuffer sb = new StringBuffer(string.length());\n\t\tfor(int i = 0; i < string.length(); i++) {\n\t\t\tchar c = string.charAt(i);\n\t\t\tif(c == '\\'') {\n\t\t\t\tsb.append('\\\\');\n\t\t\t}\n\t\t\tsb.append(c);\n\t\t}\n\t\treturn sb.toString();\n\t}\n", "int localRecv ( byte [ ] buffer , int len ) throws IOException { return localTcp . recv ( buffer , len ) ; }", "  public void addWriteEntity( RateControlledEntity entity ) {\n    try {  entities_mon.enter();\n      if( entity.getPriority() == RateControlledEntity.PRIORITY_HIGH ) {\n        //copy-on-write\n        ArrayList high_new = new ArrayList( high_priority_entities.size() + 1 );\n        high_new.addAll( high_priority_entities );\n        high_new.add( entity );\n        high_priority_entities = high_new;\n      }\n      else {\n        //copy-on-write\n        ArrayList norm_new = new ArrayList( normal_priority_entities.size() + 1 );\n        norm_new.addAll( normal_priority_entities );\n        norm_new.add( entity );\n        normal_priority_entities = norm_new;\n      }\n    }\n    finally {  entities_mon.exit();  }\n  }\n", "\tpublic void writeData(Dem dem, PrintWriter theout){\n\t\t// declarations\n\n\t\t// in DEM2corpscon we are using a subclass of dem, DemTable,\n\t\t// so it needs to be cast\n\t\tDemTable demtab = (DemTable)dem;\n\n\t\t// get the array of UtmCoordinatePair objects\n\n\t\tUtmCoordinatePairElev[][] table = demtab.getTable();\n\n\t\t// output data\n\t\tfor (int i=0; i<table.length; i++) {\n\t\t\tfor (int j=0; j<table[i].length; j++) {\n\t\t\t\t//\n\t\t\t\tif (table[i][j]!=null) {\n\t\t\t\t\ttheout.println(i + \" \" + j + \",\\t\" + table[i][j].getEasting() + \", \" +\n\t\t\t\t\t\ttable[i][j].getNorthing() + \", \" +\n\t\t\t\t\t\ttable[i][j].getElevation());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "public String valueToString(double value){\n  return String.valueOf(value);\n}\n", "private boolean didUserRemoveHimself ( Message message ) { if ( message . getMembers ( ) . length == NUM_ ) { User user = message . getMembers ( ) [ NUM_ ] ; return message . getUser ( ) . getId ( ) . equals ( user . getId ( ) ) ; } return BOOL_ ; }", "public static RejectStatus fromValue(int value) {\n        RejectStatus status = VALUES.get(value);\n        if (status == null) {\n            status = new RejectStatus(value);\n            VALUES.put(value, status);\n        }\n        return status;\n    }", "Optional<Expression> compileAvoidingDetaches(ExprNode node) {\n    checkNotNull(node);\n    return new CompilerVisitor(variables, varManager, exprCompiler, null).exec(node);\n  }", "public void applyComponentOrientation(ComponentOrientation o){\n  possiblyFixCursor(o.isLeftToRight());\n  super.applyComponentOrientation(o);\n}\n", "public boolean importFont(String fontNr, String fontName, String fontFamily, int charset) {\n        RtfFont rtfFont = new RtfFont(fontName);\n\n        if(charset>= 0)\n            rtfFont.setCharset(charset);\n        if(fontFamily != null && fontFamily.length() > 0)\n            rtfFont.setFamily(fontFamily);\n        rtfFont.setRtfDocument(this.rtfDoc);\n        this.importFontMapping.put(fontNr, Integer.toString(this.rtfDoc.getDocumentHeader().getFontNumber(rtfFont)));\n        return true;\n    }", "public FilterCellFastStr addNewCell(int hashcode, int length) {\n        // check for wildcard\n        if ((hashcode != 0) || (length != 0)) {\n            // not a wildcard\n            if (nextCell == null) {\n                // no next node on this tree, so add one\n                nextCell = new FastSynchHashTable();\n            }\n\n            FilterCellFastStr newCell = new FilterCellFastStr();\n            newCell.hashLength = length;\n            nextCell.put(hashcode, newCell);\n\n            return newCell;\n        }\n        // entry is a wildcard, create wildcode node if it doesn't exist\n        if (wildcardCell == null) {\n            wildcardCell = new FilterCellFastStr();\n        }\n        return wildcardCell;\n    }", "static int newInsertPos ( int oldPos , Insertion ins ) { if ( oldPos <= ins . pos ) { return oldPos ; } if ( oldPos < ins . pos + ins . oldLen ) { if ( oldPos < ins . pos + ins . newLen ) { return oldPos ; } else { return ins . pos + ins . newLen - ins . ", "public boolean ask(String sparql){\n  return execute(\"query\",ASK_QUERY_RESPONSE,sparql);\n}\n", "    protected boolean deleteMoveConflictChecking(final TMergeNode node) {\n        if (node == null)\n            throw new ArgumentNullException(\"node\");\n\n        if (node.hasMatch()) {\n            if (node.getMatch().isFarMove() && !node.hasPartner()) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "private boolean responseIsInValid() {\n        if (response == null) {\n            return true;\n        }\n        else if (!response.isHeadless() && validityCheck) {\n            return request.getTransactionID() != response.getTransactionID();\n        }\n        else {\n            return false;\n        }\n    }", "public static final void run(DBIDs ids,Processor... procs){\n  ParallelCore core=ParallelCore.getCore();\n  core.connect();\n  try {\n    ArrayDBIDs aids=DBIDUtil.ensureArray(ids);\n    final int size=aids.size();\n    int numparts=core.getParallelism();\n    numparts=(size > numparts * numparts * 16) ? numparts * Math.max(1,numparts - 1) : numparts;\n    final int blocksize=(size + (numparts - 1)) / numparts;\n    List<Future<ArrayDBIDs>> parts=new ArrayList<>(numparts);\n    for (int i=0; i < numparts; i++) {\n      final int start=i * blocksize;\n      final int end=(start + blocksize < size) ? start + blocksize : size;\n      Callable<ArrayDBIDs> run=new BlockArrayRunner(aids,start,end,procs);\n      parts.add(core.submit(run));\n    }\n    for (    Future<ArrayDBIDs> fut : parts) {\n      fut.get();\n    }\n  }\n catch (  ExecutionException e) {\n    throw new RuntimeException(\"Processor execution failed.\",e);\n  }\ncatch (  InterruptedException e) {\n    throw new RuntimeException(\"Parallel execution interrupted.\");\n  }\n finally {\n    core.disconnect();\n  }\n}\n", "public static synchronized EFapsClassLoader getOfflineInstance(final ClassLoader _parent)\n    {\n        if (EFapsClassLoader.CLASSLOADER == null) {\n            EFapsClassLoader.CLASSLOADER = new EFapsClassLoader(_parent, true);\n        }\n        return EFapsClassLoader.CLASSLOADER;\n    }", "    public void add(MgcpEndpoint endpoint) {\n        queue.add(0, new Holder(endpoint));\n    }\n", "public BigFractionFormat ( final NumberFormat numeratorFormat , final NumberFormat denominatorFormat ) { super ( numeratorFormat , denominatorFormat ) ; }", "@Override public void releaseWriter(){\n  writerLock.unlock();\n}\n", "public static String rpad(String base, Integer len, String pad)\n  {\n    if (len < 0) {\n      return null;\n    } else if (len == 0) {\n      return \"\";\n    }\n\n    char[] data = new char[len];\n\n    int pos = 0;\n\n    // Copy the base\n    for ( ; pos < base.length() && pos < len; pos++) {\n      data[pos] = base.charAt(pos);\n    }\n\n    // Copy the padding\n    for ( ; pos < len; pos += pad.length()) {\n      for (int i = 0; i < pad.length() && i < len - pos; i++) {\n        data[pos + i] = pad.charAt(i);\n      }\n    }\n\n    return new String(data);\n  }", "    public void receivedPacket(PacketEvent pe) {\n        if (!(pe.getPacket() instanceof InfoQuery)) {\n            BSCore.logEvent(name, \"warning: nonIQ packet received\");\n            return;\n        }\n        \n        InfoQuery iq = (InfoQuery) pe.getPacket();\n        //if no ID or packet with that ID not expected\n        if (state.servedID == null || !state.servedID.equals(iq.getIdentifier())) {\n            return;\n        }\n        \n        if ((new String(\"result\")).equals(iq.getType()))\n            handleResult(iq);\n        else if ((new String(\"error\")).equals(iq.getType()))\n            handleError(iq);\n        else if ((new String(\"set\")).equals(iq.getType()))\n            handleSet(iq);\n    }\n", "private void updateWindow ( ) { final IGraphPanel window = getActiveGraphWindow ( ) ; if ( window == null ) { return ; } setTitle ( CWindowTitle . generate ( window ) ) ; setJMenuBar ( window . getMenu ( ) ) ; }", "  public Tree normalizeWholeTree(Tree tree, TreeFactory tf) {\n    return tree;\n  }\n", "public AnnotationVisitor visitAnnotation ( String desc , boolean visible ) { if ( cv != null ) { return cv . visitAnnotation ( desc , visible ) ; } return null ; }", "public void setFreebase(String freebase) {\n    if(freebase != null) {\n      freebase = freebase.trim();\n    }\n    this.freebase = freebase;\n  }", "public DaemonStatus checkStatus()\n    {\n        if (this.pidfile == null) {\n            throw new IllegalStateException(\"No pidfile specified, cannot check status!\");\n        }\n        if (!pidfile.exists()) {\n            return DaemonStatus.STATUS_NOT_RUNNING;\n        }\n\n        final int pid;\n        try\n        {\n            byte[] content = Files.readAllBytes(pidfile.toPath());\n            String s = new String(content, StandardCharsets.UTF_8).trim();\n            pid = Integer.parseInt(s);\n\n        }\n        catch (Exception e)\n        {\n            System.err.println(e.getMessage());\n            return DaemonStatus.STATUS_UNKNOWN;\n        }\n\n        int rs = posix.kill(pid, 0);\n        if (rs == 0) {\n            return DaemonStatus.STATUS_RUNNING;\n        }\n        else\n        {\n            return DaemonStatus.STATUS_DEAD;\n        }\n    }", "    private Object addCaptionedItem(String caption, Object parent) {\n        // add item, let tree decide id\n        final Object id = tree.addItem();\n        // get the created item\n        final Item item = tree.getItem(id);\n        // set our \"caption\" property\n        final Property p = item.getItemProperty(CAPTION_PROPERTY);\n        p.setValue(caption);\n        if (parent != null) {\n            tree.setParent(id, parent);\n        }\n        return id;\n    }\n", "public TriggerWrapper ( final JsonValue map ) { serialized = map . get ( STR_ ) . asString ( ) ; name = map . get ( STR_ ) . asString ( ) ; group = map . get ( STR_ ) . asString ( ) ; state = map . get ( STR_ ) . asInteger ( ) ; previous_state = map . get", "  public String getCurrentValue() {\n    List<String> values = new ArrayList<String>();\n    for (int i = 0; i < optionTable.getRowCount(); i++) {\n      values.add((String) optionTable.getValueAt(i, 0));\n    }\n    return VariableBundle.convertToString(values);\n  }\n", "public int size() {\n\tint size = 0;\n\tfor(Ta a: getKeys()) {\n\t    for(Tb b: get2ndValues(a)) {\n\t\tsize += get3rdValues(a, b).size();\n\t    }\n\t}\n\treturn size;\n    }", "    public int getWordL(int offset) {\n        int w = patch.sysex[offset] + (patch.sysex[offset+1]<<4)\n              + (patch.sysex[offset+2]<<8) + (patch.sysex[offset+3]<<12);\n        return w;\n    }\n", "public static WebSocketContainer getWebSocketContainer() {\n        if(System.getSecurityManager() == null) {\n            return getWebSocketContainerImpl();\n        } else {\n            return AccessController.doPrivileged(new PrivilegedAction<WebSocketContainer>() {\n                @Override\n                public WebSocketContainer run() {\n                    return getWebSocketContainerImpl();\n                }\n            });\n        }\n    }", "\tpublic void removeOrderChangeListener(OrderChangeListener listener) {\n\t\tlistenerList.remove(OrderChangeListener.class, listener);\n\t}\n", "public double min(){\n  int size=values.size();\n  double min=Double.MAX_VALUE;\n  for (int i=0; i < size; i++)   min=Math.min(min,values.get(i));\n  return min;\n}\n", "public String handleWord ( String aWord ) { Matcher m = conditionPattern . matcher ( aWord ) ; if ( m != null && m . matches ( ) ) { if ( type . equals ( AffixType . PREFIX ) ) { return handlePrefix ( aWord ) ; } else if ( type . equals ( AffixType . SUFF", "long getLastOffset(long micros) {\n\n        final ConnectionResult cr = this.result;\n        return ((cr == null) ? 0 : cr.getActualOffset(micros));\n\n    }", "public String [ ] parseConfiguration ( Document document ) { NodeList nList = document . getElementsByTagName ( STR_ ) ; if ( nList . getLength ( ) == NUM_ ) { nList = document . getElementsByTagName ( STR_ ) ; } if ( nList . getLength ( ) == NUM_ ) { nLi", "@SneakyThrows\n    public static void printAsciiArt(final PrintStream out, final String asciiArt, final String additional) {\n        out.println(ANSI_CYAN);\n        if (StringUtils.isNotBlank(additional)) {\n            out.println(FigletFont.convertOneLine(asciiArt));\n            out.println(additional);\n        } else {\n            out.print(FigletFont.convertOneLine(asciiArt));\n        }\n        out.println(ANSI_RESET);\n    }", "public StreamImpl openReadImpl() throws IOException {\n  if (_isWindows && isAux())   throw new FileNotFoundException(_file.toString());\n  return new FileReadStream(new FileInputStream(getFile()),this);\n}\n", "public Map<Instruction,Integer> numberInstructionsViaMap(){\n  HashMap<Instruction,Integer> instructionNumbers=new HashMap<Instruction,Integer>();\n  int num=0;\n  for (Instruction instr=firstInstructionInCodeOrder(); instr != null; instr=instr.nextInstructionInCodeOrder(), num++) {\n    instructionNumbers.put(instr,Integer.valueOf(num));\n  }\n  return instructionNumbers;\n}\n", "public static double quantile(double z,double M,double S){\n  return Math.exp(NormalDistribution.quantile(z,M,S));\n}\n", "public static Stroke createDefaultStroke(){\n  Stroke stroke=styleFactory.getDefaultStroke();\n  return stroke;\n}\n", "public static String encodePathParam(final String pathParam,final String charset) throws UnsupportedEncodingException {\n  return encodePathSegment(pathParam,charset);\n}\n", "public static MatchedValuesRequestControl newControl(final boolean isCritical,final String... filters){\n  Reject.ifFalse(filters.length > 0,\"filters is empty\");\n  final List<Filter> parsedFilters=new ArrayList<>(filters.length);\n  for (  final String filter : filters) {\n    parsedFilters.add(validateFilter(Filter.valueOf(filter)));\n  }\n  return new MatchedValuesRequestControl(isCritical,Collections.unmodifiableList(parsedFilters));\n}\n", "  private void open_InterfaceRepository() {\n\n    try {\n      Interface_Repository_Client ir_client = new Interface_Repository_Client ();\n      String name = System . getProperty (Repository_Manager . service_url_property, Repository_Manager . service_url_default);\n      ir_client.setup(name, false);}\n    catch (Exception e) {e. printStackTrace ();}\n  }\n", "public static double [ ] sums ( double [ ] [ ] input ) { double [ ] theSums = new double [ input [ NUM_ ] . length ] ; for ( int r = NUM_ ; r < input . length ; r ++ ) { for ( int c = NUM_ ; c < input [ r ] . length ; c ++ ) { theSums [ c ] += input [ r ]", "public static String byteArray2String(byte[] bytes) {\r\n\t\tStringBuffer sb = new StringBuffer(\"[\"); //$NON-NLS-1$\r\n\t\tint i = 0;\r\n\t\tfor (byte b : bytes) {\r\n\t\t\tsb.append(i++ == 0 ? \"\" : \", \").append(((int)b)&0xFF); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t}\r\n\t\treturn sb.append(\"]\").toString(); //$NON-NLS-1$\r\n\t}", "private void showNumTaskPerHeartBeatOption(\n          PrintWriter out, boolean advancedView) {\n\n    out.print(\"<h2>Number of Assigned Tasks Per HeartBeat</h2>\\n\");\n    out.printf(\"<p>Number of map tasks assigned per heartbeat:%s\",\n                generateSelect(Arrays.asList(\"1,2,3,4,5,6,7,8,9,10\".split(\",\")),\n                               scheduler.getMapPerHeartBeat() + \"\",\n                               \"/fairscheduler?setMapPerHeartBeat=<CHOICE>\" +\n                               (advancedView ? \"&advanced\" : \"\")));\n\n    out.printf(\"<p>Number of reduce tasks assigned per heartbeat:%s\",\n               generateSelect(Arrays.asList(\"1,2,3,4,5,6,7,8,9,10\".split(\",\")),\n                              scheduler.getReducePerHeartBeat() + \"\",\n                              \"/fairscheduler?setReducePerHeartBeat=<CHOICE>\" +\n                              (advancedView ? \"&advanced\" : \"\")));\n  }", "public int compareTo ( Object obj ) { EventReg reg = ( EventReg ) obj ; if ( this == reg ) return NUM_ ; if ( leaseExpiration < reg . leaseExpiration || ( leaseExpiration == reg . leaseExpiration && eventID < reg . eventID ) ) return - NUM_ ; return NUM_ ", "public final static String toJSON(HELM2Notation helm2notation) throws JsonProcessingException {\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    String jsonINString = mapper.writeValueAsString(helm2notation);\r\n    jsonINString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(helm2notation);\r\n    return jsonINString;\r\n  }", "public ByteStringTranslator(String[] strings){\n  if (strings.length > MAXNUM) {\n    StringBuilder buf=new StringBuilder();\n    for (int i=0; i < strings.length; i++) {\n      buf.append(\"\\\"\" + strings[i] + \"\\\" \");\n    }\n    throw new IllegalArgumentException(\"Too many strings for a byte-string translator: \\n\" + buf.toString() + \"(\"+ strings.length+ \" strings)\");\n  }\n  list=new ArrayList<String>(Arrays.asList(strings));\n  map=new HashMap<String,Byte>();\n  for (int i=0; i < strings.length; i++) {\n    map.put(strings[i],(byte)i);\n  }\n}\n", "    public int hashCode() {\n        int result = super.hashCode();\n        result = 29 * result + (formatter != null ? formatter.hashCode() : 0);\n        return result;\n    }\n", "private ByteBuffer ensureBuffer(int size, ByteBuffer buffer, WritableByteChannel output) throws IOException {\n    if(buffer.remaining() >= size) {\n      return buffer;\n    }\n    flushBuffer(buffer, output);\n    if(buffer.remaining() >= size) {\n      return buffer;\n    }\n    // Aggressively grow the buffer\n    return ByteBuffer.allocateDirect(Math.max(buffer.capacity() << 1, buffer.capacity() + size));\n  }", "private InternalRequest createRequest(\n            AbstractBceRequest bceRequest, HttpMethodName httpMethod, String... pathVariables) {\n        List<String> path = new ArrayList<String>();\n        path.add(VERSION);\n\n        if (pathVariables != null) {\n            for (String pathVariable : pathVariables) {\n                path.add(pathVariable);\n            }\n        }\n\n        URI uri = HttpUtils.appendUri(this.getEndpoint(), path.toArray(new String[path.size()]));\n        InternalRequest request = new InternalRequest(httpMethod, uri);\n        SignOptions signOptions = new SignOptions();\n        signOptions.setHeadersToSign(new HashSet<String>(Arrays.asList(HEADERS_TO_SIGN)));\n        request.setSignOptions(signOptions);\n        request.setCredentials(bceRequest.getRequestCredentials());\n\n        return request;\n    }", "Union6 < First , Second , Third , Fourth , Fifth , Sixth > first ( First value ) ;", "    public String getExpandedPath() {\n        BeanUtilsVariables var = (BeanUtilsVariables) getVariables();\n\n        if ((var != null) && var.isChanged()) {\n            synchronized (var) {\n                _expandedPath = expandPath(getPath(), var);\n                var.resetChanges();\n            }\n        }\n\n        return _expandedPath;\n    }\n", "    public Configuration addPackage(String packageName) {\n        if ((packageName == null) || (packageName.length() == 0)) {\n            throw new IllegalArgumentException(\"packageName can not be null\");\n        }\n\n        if (!packages.contains(packageN", "  public Service getService(String name) {\n    synchronized(serviceMap) {\n      return (Service) serviceMap.get(name);\n    }\n  }\n", "\tprivate void propogateUnnamedAttributes() {\n\t\tList aList = getUnnamedAttributes();\n\t\tif (aList != null) {\n\t\t\tIterator i = aList.iterator();\n\t\t\twhile (i.hasNext()) {\n\t\t\t\tObject anObject = i.next();\n\t\t\t\t//This level defines the name of the attribute\n\t\t\t\tgetParentState().addNamedAttribute(getTagName(), anObject);\n\t\t\t}\n\t\t}\n\t}\n", "protected abstract double upStep ( double stepTime ) ;", "public LocalVolTermStructure ( final Date referenceDate ) { this ( referenceDate , new Calendar ( ) , BusinessDayConvention . Following , new DayCounter ( ) ) ; }", "    public void developerError(String error) {\n\t// EhiLogger.logError(error, SE_DEVELOPER_ERROR);\n\tEhiLogger.getInstance().logEvent(new StdLogEvent(LogEvent.ERROR, error, null, getOrigin(0), SE_DEVELOPER_ERROR));\n    }\n", "private void fillInternalShadowRounded(Graphics2D g,Shape s){\n  g.setPaint(getRoundedShadowGradient(s));\n  g.fill(s);\n}\n", "public DateOrder getDateOrder(int field)\n   {\n      DateOrder result;\n\n      if ((field < m_fields.length) && (m_fields[field].length() != 0))\n      {\n         result = DateOrder.getInstance(Integer.parseInt(m_fields[field]));\n      }\n      else\n      {\n         result = DateOrder.MDY;\n      }\n\n      return (result);\n   }", "private static Map<String, IAtomBase> generateRgroupMap(final String detail, final AbstractMolecule molecule) throws CTKException {\r\n    Map<String, IAtomBase> rgroupMap = new HashMap<String, IAtomBase>();\r\n    for (Map.Entry<String, IAtomBase> e : molecule.getRgroups().entrySet()) {\r\n      rgroupMap.put(detail + \":\" + e.getKey(), e.getValue());\r\n    }\r\n\r\n    return rgroupMap;\r\n  }", "public String getFileContentsAsString(final File file, final String encoding)\n\t\t\tthrows IOException {\n\t\tLOG.info(\"Getting files contents as string: \" + file);\n\t\tBufferedReader br = null;\n\t\ttry {\n\t\t\tbr = new BufferedReader(new InputStreamReader(new FileInputStream(\n\t\t\t\t\tfile), encoding));\n\n\t\t\tStringBuilder builder = new StringBuilder();\n\n\t\t\tString line = null;\n\t\t\twhile ((line = br.readLine()) != null) {\n\t\t\t\tbuilder.append(line);\n\t\t\t}\n\n\t\t\tLOG.debug(\"File contents: \" + builder);\n\t\t\treturn builder.toString();\n\t\t} finally {\n\t\t\tif (br != null) {\n\t\t\t\tbr.close();\n\t\t\t}\n\t\t}\n\t}", "void pushInt ( final int x ) ;", "public void marshall(ListRunsRequest listRunsRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (listRunsRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n         ", "public boolean isExecutable ( ) { return ( ( status == Watchable . PAUSED || status == Watchable . RUNNING ) && ( gate == null || ! gate . stop ( ) ) ) ; }", "public static int read(Reader input, char[] buffer) throws IOException {\r\n        return read(input, buffer, 0, buffer.length);\r\n    }", "private void initialize() throws IOException {\n  if (_secondaryJoiners != null) {\n    return;\n  }\n  _primaryJoinersChkUp=new ArrayList<Joiner>(1);\n  _primaryJoinersChkDel=new ArrayList<Joiner>(1);\n  _primaryJoinersDoUp=new ArrayList<Joiner>(1);\n  _primaryJoinersDoDel=new ArrayList<Joiner>(1);\n  _primaryJoinersDoNull=new ArrayList<Joiner>(1);\n  _secondaryJoiners=new ArrayList<Joiner>(1);\n  for (  IndexImpl idx : _table.getIndexes()) {\n    IndexImpl.ForeignKeyReference ref=idx.getReference();\n    if (ref != null) {\n      Joiner joiner=Joiner.create(idx);\n      if (ref.isPrimaryTable()) {\n        if (ref.isCascadeUpdates()) {\n          _primaryJoinersDoUp.add(joiner);\n        }\n else {\n          _primaryJoinersChkUp.add(joiner);\n        }\n        if (ref.isCascadeDeletes()) {\n          _primaryJoinersDoDel.add(joiner);\n        }\n else         if (ref.isCascadeNullOnDelete()) {\n          _primaryJoinersDoNull.add(joiner);\n        }\n else {\n          _primaryJoinersChkDel.add(joiner);\n        }\n      }\n else {\n        _secondaryJoiners.add(joiner);\n      }\n    }\n  }\n}\n", "public synchronized boolean deleteType ( final BaseType baseType ) throws CouldntDeleteException { Preconditions . checkNotNull ( baseType , STR_ ) ; if ( ! canDeletePointerType ( baseType ) ) { return BOOL_ ; } final Set < BaseType > affectedTypes = type", "protected void displayActionIsRunning(){\n  testLabel.setIcon(WORKING_ICON);\n}\n", "  public void cmpltPflanze(int minAmount) {\n    completions.add(new Completion(getOrderTranslation(EresseaConstants.O_HERBS)));\n    completions.add(new Completion(getOrderTranslation(EresseaConstants.O_TREES)));\n    completions.add(new Completion(getOrderTranslation(EresseaConstants.O_SEED)));\n    completions.add(new Completion(getOrderTranslation(EresseaConstants.O_MALLORNSEED)));\n  }\n", "public static void writePbsEntryPacket ( PbsOutputStream output , PbsEntryPacket pbsEntry ) { byte [ ] array = pbsEntry . getStreamBytes ( ) ; output . write ( array , NUM_ , array . length ) ; writeDynamicProperties ( output , pbsEntry . getDynamicProperties ( ) ) ; }", "public void moveItemUp(ScheduleItem si){\n  int sequenceId=si.getSequenceId();\n  if (sequenceId - 1 <= 0) {\n    si.setSequenceId(_sequenceNum + 1);\n    resequenceIds();\n  }\n else {\n    ScheduleItem replaceSi=getItemBySequenceId(sequenceId - 1);\n    if (replaceSi != null) {\n      replaceSi.setSequenceId(sequenceId);\n      si.setSequenceId(sequenceId - 1);\n    }\n else {\n      resequenceIds();\n    }\n  }\n  setDirtyAndFirePropertyChange(LISTCHANGE_CHANGED_PROPERTY,null,Integer.toString(sequenceId));\n}\n", "\tprivate String getExpectedHTMLOutput() {\n\t\tStringBuffer html = new StringBuffer();\n\t\thtml.append(\"<meta name=\\\"subjectCoverage.Subject.keyword.ddmsence.relevance\\\" content=\\\"95\\\" />\\n\");\n\t\treturn (html.toString());\n\t}\n", "public final ListClustersResponse listClusters(String parent) {\n\n    ListClustersRequest request = ListClustersRequest.newBuilder().setParent(parent).build();\n    return listClusters(request);\n  }", "public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { request . getSession ( ) . setAttribute ( STR_ , STR_ ) ; response . sendRedirect ( STR_ ) ; return ; }", "public static void makeDoubleMatrixFile ( double matrix [ ] [ ] , String outputFileName ) throws IOException { int rowSize = matrix . length ; int colSize = matrix [ NUM_ ] . length ; createDirectories ( outputFileName ) ; BufferedWriter out = new Buffere", "public int platformId ( ) { return this . cmapId ( ) . platformId ( ) ; }", "public void removeDiscoveryListener ( DiscoveryListener l ) { synchronized ( registrars ) { if ( terminated ) { throw new IllegalStateException ( STR_ ) ; } listeners . remove ( l ) ; } }", "public String toXMLString ( ) throws FSMsgException { return this . toXMLString ( BOOL_ , BOOL_ ) ; }", "public HttpField remove(HttpHeader name) {\n        HttpField removed = null;\n        for (int i = _size; i-- > 0; ) {\n            HttpField f = _fields[i];\n            if (f.getHeader() == name) {\n                removed = f;\n                System.arraycopy(_fields, i + 1, _fields, i, --_size - i);\n            }\n        }\n        return removed;\n    }", "\tpublic Configurable getObjectByName(String name) throws ClassNotFoundException {\n\t\tIterator<Configurable> it = Objects.values().iterator();\n\t\twhile(it.hasNext()) {\n\t\t\tConfigurable c = it.next();\n\t\t\tif (c.getProperty(\"name\").equals(name))\n\t\t\t\treturn c;\n\t\t}\n\t\treturn null;\n\t}\n", "public Statement using(Object... columns){\n  statement.append(\" USING (\");\n  appendClauses(columns);\n  statement.append(')');\n  return this;\n}\n", "\tprotected void informConsumers(File source, String string) {\n\t\tfor (Iterator consumerIterator = consumers.iterator(); consumerIterator\n\t\t\t\t.hasNext();) {\n\t\t\t((StringConsumer)consumerIterator.next()).stringFound(source, string);\n\t\t}\n\n\t}\n", "  public void addStates(Collection<NFAState> manyStates) throws NFAException {\n    for (NFAState s : manyStates) {\n      this.addState(s);\n    }\n  }\n", "public ServiceFuture<ListModelsResult> listModelsAsync(final ServiceCallback<ListModelsResult> serviceCallback) {\n        return ServiceFuture.fromResponse(listModelsWithServiceResponseAsync(), serviceCallback);\n    }", "public String getSignature(TypeMirror type) {\n    StringBuilder sb = new StringBuilder();\n    buildTypeSignature(type, sb);\n    return sb.toString();\n  }", "\tpublic void messageEvent(int ev, BasicMessage msg, Object arg) {\n\t\tif (!initialUpdateDone) {\n\n\t\t\tif (msg instanceof SimpleMessage) {\n\t\t\t\tSangamSimpleMessage simp =\n\t\t\t\t\tSangamSimpleMessageConverter.createSangamSimpleMessage(\n\t\t\t\t\t\t(SimpleMessage) msg);\n\t\t\t\tif (DriveMessageDecoder.isDriveMessage(simp)) {\n\t\t\t\t\t// Store this message for deletion, as soon as update completes\n\t\t\t\t\tdriveMessageToBeDeleted = simp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!initialUpdateDone\n\t\t\t&& (ev & MessageObserver.EV_INITIAL_UPDATE_DONE) != 0) {\n\t\t\tinitialUpdateDone = true;\n\t\t\tif (driveMessageToBeDeleted != null) {\n\t\t\t\tclient.removeMessage(driveMessageToBeDeleted);\n\t\t\t}\n\t\t}\n\n\t}\n", "public void flush(){\n  updateQueue();\n  while (getQueueSize() > 0) {\n    updateQueue();\n    try {\n      Thread.sleep(10);\n    }\n catch (    InterruptedException e) {\n      throw new RuntimeException(e);\n    }\n  }\n}", "private void addToList(Vector<String> list,String line){\n  list.addElement(line);\n}\n", "protected AlgoPullTight(RoutingBoard p_board,NetNosList p_only_net_no_arr,ThreadStoppable p_stoppable_thread,BrdKeepPoint p_keep_point,int p_min_move_dist){\n  r_board=p_board;\n  only_net_no_arr=p_only_net_no_arr;\n  stoppable=p_stoppable_thread;\n  keep_point=p_keep_point;\n  min_move_dist=Math.max(p_min_move_dist,10);\n}\n", "public static void record(MonitorConfig config, TimeUnit reportUnit, long duration,\n                            TimeUnit durationUnit) {\n    INSTANCE.get(config, reportUnit).record(duration, durationUnit);\n  }", "private CmsCheckBox generateCheckBox(Date date, boolean checkState) {\n\n        CmsCheckBox cb = new CmsCheckBox();\n        cb.setText(m_dateFormat.format(date));\n        cb.setChecked(checkState);\n        cb.getElement().setPropertyObject(\"date\", date);\n        return cb;\n\n    }", "@SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:cyclomaticcomplexity\"})\n\tprotected void copyVisibleJvmConstructors(JvmGenericType source, JvmGenericType target,\n\t\t\tXtendTypeDeclaration sarlSource, Set<ActionParameterTypes> createdConstructors,\n\t\t\tJvmVisibility minimalVisibility) {\n\t\tfinal boolean samePackage = Objects.equal(source.getPackageName(), target.getPackageName());\n\t\tfinal Iterable<JvmConstructor> constructors = Iterables.transform(Iterables.filter(source.getMembers(), it -> {\n\t\t\tif (it instanceof JvmConstructor) {\n\t\t\t\tfinal JvmConstructor op = (JvmConstructor) it;\n\t\t\t\treturn op.getVisibility() != JvmVisibility.PRIVATE\n\t\t\t\t\t\t&& (op.getVisibility() != JvmVisibility.DEFAULT || samePackage);\n\t\t\t}\n\t\t\treturn false;\n\t\t}), it -> (JvmConstructor) it);\n\n\t\t// Sort the constructor in order to always add them in the same order.\n\t\tfinal SortedSet<Pair<JvmConstructor, ActionParameterTypes>> sortedConstructors = new TreeSet<>(\n\t\t\t\t(elt1, elt2) -> elt1.getValue().compareTo(elt2.getValue()));\n\t\tfor (final JvmConstructor constructor : constructors) {\n\t\t\tfinal ActionParameterTypes types = this.sarlSignatureProvider.createParameterTypesFromJvmModel(\n\t\t\t\t\tconstructor.isVarArgs(), constructor.getParameters());\n\t\t\tsortedConstructors.add(new Pair<>(constructor, types));\n\t\t}\n\n\t\tfor (final Pair<JvmConstructor, ActionParameterTypes> pair : sortedConstructors) {\n\t\t\tif (createdConstructors.add(pair.getValue())) {\n\t\t\t\tfinal JvmConstructor constructor = pair.getKey();\n\t\t\t\tfinal JvmConstructor newCons = this.typesFactory.createJvmConstructor();\n\t\t\t\tnewCons.setDeprecated(constructor.isDeprecated());\n\t\t\t\tnewCons.setSimpleName(target.getSimpleName());\n\t\t\t\ttarget.getMembers().add(newCons);\n\n\t\t\t\tfor (final JvmFormalParameter parameter : constructor.getParameters()) {\n\t\t\t\t\tfinal JvmFormalParameter newParam = this.typesFactory.createJvmFormalParameter();\n\t\t\t\t\tnewParam.setName(parameter.getSimpleName());\n\t\t\t\t\tnewCons.getParameters().add(newParam);\n\n\t\t\t\t\tfinal JvmTypeReference originalParamTypeReference = parameter.getParameterType();\n\t\t\t\t\tfinal JvmTypeReference paramType = cloneWithTypeParametersAndProxies(originalParamTypeReference, newCons);\n\t\t\t\t\tassert originalParamTypeReference != paramType;\n\t\t\t\t\tnewParam.setParameterType(paramType);\n\n\t\t\t\t\tfor (final JvmAnnotationReference annotationReference : parameter.getAnnotations()) {\n\t\t\t\t\t\tif (this.annotationUtils.findAnnotation(newParam, annotationReference.getAnnotation().getQualifiedName()) == null) {\n\t\t\t\t\t\t\tfinal JvmAnnotationReference annotation = EcoreUtil.copy(annotationReference);\n\t\t\t\t\t\t\tif (annotation != null) {\n\t\t\t\t\t\t\t\tnewParam.getAnnotations().add(annotation);\n\t\t\t\t\t\t\t\tthis.associator.removeAllAssociation(annotation);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.associator.removeAllAssociation(paramType);\n\t\t\t\t\tthis.associator.removeAllAssociation(newParam);\n\t\t\t\t}\n\n\t\t\t\tnewCons.setVarArgs(constructor.isVarArgs());\n\n\t\t\t\tJvmVisibility visibility = constructor.getVisibility();\n\t\t\t\tif (visibility != null && minimalVisibility != null && minimalVisibility.compareTo(visibility) > 0) {\n\t\t\t\t\tvisibility = minimalVisibility;\n\t\t\t\t}\n\t\t\t\tnewCons.setVisibility(visibility);\n\n\t\t\t\tsetBody(newCons, it -> {\n\t\t\t\t\tit.append(this.grammarKeywordAccess.getSuperKeyword());\n\t\t\t\t\tit.append(\"(\"); //$NON-NLS-1$\n\t\t\t\t\tboolean first = true;\n\t\t\t\t\tfor (final JvmFormalParameter parameter : newCons.getParameters()) {\n\t\t\t\t\t\tif (first) {\n\t\t\t\t\t\t\tfirst = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tit.append(\", \"); //$NON-NLS-1$\n\t\t\t\t\t\t}\n\t\t\t\t\t\tit.append(parameter.getSimpleName());\n\t\t\t\t\t}\n\t\t\t\t\tit.append(\");\"); //$NON-NLS-1$\n\t\t\t\t});\n\n\t\t\t\tcopyAndCleanDocumentationTo(constructor, newCons);\n\n\t\t\t\tappendGeneratedAnnotation(newCons, getContext(target));\n\n\t\t\t\tfor (final JvmAnnotationReference annotationReference : constructor.getAnnotations()) {\n\t\t\t\t\tif (this.annotationUtils.findAnnotation(newCons, annotationReference.getAnnotation().getQualifiedName()) == null) {\n\t\t\t\t\t\tfinal JvmAnnotationReference annotation = EcoreUtil.copy(annotationReference);\n\t\t\t\t\t\tif (annotation != null) {\n\t\t\t\t\t\t\tnewCons.getAnnotations().add(annotation);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.associator.removeAllAssociation(newCons);\n\t\t\t}\n\t\t}\n\t}", "public static String toMapString ( Map arg ) { return toMapString ( arg , - NUM_ ) ; }", "\tprivate boolean isEqualsComparator(final ANode node) {\n\t\tif (null == node) {\n\t\t\treturn false;\n\t\t}\n\n\t\tswitch (node.getType()) {\n\t\tcase Antlr3JavaParser.EQUAL:\n\t\tcase Antlr3JavaParser.NOT_EQUAL:\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n", "public NestedDef getNested(String name)\r\n    {\r\n        NestedDef nestedDef = null;\r\n\r\n        for (Iterator it = _nested.iterator(); it.hasNext(); )\r\n        {\r\n            nestedDef = (NestedDef)it.next();\r\n            if (nestedDef.getName().equals(name))\r\n            {\r\n                return nestedDef;\r\n            }\r\n        }\r\n        return null;\r\n    }", "@Override\n    public void encodeBegin(FacesContext context, UIComponent component) throws IOException {\n        long timer = System.nanoTime();\n        long random = (long) (Math.random() * Integer.MAX_VALUE);\n        long token = timer ^ random;\n        NGSecureUtilities.setSecurityToken(String.valueOf(token), component.getClientId());\n        super.encodeBegin(context, component);\n\n        NGSecurityFilter filter = findAndVerifySecurityFilter(context, component);\n        showLegalDisclaimer(context, filter);\n    }", "public void login(String userName, String password, String projectName, String redirectUri) throws IOException {\n\n        login(userName, password, projectName);\n        if (m_loginException == null) {\n            if (redirectUri != null) {\n                getResponse().sendRedirect(\n                    OpenCms.getLinkManager().substituteLink(getCmsObject(), redirectUri, null, true));\n            } else {\n                getResponse().sendRedirect(getFormLink());\n            }\n        }\n    }", "public String decrypt(String text, PrivateKey key) throws MangooEncryptionException {\n        Objects.requireNonNull(text, Required.ENCRYPTED_TEXT.toString());\n        Objects.requireNonNull(text, Required.PRIVATE_KEY.toString());\n        \n        String decrypt = null;\n        try {\n            byte[] dectyptedText = decrypt(decodeBase64(text), key);\n            decrypt = new String(dectyptedText, StandardCharsets.UTF_8);\n        } catch (MangooEncryptionException e) {\n            throw new MangooEncryptionException(\"Failed to decrypt encrypted text with private key\", e);\n        }\n\n        return decrypt;\n    }", "public void marshall(Scte27SourceSettings scte27SourceSettings, ProtocolMarshaller protocolMarshaller) {\n\n        if (scte27SourceSettings == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(scte27SourceSettings.getPid(), PID_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "int assign(String webappId){\n  int activityIndex=checkIfAssigned(webappId);\n  if (activityIndex == INVALID_ACTIVITY_INDEX) {\n    activityIndex=mActivityList.get(0).mActivityIndex;\n    ActivityEntry newEntry=new ActivityEntry(activityIndex,webappId);\n    mActivityList.set(0,newEntry);\n  }\n  markActivityUsed(activityIndex,webappId);\n  return activityIndex;\n}\n", "public static void put(JAMonListener jamonListener){\n  map.put(jamonListener.getName(),jamonListener);\n}\n", "private ArchivePath getNestedPath(ArchivePath fullPath, ArchivePath basePath) {\n        final String context = fullPath.get();\n        final String baseContent = basePath.get();\n\n        // Remove the base path from the full path\n        String nestedArchiveContext = context.substring(baseContent.length());\n\n        return new BasicPath(nestedArchiveContext);\n    }", "public boolean isZoomButtonsVisible(){\n  return zoomButtonsVisible;\n}\n", "public static CompletableFuture<Void> delayedFuture(Duration delay, ScheduledExecutorService executorService) {\n        CompletableFuture<Void> result = new CompletableFuture<>();\n        if (delay.toMillis() == 0) {\n            // Zero delay; no need to bother with scheduling a task in the future.\n            result.complete(null);\n        } else {\n            ScheduledFuture<Boolean> sf = executorService.schedule(() -> result.complete(null), delay.toMillis(), TimeUnit.MILLISECONDS);\n            result.whenComplete((r, ex) -> sf.cancel(true));\n        }\n\n        return result;\n    }", "private void writeCyclicReference(int handle) throws IOException {\n  output.writeByte(TC_REFERENCE);\n  output.writeInt(handle);\n}\n", "public static UserList createUserList(String rawJSON) throws TwitterException {\n        try {\n            return new UserListJSONImpl(new JSONObject(rawJSON));\n        } catch (JSONException e) {\n            throw new TwitterException(e);\n        }\n    }", "public int convertStringToIndex(String tempString)\n    {\n        int index = 1;\n        if (tempString.length() == 0)\n            return (short)index;\n        if ((tempString.charAt(0) >= '0') & (tempString.charAt(0) <= '9'))\n            index = tempString.charAt(0) - '0';             // Convert to number; 1 = 1, 2 = 2, etc...\n        if ((tempString.charAt(0) >= 'A') & (tempString.charAt(0) <= 'Z'))\n            index = tempString.charAt(0) - 'A' + 1;         // Convert to number; A = 1, B = 2, etc...\n        if ((tempString.charAt(0) >= 'a') & (tempString.charAt(0) <= 'z'))\n            index = tempString.charAt(0) - 'a' + 1;         // Convert to number; a = 1, b = 2, etc...\n        return index;   // Return the position\n    }", "    public Splitter addSplitEast(Widget widget, double size) {\n\taddEast(widget, size);\n\treturn insertSplitter(null, SPLITTERSIZE);\n    }\n", "\tprotected void removeContext(String url, LocalRepository lr) throws IOException, AccessDeniedException {\n\t\t\n\t\tGraph g = SesameWrapper.performGraphQuery(Repository.MAIN_REPOSITORY.getLocalRepository(), \n\t\t\t\t  QueryLanguage.SERQL,\n\t\t\t\t  RDFQuery.RDFQ_GET_CONTEXT_FOR_REMOVE.toString(url));\n\t\t\n\t\tRepository.MAIN_REPOSITORY.getLocalRepository().removeGraph(g);\n\t\t\n\t\tlr.clear( new LoggerListener());\n\t}\n", "    public void setNormalSize() {\n        JScrollPane scrollPane = getScrollPane();\n        int x = 0;\n        int y = 0;\n        Insets scrollInsets = getScrollPaneInsets();\n\n        if (scrollPane != null) {\n            Dimension d = scrollPane.getVisibleRect().getSize();\n            if (scrollPane.getBorder() != null) {\n               d.setSize(d.getWidth() - scrollInsets.left - scrollInsets.right,\n                         d.getHeight() - scrollInsets.top - scrollInsets.bottom);\n            }\n\n            d.setSize(d.getWidth() - 20, d.getHeight() - 20);\n            desktop.setAllSize(x,y);\n            scrollPane.invalidate();\n            scrollPane.validate();\n        }\n    }\n", "private void moveToFirst() throws IOException {\n  nextHeaderPosition=position;\n  nextHeader=r.readLine();\n  if (nextHeader != null) {\n    position+=nextHeader.length() + endOfLineBytes;\n    String aLine;\n    while ((aLine=r.readLine()) != null) {\n      if (aLine.startsWith(\">\")) {\n        nextNextHeaderPosition=position;\n        nextNextHeader=aLine;\n        position+=aLine.length() + endOfLineBytes;\n        break;\n      }\n else {\n        position+=aLine.length() + endOfLineBytes;\n        parts.add(aLine);\n      }\n    }\n    nextSequence=Basic.concatenateAndRemoveWhiteSpaces(parts);\n    parts.clear();\n  }\n else   close();\n}\n", "   private boolean showDialog(){\n    boolean ok = true;\n    GenericDialog gd = new GenericDialog(\"EllipticFD\");\n    gd.addNumericField(\"Number of descriptors\", (double) nFD, 0);\n    gd.addCheckbox(\"Results table shown?\", true);\n    gd.addCheckbox(\"Reconstruction shown?\", true);\n    gd.showDialog();\n    if (gd.wasCanceled()){return !ok;}\n    nFD = (int) gd.getNextNumber();\n    showResults = gd.getNextBoolean();\n    showReconstruction = gd.getNextBoolean();\n    return ok;\n   }\n", "private int calculateWeight ( ) { int weight = NUM_ ; int characterCount = - NUM_ ; for ( int x = NUM_ ; x < mValue . length ( ) ; x ++ ) { if ( mValue . substring ( x , x + NUM_ ) . equals ( WILDCARD ) ) { weight += ( int ) ( Math . pow ( NUM_ , mValue . length ( ) - x - NUM_ ) ) ; characterCount ++ ; } } weight += ( int ) ( Math . pow ( NUM_ , characterCount ) ) * NUM_ ; return weight ; }", "public void removeAll(Transaction tran) throws MessageStoreException\n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(tc, \"removeAll\", tran);\n\n    // 181632.1\n    // We need to remove Item, ItemStreams and ReferenceStreams in three\n    // different passes.  Phill ensures me this is not too expensive.\n    Item item = null;\n    SIMPItemStream itemStream = null;\n    SIMPReferenceStream referenceStream = null;\n\n    while (null != (item = findFirstMatchingItem(null)))\n    {\n      item.remove(tran, NO_LOCK_ID);\n    }\n\n    while (null != (itemStream\n      = (SIMPItemStream)findFirstMatchingItemStream(null)))\n    {\n      itemStream.removeAll(tran);\n    }\n\n    while (null != (referenceStream\n      = (SIMPReferenceStream)findFirstMatchingReferenceStream(null)))\n    {\n      referenceStream.removeAll(tran);\n    }\n\n    removeItemStream(tran, NO_LOCK_ID);\n\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.exit(tc, \"removeAllItems\");\n  }", "public Class defineClass() {\n        byte[] bytes;\n        try {\n            ByteArrayOutputStream bout = new ByteArrayOutputStream();\n            writeTo(bout);\n            bytes = bout.toByteArray();\n        } catch (IOException e) {\n            InternalError ie = new InternalError(e.toString());\n            ie.initCause(e);\n            throw ie;\n        }\n\n        if (DEBUG) {\n            File file = new File(getClassName().replace('.', '/') + \".class\");\n            try {\n                File tempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n                file = new File(tempDir, file.getPath());\n            } catch (SecurityException e) {\n            }\n            try {\n                file.getParentFile().mkdirs();\n                System.out.println(\"RuntimeClassFile writing to \" + file);\n                OutputStream out = new FileOutputStream(file);\n                out.write(bytes);\n                out.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        return mLoader.define(getClassName(), bytes);\n    }", "protected void evaluate(String filePath) throws FormatException {\n  try {\n    int latSlash=filePath.lastIndexOf(\"/\");\n    if (latSlash > 1) {\n      if (DEBUG) {\n        Debug.output(\"Have lat index of \" + latSlash);\n      }\n      String lonSearch=filePath.substring(0,latSlash);\n      if (DEBUG) {\n        Debug.output(\"Searching for lon index in \" + lonSearch);\n      }\n      int lonSlash=lonSearch.lastIndexOf(\"/\");\n      if (lonSlash > 1) {\n        filename=filePath.substring(latSlash + 1);\n        String latString=filename.toUpperCase();\n        if (DEBUG) {\n          Debug.output(\"have lat \" + latString);\n        }\n        int dotIndex=latString.indexOf(\".\");\n        if (dotIndex > 0) {\n          lat=Double.parseDouble(latString.substring(1,dotIndex));\n          if (latString.charAt(0) == 'S') {\n            lat*=-1;\n          }\n          subDirs=filePath.substring(lonSlash + 1,latSlash);\n          String dd=filePath.substring(0,lonSlash + 1);\n          if (dd.length() > 0) {\n            dtedDir=dd;\n          }\n          String lonString=subDirs.toUpperCase();\n          if (DEBUG) {\n            Debug.output(\"have lon \" + lonString);\n          }\n          lon=Double.parseDouble(lonString.substring(1));\n          if (lonString.charAt(0) == 'W') {\n            lon*=-1;\n          }\n          level=(int)Integer.parseInt(filePath.substring(filePath.length() - 1));\n          if (DEBUG) {\n            Debug.output(\"have level \" + level);\n          }\n          return;\n        }\n      }\n    }\n  }\n catch (  NumberFormatException nfe) {\n  }\n  throw new FormatException(\"StandardDTEDNameTranslator couldn't convert \" + filePath + \" to valid parameters\");\n}\n", "public UnknownTransactionException ( String desc ) { super ( desc ) ; }", "  public int queryAutoFetchHash() {\n    // this number is unique for a given bean type\n    // which is all that is required\n    return LdIdExpression.class.getName().hashCode();\n  }\n", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "public synchronized AuthStorage getStorage(){\n        if(storage==null){\n            String cls = Objects.get(config,\"storageClass\",LogStorage.class.getName());\n            try{\n                storage = (AuthStorage)Class.forName(cls).newInstance();\n            }catch (Exception e){\n                throw S1SystemError.wrap(e);\n            }\n        }\n        return storage;\n    }", "public Entry ( final ExchangeRate rate , final Date start , final Date end ) { this . rate = ( rate ) ; this . startDate = ( start ) ; this . endDate = ( end ) ; }", "default void forEachRemaining(LongConsumer action){\n  Objects.requireNonNull(action);\n  while (hasNext())   action.accept(nextLong());\n}\n", "public IoBuffer decodeFully(IoBuffer in) {\n        int contentLength = ctx.getContentLength();\n        IoBuffer decodedBuffer = ctx.getDecodedBuffer();\n\n        int oldLimit = in.limit();\n\n        // Retrieve fixed length content\n        if (contentLength", "\tpublic IMSSBamBLServiceTypeEditObj newEditInstance( IMSSBamBLServiceTypeObj orig ) {\n\t\tfinal String S_ProcName=\"MSSBamServiceTypeObj.newEditInstance() \";\n\t\tthrow new RuntimeException( S_ProcName + \"Implementation must be overridden\" );\n\t}\n", "\tpublic void debug( String code, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5 ) {\n\t    if ( isDebugEnabled() ) {\n\t\tObject[] args = { arg0, arg1, arg2, arg3, arg4, arg5 };\n\t\tdebug( code, args );\n\t    }\n\t}\n", "public static int [ ] discretiseMaxEntropy ( double data [ ] , int numBins ) { int [ ] newData = new int [ data . length ] ; double [ ] tempData = new double [ data . length ] ; System . arraycopy ( data , NUM_ , tempData , NUM_ , data . length ) ; Arrays", "public IDClass update(Object object) {\n\t\tSession session = getCurrentSession();\n\t\tsession.update(object);\n\t\treturn toIDClass(session.getIdentifier(object));\n\t}", "protected void handleSuccess ( T reply ) { }", "private CGlobalSettings ( ) { }", "\tpublic int compareTo(ClassFolder folder) {\n\t\treturn getFilesystemPath().compareToIgnoreCase(folder.getFilesystemPath());\n\t}\n", "public void box ( final Type type ) { if ( type . getSort ( ) == Type . OBJECT || type . getSort ( ) == Type . ARRAY ) { return ; } if ( type == Type . VOID_TYPE ) { push ( ( String ) null ) ; } else { Type boxed = getBoxedType ( type ) ; newInstance ( boxed ) ; if ( type . getSize ( ) == NUM_ ) { dupX2 ( ) ; dupX2 ( ) ; pop ( ) ; } else { dupX1 ( ) ; swap ( ) ; } invokeConstructor ( boxed , new Method ( STR_ , Type . VOID_TYPE , new Type [ ] { type } ) ) ; } }", "  public int getHorses() {\n    ItemType horsesIT = data.rules.getItemType(EresseaConstants.I_RHORSES);\n    if (horsesIT != null) {\n      RegionResource horseRR = getResource(horsesIT);\n      if (horseRR != null)\n        return horseRR.getAmount();\n    }\n    return horses;\n  }\n", "@Override\n    public DescribeChannelResult describeChannel(DescribeChannelRequest request) {\n        request = beforeClientExecution(request);\n        return executeDescribeChannel(request);\n    }", "public void testEquals ( ) throws Exception { XorOnlyAttribute xor2 = new XorOnlyAttribute ( ) ; assertEquals ( STR_ , xorOnly , xor2 ) ; MappedAddressAttribute maatt = new MappedAddressAttribute ( ) ; maatt . decodeAttributeBody ( msgFixture . mappedAddress , ( char ) NUM_ , ( char ) msgFixture . mappedAddress . length ) ; assertFalse ( STR_ , xorOnly . equals ( maatt ) ) ; assertFalse ( STR_ , xorOnly . equals ( null ) ) ; }", "public static boolean deleteRecursive(File fileOrDirectory){\n  if (fileOrDirectory.isDirectory()) {\n    File[] list=fileOrDirectory.listFiles();\n    if (list == null) {\n      return false;\n    }\n    for (    File f : list) {\n      if (!deleteRecursive(f))", "protected void processPrepareResponse(final GenericResponse genericResponse) throws SQLException {\n  parseStatementInfo(genericResponse.getData());\n  switchState(StatementState.PREPARED);\n}\n", "public SQLQuery(Class<T> type,String sqlExpression,Object... parameters){\n  this(sqlExpression,type.getName(),null,DEFAULT_QUERY_RESULT_TYPE,parameters);\n}\n", "        private RBTreeNode successor(RBTreeNode t) {\n                if (t == null)\n                        return null;\n                else if (t.right != null) {\n                        RBTreeNode p = t.right;\n                        while (p.left != null)\n                                p = p.left;\n                        return p;\n                } else {\n                        RBTreeNode p = t.parent;\n                        RBTreeNode ch = t;\n                        while (p != null && ch == p.right) {\n                                ch = p;\n                                p = p.parent;\n                        }\n                        return p;\n                }\n        }\n", "public static SparseGradient createConstant(final double value){\n  return new SparseGradient(value,Collections.<Integer,Double>emptyMap());\n}", "public void resetStats(){\n  if (lock.tryLock()) {\n    try {\n      ensureInitialized();\n      updateStats();\n    }\n  finally {\n      lock.unlock();\n    }\n  }\n}\n", "public abstract Array grid ( double t ) ;", "\tpublic void show(String cardName) {\n\t\tmodel.selectedCard().set(cardName);\n\t}\n", "public void clear(){\nsynchronized (mLock) {\n    mGraphics.clear();\n  }\n  postInvalidate();\n}\n", "    public void putVariable(String name, VarRefer value, boolean isConst) {\n        Log.out(\"putVariable name = \" + name, Log.DEBUG);\n        if (name == null || value == null) {\n            Log.err(tr(\"NullPointer in putVariable\"), Log.ERROR);\n        }\n        BetRefer bf;\n        bf = new BetRefer();\n        bf.setConst(isConst);\n        bf.setType(value.valType);\n        bf.setValue(value);\n        bf.updateValue();\n        if (idList.contains(name)) {\n            Log.war(tr(\"duplicate_adding_variable\") + \" name = \" + name\n                    + \" value = \" + value.value, Log.WARNING);\n        } else {\n            idList.add(name);\n        }\n        varList.put(name, bf);\n    }\n", "@Override\n    public ResourceSet<AuthorizedConnectApp> read(final TwilioRestClient client) {\n        return new ResourceSet<>(this, client, firstPage(client));\n    }", "boolean isAccessorReadable ( ) ;", "private Map<String, Expression> getMixinParams( CssFormatter formatter, List<Expression> paramValues ) {\n        if( (params == null && paramValues == null) || (paramValues == null && params.size() == 0) || (params == null && paramValues.size() == 0) ) {\n            return null;\n        }\n        if( params == null && paramValues != null ) {\n            return NO_MATCH;\n        }\n        if( paramValues == null ) {\n            paramValues = Collections.emptyList();\n        }\n        if( params.size() < paramValues.size() && varArg == null ) {\n            return NO_MATCH;\n        }\n\n        try {\n            Map<String, Expression> vars = new LinkedHashMap<>();\n            // Set the parameters with default values first\n            int paramsCount = params.size();\n            for( int i = 0; i < paramsCount; i++ ) {\n                Expression param = params.get( i );\n                Class<?> paramType = param.getClass();\n                if( paramType ==  Operation.class && ((Operation)param).getOperator() == ':' && ((Operation)param).getOperands().size() == 2 ) {\n                    ArrayList<Expression> keyValue = ((Operation)param).getOperands();\n                    String name = keyValue.get( 0 ).toString();\n                    vars.put( name, ValueExpression.eval( formatter, keyValue.get( 1 ) ) );\n                }\n            }\n\n            // Set the calling values as parameters\n            paramsCount = Math.min( paramsCount, paramValues.size() );\n            for( int i = 0; i < paramsCount; i++ ) {\n                Expression value = paramValues.get( i );\n                Class<?> valueType = value.getClass();\n                // First check if it is a named parameter\n                if( valueType == Operation.class && ((Operation)value).getOperator() == ':' && ((Operation)value).getOperands().size() == 2 ) {\n                    ArrayList<Expression> keyValue = ((Operation)value).getOperands();\n                    vars.put( keyValue.get( 0 ).toString(), ValueExpression.eval( formatter, keyValue.get( 1 ) ) );\n                } else {\n                    Expression param = params.get( i );\n                    Class<?> paramType = param.getClass();\n                    if( paramType == VariableExpression.class ) {\n                        vars.put( param.toString(), ValueExpression.eval( formatter, value ) );\n                    } else if( paramType ==  Operation.class && ((Operation)param).getOperator() == ':' && ((Operation)param).getOperands().size() == 2 ) {\n                        ArrayList<Expression> keyValue = ((Operation)param).getOperands();\n                        vars.put( keyValue.get( 0 ).toString(), ValueExpression.eval( formatter, value ) );\n                    } else if( paramType ==  ValueExpression.class ) {\n                        //pseudo guard, mixin with static parameter\n                        final Operation op = new Operation( param, param, '=' );\n                        op.addOperand( value );\n                        if( !op.booleanValue( formatter ) ) {\n                            return NO_MATCH;\n                        }\n                        vars.put( \" \" + i, value );\n                    } else {\n                        throw createException( \"Wrong formatted parameters: \" + params );\n                    }\n                }\n            }\n\n            if( varArg != null ) {\n                Operation value = new Operation( varArg );\n                for( int i = params.size(); i < paramValues.size(); i++ ) {\n                    value.addOperand( ValueExpression.eval( formatter, paramValues.get( i ) ) );\n                }\n                if( vars.size() == params.size() ) {\n                    vars.put( varArg.toString(), value );\n                    return vars;\n                }\n                return NO_MATCH;\n            }\n            if( vars.size() == params.size() ) {\n                return vars;\n            }\n            return NO_MATCH;\n        } catch( LessException ex ) {\n            ex.addPosition( filename, line, column );\n            throw ex;\n        }\n    }", "    public GrClaseAsociacionLnk getAssociationClassLink() {\n\tfinal Iterator<GraphElement> i = modelo.getContained().iterator();\n\twhile (i.hasNext()) {\n\t    GraphElement ge = i.next();\n\t    if (ge instanceof GraphEdge) {\n\t\tGraphEdge gEdge = (GraphEdge) ge;\n\t\tMap props = ElementoVisualUtil.getPropiedades(gEdge);\n\t\tString edgeType = (String) props\n\t\t\t.get(Constantes.MODEL_EDGE_TYPE);\n\t\tif (GrClaseAsociacionLnk.class.getName().equals(edgeType)) {\n\t\t    ElementoVisual vge = graficador.getElementoVisual(gEdge);\n\t\t    if (vge instanceof GrClaseAsociacionLnk)\n\t\t\treturn (GrClaseAsociacionLnk) vge;\n\t\t}\n\t    }\n\t}\n\treturn null;\n    }\n", "void disableAll(){\n  offerButton.setEnabled(false);\n  acceptButton.setEnabled(false);\n  cancelButton.setEnabled(false);\n  setUserStatus(TradeState.NO_ACTIVE_TRADE);\n  setPartnerStatus(TradeState.NO_ACTIVE_TRADE);\n}\n", "public boolean isMethod ( ) { return memberNode == null ? BOOL_ : memberNode instanceof MethodNode ; }", "public static Action decreaseFontSizeAction ( JTextPane textPane ) { return changeFontSizeAction ( textPane , STR_ , DECREASE_FONT_SIZE , - NUM_ ) ; }", "public static long currentTimeSeconds ( System self ) { return System . currentTimeMillis ( ) / NUM_ ; }", "public static void setLogging(boolean logging) {\n        if (logging) {\n            logger.setLevel(debugging ? Level.FINE : Level.INFO);\n        } else {\n            logger.setLevel(Level.OFF);\n        }\n    }", "private void synchronizeDebuggers ( final IDebugger oldDebugger , final IDebugger newDebugger ) { if ( oldDebugger != null ) { oldDebugger . getProcessManager ( ) . removeListener ( m_processListener ) ; final TargetProcessThread activeThread = oldDebugge", "private void write ( int integer , int width ) throws JSONException { try { this . bitwriter . write ( integer , width ) ; if ( probe ) { log ( integer , width ) ; } } catch ( Throwable e ) { throw new JSONException ( e ) ; } }", "public BigDecimal getNumber(String attrName) {\n        Object val = attributes.get(attrName);\n        return toBigDecimal(val);\n    }", "protected String quoteStringLiteral(String value){\n  StringWriter sw=new StringWriter();\n  try (JsonWriter writer=new JsonWriter(sw)){\n    writer.setLenient(true);\n    writer.value(value);\n    writer.flush();\n  }\n catch (  IOException ex) {\n    throw new RuntimeException(\"Unexpected I/O failure: \" + ex.getLocalizedMessage(),ex);\n  }\n  return sw.toString();\n}\n", "public String tableName ( ) { return tblName ; }", "private void finishRunningTask(TaskStatus finalStatus, long now) {\n    TaskAttemptID taskId = finalStatus.getTaskID();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Finishing running task id=\" + taskId + \", now=\" + now);\n    }\n\n    SimulatorTaskInProgress tip = tasks.get(taskId);\n    if (tip == null) {\n      throw new IllegalArgumentException(\"Unknown task attempt \" + taskId\n          + \" completed\");\n    }\n    TaskStatus currentStatus = tip.getTaskStatus();\n    if (currentStatus.getRunState() != State.RUNNING) {\n      throw new IllegalArgumentException(\n          \"Task attempt to finish is not running: \" + tip);\n    }\n\n    // Check that finalStatus describes a task attempt that has just been\n    // completed\n    State finalRunState = finalStatus.getRunState();\n    if (finalRunState != State.SUCCEEDED && finalRunState != State.FAILED\n        && finalRunState != State.KILLED) {\n      throw new IllegalArgumentException(\n          \"Final run state for completed task can't be : \" + finalRunState\n              + \" \" + tip);\n    }\n\n    if (now != finalStatus.getFinishTime()) {\n      throw new IllegalArgumentException(\n          \"Current time does not match task finish time: now=\" + now\n              + \", finish=\" + finalStatus.getFinishTime());\n    }\n\n    if (currentStatus.getIsMap() != finalStatus.getIsMap()\n        || currentStatus.getNumSlots() != finalStatus.getNumSlots()\n        || currentStatus.getPhase() != finalStatus.getPhase()\n        || currentStatus.getStartTime() != finalStatus.getStartTime()) {\n      throw new IllegalArgumentException(\n          \"Current status does not match final status\");\n    }\n\n    // We can't assert getShuffleFinishTime() and getSortFinishTime() for\n    // reduces as those were unknown when the task attempt completion event\n    // was created. We have not called setMapFinishTime() for maps either.\n    // If we were really thorough we could update the progress of the task\n    // and check if it is consistent with finalStatus.\n\n    // If we've got this far it is safe to update the task status\n    currentStatus.setRunState(finalStatus.getRunState());\n    currentStatus.setFinishTime(finalStatus.getFinishTime());\n    currentStatus.setProgress(finalStatus.getProgress());\n\n    // and update the free slots\n    int numSlots = currentStatus.getNumSlots();\n    if (tip.isMapTask()) {\n      usedMapSlots -= numSlots;\n      if (usedMapSlots < 0) {\n        throw new IllegalStateException(\n            \"TaskTracker reaches negative map slots: \" + usedMapSlots);\n      }\n    } else {\n      usedReduceSlots -= numSlots;\n      if (usedReduceSlots < 0) {\n        throw new IllegalStateException(\n            \"TaskTracker reaches negative reduce slots: \" + usedReduceSlots);\n      }\n    }\n  }", "\tprotected void copy(final AbstractSet other){\n\t\tthis.min = other.min;\n\t\tthis.max = other.max;\n\t\tthis.map = other.map == null ? null : (OpenBitSet)other.map.clone(); \n\t}\n", "\tpublic void removeFileTypeHandler(FileTypeHandler fileTypeHandler) {\n\t\tString[] extensions = fileTypeHandler.getExtensions();\n\t\tfor (String extension : extensions) {\n\t\t\tif (fileTypeHandlerMap.get(extension) == null) {\n\t\t\t\tLogger.getLogger(ServerUtils.class.getName()).log(Level.SEVERE, \"missing removed SymLoaderFactory for extension {0}!!!\", new Object[]{extension});\n\t\t\t}\n\t\t\tfileTypeHandlerMap.remove(extension);\n\t\t}\n\t}\n", "public static String getSerializedVectorClock(VectorClock vc) {\n        VectorClockWrapper vcWrapper = new VectorClockWrapper(vc);\n        String serializedVC = \"\";\n        try {\n            serializedVC = mapper.writeValueAsString(vcWrapper);\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n        return serializedVC;\n    }", "@Override\n    public void end(final Xid _xid,\n                    final int _flags)\n    {\n        AbstractResource.LOG.trace(\"end resource {}, flags {}\" + _flags, _xid, _flags);\n    }", "public Criteria all(Collection<?> c) {\n        notNull(c, \"collection can not be null\");\n        this.criteriaType = RelationalOperator.ALL;\n        this.right = new ValueListNode(c);\n        return this;\n    }", "public static boolean checkCompatibility(final String v1,final String v2){\n  final String ev1=cut(v1,2);\n  final String ev2=cut(v2,2);\n  final boolean res=ev1.equals(ev2);\n  return res;\n}\n", "  public void describeGet(MethodInfo info, String path) {\n    this.addStandardGetRequestInfo(info);\n    this.addStandardResponseInfo(info);\n    if (path.endsWith(\"{pluginId}\")) {\n      info.setDocumentation(\"GET \" + path + \": Method to retrieve a specified filter attached to an application\");\n      ParameterInfo pic = new ParameterInfo(\"pluginId\", true, \"xs:string\", ParameterStyle.TEMPLATE,\n          \"Identifier of the filter\");\n      info.getRequest().getParameters().add(pic);\n    }\n    else {\n      info.setDocumentation(\"GET \" + path + \": Method to retrieve all filter for an application\");\n    }\n\n  }\n", "public void overrideCubeProperties(DockerCompositions overrideDockerCompositions) {\n        final Set<String> containerIds = overrideDockerCompositions.getContainerIds();\n        for (String containerId : containerIds) {\n\n            // main definition of containers contains a container that must be overrode\n            if (containers.containsKey(containerId)) {\n                final CubeContainer cubeContainer = containers.get(containerId);\n                final CubeContainer overrideCubeContainer = overrideDockerCompositions.get(containerId);\n\n                cubeContainer.setRemoveVolumes(overrideCubeContainer.getRemoveVolumes());\n                \n                cubeContainer.setAlwaysPull(overrideCubeContainer.getAlwaysPull());\n\n                if (overrideCubeContainer.hasAwait()) {\n                    cubeContainer.setAwait(overrideCubeContainer.getAwait());\n                }\n\n                if (overrideCubeContainer.hasBeforeStop()) {\n                    cubeContainer.setBeforeStop(overrideCubeContainer.getBeforeStop());\n                }\n\n                if (overrideCubeContainer.isManual()) {\n                    cubeContainer.setManual(overrideCubeContainer.isManual());\n                }\n\n                if (overrideCubeContainer.isKillContainer()) {\n                    cubeContainer.setKillContainer(overrideCubeContainer.isKillContainer());\n                }\n            } else {\n                logger.warning(String.format(\"Overriding Container %s are not defined in main definition of containers.\",\n                    containerId));\n            }\n        }\n    }", "public boolean existsPage ( int pageID ) { if ( pageID < NUM_ ) { return BOOL_ ; } Session session = this . __getHibernateSession ( ) ; session . beginTransaction ( ) ; List returnList = session . createNativeQuery ( STR_ ) . setParameter ( STR_ , pageID ", "\tpublic void setVariable(String name, String value) {\n\t\t// Handle things in a case insensitive manner...\n\t\tString caseSpecificName = (String) nameMap.get(name.toUpperCase());\n\t\tif (caseSpecificName == null) {\n\t\t\tcaseSpecificName = name;\n\t\t\tnameMap.put(caseSpecificName, caseSpecificName);\n\t\t}\n\t\t\n\t\tvariables.setProperty(caseSpecificName, value);\n\t}\n", "public final static void changeMonomerNotation(int position, PolymerNotation polymer, MonomerNotation not) {\r\n\t\tpolymer.getPolymerElements().getListOfElements().set(position, not);\r\n\t}", "public static String formatURL(String url){\n  if (!Strings.isNullOrEmpty(url)) {\n    try {\n      URI uri=URI.create(url);\n      if (uri.isAbsolute()) {\n        return url;\n      }\n else {\n        return \"http://\" + url;\n      }\n    }\n catch (    IllegalArgumentException e) {\n      return null;\n    }\n  }\n else {\n    return null;\n  }\n}\n", "public void sortXml() {\n        newDocument = (Document) originalDocument.clone();\n        final Element rootElement = (Element) originalDocument.getRootElement().clone();\n\n        HierarchyRootWrapper rootWrapper = factory.createFromRootElement(rootElement);\n\n        rootWrapper.createWrappedStructure(factory);\n        rootWrapper.detachStructure();\n        rootWrapper.sortStructureAttributes();\n        rootWrapper.sortStructureElements();\n        rootWrapper.connectXmlStructure();\n\n        newDocument.setRootElement(rootWrapper.getElementContent().getContent());\n    }", "private String convertListOfForecastToString ( JSONObject jsonObject , String language , String units , boolean addDate ) { String responseToUser = STR_ ; for ( int i = NUM_ ; i < jsonObject . getJSONArray ( STR_ ) . length ( ) ; i ++ ) { JSONObject internalJSON = jsonObject . getJSONArray ( STR_ ) . getJSONObject ( i ) ; responseToUser += convertInternalInformationToString ( internalJSON , language , units , addDate ) ; } return responseToUser ; }", "public void addName(String name,Object pageKey,String usageDescription){\n  Hashtable pageNames=(Hashtable)pageStorage.get(pageKey);\n  if (pageNames == null) {\n    pageNames=new Hashtable();\n    pageStorage.put(pageKey,pageNames);\n  }\n  pageNames.put(name,usageDescription);\n}\n", "\tpublic int bodvar(int[]body, byte[]item, int[]dim, double[]values) throws Exception {\n\t\treturn(perror(jspice_bodvar(body, item, dim, values)));\n\t}\n", "    public DataStore addPlugin(String id) {\n        DataStore  pluginStore = createStore(id);\n\n        this.stores.put(id, pluginStore);\n        return pluginStore;\n    }\n", "public void mark(long n){\n  tickIfNecessary();\n  count.add(n);\n  m5Rate.update(n);\n}\n", "private void resize(int N){\n  Key[] array=(Key[])new Comparable[N];\n  for (int i=0; i < Math.min(keys.length,array.length); i++) {\n    array[i]=keys[i];\n    keys[i]=null;\n  }\n  keys=array;\n}\n", "public double computeAverageLocal ( int states [ ] [ ] , int col ) ;", "static Throwable loadLibrary(){\n  try {\n    File nativeLibFile=findNativeLibrary();\n    if (nativeLibFile != null) {\n      System.load(nativeLibFile.getAbsolutePath());\n    }\n else {\n      System.loadLibrary(\"commons-crypto\");\n    }\n    return null;\n  }\n catch (  Exception t) {\n    return t;\n  }\ncatch (  UnsatisfiedLinkError t) {\n    return t;\n  }\n}\n", "protected void createBuffers(int numBuffers,BufferCapabilities caps) throws AWTException {\n  if (numBuffers < 2) {\n    throw new IllegalArgumentException(\"Number of buffers cannot be less than two\");\n  }\n else   if (peer == null) {\n    throw new IllegalStateException(\"Component must have a valid peer\");\n  }\n else   if (caps == null || !caps.isPageFlipping()) {\n    throw new IllegalArgumentException(\"Page flipping capabilities must be specified\");\n  }\n  width=getWidth();\n  height=getHeight();\n  if (drawBuffer != null) {\n    drawBuffer=null;\n    drawVBuffer=null;\n    destroyBuffers();\n  }\n  if (caps instanceof ExtendedBufferCapabilities) {\n    ExtendedBufferCapabilities ebc=(ExtendedBufferCapabilities)caps;\n    if (ebc.getVSync() == VSYNC_ON) {\n      if (!VSyncedBSManager.vsyncAllowed(this)) {\n        caps=ebc.derive(VSYNC_DEFAULT);\n      }\n    }\n  }\n  peer.createBuffers(numBuffers,caps);\n  updateInternalBuffers();\n}\n", "public VpnSiteInner createOrUpdate(String resourceGroupName, String vpnSiteName, VpnSiteInner vpnSiteParameters) {\n        return createOrUpdateWithServiceResponseAsync(resourceGroupName, vpnSiteName, vpnSiteParameters).toBlocking().last().body();\n    }", "public static boolean checkAlarmService(Context context,PendingIntent servicePendingIntent){\n  final Intent i=new Intent(context,GithubWidgetService.class);\n  return PendingIntent.getService(context,0,i,PendingIntent.FLAG_NO_CREATE) != null;\n}\n", "@Override public QueryResponseWrapper query(ParsedQuery query) throws IndexParseException {\n  ResultSet results=session.execute(generateQueryStatement(query,-1));\n  ArrayList<Document> toReturn=new ArrayList<>();\n  Iterator<Row> ite=results.iterator();\n  while (ite.hasNext()) {\n    Row row=ite.next();\n    toReturn.add(DocumentPersistanceUtils.marshalRow(row));\n  }\n  return new QueryResponseWrapper(toReturn,0l);\n}\n", "public boolean fireRow(){\n  return (constraints != null && constraints.size() > 0) || (triggers != null && triggers.size() > 0);\n}\n", "private static void addMimeToCompressedWithExtension(String extension) {\n        String mime = EXTENSIONS.get(extension);\n        if (mime != null && !COMPRESSED_MIME.contains(mime)) {\n            COMPRESSED_MIME.add(mime);\n        }\n    }", "public static Builder forAuth(final String auth) {\n    // split with limit=2 to catch case where password contains a colon\n    final String[] authParams = Base64.decodeAsString(auth).split(\":\", 2);\n\n    if (authParams.length != 2) {\n      return builder();\n    }\n\n    return builder()\n        .username(authParams[0].trim())\n        .password(authParams[1].trim());\n  }", "private void optimizeTasksLocked(){\n  ArrayList<ActivityManager.RecentTaskInfo> recentTask=new ArrayList<>(mAM.getRecentTasks(Integer.MAX_VALUE,ActivityManager.RECENT_WITH_EXCLUDED | ActivityManager.RECENT_IGNORE_UNAVAILABLE));\n  int N=mHistory.size();\n  ", "public T remove() {\n        lock.lock();\n\n        try {\n            if(queue.isEmpty())\n                return null;\n            El<T> el=queue.poll();\n            count-=el.size;\n            not_full.signalAll();\n            return el.el;\n        }\n        finally {\n            lock.unlock();\n        }\n    }", "public CActionDelete ( final JFrame parent , final ITraceListProvider traceListProvider , final int [ ] traces ) { super ( STR_ ) ; m_parent = Preconditions . checkNotNull ( parent , STR_ ) ; m_traceListProvider = Preconditions . checkNotNull ( traceListProvider , STR_ ) ; m_traces = Preconditions . checkNotNull ( traces , STR_ ) ; }", "private String prepareIPSUri(String action, Context context) throws FMSException {\n\t\tStringBuilder uri = new StringBuilder();\n\t\turi.append(Config.getProperty(Config.BASE_URL_PLATFORMSERVICE)).append(\"/\").append(context.getAppDBID())\n\t\t\t.append(\"?act=\").append(action).append(\"&token=\").append(context.getAppToken());\n\t\treturn uri.toString();\n\t}", "public void recountRecords()\n    {\n        try   {\n            Object bookmark = null;\n            if (m_bRestoreCurrentRecord)\n                if (m_recordSub.getEditMode() == DBConstants.EDIT_CURRENT)\n                    bookmark = m_recordSub.getHandle(DBConstants.BOOKMARK_HANDLE);\n            m_recordSub.close();\n            while (m_recordSub.hasNext())\n            {   // Recount each sub-record\n                m_recordSub.next();\n            }\n            if (bookmark != null)\n                m_recordSub.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);\n        } catch (DBException ex)    {\n            ex.printStackTrace();\n        }\n    }", "public static boolean equals(long[] field1,long[] field2){\n  if (field1 == null || field1.length == 0) {\n    return field2 == null || field2.length == 0;\n  }\n else {\n    return Arrays.equals(field1,field2);\n  }\n}\n", "private void prePaintDirtyRegions(){\n  Map<Component,Rectangle> dirtyComponents;\n  java.util.List<Runnable> runnableList;\nsynchronized (this) {\n    dirtyComponents=this.dirtyComponents;\n    runnableList=this.runnableList;\n    this.runnableList=null;\n  }\n  if (runnableList != null) {\n    for (    Runnable runnable : runnableList) {\n      runnable.run();\n    }\n  }\n  paintDirtyRegions();\n  if (dirtyComponents.size() > 0) {\n    paintDirtyRegions(dirtyComponents);\n  }\n}\n", "public final boolean tryRelease()\n    throws LockFile.FileSecurityException, LockFile.UnexpectedFileIOException {\n\n        boolean released = !locked;\n\n        if (released) {\n            return true;\n        }\n\n        stopHeartbeat();\n        doOptionalReleaseActions();\n\n        UnexpectedFileIOException closeRAFReason = null;\n        FileSecurityException     securityReason = null;\n\n        try {\n            try {\n                closeRAF();\n            } catch (UnexpectedFileIOException ex) {\n                closeRAFReason = ex;\n            }\n\n            try {\n\n                // Hack Alert:\n                //\n                // Even without the presence of concurrent locking attempts,\n                // the delete or exists invocations below occasionally return\n                // false otherwise, perhaps due to a race condition with the\n                // heartbeat timestamp writer task or some nio file lock release\n                // timing issue?\n                //\n                // TODO:\n                //\n                // determine if this is an external constraint or if we can\n                // solve it instead by waiting for any in-progress\n                // writeHeartbeat operation to conclude.\n                Thread.sleep(100);\n            } catch (Exception ex) {\n\n                // ex.printStackTrace();\n            }\n\n            try {\n                released = file.delete();\n\n                // Perhaps excessive...\n                //\n                // Another Lockfile may recreate the file an instant after it is\n                // deleted above (if it it deleted successfully, that is)\n                // released = !file.exists();\n            } catch (SecurityException ex) {\n                securityReason = new FileSecurityException(this, \"tryRelease\",\n                        ex);\n            }\n        } finally {\n\n            // Regardless of whether all release work succeeds, it is important\n            // to indicate that, from the perspective of this instance, a lock\n            // condition is no longer held.\n            //\n            // However, in a world of concurrent execution, we do not want to\n            // to expose this fact extenally until *after* all release work has\n            // been at least attempted.\n            this.locked = false;\n        }\n\n        if (closeRAFReason != null) {\n            throw closeRAFReason;\n        } else if (securityReason != null) {\n            throw securityReason;\n        }\n\n        return released;\n    }", "\tpublic String getCheckedRadioButton() {\n\t\tString obsTyp = new String(\"\");\n\t\tif (fest.getValue() == true) {\n\t\t\treturn fest.getText();\n\t\t}\n\t\tif (mobil.getValue() == true) {\n\t\t\treturn mobil.getText();\n\t\t}\n\t\tif (ampel.getValue() == true) {\n\t\t\treturn ampel.getText();\n\t\t}\n\t\tif (rad.getValue() == true) {\n\t\t\treturn rad.getText();\n\t\t}\n\t\treturn obsTyp;\n\t}\n", "  public QueryData createSodaQuery(String name, String type) {\n    \n    Element elem = this.document.createElement( Constants.ELEM_QUERY );\n    elem.setAttribute( Constants.ATTR_KIND, Constants.ATTR_KIND_SODA);\n\n    if( name != null ) {\n      elem.setAttribute( Constants.ATTR_NAME, name);\n    }\n    if( type != null ) {\n      elem.setAttribute( Constants.ATTR_TYPE, type);\n    }\n    return new SodaQueryImpl(elem);\n  }\n", "public String[][] getList() throws MtasParserException {\n    String[][] result = new String[(tokenCollection.size() + 1)][];\n    result[0] = new String[] { \"id\", \"start real offset\", \"end real offset\",\n        \"provide real offset\", \"start offset\", \"end offset\", \"provide offset\",\n        \"start position\", \"end position\", \"multiple positions\", \"parent\",\n        \"provide parent\", \"payload\", \"prefix\", \"postfix\" };\n    int number = 1;\n    Iterator<MtasToken> it = this.iterator();\n    while (it.hasNext()) {\n      MtasToken token = it.next();\n      String[] row = new String[15];\n      row[0] = token.getId().toString();\n      if (token.getRealOffsetStart() != null) {\n        row[1] = token.getRealOffsetStart().toString();\n        row[2] = token.getRealOffsetEnd().toString();\n        row[3] = token.getProvideRealOffset() ? \"1\" : null;\n      }\n      if (token.getOffsetStart() != null) {\n        row[4] = token.getOffsetStart().toString();\n        row[5] = token.getOffsetEnd().toString();\n        row[6] = token.getProvideOffset() ? \"1\" : null;\n      }\n      if (token.getPositionLength() != null) {\n        if (token.getPositionStart().equals(token.getPositionEnd())) {\n          row[7] = token.getPositionStart().toString();\n          row[8] = token.getPositionEnd().toString();\n          row[9] = null;\n        } else if ((token.getPositions() == null)\n            || (token.getPositions().length == (1 + token.getPositionEnd()\n                - token.getPositionStart()))) {\n          row[7] = token.getPositionStart().toString();\n          row[8] = token.getPositionEnd().toString();\n          row[9] = null;\n        } else {\n          row[7] = null;\n          row[8] = null;\n          row[9] = Arrays.toString(token.getPositions());\n        }\n      }\n      if (token.getParentId() != null) {\n        row[10] = token.getParentId().toString();\n        row[11] = token.getProvideParentId() ? \"1\" : null;\n      }\n      if (token.getPayload() != null) {\n        BytesRef payload = token.getPayload();\n        row[12] = Float.toString(PayloadHelper.decodeFloat(Arrays.copyOfRange(\n            payload.bytes, payload.offset, (payload.offset + payload.length))));\n      }\n      row[13] = token.getPrefix();\n      row[14] = token.getPostfix();\n      result[number] = row;\n      number++;\n    }\n    return result;\n  }", "\tpublic void setGoodsDesc (java.lang.String goodsDesc) {\n\t\tthis.goodsDesc = goodsDesc;\n\t}\n", "protected void rotate(String fileName) throws IllegalArgumentException, IOException, ExecutionException {\n  requestFinalize(fileName);\n  counts.remove(fileName);\n  streamsCache.invalidate(fileName);\n  MutableInt mi=openPart.get(fileName);\n  LOG.debug(\"Part file rotated {} : {}\",fileName,mi.getValue());\n  String partFileName=getPartFileName(fileName,mi.getValue());\n  rotateHook(partFileName);\n  getRotationState(fileName).rotated=true;\n}\n", "public GVRAnimator animate(int animIndex, float timeInSec)\n    {\n        if ((animIndex < 0) || (animIndex >= mAnimations.size()))\n        {\n            throw new IndexOutOfBoundsException(\"Animation index out of bounds\");\n        }\n        GVRAnimator anim = mAnimations.get(animIndex);\n        anim.animate(timeInSec);\n        return anim;\n    }", "public static Test suite ( ) { return ( new TestSuite ( SelectManyCollectionITCase . class ) ) ; }", "public static void clone(final CGraphWindow parent,final INaviView view,final IViewContainer container){\n  final CloneThread cloneThread=new CloneThread(parent,view,container);\n  CProgressDialog.showEndless(parent,String.format(\"Cloning view '%s'\",view.getName()),cloneThread);\n  if (cloneThread.getException() != null) {\n    CUtilityFunctions.logException(cloneThread.getException());\n    final String innerMessage=\"E00118: \" + \"View could not be cloned\";\n    final String innerDescription=CUtilityFunctions.createDescription(String.format(\"The view '%s' could not be cloned.\",view.getName()),new String[]{\"It is unclear why this problem occurred. Please check the stack trace for more information.\"},new String[]{\"The view was not cloned.\"});\n    NaviErrorDialog.show(parent,innerMessage,innerDescription,cloneThread.getException());\n  }\n}\n", "\t\n\tpublic Element insertOutputTag(Element parent) {\t\t\n\t\treturn insertTag(parent,Declaration.output.toString(),new String[]{},new String[]{});\t\t\n\t}\n", "@Override\n  public boolean stop()\n  {\n    if (! _lifecycle.toStopping())\n      return false;\n\n    log.finest(this + \" stopping\");\n\n    closeConnections();\n\n    destroy();\n\n    return true;\n  }", "@NotNull public static SQFCommandExpression createPrivateDeclFromExisting(@NotNull Project project,@NotNull SQFPrivateDecl decl,@NotNull String... varNames){\n  List<SQFPrivateDeclVar> declVars=decl.getPrivateVars();\n  String text=\"private [\";\n  for (  SQFPrivateDeclVar declVar : declVars) {\n    text+=\"\\\"\" + declVar.getVarName() + \"\\\",\";\n  }\n  for (int i=0; i < varNames.length; i++) {\n    text+=\"\\\"\" + varNames[i] + (i != varNames.length - 1 ? \"\\\",\" : \"\\\"];\");\n  }\n  return (SQFCommandExpression)createElement(project,text,SQFTypes.COMMAND_EXPRESSION);\n}\n", "public boolean markSupported(){\n  return fInputStream.markSupported();\n}", "    protected Rectangle moved(Graphics g, final Rectangle bounds) {\n      return null;\n    }\n", "private int contentMoveDown(int dy,RecyclerView.Recycler recycler){\n  int actualDy=dy;\n  int maxHeightItemIndex=getMaxHeightLayoutPositionInLine(0);\n  View maxHeightItem=getChildAt(maxHeightItemIndex);\n  int offScreenTop=topVisibleEdge() - getDecoratedTop(maxHeightItem);\n  if (offScreenTop > Math.abs(actualDy)) {\n    offsetChildrenVertical(-dy);\n    return dy;\n  }\n  while (getChildAdapterPosition(0) > 0) {\n    addNewLineAtTop(recycler);\n    maxHeightItemIndex=getMaxHeightLayoutPositionInLine(0);\n    maxHeightItem=getChildAt(maxHeightItemIndex);\n    offScreenTop+=getDecoratedMeasuredHeight(maxHeightItem);\n    if (offScreenTop >= Math.abs(dy)) {\n      break;\n    }\n  }\n  if (offScreenTop < Math.abs(dy)) {\n    actualDy=-offScreenTop;\n  }\n  offsetChildrenVertical(-actualDy);\n  while (!lineVisible(getChildCount() - 1)) {\n    recycleLine(getChildCount() - 1,recycler);\n  }\n  firstChildAdapterPosition=getChildAdapterPosition(0);\n  return actualDy;\n}\n", "void editGroupNodeComment ( INaviGroupNode groupNode , Integer commentId , Integer userId , String newComment ) throws CouldntSaveDataException ;", "public void billingAccount_fax_serviceName_PUT(String billingAccount, String serviceName, OvhFax body) throws IOException {\n\t\tString qPath = \"/telephony/{billingAccount}/fax/{serviceName}\";\n\t\tStringBuilder sb = path(qPath, billingAccount, serviceName);\n\t\texec(qPath, \"PUT\", sb.toString(), body);\n\t}", "public void sshKey_keyName_DELETE(String keyName) throws IOException {\n\t\tString qPath = \"/me/sshKey/{keyName}\";\n\t\tStringBuilder sb = path(qPath, keyName);\n\t\texec(qPath, \"DELETE\", sb.toString(), null);\n\t}", "public void delete ( Change . Id id ) throws IOException { new DeleteTask ( id ) . call ( ) ; }", "    public String selectAFormat() {\n        currentFormat = (MutableFormat) this.formatsDataTable.getRowData();\n        return \"success\";\n    }\n", "public final String get(final String key) {\r\n        final Property prop = find(key);\r\n        if (prop == null) {\r\n            return null;\r\n        }\r\n        return prop.getValue();\r\n    }", "    public Tuple toTuple() {\n        return (new Tuple(tPTag));\n    } // of method\n", "    public void insertValue(int index, ConstSFFloat f) {\n        this.insertValue(index, f.getValue());\n    }\n", "public static boolean isLeftMouseButton(MouseEvent anEvent){\n  return (anEvent.getModifiersEx() & InputEvent.BUTTON1_DOWN_MASK) > 0;\n}\n", "    public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {\n        if (\"admin\".equals(portName)) {\n            setadminEndpointAddress(address);\n        }\n        else { // Unknown Port Name\n            throw new javax.xml.rpc.ServiceException(\" Cannot set Endpoint Address for Unknown Port\" + portName);\n        }\n    }\n", "    public void enableTheme(Theme theme, boolean enable) {\n        enabled.put( theme.getName(), enable ? Boolean.TRUE : Boolean.FALSE  );\n    }\n", "  public MeasurementSet plusMeasurement(Measurement measurement) {\n    // verify that this Measurement is compatible with this MeasurementSet\n    if (unitNames != null && !unitNames.equals(measurement.getUnitNames())) {\n      throw new IllegalArgumentException(\"new measurement incompatible with units of measurement \"\n          + \"set. Expected \" + unitNames + \" but got \" + measurement.getUnitNames());\n    }\n\n    List<Measurement> resultMeasurements = new ArrayList<Measurement>(measurements);\n    resultMeasurements.add(measurement);\n    Map<String, Integer> newUnitNames = unitNames == null ? measurement.getUnitNames() : unitNames;\n    return new MeasurementSet(systemOutCharCount, systemErrCharCount,\n        newUnitNames, resultMeasurements);\n  }\n", "    public void put(String oldname, String newname) {\n        if (oldname == newname)\n            return;\n\n        String oldname2 = toJvmName(oldname);\n        String s = (String)get(oldname2);\n        if (s == null || !s.equals(oldname2))\n            super.put(oldname2, toJvmName(newname));\n    }\n", "private void write ( Kim kim , int from , int thru , Huff huff ) throws JSONException { for ( int at = from ; at < thru ; at += NUM_ ) { write ( kim . get ( at ) , huff ) ; } }", "public void addJob(Runnable job){\n  mJobs.add(job);\n}\n", "public void addHeader ( String header , String value ) { clientHeaderMap . put ( header , value ) ; }", "void sanityCheckSourcePathModules(List<String> moduleNames) throws ToolException {\n        if (!haveSourceLocationWithModule)\n            return;\n\n        if (moduleNames.size() > 1) {\n            String text = messager.getText(\"main.cannot_use_sourcepath_for_modules\",\n                    String.join(\", \", moduleNames));\n            throw new ToolException(CMDERR, text);\n        }\n\n        String foundModule = getModuleName(StandardLocation.SOURCE_PATH);\n        if (foundModule == null) {\n            String text = messager.getText(\"main.module_not_found_on_sourcepath\", moduleNames.get(0));\n            throw new ToolException(CMDERR, text);\n        }\n\n        if (!moduleNames.get(0).equals(foundModule)) {\n            String text = messager.getText(\"main.sourcepath_does_not_contain_module\", moduleNames.get(0));\n            throw new ToolException(CMDERR, text);\n        }\n    }", "@Override public boolean equals(Object obj){\n  if (obj == this) {\n    return true;\n  }\n  if (!(obj instanceof XYDifferenceRenderer)) {\n    return false;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  XYDifferenceRenderer that=(XYDifferenceRenderer)obj;\n  if (!PaintUtilities.equal(this.positivePaint,that.positivePaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.negativePaint,that.negativePaint)) {\n    return false;\n  }\n  if (this.shapesVisible != that.shapesVisible) {\n    return false;\n  }\n  if (!ShapeUtilities.equal(this.legendLine,that.legendLine)) {\n    return false;\n  }\n  if (this.roundXCoordinates != that.roundXCoordinates) {\n    return false;\n  }\n  return true;\n}\n", "void removeMembers ( String ... members ) throws RestApiException ;", "    private void setProperties(List<String> properties) {\n        assert properties != null;\n        assert properties.size() >= 1 : \"tried to set empty properties for slot ui \"\n                + uiModel.getSlot();\n\n        this.properties = properties;\n        this.selector.setValues(properties);\n    }\n", "  private EmailMessage getCurrentEmailMessage(HttpServletRequest request) throws ApplicationException{\n    try {\n      List mailList = (List) request.getSession(true).getAttribute(\"sessEmailList\");\n      String mailID = request.getParameter(\"basicSelectedID\");\n      return EmailReceiver.getMailByID(mailList, mailID);\n    } catch (Exception e) {\n       throw new ApplicationException(DmsErrorConstant.MESSAGE_EMAILARCHIVE_FAIL_TO_GET_EMAIL_CONTENT);\n    }\n  }\n", "private String getLinkedAccessToken() {\n        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(mContext);\n        return preferences.getString(mContext.getString(R.string.wings_dropbox__access_token_key), null);\n    }", "public static < T > Predicate < T > and ( final Collection < ? extends Predicate < T > > that ) { if ( that . size ( ) == NUM_ ) { return Iterables . getOnlyElement ( that ) ; } return new AndPredicate < > ( that ) ; }", "public CStoreAction ( final INaviModule module ) { super ( STR_ ) ; m_module = module ; putValue ( Action . SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }", "private static boolean _isValidInYear (@Nonnull final Holiday aHoliday, final int nYear)\n  {\n    return (aHoliday.getValidFrom () == null || aHoliday.getValidFrom ().intValue () <= nYear) &&\n           (aHoliday.getValidTo () == null || aHoliday.getValidTo ().intValue () >= nYear);\n  }", "    public URL loadedFrom() {\n        return null;  //To change body of implemented methods use File | Settings | File Templates.\n    }\n", "public int startCode ( int segment ) { isValidIndex ( segment ) ; return startCode ( this . data , this . segCount , segment ) ; }", "\tpublic void trace() throws IOException {\n\t\tgetServer().sendMsg(traceMsg());\n\t}\n", "void afterUnexport ( boolean force ) throws RemoteException ;", "public void stopAutoFailThread(){\n  if (isAutoFail() && autoFailThread != null && autoFailThread.isAlive()) {\n    isTestSuccess.set(true);\n    if (verbose) {\n      LOG.info(\"Stopping auto fail thread...\");\n    }\n    LOG.info(\"Stopping auto fail thread...\");\n    autoFailThread.interrupt();\n  }\n}\n", "public void cancelAll ( RequestFilter filter ) { synchronized ( mCurrentRequests ) { for ( Request < ? > request : mCurrentRequests ) { if ( filter . apply ( request ) ) { request . cancel ( ) ; } } } }", "public static Test suite ( ) { return ( new TestSuite ( SelectManyCollectionITCase . class ) ) ; }", "public List<List<T>> apply(List<List<T>> selectedCandidates, Random rng)\n    {\n        List<List<T>> output = new ArrayList<List<T>>(selectedCandidates.size());\n        for (List<T> item : selectedCandidates)\n        {\n            output.add(delegate.apply(item, rng));\n        }\n        return output;\n    }", "public abstract void shuffle ( ) ;", "\tpublic boolean isFog() {\n\t\treturn isFog;\n\t}\n", "public short getInternalShort(ColumnInformation columnInfo) throws SQLException {\n    if (lastValueWasNull()) {\n      return 0;\n    }\n    long value = getInternalLong(columnInfo);\n    rangeCheck(Short.class, Short.MIN_VALUE, Short.MAX_VALUE, value, columnInfo);\n    return (short) value;\n  }", "private void addChildren ( Node < ? > node , boolean show ) { int omitIndex = ( ! show || node . getDepth ( ) == NUM_ ) ? - NUM_ : NUM_ ; int i = getChildCount ( ) ; for ( int j = NUM_ ; j < node . getChildCount ( ) ; ++ j ) { if ( omitIndex != j ) { View", "private <Y> void checkObserverMethod(EnhancedAnnotatedMethod<T, Y> annotated) {\n        // Make sure exactly one and only one parameter is annotated with Observes or ObservesAsync\n        List<EnhancedAnnotatedParameter<?, Y>> eventObjects = annotated.getEnhancedParameters(Observes.class);\n        eventObjects.addAll(annotated.getEnhancedParameters(ObservesAsync.class));\n        if (this.reception.equals(Reception.IF_EXISTS) && declaringBean.getScope().equals(Dependent.class)) {\n            throw EventLogger.LOG.invalidScopedConditionalObserver(this, Formats.formatAsStackTraceElement(annotated.getJavaMember()));\n        }\n        if (eventObjects.size() > 1) {\n            throw EventLogger.LOG.multipleEventParameters(this, Formats.formatAsStackTraceElement(annotated.getJavaMember()));\n        }\n        EnhancedAnnotatedParameter<?, Y> eventParameter = eventObjects.iterator().next();\n        checkRequiredTypeAnnotations(eventParameter);\n        // Check for parameters annotated with @Disposes\n        List<?> disposeParams = annotated.getEnhancedParameters(Disposes.class);\n        if (disposeParams.size() > 0) {\n            throw EventLogger.LOG.invalidDisposesParameter(this, Formats.formatAsStackTraceElement(annotated.getJavaMember()));\n        }\n        // Check annotations on the method to make sure this is not a producer\n        // method, initializer method, or destructor method.\n        if (this.observerMethod.getAnnotated().isAnnotationPresent(Produces.class)) {\n            throw EventLogger.LOG.invalidProducer(this, Formats.formatAsStackTraceElement(annotated.getJavaMember()));\n        }\n        if (this.observerMethod.getAnnotated().isAnnotationPresent(Inject.class)) {\n            throw EventLogger.LOG.invalidInitializer(this, Formats.formatAsStackTraceElement(annotated.getJavaMember()));\n        }\n        boolean containerLifecycleObserverMethod = Observers.isContainerLifecycleObserverMethod(this);\n        for (EnhancedAnnotatedParameter<?, ?> parameter : annotated.getEnhancedParameters()) {\n            // if this is an observer method for container lifecycle event, it must not inject anything besides BeanManager\n            if (containerLifecycleObserverMethod && !parameter.isAnnotationPresent(Observes.class) && !parameter.isAnnotationPresent(ObservesAsync.class) && !BeanManager.class.equals(parameter.getBaseType())) {\n                throw EventLogger.LOG.invalidInjectionPoint(this, Formats.formatAsStackTraceElement(annotated.getJavaMember()));\n            }\n        }\n\n    }", "public void addNormalSites(boolean includeRoot, String startFolder) {\n\n        CmsSiteManagerImpl siteManager = OpenCms.getSiteManager();\n        List<CmsSite> sites = siteManager.getAvailableSites(m_cms, true, false, m_cms.getRequestContext().getOuFqn())", "public static String formatCurrency(final Number target, final Locale locale) {\n\n        Validate.notNull(locale, \"Locale cannot be null\");\n\n        if (target == null) {\n            return null;\n        }\n\n        NumberFormat format = NumberFormat.getCu", "public void paint(Graphics g){\n  g.drawImage(splashImage,0,0,this);\n  if (!paintCalled) {\n    paintCalled=true;\nsynchronized (this) {\n      notifyAll();\n    }\n  }\n}\n", "public boolean isValid ( ) { return mCRC [ NUM_ ] == CRC . PASSED || mCRC [ NUM_ ] == CRC . CORRECTED ; }", "@Override\n    public CreateDeliveryStreamResult createDeliveryStream(CreateDeliveryStreamRequest request) {\n        request = beforeClientExecution(request);\n        return executeCreateDeliveryStream(request);\n    }", "\tpublic void addSmartUpdate(Component comp, String attr, String value) {\n\t\tif (!_exec.isAsyncUpdate(comp.getPage()) || _invalidated.contains(comp))\n\t\t\treturn; //nothing to do\n\n\t\tcheckDesktop(comp);\n\n\t\tMap respmap = (Map)_smartUpdated.get(comp);\n\t\tif (respmap == null)\n\t\t\t_smartUpdated.put(comp, respmap = new HashMap());\n\t\trespmap.put(attr, new TimedValue(_timed++, comp, attr, value));\n\t}\n", "\t\tpublic int hashCode() {\n\t\t\treturn listener.hashCode()\n\t\t\t\t\t+ (filter != null ? filter.hashCode() >> 8 : 0);\n\t\t}\n", "public synchronized void start(){\n  if (expirationTime == -1) {\n    expired=false;\n    expirationTime=LIFETIME + System.currentTimeMillis();\n  }\n else {\n    throw new IllegalStateException(\"StunServerTransaction \" + getTransactionID() + \" has already been started!\");\n  }\n}\n", "boolean doCommandPlugsPostStatusLocal ( InetAddress inetAddress , IEspStatusPlugs status , String deviceBssid , boolean isMeshDevice ) ;", "public BreakIterator getBreakIterator(int type) {\n        if (type < BI_CHARACTER || type >= BI_LIMIT) {\n            throw new IllegalArgumentException(\"Illegal break iterator type\");\n        }\n        if (breakIterators == null || breakIterators[type] == null) {\n            return guessBreakIterator(type);\n        }\n        return (BreakIterator) breakIterators[type].clone(); // clone for safety\n    }", "private boolean commonNodeEquality ( Node n1 , Node n2 ) { if ( ! nodeEquals ( n1 . getComment ( ) , n2 . getComment ( ) ) ) { return BOOL_ ; } return nodesEquals ( n1 . getOrphanComments ( ) , n2 . getOrphanComments ( ) ) ; }", "    public void gotoPage(int page) {\n        if (isSynced()) {\n            // notify all clients\n            statusMap.put(PDFViewerConstants.PAGE_NUMBER, SharedInteger.valueOf(page));\n        } else {\n            // show the page privately in this client\n            pdfPanel.showPage(page);\n        }\n    }\n", "public static boolean isNumber(String str){\n  if (str == null)   return false;\n  str=str.trim();\n  int pos=0;\n  int len=str.length();\n  if (len == 0)   return false;\n  char curr=str.charAt(pos);\n  if (curr == '+' || curr == '-') {\n    if (len == ++pos)     return false;\n    curr=str.charAt(pos);\n  }\n  boolean hasDot=false;\n  boolean hasExp=false;\n  for (; pos < len; pos++) {\n    curr=str.charAt(pos);\n    if (curr < '0') {\n      if (curr == '.') {\n        if (pos + 1 >= len || hasDot)         return false;\n        hasDot=true;\n      }\n else       return false;\n    }\n else     if (curr > '9') {\n      if (curr == 'e' || curr == 'E') {\n        if (pos + 1 >= len || hasExp)         return false;\n        hasExp=true;\n        hasDot=true;\n      }\n else       return false;\n    }\n  }\n  if (hasExp) {\n    try {\n      Double.parseDouble(str);\n      return true;\n    }\n catch (    NumberFormatException e) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    protected String extractPrefix(ITextViewer viewer, int offset) {\n        int i = offset - 1;\n        if (i == -1) {\n            return \"\";\n        }\n        \n        StringBuffer sb = new StringBuffer(\"\");\n        char c;\n        try {\n            c = viewer.getDocument().getChar(i);\n            while (!Character.isWhitespace(c)) {\n                sb.append(c);\n                i--;\n                if (i < 0) {\n                    break;\n                } else {\n                    c = viewer.getDocument().getChar(i);\n                }\n            }\n        } catch (BadLocationException e) {\n            TexlipsePlugin.log(\"BibTemplateCompletion, extractPrefix.\", e);\n        }\n        return sb.reverse().toString();\n    }\n", "   public boolean isTaken(Object obj) {\n      int index = getIndex(obj);\n      if (index >= 0) {\n         return (pool[index].flagAvail == false);\n      }\n      return (false);\n   } // of method\n", "    public int length() {\n        Opcode opcode = getOpcode();\n        if (opcode == null)\n            return 1;\n\n        switch (opcode) {\n            case TABLESWITCH: {\n                int pad = align(pc + 1) - pc;\n                int low = getInt(pad + 4);\n                int high = getInt(pad + 8);\n                return pad + 12 + 4 * (high - low + 1);\n            }\n            case LOOKUPSWITCH: {\n                int pad = align(pc + 1) - pc;\n                int npairs = getInt(pad + 4);\n                return pad + 8 + 8 * npairs;\n\n            }\n            default:\n                return opcode.kind.length;\n        }\n    }\n", "void putAll ( Map map , Transaction txn , long timeToLive ) ;", "    public void setPhone(String newVal) {\n        if ((newVal != null && this.phone != null && (newVal.compareTo(this.phone) == 0)) ||\n            (newVal == null && this.phone == null && phone_is_initialized)) {\n            return;\n        }\n        this.phone = newVal;\n        phone_is_modified = true;\n        phone_is_initialized = true;\n    }\n", "   public void add(Resource<String> label, String id, StyleableComponent component) {\n      final StyleableComponent tab = (id == null) ? new TextLink(label) : new TextLink(label, id);\n      tab.setBackgroundActing(isBackgroundActing());    // take behavi", "\tpublic void register(Component c) {\n\t\tc.addMouseListener(clickListener);\n\t\tif (c instanceof Container)  //if this contains further elements register them as well\n\t\t\tfor (Component c2 : ((Container)c).getComponents())\n\t\t\t\tregister(c2);\t\t\n\t}\n", "private static int lastUnescapedIndexOf(@NotNull String s,int from,char c){\n  int result=from;\n  do {\n    result=s.lastIndexOf(c,result - 1);\n  }\n while (result != -1 && !isUnescaped(s,result,c));\n  return result;\n}\n", "    public Linebuf ( String[] lineset, String line_sep){\n        this(nil,lineset,line_sep);\n    }\n", "public Observable<ServiceResponse<String>> importMethodWithServiceResponseAsync(UUID appId, LuisApp luisApp, String versionId) {\n        if (this.client.endpoint() == null) {\n            throw new IllegalArgumentException(\"Parameter this.client.endpoint() is required and cannot be null.\");\n        }\n        if (appId == null) {\n            throw new IllegalArgumentException(\"Parameter appId is required and cannot be null.\");\n        }\n        if (luisApp == null) {\n            throw new IllegalArgumentException(\"Parameter luisApp is required and cannot be null.\");\n        }\n        Validator.validate(luisApp);\n        String parameterizedHost = Joiner.on(\", \").join(\"{Endpoint}\", this.client.endpoint());\n        return service.importMethod(appId, versionId, luisApp, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())\n            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<String>>>() {\n                @Override\n                public Observable<ServiceResponse<String>> call(Response<ResponseBody> response) {\n                    try {\n                        ServiceResponse<String> clientResponse = importMethodDelegate(response);\n                        return Observable.just(clientResponse);\n                    } catch (Throwable t) {\n                        return Observable.error(t);\n                    }\n                }\n            });\n    }", "protected abstract int computeSerializedLength ( ) ;", "public List < FlashcardEntity > queryDeep ( String where , String ... selectionArg ) { Cursor cursor = db . rawQuery ( getSelectDeep ( ) + where , selectionArg ) ; return loadDeepAllAndCloseCursor ( cursor ) ; }", "public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { request . getSession ( ) . setAttribute ( STR_ , STR_ ) ; response . sendRedirect ( STR_ ) ; return ; }", "    public void setScale(double x, double y, double z) {\n        tb.setStepScale(new Vector3f((float) x, (float) y, (float) z));\n\n        tb.updateFromHeightMap();\n        tb.setModelBound(new BoundingBox());\n        tb.updateModelBound();\n    }\n", "public void check(final int api){\n  if (api == Opcodes.ASM4) {\n    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {\n      throw new RuntimeException();\n    }\n    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {\n      throw new RuntimeException();\n    }\n  }\n}\n", "public void clickOnScreen(float x, float y) {\n\t\tif(config.commandLogging){\n\t\t\tLog.d(config.commandLoggingTag, \"clickOnScreen(\"+x+\", \"+y+\")\");\n\t\t}\n\t\t\n\t\tsleeper.sleep();\n\t\tclicker.clickOnScreen(x, y, null);\n\t}", "private void removeSelectedItems ( List items ) { for ( Iterator iter = items . iterator ( ) ; iter . hasNext ( ) ; ) { Object item = iter . next ( ) ; removeHistoryItem ( item ) ; } refreshWithLastSelection = BOOL_ ; contentProvider . refresh ( ) ; }", "    public void disconnect() {\n        _logger.info(\"Disconnection from server (\"+server+\")\");\n        try {\n            \n            try {\n                if (sftp != null)\n                    sftp.disconnect();\n            }\n            catch (Exception e) {\n                _logger.debug(\"Hiding exception \", e);\n            }\n            \n            try {\n                if (session != null)\n                    session.disconnect();\n            }\n            catch (Exception e) {\n                _logger.debug(\"Hiding exception \", e);\n            }\n        }\n        finally {\n            jsch = null; // no close, disconnect needed here\n            session = null;\n            sftp = null;\n        }\n    }\n", "private final void newGameMode(int gameModeType){\n  Editor editor=settings.edit();\n  String gameModeStr=String.format(Locale.US,\"%d\",gameModeType);\n  editor.putString(\"gameMode\",gameModeStr);\n  editor.commit();\n  gameMode=new GameMode(gameModeType);\n  maybeAutoModeOff(gameMode);\n  ctrl.setGameMode(gameMode);\n}\n", "public boolean enlistResource(XAResource xaRes) throws RollbackException, SystemException, IllegalStateException {\n        if (tc.isEntryEnabled())\n            Tr.entry(tc, \"enlistResource\", xaRes);\n\n        // Determine if we are attempting to enlist a second resource within a transaction\n        // that can't support 2PC anyway.\n        if (_disableTwoPhase && (_resourceObjects.size() > 0)) {\n            final String msg = \"Unable to enlist a second resource within the transaction. Two phase support is disabled \" +\n                               \"as the recovery log was not available at transaction start\";\n            final IllegalStateException ise = new IllegalStateException(msg);\n            if (tc.isEntryEnabled())\n                Tr.exit(tc, \"enlistResource (SPI)\", ise);\n            throw ise;\n        }\n\n        // Create the resource wrapper and see if it already exists in the table\n        OnePhaseResourceImpl jtaRes = new OnePhaseResourceImpl((OnePhaseXAResource) xaRes, _txServiceXid);\n        boolean register = true;\n\n        // See if any other resource has been enlisted\n        // Allow 1PC and 2PC to be enlisted, it will be rejected at prepare time if LPS is not enabled\n        // Reject multiple 1PC enlistments\n        if (_onePhaseResourceEnlisted != null) {\n            if (_onePhaseResourceEnlisted.equals(jtaRes)) {\n                register = false;\n                jtaRes = _onePhaseResourceEnlisted;\n            } else {\n                Tr.error(tc, \"WTRN0062_ILLEGAL_ENLIST_FOR_MULTIPLE_1PC_RESOURCES\");\n                final String msg = \"Illegal attempt to enlist multiple 1PC XAResources\";\n                final IllegalStateException ise = new IllegalStateException(msg);\n                // FFDC in TransactionImpl\n                if (tc.isEntryEnabled())\n                    Tr.exit(tc, \"enlistResource (SPI)\", ise);\n                throw ise;\n            }\n        }\n\n        //\n        // start association of Resource object and register if first time with JTA\n        // and record that a 1PC resource has now been registered with the transaction.\n        //\n        try {\n            this.startRes(jtaRes);\n\n            if (register) {\n                jtaRes.setResourceStatus(StatefulResource.REGISTERED);\n\n                // This is 1PC then we need to insert at element 0\n                // of the list so we can ensure it is processed last\n                // at completion time.\n                _resourceObjects.add(0, jtaRes);\n\n                // Check and update LPS enablement state for the application - LIDB1673.22\n                checkLPSEnablement();\n\n                if (tc.isEventEnabled())\n                    Tr.event(tc, \"(SPI) RESOURCE registered with Transaction. TX: \" + _transaction.getLocalTID() + \", Resource: \" + jtaRes);\n                _onePhaseResourceEnlisted = jtaRes;\n            }\n        } catch (RollbackException rbe) {\n            FFDCFilter.processException(rbe, \"com.ibm.tx.jta.impl.RegisteredResources.enlistResource\", \"480\", this);\n            if (tc.isEntryEnabled())\n                Tr.exit(tc, \"enlistResource\", rbe);\n            throw rbe;\n        } catch (SystemException se) {\n            FFDCFilter.processException(se, \"com.ibm.tx.jta.impl.RegisteredResources.enlistResource\", \"487\", this);\n            if (tc.isEntryEnabled())\n                Tr.exit(tc, \"enlistResource\", se);\n            throw se;\n        }\n\n        if (tc.isEntryEnabled())\n            Tr.exit(tc, \"enlistResource\", Boolean.TRUE);\n        return true;\n    }", "public String makeIndent(int indent){\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < indent; i++) {\n    sb.append(\"  \");\n  }\n  return sb.toString();\n}\n", "public void register(TrainSchedule schedule){\n  Integer oldSize=Integer.valueOf(_scheduleHashTable.size());\n  _scheduleHashTable.put(schedule.getId(),schedule);\n  int id=Integer.parseInt(schedule.getId());\n  if (id > _id) {\n    _id=id;\n  }\n  setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_scheduleHashTable.size()));\n}\n", "public int call(String sql, Object[] params) throws Exception {\n        return call(sql, Arrays.asList(params));\n    }", "public VertexElement buildVertexElement(Vertex vertex) {\n        if (!tx.isValidElement(vertex)) {\n            Objects.requireNonNull(vertex);\n            throw TransactionException.invalidElement(vertex);\n        }\n        return new VertexElement(tx, vertex);\n    }", "\tpublic boolean isSequenceCancelled(String colName, String seqName) {\n\t\tvalidateColName(colName);\n\t\tvalidateSeqName(seqName);\n\n\t\tHashtable col = (Hashtable) hash_master.get(colName);\n\t\tif(col == null)\n\t\t\treturn false;\n\n\t\tSequence seq = (Sequence) col.get(seqName);\n\n\t\tif(seq == null)\n\t\t\treturn false;\n\n\t\tif(seq.getProperty(CANCELLED_PROPERTY) != null)\n\t\t\treturn true;\n\n\t\treturn false;\n\t}\n", "public String printLogicRPU(){\n  String s=String.format(\"Circuit_score = %-8.5f\",_scores.get_score());\n  s+=\"    \" + String.format(\"Cell_growth = %-8.5f\",Toxicity.mostToxicRow(this));\n  s+=\"\\n\\n\";\n  for (  Gate gate : _Gates) {\n    s+=printLogicRPU(gate);\n  }\n  return s;\n}\n", "public Fact createFact ( ) ;", "public Handle ( int tag , String owner , String name , String desc ) { this . tag = tag ; this . owner = owner ; this . name = name ; this . desc = desc ; }", "private boolean shouldMakeRequest(){\n  boolean shouldMakeRequest=lastRequestCompletedTime == -1;\n  shouldMakeRequest|=next != null;\n  shouldMakeRequest|=(haveMorePages && conf.pagination.mode != PaginationMode.LINK_HEADER);\n  shouldMakeRequest|=System.currentTimeMillis() > lastRequestCompletedTime + conf.pollingInterval && conf.httpMode == HttpClientMode.POLLING;\n  return shouldMakeRequest;\n}\n", "float[] getMaxSize() {\n    \tfloat normal_leading = 0;\n    \tfloat image_leading = -10000;\n        PdfChunk chunk;\n        for (int k = 0; k < line.size(); ++k) {\n            chunk = (PdfChunk)line.get(k);\n            if (!chunk.isImage()) {\n                normal_leading = Math.max(chunk.font().size(), normal_leading);\n            }\n            else {\n                image_leading = Math.max(chunk.getImage().getScaledHeight() + chunk.getImageOffsetY(), image_leading);\n            }\n        }\n        return new float[]{normal_leading, image_leading};\n    }", "public static SourceViewer createFormsSourceViewer ( FormToolkit toolkit , Composite parent , int flags ) { SourceViewer sourceViewer = createSourceViewer ( parent , flags ) ; sourceViewer . setData ( FormToolkit . KEY_DRAW_BORDER , FormToolkit . TREE_BOR", "public double[] breadthFirstSearch(double intialValue,double firstValue,IBFSTraversable<N> traversable,IDoubleBfsNextLevelValueIterator<N> nextValueIterator,List<Integer> sources){\n  double[] results=new double[nodes.length];\n  Arrays.fill(results,intialValue);\n  boolean[] alreadyScanned=new boolean[nodes.length];\n  Arrays.fill(alreadyScanned,false);\n  Set<Integer> currentNodesIndex=new HashSet<>(sources);\n  iterativeDoubleBreadthFirstSearch(results,alreadyScanned,currentNodesIndex,firstValue,0,traversable,nextValueIterator);\n  return results;\n}\n", "private static DebuggerEventSettings readDebuggerEventSettings ( final JFrame parent , final IDebugger debugger , final DebugTargetSettings target ) { final DebuggerEventSettingsStorage eventSettingsStorage = new DebuggerEventSettingsStorage ( debugger , ", "  public boolean add(T item) {\n    int key = item.hashCode();\n    while (true) {\n      Node pred = this.head;\n      Node curr = head.next;\n      while (curr.key < key) {\n        pred = curr; curr = curr.next;\n      }\n      pred.lock();\n      try {\n       ", "public void removeAtRange(int index,int size){\n  final int end=Math.min(mSize,index + size);\n  for (int i=index; i < end; i++) {\n    removeAt(i);\n  }\n}\n", "private void saveDescription ( ) { try { m_module . getConfiguration ( ) . setDescription ( m_stdEditPanel . getDescription ( ) ) ; } catch ( final CouldntSaveDataException e ) { CUtilityFunctions . logException ( e ) ; final String message = STR_ + STR_ ", "private CompletableFuture<Void> bind(Bootstrap bootstrap) {\n    CompletableFuture<Void> future = new CompletableFuture<>();\n    int port = config.getPort() != null ? config.getPort() : address.port();\n    if (config.getInterfaces().isEmpty()) {\n      bind(bootstrap, Lists.newArrayList(\"0.0.0.0\").iterator(), port, future);\n    } else {\n      bind(bootstrap, config.getInterfaces().iterator(), port, future);\n    }\n    return future;\n  }", "    protected void includeMarketMessage(String lang) {\n\tif (lang.equals(\"English\")||lang.equals(\"Swedish\")||lang.equals(\"English_us\")) {\n\t    mmsg_rticon mm = new mmsg_rticon(comms);\n\t    helpComponent = mm;\n\t} else {\n\t    //Don't insert marketing message\n\t}\n    }\n", "   public Window getWindow () {\n      for (Container p = getParent(); p != null; p = p.getParent()) {\n         if (p instanceof Window) {\n            return (Window)p;\n         }\n      }\n      return null;\n   }\n", "public void setInlineVariables(Reach reach) {\n    switch (reach) {\n      case ALL:\n        this.inlineVariables = true;\n        this.inlineLocalVariables = true;\n        break;\n      case LOCAL_ONLY:\n        this.inlineVariables = false;\n        this.inlineLocalVariables = true;\n        break;\n      case NONE:\n        this.inlineVariables = false;\n        this.inlineLocalVariables = false;\n        break;\n      default:\n        throw new IllegalStateException(\"unexpected\");\n    }\n  }", "public < T > Set < T > list2Set ( List < T > objects ) { return new HashSet < > ( objects ) ; }", "public IdQuery ( Class < T > type , Object id , QueryResultType queryResultType ) { this ( type . getName ( ) , id , null , queryResultType , NUM_ ) ; }", "void clearAndSendKeys ( By by , String text ) ;", "public QueueType queueType(){\n  return queueType;\n}", "public boolean installVersion ( java . lang . String version ) throws android . os . RemoteException ;", "public final int yystate ( ) { return zzLexicalState ; }", "public void init() {\n        if (FacesContext.getCurrentInstance().getPartialViewContext().isAjaxRequest()) {\n            return;\n        }\n\n        if (id != null && !\"\".equals(id)) {\n            entity = crudService.findById(id);\n            if (entity == null) {\n                log.info(String.format(\"Entity not found with id %s, a new one will be initialized.\", id));\n                id = null;\n                entity = initEntity();\n            }\n        }\n    }", "public static short intToUshort ( int i ) { if ( i < NUM_ || i > MAX_USHORT ) { throw new IllegalArgumentException ( STR_ + i ) ; } return ( short ) i ; }", "private String[] getEquivalents(String segment) {\n        Set<String> result = new HashSet<String>();\n        Set<String> basic = getEquivalents2(segment);\n        Set<String> permutations = new HashSet<String>();\n\n        // now get all the permutations\n        // add only the ones that are canonically equivalent\n        // TODO: optimize by not permuting any class zero.\n        Iterator<String> it = basic.iterator();\n        while (it.hasNext()) {\n            String item = it.next();\n            permutations.clear();\n            permute(item, SKIP_ZEROS, permutations);\n            Iterator<String> it2 = permutations.iterator();\n            while (it2.hasNext()) {\n                String possible = it2.next();\n\n/*\n                String attempt = Normalizer.normalize(possible, Normalizer.DECOMP, 0);\n                if (attempt.equals(segment)) {\n*/\n                if (Normalizer.compare(possible, segment,0)==0) {\n\n                    if (PROGRESS) System.out.println(\"Adding Permutation: \" + Utility.hex(possible));\n                    result.add(possible);\n\n                } else {\n                    if (PROGRESS) System.out.println(\"-Skipping Permutation: \" + Utility.hex(possible));\n                }\n            }\n        }\n\n        // convert into a String[] to clean up storage\n        String[] finalResult = new String[result.size()];\n        result.toArray(finalResult);\n        return finalResult;\n    }", "public DescribeSnapshotCopyGrantsResult withSnapshotCopyGrants(SnapshotCopyGrant... snapshotCopyGrants) {\n        if (this.snapshotCopyGrants == null) {\n            setSnapshotCopyGrants(new com.amazonaws.internal.SdkInternalList<SnapshotCopyGrant>(snapshotCopyGrants.length));\n        }\n        for (SnapshotCopyGrant ele : snapshotCopyGrants) {\n            this.snapshotCopyGrants.add(ele);\n        }\n        return this;\n    }", "public void setNote(String sessionID, String note) throws NoResponseException, XMPPErrorException, NotConnectedException, InterruptedException  {\n        ChatNotes notes = new ChatNotes();\n        notes.setType(IQ.Type.set);\n        notes.setTo(workgroupJID);\n        notes.setSessionID(sessionID);\n        notes.setNotes(note);\n        connection.createStanzaCollectorAndSend(notes).nextResultOrThrow();\n    }", "private void handleNewRequest() {\n\n        // if this is an http/2 request, skip to discrimination\n        if (!isAlpnHttp2Link(this.vc)) {\n            final HttpInboundServiceContextImpl sc = getHTTPContext();\n            // save the request info that was parsed in case somebody changes it\n            sc.setRequestVersion(sc.getRequest().getVersionValue());\n            sc.setRequestMethod(sc.getRequest().getMethodValue());\n\n            // get the response message initialized. Note: in the proxy env, this\n            // response message will be overwritten; however, this is the only\n            // spot to init() it correctly for all other cases.\n            sc.getResponseImpl().init(sc);\n\n            this.numRequestsProcessed++;\n            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                Tr.debug(tc, \"Received request number \" + this.numRequestsProcessed + \" on link \" + this);\n            }\n\n            // check for the 100-continue scenario\n            if (!sc.check100Continue()) {\n                return;\n            }\n        }\n        handleDiscrimination();\n    }", "protected void initConsole ( ) { }", "@Override public void debug(String msg){\n  if (logger.isLoggable(Level.FINE)) {\n    log(SELF,Level.FINE,msg,null);\n  }\n}\n", "private static Class registerTypeMapping(Class clazz) throws PageException {\n\tPageContext pc = ThreadLocalPageContext.get();\n\tWSServer server = ((ConfigImpl) ThreadLocalPageContext.getConfig(pc)).getWSHandler().getWSServer(pc);\n\treturn registerTypeMapping(server, clazz);\n    }", "public <E> List<E> findByRange(Class<E> entityClass, EntityMetadata metadata, byte[] startRow, byte[] endRow,\n            String[] columns, Filter f, Queue filterClausequeue)\n    {\n        EntityMetadata entityMetadata = KunderaMetadataManager.getEntityMetadata(kunderaMetadata, entityClass);\n        // columnFamily has a different meaning for HBase, so it won't be used\n        // here\n        String tableName = entityMetadata.getSchema();\n        List results = new ArrayList();\n\n        FilterList filter = new FilterList();\n        if (f != null)\n        {\n            filter.addFilter(f);\n        }\n        if (isFindKeyOnly(metadata, columns))\n        {\n            columns = null;\n            filter.addFilter(new KeyOnlyFilter());\n        }\n\n        try\n        {\n            MetamodelImpl metaModel = (MetamodelImpl) kunderaMetadata.getApplicationMetadata().getMetamodel(\n                    entityMetadata.getPersistenceUnit());\n\n            EntityType entityType = metaModel.entity(entityClass);\n\n            List<AbstractManagedType> subManagedType = ((AbstractManagedType) entityType).getSubManagedType();\n\n            if (!subManagedType.isEmpty())\n            {\n                for (AbstractManagedType subEntity : subManagedType)\n                {\n                    EntityMetadata subEntityMetadata = KunderaMetadataManager.getEntityMetadata(kunderaMetadata,\n                            subEntity.getJavaType());\n                    List found = handler.readDataByRange(tableName, subEntityMetadata.getEntityClazz(),\n                            subEntityMetadata, startRow, endRow, columns, filter);\n                    results.addAll(found);\n                }\n            }\n            else\n            {\n                results = handler.readDataByRange(tableName, entityClass, metadata, startRow, endRow, columns, filter);\n            }\n            if (showQuery && filterClausequeue.size() > 0)\n            {\n                KunderaCoreUtils.printQueryWithFilterClause(filterClausequeue, entityMetadata.getTableName());\n            }\n        }\n        catch (IOException ioex)\n        {\n            log.error(\"Error during find by range, Caused by: .\", ioex);\n            throw new KunderaException(ioex);\n        }\n        return results;\n    }", "public com.cloudant.client.api.model.Response saveAttachment(InputStream in, String name,\n                                                                 String contentType) {\n        Response couchDbResponse = db.saveAttachment(in, name, contentType);\n        com.cloudant.client.api.model.Response response = new com.cloudant.client.api.model\n                .Response(couchDbResponse);\n        return response;\n    }", "    protected double getInitialDomain(double p) {\n        return getDenominatorDegreesOfFreedom() /\n            (getDenominatorDegreesOfFreedom() - 2.0);\n    }\n", "    protected void fireStateChanged() {\n        ChangeListener[] listeners = (ChangeListener[]) getListeners(ChangeListener.class);\n        for (int i = 0; i < listeners.length; i++) {\n            ChangeListener listener = listeners[i];\n            listener.stateChanged(new ChangeEvent(this));\n        }\n    }\n", "    public void showContent(String sessionID, String content) {\n        try {\n            servletMirror.outSessionStep(sessionID, content, this);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "public static double pdf(double x, double mu, double shape) {\n    if(!(x > 0) || x == Double.POSITIVE_INFINITY) {\n      return x == x ? 0 : Double.NaN;\n    }\n    final double v = (x - mu) / mu;\n    double t1 = FastMath.sqrt(shape / (MathUtil.TWOPI * x * x * x));\n    return t1 > 0 ? t1 * FastMath.exp(-shape * v * v * .5 / x) : 0;\n  }", "private int loadEmotes(String json,String streamRestriction){\n  if (streamRestriction != null && streamRestriction.equals(\"$global$\")) {\n    streamRestriction=null;\n  }\n  Set<Emoticon> emotes=parseEmotes(json,streamRestriction);\n  Set<String> bots=parseBots(json);\n  LOGGER.info(\"BTTV: Found \" + emotes.size() + \" emotes / \"+ bots.size()+ \" bots\");\n  listener.receivedEmoticons(emotes);\n  listener.receivedBotNames(streamRestriction,bots);\n  return emotes.size();\n}\n", "Item newField ( final String owner , final String name , final String desc ) { key3 . set ( FIELD , owner , name , desc ) ; Item result = get ( key3 ) ; if ( result == null ) { put122 ( FIELD , newClass ( owner ) . index , newNameType ( name , desc ) . in", "    protected BigDecimal convertObjectToBigDecimal(Object sourceObject) throws ConversionException {\n        BigDecimal bigDecimal = null;\n\n        try {\n            if (sourceObject instanceof String) {\n                bigDecimal = new BigDecimal((String)sourceObject);\n            } else if (sourceObject instanceof BigInteger) {\n                bigDecimal = new BigDecimal((BigInteger)sourceObject);\n            } else if (sourceObject instanceof Number) {\n                bigDecimal = new BigDecimal(((Number)sourceObject).doubleValue());\n            } else {\n                throw ConversionException.couldNotBeConverted(sourceObject, ClassConstants.BIGDECIMAL);\n            }\n        } catch (NumberFormatException exception) {\n            throw ConversionException.couldNotBeConverted(sourceObject, ClassConstants.BIGDECIMAL, exception);\n        }\n        return bigDecimal;\n    }\n", "private static void removeIdsFromGrids(List<String> currentGridNames,List<Grid> grids){\n  for (  Grid grid : grids) {\n    grid.setId(-1);\n    for (    GridItem item : grid.getItems())     item.setId(-1);\n  }\n  for (  Grid grid : grids) {\n    if (currentGridNames.contains(grid.getName()))     grid.setName(grid.getName() + \" (2)\");\n  }\n}\n", "    protected void setWordToExtra(byte[] displacement, byte[] word) {\n        if(memory == null) {\n            memory = (ModuleMemory) super.getConnection(Module.Type.MEMORY);\n            motherboard = (ModuleMotherboard) super.getConnection(Module.Type.MOTHERBOARD);\n            pic = (ModulePIC) super.getConnection(Module.Type.PIC);\n            clock = (ModuleClock) super.getConnection(Module.Type.CLOCK);\n        }\n        try {\n            memory.setWord(this.getSegmentedExtraAddress(displacement), word);\n        } catch (ModuleException e) {\n            logger.log(Level.WARNING, \"[\" + super.getType()\n                    + \"] AbstractModule exception: \" + e.getMessage());\n        }\n    }\n", "protected IEObjectDescription createSingleElementDescription(TMember existingMember){\n  return EObjectDescription.create(existingMember.getName(),existingMember);\n}\n", "private static boolean isRegister ( final ReilOperand operand , final boolean translatingReil ) { return ( ( operand . getType ( ) == OperandType . REGISTER ) && ( translatingReil || ReilHelpers . isNativeRegister ( operand ) ) ) ; }", "    private String toStringWithCheck(boolean convertBraces) {\n        if (this.host == null) {\n            if (this.port != null) {\n                throw new UriBuilderException(\n                        \"You must set a host, if you set a port\");\n            }\n            if ((this.userInfo != null) && (this.userInfo.length() >= 0)) {\n                throw new UriBuilderException(\n                        \"You must set a host, if you set a userInfo\");\n            }\n        }\n        return toString(convertBraces);\n    }\n", "public void modifyRelationship(Relationship relationship, String description, String technology) {\n        if (relationship == null) {\n            throw new IllegalArgumentException(\"A relationship must be specified.\");\n        }\n\n        Relationship new", "\tpublic ValidExpression parseMathPiper(String MathPiperString) throws Throwable {\n\t\treturn ggbParser.parseMathPiper(MathPiperString);\t\t\n\t}\n", "\tprivate LogoPanel getLogoPanel() {\n\t\tif(jpNorth == null) {\n\t\t\tjpNorth = new LogoPanel();\n\t\t\tjpNorth.setPreferredSize(new Dimension(128, 128));\n\t\t}\n\n\t\treturn jpNorth;\n\t}\n", "public int addAdjustment(GenericValue adjustment){\n  itemAdjustments.add(adjustment);\n  return itemAdjustments.indexOf(adjustment);\n}\n", "public void markInitialized(){\n  if (FLAGS_UPD.compareAndSet(this,0,INIT_FLAG))   checkComplete();\n}\n", "private void throwWebDavException(int statusCode, String message) throws WebDavException {\n\t\tthrowWebDavException(statusCode, message, null);\n\t}", "    public void removeAllMembers(final String groupName) {\n        logger.entering(CLASS_NAME, \"removeAllMembers(String\");\n\n        groupMap.remove(groupName);\n    }\n", "public void goToNextColor ( ) { mColorIndex = ( mColorIndex + NUM_ ) % ( mColors . length ) ; }", "public static boolean aboveThan(long a,long b){\n  return Long.compareUnsigned(a,b) > 0;\n}\n", "public static boolean isTreasureChestBlock(Block block){\n  return treasureBlocks.contains(block);\n}\n", "public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){\n  Insets insets=getBorderInsets(c);\n  Color oldColor=g.getColor();\n  g.translate(x,y);\n  if (tileIcon != null) {\n    color=(tileIcon.getIconWidth() == -1) ? Color.gray : null;\n  }\n  if (color != null) {\n    g.setColor(color);\n    g.fillRect(0,0,width - insets.right,insets.top);\n    g.fillRect(0,insets.top,insets.left,height - insets.top);\n    g.fillRect(insets.left,height - insets.bottom,width - insets.left,insets.bottom);\n    g.fillRect(width - insets.right,0,insets.right,height - insets.bottom);\n  }\n else   if (tileIcon != null) {\n    int tileW=tileIcon.getIconWidth();\n    int tileH=tileIcon.getIconHeight();\n    paintEdge(c,g,0,0,width - insets.right,insets.top,tileW,tileH);\n    paintEdge(c,g,0,insets.top,insets.left,height - insets.top,tileW,tileH);\n    paintEdge(c,g,insets.left,height - insets.bottom,width - insets.left,insets.bottom,tileW,tileH);\n    paintEdge(c,g,width - insets.right,0,insets.right,height - insets.bottom,tileW,tileH);\n  }\n  g.translate(-x,-y);\n  g.setColor(oldColor);\n}\n", "private void initStreams() throws IOException {\r\n\t\tif (audio != null) {\r\n\t\t\taudio.close();\r\n\t\t}\r\n\t\t\r\n\t\tOggInputStream audio;\r\n\t\t\r\n\t\tif (url != null) {\r\n\t\t\taudio = new OggInputStream(url.openStream());\r\n\t\t} else {\r\n\t\t\taudio = new OggInputStream(ResourceLoader.getResourceAsStream(ref));\r\n\t\t}\r\n\t\t\r\n\t\tthis.audio = audio;\r\n\t\tpositionOffset = 0;\r\n\t}", "private List < String > sentenceSplit ( String str ) { BreakIterator iterator = BreakIterator . getSentenceInstance ( Locale . US ) ; iterator . setText ( str ) ; int start = iterator . first ( ) ; List < String > sentences = new ArrayList < String > ( ) ; for ( int end = iterator . next ( ) ; end != BreakIterator . DONE ; start = end , end = iterator . next ( ) ) { sentences . add ( str . substring ( start , end ) . trim ( ) ) ; } return sentences ; }", "public List<Entry> filter(List<Entry> points,double tolerance){\n  if (tolerance <= 0)   return points;\n  keep=new boolean[points.size()];\nswitch (mType) {\ncase DOUGLAS_PEUCKER:\n    return reduceWithDouglasPeuker(points,tolerance);\ncase NONE:\n  return points;\ndefault :\nreturn points;\n}\n}\n", "public static String convertMethodSignature ( String className , String methodName , String methodSig ) { return convertMethodSignature ( className , methodName , methodSig , STR_ ) ; }", "public static UUID nameUUIDFromString(String name, UUID namespace) {\n\t\treturn nameUUIDFromString(name, namespace, UUID.MD5_ENCODING);\n\t}", "    public Object validate(String value) {\n        return value;\n    }\n", "    public void removeAll() {\n        \n        for( IniItem item : getItems() ) {\n            removeItem( item );\n        }\n    }\n", "protected static Object primitiveArrayGet ( Object self , int idx ) { return Array . get ( self , normaliseIndex ( idx , Array . getLength ( self ) ) ) ; }", "    public void setConnectMode(FTPConnectMode mode) {\n\n        if (ftpConnection.connectMode != mode) {\n            ftpConnection.connectMode = mode;\n            try {\n                closeData();\n            }  catch (IOException ignore) {}\n             ", "@Handler\n    public void onNioRegistration(NioRegistration event)\n            throws IOException {\n        SelectableChannel channel = event.ioChannel();\n        channel.configureBlocking(false);\n        SelectionKey key;\n        synchronized (selectorGate) {\n            selector.wakeup(); // make sure selector isn't blocking\n            key = channel.register(\n                selector, event.ops(), event.handler());\n        }\n        event.setResult(new Registration(key));\n    }", "  public Document addAnchor(String id) {\n    if (id.startsWith(\"_\"))\n      throw new IllegalArgumentException(\"underscore is reserved for internal IDs\");\n    // normally I'd use fo:inline for anchors but FOP can't handle IDs on those elements\n    // so i have to use block here - since the EditorPane uses extra space even for\n    // empty blocks i'm trying to reuse the current block here IF it doesn't have an ID\n    // already\n    if (cursor.getAttribute(\"id\").length()==0)\n      cursor.setAttribute(\"id\", id);\n    else\n      push(\"block\", \"id=\"+id).pop();\n    return this;\n  }\n", "public void showSelection () {\n\tcheckWidget ();\n\tif (selectedItems.length == 0) return;\n\tshowItem (selectedItems [0]);\n}\n", "\tprotected EStructuralFeature getStructuralFeature () {\n\t\treturn fStructuralFeature;\n\t}\n", "\t\tpublic void outAStringTypeColumnType(AStringTypeColumnType param1) {\n\t\t\tout.print(\") \");\n\t\t}\n", "void onMoveMotionEvent ( MotionEvent ev , float diffX , float diffY ) ;", "protected boolean writeStdCompare ( int type , boolean simulate ) { type = type - COMPARE_NOT_EQUAL ; if ( type < NUM_ || type > NUM_ ) return BOOL_ ; if ( ! simulate ) { MethodVisitor mv = controller . getMethodVisitor ( ) ; OperandStack operandStack = controller . getOperandStack ( ) ; int bytecode = stdCompareCodes [ type ] ; mv . visitInsn ( getCompareCode ( ) ) ; Label l1 = new Label ( ) ; mv . visitJumpInsn ( bytecode , l1 ) ; mv . visitInsn ( ICONST_1 ) ; Label l2 = new Label ( ) ; mv . visitJumpInsn ( GOTO , l2 ) ; mv . visitLabel ( l1 ) ; mv . visitInsn ( ICONST_0 ) ; mv . visitLabel ( l2 ) ; operandStack . replace ( ClassHelper . boolean_TYPE , NUM_ ) ; } return BOOL_ ; }", "public static LocalTime fromMillisOfDay(long millisOfDay, Chronology chrono) {\n        chrono = DateTimeUtils.getChronology(chrono).withUTC();\n        return new LocalTime(millisOfDay, chrono);\n    }", "public static String toBinaryString(byte[] value){\n  BigInteger helpBigInteger=new BigInteger(1,value);\n  return helpBigInteger.toString(2);\n}\n", "public static void dump(ResultSet rs) throws SQLException {\n  ResultSetMetaData md=rs.getMetaData();\n  for (int i=0; i < md.getColumnCount(); i++) {\n    int index=i + 1;\n    String info=md.getColumnLabel(index);\n    String name=md.getColumnName(index);\n    if (info == null)     info=name;\n else     if (name != null && !name.equals(info))     info+=\" (\" + name + \")\";\n    info+=\" = \" + rs.getString(index);\n    info+=\" [\" + md.getColumnTypeName(index) + \"(\"+ md.getPrecision(index);\n    if (md.getScale(index) != 0)     info+=\",\" + md.getScale(index);\n    info+=\")]\";\n    log.fine(info);\n  }\n}\n", "public double linearDistance(Location location){\n  if (location == null) {\n    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,\"Location\",\"linearDistance\",\"missingLocation\"));\n  }\n  double lat1=Math.toRadians(this.latitude);\n  double lon1=Math.toRadians(this.longitude);\n  double lat2=Math.toRadians(location.latitude);\n  double lon2=Math.toRadians(location.longitude);\n  if (lat1 == lat2 && lon1 == lon2) {\n    return 0;\n  }\n  double dLat=lat2 - lat1;\n  double dLon=lon2 - lon1;\n  if (Math.abs(dLon) > Math.PI) {\n    dLon=dLon > 0 ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);\n  }\n  double distanceRadians=Math.sqrt(dLat * dLat + dLon * dLon);\n  return Double.isNaN(distanceRadians) ? 0 : distanceRadians;\n}\n", "private static void grow(int size) throws IOException {\n    for (int i = 0; i < size - maxSelectors; i++) {\n      selectors.add(Selector.open());\n    }\n  }", "protected final void setContext(@NonNull final Context context) {\n        Condition.INSTANCE.ensureNotNull(context, \"The context may not be null\");\n        this.context = context;\n    }", "IMouseStateChange mouseMoved ( MouseEvent event , AbstractZyGraph < ? , ? > graph ) ;", "    private String safe(String src) {\n\tStringBuffer sb= new StringBuffer();\n\tfor (int i=0; i<src.length(); i++) {\n\t    char c= src.charAt(i);\n\t    if (c>=32 && c<128) {\n\t\tsb.append(c);\n\t    } else {\n\t\tsb.append(\"<\"+(int)c+\">\");\n\t    }\n\t}\n\treturn sb.toString();\n    }\n", "public Jdk14Logger(String name){\n  this.jdkLogger=Logger.getLogger(name);\n}\n", "public java.security.cert.Certificate engineGenerateCertificate(InputStream in) throws CertificateException {\n  if (currentStream == null) {\n    currentStream=in;\n    sData=null;\n    sDataObjectCount=0;\n  }\n else   if (currentStream != in) {\n    currentStream=in;\n    sData=null;\n    sDataObjectCount=0;\n  }\n  try {\n    if (sData != null) {\n      if (sDataObjectCount != sData.size()) {\n        return getCertificate();\n      }\n else {\n        sData=null;\n        sDataObjectCount=0;\n        return null;\n      }\n    }\n    PushbackInputStream pis=new PushbackInputStream(in);\n    int tag=pis.read();\n    if (tag == -1) {\n      return null;\n    }\n    pis.unread(tag);\n    if (tag != 0x30) {\n      return readPEMCertificate(pis);\n    }\n else {\n      return readDERCertificate(new ASN1InputStream(pis));\n    }\n  }\n catch (  Exception e) {\n    throw new ExCertificateException(e);\n  }\n}\n", "void genCode(String name, ArrayList<JFile> ilist,\n               ArrayList<JRecord> rlist, String destDir, ArrayList<String> options)\n    throws IOException {\n    for (Iterator<JRecord> iter = rlist.iterator(); iter.hasNext();) {\n      JRecord rec = iter.", "public void putClientMetrics(String hostname, String clientId,\n      List<Metric> metrics) {\n    if (metrics.isEmpty()) {\n      return;\n    }\n    LOG.debug(\"Removing metrics for id {} to replace with {}\", clientId, metrics);\n    synchronized (mClientMetrics) {\n      mClientMetrics.removeByField(ID_INDEX, getFullInstanceId(hostname, clientId));\n      for (Metric metric : metrics) {\n        if (metric.getHostname() == null) {\n          continue; // ignore metrics whose hostname is null\n        }\n        mClientMetrics.add(metric);\n      }\n    }\n  }", "public boolean isBeforeFirst ( ) { return m_isBeforeFirst ; }", "protected boolean fill(final Context2D context, final Attributes attr, double alpha)\n    {\n        final boolean filled = attr.hasFill();\n\n        if ((filled) || (attr.isFillShapeForSelection()))\n        {\n            alpha = alpha * attr.getFillAlpha();\n\n            if (alpha <= 0)\n            {\n                return false;\n            }\n            if (context.isSelection())\n            {\n                final String color = getColorKey();\n\n                if (null == color)\n                {\n                    return false;\n                }\n                context.save();\n\n                context.setFillColor(color);\n\n                context.fill();\n\n                context.restore();\n\n                return true;\n            }\n            if (false == filled)\n            {\n                return false;\n            }\n            context.save();\n\n            if (attr.hasShadow())\n            {\n                doApplyShadow(context, attr);\n            }\n            context.setGlobalAlpha(alpha);\n\n            final String fill = attr.getFillColor();\n\n            if (null != fill)\n            {\n                context.setFillColor(fill);\n\n                context.fill();\n\n                context.restore();\n\n                return true;\n            }\n            final FillGradient grad = attr.getFillGradient();\n\n            if (null != grad)\n            {\n                final String type = grad.getType();\n\n                if (LinearGradient.TYPE.equals(type))\n                {\n                    context.setFillGradient(grad.asLinearGradient());\n\n                    context.fill();\n\n                    context.restore();\n\n                    return true;\n                }\n                else if (RadialGradient.TYPE.equals(type))\n                {\n                    context.setFillGradient(grad.asRadialGradient());\n\n                    context.fill();\n\n                    context.restore();\n\n                    return true;\n                }\n                else if (PatternGradient.TYPE.equals(type))\n                {\n                    context.setFillGradient(grad.asPatternGradient());\n\n                    context.fill();\n\n                    context.restore();\n\n                    return true;\n                }\n            }\n            context.restore();\n        }\n        return false;\n    }", "    public boolean createHostCfg(int id, String cfg) {\n        //locals\n        boolean r = false;\n\n        //SQL-Statement\n        String sql = \"INSERT INTO configuration VALUES(?, ?);\";\n\n        //data access\n        PreparedStatement stmt = null;\n        try {\n            stmt = connection.prepareStatement(sql);\n            stmt.setInt(1, id);\n            stmt.setString(2, cfg);\n            r = (stmt.executeUpdate() >= 1);\n\n            if (stmt != null) {\n                stmt.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            return r;\n        }\n    }\n", "private void handleGroupChannel(JsonNode channel) {\n        long channelId = channel.get(\"id\").asLong();\n\n        api.getGroupChannelById(channelId).ifPresent(groupChannel -> {\n            GroupChannelDeleteEvent event = new GroupChannelDeleteEventImpl(groupChannel);\n\n            api.getEventDispatcher().dispatchGroupChannelDeleteEvent(\n                    api, Collections.singleton(groupChannel), groupChannel.getMembers(), event);\n            api.removeObjectListeners(GroupChannel.class, channelId);\n            api.removeObjectListeners(VoiceChannel.class, channelId);\n            api.removeObjectListeners(TextChannel.class, channelId);\n            api.removeObjectListeners(Channel.class, channelId);\n            api.forEachCachedMessageWhere(\n                    msg -> msg.getChannel().getId() == groupChannel.getId(),\n                    msg -> api.removeMessageFromCache(msg.getId())\n            );\n        });\n    }", "public void addRequestHeader(String key,String value){\n  if (userHeaders == null) {\n    userHeaders=new Hashtable();\n  }\n  if (key.equalsIgnoreCase(\"content-type\")) {\n    setContentType(value);\n  }\n else {\n    userHeaders.put(key,value);\n  }\n}\n", "@Override public boolean equals(final Object rhs){\n  if (!(rhs instanceof Address)) {\n    return false;\n  }\n  return m_value.equals(((Address)rhs).m_value);\n}\n", "public boolean isTextFieldValid(){\n  return isTextValid(dateTextField.getText());\n}\n", "\t\tpublic boolean isLayoutValid() {\n\t\t\treturn false; // TODO\n\t\t} // isLayoutValid()\n", "protected boolean parseDefaultClause( DdlTokenStream tokens,\n                                          AstNode columnNode ) throws ParsingException {\n\n        assert tokens != null;\n        assert columnNode != null;\n\n        // defaultClause\n        // : defaultOption\n        // ;\n        // defaultOption : <literal> | datetimeValueFunction\n        // | USER | CURRENT_USER | SESSION_USER | SYSTEM_USER | NULL;\n        //\n        // <datetime value function> ::=\n        // <current date value function>\n        // | <current time value function>\n        // | <current timestamp value function>\n        //\n        // <current date value function> ::= CURRENT_DATE\n        //\n        // <current time value function> ::=\n        // CURRENT_TIME [ <left paren> <time precision> <right paren> ]\n        //\n        // <current timestamp value function> ::=\n        // CURRENT_TIMESTAMP [ <left paren> <timestamp precision> <right paren> ]\n\n        String defaultValue = \"\";\n\n        if (tokens.canConsume(\"DEFAULT\")) {\n\n            String optionID;\n            int precision = -1;\n\n            if (tokens.canConsume(\"CURRENT_DATE\") || tokens.canConsume(\"'CURRENT_DATE'\")) {\n                optionID = DEFAULT_ID_DATETIME;\n                defaultValue = \"CURRENT_DATE\";\n            } else if (tokens.canConsume(\"CURRENT_TIME\") || tokens.canConsume(\"'CURRENT_TIME'\")) {\n                optionID = DEFAULT_ID_DATETIME;\n                defaultValue = \"CURRENT_TIME\";\n                if (tokens.canConsume(L_PAREN)) {\n                    // EXPECT INTEGER\n                    precision = integer(tokens.consume());\n                    tokens.canConsume(R_PAREN);\n                }\n            } else if (tokens.canConsume(\"CURRENT_TIMESTAMP\") || tokens.canConsume(\"'CURRENT_TIMESTAMP'\")) {\n                optionID = DEFAULT_ID_DATETIME;\n                defaultValue = \"CURRENT_TIMESTAMP\";\n                if (tokens.canConsume(L_PAREN)) {\n                    // EXPECT INTEGER\n                    precision = integer(tokens.consume());\n                    tokens.canConsume(R_PAREN);\n                }\n            } else if (tokens.canConsume(\"USER\") || tokens.canConsume(\"'USER'\")) {\n                optionID = DEFAULT_ID_USER;\n                defaultValue = \"USER\";\n            } else if (tokens.canConsume(\"CURRENT_USER\") || tokens.canConsume(\"'CURRENT_USER'\")) {\n                optionID = DEFAULT_ID_CURRENT_USER;\n                defaultValue = \"CURRENT_USER\";\n            } else if (tokens.canConsume(\"SESSION_USER\") || tokens.canConsume(\"'SESSION_USER'\")) {\n                optionID = DEFAULT_ID_SESSION_USER;\n                defaultValue = \"SESSION_USER\";\n            } else if (tokens.canConsume(\"SYSTEM_USER\") || tokens.canConsume(\"'SYSTEM_USER'\")) {\n                optionID = DEFAULT_ID_SYSTEM_USER;\n                defaultValue = \"SYSTEM_USER\";\n            } else if (tokens.canConsume(\"NULL\") || tokens.canConsume(\"NULL\")) {\n                optionID = DEFAULT_ID_NULL;\n                defaultValue = \"NULL\";\n            } else if (tokens.canConsume(L_PAREN)) {\n                optionID = DEFAULT_ID_LITERAL;\n                while (!tokens.canConsume(R_PAREN)) {\n                    defaultValue = defaultValue + tokens.consume();\n                }\n            } else {\n                optionID = DEFAULT_ID_LITERAL;\n                // Assume default was EMPTY or ''\n                defaultValue = tokens.consume();\n\n                // strip quotes if necessary\n                if (defaultValue.startsWith(\"'\") && defaultValue.endsWith(\"'\")) {\n                    if (defaultValue.length() > 2) {\n                        defaultValue = defaultValue.substring(1, defaultValue.lastIndexOf('\\''));\n                    } else {\n                        defaultValue = \"\";\n                    }\n                }\n\n                // NOTE: default value could be a Real number as well as an integer, so\n                // 1000.00 is valid\n                if (tokens.canConsume(\".\")) {\n                    defaultValue = defaultValue + '.' + tokens.consume();\n                }\n            }\n\n            columnNode.setProperty(DEFAULT_OPTION, optionID);\n            columnNode.setProperty(DEFAULT_VALUE, defaultValue);\n            if (precision > -1) {\n                columnNode.setProperty(DEFAULT_PRECISION, precision);\n            }\n            return true;\n        }\n\n        return false;\n    }", "public void load ( Reader aReader ) throws IOException { String line = null ; BufferedReader br = new BufferedReader ( aReader ) ; while ( ( line = br . readLine ( ) ) != null ) { String [ ] words = line . trim ( ) . split ( STR_ ) ; if ( words . length >", "void requestFileSystem ( String path ) throws DebugExceptionWrapper ;", "private void badIndex ( int index ) throws ArrayIndexOutOfBoundsException { String msg = STR_ + index ; throw new ArrayIndexOutOfBoundsException ( msg ) ; }", "\tpublic BoundingWedge2d BoundingWedge( FPMath fpMath ) {\n\t\t// no bounding wedge for degree 0 because hodograph is zero!\n\t\tif( degree == 0 )\n\t\t\treturn null;\n\t\treturn BoundingWedge( fpMath, controls );\n\t}\n", "    public String getMessage() {\n        if (_exception == null) \n            return getMessage();\n        else \n            return getMessage() + \", nested exception: \" + _exception.getMessage();\n    }\n", "\tprivate void build() {\n\t\tprocessTree = new ArrayList();\n\t\tfor (Iterator i=processList.iterator(); i.hasNext(); ) {\n\t\t\tProcess proc = (Process)i.next();\n\t\t\t// find the parent process\n\t\t\tif (proc.parent != null) {\n\t\t\t\tproc.parent.childList.add(proc);\n\t\t\t} else {\n\t\t\t\t// a root process\n\t\t\t\tprocessTree.add(proc);\n\t\t\t}\n\t\t}\n\t}\n", "public static String buildPath(String... paths) {\n        StringBuffer result = new StringBuffer();\n        for (int i = 0; i < paths.length; i++) {\n            String cur = paths[i];\n            int curLen = cur.length();\n            String next = null;\n            if (i < paths.length - 1) {\n                next = paths[i + 1];\n            }\n            if (cur.endsWith(ZK_PATH_SEPARATOR)) {\n                if (next != null) {\n                    if (next.startsWith(ZK_PATH_SEPARATOR)) {\n                        result.append(cur.substring(0, curLen - 1));\n                    } else {\n                        result.append(cur.substring(0, curLen));\n                    }\n                } else {\n                    result.append(cur.substring(0, curLen - 1));\n                }\n            } else {\n                if (next != null) {\n                    if (next.startsWith(ZK_PATH_SEPARATOR)) {\n                        result.append(cur.substring(0, curLen));\n                    } else {\n                        result.append(cur.substring(0, curLen));\n                        result.append(ZK_PATH_SEPARATOR);\n                    }\n                } else {\n                    result.append(cur.substring(0, curLen));\n                }\n            }\n        }\n        return result.toString();\n    }", "public TextHttpResponseHandler ( String encoding ) { super ( ) ; setCharset ( encoding ) ; }", "public static BitSet valueOf(long[] longs) {\n        int n;\n        for (n = longs.length; n > 0 && longs[n - 1] == 0; n--)\n            ;\n        return new BitSet(Arrays.copyOf(longs, n));\n    }", "public static boolean areAttributesLiteral(TagAttribute... attributes)\n    {\n        for (TagAttribute attribute : attributes)\n        {\n            if (attribute != null && !attribute.isLiteral())\n            {\n                // the attribute exists and is not literal\n                return false;\n            }\n        }\n        // all attributes are literal\n        return true;\n    }", "@SuppressWarnings(\"unchecked\")\n    protected I getIdFromEntity(EntityManager em, Object entity, ResourceField idField) {\n        Object pk = em.getEntityManagerFactory().getPersistenceUnitUtil().getIdentifier(entity);\n        PreconditionUtil.verify(pk != null, \"pk not available for entity %s\", entity);\n        if (pk != null && primaryKeyAttribute.getName().equals(idField.getUnderlyingName()) && idField.getElementType().isAssignableFrom(pk.getClass())) {\n            return (I) pk;\n        }\n        return null;\n    }", "public static List<Apn> query(Context context){\n  String[] simCodes=getSimOperatorCodes(context);\n  String[] networkCodes=getNetworkOperatorCodes(context);\n  Set<Apn> resultSet=new HashSet<>();\n  resultSet.addAll(query(context,simCodes[0],simCodes[1]));\n ", "private StmtCommonTableScan resolveCommonTableByName(String tableName, String tableAlias) {\n        StmtCommonTableScan answer = null;\n        StmtCommonTableScanShared scan = null;\n        for (AbstractParsedStmt scope = this; scope != null && scan == null; scope = scope.getParentStmt()) {\n            scan = scope.getCommonTableByName(tableName);\n        }\n        if (scan != null) {\n            answer = new StmtCommonTableScan(tableName, tableAlias, scan);\n        }\n        return answer;\n    }", "public static String fromDoc2String(Document doc) throws IOException {\n  KXmlSerializer serializer=new KXmlSerializer();\n  ByteArrayOutputStream bos=new ByteArrayOutputStream();\n  serializer.setFeature(\"http://xmlpull.org/v1/doc/features.html#indent-output\",true);\n  serializer.setOutput(bos,XformConstants.DEFAULT_CHARACTER_ENCODING);\n  doc.write(serializer);\n  serializer.flush();\n  return new String(bos.toByteArray(),XformConstants.DEFAULT_CHARACTER_ENCODING);\n}\n", "public void testListOfStringsField ( ) throws Exception { AnObject empty = new AnObject ( ) ; AnObject full = helper . fill ( new AnObject ( ) ) ; Object value = getPropertyValue ( full , STR_ ) ; assertTrue ( value instanceof List ) ; assertFalse ( ( ( L", "@Override public IBinder onBind(Intent intent){\n  return null;\n}\n", "public void startStep(final String parentUuid, final String uuid, final StepResult result) {\n        notifier.beforeStepStart(result);\n\n        result.setStage(Stage.RUNNING);\n        result.setStart(System.currentTimeMillis());\n\n        threadContext.start(uuid);\n\n        storage.put(uuid, result);\n        storage.get(parentUuid, WithSteps.class).ifPresent(parentStep -> {\n            synchronized (storage) {\n                parentStep.getSteps().add(result);\n            }\n        });\n\n        notifier.afterStepStart(result);\n    }", "    private KtnDatagram safelySendPacket(KtnDatagram ktnd, State before, State after) throws EOFException {\n    \tKtnDatagram ack = null;\n    \tint triesLeft = MAX_SEND_ATTEMPTS;\n    \twhile (!isReallyValid(ack) && triesLeft-- > 0) try { \n    \t\t\n    \t\tstate = before;\n\t\t\t//System.out.println(\"\\n\"+state.toString());\n    \t\t\n    \t\t//System.out.println(\"\\nSENDING \"+ktnd.getFlag().toString());\n\t\t\tsimplySendPacket(ktnd);\n\t\t\t\n\t\t\tstate = after;\n\t\t\t//System.out.println(\"\\n\"+state.toString());\n\t\t\t\n\t\t\t//System.out.println(\"\\nRECEIVING \"+ktnd.getFlag()+\" ACK\");\n\t\t\tack = receiveAck();\n\t\t\n    \t} catch (ClException e) { // Ignore A2 errors\n    \t} catch (ConnectException e) { \n\t\t} catch (SocketException e) {\n\t\t} catch (IOException e) { }\n\t\treturn ack;\n    }\n", "    public void init(ServletConfig config) throws ServletException {\n        super.init(config);\n        try {\n            javax.naming.InitialContext intcon = new javax.naming.InitialContext();\n            Object obj = intcon.lookup(\"java:comp/env/ejb/CataloguingMiscellaneous\");\n            home = (ejb.bprocess.cataloguing.CataloguingMiscellaneousHome)javax.rmi.PortableRemoteObject.narrow(obj,ejb.bprocess.cataloguing.CataloguingMiscellaneousHome.class);\n        }catch (Exception exp){System.out.println(exp);}\n        newGenXMLGenerator = servlet.util.NewGenXMLGenerator.getInstance(); \n    }\n", "public final synchronized void initialize(String type,Properties configuration,Object flowOwner)\n    {\n        if(this.initialized)\n        {\n            throw new FaxException(\"Fax bridge already initialized.\");\n        }\n        \n        //set flag\n        this.initialized=true;\n\n        //get configuration\n        Map<String,String> map=new HashMap<String,String>();\n        SpiUtil.copyPropertiesToMap(configuration,map);\n        this.bridgeConfiguration=new ConfigurationHolderImpl(map);\n\n        //create fax client\n        this.faxClient=FaxClientFactory.createFaxClient(type,configuration);\n\n        //get logger\n        LoggerManager loggerManager=LoggerManager.getInstance();\n        this.bridgeLogger=loggerManager.getLogger();\n\n        //create vendor policy\n        this.vendorPolicy=this.createVendorPolicy();\n        if(this.vendorPolicy==null)\n        {\n            throw new FaxException(\"Unable to create vendor policy\");\n        }\n        \n        //initialize vendor policy\n        this.vendorPolicy.initialize(flowOwner);\n        if(this.vendorPolicy instanceof FaxMonitorEventListener)\n        {\n            this.faxClient.addFaxMonitorEventListener((FaxMonitorEventListener)this.vendorPolicy);\n        }\n\n        //log fax client SPI information\n        this.bridgeLogger.logDebug(new Object[]{\"Initializing fax bridge of type: \",this.getClass().getName(),\"\\nProvider Information:\\n\",this.getProvider(),\"\\nFax Bridge Configuration:\\n\",configuration,\"\\nVendor Policy Type: \",this.vendorPolicy.getClass().getName()},null);\n\n        //invoke hook\n        this.initializeImpl();\n    }", "  public void displayDriversState() throws AdaptorException {\n    System.out.println(\"Core CoreDriver: \" + coreDriver.toString());\n    System.out.println(\"Variation CoreDriver\" + variationDriver.toString());\n  }\n", "private void playBlastSeq(){\n  if (frameControl % 2 == 0) {\n    spriteFrame.setImage(playerStates.get((frameControl / 2) + 1));\n    if (frameControl == 22) {\n      dispose();\n      isReadyForRemoval=true;\n      return;\n    }\n  }\n  frameControl++;\n}\n", "private void initializeShowIntentBottmSheetPreference() {\n        Preference showIntentBottomSheetPreference =\n                findPreference(getString(R.string.show_intent_bottom_sheet_preference_key));\n        showIntentBottomSheetPreference\n                .setOnPreferenceClickListener(new OnPreferenceClickListener() {\n\n                    @Override\n                    public boolean onPreferenceClick(Preference preference) {\n                        initializeIntentBottomSheet();\n                        intentBottomSheet.show();\n                        return true;\n                    }\n\n                });\n    }", "public void makeImmutable(){\n  if (isMutable) {\n    if (idpList != null) {\n      idpList.makeImmutable();\n    }\n    if (requesterIDList != null) {\n      for (      RequesterID reqID : requesterIDList) {\n        reqID.makeImmutable();\n      }\n    }\n    isMutable=false;\n  }\n}\n", "protected String stripQuotes(String value){\n  return value.replaceAll(\"^\\\"|\\\"$\",\"\");\n}\n", "static Object maskNull ( Object key ) { return ( key == null ? NULL_KEY : key ) ; }", "@Override\n  public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n    try {\n      if (exceptionRaised.get()) {\n        return;\n      }\n\n      if (!(msg instanceof HttpRequest)) {\n        // If there is no methodInfo, it means the request was already rejected.\n        // What we received here is just residue of the request, which can be ignored.\n        if (methodInfo != null) {\n          ReferenceCountUtil.retain(msg);\n          ctx.fireChannelRead(msg);\n        }\n        return;\n      }\n      HttpRequest request = (HttpRequest) msg;\n      BasicHttpResponder responder = new BasicHttpResponder(ctx.channel(), sslEnabled);\n\n      // Reset the methodInfo for the incoming request error handling\n      methodInfo = null;\n      methodInfo = prepareHandleMethod(request, responder, ctx);\n\n      if (methodInfo != null) {\n        ReferenceCountUtil.retain(msg);\n        ctx.fireChannelRead(msg);\n      } else {\n        if (!responder.isResponded()) {\n          // If not yet responded, just respond with a not found and close the connection\n          HttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.NOT_FOUND);\n          HttpUtil.setContentLength(response, 0);\n          HttpUtil.setKeepAlive(response, false);\n          ctx.channel().writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n        } else {\n          // If already responded, just close the connection\n          ctx.channel().close();\n        }\n      }\n    } finally {\n      ReferenceCountUtil.release(msg);\n    }\n  }", "@Override\n    public ResourceSet<MachineToMachine> read(final TwilioRestClient client) {\n        return new ResourceSet<>(this, client, firstPage(client));\n    }", "private JSONArray readArray(boolean stringy) throws JSONException {\n        JSONArray jsonarray = new JSONArray();\n        jsonarray.put(stringy\n                ? read(this.stringhuff, this.stringhuffext, this.stringkeep)\n                : readValue());\n        while (true) {\n            if (probe) {\n                log();\n            }\n            if (!bit()) {\n                if (!bit()) {\n                    return jsonarray;\n                }\n                jsonarray.put(stringy\n                        ? readValue()\n                        : read(this.stringhuff, this.stringhuffext,\n                                this.stringkeep));\n            } else {\n                jsonarray.put(stringy\n                        ? read(this.stringhuff, this.stringhuffext,\n                                this.stringkeep)\n                        : readValue());\n            }\n        }\n    }", "public static List<ShapeRecord> line(double startX,double startY,double endX,double endY){\n  List<ShapeRecord> shapeRecords=new ArrayList<ShapeRecord>();\n  shapeRecords.add(move(startX,startY));\n  shapeRecords.addAll(straightEdge(startX,startY,endX,endY));\n  return shapeRecords;\n}\n", "protected PostgreSQLModuleViewsLoader ( ) { }", "@SuppressWarnings(\"unchecked\") public static List<Style> parseListImageStyle(InputStream responseBody) throws ResponseParseException {\n  try {\n    Element root=getXmlRootElement(responseBody);\n    List<Style> styleList=new ArrayList<Style>();\n    List<Element> styleElems=root.getChildren(\"Style\");\n    for (    Element e : styleElems) {\n      Style style=new Style();\n      style.SetStyleName(e.getChildText(\"Name\"));\n      style.SetStyle(e.getChildText(\"Content\"));\n      style.SetLastModifyTime(DateUtil.parseRfc822Date(e.getChildText(\"LastModifyTime\")));\n      style.SetCreationDate(DateUtil.parseRfc822Date(e.getChildText(\"CreateTime\")));\n      styleList.add(style);\n    }\n    return styleList;\n  }\n catch (  Exception e) {\n    throw new ResponseParseException(e.getMessage(),e);\n  }\n}\n", "private void extract(Document source){\n  Node node=source.getDocumentElement();\n  if (node != null) {\n    offer(node);\n    extract(node);\n  }\n}\n", "public boolean jdbcCompliant ( ) { return BOOL_ ; }", "public void runQueue(){\nsynchronized (sync) {\n    while (!queue.isEmpty()) {\n      Runnable r=queue.poll();\n      if (r != null) {\n        try {\n          r.run();\n        }\n catch (        Exception e) {\n          LoggingUtil.exception(e);\n        }\n      }\n else {\n        LoggingUtil.warning(\"Tried to run a 'null' Object.\");\n      }\n    }\n  }\n}\n", "public Set<String> getServerContent(String osRequest) throws FileNotFoundException, IOException {\n        ServerTask serverTask = runningServer.get();\n        try {\n            if (serverTask != null)\n                return serverTask.getServerContent(osRequest);\n        } catch (InterruptedException e) {\n            // nothing to do here, we couldn't get the results from the server\n        }\n\n        return Collections.emptySet();\n    }", "private ExtensionMapping migrateExtensionMapping(ExtensionMapping extensionMapping,Extension newer,Set<ExtensionProperty> deprecated){\n  log.debug(\"Migrating extension mapping...\");\n  extensionMapping.setExtension(newer);\n  for (  ExtensionProperty deprecatedProperty : deprecated) {\n    Term replacedBy=TERMS_REPLACED_BY_ANOTHER_TERM.get(deprecatedProperty.qualifiedName());\n    if (replacedBy != null && newer.getProperty(replacedBy) != null && !extensionMapping.isMapped(replacedBy)) {\n      PropertyMapping pm=extensionMapping.getField(deprecatedProperty.qualifiedName());\n      ExtensionProperty ep=newer.getProperty(replacedBy);\n      if (pm != null && ep != null) {\n        pm.setTerm(ep);\n        log.debug(\"Mapping to deprecated term \" + deprecatedProperty.qualifiedName() + \" has been migrated to term \"+ replacedBy.qualifiedName());\n      }\n    }\n else {\n      log.debug(\"Mapping to deprecated term \" + deprecatedProperty.qualifiedName() + \" cannot be migrated therefore it is being removed!\");\n      removePropertyMapping(extensionMapping,deprecatedProperty.qualifiedName());\n    }\n  }\n  return extensionMapping;\n}\n", "protected void fireChangeEvent(){\n  Iterator iter=m_listeners.iterator();\n  ChangeEvent evt=new ChangeEvent(this);\n  while (iter.hasNext()) {\n    ChangeListener cl=(ChangeListener)iter.next();\n    cl.stateChanged(evt);\n  }\n}\n", "    public void throwRemoteException() throws RemoteException {\n\tthrow toThrow;\n    }\n", "public void testGetDataLength ( ) { char expectedReturn = NUM_ ; char actualReturn = xorOnly . getDataLength ( ) ; assertEquals ( STR_ , expectedReturn , actualReturn ) ; }", "public static CharSequence comments(String comments){\n  return Html.fromHtml(comments.replace(\"\\n\",\"<br />\"));\n}\n", "public boolean configure ( final Object nd , final JScrollPane tv , final JList list , final int row ) { bg = list . getBackground ( ) ; final boolean sel = list . isSelectionEmpty ( ) ? BOOL_ : list . getSelectionModel ( ) . isSelectedIndex ( row ) ; fin", "abstract protected int nextIndex ( ) ;", "        public ArrayList getFieldArray(String name) {\n            ArrayList vs = (ArrayList)values.get(name);\n            return vs == null ? null : vs;\n        }\n", "    public Type pickOut(String key) {\n        Type picked = nameTable.get(key);\n        if (picked != null) {\n            outOfBase(picked);\n            nameTable.remove(key);\n        }\n        return picked;\n    }\n", "public void conjunctWith(Term t){\n  terms.add(t);\n}\n", "private List<CmsResource> getExistingFileCollisions(CmsResource targetFolder, String targetName)\n    throws CmsException {\n\n        List<CmsResource> collidingResources = new ArrayList<CmsResource>();\n\n        String finalTarget = targetFolder.getRootPath();\n        if (!finalTarget.endsWith(\"/\")) {\n            finalTarget += \"/\";\n        }\n        if (targetName == null) {\n            for (CmsResource source : m_context.getResources()) {\n                if (finalTarget.equals(CmsResource.getParentFolder(source.getRootPath()))) {\n                    // copying to the same folder, a new name will be generated\n                    return null;\n                }\n                String fileName = finalTarget + source.getName();\n                if (getRootCms().existsResource(fileName, CmsResourceFilter.ALL)) {\n                    collidingResources.add(source);\n                }\n            }\n        } else {\n            String fileName = finalTarget + targetName;\n            if (getRootCms().existsResource(fileName, CmsResourceFilter.ALL)) {\n                collidingResources.add(getRootCms().readResource(fileName, CmsResourceFilter.ALL));\n            }\n        }\n        return collidingResources.isEmpty() ? null : collidingResources;\n    }", "public double min ( ) ;", "public static void waitForToken(String siteUri, String token, Long since, Long timeout) throws Exception {\n\n    if(!siteUri.endsWith(\"/system/history\")) {\n      siteUri += \"/system/history\";\n    }\n    siteUri += \"/\" + token;\n    if(since != null) {\n      siteUri += \"/\" + since;\n    }\n    \n    HttpClient httpClient = httpClient();\n    HttpGet get = new HttpGet(siteUri);\n    Long currentTime = System.currentTimeMillis();\n    Long timeoutTime = currentTime + timeout;\n    do {\n      currentTime = System.currentTimeMillis();\n      \n      HttpResponse resp = httpClient.execute(get);\n      if(resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n        String response = EntityUtils.toString(resp.getEntity());\n        if(response != null && response.trim().equalsIgnoreCase(\"true\")) {\n          return;\n        } else {\n          Thread.sleep(1000l);\n        }\n      } else {\n        String errorResponse = EntityUtils.toString(resp.getEntity());\n        if(errorResponse != null) {\n          throw new Exception(errorResponse.trim());\n        } else {\n          throw new Exception(\"Command failed!\");\n        }\n      }\n    } while(currentTime < timeoutTime);\n    if(currentTime >= timeoutTime) {\n      throw new Exception(\"Timed out waiting for command to complete!\");\n    }\n  }", "    private void onZoomOut() {\n        zoom(1/ZOOM_COEFFICIENT);\n        if (getPreferredSize().width < getWidth() || getPreferredSize().height < getHeight()) {\n            repaint();                                                                           \n        }\n    }\n", "public void logException ( final Level level , final String message , final Exception e ) { try { Logger errors = LoggingFactory . getLogger ( LoggingFactory . NAME_ERROR_LOGGER ) ; errors . logThrowable ( level , message , e ) ; } catch ( LoggingExceptio", "public void append ( int id ) { grow ( length ) ; blockIdList [ length ] = id ; ++ length ; invalidate ( ) ; }", "\tpublic void init(IWorkbench workbench, IStructuredSelection selection) {\n\t\tthis.workbench = workbench;\n\t\tthis.selection = selection;\n\t\tsetWindowTitle(PapersEditorPlugin.INSTANCE.getString(\"_UI_Wizard_label\"));\n\t\tsetDefaultPageImageDescriptor(ExtendedImageRegistry.INSTANCE.getImageDescriptor(PapersEditorPlugin.INSTANCE.getImage(\"full/wizban/NewUtils\")));\n\t}\n", "public static String cidrMaskToNetMask ( String cidrMask ) { if ( cidrMask == null ) { return null ; } int cidrMaskValue = NUM_ ; try { cidrMaskValue = Integer . parseInt ( cidrMask ) ; } catch ( NumberFormatException e ) { return null ; } int cidrMaskFull = NUM_ << ( NUM_ - cidrMaskValue ) ; int cidrMaskBits1 = cidrMaskFull > > NUM_ & NUM_ ; int cidrMaskBits2 = cidrMaskFull > > NUM_ & NUM_ ; int cidrMaskBits3 = cidrMaskFull > > NUM_ & NUM_ ; int cidrMaskBits4 = cidrMaskFull > > NUM_ & NUM_ ; StringBuffer netMaskBuf = new StringBuffer ( ) ; netMaskBuf . append ( cidrMaskBits1 ) ; netMaskBuf . append ( STR_ ) ; netMaskBuf . append ( cidrMaskBits2 ) ; netMaskBuf . append ( STR_ ) ; netMaskBuf . append ( cidrMaskBits3 ) ; netMaskBuf . append ( STR_ ) ; netMaskBuf . append ( cidrMaskBits4 ) ; return netMaskBuf . toString ( ) ; }", "private ExtensionDependency getDependency(Extension extension, String dependencyId)\n    {\n        for (ExtensionDependency dependency : extension.getDependencies()) {\n            if (dependency.getId().equals(dependencyId)) {\n                return dependency;\n            }\n        }\n\n        return null;\n    }", "public void writeToStdIn(String text, boolean newLine) {\n        if ( outputStream == null) {\n            outputStream = new BufferedOutputStream(process.getOutputStream());\n            outputWriter = new BufferedWriter(new OutputStreamWriter(outputStream));\n        }\n\n        try {\n            outputWriter.write(text);\n            if ( newLine ) {\n                outputWriter.newLine();\n            }\n            outputWriter.flush();\n            outputStream.flush();\n        } catch (IOException e) {\n            getLog().debug(\"Error when writing to process in for \" + this, e);\n            ChorusAssert.fail(\"IOException when writing line to process\");\n        }\n    }", "protected SourceRecord consumeRecord() throws InterruptedException {\n  return consumedLines.poll(pollTimeoutInMs,TimeUnit.MILLISECONDS);\n}\n", "public void logp(Level level, String sourceClass, String sourceMethod, String msg) \n    {\n        if (isLoggable(level))\n        {\n            MyfacesLogRecord lr = new MyfacesLogRecord(level, msg);\n            lr.setSourceClassName(sourceClass);\n        ", "    public void updateTreeUI() {\n        for (int i = 0; i < optionsFactoryArray.size(); i++) {\n            SwingUtilities.updateComponentTreeUI(\n                (JPanel)(optionsFactoryArray.get(i)));\n        }\n    }\n", "    public boolean isTransaction() {\n        return transaction;\n    }\n", "public static int dpToPx ( float dp , Resources resources ) { float px = TypedValue . applyDimension ( TypedValue . COMPLEX_UNIT_DIP , dp , resources . getDisplayMetrics ( ) ) ; return ( int ) px ; }", "public void update(byte[] in,int inOff,int len){\n  while ((mOff != 0) && (len > 0)) {\n    update(in[inOff]);\n    inOff++;\n    len--;\n  }\n  while (len > 16) {\n    System.arraycopy(in,inOff,M,0,16);\n    processCheckSum(M);\n    processBlock(M);\n    len-=16;\n    inOff+=16;\n  }\n  while (len > 0) {\n    update(in[inOff]);\n    inOff++;\n    len--;\n  }\n}\n", "public static Point inverseTransformPoint(AffineTransform af,Point pt){\n  Point2D src=new Point2D.Float(pt.x,pt.y);\n  try {\n    Point2D dest=af.inverseTransform(src,null);\n    return new Point((int)Math.floor(dest.getX()),(int)Math.floor(dest.getY()));\n  ", "    public boolean isFull() {\n        throw new UnimplementedFeatureError();\n    }\n", "public DefaultRetryPolicy ( int initialTimeoutMs , int maxNumRetries , float backoffMultiplier ) { mCurrentTimeoutMs = initialTimeoutMs ; mMaxNumRetries = maxNumRetries ; mBackoffMultiplier = backoffMultiplier ; }", "protected void delete(Node<K, V> n) {\n        if (n == root) {\n            deleteMin();\n            return;\n        }\n\n        if (n.y_s == null) {\n            throw new IllegalArgumentException(\"Invalid handle!\");\n        }\n\n        // disconnect and union children of node\n        Node<K, V> childTree = unlinkAndUnionChildren(n);\n\n        // find parent\n        Node<K, V> p = getParent(n);\n\n        // link children tree in place of node\n        if (childTree == null) {\n            // no children, just unlink from parent\n            if (p.o_c == n) {\n                if (n.y_s == p) {\n                    p.o_c = null;\n                } else {\n                    p.o_c = n.y_s;\n                }\n            } else {\n                p.o_c.y_s = p;\n            }\n        } else {\n            // link children tree to parent\n            if (p.o_c == n) {\n                childTree.y_s = n.y_s;\n                p.o_c = childTree;\n            } else {\n                p.o_c.y_s = childTree;\n                childTree.y_s = p;\n            }\n        }\n\n        size--;\n        n.o_c = null;\n        n.y_s = null;\n    }", "  public int getQuantity(int index) {\n    if (index < 0 || index >= count) {\n      throw new IndexOutOfBoundsException(\"Index: \" + index\n\t\t\t\t\t  + \" Size: \" + count);\n    }\n    return inventory[index * PARTS + QUANTITY];\n  }\n", "private void internalGroupSnapCopyToTarget(StorageSystem storage,BlockSnapshot snapshot,List<URI> snapshotList) throws Exception {\n  String snapGroupName=snapshot.getReplicationGroupInstance();\n  CIMObjectPath targetGroup=_cimPath.getReplicationGroupPath(storage,snapGroupName);\n  CIMObjectPath settingsState=_helper.getSettingsDefineStateForSourceGroup(storage,snapshot.getSettingsGroupInstance());\n  CIMArgument[] inArgs=_helper.getVNXCopyToTargetGroupInputArguments(settingsState,targetGroup);\n  CIMArgument[] outArgs=new CIMArgument[5];\n  _helper.callModifySettingsDefineState(storage,inArgs,outArgs);\n  List<BlockSnapshot> snapshots=_dbClient.queryObject(BlockSnapshot.class,snapshotList);\n  for (  BlockSnapshot it : snapshots) {\n    it.setNeedsCopyToTarget(false);\n  }\n  _dbClient.persistObject(snapshots);\n}\n", "public void populateTableByDistributionSet(final DistributionSet distributionSet){\n  removeAllItems();\n  if (distributionSet == null) {\n    return;\n  }\n  Container dataSource=getContainerDataSource();\n  List<TargetFilterQuery> filters=distributionSet.getAutoAssignFilters();\n  filters.forEach(null);\n}\n", "\tpublic void updateGlobalHighscore(){\n\t\tGetHighscoreClient ghc = clientFactory.createGetHighscoreClient(this);\n\t\tghc.run();\n\t\ttry {\n\t\t\tghc.join();\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n", "int read(byte[] buffer,int offset,int length) throws IOException {\n  int readLength=0;\n  while (length > 0) {\n    while (_chunkLength <= 0) {\n      if (_isLastChunk)       return readLength == 0 ? -1 : readLength;\n      int code=read();\nswitch (code) {\nca", "public boolean created ( ) throws HttpRequestException { return HTTP_CREATED == code ( ) ; }", "public static Response newChunkedResponse ( IStatus status , String mimeType , InputStream data ) { return new Response ( status , mimeType , data , - NUM_ ) ; }", "public URI normalize(){\n  if (opaque) {\n    return this;\n  }\n  String normalizedPath=normalize(path,false);\n  if (path.equals(normalizedPath)) {\n    return this;\n  }\n  URI result=duplicate();\n  result.path=normalizedPath;\n  result.setSchemeSpecificPart();\n  return result;\n}\n", "public AggregationSet average ( String path ) { return add ( new AverageAggregator ( ) . setPath ( path ) ) ; }", "public boolean appliesO(Object o) {\r\n\t\ttry {\r\n\t\t\t@SuppressWarnings(\"unchecked\")\r\n\t\t\tT o2 = (T) o;\r\n\t\t\treturn applies(o2);\r\n\t\t} catch (ClassCastException e) {\r\n\t\t\tthrow new SubscriberTypeMismatchException(e);\r\n\t\t}\r\n\t}", "    public String toStringAsObject() {\n        Object obj;\n\n        if(buf == null) return null;\n        try {\n            obj=getObject();\n            return obj != null ? obj.toString() : \"\";\n        }\n        catch(Exception e) {  // it is not an object\n            return \"\";\n        }\n    }\n", "public GraphEvent popNext(){\nsynchronized (queue) {\n    return queue.pollFirst();\n  }\n}\n", "    public BigRational rationalMiddle() {\n        BigRational m = left.getRational().sum(right.getRational());\n        BigRational t = new BigRational(1L,2L);\n        m = m.multiply(t);\n        return m;\n    }\n", "\tpublic void addAttribute(String key, String value) {\n\t\tthis.data.put(key, value);\n\t}\n", "public static ScheduledFuture<?> runWithScheduleWithFixedDelay(\n            long initialDelayMillis, long delayMillis, Runnable runnable) {\n        return runWithScheduleWithFixedDelay(initialDelayMillis, delayMillis,\n                \"runWithScheduleWithFixedDelay\", runnable);\n    }", "protected void rehash ( int newCapacity ) { int oldCapacity = _set . length ; int oldKeys [ ] = _set ; V oldVals [ ] = _values ; byte oldStates [ ] = _states ; _set = new int [ newCapacity ] ; _values = ( V [ ] ) new Object [ newCapacity ] ; _states = new", "public static String buildNavPosSelector(CmsObject cms, String filename, String attributes, CmsMessages messages) {\n\n        // get current file navigation element\n        CmsJspNavBuilder navBuilder = new CmsJspNavBuilder(cms);\n        CmsJspNavElement curNav = navBuilder.getNavigationForResource(filename);\n\n        // get the parent folder of the current file\n        filename = CmsResource.getParentFolder(filename);\n\n        // get navigation of the current folder\n        List<CmsJspNavElement> navList = navBuilder.getNavigationForFolder(\n            filename,\n            Visibility.includeHidden,\n            CmsResourceFilter.DEFAULT);\n        float maxValue = 0;\n        float nextPos = 0;\n\n        // calculate value for the first navigation position\n        float firstValue = 1;\n        if (navList.size() > 0) {\n            try {\n                CmsJspNavElement ne = navList.get(0);\n                maxValue = ne.getNavPosition();\n            } catch (Exception e) {\n                // should usually never happen\n                LOG.error(e.getLocalizedMessage());\n            }\n        }\n\n        if (maxValue != 0) {\n            firstValue = maxValue / 2;\n        }\n\n        List<String> options = new ArrayList<String>(navList.size() + 1);\n        List<String> values = new ArrayList<String>(navList.size() + 1);\n\n        // add the first entry: before first element\n        options.add(messages.key(Messages.GUI_CHNAV_POS_FIRST_0));\n        values.add(firstValue + \"\");\n\n        // show all present navigation elements in box\n        for (int i = 0; i < navList.size(); i++) {\n            CmsJspNavElement ne = navList.get(i);\n            String navText = ne.getNavText();\n            float navPos = ne.getNavPosition();\n            // get position of next nav element\n            nextPos = navPos + 2;\n            if ((i + 1) < navList.size()) {\n                nextPos = navList.get(i + 1).getNavPosition();\n            }\n            // calculate new position of current nav element\n            float newPos;\n            if ((nextPos - navPos) > 1) {\n                newPos = navPos + 1;\n            } else {\n                newPos = (navPos + nextPos) / 2;\n            }\n\n            // check new maxValue of positions and increase it\n            if (navPos > maxValue) {\n                maxValue = navPos;\n            }\n\n            // if the element is the current file, mark it in selectbox\n            if ((curNav != null) && curNav.getNavText().equals(navText) && (curNav.getNavPosition() == navPos)) {\n                options.add(\n                    CmsEncoder.escapeHtml(\n                        messages.key(Messages.GUI_CHNAV_POS_CURRENT_1, new Object[] {ne.getFileName()})));\n                values.add(\"-1\");\n            } else {\n                options.add(CmsEncoder.escapeHtml(navText + \" [\" + ne.getFileName() + \"]\"));\n                values.add(newPos + \"\");\n            }\n        }\n\n        // add the entry: at the last position\n        options.add(messages.key(Messages.GUI_CHNAV_POS_LAST_0));\n        values.add((maxValue + 1) + \"\");\n\n        // add the entry: no change\n        options.add(messages.key(Messages.GUI_CHNAV_NO_CHANGE_0));\n        if ((curNav != null) && (curNav.getNavPosition() == Float.MAX_VALUE)) {\n            // current resource has no valid position, use \"last position\"\n            values.add((maxValue + 1) + \"\");\n        } else {\n            // current resource has valid position, use \"-1\" for no change\n            values.add(\"-1\");\n        }\n\n        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(attributes)) {\n            attributes = \" \" + attributes;\n        } else {\n            attributes = \"\";\n        }\n        return CmsWorkplace.buildSelect(\n            \"name=\\\"\" + PARAM_NAVPOS + \"\\\"\" + attributes,\n            options,\n            values,\n            values.size() - 1,\n            true);\n    }", "public void log(ILogRecord record){\n  try {\n    extractInfoFromLogFor(record);\n  }\n catch (  SSOException e) {\n    Debug.error(\"Logger.log \" + e.getMessage());\n  }\n  if (record instanceof java.util.logging.LogRecord) {\n    Object logBy=record.getLogBy();\n    Object cred=(logBy instanceof Subject) ? getPrivateCred((Subject)logBy) : logBy;\n    log((java.util.logging.LogRecord)record,cred);\n  }\n else {\n    Debug.error(\"Logger.log: cannot log non java.util.logging.LogRecord class\");\n  }\n}\n", "public synchronized void close ( ) throws IOException { if ( journalWriter == null ) { return ; } for ( Entry entry : new ArrayList < Entry > ( lruEntries . values ( ) ) ) { if ( entry . currentEditor != null ) { entry . currentEditor . abort ( ) ; } } tr", "public int size ( ) { return _pos ; }", "public void afterLast(){\n  currentIndex=bindingSets.size() + 1;\n}\n", "public void setOriginalArtist(String artist)\n\t{\n\t\tif (allow(ID3V2))\n\t\t{\n\t\t\tid3v2.setTextFrame(ID3v2Frames.ORIGINAL_ARTIST, artist);\n\t\t}\n\t}", "private void eatImage(){\n  if (getBitePosition()) {\n    setBittenImage();\n  }\n}\n", "public Map<PluginClassLoaderDef, ClassLoader> create(Collection<PluginClassLoaderDef> defs) {\n    ClassLoader baseClassLoader = baseClassLoader();\n\n    ClassloaderBuilder builder = new ClassloaderBuilder();\n    builder.newClassloader(API_CLASSLOADER_KEY, baseClassLoader);\n    builder.setMask(API_CLASSLOADER_KEY, apiMask());\n\n    for (PluginClassLoaderDef def : defs) {\n      builder.newClassloader(def.getBasePluginKey());\n      builder.setParent(def.getBasePluginKey(), API_CLASSLOADER_KEY, new Mask());\n      builder.setLoadingOrder(def.getBasePluginKey(), def.isSelfFirstStrategy() ? SELF_FIRST : PARENT_FIRST);\n      for (File jar : def.getFiles()) {\n        builder.addURL(def.getBasePluginKey(), fileToUrl(jar));\n      }\n      exportResources(def, builder, defs);\n    }\n\n    return build(defs, builder);\n  }", "public static String unescapeHTML(String str){\n  StringBuilder rtn=new StringBuilder();\n  int posStart=-1;\n  int posFinish=-1;\n  while ((posStart=str.indexOf('&',posStart)) != -1) {\n    int last=posFinish + 1;\n    posFinish=str.indexOf(';',posStart);\n    if (posFinish == -1)     break;\n    rtn.append(str.substring(last,posStart));\n    if (posStart + 1 < posFinish) {\n      rtn.append(unescapeHTMLEntity(str.substring(posStart + 1,posFinish)));\n    }\n else {\n      rtn.append(\"&;\");\n    }\n    posStart=posFinish + 1;\n  }\n  rtn.append(str.substring(posFinish + 1));\n  return rtn.toString();\n}\n", "    public void removeFromSession(String key) {\n\n        AssertUtil.assertNotEmpty(key);\n\n        HttpSession session = this.getSession();\n        session.removeAttribute(key);\n\n    }\n", "public void add(ClosingAwareWebDriver driver){\n  drivers.add(driver);\n}\n", "public ByteBuffer decryptBuffer ( String cryptFilterName , PDFObject streamObj , ByteBuffer streamBuf ) throws PDFParseException ;", "\tpublic XmlNode getChild (String name) {\n\t\tfor (int x = 0; x < vChildren.size (); x++)\n\t\t\tif (((XmlNode) vChildren.elementAt (x)).getName ().equals (name)) return (XmlNode) vChildren.elementAt (x);\n\t\treturn null;\n\t}\n", "public static <E> EmptyIterator<E> get() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tEmptyIterator<E> iter = (EmptyIterator<E>) INSTANCE;\n\t\treturn iter;\n\t}", "public static boolean isImage(String mime) {\n\t\ttry {\n\t\t\tfinal MimeType type = new MimeType(mime);\n\t\t\treturn IMAGE.equalsIgnoreCase(type.getPrimaryType());\n\t\t} catch (MimeTypeParseException e) {\n\t\t\t//\n\t\t}\n\t\treturn false;\n\t}", "public JPasswordQualityField(int columns){\n  initComponents(columns);\n}\n", "public static String docToString(Document dom){\n  return XMLUtils.docToString1(dom);\n}\n", "public void setMatchingEventTypes(java.util.Collection<String> matchingEventTypes) {\n        if (matchingEventTypes == null) {\n            this.matchingEventTypes = null;\n            return;\n        }\n\n        this.matchingEventTypes = new java.util.ArrayList<String>(matchingEventTypes);\n    }", "public void removeLogFile ( LogFile logFile ) { logFileMap . remove ( logFile . getFile ( ) ) ; }", "\tpublic boolean isNormWord() {\n\t\treturn (wordTypeValue & NORMWORD) > 0;\n\t}\n", "public void onDrawerOpened ( View drawerView ) { super . onDrawerOpened ( drawerView ) ; }", "public static String readStringFromFile(String path, SparkContext sc) throws IOException {\n        return readStringFromFile(path, sc.hadoopConfiguration());\n    }", "protected RamlResponse extractResponseFromMethod(Method method,String responseComment){\n  RamlModelFactory ramlModelFactory=RamlModelFactoryOfFactories.createRamlModelFactory();\n  RamlResponse response=ramlModelFactory.createRamlResponse();\n  String mime=extractMimeTypeFromMethod(method);\n  RamlMimeType jsonType=ramlModelFactory.createRamlMimeTypeWithMime(mime);\n  Class<?> returnType=method.getReturnType();\n  Type genericReturnType=method.getGenericReturnType();\n  Type inferGenericType=TypeHelper.inferGenericType(genericReturnType);\n  if (returnType != null && (returnType.equals(DeferredResult.class) || returnType.equals(ResponseEntity.class))) {\n    if (inferGenericType == null) {\n      inferGenericType=Object.class;\n    }\n    if (inferGenericType instanceof Class) {\n      returnType=(Class<?>)inferGenericType;\n    }\n    genericReturnType=inferGenericType;\n  }\n  jsonType.setSchema(SchemaHelper.convertClassToJsonSchema(genericReturnType,responseComment,javaDocs.getJavaDoc(returnType)));\n  LinkedHashMap<String,RamlMimeType> body=new LinkedHashMap<>();\n  body.put(mime,jsonType);\n  response.setBody(body);\n  if (StringUtils.hasText(responseComment)) {\n    response.setDescription(responseComment);\n  }\n else {\n    response.setDescription(\"Successful Response\");\n  }\n  return response;\n}\n", "public void deleteRule(long ruleID){\n  if (isClosed) {\n    throw new IllegalStateException(TAG + \" is closed.\");\n  }\n  ruleDbAdapter.delete(ruleID);\n  Cursor cursorRuleAction=ruleActionDbAdapter.fetchAll(ruleID,null);\n  while (cursorRuleAction.moveToNext()) {\n    long ruleActionID=getLongFromCursor(cursorRuleAction,RuleActionDbAdapter.KEY_RULEACTIONID);\n    ruleActionDbAdapter.delete(ruleActionID);\n    Cursor cursorRuleActionParameter=ruleActionParameterDbAdapter.fetchAll(ruleActionID,null,null);\n    while (cursorRuleActionParameter.moveToNext()) {\n      long ruleActionParameterID=getLongFromCursor(cursorRuleActionParameter,RuleActionParameterDbAdapter.KEY_RULEACTIONPARAMETERID);\n      ruleActionParameterDbAdapter.delete(ruleActionParameterID);\n    }\n    cursorRuleActionParameter.close();\n  }\n  cursorRuleAction.close();\n  Cursor cursorFilter=ruleFilterDbAdapter.fetchAll(ruleID,null,null,null,null,null);\n  while (cursorFilter.moveToNext()) {\n    long ruleFilterID=getLongFromCursor(cursorFilter,RuleFilterDbAdapter.KEY_RULEFILTERID);\n    ruleFilterDbAdapter.delete(ruleFilterID);\n  }\n  cursorFilter.close();\n}\n", "public static URL[] pathToURLs(String path){\n  StringTokenizer st=new StringTokenizer(path,File.pathSeparator);\n  URL[] urls=new URL[st.countTokens()];\n  int count=0;\n  while (st.hasMoreTokens()) {\n    URL url=fileToURL(new File(st.nextToken()));\n    if (url != null) {\n      urls[count++]=url;\n    }\n  }\n  if (urls.length != count) {\n    URL[] tmp=new URL[count];\n    System.arraycopy(urls,0,tmp,0,count);\n    urls=tmp;\n  }\n  return urls;\n}\n", "    public int getInt(String key) throws JSONException {\n        Object o = get(key);\n        if (o instanceof Byte) {\n            return ((Byte)o).byteValue();\n        } else if (o instanceof Short) {\n            return ((Short)o).shortValue();\n        } else if (o instanceof Integer) {\n            return ((Integer)o).intValue();\n        } else if (o instanceof Long) {\n            return (int) ((Long)o).longValue();\n//#ifndef polish.cldc1.0\n//#         } else if (o instanceof Float) {\n//#             return (int) ((Float)o).floatValue();\n//#         } else if (o instanceof Double) {\n//#             return (int) ((Double)o).doubleValue();\n//#         } else if (o instanceof String) {\n//#             return (int) getDouble(key);\n//#endif\n        } \n        throw new JSONException(\"JSONObject[\" + quote(key) +\n            \"] is not a number.\");\n    }\n", "public ReplDBMSFilteredEvent ( Long firstFilteredSeqno , Short firstFilteredFragno , Long lastFilteredSeqno , Short lastFilteredFragno , boolean lastFrag , String eventId , String sourceId , Timestamp timestamp , long epochNumber ) { super ( firstFiltered", "public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {\n  hasDTD=false;\n  String dtd=UtilProperties.getSplitPropertyValue(UtilURL.fromResource(\"localdtds.properties\"),publicId);\n  if (UtilValidate.isNotEmpty(dtd)) {\n    if (Debug.verboseOn())     Debug.logVerbose(\"[UtilXml.LocalResolver.resolveEntity] resolving DTD with publicId [\" + publicId + \"], systemId [\"+ systemId+ \"] and the dtd file is [\"+ dtd+ \"]\",module);\n    try {\n      URL dtdURL=UtilURL.fromResource(dtd);\n      if (dtdURL == null) {\n        throw new GeneralException(\"Local DTD not found - \" + dtd);\n      }\n      InputStream dtdStream=dtdURL.openStream();\n      InputSource inputSource=new InputSource(dtdStream);\n      inputSource.setPublicId(publicId);\n      hasDTD=true;\n      if (Debug.verboseOn())       Debug.logVerbose(\"[UtilXml.LocalResolver.resolveEntity] got LOCAL DTD input source with publicId [\" + publicId + \"] and the dtd file is [\"+ dtd+ \"]\",module);\n      return inputSource;\n    }\n catch (    Exception e) {\n      Debug.logWarning(e,module);\n    }\n  }\n else {\n    int lastSlash=systemId.lastIndexOf(\"/\");\n    String filename=null;\n    if (lastSlash == -1) {\n      filename=systemId;\n    }\n else {\n      filename=systemId.substring(lastSlash + 1);\n    }\n    URL resourceUrl=UtilURL.fromResource(filename);\n    if (resourceUrl != null) {\n      InputStream resStream=resourceUrl.openStream();\n      InputSource inputSource=new InputSource(resStream);\n      if (UtilValidate.isNotEmpty(publicId)) {\n        inputSource.setPublicId(publicId);\n      }\n      hasDTD=true;\n      if (Debug.verboseOn())       Debug.logVerbose(\"[UtilXml.LocalResolver.resolveEntity] got LOCAL DTD/Schema input source with publicId [\" + publicId + \"] and the file/resource is [\"+ filename+ \"]\",module);\n      return inputSource;\n    }\n else {\n      Debug.logWarning(\"[UtilXml.LocalResolver.resolveEntity] could not find LOCAL DTD/Schema with publicId [\" + publicId + \"] and the file/resource is [\"+ filename+ \"]\",module);\n      return null;\n    }\n  }\n  return defaultResolver.resolveEntity(publicId,systemId);\n}\n", "private void raiseIOException(String host,int port,String protocol){\n  IOExceptionEvent ioError=new IOExceptionEvent(this,host,port,protocol);\n  sipProvider.handleEvent(ioError,null);\n  setState(SIPDialog.TERMINATED_STATE);\n}\n", "public static void copyStream(InputStream is,OutputStream os,long length,DownloadFileManager.OnDownloadListener listener){\n  final int buffer_size=1024;\n  int totalLen=0;\n  try {\n    byte[] bytes=new byte[buffer_size];\n    while (true) {\n      int count=is.read(bytes,0,buffer_size);\n      if (count == -1) {\n        listener.onFinishDownload();\n        break;\n      }\n      if (length != -1 && listener != null) {\n        totalLen=totalLen + count;\n        listener.onProgress(totalLen);\n      }\n      os.write(bytes,0,count);\n    }\n  }\n catch (  Exception ex) {\n    ex.printStackTrace();\n  }\n}\n", "    public void setUp() {\n\n        res = true;\n        sensor.setDouble(new Double(0));\n        sensor.setNullFlag(false);\n        sensor.setExceptionFlag(false);\n\n        server = MBeanServerFactory.createMBeanServer();\n        monitor = new GaugeMonitor();\n\n        try {\n            monitorName = new ObjectName(\n                    \"org.apache.harmony.test.func.api.javax.management.monitor.\"\n                            + \"gaugemonitor:type=GaugeMonitor,id=1\");\n            sensorName = new ObjectName(SinusFunction.SENSOR_NAME_TEMPLATE\n                    + \"1\");\n        } catch (Throwable e) {\n            e.printStackTrace();\n            log.add(\"Test: ERROR: Internal error!\");\n            System.exit(106);\n        }\n\n        monitor.addNotificationListener(nListener, null, \"handback\");\n    }\n", "public static double pchisq(double x){\n  double xh=Math.sqrt(x);\n  return pnorm(xh) - pnorm(-xh);\n}\n", "public boolean isQuoteDelimiter(String character){\n  return (m_QuoteDelimiters.indexOf(character.charAt(0)) > -1);\n}\n", "private static int indexOf ( Object [ ] array , int len , Object elt ) { for ( int i = NUM_ ; i < len ; i ++ ) { if ( elt . equals ( array [ i ] ) ) return i ; } return - NUM_ ; }", "public Element prependElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName, NodeUtils.parser(this).settings()), baseUri());\n        prependChild(child);\n        return child;\n    }", "public static String posBitMask ( final long bits ) { return String . valueOf ( ( ( NUM_ << bits ) & NUM_ ) ^ NUM_ ) ; }", "public boolean hasPermissionsByInternalId(String internalId,Permission... permissions){\n  return hasPermissionsByInternalId(internalId,Arrays.asList(permissions));\n}\n", "private void modifyClassInstanceVariable ( ) { instanceVariable = STR_ ; new Thread ( null ) . start ( ) ; }", "public List children ( ) { return this . children ; }", "@Override\n    public ResourceSet<MessageInteraction> read(final TwilioRestClient client) {\n        return new ResourceSet<>(this, client, firstPage(client));\n    }", "private String[] splitOutGameMoveNumber(String wordToken){\n  if (Character.isDigit(wordToken.charAt(0))) {\n    int firstDotIndex=wordToken.indexOf('.');\n    if (firstDotIndex != -1) {\n      int firstThreeDotIndex=wordToken.indexOf(\"...\");\n      if (firstThreeDotIndex != -1) {\n        if (wordToken.length() > firstThreeDotIndex + 3) {\n          return new String[]{wordToken.substring(0,firstThreeDotIndex),wordToken.substring(firstThreeDotIndex + 3)};\n        }\n else {\n          return new String[]{wordToken.substring(0,firstThreeDotIndex)};\n        }\n      }\n else {\n        if (wordToken.length() > firstDotIndex + 1) {\n          return new String[]{wordToken.substring(0,firstDotIndex),wordToken.substring(firstDotIndex + 1)};\n        }\n else {\n          return new String[]{wordToken.substring(0,firstDotIndex)};\n        }\n      }\n    }\n  }\n  return null;\n}\n", "    public void loadingFailed(LoadingEvent event) {\n\tlogger.warn(\"history loading failed, make a new one\");\n        newHistory();\n        if (UserInterfaceFactory.isGraphicalUserInterfaceInstanciated()) {\n            UserInterfaceFactory.getGraphicalUserInterface().clarify();\n        }\n    }\n", "    public void removeJmxMonitor(String jmxObjectName) {\n        if (jmxObjectName == null) {\n            return;\n        }\n        this.unregisterForMonitorNotifications(jmxObjectName);\n        log.debug(\"Removed [\" + jmxObjectName + \"]. No longer listening for notifications.\");\n    }\n", "@Override protected void beforeExecute(Thread t,Runnable r){\n  if (isAppendTaskName()) {\n    NamedThreadPoolHelper.changeNameBeforeExecute(t,r);\n  }\n  super.beforeExecute(t,r);\n}\n", "\tprivate void breakLine() {\n\t\tisLineReady = true;\n\t\tisInLineBreak = false;\n\t\t// queue an empty line prepend request if one exists\n\t\tprependEmptyLine = isPrependPostBlockEmptyLineRequested;\n\t\treadyFormattedLine = formattedLine.toString();\n\t\tif (isAppendPostBlockEmptyLineRequested) {\n\t\t\tisAppendPostBlockEmptyLineRequested = false;\n\t\t\tisPrependPostBlockEmptyLineRequested = true;\n\t\t} else {\n\t\t\tisPrependPostBlockEmptyLineRequested = false;\n\t\t}\n\t\tformattedLine = new StringBuffer();\n\t}\n", "public void doPhase ( FacesContext context , Lifecycle lifecycle , ListIterator < PhaseListener > listeners ) { context . setCurrentPhaseId ( getId ( ) ) ; PhaseEvent event = null ; if ( listeners . hasNext ( ) ) { event = new PhaseEvent ( context , this . getId ( ) , lifecycle ) ; } Timer timer = Timer . getInstance ( ) ; if ( timer != null ) { timer . startTiming ( ) ; } try { handleBeforePhase ( context , listeners , event ) ; if ( ! shouldSkip ( context ) ) { execute ( context ) ; } } catch ( Throwable e ) { queueException ( context , e ) ; } finally { try { handleAfterPhase ( context , listeners , event ) ; } catch ( Throwable e ) { queueException ( context , e ) ; } if ( timer != null ) { timer . stopTiming ( ) ; timer . logResult ( STR_ + this . getId ( ) . toString ( ) ) ; } context . getExceptionHandler ( ) . handle ( ) ; } }", "public void zoomIn ( ) { m_view . setZoom ( ( m_view . getZoom ( ) * NUM_ ) / STANDARD_ZOOM_FACTOR ) ; ZoomHelpers . keepZoomValid ( m_view ) ; m_graph . updateViews ( ) ; }", "public ListProcessesSynchronizer ( final IDebugger debugger , final ListenerProvider < IDebugEventListener > listeners ) { super ( debugger , listeners ) ; }", "public void onPullEvent ( final PullToRefreshBase < V > refreshView , State state , Mode direction ) ;", "  public ODataClientRequest url(String url) {\n    return new ODataClientRequest(method, url, headers, queryParams, payload);\n  }\n", "public static RuntimeException codeBug(String msg)\n        throws RuntimeException\n    {\n        msg = \"FAILED ASSERTION: \" + msg;\n        RuntimeException ex = new IllegalStateException(msg);\n        // Print stack trace ASAP\n        ex.printStackTrace(S", "public static void clear ( Container self ) { self . removeAll ( ) ; }", "public void pause ( ) { setPaused ( BOOL_ ) ; }", "protected Object available() throws ClassNotFoundException {\r\n        Object result = null;\r\n        if (getVar() != null) {\r\n            Object value = pageContext.getAttribute(getVar(), getVarScope());\r\n            if (value instanceof SlingBean) {\r\n                Class<?> type = getComponentType();\r\n                if (type != null && type.isAssignableFrom(value.getClass())) {\r\n                    result = value;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }", "public void writeBinary(final PacketOutputStream writeBuffer){\n  calendar=Calendar.getInstance();\n  calendar.setTimeInMillis(date.getTime());\n  writeBuffer.writeDateLength(calendar);\n}", "public void setCommand(java.util.Collection<String> command) {\n        if (command == null) {\n            this.command = null;\n            return;\n        }\n\n        this.command = new com.amazonaws.internal.SdkInternalList<String>(command);\n    }", "public static Number acosh(Number a){\n  return FastMath.acosh(a.doubleValue());\n}\n", "private T verifyNewInstance(T t) {\n        if (t!=null && t.getDescriptor()!=this) {\n            // TODO: should this be a fatal error?\n            LOGGER.warning(\"Father of \"+ t+\" and its getDescriptor() points to two different instances. Probably malplaced @Extension. See http://hudson.361315.n4.nabble.com/Help-Hint-needed-Post-build-action-doesn-t-stay-activated-td2308833.html\");\n        }\n        return t;\n    }", "    public void setTextureMappingEnabled(final boolean aUseTexture, final boolean aAffectChildren) {\n        textureMappingEnabled = aUseTexture;\n\n        // propagate changes to children\n        if (aAffectChildren) {\n            for (int i = 0; i < childrens.size(); i++) {\n                JGenericObject nextObject = childrens.get(i);\n                nextObject.setTextureMappingEnabled(aUseTexture, aAffectChildren);\n            }\n        }\n    }\n", "protected int decodeMandatoryVariableParameters(ISUPParameterFactory parameterFactory, byte[] b, int index)\n            throws ParameterException {\n        // FIXME: possibly this should also be per msg, since if msg lacks\n        // proper parameter, decoding wotn pick this up and will throw\n        // some bad output, which wont give a clue about reason...\n        int readCount = 0;\n        // int optionalOffset = 0;\n\n        if (b.length - index > 0) {\n\n            byte extPIndex = -1;\n            try {\n                int count = getNumberOfMandatoryVariableLengthParameters();\n                readCount = count;\n                for (int parameterIndex = 0; parameterIndex < count; parameterIndex++) {\n                    int lengthPointerIndex = index + parameterIndex;\n                    int parameterLengthIndex = b[lengthPointerIndex] + lengthPointerIndex;\n\n                    int parameterLength = b[parameterLengthIndex];\n                    byte[] parameterBody = new byte[parameterLength];\n                    System.arraycopy(b, parameterLengthIndex + 1, parameterBody, 0, parameterLength);\n                    decodeMandatoryVariableBody(parameterFactory, parameterBody, parameterIndex);\n\n                }\n\n                // optionalOffset = b[index + readCount];\n            } catch (ArrayIndexOutOfBoundsException aioobe) {\n                throw new ParameterException(\n                        \"Failed to read parameter, to few octets in buffer, parameter index: \" + extPIndex, aioobe);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(\"Failed to parse, paramet index: \" + extPIndex, e);\n            }\n        } else {\n            throw new ParameterException(\n                    \"To few bytes to decode mandatory variable part. There should be atleast on byte to indicate optional part.\");\n        }\n\n        // return readCount + optionalOffset;\n        return readCount;\n    }", "public URL generateURL() throws MalformedURLException {\n  return computeCompositeUpdateSiteURL(GdtExtPlugin.FEATURE_UPDATE_SITE_URL,null,null,null,null,null);\n}\n", "private RuntimeState ( int state , String stateName ) { this . state = state ; this . stateName = stateName ; }", "public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ) ; }", "public void deltaTotalBlockingTime(long delta)\n   {\n      if (enabled.get() && delta > 0)\n      {\n         totalBlockingTime.addAndGet(delta);\n         totalBlockingTimeInvocations.incrementAndGet();\n\n         if (delta > maxWaitTime.get())\n            ma", "    private void updateSelectionColor() {\n        if (!selectionColorSet) {\n            look.textSelection = FilterSettings.selectionColor;\n            if (look.textSelection == null) {\n                Color a = getBackground();\n                Color b = getSelectionBackground();\n                if ((a != null) && (b != null)) {\n                    look.textSelection = new Color((a.getRed() + b.getRed())\n                                / 2, (a.getGreen() + b.getGreen()) / 2,\n                            (a.getBlue() + b.getBlue()) / 2);\n                }\n            }\n        }\n    }\n", "@GET\n    @Path(\"/enumdef/guid/{guid}\")\n    @Produces(Servlets.JSON_MEDIA_TYPE)\n    public AtlasEnumDef getEnumDefByGuid(@PathParam(\"guid\") String guid) throws AtlasBaseException {\n        AtlasEnumDef ret = typeDefStore.getEnumDefByGuid(guid);\n\n        return ret;\n    }", "public static ParameterizedString asis ( final String constant ) { return new ParameterizedString ( new Constant ( constant ) ) ; }", "static void escape(\n            final Reader reader, final Writer writer, final XmlEscapeSymbols symbols,\n            final XmlEscapeType escapeType, final XmlEscapeLevel escapeLevel)\n            throws IOException {\n\n        if (reader == null) {\n       ", "private static boolean isController ( Resource resource ) { final Boolean b1 = resource . getHandlerClasses ( ) . stream ( ) . map ( null ) . reduce ( Boolean . FALSE , null ) ; final Boolean b2 = resource . getHandlerInstances ( ) . stream ( ) . map ( null ) . reduce ( Boolean . FALSE , null ) ; return b1 || b2 ; }", "public static <V>boolean addListNotNullValue(List<V> sourceList,V value){\n  return (sourceList != null && value != null) ? sourceList.add(value) : false;\n}\n", "private static double[] nextPointAroundLine(double lat1,double lon1,double lat2,double lon2){\n  double x1=lon1;\n  double x2=lon2;\n  double y1=lat1;\n  double y2=lat2;\n  double minX=Math.min(x1,x2);\n  double maxX=Math.max(x1,x2);\n  double minY=Math.min(y1,y2);\n  double maxY=Math.max(y1,y2);\n  if (minX == maxX) {\n    return new double[]{nextLatitudeBetween(minY,maxY),nextLongitudeNear(minX,0.01 * (maxY - minY))};\n  }\n else   if (minY == maxY) {\n    return new double[]{nextLatitudeNear(minY,0.01 * (maxX - minX)),nextLongitudeBetween(minX,maxX)};\n  }\n else {\n    double x=nextLongitudeBetween(minX,maxX);\n    double y=(y1 - y2) / (x1 - x2) * (x - x1) + y1;\n    if (Double.isFinite(y) == false) {\n      y=Math.copySign(90,x1);\n    }\n    double delta=(maxY - minY) * 0.01;\n    y=Math.min(90,y);\n    y=Math.max(-90,y);\n    return new double[]{nextLatitudeNear(y,delta),x};\n  }\n}\n", "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(2);\n  newVector.addElement(new Option(\"\\tSets if binary attributes are to be coded as nominal ones.\",\"N\",0,\"-N\"));\n  newVector.addElement(new Option(\"\\tFor each nominal value a new attribute is created, \\n\" + \"\\tnot only if there are more than 2 values.\",\"A\",0,\"-A\"));\n  return newVector.elements();\n}\n", "\tpublic boolean equals(Object o) {\n\t\tif (o == this) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!(o instanceof QName)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (((uri == null && ((QName) o).uri == null) || uri.equals(((QName) o).uri)) &&\n\t\t\t((localName == null && ((QName) o).localName == null) || localName.equals(((QName) o).localName))) {\n\t\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n", "    public void addReferenceTypeID(long b) {\n\taddID(b, jdwp.referenceTypeIDSize);\n    }\n", "    public boolean isInterceptDfgFieldAccess() {\n        return realPM.isInterceptDfgFieldAccess();\n    }\n", "RandomAccessFile openInputFile ( String fileName ) throws IOException { RandomAccessFile raf ; raf = openInputFileAsZip ( fileName ) ; if ( raf == null ) { File inputFile = new File ( fileName ) ; raf = new RandomAccessFile ( inputFile , STR_ ) ; } return raf ; }", "\tpublic void visitConstructorCall(JConstructorCall self) {\n\t\tnewLine();\n\t\tprint(self.functorIsThis ? \"this\" : \"super\");\n\t\tprint(\"(\");\n\t\tvisitArgs(self.arguments);\n\t\tprint(\");\");\n\t}\n", "public void populate ( ) { for ( int i = NUM_ ; i < ITLCModelLaunchDataPresenter . ALL_FIELDS . length ; i ++ ) { informPresenter ( ITLCModelLaunchDataPresenter . ALL_FIELDS [ i ] ) ; } }", "protected void eStopSlot(SprogSlot s){\n  log.debug(\"Estop slot: \" + s.getSlotNumber() + \" for address: \"+ s.getAddr());\n  s.eStop();\n  notifySlotListeners(s);\n}", "  private void saveUserProfile() {\n    try {\n      Properties p = new Properties();\n      if (backgroundFileName==null)\n        backgroundFileName = \"\";\n      p.setProperty(\"backgroundFileName\",backgroundFileName);\n      String file = System.getProperty(\"user.home\").replace('\\\\','/');\n      if (!file.endsWith(\"/\"))\n        file += \"/\";\n      file += \"profiles/\"+MDIFrame.getInstance().getTitle()+\".cfg\";\n      p.store(new FileOutputStream(new File(file)),\"User Properties\");\n    }\n    catch (Exception ex) {\n      ex.printStackTrace();\n    }\n  }\n", "    public void setContentCollection(ContentCollection collection) {\n        stopWorker();\n        startWorker(collection);\n    }\n", "public Stream<InteractionWord> process(List<PatternReference> patterns){\n  final Set<Word> terms=gatherTerms(patterns);\n  monitor.info(\"Gathered {} terms\",terms.size());\n  calculateTermFrequencies(patterns,terms);\n  monitor.info(\"Calculated frequencies\");\n  sort(patterns);\n  monitor.info(\"Sorted patterns by frequency\");\n  final List<ClusteredPatterns> clusters=cluster(patterns);\n  monitor.info(\"Patterns clustered into {} clusters\",clusters.size());\n  filterClusters(clusters);\n  monitor.info(\"Patterns filtered to {} clusters\",clusters.size());\n  monitor.info(\"Finding interaction words\");\n  return extractInteractionWords(clusters);\n}\n", "\tpublic void setCore(INiCECore core) {\n\t\t// begin-user-code\n\n\t\tniceCore = core;\n\n\t\treturn;\n\n\t\t// end-user-code\n\t}\n", "private void rejectLoop(S2Loop v,int n,List<S2Edge> unusedEdges){\n  for (int i=n - 1, j=0; j < n; i=j++) {\n    unusedEdges.add(new S2Edge(v.vertex(i),v.vertex(j)));\n  }\n}\n", "public boolean leavePlace ()\n    {\n        if (_pendingPlaceId != -1) {\n            return false;\n        }\n\n        _lservice.leavePlace();\n        didLeavePlace();\n\n        // let our observers know that we're no longer in a location\n        _observers.", "public File getPrototype() {\n    final PrecompileDef ref = getRef();\n    if (ref != null) {\n      return ref.getPrototype();\n    }\n    return this.prototype;\n  }", "\tpublic void setMartial (MartialStatus martial) {\n\t\tthis.martial = martial;\n\t}\n", "public void removeValues(Set<Object> values){\n  actionValues.removeAll(values);\n}\n", "private static void garbageCollect(){\n  try {\n    System.gc();\n    Thread.sleep(200);\n    System.runFinalization();\n    Thread.sleep(200);\n    System.gc();\n    Thread.sleep(200);\n    System.runFinalization();\n    Thread.sleep(200);\n  }\n catch (  InterruptedException ex) {\n    ex.printStackTrace();\n  }\n}\n", "public boolean isMatchByID ( ) { return ( _uidToOperateBy != null && ( _templateOperation == SpaceOperations . UPDATE || ( ReadModifiers . isMatchByID ( _operationModifiers ) ) ) ) ; }", "public static void closeWithWarning ( Closeable c ) { if ( c != null ) { try { c . close ( ) ; } catch ( IOException e ) { LOG . warning ( STR_ + e ) ; } } }", "private byte[] readPageHeader(Page page){\n  return page.readBytes(0,this.pageHeaderSize);\n}\n", "public boolean isDefined ( final String register ) { System . out . println ( registers . keySet ( ) ) ; return registers . containsKey ( register ) ; }", "public void removeListener ( final ICodeNodeListener listener ) { m_listeners . removeListener ( listener ) ; }", "private String trimAndParenthesise(String str){\n  String parenthesisedString=str;\n  if (str != null) {\n    str=str.trim();\n    if (!str.startsWith(OPEN_PARENTHESIS)) {\n      parenthesisedString=OPEN_PARENTHESIS + str + CLOSE_PARENTHESIS;\n    }\n  }\n else {\n    parenthesisedString=OPEN_PARENTHESIS + CLOSE_PARENTHESIS;\n  }\n  return parenthesisedString;\n}\n", "public static void createPath(String path,boolean mustCreate) throws IOException {\n  File fpath=new File(path);\n  if (fpath.exists() && mustCreate)   throw new IOException(path + \" already exists\");\n else   if (!fpath.mkdirs())   throw new IOException(\"cannot create path: \" + path);\n}\n", "void onTcpOpen ( PseudoTCPBase tcp ) ;", "private void handleJsonSearchNotes(RequestAndResponse requestAndResponse) throws IOException, ServletException {\n  requestAndResponse.setResponseContentTypeJson();\n  String query=requestAndResponse.getParameter(\"q\");\n  if (query == null) {\n    query=\"\";\n  }\n  query=query.trim();\n  if (!isUserSignedIn(requestAndResponse)) {\n    returnJson400(requestAndResponse,servletText.errorRequiresSignIn(allowSaveIfNotSignedIn));\n  }\n else   if (isUsersAccountClosed(requestAndResponse)) {\n    returnJson400(requestAndResponse,servletText.errorAccountIsClosed());\n  }\n else {\n    try {\n      final StringBuilder result=new StringBuilder();\n      final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));\n      if (user != null) {\n        final ResultsPaginator paginator=new ResultsPaginator(requestAndResponse,null,result,null);\n        result.append(\"{ \\\"results\\\": [\");\n        if (user != null) {\n          boolean first=true;\n          final List<?> results=dbLogic.searchEntriesForUserByNote(user.getId(),query,paginator.getStartPosition(),paginator.getMaxResults());\n          for (          final Object entryUncasted : results) {\n            final Entry entry=(Entry)entryUncasted;\n            final int resultNumber=paginator.next();\n            if (resultNumber == -1) {\n              continue;\n            }\n else             if (resultNumber == 0) {\n              break;\n            }\n            if (!first) {\n              result.append(\",\");\n              first=false;\n            }\n            result.append(\"\\n\");\n            result.append(\"{ \\\"id\\\":\\\"\");\n            result.append(entry.getId());\n            result.append(\"\\\", \\\"note\\\":\\\"\");\n            result.append(StringEscapeUtils.escapeJson(entry.getNoteOrTitle(\"\")));\n            result.append(\"\\\", \\\"quotation\\\":\\\"\");\n            result.append(StringEscapeUtils.escapeJson(entry.getQuotation(\"\")));\n            result.append(\"\\\"}\");\n          }\n        }\n        result.append(\"\\n],\\n\\\"more\\\": \" + (paginator.hasMore() ? \"true\" : \"false\") + \" }\\n\");\n      }\n      dbLogic.commit();\n      requestAndResponse.print(result.toString());\n    }\n catch (    EmptyQueryException e) {\n      returnJson400(requestAndResponse,servletText.errorNeedLongerQuery());\n    }\ncatch (    final PersistenceException e) {\n      logger.log(Level.INFO,\"Exception\",e);\n      returnJson500(requestAndResponse,servletText.errorInternalDatabase());\n    }\n  }\n}\n", "@Override public MemChunkHolder<SysMemAllocator> resizeChunk(MemChunkHolder<SysMemAllocator> mholder,long size){\n  MemChunkHolder<SysMemAllocator> ret=null;\n  boolean ac=null != mholder.getRefId();\n  if (size > 0) {\n    if (currentMemory.get() + size > ma", "public static JSLJob buildPartitionLevelJSLJob(long topLevelJobExecutionId, Properties jobProperties, Step step, int partitionInstance) {\n\n        ObjectFactory jslFactory = new ObjectFactory();\n        JSLJob subJob = jslFactory.createJSLJob();\n        \n        // Uses the top-level job execution id.   Note the RI used to use the INSTANCE id, so this is \n        // a big change.\n        String subJobId = generateSubJobId(topLevelJobExecutionId, step.getId(), partitionInstance);\n        subJob.setId(subJobId);\n        \n        //Copy all job properties (from parent JobContext) to partitioned step threads\n        subJob.setProperties(CloneUtility.javaPropsTojslProperties(jobProperties));\n\n        // Add one step to job\n        Step newStep = jslFactory.createStep();\n        \n        //set id\n        newStep.setId(step.getId());\n        \n        /***\n         * deep copy all fields in a step\n         */\n        // Not used at partition level\n        //newStep.setAllowStartIfComplete(step.getAllowStartIfComplete());\n        \n        if (step.getBatchlet() != null){\n        \tnewStep.setBatchlet(CloneUtility.cloneBatchlet(step.getBatchlet()));\n        }\n        \n        if (step.getChunk() != null) {\n        \tnewStep.setChunk(CloneUtility.cloneChunk(step.getChunk()));\n        }\n        \n        // Do not copy next attribute and control elements.  Transitioning should ONLY\n        // take place on the main thread.\n        \n        //Do not add step listeners, only call them on parent thread.\n\n        //Add partition artifacts and set instances to 1 as the base case \n        Partition partition = step.getPartition();\n        if (partition != null) {\n        \tif (partition.getCollector() != null) {\n        \t\t\n        \t\tPartition basePartition = jslFactory.createPartition();\n        \t\t\n        \t\tPartitionPlan partitionPlan = jslFactory.createPartitionPlan();\n        \t\tpartitionPlan.setPartitions(null);\n        \t\tbasePartition.setPlan(partitionPlan);\n        \t\t\n        \t\tbasePartition.setCollector(partition.getCollector());\n        \t\tnewStep.setPartition(basePartition);\n                \t\n        \t}\n        }\n        \n        // Not used at partition level\n        //newStep.setStartLimit(step.getStartLimit());\n        newStep.setProperties(CloneUtility.cloneJSLProperties(step.getProperties()));\n        \n        // Don't try to only clone based on type (e.g. ChunkListener vs. StepListener).\n        // We don't know the type at the model level, and a given artifact could implement more\n        // than one listener interface (e.g. ChunkListener AND StepListener).\n        newStep.setListeners(CloneUtility.cloneListeners(step.getListeners()));       \n        \n        //Add Step properties, need to be careful here to remember the right precedence\n        \n        subJob.getExecutionElements().add(newStep);\n\n\n        return subJob;\n    }", "public synchronized void pushScope(String id){\n  scopeStack.push(new Scope(id));\n}\n", "\tprivate String createScriptName() {\n\t\tString name = \"run\";\n\t\tString osName = System.getProperty(\"os.name\").toUpperCase();\n\t\tboolean isWindows = osName.indexOf(\"WINDOWS\") >= 0;\n\t\treturn isWindows ? name + \".bat\" : name + \".sh\";\n\t}\n", "public GitLabApiForm withParam(String name, Object value, boolean required) throws IllegalArgumentException {\r\n\r\n        if (value == null) {\r\n            if (required) {\r\n                throw new IllegalArgumentException(name + \" cannot be empty or null\");\r\n            }\r\n\r\n            return (this);\r\n        }\r\n\r\n        String stringValue = value.toString();\r\n        if (required && stringValue.trim().length() == 0) {\r\n            throw new IllegalArgumentException(name + \" cannot be empty or null\");\r\n        }\r\n\r\n        this.param(name, stringValue);\r\n        return (this);\r\n    }", "public void Continue ( String downloadPath , boolean showDialog ) ;", "public static int numRoutes(int version) {\n    int count = 0;\n    for (Route route : routesList)\n      if (route.getVersion() == version)\n        count++;\n    return count;\n  }", "static AuditLogFilter newScriptedFilter ( ScriptEntry scriptEntry ) { return new ScriptedFilter ( scriptEntry ) ; }", "private static void removeUnusedWeakReferences ( ) { Iterator < Entry < String , WeakReference < TraceableLogger > > > iterator = traceableLoggers . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { if ( iterator . next ( ) . getValue ( ) .", "    public boolean openAnalysis(File f, SaveType saveType) {\n        if (!f.exists() || !f.canRead()) {\n            throw new IllegalArgumentException(\"Can't read \" + f.getPath());\n        }\n\n        mainFrameLoadSaveHelper.prepareForFileLoad(f, saveType);\n\n        mainFrameLoadSaveHelper.loadAnalysis(f);\n        return true;\n    }\n", "   public XMLElement remove(int no) {\n      if (isReadOnly) {\n         throw new RuntimeException(\"Can't remove element from read only structure!\");\n      }\n      if (no < 0 || no >= size())\n         throw new RuntimeException(\"There is no element at position \" + no + \"!\");\n\n      return removeElement(no);\n   }\n", "long size ( ) throws StorageException ;", "    public void setValue(final String value) {\n        if (value == null) {\n            this.value = null;\n            return;\n        }\n        if (List.class.equals(type)) {\n            if (!list.contains(value)) {\n                final StringBuffer allowed = new StringBuffer();\n                allowed.append(\"{\");\n                for (int i = 0; i < list.size(); i++) {\n                    if (i > 0) {\n                        allowed.append(\", \");\n                    }\n                    allowed.append(\"\\\"\" + list.get(i) + \"\\\"\");\n                }\n                allowed.append(\"}\");\n                throw new IllegalArgumentException(\"argument was not in expected value list: \\\"\"\n                        + value + \"\\\" is not in \" + allowed);\n            }\n        } else if (!String.class.equals(type)) {\n            throw new ClassCastException(\"expected argument type was \"\n                    + type + \", but given argument is of type \"\n                    + type.getClass().getName());\n        }\n        this.value = value;\n    }\n", "public static String getErrorResponse(HttpURLConnection connection, boolean isZipped) throws IOException {\n\t\tif (connection != null) {\n\t\t\tInputStream is = null;\n\t\t\ttry {\n\t\t\t\tis = connection.getErrorStream();\n\t\t\t\tif (is != null) {\n\t\t\t\t\tif (isZipped) {\n\t\t\t\t\t\tis = new GZIPInputStream(is);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn Util.readStringFromInputStream(is, \"UTF-8\");\n\t\t\t} finally {\n\t\t\t\tUtil.ensureClosed(is);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "    protected void addUidPropertyDescriptor(Object object) {\n        itemPropertyDescriptors.add\n            (createItemPropertyDescriptor\n                (((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n                 getResourceLocator(),\n                 getString(\"_UI_DeclinedType_uid_feature\"),\n                 getString(\"_UI_PropertyDescriptor_description\", \"_UI_DeclinedType_uid_feature\", \"_UI_DeclinedType_type\"),\n                 _0Package.Literals.DECLINED_TYPE__UID,\n                 true,\n                 false,\n                 false,\n                 ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,\n                 null,\n                 null));\n    }\n", "private CGlobalSettings ( ) { }", "    public void setServiceParams(Hashtable<ID, ? extends Element> params) {\n        serviceParams.clear();\n        \n        if (params == null) {\n            return;\n        }\n\n        for (Map.Entry<ID, ? extends Element> anEntry : params.entrySet()) {\n            Element e = anEntry.getValue();\n            StructuredDocument newDoc = StructuredDocumentUtils.copyAsDocument(e);\n\n            serviceParams.put(anEntry.getKey(), newDoc);\n        }\n\n    }\n", "    public void addPropertyChangeListener( final PropertyChangeListener listener ) {\n        if( propertyChangeSupport_ == null ) {\n            synchronized(this) {\n                if( propertyChangeSupport_ == null ) {\n                    propertyChangeSupport_ = new PropertyChangeSupport(this);\n                }\n            }\n        }\n        propertyChangeSupport_.addPropertyChangeListener(listener);\n    }\n", "public void deleteDynamicGroups(Set groupDNs) throws AMException, SSOException {\n  Iterator iter=groupDNs.iterator();\n  while (iter.hasNext()) {\n    String groupDN=(String)iter.next();\n    AMDynamicGroup group=new AMDynamicGroupImpl(super.token,groupDN);\n    group.delete();\n  }\n}\n", "public static int sizeOfInt ( ) { return NUM_ ; }", "public void addRequest(ActionRequest request,LimitedQueueInfo queueInfo){\n  String requestId=PennStation.requestAction(request,queueInfo);\nsynchronized (this) {\n    mLastRequestIdByType.put(request.type(),requestId);\n    mRequestIds.add(requestId);\n  }\n}", "public void service(HttpServletRequest req, HttpServletResponse resp) \n        throws ServletException, IOException\n    {\n\t    boolean fileFound = sendResourceFile(req, resp);\n\t\tif (!fileFound)\n\t\t    resp.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n//    \tsuper.service(req, resp);\n    }", "public boolean isExerciseStatement(int position){\n  return targetStatements.contains(position);\n}\n", "abstract protected int nextIndex ( ) ;", "private Properties removeRedundantProperties(Properties props){\n  if (props == null) {\n    return null;\n  }\n  Properties clonedProps=(Properties)props.clone();\n  clonedProps.remove(XPathProperties.CONTAINER_JNDI_URL);\n  return clonedProps;\n}", "public static boolean isLegacyIndexingEnabled(Descriptor messageDescriptor) {\n      boolean isLegacyIndexingEnabled = true;\n      for (Option o : messageDescriptor.getFileDescriptor().getOptions()) {\n         if (o.getName().equals(INDEXED_BY_DEFAULT_OPTION)) {\n            isLegacyIndexingEnabled = Boolean.valueOf((String) o.getValue());\n            break;\n         }\n      }\n      return isLegacyIndexingEnabled;\n   }", "private static Tree traverse(Tree parent, List<Tree> kids, Tree node) {\n        for (Tree kid : kids) {\n            if (kid == node) {\n                return parent;\n            }\n\n            Tree ret = node.parent(kid);\n            if (ret != null) {\n                return ret;\n            }\n        }\n        return null;\n    }", "private Tokenizer(final CharSequence text){\n  this.text=text;\n  this.matcher=WHITESPACE.matcher(text);\n  skipWhitespace();\n  nextToken();\n}\n", "private static Pair<String,String> preIndexedRRX(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2){\n  final String address=environment.getNextVariableString();\n  final String index=environment.getNextVariableString();\n  final String tmpVar=environment.getNextVariableString();\n  final String tmpVar1=environment.getNextVariableString();\n  final String tmpVar2=environment.getNextVariableString();\n  final String tmpVar3=environment.getNextVariableString();\n  long baseOffset=offset;\n  instructions.add(ReilHelpers.createBsh(baseOffset++,bt,\"C\",wd,String.valueOf(31),dw,tmpVar1));\n  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,bt,String.valueOf(-1),dw,tmpVar2));\n  instructions.add(ReilHelpers.createOr(baseOffset++,dw,tmpVar1,dw,tmpVar2,dw,tmpVar3));\n  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar3,dw,dWordBitMask,dw,index));\n  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));\n  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,address));\n  instructions.add(ReilHelpers.createStr(baseOffset++,dw,address,dw,registerNodeValue1));\n  return new Pair<String,String>(address,registerNodeValue1);\n}\n", "    public ElementType elementType() {\n        return elementType;\n    }\n", "public static Matrix constructWithCopy(double[][] A){\n  int m=A.length;\n  int n=A[0].length;\n  Matrix X=new Matrix(m,n);\n  double[][] C=X.getArray();\n  for (int i=0; i < m; i++) {\n    if (A[i].length != n) {\n      throw new IllegalArgumentException(\"All rows must have the same length.\");\n    }\n    for (int j=0; j < n; j++) {\n      C[i][j]=A[i][j];\n    }\n  }\n  return X;\n}\n", "  public void cleanDevice(final String sId) {\n    synchronized (DirectoryManager.getInstance().getLock()) {\n      final Iterator it = hmItems.keySet().iterator();\n      while (it.hasNext()) {\n        final Directory directory = getDirectoryByID((String) it.next());\n        if (directory.getDevice().getID().equals(sId)) {\n          it.remove();\n        }\n      }\n    }\n  }\n", "    public void setData3(String data3) {\n        dataSelection.setData3(data3);\n        fireModelChange(VALUE_CHANGED, DATA3);\n    }\n", "    public Service getService() {\n\n        Service  service = new Service( new XMLStringProvider( getWSDD()  ) );\n        return service;\n        \n    }\n", "protected AbstractYieldTermStructure ( final int settlementDays , final Calendar cal , final DayCounter dc ) { super ( settlementDays , cal , dc ) ; }", "\tpublic void setState(int state) {\n\t\tsuper.setState(state);\n\t\tif(super.getState() != Graphic.SELECTED && this.cursor != -1)\n\t\t\tthis.setCursor(-1);\n\t}\n", "   public T remove(Object name) {\n      return map.remove(name);\n   }\n", "void onRenderers ( TrackRenderer [ ] renderers , BandwidthMeter bandwidthMeter ) { for ( int i = NUM_ ; i < RENDERER_COUNT ; i ++ ) { if ( renderers [ i ] == null ) { renderers [ i ] = new DummyTrackRenderer ( ) ; } } this . audioRenderer = renderers [ TYPE_AUDIO ] ; this . videoRenderer = renderers [ TYPE_VIDEO ] ; this . codecCounters = videoRenderer instanceof MediaCodecTrackRenderer ? ( ( MediaCodecTrackRenderer ) videoRenderer ) . codecCounters : renderers [ TYPE_AUDIO ] instanceof MediaCodecTrackRenderer ? ( ( MediaCodecTrackRenderer ) renderers [ TYPE_AUDIO ] ) . codecCounters : null ; this . bandwidthMeter = bandwidthMeter ; pushSurface ( BOOL_ ) ; player . prepare ( renderers ) ; rendererBuildingState = RENDERER_BUILDING_STATE_BUILT ; }", "    public void setXMax (float value)  {\n        this.xMax = value; \n    }\n", "public static base_response renumber(nitro_service client) throws Exception {\n\t\tnspbr6 renumberresource = new nspbr6();\n\t\treturn renumberresource.perform_operation(client,\"renumber\");\n\t}", "public void panel ( GerritUiExtensionPoint extensionPoint , Panel . EntryPoint entry ) { panel ( extensionPoint . name ( ) , wrap ( entry ) ) ; }", "private void recyclePreviousSlideView(int position, View view) {\n        // Remove view from our hierarchy\n        removeView(view);\n\n        // Add to recycled views\n        int viewType = adapter.getItemViewType(position);\n        recycledViews.put(viewType, view);\n        view.destroyDrawingCache();\n\n        if (view instanceof ImageView) {\n            ((ImageView) view).setImageDrawable(null);\n        }\n\n        Log.d(\"SlideShowView\", \"View added to recycling bin: \" + view);\n\n        // The adapter can recycle some memory with discard slide\n        adapter.discardSlide(position);\n\n        // The adapter can prepare the next slide\n        prepareSlide(getPlaylist().getNextSlide());\n    }", "    private void addGuild(Guild guild) {\n        this.guilds.put(guild.guildName.toUpperCase(), guild);\n    }\n", "public Matrix4d setLookAlong(double dirX, double dirY, double dirZ,\n                                 double upX, double upY, double upZ) {\n        // Normalize direction\n        double invDirLength = 1.0 / Math.sqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);\n        dirX *= -invDirLength;\n        dirY *= -invDirLength;\n        dirZ *= -invDirLength;\n        // left = up x direction\n        double leftX, leftY, leftZ;\n        leftX = upY * dirZ - upZ * dirY;\n        leftY = upZ * dirX - upX * dirZ;\n        leftZ = upX * dirY - upY * dirX;\n        // normalize left\n        double invLeftLength = 1.0 / Math.sqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);\n        leftX *= invLeftLength;\n        leftY *= invLeftLength;\n        leftZ *= invLeftLength;\n        // up = direction x left\n        double upnX = dirY * leftZ - dirZ * leftY;\n        double upnY = dirZ * leftX - dirX * leftZ;\n        double upnZ = dirX * leftY - dirY * leftX;\n\n        m00 = leftX;\n        m01 = upnX;\n        m02 = dirX;\n        m03 = 0.0;\n        m10 = leftY;\n        m11 = upnY;\n        m12 = dirY;\n        m13 = 0.0;\n        m20 = leftZ;\n        m21 = upnZ;\n        m22 = dirZ;\n        m23 = 0.0;\n        m30 = 0.0;\n        m31 = 0.0;\n        m32 = 0.0;\n        m33 = 1.0;\n        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;\n\n        return this;\n    }", "public static RequestInfo getRequestInfo(HttpServletRequest request) {\n      RequestInfo requestInfo = (RequestInfo) request.getAttribute(REQUEST_INFO);\n      if (requestInfo == null) {\n         requestInfo = new RequestInfo(request);\n         request.setAttribute(REQUEST_INFO, requestInfo);\n      }\n      \n      return requestInfo;\n   }", "public static Writer leftShift ( Socket self , Object value ) throws IOException { return IOGroovyMethods . leftShift ( self . getOutputStream ( ) , value ) ; }", "public Distance getRadius(Velocity velocity)\r\n    {\r\n        Distance circle = velocity.getDistance(getTimeForFullCircle());\r\n        circle.mul(1/Math.PI);\r\n        return circle;\r\n    }", "public int indexSubTableArrayOffset ( ) { return this . internalReadData ( ) . readULongAsInt ( Offset . bitmapSizeTable_indexSubTableArrayOffset . offset ) ; }", "public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ) ; }", "public static int computeBlockSize(MatrixCharacteristics mc){\n  int brlen=mc.getRowsPerBlock();\n  int basic=Math.max((int)(FrameBlock.BUFFER_SIZE / mc.getCols()),1);\n  int div=(int)Math.ceil((double)brlen / basic);\n  while (brlen % div != 0)   div++;\n  return brlen / div;\n}\n", "    private String getProbesCategoryName(Integer peopleId, String category, Integer daysInPast) throws Exception{\n        \ttry {\n\t\t\tString categoryString = \"\";\n            \t\tsoapProbes sp = new soapProbes(peopleId);\n\t\t\tProbeSnail pbSnail = sp.getCategorySnail(daysInPast);\n\t\t\tfor(int i=0; i< pbSnail.getElts().length; i++){\n\t\t\t\tif (pbSnail.getElts()[i].getInternalName().equals(category)){\n\t\t\t\t\tcategoryString = pbSnail.getElts()[i].getDisplayName();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn categoryString;\n\t\t} catch (Exception e) {\n           \t\tthrow new Exception (\"Problem while calling webservice method : \"+e.getMessage(), e);\n        \t}\n\t}\n", "public int[] suffStats(String cand_str,int i){\n  int[] stats=new int[suffStatsCount];\n  if (!cand_str.equals(\"\")) {\n    String[] words=cand_str.split(\"\\\\s+\");\n    set_prec_suffStats(stats,words,i);\n    stats[suffStatsCount - 2]=words.length;\n    stats[suffStatsCount - 1]=effLength(words.length,i);\n  }\n else {\n    String[] words=new String[0];\n    set_prec_suffStats(stats,words,i);\n    stats[suffStatsCount - 2]=0;\n    stats[suffStatsCount - 1]=effLength(0,i);\n  }\n  return stats;\n}\n", "public static void fixLocale(Context context){\n  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);\n  String language=prefs.getString(Global.PREF_KEY_USER_LOCALE,\"\");\n  Locale locale=Global.systemLocale;\n  if ((language != null) && (!language.isEmpty())) {\n    locale=new Locale(language);\n  }\n  if (locale != null) {\n    Locale.setDefault(locale);\n    Configuration config=new Configuration();\n    config.locale=locale;\n    Resources resources=context.getResources();\n    resources.updateConfiguration(config,resources.getDisplayMetrics());\n    if (context instanceof LocalizedActivity) {\n      ((LocalizedActivity)context).myLocale=locale;\n    }\n  }\n}\n", "String getWhereClause() {\r\n\r\n        final StringGrabber sgWhere = new StringGrabber();\r\n\r\n        List<Field> primaryKeyFieldList = getPrimaryKeyFieldList();\r\n\r\n        if (primaryKeyFieldList.size() > 0) {\r\n\r\n            sgWhere.append(\"WHERE \");\r\n\r\n            for (Field field : primaryKeyFieldList) {\r\n                DBColumn dbColumn = field.getAnnotation(DBColumn.class);\r\n\r\n                sgWhere.append(dbColumn.columnName());\r\n                sgWhere.append(\" = ? AND \");\r\n\r\n            }\r\n\r\n            sgWhere.removeTail(5);\r\n        }\r\n\r\n        return sgWhere.toString();\r\n    }", "    public Node visitChildren(NodeVisitor v) {\n\tList formals = visitList(this.formals, v);\n\tList throwTypes = visitList(this.throwTypes, v);\n\tBlock body = (Block) visitChild(this.body, v);\n\treturn reconstruct(formals, throwTypes, body);\n    }\n", "boolean removeAcceleratorAt ( int index ) ;", "public OutlineFont ( String baseFont , PDFObject fontObj , PDFFontDescriptor descriptor ) throws IOException { super ( baseFont , descriptor ) ; PDFObject firstCharObj = fontObj . getDictRef ( STR_ ) ; PDFObject lastCharObj = fontObj . getDictRef ( STR_ )", "void onDismiss ( ) ;", "protected final void mapUpdate(Map map, Object key, Object value) {\n        Object o = map.get(key);\n        /*\n          If a value exists in map.get(key), convert the \"value\" parameter into\n          the type of map.get(key).  It's a best guess as to what the type of the\n          Map _should_ be without any further reflective information about the\n          types contained in the map.\n         */\n        if(o != null) {\n            Class type = o.getClass();\n            value = ParseUtils.convertType(value, type);\n        }\n\n        map.put(key, value);\n    }", "    public int searchAndReplace(String searchfor, String replacewith) {\n        CellHandle[] cx = getCells();\n        int foundcount = 0;\n        for(int t=0;t<cx.length;t++) {\n            try {\n                cx[t].getFormulaHandle(); // skip formulas...\n            }catch(Exception tx) {\n                // find the string\n                if(!cx[t].isNumber()) {\n                    String v = cx[t].getStringVal();\n                    if(v.indexOf(searchfor)>-1) {\n                        cx[t].setVal(StringTool.replaceText(v,searchfor, replacewith));\n                        foundcount++;\n                    }\n                }\n            }\n        }\n        return foundcount;\n    }\n", "private void fireObjectChanged(Binding newBd,long changeID){\n  if (namingListeners == null || namingListeners.size() == 0)   return;\n  Binding oldBd=new Binding(newBd.getName(),null,newBd.isRelative());\n  NamingEvent e=new NamingEvent(eventSrc,NamingEvent.OBJECT_CHANGED,newBd,oldBd,new Long(changeID));\n  support.queueEvent(e,namingListeners);\n}\n", "public void removeGroup(String group) throws ObjectLacksException {\n  assertContains(group);\n  groups.remove(group);\n}\n", "public static < A , S > List < A > unfold_ ( S z , Function < S , Result < Tuple < A , S > > > f ) { return f . apply ( z ) . map ( null ) . getOrElse ( list ( ) ) ; }", "  private void getNextCharacter() throws ParserException {\n    position++;\n    try {\n      character = function.charAt(position-1);\n    } catch(StringIndexOutOfBoundsException e) {\n      throw new ParserException(PAREN_NOT_MATCH);\n    }\n  }\n", "private void closeFile ( ) { if ( plogStream != null ) { try { plogStream . close ( ) ; logger . info ( STR_ + plogFilename + STR_ ) ; } catch ( IOException e ) { logger . warn ( STR_ + plogFilename ) ; } finally { plogStream = null ; } } }", "private CGlobalSettings ( ) { }", "public boolean tableExistsCaseSensitive(DatabaseMetaData dbMetaData,String tableName) throws SQLException {\n  ResultSet rsTables=dbMetaData.getTables(null,null,tableName,null);\n  try {\n    return rsTables.next();\n  }\n  finally {\n    closeJDBCResultSet(rsT", "void postEvent ( Event event ) throws OrmException ;", "private void specialisedFunctions ( ) { Function < Integer , Employee > empFunction = null ; IntFunction < Employee > empFunction2 = null ; DoubleFunction < String > doubleFunction = null ; doubleFunction . apply ( NUM_ ) ; LongFunction < Patient > longFu", "public static String md5Hash(String string) throws NoSuchAlgorithmException {\n  return md5Hash(string.getBytes(StandardCharsets.UTF_8));\n}\n", "\tpublic CorpusVersion tag(String filePath) {\n\t\tint cycles=0;\n\t\treadUntaggedCorpus(filePath);\n\t\tCorpusVersion workingVersion=initialVersion;\n\t\tIterator<TblRule> it = rules.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tworkingVersion = it.next().applyToCorpusVersion(workingVersion);\n\t\t\tcycles++;\n\t\t}\n\t\tLOGGER.log(Level.INFO,\"Applied \"+cycles+\" rules.\");\n\t\treturn workingVersion;\n\t}\n", "private void calculateC(){\n  int length=mSpecification.getExtremaCount() - 1;\n  mIdealFrequencyResponse=new double[length];\n  double sign=1.0;\n  for (int k=0; k < length; k++) {\n    if (k < mExtremalIndices.size()) {\n      int index=mExtremalIndices.get(k);\n      mIdealFrequencyResponse[k]=mGrid.getDesiredResponse()[index] - (sign * mDelta / mGrid.getWeight()[index]);\n      sign=-sign;\n    }\n  }\n}\n", "public static RawMessage toRawMessage(final short sendingNodeId, final ByteBuffer buffer) {\n    buffer.flip();\n\n    final RawMessage message = new RawMessage(buffer.limit());\n\n    message.put(buffer, false);\n\n    buffer.clear();\n\n    final RawMessageHeader header = new RawMessageHeader(sendingNodeId, (short) 0, (short) message.length());\n\n    message.header(header);\n\n    return message;\n  }", "public void ignoreTrailingBlanks(boolean t){\n  this.ignoreTrailingBlanks=t;\n}\n", "public Future < T > [ ] waitForResult ( ) throws InterruptedException { return waitForResult ( - NUM_ , TimeUnit . MILLISECONDS ) ; }", "public void addActionsToActionStateExecutionListAt(final Flow flow, final String actionStateId, final int position, final EvaluateAction... actions) {\n        val actionState = getState(flow, actionStateId, ActionState.class);\n        val currentActions = new ArrayList<Action>();\n        val actionList = actionState.getActionList();\n        actionList.forEach(currentActions::add);\n        val index = position < 0 || position == Integer.MAX_VALUE ? currentActions.size() : position;\n        currentActions.forEach(actionList::remove);\n        Arrays.stream(actions).forEach(a -> currentActions.add(index, a));\n        actionList.addAll(currentActions.toArray(Action[]::new));\n    }", "public static void deleteByColumnValue ( final CConnection connection , final String tableName , final String columnName , final int columnValue ) throws CouldntDeleteException { Preconditions . checkNotNull ( connection , STR_ ) ; Preconditions . checkNo", "public static boolean isLayoutRtl(View view) {\n        if (Build.VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN_MR1) {\n            return view.getLayoutDirection() == View.LAYOUT_DIRECTION_RTL;\n        } else {\n            // All layouts are LTR before JB MR1.\n            return false;\n        }\n    }", "public double likelihood(String[] doc,String tag){\n  double likelihood=0;\n  if (ntw.rowSum(tag) == 0) {\n    return likelihood;\n  }\n  Counter<String> nwd=new Counter<String>();\n  for (  String w : doc) {\n    nwd.inc(w,1);\n  }\n  double norm=0;\n  Map<String,Double> prwd=new Hashtable<String,Double>();\n  for (  Entry<String,Long> e : nwd) {\n    double prw=prw(e.getKey());\n    norm+=prw;\n    prwd.put(e.getKey(),prw);\n  }\n  for (  Entry<String,Double> e : prwd.entrySet()) {\n    double prw=e.getValue() / norm;\n    likelihood+=ptr(tag,e.getKey()) * prw * (1.0 - pcm());\n  }\n  likelihood+=ptr(tag,NOISE) * pcm();\n  return likelihood;\n}\n", "public final boolean isItemInsideView(int position) {\n    float x = (getXForItemAtPosition(position) + offsetX);\n    float y = (getYForItemAtPosition(position) + offsetY);\n    float itemSize = getNoxItemSize();\n    int viewWidth = shapeConfig.getViewWidth", "public static void configureNamingStrategy(final Object strategy) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        configureNamingStrategy(ConnectionSource.DEFAULT, strategy);\n    }", "protected void executeFindBugsTest ( final RunnableWithExceptions runnable ) throws Exception { TestRunnerThread thread = new TestRunnerThread ( runnable ) ; thread . start ( ) ; try { thread . join ( ) ; } catch ( InterruptedException e ) { throw new Ill", "    public void putAll(Map<A,B> t) {\n\tIterator i = t.entrySet().iterator();\n\twhile (i.hasNext()) {\n\t    Map.Entry<A,B> e = (Map.Entry) i.next();\n\t    put(e.getKey(), e.getValue());\n\t}\n    }\n", "\tpublic int internal_WM_GETOBJECT (int wParam, int lParam) {\n\t\treturn 0;\n\t}\t\n", "public static Set<Method> getAllMethodsInHierarchy(Method method) {\n        LinkedHashSet<Method> allMethods = new LinkedHashSet<>();\n        val declaringClass = method.getDeclaringClass();\n        return getAllMethodsInHierarchy(allMethods, declaringClass, method);\n    }", "public static String simpleHostname(String fullHostname){\n  int offset=fullHostname.indexOf('.');\n  if (offset != -1) {\n    return fullHostname.substring(0,offset);\n  }\n  return fullHostname;\n}\n", "public static Object deserializeStream ( final String witness ) throws Exception { FileInputStream fileIs = new FileInputStream ( witness ) ; ObjectInputStream objIs = new ObjectInputStream ( fileIs ) ; return objIs . readObject ( ) ; }", "protected void processProperties(Properties properties) throws ParseException\n    {\n        if (properties == null)\n        {\n            return;\n        }\n\n        for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();)\n        {\n            String option = e.nextElement().toString();\n            \n            Option opt = options.getOption(option);\n            if (opt == null)\n            {\n                throw new UnrecognizedOptionException(\"Default option wasn't defined\", option);\n            }\n            \n            // if the option is part of a group, check if another option of the group has been selected\n            OptionGroup group = options.getOptionGroup(opt);\n            boolean selected = group != null && group.getSelected() != null;\n            \n            if (!cmd.hasOption(option) && !selected)\n            {\n                // get the value from the properties instance\n                String value = properties.getProperty(option);\n\n                if (opt.hasArg())\n                {\n                    if (opt.getValues() == null || opt.getValues().length == 0)\n                    {\n                        try\n                        {\n                            opt.addValueForProcessing(value);\n                        }\n                        catch (RuntimeException exp) //NOPMD\n                        {\n                            // if we cannot add the value don't worry about it\n                        }\n                    }\n                }\n                else if (!(\"yes\".equalsIgnoreCase(value)\n                        || \"true\".equalsIgnoreCase(value)\n                        || \"1\".equalsIgnoreCase(value)))\n                {\n                    // if the value is not yes, true or 1 then don't add the\n                    // option to the CommandLine\n                    continue;\n                }\n\n                cmd.addOption(opt);\n                updateRequiredOptions(opt);\n            }\n        }\n    }", "@Nonnull\n  public TriggerBuilder <T> withIdentity (final String name)\n  {\n    m_aKey = new TriggerKey (name, null);\n    return this;\n  }", "@SuppressWarnings(\"WeakerAccess\")\n    public DelegationRequest<Delegation> delegationWithRefreshToken(@NonNull String refreshToken) {\n        ParameterizableRequest<Delegation, AuthenticationException> request = delegation(Delegation.class)\n                .addParameter(ParameterBuilder.REFRESH_TOKEN_KEY, refreshToken);\n\n        return new DelegationRequest<>(request)\n                .setApiType(DelegationRequest.DEFAULT_API_TYPE);\n    }", "public static void urlOptionsToProperties ( String urlOptions , Properties p ) throws SQLException { String key ; StringTokenizer st = new StringTokenizer ( urlOptions , URL_OPTIONS_DELIMITERS ) ; while ( st . hasMoreTokens ( ) ) { key = st . nextToken ( ", "public void updateQuantity(ItemBean original,ItemBean itemToAdd,boolean add){\n  BigDecimal originalQuantity=original.getQty();\n  BigDecimal quantityToAdd=itemToAdd.getQty();\n  BigDecimal finalQuantity=null;\n  if (!add)   finalQuantity=originalQuantity.subtract(quantityToAdd);\n else   finalQuantity=originalQuantity.add(quantityToAdd);\n  original.setQty(finalQuantity);\n}\n", "public static Map<String,String> toMap(String source){\n  HashMap<String,String> responses=new HashMap<String,String>();\n  String values[]=source.split(\";\");\n  for (  String value : values) {\n    String nv[]=value.split(\"=\");\n    if (nv.length >= 2) {\n      responses.put(nv[0],nv[1]);\n    }\n else     if (nv.length == 1) {\n      responses.put(nv[0],null);\n    }\n  }\n  return responses.size() != 0 ? responses : null;\n}\n", "private void rewriteDefinition(Node definitionSite, String newMethodName) {\n    final Node function;\n    final Node subtreeToRemove;\n    final Node nameSource;\n\n    switch (definitionSite.getToken()) {\n      case GETPROP:\n        function = definitionSite.getParent().getLastChild();\n        nameSource = definitionSite.getLastChild();\n        subtreeToRemove = NodeUtil.getEnclosingStatement(definitionSite);\n        break;\n\n      case STRING_KEY:\n      case MEMBER_FUNCTION_DEF:\n        function = definitionSite.getLastChild();\n        nameSource = definitionSite;\n        subtreeToRemove = definitionSite;\n        break;\n\n      default:\n        throw new IllegalArgumentException(definitionSite.toString());\n    }\n\n    // Define a new variable after the original declaration.\n    Node statement = NodeUtil.getEnclosingStatement(definitionSite);\n    Node newNameNode = IR.name(newMethodName).useSourceInfoIfMissingFrom(nameSource);\n    Node newVarNode = IR.var(newNameNode).useSourceInfoIfMissingFrom(nameSource);\n    statement.getParent().addChildBefore(newVarNode, statement);\n\n    // Attatch the function to the new variable.\n    function.detach();\n    newNameNode.addChildToFront(function);\n\n    // Create the `this` param.\n    String selfName = newMethodName + \"$self\";\n    Node paramList = function.getSecondChild();\n    paramList.addChildToFront(IR.name(selfName).useSourceInfoIfMissingFrom(function));\n    compiler.reportChangeToEnclosingScope(paramList);\n\n    // Eliminate `this`.\n    replaceReferencesToThis(function.getSecondChild(), selfName); // In default param values.\n    replaceReferencesToThis(function.getLastChild(), selfName); // In function body.\n\n    fixFunctionType(function);\n\n    // Clean up dangling AST.\n    NodeUtil.deleteNode(subtreeToRemove, compiler);\n    compiler.reportChangeToEnclosingScope(newVarNode);\n  }", "    public void updateTopic(String userLogin, int topicId) {\n\t\tscheduleIndexTopicAndCalculateCentroidJob(userLogin, topicId, \"update\", topicCentroidJobListener);             \n    }\n", "public void removeRaptorTableListener(RaptorTableListener listener){\n  tableListeners.remove(listener);\n}\n", "    public Zone addSubzone(String subzone) {\n        if (! this.subzones.containsKey(subzone)) {\n            this.subzones.put(subzone, new Zone());\n        }\n\n        return this.subzones.get(subzone);\n    }\n", "public static String reqExpEscape(String str){\n  char[] arr=str.toCharArray();\n  StringBuilder sb=new StringBuilder(str.length() * 2);\n  for (int i=0; i < arr.length; i++) {\n    sb.append('\\\\');\n    sb.append(arr[i]);\n  }\n  return sb.toString();\n}\n", "private static long sumChunksLength(int[] chunkIds, Vec vec, Vec weightsVector, int[] chunkLengths) {\n        for (int i = 0; i < chunkIds.length; i++) {\n            final int chunk = chunkIds[i];\n            chunkLengths[i] = vec.chunkLen(chunk);\n            if (weightsVector == null)\n                continue;\n\n            Chunk weightVecChunk = weightsVector.chunkForChunkIdx(chunk);\n            if (weightVecChunk.atd(0) == 0) chunkLengths[i]--;\n            int nzIndex = 0;\n            do {\n                nzIndex = weightVecChunk.nextNZ(nzIndex, true);\n                if (nzIndex < 0 || nzIndex >= weightVecChunk._len) break;\n                if (weightVecChunk.atd(nzIndex) == 0) chunkLengths[i]--;\n            } while (true);\n        }\n\n        long totalChunkLength = 0;\n        for (int cl : chunkLengths) {\n            totalChunkLength += cl;\n        }\n        return totalChunkLength;\n    }", "    public void submitTaskForm() {\n        if (getTask().validate(getValidationDelegate())) {\n            getTask().saveDirtyFields();\n            getVisitState().getSessionDS().saveAndCommitDirtyElements();\n        }\n    }\n", "public synchronized boolean isClosed(){\n  return closed;\n}\n", "private boolean containsIgnoreCase ( List < String > stringlist , String match ) { for ( String s : stringlist ) { if ( s . equalsIgnoreCase ( match ) ) { return BOOL_ ; } } return BOOL_ ; }", "public void beforeAuthentication ( com . gigaspaces . security . service . SecurityContext securityContext ) throws RemoteException { try { if ( _filterManager . _isFilter [ FilterOperationCodes . BEFORE_AUTHENTICATION ] ) { SpaceContext sc = new SpaceCon", "    public DefaultListModel getAllYearValues() {\n        Vector tmp = getAllYearValues(null, true);\n\n        // copy sorted list to the model\n        DefaultListModel model = new DefaultListModel();\n        for (Iterator clipIter = tmp.iterator(); clipIter.hasNext();) {\n            model.addElement(clipIter.next());\n        }\n\n        return model;\n\n    } // get all years\n", "private void renderTaggedGraphNodesContainerNode ( final CTaggedGraphNodesContainerNode node ) { final List < NaviNode > graphNodes = node . getGraphNodes ( ) ; if ( ! graphNodes . isEmpty ( ) ) { if ( isAllTaggedAndSelected ( graphNodes ) ) { setForeground ( COLOR_TAGGED_SELECTED_ALL ) ; } else if ( isAnyTaggedAndSelected ( graphNodes ) ) { setForeground ( COLOR_TAGGED_SELECTED_ANY ) ; } else if ( isAllTaggedAndInvisible ( graphNodes ) ) { setForeground ( COLOR_TAGGED_INVISIBLE ) ; } setToolTipText ( buildToolTip ( node ) ) ; } }", "    public boolean contains(Resource revision) throws WebDAVException {\n        return false;\n\n    }\n", "public void addFile ( String filename ) { if ( filename != null ) addFile ( new File ( filename ) ) ; }", "public boolean isInternalUser ( ) { return BOOL_ ; }", "public HaltSynchronizer ( final IDebugger debugger , final ListenerProvider < IDebugEventListener > listeners ) { super ( debugger , listeners ) ; }", "    public AbstractButton configure(AbstractButton button) {\n        Assert.notNull(button);\n        button.setText(this.labelInfo.getText());\n        button.setMnemonic(this.labelInfo.getMnemonic());\n        button.setDisplayedMnemonicIndex(this.labelInfo.getMnemonicIndex());\n        configureAccelerator(button, getAccelerator());\n        return button;\n    }\n", "public static Object[] findMethodWithListParameters(Object service, String methodName, Object[] args) {\r\n        Method method = null;\r\n        try {\r\n            //try to skip the listing of all the methods by checking for exactly what\r\n            //we want first\r\n            method = service.getClass().getMethod(methodName, ConversionUtils.convertParams(args));\r\n            log.debug(\"Exact method found (skipping list): {}\", methodName);\r\n            return new Object[] { method, args };\r\n        } catch (NoSuchMethodException nsme) {\r\n            log.debug(\"Method not found using exact parameter types\");\r\n        }\r\n        List<Method> methods = ConversionUtils.findMethodsByNameAndNumParams(service, methodName, 1);\r\n        log.debug(\"Found {} methods\", methods.size());\r\n        if (methods.isEmpty()) {\r\n            return new Object[] { null, null };\r\n        } else if (methods.size() > 1) {\r\n            log.debug(\"Multiple methods found with same name and parameter count; parameter conversion will be attempted in order.\");\r\n        }\r\n        ArrayList<Object> argsList = new ArrayList<Object>();\r\n        if (args != null) {\r\n            for (Object element : args) {\r\n                argsList.add(element);\r\n            }\r\n        }\r\n        args = new Object[] { argsList };\r\n        Object[] params = null;\r\n        for (int i = 0; i < methods.size(); i++) {\r\n            try {\r\n                method = methods.get(i);\r\n                params = ConversionUtils.convertParams(args, method.getParameterTypes());\r\n                if (argsList.size() > 0 && (argsList.get(0) instanceof IConnection) && (!(params[0] instanceof IConnection))) {\r\n                    // Don't convert first IConnection parameter\r\n                    continue;\r\n                }\r\n                return new Object[] { method, params };\r\n            } catch (Exception ex) {\r\n                log.debug(\"Parameter conversion failed\", ex);\r\n            }\r\n        }\r\n        return nullReturn;\r\n    }", "final void appendPrintString(StringBuffer buffer){\n  NaiveASTFlattener printer=new NaiveASTFlattener();\n  accept(printer);\n  buffer.append(printer.getResult());\n}\n", "\tpublic void setModule( Module module ){\n\t\tsetModuleWithoutMenu( module );\n\t\t// String key = module.getMenu();\n\t\t// _______________________________________\n\t\t//\n\t\t// ADD IT TO THE MENU [and remove it from\n\t\t// his eventually previous menu]\n\t\t// _______________________________________\n\t\tfireSystemEvent( ISystemListener._SYSTEM_MODULE_MENUSET_, module );\n\t\tLog.internalLog( \"Module # \" + module.getName() ); //$NON-NLS-1$\n\t}\n", "void updatedResult ( CTrackingResultContainer container , CTrackingResult result ) ;", "public void marshall(ListUpdatesRequest listUpdatesRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (listUpdatesRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(listUpdatesRequest.getName(), NAME_BINDING);\n            protocolMarshaller.marshall(listUpdatesRequest.getNextToken(), NEXTTOKEN_BINDING);\n            protocolMarshaller.marshall(listUpdatesRequest.getMaxResults(), MAXRESULTS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public DefaultValidatedExecutableTypesType<ExecutableValidationType<T>> getOrCreateDefaultValidatedExecutableTypes()\n   {\n      Node node = childNode.getOrCreate(\"default-validated-executable-types\");\n      DefaultValidatedExecutableTypesType<ExecutableValidationType<T>> defaultValidatedExecutableTypes = new DefaultValidatedExecutableTypesTypeImpl<ExecutableValidationType<T>>(this, \"default-validated-executable-types\", childNode, node);\n      return defaultValidatedExecutableTypes;\n   }", "  public Cursor newInstance(CursorFeed feed, CursorListener listener) {\n    return new CursorImpl(feed, listener, _batchSize);\n  }\n", "    public void describeClassInfo(ClassInfo info) {\n        super.describeClassInfo(info);\n\n        info.addClass(\"netscape.application.Popup\", 2);\n        info.addField(LISTVIEW_KEY, OBJECT_TYPE);\n        info.addField(WINDOW_KEY, OBJECT_TYPE);\n        info.addField(CONTAINER_KEY, OBJECT_TYPE);\n        info.addField(SELECTEDITEM_KEY, OBJECT_TYPE);\n        info.addField(TARGET_KEY, OBJECT_TYPE);\n        info.addField(SELECTEDIMAGE_KEY, OBJECT_TYPE);\n\n        info.addField(ENABLED_KEY, BOOLEAN_TYPE);\n    }\n", "    public boolean isRemoved(String breakName) {\n        if (hasMatch(remove, breakName)) {\n            return true;\n        } else {\n            Copy parentCopy = getParentCopy();\n            return (parentCopy != null) ? parentCopy.isRemoved(breakName) : false;\n        }\n    }\n", "HttpResponseTemp < ? > normalLogin ( UserPassword userPassword ) ;", "public void writeDetails ( javax . xml . namespace . QName qname , org . apache . axis . encoding . SerializationContext context ) throws java . io . IOException { context . serialize ( qname , null , this ) ; }", "public void removeTable(int idx){\n  tables.remove(idx);\n}\n", "public static void closeAll(){\n  FullTextSettings.closeAll();\n}\n", "public static boolean processDefinedGlobalHashNames ( Project project , Processor < String > processor ) { return PerlStubIndex . getInstance ( ) . processAllKeys ( PerlVariablesStubIndex . KEY_HASH , project , processor ) ; }", "public static FilesystemFramework getInstanceWithoutProjectsDir(final String rdeck_base_dir) {\n        File baseDir = new File(rdeck_base_dir);\n        File propertyFile = getPropertyFile(getConfigDir(baseDir));\n        String projectsDir=null;\n        if(propertyFile.exists()){\n            PropertyRetriever propertyRetriever = FilesystemFramework.createPropertyRetriever(baseDir);\n            projectsDir = propertyRetriever.getProperty(\"framework.projects.dir\");\n        }\n        return new FilesystemFramework(new File(rdeck_base_dir), new File(projectsDir));\n    }", "    public Literal createLiteral(Object value, URI datatype) {\n        return repository.getValueFactory().createLiteral(toString(value), datatype);\n    }\n", "  private App getApplicationToCall(XThread userThread, ContextUElem context) throws ExActionFailed, ExInternal {\n    try {\n      String appName = context.extendedStringOrXPathString(context.getUElem(ContextUElem.ATTACH), getAttribute(\"app\", userThread.getTopApp().getMnemonicName()));\n      return App.getAppByMnem(appName);\n    }\n    catch (ExServiceUnavailable ex) {\n      throw new ExActionFailed(\"SERVICE\", \"call-module action failed due to service unavailable: \", ex);\n    }\n    catch (ExApp ex) {\n      throw new ExActionFailed(\"APPLICATION\", \"call-module action failed due to application failure: \", ex);\n    }\n  }\n", "    public void endExternalSubset(Augmentations augs) throws XNIException {\n        endParameterEntity(\"[dtd]\", augs);\n    }\n", "\tprotected void changeButtons(boolean flag){\n\t\tfor(int i=0; i < this.grid.length; i++){\n\t\t\tfor(int j=0; j < this.grid[0].length; j++){\n\t\t\t\tthis.grid[i][j].setEnabled(flag);\n\t\t\t}\n\t\t}\n\t}\n", "public static double doubleFromProperties(Properties p,String propName,double defaultValue){\n  double ret=defaultValue;\n  String doubleString=p.getProperty(propName);\n  if (doubleString != null) {\n    try {\n      ret=Double.parseDouble(doubleString.trim());\n    }\n catch (    NumberFormatException e) {\n      ret=defaultValue;\n    }\n  }\n  return ret;\n}\n", "public void testLogReadonlyNonExistent ( ) throws Exception { File logDir = prepareLogDir ( STR_ ) ; DiskLog log = new DiskLog ( ) ; log . setReadOnly ( BOOL_ ) ; log . setLogDir ( logDir . getAbsolutePath ( ) ) ; try { log . prepare ( ) ; throw new Excep", "public CAddressSpaceNode ( final Window parent , final INaviAddressSpace addressSpace , final DefaultTreeModel model ) { m_addressSpace = Preconditions . checkNotNull ( addressSpace , STR_ ) ; m_parent = Preconditions . checkNotNull ( parent , STR_ ) ; m_model = Preconditions . checkNotNull ( model , STR_ ) ; m_addressSpace . addListener ( m_internalSpaceListener ) ; m_addressSpace . getConfiguration ( ) . addListener ( m_internalSpaceConfigurationListener ) ; createChildren ( ) ; }", "    public SoapElement createReferenceXomDescriptor(String url, String language) {\n        SoapElement descriptor = createDescriptorElement(language);\n        SoapElement reference = apiElement(\"reference\",url);\n        descriptor.appendChild(reference);\n        return descriptor;\n    }\n", "static void checkOpcode ( final int opcode , final int type ) { if ( opcode < NUM_ || opcode > NUM_ || TYPE [ opcode ] != type ) { throw new IllegalArgumentException ( STR_ + opcode ) ; } }", "public void setDisplayOnly(boolean displayOnly) {\n\n        m_isDiplayOny = displayOnly;\n        if (displayOnly) {\n            setVisibleColumns(TITLE, PATH);\n        } else {\n            setVisibleColumns(CHECKBOX, TITLE, PATH);\n        }\n    }", "private float[] calculateImageIndents(){\n  mTempMatrix.reset();\n  mTempMatrix.setRotate(-getCurrentAngle());\n  float[] unrotatedImageCorners=Arrays.copyOf(mCurrentImageCorners,mCurrentImageCorners.length);\n  float[] unrotatedCropBoundsCorners=RectUtils.getCornersFromRect(mCropRect);\n  mTempMatrix.mapPoints(unrotatedImageCorners);\n  mTempMatrix.mapPoints(unrotatedCropBoundsCorners);\n  RectF unrotatedImageRect=RectUtils.trapToRect(unrotatedImageCorners);\n  RectF unrotatedCropRect=RectUtils.trapToRect(unrotatedCropBoundsCorners);\n  float deltaLeft=unrotatedImageRect.left - unrotatedCropRect.left;\n  float deltaTop=unrotatedImageRect.top - unrotatedCropRect.top;\n  float deltaRight=unrotatedImageRect.right - unrotatedCropRect.right;\n  float deltaBottom=unrotatedImageRect.bottom - unrotatedCropRect.bottom;\n  float indents[]=new float[4];\n  indents[0]=(deltaLeft > 0) ? deltaLeft : 0;\n  indents[1]=(deltaTop > 0) ? deltaTop : 0;\n  indents[2]=(deltaRight < 0) ? deltaRight : 0;\n  indents[3]=(deltaBottom < 0) ? deltaBottom : 0;\n  mTempMatrix.reset();\n  mTempMatrix.setRotate(getCurrentAngle());\n  mTempMatrix.mapPoints(indents);\n  return indents;\n}\n", "public static boolean hasIntervalParameters(Settings settings, Report report) {\n    \tif (!ReportConstants.NEXT.equals(report.getType())) {\n    \t\treturn false;\n    \t}\n    \tro.nextreports.engine.Report nextReport = NextUtil.getNextReport(settings, report);\n    \tMap<String, QueryParameter> parameters = ParameterUtil.getUsedParametersMap(nextReport);  \n    \tboolean hasStart = false;\n    \tboolean hasEnd = false;\n    \tfor (QueryParameter qp : parameters.values()) {\n    \t\tif (QueryParameter.INTERVAL_START_DATE_NAME.equals(qp.getName())) {\n    \t\t\tif (!ParameterUtil.isDateTime(qp)) {\n    \t\t\t\treturn false;\n    \t\t\t}\n    \t\t\tif (!qp.getSelection().equals(QueryParameter.SINGLE_SELECTION)) {\n    \t\t\t\treturn false;\n    \t\t\t}\n    \t\t\thasStart = true;\n    \t\t} else if (QueryParameter.INTERVAL_END_DATE_NAME.equals(qp.getName())) {\n    \t\t\tif (!ParameterUtil.isDateTime(qp)) {\n    \t\t\t\treturn false;\n    \t\t\t}\n    \t\t\tif (!qp.getSelection().equals(QueryParameter.SINGLE_SELECTION)) {\n    \t\t\t\treturn false;\n    \t\t\t}\n    \t\t\thasEnd = true;\n    \t\t}\n    \t}\n    \treturn (hasStart && hasEnd);    \t\n    }", "private ExchangeRate directLookup ( final Currency source , final Currency target , final Date date ) { if ( System . getProperty ( STR_ ) == null ) throw new UnsupportedOperationException ( STR_ ) ; ExchangeRate rate = null ; QL . require ( ( ( rate = fe", "public void move(RepositoryLocation source,Folder destination,ProgressListener listener) throws RepositoryException {\n  move(source,destination,null,listener);\n}\n", "private static String[] makeColumnNames(ColumnType types[]){\n  String[] header=new String[types.length];\n  for (int i=0; i < types.length; i++) {\n    header[i]=\"C\" + i;\n  }\n  return header;\n}\n", "public void onIabSetupFinished ( IabResult result ) ;", "public Pair addElseIf(ExprBoolean condition,Statement body,Position start,Position end){\n  Pair pair;\n  ifs.add(pair=new Pair(condition,body,start,end));\n  body.setParent(this);\n  return pair;\n}", "    public AFMFile parse(File afmFile) throws IOException {\n        InputStream in = new java.io.FileInputStream(afmFile);\n        try {\n            return parse(in);\n        } finally {\n            IOUtils.closeQuietly(in);\n        }\n    }\n", "protected void create ( String fullId , String type , String localId , Map < String , Object > obj , Connection connection , PreparedStatement createStatement , boolean batchCreate ) throws SQLException , IOException { logger . debug ( STR_ , fullId ) ; S", "public void setTopics(java.util.Collection<Topic> topics) {\n        if (topics == null) {\n            this.topics = null;\n            return;\n        }\n\n        this.topics = new com.amazonaws.internal.SdkInternalList<Topic>(topics);\n    }", "\tpublic String skipSingleLineComment() throws Exception {\n\t\tint currColumn = this.inputSource.getColumn();\n\t\tString line = this.inputSource.getLine();\n\t\tthis.inputSource.nextLine();\n\t\treturn line.substring(currColumn, line.length());\n\t}\n", "private void tryScrollBackToTopWhileLoading ( ) { tryScrollBackToTop ( ) ; }", "private void connect ( Throwable exception ) { Connection c = Connections . getInstance ( context ) . getConnection ( clientHandle ) ; c . changeConnectionStatus ( Connection . ConnectionStatus . ERROR ) ; c . addAction ( STR_ ) ; }", "public void setAccessKey(char accessKey) {\n        if (accessKey == 0x00)\n            return;\n        _anchorState.registerAttribute(AbstractHtmlState.ATTR_GENERAL, HtmlConstants.ACCESSKEY, Character.toString(accessKey));\n    }", "public static java . sql . Date previous ( java . sql . Date self ) { return new java . sql . Date ( previous ( ( Date ) self ) . getTime ( ) ) ; }", "    public void addImage(Image image) {\n        this.images.add(image);\n    }\n", "public ServiceFuture<TopicInner> beginUpdateAsync(String resourceGroupName, String topicName, Map<String, String> tags, final ServiceCallback<TopicInner> serviceCallback) {\n        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, topicName, tags), serviceCallback);\n    }", "  public long getCurrentMeasuringTime() {\n    // NOTE: We put the start time in a local variable to avoid it is changed\n    //       while this method is executed.\n    long startTime = mMeasureStart;\n    if (startTime == -1) {\n      return -1;\n    } else {\n      return System.currentTimeMillis() - startTime;\n    }\n  }\n", "\tprotected void addTagPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_PropertyRange_tag_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_PropertyRange_tag_feature\", \"_UI_PropertyRange_type\"),\n\t\t\t\t OdmPackage.Literals.PROPERTY_RANGE__TAG,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}\n", "public void tagDefineFontInfo(int fontId,String fontName,int flags,int[] codes) throws IOException {\n  fontCodes.put(new Integer(fontId),codes);\n}\n", "public void copyFromGeometry3D(Geometry3D geom){\n  this.mNumIndices=geom.getNumIndices();\n  this.mNumVertices=geom.getNumVertices();\n  this.mVertexBufferInfo=geom.getVertexBufferInfo();\n  this.mIndexBufferInfo=geom.getIndexBufferInfo();\n  this.mTexCoordBufferInfo=geom.getTexCoordBufferInfo();\n  this.mOnlyShortBufferSupported=geom.areOnlyShortBuffersSupported();\n  if (mColors == null)   this.mColorBufferInfo=geom.getColorBufferInfo();\n  this.mNormalBufferInfo=geom.getNormalBufferInfo();\n  this.mOriginalGeometry=geom;\n  this.mHasNormals=geom.hasNormals();\n  this.mHasTextureCoordinates=geom.hasTextureCoordinates();\n}\n", "public void initializeComment ( final ArrayList < IComment > comment ) { m_instruction . initializeGlobalComment ( comment ) ; for ( final IInstructionListener listener : m_listeners ) { listener . initializedComment ( this , comment ) ; } }", "public Long registerUser(String login,String Userpass,String lastname,String firstname,String email,Date age,String street,String additionalname,String fax,String zip,long states_id,String town,long language_id,String phone,String baseURL,boolean generateSipUserData,String jNameTimeZone){\n  boolean sendConfirmation=baseURL != null && !baseURL.isEmpty() && 1 == cfgManagement.getConfValue(\"sendEmailWithVerficationCode\",Integer.class,\"0\");\n  return registerUser(login,Userpass,lastname,firstname,email,age,street,additionalname,fax,zip,states_id,town,language_id,phone,baseURL,generateSipUserData,jNameTimeZone,sendConfirmation);\n}\n", "private JobService rangeGeneral ( String key , long from , long to , String order , Handler < AsyncResult < List < Job > > > handler ) { if ( to < from ) { handler . handle ( Future . failedFuture ( STR_ ) ) ; return this ; } client . zrange ( RedisHelper", "    public boolean isRegistrationChanged() {\n        return (changeFlags & REGISTRATION_CHANGED) == REGISTRATION_CHANGED;\n    }\n", "public abstract char map ( char src ) ;", "    private void _writeFileHeader() throws IOException {\n        super.newline();\n        super.newline();\n        _out.write(\"/*\");\n        super.newline();\n        _out.write(\" *  \");\n        _out.write(\"Generated by TMAPIX I/O <http://www.tmapix.org/>\");\n        super.newline();\n        _out.write(\" */\");\n    }\n", "    private void addToImplied(OwlClass cls) {\n        if (implied.add(cls)) {\n            Set<OwlClass> descend = getDescendants();\n            for (OwlClass desc : descend) {\n                desc.addToImplied(cls);\n            }\n        }\n    }\n", "@Override public void drawRangeMarker(Graphics2D g2,CategoryPlot plot,ValueAxis axis,Marker marker,Rectangle2D dataArea){\n  Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY() + getYOffset(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());\n  if (marker instanceof ValueMarker) {\n    ValueMarker vm=(ValueMarker)marker;\n    double value=vm.getValue();\n    Range range=axis.getRange();\n    if (!range.contains(value)) {\n      return;\n    }\n    GeneralPath path=null;\n    PlotOrientation orientation=plot.getOrientation();\n    if (orientation == PlotOrientation.HORIZONTAL) {\n      float x=(float)axis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());\n      float y=(float)adjusted.getMaxY();\n      path=new GeneralPath();\n      path.moveTo(x,y);\n      path.lineTo((float)(x + getXOffset()),y - (float)getYOffset());\n      path.lineTo((float)(x + getXOffset()),(float)(adjusted.getMinY() - getYOffset()));\n      path.lineTo(x,(float)adjusted.getMinY());\n      path.closePath();\n    }\n else     if (orientation == PlotOrientation.VERTICAL) {\n      float y=(float)axis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());\n      float x=(float)dataArea.getX();\n      path=new GeneralPath();\n      path.moveTo(x,y);\n      path.lineTo(x + (float)this.xOffset,y - (float)this.yOffset);\n      path.lineTo((float)(adjusted.getMaxX() + this.xOffset),y - (float)this.yOffset);\n      path.lineTo((float)(adjusted.getMaxX()),y);\n      path.closePath();\n    }\n    g2.setPaint(marker.getPaint());\n    g2.fill(path);\n    g2.setPaint(marker.getOutlinePaint());\n    g2.draw(path);\n  }\n else {\n    super.drawRangeMarker(g2,plot,axis,marker,adjusted);\n  }\n}\n", "public Object getItemXFromEnd(int distanceFromEnd) {\n        if ((end - (distanceFromEnd)) < start) {\n            throw new IllegalArgumentException(distanceFromEnd\n                + \" extends before the start of this suffix: \");\n        }\n        return sequence.getItem(end - distanceFromEnd);\n    }", "    public Paragraph (ParaStyle style) {\n        this();\n        \n        lineDescriptors = new Vector(0, 1);\n        pStyle = style;\n    }\n", "public static NKey createUser(SecureRandom random)\n            throws IOException, NoSuchProviderException, NoSuchAlgorithmException {\n        return createPair(Type.USER, random);\n    }", "private void obtainButtonBarBackground() {\n        try {\n            setButtonBarBackgroundColor(ThemeUtil.getColor(this, R.attr.buttonBarBackground));\n        } catch (NotFoundException e) {\n            int resourceId = ThemeUtil.getResId(this, R.attr.buttonBarBackground, -1);\n\n            if (resourceId != -1) {\n                setButtonBarBackground(resourceId);\n            } else {\n                setButtonBarBackground(null);\n            }\n        }\n    }", "\tpublic void createNewChapter(int offset, String name) {\n\t\tlastChapterName = name;\n\n\t\tISourceViewer srcview = getSourceViewer();\n\t\tSourceDocument document = (SourceDocument) srcview.getDocument();\n\t\tint oldTopLineIndex = srcview.getTopIndex();\n\t\tint newDocOffset = document.createNewChapter(offset - 1, name);\n\n\t\tint newWidgetOffset = modelOffset2WidgetOffset(srcview, newDocOffset);\n\t\tsrcview.getTextWidget().setCaretOffset(newWidgetOffset);\n\t\tsrcview.setTopIndex(oldTopLineIndex);\n\t\trefreshDisplay();\n\n\t\tboolean oldDirty = dirty;\n\t\tdirty = !document.containsUnparsed();\n\t\tif (dirty != oldDirty) {\n\t\t\tfirePropertyChange(IEditorPart.PROP_DIRTY);\n\t\t}\n\t}\n", "\tpublic int createNewChapter(Integer offset, String name) {\n\t\tString fullText = this.get();\n\t\tint wordEndOffset = offset;\n\t\tchar offset_char = fullText.charAt(wordEndOffset);\n\t\twhile (wordEndOffset < fullText.length()\n\t\t\t\t&& (!Character.isWhitespace(offset_char))) {\n\t\t\twordEndOffset++;\n\t\t\toffset_char = fullText.charAt(wordEndOffset);\n\t\t}\n\n\t\tChapter c = getChapterFromOffset(wordEndOffset);\n\t\tif (c instanceof ChapterText) {\n\t\t\tChapterText newChap = ((ChapterText) c).createNewChapter(\n\t\t\t\t\twordEndOffset - c.getOffset(), name);\n\t\t\tupdate();\n\t\t\treturn newChap.offset;\n\t\t}\n\t\t// else the command is invalid, and it is ignored\n\t\treturn -1;\n\t}\n", "    public void setLowerLimit(Comparable<T> min) {\n        if (min == null) {\n            this.min = null;\n        } else {\n            if (!(myClass.isInstance(min))) {\n                throw new ClassCastException(\"min (\" + min + \") is not an \"\n                        + \"instance of \" + myClass);\n            }\n            this.min = min;\n        }\n    }\n", "    public PdfStream getAsStream(int idx) {\n        PdfStream stream = null;\n        PdfObject orig = getDirectObject(idx);\n        if (orig != null && orig.isStream())\n            stream = (PdfStream) orig;\n        return stream;\n    }\n", "\tpublic void serialize(Nameable entity) {\n\t\tIrUtil.serializeActor(set, outputFolder, entity);\n\t}\n", "    public void getTag(byte[] tag, int t) {\n        if (state == -1) {\n            throw new RuntimeException(\"wrong order of operations\");\n        } else if (state == 0) {\n            finish(false);\n        }\n        System.arraycopy(T, 0, tag, 0, (t < block_size) ? t : block_size);\n    }\n", "public void visitWith(ExecArg.Visitor visitor) {\n        for (ExecArg arg : getList()) {\n            arg.accept(visitor);\n        }\n    }", "@Override\n    public DisassociateIpGroupsResult disassociateIpGroups(DisassociateIpGroupsRequest request) {\n        request = beforeClientExecution(request);\n        return executeDisassociateIpGroups(request);\n    }", "static void appendVmSelectMessage(String vm1,String vm2){\n  outBuf=outBuf.append(getLocalizedMessage(\"java.launcher.opt.vmselect\",vm1,vm2));\n}\n", "public static void animate(Widget source, final Widget target) {\n        animate(source.getElement(), target.getElement());\n    }", "@When(\"^I send a '(.+?)' request to '(.+?)'( with user and password '(.+:.+?)')?( based on '([^:]+?)')?( as '(json|string|gov)')?$\")\n    public void sendRequestNoDataTable(String requestType, String endPoint, String foo, String loginInfo, String bar, String baseData, String baz, String type) throws Exception {\n        Future<Response> response;\n        String user = null;\n        String password = null;\n\n        if (loginInfo != null) {\n            user = loginInfo.substring(0, loginInfo.indexOf(':'));\n            password = loginInfo.substring(loginInfo.indexOf(':') + 1, loginInfo.length());\n        }\n\n        if (baseData != null) {\n            // Retrieve data\n            String retrievedData = commonspec.retrieveData(baseData, type);\n            // Generate request\n            response = commonspec.generateRequest(requestType, false, user, password, endPoint, retrievedData, type, \"\");\n        } else {\n            // Generate request\n            response = commonspec.generateRequest(requestType, false, user, password, endPoint, \"\", type, \"\");\n        }\n\n        // Save response\n        commonspec.setResponse(requestType, response.get());\n    }", "public int indexOf(DurationFieldType type) {\n        for (int i = 0, isize = size(); i < isize; i++) {\n            if (iTypes[i] == type) {\n                return i;\n            }\n        }\n        return -1;\n    }", "    private String retrieveDocument(String key) throws XMLDBException {\n        Object res = collection.getResource(key);\n        String result = null;\n        if (res != null && res instanceof XMLResource) {\n            if (((XMLResource) res).getContent() instanceof String) {\n                result = (String) ((XMLResource) res).getContent();\n            } else {\n                logger.warn(\"Retrieved resource content no string.\");\n            }\n        } else {\n            logger.info(\"Key not found.\" + key);\n        }\n        return result;\n\n    }\n", "private static <T> void foreach(T[] arguments, CallHandler<T> handler, CallInfo callInfo) {\n    if (arguments == null || arguments.length == 0) {\n      throw new InvalidOperationException(\"Empty or null array!\");\n    }\n    for (T argument : arguments) {\n      handler.action(callInfo, argument);\n    }\n  }", "public List < IComment > appendLocalComment ( final String comment ) throws com . google . security . zynamics . binnavi . API . disassembly . CouldntSaveDataException , com . google . security . zynamics . binnavi . API . disassembly . CouldntLoadDataExc", "public void buscarProcedimientoRapidaExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){\n  BusquedasHelper.buscarProcedimientoComunLogic(mappings,(BusquedaElementosForm)form,request,response);\n  setReturnActionFordward(request,mappings.findForward(\"form_busqueda_rapida\"));\n}\n", "        public void setAsText(String text) throws IllegalArgumentException {\n            try {\n                url = new URL(text);\n            } catch (MalformedURLException e) {\n                throw new IllegalArgumentException(\"Invalid URL: \" + text);\n            }\n        }\n", "public void writeUShort ( int us ) throws IOException { this . write ( ( byte ) ( ( us > > NUM_ ) & NUM_ ) ) ; this . write ( ( byte ) ( us & NUM_ ) ) ; }", "public EvalError toEvalError(\n        String msg, SimpleNode node, CallStack callstack  )\n    {\n        if ( Interpreter.DEBUG.get() )\n            printStackTrace();\n\n        if ( msg == null )\n            msg = \"\";\n        else\n            msg += \": \";\n        return new EvalError( msg + this.getMessage(), node, callstack, this );\n    }", "public boolean isFinal(){\n  return queue.isEmpty();\n}\n", "  public void setupAndExecute(NodeList metadataNodeList) {\n    this.metadataNodeList = metadataNodeList;\n    extractedUrls = collectArticleUrls();\n  }\n", "protected CatalogResolver createCatalogResolver() throws MojoExecutionException {\r\n\t\tfinal CatalogManager catalogManager = new CatalogManager();\r\n\t\tcatalogManager.setIgnoreMissingProperties(true);\r\n\t\tcatalogManager.setUseStaticCatalog(false);\r\n\t\t// TODO Logging\r\n\t\tif (getLog().isDebugEnabled()) {\r\n\t\t\tcatalogManager.setVerbosity(Integer.MAX_VALUE);\r\n\t\t}\r\n\t\tif (getCatalogResolver() == null) {\r\n\t\t\treturn new MavenCatalogResolver(catalogManager, this, getLog());\r\n\t\t} else {\r\n\t\t\tfinal String catalogResolverClassName = getCatalogResolver().trim();\r\n\t\t\treturn createCatalogResolverByClassName(catalogResolverClassName);\r\n\t\t}\r\n\t}", "public ApiResponse<ApiSuccessResponse> asyncResumeWithHttpInfo(String id, AsyncResumeData asyncResumeData) throws ApiException {\n        com.squareup.okhttp.Call call = asyncResumeValidateBeforeCall(id, asyncResumeData, null, null);\n        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();\n        return apiClient.execute(call, localVarReturnType);\n    }", "public final double blackVariance ( final Date maturity , final double strike ) { return blackVariance ( maturity , strike , BOOL_ ) ; }", "    public void propertyChange(PropertyChangeEvent evt) {\n        addEvent(evt);\n        if (isLogActive()) {\n            boolean same = evt.getOldValue() == evt.getNewValue();\n            System.out.println();\n            System.out.println(\"Source:\" + evt.getSource());\n            System.out.println(\"Property:\" + evt.getPropertyName());\n            System.out.println(\"Old value:\" + evt.getOldValue());\n            System.out.println(\"New value:\" + evt.getNewValue());\n            System.out.println(\"Old==new: \" + same);\n        }\n    }\n", "public static void assertNotEmpty(final String string, final StatusType status) {\n\t\tRESTAssert.assertNotNull(string, status);\n\t\tRESTAssert.assertFalse(string.isEmpty(), status);\n\t}", "public int read(char[] cbuf,int off,int len) throws IOException {\n  int i=0;\n  for (i=0; i < len; i++) {\n    int ch1=is.read();\n    int ch2=is.read();\n    if (ch1 < 0)     return i == 0 ? -1 : i;\n    cbuf[off + i]=(char)((ch2 << 8) + ch1);\n  }\n  return i;\n}\n", "\tpublic void activate() {\n//\t\tSystem.out.print(\"Set new default transformer:\\n[old] \");\n//\t\tSystem.out.println(System.getProperty(\"javax.xml.transform.TransformerFactory\"));\n//\t\tSystem.out.println(\"[new] \" + className);\n\t\tSystem.setProperty(\"javax.xml.transform.TransformerFactory\", className);\n\t\tTransclipsePlugin.logInfo(\"Set active transformer to \" + \n\t\t\tSystem.getProperty(\"javax.xml.transform.TransformerFactory\"));\n\t}\n", "public void setCorridor(float[] target, List<Long> path) {\n        vCopy(m_target, target);\n        m_path = new ArrayList<>(path);\n    }", "private boolean addWorker(Runnable firstTask,boolean core){\n  retry:   for (; ; ) {\n    int c=ctl.get();\n    int rs=runStateOf(c);\n    if (rs >= SHUTDOWN && !(rs == SHUTDOWN && firstTask == null && !workQueue.isEmpty()))     return false;\n    for (; ; ) {\n      int wc=workerCountOf(c);\n      if (wc >= CAPACITY || wc >= (core ? corePoolSize : maximumPoolSize))       return false;\n      if (compareAndIncrementWorkerCount(c))       break retry;\n      c=ctl.get();\n      if (runStateOf(c) != rs)       continue retry;\n    }\n  }\n  boolean workerStarted=false;\n  boolean workerAdded=false;\n  Worker w=null;\n  try {\n    w=new Worker(firstTask);\n    final Thread t=w.thread;\n    if (t != null) {\n      final ReentrantLock mainLock=this.mainLock;\n      mainLock.lock();\n      try {\n        int rs=runStateOf(ctl.get());\n        if (rs < SHUTDOWN || (rs == SHUTDOWN && firstTask == null)) {\n          if (t.isAlive())           throw new IllegalThreadStateException();\n          workers.add(w);\n          int s=workers.size();\n          if (s > largestPoolSize)           largestPoolSize=s;\n          workerAdded=true;\n        }\n      }\n  finally {\n        mainLock.unlock();\n      }\n      if (workerAdded) {\n        t.start();\n        workerStarted=true;\n      }\n    }\n  }\n  finally {\n    if (!workerStarted)     addWorkerFailed(w);\n  }\n  return workerStarted;\n}\n", "void recycle ( long timeout , TimeUnit unit ) { for ( ; ; ) { Status status = resourceKey . getStatus ( ) ; switch ( status ) { case IN_FLIGHT : if ( resourceKey . goFromInFlightToIdle ( ) ) { releaseToPool ( timeout , unit ) ; return ; } break ; case RET", "\tprivate JMenuBar createMenuBar () {\n\t\tfinal JMenuBar mb = new JMenuBar ();\n\t\tmb.add (createPlatformMenu());\n\t\tmb.add (createTasksMenu());\n\t\tmb.add (createHelpMenu ());\n\t\treturn mb;\n\t}\n", "public TIntObjectIterator ( TIntObjectHashMap < V > map ) { super ( map ) ; this . _map = map ; }", "private void updateBorder ( ) { m_tableBorder . setTitle ( getBorderText ( ) ) ; updateUI ( ) ; }", "public void setTitleFormatter(@Nullable TitleFormatter titleFormatter) {\n    titleChanger.setTitleFormatter(titleFormatter);\n    adapter.setTitleFormatter(titleFormatter);\n    updateUi();\n  }", "public IdQuery ( Class < T > type , Object id , Object routing , QueryResultType queryResultType , int version ) { this ( type . getName ( ) , id , routing , queryResultType , version ) ; }", "protected void handleListenerError(L listener, E event, Throwable error) {\n\n    LOG.debug(\"The listener (\" + listener + \") failed to handle event (\" + event + \"):\", error);\n  }", "    public void moveActiveUnit(Direction direction) {\n        Unit unit = gui.getActiveUnit();\n        if (unit != null && requireOurTurn()) {\n            clearGotoOrders(unit);\n            move(unit, direction);\n        } // else: nothing: There is no active unit that can be moved.\n    }\n", "public char currentChar(){\n  return desc.charAt(curPos);\n}\n", "public String HmmF0Generation(HTSUttModel um,HMMData htsData) throws Exception {\n  int frame, uttFrame, lf0Frame;\n  int hmmState, k, n, i;\n  boolean nobound;\n  HTSModel m;\n  HTSPStream lf0Pst=null;\n  boolean voiced[];\n  CartTreeSet ms=htsData.getCartTreeS", "public static int displayWidth(String s){\n  int width=0;\n  int len=s.length();\n  for (int i=0; i < len; ++i) {\n    width+=displayWidth(s.charAt(i));\n  }\n  return width;\n}\n", "public void removeListener ( final IProcessListener listener ) { listeners . removeListener ( listener ) ; }", "    public void notifyEvent(ObjectEvent ev) {\n        cat.debug(\"notify \" + ev);\n        for (Iterator i=listeners.iterator(); i.hasNext();)\n                ((NetObjectListener)i.next()).update(ev);\n    }\n", "\tpublic void remFilter(Filter f){\n\t\tfilter.removeElement(f);\n\t}\n", "void removeListener ( ITypeDescriptionListener listener ) ;", "\tpublic Tbboss (java.lang.Integer id) {\n\t\tsuper(id);\n\t}\n", "public static base_response unset(nitro_service client, sslvserver resource, String[] args) throws Exception{\n\t\tsslvserver unsetresource = new sslvserver();\n\t\tunsetresource.vservername = resource.vservername;\n\t\treturn unsetresource.unset_resource(client,args);\n\t}", "        private String exportCoord(Coordinate coord) {\n            return coord.x + \" \" + coord.y;\n        }\n", "public void open ( ) { this . database = openHelper . getWritableDatabase ( ) ; }", "public static boolean openUrlPrompt(Component parent,String url,boolean forcePrompt){\n  if (url == null) {\n    return false;\n  }\n  List<String> list=new ArrayList<>();\n  list.add(url);\n  return openUrlsPrompt(parent,list,forcePrompt);\n}", "public static void navigate(Activity context,View transitionView,String savedAvatarUrl){\n  Intent intent=new Intent(context,ChooseAvatarActivity.class);\n  intent.putExtra(ProfileActivity.Extra.AVATAR_URL,savedAvatarUrl);\n  ActivityOptionsCompat optionsCompat=ActivityOptionsCompat.makeSceneTransitionAnimation(context,transitionView,context.getString(R.string.transition_name));\n  ActivityCompat.startActivityForResult(context,intent,ProfileActivity.REQUEST_AVATAR_SELECTION_CODE,optionsCompat.toBundle());\n}\n", "public void removeHeader(Header header){\n  if (header == null) {\n    return;\n  }\n  headers.remove(header);\n}\n", "@Action(name = \"Merge Arrays\",\n            outputs = {\n                    @Output(OutputNames.RETURN_RESULT),\n                    @Output(OutputNames.RETURN_CODE),\n                    @Output(OutputNames.EXCEPTION)\n            },\n            responses = {\n                    @Response(text = ResponseNames.SUCCESS, field = OutputNames.RETURN_CODE, value = ReturnCodes.SUCCESS, matchType = MatchType.COMPARE_EQUAL, responseType = ResponseType.RESOLVED),\n                    @Response(text = ResponseNames.FAILURE, field = OutputNames.RETURN_CODE, value = ReturnCodes.FAILURE, matchType = MatchType.COMPARE_EQUAL, responseType = ResponseType.ERROR, isOnFail = true)\n            })\n    public Map<String, String> execute(@Param(value = Constants.InputNames.ARRAY, required = true) String array1,\n                                       @Param(value = Constants.InputNames.ARRAY, required = true) String array2) {\n\n        Map<String, String> returnResult = new HashMap<>();\n        if (StringUtilities.isBlank(array1)) {\n            final String exceptionValue = NOT_A_VALID_JSON_ARRAY_MESSAGE + ARRAY1_MESSAGE.replaceFirst(\"=\", EMPTY_STRING);\n            return populateResult(returnResult, exceptionValue, new Exception(exceptionValue));\n        }\n\n        if (StringUtilities.isBlank(array2)) {\n            final String exceptionValue = NOT_A_VALID_JSON_ARRAY_MESSAGE + ARRAY2_MESSAGE.replaceFirst(\"=\", EMPTY_STRING);\n            return populateResult(returnResult, new Exception(exceptionValue));\n        }\n\n        JsonNode jsonNode1;\n        JsonNode jsonNode2;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            jsonNode1 = mapper.readTree(array1);\n        } catch (IOException exception) {\n            final String value = INVALID_JSON_OBJECT_PROVIDED_EXCEPTION_MESSAGE + ARRAY1_MESSAGE + array1;\n            return populateResult(returnResult, value, exception);\n        }\n        try {\n            jsonNode2 = mapper.readTree(array2);\n        } catch (IOException exception) {\n            final String value = INVALID_JSON_OBJECT_PROVIDED_EXCEPTION_MESSAGE + ARRAY2_MESSAGE + array2;\n            return populateResult(returnResult, value, exception);\n        }\n\n        final String result;\n        if (jsonNode1 instanceof ArrayNode && jsonNode2 instanceof ArrayNode) {\n            final ArrayNode asJsonArray1 = (ArrayNode) jsonNode1;\n            final ArrayNode asJsonArray2 = (ArrayNode) jsonNode2;\n            final ArrayNode asJsonArrayResult = new ArrayNode(mapper.getNodeFactory());\n\n            asJsonArrayResult.addAll(asJsonArray1);\n            asJsonArrayResult.addAll(asJsonArray2);\n            result = asJsonArrayResult.toString();\n        } else {\n            result = NOT_A_VALID_JSON_ARRAY_MESSAGE + ARRAY1_MESSAGE + array1 + ARRAY2_MESSAGE + array2;\n            return populateResult(returnResult, new Exception(result));\n        }\n        return populateResult(returnResult, result, null);\n    }", "public ButtonColors ( Color top , Color leftOuter , Color leftInner , Color edge , Color edgeShade , Color shadow , Color interior ) { this . top = top ; this . leftOuter = leftOuter ; this . leftInner = leftInner ; this . edge = edge ; this . edgeShade = edgeShade ; this . shadow = shadow ; this . interior = interior ; }", "@CheckReturnValue\n    public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n        return MOCKITO_CORE.mock(classToMock, mockSettings);\n    }", "protected void waitTimeout(long timeout) throws RetriableException {\n  if (timeout > 0) {\n    try {\n      Thread.sleep(timeout);\n    }\n catch (    InterruptedException interException) {\n      LOGGER.debug(\"Interrupted during timeout\",interException);\n    }\n  }\n}\n", "public static Test suite ( ) { return ( new TestSuite ( SelectManyCollectionITCase . class ) ) ; }", "public EaseInOut ( ) { }", "@Override\n  public final Map<String, String> readAttributes(final Reader pReader,\n    final Map<String, Object> pAddParam) throws Exception {\n    Map<String, String> attributesMap = new HashMap<String, String>();\n    StringBuffer sb = new StringBuffer();\n    int chi;\n    while ((chi = pReader.read()) != -1) {\n      char ch = (char) chi;\n      if (ch == '>') {\n        break;\n      }\n      switch (ch) {\n        case '\\\\':\n          sb.append(\"\\\\\");\n          break;\n        case '\"':\n          sb.append(\"\\\"\");\n          break;\n        case '\\n':\n          sb.append(\"\\n\");\n          break;\n        case '\\r':\n          sb.append(\"\\r\");\n          break;\n        case '\\t':\n          sb.append(\"\\t\");\n          break;\n        default:\n          sb.append(ch);\n          break;\n      }\n      evalAttributes(sb, attributesMap);\n    }\n    return attributesMap;\n  }", "public static Stopwatch start(String name, String... tags) {\n    final MonitorConfig.Builder configBuilder = MonitorConfig.builder(name);\n    Preconditions.checkArgument(tags.length % 2 == 0,\n        \"The sequence of (key, value) pairs must have even size", "private void removeBreakpoint ( final IndirectCall indirectCall ) { final Module module = indirectCall . getModule ( ) ; final Address address = indirectCall . getAddress ( ) ; final BreakpointManager breakpointManager = debugger . getBreakpointManager ( ", "private static ImmutableMap<String, ImmutableWorkerInfo> getNonAffinityWorkers(\n      final AffinityConfig affinityConfig,\n      final Map<String, ImmutableWorkerInfo> workerMap\n  )\n  {\n    return ImmutableMap.copyOf(\n        Maps.filterKeys(\n            workerMap,\n            workerHost -> !affinityConfig.getAffinityWorkers().contains(workerHost)\n        )\n    );\n  }", "@Nonnull\n    public static <T> ApprovalBuilder<T> of(Class<T> clazz) {\n        return new ApprovalBuilder<T>(clazz);\n    }", "public Object run ( Class scriptClass , GroovyClassLoader loader ) { try { Class testNGClass = loader . loadClass ( STR_ ) ; Object testng = InvokerHelper . invokeConstructorOf ( testNGClass , new Object [ ] { } ) ; InvokerHelper . invokeMethod ( testng ,", "void touchEntry ( CacheEntry entry ) ;", "private void maybeSampleSyncParams(){\n  long playbackPositionUs=audioTrackUtil.getPlaybackHeadPositionUs();\n  if (playbackPositionUs == 0) {\n    return;\n  }\n  long systemClockUs=System.nanoTime() / 1000;\n  if (systemClockUs - lastPlayheadSampleTimeUs >= MIN_PLAYHEAD_OFFSET_SAMPLE_INTERVAL_US) {\n    playheadOffsets[nextPlayheadOffsetIndex]=playbackPositionUs - systemClockUs;\n    nextPlayheadOffsetIndex=(nextPlayheadOffsetIndex + 1) % MAX_PLAYHEAD_OFFSET_COUNT;\n    if (playheadOffsetCount < MAX_PLAYHEAD_OFFSET_COUNT) {\n      playheadOffsetCount++;\n    }\n    lastPlayheadSampleTimeUs=systemClockUs;\n    smoothedPlayheadOffsetUs=0;\n    for (int i=0; i < playheadOffsetCount; i++) {\n      smoothedPlayheadOffsetUs+=playheadOffsets[i] / playheadOffsetCount;\n    }\n  }\n  if (systemClockUs - lastTimestampSampleTimeUs >= MIN_TIMESTAMP_SAMPLE_INTERVAL_US) {\n    audioTimestampSet=audioTrackUtil.updateTimestamp();\n    if (audioTimestampSet) {\n      long audioTimestampUs=audioTrackUtil.getTimestampNanoTime() / 1000;\n      long audioTimestampFramePosition=audioTrackUtil.getTimestampFramePosition();\n      if (audioTimestampUs < resumeSystemTimeUs) {\n        audioTimestampSet=false;\n      }\n else       if (Math.abs(audioTimestampUs - systemClockUs) > MAX_AUDIO_TIMESTAMP_OFFSET_US) {\n        audioTimestampSet=false;\n        Log.w(TAG,\"Spurious audio timestamp (system clock mismatch): \" + audioTimestampFramePosition + \", \"+ audioTimestampUs+ \", \"+ systemClockUs+ \", \"+ playbackPositionUs);\n      }\n else       if (Math.abs(framesToDurationUs(audioTimestampFramePosition) - playbackPositionUs) > MAX_AUDIO_TIMESTAMP_OFFSET_US) {\n        audioTimestampSet=false;\n        Log.w(TAG,\"Spurious audio timestamp (frame position mismatch): \" + audioTimestampFramePosition + \", \"+ audioTimestampUs+ \", \"+ systemClockUs+ \", \"+ playbackPositionUs);\n      }\n    }\n    if (getLatencyMethod != null) {\n      try {\n        latencyUs=(Integer)getLatencyMethod.invoke(audioTrack,(Object[])null) * 1000L - framesToDurationUs(bytesToFrames(bufferSize));\n        latencyUs=Math.max(latencyUs,0);\n        if (latencyUs > MAX_LATENCY_US) {\n          Log.w(TAG,\"Ignoring impossibly large audio latency: \" + latencyUs);\n          latencyUs=0;\n        }\n      }\n catch (      Exception e) {\n        getLatencyMethod=null;\n      }\n    }\n    lastTimestampSampleTimeUs=systemClockUs;\n  }\n}\n", "public void update(){\n  matrix.removeAll();\n  List<SystemConnectionMemo> connList=InstanceManager.getList(SystemConnectionMemo.class);\n  if (!connList.isEmpty()) {\n    log.debug(\"update of {} connections\",connList.size());\n    reloadConnections(connList);\n  }\n else {\n    log.debug(\"update with no new-form system connections configured\");\n    matrix.add(new JLabel(\"No new-form system connections configured\"));\n  }\n}\n", "private String showPrompt(String prompt) {\n        verifySystemOut();\n        cursorMove = 0;\n        if (!userInputActive) {\n            return readLine(prompt, false);\n        }\n\n        out.print(prompt);\n        out.flush();\n        return null;\n    }", "public static void toggleBreakpoint ( final BackEndDebuggerProvider debuggerProvider , final INaviCodeNode codeNode , final int row ) { Preconditions . checkNotNull ( debuggerProvider , STR_ ) ; Preconditions . checkNotNull ( codeNode , STR_ ) ; final INa", "public static List<List<Object>> queryResults(Connection connection,\n\t\t\tString sql, String[] args, GeoPackageDataType[] dataTypes,\n\t\t\tInteger limit) {\n\t\tResultSetResult result = wrapQuery(connection, sql, args);\n\t\tList<List<Object>> results = ResultUtils.buildResults(result,\n\t\t\t\tdataTypes, limit);\n\t\treturn results;\n\t}", "public org.grails.datastore.mapping.query.api.ProjectionList countDistinct(String propertyName, String alias) {\n        final CountProjection proj = Projections.countDistinct(calculatePropertyName(propertyName));\n        addProjectionToList(proj, alias);\n        return this;\n    }", "private void parseAtomServiceDocument(final Document document) throws ProponoException {\n        final Element root = document.getRootElement();\n        final List<Element> spaces = root.getChildren(\"workspace\", AtomService.ATOM_PROTOCOL);\n        for (final Element e : spaces) {\n            addWorkspace(new ClientWorkspace(e, this, uri));\n        }\n    }", "public static TxConfig external() {\n        final TxConfig cfg = new TxConfig();\n        cfg.external = true;\n        // currently only only notx and optimistic transactions supported\n        cfg.txtype = ODatabaseRecordThreadLocal.instance().get()\n                .getTransaction() instanceof OTransactionNoTx\n                ? OTransaction.TXTYPE.NOTX : OTransaction.TXTYPE.OPTIMISTIC;\n        cfg.rollbackOn.clear();\n        cfg.ignore.clear();\n        return cfg;\n    }", "    public void setEnabled( final boolean isEnabled ) {\n        final boolean oldValue = isEnabled_;\n        isEnabled_ = isEnabled;\n\n        if( propertyChangeSupport_ != null && oldValue != isEnabled_ ) {\n            propertyChangeSupport_.firePropertyChange(\"enabled\",\n                                                      isEnabled_,\n                                                      oldValue );\n        }\n    }\n", "public float inPhaseAbsolute(){\n  return Math.abs(mLeft);\n}\n", "\tpublic void setAdminHandles(Collection<String> admins) {\n\t\tadminHandles.clear();\n\t\tadminHandles.addAll(admins);\n\t}\n", "private static List<? extends Tag<?>> addAdditionalMetadataTags(Properties jobProps, List<? extends Tag<?>> inputTags) {\n    List<Tag<?>> metadataTags = Lists.newArrayList(inputTags);\n    String jobId;\n\n    // generate job id if not already set\n    if (jobProps.containsKey(ConfigurationKeys.JOB_ID_KEY)) {\n      jobId = jobProps.getProperty(ConfigurationKeys.JOB_ID_KEY);\n    } else {\n      jobId = JobLauncherUtils.newJobId(JobState.getJobNameFromProps(jobProps));\n      jobProps.put(ConfigurationKeys.JOB_ID_KEY, jobId);\n    }\n\n    String jobExecutionId = Long.toString(Id.Job.parse(jobId).getSequence());\n\n    // only inject flow tags if a flow name is defined\n    if (jobProps.containsKey(ConfigurationKeys.FLOW_NAME_KEY)) {\n      metadataTags.add(new Tag<>(TimingEvent.FlowEventConstants.FLOW_GROUP_FIELD,\n          jobProps.getProperty(ConfigurationKeys.FLOW_GROUP_KEY, \"\")));\n      metadataTags.add(\n          new Tag<>(TimingEvent.FlowEventConstants.FLOW_NAME_FIELD, jobProps.getProperty(ConfigurationKeys.FLOW_NAME_KEY)));\n\n      // use job execution id if flow execution id is not present\n      metadataTags.add(new Tag<>(TimingEvent.FlowEventConstants.FLOW_EXECUTION_ID_FIELD,\n          jobProps.getProperty(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, jobExecutionId)));\n    }\n\n    metadataTags.add(new Tag<>(TimingEvent.FlowEventConstants.JOB_GROUP_FIELD,\n        jobProps.getProperty(ConfigurationKeys.JOB_GROUP_KEY, \"\")));\n    metadataTags.add(new Tag<>(TimingEvent.FlowEventConstants.JOB_NAME_FIELD,\n        jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY, \"\")));\n    metadataTags.add(new Tag<>(TimingEvent.FlowEventConstants.JOB_EXECUTION_ID_FIELD, jobExecutionId));\n\n    LOGGER.debug(\"GobblinHelixJobLauncher.addAdditionalMetadataTags: metadataTags {}\", metadataTags);\n\n    return metadataTags;\n  }", "public void testNoHotBackupAvailable ( ) throws Exception { TungstenProperties props = createProperties ( STR_ , BOOL_ ) ; BackupManager bmgr = new BackupManager ( new MockEventDispatcher ( ) ) ; bmgr . initialize ( props ) ; try { bmgr . spawnBackup ( ST", "    public Complex exp() {\n        double exp_x = StrictMath.exp(this.x);\n        return new Complex(exp_x*StrictMath.cos(this.y),\n                           exp_x*StrictMath.sin(this.y));\n    }\n", "public static int intersectPath (PathIterator p, float x, float y, float w, float h) {\n        int cross = 0;\n        int count;\n        float mx, my, cx, cy;\n        mx = my = cx = cy = 0f;\n        float[] coords = new float[6];\n\n        float rx1 = x;\n        float ry1 = y;\n        float rx2 = x + w;\n        float ry2 = y + h;\n\n        while (!p.isDone()) {\n            count = 0;\n            switch (p.currentSegment(coords)) {\n            case PathIterator.SEG_MOVETO:\n                if (cx != mx || cy != my) {\n                    count = intersectLine(cx, cy, mx, my, rx1, ry1, rx2, ry2);\n                }\n                mx = cx = coords[0];\n                my = cy = coords[1];\n                break;\n            case PathIterator.SEG_LINETO:\n                count = intersectLine(cx, cy, cx = coords[0], cy = coords[1], rx1, ry1, rx2, ry2);\n                break;\n            case PathIterator.SEG_QUADTO:\n                count = intersectQuad(cx, cy, coords[0], coords[1], cx = coords[2], cy = coords[3],\n                        rx1, ry1, rx2, ry2);\n                break;\n            case PathIterator.SEG_CUBICTO:\n                count = intersectCubic(cx, cy, coords[0], coords[1], coords[2], coords[3],\n                        cx = coords[4], cy = coords[5], rx1, ry1, rx2, ry2);\n                break;\n            case PathIterator.SEG_CLOSE:\n                if (cy != my || cx != mx) {\n                    count = intersectLine(cx, cy, mx, my, rx1, ry1, rx2, ry2);\n                }\n                cx = mx;\n                cy = my;\n                break;\n            }\n            if (count == CROSSING) {\n                return CROSSING;\n            }\n            cross += count;\n            p.next();\n        }\n        if (cy != my) {\n            count = intersectLine(cx, cy, mx, my, rx1, ry1, rx2, ry2);\n            if (count == CROSSING) {\n                return CROSSING;\n            }\n            cross += count;\n        }\n        return cross;\n    }", "WriteResult TcpWritePacket ( PseudoTCPBase tcp , byte [ ] buffer , int len ) ;", "public Cleaner ( String parentName , ReferenceQueue < K > queue , Map < KeyHolder < K > , V > entryInfos , ICleanerListener < V > listener ) { super ( parentName + STR_ ) ; _queue = queue ; _table = entryInfos ; _listener = listener ; this . setDaemon ( B", "private String hostAndPort() {\n        int start = url.indexOf(\"://\") + 3;\n        int end = url.indexOf(\"/\", start);\n        return url.substring(start, end);\n    }", "public KeyArea setupKey(int iKeyArea)\n    {\n        KeyArea keyArea = null;\n        if (iKeyArea == 0)\n        {\n            keyArea = this.makeIndex(DBConstants.UNIQUE, ID_KEY);\n            keyArea.addKeyField(ID, DBConstants.ASCENDING);\n        }\n        if (iKeyArea == 1)\n        {\n            keyArea = this.makeIndex(DBConstants.NOT_UNIQUE, PROJECT_TASK_ID_KEY);\n            keyArea.addKeyField(PROJECT_TASK_ID, DBConstants.ASCENDING);\n            keyArea.addKeyField(PROJECT_TASK_PREDECESSOR_ID, DBConstants.ASCENDING);\n        }\n        if (iKeyArea == 2)\n        {\n            keyArea = this.makeIndex(DBConstants.NOT_UNIQUE, PROJECT_TASK_PREDECESSOR_ID_KEY);\n            keyArea.addKeyField(PROJECT_TASK_PREDECESSOR_ID, DBConstants.ASCENDING);\n            keyArea.addKeyField(PROJECT_TASK_ID, DBConstants.ASCENDING);\n        }\n        if (keyArea == null)\n            keyArea = super.setupKey(iKeyArea);     \n        return keyArea;\n    }", "private static Status.TermIndexStatus checkFields(Fields fields,Bits liveDocs,int maxDoc,FieldInfos fieldInfos,boolean doPrint,boolean isVectors,PrintStream infoStream,boolean verbose) throws IOException {\n  long startNS;\n  if (doPrint) {\n    startNS=System.nanoTime();\n  }\n else {\n    startNS=0;\n  }\n  final Status.TermIndexStatus status=new Status.TermIndexStatus();\n  int computedFieldCount=0;\n  PostingsEnum postings=null;\n  String lastField=null;\n  for (  String field : fields) {\n    if (lastField != null && field.compareTo(lastField) <= 0) {\n      throw new RuntimeException(\"fields out of order: lastField=\" + lastField + \" field=\"+ field);\n    }\n    lastField=field;\n    FieldInfo fieldInfo=fieldInfos.fieldInfo(field);\n    if (fieldInfo == null) {\n      throw new RuntimeException(\"fieldsEnum inconsistent with fieldInfos, no fieldInfos for: \" + field);\n    }\n    if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n      throw new RuntimeException(\"fieldsEnum inconsistent with fieldInfos, isIndexed == false for: \" + field);\n    }\n    computedFieldCount++;\n    final Terms terms=fields.terms(field);\n    if (terms == null) {\n      continue;\n    }\n    final boolean hasFreqs=terms.hasFreqs();\n    final boolean hasPositions=terms.hasPositions();\n    final boolean hasPayloads=terms.hasPayloads();\n    final boolean hasOffsets=terms.hasOffsets();\n    BytesRef maxTerm;\n    BytesRef minTerm;\n    if (isVectors) {\n      maxTerm=null;\n      minTerm=null;\n    }\n else {\n      BytesRef bb=terms.getMin();\n      if (bb != null) {\n        assert bb.isValid();\n        minTerm=BytesRef.deepCopyOf(bb);\n      }\n else {\n        minTerm=null;\n      }\n      bb=terms.getMax();\n      if (bb != null) {\n        assert bb.isValid();\n        maxTerm=BytesRef.deepCopyOf(bb);\n        if (minTerm == null) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" has null minTerm but non-null maxTerm\");\n        }\n      }\n else {\n        maxTerm=null;\n        if (minTerm != null) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" has non-null minTerm but null maxTerm\");\n        }\n      }\n    }\n    final boolean expectedHasFreqs=(isVectors || fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0);\n    if (hasFreqs != expectedHasFreqs) {\n      throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasFreqs=\"+ expectedHasFreqs+ \" but got \"+ hasFreqs);\n    }\n    if (hasFreqs == false) {\n      if (terms.getSumTotalTermFreq() != -1) {\n        throw new RuntimeException(\"field \\\"\" + field + \"\\\" hasFreqs is false, but Terms.getSumTotalTermFreq()=\"+ terms.getSumTotalTermFreq()+ \" (should be -1)\");\n      }\n    }\n    if (!isVectors) {\n      final boolean expectedHasPositions=fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      if (hasPositions != expectedHasPositions) {\n        throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasPositions=\"+ expectedHasPositions+ \" but got \"+ hasPositions);\n      }\n      final boolean expectedHasPayloads=fieldInfo.hasPayloads();\n      if (hasPayloads != expectedHasPayloads) {\n        throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasPayloads=\"+ expectedHasPayloads+ \" but got \"+ hasPayloads);\n      }\n      final boolean expectedHasOffsets=fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (hasOffsets != expectedHasOffsets) {\n        throw new RuntimeException(\"field \\\"\" + field + \"\\\" should have hasOffsets=\"+ expectedHasOffsets+ \" but got \"+ hasOffsets);\n      }\n    }\n    final TermsEnum termsEnum=terms.iterator();\n    boolean hasOrd=true;\n    final long termCountStart=status.delTermCount + status.termCount;\n    BytesRefBuilder lastTerm=null;\n    long sumTotalTermFreq=0;\n    long sumDocFreq=0;\n    FixedBitSet visitedDocs=new FixedBitSet(maxDoc);\n    while (true) {\n      final BytesRef term=termsEnum.next();\n      if (term == null) {\n        break;\n      }\n      assert term.isValid();\n      if (lastTerm == null) {\n        lastTerm=new BytesRefBuilder();\n        lastTerm.copyBytes(term);\n      }\n else {\n        if (lastTerm.get().compareTo(term) >= 0) {\n          throw new RuntimeException(\"terms out of order: lastTerm=\" + lastTerm.get() + \" term=\"+ term);\n        }\n        lastTerm.copyBytes(term);\n      }\n      if (isVectors == false) {\n        if (minTerm == null) {\n          assert maxTerm == null;\n          throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\"+ term+ \", minTerm=\"+ minTerm);\n        }\n        if (term.compareTo(minTerm) < 0) {\n          throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\"+ term+ \", minTerm=\"+ minTerm);\n        }\n        if (term.compareTo(maxTerm) > 0) {\n          throw new RuntimeException(\"field=\\\"\" + field + \"\\\": invalid term: term=\"+ term+ \", maxTerm=\"+ maxTerm);\n        }\n      }\n      final int docFreq=termsEnum.docFreq();\n      if (docFreq <= 0) {\n        throw new RuntimeException(\"docfreq: \" + docFreq + \" is out of bounds\");\n      }\n      sumDocFreq+=docFreq;\n      postings=termsEnum.postings(postings,PostingsEnum.ALL);\n      if (hasFreqs == false) {\n        if (termsEnum.totalTermFreq() != -1) {\n          throw new RuntimeException(\"field \\\"\" + field + \"\\\" hasFreqs is false, but TermsEnum.totalTermFreq()=\"+ termsEnum.totalTermFreq()+ \" (should be -1)\");\n        }\n      }\n      if (hasOrd) {\n        long ord=-1;\n        try {\n          ord=termsEnum.ord();\n        }\n catch (        UnsupportedOperationException uoe) {\n          hasOrd=false;\n        }\n        if (hasOrd) {\n          final long ordExpected=status.delTermCount + status.termCount - termCountStart;\n          if (ord != ordExpected) {\n            throw new RuntimeException(\"ord mismatch: TermsEnum has ord=\" + ord + \" vs actual=\"+ ordExpected);\n          }\n        }\n      }\n      int lastDoc=-1;\n      int docCount=0;\n      boolean hasNonDeletedDocs=false;\n      long totalTermFreq=0;\n      while (true) {\n        final int doc=postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        int freq=-1;\n        if (hasFreqs) {\n          freq=postings.freq();\n          if (freq <= 0) {\n            throw new RuntimeException(\"term \" + term + \": doc \"+ doc+ \": freq \"+ freq+ \" is out of bounds\");\n          }\n          totalTermFreq+=freq;\n        }\n else {\n          if (postings.freq() != 1) {\n            throw new RuntimeException(\"term \" + term + \": doc \"+ doc+ \": freq \"+ freq+ \" != 1 when Terms.hasFreqs() is false\");\n          }\n        }\n        if (liveDocs == null || liveDocs.get(doc)) {\n          hasNonDeletedDocs=true;\n          status.totFreq++;\n          if (freq >= 0) {\n            status.totPos+=freq;\n          }\n        }\n        docCount++;\n        if (doc <= lastDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \"+ doc+ \" <= lastDoc \"+ lastDoc);\n        }\n        if (doc >= maxDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \"+ doc+ \" >= maxDoc \"+ maxDoc);\n        }\n        lastDoc=doc;\n        int lastPos=-1;\n        int lastOffset=0;\n        if (hasPositions) {\n          for (int j=0; j < freq; j++) {\n            final int pos=postings.nextPosition();\n            if (pos < 0) {\n              throw new RuntimeException(\"term \" + term + \": doc \"+ doc+ \": pos \"+ pos+ \" is out of bounds\");\n            }\n            if (pos > IndexWriter.MAX_POSITION) {\n              throw new RuntimeException(\"term \" + term + \": doc \"+ doc+ \": pos \"+ pos+ \" > IndexWriter.MAX_POSITION=\"+ IndexWriter.MAX_POSITION);\n            }\n            if (pos < lastPos) {\n              throw new RuntimeException(\"term \" + term + \": doc \"+ doc+ \": pos \"+ pos+ \" < lastPos \"+ lastPos);\n            }\n            lastPos=pos;\n            BytesRef payload=postings.getPayload();\n            if (payload != null) {\n              assert payload.isValid();\n            }\n            if (payload != null && payload.length < 1) {\n              throw new RuntimeException(\"term \" + term + \": doc \"+ doc+ \": pos \"+ pos+ \" payload length is out of bounds \"+ payload.length);\n            }\n            if (hasOffsets) {\n              int startOffset=postings.startOffset();\n              int endOffset=postings.endOffset();\n              if (!isVectors) {\n                if (startOffset < 0) {\n                  throw new RuntimeException(\"term \" + term + \": doc \"+ doc+ \": pos \"+ pos+ \": startOffset \"+ startOffset+ \" is out of bounds\");\n                }\n                if (startOffset < lastOffset) {\n                  throw new RuntimeException(\"term \" + term + \": doc \"+ doc+ \": pos \"+ pos+ \": startOffset \"+ startOffset+ \" < lastStartOffset \"+ lastOffset);\n                }\n                if (endOffset < 0) {\n                  throw new RuntimeException(\"term \" + term + \": doc \"+ doc+ \": pos \"+ pos+ \": endOffset \"+ endOffset+ \" is out of bounds\");\n                }\n                if (endOffset < startOffset) {\n                  throw new RuntimeException(\"term \" + term + \": doc \"+ doc+ \": pos \"+ pos+ \": endOffset \"+ endOffset+ \" < startOffset \"+ startOffset);\n                }\n              }\n              lastOffset=startOffset;\n            }\n          }\n        }\n      }\n      if (hasNonDeletedDocs) {\n        status.termCount++;\n      }\n else {\n        status.delTermCount++;\n      }\n      final long totalTermFreq2=termsEnum.totalTermFreq();\n      final boolean hasTotalTermFreq=hasFreqs && totalTermFreq2 != -1;\n      if (docCount != docFreq) {\n        throw new RuntimeException(\"term \" + term + \" docFreq=\"+ docFreq+ \" != tot docs w/o deletions \"+ docCount);\n      }\n      if (hasTotalTermFreq) {\n        if (totalTermFreq2 <= 0) {\n          throw new RuntimeException(\"totalTermFreq: \" + totalTermFreq2 + \" is out of bounds\");\n        }\n        sumTotalTermFreq+=totalTermFreq;\n        if (totalTermFreq != totalTermFreq2) {\n          throw new RuntimeException(\"term \" + term + \" totalTermFreq=\"+ totalTermFreq2+ \" != recomputed totalTermFreq=\"+ totalTermFreq);\n        }\n      }\n      if (hasPositions) {\n        for (int idx=0; idx < 7; idx++) {\n          final int skipDocID=(int)(((idx + 1) * (long)maxDoc) / 8);\n          postings=termsEnum.postings(postings,PostingsEnum.ALL);\n          final int docID=postings.advance(skipDocID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n else {\n            if (docID < skipDocID) {\n              throw new RuntimeException(\"term \" + term + \": advance(docID=\"+ skipDocID+ \") returned docID=\"+ docID);\n            }\n            final int freq=postings.freq();\n            if (freq <= 0) {\n              throw new RuntimeException(\"termFreq \" + freq + \" is out of bounds\");\n            }\n            int lastPosition=-1;\n            int lastOffset=0;\n            for (int posUpto=0; posUpto < freq; posUpto++) {\n              final int pos=postings.nextPosition();\n              if (pos < 0) {\n                throw new RuntimeException(\"position \" + pos + \" is out of bounds\");\n              }\n              if (pos < lastPosition) {\n                throw new RuntimeException(\"position \" + pos + \" is < lastPosition \"+ lastPosition);\n              }\n              lastPosition=pos;\n              if (hasOffsets) {\n                int startOffset=postings.startOffset();\n                int endOffset=postings.endOffset();\n                if (!isVectors) {\n                  if (startOffset < 0) {\n                    throw new RuntimeException(\"term \" + term + \": doc \"+ docID+ \": pos \"+ pos+ \": startOffset \"+ startOffset+ \" is out of bounds\");\n                  }\n                  if (startOffset < lastOffset) {\n                    throw new RuntimeException(\"term \" + term + \": doc \"+ docID+ \": pos \"+ pos+ \": startOffset \"+ startOffset+ \" < lastStartOffset \"+ lastOffset);\n                  }\n                  if (endOffset < 0) {\n                    throw new RuntimeException(\"term \" + term + \": doc \"+ docID+ \": pos \"+ pos+ \": endOffset \"+ endOffset+ \" is out of bounds\");\n                  }\n                  if (endOffset < startOffset) {\n                    throw new RuntimeException(\"term \" + term + \": doc \"+ docID+ \": pos \"+ pos+ \": endOffset \"+ endOffset+ \" < startOffset \"+ startOffset);\n                  }\n                }\n                lastOffset=startOffset;\n              }\n            }\n            final int nextDocID=postings.nextDoc();\n            if (nextDocID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            if (nextDocID <= docID) {\n              throw new RuntimeException(\"term \" + term + \": advance(docID=\"+ skipDocID+ \"), then .next() returned docID=\"+ nextDocID+ \" vs prev docID=\"+ docID);\n            }\n          }\n          if (isVectors) {\n            break;\n          }\n        }\n      }\n else {\n        for (int idx=0; idx < 7; idx++) {\n          final int skipDocID=(int)(((idx + 1) * (long)maxDoc) / 8);\n          postings=termsEnum.postings(postings,PostingsEnum.NONE);\n          final int docID=postings.advance(skipDocID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n else {\n            if (docID < skipDocID) {\n              throw new RuntimeException(\"term \" + term + \": advance(docID=\"+ skipDocID+ \") returned docID=\"+ docID);\n            }\n            final int nextDocID=postings.nextDoc();\n            if (nextDocID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            if (nextDocID <= docID) {\n              throw new RuntimeException(\"term \" + term + \": advance(docID=\"+ skipDocID+ \"), then .next() returned docID=\"+ nextDocID+ \" vs prev docID=\"+ docID);\n            }\n          }\n          if (isVectors) {\n            break;\n          }\n        }\n      }\n    }\n    if (minTerm != null && status.termCount + status.delTermCount == 0) {\n      throw new RuntimeException(\"field=\\\"\" + field + \"\\\": minTerm is non-null yet we saw no terms: \"+ minTerm);\n    }\n    final Terms fieldTerms=fields.terms(field);\n    if (fieldTerms == null) {\n    }\n else {\n      long fieldTermCount=(status.delTermCount + status.termCount) - termCountStart;\n      if (false && hasFreqs == false) {\n        checkTermRanges(field,maxDoc,fieldTerms,fieldTermCount);\n      }\n      final Object stats=fieldTerms.getStats();\n      assert stats != null;\n      if (status.blockTreeStats == null) {\n        status.blockTreeStats=new HashMap<>();\n      }\n      status.blockTreeStats.put(field,stats);\n      if (sumTotalTermFreq != 0) {\n        final long v=fields.terms(field).getSumTotalTermFreq();\n        if (v != -1 && sumTotalTermFreq != v) {\n          throw new RuntimeException(\"sumTotalTermFreq for field \" + field + \"=\"+ v+ \" != recomputed sumTotalTermFreq=\"+ sumTotalTermFreq);\n        }\n      }\n      if (sumDocFreq != 0) {\n        final long v=fields.terms(field).getSumDocFreq();\n        if (v != -1 && sumDocFreq != v) {\n          throw new RuntimeException(\"sumDocFreq for field \" + field + \"=\"+ v+ \" != recomputed sumDocFreq=\"+ sumDocFreq);\n        }\n      }\n      final int v=fieldTerms.getDocCount();\n      if (v != -1 && visitedDocs.cardinality() != v) {\n        throw new RuntimeException(\"docCount for field \" + field + \"=\"+ v+ \" != recomputed docCount=\"+ visitedDocs.cardinality());\n      }\n      if (lastTerm != null) {\n        if (termsEnum.seekCeil(lastTerm.get()) != TermsEnum.SeekStatus.FOUND) {\n          throw new RuntimeException(\"seek to last term \" + lastTerm.get() + \" failed\");\n        }\n        if (termsEnum.term().equals(lastTerm.get()) == false) {\n          throw new RuntimeException(\"seek to last term \" + lastTerm.get() + \" returned FOUND but seeked to the wrong term \"+ termsEnum.term());\n        }\n        int expectedDocFreq=termsEnum.docFreq();\n        PostingsEnum d=termsEnum.postings(null,PostingsEnum.NONE);\n        int docFreq=0;\n        while (d.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          docFreq++;\n        }\n        if (docFreq != expectedDocFreq) {\n          throw new RuntimeException(\"docFreq for last term \" + lastTerm.get() + \"=\"+ expectedDocFreq+ \" != recomputed docFreq=\"+ docFreq);\n        }\n      }\n      long termCount=-1;\n      if (fieldTermCount > 0) {\n        termCount=fields.terms(field).size();\n        if (termCount != -1 && termCount != fieldTermCount) {\n          throw new RuntimeException(\"termCount mismatch \" + termCount + \" vs \"+ fieldTermCount);\n        }\n      }\n      if (hasOrd && status.termCount - termCountStart > 0) {\n        int seekCount=(int)Math.min(10000L,termCount);\n        if (seekCount > 0) {\n          BytesRef[] seekTerms=new BytesRef[seekCount];\n          for (int i=seekCount - 1; i >= 0; i--) {\n            long ord=i * (termCount / seekCount);\n            termsEnum.seekExact(ord);\n            long actualOrd=termsEnum.ord();\n            if (actualOrd != ord) {\n              throw new RuntimeException(\"seek to ord \" + ord + \" returned ord \"+ actualOrd);\n            }\n            seekTerms[i]=BytesRef.deepCopyOf(termsEnum.term());\n          }\n          for (int i=seekCount - 1; i >= 0; i--) {\n            if (termsEnum.seekCeil(seekTerms[i]) != TermsEnum.SeekStatus.FOUND) {\n              throw new RuntimeException(\"seek to existing term \" + seekTerms[i] + \" failed\");\n            }\n            if (termsEnum.term().equals(seekTerms[i]) == false) {\n              throw new RuntimeException(\"seek to existing term \" + seekTerms[i] + \" returned FOUND but seeked to the wrong term \"+ termsEnum.term());\n            }\n            postings=termsEnum.postings(postings,PostingsEnum.NONE);\n            if (postings == null) {\n              throw new RuntimeException(\"null DocsEnum from to existing term \" + seekTerms[i]);\n            }\n          }\n        }\n      }\n    }\n  }\n  int fieldCount=fields.size();\n  if (fieldCount != -1) {\n    if (fieldCount < 0) {\n      throw new RuntimeException(\"invalid fieldCount: \" + fieldCount);\n    }\n    if (fieldCount != computedFieldCount) {\n      throw new RuntimeException(\"fieldCount mismatch \" + fieldCount + \" vs recomputed field count \"+ computedFieldCount);\n    }\n  }\n  if (doPrint) {\n    msg(infoStream,String.format(Locale.ROOT,\"OK [%d terms; %d terms/docs pairs; %d tokens] [took %.3f sec]\",status.termCount,status.totFreq,status.totPos,nsToSec(System.nanoTime() - startNS)));\n  }\n  if (verbose && status.blockTreeStats != null && infoStream != null && status.termCount > 0) {\n    for (    Map.Entry<String,Object> ent : status.blockTreeStats.entrySet()) {\n      infoStream.println(\"      field \\\"\" + ent.getKey() + \"\\\":\");\n      infoStream.println(\"      \" + ent.getValue().toString().replace(\"\\n\",\"\\n      \"));\n    }\n  }\n  return status;\n}\n", "    public void calcPerceptionActivationAllChunks() {\n        for (Chunk chunk : perception.getChunksNotNull()) {\n            calcPerceptionActivation(chunk);\n        }\n    }\n", "private void update ( ) { updateInfoField ( ) ; m_executeButton . setEnabled ( CExpressionTreeValidator . isValid ( m_jtree ) ) ; }", "public static void subscribe(Object object) throws IllegalStateException {\n        if (!sIsInitialized) {\n            throw new IllegalStateException(\"Wings must be initialized. See Wings#init().\");\n        }\n        WingsInjector.getBus().register(object);\n    }", "public void kill ( Session session ) throws SQLException , ReplicatorException ;", "public static boolean parseProviderEndpoints(String providerEndpoints,\n      List<ProviderEndPoint> listOfEndPoints, boolean whenDefaultingUseSecurePort)\n      throws IncorrectCallException {\n\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(tc, \"parseProviderEndpoints\", new Object[]{ providerEndpoints, listOfEndPoints, whenDefaultingUseSecurePort });\n\n    // Indicate whether the user specified their own endpoints,\n    // or whether we made them up on their behalf.\n    boolean hasUserDefinedEndPoints = false;\n\n    if (providerEndpoints != null && providerEndpoints.trim().equals(\"\")) {\n      providerEndpoints = null;\n    }\n\n    // If there are any endpoints defined by the client.\n    if (providerEndpoints != null) {\n\n      // Split the full string based on the comma separator. We know that\n      // the elements on the triplets (including IPv4/v6 IP addresses) do\n      // not contain commas.\n      // NB. IPv6 is RFC 2373)\n      StringTokenizer st = new StringTokenizer(providerEndpoints,\",\");\n\n      // Look at each of the elements in turn.\n      while (st.hasMoreElements()) {\n\n        // Prepare some variables to receive the parsed data.\n        String host  = null;\n        String port  = null;\n        String chain = null;\n\n        String str = st.nextToken();\n        if (str != null) {\n\n          // The user has given us some explicit endpoint information.\n          hasUserDefinedEndPoints = true;\n\n          // To hold the position of the opening brace if one exists.\n          int openBracePos = 0;\n\n          // Check for IPv6 bracing [ ... ]\n          if ((openBracePos = str.indexOf(\"[\")) != -1) {\n            // We have found an IPv6 opening brace.\n\n            // To hold the position of the closing brace if one exists.\n            int closeBracePos = 0;\n\n            if ((closeBracePos = str.indexOf(\"]\")) != -1) {\n              // Found the closing brace as well.\n              host = str.substring(openBracePos+1, closeBracePos);\n\n              // Remove the parsed data from the string.\n              str = str.substring(closeBracePos+1);\n\n            } else {\n              // No closing brace to match the opening brace.\n              throw new IncorrectCallException(str);\n            } // if closing brace.\n\n          } else {\n            // No opening brace.\n            // Check for an orphaned closing brace to be on the safe side.\n            if (str.indexOf(\"]\") != -1) {\n              throw new IncorrectCallException(str);\n            }\n\n          } // if opening brace.\n\n          // Take out any whitespace that might cause confusion.\n          if (str.indexOf(\" \") != -1)\n          {\n            // Doing a quick check for contains will avoid running the\n            // regex on the following line in cases where there are no\n            // spaces.\n            str = str.replaceAll(\" \", \"\");\n          }\n\n\n          // Tokenize the remaining information (some will have been removed above if there\n          // was an IPv6 address) using the : character. Use the true flag so that we get\n          // given the separators too.\n          StringTokenizer st2 = new StringTokenizer(str, \":\", true);\n\n          // We are going to use this counter to determine which item of information\n          // we are looking for.\n          int elementSearch = 1;\n\n          // If the host was in IPv6 form we will already have set it here, and the\n          // str string will look like a \":port:chain\" format. This missing host\n          // is handled successfully by the block below anyway.\n\n          while (st2.hasMoreTokens())\n          {\n            String next = st2.nextToken();\n\n            // If we find a separator character then we start looking at the\n            // next item (host/port etc)\n            if (\":\".equals(next))\n            {\n              elementSearch++;\n            } else\n            {\n\n              switch(elementSearch)\n              {\n                case 1: // host\n                  host = next;\n                  break;\n\n                case 2: // port\n                  port = next;\n                  break;\n\n                case 3: // chain\n                  // Allow for synonyms of the chain names to be used\n                  chain = resolveSynonymousChainName(next);\n                  break;\n\n                default: // bad formatting - ignore it!\n                  break;\n\n              }//switch\n\n            }//if\n\n          }//while\n\n          // Default any missing values\n          if (host == null || host.trim().equals(\"\")) {\n            host = PROVIDER_ENDPOINTS_LOCALHOST;\n          }\n\n          boolean usingDefaultPort = false;\n\n          if (port == null || port.trim().equals(\"\")) {\n            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(tc, \"No port was specified\");\n\n            if (chain != null) {\n              // A non-empty chain was specified. We should use this information to override\n              // the defaulting of the port number if we recognise the chain name. This has\n              // higher precedence than whether a password was specified because the user\n              // gave us direct instructions.\n              if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(tc, \"A non-empty chain was specified\");\n              if (BOOTSTRAP_TRANSPORT_CHAIN_BASIC.equals(chain)) {\n                whenDefaultingUseSecurePort = false;\n              } else if (BOOTSTRAP_TRANSPORT_CHAIN_SECURE.equals(chain)) {\n                whenDefaultingUseSecurePort = true;\n              }\n\n            } // if override port based on chain\n\n            if (whenDefaultingUseSecurePort) {\n              port = PROVIDER_ENDPOINTS_PORT_SECURE;\n              if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(tc, \"Password specified so defaulting to \" + port);\n            } else {\n              port = PROVIDER_ENDPOINTS_PORT_BASIC;\n              if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(tc, \"No password specified so defaulting to \" + port);\n            } // if isPasswordSpecified\n            usingDefaultPort = true;\n          } // if port\n\n          if (chain == null || chain.trim().equals(\"\")) {\n              chain = BOOTSTRAP_TRANSPORT_CHAIN_BASIC;\n              if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(tc, \"No chain specified so defaulting to \" + chain);\n          } // if chain\n\n          ProviderEndPoint newEP = new ProviderEndPoint(host, new Integer(port), chain);\n          if (!listOfEndPoints.contains(newEP)) {\n            listOfEndPoints.add(newEP);\n          }\n\n        } // if element not null\n\n      } // while more elements\n\n    } // if providerEndpoints\n\n    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(tc, listOfEndPoints.toString());\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(tc, \"parseProviderEndpoints\", Boolean.valueOf(hasUserDefinedEndPoints));\n    return hasUserDefinedEndPoints;\n\n  }", "public static boolean isSolaris(){\n  return (OS.indexOf(\"sunos\") >= 0);\n}\n", "    public int getFormalCharge() {\n        IntSTAttribute att = (IntSTAttribute) this.getFormalChargeAttribute();\n        if (att == null) {\n            throw new RuntimeException(\"int attribute is unset: formalCharge\");\n        }\n        return att.getInt();\n    }\n", "private static String prepareInstruction(String inst){\n  String tmp=inst;\n  tmp=tmp.replaceAll(Lop.OPERAND_DELIMITOR,\" \");\n  tmp=tmp.replaceAll(Lop.DATATYPE_PREFIX,\".\");\n  tmp=tmp.replaceAll(Lop.INSTRUCTION_DELIMITOR,\", \");\n  return tmp;\n}\n", "public static void installAllConfig ( ConfigurationAdmin configAdmin ) throws IOException { String enabled = System . getProperty ( OPENIDM_FILEINSTALL_ENABLED , STR_ ) ; String poll = System . getProperty ( OPENIDM_FILEINSTALL_POLL , STR_ ) ; String dir = getConfigFileInstallDir ( ) ; String filter = System . getProperty ( OPENIDM_FILEINSTALL_FILTER , STR_ ) ; String start = System . getProperty ( OPENIDM_FILEINSTALL_BUNDLES_NEW_START , STR_ ) ; Configuration config = configAdmin . createFactoryConfiguration ( FELIX_FILEINSTALL_PID , null ) ; Dictionary < String , Object > props = config . getProperties ( ) ; if ( props == null ) { props = new Hashtable < > ( ) ; } if ( STR_ . equals ( enabled ) ) { props . put ( STR_ , poll ) ; props . put ( STR_ , STR_ ) ; props . put ( STR_ , dir ) ; props . put ( STR_ , filter ) ; props . put ( STR_ , start ) ; props . put ( STR_ , STR_ ) ; config . update ( props ) ; logger . info ( STR_ ) ; } else { logger . info ( STR_ ) ; } }", "private static int NextDelimiterCol ( String str , int col ) { String [ ] splitStr = str . substring ( col ) . split ( STR_ ) ; if ( splitStr . length == NUM_ ) { return col ; } return col + splitStr [ NUM_ ] . length ( ) ; }", "private void validateBackupConfig(RepositoryBackupConfig config) throws BackupConfigurationException\n   {\n      if (config.getIncrementalJobPeriod() < 0)\n      {\n         throw new BackupConfigurationException(\"The parameter 'incremental job period' can not be negative.\");\n      }\n\n      if (config.getIncrementalJobNumber() < 0)\n      {\n         throw new BackupConfigurationException(\"The parameter 'incremental job number' can not be negative.\");\n      }\n\n      if (config.getIncrementalJobPeriod() == 0 && config.getBackupType() == BackupManager.FULL_AND_INCREMENTAL)\n      {\n         config.setIncrementalJobPeriod(defaultIncrementalJobPeriod);\n      }\n   }", "public DisallowCharactersValidator ( final char [ ] chars ) { this . chars = chars ; }", "Item newStringishItem(final int type, final String value) {\n        key2.set(type, value, null, null);\n        Item result = get(key2);\n        if (result == null) {\n            pool.put12(type, newUTF8(value));\n            result = new Item(index++, key2);\n            put(result);\n        }\n        return result;\n    }", "private void handleConnectError ( int retry , String host , int port , SocketChannel sockChannel , ClosedSelectorException e ) { if ( _logger . isLoggable ( Level . FINE ) ) _logger . log ( Level . FINE , STR_ + host + STR_ + port + STR_ + _config . getSo", "public RequestParams ( Map < String , String > source ) { init ( ) ; if ( source != null ) { for ( Map . Entry < String , String > entry : source . entrySet ( ) ) { put ( entry . getKey ( ) , entry . getValue ( ) ) ; } } }", "  public boolean isAnonymous() {\n    String name = getName();\n    return name.length() > 0 && Character.isDigit( name.charAt( 0 ) );\n  }\n", "\tpublic void startStation(int id) {\n\t\tthis.stationStub.id = id;\n\t\tthis.stationStub.position = null;\n\t\tthis.stationStub.location = null;\n\t\tthis.stationStub.open = null;\n\t\tthis.stationStub.close = null;\n\t\tthis.stationStub.name = null;\n\t}\n", "private <E> boolean onCheckCollectionAttribute(PluralAttribute<? super X, ?, ?> pluralAttribute, Class<E> paramClass)\n    {\n        if (pluralAttribute != null)\n        {\n            if (isCollectionAttribute(pluralAttribute) && isBindable(pluralAttribute", "private void handleDrainedSource() throws IOException {\n         if (!inCatalog() && m_committedBuffers.isEmpty()) {\n             //Returning null indicates end of stream\n             try {\n                 if (m_pollTask != null) {\n                     m_pollTask.setFuture(null);\n                 }\n             } catch (RejectedExecutionException reex) {\n                 // Ignore, {@code GuestProcessor} was closed\n             }\n             m_pollTask = null;\n             m_generation.onSourceDrained(m_partitionId, m_tableName);\n             return;\n         }\n     }", "\tprotected Commandline buildCleartoolExecutable() {\n\t\tCommandline cmdLine = new Commandline();\n\t\tif (Luntbuild.isEmpty(getCleartoolDir()))\n\t\t\tcmdLine.setExecutable(\"cleartool\");\n\t\telse\n\t\t\tcmdLine.setExecutable(Luntbuild.concatPath(getCleartoolDir(), \"cleartool\"));\n\t\treturn cmdLine;\n\t}\n", "public static String readFileBufferedAsString(final String filename) throws IOException {\n\t\tFileReader in = null;\n\t\ttry {\n\t\t\tStringBuilder result = new StringBuilder();\n\t\t\tchar[] buffer = new char[2048];\n\t\t\tin = new FileReader(filename);\n\t\t\tint len = 0;\n\t\t\tdo {\n\t\t\t\tlen = in.read(buffer);\n\t\t\t\tif (len > 0)\n\t\t\t\t\tresult.append(buffer, 0, len);\n\t\t\t} while (len > 0);\n\t\t\treturn result.toString();\n\t\t} finally {\n\t\t\tcloseIgnoringException(in);\n\t\t}\n\t}", "\tpublic void leave(ExecutionContext context) {\n\t\t// fire event\n\t\tEventManager.getEventManager().fireBeforeActivityLeaved(\n\t\t\t\tnew ProcessInstanceEvent(context.getProcessInstance(), context\n\t\t\t\t\t\t.getToken()));\n\t\tif (this.isEndActivity()) {\n\t\t\tendProcessInstance(context);\n\t\t\treturn;\n\t\t}\n\t\tif (hasSplit()) {\n\t\t\thandleSplit(context);\n\t\t} else {\n\t\t\tleave(context, getLeavingTransition(context));\n\t\t}\n\t}\n", "public void parseDDLInfo ( ) { for ( PlogLCRTag tag : rawTags ) { switch ( tag . id ) { case PlogLCRTag . TAG_SQL_TEXT : this . SQLText = tag . valueString ( ) ; break ; case PlogLCRTag . TAG_CURRENT_SCHEMA : this . currentSchema = tag . valueString ( ) ;", "    public void addResult(IFinding result) {\n        \n\t\tif( result == null ) {\n\t\t\treturn;\n\t\t}  \n        \n        this.results.add(result);\n          \n    }\n", "public static boolean hasTokenInformation(Bundle bundle){\n  if (bundle == null) {\n    return false;\n  }\n  String token=bundle.getString(TOKEN_KEY);\n  if ((token == null) || (token.length() == 0)) {\n    return false;\n  }\n  long expiresMilliseconds=bundle.getLong(EXPIRATION_DATE_KEY,0L);\n  if (expiresMilliseconds == 0L) {\n    return false;\n  }\n  return true;\n}\n", "public void paint(Graphics g){\n  if (isOpaque()) {\n    Rectangle r=g.getClipBounds();\n    Color c=getBackground();\n    if (c == null)     c=Color.lightGray;\n    g.setColor(c);\n    if (r != null) {\n      g.fillRect(r.x,r.y,r.width,r.height);\n    }\n else {\n      g.fillRect(0,0,getWidth(),getHeight());\n    }\n  }\n  super.paint(g);\n}\n", "public synchronized void receivePacketAndRespond(IQ iq) throws XMPPException, SmackException, InterruptedException {\n        List<IQ> responses = new ArrayList<>();\n\n        String responseId;\n\n        LOGGER.fine(\"Packet: \" + iq.toXML());\n\n        try {", "public void removeCmsEventListener(I_CmsEventListener listener) {\n\n        synchronized (m_eventListeners) {\n            Iterator<Integer> it = m_eventListeners.keySet().iterator();\n            while (it.hasNext()) {\n                List<I_CmsEventListener> listeners = m_eventListeners.get(it.next());\n                listeners.remove(listener);\n            }\n        }\n    }", "public GitlabMilestone updateMilestone ( Serializable projectId , GitlabMilestone edited , String stateEvent ) throws IOException { return updateMilestone ( projectId , edited . getId ( ) , edited . getTitle ( ) , edited . getDescription ( ) , edited . getDueDate ( ) , stateEvent ) ; }", "\tprivate String ObjectName(Integer sides) {\n\t\tString key = \"ObjectName.\" + sides;\n\t\tString name = Messages.getString(\"em\", key);\n\t\tif (name.equals(\"!\" + key + \"!\")) {\n\t\t\tname = Messages.getString(\"em\", \"ObjectName\") + sides;\n\t\t}\n\t\treturn name;\n\t}\n", "    public boolean hasPadding() {\n\treturn padding;\n    }\n", "protected RepositorySystemSession newSession( RepositorySystem system )\n  {\n      MavenRepositorySystemSession session = new MavenRepositorySystemSession();\n\n      LocalRepository localRepo = new LocalRepository( localRepository );\n      session.setLocalRepositoryManager( system.newLocalRepositoryManager( localRepo ) );\n\n      return session;\n  }", "    public String getRequestedSessionId() {\n        String id = getHttpServletRequest().getRequestedSessionId();\n        String clean = \"\";\n        try {\n            clean = ESAPI.validator().getValidInput(\"Requested cookie: \" + id, id, \"HTTPJSESSIONID\", 50, false);\n        } catch (ValidationException e) {\n            // already logged\n        }\n        return clean;\n    }\n", "   public void removePlayer(ClientRoom room, PlayerInfo player) {\n      for (ClientRoom r : getObjects()) {\n         if (r.equals(room)) {\n            r.removePlayer(player);\n         }\n      }\n      refresh();\n   }\n", "    public void setScaleToFit(boolean setting) {\n\tprevsz = null;\n\tscaleToFit = setting;\n    }\n", "\tpublic LayoutManageable getLayoutManageable() {\n\t\tif (layoutManageableWR == null)\n\t\t\treturn null;\n\t\telse\n\t\t\treturn (LayoutManageable) layoutManageableWR.get();\n\t}\n", "public static Geometry toJtsGeometry(TDWay way, List<TDWay> innerWays) {\n        if (way == null) {\n            LOGGER.warning(\"way is null\");\n            return null;\n        }\n\n        if (way.isForcePolygonLine()) {\n            // may build a single line string if inner ways are empty\n            return buildMultiLineString(way, innerWays);\n        }\n\n        if (way.getShape() != TDWay.LINE || innerWays != null && innerWays.size() > 0) {\n            // Have to be careful here about polygons and lines again, the problem with\n            // polygons is that a certain direction is forced, so we do not want to reverse\n            // closed lines that are not meant to be polygons\n            // may contain holes if inner ways are not empty\n            Polygon polygon = buildPolygon(way, innerWays);\n            if (polygon.isValid()) {\n                return polygon;\n            }\n            return repairInvalidPolygon(polygon);\n        }\n        // not a closed line\n        return buildLineString(way);\n    }", "public static <T extends CharSequence> T validIndex(final T chars, final int index) {\n        return INSTANCE.validIndex(chars, index);\n    }", "private void removeFromInverseAssociations(\n\t\t\tTuple resultset,\n\t\t\tint tableIndex,\n\t\t\tSerializable id,\n\t\t\tSharedSessionContractImplementor session) {\n\t\tnew EntityAssociationUpdater( this )\n\t\t\t\t.id( id )\n\t\t\t\t.resultset( resultset )\n\t\t\t\t.session( session )\n\t\t\t\t.tableIndex( tableIndex )\n\t\t\t\t.propertyMightRequireInverseAssociationManagement( propertyMightBeMainSideOfBidirectionalAssociation )\n\t\t\t\t.removeNavigationalInformationFromInverseSide();\n\t}", "public List<List<T>> split(Predicate<? super T> predicate) {\n        final List<T> a = Lists.newArrayList(), b = Lists.newArrayList();\n        for (T elt: each()) {\n            (predicate.apply(elt) ? a : b).add(elt);\n        }\n        List<List<T>> resul", "public static Map<GraphNode,Point2D> translateNodes(Collection<GraphNode> moveNodes,Map<GraphNode,Point2D> positions,Translater translater){\n  Map<GraphNode,Point2D> result=Maps.newHashMapWithExpectedSize(moveNodes.size());\n  for (  GraphNode node : moveNodes) {\n    Point2D location=translateNode(node,positions,translater);\n    if (null == location) {\n      continue;\n    }\n    result.put(node,translater.translate(location));\n  }\n  return result;\n}\n", "public void replaceUuid(SIBUuid8 newUuid, Transaction transaction) throws SIResourceException\n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(tc, \"replaceUuid\", new Object[] {newUuid, transaction});\n\n    if (messagingEngineUuid.toString().equals(SIMPConstants.UNKNOWN_UUID))\n    {\n      messagingEngineUuid = newUuid;\n      \n      try\n      {\n        requestUpdate(transaction);\n      }\n      catch(MessageStoreException e)\n      {\n        // MessageStoreException shouldn't occur so FFDC.\n        FFDCFilter.processException(\n          e,\n          \"com.ibm.ws.sib.processor.impl.store.itemstreams.PtoPMessageItemStream.replaceUuid\",\n          \"1:720:1.93.1.14\",\n          this);\n        \n        SibTr.exception(tc, e);\n      \n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n          SibTr.exit(tc, \"replaceUuid\", e);\n      \n        throw new SIResourceException(e);\n      }\n    }\n    \n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.exit(tc, \"replaceUuid\");\n    \n    return;\n  }", "public boolean updateStoragePoolObjectFromVNXStoragePoolIndication(){\n  return retriveAndProcessIndicationAttributeValues(CIMConstants.STORAGE_POOL_INDICATION_FREE_CAPACITY,CIMConstants.STORAGE_POOL_INDICATION_POOL_NAME,CIMConstants.STORAGE_POOL_INDICATION_TOTAL_CAPACITY,CIMConstants.STORAGE_POOL_INDICATION_SUBSCRIBED_CAPACITY);\n}\n", "@Api\n\tpublic void restoreSecurityContext(SavedAuthorization savedAuthorization) {\n\t\tList<Authentication> auths = new ArrayList<Authentication>();\n\t\tif (null != savedAuthorization) {\n\t\t\tfor (SavedAuthentication sa : savedAuthorization.getAuthentications()) {\n\t\t\t\tAuthentication auth = new Authentication();\n\t\t\t\tauth.setSecurityServiceId(sa.getSecurityServiceId());\n\t\t\t\tauth.setAuthorizations(sa.getAuthorizations());\n\t\t\t\tauths.add(auth);\n\t\t\t}\n\t\t}\n\t\tsetAuthentications(null, auths);\n\t\tuserInfoInit();\n\t}", "private void remove ( ) { before . after = after ; after . before = before ; }", "public void shutdownWithError ( Throwable t ) { this . throwable = t ; shutdown ( ) ; }", "  private void addReviewId() {\n    ReviewDialog.processConfigWizardDialog(this.project);\n    List<ReviewId> reviewIdList = PropertyResource.getInstance(this.project, true).getReviewIdList();\n    tableViewer.setInput(reviewIdList);\n  }\n", "public static Bitmap byteToBitmap ( byte [ ] b ) { return ( b == null || b . length == NUM_ ) ? null : BitmapFactory . decodeByteArray ( b , NUM_ , b . length ) ; }", "public void start(){\n  stop();\n  mCacheDispatcher=new CacheDispatcher(mCacheQueue,mNetworkQueue,mDelivery);\n  mCacheDispatcher.start();\n  ThreadPoolExecutor threadPoolExecutor=(ThreadPoolExecutor)Executors.newFixedThreadPool(mDispatchers.length);\n  for (int i=0; i < mDispatchers.length; i++) {\n    NetworkDispatcher networkDispatcher=new NetworkDispatcher(mNetworkQueue,mNetwork,mDelivery);\n    mDispatchers[i]=networkDispatcher;\n    threadPoolExecutor.submit(networkDispatcher);\n  }\n}\n", "static void log ( ) { log ( STR_ ) ; }", "private static EntryRep [ ] deleteSet ( Item item , int i ) { item . attributeSets = ( EntryRep [ ] ) arrayDel ( item . attributeSets , i ) ; return item . attributeSets ; }", "@Override\n    public int compare(JTAResource o1, JTAResource o2) {\n        if (tc.isEntryEnabled())\n            Tr.entry(tc, \"compare\", new Object[] { o1, o2, this });\n        int result = 0;\n        int p1 = o1.getPriority();\n        int p2 = o2.getPriority();\n        if (p1 < p2)\n            result = 1;\n        else if (p1 > p2)\n            result = -1;\n        if (tc.isEntryEnabled())\n            Tr.exit(tc, \"compare\", result);\n        return result;\n    }", "protected void writeTile(ByteBuffer raster,int width,int height,String tilePath) throws IOException {\n  byte[] bbArray=new byte[raster.limit()];\n  raster.get(bbArray);\n  writeTile(tilePath,bbArray,width,height,layerType);\n}\n", "public ResponseEntity < List < Review > > defaultReviews ( int productId ) { LOG . warn ( STR_ ) ; return util . createResponse ( Arrays . asList ( new Review ( productId , NUM_ , STR_ , STR_ , STR_ ) ) , HttpStatus . OK ) ; }", "private Table createTableMetadata ( String schema , String tableName , boolean header ) { Table metadata = new Table ( schema , tableName ) ; if ( header ) { metadata . AddColumn ( new Column ( STR_ , Types . CHAR , NUM_ ) ) ; metadata . AddColumn ( new Column ( STR_ , Types . INTEGER ) ) ; metadata . AddColumn ( new Column ( STR_ , Types . INTEGER ) ) ; metadata . AddColumn ( new Column ( STR_ , Types . TIMESTAMP ) ) ; } metadata . AddColumn ( new Column ( STR_ , Types . INTEGER ) ) ; metadata . AddColumn ( new Column ( STR_ , Types . VARCHAR ) ) ; return metadata ; }", "\tpublic void serviceChange(String serviceName) {\n\t\t// update agent, then fire trigger\n\t\ttry {\n\t\t\tAgent agent = (Agent) agents.get(serviceName);\n\t\t\tagent.reregisterMethods(driver.getServices().get(serviceName));\n\t\t\t\n\t\t\tIclStruct response = new IclStruct(SERVICECHANGE);\n\t\t\tresponse.add(new IclStr(serviceName));\n\t\t\toaa.oaaCheckTriggers(\"task\", response, \"\");\n\t\t} catch (Exception e) {\n\t\t\tLogger.log(Logger.INFORMATIVE, e);\n\t\t}\n\t}\n", "public DeprecationLogger(ESLogger parentLogger){\n  String name=parentLogger.getName();\n  if (name.startsWith(\"org.elasticsearch\")) {\n    name=name.replace(\"org.elasticsearch.\",\"org.elasticsearch.deprecation.\");\n  }\n else {\n    name=\"deprecation.\" + name;\n  }\n  this.logger=ESLoggerFactory.getLogger(parentLogger.getPrefix(),name);\n}\n", "public List<ISO9660File> getFiles() {\n        List<ISO9660File> files = new ArrayList<ISO9660File>();\n\n        if (publisher instanceof ISO9660File) {\n            files.add((ISO9660File) publisher);\n        }\n        if (dataPreparer instanceof ISO9660File) {\n            files.add((ISO9660File) dataPreparer);\n        }\n        if (app instanceof ISO9660File) {\n            files.add((ISO9660File) app);\n        }\n\n        files.add(abstractFile);\n        files.add(bibFile);\n        files.add(copyrightFile);\n\n        return files;\n    }", "public static <T> Observable<T> toColdObservable(final RecursiveFutureProvider<T> futureProvider) {\n    return Observable.create(new Observable.OnSubscribe<T>() {\n      @Override\n      public void call(final Subscriber<? super T> subscriber) {\n        rec", "public synchronized boolean check ( boolean forceCheck ) { int slen = solutions . length ; if ( slen == NUM_ ) { return BOOL_ ; } for ( int soln = NUM_ ; soln < slen ; soln ++ ) { OrderOfSolution oos = solutions [ soln ] ; initSccParams ( oos ) ; BEGraph bgraph = bgraphs [ soln ] ; int numOfInits = bgraph . initSize ( ) ; for ( int i = NUM_ ; i < numOfInits ; i ++ ) { initNode = bgraph . getInitNode ( i ) ; if ( initNode . getNumber ( ) == NUM_ ) { checkSccs ( initNode ) ; } } } return BOOL_ ; }", "public void marshall(HttpDataSourceConfig httpDataSourceConfig, ProtocolMarshaller protocolMarshaller) {\n\n        if (httpDataSourceConfig == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(httpDataSourceConfig.getEndpoint(), ENDPOINT_BINDING);\n            protocolMarshaller.marshall(httpDataSourceConfig.getAuthorizationConfig(), AUTHORIZATIONCONFIG_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "public void addWhitelistURL(String URL){\n  serviceWhitelist.add(URL);\n}\n", "void addedView ( Module module , View view ) ;", "public boolean isLockSubject ( ) { return BOOL_ ; }", "public int charDistance(char a,char b){\n  return Math.abs(Character.getNumericValue(a) - Character.getNumericValue(b));\n}\n", "@Override\n  public long getRecordCount(Path filepath) {\n    String[] components = filepath.getName().split(Pattern.quote(SEPARATOR));\n    Preconditions.checkArgument(components.length >= 2 && StringUtils.isNumeric(components[components.length - 2]),\n        String.format(\"Filename %s does not follow the pattern: FILENAME.RECORDCOUNT.EXTENSION\", filepath));\n    return Long.parseLong(components[components.length - 2]);\n  }", "public static int [ ] shuffle ( int [ ] intArray ) { if ( intArray == null ) { return null ; } return shuffle ( intArray , getRandom ( intArray . length ) ) ; }", "public InternalColorPanelListener ( final ITypeDescription description ) { m_description = description ; }", "    public void buildInterfaceUsageInfo(XMLNode node, Content classInfoTree) {\n        writer.addInterfaceUsageInfo(classInfoTree);\n    }\n", "private VPlexClusterInfo findInitiators(List<PortInfo> initiatorPortInfo,List<VPlexInitiatorInfo> initiatorInfoList) throws VPlexApiException {\n  VPlexClusterInfo initiatorClusterInfo=null;\n  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();\n  List<VPlexClusterInfo> clusterInfoList=discoveryMgr.getClusterInfoLite();\n  for (  VPlexClusterInfo clusterInfo : clusterInfoList) {\n    initiatorInfoList.addAll(findInitiatorsOnCluster(clusterInfo.getName(),initiatorPortInfo,null));\n    if (!initiatorInfoList.isEmpty()) {\n      initiatorClusterInfo=clusterInfo;\n      break;\n    }\n  }\n  return initiatorClusterInfo;\n}\n", "private static String computeDigest ( InputStream in , String algorithm ) throws IOException , NoSuchAlgorithmException { try { if ( ! ( in instanceof BufferedInputStream ) ) { in = new BufferedInputStream ( in , NUM_ ) ; } MessageDigest md = MessageDiges", "public static org.osmdroid.views.overlay.Polygon addPolygonToMap(\n        MapView map,\n        List<GeoPoint> pts,\n        List<List<GeoPoint>> holes, PolygonOptions options) {\n        org.osmdroid.views.overlay.Polygon polygon1 = new org.osmdroid.views.overlay.Polygon(map);\n        polygon1.setPoints(pts);\n        polygon1.getHoles().addAll(holes);\n        if (options!=null) {\n            polygon1.setFillColor(options.getFillColor());\n            polygon1.setTitle(options.getTitle());\n            polygon1.setStrokeColor(options.getStrokeColor());\n            polygon1.setStrokeWidth(options.getStrokeWidth());\n            polygon1.setSubDescription(options.getSubtitle());\n            polygon1.setInfoWindow(new BasicInfoWindow(R.layout.bonuspack_bubble, map));\n\n        }\n\n\n        map.getOverlayManager().add(polygon1);\n        return polygon1;\n    }", "@Override\n\tprotected RequestMapping parseRequestMapping(MethodDoc methodDoc) {\n\t\tClassDoc controllerClass = methodDoc.containingClass();\n\t\tRequestMapping baseMapping = null;\n\t\tboolean controllerCustomizedMapping = false;\n\t\tboolean actionCustomizedMapping = false;\n\t\tTag[] tags = controllerClass.tags(WRAPITaglet.NAME);\n\t\tif (tags.length > 0) {\n\t\t\tbaseMapping = this.parseRequestMapping(tags[0]);\n\t\t}\n\n\t\tif (baseMapping == null) {\n\t\t\tAnnotationDesc[] baseAnnotations = controllerClass.annotations();\n\t\t\tbaseMapping = this.parseRequestMapping(baseAnnotations);\n\t\t\tcontrollerCustomizedMapping = false;\n\t\t} else {\n\t\t\tcontrollerCustomizedMapping = true;\n\t\t}\n\n\t\tRequestMapping mapping = null;\n\t\tTag[] methodTags = methodDoc.tags(WRAPITaglet.NAME);\n\t\tif (methodTags.length > 0) {\n\t\t\tmapping = this.parseRequestMapping(methodTags[0]);\n\t\t}\n\t\tif (mapping == null) {\n\t\t\tAnnotationDesc[] annotations = methodDoc.annotations();\n\t\t\tmapping = this.parseRequestMapping(annotations);\n\t\t\tactionCustomizedMapping = false;\n\t\t} else {\n\t\t\tactionCustomizedMapping = true;\n\t\t}\n\t\tRequestMapping result;\n\t\tif (baseMapping == null) {\n\t\t\tresult = mapping;\n\t\t} else if (mapping == null) {\n\t\t\tresult = baseMapping;\n\t\t} else {\n\t\t\tif(!actionCustomizedMapping || controllerCustomizedMapping) {\n\t\t\t\tmapping.setUrl(net.winroad.wrdoclet.utils.Util.urlConcat(\n\t\t\t\t\t\tbaseMapping.getUrl(), mapping.getUrl()));\n\t\t\t}\n\t\t\tif (baseMapping.getMethodType() != null) {\n\t\t\t\tif (mapping.getMethodType() != null) {\n\t\t\t\t\tmapping.setMethodType(baseMapping.getMethodType() + \",\"\n\t\t\t\t\t\t\t+ mapping.getMethodType());\n\t\t\t\t} else {\n\t\t\t\t\tmapping.setMethodType(baseMapping.getMethodType());\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult = mapping;\n\t\t}\n\t\tif (result != null) {\n\t\t\tresult.setTooltip(methodDoc.containingClass().simpleTypeName());\n\t\t\tresult.setContainerName(methodDoc.containingClass()\n\t\t\t\t\t.simpleTypeName());\n\t\t}\n\t\treturn result;\n\t}", "public static dbdbprofile[] get_filtered(nitro_service service, filtervalue[] filter) throws Exception{\n\t\tdbdbprofile obj = new dbdbprofile();\n\t\toptions option = new options();\n\t\toption.set_filter(filter);\n\t\tdbdbprofile[] response = (dbdbprofile[]) obj.getfiltered(service, option);\n\t\treturn response;\n\t}", "public boolean canEncode(char c) {\n        CharBuffer cb = CharBuffer.allocate(1);\n        cb.put(c);\n        cb.flip();\n        return canEncode(cb);\n    }", "   public void cancelTimer() {\n      if (timer != null) {\n         timer.cancel();\n      }\n      timer = null;\n   }\n", "private float overScrollUp(int deltaY,int range){\n  deltaY=Math.max(deltaY,0);\n  float currentTopAmount=getCurrentOverScrollAmount(true);\n  float newTopAmount=currentTopAmount - deltaY;\n  if (currentTopAmount > 0) {\n    setOverScrollAmount(newTopAmount,true,false);\n  }\n  float scrollAmount=newTopAmount < 0 ? -newTopAmount : 0.0f;\n  float newScrollY=mOwnScrollY + scrollAmount;\n  if (newScrollY > range) {\n    if (!mExpandedInThisMotion) {\n      float currentBottomPixels=getCurrentOverScrolledPixels(false);\n      setOverScrolledPixels(currentBottomPixels + newScrollY - range,false,false);\n    }\n    mOwnScrollY=range;\n    scrollAmount=0.0f;\n  }\n  return scrollAmount;\n}\n", "private void createNewFormat(int AD_Table_ID){\n  MPrintFormat pf=MPrintFormat.createFromTable(Env.getCtx(),AD_Table_ID);\n  launchReport(pf);\n}\n", "public ReplDBMSEvent peek(){\n  return serialQueue.peek();\n}\n", "public void onEdgeTouched ( int edgeFlags , int pointerId ) { }", "  public void close () {\n    try {\n      flush ();\n\n      // closing socket also closes its input and output streams\n      streamConnection.close ();\n\n    } catch (IOException e) {\n      throw new java.lang.Error (\"Failed to close: \" + e);\n    }\n  }\n", "public void addNode(final NodeType node){\n  Preconditions.checkNotNull(node,\"Node argument can not be null\");\n  m_nodes.add(node);\n  m_nodeToEdges.put(node,new ArrayList<EdgeType>());\n}\n", "@Override\n    void decode(byte[] in, int inPos, int inAvail) {\n        if (eof) {\n            return;\n        }\n        if (inAvail < 0) {\n            eof = true;\n        }\n        for (int i = 0; i < inAvail; i++) {\n            ensureBufferSize(decodeSize);\n            byte b = in[inPos++];\n            if (b == PAD) {\n                // We're done.\n                eof = true;\n                break;\n            } else {\n                if (b >= 0 && b < DECODE_TABLE.length) {\n                    int result = DECODE_TABLE[b];\n                    if (result >= 0) {\n                        modulus = (modulus + 1) % BYTES_PER_ENCODED_BLOCK;\n                        bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + result;\n                        if (modulus == 0) {\n                            buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);\n                            buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);\n                            buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);\n                        }\n                    }\n                }\n            }\n        }\n\n        // Two forms of EOF as far as base64 decoder is concerned: actual\n        // EOF (-1) and first time '=' character is encountered in stream.\n        // This approach makes the '=' padding characters completely optional.\n        if (eof && modulus != 0) {\n            ensureBufferSize(decodeSize);\n\n            // We have some spare bits remaining\n            // Output all whole multiples of 8 bits and ignore the rest\n            switch (modulus) {\n                // case 1: // 6 bits - ignore entirely\n                // break;\n                case 2: // 12 bits = 8 + 4\n                    bitWorkArea = bitWorkArea >> 4; // dump the extra 4 bits\n                    buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);\n                    break;\n                case 3: // 18 bits = 8 + 8 + 2\n                    bitWorkArea = bitWorkArea >> 2; // dump 2 bits\n                    buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);\n                    buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);\n                    break;\n            }\n        }\n    }", "public void paintComponent ( Graphics g ) { super . paintComponent ( g ) ; paint ( ( Graphics2D ) g ) ; }", "\tpublic Phrase copy(){\n\t\tPhrase phr = new Phrase();\n        copyAttributes(phr);\n\t\tEnumeration enum1 = this.noteList.elements();\n\t\twhile(enum1.hasMoreElements()){\n\t\t\tphr.addNote( ((Note) enum1.nextElement()).copy() );\n\t\t}\n\t\treturn phr;\n\t}\n", "public void onMouseMove(MouseMoveEvent event) {\n\t\tif (isMeasuring() && distanceLine.getOriginalLocation() != null) {\n\t\t\tupdateMeasure(event, false);\n\t\t\tdispatchState(State.MOVE);\n\t\t}\n\t}", "private void notifyServiceRevokedToServiceUsers(Class<?> serviceClass,BeanContextServiceProvider serviceProvider,boolean revokeCurrentServicesNow){\nsynchronized (children) {\n    for (Iterator<Object> iter=bcsChildren(); iter.hasNext(); ) {\n      BCSSChild bcssChild=(BCSSChild)iter.next();\n      notifyServiceRevokedToServiceUsers(serviceClass,serviceProvider,revokeCurrentServicesNow,bcssChild);\n    }\n  }\n}\n", "public static String getStreamContents(InputStream is) throws IOException {\n        Preconditions.checkNotNull(is, \"Cannot get String from a null object\");\n        final char[] buffer = new char[0x10000];\n        final StringBuilder out = new StringBuilder();\n        try (Reader in = new InputStreamReader(is, \"UTF-8\")) {\n            int read;\n            do {\n                read = in.read(buffer, 0, buffer.length);\n                if (read > 0) {\n                    out.append(buffer, 0, read);\n                }\n            } while (read >= 0);\n        }\n        return out.toString();\n    }", "\tpublic void summary() {\n\t\tSystem.err.println(\"[adapterCode=\" + adapterCode + \"]\");\n\t\tSystem.err.println(\"[displayTitle=\" + displayTitle + \"]\");\n\t\tSystem.err.println(\"[websiteUrl=\" + websiteUrl);\n\t\tSystem.err.println(\"[imageUrl=\" + imageUrl);\n\t\tSystem.err.println(\"[searchUrl=\" + searchUrl + \"]\");\n\t\tSystem.err.println(\"[method=\" + method + \"]\");\n\t\tSystem.err.println(\"[priority=\" + priority + \"]\");\n\t\tSystem.err.println(\"[resultMixFactor=\" + resultMixFactor + \"]\");\n\t\tSystem.err.println(\"[batchSize=\" + batchSize + \"]\");\n\t\tSystem.err.println(\"[relevanceMultiplier=\" + relevanceMultiplier + \"]\");\n\t\tSystem.err.println(\"[relevanceOffset=\" + relevanceOffset + \"]\");\n\t\tSystem.err.println(\"[reRank=\" + reRank + \"]\");\n\t}\n", "\tpublic ITransaction createTransaction(HttpTransaction httpTransaction) throws XmlHttpException {\n\t\ttry {\n\t\t\t//use own transaction specific class\n\t\t\tif (! StringUtil.isEmpty(httpTransaction.getClazz())) {\n\t\t\t\treturn getTransactionForName(httpTransaction.getClazz());\n\t\t\t}\n\t\t\t\n\t\t\t//use system wide overwritten class\n\t\t\tif (! StringUtil.isEmpty(System.getProperty(PROPERTY_TRANSACTIONCLASS))) {\n\t\t\t\treturn getTransactionForName(System.getProperty(PROPERTY_TRANSACTIONCLASS));\n\t\t\t}\n\n\t\t\t// use default transaction\n\t\t\treturn new DefaultTransaction();\n\t\t} catch (Exception ex) {\n\t\t\tthrow new XmlHttpException(ex);\n\t\t}\n\t}\n", "public long capacity(){\n  return capacity.get();\n}\n", "public static String rewriteMethodSignature ( ClassNameRewriter classNameRewriter , String methodSignature ) { if ( classNameRewriter != IdentityClassNameRewriter . instance ( ) ) { SignatureParser parser = new SignatureParser ( methodSignature ) ; StringBuilder buf = new StringBuilder ( ) ; buf . append ( STR_ ) ; for ( Iterator < String > i = parser . parameterSignatureIterator ( ) ; i . hasNext ( ) ; ) { buf . append ( rewriteSignature ( classNameRewriter , i . next ( ) ) ) ; } buf . append ( STR_ ) ; buf . append ( rewriteSignature ( classNameRewriter , parser . getReturnTypeSignature ( ) ) ) ; methodSignature = buf . toString ( ) ; } return methodSignature ; }", "    private PreparedStatement generateAddLinkStatement() throws SQLException {\n\tString query = \"insert into \\\"\" + getTableName() + \"\\\" (\\\"\"\n\t\t+ parentFieldName + \"\\\", \\\"\" + childFieldName\n\t\t+ \"\\\") values (?, ?)\";\n\treturn connection.prepareStatement(query);\n    }\n", "@CallerSensitive\n    public static synchronized void deregisterDriver(Driver driver)\n        throws SQLException {\n        if (driver == null) {\n            return;\n        }\n\n        println(\"DriverManager.deregisterDriver: \" + driver);\n\n        DriverInfo aDriver = new DriverInfo(driver);\n        if(registeredDrivers.contains(aDriver)) {\n            if (isDriverAllowed(driver, ClassLoader.getSystemClassLoader())) {\n                 registeredDrivers.remove(aDriver);\n            } else {\n                // If the caller does not have permission to load the driver then\n                // throw a SecurityException.\n                throw new SecurityException();\n            }\n        } else {\n            println(\"    couldn't find driver to unload\");\n        }\n    }", "public static double incompleteGammaComplement(double a,double x){\n  double ans, ax, c, yc, r, t, y, z;\n  double pk, pkm1, pkm2, qk, qkm1, qkm2;\n  if (x <= 0 || a <= 0) {\n    return 1.0;\n  }\n  if (x < 1.0 || x < a) {\n    return 1.0 - incompleteGamma(a,x);\n  }\n  ax=a * Math.log(x) - x - lnGamma(a);\n  if (ax < -MAXLOG) {\n    return 0.0;\n  }\n  ax=Math.exp(ax);\n  y=1.0 - a;\n  z=x + y + 1.0;\n  c=0.0;\n  pkm2=1.0;\n  qkm2=x;\n  pkm1=x + 1.0;\n  qkm1=z * x;\n  ans=pkm1 / qkm1;\n  do {\n    c+=1.0;\n    y+=1.0;\n    z+=2.0;\n    yc=y * c;\n    pk=pkm1 * z - pkm2 * yc;\n    qk=qkm1 * z - qkm2 * yc;\n    if (qk != 0) {\n      r=pk / qk;\n      t=Math.abs((ans - r) / r);\n      ans=r;\n    }\n else {\n      t=1.0;\n    }\n    pkm2=pkm1;\n    pkm1=pk;\n    qkm2=qkm1;\n    qkm1=qk;\n    if (Math.abs(pk) > big) {\n      pkm2*=biginv;\n      pkm1*=biginv;\n      qkm2*=biginv;\n      qkm1*=biginv;\n    }\n  }\n while (t > MACHEP);\n  return ans * ax;\n}\n", "public void init(SocketChannel s)\n  {\n    _s = s;\n\n    try {\n      s.setOption(StandardSocketOptions.TCP_NODELAY, true);\n    } catch (Exception e) {\n      e.printStackTrace();;\n    }\n    //_is = null;\n    //_os = null;\n    _needsFlush = false;\n    \n    _readBuffer.clear().flip();\n    _writeBuffer.clear();\n  }", "public static LocalDateTime parseDate(String value) {\n        if (StringUtils.isBlank(value)) {\n            logger.info(\"[version-info] No date defined, using current date.\");\n            return Time.now();\n        } else {\n            try {\n                return LocalDateTime.parse(value, DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss\"));\n            } catch (DateTimeParseException ex) {\n                logger.warn(\"[version-info] Wrong date format, using current date: \" + value);\n                return Time.now();\n            }\n        }\n    }", "public CGotoAddressInputField ( ) { super ( new CHexFormatter ( NUM_ ) ) ; }", "public synchronized List < Map < String , String > > listChannelAssignments ( ) throws ReplicatorException { assertActive ( ) ; List < Map < String , String > > channels = null ; try { channels = channelTable . list ( getConnection ( ) ) ; } catch ( SQLException e ) { accessFailures ++ ; if ( logger . isDebugEnabled ( ) ) logger . debug ( STR_ , e ) ; channels = new ArrayList < Map < String , String > > ( ) ; } return channels ; }", "\tpublic PERange clone() {\n\t\treturn new PERange(begin, end);\n\t}\n", "String namedForThisSegment(String file){\n  return name + IndexFileNames.stripSegmentName(file);\n}\n", "public static void offerBusyBox ( Activity activity ) { getInternals ( ) . offerBusyBox ( activity ) ; }", "public void addFirst(StatementSequence statements){\n  if (statements != null) {\n    sequence.addAll(0,statements.sequence);\n  }\n}\n", "\tpublic BpaReqInfo getNextRequest(String theJBpsId) throws JBpaException, ServiceNotAvailableException {\n\t\ttry {\n\t\t\t// NON EPO CODE : 04/04/2005, Log traces, line(s) 596-597\n\n\t\t\tcheckOpenedSession();\n\t\t\treturn getNextRequest(theJBpsId,0);\n\t\t} finally {\n\t\t\t// NON EPO CODE : 04/04/2005, Log traces, line(s) 601-602\n\n\t\t}\n\t}\n", "  public boolean resetFinished() {\n    return finished.compareAndSet(true, false);\n  }\n", "private static String buildParentString(final String tag,\n            final String tail) {\n        if (tail.isEmpty()) {\n            return tag;\n        } else {\n            return tag + \" \" + tail;\n        }\n    }", "@Nonnull\n  // it's reflection, can't avoid unchecked cast\n  @SuppressWarnings(\"unchecked\")\n  public static Module classNameToModule(final Parameters parameters, final Class<?> clazz,\n      Optional<? extends Class<? extends Annotation>> annotation)\n      throws IllegalAccessException, InvocationTargetException, InstantiationException {\n    if (Module.class.isAssignableFrom(clazz)) {\n      return instantiateModule((Class<? extends Module>) clazz, parameters, annotation);\n    } else {\n      // to abbreviate the names of modules in param files, if a class name is provided which\n      // is not a Module, we check if there is an inner-class named Module which is a Module\n      for (final String fallbackInnerClassName : FALLBACK_INNER_CLASS_NAMES) {\n        final String fullyQualifiedName = clazz.getName() + \"$\" + fallbackInnerClassName;\n        final Class<? extends Module> innerModuleClazz;\n        try {\n          innerModuleClazz = (Class<? extends Module>) Class.forName(fullyQualifiedName);\n        } catch (ClassNotFoundException cnfe) {\n          // it's okay, we just try the next one\n          continue;\n        }\n\n        if (Module.class.isAssignableFrom(innerModuleClazz)) {\n          return instantiateModule(innerModuleClazz, parameters, annotation);\n        } else {\n          throw new RuntimeException(clazz.getName() + \" is not a module; \"\n              + fullyQualifiedName + \" exists but is not a module\");\n        }\n      }\n\n      // if we got here, we didn't find any module\n      throw new RuntimeException(\"Could not find inner class of \" + clazz.getName()\n          + \" matching any of \" + FALLBACK_INNER_CLASS_NAMES);\n    }\n  }", "    public void addVSpace(int space) {\n\tm_nextVerticalOffset = space;\n    }\n", "public final void entryRuleConjunction() throws RecognitionException {\n        try {\n            // InternalXtext.g:646:1: ( ruleConjunction EOF )\n            // InternalXtext.g:647:1: ruleConjunction EOF\n            {\n             before(grammarAccess.getConjunctionRule()); \n            pushFollow(FollowSets000.FOLLOW_1);\n            ruleConjunction();\n\n            state._fsp--;\n\n             after(grammarAccess.getConjunctionRule()); \n            match(input,EOF,FollowSets000.FOLLOW_2); \n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }", "    public void createNoOperation(String content) {\n        if (currentPage != null) {\n            currentPage.createNoOperation(content);\n        } else if (currentPageGroup != null) {\n            currentPageGroup.createNoOperation(content);\n        } else {\n            document.createNoOperation(content);\n        }\n    }\n", "public void onPageEvent(long officialTime) {\n\t\t//cleanup expired sessions\n\t\tArrayList garbage = new ArrayList(sessionsMirror.size());\n\t\tIterator i;\n\t\tStandardSession session;\n\t\tsynchronized (sessionsMirror) {\n\t\t\ti = sessionsMirror.values().iterator();", "    private ReadWriteLock getExistingLock(@NonNullable final K key) {\n        KeyedWeakReference<K,ReadWriteLock> ref = this.rwlMap.get(key);\n        return ref == null ? null : this.toLock(ref);\n    }\n", "public String toString ( ) { return String . format ( STR_ , x ( ) , y ( ) ) ; }", "@Override\n    public DescribeVoicesResult describeVoices(DescribeVoicesRequest request) {\n        request = beforeClientExecution(request);\n        return executeDescribeVoices(request);\n    }", "@Override\n    public void put(String name, Object value) {\n        emulatedFields.put(name, value);\n    }", "public void enableRealtimeStepsNotify(){\n  checkConnection();\n  final List<BLEAction> list=new ArrayList<>();\n  list.add(new WriteAction(Profile.UUID_CHAR_CONTROL_POINT,Protocol.ENABLE_REALTIME_STEPS_NOTIFY));\n  final BLETask task=new BLETask(list);\n  queue(list);\n}\n", "public TypedQuery<Long> count(Filter filter) {\n        CriteriaQuery<Long> query = cb.createQuery(Long.class);\n        Root<T> from = query.from(getEntityClass());\n\n        if (filter != null) {\n            Predicate where = new CriteriaMapper(from, cb).create(filter);\n            query.where(where);\n        }\n\n        return getEntityManager().createQuery(query.select(cb.count(from)));\n    }", "void generateDefault ( ) ;", "public boolean isEditable ( ) { return this . editable && isVisible ( ) ; }", "\tprivate void processCreature(CountCreature creature) {\n\t\tfor (DropItem item : creature.getDropList()) {\n\t\t\t/*\n\t\t\t * Probability for a creature with that item spawning at a given\n\t\t\t * turn\n\t\t\t */\n\t\t\tdouble probability = item.probability / 100 / creature.getRespawnTime();\n\t\t\taddToProbability(item.name, probability);\n\t\t}\n\t}\n"], "comment": ["special kluge to append a .", "called between the fade out animation and closing animation .", "remove the given local tid from the map .", "looks to see if we have a new distance text .", "checks if given hash is the same for given file - helps to detect file changes", "notify the listeners that the model has changed", "write to log file", "generates the representation of a parameter on the display diagram", "creates a new tree model .", "show the panel to the position selected .", "read a mask in from a buffer", "name of the operation making the allocation .", "creates a new action object .", "for faster lookup by xpath return creating if necessary an index", "this method adds an extension to the recognizer .", "checks if is modified depth", "exception handlers with no finally block are also included with subroutine only once in case parented with true insidesubroutineflowcontext", "gets an items versioned property from a repository and passes it to a provided property handler", "adds the given column to this table", "return an expression representing the given condition .", "bind a factory .", "get the estimates based on the last sample", "filter from the input map the unmapped field of this entity", "validates the 7zip settings", "sets the connection router which handles the layout of this polyline", "store fields to given user .", "check whether the given method is a create method", "performs a single flow through a node .", "get the transfer matrix from the transfer map trajectory", "logs a start message for verinice .", "returns true if key is unique i . e . has one and only one value per entry .", "schedule an existing job with an existing trigger .", "converts all separators to the system separator .", "sets a new user space if parameter is not null", "the fixture clean up called after every test method", "tests if the next characters on the queue match the sequence .", "add members to a group .", "read a file .", "this method extracts from address the hostname", "compare to objects", "ensures that sql column names don ' t collide with java keywords .", "this image will be used for painting the total number of pages and for a failure header when failures are printed inside the report .", "send an action to all participating players", "parses a single cookie", "this method calculates the normal cdf inverse function .", "answers whether this class is an immediate descendant ( as subclass or as an implementation of an interface ) of the given class .", "determine the overlap of the diagram with the screen , and shift ( if necessary ) the diagram draw center .", "restores a trashed file to a new location with a new name .", "add the given property source object with highest precedence .", "log a new message on the selected printstream with the given method and level .", "places the string representation of extension value into the stringbuffer object", "whether the skin being used is from external . skin file", "marshall the given parameter object .", "throw an exception to the listener", "sets the scaling factor of the thumbnail .", "notifies that multiple header items are changed .", "called before a download begins .", "close this supervisor .", "gets the name of delegate", "ultimately , we will need to wait for all 5 calls to be completed before the sentence can be assembled .", "setter status of pause motion animator", "verifies that the client constraints for this proxy are consistent with those set on the underlying server ref .", "marshall the given parameter object .", "confirm that the local values average correctly back to the average value", "format event properties including full sip message if desired", "append a member to the end of the list of members .", "notifies the listener that the scape has removed it", "this method returns the name of the destination to which consumers should attach when receiving messages using this jms destination .", "performs a warm start if the given object is of the appropriate class .", "callback fired once remote ice candidate is received .", "a plain store ( no ordering / fences ) of an element to a given offset", "sets the x and y values of the given vector to their absolute value .", "example to readjson using streamingapi", "fills a box between the points specified in the colour specified", "returns the number of dimensions of the stochastic process", "generates an xml - formatted block that summarizes the state of the jobtracker .", "initialise calculator preparing to take observation sets in should be called prior to any of the addobservations methods .", "updates all activecomponents", "also known as the core pre init .", "adds a component listener to this instance .", "set the value related to the column cat type", "gets the estimated time to crack formatted as a string .", "get the name of this application", "applies heuristic for finding candidate that is expected to lead to good gain when applying takestep together with second candidate", "set this matrix to a rotation transformation about the x axis .", "creates tlv element with byte array content .", "post an audio byte [ ] to the alexa speech recognizer api", "get all rows of the specified item", "encode a json name and value for output", "adds an item to the queue .", "delete the attribute value .", "draws a horizontal rule into the graph and optionally adds a legend .", "la stringa contiene il value del field di cui bisogna fare il parsing per estrarre valore e unita di misura", "add an option", "runs the callback on the executor .", "sets the amount that the receivers value will be modified by when the up down or right left arrows are pressed to the argument which must be at least one", "this method is called when a new database was added to the database manager .", "set the value", "$ antlr start \" not \"", "the setter method for the long value", "starts the replication task assessment for unsupported data types in the source database .", "helper method to generate logoutrequests and send to non - initiating participants", "creates a union wrapping no value", "process notification of the end of an xml element being reached .", "find out rowindexmin for greaterthan operator .", "instantiates a new jk time object .", "decrement an amount of runs registration has to run until it s elapsed", "gets the last selected team", "gets the cmap id for the cmap with the given index .", "the cdf for this distribution", "returns whether the path represents a drawable resource .", "returns the variable for the context classloader .", "returns a flag that indicates whether the view data has been loaded from the database .", "creates documents for given renderer .", "checks the portnames array to make sure that all portnames are unique", "sets the number of samples in the sound data", "performs a test where no responces are given the stun client so that it concludes it is behind a symmetric nat .", "update the data structures to reflect that all live intervals for r2 are now intervals for r1 .", "construct n octagon around the given point", "this class is used to store the information of each stamp and annotation on the pdf .", "delete an instance of the entryclass and remove the class from entryclasses if this is the last such instance .", "constructs a command line manager .", "changes an existing property with the same name , or adds a new one", "decodes the given input .", "initiates the frame", "removes breakpoints from the target process .", "this returns the label text for the adapted class", "makes the current state of the list restorable by undo .", "creates a new action object .", "creates a new instance of elflash", "for the input tree , collapse any collocations in it that exist in", "creates the contents of the composite", "same as performfind but now returning a list instead of an iterator extra parameters viewindex : startpage of the partial list ( 0 = first page ) viewsize : the length of the page ( number of records ) extra output parameter : listsize : size of the totallist list : the list itself .", "shut down the job service immediately .", "get a utc encoded time value from the input stream .", "parses the given module and installs error markers on it or project", "sets the attribute map .", "method to check if there is a queued node that is a parent of both tmpnode and node", "adds item to history and refresh view .", "unclaims a previously claimed task .", "reads the long value from the json object for specified tag .", "assumes the current engine has failed and attempts to start the next available engine .", "sets the system wide calibration", "updates an existing project wiki page .", "initialize swf verification data .", "checks if the resource authorities have been set in the properties file", "set all headers found in given map where the keys are the header names and the values are the header values", "this bean represents the ui controller", "creates new command of the specified type with the given name and command line .", "starts a replication service .", "display a message for the player", "manually listens for specific topic partition .", "adds a new array of colors for one dataset to the template .", "generate the fields and the methods .", "ensures the truth of an expression involving the state of the calling instance , but not involving any parameters to the calling method .", "put or replace a double value .", "like getinstruction but creates bubbles during a stall", "build a multilayernetwork from this keras sequential model configuration and import weights .", "when the api is accessed though the browser selenium is used , though straight http calls we can choose to post or get the api", "appends text to the sink", "change the start time of this service .", "retrieve field values of instances from the store", "writes the full content of the buffer to the channel .", "returns whether the target process is using multiple threads .", "add statements to be performed when this trigger activates .", "instantiates a new routing service .", "creates a new integer constant .", "returns the inverse mass", "creates and adds a new group", "returns a list for candidate getter names .", "overrides the oncreateoptionsmenu", "open cache index for writing back to persistent storage hook", "get the course to update", "resolve stdout log destination .", "check if string is empty .", "starts network request on the network queue ( method returns immediately )", "decode a line using the delimiter defined by the caller", "void addpod ( podbartenderimpl pod ) {", "validates parameters to ensure they are appropriate for the evaluation of the value and gradient methods", "invoked after a new operation was added to the manager .", "gets the value of opened", "checks if two sections collide with each other", "canonicalizeurl borrowed from jsoup .", "if headerline = null , then add no line at top of file .", "identifies action data from text string note : if string does not correspond to an action data as defined in conditionalaction , returns - 1 .", "constructs a new poolingbytearrayoutputstream with a default size .", "removes a class to transformer mapping in the map", "deletes ldap entries on an ldap server", "cloture dune transaction", "retrieves the hash from a segwit commitment ( in an output of the coinbase transaction ) .", "retrieves message from the queue by message id .", "determines whether a given reil instruction is a function call .", "log a message at the ' statistics ' level .", "returns the ring with the highest numbers of other rings attached to it .", "marshall the given parameter object .", "sets the y", "accept a connection on the specified key", "creates an new instance of the recursiveziphandler .", "creates a new gotosectionmenu instance .", "takes the result of an invocation and extracts any error messages and adds them to the targetlist or targetmap .", "adds a button to the resizabletoolbar", "convert a path component that contains backslash escape sequences to a literal string .", "loads an anchor pane using the supplied loader .", "set header name to given value", "convert a ipv4 netmask integer to a prefix length", "get likes posts for this blog", "remove listener on reference ' s release .", "recursively decends in the tree of possible joint plans .", "shows a dialog that asks the user for the location of the ida pro installation directory", "initializes an instance which clones objects when they are added or returned .", "get new versions of the constraints which have positive right hand sides .", "applies this jsonpath to the provided json document .", "checks to see if the entity is correct", "adds the given location to the table", "sets the variableset attribute of the scan2d object", "moved to dbhelper", "set the accept charset header to given value", "get the next n characters", "function will examine the exportgroup ' s initiators and the initiatoruris list .", "copies the basic intervals up to and including stop into a new interval .", "getdatestringorsuppliedstring , this returns the last valid date in an iso - 8601 formatted string \" uuuu - mm - dd \" .", "replies all the user data .", "returns true if the given address has been seen via markbroadcastby ( )", "make a bitmap from a given uri .", "attempts to prepare the request for a retry .", "this adds a property descriptor for the schema feature", "the description of this filter", "checks whether the given value already parsed fits into the possible values", "call this to configure a kryofactory type before initializing fluo .", "create a namematcher that matches trigger names ending with the given string .", "verifies the certificate chain .", "generate and append a string representation of this set to result .", "synchronously perform operation .", "returns the image bounds of the image as it would be warped to the provided projection .", "begin the execution of a task .", "compiles a pattern ( regex ) and sets it as pattern .", "changes the access permissions or modes of the specified file or directory .", "stops the client and releases resources .", "creates a new table model that displays the event lists given by an event list provider .", "converts an ast to dot representation and appends it to the given buffer .", "zip together the \" a \" , \" b \" and \" c \" iterators until one of them runs out of values .", "removes the item from the indexed property", "method to draw one line which one is specified by the boolean xaxis variable", "returns true if all of the data members of matrix4d m1 are equal to the corresponding data members in this matrix4d", "to populate fieldmap ( key is columnname , value is fieldinfo ) holding the column and fields", "sets the removed", "create a datebuilder , with initial settings for the current date and time in the given locale .", "determines whether another object is equal to this location", "indicates if this tile s underlying image has been successfully loaded yet .", "returns typekind ordinal for primitive types and declared ordinal for declared , array and typevar", "release any acquired resources .", "appends the next character in the line to the stringbuffer .", "direct memory mapping from a file descriptor .", "resizes the bit array to a new count .", "rehashes the contents of this map into a new array with a larger capacity .", "reads in single utf - encoded character one byte at a time , appends the character to sbuf , and returns the number of bytes consumed .", "gets the closed dialog result status", "lists devices , as an administrator .", "reads configuration file", "releases a global lock of the indicated type if the supplied key is a match for the lock .", "initialize the calculated values", "create and configure indicator in java code .", "create initialize and return a new launch configuration of the given type", "adds a listener that will be notified on the given executor when new peers are discovered .", "calculates the sample likelihood and bic score for i given its parents in a simple sem model", "have to call this class before launching coremanager", "event procedure for the arrival event", "construct the felix command service .", "set charset to use for email body .", "loads a view waits until the load operation is complete and returns whether loading the view was successful or not .", "returns a new digitalout instance with the given state .", "multiply a character by a number .", "delegates execution to the underlying runnable .", "sets a calendar component based on the input value .", "method overwritten by derived objects to determine if it is secondary data", "captures pod block from current position", "prints stack trace to the outputstream used by this handler", "decode scalefactors ; reference : table 4 . 47 .", "get instance representing a parameter marked as nonnull", "provides the modelss descriptor", "verify that we can handle a two stage pipeline with an intervening store .", "search for classes using class loading", "append an equal number of bits from each int in an array within given limits to the given byte array .", "constructs a sender with th socket", "unregisters the parallaximageview ' s sensormanager .", "limit the error message retrieved from the emulator to the smaller of 1k characters or 30 lines .", "turn the node by its turning speed", "overriden as a means to unregister internal listeners do not call directly", "creates and returns the uicomponent that this treestructure represents using the structure information available .", "shows the clear database form", "this operation generates a description of an image in human readable language with complete sentences .", "instantiates a new elide .", "return true if this package is sealed with respect to the specified url , false otherwise .", "parses the command line arguments of an application and compares those options against a list of expected options .", "returns the list object associated with the specified section .", "helper method to delete customerreview", "retrieves vm status ( tested on ca only ) .", "looks up the appropriate function for the given parameter types .", "return but do not remove the object at the top of the stack", "constructs a 3 x 3 matrix with the components of a specified matrix .", "prints a string in to the toolio buffer in a separate line", "creates and returns a string representation of this object , using the given separator for the fields", "pushes a methodcall according to the given methodcallnode onto the callstack and filters set of handled nodes to no longer contain nodes of the called method except the method call itself .", "retrieves the rasterop enable flag for this renderingattributes object", "add a private field to this and automatically add the import of the type if needed", "determine if i will accept a feature as a super feature of mine", "creates and persists a new business object format entity from the request information .", "obtains the jwk string that is active in the specified config and prints it in json format in the response .", "returns a random permutation of all the integers between floor ( inclusive ) and ceil ( exclusive ) with the exception of one number ( excluded ) which is intentionally excluded .", "construct an httptokener from a string .", "get the name of this table .", "validate that the specified argument object fall between the two exclusive values specified ; otherwise , throws an exception .", "initialize acra for a given application .", "filter link parameters from a provided link object , if configured to do so .", "remove the specified totrim string from the front and back of the specified str argument", "creates the standard jsni delimiter blocks .", "parse a new instance expression .", "returns a state from merging of the two states", "automatically arranges the operators in the specified process according to a layouting algorithm .", "flush the stream and check its error state .", "notifies the registered listener about the event", "returns whether a particular content setting type is enabled .", "tests two doubles for ' near enough ' equality .", "this method returns true if the specified image has transparent pixels", "pads the plaintext ( i . e . , the key to be wrapped ) as per section 4 . 1 of rfc 5649 .", "called to determine whether the given position can be dismissed .", "whether or not the table is colorized", "creates a new action object .", "callback for when the matrix displaying the drawable has changed .", "returns true if this is a type of query for person", "returns a shallow copy of the underlying map as a hashmap .", "closes all live connections .", "format contactid to tel or sip uri", "searches for products using a case - insensitive search term .", "returns the commerce subscription entry with the primary key or returns null if it could not be found .", "construct a new instance of this test case .", "in - place sort of two arrays , only indexes is used for comparison and values of same position are sorted accordingly .", "element by element multiplication in place a a .", "adds the complete rtf document to the current rtf element being generated", "returns a new window on the active workspce", "resets the skinned mesh joint matrix", "returns the address that corresponds to the public part of this eckey .", "write part of an array of bytes .", "applies the hue to the image", "instantiates a new jk audit type .", "pack header by fastdfs transfer protocol", "updates the authenticating users status", "initialize the singleton instance of rollbar .", "this method takes an object instance for a pojoclass and flattens it into a properly formatted string .", "merge identified modified compounds if linked .", "this method returns the key synch cache for the given key", "check if the file is for the correct product .", "invoked when the modification date of a project changed .", "enable or disable controls which are marked as to be disabled when searching", "checks if the given principal has the permission to create views within the specified view group .", "used by subclasses", "this method constructs name for container representation .", "example to writejson using treemodel", "called to indicate an error .", "adds a c3 line to the sprite list .", "monitoring application generates tuples on job registrations , removals , and on registered job updates .", "returns a full model in all variables for the given bdd .", "replace all the data source for this probe description with the list provided", "can the end user modify this field of their own account ?", "updates a single unpublishs stored operational attributes and makes appropriate callbacks", "invoked after a tag was deleted from the tag manager .", "sets black as the active color by mouse click", "index super column .", "entry point for visiting the plan", "recursive call to further subdivide the array .", "add a node to the path with the specified destination point and facing direction .", "here we expect the clickhouse error message to be of the following format : \" code : 10 , e . displaytext ( ) = db : : exception : . . . \" .", "create new relay log client instance .", "initializes an entities type on construction to specify what group this entity is in for activation ranges .", "wait for the semaphore to be posted", "skips the given event", "sets the components tool tip", "disposes of object releasing resources .", "builds the content of the text node .", "each time the agent program is called , it tells the knowledge base what it perceives .", "matches the given text with the given pattern .", "adds a sort builder .", "calculates the left and right positions of each events .", "update an existing shard definition .", "method get outlook main view gets the single instance of the", "a list of stepconfig to be executed by the job flow .", "calls the display list and renders the 3d object in opengl", "this adds a property descriptor for the replacement pattern feature", "check weather an entry is rewritten under xtn", "returns the matching header .", "attempts to prepare the request for a retry .", "creates a new okapifilenotfoundexception object with a given parent exception cause", "returns formatted charsequence without additional operations", "returns the epoch number of the latest measurement logged", "create path as a new directory including any intervening directories in the path .", "synchronizes the data retrieved from the server about the contents of the target folder with the current data in the local database .", "test method that returns a string containing the status of the pipeline", "adds a triangle to the advancing front to fill a hole .", "helper method to create a fixture organization to act as an entity", "notifies any registered listener of a change of dimensions in the", "split the string into values using the regular expression , removes whitespace from the beginning and end of the resultant strings and replaces runs of whitespace with a single space .", "removes a the phaselisteners attached to viewroot .", "gets all the load balancer probes .", "update stream recording in the live stream service", "replies the outboxing type for the given type .", "returns the next recurrence from the specified time .", "the method changexml used to select the different xml", "perform an initial save of a previously unsaved toassistance entity", "close the connection and release any resources .", "writes the entity metawidget and its namespaces into the given context .", "c tor creating the effect with explicit arguments .", "the bitwise exclusive or operation .", "cleans up any cached resources used by getline .", "given a rank and a sequence number changes the sequencer of the message", "marks this proxy object as being closed .", "search for identities given the identity type , identity name use common method from lazyconfig . authd for getidentity", "opens the incremental update log file in read write mode .", "creates an exception setting the throwable object that caused it .", "send a channels on - air update to all registered listeners .", "change current selected item to given index", "creates a new instance .", "get relative path", "select the main editor if it is not already selected", "insert a radio item in the menu at the specified index .", "validate pspdate component ranges", "takes an array of managedobjects and returns the mor for each mo", "gets the ids of the resources , as a list of strings .", "return if the import is static .", "when check project in code repository fail delete deploy keys named domeos first", "writes an int to an output stream", "there no thread safety issue because the supplierfutureref is only used for the asynchronous approach .", "toggles the state of automatic layouting in the graph .", "initialise the cipher and , possibly , the initialisation vector ( iv ) .", "get the ns name for a namespace can also be a complete type", "returns a class from the internal cache .", "initialized the params of webgl", "operator inside transation update instance into database", "get a property from a named dictionary in the resources of this content stream .", "remove margintop to simulate set fitssystemwindow false", "create a new project", "synchronizes the refresh button with the currently selected debugger in the debug gui perspective .", "invoked after a module was deleted from the database .", "caution not stack safe", "creates a new remove breakpoint command .", "write a line separator followed by indentation .", "gets the ip address and port information of all the compute nodes which are used for job execution .", "closes the input stream .", "do any clean up necessary to allow this instance to be used again", "calculates z position in eye coordinates", "return the dot product of two vectors v u", "returns true if this span is in the range of the span s .", "data are loaded next the configuration has been loaded", "reflectively call a static method on a class .", "set the endpoint address for the specified port name", "updates the provisioned throughput for the given table .", "specifies whether this async handler is terminated and will not run again", "from the specified column of y tau is computed and each element is divided by ' max ' .", "tests iterating through the range .", "rewrite a fieldannotation to update the class name and field signature if needed .", "override of base class abstract function creates an appropriately configured view for checkouts either the current view or a view from this label or the raw view itself in the case of a revision label", "gets the x y location that corresponds to the specified mouse pixel point", "adds a column to the string of columns participating in the index", "formats time in milliseconds to hh mm ss string format .", "main function to start a tracker .", "parse the mpegframeheader of an mp3file , file pointer returns at end of the frame header", "returns the name of the supplied class as it would likely appear in code using the class ( no package prefix , arrays specified as type [ ] ) .", "handles the intent extra , which specifies , whether the navigation should be shown , or not .", "checks that two metadata keys are compatible .", "checks whether the artifact is recognized as a scripting service or not", "get the name of this dataitem", "find the page with the lowest non - empty position value which is visible in the current security context and for the given site .", "send notice to channel", "convert tag value to a string .", "creates an output stream with a given initial buffer and a given bump size .", "same as prestartcorethread except arranges that at least one thread is started even if corepoolsize is 0 .", "returns a string represenation for the find references ui to represent the matches and the queried object .", "waits for any result indefently .", "returns the index of the first occurrrence of the pattern string in the text string .", "collects the instructions of a code node that have the same address as the given instruction .", "load record with id", "return count of autocorrelations", "don ' t use this yet .", "creates a new union member in the backend .", "compare two patterns and return true if arg is a more specific more grounded version of this one", "authenticated resource which returns all related changes to an account .", "returns a copy of the transfered items list", "register the group ' s snmpmibtable objects with the meta - data .", "shortcut for property propertyname between low high .", "invoked for transaction inflow of work", "tries to add a download object to the error list .", "initializes the plasticxp class defaults", "create the panelleaguestandings and add it to the frame", "creates a new color settings panel .", "compute the conditional mutual information if the given variable were ordered as per the ordering specified in newordering", "play sound with musicid in soundpool", "add a node as a child of this node", "get the real map for the current user", "creates an iterator yielding values from the source iterable up until the passed predicate matches .", "returns a fields value as a string encoded with encoding parameter", "this method also assumes enddate > = startdate", "clear all nearby avatars", "instantiates a new shibboleth system scope repository .", "removes a listener object from the tag manager .", "set the preferred horizontal offset", "this method closes the streams", "writes out the remaining character - level attributes ( attributes other than bold , italic , and underline ) in an html - compliant way .", "compute the core distances for all objects .", "add a vetoable change listener to this bean", "returns the preferred size dimensions needed for this", "unregisters the dynamic mbean", "print out the error message", "swap two nodes in the tree", "rotate this color by a specified amount", "returns a list of validation error messages if any for the given configuration .", "writes all objects in the list to the output stream .", "sets up the histogramsplot object and puts it into a zoomablechart", "laods the package and any sub - packages from their serialized form .", "srcp syntax term fb", "whether the path is file path", "adds a new row to the result set", "checks if caret of the given editor is located inside javadoc and tries to perform smart completion there in case of the positive answer .", "find or create a connection to the given node", "checks if the media type is a drm media type", "start the message processing thread .", "ends the visit of a signature corresponding to a class or interface type .", "removes a listener object from the graph builder .", "return true if the group is updateable", "called when the form list has finished downloading .", "get comment single line comment ( starting with # # ) .", "remove the specified dirtiness change listener", "adds a new button toggle to this toolbar", "helper function that moves permissions from a namespace being deleted to its parent namespace", "remove an active node and all its references", "extract saml response which was written to a stream", "helper function to schedule retry future .", "adds all widgets from given iterable", "draw this image at a specified location and size as a silohette", "generate an uuid looks like rfc4122 v4 .", "deletes the supplied object from the persistent store", "set the desired framerate in frames per second", "creates a new refresh button synchronizer .", "parses the current token as a list of characters .", "add brunch - means you want to split your execution", "the value in the children nodes .", "remove any records for the supplied componentname .", "execute a command and return all the lines of the output .", "appends a json encoded key / value pair to the given string builder .", "performs creation - time injections on all objects that require it .", "adds a mode usage to the attributevalidationmodeusages list if we process attributes .", "applies a key to the rate limit that defines to which keys , the rule applies , empty for any unmatched key .", "get data ( identified by the given key ) that has been cached on the given gradle project reference .", "creates a new debug perspective model .", "decompose the helm2 into smaller helm2 objects", "set the initial checked state of the passed list element to true", "get the specified role assignment .", "clears all earcons associated with this fragment", "get a cursor based on a image reference on the classpath .", "verify that class file names are legal java identifiers .", "construct a new bom .", "return the locking hint for this database", "builds the current revision .", "fit an iterator", "this function differs from regular transitions because we incorporate the cost of incomplete left - hand ngrams , as well as including the start - and end - of - sentence markers ( if they were requested when the object was created ) .", "send given metrics to the graphite server .", "returns clusterid cluster node for the specified cluster index", "returns true if the boolean value is valid .", "compute column - wise ( i . e . value index of each column ) , and return a frame having a single row .", "write a pretty version of the element to the outputstream .", "moves widgets to content for backward compatibility", "reads and parses the configuration file .", "extract the primitive bounds from this geoid .", "performs an external merge on the values in the iterator .", "mapping of classes to be annotated and the corresponding injected object .", "returns proxy with simpledaoinvocationhandler if they exists for the specified id in this manager", "find the matched start or end value for a given view .", "bat levels up with all damage it inflicts in combat .", "determines whether the function has been loaded or not .", "ensure that log file has only the following lines .", "tests extracting data length", "merges a certificate or a certificate chain with a key pair existing on the server .", "create a new feature with a random id .", "constructs a new finderexception with the specified detail message and cause .", "asserts that actual satisfies the condition specified by matcher .", "actlion listener for timer", "asserts that two floats are equal concerning a delta .", "find root of result type", "gets the build information .", "construction of fileshareexport export", "creates challan information object for given receipt header", "returns the last modified time for the path .", "clears the contents of cached system tables and resets user slots to null .", "evaluates the continued fraction at the value x .", "creates a new dviewcsr dialog for a pkcs # 10 formatted csr .", "attempts to fetch only the branch definition object from storage .", "set the repeat count of the recurrence", "validates a xml document containing a specification of a dialogue domain .", "adds semantic checks to the default deserialization method .", "opens the tla editor and goes to the marker", "print the tree as done in penn treebank merged files", "removes the entry corresponding to the specified object .", "return the context relative base url for the logoff action", "ensure that all logs are replayed , any other logs can not be added before end of this function .", "creates the new server socket .", "read group properties from node .", "format the loaded filter configurations", "make a dark color to ripple effect", "marshall the given parameter object .", "add a dataservice to the service", "gets a fully - qualified path anchored at root .", "identifies high contrast subspaces in a given full - dimensional database .", "transforms a charsequence representing a uri into a uri object .", "creates a new xor instruction .", "this can be useful for subclasses which display additional items called automatically by setcursorlocation before and after updating the cursor coordinates", "set the endpoint address for the specified port name", "returns the total number of locks held by this class .", "marks a client for removal .", "populate list of levels .", "returns the next lower domain value for a given n", "returns a multimap view of the map .", "create an area chart .", "the canonical aws external region name where this resource is located .", "factory method for exceptionmeteredinvoker .", "asks the camera hardware to begin drawing preview frames to the screen .", "returns an auth credential for the basic scheme .", "checks whether the specified character is a legal ( dos / windows - ) file name character .", "override this method to change the default splash screen size or position .", "create a jlabel to place next to various components .", "returns the depth of this name within the namespace hierarchy", "convenience method to get parameters in case multipart / form - data request was used .", "readfrom read the headers and data for a message .", "clears the header view cache .", "calculate the number of data bytes for the given id .", "removes all tracking icons .", "creates a new action object .", "creates the property editing ui components of this page", "deliver the message", "coerces a value to string .", "connect to the hc and retrieve the current model updates .", "return true if the project already contains the given class", "get an unmodifiable list of all of the message items in the value state on this stream and , optionally , in the uncommitted state", "writes a string to a file creating the file if it does not exist .", "map of restriction contains key array index value list of available values .", "returns true if a length has been set", "adds a text string as a new column in the current line of output taking care of escaping as necessary .", "convert a primitive type array ( any dimension ) to wrapper type array .", "returns the resolved block that contains the specified tile coordinate or null if no block is resolved for that coordinate .", "copies contents of the buffer to new packet", "call release method on a plugin class warning on errors .", "marshall the given parameter object .", "create this calendar in a popup menu and synchronize the text field on change .", "removes the given elements from this list viewer .", "return target file ' s content by list from class and resource ' s path .", "called following deserialization to load the observable list .", "gets the virtual resources in the log folder .", "throw illegalstateexception if key is not present in map .", "commits the temporary state to the path variable manager in response to user confirmation", "this method allows the setting of flags via a properties instance", "this is a both way strip", "creates a new limited input field .", "returns the guacamoletunnel having the given uuid , wrapped within a", "initialize an entity bean .", "creates a widget based in its metadata information .", "filter a start document event .", "import a class name .", "deletes the component at the specified index .", "parses a long value from a string valued setting .", "recursive method that will find the currently selected element in the tree .", "inserts the specified element at the end of this deque waiting if necessary for space to become available .", "get the contents id object", "open a database connection .", "create a set of importmetadata of a compilation unit .", "returns the sample rate being used by this instrument", "clears current context store .", "returns an enumeration describing the available options .", "return the selected item", "perform a java unescape operation on a string input , writing results to a writer .", "initialize an api - trace file system", "initialize the main velocity wrapper container", "writes the specified byte to this buffered output stream .", "try removing unneeded block nodes and their useless children", "reloads the treemodel and expands the nodes according to the public variables expandcontacts and expandallnodes", "creates an xa transaction resource", "returns true if this value store contains the locally scoped value stores", "returns true iff this expression can be used as a statement jls 14 8", "creates an empty row", "redefines the given type where any intercepted method that is declared by the redefined type is fully replaced by the new implementation .", "returns a new awt image rotated with the given angle ( in degrees )", "get a license by name", "there must be an easier way .", "remove all products from this shopping cart", "computes the value of the jacobi symbol ( a | b ) .", "create a media table with the minimum required columns followed by the additional columns", "add a solrinputdocument to this request", "write string to stream", "returns true if the method returns proxytrustiterator , has no declared exceptions , and is a non - static member of the base class .", "returns the data found in the frame specified by the id .", "returns true if the symbol for the given tree is final or effectively final .", "a convenience method to stop and destroy the daemon in one shot .", "reads a policy configuration into the policy object using a reader object .", "is this object contained in the sl ?", "override this method for each subclass so that the factory can build instances based on the template", "sets the minimum number of columns", "performs type checking and validates internal consistency of a query using the default resolver", "create a new instance of a state with with a default inital value", "write a circle with a certain radius at a lat / lon location .", "removes all parameters from the targeturi .", "creates bin with initial set of nodes headed by b .", "fills in the xmlattributes object .", "pop a value off of the java operand stack .", "test retrieving passwords from file .", "writes an int to the output stream", "removes the specified variable from my resource", "get the root picocontainer and initialize it if it was not already", "specifies whether the debugger is able to break when a module is unloaded .", "accumulate the number of times the quad crosses the shadow extending to the right of the rectangle .", "convenience macro for translations", "removes the given full text search criteria from the search object .", "map a single resultset row to a t instance .", "convert this specification into xml format", "creates a new memory map object .", "check email if already exist if is exist return true else return false", "returns the root element", "make a delete api call .", "remove a header from the adapter", "sends a message to accessible clients that the text caret has moved within a custom control", "returns an enumeration of all listener names", "return a path for a rectangle with square corners and no right side", "add a new node to the node list", "selects the preview message panel", "try to get a more specific class instead of using the map interface", "writes an integer to the output stream , byte - swapping as necessary", "do not instantiate this class .", "kill all loads of given field .", "write data in the arff file", "int convert to buff ( big - endian )", "sets the foreground color of the local text area", "returns the schema of the query .", "returns true if a vary header contains an asterisk .", "calculates the derived statistics ( significance etc ) .", "searches for the api view container that wraps a given internal view container .", "returns true if this element is documented", "this method checks to see if the input enables the page compete status", "marshall the given parameter object .", "can not be edited", "flush underlying stream to writer .", "indicates whether some other object is equal to this one", "receives a byte of data .", "redirects to a controller , generates appropriate redirect path .", "applies the default parameter to the currently loaded config", "create a documentpermissionfetcher to execute fetch .", "returns whether the specified container is the focus cycle root of this", "performs an element by element sum of two matrices of equal size and stores the result in dest matrix", "the code that does the real work of lookup .", "return a hexadecimal representation of a byte array", "function import implementation for updating salesorderheader", "gets the value of the isexpanded property", "check if given class is of jdk type .", "return whether or not this lockset is the same as the one given .", "for an inlinequery , results from rae dictionariy are fetch and returned", "changes to the next state .", "writes a int value to a byte array at a given offset .", "list all differences between the two bit vectors .", "returns the last layer , where both this item and p _ other have a shape .", "binds items to the layout .", "used for proxy locator do not call directly", "method to check if the monomernotation contains a modification", "it is possible for the qr algorithm to get stuck in a loop because of symmetries .", "determine if a url uses the standard port .", "write a collection of xmlwriteable objects .", "sorts the list results .", "creates a new header viewholder .", "returns the transfer function of the unit in the text form the equation does not contain redundant terms", "normalizes and print the given character", "transforms a binary map encoded in a long type eg .", "format the underlying value into something the user might understand", "initializes the models", "like join but allows for a distinct final delimiter .", "sets the topic defining the type of this occurrence", "bind to a scuflmodel", "add the created action message for the key ' success . upload _ elevate _ word ' with parameters .", "resets the rootcontext in hashmap to false indicating alarm has been cleared on the topic", "append several int values onto the vector .", "return the applicationname .", "return the ( most specific ) base type of t that starts with the given symbol .", "visits a line number declaration .", "removes a listener object from the panel .", "writedata output the completed modbus message to dout", "return set of flags indicating possible relationships between this interval and another interval .", "converts an asn . 1 ecdsa value to a xml signature ecdsa value .", "returns the current serial queue size .", "verifies that no two process definitions share the same key , to prevent database unique index violation .", "returns string representation of scope", "return the destination name which this aoh is associated with .", "login to server and get token", "refresh the maxcap and mincap values when a new capacity is set", "get the list of all resources found in whitelisted packages that have the given path , relative to the package root of the classpath element .", "block teleporting from a rectangular area .", "return an existing widgetcache for the key", "initializes the locales .", "append the given string to the given string array , returning a new array consisting of the input array contents plus the given string .", "expect a server proxy failure with the given message info .", "creates the file parameter named by fileparametername that depends on whether or not the port returned by the given portprovider is connected .", "clears the session cookie so as to sign user out .", "searches for the index of the value that is equal to or just less than the search x value , in the range of startsearchindex to the end of the data array .", "base encode the given data and return a newly allocated string with the result .", "returns an iterator over the entries in the space which match the specified template .", "stage seven saving of proto - network .", "query this channel for chain information .", "reads the array .", "returns the bundle post processor name separated by a comma character", "convert an fxg string value to a boolean .", "updates the complexness of the expression based on a string value", "perform updates if added documents already exist ?", "remove current run", "sets the mode of the gui to distance mode", "generates a new key hash that is immediately after the given one .", "match params to available args , highlight current param ( s )", "unregister the endpoint for given service .", "retrieves sales invoice from db .", "adds a sub - program consisting of the fixed point closure of the given rule .", "add new config business method", "print the statistics as a csv line .", "return the max of the given value for all matches .", "indicates whether this package is sealed with respect to the specified url .", "allocate bytes in the segment , or return - 1 if not enough space", "removes a relation from the current relation set .", "creates a new follower info object .", "writes the specified character sequence .", "the app ' s data sources .", "get instruments best bid price", "processes the given instance ( may change the provided instance ) and returns the modified version .", "activates a status attribute for the client without overriding a potential existing value", "this will launch the android market looking for superuser", "this class cannot be instantiated .", "flush the internal buffer to the encapsulated output stream .", "adds an action listener that fires an event when an entry in the auto - complete list is selected .", "unsubscribe to topic", "defines and resolves a class from its byte code representation", "solves a single class closed model using mva algorithm", "return the indexes of the ones of this bit - chromosome as stream .", "process entity request .", "make the priority queue logically empty .", "destroy the test applet close navigator window and delete the reference to the test applets window", "creates a new node click handler object .", "call to indicate that the syncadapter is making progress", "trims a string list , remove all empty delimiter at start and the end", "remove a buddy from your buddylist", "wraps a gsbytearrayoutputstream inner buffer with a bytebuffer", "if this is a jar : file location as per spring boot loader runnable war then trim to get the containing war file .", "retrieve the persistent form of this content type", "compares the specified format with this h261format", "adds all children of the specified node to this one .", "handles changes to date range .", "store the all of the operation engine objects in the default place , including making a backup if needed", "release a resource back to the pool after its use is completed .", "parsing braced cast content .", "tostring leveldatatostring and walkgraph methods", "creates the xmlparser with the given class as root and schema file for validation .", "paints the border of a tool bar .", "this method is used to encode the provided buffer of bytes in a http 1 1 compliant format and sent it to the client", "sort the table", "removes an ontology", "start the discovery service", "returns the fraction of intersection along this line", "any cached data used by the osgi framework and eclipse runtime will be wiped clean .", "read all the files in teh directory , return them as an array of strings .", "same as add but without updating the cardinality counter , strictly for internal use .", "remove a field herited from superclass interface that is referenced on this class", "this method is invoked when the beginning of the matched xml element is encountered in this case property", "returns a specific vnfrecorddependency from a particular networkservicerecord .", "constructs a new iterator builder using the given gigaspace .", "change the connection request timeout in milliseconds to be used for requesting new http connections from the connection manager .", "marshall the given parameter object .", "returns an observable sequence of strings ( not lines ) from the given host and port .", "write a 32 bit unsigned value to the out stream", "b - elem : : = wsp / chord - or - text / gracing / grace - notes / slur - begin / slur - end", "set a url as a image that preparing to load", "add a pending eventtask for this event registration .", "the list of partitions on the hsm .", "get the value entered as a health modification in this panel", "set the name and description of the context in this form", "set logging level for the specified devices", "end class executionthread . . .", "return the value of the header with the given name", "constructs an instance with the value present .", "picked lessons which shall be chosen by default", "moves the text cursor", "construct an eventdescriptor with a class and an event id .", "method for mapping functionality", "test that node manager survives through all allowed transitions .", "compute the scores for each primitive distance function on each field .", "the method to output string containing information about passed property using writer .", "indicates whether the cloudtrail log has more events to read .", "constructs a stunmessageevent according to the specified message .", "checks if for create table \" test \" ( id int ) , gettables returns test as the table name .", "returns the name of the file object represented by the node", "paints the transcoded svg image on the specified graphics context .", "this method overridden to call system exit when all of the", "creates the class dependency .", "returns class ' s own fields ( excluding inherited ) .", "get primary key", "fire the modify listeners", "annotate morphological information into a naf document .", "splits out the query string , and normalizes the uri , assuming nothing needs unescaping .", "shuffles this vector .", "return a collector that creates a linkedhashmap dictionary using the given key function .", "create a data input stream for this file", "restores the text .", "attempts to publish an event to the ring buffer .", "clean the canvas , remove everything drawn on the canvas .", "creates a new vertex in the graph with the given vertex id .", "build the list of classes that correspond to the list of argument objects .", "creates a new rdfxmlwriter that will write to the supplied outputstream .", "get the terminate vm component of this iq packet", "make this dialog visible allowing the editing of the list", "returns true if a is nearly equal to b .", "check if the terminal size in rows and columns should be updated .", "notify listeners about changes to some state", "converts an internal tag tree into an api tag tree .", "called by a reader selector when it detects that a channel has pending data for read .", "add the increment the argument should be a relatively short string , i . e . no more than what tlc prints out in a single instant .", "bootstraps moskito php plugin", "returns the entry point of the method being invoked", "invoked by some external source to indicate that some items in the versions tree were updated", "no op implementation", "sets the servlet container specific setting .", "auxiliary method for rollback .", "set the filename for the dataset header file", "modifies the variable label", "set the magnification value", "converts a long value to a binary string", "creates a new graph whose vertices correspond to the partitions of the supplied graph .", "nulls all to let the gc do its job", "in this function implementing classes can extend the context menu of code nodes where incoming registers are shown .", "delgates calls to the connection sqlexceptions thrown from the connection will cause an event to be fired on the connection pool listeners", "generates a schedule based on some meta data .", "changes the x value from the target view s current value to the end value", "transfers the classpath elements to the staging location .", "broadcasts a change update to the current uncorrected frequency or the bandwidth sample rate value .", "get the single instance of the bottom type .", "utility functions that returns the iterator entries as a list", "merge list of arguments .", "write a function into the given writer", "return a consistent clone of this position .", "enable a specific apn type .", "sets externalreference choice element as the chosen one", "returns a common name component", "install this reference . txt into an sdf", "prevents further mutations and waits for all outstanding mutations to complete .", "reads the atom type mappings from the data file .", "delete tag from file", "use this api to fetch all the responderparam resources that are configured on netscaler .", "might be overridden in special cases .", "get the last modified header from the response", "starts the order processor .", "finds the associate end _ if for an if , else _ if or else pointer", "invoked after a local function node comment has been edited .", "processes two bits before checking sync processors for a match .", "unregisters all the metrics registered via this beanmetricmanager instance .", "left divide for gallic weights ( right divide is not implemented yet )", "create a replay url for the given capturesearchresult", "compare two objects for equality .", "add datasources already in existance before we called addlistener", "returns the remaining statements .", "increments exponents within ' vec ' by ' degree ' ( helper procedure ) .", "generates an utterance for announcing screen on and screen off .", "construct a textoutputcallback with a message type and message to be displayed .", "setting the default module of this application", "create a cronschedulebuilder with the given cron expression .", "creates a new user object under management of this object .", "returns the upload service instance .", "returns true if almost one class is configured , false otherwise .", "this method removes all objects which are no heads from this container", "load data from specifired url", "split signatures of all levels from a type unique key .", "adds an object that is notified about changes in the thread .", "given a dummycoded column id , find the corresponding original column id .", "creates new file in this folder .", "get record at passed offset .", "creates a new wrapper object .", "reset the species", "sends a vendor request with the new bias values", "tests if element attributes are constant + expr type .", "when read business logic should convert schema less key value into business object based on its own schema", "set the script source position", "query vsan object uuids by filtering conditions .", "apply the properties from this configuration to another instance .", "helper method to fetch flow priority from flow props", "this method returns a state that is randomly chosen from the set of states .", "creates a new jraklibclient and connects right away .", "initializes all stream check lists and begins the checks .", "reads an extension from file and returns it .", "forwards the mouse double clicked event to the drag tracker if one exists", "same as popandencode ( ) , except encodes in a form that can be executed as js .", "constructs a submit element with the specified parameter name and the specified button text with the specified extra text .", "determines if a character is a letter or digit .", "append data to matrix rowwise", "this method starts up the editor", "remove a log administrator .", "the description element for this tld .", "determines if this document has a cc license", "transform an object in to another object", "collects some information on the specified element", "return candidates method ( same name ) sort by number of arguments", "adds a constraint .", "gets the current image rotation in radians .", "datacite contributors are created from the combined set of eml contact , metadataprovider and associatedparty agents .", "helper method to generate a tinymce - specific toolbar configuration string from a list of generic toolbar button names .", "determine the position of a button .", "set the value related to the column scp url", "convert the select into a nestedkeyvaluemapselector .", "convert the color array to call real put pixel", "returns the first ancestor folder matching the filter criteria .", "allows arrays to behave similar to collections .", "copies the contents of this set to the target set .", "method to assign and initialise our continuous calculator class", "reset zoom and translation to initial state .", "this saves the text currently in the text editor to the file", "read a number of apps with download information from the xml parser", "bind the specified stream to the current thread .", "creates or updates an integration account .", "returns the time ( gmt ) of sunrise or sunset on the local date to which this calendar is currently set .", "creates a new dom element in the given name - space .", "sets the newinfo attribute of the clientinfo object", "checks that servicelocator is set", "prints the thread dump information to system . out .", "display the values in a set", "creates , initializes and orders the list of candidate pairs that would be used for the connectivity checks for all components in this stream .", "fills the grid based on positioning the new selection relative to the old selection .", "load the fields specified in the provided fields bitset .", "accept ( click ' ok ' on ) whatever popup is present on the page", "the child corresponding to the given character .", "writes the put to the journal .", "add all child comments .", "returns the project state icon path for the given resource .", "destruction of the servlet .", "sets the timeout used when connecting to the server .", "decompile the source information associated with this js function / script back into a string .", "get object value by path .", "override this if you want to have all servers at once for processing the request ( like need for merging info as for a list command ) .", "lazy initializes variable items", "error detection and correction of single bit errors for ccitt bit crc protected bit messages .", "calculates the minimum and maximum dimensions for this layout given the components in the specified target container", "return true if arg class name is a class from a jar file located in the libs directory of the application .", "unregisters a connection from the call .", "enable sharing of the class - loader with 3rd party .", "returns a sequence of events where some items are more popular than others , according to a zipfian distribution .", "tries to send all given messages to all given connections .", "reads exactly ' bytecount ' bytes from ' in ' ( into ' dst ' at offset ' offset ' ) , and throws", "checks boolean value .", "puts the annotations of this annotation writer list into the given byte vector .", "adds a new row .", "constructs a new privileged task wrapping the actual task to execute .", "check if word contains an email address", "get the value of focallength", "checks to see if the provided class is a control or property set interface that is compatible with the local propertymap .", "places a backslash character in front of single quotes", "receive data as local peer", "add the given entity to the controller for write processing", "a method to write the output formated data to the file", "converts the supplied value to a string .", "check if user removed himself", "convenience function to get the instance from the int status value .", "compiles the given expression tree to a sequence of bytecode in the current method visitor .", "overridden to ensure that the cursor for this component is appropriate for the orientation .", "imports a font .", "add a new succeeding cell to this cell , based on a new valid address value that can follow this cell ' s value , into the address tree .", "the new position corresponding to old position oldpos after the insertion ins .", "execute a sparql ask and parse the boolean result .", "check for delete far move conflikts", "returns true if the response is not valid", "run a task on all available cpus .", "get the current efapsclassloader .", "adds new endpoint to the queue", "create an improper formatting instance with a custom number format for the numerator and a custom number format for the denominator .", "relinquishes exclusive write access to the guacamole instruction stream .", "returns the string right - padded with the string pad to a length of len characters .", "invoked when a iq packet is received", "updates the window when something relevant like a new tab was selected happens .", "normalize a whole tree this method assumes that the argument that it is passed is the root of a complete tree", "visits an annotation of the class .", "set link to freebase .", "0 program is running or service is ok 1 program is dead and / var / run pid file exists 2 program is dead and / var / lock lock file exists 3 program is not running 4 program or service status is unknown 5 - 99 reserved for future lsb use 100 - 149 reserved for distribution use 150 - 199 reserved for application use 200 - 254 reserved", "helper to add an item with specified caption and optional parent", "create a new triggerwrapper from a repo map object .", "returns the current value from the table", "returns the number of < a , b , c > triples in this ternary relation .", "assemble four nybbles into a 16 bit word", "obtain a new instance of a websocketcontainer .", "removes an orderchangelistener", "returns the minimum value of all samples .", "adopt this affix on a given word", "liefert die aktuelle differenz zwischen netz - zeit und lokaler zeit in mikrosekunden .", "parse an xml configuration from a document", "print ascii art .", "returns the stream implementation for a read stream .", "densely numbers all the instructions currently in this ir from 0 . . . numinstr - 1 .", "quantiles ( = inverse cumulative density function )", "creates the default stroke .", "encodes a string to be a valid path parameter url , which means it can contain pchar * only ( do not put the leading \" ; \" or it will be escaped .", "creates a new matched values request control with the provided criticality and list of filters .", "das interface repository wird geoeffnet", "return an array of the sums for each column in the d input", "returns a string representation of the byte array as an unsigned array of bytes", "print the ui that allows us to change the number of tasks assigned per heartbeat .", "primary sort by leaseexpiration secondary by eventid .", "method to generate a json - object from the given helm2notation", "initialize a byte - string two - way translator , setting byte values according to the position of strings in the array .", "returns a hash code for this instance", "ensure the buffer is large enough .", "creates and initializes a new request object for the specified resource .", "creates a union wrapping a value of the first type", "gets the path with the variables replaced by their actual value", "adds a package to be mapped when registry is compiled", "get a service by its service name", "method propogateunnamedattributes", "the tree dependent up move term at time steptime", "initialize with a fixed reference date", "log developer errors for e g when a developer misunderstood the concept of a called method mechanism", "fill a rounded shadow .", "accessor method used to retrieve an integer object representing the contents of an individual field .", "method to generate for a molecule the rgroupmap : map of unused rgroups", "returns the contents of a file into a string object .", "push an integer onto the stack .", "marshall the given parameter object .", "return true if this watchable is ready to be executed", "read characters from an input character stream .", "does secondary initialization , if necessary .", "deletes a type from the collection of known types .", "displays that an action is currently running .", "add completions for command pflanze", "writes a pbs entry packet to the stream", "places a scheduleitem earlier in the schedule", "returns the expected html output for this unit test", "lists information about clusters in an instance .", "the doget method of the servlet .", "outputs double to a file", "gets the platform id for this cmap .", "indicate that a listener is no longer interested in receiving discoveryevent notifications .", "returns the string representation of this object .", "remove a field .", "this method is used to retrieve an instancied object with its name", "appending the using sub - clause which follow the join clause .", "inform the consumers", "adds the whole collection of states", "this operation returns the list of domain - specific models that are supported by the computer vision api .", "generates a unique signature for this type that can be used as a key .", "the messageevent of sangamplugin does the following", "wait for all the files to be sent to host system .", "helper method for reducing repeated code .", "can only be created by subclasses", "record a duration to the dynamic timer indicated by the provided config / reportunit .", "generate a new check box with the provided date and check state .", "copy the jvm constructors from the source to the destination .", "a helper method to return the string representation of a map with bracket boundaries and .", "checks if node is an equal comparator", "returns the nested object definition with the specified name .", "stores a unique token in the session to prevent repeated submission of the same form .", "logs a system user in to opencms .", "decrypt base64 encoded text using private key", "marshall the given parameter object .", "assigns the webapp with the given id to one of the available webappactivities .", "developers may register their own listeners to be made available for use in jamon", "given a full path and a base path return a new path containing the full path with the base path removed from the beginning .", "indicates if the zoom buttons are visible .", "creates a completablefuture that will do nothing and complete after a specified delay , without using a thread during the delay .", "writes a handle representing a cyclic reference ( object previously dumped ) .", "constructs a userlist object from rawjson string .", "convert the field ' s value to a index ( for popup ) ( usually overidden ) .", "split to east", "removes given context", "sets the desktop size to normal", "move to first fasta record", "dialog for configuring options", "calculates a weighting value for wildcard character quantity and significant digit location", "removes all items from this stream .", "finishes the class definition .", "update all the other settings based on these .", "constructs an instance with a detail message .", "no properties so this is just a unique static number", "creates a new action object .", "gets authentication data storage", "constructs a new entry", "performs the given action for each remaining element until all elements have been processed or the action throws an exception .", "will return null unless it has enough data to decode .", "if your implementation subclasses the objects youll want to overload the constructbyclasscode implementation to return your implementations instances instead of the base implementation", "an internationalized wrapper call to log4js debug method", "discretizes using a maximum entropy partitioning", "update the persistent instance with the identifier of the given detached instance", "is overridden in classes which synchronize successful replies .", "you are not supposed to instantiate this class .", "compares this object with the specified object for order", "generates the instructions to box the top stack value .", "returns the value of horses", "gets details about a channel .", "test positive and negative xoronly . equals returns", "remove specified file or directory .", "processes the prepare response from the server .", "creates a sqlquery using the specified type , expression and parameters .", "returns the successor of the specified rbtreenode or null if no such", "factory method creating a constant .", "thread - safe call to reset the disk stats .", "this is smelly but we need it .", "show a named card will do nothing if card does not exist", "removes all graphics from the overlay .", "put variable or constant to variable list", "make the request to the twilio api to perform the read .", "checks if current accessor readable", "get the mixin parameters as map if the given param values match to this rule .", "gets the link contained by this association class", "disable all activity .", "returns true if the membernode is a methodnode .", "create action bounded with jtextpane to decrease font size", "get the current time in seconds", "sets whether the library is set to log information", "makes sure that listeners are added at the right debuggers .", "write a number using the number of bits necessary to hold the number .", "returns the value of the specified attribute in the current item as a", "create a textual representation of a string literal that evaluates to the given value .", "returns the name of the affected table .", "stops running a task attempt on the task tracker .", "make this set contain the same elements as the other set", "remove an existing filetypehandler for a given list of extensions", "function to serialize the given vector clock into a string .", "the method ends the work performed on behalf of a transaction branch .", "the all operator is similar to $ in , but instead of matching any value in the specified array all values in the array must be matched .", "checks whether these versions of stendhal are compatible .", "get method description", "this method only overrides properties that are specific from cube like await strategy or before stop events .", "tests whether a page with the given pageid exists .", "set the specified environment variable to the specified value", "method to change the monomernotation on the specific position", "returns a formatted url string , prefixing it with a default scheme component if its not an absolute url .", "creates a new dom document that contains the sorted xml .", "convert a list of weather forcast to a list of strings to be sent", "adds the name to the collection", "return the values of some item for any body in the kernel pool", "adds a plug in to the data store", "mark the occurrence of a given number of events .", "resize the priority queue", "standalone routine to compute the average information theoretic measure for a single agent in a multivariate time series .", "loads the library if possible .", "creates one or more complex , flipping buffers with the given capabilities .", "creates a vpnsite resource if it doesn ' t exist else updates the existing vpnsite .", "check whether a pendingintent is register in alarmmanager .", "do a query without limit or offset .", "check if row based triggers or constraints are defined .", "adds a mime - type to the compressed list .", "construct a builder based upon the \" auth \" field of the docker client config file .", "app started in va may be removed in overview screen , then ams . removetask will be invoked , all data struct about the task in ams are released , while the client ' s process is still alive .", "removes and returns the first element or null if the queue is empty", "creates a new action that can be used to delete event lists .", "method to construct the ips uri", "called when a valid record is read from the table / query .", "checks repeated long field equality ; null - value and 0 - length fields are considered equal .", "this is invoked to process paint requests .", "attempts to release any cooperative lock condition this object may hold upon its lock file .", "this method returns the selected type based on the radio buttons", "creates an empty soda query data object", "gets the list .", "set the value related to the column goods desc", "this method rolls over to the next files .", "evaluates the animation with the given index at the specified time .", "return the tests included in this test suite .", "creates a copy of a graph and opens it .", "insert output element used by function objects", "closing the manager .", "creates a new sqfcommandexpression that is a private [ ] syntax with new vars appended and returns it", "tell whether this stream supports the mark ( ) operation .", "if handlemove returns true this is called whenever the cell view is moved", "contents move down to bottom", "edits a comment associated with a group node .", "alter this object properties", "remove this public ssh key", "synchronously delete a change .", "select the current format from the table", "returns a value for a given key .", "make a copy", "insert a new element at the specified position", "replaces swingutilities # isleftmousebutton ( ) for consistency with other button - related methods", "set the endpoint address for the specified port name", "enables or disables a theme that is part of the mapview", "returns a new measurement set that contains the measurements in this set plus the given additional measurement", "maps a class name to another name in this hashtable", "write a range of bytes from a kim with huffman encoding .", "adds a job to be executed after the chart - view is setup ( after onsizechanged ( . . . ) is called ) .", "sets headers that will be added to all requests this client makes before sending .", "this method sanity checks the following cases : a .", "tests this renderer for equality with an arbitrary object .", "remove members from a group .", "this method will set the properties of both this ui controller and the properties of the selector widget", "getcurrentemailmessage", "gets the stored access token associated with the linked account .", "combine the passed predicates into a single and node .", "creates a new action object .", "checks whether the holiday is within the valid date range .", "get the location the operationalstring was loaded from", "gets the start code for a segment .", "sends an osc n trace message to the server", "provides a chance to this peer to do initialization after the remote object it serves is unexported .", "manually stops the auto fail thread .", "cancels all requests in this queue for which the given filter applies .", "return the tests included in this test suite .", "applies the configured operator to each list candidate , operating on the elements that make up a candidate rather than on the list of candidates .", "shuffles the test list .", "use this function to determine if a weather condition has a phenomena of fog", "get short from raw text format .", "adds child views for the current node", "performs validation of the observer method for compliance with the specifications .", "adds ' normal ' sites .", "formats a number as a currency value according to the specified locale .", "paints the image on the window .", "indicates if block of the message has passed the crc check .", "creates a kinesis data firehose delivery stream .", "smart updates a components attribute", "get the hash code", "start the transaction .", "post the statusplugs to the plugs by local", "get a copy of the break iterator for the specified type according to the settings .", "check for equality that can be applied to each kind of node to not repeat it in every method we store that here .", "go to the specified page", "tests if string value is numeric", "this method overrides the default one which is suited for java", "see if an object is taken", "get the length in bytes of this instruction including the opcode and all its operands", "copies all of the mappings from the specified map to the cache .", "setter method for phone", "add a tab which shows the component on select", "convenience function register osk to ui recursively", "\" from \" index is excluded .", "append argument lines", "imports a new version into a luis application .", "computes the serialized length of the data .", "a raw style query where you can pass any where clause and arguments .", "the doget method of the servlet .", "multiply the terrain by a particular factor", "checks that this field node is compatible with the given asm api version .", "clicks the specified coordinates .", "removes selected items from history .", "disconnect from the remote ssh server", "set new game mode .", "attempts to add a one - phase xa resource to this unit of work .", "constructs an indentation string .", "remember a namedbean object created outside the manager .", "performs a stored procedure call with the given parameters .", "builds a vertexelement from an already existing vertex .", "checks whether the sequence at colname seqname is cancelled", "print rpus and incoming rpus for all rows of all gates .", "create empty uninitialized dataflow facts for one program point .", "constructs a new field or method handle .", "determines whether or not we should continue making additional http requests in the current produce ( ) call or whether to return the current batch .", "gets the difference between the \" normal \" leading and the maximum size ( for instance when there are images in the chunk ) .", "creates a source viewer with given parent toolkit and flags adopted to a form", "breadth - first search implementation on your graph .", "read the debugger event settings from the database storage .", "add an element", "remove a range of mappings as a batch .", "saves the module description to the database .", "binds the given bootstrap to the appropriate interfaces .", "draws a virtual page containing the marketing message", "find the hosting window", "set the variable inlining policy for the compiler .", "transform object list to hash set .", "creates an idquery using the specified type id and query result type .", "clears an element and then types .", "the type of the priority queue .", "tries to install defined version of opencv from google play market .", "returns the current lexical state .", "called via prerenderview or viewaction", "returns the given integer value as an unsigned short throwing an illegalargumentexception if the value is negative or too large .", "we have a segment , in nfd .", "the list of snapshotcopygrant objects .", "creates a chatnote that will be mapped to the given chat session .", "process a new request message , updating internal stats and calling the discrimination to pass it along the channel chain .", "initializes the console and shows the view", "log a message object at level fine .", "search in methods of a class for complex types", "handles find by range query for given start and end row key range values .", "creates an attachment from the specified inputstream and a new document with a generated document id .", "access the initial domain value based on p used to bracket a cdf root", "notifies all listeners that have registered interest in", "take html as string and show it in clients browser", "probability density function of the wald distribution .", "load stuff from the given json in the context of the given channel restriction .", "adds a field reference to the constant pool of the class being build .", "build a valid instance of bigdecimal from the given sourceobject", "removes ids from grids and resolve possible conflicted names", "sets word in memory at es di in the extra memory segment", "creates a description for a successfully found element .", "determines whether a given operand is a register .", "returns the actual uri as string", "provides a way for the description and technology to be modified on an existing relationship .", "tries to convert the given mathpiper string to geogebra syntax", "get the logo panel", "add an adjustment to the order item ; don ' t worry about setting the orderid , orderitemseqid or orderadjustmentid ; they will be set when the order is created", "mark this future as initialized .", "throws a webdav exception", "removes all members from the specified group", "proceed to the next available ring color .", "unsigned comparison abovethan for two numbers .", "checks if a block is part of a treasure chest .", "paints the matte border .", "initialise our connection to the underlying resource", "splits a string into sentences using the breakiterator with us locale", "filters according to type .", "why", "returns a new version three uuid given a name and the namespace ' s uuid .", "validates a string and returns an instance of a type associated with the value", "removes all the items and its values from the section", "implements the getat int method for primitive type arrays .", "set the connect mode", "handle the nio registration .", "add an anchor", "shows the selection", "return the previously computed structural feature of the input object", "describe outastringtypecolumntype method here", "called if the move motion event is intercepted by this layout .", "writes some int standard operations for compares", "constructs a localtime from the specified millis of day using the specified chronology .", "converts a byte array to a binary string", "dump the current row of a result set", "computes the angular distance of the linear path between this location and a specified location .", "increase selector pool size", "sets the context , which should be used by the builder .", "executes a mouse moved event on the mouse state .", "convert a string to one in which any non printable bytes are replaced by where is the value of the byte", "creates a new jdk14logger object .", "generates a certificate object and initializes it with the data read from the input stream instream .", "generate java code for records .", "put the metrics from a client with a hostname and a client id .", "returns a flag that indicates whether reverse search result iteration passed the first search result .", "fills the shape using the passed attributes .", "create additional configuration for host", "handles a group channel deletion .", "adds the given header to the request that will be sent", "compares the address to another object .", "istextfieldvalid , this returns true if , and only if , the text field contains a parsable date or a valid empty string .", "islayoutvalid", "parses the default clause for a column and sets appropriate properties on the column node .", "load the stopwords from the given reader .", "requests file system information for a remote directory from the debug client .", "report a bad array index in a manipulator .", "tries to calculate bounding wedge containing tangent vectors for this curve", "returns the detail message including the message from the nested exception if there is one", "build the process tree from the list of top samples", "try to assamble paths into a string without duplicated / character problem by default , every beginner path should startwith /", "creates new instance with given string encoding", "returns a new bit set containing all the bits in the given long array .", "returns true if all specified attributes are either null or literal .", "extracts the resource id from the entity .", "query for apns using mcc and mnc codes found on the sim card or in the network settings .", "look for a common table by name , possibly in parent scopes .", "converts an xml document to a string .", "list field should always assigned new list with one elment l", "this service cannot be bound .", "start a new step as child of specified parent .", "send a packet and wait for ack", "initializes the servlet", "this function initializes the fax bridge .", "print details about the drivers configurations", "plays the blast sequence of fireball when it collides with something", "initializes the preference , which allows to display the applications , which are suited for handling an intent .", "makes this object immutable .", "strip quotes from argument string .", "returns internal representation for key .", "if the httprequest is valid and handled it will be sent upstream , if it cannot be invoked the response will be written back immediately .", "make the request to the twilio api to perform the read .", "read a jsonarray .", "creates a list of shaperecord to draw a line from the given origin ( startx , starty ) to the specified coordinates ( in pixels ) .", "do not instantiate this class .", "unmarshall list image style response body to style list .", "this is used to extract the nodes of the document in such a way that it can be navigated as a queue .", "this one is not fully compliant .", "run the processing queue now .", "this supports the package command : the minify operation needs to launch the server far enough for it to read config and figure out all of the features that would be loaded .", "migrate an extensionmapping to use a newer version of that extension : 1 .", "fire a change event to listeners .", "throw the remoteexception the server wants thrown", "makes sure the data langth is", "get the formatted review .", "configures a list cell renderer and sets up sizing and the backing image from it", "returns the index of the next value in the data structure or a negative value if the iterator is exhausted .", "gets a field array from the values hashmap", "pick an item by key then remove it from the bag", "modifies the predicate to be the conjunction of itself and the specified term .", "returns the resources that collide with already existing resources .", "return the minimum element in a range using comparison functor .", "waits until a timeout is reached or a token shows up in the history of a site as finished or failed .", "zoom out a network", "the occurred exception with the related log level and message has to be given to this method .", "append given basicblock id to the path .", "this just records the information", "transforms a cidr formatted mask into a regular network mask", "extract extension with the provided id from the provided extension .", "write the text to the std in of the process", "consume a single record from the connector .", "log a message , specifying source class and method , with no arguments .", "updates the components in each factory method when the preferences are changed", "gets the transaction value for this wswritetargetparams", "convert dp to pixel", "update the message digest with a block of bytes .", "given an arbitrary point , get the point with the inverse given transform .", "checks if the queue is full", "constructs a new retry policy .", "delete a node from the heap .", "returns the quantity of the product at the specified index", "internal function to call smi - s to run copy - to - target for cg snapshot", "populate software module metadata .", "updates the local copy of the global highscore list", "reads bytes from the underlying stream .", "is the response code a created ?", "create a response with unknown length using http . chunking .", "normalizes the path part of this uri .", "calculates average of path values of matching entries .", "a method that casts the message and calls the method that uses generics .", "tries to read an object from the messages buffer and prints it", "provides the next graph event ( synchronous ) or null if no more event .", "rational middle point", "adds an attribute as key value pair to this information item", "run with schedule with fixed delay scheduled future .", "rehashes the map to the new capacity .", "builds the html for the select box of the navigation position .", "log entitlement log record .", "closes this cache .", "returns the number of values in the list .", "moves the cursor to the end of the query result , just after the last binding set .", "set the original artist of this mp3 ( id3v2 only ) .", "chomp some foodie goodness !", "creates as many classloaders as requested by the input parameter .", "unescapes html character inside a string", "remove stored object from session", "register webdriver instance that should be terminated at the end of the suite", "decrypt a buffer of data", "returns a child with a specified name", "gets a singleton instance of the empty iterator .", "replies if the specified mime type corresponds to an image .", "creates a new instance of jpasswordqualityfield with no minimum quality .", "converts doc to string", "the types of events that amazon pinpoint sends to the specified event destinations .", "removes a logfile from the list .", "judge the word type is normal word", "called when a drawer has settled in a completely open state .", "read a utf - 8 format string from hdfs ( or local )", "extracts the response body from a method in jsonschema format and embeds it into a response object based on the defaultmediatype", "delete a rule record as well as ruleaction , ruleactionparameter and rulefilters records associated with it .", "utility method for converting a search path string to an array of directory and jar file urls .", "get the int value associated with a key", "method to instantiate a filtered event from header data of the first event in the sequence plus the end seqno and fragno of the last event .", "returns dtd inputsource .", "raise an io exception for asyncrhonous retransmission of responses", "copy stream with progress listener", "actions before every test case common", "returns the cumulative probability of the chi - squared distribution", "checks whether the character is quote delimiter .", "returns the first index of elt in the array if len else .", "create a new element by tag name , and add it as the first child .", "mask function for creating x f masks", "test for whether an api key has specific permissions using its internal id .", "method that shows overriding the instance variable in a lambda", "returns a list of the children of this node .", "make the request to the twilio api to perform the read .", "move numbers are in the format 1 .", "the loading has failed instantiate a new empty history document", "removes an already registered broadway jmx monitor from the", "changes executing thread name to append the task name if appendtaskname is set to true .", "register a line break for the formatted line", "performs phaselistener processing and invokes the execute method of the phase .", "zooms the graph in by the standard zoom factor .", "creates a new list processes synchronizer .", "called when the internal state has been changed usually by the user pulling .", "sets the request url", "throws runtimeexception to indicate failed assertion .", "removes all components from the container .", "sets the triggergroupwrapper in the paused state .", "check for an existing instance of the same var and assignable type", "write to server outputstream in binary protocol .", "the command that is passed to the container .", "returns the hyperbolic arc cosine of the number .", "look out for a typical error a plugin developer makes .", "enable or disable the use of texture mapping optionally propagating the operation to my children", "decodes ptrs and returns offset from passed index value to first optional parameter parameter", "for normal update pings .", "creates a new runtimestate object .", "the dopost method of the servlet .", "add delta to total blocking timeout", "updates the selection color on all components", "get the enum definition for the given guid", "obtain a string which has no parameters and always produces the value .", "perform an escape operation , based on a reader , according to the specified level and type and writing the result to a writer .", "determines if a resource is a controller .", "add not null entry to list", "returns the next point around a line ( more or less )", "returns an enumeration describing the available options .", "if given object is a qname compares local name and namespace not prefix", "adds a reference type id to the end of jdwp packet", "if default fetch group fields will be intercepted on a", "opens an input file which could be a . dex or a . jar . apk with a classes . dex inside .", "prints an array length expression", "populate data to the presenter", "send emergency stop to a slot", "save user profile", "updates the table with the children from the given content collection", "process the pattern references and extract the list of distinct interaction words .", "this operation sets the inicecore to which the itemprocessor directs its requests", "erases all edges of the given loop and marks them as unused .", "issues a request to leave our current location .", "gets prototype source file", "set the value related to the column martial", "removes a set of values from the action values", "makes sure all garbage is cleared from the memory .", "return true whether this template should match by uid only if such provided or with full match regardless present if uid .", "close the closeable .", "read the slot header of a page .", "determines whether a register currently holds a value or not .", "removes a listener object from the code node .", "utility method to trim and put parenthessis in the expected ldap filter format for a string representing the ldap filter .", "create a directory path", "called when tcp enters opened state", "part of the json api .", "re - size a specified chunk on its backed memory pool .", "build a generated job with only one step in it to submit to the", "pushes scope id as the new current executing scope in the scope stack of this thread .", "returns the run shell script with the correct extension", "fluent method for adding query and form parameters to a get ( ) or post ( ) call .", "call to continue the download .", "calculates number of routes having the specified version .", "creates an audit log filter implemented in a script .", "removes irrelevant weak references from the static traceable loggers map .", "opens the analysis", "removes element at given position from the collection", "this method should not assume a reader lock is obtained when accessing it", "set string parameter value", "reads error response and returns it as a string .", "this adds a property descriptor for the uid feature", "you are not supposed to instantiate this class .", "sets the sets of parameters for all services", "add a property change listener", "deletes dynamic groups in this group .", "returns the size in bytes of a primitive int .", "make a request via pennstation and keep track of the requestid .", "process an html get or post .", "determine if the given statement is part of the exercised code", "returns the index of the next value in the data structure or a negative value if the iterator is exhausted .", "in this method properties that are not relevant for cluster member are removed for example : com . j _ spaces . core . container . directory _ services . jndi . url", "retrieves the value of the ' indexed _ by _ default ' protobuf option from the schema file defining the given message descriptor .", "traverses the tree by recursion", "construct a tokenizer that parses tokens from the given text .", "[ , + / - , rrx ] ! 0b11 / ror or rrx / if shift _ imm = = 0 then / rrx / index = ( c flag logical _ shift _ left 31 ) or ( rm logical _ shift _ right 1 ) else / ror / index = rm rotate _ right shift _ imm if u = = 1 then address = rn + index else / u = = 0 / address = rn - index if conditionpassed ( cond ) then rn = address", "indicates what kind of element the annotation was found on", "construct a matrix from a copy of a 2 - d array .", "clean all references for the given device", "sets the data3", "get a soap service from the current servicedescriptor", "calculate the reference date based on the global evaluation date", "sets the state of the graphic instance", "the remove method is used to remove the named token pair from the collection of tokens", "invoked with the results from a link rendererbuilder .", "set accessor for xmax", "use this api to renumber nspbr6 .", "register a panel for a ui extension point .", "once the previous slide has disappeared , we remove its view from our hierarchy and add it to the views that can be re - used .", "add a guild into the guilds collection", "set this matrix to a rotation transformation to make - z point along dir .", "this either creates a new requestinfo or gets the cached instance from the reqeust", "overloads the left shift operator to provide an append mechanism to add things to the output stream of a socket", "returns the radius of the circle", "gets the subtable array offset as set in the original table as read from the font file .", "the dopost method of the servlet .", "computes an output row block size that ensures matrix block alignment and contains at most frameblock . buffer _ size cells per block .", "list probes categories to get category name", "computes the bleu sufficient statistics on a hypothesis .", "set activity - s locale to sharedpreferences - setting .", "generate where clause of current model class", "visit the children of the constructor", "remove the keyboard accelerator at the specified index .", "creates a new instance of outlinefont", "called when the user has dismissed the maoni feedback form without having touched the send feedback button", "update the value of key in map", "searches all cells in the workbook for the string occurrence and replaces with the replacement text", "fires an \" object changed \" event to registered naminglisteners .", "removes a group from this track", "caution not stack safe", "advances parsing pointer gets next character", "close plog file .", "you are not supposed to instantiate this class .", "checks database metadata to see if a table exists .", "post a stream event generically .", "functions specialised for primitives", "returns md5 hash of given string .", "do the tagging", "calculates the ideal frequency response ( c ) of the current extremal index set .", "uses buffer . flip ( ) and then buffer . clear ( )", "sets the ignoretrailingblanks property .", "waits for all the results indefently .", "add actions to action state execution list at .", "deletes all rows in the specified table column matching the column value specified .", "23 * returns true if view ' s layout direction is right - to - left .", "the likelihood of a tag in given document .", "returns true if the view should be rendered inside the view window taking into account the offset applied by the scroll effect .", "override the default naming strategy for the default datasource given a class or a full class name .", "execute some junit test code inside a detector class running inside a findbugs analysis run .", "copies all of the mappings from the specified map to this hashmap", "invokes platform specific functionality to handle a window message", "gets an array of all methods in a class hierarchy walking up to parent classes", "given a full hostname , return the word upto the first dot .", "deserializes a specified file .", "sets the values of options using the values in properties .", "use a triggerkey with the given name and default group to identify the trigger .", "performs a delegation request that will yield a new auth0 ' id _ token ' .", "given a string of url options eg .", "update quantity in order", "converts the results of an \" info \" command to a map", "rewrites method definitions as global functions that take \" this \" as their first argument .", "schedules a job to update the centroid information of the given forum", "removes a tablelistener from this table .", "add subzone to tree if not existing", "escape all special characters of the regular expresson language", "counts a total sum of chunks inside a vector .", "submit the task form to save the changes", "returns true if this cache has been closed .", "checks if a list of string contains a string while ignoring case", "invokes the before authentication filter .", "gets all years known by the data pool", "renders container nodes that display compact information about the tagged nodes .", "see if an activity contains a resource", "adds a file to the classpath if it exists .", "check if the currentuser is an internaluser .", "creates a new halt reply synchronizer .", "configures an existing button appropriately based on this label infos properties", "returns ( method , params ) for the given service or ( null , null ) if not method was found .", "appends a standard java source code representation of this subtree to the given string buffer .", "add module to modules and add it to the menu", "invoked after the current register tracking results changed .", "marshall the given parameter object .", "if not already created , a new default - validated - executable - types element with the given value will be created .", "creates a new cursor and returns it", "describes the popup class information", "gets the removed attribute of the copy object", "login with username and password for a register user", "writes the exception data to the faultdetails", "removes the indicated table .", "internal close all fulltext settings , freeing up memory .", "processes all global hashes names with specific processor", "returns an instance of framework object .", "converts the java object into a string and creates a sesame literal", "determines the application of the module call", "the end of the dtd external subset", "disables or enable all the buttons of the gridfield", "gets a double out of a properties object .", "confirm that read only log preparation fails if the log does not exist .", "creates a new address space node .", "create a descriptor containing a reference", "checks that the type of the given opcode is equal to the given type .", "sets the display mode .", "first , un - rotate image and crop rectangles ( make image rectangle axis - aligned ) .", "test if a report has two parameters with names start _ date and end _ date , of type date and with single selection", "fetches a exchange rate from the repository .", "moves an entry to a given destination folder .", "provides placeholder column names for when the file read has no header", "called to notify that setup is complete .", "adds a else statement", "parses an afm file from a local file", "adds the option to batch more than one create statement", "a list of topic arns .", "get the next token with the constraints", "just make easier to understand", "a connect action was unsuccessful notify the user and update client history", "sets the accesskey attribute value .", "decrement a java . sql . date by one day .", "add media content and media text elements for an image and caption", "update a topic .", "gets the current time of the measuring running now", "this adds a property descriptor for the tag feature", "swftagtypes interface save the text font character code info", "copies another geometry3d ' s bufferinfo objects .", "initializes the comment of an instruction .", "method to register a new user , user will automatically be added to the default user _ level ( 1 ) new users will be automatically added to the organisation with the id specified in the configuration value default _ domain _ id", "range job by from to and order", "returns true if the components registration state has changed", "map a bit value to another but value", "writes the header comment with the optional title author license etc", "add a class to the list of implied classes for this class", "draws a range marker .", "retrieves the item the given distance from the end of the suffix .", "constructor for use when converting from sxw format to pocket word format", "create a user nkey from the provided random number generator .", "obtains the background of the button bar from the activity ' s theme .", "creates a new chapter", "creates a new chapter sub chapter text ending at that offset", "sets the smallest allowed value", "returns a pdfobject as a pdfstream resolving indirect references", "serializes the given actor", "get the complete cmac tag of the whole message provided", "visit with a visitor", "disassociates the specified ip access control group from the specified directory .", "appends the vm selection messages to the header , already created .", "helper method to apply the path animator .", "same sendrequest , but in this case , we do not receive a data table with modifications .", "gets the index of the field in this period .", "returns documents based on their key", "utility method to deal with facade methods that accept variable length arguments .", "append a global code node comment .", "metodo para las busquedas de procedimientos desde el formulario de busquedas rapida", "implementation of setastext", "write a ushort value .", "re - throw as an eval error , prefixing msg to the message and specifying the node .", "tests the final property of this configuration .", "extracted urls from the given list of", "creates an instance of catalog resolver .", "resume async interaction chat", "present a . k . a spot variance", "the observed property has been changed", "assert that string is not null nor empty", "reads into a character buffer using the correct encoding .", "sets the javax xml transform transformerfactory system property to the transformer described by this transformerdescriptor", "loads a new path and target into the corridor .", "checks if a new worker can be added with respect to current pool state and the given bound ( either core or maximum ) .", "returns the resource to the pool or discards it if the resource is no longer cached .", "creates the main frame menu bar", "creates an iterator over the specified map", "updates the border text of the component .", "set a custom formatter for the month / year title", "creates an idquery using the specified type id routing and query result type .", "this method is called if a listener throws something while handling an event .", "moves the active unit in a specified direction", "returns the first character of the current element .", "generate f0 values for voiced frames out of hmms", "returns the approximate display width of the string , measured in units of ascii characters .", "removes a listener object from the process .", "notifies all listener of an event", "remove a specific filter", "removes a previously listening listener object .", "constructor for primary key", "use this api to unset the properties of sslvserver resource .", "renders a single coordinate", "open the database connection .", "open a single url with a prompt if enabled or if the prompt is forced by the parameter .", "navigate to this activity start activity with material transition we use startactivityforresult ( ) method to be able to deliver the chosen avatar on profileactivity", "removes the given header .", "this operation merge the contents of two json arrays .", "creates a new buttoncolors object .", "creates a mock with some non - standard settings .", "waits for specified number of milliseconds .", "return the tests included in this test suite .", "easing equation function for an exponential t easing in out acceleration until halfway then deceleration .", "read attributes from stream .", "returns a stopwatch that has been started and will automatically record its result to the dynamic timer specified by the given name , and sequence of ( key , value ) pairs .", "removes a breakpoint from an indirect call .", "return workers not assigned to any affinity pool at all .", "create a new approval builder that will be able to approve objects from the specified class type .", "utility method to run a testng test .", "informs the eviction strategy on a cacheentry use .", "updates the audio track latency and playback position parameters .", "invoke when first displayed to load and present options", "shows the prompt to request user input .", "sets or removes a breakpoint at a given line of a code node .", "query for values up to the limit", "adds a projection that allows the criteria to return the distinct property count", "deserialize an atom service xml document into an object", "external transaction is a re - use of database instance already bound to thread .", "set whether or not this channel is enabled", "absolute value of in - phase component", "inject initial setting for admin list", "inject in some additional properties", "verify that backups that are not enabled for hot backup fail if we try to run them hot .", "compute e to the power of the complex number", "returns how many times rectangle stripe cross path or the are intersect", "called when protocol requests packet transfer through the network .", "creates a new cleaner .", "parse the url and get the host and port string .", "add this key area description to the record .", "checks fields api is consistent with itself .", "calculation perceptionactivation of all chunks in perceptionbuffer", "updates the dialog according to the state of the active formula .", "subscribes to link state changes of the endpoints .", "kills a particular session .", "takes the provider endpoint string provided and parses it into the appropriate number of trmendpoint objects , which are then added to the endpoints list parameter of this class .", "checks if is solaris .", "the formalcharge on the object", "prepare current instruction for printing by removing internal delimiters .", "configure to process all json configuration files if enabled", "returns the position of the first space or at or after position col in str or str . size if there is none .", "initialize backup chain to workspace backup .", "instantiates a new disallow characters validator .", "adds a string reference , a class reference , a method type , a module or a package to the constant pool of the class being build .", "handles the closedselectorexception error .", "constructs a new requestparams instance containing the key value string params from the specified map .", "checks if the class is an anonymous class", "called when a new station element has occurred and its ids retrieved", "on check collection attribute .", "notify the generation when source is drained on an unused partition .", "build the executable part of a commandline object", "instead of reading the file at once , reads the file by reading 2k blocks .", "leave the current activity through a auto determined leaving transition this method is not supposed to be invoked by user", "parse data for a ddl change", "adds a new result to this observation", "returns a boolean indicating whether a bundle contains properties that could be a valid saved token .", "paints this jlayeredpane within the specified graphics context .", "process and respond to an incoming packet .", "removes a cms event listener .", "updates an existing project milestone .", "generates a human readable representation of the object e g coin dice or a symbolic representation like w7", "returns true if the mpeg frames are padded in this file", "creates a new repositorysystemsession .", "returns the uri from the httpservletrequest after canonicalizing and filtering out any dangerous characters", "removes the player from the room", "enable disable scale to fit mode", "this lifecycle method is called to retrieve the layoutmanageable component that is currently associated with this layoutmanager", "converts a way with potential inner ways to a jts geometry .", "validates that the index is within the bounds of the argument character sequence ; otherwise throwing an exception .", "removes the given entity from the inverse associations it manages .", "return a list of two lists generated by applying a predicate to each element ; the first list contains those for which it returns true , the second , false .", "compute positions of movenodes using the supplied translator .", "if this localisation has a temporary uuid associated with it , it will be replaced with the uuid passed in on the call .", "identifies and use vnx specific attributes to read the corresponding values from vnx storage pool indication", "restore authentications from persisted state .", "remove this entry from the linked list .", "shut down a running server after an error .", "adds review id so as to open review id addition wizard", "convert byte array to bitmap", "starts the dispatchers in this queue .", "write an end of line to the console .", "delete item . attributesets i and return the new array .", "comparator returning 0 should leave elements in list alone , preserving original order .", "write out a tile .", "fallback method for getreviews", "creates test table metadata .", "event handler method", "creates a new deprecation logger based on the parent logger .", "returns active metadata files possibly including publisher , data preparer and application identifier as well as abstract , bibliographic and copyright file", "creates new cold observable , given future provider , on each subscribe will consume the provided future and repeat until stop criteria will exists each result will be emitted to the stream", "checks if the partial behavior graph constructed up to now contains any bad cycle .", "marshall the given parameter object .", "add url to service whitelist", "invoked after a new view was created in the module .", "if entryholder is used as lockobject for example in all in cache its the lock subject itself", "compute the distance between the two chars based on the ascii symbol codes .", "the record count should be the last component before the filename extension .", "shuffling algorithm randomly permutes the specified int array using a default source of randomness", "creates a new listener object .", "if this is an interface list all classes that implement this interface", "finds the initiator ports on the vplex corresponding to the ports specified in the passed port information .", "computes the message digest for an input stream .", "add a polygon to the map", "parse the @ requestmapping from the mvc action method .", "use this api to fetch filtered set of dbdbprofile resources .", "tells whether or not this encoder can encode the given character .", "cancel repeat send command", "perform a scroll upwards and adapt the overscroll amounts accordingly", "create and launch new format for table", "returns but does not remove next event from the queue if it exists or returns null if queue is empty .", "called when one of the subscribed edges in the parent view has been touched by the user while no child view is currently captured .", "flush all queued requests and close network connection", "adds a node to the graph .", "decodes all of the provided data , starting at inpos , for inavail bytes .", "paint the component on the gui", "returns a copy of the entire phrase", "update the drawing while moving the mouse .", "notify all children that a service has been revoked .", "returns the stream contents as an utf - 8 encoded string", "debugs the properties to the log or console", "factory to create a new instance of a transaction", "retrieves the maximum weighted capacity of the map .", "rewrite a method signature .", "generates the preparedstatement for adding a link to the linking table", "drops a driver from the drivermanager ' s list .", "returns the complemented incomplete gamma function .", "initialize the socketstream with a new socket .", "parses the date defined in the application configuration properties as ontrack . version . date .", "creates a new input field object .", "return a list of current channel assignments .", "returns a clone of this range", "strips any segment name from the file , naming it with this segment this is because \" segment names \" can change , e . g . by addindexes ( dir )", "this will launch the android market looking for busybox", "inserts a sequence of statements before the start of this sequence when the sequence object is not null , otherwise does nothing .", "get the next ready request for a given jbps", "reset finished from true to false", "the parent can only take one string .", "attempts to convert a module class name to an instantiate module by applying heuristics to construct it .", "add some vertical space after the last added component", "internalxtext . g : 645 : 1 : entryruleconjunction : ruleconjunction eof ;", "creates a nooperation item", "cleans up expired sessions .", "returns an existing rwlock for the specified key or null if not found", "represent a d vector in string form", "returns the list of voices that are available for use when requesting speech synthesis .", "find and set the object value of a given field named name in the receiver .", "starts listening to step count in real time", "creates a new typedquery that queries the amount of entities of the entity class of this queryfactory , that a query for the given filter would return .", "generates the code for the default switch case .", "checks if is editable .", "process the drop probabilities of a creature"], "label": ["what", "how-to-use", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "property", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "why", "property", "what", "how-it-is-done", "what", "how-to-use", "what", "how-it-is-done", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "why", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "what", "what", "how-to-use", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "property", "why", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "what", "why", "how-it-is-done", "what", "how-it-is-done", "others", "what", "what", "how-it-is-done", "how-it-is-done", "what", "others", "why", "why", "what", "what", "what", "why", "what", "what", "what", "what", "why", "property", "property", "property", "why", "why", "what", "why", "why", "what", "why", "how-it-is-done", "what", "what", "what", "what", "what", "property", "how-it-is-done", "what", "what", "others", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "what", "why", "how-it-is-done", "what", "what", "what", "what", "property", "what", "what", "what", "why", "why", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-it-is-done", "how-to-use", "how-it-is-done", "what", "what", "how-it-is-done", "property", "how-it-is-done", "what", "what", "property", "what", "property", "what", "why", "why", "what", "what", "what", "what", "others", "why", "how-it-is-done", "what", "what", "what", "how-to-use", "how-it-is-done", "what", "why", "what", "what", "what", "how-it-is-done", "what", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "how-it-is-done", "why", "what", "what", "why", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "what", "property", "what", "what", "why", "what", "what", "how-to-use", "what", "what", "how-it-is-done", "what", "property", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "property", "why", "what", "why", "what", "what", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "why", "what", "why", "what", "what", "what", "why", "why", "how-to-use", "why", "what", "what", "property", "property", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "how-to-use", "what", "what", "how-it-is-done", "what", "property", "how-it-is-done", "property", "what", "how-to-use", "what", "property", "what", "what", "why", "how-it-is-done", "why", "how-it-is-done", "what", "what", "how-it-is-done", "property", "what", "what", "property", "why", "what", "what", "what", "what", "property", "how-it-is-done", "how-it-is-done", "what", "property", "why", "property", "what", "why", "what", "what", "what", "property", "property", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "property", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "property", "what", "how-to-use", "what", "what", "how-it-is-done", "why", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "property", "why", "what", "how-it-is-done", "how-to-use", "what", "what", "why", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "property", "why", "what", "property", "property", "what", "how-it-is-done", "property", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "why", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "why", "what", "how-it-is-done", "why", "property", "what", "what", "what", "why", "what", "what", "how-to-use", "what", "what", "how-it-is-done", "why", "what", "why", "what", "property", "property", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "how-it-is-done", "what", "why", "how-it-is-done", "property", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "property", "what", "property", "what", "what", "property", "others", "what", "how-it-is-done", "what", "property", "what", "why", "why", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "property", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "property", "how-to-use", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "why", "property", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "property", "what", "what", "why", "what", "property", "property", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "property", "why", "others", "what", "what", "others", "what", "what", "what", "what", "why", "property", "what", "what", "what", "what", "property", "what", "what", "why", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "how-to-use", "why", "property", "why", "what", "property", "property", "what", "what", "why", "what", "property", "what", "what", "what", "property", "what", "what", "what", "why", "what", "what", "what", "what", "what", "what", "property", "how-it-is-done", "how-it-is-done", "what", "property", "how-it-is-done", "how-it-is-done", "property", "what", "how-to-use", "what", "what", "what", "property", "what", "what", "property", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "property", "property", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "property", "property", "what", "how-it-is-done", "property", "what", "others", "what", "what", "what", "what", "what", "property", "property", "property", "what", "how-it-is-done", "others", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "why", "what", "what", "what", "what", "how-it-is-done", "property", "what", "what", "why", "property", "property", "how-it-is-done", "what", "what", "how-it-is-done", "how-to-use", "what", "what", "how-it-is-done", "what", "property", "property", "what", "what", "property", "what", "what", "what", "what", "what", "property", "how-it-is-done", "how-to-use", "what", "property", "how-it-is-done", "what", "property", "why", "what", "what", "property", "how-it-is-done", "what", "what", "what", "property", "what", "how-to-use", "why", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "why", "how-it-is-done", "what", "property", "property", "what", "what", "what", "property", "how-it-is-done", "property", "what", "property", "property", "what", "how-it-is-done", "how-it-is-done", "what", "property", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "property", "property", "what", "what", "what", "property", "how-it-is-done", "how-it-is-done", "others", "what", "what", "what", "what", "why", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "why", "why", "others", "what", "why", "what", "what", "how-it-is-done", "property", "what", "what", "how-it-is-done", "what", "why", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "what", "how-it-is-done", "how-to-use", "what", "what", "why", "what", "how-it-is-done", "what", "what", "what", "property", "how-to-use", "how-it-is-done", "why", "what", "how-to-use", "property", "how-it-is-done", "what", "what", "property", "what", "others", "what", "why", "what", "what", "what", "why", "what", "property", "what", "what", "what", "what", "why", "what", "why", "why", "what", "how-it-is-done", "what", "property", "what", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "property", "why", "what", "what", "how-it-is-done", "what", "what", "what", "what", "why", "property", "what", "what", "how-it-is-done", "how-to-use", "how-it-is-done", "what", "property", "how-it-is-done", "others", "what", "why", "why", "what", "what", "how-it-is-done", "what", "what", "what", "property", "how-it-is-done", "how-it-is-done", "what", "what", "what", "property", "what", "what", "property", "what", "what", "property", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "what", "how-it-is-done", "how-to-use", "why", "what", "what", "why", "why", "what", "property", "why", "why", "what", "what", "what", "what", "property", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "what", "property", "how-it-is-done", "what", "how-it-is-done", "how-to-use", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "property", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "why", "what", "what", "property", "what", "what", "what", "what", "why", "what", "why", "why", "property", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "why", "what", "what", "what", "why", "how-it-is-done", "why", "what", "how-it-is-done", "what", "how-it-is-done", "what", "property", "what", "what", "what", "how-it-is-done", "what", "property", "what", "property", "why", "what", "what", "how-it-is-done", "what", "what", "property", "property", "what", "what", "what", "property", "what", "others", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "property", "property", "what", "what", "what", "how-it-is-done", "property", "why", "why", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "why", "property", "what", "others", "property", "what", "what", "what", "what", "why", "how-it-is-done", "what", "property", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "property", "why", "what", "what", "why", "how-to-use", "how-it-is-done", "what", "what", "property", "what", "property", "why", "what", "how-it-is-done", "what", "what", "how-to-use", "property", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "why", "why", "what", "what", "how-it-is-done", "what", "why", "what", "what", "what", "property", "property", "how-it-is-done", "why", "how-it-is-done", "what", "how-to-use", "how-to-use", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "property", "what", "what", "what", "what", "what", "what", "why", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "what", "how-it-is-done", "property", "what", "property", "what", "what", "why", "what", "what", "why", "what", "what", "why", "what", "what", "what", "property", "what", "how-it-is-done", "how-it-is-done", "property", "how-it-is-done", "what", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-to-use", "why", "why", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "how-to-use", "what", "what", "what", "what", "what", "what", "property", "what", "what", "why", "why", "what", "property", "what", "what", "how-it-is-done", "what", "what", "why", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "how-to-use", "what", "why", "property", "how-it-is-done", "what", "what", "what", "why", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "why", "why", "what", "what", "why", "what", "what", "what", "why", "what", "why", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "why", "how-it-is-done", "what", "how-it-is-done", "what", "what", "property", "how-to-use", "property", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "why", "how-it-is-done", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "why", "what", "what", "what", "how-it-is-done", "how-it-is-done", "why", "property", "how-it-is-done", "what", "why", "what", "what", "what", "what", "property", "what", "how-to-use", "why", "how-it-is-done", "how-it-is-done", "what", "what", "what", "how-to-use", "what", "how-it-is-done", "what", "how-it-is-done", "what", "what", "property", "how-it-is-done", "why", "what", "how-it-is-done", "what", "how-it-is-done", "what", "why", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "property", "property", "what", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "property", "how-it-is-done", "why", "what", "why", "property", "what", "how-it-is-done", "how-to-use", "what", "why", "why", "what", "property", "what", "what", "how-it-is-done", "property", "what", "how-it-is-done", "what", "property", "property", "what", "what", "how-to-use", "how-it-is-done", "what", "how-it-is-done", "what", "what", "what", "what", "what", "why", "how-it-is-done", "what", "what", "what", "what", "what", "property", "why", "what", "what", "what", "others", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "how-it-is-done", "why", "what", "what", "property", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "property", "what", "how-to-use", "what", "how-it-is-done", "what", "what", "what", "how-to-use", "what", "how-it-is-done", "how-it-is-done", "why", "what", "how-it-is-done", "property", "what", "what", "how-to-use", "property", "what", "property", "what", "what", "why", "what", "property", "why", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "property", "what", "what", "what", "what", "what", "property", "what", "how-it-is-done", "what", "why", "what", "what", "how-it-is-done", "what", "why", "what", "how-it-is-done", "what", "how-it-is-done", "property", "property", "how-it-is-done", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "why", "what", "how-to-use", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "how-to-use", "what", "what", "what", "property", "how-it-is-done", "what", "what", "property", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "others", "what", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "what", "how-to-use", "what", "what", "what", "why", "how-it-is-done", "what", "how-it-is-done", "how-it-is-done", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "how-to-use", "what", "why", "what", "what", "what", "what", "what", "others", "what", "what", "what", "property", "what", "what", "how-it-is-done", "what", "what", "what", "what", "property", "what", "property", "how-to-use", "how-it-is-done", "what", "why", "what", "property", "what", "how-it-is-done", "why", "how-it-is-done", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "why", "property", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "property", "what", "how-it-is-done", "how-to-use", "what", "how-it-is-done", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "property", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "what", "what", "why", "what", "what", "what", "how-it-is-done", "what", "what", "what", "what", "what", "what", "what", "what", "what", "why", "what", "what", "what", "how-it-is-done", "what", "property", "how-it-is-done", "what", "why", "what", "what", "why", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "what", "why", "what", "property", "what", "what", "what", "what", "what", "property", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "property", "what", "what", "what", "why", "how-it-is-done", "how-to-use", "what", "property", "why", "property", "what", "what", "what", "what", "why", "what", "what", "what", "how-to-use", "how-it-is-done", "what", "what", "what", "what", "what", "property", "what", "what", "property", "what", "property", "how-it-is-done", "how-to-use", "what", "what", "what", "why", "what", "what", "how-it-is-done", "what", "what", "what", "what", "why", "what", "what", "what", "property", "how-to-use", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "what", "what", "why", "property", "property", "what", "what", "how-it-is-done", "what", "how-it-is-done", "what", "how-to-use", "what", "what", "what", "how-it-is-done", "how-to-use", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "property", "what", "property", "what", "what", "why", "how-it-is-done", "property", "what", "property", "how-it-is-done", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "how-it-is-done", "what", "what", "how-it-is-done", "how-it-is-done", "what", "what", "what", "what", "what", "property", "how-it-is-done", "what", "what", "what", "how-to-use", "why", "how-it-is-done", "what", "how-it-is-done", "what", "why", "what", "what", "what", "what", "what", "what", "what", "how-it-is-done", "why", "property", "how-to-use", "what", "how-it-is-done", "why", "what", "property", "what", "what", "property", "what", "what", "what", "what", "how-it-is-done", "what", "property", "what", "what", "what", "property", "property", "how-it-is-done", "why", "how-it-is-done", "what", "what", "what", "how-it-is-done", "what", "others", "what", "what", "how-it-is-done", "what", "property", "what", "what", "how-it-is-done", "why", "what", "what"]}