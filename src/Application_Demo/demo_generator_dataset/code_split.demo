{"ids": "31356", "code": ["public int hash Code ( ) {", "return value . hash Code ( ) ; }"]}
{"ids": "67737", "code": ["protected void write Qualified Name ( String ns Alias , String name ) throws IO Exception {", "if ( ns Alias != null && ns Alias . length ( ) > NUM_ ) {", "writer . write ( ns Alias ) ;", "writer . write ( STR_ ) ; }", "writer . write ( name ) ; }"]}
{"ids": "59655", "code": ["< T > List < T > on Find ( Class < T > model Class , String [ ] columns , String [ ] conditions , String order By , String limit , boolean is Eager ) {", "Base Utility . check Conditions Correct ( conditions ) ;", "List < T > data List = query ( model Class , columns , get Where Clause ( conditions ) , get Where Args ( conditions ) , null , null , order By , limit , get Foreign Key Associations ( model Class . get Name ( ) , is Eager ) ) ;", "return data List ; }"]}
{"ids": "10353", "code": ["private boolean is Agent Empty ( Agent agent ) {", "if ( agent != null ) {", "String first = agent . get First Name ( ) ;", "String last = agent . get Last Name ( ) ;", "String email = agent . get Email ( ) ;", "String home = agent . get Homepage ( ) ;", "String org = agent . get Organisation ( ) ;", "String phone = agent . get Phone ( ) ;", "String position = agent . get Position ( ) ;", "String city = null ;", "String street = null ;", "String country = null ;", "String code = null ;", "String province = null ;", "Address address = agent . get Address ( ) ;", "if ( address != null ) {", "city = address . get City ( ) ;", "street = address . get Address ( ) ;", "country = address . get Country ( ) ;", "code = address . get Postal Code ( ) ;", "province = address . get Province ( ) ; }", "String directory = null ;", "String identifier = null ;", "List < User Id > user Ids = agent . get User Ids ( ) ;", "if ( ! user Ids . is Empty ( ) ) {", "User Id user Id = user Ids . get ( NUM_ ) ;", "directory = user Id . get Directory ( ) ;", "identifier = user Id . get Identifier ( ) ; }", "return ( Strings . is Null Or Empty ( city ) && Strings . is Null Or Empty ( street ) && Strings . is Null Or Empty ( country ) && Strings . is Null Or Empty ( code ) && Strings . is Null Or Empty ( province ) && Strings . is Null Or Empty ( first ) && Strings . is Null Or Empty ( last ) && Strings . is Null Or Empty ( email ) && Strings . is Null Or Empty ( home ) && Strings . is Null Or Empty ( org ) && Strings . is Null Or Empty ( phone ) && Strings . is Null Or Empty ( position ) && Strings . is Null Or Empty ( directory ) && Strings . is Null Or Empty ( identifier ) ) ; }", "return true ; }"]}
{"ids": "55172", "code": ["public static byte [ ] calendar To Raw Bytes ( Calendar timestamp , boolean honor Device Time Offset ) {", "if ( honor Device Time Offset ) {", "int offset In Hours = Mi Band Coordinator . get Device Time Offset Hours ( ) ;", "if ( offset In Hours != NUM_ ) {", "timestamp . add ( Calendar . HOUR OF DAY , offset In Hours ) ; } }", "byte [ ] year = from Uint 16 ( timestamp . get ( Calendar . YEAR ) ) ;", "return new byte [ ] { year [ NUM_ ] , year [ NUM_ ] , from Uint 8 ( timestamp . get ( Calendar . MONTH ) + NUM_ ) , from Uint 8 ( timestamp . get ( Calendar . DATE ) ) , from Uint 8 ( timestamp . get ( Calendar . HOUR OF DAY ) ) , from Uint 8 ( timestamp . get ( Calendar . MINUTE ) ) , from Uint 8 ( timestamp . get ( Calendar . SECOND ) ) , day Of Week To Raw Bytes ( timestamp ) , NUM_ } ; }"]}
