{"ids": "31356", "raw_code": "public int hashCode(){\n  return value.hashCode();\n}"}
{"ids": "67737", "raw_code": "protected void writeQualifiedName(String nsAlias,String name) throws IOException {\n  if (nsAlias != null && nsAlias.length() > 0) {\n    writer.write(nsAlias);\n    writer.write(':');\n  }\n  writer.write(name);\n}"}
{"ids": "59655", "raw_code": "<T>List<T> onFind(Class<T> modelClass,String[] columns,String[] conditions,String orderBy,String limit,boolean isEager){\n  BaseUtility.checkConditionsCorrect(conditions);\n  List<T> dataList=query(modelClass,columns,getWhereClause(conditions),getWhereArgs(conditions),null,null,orderBy,limit,getForeignKeyAssociations(modelClass.getName(),isEager));\n  return dataList;\n}"}
{"ids": "10353", "raw_code": "private boolean isAgentEmpty(Agent agent){\n  if (agent != null) {\n    String first=agent.getFirstName();\n    String last=agent.getLastName();\n    String email=agent.getEmail();\n    String home=agent.getHomepage();\n    String org=agent.getOrganisation();\n    String phone=agent.getPhone();\n    String position=agent.getPosition();\n    String city=null;\n    String street=null;\n    String country=null;\n    String code=null;\n    String province=null;\n    Address address=agent.getAddress();\n    if (address != null) {\n      city=address.getCity();\n      street=address.getAddress();\n      country=address.getCountry();\n      code=address.getPostalCode();\n      province=address.getProvince();\n    }\n    String directory=null;\n    String identifier=null;\n    List<UserId> userIds=agent.getUserIds();\n    if (!userIds.isEmpty()) {\n      UserId userId=userIds.get(0);\n      directory=userId.getDirectory();\n      identifier=userId.getIdentifier();\n    }\n    return (Strings.isNullOrEmpty(city) && Strings.isNullOrEmpty(street) && Strings.isNullOrEmpty(country)&& Strings.isNullOrEmpty(code)&& Strings.isNullOrEmpty(province)&& Strings.isNullOrEmpty(first)&& Strings.isNullOrEmpty(last)&& Strings.isNullOrEmpty(email)&& Strings.isNullOrEmpty(home)&& Strings.isNullOrEmpty(org)&& Strings.isNullOrEmpty(phone)&& Strings.isNullOrEmpty(position)&& Strings.isNullOrEmpty(directory)&& Strings.isNullOrEmpty(identifier));\n  }\n  return true;\n}"}
{"ids": "55172", "raw_code": "public static byte[] calendarToRawBytes(Calendar timestamp,boolean honorDeviceTimeOffset){\n  if (honorDeviceTimeOffset) {\n    int offsetInHours=MiBandCoordinator.getDeviceTimeOffsetHours();\n    if (offsetInHours != 0) {\n      timestamp.add(Calendar.HOUR_OF_DAY,offsetInHours);\n    }\n  }\n  byte[] year=fromUint16(timestamp.get(Calendar.YEAR));\n  return new byte[]{year[0],year[1],fromUint8(timestamp.get(Calendar.MONTH) + 1),fromUint8(timestamp.get(Calendar.DATE)),fromUint8(timestamp.get(Calendar.HOUR_OF_DAY)),fromUint8(timestamp.get(Calendar.MINUTE)),fromUint8(timestamp.get(Calendar.SECOND)),dayOfWeekToRawBytes(timestamp),0};\n}"}
